00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/Tracker player/player.p2asm"
00000                 | con
00000                 | 	_clkfreq = 319215686
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 28 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 68 F0 07 F1 | 	add	ptra, ##2152
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 96 E5 80 FF 
00428 009 00 F0 67 FD | 	hubset	##30092792
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 96 E5 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##30092795
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 6C 83 89 FF 
00448 011 14 6C 6D FC | 	wrlong	##319215798, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 60 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5A 62 FD | 	cogid	arg01
00614 084 03 5A 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 29 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5B 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5D 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 5F 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 61 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 28 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 5E 56 F0 |         shr	arg03, #1 wc
00688 0a1 2D 5D 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5A 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5C FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 5E 56 F0 |         shr	arg03, #1 wc
00698 0a5 2D 5D 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5A 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2E 5D 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2D 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 5E 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 2F 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5C 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 69 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 69 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 85 09 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0A 63 FD |        getqx   muldivb_
00740 0cf 19 08 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 84 09 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 85 0B 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 84 09 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 85 0B 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 28 06 F6 |     mov result1, #0
00778 0dd 00 2A 06 F6 |     mov result2, #0
0077c 0de 2D 07 02 F6 |     mov abortchain, arg01
00780 0df 2D 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5A 06 F1 |     add arg01, #4
00788 0e1 2D F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5A 06 F1 |     add arg01, #4
00790 0e3 2D 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5A 06 F1 |     add arg01, #4
00798 0e5 2D B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2E 5B 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2D F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5A 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5A 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2E 29 02 F6 |     mov result1, arg02
007d4 0f4 01 2A 06 F6 |     mov result2, #1
007d8 0f5 2D 5D 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5A 06 F1 |     add arg01, #4
007e0 0f7 2D F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5A 06 F1 |     add arg01, #4
007e8 0f9 2D 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5A 06 F1 |     add arg01, #4
007f0 0fb 2D B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5A 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 5E 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 D8 9F 01 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 E0 AF 01 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 84 67 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___system__dat__
00828 109 78 9D 01 00 | 	long	@__system__dat_
0082c 10a             | ptr__audio008_spin2_dat__
0082c 10a 94 8E 01 00 | 	long	@_audio008_spin2_dat_
00830 10b             | ptr__dat__
00830 10b 10 68 00 00 | 	long	@_dat_
00834 10c             | ptr__hng030rm_spin2_dat__
00834 10c 04 59 01 00 | 	long	@_hng030rm_spin2_dat_
00838 10d             | ptr__hng030rm_spin2_putchar_
00838 10d D4 16 00 00 | 	long	@_hng030rm_spin2_putchar
0083c 10e             | ptr__hng030rm_spin2_putpixel1_
0083c 10e 94 13 00 00 | 	long	@_hng030rm_spin2_putpixel1
00840 10f             | ptr__hng030rm_spin2_putpixel2_
00840 10f 7C 14 00 00 | 	long	@_hng030rm_spin2_putpixel2
00844 110             | ptr__hng030rm_spin2_putpixel4_
00844 110 54 15 00 00 | 	long	@_hng030rm_spin2_putpixel4
00848 111             | ptr__hng030rm_spin2_putpixel8_
00848 111 2C 16 00 00 | 	long	@_hng030rm_spin2_putpixel8
0084c 112             | ptr__retrocog_spin2_serialcog_
0084c 112 6C 23 00 00 | 	long	@_retrocog_spin2_serialcog
00850 113             | ptr__trackerplayer_spin2_dat__
00850 113 68 7D 01 00 | 	long	@_trackerplayer_spin2_dat_
00854 114             | result1
00854 114 00 00 00 00 | 	long	0
00858 115             | result2
00858 115 00 00 00 00 | 	long	0
0085c 116             | result3
0085c 116 00 00 00 00 | 	long	0
00860 117             | COG_BSS_START
00860 117             | 	fit	480
00860                 | 	orgh
00860                 | hubentry
00860                 | 
00860                 | _program
00860     1A 5A 05 F6 | 	mov	COUNT_, #26
00864     B0 00 A0 FD | 	call	#pushregs_
00868     40 68 06 F6 | 	mov	local01, #64
0086c     2C 0E 06 F1 | 	add	objptr, #44
00870     07 6B 02 F6 | 	mov	local02, objptr
00874                 | ' 
00874                 | ' ' initialize pointers and variables
00874                 | ' 
00874                 | ' border_ptr:=@bordercolor
00874     24 0E 86 F1 | 	sub	objptr, #36
00878     07 6B 62 FC | 	wrlong	local02, objptr
0087c     08 00 00 FF 
00880     00 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
00884                 | ' font_ptr:=@st_font
00884     04 0E 86 F1 | 	sub	objptr, #4
00888     07 19 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
0088c                 | ' hdmibase:=base
0088c     20 0E 06 F1 | 	add	objptr, #32
00890     07 01 68 FC | 	wrlong	#0, objptr
00894     24 0E 86 F1 | 	sub	objptr, #36
00898     0E 5D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
0089c                 | ' p1:=@putpixel1
0089c     07 5B 02 F6 | 	mov	arg01, objptr
008a0     08 00 00 FF 
008a4     00 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
008a8     38 46 B0 FD | 	call	#__system___make_methodptr
008ac     14 6D 02 F6 | 	mov	local03, result1
008b0     DC 0E 06 F1 | 	add	objptr, #220
008b4     07 6D 62 FC | 	wrlong	local03, objptr
008b8     DC 0E 86 F1 | 	sub	objptr, #220
008bc     0F 5D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
008c0                 | ' p2:=@putpixel2
008c0     07 5B 02 F6 | 	mov	arg01, objptr
008c4     1C 46 B0 FD | 	call	#__system___make_methodptr
008c8     14 6D 02 F6 | 	mov	local03, result1
008cc     E0 0E 06 F1 | 	add	objptr, #224
008d0     07 6D 62 FC | 	wrlong	local03, objptr
008d4     E0 0E 86 F1 | 	sub	objptr, #224
008d8     10 5D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
008dc                 | ' p4:=@putpixel4
008dc     07 5B 02 F6 | 	mov	arg01, objptr
008e0     00 46 B0 FD | 	call	#__system___make_methodptr
008e4     14 6D 02 F6 | 	mov	local03, result1
008e8     E4 0E 06 F1 | 	add	objptr, #228
008ec     07 6D 62 FC | 	wrlong	local03, objptr
008f0     E4 0E 86 F1 | 	sub	objptr, #228
008f4     11 5D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
008f8                 | ' p8:=@putpixel8
008f8     07 5B 02 F6 | 	mov	arg01, objptr
008fc     E4 45 B0 FD | 	call	#__system___make_methodptr
00900     14 6D 02 F6 | 	mov	local03, result1
00904     E8 0E 06 F1 | 	add	objptr, #232
00908     07 6D 62 FC | 	wrlong	local03, objptr
0090c     E8 0E 86 F1 | 	sub	objptr, #232
00910                 | ' 
00910                 | ' 
00910                 | ' ' the mode has to be set here to enable computing the buffer length
00910                 | ' 
00910                 | ' setmode(mode)
00910     40 5A 06 F6 | 	mov	arg01, #64
00914     14 10 B0 FD | 	call	#_hng030rm_spin2_setmode
00918     40 0E 06 F1 | 	add	objptr, #64
0091c     07 6F 02 F6 | 	mov	local04, objptr
00920                 | ' 
00920                 | ' vblank_ptr:=@vblank
00920     34 0E 86 F1 | 	sub	objptr, #52
00924     07 6F 62 FC | 	wrlong	local04, objptr
00928     28 0E 06 F1 | 	add	objptr, #40
0092c     07 71 02 F6 | 	mov	local05, objptr
00930                 | ' cursor_ptr:=@cursor_x
00930     24 0E 86 F1 | 	sub	objptr, #36
00934     07 71 62 FC | 	wrlong	local05, objptr
00938     88 0E 06 F1 | 	add	objptr, #136
0093c     07 73 02 F6 | 	mov	local06, objptr
00940                 | ' 
00940                 | ' fontnum_ptr:=@fontnum
00940     78 0E 86 F1 | 	sub	objptr, #120
00944     07 73 62 FC | 	wrlong	local06, objptr
00948                 | ' 
00948                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
00948     78 0E 06 F1 | 	add	objptr, #120
0094c     07 01 68 FC | 	wrlong	#0, objptr
00950     1C 0E 06 F1 | 	add	objptr, #28
00954     07 5B 02 F6 | 	mov	arg01, objptr
00958     B4 0E 86 F1 | 	sub	objptr, #180
0095c     0F 00 00 FF 
00960     58 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
00964     0C 5D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00968     0F 00 00 FF 
0096c     58 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
00970                 | ' bytemove(@colors,@vgacolors,16)
00970     10 5E 06 F6 | 	mov	arg03, #16
00974     44 44 B0 FD | 	call	#__system____builtin_memmove
00978                 | ' 
00978                 | ' ' initialize a cursor
00978                 | ' 
00978                 | ' cursor_x:=0
00978     34 0E 06 F1 | 	add	objptr, #52
0097c     07 01 48 FC | 	wrbyte	#0, objptr
00980                 | ' cursor_y:=0
00980     01 0E 06 F1 | 	add	objptr, #1
00984     07 01 48 FC | 	wrbyte	#0, objptr
00988                 | ' cursor_sh:=14
00988     01 0E 06 F1 | 	add	objptr, #1
0098c     07 1D 48 FC | 	wrbyte	#14, objptr
00990     36 0E 86 F1 | 	sub	objptr, #54
00994                 | ' 
00994                 | ' 
00994                 | ' ' start the cog
00994                 | ' 
00994                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00994     0F 00 00 FF 
00998     68 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
0099c     0C 5D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009a0     0F 00 00 FF 
009a4     68 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
009a8     07 5F 02 F6 | 	mov	arg03, objptr
009ac     10 5A 06 F6 | 	mov	arg01, #16
009b0     28 5E 62 FD | 	setq	arg03
009b4     2E 5B F2 FC | 	coginit	arg01, arg02 wc
009b8     01 5A 66 C6 |  if_b	neg	arg01, #1
009bc     2D 29 02 F6 | 	mov	result1, arg01
009c0     14 75 02 F6 | 	mov	local07, result1
009c4     28 0E 06 F1 | 	add	objptr, #40
009c8     07 75 62 FC | 	wrlong	local07, objptr
009cc     28 0E 86 F1 | 	sub	objptr, #40
009d0                 | ' waitms(20)
009d0     14 5A 06 F6 | 	mov	arg01, #20
009d4     68 46 B0 FD | 	call	#__system___waitms
009d8                 | ' 
009d8                 | ' ' clear the screen and set the colors to green on black
009d8                 | ' 
009d8                 | ' cls(c_green,c_black)
009d8                 | ' 
009d8                 | ' if (graphmode<512)
009d8     C4 0E 06 F1 | 	add	objptr, #196
009dc     07 77 02 FB | 	rdlong	local08, objptr
009e0     C4 0E 86 F1 | 	sub	objptr, #196
009e4     01 00 00 FF 
009e8     00 76 5E F2 | 	cmps	local08, ##512 wcz
009ec     28 00 90 3D |  if_ae	jmp	#LR__0001
009f0     FF 7F 1C FF 
009f4     E0 79 66 F6 | 	neg	local09, ##956301280
009f8                 | '   c:=fc<<24+bc<<16+$20
009f8                 | '   longfill(buf_ptr,c,buflen)
009f8     07 5B 02 FB | 	rdlong	arg01, objptr
009fc     30 0E 06 F1 | 	add	objptr, #48
00a00     07 5F 02 FB | 	rdlong	arg03, objptr
00a04     30 0E 86 F1 | 	sub	objptr, #48
00a08     00 80 63 FF 
00a0c     20 5C 06 F6 | 	mov	arg02, ##-956301280
00a10     A8 00 A0 FD | 	call	#\builtin_longfill_
00a14                 | ' else
00a14     70 00 90 FD | 	jmp	#LR__0004
00a18                 | LR__0001
00a18                 | '   if (graphmode & 48) ==48
00a18     C4 0E 06 F1 | 	add	objptr, #196
00a1c     07 77 02 FB | 	rdlong	local08, objptr
00a20     C4 0E 86 F1 | 	sub	objptr, #196
00a24     30 76 06 F5 | 	and	local08, #48
00a28     30 76 0E F2 | 	cmp	local08, #48 wz
00a2c                 | '     c:=bc
00a2c     00 78 06 A6 |  if_e	mov	local09, #0
00a30     38 00 90 AD |  if_e	jmp	#LR__0003
00a34                 | '   elseif (graphmode & 48) ==32
00a34     C4 0E 06 F1 | 	add	objptr, #196
00a38     07 77 02 FB | 	rdlong	local08, objptr
00a3c     C4 0E 86 F1 | 	sub	objptr, #196
00a40     30 76 06 F5 | 	and	local08, #48
00a44     20 76 0E F2 | 	cmp	local08, #32 wz
00a48     00 78 06 A6 |  if_e	mov	local09, #0
00a4c                 | '     c:=bc<<4+bc
00a4c     1C 00 90 AD |  if_e	jmp	#LR__0002
00a50                 | '   elseif (graphmode & 48) ==16
00a50     C4 0E 06 F1 | 	add	objptr, #196
00a54     07 77 02 FB | 	rdlong	local08, objptr
00a58     C4 0E 86 F1 | 	sub	objptr, #196
00a5c     30 76 06 F5 | 	and	local08, #48
00a60     10 76 0E F2 | 	cmp	local08, #16 wz
00a64     00 78 06 A6 |  if_e	mov	local09, #0
00a68                 | '     c:=bc<<6+bc<<4+bc<<2+bc
00a68                 | '   else
00a68                 | '     if bc==1
00a68                 | '       c:=255
00a68                 | '     else
00a68                 | '       c:=0
00a68     00 78 06 56 |  if_ne	mov	local09, #0
00a6c                 | LR__0002
00a6c                 | LR__0003
00a6c     30 0E 06 F1 | 	add	objptr, #48
00a70     07 5F 02 FB | 	rdlong	arg03, objptr
00a74     30 0E 86 F1 | 	sub	objptr, #48
00a78     02 5E 66 F0 | 	shl	arg03, #2
00a7c                 | '   bytefill(buf_ptr,c,buflen*4)
00a7c     07 5B 02 FB | 	rdlong	arg01, objptr
00a80     3C 5D 02 F6 | 	mov	arg02, local09
00a84     A0 00 A0 FD | 	call	#\builtin_bytefill_
00a88                 | LR__0004
00a88                 | ' setwritecolors(fc,bc)
00a88     00 5C 06 F6 | 	mov	arg02, #0
00a8c                 | ' 
00a8c                 | ' 
00a8c                 | ' write_color:=ff
00a8c     38 0E 06 F1 | 	add	objptr, #56
00a90     07 8F 69 FC | 	wrlong	#199, objptr
00a94                 | ' write_background:=bb
00a94     04 0E 06 F1 | 	add	objptr, #4
00a98     07 01 68 FC | 	wrlong	#0, objptr
00a9c                 | ' cursor_x:=0
00a9c     08 0E 86 F1 | 	sub	objptr, #8
00aa0     07 01 48 FC | 	wrbyte	#0, objptr
00aa4                 | ' cursor_y:=0
00aa4     01 0E 06 F1 | 	add	objptr, #1
00aa8     07 01 48 FC | 	wrbyte	#0, objptr
00aac     35 0E 86 F1 | 	sub	objptr, #53
00ab0     3C 29 02 F6 | 	mov	result1, local09
00ab4                 | ' setbordercolor(0,0,128)
00ab4     00 5A 06 F6 | 	mov	arg01, #0
00ab8     80 5E 06 F6 | 	mov	arg03, #128
00abc     F0 0B B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00ac0                 | ' setwritecolors(c_green,c_black)
00ac0     00 5C 06 F6 | 	mov	arg02, #0
00ac4                 | ' 
00ac4                 | ' 
00ac4                 | ' write_color:=ff
00ac4     38 0E 06 F1 | 	add	objptr, #56
00ac8     07 8F 69 FC | 	wrlong	#199, objptr
00acc                 | ' write_background:=bb
00acc     04 0E 06 F1 | 	add	objptr, #4
00ad0     07 01 68 FC | 	wrlong	#0, objptr
00ad4                 | ' 
00ad4                 | ' return cog
00ad4     14 0E 86 F1 | 	sub	objptr, #20
00ad8     07 29 02 FB | 	rdlong	result1, objptr
00adc     28 0E 86 F1 | 	sub	objptr, #40
00ae0     00 5A 06 F6 | 	mov	arg01, #0
00ae4     00 5E 06 F6 | 	mov	arg03, #0
00ae8     C4 0B B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00aec                 | ' v030.start(mode,pin)
00aec                 | ' v030.setbordercolor(0,0,0)
00aec                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00aec     07 5B 02 F6 | 	mov	arg01, objptr
00af0     0D 5D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00af4     EC 43 B0 FD | 	call	#__system___make_methodptr
00af8     00 2C 06 F6 | 	mov	result3, #0
00afc     00 2A 06 F6 | 	mov	result2, #0
00b00     14 5D 02 F6 | 	mov	arg02, result1
00b04     00 5E 06 F6 | 	mov	arg03, #0
00b08     00 60 06 F6 | 	mov	arg04, #0
00b0c     00 5A 06 F6 | 	mov	arg01, #0
00b10     FC 45 B0 FD | 	call	#__system___basic_open
00b14     EC 0E 06 F1 | 	add	objptr, #236
00b18                 | ' 
00b18                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00b18     07 7B 02 F6 | 	mov	local10, objptr
00b1c     01 00 00 FF 
00b20     40 0F 06 F1 | 	add	objptr, ##832
00b24     07 7D 02 F6 | 	mov	local11, objptr
00b28     3E 7B 62 FC | 	wrlong	local10, local11
00b2c     04 7C 06 F1 | 	add	local11, #4
00b30     3E 25 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local11
00b34     04 5D 02 F6 | 	mov	arg02, entryptr__
00b38     10 5A 06 F6 | 	mov	arg01, #16
00b3c     28 0E 62 FD | 	setq	objptr
00b40     2E 5B F2 FC | 	coginit	arg01, arg02 wc
00b44     01 5A 66 C6 |  if_b	neg	arg01, #1
00b48     2D 29 02 F6 | 	mov	result1, arg01
00b4c                 | ' return cog
00b4c     14 7E 06 FB | 	rdlong	local12, #20
00b50     01 5E 06 F6 | 	mov	arg03, #1
00b54     00 61 06 F6 | 	mov	arg04, #256
00b58     00 63 06 F6 | 	mov	arg05, #256
00b5c     00 0F 06 F1 | 	add	objptr, #256
00b60     01 80 0E F6 | 	mov	local13, #1 wz
00b64     00 83 06 F6 | 	mov	local14, #256
00b68     00 85 06 F6 | 	mov	local15, #256
00b6c                 | ' 
00b6c                 | '   systemClock := sysClock
00b6c     07 7F 62 FC | 	wrlong	local12, objptr
00b70                 | '   mainVolume  := mVolume
00b70     04 0E 06 F1 | 	add	objptr, #4
00b74     07 01 5A FC | 	wrword	#256, objptr
00b78     04 0E 86 F1 | 	sub	objptr, #4
00b7c                 | ' 
00b7c                 | '   if reSoundHqMode
00b7c     07 09 03 FB | 	rdlong	muldiva_, objptr
00b80     55 00 00 FF 
00b84     E0 0B 07 F6 | 	mov	muldivb_, ##44000
00b88     D0 00 A0 FD | 	call	#divide_
00b8c     7F 00 00 FF 
00b90     00 0B 07 F5 | 	and	muldivb_, ##65280
00b94     07 09 03 FB | 	rdlong	muldiva_, objptr
00b98     D0 00 A0 FD | 	call	#divide_
00b9c                 | '     mixingFrequency := systemClock / ((systemClock / mixingFrequency) & $FF00)
00b9c     85 87 02 F6 | 	mov	local16, muldivb_
00ba0     04 26 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, #4
00ba4     13 89 02 F6 | 	mov	local17, ptr__trackerplayer_spin2_dat__
00ba8     71 8A 06 F6 | 	mov	local18, #113
00bac     04 26 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, #4
00bb0                 | LR__0005
00bb0                 | '     frequencyLut[i - MINIMUM_PERIOD] := calculateAccumulatorFrequency(mixingFrequency, i)
00bb0     43 5B 02 F6 | 	mov	arg01, local16
00bb4     45 5D 02 F6 | 	mov	arg02, local18
00bb8     4C 40 B0 FD | 	call	#_trackerplayer_spin2_calculateAccumulatorFrequency
00bbc     44 29 62 FC | 	wrlong	result1, local17
00bc0     01 8A 06 F1 | 	add	local18, #1
00bc4     04 88 06 F1 | 	add	local17, #4
00bc8     01 00 00 FF 
00bcc     59 8B 5E F2 | 	cmps	local18, ##857 wcz
00bd0     DC FF 9F CD |  if_b	jmp	#LR__0005
00bd4                 | ' 
00bd4                 | '   panningLut[0]  :=   stereoSeparation
00bd4     05 00 00 FF 
00bd8     A4 27 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
00bdc     13 01 5A FC | 	wrword	#256, ptr__trackerplayer_spin2_dat__
00be0     01 8D 06 F6 | 	mov	local19, #257
00be4                 | '   panningLut[1]  := -(stereoSeparation + 1)
00be4     01 8F 06 F6 | 	mov	local20, #257
00be8     47 8F 62 F6 | 	neg	local20, local20
00bec     02 26 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, #2
00bf0     13 8F 52 FC | 	wrword	local20, ptr__trackerplayer_spin2_dat__
00bf4                 | '   panningLut[2]  := -(stereoSeparation + 1)
00bf4     46 8D 62 F6 | 	neg	local19, local19
00bf8     02 26 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, #2
00bfc     13 8D 52 FC | 	wrword	local19, ptr__trackerplayer_spin2_dat__
00c00                 | '   panningLut[3]  :=   stereoSeparation
00c00     02 26 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, #2
00c04     13 01 5A FC | 	wrword	#256, ptr__trackerplayer_spin2_dat__
00c08     05 00 00 FF 
00c0c     AA 27 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2986
00c10                 | ' 
00c10                 | '   ticksPerMinute := 50 * 60
00c10     A7 0F 06 F1 | 	add	objptr, #423
00c14     05 00 80 FF 
00c18     07 71 6B FC | 	wrlong	##3000, objptr
00c1c     A7 0F 86 F1 | 	sub	objptr, #423
00c20     07 09 03 FB | 	rdlong	muldiva_, objptr
00c24     32 0A 07 F6 | 	mov	muldivb_, #50
00c28     D0 00 A0 FD | 	call	#divide_
00c2c                 | '   cyclesToWait   := systemClock / 50
00c2c     AB 0F 06 F1 | 	add	objptr, #427
00c30     07 0B 63 FC | 	wrlong	muldivb_, objptr
00c34     AB 0F 86 F1 | 	sub	objptr, #427
00c38     0B 5B 02 F6 | 	mov	arg01, ptr__dat__
00c3c     00 5C 06 F6 | 	mov	arg02, #0
00c40     D0 1D B0 FD | 	call	#_trackerplayer_spin2_initModule
00c44     02 00 00 FF 
00c48     2C 0F 86 F1 | 	sub	objptr, ##1324
00c4c     F4 5B 06 F6 | 	mov	arg01, #500
00c50     EC 43 B0 FD | 	call	#__system___waitms
00c54     03 00 00 FF 
00c58     28 0F 06 F1 | 	add	objptr, ##1832
00c5c     03 00 00 FF 
00c60     CC 14 06 F1 | 	add	ptr__audio008_spin2_dat__, ##1740
00c64                 | ' 
00c64                 | ' 
00c64                 | ' channel1[0]:=@null
00c64     07 15 62 FC | 	wrlong	ptr__audio008_spin2_dat__, objptr
00c68                 | ' channel1[1]:=0
00c68     04 0E 06 F1 | 	add	objptr, #4
00c6c     07 01 68 FC | 	wrlong	#0, objptr
00c70                 | ' channel1[2]:=0
00c70     04 0E 06 F1 | 	add	objptr, #4
00c74     07 01 68 FC | 	wrlong	#0, objptr
00c78                 | ' channel1[3]:=2
00c78     04 0E 06 F1 | 	add	objptr, #4
00c7c     07 05 68 FC | 	wrlong	#2, objptr
00c80                 | ' channel1[4]:=0
00c80     04 0E 06 F1 | 	add	objptr, #4
00c84     07 01 68 FC | 	wrlong	#0, objptr
00c88                 | ' channel1[5]:=8192
00c88     04 0E 06 F1 | 	add	objptr, #4
00c8c     10 00 80 FF 
00c90     07 01 68 FC | 	wrlong	##8192, objptr
00c94                 | ' channel1[6]:=1010
00c94     04 0E 06 F1 | 	add	objptr, #4
00c98     01 00 80 FF 
00c9c     07 E5 6B FC | 	wrlong	##1010, objptr
00ca0                 | ' channel1[7]:=2
00ca0     04 0E 06 F1 | 	add	objptr, #4
00ca4     07 05 68 FC | 	wrlong	#2, objptr
00ca8                 | ' 
00ca8                 | ' channel2[0]:=@null
00ca8     08 0E 06 F1 | 	add	objptr, #8
00cac     07 15 62 FC | 	wrlong	ptr__audio008_spin2_dat__, objptr
00cb0                 | ' channel2[1]:=0
00cb0     04 0E 06 F1 | 	add	objptr, #4
00cb4     07 01 68 FC | 	wrlong	#0, objptr
00cb8                 | ' channel2[2]:=0
00cb8     04 0E 06 F1 | 	add	objptr, #4
00cbc     07 01 68 FC | 	wrlong	#0, objptr
00cc0                 | ' channel2[3]:=2
00cc0     04 0E 06 F1 | 	add	objptr, #4
00cc4     07 05 68 FC | 	wrlong	#2, objptr
00cc8                 | ' channel2[4]:=0
00cc8     04 0E 06 F1 | 	add	objptr, #4
00ccc     07 01 68 FC | 	wrlong	#0, objptr
00cd0                 | ' channel2[5]:=8192
00cd0     04 0E 06 F1 | 	add	objptr, #4
00cd4     10 00 80 FF 
00cd8     07 01 68 FC | 	wrlong	##8192, objptr
00cdc                 | ' channel2[6]:=1030
00cdc     04 0E 06 F1 | 	add	objptr, #4
00ce0     02 00 80 FF 
00ce4     07 0D 68 FC | 	wrlong	##1030, objptr
00ce8                 | ' channel2[7]:=2
00ce8     04 0E 06 F1 | 	add	objptr, #4
00cec     07 05 68 FC | 	wrlong	#2, objptr
00cf0                 | ' 
00cf0                 | ' channel3[0]:=@null
00cf0     08 0E 06 F1 | 	add	objptr, #8
00cf4     07 15 62 FC | 	wrlong	ptr__audio008_spin2_dat__, objptr
00cf8                 | ' channel3[1]:=0
00cf8     04 0E 06 F1 | 	add	objptr, #4
00cfc     07 01 68 FC | 	wrlong	#0, objptr
00d00                 | ' channel3[2]:=0
00d00     04 0E 06 F1 | 	add	objptr, #4
00d04     07 01 68 FC | 	wrlong	#0, objptr
00d08                 | ' channel3[3]:=2
00d08     04 0E 06 F1 | 	add	objptr, #4
00d0c     07 05 68 FC | 	wrlong	#2, objptr
00d10                 | ' channel3[4]:=0
00d10     04 0E 06 F1 | 	add	objptr, #4
00d14     07 01 68 FC | 	wrlong	#0, objptr
00d18                 | ' channel3[5]:=8192
00d18     04 0E 06 F1 | 	add	objptr, #4
00d1c     10 00 80 FF 
00d20     07 01 68 FC | 	wrlong	##8192, objptr
00d24                 | ' channel3[6]:=1070'
00d24     04 0E 06 F1 | 	add	objptr, #4
00d28     02 00 80 FF 
00d2c     07 5D 68 FC | 	wrlong	##1070, objptr
00d30                 | ' channel3[7]:=2
00d30     04 0E 06 F1 | 	add	objptr, #4
00d34     07 05 68 FC | 	wrlong	#2, objptr
00d38                 | ' 
00d38                 | ' channel4[0]:=@null
00d38     08 0E 06 F1 | 	add	objptr, #8
00d3c     07 15 62 FC | 	wrlong	ptr__audio008_spin2_dat__, objptr
00d40                 | ' channel4[1]:=0
00d40     04 0E 06 F1 | 	add	objptr, #4
00d44     07 01 68 FC | 	wrlong	#0, objptr
00d48                 | ' channel4[2]:=0
00d48     04 0E 06 F1 | 	add	objptr, #4
00d4c     07 01 68 FC | 	wrlong	#0, objptr
00d50                 | ' channel4[3]:=2
00d50     04 0E 06 F1 | 	add	objptr, #4
00d54     07 05 68 FC | 	wrlong	#2, objptr
00d58                 | ' channel4[4]:=0
00d58     04 0E 06 F1 | 	add	objptr, #4
00d5c     07 01 68 FC | 	wrlong	#0, objptr
00d60                 | ' channel4[5]:=8192
00d60     04 0E 06 F1 | 	add	objptr, #4
00d64     10 00 80 FF 
00d68     07 01 68 FC | 	wrlong	##8192, objptr
00d6c                 | ' channel4[6]:=1090
00d6c     04 0E 06 F1 | 	add	objptr, #4
00d70     02 00 80 FF 
00d74     07 85 68 FC | 	wrlong	##1090, objptr
00d78                 | ' channel4[7]:=2
00d78     04 0E 06 F1 | 	add	objptr, #4
00d7c     07 05 68 FC | 	wrlong	#2, objptr
00d80                 | ' channel4[8]:=1
00d80     04 0E 06 F1 | 	add	objptr, #4
00d84     07 03 68 FC | 	wrlong	#1, objptr
00d88                 | ' 
00d88                 | ' channel5[0]:=@null
00d88     04 0E 06 F1 | 	add	objptr, #4
00d8c     07 15 62 FC | 	wrlong	ptr__audio008_spin2_dat__, objptr
00d90                 | ' channel5[1]:=0
00d90     04 0E 06 F1 | 	add	objptr, #4
00d94     07 01 68 FC | 	wrlong	#0, objptr
00d98                 | ' channel5[2]:=0
00d98     04 0E 06 F1 | 	add	objptr, #4
00d9c     07 01 68 FC | 	wrlong	#0, objptr
00da0                 | ' channel5[3]:=2
00da0     04 0E 06 F1 | 	add	objptr, #4
00da4     07 05 68 FC | 	wrlong	#2, objptr
00da8                 | ' channel5[4]:=0
00da8     04 0E 06 F1 | 	add	objptr, #4
00dac     07 01 68 FC | 	wrlong	#0, objptr
00db0                 | ' channel5[5]:=8192
00db0     04 0E 06 F1 | 	add	objptr, #4
00db4     10 00 80 FF 
00db8     07 01 68 FC | 	wrlong	##8192, objptr
00dbc                 | ' channel5[6]:=1130
00dbc     04 0E 06 F1 | 	add	objptr, #4
00dc0     02 00 80 FF 
00dc4     07 D5 68 FC | 	wrlong	##1130, objptr
00dc8                 | ' channel5[7]:=2
00dc8     04 0E 06 F1 | 	add	objptr, #4
00dcc     07 05 68 FC | 	wrlong	#2, objptr
00dd0                 | ' 
00dd0                 | ' channel6[0]:=@null
00dd0     08 0E 06 F1 | 	add	objptr, #8
00dd4     07 15 62 FC | 	wrlong	ptr__audio008_spin2_dat__, objptr
00dd8                 | ' channel6[1]:=0
00dd8     04 0E 06 F1 | 	add	objptr, #4
00ddc     07 01 68 FC | 	wrlong	#0, objptr
00de0                 | ' channel6[2]:=0
00de0     04 0E 06 F1 | 	add	objptr, #4
00de4     07 01 68 FC | 	wrlong	#0, objptr
00de8                 | ' channel6[3]:=2
00de8     04 0E 06 F1 | 	add	objptr, #4
00dec     07 05 68 FC | 	wrlong	#2, objptr
00df0                 | ' channel6[4]:=0
00df0     04 0E 06 F1 | 	add	objptr, #4
00df4     07 01 68 FC | 	wrlong	#0, objptr
00df8                 | ' channel6[5]:=8192
00df8     04 0E 06 F1 | 	add	objptr, #4
00dfc     10 00 80 FF 
00e00     07 01 68 FC | 	wrlong	##8192, objptr
00e04                 | ' channel6[6]:=1270
00e04     04 0E 06 F1 | 	add	objptr, #4
00e08     02 00 80 FF 
00e0c     07 ED 69 FC | 	wrlong	##1270, objptr
00e10                 | ' channel6[7]:=2
00e10     04 0E 06 F1 | 	add	objptr, #4
00e14     07 05 68 FC | 	wrlong	#2, objptr
00e18                 | ' 
00e18                 | ' channel7[0]:=@null
00e18     08 0E 06 F1 | 	add	objptr, #8
00e1c     07 15 62 FC | 	wrlong	ptr__audio008_spin2_dat__, objptr
00e20                 | ' channel7[1]:=0
00e20     04 0E 06 F1 | 	add	objptr, #4
00e24     07 01 68 FC | 	wrlong	#0, objptr
00e28                 | ' channel7[2]:=0
00e28     04 0E 06 F1 | 	add	objptr, #4
00e2c     07 01 68 FC | 	wrlong	#0, objptr
00e30                 | ' channel7[3]:=2
00e30     04 0E 06 F1 | 	add	objptr, #4
00e34     07 05 68 FC | 	wrlong	#2, objptr
00e38                 | ' channel7[4]:=0
00e38     04 0E 06 F1 | 	add	objptr, #4
00e3c     07 01 68 FC | 	wrlong	#0, objptr
00e40                 | ' channel7[5]:=8192
00e40     04 0E 06 F1 | 	add	objptr, #4
00e44     10 00 80 FF 
00e48     07 01 68 FC | 	wrlong	##8192, objptr
00e4c                 | ' channel7[6]:=1310
00e4c     04 0E 06 F1 | 	add	objptr, #4
00e50     02 00 80 FF 
00e54     07 3D 6A FC | 	wrlong	##1310, objptr
00e58                 | ' channel7[7]:=2
00e58     04 0E 06 F1 | 	add	objptr, #4
00e5c     07 05 68 FC | 	wrlong	#2, objptr
00e60                 | ' 
00e60                 | ' channel8[0]:=@null
00e60     08 0E 06 F1 | 	add	objptr, #8
00e64     07 15 62 FC | 	wrlong	ptr__audio008_spin2_dat__, objptr
00e68                 | ' channel8[1]:=0
00e68     04 0E 06 F1 | 	add	objptr, #4
00e6c     07 01 68 FC | 	wrlong	#0, objptr
00e70                 | ' channel8[2]:=0
00e70     04 0E 06 F1 | 	add	objptr, #4
00e74     07 01 68 FC | 	wrlong	#0, objptr
00e78                 | ' channel8[3]:=2
00e78     04 0E 06 F1 | 	add	objptr, #4
00e7c     07 05 68 FC | 	wrlong	#2, objptr
00e80                 | ' channel8[4]:=0
00e80     04 0E 06 F1 | 	add	objptr, #4
00e84     07 01 68 FC | 	wrlong	#0, objptr
00e88                 | ' channel8[5]:=8192
00e88     04 0E 06 F1 | 	add	objptr, #4
00e8c     10 00 80 FF 
00e90     07 01 68 FC | 	wrlong	##8192, objptr
00e94                 | ' channel8[6]:=1370
00e94     04 0E 06 F1 | 	add	objptr, #4
00e98     02 00 80 FF 
00e9c     07 B5 6A FC | 	wrlong	##1370, objptr
00ea0                 | ' channel8[7]:=2
00ea0     04 0E 06 F1 | 	add	objptr, #4
00ea4     07 05 68 FC | 	wrlong	#2, objptr
00ea8                 | ' 
00ea8                 | ' channel1[8]:=1
00ea8     F8 0E 86 F1 | 	sub	objptr, #248
00eac     07 03 68 FC | 	wrlong	#1, objptr
00eb0                 | ' channel2[8]:=1
00eb0     24 0E 06 F1 | 	add	objptr, #36
00eb4     07 03 68 FC | 	wrlong	#1, objptr
00eb8                 | ' channel3[8]:=1
00eb8     24 0E 06 F1 | 	add	objptr, #36
00ebc     07 03 68 FC | 	wrlong	#1, objptr
00ec0                 | ' channel4[8]:=1
00ec0     24 0E 06 F1 | 	add	objptr, #36
00ec4     07 03 68 FC | 	wrlong	#1, objptr
00ec8                 | ' channel5[8]:=1
00ec8     24 0E 06 F1 | 	add	objptr, #36
00ecc     07 03 68 FC | 	wrlong	#1, objptr
00ed0                 | ' channel6[8]:=1
00ed0     24 0E 06 F1 | 	add	objptr, #36
00ed4     07 03 68 FC | 	wrlong	#1, objptr
00ed8                 | ' channel7[8]:=1
00ed8     24 0E 06 F1 | 	add	objptr, #36
00edc     07 03 68 FC | 	wrlong	#1, objptr
00ee0                 | ' channel8[8]:=1
00ee0     24 0E 06 F1 | 	add	objptr, #36
00ee4     07 03 68 FC | 	wrlong	#1, objptr
00ee8     1C 0F 86 F1 | 	sub	objptr, #284
00eec                 | ' 
00eec                 | ' cog:=coginit(16,@audio,@channel1)
00eec     03 00 00 FF 
00ef0     CC 14 86 F1 | 	sub	ptr__audio008_spin2_dat__, ##1740
00ef4     0A 5D 02 F6 | 	mov	arg02, ptr__audio008_spin2_dat__
00ef8     07 5F 02 F6 | 	mov	arg03, objptr
00efc     10 5A 06 F6 | 	mov	arg01, #16
00f00     28 5E 62 FD | 	setq	arg03
00f04     2E 5B F2 FC | 	coginit	arg01, arg02 wc
00f08     01 5A 66 C6 |  if_b	neg	arg01, #1
00f0c     2D 29 02 F6 | 	mov	result1, arg01
00f10                 | ' return cog
00f10     00 90 06 F6 | 	mov	local21, #0
00f14     20 0F 06 F1 | 	add	objptr, #288
00f18     07 01 68 FC | 	wrlong	#0, objptr
00f1c     04 0E 06 F1 | 	add	objptr, #4
00f20     07 01 68 FC | 	wrlong	#0, objptr
00f24     04 0E 06 F1 | 	add	objptr, #4
00f28     07 01 68 FC | 	wrlong	#0, objptr
00f2c     04 0E 06 F1 | 	add	objptr, #4
00f30     07 01 68 FC | 	wrlong	#0, objptr
00f34     04 0E 06 F1 | 	add	objptr, #4
00f38     07 01 68 FC | 	wrlong	#0, objptr
00f3c     04 0E 06 F1 | 	add	objptr, #4
00f40     07 01 68 FC | 	wrlong	#0, objptr
00f44     04 0E 06 F1 | 	add	objptr, #4
00f48     07 01 68 FC | 	wrlong	#0, objptr
00f4c     04 0E 06 F1 | 	add	objptr, #4
00f50     07 01 68 FC | 	wrlong	#0, objptr
00f54     04 00 00 FF 
00f58     64 0E 86 F1 | 	sub	objptr, ##2148
00f5c                 | ' 
00f5c                 | ' tracker.init(clkfreq,44000,1,256,256)
00f5c                 | ' tracker.initmodule(@module,0)
00f5c                 | ' waitms(500)
00f5c                 | ' 
00f5c                 | ' paula.start
00f5c                 | ' old1=0 : old2=0 :old3=0 : old4=0
00f5c                 | ' old11=0 : old12=0 :old13=0 : old14=0
00f5c                 | ' do
00f5c                 | LR__0006
00f5c     01 5A 06 F6 | 	mov	arg01, #1
00f60                 | ' 
00f60                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
00f60                 | ' 
00f60                 | ' repeat i from 1 to amount
00f60     01 92 06 F6 | 	mov	local22, #1
00f64     01 94 66 F6 | 	neg	local23, #1
00f68     00 96 06 F6 | 	mov	local24, #0
00f6c                 | LR__0007
00f6c                 | '   repeat until vblank==0
00f6c                 | LR__0008
00f6c     40 0E 06 F1 | 	add	objptr, #64
00f70     07 99 0A FB | 	rdlong	local25, objptr wz
00f74     40 0E 86 F1 | 	sub	objptr, #64
00f78     0C 00 90 AD |  if_e	jmp	#LR__0009
00f7c                 | '     waitus(100)
00f7c     64 5A 06 F6 | 	mov	arg01, #100
00f80     38 41 B0 FD | 	call	#__system___waitus
00f84     E4 FF 9F FD | 	jmp	#LR__0008
00f88                 | LR__0009
00f88                 | '   repeat until vblank==1
00f88                 | LR__0010
00f88     40 0E 06 F1 | 	add	objptr, #64
00f8c     07 99 02 FB | 	rdlong	local25, objptr
00f90     40 0E 86 F1 | 	sub	objptr, #64
00f94     01 98 0E F2 | 	cmp	local25, #1 wz
00f98     0C 00 90 AD |  if_e	jmp	#LR__0011
00f9c                 | '     waitus(100)
00f9c     64 5A 06 F6 | 	mov	arg01, #100
00fa0     18 41 B0 FD | 	call	#__system___waitus
00fa4     E0 FF 9F FD | 	jmp	#LR__0010
00fa8                 | LR__0011
00fa8     F0 93 6E FB | 	djnz	local22, #LR__0007
00fac     02 00 00 FF 
00fb0     2C 0F 06 F1 | 	add	objptr, ##1324
00fb4     38 21 B0 FD | 	call	#_trackerplayer_spin2_tick
00fb8     FC 0F 06 F1 | 	add	objptr, #508
00fbc     07 91 02 FB | 	rdlong	local21, objptr
00fc0     30 0F 06 F1 | 	add	objptr, #304
00fc4     07 91 62 FC | 	wrlong	local21, objptr
00fc8     01 00 00 FF 
00fcc     85 0E 86 F1 | 	sub	objptr, ##645
00fd0     07 91 02 FB | 	rdlong	local21, objptr
00fd4     55 0F 06 F1 | 	add	objptr, #341
00fd8     07 91 62 FC | 	wrlong	local21, objptr
00fdc     04 0E 06 F1 | 	add	objptr, #4
00fe0     07 03 68 FC | 	wrlong	#1, objptr
00fe4     45 0F 86 F1 | 	sub	objptr, #325
00fe8     07 91 E2 FA | 	rdword	local21, objptr
00fec     08 0E 06 F1 | 	add	objptr, #8
00ff0     07 9B 02 FB | 	rdlong	local26, objptr
00ff4     4D 91 82 F1 | 	sub	local21, local26
00ff8     41 0F 06 F1 | 	add	objptr, #321
00ffc     07 91 62 FC | 	wrlong	local21, objptr
01000     49 0F 86 F1 | 	sub	objptr, #329
01004     07 91 E2 FA | 	rdword	local21, objptr
01008     4D 0F 06 F1 | 	add	objptr, #333
0100c     07 91 62 FC | 	wrlong	local21, objptr
01010     09 0F 86 F1 | 	sub	objptr, #265
01014     07 91 02 FB | 	rdlong	local21, objptr
01018     07 90 66 F0 | 	shl	local21, #7
0101c     0D 0F 06 F1 | 	add	objptr, #269
01020     07 91 62 FC | 	wrlong	local21, objptr
01024     04 0E 06 F1 | 	add	objptr, #4
01028     0C 00 80 FF 
0102c     07 01 68 FC | 	wrlong	##6144, objptr
01030     31 0F 86 F1 | 	sub	objptr, #305
01034     07 91 02 FB | 	rdlong	local21, objptr
01038     35 0F 06 F1 | 	add	objptr, #309
0103c     07 91 62 FC | 	wrlong	local21, objptr
01040     04 0E 06 F1 | 	add	objptr, #4
01044     07 03 68 FC | 	wrlong	#1, objptr
01048                 | '   v030.waitvbl(1)
01048                 | '   tracker.tick
01048                 | '    
01048                 | ' 
01048                 | '  '   print tracker.currSamplePtr(0);" ";tracker.currSampleLength(0);" ";tracker.currRepeatPoint(0);" ";tracker.currrepeatLength(0); " - ";
01048                 | '  '   print tracker.currSamplePtr(1);" ";tracker.currSampleLength(1);" ";tracker.currRepeatPoint(1);" ";tracker.currrepeatLength(1); " - ";
01048                 | '   '  print tracker.currSamplePtr(2);" ";tracker.currSampleLength(2);" ";tracker.currRepeatPoint(2);" ";tracker.currrepeatLength(2); " - ";
01048                 | '  '   print tracker.currSamplePtr(3);" ";tracker.currSampleLength(3);" ";tracker.currRepeatPoint(3);" ";tracker.currrepeatLength(3)
01048                 | ' 
01048                 | '     
01048                 | '     old11=paula.channel1(0)
01048                 | ' 	paula.channel1(0)=tracker.currSamplePtr(0)
01048                 | ' 	paula.channel1(1)=1
01048                 | ' 	paula.channel1(2)=tracker.currsamplelength(0)-tracker.currrepeatLength(0)
01048                 | ' 	paula.channel1(3)=tracker.currsamplelength(0)
01048                 | ' 	paula.channel1(4)=tracker.currVolume(0)*128
01048                 | ' 	paula.channel1(5)=4096+2048
01048                 | ' 	paula.channel1(6)=tracker.currPeriod(0)
01048                 | ' 	paula.channel1(7)=1
01048                 | ' '     if paula.channel1(0) <> old11 then paula.channel1(8)=0 :waitus(100) : paula.channel1(8)=1
01048                 | '       if tracker.trigger(0) <> old1 then paula.channel1(8)=0 :waitus(100) : paula.channel1(8)=1 :old1=tracker.trigger(0)
01048     22 0E 86 F1 | 	sub	objptr, #34
0104c     07 91 C2 FA | 	rdbyte	local21, objptr
01050     26 0F 06 F1 | 	add	objptr, #294
01054     07 9B 02 FB | 	rdlong	local26, objptr
01058     04 00 00 FF 
0105c     48 0E 86 F1 | 	sub	objptr, ##2120
01060     4D 91 0A F2 | 	cmp	local21, local26 wz
01064     40 00 90 AD |  if_e	jmp	#LR__0012
01068     03 00 00 FF 
0106c     48 0F 06 F1 | 	add	objptr, ##1864
01070     07 01 68 FC | 	wrlong	#0, objptr
01074     03 00 00 FF 
01078     48 0F 86 F1 | 	sub	objptr, ##1864
0107c     64 5A 06 F6 | 	mov	arg01, #100
01080     38 40 B0 FD | 	call	#__system___waitus
01084     03 00 00 FF 
01088     48 0F 06 F1 | 	add	objptr, ##1864
0108c     07 03 68 FC | 	wrlong	#1, objptr
01090     26 0E 86 F1 | 	sub	objptr, #38
01094     07 91 C2 FA | 	rdbyte	local21, objptr
01098     26 0F 06 F1 | 	add	objptr, #294
0109c     07 91 62 FC | 	wrlong	local21, objptr
010a0     04 00 00 FF 
010a4     48 0E 86 F1 | 	sub	objptr, ##2120
010a8                 | LR__0012
010a8     03 00 00 FF 
010ac     4C 0F 06 F1 | 	add	objptr, ##1868
010b0     07 91 02 FB | 	rdlong	local21, objptr
010b4     10 0F 06 F1 | 	add	objptr, #272
010b8     07 91 62 FC | 	wrlong	local21, objptr
010bc     01 00 00 FF 
010c0     85 0E 86 F1 | 	sub	objptr, ##645
010c4     07 91 02 FB | 	rdlong	local21, objptr
010c8     75 0F 06 F1 | 	add	objptr, #373
010cc     07 91 62 FC | 	wrlong	local21, objptr
010d0     04 0E 06 F1 | 	add	objptr, #4
010d4     07 03 68 FC | 	wrlong	#1, objptr
010d8     67 0F 86 F1 | 	sub	objptr, #359
010dc     07 91 E2 FA | 	rdword	local21, objptr
010e0     0A 0E 06 F1 | 	add	objptr, #10
010e4     07 9B 02 FB | 	rdlong	local26, objptr
010e8     4D 91 82 F1 | 	sub	local21, local26
010ec     61 0F 06 F1 | 	add	objptr, #353
010f0     07 91 62 FC | 	wrlong	local21, objptr
010f4     6B 0F 86 F1 | 	sub	objptr, #363
010f8     07 91 E2 FA | 	rdword	local21, objptr
010fc     6F 0F 06 F1 | 	add	objptr, #367
01100     07 91 62 FC | 	wrlong	local21, objptr
01104     29 0F 86 F1 | 	sub	objptr, #297
01108     07 91 02 FB | 	rdlong	local21, objptr
0110c     07 90 66 F0 | 	shl	local21, #7
01110     2D 0F 06 F1 | 	add	objptr, #301
01114     07 91 62 FC | 	wrlong	local21, objptr
01118     04 0E 06 F1 | 	add	objptr, #4
0111c     14 00 80 FF 
01120     07 01 68 FC | 	wrlong	##10240, objptr
01124     51 0F 86 F1 | 	sub	objptr, #337
01128     07 91 02 FB | 	rdlong	local21, objptr
0112c     55 0F 06 F1 | 	add	objptr, #341
01130     07 91 62 FC | 	wrlong	local21, objptr
01134     04 0E 06 F1 | 	add	objptr, #4
01138     07 03 68 FC | 	wrlong	#1, objptr
0113c                 | ' 
0113c                 | '     old12=paula.channel2(0)
0113c                 | ' 	paula.channel2(0)=tracker.currSamplePtr(1)
0113c                 | ' 	paula.channel2(1)=1
0113c                 | ' 	paula.channel2(2)=tracker.currSampleLength(1)-tracker.currrepeatLength(1)
0113c                 | ' 	paula.channel2(3)=tracker.currSampleLength(1)
0113c                 | ' 	paula.channel2(4)=tracker.currVolume(1)*128
0113c                 | ' 	paula.channel2(5)=8192+2048
0113c                 | ' 	paula.channel2(6)=tracker.currPeriod(1)
0113c                 | ' 	paula.channel2(7)=1
0113c                 | '  '    if paula.channel2(0) <> old12 then paula.channel2(8)=0 :waitus(100) : paula.channel2(8)=1
0113c                 | '      if tracker.trigger(1) <> old2 then paula.channel2(8)=0 :waitus(100) : paula.channel2(8)=1 :old2=tracker.trigger(1)
0113c     45 0E 86 F1 | 	sub	objptr, #69
01140     07 91 C2 FA | 	rdbyte	local21, objptr
01144     29 0F 06 F1 | 	add	objptr, #297
01148     07 9B 02 FB | 	rdlong	local26, objptr
0114c     04 00 00 FF 
01150     4C 0E 86 F1 | 	sub	objptr, ##2124
01154     4D 91 0A F2 | 	cmp	local21, local26 wz
01158     40 00 90 AD |  if_e	jmp	#LR__0013
0115c     03 00 00 FF 
01160     6C 0F 06 F1 | 	add	objptr, ##1900
01164     07 01 68 FC | 	wrlong	#0, objptr
01168     03 00 00 FF 
0116c     6C 0F 86 F1 | 	sub	objptr, ##1900
01170     64 5A 06 F6 | 	mov	arg01, #100
01174     44 3F B0 FD | 	call	#__system___waitus
01178     03 00 00 FF 
0117c     6C 0F 06 F1 | 	add	objptr, ##1900
01180     07 03 68 FC | 	wrlong	#1, objptr
01184     49 0E 86 F1 | 	sub	objptr, #73
01188     07 91 C2 FA | 	rdbyte	local21, objptr
0118c     29 0F 06 F1 | 	add	objptr, #297
01190     07 91 62 FC | 	wrlong	local21, objptr
01194     04 00 00 FF 
01198     4C 0E 86 F1 | 	sub	objptr, ##2124
0119c                 | LR__0013
0119c     03 00 00 FF 
011a0     70 0F 06 F1 | 	add	objptr, ##1904
011a4     07 91 02 FB | 	rdlong	local21, objptr
011a8     F0 0E 06 F1 | 	add	objptr, #240
011ac     07 91 62 FC | 	wrlong	local21, objptr
011b0     01 00 00 FF 
011b4     85 0E 86 F1 | 	sub	objptr, ##645
011b8     07 91 02 FB | 	rdlong	local21, objptr
011bc     95 0F 06 F1 | 	add	objptr, #405
011c0     07 91 62 FC | 	wrlong	local21, objptr
011c4     04 0E 06 F1 | 	add	objptr, #4
011c8     07 03 68 FC | 	wrlong	#1, objptr
011cc     89 0F 86 F1 | 	sub	objptr, #393
011d0     07 91 E2 FA | 	rdword	local21, objptr
011d4     0C 0E 06 F1 | 	add	objptr, #12
011d8     07 9B 02 FB | 	rdlong	local26, objptr
011dc     4D 91 82 F1 | 	sub	local21, local26
011e0     81 0F 06 F1 | 	add	objptr, #385
011e4     07 91 62 FC | 	wrlong	local21, objptr
011e8     8D 0F 86 F1 | 	sub	objptr, #397
011ec     07 91 E2 FA | 	rdword	local21, objptr
011f0     91 0F 06 F1 | 	add	objptr, #401
011f4     07 91 62 FC | 	wrlong	local21, objptr
011f8     49 0F 86 F1 | 	sub	objptr, #329
011fc     07 91 02 FB | 	rdlong	local21, objptr
01200     07 90 66 F0 | 	shl	local21, #7
01204     4D 0F 06 F1 | 	add	objptr, #333
01208     07 91 62 FC | 	wrlong	local21, objptr
0120c     04 0E 06 F1 | 	add	objptr, #4
01210     14 00 80 FF 
01214     07 01 68 FC | 	wrlong	##10240, objptr
01218     71 0F 86 F1 | 	sub	objptr, #369
0121c     07 91 02 FB | 	rdlong	local21, objptr
01220     75 0F 06 F1 | 	add	objptr, #373
01224     07 91 62 FC | 	wrlong	local21, objptr
01228     04 0E 06 F1 | 	add	objptr, #4
0122c     07 03 68 FC | 	wrlong	#1, objptr
01230                 | ' 
01230                 | '     old13=paula.channel3(0)
01230                 | ' 	paula.channel3(0)=tracker.currSamplePtr(2)
01230                 | ' 	paula.channel3(1)=1
01230                 | ' 	paula.channel3(2)=tracker.currSampleLength(2)-tracker.currrepeatLength(2)
01230                 | ' 	paula.channel3(3)=tracker.currSampleLength(2)
01230                 | ' 	paula.channel3(4)=tracker.currVolume(2)*128
01230                 | ' 	paula.channel3(5)=8192+2048
01230                 | ' 	paula.channel3(6)=tracker.currPeriod(2)
01230                 | ' 	paula.channel3(7)=1
01230                 | '  '    if paula.channel3(0) <> old13 then paula.channel3(8)=0 :waitus(100) : paula.channel3	(8)=1
01230                 | '     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 :waitus(100) : paula.channel3(8)=1 :old3=tracker.trigger(02)
01230     68 0E 86 F1 | 	sub	objptr, #104
01234     07 91 C2 FA | 	rdbyte	local21, objptr
01238     2C 0F 06 F1 | 	add	objptr, #300
0123c     07 9B 02 FB | 	rdlong	local26, objptr
01240     04 00 00 FF 
01244     50 0E 86 F1 | 	sub	objptr, ##2128
01248     4D 91 0A F2 | 	cmp	local21, local26 wz
0124c     40 00 90 AD |  if_e	jmp	#LR__0014
01250     03 00 00 FF 
01254     90 0F 06 F1 | 	add	objptr, ##1936
01258     07 01 68 FC | 	wrlong	#0, objptr
0125c     03 00 00 FF 
01260     90 0F 86 F1 | 	sub	objptr, ##1936
01264     64 5A 06 F6 | 	mov	arg01, #100
01268     50 3E B0 FD | 	call	#__system___waitus
0126c     03 00 00 FF 
01270     90 0F 06 F1 | 	add	objptr, ##1936
01274     07 03 68 FC | 	wrlong	#1, objptr
01278     6C 0E 86 F1 | 	sub	objptr, #108
0127c     07 91 C2 FA | 	rdbyte	local21, objptr
01280     2C 0F 06 F1 | 	add	objptr, #300
01284     07 91 62 FC | 	wrlong	local21, objptr
01288     04 00 00 FF 
0128c     50 0E 86 F1 | 	sub	objptr, ##2128
01290                 | LR__0014
01290     03 00 00 FF 
01294     94 0F 06 F1 | 	add	objptr, ##1940
01298     07 91 02 FB | 	rdlong	local21, objptr
0129c     D0 0E 06 F1 | 	add	objptr, #208
012a0     07 91 62 FC | 	wrlong	local21, objptr
012a4     01 00 00 FF 
012a8     85 0E 86 F1 | 	sub	objptr, ##645
012ac     07 91 02 FB | 	rdlong	local21, objptr
012b0     B5 0F 06 F1 | 	add	objptr, #437
012b4     07 91 62 FC | 	wrlong	local21, objptr
012b8     04 0E 06 F1 | 	add	objptr, #4
012bc     07 03 68 FC | 	wrlong	#1, objptr
012c0     AB 0F 86 F1 | 	sub	objptr, #427
012c4     07 91 E2 FA | 	rdword	local21, objptr
012c8     0E 0E 06 F1 | 	add	objptr, #14
012cc     07 9B 02 FB | 	rdlong	local26, objptr
012d0     4D 91 82 F1 | 	sub	local21, local26
012d4     A1 0F 06 F1 | 	add	objptr, #417
012d8     07 91 62 FC | 	wrlong	local21, objptr
012dc     AF 0F 86 F1 | 	sub	objptr, #431
012e0     07 91 E2 FA | 	rdword	local21, objptr
012e4     B3 0F 06 F1 | 	add	objptr, #435
012e8     07 91 62 FC | 	wrlong	local21, objptr
012ec     69 0F 86 F1 | 	sub	objptr, #361
012f0     07 91 02 FB | 	rdlong	local21, objptr
012f4     07 90 66 F0 | 	shl	local21, #7
012f8     6D 0F 06 F1 | 	add	objptr, #365
012fc     07 91 62 FC | 	wrlong	local21, objptr
01300     04 0E 06 F1 | 	add	objptr, #4
01304     0C 00 80 FF 
01308     07 01 68 FC | 	wrlong	##6144, objptr
0130c     91 0F 86 F1 | 	sub	objptr, #401
01310     07 91 02 FB | 	rdlong	local21, objptr
01314     95 0F 06 F1 | 	add	objptr, #405
01318     07 91 62 FC | 	wrlong	local21, objptr
0131c     04 0E 06 F1 | 	add	objptr, #4
01320     07 03 68 FC | 	wrlong	#1, objptr
01324                 | ' 
01324                 | '     old14=paula.channel4(0)    
01324                 | ' 	paula.channel4(0)=tracker.currSamplePtr(3)
01324                 | ' 	paula.channel4(1)=1
01324                 | ' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
01324                 | ' 	paula.channel4(3)=tracker.currSampleLength(3)
01324                 | ' 	paula.channel4(4)=tracker.currVolume(3)*128
01324                 | ' 	paula.channel4(5)=4096+2048
01324                 | ' 	paula.channel4(6)=tracker.currPeriod(3)
01324                 | ' 	paula.channel4(7)=1
01324                 | '  '   if paula.channel4(0) <> old14 then paula.channel4(8)=0 :waitus(100) : paula.channel4	(8)=1
01324                 | '     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 :waitus(100) : paula.channel4(8)=1 :old4=tracker.trigger(03)
01324     8B 0E 86 F1 | 	sub	objptr, #139
01328     07 91 C2 FA | 	rdbyte	local21, objptr
0132c     2F 0F 06 F1 | 	add	objptr, #303
01330     07 9B 02 FB | 	rdlong	local26, objptr
01334     04 00 00 FF 
01338     54 0E 86 F1 | 	sub	objptr, ##2132
0133c     4D 91 0A F2 | 	cmp	local21, local26 wz
01340     18 FC 9F AD |  if_e	jmp	#LR__0006
01344     03 00 00 FF 
01348     B4 0F 06 F1 | 	add	objptr, ##1972
0134c     07 01 68 FC | 	wrlong	#0, objptr
01350     03 00 00 FF 
01354     B4 0F 86 F1 | 	sub	objptr, ##1972
01358     64 5A 06 F6 | 	mov	arg01, #100
0135c     5C 3D B0 FD | 	call	#__system___waitus
01360     03 00 00 FF 
01364     B4 0F 06 F1 | 	add	objptr, ##1972
01368     07 03 68 FC | 	wrlong	#1, objptr
0136c     8F 0E 86 F1 | 	sub	objptr, #143
01370     07 91 C2 FA | 	rdbyte	local21, objptr
01374     2F 0F 06 F1 | 	add	objptr, #303
01378     07 91 62 FC | 	wrlong	local21, objptr
0137c     04 00 00 FF 
01380     54 0E 86 F1 | 	sub	objptr, ##2132
01384     D4 FB 9F FD | 	jmp	#LR__0006
01388     AF F0 03 F6 | 	mov	ptra, fp
0138c     BF 00 A0 FD | 	call	#popregs_
01390                 | _program_ret
01390     2D 00 64 FD | 	ret
01394                 | 
01394                 | ' 
01394                 | ' 
01394                 | ' ''---------- putpixel - put a pixel on the screen
01394                 | ' 
01394                 | ' pub putpixel1(x,y,c) |byte b
01394                 | _hng030rm_spin2_putpixel1
01394                 | ' 
01394                 | ' 
01394                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01394     00 2E 06 F6 | 	mov	_var01, #0
01398     00 5A 5E F2 | 	cmps	arg01, #0 wcz
0139c     01 2E 66 36 |  if_ae	neg	_var01, #1
013a0     00 30 06 F6 | 	mov	_var02, #0
013a4     90 0E 06 F1 | 	add	objptr, #144
013a8     07 33 02 FB | 	rdlong	_var03, objptr
013ac     05 32 66 F0 | 	shl	_var03, #5
013b0     19 5B 5A F2 | 	cmps	arg01, _var03 wcz
013b4     01 30 66 C6 |  if_b	neg	_var02, #1
013b8     18 2F 02 F5 | 	and	_var01, _var02
013bc     00 34 06 F6 | 	mov	_var04, #0
013c0     00 5C 5E F2 | 	cmps	arg02, #0 wcz
013c4     01 34 66 36 |  if_ae	neg	_var04, #1
013c8     1A 2F 02 F5 | 	and	_var01, _var04
013cc     00 36 06 F6 | 	mov	_var05, #0
013d0     04 0E 06 F1 | 	add	objptr, #4
013d4     07 39 02 FB | 	rdlong	_var06, objptr
013d8     94 0E 86 F1 | 	sub	objptr, #148
013dc     1C 5D 5A F2 | 	cmps	arg02, _var06 wcz
013e0     01 36 66 C6 |  if_b	neg	_var05, #1
013e4     1B 2F CA F7 | 	test	_var01, _var05 wz
013e8     8C 00 90 AD |  if_e	jmp	#LR__0017
013ec     90 0E 06 F1 | 	add	objptr, #144
013f0     07 3B 02 FB | 	rdlong	_var07, objptr
013f4     90 0E 86 F1 | 	sub	objptr, #144
013f8     02 3A 66 F0 | 	shl	_var07, #2
013fc     2E 3B 02 FD | 	qmul	_var07, arg02
01400     18 3C 62 FD | 	getqx	_var08
01404     07 3F 02 FB | 	rdlong	_var09, objptr
01408     1E 3F 02 F1 | 	add	_var09, _var08
0140c     2D 41 02 F6 | 	mov	_var10, arg01
01410     03 40 46 F0 | 	shr	_var10, #3
01414     20 3F 02 F1 | 	add	_var09, _var10
01418                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01418     1F 43 C2 FA | 	rdbyte	_var11, _var09
0141c                 | '     if (c==0)
0141c     00 5E 0E F2 | 	cmp	arg03, #0 wz
01420     18 00 90 5D |  if_ne	jmp	#LR__0015
01424     2D 2F 52 F6 | 	abs	_var01, arg01 wc
01428     07 2E 06 F5 | 	and	_var01, #7
0142c     17 2F 62 C6 |  if_b	neg	_var01, _var01
01430     17 45 C2 F9 | 	decod	_var12, _var01
01434                 | '       b:=b & !(1<<(x//8))
01434     22 43 22 F5 | 	andn	_var11, _var12
01438                 | '     else
01438     14 00 90 FD | 	jmp	#LR__0016
0143c                 | LR__0015
0143c     2D 2F 52 F6 | 	abs	_var01, arg01 wc
01440     07 2E 06 F5 | 	and	_var01, #7
01444     17 2F 62 C6 |  if_b	neg	_var01, _var01
01448     17 47 C2 F9 | 	decod	_var13, _var01
0144c                 | '       b:=b |(1<<(x//8))
0144c     23 43 42 F5 | 	or	_var11, _var13
01450                 | LR__0016
01450     90 0E 06 F1 | 	add	objptr, #144
01454     07 49 02 FB | 	rdlong	_var14, objptr
01458     90 0E 86 F1 | 	sub	objptr, #144
0145c     02 48 66 F0 | 	shl	_var14, #2
01460     2E 49 02 FD | 	qmul	_var14, arg02
01464     18 4A 62 FD | 	getqx	_var15
01468     07 4D 02 FB | 	rdlong	_var16, objptr
0146c     25 4D 02 F1 | 	add	_var16, _var15
01470     20 4D 02 F1 | 	add	_var16, _var10
01474                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01474     26 43 42 FC | 	wrbyte	_var11, _var16
01478                 | LR__0017
01478                 | _hng030rm_spin2_putpixel1_ret
01478     2D 00 64 FD | 	ret
0147c                 | 
0147c                 | ' 
0147c                 | ' 
0147c                 | ' pub putpixel2(x,y,c) |byte b
0147c                 | _hng030rm_spin2_putpixel2
0147c                 | ' 
0147c                 | ' 
0147c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
0147c     00 2E 06 F6 | 	mov	_var01, #0
01480     00 5A 5E F2 | 	cmps	arg01, #0 wcz
01484     01 2E 66 36 |  if_ae	neg	_var01, #1
01488     00 30 06 F6 | 	mov	_var02, #0
0148c     90 0E 06 F1 | 	add	objptr, #144
01490     07 33 02 FB | 	rdlong	_var03, objptr
01494     04 32 66 F0 | 	shl	_var03, #4
01498     19 5B 5A F2 | 	cmps	arg01, _var03 wcz
0149c     01 30 66 C6 |  if_b	neg	_var02, #1
014a0     18 2F 02 F5 | 	and	_var01, _var02
014a4     00 34 06 F6 | 	mov	_var04, #0
014a8     00 5C 5E F2 | 	cmps	arg02, #0 wcz
014ac     01 34 66 36 |  if_ae	neg	_var04, #1
014b0     1A 2F 02 F5 | 	and	_var01, _var04
014b4     00 36 06 F6 | 	mov	_var05, #0
014b8     04 0E 06 F1 | 	add	objptr, #4
014bc     07 39 02 FB | 	rdlong	_var06, objptr
014c0     94 0E 86 F1 | 	sub	objptr, #148
014c4     1C 5D 5A F2 | 	cmps	arg02, _var06 wcz
014c8     01 36 66 C6 |  if_b	neg	_var05, #1
014cc     1B 2F CA F7 | 	test	_var01, _var05 wz
014d0     7C 00 90 AD |  if_e	jmp	#LR__0018
014d4     90 0E 06 F1 | 	add	objptr, #144
014d8     07 3B 02 FB | 	rdlong	_var07, objptr
014dc     90 0E 86 F1 | 	sub	objptr, #144
014e0     02 3A 66 F0 | 	shl	_var07, #2
014e4     2E 3B 02 FD | 	qmul	_var07, arg02
014e8     18 3C 62 FD | 	getqx	_var08
014ec     07 3F 02 FB | 	rdlong	_var09, objptr
014f0     1E 3F 02 F1 | 	add	_var09, _var08
014f4     2D 41 02 F6 | 	mov	_var10, arg01
014f8     02 40 46 F0 | 	shr	_var10, #2
014fc     20 3F 02 F1 | 	add	_var09, _var10
01500                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01500     1F 43 C2 FA | 	rdbyte	_var11, _var09
01504     2D 2F 52 F6 | 	abs	_var01, arg01 wc
01508     03 2E 06 F5 | 	and	_var01, #3
0150c     17 2F 62 C6 |  if_b	neg	_var01, _var01
01510     01 2E 66 F0 | 	shl	_var01, #1
01514     03 44 06 F6 | 	mov	_var12, #3
01518     17 45 62 F0 | 	shl	_var12, _var01
0151c                 | '     b:=b & !(%11<<((x//4)<<1))
0151c     22 43 22 F5 | 	andn	_var11, _var12
01520     17 5F 62 F0 | 	shl	arg03, _var01
01524                 | '     b:=b |(c<<((x//4)<<1))
01524     2F 43 42 F5 | 	or	_var11, arg03
01528     90 0E 06 F1 | 	add	objptr, #144
0152c     07 47 02 FB | 	rdlong	_var13, objptr
01530     90 0E 86 F1 | 	sub	objptr, #144
01534     02 46 66 F0 | 	shl	_var13, #2
01538     2E 47 02 FD | 	qmul	_var13, arg02
0153c     18 48 62 FD | 	getqx	_var14
01540     07 4B 02 FB | 	rdlong	_var15, objptr
01544     24 4B 02 F1 | 	add	_var15, _var14
01548     20 4B 02 F1 | 	add	_var15, _var10
0154c                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
0154c     25 43 42 FC | 	wrbyte	_var11, _var15
01550                 | LR__0018
01550                 | _hng030rm_spin2_putpixel2_ret
01550     2D 00 64 FD | 	ret
01554                 | 
01554                 | ' 
01554                 | ' 
01554                 | ' pub putpixel4(x,y,c) |byte b
01554                 | _hng030rm_spin2_putpixel4
01554                 | ' 
01554                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01554     00 2E 06 F6 | 	mov	_var01, #0
01558     00 5A 5E F2 | 	cmps	arg01, #0 wcz
0155c     01 2E 66 36 |  if_ae	neg	_var01, #1
01560     00 30 06 F6 | 	mov	_var02, #0
01564     90 0E 06 F1 | 	add	objptr, #144
01568     07 33 02 FB | 	rdlong	_var03, objptr
0156c     04 32 66 F0 | 	shl	_var03, #4
01570     19 5B 5A F2 | 	cmps	arg01, _var03 wcz
01574     01 30 66 C6 |  if_b	neg	_var02, #1
01578     18 2F 02 F5 | 	and	_var01, _var02
0157c     00 34 06 F6 | 	mov	_var04, #0
01580     00 5C 5E F2 | 	cmps	arg02, #0 wcz
01584     01 34 66 36 |  if_ae	neg	_var04, #1
01588     1A 2F 02 F5 | 	and	_var01, _var04
0158c     00 36 06 F6 | 	mov	_var05, #0
01590     04 0E 06 F1 | 	add	objptr, #4
01594     07 39 02 FB | 	rdlong	_var06, objptr
01598     94 0E 86 F1 | 	sub	objptr, #148
0159c     1C 5D 5A F2 | 	cmps	arg02, _var06 wcz
015a0     01 36 66 C6 |  if_b	neg	_var05, #1
015a4     1B 2F CA F7 | 	test	_var01, _var05 wz
015a8     7C 00 90 AD |  if_e	jmp	#LR__0019
015ac     90 0E 06 F1 | 	add	objptr, #144
015b0     07 3B 02 FB | 	rdlong	_var07, objptr
015b4     90 0E 86 F1 | 	sub	objptr, #144
015b8     02 3A 66 F0 | 	shl	_var07, #2
015bc     2E 3B 02 FD | 	qmul	_var07, arg02
015c0     18 3C 62 FD | 	getqx	_var08
015c4     07 3F 02 FB | 	rdlong	_var09, objptr
015c8     1E 3F 02 F1 | 	add	_var09, _var08
015cc     2D 41 02 F6 | 	mov	_var10, arg01
015d0     01 40 46 F0 | 	shr	_var10, #1
015d4     20 3F 02 F1 | 	add	_var09, _var10
015d8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
015d8     1F 43 C2 FA | 	rdbyte	_var11, _var09
015dc     2D 2F 52 F6 | 	abs	_var01, arg01 wc
015e0     01 2E 06 F5 | 	and	_var01, #1
015e4     17 2F 62 C6 |  if_b	neg	_var01, _var01
015e8     02 2E 66 F0 | 	shl	_var01, #2
015ec     0F 44 06 F6 | 	mov	_var12, #15
015f0     17 45 62 F0 | 	shl	_var12, _var01
015f4                 | '     b:=b & !(%1111<<((x//2)<<2))
015f4     22 43 22 F5 | 	andn	_var11, _var12
015f8     17 5F 62 F0 | 	shl	arg03, _var01
015fc                 | '     b:=b |(c<<((x//2)<<2))
015fc     2F 43 42 F5 | 	or	_var11, arg03
01600     90 0E 06 F1 | 	add	objptr, #144
01604     07 47 02 FB | 	rdlong	_var13, objptr
01608     90 0E 86 F1 | 	sub	objptr, #144
0160c     02 46 66 F0 | 	shl	_var13, #2
01610     2E 47 02 FD | 	qmul	_var13, arg02
01614     18 48 62 FD | 	getqx	_var14
01618     07 4B 02 FB | 	rdlong	_var15, objptr
0161c     24 4B 02 F1 | 	add	_var15, _var14
01620     20 4B 02 F1 | 	add	_var15, _var10
01624                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01624     25 43 42 FC | 	wrbyte	_var11, _var15
01628                 | LR__0019
01628                 | _hng030rm_spin2_putpixel4_ret
01628     2D 00 64 FD | 	ret
0162c                 | 
0162c                 | ' 
0162c                 | ' 
0162c                 | ' pub putpixel8(x,y,c)
0162c                 | _hng030rm_spin2_putpixel8
0162c                 | ' 
0162c                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
0162c     00 2E 06 F6 | 	mov	_var01, #0
01630     00 5A 5E F2 | 	cmps	arg01, #0 wcz
01634     01 2E 66 36 |  if_ae	neg	_var01, #1
01638     00 30 06 F6 | 	mov	_var02, #0
0163c     90 0E 06 F1 | 	add	objptr, #144
01640     07 33 02 FB | 	rdlong	_var03, objptr
01644     02 32 66 F0 | 	shl	_var03, #2
01648     19 5B 5A F2 | 	cmps	arg01, _var03 wcz
0164c     01 30 66 C6 |  if_b	neg	_var02, #1
01650     18 2F 02 F5 | 	and	_var01, _var02
01654     00 34 06 F6 | 	mov	_var04, #0
01658     00 5C 5E F2 | 	cmps	arg02, #0 wcz
0165c     01 34 66 36 |  if_ae	neg	_var04, #1
01660     1A 2F 02 F5 | 	and	_var01, _var04
01664     00 36 06 F6 | 	mov	_var05, #0
01668     04 0E 06 F1 | 	add	objptr, #4
0166c     07 39 02 FB | 	rdlong	_var06, objptr
01670     94 0E 86 F1 | 	sub	objptr, #148
01674     1C 5D 5A F2 | 	cmps	arg02, _var06 wcz
01678     01 36 66 C6 |  if_b	neg	_var05, #1
0167c     1B 2F CA F7 | 	test	_var01, _var05 wz
01680     28 00 90 AD |  if_e	jmp	#LR__0020
01684     90 0E 06 F1 | 	add	objptr, #144
01688     07 3B 02 FB | 	rdlong	_var07, objptr
0168c     90 0E 86 F1 | 	sub	objptr, #144
01690     02 3A 66 F0 | 	shl	_var07, #2
01694     2E 3B 02 FD | 	qmul	_var07, arg02
01698     18 3C 62 FD | 	getqx	_var08
0169c     07 3F 02 FB | 	rdlong	_var09, objptr
016a0     1E 3F 02 F1 | 	add	_var09, _var08
016a4     2D 3F 02 F1 | 	add	_var09, arg01
016a8                 | '     byte[buf_ptr+4*cpl*y+x]:=c
016a8     1F 5F 42 FC | 	wrbyte	arg03, _var09
016ac                 | LR__0020
016ac                 | _hng030rm_spin2_putpixel8_ret
016ac     2D 00 64 FD | 	ret
016b0                 | 
016b0                 | ' 
016b0                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
016b0                 | ' 
016b0                 | ' pub setbordercolor(r,g,b) | color
016b0                 | _hng030rm_spin2_setbordercolor
016b0     18 5A 66 F0 | 	shl	arg01, #24
016b4     10 5C 66 F0 | 	shl	arg02, #16
016b8     2E 5B 02 F1 | 	add	arg01, arg02
016bc     08 5E 66 F0 | 	shl	arg03, #8
016c0     2F 5B 02 F1 | 	add	arg01, arg03
016c4                 | ' 
016c4                 | ' color:=r<<24+g<<16+b<<8
016c4                 | ' bordercolor:=color
016c4     2C 0E 06 F1 | 	add	objptr, #44
016c8     07 5B 62 FC | 	wrlong	arg01, objptr
016cc     2C 0E 86 F1 | 	sub	objptr, #44
016d0                 | _hng030rm_spin2_setbordercolor_ret
016d0     2D 00 64 FD | 	ret
016d4                 | 
016d4                 | ' 
016d4                 | ' ''---------- Output a char at the cursor position, move the cursor
016d4                 | ' 
016d4                 | ' pub putchar(achar) | c,x,y
016d4                 | _hng030rm_spin2_putchar
016d4     12 5A 05 F6 | 	mov	COUNT_, #18
016d8     B0 00 A0 FD | 	call	#pushregs_
016dc     2D 69 02 F6 | 	mov	local01, arg01
016e0                 | ' 
016e0                 | ' if achar==10
016e0     0A 68 0E F2 | 	cmp	local01, #10 wz
016e4     58 00 90 5D |  if_ne	jmp	#LR__0021
016e8                 | '   crlf()
016e8                 | ' 
016e8                 | ' cursor_x:=0
016e8     34 0E 06 F1 | 	add	objptr, #52
016ec     07 01 48 FC | 	wrbyte	#0, objptr
016f0                 | ' cursor_y+=1
016f0     01 0E 06 F1 | 	add	objptr, #1
016f4     07 6B C2 FA | 	rdbyte	local02, objptr
016f8     01 6A 06 F1 | 	add	local02, #1
016fc     07 6B 42 FC | 	wrbyte	local02, objptr
01700                 | ' if cursor_y>lines-1
01700     5F 0E 06 F1 | 	add	objptr, #95
01704     07 6B 02 FB | 	rdlong	local02, objptr
01708     01 6A 86 F1 | 	sub	local02, #1
0170c     5F 0E 86 F1 | 	sub	objptr, #95
01710     07 6D C2 FA | 	rdbyte	local03, objptr
01714     35 0E 86 F1 | 	sub	objptr, #53
01718     35 6D 5A F2 | 	cmps	local03, local02 wcz
0171c     38 01 90 ED |  if_be	jmp	#LR__0024
01720                 | '   scrollup()
01720     40 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
01724     94 0E 06 F1 | 	add	objptr, #148
01728     07 6F 02 FB | 	rdlong	local04, objptr
0172c     01 6E 86 F1 | 	sub	local04, #1
01730                 | '   cursor_y:=lines-1
01730     5F 0E 86 F1 | 	sub	objptr, #95
01734     07 6F 42 FC | 	wrbyte	local04, objptr
01738     35 0E 86 F1 | 	sub	objptr, #53
0173c                 | ' else  
0173c     18 01 90 FD | 	jmp	#LR__0024
01740                 | LR__0021
01740                 | '   x:=cursor_x
01740     34 0E 06 F1 | 	add	objptr, #52
01744     07 71 C2 FA | 	rdbyte	local05, objptr
01748                 | '   y:=cursor_y
01748     01 0E 06 F1 | 	add	objptr, #1
0174c     07 73 C2 FA | 	rdbyte	local06, objptr
01750     03 0E 06 F1 | 	add	objptr, #3
01754     07 75 02 FB | 	rdlong	local07, objptr
01758     18 74 66 F0 | 	shl	local07, #24
0175c     04 0E 06 F1 | 	add	objptr, #4
01760     07 77 02 FB | 	rdlong	local08, objptr
01764     10 76 66 F0 | 	shl	local08, #16
01768     3B 75 02 F1 | 	add	local07, local08
0176c                 | '   c:=write_color<<24+write_background<<16
0176c     54 0E 06 F1 | 	add	objptr, #84
01770     07 79 02 FB | 	rdlong	local09, objptr
01774     90 0E 86 F1 | 	sub	objptr, #144
01778     39 79 02 FD | 	qmul	local09, local06
0177c     18 7A 62 FD | 	getqx	local10
01780     38 7B 02 F1 | 	add	local10, local05
01784     02 7A 66 F0 | 	shl	local10, #2
01788     07 7D 02 FB | 	rdlong	local11, objptr
0178c     3D 7D 02 F1 | 	add	local11, local10
01790     3E 7F 02 FB | 	rdlong	local12, local11
01794     7F 00 00 FF 
01798     FF 7F 06 F5 | 	and	local12, ##65535
0179c     3A 7F 42 F5 | 	or	local12, local07
017a0                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
017a0     3E 7F 62 FC | 	wrlong	local12, local11
017a4     90 0E 06 F1 | 	add	objptr, #144
017a8     07 79 02 FB | 	rdlong	local09, objptr
017ac     90 0E 86 F1 | 	sub	objptr, #144
017b0     39 79 02 FD | 	qmul	local09, local06
017b4     18 80 62 FD | 	getqx	local13
017b8     38 81 02 F1 | 	add	local13, local05
017bc     02 80 66 F0 | 	shl	local13, #2
017c0     07 83 02 FB | 	rdlong	local14, objptr
017c4     40 83 02 F1 | 	add	local14, local13
017c8     41 85 02 FB | 	rdlong	local15, local14
017cc     FF 84 26 F5 | 	andn	local15, #255
017d0     FF 68 06 F5 | 	and	local01, #255
017d4     34 85 42 F5 | 	or	local15, local01
017d8                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
017d8     41 85 62 FC | 	wrlong	local15, local14
017dc                 | '   cursor_x+=1
017dc     34 0E 06 F1 | 	add	objptr, #52
017e0     07 87 C2 FA | 	rdbyte	local16, objptr
017e4     01 86 06 F1 | 	add	local16, #1
017e8     07 87 42 FC | 	wrbyte	local16, objptr
017ec                 | '   if cursor_x==cpl
017ec     07 87 C2 FA | 	rdbyte	local16, objptr
017f0     5C 0E 06 F1 | 	add	objptr, #92
017f4     07 89 02 FB | 	rdlong	local17, objptr
017f8     90 0E 86 F1 | 	sub	objptr, #144
017fc     44 87 0A F2 | 	cmp	local16, local17 wz
01800     54 00 90 5D |  if_ne	jmp	#LR__0023
01804                 | '     cursor_x:=0
01804     34 0E 06 F1 | 	add	objptr, #52
01808     07 01 48 FC | 	wrbyte	#0, objptr
0180c                 | '     cursor_y+=1
0180c     01 0E 06 F1 | 	add	objptr, #1
01810     07 87 C2 FA | 	rdbyte	local16, objptr
01814     01 86 06 F1 | 	add	local16, #1
01818     07 87 42 FC | 	wrbyte	local16, objptr
0181c                 | '     if cursor_y>lines-1
0181c     5F 0E 06 F1 | 	add	objptr, #95
01820     07 87 02 FB | 	rdlong	local16, objptr
01824     01 86 86 F1 | 	sub	local16, #1
01828     5F 0E 86 F1 | 	sub	objptr, #95
0182c     07 89 C2 FA | 	rdbyte	local17, objptr
01830     35 0E 86 F1 | 	sub	objptr, #53
01834     43 89 5A F2 | 	cmps	local17, local16 wcz
01838     1C 00 90 ED |  if_be	jmp	#LR__0022
0183c                 | '       scrollup()
0183c     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
01840     94 0E 06 F1 | 	add	objptr, #148
01844     07 8B 02 FB | 	rdlong	local18, objptr
01848     01 8A 86 F1 | 	sub	local18, #1
0184c                 | '       cursor_y:=lines-1
0184c     5F 0E 86 F1 | 	sub	objptr, #95
01850     07 8B 42 FC | 	wrbyte	local18, objptr
01854     35 0E 86 F1 | 	sub	objptr, #53
01858                 | LR__0022
01858                 | LR__0023
01858                 | LR__0024
01858     AF F0 03 F6 | 	mov	ptra, fp
0185c     BF 00 A0 FD | 	call	#popregs_
01860                 | _hng030rm_spin2_putchar_ret
01860     2D 00 64 FD | 	ret
01864                 | 
01864                 | ' 
01864                 | ' ''-----------  Scroll the screen one line up
01864                 | ' 
01864                 | ' pub scrollup() | i
01864                 | _hng030rm_spin2_scrollup
01864     0A 5A 05 F6 | 	mov	COUNT_, #10
01868     B0 00 A0 FD | 	call	#pushregs_
0186c     90 0E 06 F1 | 	add	objptr, #144
01870     07 69 02 FB | 	rdlong	local01, objptr
01874     90 0E 86 F1 | 	sub	objptr, #144
01878     02 68 66 F0 | 	shl	local01, #2
0187c     07 5D 02 FB | 	rdlong	arg02, objptr
01880     34 5D 02 F1 | 	add	arg02, local01
01884     30 0E 06 F1 | 	add	objptr, #48
01888     07 5F 02 FB | 	rdlong	arg03, objptr
0188c     60 0E 06 F1 | 	add	objptr, #96
01890     07 6B 02 FB | 	rdlong	local02, objptr
01894     90 0E 86 F1 | 	sub	objptr, #144
01898     35 5F 82 F1 | 	sub	arg03, local02
0189c                 | ' 
0189c                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
0189c     07 5B 02 FB | 	rdlong	arg01, objptr
018a0     A8 35 B0 FD | 	call	#__system__longmove
018a4                 | ' repeat i from buflen-cpl to buflen-1
018a4     30 0E 06 F1 | 	add	objptr, #48
018a8     07 6D 02 FB | 	rdlong	local03, objptr
018ac     60 0E 06 F1 | 	add	objptr, #96
018b0     07 6B 02 FB | 	rdlong	local02, objptr
018b4     35 6D 82 F1 | 	sub	local03, local02
018b8     60 0E 86 F1 | 	sub	objptr, #96
018bc     07 6F 02 FB | 	rdlong	local04, objptr
018c0     01 6E 86 F1 | 	sub	local04, #1
018c4     07 71 02 FB | 	rdlong	local05, objptr
018c8     60 0E 06 F1 | 	add	objptr, #96
018cc     07 73 02 FB | 	rdlong	local06, objptr
018d0     90 0E 86 F1 | 	sub	objptr, #144
018d4     39 71 82 F1 | 	sub	local05, local06
018d8     38 6F 5A F2 | 	cmps	local04, local05 wcz
018dc     01 74 06 16 |  if_a	mov	local07, #1
018e0     01 74 66 E6 |  if_be	neg	local07, #1
018e4     3A 6F 02 F1 | 	add	local04, local07
018e8     44 E7 9F FE | 	loc	pa,	#(@LR__0026-@LR__0025)
018ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
018f0                 | LR__0025
018f0     36 77 02 F6 | 	mov	local08, local03
018f4     02 76 66 F0 | 	shl	local08, #2
018f8     07 79 02 FB | 	rdlong	local09, objptr
018fc     3B 79 02 F1 | 	add	local09, local08
01900     3C 7B 02 FB | 	rdlong	local10, local09
01904     80 FF 7F FF 
01908     00 7A 06 F5 | 	and	local10, ##-65536
0190c     20 7A 46 F5 | 	or	local10, #32
01910                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
01910     3C 7B 62 FC | 	wrlong	local10, local09
01914     3A 6D 02 F1 | 	add	local03, local07
01918     37 6D 0A F2 | 	cmp	local03, local04 wz
0191c     D0 FF 9F 5D |  if_ne	jmp	#LR__0025
01920                 | LR__0026
01920     AF F0 03 F6 | 	mov	ptra, fp
01924     BF 00 A0 FD | 	call	#popregs_
01928                 | _hng030rm_spin2_scrollup_ret
01928     2D 00 64 FD | 	ret
0192c                 | 
0192c                 | ' 
0192c                 | ' 
0192c                 | ' 
0192c                 | ' '*************************************************************************
0192c                 | ' '                                                                        *
0192c                 | ' '  Mode setting and driver start                                                          *
0192c                 | ' '                                                                        *
0192c                 | ' '*************************************************************************
0192c                 | ' 
0192c                 | ' ''---------  Set the graphics mode
0192c                 | ' 
0192c                 | ' 
0192c                 | ' 
0192c                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
0192c                 | _hng030rm_spin2_setmode
0192c     50 5A 05 F6 | 	mov	COUNT_, #80
01930     B0 00 A0 FD | 	call	#pushregs_
01934     2D 69 02 F6 | 	mov	local01, arg01
01938                 | ' 
01938                 | ' '' mode:tn_bb_cc_vv_hh
01938                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
01938                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
01938                 | ' 
01938                 | ' if mode==(512+192+48)
01938     01 00 00 FF 
0193c     F0 68 0E F2 | 	cmp	local01, ##752 wz
01940                 | '   return 'no RAM
01940     1C 0A 90 AD |  if_e	jmp	#LR__0067
01944                 | ' 
01944                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
01944     34 6B 02 F6 | 	mov	local02, local01
01948     06 6A 46 F0 | 	shr	local02, #6
0194c     07 6A 06 F5 | 	and	local02, #7
01950     08 6A 26 F3 | 	fle	local02, #8
01954     35 6D 02 F6 | 	mov	local03, local02
01958     30 6C 62 FD | 	jmprel	local03
0195c                 | LR__0027
0195c     20 00 90 FD | 	jmp	#LR__0028
01960     58 00 90 FD | 	jmp	#LR__0029
01964     90 00 90 FD | 	jmp	#LR__0030
01968     C8 00 90 FD | 	jmp	#LR__0031
0196c     00 01 90 FD | 	jmp	#LR__0032
01970     38 01 90 FD | 	jmp	#LR__0033
01974     70 01 90 FD | 	jmp	#LR__0034
01978     A8 01 90 FD | 	jmp	#LR__0035
0197c     E4 01 90 FD | 	jmp	#LR__0036
01980                 | LR__0028
01980                 | ' 
01980                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
01980     50 0E 06 F1 | 	add	objptr, #80
01984     07 5B 02 F6 | 	mov	arg01, objptr
01988     50 0E 86 F1 | 	sub	objptr, #80
0198c     0E 00 00 FF 
01990     58 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
01994     0C 6F 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01998     37 71 02 F6 | 	mov	local05, local04
0199c     10 72 06 F6 | 	mov	local06, #16
019a0     38 5D 02 F6 | 	mov	arg02, local05
019a4     10 5E 06 F6 | 	mov	arg03, #16
019a8     0E 00 00 FF 
019ac     58 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
019b0     98 34 B0 FD | 	call	#__system__longmove
019b4     14 75 02 F6 | 	mov	local07, result1
019b8     A8 01 90 FD | 	jmp	#LR__0036
019bc                 | LR__0029
019bc                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
019bc     50 0E 06 F1 | 	add	objptr, #80
019c0     07 5B 02 F6 | 	mov	arg01, objptr
019c4     50 0E 86 F1 | 	sub	objptr, #80
019c8     0E 00 00 FF 
019cc     98 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
019d0     0C 6F 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
019d4     37 71 02 F6 | 	mov	local05, local04
019d8     10 72 06 F6 | 	mov	local06, #16
019dc     38 5D 02 F6 | 	mov	arg02, local05
019e0     10 5E 06 F6 | 	mov	arg03, #16
019e4     0E 00 00 FF 
019e8     98 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
019ec     5C 34 B0 FD | 	call	#__system__longmove
019f0     14 75 02 F6 | 	mov	local07, result1
019f4     6C 01 90 FD | 	jmp	#LR__0036
019f8                 | LR__0030
019f8                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
019f8     50 0E 06 F1 | 	add	objptr, #80
019fc     07 5B 02 F6 | 	mov	arg01, objptr
01a00     50 0E 86 F1 | 	sub	objptr, #80
01a04     0E 00 00 FF 
01a08     D8 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
01a0c     0C 6F 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01a10     37 71 02 F6 | 	mov	local05, local04
01a14     10 72 06 F6 | 	mov	local06, #16
01a18     38 5D 02 F6 | 	mov	arg02, local05
01a1c     10 5E 06 F6 | 	mov	arg03, #16
01a20     0E 00 00 FF 
01a24     D8 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
01a28     20 34 B0 FD | 	call	#__system__longmove
01a2c     14 75 02 F6 | 	mov	local07, result1
01a30     30 01 90 FD | 	jmp	#LR__0036
01a34                 | LR__0031
01a34                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
01a34     50 0E 06 F1 | 	add	objptr, #80
01a38     07 5B 02 F6 | 	mov	arg01, objptr
01a3c     50 0E 86 F1 | 	sub	objptr, #80
01a40     0E 00 00 FF 
01a44     18 19 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
01a48     0C 6F 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01a4c     37 71 02 F6 | 	mov	local05, local04
01a50     10 72 06 F6 | 	mov	local06, #16
01a54     38 5D 02 F6 | 	mov	arg02, local05
01a58     10 5E 06 F6 | 	mov	arg03, #16
01a5c     0E 00 00 FF 
01a60     18 19 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
01a64     E4 33 B0 FD | 	call	#__system__longmove
01a68     14 75 02 F6 | 	mov	local07, result1
01a6c     F4 00 90 FD | 	jmp	#LR__0036
01a70                 | LR__0032
01a70                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
01a70     50 0E 06 F1 | 	add	objptr, #80
01a74     07 5B 02 F6 | 	mov	arg01, objptr
01a78     50 0E 86 F1 | 	sub	objptr, #80
01a7c     0E 00 00 FF 
01a80     58 19 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
01a84     0C 6F 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01a88     37 71 02 F6 | 	mov	local05, local04
01a8c     10 72 06 F6 | 	mov	local06, #16
01a90     38 5D 02 F6 | 	mov	arg02, local05
01a94     10 5E 06 F6 | 	mov	arg03, #16
01a98     0E 00 00 FF 
01a9c     58 19 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
01aa0     A8 33 B0 FD | 	call	#__system__longmove
01aa4     14 75 02 F6 | 	mov	local07, result1
01aa8     B8 00 90 FD | 	jmp	#LR__0036
01aac                 | LR__0033
01aac                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
01aac     50 0E 06 F1 | 	add	objptr, #80
01ab0     07 5B 02 F6 | 	mov	arg01, objptr
01ab4     50 0E 86 F1 | 	sub	objptr, #80
01ab8     0E 00 00 FF 
01abc     98 19 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
01ac0     0C 6F 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01ac4     37 71 02 F6 | 	mov	local05, local04
01ac8     10 72 06 F6 | 	mov	local06, #16
01acc     38 5D 02 F6 | 	mov	arg02, local05
01ad0     10 5E 06 F6 | 	mov	arg03, #16
01ad4     0E 00 00 FF 
01ad8     98 19 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
01adc     6C 33 B0 FD | 	call	#__system__longmove
01ae0     14 75 02 F6 | 	mov	local07, result1
01ae4     7C 00 90 FD | 	jmp	#LR__0036
01ae8                 | LR__0034
01ae8                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
01ae8     50 0E 06 F1 | 	add	objptr, #80
01aec     07 5B 02 F6 | 	mov	arg01, objptr
01af0     50 0E 86 F1 | 	sub	objptr, #80
01af4     0E 00 00 FF 
01af8     D8 19 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
01afc     0C 6F 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01b00     37 71 02 F6 | 	mov	local05, local04
01b04     10 72 06 F6 | 	mov	local06, #16
01b08     38 5D 02 F6 | 	mov	arg02, local05
01b0c     10 5E 06 F6 | 	mov	arg03, #16
01b10     0E 00 00 FF 
01b14     D8 19 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
01b18     30 33 B0 FD | 	call	#__system__longmove
01b1c     14 75 02 F6 | 	mov	local07, result1
01b20     40 00 90 FD | 	jmp	#LR__0036
01b24                 | LR__0035
01b24                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
01b24     50 0E 06 F1 | 	add	objptr, #80
01b28     07 77 02 F6 | 	mov	local08, objptr
01b2c     3B 79 02 F6 | 	mov	local09, local08
01b30     0F 00 00 FF 
01b34     18 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
01b38     0C 6F 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
01b3c     37 71 02 F6 | 	mov	local05, local04
01b40     10 72 06 F6 | 	mov	local06, #16
01b44     3C 5B 02 F6 | 	mov	arg01, local09
01b48     38 5D 02 F6 | 	mov	arg02, local05
01b4c     10 5E 06 F6 | 	mov	arg03, #16
01b50     50 0E 86 F1 | 	sub	objptr, #80
01b54     0F 00 00 FF 
01b58     18 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
01b5c     EC 32 B0 FD | 	call	#__system__longmove
01b60     14 75 02 F6 | 	mov	local07, result1
01b64                 | LR__0036
01b64                 | ' 
01b64                 | ' ' 4-bit graphics: do nothing with timings :)
01b64                 | ' if mode<512
01b64     01 00 00 FF 
01b68     00 68 5E F2 | 	cmps	local01, ##512 wcz
01b6c     20 00 90 3D |  if_ae	jmp	#LR__0037
01b70     0C 00 00 FF 
01b74     58 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
01b78     0C 7B 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
01b7c                 | '   palette_ptr:=@ataripalette
01b7c     18 0E 06 F1 | 	add	objptr, #24
01b80     07 7B 62 FC | 	wrlong	local10, objptr
01b84     18 0E 86 F1 | 	sub	objptr, #24
01b88     0C 00 00 FF 
01b8c     58 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
01b90                 | LR__0037
01b90                 | ' 
01b90                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
01b90     34 6B 02 F6 | 	mov	local02, local01
01b94     01 00 00 FF 
01b98     30 6A 06 F5 | 	and	local02, ##560
01b9c     01 00 00 FF 
01ba0     30 6A 0E F2 | 	cmp	local02, ##560 wz
01ba4     48 00 90 5D |  if_ne	jmp	#LR__0038
01ba8                 | '   timings[5]:=4
01ba8     64 0E 06 F1 | 	add	objptr, #100
01bac     07 09 68 FC | 	wrlong	#4, objptr
01bb0     18 0E 06 F1 | 	add	objptr, #24
01bb4     07 7D 02 FB | 	rdlong	local11, objptr
01bb8     01 7C 66 F0 | 	shl	local11, #1
01bbc                 | '   timings[11]:=timings[11]<<1
01bbc     07 7D 62 FC | 	wrlong	local11, objptr
01bc0                 | '   putpixel:=p8
01bc0     6C 0E 06 F1 | 	add	objptr, #108
01bc4     07 6B 02 FB | 	rdlong	local02, objptr
01bc8     10 0E 86 F1 | 	sub	objptr, #16
01bcc     07 6B 62 FC | 	wrlong	local02, objptr
01bd0     0C 00 00 FF 
01bd4     58 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
01bd8     0C 7F 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
01bdc                 | '   palette_ptr:=@ataripalette
01bdc     C0 0E 86 F1 | 	sub	objptr, #192
01be0     07 7F 62 FC | 	wrlong	local12, objptr
01be4     18 0E 86 F1 | 	sub	objptr, #24
01be8     0C 00 00 FF 
01bec     58 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
01bf0                 | LR__0038
01bf0                 | ' 
01bf0                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
01bf0     34 6B 02 F6 | 	mov	local02, local01
01bf4     01 00 00 FF 
01bf8     30 6A 06 F5 | 	and	local02, ##560
01bfc     01 00 00 FF 
01c00     10 6A 0E F2 | 	cmp	local02, ##528 wz
01c04     48 00 90 5D |  if_ne	jmp	#LR__0039
01c08                 | '   timings[5]:=16
01c08     64 0E 06 F1 | 	add	objptr, #100
01c0c     07 21 68 FC | 	wrlong	#16, objptr
01c10     18 0E 06 F1 | 	add	objptr, #24
01c14     07 81 02 FB | 	rdlong	local13, objptr
01c18     01 80 46 F0 | 	shr	local13, #1
01c1c                 | '   timings[11]:=timings[11]>>1
01c1c     07 81 62 FC | 	wrlong	local13, objptr
01c20                 | '   putpixel:=p2
01c20     64 0E 06 F1 | 	add	objptr, #100
01c24     07 6B 02 FB | 	rdlong	local02, objptr
01c28     08 0E 86 F1 | 	sub	objptr, #8
01c2c     07 6B 62 FC | 	wrlong	local02, objptr
01c30     0C 00 00 FF 
01c34     08 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
01c38     0C 83 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
01c3c                 | '   palette_ptr:=@fourcolors
01c3c     C0 0E 86 F1 | 	sub	objptr, #192
01c40     07 83 62 FC | 	wrlong	local14, objptr
01c44     18 0E 86 F1 | 	sub	objptr, #24
01c48     0C 00 00 FF 
01c4c     08 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
01c50                 | LR__0039
01c50                 | ' 
01c50                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
01c50     34 6B 02 F6 | 	mov	local02, local01
01c54     01 00 00 FF 
01c58     30 6A 06 F5 | 	and	local02, ##560
01c5c     01 00 00 FF 
01c60     00 6A 0E F2 | 	cmp	local02, ##512 wz
01c64     48 00 90 5D |  if_ne	jmp	#LR__0040
01c68                 | '   timings[5]:=32
01c68     64 0E 06 F1 | 	add	objptr, #100
01c6c     07 41 68 FC | 	wrlong	#32, objptr
01c70     18 0E 06 F1 | 	add	objptr, #24
01c74     07 85 02 FB | 	rdlong	local15, objptr
01c78     02 84 46 F0 | 	shr	local15, #2
01c7c                 | '   timings[11]:=timings[11]>>2
01c7c     07 85 62 FC | 	wrlong	local15, objptr
01c80                 | '   putpixel:=p1
01c80     60 0E 06 F1 | 	add	objptr, #96
01c84     07 6B 02 FB | 	rdlong	local02, objptr
01c88     04 0E 86 F1 | 	sub	objptr, #4
01c8c     07 6B 62 FC | 	wrlong	local02, objptr
01c90     0C 00 00 FF 
01c94     00 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
01c98     0C 87 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
01c9c                 | '   palette_ptr:=@twocolors
01c9c     C0 0E 86 F1 | 	sub	objptr, #192
01ca0     07 87 62 FC | 	wrlong	local16, objptr
01ca4     18 0E 86 F1 | 	sub	objptr, #24
01ca8     0C 00 00 FF 
01cac     00 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
01cb0                 | LR__0040
01cb0                 | ' 
01cb0                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
01cb0     34 6B 02 F6 | 	mov	local02, local01
01cb4     01 00 00 FF 
01cb8     30 6A 06 F5 | 	and	local02, ##560
01cbc     01 00 00 FF 
01cc0     20 6A 0E F2 | 	cmp	local02, ##544 wz
01cc4     30 00 90 5D |  if_ne	jmp	#LR__0041
01cc8                 | '   putpixel:=p4
01cc8     E4 0E 06 F1 | 	add	objptr, #228
01ccc     07 6B 02 FB | 	rdlong	local02, objptr
01cd0     0C 0E 86 F1 | 	sub	objptr, #12
01cd4     07 6B 62 FC | 	wrlong	local02, objptr
01cd8     0C 00 00 FF 
01cdc     18 18 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
01ce0     0C 89 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
01ce4                 | '   palette_ptr:=@vga16
01ce4     C0 0E 86 F1 | 	sub	objptr, #192
01ce8     07 89 62 FC | 	wrlong	local17, objptr
01cec     18 0E 86 F1 | 	sub	objptr, #24
01cf0     0C 00 00 FF 
01cf4     18 18 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
01cf8                 | LR__0041
01cf8                 | ' 
01cf8                 | ' repeat i from 0 to 4
01cf8     00 8A 06 F6 | 	mov	local18, #0
01cfc     44 E3 9F FE | 	loc	pa,	#(@LR__0043-@LR__0042)
01d00     93 00 A0 FD | 	call	#FCACHE_LOAD_
01d04                 | LR__0042
01d04     45 8D 02 F6 | 	mov	local19, local18
01d08     02 8C 66 F0 | 	shl	local19, #2
01d0c     50 0E 06 F1 | 	add	objptr, #80
01d10     07 8D 02 F1 | 	add	local19, objptr
01d14     2C 0E 86 F1 | 	sub	objptr, #44
01d18     07 8F 02 FB | 	rdlong	local20, objptr
01d1c     24 0E 86 F1 | 	sub	objptr, #36
01d20     11 8E 66 F0 | 	shl	local20, #17
01d24     46 91 02 FB | 	rdlong	local21, local19
01d28     47 91 02 F1 | 	add	local21, local20
01d2c     48 93 02 F6 | 	mov	local22, local21
01d30     80 40 38 FF 
01d34     00 92 06 F1 | 	add	local22, ##1887502336
01d38                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
01d38     46 93 62 FC | 	wrlong	local22, local19
01d3c     01 8A 06 F1 | 	add	local18, #1
01d40     05 8A 5E F2 | 	cmps	local18, #5 wcz
01d44     BC FF 9F CD |  if_b	jmp	#LR__0042
01d48                 | LR__0043
01d48     24 0E 06 F1 | 	add	objptr, #36
01d4c     07 95 02 FB | 	rdlong	local23, objptr
01d50     11 94 66 F0 | 	shl	local23, #17
01d54     40 0E 06 F1 | 	add	objptr, #64
01d58     07 97 02 FB | 	rdlong	local24, objptr
01d5c     4A 97 02 F1 | 	add	local24, local23
01d60                 | ' timings[5]:=timings[5]+hdmibase<<17
01d60     07 97 62 FC | 	wrlong	local24, objptr
01d64                 | ' clkfreq:=timings[13]
01d64     20 0E 06 F1 | 	add	objptr, #32
01d68     07 6B 02 FB | 	rdlong	local02, objptr
01d6c     14 6A 66 FC | 	wrlong	local02, #20
01d70                 | ' hubset(timings[14])
01d70     04 0E 06 F1 | 	add	objptr, #4
01d74     07 5B 02 FB | 	rdlong	arg01, objptr
01d78     88 0E 86 F1 | 	sub	objptr, #136
01d7c     00 5A 62 FD | 	hubset	arg01
01d80                 | ' waitms(1)
01d80     01 5A 06 F6 | 	mov	arg01, #1
01d84     B8 32 B0 FD | 	call	#__system___waitms
01d88     34 99 02 F6 | 	mov	local25, local01
01d8c     03 98 06 F5 | 	and	local25, #3
01d90     4C 9B C2 F9 | 	decod	local26, local25
01d94                 | ' 
01d94                 | ' 
01d94                 | ' xzoom:=1<<(mode & 3)
01d94     CC 0E 06 F1 | 	add	objptr, #204
01d98     07 9B 62 FC | 	wrlong	local26, objptr
01d9c                 | ' 
01d9c                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
01d9c     4D 77 02 F6 | 	mov	local08, local26
01da0     CC 0E 86 F1 | 	sub	objptr, #204
01da4     08 76 0E F2 | 	cmp	local08, #8 wz
01da8     24 00 90 5D |  if_ne	jmp	#LR__0044
01dac     34 79 02 F6 | 	mov	local09, local01
01db0     04 78 46 F0 | 	shr	local09, #4
01db4     03 78 06 F5 | 	and	local09, #3
01db8     03 78 0E F2 | 	cmp	local09, #3 wz
01dbc     10 00 90 AD |  if_e	jmp	#LR__0044
01dc0                 | '   xzoom:=4
01dc0     04 6A 06 F6 | 	mov	local02, #4
01dc4     CC 0E 06 F1 | 	add	objptr, #204
01dc8     07 09 68 FC | 	wrlong	#4, objptr
01dcc     CC 0E 86 F1 | 	sub	objptr, #204
01dd0                 | LR__0044
01dd0     34 9D 02 F6 | 	mov	local27, local01
01dd4     02 9C 46 F0 | 	shr	local27, #2
01dd8     03 9C 06 F5 | 	and	local27, #3
01ddc     4E 9F C2 F9 | 	decod	local28, local27
01de0                 | ' 
01de0                 | ' yzoom:=1<<((mode>>2) & 3)
01de0     D0 0E 06 F1 | 	add	objptr, #208
01de4     07 9F 62 FC | 	wrlong	local28, objptr
01de8     04 0E 86 F1 | 	sub	objptr, #4
01dec     07 77 02 FB | 	rdlong	local08, objptr
01df0     04 0E 06 F1 | 	add	objptr, #4
01df4     07 6F 02 FB | 	rdlong	local04, objptr
01df8     37 77 02 FD | 	qmul	local08, local04
01dfc     18 A0 62 FD | 	getqx	local29
01e00                 | ' azoom:=xzoom*yzoom
01e00     04 0E 06 F1 | 	add	objptr, #4
01e04     07 A1 62 FC | 	wrlong	local29, objptr
01e08                 | ' 
01e08                 | ' cpl:=timings[11]
01e08     58 0E 86 F1 | 	sub	objptr, #88
01e0c     07 6B 02 FB | 	rdlong	local02, objptr
01e10     14 0E 06 F1 | 	add	objptr, #20
01e14     07 6B 62 FC | 	wrlong	local02, objptr
01e18     90 0E 86 F1 | 	sub	objptr, #144
01e1c                 | ' if (mode<512)
01e1c     01 00 00 FF 
01e20     00 68 5E F2 | 	cmps	local01, ##512 wcz
01e24     60 00 90 3D |  if_ae	jmp	#LR__0045
01e28     80 0E 06 F1 | 	add	objptr, #128
01e2c     07 09 03 FB | 	rdlong	muldiva_, objptr
01e30     04 08 47 F0 | 	shr	muldiva_, #4
01e34     50 0E 06 F1 | 	add	objptr, #80
01e38     07 0B 03 FB | 	rdlong	muldivb_, objptr
01e3c     D0 0E 86 F1 | 	sub	objptr, #208
01e40     CC 00 A0 FD | 	call	#unsdivide_
01e44                 | '   lines:=(timings[12]>>4)+/yzoom
01e44     94 0E 06 F1 | 	add	objptr, #148
01e48     07 0B 63 FC | 	wrlong	muldivb_, objptr
01e4c                 | '   if ((timings[12]>>4)+//yzoom) <>0
01e4c     14 0E 86 F1 | 	sub	objptr, #20
01e50     07 09 03 FB | 	rdlong	muldiva_, objptr
01e54     04 08 47 F0 | 	shr	muldiva_, #4
01e58     50 0E 06 F1 | 	add	objptr, #80
01e5c     07 0B 03 FB | 	rdlong	muldivb_, objptr
01e60     D0 0E 86 F1 | 	sub	objptr, #208
01e64     CC 00 A0 FD | 	call	#unsdivide_
01e68     00 08 0F F2 | 	cmp	muldiva_, #0 wz
01e6c     AC 00 90 AD |  if_e	jmp	#LR__0048
01e70                 | '     lines +=1
01e70     94 0E 06 F1 | 	add	objptr, #148
01e74     07 6B 02 FB | 	rdlong	local02, objptr
01e78     01 6A 06 F1 | 	add	local02, #1
01e7c     07 6B 62 FC | 	wrlong	local02, objptr
01e80     94 0E 86 F1 | 	sub	objptr, #148
01e84                 | ' 
01e84                 | ' else
01e84     94 00 90 FD | 	jmp	#LR__0048
01e88                 | LR__0045
01e88     80 0E 06 F1 | 	add	objptr, #128
01e8c     07 09 03 FB | 	rdlong	muldiva_, objptr
01e90     50 0E 06 F1 | 	add	objptr, #80
01e94     07 0B 03 FB | 	rdlong	muldivb_, objptr
01e98     D0 0E 86 F1 | 	sub	objptr, #208
01e9c     D0 00 A0 FD | 	call	#divide_
01ea0                 | '   lines:=timings[12]/yzoom
01ea0     94 0E 06 F1 | 	add	objptr, #148
01ea4     07 0B 63 FC | 	wrlong	muldivb_, objptr
01ea8                 | '   if cpl//xzoom==0
01ea8     04 0E 86 F1 | 	sub	objptr, #4
01eac     07 09 03 FB | 	rdlong	muldiva_, objptr
01eb0     3C 0E 06 F1 | 	add	objptr, #60
01eb4     07 0B 03 FB | 	rdlong	muldivb_, objptr
01eb8     CC 0E 86 F1 | 	sub	objptr, #204
01ebc     D0 00 A0 FD | 	call	#divide_
01ec0     00 08 0F F2 | 	cmp	muldiva_, #0 wz
01ec4     28 00 90 5D |  if_ne	jmp	#LR__0046
01ec8                 | '     cpl:=cpl/xzoom
01ec8     90 0E 06 F1 | 	add	objptr, #144
01ecc     07 09 03 FB | 	rdlong	muldiva_, objptr
01ed0     3C 0E 06 F1 | 	add	objptr, #60
01ed4     07 0B 03 FB | 	rdlong	muldivb_, objptr
01ed8     CC 0E 86 F1 | 	sub	objptr, #204
01edc     D0 00 A0 FD | 	call	#divide_
01ee0     90 0E 06 F1 | 	add	objptr, #144
01ee4     07 0B 63 FC | 	wrlong	muldivb_, objptr
01ee8     90 0E 86 F1 | 	sub	objptr, #144
01eec                 | '   else
01eec     2C 00 90 FD | 	jmp	#LR__0047
01ef0                 | LR__0046
01ef0     90 0E 06 F1 | 	add	objptr, #144
01ef4     07 09 03 FB | 	rdlong	muldiva_, objptr
01ef8     3C 0E 06 F1 | 	add	objptr, #60
01efc     07 0B 03 FB | 	rdlong	muldivb_, objptr
01f00     CC 0E 86 F1 | 	sub	objptr, #204
01f04     D0 00 A0 FD | 	call	#divide_
01f08     85 A3 02 F6 | 	mov	local30, muldivb_
01f0c     01 A2 06 F1 | 	add	local30, #1
01f10                 | '     cpl:=cpl/xzoom+1
01f10     90 0E 06 F1 | 	add	objptr, #144
01f14     07 A3 62 FC | 	wrlong	local30, objptr
01f18     90 0E 86 F1 | 	sub	objptr, #144
01f1c                 | LR__0047
01f1c                 | LR__0048
01f1c     90 0E 06 F1 | 	add	objptr, #144
01f20     07 77 02 FB | 	rdlong	local08, objptr
01f24     04 0E 06 F1 | 	add	objptr, #4
01f28     07 6F 02 FB | 	rdlong	local04, objptr
01f2c     37 77 02 FD | 	qmul	local08, local04
01f30     18 A4 62 FD | 	getqx	local31
01f34                 | ' 
01f34                 | ' buflen:=(cpl*lines)
01f34     64 0E 86 F1 | 	sub	objptr, #100
01f38     07 A5 62 FC | 	wrlong	local31, objptr
01f3c     30 0E 86 F1 | 	sub	objptr, #48
01f40     02 A4 66 F0 | 	shl	local31, #2
01f44     13 A6 C6 F9 | 	decod	local32, #19
01f48     52 A7 82 F1 | 	sub	local32, local31
01f4c                 | ' buf_ptr:=$80000-4*buflen
01f4c     07 A7 62 FC | 	wrlong	local32, objptr
01f50     50 0E 06 F1 | 	add	objptr, #80
01f54     07 A9 02 F6 | 	mov	local33, objptr
01f58                 | ' mode_ptr:=@timings
01f58     3C 0E 86 F1 | 	sub	objptr, #60
01f5c     07 A9 62 FC | 	wrlong	local33, objptr
01f60                 | ' graphmode:=mode
01f60     B0 0E 06 F1 | 	add	objptr, #176
01f64     07 69 62 FC | 	wrlong	local01, objptr
01f68     C4 0E 86 F1 | 	sub	objptr, #196
01f6c                 | ' makedl(mode)
01f6c     34 5B 02 F6 | 	mov	arg01, local01
01f70                 | ' 
01f70                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
01f70                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
01f70                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
01f70                 | ' 
01f70                 | ' '   0 - display a up/down border line
01f70                 | ' 
01f70                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
01f70                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
01f70                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
01f70                 | ' '    nnnn - font line to display, 0..15
01f70                 | ' '    llllll - character line, determines the cursor Y position
01f70                 | ' 
01f70                 | ' 
01f70                 | ' if (mode &256==0)
01f70     00 5B CE F7 | 	test	arg01, #256 wz
01f74     1C 00 90 5D |  if_ne	jmp	#LR__0049
01f78     07 AB 02 FB | 	rdlong	local34, objptr
01f7c     04 00 00 FF 
01f80     00 AB 86 F1 | 	sub	local34, ##2304
01f84                 | '   dl_ptr:=buf_ptr-4*576
01f84     1C 0E 06 F1 | 	add	objptr, #28
01f88     07 AB 62 FC | 	wrlong	local34, objptr
01f8c     1C 0E 86 F1 | 	sub	objptr, #28
01f90                 | ' else
01f90     18 00 90 FD | 	jmp	#LR__0050
01f94                 | LR__0049
01f94     07 AD 02 FB | 	rdlong	local35, objptr
01f98     03 00 00 FF 
01f9c     C0 AD 86 F1 | 	sub	local35, ##1984
01fa0                 | '   dl_ptr:=buf_ptr-4*496
01fa0     1C 0E 06 F1 | 	add	objptr, #28
01fa4     07 AD 62 FC | 	wrlong	local35, objptr
01fa8     1C 0E 86 F1 | 	sub	objptr, #28
01fac                 | LR__0050
01fac     2D AF 02 F6 | 	mov	local36, arg01
01fb0     02 AE 46 F0 | 	shr	local36, #2
01fb4     03 AE 06 F5 | 	and	local36, #3
01fb8                 | '  ' dl_ptr:=buf_ptr-4*540
01fb8                 | ' 
01fb8                 | ' vzoom:=((mode>>2) & 3)
01fb8                 | ' 
01fb8                 | ' 
01fb8                 | ' if mode<512 '' text modes
01fb8     01 00 00 FF 
01fbc     00 5A 5E F2 | 	cmps	arg01, ##512 wcz
01fc0     E4 01 90 3D |  if_ae	jmp	#LR__0058
01fc4                 | ' 
01fc4                 | '   if timings[6]>0 'borders
01fc4     68 0E 06 F1 | 	add	objptr, #104
01fc8     07 B1 02 FB | 	rdlong	local37, objptr
01fcc     68 0E 86 F1 | 	sub	objptr, #104
01fd0     00 B0 5E F2 | 	cmps	local37, #0 wcz
01fd4     D4 00 90 ED |  if_be	jmp	#LR__0055
01fd8                 | '     repeat i from 0 to timings[6]-1 '0 to -1
01fd8     00 B2 06 F6 | 	mov	local38, #0
01fdc     68 0E 06 F1 | 	add	objptr, #104
01fe0     07 B5 02 FB | 	rdlong	local39, objptr
01fe4     68 0E 86 F1 | 	sub	objptr, #104
01fe8     01 B4 86 F1 | 	sub	local39, #1
01fec     00 B4 5E F2 | 	cmps	local39, #0 wcz
01ff0     01 B6 06 16 |  if_a	mov	local40, #1
01ff4     01 B6 66 E6 |  if_be	neg	local40, #1
01ff8     5B B9 02 F6 | 	mov	local41, local40
01ffc     5B B5 02 F1 | 	add	local39, local40
02000     24 E0 9F FE | 	loc	pa,	#(@LR__0052-@LR__0051)
02004     93 00 A0 FD | 	call	#FCACHE_LOAD_
02008                 | LR__0051
02008     59 BB 02 F6 | 	mov	local42, local38
0200c     02 BA 66 F0 | 	shl	local42, #2
02010     1C 0E 06 F1 | 	add	objptr, #28
02014     07 BD 02 FB | 	rdlong	local43, objptr
02018     1C 0E 86 F1 | 	sub	objptr, #28
0201c     5D BD 02 F1 | 	add	local43, local42
02020                 | '       long[dl_ptr+4*i]:=$0
02020     5E 01 68 FC | 	wrlong	#0, local43
02024     5C B3 02 F1 | 	add	local38, local41
02028     5A B3 0A F2 | 	cmp	local38, local39 wz
0202c     D8 FF 9F 5D |  if_ne	jmp	#LR__0051
02030                 | LR__0052
02030                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02030     68 0E 06 F1 | 	add	objptr, #104
02034     07 B3 02 FB | 	rdlong	local38, objptr
02038     18 0E 06 F1 | 	add	objptr, #24
0203c     07 B7 02 FB | 	rdlong	local40, objptr
02040     5B B3 02 F1 | 	add	local38, local40
02044     0C 0E 06 F1 | 	add	objptr, #12
02048     07 BF 02 FB | 	rdlong	local44, objptr
0204c     01 BE 86 F1 | 	sub	local44, #1
02050     24 0E 86 F1 | 	sub	objptr, #36
02054     07 C1 02 FB | 	rdlong	local45, objptr
02058     18 0E 06 F1 | 	add	objptr, #24
0205c     07 C3 02 FB | 	rdlong	local46, objptr
02060     80 0E 86 F1 | 	sub	objptr, #128
02064     61 C1 02 F1 | 	add	local45, local46
02068     60 BF 5A F2 | 	cmps	local44, local45 wcz
0206c     01 C4 06 16 |  if_a	mov	local47, #1
02070     01 C4 66 E6 |  if_be	neg	local47, #1
02074     62 C7 02 F6 | 	mov	local48, local47
02078     62 BF 02 F1 | 	add	local44, local47
0207c     A8 DF 9F FE | 	loc	pa,	#(@LR__0054-@LR__0053)
02080     93 00 A0 FD | 	call	#FCACHE_LOAD_
02084                 | LR__0053
02084     59 C9 02 F6 | 	mov	local49, local38
02088     02 C8 66 F0 | 	shl	local49, #2
0208c     1C 0E 06 F1 | 	add	objptr, #28
02090     07 CB 02 FB | 	rdlong	local50, objptr
02094     1C 0E 86 F1 | 	sub	objptr, #28
02098     64 CB 02 F1 | 	add	local50, local49
0209c                 | '       long[dl_ptr+4*i]:=$0
0209c     65 01 68 FC | 	wrlong	#0, local50
020a0     63 B3 02 F1 | 	add	local38, local48
020a4     5F B3 0A F2 | 	cmp	local38, local44 wz
020a8     D8 FF 9F 5D |  if_ne	jmp	#LR__0053
020ac                 | LR__0054
020ac                 | LR__0055
020ac     10 CC 06 F6 | 	mov	local51, #16
020b0     57 CD 62 F0 | 	shl	local51, local36
020b4                 | '   lpc:=16<<vzoom
020b4                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
020b4     68 0E 06 F1 | 	add	objptr, #104
020b8     07 B3 02 FB | 	rdlong	local38, objptr
020bc     59 CF 02 F6 | 	mov	local52, local38
020c0     18 0E 06 F1 | 	add	objptr, #24
020c4     07 D1 02 FB | 	rdlong	local53, objptr
020c8     68 CF 02 F1 | 	add	local52, local53
020cc     01 CE 86 F1 | 	sub	local52, #1
020d0     18 0E 86 F1 | 	sub	objptr, #24
020d4     07 C5 02 FB | 	rdlong	local47, objptr
020d8     68 0E 86 F1 | 	sub	objptr, #104
020dc     62 CF 5A F2 | 	cmps	local52, local47 wcz
020e0     01 D2 06 16 |  if_a	mov	local54, #1
020e4     01 D2 66 E6 |  if_be	neg	local54, #1
020e8     69 D5 02 F6 | 	mov	local55, local54
020ec     69 CF 02 F1 | 	add	local52, local54
020f0     BC DF 9F FE | 	loc	pa,	#(@LR__0057-@LR__0056)
020f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
020f8                 | LR__0056
020f8     59 09 03 F6 | 	mov	muldiva_, local38
020fc     68 0E 06 F1 | 	add	objptr, #104
02100     07 D7 02 FB | 	rdlong	local56, objptr
02104     68 0E 86 F1 | 	sub	objptr, #104
02108     6B 09 83 F1 | 	sub	muldiva_, local56
0210c     66 0B 03 F6 | 	mov	muldivb_, local51
02110     CC 00 A0 FD | 	call	#unsdivide_
02114     57 09 43 F0 | 	shr	muldiva_, local36
02118                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02118     84 D9 02 F6 | 	mov	local57, muldiva_
0211c     59 09 03 F6 | 	mov	muldiva_, local38
02120     68 0E 06 F1 | 	add	objptr, #104
02124     07 D7 02 FB | 	rdlong	local56, objptr
02128     68 0E 86 F1 | 	sub	objptr, #104
0212c     6B 09 83 F1 | 	sub	muldiva_, local56
02130     66 0B 03 F6 | 	mov	muldivb_, local51
02134     CC 00 A0 FD | 	call	#unsdivide_
02138     85 DB 02 F6 | 	mov	local58, muldivb_
0213c                 | '     charline:=(i-timings[6])+/lpc
0213c     90 0E 06 F1 | 	add	objptr, #144
02140     07 D7 02 FB | 	rdlong	local56, objptr
02144     90 0E 86 F1 | 	sub	objptr, #144
02148     6D D7 02 FD | 	qmul	local56, local58
0214c     18 DC 62 FD | 	getqx	local59
02150     02 DC 66 F0 | 	shl	local59, #2
02154     07 DF 02 FB | 	rdlong	local60, objptr
02158     6E DF 02 F1 | 	add	local60, local59
0215c     2D E1 02 F6 | 	mov	local61, arg01
02160     03 E0 06 F5 | 	and	local61, #3
02164     70 DF 02 F1 | 	add	local60, local61
02168                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02168     0C DE 66 F0 | 	shl	local60, #12
0216c     08 D8 66 F0 | 	shl	local57, #8
02170     6C DF 02 F1 | 	add	local60, local57
02174     02 DA 66 F0 | 	shl	local58, #2
02178     6D DF 02 F1 | 	add	local60, local58
0217c     01 DE 06 F1 | 	add	local60, #1
02180     59 E3 02 F6 | 	mov	local62, local38
02184     02 E2 66 F0 | 	shl	local62, #2
02188     1C 0E 06 F1 | 	add	objptr, #28
0218c     07 E5 02 FB | 	rdlong	local63, objptr
02190     1C 0E 86 F1 | 	sub	objptr, #28
02194     71 E5 02 F1 | 	add	local63, local62
02198                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
02198     72 DF 62 FC | 	wrlong	local60, local63
0219c     6A B3 02 F1 | 	add	local38, local55
021a0     67 B3 0A F2 | 	cmp	local38, local52 wz
021a4     50 FF 9F 5D |  if_ne	jmp	#LR__0056
021a8                 | LR__0057
021a8                 | LR__0058
021a8                 | ' 
021a8                 | ' 
021a8                 | ' 
021a8                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
021a8     01 00 00 FF 
021ac     00 5A 5E F2 | 	cmps	arg01, ##512 wcz
021b0     AC 01 90 CD |  if_b	jmp	#LR__0066
021b4                 | ' 
021b4                 | '   if timings[6]>0 'borders
021b4     68 0E 06 F1 | 	add	objptr, #104
021b8     07 B1 02 FB | 	rdlong	local37, objptr
021bc     68 0E 86 F1 | 	sub	objptr, #104
021c0     00 B0 5E F2 | 	cmps	local37, #0 wcz
021c4     D4 00 90 ED |  if_be	jmp	#LR__0063
021c8                 | '     repeat i from 0 to timings[6]-1 '0 to -1
021c8     00 B2 06 F6 | 	mov	local38, #0
021cc     68 0E 06 F1 | 	add	objptr, #104
021d0     07 E7 02 FB | 	rdlong	local64, objptr
021d4     68 0E 86 F1 | 	sub	objptr, #104
021d8     01 E6 86 F1 | 	sub	local64, #1
021dc     00 E6 5E F2 | 	cmps	local64, #0 wcz
021e0     01 B6 06 16 |  if_a	mov	local40, #1
021e4     01 B6 66 E6 |  if_be	neg	local40, #1
021e8     5B E9 02 F6 | 	mov	local65, local40
021ec     5B E7 02 F1 | 	add	local64, local40
021f0     34 DE 9F FE | 	loc	pa,	#(@LR__0060-@LR__0059)
021f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
021f8                 | LR__0059
021f8     59 EB 02 F6 | 	mov	local66, local38
021fc     02 EA 66 F0 | 	shl	local66, #2
02200     1C 0E 06 F1 | 	add	objptr, #28
02204     07 ED 02 FB | 	rdlong	local67, objptr
02208     1C 0E 86 F1 | 	sub	objptr, #28
0220c     75 ED 02 F1 | 	add	local67, local66
02210                 | '       long[dl_ptr+4*i]:=$0
02210     76 01 68 FC | 	wrlong	#0, local67
02214     74 B3 02 F1 | 	add	local38, local65
02218     73 B3 0A F2 | 	cmp	local38, local64 wz
0221c     D8 FF 9F 5D |  if_ne	jmp	#LR__0059
02220                 | LR__0060
02220                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02220     68 0E 06 F1 | 	add	objptr, #104
02224     07 B3 02 FB | 	rdlong	local38, objptr
02228     18 0E 06 F1 | 	add	objptr, #24
0222c     07 B7 02 FB | 	rdlong	local40, objptr
02230     5B B3 02 F1 | 	add	local38, local40
02234     0C 0E 06 F1 | 	add	objptr, #12
02238     07 EF 02 FB | 	rdlong	local68, objptr
0223c     01 EE 86 F1 | 	sub	local68, #1
02240     24 0E 86 F1 | 	sub	objptr, #36
02244     07 C1 02 FB | 	rdlong	local45, objptr
02248     18 0E 06 F1 | 	add	objptr, #24
0224c     07 C3 02 FB | 	rdlong	local46, objptr
02250     80 0E 86 F1 | 	sub	objptr, #128
02254     61 C1 02 F1 | 	add	local45, local46
02258     60 EF 5A F2 | 	cmps	local68, local45 wcz
0225c     01 C4 06 16 |  if_a	mov	local47, #1
02260     01 C4 66 E6 |  if_be	neg	local47, #1
02264     62 F1 02 F6 | 	mov	local69, local47
02268     62 EF 02 F1 | 	add	local68, local47
0226c     B8 DD 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
02270     93 00 A0 FD | 	call	#FCACHE_LOAD_
02274                 | LR__0061
02274     59 F3 02 F6 | 	mov	local70, local38
02278     02 F2 66 F0 | 	shl	local70, #2
0227c     1C 0E 06 F1 | 	add	objptr, #28
02280     07 F5 02 FB | 	rdlong	local71, objptr
02284     1C 0E 86 F1 | 	sub	objptr, #28
02288     79 F5 02 F1 | 	add	local71, local70
0228c                 | '       long[dl_ptr+4*i]:=$0
0228c     7A 01 68 FC | 	wrlong	#0, local71
02290     78 B3 02 F1 | 	add	local38, local69
02294     77 B3 0A F2 | 	cmp	local38, local68 wz
02298     D8 FF 9F 5D |  if_ne	jmp	#LR__0061
0229c                 | LR__0062
0229c                 | LR__0063
0229c                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
0229c     68 0E 06 F1 | 	add	objptr, #104
022a0     07 B3 02 FB | 	rdlong	local38, objptr
022a4     59 F7 02 F6 | 	mov	local72, local38
022a8     18 0E 06 F1 | 	add	objptr, #24
022ac     07 D1 02 FB | 	rdlong	local53, objptr
022b0     68 F7 02 F1 | 	add	local72, local53
022b4     01 F6 86 F1 | 	sub	local72, #1
022b8     18 0E 86 F1 | 	sub	objptr, #24
022bc     07 C5 02 FB | 	rdlong	local47, objptr
022c0     68 0E 86 F1 | 	sub	objptr, #104
022c4     62 F7 5A F2 | 	cmps	local72, local47 wcz
022c8     01 D2 06 16 |  if_a	mov	local54, #1
022cc     01 D2 66 E6 |  if_be	neg	local54, #1
022d0     69 F9 02 F6 | 	mov	local73, local54
022d4     69 F7 02 F1 | 	add	local72, local54
022d8     A4 DD 9F FE | 	loc	pa,	#(@LR__0065-@LR__0064)
022dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
022e0                 | LR__0064
022e0     59 FB 02 F6 | 	mov	local74, local38
022e4     68 0E 06 F1 | 	add	objptr, #104
022e8     07 D7 02 FB | 	rdlong	local56, objptr
022ec     6B FB 82 F1 | 	sub	local74, local56
022f0     57 FB 42 F0 | 	shr	local74, local36
022f4     28 0E 06 F1 | 	add	objptr, #40
022f8     07 D7 02 FB | 	rdlong	local56, objptr
022fc     90 0E 86 F1 | 	sub	objptr, #144
02300     7D D7 02 FD | 	qmul	local56, local74
02304     18 FC 62 FD | 	getqx	local75
02308     02 FC 66 F0 | 	shl	local75, #2
0230c     07 FF 02 FB | 	rdlong	local76, objptr
02310     7E FF 02 F1 | 	add	local76, local75
02314     2D 01 03 F6 | 	mov	local77, arg01
02318     03 00 07 F5 | 	and	local77, #3
0231c     80 FF 02 F1 | 	add	local76, local77
02320                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
02320     0C FE 66 F0 | 	shl	local76, #12
02324     02 FE 06 F1 | 	add	local76, #2
02328     2D 03 03 F6 | 	mov	local78, arg01
0232c     30 02 07 F5 | 	and	local78, #48
02330     02 02 47 F0 | 	shr	local78, #2
02334     81 FF 02 F1 | 	add	local76, local78
02338     59 05 03 F6 | 	mov	local79, local38
0233c     02 04 67 F0 | 	shl	local79, #2
02340     1C 0E 06 F1 | 	add	objptr, #28
02344     07 07 03 FB | 	rdlong	local80, objptr
02348     1C 0E 86 F1 | 	sub	objptr, #28
0234c     82 07 03 F1 | 	add	local80, local79
02350                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
02350     83 FF 62 FC | 	wrlong	local76, local80
02354     7C B3 02 F1 | 	add	local38, local73
02358     7B B3 0A F2 | 	cmp	local38, local72 wz
0235c     80 FF 9F 5D |  if_ne	jmp	#LR__0064
02360                 | LR__0065
02360                 | LR__0066
02360                 | LR__0067
02360     AF F0 03 F6 | 	mov	ptra, fp
02364     BF 00 A0 FD | 	call	#popregs_
02368                 | _hng030rm_spin2_setmode_ret
02368     2D 00 64 FD | 	ret
0236c                 | 
0236c                 | ' 
0236c                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
0236c                 | _retrocog_spin2_serialcog
0236c     1C 5A 05 F6 | 	mov	COUNT_, #28
02370     B0 00 A0 FD | 	call	#pushregs_
02374                 | ' 
02374                 | ' 'start serial and midi
02374                 | ' 
02374                 | ' serial_start(rxpin, txpin, baudrate)
02374     20 5A 06 F6 | 	mov	arg01, #32
02378     21 5C 06 F6 | 	mov	arg02, #33
0237c     A6 0E 00 FF 
02380     00 5E 06 F6 | 	mov	arg03, ##1920000
02384     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
02388                 | ' serial_start(midiin,midiout,mbaudrate)
02388     1D 5A 06 F6 | 	mov	arg01, #29
0238c     1E 5C 06 F6 | 	mov	arg02, #30
02390     3D 00 00 FF 
02394     12 5E 06 F6 | 	mov	arg03, ##31250
02398     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0239c                 | ' serial_start(srxpin,stxpin,sbaudrate)
0239c     42 0F 00 FF 
023a0     80 68 06 F6 | 	mov	local01, ##2000000
023a4     3F 5A 06 F6 | 	mov	arg01, #63
023a8     3E 5C 06 F6 | 	mov	arg02, #62
023ac     42 0F 00 FF 
023b0     80 5E 06 F6 | 	mov	arg03, ##2000000
023b4     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
023b8                 | ' 
023b8                 | ' mb:=(-1)
023b8     01 6A 66 F6 | 	neg	local02, #1
023bc                 | ' b:=(-1)
023bc     01 6C 66 F6 | 	neg	local03, #1
023c0                 | ' 
023c0                 | ' mousefront:=0
023c0     00 6E 06 F6 | 	mov	local04, #0
023c4     08 0E 06 F1 | 	add	objptr, #8
023c8     07 01 68 FC | 	wrlong	#0, objptr
023cc                 | ' mousetail:=0
023cc     04 0E 06 F1 | 	add	objptr, #4
023d0     07 01 68 FC | 	wrlong	#0, objptr
023d4     0C 0E 86 F1 | 	sub	objptr, #12
023d8                 | ' kbdfront:=0
023d8     07 01 68 FC | 	wrlong	#0, objptr
023dc                 | ' kbdtail:=0
023dc     04 0E 06 F1 | 	add	objptr, #4
023e0     07 01 68 FC | 	wrlong	#0, objptr
023e4                 | ' midifront:=0
023e4     0C 0E 06 F1 | 	add	objptr, #12
023e8     07 01 68 FC | 	wrlong	#0, objptr
023ec                 | ' miditail:=0
023ec     04 0E 06 F1 | 	add	objptr, #4
023f0     07 01 68 FC | 	wrlong	#0, objptr
023f4                 | ' serialfront:=0
023f4     04 0E 06 F1 | 	add	objptr, #4
023f8     07 01 68 FC | 	wrlong	#0, objptr
023fc                 | ' serialtail:=0
023fc     04 0E 06 F1 | 	add	objptr, #4
02400     07 01 68 FC | 	wrlong	#0, objptr
02404                 | ' long[$30]:=0
02404     30 00 6C FC | 	wrlong	#0, #48
02408                 | ' long[$34]:=0
02408     34 00 6C FC | 	wrlong	#0, #52
0240c                 | ' long[$38]:=0
0240c     38 00 6C FC | 	wrlong	#0, #56
02410     1C 0E 86 F1 | 	sub	objptr, #28
02414                 | ' long[$3C]:=0
02414     3C 00 6C FC | 	wrlong	#0, #60
02418                 | ' 
02418                 | ' repeat
02418                 | LR__0068
02418                 | ' 
02418                 | ' '  repeat 
02418                 | '   rr:=rxcheck(rxpin)
02418     20 5A 06 F6 | 	mov	arg01, #32
0241c     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
02420     14 71 02 F6 | 	mov	local05, result1
02424                 | '   mrr:=rxcheck(midiin)
02424     1D 5A 06 F6 | 	mov	arg01, #29
02428     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
0242c     14 73 02 F6 | 	mov	local06, result1
02430                 | '   srr:=rxcheck(srxpin)
02430     3F 6E 06 F6 | 	mov	local04, #63
02434     3F 5A 06 F6 | 	mov	arg01, #63
02438     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
0243c     14 75 02 F6 | 	mov	local07, result1
02440     3A 77 02 F6 | 	mov	local08, local07
02444                 | ' 
02444                 | ' '  until rr>=0 || mrr>=0  || srr>=0
02444                 | ' 
02444                 | '   
02444                 | ' ' midi. Must be >= $80 for a command
02444                 | ' '$80-$8F - 3 bytes note off. note, velocity
02444                 | ' '$90-$9F - 3 bytes note on, note, velocity
02444                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
02444                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
02444                 | ' '$C0-$CF - 2 bytes program change
02444                 | ' '$D0-$DF - 2 bytes mono aftertouch
02444                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
02444                 | ' '$F0-$FF - 1 byte
02444                 | '   
02444                 | '   if srr>=0
02444     00 76 5E F2 | 	cmps	local08, #0 wcz
02448     7C 00 90 CD |  if_b	jmp	#LR__0070
0244c                 | '   
0244c                 | '     if serialfront<>((serialtail-1) //32)
0244c     1C 0E 06 F1 | 	add	objptr, #28
02450     07 75 02 FB | 	rdlong	local07, objptr
02454     3A 6F 02 F6 | 	mov	local04, local07
02458     01 6E 86 F1 | 	sub	local04, #1
0245c     37 69 52 F6 | 	abs	local01, local04 wc
02460     1F 68 06 F5 | 	and	local01, #31
02464     34 69 62 C6 |  if_b	neg	local01, local01
02468     04 0E 86 F1 | 	sub	objptr, #4
0246c     07 79 02 FB | 	rdlong	local09, objptr
02470     18 0E 86 F1 | 	sub	objptr, #24
02474     3C 7B 02 F6 | 	mov	local10, local09
02478     34 7B 0A F2 | 	cmp	local10, local01 wz
0247c     48 00 90 AD |  if_e	jmp	#LR__0069
02480     18 0E 06 F1 | 	add	objptr, #24
02484     07 7B 02 FB | 	rdlong	local10, objptr
02488     01 00 00 FF 
0248c     08 0F 06 F1 | 	add	objptr, ##776
02490     07 7B 02 F1 | 	add	local10, objptr
02494     3D 7D 02 F6 | 	mov	local11, local10
02498                 | '       serialbuf[serialfront]:=srr
02498     3E 77 42 FC | 	wrbyte	local08, local11
0249c                 | '       serialfront+=1
0249c     01 00 00 FF 
024a0     08 0F 86 F1 | 	sub	objptr, ##776
024a4     07 69 02 FB | 	rdlong	local01, objptr
024a8     01 68 06 F1 | 	add	local01, #1
024ac     07 69 62 FC | 	wrlong	local01, objptr
024b0                 | '       serialfront:=serialfront // 32
024b0     34 75 02 F6 | 	mov	local07, local01
024b4     3A 6F 52 F6 | 	abs	local04, local07 wc
024b8     1F 6E 06 F5 | 	and	local04, #31
024bc     37 6F 62 C6 |  if_b	neg	local04, local04
024c0     07 6F 62 FC | 	wrlong	local04, objptr
024c4     18 0E 86 F1 | 	sub	objptr, #24
024c8                 | LR__0069
024c8                 | LR__0070
024c8                 | '     
024c8                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
024c8     80 72 5E F2 | 	cmps	local06, #128 wcz
024cc     08 00 90 CD |  if_b	jmp	#LR__0071
024d0     BF 72 5E F2 | 	cmps	local06, #191 wcz
024d4     10 00 90 ED |  if_be	jmp	#LR__0072
024d8                 | LR__0071
024d8     E0 72 5E F2 | 	cmps	local06, #224 wcz
024dc     1C 00 90 CD |  if_b	jmp	#LR__0073
024e0     EF 72 5E F2 | 	cmps	local06, #239 wcz
024e4     14 00 90 1D |  if_a	jmp	#LR__0073
024e8                 | LR__0072
024e8                 | '     mb:=2
024e8     02 6A 06 F6 | 	mov	local02, #2
024ec     39 6F 02 F6 | 	mov	local04, local06
024f0     18 6E 66 F0 | 	shl	local04, #24
024f4     37 7F 02 F6 | 	mov	local12, local04
024f8                 | '     midireport:=mrr<<24
024f8     3F 81 02 F6 | 	mov	local13, local12
024fc                 | LR__0073
024fc                 | ' 
024fc                 | '   if (mrr>=$C0) && (mrr<=$DF)
024fc     C0 72 5E F2 | 	cmps	local06, #192 wcz
02500     1C 00 90 CD |  if_b	jmp	#LR__0074
02504     DF 72 5E F2 | 	cmps	local06, #223 wcz
02508     14 00 90 1D |  if_a	jmp	#LR__0074
0250c                 | '     mb:=1
0250c     01 6A 06 F6 | 	mov	local02, #1
02510     39 6F 02 F6 | 	mov	local04, local06
02514     18 6E 66 F0 | 	shl	local04, #24
02518     37 83 02 F6 | 	mov	local14, local04
0251c                 | '     midireport:=mrr<<24
0251c     41 81 02 F6 | 	mov	local13, local14
02520                 | LR__0074
02520                 | '   
02520                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
02520     F0 72 5E F2 | 	cmps	local06, #240 wcz
02524     10 00 90 CD |  if_b	jmp	#LR__0075
02528                 | '     mb:=4
02528     04 6A 06 F6 | 	mov	local02, #4
0252c     39 85 02 F6 | 	mov	local15, local06
02530     18 84 66 F0 | 	shl	local15, #24
02534                 | '     midireport:=mrr<<24  
02534     42 81 02 F6 | 	mov	local13, local15
02538                 | LR__0075
02538                 | '   
02538                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
02538     80 72 5E F2 | 	cmps	local06, #128 wcz
0253c     44 00 90 3D |  if_ae	jmp	#LR__0077
02540     00 6A 5E F2 | 	cmps	local02, #0 wcz
02544     3C 00 90 ED |  if_be	jmp	#LR__0077
02548     00 72 5E F2 | 	cmps	local06, #0 wcz
0254c     34 00 90 CD |  if_b	jmp	#LR__0077
02550                 | '     
02550                 | '     mb--
02550     35 6F 02 F6 | 	mov	local04, local02
02554     35 75 02 F6 | 	mov	local07, local02
02558     01 74 86 F1 | 	sub	local07, #1
0255c     3A 6B 02 F6 | 	mov	local02, local07
02560                 | '     if mb<3
02560     03 6A 5E F2 | 	cmps	local02, #3 wcz
02564     1C 00 90 3D |  if_ae	jmp	#LR__0076
02568     35 87 02 F6 | 	mov	local16, local02
0256c     03 86 66 F0 | 	shl	local16, #3
02570     39 89 02 F6 | 	mov	local17, local06
02574     43 89 62 F0 | 	shl	local17, local16
02578                 | '       midireport+=mrr<<(mb<<3)
02578     40 6F 02 F6 | 	mov	local04, local13
0257c     44 6F 02 F1 | 	add	local04, local17
02580     37 81 02 F6 | 	mov	local13, local04
02584                 | LR__0076
02584                 | LR__0077
02584                 | '   
02584                 | '   if mb==0
02584     00 6A 0E F2 | 	cmp	local02, #0 wz
02588     84 00 90 5D |  if_ne	jmp	#LR__0079
0258c                 | '     
0258c                 | '     if midifront<>((miditail-1) //32)
0258c     14 0E 06 F1 | 	add	objptr, #20
02590     07 75 02 FB | 	rdlong	local07, objptr
02594     3A 6F 02 F6 | 	mov	local04, local07
02598     01 6E 86 F1 | 	sub	local04, #1
0259c     37 69 52 F6 | 	abs	local01, local04 wc
025a0     1F 68 06 F5 | 	and	local01, #31
025a4     34 69 62 C6 |  if_b	neg	local01, local01
025a8     04 0E 86 F1 | 	sub	objptr, #4
025ac     07 79 02 FB | 	rdlong	local09, objptr
025b0     10 0E 86 F1 | 	sub	objptr, #16
025b4     3C 7B 02 F6 | 	mov	local10, local09
025b8     34 7B 0A F2 | 	cmp	local10, local01 wz
025bc     4C 00 90 AD |  if_e	jmp	#LR__0078
025c0     10 0E 06 F1 | 	add	objptr, #16
025c4     07 7B 02 FB | 	rdlong	local10, objptr
025c8     02 7A 66 F0 | 	shl	local10, #2
025cc     01 00 00 FF 
025d0     90 0E 06 F1 | 	add	objptr, ##656
025d4     07 7B 02 F1 | 	add	local10, objptr
025d8     3D 8B 02 F6 | 	mov	local18, local10
025dc                 | '       midibuf[midifront]:=midireport
025dc     45 81 62 FC | 	wrlong	local13, local18
025e0                 | '       midifront+=1
025e0     01 00 00 FF 
025e4     90 0E 86 F1 | 	sub	objptr, ##656
025e8     07 69 02 FB | 	rdlong	local01, objptr
025ec     01 68 06 F1 | 	add	local01, #1
025f0     07 69 62 FC | 	wrlong	local01, objptr
025f4                 | '       midifront:=midifront // 32
025f4     34 75 02 F6 | 	mov	local07, local01
025f8     3A 6F 52 F6 | 	abs	local04, local07 wc
025fc     1F 6E 06 F5 | 	and	local04, #31
02600     37 6F 62 C6 |  if_b	neg	local04, local04
02604     07 6F 62 FC | 	wrlong	local04, objptr
02608     10 0E 86 F1 | 	sub	objptr, #16
0260c                 | LR__0078
0260c                 | '     mb:=(-1)
0260c     01 6A 66 F6 | 	neg	local02, #1
02610                 | LR__0079
02610                 | ' 
02610                 | ' 'Keyboard and mouse
02610                 | ' 
02610                 | '   if (rr>=$80) && (rr<>$FF)
02610     80 70 5E F2 | 	cmps	local05, #128 wcz
02614     1C 00 90 CD |  if_b	jmp	#LR__0080
02618     FF 70 0E F2 | 	cmp	local05, #255 wz
0261c     14 00 90 AD |  if_e	jmp	#LR__0080
02620                 | '     b:=3
02620     03 6C 06 F6 | 	mov	local03, #3
02624     38 6F 02 F6 | 	mov	local04, local05
02628     18 6E 66 F0 | 	shl	local04, #24
0262c     37 8D 02 F6 | 	mov	local19, local04
02630                 | '     kbmreport:=rr<<24
02630     46 8F 02 F6 | 	mov	local20, local19
02634                 | LR__0080
02634                 | '   
02634                 | '   if (rr<$80) && (b>0) && (rr>=0)
02634     80 70 5E F2 | 	cmps	local05, #128 wcz
02638     38 00 90 3D |  if_ae	jmp	#LR__0081
0263c     00 6C 5E F2 | 	cmps	local03, #0 wcz
02640     30 00 90 ED |  if_be	jmp	#LR__0081
02644     00 70 5E F2 | 	cmps	local05, #0 wcz
02648     28 00 90 CD |  if_b	jmp	#LR__0081
0264c                 | '     b--
0264c     36 75 02 F6 | 	mov	local07, local03
02650     01 74 86 F1 | 	sub	local07, #1
02654     3A 6D 02 F6 | 	mov	local03, local07
02658     36 91 02 F6 | 	mov	local21, local03
0265c     03 90 66 F0 | 	shl	local21, #3
02660     38 93 02 F6 | 	mov	local22, local05
02664     48 93 62 F0 | 	shl	local22, local21
02668                 | '     kbmreport+=rr<<(b<<3)  
02668     47 6F 02 F6 | 	mov	local04, local20
0266c     49 6F 02 F1 | 	add	local04, local22
02670     37 8F 02 F6 | 	mov	local20, local04
02674                 | LR__0081
02674                 | '   
02674                 | '   if (rr==$FF)
02674     FF 70 0E F2 | 	cmp	local05, #255 wz
02678                 | '     b:=0   
02678     00 6C 06 A6 |  if_e	mov	local03, #0
0267c                 | ' 
0267c                 | '   if b==0  
0267c     00 6C 0E F2 | 	cmp	local03, #0 wz
02680     14 01 90 5D |  if_ne	jmp	#LR__0086
02684                 | '  
02684                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
02684     00 00 40 FF 
02688     00 8E 1E F2 | 	cmp	local20, ##-2147483648 wcz
0268c     84 00 90 CD |  if_b	jmp	#LR__0083
02690     00 80 43 FF 
02694     00 8E 1E F2 | 	cmp	local20, ##-2030043136 wcz
02698     78 00 90 3D |  if_ae	jmp	#LR__0083
0269c                 | '       if mousefront<>((mousetail-1) //128)
0269c     0C 0E 06 F1 | 	add	objptr, #12
026a0     07 75 02 FB | 	rdlong	local07, objptr
026a4     3A 6F 02 F6 | 	mov	local04, local07
026a8     01 6E 86 F1 | 	sub	local04, #1
026ac     37 69 52 F6 | 	abs	local01, local04 wc
026b0     7F 68 06 F5 | 	and	local01, #127
026b4     34 69 62 C6 |  if_b	neg	local01, local01
026b8     04 0E 86 F1 | 	sub	objptr, #4
026bc     07 79 02 FB | 	rdlong	local09, objptr
026c0     08 0E 86 F1 | 	sub	objptr, #8
026c4     3C 7B 02 F6 | 	mov	local10, local09
026c8     34 7B 0A F2 | 	cmp	local10, local01 wz
026cc     44 00 90 AD |  if_e	jmp	#LR__0082
026d0     08 0E 06 F1 | 	add	objptr, #8
026d4     07 7B 02 FB | 	rdlong	local10, objptr
026d8     02 7A 66 F0 | 	shl	local10, #2
026dc     98 0E 06 F1 | 	add	objptr, #152
026e0     07 7B 02 F1 | 	add	local10, objptr
026e4     3D 95 02 F6 | 	mov	local23, local10
026e8                 | '         mousebuf[mousefront]:=kbmreport
026e8     4A 8F 62 FC | 	wrlong	local20, local23
026ec                 | '         mousefront+=1
026ec     98 0E 86 F1 | 	sub	objptr, #152
026f0     07 69 02 FB | 	rdlong	local01, objptr
026f4     01 68 06 F1 | 	add	local01, #1
026f8     07 69 62 FC | 	wrlong	local01, objptr
026fc                 | '         mousefront:=mousefront // 128
026fc     34 75 02 F6 | 	mov	local07, local01
02700     3A 6F 52 F6 | 	abs	local04, local07 wc
02704     7F 6E 06 F5 | 	and	local04, #127
02708     37 6F 62 C6 |  if_b	neg	local04, local04
0270c     07 6F 62 FC | 	wrlong	local04, objptr
02710     08 0E 86 F1 | 	sub	objptr, #8
02714                 | LR__0082
02714                 | LR__0083
02714                 | '     b:=(-1)
02714     01 6C 66 F6 | 	neg	local03, #1
02718                 | ' 
02718                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
02718     00 80 43 FF 
0271c     00 8E 1E F2 | 	cmp	local20, ##-2030043136 wcz
02720     70 00 90 CD |  if_b	jmp	#LR__0085
02724     00 00 45 FF 
02728     00 8E 1E F2 | 	cmp	local20, ##-1979711488 wcz
0272c     64 00 90 3D |  if_ae	jmp	#LR__0085
02730                 | '       if kbdfront<>((kbdtail-1) //32)
02730     04 0E 06 F1 | 	add	objptr, #4
02734     07 75 02 FB | 	rdlong	local07, objptr
02738     04 0E 86 F1 | 	sub	objptr, #4
0273c     3A 6F 02 F6 | 	mov	local04, local07
02740     01 6E 86 F1 | 	sub	local04, #1
02744     37 69 52 F6 | 	abs	local01, local04 wc
02748     1F 68 06 F5 | 	and	local01, #31
0274c     34 69 62 C6 |  if_b	neg	local01, local01
02750     07 7B 02 FB | 	rdlong	local10, objptr
02754     34 7B 0A F2 | 	cmp	local10, local01 wz
02758     38 00 90 AD |  if_e	jmp	#LR__0084
0275c     07 69 02 FB | 	rdlong	local01, objptr
02760     02 68 66 F0 | 	shl	local01, #2
02764     20 0E 06 F1 | 	add	objptr, #32
02768     07 69 02 F1 | 	add	local01, objptr
0276c     34 97 02 F6 | 	mov	local24, local01
02770                 | '         kbdbuf[kbdfront]:=kbmreport
02770     4B 8F 62 FC | 	wrlong	local20, local24
02774                 | '         kbdfront+=1
02774     20 0E 86 F1 | 	sub	objptr, #32
02778     07 75 02 FB | 	rdlong	local07, objptr
0277c     01 74 06 F1 | 	add	local07, #1
02780     07 75 62 FC | 	wrlong	local07, objptr
02784                 | '         kbdfront:=kbdfront // 32
02784     3A 6F 52 F6 | 	abs	local04, local07 wc
02788     1F 6E 06 F5 | 	and	local04, #31
0278c     37 6F 62 C6 |  if_b	neg	local04, local04
02790     07 6F 62 FC | 	wrlong	local04, objptr
02794                 | LR__0084
02794                 | LR__0085
02794                 | '     b:=(-1)
02794     01 6C 66 F6 | 	neg	local03, #1
02798                 | LR__0086
02798                 | ' 
02798                 | ' 
02798                 | '   if long[$30]==0
02798     30 6E 0E FB | 	rdlong	local04, #48 wz
0279c     5C 00 90 5D |  if_ne	jmp	#LR__0088
027a0                 | '     if kbdfront<>kbdtail
027a0     07 6F 02 FB | 	rdlong	local04, objptr
027a4     04 0E 06 F1 | 	add	objptr, #4
027a8     07 69 02 FB | 	rdlong	local01, objptr
027ac     04 0E 86 F1 | 	sub	objptr, #4
027b0     34 6F 0A F2 | 	cmp	local04, local01 wz
027b4     44 00 90 AD |  if_e	jmp	#LR__0087
027b8     04 0E 06 F1 | 	add	objptr, #4
027bc     07 99 02 FB | 	rdlong	local25, objptr
027c0     02 98 66 F0 | 	shl	local25, #2
027c4     1C 0E 06 F1 | 	add	objptr, #28
027c8     07 99 02 F1 | 	add	local25, objptr
027cc                 | '       long[$30]:=kbdbuf[kbdtail]
027cc     4C 6F 02 FB | 	rdlong	local04, local25
027d0     30 6E 66 FC | 	wrlong	local04, #48
027d4                 | '       kbdtail++
027d4     1C 0E 86 F1 | 	sub	objptr, #28
027d8     07 7B 02 FB | 	rdlong	local10, objptr
027dc     3D 69 02 F6 | 	mov	local01, local10
027e0     01 68 06 F1 | 	add	local01, #1
027e4     07 69 62 FC | 	wrlong	local01, objptr
027e8                 | '       kbdtail:= kbdtail // 32
027e8     34 6F 52 F6 | 	abs	local04, local01 wc
027ec     1F 6E 06 F5 | 	and	local04, #31
027f0     37 6F 62 C6 |  if_b	neg	local04, local04
027f4     07 6F 62 FC | 	wrlong	local04, objptr
027f8     04 0E 86 F1 | 	sub	objptr, #4
027fc                 | LR__0087
027fc                 | LR__0088
027fc                 | '       
027fc                 | '   if long[$34]==0
027fc     34 6E 0E FB | 	rdlong	local04, #52 wz
02800     64 00 90 5D |  if_ne	jmp	#LR__0090
02804                 | '     if mousefront<>mousetail
02804     08 0E 06 F1 | 	add	objptr, #8
02808     07 6F 02 FB | 	rdlong	local04, objptr
0280c     04 0E 06 F1 | 	add	objptr, #4
02810     07 7B 02 FB | 	rdlong	local10, objptr
02814     0C 0E 86 F1 | 	sub	objptr, #12
02818     3D 69 02 F6 | 	mov	local01, local10
0281c     34 6F 0A F2 | 	cmp	local04, local01 wz
02820     44 00 90 AD |  if_e	jmp	#LR__0089
02824     0C 0E 06 F1 | 	add	objptr, #12
02828     07 9B 02 FB | 	rdlong	local26, objptr
0282c     02 9A 66 F0 | 	shl	local26, #2
02830     94 0E 06 F1 | 	add	objptr, #148
02834     07 9B 02 F1 | 	add	local26, objptr
02838                 | '       long[$34]:=mousebuf[mousetail]
02838     4D 6F 02 FB | 	rdlong	local04, local26
0283c     34 6E 66 FC | 	wrlong	local04, #52
02840                 | '       mousetail++
02840     94 0E 86 F1 | 	sub	objptr, #148
02844     07 7B 02 FB | 	rdlong	local10, objptr
02848     3D 69 02 F6 | 	mov	local01, local10
0284c     01 68 06 F1 | 	add	local01, #1
02850     07 69 62 FC | 	wrlong	local01, objptr
02854                 | '       mousetail:= mousetail // 128
02854     34 6F 52 F6 | 	abs	local04, local01 wc
02858     7F 6E 06 F5 | 	and	local04, #127
0285c     37 6F 62 C6 |  if_b	neg	local04, local04
02860     07 6F 62 FC | 	wrlong	local04, objptr
02864     0C 0E 86 F1 | 	sub	objptr, #12
02868                 | LR__0089
02868                 | LR__0090
02868                 | ' 
02868                 | '       
02868                 | '   if long[$38]==0
02868     38 6E 0E FB | 	rdlong	local04, #56 wz
0286c     6C 00 90 5D |  if_ne	jmp	#LR__0092
02870                 | '     if midifront<>miditail
02870     10 0E 06 F1 | 	add	objptr, #16
02874     07 6F 02 FB | 	rdlong	local04, objptr
02878     04 0E 06 F1 | 	add	objptr, #4
0287c     07 7B 02 FB | 	rdlong	local10, objptr
02880     14 0E 86 F1 | 	sub	objptr, #20
02884     3D 69 02 F6 | 	mov	local01, local10
02888     34 6F 0A F2 | 	cmp	local04, local01 wz
0288c     4C 00 90 AD |  if_e	jmp	#LR__0091
02890     14 0E 06 F1 | 	add	objptr, #20
02894     07 9D 02 FB | 	rdlong	local27, objptr
02898     02 9C 66 F0 | 	shl	local27, #2
0289c     01 00 00 FF 
028a0     8C 0E 06 F1 | 	add	objptr, ##652
028a4     07 9D 02 F1 | 	add	local27, objptr
028a8                 | '       long[$38]:=midibuf[miditail]
028a8     4E 6F 02 FB | 	rdlong	local04, local27
028ac     38 6E 66 FC | 	wrlong	local04, #56
028b0                 | '       miditail++
028b0     01 00 00 FF 
028b4     8C 0E 86 F1 | 	sub	objptr, ##652
028b8     07 7B 02 FB | 	rdlong	local10, objptr
028bc     3D 69 02 F6 | 	mov	local01, local10
028c0     01 68 06 F1 | 	add	local01, #1
028c4     07 69 62 FC | 	wrlong	local01, objptr
028c8                 | '       miditail:= miditail // 32
028c8     34 6F 52 F6 | 	abs	local04, local01 wc
028cc     1F 6E 06 F5 | 	and	local04, #31
028d0     37 6F 62 C6 |  if_b	neg	local04, local04
028d4     07 6F 62 FC | 	wrlong	local04, objptr
028d8     14 0E 86 F1 | 	sub	objptr, #20
028dc                 | LR__0091
028dc                 | LR__0092
028dc                 | '       
028dc                 | '   if long[$3c]==0
028dc     3C 6E 0E FB | 	rdlong	local04, #60 wz
028e0     34 FB 9F 5D |  if_ne	jmp	#LR__0068
028e4                 | '     if serialfront<>serialtail
028e4     18 0E 06 F1 | 	add	objptr, #24
028e8     07 6F 02 FB | 	rdlong	local04, objptr
028ec     04 0E 06 F1 | 	add	objptr, #4
028f0     07 7B 02 FB | 	rdlong	local10, objptr
028f4     1C 0E 86 F1 | 	sub	objptr, #28
028f8     3D 69 02 F6 | 	mov	local01, local10
028fc     34 6F 0A F2 | 	cmp	local04, local01 wz
02900     14 FB 9F AD |  if_e	jmp	#LR__0068
02904                 | '       byte[$3c]:=255
02904     3C FE 4D FC | 	wrbyte	#255, #60
02908     1C 0E 06 F1 | 	add	objptr, #28
0290c     07 9F 02 FB | 	rdlong	local28, objptr
02910     01 00 00 FF 
02914     04 0F 06 F1 | 	add	objptr, ##772
02918     07 9F 02 F1 | 	add	local28, objptr
0291c                 | '       byte[$3D]:=serialbuf[serialtail]
0291c     4F 6F C2 FA | 	rdbyte	local04, local28
02920     3D 6E 46 FC | 	wrbyte	local04, #61
02924                 | '       serialtail++
02924     01 00 00 FF 
02928     04 0F 86 F1 | 	sub	objptr, ##772
0292c     07 7B 02 FB | 	rdlong	local10, objptr
02930     3D 69 02 F6 | 	mov	local01, local10
02934     01 68 06 F1 | 	add	local01, #1
02938     07 69 62 FC | 	wrlong	local01, objptr
0293c                 | '       serialtail:= serialtail // 32
0293c     34 6F 52 F6 | 	abs	local04, local01 wc
02940     1F 6E 06 F5 | 	and	local04, #31
02944     37 6F 62 C6 |  if_b	neg	local04, local04
02948     07 6F 62 FC | 	wrlong	local04, objptr
0294c     1C 0E 86 F1 | 	sub	objptr, #28
02950     C4 FA 9F FD | 	jmp	#LR__0068
02954     AF F0 03 F6 | 	mov	ptra, fp
02958     BF 00 A0 FD | 	call	#popregs_
0295c                 | _retrocog_spin2_serialcog_ret
0295c     2D 00 64 FD | 	ret
02960                 | 
02960                 | '       
02960                 | ' 
02960                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
02960                 | ' 
02960                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
02960                 | _retrocog_spin2_serial_start
02960     04 5A 05 F6 | 	mov	COUNT_, #4
02964     B0 00 A0 FD | 	call	#pushregs_
02968     2D 69 02 F6 | 	mov	local01, arg01
0296c     2E 6B 02 F6 | 	mov	local02, arg02
02970                 | ' 
02970                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
02970     14 5A 06 FB | 	rdlong	arg01, #20
02974     10 5C C6 F9 | 	decod	arg02, #16
02978     2E 5B 02 FD | 	qmul	arg01, arg02
0297c     19 6C 62 FD | 	getqy	local03
02980     18 6E 62 FD | 	getqx	local04
02984     28 6C 62 FD | 	setq	local03
02988     2F 6F 12 FD | 	qdiv	local04, arg03
0298c     18 28 62 FD | 	getqx	result1
02990     14 5F 02 F6 | 	mov	arg03, result1
02994     FE FF 7F FF 
02998     00 5E 06 F5 | 	and	arg03, ##-1024
0299c                 | ' bitmode |= 7                                                  ' set bits (8)
0299c     07 5E 46 F5 | 	or	arg03, #7
029a0                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
029a0     40 68 62 FD | 	dirl	local01
029a4     08 00 80 FF 
029a8     34 7D 08 FC | 	wrpin	##4158, local01
029ac     34 5F 12 FC | 	wxpin	arg03, local01
029b0     34 01 28 FC | 	wypin	#0, local01
029b4     41 68 62 FD | 	dirh	local01
029b8                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
029b8     40 6A 62 FD | 	dirl	local02
029bc     35 F9 08 FC | 	wrpin	#124, local02
029c0     35 5F 12 FC | 	wxpin	arg03, local02
029c4     35 01 28 FC | 	wypin	#0, local02
029c8     41 6A 62 FD | 	dirh	local02
029cc                 | ' pinhigh(rxpin)
029cc     59 68 62 FD | 	drvh	local01
029d0     AF F0 03 F6 | 	mov	ptra, fp
029d4     BF 00 A0 FD | 	call	#popregs_
029d8                 | _retrocog_spin2_serial_start_ret
029d8     2D 00 64 FD | 	ret
029dc                 | 
029dc                 | ' 
029dc                 | ' pub rxcheck(pin) : rxbyte | check
029dc                 | _retrocog_spin2_rxcheck
029dc     03 5A 05 F6 | 	mov	COUNT_, #3
029e0     B0 00 A0 FD | 	call	#pushregs_
029e4     2D 69 02 F6 | 	mov	local01, arg01
029e8                 | ' 
029e8                 | ' '' Check for serial input
029e8                 | ' '' -- returns -1 if nothing available
029e8                 | ' 
029e8                 | '   rxbyte := -1
029e8     01 6A 66 F6 | 	neg	local02, #1
029ec                 | '   check := pinr(pin)
029ec     34 5B 02 F6 | 	mov	arg01, local01
029f0     2C 26 B0 FD | 	call	#__system___pinread
029f4     14 6D 0A F6 | 	mov	local03, result1 wz
029f8                 | '   if (check)
029f8                 | '     rxbyte := rdpin(pin) >> 24
029f8     00 6A 06 56 |  if_ne	mov	local02, #0
029fc     34 6B 8A 5A |  if_ne	rdpin	local02, local01
02a00     18 6A 46 50 |  if_ne	shr	local02, #24
02a04     35 29 02 F6 | 	mov	result1, local02
02a08     AF F0 03 F6 | 	mov	ptra, fp
02a0c     BF 00 A0 FD | 	call	#popregs_
02a10                 | _retrocog_spin2_rxcheck_ret
02a10     2D 00 64 FD | 	ret
02a14                 | 
02a14                 | ' 
02a14                 | ' ' "Loads" (initialize) a module in hub memory
02a14                 | ' '
02a14                 | '     ' @hubPtr - A pointer to hub memory where the tracker module is located
02a14                 | ' '
02a14                 | ' PUB initModule(hubPtr, startPattern) | i, tmpPtr, samLength, d1, d2, d3, d4, d5
02a14                 | _trackerplayer_spin2_initModule
02a14     3E 5A 05 F6 | 	mov	COUNT_, #62
02a18     B0 00 A0 FD | 	call	#pushregs_
02a1c     24 F1 07 F1 | 	add	ptra, #292
02a20     AF 5A 62 FC | 	wrlong	arg01, fp
02a24     04 5E 05 F1 | 	add	fp, #4
02a28     AF 5C 62 FC | 	wrlong	arg02, fp
02a2c     04 5E 85 F1 | 	sub	fp, #4
02a30     AF 68 02 FB | 	rdlong	local01, fp
02a34     02 00 00 FF 
02a38     38 68 06 F1 | 	add	local01, ##1080
02a3c                 | ' 
02a3c                 | '   ' Set some data pointers
02a3c                 | '   magicFour      := hubPtr + 1080
02a3c     9D 0E 06 F1 | 	add	objptr, #157
02a40     07 69 62 FC | 	wrlong	local01, objptr
02a44                 | '   nameStr        := hubPtr
02a44     AF 6A 02 FB | 	rdlong	local02, fp
02a48     97 0E 86 F1 | 	sub	objptr, #151
02a4c     07 6B 62 FC | 	wrlong	local02, objptr
02a50     AF 6C 02 FB | 	rdlong	local03, fp
02a54     14 6C 06 F1 | 	add	local03, #20
02a58                 | '   samplesInfoLut := hubPtr + 20
02a58     04 0E 06 F1 | 	add	objptr, #4
02a5c     07 6D 62 FC | 	wrlong	local03, objptr
02a60                 | ' 
02a60                 | '   ' Is this a 31 sample module?
02a60                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
02a60     93 0E 06 F1 | 	add	objptr, #147
02a64     07 6B 02 FB | 	rdlong	local02, objptr
02a68     9D 0E 86 F1 | 	sub	objptr, #157
02a6c     35 6F C2 FA | 	rdbyte	local04, local02
02a70     4D 6E 0E F2 | 	cmp	local04, #77 wz
02a74     48 01 90 5D |  if_ne	jmp	#LR__0096
02a78     9D 0E 06 F1 | 	add	objptr, #157
02a7c     07 71 02 FB | 	rdlong	local05, objptr
02a80     9D 0E 86 F1 | 	sub	objptr, #157
02a84     02 70 06 F1 | 	add	local05, #2
02a88     38 73 C2 FA | 	rdbyte	local06, local05
02a8c     4B 72 0E F2 | 	cmp	local06, #75 wz
02a90     2C 01 90 5D |  if_ne	jmp	#LR__0096
02a94     AF 74 02 FB | 	rdlong	local07, fp
02a98     01 00 00 FF 
02a9c     B6 75 06 F1 | 	add	local07, ##950
02aa0                 | '     songLength          := byte[hubPtr + 950]
02aa0     3A 6B C2 FA | 	rdbyte	local02, local07
02aa4     9A 0E 06 F1 | 	add	objptr, #154
02aa8     07 6B 42 FC | 	wrbyte	local02, objptr
02aac     AF 76 02 FB | 	rdlong	local08, fp
02ab0     01 00 00 FF 
02ab4     B7 77 06 F1 | 	add	local08, ##951
02ab8                 | '     unknown1            := byte[hubPtr + 951]
02ab8     3B 6B C2 FA | 	rdbyte	local02, local08
02abc     02 0E 06 F1 | 	add	objptr, #2
02ac0     07 6B 42 FC | 	wrbyte	local02, objptr
02ac4     AF 78 02 FB | 	rdlong	local09, fp
02ac8     01 00 00 FF 
02acc     B8 79 06 F1 | 	add	local09, ##952
02ad0                 | '     songPositionsLut    :=      hubPtr + 952
02ad0     06 0E 86 F1 | 	sub	objptr, #6
02ad4     07 79 62 FC | 	wrlong	local09, objptr
02ad8     AF 7A 02 FB | 	rdlong	local10, fp
02adc     02 00 00 FF 
02ae0     3C 7A 06 F1 | 	add	local10, ##1084
02ae4                 | '     patternsData        :=      hubPtr + 1084
02ae4     04 0E 86 F1 | 	sub	objptr, #4
02ae8     07 7B 62 FC | 	wrlong	local10, objptr
02aec                 | '     numberOfInstruments := 31
02aec     14 0E 06 F1 | 	add	objptr, #20
02af0     07 3F 48 FC | 	wrbyte	#31, objptr
02af4                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
02af4     0B 0E 86 F1 | 	sub	objptr, #11
02af8     07 01 48 FC | 	wrbyte	#0, objptr
02afc     9B 0E 86 F1 | 	sub	objptr, #155
02b00                 | '     repeat i from 952 to 1079
02b00     08 5E 05 F1 | 	add	fp, #8
02b04     01 00 80 FF 
02b08     AF 70 6B FC | 	wrlong	##952, fp
02b0c     08 5E 85 F1 | 	sub	fp, #8
02b10     5C D5 9F FE | 	loc	pa,	#(@LR__0095-@LR__0093)
02b14     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b18                 | LR__0093
02b18                 | '       if byte[hubPtr][i] > numberOfPatterns
02b18     AF 7C 02 FB | 	rdlong	local11, fp
02b1c     08 5E 05 F1 | 	add	fp, #8
02b20     AF 6E 02 FB | 	rdlong	local04, fp
02b24     08 5E 85 F1 | 	sub	fp, #8
02b28     3E 6F 02 F1 | 	add	local04, local11
02b2c     37 73 C2 FA | 	rdbyte	local06, local04
02b30     9B 0E 06 F1 | 	add	objptr, #155
02b34     07 7F C2 FA | 	rdbyte	local12, objptr
02b38     9B 0E 86 F1 | 	sub	objptr, #155
02b3c     3F 73 5A F2 | 	cmps	local06, local12 wcz
02b40     24 00 90 ED |  if_be	jmp	#LR__0094
02b44     AF 7C 02 FB | 	rdlong	local11, fp
02b48     08 5E 05 F1 | 	add	fp, #8
02b4c     AF 80 02 FB | 	rdlong	local13, fp
02b50     08 5E 85 F1 | 	sub	fp, #8
02b54     3E 81 02 F1 | 	add	local13, local11
02b58                 | '         numberOfPatterns := byte[hubPtr][i]
02b58     40 83 C2 FA | 	rdbyte	local14, local13
02b5c     9B 0E 06 F1 | 	add	objptr, #155
02b60     07 83 42 FC | 	wrbyte	local14, objptr
02b64     9B 0E 86 F1 | 	sub	objptr, #155
02b68                 | LR__0094
02b68     08 5E 05 F1 | 	add	fp, #8
02b6c     AF 82 02 FB | 	rdlong	local14, fp
02b70     01 82 06 F1 | 	add	local14, #1
02b74     AF 82 62 FC | 	wrlong	local14, fp
02b78     08 5E 85 F1 | 	sub	fp, #8
02b7c     02 00 00 FF 
02b80     38 82 5E F2 | 	cmps	local14, ##1080 wcz
02b84     90 FF 9F CD |  if_b	jmp	#LR__0093
02b88                 | LR__0095
02b88                 | '     numberOfPatterns++
02b88     9B 0E 06 F1 | 	add	objptr, #155
02b8c     07 83 C2 FA | 	rdbyte	local14, objptr
02b90     07 6F C2 FA | 	rdbyte	local04, objptr
02b94     01 6E 06 F1 | 	add	local04, #1
02b98     07 6F 42 FC | 	wrbyte	local04, objptr
02b9c     07 85 C2 FA | 	rdbyte	local15, objptr
02ba0     0A 84 66 F0 | 	shl	local15, #10
02ba4     09 0E 86 F1 | 	sub	objptr, #9
02ba8     07 87 02 FB | 	rdlong	local16, objptr
02bac     42 87 02 F1 | 	add	local16, local15
02bb0                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
02bb0     84 0E 86 F1 | 	sub	objptr, #132
02bb4     07 87 62 FC | 	wrlong	local16, objptr
02bb8     0E 0E 86 F1 | 	sub	objptr, #14
02bbc                 | ' 
02bbc                 | '   ' This must be an oldschool 15 sample soundtracker module
02bbc                 | '   else
02bbc     18 01 90 FD | 	jmp	#LR__0100
02bc0                 | LR__0096
02bc0     AF 88 02 FB | 	rdlong	local17, fp
02bc4     D6 89 06 F1 | 	add	local17, #470
02bc8                 | '     songLength          := byte[hubPtr + 470]
02bc8     44 6B C2 FA | 	rdbyte	local02, local17
02bcc     9A 0E 06 F1 | 	add	objptr, #154
02bd0     07 6B 42 FC | 	wrbyte	local02, objptr
02bd4     AF 8A 02 FB | 	rdlong	local18, fp
02bd8     D7 8B 06 F1 | 	add	local18, #471
02bdc                 | '     unknown1            := byte[hubPtr + 471]
02bdc     45 6B C2 FA | 	rdbyte	local02, local18
02be0     02 0E 06 F1 | 	add	objptr, #2
02be4     07 6B 42 FC | 	wrbyte	local02, objptr
02be8     AF 8C 02 FB | 	rdlong	local19, fp
02bec     D8 8D 06 F1 | 	add	local19, #472
02bf0                 | '     songPositionsLut    :=      hubPtr + 472
02bf0     06 0E 86 F1 | 	sub	objptr, #6
02bf4     07 8D 62 FC | 	wrlong	local19, objptr
02bf8     AF 8E 02 FB | 	rdlong	local20, fp
02bfc     01 00 00 FF 
02c00     58 8E 06 F1 | 	add	local20, ##600
02c04                 | '     patternsData        :=      hubPtr + 600
02c04     04 0E 86 F1 | 	sub	objptr, #4
02c08     07 8F 62 FC | 	wrlong	local20, objptr
02c0c                 | '     numberOfInstruments := 15
02c0c     14 0E 06 F1 | 	add	objptr, #20
02c10     07 1F 48 FC | 	wrbyte	#15, objptr
02c14                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
02c14     0B 0E 86 F1 | 	sub	objptr, #11
02c18     07 01 48 FC | 	wrbyte	#0, objptr
02c1c     9B 0E 86 F1 | 	sub	objptr, #155
02c20                 | '     repeat i from 472 to 599
02c20     08 5E 05 F1 | 	add	fp, #8
02c24     AF B0 6B FC | 	wrlong	#472, fp
02c28     08 5E 85 F1 | 	sub	fp, #8
02c2c     40 D4 9F FE | 	loc	pa,	#(@LR__0099-@LR__0097)
02c30     93 00 A0 FD | 	call	#FCACHE_LOAD_
02c34                 | LR__0097
02c34                 | '       if byte[hubPtr][i] > numberOfPatterns
02c34     AF 7C 02 FB | 	rdlong	local11, fp
02c38     08 5E 05 F1 | 	add	fp, #8
02c3c     AF 6E 02 FB | 	rdlong	local04, fp
02c40     08 5E 85 F1 | 	sub	fp, #8
02c44     3E 6F 02 F1 | 	add	local04, local11
02c48     37 73 C2 FA | 	rdbyte	local06, local04
02c4c     9B 0E 06 F1 | 	add	objptr, #155
02c50     07 7F C2 FA | 	rdbyte	local12, objptr
02c54     9B 0E 86 F1 | 	sub	objptr, #155
02c58     3F 73 5A F2 | 	cmps	local06, local12 wcz
02c5c     24 00 90 ED |  if_be	jmp	#LR__0098
02c60     AF 7C 02 FB | 	rdlong	local11, fp
02c64     08 5E 05 F1 | 	add	fp, #8
02c68     AF 90 02 FB | 	rdlong	local21, fp
02c6c     08 5E 85 F1 | 	sub	fp, #8
02c70     3E 91 02 F1 | 	add	local21, local11
02c74                 | '         numberOfPatterns := byte[hubPtr][i]
02c74     48 83 C2 FA | 	rdbyte	local14, local21
02c78     9B 0E 06 F1 | 	add	objptr, #155
02c7c     07 83 42 FC | 	wrbyte	local14, objptr
02c80     9B 0E 86 F1 | 	sub	objptr, #155
02c84                 | LR__0098
02c84     08 5E 05 F1 | 	add	fp, #8
02c88     AF 82 02 FB | 	rdlong	local14, fp
02c8c     01 82 06 F1 | 	add	local14, #1
02c90     AF 82 62 FC | 	wrlong	local14, fp
02c94     08 5E 85 F1 | 	sub	fp, #8
02c98     01 00 00 FF 
02c9c     58 82 5E F2 | 	cmps	local14, ##600 wcz
02ca0     90 FF 9F CD |  if_b	jmp	#LR__0097
02ca4                 | LR__0099
02ca4                 | '     numberOfPatterns++
02ca4     9B 0E 06 F1 | 	add	objptr, #155
02ca8     07 83 C2 FA | 	rdbyte	local14, objptr
02cac     07 6F C2 FA | 	rdbyte	local04, objptr
02cb0     01 6E 06 F1 | 	add	local04, #1
02cb4     07 6F 42 FC | 	wrbyte	local04, objptr
02cb8     07 93 C2 FA | 	rdbyte	local22, objptr
02cbc     0A 92 66 F0 | 	shl	local22, #10
02cc0     09 0E 86 F1 | 	sub	objptr, #9
02cc4     07 95 02 FB | 	rdlong	local23, objptr
02cc8     49 95 02 F1 | 	add	local23, local22
02ccc                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
02ccc     84 0E 86 F1 | 	sub	objptr, #132
02cd0     07 95 62 FC | 	wrlong	local23, objptr
02cd4     0E 0E 86 F1 | 	sub	objptr, #14
02cd8                 | LR__0100
02cd8                 | ' 
02cd8                 | '   ' Iterate through all samples and fill in the sample pointer LUT
02cd8                 | '   tmpPtr := sampleDataPtr
02cd8     0E 0E 06 F1 | 	add	objptr, #14
02cdc     07 6B 02 FB | 	rdlong	local02, objptr
02ce0     0C 5E 05 F1 | 	add	fp, #12
02ce4     AF 6A 62 FC | 	wrlong	local02, fp
02ce8                 | '   repeat i from 1 to numberOfInstruments
02ce8     04 5E 85 F1 | 	sub	fp, #4
02cec     AF 02 68 FC | 	wrlong	#1, fp
02cf0     08 5E 85 F1 | 	sub	fp, #8
02cf4     98 0E 06 F1 | 	add	objptr, #152
02cf8     07 6F C2 FA | 	rdbyte	local04, objptr
02cfc     01 6E 5E F2 | 	cmps	local04, #1 wcz
02d00     01 82 06 16 |  if_a	mov	local14, #1
02d04     01 82 66 E6 |  if_be	neg	local14, #1
02d08     41 97 02 F6 | 	mov	local24, local14
02d0c     07 99 C2 FA | 	rdbyte	local25, objptr
02d10     A6 0E 86 F1 | 	sub	objptr, #166
02d14     4B 99 02 F1 | 	add	local25, local24
02d18                 | LR__0101
02d18     08 5E 05 F1 | 	add	fp, #8
02d1c     AF 9A 02 FB | 	rdlong	local26, fp
02d20     01 9A 86 F1 | 	sub	local26, #1
02d24     02 9A 66 F0 | 	shl	local26, #2
02d28     12 0E 06 F1 | 	add	objptr, #18
02d2c     07 9B 02 F1 | 	add	local26, objptr
02d30                 | '     samplesPtrLut[i-1] := tmpPtr
02d30     04 5E 05 F1 | 	add	fp, #4
02d34     AF 7E 02 FB | 	rdlong	local12, fp
02d38     4D 7F 62 FC | 	wrlong	local12, local26
02d3c     18 5E 05 F1 | 	add	fp, #24
02d40     AF 5C 02 F6 | 	mov	arg02, fp
02d44     14 5E 85 F1 | 	sub	fp, #20
02d48     AF 5E 02 F6 | 	mov	arg03, fp
02d4c     04 5E 05 F1 | 	add	fp, #4
02d50     AF 60 02 F6 | 	mov	arg04, fp
02d54     04 5E 05 F1 | 	add	fp, #4
02d58     AF 62 02 F6 | 	mov	arg05, fp
02d5c     04 5E 05 F1 | 	add	fp, #4
02d60     AF 64 02 F6 | 	mov	arg06, fp
02d64     04 5E 05 F1 | 	add	fp, #4
02d68     AF 66 02 F6 | 	mov	arg07, fp
02d6c                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
02d6c     18 5E 85 F1 | 	sub	fp, #24
02d70     AF 5A 02 FB | 	rdlong	arg01, fp
02d74     08 5E 85 F1 | 	sub	fp, #8
02d78     12 0E 86 F1 | 	sub	objptr, #18
02d7c     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
02d80                 | '     tmpPtr += samLength
02d80     0C 5E 05 F1 | 	add	fp, #12
02d84     AF 7E 02 FB | 	rdlong	local12, fp
02d88     04 5E 05 F1 | 	add	fp, #4
02d8c     AF 9C 02 FB | 	rdlong	local27, fp
02d90     4E 7F 02 F1 | 	add	local12, local27
02d94     04 5E 85 F1 | 	sub	fp, #4
02d98     AF 7E 62 FC | 	wrlong	local12, fp
02d9c     04 5E 85 F1 | 	sub	fp, #4
02da0     AF 7E 02 FB | 	rdlong	local12, fp
02da4     4B 7F 02 F1 | 	add	local12, local24
02da8     AF 7E 62 FC | 	wrlong	local12, fp
02dac     08 5E 85 F1 | 	sub	fp, #8
02db0     4C 7F 0A F2 | 	cmp	local12, local25 wz
02db4     60 FF 9F 5D |  if_ne	jmp	#LR__0101
02db8                 | ' 
02db8                 | '   ' Below this point, all play routine variables are resest to their default values
02db8                 | '   tickCounter                 := 0
02db8     A1 0E 06 F1 | 	add	objptr, #161
02dbc     07 01 48 FC | 	wrbyte	#0, objptr
02dc0                 | '   patternRow                  := 0
02dc0     01 0E 06 F1 | 	add	objptr, #1
02dc4     07 01 48 FC | 	wrbyte	#0, objptr
02dc8                 | '   songPosition                := startPattern
02dc8     04 5E 05 F1 | 	add	fp, #4
02dcc     AF 6A 02 FB | 	rdlong	local02, fp
02dd0     04 5E 85 F1 | 	sub	fp, #4
02dd4     01 0E 06 F1 | 	add	objptr, #1
02dd8     07 6B 42 FC | 	wrbyte	local02, objptr
02ddc                 | '   currentSongSpeed            := 6
02ddc     01 0E 06 F1 | 	add	objptr, #1
02de0     07 0D 48 FC | 	wrbyte	#6, objptr
02de4                 | '   patternDelay                := 0
02de4     01 0E 06 F1 | 	add	objptr, #1
02de8     07 01 48 FC | 	wrbyte	#0, objptr
02dec                 | '   ticksPerMinute              := 50 * 60
02dec     02 0F 06 F1 | 	add	objptr, #258
02df0     05 00 80 FF 
02df4     07 71 6B FC | 	wrlong	##3000, objptr
02df8     A7 0F 86 F1 | 	sub	objptr, #423
02dfc     07 09 03 FB | 	rdlong	muldiva_, objptr
02e00     32 0A 07 F6 | 	mov	muldivb_, #50
02e04     D0 00 A0 FD | 	call	#divide_
02e08                 | '   cyclesToWait                := systemClock / 50
02e08     AB 0F 06 F1 | 	add	objptr, #427
02e0c     07 0B 63 FC | 	wrlong	muldivb_, objptr
02e10                 | '   sampleNumber_memory         := 0
02e10     35 0E 06 F1 | 	add	objptr, #53
02e14     07 01 48 FC | 	wrbyte	#0, objptr
02e18                 | '   lpFilter                    := 0
02e18     25 0E 86 F1 | 	sub	objptr, #37
02e1c     07 01 48 FC | 	wrbyte	#0, objptr
02e20                 | '   cmdD_memoryX                := 0
02e20     29 0E 06 F1 | 	add	objptr, #41
02e24     07 01 48 FC | 	wrbyte	#0, objptr
02e28                 | '   cmdD_memoryY                := 0
02e28     01 0E 06 F1 | 	add	objptr, #1
02e2c     07 01 48 FC | 	wrbyte	#0, objptr
02e30                 | '   cmdD_updatePosition         := false
02e30     01 0E 06 F1 | 	add	objptr, #1
02e34     07 01 48 FC | 	wrbyte	#0, objptr
02e38                 | '   cmdB_memoryZ                := 0
02e38     01 0E 06 F1 | 	add	objptr, #1
02e3c     07 01 48 FC | 	wrbyte	#0, objptr
02e40                 | '   cmdB_updatePosition         := false
02e40     01 0E 06 F1 | 	add	objptr, #1
02e44     07 01 48 FC | 	wrbyte	#0, objptr
02e48                 | '   cmdE6_updatePositionCommon  := false
02e48     0D 0E 06 F1 | 	add	objptr, #13
02e4c     07 01 48 FC | 	wrbyte	#0, objptr
02e50     F5 0F 86 F1 | 	sub	objptr, #501
02e54                 | ' 
02e54                 | '   repeat i from 0 to LAST_CHANNEL
02e54     08 5E 05 F1 | 	add	fp, #8
02e58     AF 00 68 FC | 	wrlong	#0, fp
02e5c     08 5E 85 F1 | 	sub	fp, #8
02e60                 | LR__0102
02e60     08 5E 05 F1 | 	add	fp, #8
02e64     AF 9E 02 FB | 	rdlong	local28, fp
02e68     01 9E 66 F0 | 	shl	local28, #1
02e6c     D7 0E 06 F1 | 	add	objptr, #215
02e70     07 9F 02 F1 | 	add	local28, objptr
02e74                 | ' 
02e74                 | '     currRepeatPoint[i]        := 0
02e74     4F 01 58 FC | 	wrword	#0, local28
02e78     AF A0 02 FB | 	rdlong	local29, fp
02e7c     01 A0 66 F0 | 	shl	local29, #1
02e80     1C 0E 86 F1 | 	sub	objptr, #28
02e84     07 A1 02 F1 | 	add	local29, objptr
02e88                 | '     currSampleLength[i]       := 4
02e88     50 09 58 FC | 	wrword	#4, local29
02e8c     13 A3 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
02e90     AF A4 02 FB | 	rdlong	local31, fp
02e94     02 A4 66 F0 | 	shl	local31, #2
02e98     14 0E 86 F1 | 	sub	objptr, #20
02e9c     07 A5 02 F1 | 	add	local31, objptr
02ea0                 | '     currSamplePtr[i]          := @null
02ea0     52 A3 62 FC | 	wrlong	local30, local31
02ea4     AF A6 02 FB | 	rdlong	local32, fp
02ea8     10 0E 06 F1 | 	add	objptr, #16
02eac     07 A7 02 F1 | 	add	local32, objptr
02eb0                 | '     currSampleNr[i]           := 0
02eb0     53 01 48 FC | 	wrbyte	#0, local32
02eb4     AF A8 02 FB | 	rdlong	local33, fp
02eb8     02 A8 66 F0 | 	shl	local33, #2
02ebc     0C 0E 06 F1 | 	add	objptr, #12
02ec0     07 A9 02 F1 | 	add	local33, objptr
02ec4                 | '     currRepeatLength[i]       := 1
02ec4     54 03 68 FC | 	wrlong	#1, local33
02ec8     AF AA 02 FB | 	rdlong	local34, fp
02ecc     02 AA 66 F0 | 	shl	local34, #2
02ed0     1C 0E 06 F1 | 	add	objptr, #28
02ed4     07 AB 02 F1 | 	add	local34, objptr
02ed8                 | '     currPeriod[i]             := 400
02ed8     55 21 6B FC | 	wrlong	#400, local34
02edc     AF AC 02 FB | 	rdlong	local35, fp
02ee0     02 AC 66 F0 | 	shl	local35, #2
02ee4     48 0E 06 F1 | 	add	objptr, #72
02ee8     07 AD 02 F1 | 	add	local35, objptr
02eec                 | '     lastSetPeriod[i]          := 400
02eec     56 21 6B FC | 	wrlong	#400, local35
02ef0     AF AE 02 FB | 	rdlong	local36, fp
02ef4     02 AE 66 F0 | 	shl	local36, #2
02ef8     10 0E 06 F1 | 	add	objptr, #16
02efc     07 AF 02 F1 | 	add	local36, objptr
02f00                 | '     lastSetSamplePtr[i]       := 0
02f00     57 01 68 FC | 	wrlong	#0, local36
02f04     AF B0 02 FB | 	rdlong	local37, fp
02f08     02 B0 66 F0 | 	shl	local37, #2
02f0c     10 0E 06 F1 | 	add	objptr, #16
02f10     07 B1 02 F1 | 	add	local37, objptr
02f14                 | '     lastSetSampleNr[i]        := 0
02f14     58 01 68 FC | 	wrlong	#0, local37
02f18     AF B2 02 FB | 	rdlong	local38, fp
02f1c     02 B2 66 F0 | 	shl	local38, #2
02f20     10 0E 06 F1 | 	add	objptr, #16
02f24     07 B3 02 F1 | 	add	local38, objptr
02f28                 | '     lastSetSampleLength[i]    := 0
02f28     59 01 68 FC | 	wrlong	#0, local38
02f2c     AF B4 02 FB | 	rdlong	local39, fp
02f30     02 B4 66 F0 | 	shl	local39, #2
02f34     10 0E 06 F1 | 	add	objptr, #16
02f38     07 B5 02 F1 | 	add	local39, objptr
02f3c                 | '     lastSetRepeatLength[i]    := 0
02f3c     5A 01 68 FC | 	wrlong	#0, local39
02f40     AF B6 02 FB | 	rdlong	local40, fp
02f44     02 B6 66 F0 | 	shl	local40, #2
02f48     10 0E 06 F1 | 	add	objptr, #16
02f4c     07 B7 02 F1 | 	add	local40, objptr
02f50                 | '     lastSetRepeatPoint[i]     := 0
02f50     5B 01 68 FC | 	wrlong	#0, local40
02f54     AF B8 02 FB | 	rdlong	local41, fp
02f58     02 B8 66 F0 | 	shl	local41, #2
02f5c     78 0E 86 F1 | 	sub	objptr, #120
02f60     07 B9 02 F1 | 	add	local41, objptr
02f64                 | '     currVolume[i]             := 0
02f64     5C 01 68 FC | 	wrlong	#0, local41
02f68     AF BA 02 FB | 	rdlong	local42, fp
02f6c     01 BA 66 F0 | 	shl	local42, #1
02f70     20 0E 06 F1 | 	add	objptr, #32
02f74     07 BB 02 F1 | 	add	local42, objptr
02f78                 | '     currPanning[i]            := 0
02f78     5D 01 58 FC | 	wrword	#0, local42
02f7c     AF BC 02 FB | 	rdlong	local43, fp
02f80     A9 0E 06 F1 | 	add	objptr, #169
02f84     07 BD 02 F1 | 	add	local43, objptr
02f88                 | '     cmd3_memoryZ[i]           := 0
02f88     5E 01 48 FC | 	wrbyte	#0, local43
02f8c     AF BE 02 FB | 	rdlong	local44, fp
02f90     04 0E 06 F1 | 	add	objptr, #4
02f94     07 BF 02 F1 | 	add	local44, objptr
02f98                 | '     cmd4_memoryY[i]           := 0
02f98     5F 01 48 FC | 	wrbyte	#0, local44
02f9c     AF C0 02 FB | 	rdlong	local45, fp
02fa0     04 0E 06 F1 | 	add	objptr, #4
02fa4     07 C1 02 F1 | 	add	local45, objptr
02fa8                 | '     cmd4_memoryX[i]           := 0
02fa8     60 01 48 FC | 	wrbyte	#0, local45
02fac     AF C2 02 FB | 	rdlong	local46, fp
02fb0     04 0E 06 F1 | 	add	objptr, #4
02fb4     07 C3 02 F1 | 	add	local46, objptr
02fb8                 | '     cmd7_memoryY[i]           := 0
02fb8     61 01 48 FC | 	wrbyte	#0, local46
02fbc     AF C4 02 FB | 	rdlong	local47, fp
02fc0     04 0E 06 F1 | 	add	objptr, #4
02fc4     07 C5 02 F1 | 	add	local47, objptr
02fc8                 | '     cmd7_memoryX[i]           := 0
02fc8     62 01 48 FC | 	wrbyte	#0, local47
02fcc     AF C6 02 FB | 	rdlong	local48, fp
02fd0     04 0E 06 F1 | 	add	objptr, #4
02fd4     07 C7 02 F1 | 	add	local48, objptr
02fd8                 | '     cmd9_memoryZ[i]           := 0
02fd8     63 01 48 FC | 	wrbyte	#0, local48
02fdc     AF C8 02 FB | 	rdlong	local49, fp
02fe0     0D 0E 06 F1 | 	add	objptr, #13
02fe4     07 C9 02 F1 | 	add	local49, objptr
02fe8                 | '     cmdE6_memory[i]           := 0
02fe8     64 01 48 FC | 	wrbyte	#0, local49
02fec     AF CA 02 FB | 	rdlong	local50, fp
02ff0     04 0E 06 F1 | 	add	objptr, #4
02ff4     07 CB 02 F1 | 	add	local50, objptr
02ff8                 | '     cmdE6_counter[i]          := 0
02ff8     65 01 48 FC | 	wrbyte	#0, local50
02ffc     AF CC 02 FB | 	rdlong	local51, fp
03000     04 0E 06 F1 | 	add	objptr, #4
03004     07 CD 02 F1 | 	add	local51, objptr
03008                 | '     cmdE6_updatePosition[i]   := false
03008     66 01 48 FC | 	wrbyte	#0, local51
0300c     AF CE 02 FB | 	rdlong	local52, fp
03010     11 0E 86 F1 | 	sub	objptr, #17
03014     07 CF 02 F1 | 	add	local52, objptr
03018                 | '     sampleNumber_memory[i]    := 0
03018     67 01 48 FC | 	wrbyte	#0, local52
0301c     AF D0 02 FB | 	rdlong	local53, fp
03020     59 0E 86 F1 | 	sub	objptr, #89
03024     07 D1 02 F1 | 	add	local53, objptr
03028                 | '     vibratoPos[i]             := 0
03028     68 01 48 FC | 	wrbyte	#0, local53
0302c     AF D2 02 FB | 	rdlong	local54, fp
03030     02 D2 66 F0 | 	shl	local54, #2
03034     10 0E 06 F1 | 	add	objptr, #16
03038     07 D3 02 F1 | 	add	local54, objptr
0303c                 | '     portamentoPeriodMemory[i] := 0
0303c     69 01 68 FC | 	wrlong	#0, local54
03040     AF D4 02 FB | 	rdlong	local55, fp
03044     25 0E 06 F1 | 	add	objptr, #37
03048     07 D5 02 F1 | 	add	local55, objptr
0304c                 | '     portaGlissando[i]         := 0
0304c     6A 01 48 FC | 	wrbyte	#0, local55
03050     AF D6 02 FB | 	rdlong	local56, fp
03054     04 0E 06 F1 | 	add	objptr, #4
03058     07 D7 02 F1 | 	add	local56, objptr
0305c                 | '     vibratoType[i]            := 0
0305c     6B 01 48 FC | 	wrbyte	#0, local56
03060     AF D8 02 FB | 	rdlong	local57, fp
03064     04 0E 06 F1 | 	add	objptr, #4
03068     07 D9 02 F1 | 	add	local57, objptr
0306c                 | '     tremoloType[i]            := 0
0306c     6C 01 48 FC | 	wrbyte	#0, local57
03070     AF DA 02 FB | 	rdlong	local58, fp
03074     39 0E 86 F1 | 	sub	objptr, #57
03078     07 DB 02 F1 | 	add	local58, objptr
0307c                 | '     tremoloPos[i]             := 0
0307c     6D 01 48 FC | 	wrbyte	#0, local58
03080     AF DC 02 FB | 	rdlong	local59, fp
03084     02 DC 66 F0 | 	shl	local59, #2
03088     7C 0E 86 F1 | 	sub	objptr, #124
0308c     07 DD 02 F1 | 	add	local59, objptr
03090                 | '     deltaVolume[i]            := 0
03090     6E 01 68 FC | 	wrlong	#0, local59
03094     AF DE 02 FB | 	rdlong	local60, fp
03098     02 DE 66 F0 | 	shl	local60, #2
0309c     20 0E 86 F1 | 	sub	objptr, #32
030a0     07 DF 02 F1 | 	add	local60, objptr
030a4                 | '     deltaPeriod[i]            := 0
030a4     6F 01 68 FC | 	wrlong	#0, local60
030a8     AF E0 02 FB | 	rdlong	local61, fp
030ac     A0 0E 06 F1 | 	add	objptr, #160
030b0     07 E1 02 F1 | 	add	local61, objptr
030b4                 | '     resetTremolo[i]           := 0
030b4     70 01 48 FC | 	wrbyte	#0, local61
030b8     AF E2 02 FB | 	rdlong	local62, fp
030bc     04 0E 06 F1 | 	add	objptr, #4
030c0     07 E3 02 F1 | 	add	local62, objptr
030c4                 | '     resetVibrato[i]           := 0
030c4     71 01 48 FC | 	wrbyte	#0, local62
030c8     AF 82 02 FB | 	rdlong	local14, fp
030cc     01 82 06 F1 | 	add	local14, #1
030d0     AF 82 62 FC | 	wrlong	local14, fp
030d4     08 5E 85 F1 | 	sub	fp, #8
030d8     04 82 5E F2 | 	cmps	local14, #4 wcz
030dc     93 0F 86 F1 | 	sub	objptr, #403
030e0     7C FD 9F CD |  if_b	jmp	#LR__0102
030e4     AF F0 03 F6 | 	mov	ptra, fp
030e8     BF 00 A0 FD | 	call	#popregs_
030ec                 | _trackerplayer_spin2_initModule_ret
030ec     2D 00 64 FD | 	ret
030f0                 | 
030f0                 | ' 
030f0                 | ' 
030f0                 | ' ' This routine needs to be ticked X number of times per second
030f0                 | ' ' in order to advance the tracker play routine
030f0                 | ' '
030f0                 | ' PUB tick() | channel, sampleNumber, period, effect, i
030f0                 | _trackerplayer_spin2_tick
030f0     12 5A 05 F6 | 	mov	COUNT_, #18
030f4     B0 00 A0 FD | 	call	#pushregs_
030f8     30 F0 07 F1 | 	add	ptra, #48
030fc                 | ' 
030fc                 | '   if currentSongSpeed == 0
030fc     A4 0E 06 F1 | 	add	objptr, #164
03100     07 69 CA FA | 	rdbyte	local01, objptr wz
03104     A4 0E 86 F1 | 	sub	objptr, #164
03108                 | '     return
03108     34 03 90 AD |  if_e	jmp	#LR__0114
0310c                 | ' 
0310c                 | '   ' Iterate over the channels and process everything
0310c                 | '   repeat channel from 0 to LAST_CHANNEL
0310c     AF 00 68 FC | 	wrlong	#0, fp
03110                 | LR__0103
03110     04 5E 05 F1 | 	add	fp, #4
03114     AF 60 02 F6 | 	mov	arg04, fp
03118     04 5E 05 F1 | 	add	fp, #4
0311c     AF 62 02 F6 | 	mov	arg05, fp
03120     04 5E 05 F1 | 	add	fp, #4
03124     AF 64 02 F6 | 	mov	arg06, fp
03128     0C 5E 85 F1 | 	sub	fp, #12
0312c                 | ' 
0312c                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
0312c     AF 5A 02 FB | 	rdlong	arg01, fp
03130     A3 0E 06 F1 | 	add	objptr, #163
03134     07 5D C2 FA | 	rdbyte	arg02, objptr
03138     01 0E 86 F1 | 	sub	objptr, #1
0313c     07 5F C2 FA | 	rdbyte	arg03, objptr
03140     7F 5C 06 F5 | 	and	arg02, #127
03144     0C 0E 86 F1 | 	sub	objptr, #12
03148     07 6B 02 FB | 	rdlong	local02, objptr
0314c     35 5D 02 F1 | 	add	arg02, local02
03150                 | ' 
03150                 | '   ' Get the note data for a specific channel/song position/pattern row
03150                 | '   patternNumber := byte[songPositionsLut][position & 127]
03150     2E 6D C2 FA | 	rdbyte	local03, arg02
03154     0A 6C 66 F0 | 	shl	local03, #10
03158     04 0E 86 F1 | 	sub	objptr, #4
0315c     07 6F 02 FB | 	rdlong	local04, objptr
03160     92 0E 86 F1 | 	sub	objptr, #146
03164     36 6F 02 F1 | 	add	local04, local03
03168                 | '   patternPtr    := patternsData + (patternNumber << 10)
03168     3F 5E 06 F5 | 	and	arg03, #63
0316c     04 5E 66 F0 | 	shl	arg03, #4
03170     2F 6F 02 F1 | 	add	local04, arg03
03174     03 5A 06 F5 | 	and	arg01, #3
03178     02 5A 66 F0 | 	shl	arg01, #2
0317c     2D 6F 02 F1 | 	add	local04, arg01
03180                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
03180     37 71 C2 FA | 	rdbyte	local05, local04
03184     18 70 66 F0 | 	shl	local05, #24
03188     01 6E 06 F1 | 	add	local04, #1
0318c     37 73 C2 FA | 	rdbyte	local06, local04
03190     10 72 66 F0 | 	shl	local06, #16
03194     39 71 42 F5 | 	or	local05, local06
03198     01 6E 06 F1 | 	add	local04, #1
0319c     37 75 C2 FA | 	rdbyte	local07, local04
031a0     08 74 66 F0 | 	shl	local07, #8
031a4     3A 71 42 F5 | 	or	local05, local07
031a8     01 6E 06 F1 | 	add	local04, #1
031ac     37 77 C2 FA | 	rdbyte	local08, local04
031b0     3B 71 42 F5 | 	or	local05, local08
031b4                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
031b4     38 79 02 F6 | 	mov	local09, local05
031b8     0C 78 46 F0 | 	shr	local09, #12
031bc     0F 78 06 F5 | 	and	local09, #15
031c0     38 7B 02 F6 | 	mov	local10, local05
031c4     18 7A 46 F0 | 	shr	local10, #24
031c8     F0 7A 06 F5 | 	and	local10, #240
031cc     3D 79 42 F5 | 	or	local09, local10
031d0                 | ' 
031d0                 | '   ' Extract the different sub parts from the data
031d0                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
031d0     30 79 62 FC | 	wrlong	local09, arg04
031d4     38 7D 02 F6 | 	mov	local11, local05
031d8     10 7C 46 F0 | 	shr	local11, #16
031dc     07 00 00 FF 
031e0     FF 7D 06 F5 | 	and	local11, ##4095
031e4                 | '   long[period]       :=  (data >> 16) & $FFF
031e4     31 7D 62 FC | 	wrlong	local11, arg05
031e8     07 00 00 FF 
031ec     FF 71 06 F5 | 	and	local05, ##4095
031f0                 | '   long[effect]       :=   data & $FFF
031f0     32 71 62 FC | 	wrlong	local05, arg06
031f4                 | '     processChannel(channel, sampleNumber, period, effect)
031f4     AF 5A 02 FB | 	rdlong	arg01, fp
031f8     04 5E 05 F1 | 	add	fp, #4
031fc     AF 5C 02 FB | 	rdlong	arg02, fp
03200     04 5E 05 F1 | 	add	fp, #4
03204     AF 5E 02 FB | 	rdlong	arg03, fp
03208     04 5E 05 F1 | 	add	fp, #4
0320c     AF 60 02 FB | 	rdlong	arg04, fp
03210     0C 5E 85 F1 | 	sub	fp, #12
03214     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
03218     AF 7E 02 FB | 	rdlong	local12, fp
0321c     01 7E 06 F1 | 	add	local12, #1
03220     AF 7E 62 FC | 	wrlong	local12, fp
03224     04 7E 5E F2 | 	cmps	local12, #4 wcz
03228     E4 FE 9F CD |  if_b	jmp	#LR__0103
0322c                 | ' 
0322c                 | '   ' Incrementation the main counter that drives the whole play routine
0322c                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
0322c     A1 0E 06 F1 | 	add	objptr, #161
03230     07 69 C2 FA | 	rdbyte	local01, objptr
03234     01 68 06 F1 | 	add	local01, #1
03238     07 69 42 FC | 	wrbyte	local01, objptr
0323c     03 0E 06 F1 | 	add	objptr, #3
03240     07 81 C2 FA | 	rdbyte	local13, objptr
03244     01 0E 06 F1 | 	add	objptr, #1
03248     07 83 C2 FA | 	rdbyte	local14, objptr
0324c     41 81 02 F1 | 	add	local13, local14
03250     04 0E 86 F1 | 	sub	objptr, #4
03254     07 85 C2 FA | 	rdbyte	local15, objptr
03258     A1 0E 86 F1 | 	sub	objptr, #161
0325c     40 85 5A F2 | 	cmps	local15, local13 wcz
03260                 | '     tickCounter := 0
03260     A1 0E 06 31 |  if_ae	add	objptr, #161
03264     07 01 48 3C |  if_ae	wrbyte	#0, objptr
03268     A1 0E 86 31 |  if_ae	sub	objptr, #161
0326c                 | ' 
0326c                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
0326c                 | '   if tickCounter == 0
0326c     A1 0E 06 F1 | 	add	objptr, #161
03270     07 69 CA FA | 	rdbyte	local01, objptr wz
03274     A1 0E 86 F1 | 	sub	objptr, #161
03278     C4 01 90 5D |  if_ne	jmp	#LR__0113
0327c                 | ' 
0327c                 | '     ' Handle the "pattern repeat" command, "E6"
0327c                 | '     if cmdE6_updatePositionCommon
0327c     F5 0F 06 F1 | 	add	objptr, #501
03280     07 69 CA FA | 	rdbyte	local01, objptr wz
03284     F5 0F 86 F1 | 	sub	objptr, #501
03288     8C 00 90 AD |  if_e	jmp	#LR__0107
0328c                 | '       repeat i from 0 to LAST_CHANNEL
0328c     10 5E 05 F1 | 	add	fp, #16
03290     AF 00 68 FC | 	wrlong	#0, fp
03294     10 5E 85 F1 | 	sub	fp, #16
03298     D8 CD 9F FE | 	loc	pa,	#(@LR__0106-@LR__0104)
0329c     93 00 A0 FD | 	call	#FCACHE_LOAD_
032a0                 | LR__0104
032a0                 | '         if cmdE6_updatePosition[i]
032a0     10 5E 05 F1 | 	add	fp, #16
032a4     AF 7E 02 FB | 	rdlong	local12, fp
032a8     10 5E 85 F1 | 	sub	fp, #16
032ac     F1 0F 06 F1 | 	add	objptr, #497
032b0     07 7F 02 F1 | 	add	local12, objptr
032b4     3F 83 CA FA | 	rdbyte	local14, local12 wz
032b8     F1 0F 86 F1 | 	sub	objptr, #497
032bc     24 00 90 AD |  if_e	jmp	#LR__0105
032c0     10 5E 05 F1 | 	add	fp, #16
032c4     AF 86 02 FB | 	rdlong	local16, fp
032c8     10 5E 85 F1 | 	sub	fp, #16
032cc     E9 0F 06 F1 | 	add	objptr, #489
032d0     07 87 02 F1 | 	add	local16, objptr
032d4                 | '           patternRow := cmdE6_memory[i]
032d4     43 7F C2 FA | 	rdbyte	local12, local16
032d8     47 0F 86 F1 | 	sub	objptr, #327
032dc     07 7F 42 FC | 	wrbyte	local12, objptr
032e0     A2 0E 86 F1 | 	sub	objptr, #162
032e4                 | LR__0105
032e4     10 5E 05 F1 | 	add	fp, #16
032e8     AF 88 02 FB | 	rdlong	local17, fp
032ec     F1 0F 06 F1 | 	add	objptr, #497
032f0     07 89 02 F1 | 	add	local17, objptr
032f4                 | '         cmdE6_updatePosition[i] := false
032f4     44 01 48 FC | 	wrbyte	#0, local17
032f8     AF 7E 02 FB | 	rdlong	local12, fp
032fc     01 7E 06 F1 | 	add	local12, #1
03300     AF 7E 62 FC | 	wrlong	local12, fp
03304     10 5E 85 F1 | 	sub	fp, #16
03308     04 7E 5E F2 | 	cmps	local12, #4 wcz
0330c     F1 0F 86 F1 | 	sub	objptr, #497
03310     8C FF 9F CD |  if_b	jmp	#LR__0104
03314                 | LR__0106
03314     CC 00 90 FD | 	jmp	#LR__0111
03318                 | LR__0107
03318                 | ' 
03318                 | '     ' Handle the "skip to next pattern with offset command", "D"
03318                 | '     elseif cmdD_updatePosition
03318     E6 0F 06 F1 | 	add	objptr, #486
0331c     07 69 CA FA | 	rdbyte	local01, objptr wz
03320     E6 0F 86 F1 | 	sub	objptr, #486
03324     64 00 90 AD |  if_e	jmp	#LR__0108
03328                 | '       if ++songPosition >= songLength
03328     A3 0E 06 F1 | 	add	objptr, #163
0332c     07 69 C2 FA | 	rdbyte	local01, objptr
03330     01 68 06 F1 | 	add	local01, #1
03334     07 69 42 FC | 	wrbyte	local01, objptr
03338     07 81 C2 FA | 	rdbyte	local13, objptr
0333c     09 0E 86 F1 | 	sub	objptr, #9
03340     07 83 C2 FA | 	rdbyte	local14, objptr
03344     9A 0E 86 F1 | 	sub	objptr, #154
03348     41 81 5A F2 | 	cmps	local13, local14 wcz
0334c                 | '         songPosition := 0
0334c     A3 0E 06 31 |  if_ae	add	objptr, #163
03350     07 01 48 3C |  if_ae	wrbyte	#0, objptr
03354     A3 0E 86 31 |  if_ae	sub	objptr, #163
03358     E4 0F 06 F1 | 	add	objptr, #484
0335c     07 7F C2 FA | 	rdbyte	local12, objptr
03360     3F 8B 02 F6 | 	mov	local18, local12
03364     02 8A 66 F0 | 	shl	local18, #2
03368     3F 8B 02 F1 | 	add	local18, local12
0336c     01 8A 66 F0 | 	shl	local18, #1
03370     01 0E 06 F1 | 	add	objptr, #1
03374     07 7F C2 FA | 	rdbyte	local12, objptr
03378     3F 8B 02 F1 | 	add	local18, local12
0337c                 | ' 
0337c                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
0337c     43 0F 86 F1 | 	sub	objptr, #323
03380     07 8B 42 FC | 	wrbyte	local18, objptr
03384     A2 0E 86 F1 | 	sub	objptr, #162
03388                 | ' 
03388                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
03388                 | '     else
03388     58 00 90 FD | 	jmp	#LR__0110
0338c                 | LR__0108
0338c                 | '       if ++patternRow >= PATTERN_LENGTH
0338c     A2 0E 06 F1 | 	add	objptr, #162
03390     07 69 C2 FA | 	rdbyte	local01, objptr
03394     01 68 06 F1 | 	add	local01, #1
03398     07 69 42 FC | 	wrbyte	local01, objptr
0339c     07 81 C2 FA | 	rdbyte	local13, objptr
033a0     A2 0E 86 F1 | 	sub	objptr, #162
033a4     40 80 5E F2 | 	cmps	local13, #64 wcz
033a8     38 00 90 CD |  if_b	jmp	#LR__0109
033ac                 | '         patternRow := 0
033ac     A2 0E 06 F1 | 	add	objptr, #162
033b0     07 01 48 FC | 	wrbyte	#0, objptr
033b4                 | ' 
033b4                 | '         if ++songPosition >= songLength
033b4     01 0E 06 F1 | 	add	objptr, #1
033b8     07 69 C2 FA | 	rdbyte	local01, objptr
033bc     01 68 06 F1 | 	add	local01, #1
033c0     07 69 42 FC | 	wrbyte	local01, objptr
033c4     07 81 C2 FA | 	rdbyte	local13, objptr
033c8     09 0E 86 F1 | 	sub	objptr, #9
033cc     07 83 C2 FA | 	rdbyte	local14, objptr
033d0     9A 0E 86 F1 | 	sub	objptr, #154
033d4     41 81 5A F2 | 	cmps	local13, local14 wcz
033d8                 | '           songPosition := 0
033d8     A3 0E 06 31 |  if_ae	add	objptr, #163
033dc     07 01 48 3C |  if_ae	wrbyte	#0, objptr
033e0     A3 0E 86 31 |  if_ae	sub	objptr, #163
033e4                 | LR__0109
033e4                 | LR__0110
033e4                 | LR__0111
033e4                 | ' 
033e4                 | '     ' Handle "jump to song position" command, "B"
033e4                 | '     if cmdB_updatePosition
033e4     E8 0F 06 F1 | 	add	objptr, #488
033e8     07 69 CA FA | 	rdbyte	local01, objptr wz
033ec     E8 0F 86 F1 | 	sub	objptr, #488
033f0     28 00 90 AD |  if_e	jmp	#LR__0112
033f4                 | ' 
033f4                 | '       songPosition := cmdB_memoryZ
033f4     E7 0F 06 F1 | 	add	objptr, #487
033f8     07 69 C2 FA | 	rdbyte	local01, objptr
033fc     44 0F 86 F1 | 	sub	objptr, #324
03400     07 69 42 FC | 	wrbyte	local01, objptr
03404                 | ' 
03404                 | '       ifnot cmdD_updatePosition
03404     43 0F 06 F1 | 	add	objptr, #323
03408     07 69 CA FA | 	rdbyte	local01, objptr wz
0340c     E6 0F 86 F1 | 	sub	objptr, #486
03410                 | '         patternRow := 0
03410     A2 0E 06 A1 |  if_e	add	objptr, #162
03414     07 01 48 AC |  if_e	wrbyte	#0, objptr
03418     A2 0E 86 A1 |  if_e	sub	objptr, #162
0341c                 | LR__0112
0341c                 | ' 
0341c                 | '     ' We need to be sure that all positioning commands are reset for the next tick
0341c                 | '     cmdE6_updatePositionCommon := false
0341c     F5 0F 06 F1 | 	add	objptr, #501
03420     07 01 48 FC | 	wrbyte	#0, objptr
03424                 | '     cmdB_updatePosition := false
03424     0D 0E 86 F1 | 	sub	objptr, #13
03428     07 01 48 FC | 	wrbyte	#0, objptr
0342c                 | '     cmdD_updatePosition := false
0342c     02 0E 86 F1 | 	sub	objptr, #2
03430     07 01 48 FC | 	wrbyte	#0, objptr
03434                 | '     patternDelay := 0
03434     41 0F 86 F1 | 	sub	objptr, #321
03438     07 01 48 FC | 	wrbyte	#0, objptr
0343c     A5 0E 86 F1 | 	sub	objptr, #165
03440                 | LR__0113
03440                 | LR__0114
03440     AF F0 03 F6 | 	mov	ptra, fp
03444     BF 00 A0 FD | 	call	#popregs_
03448                 | _trackerplayer_spin2_tick_ret
03448     2D 00 64 FD | 	ret
0344c                 | 
0344c                 | ' 
0344c                 | ' 
0344c                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
0344c                 | _trackerplayer_spin2_amigaPeriodToNote
0344c                 | ' 
0344c                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
0344c     00 2E 06 F6 | 	mov	_var01, #0
03450     F8 CB 9F FE | 	loc	pa,	#(@LR__0116-@LR__0115)
03454     93 00 A0 FD | 	call	#FCACHE_LOAD_
03458                 | LR__0115
03458                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
03458     06 00 00 FF 
0345c     AC 26 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3244
03460     13 31 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
03464     2E 33 02 F6 | 	mov	_var03, arg02
03468     03 32 66 F0 | 	shl	_var03, #3
0346c     2E 33 02 F1 | 	add	_var03, arg02
03470     03 32 66 F0 | 	shl	_var03, #3
03474     19 31 02 F1 | 	add	_var02, _var03
03478     17 35 02 F6 | 	mov	_var04, _var01
0347c     01 34 66 F0 | 	shl	_var04, #1
03480     18 35 02 F1 | 	add	_var04, _var02
03484     1A 37 E2 FA | 	rdword	_var05, _var04
03488     2D 37 5A F2 | 	cmps	_var05, arg01 wcz
0348c                 | '       quit
0348c     06 00 00 FF 
03490     AC 26 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3244
03494     0C 00 90 ED |  if_be	jmp	#LR__0117
03498     01 2E 06 F1 | 	add	_var01, #1
0349c     24 2E 5E F2 | 	cmps	_var01, #36 wcz
034a0     B4 FF 9F CD |  if_b	jmp	#LR__0115
034a4                 | LR__0116
034a4                 | LR__0117
034a4                 | ' 
034a4                 | '   return i
034a4     17 29 02 F6 | 	mov	result1, _var01
034a8                 | _trackerplayer_spin2_amigaPeriodToNote_ret
034a8     2D 00 64 FD | 	ret
034ac                 | 
034ac                 | ' 
034ac                 | ' 
034ac                 | ' PRI retunePeriod(period, fTune) | noteNumber
034ac                 | _trackerplayer_spin2_retunePeriod
034ac     06 5A 05 F6 | 	mov	COUNT_, #6
034b0     B0 00 A0 FD | 	call	#pushregs_
034b4     2D 69 02 F6 | 	mov	local01, arg01
034b8     2E 6B 02 F6 | 	mov	local02, arg02
034bc                 | ' 
034bc                 | '   if period > 0 and fTune < 16
034bc     00 68 5E F2 | 	cmps	local01, #0 wcz
034c0     50 00 90 ED |  if_be	jmp	#LR__0118
034c4     10 6A 5E F2 | 	cmps	local02, #16 wcz
034c8     48 00 90 3D |  if_ae	jmp	#LR__0118
034cc                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
034cc     34 5B E2 FA | 	rdword	arg01, local01
034d0     00 5C 06 F6 | 	mov	arg02, #0
034d4     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
034d8     14 6D 02 F6 | 	mov	local03, result1
034dc     06 00 00 FF 
034e0     AC 26 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3244
034e4     13 6F 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
034e8     35 71 02 F6 | 	mov	local05, local02
034ec     03 70 66 F0 | 	shl	local05, #3
034f0     35 71 02 F1 | 	add	local05, local02
034f4     03 70 66 F0 | 	shl	local05, #3
034f8     38 6F 02 F1 | 	add	local04, local05
034fc     01 6C 66 F0 | 	shl	local03, #1
03500     37 6D 02 F1 | 	add	local03, local04
03504                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
03504     36 73 E2 FA | 	rdword	local06, local03
03508     34 73 52 FC | 	wrword	local06, local01
0350c     06 00 00 FF 
03510     AC 26 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3244
03514                 | LR__0118
03514     AF F0 03 F6 | 	mov	ptra, fp
03518     BF 00 A0 FD | 	call	#popregs_
0351c                 | _trackerplayer_spin2_retunePeriod_ret
0351c     2D 00 64 FD | 	ret
03520                 | 
03520                 | ' 
03520                 | ' 
03520                 | ' PRI getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
03520                 | _trackerplayer_spin2_getSampleInfo
03520     2D 2F 0A F6 | 	mov	_var01, arg01 wz
03524                 | ' 
03524                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
03524     08 00 90 AD |  if_e	jmp	#LR__0119
03528     1F 2E 5E F2 | 	cmps	_var01, #31 wcz
0352c     08 00 90 ED |  if_be	jmp	#LR__0120
03530                 | LR__0119
03530                 | '     long[samplePtr] := 0
03530     2E 01 68 FC | 	wrlong	#0, arg02
03534                 | '     return
03534     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
03538                 | LR__0120
03538                 | ' 
03538                 | '   sampleNumber--
03538     01 2E 86 F1 | 	sub	_var01, #1
0353c     17 31 02 F6 | 	mov	_var02, _var01
03540     04 30 66 F0 | 	shl	_var02, #4
03544     17 31 82 F1 | 	sub	_var02, _var01
03548     01 30 66 F0 | 	shl	_var02, #1
0354c     0A 0E 06 F1 | 	add	objptr, #10
03550     07 33 02 FB | 	rdlong	_var03, objptr
03554     18 33 02 F1 | 	add	_var03, _var02
03558                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
03558     19 35 02 F6 | 	mov	_var04, _var03
0355c     16 34 06 F1 | 	add	_var04, #22
03560     1A 37 C2 FA | 	rdbyte	_var05, _var04
03564     08 36 66 F0 | 	shl	_var05, #8
03568     19 39 02 F6 | 	mov	_var06, _var03
0356c     17 38 06 F1 | 	add	_var06, #23
03570     1C 3B C2 FA | 	rdbyte	_var07, _var06
03574     1D 37 42 F5 | 	or	_var05, _var07
03578     01 36 66 F0 | 	shl	_var05, #1
0357c                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
0357c     2F 37 62 FC | 	wrlong	_var05, arg03
03580     19 3D 02 F6 | 	mov	_var08, _var03
03584     18 3C 06 F1 | 	add	_var08, #24
03588                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
03588     1E 3F C2 FA | 	rdbyte	_var09, _var08
0358c     30 3F 62 FC | 	wrlong	_var09, arg04
03590     19 41 02 F6 | 	mov	_var10, _var03
03594     19 40 06 F1 | 	add	_var10, #25
03598                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
03598     20 3F C2 FA | 	rdbyte	_var09, _var10
0359c     31 3F 62 FC | 	wrlong	_var09, arg05
035a0     19 43 02 F6 | 	mov	_var11, _var03
035a4     1A 42 06 F1 | 	add	_var11, #26
035a8     21 45 C2 FA | 	rdbyte	_var12, _var11
035ac     08 44 66 F0 | 	shl	_var12, #8
035b0     19 47 02 F6 | 	mov	_var13, _var03
035b4     1B 46 06 F1 | 	add	_var13, #27
035b8     23 3B C2 FA | 	rdbyte	_var07, _var13
035bc     1D 45 42 F5 | 	or	_var12, _var07
035c0     01 44 66 F0 | 	shl	_var12, #1
035c4                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
035c4     32 45 62 FC | 	wrlong	_var12, arg06
035c8     19 49 02 F6 | 	mov	_var14, _var03
035cc     1C 48 06 F1 | 	add	_var14, #28
035d0     24 4B C2 FA | 	rdbyte	_var15, _var14
035d4     08 4A 66 F0 | 	shl	_var15, #8
035d8     1D 32 06 F1 | 	add	_var03, #29
035dc     19 3B C2 FA | 	rdbyte	_var07, _var03
035e0     1D 4B 42 F5 | 	or	_var15, _var07
035e4     01 4A 66 F0 | 	shl	_var15, #1
035e8                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
035e8     33 4B 62 FC | 	wrlong	_var15, arg07
035ec     02 2E 66 F0 | 	shl	_var01, #2
035f0     08 0E 06 F1 | 	add	objptr, #8
035f4     07 2F 02 F1 | 	add	_var01, objptr
035f8                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
035f8     17 3F 02 FB | 	rdlong	_var09, _var01
035fc     2E 3F 62 FC | 	wrlong	_var09, arg02
03600                 | ' 
03600                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
03600     33 3F 02 FB | 	rdlong	_var09, arg07
03604     02 3E 0E F2 | 	cmp	_var09, #2 wz
03608     12 0E 86 F1 | 	sub	objptr, #18
0360c     08 00 90 5D |  if_ne	jmp	#LR__0121
03610     32 3B 0A FB | 	rdlong	_var07, arg06 wz
03614                 | '     long[repeatLength] := 1
03614     33 03 68 AC |  if_e	wrlong	#1, arg07
03618                 | LR__0121
03618                 | _trackerplayer_spin2_getSampleInfo_ret
03618     2D 00 64 FD | 	ret
0361c                 | 
0361c                 | ' 
0361c                 | ' 
0361c                 | ' PRI triggerNote(channel)
0361c                 | _trackerplayer_spin2_triggerNote
0361c     2D 2F 02 F6 | 	mov	_var01, arg01
03620     02 2E 66 F0 | 	shl	_var01, #2
03624     47 0F 06 F1 | 	add	objptr, #327
03628     07 2F 02 F1 | 	add	_var01, objptr
0362c     2D 31 02 F6 | 	mov	_var02, arg01
03630     90 0E 86 F1 | 	sub	objptr, #144
03634                 | ' 
03634                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
03634     17 33 02 FB | 	rdlong	_var03, _var01
03638     07 31 02 F1 | 	add	_var02, objptr
0363c     18 33 42 FC | 	wrbyte	_var03, _var02
03640     2D 35 02 F6 | 	mov	_var04, arg01
03644     02 34 66 F0 | 	shl	_var04, #2
03648     80 0E 06 F1 | 	add	objptr, #128
0364c     07 35 02 F1 | 	add	_var04, objptr
03650     2D 37 02 F6 | 	mov	_var05, arg01
03654     02 36 66 F0 | 	shl	_var05, #2
03658     90 0E 86 F1 | 	sub	objptr, #144
0365c                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
0365c     1A 33 02 FB | 	rdlong	_var03, _var04
03660     07 37 02 F1 | 	add	_var05, objptr
03664     1B 33 62 FC | 	wrlong	_var03, _var05
03668     2D 39 02 F6 | 	mov	_var06, arg01
0366c     02 38 66 F0 | 	shl	_var06, #2
03670     80 0E 06 F1 | 	add	objptr, #128
03674     07 39 02 F1 | 	add	_var06, objptr
03678     2D 3B 02 F6 | 	mov	_var07, arg01
0367c     02 3A 66 F0 | 	shl	_var07, #2
03680     48 0E 86 F1 | 	sub	objptr, #72
03684                 | '   currPeriod[channel]       := lastSetPeriod[channel]
03684     1C 33 02 FB | 	rdlong	_var03, _var06
03688     07 3B 02 F1 | 	add	_var07, objptr
0368c     1D 33 62 FC | 	wrlong	_var03, _var07
03690     2D 3D 02 F6 | 	mov	_var08, arg01
03694     02 3C 66 F0 | 	shl	_var08, #2
03698     78 0E 06 F1 | 	add	objptr, #120
0369c     07 3D 02 F1 | 	add	_var08, objptr
036a0     2D 3F 02 F6 | 	mov	_var09, arg01
036a4     01 3E 66 F0 | 	shl	_var09, #1
036a8     9C 0E 86 F1 | 	sub	objptr, #156
036ac                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
036ac     1E 33 02 FB | 	rdlong	_var03, _var08
036b0     07 3F 02 F1 | 	add	_var09, objptr
036b4     1F 33 52 FC | 	wrword	_var03, _var09
036b8     2D 41 02 F6 | 	mov	_var10, arg01
036bc     02 40 66 F0 | 	shl	_var10, #2
036c0     AC 0E 06 F1 | 	add	objptr, #172
036c4     07 41 02 F1 | 	add	_var10, objptr
036c8     2D 43 02 F6 | 	mov	_var11, arg01
036cc     02 42 66 F0 | 	shl	_var11, #2
036d0     A4 0E 86 F1 | 	sub	objptr, #164
036d4                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
036d4     20 33 02 FB | 	rdlong	_var03, _var10
036d8     07 43 02 F1 | 	add	_var11, objptr
036dc     21 33 62 FC | 	wrlong	_var03, _var11
036e0     2D 45 02 F6 | 	mov	_var12, arg01
036e4     02 44 66 F0 | 	shl	_var12, #2
036e8     B4 0E 06 F1 | 	add	objptr, #180
036ec     07 45 02 F1 | 	add	_var12, objptr
036f0     2D 47 02 F6 | 	mov	_var13, arg01
036f4     01 46 66 F0 | 	shl	_var13, #1
036f8     A0 0E 86 F1 | 	sub	objptr, #160
036fc                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
036fc     22 33 02 FB | 	rdlong	_var03, _var12
03700     07 47 02 F1 | 	add	_var13, objptr
03704     23 33 52 FC | 	wrword	_var03, _var13
03708     1F 0F 06 F1 | 	add	objptr, #287
0370c     07 5B 02 F1 | 	add	arg01, objptr
03710     2D 49 C2 FA | 	rdbyte	_var14, arg01
03714     01 48 06 F1 | 	add	_var14, #1
03718                 | '   trigger[channel]+=1
03718     2D 49 42 FC | 	wrbyte	_var14, arg01
0371c     F6 0F 86 F1 | 	sub	objptr, #502
03720                 | _trackerplayer_spin2_triggerNote_ret
03720     2D 00 64 FD | 	ret
03724                 | 
03724                 | ' 
03724                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
03724                 | _trackerplayer_spin2_processChannel
03724     33 5A 05 F6 | 	mov	COUNT_, #51
03728     B0 00 A0 FD | 	call	#pushregs_
0372c     D8 F0 07 F1 | 	add	ptra, #216
03730     AF 5A 62 FC | 	wrlong	arg01, fp
03734     04 5E 05 F1 | 	add	fp, #4
03738     AF 5C 62 FC | 	wrlong	arg02, fp
0373c     04 5E 05 F1 | 	add	fp, #4
03740     AF 5E 62 FC | 	wrlong	arg03, fp
03744     04 5E 05 F1 | 	add	fp, #4
03748     AF 60 62 FC | 	wrlong	arg04, fp
0374c     0C 5E 85 F1 | 	sub	fp, #12
03750                 | ' 
03750                 | '   channel := channel & 3
03750     AF 68 02 FB | 	rdlong	local01, fp
03754     03 68 06 F5 | 	and	local01, #3
03758     AF 68 62 FC | 	wrlong	local01, fp
0375c     0C 5E 05 F1 | 	add	fp, #12
03760     AF 6A 02 FB | 	rdlong	local02, fp
03764     08 6A 46 F0 | 	shr	local02, #8
03768     35 6D 02 F6 | 	mov	local03, local02
0376c     0F 6C 06 F5 | 	and	local03, #15
03770                 | '   cmd     := (effect >> 8) & $F
03770     BA 0F 06 F1 | 	add	objptr, #442
03774     07 6D 42 FC | 	wrbyte	local03, objptr
03778     AF 6E 02 FB | 	rdlong	local04, fp
0377c     04 6E 46 F0 | 	shr	local04, #4
03780     37 71 02 F6 | 	mov	local05, local04
03784     0F 70 06 F5 | 	and	local05, #15
03788                 | '   x       := (effect >> 4) & $F
03788     03 0E 86 F1 | 	sub	objptr, #3
0378c     07 71 42 FC | 	wrbyte	local05, objptr
03790     AF 72 02 FB | 	rdlong	local06, fp
03794     0F 72 06 F5 | 	and	local06, #15
03798                 | '   y       := (effect     ) & $F
03798     01 0E 06 F1 | 	add	objptr, #1
0379c     07 73 42 FC | 	wrbyte	local06, objptr
037a0     AF 74 02 FB | 	rdlong	local07, fp
037a4     0C 5E 85 F1 | 	sub	fp, #12
037a8     FF 74 06 F5 | 	and	local07, #255
037ac                 | '   z       := (effect     ) & $FF
037ac     01 0E 06 F1 | 	add	objptr, #1
037b0     07 75 42 FC | 	wrbyte	local07, objptr
037b4                 | ' 
037b4                 | '   ' Handle everything that executes on "tick zero"
037b4                 | '   if tickCounter == 0
037b4     18 0F 86 F1 | 	sub	objptr, #280
037b8     07 69 CA FA | 	rdbyte	local01, objptr wz
037bc     A1 0E 86 F1 | 	sub	objptr, #161
037c0     24 04 90 5D |  if_ne	jmp	#LR__0132
037c4     AF 76 02 FB | 	rdlong	local08, fp
037c8     02 76 66 F0 | 	shl	local08, #2
037cc     EF 0E 06 F1 | 	add	objptr, #239
037d0     07 77 02 F1 | 	add	local08, objptr
037d4                 | ' 
037d4                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
037d4                 | '     deltaPeriod[channel] := 0
037d4     3B 01 68 FC | 	wrlong	#0, local08
037d8     AF 78 02 FB | 	rdlong	local09, fp
037dc     02 78 66 F0 | 	shl	local09, #2
037e0     20 0E 06 F1 | 	add	objptr, #32
037e4     07 79 02 F1 | 	add	local09, objptr
037e8                 | '     deltaVolume[channel] := 0
037e8     3C 01 68 FC | 	wrlong	#0, local09
037ec                 | ' 
037ec                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
037ec                 | '     if sampleNumber > 0
037ec     04 5E 05 F1 | 	add	fp, #4
037f0     AF 68 02 FB | 	rdlong	local01, fp
037f4     04 5E 85 F1 | 	sub	fp, #4
037f8     00 68 5E F2 | 	cmps	local01, #0 wcz
037fc     0F 0F 86 F1 | 	sub	objptr, #271
03800     20 00 90 ED |  if_be	jmp	#LR__0122
03804     AF 7A 02 FB | 	rdlong	local10, fp
03808     E0 0F 06 F1 | 	add	objptr, #480
0380c     07 7B 02 F1 | 	add	local10, objptr
03810                 | '       sampleNumber_memory[channel] := sampleNumber
03810     04 5E 05 F1 | 	add	fp, #4
03814     AF 68 02 FB | 	rdlong	local01, fp
03818     04 5E 85 F1 | 	sub	fp, #4
0381c     3D 69 42 FC | 	wrbyte	local01, local10
03820     E0 0F 86 F1 | 	sub	objptr, #480
03824                 | LR__0122
03824     AF 7C 02 FB | 	rdlong	local11, fp
03828     E0 0F 06 F1 | 	add	objptr, #480
0382c     07 7D 02 F1 | 	add	local11, objptr
03830     20 5E 05 F1 | 	add	fp, #32
03834     AF 7E 02 F6 | 	mov	local12, fp
03838     10 5E 85 F1 | 	sub	fp, #16
0383c     AF 80 02 F6 | 	mov	local13, fp
03840     31 0E 86 F1 | 	sub	objptr, #49
03844     07 83 02 F6 | 	mov	local14, objptr
03848     04 5E 05 F1 | 	add	fp, #4
0384c     AF 84 02 F6 | 	mov	local15, fp
03850     04 5E 05 F1 | 	add	fp, #4
03854     AF 86 02 F6 | 	mov	local16, fp
03858     04 5E 05 F1 | 	add	fp, #4
0385c     AF 88 02 F6 | 	mov	local17, fp
03860                 | ' 
03860                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
03860                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
03860     3E 5B C2 FA | 	rdbyte	arg01, local11
03864     41 61 02 F6 | 	mov	arg04, local14
03868     42 8B 02 F6 | 	mov	local18, local15
0386c     43 8D 02 F6 | 	mov	local19, local16
03870     44 8F 02 F6 | 	mov	local20, local17
03874     3F 5D 02 F6 | 	mov	arg02, local12
03878     40 5F 02 F6 | 	mov	arg03, local13
0387c     45 63 02 F6 | 	mov	arg05, local18
03880     46 65 02 F6 | 	mov	arg06, local19
03884     47 67 02 F6 | 	mov	arg07, local20
03888     AF 0F 86 F1 | 	sub	objptr, #431
0388c     1C 5E 85 F1 | 	sub	fp, #28
03890     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
03894                 | ' 
03894                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
03894                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
03894                 | '     if sampleNumber > 0
03894     04 5E 05 F1 | 	add	fp, #4
03898     AF 68 02 FB | 	rdlong	local01, fp
0389c     04 5E 85 F1 | 	sub	fp, #4
038a0     00 68 5E F2 | 	cmps	local01, #0 wcz
038a4     24 00 90 ED |  if_be	jmp	#LR__0123
038a8     AF 90 02 FB | 	rdlong	local21, fp
038ac     02 90 66 F0 | 	shl	local21, #2
038b0     FF 0E 06 F1 | 	add	objptr, #255
038b4     07 91 02 F1 | 	add	local21, objptr
038b8                 | '       currVolume[channel] := volume
038b8     14 5E 05 F1 | 	add	fp, #20
038bc     AF 68 02 FB | 	rdlong	local01, fp
038c0     14 5E 85 F1 | 	sub	fp, #20
038c4     48 69 62 FC | 	wrlong	local01, local21
038c8     FF 0E 86 F1 | 	sub	objptr, #255
038cc                 | LR__0123
038cc                 | ' 
038cc                 | '     ' Handle all commands that executes on "zero tick"
038cc                 | '     sampleOffset := 0
038cc     B3 0F 06 F1 | 	add	objptr, #435
038d0     07 01 68 FC | 	wrlong	#0, objptr
038d4     B3 0F 86 F1 | 	sub	objptr, #435
038d8                 | '     handleZeroTickCommands(channel)
038d8     AF 5A 02 FB | 	rdlong	arg01, fp
038dc     94 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
038e0                 | ' 
038e0                 | '     ' Prepare sample data for triggering (now or later)
038e0                 | '     if period > 0
038e0     08 5E 05 F1 | 	add	fp, #8
038e4     AF 68 02 FB | 	rdlong	local01, fp
038e8     08 5E 85 F1 | 	sub	fp, #8
038ec     00 68 5E F2 | 	cmps	local01, #0 wcz
038f0     FC 02 90 ED |  if_be	jmp	#LR__0133
038f4     08 5E 05 F1 | 	add	fp, #8
038f8     AF 92 02 F6 | 	mov	local22, fp
038fc                 | ' 
038fc                 | '       retunePeriod(@period, fineTune)
038fc     AF 0F 06 F1 | 	add	objptr, #431
03900     07 5D 02 FB | 	rdlong	arg02, objptr
03904     AF 0F 86 F1 | 	sub	objptr, #431
03908     49 5B 02 F6 | 	mov	arg01, local22
0390c     08 5E 85 F1 | 	sub	fp, #8
03910     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
03914     AF 94 02 FB | 	rdlong	local23, fp
03918     D3 0E 06 F1 | 	add	objptr, #211
0391c     07 95 02 F1 | 	add	local23, objptr
03920                 | '       currFineTune[channel]        := fineTune
03920     DC 0E 06 F1 | 	add	objptr, #220
03924     07 69 02 FB | 	rdlong	local01, objptr
03928     4A 69 42 FC | 	wrbyte	local01, local23
0392c     AF 96 02 FB | 	rdlong	local24, fp
03930     4B 99 02 F6 | 	mov	local25, local24
03934     01 98 66 F0 | 	shl	local25, #1
03938     05 00 00 FF 
0393c     A4 27 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
03940     13 99 02 F1 | 	add	local25, ptr__trackerplayer_spin2_dat__
03944     01 96 66 F0 | 	shl	local24, #1
03948     90 0E 86 F1 | 	sub	objptr, #144
0394c                 | '       currPanning[channel]         := panningLut[channel]
0394c     4C 69 E2 FA | 	rdword	local01, local25
03950     07 97 02 F1 | 	add	local24, objptr
03954     4B 69 52 FC | 	wrword	local01, local24
03958     AF 9A 02 FB | 	rdlong	local26, fp
0395c     02 9A 66 F0 | 	shl	local26, #2
03960     08 0E 06 F1 | 	add	objptr, #8
03964     07 9B 02 F1 | 	add	local26, objptr
03968                 | '       lastSetPeriod[channel]       := period
03968     08 5E 05 F1 | 	add	fp, #8
0396c     AF 68 02 FB | 	rdlong	local01, fp
03970     4D 69 62 FC | 	wrlong	local01, local26
03974     08 5E 85 F1 | 	sub	fp, #8
03978     AF 9C 02 FB | 	rdlong	local27, fp
0397c     02 9C 66 F0 | 	shl	local27, #2
03980     40 0E 06 F1 | 	add	objptr, #64
03984     07 9D 02 F1 | 	add	local27, objptr
03988                 | '       lastSetRepeatLength[channel] := repeatLength
03988     1C 5E 05 F1 | 	add	fp, #28
0398c     AF 68 02 FB | 	rdlong	local01, fp
03990     4E 69 62 FC | 	wrlong	local01, local27
03994     1C 5E 85 F1 | 	sub	fp, #28
03998     AF 9E 02 FB | 	rdlong	local28, fp
0399c     02 9E 66 F0 | 	shl	local28, #2
039a0     10 0E 06 F1 | 	add	objptr, #16
039a4     07 9F 02 F1 | 	add	local28, objptr
039a8                 | '       lastSetRepeatPoint[channel]  := repeatPoint
039a8     18 5E 05 F1 | 	add	fp, #24
039ac     AF 68 02 FB | 	rdlong	local01, fp
039b0     4F 69 62 FC | 	wrlong	local01, local28
039b4     08 5E 05 F1 | 	add	fp, #8
039b8     AF A0 02 FB | 	rdlong	local29, fp
039bc     20 5E 85 F1 | 	sub	fp, #32
039c0     3C 0E 06 F1 | 	add	objptr, #60
039c4     07 A3 02 FB | 	rdlong	local30, objptr
039c8     51 A1 02 F1 | 	add	local29, local30
039cc     AF A4 02 FB | 	rdlong	local31, fp
039d0     02 A4 66 F0 | 	shl	local31, #2
039d4     7C 0E 86 F1 | 	sub	objptr, #124
039d8     07 A5 02 F1 | 	add	local31, objptr
039dc                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
039dc     52 A1 62 FC | 	wrlong	local29, local31
039e0     AF A6 02 FB | 	rdlong	local32, fp
039e4     02 A6 66 F0 | 	shl	local32, #2
039e8     10 0E 06 F1 | 	add	objptr, #16
039ec     07 A7 02 F1 | 	add	local32, objptr
039f0                 | '       lastSetSampleNr[channel]     := sampleNumber
039f0     04 5E 05 F1 | 	add	fp, #4
039f4     AF 68 02 FB | 	rdlong	local01, fp
039f8     53 69 62 FC | 	wrlong	local01, local32
039fc                 | ' 
039fc                 | '       ' This calculates the correct sample length in all situations
039fc                 | '       if repeatLength > 2
039fc     18 5E 05 F1 | 	add	fp, #24
03a00     AF 68 02 FB | 	rdlong	local01, fp
03a04     1C 5E 85 F1 | 	sub	fp, #28
03a08     02 68 5E F2 | 	cmps	local01, #2 wcz
03a0c     05 00 00 FF 
03a10     A4 27 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
03a14     47 0F 86 F1 | 	sub	objptr, #327
03a18     20 00 90 ED |  if_be	jmp	#LR__0124
03a1c     18 5E 05 F1 | 	add	fp, #24
03a20     AF A8 02 FB | 	rdlong	local33, fp
03a24     04 5E 05 F1 | 	add	fp, #4
03a28     AF A2 02 FB | 	rdlong	local30, fp
03a2c     51 A9 02 F1 | 	add	local33, local30
03a30                 | '         sampleLength := repeatPoint + repeatLength
03a30     0C 5E 85 F1 | 	sub	fp, #12
03a34     AF A8 62 FC | 	wrlong	local33, fp
03a38     10 5E 85 F1 | 	sub	fp, #16
03a3c                 | LR__0124
03a3c                 | ' 
03a3c                 | '       if sampleLength - sampleOffset < 1
03a3c     10 5E 05 F1 | 	add	fp, #16
03a40     AF 68 02 FB | 	rdlong	local01, fp
03a44     10 5E 85 F1 | 	sub	fp, #16
03a48     B3 0F 06 F1 | 	add	objptr, #435
03a4c     07 A3 02 FB | 	rdlong	local30, objptr
03a50     B3 0F 86 F1 | 	sub	objptr, #435
03a54     51 69 82 F1 | 	sub	local01, local30
03a58     01 68 5E F2 | 	cmps	local01, #1 wcz
03a5c     1C 00 90 3D |  if_ae	jmp	#LR__0125
03a60     AF AA 02 FB | 	rdlong	local34, fp
03a64     02 AA 66 F0 | 	shl	local34, #2
03a68     57 0F 06 F1 | 	add	objptr, #343
03a6c     07 AB 02 F1 | 	add	local34, objptr
03a70                 | '         lastSetSampleLength[channel] := 1
03a70     55 03 68 FC | 	wrlong	#1, local34
03a74                 | '       else
03a74     57 0F 86 F1 | 	sub	objptr, #343
03a78     30 00 90 FD | 	jmp	#LR__0126
03a7c                 | LR__0125
03a7c     10 5E 05 F1 | 	add	fp, #16
03a80     AF AC 02 FB | 	rdlong	local35, fp
03a84     10 5E 85 F1 | 	sub	fp, #16
03a88     B3 0F 06 F1 | 	add	objptr, #435
03a8c     07 A3 02 FB | 	rdlong	local30, objptr
03a90     51 AD 82 F1 | 	sub	local35, local30
03a94     AF AE 02 FB | 	rdlong	local36, fp
03a98     02 AE 66 F0 | 	shl	local36, #2
03a9c     5C 0E 86 F1 | 	sub	objptr, #92
03aa0     07 AF 02 F1 | 	add	local36, objptr
03aa4                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
03aa4     57 AD 62 FC | 	wrlong	local35, local36
03aa8     57 0F 86 F1 | 	sub	objptr, #343
03aac                 | LR__0126
03aac                 | ' 
03aac                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
03aac                 | '       if sampleOffset > sampleLength
03aac     B3 0F 06 F1 | 	add	objptr, #435
03ab0     07 69 02 FB | 	rdlong	local01, objptr
03ab4     B3 0F 86 F1 | 	sub	objptr, #435
03ab8     10 5E 05 F1 | 	add	fp, #16
03abc     AF A2 02 FB | 	rdlong	local30, fp
03ac0     10 5E 85 F1 | 	sub	fp, #16
03ac4     51 69 5A F2 | 	cmps	local01, local30 wcz
03ac8     50 00 90 ED |  if_be	jmp	#LR__0127
03acc     20 5E 05 F1 | 	add	fp, #32
03ad0     AF B0 02 FB | 	rdlong	local37, fp
03ad4     08 5E 85 F1 | 	sub	fp, #8
03ad8     AF A2 02 FB | 	rdlong	local30, fp
03adc     18 5E 85 F1 | 	sub	fp, #24
03ae0     51 B1 02 F1 | 	add	local37, local30
03ae4     AF B2 02 FB | 	rdlong	local38, fp
03ae8     02 B2 66 F0 | 	shl	local38, #2
03aec     37 0F 06 F1 | 	add	objptr, #311
03af0     07 B3 02 F1 | 	add	local38, objptr
03af4                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
03af4     59 B1 62 FC | 	wrlong	local37, local38
03af8     AF B4 02 FB | 	rdlong	local39, fp
03afc     02 B4 66 F0 | 	shl	local39, #2
03b00     20 0E 06 F1 | 	add	objptr, #32
03b04     07 B5 02 F1 | 	add	local39, objptr
03b08                 | '         lastSetSampleLength[channel] := repeatLength
03b08     1C 5E 05 F1 | 	add	fp, #28
03b0c     AF 68 02 FB | 	rdlong	local01, fp
03b10     1C 5E 85 F1 | 	sub	fp, #28
03b14     5A 69 62 FC | 	wrlong	local01, local39
03b18     57 0F 86 F1 | 	sub	objptr, #343
03b1c                 | LR__0127
03b1c                 | ' 
03b1c                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
03b1c                 | '       ifnot cmd == $3 || cmd == $5
03b1c     BA 0F 06 F1 | 	add	objptr, #442
03b20     07 69 C2 FA | 	rdbyte	local01, objptr
03b24     BA 0F 86 F1 | 	sub	objptr, #442
03b28     03 68 0E F2 | 	cmp	local01, #3 wz
03b2c     54 00 90 AD |  if_e	jmp	#LR__0130
03b30     BA 0F 06 F1 | 	add	objptr, #442
03b34     07 B7 C2 FA | 	rdbyte	local40, objptr
03b38     BA 0F 86 F1 | 	sub	objptr, #442
03b3c     5B A3 02 F6 | 	mov	local30, local40
03b40     05 A2 0E F2 | 	cmp	local30, #5 wz
03b44     3C 00 90 AD |  if_e	jmp	#LR__0130
03b48                 | '         ifnot cmd == $E && x == $D
03b48     BA 0F 06 F1 | 	add	objptr, #442
03b4c     07 B9 C2 FA | 	rdbyte	local41, objptr
03b50     BA 0F 86 F1 | 	sub	objptr, #442
03b54     5C 69 02 F6 | 	mov	local01, local41
03b58     0E 68 0E F2 | 	cmp	local01, #14 wz
03b5c     18 00 90 5D |  if_ne	jmp	#LR__0128
03b60     B7 0F 06 F1 | 	add	objptr, #439
03b64     07 B7 C2 FA | 	rdbyte	local40, objptr
03b68     B7 0F 86 F1 | 	sub	objptr, #439
03b6c     5B A3 02 F6 | 	mov	local30, local40
03b70     0D A2 0E F2 | 	cmp	local30, #13 wz
03b74     0C 00 90 AD |  if_e	jmp	#LR__0129
03b78                 | LR__0128
03b78                 | '           triggerNote(channel)
03b78     AF 68 02 FB | 	rdlong	local01, fp
03b7c     34 5B 02 F6 | 	mov	arg01, local01
03b80     98 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
03b84                 | LR__0129
03b84                 | LR__0130
03b84                 | ' 
03b84                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
03b84                 | '       if resetTremolo[channel] > 0
03b84     AF 68 02 FB | 	rdlong	local01, fp
03b88     8F 0F 06 F1 | 	add	objptr, #399
03b8c     07 69 02 F1 | 	add	local01, objptr
03b90     34 A3 C2 FA | 	rdbyte	local30, local01
03b94     00 A2 5E F2 | 	cmps	local30, #0 wcz
03b98     8F 0F 86 F1 | 	sub	objptr, #399
03b9c     14 00 90 ED |  if_be	jmp	#LR__0131
03ba0     AF BA 02 FB | 	rdlong	local42, fp
03ba4     8B 0F 06 F1 | 	add	objptr, #395
03ba8     07 BB 02 F1 | 	add	local42, objptr
03bac                 | '         tremoloPos[channel] := 0
03bac     5D 01 48 FC | 	wrbyte	#0, local42
03bb0     8B 0F 86 F1 | 	sub	objptr, #395
03bb4                 | LR__0131
03bb4                 | ' 
03bb4                 | '       if resetVibrato[channel] > 0
03bb4     AF 68 02 FB | 	rdlong	local01, fp
03bb8     93 0F 06 F1 | 	add	objptr, #403
03bbc     07 69 02 F1 | 	add	local01, objptr
03bc0     34 A3 C2 FA | 	rdbyte	local30, local01
03bc4     00 A2 5E F2 | 	cmps	local30, #0 wcz
03bc8     93 0F 86 F1 | 	sub	objptr, #403
03bcc     20 00 90 ED |  if_be	jmp	#LR__0133
03bd0     AF BC 02 FB | 	rdlong	local43, fp
03bd4     87 0F 06 F1 | 	add	objptr, #391
03bd8     07 BD 02 F1 | 	add	local43, objptr
03bdc                 | '         vibratoPos[channel] := 0
03bdc     5E 01 48 FC | 	wrbyte	#0, local43
03be0     87 0F 86 F1 | 	sub	objptr, #391
03be4                 | ' 
03be4                 | '   else
03be4     08 00 90 FD | 	jmp	#LR__0133
03be8                 | LR__0132
03be8                 | '     ' Handle commands that executes on all "non zero ticks"
03be8                 | '     handleNonZeroTickCommands(channel)
03be8     AF 5A 02 FB | 	rdlong	arg01, fp
03bec     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
03bf0                 | LR__0133
03bf0                 | ' 
03bf0                 | '   ' Handle commands that executes on every tick
03bf0                 | '   handleEveryTickCommands(channel)
03bf0     AF 5A 02 FB | 	rdlong	arg01, fp
03bf4     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
03bf8     AF BE 02 FB | 	rdlong	local44, fp
03bfc     02 BE 66 F0 | 	shl	local44, #2
03c00     DF 0E 06 F1 | 	add	objptr, #223
03c04     07 BF 02 F1 | 	add	local44, objptr
03c08     5F C1 02 FB | 	rdlong	local45, local44
03c0c     01 00 00 FF 
03c10     58 C1 66 F3 | 	fles	local45, ##856
03c14                 | ' 
03c14                 | '   ' Handle boundaries that should be kept
03c14                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
03c14     5F C1 62 FC | 	wrlong	local45, local44
03c18     AF C2 02 FB | 	rdlong	local46, fp
03c1c     02 C2 66 F0 | 	shl	local46, #2
03c20     07 C3 02 F1 | 	add	local46, objptr
03c24     61 C5 02 FB | 	rdlong	local47, local46
03c28     71 C4 46 F3 | 	fges	local47, #113
03c2c                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
03c2c     61 C5 62 FC | 	wrlong	local47, local46
03c30     AF C6 02 FB | 	rdlong	local48, fp
03c34     02 C6 66 F0 | 	shl	local48, #2
03c38     20 0E 06 F1 | 	add	objptr, #32
03c3c     07 C7 02 F1 | 	add	local48, objptr
03c40     63 C9 02 FB | 	rdlong	local49, local48
03c44     40 C8 66 F3 | 	fles	local49, #64
03c48                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
03c48     63 C9 62 FC | 	wrlong	local49, local48
03c4c     AF CA 02 FB | 	rdlong	local50, fp
03c50     02 CA 66 F0 | 	shl	local50, #2
03c54     07 CB 02 F1 | 	add	local50, objptr
03c58     65 CD 02 FB | 	rdlong	local51, local50
03c5c     00 CC 46 F3 | 	fges	local51, #0
03c60                 | '   currVolume[channel] #>= MINIMUM_VOLUME
03c60     65 CD 62 FC | 	wrlong	local51, local50
03c64     FF 0E 86 F1 | 	sub	objptr, #255
03c68     AF F0 03 F6 | 	mov	ptra, fp
03c6c     BF 00 A0 FD | 	call	#popregs_
03c70                 | _trackerplayer_spin2_processChannel_ret
03c70     2D 00 64 FD | 	ret
03c74                 | 
03c74                 | ' 
03c74                 | ' 
03c74                 | ' ' Handle all commands that executes on tick zero
03c74                 | ' '
03c74                 | ' PRI handleZeroTickCommands(channel)
03c74                 | _trackerplayer_spin2_handleZeroTickCommands
03c74     2D 2F 02 F6 | 	mov	_var01, arg01
03c78                 | ' 
03c78                 | '   CASE_FAST cmd
03c78     BA 0F 06 F1 | 	add	objptr, #442
03c7c     07 31 C2 FA | 	rdbyte	_var02, objptr
03c80     BA 0F 86 F1 | 	sub	objptr, #442
03c84     18 33 02 F6 | 	mov	_var03, _var02
03c88     09 32 86 F1 | 	sub	_var03, #9
03c8c     07 32 26 F3 | 	fle	_var03, #7
03c90     19 35 02 F6 | 	mov	_var04, _var03
03c94     30 34 62 FD | 	jmprel	_var04
03c98                 | LR__0134
03c98     1C 00 90 FD | 	jmp	#LR__0135
03c9c     30 04 90 FD | 	jmp	#LR__0158
03ca0     64 00 90 FD | 	jmp	#LR__0137
03ca4     84 00 90 FD | 	jmp	#LR__0138
03ca8     A0 00 90 FD | 	jmp	#LR__0139
03cac     D0 00 90 FD | 	jmp	#LR__0140
03cb0     9C 03 90 FD | 	jmp	#LR__0155
03cb4     18 04 90 FD | 	jmp	#LR__0158
03cb8                 | LR__0135
03cb8                 | ' 
03cb8                 | '     $9:                          ' Set sample offset
03cb8                 | '       if z > 0
03cb8     B9 0F 06 F1 | 	add	objptr, #441
03cbc     07 37 C2 FA | 	rdbyte	_var05, objptr
03cc0     B9 0F 86 F1 | 	sub	objptr, #441
03cc4     00 36 5E F2 | 	cmps	_var05, #0 wcz
03cc8     1C 00 90 ED |  if_be	jmp	#LR__0136
03ccc                 | '         cmd9_memoryZ[channel] := z
03ccc     17 37 02 F6 | 	mov	_var05, _var01
03cd0     DC 0F 06 F1 | 	add	objptr, #476
03cd4     07 37 02 F1 | 	add	_var05, objptr
03cd8     23 0E 86 F1 | 	sub	objptr, #35
03cdc     07 39 C2 FA | 	rdbyte	_var06, objptr
03ce0     B9 0F 86 F1 | 	sub	objptr, #441
03ce4     1B 39 42 FC | 	wrbyte	_var06, _var05
03ce8                 | LR__0136
03ce8                 | ' 
03ce8                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
03ce8     DC 0F 06 F1 | 	add	objptr, #476
03cec     07 2F 02 F1 | 	add	_var01, objptr
03cf0     17 37 C2 FA | 	rdbyte	_var05, _var01
03cf4     08 36 66 F0 | 	shl	_var05, #8
03cf8     29 0E 86 F1 | 	sub	objptr, #41
03cfc     07 37 62 FC | 	wrlong	_var05, objptr
03d00     B3 0F 86 F1 | 	sub	objptr, #435
03d04     C8 03 90 FD | 	jmp	#LR__0158
03d08                 | LR__0137
03d08                 | ' 
03d08                 | '     $B:                          ' Jump position
03d08                 | '       cmdB_memoryZ := z
03d08     B9 0F 06 F1 | 	add	objptr, #441
03d0c     07 37 C2 FA | 	rdbyte	_var05, objptr
03d10     2E 0E 06 F1 | 	add	objptr, #46
03d14     07 37 42 FC | 	wrbyte	_var05, objptr
03d18                 | '       cmdB_updatePosition := true
03d18     01 0E 06 F1 | 	add	objptr, #1
03d1c     FF FF FF FF 
03d20     07 FF 4B FC | 	wrbyte	##-1, objptr
03d24     E8 0F 86 F1 | 	sub	objptr, #488
03d28     A4 03 90 FD | 	jmp	#LR__0158
03d2c                 | LR__0138
03d2c                 | ' 
03d2c                 | '     $C:                          ' Set volume
03d2c                 | '       currVolume[channel] := z
03d2c     02 2E 66 F0 | 	shl	_var01, #2
03d30     FF 0E 06 F1 | 	add	objptr, #255
03d34     07 2F 02 F1 | 	add	_var01, objptr
03d38     BA 0E 06 F1 | 	add	objptr, #186
03d3c     07 39 C2 FA | 	rdbyte	_var06, objptr
03d40     B9 0F 86 F1 | 	sub	objptr, #441
03d44     17 39 62 FC | 	wrlong	_var06, _var01
03d48     84 03 90 FD | 	jmp	#LR__0158
03d4c                 | LR__0139
03d4c                 | ' 
03d4c                 | '     $D:                          ' Pattern break
03d4c                 | '       cmdD_memoryX := x
03d4c     B7 0F 06 F1 | 	add	objptr, #439
03d50     07 37 C2 FA | 	rdbyte	_var05, objptr
03d54     2D 0E 06 F1 | 	add	objptr, #45
03d58     07 37 42 FC | 	wrbyte	_var05, objptr
03d5c                 | '       cmdD_memoryY := y
03d5c     2C 0E 86 F1 | 	sub	objptr, #44
03d60     07 37 C2 FA | 	rdbyte	_var05, objptr
03d64     2D 0E 06 F1 | 	add	objptr, #45
03d68     07 37 42 FC | 	wrbyte	_var05, objptr
03d6c                 | '       cmdD_updatePosition := true
03d6c     01 0E 06 F1 | 	add	objptr, #1
03d70     FF FF FF FF 
03d74     07 FF 4B FC | 	wrbyte	##-1, objptr
03d78     E6 0F 86 F1 | 	sub	objptr, #486
03d7c     50 03 90 FD | 	jmp	#LR__0158
03d80                 | LR__0140
03d80                 | ' 
03d80                 | '     $E:                          ' Handle "E commands" that execute on tick zero
03d80                 | ' 
03d80                 | '       CASE_FAST x
03d80     B7 0F 06 F1 | 	add	objptr, #439
03d84     07 3B C2 FA | 	rdbyte	_var07, objptr
03d88     B7 0F 86 F1 | 	sub	objptr, #439
03d8c     1D 37 02 F6 | 	mov	_var05, _var07
03d90     0F 36 26 F3 | 	fle	_var05, #15
03d94     1B 3D 02 F6 | 	mov	_var08, _var05
03d98     30 3C 62 FD | 	jmprel	_var08
03d9c                 | LR__0141
03d9c     3C 00 90 FD | 	jmp	#LR__0142
03da0     58 00 90 FD | 	jmp	#LR__0143
03da4     8C 00 90 FD | 	jmp	#LR__0144
03da8     C0 00 90 FD | 	jmp	#LR__0145
03dac     DC 00 90 FD | 	jmp	#LR__0146
03db0     14 01 90 FD | 	jmp	#LR__0147
03db4     28 01 90 FD | 	jmp	#LR__0148
03db8     C0 01 90 FD | 	jmp	#LR__0151
03dbc     10 03 90 FD | 	jmp	#LR__0158
03dc0     0C 03 90 FD | 	jmp	#LR__0158
03dc4     F0 01 90 FD | 	jmp	#LR__0152
03dc8     24 02 90 FD | 	jmp	#LR__0153
03dcc     00 03 90 FD | 	jmp	#LR__0158
03dd0     FC 02 90 FD | 	jmp	#LR__0158
03dd4     50 02 90 FD | 	jmp	#LR__0154
03dd8     F4 02 90 FD | 	jmp	#LR__0158
03ddc                 | LR__0142
03ddc                 | ' 
03ddc                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
03ddc     B8 0F 06 F1 | 	add	objptr, #440
03de0     07 39 C2 FA | 	rdbyte	_var06, objptr
03de4     1C 39 22 F6 | 	not	_var06, _var06
03de8     01 38 06 F5 | 	and	_var06, #1
03dec     03 0E 06 F1 | 	add	objptr, #3
03df0     07 39 42 FC | 	wrbyte	_var06, objptr
03df4     BB 0F 86 F1 | 	sub	objptr, #443
03df8     D4 02 90 FD | 	jmp	#LR__0158
03dfc                 | LR__0143
03dfc                 | ' 
03dfc                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
03dfc     17 3F 02 F6 | 	mov	_var09, _var01
03e00     02 3E 66 F0 | 	shl	_var09, #2
03e04     DF 0E 06 F1 | 	add	objptr, #223
03e08     07 3F 02 F1 | 	add	_var09, objptr
03e0c     1F 39 02 FB | 	rdlong	_var06, _var09
03e10     D9 0E 06 F1 | 	add	objptr, #217
03e14     07 41 C2 FA | 	rdbyte	_var10, objptr
03e18     20 39 82 F1 | 	sub	_var06, _var10
03e1c     02 2E 66 F0 | 	shl	_var01, #2
03e20     D9 0E 86 F1 | 	sub	objptr, #217
03e24     07 2F 02 F1 | 	add	_var01, objptr
03e28     17 39 62 FC | 	wrlong	_var06, _var01
03e2c     DF 0E 86 F1 | 	sub	objptr, #223
03e30     9C 02 90 FD | 	jmp	#LR__0158
03e34                 | LR__0144
03e34                 | ' 
03e34                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
03e34     17 3F 02 F6 | 	mov	_var09, _var01
03e38     02 3E 66 F0 | 	shl	_var09, #2
03e3c     DF 0E 06 F1 | 	add	objptr, #223
03e40     07 3F 02 F1 | 	add	_var09, objptr
03e44     1F 39 02 FB | 	rdlong	_var06, _var09
03e48     D9 0E 06 F1 | 	add	objptr, #217
03e4c     07 41 C2 FA | 	rdbyte	_var10, objptr
03e50     20 39 02 F1 | 	add	_var06, _var10
03e54     02 2E 66 F0 | 	shl	_var01, #2
03e58     D9 0E 86 F1 | 	sub	objptr, #217
03e5c     07 2F 02 F1 | 	add	_var01, objptr
03e60     17 39 62 FC | 	wrlong	_var06, _var01
03e64     DF 0E 86 F1 | 	sub	objptr, #223
03e68     64 02 90 FD | 	jmp	#LR__0158
03e6c                 | LR__0145
03e6c                 | ' 
03e6c                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
03e6c     B8 0F 06 F1 | 	add	objptr, #440
03e70     07 39 C2 FA | 	rdbyte	_var06, objptr
03e74     01 38 06 F5 | 	and	_var06, #1
03e78     04 0E 06 F1 | 	add	objptr, #4
03e7c     07 2F 02 F1 | 	add	_var01, objptr
03e80     17 39 42 FC | 	wrbyte	_var06, _var01
03e84     BC 0F 86 F1 | 	sub	objptr, #444
03e88     44 02 90 FD | 	jmp	#LR__0158
03e8c                 | LR__0146
03e8c                 | ' 
03e8c                 | '         $4:                                      ' Set vibrato waveform type
03e8c                 | '           vibratoType[channel]  := y & 3
03e8c     B8 0F 06 F1 | 	add	objptr, #440
03e90     07 39 C2 FA | 	rdbyte	_var06, objptr
03e94     03 38 06 F5 | 	and	_var06, #3
03e98     17 43 02 F6 | 	mov	_var11, _var01
03e9c     08 0E 06 F1 | 	add	objptr, #8
03ea0     07 43 02 F1 | 	add	_var11, objptr
03ea4     21 39 42 FC | 	wrbyte	_var06, _var11
03ea8                 | '           resetVibrato[channel] := y & 4
03ea8     08 0E 86 F1 | 	sub	objptr, #8
03eac     07 39 C2 FA | 	rdbyte	_var06, objptr
03eb0     04 38 06 F5 | 	and	_var06, #4
03eb4     25 0E 86 F1 | 	sub	objptr, #37
03eb8     07 2F 02 F1 | 	add	_var01, objptr
03ebc     17 39 42 FC | 	wrbyte	_var06, _var01
03ec0     93 0F 86 F1 | 	sub	objptr, #403
03ec4     08 02 90 FD | 	jmp	#LR__0158
03ec8                 | LR__0147
03ec8                 | ' 
03ec8                 | '         $5: fineTune := y                        ' Set finetune
03ec8     B8 0F 06 F1 | 	add	objptr, #440
03ecc     07 39 C2 FA | 	rdbyte	_var06, objptr
03ed0     09 0E 86 F1 | 	sub	objptr, #9
03ed4     07 39 62 FC | 	wrlong	_var06, objptr
03ed8     AF 0F 86 F1 | 	sub	objptr, #431
03edc     F0 01 90 FD | 	jmp	#LR__0158
03ee0                 | LR__0148
03ee0                 | ' 
03ee0                 | '         $6:                                      ' Pattern looping
03ee0                 | '           if y == 0
03ee0     B8 0F 06 F1 | 	add	objptr, #440
03ee4     07 39 CA FA | 	rdbyte	_var06, objptr wz
03ee8     B8 0F 86 F1 | 	sub	objptr, #440
03eec     1C 00 90 5D |  if_ne	jmp	#LR__0149
03ef0                 | '             cmdE6_memory[channel] := patternRow
03ef0     E9 0F 06 F1 | 	add	objptr, #489
03ef4     07 2F 02 F1 | 	add	_var01, objptr
03ef8     47 0F 86 F1 | 	sub	objptr, #327
03efc     07 43 C2 FA | 	rdbyte	_var11, objptr
03f00     A2 0E 86 F1 | 	sub	objptr, #162
03f04     17 43 42 FC | 	wrbyte	_var11, _var01
03f08                 | '           else
03f08     C4 01 90 FD | 	jmp	#LR__0158
03f0c                 | LR__0149
03f0c                 | '             if ++cmdE6_counter[channel] <= y
03f0c     17 3F 02 F6 | 	mov	_var09, _var01
03f10     ED 0F 06 F1 | 	add	objptr, #493
03f14     07 3F 02 F1 | 	add	_var09, objptr
03f18     1F 39 C2 FA | 	rdbyte	_var06, _var09
03f1c     01 38 06 F1 | 	add	_var06, #1
03f20     17 41 02 F6 | 	mov	_var10, _var01
03f24     07 41 02 F1 | 	add	_var10, objptr
03f28     20 39 42 FC | 	wrbyte	_var06, _var10
03f2c     20 45 C2 FA | 	rdbyte	_var12, _var10
03f30     35 0E 86 F1 | 	sub	objptr, #53
03f34     07 47 C2 FA | 	rdbyte	_var13, objptr
03f38     B8 0F 86 F1 | 	sub	objptr, #440
03f3c     23 45 5A F2 | 	cmps	_var12, _var13 wcz
03f40     24 00 90 1D |  if_a	jmp	#LR__0150
03f44                 | '               cmdE6_updatePosition[channel] := true
03f44     F1 0F 06 F1 | 	add	objptr, #497
03f48     07 2F 02 F1 | 	add	_var01, objptr
03f4c     FF FF FF FF 
03f50     17 FF 4B FC | 	wrbyte	##-1, _var01
03f54                 | '               cmdE6_updatePositionCommon    := true
03f54     04 0E 06 F1 | 	add	objptr, #4
03f58     FF FF FF FF 
03f5c     07 FF 4B FC | 	wrbyte	##-1, objptr
03f60     F5 0F 86 F1 | 	sub	objptr, #501
03f64                 | '             else
03f64     68 01 90 FD | 	jmp	#LR__0158
03f68                 | LR__0150
03f68                 | '               cmdE6_counter[channel] := 0
03f68     ED 0F 06 F1 | 	add	objptr, #493
03f6c     07 2F 02 F1 | 	add	_var01, objptr
03f70     17 01 48 FC | 	wrbyte	#0, _var01
03f74     ED 0F 86 F1 | 	sub	objptr, #493
03f78     54 01 90 FD | 	jmp	#LR__0158
03f7c                 | LR__0151
03f7c                 | ' 
03f7c                 | '         $7:                                      ' Set tremolo waveform type
03f7c                 | '           tremoloType[channel] := y & 3
03f7c     B8 0F 06 F1 | 	add	objptr, #440
03f80     07 39 C2 FA | 	rdbyte	_var06, objptr
03f84     03 38 06 F5 | 	and	_var06, #3
03f88     17 43 02 F6 | 	mov	_var11, _var01
03f8c     0C 0E 06 F1 | 	add	objptr, #12
03f90     07 43 02 F1 | 	add	_var11, objptr
03f94     21 39 42 FC | 	wrbyte	_var06, _var11
03f98                 | '           resetTremolo[channel] := y & 4
03f98     0C 0E 86 F1 | 	sub	objptr, #12
03f9c     07 39 C2 FA | 	rdbyte	_var06, objptr
03fa0     04 38 06 F5 | 	and	_var06, #4
03fa4     29 0E 86 F1 | 	sub	objptr, #41
03fa8     07 2F 02 F1 | 	add	_var01, objptr
03fac     17 39 42 FC | 	wrbyte	_var06, _var01
03fb0     8F 0F 86 F1 | 	sub	objptr, #399
03fb4     18 01 90 FD | 	jmp	#LR__0158
03fb8                 | LR__0152
03fb8                 | ' 
03fb8                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
03fb8     17 3F 02 F6 | 	mov	_var09, _var01
03fbc     02 3E 66 F0 | 	shl	_var09, #2
03fc0     FF 0E 06 F1 | 	add	objptr, #255
03fc4     07 3F 02 F1 | 	add	_var09, objptr
03fc8     1F 39 02 FB | 	rdlong	_var06, _var09
03fcc     B9 0E 06 F1 | 	add	objptr, #185
03fd0     07 41 C2 FA | 	rdbyte	_var10, objptr
03fd4     20 39 02 F1 | 	add	_var06, _var10
03fd8     02 2E 66 F0 | 	shl	_var01, #2
03fdc     B9 0E 86 F1 | 	sub	objptr, #185
03fe0     07 2F 02 F1 | 	add	_var01, objptr
03fe4     17 39 62 FC | 	wrlong	_var06, _var01
03fe8     FF 0E 86 F1 | 	sub	objptr, #255
03fec     E0 00 90 FD | 	jmp	#LR__0158
03ff0                 | LR__0153
03ff0                 | ' 
03ff0                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
03ff0     17 3F 02 F6 | 	mov	_var09, _var01
03ff4     02 3E 66 F0 | 	shl	_var09, #2
03ff8     FF 0E 06 F1 | 	add	objptr, #255
03ffc     07 3F 02 F1 | 	add	_var09, objptr
04000     1F 39 02 FB | 	rdlong	_var06, _var09
04004     B9 0E 06 F1 | 	add	objptr, #185
04008     07 41 C2 FA | 	rdbyte	_var10, objptr
0400c     20 39 82 F1 | 	sub	_var06, _var10
04010     02 2E 66 F0 | 	shl	_var01, #2
04014     B9 0E 86 F1 | 	sub	objptr, #185
04018     07 2F 02 F1 | 	add	_var01, objptr
0401c     17 39 62 FC | 	wrlong	_var06, _var01
04020     FF 0E 86 F1 | 	sub	objptr, #255
04024     A8 00 90 FD | 	jmp	#LR__0158
04028                 | LR__0154
04028                 | ' 
04028                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
04028     B8 0F 06 F1 | 	add	objptr, #440
0402c     07 3F C2 FA | 	rdbyte	_var09, objptr
04030     14 0F 86 F1 | 	sub	objptr, #276
04034     07 41 C2 FA | 	rdbyte	_var10, objptr
04038     20 3F 02 FD | 	qmul	_var09, _var10
0403c     18 38 62 FD | 	getqx	_var06
04040     01 0E 06 F1 | 	add	objptr, #1
04044     07 39 42 FC | 	wrbyte	_var06, objptr
04048     A5 0E 86 F1 | 	sub	objptr, #165
0404c     80 00 90 FD | 	jmp	#LR__0158
04050                 | LR__0155
04050                 | ' 
04050                 | '     $F:                          ' Set speed
04050                 | '       if z < 32
04050     B9 0F 06 F1 | 	add	objptr, #441
04054     07 37 C2 FA | 	rdbyte	_var05, objptr
04058     B9 0F 86 F1 | 	sub	objptr, #441
0405c     20 36 5E F2 | 	cmps	_var05, #32 wcz
04060     18 00 90 3D |  if_ae	jmp	#LR__0156
04064                 | '         currentSongSpeed := z
04064     B9 0F 06 F1 | 	add	objptr, #441
04068     07 37 C2 FA | 	rdbyte	_var05, objptr
0406c     15 0F 86 F1 | 	sub	objptr, #277
04070     07 37 42 FC | 	wrbyte	_var05, objptr
04074     A4 0E 86 F1 | 	sub	objptr, #164
04078                 | '       else
04078     54 00 90 FD | 	jmp	#LR__0157
0407c                 | LR__0156
0407c                 | '         ticksPerMinute := z * 24
0407c     B9 0F 06 F1 | 	add	objptr, #441
04080     07 3B C2 FA | 	rdbyte	_var07, objptr
04084     1D 37 02 F6 | 	mov	_var05, _var07
04088     01 36 66 F0 | 	shl	_var05, #1
0408c     1D 37 02 F1 | 	add	_var05, _var07
04090     03 36 66 F0 | 	shl	_var05, #3
04094     12 0E 86 F1 | 	sub	objptr, #18
04098     07 37 62 FC | 	wrlong	_var05, objptr
0409c     A7 0F 86 F1 | 	sub	objptr, #423
040a0                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
040a0     07 09 03 FB | 	rdlong	muldiva_, objptr
040a4     A7 0F 06 F1 | 	add	objptr, #423
040a8     07 0B 03 FB | 	rdlong	muldivb_, objptr
040ac     A7 0F 86 F1 | 	sub	objptr, #423
040b0     D0 00 A0 FD | 	call	#divide_
040b4     85 39 02 F6 | 	mov	_var06, muldivb_
040b8     04 38 66 F0 | 	shl	_var06, #4
040bc     85 39 82 F1 | 	sub	_var06, muldivb_
040c0     02 38 66 F0 | 	shl	_var06, #2
040c4     AB 0F 06 F1 | 	add	objptr, #427
040c8     07 39 62 FC | 	wrlong	_var06, objptr
040cc     AB 0F 86 F1 | 	sub	objptr, #427
040d0                 | LR__0157
040d0                 | LR__0158
040d0                 | _trackerplayer_spin2_handleZeroTickCommands_ret
040d0     2D 00 64 FD | 	ret
040d4                 | 
040d4                 | ' 
040d4                 | ' 
040d4                 | ' ' Handle all commands that executes on "non zero ticks"
040d4                 | ' '
040d4                 | ' PRI handleNonZeroTickCommands(channel)
040d4                 | _trackerplayer_spin2_handleNonZeroTickCommands
040d4     0A 5A 05 F6 | 	mov	COUNT_, #10
040d8     B0 00 A0 FD | 	call	#pushregs_
040dc     2D 69 02 F6 | 	mov	local01, arg01
040e0                 | ' 
040e0                 | '   CASE_FAST cmd
040e0     BA 0F 06 F1 | 	add	objptr, #442
040e4     07 6B C2 FA | 	rdbyte	local02, objptr
040e8     BA 0F 86 F1 | 	sub	objptr, #442
040ec     35 6D 02 F6 | 	mov	local03, local02
040f0     01 6C 86 F1 | 	sub	local03, #1
040f4     0E 6C 26 F3 | 	fle	local03, #14
040f8     36 6F 02 F6 | 	mov	local04, local03
040fc     30 6E 62 FD | 	jmprel	local04
04100                 | LR__0159
04100     38 00 90 FD | 	jmp	#LR__0160
04104     A0 00 90 FD | 	jmp	#LR__0161
04108     D4 00 90 FD | 	jmp	#LR__0162
0410c     1C 02 90 FD | 	jmp	#LR__0172
04110     20 01 90 FD | 	jmp	#LR__0164
04114     48 01 90 FD | 	jmp	#LR__0165
04118     50 01 90 FD | 	jmp	#LR__0166
0411c     0C 02 90 FD | 	jmp	#LR__0172
04120     08 02 90 FD | 	jmp	#LR__0172
04124     B0 01 90 FD | 	jmp	#LR__0169
04128     00 02 90 FD | 	jmp	#LR__0172
0412c     FC 01 90 FD | 	jmp	#LR__0172
04130     F8 01 90 FD | 	jmp	#LR__0172
04134     AC 01 90 FD | 	jmp	#LR__0170
04138     F0 01 90 FD | 	jmp	#LR__0172
0413c                 | LR__0160
0413c                 | ' 
0413c                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
0413c     34 71 02 F6 | 	mov	local05, local01
04140     02 70 66 F0 | 	shl	local05, #2
04144     DF 0E 06 F1 | 	add	objptr, #223
04148     07 71 02 F1 | 	add	local05, objptr
0414c     38 73 02 FB | 	rdlong	local06, local05
04150     DA 0E 06 F1 | 	add	objptr, #218
04154     07 75 C2 FA | 	rdbyte	local07, objptr
04158     3A 73 82 F1 | 	sub	local06, local07
0415c     34 77 02 F6 | 	mov	local08, local01
04160     02 76 66 F0 | 	shl	local08, #2
04164     DA 0E 86 F1 | 	sub	objptr, #218
04168     07 77 02 F1 | 	add	local08, objptr
0416c     3B 73 62 FC | 	wrlong	local06, local08
04170                 | ' 
04170                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
04170                 | '       if currPeriod[channel] < 0
04170     34 73 02 F6 | 	mov	local06, local01
04174     02 72 66 F0 | 	shl	local06, #2
04178     07 73 02 F1 | 	add	local06, objptr
0417c     39 79 02 FB | 	rdlong	local09, local06
04180     00 78 5E F2 | 	cmps	local09, #0 wcz
04184     DF 0E 86 F1 | 	sub	objptr, #223
04188     A0 01 90 3D |  if_ae	jmp	#LR__0172
0418c                 | '         currPeriod[channel] := MAXIMUM_PERIOD
0418c     02 68 66 F0 | 	shl	local01, #2
04190     DF 0E 06 F1 | 	add	objptr, #223
04194     07 69 02 F1 | 	add	local01, objptr
04198     01 00 80 FF 
0419c     34 B1 6A FC | 	wrlong	##856, local01
041a0     DF 0E 86 F1 | 	sub	objptr, #223
041a4     84 01 90 FD | 	jmp	#LR__0172
041a8                 | LR__0161
041a8                 | ' 
041a8                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
041a8     34 71 02 F6 | 	mov	local05, local01
041ac     02 70 66 F0 | 	shl	local05, #2
041b0     DF 0E 06 F1 | 	add	objptr, #223
041b4     07 71 02 F1 | 	add	local05, objptr
041b8     38 73 02 FB | 	rdlong	local06, local05
041bc     DA 0E 06 F1 | 	add	objptr, #218
041c0     07 75 C2 FA | 	rdbyte	local07, objptr
041c4     3A 73 02 F1 | 	add	local06, local07
041c8     02 68 66 F0 | 	shl	local01, #2
041cc     DA 0E 86 F1 | 	sub	objptr, #218
041d0     07 69 02 F1 | 	add	local01, objptr
041d4     34 73 62 FC | 	wrlong	local06, local01
041d8     DF 0E 86 F1 | 	sub	objptr, #223
041dc     4C 01 90 FD | 	jmp	#LR__0172
041e0                 | LR__0162
041e0                 | ' 
041e0                 | '     $3:                                 ' Slide to note (portamento)
041e0                 | '       if z > 0
041e0     B9 0F 06 F1 | 	add	objptr, #441
041e4     07 73 C2 FA | 	rdbyte	local06, objptr
041e8     B9 0F 86 F1 | 	sub	objptr, #441
041ec     00 72 5E F2 | 	cmps	local06, #0 wcz
041f0     1C 00 90 ED |  if_be	jmp	#LR__0163
041f4                 | '         cmd3_memoryZ[channel] := z
041f4     34 73 02 F6 | 	mov	local06, local01
041f8     C8 0F 06 F1 | 	add	objptr, #456
041fc     07 73 02 F1 | 	add	local06, objptr
04200     0F 0E 86 F1 | 	sub	objptr, #15
04204     07 79 C2 FA | 	rdbyte	local09, objptr
04208     B9 0F 86 F1 | 	sub	objptr, #441
0420c     39 79 42 FC | 	wrbyte	local09, local06
04210                 | LR__0163
04210                 | ' 
04210                 | '       doPortamento(channel, lastSetPeriod[channel])
04210     34 71 02 F6 | 	mov	local05, local01
04214     02 70 66 F0 | 	shl	local05, #2
04218     27 0F 06 F1 | 	add	objptr, #295
0421c     07 71 02 F1 | 	add	local05, objptr
04220     38 5D 02 FB | 	rdlong	arg02, local05
04224     34 5B 02 F6 | 	mov	arg01, local01
04228     27 0F 86 F1 | 	sub	objptr, #295
0422c     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
04230     F8 00 90 FD | 	jmp	#LR__0172
04234                 | LR__0164
04234                 | ' 
04234                 | '     $5:                                 ' Volume slide + portamento
04234                 | '       doVolumeSlide(channel)
04234     34 5B 02 F6 | 	mov	arg01, local01
04238     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0423c                 | '       doPortamento(channel, lastSetPeriod[channel])
0423c     34 71 02 F6 | 	mov	local05, local01
04240     02 70 66 F0 | 	shl	local05, #2
04244     27 0F 06 F1 | 	add	objptr, #295
04248     07 71 02 F1 | 	add	local05, objptr
0424c     38 5D 02 FB | 	rdlong	arg02, local05
04250     34 5B 02 F6 | 	mov	arg01, local01
04254     27 0F 86 F1 | 	sub	objptr, #295
04258     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
0425c     CC 00 90 FD | 	jmp	#LR__0172
04260                 | LR__0165
04260                 | ' 
04260                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
04260     34 5B 02 F6 | 	mov	arg01, local01
04264     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
04268     C0 00 90 FD | 	jmp	#LR__0172
0426c                 | LR__0166
0426c                 | ' 
0426c                 | '     $7:                                 ' Tremolo
0426c                 | '       if x > 0
0426c     B7 0F 06 F1 | 	add	objptr, #439
04270     07 73 C2 FA | 	rdbyte	local06, objptr
04274     B7 0F 86 F1 | 	sub	objptr, #439
04278     00 72 5E F2 | 	cmps	local06, #0 wcz
0427c     1C 00 90 ED |  if_be	jmp	#LR__0167
04280                 | '         cmd7_memoryX[channel] := x
04280     34 73 02 F6 | 	mov	local06, local01
04284     D8 0F 06 F1 | 	add	objptr, #472
04288     07 73 02 F1 | 	add	local06, objptr
0428c     21 0E 86 F1 | 	sub	objptr, #33
04290     07 79 C2 FA | 	rdbyte	local09, objptr
04294     B7 0F 86 F1 | 	sub	objptr, #439
04298     39 79 42 FC | 	wrbyte	local09, local06
0429c                 | LR__0167
0429c                 | '       if y > 0
0429c     B8 0F 06 F1 | 	add	objptr, #440
042a0     07 73 C2 FA | 	rdbyte	local06, objptr
042a4     B8 0F 86 F1 | 	sub	objptr, #440
042a8     00 72 5E F2 | 	cmps	local06, #0 wcz
042ac     1C 00 90 ED |  if_be	jmp	#LR__0168
042b0                 | '         cmd7_memoryY[channel] := y
042b0     34 73 02 F6 | 	mov	local06, local01
042b4     D4 0F 06 F1 | 	add	objptr, #468
042b8     07 73 02 F1 | 	add	local06, objptr
042bc     1C 0E 86 F1 | 	sub	objptr, #28
042c0     07 79 C2 FA | 	rdbyte	local09, objptr
042c4     B8 0F 86 F1 | 	sub	objptr, #440
042c8     39 79 42 FC | 	wrbyte	local09, local06
042cc                 | LR__0168
042cc                 | ' 
042cc                 | '       doTremolo(channel)
042cc     34 5B 02 F6 | 	mov	arg01, local01
042d0     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
042d4     54 00 90 FD | 	jmp	#LR__0172
042d8                 | LR__0169
042d8                 | ' 
042d8                 | '     $A: doVolumeSlide(channel)          ' Volume slide
042d8     34 5B 02 F6 | 	mov	arg01, local01
042dc     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
042e0     48 00 90 FD | 	jmp	#LR__0172
042e4                 | LR__0170
042e4                 | ' 
042e4                 | '     $E:                                 ' Retrig every Y ticks
042e4                 | '       if (x == $9) && ((tickcounter // y) == 0)
042e4     B7 0F 06 F1 | 	add	objptr, #439
042e8     07 71 C2 FA | 	rdbyte	local05, objptr
042ec     B7 0F 86 F1 | 	sub	objptr, #439
042f0     09 70 0E F2 | 	cmp	local05, #9 wz
042f4     34 00 90 5D |  if_ne	jmp	#LR__0171
042f8     A1 0E 06 F1 | 	add	objptr, #161
042fc     07 75 C2 FA | 	rdbyte	local07, objptr
04300     3A 09 03 F6 | 	mov	muldiva_, local07
04304     17 0F 06 F1 | 	add	objptr, #279
04308     07 7B C2 FA | 	rdbyte	local10, objptr
0430c     B8 0F 86 F1 | 	sub	objptr, #440
04310     3D 0B 03 F6 | 	mov	muldivb_, local10
04314     D0 00 A0 FD | 	call	#divide_
04318     84 79 0A F6 | 	mov	local09, muldiva_ wz
0431c     0C 00 90 5D |  if_ne	jmp	#LR__0171
04320                 | '         triggerNote(channel)
04320     34 73 02 F6 | 	mov	local06, local01
04324     39 5B 02 F6 | 	mov	arg01, local06
04328     F0 F2 BF FD | 	call	#_trackerplayer_spin2_triggerNote
0432c                 | LR__0171
0432c                 | LR__0172
0432c     AF F0 03 F6 | 	mov	ptra, fp
04330     BF 00 A0 FD | 	call	#popregs_
04334                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
04334     2D 00 64 FD | 	ret
04338                 | 
04338                 | ' 
04338                 | ' 
04338                 | ' ' Handle all commands that executes on every tick
04338                 | ' '
04338                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
04338                 | _trackerplayer_spin2_handleEveryTickCommands
04338     12 5A 05 F6 | 	mov	COUNT_, #18
0433c     B0 00 A0 FD | 	call	#pushregs_
04340     2D 69 02 F6 | 	mov	local01, arg01
04344                 | ' 
04344                 | '   CASE_FAST cmd
04344     BA 0F 06 F1 | 	add	objptr, #442
04348     07 6B C2 FA | 	rdbyte	local02, objptr
0434c     BA 0F 86 F1 | 	sub	objptr, #442
04350     35 6D 02 F6 | 	mov	local03, local02
04354     0F 6C 26 F3 | 	fle	local03, #15
04358     36 6F 02 F6 | 	mov	local04, local03
0435c     30 6E 62 FD | 	jmprel	local04
04360                 | LR__0173
04360     3C 00 90 FD | 	jmp	#LR__0174
04364     68 03 90 FD | 	jmp	#LR__0188
04368     64 03 90 FD | 	jmp	#LR__0188
0436c     60 03 90 FD | 	jmp	#LR__0188
04370     E8 01 90 FD | 	jmp	#LR__0177
04374     58 03 90 FD | 	jmp	#LR__0188
04378     4C 02 90 FD | 	jmp	#LR__0180
0437c     50 03 90 FD | 	jmp	#LR__0188
04380     4C 03 90 FD | 	jmp	#LR__0188
04384     48 03 90 FD | 	jmp	#LR__0188
04388     44 03 90 FD | 	jmp	#LR__0188
0438c     40 03 90 FD | 	jmp	#LR__0188
04390     3C 03 90 FD | 	jmp	#LR__0188
04394     38 03 90 FD | 	jmp	#LR__0188
04398     38 02 90 FD | 	jmp	#LR__0181
0439c     30 03 90 FD | 	jmp	#LR__0188
043a0                 | LR__0174
043a0                 | ' 
043a0                 | '     $0:                                 ' Arpeggio
043a0                 | '       arpCounter := tickCounter // 3
043a0     A1 0E 06 F1 | 	add	objptr, #161
043a4     07 09 C3 FA | 	rdbyte	muldiva_, objptr
043a8     A1 0E 86 F1 | 	sub	objptr, #161
043ac     03 0A 07 F6 | 	mov	muldivb_, #3
043b0     D0 00 A0 FD | 	call	#divide_
043b4     84 71 02 F6 | 	mov	local05, muldiva_
043b8                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
043b8     34 73 02 F6 | 	mov	local06, local01
043bc     02 72 66 F0 | 	shl	local06, #2
043c0     DF 0E 06 F1 | 	add	objptr, #223
043c4     07 73 02 F1 | 	add	local06, objptr
043c8     39 5B 02 FB | 	rdlong	arg01, local06
043cc     34 75 02 F6 | 	mov	local07, local01
043d0     0C 0E 86 F1 | 	sub	objptr, #12
043d4     07 75 02 F1 | 	add	local07, objptr
043d8     3A 5D C2 FA | 	rdbyte	arg02, local07
043dc     D3 0E 86 F1 | 	sub	objptr, #211
043e0     68 F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
043e4     14 77 02 F6 | 	mov	local08, result1
043e8     3B 79 02 F6 | 	mov	local09, local08
043ec     24 76 5E F2 | 	cmps	local08, #36 wcz
043f0     DC 02 90 3D |  if_ae	jmp	#LR__0188
043f4                 | '         if arpCounter == 1 and x > 0
043f4     01 70 0E F2 | 	cmp	local05, #1 wz
043f8     8C 00 90 5D |  if_ne	jmp	#LR__0175
043fc     B7 0F 06 F1 | 	add	objptr, #439
04400     07 73 C2 FA | 	rdbyte	local06, objptr
04404     B7 0F 86 F1 | 	sub	objptr, #439
04408     00 72 5E F2 | 	cmps	local06, #0 wcz
0440c     78 00 90 ED |  if_be	jmp	#LR__0175
04410                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
04410     3C 7B 02 F6 | 	mov	local10, local09
04414     B7 0F 06 F1 | 	add	objptr, #439
04418     07 75 C2 FA | 	rdbyte	local07, objptr
0441c     3A 7D 02 F6 | 	mov	local11, local07
04420     3A 7B 02 F1 | 	add	local10, local07
04424     3D 7F 02 F6 | 	mov	local12, local10
04428     3F 5B 02 F6 | 	mov	arg01, local12
0442c     06 00 00 FF 
04430     AC 26 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3244
04434     01 5A 66 F0 | 	shl	arg01, #1
04438     13 5B 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
0443c                 | ' 
0443c                 | '   return word[@periodTable][noteNumber]
0443c     2D 29 E2 FA | 	rdword	result1, arg01
04440     06 00 00 FF 
04444     AC 26 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3244
04448     14 81 02 F6 | 	mov	local13, result1
0444c     34 83 02 F6 | 	mov	local14, local01
04450     02 82 66 F0 | 	shl	local14, #2
04454     D8 0E 86 F1 | 	sub	objptr, #216
04458     07 85 02 F6 | 	mov	local15, objptr
0445c     07 83 02 F1 | 	add	local14, objptr
04460     40 73 02 F6 | 	mov	local06, local13
04464     41 87 02 FB | 	rdlong	local16, local14
04468     43 73 82 F1 | 	sub	local06, local16
0446c     34 89 02 F6 | 	mov	local17, local01
04470     02 88 66 F0 | 	shl	local17, #2
04474     10 0E 06 F1 | 	add	objptr, #16
04478     07 8B 02 F6 | 	mov	local18, objptr
0447c     07 89 02 F1 | 	add	local17, objptr
04480     44 73 62 FC | 	wrlong	local06, local17
04484     EF 0E 86 F1 | 	sub	objptr, #239
04488                 | LR__0175
04488                 | '         if arpCounter == 2 and y > 0
04488     02 70 0E F2 | 	cmp	local05, #2 wz
0448c     8C 00 90 5D |  if_ne	jmp	#LR__0176
04490     B8 0F 06 F1 | 	add	objptr, #440
04494     07 73 C2 FA | 	rdbyte	local06, objptr
04498     B8 0F 86 F1 | 	sub	objptr, #440
0449c     00 72 5E F2 | 	cmps	local06, #0 wcz
044a0     78 00 90 ED |  if_be	jmp	#LR__0176
044a4                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
044a4     3C 7B 02 F6 | 	mov	local10, local09
044a8     B8 0F 06 F1 | 	add	objptr, #440
044ac     07 75 C2 FA | 	rdbyte	local07, objptr
044b0     3A 7D 02 F6 | 	mov	local11, local07
044b4     3A 7B 02 F1 | 	add	local10, local07
044b8     3D 7F 02 F6 | 	mov	local12, local10
044bc     3F 5B 02 F6 | 	mov	arg01, local12
044c0     06 00 00 FF 
044c4     AC 26 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3244
044c8     01 5A 66 F0 | 	shl	arg01, #1
044cc     13 5B 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
044d0                 | ' 
044d0                 | '   return word[@periodTable][noteNumber]
044d0     2D 29 E2 FA | 	rdword	result1, arg01
044d4     06 00 00 FF 
044d8     AC 26 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3244
044dc     14 81 02 F6 | 	mov	local13, result1
044e0     34 83 02 F6 | 	mov	local14, local01
044e4     02 82 66 F0 | 	shl	local14, #2
044e8     D9 0E 86 F1 | 	sub	objptr, #217
044ec     07 85 02 F6 | 	mov	local15, objptr
044f0     07 83 02 F1 | 	add	local14, objptr
044f4     40 73 02 F6 | 	mov	local06, local13
044f8     41 87 02 FB | 	rdlong	local16, local14
044fc     43 73 82 F1 | 	sub	local06, local16
04500     34 89 02 F6 | 	mov	local17, local01
04504     02 88 66 F0 | 	shl	local17, #2
04508     10 0E 06 F1 | 	add	objptr, #16
0450c     07 8B 02 F6 | 	mov	local18, objptr
04510     07 89 02 F1 | 	add	local17, objptr
04514     44 73 62 FC | 	wrlong	local06, local17
04518     EF 0E 86 F1 | 	sub	objptr, #239
0451c                 | LR__0176
0451c                 | '         if arpCounter == 0 and (x + y) > 0
0451c     00 70 0E F2 | 	cmp	local05, #0 wz
04520     AC 01 90 5D |  if_ne	jmp	#LR__0188
04524     B7 0F 06 F1 | 	add	objptr, #439
04528     07 73 C2 FA | 	rdbyte	local06, objptr
0452c     01 0E 06 F1 | 	add	objptr, #1
04530     07 75 C2 FA | 	rdbyte	local07, objptr
04534     B8 0F 86 F1 | 	sub	objptr, #440
04538     3A 73 02 F1 | 	add	local06, local07
0453c     00 72 5E F2 | 	cmps	local06, #0 wcz
04540     8C 01 90 ED |  if_be	jmp	#LR__0188
04544                 | '           deltaPeriod[channel] := 0
04544     02 68 66 F0 | 	shl	local01, #2
04548     EF 0E 06 F1 | 	add	objptr, #239
0454c     07 69 02 F1 | 	add	local01, objptr
04550     34 01 68 FC | 	wrlong	#0, local01
04554     EF 0E 86 F1 | 	sub	objptr, #239
04558     74 01 90 FD | 	jmp	#LR__0188
0455c                 | LR__0177
0455c                 | ' 
0455c                 | '     $4:                                 ' Vibrato
0455c                 | '       if x > 0
0455c     B7 0F 06 F1 | 	add	objptr, #439
04560     07 73 C2 FA | 	rdbyte	local06, objptr
04564     B7 0F 86 F1 | 	sub	objptr, #439
04568     00 72 5E F2 | 	cmps	local06, #0 wcz
0456c     1C 00 90 ED |  if_be	jmp	#LR__0178
04570                 | '         cmd4_memoryX[channel] := x
04570     34 73 02 F6 | 	mov	local06, local01
04574     D0 0F 06 F1 | 	add	objptr, #464
04578     07 73 02 F1 | 	add	local06, objptr
0457c     19 0E 86 F1 | 	sub	objptr, #25
04580     07 7D C2 FA | 	rdbyte	local11, objptr
04584     B7 0F 86 F1 | 	sub	objptr, #439
04588     39 7D 42 FC | 	wrbyte	local11, local06
0458c                 | LR__0178
0458c                 | '       if y > 0
0458c     B8 0F 06 F1 | 	add	objptr, #440
04590     07 73 C2 FA | 	rdbyte	local06, objptr
04594     B8 0F 86 F1 | 	sub	objptr, #440
04598     00 72 5E F2 | 	cmps	local06, #0 wcz
0459c     1C 00 90 ED |  if_be	jmp	#LR__0179
045a0                 | '         cmd4_memoryY[channel] := y
045a0     34 73 02 F6 | 	mov	local06, local01
045a4     CC 0F 06 F1 | 	add	objptr, #460
045a8     07 73 02 F1 | 	add	local06, objptr
045ac     14 0E 86 F1 | 	sub	objptr, #20
045b0     07 7D C2 FA | 	rdbyte	local11, objptr
045b4     B8 0F 86 F1 | 	sub	objptr, #440
045b8     39 7D 42 FC | 	wrbyte	local11, local06
045bc                 | LR__0179
045bc                 | ' 
045bc                 | '       doVibrato(channel)
045bc     34 5B 02 F6 | 	mov	arg01, local01
045c0     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
045c4     08 01 90 FD | 	jmp	#LR__0188
045c8                 | LR__0180
045c8                 | ' 
045c8                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
045c8     34 5B 02 F6 | 	mov	arg01, local01
045cc     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
045d0     FC 00 90 FD | 	jmp	#LR__0188
045d4                 | LR__0181
045d4                 | ' 
045d4                 | '     $E:
045d4                 | '       if x == $C                        ' Cut note after Y ticks
045d4     B7 0F 06 F1 | 	add	objptr, #439
045d8     07 73 C2 FA | 	rdbyte	local06, objptr
045dc     B7 0F 86 F1 | 	sub	objptr, #439
045e0     0C 72 0E F2 | 	cmp	local06, #12 wz
045e4     34 00 90 5D |  if_ne	jmp	#LR__0182
045e8                 | '         if tickcounter == y
045e8     A1 0E 06 F1 | 	add	objptr, #161
045ec     07 73 C2 FA | 	rdbyte	local06, objptr
045f0     17 0F 06 F1 | 	add	objptr, #279
045f4     07 7D C2 FA | 	rdbyte	local11, objptr
045f8     B8 0F 86 F1 | 	sub	objptr, #440
045fc     3E 73 0A F2 | 	cmp	local06, local11 wz
04600     CC 00 90 5D |  if_ne	jmp	#LR__0187
04604                 | '           currVolume[channel] := 0
04604     02 68 66 F0 | 	shl	local01, #2
04608     FF 0E 06 F1 | 	add	objptr, #255
0460c     07 69 02 F1 | 	add	local01, objptr
04610     34 01 68 FC | 	wrlong	#0, local01
04614     FF 0E 86 F1 | 	sub	objptr, #255
04618     B4 00 90 FD | 	jmp	#LR__0187
0461c                 | LR__0182
0461c                 | ' 
0461c                 | '       elseif x == $D                    ' Delay note Y ticks
0461c     B7 0F 06 F1 | 	add	objptr, #439
04620     07 73 C2 FA | 	rdbyte	local06, objptr
04624     B7 0F 86 F1 | 	sub	objptr, #439
04628     0D 72 0E F2 | 	cmp	local06, #13 wz
0462c     A0 00 90 5D |  if_ne	jmp	#LR__0186
04630                 | '         if tickcounter == y
04630     A1 0E 06 F1 | 	add	objptr, #161
04634     07 73 C2 FA | 	rdbyte	local06, objptr
04638     17 0F 06 F1 | 	add	objptr, #279
0463c     07 7D C2 FA | 	rdbyte	local11, objptr
04640     B8 0F 86 F1 | 	sub	objptr, #440
04644     3E 73 0A F2 | 	cmp	local06, local11 wz
04648     0C 00 90 5D |  if_ne	jmp	#LR__0183
0464c                 | '           triggerNote(channel)
0464c     34 5B 02 F6 | 	mov	arg01, local01
04650     C8 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
04654     78 00 90 FD | 	jmp	#LR__0185
04658                 | LR__0183
04658                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
04658                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
04658     B8 0F 06 F1 | 	add	objptr, #440
0465c     07 73 C2 FA | 	rdbyte	local06, objptr
04660     14 0F 86 F1 | 	sub	objptr, #276
04664     07 7D C2 FA | 	rdbyte	local11, objptr
04668     A4 0E 86 F1 | 	sub	objptr, #164
0466c     3E 73 5A F2 | 	cmps	local06, local11 wcz
04670     5C 00 90 CD |  if_b	jmp	#LR__0184
04674     A4 0E 06 F1 | 	add	objptr, #164
04678     07 81 C2 FA | 	rdbyte	local13, objptr
0467c     40 7F 02 F6 | 	mov	local12, local13
04680     01 7E 86 F1 | 	sub	local12, #1
04684     03 0E 86 F1 | 	sub	objptr, #3
04688     07 85 C2 FA | 	rdbyte	local15, objptr
0468c     A1 0E 86 F1 | 	sub	objptr, #161
04690     42 83 02 F6 | 	mov	local14, local15
04694     3F 83 0A F2 | 	cmp	local14, local12 wz
04698     34 00 90 5D |  if_ne	jmp	#LR__0184
0469c                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
0469c     34 73 02 F6 | 	mov	local06, local01
046a0     02 72 66 F0 | 	shl	local06, #2
046a4     27 0F 06 F1 | 	add	objptr, #295
046a8     07 7B 02 F6 | 	mov	local10, objptr
046ac     07 73 02 F1 | 	add	local06, objptr
046b0     34 7D 02 F6 | 	mov	local11, local01
046b4     02 7C 66 F0 | 	shl	local11, #2
046b8     48 0E 86 F1 | 	sub	objptr, #72
046bc     07 75 02 F6 | 	mov	local07, objptr
046c0     39 7F 02 FB | 	rdlong	local12, local06
046c4     3A 7D 02 F1 | 	add	local11, local07
046c8     3E 7F 62 FC | 	wrlong	local12, local11
046cc     DF 0E 86 F1 | 	sub	objptr, #223
046d0                 | LR__0184
046d0                 | LR__0185
046d0                 | LR__0186
046d0                 | LR__0187
046d0                 | LR__0188
046d0     AF F0 03 F6 | 	mov	ptra, fp
046d4     BF 00 A0 FD | 	call	#popregs_
046d8                 | _trackerplayer_spin2_handleEveryTickCommands_ret
046d8     2D 00 64 FD | 	ret
046dc                 | 
046dc                 | ' 
046dc                 | ' 
046dc                 | ' PRI doTremolo(channel) | depth, sineWave, speed
046dc                 | _trackerplayer_spin2_doTremolo
046dc     2D 2F 02 F6 | 	mov	_var01, arg01
046e0     17 31 02 F6 | 	mov	_var02, _var01
046e4     8B 0F 06 F1 | 	add	objptr, #395
046e8     07 31 02 F1 | 	add	_var02, objptr
046ec     05 00 00 FF 
046f0     AC 27 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2988
046f4     13 33 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
046f8     18 35 C2 FA | 	rdbyte	_var04, _var02
046fc     02 34 66 F0 | 	shl	_var04, #2
04700     19 35 02 F1 | 	add	_var04, _var03
04704                 | ' 
04704                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
04704     1A 37 02 FB | 	rdlong	_var05, _var04
04708     17 39 02 F6 | 	mov	_var06, _var01
0470c     49 0E 06 F1 | 	add	objptr, #73
04710     07 39 02 F1 | 	add	_var06, objptr
04714                 | '   depth    := cmd7_memoryY[channel]
04714     1C 3B C2 FA | 	rdbyte	_var07, _var06
04718     17 3D 02 F6 | 	mov	_var08, _var01
0471c     04 0E 06 F1 | 	add	objptr, #4
04720     07 3D 02 F1 | 	add	_var08, objptr
04724                 | '   speed    := cmd7_memoryX[channel]
04724     1E 3F C2 FA | 	rdbyte	_var09, _var08
04728                 | ' 
04728                 | '   CASE_FAST vibratoType[channel]
04728     17 41 02 F6 | 	mov	_var10, _var01
0472c     18 0E 86 F1 | 	sub	objptr, #24
04730     07 43 02 F6 | 	mov	_var11, objptr
04734     07 41 02 F1 | 	add	_var10, objptr
04738     20 45 C2 FA | 	rdbyte	_var12, _var10
0473c     03 44 26 F3 | 	fle	_var12, #3
04740     22 47 02 F6 | 	mov	_var13, _var12
04744     05 00 00 FF 
04748     AC 27 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2988
0474c     C0 0F 86 F1 | 	sub	objptr, #448
04750     30 46 62 FD | 	jmprel	_var13
04754                 | LR__0189
04754     0C 00 90 FD | 	jmp	#LR__0190
04758     30 00 90 FD | 	jmp	#LR__0191
0475c     6C 00 90 FD | 	jmp	#LR__0192
04760     B4 00 90 FD | 	jmp	#LR__0193
04764                 | LR__0190
04764                 | ' 
04764                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
04764     1B 3B 02 FD | 	qmul	_var07, _var05
04768     18 48 62 FD | 	getqx	_var14
0476c     06 48 C6 F0 | 	sar	_var14, #6
04770     17 4B 02 F6 | 	mov	_var15, _var01
04774     02 4A 66 F0 | 	shl	_var15, #2
04778     0F 0F 06 F1 | 	add	objptr, #271
0477c     07 4B 02 F1 | 	add	_var15, objptr
04780     25 49 62 FC | 	wrlong	_var14, _var15
04784     0F 0F 86 F1 | 	sub	objptr, #271
04788     8C 00 90 FD | 	jmp	#LR__0193
0478c                 | LR__0191
0478c                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
0478c     17 4B 02 F6 | 	mov	_var15, _var01
04790     8B 0F 06 F1 | 	add	objptr, #395
04794     07 4B 02 F1 | 	add	_var15, objptr
04798     25 4D C2 FA | 	rdbyte	_var16, _var15
0479c     03 4C 66 F0 | 	shl	_var16, #3
047a0     26 3B 02 FD | 	qmul	_var07, _var16
047a4     18 48 62 FD | 	getqx	_var14
047a8     00 49 86 F1 | 	sub	_var14, #256
047ac     06 48 C6 F0 | 	sar	_var14, #6
047b0     17 4F 02 F6 | 	mov	_var17, _var01
047b4     02 4E 66 F0 | 	shl	_var17, #2
047b8     7C 0E 86 F1 | 	sub	objptr, #124
047bc     07 4F 02 F1 | 	add	_var17, objptr
047c0     27 49 62 FC | 	wrlong	_var14, _var17
047c4     0F 0F 86 F1 | 	sub	objptr, #271
047c8     4C 00 90 FD | 	jmp	#LR__0193
047cc                 | LR__0192
047cc                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
047cc     17 4B 02 F6 | 	mov	_var15, _var01
047d0     8B 0F 06 F1 | 	add	objptr, #395
047d4     07 51 02 F6 | 	mov	_var18, objptr
047d8     07 4B 02 F1 | 	add	_var15, objptr
047dc     25 4D C2 FA | 	rdbyte	_var16, _var15
047e0     20 4C 06 F5 | 	and	_var16, #32
047e4     04 4C 66 F0 | 	shl	_var16, #4
047e8     26 3B 02 FD | 	qmul	_var07, _var16
047ec     18 52 62 FD | 	getqx	_var19
047f0     29 49 02 F6 | 	mov	_var14, _var19
047f4     00 49 86 F1 | 	sub	_var14, #256
047f8     06 48 C6 F0 | 	sar	_var14, #6
047fc     17 4F 02 F6 | 	mov	_var17, _var01
04800     02 4E 66 F0 | 	shl	_var17, #2
04804     7C 0E 86 F1 | 	sub	objptr, #124
04808     07 55 02 F6 | 	mov	_var20, objptr
0480c     07 4F 02 F1 | 	add	_var17, objptr
04810     27 49 62 FC | 	wrlong	_var14, _var17
04814     0F 0F 86 F1 | 	sub	objptr, #271
04818                 | LR__0193
04818     8B 0F 06 F1 | 	add	objptr, #395
0481c     07 2F 02 F1 | 	add	_var01, objptr
04820     17 57 C2 FA | 	rdbyte	_var21, _var01
04824     1F 57 02 F1 | 	add	_var21, _var09
04828     3F 56 06 F5 | 	and	_var21, #63
0482c                 | ' 
0482c                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
0482c     17 57 42 FC | 	wrbyte	_var21, _var01
04830     8B 0F 86 F1 | 	sub	objptr, #395
04834                 | _trackerplayer_spin2_doTremolo_ret
04834     2D 00 64 FD | 	ret
04838                 | 
04838                 | ' 
04838                 | ' 
04838                 | ' PRI doVibrato(channel) | depth, sineWave, speed
04838                 | _trackerplayer_spin2_doVibrato
04838     2D 2F 02 F6 | 	mov	_var01, arg01
0483c     17 31 02 F6 | 	mov	_var02, _var01
04840     87 0F 06 F1 | 	add	objptr, #391
04844     07 31 02 F1 | 	add	_var02, objptr
04848     05 00 00 FF 
0484c     AC 27 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2988
04850     13 33 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
04854     18 35 C2 FA | 	rdbyte	_var04, _var02
04858     02 34 66 F0 | 	shl	_var04, #2
0485c     19 35 02 F1 | 	add	_var04, _var03
04860                 | ' 
04860                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
04860     1A 37 02 FB | 	rdlong	_var05, _var04
04864     17 39 02 F6 | 	mov	_var06, _var01
04868     45 0E 06 F1 | 	add	objptr, #69
0486c     07 39 02 F1 | 	add	_var06, objptr
04870                 | '   depth    := cmd4_memoryY[channel]
04870     1C 3B C2 FA | 	rdbyte	_var07, _var06
04874     17 3D 02 F6 | 	mov	_var08, _var01
04878     04 0E 06 F1 | 	add	objptr, #4
0487c     07 3D 02 F1 | 	add	_var08, objptr
04880                 | '   speed    := cmd4_memoryX[channel]
04880     1E 3F C2 FA | 	rdbyte	_var09, _var08
04884                 | ' 
04884                 | '   CASE_FAST vibratoType[channel]
04884     17 41 02 F6 | 	mov	_var10, _var01
04888     10 0E 86 F1 | 	sub	objptr, #16
0488c     07 43 02 F6 | 	mov	_var11, objptr
04890     07 41 02 F1 | 	add	_var10, objptr
04894     20 45 C2 FA | 	rdbyte	_var12, _var10
04898     03 44 26 F3 | 	fle	_var12, #3
0489c     22 47 02 F6 | 	mov	_var13, _var12
048a0     05 00 00 FF 
048a4     AC 27 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2988
048a8     C0 0F 86 F1 | 	sub	objptr, #448
048ac     30 46 62 FD | 	jmprel	_var13
048b0                 | LR__0194
048b0     0C 00 90 FD | 	jmp	#LR__0195
048b4     30 00 90 FD | 	jmp	#LR__0196
048b8     6C 00 90 FD | 	jmp	#LR__0197
048bc     B4 00 90 FD | 	jmp	#LR__0198
048c0                 | LR__0195
048c0                 | ' 
048c0                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
048c0     1B 3B 02 FD | 	qmul	_var07, _var05
048c4     18 48 62 FD | 	getqx	_var14
048c8     07 48 C6 F0 | 	sar	_var14, #7
048cc     17 4B 02 F6 | 	mov	_var15, _var01
048d0     02 4A 66 F0 | 	shl	_var15, #2
048d4     EF 0E 06 F1 | 	add	objptr, #239
048d8     07 4B 02 F1 | 	add	_var15, objptr
048dc     25 49 62 FC | 	wrlong	_var14, _var15
048e0     EF 0E 86 F1 | 	sub	objptr, #239
048e4     8C 00 90 FD | 	jmp	#LR__0198
048e8                 | LR__0196
048e8                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
048e8     17 4B 02 F6 | 	mov	_var15, _var01
048ec     87 0F 06 F1 | 	add	objptr, #391
048f0     07 4B 02 F1 | 	add	_var15, objptr
048f4     25 4D C2 FA | 	rdbyte	_var16, _var15
048f8     03 4C 66 F0 | 	shl	_var16, #3
048fc     26 3B 02 FD | 	qmul	_var07, _var16
04900     18 48 62 FD | 	getqx	_var14
04904     00 49 86 F1 | 	sub	_var14, #256
04908     07 48 C6 F0 | 	sar	_var14, #7
0490c     17 4F 02 F6 | 	mov	_var17, _var01
04910     02 4E 66 F0 | 	shl	_var17, #2
04914     98 0E 86 F1 | 	sub	objptr, #152
04918     07 4F 02 F1 | 	add	_var17, objptr
0491c     27 49 62 FC | 	wrlong	_var14, _var17
04920     EF 0E 86 F1 | 	sub	objptr, #239
04924     4C 00 90 FD | 	jmp	#LR__0198
04928                 | LR__0197
04928                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
04928     17 4B 02 F6 | 	mov	_var15, _var01
0492c     87 0F 06 F1 | 	add	objptr, #391
04930     07 51 02 F6 | 	mov	_var18, objptr
04934     07 4B 02 F1 | 	add	_var15, objptr
04938     25 4D C2 FA | 	rdbyte	_var16, _var15
0493c     20 4C 06 F5 | 	and	_var16, #32
04940     04 4C 66 F0 | 	shl	_var16, #4
04944     26 3B 02 FD | 	qmul	_var07, _var16
04948     18 52 62 FD | 	getqx	_var19
0494c     29 49 02 F6 | 	mov	_var14, _var19
04950     00 49 86 F1 | 	sub	_var14, #256
04954     07 48 C6 F0 | 	sar	_var14, #7
04958     17 4F 02 F6 | 	mov	_var17, _var01
0495c     02 4E 66 F0 | 	shl	_var17, #2
04960     98 0E 86 F1 | 	sub	objptr, #152
04964     07 55 02 F6 | 	mov	_var20, objptr
04968     07 4F 02 F1 | 	add	_var17, objptr
0496c     27 49 62 FC | 	wrlong	_var14, _var17
04970     EF 0E 86 F1 | 	sub	objptr, #239
04974                 | LR__0198
04974     87 0F 06 F1 | 	add	objptr, #391
04978     07 2F 02 F1 | 	add	_var01, objptr
0497c     17 57 C2 FA | 	rdbyte	_var21, _var01
04980     1F 57 02 F1 | 	add	_var21, _var09
04984     3F 56 06 F5 | 	and	_var21, #63
04988                 | ' 
04988                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
04988     17 57 42 FC | 	wrbyte	_var21, _var01
0498c     87 0F 86 F1 | 	sub	objptr, #391
04990                 | _trackerplayer_spin2_doVibrato_ret
04990     2D 00 64 FD | 	ret
04994                 | 
04994                 | ' 
04994                 | ' 
04994                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
04994                 | _trackerplayer_spin2_doPortamento
04994                 | ' 
04994                 | '   if period == currPeriod[channel]
04994     2D 2F 02 F6 | 	mov	_var01, arg01
04998     02 2E 66 F0 | 	shl	_var01, #2
0499c     DF 0E 06 F1 | 	add	objptr, #223
049a0     07 31 02 F6 | 	mov	_var02, objptr
049a4     07 2F 02 F1 | 	add	_var01, objptr
049a8     17 33 02 FB | 	rdlong	_var03, _var01
049ac     19 5D 0A F2 | 	cmp	arg02, _var03 wz
049b0                 | '     return
049b0     DF 0E 86 F1 | 	sub	objptr, #223
049b4     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
049b8                 | ' 
049b8                 | '   if period > 0
049b8     00 5C 5E F2 | 	cmps	arg02, #0 wcz
049bc     1C 00 90 ED |  if_be	jmp	#LR__0199
049c0     2D 35 02 F6 | 	mov	_var04, arg01
049c4     02 34 66 F0 | 	shl	_var04, #2
049c8     97 0F 06 F1 | 	add	objptr, #407
049cc     07 35 02 F1 | 	add	_var04, objptr
049d0                 | '     portamentoPeriodMemory[channel] := period
049d0     1A 5D 62 FC | 	wrlong	arg02, _var04
049d4                 | '   else
049d4     97 0F 86 F1 | 	sub	objptr, #407
049d8     18 00 90 FD | 	jmp	#LR__0200
049dc                 | LR__0199
049dc     2D 37 02 F6 | 	mov	_var05, arg01
049e0     02 36 66 F0 | 	shl	_var05, #2
049e4     97 0F 06 F1 | 	add	objptr, #407
049e8     07 37 02 F1 | 	add	_var05, objptr
049ec                 | '     period := portamentoPeriodMemory[channel]
049ec     1B 5D 02 FB | 	rdlong	arg02, _var05
049f0     97 0F 86 F1 | 	sub	objptr, #407
049f4                 | LR__0200
049f4                 | ' 
049f4                 | '   if period > currPeriod[channel]
049f4     2D 2F 02 F6 | 	mov	_var01, arg01
049f8     02 2E 66 F0 | 	shl	_var01, #2
049fc     DF 0E 06 F1 | 	add	objptr, #223
04a00     07 2F 02 F1 | 	add	_var01, objptr
04a04     17 33 02 FB | 	rdlong	_var03, _var01
04a08     19 5D 5A F2 | 	cmps	arg02, _var03 wcz
04a0c     DF 0E 86 F1 | 	sub	objptr, #223
04a10     50 00 90 ED |  if_be	jmp	#LR__0201
04a14     2D 39 02 F6 | 	mov	_var06, arg01
04a18     02 38 66 F0 | 	shl	_var06, #2
04a1c     DF 0E 06 F1 | 	add	objptr, #223
04a20     07 39 02 F1 | 	add	_var06, objptr
04a24     2D 3B 02 F6 | 	mov	_var07, arg01
04a28     E9 0E 06 F1 | 	add	objptr, #233
04a2c     1C 3D 02 FB | 	rdlong	_var08, _var06
04a30     07 3B 02 F1 | 	add	_var07, objptr
04a34     1D 31 C2 FA | 	rdbyte	_var02, _var07
04a38     18 3D 02 F1 | 	add	_var08, _var02
04a3c                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
04a3c     1C 3D 62 FC | 	wrlong	_var08, _var06
04a40     2D 3F 02 F6 | 	mov	_var09, arg01
04a44     02 3E 66 F0 | 	shl	_var09, #2
04a48     E9 0E 86 F1 | 	sub	objptr, #233
04a4c     07 3F 02 F1 | 	add	_var09, objptr
04a50     1F 41 02 FB | 	rdlong	_var10, _var09
04a54     2E 41 62 F3 | 	fles	_var10, arg02
04a58                 | '     currPeriod[channel] <#= period
04a58     1F 41 62 FC | 	wrlong	_var10, _var09
04a5c     DF 0E 86 F1 | 	sub	objptr, #223
04a60     6C 00 90 FD | 	jmp	#LR__0203
04a64                 | LR__0201
04a64                 | ' 
04a64                 | '   elseif period < currPeriod[channel]
04a64     2D 2F 02 F6 | 	mov	_var01, arg01
04a68     02 2E 66 F0 | 	shl	_var01, #2
04a6c     DF 0E 06 F1 | 	add	objptr, #223
04a70     07 2F 02 F1 | 	add	_var01, objptr
04a74     17 33 02 FB | 	rdlong	_var03, _var01
04a78     19 5D 5A F2 | 	cmps	arg02, _var03 wcz
04a7c     DF 0E 86 F1 | 	sub	objptr, #223
04a80     4C 00 90 3D |  if_ae	jmp	#LR__0202
04a84     2D 43 02 F6 | 	mov	_var11, arg01
04a88     02 42 66 F0 | 	shl	_var11, #2
04a8c     DF 0E 06 F1 | 	add	objptr, #223
04a90     07 43 02 F1 | 	add	_var11, objptr
04a94     2D 45 02 F6 | 	mov	_var12, arg01
04a98     E9 0E 06 F1 | 	add	objptr, #233
04a9c     21 47 02 FB | 	rdlong	_var13, _var11
04aa0     07 45 02 F1 | 	add	_var12, objptr
04aa4     22 31 C2 FA | 	rdbyte	_var02, _var12
04aa8     18 47 82 F1 | 	sub	_var13, _var02
04aac                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
04aac     21 47 62 FC | 	wrlong	_var13, _var11
04ab0     2D 49 02 F6 | 	mov	_var14, arg01
04ab4     02 48 66 F0 | 	shl	_var14, #2
04ab8     E9 0E 86 F1 | 	sub	objptr, #233
04abc     07 49 02 F1 | 	add	_var14, objptr
04ac0     24 4B 02 FB | 	rdlong	_var15, _var14
04ac4     2E 4B 42 F3 | 	fges	_var15, arg02
04ac8                 | '     currPeriod[channel] #>= period
04ac8     24 4B 62 FC | 	wrlong	_var15, _var14
04acc     DF 0E 86 F1 | 	sub	objptr, #223
04ad0                 | LR__0202
04ad0                 | LR__0203
04ad0                 | ' 
04ad0                 | '   ' Handle glissando if activated
04ad0                 | '   if portaGlissando[channel] > 0
04ad0     2D 2F 02 F6 | 	mov	_var01, arg01
04ad4     BC 0F 06 F1 | 	add	objptr, #444
04ad8     07 2F 02 F1 | 	add	_var01, objptr
04adc     17 33 C2 FA | 	rdbyte	_var03, _var01
04ae0     00 32 5E F2 | 	cmps	_var03, #0 wcz
04ae4     BC 0F 86 F1 | 	sub	objptr, #444
04ae8     A0 00 90 ED |  if_be	jmp	#LR__0206
04aec     2D 4D 02 F6 | 	mov	_var16, arg01
04af0     02 4C 66 F0 | 	shl	_var16, #2
04af4     DF 0E 06 F1 | 	add	objptr, #223
04af8     07 4D 02 F1 | 	add	_var16, objptr
04afc                 | ' 
04afc                 | '     tempPeriod := currPeriod[channel]
04afc     26 4F 02 FB | 	rdlong	_var17, _var16
04b00                 | ' 
04b00                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04b00     00 50 06 F6 | 	mov	_var18, #0
04b04     DF 0E 86 F1 | 	sub	objptr, #223
04b08     58 B5 9F FE | 	loc	pa,	#(@LR__0205-@LR__0204)
04b0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04b10                 | LR__0204
04b10     06 00 00 FF 
04b14     AC 26 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3244
04b18     13 33 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
04b1c     2D 53 02 F6 | 	mov	_var19, arg01
04b20     D3 0E 06 F1 | 	add	objptr, #211
04b24     07 53 02 F1 | 	add	_var19, objptr
04b28     29 31 C2 FA | 	rdbyte	_var02, _var19
04b2c     18 55 02 F6 | 	mov	_var20, _var02
04b30     03 54 66 F0 | 	shl	_var20, #3
04b34     18 55 02 F1 | 	add	_var20, _var02
04b38     03 54 66 F0 | 	shl	_var20, #3
04b3c     2A 33 02 F1 | 	add	_var03, _var20
04b40     28 57 02 F6 | 	mov	_var21, _var18
04b44     01 56 66 F0 | 	shl	_var21, #1
04b48     19 57 02 F1 | 	add	_var21, _var03
04b4c                 | ' 
04b4c                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
04b4c     2B 59 E2 FA | 	rdword	_var22, _var21
04b50                 | '       if tempPeriod >= periodStep
04b50     2C 4F 5A F2 | 	cmps	_var17, _var22 wcz
04b54                 | '         i += 1000
04b54     06 00 00 FF 
04b58     AC 26 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3244
04b5c     D3 0E 86 F1 | 	sub	objptr, #211
04b60     01 00 00 3F 
04b64     E8 51 06 31 |  if_ae	add	_var18, ##1000
04b68     01 50 06 F1 | 	add	_var18, #1
04b6c     24 50 5E F2 | 	cmps	_var18, #36 wcz
04b70     9C FF 9F CD |  if_b	jmp	#LR__0204
04b74                 | LR__0205
04b74     27 59 82 F1 | 	sub	_var22, _var17
04b78     02 5A 66 F0 | 	shl	arg01, #2
04b7c     EF 0E 06 F1 | 	add	objptr, #239
04b80     07 5B 02 F1 | 	add	arg01, objptr
04b84                 | ' 
04b84                 | '     deltaPeriod[channel] := periodStep - tempPeriod
04b84     2D 59 62 FC | 	wrlong	_var22, arg01
04b88     EF 0E 86 F1 | 	sub	objptr, #239
04b8c                 | LR__0206
04b8c                 | _trackerplayer_spin2_doPortamento_ret
04b8c     2D 00 64 FD | 	ret
04b90                 | 
04b90                 | ' 
04b90                 | ' 
04b90                 | ' PRI doVolumeSlide(channel)
04b90                 | _trackerplayer_spin2_doVolumeSlide
04b90                 | ' 
04b90                 | '   if x > 0
04b90     B7 0F 06 F1 | 	add	objptr, #439
04b94     07 2F C2 FA | 	rdbyte	_var01, objptr
04b98     B7 0F 86 F1 | 	sub	objptr, #439
04b9c     00 2E 5E F2 | 	cmps	_var01, #0 wcz
04ba0     28 00 90 ED |  if_be	jmp	#LR__0207
04ba4     2D 31 02 F6 | 	mov	_var02, arg01
04ba8     02 30 66 F0 | 	shl	_var02, #2
04bac     FF 0E 06 F1 | 	add	objptr, #255
04bb0     07 31 02 F1 | 	add	_var02, objptr
04bb4     18 33 02 FB | 	rdlong	_var03, _var02
04bb8     B8 0E 06 F1 | 	add	objptr, #184
04bbc     07 35 C2 FA | 	rdbyte	_var04, objptr
04bc0     B7 0F 86 F1 | 	sub	objptr, #439
04bc4     1A 33 02 F1 | 	add	_var03, _var04
04bc8                 | '     currVolume[channel] += x
04bc8     18 33 62 FC | 	wrlong	_var03, _var02
04bcc                 | LR__0207
04bcc                 | '   if y > 0
04bcc     B8 0F 06 F1 | 	add	objptr, #440
04bd0     07 2F C2 FA | 	rdbyte	_var01, objptr
04bd4     B8 0F 86 F1 | 	sub	objptr, #440
04bd8     00 2E 5E F2 | 	cmps	_var01, #0 wcz
04bdc     24 00 90 ED |  if_be	jmp	#LR__0208
04be0     02 5A 66 F0 | 	shl	arg01, #2
04be4     FF 0E 06 F1 | 	add	objptr, #255
04be8     07 5B 02 F1 | 	add	arg01, objptr
04bec     2D 37 02 FB | 	rdlong	_var05, arg01
04bf0     B9 0E 06 F1 | 	add	objptr, #185
04bf4     07 35 C2 FA | 	rdbyte	_var04, objptr
04bf8     B8 0F 86 F1 | 	sub	objptr, #440
04bfc     1A 37 82 F1 | 	sub	_var05, _var04
04c00                 | '     currVolume[channel] -= y
04c00     2D 37 62 FC | 	wrlong	_var05, arg01
04c04                 | LR__0208
04c04                 | _trackerplayer_spin2_doVolumeSlide_ret
04c04     2D 00 64 FD | 	ret
04c08                 | 
04c08                 | ' 
04c08                 | ' 
04c08                 | ' PRI calculateAccumulatorFrequency(mixingFrequency, amigaPeriod) : r | upper, lower
04c08                 | _trackerplayer_spin2_calculateAccumulatorFrequency
04c08                 | ' 
04c08                 | '   'R = (65536 * 3546894) / amigaPeriod / mixingFrequency
04c08                 | '   org
04c08     1C B4 9F FE | 	loc	pa,	#(@LR__0210-@LR__0209)
04c0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04c10                 | LR__0209
04c10 000             | 	org	0
04c10 000 80 00 80 FF 
04c14 001 0F 1B 00 FF 
04c18 002 0E 01 0C FD | 	qmul	##65536, ##3546894
04c1c 003 18 2E 62 FD | 	getqx	_var01
04c20 004 19 30 62 FD | 	getqy	_var02
04c24 005 28 30 62 FD | 	setq	_var02
04c28 006 2E 2F 12 FD | 	qdiv	_var01, arg02
04c2c 007 18 2E 62 FD | 	getqx	_var01
04c30 008 2D 2F 12 FD | 	qdiv	_var01, arg01
04c34 009 18 2E 62 FD | 	getqx	_var01
04c38 00a             | LR__0210
04c38                 | 	orgh
04c38                 | ' 
04c38                 | '   return lower
04c38     17 29 02 F6 | 	mov	result1, _var01
04c3c                 | _trackerplayer_spin2_calculateAccumulatorFrequency_ret
04c3c     2D 00 64 FD | 	ret
04c40                 | hubexit
04c40     81 00 80 FD | 	jmp	#cogexit
04c44                 | 
04c44                 | __system___setbaud
04c44     14 08 07 FB | 	rdlong	muldiva_, #20
04c48     2D 0B 03 F6 | 	mov	muldivb_, arg01
04c4c     D0 00 A0 FD | 	call	#divide_
04c50     40 7C 64 FD | 	dirl	#62
04c54     40 7E 64 FD | 	dirl	#63
04c58     09 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
04c5c     10 0A 67 F0 | 	shl	muldivb_, #16
04c60     07 5C 06 F6 | 	mov	arg02, #7
04c64     85 5D 02 F1 | 	add	arg02, muldivb_
04c68     3E F8 0C FC | 	wrpin	#124, #62
04c6c     3E 5C 16 FC | 	wxpin	arg02, #62
04c70     3F 7C 0C FC | 	wrpin	#62, #63
04c74     14 5C 06 F1 | 	add	arg02, #20
04c78     3F 5C 16 FC | 	wxpin	arg02, #63
04c7c     41 7C 64 FD | 	dirh	#62
04c80     41 7E 64 FD | 	dirh	#63
04c84                 | __system___setbaud_ret
04c84     2D 00 64 FD | 	ret
04c88                 | 
04c88                 | __system___txraw
04c88     02 5A 05 F6 | 	mov	COUNT_, #2
04c8c     B0 00 A0 FD | 	call	#pushregs_
04c90     2D 69 02 F6 | 	mov	local01, arg01
04c94     09 6B 0A FB | 	rdlong	local02, ptr___system__dat__ wz
04c98     0C 00 90 5D |  if_ne	jmp	#LR__0211
04c9c     C2 01 00 FF 
04ca0     00 5A 06 F6 | 	mov	arg01, ##230400
04ca4     9C FF BF FD | 	call	#__system___setbaud
04ca8                 | LR__0211
04ca8     3E 68 26 FC | 	wypin	local01, #62
04cac     1F 02 64 FD | 	waitx	#1
04cb0     54 B3 9F FE | 	loc	pa,	#(@LR__0213-@LR__0212)
04cb4     93 00 A0 FD | 	call	#FCACHE_LOAD_
04cb8                 | LR__0212
04cb8     40 7C 74 FD | 	testp	#62 wc
04cbc     F8 FF 9F 3D |  if_nc	jmp	#LR__0212
04cc0                 | LR__0213
04cc0     01 28 06 F6 | 	mov	result1, #1
04cc4     AF F0 03 F6 | 	mov	ptra, fp
04cc8     BF 00 A0 FD | 	call	#popregs_
04ccc                 | __system___txraw_ret
04ccc     2D 00 64 FD | 	ret
04cd0                 | 
04cd0                 | __system___rxraw
04cd0     0D 5A 05 F6 | 	mov	COUNT_, #13
04cd4     B0 00 A0 FD | 	call	#pushregs_
04cd8     2D 69 02 F6 | 	mov	local01, arg01
04cdc     09 6B 0A FB | 	rdlong	local02, ptr___system__dat__ wz
04ce0     0C 00 90 5D |  if_ne	jmp	#LR__0214
04ce4     C2 01 00 FF 
04ce8     00 5A 06 F6 | 	mov	arg01, ##230400
04cec     54 FF BF FD | 	call	#__system___setbaud
04cf0                 | LR__0214
04cf0     00 68 0E F2 | 	cmp	local01, #0 wz
04cf4     18 00 90 AD |  if_e	jmp	#LR__0215
04cf8     14 6C 06 FB | 	rdlong	local03, #20
04cfc     0A 6C 46 F0 | 	shr	local03, #10
04d00     36 69 02 FD | 	qmul	local01, local03
04d04     18 6E 62 FD | 	getqx	local04
04d08     1A 70 62 FD | 	getct	local05
04d0c     37 71 02 F1 | 	add	local05, local04
04d10                 | LR__0215
04d10     01 72 66 F6 | 	neg	local06, #1
04d14     00 74 06 F6 | 	mov	local07, #0
04d18     04 12 06 F1 | 	add	ptr___system__dat__, #4
04d1c     09 77 02 FB | 	rdlong	local08, ptr___system__dat__
04d20     04 12 86 F1 | 	sub	ptr___system__dat__, #4
04d24                 | LR__0216
04d24     08 76 16 F4 | 	testb	local08, #8 wc
04d28     09 76 76 F4 | 	testbn	local08, #9 andc
04d2c     0A 76 46 F0 | 	shr	local08, #10
04d30     01 74 06 C6 |  if_b	mov	local07, #1
04d34     10 00 90 CD |  if_b	jmp	#LR__0217
04d38     40 7E 6C FD | 	testp	#63 wz
04d3c     01 74 06 A6 |  if_e	mov	local07, #1
04d40     3F 76 8E AA |  if_e	rdpin	local08, #63
04d44     04 76 46 A0 |  if_e	shr	local08, #4
04d48                 | LR__0217
04d48     00 6A 06 F6 | 	mov	local02, #0
04d4c     00 74 0E F2 | 	cmp	local07, #0 wz
04d50     01 6A 66 56 |  if_ne	neg	local02, #1
04d54     00 78 06 F6 | 	mov	local09, #0
04d58     00 7A 06 F6 | 	mov	local10, #0
04d5c     00 68 0E F2 | 	cmp	local01, #0 wz
04d60     01 7A 66 56 |  if_ne	neg	local10, #1
04d64     00 7C 06 F6 | 	mov	local11, #0
04d68     00 7E 06 F6 | 	mov	local12, #0
04d6c     1A 80 62 FD | 	getct	local13
04d70     38 81 82 F1 | 	sub	local13, local05
04d74     00 80 5E F2 | 	cmps	local13, #0 wcz
04d78     01 7E 66 C6 |  if_b	neg	local12, #1
04d7c     00 7E 0E F2 | 	cmp	local12, #0 wz
04d80     01 7C 66 56 |  if_ne	neg	local11, #1
04d84     3E 7B CA F7 | 	test	local10, local11 wz
04d88     01 78 66 56 |  if_ne	neg	local09, #1
04d8c     3C 6B 4A F5 | 	or	local02, local09 wz
04d90     90 FF 9F AD |  if_e	jmp	#LR__0216
04d94     00 74 0E F2 | 	cmp	local07, #0 wz
04d98     3B 73 02 56 |  if_ne	mov	local06, local08
04d9c     FF 72 06 55 |  if_ne	and	local06, #255
04da0     04 12 06 F1 | 	add	ptr___system__dat__, #4
04da4     09 77 62 FC | 	wrlong	local08, ptr___system__dat__
04da8     04 12 86 F1 | 	sub	ptr___system__dat__, #4
04dac     39 29 02 F6 | 	mov	result1, local06
04db0     AF F0 03 F6 | 	mov	ptra, fp
04db4     BF 00 A0 FD | 	call	#popregs_
04db8                 | __system___rxraw_ret
04db8     2D 00 64 FD | 	ret
04dbc                 | 
04dbc                 | __system____builtin_memmove
04dbc     2D 2F 02 F6 | 	mov	_var01, arg01
04dc0     2E 5B 5A F2 | 	cmps	arg01, arg02 wcz
04dc4     50 00 90 3D |  if_ae	jmp	#LR__0225
04dc8     54 B2 9F FE | 	loc	pa,	#(@LR__0219-@LR__0218)
04dcc     93 00 A0 FD | 	call	#FCACHE_LOAD_
04dd0                 | LR__0218
04dd0     03 5E 5E F2 | 	cmps	arg03, #3 wcz
04dd4     18 00 90 ED |  if_be	jmp	#LR__0220
04dd8     2E 31 02 FB | 	rdlong	_var02, arg02
04ddc     2D 31 62 FC | 	wrlong	_var02, arg01
04de0     04 5A 06 F1 | 	add	arg01, #4
04de4     04 5C 06 F1 | 	add	arg02, #4
04de8     04 5E 86 F1 | 	sub	arg03, #4
04dec     E0 FF 9F FD | 	jmp	#LR__0218
04df0                 | LR__0219
04df0                 | LR__0220
04df0     2F 33 0A F6 | 	mov	_var03, arg03 wz
04df4     4C 00 90 AD |  if_e	jmp	#LR__0231
04df8     18 B2 9F FE | 	loc	pa,	#(@LR__0223-@LR__0221)
04dfc     93 00 A0 FD | 	call	#FCACHE_LOAD_
04e00                 | LR__0221
04e00     19 09 D8 FC | 	rep	@LR__0224, _var03
04e04                 | LR__0222
04e04     2E 31 C2 FA | 	rdbyte	_var02, arg02
04e08     2D 31 42 FC | 	wrbyte	_var02, arg01
04e0c     01 5A 06 F1 | 	add	arg01, #1
04e10     01 5C 06 F1 | 	add	arg02, #1
04e14                 | LR__0223
04e14                 | LR__0224
04e14     2C 00 90 FD | 	jmp	#LR__0231
04e18                 | LR__0225
04e18     2F 5B 02 F1 | 	add	arg01, arg03
04e1c     2F 5D 02 F1 | 	add	arg02, arg03
04e20     2F 35 0A F6 | 	mov	_var04, arg03 wz
04e24     1C 00 90 AD |  if_e	jmp	#LR__0230
04e28     E8 B1 9F FE | 	loc	pa,	#(@LR__0228-@LR__0226)
04e2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04e30                 | LR__0226
04e30     1A 09 D8 FC | 	rep	@LR__0229, _var04
04e34                 | LR__0227
04e34     01 5A 86 F1 | 	sub	arg01, #1
04e38     01 5C 86 F1 | 	sub	arg02, #1
04e3c     2E 31 C2 FA | 	rdbyte	_var02, arg02
04e40     2D 31 42 FC | 	wrbyte	_var02, arg01
04e44                 | LR__0228
04e44                 | LR__0229
04e44                 | LR__0230
04e44                 | LR__0231
04e44     17 29 02 F6 | 	mov	result1, _var01
04e48                 | __system____builtin_memmove_ret
04e48     2D 00 64 FD | 	ret
04e4c                 | 
04e4c                 | __system__longmove
04e4c     2D 2F 02 F6 | 	mov	_var01, arg01
04e50     2E 5B 5A F2 | 	cmps	arg01, arg02 wcz
04e54     28 00 90 3D |  if_ae	jmp	#LR__0236
04e58     2F 31 0A F6 | 	mov	_var02, arg03 wz
04e5c     54 00 90 AD |  if_e	jmp	#LR__0242
04e60     B0 B1 9F FE | 	loc	pa,	#(@LR__0234-@LR__0232)
04e64     93 00 A0 FD | 	call	#FCACHE_LOAD_
04e68                 | LR__0232
04e68     18 09 D8 FC | 	rep	@LR__0235, _var02
04e6c                 | LR__0233
04e6c     2E 33 02 FB | 	rdlong	_var03, arg02
04e70     2D 33 62 FC | 	wrlong	_var03, arg01
04e74     04 5A 06 F1 | 	add	arg01, #4
04e78     04 5C 06 F1 | 	add	arg02, #4
04e7c                 | LR__0234
04e7c                 | LR__0235
04e7c     34 00 90 FD | 	jmp	#LR__0242
04e80                 | LR__0236
04e80     2F 35 02 F6 | 	mov	_var04, arg03
04e84     02 34 66 F0 | 	shl	_var04, #2
04e88     1A 5B 02 F1 | 	add	arg01, _var04
04e8c     1A 5D 02 F1 | 	add	arg02, _var04
04e90     2F 37 0A F6 | 	mov	_var05, arg03 wz
04e94     1C 00 90 AD |  if_e	jmp	#LR__0241
04e98     78 B1 9F FE | 	loc	pa,	#(@LR__0239-@LR__0237)
04e9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04ea0                 | LR__0237
04ea0     1B 09 D8 FC | 	rep	@LR__0240, _var05
04ea4                 | LR__0238
04ea4     04 5A 86 F1 | 	sub	arg01, #4
04ea8     04 5C 86 F1 | 	sub	arg02, #4
04eac     2E 33 02 FB | 	rdlong	_var03, arg02
04eb0     2D 33 62 FC | 	wrlong	_var03, arg01
04eb4                 | LR__0239
04eb4                 | LR__0240
04eb4                 | LR__0241
04eb4                 | LR__0242
04eb4     17 29 02 F6 | 	mov	result1, _var01
04eb8                 | __system__longmove_ret
04eb8     2D 00 64 FD | 	ret
04ebc                 | 
04ebc                 | __system____topofstack
04ebc     00 5A 05 F6 | 	mov	COUNT_, #0
04ec0     B0 00 A0 FD | 	call	#pushregs_
04ec4     0C F0 07 F1 | 	add	ptra, #12
04ec8     04 5E 05 F1 | 	add	fp, #4
04ecc     AF 5A 62 FC | 	wrlong	arg01, fp
04ed0     AF 28 02 F6 | 	mov	result1, fp
04ed4     04 5E 85 F1 | 	sub	fp, #4
04ed8     AF F0 03 F6 | 	mov	ptra, fp
04edc     BF 00 A0 FD | 	call	#popregs_
04ee0                 | __system____topofstack_ret
04ee0     2D 00 64 FD | 	ret
04ee4                 | 
04ee4                 | __system___make_methodptr
04ee4     04 5A 05 F6 | 	mov	COUNT_, #4
04ee8     B0 00 A0 FD | 	call	#pushregs_
04eec     2D 69 02 F6 | 	mov	local01, arg01
04ef0     2E 6B 02 F6 | 	mov	local02, arg02
04ef4     08 5A 06 F6 | 	mov	arg01, #8
04ef8     BC 05 B0 FD | 	call	#__system___gc_alloc_managed
04efc     14 6D 0A F6 | 	mov	local03, result1 wz
04f00     10 00 90 AD |  if_e	jmp	#LR__0243
04f04     36 69 62 FC | 	wrlong	local01, local03
04f08     36 6F 02 F6 | 	mov	local04, local03
04f0c     04 6E 06 F1 | 	add	local04, #4
04f10     37 6B 62 FC | 	wrlong	local02, local04
04f14                 | LR__0243
04f14     36 29 02 F6 | 	mov	result1, local03
04f18     AF F0 03 F6 | 	mov	ptra, fp
04f1c     BF 00 A0 FD | 	call	#popregs_
04f20                 | __system___make_methodptr_ret
04f20     2D 00 64 FD | 	ret
04f24                 | 
04f24                 | __system___lockmem
04f24     02 5A 05 F6 | 	mov	COUNT_, #2
04f28     B0 00 A0 FD | 	call	#pushregs_
04f2c     01 28 62 FD | 	cogid	result1
04f30     14 69 02 F6 | 	mov	local01, result1
04f34     00 69 06 F1 | 	add	local01, #256
04f38                 | LR__0244
04f38     2D 6B 0A FB | 	rdlong	local02, arg01 wz
04f3c     2D 69 62 AC |  if_e	wrlong	local01, arg01
04f40     2D 6B 02 AB |  if_e	rdlong	local02, arg01
04f44     2D 6B 02 AB |  if_e	rdlong	local02, arg01
04f48     34 6B 0A F2 | 	cmp	local02, local01 wz
04f4c     E8 FF 9F 5D |  if_ne	jmp	#LR__0244
04f50     AF F0 03 F6 | 	mov	ptra, fp
04f54     BF 00 A0 FD | 	call	#popregs_
04f58                 | __system___lockmem_ret
04f58     2D 00 64 FD | 	ret
04f5c                 | 
04f5c                 | __system___tx
04f5c     02 5A 05 F6 | 	mov	COUNT_, #2
04f60     B0 00 A0 FD | 	call	#pushregs_
04f64     2D 69 02 F6 | 	mov	local01, arg01
04f68     0A 68 0E F2 | 	cmp	local01, #10 wz
04f6c     20 00 90 5D |  if_ne	jmp	#LR__0245
04f70     08 12 06 F1 | 	add	ptr___system__dat__, #8
04f74     09 6B 02 FB | 	rdlong	local02, ptr___system__dat__
04f78     08 12 86 F1 | 	sub	ptr___system__dat__, #8
04f7c     02 6A CE F7 | 	test	local02, #2 wz
04f80     0C 00 90 AD |  if_e	jmp	#LR__0245
04f84     0D 6A 06 F6 | 	mov	local02, #13
04f88     0D 5A 06 F6 | 	mov	arg01, #13
04f8c     F8 FC BF FD | 	call	#__system___txraw
04f90                 | LR__0245
04f90     34 5B 02 F6 | 	mov	arg01, local01
04f94     F0 FC BF FD | 	call	#__system___txraw
04f98     AF F0 03 F6 | 	mov	ptra, fp
04f9c     BF 00 A0 FD | 	call	#popregs_
04fa0                 | __system___tx_ret
04fa0     2D 00 64 FD | 	ret
04fa4                 | 
04fa4                 | __system___rx
04fa4     02 5A 05 F6 | 	mov	COUNT_, #2
04fa8     B0 00 A0 FD | 	call	#pushregs_
04fac                 | LR__0246
04fac     00 5A 06 F6 | 	mov	arg01, #0
04fb0     1C FD BF FD | 	call	#__system___rxraw
04fb4     14 69 02 F6 | 	mov	local01, result1
04fb8     FF FF 7F FF 
04fbc     FF 69 0E F2 | 	cmp	local01, ##-1 wz
04fc0     E8 FF 9F AD |  if_e	jmp	#LR__0246
04fc4     0D 68 0E F2 | 	cmp	local01, #13 wz
04fc8     14 00 90 5D |  if_ne	jmp	#LR__0247
04fcc     08 12 06 F1 | 	add	ptr___system__dat__, #8
04fd0     09 6B 02 FB | 	rdlong	local02, ptr___system__dat__
04fd4     08 12 86 F1 | 	sub	ptr___system__dat__, #8
04fd8     02 6A CE F7 | 	test	local02, #2 wz
04fdc     0A 68 06 56 |  if_ne	mov	local01, #10
04fe0                 | LR__0247
04fe0     08 12 06 F1 | 	add	ptr___system__dat__, #8
04fe4     09 6B 02 FB | 	rdlong	local02, ptr___system__dat__
04fe8     08 12 86 F1 | 	sub	ptr___system__dat__, #8
04fec     01 6A CE F7 | 	test	local02, #1 wz
04ff0     1C 00 90 AD |  if_e	jmp	#LR__0250
04ff4     7F 68 0E F2 | 	cmp	local01, #127 wz
04ff8     0C 00 90 5D |  if_ne	jmp	#LR__0248
04ffc     08 5A 06 F6 | 	mov	arg01, #8
05000     58 FF BF FD | 	call	#__system___tx
05004     08 00 90 FD | 	jmp	#LR__0249
05008                 | LR__0248
05008     34 5B 02 F6 | 	mov	arg01, local01
0500c     4C FF BF FD | 	call	#__system___tx
05010                 | LR__0249
05010                 | LR__0250
05010     34 29 02 F6 | 	mov	result1, local01
05014     AF F0 03 F6 | 	mov	ptra, fp
05018     BF 00 A0 FD | 	call	#popregs_
0501c                 | __system___rx_ret
0501c     2D 00 64 FD | 	ret
05020                 | 
05020                 | __system___pinread
05020     20 5A CE F7 | 	test	arg01, #32 wz
05024     FF 2F 02 56 |  if_ne	mov	_var01, inb
05028     FE 2F 02 A6 |  if_e	mov	_var01, ina
0502c     17 29 02 F6 | 	mov	result1, _var01
05030     2D 29 42 F0 | 	shr	result1, arg01
05034     06 5A 46 F0 | 	shr	arg01, #6
05038     2D 29 42 F7 | 	zerox	result1, arg01
0503c                 | __system___pinread_ret
0503c     2D 00 64 FD | 	ret
05040                 | 
05040                 | __system___waitms
05040     03 5A 05 F6 | 	mov	COUNT_, #3
05044     B0 00 A0 FD | 	call	#pushregs_
05048     2D 69 02 F6 | 	mov	local01, arg01
0504c     14 6A 06 FB | 	rdlong	local02, #20
05050     C4 AF 9F FE | 	loc	pa,	#(@LR__0252-@LR__0251)
05054     93 00 A0 FD | 	call	#FCACHE_LOAD_
05058                 | LR__0251
05058     01 00 00 FF 
0505c     E8 69 5E F2 | 	cmps	local01, ##1000 wcz
05060     1F 6A 62 1D |  if_a	waitx	local02
05064     01 00 00 1F 
05068     E8 69 86 11 |  if_a	sub	local01, ##1000
0506c     E8 FF 9F 1D |  if_a	jmp	#LR__0251
05070                 | LR__0252
05070     0C 12 06 F1 | 	add	ptr___system__dat__, #12
05074     09 6D 0A FB | 	rdlong	local03, ptr___system__dat__ wz
05078     0C 12 86 F1 | 	sub	ptr___system__dat__, #12
0507c     20 00 90 5D |  if_ne	jmp	#LR__0253
05080     35 09 03 F6 | 	mov	muldiva_, local02
05084     01 00 00 FF 
05088     E8 0B 07 F6 | 	mov	muldivb_, ##1000
0508c     CC 00 A0 FD | 	call	#unsdivide_
05090     85 6D 02 F6 | 	mov	local03, muldivb_
05094     0C 12 06 F1 | 	add	ptr___system__dat__, #12
05098     09 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
0509c     0C 12 86 F1 | 	sub	ptr___system__dat__, #12
050a0                 | LR__0253
050a0     00 68 5E F2 | 	cmps	local01, #0 wcz
050a4     36 69 02 1D |  if_a	qmul	local01, local03
050a8     18 5A 62 1D |  if_a	getqx	arg01
050ac     1F 5A 62 1D |  if_a	waitx	arg01
050b0     AF F0 03 F6 | 	mov	ptra, fp
050b4     BF 00 A0 FD | 	call	#popregs_
050b8                 | __system___waitms_ret
050b8     2D 00 64 FD | 	ret
050bc                 | 
050bc                 | __system___waitus
050bc     02 5A 05 F6 | 	mov	COUNT_, #2
050c0     B0 00 A0 FD | 	call	#pushregs_
050c4     2D 69 02 F6 | 	mov	local01, arg01
050c8     10 12 06 F1 | 	add	ptr___system__dat__, #16
050cc     09 6B 0A FB | 	rdlong	local02, ptr___system__dat__ wz
050d0     10 12 86 F1 | 	sub	ptr___system__dat__, #16
050d4     20 00 90 5D |  if_ne	jmp	#LR__0254
050d8     14 08 07 FB | 	rdlong	muldiva_, #20
050dc     A1 07 00 FF 
050e0     40 0A 07 F6 | 	mov	muldivb_, ##1000000
050e4     CC 00 A0 FD | 	call	#unsdivide_
050e8     85 6B 02 F6 | 	mov	local02, muldivb_
050ec     10 12 06 F1 | 	add	ptr___system__dat__, #16
050f0     09 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
050f4     10 12 86 F1 | 	sub	ptr___system__dat__, #16
050f8                 | LR__0254
050f8     35 69 02 FD | 	qmul	local01, local02
050fc     18 5A 62 FD | 	getqx	arg01
05100     1F 5A 62 FD | 	waitx	arg01
05104     AF F0 03 F6 | 	mov	ptra, fp
05108     BF 00 A0 FD | 	call	#popregs_
0510c                 | __system___waitus_ret
0510c     2D 00 64 FD | 	ret
05110                 | 
05110                 | __system___basic_open
05110     05 5A 05 F6 | 	mov	COUNT_, #5
05114     B0 00 A0 FD | 	call	#pushregs_
05118     2E 69 02 F6 | 	mov	local01, arg02
0511c     2F 6B 02 F6 | 	mov	local02, arg03
05120     30 6D 02 F6 | 	mov	local03, arg04
05124     94 0B B0 FD | 	call	#__system____getftab
05128     14 6F 0A F6 | 	mov	local04, result1 wz
0512c     18 00 90 5D |  if_ne	jmp	#LR__0255
05130     03 5B 02 F6 | 	mov	arg01, abortchain
05134     0C 5C 06 F6 | 	mov	arg02, #12
05138     01 5E 06 F6 | 	mov	arg03, #1
0513c     F0 00 A0 FD | 	call	#__longjmp
05140     01 28 66 F6 | 	neg	result1, #1
05144     70 00 90 FD | 	jmp	#LR__0259
05148                 | LR__0255
05148     00 68 0E F2 | 	cmp	local01, #0 wz
0514c     48 00 90 AD |  if_e	jmp	#LR__0257
05150     04 5A 06 F6 | 	mov	arg01, #4
05154     60 03 B0 FD | 	call	#__system___gc_alloc_managed
05158     14 71 0A F6 | 	mov	local05, result1 wz
0515c     18 00 90 5D |  if_ne	jmp	#LR__0256
05160     03 5B 02 F6 | 	mov	arg01, abortchain
05164     07 5C 06 F6 | 	mov	arg02, #7
05168     01 5E 06 F6 | 	mov	arg03, #1
0516c     F0 00 A0 FD | 	call	#__longjmp
05170     01 28 66 F6 | 	neg	result1, #1
05174     40 00 90 FD | 	jmp	#LR__0259
05178                 | LR__0256
05178     38 69 62 FC | 	wrlong	local01, local05
0517c     08 5D 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
05180     38 5B 02 F6 | 	mov	arg01, local05
05184     5C FD BF FD | 	call	#__system___make_methodptr
05188     18 6E 06 F1 | 	add	local04, #24
0518c     37 29 62 FC | 	wrlong	result1, local04
05190     18 6E 86 F1 | 	sub	local04, #24
05194     0C 00 90 FD | 	jmp	#LR__0258
05198                 | LR__0257
05198     18 6E 06 F1 | 	add	local04, #24
0519c     37 69 62 FC | 	wrlong	local01, local04
051a0     18 6E 86 F1 | 	sub	local04, #24
051a4                 | LR__0258
051a4     1C 6E 06 F1 | 	add	local04, #28
051a8     37 6B 62 FC | 	wrlong	local02, local04
051ac     04 6E 06 F1 | 	add	local04, #4
051b0     37 6D 62 FC | 	wrlong	local03, local04
051b4     00 28 06 F6 | 	mov	result1, #0
051b8                 | LR__0259
051b8     AF F0 03 F6 | 	mov	ptra, fp
051bc     BF 00 A0 FD | 	call	#popregs_
051c0                 | __system___basic_open_ret
051c0     2D 00 64 FD | 	ret
051c4                 | 
051c4                 | __system___gc_ptrs
051c4     0A 5A 05 F6 | 	mov	COUNT_, #10
051c8     B0 00 A0 FD | 	call	#pushregs_
051cc     02 69 02 F6 | 	mov	local01, __heap_ptr
051d0     34 6B 02 F6 | 	mov	local02, local01
051d4     07 00 00 FF 
051d8     F8 6B 06 F1 | 	add	local02, ##4088
051dc     34 6D 0A FB | 	rdlong	local03, local01 wz
051e0     74 00 90 5D |  if_ne	jmp	#LR__0260
051e4     35 6F 02 F6 | 	mov	local04, local02
051e8     34 6F 82 F1 | 	sub	local04, local01
051ec     34 03 58 FC | 	wrword	#1, local01
051f0     34 71 02 F6 | 	mov	local05, local01
051f4     02 70 06 F1 | 	add	local05, #2
051f8     36 00 80 FF 
051fc     38 21 59 FC | 	wrword	##27792, local05
05200     34 73 02 F6 | 	mov	local06, local01
05204     04 72 06 F1 | 	add	local06, #4
05208     39 01 58 FC | 	wrword	#0, local06
0520c     34 75 02 F6 | 	mov	local07, local01
05210     06 74 06 F1 | 	add	local07, #6
05214     3A 03 58 FC | 	wrword	#1, local07
05218     10 68 06 F1 | 	add	local01, #16
0521c     37 6D 52 F6 | 	abs	local03, local04 wc
05220     04 6C 46 F0 | 	shr	local03, #4
05224     36 6D 62 C6 |  if_b	neg	local03, local03
05228     34 6D 52 FC | 	wrword	local03, local01
0522c     34 77 02 F6 | 	mov	local08, local01
05230     02 76 06 F1 | 	add	local08, #2
05234     36 00 80 FF 
05238     3B 1F 59 FC | 	wrword	##27791, local08
0523c     34 79 02 F6 | 	mov	local09, local01
05240     04 78 06 F1 | 	add	local09, #4
05244     3C 01 58 FC | 	wrword	#0, local09
05248     34 7B 02 F6 | 	mov	local10, local01
0524c     06 7A 06 F1 | 	add	local10, #6
05250     3D 01 58 FC | 	wrword	#0, local10
05254     10 68 86 F1 | 	sub	local01, #16
05258                 | LR__0260
05258     35 2B 02 F6 | 	mov	result2, local02
0525c     34 29 02 F6 | 	mov	result1, local01
05260     AF F0 03 F6 | 	mov	ptra, fp
05264     BF 00 A0 FD | 	call	#popregs_
05268                 | __system___gc_ptrs_ret
05268     2D 00 64 FD | 	ret
0526c                 | 
0526c                 | __system___gc_nextBlockPtr
0526c     02 5A 05 F6 | 	mov	COUNT_, #2
05270     B0 00 A0 FD | 	call	#pushregs_
05274     2D 69 02 F6 | 	mov	local01, arg01
05278     34 6B EA FA | 	rdword	local02, local01 wz
0527c     10 00 90 5D |  if_ne	jmp	#LR__0261
05280     33 00 00 FF 
05284     BC 5B 06 F6 | 	mov	arg01, ##@LR__0357
05288     F8 01 B0 FD | 	call	#__system___gc_errmsg
0528c     0C 00 90 FD | 	jmp	#LR__0262
05290                 | LR__0261
05290     04 6A 66 F0 | 	shl	local02, #4
05294     34 29 02 F6 | 	mov	result1, local01
05298     35 29 02 F1 | 	add	result1, local02
0529c                 | LR__0262
0529c     AF F0 03 F6 | 	mov	ptra, fp
052a0     BF 00 A0 FD | 	call	#popregs_
052a4                 | __system___gc_nextBlockPtr_ret
052a4     2D 00 64 FD | 	ret
052a8                 | 
052a8                 | __system___gc_tryalloc
052a8     1B 5A 05 F6 | 	mov	COUNT_, #27
052ac     B0 00 A0 FD | 	call	#pushregs_
052b0     2D 69 02 F6 | 	mov	local01, arg01
052b4     2E 6B 02 F6 | 	mov	local02, arg02
052b8     08 FF BF FD | 	call	#__system___gc_ptrs
052bc     14 6D 02 F6 | 	mov	local03, result1
052c0     15 6F 02 F6 | 	mov	local04, result2
052c4     36 71 02 F6 | 	mov	local05, local03
052c8     00 72 06 F6 | 	mov	local06, #0
052cc     88 AD 9F FE | 	loc	pa,	#(@LR__0264-@LR__0263)
052d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
052d4                 | LR__0263
052d4     38 75 02 F6 | 	mov	local07, local05
052d8     06 70 06 F1 | 	add	local05, #6
052dc     38 77 02 F6 | 	mov	local08, local05
052e0     36 79 02 F6 | 	mov	local09, local03
052e4     3B 7B E2 FA | 	rdword	local10, local08
052e8     3C 5B 02 F6 | 	mov	arg01, local09
052ec     3D 5D 0A F6 | 	mov	arg02, local10 wz
052f0     00 28 06 A6 |  if_e	mov	result1, #0
052f4     04 5C 66 50 |  if_ne	shl	arg02, #4
052f8     2E 5B 02 51 |  if_ne	add	arg01, arg02
052fc     2D 29 02 56 |  if_ne	mov	result1, arg01
05300     14 7D 02 F6 | 	mov	local11, result1
05304     3E 71 0A F6 | 	mov	local05, local11 wz
05308     38 79 02 56 |  if_ne	mov	local09, local05
0530c     3C 7F 02 56 |  if_ne	mov	local12, local09
05310     3F 73 E2 5A |  if_ne	rdword	local06, local12
05314     00 70 0E F2 | 	cmp	local05, #0 wz
05318     10 00 90 AD |  if_e	jmp	#LR__0265
0531c     37 71 5A F2 | 	cmps	local05, local04 wcz
05320     08 00 90 3D |  if_ae	jmp	#LR__0265
05324     39 69 5A F2 | 	cmps	local01, local06 wcz
05328     A8 FF 9F 1D |  if_a	jmp	#LR__0263
0532c                 | LR__0264
0532c                 | LR__0265
0532c     00 70 0E F2 | 	cmp	local05, #0 wz
05330     38 29 02 A6 |  if_e	mov	result1, local05
05334     40 01 90 AD |  if_e	jmp	#LR__0268
05338     38 81 02 F6 | 	mov	local13, local05
0533c     06 80 06 F1 | 	add	local13, #6
05340     40 83 E2 FA | 	rdword	local14, local13
05344     39 69 5A F2 | 	cmps	local01, local06 wcz
05348     CC 00 90 3D |  if_ae	jmp	#LR__0267
0534c     38 85 02 F6 | 	mov	local15, local05
05350     42 69 52 FC | 	wrword	local01, local15
05354     34 87 02 F6 | 	mov	local16, local01
05358     04 86 66 F0 | 	shl	local16, #4
0535c     38 89 02 F6 | 	mov	local17, local05
05360     43 89 02 F1 | 	add	local17, local16
05364     39 8B 02 F6 | 	mov	local18, local06
05368     34 8B 82 F1 | 	sub	local18, local01
0536c     44 8D 02 F6 | 	mov	local19, local17
05370     46 8B 52 FC | 	wrword	local18, local19
05374     44 8F 02 F6 | 	mov	local20, local17
05378     02 8E 06 F1 | 	add	local20, #2
0537c     36 00 80 FF 
05380     47 1F 59 FC | 	wrword	##27791, local20
05384     44 91 02 F6 | 	mov	local21, local17
05388     04 90 06 F1 | 	add	local21, #4
0538c     38 5D 0A F6 | 	mov	arg02, local05 wz
05390     00 28 06 A6 |  if_e	mov	result1, #0
05394     36 5D 82 51 |  if_ne	sub	arg02, local03
05398     04 5C 46 50 |  if_ne	shr	arg02, #4
0539c     2E 29 02 56 |  if_ne	mov	result1, arg02
053a0     48 29 52 FC | 	wrword	result1, local21
053a4     44 93 02 F6 | 	mov	local22, local17
053a8     40 79 E2 FA | 	rdword	local09, local13
053ac     06 92 06 F1 | 	add	local22, #6
053b0     49 79 52 FC | 	wrword	local09, local22
053b4     44 95 02 F6 | 	mov	local23, local17
053b8     4A 5D 0A F6 | 	mov	arg02, local23 wz
053bc     00 28 06 A6 |  if_e	mov	result1, #0
053c0     36 5D 82 51 |  if_ne	sub	arg02, local03
053c4     04 5C 46 50 |  if_ne	shr	arg02, #4
053c8     2E 29 02 56 |  if_ne	mov	result1, arg02
053cc     14 83 02 F6 | 	mov	local14, result1
053d0     44 5B 02 F6 | 	mov	arg01, local17
053d4     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
053d8     14 97 0A F6 | 	mov	local24, result1 wz
053dc     38 00 90 AD |  if_e	jmp	#LR__0266
053e0     37 97 5A F2 | 	cmps	local24, local04 wcz
053e4     30 00 90 3D |  if_ae	jmp	#LR__0266
053e8     4B 99 02 F6 | 	mov	local25, local24
053ec     04 98 06 F1 | 	add	local25, #4
053f0     36 79 02 F6 | 	mov	local09, local03
053f4     4A 7B 02 F6 | 	mov	local10, local23
053f8     3C 5B 02 F6 | 	mov	arg01, local09
053fc     3D 5D 0A F6 | 	mov	arg02, local10 wz
05400     00 28 06 A6 |  if_e	mov	result1, #0
05404     2D 5D 82 51 |  if_ne	sub	arg02, arg01
05408     04 5C 46 50 |  if_ne	shr	arg02, #4
0540c     2E 29 02 56 |  if_ne	mov	result1, arg02
05410     14 7D 02 F6 | 	mov	local11, result1
05414     4C 7D 52 FC | 	wrword	local11, local25
05418                 | LR__0266
05418                 | LR__0267
05418     06 74 06 F1 | 	add	local07, #6
0541c     3A 83 52 FC | 	wrword	local14, local07
05420     36 00 00 FF 
05424     80 78 06 F6 | 	mov	local09, ##27776
05428     35 79 42 F5 | 	or	local09, local02
0542c     38 9B 02 F6 | 	mov	local26, local05
05430     02 9A 06 F1 | 	add	local26, #2
05434     01 28 62 FD | 	cogid	result1
05438     14 79 42 F5 | 	or	local09, result1
0543c     4D 79 52 FC | 	wrword	local09, local26
05440     36 9D 02 F6 | 	mov	local27, local03
05444     08 9C 06 F1 | 	add	local27, #8
05448     4E 79 E2 FA | 	rdword	local09, local27
0544c     40 79 52 FC | 	wrword	local09, local13
05450     38 5D 0A F6 | 	mov	arg02, local05 wz
05454     00 28 06 A6 |  if_e	mov	result1, #0
05458     36 5D 82 51 |  if_ne	sub	arg02, local03
0545c     04 5C 46 50 |  if_ne	shr	arg02, #4
05460     2E 29 02 56 |  if_ne	mov	result1, arg02
05464     4E 29 52 FC | 	wrword	result1, local27
05468     08 70 06 F1 | 	add	local05, #8
0546c     38 29 02 F6 | 	mov	result1, local05
05470     00 C0 31 FF 
05474     00 28 46 F5 | 	or	result1, ##1669332992
05478                 | LR__0268
05478     AF F0 03 F6 | 	mov	ptra, fp
0547c     BF 00 A0 FD | 	call	#popregs_
05480                 | __system___gc_tryalloc_ret
05480     2D 00 64 FD | 	ret
05484                 | 
05484                 | __system___gc_errmsg
05484     02 5A 05 F6 | 	mov	COUNT_, #2
05488     B0 00 A0 FD | 	call	#pushregs_
0548c     2D 69 02 F6 | 	mov	local01, arg01
05490                 | LR__0269
05490     34 6B CA FA | 	rdbyte	local02, local01 wz
05494     01 68 06 F1 | 	add	local01, #1
05498     0C 00 90 AD |  if_e	jmp	#LR__0270
0549c     35 5B 02 F6 | 	mov	arg01, local02
054a0     B8 FA BF FD | 	call	#__system___tx
054a4     E8 FF 9F FD | 	jmp	#LR__0269
054a8                 | LR__0270
054a8     00 28 06 F6 | 	mov	result1, #0
054ac     AF F0 03 F6 | 	mov	ptra, fp
054b0     BF 00 A0 FD | 	call	#popregs_
054b4                 | __system___gc_errmsg_ret
054b4     2D 00 64 FD | 	ret
054b8                 | 
054b8                 | __system___gc_alloc_managed
054b8     02 5A 05 F6 | 	mov	COUNT_, #2
054bc     B0 00 A0 FD | 	call	#pushregs_
054c0     2D 69 02 F6 | 	mov	local01, arg01
054c4     00 5C 06 F6 | 	mov	arg02, #0
054c8     30 00 B0 FD | 	call	#__system___gc_doalloc
054cc     14 6B 0A F6 | 	mov	local02, result1 wz
054d0     18 00 90 5D |  if_ne	jmp	#LR__0271
054d4     00 68 5E F2 | 	cmps	local01, #0 wcz
054d8     10 00 90 ED |  if_be	jmp	#LR__0271
054dc     33 00 00 FF 
054e0     D8 5B 06 F6 | 	mov	arg01, ##@LR__0358
054e4     9C FF BF FD | 	call	#__system___gc_errmsg
054e8     04 00 90 FD | 	jmp	#LR__0272
054ec                 | LR__0271
054ec     35 29 02 F6 | 	mov	result1, local02
054f0                 | LR__0272
054f0     AF F0 03 F6 | 	mov	ptra, fp
054f4     BF 00 A0 FD | 	call	#popregs_
054f8                 | __system___gc_alloc_managed_ret
054f8     2D 00 64 FD | 	ret
054fc                 | 
054fc                 | __system___gc_doalloc
054fc     07 5A 05 F6 | 	mov	COUNT_, #7
05500     B0 00 A0 FD | 	call	#pushregs_
05504     2D 69 0A F6 | 	mov	local01, arg01 wz
05508     2E 6B 02 F6 | 	mov	local02, arg02
0550c     00 28 06 A6 |  if_e	mov	result1, #0
05510     8C 00 90 AD |  if_e	jmp	#LR__0280
05514     17 68 06 F1 | 	add	local01, #23
05518     0F 68 26 F5 | 	andn	local01, #15
0551c     04 68 46 F0 | 	shr	local01, #4
05520     14 12 06 F1 | 	add	ptr___system__dat__, #20
05524     09 6D 02 F6 | 	mov	local03, ptr___system__dat__
05528     36 5B 02 F6 | 	mov	arg01, local03
0552c     14 12 86 F1 | 	sub	ptr___system__dat__, #20
05530     F0 F9 BF FD | 	call	#__system___lockmem
05534     34 5B 02 F6 | 	mov	arg01, local01
05538     35 5D 02 F6 | 	mov	arg02, local02
0553c     68 FD BF FD | 	call	#__system___gc_tryalloc
05540     14 6F 0A F6 | 	mov	local04, result1 wz
05544     14 00 90 5D |  if_ne	jmp	#LR__0273
05548     10 03 B0 FD | 	call	#__system___gc_docollect
0554c     34 5B 02 F6 | 	mov	arg01, local01
05550     35 5D 02 F6 | 	mov	arg02, local02
05554     50 FD BF FD | 	call	#__system___gc_tryalloc
05558     14 6F 02 F6 | 	mov	local04, result1
0555c                 | LR__0273
0555c     36 01 68 FC | 	wrlong	#0, local03
05560     00 6E 0E F2 | 	cmp	local04, #0 wz
05564     34 00 90 AD |  if_e	jmp	#LR__0279
05568     04 68 66 F0 | 	shl	local01, #4
0556c     08 68 86 F1 | 	sub	local01, #8
05570     34 71 52 F6 | 	abs	local05, local01 wc
05574     02 70 46 F0 | 	shr	local05, #2
05578     38 71 62 C6 |  if_b	neg	local05, local05
0557c     38 73 0A F6 | 	mov	local06, local05 wz
05580     37 75 02 F6 | 	mov	local07, local04
05584     14 00 90 AD |  if_e	jmp	#LR__0278
05588     80 AA 9F FE | 	loc	pa,	#(@LR__0276-@LR__0274)
0558c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05590                 | LR__0274
05590     39 05 D8 FC | 	rep	@LR__0277, local06
05594                 | LR__0275
05594     3A 01 68 FC | 	wrlong	#0, local07
05598     04 74 06 F1 | 	add	local07, #4
0559c                 | LR__0276
0559c                 | LR__0277
0559c                 | LR__0278
0559c                 | LR__0279
0559c     37 29 02 F6 | 	mov	result1, local04
055a0                 | LR__0280
055a0     AF F0 03 F6 | 	mov	ptra, fp
055a4     BF 00 A0 FD | 	call	#popregs_
055a8                 | __system___gc_doalloc_ret
055a8     2D 00 64 FD | 	ret
055ac                 | 
055ac                 | __system___gc_isvalidptr
055ac     2F 2F 02 F6 | 	mov	_var01, arg03
055b0     17 31 02 F6 | 	mov	_var02, _var01
055b4     00 F8 7F FF 
055b8     00 30 06 F5 | 	and	_var02, ##-1048576
055bc     00 C0 31 FF 
055c0     00 30 0E F2 | 	cmp	_var02, ##1669332992 wz
055c4     00 28 06 56 |  if_ne	mov	result1, #0
055c8     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
055cc     08 2E 86 F1 | 	sub	_var01, #8
055d0     17 33 02 F6 | 	mov	_var03, _var01
055d4     00 F8 7F FF 
055d8     00 32 26 F5 | 	andn	_var03, ##-1048576
055dc     2D 33 5A F2 | 	cmps	_var03, arg01 wcz
055e0     08 00 90 CD |  if_b	jmp	#LR__0281
055e4     2E 33 5A F2 | 	cmps	_var03, arg02 wcz
055e8     08 00 90 CD |  if_b	jmp	#LR__0282
055ec                 | LR__0281
055ec     00 28 06 F6 | 	mov	result1, #0
055f0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
055f4                 | LR__0282
055f4     19 31 02 F6 | 	mov	_var02, _var03
055f8     2D 31 62 F5 | 	xor	_var02, arg01
055fc     0F 30 0E F5 | 	and	_var02, #15 wz
05600     00 28 06 56 |  if_ne	mov	result1, #0
05604     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
05608     19 35 02 F6 | 	mov	_var04, _var03
0560c     02 34 06 F1 | 	add	_var04, #2
05610     1A 31 E2 FA | 	rdword	_var02, _var04
05614     7F 00 00 FF 
05618     C0 31 06 F5 | 	and	_var02, ##65472
0561c     36 00 00 FF 
05620     80 30 0E F2 | 	cmp	_var02, ##27776 wz
05624     00 28 06 56 |  if_ne	mov	result1, #0
05628     19 29 02 A6 |  if_e	mov	result1, _var03
0562c                 | __system___gc_isvalidptr_ret
0562c     2D 00 64 FD | 	ret
05630                 | 
05630                 | __system___gc_dofree
05630     1A 5A 05 F6 | 	mov	COUNT_, #26
05634     B0 00 A0 FD | 	call	#pushregs_
05638     2D 69 02 F6 | 	mov	local01, arg01
0563c     84 FB BF FD | 	call	#__system___gc_ptrs
05640     15 6B 02 F6 | 	mov	local02, result2
05644     14 6D 02 F6 | 	mov	local03, result1
05648     34 6F 02 F6 | 	mov	local04, local01
0564c     02 6E 06 F1 | 	add	local04, #2
05650     36 00 80 FF 
05654     37 1F 59 FC | 	wrword	##27791, local04
05658     34 71 02 F6 | 	mov	local05, local01
0565c     34 5B 02 F6 | 	mov	arg01, local01
05660     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
05664     14 73 02 F6 | 	mov	local06, result1
05668     E4 A9 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
0566c     93 00 A0 FD | 	call	#FCACHE_LOAD_
05670                 | LR__0283
05670     04 70 06 F1 | 	add	local05, #4
05674     38 75 02 F6 | 	mov	local07, local05
05678     3A 5D EA FA | 	rdword	arg02, local07 wz
0567c     36 5B 02 F6 | 	mov	arg01, local03
05680     00 28 06 A6 |  if_e	mov	result1, #0
05684     04 5C 66 50 |  if_ne	shl	arg02, #4
05688     2E 5B 02 51 |  if_ne	add	arg01, arg02
0568c     2D 29 02 56 |  if_ne	mov	result1, arg01
05690     14 71 0A F6 | 	mov	local05, result1 wz
05694     28 00 90 AD |  if_e	jmp	#LR__0285
05698     38 5B 02 F6 | 	mov	arg01, local05
0569c     00 76 06 F6 | 	mov	local08, #0
056a0     02 5A 06 F1 | 	add	arg01, #2
056a4     2D 79 E2 FA | 	rdword	local09, arg01
056a8     36 00 00 FF 
056ac     8F 78 0E F2 | 	cmp	local09, ##27791 wz
056b0     01 76 66 A6 |  if_e	neg	local08, #1
056b4     3B 29 02 F6 | 	mov	result1, local08
056b8     14 7B 0A F6 | 	mov	local10, result1 wz
056bc     B0 FF 9F AD |  if_e	jmp	#LR__0283
056c0                 | LR__0284
056c0                 | LR__0285
056c0     00 70 0E F2 | 	cmp	local05, #0 wz
056c4     36 71 02 A6 |  if_e	mov	local05, local03
056c8     38 7D 02 F6 | 	mov	local11, local05
056cc     06 7C 06 F1 | 	add	local11, #6
056d0     34 7F 02 F6 | 	mov	local12, local01
056d4     3E 81 E2 FA | 	rdword	local13, local11
056d8     06 7E 06 F1 | 	add	local12, #6
056dc     3F 81 52 FC | 	wrword	local13, local12
056e0     34 5D 0A F6 | 	mov	arg02, local01 wz
056e4     00 28 06 A6 |  if_e	mov	result1, #0
056e8     36 5D 82 51 |  if_ne	sub	arg02, local03
056ec     04 5C 46 50 |  if_ne	shr	arg02, #4
056f0     2E 29 02 56 |  if_ne	mov	result1, arg02
056f4     14 83 02 F6 | 	mov	local14, result1
056f8     3E 83 52 FC | 	wrword	local14, local11
056fc     36 71 0A F2 | 	cmp	local05, local03 wz
05700     74 00 90 AD |  if_e	jmp	#LR__0288
05704     38 5B 02 F6 | 	mov	arg01, local05
05708     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
0570c     34 29 0A F2 | 	cmp	result1, local01 wz
05710     64 00 90 5D |  if_ne	jmp	#LR__0287
05714     38 85 02 F6 | 	mov	local15, local05
05718     42 87 E2 FA | 	rdword	local16, local15
0571c     34 89 02 F6 | 	mov	local17, local01
05720     44 7B E2 FA | 	rdword	local10, local17
05724     3D 87 02 F1 | 	add	local16, local10
05728     42 87 52 FC | 	wrword	local16, local15
0572c     37 01 58 FC | 	wrword	#0, local04
05730     34 5B 02 F6 | 	mov	arg01, local01
05734     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
05738     14 73 02 F6 | 	mov	local06, result1
0573c     35 73 5A F2 | 	cmps	local06, local02 wcz
05740     24 00 90 3D |  if_ae	jmp	#LR__0286
05744     39 8B 02 F6 | 	mov	local18, local06
05748     04 8A 06 F1 | 	add	local18, #4
0574c     38 5D 0A F6 | 	mov	arg02, local05 wz
05750     00 28 06 A6 |  if_e	mov	result1, #0
05754     36 5D 82 51 |  if_ne	sub	arg02, local03
05758     04 5C 46 50 |  if_ne	shr	arg02, #4
0575c     2E 29 02 56 |  if_ne	mov	result1, arg02
05760     14 83 02 F6 | 	mov	local14, result1
05764     45 83 52 FC | 	wrword	local14, local18
05768                 | LR__0286
05768     3F 81 E2 FA | 	rdword	local13, local12
0576c     3E 81 52 FC | 	wrword	local13, local11
05770     3F 01 58 FC | 	wrword	#0, local12
05774     38 69 02 F6 | 	mov	local01, local05
05778                 | LR__0287
05778                 | LR__0288
05778     34 5B 02 F6 | 	mov	arg01, local01
0577c     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
05780     14 8D 0A F6 | 	mov	local19, result1 wz
05784     C4 00 90 AD |  if_e	jmp	#LR__0290
05788     35 8D 5A F2 | 	cmps	local19, local02 wcz
0578c     BC 00 90 3D |  if_ae	jmp	#LR__0290
05790     46 5B 02 F6 | 	mov	arg01, local19
05794     00 76 06 F6 | 	mov	local08, #0
05798     02 5A 06 F1 | 	add	arg01, #2
0579c     2D 79 E2 FA | 	rdword	local09, arg01
057a0     36 00 00 FF 
057a4     8F 78 0E F2 | 	cmp	local09, ##27791 wz
057a8     01 76 66 A6 |  if_e	neg	local08, #1
057ac     3B 29 0A F6 | 	mov	result1, local08 wz
057b0     98 00 90 AD |  if_e	jmp	#LR__0290
057b4     34 71 02 F6 | 	mov	local05, local01
057b8     46 69 02 F6 | 	mov	local01, local19
057bc     38 8F 02 F6 | 	mov	local20, local05
057c0     47 91 E2 FA | 	rdword	local21, local20
057c4     34 93 02 F6 | 	mov	local22, local01
057c8     49 7B E2 FA | 	rdword	local10, local22
057cc     3D 91 02 F1 | 	add	local21, local10
057d0     47 91 52 FC | 	wrword	local21, local20
057d4     34 95 02 F6 | 	mov	local23, local01
057d8     06 94 06 F1 | 	add	local23, #6
057dc     38 97 02 F6 | 	mov	local24, local05
057e0     4A 81 E2 FA | 	rdword	local13, local23
057e4     06 96 06 F1 | 	add	local24, #6
057e8     4B 81 52 FC | 	wrword	local13, local24
057ec     34 99 02 F6 | 	mov	local25, local01
057f0     02 98 06 F1 | 	add	local25, #2
057f4     4C 55 59 FC | 	wrword	#170, local25
057f8     4A 01 58 FC | 	wrword	#0, local23
057fc     34 81 02 F6 | 	mov	local13, local01
05800     40 5B 02 F6 | 	mov	arg01, local13
05804     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
05808     14 7B 02 F6 | 	mov	local10, result1
0580c     3D 73 0A F6 | 	mov	local06, local10 wz
05810     38 00 90 AD |  if_e	jmp	#LR__0289
05814     35 73 5A F2 | 	cmps	local06, local02 wcz
05818     30 00 90 3D |  if_ae	jmp	#LR__0289
0581c     39 9B 02 F6 | 	mov	local26, local06
05820     04 9A 06 F1 | 	add	local26, #4
05824     36 81 02 F6 | 	mov	local13, local03
05828     38 7B 02 F6 | 	mov	local10, local05
0582c     40 5B 02 F6 | 	mov	arg01, local13
05830     3D 5D 0A F6 | 	mov	arg02, local10 wz
05834     00 28 06 A6 |  if_e	mov	result1, #0
05838     2D 5D 82 51 |  if_ne	sub	arg02, arg01
0583c     04 5C 46 50 |  if_ne	shr	arg02, #4
05840     2E 29 02 56 |  if_ne	mov	result1, arg02
05844     14 83 02 F6 | 	mov	local14, result1
05848     4D 83 52 FC | 	wrword	local14, local26
0584c                 | LR__0289
0584c                 | LR__0290
0584c     39 29 02 F6 | 	mov	result1, local06
05850     AF F0 03 F6 | 	mov	ptra, fp
05854     BF 00 A0 FD | 	call	#popregs_
05858                 | __system___gc_dofree_ret
05858     2D 00 64 FD | 	ret
0585c                 | 
0585c                 | __system___gc_docollect
0585c     0C 5A 05 F6 | 	mov	COUNT_, #12
05860     B0 00 A0 FD | 	call	#pushregs_
05864     5C F9 BF FD | 	call	#__system___gc_ptrs
05868     15 69 02 F6 | 	mov	local01, result2
0586c     14 6B 02 F6 | 	mov	local02, result1
05870     35 5B 02 F6 | 	mov	arg01, local02
05874     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
05878     14 6D 0A F6 | 	mov	local03, result1 wz
0587c     01 28 62 FD | 	cogid	result1
05880     14 6F 02 F6 | 	mov	local04, result1
05884     2C 00 90 AD |  if_e	jmp	#LR__0292
05888                 | LR__0291
05888     34 6D 5A F2 | 	cmps	local03, local01 wcz
0588c     24 00 90 3D |  if_ae	jmp	#LR__0292
05890     36 71 02 F6 | 	mov	local05, local03
05894     02 70 06 F1 | 	add	local05, #2
05898     38 73 E2 FA | 	rdword	local06, local05
0589c     20 72 26 F5 | 	andn	local06, #32
058a0     38 73 52 FC | 	wrword	local06, local05
058a4     36 5B 02 F6 | 	mov	arg01, local03
058a8     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
058ac     14 6D 0A F6 | 	mov	local03, result1 wz
058b0     D4 FF 9F 5D |  if_ne	jmp	#LR__0291
058b4                 | LR__0292
058b4     00 74 06 F6 | 	mov	local07, #0
058b8     00 5A 06 F6 | 	mov	arg01, #0
058bc     FC F5 BF FD | 	call	#__system____topofstack
058c0     14 77 02 F6 | 	mov	local08, result1
058c4     3A 5B 02 F6 | 	mov	arg01, local07
058c8     3B 5D 02 F6 | 	mov	arg02, local08
058cc     A0 00 B0 FD | 	call	#__system___gc_markhub
058d0     2C 01 B0 FD | 	call	#__system___gc_markcog
058d4     35 5B 02 F6 | 	mov	arg01, local02
058d8     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
058dc     14 79 0A F6 | 	mov	local09, result1 wz
058e0     10 00 90 5D |  if_ne	jmp	#LR__0293
058e4     33 00 00 FF 
058e8     F5 5B 06 F6 | 	mov	arg01, ##@LR__0359
058ec     94 FB BF FD | 	call	#__system___gc_errmsg
058f0     70 00 90 FD | 	jmp	#LR__0299
058f4                 | LR__0293
058f4                 | LR__0294
058f4     3C 6D 02 F6 | 	mov	local03, local09
058f8     36 5B 02 F6 | 	mov	arg01, local03
058fc     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
05900     14 79 02 F6 | 	mov	local09, result1
05904     36 7B 02 F6 | 	mov	local10, local03
05908     02 7A 06 F1 | 	add	local10, #2
0590c     3D 7D E2 FA | 	rdword	local11, local10
05910     20 7C CE F7 | 	test	local11, #32 wz
05914     3C 00 90 5D |  if_ne	jmp	#LR__0297
05918     3E 7F 02 F6 | 	mov	local12, local11
0591c     10 7E 0E F5 | 	and	local12, #16 wz
05920     30 00 90 5D |  if_ne	jmp	#LR__0297
05924     3E 75 02 F6 | 	mov	local07, local11
05928     0F 74 06 F5 | 	and	local07, #15
0592c     3A 7D 02 F6 | 	mov	local11, local07
05930     37 7D 0A F2 | 	cmp	local11, local04 wz
05934     08 00 90 AD |  if_e	jmp	#LR__0295
05938     0E 7C 0E F2 | 	cmp	local11, #14 wz
0593c     14 00 90 5D |  if_ne	jmp	#LR__0296
05940                 | LR__0295
05940     36 75 02 F6 | 	mov	local07, local03
05944     3A 5B 02 F6 | 	mov	arg01, local07
05948     E4 FC BF FD | 	call	#__system___gc_dofree
0594c     14 7F 02 F6 | 	mov	local12, result1
05950     3F 79 02 F6 | 	mov	local09, local12
05954                 | LR__0296
05954                 | LR__0297
05954     00 78 0E F2 | 	cmp	local09, #0 wz
05958     08 00 90 AD |  if_e	jmp	#LR__0298
0595c     34 79 5A F2 | 	cmps	local09, local01 wcz
05960     90 FF 9F CD |  if_b	jmp	#LR__0294
05964                 | LR__0298
05964                 | LR__0299
05964     AF F0 03 F6 | 	mov	ptra, fp
05968     BF 00 A0 FD | 	call	#popregs_
0596c                 | __system___gc_docollect_ret
0596c     2D 00 64 FD | 	ret
05970                 | 
05970                 | __system___gc_markhub
05970     0A 5A 05 F6 | 	mov	COUNT_, #10
05974     B0 00 A0 FD | 	call	#pushregs_
05978     2D 69 02 F6 | 	mov	local01, arg01
0597c     2E 6B 02 F6 | 	mov	local02, arg02
05980     40 F8 BF FD | 	call	#__system___gc_ptrs
05984     14 6D 02 F6 | 	mov	local03, result1
05988     15 6F 02 F6 | 	mov	local04, result2
0598c                 | LR__0300
0598c     35 69 5A F2 | 	cmps	local01, local02 wcz
05990     60 00 90 3D |  if_ae	jmp	#LR__0301
05994     34 5F 02 FB | 	rdlong	arg03, local01
05998     04 68 06 F1 | 	add	local01, #4
0599c     36 5B 02 F6 | 	mov	arg01, local03
059a0     37 5D 02 F6 | 	mov	arg02, local04
059a4     04 FC BF FD | 	call	#__system___gc_isvalidptr
059a8     14 71 0A F6 | 	mov	local05, result1 wz
059ac     DC FF 9F AD |  if_e	jmp	#LR__0300
059b0     38 5B 02 F6 | 	mov	arg01, local05
059b4     00 72 06 F6 | 	mov	local06, #0
059b8     02 5A 06 F1 | 	add	arg01, #2
059bc     2D 75 E2 FA | 	rdword	local07, arg01
059c0     36 00 00 FF 
059c4     8F 74 0E F2 | 	cmp	local07, ##27791 wz
059c8     01 72 66 A6 |  if_e	neg	local06, #1
059cc     39 29 02 F6 | 	mov	result1, local06
059d0     14 77 0A F6 | 	mov	local08, result1 wz
059d4     B4 FF 9F 5D |  if_ne	jmp	#LR__0300
059d8     38 79 02 F6 | 	mov	local09, local05
059dc     02 78 06 F1 | 	add	local09, #2
059e0     3C 7B E2 FA | 	rdword	local10, local09
059e4     0F 7A 26 F5 | 	andn	local10, #15
059e8     2E 7A 46 F5 | 	or	local10, #46
059ec     3C 7B 52 FC | 	wrword	local10, local09
059f0     98 FF 9F FD | 	jmp	#LR__0300
059f4                 | LR__0301
059f4     AF F0 03 F6 | 	mov	ptra, fp
059f8     BF 00 A0 FD | 	call	#popregs_
059fc                 | __system___gc_markhub_ret
059fc     2D 00 64 FD | 	ret
05a00                 | 
05a00                 | __system___gc_markcog
05a00     06 5A 05 F6 | 	mov	COUNT_, #6
05a04     B0 00 A0 FD | 	call	#pushregs_
05a08     B8 F7 BF FD | 	call	#__system___gc_ptrs
05a0c     14 69 02 F6 | 	mov	local01, result1
05a10     15 6B 02 F6 | 	mov	local02, result2
05a14     00 6C 06 F6 | 	mov	local03, #0
05a18                 | LR__0302
05a18     F0 6F 06 F6 | 	mov	local04, #496
05a1c     36 6F 82 F1 | 	sub	local04, local03
05a20     F0 6F 06 F1 | 	add	local04, #496
05a24                 | 	'.live	local04
05a24     00 6E 96 F9 | 	alts	local04, #0
05a28     37 71 02 F6 | 	mov	local05, local04
05a2c     35 5D 02 F6 | 	mov	arg02, local02
05a30     34 5B 02 F6 | 	mov	arg01, local01
05a34     38 5F 02 F6 | 	mov	arg03, local05
05a38     70 FB BF FD | 	call	#__system___gc_isvalidptr
05a3c     14 71 0A F6 | 	mov	local05, result1 wz
05a40     10 00 90 AD |  if_e	jmp	#LR__0303
05a44     02 70 06 F1 | 	add	local05, #2
05a48     38 73 E2 FA | 	rdword	local06, local05
05a4c     20 72 46 F5 | 	or	local06, #32
05a50     38 73 52 FC | 	wrword	local06, local05
05a54                 | LR__0303
05a54     01 6C 06 F1 | 	add	local03, #1
05a58     F0 6D 5E F2 | 	cmps	local03, #496 wcz
05a5c     B8 FF 9F CD |  if_b	jmp	#LR__0302
05a60     AF F0 03 F6 | 	mov	ptra, fp
05a64     BF 00 A0 FD | 	call	#popregs_
05a68                 | __system___gc_markcog_ret
05a68     2D 00 64 FD | 	ret
05a6c                 | 
05a6c                 | __system__write
05a6c     03 5A 05 F6 | 	mov	COUNT_, #3
05a70     B0 00 A0 FD | 	call	#pushregs_
05a74     2D 69 02 F6 | 	mov	local01, arg01
05a78     2E 6B 02 F6 | 	mov	local02, arg02
05a7c     2F 6D 02 F6 | 	mov	local03, arg03
05a80     0A 68 1E F2 | 	cmp	local01, #10 wcz
05a84     1C 00 90 CD |  if_b	jmp	#LR__0304
05a88     01 00 00 FF 
05a8c     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
05a90     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
05a94     01 00 00 FF 
05a98     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
05a9c     01 28 66 F6 | 	neg	result1, #1
05aa0     28 00 90 FD | 	jmp	#LR__0305
05aa4                 | LR__0304
05aa4     34 5B 02 F6 | 	mov	arg01, local01
05aa8     01 5A 66 F0 | 	shl	arg01, #1
05aac     34 5B 02 F1 | 	add	arg01, local01
05ab0     04 5A 66 F0 | 	shl	arg01, #4
05ab4     1C 12 06 F1 | 	add	ptr___system__dat__, #28
05ab8     09 5B 02 F1 | 	add	arg01, ptr___system__dat__
05abc     35 5D 02 F6 | 	mov	arg02, local02
05ac0     36 5F 02 F6 | 	mov	arg03, local03
05ac4     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
05ac8     20 07 B0 FD | 	call	#__system___vfswrite
05acc                 | LR__0305
05acc     AF F0 03 F6 | 	mov	ptra, fp
05ad0     BF 00 A0 FD | 	call	#popregs_
05ad4                 | __system__write_ret
05ad4     2D 00 64 FD | 	ret
05ad8                 | 
05ad8                 | __system__read
05ad8     03 5A 05 F6 | 	mov	COUNT_, #3
05adc     B0 00 A0 FD | 	call	#pushregs_
05ae0     2D 69 02 F6 | 	mov	local01, arg01
05ae4     2E 6B 02 F6 | 	mov	local02, arg02
05ae8     2F 6D 02 F6 | 	mov	local03, arg03
05aec     0A 68 1E F2 | 	cmp	local01, #10 wcz
05af0     1C 00 90 CD |  if_b	jmp	#LR__0306
05af4     01 00 00 FF 
05af8     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
05afc     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
05b00     01 00 00 FF 
05b04     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
05b08     01 28 66 F6 | 	neg	result1, #1
05b0c     28 00 90 FD | 	jmp	#LR__0307
05b10                 | LR__0306
05b10     34 5B 02 F6 | 	mov	arg01, local01
05b14     01 5A 66 F0 | 	shl	arg01, #1
05b18     34 5B 02 F1 | 	add	arg01, local01
05b1c     04 5A 66 F0 | 	shl	arg01, #4
05b20     1C 12 06 F1 | 	add	ptr___system__dat__, #28
05b24     09 5B 02 F1 | 	add	arg01, ptr___system__dat__
05b28     35 5D 02 F6 | 	mov	arg02, local02
05b2c     36 5F 02 F6 | 	mov	arg03, local03
05b30     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
05b34     78 08 B0 FD | 	call	#__system___vfsread
05b38                 | LR__0307
05b38     AF F0 03 F6 | 	mov	ptra, fp
05b3c     BF 00 A0 FD | 	call	#popregs_
05b40                 | __system__read_ret
05b40     2D 00 64 FD | 	ret
05b44                 | 
05b44                 | __system__close
05b44     01 5A 05 F6 | 	mov	COUNT_, #1
05b48     B0 00 A0 FD | 	call	#pushregs_
05b4c     2D 69 02 F6 | 	mov	local01, arg01
05b50     0A 68 1E F2 | 	cmp	local01, #10 wcz
05b54     1C 00 90 CD |  if_b	jmp	#LR__0308
05b58     01 00 00 FF 
05b5c     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
05b60     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
05b64     01 00 00 FF 
05b68     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
05b6c     01 28 66 F6 | 	neg	result1, #1
05b70     20 00 90 FD | 	jmp	#LR__0309
05b74                 | LR__0308
05b74     34 5B 02 F6 | 	mov	arg01, local01
05b78     01 5A 66 F0 | 	shl	arg01, #1
05b7c     34 5B 02 F1 | 	add	arg01, local01
05b80     04 5A 66 F0 | 	shl	arg01, #4
05b84     1C 12 06 F1 | 	add	ptr___system__dat__, #28
05b88     09 5B 02 F1 | 	add	arg01, ptr___system__dat__
05b8c     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
05b90     54 01 B0 FD | 	call	#__system___closeraw
05b94                 | LR__0309
05b94     AF F0 03 F6 | 	mov	ptra, fp
05b98     BF 00 A0 FD | 	call	#popregs_
05b9c                 | __system__close_ret
05b9c     2D 00 64 FD | 	ret
05ba0                 | 
05ba0                 | __system__lseek
05ba0     09 5A 05 F6 | 	mov	COUNT_, #9
05ba4     B0 00 A0 FD | 	call	#pushregs_
05ba8     2D 69 02 F6 | 	mov	local01, arg01
05bac     2E 6B 02 F6 | 	mov	local02, arg02
05bb0     2F 6D 02 F6 | 	mov	local03, arg03
05bb4     0A 68 1E F2 | 	cmp	local01, #10 wcz
05bb8     1C 00 90 CD |  if_b	jmp	#LR__0310
05bbc     01 00 00 FF 
05bc0     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
05bc4     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
05bc8     01 00 00 FF 
05bcc     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
05bd0     01 28 66 F6 | 	neg	result1, #1
05bd4     D8 00 90 FD | 	jmp	#LR__0314
05bd8                 | LR__0310
05bd8     34 6F 02 F6 | 	mov	local04, local01
05bdc     01 6E 66 F0 | 	shl	local04, #1
05be0     34 6F 02 F1 | 	add	local04, local01
05be4     04 6E 66 F0 | 	shl	local04, #4
05be8     1C 12 06 F1 | 	add	ptr___system__dat__, #28
05bec     09 6F 02 F1 | 	add	local04, ptr___system__dat__
05bf0     2C 6E 06 F1 | 	add	local04, #44
05bf4     37 71 0A FB | 	rdlong	local05, local04 wz
05bf8     2C 6E 86 F1 | 	sub	local04, #44
05bfc     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
05c00     1C 00 90 5D |  if_ne	jmp	#LR__0311
05c04     01 00 00 FF 
05c08     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
05c0c     09 21 68 FC | 	wrlong	#16, ptr___system__dat__
05c10     01 00 00 FF 
05c14     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
05c18     01 28 66 F6 | 	neg	result1, #1
05c1c     90 00 90 FD | 	jmp	#LR__0314
05c20                 | LR__0311
05c20     08 6E 06 F1 | 	add	local04, #8
05c24     37 71 02 FB | 	rdlong	local05, local04
05c28     08 6E 86 F1 | 	sub	local04, #8
05c2c     40 70 CE F7 | 	test	local05, #64 wz
05c30     14 00 90 AD |  if_e	jmp	#LR__0312
05c34     08 6E 06 F1 | 	add	local04, #8
05c38     37 71 02 FB | 	rdlong	local05, local04
05c3c     80 70 46 F5 | 	or	local05, #128
05c40     37 71 62 FC | 	wrlong	local05, local04
05c44     08 6E 86 F1 | 	sub	local04, #8
05c48                 | LR__0312
05c48     2C 6E 06 F1 | 	add	local04, #44
05c4c     37 71 02 FB | 	rdlong	local05, local04
05c50     2C 6E 86 F1 | 	sub	local04, #44
05c54     38 73 02 FB | 	rdlong	local06, local05
05c58     04 70 06 F1 | 	add	local05, #4
05c5c     38 75 02 FB | 	rdlong	local07, local05
05c60     37 5B 02 F6 | 	mov	arg01, local04
05c64     35 5D 02 F6 | 	mov	arg02, local02
05c68     36 5F 02 F6 | 	mov	arg03, local03
05c6c     07 77 02 F6 | 	mov	local08, objptr
05c70     39 0F 02 F6 | 	mov	objptr, local06
05c74     2D 74 62 FD | 	call	local07
05c78     3B 0F 02 F6 | 	mov	objptr, local08
05c7c     14 79 02 F6 | 	mov	local09, result1
05c80     00 78 5E F2 | 	cmps	local09, #0 wcz
05c84     24 00 90 3D |  if_ae	jmp	#LR__0313
05c88     3C 5B 6A F6 | 	neg	arg01, local09 wz
05c8c     01 00 00 FF 
05c90     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
05c94     09 5B 62 FC | 	wrlong	arg01, ptr___system__dat__
05c98     01 00 00 FF 
05c9c     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
05ca0     01 28 66 56 |  if_ne	neg	result1, #1
05ca4     00 28 06 A6 |  if_e	mov	result1, #0
05ca8     04 00 90 FD | 	jmp	#LR__0314
05cac                 | LR__0313
05cac     3C 29 02 F6 | 	mov	result1, local09
05cb0                 | LR__0314
05cb0     AF F0 03 F6 | 	mov	ptra, fp
05cb4     BF 00 A0 FD | 	call	#popregs_
05cb8                 | __system__lseek_ret
05cb8     2D 00 64 FD | 	ret
05cbc                 | 
05cbc                 | __system____getftab
05cbc     0A 5A 1E F2 | 	cmp	arg01, #10 wcz
05cc0     00 28 06 36 |  if_ae	mov	result1, #0
05cc4     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
05cc8     2D 29 02 F6 | 	mov	result1, arg01
05ccc     01 28 66 F0 | 	shl	result1, #1
05cd0     2D 29 02 F1 | 	add	result1, arg01
05cd4     04 28 66 F0 | 	shl	result1, #4
05cd8     1C 12 06 F1 | 	add	ptr___system__dat__, #28
05cdc     09 29 02 F1 | 	add	result1, ptr___system__dat__
05ce0     1C 12 86 F1 | 	sub	ptr___system__dat__, #28
05ce4                 | __system____getftab_ret
05ce4     2D 00 64 FD | 	ret
05ce8                 | 
05ce8                 | __system___closeraw
05ce8     06 5A 05 F6 | 	mov	COUNT_, #6
05cec     B0 00 A0 FD | 	call	#pushregs_
05cf0     2D 69 02 F6 | 	mov	local01, arg01
05cf4     00 6A 06 F6 | 	mov	local02, #0
05cf8     08 68 06 F1 | 	add	local01, #8
05cfc     34 6D 0A FB | 	rdlong	local03, local01 wz
05d00     08 68 86 F1 | 	sub	local01, #8
05d04     1C 00 90 5D |  if_ne	jmp	#LR__0315
05d08     01 00 00 FF 
05d0c     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
05d10     09 0B 68 FC | 	wrlong	#5, ptr___system__dat__
05d14     01 00 00 FF 
05d18     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
05d1c     01 28 66 F6 | 	neg	result1, #1
05d20     90 00 90 FD | 	jmp	#LR__0318
05d24                 | LR__0315
05d24     28 68 06 F1 | 	add	local01, #40
05d28     34 6D 0A FB | 	rdlong	local03, local01 wz
05d2c     28 68 86 F1 | 	sub	local01, #40
05d30     2C 00 90 AD |  if_e	jmp	#LR__0316
05d34     28 68 06 F1 | 	add	local01, #40
05d38     34 6D 02 FB | 	rdlong	local03, local01
05d3c     28 68 86 F1 | 	sub	local01, #40
05d40     36 6F 02 FB | 	rdlong	local04, local03
05d44     04 6C 06 F1 | 	add	local03, #4
05d48     36 71 02 FB | 	rdlong	local05, local03
05d4c     34 5B 02 F6 | 	mov	arg01, local01
05d50     07 73 02 F6 | 	mov	local06, objptr
05d54     37 0F 02 F6 | 	mov	objptr, local04
05d58     2D 70 62 FD | 	call	local05
05d5c     39 0F 02 F6 | 	mov	objptr, local06
05d60                 | LR__0316
05d60     20 68 06 F1 | 	add	local01, #32
05d64     34 6D 0A FB | 	rdlong	local03, local01 wz
05d68     20 68 86 F1 | 	sub	local01, #32
05d6c     30 00 90 AD |  if_e	jmp	#LR__0317
05d70     20 68 06 F1 | 	add	local01, #32
05d74     34 6D 02 FB | 	rdlong	local03, local01
05d78     20 68 86 F1 | 	sub	local01, #32
05d7c     36 6F 02 FB | 	rdlong	local04, local03
05d80     04 6C 06 F1 | 	add	local03, #4
05d84     36 71 02 FB | 	rdlong	local05, local03
05d88     34 5B 02 F6 | 	mov	arg01, local01
05d8c     07 73 02 F6 | 	mov	local06, objptr
05d90     37 0F 02 F6 | 	mov	objptr, local04
05d94     2D 70 62 FD | 	call	local05
05d98     39 0F 02 F6 | 	mov	objptr, local06
05d9c     14 6B 02 F6 | 	mov	local02, result1
05da0                 | LR__0317
05da0     34 5B 02 F6 | 	mov	arg01, local01
05da4     00 5C 06 F6 | 	mov	arg02, #0
05da8     30 5E 06 F6 | 	mov	arg03, #48
05dac     A0 00 A0 FD | 	call	#\builtin_bytefill_
05db0     35 29 02 F6 | 	mov	result1, local02
05db4                 | LR__0318
05db4     AF F0 03 F6 | 	mov	ptra, fp
05db8     BF 00 A0 FD | 	call	#popregs_
05dbc                 | __system___closeraw_ret
05dbc     2D 00 64 FD | 	ret
05dc0                 | 
05dc0                 | __system____default_getc
05dc0     0C 5A 05 F6 | 	mov	COUNT_, #12
05dc4     B0 00 A0 FD | 	call	#pushregs_
05dc8     2D 69 02 F6 | 	mov	local01, arg01
05dcc     34 6B 02 FB | 	rdlong	local02, local01
05dd0     08 6A 06 F1 | 	add	local02, #8
05dd4     35 6D 02 FB | 	rdlong	local03, local02
05dd8     08 6A 86 F1 | 	sub	local02, #8
05ddc     02 6C CE F7 | 	test	local03, #2 wz
05de0     08 00 90 AD |  if_e	jmp	#LR__0319
05de4     34 5B 02 F6 | 	mov	arg01, local01
05de8     FC 01 B0 FD | 	call	#__system____default_flush
05dec                 | LR__0319
05dec     08 6A 06 F1 | 	add	local02, #8
05df0     35 6D 02 FB | 	rdlong	local03, local02
05df4     01 6C 46 F5 | 	or	local03, #1
05df8     35 6D 62 FC | 	wrlong	local03, local02
05dfc     08 6A 86 F1 | 	sub	local02, #8
05e00     35 6F 0A FB | 	rdlong	local04, local02 wz
05e04     7C 00 90 5D |  if_ne	jmp	#LR__0321
05e08     34 5B 02 F6 | 	mov	arg01, local01
05e0c     2D 71 02 FB | 	rdlong	local05, arg01
05e10     0C 70 06 F1 | 	add	local05, #12
05e14     38 5D 02 F6 | 	mov	arg02, local05
05e18     0C 70 86 F1 | 	sub	local05, #12
05e1c     10 5A 06 F1 | 	add	arg01, #16
05e20     2D 73 02 FB | 	rdlong	local06, arg01
05e24     10 5A 86 F1 | 	sub	arg01, #16
05e28     39 75 02 FB | 	rdlong	local07, local06
05e2c     04 72 06 F1 | 	add	local06, #4
05e30     39 77 02 FB | 	rdlong	local08, local06
05e34     0A 5E C6 F9 | 	decod	arg03, #10
05e38     07 79 02 F6 | 	mov	local09, objptr
05e3c     3A 0F 02 F6 | 	mov	objptr, local07
05e40     2D 76 62 FD | 	call	local08
05e44     3C 0F 02 F6 | 	mov	objptr, local09
05e48     14 7B 02 F6 | 	mov	local10, result1
05e4c     00 7A 5E F2 | 	cmps	local10, #0 wcz
05e50     01 28 66 C6 |  if_b	neg	result1, #1
05e54     28 00 90 CD |  if_b	jmp	#LR__0320
05e58     38 7B 62 FC | 	wrlong	local10, local05
05e5c     0C 70 06 F1 | 	add	local05, #12
05e60     38 7D 02 F6 | 	mov	local11, local05
05e64     08 70 86 F1 | 	sub	local05, #8
05e68     38 7D 62 FC | 	wrlong	local11, local05
05e6c     04 70 06 F1 | 	add	local05, #4
05e70     38 73 02 FB | 	rdlong	local06, local05
05e74     01 72 46 F5 | 	or	local06, #1
05e78     38 73 62 FC | 	wrlong	local06, local05
05e7c     3D 29 02 F6 | 	mov	result1, local10
05e80                 | LR__0320
05e80     14 6F 02 F6 | 	mov	local04, result1
05e84                 | LR__0321
05e84     00 6E 5E F2 | 	cmps	local04, #0 wcz
05e88     01 28 66 E6 |  if_be	neg	result1, #1
05e8c     1C 00 90 ED |  if_be	jmp	#LR__0322
05e90     01 6E 86 F1 | 	sub	local04, #1
05e94     35 6F 62 FC | 	wrlong	local04, local02
05e98     04 6A 06 F1 | 	add	local02, #4
05e9c     35 7F 02 FB | 	rdlong	local12, local02
05ea0     3F 29 C2 FA | 	rdbyte	result1, local12
05ea4     01 7E 06 F1 | 	add	local12, #1
05ea8     35 7F 62 FC | 	wrlong	local12, local02
05eac                 | LR__0322
05eac     AF F0 03 F6 | 	mov	ptra, fp
05eb0     BF 00 A0 FD | 	call	#popregs_
05eb4                 | __system____default_getc_ret
05eb4     2D 00 64 FD | 	ret
05eb8                 | 
05eb8                 | __system____default_putc
05eb8     06 5A 05 F6 | 	mov	COUNT_, #6
05ebc     B0 00 A0 FD | 	call	#pushregs_
05ec0     2D 69 02 F6 | 	mov	local01, arg01
05ec4     2E 6B 02 F6 | 	mov	local02, arg02
05ec8     35 6D 02 FB | 	rdlong	local03, local02
05ecc     08 6C 06 F1 | 	add	local03, #8
05ed0     36 6F 02 FB | 	rdlong	local04, local03
05ed4     08 6C 86 F1 | 	sub	local03, #8
05ed8     01 6E CE F7 | 	test	local04, #1 wz
05edc     08 00 90 AD |  if_e	jmp	#LR__0323
05ee0     35 5B 02 F6 | 	mov	arg01, local02
05ee4     00 01 B0 FD | 	call	#__system____default_flush
05ee8                 | LR__0323
05ee8     08 6C 06 F1 | 	add	local03, #8
05eec     36 6F 02 FB | 	rdlong	local04, local03
05ef0     02 6E 46 F5 | 	or	local04, #2
05ef4     36 6F 62 FC | 	wrlong	local04, local03
05ef8     08 6C 86 F1 | 	sub	local03, #8
05efc     36 71 02 FB | 	rdlong	local05, local03
05f00     38 73 02 F6 | 	mov	local06, local05
05f04     0C 6C 06 F1 | 	add	local03, #12
05f08     36 73 02 F1 | 	add	local06, local03
05f0c     39 69 42 FC | 	wrbyte	local01, local06
05f10     FF 68 06 F5 | 	and	local01, #255
05f14     01 70 06 F1 | 	add	local05, #1
05f18     0C 6C 86 F1 | 	sub	local03, #12
05f1c     36 71 62 FC | 	wrlong	local05, local03
05f20     02 00 00 FF 
05f24     00 70 0E F2 | 	cmp	local05, ##1024 wz
05f28     10 00 90 5D |  if_ne	jmp	#LR__0324
05f2c     35 5B 02 F6 | 	mov	arg01, local02
05f30     B4 00 B0 FD | 	call	#__system____default_flush
05f34     00 28 0E F2 | 	cmp	result1, #0 wz
05f38     01 68 66 56 |  if_ne	neg	local01, #1
05f3c                 | LR__0324
05f3c     34 29 02 F6 | 	mov	result1, local01
05f40     AF F0 03 F6 | 	mov	ptra, fp
05f44     BF 00 A0 FD | 	call	#popregs_
05f48                 | __system____default_putc_ret
05f48     2D 00 64 FD | 	ret
05f4c                 | 
05f4c                 | __system____default_putc_terminal
05f4c     06 5A 05 F6 | 	mov	COUNT_, #6
05f50     B0 00 A0 FD | 	call	#pushregs_
05f54     2D 69 02 F6 | 	mov	local01, arg01
05f58     2E 6B 02 F6 | 	mov	local02, arg02
05f5c     35 6D 02 FB | 	rdlong	local03, local02
05f60     08 6C 06 F1 | 	add	local03, #8
05f64     36 6F 02 FB | 	rdlong	local04, local03
05f68     08 6C 86 F1 | 	sub	local03, #8
05f6c     01 6E CE F7 | 	test	local04, #1 wz
05f70     08 00 90 AD |  if_e	jmp	#LR__0325
05f74     35 5B 02 F6 | 	mov	arg01, local02
05f78     6C 00 B0 FD | 	call	#__system____default_flush
05f7c                 | LR__0325
05f7c     08 6C 06 F1 | 	add	local03, #8
05f80     36 6F 02 FB | 	rdlong	local04, local03
05f84     02 6E 46 F5 | 	or	local04, #2
05f88     36 6F 62 FC | 	wrlong	local04, local03
05f8c     08 6C 86 F1 | 	sub	local03, #8
05f90     36 71 02 FB | 	rdlong	local05, local03
05f94     38 73 02 F6 | 	mov	local06, local05
05f98     0C 6C 06 F1 | 	add	local03, #12
05f9c     36 73 02 F1 | 	add	local06, local03
05fa0     39 69 42 FC | 	wrbyte	local01, local06
05fa4     FF 68 06 F5 | 	and	local01, #255
05fa8     0C 6C 86 F1 | 	sub	local03, #12
05fac     01 70 06 F1 | 	add	local05, #1
05fb0     36 71 62 FC | 	wrlong	local05, local03
05fb4     0A 68 0E F2 | 	cmp	local01, #10 wz
05fb8     0C 00 90 AD |  if_e	jmp	#LR__0326
05fbc     02 00 00 FF 
05fc0     00 70 0E F2 | 	cmp	local05, ##1024 wz
05fc4     10 00 90 5D |  if_ne	jmp	#LR__0327
05fc8                 | LR__0326
05fc8     35 5B 02 F6 | 	mov	arg01, local02
05fcc     18 00 B0 FD | 	call	#__system____default_flush
05fd0     00 28 0E F2 | 	cmp	result1, #0 wz
05fd4     01 68 66 56 |  if_ne	neg	local01, #1
05fd8                 | LR__0327
05fd8     34 29 02 F6 | 	mov	result1, local01
05fdc     AF F0 03 F6 | 	mov	ptra, fp
05fe0     BF 00 A0 FD | 	call	#popregs_
05fe4                 | __system____default_putc_terminal_ret
05fe4     2D 00 64 FD | 	ret
05fe8                 | 
05fe8                 | __system____default_flush
05fe8     0F 5A 05 F6 | 	mov	COUNT_, #15
05fec     B0 00 A0 FD | 	call	#pushregs_
05ff0     2D 69 02 F6 | 	mov	local01, arg01
05ff4     34 6B 02 FB | 	rdlong	local02, local01
05ff8     35 6D 02 FB | 	rdlong	local03, local02
05ffc     08 6A 06 F1 | 	add	local02, #8
06000     35 6F 02 FB | 	rdlong	local04, local02
06004     08 6A 86 F1 | 	sub	local02, #8
06008     02 6E CE F7 | 	test	local04, #2 wz
0600c     B8 00 90 AD |  if_e	jmp	#LR__0330
06010     00 6C 5E F2 | 	cmps	local03, #0 wcz
06014     30 01 90 ED |  if_be	jmp	#LR__0332
06018     08 68 06 F1 | 	add	local01, #8
0601c     34 6F 02 FB | 	rdlong	local04, local01
06020     08 68 86 F1 | 	sub	local01, #8
06024     40 6E CE F7 | 	test	local04, #64 wz
06028     5C 00 90 AD |  if_e	jmp	#LR__0329
0602c     08 68 06 F1 | 	add	local01, #8
06030     34 6F 02 FB | 	rdlong	local04, local01
06034     08 68 86 F1 | 	sub	local01, #8
06038     80 6E CE F7 | 	test	local04, #128 wz
0603c     48 00 90 AD |  if_e	jmp	#LR__0328
06040     2C 68 06 F1 | 	add	local01, #44
06044     34 6F 02 FB | 	rdlong	local04, local01
06048     2C 68 86 F1 | 	sub	local01, #44
0604c     37 71 02 FB | 	rdlong	local05, local04
06050     04 6E 06 F1 | 	add	local04, #4
06054     37 73 02 FB | 	rdlong	local06, local04
06058     34 5B 02 F6 | 	mov	arg01, local01
0605c     00 5C 06 F6 | 	mov	arg02, #0
06060     02 5E 06 F6 | 	mov	arg03, #2
06064     07 75 02 F6 | 	mov	local07, objptr
06068     38 0F 02 F6 | 	mov	objptr, local05
0606c     2D 72 62 FD | 	call	local06
06070     3A 0F 02 F6 | 	mov	objptr, local07
06074     08 68 06 F1 | 	add	local01, #8
06078     34 6F 02 FB | 	rdlong	local04, local01
0607c     80 6E 26 F5 | 	andn	local04, #128
06080     34 6F 62 FC | 	wrlong	local04, local01
06084     08 68 86 F1 | 	sub	local01, #8
06088                 | LR__0328
06088                 | LR__0329
06088     0C 6A 06 F1 | 	add	local02, #12
0608c     35 5D 02 F6 | 	mov	arg02, local02
06090     0C 6A 86 F1 | 	sub	local02, #12
06094     14 68 06 F1 | 	add	local01, #20
06098     34 6F 02 FB | 	rdlong	local04, local01
0609c     14 68 86 F1 | 	sub	local01, #20
060a0     37 71 02 FB | 	rdlong	local05, local04
060a4     04 6E 06 F1 | 	add	local04, #4
060a8     37 73 02 FB | 	rdlong	local06, local04
060ac     34 5B 02 F6 | 	mov	arg01, local01
060b0     36 5F 02 F6 | 	mov	arg03, local03
060b4     07 75 02 F6 | 	mov	local07, objptr
060b8     38 0F 02 F6 | 	mov	objptr, local05
060bc     2D 72 62 FD | 	call	local06
060c0     3A 0F 02 F6 | 	mov	objptr, local07
060c4     80 00 90 FD | 	jmp	#LR__0332
060c8                 | LR__0330
060c8     08 6A 06 F1 | 	add	local02, #8
060cc     35 6F 02 FB | 	rdlong	local04, local02
060d0     08 6A 86 F1 | 	sub	local02, #8
060d4     01 6E CE F7 | 	test	local04, #1 wz
060d8     6C 00 90 AD |  if_e	jmp	#LR__0331
060dc     00 6C 0E F2 | 	cmp	local03, #0 wz
060e0     64 00 90 AD |  if_e	jmp	#LR__0331
060e4     2C 68 06 F1 | 	add	local01, #44
060e8     34 77 02 FB | 	rdlong	local08, local01
060ec     2C 68 86 F1 | 	sub	local01, #44
060f0     3B 6F 02 F6 | 	mov	local04, local08
060f4     37 71 02 FB | 	rdlong	local05, local04
060f8     04 6E 06 F1 | 	add	local04, #4
060fc     37 79 02 FB | 	rdlong	local09, local04
06100     04 6E 86 F1 | 	sub	local04, #4
06104     3C 73 02 F6 | 	mov	local06, local09
06108     34 7B 02 F6 | 	mov	local10, local01
0610c     36 7D 02 F6 | 	mov	local11, local03
06110     3E 7D 62 F6 | 	neg	local11, local11
06114     3E 7F 02 F6 | 	mov	local12, local11
06118     01 74 06 F6 | 	mov	local07, #1
0611c     3D 5B 02 F6 | 	mov	arg01, local10
06120     3F 5D 02 F6 | 	mov	arg02, local12
06124     01 5E 06 F6 | 	mov	arg03, #1
06128     07 81 02 F6 | 	mov	local13, objptr
0612c     38 0F 02 F6 | 	mov	objptr, local05
06130     2D 72 62 FD | 	call	local06
06134     40 0F 02 F6 | 	mov	objptr, local13
06138     14 83 02 F6 | 	mov	local14, result1
0613c     41 85 02 F6 | 	mov	local15, local14
06140     00 84 5E F2 | 	cmps	local15, #0 wcz
06144     36 85 02 36 |  if_ae	mov	local15, local03
06148                 | LR__0331
06148                 | LR__0332
06148     35 01 68 FC | 	wrlong	#0, local02
0614c     04 6A 06 F1 | 	add	local02, #4
06150     35 01 68 FC | 	wrlong	#0, local02
06154     04 6A 06 F1 | 	add	local02, #4
06158     35 01 68 FC | 	wrlong	#0, local02
0615c     00 28 06 F6 | 	mov	result1, #0
06160     AF F0 03 F6 | 	mov	ptra, fp
06164     BF 00 A0 FD | 	call	#popregs_
06168                 | __system____default_flush_ret
06168     2D 00 64 FD | 	ret
0616c                 | 
0616c                 | __system___rxtxioctl_0174
0616c     02 5A 05 F6 | 	mov	COUNT_, #2
06170     B0 00 A0 FD | 	call	#pushregs_
06174     2E 69 02 F6 | 	mov	local01, arg02
06178     2F 6B 02 F6 | 	mov	local02, arg03
0617c     00 69 0E F2 | 	cmp	local01, #256 wz
06180     0C 00 90 AD |  if_e	jmp	#LR__0333
06184     01 69 0E F2 | 	cmp	local01, #257 wz
06188     1C 00 90 AD |  if_e	jmp	#LR__0334
0618c     30 00 90 FD | 	jmp	#LR__0335
06190                 | LR__0333
06190     08 12 06 F1 | 	add	ptr___system__dat__, #8
06194     09 29 02 FB | 	rdlong	result1, ptr___system__dat__
06198     08 12 86 F1 | 	sub	ptr___system__dat__, #8
0619c     35 29 62 FC | 	wrlong	result1, local02
061a0     00 28 06 F6 | 	mov	result1, #0
061a4     30 00 90 FD | 	jmp	#LR__0336
061a8                 | LR__0334
061a8     35 5B 02 FB | 	rdlong	arg01, local02
061ac     08 12 06 F1 | 	add	ptr___system__dat__, #8
061b0     09 5B 62 FC | 	wrlong	arg01, ptr___system__dat__
061b4     08 12 86 F1 | 	sub	ptr___system__dat__, #8
061b8     00 28 06 F6 | 	mov	result1, #0
061bc     18 00 90 FD | 	jmp	#LR__0336
061c0                 | LR__0335
061c0     01 00 00 FF 
061c4     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
061c8     09 15 68 FC | 	wrlong	#10, ptr___system__dat__
061cc     01 00 00 FF 
061d0     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
061d4     01 28 66 F6 | 	neg	result1, #1
061d8                 | LR__0336
061d8     AF F0 03 F6 | 	mov	ptra, fp
061dc     BF 00 A0 FD | 	call	#popregs_
061e0                 | __system___rxtxioctl_0174_ret
061e0     2D 00 64 FD | 	ret
061e4                 | 
061e4                 | __system____dummy_flush_0175
061e4     00 28 06 F6 | 	mov	result1, #0
061e8                 | __system____dummy_flush_0175_ret
061e8     2D 00 64 FD | 	ret
061ec                 | 
061ec                 | __system___vfswrite
061ec     0B 5A 05 F6 | 	mov	COUNT_, #11
061f0     B0 00 A0 FD | 	call	#pushregs_
061f4     2D 69 02 F6 | 	mov	local01, arg01
061f8     2E 6B 02 F6 | 	mov	local02, arg02
061fc     2F 6D 02 F6 | 	mov	local03, arg03
06200     35 6F 02 F6 | 	mov	local04, local02
06204     08 68 06 F1 | 	add	local01, #8
06208     34 71 02 FB | 	rdlong	local05, local01
0620c     08 68 86 F1 | 	sub	local01, #8
06210     02 70 CE F7 | 	test	local05, #2 wz
06214     1C 00 90 5D |  if_ne	jmp	#LR__0337
06218     01 00 00 FF 
0621c     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
06220     09 0D 68 FC | 	wrlong	#6, ptr___system__dat__
06224     01 00 00 FF 
06228     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
0622c     01 28 66 F6 | 	neg	result1, #1
06230     70 01 90 FD | 	jmp	#LR__0345
06234                 | LR__0337
06234     08 68 06 F1 | 	add	local01, #8
06238     34 71 02 FB | 	rdlong	local05, local01
0623c     08 68 86 F1 | 	sub	local01, #8
06240     40 70 CE F7 | 	test	local05, #64 wz
06244     5C 00 90 AD |  if_e	jmp	#LR__0339
06248     08 68 06 F1 | 	add	local01, #8
0624c     34 71 02 FB | 	rdlong	local05, local01
06250     08 68 86 F1 | 	sub	local01, #8
06254     80 70 CE F7 | 	test	local05, #128 wz
06258     48 00 90 AD |  if_e	jmp	#LR__0338
0625c     2C 68 06 F1 | 	add	local01, #44
06260     34 71 02 FB | 	rdlong	local05, local01
06264     2C 68 86 F1 | 	sub	local01, #44
06268     38 73 02 FB | 	rdlong	local06, local05
0626c     04 70 06 F1 | 	add	local05, #4
06270     38 75 02 FB | 	rdlong	local07, local05
06274     34 5B 02 F6 | 	mov	arg01, local01
06278     00 5C 06 F6 | 	mov	arg02, #0
0627c     02 5E 06 F6 | 	mov	arg03, #2
06280     07 77 02 F6 | 	mov	local08, objptr
06284     39 0F 02 F6 | 	mov	objptr, local06
06288     2D 74 62 FD | 	call	local07
0628c     3B 0F 02 F6 | 	mov	objptr, local08
06290     08 68 06 F1 | 	add	local01, #8
06294     34 71 02 FB | 	rdlong	local05, local01
06298     80 70 26 F5 | 	andn	local05, #128
0629c     34 71 62 FC | 	wrlong	local05, local01
062a0     08 68 86 F1 | 	sub	local01, #8
062a4                 | LR__0338
062a4                 | LR__0339
062a4     14 68 06 F1 | 	add	local01, #20
062a8     34 71 0A FB | 	rdlong	local05, local01 wz
062ac     14 68 86 F1 | 	sub	local01, #20
062b0     7C 00 90 AD |  if_e	jmp	#LR__0341
062b4     14 68 06 F1 | 	add	local01, #20
062b8     34 71 02 FB | 	rdlong	local05, local01
062bc     14 68 86 F1 | 	sub	local01, #20
062c0     38 73 02 FB | 	rdlong	local06, local05
062c4     04 70 06 F1 | 	add	local05, #4
062c8     38 75 02 FB | 	rdlong	local07, local05
062cc     35 5D 02 F6 | 	mov	arg02, local02
062d0     36 5F 02 F6 | 	mov	arg03, local03
062d4     34 5B 02 F6 | 	mov	arg01, local01
062d8     07 77 02 F6 | 	mov	local08, objptr
062dc     39 0F 02 F6 | 	mov	objptr, local06
062e0     2D 74 62 FD | 	call	local07
062e4     3B 0F 02 F6 | 	mov	objptr, local08
062e8     14 79 02 F6 | 	mov	local09, result1
062ec     00 78 5E F2 | 	cmps	local09, #0 wcz
062f0     34 00 90 3D |  if_ae	jmp	#LR__0340
062f4     08 68 06 F1 | 	add	local01, #8
062f8     34 71 02 FB | 	rdlong	local05, local01
062fc     20 70 46 F5 | 	or	local05, #32
06300     34 71 62 FC | 	wrlong	local05, local01
06304     01 00 00 FF 
06308     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
0630c     09 79 62 FC | 	wrlong	local09, ptr___system__dat__
06310     01 00 00 FF 
06314     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
06318     00 78 0E F2 | 	cmp	local09, #0 wz
0631c     01 28 66 56 |  if_ne	neg	result1, #1
06320     00 28 06 A6 |  if_e	mov	result1, #0
06324     7C 00 90 FD | 	jmp	#LR__0345
06328                 | LR__0340
06328     3C 29 02 F6 | 	mov	result1, local09
0632c     74 00 90 FD | 	jmp	#LR__0345
06330                 | LR__0341
06330     18 68 06 F1 | 	add	local01, #24
06334     34 7B 0A FB | 	rdlong	local10, local01 wz
06338     18 68 86 F1 | 	sub	local01, #24
0633c     1C 00 90 5D |  if_ne	jmp	#LR__0342
06340     01 00 00 FF 
06344     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
06348     09 0D 68 FC | 	wrlong	#6, ptr___system__dat__
0634c     01 00 00 FF 
06350     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
06354     01 28 66 F6 | 	neg	result1, #1
06358     48 00 90 FD | 	jmp	#LR__0345
0635c                 | LR__0342
0635c     00 78 06 F6 | 	mov	local09, #0
06360                 | LR__0343
06360     00 6C 1E F2 | 	cmp	local03, #0 wcz
06364     38 00 90 ED |  if_be	jmp	#LR__0344
06368     3D 71 02 F6 | 	mov	local05, local10
0636c     38 73 02 FB | 	rdlong	local06, local05
06370     04 70 06 F1 | 	add	local05, #4
06374     38 75 02 FB | 	rdlong	local07, local05
06378     37 5B C2 FA | 	rdbyte	arg01, local04
0637c     34 5D 02 F6 | 	mov	arg02, local01
06380     07 7D 02 F6 | 	mov	local11, objptr
06384     39 0F 02 F6 | 	mov	objptr, local06
06388     01 6E 06 F1 | 	add	local04, #1
0638c     2D 74 62 FD | 	call	local07
06390     3E 0F 02 F6 | 	mov	objptr, local11
06394     14 79 02 F1 | 	add	local09, result1
06398     01 6C 86 F1 | 	sub	local03, #1
0639c     C0 FF 9F FD | 	jmp	#LR__0343
063a0                 | LR__0344
063a0     3C 29 02 F6 | 	mov	result1, local09
063a4                 | LR__0345
063a4     AF F0 03 F6 | 	mov	ptra, fp
063a8     BF 00 A0 FD | 	call	#popregs_
063ac                 | __system___vfswrite_ret
063ac     2D 00 64 FD | 	ret
063b0                 | 
063b0                 | __system___vfsread
063b0     0F 5A 05 F6 | 	mov	COUNT_, #15
063b4     B0 00 A0 FD | 	call	#pushregs_
063b8     2C F0 07 F1 | 	add	ptra, #44
063bc     04 5E 05 F1 | 	add	fp, #4
063c0     AF 5A 62 FC | 	wrlong	arg01, fp
063c4     04 5E 05 F1 | 	add	fp, #4
063c8     AF 5C 62 FC | 	wrlong	arg02, fp
063cc     04 5E 05 F1 | 	add	fp, #4
063d0     AF 5E 62 FC | 	wrlong	arg03, fp
063d4     04 5E 85 F1 | 	sub	fp, #4
063d8     AF 68 02 FB | 	rdlong	local01, fp
063dc     14 5E 05 F1 | 	add	fp, #20
063e0     AF 68 62 FC | 	wrlong	local01, fp
063e4     04 5E 05 F1 | 	add	fp, #4
063e8     AF 00 68 FC | 	wrlong	#0, fp
063ec     1C 5E 85 F1 | 	sub	fp, #28
063f0     AF 6A 02 FB | 	rdlong	local02, fp
063f4     04 5E 85 F1 | 	sub	fp, #4
063f8     08 6A 06 F1 | 	add	local02, #8
063fc     35 69 02 FB | 	rdlong	local01, local02
06400     01 68 CE F7 | 	test	local01, #1 wz
06404     1C 00 90 5D |  if_ne	jmp	#LR__0346
06408     01 00 00 FF 
0640c     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
06410     09 0D 68 FC | 	wrlong	#6, ptr___system__dat__
06414     01 00 00 FF 
06418     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
0641c     01 28 66 F6 | 	neg	result1, #1
06420     9C 02 90 FD | 	jmp	#LR__0354
06424                 | LR__0346
06424     04 5E 05 F1 | 	add	fp, #4
06428     AF 68 02 FB | 	rdlong	local01, fp
0642c     04 5E 85 F1 | 	sub	fp, #4
06430     10 68 06 F1 | 	add	local01, #16
06434     34 6D 0A FB | 	rdlong	local03, local01 wz
06438     B4 00 90 AD |  if_e	jmp	#LR__0348
0643c     04 5E 05 F1 | 	add	fp, #4
06440     AF 6E 02 FB | 	rdlong	local04, fp
06444     10 6E 06 F1 | 	add	local04, #16
06448     37 69 02 FB | 	rdlong	local01, local04
0644c     34 6B 02 FB | 	rdlong	local02, local01
06450     04 68 06 F1 | 	add	local01, #4
06454     34 6D 02 FB | 	rdlong	local03, local01
06458     AF 5A 02 FB | 	rdlong	arg01, fp
0645c     04 5E 05 F1 | 	add	fp, #4
06460     AF 5C 02 FB | 	rdlong	arg02, fp
06464     04 5E 05 F1 | 	add	fp, #4
06468     AF 5E 02 FB | 	rdlong	arg03, fp
0646c     0C 5E 85 F1 | 	sub	fp, #12
06470     07 71 02 F6 | 	mov	local05, objptr
06474     35 0F 02 F6 | 	mov	objptr, local02
06478     2D 6C 62 FD | 	call	local03
0647c     38 0F 02 F6 | 	mov	objptr, local05
06480     10 5E 05 F1 | 	add	fp, #16
06484     AF 28 62 FC | 	wrlong	result1, fp
06488     10 5E 85 F1 | 	sub	fp, #16
0648c     00 28 5E F2 | 	cmps	result1, #0 wcz
06490     4C 00 90 3D |  if_ae	jmp	#LR__0347
06494     04 5E 05 F1 | 	add	fp, #4
06498     AF 68 02 FB | 	rdlong	local01, fp
0649c     34 6F 02 F6 | 	mov	local04, local01
064a0     08 6E 06 F1 | 	add	local04, #8
064a4     37 6D 02 FB | 	rdlong	local03, local04
064a8     20 6C 46 F5 | 	or	local03, #32
064ac     08 68 06 F1 | 	add	local01, #8
064b0     34 6D 62 FC | 	wrlong	local03, local01
064b4     0C 5E 05 F1 | 	add	fp, #12
064b8     AF 5A 0A FB | 	rdlong	arg01, fp wz
064bc     10 5E 85 F1 | 	sub	fp, #16
064c0     01 00 00 FF 
064c4     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
064c8     09 5B 62 FC | 	wrlong	arg01, ptr___system__dat__
064cc     01 00 00 FF 
064d0     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
064d4     01 28 66 56 |  if_ne	neg	result1, #1
064d8     00 28 06 A6 |  if_e	mov	result1, #0
064dc     E0 01 90 FD | 	jmp	#LR__0354
064e0                 | LR__0347
064e0     10 5E 05 F1 | 	add	fp, #16
064e4     AF 28 02 FB | 	rdlong	result1, fp
064e8     10 5E 85 F1 | 	sub	fp, #16
064ec     D0 01 90 FD | 	jmp	#LR__0354
064f0                 | LR__0348
064f0     04 5E 05 F1 | 	add	fp, #4
064f4     AF 68 02 FB | 	rdlong	local01, fp
064f8     1C 68 06 F1 | 	add	local01, #28
064fc     34 6D 02 FB | 	rdlong	local03, local01
06500     14 5E 05 F1 | 	add	fp, #20
06504     AF 6C 62 FC | 	wrlong	local03, fp
06508     AF 68 0A FB | 	rdlong	local01, fp wz
0650c     18 5E 85 F1 | 	sub	fp, #24
06510     1C 00 90 5D |  if_ne	jmp	#LR__0349
06514     01 00 00 FF 
06518     5C 12 06 F1 | 	add	ptr___system__dat__, ##604
0651c     09 0D 68 FC | 	wrlong	#6, ptr___system__dat__
06520     01 00 00 FF 
06524     5C 12 86 F1 | 	sub	ptr___system__dat__, ##604
06528     01 28 66 F6 | 	neg	result1, #1
0652c     90 01 90 FD | 	jmp	#LR__0354
06530                 | LR__0349
06530     04 5E 05 F1 | 	add	fp, #4
06534     AF 68 02 FB | 	rdlong	local01, fp
06538     04 5E 85 F1 | 	sub	fp, #4
0653c     24 68 06 F1 | 	add	local01, #36
06540     34 6D 0A FB | 	rdlong	local03, local01 wz
06544     A0 00 90 AD |  if_e	jmp	#LR__0351
06548     24 5E 05 F1 | 	add	fp, #36
0654c     AF 72 02 F6 | 	mov	local06, fp
06550     20 5E 85 F1 | 	sub	fp, #32
06554     AF 74 02 FB | 	rdlong	local07, fp
06558     3A 6F 02 F6 | 	mov	local04, local07
0655c     24 6E 06 F1 | 	add	local04, #36
06560     37 77 02 FB | 	rdlong	local08, local04
06564     3B 69 02 F6 | 	mov	local01, local08
06568     34 6B 02 FB | 	rdlong	local02, local01
0656c     04 68 06 F1 | 	add	local01, #4
06570     34 79 02 FB | 	rdlong	local09, local01
06574     3C 6D 02 F6 | 	mov	local03, local09
06578     3A 7B 02 F6 | 	mov	local10, local07
0657c     04 5E 85 F1 | 	sub	fp, #4
06580     3D 7D 02 F6 | 	mov	local11, local10
06584     00 7F 06 F6 | 	mov	local12, #256
06588     39 81 02 F6 | 	mov	local13, local06
0658c     3E 5B 02 F6 | 	mov	arg01, local11
06590     00 5D 06 F6 | 	mov	arg02, #256
06594     40 5F 02 F6 | 	mov	arg03, local13
06598     07 83 02 F6 | 	mov	local14, objptr
0659c     35 0F 02 F6 | 	mov	objptr, local02
065a0     2D 6C 62 FD | 	call	local03
065a4     41 0F 02 F6 | 	mov	objptr, local14
065a8     14 85 02 F6 | 	mov	local15, result1
065ac     10 5E 05 F1 | 	add	fp, #16
065b0     AF 84 62 FC | 	wrlong	local15, fp
065b4     AF 6A 0A FB | 	rdlong	local02, fp wz
065b8     10 5E 85 F1 | 	sub	fp, #16
065bc     28 00 90 5D |  if_ne	jmp	#LR__0350
065c0     24 5E 05 F1 | 	add	fp, #36
065c4     AF 6E 02 FB | 	rdlong	local04, fp
065c8     24 5E 85 F1 | 	sub	fp, #36
065cc     37 6D 02 F6 | 	mov	local03, local04
065d0     02 6C 0E F5 | 	and	local03, #2 wz
065d4     10 00 90 AD |  if_e	jmp	#LR__0350
065d8     01 68 06 F6 | 	mov	local01, #1
065dc     20 5E 05 F1 | 	add	fp, #32
065e0     AF 02 68 FC | 	wrlong	#1, fp
065e4     20 5E 85 F1 | 	sub	fp, #32
065e8                 | LR__0350
065e8                 | LR__0351
065e8     10 5E 05 F1 | 	add	fp, #16
065ec     AF 00 68 FC | 	wrlong	#0, fp
065f0     10 5E 85 F1 | 	sub	fp, #16
065f4                 | LR__0352
065f4     0C 5E 05 F1 | 	add	fp, #12
065f8     AF 68 02 FB | 	rdlong	local01, fp
065fc     0C 5E 85 F1 | 	sub	fp, #12
06600     00 68 1E F2 | 	cmp	local01, #0 wcz
06604     AC 00 90 ED |  if_be	jmp	#LR__0353
06608     18 5E 05 F1 | 	add	fp, #24
0660c     AF 68 02 FB | 	rdlong	local01, fp
06610     34 6B 02 FB | 	rdlong	local02, local01
06614     04 68 06 F1 | 	add	local01, #4
06618     34 6D 02 FB | 	rdlong	local03, local01
0661c     14 5E 85 F1 | 	sub	fp, #20
06620     AF 5A 02 FB | 	rdlong	arg01, fp
06624     04 5E 85 F1 | 	sub	fp, #4
06628     07 7D 02 F6 | 	mov	local11, objptr
0662c     35 0F 02 F6 | 	mov	objptr, local02
06630     2D 6C 62 FD | 	call	local03
06634     3E 0F 02 F6 | 	mov	objptr, local11
06638     14 7B 02 F6 | 	mov	local10, result1
0663c     14 5E 05 F1 | 	add	fp, #20
06640     AF 7A 62 FC | 	wrlong	local10, fp
06644     14 5E 85 F1 | 	sub	fp, #20
06648     00 7A 5E F2 | 	cmps	local10, #0 wcz
0664c     64 00 90 CD |  if_b	jmp	#LR__0353
06650     1C 5E 05 F1 | 	add	fp, #28
06654     AF 68 02 FB | 	rdlong	local01, fp
06658     34 6D 02 F6 | 	mov	local03, local01
0665c     01 6C 06 F1 | 	add	local03, #1
06660     AF 6C 62 FC | 	wrlong	local03, fp
06664     08 5E 85 F1 | 	sub	fp, #8
06668     AF 74 02 FB | 	rdlong	local07, fp
0666c     34 75 42 FC | 	wrbyte	local07, local01
06670     04 5E 85 F1 | 	sub	fp, #4
06674     AF 68 02 FB | 	rdlong	local01, fp
06678     01 68 06 F1 | 	add	local01, #1
0667c     AF 68 62 FC | 	wrlong	local01, fp
06680     04 5E 85 F1 | 	sub	fp, #4
06684     AF 68 02 FB | 	rdlong	local01, fp
06688     01 68 86 F1 | 	sub	local01, #1
0668c     AF 68 62 FC | 	wrlong	local01, fp
06690     14 5E 05 F1 | 	add	fp, #20
06694     AF 68 0A FB | 	rdlong	local01, fp wz
06698     20 5E 85 F1 | 	sub	fp, #32
0669c     54 FF 9F AD |  if_e	jmp	#LR__0352
066a0     14 5E 05 F1 | 	add	fp, #20
066a4     AF 6C 02 FB | 	rdlong	local03, fp
066a8     14 5E 85 F1 | 	sub	fp, #20
066ac     0A 6C 0E F2 | 	cmp	local03, #10 wz
066b0     40 FF 9F 5D |  if_ne	jmp	#LR__0352
066b4                 | LR__0353
066b4     10 5E 05 F1 | 	add	fp, #16
066b8     AF 28 02 FB | 	rdlong	result1, fp
066bc     10 5E 85 F1 | 	sub	fp, #16
066c0                 | LR__0354
066c0     AF F0 03 F6 | 	mov	ptra, fp
066c4     BF 00 A0 FD | 	call	#popregs_
066c8                 | __system___vfsread_ret
066c8     2D 00 64 FD | 	ret
066cc                 | 
066cc                 | __struct__s_vfs_file_t_putchar
066cc     04 5A 05 F6 | 	mov	COUNT_, #4
066d0     B0 00 A0 FD | 	call	#pushregs_
066d4     18 0E 06 F1 | 	add	objptr, #24
066d8     07 69 0A FB | 	rdlong	local01, objptr wz
066dc     18 0E 86 F1 | 	sub	objptr, #24
066e0     00 28 06 A6 |  if_e	mov	result1, #0
066e4     3C 00 90 AD |  if_e	jmp	#LR__0355
066e8     18 0E 06 F1 | 	add	objptr, #24
066ec     07 69 02 FB | 	rdlong	local01, objptr
066f0     18 0E 86 F1 | 	sub	objptr, #24
066f4     34 6B 02 FB | 	rdlong	local02, local01
066f8     04 68 06 F1 | 	add	local01, #4
066fc     34 6D 02 FB | 	rdlong	local03, local01
06700     07 5D 02 F6 | 	mov	arg02, objptr
06704     07 6F 02 F6 | 	mov	local04, objptr
06708     35 0F 02 F6 | 	mov	objptr, local02
0670c     2D 6C 62 FD | 	call	local03
06710     37 0F 02 F6 | 	mov	objptr, local04
06714     00 28 5E F2 | 	cmps	result1, #0 wcz
06718     00 68 06 C6 |  if_b	mov	local01, #0
0671c     01 68 06 36 |  if_ae	mov	local01, #1
06720     34 29 02 F6 | 	mov	result1, local01
06724                 | LR__0355
06724     AF F0 03 F6 | 	mov	ptra, fp
06728     BF 00 A0 FD | 	call	#popregs_
0672c                 | __struct__s_vfs_file_t_putchar_ret
0672c     2D 00 64 FD | 	ret
06730                 | 
06730                 | __struct__s_vfs_file_t_getchar
06730     04 5A 05 F6 | 	mov	COUNT_, #4
06734     B0 00 A0 FD | 	call	#pushregs_
06738     1C 0E 06 F1 | 	add	objptr, #28
0673c     07 69 0A FB | 	rdlong	local01, objptr wz
06740     1C 0E 86 F1 | 	sub	objptr, #28
06744     01 28 66 A6 |  if_e	neg	result1, #1
06748     2C 00 90 AD |  if_e	jmp	#LR__0356
0674c                 | '         return getcf(__this);
0674c     1C 0E 06 F1 | 	add	objptr, #28
06750     07 69 02 FB | 	rdlong	local01, objptr
06754     1C 0E 86 F1 | 	sub	objptr, #28
06758     34 6B 02 FB | 	rdlong	local02, local01
0675c     04 68 06 F1 | 	add	local01, #4
06760     34 6D 02 FB | 	rdlong	local03, local01
06764     07 5B 02 F6 | 	mov	arg01, objptr
06768     07 6F 02 F6 | 	mov	local04, objptr
0676c     35 0F 02 F6 | 	mov	objptr, local02
06770     2D 6C 62 FD | 	call	local03
06774     37 0F 02 F6 | 	mov	objptr, local04
06778                 | LR__0356
06778     AF F0 03 F6 | 	mov	ptra, fp
0677c     BF 00 A0 FD | 	call	#popregs_
06780                 | __struct__s_vfs_file_t_getchar_ret
06780     2D 00 64 FD | 	ret
06784                 | 
06784                 | __struct___bas_wrap_sender_tx
06784     04 5A 05 F6 | 	mov	COUNT_, #4
06788     B0 00 A0 FD | 	call	#pushregs_
0678c     07 69 02 FB | 	rdlong	local01, objptr
06790     34 6B 02 FB | 	rdlong	local02, local01
06794     04 68 06 F1 | 	add	local01, #4
06798     34 6D 02 FB | 	rdlong	local03, local01
0679c     07 6F 02 F6 | 	mov	local04, objptr
067a0     35 0F 02 F6 | 	mov	objptr, local02
067a4     2D 6C 62 FD | 	call	local03
067a8     37 0F 02 F6 | 	mov	objptr, local04
067ac     01 28 06 F6 | 	mov	result1, #1
067b0     AF F0 03 F6 | 	mov	ptra, fp
067b4     BF 00 A0 FD | 	call	#popregs_
067b8                 | __struct___bas_wrap_sender_tx_ret
067b8     2D 00 64 FD | 	ret
067bc                 | 
067bc                 | LR__0357
067bc     20 21 21 21 
067c0     20 63 6F 72 
067c4     72 75 70 74 
067c8     65 64 20 68 
067cc     65 61 70 3F 
067d0     3F 3F 20 21 
067d4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
067d7     00          | 	byte	0
067d8                 | LR__0358
067d8     20 21 21 21 
067dc     20 6F 75 74 
067e0     20 6F 66 20 
067e4     68 65 61 70 
067e8     20 6D 65 6D 
067ec     6F 72 79 20 
067f0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
067f4     00          | 	byte	0
067f5                 | LR__0359
067f5     20 21 21 21 
067f9     20 63 6F 72 
067fd     72 75 70 74 
06801     65 64 20 68 
06805     65 61 70 20 
06809     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
0680d     00          | 	byte	0
0680e     00 00       | 	alignl
06810                 | _dat_
06810     6B 61 64 69 
06814     27 73 2E 6A 
06818     61 2E 6D 61 
0681c     6A 61 00 00 | module file "jamaja.mod"
06820     00 00 00 00 
06824     73 74 2D 30 
06828     35 3A 62 61 
0682c     73 73 67 75 | 	byte	$00, $00, $00, $00, $73, $74, $2d, $30, $35, $3a, $62, $61, $73, $73, $67, $75
06830     69 74 61 72 
06834     78 00 00 00 
06838     00 00 0A 03 
0683c     00 1F 09 C3 | 	byte	$69, $74, $61, $72, $78, $00, $00, $00, $00, $00, $0a, $03, $00, $1f, $09, $c3
06840     00 40 73 74 
06844     2D 34 31 3A 
06848     72 2E 62 61 
0684c     73 73 64 72 | 	byte	$00, $40, $73, $74, $2d, $34, $31, $3a, $72, $2e, $62, $61, $73, $73, $64, $72
06850     00 00 00 00 
06854     00 00 00 00 | 	byte	$00[8]
06858     0A 31 00 1E 
0685c     00 00 00 01 
06860     73 74 2D 34 
06864     31 3A 72 2E | 	byte	$0a, $31, $00, $1e, $00, $00, $00, $01, $73, $74, $2d, $34, $31, $3a, $72, $2e
06868     73 6E 61 72 
0686c     65 00 00 00 
06870     00 00 00 00 
06874     00 00 13 B1 | 	byte	$73, $6e, $61, $72, $65, $00, $00, $00, $00, $00, $00, $00, $00, $00, $13, $b1
06878     00 1B 00 00 
0687c     00 01 53 74 
06880     2D 31 31 3A 
06884     45 4C 6F 6F | 	byte	$00, $1b, $00, $00, $00, $01, $53, $74, $2d, $31, $31, $3a, $45, $4c, $6f, $6f
06888     70 33 00 00 
0688c     00 00 00 00 
06890     00 00 00 00 
06894     00 08 00 40 | 	byte	$70, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $00, $40
06898     00 00 00 08 
0689c     73 74 2D 30 
068a0     39 3A 70 6A 
068a4     6F 74 74 00 | 	byte	$00, $00, $00, $08, $73, $74, $2d, $30, $39, $3a, $70, $6a, $6f, $74, $74, $00
068a8     00 00 00 00 
068ac     00 00 00 00 
068b0     00 00       | 	byte	$00[10]
068b2     05 21 00 40 
068b6     00 00 00 01 
068ba     73 74 2D 30 
068be     39 3A 74 6F | 	byte	$05, $21, $00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $39, $3a, $74, $6f
068c2     6D 2E 65 30 
068c6     31 00 00 00 
068ca     00 00 00 00 
068ce     00 00 05 46 | 	byte	$6d, $2e, $65, $30, $31, $00, $00, $00, $00, $00, $00, $00, $00, $00, $05, $46
068d2     00 40 00 00 
068d6     00 01 73 74 
068da     2D 30 39 3A 
068de     77 61 6F 77 | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $39, $3a, $77, $61, $6f, $77
068e2     32 2E 63 68 
068e6     00 00 00 00 
068ea     00 00 00 00 
068ee     06 11 00 40 | 	byte	$32, $2e, $63, $68, $00, $00, $00, $00, $00, $00, $00, $00, $06, $11, $00, $40
068f2     05 F1 00 20 
068f6     53 54 2D 33 
068fa     33 3A 69 6D 
068fe     2E 68 69 68 | 	byte	$05, $f1, $00, $20, $53, $54, $2d, $33, $33, $3a, $69, $6d, $2e, $68, $69, $68
06902     61 74 00 00 
06906     00 00 00 00 
0690a     00 00 03 8B 
0690e     00 40 00 00 | 	byte	$61, $74, $00, $00, $00, $00, $00, $00, $00, $00, $03, $8b, $00, $40, $00, $00
06912     00 01 73 74 
06916     2D 30 35 3A 
0691a     63 7A 73 74 
0691e     72 69 6E 67 | 	byte	$00, $01, $73, $74, $2d, $30, $35, $3a, $63, $7a, $73, $74, $72, $69, $6e, $67
06922     00 00 00 00 
06926     00 00 00 00 | 	byte	$00[8]
0692a     12 6B 00 3B 
0692e     00 D1 11 8A 
06932     00 00 00 00 
06936     00 00 00 00 | 	byte	$12, $6b, $00, $3b, $00, $d1, $11, $8a, $00, $00, $00, $00, $00, $00, $00, $00
0693a     00 00 00 00 
0693e     00 00 00 00 
06942     00 00 00 00 
06946     00 00 00 00 
0694a     00 00 00 00 
0694e     00          | 	byte	$00[21]
0694f     01 00 00 00 
06953     00 00 00 00 
06957     00 00 00 00 
0695b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0695f     00 00 00 00 
06963     00 00 00 00 
06967     00 00 00 00 
0696b     00 00       | 	byte	$00[14]
0696d     01 00 00 00 
06971     00 00 00 00 
06975     00 00 00 00 
06979     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0697d     00 00 00 00 
06981     00 00 00 00 
06985     00 00 00 00 
06989     00 00       | 	byte	$00[14]
0698b     01 00 00 00 
0698f     00 00 00 00 
06993     00 00 00 00 
06997     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0699b     00 00 00 00 
0699f     00 00 00 00 
069a3     00 00 00 00 
069a7     00 00       | 	byte	$00[14]
069a9     01 00 00 00 
069ad     00 00 00 00 
069b1     00 00 00 00 
069b5     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
069b9     00 00 00 00 
069bd     00 00 00 00 
069c1     00 00 00 00 
069c5     00 00       | 	byte	$00[14]
069c7     01 00 00 00 
069cb     00 00 00 00 
069cf     00 00 00 00 
069d3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
069d7     00 00 00 00 
069db     00 00 00 00 
069df     00 00 00 00 
069e3     00 00       | 	byte	$00[14]
069e5     01 00 00 00 
069e9     00 00 00 00 
069ed     00 00 00 00 
069f1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
069f5     00 00 00 00 
069f9     00 00 00 00 
069fd     00 00 00 00 
06a01     00 00       | 	byte	$00[14]
06a03     01 00 00 00 
06a07     00 00 00 00 
06a0b     00 00 00 00 
06a0f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a13     00 00 00 00 
06a17     00 00 00 00 
06a1b     00 00 00 00 
06a1f     00 00       | 	byte	$00[14]
06a21     01 00 00 00 
06a25     00 00 00 00 
06a29     00 00 00 00 
06a2d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a31     00 00 00 00 
06a35     00 00 00 00 
06a39     00 00 00 00 
06a3d     00 00       | 	byte	$00[14]
06a3f     01 00 00 00 
06a43     00 00 00 00 
06a47     00 00 00 00 
06a4b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a4f     00 00 00 00 
06a53     00 00 00 00 
06a57     00 00 00 00 
06a5b     00 00       | 	byte	$00[14]
06a5d     01 00 00 00 
06a61     00 00 00 00 
06a65     00 00 00 00 
06a69     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a6d     00 00 00 00 
06a71     00 00 00 00 
06a75     00 00 00 00 
06a79     00 00       | 	byte	$00[14]
06a7b     01 00 00 00 
06a7f     00 00 00 00 
06a83     00 00 00 00 
06a87     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a8b     00 00 00 00 
06a8f     00 00 00 00 
06a93     00 00 00 00 
06a97     00 00       | 	byte	$00[14]
06a99     01 00 00 00 
06a9d     00 00 00 00 
06aa1     00 00 00 00 
06aa5     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06aa9     00 00 00 00 
06aad     00 00 00 00 
06ab1     00 00 00 00 
06ab5     00 00       | 	byte	$00[14]
06ab7     01 00 00 00 
06abb     00 00 00 00 
06abf     00 00 00 00 
06ac3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ac7     00 00 00 00 
06acb     00 00 00 00 
06acf     00 00 00 00 
06ad3     00 00       | 	byte	$00[14]
06ad5     01 00 00 00 
06ad9     00 00 00 00 
06add     00 00 00 00 
06ae1     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ae5     00 00 00 00 
06ae9     00 00 00 00 
06aed     00 00 00 00 
06af1     00 00       | 	byte	$00[14]
06af3     01 00 00 00 
06af7     00 00 00 00 
06afb     00 00 00 00 
06aff     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b03     00 00 00 00 
06b07     00 00 00 00 
06b0b     00 00 00 00 
06b0f     00 00       | 	byte	$00[14]
06b11     01 00 00 00 
06b15     00 00 00 00 
06b19     00 00 00 00 
06b1d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b21     00 00 00 00 
06b25     00 00 00 00 
06b29     00 00 00 00 
06b2d     00 00       | 	byte	$00[14]
06b2f     01 00 00 00 
06b33     00 00 00 00 
06b37     00 00 00 00 
06b3b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b3f     00 00 00 00 
06b43     00 00 00 00 
06b47     00 00 00 00 
06b4b     00 00       | 	byte	$00[14]
06b4d     01 00 00 00 
06b51     00 00 00 00 
06b55     00 00 00 00 
06b59     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b5d     00 00 00 00 
06b61     00 00 00 00 
06b65     00 00 00 00 
06b69     00 00       | 	byte	$00[14]
06b6b     01 00 00 00 
06b6f     00 00 00 00 
06b73     00 00 00 00 
06b77     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b7b     00 00 00 00 
06b7f     00 00 00 00 
06b83     00 00 00 00 
06b87     00 00       | 	byte	$00[14]
06b89     01 00 00 00 
06b8d     00 00 00 00 
06b91     00 00 00 00 
06b95     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b99     00 00 00 00 
06b9d     00 00 00 00 
06ba1     00 00 00 00 
06ba5     00 00       | 	byte	$00[14]
06ba7     01 00 00 00 
06bab     00 00 00 00 
06baf     00 00 00 00 
06bb3     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06bb7     00 00 00 00 
06bbb     00 00 00 00 
06bbf     00 00 00 00 
06bc3     00 00       | 	byte	$00[14]
06bc5     01 0E 00 00 
06bc9     01 00 02 03 
06bcd     04 03 05 06 
06bd1     03 04 03 05 | 	byte	$01, $0e, $00, $00, $01, $00, $02, $03, $04, $03, $05, $06, $03, $04, $03, $05
06bd5     07 0E 0E 0F 
06bd9     0F 10 07 08 
06bdd     09 05 06 11 
06be1     12 13 12 13 | 	byte	$07, $0e, $0e, $0f, $0f, $10, $07, $08, $09, $05, $06, $11, $12, $13, $12, $13
06be5     00 00 00 00 
      ...             
06c41     00 00 00 00 
06c45     00 00 00    | 	byte	$00[99]
06c48     4D 2E 4B 2E 
06c4c     00 BE 2F 04 
06c50     00 8F 80 00 
06c54     01 FC 10 00 | 	byte	$4d, $2e, $4b, $2e, $00, $be, $2f, $04, $00, $8f, $80, $00, $01, $fc, $10, $00
06c58     00 AA 9A 01 
06c5c     00 00 00 00 
06c60     00 00 00 00 
06c64     00 00 00 00 | 	byte	$00, $aa, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06c68     00 00 0A 01 
06c6c     00 00 00 00 
06c70     00 8F 80 00 
06c74     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
06c78     00 BE 9A 01 
06c7c     00 00 00 00 
06c80     00 00 00 00 
06c84     00 00 00 00 | 	byte	$00, $be, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06c88     00 00 0A 01 
06c8c     00 00 00 00 
06c90     00 8F 80 00 
06c94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06c98     00 D6 9A 01 
06c9c     00 00 00 00 
06ca0     00 00 00 00 
06ca4     00 00 00 00 | 	byte	$00, $d6, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ca8     00 00 0A 01 
06cac     00 00 00 00 
06cb0     00 8F 80 00 
06cb4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06cb8     00 BE 9A 01 
06cbc     00 00 00 00 
06cc0     00 00 00 00 
06cc4     00 00 00 00 | 	byte	$00, $be, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06cc8     00 00 0A 01 
06ccc     00 BE 30 00 
06cd0     00 8F 80 00 
06cd4     00 FE 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $fe, $10, $00
06cd8     00 AA 9A 01 
06cdc     00 00 00 00 
06ce0     00 00 00 00 
06ce4     00 00 00 00 | 	byte	$00, $aa, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ce8     00 00 0A 01 
06cec     00 00 00 00 
06cf0     00 8F 80 00 
06cf4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06cf8     00 00 0A 01 
06cfc     00 00 00 00 
06d00     00 00 00 00 
06d04     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d08     00 00 0A 01 
06d0c     00 00 00 00 
06d10     00 8F 80 00 
06d14     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06d18     00 00 0A 01 
06d1c     00 00 00 00 
06d20     00 00 00 00 
06d24     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d28     00 00 0A 01 
06d2c     00 BE 20 00 
06d30     00 8F 80 00 
06d34     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
06d38     00 00 0A 01 
06d3c     00 00 00 00 
06d40     00 00 00 00 
06d44     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d48     00 00 0A 01 
06d4c     00 BE 20 00 
06d50     00 8F 80 00 
06d54     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
06d58     00 00 0A 01 
06d5c     00 00 00 00 
06d60     00 00 00 00 
06d64     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d68     00 00 0A 01 
06d6c     00 00 00 00 
06d70     00 8F 80 00 
06d74     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
06d78     00 00 0A 01 
06d7c     00 00 00 00 
06d80     00 00 00 00 
06d84     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d88     00 00 0A 01 
06d8c     00 00 00 00 
06d90     00 8F 80 00 
06d94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06d98     00 00 0A 01 
06d9c     00 00 00 00 
06da0     00 00 00 00 
06da4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06da8     00 00 0A 01 
06dac     00 00 00 00 
06db0     00 8F 80 00 
06db4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06db8     00 00 0A 01 
06dbc     00 00 00 00 
06dc0     00 00 00 00 
06dc4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06dc8     00 00 0A 01 
06dcc     00 BE 30 00 
06dd0     00 8F 80 00 
06dd4     00 FE 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $fe, $10, $00
06dd8     00 00 0A 01 
06ddc     00 00 00 00 
06de0     00 00 00 00 
06de4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06de8     00 00 0A 01 
06dec     00 00 00 00 
06df0     00 8F 80 00 
06df4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06df8     00 00 0A 01 
06dfc     00 00 00 00 
06e00     00 00 00 00 
06e04     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06e08     00 00 0A 01 
06e0c     00 00 00 00 
06e10     00 8F 80 00 
06e14     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06e18     00 00 0A 01 
06e1c     00 00 00 00 
06e20     00 00 00 00 
06e24     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06e28     00 00 0A 01 
06e2c     00 00 00 00 
06e30     00 8F 80 00 
06e34     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06e38     00 00 0A 01 
06e3c     00 00 00 00 
06e40     00 00 00 00 
06e44     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06e48     00 00 0A 01 
06e4c     00 BE 20 00 
06e50     00 8F 80 00 
06e54     01 AC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $ac, $10, $00
06e58     00 AA 9A 01 
06e5c     00 00 00 00 
06e60     00 00 00 00 
06e64     00 00 00 00 | 	byte	$00, $aa, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06e68     00 00 0A 01 
06e6c     00 00 00 00 
06e70     00 8F 80 00 
06e74     01 AC 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $ac, $10, $00
06e78     00 8F 9A 01 
06e7c     00 00 00 00 
06e80     00 00 00 00 
06e84     00 00 00 00 | 	byte	$00, $8f, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06e88     00 00 0A 01 
06e8c     00 00 00 00 
06e90     00 8F 80 00 
06e94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06e98     00 AA 9A 01 
06e9c     00 00 00 00 
06ea0     00 00 00 00 
06ea4     00 00 00 00 | 	byte	$00, $aa, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ea8     00 00 0A 01 
06eac     00 00 00 00 
06eb0     00 8F 80 00 
06eb4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06eb8     00 00 0A 01 
06ebc     00 00 00 00 
06ec0     00 00 00 00 
06ec4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ec8     00 00 0A 01 
06ecc     00 BE 30 00 
06ed0     00 8F 80 00 
06ed4     00 D6 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $d6, $10, $00
06ed8     00 00 0A 01 
06edc     00 00 00 00 
06ee0     00 00 00 00 
06ee4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ee8     00 00 0A 01 
06eec     00 00 00 00 
06ef0     00 8F 80 00 
06ef4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06ef8     00 00 0A 01 
06efc     00 00 00 00 
06f00     00 00 00 00 
06f04     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06f08     00 00 0A 01 
06f0c     00 00 00 00 
06f10     00 8F 80 00 
06f14     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06f18     00 D6 9A 01 
06f1c     00 00 00 00 
06f20     00 00 00 00 
06f24     00 00 00 00 | 	byte	$00, $d6, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06f28     00 00 0A 01 
06f2c     00 BE 20 00 
06f30     00 8F 80 00 
06f34     02 80 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $80, $10, $00
06f38     00 BE 9A 01 
06f3c     00 00 00 00 
06f40     00 00 00 00 
06f44     00 00 00 00 | 	byte	$00, $be, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06f48     00 00 0A 01 
06f4c     00 BE 20 00 
06f50     00 8F 80 00 
06f54     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
06f58     00 00 0A 01 
06f5c     00 00 00 00 
06f60     00 00 00 00 
06f64     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06f68     00 00 0A 01 
06f6c     00 00 00 00 
06f70     00 8F 80 00 
06f74     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
06f78     00 00 0A 01 
06f7c     00 00 00 00 
06f80     00 00 00 00 
06f84     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06f88     00 00 0A 01 
06f8c     00 00 00 00 
06f90     00 8F 80 00 
06f94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06f98     00 00 0A 01 
06f9c     00 00 00 00 
06fa0     00 00 00 00 
06fa4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06fa8     00 00 0A 01 
06fac     00 00 00 00 
06fb0     00 8F 80 00 
06fb4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06fb8     00 00 0A 01 
06fbc     00 00 00 00 
06fc0     00 00 00 00 
06fc4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06fc8     00 00 0A 01 
06fcc     00 BE 30 00 
06fd0     00 8F 80 00 
06fd4     01 1D 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00
06fd8     00 00 0A 01 
06fdc     00 00 00 00 
06fe0     00 00 00 00 
06fe4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06fe8     00 00 0A 01 
06fec     00 00 00 00 
06ff0     00 8F 80 00 
06ff4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
06ff8     00 00 0A 01 
06ffc     00 00 00 00 
07000     00 00 00 00 
07004     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07008     00 00 0A 01 
0700c     00 00 00 00 
07010     00 8F 80 00 
07014     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07018     00 00 0A 01 
0701c     00 00 00 00 
07020     00 00 00 00 
07024     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07028     00 00 0A 01 
0702c     00 00 00 00 
07030     00 8F 80 00 
07034     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07038     00 BE 9A 01 
0703c     00 00 00 00 
07040     00 00 00 00 
07044     00 00 00 00 | 	byte	$00, $be, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07048     00 00 0A 01 
0704c     00 BE 2F 04 
07050     00 8F 80 00 
07054     02 80 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $2f, $04, $00, $8f, $80, $00, $02, $80, $10, $00
07058     00 BE 9A 01 
0705c     00 00 00 00 
07060     00 00 00 00 
07064     00 00 00 00 | 	byte	$00, $be, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07068     00 00 0A 01 
0706c     00 00 00 00 
07070     00 8F 80 00 
07074     02 80 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $80, $10, $00
07078     00 D6 9A 01 
0707c     00 00 00 00 
07080     00 00 00 00 
07084     00 00 00 00 | 	byte	$00, $d6, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07088     00 00 0A 01 
0708c     00 00 00 00 
07090     00 8F 80 00 
07094     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07098     00 FE 9A 01 
0709c     00 00 00 00 
070a0     00 00 00 00 
070a4     00 00 00 00 | 	byte	$00, $fe, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
070a8     00 00 0A 01 
070ac     00 00 00 00 
070b0     00 8F 80 00 
070b4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
070b8     00 00 0A 01 
070bc     00 00 00 00 
070c0     00 00 00 00 
070c4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
070c8     00 00 0A 01 
070cc     00 BE 30 00 
070d0     00 8F 80 00 
070d4     01 40 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $01, $40, $10, $00
070d8     00 00 0A 01 
070dc     00 00 00 00 
070e0     00 00 00 00 
070e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
070e8     00 00 0A 01 
070ec     00 00 00 00 
070f0     00 8F 80 00 
070f4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
070f8     00 00 0A 01 
070fc     00 00 00 00 
07100     00 00 00 00 
07104     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07108     00 00 0A 01 
0710c     00 00 00 00 
07110     00 8F 80 00 
07114     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07118     00 00 0A 01 
0711c     00 00 00 00 
07120     00 00 00 00 
07124     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07128     00 00 0A 01 
0712c     00 BE 20 00 
07130     00 8F 80 00 
07134     02 80 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $80, $10, $00
07138     00 00 0A 01 
0713c     00 00 00 00 
07140     00 00 00 00 
07144     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07148     00 00 0A 01 
0714c     00 BE 20 00 
07150     00 8F 80 00 
07154     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07158     00 00 0A 01 
0715c     00 00 00 00 
07160     00 00 00 00 
07164     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07168     00 00 0A 01 
0716c     00 00 00 00 
07170     00 8F 80 00 
07174     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07178     00 00 0A 01 
0717c     00 00 00 00 
07180     00 00 00 00 
07184     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07188     00 00 0A 01 
0718c     00 00 00 00 
07190     00 8F 80 00 
07194     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07198     00 00 0A 01 
0719c     00 00 00 00 
071a0     00 00 00 00 
071a4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
071a8     00 00 0A 01 
071ac     00 00 00 00 
071b0     00 8F 80 00 
071b4     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
071b8     00 00 0A 01 
071bc     00 00 00 00 
071c0     00 00 00 00 
071c4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
071c8     00 00 0A 01 
071cc     00 BE 30 00 
071d0     00 8F 80 00 
071d4     01 1D 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00
071d8     00 00 0A 01 
071dc     00 00 00 00 
071e0     00 00 00 00 
071e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
071e8     00 00 0A 01 
071ec     00 00 00 00 
071f0     00 8F 80 00 
071f4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
071f8     00 BE 9A 01 
071fc     00 00 00 00 
07200     00 00 00 00 
07204     00 00 00 00 | 	byte	$00, $be, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07208     00 00 0A 01 
0720c     00 00 00 00 
07210     00 8F 80 00 
07214     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07218     00 D6 9A 01 
0721c     00 00 00 00 
07220     00 00 00 00 
07224     00 00 00 00 | 	byte	$00, $d6, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07228     00 00 0A 01 
0722c     00 00 00 00 
07230     00 8F 80 00 
07234     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07238     00 E2 9A 01 
0723c     00 00 00 00 
07240     00 00 00 00 
07244     00 00 00 00 | 	byte	$00, $e2, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07248     00 00 0A 01 
0724c     00 BE 20 00 
07250     00 8F 80 00 
07254     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07258     00 D6 9A 01 
0725c     00 00 00 00 
07260     00 00 00 00 
07264     00 00 00 00 | 	byte	$00, $d6, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07268     00 00 0A 01 
0726c     00 00 00 00 
07270     00 8F 80 00 
07274     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07278     00 E2 9A 01 
0727c     00 00 00 00 
07280     00 00 00 00 
07284     00 00 00 00 | 	byte	$00, $e2, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07288     00 00 0A 01 
0728c     00 00 00 00 
07290     00 8F 80 00 
07294     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07298     00 FE 9A 01 
0729c     00 00 00 00 
072a0     00 00 00 00 
072a4     00 00 00 00 | 	byte	$00, $fe, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
072a8     00 00 0A 01 
072ac     00 00 00 00 
072b0     00 8F 80 00 
072b4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
072b8     00 00 0A 01 
072bc     00 00 00 00 
072c0     00 00 00 00 
072c4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
072c8     00 00 0A 01 
072cc     00 BE 30 00 
072d0     00 8F 80 00 
072d4     00 FE 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $fe, $10, $00
072d8     00 00 0A 01 
072dc     00 00 00 00 
072e0     00 00 00 00 
072e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
072e8     00 00 0A 01 
072ec     00 00 00 00 
072f0     00 8F 80 00 
072f4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
072f8     00 00 0A 01 
072fc     00 00 00 00 
07300     00 00 00 00 
07304     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07308     00 00 0A 01 
0730c     00 00 00 00 
07310     00 8F 80 00 
07314     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07318     00 00 0A 01 
0731c     00 00 00 00 
07320     00 00 00 00 
07324     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07328     00 00 0A 01 
0732c     00 BE 20 00 
07330     00 8F 80 00 
07334     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07338     00 00 0A 01 
0733c     00 00 00 00 
07340     00 00 00 00 
07344     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07348     00 00 0A 01 
0734c     00 BE 20 00 
07350     00 8F 80 00 
07354     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07358     00 00 0A 01 
0735c     00 00 00 00 
07360     00 00 00 00 
07364     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07368     00 00 0A 01 
0736c     00 00 00 00 
07370     00 8F 80 00 
07374     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07378     00 00 0A 01 
0737c     00 00 00 00 
07380     00 00 00 00 
07384     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07388     00 00 0A 01 
0738c     00 00 00 00 
07390     00 8F 80 00 
07394     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07398     00 00 0A 01 
0739c     00 00 00 00 
073a0     00 00 00 00 
073a4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
073a8     00 00 0A 01 
073ac     00 00 00 00 
073b0     00 8F 80 00 
073b4     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
073b8     00 00 0A 01 
073bc     00 00 00 00 
073c0     00 00 00 00 
073c4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
073c8     00 00 0A 01 
073cc     00 BE 30 00 
073d0     00 8F 80 00 
073d4     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
073d8     00 00 0A 01 
073dc     00 00 00 00 
073e0     00 00 00 00 
073e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
073e8     00 00 0A 01 
073ec     00 00 00 00 
073f0     00 8F 80 00 
073f4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
073f8     00 00 0A 01 
073fc     00 00 00 00 
07400     00 00 00 00 
07404     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07408     00 00 0A 01 
0740c     00 00 00 00 
07410     00 8F 80 00 
07414     02 1A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $1a, $10, $00
07418     00 00 0A 01 
0741c     00 00 00 00 
07420     00 00 00 00 
07424     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07428     00 00 0A 01 
0742c     00 00 00 00 
07430     00 8F 80 00 
07434     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07438     00 00 0A 01 
0743c     00 00 00 00 
07440     00 00 00 00 
07444     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07448     00 00 0A 01 
0744c     00 BE 2F 04 
07450     00 8F 80 00 
07454     02 80 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $2f, $04, $00, $8f, $80, $00, $02, $80, $10, $00
07458     00 BE 9A 01 
0745c     00 00 00 00 
07460     00 00 00 00 
07464     00 00 00 00 | 	byte	$00, $be, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07468     00 00 0A 01 
0746c     00 00 00 00 
07470     00 8F 80 00 
07474     02 80 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $80, $10, $00
07478     00 D6 9A 01 
0747c     00 00 00 00 
07480     00 00 00 00 
07484     00 00 00 00 | 	byte	$00, $d6, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07488     00 00 0A 01 
0748c     00 00 00 00 
07490     00 8F 80 00 
07494     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07498     00 FE 9A 01 
0749c     00 00 00 00 
074a0     00 00 00 00 
074a4     00 00 00 00 | 	byte	$00, $fe, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
074a8     00 00 0A 01 
074ac     00 00 00 00 
074b0     00 8F 80 00 
074b4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
074b8     00 00 0A 01 
074bc     00 00 00 00 
074c0     00 00 00 00 
074c4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
074c8     00 00 0A 01 
074cc     00 BE 30 00 
074d0     00 8F 80 00 
074d4     01 40 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $01, $40, $10, $00
074d8     00 00 0A 01 
074dc     00 00 00 00 
074e0     00 00 00 00 
074e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
074e8     00 00 0A 01 
074ec     00 00 00 00 
074f0     00 8F 80 00 
074f4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
074f8     00 00 0A 01 
074fc     00 00 00 00 
07500     00 00 00 00 
07504     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07508     00 00 0A 01 
0750c     00 00 00 00 
07510     00 8F 80 00 
07514     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07518     00 00 0A 01 
0751c     00 00 00 00 
07520     00 00 00 00 
07524     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07528     00 00 0A 01 
0752c     00 BE 20 00 
07530     00 8F 80 00 
07534     02 80 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $80, $10, $00
07538     00 00 0A 01 
0753c     00 00 00 00 
07540     00 00 00 00 
07544     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07548     00 00 0A 01 
0754c     00 BE 20 00 
07550     00 8F 80 00 
07554     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07558     00 00 0A 01 
0755c     00 00 00 00 
07560     00 00 00 00 
07564     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07568     00 00 0A 01 
0756c     00 00 00 00 
07570     00 8F 80 00 
07574     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07578     00 00 0A 01 
0757c     00 00 00 00 
07580     00 00 00 00 
07584     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07588     00 00 0A 01 
0758c     00 00 00 00 
07590     00 8F 80 00 
07594     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07598     00 00 0A 01 
0759c     00 00 00 00 
075a0     00 00 00 00 
075a4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
075a8     00 00 0A 01 
075ac     00 00 00 00 
075b0     00 8F 80 00 
075b4     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
075b8     00 00 0A 01 
075bc     00 00 00 00 
075c0     00 00 00 00 
075c4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
075c8     00 00 0A 01 
075cc     00 BE 30 00 
075d0     00 8F 80 00 
075d4     01 1D 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00
075d8     00 00 0A 01 
075dc     00 00 00 00 
075e0     00 00 00 00 
075e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
075e8     00 00 0A 01 
075ec     00 00 00 00 
075f0     00 8F 80 00 
075f4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
075f8     00 BE 9A 01 
075fc     00 00 00 00 
07600     00 00 00 00 
07604     00 00 00 00 | 	byte	$00, $be, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07608     00 00 0A 01 
0760c     00 00 00 00 
07610     00 8F 80 00 
07614     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07618     00 D6 9A 01 
0761c     00 00 00 00 
07620     00 00 00 00 
07624     00 00 00 00 | 	byte	$00, $d6, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07628     00 00 0A 01 
0762c     00 00 00 00 
07630     00 8F 80 00 
07634     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07638     00 E2 9A 01 
0763c     00 00 00 00 
07640     00 00 00 00 
07644     00 00 00 00 | 	byte	$00, $e2, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07648     00 00 0A 01 
0764c     00 BE 20 00 
07650     00 8F 80 00 
07654     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07658     00 D6 9A 01 
0765c     00 00 00 00 
07660     00 00 00 00 
07664     00 00 00 00 | 	byte	$00, $d6, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07668     00 00 0A 01 
0766c     00 00 00 00 
07670     00 8F 80 00 
07674     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07678     00 E2 9A 01 
0767c     00 00 00 00 
07680     00 00 00 00 
07684     00 00 00 00 | 	byte	$00, $e2, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07688     00 00 0A 01 
0768c     00 00 00 00 
07690     00 8F 80 00 
07694     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07698     00 FE 9A 01 
0769c     00 00 00 00 
076a0     00 00 00 00 
076a4     00 00 00 00 | 	byte	$00, $fe, $9a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
076a8     00 00 0A 01 
076ac     00 00 00 00 
076b0     00 8F 80 00 
076b4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
076b8     00 00 0A 01 
076bc     00 00 00 00 
076c0     00 00 00 00 
076c4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
076c8     00 00 0A 01 
076cc     00 BE 30 00 
076d0     00 8F 80 00 
076d4     00 FE 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $fe, $10, $00
076d8     00 00 0A 01 
076dc     00 00 00 00 
076e0     00 00 00 00 
076e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
076e8     00 00 0A 01 
076ec     00 00 00 00 
076f0     00 8F 80 00 
076f4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
076f8     00 00 0A 01 
076fc     00 00 00 00 
07700     00 00 00 00 
07704     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07708     00 00 0A 01 
0770c     00 00 00 00 
07710     00 8F 80 00 
07714     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07718     00 00 0A 01 
0771c     00 00 00 00 
07720     00 00 00 00 
07724     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07728     00 00 0A 01 
0772c     00 BE 20 00 
07730     00 8F 80 00 
07734     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07738     00 00 0A 01 
0773c     00 00 00 00 
07740     00 00 00 00 
07744     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07748     00 00 0A 01 
0774c     00 BE 20 00 
07750     00 8F 80 00 
07754     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07758     00 00 0A 01 
0775c     00 00 00 00 
07760     00 00 00 00 
07764     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07768     00 00 0A 01 
0776c     00 00 00 00 
07770     00 8F 80 00 
07774     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07778     00 00 0A 01 
0777c     00 00 00 00 
07780     00 00 00 00 
07784     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07788     00 00 0A 01 
0778c     00 00 00 00 
07790     00 8F 80 00 
07794     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07798     00 D6 7A 01 
0779c     00 00 00 00 
077a0     00 00 00 00 
077a4     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
077a8     00 00 0A 01 
077ac     00 00 00 00 
077b0     00 8F 80 00 
077b4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
077b8     00 D6 7A 01 
077bc     00 00 00 00 
077c0     00 00 00 00 
077c4     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
077c8     00 00 0A 01 
077cc     00 BE 30 00 
077d0     00 8F 80 00 
077d4     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
077d8     00 00 0A 01 
077dc     00 00 00 00 
077e0     00 00 00 00 
077e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
077e8     00 00 0A 01 
077ec     00 00 00 00 
077f0     00 8F 80 00 
077f4     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
077f8     00 00 0A 01 
077fc     00 00 00 00 
07800     00 00 00 00 
07804     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07808     00 00 0A 01 
0780c     00 00 00 00 
07810     00 8F 80 00 
07814     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07818     00 E2 7A 01 
0781c     00 00 00 00 
07820     00 00 00 00 
07824     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07828     00 00 0A 01 
0782c     00 00 00 00 
07830     00 8F 80 00 
07834     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
07838     00 D6 7A 01 
0783c     00 00 00 00 
07840     00 00 00 00 
07844     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07848     00 00 0A 01 
0784c     00 BE 2F 04 
07850     00 8F 80 00 
07854     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $2f, $04, $00, $8f, $80, $00, $01, $fc, $10, $00
07858     00 00 0A 01 
0785c     00 00 00 00 
07860     00 00 00 00 
07864     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07868     00 00 0A 01 
0786c     00 00 00 00 
07870     00 8F 80 00 
07874     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07878     00 D6 7A 01 
0787c     00 00 00 00 
07880     00 00 00 00 
07884     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07888     00 00 0A 01 
0788c     00 00 00 00 
07890     00 8F 80 00 
07894     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07898     00 00 0A 01 
0789c     00 00 00 00 
078a0     00 00 00 00 
078a4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
078a8     00 00 0A 01 
078ac     00 00 00 00 
078b0     00 8F 80 00 
078b4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
078b8     00 00 0A 01 
078bc     00 00 00 00 
078c0     00 00 00 00 
078c4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
078c8     00 00 0A 01 
078cc     00 BE 30 00 
078d0     00 8F 80 00 
078d4     00 FE 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $fe, $10, $00
078d8     00 00 0A 01 
078dc     00 00 00 00 
078e0     00 00 00 00 
078e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
078e8     00 00 0A 01 
078ec     00 00 00 00 
078f0     00 8F 80 00 
078f4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
078f8     00 00 0A 01 
078fc     00 00 00 00 
07900     00 00 00 00 
07904     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07908     00 00 0A 01 
0790c     00 00 00 00 
07910     00 8F 80 00 
07914     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07918     00 D6 7A 01 
0791c     00 00 00 00 
07920     00 00 00 00 
07924     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07928     00 00 0A 01 
0792c     00 BE 20 00 
07930     00 8F 80 00 
07934     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07938     00 BE 7A 01 
0793c     00 00 00 00 
07940     00 00 00 00 
07944     00 00 00 00 | 	byte	$00, $be, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07948     00 00 0A 01 
0794c     00 BE 20 00 
07950     00 8F 80 00 
07954     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07958     00 00 0A 01 
0795c     00 00 00 00 
07960     00 00 00 00 
07964     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07968     00 00 0A 01 
0796c     00 00 00 00 
07970     00 8F 80 00 
07974     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07978     00 D6 7A 01 
0797c     00 00 00 00 
07980     00 00 00 00 
07984     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07988     00 00 0A 01 
0798c     00 00 00 00 
07990     00 8F 80 00 
07994     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07998     00 00 0A 01 
0799c     00 00 00 00 
079a0     00 00 00 00 
079a4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
079a8     00 00 0A 01 
079ac     00 00 00 00 
079b0     00 8F 80 00 
079b4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
079b8     00 D6 7A 01 
079bc     00 00 00 00 
079c0     00 00 00 00 
079c4     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
079c8     00 00 0A 01 
079cc     00 BE 30 00 
079d0     00 8F 80 00 
079d4     00 FE 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $fe, $10, $00
079d8     00 00 0A 01 
079dc     00 00 00 00 
079e0     00 00 00 00 
079e4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
079e8     00 00 0A 01 
079ec     00 00 00 00 
079f0     00 8F 80 00 
079f4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
079f8     00 FE 7A 01 
079fc     00 00 00 00 
07a00     00 00 00 00 
07a04     00 00 00 00 | 	byte	$00, $fe, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07a08     00 00 0A 01 
07a0c     00 00 00 00 
07a10     00 8F 80 00 
07a14     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07a18     00 00 0A 01 
07a1c     00 00 00 00 
07a20     00 00 00 00 
07a24     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07a28     00 00 0A 01 
07a2c     00 00 00 00 
07a30     00 8F 80 00 
07a34     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07a38     00 E2 7A 01 
07a3c     00 00 00 00 
07a40     00 00 00 00 
07a44     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07a48     00 00 0A 01 
07a4c     00 BE 20 00 
07a50     00 8F 80 00 
07a54     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
07a58     00 00 0A 01 
07a5c     00 00 00 00 
07a60     00 00 00 00 
07a64     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07a68     00 00 0A 01 
07a6c     00 00 00 00 
07a70     00 8F 80 00 
07a74     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
07a78     00 E2 7A 01 
07a7c     00 00 00 00 
07a80     00 00 00 00 
07a84     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07a88     00 00 0A 01 
07a8c     00 00 00 00 
07a90     00 8F 80 00 
07a94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07a98     00 00 0A 01 
07a9c     00 00 00 00 
07aa0     00 00 00 00 
07aa4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07aa8     00 00 0A 01 
07aac     00 00 00 00 
07ab0     00 8F 80 00 
07ab4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07ab8     00 00 0A 01 
07abc     00 00 00 00 
07ac0     00 00 00 00 
07ac4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ac8     00 00 0A 01 
07acc     00 BE 30 00 
07ad0     00 8F 80 00 
07ad4     01 53 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $01, $53, $10, $00
07ad8     00 00 0A 01 
07adc     00 00 00 00 
07ae0     00 00 00 00 
07ae4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ae8     00 00 0A 01 
07aec     00 00 00 00 
07af0     00 8F 80 00 
07af4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07af8     00 00 0A 01 
07afc     00 00 00 00 
07b00     00 00 00 00 
07b04     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07b08     00 00 0A 01 
07b0c     00 00 00 00 
07b10     00 8F 80 00 
07b14     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07b18     00 00 0A 01 
07b1c     00 00 00 00 
07b20     00 00 00 00 
07b24     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07b28     00 00 0A 01 
07b2c     00 BE 20 00 
07b30     00 8F 80 00 
07b34     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
07b38     00 00 0A 01 
07b3c     00 00 00 00 
07b40     00 00 00 00 
07b44     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07b48     00 00 0A 01 
07b4c     00 BE 20 00 
07b50     00 8F 80 00 
07b54     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
07b58     00 00 0A 01 
07b5c     00 00 00 00 
07b60     00 00 00 00 
07b64     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07b68     00 00 0A 01 
07b6c     00 00 00 00 
07b70     00 8F 80 00 
07b74     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
07b78     00 00 0A 01 
07b7c     00 00 00 00 
07b80     00 00 00 00 
07b84     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07b88     00 00 0A 01 
07b8c     00 00 00 00 
07b90     00 8F 80 00 
07b94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07b98     00 E2 7A 01 
07b9c     00 00 00 00 
07ba0     00 00 00 00 
07ba4     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ba8     00 00 0A 01 
07bac     00 00 00 00 
07bb0     00 8F 80 00 
07bb4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07bb8     00 00 0A 01 
07bbc     00 00 00 00 
07bc0     00 00 00 00 
07bc4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07bc8     00 00 0A 01 
07bcc     00 BE 30 00 
07bd0     00 8F 80 00 
07bd4     01 53 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $01, $53, $10, $00
07bd8     00 E2 7A 01 
07bdc     00 00 00 00 
07be0     00 00 00 00 
07be4     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07be8     00 00 0A 01 
07bec     00 00 00 00 
07bf0     00 8F 80 00 
07bf4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07bf8     00 00 0A 01 
07bfc     00 00 00 00 
07c00     00 00 00 00 
07c04     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07c08     00 00 0A 01 
07c0c     00 00 00 00 
07c10     00 8F 80 00 
07c14     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
07c18     00 E2 7A 01 
07c1c     00 00 00 00 
07c20     00 00 00 00 
07c24     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07c28     00 00 0A 01 
07c2c     00 00 00 00 
07c30     00 8F 80 00 
07c34     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
07c38     00 E2 7A 01 
07c3c     00 00 00 00 
07c40     00 00 00 00 
07c44     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07c48     00 D6 7A 01 
07c4c     00 BE 2F 04 
07c50     00 8F 80 00 
07c54     02 3A 10 00 | 	byte	$00, $d6, $7a, $01, $00, $be, $2f, $04, $00, $8f, $80, $00, $02, $3a, $10, $00
07c58     00 E2 7A 01 
07c5c     00 00 00 00 
07c60     00 00 00 00 
07c64     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07c68     00 00 0A 01 
07c6c     00 00 00 00 
07c70     00 8F 80 00 
07c74     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07c78     00 00 0A 01 
07c7c     00 00 00 00 
07c80     00 00 00 00 
07c84     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07c88     00 00 0A 01 
07c8c     00 00 00 00 
07c90     00 8F 80 00 
07c94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07c98     00 00 0A 01 
07c9c     00 00 00 00 
07ca0     00 00 00 00 
07ca4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ca8     00 00 0A 01 
07cac     00 00 00 00 
07cb0     00 8F 80 00 
07cb4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07cb8     00 00 0A 01 
07cbc     00 00 00 00 
07cc0     00 00 00 00 
07cc4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07cc8     00 00 0A 01 
07ccc     00 BE 30 00 
07cd0     00 8F 80 00 
07cd4     01 1D 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00
07cd8     00 00 0A 01 
07cdc     00 00 00 00 
07ce0     00 00 00 00 
07ce4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ce8     00 00 0A 01 
07cec     00 00 00 00 
07cf0     00 8F 80 00 
07cf4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07cf8     00 00 0A 01 
07cfc     00 00 00 00 
07d00     00 00 00 00 
07d04     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07d08     00 00 0A 01 
07d0c     00 00 00 00 
07d10     00 8F 80 00 
07d14     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07d18     00 D6 7A 01 
07d1c     00 00 00 00 
07d20     00 00 00 00 
07d24     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07d28     00 00 0A 01 
07d2c     00 BE 20 00 
07d30     00 8F 80 00 
07d34     02 FA 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $fa, $10, $00
07d38     00 BE 7A 01 
07d3c     00 00 00 00 
07d40     00 00 00 00 
07d44     00 00 00 00 | 	byte	$00, $be, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07d48     00 00 0A 01 
07d4c     00 BE 20 00 
07d50     00 8F 80 00 
07d54     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07d58     00 00 0A 01 
07d5c     00 00 00 00 
07d60     00 00 00 00 
07d64     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07d68     00 00 0A 01 
07d6c     00 00 00 00 
07d70     00 8F 80 00 
07d74     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07d78     00 D6 7A 01 
07d7c     00 00 00 00 
07d80     00 00 00 00 
07d84     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07d88     00 00 0A 01 
07d8c     00 00 00 00 
07d90     00 8F 80 00 
07d94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07d98     00 00 0A 01 
07d9c     00 00 00 00 
07da0     00 00 00 00 
07da4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07da8     00 00 0A 01 
07dac     00 00 00 00 
07db0     00 8F 80 00 
07db4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07db8     00 E2 7A 01 
07dbc     00 00 00 00 
07dc0     00 00 00 00 
07dc4     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07dc8     00 00 0A 01 
07dcc     00 BE 30 00 
07dd0     00 8F 80 00 
07dd4     01 1D 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00
07dd8     00 00 0A 01 
07ddc     00 00 00 00 
07de0     00 00 00 00 
07de4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07de8     00 00 0A 01 
07dec     00 00 00 00 
07df0     00 8F 80 00 
07df4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07df8     01 53 7A 01 
07dfc     00 00 00 00 
07e00     00 00 00 00 
07e04     00 00 00 00 | 	byte	$01, $53, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07e08     00 00 0A 01 
07e0c     00 00 00 00 
07e10     00 8F 80 00 
07e14     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07e18     00 00 0A 01 
07e1c     00 00 00 00 
07e20     00 00 00 00 
07e24     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07e28     00 00 0A 01 
07e2c     00 00 00 00 
07e30     00 8F 80 00 
07e34     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07e38     01 53 7A 01 
07e3c     00 00 00 00 
07e40     00 00 00 00 
07e44     00 00 00 00 | 	byte	$01, $53, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07e48     00 00 0A 01 
07e4c     00 BE 20 00 
07e50     00 8F 80 00 
07e54     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07e58     00 00 0A 01 
07e5c     00 00 00 00 
07e60     00 00 00 00 
07e64     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07e68     00 00 0A 01 
07e6c     00 00 00 00 
07e70     00 8F 80 00 
07e74     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07e78     00 FE 7A 01 
07e7c     00 00 00 00 
07e80     00 00 00 00 
07e84     00 00 00 00 | 	byte	$00, $fe, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07e88     00 00 0A 01 
07e8c     00 00 00 00 
07e90     00 8F 80 00 
07e94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07e98     00 00 0A 01 
07e9c     00 00 00 00 
07ea0     00 00 00 00 
07ea4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ea8     00 00 0A 01 
07eac     00 00 00 00 
07eb0     00 8F 80 00 
07eb4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07eb8     00 00 0A 01 
07ebc     00 00 00 00 
07ec0     00 00 00 00 
07ec4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ec8     00 00 0A 01 
07ecc     00 BE 30 00 
07ed0     00 8F 80 00 
07ed4     00 FE 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $fe, $10, $00
07ed8     00 00 0A 01 
07edc     00 00 00 00 
07ee0     00 00 00 00 
07ee4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07ee8     00 00 0A 01 
07eec     00 00 00 00 
07ef0     00 8F 80 00 
07ef4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07ef8     00 00 0A 01 
07efc     00 00 00 00 
07f00     00 00 00 00 
07f04     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07f08     00 00 0A 01 
07f0c     00 00 00 00 
07f10     00 8F 80 00 
07f14     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07f18     00 00 0A 01 
07f1c     00 00 00 00 
07f20     00 00 00 00 
07f24     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07f28     00 00 0A 01 
07f2c     00 BE 20 00 
07f30     00 8F 80 00 
07f34     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07f38     00 00 0A 01 
07f3c     00 00 00 00 
07f40     00 00 00 00 
07f44     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07f48     00 00 0A 01 
07f4c     00 BE 20 00 
07f50     00 8F 80 00 
07f54     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07f58     00 00 0A 01 
07f5c     00 00 00 00 
07f60     00 00 00 00 
07f64     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07f68     00 00 0A 01 
07f6c     00 00 00 00 
07f70     00 8F 80 00 
07f74     01 FC 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00
07f78     00 00 0A 01 
07f7c     00 00 00 00 
07f80     00 00 00 00 
07f84     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07f88     00 00 0A 01 
07f8c     00 00 00 00 
07f90     00 8F 80 00 
07f94     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07f98     00 D6 7A 01 
07f9c     00 00 00 00 
07fa0     00 00 00 00 
07fa4     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07fa8     00 00 0A 01 
07fac     00 00 00 00 
07fb0     00 8F 80 00 
07fb4     02 A6 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00
07fb8     00 00 0A 01 
07fbc     00 00 00 00 
07fc0     00 00 00 00 
07fc4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07fc8     00 00 0A 01 
07fcc     00 BE 30 00 
07fd0     00 8F 80 00 
07fd4     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $02, $3a, $10, $00
07fd8     00 D6 7A 01 
07fdc     00 00 00 00 
07fe0     00 00 00 00 
07fe4     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07fe8     00 00 0A 01 
07fec     00 00 00 00 
07ff0     00 8F 80 00 
07ff4     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
07ff8     00 00 0A 01 
07ffc     00 00 00 00 
08000     00 00 00 00 
08004     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08008     00 00 0A 01 
0800c     00 00 00 00 
08010     00 8F 80 00 
08014     02 1A 10 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $1a, $10, $00
08018     00 E2 7A 01 
0801c     00 00 00 00 
08020     00 00 00 00 
08024     00 00 00 00 | 	byte	$00, $e2, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08028     00 00 0A 01 
0802c     00 00 00 00 
08030     00 8F 80 00 
08034     00 00 00 00 | 	byte	$00, $00, $0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00
08038     00 D6 7A 01 
0803c     00 00 00 00 
08040     00 00 00 00 
08044     00 00 00 00 | 	byte	$00, $d6, $7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08048     00 00 0A 01 
0804c     00 BE 2F 04 
08050     00 8F 80 00 
08054     02 3A 10 00 | 	byte	$00, $00, $0a, $01, $00, $be, $2f, $04, $00, $8f, $80, $00, $02, $3a, $10, $00
08058     00 E2 70 00 
0805c     00 00 00 00 
08060     00 00 00 00 
08064     00 00 00 00 | 	byte	$00, $e2, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08068     00 00 00 00 
0806c     00 00 00 00 
08070     00          | 	byte	$00[9]
08071     8F 80 00 02 
08075     3A 10 00 00 
08079     00 00 00 00 
0807d     00 00 00 00 | 	byte	$8f, $80, $00, $02, $3a, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08081     00 00 00 00 
08085     00 00 00 00 
08089     00 00 00 00 
0808d     00 00 00 00 | 	byte	$00[16]
08091     8F 80 00 00 
08095     00 00 00 00 
08099     00 00 00 00 
0809d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
080a1     00 00 00 00 
080a5     00 00 00 00 
080a9     00 00 00 00 
080ad     00 00 00 00 | 	byte	$00[16]
080b1     8F 80 00 00 
080b5     00 00 00 00 
080b9     00 00 00 00 
080bd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
080c1     00 00 00 00 
080c5     00 00 00 00 
080c9     00 00 00 00 | 	byte	$00[12]
080cd     BE 30 00 00 
080d1     8F 80 00 01 
080d5     1D 10 00 00 
080d9     00 00 00 00 | 	byte	$be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00, $00, $00, $00, $00, $00
080dd     00 00 00 00 
080e1     00 00 00 00 
080e5     00 00 00 00 
080e9     00 00 00 00 
080ed     00 00 00 00 | 	byte	$00[20]
080f1     8F 80 00 00 
080f5     00 00 00 00 
080f9     00 00 00 00 
080fd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08101     00 00 00 00 
08105     00 00 00 00 
08109     00 00 00 00 
0810d     00 00 00 00 | 	byte	$00[16]
08111     8F 80 00 00 
08115     00 00 00 00 
08119     D6 70 00 00 
0811d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08121     00 00 00 00 
08125     00 00 00 00 
08129     00 00 00 00 | 	byte	$00[12]
0812d     BE 20 00 00 
08131     8F 80 00 02 
08135     3A 10 00 00 
08139     BE 70 00 00 | 	byte	$be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00, $00, $be, $70, $00, $00
0813d     00 00 00 00 
08141     00 00 00 00 
08145     00 00 00 00 
08149     00 00 00 00 | 	byte	$00[16]
0814d     BE 20 00 00 
08151     8F 80 00 02 
08155     3A 10 00 00 
08159     00 00 00 00 | 	byte	$be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00, $00, $00, $00, $00, $00
0815d     00 00 00 00 
08161     00 00 00 00 
08165     00 00 00 00 
08169     00 00 00 00 
0816d     00 00 00 00 | 	byte	$00[20]
08171     8F 80 00 02 
08175     3A 10 00 00 
08179     D6 70 00 00 
0817d     00 00 00 00 | 	byte	$8f, $80, $00, $02, $3a, $10, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08181     00 00 00 00 
08185     00 00 00 00 
08189     00 00 00 00 
0818d     00 00 00 00 | 	byte	$00[16]
08191     8F 80 00 00 
08195     00 00 00 00 
08199     00 00 00 00 
0819d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
081a1     00 00 00 00 
081a5     00 00 00 00 
081a9     00 00 00 00 
081ad     00 00 00 00 | 	byte	$00[16]
081b1     8F 80 00 00 
081b5     00 00 00 00 
081b9     E2 70 00 00 
081bd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $e2, $70, $00, $00, $00, $00, $00, $00
081c1     00 00 00 00 
081c5     00 00 00 00 
081c9     00 00 00 00 | 	byte	$00[12]
081cd     BE 30 00 00 
081d1     8F 80 00 01 
081d5     1D 10 00 00 
081d9     00 00 00 00 | 	byte	$be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00, $00, $00, $00, $00, $00
081dd     00 00 00 00 
081e1     00 00 00 00 
081e5     00 00 00 00 
081e9     00 00 00 00 
081ed     00 00 00 00 | 	byte	$00[20]
081f1     8F 80 00 00 
081f5     00 00 00 00 
081f9     D6 70 00 00 
081fd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08201     00 00 00 00 
08205     00 00 00 00 
08209     00 00 00 00 
0820d     00 00 00 00 | 	byte	$00[16]
08211     8F 80 00 00 
08215     00 00 00 00 
08219     00 00 00 00 
0821d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08221     00 00 00 00 
08225     00 00 00 00 
08229     00 00 00 00 
0822d     00 00 00 00 | 	byte	$00[16]
08231     8F 80 00 02 
08235     3A 10 00 00 
08239     E2 70 00 00 
0823d     00 00 00 00 | 	byte	$8f, $80, $00, $02, $3a, $10, $00, $00, $e2, $70, $00, $00, $00, $00, $00, $00
08241     00 00 00 00 
08245     00 00 00 00 
08249     00 00 00 00 | 	byte	$00[12]
0824d     BE 20 00 00 
08251     8F 80 00 02 
08255     80 10 00 00 
08259     00 00 00 00 | 	byte	$be, $20, $00, $00, $8f, $80, $00, $02, $80, $10, $00, $00, $00, $00, $00, $00
0825d     00 00 00 00 
08261     00 00 00 00 
08265     00 00 00 00 
08269     00 00 00 00 
0826d     00 00 00 00 | 	byte	$00[20]
08271     8F 80 00 02 
08275     80 10 00 00 
08279     FE 70 00 00 
0827d     00 00 00 00 | 	byte	$8f, $80, $00, $02, $80, $10, $00, $00, $fe, $70, $00, $00, $00, $00, $00, $00
08281     00 00 00 00 
08285     00 00 00 00 
08289     00 00 00 00 
0828d     00 00 00 00 | 	byte	$00[16]
08291     8F 80 00 00 
08295     00 00 00 00 
08299     00 00 00 00 
0829d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082a1     00 00 00 00 
082a5     00 00 00 00 
082a9     00 00 00 00 
082ad     00 00 00 00 | 	byte	$00[16]
082b1     8F 80 00 00 
082b5     00 00 00 00 
082b9     00 00 00 00 
082bd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
082c1     00 00 00 00 
082c5     00 00 00 00 
082c9     00 00 00 00 | 	byte	$00[12]
082cd     BE 30 00 00 
082d1     8F 80 00 01 
082d5     40 10 00 00 
082d9     00 00 00 00 | 	byte	$be, $30, $00, $00, $8f, $80, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00
082dd     00 00 00 00 
082e1     00 00 00 00 
082e5     00 00 00 00 
082e9     00 00 00 00 
082ed     00 00 00 00 | 	byte	$00[20]
082f1     8F 80 00 00 
082f5     00 00 00 00 
082f9     00 00 00 00 
082fd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08301     00 00 00 00 
08305     00 00 00 00 
08309     00 00 00 00 
0830d     00 00 00 00 | 	byte	$00[16]
08311     8F 80 00 00 
08315     00 00 00 00 
08319     D6 70 00 00 
0831d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08321     00 00 00 00 
08325     00 00 00 00 
08329     00 00 00 00 | 	byte	$00[12]
0832d     BE 20 00 00 
08331     8F 80 00 02 
08335     80 10 00 00 
08339     BE 70 00 00 | 	byte	$be, $20, $00, $00, $8f, $80, $00, $02, $80, $10, $00, $00, $be, $70, $00, $00
0833d     00 00 00 00 
08341     00 00 00 00 
08345     00 00 00 00 
08349     00 00 00 00 | 	byte	$00[16]
0834d     BE 20 00 00 
08351     8F 80 00 02 
08355     3A 10 00 00 
08359     00 00 00 00 | 	byte	$be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00, $00, $00, $00, $00, $00
0835d     00 00 00 00 
08361     00 00 00 00 
08365     00 00 00 00 
08369     00 00 00 00 
0836d     00 00 00 00 | 	byte	$00[20]
08371     8F 80 00 02 
08375     3A 10 00 00 
08379     D6 70 00 00 
0837d     00 00 00 00 | 	byte	$8f, $80, $00, $02, $3a, $10, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08381     00 00 00 00 
08385     00 00 00 00 
08389     00 00 00 00 
0838d     00 00 00 00 | 	byte	$00[16]
08391     8F 80 00 00 
08395     00 00 00 00 
08399     00 00 00 00 
0839d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
083a1     00 00 00 00 
083a5     00 00 00 00 
083a9     00 00 00 00 
083ad     00 00 00 00 | 	byte	$00[16]
083b1     8F 80 00 00 
083b5     00 00 00 00 
083b9     BE 70 00 00 
083bd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $be, $70, $00, $00, $00, $00, $00, $00
083c1     00 00 00 00 
083c5     00 00 00 00 
083c9     00 00 00 00 | 	byte	$00[12]
083cd     BE 30 00 00 
083d1     8F 80 00 01 
083d5     1D 10 00 00 
083d9     00 00 00 00 | 	byte	$be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00, $00, $00, $00, $00, $00
083dd     00 00 00 00 
083e1     00 00 00 00 
083e5     00 00 00 00 
083e9     00 00 00 00 
083ed     00 00 00 00 | 	byte	$00[20]
083f1     8F 80 00 00 
083f5     00 00 00 00 
083f9     D6 70 00 00 
083fd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08401     00 00 00 00 
08405     00 00 00 00 
08409     00 00 00 00 
0840d     00 00 00 00 | 	byte	$00[16]
08411     8F 80 00 00 
08415     00 00 00 00 
08419     00 00 00 00 
0841d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08421     00 00 00 00 
08425     00 00 00 00 
08429     00 00 00 00 
0842d     00 00 00 00 | 	byte	$00[16]
08431     8F 80 00 01 
08435     FC 10 00 00 
08439     E2 70 00 00 
0843d     00 00 00 00 | 	byte	$8f, $80, $00, $01, $fc, $10, $00, $00, $e2, $70, $00, $00, $00, $00, $00, $00
08441     00 00 00 00 
08445     00 00 00 00 
08449     00 00 00 00 | 	byte	$00[12]
0844d     BE 2F 04 00 
08451     8F 80 00 01 
08455     FC 10 00 00 
08459     00 0A 01 00 | 	byte	$be, $2f, $04, $00, $8f, $80, $00, $01, $fc, $10, $00, $00, $00, $0a, $01, $00
0845d     00 00 00 00 
08461     00 00 00 00 
08465     00 00 00 00 
08469     00          | 	byte	$00[13]
0846a     0A 01 00 00 
0846e     00 00 00 8F 
08472     80 00 01 FC 
08476     10 00 00 FE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00, $00, $fe
0847a     7A 01 00 00 
0847e     00 00 00 00 
08482     00 00 00 00 
08486     00 00 00 00 | 	byte	$7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0848a     0A 01 00 00 
0848e     00 00 00 8F 
08492     80 00 00 00 
08496     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
0849a     0A 01 00 00 
0849e     00 00 00 00 
084a2     00 00 00 00 
084a6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084aa     0A 01 00 00 
084ae     00 00 00 8F 
084b2     80 00 00 00 
084b6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
084ba     0A 01 00 00 
084be     00 00 00 00 
084c2     00 00 00 00 
084c6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084ca     0A 01 00 BE 
084ce     30 00 00 8F 
084d2     80 00 00 FE 
084d6     10 00 00 00 | 	byte	$0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $fe, $10, $00, $00, $00
084da     0A 01 00 00 
084de     00 00 00 00 
084e2     00 00 00 00 
084e6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
084ea     0A 01 00 00 
084ee     00 00 00 8F 
084f2     80 00 00 00 
084f6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
084fa     0A 01 00 00 
084fe     00 00 00 00 
08502     00 00 00 00 
08506     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0850a     0A 01 00 00 
0850e     00 00 00 8F 
08512     80 00 00 00 
08516     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
0851a     0A 01 00 00 
0851e     00 00 00 00 
08522     00 00 00 00 
08526     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0852a     0A 01 00 BE 
0852e     20 00 00 8F 
08532     80 00 02 3A 
08536     10 00 00 00 | 	byte	$0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00, $00, $00
0853a     0A 01 00 00 
0853e     00 00 00 00 
08542     00 00 00 00 
08546     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0854a     0A 01 00 BE 
0854e     20 00 00 8F 
08552     80 00 01 FC 
08556     10 00 00 00 | 	byte	$0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00, $00, $00
0855a     0A 01 00 00 
0855e     00 00 00 00 
08562     00 00 00 00 
08566     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0856a     0A 01 00 00 
0856e     00 00 00 8F 
08572     80 00 01 FC 
08576     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00, $00, $00
0857a     0A 01 00 00 
0857e     00 00 00 00 
08582     00 00 00 00 
08586     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0858a     0A 01 00 00 
0858e     00 00 00 8F 
08592     80 00 00 00 
08596     00 00 00 D6 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $d6
0859a     7A 01 00 00 
0859e     00 00 00 00 
085a2     00 00 00 00 
085a6     00 00 00 00 | 	byte	$7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085aa     0A 01 00 00 
085ae     00 00 00 8F 
085b2     80 00 02 A6 
085b6     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00, $00, $00
085ba     0A 01 00 00 
085be     00 00 00 00 
085c2     00 00 00 00 
085c6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085ca     0A 01 00 BE 
085ce     30 00 00 8F 
085d2     80 00 02 3A 
085d6     10 00 00 D6 | 	byte	$0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $02, $3a, $10, $00, $00, $d6
085da     7A 01 00 00 
085de     00 00 00 00 
085e2     00 00 00 00 
085e6     00 00 00 00 | 	byte	$7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085ea     0A 01 00 00 
085ee     00 00 00 8F 
085f2     80 00 00 00 
085f6     00 00 00 E2 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $e2
085fa     7A 01 00 00 
085fe     00 00 00 00 
08602     00 00 00 00 
08606     00 00 00 00 | 	byte	$7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0860a     0A 01 00 00 
0860e     00 00 00 8F 
08612     80 00 02 1A 
08616     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $1a, $10, $00, $00, $00
0861a     0A 01 00 00 
0861e     00 00 00 00 
08622     00 00 00 00 
08626     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0862a     0A 01 00 00 
0862e     00 00 00 8F 
08632     80 00 00 00 
08636     00 00 00 D6 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $d6
0863a     7A 01 00 00 
0863e     0D 00 00 00 
08642     00 00 00 00 
08646     00 00 00 00 | 	byte	$7a, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0864a     0A 01 00 BE 
0864e     20 00 00 8F 
08652     80 00 00 00 
08656     00 00 00 00 | 	byte	$0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
0865a     00 00 00 00 
0865e     00 00 00 00 
08662     00 00 00 00 
08666     00 00 00 00 
0866a     00 00 00 00 
0866e     00 00 00    | 	byte	$00[23]
08671     8F 80 00 00 
08675     00 00 00 00 
08679     00 00 00 00 
0867d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08681     00 00 00 00 
08685     00 00 00 00 
08689     00 00 00 00 
0868d     00 00 00 00 | 	byte	$00[16]
08691     8F 80 00 00 
08695     00 00 00 00 
08699     00 00 00 00 
0869d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086a1     00 00 00 00 
086a5     00 00 00 00 
086a9     00 00 00 00 
086ad     00 00 00 00 | 	byte	$00[16]
086b1     8F 80 00 00 
086b5     00 00 00 00 
086b9     00 00 00 00 
086bd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086c1     00 00 00 00 
086c5     00 00 00 00 
086c9     00 00 00 00 | 	byte	$00[12]
086cd     BE 30 00 00 
086d1     8F 80 00 01 
086d5     40 10 00 00 
086d9     00 00 00 00 | 	byte	$be, $30, $00, $00, $8f, $80, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00
086dd     00 00 00 00 
086e1     00 00 00 00 
086e5     00 00 00 00 
086e9     00 00 00 00 
086ed     00 00 00 00 | 	byte	$00[20]
086f1     8F 80 00 00 
086f5     00 00 00 00 
086f9     00 00 00 00 
086fd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08701     00 00 00 00 
08705     00 00 00 00 
08709     00 00 00 00 
0870d     00 00 00 00 | 	byte	$00[16]
08711     8F 80 00 00 
08715     00 00 00 00 
08719     D6 70 00 00 
0871d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08721     00 00 00 00 
08725     00 00 00 00 
08729     00 00 00 00 | 	byte	$00[12]
0872d     BE 20 00 00 
08731     8F 80 00 02 
08735     80 10 00 00 
08739     BE 70 00 00 | 	byte	$be, $20, $00, $00, $8f, $80, $00, $02, $80, $10, $00, $00, $be, $70, $00, $00
0873d     00 00 00 00 
08741     00 00 00 00 
08745     00 00 00 00 
08749     00 00 00 00 | 	byte	$00[16]
0874d     BE 20 00 00 
08751     8F 80 00 02 
08755     3A 10 00 00 
08759     00 00 00 00 | 	byte	$be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00, $00, $00, $00, $00, $00
0875d     00 00 00 00 
08761     00 00 00 00 
08765     00 00 00 00 
08769     00 00 00 00 
0876d     00 00 00 00 | 	byte	$00[20]
08771     8F 80 00 02 
08775     3A 10 00 00 
08779     D6 70 00 00 
0877d     00 00 00 00 | 	byte	$8f, $80, $00, $02, $3a, $10, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08781     00 00 00 00 
08785     00 00 00 00 
08789     00 00 00 00 
0878d     00 00 00 00 | 	byte	$00[16]
08791     8F 80 00 00 
08795     00 00 00 00 
08799     00 00 00 00 
0879d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087a1     00 00 00 00 
087a5     00 00 00 00 
087a9     00 00 00 00 
087ad     00 00 00 00 | 	byte	$00[16]
087b1     8F 80 00 00 
087b5     00 00 00 00 
087b9     BE 70 00 00 
087bd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $be, $70, $00, $00, $00, $00, $00, $00
087c1     00 00 00 00 
087c5     00 00 00 00 
087c9     00 00 00 00 | 	byte	$00[12]
087cd     BE 30 00 00 
087d1     8F 80 00 01 
087d5     1D 10 00 00 
087d9     00 00 00 00 | 	byte	$be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00, $00, $00, $00, $00, $00
087dd     00 00 00 00 
087e1     00 00 00 00 
087e5     00 00 00 00 
087e9     00 00 00 00 
087ed     00 00 00 00 | 	byte	$00[20]
087f1     8F 80 00 00 
087f5     00 00 00 00 
087f9     D6 70 00 00 
087fd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08801     00 00 00 00 
08805     00 00 00 00 
08809     00 00 00 00 
0880d     00 00 00 00 | 	byte	$00[16]
08811     8F 80 00 00 
08815     00 00 00 00 
08819     00 00 00 00 
0881d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08821     00 00 00 00 
08825     00 00 00 00 
08829     00 00 00 00 
0882d     00 00 00 00 | 	byte	$00[16]
08831     8F 80 00 01 
08835     FC 10 00 00 
08839     E2 70 00 00 
0883d     00 00 00 00 | 	byte	$8f, $80, $00, $01, $fc, $10, $00, $00, $e2, $70, $00, $00, $00, $00, $00, $00
08841     00 00 00 00 
08845     00 00 00 00 
08849     00 00 00 00 | 	byte	$00[12]
0884d     BE 2F 04 00 
08851     8F 80 00 01 
08855     FC 10 00 00 
08859     00 0A 01 00 | 	byte	$be, $2f, $04, $00, $8f, $80, $00, $01, $fc, $10, $00, $00, $00, $0a, $01, $00
0885d     00 00 00 00 
08861     00 00 00 00 
08865     00 00 00 00 
08869     00          | 	byte	$00[13]
0886a     0A 01 00 00 
0886e     00 00 00 8F 
08872     80 00 01 FC 
08876     10 00 00 FE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00, $00, $fe
0887a     7A 01 00 00 
0887e     00 00 00 00 
08882     00 00 00 00 
08886     00 00 00 00 | 	byte	$7a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0888a     0A 01 00 00 
0888e     00 00 00 8F 
08892     80 00 00 00 
08896     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
0889a     0A 01 00 00 
0889e     00 00 00 00 
088a2     00 00 00 00 
088a6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088aa     0A 01 00 00 
088ae     00 00 00 8F 
088b2     80 00 00 00 
088b6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
088ba     0A 01 00 00 
088be     00 00 00 00 
088c2     00 00 00 00 
088c6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088ca     0A 01 00 BE 
088ce     30 00 00 8F 
088d2     80 00 00 FE 
088d6     10 00 00 00 | 	byte	$0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $00, $fe, $10, $00, $00, $00
088da     0A 01 00 00 
088de     00 00 00 00 
088e2     00 00 00 00 
088e6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088ea     0A 01 00 00 
088ee     00 00 00 8F 
088f2     80 00 00 00 
088f6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
088fa     0A 01 00 00 
088fe     00 00 00 00 
08902     00 00 00 00 
08906     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0890a     0A 01 00 00 
0890e     00 00 00 8F 
08912     80 00 00 00 
08916     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
0891a     0A 01 00 00 
0891e     00 00 00 00 
08922     00 00 00 00 
08926     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0892a     0A 01 00 BE 
0892e     20 00 00 8F 
08932     80 00 02 3A 
08936     10 00 00 00 | 	byte	$0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00, $00, $00
0893a     0A 01 00 00 
0893e     00 00 00 00 
08942     00 00 00 00 
08946     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0894a     0A 01 00 BE 
0894e     20 00 00 8F 
08952     80 00 01 FC 
08956     10 00 00 00 | 	byte	$0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $01, $fc, $10, $00, $00, $00
0895a     0A 01 00 00 
0895e     00 00 00 00 
08962     00 00 00 00 
08966     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0896a     0A 01 00 00 
0896e     00 00 00 8F 
08972     80 00 01 FC 
08976     10 00 00 AA | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $01, $fc, $10, $00, $00, $aa
0897a     6A 01 00 00 
0897e     00 00 00 00 
08982     00 00 00 00 
08986     00 00 00 AA | 	byte	$6a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0898a     6A 01 00 00 
0898e     00 00 00 8F 
08992     80 00 00 00 
08996     00 00 00 AA | 	byte	$6a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $aa
0899a     6A 01 00 00 
0899e     00 00 00 00 
089a2     00 00 00 00 
089a6     00 00 00 00 | 	byte	$6a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089aa     0A 01 00 00 
089ae     00 00 00 8F 
089b2     80 00 02 A6 
089b6     10 00 00 AA | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $a6, $10, $00, $00, $aa
089ba     6A 01 00 00 
089be     00 00 00 00 
089c2     00 00 00 00 
089c6     00 00 00 00 | 	byte	$6a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089ca     0A 01 00 BE 
089ce     30 00 00 8F 
089d2     80 00 02 3A 
089d6     10 00 00 D6 | 	byte	$0a, $01, $00, $be, $30, $00, $00, $8f, $80, $00, $02, $3a, $10, $00, $00, $d6
089da     6A 01 00 00 
089de     00 00 00 00 
089e2     00 00 00 00 
089e6     00 00 00 00 | 	byte	$6a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089ea     0A 01 00 00 
089ee     00 00 00 8F 
089f2     80 00 00 00 
089f6     00 00 00 D6 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $d6
089fa     6A 01 00 00 
089fe     00 00 00 00 
08a02     00 00 00 00 
08a06     00 00 00 00 | 	byte	$6a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a0a     0A 01 00 00 
08a0e     00 00 00 8F 
08a12     80 00 02 1A 
08a16     10 00 00 FE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $02, $1a, $10, $00, $00, $fe
08a1a     6A 01 00 00 
08a1e     00 00 00 00 
08a22     00 00 00 00 
08a26     00 00 00 00 | 	byte	$6a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a2a     0A 01 00 00 
08a2e     00 00 00 8F 
08a32     80 00 00 00 
08a36     00 00 00 FE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $fe
08a3a     6A 01 00 00 
08a3e     0D 00 00 00 
08a42     00 00 00 00 
08a46     00 00 00 00 | 	byte	$6a, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a4a     0A 01 00 BE 
08a4e     20 00 00 8F 
08a52     80 00 00 00 
08a56     00 00 00 00 | 	byte	$0a, $01, $00, $be, $20, $00, $00, $8f, $80, $00, $00, $00, $00, $00, $00, $00
08a5a     00 00 00 00 
08a5e     00 00 00 00 
08a62     00 00 00 00 
08a66     00 00 00 00 
08a6a     00 00 00 00 
08a6e     00 00 00    | 	byte	$00[23]
08a71     8F 80 00 00 
08a75     00 00 00 00 
08a79     00 00 00 00 
08a7d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a81     00 00 00 00 
08a85     00 00 00 00 
08a89     00 00 00 00 
08a8d     00 00 00 00 | 	byte	$00[16]
08a91     8F 80 00 00 
08a95     00 00 00 00 
08a99     00 00 00 00 
08a9d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08aa1     00 00 00 00 
08aa5     00 00 00 00 
08aa9     00 00 00 00 
08aad     00 00 00 00 | 	byte	$00[16]
08ab1     8F 80 00 00 
08ab5     00 00 00 00 
08ab9     00 00 00 00 
08abd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ac1     00 00 00 00 
08ac5     00 00 00 00 
08ac9     00 00 00 00 | 	byte	$00[12]
08acd     BE 30 00 00 
08ad1     8F 80 00 01 
08ad5     40 10 00 00 
08ad9     00 00 00 00 | 	byte	$be, $30, $00, $00, $8f, $80, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00
08add     00 00 00 00 
08ae1     00 00 00 00 
08ae5     00 00 00 00 
08ae9     00 00 00 00 
08aed     00 00 00 00 | 	byte	$00[20]
08af1     8F 80 00 00 
08af5     00 00 00 00 
08af9     00 00 00 00 
08afd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b01     00 00 00 00 
08b05     00 00 00 00 
08b09     00 00 00 00 
08b0d     00 00 00 00 | 	byte	$00[16]
08b11     8F 80 00 00 
08b15     00 00 00 00 
08b19     D6 70 00 00 
08b1d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08b21     00 00 00 00 
08b25     00 00 00 00 
08b29     00 00 00 00 | 	byte	$00[12]
08b2d     BE 20 00 00 
08b31     8F 80 00 02 
08b35     80 10 00 00 
08b39     BE 70 00 00 | 	byte	$be, $20, $00, $00, $8f, $80, $00, $02, $80, $10, $00, $00, $be, $70, $00, $00
08b3d     00 00 00 00 
08b41     00 00 00 00 
08b45     00 00 00 00 
08b49     00 00 00 00 | 	byte	$00[16]
08b4d     BE 20 00 00 
08b51     8F 80 00 02 
08b55     3A 10 00 00 
08b59     00 00 00 00 | 	byte	$be, $20, $00, $00, $8f, $80, $00, $02, $3a, $10, $00, $00, $00, $00, $00, $00
08b5d     00 00 00 00 
08b61     00 00 00 00 
08b65     00 00 00 00 
08b69     00 00 00 00 
08b6d     00 00 00 00 | 	byte	$00[20]
08b71     8F 80 00 02 
08b75     3A 10 00 00 
08b79     D6 70 00 00 
08b7d     00 00 00 00 | 	byte	$8f, $80, $00, $02, $3a, $10, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08b81     00 00 00 00 
08b85     00 00 00 00 
08b89     00 00 00 00 
08b8d     00 00 00 00 | 	byte	$00[16]
08b91     8F 80 00 00 
08b95     00 00 00 00 
08b99     00 00 00 00 
08b9d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ba1     00 00 00 00 
08ba5     00 00 00 00 
08ba9     00 00 00 00 
08bad     00 00 00 00 | 	byte	$00[16]
08bb1     8F 80 00 00 
08bb5     00 00 00 00 
08bb9     BE 70 00 00 
08bbd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $be, $70, $00, $00, $00, $00, $00, $00
08bc1     00 00 00 00 
08bc5     00 00 00 00 
08bc9     00 00 00 00 | 	byte	$00[12]
08bcd     BE 30 00 00 
08bd1     8F 80 00 01 
08bd5     1D 10 00 00 
08bd9     00 00 00 00 | 	byte	$be, $30, $00, $00, $8f, $80, $00, $01, $1d, $10, $00, $00, $00, $00, $00, $00
08bdd     00 00 00 00 
08be1     00 00 00 00 
08be5     00 00 00 00 
08be9     00 00 00 00 
08bed     00 00 00 00 | 	byte	$00[20]
08bf1     8F 80 00 00 
08bf5     00 00 00 00 
08bf9     D6 70 00 00 
08bfd     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $d6, $70, $00, $00, $00, $00, $00, $00
08c01     00 00 00 00 
08c05     00 00 00 00 
08c09     00 00 00 00 
08c0d     00 00 00 00 | 	byte	$00[16]
08c11     8F 80 00 00 
08c15     00 00 00 00 
08c19     00 00 00 00 
08c1d     00 00 00 00 | 	byte	$8f, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c21     00 00 00 00 
08c25     00 00 00 00 
08c29     00 00 00 00 
08c2d     00 00 00 00 | 	byte	$00[16]
08c31     8F 80 00 01 
08c35     FC 10 00 00 
08c39     E2 70 00 00 
08c3d     00 00 00 00 | 	byte	$8f, $80, $00, $01, $fc, $10, $00, $00, $e2, $70, $00, $00, $00, $00, $00, $00
08c41     00 00 00 00 
      ...             
0bc49     00 00 00 00 
0bc4d     00 00 00    | 	byte	$00[12303]
0bc50     FD FD FD FD 
0bc54     FD FD FD FD 
0bc58     FD FD       | 	byte	$fd[10]
0bc5a     FB F8 F9 F6 
0bc5e     F8 FA FC FF 
0bc62     00 F8 FD F8 
0bc66     DD D7 DF D9 | 	byte	$fb, $f8, $f9, $f6, $f8, $fa, $fc, $ff, $00, $f8, $fd, $f8, $dd, $d7, $df, $d9
0bc6a     D1 D3 D0 D1 
0bc6e     D7 DB E9 FB 
0bc72     03 13 23 27 
0bc76     23 2B 2C 2A | 	byte	$d1, $d3, $d0, $d1, $d7, $db, $e9, $fb, $03, $13, $23, $27, $23, $2b, $2c, $2a
0bc7a     2D 2C 14 F9 
0bc7e     E8 D2 B6 B2 
0bc82     BD C5 CB DC 
0bc86     E9 E8 DE D8 | 	byte	$2d, $2c, $14, $f9, $e8, $d2, $b6, $b2, $bd, $c5, $cb, $dc, $e9, $e8, $de, $d8
0bc8a     D3 CE CE FF 
0bc8e     4D 67 48 0A 
0bc92     EA C8 8A 82 
0bc96     A5 CF 13 3B | 	byte	$d3, $ce, $ce, $ff, $4d, $67, $48, $0a, $ea, $c8, $8a, $82, $a5, $cf, $13, $3b
0bc9a     4E 7F 7F 7F 
0bc9e     7F 7C 64 53 
0bca2     38 0A F2 C8 
0bca6     8D 8B B5 C9 | 	byte	$4e, $7f, $7f, $7f, $7f, $7c, $64, $53, $38, $0a, $f2, $c8, $8d, $8b, $b5, $c9
0bcaa     D9 EA F9 07 
0bcae     16 1B 2E 38 
0bcb2     3F 57 65 5C 
0bcb6     4C 4D 46 42 | 	byte	$d9, $ea, $f9, $07, $16, $1b, $2e, $38, $3f, $57, $65, $5c, $4c, $4d, $46, $42
0bcba     46 4C 40 2E 
0bcbe     23 0B D0 99 
0bcc2     91 AF EE 35 
0bcc6     6F 7F 7F 5C | 	byte	$46, $4c, $40, $2e, $23, $0b, $d0, $99, $91, $af, $ee, $35, $6f, $7f, $7f, $5c
0bcca     30 FC D6 B0 
0bcce     8D 9E 96 80 
0bcd2     8A 92 84 86 
0bcd6     9F AA BD CD | 	byte	$30, $fc, $d6, $b0, $8d, $9e, $96, $80, $8a, $92, $84, $86, $9f, $aa, $bd, $cd
0bcda     CD DF FC F2 
0bcde     E8 E5 EA F1 
0bce2     E8 D6 DF CC 
0bce6     A2 9A A2 99 | 	byte	$cd, $df, $fc, $f2, $e8, $e5, $ea, $f1, $e8, $d6, $df, $cc, $a2, $9a, $a2, $99
0bcea     96 9D A6 AD 
0bcee     B6 C3 E3 09 
0bcf2     23 43 5F 59 
0bcf6     42 36 1C 00 | 	byte	$96, $9d, $a6, $ad, $b6, $c3, $e3, $09, $23, $43, $5f, $59, $42, $36, $1c, $00
0bcfa     FB FE F3 EC 
0bcfe     EA E0 CD C6 
0bd02     C6 CA DB F2 
0bd06     03 06 02 FA | 	byte	$fb, $fe, $f3, $ec, $ea, $e0, $cd, $c6, $c6, $ca, $db, $f2, $03, $06, $02, $fa
0bd0a     F0 E4 FD 47 
0bd0e     62 5E 30 E8 
0bd12     BD 9A 80 85 
0bd16     BE F9 33 5B | 	byte	$f0, $e4, $fd, $47, $62, $5e, $30, $e8, $bd, $9a, $80, $85, $be, $f9, $33, $5b
0bd1a     7D 7F 7F 7F 
0bd1e     7F 6A 5C 4E 
0bd22     32 00 E0 BC 
0bd26     99 9F BF D9 | 	byte	$7d, $7f, $7f, $7f, $7f, $6a, $5c, $4e, $32, $00, $e0, $bc, $99, $9f, $bf, $d9
0bd2a     E7 FF 16 21 
0bd2e     1E 14 1F 2D 
0bd32     3D 55 69 68 
0bd36     5F 5F 5A 4D | 	byte	$e7, $ff, $16, $21, $1e, $14, $1f, $2d, $3d, $55, $69, $68, $5f, $5f, $5a, $4d
0bd3a     45 3F 32 25 
0bd3e     1D 08 D8 B1 
0bd42     B3 D1 05 3F 
0bd46     6F 7F 7B 60 | 	byte	$45, $3f, $32, $25, $1d, $08, $d8, $b1, $b3, $d1, $05, $3f, $6f, $7f, $7b, $60
0bd4a     35 05 DC B8 
0bd4e     AD AC 98 80 
0bd52     80 83 80 87 
0bd56     9B AC BC C8 | 	byte	$35, $05, $dc, $b8, $ad, $ac, $98, $80, $80, $83, $80, $87, $9b, $ac, $bc, $c8
0bd5a     D7 F5 09 F9 
0bd5e     F6 F3 F3 F6 
0bd62     EC DA D8 C6 
0bd66     A6 96 94 8F | 	byte	$d7, $f5, $09, $f9, $f6, $f3, $f3, $f6, $ec, $da, $d8, $c6, $a6, $96, $94, $8f
0bd6a     91 9D AB B7 
0bd6e     C1 D0 EE 15 
0bd72     2E 47 59 55 
0bd76     45 36 20 08 | 	byte	$91, $9d, $ab, $b7, $c1, $d0, $ee, $15, $2e, $47, $59, $55, $45, $36, $20, $08
0bd7a     F5 EB DE D5 
0bd7e     D4 D1 C8 CA 
0bd82     D2 D7 E2 FB 
0bd86     0A 06 02 FE | 	byte	$f5, $eb, $de, $d5, $d4, $d1, $c8, $ca, $d2, $d7, $e2, $fb, $0a, $06, $02, $fe
0bd8a     EE EE 23 52 
0bd8e     62 5A 20 D0 
0bd92     A1 88 81 9F 
0bd96     DD 17 4A 6D | 	byte	$ee, $ee, $23, $52, $62, $5a, $20, $d0, $a1, $88, $81, $9f, $dd, $17, $4a, $6d
0bd9a     7F 7F 7F 7F 
0bd9e     75 62 54 44 
0bda2     24 F2 DA C1 
0bda6     AD B3 C6 D3 | 	byte	$7f, $7f, $7f, $7f, $75, $62, $54, $44, $24, $f2, $da, $c1, $ad, $b3, $c6, $d3
0bdaa     E5 FF 14 1C 
0bdae     19 13 1F 37 
0bdb2     49 59 63 65 
0bdb6     61 5E 57 4A | 	byte	$e5, $ff, $14, $1c, $19, $13, $1f, $37, $49, $59, $63, $65, $61, $5e, $57, $4a
0bdba     3D 32 26 1C 
0bdbe     0E F9 DD CA 
0bdc2     D1 E9 0D 3B 
0bdc6     67 7A 7A 68 | 	byte	$3d, $32, $26, $1c, $0e, $f9, $dd, $ca, $d1, $e9, $0d, $3b, $67, $7a, $7a, $68
0bdca     40 0C E0 C0 
0bdce     AF A6 8A 80 
0bdd2     80 80 83 8B 
0bdd6     97 A5 BD C9 | 	byte	$40, $0c, $e0, $c0, $af, $a6, $8a, $80, $80, $80, $83, $8b, $97, $a5, $bd, $c9
0bdda     D7 FD 0E 04 
0bdde     05 04 FE F6 
0bde2     E6 D2 D0 C0 
0bde6     A5 96 90 8B | 	byte	$d7, $fd, $0e, $04, $05, $04, $fe, $f6, $e6, $d2, $d0, $c0, $a5, $96, $90, $8b
0bdea     91 9F AB B9 
0bdee     C7 D9 F9 1D 
0bdf2     35 49 54 51 
0bdf6     43 31 1B 04 | 	byte	$91, $9f, $ab, $b9, $c7, $d9, $f9, $1d, $35, $49, $54, $51, $43, $31, $1b, $04
0bdfa     F0 E4 D4 CC 
0bdfe     CA C7 C6 CD 
0be02     DA E4 EC FA 
0be06     08 0B 06 00 | 	byte	$f0, $e4, $d4, $cc, $ca, $c7, $c6, $cd, $da, $e4, $ec, $fa, $08, $0b, $06, $00
0be0a     FA 15 3F 5B 
0be0e     5E 50 0A C0 
0be12     93 86 8F B5 
0be16     EB 25 5B 7F | 	byte	$fa, $15, $3f, $5b, $5e, $50, $0a, $c0, $93, $86, $8f, $b5, $eb, $25, $5b, $7f
0be1a     7F 7F 7F 7F 
0be1e     6C 5E 4E 35 
0be22     0A E4 D9 CD 
0be26     BF BF CA D3 | 	byte	$7f, $7f, $7f, $7f, $6c, $5e, $4e, $35, $0a, $e4, $d9, $cd, $bf, $bf, $ca, $d3
0be2a     E3 FE 0D 11 
0be2e     11 16 27 3D 
0be32     4D 59 5F 61 
0be36     60 5B 50 41 | 	byte	$e3, $fe, $0d, $11, $11, $16, $27, $3d, $4d, $59, $5f, $61, $60, $5b, $50, $41
0be3a     35 2A 20 14 
0be3e     06 F8 E8 E3 
0be42     ED FF 15 35 
0be46     57 71 76 68 | 	byte	$35, $2a, $20, $14, $06, $f8, $e8, $e3, $ed, $ff, $15, $35, $57, $71, $76, $68
0be4a     48 1C F4 CE 
0be4e     B2 9D 80 80 
0be52     80 80 85 8E 
0be56     96 A3 BA CC | 	byte	$48, $1c, $f4, $ce, $b2, $9d, $80, $80, $80, $80, $85, $8e, $96, $a3, $ba, $cc
0be5a     D9 EF 05 09 
0be5e     0B 0D 07 F8 
0be62     E0 CE C9 BA 
0be66     A1 93 8C 8A | 	byte	$d9, $ef, $05, $09, $0b, $0d, $07, $f8, $e0, $ce, $c9, $ba, $a1, $93, $8c, $8a
0be6a     91 9F AC BA 
0be6e     C9 DF FF 1F 
0be72     36 46 4D 49 
0be76     3E 2E 18 FE | 	byte	$91, $9f, $ac, $ba, $c9, $df, $ff, $1f, $36, $46, $4d, $49, $3e, $2e, $18, $fe
0be7a     EA DD CF C7 
0be7e     C5 C3 C3 CC 
0be82     DA E7 F3 FD 
0be86     09 10 0D 06 | 	byte	$ea, $dd, $cf, $c7, $c5, $c3, $c3, $cc, $da, $e7, $f3, $fd, $09, $10, $0d, $06
0be8a     15 35 52 5D 
0be8e     58 3D 04 C4 
0be92     9D 97 A6 C9 
0be96     F5 27 5B 7F | 	byte	$15, $35, $52, $5d, $58, $3d, $04, $c4, $9d, $97, $a6, $c9, $f5, $27, $5b, $7f
0be9a     7F 7F 7F 76 
0be9e     64 57 46 2E 
0bea2     08 ED E4 DA 
0bea6     CC C5 C9 D2 | 	byte	$7f, $7f, $7f, $76, $64, $57, $46, $2e, $08, $ed, $e4, $da, $cc, $c5, $c9, $d2
0beaa     E1 F2 FF 06 
0beae     0D 1A 2E 42 
0beb2     4F 5A 5E 5E 
0beb6     5B 55 48 3A | 	byte	$e1, $f2, $ff, $06, $0d, $1a, $2e, $42, $4f, $5a, $5e, $5e, $5b, $55, $48, $3a
0beba     2E 25 1A 0C 
0bebe     02 FB F7 F9 
0bec2     FF 09 19 2D 
0bec6     46 5F 69 62 | 	byte	$2e, $25, $1a, $0c, $02, $fb, $f7, $f9, $ff, $09, $19, $2d, $46, $5f, $69, $62
0beca     4A 2C 08 E0 
0bece     B8 98 80 80 
0bed2     80 80 82 8D 
0bed6     95 A2 B6 C7 | 	byte	$4a, $2c, $08, $e0, $b8, $98, $80, $80, $80, $80, $82, $8d, $95, $a2, $b6, $c7
0beda     D7 EB FF 0C 
0bede     14 13 0A F8 
0bee2     E1 CE C4 B4 
0bee6     A1 94 8E 8D | 	byte	$d7, $eb, $ff, $0c, $14, $13, $0a, $f8, $e1, $ce, $c4, $b4, $a1, $94, $8e, $8d
0beea     93 9E AB BB 
0beee     CF EA 09 22 
0bef2     34 3F 44 3E 
0bef6     33 24 10 F8 | 	byte	$93, $9e, $ab, $bb, $cf, $ea, $09, $22, $34, $3f, $44, $3e, $33, $24, $10, $f8
0befa     E8 DC D1 C8 
0befe     C5 C3 C4 CB 
0bf02     D8 E5 F2 FF 
0bf06     0A 13 13 1B | 	byte	$e8, $dc, $d1, $c8, $c5, $c3, $c4, $cb, $d8, $e5, $f2, $ff, $0a, $13, $13, $1b
0bf0a     2F 46 56 56 
0bf0e     46 24 F4 C5 
0bf12     B1 B0 BE DF 
0bf16     07 33 5D 7A | 	byte	$2f, $46, $56, $56, $46, $24, $f4, $c5, $b1, $b0, $be, $df, $07, $33, $5d, $7a
0bf1a     7F 7F 77 69 
0bf1e     5A 4A 38 22 
0bf22     08 F6 EF E6 
0bf26     DA D2 D2 D7 | 	byte	$7f, $7f, $77, $69, $5a, $4a, $38, $22, $08, $f6, $ef, $e6, $da, $d2, $d2, $d7
0bf2a     DE E6 EF FB 
0bf2e     0A 1D 36 48 
0bf32     54 5B 5D 59 
0bf36     51 48 3E 33 | 	byte	$de, $e6, $ef, $fb, $0a, $1d, $36, $48, $54, $5b, $5d, $59, $51, $48, $3e, $33
0bf3a     29 21 16 09 
0bf3e     02 02 05 09 
0bf42     0E 15 1E 2C 
0bf46     3D 4E 58 57 | 	byte	$29, $21, $16, $09, $02, $02, $05, $09, $0e, $15, $1e, $2c, $3d, $4e, $58, $57
0bf4a     49 32 12 EC 
0bf4e     C4 A0 80 80 
0bf52     80 80 80 8B 
0bf56     97 A3 B5 C1 | 	byte	$49, $32, $12, $ec, $c4, $a0, $80, $80, $80, $80, $80, $8b, $97, $a3, $b5, $c1
0bf5a     D0 DF F1 FF 
0bf5e     0D 0E 0A FD 
0bf62     EA D8 C8 B4 
0bf66     A1 96 8F 8E | 	byte	$d0, $df, $f1, $ff, $0d, $0e, $0a, $fd, $ea, $d8, $c8, $b4, $a1, $96, $8f, $8e
0bf6a     94 9D AB BB 
0bf6e     D1 E9 05 1F 
0bf72     2F 3B 3E 38 
0bf76     2A 1A 07 F3 | 	byte	$94, $9d, $ab, $bb, $d1, $e9, $05, $1f, $2f, $3b, $3e, $38, $2a, $1a, $07, $f3
0bf7a     E4 DC D4 CE 
0bf7e     CB C9 C9 CD 
0bf82     D5 DE EA F9 
0bf86     06 0F 1B 31 | 	byte	$e4, $dc, $d4, $ce, $cb, $c9, $c9, $cd, $d5, $de, $ea, $f9, $06, $0f, $1b, $31
0bf8a     43 52 58 50 
0bf8e     39 1A FA DA 
0bf92     D0 CE D9 ED 
0bf96     0D 2F 4F 62 | 	byte	$43, $52, $58, $50, $39, $1a, $fa, $da, $d0, $ce, $d9, $ed, $0d, $2f, $4f, $62
0bf9a     6C 6E 6A 60 
0bf9e     56 4A 38 28 
0bfa2     13 04 FA EE 
0bfa6     E3 DD DA D9 | 	byte	$6c, $6e, $6a, $60, $56, $4a, $38, $28, $13, $04, $fa, $ee, $e3, $dd, $da, $d9
0bfaa     DA DE E5 F2 
0bfae     03 17 2F 45 
0bfb2     53 5A 5B 56 
0bfb6     4A 40 35 2B | 	byte	$da, $de, $e5, $f2, $03, $17, $2f, $45, $53, $5a, $5b, $56, $4a, $40, $35, $2b
0bfba     23 1B 14 0C 
0bfbe     09 0A 0E 12 
0bfc2     15 19 1F 2A 
0bfc6     35 3F 46 4A | 	byte	$23, $1b, $14, $0c, $09, $0a, $0e, $12, $15, $19, $1f, $2a, $35, $3f, $46, $4a
0bfca     42 36 1C FA 
0bfce     D5 B4 92 80 
0bfd2     80 80 80 86 
0bfd6     95 A1 AE BB | 	byte	$42, $36, $1c, $fa, $d5, $b4, $92, $80, $80, $80, $80, $86, $95, $a1, $ae, $bb
0bfda     C8 D8 E9 F7 
0bfde     03 08 05 FC 
0bfe2     ED DD CC BA 
0bfe6     A8 9D 95 92 | 	byte	$c8, $d8, $e9, $f7, $03, $08, $05, $fc, $ed, $dd, $cc, $ba, $a8, $9d, $95, $92
0bfea     95 9C A8 B9 
0bfee     CD E5 FF 17 
0bff2     28 32 33 2C 
0bff6     20 10 00 F0 | 	byte	$95, $9c, $a8, $b9, $cd, $e5, $ff, $17, $28, $32, $33, $2c, $20, $10, $00, $f0
0bffa     E4 DC D5 D2 
0bffe     D0 CE CE CF 
0c002     D4 DA E4 EF 
0c006     FB 08 19 2D | 	byte	$e4, $dc, $d5, $d2, $d0, $ce, $ce, $cf, $d4, $da, $e4, $ef, $fb, $08, $19, $2d
0c00a     42 4F 52 46 
0c00e     32 1A 00 F0 
0c012     E8 EA F3 03 
0c016     1B 33 45 50 | 	byte	$42, $4f, $52, $46, $32, $1a, $00, $f0, $e8, $ea, $f3, $03, $1b, $33, $45, $50
0c01a     55 58 55 51 
0c01e     49 3F 34 28 
0c022     1B 10 05 FB 
0c026     F2 EB E5 DF | 	byte	$55, $58, $55, $51, $49, $3f, $34, $28, $1b, $10, $05, $fb, $f2, $eb, $e5, $df
0c02a     DB DB E1 EC 
0c02e     FD 11 27 3B 
0c032     4C 55 55 50 
0c036     46 3A 2F 27 | 	byte	$db, $db, $e1, $ec, $fd, $11, $27, $3b, $4c, $55, $55, $50, $46, $3a, $2f, $27
0c03a     1F 1A 15 13 
0c03e     13 16 1A 1E 
0c042     20 22 24 28 
0c046     2D 33 3A 3D | 	byte	$1f, $1a, $15, $13, $13, $16, $1a, $1e, $20, $22, $24, $28, $2d, $33, $3a, $3d
0c04a     3B 32 1E 04 
0c04e     E6 C8 A8 90 
0c052     80 80 80 87 
0c056     95 A1 AC B7 | 	byte	$3b, $32, $1e, $04, $e6, $c8, $a8, $90, $80, $80, $80, $87, $95, $a1, $ac, $b7
0c05a     C1 CD DB E8 
0c05e     F2 FA FC F8 
0c062     ED E0 D0 C0 
0c066     B2 A8 A0 9C | 	byte	$c1, $cd, $db, $e8, $f2, $fa, $fc, $f8, $ed, $e0, $d0, $c0, $b2, $a8, $a0, $9c
0c06a     9C 9F A7 B5 
0c06e     C5 D9 F1 06 
0c072     17 23 26 22 
0c076     18 0B FC F0 | 	byte	$9c, $9f, $a7, $b5, $c5, $d9, $f1, $06, $17, $23, $26, $22, $18, $0b, $fc, $f0
0c07a     E6 E0 DB D8 
0c07e     D6 D5 D4 D4 
0c082     D6 DA E1 E9 
0c086     F2 FF 13 27 | 	byte	$e6, $e0, $db, $d8, $d6, $d5, $d4, $d4, $d6, $da, $e1, $e9, $f2, $ff, $13, $27
0c08a     3A 47 4A 43 
0c08e     34 21 10 04 
0c092     FD FF 08 14 
0c096     23 31 3B 3F | 	byte	$3a, $47, $4a, $43, $34, $21, $10, $04, $fd, $ff, $08, $14, $23, $31, $3b, $3f
0c09a     42 44 44 42 
0c09e     3F 3B 34 2D 
0c0a2     24 1A 10 06 
0c0a6     FD F6 EF E9 | 	byte	$42, $44, $44, $42, $3f, $3b, $34, $2d, $24, $1a, $10, $06, $fd, $f6, $ef, $e9
0c0aa     E4 E2 E4 EA 
0c0ae     F7 07 19 2D 
0c0b2     3E 48 4A 48 
0c0b6     3F 36 2C 25 | 	byte	$e4, $e2, $e4, $ea, $f7, $07, $19, $2d, $3e, $48, $4a, $48, $3f, $36, $2c, $25
0c0ba     1E 1A 19 19 
0c0be     1A 1D 1F 22 
0c0c2     24 25 26 28 
0c0c6     2A 2D 30 32 | 	byte	$1e, $1a, $19, $19, $1a, $1d, $1f, $22, $24, $25, $26, $28, $2a, $2d, $30, $32
0c0ca     31 2A 1D 0A 
0c0ce     F2 D9 C0 A9 
0c0d2     96 8D 8A 8D 
0c0d6     96 9F A8 B2 | 	byte	$31, $2a, $1d, $0a, $f2, $d9, $c0, $a9, $96, $8d, $8a, $8d, $96, $9f, $a8, $b2
0c0da     BA C3 CE D9 
0c0de     E4 EB F0 EF 
0c0e2     E9 E0 D4 C8 
0c0e6     BC B1 AA A6 | 	byte	$ba, $c3, $ce, $d9, $e4, $eb, $f0, $ef, $e9, $e0, $d4, $c8, $bc, $b1, $aa, $a6
0c0ea     A6 A9 AF B7 
0c0ee     C4 D3 E6 F9 
0c0f2     0A 15 19 17 
0c0f6     0E 04 F8 EE | 	byte	$a6, $a9, $af, $b7, $c4, $d3, $e6, $f9, $0a, $15, $19, $17, $0e, $04, $f8, $ee
0c0fa     E6 E1 DE DD 
0c0fe     DC DB DA DA 
0c102     DA DC DF E5 
0c106     EF FF 13 26 | 	byte	$e6, $e1, $de, $dd, $dc, $db, $da, $da, $da, $dc, $df, $e5, $ef, $ff, $13, $26
0c10a     36 3F 42 3D 
0c10e     34 28 1C 12 
0c112     0E 11 19 23 
0c116     2D 35 3A 3A | 	byte	$36, $3f, $42, $3d, $34, $28, $1c, $12, $0e, $11, $19, $23, $2d, $35, $3a, $3a
0c11a     39 36 32 2F 
0c11e     2D 2B 2A 28 
0c122     24 1E 17 0E 
0c126     06 FD F5 F0 | 	byte	$39, $36, $32, $2f, $2d, $2b, $2a, $28, $24, $1e, $17, $0e, $06, $fd, $f5, $f0
0c12a     EB EA EB F1 
0c12e     F9 05 15 25 
0c132     34 3D 3F 3F 
0c136     39 31 28 20 | 	byte	$eb, $ea, $eb, $f1, $f9, $05, $15, $25, $34, $3d, $3f, $3f, $39, $31, $28, $20
0c13a     1A 17 19 1C 
0c13e     1F 24 26 28 
0c142     29 28 26 25 
0c146     25 27 2A 2A | 	byte	$1a, $17, $19, $1c, $1f, $24, $26, $28, $29, $28, $26, $25, $25, $27, $2a, $2a
0c14a     29 22 18 08 
0c14e     F2 DD C8 B2 
0c152     A4 9B 99 9A 
0c156     9F A6 AB B2 | 	byte	$29, $22, $18, $08, $f2, $dd, $c8, $b2, $a4, $9b, $99, $9a, $9f, $a6, $ab, $b2
0c15a     B9 BF C6 CE 
0c15e     D7 DD E2 E4 
0c162     E2 DD D5 CC 
0c166     C3 BB B4 B2 | 	byte	$b9, $bf, $c6, $ce, $d7, $dd, $e2, $e4, $e2, $dd, $d5, $cc, $c3, $bb, $b4, $b2
0c16a     B1 B2 B7 BD 
0c16e     C5 D2 DF EF 
0c172     FD 07 0C 0B 
0c176     06 FE F5 ED | 	byte	$b1, $b2, $b7, $bd, $c5, $d2, $df, $ef, $fd, $07, $0c, $0b, $06, $fe, $f5, $ed
0c17a     E7 E3 E1 E1 
0c17e     E1 DF E0 DF 
0c182     DF E0 E2 E6 
0c186     EF FC 0D 1B | 	byte	$e7, $e3, $e1, $e1, $e1, $df, $e0, $df, $df, $e0, $e2, $e6, $ef, $fc, $0d, $1b
0c18a     29 32 36 34 
0c18e     31 2B 24 20 
0c192     1F 21 26 2B 
0c196     32 36 37 36 | 	byte	$29, $32, $36, $34, $31, $2b, $24, $20, $1f, $21, $26, $2b, $32, $36, $37, $36
0c19a     33 2E 2A 28 
0c19e     25 25 25 24 
0c1a2     22 20 1C 16 
0c1a6     0E 08 00 F9 | 	byte	$33, $2e, $2a, $28, $25, $25, $25, $24, $22, $20, $1c, $16, $0e, $08, $00, $f9
0c1aa     F5 F2 F2 F5 
0c1ae     FA 02 0D 17 
0c1b2     22 2A 2F 31 
0c1b6     2E 2A 23 1E | 	byte	$f5, $f2, $f2, $f5, $fa, $02, $0d, $17, $22, $2a, $2f, $31, $2e, $2a, $23, $1e
0c1ba     1A 19 1A 1C 
0c1be     20 23 26 29 
0c1c2     29 29 27 26 
0c1c6     24 24 25 25 | 	byte	$1a, $19, $1a, $1c, $20, $23, $26, $29, $29, $29, $27, $26, $24, $24, $25, $25
0c1ca     24 21 1A 10 
0c1ce     03 F3 E2 D2 
0c1d2     C3 BA B1 AC 
0c1d6     AB AD AF B3 | 	byte	$24, $21, $1a, $10, $03, $f3, $e2, $d2, $c3, $ba, $b1, $ac, $ab, $ad, $af, $b3
0c1da     B7 BC C0 C5 
0c1de     CA CE D2 D4 
0c1e2     D5 D4 D1 CD 
0c1e6     C8 C2 BF BC | 	byte	$b7, $bc, $c0, $c5, $ca, $ce, $d2, $d4, $d5, $d4, $d1, $cd, $c8, $c2, $bf, $bc
0c1ea     BB BB BE C1 
0c1ee     C6 CE D7 E2 
0c1f2     EB F3 F9 FA 
0c1f6     FA F6 F1 EC | 	byte	$bb, $bb, $be, $c1, $c6, $ce, $d7, $e2, $eb, $f3, $f9, $fa, $fa, $f6, $f1, $ec
0c1fa     E6 E4 E1 E1 
0c1fe     E1 E1 E2 E2 
0c202     E2 E2 E4 E9 
0c206     F1 FB 07 12 | 	byte	$e6, $e4, $e1, $e1, $e1, $e1, $e2, $e2, $e2, $e2, $e4, $e9, $f1, $fb, $07, $12
0c20a     1B 22 26 29 
0c20e     2A 2A 2A 2B 
0c212     2D 30 33 36 
0c216     38 38 37 34 | 	byte	$1b, $22, $26, $29, $2a, $2a, $2a, $2b, $2d, $30, $33, $36, $38, $38, $37, $34
0c21a     30 2C 26 22 
0c21e     20 1E 1C 1C 
0c222     1C 1A 19 15 
0c226     10 0A 05 00 | 	byte	$30, $2c, $26, $22, $20, $1e, $1c, $1c, $1c, $1a, $19, $15, $10, $0a, $05, $00
0c22a     FC FB FC FE 
0c22e     02 08 10 17 
0c232     1E 23 26 28 
0c236     25 23 1F 1C | 	byte	$fc, $fb, $fc, $fe, $02, $08, $10, $17, $1e, $23, $26, $28, $25, $23, $1f, $1c
0c23a     1A 1A 1B 1E 
0c23e     22 26 2A 2E 
0c242     2E 2E 2C 2A 
0c246     26 24 21 1F | 	byte	$1a, $1a, $1b, $1e, $22, $26, $2a, $2e, $2e, $2e, $2c, $2a, $26, $24, $21, $1f
0c24a     1B 16 0E 02 
0c24e     F6 E6 D9 CD 
0c252     C2 BA B4 AF 
0c256     AF B1 B3 B6 | 	byte	$1b, $16, $0e, $02, $f6, $e6, $d9, $cd, $c2, $ba, $b4, $af, $af, $b1, $b3, $b6
0c25a     BB BF C2 C7 
0c25e     CA CD CE CF 
0c262     CE CD CB C8 
0c266     C5 C2 C1 C1 | 	byte	$bb, $bf, $c2, $c7, $ca, $cd, $ce, $cf, $ce, $cd, $cb, $c8, $c5, $c2, $c1, $c1
0c26a     C2 C4 C7 CB 
0c26e     D1 D7 DE E6 
0c272     EB F1 F3 F4 
0c276     F2 EE EA E5 | 	byte	$c2, $c4, $c7, $cb, $d1, $d7, $de, $e6, $eb, $f1, $f3, $f4, $f2, $ee, $ea, $e5
0c27a     E2 E0 DF DF 
0c27e     E0 E2 E2 E3 
0c282     E4 E5 E9 F1 
0c286     F9 04 0E 17 | 	byte	$e2, $e0, $df, $df, $e0, $e2, $e2, $e3, $e4, $e5, $e9, $f1, $f9, $04, $0e, $17
0c28a     1E 22 26 29 
0c28e     2B 2D 31 34 
0c292     38 3B 3E 3F 
0c296     3E 3B 36 31 | 	byte	$1e, $22, $26, $29, $2b, $2d, $31, $34, $38, $3b, $3e, $3f, $3e, $3b, $36, $31
0c29a     2A 24 20 1B 
0c29e     18 17 16 16 
0c2a2     16 15 14 11 
0c2a6     0D 08 04 01 | 	byte	$2a, $24, $20, $1b, $18, $17, $16, $16, $16, $15, $14, $11, $0d, $08, $04, $01
0c2aa     FF FF 01 04 
0c2ae     09 0E 14 19 
0c2b2     1D 20 21 21 
0c2b6     1F 1C 1A 18 | 	byte	$ff, $ff, $01, $04, $09, $0e, $14, $19, $1d, $20, $21, $21, $1f, $1c, $1a, $18
0c2ba     18 19 1C 21 
0c2be     25 2B 2E 32 
0c2c2     32 31 2E 2A 
0c2c6     26 22 1E 1A | 	byte	$18, $19, $1c, $21, $25, $2b, $2e, $32, $32, $31, $2e, $2a, $26, $22, $1e, $1a
0c2ca     14 0D 04 F7 
0c2ce     EA DE D2 C8 
0c2d2     C0 B9 B4 B2 
0c2d6     B3 B5 B7 BB | 	byte	$14, $0d, $04, $f7, $ea, $de, $d2, $c8, $c0, $b9, $b4, $b2, $b3, $b5, $b7, $bb
0c2da     BF C2 C4 C7 
0c2de     C9 CA CA CA 
0c2e2     C9 C8 C6 C5 
0c2e6     C3 C3 C4 C5 | 	byte	$bf, $c2, $c4, $c7, $c9, $ca, $ca, $ca, $c9, $c8, $c6, $c5, $c3, $c3, $c4, $c5
0c2ea     C7 CA CE D3 
0c2ee     D9 DE E3 E8 
0c2f2     EB ED EE ED 
0c2f6     EB E8 E4 E2 | 	byte	$c7, $ca, $ce, $d3, $d9, $de, $e3, $e8, $eb, $ed, $ee, $ed, $eb, $e8, $e4, $e2
0c2fa     DF DE DE DF 
0c2fe     E0 E2 E2 E4 
0c302     E5 E8 EE F6 
0c306     FF 0A 12 19 | 	byte	$df, $de, $de, $df, $e0, $e2, $e2, $e4, $e5, $e8, $ee, $f6, $ff, $0a, $12, $19
0c30a     1E 22 26 2A 
0c30e     2F 34 3A 3F 
0c312     42 44 44 42 
0c316     3E 3A 33 2B | 	byte	$1e, $22, $26, $2a, $2f, $34, $3a, $3f, $42, $44, $44, $42, $3e, $3a, $33, $2b
0c31a     24 1E 19 16 
0c31e     14 13 13 14 
0c322     14 13 12 0E 
0c326     0B 08 05 03 | 	byte	$24, $1e, $19, $16, $14, $13, $13, $14, $14, $13, $12, $0e, $0b, $08, $05, $03
0c32a     03 05 08 0B 
0c32e     10 14 18 1B 
0c332     1D 1E 1D 1B 
0c336     19 16 16 17 | 	byte	$03, $05, $08, $0b, $10, $14, $18, $1b, $1d, $1e, $1d, $1b, $19, $16, $16, $17
0c33a     19 1D 22 27 
0c33e     2B 2F 32 33 
0c342     33 32 2E 29 
0c346     25 1F 19 12 | 	byte	$19, $1d, $22, $27, $2b, $2f, $32, $33, $33, $32, $2e, $29, $25, $1f, $19, $12
0c34a     0B 02 F8 EC 
0c34e     E1 D6 CC C4 
0c352     BE BA B6 B5 
0c356     B6 B8 BA BD | 	byte	$0b, $02, $f8, $ec, $e1, $d6, $cc, $c4, $be, $ba, $b6, $b5, $b6, $b8, $ba, $bd
0c35a     C0 C4 C6 C7 
0c35e     C8 C8 C6 C5 
0c362     C4 C3 C3 C3 
0c366     C4 C6 C8 CA | 	byte	$c0, $c4, $c6, $c7, $c8, $c8, $c6, $c5, $c4, $c3, $c3, $c3, $c4, $c6, $c8, $ca
0c36a     CD D2 D5 D9 
0c36e     DD E1 E4 E6 
0c372     E9 E9 E9 E7 
0c376     E5 E2 E0 DF | 	byte	$cd, $d2, $d5, $d9, $dd, $e1, $e4, $e6, $e9, $e9, $e9, $e7, $e5, $e2, $e0, $df
0c37a     DE DE DF E0 
0c37e     E1 E3 E4 E6 
0c382     EA EF F6 FF 
0c386     09 10 17 1C | 	byte	$de, $de, $df, $e0, $e1, $e3, $e4, $e6, $ea, $ef, $f6, $ff, $09, $10, $17, $1c
0c38a     21 24 2A 2F 
0c38e     36 3D 43 48 
0c392     4A 4A 48 44 
0c396     3D 35 2C 24 | 	byte	$21, $24, $2a, $2f, $36, $3d, $43, $48, $4a, $4a, $48, $44, $3d, $35, $2c, $24
0c39a     1C 16 11 10 
0c39e     0F 10 11 12 
0c3a2     12 11 0E 0C 
0c3a6     09 06 05 05 | 	byte	$1c, $16, $11, $10, $0f, $10, $11, $12, $12, $11, $0e, $0c, $09, $06, $05, $05
0c3aa     07 0A 0D 11 
0c3ae     13 16 17 18 
0c3b2     19 18 16 15 
0c3b6     14 14 15 19 | 	byte	$07, $0a, $0d, $11, $13, $16, $17, $18, $19, $18, $16, $15, $14, $14, $15, $19
0c3ba     1D 22 28 2D 
0c3be     31 33 35 35 
0c3c2     34 32 2D 28 
0c3c6     21 1B 14 0B | 	byte	$1d, $22, $28, $2d, $31, $33, $35, $35, $34, $32, $2d, $28, $21, $1b, $14, $0b
0c3ca     02 F9 EE E4 
0c3ce     DA D2 C9 C2 
0c3d2     BE BA B7 B7 
0c3d6     B9 BA BD BF | 	byte	$02, $f9, $ee, $e4, $da, $d2, $c9, $c2, $be, $ba, $b7, $b7, $b9, $ba, $bd, $bf
0c3da     C2 C4 C5 C6 
0c3de     C5 C4 C3 C2 
0c3e2     C1 C2 C2 C4 
0c3e6     C6 C9 CC D0 | 	byte	$c2, $c4, $c5, $c6, $c5, $c4, $c3, $c2, $c1, $c2, $c2, $c4, $c6, $c9, $cc, $d0
0c3ea     D4 D7 DB DE 
0c3ee     E0 E2 E4 E4 
0c3f2     E4 E4 E2 E1 
0c3f6     DF DE DD DD | 	byte	$d4, $d7, $db, $de, $e0, $e2, $e4, $e4, $e4, $e4, $e2, $e1, $df, $de, $dd, $dd
0c3fa     DD DE E0 E2 
0c3fe     E3 E4 E6 E9 
0c402     EE F5 FE 08 
0c406     0F 15 1C 21 | 	byte	$dd, $de, $e0, $e2, $e3, $e4, $e6, $e9, $ee, $f5, $fe, $08, $0f, $15, $1c, $21
0c40a     25 2B 31 39 
0c40e     3F 46 4B 4D 
0c412     4D 4B 45 40 
0c416     38 2E 24 1C | 	byte	$25, $2b, $31, $39, $3f, $46, $4b, $4d, $4d, $4b, $45, $40, $38, $2e, $24, $1c
0c41a     15 10 0D 0C 
0c41e     0D 0E 10 10 
0c422     10 0E 0C 0A 
0c426     09 08 08 0A | 	byte	$15, $10, $0d, $0c, $0d, $0e, $10, $10, $10, $0e, $0c, $0a, $09, $08, $08, $0a
0c42a     0C 0F 12 14 
0c42e     15 16 16 16 
0c432     15 13 12 11 
0c436     11 13 17 1C | 	byte	$0c, $0f, $12, $14, $15, $16, $16, $16, $15, $13, $12, $11, $11, $13, $17, $1c
0c43a     21 29 2D 32 
0c43e     35 36 35 34 
0c442     32 2E 2A 24 
0c446     1C 14 0B 02 | 	byte	$21, $29, $2d, $32, $35, $36, $35, $34, $32, $2e, $2a, $24, $1c, $14, $0b, $02
0c44a     F8 EF E6 DE 
0c44e     D6 CD C8 C1 
0c452     BD BA B9 B9 
0c456     BA BB BD BF | 	byte	$f8, $ef, $e6, $de, $d6, $cd, $c8, $c1, $bd, $ba, $b9, $b9, $ba, $bb, $bd, $bf
0c45a     C1 C3 C4 C4 
0c45e     C3 C2 C1 BF 
0c462     BF C1 C3 C6 
0c466     CA CD D2 D5 | 	byte	$c1, $c3, $c4, $c4, $c3, $c2, $c1, $bf, $bf, $c1, $c3, $c6, $ca, $cd, $d2, $d5
0c46a     D9 DC DE DF 
0c46e     E1 E1 E1 E0 
0c472     DF DF DD DC 
0c476     DC DB DC DD | 	byte	$d9, $dc, $de, $df, $e1, $e1, $e1, $e0, $df, $df, $dd, $dc, $dc, $db, $dc, $dd
0c47a     DF E1 E2 E4 
0c47e     E5 E6 E9 ED 
0c482     F5 FD 06 0E 
0c486     15 1A 1F 25 | 	byte	$df, $e1, $e2, $e4, $e5, $e6, $e9, $ed, $f5, $fd, $06, $0e, $15, $1a, $1f, $25
0c48a     2B 32 3B 43 
0c48e     4A 4E 51 50 
0c492     4D 48 40 39 
0c496     30 24 1B 13 | 	byte	$2b, $32, $3b, $43, $4a, $4e, $51, $50, $4d, $48, $40, $39, $30, $24, $1b, $13
0c49a     0D 09 09 09 
0c49e     0C 0D 0F 10 
0c4a2     0F 0E 0D 0B 
0c4a6     0A 0A 0B 0D | 	byte	$0d, $09, $09, $09, $0c, $0d, $0f, $10, $0f, $0e, $0d, $0b, $0a, $0a, $0b, $0d
0c4aa     10 12 14 15 
0c4ae     15 14 13 11 
0c4b2     10 0D 0D 0F 
0c4b6     12 16 1C 22 | 	byte	$10, $12, $14, $15, $15, $14, $13, $11, $10, $0d, $0d, $0f, $12, $16, $1c, $22
0c4ba     29 2F 34 36 
0c4be     38 38 36 34 
0c4c2     31 2C 26 1E 
0c4c6     16 0E 04 FA | 	byte	$29, $2f, $34, $36, $38, $38, $36, $34, $31, $2c, $26, $1e, $16, $0e, $04, $fa
0c4ca     F0 E8 E0 DA 
0c4ce     D4 CD C6 C1 
0c4d2     BD BA BA B9 
0c4d6     BA BB BD BF | 	byte	$f0, $e8, $e0, $da, $d4, $cd, $c6, $c1, $bd, $ba, $ba, $b9, $ba, $bb, $bd, $bf
0c4da     BF C2 C2 C2 
0c4de     C1 C0 C0 BF 
0c4e2     C1 C4 C6 CB 
0c4e6     CF D4 D8 DB | 	byte	$bf, $c2, $c2, $c2, $c1, $c0, $c0, $bf, $c1, $c4, $c6, $cb, $cf, $d4, $d8, $db
0c4ea     DD DF DF DF 
0c4ee     DF DD DC DB 
0c4f2     DA DA DA DA 
0c4f6     D9 DA DC DD | 	byte	$dd, $df, $df, $df, $df, $dd, $dc, $db, $da, $da, $da, $da, $d9, $da, $dc, $dd
0c4fa     E0 E3 E5 E6 
0c4fe     E7 EA ED F3 
0c502     FB 03 0C 13 
0c506     1A 20 26 2B | 	byte	$e0, $e3, $e5, $e6, $e7, $ea, $ed, $f3, $fb, $03, $0c, $13, $1a, $20, $26, $2b
0c50a     35 3B 45 4C 
0c50e     51 53 52 50 
0c512     4A 42 3A 30 
0c516     26 1C 13 0C | 	byte	$35, $3b, $45, $4c, $51, $53, $52, $50, $4a, $42, $3a, $30, $26, $1c, $13, $0c
0c51a     08 05 06 08 
0c51e     0B 0D 0F 0F 
0c522     0F 0E 0D 0D 
0c526     0D 0E 10 11 | 	byte	$08, $05, $06, $08, $0b, $0d, $0f, $0f, $0f, $0e, $0d, $0d, $0d, $0e, $10, $11
0c52a     13 14 13 12 
0c52e     11 10 0E 0C 
0c532     0B 0B 0D 0F 
0c536     14 1A 21 28 | 	byte	$13, $14, $13, $12, $11, $10, $0e, $0c, $0b, $0b, $0d, $0f, $14, $1a, $21, $28
0c53a     2E 34 37 39 
0c53e     38 37 34 31 
0c542     2D 28 21 18 
0c546     0E 04 FA F1 | 	byte	$2e, $34, $37, $39, $38, $37, $34, $31, $2d, $28, $21, $18, $0e, $04, $fa, $f1
0c54a     EA E3 DD D9 
0c54e     D2 CD C7 C2 
0c552     BE BB B9 B9 
0c556     B9 BA BB BD | 	byte	$ea, $e3, $dd, $d9, $d2, $cd, $c7, $c2, $be, $bb, $b9, $b9, $b9, $ba, $bb, $bd
0c55a     BF BF C1 C1 
0c55e     C1 C1 C1 C3 
0c562     C5 C8 CC D1 
0c566     D5 D9 DD DF | 	byte	$bf, $bf, $c1, $c1, $c1, $c1, $c1, $c3, $c5, $c8, $cc, $d1, $d5, $d9, $dd, $df
0c56a     E1 E1 DF DD 
0c56e     DB DA D8 D8 
0c572     D7 D8 D9 DA 
0c576     DA DD DF E1 | 	byte	$e1, $e1, $df, $dd, $db, $da, $d8, $d8, $d7, $d8, $d9, $da, $da, $dd, $df, $e1
0c57a     E4 E6 E8 E8 
0c57e     E9 EC F1 F7 
0c582     FF 07 0E 15 
0c586     1D 24 2B 34 | 	byte	$e4, $e6, $e8, $e8, $e9, $ec, $f1, $f7, $ff, $07, $0e, $15, $1d, $24, $2b, $34
0c58a     3D 46 4D 52 
0c58e     54 53 4F 49 
0c592     42 3A 31 26 
0c596     1B 12 09 05 | 	byte	$3d, $46, $4d, $52, $54, $53, $4f, $49, $42, $3a, $31, $26, $1b, $12, $09, $05
0c59a     03 04 05 09 
0c59e     0C 0E 0F 0F 
0c5a2     10 10 10 11 
0c5a6     11 11 12 13 | 	byte	$03, $04, $05, $09, $0c, $0e, $0f, $0f, $10, $10, $10, $11, $11, $11, $12, $13
0c5aa     13 12 10 0E 
0c5ae     0C 0A 08 09 
0c5b2     0A 0C 0F 14 
0c5b6     1A 1F 27 2E | 	byte	$13, $12, $10, $0e, $0c, $0a, $08, $09, $0a, $0c, $0f, $14, $1a, $1f, $27, $2e
0c5ba     33 38 3A 3A 
0c5be     3A 36 32 2E 
0c5c2     28 22 1A 12 
0c5c6     09 00 F5 ED | 	byte	$33, $38, $3a, $3a, $3a, $36, $32, $2e, $28, $22, $1a, $12, $09, $00, $f5, $ed
0c5ca     E5 E0 DC D8 
0c5ce     D3 CD C8 C3 
0c5d2     BF BB BA B8 
0c5d6     B7 B7 B8 BA | 	byte	$e5, $e0, $dc, $d8, $d3, $cd, $c8, $c3, $bf, $bb, $ba, $b8, $b7, $b7, $b8, $ba
0c5da     BB BE BF C1 
0c5de     C1 C3 C4 C5 
0c5e2     CA CE D3 D7 
0c5e6     DD DF E1 E2 | 	byte	$bb, $be, $bf, $c1, $c1, $c3, $c4, $c5, $ca, $ce, $d3, $d7, $dd, $df, $e1, $e2
0c5ea     E1 DE DC D9 
0c5ee     D6 D5 D4 D4 
0c5f2     D4 D6 D8 D9 
0c5f6     DC DE E1 E4 | 	byte	$e1, $de, $dc, $d9, $d6, $d5, $d4, $d4, $d4, $d6, $d8, $d9, $dc, $de, $e1, $e4
0c5fa     E7 E9 EA EB 
0c5fe     ED F1 F6 FD 
0c602     05 0B 14 1C 
0c606     23 2C 34 3E | 	byte	$e7, $e9, $ea, $eb, $ed, $f1, $f6, $fd, $05, $0b, $14, $1c, $23, $2c, $34, $3e
0c60a     46 4E 54 56 
0c60e     55 53 4D 45 
0c612     3D 32 26 1C 
0c616     11 08 02 FF | 	byte	$46, $4e, $54, $56, $55, $53, $4d, $45, $3d, $32, $26, $1c, $11, $08, $02, $ff
0c61a     FF 02 05 09 
0c61e     0C 0D 0F 11 
0c622     11 13 14 15 
0c626     16 15 16 14 | 	byte	$ff, $02, $05, $09, $0c, $0d, $0f, $11, $11, $13, $14, $15, $16, $15, $16, $14
0c62a     11 0E 0B 08 
0c62e     06 05 05 06 
0c632     0A 0E 13 19 
0c636     1F 26 2D 33 | 	byte	$11, $0e, $0b, $08, $06, $05, $05, $06, $0a, $0e, $13, $19, $1f, $26, $2d, $33
0c63a     38 3B 3C 3B 
0c63e     38 34 2F 29 
0c642     23 1C 14 0A 
0c646     01 F8 F0 E9 | 	byte	$38, $3b, $3c, $3b, $38, $34, $2f, $29, $23, $1c, $14, $0a, $01, $f8, $f0, $e9
0c64a     E4 E0 DC D8 
0c64e     D4 CD C9 C3 
0c652     BE BA B7 B5 
0c656     B3 B3 B3 B5 | 	byte	$e4, $e0, $dc, $d8, $d4, $cd, $c9, $c3, $be, $ba, $b7, $b5, $b3, $b3, $b3, $b5
0c65a     B8 BB BE C1 
0c65e     C3 C5 C8 CB 
0c662     CF D4 D9 DD 
0c666     E1 E2 E2 E0 | 	byte	$b8, $bb, $be, $c1, $c3, $c5, $c8, $cb, $cf, $d4, $d9, $dd, $e1, $e2, $e2, $e0
0c66a     DD DA D7 D4 
0c66e     D1 D1 D1 D2 
0c672     D4 D6 D9 DB 
0c676     DE E0 E4 E7 | 	byte	$dd, $da, $d7, $d4, $d1, $d1, $d1, $d2, $d4, $d6, $d9, $db, $de, $e0, $e4, $e7
0c67a     E9 EA EC EE 
0c67e     F2 F6 FD 03 
0c682     0B 12 1A 23 
0c686     2C 35 3F 48 | 	byte	$e9, $ea, $ec, $ee, $f2, $f6, $fd, $03, $0b, $12, $1a, $23, $2c, $35, $3f, $48
0c68a     50 55 57 57 
0c68e     54 4E 46 3E 
0c692     34 28 1C 10 
0c696     06 00 FC FC | 	byte	$50, $55, $57, $57, $54, $4e, $46, $3e, $34, $28, $1c, $10, $06, $00, $fc, $fc
0c69a     FE 02 05 09 
0c69e     0C 0E 11 13 
0c6a2     15 16 18 19 
0c6a6     19 18 16 12 | 	byte	$fe, $02, $05, $09, $0c, $0e, $11, $13, $15, $16, $18, $19, $19, $18, $16, $12
0c6aa     0E 0A 05 02 
0c6ae     01 01 03 08 
0c6b2     0D 13 19 1F 
0c6b6     27 2E 33 38 | 	byte	$0e, $0a, $05, $02, $01, $01, $03, $08, $0d, $13, $19, $1f, $27, $2e, $33, $38
0c6ba     3B 3D 3D 3A 
0c6be     36 31 2A 24 
0c6c2     1D 15 0C 04 
0c6c6     FC F3 ED E8 | 	byte	$3b, $3d, $3d, $3a, $36, $31, $2a, $24, $1d, $15, $0c, $04, $fc, $f3, $ed, $e8
0c6ca     E4 E0 DD D8 
0c6ce     D3 CE C8 C1 
0c6d2     BC B7 B3 B0 
0c6d6     AE AE AE B2 | 	byte	$e4, $e0, $dd, $d8, $d3, $ce, $c8, $c1, $bc, $b7, $b3, $b0, $ae, $ae, $ae, $b2
0c6da     B5 B9 BD C2 
0c6de     C6 C9 CD D1 
0c6e2     D6 DA DF E2 
0c6e6     E3 E3 E1 DE | 	byte	$b5, $b9, $bd, $c2, $c6, $c9, $cd, $d1, $d6, $da, $df, $e2, $e3, $e3, $e1, $de
0c6ea     DA D4 D0 CD 
0c6ee     CB CC CE D2 
0c6f2     D4 D7 DB DD 
0c6f6     DF E4 E6 E9 | 	byte	$da, $d4, $d0, $cd, $cb, $cc, $ce, $d2, $d4, $d7, $db, $dd, $df, $e4, $e6, $e9
0c6fa     EA ED EF F4 
0c6fe     F8 FD 04 0A 
0c702     11 19 22 2B 
0c706     36 3F 4A 52 | 	byte	$ea, $ed, $ef, $f4, $f8, $fd, $04, $0a, $11, $19, $22, $2b, $36, $3f, $4a, $52
0c70a     56 59 59 54 
0c70e     4F 49 40 37 
0c712     2A 1C 0F 03 
0c716     FC F9 F8 FB | 	byte	$56, $59, $59, $54, $4f, $49, $40, $37, $2a, $1c, $0f, $03, $fc, $f9, $f8, $fb
0c71a     FE 01 04 09 
0c71e     0C 0F 12 15 
0c722     18 1A 1C 1B 
0c726     1A 17 12 0D | 	byte	$fe, $01, $04, $09, $0c, $0f, $12, $15, $18, $1a, $1c, $1b, $1a, $17, $12, $0d
0c72a     07 01 FF FD 
0c72e     FC FF 03 0A 
0c732     10 19 20 27 
0c736     2D 32 37 3A | 	byte	$07, $01, $ff, $fd, $fc, $ff, $03, $0a, $10, $19, $20, $27, $2d, $32, $37, $3a
0c73a     3C 3D 3B 37 
0c73e     32 2C 25 1D 
0c742     15 0D 05 FE 
0c746     F7 F2 ED E9 | 	byte	$3c, $3d, $3b, $37, $32, $2c, $25, $1d, $15, $0d, $05, $fe, $f7, $f2, $ed, $e9
0c74a     E6 E3 DF DB 
0c74e     D4 CE C6 BF 
0c752     B9 B4 AF AC 
0c756     AA A9 AB AE | 	byte	$e6, $e3, $df, $db, $d4, $ce, $c6, $bf, $b9, $b4, $af, $ac, $aa, $a9, $ab, $ae
0c75a     B3 B9 C0 C5 
0c75e     CB D0 D5 D9 
0c762     DE E2 E5 E6 
0c766     E5 E2 DE D9 | 	byte	$b3, $b9, $c0, $c5, $cb, $d0, $d5, $d9, $de, $e2, $e5, $e6, $e5, $e2, $de, $d9
0c76a     D3 CE CB C9 
0c76e     C9 CB CF D3 
0c772     D7 DB DE E2 
0c776     E5 E7 E9 EB | 	byte	$d3, $ce, $cb, $c9, $c9, $cb, $cf, $d3, $d7, $db, $de, $e2, $e5, $e7, $e9, $eb
0c77a     ED F1 F5 FB 
0c77e     00 04 0A 10 
0c782     19 21 2C 36 
0c786     40 49 51 55 | 	byte	$ed, $f1, $f5, $fb, $00, $04, $0a, $10, $19, $21, $2c, $36, $40, $49, $51, $55
0c78a     57 57 54 50 
0c78e     49 41 39 2C 
0c792     1F 12 05 FB 
0c796     F5 F3 F4 F8 | 	byte	$57, $57, $54, $50, $49, $41, $39, $2c, $1f, $12, $05, $fb, $f5, $f3, $f4, $f8
0c79a     FD 01 05 0A 
0c79e     0E 12 16 19 
0c7a2     1C 1E 1F 1D 
0c7a6     1A 15 0F 08 | 	byte	$fd, $01, $05, $0a, $0e, $12, $16, $19, $1c, $1e, $1f, $1d, $1a, $15, $0f, $08
0c7aa     01 FD FA F9 
0c7ae     FB 00 06 0E 
0c7b2     16 1E 27 2D 
0c7b6     32 37 3A 3B | 	byte	$01, $fd, $fa, $f9, $fb, $00, $06, $0e, $16, $1e, $27, $2d, $32, $37, $3a, $3b
0c7ba     3B 39 37 32 
0c7be     2C 27 1F 17 
0c7c2     0F 07 00 FB 
0c7c6     F5 F0 ED EA | 	byte	$3b, $39, $37, $32, $2c, $27, $1f, $17, $0f, $07, $00, $fb, $f5, $f0, $ed, $ea
0c7ca     E7 E5 E0 DA 
0c7ce     D4 CC C4 BD 
0c7d2     B6 B1 AC A8 
0c7d6     A6 A6 A9 AE | 	byte	$e7, $e5, $e0, $da, $d4, $cc, $c4, $bd, $b6, $b1, $ac, $a8, $a6, $a6, $a9, $ae
0c7da     B5 BB C3 CB 
0c7de     D1 D8 DD E0 
0c7e2     E4 E6 E7 E6 
0c7e6     E3 DE DA D3 | 	byte	$b5, $bb, $c3, $cb, $d1, $d8, $dd, $e0, $e4, $e6, $e7, $e6, $e3, $de, $da, $d3
0c7ea     CD C9 C6 C6 
0c7ee     C8 CB CF D5 
0c7f2     DA DF E2 E6 
0c7f6     E8 EA EB ED | 	byte	$cd, $c9, $c6, $c6, $c8, $cb, $cf, $d5, $da, $df, $e2, $e6, $e8, $ea, $eb, $ed
0c7fa     F0 F4 FA 00 
0c7fe     04 0A 11 18 
0c802     1F 29 34 3F 
0c806     48 50 55 57 | 	byte	$f0, $f4, $fa, $00, $04, $0a, $11, $18, $1f, $29, $34, $3f, $48, $50, $55, $57
0c80a     56 54 50 4A 
0c80e     43 3A 30 22 
0c812     13 05 FB F3 
0c816     EF EF F3 F7 | 	byte	$56, $54, $50, $4a, $43, $3a, $30, $22, $13, $05, $fb, $f3, $ef, $ef, $f3, $f7
0c81a     FC 00 07 0C 
0c81e     12 17 1B 1D 
0c822     20 20 1F 1B 
0c826     16 10 09 01 | 	byte	$fc, $00, $07, $0c, $12, $17, $1b, $1d, $20, $20, $1f, $1b, $16, $10, $09, $01
0c82a     FD F8 F6 F7 
0c82e     FC 01 0A 14 
0c832     1D 26 2E 33 
0c836     37 3A 3B 3B | 	byte	$fd, $f8, $f6, $f7, $fc, $01, $0a, $14, $1d, $26, $2e, $33, $37, $3a, $3b, $3b
0c83a     3A 37 33 2F 
0c83e     28 20 19 11 
0c842     09 03 FD F7 
0c846     F5 F1 EF ED | 	byte	$3a, $37, $33, $2f, $28, $20, $19, $11, $09, $03, $fd, $f7, $f5, $f1, $ef, $ed
0c84a     EA E8 E2 DA 
0c84e     D2 CB C1 BA 
0c852     B2 AB A6 A4 
0c856     A3 A5 A8 AD | 	byte	$ea, $e8, $e2, $da, $d2, $cb, $c1, $ba, $b2, $ab, $a6, $a4, $a3, $a5, $a8, $ad
0c85a     B5 BE C7 D0 
0c85e     D8 DF E4 E9 
0c862     EB EB EA E5 
0c866     E0 D9 D4 CD | 	byte	$b5, $be, $c7, $d0, $d8, $df, $e4, $e9, $eb, $eb, $ea, $e5, $e0, $d9, $d4, $cd
0c86a     C8 C5 C3 C5 
0c86e     C8 CC D1 D8 
0c872     DD E1 E7 EA 
0c876     EC EC ED EE | 	byte	$c8, $c5, $c3, $c5, $c8, $cc, $d1, $d8, $dd, $e1, $e7, $ea, $ec, $ec, $ed, $ee
0c87a     F2 F6 FC 01 
0c87e     08 0F 15 1F 
0c882     28 33 3E 48 
0c886     4E 52 54 53 | 	byte	$f2, $f6, $fc, $01, $08, $0f, $15, $1f, $28, $33, $3e, $48, $4e, $52, $54, $53
0c88a     52 4F 4B 45 
0c88e     3C 33 26 18 
0c892     0A FF F4 EE 
0c896     EC ED F0 F6 | 	byte	$52, $4f, $4b, $45, $3c, $33, $26, $18, $0a, $ff, $f4, $ee, $ec, $ed, $f0, $f6
0c89a     FC 01 09 10 
0c89e     16 1B 21 23 
0c8a2     24 23 1F 19 
0c8a6     12 0B 01 FC | 	byte	$fc, $01, $09, $10, $16, $1b, $21, $23, $24, $23, $1f, $19, $12, $0b, $01, $fc
0c8aa     F6 F4 F4 F9 
0c8ae     00 07 11 1A 
0c8b2     22 2B 33 37 
0c8b6     3A 3B 3B 39 | 	byte	$f6, $f4, $f4, $f9, $00, $07, $11, $1a, $22, $2b, $33, $37, $3a, $3b, $3b, $39
0c8ba     36 33 2D 27 
0c8be     21 19 12 0C 
0c8c2     07 01 FE FA 
0c8c6     F6 F3 F2 F0 | 	byte	$36, $33, $2d, $27, $21, $19, $12, $0c, $07, $01, $fe, $fa, $f6, $f3, $f2, $f0
0c8ca     EC E8 E2 DB 
0c8ce     D0 C8 BE B5 
0c8d2     AE A7 A3 A1 
0c8d6     A1 A4 A9 AF | 	byte	$ec, $e8, $e2, $db, $d0, $c8, $be, $b5, $ae, $a7, $a3, $a1, $a1, $a4, $a9, $af
0c8da     B8 C1 CB D5 
0c8de     DF E5 EC EF 
0c8e2     EF ED E8 E2 
0c8e6     DB D4 CD C8 | 	byte	$b8, $c1, $cb, $d5, $df, $e5, $ec, $ef, $ef, $ed, $e8, $e2, $db, $d4, $cd, $c8
0c8ea     C3 C3 C4 C5 
0c8ee     C9 CF D4 DA 
0c8f2     E1 E5 EA ED 
0c8f6     EE EF F1 F3 | 	byte	$c3, $c3, $c4, $c5, $c9, $cf, $d4, $da, $e1, $e5, $ea, $ed, $ee, $ef, $f1, $f3
0c8fa     F6 FD 01 08 
0c8fe     10 18 20 2B 
0c902     36 3F 48 4E 
0c906     52 53 52 50 | 	byte	$f6, $fd, $01, $08, $10, $18, $20, $2b, $36, $3f, $48, $4e, $52, $53, $52, $50
0c90a     4D 4A 45 3E 
0c90e     37 2A 1D 0F 
0c912     00 F5 EE EA 
0c916     E9 EC F0 F6 | 	byte	$4d, $4a, $45, $3e, $37, $2a, $1d, $0f, $00, $f5, $ee, $ea, $e9, $ec, $f0, $f6
0c91a     FD 03 0C 13 
0c91e     1A 1F 23 25 
0c922     24 20 1B 13 
0c926     0B 02 FC F5 | 	byte	$fd, $03, $0c, $13, $1a, $1f, $23, $25, $24, $20, $1b, $13, $0b, $02, $fc, $f5
0c92a     F3 F3 F5 FC 
0c92e     03 0D 18 21 
0c932     2A 32 37 3A 
0c936     3A 3A 39 36 | 	byte	$f3, $f3, $f5, $fc, $03, $0d, $18, $21, $2a, $32, $37, $3a, $3a, $3a, $39, $36
0c93a     33 2F 28 22 
0c93e     1A 14 0E 08 
0c942     03 00 FF FC 
0c946     FA F7 F4 F2 | 	byte	$33, $2f, $28, $22, $1a, $14, $0e, $08, $03, $00, $ff, $fc, $fa, $f7, $f4, $f2
0c94a     ED E7 E1 D9 
0c94e     CF C3 BA B0 
0c952     A8 A4 A0 9F 
0c956     A2 A5 AB B2 | 	byte	$ed, $e7, $e1, $d9, $cf, $c3, $ba, $b0, $a8, $a4, $a0, $9f, $a2, $a5, $ab, $b2
0c95a     BB C4 D0 DB 
0c95e     E5 EC F1 F3 
0c962     F0 EB E5 DD 
0c966     D4 CF C8 C5 | 	byte	$bb, $c4, $d0, $db, $e5, $ec, $f1, $f3, $f0, $eb, $e5, $dd, $d4, $cf, $c8, $c5
0c96a     C2 C2 C3 C6 
0c96e     CB D1 D7 DE 
0c972     E5 E9 EC EF 
0c976     F0 F1 F4 F8 | 	byte	$c2, $c2, $c3, $c6, $cb, $d1, $d7, $de, $e5, $e9, $ec, $ef, $f0, $f1, $f4, $f8
0c97a     FE 02 0A 10 
0c97e     17 21 2B 35 
0c982     3F 48 4D 4F 
0c986     50 4E 4D 4B | 	byte	$fe, $02, $0a, $10, $17, $21, $2b, $35, $3f, $48, $4d, $4f, $50, $4e, $4d, $4b
0c98a     48 44 3F 37 
0c98e     2D 21 13 07 
0c992     FA F1 EB E8 
0c996     E8 EB EF F5 | 	byte	$48, $44, $3f, $37, $2d, $21, $13, $07, $fa, $f1, $eb, $e8, $e8, $eb, $ef, $f5
0c99a     FD 04 0D 17 
0c99e     1E 23 26 26 
0c9a2     22 1D 16 0D 
0c9a6     05 FE F6 F3 | 	byte	$fd, $04, $0d, $17, $1e, $23, $26, $26, $22, $1d, $16, $0d, $05, $fe, $f6, $f3
0c9aa     F1 F3 F7 00 
0c9ae     08 13 1D 27 
0c9b2     2F 34 38 39 
0c9b6     39 38 35 32 | 	byte	$f1, $f3, $f7, $00, $08, $13, $1d, $27, $2f, $34, $38, $39, $39, $38, $35, $32
0c9ba     2D 28 21 1A 
0c9be     14 0D 09 05 
0c9c2     03 01 00 00 
0c9c6     FD FA F6 F3 | 	byte	$2d, $28, $21, $1a, $14, $0d, $09, $05, $03, $01, $00, $00, $fd, $fa, $f6, $f3
0c9ca     ED E7 DF D7 
0c9ce     CC C1 B6 AD 
0c9d2     A5 A1 A0 A0 
0c9d6     A4 A8 AE B6 | 	byte	$ed, $e7, $df, $d7, $cc, $c1, $b6, $ad, $a5, $a1, $a0, $a0, $a4, $a8, $ae, $b6
0c9da     C0 CA D6 E1 
0c9de     EA F0 F5 F4 
0c9e2     F0 EB E2 D9 
0c9e6     D0 C9 C6 C3 | 	byte	$c0, $ca, $d6, $e1, $ea, $f0, $f5, $f4, $f0, $eb, $e2, $d9, $d0, $c9, $c6, $c3
0c9ea     C2 C2 C5 C8 
0c9ee     CF D4 DB E2 
0c9f2     E7 EC EE F0 
0c9f6     F2 F5 F9 FF | 	byte	$c2, $c2, $c5, $c8, $cf, $d4, $db, $e2, $e7, $ec, $ee, $f0, $f2, $f5, $f9, $ff
0c9fa     04 0B 12 1A 
0c9fe     22 2A 36 3E 
0ca02     46 4B 4E 4F 
0ca06     4D 4B 49 45 | 	byte	$04, $0b, $12, $1a, $22, $2a, $36, $3e, $46, $4b, $4e, $4f, $4d, $4b, $49, $45
0ca0a     42 3E 37 2F 
0ca0e     24 17 0A FE 
0ca12     F3 ED E8 E6 
0ca16     E7 EB EF F7 | 	byte	$42, $3e, $37, $2f, $24, $17, $0a, $fe, $f3, $ed, $e8, $e6, $e7, $eb, $ef, $f7
0ca1a     FF 08 11 1A 
0ca1e     20 24 25 23 
0ca22     1E 18 0F 07 
0ca26     00 F9 F4 F3 | 	byte	$ff, $08, $11, $1a, $20, $24, $25, $23, $1e, $18, $0f, $07, $00, $f9, $f4, $f3
0ca2a     F3 F7 FC 04 
0ca2e     0F 18 23 2B 
0ca32     33 37 38 38 
0ca36     38 34 32 2D | 	byte	$f3, $f7, $fc, $04, $0f, $18, $23, $2b, $33, $37, $38, $38, $38, $34, $32, $2d
0ca3a     28 22 1B 15 
0ca3e     0E 08 07 04 
0ca42     04 04 04 01 
0ca46     00 FD F8 F3 | 	byte	$28, $22, $1b, $15, $0e, $08, $07, $04, $04, $04, $04, $01, $00, $fd, $f8, $f3
0ca4a     ED E5 DD D2 
0ca4e     C6 BC B1 A8 
0ca52     A3 9F A0 A2 
0ca56     A6 AD B3 BB | 	byte	$ed, $e5, $dd, $d2, $c6, $bc, $b1, $a8, $a3, $9f, $a0, $a2, $a6, $ad, $b3, $bb
0ca5a     C5 CF DA E5 
0ca5e     EE F3 F5 F2 
0ca62     ED E5 DC D4 
0ca66     CC C7 C4 C2 | 	byte	$c5, $cf, $da, $e5, $ee, $f3, $f5, $f2, $ed, $e5, $dc, $d4, $cc, $c7, $c4, $c2
0ca6a     C2 C4 C7 CA 
0ca6e     D1 D7 DE E3 
0ca72     E9 ED F0 F1 
0ca76     F5 F9 FF 04 | 	byte	$c2, $c4, $c7, $ca, $d1, $d7, $de, $e3, $e9, $ed, $f0, $f1, $f5, $f9, $ff, $04
0ca7a     0D 14 1B 24 
0ca7e     2C 36 3E 45 
0ca82     4A 4D 4D 4D 
0ca86     4A 48 45 41 | 	byte	$0d, $14, $1b, $24, $2c, $36, $3e, $45, $4a, $4d, $4d, $4d, $4a, $48, $45, $41
0ca8a     3D 38 31 27 
0ca8e     1C 0F 02 F8 
0ca92     EF EA E7 E6 
0ca96     E9 EC F1 F9 | 	byte	$3d, $38, $31, $27, $1c, $0f, $02, $f8, $ef, $ea, $e7, $e6, $e9, $ec, $f1, $f9
0ca9a     01 0B 14 1D 
0ca9e     22 25 24 20 
0caa2     19 11 08 00 
0caa6     F9 F6 F3 F3 | 	byte	$01, $0b, $14, $1d, $22, $25, $24, $20, $19, $11, $08, $00, $f9, $f6, $f3, $f3
0caaa     F6 FA 00 08 
0caae     12 1C 26 2E 
0cab2     35 37 37 37 
0cab6     34 31 2C 28 | 	byte	$f6, $fa, $00, $08, $12, $1c, $26, $2e, $35, $37, $37, $37, $34, $31, $2c, $28
0caba     22 1C 16 0F 
0cabe     0B 07 06 05 
0cac2     06 07 07 05 
0cac6     03 FF F9 F2 | 	byte	$22, $1c, $16, $0f, $0b, $07, $06, $05, $06, $07, $07, $05, $03, $ff, $f9, $f2
0caca     EB E3 D8 CE 
0cace     C1 B7 AC A5 
0cad2     A1 A0 A1 A5 
0cad6     AB B1 B9 C1 | 	byte	$eb, $e3, $d8, $ce, $c1, $b7, $ac, $a5, $a1, $a0, $a1, $a5, $ab, $b1, $b9, $c1
0cada     C8 D4 DE E7 
0cade     EE F3 F3 EF 
0cae2     E9 E0 D7 D0 
0cae6     CA C6 C3 C3 | 	byte	$c8, $d4, $de, $e7, $ee, $f3, $f3, $ef, $e9, $e0, $d7, $d0, $ca, $c6, $c3, $c3
0caea     C4 C6 C8 CD 
0caee     D2 D8 DF E5 
0caf2     EA ED F1 F3 
0caf6     F8 FC 03 0C | 	byte	$c4, $c6, $c8, $cd, $d2, $d8, $df, $e5, $ea, $ed, $f1, $f3, $f8, $fc, $03, $0c
0cafa     14 1B 25 2E 
0cafe     36 3F 45 49 
0cb02     4B 4C 4A 49 
0cb06     47 43 40 3D | 	byte	$14, $1b, $25, $2e, $36, $3f, $45, $49, $4b, $4c, $4a, $49, $47, $43, $40, $3d
0cb0a     38 32 2A 1F 
0cb0e     14 08 FD F3 
0cb12     ED E8 E6 E6 
0cb16     E9 EE F5 FD | 	byte	$38, $32, $2a, $1f, $14, $08, $fd, $f3, $ed, $e8, $e6, $e6, $e9, $ee, $f5, $fd
0cb1a     06 0F 16 1C 
0cb1e     20 21 1F 1A 
0cb22     14 0B 03 FC 
0cb26     F8 F4 F4 F7 | 	byte	$06, $0f, $16, $1c, $20, $21, $1f, $1a, $14, $0b, $03, $fc, $f8, $f4, $f4, $f7
0cb2a     FA 00 06 0E 
0cb2e     18 1F 28 2F 
0cb32     33 36 36 34 
0cb36     31 2C 27 22 | 	byte	$fa, $00, $06, $0e, $18, $1f, $28, $2f, $33, $36, $36, $34, $31, $2c, $27, $22
0cb3a     1D 17 12 0D 
0cb3e     0A 07 06 06 
0cb42     08 09 09 08 
0cb46     06 00 FA F1 | 	byte	$1d, $17, $12, $0d, $0a, $07, $06, $06, $08, $09, $09, $08, $06, $00, $fa, $f1
0cb4a     E8 DD D2 C8 
0cb4e     BC B1 A9 A4 
0cb52     A1 A2 A5 AA 
0cb56     B0 B6 BE C5 | 	byte	$e8, $dd, $d2, $c8, $bc, $b1, $a9, $a4, $a1, $a2, $a5, $aa, $b0, $b6, $be, $c5
0cb5a     CE D7 E1 E9 
0cb5e     EE F0 EE E9 
0cb62     E3 DC D4 CD 
0cb66     C9 C6 C5 C5 | 	byte	$ce, $d7, $e1, $e9, $ee, $f0, $ee, $e9, $e3, $dc, $d4, $cd, $c9, $c6, $c5, $c5
0cb6a     C6 C8 CB D0 
0cb6e     D5 DB E1 E6 
0cb72     EA EE F1 F6 
0cb76     FC 03 0B 15 | 	byte	$c6, $c8, $cb, $d0, $d5, $db, $e1, $e6, $ea, $ee, $f1, $f6, $fc, $03, $0b, $15
0cb7a     1D 27 30 3A 
0cb7e     40 45 48 49 
0cb82     49 48 47 45 
0cb86     43 40 3D 39 | 	byte	$1d, $27, $30, $3a, $40, $45, $48, $49, $49, $48, $47, $45, $43, $40, $3d, $39
0cb8a     33 2B 22 17 
0cb8e     0D 01 F9 F0 
0cb92     EA E7 E6 E8 
0cb96     EC F2 FA 01 | 	byte	$33, $2b, $22, $17, $0d, $01, $f9, $f0, $ea, $e7, $e6, $e8, $ec, $f2, $fa, $01
0cb9a     0A 12 18 1C 
0cb9e     1E 1C 1A 14 
0cba2     0D 05 FF FA 
0cba6     F7 F5 F7 FB | 	byte	$0a, $12, $18, $1c, $1e, $1c, $1a, $14, $0d, $05, $ff, $fa, $f7, $f5, $f7, $fb
0cbaa     00 05 0C 13 
0cbae     1B 22 29 2E 
0cbb2     31 33 33 30 
0cbb6     2C 28 22 1D | 	byte	$00, $05, $0c, $13, $1b, $22, $29, $2e, $31, $33, $33, $30, $2c, $28, $22, $1d
0cbba     18 14 10 0D 
0cbbe     0A 09 09 0A 
0cbc2     0A 0B 0B 0A 
0cbc6     06 00 F9 EF | 	byte	$18, $14, $10, $0d, $0a, $09, $09, $0a, $0a, $0b, $0b, $0a, $06, $00, $f9, $ef
0cbca     E5 DA CE C2 
0cbce     B7 AE A7 A4 
0cbd2     A4 A5 A9 AF 
0cbd6     B4 BB C2 CA | 	byte	$e5, $da, $ce, $c2, $b7, $ae, $a7, $a4, $a4, $a5, $a9, $af, $b4, $bb, $c2, $ca
0cbda     D3 DB E3 E8 
0cbde     EB EB E9 E4 
0cbe2     DE D6 D1 CC 
0cbe6     CA C9 C8 C8 | 	byte	$d3, $db, $e3, $e8, $eb, $eb, $e9, $e4, $de, $d6, $d1, $cc, $ca, $c9, $c8, $c8
0cbea     CA CB CE D2 
0cbee     D7 DC E1 E5 
0cbf2     E9 ED F2 FB 
0cbf6     02 0D 17 20 | 	byte	$ca, $cb, $ce, $d2, $d7, $dc, $e1, $e5, $e9, $ed, $f2, $fb, $02, $0d, $17, $20
0cbfa     2A 33 3C 42 
0cbfe     47 48 48 47 
0cc02     46 44 42 41 
0cc06     3F 3D 38 33 | 	byte	$2a, $33, $3c, $42, $47, $48, $48, $47, $46, $44, $42, $41, $3f, $3d, $38, $33
0cc0a     2D 24 1A 11 
0cc0e     07 FD F5 ED 
0cc12     E9 E7 E7 EA 
0cc16     EE F5 FD 05 | 	byte	$2d, $24, $1a, $11, $07, $fd, $f5, $ed, $e9, $e7, $e7, $ea, $ee, $f5, $fd, $05
0cc1a     0C 13 18 19 
0cc1e     19 17 13 0D 
0cc22     07 01 FD FA 
0cc26     F9 FA FC 00 | 	byte	$0c, $13, $18, $19, $19, $17, $13, $0d, $07, $01, $fd, $fa, $f9, $fa, $fc, $00
0cc2a     05 0B 11 18 
0cc2e     1D 23 28 2C 
0cc32     2E 2E 2C 2A 
0cc36     27 22 1D 19 | 	byte	$05, $0b, $11, $18, $1d, $23, $28, $2c, $2e, $2e, $2c, $2a, $27, $22, $1d, $19
0cc3a     16 12 0F 0D 
0cc3e     0B 0B 0B 0D 
0cc42     0E 0E 0D 09 
0cc46     05 FF F5 EA | 	byte	$16, $12, $0f, $0d, $0b, $0b, $0b, $0d, $0e, $0e, $0d, $09, $05, $ff, $f5, $ea
0cc4a     E0 D4 C8 BE 
0cc4e     B4 AC A6 A6 
0cc52     A6 AA AF B4 
0cc56     B9 C0 C7 CE | 	byte	$e0, $d4, $c8, $be, $b4, $ac, $a6, $a6, $a6, $aa, $af, $b4, $b9, $c0, $c7, $ce
0cc5a     D5 DB E2 E4 
0cc5e     E5 E5 E2 DE 
0cc62     D9 D4 D0 CD 
0cc66     CB CB CB CB | 	byte	$d5, $db, $e2, $e4, $e5, $e5, $e2, $de, $d9, $d4, $d0, $cd, $cb, $cb, $cb, $cb
0cc6a     CC CE D1 D5 
0cc6e     DA DD E1 E5 
0cc72     EA F0 F8 00 
0cc76     0B 17 21 2C | 	byte	$cc, $ce, $d1, $d5, $da, $dd, $e1, $e5, $ea, $f0, $f8, $00, $0b, $17, $21, $2c
0cc7a     37 40 46 49 
0cc7e     4B 49 46 44 
0cc82     42 3F 3E 3E 
0cc86     3B 38 34 2E | 	byte	$37, $40, $46, $49, $4b, $49, $46, $44, $42, $3f, $3e, $3e, $3b, $38, $34, $2e
0cc8a     27 1F 16 0D 
0cc8e     01 F8 F1 ED 
0cc92     EA E9 EA ED 
0cc96     F2 F8 00 07 | 	byte	$27, $1f, $16, $0d, $01, $f8, $f1, $ed, $ea, $e9, $ea, $ed, $f2, $f8, $00, $07
0cc9a     0D 11 15 15 
0cc9e     12 10 0D 08 
0cca2     03 00 FD FB 
0cca6     FC FE 01 05 | 	byte	$0d, $11, $15, $15, $12, $10, $0d, $08, $03, $00, $fd, $fb, $fc, $fe, $01, $05
0ccaa     0B 11 15 1B 
0ccae     1F 23 27 28 
0ccb2     28 28 26 24 
0ccb6     21 1E 1A 17 | 	byte	$0b, $11, $15, $1b, $1f, $23, $27, $28, $28, $28, $26, $24, $21, $1e, $1a, $17
0ccba     14 11 10 0E 
0ccbe     0E 0E 0E 0F 
0ccc2     0F 0F 0D 09 
0ccc6     03 FC F2 E7 | 	byte	$14, $11, $10, $0e, $0e, $0e, $0e, $0f, $0f, $0f, $0d, $09, $03, $fc, $f2, $e7
0ccca     DB D0 C4 B9 
0ccce     B0 AB A8 A9 
0ccd2     AB B0 B4 B9 
0ccd6     BF C5 CA D1 | 	byte	$db, $d0, $c4, $b9, $b0, $ab, $a8, $a9, $ab, $b0, $b4, $b9, $bf, $c5, $ca, $d1
0ccda     D6 DB DF E1 
0ccde     E1 DF DC D9 
0cce2     D5 D2 D0 CE 
0cce6     CE CE CE CE | 	byte	$d6, $db, $df, $e1, $e1, $df, $dc, $d9, $d5, $d2, $d0, $ce, $ce, $ce, $ce, $ce
0ccea     D0 D1 D4 D7 
0ccee     DA DD E1 E5 
0ccf2     EB F4 FF 0A 
0ccf6     17 24 2F 39 | 	byte	$d0, $d1, $d4, $d7, $da, $dd, $e1, $e5, $eb, $f4, $ff, $0a, $17, $24, $2f, $39
0ccfa     43 49 4A 4B 
0ccfe     49 46 43 41 
0cd02     3E 3D 3B 39 
0cd06     36 33 2E 28 | 	byte	$43, $49, $4a, $4b, $49, $46, $43, $41, $3e, $3d, $3b, $39, $36, $33, $2e, $28
0cd0a     21 19 10 06 
0cd0e     FF F7 F0 ED 
0cd12     EB EB EC F0 
0cd16     F6 FC 02 08 | 	byte	$21, $19, $10, $06, $ff, $f7, $f0, $ed, $eb, $eb, $ec, $f0, $f6, $fc, $02, $08
0cd1a     0C 10 10 10 
0cd1e     0D 0A 07 03 
0cd22     01 00 FE FE 
0cd26     00 02 06 0A | 	byte	$0c, $10, $10, $10, $0d, $0a, $07, $03, $01, $00, $fe, $fe, $00, $02, $06, $0a
0cd2a     0F 13 18 1B 
0cd2e     1F 21 23 23 
0cd32     22 21 1F 1C 
0cd36     1B 18 17 15 | 	byte	$0f, $13, $18, $1b, $1f, $21, $23, $23, $22, $21, $1f, $1c, $1b, $18, $17, $15
0cd3a     13 13 11 10 
0cd3e     10 10 10 11 
0cd42     11 0F 0C 07 
0cd46     00 F8 EC E1 | 	byte	$13, $13, $11, $10, $10, $10, $10, $11, $11, $0f, $0c, $07, $00, $f8, $ec, $e1
0cd4a     D6 CA BF B7 
0cd4e     B0 AD AC AE 
0cd52     B2 B5 BA BF 
0cd56     C3 C9 CD D2 | 	byte	$d6, $ca, $bf, $b7, $b0, $ad, $ac, $ae, $b2, $b5, $ba, $bf, $c3, $c9, $cd, $d2
0cd5a     D6 D9 DB DB 
0cd5e     DA D9 D7 D5 
0cd62     D3 D2 D1 D0 
0cd66     D0 D1 D1 D2 | 	byte	$d6, $d9, $db, $db, $da, $d9, $d7, $d5, $d3, $d2, $d1, $d0, $d0, $d1, $d1, $d2
0cd6a     D3 D4 D6 D8 
0cd6e     DB DD E0 E6 
0cd72     ED F7 03 10 
0cd76     1D 2C 39 44 | 	byte	$d3, $d4, $d6, $d8, $db, $dd, $e0, $e6, $ed, $f7, $03, $10, $1d, $2c, $39, $44
0cd7a     4A 4E 4E 4B 
0cd7e     48 43 40 3D 
0cd82     3B 3A 37 35 
0cd86     32 2D 28 22 | 	byte	$4a, $4e, $4e, $4b, $48, $43, $40, $3d, $3b, $3a, $37, $35, $32, $2d, $28, $22
0cd8a     1C 14 0B 03 
0cd8e     FC F6 F1 EF 
0cd92     EE EE F1 F5 
0cd96     F9 FE 03 06 | 	byte	$1c, $14, $0b, $03, $fc, $f6, $f1, $ef, $ee, $ee, $f1, $f5, $f9, $fe, $03, $06
0cd9a     09 0A 0A 08 
0cd9e     07 04 03 01 
0cda2     00 00 00 02 
0cda6     04 07 0A 0F | 	byte	$09, $0a, $0a, $08, $07, $04, $03, $01, $00, $00, $00, $02, $04, $07, $0a, $0f
0cdaa     13 17 1A 1D 
0cdae     1F 1F 1F 1D 
0cdb2     1C 1A 19 18 
0cdb6     16 16 15 15 | 	byte	$13, $17, $1a, $1d, $1f, $1f, $1f, $1d, $1c, $1a, $19, $18, $16, $16, $15, $15
0cdba     15 14 14 14 
0cdbe     13 13 13 12 
0cdc2     11 0E 0A 03 
0cdc6     FD F4 EA DF | 	byte	$15, $14, $14, $14, $13, $13, $13, $12, $11, $0e, $0a, $03, $fd, $f4, $ea, $df
0cdca     D3 C8 BD B5 
0cdce     B0 AF B0 B4 
0cdd2     B7 BC C0 C5 
0cdd6     C8 CC CF D2 | 	byte	$d3, $c8, $bd, $b5, $b0, $af, $b0, $b4, $b7, $bc, $c0, $c5, $c8, $cc, $cf, $d2
0cdda     D4 D7 D7 D7 
0cdde     D6 D4 D4 D3 
0cde2     D3 D2 D3 D3 
0cde6     D3 D4 D4 D4 | 	byte	$d4, $d7, $d7, $d7, $d6, $d4, $d4, $d3, $d3, $d2, $d3, $d3, $d3, $d4, $d4, $d4
0cdea     D7 D7 D7 D9 
0cdee     DB DD E2 E9 
0cdf2     F3 00 0D 1C 
0cdf6     29 37 43 4A | 	byte	$d7, $d7, $d7, $d9, $db, $dd, $e2, $e9, $f3, $00, $0d, $1c, $29, $37, $43, $4a
0cdfa     4E 4E 4D 48 
0cdfe     44 40 3D 3A 
0ce02     38 35 34 31 
0ce06     2C 28 23 1D | 	byte	$4e, $4e, $4d, $48, $44, $40, $3d, $3a, $38, $35, $34, $31, $2c, $28, $23, $1d
0ce0a     17 0F 07 00 
0ce0e     FA F5 F2 F0 
0ce12     F1 F2 F5 F8 
0ce16     FC FF 01 04 | 	byte	$17, $0f, $07, $00, $fa, $f5, $f2, $f0, $f1, $f2, $f5, $f8, $fc, $ff, $01, $04
0ce1a     06 06 05 03 
0ce1e     03 01 00 01 
0ce22     01 03 03 06 
0ce26     08 0A 0D 11 | 	byte	$06, $06, $05, $03, $03, $01, $00, $01, $01, $03, $03, $06, $08, $0a, $0d, $11
0ce2a     15 17 1A 1C 
0ce2e     1C 1A 1A 17 
0ce32     16 14 13 13 
0ce36     13 14 14 15 | 	byte	$15, $17, $1a, $1c, $1c, $1a, $1a, $17, $16, $14, $13, $13, $13, $14, $14, $15
0ce3a     16 16 16 16 
0ce3e     16 16       | 	byte	$16[6]
0ce40     14 13 10 0D 
0ce44     08 01 FA F0 
0ce48     E5 DA D0 C5 
0ce4c     BE B7 B4 B4 | 	byte	$14, $13, $10, $0d, $08, $01, $fa, $f0, $e5, $da, $d0, $c5, $be, $b7, $b4, $b4
0ce50     B5 B9 BE C1 
0ce54     C5 C8 CB CE 
0ce58     CF D1 D1 D3 
0ce5c     D3 D3 D3 D2 | 	byte	$b5, $b9, $be, $c1, $c5, $c8, $cb, $ce, $cf, $d1, $d1, $d3, $d3, $d3, $d3, $d2
0ce60     D1 D1 D2 D3 
0ce64     D4 D5 D6 D7 
0ce68     D7 D8 D8 D8 
0ce6c     D8 D9 DC E0 | 	byte	$d1, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d7, $d8, $d8, $d8, $d8, $d9, $dc, $e0
0ce70     E8 F0 FC 0A 
0ce74     18 28 36 43 
0ce78     4B 50 50 4E 
0ce7c     49 45 41 3D | 	byte	$e8, $f0, $fc, $0a, $18, $28, $36, $43, $4b, $50, $50, $4e, $49, $45, $41, $3d
0ce80     3A 38 36 33 
0ce84     2F 2C 27 24 
0ce88     1F 19 13 0C 
0ce8c     04 FD F9 F4 | 	byte	$3a, $38, $36, $33, $2f, $2c, $27, $24, $1f, $19, $13, $0c, $04, $fd, $f9, $f4
0ce90     F3 F2 F4 F5 
0ce94     F7 FA FC FD 
0ce98     FF 00 00 00 
0ce9c     00 00 00 00 | 	byte	$f3, $f2, $f4, $f5, $f7, $fa, $fc, $fd, $ff, $00, $00, $00, $00, $00, $00, $00
0cea0     01 02 04 05 
0cea4     07 09 0C 0E 
0cea8     11 14 15 17 
0ceac     19 19 18 17 | 	byte	$01, $02, $04, $05, $07, $09, $0c, $0e, $11, $14, $15, $17, $19, $19, $18, $17
0ceb0     15 13 10 0F 
0ceb4     0E 0F 11 14 
0ceb8     15 17 17 17 
0cebc     17 17 17 15 | 	byte	$15, $13, $10, $0f, $0e, $0f, $11, $14, $15, $17, $17, $17, $17, $17, $17, $15
0cec0     14 13 0F 0A 
0cec4     04 FE F4 EB 
0cec8     E1 D8 CD C5 
0cecc     BD B9 B7 B8 | 	byte	$14, $13, $0f, $0a, $04, $fe, $f4, $eb, $e1, $d8, $cd, $c5, $bd, $b9, $b7, $b8
0ced0     BB BE C2 C6 
0ced4     C9 CB CC CD 
0ced8     CE CE CF CF 
0cedc     CF CF CF D0 | 	byte	$bb, $be, $c2, $c6, $c9, $cb, $cc, $cd, $ce, $ce, $cf, $cf, $cf, $cf, $cf, $d0
0cee0     D0 D0 D2 D4 
0cee4     D5 D7 D8 D8 
0cee8     D8 D8 D8 D8 
0ceec     D9 DB DE E5 | 	byte	$d0, $d0, $d2, $d4, $d5, $d7, $d8, $d8, $d8, $d8, $d8, $d8, $d9, $db, $de, $e5
0cef0     ED F8 07 15 
0cef4     24 33 40 49 
0cef8     4F 50 4E 49 
0cefc     45 41 3E 3B | 	byte	$ed, $f8, $07, $15, $24, $33, $40, $49, $4f, $50, $4e, $49, $45, $41, $3e, $3b
0cf00     38 35 32 2F 
0cf04     2C 27 24 20 
0cf08     1B 16 0F 09 
0cf0c     02 FD F8 F5 | 	byte	$38, $35, $32, $2f, $2c, $27, $24, $20, $1b, $16, $0f, $09, $02, $fd, $f8, $f5
0cf10     F4 F4 F5 F8 
0cf14     F9 FB FC FC 
0cf18     FC FC FC FC 
0cf1c     FD FE 00 00 | 	byte	$f4, $f4, $f5, $f8, $f9, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fe, $00, $00
0cf20     02 04 06 08 
0cf24     0A 0C 0E 10 
0cf28     12 13 15 15 
0cf2c     16 15 14 12 | 	byte	$02, $04, $06, $08, $0a, $0c, $0e, $10, $12, $13, $15, $15, $16, $15, $14, $12
0cf30     10 0E 0D 0D 
0cf34     0D 0F 11 13 
0cf38     15 18 18 19 
0cf3c     19 18 18 16 | 	byte	$10, $0e, $0d, $0d, $0d, $0f, $11, $13, $15, $18, $18, $19, $19, $18, $18, $16
0cf40     14 11 0D 07 
0cf44     00 F9 F0 E8 
0cf48     E0 D6 CD C7 
0cf4c     C0 BC BB BB | 	byte	$14, $11, $0d, $07, $00, $f9, $f0, $e8, $e0, $d6, $cd, $c7, $c0, $bc, $bb, $bb
0cf50     BE C2 C6 C8 
0cf54     CB CC CC CB 
0cf58     CB CB CB CC 
0cf5c     CE CE CE CF | 	byte	$be, $c2, $c6, $c8, $cb, $cc, $cc, $cb, $cb, $cb, $cb, $cc, $ce, $ce, $ce, $cf
0cf60     D1 D1 D3 D5 
0cf64     D6 D8 D9 DA 
0cf68     D9 D9 D9 D9 
0cf6c     D9 DD E4 EC | 	byte	$d1, $d1, $d3, $d5, $d6, $d8, $d9, $da, $d9, $d9, $d9, $d9, $d9, $dd, $e4, $ec
0cf70     F7 04 13 21 
0cf74     31 3E 49 4E 
0cf78     4F 4D 49 45 
0cf7c     41 3D 3B 39 | 	byte	$f7, $04, $13, $21, $31, $3e, $49, $4e, $4f, $4d, $49, $45, $41, $3d, $3b, $39
0cf80     36 33 2F 2B 
0cf84     28 24 21 1C 
0cf88     18 13 0D 07 
0cf8c     02 FD F9 F6 | 	byte	$36, $33, $2f, $2b, $28, $24, $21, $1c, $18, $13, $0d, $07, $02, $fd, $f9, $f6
0cf90     F6 F6 F6 F7 
0cf94     F9 F9 F9 F9 
0cf98     F8 F8 F9 F9 
0cf9c     FB FE 00 01 | 	byte	$f6, $f6, $f6, $f7, $f9, $f9, $f9, $f9, $f8, $f8, $f9, $f9, $fb, $fe, $00, $01
0cfa0     04 07 09 0C 
0cfa4     0D 0F 10 11 
0cfa8     12 12 13 12 
0cfac     12 11 10 0F | 	byte	$04, $07, $09, $0c, $0d, $0f, $10, $11, $12, $12, $13, $12, $12, $11, $10, $0f
0cfb0     0C 0B 0A 0A 
0cfb4     0C 0F 11 14 
0cfb8     17 19 1A 1A 
0cfbc     19 18 16 14 | 	byte	$0c, $0b, $0a, $0a, $0c, $0f, $11, $14, $17, $19, $1a, $1a, $19, $18, $16, $14
0cfc0     11 0E 09 03 
0cfc4     FE F7 EE E6 
0cfc8     DE D6 CF C9 
0cfcc     C3 C0 BF C0 | 	byte	$11, $0e, $09, $03, $fe, $f7, $ee, $e6, $de, $d6, $cf, $c9, $c3, $c0, $bf, $c0
0cfd0     C2 C5 C8 CA 
0cfd4     CB CB CA CA 
0cfd8     C9 C9 C9 CB 
0cfdc     CB CD CE D0 | 	byte	$c2, $c5, $c8, $ca, $cb, $cb, $ca, $ca, $c9, $c9, $c9, $cb, $cb, $cd, $ce, $d0
0cfe0     D1 D2 D4 D5 
0cfe4     D7 D9 DA DA 
0cfe8     DA DA D8 DA 
0cfec     DC E1 E9 F4 | 	byte	$d1, $d2, $d4, $d5, $d7, $d9, $da, $da, $da, $da, $d8, $da, $dc, $e1, $e9, $f4
0cff0     00 11 21 2C 
0cff4     3D 46 4B 4C 
0cff8     4B 48 44 40 
0cffc     3D 3B 39 37 | 	byte	$00, $11, $21, $2c, $3d, $46, $4b, $4c, $4b, $48, $44, $40, $3d, $3b, $39, $37
0d000     34 30 2C 28 
0d004     25 21 1D 1A 
0d008     15 11 0C 07 
0d00c     02 FF FC F9 | 	byte	$34, $30, $2c, $28, $25, $21, $1d, $1a, $15, $11, $0c, $07, $02, $ff, $fc, $f9
0d010     F7 F7 F7 F7 
0d014     F7 F7       | 	byte	$f7[6]
0d016     F5 F5 F4 F5 
0d01a     F6 F8 FA FE 
0d01e     01 04 07 09 
0d022     0C 0E 0F 10 | 	byte	$f5, $f5, $f4, $f5, $f6, $f8, $fa, $fe, $01, $04, $07, $09, $0c, $0e, $0f, $10
0d026     11 11 10 10 
0d02a     0F 0E 0D 0C 
0d02e     0B 0B 09 09 
0d032     0A 0B 0D 10 | 	byte	$11, $11, $10, $10, $0f, $0e, $0d, $0c, $0b, $0b, $09, $09, $0a, $0b, $0d, $10
0d036     12 15 18 19 
0d03a     1A 1A 19 17 
0d03e     15 12 0E 0B 
0d042     05 00 FB F4 | 	byte	$12, $15, $18, $19, $1a, $1a, $19, $17, $15, $12, $0e, $0b, $05, $00, $fb, $f4
0d046     ED E6 DF D8 
0d04a     D3 CD C8 C5 
0d04e     C3 C4 C5 C7 
0d052     00 00 00 00 | 	byte	$ed, $e6, $df, $d8, $d3, $cd, $c8, $c5, $c3, $c4, $c5, $c7, $00, $00, $00, $00
0d056     05 05 00 FF 
0d05a     00 00 00 00 
0d05e     00 00 00 00 
0d062     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d066     00 00 00 00 
      ...             
0d08a     00 00 00 00 
0d08e     00 00       | 	byte	$00[42]
0d090     FA FA FB FC 
0d094     FB FA FD 00 
0d098     00 01 00 00 
0d09c     FE FC FD FC | 	byte	$fa, $fa, $fb, $fc, $fb, $fa, $fd, $00, $00, $01, $00, $00, $fe, $fc, $fd, $fc
0d0a0     FA FC 01 01 
0d0a4     01 FE 01 02 
0d0a8     01 03 FD FD 
0d0ac     00 FC 00 FD | 	byte	$fa, $fc, $01, $01, $01, $fe, $01, $02, $01, $03, $fd, $fd, $00, $fc, $00, $fd
0d0b0     FD FD 00 FB 
0d0b4     02 FD FC FD 
0d0b8     F9 FC F9 FB 
0d0bc     FA FC FB FA | 	byte	$fd, $fd, $00, $fb, $02, $fd, $fc, $fd, $f9, $fc, $f9, $fb, $fa, $fc, $fb, $fa
0d0c0     FB FE FC 00 
0d0c4     FA FD 00 01 
0d0c8     00 FE FA 00 
0d0cc     FF FA 00 FB | 	byte	$fb, $fe, $fc, $00, $fa, $fd, $00, $01, $00, $fe, $fa, $00, $ff, $fa, $00, $fb
0d0d0     00 00 01 FC 
0d0d4     03 02 03 02 
0d0d8     05 06 08 04 
0d0dc     04 05 07 07 | 	byte	$00, $00, $01, $fc, $03, $02, $03, $02, $05, $06, $08, $04, $04, $05, $07, $07
0d0e0     0A 08 06 0D 
0d0e4     0D 04 FD 1B 
0d0e8     10 FD 0D 00 
0d0ec     0D 0B 13 15 | 	byte	$0a, $08, $06, $0d, $0d, $04, $fd, $1b, $10, $fd, $0d, $00, $0d, $0b, $13, $15
0d0f0     F9 13 10 FF 
0d0f4     30 E8 15 00 
0d0f8     2A 00 15 E4 
0d0fc     FF 11 7F 50 | 	byte	$f9, $13, $10, $ff, $30, $e8, $15, $00, $2a, $00, $15, $e4, $ff, $11, $7f, $50
0d100     16 D0 CB C8 
0d104     D7 A4 2F 40 
0d108     DF 60 20 80 
0d10c     FF 7E 80 AF | 	byte	$16, $d0, $cb, $c8, $d7, $a4, $2f, $40, $df, $60, $20, $80, $ff, $7e, $80, $af
0d110     78 40 80 BF 
0d114     40 60 80 80 
0d118     7F 81 00 80 
0d11c     80 7F 80 7C | 	byte	$78, $40, $80, $bf, $40, $60, $80, $80, $7f, $81, $00, $80, $80, $7f, $80, $7c
0d120     80 80 80 80 
0d124     3F 80 9F 20 
0d128     80 80 BF 70 
0d12c     CF E0 80 77 | 	byte	$80, $80, $80, $80, $3f, $80, $9f, $20, $80, $80, $bf, $70, $cf, $e0, $80, $77
0d130     7F 7F 00 8F 
0d134     E0 80 8F 28 
0d138     CF 14 C0 80 
0d13c     83 5F 7C 24 | 	byte	$7f, $7f, $00, $8f, $e0, $80, $8f, $28, $cf, $14, $c0, $80, $83, $5f, $7c, $24
0d140     08 80 83 F8 
0d144     D3 7F 78 83 
0d148     50 C3 7F 00 
0d14c     EF C0 9F 40 | 	byte	$08, $80, $83, $f8, $d3, $7f, $78, $83, $50, $c3, $7f, $00, $ef, $c0, $9f, $40
0d150     BF 7F 57 40 
0d154     80 A2 DF 7C 
0d158     00 FF 44 3F 
0d15c     20 80 FF B0 | 	byte	$bf, $7f, $57, $40, $80, $a2, $df, $7c, $00, $ff, $44, $3f, $20, $80, $ff, $b0
0d160     57 90 5F 60 
0d164     3F C0 80 AF 
0d168     10 3F 40 9F 
0d16c     7C 9B 6C 80 | 	byte	$57, $90, $5f, $60, $3f, $c0, $80, $af, $10, $3f, $40, $9f, $7c, $9b, $6c, $80
0d170     80 87 E0 FF 
0d174     78 1F 20 3F 
0d178     00 BF 00 BF 
0d17c     30 FF 20 4F | 	byte	$80, $87, $e0, $ff, $78, $1f, $20, $3f, $00, $bf, $00, $bf, $30, $ff, $20, $4f
0d180     08 B7 FF 78 
0d184     E8 12 FF 60 
0d188     2F 40 80 28 
0d18c     FF 7F A0 A8 | 	byte	$08, $b7, $ff, $78, $e8, $12, $ff, $60, $2f, $40, $80, $28, $ff, $7f, $a0, $a8
0d190     EF 40 1F 40 
0d194     2F 60 1F C0 
0d198     9F C1 1F 6B 
0d19c     7F 20 C0 87 | 	byte	$ef, $40, $1f, $40, $2f, $60, $1f, $c0, $9f, $c1, $1f, $6b, $7f, $20, $c0, $87
0d1a0     40 1F 78 80 
0d1a4     FF 6F 7F 20 
0d1a8     AC 8F FF 74 
0d1ac     50 C0 9F 20 | 	byte	$40, $1f, $78, $80, $ff, $6f, $7f, $20, $ac, $8f, $ff, $74, $50, $c0, $9f, $20
0d1b0     FF 50 A0 80 
0d1b4     9F 17 7F 7F 
0d1b8     48 80 B7 80 
0d1bc     8F DF 60 BF | 	byte	$ff, $50, $a0, $80, $9f, $17, $7f, $7f, $48, $80, $b7, $80, $8f, $df, $60, $bf
0d1c0     30 8F 34 DD 
0d1c4     00 97 A0 BF 
0d1c8     58 20 90 9F 
0d1cc     8F 5F 40 D0 | 	byte	$30, $8f, $34, $dd, $00, $97, $a0, $bf, $58, $20, $90, $9f, $8f, $5f, $40, $d0
0d1d0     80 BF 18 42 
0d1d4     24 C0 80 80 
0d1d8     DF 60 EF 00 
0d1dc     83 D0 AF C0 | 	byte	$80, $bf, $18, $42, $24, $c0, $80, $80, $df, $60, $ef, $00, $83, $d0, $af, $c0
0d1e0     FF 10 5F C0 
0d1e4     FF 90 FF C0 
0d1e8     BF 1D 64 D0 
0d1ec     FF EB 4F E0 | 	byte	$ff, $10, $5f, $c0, $ff, $90, $ff, $c0, $bf, $1d, $64, $d0, $ff, $eb, $4f, $e0
0d1f0     9F F8 2F 7F 
0d1f4     E0 CC 8F 5F 
0d1f8     48 60 C0 EF 
0d1fc     1F 7F 7C D3 | 	byte	$9f, $f8, $2f, $7f, $e0, $cc, $8f, $5f, $48, $60, $c0, $ef, $1f, $7f, $7c, $d3
0d200     D8 A3 3F 7F 
0d204     38 52 04 FF 
0d208     7F 48 5F 20 
0d20c     A1 DF 77 20 | 	byte	$d8, $a3, $3f, $7f, $38, $52, $04, $ff, $7f, $48, $5f, $20, $a1, $df, $77, $20
0d210     07 1F 7F 7F 
0d214     24 2E 3F 40 
0d218     CF 10 EF 7F 
0d21c     00 F0 CF 7F | 	byte	$07, $1f, $7f, $7f, $24, $2e, $3f, $40, $cf, $10, $ef, $7f, $00, $f0, $cf, $7f
0d220     68 68 14 C0 
0d224     3F 20 FF 40 
0d228     FF 60 3F 00 
0d22c     AF 10 20 FA | 	byte	$68, $68, $14, $c0, $3f, $20, $ff, $40, $ff, $60, $3f, $00, $af, $10, $20, $fa
0d230     00 BF 50 81 
0d234     5F A0 E7 97 
0d238     5F 25 60 C0 
0d23c     80 80 AC FF | 	byte	$00, $bf, $50, $81, $5f, $a0, $e7, $97, $5f, $25, $60, $c0, $80, $80, $ac, $ff
0d240     40 BF E0 BF 
0d244     00 C5 B0 80 
0d248     80 CF BF 20 
0d24c     D7 20 80 A0 | 	byte	$40, $bf, $e0, $bf, $00, $c5, $b0, $80, $80, $cf, $bf, $20, $d7, $20, $80, $a0
0d250     80 EF AF 2E 
0d254     80 98 9B B5 
0d258     F7 C0 AE 88 
0d25c     9F 98 BF C0 | 	byte	$80, $ef, $af, $2e, $80, $98, $9b, $b5, $f7, $c0, $ae, $88, $9f, $98, $bf, $c0
0d260     AF 10 BB F0 
0d264     BD AC CB B2 
0d268     D7 A9 EB A4 
0d26c     BF DF 5F 00 | 	byte	$af, $10, $bb, $f0, $bd, $ac, $cb, $b2, $d7, $a9, $eb, $a4, $bf, $df, $5f, $00
0d270     97 AF E0 DB 
0d274     E0 DB C2 EF 
0d278     10 37 7F 31 
0d27c     44 B0 BF 23 | 	byte	$97, $af, $e0, $db, $e0, $db, $c2, $ef, $10, $37, $7f, $31, $44, $b0, $bf, $23
0d280     2A 08 2F 60 
0d284     DF 6E 17 7F 
0d288     78 17 24 1F 
0d28c     60 0F 40 A5 | 	byte	$2a, $08, $2f, $60, $df, $6e, $17, $7f, $78, $17, $24, $1f, $60, $0f, $40, $a5
0d290     5F 60 27 7F 
0d294     7F 57 7F 60 
0d298     30 1F 40 3F 
0d29c     7F 0F 7F 40 | 	byte	$5f, $60, $27, $7f, $7f, $57, $7f, $60, $30, $1f, $40, $3f, $7f, $0f, $7f, $40
0d2a0     72 4F 7C 00 
0d2a4     7F 7F 50 5F 
0d2a8     40 FF 62 4F 
0d2ac     74 57 64 00 | 	byte	$72, $4f, $7c, $00, $7f, $7f, $50, $5f, $40, $ff, $62, $4f, $74, $57, $64, $00
0d2b0     4C 00 67 50 
0d2b4     46 2C 4F 30 
0d2b8     24 CF 1F 2F 
0d2bc     50 08 31 E0 | 	byte	$4c, $00, $67, $50, $46, $2c, $4f, $30, $24, $cf, $1f, $2f, $50, $08, $31, $e0
0d2c0     3F 00 EF 5F 
0d2c4     30 DB 2C D0 
0d2c8     EB D4 DF 1F 
0d2cc     20 C3 F7 19 | 	byte	$3f, $00, $ef, $5f, $30, $db, $2c, $d0, $eb, $d4, $df, $1f, $20, $c3, $f7, $19
0d2d0     D0 EF 00 BF 
0d2d4     44 00 D0 BF 
0d2d8     D0 DF E0 80 
0d2dc     E7 D3 F7 18 | 	byte	$d0, $ef, $00, $bf, $44, $00, $d0, $bf, $d0, $df, $e0, $80, $e7, $d3, $f7, $18
0d2e0     C8 CF E0 90 
0d2e4     80 BF AF 0F 
0d2e8     C0 BF 90 9B 
0d2ec     8F CB C8 BF | 	byte	$c8, $cf, $e0, $90, $80, $bf, $af, $0f, $c0, $bf, $90, $9b, $8f, $cb, $c8, $bf
0d2f0     EC B4 B0 98 
0d2f4     8C AB B0 A6 
0d2f8     CB B0 BB E3 
0d2fc     C0 90 A7 A8 | 	byte	$ec, $b4, $b0, $98, $8c, $ab, $b0, $a6, $cb, $b0, $bb, $e3, $c0, $90, $a7, $a8
0d300     D7 E0 B5 A4 
0d304     B7 A8 AF CC 
0d308     DF 00 D8 B0 
0d30c     B5 C2 BB DA | 	byte	$d7, $e0, $b5, $a4, $b7, $a8, $af, $cc, $df, $00, $d8, $b0, $b5, $c2, $bb, $da
0d310     B4 BF D8 C7 
0d314     F7 E4 ED 08 
0d318     C0 DB F4 E0 
0d31c     A5 D7 E3 37 | 	byte	$b4, $bf, $d8, $c7, $f7, $e4, $ed, $08, $c0, $db, $f4, $e0, $a5, $d7, $e3, $37
0d320     48 08 F5 1E 
0d324     E0 0F 13 3B 
0d328     5C 00 1F 30 
0d32c     E0 FF 28 FB | 	byte	$48, $08, $f5, $1e, $e0, $0f, $13, $3b, $5c, $00, $1f, $30, $e0, $ff, $28, $fb
0d330     3F 3C 2F 49 
0d334     28 27 20 0B 
0d338     2B 5F 30 4F 
0d33c     40 0B 13 3F | 	byte	$3f, $3c, $2f, $49, $28, $27, $20, $0b, $2b, $5f, $30, $4f, $40, $0b, $13, $3f
0d340     40 4B 34 4F 
0d344     60 43 4A 6F 
0d348     58 64 30 2A 
0d34c     05 7F 50 7F | 	byte	$40, $4b, $34, $4f, $60, $43, $4a, $6f, $58, $64, $30, $2a, $05, $7f, $50, $7f
0d350     60 37 30 17 
0d354     54 4F 48 4B 
0d358     39 4A 67 68 
0d35c     03 4F 24 2F | 	byte	$60, $37, $30, $17, $54, $4f, $48, $4b, $39, $4a, $67, $68, $03, $4f, $24, $2f
0d360     48 28 33 1C 
0d364     37 40 38 12 
0d368     3F 30 D7 13 
0d36c     2A 10 3F 20 | 	byte	$48, $28, $33, $1c, $37, $40, $38, $12, $3f, $30, $d7, $13, $2a, $10, $3f, $20
0d370     E7 10 17 02 
0d374     1F 00 17 10 
0d378     D7 00 EF 10 
0d37c     FF 08 DB F0 | 	byte	$e7, $10, $17, $02, $1f, $00, $17, $10, $d7, $00, $ef, $10, $ff, $08, $db, $f0
0d380     CF C4 E7 D0 
0d384     EF E4 DB D8 
0d388     C6 AF 1B E0 
0d38c     DF A8 CB CD | 	byte	$cf, $c4, $e7, $d0, $ef, $e4, $db, $d8, $c6, $af, $1b, $e0, $df, $a8, $cb, $cd
0d390     EA 98 BF AD 
0d394     D7 BF D0 8F 
0d398     E9 A0 AB CB 
0d39c     D1 D5 D8 CB | 	byte	$ea, $98, $bf, $ad, $d7, $bf, $d0, $8f, $e9, $a0, $ab, $cb, $d1, $d5, $d8, $cb
0d3a0     C8 BD B0 AB 
0d3a4     A4 BF 0D F2 
0d3a8     D6 C2 A1 AF 
0d3ac     BF C5 BB E8 | 	byte	$c8, $bd, $b0, $ab, $a4, $bf, $0d, $f2, $d6, $c2, $a1, $af, $bf, $c5, $bb, $e8
0d3b0     B5 DD C3 D0 
0d3b4     C3 D4 BF DD 
0d3b8     D0 D8 EF D0 
0d3bc     CF 14 DF F0 | 	byte	$b5, $dd, $c3, $d0, $c3, $d4, $bf, $dd, $d0, $d8, $ef, $d0, $cf, $14, $df, $f0
0d3c0     CB DD EF E4 
0d3c4     1F 28 FF 15 
0d3c8     04 E8 F3 F8 
0d3cc     FD 1B 38 16 | 	byte	$cb, $dd, $ef, $e4, $1f, $28, $ff, $15, $04, $e8, $f3, $f8, $fd, $1b, $38, $16
0d3d0     3F 20 05 06 
0d3d4     15 3F 50 30 
0d3d8     0D 1F 20 3B 
0d3dc     30 2B 40 3D | 	byte	$3f, $20, $05, $06, $15, $3f, $50, $30, $0d, $1f, $20, $3b, $30, $2b, $40, $3d
0d3e0     43 59 40 2F 
0d3e4     40 1B 34 1F 
0d3e8     3B 6B 77 68 
0d3ec     18 21 07 4A | 	byte	$43, $59, $40, $2f, $40, $1b, $34, $1f, $3b, $6b, $77, $68, $18, $21, $07, $4a
0d3f0     18 2F 40 53 
0d3f4     65 64 24 32 
0d3f8     14 33 3C 24 
0d3fc     03 27 4A 5B | 	byte	$18, $2f, $40, $53, $65, $64, $24, $32, $14, $33, $3c, $24, $03, $27, $4a, $5b
0d400     54 20 1D 24 
0d404     1F 4F 39 39 
0d408     37 48 13 2B 
0d40c     00 F3 03 21 | 	byte	$54, $20, $1d, $24, $1f, $4f, $39, $39, $37, $48, $13, $2b, $00, $f3, $03, $21
0d410     1B 10 0F 32 
0d414     10 EC EE F8 
0d418     FF 10 FB F6 
0d41c     17 00 EF F3 | 	byte	$1b, $10, $0f, $32, $10, $ec, $ee, $f8, $ff, $10, $fb, $f6, $17, $00, $ef, $f3
0d420     0F 18 EE 02 
0d424     05 E0 DF 00 
0d428     FE FA E5 D7 
0d42c     F4 D4 DB DE | 	byte	$0f, $18, $ee, $02, $05, $e0, $df, $00, $fe, $fa, $e5, $d7, $f4, $d4, $db, $de
0d430     FB E0 BC CA 
0d434     ED D0 B0 BF 
0d438     EA D8 D2 BD 
0d43c     BB C0 9C CF | 	byte	$fb, $e0, $bc, $ca, $ed, $d0, $b0, $bf, $ea, $d8, $d2, $bd, $bb, $c0, $9c, $cf
0d440     DC FF 08 F0 
0d444     B2 BF C0 B1 
0d448     AC C4 BF F4 
0d44c     EF F3 E6 D0 | 	byte	$dc, $ff, $08, $f0, $b2, $bf, $c0, $b1, $ac, $c4, $bf, $f4, $ef, $f3, $e6, $d0
0d450     B5 C3 DB DC 
0d454     C4 B5 CC B8 
0d458     A7 BF D6 E7 
0d45c     F4 D3 F9 DA | 	byte	$b5, $c3, $db, $dc, $c4, $b5, $cc, $b8, $a7, $bf, $d6, $e7, $f4, $d3, $f9, $da
0d460     B8 BB B0 B7 
0d464     F0 C3 D0 C7 
0d468     E1 DF F5 D4 
0d46c     CF F5 D4 B2 | 	byte	$b8, $bb, $b0, $b7, $f0, $c3, $d0, $c7, $e1, $df, $f5, $d4, $cf, $f5, $d4, $b2
0d470     A3 CF F7 2A 
0d474     0C E0 9F F7 
0d478     EC EF 0F 3F 
0d47c     00 C8 BF FF | 	byte	$a3, $cf, $f7, $2a, $0c, $e0, $9f, $f7, $ec, $ef, $0f, $3f, $00, $c8, $bf, $ff
0d480     14 09 01 FC 
0d484     F4 13 0C 0B 
0d488     2D 10 F4 F5 
0d48c     0B 17 08 DF | 	byte	$14, $09, $01, $fc, $f4, $13, $0c, $0b, $2d, $10, $f4, $f5, $0b, $17, $08, $df
0d490     17 17 1E 10 
0d494     0A 2F 50 08 
0d498     00 E5 EF 3B 
0d49c     30 17 38 0E | 	byte	$17, $17, $1e, $10, $0a, $2f, $50, $08, $00, $e5, $ef, $3b, $30, $17, $38, $0e
0d4a0     20 1B 37 55 
0d4a4     40 0B 2C 25 
0d4a8     03 3F 30 13 
0d4ac     2F 48 2D 44 | 	byte	$20, $1b, $37, $55, $40, $0b, $2c, $25, $03, $3f, $30, $13, $2f, $48, $2d, $44
0d4b0     18 5F 40 2F 
0d4b4     1A 2A 23 3D 
0d4b8     30 33 3D 48 
0d4bc     2F 4C 28 26 | 	byte	$18, $5f, $40, $2f, $1a, $2a, $23, $3d, $30, $33, $3d, $48, $2f, $4c, $28, $26
0d4c0     29 4F 66 40 
0d4c4     3B 2E 49 28 
0d4c8     3A 18 1B 2A 
0d4cc     67 60 24 05 | 	byte	$29, $4f, $66, $40, $3b, $2e, $49, $28, $3a, $18, $1b, $2a, $67, $60, $24, $05
0d4d0     4B 48 45 40 
0d4d4     3C 20 47 20 
0d4d8     0F 5A 0A 0F 
0d4dc     3B 5C 47 40 | 	byte	$4b, $48, $45, $40, $3c, $20, $47, $20, $0f, $5a, $0a, $0f, $3b, $5c, $47, $40
0d4e0     1D 30 22 31 
0d4e4     20 1D 1F 4E 
0d4e8     32 08 FF 37 
0d4ec     38 18 F4 1F | 	byte	$1d, $30, $22, $31, $20, $1d, $1f, $4e, $32, $08, $ff, $37, $38, $18, $f4, $1f
0d4f0     33 5D 40 F1 
0d4f4     FB 0F 2F 40 
0d4f8     00 E7 FC 03 
0d4fc     1F 18 03 04 | 	byte	$33, $5d, $40, $f1, $fb, $0f, $2f, $40, $00, $e7, $fc, $03, $1f, $18, $03, $04
0d500     00 05 1B 00 
0d504     C5 E7 EA FF 
0d508     1A E0 D7 E7 
0d50c     F0 D0 B0 AE | 	byte	$00, $05, $1b, $00, $c5, $e7, $ea, $ff, $1a, $e0, $d7, $e7, $f0, $d0, $b0, $ae
0d510     D7 D2 DD F0 
0d514     E0 A6 B0 A4 
0d518     BD DF D0 BC 
0d51c     B6 98 A5 A3 | 	byte	$d7, $d2, $dd, $f0, $e0, $a6, $b0, $a4, $bd, $df, $d0, $bc, $b6, $98, $a5, $a3
0d520     BE DB CC A4 
0d524     AD B3 CC AC 
0d528     B5 92 A5 9F 
0d52c     B6 B0 B0 AB | 	byte	$be, $db, $cc, $a4, $ad, $b3, $cc, $ac, $b5, $92, $a5, $9f, $b6, $b0, $b0, $ab
0d530     AA B7 B5 B3 
0d534     B0 A9 B7 AF 
0d538     B6 B3 BA B0 
0d53c     B3 B5 B1 AF | 	byte	$aa, $b7, $b5, $b3, $b0, $a9, $b7, $af, $b6, $b3, $ba, $b0, $b3, $b5, $b1, $af
0d540     C5 B8 B0 B7 
0d544     BC C3 CC BA 
0d548     BB C8 BD D5 
0d54c     C2 CA D7 CC | 	byte	$c5, $b8, $b0, $b7, $bc, $c3, $cc, $ba, $bb, $c8, $bd, $d5, $c2, $ca, $d7, $cc
0d550     B5 CB C9 C7 
0d554     E7 FC DB E0 
0d558     BD DF EF 13 
0d55c     F0 FA E8 FD | 	byte	$b5, $cb, $c9, $c7, $e7, $fc, $db, $e0, $bd, $df, $ef, $13, $f0, $fa, $e8, $fd
0d560     F7 F0 E0 D6 
0d564     E3 27 3F 40 
0d568     2C 00 DF FF 
0d56c     17 38 18 F0 | 	byte	$f7, $f0, $e0, $d6, $e3, $27, $3f, $40, $2c, $00, $df, $ff, $17, $38, $18, $f0
0d570     0F 32 3D 39 
0d574     24 1D 28 17 
0d578     4B 39 42 37 
0d57c     30 07 25 1D | 	byte	$0f, $32, $3d, $39, $24, $1d, $28, $17, $4b, $39, $42, $37, $30, $07, $25, $1d
0d580     37 44 34 3F 
0d584     48 3F 60 48 
0d588     28 1F 3B 49 
0d58c     4B 46 29 30 | 	byte	$37, $44, $34, $3f, $48, $3f, $60, $48, $28, $1f, $3b, $49, $4b, $46, $29, $30
0d590     17 47 3A 5B 
0d594     4D 6C 42 5B 
0d598     28 1A 18 1C 
0d59c     37 58 33 55 | 	byte	$17, $47, $3a, $5b, $4d, $6c, $42, $5b, $28, $1a, $18, $1c, $37, $58, $33, $55
0d5a0     54 40 37 50 
0d5a4     53 67 58 3C 
0d5a8     37 20 1A 1F 
0d5ac     3B 4E 4F 49 | 	byte	$54, $40, $37, $50, $53, $67, $58, $3c, $37, $20, $1a, $1f, $3b, $4e, $4f, $49
0d5b0     65 72 48 30 
0d5b4     0C 17 36 28 
0d5b8     20 2F 38 23 
0d5bc     3F 28 4F 68 | 	byte	$65, $72, $48, $30, $0c, $17, $36, $28, $20, $2f, $38, $23, $3f, $28, $4f, $68
0d5c0     44 30 10 ED 
0d5c4     0F 3D 3F 38 
0d5c8     02 1F 2C 2F 
0d5cc     30 1A EA 0F | 	byte	$44, $30, $10, $ed, $0f, $3d, $3f, $38, $02, $1f, $2c, $2f, $30, $1a, $ea, $0f
0d5d0     53 4A 10 D4 
0d5d4     CC F7 18 F2 
0d5d8     F0 DF 16 10 
0d5dc     05 05 09 00 | 	byte	$53, $4a, $10, $d4, $cc, $f7, $18, $f2, $f0, $df, $16, $10, $05, $05, $09, $00
0d5e0     EA F9 D8 DD 
0d5e4     E1 07 18 09 
0d5e8     EA DD E7 F4 
0d5ec     F7 F0 E6 E4 | 	byte	$ea, $f9, $d8, $dd, $e1, $07, $18, $09, $ea, $dd, $e7, $f4, $f7, $f0, $e6, $e4
0d5f0     E7 04 E4 D2 
0d5f4     E7 E0 DB D4 
0d5f8     D7 E4 E5 C0 
0d5fc     D9 C4 CD C0 | 	byte	$e7, $04, $e4, $d2, $e7, $e0, $db, $d4, $d7, $e4, $e5, $c0, $d9, $c4, $cd, $c0
0d600     D7 E0 D0 B2 
0d604     C6 CF CC BF 
0d608     C0 A4 B8 AC 
0d60c     96 BF EA CC | 	byte	$d7, $e0, $d0, $b2, $c6, $cf, $cc, $bf, $c0, $a4, $b8, $ac, $96, $bf, $ea, $cc
0d610     C2 B0 AE BF 
0d614     D4 D6 B4 98 
0d618     A3 B3 AE A5 
0d61c     98 A7 C7 EB | 	byte	$c2, $b0, $ae, $bf, $d4, $d6, $b4, $98, $a3, $b3, $ae, $a5, $98, $a7, $c7, $eb
0d620     D4 BE B4 B0 
0d624     AF BF DF F3 
0d628     D2 C7 C8 C9 
0d62c     DC CC CF D5 | 	byte	$d4, $be, $b4, $b0, $af, $bf, $df, $f3, $d2, $c7, $c8, $c9, $dc, $cc, $cf, $d5
0d630     CA B7 CD C6 
0d634     E6 F1 F3 E8 
0d638     C8 CB D6 C8 
0d63c     C6 D7 FB 07 | 	byte	$ca, $b7, $cd, $c6, $e6, $f1, $f3, $e8, $c8, $cb, $d6, $c8, $c6, $d7, $fb, $07
0d640     00 D5 DF F0 
0d644     E8 FB 00 E2 
0d648     DF 0F 14 E4 
0d64c     D8 DF 0F 2A | 	byte	$00, $d5, $df, $f0, $e8, $fb, $00, $e2, $df, $0f, $14, $e4, $d8, $df, $0f, $2a
0d650     3B 30 14 05 
0d654     EE EF FF 2D 
0d658     32 45 20 F0 
0d65c     E3 0B 2F 3D | 	byte	$3b, $30, $14, $05, $ee, $ef, $ff, $2d, $32, $45, $20, $f0, $e3, $0b, $2f, $3d
0d660     24 1D 2B 2C 
0d664     20 0D 13 3B 
0d668     28 F8 07 2F 
0d66c     48 49 28 13 | 	byte	$24, $1d, $2b, $2c, $20, $0d, $13, $3b, $28, $f8, $07, $2f, $48, $49, $28, $13
0d670     2F 32 31 2F 
0d674     2C 3F 38 2F 
0d678     42 28 2A 33 
0d67c     4D 52 50 3C | 	byte	$2f, $32, $31, $2f, $2c, $3f, $38, $2f, $42, $28, $2a, $33, $4d, $52, $50, $3c
0d680     4B 53 64 48 
0d684     3C 3F 4F 4A 
0d688     4F 4C 20 17 
0d68c     33 55 58 4C | 	byte	$4b, $53, $64, $48, $3c, $3f, $4f, $4a, $4f, $4c, $20, $17, $33, $55, $58, $4c
0d690     47 46 30 07 
0d694     2D 57 44 18 
0d698     0D 17 4F 58 
0d69c     30 17 37 34 | 	byte	$47, $46, $30, $07, $2d, $57, $44, $18, $0d, $17, $4f, $58, $30, $17, $37, $34
0d6a0     10 F5 15 2F 
0d6a4     2D 16 09 07 
0d6a8     23 1C 08 E4 
0d6ac     E7 0F 2F 43 | 	byte	$10, $f5, $15, $2f, $2d, $16, $09, $07, $23, $1c, $08, $e4, $e7, $0f, $2f, $43
0d6b0     30 10 EA 09 
0d6b4     19 1F 10 EA 
0d6b8     FC F8 F5 FA 
0d6bc     F4 F6 F7 F0 | 	byte	$30, $10, $ea, $09, $19, $1f, $10, $ea, $fc, $f8, $f5, $fa, $f4, $f6, $f7, $f0
0d6c0     BB CC D3 FF 
0d6c4     10 00 D8 CF 
0d6c8     EB F0 D4 D8 
0d6cc     D2 D2 D6 D5 | 	byte	$bb, $cc, $d3, $ff, $10, $00, $d8, $cf, $eb, $f0, $d4, $d8, $d2, $d2, $d6, $d5
0d6d0     DF FF F0 BA 
0d6d4     B6 CB FF 0A 
0d6d8     F4 CA CC B7 
0d6dc     CF E3 03 F8 | 	byte	$df, $ff, $f0, $ba, $b6, $cb, $ff, $0a, $f4, $ca, $cc, $b7, $cf, $e3, $03, $f8
0d6e0     D6 DA D9 D2 
0d6e4     D3 E5 D8 D7 
0d6e8     D9 D9 DD EF 
0d6ec     00 E9 E4 D7 | 	byte	$d6, $da, $d9, $d2, $d3, $e5, $d8, $d7, $d9, $d9, $dd, $ef, $00, $e9, $e4, $d7
0d6f0     D0 B5 CC E7 
0d6f4     FA F2 E0 D3 
0d6f8     E9 0B 14 F4 
0d6fc     DC C9 DF E8 | 	byte	$d0, $b5, $cc, $e7, $fa, $f2, $e0, $d3, $e9, $0b, $14, $f4, $dc, $c9, $df, $e8
0d700     DA C0 DF 0F 
0d704     1A 00 EB EA 
0d708     D3 CB DB E5 
0d70c     F1 EA E4 E4 | 	byte	$da, $c0, $df, $0f, $1a, $00, $eb, $ea, $d3, $cb, $db, $e5, $f1, $ea, $e4, $e4
0d710     F5 03 06 0C 
0d714     EC C8 CB DF 
0d718     ED F9 00 E0 
0d71c     DC E7 E9 E4 | 	byte	$f5, $03, $06, $0c, $ec, $c8, $cb, $df, $ed, $f9, $00, $e0, $dc, $e7, $e9, $e4
0d720     D0 B0 C7 E7 
0d724     FF 15 00 E8 
0d728     E4 E4 E3 DC 
0d72c     DB FF 0C 00 | 	byte	$d0, $b0, $c7, $e7, $ff, $15, $00, $e8, $e4, $e4, $e3, $dc, $db, $ff, $0c, $00
0d730     F0 CA D3 D2 
0d734     C9 D7 0F 08 
0d738     03 0A EA DC 
0d73c     E3 E2 E0 E7 | 	byte	$f0, $ca, $d3, $d2, $c9, $d7, $0f, $08, $03, $0a, $ea, $dc, $e3, $e2, $e0, $e7
0d740     0B 1B 08 FB 
0d744     08 FD 12 2B 
0d748     14 12 00 FB 
0d74c     15 17 08 0F | 	byte	$0b, $1b, $08, $fb, $08, $fd, $12, $2b, $14, $12, $00, $fb, $15, $17, $08, $0f
0d750     0D 16 06 04 
0d754     0B 23 2D 3B 
0d758     38 40 2A 28 
0d75c     23 2E 25 2F | 	byte	$0d, $16, $06, $04, $0b, $23, $2d, $3b, $38, $40, $2a, $28, $23, $2e, $25, $2f
0d760     32 38 37 37 
0d764     35 47 34 2A 
0d768     3C 47 42 2A 
0d76c     31 3F 38 45 | 	byte	$32, $38, $37, $37, $35, $47, $34, $2a, $3c, $47, $42, $2a, $31, $3f, $38, $45
0d770     45 4B 44 38 
0d774     20 2B 33 2C 
0d778     18 13 37 5F 
0d77c     5C 30 01 05 | 	byte	$45, $4b, $44, $38, $20, $2b, $33, $2c, $18, $13, $37, $5f, $5c, $30, $01, $05
0d780     2F 45 40 24 
0d784     29 43 3A 2A 
0d788     1B 37 34 24 
0d78c     0F 27 2F 34 | 	byte	$2f, $45, $40, $24, $29, $43, $3a, $2a, $1b, $37, $34, $24, $0f, $27, $2f, $34
0d790     33 40 20 08 
0d794     07 36 28 1A 
0d798     1F 2D 30 28 
0d79c     04 E0 CB E7 | 	byte	$33, $40, $20, $08, $07, $36, $28, $1a, $1f, $2d, $30, $28, $04, $e0, $cb, $e7
0d7a0     FF 18 10 14 
0d7a4     00 E8 D9 E4 
0d7a8     E7 F7 F2 00 
0d7ac     E5 FF 0F 0C | 	byte	$ff, $18, $10, $14, $00, $e8, $d9, $e4, $e7, $f7, $f2, $00, $e5, $ff, $0f, $0c
0d7b0     E8 EE CC E9 
0d7b4     EF 07 01 0E 
0d7b8     F0 DC D2 EB 
0d7bc     FF 04 E0 CA | 	byte	$e8, $ee, $cc, $e9, $ef, $07, $01, $0e, $f0, $dc, $d2, $eb, $ff, $04, $e0, $ca
0d7c0     C3 D3 E3 E7 
0d7c4     FF F6 E0 BC 
0d7c8     C7 D9 E8 CB 
0d7cc     CD CD C2 BC | 	byte	$c3, $d3, $e3, $e7, $ff, $f6, $e0, $bc, $c7, $d9, $e8, $cb, $cd, $cd, $c2, $bc
0d7d0     C5 DB EC E8 
0d7d4     D8 D8 DA D6 
0d7d8     DA DD DE DD 
0d7dc     DC D9 D1 D7 | 	byte	$c5, $db, $ec, $e8, $d8, $d8, $da, $d6, $da, $dd, $de, $dd, $dc, $d9, $d1, $d7
0d7e0     E7 F6 EE DC 
0d7e4     E1 E3 EE ED 
0d7e8     EB E6 CB B8 
0d7ec     CF E1 F6 F1 | 	byte	$e7, $f6, $ee, $dc, $e1, $e3, $ee, $ed, $eb, $e6, $cb, $b8, $cf, $e1, $f6, $f1
0d7f0     EC E0 D8 C8 
0d7f4     C8 B4 BF EF 
0d7f8     1F 18 E0 AD 
0d7fc     BF E7 FF 0A | 	byte	$ec, $e0, $d8, $c8, $c8, $b4, $bf, $ef, $1f, $18, $e0, $ad, $bf, $e7, $ff, $0a
0d800     EC E9 F7 08 
0d804     F1 E0 E3 FB 
0d808     FB FA EC E9 
0d80c     07 10 08 06 | 	byte	$ec, $e9, $f7, $08, $f1, $e0, $e3, $fb, $fb, $fa, $ec, $e9, $07, $10, $08, $06
0d810     0D EC C1 D7 
0d814     FF 1E 0B 00 
0d818     F9 E8 DB DB 
0d81c     ED 07 0D F4 | 	byte	$0d, $ec, $c1, $d7, $ff, $1e, $0b, $00, $f9, $e8, $db, $db, $ed, $07, $0d, $f4
0d820     EE E1 E9 FD 
0d824     02 F3 13 11 
0d828     0D 08 00 F6 
0d82c     FA F0 EF FF | 	byte	$ee, $e1, $e9, $fd, $02, $f3, $13, $11, $0d, $08, $00, $f6, $fa, $f0, $ef, $ff
0d830     00 FD 03 0E 
0d834     0C 0D 0D 1C 
0d838     10 0E 0F 29 
0d83c     14 00 E1 EF | 	byte	$00, $fd, $03, $0e, $0c, $0d, $0d, $1c, $10, $0e, $0f, $29, $14, $00, $e1, $ef
0d840     07 27 26 14 
0d844     00 F3 0D 17 
0d848     25 10 0C 0E 
0d84c     17 29 1E 1C | 	byte	$07, $27, $26, $14, $00, $f3, $0d, $17, $25, $10, $0c, $0e, $17, $29, $1e, $1c
0d850     11 14 05 0F 
0d854     11 15 24 37 
0d858     3D 2C 0A F8 
0d85c     F3 07 1D 43 | 	byte	$11, $14, $05, $0f, $11, $15, $24, $37, $3d, $2c, $0a, $f8, $f3, $07, $1d, $43
0d860     31 3D 30 14 
0d864     06 07 12 14 
0d868     1B 4B 4C 20 
0d86c     08 1B 21 25 | 	byte	$31, $3d, $30, $14, $06, $07, $12, $14, $1b, $4b, $4c, $20, $08, $1b, $21, $25
0d870     35 28 29 1A 
0d874     12 02 F0 F1 
0d878     FD 13 2F 48 
0d87c     2A 0D 0C 1B | 	byte	$35, $28, $29, $1a, $12, $02, $f0, $f1, $fd, $13, $2f, $48, $2a, $0d, $0c, $1b
0d880     3B 4A 30 16 
0d884     00 E2 E5 F5 
0d888     13 3D 30 0C 
0d88c     E9 E9 F7 1D | 	byte	$3b, $4a, $30, $16, $00, $e2, $e5, $f5, $13, $3d, $30, $0c, $e9, $e9, $f7, $1d
0d890     2B 44 34 19 
0d894     06 00 F0 FA 
0d898     0F 12 08 FA 
0d89c     F9 03 15 27 | 	byte	$2b, $44, $34, $19, $06, $00, $f0, $fa, $0f, $12, $08, $fa, $f9, $03, $15, $27
0d8a0     33 22 11 00 
0d8a4     07 0D 0C 09 
0d8a8     08 F0 F3 17 
0d8ac     3D 3F 40 14 | 	byte	$33, $22, $11, $00, $07, $0d, $0c, $09, $08, $f0, $f3, $17, $3d, $3f, $40, $14
0d8b0     F8 E4 E2 F5 
0d8b4     19 19 0A FA 
0d8b8     FF 0F 0E 13 
0d8bc     1A 22 10 F6 | 	byte	$f8, $e4, $e2, $f5, $19, $19, $0a, $fa, $ff, $0f, $0e, $13, $1a, $22, $10, $f6
0d8c0     F2 ED F7 0F 
0d8c4     1B 14 04 EC 
0d8c8     CC DD F3 FB 
0d8cc     04 00 F0 F5 | 	byte	$f2, $ed, $f7, $0f, $1b, $14, $04, $ec, $cc, $dd, $f3, $fb, $04, $00, $f0, $f5
0d8d0     F0 F6 FA ED 
0d8d4     EE DC E2 F2 
0d8d8     FD F2 EE F5 
0d8dc     EA E5 EF E7 | 	byte	$f0, $f6, $fa, $ed, $ee, $dc, $e2, $f2, $fd, $f2, $ee, $f5, $ea, $e5, $ef, $e7
0d8e0     E0 D9 FB 08 
0d8e4     F9 F2 E7 DA 
0d8e8     DB D8 D4 C4 
0d8ec     CD E8 E0 D5 | 	byte	$e0, $d9, $fb, $08, $f9, $f2, $e7, $da, $db, $d8, $d4, $c4, $cd, $e8, $e0, $d5
0d8f0     DB D9 DC DB 
0d8f4     DC C9 CF D4 
0d8f8     D8 D9 D5 C0 
0d8fc     C5 B8 C7 E3 | 	byte	$db, $d9, $dc, $db, $dc, $c9, $cf, $d4, $d8, $d9, $d5, $c0, $c5, $b8, $c7, $e3
0d900     FE F8 EC E8 
0d904     EA EB E4 CA 
0d908     C1 CB E5 E7 
0d90c     E8 C4 B0 B4 | 	byte	$fe, $f8, $ec, $e8, $ea, $eb, $e4, $ca, $c1, $cb, $e5, $e7, $e8, $c4, $b0, $b4
0d910     D7 E5 E9 ED 
0d914     DF F5 F4 E4 
0d918     DA CF D2 C7 
0d91c     E6 E4 D8 D4 | 	byte	$d7, $e5, $e9, $ed, $df, $f5, $f4, $e4, $da, $cf, $d2, $c7, $e6, $e4, $d8, $d4
0d920     CA B2 BF EB 
0d924     07 0A 0A 00 
0d928     D8 D3 EF 12 
0d92c     14 E8 E7 09 | 	byte	$ca, $b2, $bf, $eb, $07, $0a, $0a, $00, $d8, $d3, $ef, $12, $14, $e8, $e7, $09
0d930     2F 33 08 D0 
0d934     D5 E7 FD FD 
0d938     08 02 F6 F8 
0d93c     F3 F8 FD 33 | 	byte	$2f, $33, $08, $d0, $d5, $e7, $fd, $fd, $08, $02, $f6, $f8, $f3, $f8, $fd, $33
0d940     39 20 E2 E6 
0d944     07 14 EC E1 
0d948     FF 2B 32 18 
0d94c     17 2B 27 10 | 	byte	$39, $20, $e2, $e6, $07, $14, $ec, $e1, $ff, $2b, $32, $18, $17, $2b, $27, $10
0d950     08 00 15 2B 
0d954     34 26 31 2C 
0d958     2B 23 26 43 
0d95c     45 30 18 03 | 	byte	$08, $00, $15, $2b, $34, $26, $31, $2c, $2b, $23, $26, $43, $45, $30, $18, $03
0d960     0B 1C 26 27 
0d964     29 1C 1C 18 
0d968     2B 36 18 17 
0d96c     2B 3D 40 2E | 	byte	$0b, $1c, $26, $27, $29, $1c, $1c, $18, $2b, $36, $18, $17, $2b, $3d, $40, $2e
0d970     28 27 24 08 
0d974     09 17 33 3A 
0d978     31 30 1C 10 
0d97c     01 07 0D 2B | 	byte	$28, $27, $24, $08, $09, $17, $33, $3a, $31, $30, $1c, $10, $01, $07, $0d, $2b
0d980     32 2C 28 1E 
0d984     10 07 29 24 
0d988     1B 1B 18 05 
0d98c     05 07 0D 1F | 	byte	$32, $2c, $28, $1e, $10, $07, $29, $24, $1b, $1b, $18, $05, $05, $07, $0d, $1f
0d990     37 34 2C 19 
0d994     00 D0 CF FD 
0d998     2B 38 22 24 
0d99c     2A 18 13 00 | 	byte	$37, $34, $2c, $19, $00, $d0, $cf, $fd, $2b, $38, $22, $24, $2a, $18, $13, $00
0d9a0     E4 F7 1F 44 
0d9a4     32 15 01 F8 
0d9a8     F2 ED FF 19 
0d9ac     10 F9 FE 0B | 	byte	$e4, $f7, $1f, $44, $32, $15, $01, $f8, $f2, $ed, $ff, $19, $10, $f9, $fe, $0b
0d9b0     17 0C EC E5 
0d9b4     F7 1A 11 00 
0d9b8     F2 FF 16 0C 
0d9bc     0A 0E 00 E8 | 	byte	$17, $0c, $ec, $e5, $f7, $1a, $11, $00, $f2, $ff, $16, $0c, $0a, $0e, $00, $e8
0d9c0     F7 05 0F 08 
0d9c4     06 00 E9 F7 
0d9c8     09 08 F8 E7 
0d9cc     F3 0B 1B 12 | 	byte	$f7, $05, $0f, $08, $06, $00, $e9, $f7, $09, $08, $f8, $e7, $f3, $0b, $1b, $12
0d9d0     1D 1C 00 D2 
0d9d4     D6 EF 01 EA 
0d9d8     E9 F3 0A 16 
0d9dc     1F 18 E3 DA | 	byte	$1d, $1c, $00, $d2, $d6, $ef, $01, $ea, $e9, $f3, $0a, $16, $1f, $18, $e3, $da
0d9e0     EF 17 16 00 
0d9e4     EB D9 DF FF 
0d9e8     06 F6 F7 0D 
0d9ec     2F 20 00 E3 | 	byte	$ef, $17, $16, $00, $eb, $d9, $df, $ff, $06, $f6, $f7, $0d, $2f, $20, $00, $e3
0d9f0     E5 EB F0 E8 
0d9f4     EB E0 D9 F7 
0d9f8     0B F9 F0 F3 
0d9fc     ED E8 DC F7 | 	byte	$e5, $eb, $f0, $e8, $eb, $e0, $d9, $f7, $0b, $f9, $f0, $f3, $ed, $e8, $dc, $f7
0da00     09 16 01 F8 
0da04     F4 07 17 04 
0da08     EC DC E4 EF 
0da0c     F8 F9 EC F5 | 	byte	$09, $16, $01, $f8, $f4, $07, $17, $04, $ec, $dc, $e4, $ef, $f8, $f9, $ec, $f5
0da10     0F 1A 00 E0 
0da14     D8 CF E2 E8 
0da18     EB FB 29 24 
0da1c     10 E4 D4 CF | 	byte	$0f, $1a, $00, $e0, $d8, $cf, $e2, $e8, $eb, $fb, $29, $24, $10, $e4, $d4, $cf
0da20     E3 FB 10 F0 
0da24     D5 CF DD F5 
0da28     F9 FA EC DE 
0da2c     DA E5 E7 E4 | 	byte	$e3, $fb, $10, $f0, $d5, $cf, $dd, $f5, $f9, $fa, $ec, $de, $da, $e5, $e7, $e4
0da30     D0 D3 DD DE 
0da34     EB 02 05 F1 
0da38     E0 DB DF DA 
0da3c     E2 EF FC E8 | 	byte	$d0, $d3, $dd, $de, $eb, $02, $05, $f1, $e0, $db, $df, $da, $e2, $ef, $fc, $e8
0da40     D8 D8 EB ED 
0da44     F1 03 17 06 
0da48     F2 E4 D3 D1 
0da4c     D6 DF F5 00 | 	byte	$d8, $d8, $eb, $ed, $f1, $03, $17, $06, $f2, $e4, $d3, $d1, $d6, $df, $f5, $00
0da50     F5 F3 F4 E5 
0da54     D8 DB FF 17 
0da58     04 E8 DA DB 
0da5c     ED FF 0D 08 | 	byte	$f5, $f3, $f4, $e5, $d8, $db, $ff, $17, $04, $e8, $da, $db, $ed, $ff, $0d, $08
0da60     F8 E8 E6 E7 
0da64     F5 FD 06 FE 
0da68     0F 2D 32 04 
0da6c     E1 EA FB 1F | 	byte	$f8, $e8, $e6, $e7, $f5, $fd, $06, $fe, $0f, $2d, $32, $04, $e1, $ea, $fb, $1f
0da70     2B 24 18 13 
0da74     11 05 06 06 
0da78     05 04 05 0B 
0da7c     11 0D 13 2F | 	byte	$2b, $24, $18, $13, $11, $05, $06, $06, $05, $04, $05, $0b, $11, $0d, $13, $2f
0da80     41 30 04 EF 
0da84     F3 05 15 1F 
0da88     13 00 05 08 
0da8c     0F 08 07 0C | 	byte	$41, $30, $04, $ef, $f3, $05, $15, $1f, $13, $00, $05, $08, $0f, $08, $07, $0c
0da90     0F 1B 2F 38 
0da94     2C 10 F8 EE 
0da98     FF 1D 26 14 
0da9c     0F 18 18 16 | 	byte	$0f, $1b, $2f, $38, $2c, $10, $f8, $ee, $ff, $1d, $26, $14, $0f, $18, $18, $16
0daa0     0F 19 26 20 
0daa4     0C F4 F3 08 
0daa8     0E 0B 13 0F 
0daac     08 00 F8 F5 | 	byte	$0f, $19, $26, $20, $0c, $f4, $f3, $08, $0e, $0b, $13, $0f, $08, $00, $f8, $f5
0dab0     F8 F8 FF 04 
0dab4     07 13 1D 10 
0dab8     F8 ED F7 04 
0dabc     04 FF 07 1A | 	byte	$f8, $f8, $ff, $04, $07, $13, $1d, $10, $f8, $ed, $f7, $04, $04, $ff, $07, $1a
0dac0     19 0C F8 FD 
0dac4     04 15 1A 0C 
0dac8     FB FC 05 01 
0dacc     02 0F 1A 19 | 	byte	$19, $0c, $f8, $fd, $04, $15, $1a, $0c, $fb, $fc, $05, $01, $02, $0f, $1a, $19
0dad0     10 F5 03 27 
0dad4     26 20 0C 00 
0dad8     FA E2 E5 0B 
0dadc     2F 3B 28 08 | 	byte	$10, $f5, $03, $27, $26, $20, $0c, $00, $fa, $e2, $e5, $0b, $2f, $3b, $28, $08
0dae0     05 17 1B 04 
0dae4     FB 0A 17 1F 
0dae8     31 2B 1A 02 
0daec     F2 FD 17 2A | 	byte	$05, $17, $1b, $04, $fb, $0a, $17, $1f, $31, $2b, $1a, $02, $f2, $fd, $17, $2a
0daf0     20 0C F8 F7 
0daf4     15 26 24 14 
0daf8     12 0D 03 0F 
0dafc     27 20 13 12 | 	byte	$20, $0c, $f8, $f7, $15, $26, $24, $14, $12, $0d, $03, $0f, $27, $20, $13, $12
0db00     06 0E 0B 17 
0db04     1F 1B 04 00 
0db08     0B 19 24 11 
0db0c     02 FB FF 0C | 	byte	$06, $0e, $0b, $17, $1f, $1b, $04, $00, $0b, $19, $24, $11, $02, $fb, $ff, $0c
0db10     0C 04 04 F2 
0db14     F1 EA EC EF 
0db18     EF F3 07 1D 
0db1c     10 F0 DC D6 | 	byte	$0c, $04, $04, $f2, $f1, $ea, $ec, $ef, $ef, $f3, $07, $1d, $10, $f0, $dc, $d6
0db20     D7 D4 DF EF 
0db24     FD FA E4 DC 
0db28     E3 F7 FD F0 
0db2c     DE E5 F1 EA | 	byte	$d7, $d4, $df, $ef, $fd, $fa, $e4, $dc, $e3, $f7, $fd, $f0, $de, $e5, $f1, $ea
0db30     F7 F5 E8 DA 
0db34     D8 E1 F7 F8 
0db38     F0 DC CE D9 
0db3c     E7 E5 D8 D9 | 	byte	$f7, $f5, $e8, $da, $d8, $e1, $f7, $f8, $f0, $dc, $ce, $d9, $e7, $e5, $d8, $d9
0db40     DE E9 F5 E2 
0db44     D0 C0 C5 E3 
0db48     F1 EC DC D0 
0db4c     CB E3 EF EF | 	byte	$de, $e9, $f5, $e2, $d0, $c0, $c5, $e3, $f1, $ec, $dc, $d0, $cb, $e3, $ef, $ef
0db50     EA EB F2 E9 
0db54     C8 B3 BB D7 
0db58     FF 08 F0 D9 
0db5c     D0 CD DF EF | 	byte	$ea, $eb, $f2, $e9, $c8, $b3, $bb, $d7, $ff, $08, $f0, $d9, $d0, $cd, $df, $ef
0db60     07 08 FA E4 
0db64     D3 DF FF 0D 
0db68     0B 00 E0 B9 
0db6c     B1 C6 E7 FB | 	byte	$07, $08, $fa, $e4, $d3, $df, $ff, $0d, $0b, $00, $e0, $b9, $b1, $c6, $e7, $fb
0db70     F7 02 04 00 
0db74     FB 07 0F 10 
0db78     05 0B 15 09 
0db7c     01 06 0A 11 | 	byte	$f7, $02, $04, $00, $fb, $07, $0f, $10, $05, $0b, $15, $09, $01, $06, $0a, $11
0db80     0E 1B 2F 38 
0db84     24 11 07 1B 
0db88     27 26 2A 22 
0db8c     0E 08 07 12 | 	byte	$0e, $1b, $2f, $38, $24, $11, $07, $1b, $27, $26, $2a, $22, $0e, $08, $07, $12
0db90     1F 33 36 33 
0db94     26 24 20 0D 
0db98     16 1D 1A 1A 
0db9c     1A 22 25 1C | 	byte	$1f, $33, $36, $33, $26, $24, $20, $0d, $16, $1d, $1a, $1a, $1a, $22, $25, $1c
0dba0     0D 11 1A 25 
0dba4     24 1B 17 19 
0dba8     23 1A 14 11 
0dbac     0F 16 23 2B | 	byte	$0d, $11, $1a, $25, $24, $1b, $17, $19, $23, $1a, $14, $11, $0f, $16, $23, $2b
0dbb0     28 28 12 12 
0dbb4     15 0A FA F8 
0dbb8     FA FF 0E 17 
0dbbc     1B 1B 10 02 | 	byte	$28, $28, $12, $12, $15, $0a, $fa, $f8, $fa, $ff, $0e, $17, $1b, $1b, $10, $02
0dbc0     F6 FB FB FB 
0dbc4     05 12 12 04 
0dbc8     F3 F3 F9 FF 
0dbcc     13 15 1E 1C | 	byte	$f6, $fb, $fb, $fb, $05, $12, $12, $04, $f3, $f3, $f9, $ff, $13, $15, $1e, $1c
0dbd0     12 10 00 E8 
0dbd4     EF 0B 27 24 
0dbd8     10 08 03 05 
0dbdc     12 0E 03 F4 | 	byte	$12, $10, $00, $e8, $ef, $0b, $27, $24, $10, $08, $03, $05, $12, $0e, $03, $f4
0dbe0     04 08 0B 15 
0dbe4     12 10 06 F8 
0dbe8     F3 F7 0D 12 
0dbec     08 00 03 F8 | 	byte	$04, $08, $0b, $15, $12, $10, $06, $f8, $f3, $f7, $0d, $12, $08, $00, $03, $f8
0dbf0     F6 F1 EE 09 
0dbf4     14 08 F3 F7 
0dbf8     F8 03 F8 EC 
0dbfc     EB FD 17 27 | 	byte	$f6, $f1, $ee, $09, $14, $08, $f3, $f7, $f8, $03, $f8, $ec, $eb, $fd, $17, $27
0dc00     20 14 10 0C 
0dc04     F8 05 17 1E 
0dc08     14 10 F4 FF 
0dc0c     11 10 FC F2 | 	byte	$20, $14, $10, $0c, $f8, $05, $17, $1e, $14, $10, $f4, $ff, $11, $10, $fc, $f2
0dc10     FF 17 14 0F 
0dc14     10 08 0C 08 
0dc18     FC 03 07 08 
0dc1c     0F 06 0E 08 | 	byte	$ff, $17, $14, $0f, $10, $08, $0c, $08, $fc, $03, $07, $08, $0f, $06, $0e, $08
0dc20     F0 E9 F0 FD 
0dc24     F8 EC F3 FF 
0dc28     1F 10 02 01 
0dc2c     02 07 0F 00 | 	byte	$f0, $e9, $f0, $fd, $f8, $ec, $f3, $ff, $1f, $10, $02, $01, $02, $07, $0f, $00
0dc30     FB FF FA 05 
0dc34     0D 17 10 F8 
0dc38     E0 E0 E7 F2 
0dc3c     FB 0E 09 19 | 	byte	$fb, $ff, $fa, $05, $0d, $17, $10, $f8, $e0, $e0, $e7, $f2, $fb, $0e, $09, $19
0dc40     14 02 E2 D1 
0dc44     CA DE E3 E6 
0dc48     DC E6 F3 EE 
0dc4c     E4 DD DB DD | 	byte	$14, $02, $e2, $d1, $ca, $de, $e3, $e6, $dc, $e6, $f3, $ee, $e4, $dd, $db, $dd
0dc50     EB F6 F4 E4 
0dc54     D5 DA DD D8 
0dc58     D6 DE E9 ED 
0dc5c     E5 E2 E1 DE | 	byte	$eb, $f6, $f4, $e4, $d5, $da, $dd, $d8, $d6, $de, $e9, $ed, $e5, $e2, $e1, $de
0dc60     E0 D8 D1 DA 
0dc64     D9 E2 E7 ED 
0dc68     F3 F0 E0 CD 
0dc6c     C0 D3 E7 ED | 	byte	$e0, $d8, $d1, $da, $d9, $e2, $e7, $ed, $f3, $f0, $e0, $cd, $c0, $d3, $e7, $ed
0dc70     F7 00 00 E0 
0dc74     D5 E1 F3 F8 
0dc78     EA E6 E6 EB 
0dc7c     F3 F6 02 00 | 	byte	$f7, $00, $00, $e0, $d5, $e1, $f3, $f8, $ea, $e6, $e6, $eb, $f3, $f6, $02, $00
0dc80     F0 DF F7 0F 
0dc84     10 F2 E5 EF 
0dc88     FB FD FA FA 
0dc8c     F5 F8 F0 E6 | 	byte	$f0, $df, $f7, $0f, $10, $f2, $e5, $ef, $fb, $fd, $fa, $fa, $f5, $f8, $f0, $e6
0dc90     E8 F7 0F 16 
0dc94     15 08 FC F8 
0dc98     F8 01 0F 12 
0dc9c     0B 00 F3 EF | 	byte	$e8, $f7, $0f, $16, $15, $08, $fc, $f8, $f8, $01, $0f, $12, $0b, $00, $f3, $ef
0dca0     05 15 17 12 
0dca4     0E 00 F0 F4 
0dca8     F5 F7 F7 FC 
0dcac     FF 02 03 03 | 	byte	$05, $15, $17, $12, $0e, $00, $f0, $f4, $f5, $f7, $f7, $fc, $ff, $02, $03, $03
0dcb0     FC 05 11 1C 
0dcb4     18 10 04 04 
0dcb8     FE 04 0F 11 
0dcbc     08 F6 E8 ED | 	byte	$fc, $05, $11, $1c, $18, $10, $04, $04, $fe, $04, $0f, $11, $08, $f6, $e8, $ed
0dcc0     FE 17 19 05 
0dcc4     F4 FB 00 0A 
0dcc8     0B 00 F5 FB 
0dccc     0B 15 23 18 | 	byte	$fe, $17, $19, $05, $f4, $fb, $00, $0a, $0b, $00, $f5, $fb, $0b, $15, $23, $18
0dcd0     00 F1 F3 0F 
0dcd4     1F 22 18 09 
0dcd8     05 00 FF 03 
0dcdc     09 15 15 19 | 	byte	$00, $f1, $f3, $0f, $1f, $22, $18, $09, $05, $00, $ff, $03, $09, $15, $15, $19
0dce0     1B 19 20 24 
0dce4     1E 09 0A 13 
0dce8     21 29 24 1B 
0dcec     16 19 1F 24 | 	byte	$1b, $19, $20, $24, $1e, $09, $0a, $13, $21, $29, $24, $1b, $16, $19, $1f, $24
0dcf0     1C 0E 0E 0F 
0dcf4     1F 2B 26 17 
0dcf8     1D 19 13 12 
0dcfc     19 25 2C 33 | 	byte	$1c, $0e, $0e, $0f, $1f, $2b, $26, $17, $1d, $19, $13, $12, $19, $25, $2c, $33
0dd00     2D 1C 12 0E 
0dd04     0C 18 1B 21 
0dd08     20 15 14 11 
0dd0c     14 23 24 22 | 	byte	$2d, $1c, $12, $0e, $0c, $18, $1b, $21, $20, $15, $14, $11, $14, $23, $24, $22
0dd10     20 18 10 12 
0dd14     08 0B 0C 16 
0dd18     14 06 13 2B 
0dd1c     2C 20 00 F3 | 	byte	$20, $18, $10, $12, $08, $0b, $0c, $16, $14, $06, $13, $2b, $2c, $20, $00, $f3
0dd20     FD 19 20 1A 
0dd24     18 0A 0D 18 
0dd28     14 04 F8 F6 
0dd2c     07 0D 16 15 | 	byte	$fd, $19, $20, $1a, $18, $0a, $0d, $18, $14, $04, $f8, $f6, $07, $0d, $16, $15
0dd30     0D 13 17 18 
0dd34     18 0C 02 FD 
0dd38     00 07 0B 05 
0dd3c     05 06 FA F7 | 	byte	$0d, $13, $17, $18, $18, $0c, $02, $fd, $00, $07, $0b, $05, $05, $06, $fa, $f7
0dd40     FD 06 02 FE 
0dd44     F8 FD 09 00 
0dd48     F1 E2 E5 EB 
0dd4c     FB 04 01 F6 | 	byte	$fd, $06, $02, $fe, $f8, $fd, $09, $00, $f1, $e2, $e5, $eb, $fb, $04, $01, $f6
0dd50     FD FA F4 F1 
0dd54     F6 F8 F9 F7 
0dd58     FA F9 F5 E9 
0dd5c     E2 DE F6 07 | 	byte	$fd, $fa, $f4, $f1, $f6, $f8, $f9, $f7, $fa, $f9, $f5, $e9, $e2, $de, $f6, $07
0dd60     FC F4 F2 FB 
0dd64     F8 EC E3 DF 
0dd68     EA F3 F5 EB 
0dd6c     E6 E9 ED F2 | 	byte	$fc, $f4, $f2, $fb, $f8, $ec, $e3, $df, $ea, $f3, $f5, $eb, $e6, $e9, $ed, $f2
0dd70     02 F1 E0 D5 
0dd74     D6 CE D5 E7 
0dd78     F3 F9 F9 02 
0dd7c     09 06 FC EB | 	byte	$02, $f1, $e0, $d5, $d6, $ce, $d5, $e7, $f3, $f9, $f9, $02, $09, $06, $fc, $eb
0dd80     E9 ED EA DC 
0dd84     D0 CF DF EF 
0dd88     E6 DD E5 FD 
0dd8c     00 F4 F1 F2 | 	byte	$e9, $ed, $ea, $dc, $d0, $cf, $df, $ef, $e6, $dd, $e5, $fd, $00, $f4, $f1, $f2
0dd90     F0 F1 EF E8 
0dd94     D7 D3 DC EF 
0dd98     FA F7 F4 F4 
0dd9c     FD 00 FA ED | 	byte	$f0, $f1, $ef, $e8, $d7, $d3, $dc, $ef, $fa, $f7, $f4, $f4, $fd, $00, $fa, $ed
0dda0     ED E9 F3 F8 
0dda4     FF 02 04 FD 
0dda8     00 06 05 03 
0ddac     00 F5 F5 07 | 	byte	$ed, $e9, $f3, $f8, $ff, $02, $04, $fd, $00, $06, $05, $03, $00, $f5, $f5, $07
0ddb0     14 0C 02 00 
0ddb4     F2 EB EC EF 
0ddb8     FF 08 FC 13 
0ddbc     18 FC 07 10 | 	byte	$14, $0c, $02, $00, $f2, $eb, $ec, $ef, $ff, $08, $fc, $13, $18, $fc, $07, $10
0ddc0     FA FA F7 14 
0ddc4     00 17 00 FF 
0ddc8     10 F1 FF 0B 
0ddcc     14 FC 08 07 | 	byte	$fa, $fa, $f7, $14, $00, $17, $00, $ff, $10, $f1, $ff, $0b, $14, $fc, $08, $07
0ddd0     08 EB 07 00 
0ddd4     F7 00 FA 14 
0ddd8     02 0B F4 0B 
0dddc     00 EF 08 F9 | 	byte	$08, $eb, $07, $00, $f7, $00, $fa, $14, $02, $0b, $f4, $0b, $00, $ef, $08, $f9
0dde0     03 FE 08 0D 
0dde4     00 F7 0E 0F 
0dde8     18 E7 03 FD 
0ddec     0E FC 08 06 | 	byte	$03, $fe, $08, $0d, $00, $f7, $0e, $0f, $18, $e7, $03, $fd, $0e, $fc, $08, $06
0ddf0     09 09 00 17 
0ddf4     0A 17 22 23 
0ddf8     18 0C F8 05 
0ddfc     0B 0A FA 05 | 	byte	$09, $09, $00, $17, $0a, $17, $22, $23, $18, $0c, $f8, $05, $0b, $0a, $fa, $05
0de00     11 18 02 03 
0de04     00 F0 07 10 
0de08     07 16 08 04 
0de0c     EF 10 F6 FF | 	byte	$11, $18, $02, $03, $00, $f0, $07, $10, $07, $16, $08, $04, $ef, $10, $f6, $ff
0de10     08 01 F9 F7 
0de14     FD 0C 16 0C 
0de18     0D 0A 09 0A 
0de1c     08 F7 0A 00 | 	byte	$08, $01, $f9, $f7, $fd, $0c, $16, $0c, $0d, $0a, $09, $0a, $08, $f7, $0a, $00
0de20     03 02 03 FA 
0de24     07 0C 16 0A 
0de28     03 08 0F 0E 
0de2c     0E 01 03 F8 | 	byte	$03, $02, $03, $fa, $07, $0c, $16, $0a, $03, $08, $0f, $0e, $0e, $01, $03, $f8
0de30     FF 0D 0B 10 
0de34     0A FA FF 04 
0de38     16 0C 0F 08 
0de3c     04 0F 10 FD | 	byte	$ff, $0d, $0b, $10, $0a, $fa, $ff, $04, $16, $0c, $0f, $08, $04, $0f, $10, $fd
0de40     27 08 0D 04 
0de44     0A 15 18 00 
0de48     00 F0 F1 05 
0de4c     12 13 10 0F | 	byte	$27, $08, $0d, $04, $0a, $15, $18, $00, $00, $f0, $f1, $05, $12, $13, $10, $0f
0de50     0C FB F8 F1 
0de54     03 0B 09 08 
0de58     00 FB 00 E8 
0de5c     FD 10 04 11 | 	byte	$0c, $fb, $f8, $f1, $03, $0b, $09, $08, $00, $fb, $00, $e8, $fd, $10, $04, $11
0de60     03 FC FB 02 
0de64     F6 07 FE F0 
0de68     EF 04 F9 00 
0de6c     FA F8 E8 E1 | 	byte	$03, $fc, $fb, $02, $f6, $07, $fe, $f0, $ef, $04, $f9, $00, $fa, $f8, $e8, $e1
0de70     E9 F5 04 FC 
0de74     07 F0 FA E5 
0de78     FC E8 F3 DC 
0de7c     F0 E7 0E F0 | 	byte	$e9, $f5, $04, $fc, $07, $f0, $fa, $e5, $fc, $e8, $f3, $dc, $f0, $e7, $0e, $f0
0de80     04 E0 FA EB 
0de84     FF FB FD 00 
0de88     F1 F5 F4 EB 
0de8c     08 F7 0A F7 | 	byte	$04, $e0, $fa, $eb, $ff, $fb, $fd, $00, $f1, $f5, $f4, $eb, $08, $f7, $0a, $f7
0de90     00 EB F2 F5 
0de94     E8 E5 09 16 
0de98     10 F9 F0 EB 
0de9c     04 05 0F 10 | 	byte	$00, $eb, $f2, $f5, $e8, $e5, $09, $16, $10, $f9, $f0, $eb, $04, $05, $0f, $10
0dea0     0B 10 F4 0F 
0dea4     FB 0C FD 0A 
0dea8     F4 0B 14 16 
0deac     0E 08 F3 07 | 	byte	$0b, $10, $f4, $0f, $fb, $0c, $fd, $0a, $f4, $0b, $14, $16, $0e, $08, $f3, $07
0deb0     04 05 06 08 
0deb4     EF 08 F4 0F 
0deb8     06 0E 00 0F 
0debc     00 FB F0 F3 | 	byte	$04, $05, $06, $08, $ef, $08, $f4, $0f, $06, $0e, $00, $0f, $00, $fb, $f0, $f3
0dec0     F9 FF 09 0B 
0dec4     0A F2 F3 FF 
0dec8     0B 06 05 00 
0decc     FB 08 07 08 | 	byte	$f9, $ff, $09, $0b, $0a, $f2, $f3, $ff, $0b, $06, $05, $00, $fb, $08, $07, $08
0ded0     06 0C 07 0C 
0ded4     03 FC FD 01 
0ded8     F4 F3 06 03 
0dedc     08 F4 F8 FD | 	byte	$06, $0c, $07, $0c, $03, $fc, $fd, $01, $f4, $f3, $06, $03, $08, $f4, $f8, $fd
0dee0     12 00 F3 EE 
0dee4     F8 EF 00 E1 
0dee8     F0 ED 00 FB 
0deec     E4 ED FC FB | 	byte	$12, $00, $f3, $ee, $f8, $ef, $00, $e1, $f0, $ed, $00, $fb, $e4, $ed, $fc, $fb
0def0     05 0F 0A 0F 
0def4     08 0F 09 02 
0def8     EC FB F0 FB 
0defc     00 F9 F0 EF | 	byte	$05, $0f, $0a, $0f, $08, $0f, $09, $02, $ec, $fb, $f0, $fb, $00, $f9, $f0, $ef
0df00     00 FB 09 05 
0df04     06 0C F8 ED 
0df08     F9 EC F4 F2 
0df0c     F3 F8 FB FA | 	byte	$00, $fb, $09, $05, $06, $0c, $f8, $ed, $f9, $ec, $f4, $f2, $f3, $f8, $fb, $fa
0df10     F9 F9 F0 F9 
0df14     FF 05 0D 0A 
0df18     FA ED E0 F5 
0df1c     06 09 09 00 | 	byte	$f9, $f9, $f0, $f9, $ff, $05, $0d, $0a, $fa, $ed, $e0, $f5, $06, $09, $09, $00
0df20     07 10 05 00 
0df24     F1 05 15 0C 
0df28     01 E8 EF FC 
0df2c     0F 12 1D 15 | 	byte	$07, $10, $05, $00, $f1, $05, $15, $0c, $01, $e8, $ef, $fc, $0f, $12, $1d, $15
0df30     13 08 F6 F5 
0df34     FA F7 0D 0A 
0df38     1E 0D 18 05 
0df3c     FC F5 FA 01 | 	byte	$13, $08, $f6, $f5, $fa, $f7, $0d, $0a, $1e, $0d, $18, $05, $fc, $f5, $fa, $01
0df40     0B 09 08 0F 
0df44     0C 15 14 10 
0df48     05 05 00 05 
0df4c     08 17 0F 12 | 	byte	$0b, $09, $08, $0f, $0c, $15, $14, $10, $05, $05, $00, $05, $08, $17, $0f, $12
0df50     09 16 01 12 
0df54     07 10 FD 17 
0df58     17 24 01 10 
0df5c     FC 0B 0B 15 | 	byte	$09, $16, $01, $12, $07, $10, $fd, $17, $17, $24, $01, $10, $fc, $0b, $0b, $15
0df60     0F 14 06 11 
0df64     0A FD FD FC 
0df68     F7 F4 E9 F1 
0df6c     07 08 07 04 | 	byte	$0f, $14, $06, $11, $0a, $fd, $fd, $fc, $f7, $f4, $e9, $f1, $07, $08, $07, $04
0df70     FE 0F 1F 15 
0df74     10 0A 04 FD 
0df78     FC FA 00 FE 
0df7c     02 F7 05 04 | 	byte	$fe, $0f, $1f, $15, $10, $0a, $04, $fd, $fc, $fa, $00, $fe, $02, $f7, $05, $04
0df80     13 08 13 0B 
0df84     05 01 F3 F6 
0df88     F5 FD 07 07 
0df8c     02 F7 01 F8 | 	byte	$13, $08, $13, $0b, $05, $01, $f3, $f6, $f5, $fd, $07, $07, $02, $f7, $01, $f8
0df90     FD F6 F8 F7 
0df94     F8 F7 00 00 
0df98     F7 F8 F3 FF 
0df9c     00 FF F9 FD | 	byte	$fd, $f6, $f8, $f7, $f8, $f7, $00, $00, $f7, $f8, $f3, $ff, $00, $ff, $f9, $fd
0dfa0     F7 05 09 05 
0dfa4     F2 F3 F5 0D 
0dfa8     07 10 00 08 
0dfac     FC 00 F0 F8 | 	byte	$f7, $05, $09, $05, $f2, $f3, $f5, $0d, $07, $10, $00, $08, $fc, $00, $f0, $f8
0dfb0     F9 0C 06 00 
0dfb4     FB 04 FC F9 
0dfb8     F2 FB FF 00 
0dfbc     05 FE F9 F8 | 	byte	$f9, $0c, $06, $00, $fb, $04, $fc, $f9, $f2, $fb, $ff, $00, $05, $fe, $f9, $f8
0dfc0     FD 04 0A FD 
0dfc4     06 00 0E 00 
0dfc8     05 FC 03 FB 
0dfcc     FC F4 F4 F7 | 	byte	$fd, $04, $0a, $fd, $06, $00, $0e, $00, $05, $fc, $03, $fb, $fc, $f4, $f4, $f7
0dfd0     00 FF 08 00 
0dfd4     04 0F 0C FD 
0dfd8     00 03 0D 11 
0dfdc     10 07 F6 FB | 	byte	$00, $ff, $08, $00, $04, $0f, $0c, $fd, $00, $03, $0d, $11, $10, $07, $f6, $fb
0dfe0     02 04 02 0E 
0dfe4     0D 0F 00 FF 
0dfe8     00 05 FB 03 
0dfec     FF 04 F6 FC | 	byte	$02, $04, $02, $0e, $0d, $0f, $00, $ff, $00, $05, $fb, $03, $ff, $04, $f6, $fc
0dff0     F9 01 FA F8 
0dff4     EE FD 00 F9 
0dff8     F6 FA 05 04 
0dffc     F8 F1 FD 0B | 	byte	$f9, $01, $fa, $f8, $ee, $fd, $00, $f9, $f6, $fa, $05, $04, $f8, $f1, $fd, $0b
0e000     17 10 FA F0 
0e004     EF F9 03 02 
0e008     05 FC 02 01 
0e00c     F8 F2 FB 06 | 	byte	$17, $10, $fa, $f0, $ef, $f9, $03, $02, $05, $fc, $02, $01, $f8, $f2, $fb, $06
0e010     0D 09 06 00 
0e014     FA F8 F8 F9 
0e018     00 FC F5 ED 
0e01c     F0 F7 05 0B | 	byte	$0d, $09, $06, $00, $fa, $f8, $f8, $f9, $00, $fc, $f5, $ed, $f0, $f7, $05, $0b
0e020     05 01 F8 FF 
0e024     FC 0B 06 FE 
0e028     F8 FD F2 F3 
0e02c     EF 07 06 08 | 	byte	$05, $01, $f8, $ff, $fc, $0b, $06, $fe, $f8, $fd, $f2, $f3, $ef, $07, $06, $08
0e030     F9 FB F5 F6 
0e034     07 0A 11 04 
0e038     F7 F8 09 06 
0e03c     03 FC 0A 01 | 	byte	$f9, $fb, $f5, $f6, $07, $0a, $11, $04, $f7, $f8, $09, $06, $03, $fc, $0a, $01
0e040     05 F7 FD F8 
0e044     07 03 0C 00 
0e048     F4 EF F5 FC 
0e04c     FE FD F4 F8 | 	byte	$05, $f7, $fd, $f8, $07, $03, $0c, $00, $f4, $ef, $f5, $fc, $fe, $fd, $f4, $f8
0e050     FC FE F7 F7 
0e054     FD 08 06 03 
0e058     FD 00 FA F6 
0e05c     F4 FA F9 01 | 	byte	$fc, $fe, $f7, $f7, $fd, $08, $06, $03, $fd, $00, $fa, $f6, $f4, $fa, $f9, $01
0e060     FB 02 FA 02 
0e064     FE 02 06 00 
0e068     00 06 00 01 
0e06c     FB FC FD 03 | 	byte	$fb, $02, $fa, $02, $fe, $02, $06, $00, $00, $06, $00, $01, $fb, $fc, $fd, $03
0e070     03 02 09 04 
0e074     FB 00 F9 03 
0e078     09 0C 08 06 
0e07c     05 04 06 0B | 	byte	$03, $02, $09, $04, $fb, $00, $f9, $03, $09, $0c, $08, $06, $05, $04, $06, $0b
0e080     14 0C 09 03 
0e084     0F 13 10 09 
0e088     07 07 0E 0B 
0e08c     0D 03 07 03 | 	byte	$14, $0c, $09, $03, $0f, $13, $10, $09, $07, $07, $0e, $0b, $0d, $03, $07, $03
0e090     08 03 05 0D 
0e094     15 15 0C 04 
0e098     08 09 09 07 
0e09c     0B 0A 08 07 | 	byte	$08, $03, $05, $0d, $15, $15, $0c, $04, $08, $09, $09, $07, $0b, $0a, $08, $07
0e0a0     07 0B 0C 09 
0e0a4     08 05 01 04 
0e0a8     09 11 13 12 
0e0ac     0A 0A 08 0B | 	byte	$07, $0b, $0c, $09, $08, $05, $01, $04, $09, $11, $13, $12, $0a, $0a, $08, $0b
0e0b0     00 08 FE 04 
0e0b4     F6 F9 F8 FE 
0e0b8     06 08 05 02 
0e0bc     05 03 0C 10 | 	byte	$00, $08, $fe, $04, $f6, $f9, $f8, $fe, $06, $08, $05, $02, $05, $03, $0c, $10
0e0c0     05 00 F9 FC 
0e0c4     07 09 06 00 
0e0c8     FA F5 03 FB 
0e0cc     0B 00 FB F6 | 	byte	$05, $00, $f9, $fc, $07, $09, $06, $00, $fa, $f5, $03, $fb, $0b, $00, $fb, $f6
0e0d0     F4 F5 F4 FB 
0e0d4     F4 F2 F2 F6 
0e0d8     00 FD FB F7 
0e0dc     F8 F5 F5 F3 | 	byte	$f4, $f5, $f4, $fb, $f4, $f2, $f2, $f6, $00, $fd, $fb, $f7, $f8, $f5, $f5, $f3
0e0e0     F1 F1 F4 FB 
0e0e4     F8 EF E5 EB 
0e0e8     F4 FD FC FB 
0e0ec     EF F4 F4 F4 | 	byte	$f1, $f1, $f4, $fb, $f8, $ef, $e5, $eb, $f4, $fd, $fc, $fb, $ef, $f4, $f4, $f4
0e0f0     EC F3 EF F6 
0e0f4     F8 FD F7 F9 
0e0f8     F3 F6 F4 ED 
0e0fc     E3 E9 EF F7 | 	byte	$ec, $f3, $ef, $f6, $f8, $fd, $f7, $f9, $f3, $f6, $f4, $ed, $e3, $e9, $ef, $f7
0e100     EB EE EF F1 
0e104     F5 F9 F5 F8 
0e108     F1 F5 F6 F6 
0e10c     F6 F1 EE EE | 	byte	$eb, $ee, $ef, $f1, $f5, $f9, $f5, $f8, $f1, $f5, $f6, $f6, $f6, $f1, $ee, $ee
0e110     EE F0 F7 F9 
0e114     FF 02 FA F7 
0e118     01 FD FA F3 
0e11c     F9 F9 03 FB | 	byte	$ee, $f0, $f7, $f9, $ff, $02, $fa, $f7, $01, $fd, $fa, $f3, $f9, $f9, $03, $fb
0e120     02 F4 F8 F1 
0e124     F2 F6 FE FC 
0e128     F8 F4 F0 F9 
0e12c     0A 05 04 F4 | 	byte	$02, $f4, $f8, $f1, $f2, $f6, $fe, $fc, $f8, $f4, $f0, $f9, $0a, $05, $04, $f4
0e130     EC EB F3 FD 
0e134     05 0C 0B 03 
0e138     00 FE FD FE 
0e13c     00 FE 06 01 | 	byte	$ec, $eb, $f3, $fd, $05, $0c, $0b, $03, $00, $fe, $fd, $fe, $00, $fe, $06, $01
0e140     09 05 00 FD 
0e144     02 08 07 0B 
0e148     06 05 03 0B 
0e14c     0B 10 15 13 | 	byte	$09, $05, $00, $fd, $02, $08, $07, $0b, $06, $05, $03, $0b, $0b, $10, $15, $13
0e150     0A 07 06 07 
0e154     09 0F 0D 0B 
0e158     0D 0D 0B 0E 
0e15c     09 0A 0B 10 | 	byte	$0a, $07, $06, $07, $09, $0f, $0d, $0b, $0d, $0d, $0b, $0e, $09, $0a, $0b, $10
0e160     13 12 15 19 
0e164     1F 1A 1B 10 
0e168     14 16 12 0D 
0e16c     0C 12 11 13 | 	byte	$13, $12, $15, $19, $1f, $1a, $1b, $10, $14, $16, $12, $0d, $0c, $12, $11, $13
0e170     0E 0B 16 10 
0e174     19 19 18 0C 
0e178     0F 10 16 10 
0e17c     11 10 0B 05 | 	byte	$0e, $0b, $16, $10, $19, $19, $18, $0c, $0f, $10, $16, $10, $11, $10, $0b, $05
0e180     0D 11 0C 0D 
0e184     0B 12 12 0C 
0e188     0D 08 0A 08 
0e18c     06 09 0D 08 | 	byte	$0d, $11, $0c, $0d, $0b, $12, $12, $0c, $0d, $08, $0a, $08, $06, $09, $0d, $08
0e190     08 0B 0F 0E 
0e194     0C 0C 09 0C 
0e198     0C 09 0C 06 
0e19c     01 01 03 05 | 	byte	$08, $0b, $0f, $0e, $0c, $0c, $09, $0c, $0c, $09, $0c, $06, $01, $01, $03, $05
0e1a0     0D 06 00 FD 
0e1a4     FB 03 02 02 
0e1a8     FB 03 03 FC 
0e1ac     F8 F8 F9 05 | 	byte	$0d, $06, $00, $fd, $fb, $03, $02, $02, $fb, $03, $03, $fc, $f8, $f8, $f9, $05
0e1b0     08 02 02 FA 
0e1b4     F6 F4 F4 F7 
0e1b8     02 04 00 FB 
0e1bc     FA F7 F7 F4 | 	byte	$08, $02, $02, $fa, $f6, $f4, $f4, $f7, $02, $04, $00, $fb, $fa, $f7, $f7, $f4
0e1c0     FA FC FD F9 
0e1c4     00 FC 01 04 
0e1c8     05 FD F9 F8 
0e1cc     F7 FA F7 F9 | 	byte	$fa, $fc, $fd, $f9, $00, $fc, $01, $04, $05, $fd, $f9, $f8, $f7, $fa, $f7, $f9
0e1d0     FC 05 04 04 
0e1d4     FF 09 00 FC 
0e1d8     F3 F7 F7 FA 
0e1dc     F7 F8 F5 F3 | 	byte	$fc, $05, $04, $04, $ff, $09, $00, $fc, $f3, $f7, $f7, $fa, $f7, $f8, $f5, $f3
0e1e0     F1 F4 F6 F4 
0e1e4     FA F9 FA F5 
0e1e8     F5 F8 02 06 
0e1ec     02 04 FA FC | 	byte	$f1, $f4, $f6, $f4, $fa, $f9, $fa, $f5, $f5, $f8, $02, $06, $02, $04, $fa, $fc
0e1f0     FC F1 F5 F6 
0e1f4     FA FA F9 F7 
0e1f8     F8 F6 F7 F7 
0e1fc     F8 F7 FB F7 | 	byte	$fc, $f1, $f5, $f6, $fa, $fa, $f9, $f7, $f8, $f6, $f7, $f7, $f8, $f7, $fb, $f7
0e200     FA FA F6 F7 
0e204     F0 F8 F9 F8 
0e208     F8 F3 FA F6 
0e20c     F9 FB F8 FB | 	byte	$fa, $fa, $f6, $f7, $f0, $f8, $f9, $f8, $f8, $f3, $fa, $f6, $f9, $fb, $f8, $fb
0e210     F5 F8 F6 F7 
0e214     FA FB FA FC 
0e218     FA FC F7 00 
0e21c     F9 F9 FD FD | 	byte	$f5, $f8, $f6, $f7, $fa, $fb, $fa, $fc, $fa, $fc, $f7, $00, $f9, $f9, $fd, $fd
0e220     01 08 02 00 
0e224     F6 F6 FB FC 
0e228     FD FF 03 04 
0e22c     FE FA FD FB | 	byte	$01, $08, $02, $00, $f6, $f6, $fb, $fc, $fd, $ff, $03, $04, $fe, $fa, $fd, $fb
0e230     01 00 03 05 
0e234     0B 08 08 02 
0e238     05 00 01 01 
0e23c     03 07 0D 08 | 	byte	$01, $00, $03, $05, $0b, $08, $08, $02, $05, $00, $01, $01, $03, $07, $0d, $08
0e240     08 05 0A 0A 
0e244     06 00 02 FE 
0e248     FD 03 08 05 
0e24c     06 01 F9 FB | 	byte	$08, $05, $0a, $0a, $06, $00, $02, $fe, $fd, $03, $08, $05, $06, $01, $f9, $fb
0e250     02 04 07 07 
0e254     02 04 01 00 
0e258     FD 06 06 05 
0e25c     00 FB F9 F9 | 	byte	$02, $04, $07, $07, $02, $04, $01, $00, $fd, $06, $06, $05, $00, $fb, $f9, $f9
0e260     FA FE 00 02 
0e264     F8 F6 F9 FB 
0e268     04 0A 0D 06 
0e26c     07 06 09 07 | 	byte	$fa, $fe, $00, $02, $f8, $f6, $f9, $fb, $04, $0a, $0d, $06, $07, $06, $09, $07
0e270     04 03 FF FA 
0e274     FC 00 FD FD 
0e278     FA FA F9 FA 
0e27c     F8 FA FA F8 | 	byte	$04, $03, $ff, $fa, $fc, $00, $fd, $fd, $fa, $fa, $f9, $fa, $f8, $fa, $fa, $f8
0e280     01 03 02 03 
0e284     04 00 FC FA 
0e288     F9 FB FA FA 
0e28c     00 02 00 FB | 	byte	$01, $03, $02, $03, $04, $00, $fc, $fa, $f9, $fb, $fa, $fa, $00, $02, $00, $fb
0e290     FA FB FC 00 
0e294     FD FA F8 F9 
0e298     FA 02 01 FB 
0e29c     F6 FB FA FE | 	byte	$fa, $fb, $fc, $00, $fd, $fa, $f8, $f9, $fa, $02, $01, $fb, $f6, $fb, $fa, $fe
0e2a0     01 06 00 00 
0e2a4     00 FE 03 02 
0e2a8     FD F8 FB 00 
0e2ac     06 06 05 03 | 	byte	$01, $06, $00, $00, $00, $fe, $03, $02, $fd, $f8, $fb, $00, $06, $06, $05, $03
0e2b0     01 FC 02 FE 
0e2b4     02 08 02 01 
0e2b8     06 03 06 02 
0e2bc     05 03 07 04 | 	byte	$01, $fc, $02, $fe, $02, $08, $02, $01, $06, $03, $06, $02, $05, $03, $07, $04
0e2c0     06 07 0A 00 
0e2c4     02 02 05 0A 
0e2c8     08 05 05 01 
0e2cc     04 03 02 FD | 	byte	$06, $07, $0a, $00, $02, $02, $05, $0a, $08, $05, $05, $01, $04, $03, $02, $fd
0e2d0     02 04 07 05 
0e2d4     09 07 06 09 
0e2d8     06 04 07 07 
0e2dc     05 0B 0A 0D | 	byte	$02, $04, $07, $05, $09, $07, $06, $09, $06, $04, $07, $07, $05, $0b, $0a, $0d
0e2e0     0A 08 05 01 
0e2e4     FB 00 02 03 
0e2e8     00 01 FC 04 
0e2ec     06 08 09 08 | 	byte	$0a, $08, $05, $01, $fb, $00, $02, $03, $00, $01, $fc, $04, $06, $08, $09, $08
0e2f0     03 02 07 07 
0e2f4     04 06 01 05 
0e2f8     03 05 09 03 
0e2fc     04 04 03 09 | 	byte	$03, $02, $07, $07, $04, $06, $01, $05, $03, $05, $09, $03, $04, $04, $03, $09
0e300     08 0C 09 09 
0e304     08 08 09 04 
0e308     09 07 08 08 
0e30c     04 06 09 0B | 	byte	$08, $0c, $09, $09, $08, $08, $09, $04, $09, $07, $08, $08, $04, $06, $09, $0b
0e310     0C 09 06 05 
0e314     03 05 05 03 
0e318     06 02 00 00 
0e31c     00 03 02 05 | 	byte	$0c, $09, $06, $05, $03, $05, $05, $03, $06, $02, $00, $00, $00, $03, $02, $05
0e320     04 06 02 00 
0e324     FB F9 FD 02 
0e328     02 00 FA 00 
0e32c     FD FC FB FA | 	byte	$04, $06, $02, $00, $fb, $f9, $fd, $02, $02, $00, $fa, $00, $fd, $fc, $fb, $fa
0e330     F9 FB FA 00 
0e334     03 03 FE F8 
0e338     FA F5 F1 F6 
0e33c     F8 F9 FE FC | 	byte	$f9, $fb, $fa, $00, $03, $03, $fe, $f8, $fa, $f5, $f1, $f6, $f8, $f9, $fe, $fc
0e340     01 FC F9 F9 
0e344     F8 FA F8 F8 
0e348     FC F9 FC F9 
0e34c     00 F7 F7 F8 | 	byte	$01, $fc, $f9, $f9, $f8, $fa, $f8, $f8, $fc, $f9, $fc, $f9, $00, $f7, $f7, $f8
0e350     F6 F8 F8 FA 
0e354     FB FB FC FB 
0e358     F4 F5 F1 F6 
0e35c     F8 FC 00 00 | 	byte	$f6, $f8, $f8, $fa, $fb, $fb, $fc, $fb, $f4, $f5, $f1, $f6, $f8, $fc, $00, $00
0e360     F9 FC FB FB 
0e364     02 FC FA F6 
0e368     F6 FC FB F7 
0e36c     00 FC FD FA | 	byte	$f9, $fc, $fb, $fb, $02, $fc, $fa, $f6, $f6, $fc, $fb, $f7, $00, $fc, $fd, $fa
0e370     02 01 03 04 
0e374     00 FC FA FD 
0e378     FB 02 03 00 
0e37c     FA FD FC FC | 	byte	$02, $01, $03, $04, $00, $fc, $fa, $fd, $fb, $02, $03, $00, $fa, $fd, $fc, $fc
0e380     FC FC 01 03 
0e384     00 00 FE FC 
0e388     FD F9 FD 05 
0e38c     00 02 00 03 | 	byte	$fc, $fc, $01, $03, $00, $00, $fe, $fc, $fd, $f9, $fd, $05, $00, $02, $00, $03
0e390     01 00 F9 FC 
0e394     03 04 00 05 
0e398     FE 05 04 07 
0e39c     03 09 06 0C | 	byte	$01, $00, $f9, $fc, $03, $04, $00, $05, $fe, $05, $04, $07, $03, $09, $06, $0c
0e3a0     03 01 FA 03 
0e3a4     03 03 FD 04 
0e3a8     03 08 05 02 
0e3ac     02 FD 04 04 | 	byte	$03, $01, $fa, $03, $03, $03, $fd, $04, $03, $08, $05, $02, $02, $fd, $04, $04
0e3b0     00 02 FE 00 
0e3b4     FE 02 FF 00 
0e3b8     02 FD 00 FC 
0e3bc     FB 01 03 04 | 	byte	$00, $02, $fe, $00, $fe, $02, $ff, $00, $02, $fd, $00, $fc, $fb, $01, $03, $04
0e3c0     05 04 04 06 
0e3c4     06 05 05 02 
0e3c8     04 02 05 04 
0e3cc     08 02 03 06 | 	byte	$05, $04, $04, $06, $06, $05, $05, $02, $04, $02, $05, $04, $08, $02, $03, $06
0e3d0     0C 06 07 04 
0e3d4     09 0A 08 05 
0e3d8     02 04 03 04 
0e3dc     03 02 05 03 | 	byte	$0c, $06, $07, $04, $09, $0a, $08, $05, $02, $04, $03, $04, $03, $02, $05, $03
0e3e0     05 00 01 FD 
0e3e4     04 04 01 02 
0e3e8     04 05 08 05 
0e3ec     04 00 FD 00 | 	byte	$05, $00, $01, $fd, $04, $04, $01, $02, $04, $05, $08, $05, $04, $00, $fd, $00
0e3f0     01 01 03 06 
0e3f4     02 00 04 09 
0e3f8     06 06 01 02 
0e3fc     FD 02 00 05 | 	byte	$01, $01, $03, $06, $02, $00, $04, $09, $06, $06, $01, $02, $fd, $02, $00, $05
0e400     01 01 FC 02 
0e404     04 00 02 FB 
0e408     FE 02 04 00 
0e40c     00 FB 00 FF | 	byte	$01, $01, $fc, $02, $04, $00, $02, $fb, $fe, $02, $04, $00, $00, $fb, $00, $ff
0e410     FC 02 00 05 
0e414     03 00 00 02 
0e418     02 02 09 08 
0e41c     04 03 02 01 | 	byte	$fc, $02, $00, $05, $03, $00, $00, $02, $02, $02, $09, $08, $04, $03, $02, $01
0e420     04 03 01 02 
0e424     03 00 03 01 
0e428     04 02 03 03 
0e42c     03 05 04 08 | 	byte	$04, $03, $01, $02, $03, $00, $03, $01, $04, $02, $03, $03, $03, $05, $04, $08
0e430     09 02 06 03 
0e434     02 03 04 05 
0e438     03 02 04 01 
0e43c     01 FD 00 00 | 	byte	$09, $02, $06, $03, $02, $03, $04, $05, $03, $02, $04, $01, $01, $fd, $00, $00
0e440     03 00 02 01 
0e444     02 FE 04 02 
0e448     03 03 06 06 
0e44c     04 02 00 05 | 	byte	$03, $00, $02, $01, $02, $fe, $04, $02, $03, $03, $06, $06, $04, $02, $00, $05
0e450     03 06 01 02 
0e454     01 05 04 05 
0e458     01 00 FD 02 
0e45c     00 02 FC FA | 	byte	$03, $06, $01, $02, $01, $05, $04, $05, $01, $00, $fd, $02, $00, $02, $fc, $fa
0e460     02 FE FD 00 
0e464     FA FC FA FB 
0e468     F9 FC FC F8 
0e46c     F8 FA F9 FC | 	byte	$02, $fe, $fd, $00, $fa, $fc, $fa, $fb, $f9, $fc, $fc, $f8, $f8, $fa, $f9, $fc
0e470     FB 00 FB FC 
0e474     F9 00 FD FE 
0e478     FA FA F9 FC 
0e47c     F9 FE FB F9 | 	byte	$fb, $00, $fb, $fc, $f9, $00, $fd, $fe, $fa, $fa, $f9, $fc, $f9, $fe, $fb, $f9
0e480     FB FD FB FB 
0e484     F9 FB FD FB 
0e488     FC FB 00 00 
0e48c     FE FD 01 FE | 	byte	$fb, $fd, $fb, $fb, $f9, $fb, $fd, $fb, $fc, $fb, $00, $00, $fe, $fd, $01, $fe
0e490     FC F8 FC FB 
0e494     FD FC 00 FB 
0e498     02 01 FD FC 
0e49c     02 FD 00 00 | 	byte	$fc, $f8, $fc, $fb, $fd, $fc, $00, $fb, $02, $01, $fd, $fc, $02, $fd, $00, $00
0e4a0     01 04 01 00 
0e4a4     00 01 03 02 
0e4a8     01 FD 01 FC 
0e4ac     03 04 02 03 | 	byte	$01, $04, $01, $00, $00, $01, $03, $02, $01, $fd, $01, $fc, $03, $04, $02, $03
0e4b0     00 00 00 00 
0e4b4     00 00 00 00 | 	byte	$00[8]
0e4b8     05 05 00 FF 
0e4bc     00 00 00 00 
0e4c0     00 00 00 00 
0e4c4     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0e4c8     00 00 00 00 
      ...             
0e4ec     00 00 00 00 
0e4f0     00 00       | 	byte	$00[42]
0e4f2     06 06 09 06 
0e4f6     0C 08 09 0A 
0e4fa     08 06 08 08 
0e4fe     07 07 08 06 | 	byte	$06, $06, $09, $06, $0c, $08, $09, $0a, $08, $06, $08, $08, $07, $07, $08, $06
0e502     06 06 08 06 
0e506     07 04 04 03 
0e50a     02 01 03 02 
0e50e     03 04 03 05 | 	byte	$06, $06, $08, $06, $07, $04, $04, $03, $02, $01, $03, $02, $03, $04, $03, $05
0e512     02 03 04 04 
0e516     02 03 03 03 
0e51a     04 03 07 05 
0e51e     04 04 04 05 | 	byte	$02, $03, $04, $04, $02, $03, $03, $03, $04, $03, $07, $05, $04, $04, $04, $05
0e522     03 07 08 05 
0e526     06 06 08 07 
0e52a     07 08 0A 09 
0e52e     09 04 1D 28 | 	byte	$03, $07, $08, $05, $06, $06, $08, $07, $07, $08, $0a, $09, $09, $04, $1d, $28
0e532     C0 80 EF 7F 
0e536     7F 7E 7B 68 
0e53a     00 98 80 B4 
0e53e     80 80 80 FF | 	byte	$c0, $80, $ef, $7f, $7f, $7e, $7b, $68, $00, $98, $80, $b4, $80, $80, $80, $ff
0e542     80 80 87 7E 
0e546     C0 80 80 80 
0e54a     EF 3F 7F 7F 
0e54e     7F 80 80 3F | 	byte	$80, $80, $87, $7e, $c0, $80, $80, $80, $ef, $3f, $7f, $7f, $7f, $80, $80, $3f
0e552     7F 80 80 7F 
0e556     7F 00 80 80 
0e55a     80 80 80 80 
0e55e     80 80 FF 40 | 	byte	$7f, $80, $80, $7f, $7f, $00, $80, $80, $80, $80, $80, $80, $80, $80, $ff, $40
0e562     AB B0 CF EF 
0e566     7F 7F 00 80 
0e56a     9F 6F 7F 7C 
0e56e     7F 7F 00 80 | 	byte	$ab, $b0, $cf, $ef, $7f, $7f, $00, $80, $9f, $6f, $7f, $7c, $7f, $7f, $00, $80
0e572     83 07 3F 7F 
0e576     40 80 7F 7F 
0e57a     6C 50 20 24 
0e57e     E8 F7 05 F0 | 	byte	$83, $07, $3f, $7f, $40, $80, $7f, $7f, $6c, $50, $20, $24, $e8, $f7, $05, $f0
0e582     80 87 20 80 
0e586     8F 7F 50 10 
0e58a     80 80 87 9D 
0e58e     FF 6A 09 7F | 	byte	$80, $87, $20, $80, $8f, $7f, $50, $10, $80, $80, $87, $9d, $ff, $6a, $09, $7f
0e592     D0 80 80 BF 
0e596     80 80 80 81 
0e59a     40 80 BF 7F 
0e59e     00 8F 7F 70 | 	byte	$d0, $80, $80, $bf, $80, $80, $80, $81, $40, $80, $bf, $7f, $00, $8f, $7f, $70
0e5a2     7F FF FF 7E 
0e5a6     7F 00 FF 7F 
0e5aa     7F 87 7F 40 
0e5ae     77 00 80 9F | 	byte	$7f, $ff, $ff, $7e, $7f, $00, $ff, $7f, $7f, $87, $7f, $40, $77, $00, $80, $9f
0e5b2     74 F3 7F 00 
0e5b6     80 80 83 80 
0e5ba     80 80 9F EF 
0e5be     7F 20 80 80 | 	byte	$74, $f3, $7f, $00, $80, $80, $83, $80, $80, $80, $9f, $ef, $7f, $20, $80, $80
0e5c2     B8 80 83 57 
0e5c6     7F 7F 7F 3B 
0e5ca     7F C0 80 83 
0e5ce     5F 80 7F 7F | 	byte	$b8, $80, $83, $57, $7f, $7f, $7f, $3b, $7f, $c0, $80, $83, $5f, $80, $7f, $7f
0e5d2     8F 4F 7F 07 
0e5d6     10 DF 6F 7F 
0e5da     7F E8 81 80 
0e5de     80 80 80 80 | 	byte	$8f, $4f, $7f, $07, $10, $df, $6f, $7f, $7f, $e8, $81, $80, $80, $80, $80, $80
0e5e2     80 AF C3 B8 
0e5e6     80 80 BF 80 
0e5ea     9F E0 80 C0 
0e5ee     80 80 BF 80 | 	byte	$80, $af, $c3, $b8, $80, $80, $bf, $80, $9f, $e0, $80, $c0, $80, $80, $bf, $80
0e5f2     80 80 FF 7F 
0e5f6     DF 70 37 00 
0e5fa     DF 60 DF 78 
0e5fe     FF 7F 4F 7F | 	byte	$80, $80, $ff, $7f, $df, $70, $37, $00, $df, $60, $df, $78, $ff, $7f, $4f, $7f
0e602     7E 30 25 D0 
0e606     AF D0 B7 F8 
0e60a     C1 FF 17 4D 
0e60e     36 7E E8 7F | 	byte	$7e, $30, $25, $d0, $af, $d0, $b7, $f8, $c1, $ff, $17, $4d, $36, $7e, $e8, $7f
0e612     7F 7F E0 7F 
0e616     7F 5F E0 FF 
0e61a     7F 80 78 5F 
0e61e     7F 7F 7F 7F | 	byte	$7f, $7f, $e0, $7f, $7f, $5f, $e0, $ff, $7f, $80, $78, $5f, $7f, $7f, $7f, $7f
0e622     7F 67 40 AB 
0e626     5F 70 04 90 
0e62a     DF E0 DF C0 
0e62e     83 80 BF 60 | 	byte	$7f, $67, $40, $ab, $5f, $70, $04, $90, $df, $e0, $df, $c0, $83, $80, $bf, $60
0e632     3F 40 80 D0 
0e636     80 B8 80 80 
0e63a     80 83 97 DD 
0e63e     90 81 80 80 | 	byte	$3f, $40, $80, $d0, $80, $b8, $80, $80, $80, $83, $97, $dd, $90, $81, $80, $80
0e642     80 80 80 80 
0e646     CC 80 BF FF 
0e64a     70 05 00 80 
0e64e     EF 80 80 80 | 	byte	$80, $80, $80, $80, $cc, $80, $bf, $ff, $70, $05, $00, $80, $ef, $80, $80, $80
0e652     FF 00 80 F0 
0e656     BF 7F 40 3F 
0e65a     7F 08 3F C0 
0e65e     DF 7F 8F 7F | 	byte	$ff, $00, $80, $f0, $bf, $7f, $40, $3f, $7f, $08, $3f, $c0, $df, $7f, $8f, $7f
0e662     7C 7F 81 7F 
0e666     7F 7F 7F 7F 
0e66a     20 B9 DB 1F 
0e66e     7F 7F 78 7F | 	byte	$7c, $7f, $81, $7f, $7f, $7f, $7f, $7f, $20, $b9, $db, $1f, $7f, $7f, $78, $7f
0e672     7F 3F 7F 1B 
0e676     C0 3F 7F BF 
0e67a     00 83 82 83 
0e67e     78 00 5C 94 | 	byte	$7f, $3f, $7f, $1b, $c0, $3f, $7f, $bf, $00, $83, $82, $83, $78, $00, $5c, $94
0e682     5F C0 81 81 
0e686     B7 C0 80 80 
0e68a     BF 24 07 3F 
0e68e     7F 72 7F 00 | 	byte	$5f, $c0, $81, $81, $b7, $c0, $80, $80, $bf, $24, $07, $3f, $7f, $72, $7f, $00
0e692     C0 81 80 BF 
0e696     90 DF 80 80 
0e69a     C0 80 E0 80 
0e69e     80 80 80 80 | 	byte	$c0, $81, $80, $bf, $90, $df, $80, $80, $c0, $80, $e0, $80, $80, $80, $80, $80
0e6a2     80 80 20 1F 
0e6a6     78 DF 7F 47 
0e6aa     60 20 80 9F 
0e6ae     40 7F 7F 80 | 	byte	$80, $80, $20, $1f, $78, $df, $7f, $47, $60, $20, $80, $9f, $40, $7f, $7f, $80
0e6b2     7E 7F 7F 7F 
0e6b6     7F 7F 7F 7F 
0e6ba     A9 7F 20 8F 
0e6be     81 80 1F 78 | 	byte	$7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $a9, $7f, $20, $8f, $81, $80, $1f, $78
0e6c2     57 7F 7F 70 
0e6c6     E0 D4 82 81 
0e6ca     80 5F 70 30 
0e6ce     87 6F 00 3F | 	byte	$57, $7f, $7f, $70, $e0, $d4, $82, $81, $80, $5f, $70, $30, $87, $6f, $00, $3f
0e6d2     20 DF C0 82 
0e6d6     BF 57 7F 7F 
0e6da     57 7F 7F 74 
0e6de     27 7F 30 E8 | 	byte	$20, $df, $c0, $82, $bf, $57, $7f, $7f, $57, $7f, $7f, $74, $27, $7f, $30, $e8
0e6e2     BF 60 AF 7F 
0e6e6     7A 58 6F 7E 
0e6ea     D3 C0 82 84 
0e6ee     81 E0 87 00 | 	byte	$bf, $60, $af, $7f, $7a, $58, $6f, $7e, $d3, $c0, $82, $84, $81, $e0, $87, $00
0e6f2     8F A0 80 82 
0e6f6     87 81 81 10 
0e6fa     80 F0 1F 00 
0e6fe     80 81 80 20 | 	byte	$8f, $a0, $80, $82, $87, $81, $81, $10, $80, $f0, $1f, $00, $80, $81, $80, $20
0e702     80 80 DF 20 
0e706     BF 00 BF 80 
0e70a     80 E0 FF 7F 
0e70e     7F 40 BF 80 | 	byte	$80, $80, $df, $20, $bf, $00, $bf, $80, $80, $e0, $ff, $7f, $7f, $40, $bf, $80
0e712     81 00 FF 7F 
0e716     70 08 5F C0 
0e71a     FF 00 DF 7F 
0e71e     7F 7A 7F 70 | 	byte	$81, $00, $ff, $7f, $70, $08, $5f, $c0, $ff, $00, $df, $7f, $7f, $7a, $7f, $70
0e722     3D 7E 45 7F 
0e726     78 2F 24 7F 
0e72a     70 0F 10 EF 
0e72e     7F 80 7F 47 | 	byte	$3d, $7e, $45, $7f, $78, $2f, $24, $7f, $70, $0f, $10, $ef, $7f, $80, $7f, $47
0e732     6F 7F 20 28 
0e736     8F 7F 7C 7E 
0e73a     E0 C8 97 E0 
0e73e     81 5F 85 81 | 	byte	$6f, $7f, $20, $28, $8f, $7f, $7c, $7e, $e0, $c8, $97, $e0, $81, $5f, $85, $81
0e742     FB 7F 49 7F 
0e746     A0 82 83 84 
0e74a     80 DF B3 3F 
0e74e     33 48 5F 7F | 	byte	$fb, $7f, $49, $7f, $a0, $82, $83, $84, $80, $df, $b3, $3f, $33, $48, $5f, $7f
0e752     A0 EF C0 3F 
0e756     7F 20 FF 70 
0e75a     82 3F B0 92 
0e75e     B7 17 57 00 | 	byte	$a0, $ef, $c0, $3f, $7f, $20, $ff, $70, $82, $3f, $b0, $92, $b7, $17, $57, $00
0e762     DF 82 80 81 
0e766     80 80 AF 81 
0e76a     DF E0 EF 40 
0e76e     BF 8B 7F 48 | 	byte	$df, $82, $80, $81, $80, $80, $af, $81, $df, $e0, $ef, $40, $bf, $8b, $7f, $48
0e772     7F E0 3D DB 
0e776     70 B7 76 82 
0e77a     FF 2F 78 80 
0e77e     DF FF 7F 63 | 	byte	$7f, $e0, $3d, $db, $70, $b7, $76, $82, $ff, $2f, $78, $80, $df, $ff, $7f, $63
0e782     7F 7F 7F 7E 
0e786     7F 00 EF 38 
0e78a     B0 BF B0 9F 
0e78e     C0 AF 06 5F | 	byte	$7f, $7f, $7f, $7e, $7f, $00, $ef, $38, $b0, $bf, $b0, $9f, $c0, $af, $06, $5f
0e792     78 AB 4F 10 
0e796     D0 C0 87 D7 
0e79a     EF 7F 20 7F 
0e79e     7F 00 FF 20 | 	byte	$78, $ab, $4f, $10, $d0, $c0, $87, $d7, $ef, $7f, $20, $7f, $7f, $00, $ff, $20
0e7a2     FF 80 40 6F 
0e7a6     7F 7C 4F 00 
0e7aa     FF 00 81 7B 
0e7ae     42 48 82 EF | 	byte	$ff, $80, $40, $6f, $7f, $7c, $4f, $00, $ff, $00, $81, $7b, $42, $48, $82, $ef
0e7b2     00 9D FF C8 
0e7b6     82 9F FF 02 
0e7ba     C0 BF 82 80 
0e7be     98 80 83 AE | 	byte	$00, $9d, $ff, $c8, $82, $9f, $ff, $02, $c0, $bf, $82, $80, $98, $80, $83, $ae
0e7c2     FF 7F 60 C0 
0e7c6     90 80 88 81 
0e7ca     00 87 77 00 
0e7ce     B7 1F 7F 00 | 	byte	$ff, $7f, $60, $c0, $90, $80, $88, $81, $00, $87, $77, $00, $b7, $1f, $7f, $00
0e7d2     D7 3F 00 9F 
0e7d6     48 80 BF E8 
0e7da     BB D7 5F 75 
0e7de     70 C0 80 80 | 	byte	$d7, $3f, $00, $9f, $48, $80, $bf, $e8, $bb, $d7, $5f, $75, $70, $c0, $80, $80
0e7e2     80 DF 73 7F 
0e7e6     7F 7F 7F 7C 
0e7ea     0F 73 7F 67 
0e7ee     40 80 7F 7F | 	byte	$80, $df, $73, $7f, $7f, $7f, $7f, $7c, $0f, $73, $7f, $67, $40, $80, $7f, $7f
0e7f2     7E C8 EB 3F 
0e7f6     7F 63 7F 00 
0e7fa     5F 40 32 07 
0e7fe     77 20 17 D0 | 	byte	$7e, $c8, $eb, $3f, $7f, $63, $7f, $00, $5f, $40, $32, $07, $77, $20, $17, $d0
0e802     83 9F CF E4 
0e806     A0 82 81 83 
0e80a     9F A0 80 80 
0e80e     CF 00 C8 AF | 	byte	$83, $9f, $cf, $e4, $a0, $82, $81, $83, $9f, $a0, $80, $80, $cf, $00, $c8, $af
0e812     D4 8C BF DF 
0e816     00 9F 5F 60 
0e81a     55 20 C0 AF 
0e81e     4F F0 E8 EF | 	byte	$d4, $8c, $bf, $df, $00, $9f, $5f, $60, $55, $20, $c0, $af, $4f, $f0, $e8, $ef
0e822     7F 00 80 80 
0e826     8F B8 80 80 
0e82a     1F 70 40 10 
0e82e     A0 AF 00 8F | 	byte	$7f, $00, $80, $80, $8f, $b8, $80, $80, $1f, $70, $40, $10, $a0, $af, $00, $8f
0e832     B4 B7 FF 2F 
0e836     7F 7E 48 2F 
0e83a     7F 60 D4 2F 
0e83e     7F 7F 7F 2C | 	byte	$b4, $b7, $ff, $2f, $7f, $7e, $48, $2f, $7f, $60, $d4, $2f, $7f, $7f, $7f, $2c
0e842     77 00 DF 7F 
0e846     7F 7F 7F 7F 
0e84a     6F 60 07 33 
0e84e     25 00 82 FF | 	byte	$77, $00, $df, $7f, $7f, $7f, $7f, $7f, $6f, $60, $07, $33, $25, $00, $82, $ff
0e852     08 94 81 8F 
0e856     EA 1F 20 82 
0e85a     80 FF 40 3F 
0e85e     7F 7F 20 3F | 	byte	$08, $94, $81, $8f, $ea, $1f, $20, $82, $80, $ff, $40, $3f, $7f, $7f, $20, $3f
0e862     7F 7C A0 DF 
0e866     20 4A 81 DF 
0e86a     E8 EF E7 6F 
0e86e     E0 3F C0 AF | 	byte	$7f, $7c, $a0, $df, $20, $4a, $81, $df, $e8, $ef, $e7, $6f, $e0, $3f, $c0, $af
0e872     F0 98 87 00 
0e876     80 BF 80 87 
0e87a     A8 87 3F 60 
0e87e     E1 4F 40 E0 | 	byte	$f0, $98, $87, $00, $80, $bf, $80, $87, $a8, $87, $3f, $60, $e1, $4f, $40, $e0
0e882     80 EF E4 E8 
0e886     80 8F 1C E7 
0e88a     3F 68 A0 BF 
0e88e     60 A7 18 CF | 	byte	$80, $ef, $e4, $e8, $80, $8f, $1c, $e7, $3f, $68, $a0, $bf, $60, $a7, $18, $cf
0e892     5F 5B 6C 3F 
0e896     70 E0 BF 2B 
0e89a     00 FF 40 9F 
0e89e     58 A0 D0 84 | 	byte	$5f, $5b, $6c, $3f, $70, $e0, $bf, $2b, $00, $ff, $40, $9f, $58, $a0, $d0, $84
0e8a2     A7 2F 7F 7F 
0e8a6     70 EF 48 25 
0e8aa     0D 7B 60 6F 
0e8ae     7F 7F 20 6F | 	byte	$a7, $2f, $7f, $7f, $70, $ef, $48, $25, $0d, $7b, $60, $6f, $7f, $7f, $20, $6f
0e8b2     50 3F 60 DF 
0e8b6     40 E8 37 7F 
0e8ba     7F 6B 7F 48 
0e8be     D9 5F 70 83 | 	byte	$50, $3f, $60, $df, $40, $e8, $37, $7f, $7f, $6b, $7f, $48, $d9, $5f, $70, $83
0e8c2     A0 81 82 80 
0e8c6     A8 80 EC B7 
0e8ca     F0 DF 18 EF 
0e8ce     E0 80 F4 80 | 	byte	$a0, $81, $82, $80, $a8, $80, $ec, $b7, $f0, $df, $18, $ef, $e0, $80, $f4, $80
0e8d2     80 80 80 80 
0e8d6     A8 BF 04 3F 
0e8da     50 EF 6A 20 
0e8de     00 B3 AF 3F | 	byte	$80, $80, $80, $80, $a8, $bf, $04, $3f, $50, $ef, $6a, $20, $00, $b3, $af, $3f
0e8e2     40 00 A0 DF 
0e8e6     20 9C B0 80 
0e8ea     87 65 00 DA 
0e8ee     BF 6F 78 17 | 	byte	$40, $00, $a0, $df, $20, $9c, $b0, $80, $87, $65, $00, $da, $bf, $6f, $78, $17
0e8f2     7F 40 17 3A 
0e8f6     7F 7F 51 7F 
0e8fa     40 CB 4F 3F 
0e8fe     7F 62 7F 40 | 	byte	$7f, $40, $17, $3a, $7f, $7f, $51, $7f, $40, $cb, $4f, $3f, $7f, $62, $7f, $40
0e902     5F 40 0B 3F 
0e906     72 67 7F 30 
0e90a     10 AF 4A EB 
0e90e     00 87 6A 90 | 	byte	$5f, $40, $0b, $3f, $72, $67, $7f, $30, $10, $af, $4a, $eb, $00, $87, $6a, $90
0e912     FF 00 24 A8 
0e916     2F E0 93 80 
0e91a     80 9F 22 A0 
0e91e     DF B4 EF 30 | 	byte	$ff, $00, $24, $a8, $2f, $e0, $93, $80, $80, $9f, $22, $a0, $df, $b4, $ef, $30
0e922     A0 BF 3E 5F 
0e926     60 1D 20 F1 
0e92a     2F 6E 00 FF 
0e92e     50 DF 7F 20 | 	byte	$a0, $bf, $3e, $5f, $60, $1d, $20, $f1, $2f, $6e, $00, $ff, $50, $df, $7f, $20
0e932     87 FF C0 9F 
0e936     CA 80 DF 7F 
0e93a     48 E0 B4 AF 
0e93e     EF D5 F5 CC | 	byte	$87, $ff, $c0, $9f, $ca, $80, $df, $7f, $48, $e0, $b4, $af, $ef, $d5, $f5, $cc
0e942     2F D0 AF E8 
0e946     2F C0 CF 08 
0e94a     17 10 A0 BF 
0e94e     0F 2B 4C 27 | 	byte	$2f, $d0, $af, $e8, $2f, $c0, $cf, $08, $17, $10, $a0, $bf, $0f, $2b, $4c, $27
0e952     70 90 8F EF 
0e956     00 FF 68 E7 
0e95a     6B 67 50 AF 
0e95e     68 AF 7F 00 | 	byte	$70, $90, $8f, $ef, $00, $ff, $68, $e7, $6b, $67, $50, $af, $68, $af, $7f, $00
0e962     80 EF 52 1D 
0e966     40 D8 E7 3F 
0e96a     7F 78 00 83 
0e96e     FF 10 93 1F | 	byte	$80, $ef, $52, $1d, $40, $d8, $e7, $3f, $7f, $78, $00, $83, $ff, $10, $93, $1f
0e972     07 7F 60 3F 
0e976     7C 59 00 17 
0e97a     D0 DF 40 C4 
0e97e     17 50 00 3F | 	byte	$07, $7f, $60, $3f, $7c, $59, $00, $17, $d0, $df, $40, $c4, $17, $50, $00, $3f
0e982     50 C1 3F 20 
0e986     F7 48 1D 10 
0e98a     0B 12 35 C0 
0e98e     8F 0A FB 2E | 	byte	$50, $c1, $3f, $20, $f7, $48, $1d, $10, $0b, $12, $35, $c0, $8f, $0a, $fb, $2e
0e992     10 80 83 B4 
0e996     A0 8B DF 0F 
0e99a     70 A0 FF 2C 
0e99e     10 CB 0C 9F | 	byte	$10, $80, $83, $b4, $a0, $8b, $df, $0f, $70, $a0, $ff, $2c, $10, $cb, $0c, $9f
0e9a2     4F 80 81 FD 
0e9a6     D8 DF 00 9F 
0e9aa     1F 30 E0 EF 
0e9ae     60 07 20 EF | 	byte	$4f, $80, $81, $fd, $d8, $df, $00, $9f, $1f, $30, $e0, $ef, $60, $07, $20, $ef
0e9b2     00 87 FF 14 
0e9b6     F9 5F 7F 10 
0e9ba     6F 7F 70 C2 
0e9be     3F 7F C0 80 | 	byte	$00, $87, $ff, $14, $f9, $5f, $7f, $10, $6f, $7f, $70, $c2, $3f, $7f, $c0, $80
0e9c2     AF 60 A0 DF 
0e9c6     1F 5F 50 44 
0e9ca     F0 0D F6 3F 
0e9ce     41 7F 60 FB | 	byte	$af, $60, $a0, $df, $1f, $5f, $50, $44, $f0, $0d, $f6, $3f, $41, $7f, $60, $fb
0e9d2     20 2F 20 EF 
0e9d6     20 1F 20 BF 
0e9da     30 F7 00 CF 
0e9de     10 B7 7F 40 | 	byte	$20, $2f, $20, $ef, $20, $1f, $20, $bf, $30, $f7, $00, $cf, $10, $b7, $7f, $40
0e9e2     DB 5F 48 1F 
0e9e6     00 9F EA 0F 
0e9ea     02 3F 00 BF 
0e9ee     D0 80 80 2F | 	byte	$db, $5f, $48, $1f, $00, $9f, $ea, $0f, $02, $3f, $00, $bf, $d0, $80, $80, $2f
0e9f2     6C 6D 20 80 
0e9f6     80 A8 9F 08 
0e9fa     80 CF E7 26 
0e9fe     E2 F8 A8 9F | 	byte	$6c, $6d, $20, $80, $80, $a8, $9f, $08, $80, $cf, $e7, $26, $e2, $f8, $a8, $9f
0ea02     2F 00 3F 7A 
0ea06     68 00 0D F0 
0ea0a     1F 70 24 E7 
0ea0e     D0 CF D8 AD | 	byte	$2f, $00, $3f, $7a, $68, $00, $0d, $f0, $1f, $70, $24, $e7, $d0, $cf, $d8, $ad
0ea12     B7 F7 7F 7F 
0ea16     7F 78 32 6D 
0ea1a     30 20 C7 08 
0ea1e     80 FF 10 E0 | 	byte	$b7, $f7, $7f, $7f, $7f, $78, $32, $6d, $30, $20, $c7, $08, $80, $ff, $10, $e0
0ea22     B3 C0 83 57 
0ea26     00 3C A0 DF 
0ea2a     3D E8 BF FB 
0ea2e     6F 7F 00 F7 | 	byte	$b3, $c0, $83, $57, $00, $3c, $a0, $df, $3d, $e8, $bf, $fb, $6f, $7f, $00, $f7
0ea32     6F 40 18 DF 
0ea36     7F 40 5F 10 
0ea3a     57 10 3F 50 
0ea3e     1B E8 3F 7F | 	byte	$6f, $40, $18, $df, $7f, $40, $5f, $10, $57, $10, $3f, $50, $1b, $e8, $3f, $7f
0ea42     40 48 D8 0F 
0ea46     E0 CF D8 A7 
0ea4a     17 E0 A8 85 
0ea4e     FF E0 DF EC | 	byte	$40, $48, $d8, $0f, $e0, $cf, $d8, $a7, $17, $e0, $a8, $85, $ff, $e0, $df, $ec
0ea52     F6 EF 5F 20 
0ea56     E7 A0 80 AF 
0ea5a     D0 80 9F F0 
0ea5e     83 3F 18 E7 | 	byte	$f6, $ef, $5f, $20, $e7, $a0, $80, $af, $d0, $80, $9f, $f0, $83, $3f, $18, $e7
0ea62     1F 20 17 F0 
0ea66     CF F0 E8 B4 
0ea6a     EF 30 3F 7C 
0ea6e     50 10 B4 9F | 	byte	$1f, $20, $17, $f0, $cf, $f0, $e8, $b4, $ef, $30, $3f, $7c, $50, $10, $b4, $9f
0ea72     2F 20 DF 4B 
0ea76     37 60 39 20 
0ea7a     0F 4E 00 1F 
0ea7e     08 FB 30 A2 | 	byte	$2f, $20, $df, $4b, $37, $60, $39, $20, $0f, $4e, $00, $1f, $08, $fb, $30, $a2
0ea82     CF F7 67 68 
0ea86     50 17 28 D3 
0ea8a     F4 8A D7 2F 
0ea8e     20 1F 7F F3 | 	byte	$cf, $f7, $67, $68, $50, $17, $28, $d3, $f4, $8a, $d7, $2f, $20, $1f, $7f, $f3
0ea92     58 0B 7F 00 
0ea96     EF 0F 68 F9 
0ea9a     38 0F 7C C0 
0ea9e     CF DF 28 00 | 	byte	$58, $0b, $7f, $00, $ef, $0f, $68, $f9, $38, $0f, $7c, $c0, $cf, $df, $28, $00
0eaa2     1F F0 C8 A8 
0eaa6     AF FB F2 15 
0eaaa     E0 D8 BB 3F 
0eaae     30 DF 1F 30 | 	byte	$1f, $f0, $c8, $a8, $af, $fb, $f2, $15, $e0, $d8, $bb, $3f, $30, $df, $1f, $30
0eab2     00 88 BF 20 
0eab6     90 80 8F 48 
0eaba     A0 DB EF 7E 
0eabe     00 FF 28 00 | 	byte	$00, $88, $bf, $20, $90, $80, $8f, $48, $a0, $db, $ef, $7e, $00, $ff, $28, $00
0eac2     DF F8 FF 60 
0eac6     10 10 E7 E8 
0eaca     80 CD EF 56 
0eace     2F 54 2A 40 | 	byte	$df, $f8, $ff, $60, $10, $10, $e7, $e8, $80, $cd, $ef, $56, $2f, $54, $2a, $40
0ead2     13 5F 50 05 
0ead6     4F 48 45 20 
0eada     EB F7 10 DC 
0eade     1F 20 D0 B7 | 	byte	$13, $5f, $50, $05, $4f, $48, $45, $20, $eb, $f7, $10, $dc, $1f, $20, $d0, $b7
0eae2     17 19 34 E0 
0eae6     C1 EF 10 F7 
0eaea     20 D0 DB 07 
0eaee     F0 FF 39 3F | 	byte	$17, $19, $34, $e0, $c1, $ef, $10, $f7, $20, $d0, $db, $07, $f0, $ff, $39, $3f
0eaf2     46 50 08 F7 
0eaf6     3E 00 F7 10 
0eafa     EF 66 00 C8 
0eafe     FF 73 54 00 | 	byte	$46, $50, $08, $f7, $3e, $00, $f7, $10, $ef, $66, $00, $c8, $ff, $73, $54, $00
0eb02     BA 98 BF D4 
0eb06     DF 08 0F 40 
0eb0a     2B 2A 00 D9 
0eb0e     0F 34 08 17 | 	byte	$ba, $98, $bf, $d4, $df, $08, $0f, $40, $2b, $2a, $00, $d9, $0f, $34, $08, $17
0eb12     34 2C 04 D5 
0eb16     EB F9 F2 FB 
0eb1a     00 D0 BF 23 
0eb1e     F4 F0 91 CE | 	byte	$34, $2c, $04, $d5, $eb, $f9, $f2, $fb, $00, $d0, $bf, $23, $f4, $f0, $91, $ce
0eb22     E7 2C B0 BB 
0eb26     FF 34 0C E8 
0eb2a     DF 17 4D 20 
0eb2e     EF 2C E8 F7 | 	byte	$e7, $2c, $b0, $bb, $ff, $34, $0c, $e8, $df, $17, $4d, $20, $ef, $2c, $e8, $f7
0eb32     40 90 EF 34 
0eb36     42 E8 EF FF 
0eb3a     7B 40 FF 58 
0eb3e     00 EF 00 DF | 	byte	$40, $90, $ef, $34, $42, $e8, $ef, $ff, $7b, $40, $ff, $58, $00, $ef, $00, $df
0eb42     60 BF 7F 20 
0eb46     CC AF E8 DF 
0eb4a     68 0F 68 1D 
0eb4e     28 F7 30 0F | 	byte	$60, $bf, $7f, $20, $cc, $af, $e8, $df, $68, $0f, $68, $1d, $28, $f7, $30, $0f
0eb52     50 77 7C 57 
0eb56     C0 9F 24 1F 
0eb5a     00 1F E0 FF 
0eb5e     D0 FF E0 EE | 	byte	$50, $77, $7c, $57, $c0, $9f, $24, $1f, $00, $1f, $e0, $ff, $d0, $ff, $e0, $ee
0eb62     80 3F E0 D7 
0eb66     B4 E4 80 9F 
0eb6a     D7 5F 28 1F 
0eb6e     39 00 F0 A0 | 	byte	$80, $3f, $e0, $d7, $b4, $e4, $80, $9f, $d7, $5f, $28, $1f, $39, $00, $f0, $a0
0eb72     D7 00 DF 4B 
0eb76     77 70 00 E0 
0eb7a     FA BD 27 1B 
0eb7e     6F 58 58 37 | 	byte	$d7, $00, $df, $4b, $77, $70, $00, $e0, $fa, $bd, $27, $1b, $6f, $58, $58, $37
0eb82     60 C8 0F 07 
0eb86     00 80 1F 00 
0eb8a     3F 00 97 CF 
0eb8e     DA B0 80 CF | 	byte	$60, $c8, $0f, $07, $00, $80, $1f, $00, $3f, $00, $97, $cf, $da, $b0, $80, $cf
0eb92     24 A0 BF D0 
0eb96     87 20 86 CA 
0eb9a     DF 7F 60 7F 
0eb9e     60 4F 48 40 | 	byte	$24, $a0, $bf, $d0, $87, $20, $86, $ca, $df, $7f, $60, $7f, $60, $4f, $48, $40
0eba2     B0 EF 28 EF 
0eba6     5F 00 FF 18 
0ebaa     3F 28 5F 60 
0ebae     6F 7F 78 00 | 	byte	$b0, $ef, $28, $ef, $5f, $00, $ff, $18, $3f, $28, $5f, $60, $6f, $7f, $78, $00
0ebb2     DF 20 D7 7F 
0ebb6     7F 51 48 D0 
0ebba     DF 1B 04 A0 
0ebbe     8F 02 B4 D7 | 	byte	$df, $20, $d7, $7f, $7f, $51, $48, $d0, $df, $1b, $04, $a0, $8f, $02, $b4, $d7
0ebc2     EF 10 80 80 
0ebc6     CF C0 BF 40 
0ebca     A8 EC 80 BF 
0ebce     A2 EF 00 EF | 	byte	$ef, $10, $80, $80, $cf, $c0, $bf, $40, $a8, $ec, $80, $bf, $a2, $ef, $00, $ef
0ebd2     FF 48 C0 F7 
0ebd6     20 E3 FD E0 
0ebda     A3 17 5B 7F 
0ebde     7F 10 E6 DF | 	byte	$ff, $48, $c0, $f7, $20, $e3, $fd, $e0, $a3, $17, $5b, $7f, $7f, $10, $e6, $df
0ebe2     37 00 EF 2C 
0ebe6     00 BF 5F 70 
0ebea     F0 FF 5E 21 
0ebee     7F 40 1F 44 | 	byte	$37, $00, $ef, $2c, $00, $bf, $5f, $70, $f0, $ff, $5e, $21, $7f, $40, $1f, $44
0ebf2     4B 6C 00 9F 
0ebf6     2F 50 0F 3A 
0ebfa     00 37 00 FF 
0ebfe     10 B0 BF 47 | 	byte	$4b, $6c, $00, $9f, $2f, $50, $0f, $3a, $00, $37, $00, $ff, $10, $b0, $bf, $47
0ec02     C0 FF 00 9F 
0ec06     C0 8F CA FF 
0ec0a     40 3F 50 C0 
0ec0e     80 B7 A8 FF | 	byte	$c0, $ff, $00, $9f, $c0, $8f, $ca, $ff, $40, $3f, $50, $c0, $80, $b7, $a8, $ff
0ec12     40 FF E0 BF 
0ec16     57 2C 0C 1F 
0ec1a     20 FF 7E 00 
0ec1e     FF 30 D8 FF | 	byte	$40, $ff, $e0, $bf, $57, $2c, $0c, $1f, $20, $ff, $7e, $00, $ff, $30, $d8, $ff
0ec22     00 0F 50 00 
0ec26     00 F3 3F 58 
0ec2a     E0 B7 F0 EF 
0ec2e     69 31 40 24 | 	byte	$00, $0f, $50, $00, $00, $f3, $3f, $58, $e0, $b7, $f0, $ef, $69, $31, $40, $24
0ec32     F0 A7 CC A8 
0ec36     AB CF 37 10 
0ec3a     D8 AB FF 08 
0ec3e     AB 35 F0 DF | 	byte	$f0, $a7, $cc, $a8, $ab, $cf, $37, $10, $d8, $ab, $ff, $08, $ab, $35, $f0, $df
0ec42     C8 BC 80 EF 
0ec46     20 F7 08 3F 
0ec4a     7F 7F 7C 26 
0ec4e     E8 83 FF 4F | 	byte	$c8, $bc, $80, $ef, $20, $f7, $08, $3f, $7f, $7f, $7c, $26, $e8, $83, $ff, $4f
0ec52     20 1F 48 0F 
0ec56     6E 40 1F 00 
0ec5a     E7 FF 2F 5F 
0ec5e     6B 30 EA C0 | 	byte	$20, $1f, $48, $0f, $6e, $40, $1f, $00, $e7, $ff, $2f, $5f, $6b, $30, $ea, $c0
0ec62     BF B0 B5 AE 
0ec66     C8 9A F7 2F 
0ec6a     38 F2 09 F5 
0ec6e     1A 17 4F 37 | 	byte	$bf, $b0, $b5, $ae, $c8, $9a, $f7, $2f, $38, $f2, $09, $f5, $1a, $17, $4f, $37
0ec72     60 37 50 CB 
0ec76     30 FB 74 F2 
0ec7a     5F 28 08 E0 
0ec7e     87 EF C0 D7 | 	byte	$60, $37, $50, $cb, $30, $fb, $74, $f2, $5f, $28, $08, $e0, $87, $ef, $c0, $d7
0ec82     E0 EF EB 7F 
0ec86     20 1F C0 DF 
0ec8a     88 B8 80 9F 
0ec8e     DF 7F 50 00 | 	byte	$e0, $ef, $eb, $7f, $20, $1f, $c0, $df, $88, $b8, $80, $9f, $df, $7f, $50, $00
0ec92     80 B8 80 B7 
0ec96     DF 77 70 4A 
0ec9a     7F 7E E8 D1 
0ec9e     FF 24 00 0B | 	byte	$80, $b8, $80, $b7, $df, $77, $70, $4a, $7f, $7e, $e8, $d1, $ff, $24, $00, $0b
0eca2     00 BF 40 C0 
0eca6     EF F7 25 25 
0ecaa     4B 5E 32 6F 
0ecae     20 FF 20 E0 | 	byte	$00, $bf, $40, $c0, $ef, $f7, $25, $25, $4b, $5e, $32, $6f, $20, $ff, $20, $e0
0ecb2     A1 FF 10 0D 
0ecb6     11 3F 44 00 
0ecba     8B 1F 3F 7F 
0ecbe     00 FF 57 70 | 	byte	$a1, $ff, $10, $0d, $11, $3f, $44, $00, $8b, $1f, $3f, $7f, $00, $ff, $57, $70
0ecc2     07 4B 40 00 
0ecc6     FF 48 D7 2E 
0ecca     E9 03 1F 78 
0ecce     00 1C D4 88 | 	byte	$07, $4b, $40, $00, $ff, $48, $d7, $2e, $e9, $03, $1f, $78, $00, $1c, $d4, $88
0ecd2     80 E4 81 CF 
0ecd6     22 E0 9E DF 
0ecda     15 E8 A8 80 
0ecde     AF 1F 10 B3 | 	byte	$80, $e4, $81, $cf, $22, $e0, $9e, $df, $15, $e8, $a8, $80, $af, $1f, $10, $b3
0ece2     FF E0 DD 1F 
0ece6     7F 7F 67 73 
0ecea     78 28 E0 1F 
0ecee     10 80 DF 37 | 	byte	$ff, $e0, $dd, $1f, $7f, $7f, $67, $73, $78, $28, $e0, $1f, $10, $80, $df, $37
0ecf2     20 5F 60 E8 
0ecf6     90 BF 10 AF 
0ecfa     3F 73 70 20 
0ecfe     08 EF 3E E4 | 	byte	$20, $5f, $60, $e8, $90, $bf, $10, $af, $3f, $73, $70, $20, $08, $ef, $3e, $e4
0ed02     FF B0 FF 28 
0ed06     00 90 97 BF 
0ed0a     37 48 6F 7F 
0ed0e     40 C0 92 8E | 	byte	$ff, $b0, $ff, $28, $00, $90, $97, $bf, $37, $48, $6f, $7f, $40, $c0, $92, $8e
0ed12     B7 E7 09 FB 
0ed16     3F 50 C8 FF 
0ed1a     20 C0 DF C4 
0ed1e     CF 20 A4 EF | 	byte	$b7, $e7, $09, $fb, $3f, $50, $c8, $ff, $20, $c0, $df, $c4, $cf, $20, $a4, $ef
0ed22     0F 2F 42 20 
0ed26     E7 3F 34 5F 
0ed2a     60 3B 28 0F 
0ed2e     00 DF 20 F7 | 	byte	$0f, $2f, $42, $20, $e7, $3f, $34, $5f, $60, $3b, $28, $0f, $00, $df, $20, $f7
0ed32     32 21 08 17 
0ed36     67 54 E8 FF 
0ed3a     2F 7F 40 00 
0ed3e     F0 FA F7 20 | 	byte	$32, $21, $08, $17, $67, $54, $e8, $ff, $2f, $7f, $40, $00, $f0, $fa, $f7, $20
0ed42     DF 04 DF 18 
0ed46     E7 E8 AF 3E 
0ed4a     E8 2F 13 10 
0ed4e     0F 68 80 BF | 	byte	$df, $04, $df, $18, $e7, $e8, $af, $3e, $e8, $2f, $13, $10, $0f, $68, $80, $bf
0ed52     F2 F9 1B 10 
0ed56     B7 0F E2 C4 
0ed5a     85 CF B6 FF 
0ed5e     E0 8F D7 E0 | 	byte	$f2, $f9, $1b, $10, $b7, $0f, $e2, $c4, $85, $cf, $b6, $ff, $e0, $8f, $d7, $e0
0ed62     90 9B B6 BF 
0ed66     1F E0 90 8F 
0ed6a     FF 50 33 10 
0ed6e     0F F0 EF 34 | 	byte	$90, $9b, $b6, $bf, $1f, $e0, $90, $8f, $ff, $50, $33, $10, $0f, $f0, $ef, $34
0ed72     08 0F 7F 7F 
0ed76     49 5B 7F 70 
0ed7a     7F 70 7F 68 
0ed7e     4F 7F 7F 60 | 	byte	$08, $0f, $7f, $7f, $49, $5b, $7f, $70, $7f, $70, $7f, $68, $4f, $7f, $7f, $60
0ed82     EF 4F 6A 00 
0ed86     F7 C0 BF E8 
0ed8a     FF E0 BF C0 
0ed8e     CF E8 AC 80 | 	byte	$ef, $4f, $6a, $00, $f7, $c0, $bf, $e8, $ff, $e0, $bf, $c0, $cf, $e8, $ac, $80
0ed92     AF 00 88 80 
0ed96     9F 90 AF E8 
0ed9a     A9 EF E0 0A 
0ed9e     C0 BF 2A 27 | 	byte	$af, $00, $88, $80, $9f, $90, $af, $e8, $a9, $ef, $e0, $0a, $c0, $bf, $2a, $27
0eda2     37 7F 7E 30 
0eda6     A0 BF 37 6C 
0edaa     38 00 9D EB 
0edae     A7 E4 80 CF | 	byte	$37, $7f, $7e, $30, $a0, $bf, $37, $6c, $38, $00, $9d, $eb, $a7, $e4, $80, $cf
0edb2     FF 5F 10 4F 
0edb6     6F 58 EC 1F 
0edba     3F 30 FF E0 
0edbe     BF 07 5F 40 | 	byte	$ff, $5f, $10, $4f, $6f, $58, $ec, $1f, $3f, $30, $ff, $e0, $bf, $07, $5f, $40
0edc2     1F 48 00 F0 
0edc6     3F 68 08 07 
0edca     3F 40 08 FB 
0edce     03 3F 60 1A | 	byte	$1f, $48, $00, $f0, $3f, $68, $08, $07, $3f, $40, $08, $fb, $03, $3f, $60, $1a
0edd2     22 00 85 1F 
0edd6     20 80 D7 F8 
0edda     A0 C7 C0 BF 
0edde     1F 5A 08 D4 | 	byte	$22, $00, $85, $1f, $20, $80, $d7, $f8, $a0, $c7, $c0, $bf, $1f, $5a, $08, $d4
0ede2     AB B0 BF 17 
0ede6     0B 3F 72 00 
0edea     A0 83 AF 92 
0edee     EF 00 FF 38 | 	byte	$ab, $b0, $bf, $17, $0b, $3f, $72, $00, $a0, $83, $af, $92, $ef, $00, $ff, $38
0edf2     14 EC 1F 7B 
0edf6     7F 7F 00 E7 
0edfa     2F 00 BB DA 
0edfe     C0 CB 27 20 | 	byte	$14, $ec, $1f, $7b, $7f, $7f, $00, $e7, $2f, $00, $bb, $da, $c0, $cb, $27, $20
0ee02     37 7F 50 1F 
0ee06     10 1F 38 F0 
0ee0a     CD F4 E7 2B 
0ee0e     00 D7 E0 CF | 	byte	$37, $7f, $50, $1f, $10, $1f, $38, $f0, $cd, $f4, $e7, $2b, $00, $d7, $e0, $cf
0ee12     0F 44 18 F0 
0ee16     EB 10 D0 AD 
0ee1a     F7 1F 7F 60 
0ee1e     06 D0 BB 0F | 	byte	$0f, $44, $18, $f0, $eb, $10, $d0, $ad, $f7, $1f, $7f, $60, $06, $d0, $bb, $0f
0ee22     40 80 83 1F 
0ee26     58 57 68 00 
0ee2a     FF C8 1F 30 
0ee2e     DF F0 A5 FF | 	byte	$40, $80, $83, $1f, $58, $57, $68, $00, $ff, $c8, $1f, $30, $df, $f0, $a5, $ff
0ee32     77 7F 20 FF 
0ee36     25 38 07 6F 
0ee3a     60 F4 E8 FA 
0ee3e     D0 80 97 F7 | 	byte	$77, $7f, $20, $ff, $25, $38, $07, $6f, $60, $f4, $e8, $fa, $d0, $80, $97, $f7
0ee42     F0 D3 ED E5 
0ee46     19 1B 48 D0 
0ee4a     DB D0 B4 BF 
0ee4e     6F 20 D4 A4 | 	byte	$f0, $d3, $ed, $e5, $19, $1b, $48, $d0, $db, $d0, $b4, $bf, $6f, $20, $d4, $a4
0ee52     DF 00 FB E8 
0ee56     FB 0F 2B 1B 
0ee5a     20 D5 37 00 
0ee5e     E8 D7 6F 08 | 	byte	$df, $00, $fb, $e8, $fb, $0f, $2b, $1b, $20, $d5, $37, $00, $e8, $d7, $6f, $08
0ee62     3F 40 00 AC 
0ee66     CE BF 1F 29 
0ee6a     5F 54 08 2F 
0ee6e     68 C8 EB F9 | 	byte	$3f, $40, $00, $ac, $ce, $bf, $1f, $29, $5f, $54, $08, $2f, $68, $c8, $eb, $f9
0ee72     1D 2F 20 D3 
0ee76     3F F0 DA 1F 
0ee7a     50 07 18 4F 
0ee7e     78 10 F4 0F | 	byte	$1d, $2f, $20, $d3, $3f, $f0, $da, $1f, $50, $07, $18, $4f, $78, $10, $f4, $0f
0ee82     08 EF 3F 6F 
0ee86     00 81 DF 1F 
0ee8a     20 A4 91 9F 
0ee8e     F7 3F 7F 40 | 	byte	$08, $ef, $3f, $6f, $00, $81, $df, $1f, $20, $a4, $91, $9f, $f7, $3f, $7f, $40
0ee92     0B 08 C8 A7 
0ee96     FF 28 D0 B9 
0ee9a     1F 50 E0 E7 
0ee9e     D8 B3 EB 1D | 	byte	$0b, $08, $c8, $a7, $ff, $28, $d0, $b9, $1f, $50, $e0, $e7, $d8, $b3, $eb, $1d
0eea2     00 FF 10 C0 
0eea6     FF 18 16 0C 
0eeaa     E8 E7 F0 E7 
0eeae     1D 1F 18 EB | 	byte	$00, $ff, $10, $c0, $ff, $18, $16, $0c, $e8, $e7, $f0, $e7, $1d, $1f, $18, $eb
0eeb2     2F 50 09 26 
0eeb6     D0 D3 CF 37 
0eeba     E0 0F E4 DB 
0eebe     0F 5D 77 70 | 	byte	$2f, $50, $09, $26, $d0, $d3, $cf, $37, $e0, $0f, $e4, $db, $0f, $5d, $77, $70
0eec2     C0 CF 0F 40 
0eec6     F0 1B 3E 20 
0eeca     0F 38 37 40 
0eece     1F 5C 40 00 | 	byte	$c0, $cf, $0f, $40, $f0, $1b, $3e, $20, $0f, $38, $37, $40, $1f, $5c, $40, $00
0eed2     D2 EF 4F 39 
0eed6     4E 10 D8 BB 
0eeda     0F F4 04 E0 
0eede     DF D0 D7 FB | 	byte	$d2, $ef, $4f, $39, $4e, $10, $d8, $bb, $0f, $f4, $04, $e0, $df, $d0, $d7, $fb
0eee2     3B 6C 20 EF 
0eee6     2F 00 D8 CD 
0eeea     A8 A7 EF FF 
0eeee     35 2E 22 14 | 	byte	$3b, $6c, $20, $ef, $2f, $00, $d8, $cd, $a8, $a7, $ef, $ff, $35, $2e, $22, $14
0eef2     C8 80 BF F7 
0eef6     16 F0 B0 A7 
0eefa     E2 B1 F4 C8 
0eefe     FF 22 4F 6F | 	byte	$c8, $80, $bf, $f7, $16, $f0, $b0, $a7, $e2, $b1, $f4, $c8, $ff, $22, $4f, $6f
0ef02     7C 20 BF 1F 
0ef06     08 D9 F4 E4 
0ef0a     ED 17 00 C5 
0ef0e     FE DE 0A 2F | 	byte	$7c, $20, $bf, $1f, $08, $d9, $f4, $e4, $ed, $17, $00, $c5, $fe, $de, $0a, $2f
0ef12     72 14 3F 44 
0ef16     57 7F 60 07 
0ef1a     49 20 E0 D7 
0ef1e     08 AD EF 0B | 	byte	$72, $14, $3f, $44, $57, $7f, $60, $07, $49, $20, $e0, $d7, $08, $ad, $ef, $0b
0ef22     4A 00 2F 48 
0ef26     C0 D7 08 CF 
0ef2a     7F 48 3A D0 
0ef2e     FF 1D 32 E0 | 	byte	$4a, $00, $2f, $48, $c0, $d7, $08, $cf, $7f, $48, $3a, $d0, $ff, $1d, $32, $e0
0ef32     EF 3F 40 A4 
0ef36     BF FB 12 03 
0ef3a     08 C0 F7 0A 
0ef3e     00 D8 EF D0 | 	byte	$ef, $3f, $40, $a4, $bf, $fb, $12, $03, $08, $c0, $f7, $0a, $00, $d8, $ef, $d0
0ef42     C0 B1 F5 C0 
0ef46     D7 32 E0 B7 
0ef4a     FD E0 EF C0 
0ef4e     80 BF 3F 6B | 	byte	$c0, $b1, $f5, $c0, $d7, $32, $e0, $b7, $fd, $e0, $ef, $c0, $80, $bf, $3f, $6b
0ef52     40 DC D0 CF 
0ef56     18 FB 57 22 
0ef5a     20 0F 58 00 
0ef5e     3F 7F 7F D0 | 	byte	$40, $dc, $d0, $cf, $18, $fb, $57, $22, $20, $0f, $58, $00, $3f, $7f, $7f, $d0
0ef62     FF 1F 30 E0 
0ef66     8C 9F 3F 7E 
0ef6a     60 10 E4 FD 
0ef6e     00 FF 27 47 | 	byte	$ff, $1f, $30, $e0, $8c, $9f, $3f, $7e, $60, $10, $e4, $fd, $00, $ff, $27, $47
0ef72     4A 24 12 1F 
0ef76     1A 33 00 B7 
0ef7a     2F 6C 20 D0 
0ef7e     98 80 80 15 | 	byte	$4a, $24, $12, $1f, $1a, $33, $00, $b7, $2f, $6c, $20, $d0, $98, $80, $80, $15
0ef82     EF 1D 07 3F 
0ef86     00 F0 C7 FD 
0ef8a     D8 E9 FF 36 
0ef8e     F2 4F 70 14 | 	byte	$ef, $1d, $07, $3f, $00, $f0, $c7, $fd, $d8, $e9, $ff, $36, $f2, $4f, $70, $14
0ef92     0F 00 EF 3F 
0ef96     48 00 28 EA 
0ef9a     E8 93 EF 13 
0ef9e     6F 50 08 C8 | 	byte	$0f, $00, $ef, $3f, $48, $00, $28, $ea, $e8, $93, $ef, $13, $6f, $50, $08, $c8
0efa2     CD FF 64 20 
0efa6     24 11 04 C5 
0efaa     D5 EF 10 D3 
0efae     FF 20 A0 9F | 	byte	$cd, $ff, $64, $20, $24, $11, $04, $c5, $d5, $ef, $10, $d3, $ff, $20, $a0, $9f
0efb2     1F 38 10 F2 
0efb6     FF 37 6A 28 
0efba     D7 F9 E8 D9 
0efbe     F5 06 3F 74 | 	byte	$1f, $38, $10, $f2, $ff, $37, $6a, $28, $d7, $f9, $e8, $d9, $f5, $06, $3f, $74
0efc2     40 C8 9B CF 
0efc6     CB FF 27 08 
0efca     B0 B9 C0 DF 
0efce     E4 D7 EC B0 | 	byte	$40, $c8, $9b, $cf, $cb, $ff, $27, $08, $b0, $b9, $c0, $df, $e4, $d7, $ec, $b0
0efd2     EF 5E 57 68 
0efd6     40 D0 CF 1F 
0efda     65 48 08 00 
0efde     EF 5F 54 1E | 	byte	$ef, $5e, $57, $68, $40, $d0, $cf, $1f, $65, $48, $08, $00, $ef, $5f, $54, $1e
0efe2     22 2B 54 2F 
0efe6     6B 48 48 02 
0efea     F9 F7 37 3F 
0efee     7F 7F 74 00 | 	byte	$22, $2b, $54, $2f, $6b, $48, $48, $02, $f9, $f7, $37, $3f, $7f, $7f, $74, $00
0eff2     2E A0 80 8F 
0eff6     E2 D5 1B C8 
0effa     83 BF EF E0 
0effe     9F DF 0F E0 | 	byte	$2e, $a0, $80, $8f, $e2, $d5, $1b, $c8, $83, $bf, $ef, $e0, $9f, $df, $0f, $e0
0f002     27 C0 8F 54 
0f006     22 10 DF 10 
0f00a     8F 17 2F 20 
0f00e     DD FF 27 00 | 	byte	$27, $c0, $8f, $54, $22, $10, $df, $10, $8f, $17, $2f, $20, $dd, $ff, $27, $00
0f012     87 EF 3F 40 
0f016     3F 60 00 F4 
0f01a     F3 E8 EF 3E 
0f01e     20 00 D9 E7 | 	byte	$87, $ef, $3f, $40, $3f, $60, $00, $f4, $f3, $e8, $ef, $3e, $20, $00, $d9, $e7
0f022     0D 19 0F 00 
0f026     EB E0 B2 BF 
0f02a     57 78 30 25 
0f02e     77 50 C7 F7 | 	byte	$0d, $19, $0f, $00, $eb, $e0, $b2, $bf, $57, $78, $30, $25, $77, $50, $c7, $f7
0f032     37 44 1C 37 
0f036     40 25 66 00 
0f03a     8F E7 0A 06 
0f03e     C0 BF 01 E5 | 	byte	$37, $44, $1c, $37, $40, $25, $66, $00, $8f, $e7, $0a, $06, $c0, $bf, $01, $e5
0f042     08 EE D4 9B 
0f046     CF F7 39 10 
0f04a     A0 95 CF 17 
0f04e     23 3F 40 05 | 	byte	$08, $ee, $d4, $9b, $cf, $f7, $39, $10, $a0, $95, $cf, $17, $23, $3f, $40, $05
0f052     2F 22 07 14 
0f056     EA FF 6F 7F 
0f05a     00 D7 EF 27 
0f05e     40 00 F7 57 | 	byte	$2f, $22, $07, $14, $ea, $ff, $6f, $7f, $00, $d7, $ef, $27, $40, $00, $f7, $57
0f062     68 2A 4D 18 
0f066     EB 08 DD EF 
0f06a     EC CD FB 00 
0f06e     FF 20 1F 00 | 	byte	$68, $2a, $4d, $18, $eb, $08, $dd, $ef, $ec, $cd, $fb, $00, $ff, $20, $1f, $00
0f072     D5 FF 5F 60 
0f076     E8 D8 C6 A8 
0f07a     9F E0 84 BF 
0f07e     34 00 C1 D4 | 	byte	$d5, $ff, $5f, $60, $e8, $d8, $c6, $a8, $9f, $e0, $84, $bf, $34, $00, $c1, $d4
0f082     C0 D2 BD EF 
0f086     5F 40 D9 FB 
0f08a     F4 C0 AB 2F 
0f08e     20 BA EF 1F | 	byte	$c0, $d2, $bd, $ef, $5f, $40, $d9, $fb, $f4, $c0, $ab, $2f, $20, $ba, $ef, $1f
0f092     7F 40 F4 E6 
0f096     E8 9F FF 48 
0f09a     57 30 14 F4 
0f09e     EC BF 5F 70 | 	byte	$7f, $40, $f4, $e6, $e8, $9f, $ff, $48, $57, $30, $14, $f4, $ec, $bf, $5f, $70
0f0a2     52 14 E0 C7 
0f0a6     1F 28 10 FF 
0f0aa     7F 7F 68 24 
0f0ae     EC F7 5F 78 | 	byte	$52, $14, $e0, $c7, $1f, $28, $10, $ff, $7f, $7f, $68, $24, $ec, $f7, $5f, $78
0f0b2     37 30 98 DF 
0f0b6     05 E0 D7 67 
0f0ba     6B 7F 10 1C 
0f0be     00 C0 80 EF | 	byte	$37, $30, $98, $df, $05, $e0, $d7, $67, $6b, $7f, $10, $1c, $00, $c0, $80, $ef
0f0c2     DB 27 00 C0 
0f0c6     97 DC D3 FF 
0f0ca     39 E0 DF E0 
0f0ce     80 BF 10 E0 | 	byte	$db, $27, $00, $c0, $97, $dc, $d3, $ff, $39, $e0, $df, $e0, $80, $bf, $10, $e0
0f0d2     C0 A7 DE EF 
0f0d6     30 00 E8 A8 
0f0da     80 AF 27 48 
0f0de     14 6F 40 C7 | 	byte	$c0, $a7, $de, $ef, $30, $00, $e8, $a8, $80, $af, $27, $48, $14, $6f, $40, $c7
0f0e2     F0 C6 FF 4F 
0f0e6     28 4F 20 B2 
0f0ea     DB 17 3F 30 
0f0ee     F8 1F 67 4C | 	byte	$f0, $c6, $ff, $4f, $28, $4f, $20, $b2, $db, $17, $3f, $30, $f8, $1f, $67, $4c
0f0f2     20 07 24 E6 
0f0f6     10 A0 BF 1A 
0f0fa     3F 00 BF 47 
0f0fe     38 00 2F 40 | 	byte	$20, $07, $24, $e6, $10, $a0, $bf, $1a, $3f, $00, $bf, $47, $38, $00, $2f, $40
0f102     0C 1A 10 C0 
0f106     9F D7 CD EF 
0f10a     FF 1F 17 26 
0f10e     ED 2F 00 FF | 	byte	$0c, $1a, $10, $c0, $9f, $d7, $cd, $ef, $ff, $1f, $17, $26, $ed, $2f, $00, $ff
0f112     10 17 28 23 
0f116     F0 EF 18 DD 
0f11a     1B 2F 5F 7F 
0f11e     48 1B 2C 2B | 	byte	$10, $17, $28, $23, $f0, $ef, $18, $dd, $1b, $2f, $5f, $7f, $48, $1b, $2c, $2b
0f122     57 58 5B 60 
0f126     06 4F 50 90 
0f12a     AF 1B 22 26 
0f12e     38 00 B2 CF | 	byte	$57, $58, $5b, $60, $06, $4f, $50, $90, $af, $1b, $22, $26, $38, $00, $b2, $cf
0f132     DF 0F 2B 5E 
0f136     00 80 80 DB 
0f13a     CC F7 FF 2F 
0f13e     67 50 D1 EF | 	byte	$df, $0f, $2b, $5e, $00, $80, $80, $db, $cc, $f7, $ff, $2f, $67, $50, $d1, $ef
0f142     B0 88 97 DF 
0f146     E5 1D E8 88 
0f14a     80 A7 BF 0F 
0f14e     37 30 E0 F7 | 	byte	$b0, $88, $97, $df, $e5, $1d, $e8, $88, $80, $a7, $bf, $0f, $37, $30, $e0, $f7
0f152     1A 18 C8 A7 
0f156     D0 AF FF 2A 
0f15a     E3 37 00 CF 
0f15e     C0 FF 67 7F | 	byte	$1a, $18, $c8, $a7, $d0, $af, $ff, $2a, $e3, $37, $00, $cf, $c0, $ff, $67, $7f
0f162     40 3F 10 EC 
0f166     C8 1F 70 64 
0f16a     28 7F 7F E8 
0f16e     E7 1F 34 00 | 	byte	$40, $3f, $10, $ec, $c8, $1f, $70, $64, $28, $7f, $7f, $e8, $e7, $1f, $34, $00
0f172     3F 50 34 0F 
0f176     77 7C 7B 7C 
0f17a     00 80 AF DF 
0f17e     5F 78 10 F7 | 	byte	$3f, $50, $34, $0f, $77, $7c, $7b, $7c, $00, $80, $af, $df, $5f, $78, $10, $f7
0f182     3A 07 58 00 
0f186     EC BB 37 E0 
0f18a     CF B0 C0 AF 
0f18e     17 20 17 6F | 	byte	$3a, $07, $58, $00, $ec, $bb, $37, $e0, $cf, $b0, $c0, $af, $17, $20, $17, $6f
0f192     40 AF 1F 24 
0f196     E8 2B E0 AF 
0f19a     B8 D7 14 07 
0f19e     30 10 F4 0A | 	byte	$40, $af, $1f, $24, $e8, $2b, $e0, $af, $b8, $d7, $14, $07, $30, $10, $f4, $0a
0f1a2     C0 BF EA A0 
0f1a6     80 80 80 AF 
0f1aa     27 18 C0 87 
0f1ae     EF 05 00 0F | 	byte	$c0, $bf, $ea, $a0, $80, $80, $80, $af, $27, $18, $c0, $87, $ef, $05, $00, $0f
0f1b2     62 00 C9 FF 
0f1b6     5F 7F 54 26 
0f1ba     4F 7F 60 0F 
0f1be     50 20 E0 CF | 	byte	$62, $00, $c9, $ff, $5f, $7f, $54, $26, $4f, $7f, $60, $0f, $50, $20, $e0, $cf
0f1c2     0B 27 72 20 
0f1c6     00 80 80 BF 
0f1ca     0D 37 48 2B 
0f1ce     6F 7F 60 00 | 	byte	$0b, $27, $72, $20, $00, $80, $80, $bf, $0d, $37, $48, $2b, $6f, $7f, $60, $00
0f1d2     A4 A7 C5 CB 
0f1d6     17 04 B7 0F 
0f1da     11 08 FF 3F 
0f1de     43 38 18 E7 | 	byte	$a4, $a7, $c5, $cb, $17, $04, $b7, $0f, $11, $08, $ff, $3f, $43, $38, $18, $e7
0f1e2     5F 60 F2 D4 
0f1e6     3F 7F 7F 70 
0f1ea     CF 00 9F DC 
0f1ee     D7 0A E8 D0 | 	byte	$5f, $60, $f2, $d4, $3f, $7f, $7f, $70, $cf, $00, $9f, $dc, $d7, $0a, $e8, $d0
0f1f2     80 80 AF 33 
0f1f6     1B 56 E0 9F 
0f1fa     E7 18 A0 9F 
0f1fe     C8 CF 2B 42 | 	byte	$80, $80, $af, $33, $1b, $56, $e0, $9f, $e7, $18, $a0, $9f, $c8, $cf, $2b, $42
0f202     26 5F 20 2E 
0f206     C0 80 F7 2E 
0f20a     29 40 00 5F 
0f20e     60 29 18 57 | 	byte	$26, $5f, $20, $2e, $c0, $80, $f7, $2e, $29, $40, $00, $5f, $60, $29, $18, $57
0f212     10 FD A8 B7 
0f216     1F 2D 01 16 
0f21a     E0 B4 CF D4 
0f21e     A3 EB C0 EB | 	byte	$10, $fd, $a8, $b7, $1f, $2d, $01, $16, $e0, $b4, $cf, $d4, $a3, $eb, $c0, $eb
0f222     DA FB A8 80 
0f226     80 BF 5F 78 
0f22a     28 E0 DF 37 
0f22e     3B 7F 7F 40 | 	byte	$da, $fb, $a8, $80, $80, $bf, $5f, $78, $28, $e0, $df, $37, $3b, $7f, $7f, $40
0f232     17 E0 8F CF 
0f236     0B 10 13 6F 
0f23a     7F 40 3B 20 
0f23e     0D 1F 49 4F | 	byte	$17, $e0, $8f, $cf, $0b, $10, $13, $6f, $7f, $40, $3b, $20, $0d, $1f, $49, $4f
0f242     7F 40 20 EB 
0f246     00 AF 2F 41 
0f24a     47 62 20 88 
0f24e     80 80 88 9F | 	byte	$7f, $40, $20, $eb, $00, $af, $2f, $41, $47, $62, $20, $88, $80, $80, $88, $9f
0f252     3F 6C 4C 57 
0f256     34 00 B6 D4 
0f25a     BF 4F 6C 5A 
0f25e     3A 67 24 1E | 	byte	$3f, $6c, $4c, $57, $34, $00, $b6, $d4, $bf, $4f, $6c, $5a, $3a, $67, $24, $1e
0f262     1D 27 24 00 
0f266     C1 D8 A0 8F 
0f26a     1F 20 80 80 
0f26e     BF DF 0F 20 | 	byte	$1d, $27, $24, $00, $c1, $d8, $a0, $8f, $1f, $20, $80, $80, $bf, $df, $0f, $20
0f272     E0 C0 A8 80 
0f276     AF E0 A2 94 
0f27a     DF 30 C0 C9 
0f27e     F7 3B 34 C0 | 	byte	$e0, $c0, $a8, $80, $af, $e0, $a2, $94, $df, $30, $c0, $c9, $f7, $3b, $34, $c0
0f282     80 9F 17 57 
0f286     7F 60 77 78 
0f28a     5B 77 7F 7E 
0f28e     6E 53 64 E0 | 	byte	$80, $9f, $17, $57, $7f, $60, $77, $78, $5b, $77, $7f, $7e, $6e, $53, $64, $e0
0f292     EF D1 0A EF 
0f296     6B 00 93 AF 
0f29a     90 81 EC 84 
0f29e     FF 38 4F 6F | 	byte	$ef, $d1, $0a, $ef, $6b, $00, $93, $af, $90, $81, $ec, $84, $ff, $38, $4f, $6f
0f2a2     68 1F 72 14 
0f2a6     5E F0 2F 27 
0f2aa     7F 60 20 09 
0f2ae     F8 CF 08 BD | 	byte	$68, $1f, $72, $14, $5e, $f0, $2f, $27, $7f, $60, $20, $09, $f8, $cf, $08, $bd
0f2b2     07 FF 7F 50 
0f2b6     36 08 08 88 
0f2ba     9F 9F FF 0A 
0f2be     31 08 B8 FF | 	byte	$07, $ff, $7f, $50, $36, $08, $08, $88, $9f, $9f, $ff, $0a, $31, $08, $b8, $ff
0f2c2     50 23 00 C7 
0f2c6     00 94 D7 DF 
0f2ca     F8 EF 67 08 
0f2ce     FF 19 4F 58 | 	byte	$50, $23, $00, $c7, $00, $94, $d7, $df, $f8, $ef, $67, $08, $ff, $19, $4f, $58
0f2d2     4F 48 00 00 
0f2d6     90 9B D3 EF 
0f2da     FF 5F 40 E7 
0f2de     D0 80 9F B9 | 	byte	$4f, $48, $00, $00, $90, $9b, $d3, $ef, $ff, $5f, $40, $e7, $d0, $80, $9f, $b9
0f2e2     A0 9F C8 80 
0f2e6     81 DF 20 C8 
0f2ea     D3 F7 1B 43 
0f2ee     40 08 E2 E5 | 	byte	$a0, $9f, $c8, $80, $81, $df, $20, $c8, $d3, $f7, $1b, $43, $40, $08, $e2, $e5
0f2f2     2F 28 D8 D3 
0f2f6     FF 1F 6F 7F 
0f2fa     64 14 5F 7F 
0f2fe     7F 7F 74 10 | 	byte	$2f, $28, $d8, $d3, $ff, $1f, $6f, $7f, $64, $14, $5f, $7f, $7f, $7f, $74, $10
0f302     11 D3 3F 40 
0f306     37 57 70 E0 
0f30a     F3 B0 1F 40 
0f30e     21 F0 E4 B4 | 	byte	$11, $d3, $3f, $40, $37, $57, $70, $e0, $f3, $b0, $1f, $40, $21, $f0, $e4, $b4
0f312     CF DF 2B 08 
0f316     D8 C5 17 68 
0f31a     30 F2 37 20 
0f31e     A3 FF 28 3F | 	byte	$cf, $df, $2b, $08, $d8, $c5, $17, $68, $30, $f2, $37, $20, $a3, $ff, $28, $3f
0f322     6D 50 2B 34 
0f326     2A 25 12 D8 
0f32a     98 9D B0 AB 
0f32e     EB 3F 08 A0 | 	byte	$6d, $50, $2b, $34, $2a, $25, $12, $d8, $98, $9d, $b0, $ab, $eb, $3f, $08, $a0
0f332     97 BF AC 8A 
0f336     80 80 80 BF 
0f33a     E0 90 BF 0F 
0f33e     27 34 E8 E0 | 	byte	$97, $bf, $ac, $8a, $80, $80, $80, $bf, $e0, $90, $bf, $0f, $27, $34, $e8, $e0
0f342     8B 1F 7F 60 
0f346     20 0A 17 2B 
0f34a     7B 7F 7A 76 
0f34e     7F 70 E8 B0 | 	byte	$8b, $1f, $7f, $60, $20, $0a, $17, $2b, $7b, $7f, $7a, $76, $7f, $70, $e8, $b0
0f352     9F 0F 3B 67 
0f356     58 00 3F 70 
0f35a     30 F4 F7 17 
0f35e     5B 7F 60 C8 | 	byte	$9f, $0f, $3b, $67, $58, $00, $3f, $70, $30, $f4, $f7, $17, $5b, $7f, $60, $c8
0f362     90 80 1F 2E 
0f366     6B 68 6C 42 
0f36a     7F 60 90 AF 
0f36e     16 3F 7F 78 | 	byte	$90, $80, $1f, $2e, $6b, $68, $6c, $42, $7f, $60, $90, $af, $16, $3f, $7f, $78
0f372     00 B2 D5 A0 
0f376     80 8F 92 9F 
0f37a     C0 DF E0 9F 
0f37e     DF 37 40 0F | 	byte	$00, $b2, $d5, $a0, $80, $8f, $92, $9f, $c0, $df, $e0, $9f, $df, $37, $40, $0f
0f382     10 DF E0 AF 
0f386     D0 AF B0 80 
0f38a     87 17 00 DF 
0f38e     C8 89 B7 1F | 	byte	$10, $df, $e0, $af, $d0, $af, $b0, $80, $87, $17, $00, $df, $c8, $89, $b7, $1f
0f392     7F 78 C5 3F 
0f396     30 0A F7 20 
0f39a     DB 3F 21 40 
0f39e     E4 A0 CF 05 | 	byte	$7f, $78, $c5, $3f, $30, $0a, $f7, $20, $db, $3f, $21, $40, $e4, $a0, $cf, $05
0f3a2     0F 00 FF 4A 
0f3a6     20 F0 1F 0C 
0f3aa     0F E0 DF E8 
0f3ae     AA DF 38 37 | 	byte	$0f, $00, $ff, $4a, $20, $f0, $1f, $0c, $0f, $e0, $df, $e8, $aa, $df, $38, $37
0f3b2     7F 7F 78 10 
0f3b6     F9 F0 90 BF 
0f3ba     06 3F 7F 7F 
0f3be     20 3B 08 F7 | 	byte	$7f, $7f, $78, $10, $f9, $f0, $90, $bf, $06, $3f, $7f, $7f, $20, $3b, $08, $f7
0f3c2     F0 AD BB DF 
0f3c6     73 7F 7F 70 
0f3ca     54 5F 7E 10 
0f3ce     D0 B0 80 B7 | 	byte	$f0, $ad, $bb, $df, $73, $7f, $7f, $70, $54, $5f, $7e, $10, $d0, $b0, $80, $b7
0f3d2     F0 8F FF 10 
0f3d6     90 9F 1F 7F 
0f3da     40 C3 D3 FB 
0f3de     E8 1B 24 2F | 	byte	$f0, $8f, $ff, $10, $90, $9f, $1f, $7f, $40, $c3, $d3, $fb, $e8, $1b, $24, $2f
0f3e2     28 0A D3 E2 
0f3e6     BB EF 1B 00 
0f3ea     B3 80 83 1F 
0f3ee     E0 B2 BF 31 | 	byte	$28, $0a, $d3, $e2, $bb, $ef, $1b, $00, $b3, $80, $83, $1f, $e0, $b2, $bf, $31
0f3f2     C0 80 80 80 
0f3f6     83 FF 14 E0 
0f3fa     E5 B0 9F FF 
0f3fe     7F 50 45 3A | 	byte	$c0, $80, $80, $80, $83, $ff, $14, $e0, $e5, $b0, $9f, $ff, $7f, $50, $45, $3a
0f402     38 00 0F E0 
0f406     B5 FF 6F 7F 
0f40a     50 EF 3F 7F 
0f40e     7F 50 22 4F | 	byte	$38, $00, $0f, $e0, $b5, $ff, $6f, $7f, $50, $ef, $3f, $7f, $7f, $50, $22, $4f
0f412     48 5F 7F 78 
0f416     10 09 F9 5F 
0f41a     70 B0 B7 F5 
0f41e     03 04 A0 80 | 	byte	$48, $5f, $7f, $78, $10, $09, $f9, $5f, $70, $b0, $b7, $f5, $03, $04, $a0, $80
0f422     FF F0 37 50 
0f426     57 76 72 50 
0f42a     2B 14 0F 20 
0f42e     EB 24 F6 00 | 	byte	$ff, $f0, $37, $50, $57, $76, $72, $50, $2b, $14, $0f, $20, $eb, $24, $f6, $00
0f432     D1 DF 1F 44 
0f436     00 D7 30 A8 
0f43a     BF 44 E8 80 
0f43e     80 81 DF E8 | 	byte	$d1, $df, $1f, $44, $00, $d7, $30, $a8, $bf, $44, $e8, $80, $80, $81, $df, $e8
0f442     EF F0 D4 C8 
0f446     98 80 8F 80 
0f44a     EF C0 FF 3B 
0f44e     38 18 E0 80 | 	byte	$ef, $f0, $d4, $c8, $98, $80, $8f, $80, $ef, $c0, $ff, $3b, $38, $18, $e0, $80
0f452     80 8F 0F 34 
0f456     E4 DA B5 5F 
0f45a     7F 7F 7E 70 
0f45e     10 27 2E 6D | 	byte	$80, $8f, $0f, $34, $e4, $da, $b5, $5f, $7f, $7f, $7e, $70, $10, $27, $2e, $6d
0f462     24 2B 20 2F 
0f466     40 1B 6F 70 
0f46a     7A 6D 78 C8 
0f46e     EF 4F 50 3D | 	byte	$24, $2b, $20, $2f, $40, $1b, $6f, $70, $7a, $6d, $78, $c8, $ef, $4f, $50, $3d
0f472     64 E0 FF 58 
0f476     48 28 00 FF 
0f47a     44 18 18 EF 
0f47e     17 00 CB FF | 	byte	$64, $e0, $ff, $58, $48, $28, $00, $ff, $44, $18, $18, $ef, $17, $00, $cb, $ff
0f482     38 E0 FF 44 
0f486     E0 B7 C0 80 
0f48a     AB 80 80 F7 
0f48e     E8 F7 00 80 | 	byte	$38, $e0, $ff, $44, $e0, $b7, $c0, $80, $ab, $80, $80, $f7, $e8, $f7, $00, $80
0f492     80 81 AF C0 
0f496     BF 18 A0 97 
0f49a     AF 1F E0 C4 
0f49e     CB F5 1F 7F | 	byte	$80, $81, $af, $c0, $bf, $18, $a0, $97, $af, $1f, $e0, $c4, $cb, $f5, $1f, $7f
0f4a2     7F 40 CF 6F 
0f4a6     50 7F 64 2F 
0f4aa     76 58 50 00 
0f4ae     FB 1C 1F 57 | 	byte	$7f, $40, $cf, $6f, $50, $7f, $64, $2f, $76, $58, $50, $00, $fb, $1c, $1f, $57
0f4b2     30 80 9F FF 
0f4b6     60 14 1F 1B 
0f4ba     17 57 7C 00 
0f4be     17 07 3F 39 | 	byte	$30, $80, $9f, $ff, $60, $14, $1f, $1b, $17, $57, $7c, $00, $17, $07, $3f, $39
0f4c2     32 00 11 13 
0f4c6     25 20 E0 A7 
0f4ca     BD EF 08 FB 
0f4ce     54 00 CC DF | 	byte	$32, $00, $11, $13, $25, $20, $e0, $a7, $bd, $ef, $08, $fb, $54, $00, $cc, $df
0f4d2     4F 20 80 80 
0f4d6     95 BF FB E0 
0f4da     CB FF 28 2B 
0f4de     20 C8 D6 D5 | 	byte	$4f, $20, $80, $80, $95, $bf, $fb, $e0, $cb, $ff, $28, $2b, $20, $c8, $d6, $d5
0f4e2     D9 A0 80 FF 
0f4e6     6C 4F 7A 50 
0f4ea     3F 48 24 0F 
0f4ee     2F 2F 7F 7F | 	byte	$d9, $a0, $80, $ff, $6c, $4f, $7a, $50, $3f, $48, $24, $0f, $2f, $2f, $7f, $7f
0f4f2     50 7E 60 E9 
0f4f6     22 08 E0 DF 
0f4fa     10 80 9F FF 
0f4fe     48 E0 80 80 | 	byte	$50, $7e, $60, $e9, $22, $08, $e0, $df, $10, $80, $9f, $ff, $48, $e0, $80, $80
0f502     80 DF 5B 20 
0f506     00 C4 9B EB 
0f50a     C0 A8 8B 1F 
0f50e     10 E0 D3 D6 | 	byte	$80, $df, $5b, $20, $00, $c4, $9b, $eb, $c0, $a8, $8b, $1f, $10, $e0, $d3, $d6
0f512     BD E7 DF 37 
0f516     0C 3F 20 17 
0f51a     2F 7F 7F 50 
0f51e     03 37 75 40 | 	byte	$bd, $e7, $df, $37, $0c, $3f, $20, $17, $2f, $7f, $7f, $50, $03, $37, $75, $40
0f522     ED 2A 00 2F 
0f526     4A 35 3F 7F 
0f52a     7F C0 80 BF 
0f52e     E7 3F 20 F9 | 	byte	$ed, $2a, $00, $2f, $4a, $35, $3f, $7f, $7f, $c0, $80, $bf, $e7, $3f, $20, $f9
0f532     FB 3B 5E 64 
0f536     45 60 40 38 
0f53a     C0 80 80 AF 
0f53e     37 38 33 40 | 	byte	$fb, $3b, $5e, $64, $45, $60, $40, $38, $c0, $80, $80, $af, $37, $38, $33, $40
0f542     00 80 8F B7 
0f546     EB B0 EF 10 
0f54a     CF 4F 28 A1 
0f54e     E7 D0 BF EF | 	byte	$00, $80, $8f, $b7, $eb, $b0, $ef, $10, $cf, $4f, $28, $a1, $e7, $d0, $bf, $ef
0f552     B0 8F AF AC 
0f556     BF 00 B4 DB 
0f55a     FF 28 D8 EF 
0f55e     A8 B7 77 74 | 	byte	$b0, $8f, $af, $ac, $bf, $00, $b4, $db, $ff, $28, $d8, $ef, $a8, $b7, $77, $74
0f562     30 1F 00 84 
0f566     B7 37 04 3F 
0f56a     70 3A 6F 6F 
0f56e     7A 74 20 FF | 	byte	$30, $1f, $00, $84, $b7, $37, $04, $3f, $70, $3a, $6f, $6f, $7a, $74, $20, $ff
0f572     6A 40 38 18 
0f576     1F 6F 70 7F 
0f57a     70 1D 18 F8 
0f57e     E2 1F E0 BF | 	byte	$6a, $40, $38, $18, $1f, $6f, $70, $7f, $70, $1d, $18, $f8, $e2, $1f, $e0, $bf
0f582     E9 FB 5F 60 
0f586     2F 62 30 D0 
0f58a     80 9F B1 A2 
0f58e     DF D5 1F 20 | 	byte	$e9, $fb, $5f, $60, $2f, $62, $30, $d0, $80, $9f, $b1, $a2, $df, $d5, $1f, $20
0f592     EF 4E E0 80 
0f596     9F E8 E3 D4 
0f59a     E7 C0 BE B2 
0f59e     98 9F BF F7 | 	byte	$ef, $4e, $e0, $80, $9f, $e8, $e3, $d4, $e7, $c0, $be, $b2, $98, $9f, $bf, $f7
0f5a2     27 3F 78 10 
0f5a6     BA 80 8F ED 
0f5aa     C0 FF 33 4F 
0f5ae     7F 70 E0 AF | 	byte	$27, $3f, $78, $10, $ba, $80, $8f, $ed, $c0, $ff, $33, $4f, $7f, $70, $e0, $af
0f5b2     F7 EF 3F 58 
0f5b6     10 FF 77 64 
0f5ba     34 15 10 C8 
0f5be     BB D7 02 0F | 	byte	$f7, $ef, $3f, $58, $10, $ff, $77, $64, $34, $15, $10, $c8, $bb, $d7, $02, $0f
0f5c2     34 1F 5B 48 
0f5c6     57 7C E0 17 
0f5ca     08 F5 2F 64 
0f5ce     00 0F 28 00 | 	byte	$34, $1f, $5b, $48, $57, $7c, $e0, $17, $08, $f5, $2f, $64, $00, $0f, $28, $00
0f5d2     CF 23 F0 1B 
0f5d6     49 28 03 F4 
0f5da     1F 40 2F 68 
0f5de     0D 08 A0 BF | 	byte	$cf, $23, $f0, $1b, $49, $28, $03, $f4, $1f, $40, $2f, $68, $0d, $08, $a0, $bf
0f5e2     3F 23 53 20 
0f5e6     E0 9F 0F 18 
0f5ea     0E E8 EC FF 
0f5ee     6F 62 30 A0 | 	byte	$3f, $23, $53, $20, $e0, $9f, $0f, $18, $0e, $e8, $ec, $ff, $6f, $62, $30, $a0
0f5f2     80 80 80 8F 
0f5f6     1F C0 BF 5F 
0f5fa     40 F7 3F 40 
0f5fe     E0 80 AF 0D | 	byte	$80, $80, $80, $8f, $1f, $c0, $bf, $5f, $40, $f7, $3f, $40, $e0, $80, $af, $0d
0f602     C0 80 FF 10 
0f606     1B 10 D0 C5 
0f60a     FF 28 13 F0 
0f60e     FF 08 A0 80 | 	byte	$c0, $80, $ff, $10, $1b, $10, $d0, $c5, $ff, $28, $13, $f0, $ff, $08, $a0, $80
0f612     DF 5A 20 15 
0f616     3D 20 F2 08 
0f61a     D0 80 BF E0 
0f61e     EF 3F 38 00 | 	byte	$df, $5a, $20, $15, $3d, $20, $f2, $08, $d0, $80, $bf, $e0, $ef, $3f, $38, $00
0f622     3F 20 0F 28 
0f626     36 00 2F 7F 
0f62a     7E 30 7F 7F 
0f62e     7F 74 75 60 | 	byte	$3f, $20, $0f, $28, $36, $00, $2f, $7f, $7e, $30, $7f, $7f, $7f, $74, $75, $60
0f632     3F 7F 70 20 
0f636     D4 2F 40 5F 
0f63a     60 2F 30 88 
0f63e     80 80 D7 10 | 	byte	$3f, $7f, $70, $20, $d4, $2f, $40, $5f, $60, $2f, $30, $88, $80, $80, $d7, $10
0f642     A0 BF D0 EB 
0f646     1F 5F 10 17 
0f64a     34 E0 E7 00 
0f64e     98 CF D4 BF | 	byte	$a0, $bf, $d0, $eb, $1f, $5f, $10, $17, $34, $e0, $e7, $00, $98, $cf, $d4, $bf
0f652     FF 3F 6E 30 
0f656     F8 DA C0 80 
0f65a     80 B7 02 E3 
0f65e     1A D0 A8 8F | 	byte	$ff, $3f, $6e, $30, $f8, $da, $c0, $80, $80, $b7, $02, $e3, $1a, $d0, $a8, $8f
0f662     B1 A1 BF DC 
0f666     A0 83 DF 1F 
0f66a     10 C0 AA 9B 
0f66e     BF FF 40 24 | 	byte	$b1, $a1, $bf, $dc, $a0, $83, $df, $1f, $10, $c0, $aa, $9b, $bf, $ff, $40, $24
0f672     12 10 A8 FF 
0f676     18 0F 37 5C 
0f67a     4F 7F 7F 60 
0f67e     3F 7F 7F 7C | 	byte	$12, $10, $a8, $ff, $18, $0f, $37, $5c, $4f, $7f, $7f, $60, $3f, $7f, $7f, $7c
0f682     6F 78 5F 50 
0f686     3F 58 3F 74 
0f68a     77 7F 7C 20 
0f68e     1B 18 C1 FB | 	byte	$6f, $78, $5f, $50, $3f, $58, $3f, $74, $77, $7f, $7c, $20, $1b, $18, $c1, $fb
0f692     31 48 34 0F 
0f696     3E 20 C0 9A 
0f69a     80 80 93 FF 
0f69e     18 E8 A8 AB | 	byte	$31, $48, $34, $0f, $3e, $20, $c0, $9a, $80, $80, $93, $ff, $18, $e8, $a8, $ab
0f6a2     C2 CF DB 3F 
0f6a6     60 D0 B7 F0 
0f6aa     A0 80 80 ED 
0f6ae     CB E0 AB C7 | 	byte	$c2, $cf, $db, $3f, $60, $d0, $b7, $f0, $a0, $80, $80, $ed, $cb, $e0, $ab, $c7
0f6b2     90 80 87 80 
0f6b6     80 9F B7 1B 
0f6ba     27 18 C0 B7 
0f6be     EF 00 D7 3F | 	byte	$90, $80, $87, $80, $80, $9f, $b7, $1b, $27, $18, $c0, $b7, $ef, $00, $d7, $3f
0f6c2     60 00 2B 38 
0f6c6     3F 7F 7F 6C 
0f6ca     77 58 7B 78 
0f6ce     E8 DF 37 52 | 	byte	$60, $00, $2b, $38, $3f, $7f, $7f, $6c, $77, $58, $7b, $78, $e8, $df, $37, $52
0f6d2     32 00 90 9F 
0f6d6     7F 78 5F 6D 
0f6da     60 0C 04 DF 
0f6de     07 F6 F2 FF | 	byte	$32, $00, $90, $9f, $7f, $78, $5f, $6d, $60, $0c, $04, $df, $07, $f6, $f2, $ff
0f6e2     7F 60 40 E0 
0f6e6     A0 D7 52 11 
0f6ea     3F 38 11 07 
0f6ee     3F 44 2F 58 | 	byte	$7f, $60, $40, $e0, $a0, $d7, $52, $11, $3f, $38, $11, $07, $3f, $44, $2f, $58
0f6f2     E0 AF EF 37 
0f6f6     34 A0 80 97 
0f6fa     EF 2F 53 20 
0f6fe     BF 07 C0 8F | 	byte	$e0, $af, $ef, $37, $34, $a0, $80, $97, $ef, $2f, $53, $20, $bf, $07, $c0, $8f
0f702     E3 C5 ED F1 
0f706     E8 EB 16 17 
0f70a     47 28 00 AB 
0f70e     3F 40 0C E0 | 	byte	$e3, $c5, $ed, $f1, $e8, $eb, $16, $17, $47, $28, $00, $ab, $3f, $40, $0c, $e0
0f712     B0 9F E6 A0 
0f716     AF DF FF 18 
0f71a     F8 F9 F6 05 
0f71e     D0 DF E0 A1 | 	byte	$b0, $9f, $e6, $a0, $af, $df, $ff, $18, $f8, $f9, $f6, $05, $d0, $df, $e0, $a1
0f722     CF E0 DB F1 
0f726     E0 A0 EF 20 
0f72a     90 BF 4F 20 
0f72e     BC DB 1F 34 | 	byte	$cf, $e0, $db, $f1, $e0, $a0, $ef, $20, $90, $bf, $4f, $20, $bc, $db, $1f, $34
0f732     5F 7F 70 58 
0f736     17 6F 7F 60 
0f73a     17 7F 7F 7F 
0f73e     7F 28 37 5C | 	byte	$5f, $7f, $70, $58, $17, $6f, $7f, $60, $17, $7f, $7f, $7f, $7f, $28, $37, $5c
0f742     00 E7 C4 D7 
0f746     37 70 E0 AD 
0f74a     BF 4F 58 7A 
0f74e     28 F8 CA EB | 	byte	$00, $e7, $c4, $d7, $37, $70, $e0, $ad, $bf, $4f, $58, $7a, $28, $f8, $ca, $eb
0f752     CB 0F 18 1C 
0f756     17 20 D8 2F 
0f75a     30 C0 9F DF 
0f75e     1F 7D 50 C8 | 	byte	$cb, $0f, $18, $1c, $17, $20, $d8, $2f, $30, $c0, $9f, $df, $1f, $7d, $50, $c8
0f762     BF CD E7 F8 
0f766     F7 08 D4 BA 
0f76a     BB D8 85 9E 
0f76e     AF DD C0 B0 | 	byte	$bf, $cd, $e7, $f8, $f7, $08, $d4, $ba, $bb, $d8, $85, $9e, $af, $dd, $c0, $b0
0f772     98 9F CF C8 
0f776     80 80 80 80 
0f77a     97 3F 30 FF 
0f77e     00 90 EF 7C | 	byte	$98, $9f, $cf, $c8, $80, $80, $80, $80, $97, $3f, $30, $ff, $00, $90, $ef, $7c
0f782     20 FF 47 40 
0f786     2F 7F 66 77 
0f78a     7F 7F 7F 7F 
0f78e     72 7F 7F D0 | 	byte	$20, $ff, $47, $40, $2f, $7f, $66, $77, $7f, $7f, $7f, $7f, $72, $7f, $7f, $d0
0f792     DF 4F 1D 7F 
0f796     7F 48 FF 38 
0f79a     20 DD 2F 50 
0f79e     0F 6A 08 D7 | 	byte	$df, $4f, $1d, $7f, $7f, $48, $ff, $38, $20, $dd, $2f, $50, $0f, $6a, $08, $d7
0f7a2     4F 64 20 C4 
0f7a6     D7 D0 80 80 
0f7aa     97 C7 EF 09 
0f7ae     0F 05 1F 66 | 	byte	$4f, $64, $20, $c4, $d7, $d0, $80, $80, $97, $c7, $ef, $09, $0f, $05, $1f, $66
0f7b2     20 B7 00 CF 
0f7b6     FF E8 1F 4C 
0f7ba     08 C1 D0 80 
0f7be     97 2F 10 A9 | 	byte	$20, $b7, $00, $cf, $ff, $e8, $1f, $4c, $08, $c1, $d0, $80, $97, $2f, $10, $a9
0f7c2     B8 DF D0 AB 
0f7c6     A8 80 BF EF 
0f7ca     17 3F 36 6F 
0f7ce     70 00 00 D0 | 	byte	$b8, $df, $d0, $ab, $a8, $80, $bf, $ef, $17, $3f, $36, $6f, $70, $00, $00, $d0
0f7d2     DF EA F7 35 
0f7d6     3B 40 19 00 
0f7da     CF 1F 2B 40 
0f7de     15 24 C0 DF | 	byte	$df, $ea, $f7, $35, $3b, $40, $19, $00, $cf, $1f, $2b, $40, $15, $24, $c0, $df
0f7e2     00 03 13 27 
0f7e6     32 33 38 F0 
0f7ea     C8 C3 EB F9 
0f7ee     00 D0 D8 A9 | 	byte	$00, $03, $13, $27, $32, $33, $38, $f0, $c8, $c3, $eb, $f9, $00, $d0, $d8, $a9
0f7f2     DF DE E6 DF 
0f7f6     17 24 0D 3F 
0f7fa     40 07 3B 5C 
0f7fe     30 08 E8 1F | 	byte	$df, $de, $e6, $df, $17, $24, $0d, $3f, $40, $07, $3b, $5c, $30, $08, $e8, $1f
0f802     77 7F 40 5F 
0f806     60 20 E9 EA 
0f80a     F7 4B 53 76 
0f80e     00 17 77 7F | 	byte	$77, $7f, $40, $5f, $60, $20, $e9, $ea, $f7, $4b, $53, $76, $00, $17, $77, $7f
0f812     00 9E CF 3F 
0f816     00 DF 2F 20 
0f81a     B0 98 80 8F 
0f81e     2F 61 34 C8 | 	byte	$00, $9e, $cf, $3f, $00, $df, $2f, $20, $b0, $98, $80, $8f, $2f, $61, $34, $c8
0f822     AB 1F 30 10 
0f826     E0 B0 AF 1F 
0f82a     00 97 BF F7 
0f82e     2E 00 80 BF | 	byte	$ab, $1f, $30, $10, $e0, $b0, $af, $1f, $00, $97, $bf, $f7, $2e, $00, $80, $bf
0f832     7F 50 E8 82 
0f836     80 80 AF F7 
0f83a     E8 80 83 F7 
0f83e     18 E4 27 00 | 	byte	$7f, $50, $e8, $82, $80, $80, $af, $f7, $e8, $80, $83, $f7, $18, $e4, $27, $00
0f842     EF 08 B4 BF 
0f846     37 30 37 20 
0f84a     13 20 EC B0 
0f84e     DD 1F 6F 50 | 	byte	$ef, $08, $b4, $bf, $37, $30, $37, $20, $13, $20, $ec, $b0, $dd, $1f, $6f, $50
0f852     10 3F 7F 70 
0f856     50 4F 7F 70 
0f85a     30 0F 3F 5C 
0f85e     10 0B D0 AF | 	byte	$10, $3f, $7f, $70, $50, $4f, $7f, $70, $30, $0f, $3f, $5c, $10, $0b, $d0, $af
0f862     37 68 58 58 
0f866     20 F0 E3 0F 
0f86a     04 13 2F 40 
0f86e     D0 B7 1F 40 | 	byte	$37, $68, $58, $58, $20, $f0, $e3, $0f, $04, $13, $2f, $40, $d0, $b7, $1f, $40
0f872     E8 D4 D7 2B 
0f876     67 48 33 2D 
0f87a     28 E1 0F 14 
0f87e     E8 AB C7 DB | 	byte	$e8, $d4, $d7, $2b, $67, $48, $33, $2d, $28, $e1, $0f, $14, $e8, $ab, $c7, $db
0f882     C8 AB 90 80 
0f886     B7 9D BC BF 
0f88a     F4 90 80 AF 
0f88e     C8 8B EB E0 | 	byte	$c8, $ab, $90, $80, $b7, $9d, $bc, $bf, $f4, $90, $80, $af, $c8, $8b, $eb, $e0
0f892     F7 2A 3F 50 
0f896     E8 FF 00 BB 
0f89a     1F 6F 64 55 
0f89e     40 38 3C 36 | 	byte	$f7, $2a, $3f, $50, $e8, $ff, $00, $bb, $1f, $6f, $64, $55, $40, $38, $3c, $36
0f8a2     4F 6F 20 0F 
0f8a6     4B 30 A0 D7 
0f8aa     5F 77 7F 7F 
0f8ae     28 A0 9B E7 | 	byte	$4f, $6f, $20, $0f, $4b, $30, $a0, $d7, $5f, $77, $7f, $7f, $28, $a0, $9b, $e7
0f8b2     2B 4F 20 EB 
0f8b6     18 D0 87 E7 
0f8ba     C0 9F FB 00 
0f8be     E0 BA F5 0B | 	byte	$2b, $4f, $20, $eb, $18, $d0, $87, $e7, $c0, $9f, $fb, $00, $e0, $ba, $f5, $0b
0f8c2     22 2B 5F 50 
0f8c6     10 FB 47 63 
0f8ca     40 E0 B4 DF 
0f8ce     F5 2F 7F 40 | 	byte	$22, $2b, $5f, $50, $10, $fb, $47, $63, $40, $e0, $b4, $df, $f5, $2f, $7f, $40
0f8d2     BB 2F 20 1F 
0f8d6     00 EF 1B 7B 
0f8da     40 F0 A0 DF 
0f8de     3F 48 F0 D8 | 	byte	$bb, $2f, $20, $1f, $00, $ef, $1b, $7b, $40, $f0, $a0, $df, $3f, $48, $f0, $d8
0f8e2     B5 D4 80 80 
0f8e6     AF 28 E8 F7 
0f8ea     4F 58 1F 5F 
0f8ee     64 E0 A7 DA | 	byte	$b5, $d4, $80, $80, $af, $28, $e8, $f7, $4f, $58, $1f, $5f, $64, $e0, $a7, $da
0f8f2     E4 C4 BF D3 
0f8f6     0F 24 00 07 
0f8fa     04 F7 1F D0 
0f8fe     B2 D3 A0 80 | 	byte	$e4, $c4, $bf, $d3, $0f, $24, $00, $07, $04, $f7, $1f, $d0, $b2, $d3, $a0, $80
0f902     AB BF FF 00 
0f906     F7 0E 00 EF 
0f90a     EA EF 4F 68 
0f90e     44 20 04 09 | 	byte	$ab, $bf, $ff, $00, $f7, $0e, $00, $ef, $ea, $ef, $4f, $68, $44, $20, $04, $09
0f912     00 17 5F 74 
0f916     4C 40 24 2F 
0f91a     72 34 3F 10 
0f91e     DF 0F 4F 7F | 	byte	$00, $17, $5f, $74, $4c, $40, $24, $2f, $72, $34, $3f, $10, $df, $0f, $4f, $7f
0f922     7C 10 1B 2F 
0f926     40 03 57 7E 
0f92a     40 F0 E0 E7 
0f92e     0D 17 D0 AF | 	byte	$7c, $10, $1b, $2f, $40, $03, $57, $7e, $40, $f0, $e0, $e7, $0d, $17, $d0, $af
0f932     5F 48 F0 EF 
0f936     F0 C7 A8 81 
0f93a     BF 0D 18 E8 
0f93e     CA B0 B7 37 | 	byte	$5f, $48, $f0, $ef, $f0, $c7, $a8, $81, $bf, $0d, $18, $e8, $ca, $b0, $b7, $37
0f942     28 F4 DF 4F 
0f946     34 00 80 80 
0f94a     8B A0 83 BB 
0f94e     B4 CF 1F 50 | 	byte	$28, $f4, $df, $4f, $34, $00, $80, $80, $8b, $a0, $83, $bb, $b4, $cf, $1f, $50
0f952     D0 AB BF D8 
0f956     EB 3F 20 1B 
0f95a     20 F0 E3 EF 
0f95e     3F 59 60 C0 | 	byte	$d0, $ab, $bf, $d8, $eb, $3f, $20, $1b, $20, $f0, $e3, $ef, $3f, $59, $60, $c0
0f962     9F B9 F7 2B 
0f966     4F 47 7F 20 
0f96a     E7 0A 1B 3F 
0f96e     7F 60 2F 6F | 	byte	$9f, $b9, $f7, $2b, $4f, $47, $7f, $20, $e7, $0a, $1b, $3f, $7f, $60, $2f, $6f
0f972     64 40 67 7C 
0f976     20 2E 20 F7 
0f97a     1F 38 3E 1C 
0f97e     00 17 41 3F | 	byte	$64, $40, $67, $7c, $20, $2e, $20, $f7, $1f, $38, $3e, $1c, $00, $17, $41, $3f
0f982     6C 20 EA B9 
0f986     EB C8 DF 00 
0f98a     DF F4 F4 EB 
0f98e     1D E0 A8 80 | 	byte	$6c, $20, $ea, $b9, $eb, $c8, $df, $00, $df, $f4, $f4, $eb, $1d, $e0, $a8, $80
0f992     AF BD D0 80 
0f996     8F D7 0F D0 
0f99a     AD DF B0 A7 
0f99e     1F 08 2F 40 | 	byte	$af, $bd, $d0, $80, $8f, $d7, $0f, $d0, $ad, $df, $b0, $a7, $1f, $08, $2f, $40
0f9a2     00 EF 27 41 
0f9a6     3F 40 E0 F7 
0f9aa     2A 0F 47 48 
0f9ae     10 0F 5F 68 | 	byte	$00, $ef, $27, $41, $3f, $40, $e0, $f7, $2a, $0f, $47, $48, $10, $0f, $5f, $68
0f9b2     30 2B 00 B9 
0f9b6     1F 34 37 6D 
0f9ba     20 90 BF 04 
0f9be     CB DA CA BF | 	byte	$30, $2b, $00, $b9, $1f, $34, $37, $6d, $20, $90, $bf, $04, $cb, $da, $ca, $bf
0f9c2     1F 30 C8 94 
0f9c6     80 B7 FF 4E 
0f9ca     2A 3C 10 0F 
0f9ce     0C FB 05 27 | 	byte	$1f, $30, $c8, $94, $80, $b7, $ff, $4e, $2a, $3c, $10, $0f, $0c, $fb, $05, $27
0f9d2     54 30 1F 7F 
0f9d6     7F 74 30 98 
0f9da     CF 00 C0 CF 
0f9de     2F 18 3F 70 | 	byte	$54, $30, $1f, $7f, $7f, $74, $30, $98, $cf, $00, $c0, $cf, $2f, $18, $3f, $70
0f9e2     00 D5 2F 50 
0f9e6     2D 30 2B 2C 
0f9ea     19 00 CB C8 
0f9ee     CB 15 D0 80 | 	byte	$00, $d5, $2f, $50, $2d, $30, $2b, $2c, $19, $00, $cb, $c8, $cb, $15, $d0, $80
0f9f2     9F DF FD F7 
0f9f6     F8 0D E0 80 
0f9fa     EF 1F 50 20 
0f9fe     08 1F 3D 10 | 	byte	$9f, $df, $fd, $f7, $f8, $0d, $e0, $80, $ef, $1f, $50, $20, $08, $1f, $3d, $10
0fa02     FF 34 E0 9A 
0fa06     9F FF E8 E7 
0fa0a     2F 10 C3 C8 
0fa0e     A7 0F C8 87 | 	byte	$ff, $34, $e0, $9a, $9f, $ff, $e8, $e7, $2f, $10, $c3, $c8, $a7, $0f, $c8, $87
0fa12     AF C0 F7 58 
0fa16     28 E0 BF 0F 
0fa1a     3F 50 18 08 
0fa1e     E0 DF 2F 61 | 	byte	$af, $c0, $f7, $58, $28, $e0, $bf, $0f, $3f, $50, $18, $08, $e0, $df, $2f, $61
0fa22     40 03 3F 4D 
0fa26     60 44 42 00 
0fa2a     1F 77 7F 70 
0fa2e     60 30 00 1F | 	byte	$40, $03, $3f, $4d, $60, $44, $42, $00, $1f, $77, $7f, $70, $60, $30, $00, $1f
0fa32     64 57 7F 74 
0fa36     40 02 F9 F8 
0fa3a     CC FF 10 C0 
0fa3e     BF E6 C8 D7 | 	byte	$64, $57, $7f, $74, $40, $02, $f9, $f8, $cc, $ff, $10, $c0, $bf, $e6, $c8, $d7
0fa42     0F 34 F0 DF 
0fa46     3F 54 04 E7 
0fa4a     E8 EF 00 C0 
0fa4e     8B CF F5 EF | 	byte	$0f, $34, $f0, $df, $3f, $54, $04, $e7, $e8, $ef, $00, $c0, $8b, $cf, $f5, $ef
0fa52     2F 00 A8 80 
0fa56     80 80 80 D7 
0fa5a     D0 B0 CF F0 
0fa5e     E7 D0 80 9F | 	byte	$2f, $00, $a8, $80, $80, $80, $80, $d7, $d0, $b0, $cf, $f0, $e7, $d0, $80, $9f
0fa62     4F 62 4F 60 
0fa66     E0 FB 04 F7 
0fa6a     27 36 2D 4F 
0fa6e     20 12 0B 0F | 	byte	$4f, $62, $4f, $60, $e0, $fb, $04, $f7, $27, $36, $2d, $4f, $20, $12, $0b, $0f
0fa72     1B 4F 67 50 
0fa76     04 27 2D 5B 
0fa7a     54 42 47 7D 
0fa7e     48 77 70 38 | 	byte	$1b, $4f, $67, $50, $04, $27, $2d, $5b, $54, $42, $47, $7d, $48, $77, $70, $38
0fa82     10 2F 60 10 
0fa86     E1 E6 C0 D7 
0fa8a     E4 DB C0 9F 
0fa8e     B3 1F 40 D5 | 	byte	$10, $2f, $60, $10, $e1, $e6, $c0, $d7, $e4, $db, $c0, $9f, $b3, $1f, $40, $d5
0fa92     1B 14 C0 9F 
0fa96     1F C0 AF CF 
0fa9a     DF 1F 00 D7 
0fa9e     3F 78 00 E5 | 	byte	$1b, $14, $c0, $9f, $1f, $c0, $af, $cf, $df, $1f, $00, $d7, $3f, $78, $00, $e5
0faa2     D0 D7 E4 F7 
0faa6     16 1D 47 7E 
0faaa     40 E8 9C CF 
0faae     C0 F7 2F 3F | 	byte	$d0, $d7, $e4, $f7, $16, $1d, $47, $7e, $40, $e8, $9c, $cf, $c0, $f7, $2f, $3f
0fab2     4D 7F 7F 7E 
0fab6     10 98 80 A7 
0faba     EF 25 23 4A 
0fabe     00 EB E3 06 | 	byte	$4d, $7f, $7f, $7e, $10, $98, $80, $a7, $ef, $25, $23, $4a, $00, $eb, $e3, $06
0fac2     D0 DB 25 20 
0fac6     34 E0 9D B5 
0faca     DF E0 DA 90 
0face     81 D7 3F 28 | 	byte	$d0, $db, $25, $20, $34, $e0, $9d, $b5, $df, $e0, $da, $90, $81, $d7, $3f, $28
0fad2     15 04 21 F0 
0fad6     1F 1C 27 18 
0fada     1D E0 D7 27 
0fade     00 E7 27 3A | 	byte	$15, $04, $21, $f0, $1f, $1c, $27, $18, $1d, $e0, $d7, $27, $00, $e7, $27, $3a
0fae2     30 C0 D7 0F 
0fae6     27 55 58 38 
0faea     51 30 D4 9A 
0faee     A3 CF 1F 5A | 	byte	$30, $c0, $d7, $0f, $27, $55, $58, $38, $51, $30, $d4, $9a, $a3, $cf, $1f, $5a
0faf2     10 37 54 6C 
0faf6     59 72 44 55 
0fafa     40 10 EB 1A 
0fafe     0F 67 20 07 | 	byte	$10, $37, $54, $6c, $59, $72, $44, $55, $40, $10, $eb, $1a, $0f, $67, $20, $07
0fb02     08 C8 AD DF 
0fb06     DD F3 3F 40 
0fb0a     E0 C0 AF DB 
0fb0e     D2 F3 00 C4 | 	byte	$08, $c8, $ad, $df, $dd, $f3, $3f, $40, $e0, $c0, $af, $db, $d2, $f3, $00, $c4
0fb12     BB CA B8 97 
0fb16     A8 80 DF F0 
0fb1a     FB FC 26 F0 
0fb1e     B0 83 EF 20 | 	byte	$bb, $ca, $b8, $97, $a8, $80, $df, $f0, $fb, $fc, $26, $f0, $b0, $83, $ef, $20
0fb22     0A E0 ED 00 
0fb26     DF 2F 40 1F 
0fb2a     5F 70 4E 40 
0fb2e     E8 0F 08 EF | 	byte	$0a, $e0, $ed, $00, $df, $2f, $40, $1f, $5f, $70, $4e, $40, $e8, $0f, $08, $ef
0fb32     FD 2F 47 48 
0fb36     D4 EF 10 13 
0fb3a     18 E0 CF 0A 
0fb3e     37 50 3F 72 | 	byte	$fd, $2f, $47, $48, $d4, $ef, $10, $13, $18, $e0, $cf, $0a, $37, $50, $3f, $72
0fb42     76 44 2C 00 
0fb46     0F 20 1F 30 
0fb4a     F4 DB FF 15 
0fb4e     0A E2 1D 3B | 	byte	$76, $44, $2c, $00, $0f, $20, $1f, $30, $f4, $db, $ff, $15, $0a, $e2, $1d, $3b
0fb52     51 10 27 49 
0fb56     50 24 31 0D 
0fb5a     3D 14 C0 AF 
0fb5e     FF 1F 4D 14 | 	byte	$51, $10, $27, $49, $50, $24, $31, $0d, $3d, $14, $c0, $af, $ff, $1f, $4d, $14
0fb62     A0 9F DB D6 
0fb66     C0 80 8B F7 
0fb6a     00 C8 CA D1 
0fb6e     D5 1F 10 A8 | 	byte	$a0, $9f, $db, $d6, $c0, $80, $8b, $f7, $00, $c8, $ca, $d1, $d5, $1f, $10, $a8
0fb72     BF 11 E0 9D 
0fb76     1F 60 CA C9 
0fb7a     EF 00 FB 28 
0fb7e     08 D0 DB 2F | 	byte	$bf, $11, $e0, $9d, $1f, $60, $ca, $c9, $ef, $00, $fb, $28, $08, $d0, $db, $2f
0fb82     28 C0 FF 6C 
0fb86     32 30 F0 FF 
0fb8a     38 28 19 2B 
0fb8e     2B 47 77 7C | 	byte	$28, $c0, $ff, $6c, $32, $30, $f0, $ff, $38, $28, $19, $2b, $2b, $47, $77, $7c
0fb92     40 1C D0 C7 
0fb96     F7 FC 13 2D 
0fb9a     1A 25 18 2B 
0fb9e     00 1F 30 29 | 	byte	$40, $1c, $d0, $c7, $f7, $fc, $13, $2d, $1a, $25, $18, $2b, $00, $1f, $30, $29
0fba2     2F 38 00 EF 
0fba6     27 22 00 B8 
0fbaa     DF F0 E3 FD 
0fbae     15 F4 0F 20 | 	byte	$2f, $38, $00, $ef, $27, $22, $00, $b8, $df, $f0, $e3, $fd, $15, $f4, $0f, $20
0fbb2     D4 DB F7 F4 
0fbb6     CD FF 28 1F 
0fbba     36 28 0A 05 
0fbbe     08 04 F4 D0 | 	byte	$d4, $db, $f7, $f4, $cd, $ff, $28, $1f, $36, $28, $0a, $05, $08, $04, $f4, $d0
0fbc2     F7 20 05 26 
0fbc6     00 0B E4 EF 
0fbca     E0 88 87 1F 
0fbce     5A 30 15 08 | 	byte	$f7, $20, $05, $26, $00, $0b, $e4, $ef, $e0, $88, $87, $1f, $5a, $30, $15, $08
0fbd2     FB 04 C8 EF 
0fbd6     10 CC DF E8 
0fbda     FF 27 4D 08 
0fbde     D2 DF 07 0C | 	byte	$fb, $04, $c8, $ef, $10, $cc, $df, $e8, $ff, $27, $4d, $08, $d2, $df, $07, $0c
0fbe2     FF 18 E8 EF 
0fbe6     FF 27 38 14 
0fbea     1B 1D 04 EF 
0fbee     12 04 1F 08 | 	byte	$ff, $18, $e8, $ef, $ff, $27, $38, $14, $1b, $1d, $04, $ef, $12, $04, $1f, $08
0fbf2     F7 3F 1C 00 
0fbf6     DF 27 24 E4 
0fbfa     FB 12 1F 40 
0fbfe     07 E8 CD ED | 	byte	$f7, $3f, $1c, $00, $df, $27, $24, $e4, $fb, $12, $1f, $40, $07, $e8, $cd, $ed
0fc02     FF F8 EF 2E 
0fc06     20 F2 0A 00 
0fc0a     01 E2 EC DB 
0fc0e     3F 38 5F 48 | 	byte	$ff, $f8, $ef, $2e, $20, $f2, $0a, $00, $01, $e2, $ec, $db, $3f, $38, $5f, $48
0fc12     00 FF 37 4D 
0fc16     20 E0 DF 17 
0fc1a     5F 60 30 1B 
0fc1e     38 00 FB 08 | 	byte	$00, $ff, $37, $4d, $20, $e0, $df, $17, $5f, $60, $30, $1b, $38, $00, $fb, $08
0fc22     FF 00 E1 EF 
0fc26     18 14 D8 CB 
0fc2a     EA B0 B7 D9 
0fc2e     CA B8 BF BF | 	byte	$ff, $00, $e1, $ef, $18, $14, $d8, $cb, $ea, $b0, $b7, $d9, $ca, $b8, $bf, $bf
0fc32     2F 20 A7 DF 
0fc36     D8 D5 0F 1B 
0fc3a     5F 54 2C 08 
0fc3e     E0 C3 FB E0 | 	byte	$2f, $20, $a7, $df, $d8, $d5, $0f, $1b, $5f, $54, $2c, $08, $e0, $c3, $fb, $e0
0fc42     CF FF 7F 7F 
0fc46     20 E0 B5 DF 
0fc4a     2B 38 00 B0 
0fc4e     CF FF 3F 58 | 	byte	$cf, $ff, $7f, $7f, $20, $e0, $b5, $df, $2b, $38, $00, $b0, $cf, $ff, $3f, $58
0fc52     2A 32 24 32 
0fc56     18 28 29 10 
0fc5a     BA FF 08 1F 
0fc5e     5B 54 36 28 | 	byte	$2a, $32, $24, $32, $18, $28, $29, $10, $ba, $ff, $08, $1f, $5b, $54, $36, $28
0fc62     00 03 1C 08 
0fc66     EF 1F 4F 50 
0fc6a     48 24 27 24 
0fc6e     20 F4 E7 F7 | 	byte	$00, $03, $1c, $08, $ef, $1f, $4f, $50, $48, $24, $27, $24, $20, $f4, $e7, $f7
0fc72     C0 80 B7 FF 
0fc76     20 1D 00 BB 
0fc7a     C4 92 DF E4 
0fc7e     A1 BF E8 AE | 	byte	$c0, $80, $b7, $ff, $20, $1d, $00, $bb, $c4, $92, $df, $e4, $a1, $bf, $e8, $ae
0fc82     FF 2A 08 0F 
0fc86     35 E0 87 FF 
0fc8a     28 13 20 1F 
0fc8e     17 37 63 20 | 	byte	$ff, $2a, $08, $0f, $35, $e0, $87, $ff, $28, $13, $20, $1f, $17, $37, $63, $20
0fc92     D5 FF 1B 38 
0fc96     08 12 1F 67 
0fc9a     48 05 1F 47 
0fc9e     40 00 DB 1D | 	byte	$d5, $ff, $1b, $38, $08, $12, $1f, $67, $48, $05, $1f, $47, $40, $00, $db, $1d
0fca2     33 28 D0 B1 
0fca6     C7 FF 10 00 
0fcaa     E8 FB 15 29 
0fcae     0C 09 0A 04 | 	byte	$33, $28, $d0, $b1, $c7, $ff, $10, $00, $e8, $fb, $15, $29, $0c, $09, $0a, $04
0fcb2     D0 B7 E7 1D 
0fcb6     18 00 F3 F4 
0fcba     D0 B8 9B CF 
0fcbe     FF 1F 3D 38 | 	byte	$d0, $b7, $e7, $1d, $18, $00, $f3, $f4, $d0, $b8, $9b, $cf, $ff, $1f, $3d, $38
0fcc2     08 CA F7 F8 
0fcc6     D1 DF 2F 59 
0fcca     77 58 28 F0 
0fcce     E5 0F 34 E8 | 	byte	$08, $ca, $f7, $f8, $d1, $df, $2f, $59, $77, $58, $28, $f0, $e5, $0f, $34, $e8
0fcd2     0F 0C 07 1F 
0fcd6     28 E8 2F 7F 
0fcda     68 10 1A E8 
0fcde     C0 BF FF 27 | 	byte	$0f, $0c, $07, $1f, $28, $e8, $2f, $7f, $68, $10, $1a, $e8, $c0, $bf, $ff, $27
0fce2     5D 30 E3 F6 
0fce6     E7 05 0E E0 
0fcea     88 90 80 8F 
0fcee     9F D7 FF 40 | 	byte	$5d, $30, $e3, $f6, $e7, $05, $0e, $e0, $88, $90, $80, $8f, $9f, $d7, $ff, $40
0fcf2     00 C4 B7 C7 
0fcf6     0F 00 F7 08 
0fcfa     0B 24 F8 27 
0fcfe     77 60 30 00 | 	byte	$00, $c4, $b7, $c7, $0f, $00, $f7, $08, $0b, $24, $f8, $27, $77, $60, $30, $00
0fd02     F0 CB FF 08 
0fd06     F7 3B 5F 78 
0fd0a     50 28 F3 16 
0fd0e     D8 E7 F0 ED | 	byte	$f0, $cb, $ff, $08, $f7, $3b, $5f, $78, $50, $28, $f3, $16, $d8, $e7, $f0, $ed
0fd12     F3 1C 00 ED 
0fd16     17 52 00 EB 
0fd1a     0F 24 E8 EF 
0fd1e     0F 23 20 F1 | 	byte	$f3, $1c, $00, $ed, $17, $52, $00, $eb, $0f, $24, $e8, $ef, $0f, $23, $20, $f1
0fd22     1D 0E 35 24 
0fd26     57 40 0A F7 
0fd2a     37 30 13 1E 
0fd2e     20 11 25 3B | 	byte	$1d, $0e, $35, $24, $57, $40, $0a, $f7, $37, $30, $13, $1e, $20, $11, $25, $3b
0fd32     20 E2 F9 D0 
0fd36     A4 97 BF FF 
0fd3a     0A F4 E8 ED 
0fd3e     F8 F5 FA FA | 	byte	$20, $e2, $f9, $d0, $a4, $97, $bf, $ff, $0a, $f4, $e8, $ed, $f8, $f5, $fa, $fa
0fd42     D8 DF D2 C8 
0fd46     DB 0B 09 1D 
0fd4a     30 E8 F7 10 
0fd4e     EC E9 F6 E4 | 	byte	$d8, $df, $d2, $c8, $db, $0b, $09, $1d, $30, $e8, $f7, $10, $ec, $e9, $f6, $e4
0fd52     B2 BB 0F 29 
0fd56     46 10 FF 38 
0fd5a     3F 38 00 FD 
0fd5e     FA FB F0 FF | 	byte	$b2, $bb, $0f, $29, $46, $10, $ff, $38, $3f, $38, $00, $fd, $fa, $fb, $f0, $ff
0fd62     4B 48 40 3F 
0fd66     57 48 4B 34 
0fd6a     00 F7 FD 27 
0fd6e     30 2F 62 20 | 	byte	$4b, $48, $40, $3f, $57, $48, $4b, $34, $00, $f7, $fd, $27, $30, $2f, $62, $20
0fd72     13 3F 10 F7 
0fd76     28 08 D0 A9 
0fd7a     CF 27 F0 FF 
0fd7e     25 3D 37 18 | 	byte	$13, $3f, $10, $f7, $28, $08, $d0, $a9, $cf, $27, $f0, $ff, $25, $3d, $37, $18
0fd82     DA DF D1 DB 
0fd86     EF F4 ED E0 
0fd8a     B0 B7 BF FF 
0fd8e     F4 E2 C5 B9 | 	byte	$da, $df, $d1, $db, $ef, $f4, $ed, $e0, $b0, $b7, $bf, $ff, $f4, $e2, $c5, $b9
0fd92     B7 EF C0 80 
0fd96     80 9F FF 39 
0fd9a     18 0B 37 10 
0fd9e     F7 35 08 FF | 	byte	$b7, $ef, $c0, $80, $80, $9f, $ff, $39, $18, $0b, $37, $10, $f7, $35, $08, $ff
0fda2     6F 7F 40 1F 
0fda6     57 50 14 F1 
0fdaa     13 3F 6B 6A 
0fdae     30 20 08 0B | 	byte	$6f, $7f, $40, $1f, $57, $50, $14, $f1, $13, $3f, $6b, $6a, $30, $20, $08, $0b
0fdb2     2C 2B 4B 5F 
0fdb6     70 10 F0 0B 
0fdba     F0 C1 DF FF 
0fdbe     37 2A D0 A7 | 	byte	$2c, $2b, $4b, $5f, $70, $10, $f0, $0b, $f0, $c1, $df, $ff, $37, $2a, $d0, $a7
0fdc2     90 8F B8 BB 
0fdc6     EF 2E E0 DF 
0fdca     F4 E4 DA EC 
0fdce     E4 FD 0F 31 | 	byte	$90, $8f, $b8, $bb, $ef, $2e, $e0, $df, $f4, $e4, $da, $ec, $e4, $fd, $0f, $31
0fdd2     24 14 E1 D0 
0fdd6     BF 23 16 F0 
0fdda     F3 14 06 EC 
0fdde     EF 1B F0 EF | 	byte	$24, $14, $e1, $d0, $bf, $23, $16, $f0, $f3, $14, $06, $ec, $ef, $1b, $f0, $ef
0fde2     3F 50 20 35 
0fde6     44 20 10 FF 
0fdea     37 3B 40 00 
0fdee     F6 F7 04 FB | 	byte	$3f, $50, $20, $35, $44, $20, $10, $ff, $37, $3b, $40, $00, $f6, $f7, $04, $fb
0fdf2     E4 DF 17 31 
0fdf6     14 27 10 F0 
0fdfa     E8 EF 07 14 
0fdfe     1C 08 DC FB | 	byte	$e4, $df, $17, $31, $14, $27, $10, $f0, $e8, $ef, $07, $14, $1c, $08, $dc, $fb
0fe02     1F 31 28 00 
0fe06     C0 BD D2 C0 
0fe0a     B9 B7 EF 17 
0fe0e     3F 30 F0 D7 | 	byte	$1f, $31, $28, $00, $c0, $bd, $d2, $c0, $b9, $b7, $ef, $17, $3f, $30, $f0, $d7
0fe12     03 F4 FA EC 
0fe16     DD 1F 10 C1 
0fe1a     E7 E7 FF 1F 
0fe1e     00 FF 5F 58 | 	byte	$03, $f4, $fa, $ec, $dd, $1f, $10, $c1, $e7, $e7, $ff, $1f, $00, $ff, $5f, $58
0fe22     1F 5F 30 F6 
0fe26     2F 7F 54 6F 
0fe2a     30 C0 CF 27 
0fe2e     2F 48 D0 C7 | 	byte	$1f, $5f, $30, $f6, $2f, $7f, $54, $6f, $30, $c0, $cf, $27, $2f, $48, $d0, $c7
0fe32     F3 0C 17 28 
0fe36     E3 17 14 E0 
0fe3a     DF 1F 18 F0 
0fe3e     DC D4 C7 FF | 	byte	$f3, $0c, $17, $28, $e3, $17, $14, $e0, $df, $1f, $18, $f0, $dc, $d4, $c7, $ff
0fe42     16 05 2A 02 
0fe46     F7 F0 A4 A7 
0fe4a     FF 2F 30 10 
0fe4e     E0 A0 BF 00 | 	byte	$16, $05, $2a, $02, $f7, $f0, $a4, $a7, $ff, $2f, $30, $10, $e0, $a0, $bf, $00
0fe52     E1 F3 D9 DF 
0fe56     0F 20 E0 FD 
0fe5a     F2 D2 EF 2B 
0fe5e     21 1B 27 14 | 	byte	$e1, $f3, $d9, $df, $0f, $20, $e0, $fd, $f2, $d2, $ef, $2b, $21, $1b, $27, $14
0fe62     13 3A 20 27 
0fe66     47 48 3F 44 
0fe6a     00 0F 5A 20 
0fe6e     E0 F7 53 30 | 	byte	$13, $3a, $20, $27, $47, $48, $3f, $44, $00, $0f, $5a, $20, $e0, $f7, $53, $30
0fe72     21 E0 CB FD 
0fe76     08 F3 F4 D0 
0fe7a     F7 0D 1F 38 
0fe7e     18 00 FF 14 | 	byte	$21, $e0, $cb, $fd, $08, $f3, $f4, $d0, $f7, $0d, $1f, $38, $18, $00, $ff, $14
0fe82     EA E9 F7 27 
0fe86     3F 00 A3 E3 
0fe8a     DF 2B 21 08 
0fe8e     F7 07 0F 3F | 	byte	$ea, $e9, $f7, $27, $3f, $00, $a3, $e3, $df, $2b, $21, $08, $f7, $07, $0f, $3f
0fe92     30 E8 06 E8 
0fe96     DF E3 EE E3 
0fe9a     D4 B3 BB BD 
0fe9e     D7 F7 EC EC | 	byte	$30, $e8, $06, $e8, $df, $e3, $ee, $e3, $d4, $b3, $bb, $bd, $d7, $f7, $ec, $ec
0fea2     D8 FF 42 00 
0fea6     E3 0F 08 FF 
0feaa     EC F7 25 2F 
0feae     3F 7E 78 48 | 	byte	$d8, $ff, $42, $00, $e3, $0f, $08, $ff, $ec, $f7, $25, $2f, $3f, $7e, $78, $48
0feb2     E8 CC D7 0B 
0feb6     3F 4A 22 3F 
0feba     47 57 58 2A 
0febe     1C 00 B6 C7 | 	byte	$e8, $cc, $d7, $0b, $3f, $4a, $22, $3f, $47, $57, $58, $2a, $1c, $00, $b6, $c7
0fec2     DF F4 E4 EF 
0fec6     0B 1F 3C 00 
0feca     A8 93 C7 E7 
0fece     0E 0A 1B 05 | 	byte	$df, $f4, $e4, $ef, $0b, $1f, $3c, $00, $a8, $93, $c7, $e7, $0e, $0a, $1b, $05
0fed2     08 E0 E0 B0 
0fed6     A7 C9 ED FF 
0feda     2D 3F 34 1F 
0fede     47 35 3A 24 | 	byte	$08, $e0, $e0, $b0, $a7, $c9, $ed, $ff, $2d, $3f, $34, $1f, $47, $35, $3a, $24
0fee2     00 0F 47 5C 
0fee6     28 F2 E8 0D 
0feea     2D 4C 34 2C 
0feee     20 F2 17 24 | 	byte	$00, $0f, $47, $5c, $28, $f2, $e8, $0d, $2d, $4c, $34, $2c, $20, $f2, $17, $24
0fef2     14 F4 05 F4 
0fef6     FF E8 D7 EA 
0fefa     17 20 10 C0 
0fefe     9F B7 DF 27 | 	byte	$14, $f4, $05, $f4, $ff, $e8, $d7, $ea, $17, $20, $10, $c0, $9f, $b7, $df, $27
0ff02     42 3D 30 1E 
0ff06     22 0C F4 FB 
0ff0a     EA E7 00 D4 
0ff0e     B9 EF 3F 30 | 	byte	$42, $3d, $30, $1e, $22, $0c, $f4, $fb, $ea, $e7, $00, $d4, $b9, $ef, $3f, $30
0ff12     2C 0C E4 BA 
0ff16     C7 CE D7 0F 
0ff1a     10 E8 E2 C0 
0ff1e     DF 4F 28 C0 | 	byte	$2c, $0c, $e4, $ba, $c7, $ce, $d7, $0f, $10, $e8, $e2, $c0, $df, $4f, $28, $c0
0ff22     BF E0 DF EB 
0ff26     0D 15 3F 76 
0ff2a     54 2F 4C 30 
0ff2e     00 E6 0F 5F | 	byte	$bf, $e0, $df, $eb, $0d, $15, $3f, $76, $54, $2f, $4c, $30, $00, $e6, $0f, $5f
0ff32     7A 20 23 1D 
0ff36     24 07 2B 1C 
0ff3a     18 05 17 1E 
0ff3e     00 C6 DB F8 | 	byte	$7a, $20, $23, $1d, $24, $07, $2b, $1c, $18, $05, $17, $1e, $00, $c6, $db, $f8
0ff42     E0 D7 07 0B 
0ff46     26 28 F0 D4 
0ff4a     C0 BF EF 27 
0ff4e     53 20 C8 A0 | 	byte	$e0, $d7, $07, $0b, $26, $28, $f0, $d4, $c0, $bf, $ef, $27, $53, $20, $c8, $a0
0ff52     BF DF 0F 26 
0ff56     30 16 00 DC 
0ff5a     FA FF 27 3F 
0ff5e     51 40 20 27 | 	byte	$bf, $df, $0f, $26, $30, $16, $00, $dc, $fa, $ff, $27, $3f, $51, $40, $20, $27
0ff62     34 D8 C0 CF 
0ff66     C0 BB D3 FD 
0ff6a     F4 FF 26 1A 
0ff6e     F4 17 08 EA | 	byte	$34, $d8, $c0, $cf, $c0, $bb, $d3, $fd, $f4, $ff, $26, $1a, $f4, $17, $08, $ea
0ff72     EF 0D 0A 0C 
0ff76     FD 2B 20 F2 
0ff7a     1B 45 57 48 
0ff7e     23 28 00 D8 | 	byte	$ef, $0d, $0a, $0c, $fd, $2b, $20, $f2, $1b, $45, $57, $48, $23, $28, $00, $d8
0ff82     F7 11 10 0D 
0ff86     23 00 F7 17 
0ff8a     18 E0 D1 F9 
0ff8e     02 16 18 08 | 	byte	$f7, $11, $10, $0d, $23, $00, $f7, $17, $18, $e0, $d1, $f9, $02, $16, $18, $08
0ff92     F0 E9 D4 D1 
0ff96     C8 DF EC FF 
0ff9a     10 D0 B5 EF 
0ff9e     02 13 00 D7 | 	byte	$f0, $e9, $d4, $d1, $c8, $df, $ec, $ff, $10, $d0, $b5, $ef, $02, $13, $00, $d7
0ffa2     F5 27 3E 38 
0ffa6     0C 0D 16 1B 
0ffaa     23 4F 48 32 
0ffae     30 1A E0 E7 | 	byte	$f5, $27, $3e, $38, $0c, $0d, $16, $1b, $23, $4f, $48, $32, $30, $1a, $e0, $e7
0ffb2     11 10 F0 DF 
0ffb6     13 18 FB 27 
0ffba     32 24 2A E8 
0ffbe     C7 F3 0C F6 | 	byte	$11, $10, $f0, $df, $13, $18, $fb, $27, $32, $24, $2a, $e8, $c7, $f3, $0c, $f6
0ffc2     07 28 00 F3 
0ffc6     F0 F9 05 1B 
0ffca     29 10 F4 F8 
0ffce     E2 EF 0E 2D | 	byte	$07, $28, $00, $f3, $f0, $f9, $05, $1b, $29, $10, $f4, $f8, $e2, $ef, $0e, $2d
0ffd2     18 D0 CF FF 
0ffd6     25 24 00 01 
0ffda     05 F8 F9 D4 
0ffde     DF E8 D3 ED | 	byte	$18, $d0, $cf, $ff, $25, $24, $00, $01, $05, $f8, $f9, $d4, $df, $e8, $d3, $ed
0ffe2     E4 D5 DC C0 
0ffe6     DF 12 F4 F3 
0ffea     E0 1F 7E 50 
0ffee     2F 5D 40 F0 | 	byte	$e4, $d5, $dc, $c0, $df, $12, $f4, $f3, $e0, $1f, $7e, $50, $2f, $5d, $40, $f0
0fff2     EA F3 F3 13 
0fff6     2F 20 E0 FF 
0fffa     1C 19 2A 0A 
0fffe     EA FF 3F 40 | 	byte	$ea, $f3, $f3, $13, $2f, $20, $e0, $ff, $1c, $19, $2a, $0a, $ea, $ff, $3f, $40
10002     01 0D 2D 28 
10006     18 F0 FB 29 
1000a     1E 17 1B 10 
1000e     19 00 A4 BB | 	byte	$01, $0d, $2d, $28, $18, $f0, $fb, $29, $1e, $17, $1b, $10, $19, $00, $a4, $bb
10012     F3 E8 DF 15 
10016     00 1F 30 1C 
1001a     10 19 1A 18 
1001e     08 ED FD F0 | 	byte	$f3, $e8, $df, $15, $00, $1f, $30, $1c, $10, $19, $1a, $18, $08, $ed, $fd, $f0
10022     D9 EF FA E0 
10026     BC DF 03 FA 
1002a     07 1E 10 F1 
1002e     E0 EF 28 14 | 	byte	$d9, $ef, $fa, $e0, $bc, $df, $03, $fa, $07, $1e, $10, $f1, $e0, $ef, $28, $14
10032     23 00 ED F3 
10036     F0 F3 FD 12 
1003a     2B 3E 37 5D 
1003e     20 E4 C2 C7 | 	byte	$23, $00, $ed, $f3, $f0, $f3, $fd, $12, $2b, $3e, $37, $5d, $20, $e4, $c2, $c7
10042     FA E8 F7 1A 
10046     05 37 50 38 
1004a     22 0A 27 3A 
1004e     14 E0 ED 13 | 	byte	$fa, $e8, $f7, $1a, $05, $37, $50, $38, $22, $0a, $27, $3a, $14, $e0, $ed, $13
10052     1A 08 F8 C0 
10056     CF 02 EC F1 
1005a     03 FA 13 08 
1005e     F7 17 11 0F | 	byte	$1a, $08, $f8, $c0, $cf, $02, $ec, $f1, $03, $fa, $13, $08, $f7, $17, $11, $0f
10062     24 0A F0 FF 
10066     27 1C 14 05 
1006a     ED 07 00 FD 
1006e     D8 EF 04 0F | 	byte	$24, $0a, $f0, $ff, $27, $1c, $14, $05, $ed, $07, $00, $fd, $d8, $ef, $04, $0f
10072     2F 4D 30 1C 
10076     F0 C5 CB DE 
1007a     CB 09 0D 23 
1007e     10 0B 1F 2A | 	byte	$2f, $4d, $30, $1c, $f0, $c5, $cb, $de, $cb, $09, $0d, $23, $10, $0b, $1f, $2a
10082     14 F9 1F 44 
10086     18 04 E9 FD 
1008a     00 09 03 1F 
1008e     10 17 30 1B | 	byte	$14, $f9, $1f, $44, $18, $04, $e9, $fd, $00, $09, $03, $1f, $10, $17, $30, $1b
10092     4B 58 40 34 
10096     2C 04 07 1B 
1009a     2C 14 E0 B3 
1009e     C7 DB D9 F7 | 	byte	$4b, $58, $40, $34, $2c, $04, $07, $1b, $2c, $14, $e0, $b3, $c7, $db, $d9, $f7
100a2     04 F8 EC CC 
100a6     BF D8 DF E0 
100aa     DB 0F F8 FC 
100ae     E4 C4 DF E5 | 	byte	$04, $f8, $ec, $cc, $bf, $d8, $df, $e0, $db, $0f, $f8, $fc, $e4, $c4, $df, $e5
100b2     C4 DF 3F 40 
100b6     1D 27 30 19 
100ba     14 0D 08 0B 
100be     19 2F 28 E4 | 	byte	$c4, $df, $3f, $40, $1d, $27, $30, $19, $14, $0d, $08, $0b, $19, $2f, $28, $e4
100c2     E7 1B 17 31 
100c6     20 09 09 23 
100ca     20 0A F8 07 
100ce     10 13 35 30 | 	byte	$e7, $1b, $17, $31, $20, $09, $09, $23, $20, $0a, $f8, $07, $10, $13, $35, $30
100d2     E0 C1 EF 27 
100d6     2C 20 10 00 
100da     E0 EF 3F 41 
100de     20 05 10 00 | 	byte	$e0, $c1, $ef, $27, $2c, $20, $10, $00, $e0, $ef, $3f, $41, $20, $05, $10, $00
100e2     E0 DB 17 0C 
100e6     03 35 28 00 
100ea     FF 1C 18 2F 
100ee     10 D0 D7 06 | 	byte	$e0, $db, $17, $0c, $03, $35, $28, $00, $ff, $1c, $18, $2f, $10, $d0, $d7, $06
100f2     FB F8 C8 E7 
100f6     F0 FD 00 E0 
100fa     CA C8 AD B0 
100fe     A7 FF 38 31 | 	byte	$fb, $f8, $c8, $e7, $f0, $fd, $00, $e0, $ca, $c8, $ad, $b0, $a7, $ff, $38, $31
10102     26 20 05 3D 
10106     40 18 0D 26 
1010a     1A 1C 04 F2 
1010e     E6 F7 2B 3A | 	byte	$26, $20, $05, $3d, $40, $18, $0d, $26, $1a, $1c, $04, $f2, $e6, $f7, $2b, $3a
10112     2C 2B 08 C4 
10116     DF 0F 00 E3 
1011a     F7 17 0C 15 
1011e     12 E2 D6 D2 | 	byte	$2c, $2b, $08, $c4, $df, $0f, $00, $e3, $f7, $17, $0c, $15, $12, $e2, $d6, $d2
10122     DF FE 04 FE 
10126     2F 3E 24 00 
1012a     F0 C6 C9 ED 
1012e     0F 2F 34 22 | 	byte	$df, $fe, $04, $fe, $2f, $3e, $24, $00, $f0, $c6, $c9, $ed, $0f, $2f, $34, $22
10132     10 1F 2C 08 
10136     F0 FF 29 30 
1013a     20 00 F4 E4 
1013e     D5 FF 08 EF | 	byte	$10, $1f, $2c, $08, $f0, $ff, $29, $30, $20, $00, $f4, $e4, $d5, $ff, $08, $ef
10142     01 F8 F0 DA 
10146     D3 FB 27 43 
1014a     39 29 0A EA 
1014e     0F 20 F8 03 | 	byte	$01, $f8, $f0, $da, $d3, $fb, $27, $43, $39, $29, $0a, $ea, $0f, $20, $f8, $03
10152     15 1A 26 20 
10156     08 0E 14 13 
1015a     26 1A 05 17 
1015e     10 E8 C6 DF | 	byte	$15, $1a, $26, $20, $08, $0e, $14, $13, $26, $1a, $05, $17, $10, $e8, $c6, $df
10162     07 35 28 1C 
10166     E8 B2 A7 CF 
1016a     B4 9F C9 C8 
1016e     CF FF 10 F8 | 	byte	$07, $35, $28, $1c, $e8, $b2, $a7, $cf, $b4, $9f, $c9, $c8, $cf, $ff, $10, $f8
10172     EB FF F0 DC 
10176     D8 DB FF 1C 
1017a     24 2B 20 02 
1017e     17 22 3F 40 | 	byte	$eb, $ff, $f0, $dc, $d8, $db, $ff, $1c, $24, $2b, $20, $02, $17, $22, $3f, $40
10182     14 13 18 0B 
10186     12 01 0B 17 
1018a     29 20 1C 08 
1018e     05 F5 1F 2F | 	byte	$14, $13, $18, $0b, $12, $01, $0b, $17, $29, $20, $1c, $08, $05, $f5, $1f, $2f
10192     32 36 34 39 
10196     2C 1F 42 18 
1019a     E7 27 20 F7 
1019e     19 20 08 0F | 	byte	$32, $36, $34, $39, $2c, $1f, $42, $18, $e7, $27, $20, $f7, $19, $20, $08, $0f
101a2     14 27 20 1F 
101a6     28 FF 30 DF 
101aa     58 F0 18 A3 
101ae     FB A0 DB B8 | 	byte	$14, $27, $20, $1f, $28, $ff, $30, $df, $58, $f0, $18, $a3, $fb, $a0, $db, $b8
101b2     EF CC FB 04 
101b6     E8 AF C0 BF 
101ba     F0 EF 7F C3 
101be     50 A8 1F 10 | 	byte	$ef, $cc, $fb, $04, $e8, $af, $c0, $bf, $f0, $ef, $7f, $c3, $50, $a8, $1f, $10
101c2     CF 5B C0 DF 
101c6     20 BF 50 FF 
101ca     30 FF 48 E0 
101ce     DF 70 9B 5E | 	byte	$cf, $5b, $c0, $df, $20, $bf, $50, $ff, $30, $ff, $48, $e0, $df, $70, $9b, $5e
101d2     81 7F 90 6E 
101d6     80 5F C0 17 
101da     C7 30 FF 60 
101de     9F 7F 9F 78 | 	byte	$81, $7f, $90, $6e, $80, $5f, $c0, $17, $c7, $30, $ff, $60, $9f, $7f, $9f, $78
101e2     80 7F 88 38 
101e6     A1 1F 6F 40 
101ea     8F 7F 6F 40 
101ee     9F 38 2F 60 | 	byte	$80, $7f, $88, $38, $a1, $1f, $6f, $40, $8f, $7f, $6f, $40, $9f, $38, $2f, $60
101f2     17 E0 3F 40 
101f6     AF 7F E0 FF 
101fa     60 9F 7F C0 
101fe     1F 90 F7 A0 | 	byte	$17, $e0, $3f, $40, $af, $7f, $e0, $ff, $60, $9f, $7f, $c0, $1f, $90, $f7, $a0
10202     3F E0 8F 20 
10206     BF 58 A8 CF 
1020a     C0 1F 00 17 
1020e     40 C7 24 E1 | 	byte	$3f, $e0, $8f, $20, $bf, $58, $a8, $cf, $c0, $1f, $00, $17, $40, $c7, $24, $e1
10212     2F 20 0C E7 
10216     5F 40 C7 77 
1021a     E0 BF 38 22 
1021e     E8 FF 08 0F | 	byte	$2f, $20, $0c, $e7, $5f, $40, $c7, $77, $e0, $bf, $38, $22, $e8, $ff, $08, $0f
10222     00 1F D0 EF 
10226     10 BF 60 C7 
1022a     20 BF 00 81 
1022e     7F 80 BF E0 | 	byte	$00, $1f, $d0, $ef, $10, $bf, $60, $c7, $20, $bf, $00, $81, $7f, $80, $bf, $e0
10232     4F 00 14 80 
10236     3F C0 1F 00 
1023a     FF 20 AF 3B 
1023e     49 39 00 BF | 	byte	$4f, $00, $14, $80, $3f, $c0, $1f, $00, $ff, $20, $af, $3b, $49, $39, $00, $bf
10242     30 0F 42 5F 
10246     20 BF 70 CF 
1024a     30 BF 78 01 
1024e     7B 08 1F E0 | 	byte	$30, $0f, $42, $5f, $20, $bf, $70, $cf, $30, $bf, $78, $01, $7b, $08, $1f, $e0
10252     9F 1F 48 21 
10256     00 F7 20 DF 
1025a     52 E8 2F 08 
1025e     DF 6F 20 CF | 	byte	$9f, $1f, $48, $21, $00, $f7, $20, $df, $52, $e8, $2f, $08, $df, $6f, $20, $cf
10262     40 1A D0 3F 
10266     00 9F 60 81 
1026a     5F 00 FF 08 
1026e     1F 48 A0 1F | 	byte	$40, $1a, $d0, $3f, $00, $9f, $60, $81, $5f, $00, $ff, $08, $1f, $48, $a0, $1f
10272     00 EF 60 97 
10276     6F C0 F7 DF 
1027a     10 80 2F 84 
1027e     CF B8 BC EF | 	byte	$00, $ef, $60, $97, $6f, $c0, $f7, $df, $10, $80, $2f, $84, $cf, $b8, $bc, $ef
10282     00 8F 48 DD 
10286     00 BF 40 AB 
1028a     4F D0 F7 3C 
1028e     3F 40 EF 60 | 	byte	$00, $8f, $48, $dd, $00, $bf, $40, $ab, $4f, $d0, $f7, $3c, $3f, $40, $ef, $60
10292     C7 3B C8 3F 
10296     00 1F 40 EC 
1029a     3F 10 FF 47 
1029e     40 E7 72 C0 | 	byte	$c7, $3b, $c8, $3f, $00, $1f, $40, $ec, $3f, $10, $ff, $47, $40, $e7, $72, $c0
102a2     3F 00 33 D4 
102a6     32 93 5B A0 
102aa     5F 00 3F 00 
102ae     BF 20 C7 1F | 	byte	$3f, $00, $33, $d4, $32, $93, $5b, $a0, $5f, $00, $3f, $00, $bf, $20, $c7, $1f
102b2     00 CB 3F 30 
102b6     FF 30 DF 40 
102ba     D7 4C EB 08 
102be     1F 20 DF 20 | 	byte	$00, $cb, $3f, $30, $ff, $30, $df, $40, $d7, $4c, $eb, $08, $1f, $20, $df, $20
102c2     FF 00 BF 50 
102c6     FF 20 FF 00 
102ca     DF 40 BF 00 
102ce     BF 20 DF 00 | 	byte	$ff, $00, $bf, $50, $ff, $20, $ff, $00, $df, $40, $bf, $00, $bf, $20, $df, $00
102d2     FF D0 FF 00 
102d6     9F F4 3F E0 
102da     FF E0 DF 08 
102de     3F 18 45 E0 | 	byte	$ff, $d0, $ff, $00, $9f, $f4, $3f, $e0, $ff, $e0, $df, $08, $3f, $18, $45, $e0
102e2     6F 10 1F A0 
102e6     1F 00 EF 00 
102ea     DF F0 1F 00 
102ee     FF 48 DF 60 | 	byte	$6f, $10, $1f, $a0, $1f, $00, $ef, $00, $df, $f0, $1f, $00, $ff, $48, $df, $60
102f2     BF 30 99 17 
102f6     D0 EF 00 0F 
102fa     10 FF 30 ED 
102fe     F4 FB 40 DB | 	byte	$bf, $30, $99, $17, $d0, $ef, $00, $0f, $10, $ff, $30, $ed, $f4, $fb, $40, $db
10302     24 EF 18 FF 
10306     48 B7 7F D0 
1030a     3F C0 0F CD 
1030e     3F 24 02 07 | 	byte	$24, $ef, $18, $ff, $48, $b7, $7f, $d0, $3f, $c0, $0f, $cd, $3f, $24, $02, $07
10312     E0 2F 40 FF 
10316     40 EF 08 FF 
1031a     00 E7 F5 2B 
1031e     00 0C C0 1F | 	byte	$e0, $2f, $40, $ff, $40, $ef, $08, $ff, $00, $e7, $f5, $2b, $00, $0c, $c0, $1f
10322     E0 FF 22 58 
10326     D0 1F 00 FF 
1032a     04 0D 17 2C 
1032e     0B 24 0F 00 | 	byte	$e0, $ff, $22, $58, $d0, $1f, $00, $ff, $04, $0d, $17, $2c, $0b, $24, $0f, $00
10332     EF 00 AF 3F 
10336     08 EB EC F5 
1033a     0C C5 F8 95 
1033e     FF A0 FF E0 | 	byte	$ef, $00, $af, $3f, $08, $eb, $ec, $f5, $0c, $c5, $f8, $95, $ff, $a0, $ff, $e0
10342     DF 00 EF 00 
10346     F7 D8 FF 20 
1034a     13 E0 FF F0 
1034e     2F 40 F7 0A | 	byte	$df, $00, $ef, $00, $f7, $d8, $ff, $20, $13, $e0, $ff, $f0, $2f, $40, $f7, $0a
10352     4F 40 67 20 
10356     0F 23 30 FB 
1035a     66 09 6A C0 
1035e     FF CB 3E CB | 	byte	$4f, $40, $67, $20, $0f, $23, $30, $fb, $66, $09, $6a, $c0, $ff, $cb, $3e, $cb
10362     5B C0 1F E4 
10366     34 C0 F2 CB 
1036a     24 F3 56 F2 
1036e     28 A7 FF 0F | 	byte	$5b, $c0, $1f, $e4, $34, $c0, $f2, $cb, $24, $f3, $56, $f2, $28, $a7, $ff, $0f
10372     20 FF 50 DF 
10376     50 A7 0C DF 
1037a     10 C7 09 17 
1037e     30 FF 40 1B | 	byte	$20, $ff, $50, $df, $50, $a7, $0c, $df, $10, $c7, $09, $17, $30, $ff, $40, $1b
10382     40 FF 30 FF 
10386     20 0F 48 FF 
1038a     20 AA EF 00 
1038e     E0 EF 00 BF | 	byte	$40, $ff, $30, $ff, $20, $0f, $48, $ff, $20, $aa, $ef, $00, $e0, $ef, $00, $bf
10392     14 D2 D4 DC 
10396     DA FF 04 F5 
1039a     F7 18 DF 1F 
1039e     1F 18 E7 04 | 	byte	$14, $d2, $d4, $dc, $da, $ff, $04, $f5, $f7, $18, $df, $1f, $1f, $18, $e7, $04
103a2     E7 20 FB F0 
103a6     EF 28 F5 20 
103aa     FF 20 0B 28 
103ae     FF 00 DF 04 | 	byte	$e7, $20, $fb, $f0, $ef, $28, $f5, $20, $ff, $20, $0b, $28, $ff, $00, $df, $04
103b2     E3 1F 20 09 
103b6     16 FB 2B 00 
103ba     D5 FF 30 31 
103be     22 27 30 07 | 	byte	$e3, $1f, $20, $09, $16, $fb, $2b, $00, $d5, $ff, $30, $31, $22, $27, $30, $07
103c2     00 FF 28 23 
103c6     18 FF 44 37 
103ca     60 12 36 18 
103ce     00 D7 3E E0 | 	byte	$00, $ff, $28, $23, $18, $ff, $44, $37, $60, $12, $36, $18, $00, $d7, $3e, $e0
103d2     FF 24 2A 00 
103d6     2F E4 FF B0 
103da     EF B0 FF C0 
103de     D7 C0 CF EF | 	byte	$ff, $24, $2a, $00, $2f, $e4, $ff, $b0, $ef, $b0, $ff, $c0, $d7, $c0, $cf, $ef
103e2     40 C0 FF E1 
103e6     2A E0 1F 0F 
103ea     30 F0 E4 EF 
103ee     26 23 00 DF | 	byte	$40, $c0, $ff, $e1, $2a, $e0, $1f, $0f, $30, $f0, $e4, $ef, $26, $23, $00, $df
103f2     E2 17 00 EF 
103f6     00 FD F0 17 
103fa     14 1D 08 EC 
103fe     EB 18 EB 2F | 	byte	$e2, $17, $00, $ef, $00, $fd, $f0, $17, $14, $1d, $08, $ec, $eb, $18, $eb, $2f
10402     09 2C 00 17 
10406     F2 1F D0 D7 
1040a     F6 FB EA 17 
1040e     0A 2B 38 2C | 	byte	$09, $2c, $00, $17, $f2, $1f, $d0, $d7, $f6, $fb, $ea, $17, $0a, $2b, $38, $2c
10412     00 0F 28 25 
10416     29 2D 20 FE 
1041a     0F 12 1F 34 
1041e     1B 30 E0 ED | 	byte	$00, $0f, $28, $25, $29, $2d, $20, $fe, $0f, $12, $1f, $34, $1b, $30, $e0, $ed
10422     DA E2 DD 2B 
10426     18 10 FF 18 
1042a     EA FF 13 14 
1042e     0E 08 FF 1C | 	byte	$da, $e2, $dd, $2b, $18, $10, $ff, $18, $ea, $ff, $13, $14, $0e, $08, $ff, $1c
10432     00 F9 0F 0C 
10436     1F 08 14 02 
1043a     07 F6 0F D0 
1043e     D7 D4 EF 2B | 	byte	$00, $f9, $0f, $0c, $1f, $08, $14, $02, $07, $f6, $0f, $d0, $d7, $d4, $ef, $2b
10442     51 20 08 F7 
10446     00 D0 D9 D3 
1044a     E7 E7 FE F9 
1044e     0A E9 E0 CE | 	byte	$51, $20, $08, $f7, $00, $d0, $d9, $d3, $e7, $e7, $fe, $f9, $0a, $e9, $e0, $ce
10452     DB FF 10 F1 
10456     E0 F7 F4 F7 
1045a     F8 FF 10 11 
1045e     0D 37 3A 26 | 	byte	$db, $ff, $10, $f1, $e0, $f7, $f4, $f7, $f8, $ff, $10, $11, $0d, $37, $3a, $26
10462     0A 1F 20 3D 
10466     20 3D 10 DB 
1046a     EF 0F 23 36 
1046e     12 18 E7 17 | 	byte	$0a, $1f, $20, $3d, $20, $3d, $10, $db, $ef, $0f, $23, $36, $12, $18, $e7, $17
10472     F4 09 FF 08 
10476     E3 23 04 1C 
1047a     E8 D0 DF F8 
1047e     FF 23 1D 04 | 	byte	$f4, $09, $ff, $08, $e3, $23, $04, $1c, $e8, $d0, $df, $f8, $ff, $23, $1d, $04
10482     07 12 FF E0 
10486     F7 16 1F 45 
1048a     46 20 27 20 
1048e     1F 14 11 00 | 	byte	$07, $12, $ff, $e0, $f7, $16, $1f, $45, $46, $20, $27, $20, $1f, $14, $11, $00
10492     1F 34 14 F5 
10496     FF 00 E6 F0 
1049a     C4 D5 DC EF 
1049e     2A 00 E9 E8 | 	byte	$1f, $34, $14, $f5, $ff, $00, $e6, $f0, $c4, $d5, $dc, $ef, $2a, $00, $e9, $e8
104a2     E9 D8 DB FB 
104a6     0B 02 F2 FB 
104aa     F8 D0 EF 00 
104ae     1F 20 F4 FB | 	byte	$e9, $d8, $db, $fb, $0b, $02, $f2, $fb, $f8, $d0, $ef, $00, $1f, $20, $f4, $fb
104b2     17 10 DD F3 
104b6     F1 0B 00 DF 
104ba     1A 37 48 40 
104be     04 2F 20 E9 | 	byte	$17, $10, $dd, $f3, $f1, $0b, $00, $df, $1a, $37, $48, $40, $04, $2f, $20, $e9
104c2     FB 3B 24 07 
104c6     E0 F7 00 F7 
104ca     1F 34 00 06 
104ce     E8 FF F0 EF | 	byte	$fb, $3b, $24, $07, $e0, $f7, $00, $f7, $1f, $34, $00, $06, $e8, $ff, $f0, $ef
104d2     FB 16 1F 5A 
104d6     28 18 07 0C 
104da     0B 18 0F 10 
104de     FF 34 1C 24 | 	byte	$fb, $16, $1f, $5a, $28, $18, $07, $0c, $0b, $18, $0f, $10, $ff, $34, $1c, $24
104e2     04 ED 07 0B 
104e6     25 10 0B 0C 
104ea     07 0B 09 EC 
104ee     D2 EB 08 E0 | 	byte	$04, $ed, $07, $0b, $25, $10, $0b, $0c, $07, $0b, $09, $ec, $d2, $eb, $08, $e0
104f2     F7 0A 0A F4 
104f6     F2 E3 F3 0C 
104fa     02 0B 00 CE 
104fe     E0 DF 0A FB | 	byte	$f7, $0a, $0a, $f4, $f2, $e3, $f3, $0c, $02, $0b, $00, $ce, $e0, $df, $0a, $fb
10502     28 10 08 17 
10506     33 1F 10 E4 
1050a     EA 17 18 DF 
1050e     F2 0F 30 13 | 	byte	$28, $10, $08, $17, $33, $1f, $10, $e4, $ea, $17, $18, $df, $f2, $0f, $30, $13
10512     20 E8 EF E8 
10516     D9 E5 DA FF 
1051a     20 F2 FD 0F 
1051e     04 09 F5 1F | 	byte	$20, $e8, $ef, $e8, $d9, $e5, $da, $ff, $20, $f2, $fd, $0f, $04, $09, $f5, $1f
10522     57 68 24 0C 
10526     F3 17 F0 F7 
1052a     23 3F 42 34 
1052e     10 00 EC 17 | 	byte	$57, $68, $24, $0c, $f3, $17, $f0, $f7, $23, $3f, $42, $34, $10, $00, $ec, $17
10532     08 1B 14 12 
10536     F0 F3 FA 11 
1053a     E4 FF 04 0F 
1053e     08 04 F5 15 | 	byte	$08, $1b, $14, $12, $f0, $f3, $fa, $11, $e4, $ff, $04, $0f, $08, $04, $f5, $15
10542     0B 1B 00 E9 
10546     E0 DF FB 17 
1054a     00 D9 FB 12 
1054e     17 22 00 0F | 	byte	$0b, $1b, $00, $e9, $e0, $df, $fb, $17, $00, $d9, $fb, $12, $17, $22, $00, $0f
10552     3B 20 EE FB 
10556     1F 0A 17 04 
1055a     FF 08 E5 0D 
1055e     F6 E2 EB 1B | 	byte	$3b, $20, $ee, $fb, $1f, $0a, $17, $04, $ff, $08, $e5, $0d, $f6, $e2, $eb, $1b
10562     18 13 09 13 
10566     00 E1 EE FA 
1056a     07 17 04 F2 
1056e     0B 0F 28 14 | 	byte	$18, $13, $09, $13, $00, $e1, $ee, $fa, $07, $17, $04, $f2, $0b, $0f, $28, $14
10572     1D 24 08 E0 
10576     DD E3 DD E7 
1057a     EE 0F 28 08 
1057e     FD F0 DF F6 | 	byte	$1d, $24, $08, $e0, $dd, $e3, $dd, $e7, $ee, $0f, $28, $08, $fd, $f0, $df, $f6
10582     FA FB 0B 00 
10586     F7 F6 F7 09 
1058a     1B 10 05 F4 
1058e     FF 1F 27 33 | 	byte	$fa, $fb, $0b, $00, $f7, $f6, $f7, $09, $1b, $10, $05, $f4, $ff, $1f, $27, $33
10592     24 18 05 3F 
10596     34 14 16 18 
1059a     09 14 03 1F 
1059e     10 17 29 20 | 	byte	$24, $18, $05, $3f, $34, $14, $16, $18, $09, $14, $03, $1f, $10, $17, $29, $20
105a2     00 F0 E9 01 
105a6     0B 08 EE F2 
105aa     FE E4 D7 E7 
105ae     FF FC 0C 00 | 	byte	$00, $f0, $e9, $01, $0b, $08, $ee, $f2, $fe, $e4, $d7, $e7, $ff, $fc, $0c, $00
105b2     17 18 06 00 
105b6     02 F8 EA E7 
105ba     FD 01 07 10 
105be     F0 FF F2 E7 | 	byte	$17, $18, $06, $00, $02, $f8, $ea, $e7, $fd, $01, $07, $10, $f0, $ff, $f2, $e7
105c2     ED F3 F8 F8 
105c6     E9 FF 18 02 
105ca     ED FB 09 F7 
105ce     02 F0 EF 00 | 	byte	$ed, $f3, $f8, $f8, $e9, $ff, $18, $02, $ed, $fb, $09, $f7, $02, $f0, $ef, $00
105d2     06 F0 DD E7 
105d6     EB FF 26 2C 
105da     04 FF 0C F8 
105de     FF 1D 2D 25 | 	byte	$06, $f0, $dd, $e7, $eb, $ff, $26, $2c, $04, $ff, $0c, $f8, $ff, $1d, $2d, $25
105e2     0E 1D 20 1B 
105e6     36 28 2B 45 
105ea     42 10 F4 C8 
105ee     F7 00 17 30 | 	byte	$0e, $1d, $20, $1b, $36, $28, $2b, $45, $42, $10, $f4, $c8, $f7, $00, $17, $30
105f2     24 12 E4 C0 
105f6     CB E7 F7 0C 
105fa     0E 0E 1F 36 
105fe     18 FB 1E 10 | 	byte	$24, $12, $e4, $c0, $cb, $e7, $f7, $0c, $0e, $0e, $1f, $36, $18, $fb, $1e, $10
10602     0A 0A E8 DF 
10606     EF F9 11 00 
1060a     F5 FF 21 00 
1060e     13 20 16 00 | 	byte	$0a, $0a, $e8, $df, $ef, $f9, $11, $00, $f5, $ff, $21, $00, $13, $20, $16, $00
10612     F2 07 2B 22 
10616     17 10 F6 09 
1061a     F4 D2 EB 07 
1061e     07 1D 00 DC | 	byte	$f2, $07, $2b, $22, $17, $10, $f6, $09, $f4, $d2, $eb, $07, $07, $1d, $00, $dc
10622     D8 DF FF 02 
10626     E2 EF 18 E8 
1062a     D8 E7 FD FB 
1062e     26 20 08 F3 | 	byte	$d8, $df, $ff, $02, $e2, $ef, $18, $e8, $d8, $e7, $fd, $fb, $26, $20, $08, $f3
10632     0F 08 F3 17 
10636     1C 10 F1 F9 
1063a     EA FF 1E 18 
1063e     11 25 30 2B | 	byte	$0f, $08, $f3, $17, $1c, $10, $f1, $f9, $ea, $ff, $1e, $18, $11, $25, $30, $2b
10642     14 10 0E 0B 
10646     0B 18 0F 30 
1064a     24 08 06 08 
1064e     FB 0F 14 08 | 	byte	$14, $10, $0e, $0b, $0b, $18, $0f, $30, $24, $08, $06, $08, $fb, $0f, $14, $08
10652     04 FB 17 12 
10656     F0 FF F8 0B 
1065a     27 30 10 0E 
1065e     22 16 F4 F5 | 	byte	$04, $fb, $17, $12, $f0, $ff, $f8, $0b, $27, $30, $10, $0e, $22, $16, $f4, $f5
10662     F3 F3 17 10 
10666     08 F2 D9 E3 
1066a     EC EF FE F4 
1066e     E9 0F 08 DA | 	byte	$f3, $f3, $17, $10, $08, $f2, $d9, $e3, $ec, $ef, $fe, $f4, $e9, $0f, $08, $da
10672     FB 08 F1 F9 
10676     13 2B 20 05 
1067a     F4 E0 DD FF 
1067e     14 0D 10 0F | 	byte	$fb, $08, $f1, $f9, $13, $2b, $20, $05, $f4, $e0, $dd, $ff, $14, $0d, $10, $0f
10682     28 F0 FF 08 
10686     02 F2 F0 ED 
1068a     E9 F7 1E 14 
1068e     04 FF 25 10 | 	byte	$28, $f0, $ff, $08, $02, $f2, $f0, $ed, $e9, $f7, $1e, $14, $04, $ff, $25, $10
10692     0B 05 08 0D 
10696     F2 F3 07 0B 
1069a     00 1F 30 12 
1069e     F0 FF 26 1C | 	byte	$0b, $05, $08, $0d, $f2, $f3, $07, $0b, $00, $1f, $30, $12, $f0, $ff, $26, $1c
106a2     10 F8 07 00 
106a6     1F 32 14 13 
106aa     09 0B FA 07 
106ae     08 0F 08 FF | 	byte	$10, $f8, $07, $00, $1f, $32, $14, $13, $09, $0b, $fa, $07, $08, $0f, $08, $ff
106b2     2E 10 00 EF 
106b6     09 07 00 FF 
106ba     14 F7 16 06 
106be     02 FB EA D9 | 	byte	$2e, $10, $00, $ef, $09, $07, $00, $ff, $14, $f7, $16, $06, $02, $fb, $ea, $d9
106c2     EA EB FF 09 
106c6     F5 06 FB F0 
106ca     DB FB 09 1D 
106ce     13 33 20 10 | 	byte	$ea, $eb, $ff, $09, $f5, $06, $fb, $f0, $db, $fb, $09, $1d, $13, $33, $20, $10
106d2     10 11 F4 EF 
106d6     FF 1A 0F 37 
106da     40 18 F2 ED 
106de     07 14 F8 E6 | 	byte	$10, $11, $f4, $ef, $ff, $1a, $0f, $37, $40, $18, $f2, $ed, $07, $14, $f8, $e6
106e2     F8 EC F3 F4 
106e6     DC EF 09 04 
106ea     EC E7 09 13 
106ee     00 EB F2 0B | 	byte	$f8, $ec, $f3, $f4, $dc, $ef, $09, $04, $ec, $e7, $09, $13, $00, $eb, $f2, $0b
106f2     22 1B 24 19 
106f6     0A F1 16 09 
106fa     F8 ED E8 E3 
106fe     F6 F6 F8 E6 | 	byte	$22, $1b, $24, $19, $0a, $f1, $16, $09, $f8, $ed, $e8, $e3, $f6, $f6, $f8, $e6
10702     FF 27 30 F2 
10706     1E 04 0F 10 
1070a     09 0D 04 F9 
1070e     17 1B 1C 08 | 	byte	$ff, $27, $30, $f2, $1e, $04, $0f, $10, $09, $0d, $04, $f9, $17, $1b, $1c, $08
10712     F2 07 11 0A 
10716     FE 0D 18 F8 
1071a     0B 12 07 2F 
1071e     30 10 14 F2 | 	byte	$f2, $07, $11, $0a, $fe, $0d, $18, $f8, $0b, $12, $07, $2f, $30, $10, $14, $f2
10722     FF 28 00 FB 
10726     09 1F 2D 24 
1072a     08 13 0E F0 
1072e     CC CF F3 F5 | 	byte	$ff, $28, $00, $fb, $09, $1f, $2d, $24, $08, $13, $0e, $f0, $cc, $cf, $f3, $f5
10732     ED 17 05 17 
10736     14 F4 D7 E8 
1073a     FB 02 F8 F0 
1073e     F1 EA FF 22 | 	byte	$ed, $17, $05, $17, $14, $f4, $d7, $e8, $fb, $02, $f8, $f0, $f1, $ea, $ff, $22
10742     10 09 1E 04 
10746     E0 DB 07 F4 
1074a     F7 1B 20 16 
1074e     1B 11 00 FB | 	byte	$10, $09, $1e, $04, $e0, $db, $07, $f4, $f7, $1b, $20, $16, $1b, $11, $00, $fb
10752     11 04 F4 EF 
10756     F2 FF 0C E4 
1075a     DB FF 16 2D 
1075e     1C 12 11 08 | 	byte	$11, $04, $f4, $ef, $f2, $ff, $0c, $e4, $db, $ff, $16, $2d, $1c, $12, $11, $08
10762     F2 D4 D7 0F 
10766     14 13 07 23 
1076a     15 1B 1B 25 
1076e     1B 0C 0C 00 | 	byte	$f2, $d4, $d7, $0f, $14, $13, $07, $23, $15, $1b, $1b, $25, $1b, $0c, $0c, $00
10772     E7 17 19 10 
10776     13 19 10 1C 
1077a     00 EF 03 07 
1077e     17 20 0A 02 | 	byte	$e7, $17, $19, $10, $13, $19, $10, $1c, $00, $ef, $03, $07, $17, $20, $0a, $02
10782     FF 1F 1C F2 
10786     FB F4 E7 0F 
1078a     12 04 F8 F3 
1078e     0F 10 F5 F4 | 	byte	$ff, $1f, $1c, $f2, $fb, $f4, $e7, $0f, $12, $04, $f8, $f3, $0f, $10, $f5, $f4
10792     FE 17 15 10 
10796     E7 0F 18 F8 
1079a     F0 F6 E0 EF 
1079e     1B 14 0A 08 | 	byte	$fe, $17, $15, $10, $e7, $0f, $18, $f8, $f0, $f6, $e0, $ef, $1b, $14, $0a, $08
107a2     D4 E7 FF 1F 
107a6     00 EB E5 E0 
107aa     DA DF 03 07 
107ae     1F 2D 25 18 | 	byte	$d4, $e7, $ff, $1f, $00, $eb, $e5, $e0, $da, $df, $03, $07, $1f, $2d, $25, $18
107b2     00 EB 0B F5 
107b6     FF 37 24 1D 
107ba     2C 2C 1C 0A 
107be     F3 F7 FC F7 | 	byte	$00, $eb, $0b, $f5, $ff, $37, $24, $1d, $2c, $2c, $1c, $0a, $f3, $f7, $fc, $f7
107c2     1B 20 F4 F3 
107c6     13 18 14 0D 
107ca     1C 1A F4 DF 
107ce     11 0E 19 0D | 	byte	$1b, $20, $f4, $f3, $13, $18, $14, $0d, $1c, $1a, $f4, $df, $11, $0e, $19, $0d
107d2     15 00 ED 0B 
107d6     08 F4 0D 1C 
107da     15 22 0C F8 
107de     FD F5 FB 13 | 	byte	$15, $00, $ed, $0b, $08, $f4, $0d, $1c, $15, $22, $0c, $f8, $fd, $f5, $fb, $13
107e2     18 1F 27 10 
107e6     F4 F9 03 01 
107ea     F7 15 14 F7 
107ee     03 02 F0 E7 | 	byte	$18, $1f, $27, $10, $f4, $f9, $03, $01, $f7, $15, $14, $f7, $03, $02, $f0, $e7
107f2     F4 F6 E8 F6 
107f6     FB 0C F8 FB 
107fa     FC 0B 0B 04 
107fe     07 FA FE 00 | 	byte	$f4, $f6, $e8, $f6, $fb, $0c, $f8, $fb, $fc, $0b, $0b, $04, $07, $fa, $fe, $00
10802     01 FB 17 22 
10806     1F 33 20 F0 
1080a     F7 11 11 0D 
1080e     04 05 04 06 | 	byte	$01, $fb, $17, $22, $1f, $33, $20, $f0, $f7, $11, $11, $0d, $04, $05, $04, $06
10812     0E 08 13 10 
10816     0A 02 F7 13 
1081a     F8 E2 E7 F4 
1081e     EE FD 06 01 | 	byte	$0e, $08, $13, $10, $0a, $02, $f7, $13, $f8, $e2, $e7, $f4, $ee, $fd, $06, $01
10822     17 21 1A 08 
10826     FD ED EB 1B 
1082a     25 1F 2D 35 
1082e     30 13 26 10 | 	byte	$17, $21, $1a, $08, $fd, $ed, $eb, $1b, $25, $1f, $2d, $35, $30, $13, $26, $10
10832     F4 FB 19 01 
10836     FD F2 FC F1 
1083a     E9 FF 14 05 
1083e     05 06 F4 E0 | 	byte	$f4, $fb, $19, $01, $fd, $f2, $fc, $f1, $e9, $ff, $14, $05, $05, $06, $f4, $e0
10842     D2 DD F7 0F 
10846     09 00 F1 0F 
1084a     10 08 FD FA 
1084e     F5 F4 F3 F9 | 	byte	$d2, $dd, $f7, $0f, $09, $00, $f1, $0f, $10, $08, $fd, $fa, $f5, $f4, $f3, $f9
10852     D9 FB 0F 1F 
10856     37 20 ED 05 
1085a     0D 10 17 22 
1085e     23 2F 30 00 | 	byte	$d9, $fb, $0f, $1f, $37, $20, $ed, $05, $0d, $10, $17, $22, $23, $2f, $30, $00
10862     E5 F7 1F 11 
10866     FD 03 0F 14 
1086a     08 E9 DE E3 
1086e     EB FF 23 20 | 	byte	$e5, $f7, $1f, $11, $fd, $03, $0f, $14, $08, $e9, $de, $e3, $eb, $ff, $23, $20
10872     00 02 E8 DF 
10876     07 10 FE 0E 
1087a     0B 13 18 10 
1087e     07 00 EB F5 | 	byte	$00, $02, $e8, $df, $07, $10, $fe, $0e, $0b, $13, $18, $10, $07, $00, $eb, $f5
10882     EC F7 13 00 
10886     07 08 FB 00 
1088a     17 28 25 18 
1088e     00 F0 DF D8 | 	byte	$ec, $f7, $13, $00, $07, $08, $fb, $00, $17, $28, $25, $18, $00, $f0, $df, $d8
10892     D3 0F 1E 0A 
10896     F6 F7 13 10 
1089a     F0 F7 0A 00 
1089e     FB 1F 1A 0B | 	byte	$d3, $0f, $1e, $0a, $f6, $f7, $13, $10, $f0, $f7, $0a, $00, $fb, $1f, $1a, $0b
108a2     04 15 F4 FF 
108a6     2D 30 20 1D 
108aa     14 F8 FA FC 
108ae     F7 04 05 16 | 	byte	$04, $15, $f4, $ff, $2d, $30, $20, $1d, $14, $f8, $fa, $fc, $f7, $04, $05, $16
108b2     16 0F 07 08 
108b6     F4 F5 F3 13 
108ba     14 0B 00 F4 
108be     F4 07 0A F0 | 	byte	$16, $0f, $07, $08, $f4, $f5, $f3, $13, $14, $0b, $00, $f4, $f4, $07, $0a, $f0
108c2     E4 EB EF E9 
108c6     FE F0 DF F3 
108ca     0F 1F 35 14 
108ce     06 12 1A 04 | 	byte	$e4, $eb, $ef, $e9, $fe, $f0, $df, $f3, $0f, $1f, $35, $14, $06, $12, $1a, $04
108d2     06 FD 05 07 
108d6     02 04 0B 2D 
108da     28 10 F7 0D 
108de     0E E4 EF 08 | 	byte	$06, $fd, $05, $07, $02, $04, $0b, $2d, $28, $10, $f7, $0d, $0e, $e4, $ef, $08
108e2     F6 F5 0B 18 
108e6     08 07 F2 ED 
108ea     FF 2E 2C 00 
108ee     EC 07 2B 30 | 	byte	$f6, $f5, $0b, $18, $08, $07, $f2, $ed, $ff, $2e, $2c, $00, $ec, $07, $2b, $30
108f2     1C F4 FF 0D 
108f6     0A F9 00 0F 
108fa     24 00 06 03 
108fe     0A 27 18 EE | 	byte	$1c, $f4, $ff, $0d, $0a, $f9, $00, $0f, $24, $00, $06, $03, $0a, $27, $18, $ee
10902     EA D8 F5 F9 
10906     EA FB 1B 22 
1090a     04 EF EA E7 
1090e     FF 00 F7 0F | 	byte	$ea, $d8, $f5, $f9, $ea, $fb, $1b, $22, $04, $ef, $ea, $e7, $ff, $00, $f7, $0f
10912     0A 08 F4 F8 
10916     F7 04 FC EA 
1091a     FF 17 1A 11 
1091e     0A EC ED FB | 	byte	$0a, $08, $f4, $f8, $f7, $04, $fc, $ea, $ff, $17, $1a, $11, $0a, $ec, $ed, $fb
10922     0F 1E 18 FB 
10926     08 FB FB 0B 
1092a     18 08 F1 F7 
1092e     1B 14 13 08 | 	byte	$0f, $1e, $18, $fb, $08, $fb, $fb, $0b, $18, $08, $f1, $f7, $1b, $14, $13, $08
10932     F5 13 18 00 
10936     EC E5 F7 FB 
1093a     0F 2C 10 17 
1093e     14 05 04 F3 | 	byte	$f5, $13, $18, $00, $ec, $e5, $f7, $fb, $0f, $2c, $10, $17, $14, $05, $04, $f3
10942     FA 19 18 10 
10946     FA 13 24 1B 
1094a     21 15 12 14 
1094e     00 F0 F4 F5 | 	byte	$fa, $19, $18, $10, $fa, $13, $24, $1b, $21, $15, $12, $14, $00, $f0, $f4, $f5
10952     FB 08 0A F4 
10956     F0 F7 04 EE 
1095a     FF 02 F9 FF 
1095e     05 F4 F3 0B | 	byte	$fb, $08, $0a, $f4, $f0, $f7, $04, $ee, $ff, $02, $f9, $ff, $05, $f4, $f3, $0b
10962     19 10 00 1B 
10966     2C 1C 10 1D 
1096a     20 1D 1B 27 
1096e     2C 08 F4 F3 | 	byte	$19, $10, $00, $1b, $2c, $1c, $10, $1d, $20, $1d, $1b, $27, $2c, $08, $f4, $f3
10972     05 15 17 26 
10976     1D 08 FB F6 
1097a     EB EB E0 DC 
1097e     D7 E9 FE F0 | 	byte	$05, $15, $17, $26, $1d, $08, $fb, $f6, $eb, $eb, $e0, $dc, $d7, $e9, $fe, $f0
10982     F4 E7 FF 02 
10986     0B 09 F8 ED 
1098a     FC 0B 23 26 
1098e     08 F4 F4 EC | 	byte	$f4, $e7, $ff, $02, $0b, $09, $f8, $ed, $fc, $0b, $23, $26, $08, $f4, $f4, $ec
10992     E3 FF FD 09 
10996     0E 0F 1D 2C 
1099a     20 27 26 21 
1099e     10 15 00 05 | 	byte	$e3, $ff, $fd, $09, $0e, $0f, $1d, $2c, $20, $27, $26, $21, $10, $15, $00, $05
109a2     11 19 14 01 
109a6     F8 FE 05 10 
109aa     1B 2A 12 15 
109ae     00 F1 F9 0B | 	byte	$11, $19, $14, $01, $f8, $fe, $05, $10, $1b, $2a, $12, $15, $00, $f1, $f9, $0b
109b2     F8 0F 22 27 
109b6     18 09 03 07 
109ba     0D F0 EC EF 
109be     F9 07 15 13 | 	byte	$f8, $0f, $22, $27, $18, $09, $03, $07, $0d, $f0, $ec, $ef, $f9, $07, $15, $13
109c2     15 0A F8 F3 
109c6     F1 FC F7 0A 
109ca     F8 FD 00 F3 
109ce     ED FF EC E9 | 	byte	$15, $0a, $f8, $f3, $f1, $fc, $f7, $0a, $f8, $fd, $00, $f3, $ed, $ff, $ec, $e9
109d2     EB F5 FA EB 
109d6     F0 EB 0D 04 
109da     FF 1D 14 F9 
109de     0B 00 E6 EB | 	byte	$eb, $f5, $fa, $eb, $f0, $eb, $0d, $04, $ff, $1d, $14, $f9, $0b, $00, $e6, $eb
109e2     01 F9 0F 25 
109e6     2A 25 33 20 
109ea     10 0F 0A 07 
109ee     08 07 15 18 | 	byte	$01, $f9, $0f, $25, $2a, $25, $33, $20, $10, $0f, $0a, $07, $08, $07, $15, $18
109f2     00 F2 F5 07 
109f6     14 17 2A 10 
109fa     F8 F9 05 15 
109fe     00 D4 DD FF | 	byte	$00, $f2, $f5, $07, $14, $17, $2a, $10, $f8, $f9, $05, $15, $00, $d4, $dd, $ff
10a02     00 0B 16 20 
10a06     15 17 13 18 
10a0a     00 F7 06 15 
10a0e     25 18 FC 07 | 	byte	$00, $0b, $16, $20, $15, $17, $13, $18, $00, $f7, $06, $15, $25, $18, $fc, $07
10a12     07 08 0F 14 
10a16     14 00 E3 ED 
10a1a     FF 23 14 F6 
10a1e     FD F2 DA E3 | 	byte	$07, $08, $0f, $14, $14, $00, $e3, $ed, $ff, $23, $14, $f6, $fd, $f2, $da, $e3
10a22     F0 E8 D6 EF 
10a26     FB F7 F2 F7 
10a2a     F9 1B 12 15 
10a2e     18 12 08 FD | 	byte	$f0, $e8, $d6, $ef, $fb, $f7, $f2, $f7, $f9, $1b, $12, $15, $18, $12, $08, $fd
10a32     17 1A 10 08 
10a36     0D 00 03 09 
10a3a     13 1D 16 08 
10a3e     F8 0F 02 01 | 	byte	$17, $1a, $10, $08, $0d, $00, $03, $09, $13, $1d, $16, $08, $f8, $0f, $02, $01
10a42     01 06 13 1F 
10a46     14 10 00 F8 
10a4a     E6 DB EB FF 
10a4e     16 04 F9 01 | 	byte	$01, $06, $13, $1f, $14, $10, $00, $f8, $e6, $db, $eb, $ff, $16, $04, $f9, $01
10a52     FC F7 FE 00 
10a56     E5 FF 0E 0B 
10a5a     05 0A 0D 14 
10a5e     0D 08 FB F8 | 	byte	$fc, $f7, $fe, $00, $e5, $ff, $0e, $0b, $05, $0a, $0d, $14, $0d, $08, $fb, $f8
10a62     FF 06 F8 02 
10a66     0F 18 04 09 
10a6a     19 25 20 00 
10a6e     FE 02 FD 08 | 	byte	$ff, $06, $f8, $02, $0f, $18, $04, $09, $19, $25, $20, $00, $fe, $02, $fd, $08
10a72     10 F3 F7 FB 
10a76     1B 14 14 27 
10a7a     25 15 0C E2 
10a7e     FF 17 11 19 | 	byte	$10, $f3, $f7, $fb, $1b, $14, $14, $27, $25, $15, $0c, $e2, $ff, $17, $11, $19
10a82     20 01 F2 F3 
10a86     FB 0A 12 1F 
10a8a     2B 18 F8 EE 
10a8e     D8 D6 E7 0B | 	byte	$20, $01, $f2, $f3, $fb, $0a, $12, $1f, $2b, $18, $f8, $ee, $d8, $d6, $e7, $0b
10a92     0B 00 F3 FF 
10a96     08 F0 EF 00 
10a9a     F7 FF 12 02 
10a9e     0F 0C F4 F3 | 	byte	$0b, $00, $f3, $ff, $08, $f0, $ef, $00, $f7, $ff, $12, $02, $0f, $0c, $f4, $f3
10aa2     FF 0F 21 10 
10aa6     09 14 08 02 
10aaa     F4 0F 2F 2B 
10aae     2E 24 00 FB | 	byte	$ff, $0f, $21, $10, $09, $14, $08, $02, $f4, $0f, $2f, $2b, $2e, $24, $00, $fb
10ab2     F9 FB F2 0F 
10ab6     1A 0C FA 07 
10aba     09 00 ED F5 
10abe     F0 FF 1D 11 | 	byte	$f9, $fb, $f2, $0f, $1a, $0c, $fa, $07, $09, $00, $ed, $f5, $f0, $ff, $1d, $11
10ac2     00 0D 0D 0C 
10ac6     0A 0A 0C 1F 
10aca     16 08 F0 F9 
10ace     FA 04 07 14 | 	byte	$00, $0d, $0d, $0c, $0a, $0a, $0c, $1f, $16, $08, $f0, $f9, $fa, $04, $07, $14
10ad2     18 15 27 24 
10ad6     00 F9 02 07 
10ada     0B 08 0F 09 
10ade     F2 EA E9 E0 | 	byte	$18, $15, $27, $24, $00, $f9, $02, $07, $0b, $08, $0f, $09, $f2, $ea, $e9, $e0
10ae2     EF 10 0F 00 
10ae6     D8 DF ED ED 
10aea     FF 1F 15 00 
10aee     F6 FF 0B 01 | 	byte	$ef, $10, $0f, $00, $d8, $df, $ed, $ed, $ff, $1f, $15, $00, $f6, $ff, $0b, $01
10af2     02 09 1E 24 
10af6     20 18 19 2B 
10afa     30 10 03 13 
10afe     10 F8 E9 EF | 	byte	$02, $09, $1e, $24, $20, $18, $19, $2b, $30, $10, $03, $13, $10, $f8, $e9, $ef
10b02     F3 FF 19 22 
10b06     12 0F 1A 14 
10b0a     00 F3 03 04 
10b0e     F4 D6 DF FF | 	byte	$f3, $ff, $19, $22, $12, $0f, $1a, $14, $00, $f3, $03, $04, $f4, $d6, $df, $ff
10b12     08 E8 E2 DD 
10b16     F7 08 0F 19 
10b1a     1D 11 0C F7 
10b1e     0B 29 20 14 | 	byte	$08, $e8, $e2, $dd, $f7, $08, $0f, $19, $1d, $11, $0c, $f7, $0b, $29, $20, $14
10b22     13 12 0E 12 
10b26     08 FA F2 FB 
10b2a     07 0E 02 F0 
10b2e     ED F7 FF 1D | 	byte	$13, $12, $0e, $12, $08, $fa, $f2, $fb, $07, $0e, $02, $f0, $ed, $f7, $ff, $1d
10b32     28 20 10 06 
10b36     F0 FA 01 F0 
10b3a     E7 FB 0D 1F 
10b3e     16 18 11 0E | 	byte	$28, $20, $10, $06, $f0, $fa, $01, $f0, $e7, $fb, $0d, $1f, $16, $18, $11, $0e
10b42     0B 17 1A 0E 
10b46     11 04 00 0B 
10b4a     13 16 23 24 
10b4e     18 13 0E 09 | 	byte	$0b, $17, $1a, $0e, $11, $04, $00, $0b, $13, $16, $23, $24, $18, $13, $0e, $09
10b52     0B F8 F7 F8 
10b56     F1 EF F7 F3 
10b5a     E8 DA D8 D7 
10b5e     E4 E5 F3 06 | 	byte	$0b, $f8, $f7, $f8, $f1, $ef, $f7, $f3, $e8, $da, $d8, $d7, $e4, $e5, $f3, $06
10b62     13 0D 0B 01 
10b66     FB 02 11 17 
10b6a     24 10 F4 F7 
10b6e     FF 17 14 00 | 	byte	$13, $0d, $0b, $01, $fb, $02, $11, $17, $24, $10, $f4, $f7, $ff, $17, $14, $00
10b72     03 0A 07 09 
10b76     05 0B 12 1B 
10b7a     1F 1E 14 0D 
10b7e     00 FD F0 EA | 	byte	$03, $0a, $07, $09, $05, $0b, $12, $1b, $1f, $1e, $14, $0d, $00, $fd, $f0, $ea
10b82     F5 FD 00 F6 
10b86     F5 F7 FD 12 
10b8a     10 10 15 12 
10b8e     13 12 06 FA | 	byte	$f5, $fd, $00, $f6, $f5, $f7, $fd, $12, $10, $10, $15, $12, $13, $12, $06, $fa
10b92     07 13 23 24 
10b96     09 01 FC F4 
10b9a     EB 0F 0C 04 
10b9e     04 09 0B 12 | 	byte	$07, $13, $23, $24, $09, $01, $fc, $f4, $eb, $0f, $0c, $04, $04, $09, $0b, $12
10ba2     04 04 F9 F4 
10ba6     FF 02 FD FF 
10baa     0A 07 0A 10 
10bae     00 F8 01 FB | 	byte	$04, $04, $f9, $f4, $ff, $02, $fd, $ff, $0a, $07, $0a, $10, $00, $f8, $01, $fb
10bb2     07 0A 04 F0 
10bb6     ED FD 04 ED 
10bba     F3 05 00 ED 
10bbe     FF 26 20 1C | 	byte	$07, $0a, $04, $f0, $ed, $fd, $04, $ed, $f3, $05, $00, $ed, $ff, $26, $20, $1c
10bc2     15 11 1B 0C 
10bc6     02 0E 12 03 
10bca     00 F0 E0 DD 
10bce     EF 13 10 03 | 	byte	$15, $11, $1b, $0c, $02, $0e, $12, $03, $00, $f0, $e0, $dd, $ef, $13, $10, $03
10bd2     03 0D 0F 16 
10bd6     0C F8 F8 F6 
10bda     FB 0F 17 18 
10bde     02 FC 07 11 | 	byte	$03, $0d, $0f, $16, $0c, $f8, $f8, $f6, $fb, $0f, $17, $18, $02, $fc, $07, $11
10be2     13 13 1F 23 
10be6     16 0A 04 F5 
10bea     E9 F6 F8 F9 
10bee     0A 00 F9 00 | 	byte	$13, $13, $1f, $23, $16, $0a, $04, $f5, $e9, $f6, $f8, $f9, $0a, $00, $f9, $00
10bf2     01 05 0B 0C 
10bf6     01 05 06 08 
10bfa     03 02 F6 FF 
10bfe     19 20 10 0C | 	byte	$01, $05, $0b, $0c, $01, $05, $06, $08, $03, $02, $f6, $ff, $19, $20, $10, $0c
10c02     00 03 02 02 
10c06     05 13 12 0F 
10c0a     1D 24 15 19 
10c0e     18 11 0A 08 | 	byte	$00, $03, $02, $02, $05, $13, $12, $0f, $1d, $24, $15, $19, $18, $11, $0a, $08
10c12     00 00 00 00 
10c16     00 00 00 00 | 	byte	$00[8]
10c1a     2E 49 58 20 
10c1e     23 21 2B 16 
10c22     81 B4 D1 E9 
10c26     00 00 00 00 | 	byte	$2e, $49, $58, $20, $23, $21, $2b, $16, $81, $b4, $d1, $e9, $00, $00, $00, $00
10c2a     05 05 00 FF 
10c2e     00 00 00 00 
10c32     00 00 00 00 
10c36     00 00 00 00 | 	byte	$05, $05, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10c3a     00 00 00 00 
      ...             
10c5e     00 00 00 00 
10c62     00 00 00 00 | 	byte	$00[44]
10c66     FE 0A 45 7D 
10c6a     7C 7C 4E 80 
10c6e     80 80 51 7D 
10c72     7D 0C 80 80 | 	byte	$fe, $0a, $45, $7d, $7c, $7c, $4e, $80, $80, $80, $51, $7d, $7d, $0c, $80, $80
10c76     E6 7E 7E 53 
10c7a     80 80 A8 7E 
10c7e     7E 6D 80 80 
10c82     8C 7E 7E 7B | 	byte	$e6, $7e, $7e, $53, $80, $80, $a8, $7e, $7e, $6d, $80, $80, $8c, $7e, $7e, $7b
10c86     8C 80 80 6D 
10c8a     7E 7F 2F 80 
10c8e     80 80 5B 7F 
10c92     7F 69 83 80 | 	byte	$8c, $80, $80, $6d, $7e, $7f, $2f, $80, $80, $80, $5b, $7f, $7f, $69, $83, $80
10c96     80 FA 7F 7F 
10c9a     7C BB 80 80 
10c9e     A3 7F 7F 7E 
10ca2     1B 80 80 80 | 	byte	$80, $fa, $7f, $7f, $7c, $bb, $80, $80, $a3, $7f, $7f, $7e, $1b, $80, $80, $80
10ca6     54 7F 7F 6A 
10caa     83 80 80 B8 
10cae     7F 7F 7D 78 
10cb2     B2 80 80 81 | 	byte	$54, $7f, $7f, $6a, $83, $80, $80, $b8, $7f, $7f, $7d, $78, $b2, $80, $80, $81
10cb6     08 7F 7F 7D 
10cba     61 8D 80 80 
10cbe     82 33 7F 7F 
10cc2     7E 3B 80 80 | 	byte	$08, $7f, $7f, $7d, $61, $8d, $80, $80, $82, $33, $7f, $7f, $7e, $3b, $80, $80
10cc6     80 8A 5B 7F 
10cca     7F 7F 10 80 
10cce     80 80 85 36 
10cd2     7F 7F 7E 7D | 	byte	$80, $8a, $5b, $7f, $7f, $7f, $10, $80, $80, $80, $85, $36, $7f, $7f, $7e, $7d
10cd6     F0 80 80 80 
10cda     80 F0 7F 7F 
10cde     7D 7E 3D 89 
10ce2     80 80 81 9B | 	byte	$f0, $80, $80, $80, $80, $f0, $7f, $7f, $7d, $7e, $3d, $89, $80, $80, $81, $9b
10ce6     59 7F 7F 7F 
10cea     78 D4 80 80 
10cee     81 81 FB 7F 
10cf2     7F 7D 7E 77 | 	byte	$59, $7f, $7f, $7f, $78, $d4, $80, $80, $81, $81, $fb, $7f, $7f, $7d, $7e, $77
10cf6     EF 80 80 80 
10cfa     81 82 FC 7F 
10cfe     7F 7D 7E 7E 
10d02     18 86 80 80 | 	byte	$ef, $80, $80, $80, $81, $82, $fc, $7f, $7f, $7d, $7e, $7e, $18, $86, $80, $80
10d06     80 80 CC 68 
10d0a     7F 7E 7E 7E 
10d0e     44 A9 80 80 
10d12     81 81 8F 17 | 	byte	$80, $80, $cc, $68, $7f, $7e, $7e, $7e, $44, $a9, $80, $80, $81, $81, $8f, $17
10d16     7F 7F 7E 7E 
10d1a     7E 65 EB 80 
10d1e     80 80 81 81 
10d22     84 F7 72 7F | 	byte	$7f, $7f, $7e, $7e, $7e, $65, $eb, $80, $80, $80, $81, $81, $84, $f7, $72, $7f
10d26     7D 7E 7E 7B 
10d2a     17 9A 80 80 
10d2e     80 80 81 C6 
10d32     48 7F 7F 7E | 	byte	$7d, $7e, $7e, $7b, $17, $9a, $80, $80, $80, $80, $81, $c6, $48, $7f, $7f, $7e
10d36     7E 7E 5E F4 
10d3a     8E 80 80 80 
10d3e     81 81 86 E6 
10d42     50 7F 7E 7E | 	byte	$7e, $7e, $5e, $f4, $8e, $80, $80, $80, $81, $81, $86, $e6, $50, $7f, $7e, $7e
10d46     7E 7E 7C 2D 
10d4a     C5 80 80 81 
10d4e     81 81 81 A5 
10d52     12 73 7F 7D | 	byte	$7e, $7e, $7c, $2d, $c5, $80, $80, $81, $81, $81, $81, $a5, $12, $73, $7f, $7d
10d56     7E 7E 7E 6E 
10d5a     16 BA 80 80 
10d5e     81 81 81 81 
10d62     81 BC 16 68 | 	byte	$7e, $7e, $7e, $6e, $16, $ba, $80, $80, $81, $81, $81, $81, $81, $bc, $16, $68
10d66     7F 7D 7E 7E 
10d6a     7E 7E 62 10 
10d6e     BC 80 80 81 
10d72     81 81 81 81 | 	byte	$7f, $7d, $7e, $7e, $7e, $7e, $62, $10, $bc, $80, $80, $81, $81, $81, $81, $81
10d76     B7 11 63 7F 
10d7a     7D 7E 7E 7E 
10d7e     7E 7B 3F F6 
10d82     AF 80 80 81 | 	byte	$b7, $11, $63, $7f, $7d, $7e, $7e, $7e, $7e, $7b, $3f, $f6, $af, $80, $80, $81
10d86     80 80 81 81 
10d8a     83 C0 0B 52 
10d8e     7F 7E 7E 7E 
10d92     7E 7E 7F 6D | 	byte	$80, $80, $81, $81, $83, $c0, $0b, $52, $7f, $7e, $7e, $7e, $7e, $7e, $7f, $6d
10d96     2C E5 A1 80 
10d9a     80 80 81 81 
10d9e     81 81 85 BF 
10da2     FF 3D 73 7F | 	byte	$2c, $e5, $a1, $80, $80, $80, $81, $81, $81, $81, $85, $bf, $ff, $3d, $73, $7f
10da6     7E 7E 7E 7F 
10daa     7F 7F 75 42 
10dae     07 CC 95 80 
10db2     81 81 81 81 | 	byte	$7e, $7e, $7e, $7f, $7f, $7f, $75, $42, $07, $cc, $95, $80, $81, $81, $81, $81
10db6     81 81 81 9F 
10dba     DB 19 52 7D 
10dbe     7E 7E 7E 7E 
10dc2     7F 7F 7F 74 | 	byte	$81, $81, $81, $9f, $db, $19, $52, $7d, $7e, $7e, $7e, $7e, $7f, $7f, $7f, $74
10dc6     46 15 E2 B1 
10dca     87 80 81 81 
10dce     81 81 81 81 
10dd2     81 88 B9 EC | 	byte	$46, $15, $e2, $b1, $87, $80, $81, $81, $81, $81, $81, $81, $81, $88, $b9, $ec
10dd6     1F 50 78 7E 
10dda     7E 7E 7E 7E 
10dde     7E 7F 7F 62 
10de2     35 05 D6 AB | 	byte	$1f, $50, $78, $7e, $7e, $7e, $7e, $7e, $7e, $7f, $7f, $62, $35, $05, $d6, $ab
10de6     86 80 81 81 
10dea     81 81 81 81 
10dee     81 81 98 C2 
10df2     ED 19 43 68 | 	byte	$86, $80, $81, $81, $81, $81, $81, $81, $81, $81, $98, $c2, $ed, $19, $43, $68
10df6     7E 7E 7E 7E 
10dfa     7E 7E 7E 7E | 	byte	$7e[8]
10dfe     7F 6E 49 21 
10e02     F6 CD A6 84 
10e06     80 81 81 81 
10e0a     81 81 81 81 | 	byte	$7f, $6e, $49, $21, $f6, $cd, $a6, $84, $80, $81, $81, $81, $81, $81, $81, $81
10e0e     81 86 A8 CC 
10e12     F0 15 39 5A 
10e16     76 7E 7E 7E 
10e1a     7E 7E 7E 7E | 	byte	$81, $86, $a8, $cc, $f0, $15, $39, $5a, $76, $7e, $7e, $7e, $7e, $7e, $7e, $7e
10e1e     7F 7F 74 57 
10e22     36 12 EF CB 
10e26     AA 8C 80 81 
10e2a     81 81 81 81 | 	byte	$7f, $7f, $74, $57, $36, $12, $ef, $cb, $aa, $8c, $80, $81, $81, $81, $81, $81
10e2e     81 81 81 81 
10e32     8E AB C8 E8 
10e36     07 26 44 5F 
10e3a     76 7E 7E 7E | 	byte	$81, $81, $81, $81, $8e, $ab, $c8, $e8, $07, $26, $44, $5f, $76, $7e, $7e, $7e
10e3e     7E 7E 7E 7E 
10e42     7F 7F 7D 68 
10e46     4E 32 13 F5 
10e4a     D7 BB A3 8E | 	byte	$7e, $7e, $7e, $7e, $7f, $7f, $7d, $68, $4e, $32, $13, $f5, $d7, $bb, $a3, $8e
10e4e     81 81 81 81 
10e52     81 81 81 81 
10e56     81 81       | 	byte	$81[10]
10e58     84 9A B2 CC 
10e5c     E6 01 1C 36 
10e60     4E 64 76 7E 
10e64     7E 7E 7E 7E | 	byte	$84, $9a, $b2, $cc, $e6, $01, $1c, $36, $4e, $64, $76, $7e, $7e, $7e, $7e, $7e
10e68     7E 7E 7E 7F 
10e6c     7E 71 5C 46 
10e70     2F 18 01 E9 
10e74     D3 BD A9 97 | 	byte	$7e, $7e, $7e, $7f, $7e, $71, $5c, $46, $2f, $18, $01, $e9, $d3, $bd, $a9, $97
10e78     87 81 81 81 
10e7c     81 81 81 81 
10e80     81 81 81 8D 
10e84     9F B3 C8 DE | 	byte	$87, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $8d, $9f, $b3, $c8, $de
10e88     F5 0C 23 39 
10e8c     4E 60 71 7D 
10e90     7E 7E 7E 7E 
10e94     7E 7E 7E 7F | 	byte	$f5, $0c, $23, $39, $4e, $60, $71, $7d, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7f
10e98     7F 79 6C 5E 
10e9c     4F 3D 2B 18 
10ea0     04 F0 DD CA 
10ea4     B8 A7 98 8B | 	byte	$7f, $79, $6c, $5e, $4f, $3d, $2b, $18, $04, $f0, $dd, $ca, $b8, $a7, $98, $8b
10ea8     81 81 81 81 
10eac     81 81 81 81 
10eb0     81 81       | 	byte	$81[10]
10eb2     88 97 A7 B8 
10eb6     C9 DA EC FE 
10eba     10 21 32 41 
10ebe     50 5E 69 73 | 	byte	$88, $97, $a7, $b8, $c9, $da, $ec, $fe, $10, $21, $32, $41, $50, $5e, $69, $73
10ec2     7A 7E 7E 7E 
10ec6     7E 7E 7E 7E 
10eca     7D 76 6C 61 
10ece     55 48 39 29 | 	byte	$7a, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7d, $76, $6c, $61, $55, $48, $39, $29
10ed2     19 08 F7 E7 
10ed6     D7 C9 BB AE 
10eda     A3 98 8F 88 
10ede     82 81 81 81 | 	byte	$19, $08, $f7, $e7, $d7, $c9, $bb, $ae, $a3, $98, $8f, $88, $82, $81, $81, $81
10ee2     81 81 81 82 
10ee6     88 90 99 A4 
10eea     AF BC C8 D6 
10eee     E5 F4 03 12 | 	byte	$81, $81, $81, $82, $88, $90, $99, $a4, $af, $bc, $c8, $d6, $e5, $f4, $03, $12
10ef2     21 2F 3D 4A 
10ef6     56 61 69 6F 
10efa     74 78 7A 7B 
10efe     7C 7B 7A 77 | 	byte	$21, $2f, $3d, $4a, $56, $61, $69, $6f, $74, $78, $7a, $7b, $7c, $7b, $7a, $77
10f02     73 6E 67 60 
10f06     58 4E 44 3A 
10f0a     2E 22 15 09 
10f0e     FC EF E2 D5 | 	byte	$73, $6e, $67, $60, $58, $4e, $44, $3a, $2e, $22, $15, $09, $fc, $ef, $e2, $d5
10f12     C9 BE B3 A9 
10f16     A0 98 91 8B 
10f1a     87 85 85 85 
10f1e     86 88 8C 90 | 	byte	$c9, $be, $b3, $a9, $a0, $98, $91, $8b, $87, $85, $85, $85, $86, $88, $8c, $90
10f22     95 9B A2 A9 
10f26     B2 BB C4 CF 
10f2a     D9 E4 EF FB 
10f2e     06 12 1D 28 | 	byte	$95, $9b, $a2, $a9, $b2, $bb, $c4, $cf, $d9, $e4, $ef, $fb, $06, $12, $1d, $28
10f32     33 3D 47 50 
10f36     58 5F 65 6A 
10f3a     6F 71 74 74 
10f3e     72 71 6E 6B | 	byte	$33, $3d, $47, $50, $58, $5f, $65, $6a, $6f, $71, $74, $74, $72, $71, $6e, $6b
10f42     67 62 5D 57 
10f46     51 4A 42 3A 
10f4a     32 28 1F 16 
10f4e     0C 02 F8 EE | 	byte	$67, $62, $5d, $57, $51, $4a, $42, $3a, $32, $28, $1f, $16, $0c, $02, $f8, $ee
10f52     E4 DA D1 C8 
10f56     BF B7 B0 A9 
10f5a     A3 9D 99 95 
10f5e     93 91 92 93 | 	byte	$e4, $da, $d1, $c8, $bf, $b7, $b0, $a9, $a3, $9d, $99, $95, $93, $91, $92, $93
10f62     94 97 99 9D 
10f66     A1 A5 AA B0 
10f6a     B6 BD C4 CC 
10f6e     D3 DC E4 ED | 	byte	$94, $97, $99, $9d, $a1, $a5, $aa, $b0, $b6, $bd, $c4, $cc, $d3, $dc, $e4, $ed
10f72     F6 FF 08 11 
10f76     1A 23 2C 33 
10f7a     3B 43 49 4F 
10f7e     55 59 5E 61 | 	byte	$f6, $ff, $08, $11, $1a, $23, $2c, $33, $3b, $43, $49, $4f, $55, $59, $5e, $61
10f82     64 64 64 64 
10f86     64          | 	byte	$64[5]
10f87     62 60 5E 5C 
10f8b     58 54 50 4B 
10f8f     46 40 3B 35 
10f93     2E 27 20 18 | 	byte	$62, $60, $5e, $5c, $58, $54, $50, $4b, $46, $40, $3b, $35, $2e, $27, $20, $18
10f97     10 09 01 F9 
10f9b     F1 EA E2 DA 
10f9f     D3 CC C6 BF 
10fa3     BA B4 B0 AC | 	byte	$10, $09, $01, $f9, $f1, $ea, $e2, $da, $d3, $cc, $c6, $bf, $ba, $b4, $b0, $ac
10fa7     A9 A7 A5 A4 
10fab     A2 A2 A2 A3 
10faf     A4 A5 A7 AA 
10fb3     AD B0 B4 B8 | 	byte	$a9, $a7, $a5, $a4, $a2, $a2, $a2, $a3, $a4, $a5, $a7, $aa, $ad, $b0, $b4, $b8
10fb7     BC C1 C7 CC 
10fbb     D2 D9 DF E6 
10fbf     ED F4 FB 02 
10fc3     09 10 17 1E | 	byte	$bc, $c1, $c7, $cc, $d2, $d9, $df, $e6, $ed, $f4, $fb, $02, $09, $10, $17, $1e
10fc7     25 2A 30 36 
10fcb     3B 3F 43 47 
10fcf     4B 4D 50 52 
10fd3     54 55 56 56 | 	byte	$25, $2a, $30, $36, $3b, $3f, $43, $47, $4b, $4d, $50, $52, $54, $55, $56, $56
10fd7     56 56 55 54 
10fdb     52 50 4D 4A 
10fdf     47 43 3F 3B 
10fe3     37 31 2D 27 | 	byte	$56, $56, $55, $54, $52, $50, $4d, $4a, $47, $43, $3f, $3b, $37, $31, $2d, $27
10fe7     22 1C 16 10 
10feb     0A 03 FE F8 
10fef     F2 EC E7 E1 
10ff3     DC D7 D2 CE | 	byte	$22, $1c, $16, $10, $0a, $03, $fe, $f8, $f2, $ec, $e7, $e1, $dc, $d7, $d2, $ce
10ff7     CA C5 C1 BE 
10ffb     BB B8 B5 B3 
10fff     B1 B0 AF AF 
11003     AE AE AF B0 | 	byte	$ca, $c5, $c1, $be, $bb, $b8, $b5, $b3, $b1, $b0, $af, $af, $ae, $ae, $af, $b0
11007     B1 B3 B4 B7 
1100b     BA BD C1 C5 
1100f     C9 CE D2 D7 
11013     DB E0 E4 E9 | 	byte	$b1, $b3, $b4, $b7, $ba, $bd, $c1, $c5, $c9, $ce, $d2, $d7, $db, $e0, $e4, $e9
11017     EE F3 F8 FD 
1101b     03 08 0D 12 
1101f     17 1C 20 25 
11023     29 2E 32 36 | 	byte	$ee, $f3, $f8, $fd, $03, $08, $0d, $12, $17, $1c, $20, $25, $29, $2e, $32, $36
11027     39 3C 40 42 
1102b     44 46 48 4A 
1102f     4A 4A 4A 49 
11033     49 48 47 45 | 	byte	$39, $3c, $40, $42, $44, $46, $48, $4a, $4a, $4a, $4a, $49, $49, $48, $47, $45
11037     44 42 40 3E 
1103b     3C 39 37 34 
1103f     30 2D 29 26 
11043     22 1E 1A 16 | 	byte	$44, $42, $40, $3e, $3c, $39, $37, $34, $30, $2d, $29, $26, $22, $1e, $1a, $16
11047     11 0D 09 04 
1104b     00 FB F7 F2 
1104f     EE EA E6 E2 
11053     DE DA D7 D3 | 	byte	$11, $0d, $09, $04, $00, $fb, $f7, $f2, $ee, $ea, $e6, $e2, $de, $da, $d7, $d3
11057     D0 CD CB C8 
1105b     C6 C4 C2 C1 
1105f     C0 BE BE BD 
11063     BD BC BD BD | 	byte	$d0, $cd, $cb, $c8, $c6, $c4, $c2, $c1, $c0, $be, $be, $bd, $bd, $bc, $bd, $bd
11067     BE BE C0 C1 
1106b     C2 C4 C6 C8 
1106f     CB CD D0 D3 
11073     D6 D9 DD E1 | 	byte	$be, $be, $c0, $c1, $c2, $c4, $c6, $c8, $cb, $cd, $d0, $d3, $d6, $d9, $dd, $e1
11077     E5 E8 EC F0 
1107b     F3 F7 FB FE 
1107f     02 06 0A 0D 
11083     11 15 18 1C | 	byte	$e5, $e8, $ec, $f0, $f3, $f7, $fb, $fe, $02, $06, $0a, $0d, $11, $15, $18, $1c
11087     1F 22 25 28 
1108b     2B 2E 31 33 
1108f     35 37 39 3A 
11093     3C 3C 3D 3E | 	byte	$1f, $22, $25, $28, $2b, $2e, $31, $33, $35, $37, $39, $3a, $3c, $3c, $3d, $3e
11097     3E 3E 3D 3C 
1109b     3C 3B 3A 39 
1109f     37 36 35 33 
110a3     31 2F 2D 2B | 	byte	$3e, $3e, $3d, $3c, $3c, $3b, $3a, $39, $37, $36, $35, $33, $31, $2f, $2d, $2b
110a7     28 26 24 21 
110ab     1E 1B 18 16 
110af     12 10 0C 09 
110b3     06 03 FF FC | 	byte	$28, $26, $24, $21, $1e, $1b, $18, $16, $12, $10, $0c, $09, $06, $03, $ff, $fc
110b7     F9 F5 F2 EF 
110bb     EC E9 E6 E3 
110bf     E1 DE DC DA 
110c3     D8 D6 D4 D2 | 	byte	$f9, $f5, $f2, $ef, $ec, $e9, $e6, $e3, $e1, $de, $dc, $da, $d8, $d6, $d4, $d2
110c7     D0 CF CE CD 
110cb     CC CA CA C9 
110cf     C9 C9 C9 C9 
110d3     C9 C9 CA CB | 	byte	$d0, $cf, $ce, $cd, $cc, $ca, $ca, $c9, $c9, $c9, $c9, $c9, $c9, $c9, $ca, $cb
110d7     CC CD CE CF 
110db     D1 D2 D5 D7 
110df     DA DC DE E0 
110e3     E3 E5 E8 EA | 	byte	$cc, $cd, $ce, $cf, $d1, $d2, $d5, $d7, $da, $dc, $de, $e0, $e3, $e5, $e8, $ea
110e7     ED EF F2 F4 
110eb     F7 FA FC FF 
110ef     02 05 08 0A 
110f3     0D 0F 12 15 | 	byte	$ed, $ef, $f2, $f4, $f7, $fa, $fc, $ff, $02, $05, $08, $0a, $0d, $0f, $12, $15
110f7     17 1A 1C 1E 
110fb     21 23 24 27 
110ff     28 2A 2A 2C 
11103     2C 2D 2E 2F | 	byte	$17, $1a, $1c, $1e, $21, $23, $24, $27, $28, $2a, $2a, $2c, $2c, $2d, $2e, $2f
11107     2F 30 30 30 
1110b     31 31 30 30 
1110f     30 2F 2E 2E 
11113     2D 2C 2B 29 | 	byte	$2f, $30, $30, $30, $31, $31, $30, $30, $30, $2f, $2e, $2e, $2d, $2c, $2b, $29
11117     28 27 25 24 
1111b     22 20 1F 1D 
1111f     1B 18 17 14 
11123     11 0F 0D 0A | 	byte	$28, $27, $25, $24, $22, $20, $1f, $1d, $1b, $18, $17, $14, $11, $0f, $0d, $0a
11127     08 06 03 01 
1112b     FF FD FB F8 
1112f     F6 F4 F2 F0 
11133     EE EB EA E8 | 	byte	$08, $06, $03, $01, $ff, $fd, $fb, $f8, $f6, $f4, $f2, $f0, $ee, $eb, $ea, $e8
11137     E6 E4 E3 E1 
1113b     DF DE DC DB 
1113f     DA D9 D8 D7 
11143     D6 D6 D6 D5 | 	byte	$e6, $e4, $e3, $e1, $df, $de, $dc, $db, $da, $d9, $d8, $d7, $d6, $d6, $d6, $d5
11147     D5 D5 D5 D5 
1114b     D6 D6 D6 D7 
1114f     D7 D8 D8 D9 
11153     DA DB DC DD | 	byte	$d5, $d5, $d5, $d5, $d6, $d6, $d6, $d7, $d7, $d8, $d8, $d9, $da, $db, $dc, $dd
11157     DE DF E0 E2 
1115b     E3 E5 E6 E8 
1115f     EA EC ED EF 
11163     F1 F3 F5 F6 | 	byte	$de, $df, $e0, $e2, $e3, $e5, $e6, $e8, $ea, $ec, $ed, $ef, $f1, $f3, $f5, $f6
11167     F9 FB FD FF 
1116b     01 03 05 07 
1116f     09 0B 0C 0E 
11173     10 12 13 15 | 	byte	$f9, $fb, $fd, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0e, $10, $12, $13, $15
11177     16 18 1A 1B 
1117b     1C 1E 1F 20 
1117f     21 22 23 24 
11183     25 25 26 26 | 	byte	$16, $18, $1a, $1b, $1c, $1e, $1f, $20, $21, $22, $23, $24, $25, $25, $26, $26
11187     26 27 27 27 
1118b     26 26 25 25 
1118f     25 24 24 23 
11193     22 21 20 20 | 	byte	$26, $27, $27, $27, $26, $26, $25, $25, $25, $24, $24, $23, $22, $21, $20, $20
11197     1F 1E 1D 1C 
1119b     1B 1A 18 17 
1119f     16 14 13 12 
111a3     10 0F 0D 0C | 	byte	$1f, $1e, $1d, $1c, $1b, $1a, $18, $17, $16, $14, $13, $12, $10, $0f, $0d, $0c
111a7     0A 08 07 05 
111ab     04 02 00 FE 
111af     FC FB FA F8 
111b3     F6 F5 F4 F3 | 	byte	$0a, $08, $07, $05, $04, $02, $00, $fe, $fc, $fb, $fa, $f8, $f6, $f5, $f4, $f3
111b7     F1 EF EE ED 
111bb     EC EA E9 E8 
111bf     E7 E6 E5 E4 
111c3     E3 E3 E2 E1 | 	byte	$f1, $ef, $ee, $ed, $ec, $ea, $e9, $e8, $e7, $e6, $e5, $e4, $e3, $e3, $e2, $e1
111c7     E0 E0 DF DF 
111cb     DF DE DE DE 
111cf     DE DF DF E0 
111d3     E0 E0 E1 E1 | 	byte	$e0, $e0, $df, $df, $df, $de, $de, $de, $de, $df, $df, $e0, $e0, $e0, $e1, $e1
111d7     E2 E2 E3 E4 
111db     E4 E5 E6 E7 
111df     E7 E8 E9 EA 
111e3     EB EC EE EF | 	byte	$e2, $e2, $e3, $e4, $e4, $e5, $e6, $e7, $e7, $e8, $e9, $ea, $eb, $ec, $ee, $ef
111e7     F0 F1 F2 F3 
111eb     F5 F6 F7 F8 
111ef     FA FB FD FE 
111f3     00 02 03 04 | 	byte	$f0, $f1, $f2, $f3, $f5, $f6, $f7, $f8, $fa, $fb, $fd, $fe, $00, $02, $03, $04
111f7     06 07 08 09 
111fb     0B 0C 0D 0E 
111ff     0F 10 11 12 
11203     13 14 15 16 | 	byte	$06, $07, $08, $09, $0b, $0c, $0d, $0e, $0f, $10, $11, $12, $13, $14, $15, $16
11207     17 18 19 19 
1120b     1A 1B 1B 1C 
1120f     1C 1C 1D 1D 
11213     1D 1E 1E 1E | 	byte	$17, $18, $19, $19, $1a, $1b, $1b, $1c, $1c, $1c, $1d, $1d, $1d, $1e, $1e, $1e
11217     1E 1D 1D 1D 
1121b     1D 1D 1C 1C 
1121f     1B 1B 1A 1A 
11223     19 18 17 16 | 	byte	$1e, $1d, $1d, $1d, $1d, $1d, $1c, $1c, $1b, $1b, $1a, $1a, $19, $18, $17, $16
11227     15 14 13 12 
1122b     11 10 0F 0E 
1122f     0E 0D 0B 0A 
11233     09 08 07 06 | 	byte	$15, $14, $13, $12, $11, $10, $0f, $0e, $0e, $0d, $0b, $0a, $09, $08, $07, $06
11237     05 04 03 02 
1123b     01 FF FE FD 
1123f     FC FA F9 F8 
11243     F7 F6 F5 F4 | 	byte	$05, $04, $03, $02, $01, $ff, $fe, $fd, $fc, $fa, $f9, $f8, $f7, $f6, $f5, $f4
11247     F3 F2 F1 F0 
1124b     EF EF EE ED 
1124f     EC EB EB EA 
11253     E9 E9 E9 E8 | 	byte	$f3, $f2, $f1, $f0, $ef, $ef, $ee, $ed, $ec, $eb, $eb, $ea, $e9, $e9, $e9, $e8
11257     E8 E7 E7 E7 
1125b     E7 E7 E7 E7 
1125f     E6 E6 E6 E6 
11263     E6 E6 E6 E7 | 	byte	$e8, $e7, $e7, $e7, $e7, $e7, $e7, $e7, $e6, $e6, $e6, $e6, $e6, $e6, $e6, $e7
11267     E7 E7 E8 E9 
1126b     E9 EA EA EB 
1126f     EC EC ED EE 
11273     EE EF F0 F1 | 	byte	$e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec, $ed, $ee, $ee, $ef, $f0, $f1
11277     F2 F2 F3 F4 
1127b     F5 F6 F7 F8 
1127f     F9 F9 FB FC 
11283     FC FE FF FF | 	byte	$f2, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f9, $fb, $fc, $fc, $fe, $ff, $ff
11287     00 01 02 03 
1128b     04 05 06 07 
1128f     09 09 0A 0B 
11293     0C 0C 0D 0E | 	byte	$00, $01, $02, $03, $04, $05, $06, $07, $09, $09, $0a, $0b, $0c, $0c, $0d, $0e
11297     0F 0F 10 11 
1129b     11 12 12 13 
1129f     14 14 14 15 
112a3     15 16 16 16 | 	byte	$0f, $0f, $10, $11, $11, $12, $12, $13, $14, $14, $14, $15, $15, $16, $16, $16
112a7     16 16 17 17 
112ab     17 17 17 16 
112af     16 15 15 15 
112b3     15 14 14 14 | 	byte	$16, $16, $17, $17, $17, $17, $17, $16, $16, $15, $15, $15, $15, $14, $14, $14
112b7     13 13 12 12 
112bb     11 11 10 10 
112bf     0F 0F 0E 0E 
112c3     0D 0C 0C 0B | 	byte	$13, $13, $12, $12, $11, $11, $10, $10, $0f, $0f, $0e, $0e, $0d, $0c, $0c, $0b
112c7     0A 09 09 08 
112cb     07 06 06 05 
112cf     04 03 02 01 
112d3     01 FF FF FE | 	byte	$0a, $09, $09, $08, $07, $06, $06, $05, $04, $03, $02, $01, $01, $ff, $ff, $fe
112d7     FD FC FC FB 
112db     FA F9 F9 F8 
112df     F7 F6 F6 F5 
112e3     F5 F4 F3 F3 | 	byte	$fd, $fc, $fc, $fb, $fa, $f9, $f9, $f8, $f7, $f6, $f6, $f5, $f5, $f4, $f3, $f3
112e7     F2 F2 F1 F1 
112eb     F0 EF EF EF 
112ef     EE EE EE ED 
112f3     ED ED ED ED | 	byte	$f2, $f2, $f1, $f1, $f0, $ef, $ef, $ef, $ee, $ee, $ee, $ed, $ed, $ed, $ed, $ed
112f7     ED ED ED ED 
112fb     ED ED ED ED | 	byte	$ed[8]
112ff     EE EE EE EE 
11303     EF EF EF EF 
11307     F0 F0 F0 F1 
1130b     F1 F1 F2 F2 | 	byte	$ee, $ee, $ee, $ee, $ef, $ef, $ef, $ef, $f0, $f0, $f0, $f1, $f1, $f1, $f2, $f2
1130f     F3 F3 F4 F5 
11313     F5 F5 F6 F6 
11317     F8 F8 F9 F9 
1131b     FA FB FC FC | 	byte	$f3, $f3, $f4, $f5, $f5, $f5, $f6, $f6, $f8, $f8, $f9, $f9, $fa, $fb, $fc, $fc
1131f     FD FE FE FF 
11323     FF 00 01 01 
11327     02 03 04 04 
1132b     05 05 06 06 | 	byte	$fd, $fe, $fe, $ff, $ff, $00, $01, $01, $02, $03, $04, $04, $05, $05, $06, $06
1132f     07 08 09 09 
11333     09 0A 0B 0B 
11337     0C 0C 0C 0C 
1133b     0D 0D 0E 0E | 	byte	$07, $08, $09, $09, $09, $0a, $0b, $0b, $0c, $0c, $0c, $0c, $0d, $0d, $0e, $0e
1133f     0E 0F 0F 0F 
11343     0F 0F 10 10 
11347     10 10 10 10 
1134b     10 10 10 10 | 	byte	$0e, $0f, $0f, $0f, $0f, $0f, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10
1134f     10 10 10 10 
11353     10          | 	byte	$10[5]
11354     0F 0F 0F 0F 
11358     0E 0E 0E 0D 
1135c     0C 0C 0B 0B 
11360     0B 0A 0A 0A | 	byte	$0f, $0f, $0f, $0f, $0e, $0e, $0e, $0d, $0c, $0c, $0b, $0b, $0b, $0a, $0a, $0a
11364     09 09 08 07 
11368     07 06 06 06 
1136c     05 05 04 03 
11370     03 02 02 01 | 	byte	$09, $09, $08, $07, $07, $06, $06, $06, $05, $05, $04, $03, $03, $02, $02, $01
11374     01 00 00 FF 
11378     FF FE FD FD 
1137c     FC FC FC FB 
11380     FA FA F9 F9 | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fb, $fa, $fa, $f9, $f9
11384     F8 F8 F8 F7 
11388     F7 F7 F6 F6 
1138c     F6 F5 F5 F5 
11390     F4 F4 F4 F3 | 	byte	$f8, $f8, $f8, $f7, $f7, $f7, $f6, $f6, $f6, $f5, $f5, $f5, $f4, $f4, $f4, $f3
11394     F3 F3 F3 F3 
11398     F3          | 	byte	$f3[5]
11399     F2 F2 F2 F2 
1139d     F2 F2 F2 F2 
113a1     F2          | 	byte	$f2[9]
113a2     F3 F3 F3 F3 
113a6     F3 F3       | 	byte	$f3[6]
113a8     F4 F4 F4 F4 
113ac     F4          | 	byte	$f4[5]
113ad     F5 F5 F6 F6 
113b1     F6 F6 F7 F7 
113b5     F7 F8 F8 F8 
113b9     F9 F9 F9 FA | 	byte	$f5, $f5, $f6, $f6, $f6, $f6, $f7, $f7, $f7, $f8, $f8, $f8, $f9, $f9, $f9, $fa
113bd     FA FB FB FB 
113c1     FC FC FD FD 
113c5     FE FE FF FF 
113c9     00 00 01 01 | 	byte	$fa, $fb, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff, $ff, $00, $00, $01, $01
113cd     01 02 02 03 
113d1     03 04 04 04 
113d5     05 05 06 06 
113d9     06 07 07 07 | 	byte	$01, $02, $02, $03, $03, $04, $04, $04, $05, $05, $06, $06, $06, $07, $07, $07
113dd     08 08 08 08 
113e1     09 09 0A 0A 
113e5     0A 0A 0A 0A 
113e9     0A 0A 0A 0B | 	byte	$08, $08, $08, $08, $09, $09, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0b
113ed     0B 0B 0B 0B 
113f1     0B 0B 0B 0B 
113f5     0B 0B 0B 0B 
113f9     0B 0B 0B    | 	byte	$0b[15]
113fc     0A 0A 0A 0A 
11400     0A 0A       | 	byte	$0a[6]
11402     09 09 09 09 
11406     09          | 	byte	$09[5]
11407     08 08 08 07 
1140b     07 06 06 06 
1140f     06 05 05 04 
11413     04 04 03 03 | 	byte	$08, $08, $08, $07, $07, $06, $06, $06, $06, $05, $05, $04, $04, $04, $03, $03
11417     03 03 02 02 
1141b     02 01 01 01 
1141f     00 00 FF FF 
11423     FF FF FE FE | 	byte	$03, $03, $02, $02, $02, $01, $01, $01, $00, $00, $ff, $ff, $ff, $ff, $fe, $fe
11427     FE FD FD FD 
1142b     FC FC FB FB 
1142f     FB FB FA FA 
11433     FA FA F9 F9 | 	byte	$fe, $fd, $fd, $fd, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa, $fa, $fa, $f9, $f9
11437     F9 F9 F9 F9 
1143b     F8 F8 F8 F8 
1143f     F7 F7 F7 F7 
11443     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f9, $f8, $f8, $f8, $f8, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
11447     F7 F7 F7 F7 
1144b     F7 F7 F7 F7 
1144f     F7 F7 F7 F7 | 	byte	$f7[12]
11453     F8 F8 F8 F8 
11457     F8 F8 F8 F8 | 	byte	$f8[8]
1145b     F9 F9 F9 F9 
1145f     F9          | 	byte	$f9[5]
11460     FA FA FA FA 
11464     FA          | 	byte	$fa[5]
11465     FB FB FB FB 
11469     FC FC FC FC 
1146d     FC FD FD FD 
11471     FE FE FE FF | 	byte	$fb, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $fe, $ff
11475     FF FF 00 00 
11479     00 00 00 01 
1147d     01 01 02 02 
11481     02 02 03 03 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $01, $01, $01, $02, $02, $02, $02, $03, $03
11485     03 04 04 04 
11489     04 05 05 05 
1148d     05 05 06 06 
11491     06 06 06 07 | 	byte	$03, $04, $04, $04, $04, $05, $05, $05, $05, $05, $06, $06, $06, $06, $06, $07
11495     06 06 06 07 
11499     07 07 07 07 
1149d     07 07 07 07 
114a1     07 07 07 07 | 	byte	$06, $06, $06, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07
114a5     07 07 07 07 
114a9     07 07       | 	byte	$07[6]
114ab     06 07 07 06 
114af     06 07 06 06 
114b3     06 06 06 05 
114b7     05 05 05 05 | 	byte	$06, $07, $07, $06, $06, $07, $06, $06, $06, $06, $06, $05, $05, $05, $05, $05
114bb     04 04 04 04 
114bf     03 04 03 03 
114c3     03 03 03 02 
114c7     02 02 02 01 | 	byte	$04, $04, $04, $04, $03, $04, $03, $03, $03, $03, $03, $02, $02, $02, $02, $01
114cb     01 01 01 00 
114cf     00 00 00 00 
114d3     00 00 FF FF 
114d7     FF FE FE FE | 	byte	$01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe
114db     FE FE FD FD 
114df     FD FD FD FD 
114e3     FC FC FC FC 
114e7     FC FB FB FB | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb
114eb     FB FB FB FB 
114ef     FB FB FB FB | 	byte	$fb[8]
114f3     FA FB FA FA 
114f7     FA FA FA FA 
114fb     FA FA FB FA 
114ff     FA FB FA FA | 	byte	$fa, $fb, $fa, $fa, $fa, $fa, $fa, $fa, $fa, $fa, $fb, $fa, $fa, $fb, $fa, $fa
11503     FB FB FB FB 
11507     FB FB FB FB 
1150b     FB FB FB FB 
1150f     FB          | 	byte	$fb[13]
11510     FC FC FC FC 
11514     FC FC FC FC 
11518     FC FC FC    | 	byte	$fc[11]
1151b     FD FD FD FD 
1151f     FE FE FE FE 
11523     FE FE FF FF 
11527     FF FF FF FF | 	byte	$fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff
1152b     FF 00 00 00 
1152f     00 00 00 01 
11533     01 01 01 01 
11537     02 02 02 02 | 	byte	$ff, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $02, $02, $02, $02
1153b     02 02 02 03 
1153f     03 03 03 03 
11543     03 03 03 03 
11547     03 03 03 04 | 	byte	$02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $04
1154b     04 04 04 04 
1154f     03 04 04 04 
11553     04 04 04 04 
11557     04 04 04 05 | 	byte	$04, $04, $04, $04, $03, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05
1155b     04 04 04 04 
1155f     04 04 04 04 
11563     04 04 04 04 | 	byte	$04[12]
11567     03 03 03 03 
1156b     03 03 03 03 
1156f     03 03 03    | 	byte	$03[11]
11572     02 02 02 02 
11576     02 02 02 02 | 	byte	$02[8]
1157a     01 02 02 01 
1157e     01 01 01 01 
11582     01 01 00 00 
11586     00 00 00 00 | 	byte	$01, $02, $02, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00
1158a     00 FF FF FF 
1158e     FF FF FF FF 
11592     FF FF FF FE 
11596     FE FE FE FE | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe
1159a     FE FE FE FE 
1159e     FE FE FE FE | 	byte	$fe[8]
115a2     FD FD FD FD 
      ...             
115c6     FD FD FD FD 
115ca     FD FD FD    | 	byte	$fd[43]
115cd     FE FE FD FE 
115d1     FE FE FE FE 
115d5     FE FE FE FE 
115d9     FF FF FF FF | 	byte	$fe, $fe, $fd, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff
115dd     FF FF FF FF 
115e1     FF FF       | 	byte	$ff[6]
115e3     00 FF FF FF 
115e7     00 00 00 00 
115eb     00 00 01 00 
115ef     01 00 01 01 | 	byte	$00, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $01, $00, $01, $00, $01, $01
115f3     01 01 01 01 
115f7     01 01 01 01 
115fb     01 01 01    | 	byte	$01[11]
115fe     02 02 01 02 
11602     02 02 02 02 
11606     02 02 02 02 
1160a     02 02 02 02 | 	byte	$02, $02, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
1160e     02 02 02 02 
11612     02 02 02 02 
11616     02 02 02 02 
1161a     02 02 02 02 
1161e     02 02 02 02 
11622     02 02 02 02 
11626     02 02 02    | 	byte	$02[27]
11629     01 01 01 01 
1162d     01 01 01 01 
11631     01 01 01 01 
11635     01 01 01 01 
11639     01 01       | 	byte	$01[18]
1163b     00 00 00 00 
1163f     00 00 00 00 
11643     00 00 00 00 
11647     00 00 00 00 | 	byte	$00[16]
1164b     FF FF 00 FF 
1164f     FF FF FF FF 
11653     FF FF FF FF 
11657     FF FF FF FF | 	byte	$ff, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1165b     FF FF FF FF 
1165f     FF FF FF    | 	byte	$ff[7]
11662     FE FF 00 00 
11666     00 00 00 00 
1166a     00 00 02 10 
1166e     FC 07 08 0F | 	byte	$fe, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $02, $10, $fc, $07, $08, $0f
11672     0B F5 08 F4 
11676     0E FF 02 00 
1167a     F8 F6 EF FE 
1167e     F0 03 0A 03 | 	byte	$0b, $f5, $08, $f4, $0e, $ff, $02, $00, $f8, $f6, $ef, $fe, $f0, $03, $0a, $03
11682     0A FF 01 F9 
11686     EF FF F6 F7 
1168a     F9 F6 FA F8 
1168e     07 FE 0B FD | 	byte	$0a, $ff, $01, $f9, $ef, $ff, $f6, $f7, $f9, $f6, $fa, $f8, $07, $fe, $0b, $fd
11692     04 03 01 11 
11696     EC FD 06 FE 
1169a     F1 06 06 10 
1169e     0E F3 01 F9 | 	byte	$04, $03, $01, $11, $ec, $fd, $06, $fe, $f1, $06, $06, $10, $0e, $f3, $01, $f9
116a2     0B 10 FE 05 
116a6     0A 13 FF 03 
116aa     FE FD 06 FD 
116ae     0E FA F0 E7 | 	byte	$0b, $10, $fe, $05, $0a, $13, $ff, $03, $fe, $fd, $06, $fd, $0e, $fa, $f0, $e7
116b2     EC E7 CF F6 
116b6     EC 07 09 11 
116ba     14 0D 0F 00 
116be     06 F6 FB 06 | 	byte	$ec, $e7, $cf, $f6, $ec, $07, $09, $11, $14, $0d, $0f, $00, $06, $f6, $fb, $06
116c2     02 03 F7 04 
116c6     FF FD FD F7 
116ca     03 0E 07 FF 
116ce     F6 FC FD 00 | 	byte	$02, $03, $f7, $04, $ff, $fd, $fd, $f7, $03, $0e, $07, $ff, $f6, $fc, $fd, $00
116d2     F3 04 06 06 
116d6     0B 0F 0C FF 
116da     F6 F8 08 F6 
116de     F5 EC F6 F0 | 	byte	$f3, $04, $06, $06, $0b, $0f, $0c, $ff, $f6, $f8, $08, $f6, $f5, $ec, $f6, $f0
116e2     13 07 04 F8 
116e6     EC F6 FA FD 
116ea     F2 FE FF 03 
116ee     0B 0E 0A F7 | 	byte	$13, $07, $04, $f8, $ec, $f6, $fa, $fd, $f2, $fe, $ff, $03, $0b, $0e, $0a, $f7
116f2     0F 00 FC 06 
116f6     1A 07 03 F7 
116fa     10 E2 F6 C3 
116fe     48 BF 73 40 | 	byte	$0f, $00, $fc, $06, $1a, $07, $03, $f7, $10, $e2, $f6, $c3, $48, $bf, $73, $40
11702     FF 70 22 08 
11706     FF 40 EF 10 
1170a     2F 27 A6 40 
1170e     E0 97 F0 FF | 	byte	$ff, $70, $22, $08, $ff, $40, $ef, $10, $2f, $27, $a6, $40, $e0, $97, $f0, $ff
11712     00 B8 9F DF 
11716     DF 04 E3 20 
1171a     4F A8 CF 41 
1171e     76 A8 F7 D7 | 	byte	$00, $b8, $9f, $df, $df, $04, $e3, $20, $4f, $a8, $cf, $41, $76, $a8, $f7, $d7
11722     48 A3 AA C9 
11726     7F 10 A9 B1 
1172a     B7 BC 2F E0 
1172e     04 FF C6 FF | 	byte	$48, $a3, $aa, $c9, $7f, $10, $a9, $b1, $b7, $bc, $2f, $e0, $04, $ff, $c6, $ff
11732     E8 7F F8 C1 
11736     CF 1F D7 06 
1173a     33 4E 48 D7 
1173e     08 1B 34 16 | 	byte	$e8, $7f, $f8, $c1, $cf, $1f, $d7, $06, $33, $4e, $48, $d7, $08, $1b, $34, $16
11742     15 6F 7F 77 
11746     70 6C DB 60 
1174a     5C 54 4E 31 
1174e     44 40 39 35 | 	byte	$15, $6f, $7f, $77, $70, $6c, $db, $60, $5c, $54, $4e, $31, $44, $40, $39, $35
11752     02 2F 2C 24 
11756     1C 17 25 0B 
1175a     00 CF 0C 87 
1175e     10 BE 80 07 | 	byte	$02, $2f, $2c, $24, $1c, $17, $25, $0b, $00, $cf, $0c, $87, $10, $be, $80, $07
11762     88 37 82 80 
11766     BF B0 E5 D6 
1176a     A8 EF BF D7 
1176e     F9 A3 E6 10 | 	byte	$88, $37, $82, $80, $bf, $b0, $e5, $d6, $a8, $ef, $bf, $d7, $f9, $a3, $e6, $10
11772     24 B1 3B 17 
11776     D3 1C 50 CF 
1177a     FB EF 18 E8 
1177e     DF C8 BF BB | 	byte	$24, $b1, $3b, $17, $d3, $1c, $50, $cf, $fb, $ef, $18, $e8, $df, $c8, $bf, $bb
11782     BD D1 C4 C8 
11786     CC D2 D3 D7 
1178a     DA DD E0 E2 
1178e     E4 E7 E8 EA | 	byte	$bd, $d1, $c4, $c8, $cc, $d2, $d3, $d7, $da, $dd, $e0, $e2, $e4, $e7, $e8, $ea
11792     EC F0 EF F0 
11796     F4 F3 F7 FD 
1179a     00 40 3F 58 
1179e     27 30 76 7F | 	byte	$ec, $f0, $ef, $f0, $f4, $f3, $f7, $fd, $00, $40, $3f, $58, $27, $30, $76, $7f
117a2     78 3F 50 77 
117a6     5F 6C 37 61 
117aa     F0 5F 10 3F 
117ae     D9 F0 48 14 | 	byte	$78, $3f, $50, $77, $5f, $6c, $37, $61, $f0, $5f, $10, $3f, $d9, $f0, $48, $14
117b2     00 40 F8 EF 
117b6     46 CF 28 17 
117ba     30 E7 4B 4C 
117be     10 1F 2F E6 | 	byte	$00, $40, $f8, $ef, $46, $cf, $28, $17, $30, $e7, $4b, $4c, $10, $1f, $2f, $e6
117c2     43 40 2B 33 
117c6     33 30 2C 28 
117ca     20 19 1F 1A 
117ce     07 18 16 13 | 	byte	$43, $40, $2b, $33, $33, $30, $2c, $28, $20, $19, $1f, $1a, $07, $18, $16, $13
117d2     FB FA 03 FE 
117d6     DF CF FD 00 
117da     F3 D8 E4 9F 
117de     F2 E2 A8 A5 | 	byte	$fb, $fa, $03, $fe, $df, $cf, $fd, $00, $f3, $d8, $e4, $9f, $f2, $e2, $a8, $a5
117e2     E0 C4 A7 D0 
117e6     DC 8D D7 B0 
117ea     C0 E1 99 9C 
117ee     BF DB BF B4 | 	byte	$e0, $c4, $a7, $d0, $dc, $8d, $d7, $b0, $c0, $e1, $99, $9c, $bf, $db, $bf, $b4
117f2     CA B9 D3 CD 
117f6     BF C3 E7 C9 
117fa     CE D3 D6 D8 
117fe     E3 DE E0 E3 | 	byte	$ca, $b9, $d3, $cd, $bf, $c3, $e7, $c9, $ce, $d3, $d6, $d8, $e3, $de, $e0, $e3
11802     E5 EF E8 EA 
11806     EC EE F2 F0 
1180a     F0 F1 F3 F3 
1180e     F4 0C F6 08 | 	byte	$e5, $ef, $e8, $ea, $ec, $ee, $f2, $f0, $f0, $f1, $f3, $f3, $f4, $0c, $f6, $08
11812     F4 00 0B 1F 
11816     00 48 05 0C 
1181a     2F 70 36 07 
1181e     18 30 0B FF | 	byte	$f4, $00, $0b, $1f, $00, $48, $05, $0c, $2f, $70, $36, $07, $18, $30, $0b, $ff
11822     10 08 FB F8 
11826     34 14 1F FF 
1182a     26 18 FF DB 
1182e     32 F4 1E 13 | 	byte	$10, $08, $fb, $f8, $34, $14, $1f, $ff, $26, $18, $ff, $db, $32, $f4, $1e, $13
11832     1C 1B 26 18 
11836     0B 07 37 50 
1183a     32 1A 5A 54 
1183e     67 40 66 60 | 	byte	$1c, $1b, $26, $18, $0b, $07, $37, $50, $32, $1a, $5a, $54, $67, $40, $66, $60
11842     4F 53 4C 40 
11846     41 3C 38 33 
1184a     30 2C 28 25 
1184e     22 1F 1C 13 | 	byte	$4f, $53, $4c, $40, $41, $3c, $38, $33, $30, $2c, $28, $25, $22, $1f, $1c, $13
11852     0F 16 13 00 
11856     09 D6 EA C8 
1185a     8F AC BF B0 
1185e     B7 A0 CF 80 | 	byte	$0f, $16, $13, $00, $09, $d6, $ea, $c8, $8f, $ac, $bf, $b0, $b7, $a0, $cf, $80
11862     B4 C0 9A D0 
11866     DB F0 C8 D7 
1186a     DB 03 E2 F8 
1186e     1F 2E 0F 3B | 	byte	$b4, $c0, $9a, $d0, $db, $f0, $c8, $d7, $db, $03, $e2, $f8, $1f, $2e, $0f, $3b
11872     10 0F 2F 10 
11876     08 0F 10 F7 
1187a     42 FF 28 00 
1187e     F8 DF 18 D0 | 	byte	$10, $0f, $2f, $10, $08, $0f, $10, $f7, $42, $ff, $28, $00, $f8, $df, $18, $d0
11882     E0 F0 F4 97 
11886     BB A8 BF B0 
1188a     AE B5 BC C0 
1188e     C4 C8 CF D0 | 	byte	$e0, $f0, $f4, $97, $bb, $a8, $bf, $b0, $ae, $b5, $bc, $c0, $c4, $c8, $cf, $d0
11892     D4 D8 DC E2 
11896     E3 0B E8 00 
1189a     F7 FB 03 13 
1189e     06 17 17 4F | 	byte	$d4, $d8, $dc, $e2, $e3, $0b, $e8, $00, $f7, $fb, $03, $13, $06, $17, $17, $4f
118a2     26 44 2F 6B 
118a6     78 1F 7F 60 
118aa     08 18 70 3F 
118ae     44 CF 28 40 | 	byte	$26, $44, $2f, $6b, $78, $1f, $7f, $60, $08, $18, $70, $3f, $44, $cf, $28, $40
118b2     01 FF 1D C1 
118b6     08 E0 EA C4 
118ba     C3 C8 1B C9 
118be     BF FF E6 E8 | 	byte	$01, $ff, $1d, $c1, $08, $e0, $ea, $c4, $c3, $c8, $1b, $c9, $bf, $ff, $e6, $e8
118c2     AF DF FF 00 
118c6     F0 BE E3 07 
118ca     1F 00 1F 28 
118ce     17 5D 4B 24 | 	byte	$af, $df, $ff, $00, $f0, $be, $e3, $07, $1f, $00, $1f, $28, $17, $5d, $4b, $24
118d2     2F 33 38 0F 
118d6     2F 30 30 10 
118da     26 00 1F 12 
118de     DE 09 37 0C | 	byte	$2f, $33, $38, $0f, $2f, $30, $30, $10, $26, $00, $1f, $12, $de, $09, $37, $0c
118e2     00 D8 CE 24 
118e6     1F D8 9B EF 
118ea     C6 B0 A8 B3 
118ee     C8 D0 BB EF | 	byte	$00, $d8, $ce, $24, $1f, $d8, $9b, $ef, $c6, $b0, $a8, $b3, $c8, $d0, $bb, $ef
118f2     C1 E0 E3 B7 
118f6     C8 EF F7 E8 
118fa     EF E0 F7 00 
118fe     10 EF FF 18 | 	byte	$c1, $e0, $e3, $b7, $c8, $ef, $f7, $e8, $ef, $e0, $f7, $00, $10, $ef, $ff, $18
11902     00 17 F9 EB 
11906     0F 0E ED FF 
1190a     1F 68 01 F1 
1190e     E3 1D FF 37 | 	byte	$00, $17, $f9, $eb, $0f, $0e, $ed, $ff, $1f, $68, $01, $f1, $e3, $1d, $ff, $37
11912     08 08 00 2B 
11916     08 F0 E9 08 
1191a     E0 EC 0B DA 
1191e     DC F8 FF 07 | 	byte	$08, $08, $00, $2b, $08, $f0, $e9, $08, $e0, $ec, $0b, $da, $dc, $f8, $ff, $07
11922     E2 E0 EA FD 
11926     30 2B 0F EB 
1192a     FF 6F 3F 0B 
1192e     4F 2E 0F 2B | 	byte	$e2, $e0, $ea, $fd, $30, $2b, $0f, $eb, $ff, $6f, $3f, $0b, $4f, $2e, $0f, $2b
11932     2B 30 2F 1F 
11936     08 EE 20 20 
1193a     1F EA 1F 10 
1193e     FF 08 18 F2 | 	byte	$2b, $30, $2f, $1f, $08, $ee, $20, $20, $1f, $ea, $1f, $10, $ff, $08, $18, $f2
11942     F8 F9 C0 0C 
11946     1F ED E8 F3 
1194a     CD EB DF F8 
1194e     E0 CF ED 00 | 	byte	$f8, $f9, $c0, $0c, $1f, $ed, $e8, $f3, $cd, $eb, $df, $f8, $e0, $cf, $ed, $00
11952     CB DB 13 FF 
11956     EF 28 FB EE 
1195a     20 27 17 18 
1195e     F0 00 19 2A | 	byte	$cb, $db, $13, $ff, $ef, $28, $fb, $ee, $20, $27, $17, $18, $f0, $00, $19, $2a
11962     4F 27 0C 34 
11966     3E 18 EF 28 
1196a     1B FB F8 03 
1196e     F3 F7 20 EA | 	byte	$4f, $27, $0c, $34, $3e, $18, $ef, $28, $1b, $fb, $f8, $03, $f3, $f7, $20, $ea
11972     F8 C8 BE FF 
11976     E0 B7 9F FB 
1197a     E7 E8 AE BF 
1197e     EF 08 B5 C8 | 	byte	$f8, $c8, $be, $ff, $e0, $b7, $9f, $fb, $e7, $e8, $ae, $bf, $ef, $08, $b5, $c8
11982     DD FF D0 CB 
11986     07 D2 D7 E7 
1198a     1F 08 00 F7 
1198e     1D 28 14 2F | 	byte	$dd, $ff, $d0, $cb, $07, $d2, $d7, $e7, $1f, $08, $00, $f7, $1d, $28, $14, $2f
11992     1F 5F 3C 44 
11996     1F 42 42 33 
1199a     38 52 3F 20 
1199e     40 38 FF 1F | 	byte	$1f, $5f, $3c, $44, $1f, $42, $42, $33, $38, $52, $3f, $20, $40, $38, $ff, $1f
119a2     34 01 08 08 
119a6     04 FF FB DC 
119aa     BF CF CF D4 
119ae     C0 D0 CF 00 | 	byte	$34, $01, $08, $08, $04, $ff, $fb, $dc, $bf, $cf, $cf, $d4, $c0, $d0, $cf, $00
119b2     C7 B0 BF C5 
119b6     B9 CF D8 E0 
119ba     E5 D3 E7 03 
119be     FF 00 EE D7 | 	byte	$c7, $b0, $bf, $c5, $b9, $cf, $d8, $e0, $e5, $d3, $e7, $03, $ff, $00, $ee, $d7
119c2     FB 23 03 20 
119c6     1F 37 3C 08 
119ca     18 3B 33 34 
119ce     2F 4D 3D 44 | 	byte	$fb, $23, $03, $20, $1f, $37, $3c, $08, $18, $3b, $33, $34, $2f, $4d, $3d, $44
119d2     54 17 40 30 
119d6     30 33 20 20 
119da     2E 1C 0F 16 
119de     D7 F9 F4 DE | 	byte	$54, $17, $40, $30, $30, $33, $20, $20, $2e, $1c, $0f, $16, $d7, $f9, $f4, $de
119e2     D5 E0 D3 D0 
119e6     C7 B8 A8 AC 
119ea     C0 C8 AA AF 
119ee     BF DF CB D3 | 	byte	$d5, $e0, $d3, $d0, $c7, $b8, $a8, $ac, $c0, $c8, $aa, $af, $bf, $df, $cb, $d3
119f2     DC EB ED E2 
119f6     D2 FF FB 20 
119fa     0C FD 13 10 
119fe     1F 38 1F 58 | 	byte	$dc, $eb, $ed, $e2, $d2, $ff, $fb, $20, $0c, $fd, $13, $10, $1f, $38, $1f, $58
11a02     0A 49 43 47 
11a06     40 57 40 40 
11a0a     2F 4E 4D 39 
11a0e     20 34 13 48 | 	byte	$0a, $49, $43, $47, $40, $57, $40, $40, $2f, $4e, $4d, $39, $20, $34, $13, $48
11a12     20 0F 0C 10 
11a16     37 00 FF FF 
11a1a     E4 F4 AF C2 
11a1e     A0 B8 D7 C8 | 	byte	$20, $0f, $0c, $10, $37, $00, $ff, $ff, $e4, $f4, $af, $c2, $a0, $b8, $d7, $c8
11a22     B4 AD A4 A8 
11a26     BC B8 B3 C0 
11a2a     C4 E0 DC E1 
11a2e     EB D7 FB F3 | 	byte	$b4, $ad, $a4, $a8, $bc, $b8, $b3, $c0, $c4, $e0, $dc, $e1, $eb, $d7, $fb, $f3
11a32     FF 10 FF 2C 
11a36     40 28 2B 32 
11a3a     44 0B 27 48 
11a3e     3C 50 3C 2F | 	byte	$ff, $10, $ff, $2c, $40, $28, $2b, $32, $44, $0b, $27, $48, $3c, $50, $3c, $2f
11a42     23 32 3F 28 
11a46     18 0B 0C 18 
11a4a     06 1C FE EC 
11a4e     0A 1E F4 E1 | 	byte	$23, $32, $3f, $28, $18, $0b, $0c, $18, $06, $1c, $fe, $ec, $0a, $1e, $f4, $e1
11a52     EF DE EE E0 
11a56     E8 D0 C0 CC 
11a5a     E6 B7 C4 D3 
11a5e     CA CF E0 B9 | 	byte	$ef, $de, $ee, $e0, $e8, $d0, $c0, $cc, $e6, $b7, $c4, $d3, $ca, $cf, $e0, $b9
11a62     CF CD DF E0 
11a66     D9 ED E0 E9 
11a6a     E7 FB 05 FB 
11a6e     0C 00 04 22 | 	byte	$cf, $cd, $df, $e0, $d9, $ed, $e0, $e9, $e7, $fb, $05, $fb, $0c, $00, $04, $22
11a72     15 37 00 2F 
11a76     56 40 3A 2A 
11a7a     3F 60 47 2E 
11a7e     48 60 4E 40 | 	byte	$15, $37, $00, $2f, $56, $40, $3a, $2a, $3f, $60, $47, $2e, $48, $60, $4e, $40
11a82     4F 40 2B 40 
11a86     1F 32 1F 08 
11a8a     F6 0D 07 E0 
11a8e     DF F8 E0 EC | 	byte	$4f, $40, $2b, $40, $1f, $32, $1f, $08, $f6, $0d, $07, $e0, $df, $f8, $e0, $ec
11a92     B9 9F BA E6 
11a96     EA D8 C0 D0 
11a9a     AA BF CF CC 
11a9e     AD C0 D8 CC | 	byte	$b9, $9f, $ba, $e6, $ea, $d8, $c0, $d0, $aa, $bf, $cf, $cc, $ad, $c0, $d8, $cc
11aa2     CF ED 00 E0 
11aa6     FC F8 F4 01 
11aaa     06 FA 08 13 
11aae     14 2D 32 03 | 	byte	$cf, $ed, $00, $e0, $fc, $f8, $f4, $01, $06, $fa, $08, $13, $14, $2d, $32, $03
11ab2     27 40 1C 37 
11ab6     51 38 24 23 
11aba     42 27 1C 0C 
11abe     18 20 30 3D | 	byte	$27, $40, $1c, $37, $51, $38, $24, $23, $42, $27, $1c, $0c, $18, $20, $30, $3d
11ac2     0E 27 1E 00 
11ac6     F6 13 F7 F2 
11aca     CD F0 E0 E3 
11ace     C5 CF D6 C4 | 	byte	$0e, $27, $1e, $00, $f6, $13, $f7, $f2, $cd, $f0, $e0, $e3, $c5, $cf, $d6, $c4
11ad2     D4 D8 E3 B8 
11ad6     CC C0 DF CF 
11ada     C0 BD CB C4 
11ade     DF E4 D4 D7 | 	byte	$d4, $d8, $e3, $b8, $cc, $c0, $df, $cf, $c0, $bd, $cb, $c4, $df, $e4, $d4, $d7
11ae2     F8 F7 F2 E2 
11ae6     F4 1B 07 10 
11aea     FF FF 1F 37 
11aee     27 1B 20 13 | 	byte	$f8, $f7, $f2, $e2, $f4, $1b, $07, $10, $ff, $ff, $1f, $37, $27, $1b, $20, $13
11af2     17 28 49 48 
11af6     39 4E 40 26 
11afa     30 40 38 3F 
11afe     38 32 2B 29 | 	byte	$17, $28, $49, $48, $39, $4e, $40, $26, $30, $40, $38, $3f, $38, $32, $2b, $29
11b02     0F 19 10 10 
11b06     10 F4 FF 13 
11b0a     FE E0 F3 F4 
11b0e     D7 D3 F3 F8 | 	byte	$0f, $19, $10, $10, $10, $f4, $ff, $13, $fe, $e0, $f3, $f4, $d7, $d3, $f3, $f8
11b12     DE B8 C3 E3 
11b16     D4 C0 BB C5 
11b1a     D8 DF D4 B9 
11b1e     D0 BB FA CF | 	byte	$de, $b8, $c3, $e3, $d4, $c0, $bb, $c5, $d8, $df, $d4, $b9, $d0, $bb, $fa, $cf
11b22     CF DF E8 FF 
11b26     F5 DF F5 07 
11b2a     18 15 1F 0C 
11b2e     24 28 34 26 | 	byte	$cf, $df, $e8, $ff, $f5, $df, $f5, $07, $18, $15, $1f, $0c, $24, $28, $34, $26
11b32     24 30 18 29 
11b36     51 53 48 37 
11b3a     3E 40 3A 20 
11b3e     2B 24 2C 2C | 	byte	$24, $30, $18, $29, $51, $53, $48, $37, $3e, $40, $3a, $20, $2b, $24, $2c, $2c
11b42     0F 10 0C 04 
11b46     1F F3 E3 E7 
11b4a     E0 D3 C7 DD 
11b4e     D3 AF AB DC | 	byte	$0f, $10, $0c, $04, $1f, $f3, $e3, $e7, $e0, $d3, $c7, $dd, $d3, $af, $ab, $dc
11b52     C7 B8 A0 A4 
11b56     C0 C0 C9 BA 
11b5a     BF D8 CE D5 
11b5e     EB D7 F0 F9 | 	byte	$c7, $b8, $a0, $a4, $c0, $c0, $c9, $ba, $bf, $d8, $ce, $d5, $eb, $d7, $f0, $f9
11b62     FE 14 13 EF 
11b66     0C 27 08 2C 
11b6a     0F 3B 30 19 
11b6e     2B 20 19 1B | 	byte	$fe, $14, $13, $ef, $0c, $27, $08, $2c, $0f, $3b, $30, $19, $2b, $20, $19, $1b
11b72     1D 28 2F 33 
11b76     24 27 16 26 
11b7a     37 1A 26 0B 
11b7e     34 3F 2B 33 | 	byte	$1d, $28, $2f, $33, $24, $27, $16, $26, $37, $1a, $26, $0b, $34, $3f, $2b, $33
11b82     18 2C 1F 13 
11b86     18 F0 F3 0E 
11b8a     06 F8 DF EF 
11b8e     DB E0 DD D8 | 	byte	$18, $2c, $1f, $13, $18, $f0, $f3, $0e, $06, $f8, $df, $ef, $db, $e0, $dd, $d8
11b92     C0 BF DF D4 
11b96     C2 B3 AF C6 
11b9a     BB C7 BF CB 
11b9e     C6 DD DB D2 | 	byte	$c0, $bf, $df, $d4, $c2, $b3, $af, $c6, $bb, $c7, $bf, $cb, $c6, $dd, $db, $d2
11ba2     C9 EC E5 EE 
11ba6     DF F2 FC 00 
11baa     FF 18 10 05 
11bae     24 23 34 1A | 	byte	$c9, $ec, $e5, $ee, $df, $f2, $fc, $00, $ff, $18, $10, $05, $24, $23, $34, $1a
11bb2     18 22 2E 3E 
11bb6     2C 21 1B 1F 
11bba     2F 30 18 17 
11bbe     34 3F 3D 40 | 	byte	$18, $22, $2e, $3e, $2c, $21, $1b, $1f, $2f, $30, $18, $17, $34, $3f, $3d, $40
11bc2     0F 24 1D 2A 
11bc6     28 0A 2E 17 
11bca     FF 12 F8 0E 
11bce     FC F9 F8 E9 | 	byte	$0f, $24, $1d, $2a, $28, $0a, $2e, $17, $ff, $12, $f8, $0e, $fc, $f9, $f8, $e9
11bd2     FC C4 EB EE 
11bd6     D8 DA E0 DF 
11bda     E3 E0 D3 D9 
11bde     D0 C1 DD DF | 	byte	$fc, $c4, $eb, $ee, $d8, $da, $e0, $df, $e3, $e0, $d3, $d9, $d0, $c1, $dd, $df
11be2     D3 DC CF D7 
11be6     E0 DA D3 EA 
11bea     E0 E2 E5 EE 
11bee     EC EF FB 09 | 	byte	$d3, $dc, $cf, $d7, $e0, $da, $d3, $ea, $e0, $e2, $e5, $ee, $ec, $ef, $fb, $09
11bf2     0A 07 1C 1F 
11bf6     18 23 3F 2E 
11bfa     36 25 36 27 
11bfe     54 20 27 3B | 	byte	$0a, $07, $1c, $1f, $18, $23, $3f, $2e, $36, $25, $36, $27, $54, $20, $27, $3b
11c02     3B 18 27 2B 
11c06     2A 18 0F 18 
11c0a     06 10 00 0C 
11c0e     FF 06 F7 07 | 	byte	$3b, $18, $27, $2b, $2a, $18, $0f, $18, $06, $10, $00, $0c, $ff, $06, $f7, $07
11c12     EA FE EF F4 
11c16     F0 E0 BF F4 
11c1a     EF D0 C3 ED 
11c1e     E4 EB E8 D8 | 	byte	$ea, $fe, $ef, $f4, $f0, $e0, $bf, $f4, $ef, $d0, $c3, $ed, $e4, $eb, $e8, $d8
11c22     DF EB E7 E7 
11c26     C5 DF E0 E4 
11c2a     E3 E4 F0 EE 
11c2e     EC DC F3 F6 | 	byte	$df, $eb, $e7, $e7, $c5, $df, $e0, $e4, $e3, $e4, $f0, $ee, $ec, $dc, $f3, $f6
11c32     0E FB 00 07 
11c36     FF 0F 1D FD 
11c3a     0F 17 1B 11 
11c3e     16 1A 0B 1A | 	byte	$0e, $fb, $00, $07, $ff, $0f, $1d, $fd, $0f, $17, $1b, $11, $16, $1a, $0b, $1a
11c42     13 23 24 18 
11c46     13 1C 07 09 
11c4a     13 00 03 17 
11c4e     06 03 03 F4 | 	byte	$13, $23, $24, $18, $13, $1c, $07, $09, $13, $00, $03, $17, $06, $03, $03, $f4
11c52     06 10 15 07 
11c56     FF 02 11 1E 
11c5a     0A 13 2F 0C 
11c5e     17 16 0F 01 | 	byte	$06, $10, $15, $07, $ff, $02, $11, $1e, $0a, $13, $2f, $0c, $17, $16, $0f, $01
11c62     08 F8 08 0E 
11c66     F4 00 F4 EF 
11c6a     FC F8 EC F4 
11c6e     FE F4 E0 F0 | 	byte	$08, $f8, $08, $0e, $f4, $00, $f4, $ef, $fc, $f8, $ec, $f4, $fe, $f4, $e0, $f0
11c72     E3 F4 F2 FF 
11c76     E8 D4 E0 EF 
11c7a     00 00 EA E4 
11c7e     EC F3 EB E7 | 	byte	$e3, $f4, $f2, $ff, $e8, $d4, $e0, $ef, $00, $00, $ea, $e4, $ec, $f3, $eb, $e7
11c82     EF E3 FF F6 
11c86     F9 F2 FB 10 
11c8a     00 10 0C 1C 
11c8e     0F 00 0F 17 | 	byte	$ef, $e3, $ff, $f6, $f9, $f2, $fb, $10, $00, $10, $0c, $1c, $0f, $00, $0f, $17
11c92     07 00 FD 20 
11c96     10 12 0F 1B 
11c9a     08 0E 04 04 
11c9e     18 0F 13 FD | 	byte	$07, $00, $fd, $20, $10, $12, $0f, $1b, $08, $0e, $04, $04, $18, $0f, $13, $fd
11ca2     0A 1F 1E F7 
11ca6     07 0B 11 13 
11caa     11 14 20 14 
11cae     0F 18 16 0B | 	byte	$0a, $1f, $1e, $f7, $07, $0b, $11, $13, $11, $14, $20, $14, $0f, $18, $16, $0b
11cb2     10 09 0F 0E 
11cb6     15 13 FE 02 
11cba     1B 0D E4 E7 
11cbe     F2 F8 EE E1 | 	byte	$10, $09, $0f, $0e, $15, $13, $fe, $02, $1b, $0d, $e4, $e7, $f2, $f8, $ee, $e1
11cc2     DD E4 E6 DF 
11cc6     DD CE D7 D0 
11cca     D4 D8 CF CF 
11cce     D0 C4 D4 DA | 	byte	$dd, $e4, $e6, $df, $dd, $ce, $d7, $d0, $d4, $d8, $cf, $cf, $d0, $c4, $d4, $da
11cd2     E9 DE E7 E4 
11cd6     F3 F3 FF 06 
11cda     00 F6 10 04 
11cde     18 15 1F 21 | 	byte	$e9, $de, $e7, $e4, $f3, $f3, $ff, $06, $00, $f6, $10, $04, $18, $15, $1f, $21
11ce2     23 2B 1E 25 
11ce6     1B 2E 24 2C 
11cea     30 24 30 2C 
11cee     24 28 28 21 | 	byte	$23, $2b, $1e, $25, $1b, $2e, $24, $2c, $30, $24, $30, $2c, $24, $28, $28, $21
11cf2     18 1F 14 16 
11cf6     17 1F 24 16 
11cfa     0C 08 07 0C 
11cfe     00 FB FD F4 | 	byte	$18, $1f, $14, $16, $17, $1f, $24, $16, $0c, $08, $07, $0c, $00, $fb, $fd, $f4
11d02     F8 E4 F8 F2 
11d06     ED E0 E9 EE 
11d0a     F4 F2 D9 E0 
11d0e     D8 DD F1 E4 | 	byte	$f8, $e4, $f8, $f2, $ed, $e0, $e9, $ee, $f4, $f2, $d9, $e0, $d8, $dd, $f1, $e4
11d12     D8 CB DA D8 
11d16     D1 D5 CF DB 
11d1a     D0 D4 D6 DE 
11d1e     DF E3 ED DB | 	byte	$d8, $cb, $da, $d8, $d1, $d5, $cf, $db, $d0, $d4, $d6, $de, $df, $e3, $ed, $db
11d22     E6 E7 E8 EF 
11d26     FE FC FD 00 
11d2a     0E 0B 0F 17 
11d2e     20 1E 1F 35 | 	byte	$e6, $e7, $e8, $ef, $fe, $fc, $fd, $00, $0e, $0b, $0f, $17, $20, $1e, $1f, $35
11d32     2B 2B 28 32 
11d36     27 24 33 2E 
11d3a     28 2C 23 1F 
11d3e     0E 10 18 17 | 	byte	$2b, $2b, $28, $32, $27, $24, $33, $2e, $28, $2c, $23, $1f, $0e, $10, $18, $17
11d42     14 FF 0A FC 
11d46     02 FF FB 06 
11d4a     F9 02 F8 FC 
11d4e     FD F6 FB EC | 	byte	$14, $ff, $0a, $fc, $02, $ff, $fb, $06, $f9, $02, $f8, $fc, $fd, $f6, $fb, $ec
11d52     EA F6 FA F6 
11d56     F4 E8 EC E9 
11d5a     F8 F2 EB DF 
11d5e     F0 EC E7 EA | 	byte	$ea, $f6, $fa, $f6, $f4, $e8, $ec, $e9, $f8, $f2, $eb, $df, $f0, $ec, $e7, $ea
11d62     DF FE F8 FC 
11d66     E8 F1 F8 F0 
11d6a     F2 E8 F0 F6 
11d6e     F6 F8 F4 F4 | 	byte	$df, $fe, $f8, $fc, $e8, $f1, $f8, $f0, $f2, $e8, $f0, $f6, $f6, $f8, $f4, $f4
11d72     F8 FF 00 EC 
11d76     FC 03 01 F6 
11d7a     F9 F6 00 FF 
11d7e     FC 00 0A FF | 	byte	$f8, $ff, $00, $ec, $fc, $03, $01, $f6, $f9, $f6, $00, $ff, $fc, $00, $0a, $ff
11d82     02 03 10 0C 
11d86     1C 0C 1C 20 
11d8a     16 16 16 1A 
11d8e     1C 11 1A 07 | 	byte	$02, $03, $10, $0c, $1c, $0c, $1c, $20, $16, $16, $16, $1a, $1c, $11, $1a, $07
11d92     0D 07 06 10 
11d96     10 0C FC 00 
11d9a     FE 03 07 00 
11d9e     F4 F7 F7 F9 | 	byte	$0d, $07, $06, $10, $10, $0c, $fc, $00, $fe, $03, $07, $00, $f4, $f7, $f7, $f9
11da2     F6 F7 02 FF 
11da6     F8 F3 F8 F1 
11daa     00 EE 00 F8 
11dae     F9 FB F3 FF | 	byte	$f6, $f7, $02, $ff, $f8, $f3, $f8, $f1, $00, $ee, $00, $f8, $f9, $fb, $f3, $ff
11db2     F5 FF FF 02 
11db6     FF F8 FD F2 
11dba     FF F8 F4 F8 
11dbe     FA 03 FC F6 | 	byte	$f5, $ff, $ff, $02, $ff, $f8, $fd, $f2, $ff, $f8, $f4, $f8, $fa, $03, $fc, $f6
11dc2     F3 F4 F3 00 
11dc6     FC F0 EF F9 
11dca     E6 F2 ED F0 
11dce     EB F0 F3 F0 | 	byte	$f3, $f4, $f3, $00, $fc, $f0, $ef, $f9, $e6, $f2, $ed, $f0, $eb, $f0, $f3, $f0
11dd2     EC F8 FE F2 
11dd6     FF 00 03 0A 
11dda     03 07 13 0A 
11dde     13 0B 0B 14 | 	byte	$ec, $f8, $fe, $f2, $ff, $00, $03, $0a, $03, $07, $13, $0a, $13, $0b, $0b, $14
11de2     17 10 15 1F 
11de6     18 23 1C 14 
11dea     16 17 11 1B 
11dee     0C 17 00 03 | 	byte	$17, $10, $15, $1f, $18, $23, $1c, $14, $16, $17, $11, $1b, $0c, $17, $00, $03
11df2     FF 12 00 FD 
11df6     04 FF 00 00 
11dfa     00 F7 FB 03 
11dfe     FA F3 FA FF | 	byte	$ff, $12, $00, $fd, $04, $ff, $00, $00, $00, $f7, $fb, $03, $fa, $f3, $fa, $ff
11e02     FE 02 00 FF 
11e06     07 07 F8 01 
11e0a     FC 07 FF 03 
11e0e     F8 FA F7 F9 | 	byte	$fe, $02, $00, $ff, $07, $07, $f8, $01, $fc, $07, $ff, $03, $f8, $fa, $f7, $f9
11e12     FA F9 EC E9 
11e16     F0 F4 E7 F1 
11e1a     DE E3 E4 E6 
11e1e     EA E8 E6 E4 | 	byte	$fa, $f9, $ec, $e9, $f0, $f4, $e7, $f1, $de, $e3, $e4, $e6, $ea, $e8, $e6, $e4
11e22     E3 DC D8 E3 
11e26     E4 E3 E4 E5 
11e2a     F8 F1 EF F3 
11e2e     F6 02 04 06 | 	byte	$e3, $dc, $d8, $e3, $e4, $e3, $e4, $e5, $f8, $f1, $ef, $f3, $f6, $02, $04, $06
11e32     0E 10 07 13 
11e36     17 0D 19 1F 
11e3a     19 10 18 20 
11e3e     27 26 18 1C | 	byte	$0e, $10, $07, $13, $17, $0d, $19, $1f, $19, $10, $18, $20, $27, $26, $18, $1c
11e42     1E 1E 1C 1C 
11e46     19 1F 16 10 
11e4a     0F 15 01 0E 
11e4e     0C 09 00 05 | 	byte	$1e, $1e, $1c, $1c, $19, $1f, $16, $10, $0f, $15, $01, $0e, $0c, $09, $00, $05
11e52     00 04 FD FF 
11e56     00 FF F9 03 
11e5a     F9 F5 F0 FB 
11e5e     06 EC FB F1 | 	byte	$00, $04, $fd, $ff, $00, $ff, $f9, $03, $f9, $f5, $f0, $fb, $06, $ec, $fb, $f1
11e62     FC F6 F8 F9 
11e66     F6 F2 F4 F0 
11e6a     EC F2 EF E7 
11e6e     EA F0 F1 F2 | 	byte	$fc, $f6, $f8, $f9, $f6, $f2, $f4, $f0, $ec, $f2, $ef, $e7, $ea, $f0, $f1, $f2
11e72     F4 EB EF EC 
11e76     E9 F1 F1 EB 
11e7a     F3 F0 F8 F8 
11e7e     FE FE FC 01 | 	byte	$f4, $eb, $ef, $ec, $e9, $f1, $f1, $eb, $f3, $f0, $f8, $f8, $fe, $fe, $fc, $01
11e82     00 02 10 07 
11e86     07 08 17 06 
11e8a     12 0F 0F 10 
11e8e     0F 10 19 16 | 	byte	$00, $02, $10, $07, $07, $08, $17, $06, $12, $0f, $0f, $10, $0f, $10, $19, $16
11e92     10 00 0E 12 
11e96     10 04 0E 09 
11e9a     08 09 03 03 
11e9e     00 07 06 F8 | 	byte	$10, $00, $0e, $12, $10, $04, $0e, $09, $08, $09, $03, $03, $00, $07, $06, $f8
11ea2     F8 FC FC 01 
11ea6     F8 FA F9 FC 
11eaa     F4 F8 F0 ED 
11eae     FF F6 00 F0 | 	byte	$f8, $fc, $fc, $01, $f8, $fa, $f9, $fc, $f4, $f8, $f0, $ed, $ff, $f6, $00, $f0
11eb2     F8 F9 02 F0 
11eb6     FF 02 04 06 
11eba     09 0E 09 09 
11ebe     05 14 06 0B | 	byte	$f8, $f9, $02, $f0, $ff, $02, $04, $06, $09, $0e, $09, $09, $05, $14, $06, $0b
11ec2     09 02 07 08 
11ec6     08 00 09 00 
11eca     06 00 04 07 
11ece     02 FC F7 FB | 	byte	$09, $02, $07, $08, $08, $00, $09, $00, $06, $00, $04, $07, $02, $fc, $f7, $fb
11ed2     FA FA FA EF 
11ed6     F6 ED F3 F0 
11eda     F0 E0 EA E9 
11ede     F2 E7 EF F0 | 	byte	$fa, $fa, $fa, $ef, $f6, $ed, $f3, $f0, $f0, $e0, $ea, $e9, $f2, $e7, $ef, $f0
11ee2     F3 EC F3 EE 
11ee6     EF F3 EF F4 
11eea     EE F3 F0 FC 
11eee     FA FC F9 04 | 	byte	$f3, $ec, $f3, $ee, $ef, $f3, $ef, $f4, $ee, $f3, $f0, $fc, $fa, $fc, $f9, $04
11ef2     01 04 06 10 
11ef6     0C 13 09 1C 
11efa     16 13 18 1F 
11efe     17 21 1F 19 | 	byte	$01, $04, $06, $10, $0c, $13, $09, $1c, $16, $13, $18, $1f, $17, $21, $1f, $19
11f02     24 1E 22 13 
11f06     20 12 16 1C 
11f0a     18 13 16 14 
11f0e     0B 0F 07 04 | 	byte	$24, $1e, $22, $13, $20, $12, $16, $1c, $18, $13, $16, $14, $0b, $0f, $07, $04
11f12     02 FB FE F9 
11f16     F8 F1 F1 EE 
11f1a     E6 E8 EA EC 
11f1e     EC EF E5 EC | 	byte	$02, $fb, $fe, $f9, $f8, $f1, $f1, $ee, $e6, $e8, $ea, $ec, $ec, $ef, $e5, $ec
11f22     E3 EC E3 EA 
11f26     E5 E6 E4 EA 
11f2a     EC E7 EE ED 
11f2e     F0 EF F8 F5 | 	byte	$e3, $ec, $e3, $ea, $e5, $e6, $e4, $ea, $ec, $e7, $ee, $ed, $f0, $ef, $f8, $f5
11f32     FB FB FB FF 
11f36     FE FD 03 03 
11f3a     FF 03 07 09 
11f3e     00 03 08 06 | 	byte	$fb, $fb, $fb, $ff, $fe, $fd, $03, $03, $ff, $03, $07, $09, $00, $03, $08, $06
11f42     08 09 09 12 
11f46     0E 0A 07 12 
11f4a     04 08 FE 02 
11f4e     06 04 FF 06 | 	byte	$08, $09, $09, $12, $0e, $0a, $07, $12, $04, $08, $fe, $02, $06, $04, $ff, $06
11f52     03 FE 07 03 
11f56     FE FF FE FC 
11f5a     FC F8 FF FF 
11f5e     02 FB FC FE | 	byte	$03, $fe, $07, $03, $fe, $ff, $fe, $fc, $fc, $f8, $ff, $ff, $02, $fb, $fc, $fe
11f62     01 FB FF FB 
11f66     FF F7 00 FC 
11f6a     FE FA 02 FC 
11f6e     00 07 F9 00 | 	byte	$01, $fb, $ff, $fb, $ff, $f7, $00, $fc, $fe, $fa, $02, $fc, $00, $07, $f9, $00
11f72     F5 04 00 01 
11f76     FC 02 FD 00 
11f7a     03 03 FF 07 
11f7e     0C 05 08 03 | 	byte	$f5, $04, $00, $01, $fc, $02, $fd, $00, $03, $03, $ff, $07, $0c, $05, $08, $03
11f82     06 01 0C 04 
11f86     06 04 0C 0E 
11f8a     03 07 01 0A 
11f8e     05 00 04 03 | 	byte	$06, $01, $0c, $04, $06, $04, $0c, $0e, $03, $07, $01, $0a, $05, $00, $04, $03
11f92     FF 0A FF FF 
11f96     FD FC F4 FC 
11f9a     F9 F9 FB F4 
11f9e     F6 F8 EC F0 | 	byte	$ff, $0a, $ff, $ff, $fd, $fc, $f4, $fc, $f9, $f9, $fb, $f4, $f6, $f8, $ec, $f0
11fa2     EE F1 EB F8 
11fa6     F3 EB F6 EE 
11faa     F1 F0 F4 F0 
11fae     F3 F7 F3 FA | 	byte	$ee, $f1, $eb, $f8, $f3, $eb, $f6, $ee, $f1, $f0, $f4, $f0, $f3, $f7, $f3, $fa
11fb2     F5 FA 00 FA 
11fb6     FC FF 07 03 
11fba     05 03 03 03 
11fbe     04 07 0F FF | 	byte	$f5, $fa, $00, $fa, $fc, $ff, $07, $03, $05, $03, $03, $03, $04, $07, $0f, $ff
11fc2     06 07 08 08 
11fc6     04 0F 05 12 
11fca     FF 0C 06 09 
11fce     03 06 07 04 | 	byte	$06, $07, $08, $08, $04, $0f, $05, $12, $ff, $0c, $06, $09, $03, $06, $07, $04
11fd2     02 07 FF 09 
11fd6     04 09 FA 06 
11fda     FF 05 06 00 
11fde     FE FF FF 04 | 	byte	$02, $07, $ff, $09, $04, $09, $fa, $06, $ff, $05, $06, $00, $fe, $ff, $ff, $04
11fe2     FF 09 03 04 
11fe6     00 FE 03 00 
11fea     00 06 03 00 
11fee     04 03 FC 00 | 	byte	$ff, $09, $03, $04, $00, $fe, $03, $00, $00, $06, $03, $00, $04, $03, $fc, $00
11ff2     F8 08 06 00 
11ff6     00 FE FF F6 
11ffa     06 02 FC 00 
11ffe     F4 F4 FA F6 | 	byte	$f8, $08, $06, $00, $00, $fe, $ff, $f6, $06, $02, $fc, $00, $f4, $f4, $fa, $f6
12002     02 FC 00 00 
12006     FB FF FE FA 
1200a     FC EC EF F3 
1200e     F3 F0 F0 F5 | 	byte	$02, $fc, $00, $00, $fb, $ff, $fe, $fa, $fc, $ec, $ef, $f3, $f3, $f0, $f0, $f5
12012     00 F1 F4 F4 
12016     F3 FC F0 FC 
1201a     F6 F0 FC F8 
1201e     06 F4 FB 0B | 	byte	$00, $f1, $f4, $f4, $f3, $fc, $f0, $fc, $f6, $f0, $fc, $f8, $06, $f4, $fb, $0b
12022     FD 03 06 00 
12026     00 06 02 0D 
1202a     08 0A 04 06 
1202e     0A 08 FE 0F | 	byte	$fd, $03, $06, $00, $00, $06, $02, $0d, $08, $0a, $04, $06, $0a, $08, $fe, $0f
12032     04 06 0F 08 
12036     13 08 13 0E 
1203a     0F 0A 0C 0F 
1203e     08 06 00 FF | 	byte	$04, $06, $0f, $08, $13, $08, $13, $0e, $0f, $0a, $0c, $0f, $08, $06, $00, $ff
12042     04 03 09 08 
12046     0E 09 00 0A 
1204a     FB 03 F7 FE 
1204e     FF F8 F8 FF | 	byte	$04, $03, $09, $08, $0e, $09, $00, $0a, $fb, $03, $f7, $fe, $ff, $f8, $f8, $ff
12052     00 00 FC FF 
12056     FC 04 FB F6 
1205a     F6 F8 FD F7 
1205e     FB F3 FC FC | 	byte	$00, $00, $fc, $ff, $fc, $04, $fb, $f6, $f6, $f8, $fd, $f7, $fb, $f3, $fc, $fc
12062     FC FF FF F7 
12066     FF FF FA 02 
1206a     F7 02 FD 00 
1206e     FC 04 F7 FC | 	byte	$fc, $ff, $ff, $f7, $ff, $ff, $fa, $02, $f7, $02, $fd, $00, $fc, $04, $f7, $fc
12072     ED F4 F7 F8 
12076     00 F5 02 F2 
1207a     00 FF FC F6 
1207e     FA 04 FB FF | 	byte	$ed, $f4, $f7, $f8, $00, $f5, $02, $f2, $00, $ff, $fc, $f6, $fa, $04, $fb, $ff
12082     FE F9 FB F3 
12086     F6 EC F6 F0 
1208a     00 FF FF FB 
1208e     00 08 04 0F | 	byte	$fe, $f9, $fb, $f3, $f6, $ec, $f6, $f0, $00, $ff, $ff, $fb, $00, $08, $04, $0f
12092     04 0B F7 FF 
12096     04 06 0B 03 
1209a     08 0B 00 0F 
1209e     07 FE 10 07 | 	byte	$04, $0b, $f7, $ff, $04, $06, $0b, $03, $08, $0b, $00, $0f, $07, $fe, $10, $07
120a2     00 0F FF 03 
120a6     07 00 FF 02 
120aa     0B FE 00 00 
120ae     08 FF 06 07 | 	byte	$00, $0f, $ff, $03, $07, $00, $ff, $02, $0b, $fe, $00, $00, $08, $ff, $06, $07
120b2     FF 06 F4 04 
120b6     00 FF 00 08 
120ba     F3 01 04 FD 
120be     FF 07 00 FF | 	byte	$ff, $06, $f4, $04, $00, $ff, $00, $08, $f3, $01, $04, $fd, $ff, $07, $00, $ff
120c2     04 F9 FF F4 
120c6     FF 00 F3 FD 
120ca     F7 04 FC EF 
120ce     00 F1 FB 00 | 	byte	$04, $f9, $ff, $f4, $ff, $00, $f3, $fd, $f7, $04, $fc, $ef, $00, $f1, $fb, $00
120d2     FF F6 00 FD 
120d6     FB 03 FE F7 
120da     00 F8 FF FE 
120de     FC FB 05 FA | 	byte	$ff, $f6, $00, $fd, $fb, $03, $fe, $f7, $00, $f8, $ff, $fe, $fc, $fb, $05, $fa
120e2     F3 00 FA FC 
120e6     FE FF F3 FC 
120ea     FD FD F7 FF 
120ee     F5 F7 02 EE | 	byte	$f3, $00, $fa, $fc, $fe, $ff, $f3, $fc, $fd, $fd, $f7, $ff, $f5, $f7, $02, $ee
120f2     FD 00 00 00 
120f6     00 00 36 36 
120fa     36 34 32 30 
120fe     2C 28 23 1D | 	byte	$fd, $00, $00, $00, $00, $00, $36, $36, $36, $34, $32, $30, $2c, $28, $23, $1d
12102     17 10 09 02 
12106     FA F2 EA E2 
1210a     DA D4 CF CB 
1210e     C8 00 FE 07 | 	byte	$17, $10, $09, $02, $fa, $f2, $ea, $e2, $da, $d4, $cf, $cb, $c8, $00, $fe, $07
12112     0D 01 12 0A 
12116     16 0C 1C 17 
1211a     13 1F 0F B6 
1211e     ED E1 C7 02 | 	byte	$0d, $01, $12, $0a, $16, $0c, $1c, $17, $13, $1f, $0f, $b6, $ed, $e1, $c7, $02
12122     C4 F4 E5 DB 
12126     FE D7 FA E8 
1212a     ED FB E5 01 
1212e     EE F9 FC F3 | 	byte	$c4, $f4, $e5, $db, $fe, $d7, $fa, $e8, $ed, $fb, $e5, $01, $ee, $f9, $fc, $f3
12132     04 F3 05 FC 
12136     FF 06 FC 0B 
1213a     FD 0C 02 09 
1213e     09 05 10 04 | 	byte	$04, $f3, $05, $fc, $ff, $06, $fc, $0b, $fd, $0c, $02, $09, $09, $05, $10, $04
12142     12 06 11 0A 
12146     10 0E 0F 11 
1214a     0E 14 0E 15 
1214e     10 15 12 15 | 	byte	$12, $06, $11, $0a, $10, $0e, $0f, $11, $0e, $14, $0e, $15, $10, $15, $12, $15
12152     14 15 15 15 
12156     17 15 17 16 
1215a     17 17 16 A7 
1215e     0A B1 04 BC | 	byte	$14, $15, $15, $15, $17, $15, $17, $16, $17, $17, $16, $a7, $0a, $b1, $04, $bc
12162     01 C6 FE CF 
12166     FD D8 FB DF 
1216a     FA E6 F9 EC 
1216e     F9 F2 F9 F7 | 	byte	$01, $c6, $fe, $cf, $fd, $d8, $fb, $df, $fa, $e6, $f9, $ec, $f9, $f2, $f9, $f7
12172     FA FC FB FF 
12176     FD 03 FE 05 
1217a     00 07 02 09 
1217e     04 0A 06 0B | 	byte	$fa, $fc, $fb, $ff, $fd, $03, $fe, $05, $00, $07, $02, $09, $04, $0a, $06, $0b
12182     09 0C 0A 0D 
12186     0C 0E 0E 0F 
1218a     0F 10 11 11 
1218e     12 10 14 11 | 	byte	$09, $0c, $0a, $0d, $0c, $0e, $0e, $0f, $0f, $10, $11, $11, $12, $10, $14, $11
12192     15 11 16 11 
12196     16 13 17 15 
1219a     18 14 11 AA 
1219e     00 BE F1 D2 | 	byte	$15, $11, $16, $11, $16, $13, $17, $15, $18, $14, $11, $aa, $00, $be, $f1, $d2
121a2     E4 E4 DC F1 
121a6     D8 FB D7 00 
121aa     DA 02 E0 02 
121ae     E6 FF EF FC | 	byte	$e4, $e4, $dc, $f1, $d8, $fb, $d7, $00, $da, $02, $e0, $02, $e6, $ff, $ef, $fc
121b2     F9 F7 03 F3 
121b6     0A F2 0F F3 
121ba     0F FA 0B 02 
121be     07 09 04 0E | 	byte	$f9, $f7, $03, $f3, $0a, $f2, $0f, $f3, $0f, $fa, $0b, $02, $07, $09, $04, $0e
121c2     03 11 04 11 
121c6     08 11 0C 0F 
121ca     10 0D 13 0C 
121ce     14 0D 16 0F | 	byte	$03, $11, $04, $11, $08, $11, $0c, $0f, $10, $0d, $13, $0c, $14, $0d, $16, $0f
121d2     14 13 12 17 
121d6     11 18 12 18 
121da     14 16 09 AC 
121de     F8 CC DB EE | 	byte	$14, $13, $12, $17, $11, $18, $12, $18, $14, $16, $09, $ac, $f8, $cc, $db, $ee
121e2     C7 FF C9 FA 
121e6     DD E9 F4 DA 
121ea     04 DA 03 E8 
121ee     F6 FD E8 0A | 	byte	$c7, $ff, $c9, $fa, $dd, $e9, $f4, $da, $04, $da, $03, $e8, $f6, $fd, $e8, $0a
121f2     E6 0A F3 FD 
121f6     05 F3 0F F4 
121fa     0C 00 03 0C 
121fe     FD 11 FF 0E | 	byte	$e6, $0a, $f3, $fd, $05, $f3, $0f, $f4, $0c, $00, $03, $0c, $fd, $11, $ff, $0e
12202     09 08 11 04 
12206     13 08 0F 10 
1220a     0A 15 0A 14 
1220e     0F 10 16 0E | 	byte	$09, $08, $11, $04, $13, $08, $0f, $10, $0a, $15, $0a, $14, $0f, $10, $16, $0e
12212     18 10 14 16 
12216     10 18 12 16 
1221a     17 13 07 AF 
1221e     EF DF C3 01 | 	byte	$18, $10, $14, $16, $10, $18, $12, $16, $17, $13, $07, $af, $ef, $df, $c3, $01
12222     C4 EF EA CF 
12226     02 D2 F5 F3 
1222a     DA 08 DD FA 
1222e     FB E1 0D E7 | 	byte	$c4, $ef, $ea, $cf, $02, $d2, $f5, $f3, $da, $08, $dd, $fa, $fb, $e1, $0d, $e7
12232     FF 02 EB 0F 
12236     F3 01 08 F4 
1223a     10 FC 04 0D 
1223e     FB 10 04 06 | 	byte	$ff, $02, $eb, $0f, $f3, $01, $08, $f4, $10, $fc, $04, $0d, $fb, $10, $04, $06
12242     11 01 11 0A 
12246     08 15 07 12 
1224a     10 09 17 0C 
1224e     11 15 0C 18 | 	byte	$11, $01, $11, $0a, $08, $15, $07, $12, $10, $09, $17, $0c, $11, $15, $0c, $18
12252     11 10 18 10 
12256     16 16 11 19 
1225a     14 15 03 AE 
1225e     EA EC B8 FF | 	byte	$11, $10, $18, $10, $16, $16, $11, $19, $14, $15, $03, $ae, $ea, $ec, $b8, $ff
12262     D9 CF 04 CD 
12266     EC FC CE 02 
1226a     EE DB 0C E1 
1226e     F2 08 E0 05 | 	byte	$d9, $cf, $04, $cd, $ec, $fc, $ce, $02, $ee, $db, $0c, $e1, $f2, $08, $e0, $05
12272     FD EA 0F F4 
12276     FA 0E F3 08 
1227a     09 F7 10 03 
1227e     00 14 FF 09 | 	byte	$fd, $ea, $0f, $f4, $fa, $0e, $f3, $08, $09, $f7, $10, $03, $00, $14, $ff, $09
12282     11 00 11 0E 
12286     04 17 0A 0A 
1228a     17 08 10 16 
1228e     0A 15 14 0D | 	byte	$11, $00, $11, $0e, $04, $17, $0a, $0a, $17, $08, $10, $16, $0a, $15, $14, $0d
12292     18 13 10 19 
12296     12 14 1A 13 
1229a     16 19 F8 AF 
1229e     E9 F1 B8 F5 | 	byte	$18, $13, $10, $19, $12, $14, $1a, $13, $16, $19, $f8, $af, $e9, $f1, $b8, $f5
122a2     EB C2 FF E8 
122a6     CC 07 E5 D8 
122aa     0C E3 E6 0B 
122ae     E5 F2 0A E7 | 	byte	$eb, $c2, $ff, $e8, $cc, $07, $e5, $d8, $0c, $e3, $e6, $0b, $e5, $f2, $0a, $e7
122b2     FD 09 EB 05 
122b6     08 EF 0B 07 
122ba     F5 0F 06 FA 
122be     13 05 00 14 | 	byte	$fd, $09, $eb, $05, $08, $ef, $0b, $07, $f5, $0f, $06, $fa, $13, $05, $00, $14
122c2     05 04 17 06 
122c6     08 18 07 0C 
122ca     18 09 0F 18 
122ce     0C 12 19 0E | 	byte	$05, $04, $17, $06, $08, $18, $07, $0c, $18, $09, $0f, $18, $0c, $12, $19, $0e
122d2     13 19 10 15 
122d6     18 11 16 19 
122da     13 16 FE AC 
122de     DD 03 BA DB | 	byte	$13, $19, $10, $15, $18, $11, $16, $19, $13, $16, $fe, $ac, $dd, $03, $ba, $db
122e2     06 C6 DB 0B 
122e6     D2 DD 0D DC 
122ea     E1 0C E5 E5 
122ee     0D ED E9 0E | 	byte	$06, $c6, $db, $0b, $d2, $dd, $0d, $dc, $e1, $0c, $e5, $e5, $0d, $ed, $e9, $0e
122f2     F3 ED 0F FA 
122f6     F1 10 FF F4 
122fa     12 05 F7 12 
122fe     09 F9 12 0D | 	byte	$f3, $ed, $0f, $fa, $f1, $10, $ff, $f4, $12, $05, $f7, $12, $09, $f9, $12, $0d
12302     FD 13 12 FF 
12306     11 15 03 10 
1230a     17 08 10 19 
1230e     0B 0F 1A 0F | 	byte	$fd, $13, $12, $ff, $11, $15, $03, $10, $17, $08, $10, $19, $0b, $0f, $1a, $0f
12312     10 1A 12 10 
12316     19 15 10 19 
1231a     18 12 F9 AF 
1231e     D7 05 C4 C9 | 	byte	$10, $1a, $12, $10, $19, $15, $10, $19, $18, $12, $f9, $af, $d7, $05, $c4, $c9
12322     09 DB C6 03 
12326     F1 CA FA FF 
1232a     D5 F2 09 E1 
1232e     EC 0E EE E9 | 	byte	$09, $db, $c6, $03, $f1, $ca, $fa, $ff, $d5, $f2, $09, $e1, $ec, $0e, $ee, $e9
12332     0E FC E9 0B 
12336     08 EE 07 11 
1233a     F4 03 15 FD 
1233e     FD 17 07 FC | 	byte	$0e, $fc, $e9, $0b, $08, $ee, $07, $11, $f4, $03, $15, $fd, $fd, $17, $07, $fc
12342     14 10 FE 10 
12346     16 04 0C 19 
1234a     0B 09 18 11 
1234e     09 17 17 0C | 	byte	$14, $10, $fe, $10, $16, $04, $0c, $19, $0b, $09, $18, $11, $09, $17, $17, $0c
12352     14 1B 10 11 
12356     1B 15 10 19 
1235a     1A 12 F1 AD 
1235e     D5 07 CD C2 | 	byte	$14, $1b, $10, $11, $1b, $15, $10, $19, $1a, $12, $f1, $ad, $d5, $07, $cd, $c2
12362     01 EE C3 EF 
12366     04 D4 DE 09 
1236a     ED D8 02 02 
1236e     DE F6 0F EE | 	byte	$01, $ee, $c3, $ef, $04, $d4, $de, $09, $ed, $d8, $02, $02, $de, $f6, $0f, $ee
12372     EB 0E 01 EA 
12376     07 10 F2 FC 
1237a     15 01 F5 11 
1237e     10 F8 09 17 | 	byte	$eb, $0e, $01, $ea, $07, $10, $f2, $fc, $15, $01, $f5, $11, $10, $f8, $09, $17
12382     04 01 16 10 
12386     00 10 18 08 
1238a     0A 19 11 07 
1238e     15 19 0C 10 | 	byte	$04, $01, $16, $10, $00, $10, $18, $08, $0a, $19, $11, $07, $15, $19, $0c, $10
12392     1B 14 0C 18 
12396     1B 10 13 1C 
1239a     16 10 F1 B0 
1239e     CE 08 D9 BA | 	byte	$1b, $14, $0c, $18, $1b, $10, $13, $1c, $16, $10, $f1, $b0, $ce, $08, $d9, $ba
123a2     F4 00 CC D6 
123a6     08 EE CD F5 
123aa     09 E1 E1 0B 
123ae     FD DE FA 10 | 	byte	$f4, $00, $cc, $d6, $08, $ee, $cd, $f5, $09, $e1, $e1, $0b, $fd, $de, $fa, $10
123b2     F0 E9 0E 09 
123b6     EB FE 16 FE 
123ba     F2 10 12 F8 
123be     01 18 09 FA | 	byte	$f0, $e9, $0e, $09, $eb, $fe, $16, $fe, $f2, $10, $12, $f8, $01, $18, $09, $fa
123c2     0F 17 02 04 
123c6     17 11 03 0F 
123ca     1B 0C 07 17 
123ce     18 0A 0E 1B | 	byte	$0f, $17, $02, $04, $17, $11, $03, $0f, $1b, $0c, $07, $17, $18, $0a, $0e, $1b
123d2     14 0C 15 1C 
123d6     11 0F 1B 1A 
123da     10 13 F1 AF 
123de     C8 07 E6 B8 | 	byte	$14, $0c, $15, $1c, $11, $0f, $1b, $1a, $10, $13, $f1, $af, $c8, $07, $e6, $b8
123e2     E3 0A DC C5 
123e6     F9 06 D8 D7 
123ea     08 00 D8 EC 
123ee     11 F7 DD FE | 	byte	$e3, $0a, $dc, $c5, $f9, $06, $d8, $d7, $08, $00, $d8, $ec, $11, $f7, $dd, $fe
123f2     13 F1 E8 0D 
123f6     10 F0 F6 15 
123fa     0B F2 03 18 
123fe     05 F7 0E 18 | 	byte	$13, $f1, $e8, $0d, $10, $f0, $f6, $15, $0b, $f2, $03, $18, $05, $f7, $0e, $18
12402     03 FF 15 16 
12406     02 07 1A 13 
1240a     03 0E 1B 11 
1240e     07 14 1C 10 | 	byte	$03, $ff, $15, $16, $02, $07, $1a, $13, $03, $0e, $1b, $11, $07, $14, $1c, $10
12412     0A 19 1C 0F 
12416     0E 1A 1B 10 
1241a     12 1B EC AB 
1241e     C8 0A EC B8 | 	byte	$0a, $19, $1c, $0f, $0e, $1a, $1b, $10, $12, $1b, $ec, $ab, $c8, $0a, $ec, $b8
12422     D7 0C ED C2 
12426     E5 0E ED CC 
1242a     F1 11 ED D6 
1242e     FC 13 EE DE | 	byte	$d7, $0c, $ed, $c2, $e5, $0e, $ed, $cc, $f1, $11, $ed, $d6, $fc, $13, $ee, $de
12432     06 13 F1 E9 
12436     0D 13 F3 F3 
1243a     13 12 F7 FB 
1243e     16 12 FA 02 | 	byte	$06, $13, $f1, $e9, $0d, $13, $f3, $f3, $13, $12, $f7, $fb, $16, $12, $fa, $02
12442     19 11 FC 08 
12446     1B 11 00 0C 
1244a     1C 11 05 10 
1244e     1E 12 07 12 | 	byte	$19, $11, $fc, $08, $1b, $11, $00, $0c, $1c, $11, $05, $10, $1e, $12, $07, $12
12452     1E 13 0A 15 
12456     1E 15 0D 16 
1245a     1E 13 DD AD 
1245e     D1 07 E8 BA | 	byte	$1e, $13, $0a, $15, $1e, $15, $0d, $16, $1e, $13, $dd, $ad, $d1, $07, $e8, $ba
12462     D6 08 F2 C6 
12466     DC 0B FA D0 
1246a     E1 0E 00 D9 
1246e     E7 0F 06 E3 | 	byte	$d6, $08, $f2, $c6, $dc, $0b, $fa, $d0, $e1, $0e, $00, $d9, $e7, $0f, $06, $e3
12472     EE 11 0A EB 
12476     F3 13 0E F2 
1247a     F8 14 12 F8 
1247e     FC 15 14 FD | 	byte	$ee, $11, $0a, $eb, $f3, $13, $0e, $f2, $f8, $14, $12, $f8, $fc, $15, $14, $fd
12482     FF 16 17 02 
12486     02 17 1A 07 
1248a     04 18 1C 0C 
1248e     07 17 1C 0F | 	byte	$ff, $16, $17, $02, $02, $17, $1a, $07, $04, $18, $1c, $0c, $07, $17, $1c, $0f
12492     09 16 1E 13 
12496     0C 16 1E 16 
1249a     0E 11 E6 AF 
1249e     C3 03 FA C3 | 	byte	$09, $16, $1e, $13, $0c, $16, $1e, $16, $0e, $11, $e6, $af, $c3, $03, $fa, $c3
124a2     C3 FD 07 D6 
124a6     C6 F8 0F E8 
124aa     CD F3 13 F7 
124ae     D8 F0 12 02 | 	byte	$c3, $fd, $07, $d6, $c6, $f8, $0f, $e8, $cd, $f3, $13, $f7, $d8, $f0, $12, $02
124b2     E3 F0 12 0C 
124b6     EE F2 11 13 
124ba     F8 F3 0F 18 
124be     01 F5 0D 1B | 	byte	$e3, $f0, $12, $0c, $ee, $f2, $11, $13, $f8, $f3, $0f, $18, $01, $f5, $0d, $1b
124c2     0A FB 0A 1B 
124c6     11 FF 08 1B 
124ca     17 06 07 19 
124ce     1B 0D 08 16 | 	byte	$0a, $fb, $0a, $1b, $11, $ff, $08, $1b, $17, $06, $07, $19, $1b, $0d, $08, $16
124d2     1E 12 0A 14 
124d6     1D 17 0D 12 
124da     1C 15 D8 A8 
124de     CA 0A FA C0 | 	byte	$1e, $12, $0a, $14, $1d, $17, $0d, $12, $1c, $15, $d8, $a8, $ca, $0a, $fa, $c0
124e2     BF FC 0D DC 
124e6     C1 EC 12 F6 
124ea     D0 E2 0E 09 
124ee     E1 DE 07 14 | 	byte	$bf, $fc, $0d, $dc, $c1, $ec, $12, $f6, $d0, $e2, $0e, $09, $e1, $de, $07, $14
124f2     F4 E2 FF 17 
124f6     04 EA F8 17 
124fa     11 F5 F5 11 
124fe     1A 02 F5 0B | 	byte	$f4, $e2, $ff, $17, $04, $ea, $f8, $17, $11, $f5, $f5, $11, $1a, $02, $f5, $0b
12502     1D 0E FA 06 
12506     1B 17 03 02 
1250a     16 1D 0E 04 
1250e     11 1D 16 09 | 	byte	$1d, $0e, $fa, $06, $1b, $17, $03, $02, $16, $1d, $0e, $04, $11, $1d, $16, $09
12512     0D 1B 1C 0F 
12516     0B 17 1E 16 
1251a     0D 0C DE AF 
1251e     C4 01 00 CC | 	byte	$0d, $1b, $1c, $0f, $0b, $17, $1e, $16, $0d, $0c, $de, $af, $c4, $01, $00, $cc
12522     BC EC 0C ED 
12526     C8 DB 08 05 
1252a     DE D5 FB 11 
1252e     F7 DC EF 11 | 	byte	$bc, $ec, $0c, $ed, $c8, $db, $08, $05, $de, $d5, $fb, $11, $f7, $dc, $ef, $11
12532     0B EC E8 09 
12536     16 FE EB FF 
1253a     18 10 F5 F7 
1253e     11 1A 05 F7 | 	byte	$0b, $ec, $e8, $09, $16, $fe, $eb, $ff, $18, $10, $f5, $f7, $11, $1a, $05, $f7
12542     08 1C 13 00 
12546     02 16 1C 0B 
1254a     01 0F 1C 17 
1254e     08 09 19 1D | 	byte	$08, $1c, $13, $00, $02, $16, $1c, $0b, $01, $0f, $1c, $17, $08, $09, $19, $1d
12552     11 09 13 1D 
12556     1A 0D 0E 1A 
1255a     1E 0D CE A7 
1255e     CD 08 FE C8 | 	byte	$11, $09, $13, $1d, $1a, $0d, $0e, $1a, $1e, $0d, $ce, $a7, $cd, $08, $fe, $c8
12562     BA EC 0F F1 
12566     C8 D4 04 0D 
1256a     E7 D0 EF 11 
1256e     05 E1 E0 06 | 	byte	$ba, $ec, $0f, $f1, $c8, $d4, $04, $0d, $e7, $d0, $ef, $11, $05, $e1, $e0, $06
12572     16 FB E3 F6 
12576     16 12 F4 EC 
1257a     09 1C 0B F3 
1257e     FB 16 1A 04 | 	byte	$16, $fb, $e3, $f6, $16, $12, $f4, $ec, $09, $1c, $0b, $f3, $fb, $16, $1a, $04
12582     F7 0A 1C 15 
12586     00 01 15 1E 
1258a     0F 02 0B 1B 
1258e     1B 0C 06 13 | 	byte	$f7, $0a, $1c, $15, $00, $01, $15, $1e, $0f, $02, $0b, $1b, $1b, $0c, $06, $13
12592     1E 18 0B 0C 
12596     1A 1F 15 0C 
1259a     12 11 D9 A9 
1259e     BF FF 0A D8 | 	byte	$1e, $18, $0b, $0c, $1a, $1f, $15, $0c, $12, $11, $d9, $a9, $bf, $ff, $0a, $d8
125a2     B7 D8 0A 05 
125a6     D6 C6 EE 11 
125aa     00 D8 D7 01 
125ae     15 FA DC EA | 	byte	$b7, $d8, $0a, $05, $d6, $c6, $ee, $11, $00, $d8, $d7, $01, $15, $fa, $dc, $ea
125b2     0F 15 F6 E4 
125b6     FB 19 12 F4 
125ba     EE 09 1C 0D 
125be     F5 FA 13 1D | 	byte	$0f, $15, $f6, $e4, $fb, $19, $12, $f4, $ee, $09, $1c, $0d, $f5, $fa, $13, $1d
125c2     0A F9 05 1A 
125c6     1B 07 FE 0E 
125ca     1D 18 07 04 
125ce     15 1F 16 08 | 	byte	$0a, $f9, $05, $1a, $1b, $07, $fe, $0e, $1d, $18, $07, $04, $15, $1f, $16, $08
125d2     0B 1A 1F 14 
125d6     0A 10 1C 1E 
125da     13 FC C9 AF 
125de     D2 01 FB CF | 	byte	$0b, $1a, $1f, $14, $0a, $10, $1c, $1e, $13, $fc, $c9, $af, $d2, $01, $fb, $cf
125e2     BF E3 08 FC 
125e6     D4 CD F2 0E 
125ea     FC DA DB 00 
125ee     12 FC DF E8 | 	byte	$bf, $e3, $08, $fc, $d4, $cd, $f2, $0e, $fc, $da, $db, $00, $12, $fc, $df, $e8
125f2     0B 15 FC E6 
125f6     F5 13 16 FD 
125fa     EE 00 17 15 
125fe     FE F6 09 1A | 	byte	$0b, $15, $fc, $e6, $f5, $13, $16, $fd, $ee, $00, $17, $15, $fe, $f6, $09, $1a
12602     14 00 FC 0F 
12606     1C 13 02 03 
1260a     14 1D 13 05 
1260e     08 18 1E 13 | 	byte	$14, $00, $fc, $0f, $1c, $13, $02, $03, $14, $1d, $13, $05, $08, $18, $1e, $13
12612     08 0C 1B 1E 
12616     14 0B 11 1C 
1261a     1D 02 C5 A7 
1261e     CC 06 05 D4 | 	byte	$08, $0c, $1b, $1e, $14, $0b, $11, $1c, $1d, $02, $c5, $a7, $cc, $06, $05, $d4
12622     B8 D6 08 0A 
12626     DE C5 E1 0D 
1262a     0E E6 D1 EA 
1262e     11 10 ED DB | 	byte	$b8, $d6, $08, $0a, $de, $c5, $e1, $0d, $0e, $e6, $d1, $ea, $11, $10, $ed, $db
12632     F5 15 13 F4 
12636     E5 FD 19 14 
1263a     F9 EE 04 1A 
1263e     15 FE F5 08 | 	byte	$f5, $15, $13, $f4, $e5, $fd, $19, $14, $f9, $ee, $04, $1a, $15, $fe, $f5, $08
12642     1C 17 01 FB 
12646     0D 1E 18 05 
1264a     FF 10 1E 19 
1264e     08 04 12 1F | 	byte	$1c, $17, $01, $fb, $0d, $1e, $18, $05, $ff, $10, $1e, $19, $08, $04, $12, $1f
12652     1B 0C 08 14 
12656     1F 1C 0F 0C 
1265a     15 08 CF A9 
1265e     C1 FD 0D E3 | 	byte	$1b, $0c, $08, $14, $1f, $1c, $0f, $0c, $15, $08, $cf, $a9, $c1, $fd, $0d, $e3
12662     BB C7 FB 11 
12666     F1 CA CF FE 
1266a     15 FC D7 D9 
1266e     FF 18 05 E4 | 	byte	$bb, $c7, $fb, $11, $f1, $ca, $cf, $fe, $15, $fc, $d7, $d9, $ff, $18, $05, $e4
12672     E1 02 1A 0B 
12676     ED E9 06 1A 
1267a     11 F6 F0 08 
1267e     1C 15 FD F6 | 	byte	$e1, $02, $1a, $0b, $ed, $e9, $06, $1a, $11, $f6, $f0, $08, $1c, $15, $fd, $f6
12682     0A 1C 18 03 
12686     FA 0C 1D 1C 
1268a     08 FF 0C 1E 
1268e     1D 0D 04 0E | 	byte	$0a, $1c, $18, $03, $fa, $0c, $1d, $1c, $08, $ff, $0c, $1e, $1d, $0d, $04, $0e
12692     1D 1F 12 08 
12696     0F 1C 20 15 
1269a     0B F2 C5 B2 
1269e     D2 FE FF D9 | 	byte	$1d, $1f, $12, $08, $0f, $1c, $20, $15, $0b, $f2, $c5, $b2, $d2, $fe, $ff, $d9
126a2     C0 D4 FF 0A 
126a6     E9 CD D8 FF 
126aa     10 F7 DB DE 
126ae     00 14 02 E7 | 	byte	$c0, $d4, $ff, $0a, $e9, $cd, $d8, $ff, $10, $f7, $db, $de, $00, $14, $02, $e7
126b2     E5 01 15 0B 
126b6     F2 EB 02 17 
126ba     12 FB F1 03 
126be     18 18 03 F8 | 	byte	$e5, $01, $15, $0b, $f2, $eb, $02, $17, $12, $fb, $f1, $03, $18, $18, $03, $f8
126c2     04 18 1D 0B 
126c6     FD 05 17 1E 
126ca     11 03 06 16 
126ce     1F 16 09 07 | 	byte	$04, $18, $1d, $0b, $fd, $05, $17, $1e, $11, $03, $06, $16, $1f, $16, $09, $07
126d2     15 1E 1B 0F 
126d6     0A 14 1D 1E 
126da     11 ED BC AE 
126de     D7 05 02 D6 | 	byte	$15, $1e, $1b, $0f, $0a, $14, $1d, $1e, $11, $ed, $bc, $ae, $d7, $05, $02, $d6
126e2     BC D2 02 0E 
126e6     ED CC D3 FC 
126ea     13 FE DE D9 
126ee     F8 13 0C EE | 	byte	$bc, $d2, $02, $0e, $ed, $cc, $d3, $fc, $13, $fe, $de, $d9, $f8, $13, $0c, $ee
126f2     E0 F6 13 15 
126f6     FC EA F6 12 
126fa     1B 08 F2 F6 
126fe     0E 1D 12 FC | 	byte	$e0, $f6, $13, $15, $fc, $ea, $f6, $12, $1b, $08, $f2, $f6, $0e, $1d, $12, $fc
12702     F8 0C 1D 19 
12706     06 FC 0A 1B 
1270a     1D 0F 02 08 
1270e     18 20 16 08 | 	byte	$f8, $0c, $1d, $19, $06, $fc, $0a, $1b, $1d, $0f, $02, $08, $18, $20, $16, $08
12712     08 16 1F 1B 
12716     0E 0A 13 1E 
1271a     1C F4 B9 A6 
1271e     CF 09 0D DF | 	byte	$08, $16, $1f, $1b, $0e, $0a, $13, $1e, $1c, $f4, $b9, $a6, $cf, $09, $0d, $df
12722     B8 C4 F8 15 
12726     FD D2 C8 EB 
1272a     12 0F EB D4 
1272e     E5 0C 18 00 | 	byte	$b8, $c4, $f8, $15, $fd, $d2, $c8, $eb, $12, $0f, $eb, $d4, $e5, $0c, $18, $00
12732     E2 E4 04 1A 
12736     11 F3 E7 FE 
1273a     19 1B 02 F0 
1273e     FA 14 20 0F | 	byte	$e2, $e4, $04, $1a, $11, $f3, $e7, $fe, $19, $1b, $02, $f0, $fa, $14, $20, $0f
12742     FA F9 0E 1F 
12746     1A 06 FC 09 
1274a     1C 1F 10 02 
1274e     06 18 20 19 | 	byte	$fa, $f9, $0e, $1f, $1a, $06, $fc, $09, $1c, $1f, $10, $02, $06, $18, $20, $19
12752     0A 07 13 20 
12756     1E 12 0A 0F 
1275a     18 FB C1 A5 
1275e     C5 00 11 EC | 	byte	$0a, $07, $13, $20, $1e, $12, $0a, $0f, $18, $fb, $c1, $a5, $c5, $00, $11, $ec
12762     C0 BD EA 11 
12766     08 DF C7 DD 
1276a     08 16 FB DA 
1276e     D9 FC 17 10 | 	byte	$c0, $bd, $ea, $11, $08, $df, $c7, $dd, $08, $16, $fb, $da, $d9, $fc, $17, $10
12772     F0 DF F2 13 
12776     1C 04 EB EE 
1277a     0B 1E 14 FB 
1277e     F0 02 1A 1D | 	byte	$f0, $df, $f2, $13, $1c, $04, $eb, $ee, $0b, $1e, $14, $fb, $f0, $02, $1a, $1d
12782     0A F8 FE 13 
12786     20 17 03 FE 
1278a     0D 1D 1E 0F 
1278e     02 08 18 20 | 	byte	$0a, $f8, $fe, $13, $20, $17, $03, $fe, $0d, $1d, $1e, $0f, $02, $08, $18, $20
12792     1A 0B 06 13 
12796     1F 20 14 0A 
1279a     09 EB C0 B1 
1279e     D1 FE 05 E4 | 	byte	$1a, $0b, $06, $13, $1f, $20, $14, $0a, $09, $eb, $c0, $b1, $d1, $fe, $05, $e4
127a2     C4 C8 F0 0C 
127a6     00 DD CD E3 
127aa     07 10 F8 DC 
127ae     DD FC 14 0E | 	byte	$c4, $c8, $f0, $0c, $00, $dd, $cd, $e3, $07, $10, $f8, $dc, $dd, $fc, $14, $0e
127b2     F1 E3 F3 10 
127b6     19 06 EF EF 
127ba     07 1A 15 FF 
127be     F2 FF 15 1D | 	byte	$f1, $e3, $f3, $10, $19, $06, $ef, $ef, $07, $1a, $15, $ff, $f2, $ff, $15, $1d
127c2     0F FD FC 0E 
127c6     1D 1B 09 FF 
127ca     07 18 1F 16 
127ce     08 04 12 1E | 	byte	$0f, $fd, $fc, $0e, $1d, $1b, $09, $ff, $07, $18, $1f, $16, $08, $04, $12, $1e
127d2     1E 12 08 0D 
127d6     1A 20 1B 10 
127da     03 DF BA B6 
127de     DD 02 FF DC | 	byte	$1e, $12, $08, $0d, $1a, $20, $1b, $10, $03, $df, $ba, $b6, $dd, $02, $ff, $dc
127e2     C3 CF F6 0C 
127e6     FC DB CE E6 
127ea     09 0F F7 DC 
127ee     DF FD 14 0E | 	byte	$c3, $cf, $f6, $0c, $fc, $db, $ce, $e6, $09, $0f, $f7, $dc, $df, $fd, $14, $0e
127f2     F3 E2 F1 0E 
127f6     1A 09 F1 EE 
127fa     04 19 18 03 
127fe     F5 FC 11 1D | 	byte	$f3, $e2, $f1, $0e, $1a, $09, $f1, $ee, $04, $19, $18, $03, $f5, $fc, $11, $1d
12802     14 01 FA 08 
12806     19 1D 10 01 
1280a     03 13 1F 1B 
1280e     0D 05 0B 1B | 	byte	$14, $01, $fa, $08, $19, $1d, $10, $01, $03, $13, $1f, $1b, $0d, $05, $0b, $1b
12812     20 18 0C 09 
12816     13 1E 1F 15 
1281a     02 D7 B3 B8 
1281e     E3 07 FF D9 | 	byte	$20, $18, $0c, $09, $13, $1e, $1f, $15, $02, $d7, $b3, $b8, $e3, $07, $ff, $d9
12822     C0 CE F8 0E 
12826     FD DA CC E5 
1282a     09 13 FA DD 
1282e     DB F9 14 12 | 	byte	$c0, $ce, $f8, $0e, $fd, $da, $cc, $e5, $09, $13, $fa, $dd, $db, $f9, $14, $12
12832     F7 E3 EC 0A 
12836     1A 0F F6 EC 
1283a     FD 15 1C 0B 
1283e     F7 F6 0A 1B | 	byte	$f7, $e3, $ec, $0a, $1a, $0f, $f6, $ec, $fd, $15, $1c, $0b, $f7, $f6, $0a, $1b
12842     1A 08 FA 01 
12846     13 1F 17 06 
1284a     00 0A 1B 1F 
1284e     15 08 05 12 | 	byte	$1a, $08, $fa, $01, $13, $1f, $17, $06, $00, $0a, $1b, $1f, $15, $08, $05, $12
12852     1E 1F 14 0A 
12856     0B 18 20 1C 
1285a     05 D3 AD B4 
1285e     E5 0C 04 D9 | 	byte	$1e, $1f, $14, $0a, $0b, $18, $20, $1c, $05, $d3, $ad, $b4, $e5, $0c, $04, $d9
12862     BC C8 F6 12 
12866     05 DE C9 DC 
1286a     05 18 04 E2 
1286e     D5 EE 10 19 | 	byte	$bc, $c8, $f6, $12, $05, $de, $c9, $dc, $05, $18, $04, $e2, $d5, $ee, $10, $19
12872     01 E6 E4 FF 
12876     18 19 00 ED 
1287a     F2 0C 1D 16 
1287e     00 F2 FE 15 | 	byte	$01, $e6, $e4, $ff, $18, $19, $00, $ed, $f2, $0c, $1d, $16, $00, $f2, $fe, $15
12882     1F 14 00 F9 
12886     08 1B 21 12 
1288a     02 00 10 1F 
1288e     1F 12 05 07 | 	byte	$1f, $14, $00, $f9, $08, $1b, $21, $12, $02, $00, $10, $1f, $1f, $12, $05, $07
12892     16 20 1E 12 
12896     09 0D 1A 21 
1289a     0D D7 AA AC 
1289e     DF 0F 0E E2 | 	byte	$16, $20, $1e, $12, $09, $0d, $1a, $21, $0d, $d7, $aa, $ac, $df, $0f, $0e, $e2
128a2     BC BD EB 13 
128a6     10 E8 C9 D0 
128aa     F9 18 10 ED 
128ae     D5 E0 06 1B | 	byte	$bc, $bd, $eb, $13, $10, $e8, $c9, $d0, $f9, $18, $10, $ed, $d5, $e0, $06, $1b
128b2     10 F1 E0 F0 
128b6     10 1E 10 F5 
128ba     EA FC 17 1F 
128be     0F F7 F3 06 | 	byte	$10, $f1, $e0, $f0, $10, $1e, $10, $f5, $ea, $fc, $17, $1f, $0f, $f7, $f3, $06
128c2     1D 20 0E FB 
128c6     FB 0E 20 1E 
128ca     0E FF 03 15 
128ce     21 1E 0E 04 | 	byte	$1d, $20, $0e, $fb, $fb, $0e, $20, $1e, $0e, $ff, $03, $15, $21, $1e, $0e, $04
128d2     09 19 21 1D 
128d6     0F 08 0E 1A 
128da     0F DD AE AA 
128de     D8 0B 11 EA | 	byte	$09, $19, $21, $1d, $0f, $08, $0e, $1a, $0f, $dd, $ae, $aa, $d8, $0b, $11, $ea
128e2     C0 BA E2 0E 
128e6     13 F2 CE CB 
128ea     EF 13 15 F7 
128ee     D9 DA FB 17 | 	byte	$c0, $ba, $e2, $0e, $13, $f2, $ce, $cb, $ef, $13, $15, $f7, $d9, $da, $fb, $17
128f2     17 FC E3 E8 
128f6     05 1C 19 FF 
128fa     EB F2 0D 1F 
128fe     19 01 F3 FC | 	byte	$17, $fc, $e3, $e8, $05, $1c, $19, $ff, $eb, $f2, $0d, $1f, $19, $01, $f3, $fc
12902     14 21 19 04 
12906     F9 04 17 22 
1290a     19 07 FF 0A 
1290e     1B 22 19 0A | 	byte	$14, $21, $19, $04, $f9, $04, $17, $22, $19, $07, $ff, $0a, $1b, $22, $19, $0a
12912     04 0E 1D 22 
12916     1A 0C 08 11 
1291a     06 DA B1 B0 
1291e     DB 09 0C E8 | 	byte	$04, $0e, $1d, $22, $1a, $0c, $08, $11, $06, $da, $b1, $b0, $db, $09, $0c, $e8
12922     C3 BF E4 0B 
12926     10 F1 D1 CF 
1292a     EF 10 14 F9 
1292e     DC DC F9 15 | 	byte	$c3, $bf, $e4, $0b, $10, $f1, $d1, $cf, $ef, $10, $14, $f9, $dc, $dc, $f9, $15
12932     17 FE E7 E8 
12936     02 1A 19 03 
1293a     EE F0 09 1D 
1293e     1B 06 F5 F9 | 	byte	$17, $fe, $e7, $e8, $02, $1a, $19, $03, $ee, $f0, $09, $1d, $1b, $06, $f5, $f9
12942     0E 1F 1C 0A 
12946     FC 00 13 1F 
1294a     1C 0D 01 05 
1294e     16 21 1D 0F | 	byte	$0e, $1f, $1c, $0a, $fc, $00, $13, $1f, $1c, $0d, $01, $05, $16, $21, $1d, $0f
12952     06 0A 18 21 
12956     1E 12 0A 0B 
1295a     FB D2 B2 B9 
1295e     E3 07 04 E2 | 	byte	$06, $0a, $18, $21, $1e, $12, $0a, $0b, $fb, $d2, $b2, $b9, $e3, $07, $04, $e2
12962     C4 C6 EB 0B 
12966     0B ED D2 D4 
1296a     F3 10 10 F6 
1296e     DD DF FC 15 | 	byte	$c4, $c6, $eb, $0b, $0b, $ed, $d2, $d4, $f3, $10, $10, $f6, $dd, $df, $fc, $15
12972     16 FD E8 EA 
12976     02 19 19 04 
1297a     F0 F2 09 1C 
1297e     1B 08 F7 FA | 	byte	$16, $fd, $e8, $ea, $02, $19, $19, $04, $f0, $f2, $09, $1c, $1b, $08, $f7, $fa
12982     0C 1D 1C 0D 
12986     FE 00 10 1E 
1298a     1E 10 03 05 
1298e     13 1F 1F 13 | 	byte	$0c, $1d, $1c, $0d, $fe, $00, $10, $1e, $1e, $10, $03, $05, $13, $1f, $1f, $13
12992     07 08 15 1F 
12996     20 16 0B 09 
1299a     F3 CB B2 BF 
1299e     E9 07 FE DD | 	byte	$07, $08, $15, $1f, $20, $16, $0b, $09, $f3, $cb, $b2, $bf, $e9, $07, $fe, $dd
129a2     C4 CB F0 0B 
129a6     08 EA D2 D7 
129aa     F6 11 0F F4 
129ae     DE E1 FD 14 | 	byte	$c4, $cb, $f0, $0b, $08, $ea, $d2, $d7, $f6, $11, $0f, $f4, $de, $e1, $fd, $14
129b2     15 FD E8 E9 
129b6     03 18 19 05 
129ba     F2 F2 07 1A 
129be     1B 0A F9 F9 | 	byte	$15, $fd, $e8, $e9, $03, $18, $19, $05, $f2, $f2, $07, $1a, $1b, $0a, $f9, $f9
129c2     0B 1C 1D 0F 
129c6     00 FE 0E 1D 
129ca     1F 13 05 03 
129ce     10 1E 21 16 | 	byte	$0b, $1c, $1d, $0f, $00, $fe, $0e, $1d, $1f, $13, $05, $03, $10, $1e, $21, $16
129d2     0A 07 12 1E 
129d6     21 19 0E 06 
129da     EA C5 B2 C7 
129de     F0 07 F9 D7 | 	byte	$0a, $07, $12, $1e, $21, $19, $0e, $06, $ea, $c5, $b2, $c7, $f0, $07, $f9, $d7
129e2     C4 D0 F4 0C 
129e6     04 E7 D1 D9 
129ea     F9 11 0D F3 
129ee     DD E2 FF 14 | 	byte	$c4, $d0, $f4, $0c, $04, $e7, $d1, $d9, $f9, $11, $0d, $f3, $dd, $e2, $ff, $14
129f2     14 FD E9 EB 
129f6     02 17 19 05 
129fa     F3 F2 06 19 
129fe     1B 0C FA F9 | 	byte	$14, $fd, $e9, $eb, $02, $17, $19, $05, $f3, $f2, $06, $19, $1b, $0c, $fa, $f9
12a02     09 1A 1E 11 
12a06     01 FE 0B 1B 
12a0a     20 15 06 02 
12a0e     0D 1B 20 18 | 	byte	$09, $1a, $1e, $11, $01, $fe, $0b, $1b, $20, $15, $06, $02, $0d, $1b, $20, $18
12a12     0C 07 0F 1B 
12a16     21 1C 11 03 
12a1a     E3 BF B3 CE 
12a1e     F7 07 F4 D3 | 	byte	$0c, $07, $0f, $1b, $21, $1c, $11, $03, $e3, $bf, $b3, $ce, $f7, $07, $f4, $d3
12a22     C3 D4 F9 0D 
12a26     02 E3 D0 DB 
12a2a     FB 12 0D F1 
12a2e     DC E3 FF 15 | 	byte	$c3, $d4, $f9, $0d, $02, $e3, $d0, $db, $fb, $12, $0d, $f1, $dc, $e3, $ff, $15
12a32     13 FD E9 EB 
12a36     02 17 19 06 
12a3a     F3 F2 05 19 
12a3e     1C 0E FB F7 | 	byte	$13, $fd, $e9, $eb, $02, $17, $19, $06, $f3, $f2, $05, $19, $1c, $0e, $fb, $f7
12a42     07 19 1F 13 
12a46     03 FD 09 1A 
12a4a     1F 19 08 02 
12a4e     0A 19 21 1B | 	byte	$07, $19, $1f, $13, $03, $fd, $09, $1a, $1f, $19, $08, $02, $0a, $19, $21, $1b
12a52     0F 07 0C 19 
12a56     20 1E 13 02 
12a5a     DD B9 B3 D3 
12a5e     FC 09 F1 CF | 	byte	$0f, $07, $0c, $19, $20, $1e, $13, $02, $dd, $b9, $b3, $d3, $fc, $09, $f1, $cf
12a62     C1 D6 FC 0F 
12a66     01 E1 CF DB 
12a6a     FE 14 0D F1 
12a6e     DC E3 FF 15 | 	byte	$c1, $d6, $fc, $0f, $01, $e1, $cf, $db, $fe, $14, $0d, $f1, $dc, $e3, $ff, $15
12a72     14 FF E9 E9 
12a76     01 17 1B 08 
12a7a     F4 F0 03 18 
12a7e     1E 10 FD F6 | 	byte	$14, $ff, $e9, $e9, $01, $17, $1b, $08, $f4, $f0, $03, $18, $1e, $10, $fd, $f6
12a82     04 17 1F 16 
12a86     05 FD 06 18 
12a8a     20 1C 0D 02 
12a8e     07 16 20 1E | 	byte	$04, $17, $1f, $16, $05, $fd, $06, $18, $20, $1c, $0d, $02, $07, $16, $20, $1e
12a92     12 09 0A 15 
12a96     1F 20 17 00 
12a9a     D7 B4 B2 D7 
12a9e     01 0B F0 CB | 	byte	$12, $09, $0a, $15, $1f, $20, $17, $00, $d7, $b4, $b2, $d7, $01, $0b, $f0, $cb
12aa2     BE D6 FE 11 
12aa6     02 E1 CD DA 
12aaa     FE 14 0F F2 
12aae     DC E0 FD 16 | 	byte	$be, $d6, $fe, $11, $02, $e1, $cd, $da, $fe, $14, $0f, $f2, $dc, $e0, $fd, $16
12ab2     17 01 EA E8 
12ab6     FE 16 1D 0D 
12aba     F6 EE FE 15 
12abe     1E 14 00 F6 | 	byte	$17, $01, $ea, $e8, $fe, $16, $1d, $0d, $f6, $ee, $fe, $15, $1e, $14, $00, $f6
12ac2     00 14 20 1A 
12ac6     09 FC 02 13 
12aca     20 1F 10 04 
12ace     04 12 1F 21 | 	byte	$00, $14, $20, $1a, $09, $fc, $02, $13, $20, $1f, $10, $04, $04, $12, $1f, $21
12ad2     17 0B 07 10 
12ad6     1C 22 1B 01 
12ada     D2 AE B0 D9 
12ade     06 0F F0 C9 | 	byte	$17, $0b, $07, $10, $1c, $22, $1b, $01, $d2, $ae, $b0, $d9, $06, $0f, $f0, $c9
12ae2     BC D4 00 15 
12ae6     05 E2 CC D7 
12aea     FB 16 12 F6 
12aee     DC DD F9 15 | 	byte	$bc, $d4, $00, $15, $05, $e2, $cc, $d7, $fb, $16, $12, $f6, $dc, $dd, $f9, $15
12af2     1A 06 EC E4 
12af6     F9 14 1E 11 
12afa     F9 ED F9 12 
12afe     1F 19 05 F5 | 	byte	$1a, $06, $ec, $e4, $f9, $14, $1e, $11, $f9, $ed, $f9, $12, $1f, $19, $05, $f5
12b02     FB 0F 20 1E 
12b06     0F FF FE 0D 
12b0a     1D 21 16 06 
12b0e     01 0C 1C 22 | 	byte	$fb, $0f, $20, $1e, $0f, $ff, $fe, $0d, $1d, $21, $16, $06, $01, $0c, $1c, $22
12b12     1C 0E 07 0C 
12b16     19 21 1F 04 
12b1a     D1 AB AC D8 
12b1e     09 12 F3 C9 | 	byte	$1c, $0e, $07, $0c, $19, $21, $1f, $04, $d1, $ab, $ac, $d8, $09, $12, $f3, $c9
12b22     B8 D1 FE 16 
12b26     09 E5 CC D2 
12b2a     F7 15 16 FA 
12b2e     DE DA F4 13 | 	byte	$b8, $d1, $fe, $16, $09, $e5, $cc, $d2, $f7, $15, $16, $fa, $de, $da, $f4, $13
12b32     1D 0C EF E3 
12b36     F3 0F 1F 17 
12b3a     FE ED F3 0C 
12b3e     1F 1E 0B F7 | 	byte	$1d, $0c, $ef, $e3, $f3, $0f, $1f, $17, $fe, $ed, $f3, $0c, $1f, $1e, $0b, $f7
12b42     F7 09 1D 21 
12b46     14 02 FB 07 
12b4a     1A 22 1C 0C 
12b4e     02 07 17 22 | 	byte	$f7, $09, $1d, $21, $14, $02, $fb, $07, $1a, $22, $1c, $0c, $02, $07, $17, $22
12b52     20 13 08 08 
12b56     13 20 22 06 
12b5a     D1 A9 A9 D6 
12b5e     09 15 F7 CC | 	byte	$20, $13, $08, $08, $13, $20, $22, $06, $d1, $a9, $a9, $d6, $09, $15, $f7, $cc
12b62     B7 CC FA 17 
12b66     0D E9 CC CF 
12b6a     F2 14 1A 01 
12b6e     E1 D7 ED 0F | 	byte	$b7, $cc, $fa, $17, $0d, $e9, $cc, $cf, $f2, $14, $1a, $01, $e1, $d7, $ed, $0f
12b72     1E 11 F4 E3 
12b76     ED 0B 1E 1C 
12b7a     05 EF EF 05 
12b7e     1C 21 12 FC | 	byte	$1e, $11, $f4, $e3, $ed, $0b, $1e, $1c, $05, $ef, $ef, $05, $1c, $21, $12, $fc
12b82     F4 02 19 23 
12b86     1A 08 FC 02 
12b8a     14 22 20 11 
12b8e     04 03 12 1F | 	byte	$f4, $02, $19, $23, $1a, $08, $fc, $02, $14, $22, $20, $11, $04, $03, $12, $1f
12b92     24 19 0B 06 
12b96     0E 1C 21 08 
12b9a     D2 A9 A9 D4 
12b9e     08 17 FA CE | 	byte	$24, $19, $0b, $06, $0e, $1c, $21, $08, $d2, $a9, $a9, $d4, $08, $17, $fa, $ce
12ba2     B8 CA F8 16 
12ba6     10 EE CF CC 
12baa     ED 11 1B 05 
12bae     E4 D7 E8 0B | 	byte	$b8, $ca, $f8, $16, $10, $ee, $cf, $cc, $ed, $11, $1b, $05, $e4, $d7, $e8, $0b
12bb2     1E 15 F9 E3 
12bb6     E9 05 1D 1F 
12bba     0A F3 ED 00 
12bbe     18 22 16 00 | 	byte	$1e, $15, $f9, $e3, $e9, $05, $1d, $1f, $0a, $f3, $ed, $00, $18, $22, $16, $00
12bc2     F4 FE 14 22 
12bc6     1F 0C FD FF 
12bca     10 20 23 16 
12bce     07 01 0C 1C | 	byte	$f4, $fe, $14, $22, $1f, $0c, $fd, $ff, $10, $20, $23, $16, $07, $01, $0c, $1c
12bd2     23 1D 10 06 
12bd6     0A 18 1F 06 
12bda     D1 AA AA D5 
12bde     08 16 F9 CF | 	byte	$23, $1d, $10, $06, $0a, $18, $1f, $06, $d1, $aa, $aa, $d5, $08, $16, $f9, $cf
12be2     B9 CB F8 16 
12be6     11 EF CF CC 
12bea     EC 11 1C 07 
12bee     E6 D7 E7 0A | 	byte	$b9, $cb, $f8, $16, $11, $ef, $cf, $cc, $ec, $11, $1c, $07, $e6, $d7, $e7, $0a
12bf2     1E 18 FC E5 
12bf6     E7 02 1B 20 
12bfa     0D F5 ED FE 
12bfe     16 22 19 03 | 	byte	$1e, $18, $fc, $e5, $e7, $02, $1b, $20, $0d, $f5, $ed, $fe, $16, $22, $19, $03
12c02     F5 FC 11 21 
12c06     20 10 FE FD 
12c0a     0C 1E 23 19 
12c0e     09 01 09 19 | 	byte	$f5, $fc, $11, $21, $20, $10, $fe, $fd, $0c, $1e, $23, $19, $09, $01, $09, $19
12c12     23 20 13 08 
12c16     08 14 1C 01 
12c1a     CF AA AD D8 
12c1e     08 15 F8 CE | 	byte	$23, $20, $13, $08, $08, $14, $1c, $01, $cf, $aa, $ad, $d8, $08, $15, $f8, $ce
12c22     B9 CD F9 15 
12c26     10 EE D0 CD 
12c2a     ED 10 1B 08 
12c2e     E7 D7 E7 08 | 	byte	$b9, $cd, $f9, $15, $10, $ee, $d0, $cd, $ed, $10, $1b, $08, $e7, $d7, $e7, $08
12c32     1D 17 FD E6 
12c36     E7 01 1A 20 
12c3a     0E F6 EC FC 
12c3e     15 21 1A 05 | 	byte	$1d, $17, $fd, $e6, $e7, $01, $1a, $20, $0e, $f6, $ec, $fc, $15, $21, $1a, $05
12c42     F6 FB 0F 20 
12c46     21 12 00 FC 
12c4a     09 1B 24 1C 
12c4e     0C 01 07 17 | 	byte	$f6, $fb, $0f, $20, $21, $12, $00, $fc, $09, $1b, $24, $1c, $0c, $01, $07, $17
12c52     22 21 15 0A 
12c56     08 12 17 FB 
12c5a     CB AB B1 DD 
12c5e     0A 12 F4 CC | 	byte	$22, $21, $15, $0a, $08, $12, $17, $fb, $cb, $ab, $b1, $dd, $0a, $12, $f4, $cc
12c62     BB D0 FC 16 
12c66     0E EC CF CE 
12c6a     EE 11 1B 06 
12c6e     E7 D8 E9 09 | 	byte	$bb, $d0, $fc, $16, $0e, $ec, $cf, $ce, $ee, $11, $1b, $06, $e7, $d8, $e9, $09
12c72     1D 16 FD E8 
12c76     E9 02 19 1F 
12c7a     0E F7 ED FC 
12c7e     14 21 1A 06 | 	byte	$1d, $16, $fd, $e8, $e9, $02, $19, $1f, $0e, $f7, $ed, $fc, $14, $21, $1a, $06
12c82     F7 FB 0E 1F 
12c86     22 14 01 FD 
12c8a     09 1A 24 1D 
12c8e     0D 02 07 16 | 	byte	$f7, $fb, $0e, $1f, $22, $14, $01, $fd, $09, $1a, $24, $1d, $0d, $02, $07, $16
12c92     21 22 17 0B 
12c96     07 11 14 F6 
12c9a     C7 AC B5 E2 
12c9e     0C 10 F0 CA | 	byte	$21, $22, $17, $0b, $07, $11, $14, $f6, $c7, $ac, $b5, $e2, $0c, $10, $f0, $ca
12ca2     BD D3 FF 15 
12ca6     0C EA CF D1 
12caa     F1 12 19 04 
12cae     E5 D9 EB 0B | 	byte	$bd, $d3, $ff, $15, $0c, $ea, $cf, $d1, $f1, $12, $19, $04, $e5, $d9, $eb, $0b
12cb2     1C 15 FC E7 
12cb6     EA 03 1A 1F 
12cba     0E F7 EE FD 
12cbe     15 21 1A 05 | 	byte	$1c, $15, $fc, $e7, $ea, $03, $1a, $1f, $0e, $f7, $ee, $fd, $15, $21, $1a, $05
12cc2     F7 FA 0E 20 
12cc6     22 13 02 FC 
12cca     08 1A 23 1D 
12cce     0E 04 06 15 | 	byte	$f7, $fa, $0e, $20, $22, $13, $02, $fc, $08, $1a, $23, $1d, $0e, $04, $06, $15
12cd2     20 22 18 0C 
12cd6     07 0F 10 F0 
12cda     C4 AC B9 E8 
12cde     0D 0D EC C8 | 	byte	$20, $22, $18, $0c, $07, $0f, $10, $f0, $c4, $ac, $b9, $e8, $0d, $0d, $ec, $c8
12ce2     BD D7 02 16 
12ce6     08 E7 CF D4 
12cea     F5 13 18 02 
12cee     E5 DA ED 0C | 	byte	$bd, $d7, $02, $16, $08, $e7, $cf, $d4, $f5, $13, $18, $02, $e5, $da, $ed, $0c
12cf2     1D 14 FB E8 
12cf6     EB 04 1A 1F 
12cfa     0D F7 EF FD 
12cfe     15 21 1A 06 | 	byte	$1d, $14, $fb, $e8, $eb, $04, $1a, $1f, $0d, $f7, $ef, $fd, $15, $21, $1a, $06
12d02     F7 FB 0E 1E 
12d06     21 14 03 FD 
12d0a     08 1A 22 1E 
12d0e     0F 04 06 14 | 	byte	$f7, $fb, $0e, $1e, $21, $14, $03, $fd, $08, $1a, $22, $1e, $0f, $04, $06, $14
12d12     20 23 18 0C 
12d16     00 00 00 00 
12d1a     AB 5E 9C 4F 
12d1e     D0 33 D4 4D | 	byte	$20, $23, $18, $0c, $00, $00, $00, $00, $ab, $5e, $9c, $4f, $d0, $33, $d4, $4d
12d22     A0 61 BD 2D 
12d26     DC 34 C0 1A 
12d2a     E5 38 D5 FD 
12d2e     0F D3 2A C3 | 	byte	$a0, $61, $bd, $2d, $dc, $34, $c0, $1a, $e5, $38, $d5, $fd, $0f, $d3, $2a, $c3
12d32     37 CC 49 B0 
12d36     28 F2 E5 34 
12d3a     C8 3E DB F3 
12d3e     0D 30 B2 40 | 	byte	$37, $cc, $49, $b0, $28, $f2, $e5, $34, $c8, $3e, $db, $f3, $0d, $30, $b2, $40
12d42     D9 15 0B FE 
12d46     FE DF 1B AD 
12d4a     3E C4 0B 0E 
12d4e     FD 37 B3 5E | 	byte	$d9, $15, $0b, $fe, $fe, $df, $1b, $ad, $3e, $c4, $0b, $0e, $fd, $37, $b3, $5e
12d52     AD 4D CA 38 
12d56     CB 3C DF 01 
12d5a     20 F8 DD 42 
12d5e     D5 2F CB 47 | 	byte	$ad, $4d, $ca, $38, $cb, $3c, $df, $01, $20, $f8, $dd, $42, $d5, $2f, $cb, $47
12d62     B2 5D 9C 48 
12d66     C9 0D FB E5 
12d6a     29 D0 36 D3 
12d6e     30 B0 49 C7 | 	byte	$b2, $5d, $9c, $48, $c9, $0d, $fb, $e5, $29, $d0, $36, $d3, $30, $b0, $49, $c7
12d72     28 D0 23 D5 
12d76     22 F0 EB 29 
12d7a     D8 1B 05 DD 
12d7e     2C CC 39 D3 | 	byte	$28, $d0, $23, $d5, $22, $f0, $eb, $29, $d8, $1b, $05, $dd, $2c, $cc, $39, $d3
12d82     2B D9 41 A2 
12d86     64 AB 2C FB 
12d8a     D8 23 E0 11 
12d8e     F5 17 09 E1 | 	byte	$2b, $d9, $41, $a2, $64, $ab, $2c, $fb, $d8, $23, $e0, $11, $f5, $17, $09, $e1
12d92     2C E1 0B FD 
12d96     EF 17 B6 44 
12d9a     E3 F7 20 D8 
12d9e     1B 0B EC 03 | 	byte	$2c, $e1, $0b, $fd, $ef, $17, $b6, $44, $e3, $f7, $20, $d8, $1b, $0b, $ec, $03
12da2     13 DF 25 CB 
12da6     38 BE 40 B5 
12daa     3D C5 52 C3 
12dae     29 D6 2F C2 | 	byte	$13, $df, $25, $cb, $38, $be, $40, $b5, $3d, $c5, $52, $c3, $29, $d6, $2f, $c2
12db2     43 D2 1A F2 
12db6     10 F0 08 0A 
12dba     09 F0 FF 23 
12dbe     C8 45 BD 42 | 	byte	$43, $d2, $1a, $f2, $10, $f0, $08, $0a, $09, $f0, $ff, $23, $c8, $45, $bd, $42
12dc2     D7 2A D1 41 
12dc6     DE 06 0B F6 
12dca     13 F8 14 EB 
12dce     25 DD 23 EF | 	byte	$d7, $2a, $d1, $41, $de, $06, $0b, $f6, $13, $f8, $14, $eb, $25, $dd, $23, $ef
12dd2     09 E1 22 DC 
12dd6     30 CD 31 F7 
12dda     F5 07 1A DB 
12dde     12 07 F5 10 | 	byte	$09, $e1, $22, $dc, $30, $cd, $31, $f7, $f5, $07, $1a, $db, $12, $07, $f5, $10
12de2     F3 12 F1 1F 
12de6     FD EC 34 CF 
12dea     2A E4 2F CF 
12dee     2E F2 FF 06 | 	byte	$f3, $12, $f1, $1f, $fd, $ec, $34, $cf, $2a, $e4, $2f, $cf, $2e, $f2, $ff, $06
12df2     16 F8 0E FB 
12df6     07 25 D8 25 
12dfa     E8 12 FA 0B 
12dfe     E6 25 D0 3C | 	byte	$16, $f8, $0e, $fb, $07, $25, $d8, $25, $e8, $12, $fa, $0b, $e6, $25, $d0, $3c
12e02     C4 2E E0 1B 
12e06     EC 0B 05 F9 
12e0a     1A D7 20 FD 
12e0e     01 04 DC 35 | 	byte	$c4, $2e, $e0, $1b, $ec, $0b, $05, $f9, $1a, $d7, $20, $fd, $01, $04, $dc, $35
12e12     DF 16 E5 2C 
12e16     BE 3C DF 1E 
12e1a     EE 10 04 06 
12e1e     FD 0F F1 0B | 	byte	$df, $16, $e5, $2c, $be, $3c, $df, $1e, $ee, $10, $04, $06, $fd, $0f, $f1, $0b
12e22     F2 17 D8 2C 
12e26     F3 F5 1A DF 
12e2a     28 E9 FD 16 
12e2e     EA 02 08 00 | 	byte	$f2, $17, $d8, $2c, $f3, $f5, $1a, $df, $28, $e9, $fd, $16, $ea, $02, $08, $00
12e32     FB 02 01 10 
12e36     E2 20 D8 36 
12e3a     DE 17 F1 0D 
12e3e     FE 04 FC 18 | 	byte	$fb, $02, $01, $10, $e2, $20, $d8, $36, $de, $17, $f1, $0d, $fe, $04, $fc, $18
12e42     E9 17 EE 09 
12e46     1B E8 21 E0 
12e4a     29 F2 23 D9 
12e4e     2C CC 46 C0 | 	byte	$e9, $17, $ee, $09, $1b, $e8, $21, $e0, $29, $f2, $23, $d9, $2c, $cc, $46, $c0
12e52     35 E8 0B 0B 
12e56     EB 2A E5 17 
12e5a     F2 FD 22 E3 
12e5e     14 09 E6 FF | 	byte	$35, $e8, $0b, $0b, $eb, $2a, $e5, $17, $f2, $fd, $22, $e3, $14, $09, $e6, $ff
12e62     04 FC 0B 0D 
12e66     D6 46 C8 1C 
12e6a     08 0D E0 46 
12e6e     C8 22 E2 F7 | 	byte	$04, $fc, $0b, $0d, $d6, $46, $c8, $1c, $08, $0d, $e0, $46, $c8, $22, $e2, $f7
12e72     2A D8 2F DD 
12e76     27 ED 24 C9 
12e7a     3B DF F6 25 
12e7e     E3 17 E8 1F | 	byte	$2a, $d8, $2f, $dd, $27, $ed, $24, $c9, $3b, $df, $f6, $25, $e3, $17, $e8, $1f
12e82     E9 07 F3 08 
12e86     FD F0 1E D4 
12e8a     28 E5 1F E5 
12e8e     11 F8 F0 2D | 	byte	$e9, $07, $f3, $08, $fd, $f0, $1e, $d4, $28, $e5, $1f, $e5, $11, $f8, $f0, $2d
12e92     C0 44 C4 35 
12e96     DC 2A D4 36 
12e9a     D0 2B DE FD 
12e9e     12 FB F3 02 | 	byte	$c0, $44, $c4, $35, $dc, $2a, $d4, $36, $d0, $2b, $de, $fd, $12, $fb, $f3, $02
12ea2     F5 11 FB E9 
12ea6     20 D8 34 D3 
12eaa     2A DC 29 E6 
12eae     10 FA F7 0B | 	byte	$f5, $11, $fb, $e9, $20, $d8, $34, $d3, $2a, $dc, $29, $e6, $10, $fa, $f7, $0b
12eb2     13 D3 36 D1 
12eb6     16 FD F1 16 
12eba     11 C4 4B C2 
12ebe     43 AF 5A BD | 	byte	$13, $d3, $36, $d1, $16, $fd, $f1, $16, $11, $c4, $4b, $c2, $43, $af, $5a, $bd
12ec2     20 06 E3 23 
12ec6     E6 07 FA 02 
12eca     FC 10 F6 F8 
12ece     1B D6 38 CF | 	byte	$20, $06, $e3, $23, $e6, $07, $fa, $02, $fc, $10, $f6, $f8, $1b, $d6, $38, $cf
12ed2     18 FD 02 18 
12ed6     D0 40 CC 21 
12eda     F3 02 FF 1A 
12ede     F0 00 10 E8 | 	byte	$18, $fd, $02, $18, $d0, $40, $cc, $21, $f3, $02, $ff, $1a, $f0, $00, $10, $e8
12ee2     21 EB 20 E0 
12ee6     29 D3 25 E5 
12eea     0F FB 10 E9 
12eee     27 D2 1F DD | 	byte	$21, $eb, $20, $e0, $29, $d3, $25, $e5, $0f, $fb, $10, $e9, $27, $d2, $1f, $dd
12ef2     1F F5 01 FB 
12ef6     1B EC FA 1E 
12efa     E6 09 FD 0B 
12efe     F1 0E F7 0D | 	byte	$1f, $f5, $01, $fb, $1b, $ec, $fa, $1e, $e6, $09, $fd, $0b, $f1, $0e, $f7, $0d
12f02     EE 1C F1 0E 
12f06     05 F5 20 E3 
12f0a     21 E8 08 06 
12f0e     01 EA 20 F0 | 	byte	$ee, $1c, $f1, $0e, $05, $f5, $20, $e3, $21, $e8, $08, $06, $01, $ea, $20, $f0
12f12     04 0D F9 09 
12f16     E6 2C D7 20 
12f1a     EF 0D 05 F3 
12f1e     07 FC 17 D4 | 	byte	$04, $0d, $f9, $09, $e6, $2c, $d7, $20, $ef, $0d, $05, $f3, $07, $fc, $17, $d4
12f22     3B C8 14 0A 
12f26     F0 0A 00 00 
12f2a     01 06 F1 22 
12f2e     DC 18 FE 04 | 	byte	$3b, $c8, $14, $0a, $f0, $0a, $00, $00, $01, $06, $f1, $22, $dc, $18, $fe, $04
12f32     F1 27 CA 3E 
12f36     D0 25 E2 27 
12f3a     DC 21 E9 1C 
12f3e     DE 2B E3 09 | 	byte	$f1, $27, $ca, $3e, $d0, $25, $e2, $27, $dc, $21, $e9, $1c, $de, $2b, $e3, $09
12f42     07 F2 17 F0 
12f46     1C D9 2D E3 
12f4a     11 FD 09 F9 
12f4e     16 DF 2C E0 | 	byte	$07, $f2, $17, $f0, $1c, $d9, $2d, $e3, $11, $fd, $09, $f9, $16, $df, $2c, $e0
12f52     1C FC 06 0A 
12f56     F1 05 04 06 
12f5a     F5 18 F6 08 
12f5e     FC 10 F1 21 | 	byte	$1c, $fc, $06, $0a, $f1, $05, $04, $06, $f5, $18, $f6, $08, $fc, $10, $f1, $21
12f62     E3 15 F9 00 
12f66     09 FD FF 09 
12f6a     ED 1A E8 1E 
12f6e     E4 21 E1 0E | 	byte	$e3, $15, $f9, $00, $09, $fd, $ff, $09, $ed, $1a, $e8, $1e, $e4, $21, $e1, $0e
12f72     FE F1 14 07 
12f76     E6 25 EA 06 
12f7a     09 00 FC 05 
12f7e     00 F2 1D EE | 	byte	$fe, $f1, $14, $07, $e6, $25, $ea, $06, $09, $00, $fc, $05, $00, $f2, $1d, $ee
12f82     18 E8 27 DE 
12f86     1A EF 17 DC 
12f8a     29 E0 10 FD 
12f8e     FA 10 EF 17 | 	byte	$18, $e8, $27, $de, $1a, $ef, $17, $dc, $29, $e0, $10, $fd, $fa, $10, $ef, $17
12f92     EF 12 EF 1A 
12f96     D9 30 DC 13 
12f9a     EB 2B C7 43 
12f9e     D2 1C EE 13 | 	byte	$ef, $12, $ef, $1a, $d9, $30, $dc, $13, $eb, $2b, $c7, $43, $d2, $1c, $ee, $13
12fa2     E5 17 E9 18 
12fa6     F0 07 02 01 
12faa     F3 13 F8 04 
12fae     0D ED 14 ED | 	byte	$e5, $17, $e9, $18, $f0, $07, $02, $01, $f3, $13, $f8, $04, $0d, $ed, $14, $ed
12fb2     0A E5 27 DF 
12fb6     0F FB 08 F7 
12fba     1C E5 17 F1 
12fbe     FA 11 EE 17 | 	byte	$0a, $e5, $27, $df, $0f, $fb, $08, $f7, $1c, $e5, $17, $f1, $fa, $11, $ee, $17
12fc2     FD F3 20 DF 
12fc6     24 DF 20 ED 
12fca     FC 17 EE 16 
12fce     E4 17 E4 21 | 	byte	$fd, $f3, $20, $df, $24, $df, $20, $ed, $fc, $17, $ee, $16, $e4, $17, $e4, $21
12fd2     E9 07 06 FE 
12fd6     FA 11 E9 11 
12fda     01 F8 09 01 
12fde     FD 0D 07 ED | 	byte	$e9, $07, $06, $fe, $fa, $11, $e9, $11, $01, $f8, $09, $01, $fd, $0d, $07, $ed
12fe2     15 ED 1B E1 
12fe6     28 DD 25 D5 
12fea     31 DC 1C EC 
12fee     18 E9 18 EB | 	byte	$15, $ed, $1b, $e1, $28, $dd, $25, $d5, $31, $dc, $1c, $ec, $18, $e9, $18, $eb
12ff2     12 FA 05 07 
12ff6     F5 10 E9 1B 
12ffa     F0 FB 17 DD 
12ffe     2B D3 28 E3 | 	byte	$12, $fa, $05, $07, $f5, $10, $e9, $1b, $f0, $fb, $17, $dd, $2b, $d3, $28, $e3
13002     16 F9 FC 08 
13006     01 00 F9 13 
1300a     EF 0F F2 04 
1300e     FD 02 03 FC | 	byte	$16, $f9, $fc, $08, $01, $00, $f9, $13, $ef, $0f, $f2, $04, $fd, $02, $03, $fc
13012     0D EF 1C E4 
13016     21 E5 15 F0 
1301a     17 E9 15 F5 
1301e     01 0B EF 13 | 	byte	$0d, $ef, $1c, $e4, $21, $e5, $15, $f0, $17, $e9, $15, $f5, $01, $0b, $ef, $13
13022     F7 00 0A E5 
13026     24 D9 20 FD 
1302a     F6 08 FA 0E 
1302e     EE 16 EA 1C | 	byte	$f7, $00, $0a, $e5, $24, $d9, $20, $fd, $f6, $08, $fa, $0e, $ee, $16, $ea, $1c
13032     E8 1E E4 22 
13036     DD 2B CF 37 
1303a     CB 2C E4 11 
1303e     FB F5 1F D1 | 	byte	$e8, $1e, $e4, $22, $dd, $2b, $cf, $37, $cb, $2c, $e4, $11, $fb, $f5, $1f, $d1
13042     30 DC 27 DD 
13046     22 E9 06 0F 
1304a     E6 1C E8 17 
1304e     F2 04 FE 04 | 	byte	$30, $dc, $27, $dd, $22, $e9, $06, $0f, $e6, $1c, $e8, $17, $f2, $04, $fe, $04
13052     FC 09 FF F7 
13056     16 EA 17 F1 
1305a     0A 02 FD 01 
1305e     05 04 F1 22 | 	byte	$fc, $09, $ff, $f7, $16, $ea, $17, $f1, $0a, $02, $fd, $01, $05, $04, $f1, $22
13062     D7 30 D7 22 
13066     F0 0F F6 12 
1306a     ED 14 F3 07 
1306e     04 00 F9 16 | 	byte	$d7, $30, $d7, $22, $f0, $0f, $f6, $12, $ed, $14, $f3, $07, $04, $00, $f9, $16
13072     E1 27 DF 22 
13076     E3 0E FE F7 
1307a     14 EF 15 ED 
1307e     1A F1 FE 0D | 	byte	$e1, $27, $df, $22, $e3, $0e, $fe, $f7, $14, $ef, $15, $ed, $1a, $f1, $fe, $0d
13082     F8 FE 08 F2 
13086     10 F8 02 0D 
1308a     EE 15 F0 0D 
1308e     F9 01 02 06 | 	byte	$f8, $fe, $08, $f2, $10, $f8, $02, $0d, $ee, $15, $f0, $0d, $f9, $01, $02, $06
13092     00 06 F9 10 
13096     F6 15 F3 0B 
1309a     FE FD 00 03 
1309e     03 EE 18 E9 | 	byte	$00, $06, $f9, $10, $f6, $15, $f3, $0b, $fe, $fd, $00, $03, $03, $ee, $18, $e9
130a2     18 EA 15 F1 
130a6     09 F8 0E F2 
130aa     08 01 02 01 
130ae     03 FC 06 FC | 	byte	$18, $ea, $15, $f1, $09, $f8, $0e, $f2, $08, $01, $02, $01, $03, $fc, $06, $fc
130b2     02 01 00 01 
130b6     FF 00 00 01 
130ba     00 FC 06 F6 
130be     12 EB 11 F8 | 	byte	$02, $01, $00, $01, $ff, $00, $00, $01, $00, $fc, $06, $f6, $12, $eb, $11, $f8
130c2     05 F9 0A F6 
130c6     07 FC 07 FA 
130ca     03 06 FD FE 
130ce     07 FC FC 0D | 	byte	$05, $f9, $0a, $f6, $07, $fc, $07, $fa, $03, $06, $fd, $fe, $07, $fc, $fc, $0d
130d2     F1 0F F2 10 
130d6     F1 10 F6 00 
130da     06 F8 06 FD 
130de     00 F8 09 FC | 	byte	$f1, $0f, $f2, $10, $f1, $10, $f6, $00, $06, $f8, $06, $fd, $00, $f8, $09, $fc
130e2     05 F8 08 F8 
130e6     05 00 FC 09 
130ea     F1 12 EB 15 
130ee     F3 04 04 F9 | 	byte	$05, $f8, $08, $f8, $05, $00, $fc, $09, $f1, $12, $eb, $15, $f3, $04, $04, $f9
130f2     13 E9 18 ED 
130f6     0F F8 07 FC 
130fa     07 FF F8 0D 
130fe     F9 04 FF 04 | 	byte	$13, $e9, $18, $ed, $0f, $f8, $07, $fc, $07, $ff, $f8, $0d, $f9, $04, $ff, $04
13102     F7 0F F6 05 
13106     FF 03 01 00 
1310a     FE 04 FE 01 
1310e     FD 05 FF 00 | 	byte	$f7, $0f, $f6, $05, $ff, $03, $01, $00, $fe, $04, $fe, $01, $fd, $05, $ff, $00
13112     04 F9 10 F1 
13116     0E F2 15 EA 
1311a     13 ED 13 ED 
1311e     0B F6 0D EF | 	byte	$04, $f9, $10, $f1, $0e, $f2, $15, $ea, $13, $ed, $13, $ed, $0b, $f6, $0d, $ef
13122     0E F3 0E EF 
13126     03 03 FA 06 
1312a     FC 01 00 03 
1312e     F8 09 FB 04 | 	byte	$0e, $f3, $0e, $ef, $03, $03, $fa, $06, $fc, $01, $00, $03, $f8, $09, $fb, $04
13132     F2 15 EF 0B 
13136     F9 02 07 F3 
1313a     11 F2 0A FF 
1313e     F8 09 F9 FF | 	byte	$f2, $15, $ef, $0b, $f9, $02, $07, $f3, $11, $f2, $0a, $ff, $f8, $09, $f9, $ff
13142     0A F5 09 F1 
13146     12 EC 0E FC 
1314a     05 F5 0D F8 
1314e     FF 02 01 FF | 	byte	$0a, $f5, $09, $f1, $12, $ec, $0e, $fc, $05, $f5, $0d, $f8, $ff, $02, $01, $ff
13152     FD 0E EF 0F 
13156     F3 08 FC 02 
1315a     FF 00 01 03 
1315e     FA 03 01 07 | 	byte	$fd, $0e, $ef, $0f, $f3, $08, $fc, $02, $ff, $00, $01, $03, $fa, $03, $01, $07
13162     F6 0D F9 04 
13166     FF 03 FB 06 
1316a     FA FC 03 FD 
1316e     09 FB 05 FB | 	byte	$f6, $0d, $f9, $04, $ff, $03, $fb, $06, $fa, $fc, $03, $fd, $09, $fb, $05, $fb
13172     07 FA 06 06 
13176     F5 11 EF 11 
1317a     EF 14 EE 12 
1317e     F5 09 FD FC | 	byte	$07, $fa, $06, $06, $f5, $11, $ef, $11, $ef, $14, $ee, $12, $f5, $09, $fd, $fc
13182     00 0D F1 13 
13186     EE 11 F1 13 
1318a     F1 0B F5 0D 
1318e     EB 18 E0 16 | 	byte	$00, $0d, $f1, $13, $ee, $11, $f1, $13, $f1, $0b, $f5, $0d, $eb, $18, $e0, $16
13192     F0 03 01 FA 
13196     0A F6 07 F7 
1319a     0A F8 06 02 
1319e     FD 05 FC 04 | 	byte	$f0, $03, $01, $fa, $0a, $f6, $07, $f7, $0a, $f8, $06, $02, $fd, $05, $fc, $04
131a2     FC 05 FC 04 
131a6     FE FF 03 FC 
131aa     07 F5 0E F3 
131ae     09 FB 02 01 | 	byte	$fc, $05, $fc, $04, $fe, $ff, $03, $fc, $07, $f5, $0e, $f3, $09, $fb, $02, $01
131b2     03 FC 08 F9 
131b6     08 FD FD 09 
131ba     FA 06 FC 00 
131be     03 01 FE 07 | 	byte	$03, $fc, $08, $f9, $08, $fd, $fd, $09, $fa, $06, $fc, $00, $03, $01, $fe, $07
131c2     FD 01 0A F5 
131c6     06 FF 04 FD 
131ca     03 FE 06 F8 
131ce     0D FB 05 01 | 	byte	$fd, $01, $0a, $f5, $06, $ff, $04, $fd, $03, $fe, $06, $f8, $0d, $fb, $05, $01
131d2     00 FC 0F F2 
131d6     0D F8 11 EF 
131da     14 EF 0E EE 
131de     16 EF 02 06 | 	byte	$00, $fc, $0f, $f2, $0d, $f8, $11, $ef, $14, $ef, $0e, $ee, $16, $ef, $02, $06
131e2     F8 0A F6 06 
131e6     FA 0E F1 09 
131ea     FE 01 04 F7 
131ee     0A F9 03 FF | 	byte	$f8, $0a, $f6, $06, $fa, $0e, $f1, $09, $fe, $01, $04, $f7, $0a, $f9, $03, $ff
131f2     FF 09 F3 0E 
131f6     F5 0A F7 05 
131fa     FC 03 FA 0A 
131fe     F8 05 FD 0B | 	byte	$ff, $09, $f3, $0e, $f5, $0a, $f7, $05, $fc, $03, $fa, $0a, $f8, $05, $fd, $0b
13202     F5 0B F7 08 
13206     F9 06 00 FC 
1320a     07 F8 08 F7 
1320e     10 EA 1A EC | 	byte	$f5, $0b, $f7, $08, $f9, $06, $00, $fc, $07, $f8, $08, $f7, $10, $ea, $1a, $ec
13212     14 F5 07 FD 
13216     FD 03 FF 03 
1321a     FB 0B F6 08 
1321e     F8 09 FA 04 | 	byte	$14, $f5, $07, $fd, $fd, $03, $ff, $03, $fb, $0b, $f6, $08, $f8, $09, $fa, $04
13222     FD 08 F5 0D 
13226     F6 0B F8 07 
1322a     F7 0A FA 04 
1322e     FF 03 02 FB | 	byte	$fd, $08, $f5, $0d, $f6, $0b, $f8, $07, $f7, $0a, $fa, $04, $ff, $03, $02, $fb
13232     07 F7 08 FB 
13236     04 FD 02 01 
1323a     FD 07 FB 05 
1323e     01 FF 03 F9 | 	byte	$07, $f7, $08, $fb, $04, $fd, $02, $01, $fd, $07, $fb, $05, $01, $ff, $03, $f9
13242     09 FB 01 04 
13246     F9 08 F9 02 
1324a     02 FB 05 FA 
1324e     05 FF FF FF | 	byte	$09, $fb, $01, $04, $f9, $08, $f9, $02, $02, $fb, $05, $fa, $05, $ff, $ff, $ff
13252     08 F7 03 01 
13256     00 05 F6 0E 
1325a     EF 11 F0 0B 
1325e     F9 01 02 FD | 	byte	$08, $f7, $03, $01, $00, $05, $f6, $0e, $ef, $11, $f0, $0b, $f9, $01, $02, $fd
13262     04 FE 02 FA 
13266     0F F1 0B F9 
1326a     08 F9 04 FE 
1326e     FF 02 02 FC | 	byte	$04, $fe, $02, $fa, $0f, $f1, $0b, $f9, $08, $f9, $04, $fe, $ff, $02, $02, $fc
13272     06 FC 03 FE 
13276     02 FE 03 FB 
1327a     04 FD 00 05 
1327e     F7 08 F9 0A | 	byte	$06, $fc, $03, $fe, $02, $fe, $03, $fb, $04, $fd, $00, $05, $f7, $08, $f9, $0a
13282     F9 FF 04 FE 
13286     01 03 FF 02 
1328a     FE 04 FF 04 
1328e     FF 07 01 01 | 	byte	$f9, $ff, $04, $fe, $01, $03, $ff, $02, $fe, $04, $ff, $04, $ff, $07, $01, $01
13292     00 07 FB 04 
13296     01 01 01 01 
1329a     04 FF 02 04 
1329e     FC 04 02 FB | 	byte	$00, $07, $fb, $04, $01, $01, $01, $01, $04, $ff, $02, $04, $fc, $04, $02, $fb
132a2     08 FE 03 FD 
132a6     0A F9 07 FD 
132aa     04 FB 03 01 
132ae     02 02 01 00 | 	byte	$08, $fe, $03, $fd, $0a, $f9, $07, $fd, $04, $fb, $03, $01, $02, $02, $01, $00
132b2     FF 08 F7 09 
132b6     FA 09 F9 08 
132ba     F7 0E F5 09 
132be     FC 03 FD 08 | 	byte	$ff, $08, $f7, $09, $fa, $09, $f9, $08, $f7, $0e, $f5, $09, $fc, $03, $fd, $08
132c2     FC 09 F8 0B 
132c6     FA 04 01 02 
132ca     03 FC 09 F9 
132ce     09 FA 0D F8 | 	byte	$fc, $09, $f8, $0b, $fa, $04, $01, $02, $03, $fc, $09, $f9, $09, $fa, $0d, $f8
132d2     0D F6 0D F9 
132d6     09 FA 07 FF 
132da     02 00 03 01 
132de     06 FC 0B F9 | 	byte	$0d, $f6, $0d, $f9, $09, $fa, $07, $ff, $02, $00, $03, $01, $06, $fc, $0b, $f9
132e2     0A F6 12 F6 
132e6     09 FD 07 FF 
132ea     FF 07 FD 05 
132ee     FF 05 FF 01 | 	byte	$0a, $f6, $12, $f6, $09, $fd, $07, $ff, $ff, $07, $fd, $05, $ff, $05, $ff, $01
132f2     05 FA 07 FC 
132f6     01 02 FF 00 
132fa     FD 04 FC 01 
132fe     02 03 FC FD | 	byte	$05, $fa, $07, $fc, $01, $02, $ff, $00, $fd, $04, $fc, $01, $02, $03, $fc, $fd
13302     05 FF 02 FD 
13306     06 F8 09 F5 
1330a     08 FD 00 01 
1330e     01 00 02 FE | 	byte	$05, $ff, $02, $fd, $06, $f8, $09, $f5, $08, $fd, $00, $01, $01, $00, $02, $fe
13312     02 00 02 FA 
13316     0A FC 00 FC 
1331a     03 FE 02 FF 
1331e     FE 08 F7 0D | 	byte	$02, $00, $02, $fa, $0a, $fc, $00, $fc, $03, $fe, $02, $ff, $fe, $08, $f7, $0d
13322     F7 06 FA 09 
13326     F9 04 FA 09 
1332a     F6 0A F9 05 
1332e     FD 04 FA 0A | 	byte	$f7, $06, $fa, $09, $f9, $04, $fa, $09, $f6, $0a, $f9, $05, $fd, $04, $fa, $0a
13332     FC 01 FF 08 
13336     F9 06 FD 03 
1333a     FE 04 02 00 
1333e     00 02 01 00 | 	byte	$fc, $01, $ff, $08, $f9, $06, $fd, $03, $fe, $04, $02, $00, $00, $02, $01, $00
13342     03 FE 07 FF 
13346     FC 08 F8 06 
1334a     FD 01 FD 03 
1334e     FF 05 F7 11 | 	byte	$03, $fe, $07, $ff, $fc, $08, $f8, $06, $fd, $01, $fd, $03, $ff, $05, $f7, $11
13352     F2 0A F9 0A 
13356     F8 04 FC 03 
1335a     FE 03 FF FF 
1335e     01 00 00 FF | 	byte	$f2, $0a, $f9, $0a, $f8, $04, $fc, $03, $fe, $03, $ff, $ff, $01, $00, $00, $ff
13362     02 01 FD 04 
13366     00 FC 07 F8 
1336a     08 FC 06 F7 
1336e     09 F7 09 FB | 	byte	$02, $01, $fd, $04, $00, $fc, $07, $f8, $08, $fc, $06, $f7, $09, $f7, $09, $fb
13372     01 FE 06 F8 
13376     0B F8 04 02 
1337a     FF 01 03 FB 
1337e     07 F9 04 01 | 	byte	$01, $fe, $06, $f8, $0b, $f8, $04, $02, $ff, $01, $03, $fb, $07, $f9, $04, $01
13382     00 02 03 FA 
13386     07 FC 02 FD 
1338a     05 FD 01 01 
1338e     00 00 02 02 | 	byte	$00, $02, $03, $fa, $07, $fc, $02, $fd, $05, $fd, $01, $01, $00, $00, $02, $02
13392     FD 04 FE 03 
13396     00 FF 02 00 
1339a     03 FC 0A FA 
1339e     0A F7 07 FD | 	byte	$fd, $04, $fe, $03, $00, $ff, $02, $00, $03, $fc, $0a, $fa, $0a, $f7, $07, $fd
133a2     01 FF 01 00 
133a6     FE 01 FD 03 
133aa     FF 01 FF FF 
133ae     03 F9 0A F7 | 	byte	$01, $ff, $01, $00, $fe, $01, $fd, $03, $ff, $01, $ff, $ff, $03, $f9, $0a, $f7
133b2     04 01 FE FF 
133b6     02 00 01 00 
133ba     00 01 00 FF 
133be     02 FC 06 FB | 	byte	$04, $01, $fe, $ff, $02, $00, $01, $00, $00, $01, $00, $ff, $02, $fc, $06, $fb
133c2     03 FC 08 F9 
133c6     05 FF FF 05 
133ca     FC 03 FE 06 
133ce     FB 07 FD 04 | 	byte	$03, $fc, $08, $f9, $05, $ff, $ff, $05, $fc, $03, $fe, $06, $fb, $07, $fd, $04
133d2     FF 02 FF 01 
133d6     01 00 FD 02 
133da     01 FD 03 FE 
133de     04 FB 06 FB | 	byte	$ff, $02, $ff, $01, $01, $00, $fd, $02, $01, $fd, $03, $fe, $04, $fb, $06, $fb
133e2     05 FD 03 01 
133e6     FD 03 FB 06 
133ea     FC 01 FD 07 
133ee     F7 07 F7 0A | 	byte	$05, $fd, $03, $01, $fd, $03, $fb, $06, $fc, $01, $fd, $07, $f7, $07, $f7, $0a
133f2     F9 07 FD 03 
133f6     FF 03 FD 01 
133fa     01 00 00 03 
133fe     FD 01 01 00 | 	byte	$f9, $07, $fd, $03, $ff, $03, $fd, $01, $01, $00, $00, $03, $fd, $01, $01, $00
13402     FE 04 FF 00 
13406     01 FD 05 F9 
1340a     06 FC 04 FB 
1340e     01 02 01 02 | 	byte	$fe, $04, $ff, $00, $01, $fd, $05, $f9, $06, $fc, $04, $fb, $01, $02, $01, $02
13412     FB 05 FC 04 
13416     FE FF 00 02 
1341a     FD 04 FE 02 
1341e     FF 00 01 02 | 	byte	$fb, $05, $fc, $04, $fe, $ff, $00, $02, $fd, $04, $fe, $02, $ff, $00, $01, $02
13422     FD 02 FE 03 
13426     00 02 FF 06 
1342a     F9 07 00 00 
1342e     00 00 D0 CB | 	byte	$fd, $02, $fe, $03, $00, $02, $ff, $06, $f9, $07, $00, $00, $00, $00, $d0, $cb
13432     D2 ED D2 BF 
13436     D2 EB FF 0F 
1343a     1F 08 E7 F5 
1343e     FF 0A D2 D3 | 	byte	$d2, $ed, $d2, $bf, $d2, $eb, $ff, $0f, $1f, $08, $e7, $f5, $ff, $0a, $d2, $d3
13442     EF FF 17 2B 
13446     3F 53 63 6C 
1344a     2A 00 E9 F3 
1344e     FE 00 D0 CD | 	byte	$ef, $ff, $17, $2b, $3f, $53, $63, $6c, $2a, $00, $e9, $f3, $fe, $00, $d0, $cd
13452     D3 ED C0 BF 
13456     D2 ED FF 0F 
1345a     1F 00 E7 F7 
1345e     05 0C D2 DF | 	byte	$d3, $ed, $c0, $bf, $d2, $ed, $ff, $0f, $1f, $00, $e7, $f7, $05, $0c, $d2, $df
13462     EF 05 1B 2F 
13466     3F 55 63 6D 
1346a     2A F0 EB F5 
1346e     FF 02 D0 CF | 	byte	$ef, $05, $1b, $2f, $3f, $55, $63, $6d, $2a, $f0, $eb, $f5, $ff, $02, $d0, $cf
13472     D7 E8 AF C5 
13476     D2 EF FF 13 
1347a     1F E4 EB F7 
1347e     07 0C D3 DF | 	byte	$d7, $e8, $af, $c5, $d2, $ef, $ff, $13, $1f, $e4, $eb, $f7, $07, $0c, $d3, $df
13482     F3 07 1D 2F 
13486     43 57 65 6E 
1348a     28 E4 EB F6 
1348e     FF 04 D0 CF | 	byte	$f3, $07, $1d, $2f, $43, $57, $65, $6e, $28, $e4, $eb, $f6, $ff, $04, $d0, $cf
13492     DF E0 AF C7 
13496     D2 EF FF 13 
1349a     1C DE EB FB 
1349e     07 10 D4 E3 | 	byte	$df, $e0, $af, $c7, $d2, $ef, $ff, $13, $1c, $de, $eb, $fb, $07, $10, $d4, $e3
134a2     F7 0B 1F 33 
134a6     47 57 67 70 
134aa     24 E2 EB F7 
134ae     FF 04 D0 D1 | 	byte	$f7, $0b, $1f, $33, $47, $57, $67, $70, $24, $e2, $eb, $f7, $ff, $04, $d0, $d1
134b2     DF D4 B3 C7 
134b6     D3 EF FF 13 
134ba     14 DF ED FB 
134be     0B 10 D5 E6 | 	byte	$df, $d4, $b3, $c7, $d3, $ef, $ff, $13, $14, $df, $ed, $fb, $0b, $10, $d5, $e6
134c2     F7 0D 1F 35 
134c6     47 59 67 70 
134ca     20 E2 ED F7 
134ce     03 08 D2 D2 | 	byte	$f7, $0d, $1f, $35, $47, $59, $67, $70, $20, $e2, $ed, $f7, $03, $08, $d2, $d2
134d2     E3 D0 B5 C9 
134d6     D3 F3 05 15 
134da     04 DF EF FE 
134de     0D 14 D7 E7 | 	byte	$e3, $d0, $b5, $c9, $d3, $f3, $05, $15, $04, $df, $ef, $fe, $0d, $14, $d7, $e7
134e2     FB 0F 23 37 
134e6     4A 5B 69 70 
134ea     00 E3 EF F9 
134ee     05 08 D2 D2 | 	byte	$fb, $0f, $23, $37, $4a, $5b, $69, $70, $00, $e3, $ef, $f9, $05, $08, $d2, $d2
134f2     E4 A8 B7 CB 
134f6     D7 F3 05 15 
134fa     00 DF EF FF 
134fe     0F 14 D9 EB | 	byte	$e4, $a8, $b7, $cb, $d7, $f3, $05, $15, $00, $df, $ef, $ff, $0f, $14, $d9, $eb
13502     FF 0F 26 39 
13506     4B 5B 6A 70 
1350a     00 E3 EF FB 
1350e     06 08 D2 D2 | 	byte	$ff, $0f, $26, $39, $4b, $5b, $6a, $70, $00, $e3, $ef, $fb, $06, $08, $d2, $d2
13512     E0 A6 B7 CD 
13516     D7 F5 07 17 
1351a     E0 DF EF FF 
1351e     0F 18 DC ED | 	byte	$e0, $a6, $b7, $cd, $d7, $f5, $07, $17, $e0, $df, $ef, $ff, $0f, $18, $dc, $ed
13522     FF 13 27 3B 
13526     4D 5D 6B 70 
1352a     E0 E5 EF FD 
1352e     07 08 D2 D2 | 	byte	$ff, $13, $27, $3b, $4d, $5d, $6b, $70, $e0, $e5, $ef, $fd, $07, $08, $d2, $d2
13532     D8 A7 BB CF 
13536     DF F7 07 14 
1353a     D6 DF F3 FF 
1353e     13 18 DF EF | 	byte	$d8, $a7, $bb, $cf, $df, $f7, $07, $14, $d6, $df, $f3, $ff, $13, $18, $df, $ef
13542     FF 17 2B 3D 
13546     4F 5F 6B 70 
1354a     E0 E5 F1 FE 
1354e     09 0C D2 D3 | 	byte	$ff, $17, $2b, $3d, $4f, $5f, $6b, $70, $e0, $e5, $f1, $fe, $09, $0c, $d2, $d3
13552     D2 A7 BD CF 
13556     E5 F7 07 10 
1355a     D4 E3 F5 05 
1355e     15 1C E1 F3 | 	byte	$d2, $a7, $bd, $cf, $e5, $f7, $07, $10, $d4, $e3, $f5, $05, $15, $1c, $e1, $f3
13562     05 17 2B 3F 
13566     4F 5F 6B 60 
1356a     DC E7 F3 FF 
1356e     0B 0C D2 D7 | 	byte	$05, $17, $2b, $3f, $4f, $5f, $6b, $60, $dc, $e7, $f3, $ff, $0b, $0c, $d2, $d7
13572     D0 AB BF CF 
13576     E7 F7 07 00 
1357a     D3 E5 F7 07 
1357e     17 20 E3 F5 | 	byte	$d0, $ab, $bf, $cf, $e7, $f7, $07, $00, $d3, $e5, $f7, $07, $17, $20, $e3, $f5
13582     07 1B 2F 3F 
13586     4F 5F 6D 50 
1358a     DC E7 F3 FF 
1358e     0B 10 D2 DD | 	byte	$07, $1b, $2f, $3f, $4f, $5f, $6d, $50, $dc, $e7, $f3, $ff, $0b, $10, $d2, $dd
13592     A0 AD BF D1 
13596     E7 F9 0A F0 
1359a     D3 E7 F7 07 
1359e     19 20 E7 F7 | 	byte	$a0, $ad, $bf, $d1, $e7, $f9, $0a, $f0, $d3, $e7, $f7, $07, $19, $20, $e7, $f7
135a2     0B 1D 2F 3F 
135a6     53 5F 6D 40 
135aa     DD E7 F5 FF 
135ae     0E 10 D3 DC | 	byte	$0b, $1d, $2f, $3f, $53, $5f, $6d, $40, $dd, $e7, $f5, $ff, $0e, $10, $d3, $dc
135b2     9D AF BF D2 
135b6     E7 FB 0B E0 
135ba     D2 E7 FA 0B 
135be     1B 20 E7 FA | 	byte	$9d, $af, $bf, $d2, $e7, $fb, $0b, $e0, $d2, $e7, $fa, $0b, $1b, $20, $e7, $fa
135c2     0B 1F 33 43 
135c6     53 63 6D 30 
135ca     DD EA F7 03 
135ce     0F 10 D4 D6 | 	byte	$0b, $1f, $33, $43, $53, $63, $6d, $30, $dd, $ea, $f7, $03, $0f, $10, $d4, $d6
135d2     9F AF BF D2 
135d6     E9 FB 0A D2 
135da     D2 EB FB 0D 
135de     1F 20 EB FB | 	byte	$9f, $af, $bf, $d2, $e9, $fb, $0a, $d2, $d2, $eb, $fb, $0d, $1f, $20, $eb, $fb
135e2     0F 1F 33 45 
135e6     55 63 6C 20 
135ea     DF EB F7 05 
135ee     0F 10 D5 D2 | 	byte	$0f, $1f, $33, $45, $55, $63, $6c, $20, $df, $eb, $f7, $05, $0f, $10, $d5, $d2
135f2     9F AF C5 D2 
135f6     EB FB 04 D2 
135fa     D2 EB FF 0F 
135fe     1F 24 EE FF | 	byte	$9f, $af, $c5, $d2, $eb, $fb, $04, $d2, $d2, $eb, $ff, $0f, $1f, $24, $ee, $ff
13602     0F 23 37 47 
13606     57 64 64 20 
1360a     DF ED FA 07 
1360e     13 10 D6 C0 | 	byte	$0f, $23, $37, $47, $57, $64, $64, $20, $df, $ed, $fa, $07, $13, $10, $d6, $c0
13612     9F B3 C7 D2 
13616     EB FD 00 C9 
1361a     D2 ED FF 0F 
1361e     23 28 EF FF | 	byte	$9f, $b3, $c7, $d2, $eb, $fd, $00, $c9, $d2, $ed, $ff, $0f, $23, $28, $ef, $ff
13622     13 27 37 47 
13626     57 65 50 20 
1362a     E1 ED FB 07 
1362e     13 10 D7 A0 | 	byte	$13, $27, $37, $47, $57, $65, $50, $20, $e1, $ed, $fb, $07, $13, $10, $d7, $a0
13632     A3 B5 C7 D2 
13636     ED FD E8 CB 
1363a     D3 EF FF 13 
1363e     25 28 F3 FF | 	byte	$a3, $b5, $c7, $d2, $ed, $fd, $e8, $cb, $d3, $ef, $ff, $13, $25, $28, $f3, $ff
13642     16 27 3A 4B 
13646     59 65 40 20 
1364a     E1 EF FD 0A 
1364e     16 14 D8 96 | 	byte	$16, $27, $3a, $4b, $59, $65, $40, $20, $e1, $ef, $fd, $0a, $16, $14, $d8, $96
13652     A5 B7 C9 D2 
13656     EE FF D8 CB 
1365a     D3 EF FF 17 
1365e     27 28 F5 07 | 	byte	$a5, $b7, $c9, $d2, $ee, $ff, $d8, $cb, $d3, $ef, $ff, $17, $27, $28, $f5, $07
13662     17 2B 3B 4B 
13666     5A 66 30 20 
1366a     E3 EF FF 0B 
1366e     17 18 D4 97 | 	byte	$17, $2b, $3b, $4b, $5a, $66, $30, $20, $e3, $ef, $ff, $0b, $17, $18, $d4, $97
13672     A7 B7 CB D3 
13676     EF FF D2 CD 
1367a     D7 F3 07 17 
1367e     2B 30 F7 07 | 	byte	$a7, $b7, $cb, $d3, $ef, $ff, $d2, $cd, $d7, $f3, $07, $17, $2b, $30, $f7, $07
13682     1B 2B 3D 4D 
13686     5B 64 20 20 
1368a     E3 EF FF 0D 
1368e     19 18 D2 97 | 	byte	$1b, $2b, $3d, $4d, $5b, $64, $20, $20, $e3, $ef, $ff, $0d, $19, $18, $d2, $97
13692     A7 BB CB D3 
13696     EF FA C0 CF 
1369a     DF F5 07 1B 
1369e     2D 30 FA 0B | 	byte	$a7, $bb, $cb, $d3, $ef, $fa, $c0, $cf, $df, $f5, $07, $1b, $2d, $30, $fa, $0b
136a2     1B 2E 3F 4E 
136a6     5B 60 1F 20 
136aa     E5 F3 FF 0F 
136ae     1B 18 D0 99 | 	byte	$1b, $2e, $3f, $4e, $5b, $60, $1f, $20, $e5, $f3, $ff, $0f, $1b, $18, $d0, $99
136b2     AA BB CD D7 
136b6     EF F0 BD CF 
136ba     DF F7 0B 1E 
136be     2F 30 FD 0D | 	byte	$aa, $bb, $cd, $d7, $ef, $f0, $bd, $cf, $df, $f7, $0b, $1e, $2f, $30, $fd, $0d
136c2     1F 2F 3F 4F 
136c6     5D 50 1F 20 
136ca     E7 F5 FF 0F 
136ce     1D 18 A0 9B | 	byte	$1f, $2f, $3f, $4f, $5d, $50, $1f, $20, $e7, $f5, $ff, $0f, $1d, $18, $a0, $9b
136d2     AB BD CF D7 
136d6     EF E0 BF CF 
136da     E6 F7 0D 1F 
136de     2F 30 FF 0F | 	byte	$ab, $bd, $cf, $d7, $ef, $e0, $bf, $cf, $e6, $f7, $0d, $1f, $2f, $30, $ff, $0f
136e2     1F 2F 3F 4F 
136e6     5D 40 1F 20 
136ea     E7 F6 03 11 
136ee     1E 18 91 9D | 	byte	$1f, $2f, $3f, $4f, $5d, $40, $1f, $20, $e7, $f6, $03, $11, $1e, $18, $91, $9d
136f2     AD BF CF DF 
136f6     F2 D4 BF D1 
136fa     E7 FB 0F 1F 
136fe     33 34 FF 0F | 	byte	$ad, $bf, $cf, $df, $f2, $d4, $bf, $d1, $e7, $fb, $0f, $1f, $33, $34, $ff, $0f
13702     1F 33 3F 4F 
13706     5D 30 1F 20 
1370a     E9 F7 06 13 
1370e     1F 18 91 9F | 	byte	$1f, $33, $3f, $4f, $5d, $30, $1f, $20, $e9, $f7, $06, $13, $1f, $18, $91, $9f
13712     AF BF CF DF 
13716     F2 D0 BF D2 
1371a     E7 FE 0F 25 
1371e     37 38 03 13 | 	byte	$af, $bf, $cf, $df, $f2, $d0, $bf, $d2, $e7, $fe, $0f, $25, $37, $38, $03, $13
13722     25 35 43 52 
13726     5D 20 23 20 
1372a     EB F9 07 15 
1372e     1F 10 93 9F | 	byte	$25, $35, $43, $52, $5d, $20, $23, $20, $eb, $f9, $07, $15, $1f, $10, $93, $9f
13732     AF BF D1 E3 
13736     F0 C0 BF D2 
1373a     EB FF 13 27 
1373e     39 38 06 16 | 	byte	$af, $bf, $d1, $e3, $f0, $c0, $bf, $d2, $eb, $ff, $13, $27, $39, $38, $06, $16
13742     27 37 45 53 
13746     58 18 23 20 
1374a     EB FB 07 17 
1374e     23 00 93 9F | 	byte	$27, $37, $45, $53, $58, $18, $23, $20, $eb, $fb, $07, $17, $23, $00, $93, $9f
13752     B3 BF D1 E5 
13756     E8 AF BF D2 
1375a     ED FF 17 2B 
1375e     3B 40 07 17 | 	byte	$b3, $bf, $d1, $e5, $e8, $af, $bf, $d2, $ed, $ff, $17, $2b, $3b, $40, $07, $17
13762     27 37 47 53 
13766     50 17 23 20 
1376a     ED FB 0B 17 
1376e     24 E0 95 A3 | 	byte	$27, $37, $47, $53, $50, $17, $23, $20, $ed, $fb, $0b, $17, $24, $e0, $95, $a3
13772     B3 C3 D2 E5 
13776     E0 B3 C5 D1 
1377a     EF FF 17 2D 
1377e     3F 40 0B 1B | 	byte	$b3, $c3, $d2, $e5, $e0, $b3, $c5, $d1, $ef, $ff, $17, $2d, $3f, $40, $0b, $1b
13782     2A 39 47 55 
13786     40 17 25 20 
1378a     EF FE 0B 1A 
1378e     25 E0 97 A5 | 	byte	$2a, $39, $47, $55, $40, $17, $25, $20, $ef, $fe, $0b, $1a, $25, $e0, $97, $a5
13792     B5 C5 D2 E5 
13796     D2 B3 C7 D2 
1379a     EF 07 1B 2F 
1379e     3F 40 0D 1B | 	byte	$b5, $c5, $d2, $e5, $d2, $b3, $c7, $d2, $ef, $07, $1b, $2f, $3f, $40, $0d, $1b
137a2     2B 3B 47 55 
137a6     28 19 27 20 
137aa     EF FF 0E 1B 
137ae     20 D4 99 A7 | 	byte	$2b, $3b, $47, $55, $28, $19, $27, $20, $ef, $ff, $0e, $1b, $20, $d4, $99, $a7
137b2     B7 C7 D2 E7 
137b6     D0 B3 C7 D3 
137ba     F3 07 1F 2F 
137be     3F 40 0F 1F | 	byte	$b7, $c7, $d2, $e7, $d0, $b3, $c7, $d3, $f3, $07, $1f, $2f, $3f, $40, $0f, $1f
137c2     2D 3B 49 55 
137c6     18 1B 27 20 
137ca     F1 FF 0F 1D 
137ce     18 D4 9B A7 | 	byte	$2d, $3b, $49, $55, $18, $1b, $27, $20, $f1, $ff, $0f, $1d, $18, $d4, $9b, $a7
137d2     B7 C7 D2 E6 
137d6     A6 B5 CA D5 
137da     F5 0B 1F 33 
137de     45 40 0F 1F | 	byte	$b7, $c7, $d2, $e6, $a6, $b5, $ca, $d5, $f5, $0b, $1f, $33, $45, $40, $0f, $1f
137e2     2F 3D 4B 52 
137e6     10 1B 27 20 
137ea     F3 FF 0F 1F 
137ee     08 D4 9D AB | 	byte	$2f, $3d, $4b, $52, $10, $1b, $27, $20, $f3, $ff, $0f, $1f, $08, $d4, $9d, $ab
137f2     B9 C7 D2 E0 
137f6     A5 B7 CB D7 
137fa     F7 0F 1F 37 
137fe     47 40 13 1F | 	byte	$b9, $c7, $d2, $e0, $a5, $b7, $cb, $d7, $f7, $0f, $1f, $37, $47, $40, $13, $1f
13802     2F 3F 4B 48 
13806     0F 1B 2A 24 
1380a     F5 03 13 1F 
1380e     00 D4 9E AB | 	byte	$2f, $3f, $4b, $48, $0f, $1b, $2a, $24, $f5, $03, $13, $1f, $00, $d4, $9e, $ab
13812     BB CA D2 D8 
13816     A5 B7 CD DF 
1381a     FB 0F 25 37 
1381e     4B 40 15 23 | 	byte	$bb, $ca, $d2, $d8, $a5, $b7, $cd, $df, $fb, $0f, $25, $37, $4b, $40, $15, $23
13822     32 3F 4B 40 
13826     0F 1D 2B 24 
1382a     F7 05 15 1F 
1382e     E0 D4 9F AD | 	byte	$32, $3f, $4b, $40, $0f, $1d, $2b, $24, $f7, $05, $15, $1f, $e0, $d4, $9f, $ad
13832     BB CB D2 D1 
13836     A7 BB CF E7 
1383a     FB 13 27 3B 
1383e     4D 44 17 25 | 	byte	$bb, $cb, $d2, $d1, $a7, $bb, $cf, $e7, $fb, $13, $27, $3b, $4d, $44, $17, $25
13842     33 3F 4D 28 
13846     0F 1F 2D 28 
1384a     F7 07 17 20 
1384e     DE D4 9F AF | 	byte	$33, $3f, $4d, $28, $0f, $1f, $2d, $28, $f7, $07, $17, $20, $de, $d4, $9f, $af
13852     BD CB D2 C0 
13856     A7 BB CF E7 
1385a     FF 15 2B 3F 
1385e     4F 48 19 27 | 	byte	$bd, $cb, $d2, $c0, $a7, $bb, $cf, $e7, $ff, $15, $2b, $3f, $4f, $48, $19, $27
13862     35 3F 4D 14 
13866     0F 1F 2E 28 
1386a     F9 07 17 18 
1386e     DF D4 A3 AF | 	byte	$35, $3f, $4d, $14, $0f, $1f, $2e, $28, $f9, $07, $17, $18, $df, $d4, $a3, $af
13872     BF CD D3 A0 
13876     A7 BD D1 EB 
1387a     FF 17 2D 3F 
1387e     4F 48 1B 27 | 	byte	$bf, $cd, $d3, $a0, $a7, $bd, $d1, $eb, $ff, $17, $2d, $3f, $4f, $48, $1b, $27
13882     36 3F 4B 08 
13886     13 1F 2F 28 
1388a     FB 0B 19 08 
1388e     DF D8 A5 AF | 	byte	$36, $3f, $4b, $08, $13, $1f, $2f, $28, $fb, $0b, $19, $08, $df, $d8, $a5, $af
13892     BF CD D2 99 
13896     AB BF D1 EB 
1389a     FF 1B 2F 3F 
1389e     53 48 1D 2A | 	byte	$bf, $cd, $d2, $99, $ab, $bf, $d1, $eb, $ff, $1b, $2f, $3f, $53, $48, $1d, $2a
138a2     37 43 44 07 
138a6     13 1F 2F 28 
138aa     FD 0B 1B 00 
138ae     E1 D8 A6 B3 | 	byte	$37, $43, $44, $07, $13, $1f, $2f, $28, $fd, $0b, $1b, $00, $e1, $d8, $a6, $b3
138b2     BF CF D2 97 
138b6     AB BF D2 EF 
138ba     07 1D 2F 45 
138be     56 50 1F 2B | 	byte	$bf, $cf, $d2, $97, $ab, $bf, $d2, $ef, $07, $1d, $2f, $45, $56, $50, $1f, $2b
138c2     37 43 40 07 
138c6     13 23 32 28 
138ca     FF 0E 1B E0 
138ce     E3 D8 A7 B3 | 	byte	$37, $43, $40, $07, $13, $23, $32, $28, $ff, $0e, $1b, $e0, $e3, $d8, $a7, $b3
138d2     BF CF C0 9A 
138d6     AD BF D2 EF 
138da     07 1F 35 47 
138de     57 50 1F 2D | 	byte	$bf, $cf, $c0, $9a, $ad, $bf, $d2, $ef, $07, $1f, $35, $47, $57, $50, $1f, $2d
138e2     39 43 28 07 
138e6     15 23 33 28 
138ea     FF 0F 1A DA 
138ee     E5 D8 A9 B5 | 	byte	$39, $43, $28, $07, $15, $23, $33, $28, $ff, $0f, $1a, $da, $e5, $d8, $a9, $b5
138f2     BF CF B0 9B 
138f6     AF BF D2 F3 
138fa     0B 1F 37 4A 
138fe     5B 50 1F 2E | 	byte	$bf, $cf, $b0, $9b, $af, $bf, $d2, $f3, $0b, $1f, $37, $4a, $5b, $50, $1f, $2e
13902     3A 45 10 07 
13906     17 25 35 28 
1390a     FF 0F 14 DB 
1390e     E7 D8 AB B7 | 	byte	$3a, $45, $10, $07, $17, $25, $35, $28, $ff, $0f, $14, $db, $e7, $d8, $ab, $b7
13912     C3 CF 98 9B 
13916     AF C7 D3 F5 
1391a     0D 23 3A 4B 
1391e     5D 50 23 2F | 	byte	$c3, $cf, $98, $9b, $af, $c7, $d3, $f5, $0d, $23, $3a, $4b, $5d, $50, $23, $2f
13922     3B 44 02 09 
13926     17 27 37 28 
1392a     03 13 08 DB 
1392e     E7 E0 AB B7 | 	byte	$3b, $44, $02, $09, $17, $27, $37, $28, $03, $13, $08, $db, $e7, $e0, $ab, $b7
13932     C3 CE 90 9D 
13936     AF C7 D3 F7 
1393a     0F 27 3B 4F 
1393e     5F 50 25 2F | 	byte	$c3, $ce, $90, $9d, $af, $c7, $d3, $f7, $0f, $27, $3b, $4f, $5f, $50, $25, $2f
13942     3B 40 00 0B 
13946     17 27 37 28 
1394a     05 13 00 DE 
1394e     EB E0 AD B7 | 	byte	$3b, $40, $00, $0b, $17, $27, $37, $28, $05, $13, $00, $de, $eb, $e0, $ad, $b7
13952     C5 C8 8D 9F 
13956     B3 CB D7 FB 
1395a     0F 27 3F 4F 
1395e     5F 50 27 31 | 	byte	$c5, $c8, $8d, $9f, $b3, $cb, $d7, $fb, $0f, $27, $3f, $4f, $5f, $50, $27, $31
13962     3D 38 FF 0B 
13966     1B 2A 39 30 
1396a     07 15 E0 DF 
1396e     EB E0 AE BA | 	byte	$3d, $38, $ff, $0b, $1b, $2a, $39, $30, $07, $15, $e0, $df, $eb, $e0, $ae, $ba
13972     C5 C0 8F 9F 
13976     B5 CB DF FD 
1397a     15 2B 3F 53 
1397e     63 50 27 33 | 	byte	$c5, $c0, $8f, $9f, $b5, $cb, $df, $fd, $15, $2b, $3f, $53, $63, $50, $27, $33
13982     3D 28 FF 0D 
13986     1B 2B 3B 30 
1398a     07 15 D8 DF 
1398e     ED E0 AF BB | 	byte	$3d, $28, $ff, $0d, $1b, $2b, $3b, $30, $07, $15, $d8, $df, $ed, $e0, $af, $bb
13992     C7 A8 8F 9F 
13996     B7 CF E7 FF 
1399a     17 2F 3F 55 
1399e     65 50 29 33 | 	byte	$c7, $a8, $8f, $9f, $b7, $cf, $e7, $ff, $17, $2f, $3f, $55, $65, $50, $29, $33
139a2     3D 10 FF 0D 
139a6     1D 2D 3D 30 
139aa     09 10 D5 E3 
139ae     EF E0 AF BB | 	byte	$3d, $10, $ff, $0d, $1d, $2d, $3d, $30, $09, $10, $d5, $e3, $ef, $e0, $af, $bb
139b2     C7 90 8F A3 
139b6     B7 CF E9 FF 
139ba     1B 2F 45 57 
139be     67 50 2A 35 | 	byte	$c7, $90, $8f, $a3, $b7, $cf, $e9, $ff, $1b, $2f, $45, $57, $67, $50, $2a, $35
139c2     3E 00 FF 0F 
139c6     1F 2F 3F 30 
139ca     0B 00 D5 E5 
139ce     EF E0 B1 BD | 	byte	$3e, $00, $ff, $0f, $1f, $2f, $3f, $30, $0b, $00, $d5, $e5, $ef, $e0, $b1, $bd
139d2     C6 85 8F A5 
139d6     BB CF EB FF 
139da     1B 33 47 5A 
139de     67 50 2B 35 | 	byte	$c6, $85, $8f, $a5, $bb, $cf, $eb, $ff, $1b, $33, $47, $5a, $67, $50, $2b, $35
139e2     3C F8 FF 0F 
139e6     1F 2F 3F 30 
139ea     0D 00 D5 E7 
139ee     F2 E0 B3 BD | 	byte	$3c, $f8, $ff, $0f, $1f, $2f, $3f, $30, $0d, $00, $d5, $e7, $f2, $e0, $b3, $bd
139f2     C0 83 93 A7 
139f6     BD D2 EF 07 
139fa     1F 37 4B 5B 
139fe     6B 50 2D 36 | 	byte	$c0, $83, $93, $a7, $bd, $d2, $ef, $07, $1f, $37, $4b, $5b, $6b, $50, $2d, $36
13a02     34 F7 FF 0F 
13a06     1F 2F 3F 30 
13a0a     0F E0 D7 E7 
13a0e     F3 E0 B3 BF | 	byte	$34, $f7, $ff, $0f, $1f, $2f, $3f, $30, $0f, $e0, $d7, $e7, $f3, $e0, $b3, $bf
13a12     B8 83 93 A7 
13a16     BF D2 EF 07 
13a1a     1F 37 4B 5F 
13a1e     6B 50 2D 37 | 	byte	$b8, $83, $93, $a7, $bf, $d2, $ef, $07, $1f, $37, $4b, $5f, $6b, $50, $2d, $37
13a22     24 F7 03 13 
13a26     1F 33 3F 30 
13a2a     0E D4 D7 E9 
13a2e     F5 E0 B5 BF | 	byte	$24, $f7, $03, $13, $1f, $33, $3f, $30, $0e, $d4, $d7, $e9, $f5, $e0, $b5, $bf
13a32     A0 83 97 AB 
13a36     BF D2 F3 0B 
13a3a     23 3B 4F 5F 
13a3e     6E 50 2F 37 | 	byte	$a0, $83, $97, $ab, $bf, $d2, $f3, $0b, $23, $3b, $4f, $5f, $6e, $50, $2f, $37
13a42     10 F7 05 13 
13a46     23 33 45 30 
13a4a     0A D2 DE EB 
13a4e     F7 E0 B5 BF | 	byte	$10, $f7, $05, $13, $23, $33, $45, $30, $0a, $d2, $de, $eb, $f7, $e0, $b5, $bf
13a52     90 85 97 AB 
13a56     BF D2 F5 0F 
13a5a     27 3D 4F 5F 
13a5e     6F 50 2F 37 | 	byte	$90, $85, $97, $ab, $bf, $d2, $f5, $0f, $27, $3d, $4f, $5f, $6f, $50, $2f, $37
13a62     00 F7 05 15 
13a66     25 36 46 30 
13a6a     00 D2 DF ED 
13a6e     F7 E0 B7 BF | 	byte	$00, $f7, $05, $15, $25, $36, $46, $30, $00, $d2, $df, $ed, $f7, $e0, $b7, $bf
13a72     80 87 97 AF 
13a76     C5 D3 F7 0F 
13a7a     27 3F 53 63 
13a7e     6F 50 2F 36 | 	byte	$80, $87, $97, $af, $c5, $d3, $f7, $0f, $27, $3f, $53, $63, $6f, $50, $2f, $36
13a82     F0 F9 07 17 
13a86     27 37 47 30 
13a8a     F0 D2 DF EF 
13a8e     F9 E0 B7 BC | 	byte	$f0, $f9, $07, $17, $27, $37, $47, $30, $f0, $d2, $df, $ef, $f9, $e0, $b7, $bc
13a92     80 87 9B AF 
13a96     C7 D7 FB 13 
13a9a     2B 3F 55 65 
13a9e     73 58 31 30 | 	byte	$80, $87, $9b, $af, $c7, $d7, $fb, $13, $2b, $3f, $55, $65, $73, $58, $31, $30
13aa2     EF FB 07 17 
13aa6     27 37 49 30 
13aaa     E0 D2 E3 EF 
13aae     FB E0 B7 B4 | 	byte	$ef, $fb, $07, $17, $27, $37, $49, $30, $e0, $d2, $e3, $ef, $fb, $e0, $b7, $b4
13ab2     80 89 9D AF 
13ab6     CB D7 FD 17 
13aba     2F 3F 57 67 
13abe     73 54 31 24 | 	byte	$80, $89, $9d, $af, $cb, $d7, $fd, $17, $2f, $3f, $57, $67, $73, $54, $31, $24
13ac2     EF FB 09 19 
13ac6     2A 3B 4B 30 
13aca     D4 D2 E5 EF 
13ace     FB E0 B9 A0 | 	byte	$ef, $fb, $09, $19, $2a, $3b, $4b, $30, $d4, $d2, $e5, $ef, $fb, $e0, $b9, $a0
13ad2     80 8B 9F B3 
13ad6     CB DF FF 17 
13ada     2F 47 59 69 
13ade     75 58 32 10 | 	byte	$80, $8b, $9f, $b3, $cb, $df, $ff, $17, $2f, $47, $59, $69, $75, $58, $32, $10
13ae2     EF FD 0B 1B 
13ae6     2B 3D 4D 30 
13aea     D2 D2 E6 F3 
13aee     FD E0 B9 90 | 	byte	$ef, $fd, $0b, $1b, $2b, $3d, $4d, $30, $d2, $d2, $e6, $f3, $fd, $e0, $b9, $90
13af2     80 8B 9F B7 
13af6     CF E9 FF 1B 
13afa     33 47 5B 6B 
13afe     77 58 33 00 | 	byte	$80, $8b, $9f, $b7, $cf, $e9, $ff, $1b, $33, $47, $5b, $6b, $77, $58, $33, $00
13b02     EF FD 0B 1B 
13b06     2D 3F 4F 20 
13b0a     D0 D2 E7 F3 
13b0e     FE E0 BA 80 | 	byte	$ef, $fd, $0b, $1b, $2d, $3f, $4f, $20, $d0, $d2, $e7, $f3, $fe, $e0, $ba, $80
13b12     80 8F 9F B7 
13b16     CF EB FF 1F 
13b1a     35 4B 5D 6B 
13b1e     77 50 32 F0 | 	byte	$80, $8f, $9f, $b7, $cf, $eb, $ff, $1f, $35, $4b, $5d, $6b, $77, $50, $32, $f0
13b22     F2 FF 0D 1D 
13b26     2F 3F 4F 20 
13b2a     C9 D2 E9 F5 
13b2e     FF E0 B8 80 | 	byte	$f2, $ff, $0d, $1d, $2f, $3f, $4f, $20, $c9, $d2, $e9, $f5, $ff, $e0, $b8, $80
13b32     80 8F A3 BB 
13b36     D1 EF 07 1F 
13b3a     37 4D 5F 6E 
13b3e     79 50 30 E9 | 	byte	$80, $8f, $a3, $bb, $d1, $ef, $07, $1f, $37, $4d, $5f, $6e, $79, $50, $30, $e9
13b42     F3 FF 0F 1F 
13b46     2F 3F 4F 00 
13b4a     CB D3 EB F7 
13b4e     FF E0 B0 80 | 	byte	$f3, $ff, $0f, $1f, $2f, $3f, $4f, $00, $cb, $d3, $eb, $f7, $ff, $e0, $b0, $80
13b52     80 8F A7 BD 
13b56     D2 EF 0B 1F 
13b5a     3B 4F 5F 6F 
13b5e     7A 50 24 E9 | 	byte	$80, $8f, $a7, $bd, $d2, $ef, $0b, $1f, $3b, $4f, $5f, $6f, $7a, $50, $24, $e9
13b62     F3 FF 0F 1F 
13b66     2F 3F 53 00 
13b6a     CD D5 EB F7 
13b6e     FF E0 A4 80 | 	byte	$f3, $ff, $0f, $1f, $2f, $3f, $53, $00, $cd, $d5, $eb, $f7, $ff, $e0, $a4, $80
13b72     81 93 A7 BF 
13b76     D2 EF 0B 25 
13b7a     3B 4F 63 6F 
13b7e     7B 50 10 EA | 	byte	$81, $93, $a7, $bf, $d2, $ef, $0b, $25, $3b, $4f, $63, $6f, $7b, $50, $10, $ea
13b82     F5 FF 0F 1F 
13b86     33 43 50 E0 
13b8a     CF D7 EE F9 
13b8e     02 E0 90 80 | 	byte	$f5, $ff, $0f, $1f, $33, $43, $50, $e0, $cf, $d7, $ee, $f9, $02, $e0, $90, $80
13b92     83 95 AB BF 
13b96     D2 F5 0F 27 
13b9a     3F 53 65 72 
13b9e     7B 50 00 EB | 	byte	$83, $95, $ab, $bf, $d2, $f5, $0f, $27, $3f, $53, $65, $72, $7b, $50, $00, $eb
13ba2     F6 03 13 23 
13ba6     35 46 48 E0 
13baa     CF DF EF FB 
13bae     03 E0 80 80 | 	byte	$f6, $03, $13, $23, $35, $46, $48, $e0, $cf, $df, $ef, $fb, $03, $e0, $80, $80
13bb2     83 97 AD BF 
13bb6     D3 F7 0F 2B 
13bba     3F 55 66 73 
13bbe     7D 50 F0 EB | 	byte	$83, $97, $ad, $bf, $d3, $f7, $0f, $2b, $3f, $55, $66, $73, $7d, $50, $f0, $eb
13bc2     F7 05 15 25 
13bc6     37 47 40 E0 
13bca     D2 E3 EF FB 
13bce     03 E0 80 80 | 	byte	$f7, $05, $15, $25, $37, $47, $40, $e0, $d2, $e3, $ef, $fb, $03, $e0, $80, $80
13bd2     86 97 AF C7 
13bd6     D3 FB 13 2B 
13bda     3F 57 67 75 
13bde     7D 50 E4 EC | 	byte	$86, $97, $af, $c7, $d3, $fb, $13, $2b, $3f, $57, $67, $75, $7d, $50, $e4, $ec
13be2     F7 07 17 27 
13be6     37 47 28 E0 
13bea     D2 E3 F1 FD 
13bee     04 E0 80 80 | 	byte	$f7, $07, $17, $27, $37, $47, $28, $e0, $d2, $e3, $f1, $fd, $04, $e0, $80, $80
13bf2     87 9B AF C7 
13bf6     D7 FD 17 2F 
13bfa     45 57 69 75 
13bfe     7E 50 E4 ED | 	byte	$87, $9b, $af, $c7, $d7, $fd, $17, $2f, $45, $57, $69, $75, $7e, $50, $e4, $ed
13c02     F9 07 17 27 
13c06     3A 4B 14 E0 
13c0a     D2 E6 F3 FD 
13c0e     05 D4 80 80 | 	byte	$f9, $07, $17, $27, $3a, $4b, $14, $e0, $d2, $e6, $f3, $fd, $05, $d4, $80, $80
13c12     87 9D B3 CB 
13c16     DF FF 17 2F 
13c1a     47 5B 6B 77 
13c1e     7F 40 E5 EF | 	byte	$87, $9d, $b3, $cb, $df, $ff, $17, $2f, $47, $5b, $6b, $77, $7f, $40, $e5, $ef
13c22     FB 07 17 2B 
13c26     3B 4A 0C E0 
13c2a     D5 E7 F5 FF 
13c2e     06 D0 80 80 | 	byte	$fb, $07, $17, $2b, $3b, $4a, $0c, $e0, $d5, $e7, $f5, $ff, $06, $d0, $80, $80
13c32     8B 9F B7 CF 
13c36     E7 FF 1B 33 
13c3a     47 5B 6B 77 
13c3e     7F 40 E5 EF | 	byte	$8b, $9f, $b7, $cf, $e7, $ff, $1b, $33, $47, $5b, $6b, $77, $7f, $40, $e5, $ef
13c42     FB 0B 1B 2B 
13c46     3D 44 0D E0 
13c4a     D7 E7 F5 FF 
13c4e     07 D0 80 80 | 	byte	$fb, $0b, $1b, $2b, $3d, $44, $0d, $e0, $d7, $e7, $f5, $ff, $07, $d0, $80, $80
13c52     8D 9F B7 CF 
13c56     EB FF 1F 36 
13c5a     4B 5F 6D 79 
13c5e     7F 20 E6 EF | 	byte	$8d, $9f, $b7, $cf, $eb, $ff, $1f, $36, $4b, $5f, $6d, $79, $7f, $20, $e6, $ef
13c62     FD 0B 1D 2D 
13c66     3F 40 0E E0 
13c6a     D7 EB F7 FF 
13c6e     06 C0 80 80 | 	byte	$fd, $0b, $1d, $2d, $3f, $40, $0e, $e0, $d7, $eb, $f7, $ff, $06, $c0, $80, $80
13c72     8F A3 BB CF 
13c76     EF 07 1F 37 
13c7a     4D 5F 6F 79 
13c7e     7E 00 E7 F1 | 	byte	$8f, $a3, $bb, $cf, $ef, $07, $1f, $37, $4d, $5f, $6f, $79, $7e, $00, $e7, $f1
13c82     FF 0D 1F 2F 
13c86     3F 20 0F E4 
13c8a     DD EB F7 FF 
13c8e     04 88 80 80 | 	byte	$ff, $0d, $1f, $2f, $3f, $20, $0f, $e4, $dd, $eb, $f7, $ff, $04, $88, $80, $80
13c92     8F A6 BD D2 
13c96     EF 07 1F 3B 
13c9a     4F 5F 6F 7A 
13c9e     78 00 E7 F3 | 	byte	$8f, $a6, $bd, $d2, $ef, $07, $1f, $3b, $4f, $5f, $6f, $7a, $78, $00, $e7, $f3
13ca2     FF 0F 1F 2F 
13ca6     3F 10 0F E8 
13caa     DF ED F9 FF 
13cae     00 88 80 81 | 	byte	$ff, $0f, $1f, $2f, $3f, $10, $0f, $e8, $df, $ed, $f9, $ff, $00, $88, $80, $81
13cb2     93 A7 BF D2 
13cb6     EF 0B 25 3B 
13cba     4F 63 6F 7B 
13cbe     70 00 E9 F3 | 	byte	$93, $a7, $bf, $d2, $ef, $0b, $25, $3b, $4f, $63, $6f, $7b, $70, $00, $e9, $f3
13cc2     FF 0F 1F 33 
13cc6     3F 05 13 E8 
13cca     DF EE FA 03 
13cce     F0 88 80 83 | 	byte	$ff, $0f, $1f, $33, $3f, $05, $13, $e8, $df, $ee, $fa, $03, $f0, $88, $80, $83
13cd2     95 AB BF D2 
13cd6     F5 0F 27 3F 
13cda     53 63 72 7B 
13cde     60 00 EA F5 | 	byte	$95, $ab, $bf, $d2, $f5, $0f, $27, $3f, $53, $63, $72, $7b, $60, $00, $ea, $f5
13ce2     FF 13 23 33 
13ce6     40 05 15 E8 
13cea     DF EF FB 03 
13cee     E0 88 80 85 | 	byte	$ff, $13, $23, $33, $40, $05, $15, $e8, $df, $ef, $fb, $03, $e0, $88, $80, $85
13cf2     97 AD BF D2 
13cf6     F7 0F 2B 3F 
13cfa     53 65 73 7C 
13cfe     44 00 EB F7 | 	byte	$97, $ad, $bf, $d2, $f7, $0f, $2b, $3f, $53, $65, $73, $7c, $44, $00, $eb, $f7
13d02     05 13 25 36 
13d06     30 06 17 E8 
13d0a     E3 EF FB 03 
13d0e     D2 88 80 87 | 	byte	$05, $13, $25, $36, $30, $06, $17, $e8, $e3, $ef, $fb, $03, $d2, $88, $80, $87
13d12     97 AF C7 D3 
13d16     FB 13 2B 3F 
13d1a     57 67 73 7C 
13d1e     38 00 EC F7 | 	byte	$97, $af, $c7, $d3, $fb, $13, $2b, $3f, $57, $67, $73, $7c, $38, $00, $ec, $f7
13d22     06 15 27 37 
13d26     20 07 17 E8 
13d2a     E3 F2 FD 02 
13d2e     D0 88 80 87 | 	byte	$06, $15, $27, $37, $20, $07, $17, $e8, $e3, $f2, $fd, $02, $d0, $88, $80, $87
13d32     9B AF C7 D7 
13d36     FD 17 2F 43 
13d3a     57 67 75 78 
13d3e     31 00 ED F9 | 	byte	$9b, $af, $c7, $d7, $fd, $17, $2f, $43, $57, $67, $75, $78, $31, $00, $ed, $f9
13d42     07 17 27 39 
13d46     10 07 1A E8 
13d4a     E6 F3 FD 00 
13d4e     B7 88 80 8B | 	byte	$07, $17, $27, $39, $10, $07, $1a, $e8, $e6, $f3, $fd, $00, $b7, $88, $80, $8b
13d52     9F B3 CB DF 
13d56     FF 17 2F 47 
13d5a     59 69 75 70 
13d5e     31 00 EF FB | 	byte	$9f, $b3, $cb, $df, $ff, $17, $2f, $47, $59, $69, $75, $70, $31, $00, $ef, $fb
13d62     07 17 29 3A 
13d66     00 0B 1B E8 
13d6a     E7 F3 FE F0 
13d6e     BB 88 80 8B | 	byte	$07, $17, $29, $3a, $00, $0b, $1b, $e8, $e7, $f3, $fe, $f0, $bb, $88, $80, $8b
13d72     9F B7 CF E7 
13d76     FF 1B 2F 47 
13d7a     5B 6B 76 60 
13d7e     31 00 EF FB | 	byte	$9f, $b7, $cf, $e7, $ff, $1b, $2f, $47, $5b, $6b, $76, $60, $31, $00, $ef, $fb
13d82     0B 1B 2B 36 
13d86     FB 0D 1D E8 
13d8a     E7 F5 FF E0 
13d8e     BB 88 80 8F | 	byte	$0b, $1b, $2b, $36, $fb, $0d, $1d, $e8, $e7, $f5, $ff, $e0, $bb, $88, $80, $8f
13d92     9F B7 CF EB 
13d96     FF 1D 33 49 
13d9a     5B 6B 77 48 
13d9e     33 00 EF FE | 	byte	$9f, $b7, $cf, $eb, $ff, $1d, $33, $49, $5b, $6b, $77, $48, $33, $00, $ef, $fe
13da2     0B 1B 2D 30 
13da6     FD 0F 1F E8 
13daa     E9 F6 FF D2 
13dae     BD 88 80 8F | 	byte	$0b, $1b, $2d, $30, $fd, $0f, $1f, $e8, $e9, $f6, $ff, $d2, $bd, $88, $80, $8f
13db2     A5 BB D1 ED 
13db6     07 1F 37 4B 
13dba     5D 6D 77 40 
13dbe     33 00 F3 FF | 	byte	$a5, $bb, $d1, $ed, $07, $1f, $37, $4b, $5d, $6d, $77, $40, $33, $00, $f3, $ff
13dc2     0E 1E 2F 20 
13dc6     FF 0F 1F F0 
13dca     EB F7 FF D0 
13dce     BE 88 81 93 | 	byte	$0e, $1e, $2f, $20, $ff, $0f, $1f, $f0, $eb, $f7, $ff, $d0, $be, $88, $81, $93
13dd2     A7 BF D2 EF 
13dd6     07 1F 37 4D 
13dda     5F 6D 74 30 
13dde     34 00 F3 FF | 	byte	$a7, $bf, $d2, $ef, $07, $1f, $37, $4d, $5f, $6d, $74, $30, $34, $00, $f3, $ff
13de2     0F 1F 2F 08 
13de6     FF 0F 1F F0 
13dea     EB F7 FA B5 
13dee     BF 90 83 95 | 	byte	$0f, $1f, $2f, $08, $ff, $0f, $1f, $f0, $eb, $f7, $fa, $b5, $bf, $90, $83, $95
13df2     A9 BF D2 EF 
13df6     0B 23 3B 4F 
13dfa     5F 6E 70 2E 
13dfe     35 00 F5 FF | 	byte	$a9, $bf, $d2, $ef, $0b, $23, $3b, $4f, $5f, $6e, $70, $2e, $35, $00, $f5, $ff
13e02     0F 1F 2F 00 
13e06     FF 13 23 F0 
13e0a     ED F7 F0 B7 
13e0e     BF 90 85 97 | 	byte	$0f, $1f, $2f, $00, $ff, $13, $23, $f0, $ed, $f7, $f0, $b7, $bf, $90, $85, $97
13e12     AB BF D2 F5 
13e16     0F 27 3B 4F 
13e1a     5F 6F 60 2E 
13e1e     36 00 F7 03 | 	byte	$ab, $bf, $d2, $f5, $0f, $27, $3b, $4f, $5f, $6f, $60, $2e, $36, $00, $f7, $03
13e22     13 23 2E F3 
13e26     FF 15 25 F0 
13e2a     EE F9 E0 B7 
13e2e     BF 90 87 99 | 	byte	$13, $23, $2e, $f3, $ff, $15, $25, $f0, $ee, $f9, $e0, $b7, $bf, $90, $87, $99
13e32     AF C5 D3 F7 
13e36     0F 27 3F 4F 
13e3a     5F 6F 48 2F 
13e3e     37 00 F7 05 | 	byte	$af, $c5, $d3, $f7, $0f, $27, $3f, $4f, $5f, $6f, $48, $2f, $37, $00, $f7, $05
13e42     13 23 28 F3 
13e46     05 17 26 F0 
13e4a     EF F9 D2 B9 
13e4e     C3 90 89 9B | 	byte	$13, $23, $28, $f3, $05, $17, $26, $f0, $ef, $f9, $d2, $b9, $c3, $90, $89, $9b
13e52     AF C7 D5 FB 
13e56     0F 2B 3F 53 
13e5a     63 6F 40 2F 
13e5e     39 00 F9 07 | 	byte	$af, $c7, $d5, $fb, $0f, $2b, $3f, $53, $63, $6f, $40, $2f, $39, $00, $f9, $07
13e62     16 27 20 F6 
13e66     07 17 27 F0 
13e6a     EF F9 D0 BB 
13e6e     C5 90 8B 9F | 	byte	$16, $27, $20, $f6, $07, $17, $27, $f0, $ef, $f9, $d0, $bb, $c5, $90, $8b, $9f
13e72     B3 CB D7 FB 
13e76     15 2B 3F 53 
13e7a     63 6E 2A 2F 
13e7e     39 00 FB 07 | 	byte	$b3, $cb, $d7, $fb, $15, $2b, $3f, $53, $63, $6e, $2a, $2f, $39, $00, $fb, $07
13e82     17 27 00 F7 
13e86     07 1B 29 F0 
13e8a     EF F8 B1 BB 
13e8e     C6 90 8F 9F | 	byte	$17, $27, $00, $f7, $07, $1b, $29, $f0, $ef, $f8, $b1, $bb, $c6, $90, $8f, $9f
13e92     B7 CD DF FF 
13e96     17 2F 3F 55 
13e9a     65 68 28 31 
13e9e     3B 00 FD 0A | 	byte	$b7, $cd, $df, $ff, $17, $2f, $3f, $55, $65, $68, $28, $31, $3b, $00, $fd, $0a
13ea2     19 27 00 F7 
13ea6     0B 1B 2A F0 
13eaa     F1 F0 B2 BD 
13eae     C7 90 8F A3 | 	byte	$19, $27, $00, $f7, $0b, $1b, $2a, $f0, $f1, $f0, $b2, $bd, $c7, $90, $8f, $a3
13eb2     B7 CF E7 FF 
13eb6     17 2F 43 57 
13eba     65 60 29 33 
13ebe     3B 00 FF 0B | 	byte	$b7, $cf, $e7, $ff, $17, $2f, $43, $57, $65, $60, $29, $33, $3b, $00, $ff, $0b
13ec2     1B 28 EB FB 
13ec6     0D 1D 2B F0 
13eca     F2 E0 B3 BF 
13ece     C9 90 93 A6 | 	byte	$1b, $28, $eb, $fb, $0d, $1d, $2b, $f0, $f2, $e0, $b3, $bf, $c9, $90, $93, $a6
13ed2     BB CF EB FF 
13ed6     1B 2F 46 57 
13eda     67 50 29 33 
13ede     3D 00 FF 0D | 	byte	$bb, $cf, $eb, $ff, $1b, $2f, $46, $57, $67, $50, $29, $33, $3d, $00, $ff, $0d
13ee2     1D 20 EB FD 
13ee6     0F 1F 2C F0 
13eea     F3 D4 B3 BF 
13eee     CB 90 95 A7 | 	byte	$1d, $20, $eb, $fd, $0f, $1f, $2c, $f0, $f3, $d4, $b3, $bf, $cb, $90, $95, $a7
13ef2     BF D2 ED 05 
13ef6     1D 33 47 57 
13efa     67 40 2A 35 
13efe     3F 00 FF 0F | 	byte	$bf, $d2, $ed, $05, $1d, $33, $47, $57, $67, $40, $2a, $35, $3f, $00, $ff, $0f
13f02     1E 10 ED FF 
13f06     0F 1F 2D F0 
13f0a     F3 D0 B5 BF 
13f0e     CD 94 97 AB | 	byte	$1e, $10, $ed, $ff, $0f, $1f, $2d, $f0, $f3, $d0, $b5, $bf, $cd, $94, $97, $ab
13f12     BF D2 EF 07 
13f16     1F 35 47 59 
13f1a     66 28 2B 36 
13f1e     3F 04 FF 0F | 	byte	$bf, $d2, $ef, $07, $1f, $35, $47, $59, $66, $28, $2b, $36, $3f, $04, $ff, $0f
13f22     1F 00 EF FF 
13f26     0F 1F 2F F0 
13f2a     F1 AC B7 C3 
13f2e     CF 98 99 AD | 	byte	$1f, $00, $ef, $ff, $0f, $1f, $2f, $f0, $f1, $ac, $b7, $c3, $cf, $98, $99, $ad
13f32     BF D2 EF 0B 
13f36     1F 37 49 5B 
13f3a     62 21 2B 37 
13f3e     3F 04 03 13 | 	byte	$bf, $d2, $ef, $0b, $1f, $37, $49, $5b, $62, $21, $2b, $37, $3f, $04, $03, $13
13f42     1F F0 EF FF 
13f46     13 23 2F F0 
13f4a     EC AD B7 C3 
13f4e     CF 98 9B AF | 	byte	$1f, $f0, $ef, $ff, $13, $23, $2f, $f0, $ec, $ad, $b7, $c3, $cf, $98, $9b, $af
13f52     C5 D2 F3 0B 
13f56     1F 37 4B 5B 
13f5a     58 21 2D 37 
13f5e     42 08 06 13 | 	byte	$c5, $d2, $f3, $0b, $1f, $37, $4b, $5b, $58, $21, $2d, $37, $42, $08, $06, $13
13f62     20 E3 EF FF 
13f66     15 23 30 F0 
13f6a     E0 AD B9 C6 
13f6e     D1 A0 9F AF | 	byte	$20, $e3, $ef, $ff, $15, $23, $30, $f0, $e0, $ad, $b9, $c6, $d1, $a0, $9f, $af
13f72     C7 D3 F7 0F 
13f76     25 39 4B 5B 
13f7a     48 22 2E 39 
13f7e     43 08 07 15 | 	byte	$c7, $d3, $f7, $0f, $25, $39, $4b, $5b, $48, $22, $2e, $39, $43, $08, $07, $15
13f82     1C E3 F3 05 
13f86     17 25 31 F0 
13f8a     D4 AF BB C7 
13f8e     D2 A0 9F B5 | 	byte	$1c, $e3, $f3, $05, $17, $25, $31, $f0, $d4, $af, $bb, $c7, $d2, $a0, $9f, $b5
13f92     CB D7 F7 0F 
13f96     27 3B 4D 5D 
13f9a     40 23 2F 3B 
13f9e     45 08 09 17 | 	byte	$cb, $d7, $f7, $0f, $27, $3b, $4d, $5d, $40, $23, $2f, $3b, $45, $08, $09, $17
13fa2     10 E3 F5 07 
13fa6     17 27 32 F0 
13faa     D0 AF BD C9 
13fae     D2 A0 A3 B7 | 	byte	$10, $e3, $f5, $07, $17, $27, $32, $f0, $d0, $af, $bd, $c9, $d2, $a0, $a3, $b7
13fb2     CD DF FB 0F 
13fb6     27 3D 4E 5D 
13fba     20 23 2F 3B 
13fbe     46 08 0B 17 | 	byte	$cd, $df, $fb, $0f, $27, $3d, $4e, $5d, $20, $23, $2f, $3b, $46, $08, $0b, $17
13fc2     00 E5 F7 07 
13fc6     17 27 32 F0 
13fca     A8 AF BF CB 
13fce     D2 A0 A6 BB | 	byte	$00, $e5, $f7, $07, $17, $27, $32, $f0, $a8, $af, $bf, $cb, $d2, $a0, $a6, $bb
13fd2     CF E7 FD 13 
13fd6     2A 3E 4F 5A 
13fda     19 25 2F 3D 
13fde     47 08 0D 1A | 	byte	$cf, $e7, $fd, $13, $2a, $3e, $4f, $5a, $19, $25, $2f, $3d, $47, $08, $0d, $1a
13fe2     E8 E7 F7 0B 
13fe6     1B 27 33 F0 
13fea     A6 B2 BF CD 
13fee     D3 A0 A7 BB | 	byte	$e8, $e7, $f7, $0b, $1b, $27, $33, $f0, $a6, $b2, $bf, $cd, $d3, $a0, $a7, $bb
13ff2     CF E7 FF 17 
13ff6     2B 3F 4F 50 
13ffa     17 25 33 3F 
13ffe     49 08 0E 1B | 	byte	$cf, $e7, $ff, $17, $2b, $3f, $4f, $50, $17, $25, $33, $3f, $49, $08, $0e, $1b
14002     E0 E9 FB 0B 
14006     1B 2B 34 E0 
1400a     A7 B3 BF CF 
1400e     D7 A0 AB BF | 	byte	$e0, $e9, $fb, $0b, $1b, $2b, $34, $e0, $a7, $b3, $bf, $cf, $d7, $a0, $ab, $bf
14012     D1 EB FF 17 
14016     2D 3F 4F 40 
1401a     19 27 33 3F 
1401e     4A 10 0F 18 | 	byte	$d1, $eb, $ff, $17, $2d, $3f, $4f, $40, $19, $27, $33, $3f, $4a, $10, $0f, $18
14022     DA EB FB 0D 
14026     1D 2B 34 D4 
1402a     A7 B5 C3 CF 
1402e     DF A1 AD BF | 	byte	$da, $eb, $fb, $0d, $1d, $2b, $34, $d4, $a7, $b5, $c3, $cf, $df, $a1, $ad, $bf
14032     D2 ED FF 1B 
14036     2F 3F 4F 30 
1403a     19 27 35 3F 
1403e     4C 10 0F 10 | 	byte	$d2, $ed, $ff, $1b, $2f, $3f, $4f, $30, $19, $27, $35, $3f, $4c, $10, $0f, $10
14042     DB ED FF 0F 
14046     1F 2B 34 D0 
1404a     A7 B7 C5 D1 
1404e     E2 A4 AF BF | 	byte	$db, $ed, $ff, $0f, $1f, $2b, $34, $d0, $a7, $b7, $c5, $d1, $e2, $a4, $af, $bf
14052     D2 EF 07 1B 
14056     2F 3F 51 20 
1405a     1B 27 37 43 
1405e     4E 10 13 00 | 	byte	$d2, $ef, $07, $1b, $2f, $3f, $51, $20, $1b, $27, $37, $43, $4e, $10, $13, $00
14062     DD EF FF 0F 
14066     1F 2D 34 D0 
1406a     AA B7 C7 D2 
1406e     E4 A5 B3 C7 | 	byte	$dd, $ef, $ff, $0f, $1f, $2d, $34, $d0, $aa, $b7, $c7, $d2, $e4, $a5, $b3, $c7
14072     D2 EF 07 1D 
14076     2F 3F 50 10 
1407a     1B 2A 37 44 
1407e     4F 10 13 E8 | 	byte	$d2, $ef, $07, $1d, $2f, $3f, $50, $10, $1b, $2a, $37, $44, $4f, $10, $13, $e8
14082     DF EF FF 0F 
14086     1F 2E 32 A0 
1408a     AB B9 C7 D2 
1408e     E6 A8 B5 C7 | 	byte	$df, $ef, $ff, $0f, $1f, $2e, $32, $a0, $ab, $b9, $c7, $d2, $e6, $a8, $b5, $c7
14092     D3 F3 09 1F 
14096     33 43 4A 0F 
1409a     1D 2B 39 45 
1409e     4F 10 15 D8 | 	byte	$d3, $f3, $09, $1f, $33, $43, $4a, $0f, $1d, $2b, $39, $45, $4f, $10, $15, $d8
140a2     DF F2 FF 13 
140a6     1F 2F 28 A0 
140aa     AB BB CB D2 
140ae     E7 A9 B7 CB | 	byte	$df, $f2, $ff, $13, $1f, $2f, $28, $a0, $ab, $bb, $cb, $d2, $e7, $a9, $b7, $cb
140b2     D7 F7 0B 1F 
140b6     33 43 40 0F 
140ba     1D 2B 3B 47 
140be     52 10 12 D5 | 	byte	$d7, $f7, $0b, $1f, $33, $43, $40, $0f, $1d, $2b, $3b, $47, $52, $10, $12, $d5
140c2     E3 F3 03 13 
140c6     23 2F 20 A1 
140ca     AD BD CD D3 
140ce     EB C0 BB CD | 	byte	$e3, $f3, $03, $13, $23, $2f, $20, $a1, $ad, $bd, $cd, $d3, $eb, $c0, $bb, $cd
140d2     DF F7 0D 1F 
140d6     33 45 30 0F 
140da     1F 2D 3B 47 
140de     53 10 08 D4 | 	byte	$df, $f7, $0d, $1f, $33, $45, $30, $0f, $1f, $2d, $3b, $47, $53, $10, $08, $d4
140e2     E5 F5 05 15 
140e6     23 2F 08 A1 
140ea     AF BF CF D7 
140ee     ED C0 BD CF | 	byte	$e5, $f5, $05, $15, $23, $2f, $08, $a1, $af, $bf, $cf, $d7, $ed, $c0, $bd, $cf
140f2     E6 FB 0F 23 
140f6     35 45 20 0F 
140fa     1F 2F 3D 4B 
140fe     54 12 00 D4 | 	byte	$e6, $fb, $0f, $23, $35, $45, $20, $0f, $1f, $2f, $3d, $4b, $54, $12, $00, $d4
14102     E7 F7 07 17 
14106     25 2F 00 A3 
1410a     AF BF CF DF 
1410e     EF C0 BF CF | 	byte	$e7, $f7, $07, $17, $25, $2f, $00, $a3, $af, $bf, $cf, $df, $ef, $c0, $bf, $cf
14112     E7 FB 0F 23 
14116     37 45 08 0F 
1411a     1F 2F 3F 4B 
1411e     56 14 E8 D5 | 	byte	$e7, $fb, $0f, $23, $37, $45, $08, $0f, $1f, $2f, $3f, $4b, $56, $14, $e8, $d5
14122     E7 F7 07 17 
14126     25 2E E8 A3 
1412a     B3 BF D1 E3 
1412e     F1 C0 BF D2 | 	byte	$e7, $f7, $07, $17, $25, $2e, $e8, $a3, $b3, $bf, $d1, $e3, $f1, $c0, $bf, $d2
14132     E9 FF 0F 25 
14136     37 40 03 12 
1413a     1F 2F 3F 4D 
1413e     58 14 D8 D5 | 	byte	$e9, $ff, $0f, $25, $37, $40, $03, $12, $1f, $2f, $3f, $4d, $58, $14, $d8, $d5
14142     E9 FA 09 17 
14146     26 28 E6 A5 
1414a     B3 C3 D2 E6 
1414e     F4 C0 BF D2 | 	byte	$e9, $fa, $09, $17, $26, $28, $e6, $a5, $b3, $c3, $d2, $e6, $f4, $c0, $bf, $d2
14152     EB FF 13 27 
14156     37 38 03 13 
1415a     23 33 3F 4F 
1415e     59 14 D4 D7 | 	byte	$eb, $ff, $13, $27, $37, $38, $03, $13, $23, $33, $3f, $4f, $59, $14, $d4, $d7
14162     EB FB 0B 1A 
14166     27 20 E6 A6 
1416a     B6 C7 D2 E7 
1416e     F6 D0 C7 D2 | 	byte	$eb, $fb, $0b, $1a, $27, $20, $e6, $a6, $b6, $c7, $d2, $e7, $f6, $d0, $c7, $d2
14172     ED FF 15 27 
14176     37 28 03 13 
1417a     23 33 43 4F 
1417e     5A 10 D2 D7 | 	byte	$ed, $ff, $15, $27, $37, $28, $03, $13, $23, $33, $43, $4f, $5a, $10, $d2, $d7
14182     ED FD 0D 1B 
14186     27 08 E8 A7 
1418a     B7 C7 D2 EB 
1418e     F8 D0 C7 D2 | 	byte	$ed, $fd, $0d, $1b, $27, $08, $e8, $a7, $b7, $c7, $d2, $eb, $f8, $d0, $c7, $d2
14192     EF FF 17 27 
14196     39 10 05 15 
1419a     25 36 45 53 
1419e     5C 00 D2 DF | 	byte	$ef, $ff, $17, $27, $39, $10, $05, $15, $25, $36, $45, $53, $5c, $00, $d2, $df
141a2     EF FF 0D 1B 
141a6     27 00 E8 A9 
141aa     B9 CB D3 ED 
141ae     FB D0 CB D3 | 	byte	$ef, $ff, $0d, $1b, $27, $00, $e8, $a9, $b9, $cb, $d3, $ed, $fb, $d0, $cb, $d3
141b2     EF 05 17 29 
141b6     39 00 05 17 
141ba     27 37 47 53 
141be     5E 00 D2 DF | 	byte	$ef, $05, $17, $29, $39, $00, $05, $17, $27, $37, $47, $53, $5e, $00, $d2, $df
141c2     EF FF 0F 1D 
141c6     27 E8 E8 AB 
141ca     BB CD D7 EF 
141ce     FD D0 CD D7 | 	byte	$ef, $ff, $0f, $1d, $27, $e8, $e8, $ab, $bb, $cd, $d7, $ef, $fd, $d0, $cd, $d7
141d2     F3 07 19 2B 
141d6     36 F8 07 17 
141da     27 37 47 55 
141de     5E E0 D2 E3 | 	byte	$f3, $07, $19, $2b, $36, $f8, $07, $17, $27, $37, $47, $55, $5e, $e0, $d2, $e3
141e2     F2 FF 0F 1D 
141e6     24 E3 E8 AD 
141ea     BD CF DF F2 
141ee     FF D0 CF DF | 	byte	$f2, $ff, $0f, $1d, $24, $e3, $e8, $ad, $bd, $cf, $df, $f2, $ff, $d0, $cf, $df
141f2     F5 07 1B 2B 
141f6     30 F7 07 17 
141fa     2A 3B 49 57 
141fe     5E D4 D2 E3 | 	byte	$f5, $07, $1b, $2b, $30, $f7, $07, $17, $2a, $3b, $49, $57, $5e, $d4, $d2, $e3
14202     F3 FF 0F 1E 
14206     18 E3 EA AF 
1420a     BF CF DF F3 
1420e     02 D1 CF E5 | 	byte	$f3, $ff, $0f, $1e, $18, $e3, $ea, $af, $bf, $cf, $df, $f3, $02, $d1, $cf, $e5
14212     F7 09 1B 2B 
14216     20 F7 07 1A 
1421a     2B 3B 4B 57 
1421e     58 D4 D2 E6 | 	byte	$f7, $09, $1b, $2b, $20, $f7, $07, $1a, $2b, $3b, $4b, $57, $58, $d4, $d2, $e6
14222     F5 03 12 1F 
14226     08 E5 EC AF 
1422a     BF D1 E6 F7 
1422e     04 D2 D1 E7 | 	byte	$f5, $03, $12, $1f, $08, $e5, $ec, $af, $bf, $d1, $e6, $f7, $04, $d2, $d1, $e7
14232     F7 0B 1D 2D 
14236     10 F7 09 1B 
1423a     2D 3E 4D 5B 
1423e     50 D4 D3 E7 | 	byte	$f7, $0b, $1d, $2d, $10, $f7, $09, $1b, $2d, $3e, $4d, $5b, $50, $d4, $d3, $e7
14242     F7 05 13 1F 
14246     00 E5 EC AF 
1424a     BF D2 E7 F9 
1424e     06 D1 D2 E7 | 	byte	$f7, $05, $13, $1f, $00, $e5, $ec, $af, $bf, $d2, $e7, $f9, $06, $d1, $d2, $e7
14252     FB 0B 1D 2D 
14256     00 F9 0B 1D 
1425a     2F 3F 4F 5B 
1425e     40 D4 D7 E9 | 	byte	$fb, $0b, $1d, $2d, $00, $f9, $0b, $1d, $2f, $3f, $4f, $5b, $40, $d4, $d7, $e9
14262     F7 06 13 1F 
14266     E0 E7 EC B3 
1426a     C5 D2 EB FB 
1426e     08 D2 D2 EB | 	byte	$f7, $06, $13, $1f, $e0, $e7, $ec, $b3, $c5, $d2, $eb, $fb, $08, $d2, $d2, $eb
14272     FB 0D 1F 2C 
14276     F0 FB 0B 1F 
1427a     2F 3F 4F 5D 
1427e     28 D4 DB EB | 	byte	$fb, $0d, $1f, $2c, $f0, $fb, $0b, $1f, $2f, $3f, $4f, $5d, $28, $d4, $db, $eb
14282     F9 07 15 1C 
14286     DC E7 F0 B5 
1428a     C7 D2 ED FF 
1428e     0A D2 D3 EB | 	byte	$f9, $07, $15, $1c, $dc, $e7, $f0, $b5, $c7, $d2, $ed, $ff, $0a, $d2, $d3, $eb
14292     FE 0F 1F 28 
14296     EB FB 0D 1F 
1429a     2F 3F 4F 5D 
1429e     20 D5 DF ED | 	byte	$fe, $0f, $1f, $28, $eb, $fb, $0d, $1f, $2f, $3f, $4f, $5d, $20, $d5, $df, $ed
142a2     FB 07 15 14 
142a6     DB E9 F0 B7 
142aa     CA D3 EF FF 
142ae     0C D2 D7 EF | 	byte	$fb, $07, $15, $14, $db, $e9, $f0, $b7, $ca, $d3, $ef, $ff, $0c, $d2, $d7, $ef
142b2     FF 0F 1F 20 
142b6     EB FB 0F 1F 
142ba     33 43 53 58 
142be     18 D6 DF EE | 	byte	$ff, $0f, $1f, $20, $eb, $fb, $0f, $1f, $33, $43, $53, $58, $18, $d6, $df, $ee
142c2     FB 09 17 04 
142c6     DB EB F0 B7 
142ca     CB D7 EF FF 
142ce     0E D4 DF EF | 	byte	$fb, $09, $17, $04, $db, $eb, $f0, $b7, $cb, $d7, $ef, $ff, $0e, $d4, $df, $ef
142d2     FF 0F 1F 08 
142d6     EB FD 0F 1F 
142da     33 45 55 50 
142de     18 D6 DF EF | 	byte	$ff, $0f, $1f, $08, $eb, $fd, $0f, $1f, $33, $45, $55, $50, $18, $d6, $df, $ef
142e2     FD 0B 17 00 
142e6     DD ED F0 BB 
142ea     CF DF F5 05 
142ee     10 D5 DF EF | 	byte	$fd, $0b, $17, $00, $dd, $ed, $f0, $bb, $cf, $df, $f5, $05, $10, $d5, $df, $ef
142f2     FF 12 1F 00 
142f6     ED FF 0F 23 
142fa     37 47 57 40 
142fe     18 D8 E3 EF | 	byte	$ff, $12, $1f, $00, $ed, $ff, $0f, $23, $37, $47, $57, $40, $18, $d8, $e3, $ef
14302     FF 0B 17 E0 
14306     DF EF F0 BD 
1430a     CF E5 F7 07 
1430e     14 D6 E3 F3 | 	byte	$ff, $0b, $17, $e0, $df, $ef, $f0, $bd, $cf, $e5, $f7, $07, $14, $d6, $e3, $f3
14312     FF 13 1F E4 
14316     EE FF 13 25 
1431a     37 47 57 28 
1431e     1A D9 E5 F2 | 	byte	$ff, $13, $1f, $e4, $ee, $ff, $13, $25, $37, $47, $57, $28, $1a, $d9, $e5, $f2
14322     FF 0B 16 D6 
14326     DF EF F4 BF 
1432a     D1 E7 F9 0B 
1432e     14 D7 E5 F5 | 	byte	$ff, $0b, $16, $d6, $df, $ef, $f4, $bf, $d1, $e7, $f9, $0b, $14, $d7, $e5, $f5
14332     03 13 1C DF 
14336     EF FF 13 27 
1433a     37 4A 58 20 
1433e     1C DB E6 F3 | 	byte	$03, $13, $1c, $df, $ef, $ff, $13, $27, $37, $4a, $58, $20, $1c, $db, $e6, $f3
14342     FF 0D 10 D4 
14346     DF EF F8 C1 
1434a     D2 E9 FB 0D 
1434e     18 D8 E7 F7 | 	byte	$ff, $0d, $10, $d4, $df, $ef, $f8, $c1, $d2, $e9, $fb, $0d, $18, $d8, $e7, $f7
14352     05 15 14 DF 
14356     EF FF 15 27 
1435a     3B 4B 54 17 
1435e     1C DC E7 F5 | 	byte	$05, $15, $14, $df, $ef, $ff, $15, $27, $3b, $4b, $54, $17, $1c, $dc, $e7, $f5
14362     FF 0E 00 D3 
14366     E3 F3 F8 C3 
1436a     D2 EB FF 0F 
1436e     18 DA E7 F7 | 	byte	$ff, $0e, $00, $d3, $e3, $f3, $f8, $c3, $d2, $eb, $ff, $0f, $18, $da, $e7, $f7
14372     07 15 00 DF 
14376     EF FF 17 2A 
1437a     3B 4D 50 17 
1437e     20 DE E9 F6 | 	byte	$07, $15, $00, $df, $ef, $ff, $17, $2a, $3b, $4d, $50, $17, $20, $de, $e9, $f6
14382     FF 0F 00 D2 
14386     E3 F5 F8 C5 
1438a     D2 EF FF 0F 
1438e     1C DC EA F7 | 	byte	$ff, $0f, $00, $d2, $e3, $f5, $f8, $c5, $d2, $ef, $ff, $0f, $1c, $dc, $ea, $f7
14392     07 15 F0 DF 
14396     EF 03 17 2B 
1439a     3F 4F 40 19 
1439e     20 E0 EB F7 | 	byte	$07, $15, $f0, $df, $ef, $03, $17, $2b, $3f, $4f, $40, $19, $20, $e0, $eb, $f7
143a2     03 0F E0 D2 
143a6     E5 F7 00 C8 
143aa     D3 EF FF 13 
143ae     1C DE EB FB | 	byte	$03, $0f, $e0, $d2, $e5, $f7, $00, $c8, $d3, $ef, $ff, $13, $1c, $de, $eb, $fb
143b2     07 16 E0 DF 
143b6     F3 07 19 2D 
143ba     3F 4F 28 1B 
143be     20 E1 EB F7 | 	byte	$07, $16, $e0, $df, $f3, $07, $19, $2d, $3f, $4f, $28, $1b, $20, $e1, $eb, $f7
143c2     03 0E D4 D2 
143c6     E7 F7 00 D0 
143ca     D7 F3 05 17 
143ce     20 E0 ED FB | 	byte	$03, $0e, $d4, $d2, $e7, $f7, $00, $d0, $d7, $f3, $05, $17, $20, $e0, $ed, $fb
143d2     09 14 D6 DF 
143d6     F3 07 1B 2F 
143da     3F 51 18 1D 
143de     22 E2 ED F9 | 	byte	$09, $14, $d6, $df, $f3, $07, $1b, $2f, $3f, $51, $18, $1d, $22, $e2, $ed, $f9
143e2     05 0A D2 D2 
143e6     E7 FB 00 D2 
143ea     DF F7 07 17 
143ee     20 E1 EF FD | 	byte	$05, $0a, $d2, $d2, $e7, $fb, $00, $d2, $df, $f7, $07, $17, $20, $e1, $ef, $fd
143f2     0A 0C D3 E3 
143f6     F5 07 1D 2F 
143fa     3F 50 11 1F 
143fe     24 E3 EF FB | 	byte	$0a, $0c, $d3, $e3, $f5, $07, $1d, $2f, $3f, $50, $11, $1f, $24, $e3, $ef, $fb
14402     06 00 D0 D2 
14406     EB FD 00 D2 
1440a     E5 F7 0B 1B 
1440e     20 E3 EF FE | 	byte	$06, $00, $d0, $d2, $eb, $fd, $00, $d2, $e5, $f7, $0b, $1b, $20, $e3, $ef, $fe
14412     0B 00 D2 E3 
14416     F7 0B 1F 2F 
1441a     43 48 13 1F 
1441e     24 E5 EF FB | 	byte	$0b, $00, $d2, $e3, $f7, $0b, $1f, $2f, $43, $48, $13, $1f, $24, $e5, $ef, $fb
14422     07 F0 CB D2 
14426     ED FF 00 D2 
1442a     E7 FB 0D 1D 
1442e     24 E5 F1 FF | 	byte	$07, $f0, $cb, $d2, $ed, $ff, $00, $d2, $e7, $fb, $0d, $1d, $24, $e5, $f1, $ff
14432     0B F0 D2 E5 
14436     F7 0B 1F 33 
1443a     47 40 13 23 
1443e     28 E7 EF FD | 	byte	$0b, $f0, $d2, $e5, $f7, $0b, $1f, $33, $47, $40, $13, $23, $28, $e7, $ef, $fd
14442     07 E0 CD D3 
14446     EF FF 00 D3 
1444a     E9 FD 0F 1F 
1444e     24 E7 F3 FF | 	byte	$07, $e0, $cd, $d3, $ef, $ff, $00, $d3, $e9, $fd, $0f, $1f, $24, $e7, $f3, $ff
14452     0B D8 D2 E7 
14456     F9 0D 1F 35 
1445a     47 24 16 23 
1445e     28 E7 F2 FD | 	byte	$0b, $d8, $d2, $e7, $f9, $0d, $1f, $35, $47, $24, $16, $23, $28, $e7, $f2, $fd
14462     07 D2 CE D5 
14466     EF FF 00 D5 
1446a     EB FF 0F 1F 
1446e     28 E8 F3 FF | 	byte	$07, $d2, $ce, $d5, $ef, $ff, $00, $d5, $eb, $ff, $0f, $1f, $28, $e8, $f3, $ff
14472     0A D2 D2 E7 
14476     FB 0F 23 37 
1447a     47 10 17 26 
1447e     28 E9 F3 FF | 	byte	$0a, $d2, $d2, $e7, $fb, $0f, $23, $37, $47, $10, $17, $26, $28, $e9, $f3, $ff
14482     04 D0 CF D7 
14486     F3 05 04 D7 
1448a     EF FF 13 23 
1448e     28 EA F5 FF | 	byte	$04, $d0, $cf, $d7, $f3, $05, $04, $d7, $ef, $ff, $13, $23, $28, $ea, $f5, $ff
14492     04 D1 D2 E7 
14496     FB 0F 25 37 
1449a     48 0B 19 27 
1449e     2A EB F5 FF | 	byte	$04, $d1, $d2, $e7, $fb, $0f, $25, $37, $48, $0b, $19, $27, $2a, $eb, $f5, $ff
144a2     00 C1 CF DF 
144a6     F3 07 08 DD 
144aa     EF 05 17 25 
144ae     28 EB F7 FF | 	byte	$00, $c1, $cf, $df, $f3, $07, $08, $dd, $ef, $05, $17, $25, $28, $eb, $f7, $ff
144b2     00 C7 D2 EB 
144b6     FE 0F 27 3B 
144ba     40 0B 1B 29 
144be     2C EC F5 FF | 	byte	$00, $c7, $d2, $eb, $fe, $0f, $27, $3b, $40, $0b, $1b, $29, $2c, $ec, $f5, $ff
144c2     F0 BF CF E3 
144c6     F7 09 08 DF 
144ca     F3 07 17 27 
144ce     2C ED F7 FF | 	byte	$f0, $bf, $cf, $e3, $f7, $09, $08, $df, $f3, $07, $17, $27, $2c, $ed, $f7, $ff
144d2     E8 C7 D2 EB 
144d6     FF 13 27 3B 
144da     34 0D 1D 2B 
144de     30 ED F7 FF | 	byte	$e8, $c7, $d2, $eb, $ff, $13, $27, $3b, $34, $0d, $1d, $2b, $30, $ed, $f7, $ff
144e2     E0 C3 D1 E5 
144e6     F7 0B 08 DF 
144ea     F7 09 1B 29 
144ee     2C EE F7 03 | 	byte	$e0, $c3, $d1, $e5, $f7, $0b, $08, $df, $f7, $09, $1b, $29, $2c, $ee, $f7, $03
144f2     D4 C9 D2 ED 
144f6     FF 15 2A 3D 
144fa     20 0F 1F 2D 
144fe     30 EF F7 FF | 	byte	$d4, $c9, $d2, $ed, $ff, $15, $2a, $3d, $20, $0f, $1f, $2d, $30, $ef, $f7, $ff
14502     D2 C5 D2 E7 
14506     FB 0F 08 E3 
1450a     F7 0B 1D 2B 
1450e     30 EF F9 03 | 	byte	$d2, $c5, $d2, $e7, $fb, $0f, $08, $e3, $f7, $0b, $1d, $2b, $30, $ef, $f9, $03
14512     D2 CB D2 EF 
14516     FF 17 2B 3F 
1451a     10 0F 1F 2E 
1451e     30 EF F7 FF | 	byte	$d2, $cb, $d2, $ef, $ff, $17, $2b, $3f, $10, $0f, $1f, $2e, $30, $ef, $f7, $ff
14522     D0 C7 D2 E7 
14526     FD 0F 10 E7 
1452a     FB 0F 1F 2D 
1452e     30 EF FA 00 | 	byte	$d0, $c7, $d2, $e7, $fd, $0f, $10, $e7, $fb, $0f, $1f, $2d, $30, $ef, $fa, $00
14532     C0 CB D3 EF 
14536     FF 17 2D 3F 
1453a     04 13 1F 2F 
1453e     30 EF F9 F8 | 	byte	$c0, $cb, $d3, $ef, $ff, $17, $2d, $3f, $04, $13, $1f, $2f, $30, $ef, $f9, $f8
14542     BA C7 D2 EB 
14546     FF 13 10 E9 
1454a     FE 0F 1F 2F 
1454e     30 F1 FB F8 | 	byte	$ba, $c7, $d2, $eb, $ff, $13, $10, $e9, $fe, $0f, $1f, $2f, $30, $f1, $fb, $f8
14552     BD CB D3 EF 
14556     05 1B 2F 38 
1455a     03 13 23 2F 
1455e     30 F1 FA F0 | 	byte	$bd, $cb, $d3, $ef, $05, $1b, $2f, $38, $03, $13, $23, $2f, $30, $f1, $fa, $f0
14562     BB C9 D2 ED 
14566     FF 15 10 EB 
1456a     FF 13 23 2F 
1456e     30 F2 FB E4 | 	byte	$bb, $c9, $d2, $ed, $ff, $15, $10, $eb, $ff, $13, $23, $2f, $30, $f2, $fb, $e4
14572     BF CD D7 F3 
14576     07 1B 2F 30 
1457a     03 17 25 33 
1457e     30 F2 FB E0 | 	byte	$bf, $cd, $d7, $f3, $07, $1b, $2f, $30, $03, $17, $25, $33, $30, $f2, $fb, $e0
14582     BD CB D3 EF 
14586     FF 17 10 EF 
1458a     FF 15 25 33 
1458e     30 F3 FB D4 | 	byte	$bd, $cb, $d3, $ef, $ff, $17, $10, $ef, $ff, $15, $25, $33, $30, $f3, $fb, $d4
14592     BF CF D7 F3 
14596     07 1D 2F 20 
1459a     06 17 27 33 
1459e     30 F3 FB D2 | 	byte	$bf, $cf, $d7, $f3, $07, $1d, $2f, $20, $06, $17, $27, $33, $30, $f3, $fb, $d2
145a2     BD CB D5 EF 
145a6     07 1B 10 EF 
145aa     05 17 27 33 
145ae     30 F3 FC D2 | 	byte	$bd, $cb, $d5, $ef, $07, $1b, $10, $ef, $05, $17, $27, $33, $30, $f3, $fc, $d2
145b2     BF CF DF F5 
145b6     0B 1F 33 08 
145ba     07 19 29 35 
145be     30 F4 FA D0 | 	byte	$bf, $cf, $df, $f5, $0b, $1f, $33, $08, $07, $19, $29, $35, $30, $f4, $fa, $d0
145c2     BF CE D7 F3 
145c6     07 1D 10 F3 
145ca     07 19 27 35 
145ce     30 F5 FA C0 | 	byte	$bf, $ce, $d7, $f3, $07, $1d, $10, $f3, $07, $19, $27, $35, $30, $f5, $fa, $c0
145d2     BF CF DF F7 
145d6     0B 1F 34 00 
145da     09 1B 2B 37 
145de     30 F5 F8 B3 | 	byte	$bf, $cf, $df, $f7, $0b, $1f, $34, $00, $09, $1b, $2b, $37, $30, $f5, $f8, $b3
145e2     BF CF DF F7 
145e6     0B 1F 10 F5 
145ea     07 1B 2B 37 
145ee     30 F5 F0 B3 | 	byte	$bf, $cf, $df, $f7, $0b, $1f, $10, $f5, $07, $1b, $2b, $37, $30, $f5, $f0, $b3
145f2     BF CF E5 F7 
145f6     0D 1F 30 F9 
145fa     0B 1D 2B 37 
145fe     34 F5 F0 B3 | 	byte	$bf, $cf, $e5, $f7, $0d, $1f, $30, $f9, $0b, $1d, $2b, $37, $34, $f5, $f0, $b3
14602     BF CF E5 F7 
14606     0D 1F 18 F7 
1460a     0B 1D 2D 37 
1460e     34 F6 E0 B5 | 	byte	$bf, $cf, $e5, $f7, $0d, $1f, $18, $f7, $0b, $1d, $2d, $37, $34, $f6, $e0, $b5
14612     BF D1 E7 FB 
14616     0F 23 28 FB 
1461a     0D 1F 2D 39 
1461e     34 F7 E0 B5 | 	byte	$bf, $d1, $e7, $fb, $0f, $23, $28, $fb, $0d, $1f, $2d, $39, $34, $f7, $e0, $b5
14622     BF D1 E7 FB 
14626     0F 23 20 FB 
1462a     0F 1F 2F 3A 
1462e     34 F7 D4 B5 | 	byte	$bf, $d1, $e7, $fb, $0f, $23, $20, $fb, $0f, $1f, $2f, $3a, $34, $f7, $d4, $b5
14632     C3 D2 E7 FB 
14636     0F 26 18 FB 
1463a     0F 1F 2F 3B 
1463e     34 F7 D2 B7 | 	byte	$c3, $d2, $e7, $fb, $0f, $26, $18, $fb, $0f, $1f, $2f, $3b, $34, $f7, $d2, $b7
14642     C3 D2 E7 FD 
14646     0F 27 20 FD 
1464a     0F 1F 2F 3B 
1464e     34 F7 D0 B7 | 	byte	$c3, $d2, $e7, $fd, $0f, $27, $20, $fd, $0f, $1f, $2f, $3b, $34, $f7, $d0, $b7
14652     C5 D2 E7 FD 
14656     13 27 00 FE 
1465a     0F 1F 2F 3B 
1465e     34 F7 D0 B7 | 	byte	$c5, $d2, $e7, $fd, $13, $27, $00, $fe, $0f, $1f, $2f, $3b, $34, $f7, $d0, $b7
14662     C6 D2 EB FF 
14666     13 29 20 FF 
1466a     13 23 31 3D 
1466e     34 F6 C0 B7 | 	byte	$c6, $d2, $eb, $ff, $13, $29, $20, $ff, $13, $23, $31, $3d, $34, $f6, $c0, $b7
14672     C6 D2 EB FF 
14676     13 27 F0 FF 
1467a     13 23 32 3D 
1467e     38 F4 AD B7 | 	byte	$c6, $d2, $eb, $ff, $13, $27, $f0, $ff, $13, $23, $32, $3d, $38, $f4, $ad, $b7
14682     C7 D2 ED FF 
14686     17 2B 20 FF 
1468a     15 25 33 3D 
1468e     34 F0 AD B7 | 	byte	$c7, $d2, $ed, $ff, $17, $2b, $20, $ff, $15, $25, $33, $3d, $34, $f0, $ad, $b7
14692     C7 D2 EB FF 
14696     16 26 EE FF 
1469a     15 25 33 3E 
1469e     38 F0 AE BA | 	byte	$c7, $d2, $eb, $ff, $16, $26, $ee, $ff, $15, $25, $33, $3e, $38, $f0, $ae, $ba
146a2     C7 D2 EF FF 
146a6     17 2F 20 FF 
146aa     17 27 35 3F 
146ae     34 E4 AD B9 | 	byte	$c7, $d2, $ef, $ff, $17, $2f, $20, $ff, $17, $27, $35, $3f, $34, $e4, $ad, $b9
146b2     C7 D2 ED FF 
146b6     17 20 EF FF 
146ba     17 27 33 3F 
146be     38 E0 AF BB | 	byte	$c7, $d2, $ed, $ff, $17, $20, $ef, $ff, $17, $27, $33, $3f, $38, $e0, $af, $bb
146c2     CB D3 EF 07 
146c6     1B 2F 20 07 
146ca     17 27 35 3F 
146ce     34 D4 AE BB | 	byte	$cb, $d3, $ef, $07, $1b, $2f, $20, $07, $17, $27, $35, $3f, $34, $d4, $ae, $bb
146d2     C9 D2 EF FF 
146d6     17 10 EF 05 
146da     17 27 36 3F 
146de     38 D2 AF BD | 	byte	$c9, $d2, $ef, $ff, $17, $10, $ef, $05, $17, $27, $36, $3f, $38, $d2, $af, $bd
146e2     CD D7 F3 07 
146e6     1F 33 20 07 
146ea     1B 2B 37 3F 
146ee     34 D2 AF BB | 	byte	$cd, $d7, $f3, $07, $1f, $33, $20, $07, $1b, $2b, $37, $3f, $34, $d2, $af, $bb
146f2     CB D3 EF 05 
146f6     1B 00 EF 07 
146fa     19 2A 37 3F 
146fe     38 D0 AF BF | 	byte	$cb, $d3, $ef, $05, $1b, $00, $ef, $07, $19, $2a, $37, $3f, $38, $d0, $af, $bf
14702     CF DF F7 0B 
14706     1F 37 20 0B 
1470a     1D 2B 37 3F 
1470e     34 C0 AF BD | 	byte	$cf, $df, $f7, $0b, $1f, $37, $20, $0b, $1d, $2b, $37, $3f, $34, $c0, $af, $bd
14712     CB D5 F3 07 
14716     1B E8 F3 07 
1471a     1B 2B 37 3F 
1471e     30 C0 B3 BF | 	byte	$cb, $d5, $f3, $07, $1b, $e8, $f3, $07, $1b, $2b, $37, $3f, $30, $c0, $b3, $bf
14722     CF DF F7 0F 
14726     23 37 20 0D 
1472a     1F 2E 39 41 
1472e     30 A7 AF BF | 	byte	$cf, $df, $f7, $0f, $23, $37, $20, $0d, $1f, $2e, $39, $41, $30, $a7, $af, $bf
14732     CD D7 F3 07 
14736     1A E2 F7 0B 
1473a     1D 2D 39 42 
1473e     30 A9 B3 BF | 	byte	$cd, $d7, $f3, $07, $1a, $e2, $f7, $0b, $1d, $2d, $39, $42, $30, $a9, $b3, $bf
14742     D1 E7 FB 0F 
14746     27 3B 20 0F 
1474a     1F 2F 3B 43 
1474e     30 A7 B1 BF | 	byte	$d1, $e7, $fb, $0f, $27, $3b, $20, $0f, $1f, $2f, $3b, $43, $30, $a7, $b1, $bf
14752     CF DF F6 0B 
14756     14 E3 F7 0B 
1475a     1F 2E 3B 43 
1475e     20 AA B5 C3 | 	byte	$cf, $df, $f6, $0b, $14, $e3, $f7, $0b, $1f, $2e, $3b, $43, $20, $aa, $b5, $c3
14762     D2 E7 FD 13 
14766     27 3D 20 0F 
1476a     1F 2F 3B 43 
1476e     20 A8 B3 BF | 	byte	$d2, $e7, $fd, $13, $27, $3d, $20, $0f, $1f, $2f, $3b, $43, $20, $a8, $b3, $bf
14772     CF DF F7 0B 
14776     08 E3 F9 0E 
1477a     1F 2F 3B 43 
1477e     10 AB B7 C5 | 	byte	$cf, $df, $f7, $0b, $08, $e3, $f9, $0e, $1f, $2f, $3b, $43, $10, $ab, $b7, $c5
14782     D2 EB FF 15 
14786     2B 3F 20 13 
1478a     23 32 3D 43 
1478e     00 A9 B3 BF | 	byte	$d2, $eb, $ff, $15, $2b, $3f, $20, $13, $23, $32, $3d, $43, $00, $a9, $b3, $bf
14792     CF E5 F7 0E 
14796     00 E5 FB 0F 
1479a     1F 2F 3C 43 
1479e     00 AD B7 C7 | 	byte	$cf, $e5, $f7, $0e, $00, $e5, $fb, $0f, $1f, $2f, $3c, $43, $00, $ad, $b7, $c7
147a2     D2 ED FF 17 
147a6     2D 3F 28 15 
147aa     25 33 3D 43 
147ae     00 AA B5 BF | 	byte	$d2, $ed, $ff, $17, $2d, $3f, $28, $15, $25, $33, $3d, $43, $00, $aa, $b5, $bf
147b2     D1 E7 FB 0F 
147b6     E0 E7 FD 0F 
147ba     23 31 3D 43 
147be     00 AE BA C7 | 	byte	$d1, $e7, $fb, $0f, $e0, $e7, $fd, $0f, $23, $31, $3d, $43, $00, $ae, $ba, $c7
147c2     D2 EF FF 1B 
147c6     2F 43 28 17 
147ca     27 33 3F 40 
147ce     E0 AB B6 C3 | 	byte	$d2, $ef, $ff, $1b, $2f, $43, $28, $17, $27, $33, $3f, $40, $e0, $ab, $b6, $c3
147d2     D2 E7 FB 0F 
147d6     D8 E9 FF 13 
147da     23 33 3E 40 
147de     E0 AF BB CB | 	byte	$d2, $e7, $fb, $0f, $d8, $e9, $ff, $13, $23, $33, $3e, $40, $e0, $af, $bb, $cb
147e2     D3 EF 07 1D 
147e6     33 47 28 17 
147ea     27 35 3F 40 
147ee     E0 AB B7 C5 | 	byte	$d3, $ef, $07, $1d, $33, $47, $28, $17, $27, $35, $3f, $40, $e0, $ab, $b7, $c5
147f2     D2 E9 FF 08 
147f6     D5 EB FF 13 
147fa     25 33 3F 38 
147fe     E0 AF BD CD | 	byte	$d2, $e9, $ff, $08, $d5, $eb, $ff, $13, $25, $33, $3f, $38, $e0, $af, $bd, $cd
14802     D7 F3 09 1F 
14806     35 47 28 1B 
1480a     2A 37 3F 30 
1480e     E0 AD B7 C7 | 	byte	$d7, $f3, $09, $1f, $35, $47, $28, $1b, $2a, $37, $3f, $30, $e0, $ad, $b7, $c7
14812     D2 EB FF 00 
14816     D5 ED FF 16 
1481a     27 35 3F 20 
1481e     E0 B2 BF CF | 	byte	$d2, $eb, $ff, $00, $d5, $ed, $ff, $16, $27, $35, $3f, $20, $e0, $b2, $bf, $cf
14822     DF F7 0B 1F 
14826     37 4B 28 1B 
1482a     2B 37 3F 20 
1482e     E0 AE B9 C7 | 	byte	$df, $f7, $0b, $1f, $37, $4b, $28, $1b, $2b, $37, $3f, $20, $e0, $ae, $b9, $c7
14832     D2 ED FF F0 
14836     D5 EF FF 17 
1483a     27 35 3F 10 
1483e     E0 B3 BF CF | 	byte	$d2, $ed, $ff, $f0, $d5, $ef, $ff, $17, $27, $35, $3f, $10, $e0, $b3, $bf, $cf
14842     E5 F7 0F 23 
14846     39 4D 30 1D 
1484a     2D 37 3F 00 
1484e     E0 AF BB C9 | 	byte	$e5, $f7, $0f, $23, $39, $4d, $30, $1d, $2d, $37, $3f, $00, $e0, $af, $bb, $c9
14852     D2 EF FF D8 
14856     D3 EF 05 17 
1485a     29 37 3F 00 
1485e     E0 B5 BF D1 | 	byte	$d2, $ef, $ff, $d8, $d3, $ef, $05, $17, $29, $37, $3f, $00, $e0, $b5, $bf, $d1
14862     E7 FB 0F 27 
14866     3B 4F 30 1F 
1486a     2E 39 3F 00 
1486e     E0 AF BD CB | 	byte	$e7, $fb, $0f, $27, $3b, $4f, $30, $1f, $2e, $39, $3f, $00, $e0, $af, $bd, $cb
14872     D3 EF FF D2 
14876     D3 F3 07 1B 
1487a     2B 37 3C F8 
1487e     E0 B7 C5 D2 | 	byte	$d3, $ef, $ff, $d2, $d3, $f3, $07, $1b, $2b, $37, $3c, $f8, $e0, $b7, $c5, $d2
14882     E7 FF 13 27 
14886     3F 4F 30 1F 
1488a     2F 3A 38 F5 
1488e     E0 AF BE CD | 	byte	$e7, $ff, $13, $27, $3f, $4f, $30, $1f, $2f, $3a, $38, $f5, $e0, $af, $be, $cd
14892     D5 EF 00 D2 
14896     D3 F5 07 1B 
1489a     2B 37 38 F7 
1489e     E0 B7 C7 D2 | 	byte	$d5, $ef, $00, $d2, $d3, $f5, $07, $1b, $2b, $37, $38, $f7, $e0, $b7, $c7, $d2
148a2     EB FF 17 2B 
148a6     3F 53 30 1F 
148aa     2F 3B 30 F5 
148ae     E0 B2 BF CF | 	byte	$eb, $ff, $17, $2b, $3f, $53, $30, $1f, $2f, $3b, $30, $f5, $e0, $b2, $bf, $cf
148b2     D7 F3 F4 C7 
148b6     D7 F7 0B 1D 
148ba     2D 39 28 F8 
148be     E4 BA C7 D2 | 	byte	$d7, $f3, $f4, $c7, $d7, $f7, $0b, $1d, $2d, $39, $28, $f8, $e4, $ba, $c7, $d2
148c2     EF FF 17 2F 
148c6     3F 56 30 23 
148ca     2F 3B 20 F6 
148ce     E0 B3 BF CF | 	byte	$ef, $ff, $17, $2f, $3f, $56, $30, $23, $2f, $3b, $20, $f6, $e0, $b3, $bf, $cf
148d2     DF F5 E0 CB 
148d6     D7 F7 0B 1F 
148da     2D 3A 10 F9 
148de     E8 BB CB D3 | 	byte	$df, $f5, $e0, $cb, $d7, $f7, $0b, $1f, $2d, $3a, $10, $f9, $e8, $bb, $cb, $d3
148e2     EF 05 1B 2F 
148e6     45 57 30 25 
148ea     32 3B 08 F7 
148ee     E0 B5 BF CF | 	byte	$ef, $05, $1b, $2f, $45, $57, $30, $25, $32, $3b, $08, $f7, $e0, $b5, $bf, $cf
148f2     DF F7 D4 CD 
148f6     DF F9 0D 1F 
148fa     2F 3A 00 FB 
148fe     E8 BD CD D5 | 	byte	$df, $f7, $d4, $cd, $df, $f9, $0d, $1f, $2f, $3a, $00, $fb, $e8, $bd, $cd, $d5
14902     F3 07 1D 33 
14906     47 59 30 26 
1490a     33 3B 00 F7 
1490e     E0 B6 C3 D1 | 	byte	$f3, $07, $1d, $33, $47, $59, $30, $26, $33, $3b, $00, $f7, $e0, $b6, $c3, $d1
14912     E5 F7 D0 CF 
14916     E7 FB 0F 1F 
1491a     2F 38 F4 FB 
1491e     E8 BF CF DF | 	byte	$e5, $f7, $d0, $cf, $e7, $fb, $0f, $1f, $2f, $38, $f4, $fb, $e8, $bf, $cf, $df
14922     F5 0B 1F 35 
14926     47 5B 30 27 
1492a     33 38 F2 F8 
1492e     E0 B7 C5 D2 | 	byte	$f5, $0b, $1f, $35, $47, $5b, $30, $27, $33, $38, $f2, $f8, $e0, $b7, $c5, $d2
14932     E7 F4 C0 CF 
14936     E7 FD 0F 1F 
1493a     2F 32 F3 FD 
1493e     E8 BF CF DF | 	byte	$e7, $f4, $c0, $cf, $e7, $fd, $0f, $1f, $2f, $32, $f3, $fd, $e8, $bf, $cf, $df
14942     F7 0D 1F 37 
14946     4B 5D 30 27 
1494a     33 30 F1 F9 
1494e     E0 B9 C6 D2 | 	byte	$f7, $0d, $1f, $37, $4b, $5d, $30, $27, $33, $30, $f1, $f9, $e0, $b9, $c6, $d2
14952     E7 EC BF D1 
14956     EA FF 0F 23 
1495a     2F 28 F3 FF 
1495e     E8 C3 D1 E7 | 	byte	$e7, $ec, $bf, $d1, $ea, $ff, $0f, $23, $2f, $28, $f3, $ff, $e8, $c3, $d1, $e7
14962     FB 0F 25 3B 
14966     4D 5F 30 29 
1496a     35 20 F2 FA 
1496e     E0 BB C7 D2 | 	byte	$fb, $0f, $25, $3b, $4d, $5f, $30, $29, $35, $20, $f2, $fa, $e0, $bb, $c7, $d2
14972     EA E0 BF D2 
14976     EB FF 13 23 
1497a     32 10 F5 FF 
1497e     E8 C5 D2 E7 | 	byte	$ea, $e0, $bf, $d2, $eb, $ff, $13, $23, $32, $10, $f5, $ff, $e8, $c5, $d2, $e7
14982     FD 0F 27 3B 
14986     4F 5F 30 2B 
1498a     35 08 F3 FB 
1498e     E0 BB C9 D2 | 	byte	$fd, $0f, $27, $3b, $4f, $5f, $30, $2b, $35, $08, $f3, $fb, $e0, $bb, $c9, $d2
14992     EB D2 BF D2 
14996     ED FF 15 25 
1499a     33 00 F6 FF 
1499e     F0 C7 D2 EB | 	byte	$eb, $d2, $bf, $d2, $ed, $ff, $15, $25, $33, $00, $f6, $ff, $f0, $c7, $d2, $eb
149a2     FF 13 29 3F 
149a6     4F 5F 30 2B 
149aa     35 00 F3 FC 
149ae     E0 BD CB D2 | 	byte	$ff, $13, $29, $3f, $4f, $5f, $30, $2b, $35, $00, $f3, $fc, $e0, $bd, $cb, $d2
149b2     ED D0 BF D2 
149b6     EF FF 15 25 
149ba     31 F0 F7 FF 
149be     F0 C9 D2 ED | 	byte	$ed, $d0, $bf, $d2, $ef, $ff, $15, $25, $31, $f0, $f7, $ff, $f0, $c9, $d2, $ed
149c2     FF 17 2B 3F 
149c6     53 63 30 2B 
149ca     34 F0 F5 FD 
149ce     E0 BF CB D3 | 	byte	$ff, $17, $2b, $3f, $53, $63, $30, $2b, $34, $f0, $f5, $fd, $e0, $bf, $cb, $d3
149d2     EA AF C5 D2 
149d6     EF 03 17 27 
149da     2C ED F7 05 
149de     F0 CB D3 EF | 	byte	$ea, $af, $c5, $d2, $ef, $03, $17, $27, $2c, $ed, $f7, $05, $f0, $cb, $d3, $ef
149e2     FF 19 2F 3F 
149e6     55 65 30 2D 
149ea     2C ED F5 FF 
149ee     E0 BF CD D7 | 	byte	$ff, $19, $2f, $3f, $55, $65, $30, $2d, $2c, $ed, $f5, $ff, $e0, $bf, $cd, $d7
149f2     E4 AF C7 D2 
149f6     EF 06 17 27 
149fa     20 EE FA 07 
149fe     F0 CD D7 F3 | 	byte	$e4, $af, $c7, $d2, $ef, $06, $17, $27, $20, $ee, $fa, $07, $f0, $cd, $d7, $f3
14a02     07 1B 2F 43 
14a06     57 67 30 2D 
14a0a     20 ED F7 FF 
14a0e     E0 BF CF D7 | 	byte	$07, $1b, $2f, $43, $57, $67, $30, $2d, $20, $ed, $f7, $ff, $e0, $bf, $cf, $d7
14a12     D8 B3 C7 D3 
14a16     F3 07 17 27 
14a1a     10 EF FB 07 
14a1e     F0 D2 DF F5 | 	byte	$d8, $b3, $c7, $d3, $f3, $07, $17, $27, $10, $ef, $fb, $07, $f0, $d2, $df, $f5
14a22     07 1F 33 47 
14a26     57 67 30 2E 
14a2a     10 EE F7 FF 
14a2e     E0 C3 CF DF | 	byte	$07, $1f, $33, $47, $57, $67, $30, $2e, $10, $ee, $f7, $ff, $e0, $c3, $cf, $df
14a32     D2 B5 CB D7 
14a36     F5 07 1B 29 
14a3a     00 EF FD 0A 
14a3e     F0 D2 E3 F7 | 	byte	$d2, $b5, $cb, $d7, $f5, $07, $1b, $29, $00, $ef, $fd, $0a, $f0, $d2, $e3, $f7
14a42     0B 1F 35 47 
14a46     5B 69 30 2F 
14a4a     00 EF F7 FF 
14a4e     E0 C5 D1 E3 | 	byte	$0b, $1f, $35, $47, $5b, $69, $30, $2f, $00, $ef, $f7, $ff, $e0, $c5, $d1, $e3
14a52     C0 B7 CB D7 
14a56     F7 0A 1B 29 
14a5a     F0 EF FF 0B 
14a5e     00 D2 E7 FB | 	byte	$c0, $b7, $cb, $d7, $f7, $0a, $1b, $29, $f0, $ef, $ff, $0b, $00, $d2, $e7, $fb
14a62     0F 1F 37 4B 
14a66     5B 6B 30 2D 
14a6a     E9 EF FA 03 
14a6e     E0 C5 D2 E2 | 	byte	$0f, $1f, $37, $4b, $5b, $6b, $30, $2d, $e9, $ef, $fa, $03, $e0, $c5, $d2, $e2
14a72     A6 B7 CE DF 
14a76     F7 0B 1B 26 
14a7a     E6 F3 FF 0E 
14a7e     00 D5 E7 FD | 	byte	$a6, $b7, $ce, $df, $f7, $0b, $1b, $26, $e6, $f3, $ff, $0e, $00, $d5, $e7, $fd
14a82     0F 25 39 4B 
14a86     5D 6B 30 28 
14a8a     E7 EF FB 05 
14a8e     E4 C7 D2 E0 | 	byte	$0f, $25, $39, $4b, $5d, $6b, $30, $28, $e7, $ef, $fb, $05, $e4, $c7, $d2, $e0
14a92     A7 BB CF E7 
14a96     F9 0B 1D 20 
14a9a     E6 F3 FF 0F 
14a9e     00 D7 EB FF | 	byte	$a7, $bb, $cf, $e7, $f9, $0b, $1d, $20, $e6, $f3, $ff, $0f, $00, $d7, $eb, $ff
14aa2     13 27 3B 4F 
14aa6     5F 6D 30 20 
14aaa     E7 F1 FB 06 
14aae     E8 C7 D2 D4 | 	byte	$13, $27, $3b, $4f, $5f, $6d, $30, $20, $e7, $f1, $fb, $06, $e8, $c7, $d2, $d4
14ab2     A7 BB CF E7 
14ab6     FB 0D 1E 10 
14aba     E7 F5 03 11 
14abe     00 DB EF FF | 	byte	$a7, $bb, $cf, $e7, $fb, $0d, $1e, $10, $e7, $f5, $03, $11, $00, $db, $ef, $ff
14ac2     16 2B 3E 4F 
14ac6     5F 6E 30 10 
14aca     E7 F3 FD 07 
14ace     E8 CB D2 D0 | 	byte	$16, $2b, $3e, $4f, $5f, $6e, $30, $10, $e7, $f3, $fd, $07, $e8, $cb, $d2, $d0
14ad2     A9 BF D1 E7 
14ad6     FB 0F 1F 00 
14ada     E7 F7 05 13 
14ade     00 DF EF FF | 	byte	$a9, $bf, $d1, $e7, $fb, $0f, $1f, $00, $e7, $f7, $05, $13, $00, $df, $ef, $ff
14ae2     17 2B 3F 4F 
14ae6     5F 6F 30 00 
14aea     E7 F3 FF 07 
14aee     E8 CB D2 C0 | 	byte	$17, $2b, $3f, $4f, $5f, $6f, $30, $00, $e7, $f3, $ff, $07, $e8, $cb, $d2, $c0
14af2     AB BF D2 EA 
14af6     FD 0F 1F E8 
14afa     E7 F7 07 16 
14afe     00 DF F3 07 | 	byte	$ab, $bf, $d2, $ea, $fd, $0f, $1f, $e8, $e7, $f7, $07, $16, $00, $df, $f3, $07
14b02     1B 2F 3F 53 
14b06     63 6F 30 E8 
14b0a     E9 F5 FF 0A 
14b0e     E8 CD D3 A0 | 	byte	$1b, $2f, $3f, $53, $63, $6f, $30, $e8, $e9, $f5, $ff, $0a, $e8, $cd, $d3, $a0
14b12     AD BF D2 EB 
14b16     FF 0F 1D E0 
14b1a     EB FA 09 17 
14b1e     00 E3 F6 07 | 	byte	$ad, $bf, $d2, $eb, $ff, $0f, $1d, $e0, $eb, $fa, $09, $17, $00, $e3, $f6, $07
14b22     1D 2F 3F 55 
14b26     63 6F 30 E0 
14b2a     EA F5 FF 0B 
14b2e     E8 D0 D3 9D | 	byte	$1d, $2f, $3f, $55, $63, $6f, $30, $e0, $ea, $f5, $ff, $0b, $e8, $d0, $d3, $9d
14b32     AF BF D2 ED 
14b36     FF 0F 18 DD 
14b3a     EB FB 0B 1B 
14b3e     00 E6 F7 0B | 	byte	$af, $bf, $d2, $ed, $ff, $0f, $18, $dd, $eb, $fb, $0b, $1b, $00, $e6, $f7, $0b
14b42     1F 33 45 57 
14b46     65 6F 20 DF 
14b4a     EB F7 FF 0D 
14b4e     E8 D2 D2 9E | 	byte	$1f, $33, $45, $57, $65, $6f, $20, $df, $eb, $f7, $ff, $0d, $e8, $d2, $d2, $9e
14b52     AF C5 D2 EF 
14b56     FF 12 08 DD 
14b5a     ED FD 0D 1D 
14b5e     00 E7 FB 0E | 	byte	$af, $c5, $d2, $ef, $ff, $12, $08, $dd, $ed, $fd, $0d, $1d, $00, $e7, $fb, $0e
14b62     1F 35 47 57 
14b66     66 70 20 DF 
14b6a     EB F7 03 0F 
14b6e     E8 D2 D0 9F | 	byte	$1f, $35, $47, $57, $66, $70, $20, $df, $eb, $f7, $03, $0f, $e8, $d2, $d0, $9f
14b72     B3 C7 D2 EF 
14b76     FF 13 00 DF 
14b7a     EF FF 0F 1F 
14b7e     00 EB FD 0F | 	byte	$b3, $c7, $d2, $ef, $ff, $13, $00, $df, $ef, $ff, $0f, $1f, $00, $eb, $fd, $0f
14b82     23 37 47 57 
14b86     67 71 00 DF 
14b8a     ED F9 05 0F 
14b8e     F0 D2 A0 9F | 	byte	$23, $37, $47, $57, $67, $71, $00, $df, $ed, $f9, $05, $0f, $f0, $d2, $a0, $9f
14b92     B5 C7 D3 EF 
14b96     FF 13 E0 DF 
14b9a     EF FF 0F 1F 
14b9e     00 ED FF 13 | 	byte	$b5, $c7, $d3, $ef, $ff, $13, $e0, $df, $ef, $ff, $0f, $1f, $00, $ed, $ff, $13
14ba2     26 37 4B 5B 
14ba6     67 71 00 DF 
14baa     EF FB 07 11 
14bae     F0 D3 98 A3 | 	byte	$26, $37, $4b, $5b, $67, $71, $00, $df, $ef, $fb, $07, $11, $f0, $d3, $98, $a3
14bb2     B7 CB D3 EF 
14bb6     FF 13 D8 DF 
14bba     EF FF 13 23 
14bbe     00 EF FF 15 | 	byte	$b7, $cb, $d3, $ef, $ff, $13, $d8, $df, $ef, $ff, $13, $23, $00, $ef, $ff, $15
14bc2     27 3B 4B 5B 
14bc6     67 70 E0 E3 
14bca     EF FB 07 13 
14bce     F0 D3 94 A5 | 	byte	$27, $3b, $4b, $5b, $67, $70, $e0, $e3, $ef, $fb, $07, $13, $f0, $d3, $94, $a5
14bd2     B7 CB D7 F3 
14bd6     05 10 D4 DF 
14bda     F3 05 16 26 
14bde     00 F3 05 17 | 	byte	$b7, $cb, $d7, $f3, $05, $10, $d4, $df, $f3, $05, $16, $26, $00, $f3, $05, $17
14be2     2B 3D 4D 5D 
14be6     69 68 E0 E3 
14bea     EF FD 09 15 
14bee     F0 D2 95 A7 | 	byte	$2b, $3d, $4d, $5d, $69, $68, $e0, $e3, $ef, $fd, $09, $15, $f0, $d2, $95, $a7
14bf2     BB CD DF F3 
14bf6     05 04 D2 E3 
14bfa     F5 07 17 27 
14bfe     00 F5 07 19 | 	byte	$bb, $cd, $df, $f3, $05, $04, $d2, $e3, $f5, $07, $17, $27, $00, $f5, $07, $19
14c02     2B 3F 4F 5E 
14c06     6A 60 E0 E5 
14c0a     F1 FF 0B 16 
14c0e     F0 D0 97 A7 | 	byte	$2b, $3f, $4f, $5e, $6a, $60, $e0, $e5, $f1, $ff, $0b, $16, $f0, $d0, $97, $a7
14c12     BB CF DF F5 
14c16     07 00 D2 E5 
14c1a     F7 07 1B 2B 
14c1e     00 F7 07 1B | 	byte	$bb, $cf, $df, $f5, $07, $00, $d2, $e5, $f7, $07, $1b, $2b, $00, $f7, $07, $1b
14c22     2F 3F 4F 5F 
14c26     6B 48 E0 E5 
14c2a     F3 FF 0D 17 
14c2e     F0 A0 97 AB | 	byte	$2f, $3f, $4f, $5f, $6b, $48, $e0, $e5, $f3, $ff, $0d, $17, $f0, $a0, $97, $ab
14c32     BE CF E5 F7 
14c36     07 E0 D2 E7 
14c3a     F7 0B 1D 2D 
14c3e     08 FA 0B 1F | 	byte	$be, $cf, $e5, $f7, $07, $e0, $d2, $e7, $f7, $0b, $1d, $2d, $08, $fa, $0b, $1f
14c42     2F 3F 4F 5F 
14c46     6B 30 E0 E7 
14c4a     F5 FF 0E 19 
14c4e     F0 90 9B AD | 	byte	$2f, $3f, $4f, $5f, $6b, $30, $e0, $e7, $f5, $ff, $0e, $19, $f0, $90, $9b, $ad
14c52     BF CF E6 F7 
14c56     07 D4 D2 E7 
14c5a     FB 0D 1F 2F 
14c5e     08 FB 0F 1F | 	byte	$bf, $cf, $e6, $f7, $07, $d4, $d2, $e7, $fb, $0d, $1f, $2f, $08, $fb, $0f, $1f
14c62     33 3F 53 5F 
14c66     6A 24 E0 E7 
14c6a     F5 FF 0F 1B 
14c6e     F0 8D 9D AF | 	byte	$33, $3f, $53, $5f, $6a, $24, $e0, $e7, $f5, $ff, $0f, $1b, $f0, $8d, $9d, $af
14c72     BF D1 E7 F7 
14c76     04 D2 D2 EB 
14c7a     FD 0F 1F 32 
14c7e     08 FF 0F 1F | 	byte	$bf, $d1, $e7, $f7, $04, $d2, $d2, $eb, $fd, $0f, $1f, $32, $08, $ff, $0f, $1f
14c82     33 43 53 5F 
14c86     64 22 E0 E9 
14c8a     F7 03 0F 1D 
14c8e     E0 8F 9F AF | 	byte	$33, $43, $53, $5f, $64, $22, $e0, $e9, $f7, $03, $0f, $1d, $e0, $8f, $9f, $af
14c92     BF D2 E7 F9 
14c96     00 C8 D2 EB 
14c9a     FF 0F 23 35 
14c9e     10 FF 13 25 | 	byte	$bf, $d2, $e7, $f9, $00, $c8, $d2, $eb, $ff, $0f, $23, $35, $10, $ff, $13, $25
14ca2     36 47 55 62 
14ca6     60 22 E0 EB 
14caa     F7 06 13 1E 
14cae     E0 8F 9F AF | 	byte	$36, $47, $55, $62, $60, $22, $e0, $eb, $f7, $06, $13, $1e, $e0, $8f, $9f, $af
14cb2     C3 D2 E7 FB 
14cb6     F0 C7 D2 ED 
14cba     FF 13 27 37 
14cbe     10 FF 15 27 | 	byte	$c3, $d2, $e7, $fb, $f0, $c7, $d2, $ed, $ff, $13, $27, $37, $10, $ff, $15, $27
14cc2     37 47 56 63 
14cc6     48 22 E0 EB 
14cca     FA 07 13 1F 
14cce     D2 92 9F B3 | 	byte	$37, $47, $56, $63, $48, $22, $e0, $eb, $fa, $07, $13, $1f, $d2, $92, $9f, $b3
14cd2     C5 D2 EB FB 
14cd6     E0 C7 D2 EF 
14cda     FF 17 27 39 
14cde     10 06 17 27 | 	byte	$c5, $d2, $eb, $fb, $e0, $c7, $d2, $ef, $ff, $17, $27, $39, $10, $06, $17, $27
14ce2     39 47 57 63 
14ce6     30 22 E1 ED 
14cea     FB 07 16 1F 
14cee     D0 93 A3 B5 | 	byte	$39, $47, $57, $63, $30, $22, $e1, $ed, $fb, $07, $16, $1f, $d0, $93, $a3, $b5
14cf2     C7 D2 EB FB 
14cf6     D2 CA D3 EF 
14cfa     05 17 2B 3B 
14cfe     10 07 19 2B | 	byte	$c7, $d2, $eb, $fb, $d2, $ca, $d3, $ef, $05, $17, $2b, $3b, $10, $07, $19, $2b
14d02     3B 4A 57 62 
14d06     20 22 E2 EF 
14d0a     FD 0B 17 20 
14d0e     C0 95 A5 B7 | 	byte	$3b, $4a, $57, $62, $20, $22, $e2, $ef, $fd, $0b, $17, $20, $c0, $95, $a5, $b7
14d12     C7 D2 EB FA 
14d16     D0 CB D5 F3 
14d1a     07 1B 2E 3F 
14d1e     10 0B 1B 2D | 	byte	$c7, $d2, $eb, $fa, $d0, $cb, $d5, $f3, $07, $1b, $2e, $3f, $10, $0b, $1b, $2d
14d22     3D 4B 57 60 
14d26     1D 24 E3 EF 
14d2a     FF 0B 19 18 
14d2e     C0 97 A7 B7 | 	byte	$3d, $4b, $57, $60, $1d, $24, $e3, $ef, $ff, $0b, $19, $18, $c0, $97, $a7, $b7
14d32     CB D2 ED F4 
14d36     BA CD D7 F5 
14d3a     0A 1E 2F 3F 
14d3e     10 0D 1D 2F | 	byte	$cb, $d2, $ed, $f4, $ba, $cd, $d7, $f5, $0a, $1e, $2f, $3f, $10, $0d, $1d, $2f
14d42     3E 4D 59 58 
14d46     1D 24 E4 EF 
14d4a     FF 0D 1B 10 
14d4e     A0 99 A9 BB | 	byte	$3e, $4d, $59, $58, $1d, $24, $e4, $ef, $ff, $0d, $1b, $10, $a0, $99, $a9, $bb
14d52     CB D3 EE E8 
14d56     BB CF DF F7 
14d5a     0B 1F 33 3F 
14d5e     10 0F 1F 2F | 	byte	$cb, $d3, $ee, $e8, $bb, $cf, $df, $f7, $0b, $1f, $33, $3f, $10, $0f, $1f, $2f
14d62     3F 4D 5A 44 
14d66     1D 24 E5 F3 
14d6a     FF 0F 1B 00 
14d6e     A0 9B AB BB | 	byte	$3f, $4d, $5a, $44, $1d, $24, $e5, $f3, $ff, $0f, $1b, $00, $a0, $9b, $ab, $bb
14d72     CD D5 EF D8 
14d76     BD CF DF F9 
14d7a     0F 1F 35 45 
14d7e     18 0F 1F 2F | 	byte	$cd, $d5, $ef, $d8, $bd, $cf, $df, $f9, $0f, $1f, $35, $45, $18, $0f, $1f, $2f
14d82     3F 4F 5B 30 
14d86     1E 26 E7 F3 
14d8a     FF 0F 1D E8 
14d8e     A0 9D AD BD | 	byte	$3f, $4f, $5b, $30, $1e, $26, $e7, $f3, $ff, $0f, $1d, $e8, $a0, $9d, $ad, $bd
14d92     CE D7 EF D1 
14d96     BE CF E7 FB 
14d9a     0F 25 37 47 
14d9e     20 13 23 33 | 	byte	$ce, $d7, $ef, $d1, $be, $cf, $e7, $fb, $0f, $25, $37, $47, $20, $13, $23, $33
14da2     3F 4F 5B 20 
14da6     1F 28 E8 F5 
14daa     03 13 1C E0 
14dae     A0 9F AF BF | 	byte	$3f, $4f, $5b, $20, $1f, $28, $e8, $f5, $03, $13, $1c, $e0, $a0, $9f, $af, $bf
14db2     CF D7 EF C0 
14db6     BF D1 E7 FF 
14dba     13 27 3B 4A 
14dbe     20 15 25 35 | 	byte	$cf, $d7, $ef, $c0, $bf, $d1, $e7, $ff, $13, $27, $3b, $4a, $20, $15, $25, $35
14dc2     3F 4F 58 15 
14dc6     1F 28 E9 F7 
14dca     05 13 18 DA 
14dce     A0 9F AF BF | 	byte	$3f, $4f, $58, $15, $1f, $28, $e9, $f7, $05, $13, $18, $da, $a0, $9f, $af, $bf
14dd2     CF DF EA AE 
14dd6     BF D2 EB FF 
14dda     15 2B 3D 4D 
14dde     20 17 27 37 | 	byte	$cf, $df, $ea, $ae, $bf, $d2, $eb, $ff, $15, $2b, $3d, $4d, $20, $17, $27, $37
14de2     43 4F 50 15 
14de6     1F 28 EA F7 
14dea     07 15 10 DB 
14dee     A0 9F AF BF | 	byte	$43, $4f, $50, $15, $1f, $28, $ea, $f7, $07, $15, $10, $db, $a0, $9f, $af, $bf
14df2     CF DF E0 AF 
14df6     BF D2 ED FF 
14dfa     17 2B 3F 4F 
14dfe     20 1A 27 37 | 	byte	$cf, $df, $e0, $af, $bf, $d2, $ed, $ff, $17, $2b, $3f, $4f, $20, $1a, $27, $37
14e02     45 51 40 15 
14e06     1F 28 EB FA 
14e0a     07 17 00 DD 
14e0e     C0 A3 B3 BF | 	byte	$45, $51, $40, $15, $1f, $28, $eb, $fa, $07, $17, $00, $dd, $c0, $a3, $b3, $bf
14e12     D1 E3 D4 AF 
14e16     BF D2 EF FF 
14e1a     1B 2F 3F 4F 
14e1e     20 1B 2B 39 | 	byte	$d1, $e3, $d4, $af, $bf, $d2, $ef, $ff, $1b, $2f, $3f, $4f, $20, $1b, $2b, $39
14e22     46 52 30 15 
14e26     23 2A ED FB 
14e2a     0B 17 E8 DF 
14e2e     C0 A5 B5 C3 | 	byte	$46, $52, $30, $15, $23, $2a, $ed, $fb, $0b, $17, $e8, $df, $c0, $a5, $b5, $c3
14e32     D1 E3 D0 AF 
14e36     C5 D2 EF 07 
14e3a     1D 2F 43 53 
14e3e     20 1E 2D 3B | 	byte	$d1, $e3, $d0, $af, $c5, $d2, $ef, $07, $1d, $2f, $43, $53, $20, $1e, $2d, $3b
14e42     47 53 20 17 
14e46     23 2A EE FD 
14e4a     0B 19 D8 DF 
14e4e     C0 A7 B6 C5 | 	byte	$47, $53, $20, $17, $23, $2a, $ee, $fd, $0b, $19, $d8, $df, $c0, $a7, $b6, $c5
14e52     D2 E3 A8 AF 
14e56     C7 D2 F3 07 
14e5a     1F 33 47 56 
14e5e     20 1F 2E 3B | 	byte	$d2, $e3, $a8, $af, $c7, $d2, $f3, $07, $1f, $33, $47, $56, $20, $1f, $2e, $3b
14e62     47 51 10 17 
14e66     25 2C EF FF 
14e6a     0D 14 D7 E3 
14e6e     C0 A7 B7 C7 | 	byte	$47, $51, $10, $17, $25, $2c, $ef, $ff, $0d, $14, $d7, $e3, $c0, $a7, $b7, $c7
14e72     D2 E0 A2 B3 
14e76     C7 D3 F5 0B 
14e7a     1F 37 47 57 
14e7e     20 1F 2F 3D | 	byte	$d2, $e0, $a2, $b3, $c7, $d3, $f5, $0b, $1f, $37, $47, $57, $20, $1f, $2f, $3d
14e82     47 4C 0C 17 
14e86     25 2C F1 FF 
14e8a     0F 10 D7 E5 
14e8e     C0 AB B7 C7 | 	byte	$47, $4c, $0c, $17, $25, $2c, $f1, $ff, $0f, $10, $d7, $e5, $c0, $ab, $b7, $c7
14e92     D2 D8 A3 B5 
14e96     CA D7 F7 0F 
14e9a     23 37 4B 5B 
14e9e     20 23 2F 3E | 	byte	$d2, $d8, $a3, $b5, $ca, $d7, $f7, $0f, $23, $37, $4b, $5b, $20, $23, $2f, $3e
14ea2     49 40 0D 19 
14ea6     27 30 F3 FF 
14eaa     0F 00 D7 E6 
14eae     C0 AB BB C7 | 	byte	$49, $40, $0d, $19, $27, $30, $f3, $ff, $0f, $00, $d7, $e6, $c0, $ab, $bb, $c7
14eb2     D2 D2 A3 B7 
14eb6     CB D7 FB 0F 
14eba     27 3B 4D 5D 
14ebe     24 25 33 3F | 	byte	$d2, $d2, $a3, $b7, $cb, $d7, $fb, $0f, $27, $3b, $4d, $5d, $24, $25, $33, $3f
14ec2     4A 30 0D 1A 
14ec6     27 30 F3 FF 
14eca     13 E8 DB E7 
14ece     C0 AD BB C9 | 	byte	$4a, $30, $0d, $1a, $27, $30, $f3, $ff, $13, $e8, $db, $e7, $c0, $ad, $bb, $c9
14ed2     D2 D0 A3 B7 
14ed6     CD DF FB 13 
14eda     29 3F 4F 5F 
14ede     24 27 33 3F | 	byte	$d2, $d0, $a3, $b7, $cd, $df, $fb, $13, $29, $3f, $4f, $5f, $24, $27, $33, $3f
14ee2     4A 20 0D 1B 
14ee6     29 30 F5 05 
14eea     13 D8 DD E9 
14eee     C0 AF BD CB | 	byte	$4a, $20, $0d, $1b, $29, $30, $f5, $05, $13, $d8, $dd, $e9, $c0, $af, $bd, $cb
14ef2     D2 A0 A5 BA 
14ef6     CF E7 FF 17 
14efa     2B 3F 53 5F 
14efe     28 27 35 3F | 	byte	$d2, $a0, $a5, $ba, $cf, $e7, $ff, $17, $2b, $3f, $53, $5f, $28, $27, $35, $3f
14f02     4A 08 0F 1D 
14f06     2B 30 F7 07 
14f0a     10 D4 DF EB 
14f0e     C0 AF BE CB | 	byte	$4a, $08, $0f, $1d, $2b, $30, $f7, $07, $10, $d4, $df, $eb, $c0, $af, $be, $cb
14f12     D2 98 A7 BB 
14f16     CF E9 FF 17 
14f1a     2F 3F 55 63 
14f1e     28 29 36 3F | 	byte	$d2, $98, $a7, $bb, $cf, $e9, $ff, $17, $2f, $3f, $55, $63, $28, $29, $36, $3f
14f22     46 04 0F 1D 
14f26     2B 30 F7 07 
14f2a     08 D3 DF ED 
14f2e     C0 B1 BF CB | 	byte	$46, $04, $0f, $1d, $2b, $30, $f7, $07, $08, $d3, $df, $ed, $c0, $b1, $bf, $cb
14f32     D2 96 A7 BD 
14f36     D1 EB FF 1B 
14f3a     2F 45 57 65 
14f3e     28 2B 37 3F | 	byte	$d2, $96, $a7, $bd, $d1, $eb, $ff, $1b, $2f, $45, $57, $65, $28, $2b, $37, $3f
14f42     40 03 0F 1F 
14f46     2D 30 FA 09 
14f4a     00 D3 E3 EF 
14f4e     C0 B3 BF CD | 	byte	$40, $03, $0f, $1f, $2d, $30, $fa, $09, $00, $d3, $e3, $ef, $c0, $b3, $bf, $cd
14f52     C8 97 A9 BF 
14f56     D2 EF 07 1D 
14f5a     33 47 57 67 
14f5e     28 2D 37 42 | 	byte	$c8, $97, $a9, $bf, $d2, $ef, $07, $1d, $33, $47, $57, $67, $28, $2d, $37, $42
14f62     30 05 0F 1F 
14f66     2F 30 FB 0B 
14f6a     E0 D3 E5 EF 
14f6e     C0 B5 BF CE | 	byte	$30, $05, $0f, $1f, $2f, $30, $fb, $0b, $e0, $d3, $e5, $ef, $c0, $b5, $bf, $ce
14f72     B0 97 AB BF 
14f76     D2 EF 07 1F 
14f7a     37 49 5B 69 
14f7e     2A 2E 39 43 | 	byte	$b0, $97, $ab, $bf, $d2, $ef, $07, $1f, $37, $49, $5b, $69, $2a, $2e, $39, $43
14f82     20 05 13 1F 
14f86     2F 34 FD 0B 
14f8a     D6 D3 E7 F2 
14f8e     D0 B5 BF CF | 	byte	$20, $05, $13, $1f, $2f, $34, $fd, $0b, $d6, $d3, $e7, $f2, $d0, $b5, $bf, $cf
14f92     A0 97 AD BF 
14f96     D2 EF 0B 1F 
14f9a     37 4B 5D 6B 
14f9e     30 2F 39 42 | 	byte	$a0, $97, $ad, $bf, $d2, $ef, $0b, $1f, $37, $4b, $5d, $6b, $30, $2f, $39, $42
14fa2     08 05 13 1F 
14fa6     2F 34 FF 0A 
14faa     D2 D3 E7 F3 
14fae     D0 B7 C3 CE | 	byte	$08, $05, $13, $1f, $2f, $34, $ff, $0a, $d2, $d3, $e7, $f3, $d0, $b7, $c3, $ce
14fb2     90 9B AF C3 
14fb6     D2 F5 0D 25 
14fba     3B 4F 5F 6D 
14fbe     30 2F 3B 40 | 	byte	$90, $9b, $af, $c3, $d2, $f5, $0d, $25, $3b, $4f, $5f, $6d, $30, $2f, $3b, $40
14fc2     00 07 15 23 
14fc6     33 38 FF 04 
14fca     D2 D5 EA F5 
14fce     D0 B7 C3 CA | 	byte	$00, $07, $15, $23, $33, $38, $ff, $04, $d2, $d5, $ea, $f5, $d0, $b7, $c3, $ca
14fd2     8B 9B AF C7 
14fd6     D3 F7 0F 27 
14fda     3D 4F 5F 6E 
14fde     30 31 3B 38 | 	byte	$8b, $9b, $af, $c7, $d3, $f7, $0f, $27, $3d, $4f, $5f, $6e, $30, $31, $3b, $38
14fe2     FB 07 15 25 
14fe6     35 38 FF 00 
14fea     D1 D7 EB F6 
14fee     D0 B9 C3 C0 | 	byte	$fb, $07, $15, $25, $35, $38, $ff, $00, $d1, $d7, $eb, $f6, $d0, $b9, $c3, $c0
14ff2     8B 9D AF C7 
14ff6     D7 FB 0F 2B 
14ffa     3F 53 63 6F 
14ffe     30 32 3B 30 | 	byte	$8b, $9d, $af, $c7, $d7, $fb, $0f, $2b, $3f, $53, $63, $6f, $30, $32, $3b, $30
15002     FC 07 17 27 
15006     36 38 03 E0 
1500a     CF DF ED F7 
1500e     D0 BA C5 B0 | 	byte	$fc, $07, $17, $27, $36, $38, $03, $e0, $cf, $df, $ed, $f7, $d0, $ba, $c5, $b0
15012     8D 9F B3 CB 
15016     D7 FB 15 2B 
1501a     3F 55 65 71 
1501e     30 33 3C 20 | 	byte	$8d, $9f, $b3, $cb, $d7, $fb, $15, $2b, $3f, $55, $65, $71, $30, $33, $3c, $20
15022     FD 09 17 27 
15026     37 38 05 D4 
1502a     CF DF EF F9 
1502e     D0 BB C6 A0 | 	byte	$fd, $09, $17, $27, $37, $38, $05, $d4, $cf, $df, $ef, $f9, $d0, $bb, $c6, $a0
15032     8E 9F B7 CD 
15036     DF FF 17 2F 
1503a     43 57 67 72 
1503e     30 33 3C 00 | 	byte	$8e, $9f, $b7, $cd, $df, $ff, $17, $2f, $43, $57, $67, $72, $30, $33, $3c, $00
15042     FD 0B 19 29 
15046     37 38 04 D2 
1504a     D2 E3 EF FA 
1504e     D0 BD C6 88 | 	byte	$fd, $0b, $19, $29, $37, $38, $04, $d2, $d2, $e3, $ef, $fa, $d0, $bd, $c6, $88
15052     8F 9F B7 CF 
15056     E7 FF 1B 2F 
1505a     47 59 69 74 
1505e     30 35 3B 00 | 	byte	$8f, $9f, $b7, $cf, $e7, $ff, $1b, $2f, $47, $59, $69, $74, $30, $35, $3b, $00
15062     FF 0B 1B 2B 
15066     3B 40 00 D0 
1506a     D2 E5 F3 FB 
1506e     D0 BD C4 81 | 	byte	$ff, $0b, $1b, $2b, $3b, $40, $00, $d0, $d2, $e5, $f3, $fb, $d0, $bd, $c4, $81
15072     8F A3 BB CF 
15076     EB FF 1D 33 
1507a     47 5B 6B 75 
1507e     30 35 38 F4 | 	byte	$8f, $a3, $bb, $cf, $eb, $ff, $1d, $33, $47, $5b, $6b, $75, $30, $35, $38, $f4
15082     FF 0D 1B 2B 
15086     3D 40 F0 C7 
1508a     D2 E7 F3 FD 
1508e     D0 BE C0 81 | 	byte	$ff, $0d, $1b, $2b, $3d, $40, $f0, $c7, $d2, $e7, $f3, $fd, $d0, $be, $c0, $81
15092     8F A5 BB D1 
15096     ED 07 1F 37 
1509a     4B 5E 6D 76 
1509e     32 36 30 F5 | 	byte	$8f, $a5, $bb, $d1, $ed, $07, $1f, $37, $4b, $5e, $6d, $76, $32, $36, $30, $f5
150a2     FF 0F 1D 2D 
150a6     3F 40 E0 C7 
150aa     D2 E7 F5 FE 
150ae     D0 BF B0 83 | 	byte	$ff, $0f, $1d, $2d, $3f, $40, $e0, $c7, $d2, $e7, $f5, $fe, $d0, $bf, $b0, $83
150b2     93 A7 BF D2 
150b6     EF 07 1F 37 
150ba     4D 5F 6F 78 
150be     34 37 20 F5 | 	byte	$93, $a7, $bf, $d2, $ef, $07, $1f, $37, $4d, $5f, $6f, $78, $34, $37, $20, $f5
150c2     FF 0F 1F 2F 
150c6     3F 40 D4 CB 
150ca     D2 EA F7 FF 
150ce     D0 BF A0 83 | 	byte	$ff, $0f, $1f, $2f, $3f, $40, $d4, $cb, $d2, $ea, $f7, $ff, $d0, $bf, $a0, $83
150d2     95 A7 BF D2 
150d6     EF 0B 23 3B 
150da     4F 5F 6F 78 
150de     34 37 00 F6 | 	byte	$95, $a7, $bf, $d2, $ef, $0b, $23, $3b, $4f, $5f, $6f, $78, $34, $37, $00, $f6
150e2     FF 0F 1F 2F 
150e6     3F 40 D2 CD 
150ea     D3 EB F7 FF 
150ee     D0 BF 84 85 | 	byte	$ff, $0f, $1f, $2f, $3f, $40, $d2, $cd, $d3, $eb, $f7, $ff, $d0, $bf, $84, $85
150f2     97 AB BF D2 
150f6     F3 0F 27 3D 
150fa     4F 63 71 7A 
150fe     34 36 00 F7 | 	byte	$97, $ab, $bf, $d2, $f3, $0f, $27, $3d, $4f, $63, $71, $7a, $34, $36, $00, $f7
15102     FF 0F 1F 32 
15106     3F 40 C0 CF 
1510a     D7 ED F9 00 
1510e     D0 BE 80 86 | 	byte	$ff, $0f, $1f, $32, $3f, $40, $c0, $cf, $d7, $ed, $f9, $00, $d0, $be, $80, $86
15112     97 AD BF D2 
15116     F7 0F 27 3F 
1511a     53 65 73 7B 
1511e     34 34 EE F7 | 	byte	$97, $ad, $bf, $d2, $f7, $0f, $27, $3f, $53, $65, $73, $7b, $34, $34, $ee, $f7
15122     03 13 23 33 
15126     43 30 BF CF 
1512a     DF EF FB 02 
1512e     D0 B8 80 87 | 	byte	$03, $13, $23, $33, $43, $30, $bf, $cf, $df, $ef, $fb, $02, $d0, $b8, $80, $87
15132     9B AF C7 D3 
15136     F7 13 2B 3F 
1513a     57 67 75 7C 
1513e     34 28 EE F7 | 	byte	$9b, $af, $c7, $d3, $f7, $13, $2b, $3f, $57, $67, $75, $7c, $34, $28, $ee, $f7
15142     05 15 25 35 
15146     45 20 BF CF 
1514a     E3 EF FD 02 
1514e     D0 B0 80 87 | 	byte	$05, $15, $25, $35, $45, $20, $bf, $cf, $e3, $ef, $fd, $02, $d0, $b0, $80, $87
15152     9B AF C7 D7 
15156     FB 15 2F 3F 
1515a     57 67 76 7C 
1515e     34 20 EF F9 | 	byte	$9b, $af, $c7, $d7, $fb, $15, $2f, $3f, $57, $67, $76, $7c, $34, $20, $ef, $f9
15162     07 15 26 37 
15166     47 08 BF D2 
1516a     E4 F2 FD 04 
1516e     D0 A0 80 8B | 	byte	$07, $15, $26, $37, $47, $08, $bf, $d2, $e4, $f2, $fd, $04, $d0, $a0, $80, $8b
15172     9D B3 CB DF 
15176     FF 17 2F 47 
1517a     5B 6B 77 7D 
1517e     35 00 EF FB | 	byte	$9d, $b3, $cb, $df, $ff, $17, $2f, $47, $5b, $6b, $77, $7d, $35, $00, $ef, $fb
15182     07 17 27 37 
15186     47 00 C3 D2 
1518a     E6 F3 FF 04 
1518e     D0 80 80 8B | 	byte	$07, $17, $27, $37, $47, $00, $c3, $d2, $e6, $f3, $ff, $04, $d0, $80, $80, $8b
15192     9F B5 CD E7 
15196     FF 1B 33 47 
1519a     5B 6D 79 7E 
1519e     34 00 EF FB | 	byte	$9f, $b5, $cd, $e7, $ff, $1b, $33, $47, $5b, $6d, $79, $7e, $34, $00, $ef, $fb
151a2     09 17 27 3A 
151a6     44 00 C7 D2 
151aa     E7 F5 FF 04 
151ae     D0 80 80 8D | 	byte	$09, $17, $27, $3a, $44, $00, $c7, $d2, $e7, $f5, $ff, $04, $d0, $80, $80, $8d
151b2     9F B7 CF EB 
151b6     FF 1D 35 4B 
151ba     5F 6E 79 7E 
151be     34 E9 EF FD | 	byte	$9f, $b7, $cf, $eb, $ff, $1d, $35, $4b, $5f, $6e, $79, $7e, $34, $e9, $ef, $fd
151c2     0B 1B 2B 3B 
151c6     40 F0 C7 D2 
151ca     E9 F7 FF 06 
151ce     D0 80 80 8F | 	byte	$0b, $1b, $2b, $3b, $40, $f0, $c7, $d2, $e9, $f7, $ff, $06, $d0, $80, $80, $8f
151d2     A3 BB CF ED 
151d6     07 1F 37 4D 
151da     5F 6F 7B 7E 
151de     30 E8 F1 FE | 	byte	$a3, $bb, $cf, $ed, $07, $1f, $37, $4d, $5f, $6f, $7b, $7e, $30, $e8, $f1, $fe
151e2     0B 1B 2B 3D 
151e6     30 F0 C9 D2 
151ea     EB F7 FF 06 
151ee     D0 80 80 8F | 	byte	$0b, $1b, $2b, $3d, $30, $f0, $c9, $d2, $eb, $f7, $ff, $06, $d0, $80, $80, $8f
151f2     A5 BD D2 EF 
151f6     07 1F 3B 4F 
151fa     5F 6F 7B 7E 
151fe     20 E9 F3 FF | 	byte	$a5, $bd, $d2, $ef, $07, $1f, $3b, $4f, $5f, $6f, $7b, $7e, $20, $e9, $f3, $ff
15202     0D 1D 2E 3F 
15206     20 F0 CB D3 
1520a     EB F9 03 08 
1520e     C0 80 81 93 | 	byte	$0d, $1d, $2e, $3f, $20, $f0, $cb, $d3, $eb, $f9, $03, $08, $c0, $80, $81, $93
15212     A7 BF D2 EF 
15216     0B 23 3B 4F 
1521a     63 72 7D 7E 
1521e     10 E9 F3 FF | 	byte	$a7, $bf, $d2, $ef, $0b, $23, $3b, $4f, $63, $72, $7d, $7e, $10, $e9, $f3, $ff
15222     0F 1F 2F 3F 
15226     08 F0 CD D7 
1522a     EE FB 03 08 
1522e     88 80 83 95 | 	byte	$0f, $1f, $2f, $3f, $08, $f0, $cd, $d7, $ee, $fb, $03, $08, $88, $80, $83, $95
15232     AB BF D2 F3 
15236     0F 27 3F 53 
1523a     65 73 7D 7E 
1523e     00 EA F5 FF | 	byte	$ab, $bf, $d2, $f3, $0f, $27, $3f, $53, $65, $73, $7d, $7e, $00, $ea, $f5, $ff
15242     0F 1F 2F 3E 
15246     01 00 D2 DF 
1524a     EF FB 05 08 
1524e     80 80 83 97 | 	byte	$0f, $1f, $2f, $3e, $01, $00, $d2, $df, $ef, $fb, $05, $08, $80, $80, $83, $97
15252     AB BF D2 F7 
15256     0F 27 3F 55 
1525a     67 75 7E 7E 
1525e     E8 EB F5 FF | 	byte	$ab, $bf, $d2, $f7, $0f, $27, $3f, $55, $67, $75, $7e, $7e, $e8, $eb, $f5, $ff
15262     0F 1F 33 38 
15266     FF 00 D2 E3 
1526a     EF FD 05 08 
1526e     80 80 87 97 | 	byte	$0f, $1f, $33, $38, $ff, $00, $d2, $e3, $ef, $fd, $05, $08, $80, $80, $87, $97
15272     AF C7 D3 F7 
15276     13 2B 3F 57 
1527a     67 75 7F 78 
1527e     E6 EB F7 03 | 	byte	$af, $c7, $d3, $f7, $13, $2b, $3f, $57, $67, $75, $7f, $78, $e6, $eb, $f7, $03
15282     13 23 33 28 
15286     03 00 D2 E3 
1528a     F2 FE 07 00 
1528e     80 80 87 9B | 	byte	$13, $23, $33, $28, $03, $00, $d2, $e3, $f2, $fe, $07, $00, $80, $80, $87, $9b
15292     AF C7 D7 FB 
15296     15 2F 43 57 
1529a     6A 77 7F 70 
1529e     E6 ED F7 05 | 	byte	$af, $c7, $d7, $fb, $15, $2f, $43, $57, $6a, $77, $7f, $70, $e6, $ed, $f7, $05
152a2     15 25 36 10 
152a6     05 00 D3 E5 
152aa     F3 FF 07 00 
152ae     80 80 89 9D | 	byte	$15, $25, $36, $10, $05, $00, $d3, $e5, $f3, $ff, $07, $00, $80, $80, $89, $9d
152b2     B3 CB DF FF 
152b6     17 2F 47 5B 
152ba     6B 77 7F 60 
152be     E6 EE F9 07 | 	byte	$b3, $cb, $df, $ff, $17, $2f, $47, $5b, $6b, $77, $7f, $60, $e6, $ee, $f9, $07
152c2     17 27 37 00 
152c6     07 00 D4 E7 
152ca     F5 FF 07 E0 
152ce     80 80 8B 9F | 	byte	$17, $27, $37, $00, $07, $00, $d4, $e7, $f5, $ff, $07, $e0, $80, $80, $8b, $9f
152d2     B5 CD E7 FF 
152d6     1B 33 47 5B 
152da     6D 79 7F 48 
152de     E7 EF FB 07 | 	byte	$b5, $cd, $e7, $ff, $1b, $33, $47, $5b, $6d, $79, $7f, $48, $e7, $ef, $fb, $07
152e2     17 27 36 F9 
152e6     07 00 D5 E7 
152ea     F5 FF 08 D2 
152ee     80 80 8D 9F | 	byte	$17, $27, $36, $f9, $07, $00, $d5, $e7, $f5, $ff, $08, $d2, $80, $80, $8d, $9f
152f2     B7 CF EB FF 
152f6     1D 35 4B 5E 
152fa     6D 79 7F 40 
152fe     E8 EF FB 09 | 	byte	$b7, $cf, $eb, $ff, $1d, $35, $4b, $5e, $6d, $79, $7f, $40, $e8, $ef, $fb, $09
15302     17 29 30 FA 
15306     0B 00 D7 E9 
1530a     F7 FF 06 D0 
1530e     80 80 8F A3 | 	byte	$17, $29, $30, $fa, $0b, $00, $d7, $e9, $f7, $ff, $06, $d0, $80, $80, $8f, $a3
15312     BB CF EB 07 
15316     1F 37 4B 5F 
1531a     6F 7A 7C 30 
1531e     E8 EF FD 0B | 	byte	$bb, $cf, $eb, $07, $1f, $37, $4b, $5f, $6f, $7a, $7c, $30, $e8, $ef, $fd, $0b
15322     1B 2B 20 FB 
15326     0D 00 DB EB 
1532a     F7 02 00 C0 
1532e     80 81 8F A7 | 	byte	$1b, $2b, $20, $fb, $0d, $00, $db, $eb, $f7, $02, $00, $c0, $80, $81, $8f, $a7
15332     BD D2 EF 07 
15336     1F 37 4F 5F 
1533a     6F 7B 74 30 
1533e     E9 F2 FF 0D | 	byte	$bd, $d2, $ef, $07, $1f, $37, $4f, $5f, $6f, $7b, $74, $30, $e9, $f2, $ff, $0d
15342     1D 2D 10 FD 
15346     0F 00 DD ED 
1534a     F9 03 00 B8 
1534e     80 83 93 A7 | 	byte	$1d, $2d, $10, $fd, $0f, $00, $dd, $ed, $f9, $03, $00, $b8, $80, $83, $93, $a7
15352     BF D2 EF 0B 
15356     23 3B 4F 5F 
1535a     6F 7B 60 30 
1535e     EA F3 FF 0F | 	byte	$bf, $d2, $ef, $0b, $23, $3b, $4f, $5f, $6f, $7b, $60, $30, $ea, $f3, $ff, $0f
15362     1E 2F 00 FF 
15366     0F 00 DF ED 
1536a     FA 03 E0 B8 
1536e     80 83 96 AB | 	byte	$1e, $2f, $00, $ff, $0f, $00, $df, $ed, $fa, $03, $e0, $b8, $80, $83, $96, $ab
15372     BF D2 F3 0D 
15376     27 3D 4F 63 
1537a     72 7B 50 30 
1537e     EB F5 FF 0F | 	byte	$bf, $d2, $f3, $0d, $27, $3d, $4f, $63, $72, $7b, $50, $30, $eb, $f5, $ff, $0f
15382     1F 2E F2 FF 
15386     13 00 DF EF 
1538a     FB 04 D4 BA 
1538e     80 86 97 AD | 	byte	$1f, $2e, $f2, $ff, $13, $00, $df, $ef, $fb, $04, $d4, $ba, $80, $86, $97, $ad
15392     BF D2 F7 0F 
15396     27 3F 53 65 
1539a     73 7C 40 30 
1539e     EC F6 FF 0F | 	byte	$bf, $d2, $f7, $0f, $27, $3f, $53, $65, $73, $7c, $40, $30, $ec, $f6, $ff, $0f
153a2     1F 28 F1 FF 
153a6     13 00 DF EF 
153aa     FB 04 D2 BC 
153ae     80 87 9B AF | 	byte	$1f, $28, $f1, $ff, $13, $00, $df, $ef, $fb, $04, $d2, $bc, $80, $87, $9b, $af
153b2     C7 D3 F7 0F 
153b6     2B 3F 55 66 
153ba     73 7A 32 30 
153be     ED F7 03 13 | 	byte	$c7, $d3, $f7, $0f, $2b, $3f, $55, $66, $73, $7a, $32, $30, $ed, $f7, $03, $13
153c2     23 20 F3 05 
153c6     17 00 E3 EF 
153ca     FD 00 C0 BC 
153ce     80 8A 9B AF | 	byte	$23, $20, $f3, $05, $17, $00, $e3, $ef, $fd, $00, $c0, $bc, $80, $8a, $9b, $af
153d2     C7 D7 FB 13 
153d6     2D 3F 57 67 
153da     74 74 32 30 
153de     EE F7 05 13 | 	byte	$c7, $d7, $fb, $13, $2d, $3f, $57, $67, $74, $74, $32, $30, $ee, $f7, $05, $13
153e2     23 10 F3 07 
153e6     17 00 E5 F3 
153ea     FE 00 BB C0 
153ee     80 8B 9F B3 | 	byte	$23, $10, $f3, $07, $17, $00, $e5, $f3, $fe, $00, $bb, $c0, $80, $8b, $9f, $b3
153f2     CB DF FF 17 
153f6     2F 45 57 67 
153fa     75 68 32 30 
153fe     EF FA 07 16 | 	byte	$cb, $df, $ff, $17, $2f, $45, $57, $67, $75, $68, $32, $30, $ef, $fa, $07, $16
15402     26 00 F7 07 
15406     19 00 E6 F3 
1540a     FF E8 BD C0 
1540e     80 8F 9F B7 | 	byte	$26, $00, $f7, $07, $19, $00, $e6, $f3, $ff, $e8, $bd, $c0, $80, $8f, $9f, $b7
15412     CF E7 FF 17 
15416     2F 47 59 69 
1541a     75 50 33 30 
1541e     F1 FB 07 17 | 	byte	$cf, $e7, $ff, $17, $2f, $47, $59, $69, $75, $50, $33, $30, $f1, $fb, $07, $17
15422     26 EA F7 0B 
15426     1B 00 E7 F5 
1542a     FF D4 BE C0 
1542e     81 8F A3 B7 | 	byte	$26, $ea, $f7, $0b, $1b, $00, $e7, $f5, $ff, $d4, $be, $c0, $81, $8f, $a3, $b7
15432     CF EB FF 1B 
15436     33 47 5B 6B 
1543a     76 40 33 32 
1543e     F2 FD 0A 19 | 	byte	$cf, $eb, $ff, $1b, $33, $47, $5b, $6b, $76, $40, $33, $32, $f2, $fd, $0a, $19
15442     22 E7 FA 0B 
15446     1D 00 E7 F5 
1544a     FF D2 BF C0 
1544e     83 93 A6 BB | 	byte	$22, $e7, $fa, $0b, $1d, $00, $e7, $f5, $ff, $d2, $bf, $c0, $83, $93, $a6, $bb
15452     D1 EB FF 1F 
15456     35 49 5B 6B 
1545a     74 30 35 34 
1545e     F3 FF 0B 1B | 	byte	$d1, $eb, $ff, $1f, $35, $49, $5b, $6b, $74, $30, $35, $34, $f3, $ff, $0b, $1b
15462     18 EA FB 0F 
15466     1F 00 E9 F7 
1546a     FC C0 BF C0 
1546e     85 95 A7 BF | 	byte	$18, $ea, $fb, $0f, $1f, $00, $e9, $f7, $fc, $c0, $bf, $c0, $85, $95, $a7, $bf
15472     D2 EF 07 1F 
15476     37 4B 5D 6B 
1547a     70 2D 35 34 
1547e     F5 FF 0D 1D | 	byte	$d2, $ef, $07, $1f, $37, $4b, $5d, $6b, $70, $2d, $35, $34, $f5, $ff, $0d, $1d
15482     08 EB FF 0F 
15486     1F 00 EB F7 
1548a     F4 B7 BF C0 
1548e     87 97 AB BF | 	byte	$08, $eb, $ff, $0f, $1f, $00, $eb, $f7, $f4, $b7, $bf, $c0, $87, $97, $ab, $bf
15492     D2 EF 0B 1F 
15496     37 4D 5F 6D 
1549a     64 2E 36 34 
1549e     F5 FF 0F 1E | 	byte	$d2, $ef, $0b, $1f, $37, $4d, $5f, $6d, $64, $2e, $36, $34, $f5, $ff, $0f, $1e
154a2     00 ED FF 0F 
154a6     1F 00 EB F7 
154aa     E8 B9 C3 C4 
154ae     87 97 AD BF | 	byte	$00, $ed, $ff, $0f, $1f, $00, $eb, $f7, $e8, $b9, $c3, $c4, $87, $97, $ad, $bf
154b2     D2 F3 0B 23 
154b6     3B 4F 5F 6D 
154ba     50 2F 37 38 
154be     F7 FF 0F 1F | 	byte	$d2, $f3, $0b, $23, $3b, $4f, $5f, $6d, $50, $2f, $37, $38, $f7, $ff, $0f, $1f
154c2     E4 EF FF 13 
154c6     23 00 ED F9 
154ca     D4 B9 C5 C8 
154ce     8B 9B AF C5 | 	byte	$e4, $ef, $ff, $13, $23, $00, $ed, $f9, $d4, $b9, $c5, $c8, $8b, $9b, $af, $c5
154d2     D3 F7 0F 27 
154d6     3B 4F 5F 6E 
154da     40 2F 37 38 
154de     F7 03 12 1C | 	byte	$d3, $f7, $0f, $27, $3b, $4f, $5f, $6e, $40, $2f, $37, $38, $f7, $03, $12, $1c
154e2     E0 EF FF 15 
154e6     25 00 EE F9 
154ea     D2 BB C6 C8 
154ee     8D 9E AF C7 | 	byte	$e0, $ef, $ff, $15, $25, $00, $ee, $f9, $d2, $bb, $c6, $c8, $8d, $9e, $af, $c7
154f2     D5 F7 0F 27 
154f6     3F 4F 5F 6D 
154fa     30 2F 39 38 
154fe     FA 05 13 14 | 	byte	$d5, $f7, $0f, $27, $3f, $4f, $5f, $6d, $30, $2f, $39, $38, $fa, $05, $13, $14
15502     DF F3 05 17 
15506     27 00 EF F8 
1550a     C0 BD C7 C8 
1550e     8F 9F B5 CB | 	byte	$df, $f3, $05, $17, $27, $00, $ef, $f8, $c0, $bd, $c7, $c8, $8f, $9f, $b5, $cb
15512     D7 FB 13 2B 
15516     3F 53 5F 6A 
1551a     28 2F 3B 38 
1551e     FB 07 15 00 | 	byte	$d7, $fb, $13, $2b, $3f, $53, $5f, $6a, $28, $2f, $3b, $38, $fb, $07, $15, $00
15522     E3 F5 07 17 
15526     27 00 EF F0 
1552a     B2 BE C9 C8 
1552e     8F 9F B7 CD | 	byte	$e3, $f5, $07, $17, $27, $00, $ef, $f0, $b2, $be, $c9, $c8, $8f, $9f, $b7, $cd
15532     DF FD 15 2B 
15536     3F 53 63 60 
1553a     27 31 3B 38 
1553e     FD 07 17 00 | 	byte	$df, $fd, $15, $2b, $3f, $53, $63, $60, $27, $31, $3b, $38, $fd, $07, $17, $00
15542     E3 F7 07 19 
15546     27 00 EF E8 
1554a     B3 BF CB D0 
1554e     93 A5 B9 CF | 	byte	$e3, $f7, $07, $19, $27, $00, $ef, $e8, $b3, $bf, $cb, $d0, $93, $a5, $b9, $cf
15552     E7 FF 17 2F 
15556     3F 53 63 50 
1555a     27 33 3D 38 
1555e     FE 0A 17 E0 | 	byte	$e7, $ff, $17, $2f, $3f, $53, $63, $50, $27, $33, $3d, $38, $fe, $0a, $17, $e0
15562     E7 F7 0B 1B 
15566     2B 00 EF D4 
1556a     B3 BF CD D0 
1556e     95 A7 BB CF | 	byte	$e7, $f7, $0b, $1b, $2b, $00, $ef, $d4, $b3, $bf, $cd, $d0, $95, $a7, $bb, $cf
15572     EB FF 17 2F 
15576     3F 55 63 40 
1557a     27 33 3F 40 
1557e     FF 0B 16 D9 | 	byte	$eb, $ff, $17, $2f, $3f, $55, $63, $40, $27, $33, $3f, $40, $ff, $0b, $16, $d9
15582     E7 FB 0B 1D 
15586     2B 00 F1 D2 
1558a     B5 BF CF D2 
1558e     97 AB BF D2 | 	byte	$e7, $fb, $0b, $1d, $2b, $00, $f1, $d2, $b5, $bf, $cf, $d2, $97, $ab, $bf, $d2
15592     ED FF 1B 2F 
15596     45 57 64 28 
1559a     29 35 3F 40 
1559e     FF 0D 10 D7 | 	byte	$ed, $ff, $1b, $2f, $45, $57, $64, $28, $29, $35, $3f, $40, $ff, $0d, $10, $d7
155a2     EB FB 0E 1F 
155a6     2D 00 F1 C0 
155aa     B7 C3 CF D2 
155ae     9B AB BF D2 | 	byte	$eb, $fb, $0e, $1f, $2d, $00, $f1, $c0, $b7, $c3, $cf, $d2, $9b, $ab, $bf, $d2
155b2     EF 07 1D 33 
155b6     47 57 62 20 
155ba     2A 36 3F 40 
155be     03 0F 00 D7 | 	byte	$ef, $07, $1d, $33, $47, $57, $62, $20, $2a, $36, $3f, $40, $03, $0f, $00, $d7
155c2     EB FF 0F 1F 
155c6     2E 00 EC AB 
155ca     B7 C5 D1 D4 
155ce     9D AF BF D2 | 	byte	$eb, $ff, $0f, $1f, $2e, $00, $ec, $ab, $b7, $c5, $d1, $d4, $9d, $af, $bf, $d2
155d2     EF 07 1F 33 
155d6     47 57 5C 1F 
155da     2B 37 3F 40 
155de     03 0F F0 DB | 	byte	$ef, $07, $1f, $33, $47, $57, $5c, $1f, $2b, $37, $3f, $40, $03, $0f, $f0, $db
155e2     EE FF 0F 1F 
155e6     2F 00 E0 AD 
155ea     B9 C7 D2 D6 
155ee     9F AF C7 D2 | 	byte	$ee, $ff, $0f, $1f, $2f, $00, $e0, $ad, $b9, $c7, $d2, $d6, $9f, $af, $c7, $d2
155f2     F3 0B 1F 37 
155f6     47 57 50 1F 
155fa     2B 37 43 40 
155fe     05 11 E0 DF | 	byte	$f3, $0b, $1f, $37, $47, $57, $50, $1f, $2b, $37, $43, $40, $05, $11, $e0, $df
15602     EF FF 13 1F 
15606     2F 00 D4 AD 
1560a     BB C7 D2 D8 
1560e     9F B3 C7 D3 | 	byte	$ef, $ff, $13, $1f, $2f, $00, $d4, $ad, $bb, $c7, $d2, $d8, $9f, $b3, $c7, $d3
15612     F7 0B 1F 37 
15616     49 59 40 1F 
1561a     2D 39 44 40 
1561e     07 11 D5 DF | 	byte	$f7, $0b, $1f, $37, $49, $59, $40, $1f, $2d, $39, $44, $40, $07, $11, $d5, $df
15622     EF FF 13 23 
15626     2F 00 D0 AF 
1562a     BD CB D2 D8 
1562e     A3 B7 CB D7 | 	byte	$ef, $ff, $13, $23, $2f, $00, $d0, $af, $bd, $cb, $d2, $d8, $a3, $b7, $cb, $d7
15632     F7 0F 23 37 
15636     4B 59 28 1F 
1563a     2F 3B 45 40 
1563e     07 0C D3 DF | 	byte	$f7, $0f, $23, $37, $4b, $59, $28, $1f, $2f, $3b, $45, $40, $07, $0c, $d3, $df
15642     F3 05 15 25 
15646     32 00 C0 AF 
1564a     BF CB D2 D8 
1564e     A7 B7 CD DF | 	byte	$f3, $05, $15, $25, $32, $00, $c0, $af, $bf, $cb, $d2, $d8, $a7, $b7, $cd, $df
15652     FB 0F 27 3B 
15656     4B 58 18 1F 
1565a     2F 3B 47 40 
1565e     0A 00 D2 E3 | 	byte	$fb, $0f, $27, $3b, $4b, $58, $18, $1f, $2f, $3b, $47, $40, $0a, $00, $d2, $e3
15662     F5 07 17 26 
15666     33 00 A5 AF 
1566a     BF CE D5 E0 
1566e     A7 BB CF E7 | 	byte	$f5, $07, $17, $26, $33, $00, $a5, $af, $bf, $ce, $d5, $e0, $a7, $bb, $cf, $e7
15672     FB 13 27 3B 
15676     4B 54 16 23 
1567a     2F 3D 49 40 
1567e     0B F0 D2 E5 | 	byte	$fb, $13, $27, $3b, $4b, $54, $16, $23, $2f, $3d, $49, $40, $0b, $f0, $d2, $e5
15682     F7 07 17 27 
15686     33 00 A5 B3 
1568a     BF CF D7 E0 
1568e     AB BF CF E7 | 	byte	$f7, $07, $17, $27, $33, $00, $a5, $b3, $bf, $cf, $d7, $e0, $ab, $bf, $cf, $e7
15692     FF 13 27 3B 
15696     4D 48 16 23 
1569a     31 3F 4B 40 
1569e     0D E0 D2 E7 | 	byte	$ff, $13, $27, $3b, $4d, $48, $16, $23, $31, $3f, $4b, $40, $0d, $e0, $d2, $e7
156a2     F7 09 19 27 
156a6     35 E0 A6 B3 
156aa     BF D1 DF E0 
156ae     AE BF D1 EB | 	byte	$f7, $09, $19, $27, $35, $e0, $a6, $b3, $bf, $d1, $df, $e0, $ae, $bf, $d1, $eb
156b2     FF 17 2B 3D 
156b6     4D 40 17 25 
156ba     33 3F 4B 40 
156be     0D D4 D2 E9 | 	byte	$ff, $17, $2b, $3d, $4d, $40, $17, $25, $33, $3f, $4b, $40, $0d, $d4, $d2, $e9
156c2     FB 0B 1B 29 
156c6     35 D4 A7 B5 
156ca     C5 D1 E3 E0 
156ce     AF BF D2 ED | 	byte	$fb, $0b, $1b, $29, $35, $d4, $a7, $b5, $c5, $d1, $e3, $e0, $af, $bf, $d2, $ed
156d2     FF 17 2B 3F 
156d6     4E 20 17 25 
156da     33 3F 4D 40 
156de     08 D2 D2 EB | 	byte	$ff, $17, $2b, $3f, $4e, $20, $17, $25, $33, $3f, $4d, $40, $08, $d2, $d2, $eb
156e2     FB 0D 1B 2A 
156e6     35 D0 A7 B7 
156ea     C7 D2 E7 E0 
156ee     B3 C5 D2 EF | 	byte	$fb, $0d, $1b, $2a, $35, $d0, $a7, $b7, $c7, $d2, $e7, $e0, $b3, $c5, $d2, $ef
156f2     FF 17 2D 3F 
156f6     4D 10 17 27 
156fa     35 3F 4F 40 
156fe     00 D2 D3 ED | 	byte	$ff, $17, $2d, $3f, $4d, $10, $17, $27, $35, $3f, $4f, $40, $00, $d2, $d3, $ed
15702     FD 0F 1D 2B 
15706     34 D0 A9 B7 
1570a     C7 D2 E7 E0 
1570e     B5 C7 D2 EF | 	byte	$fd, $0f, $1d, $2b, $34, $d0, $a9, $b7, $c7, $d2, $e7, $e0, $b5, $c7, $d2, $ef
15712     07 1B 2F 3F 
15716     4A 0B 17 27 
1571a     37 43 4F 48 
1571e     F0 CD D7 EF | 	byte	$07, $1b, $2f, $3f, $4a, $0b, $17, $27, $37, $43, $4f, $48, $f0, $cd, $d7, $ef
15722     FF 0F 1F 2B 
15726     30 C0 AB BB 
1572a     CB D2 EB E4 
1572e     B7 CB D3 F3 | 	byte	$ff, $0f, $1f, $2b, $30, $c0, $ab, $bb, $cb, $d2, $eb, $e4, $b7, $cb, $d3, $f3
15732     07 1D 2F 3F 
15736     40 0B 1A 29 
1573a     37 45 51 48 
1573e     E0 CF D7 EF | 	byte	$07, $1d, $2f, $3f, $40, $0b, $1a, $29, $37, $45, $51, $48, $e0, $cf, $d7, $ef
15742     FF 0F 1F 2D 
15746     20 C0 AB BB 
1574a     CD D3 ED E8 
1574e     BB CB D7 F5 | 	byte	$ff, $0f, $1f, $2d, $20, $c0, $ab, $bb, $cd, $d3, $ed, $e8, $bb, $cb, $d7, $f5
15752     0B 1F 2F 3F 
15756     30 0B 1B 2B 
1575a     39 47 53 48 
1575e     D2 CF DF F3 | 	byte	$0b, $1f, $2f, $3f, $30, $0b, $1b, $2b, $39, $47, $53, $48, $d2, $cf, $df, $f3
15762     FF 12 1F 2D 
15766     10 A8 AD BF 
1576a     CF D7 EF E8 
1576e     BD CF DF F7 | 	byte	$ff, $12, $1f, $2d, $10, $a8, $ad, $bf, $cf, $d7, $ef, $e8, $bd, $cf, $df, $f7
15772     0B 1F 2F 3F 
15776     20 0B 1B 2B 
1577a     3B 47 55 40 
1577e     D2 D1 E3 F3 | 	byte	$0b, $1f, $2f, $3f, $20, $0b, $1b, $2b, $3b, $47, $55, $40, $d2, $d1, $e3, $f3
15782     03 13 1F 2E 
15786     00 A8 AF BF 
1578a     CF DF F3 E8 
1578e     BF CF E6 F9 | 	byte	$03, $13, $1f, $2e, $00, $a8, $af, $bf, $cf, $df, $f3, $e8, $bf, $cf, $e6, $f9
15792     0D 1F 33 3F 
15796     08 0D 1D 2D 
1579a     3B 4A 56 40 
1579e     D0 D2 E5 F5 | 	byte	$0d, $1f, $33, $3f, $08, $0d, $1d, $2d, $3b, $4a, $56, $40, $d0, $d2, $e5, $f5
157a2     05 15 23 2E 
157a6     F0 A8 AF BF 
157aa     D1 E5 F5 F0 
157ae     BF D1 E7 FB | 	byte	$05, $15, $23, $2e, $f0, $a8, $af, $bf, $d1, $e5, $f5, $f0, $bf, $d1, $e7, $fb
157b2     0F 1F 33 3F 
157b6     00 0F 1F 2F 
157ba     3D 4B 57 40 
157be     C8 D2 E7 F7 | 	byte	$0f, $1f, $33, $3f, $00, $0f, $1f, $2f, $3d, $4b, $57, $40, $c8, $d2, $e7, $f7
157c2     07 15 23 28 
157c6     E8 A8 B3 C3 
157ca     D2 E7 F7 F0 
157ce     BF D2 E9 FD | 	byte	$07, $15, $23, $28, $e8, $a8, $b3, $c3, $d2, $e7, $f7, $f0, $bf, $d2, $e9, $fd
157d2     0F 23 33 38 
157d6     FF 0F 1F 2F 
157da     3F 4D 59 20 
157de     CA D2 E7 F7 | 	byte	$0f, $23, $33, $38, $ff, $0f, $1f, $2f, $3f, $4d, $59, $20, $ca, $d2, $e7, $f7
157e2     07 17 23 20 
157e6     E8 A8 B3 C5 
157ea     D2 E7 F9 F0 
157ee     C7 D2 EB FF | 	byte	$07, $17, $23, $20, $e8, $a8, $b3, $c5, $d2, $e7, $f9, $f0, $c7, $d2, $eb, $ff
157f2     0F 23 35 30 
157f6     FF 0F 1F 2F 
157fa     3F 4F 5A 00 
157fe     D0 D2 EB FB | 	byte	$0f, $23, $35, $30, $ff, $0f, $1f, $2f, $3f, $4f, $5a, $00, $d0, $d2, $eb, $fb
15802     09 17 25 10 
15806     E9 C0 B7 C7 
1580a     D2 EB FB F0 
1580e     C7 D2 EE FF | 	byte	$09, $17, $25, $10, $e9, $c0, $b7, $c7, $d2, $eb, $fb, $f0, $c7, $d2, $ee, $ff
15812     13 25 35 20 
15816     FF 0F 1F 33 
1581a     3F 4F 58 00 
1581e     D2 D5 EB FB | 	byte	$13, $25, $35, $20, $ff, $0f, $1f, $33, $3f, $4f, $58, $00, $d2, $d5, $eb, $fb
15822     0B 19 25 00 
15826     EA C0 B7 C9 
1582a     D2 EE FF F0 
1582e     CB D3 EF FF | 	byte	$0b, $19, $25, $00, $ea, $c0, $b7, $c9, $d2, $ee, $ff, $f0, $cb, $d3, $ef, $ff
15832     15 26 35 00 
15836     FF 12 23 33 
1583a     43 51 50 00 
1583e     D2 DF EE FD | 	byte	$15, $26, $35, $00, $ff, $12, $23, $33, $43, $51, $50, $00, $d2, $df, $ee, $fd
15842     0B 1A 26 E8 
15846     EB C0 BA CB 
1584a     D5 EF FF 00 
1584e     D0 D7 EF FF | 	byte	$0b, $1a, $26, $e8, $eb, $c0, $ba, $cb, $d5, $ef, $ff, $00, $d0, $d7, $ef, $ff
15852     16 27 34 00 
15856     FF 13 23 35 
1585a     45 53 40 00 
1585e     D2 DF EF FF | 	byte	$16, $27, $34, $00, $ff, $13, $23, $35, $45, $53, $40, $00, $d2, $df, $ef, $ff
15862     0D 1B 24 E2 
15866     EC C0 BB CE 
1586a     D7 F3 FF 00 
1586e     D2 DF F3 05 | 	byte	$0d, $1b, $24, $e2, $ec, $c0, $bb, $ce, $d7, $f3, $ff, $00, $d2, $df, $f3, $05
15872     17 27 30 F3 
15876     FF 13 25 37 
1587a     46 55 30 00 
1587e     D3 E3 EF FF | 	byte	$17, $27, $30, $f3, $ff, $13, $25, $37, $46, $55, $30, $00, $d3, $e3, $ef, $ff
15882     0E 1B 20 E1 
15886     ED C0 BF CF 
1588a     DF F5 05 00 
1588e     D2 E3 F5 07 | 	byte	$0e, $1b, $20, $e1, $ed, $c0, $bf, $cf, $df, $f5, $05, $00, $d2, $e3, $f5, $07
15892     17 27 24 F3 
15896     FF 15 27 37 
1589a     47 56 20 00 
1589e     D4 E3 F3 FF | 	byte	$17, $27, $24, $f3, $ff, $15, $27, $37, $47, $56, $20, $00, $d4, $e3, $f3, $ff
158a2     0F 1D 10 E2 
158a6     EF C0 BF CF 
158aa     E6 F7 07 00 
158ae     D2 E5 F7 07 | 	byte	$0f, $1d, $10, $e2, $ef, $c0, $bf, $cf, $e6, $f7, $07, $00, $d2, $e5, $f7, $07
158b2     17 27 10 F3 
158b6     05 17 27 39 
158ba     49 54 14 00 
158be     D6 E5 F3 FF | 	byte	$17, $27, $10, $f3, $05, $17, $27, $39, $49, $54, $14, $00, $d6, $e5, $f3, $ff
158c2     0F 1D 00 E3 
158c6     EF C0 BF D2 
158ca     E7 FB 0B 00 
158ce     D4 E7 F7 09 | 	byte	$0f, $1d, $00, $e3, $ef, $c0, $bf, $d2, $e7, $fb, $0b, $00, $d4, $e7, $f7, $09
158d2     1A 29 00 F5 
158d6     06 17 29 3B 
158da     4B 50 13 00 
158de     D7 E7 F5 03 | 	byte	$1a, $29, $00, $f5, $06, $17, $29, $3b, $4b, $50, $13, $00, $d7, $e7, $f5, $03
158e2     0F 1D E8 E5 
158e6     F2 C0 C3 D2 
158ea     EB FD 0D 00 
158ee     D6 E9 FB 0B | 	byte	$0f, $1d, $e8, $e5, $f2, $c0, $c3, $d2, $eb, $fd, $0d, $00, $d6, $e9, $fb, $0b
158f2     1B 29 F0 F5 
158f6     07 19 2B 3D 
158fa     4D 40 15 00 
158fe     DB E9 F7 05 | 	byte	$1b, $29, $f0, $f5, $07, $19, $2b, $3d, $4d, $40, $15, $00, $db, $e9, $f7, $05
15902     00 00       | 	byte	$00, $00
15904                 | 	alignl
15904                 | _hng030rm_spin2_dat_
15904     00 00 00 00 
15908     00 00 00 00 
1590c     00 00 00 00 
15910     00 00 00 00 
15914     00 00 00    | vga_font       file "vgafont.def"
15917     7E 81 A5 81 
1591b     81 BD 99 81 
1591f     81 7E 00 00 
15923     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
15927     7E FF DB FF 
1592b     FF C3 E7 FF 
1592f     FF 7E 00 00 
15933     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
15937     00 36 7F 7F 
1593b     7F 7F 3E 1C 
1593f     08 00 00 00 
15943     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
15947     00 08 1C 3E 
1594b     7F 3E 1C 08 
1594f     00 00 00 00 
15953     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
15957     18 3C 3C E7 
1595b     E7 E7 18 18 
1595f     3C 00 00 00 
15963     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
15967     18 3C 7E FF 
1596b     FF 7E 18 18 
1596f     3C 00 00 00 
15973     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
15977     00 00 00 18 
1597b     3C 3C 18 00 
1597f     00 00 00 00 
15983     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
15987     FF FF FF E7 
1598b     C3 C3 E7 FF 
1598f     FF FF FF FF 
15993     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
15997     00 00 3C 66 
1599b     42 42 66 3C 
1599f     00 00 00 00 
159a3     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
159a7     FF FF C3 99 
159ab     BD BD 99 C3 
159af     FF FF FF FF 
159b3     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
159b7     78 70 58 4C 
159bb     1E 33 33 33 
159bf     33 1E 00 00 
159c3     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
159c7     3C 66 66 66 
159cb     66 3C 18 7E 
159cf     18 18 00 00 
159d3     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
159d7     FC CC FC 0C 
159db     0C 0C 0C 0E 
159df     0F 07 00 00 
159e3     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
159e7     FE C6 FE C6 
159eb     C6 C6 C6 E6 
159ef     E7 67 03 00 
159f3     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
159f7     18 18 DB 3C 
159fb     E7 3C DB 18 
159ff     18 00 00 00 
15a03     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
15a07     03 07 0F 1F 
15a0b     7F 1F 0F 07 
15a0f     03 01 00 00 
15a13     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
15a17     60 70 78 7C 
15a1b     7F 7C 78 70 
15a1f     60 40 00 00 
15a23     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
15a27     18 3C 7E 18 
15a2b     18 18 7E 3C 
15a2f     18 00 00 00 
15a33     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
15a37     66 66 66 66 
15a3b     66 66 66    | 	byte	$66[7]
15a3e     00 66 66 00 
15a42     00 00 00 00 
15a46     00 FE DB DB 
15a4a     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
15a4e     D8 D8 D8 00 
15a52     00 00 00 3E 
15a56     63 06 1C 36 
15a5a     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
15a5e     30 63 3E 00 
15a62     00 00 00 00 
15a66     00 00 00 00 
15a6a     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
15a6e     7F 7F 7F 00 
15a72     00 00 00 00 
15a76     00 18 3C 7E 
15a7a     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
15a7e     3C 18 7E 00 
15a82     00 00 00 00 
15a86     00 18 3C 7E 
15a8a     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
15a8e     18 18 18 00 
15a92     00 00 00 00 
15a96     00 18 18 18 
15a9a     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
15a9e     7E 3C 18 00 
15aa2     00 00 00 00 
15aa6     00 00 00 18 
15aaa     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
15aae     00 00 00 00 
15ab2     00 00 00 00 
15ab6     00 00 00    | 	byte	$00[11]
15ab9     0C 06 7F 06 
15abd     0C 00 00 00 
15ac1     00 00 00 00 
15ac5     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15ac9     00 03 03 03 
15acd     7F 00 00 00 
15ad1     00 00 00 00 
15ad5     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15ad9     14 36 7F 36 
15add     14 00 00 00 
15ae1     00 00 00 00 
15ae5     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
15ae9     1C 1C 3E 3E 
15aed     7F 7F 00 00 
15af1     00 00 00 00 
15af5     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
15af9     7F 3E 3E 1C 
15afd     1C 08 00 00 
15b01     00 00 00 00 
15b05     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15b09     00 00 00 00 
15b0d     00 00 00 00 
15b11     00 00 00 00 
15b15     00 00       | 	byte	$00[14]
15b17     18 3C 3C 3C 
15b1b     18 18 18 00 
15b1f     18 18 00 00 
15b23     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
15b27     66 24 00 00 
15b2b     00 00 00 00 
15b2f     00 00 00 00 
15b33     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15b37     00 36 36 7F 
15b3b     36 36 36 7F 
15b3f     36 36 00 00 
15b43     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
15b47     3E 63 43 03 
15b4b     3E 60 60 61 
15b4f     63 3E 18 18 
15b53     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
15b57     00 00 43 63 
15b5b     30 18 0C 06 
15b5f     63 61 00 00 
15b63     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
15b67     1C 36 36 1C 
15b6b     6E 3B 33 33 
15b6f     33 6E 00 00 
15b73     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
15b77     0C 0C 0C 06 
15b7b     00 00 00 00 
15b7f     00 00 00 00 
15b83     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15b87     30 18 0C 0C 
15b8b     0C 0C 0C 0C 
15b8f     18 30 00 00 
15b93     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
15b97     0C 18 30 30 
15b9b     30 30 30 30 
15b9f     18 0C 00 00 
15ba3     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
15ba7     00 00 00 66 
15bab     3C FF 3C 66 
15baf     00 00 00 00 
15bb3     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
15bb7     00 00 00 18 
15bbb     18 7E 18 18 
15bbf     00 00 00 00 
15bc3     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
15bc7     00 00 00 00 
15bcb     00 00 00 00 | 	byte	$00[8]
15bcf     18 18 18 0C 
15bd3     00 00 00 00 
15bd7     00 00 00 00 
15bdb     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
15bdf     00 00 00 00 
15be3     00 00 00 00 
15be7     00 00 00 00 
15beb     00 00 00 00 | 	byte	$00[16]
15bef     18 18 00 00 
15bf3     00 00 00 00 
15bf7     00 00 40 60 
15bfb     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
15bff     03 01 00 00 
15c03     00 00 00 00 
15c07     1C 36 63 63 
15c0b     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
15c0f     36 1C 00 00 
15c13     00 00 00 00 
15c17     18 1C 1E 18 
15c1b     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
15c1f     18 7E 00 00 
15c23     00 00 00 00 
15c27     3E 63 60 30 
15c2b     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
15c2f     63 7F 00 00 
15c33     00 00 00 00 
15c37     3E 63 60 60 
15c3b     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
15c3f     63 3E 00 00 
15c43     00 00 00 00 
15c47     30 38 3C 36 
15c4b     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
15c4f     30 78 00 00 
15c53     00 00 00 00 
15c57     7F 03 03 03 
15c5b     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
15c5f     63 3E 00 00 
15c63     00 00 00 00 
15c67     1C 06 03 03 
15c6b     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
15c6f     63 3E 00 00 
15c73     00 00 00 00 
15c77     7F 63 60 60 
15c7b     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
15c7f     0C 0C 00 00 
15c83     00 00 00 00 
15c87     3E 63 63 63 
15c8b     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
15c8f     63 3E 00 00 
15c93     00 00 00 00 
15c97     3E 63 63 63 
15c9b     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
15c9f     30 1E 00 00 
15ca3     00 00 00 00 
15ca7     00 00 00 18 
15cab     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
15caf     18 18 00 00 
15cb3     00 00 00 00 
15cb7     00 00 00 18 
15cbb     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
15cbf     18 18 0C 00 
15cc3     00 00 00 00 
15cc7     00 60 30 18 
15ccb     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
15ccf     30 60 00 00 
15cd3     00 00 00 00 
15cd7     00 00 00 7E 
15cdb     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
15cdf     00 00 00 00 
15ce3     00 00 00 00 
15ce7     00          | 	byte	$00[9]
15ce8     06 0C 18 30 
15cec     60 30 18 0C 
15cf0     06 00 00 00 
15cf4     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
15cf8     63 63 30 18 
15cfc     18 18 00 18 
15d00     18 00 00 00 
15d04     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
15d08     3E 63 63 7B 
15d0c     7B 7B 3B 03 
15d10     3E 00 00 00 
15d14     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
15d18     1C 36 63 63 
15d1c     7F 63 63 63 
15d20     63 00 00 00 
15d24     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
15d28     66 66 66 3E 
15d2c     66 66 66 66 
15d30     3F 00 00 00 
15d34     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
15d38     66 43 03 03 
15d3c     03 03 43 66 
15d40     3C 00 00 00 
15d44     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
15d48     36 66 66 66 
15d4c     66 66 66 36 
15d50     1F 00 00 00 
15d54     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
15d58     66 46 16 1E 
15d5c     16 06 46 66 
15d60     7F 00 00 00 
15d64     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
15d68     66 46 16 1E 
15d6c     16 06 06 06 
15d70     0F 00 00 00 
15d74     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
15d78     66 43 03 03 
15d7c     7B 63 63 66 
15d80     5C 00 00 00 
15d84     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
15d88     63 63 63 7F 
15d8c     63 63 63 63 
15d90     63 00 00 00 
15d94     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
15d98     18 18 18 18 
15d9c     18 18 18 18 | 	byte	$18[8]
15da0     3C 00 00 00 
15da4     00 00 00 78 
15da8     30 30 30 30 
15dac     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
15db0     1E 00 00 00 
15db4     00 00 00 67 
15db8     66 66 36 1E 
15dbc     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
15dc0     67 00 00 00 
15dc4     00 00 00 0F 
15dc8     06 06 06 06 
15dcc     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
15dd0     7F 00 00 00 
15dd4     00 00 00 63 
15dd8     77 7F 7F 6B 
15ddc     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
15de0     63 00 00 00 
15de4     00 00 00 63 
15de8     67 6F 7F 7B 
15dec     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
15df0     63 00 00 00 
15df4     00 00 00 3E 
15df8     63 63 63 63 
15dfc     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
15e00     3E 00 00 00 
15e04     00 00 00 3F 
15e08     66 66 66 3E 
15e0c     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
15e10     0F 00 00 00 
15e14     00 00 00 3E 
15e18     63 63 63 63 
15e1c     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
15e20     3E 30 70 00 
15e24     00 00 00 3F 
15e28     66 66 66 3E 
15e2c     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
15e30     67 00 00 00 
15e34     00 00 00 3E 
15e38     63 63 06 1C 
15e3c     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
15e40     3E 00 00 00 
15e44     00 00 00 7E 
15e48     7E 5A 18 18 
15e4c     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
15e50     3C 00 00 00 
15e54     00 00 00 63 
15e58     63 63 63 63 
15e5c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
15e60     3E 00 00 00 
15e64     00 00 00 63 
15e68     63 63 63 63 
15e6c     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
15e70     08 00 00 00 
15e74     00 00 00 63 
15e78     63 63 63 6B 
15e7c     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
15e80     36 00 00 00 
15e84     00 00 00 63 
15e88     63 36 3E 1C 
15e8c     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
15e90     63 00 00 00 
15e94     00 00 00 66 
15e98     66 66 66 3C 
15e9c     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
15ea0     3C 00 00 00 
15ea4     00 00 00 7F 
15ea8     63 61 30 18 
15eac     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
15eb0     7F 00 00 00 
15eb4     00 00 00 3C 
15eb8     0C 0C 0C 0C 
15ebc     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
15ec0     3C 00 00 00 
15ec4     00 00 00 00 
15ec8     01 03 07 0E 
15ecc     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
15ed0     40 00 00 00 
15ed4     00 00 00 3C 
15ed8     30 30 30 30 
15edc     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
15ee0     3C 00 00 00 
15ee4     1C 36 00 00 
15ee8     00 00 00 00 
15eec     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15ef0     00 00 00 00 
15ef4     00 00 00 00 
15ef8     00 00 00 00 
15efc     00 00 00 00 
15f00     00          | 	byte	$00[17]
15f01     FF 00 00 0C 
15f05     18 00 00 00 
15f09     00 00 00 00 
15f0d     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
15f11     00 00 00 00 
15f15     00 00 00 00 
15f19     00          | 	byte	$00[9]
15f1a     1E 30 3E 33 
15f1e     33 33 6E 00 
15f22     00 00 00 00 
15f26     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
15f2a     1E 36 66 66 
15f2e     66 66 3E 00 
15f32     00 00 00 00 
15f36     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
15f3a     3E 63 03 03 
15f3e     03 63 3E 00 
15f42     00 00 00 00 
15f46     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
15f4a     3C 36 33 33 
15f4e     33 33 6E 00 
15f52     00 00 00 00 
15f56     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
15f5a     3E 63 7F 03 
15f5e     03 63 3E 00 
15f62     00 00 00 00 
15f66     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
15f6a     0C 1E 0C 0C 
15f6e     0C 0C 1E 00 
15f72     00 00 00 00 
15f76     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
15f7a     6E 33 33 33 
15f7e     33 33 3E 30 
15f82     33 1E 00 00 
15f86     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
15f8a     36 6E 66 66 
15f8e     66 66 67 00 
15f92     00 00 00 00 
15f96     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
15f9a     1C 18 18 18 
15f9e     18 18 3C 00 
15fa2     00 00 00 00 
15fa6     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
15faa     70 60 60 60 
15fae     60 60 60 66 
15fb2     66 3C 00 00 
15fb6     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
15fba     66 36 1E 1E 
15fbe     36 66 67 00 
15fc2     00 00 00 00 
15fc6     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
15fca     18 18 18 18 
15fce     18 18       | 	byte	$18[6]
15fd0     3C 00 00 00 
15fd4     00 00 00 00 
15fd8     00 00 37 7F 
15fdc     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
15fe0     63 00 00 00 
15fe4     00 00 00 00 
15fe8     00 00 3B 66 
15fec     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
15ff0     66 00 00 00 
15ff4     00 00 00 00 
15ff8     00 00 3E 63 
15ffc     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
16000     3E 00 00 00 
16004     00 00 00 00 
16008     00 00 3B 66 
1600c     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
16010     3E 06 06 0F 
16014     00 00 00 00 
16018     00 00 6E 33 
1601c     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
16020     3E 30 30 78 
16024     00 00 00 00 
16028     00 00 3B 6E 
1602c     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
16030     0F 00 00 00 
16034     00 00 00 00 
16038     00 00 3E 63 
1603c     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
16040     3E 00 00 00 
16044     00 00 00 08 
16048     0C 0C 3F 0C 
1604c     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
16050     38 00 00 00 
16054     00 00 00 00 
16058     00 00 33 33 
1605c     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
16060     6E 00 00 00 
16064     00 00 00 00 
16068     00 00 63 63 
1606c     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
16070     1C 00 00 00 
16074     00 00 00 00 
16078     00 00 63 63 
1607c     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
16080     36 00 00 00 
16084     00 00 00 00 
16088     00 00 63 36 
1608c     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
16090     63 00 00 00 
16094     00 00 00 00 
16098     00 00 63 63 
1609c     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
160a0     7E 60 30 1F 
160a4     00 00 00 00 
160a8     00 00 7F 33 
160ac     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
160b0     7F 00 00 00 
160b4     00 00 00 70 
160b8     18 18 18 0E 
160bc     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
160c0     70 00 00 00 
160c4     00 00 00 18 
160c8     18 18 18 18 
160cc     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
160d0     18 00 00 00 
160d4     00 00 00 0E 
160d8     18 18 18 70 
160dc     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
160e0     0E 00 00 00 
160e4     6E 3B 00 00 
160e8     00 00 00 00 
160ec     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
160f0     00 00 00 00 
160f4     00 00 00 00 
160f8     00 00       | 	byte	$00[10]
160fa     08 1C 36 63 
160fe     63 63 7F 00 
16102     00 00 00 00 
16106     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1610a     03 03 03 03 
1610e     43 66 3C 18 
16112     30 1E 00 00 
16116     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1611a     33 33 33 33 
1611e     33 33       | 	byte	$33[6]
16120     6E 00 00 00 
16124     00 00 60 30 
16128     18 00 3E 63 
1612c     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
16130     3E 00 00 00 
16134     00 00 08 1C 
16138     36 00 1E 30 
1613c     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
16140     6E 00 00 00 
16144     00 00 00 00 
16148     33 00 1E 30 
1614c     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
16150     6E 00 00 00 
16154     00 00 1C 36 
16158     1C 00 33 33 
1615c     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
16160     6E 00 00 00 
16164     00 00 60 30 
16168     18 00 3E 63 
1616c     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
16170     3E 00 00 00 
16174     00 00 00 00 
16178     00 00 3E 63 
1617c     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
16180     3E 18 30 1E 
16184     00 00 00 1C 
16188     58 78 38 18 
1618c     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
16190     3C 00 00 00 
16194     00 00 00 00 
16198     63 00 3E 63 
1619c     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
161a0     3E 00 00 00 
161a4     66 33 00 3E 
161a8     63 63 63 63 
161ac     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
161b0     3E 00 00 00 
161b4     00 00 CC 66 
161b8     33 00 3E 63 
161bc     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
161c0     3E 00 00 00 
161c4     00 00 18 3C 
161c8     66 00 1C 18 
161cc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
161d0     3C 00 00 00 
161d4     30 18 00 7F 
161d8     63 61 30 18 
161dc     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
161e0     7F 00 00 00 
161e4     00 63 00 08 
161e8     1C 36 63 63 
161ec     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
161f0     63 00 00 00 
161f4     30 18 00 3C 
161f8     66 43 03 03 
161fc     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
16200     3C 00 00 00 
16204     30 18 00 7F 
16208     66 46 16 1E 
1620c     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
16210     7F 00 00 00 
16214     0C 06 00 0F 
16218     06 06 06 06 
1621c     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
16220     7F 00 00 00 
16224     30 18 00 1C 
16228     18 18 18 18 
1622c     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
16230     3C 00 00 00 
16234     00 00 08 1C 
16238     36 00 3E 63 
1623c     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
16240     3E 00 00 00 
16244     00 00 00 00 
16248     63 00 3E 63 
1624c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
16250     3E 00 00 00 
16254     00 00 00 6F 
16258     46 26 06 06 
1625c     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
16260     7F 00 00 00 
16264     00 00 00 6E 
16268     4C 2C 0C 0C 
1626c     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
16270     1E 00 00 00 
16274     30 18 00 3E 
16278     63 63 06 1C 
1627c     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
16280     3E 00 00 00 
16284     00 00 60 30 
16288     18 00 3E 63 
1628c     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
16290     3E 00 00 00 
16294     00 63 00 3E 
16298     63 63 63 63 
1629c     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
162a0     3E 00 00 00 
162a4     00 63 00 63 
162a8     63 63 63 63 
162ac     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
162b0     3E 00 00 00 
162b4     6C 38 00 7E 
162b8     7E 5A 18 18 
162bc     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
162c0     3C 00 00 00 
162c4     00 00 60 48 
162c8     2C 0C 3F 0C 
162cc     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
162d0     38 00 00 00 
162d4     00 00 00 0F 
162d8     26 36 1E 0E 
162dc     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
162e0     7F 00 00 00 
162e4     00 00 00 00 
162e8     00 63 36 1C 
162ec     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
162f0     00 00 00 00 
162f4     00 00       | 	byte	$00[6]
162f6     36 1C 08 00 
162fa     3E 63 03 03 
162fe     03 63 3E 00 
16302     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
16306     30 18 0C 00 
1630a     1E 30 3E 33 
1630e     33 33 6E 00 
16312     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
16316     60 30 18 00 
1631a     1C 18 18 18 
1631e     18 18 3C 00 
16322     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
16326     60 30 18 00 
1632a     3E 63 63 63 
1632e     63 63 3E 00 
16332     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
16336     30 18 0C 00 
1633a     33 33 33 33 
1633e     33 33 6E 00 
16342     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
16346     00 08 1C 36 
1634a     63 63 7F 63 
1634e     63 63 63 18 
16352     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
16356     00 00 00 00 
1635a     1E 30 3E 33 
1635e     33 33 6E 18 
16362     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
16366     00 7F 63 61 
1636a     30 18 0C 06 
1636e     43 63 7F 00 
16372     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
16376     36 1C 08 00 
1637a     7F 33 18 0C 
1637e     06 63 7F 00 
16382     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
16386     00 7F 66 46 
1638a     16 1E 16 06 
1638e     46 66 7F 18 
16392     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
16396     00 00 00 00 
1639a     3E 63 7F 03 
1639e     03 63 3E 18 
163a2     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
163a6     00 3C 66 03 
163aa     1F 03 0F 03 
163ae     03 66 3C 00 
163b2     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
163b6     60 30 18 00 
163ba     7F 33 18 0C 
163be     06 63 7F 00 
163c2     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
163c6     00 3C 66 43 
163ca     03 03 03 03 
163ce     43 66 3C 00 
163d2     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
163d6     00 00 00 00 
163da     3E 63 06 1C 
163de     30 63 3E 18 
163e2     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
163e6     00 00 00 00 
163ea     00 00       | 	byte	$00[6]
163ec     6C 36 1B 36 
163f0     6C 00 00 00 
163f4     00 00 00 00 
163f8     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
163fc     1B 36 6C 36 
16400     1B 00 00 00 
16404     88 22 88 22 
16408     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1640c     88 22 88 22 
16410     88 22 88 22 
16414     AA 55 AA 55 
16418     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1641c     AA 55 AA 55 
16420     AA 55 AA 55 
16424     BB EE BB EE 
16428     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1642c     BB EE BB EE 
16430     BB EE BB EE 
16434     18 18 18 18 
16438     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1643c     18 18 18 18 
16440     18 18 18 18 
16444     18 18 18 18 
16448     18 18 18    | 	byte	$18[15]
1644b     1F 18 18 18 
1644f     18 18 18 18 
16453     18 30 18 00 
16457     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1645b     63 7F 63 63 
1645f     63 63 00 00 
16463     00 1C 36 00 
16467     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1646b     63 7F 63 63 
1646f     63 63 00 00 
16473     00 36 1C 00 
16477     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1647b     1E 16 06 46 
1647f     66 7F 00 00 
16483     00 00 00 00 
16487     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
1648b     1C 30 60 63 
1648f     63 3E 18 30 
16493     1E 6C 6C 6C 
16497     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
1649b     6F 6C 6C 6C 
1649f     6C 6C 6C 6C 
164a3     6C 6C 6C 6C 
164a7     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
164ab     6C 6C 6C 6C 
164af     6C 6C 6C 6C 
164b3     6C          | 	byte	$6c[9]
164b4     00 00 00 00 
164b8     00          | 	byte	$00[5]
164b9     7F 60 6F 6C 
164bd     6C 6C 6C 6C 
164c1     6C 6C 6C 6C 
164c5     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
164c9     6F 60 7F 00 
164cd     00 00 00 00 
164d1     00 00 00 18 
164d5     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
164d9     61 30 18 0C 
164dd     06 43 63 7F 
164e1     00 00 00 00 
164e5     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
164e9     00 7F 33 18 
164ed     0C 06 63 7F 
164f1     00 00 00 00 
164f5     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
164f9     00 00 1F 18 
164fd     18 18 18 18 
16501     18 18 18 18 
16505     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
16509     18 18 F8 00 
1650d     00 00 00 00 
16511     00 00 00 18 
16515     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
16519     18 18 FF 00 
1651d     00 00 00 00 
16521     00 00 00 00 
16525     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
16529     00 00 FF 18 
1652d     18 18 18 18 
16531     18 18 18 18 
16535     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
16539     18 18 F8 18 
1653d     18 18 18 18 
16541     18 18 18 00 
16545     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
16549     00 00 FF 00 
1654d     00 00 00 00 
16551     00 00 00 18 
16555     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
16559     18 18 FF 18 
1655d     18 18 18 18 
16561     18 18 18 63 
16565     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
16569     36 63 63 7F 
1656d     63 63 63 63 
16571     00 00 00 00 
16575     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
16579     00 1E 30 3E 
1657d     33 33 33 6E 
16581     00 00 00 6C 
16585     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
16589     EC 0C FC 00 
1658d     00 00 00 00 
16591     00 00 00 00 
16595     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
16599     FC 0C EC 6C 
1659d     6C 6C 6C 6C 
165a1     6C 6C 6C 6C 
165a5     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
165a9     EF 00 FF 00 
165ad     00 00 00 00 
165b1     00 00 00 00 
165b5     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
165b9     FF 00 EF 6C 
165bd     6C 6C 6C 6C 
165c1     6C 6C 6C 6C 
165c5     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
165c9     EC 0C EC 6C 
165cd     6C 6C 6C 6C 
165d1     6C 6C 6C 00 
165d5     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
165d9     FF 00 FF 00 
165dd     00 00 00 00 
165e1     00 00 00 6C 
165e5     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
165e9     EF 00 EF 6C 
165ed     6C 6C 6C 6C 
165f1     6C 6C 6C 00 
165f5     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
165f9     63 3E 63 63 
165fd     63 63 3E 63 
16601     00 00 00 00 
16605     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
16609     30 3C 36 33 
1660d     33 33 33 6E 
16611     00 00 00 00 
16615     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
16619     66 66 6F 66 
1661d     66 66 36 1F 
16621     00 00 00 36 
16625     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
16629     66 66 66 66 
1662d     66 66       | 	byte	$66[6]
1662f     36 1F 00 00 
16633     00 00 63 00 
16637     7F 66 46 16 
1663b     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1663f     66 7F 00 00 
16643     00 6C 38 00 
16647     38 30 30 3C 
1664b     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1664f     33 6E 00 00 
16653     00 36 1C 00 
16657     63 67 6F 7F 
1665b     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1665f     63 63 00 00 
16663     00 30 18 00 
16667     3C 18 18 18 
1666b     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1666f     18 3C 00 00 
16673     00 3C 66 00 
16677     3C 18 18 18 
1667b     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1667f     18 3C 00 00 
16683     00 00 00 36 
16687     1C 08 00 3E 
1668b     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
1668f     63 3E 00 00 
16693     00 18 18 18 
16697     18 18 18 18 
1669b     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
1669f     00 00 00 00 
166a3     00 00 00 00 
166a7     00 00 00 00 | 	byte	$00[12]
166ab     F8 18 18 18 
166af     18 18 18 18 
166b3     18 FF FF FF 
166b7     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
166bb     FF FF FF FF 
166bf     FF FF FF FF 
166c3     FF          | 	byte	$ff[9]
166c4     00 00 00 00 
166c8     00 00 00    | 	byte	$00[7]
166cb     FF FF FF FF 
166cf     FF FF FF FF 
166d3     FF          | 	byte	$ff[9]
166d4     00 00 00 7E 
166d8     7E 5A 18 18 
166dc     18 18 18 18 
166e0     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
166e4     1C 36 1C 63 
166e8     63 63 63 63 
166ec     63 63 63 63 
166f0     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
166f4     FF FF FF FF 
166f8     FF FF FF    | 	byte	$ff[7]
166fb     00 00 00 00 
166ff     00 00 00 00 
16703     00          | 	byte	$00[9]
16704     30 18 00 3E 
16708     63 63 63 63 
1670c     63 63 63 63 
16710     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
16714     00 00 00 1E 
16718     33 33 33 1B 
1671c     33 63 63 63 
16720     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
16724     1C 36 00 3E 
16728     63 63 63 63 
1672c     63 63 63 63 
16730     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
16734     30 18 00 63 
16738     67 6F 7F 7B 
1673c     73 63 63 63 
16740     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
16744     00 00 60 30 
16748     18 00 3B 66 
1674c     66 66 66 66 
16750     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
16754     00 00 36 1C 
16758     08 00 3B 66 
1675c     66 66 66 66 
16760     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
16764     36 1C 00 3E 
16768     63 63 06 1C 
1676c     30 60 63 63 
16770     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
16774     00 00 36 1C 
16778     08 00 3E 63 
1677c     06 1C 30 63 
16780     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
16784     30 18 00 3F 
16788     66 66 66 3E 
1678c     36 66 66 66 
16790     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
16794     30 18 00 63 
16798     63 63 63 63 
1679c     63 63 63 63 
167a0     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
167a4     00 00 60 30 
167a8     18 00 3B 6E 
167ac     66 06 06 06 
167b0     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
167b4     66 33 00 63 
167b8     63 63 63 63 
167bc     63 63 63 63 
167c0     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
167c4     00 00 60 30 
167c8     18 00 63 63 
167cc     63 63 63 63 
167d0     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
167d4     30 18 00 66 
167d8     66 66 66 3C 
167dc     18 18 18 18 
167e0     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
167e4     00 00 00 08 
167e8     0C 0C 3F 0C 
167ec     0C 0C 0C 6C 
167f0     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
167f4     30 18 00 00 
167f8     00 00 00 00 
167fc     00 00 00 00 
16800     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
16804     00 00 00 00 
16808     00 00 00 00 | 	byte	$00[8]
1680c     7F 00 00 00 
16810     00 00 00 00 
16814     66 33 00 00 
16818     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1681c     00 00 00 00 
16820     00 00 00 00 
16824     00 00 00 00 
16828     00 00 00 00 
1682c     00 00 00 00 
16830     00          | 	byte	$00[21]
16831     0C 06 3C 36 
16835     1C 00 00 00 
16839     00 00 00 00 
1683d     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
16841     00 00 00 63 
16845     3E 00 00 00 
16849     00 00 00 00 
1684d     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
16851     00 00 00 00 
16855     3E 63 06 1C 
16859     36 63 63 36 
1685d     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
16861     00 00 00 00 
16865     00 00 00 00 | 	byte	$00[8]
16869     18 00 7E 00 
1686d     18 00 00 00 
16871     00 00 00 00 
16875     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
16879     00 00 00 00 
1687d     00 00 00 00 | 	byte	$00[8]
16881     18 30 1E 00 
16885     00 00 1C 36 
16889     36 1C 00 00 
1688d     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
16891     00 00 00 00 
16895     63 00 00 00 
16899     00 00 00 00 
1689d     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
168a1     00 00 00 18 
168a5     18 00 00 00 
168a9     00 00 00 00 
168ad     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
168b1     00 00 00 00 
168b5     00          | 	byte	$00[5]
168b6     CC 66 33 00 
168ba     33 33 33 33 
168be     33 33 6E 00 
168c2     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
168c6     00 3F 66 66 
168ca     66 3E 36 66 
168ce     66 66 6F 00 
168d2     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
168d6     36 1C 08 00 
168da     3B 6E 66 06 
168de     06 06 0F 00 
168e2     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
168e6     00 00 00 7E 
168ea     7E 7E 7E 7E 
168ee     7E 7E 00 00 
168f2     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
168f6     00 00 00 00 
168fa     00 00 00 00 
168fe     00 00 00 00 
16902     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
16904     00 00 00 00 
      ...             
16934     00 00 00 00 
16938     00 00 00    | st_font        file "st4font.def"
1693b     FF FF 00 00 
1693f     00 00 00 00 
16943     00 18 18 18 
16947     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1694b     18 18 18 18 
1694f     18 18 18 18 
16953     18          | 	byte	$18[9]
16954     00 00 00 00 
16958     00 00 00    | 	byte	$00[7]
1695b     FF FF 18 18 
1695f     18 18 18 18 
16963     18 18 18 18 
16967     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1696b     FF FF 00 00 
1696f     00 00 00 00 
16973     00 18 18 18 
16977     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1697b     1F 1F 18 18 
1697f     18 18 18 18 
16983     18 18 18 18 
16987     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1698b     F8 F8 18 18 
1698f     18 18 18 18 
16993     18 00 00 00 
16997     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1699b     1F 1F 18 18 
1699f     18 18 18 18 
169a3     18 00 00 00 
169a7     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
169ab     F8 F8 18 18 
169af     18 18 18 18 
169b3     18 18 18 18 
169b7     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
169bb     1F 1F 00 00 
169bf     00 00 00 00 
169c3     00 18 18 18 
169c7     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
169cb     F8 F8 00 00 
169cf     00 00 00 00 
169d3     00 18 18 18 
169d7     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
169db     FF FF 18 18 
169df     18 18 18 18 
169e3     18 00 00 18 
169e7     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
169eb     66 7E 7E 66 
169ef     66 66 66 30 
169f3     18 00 00 7E 
169f7     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
169fb     3E 06 06 06 
169ff     06 7E 7E 18 
16a03     0C 30 18 3C 
16a07     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
16a0b     06 06 06 66 
16a0f     66 7E 3C 00 
16a13     00 30 18 66 
16a17     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
16a1b     7E 7E 76 76 
16a1f     66 66 66 00 
16a23     00 30 18 7C 
16a27     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
16a2b     1C 38 70 60 
16a2f     60 7E 3E 00 
16a33     00 30 18 7E 
16a37     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
16a3b     18 0C 0C 06 
16a3f     06 7E 7E 00 
16a43     00 18 18 00 
16a47     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
16a4b     18 18 0C 0C 
16a4f     06 7E 7E 00 
16a53     00 30 18 3C 
16a57     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
16a5b     66 66 66 66 
16a5f     66          | 	byte	$66[5]
16a60     7E 3C 00 00 
16a64     00 00 06 06 
16a68     06 06 16 1E 
16a6c     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
16a70     7E 7E 00 00 
16a74     00 00 00 00 
16a78     00 3C 7C 60 
16a7c     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
16a80     7E 7C 30 18 
16a84     00 00 00 00 
16a88     00 3C 7E 66 
16a8c     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
16a90     7E 7C 18 0C 
16a94     00 00 30 18 
16a98     00 3C 3E 06 
16a9c     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
16aa0     7E 7C 00 00 
16aa4     00 00 30 18 
16aa8     00 3E 7E 66 
16aac     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
16ab0     66 66 00 00 
16ab4     00 00 30 18 
16ab8     00 7C 7E 06 
16abc     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
16ac0     7E 3E 00 00 
16ac4     00 00 30 18 
16ac8     00 7E 7E 30 
16acc     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
16ad0     7E 7E 00 00 
16ad4     00 00 18 18 
16ad8     00 7E 7E 30 
16adc     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
16ae0     7E 7E 00 00 
16ae4     00 00 30 18 
16ae8     00 3C 7E 66 
16aec     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
16af0     7E 3C 00 00 
16af4     00 00 1C 1C 
16af8     18 18 38 3C 
16afc     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
16b00     3C 3C 00 00 
16b04     00 00 00 00 
16b08     00 00 00 00 
16b0c     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
16b10     00 00 00 00 
16b14     00 00       | 	byte	$00[6]
16b16     18 18 18 18 
16b1a     18 18 18 18 | 	byte	$18[8]
16b1e     00 00 18 18 
16b22     00 00 00 00 
16b26     66 66 66 66 
16b2a     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
16b2e     00 00 00 00 
16b32     00 00 00 00 
16b36     00          | 	byte	$00[9]
16b37     66 66 FF FF 
16b3b     66 66 FF FF 
16b3f     66 66 00 00 
16b43     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
16b47     7C 7E 06 06 
16b4b     3E 7C 60 60 
16b4f     7E 3E 18 18 
16b53     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
16b57     66 30 30 18 
16b5b     18 0C 0C 66 
16b5f     66 00 00 00 
16b63     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
16b67     66 66 3C 1C 
16b6b     1C FC FE 66 
16b6f     66 FE FC 00 
16b73     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
16b77     18 18 18 18 
16b7b     00 00 00 00 
16b7f     00 00 00 00 
16b83     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
16b87     18 1C 0C 0C 
16b8b     0C 0C 0C 0C 
16b8f     1C 18 30 00 
16b93     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
16b97     18 38 30 30 
16b9b     30 30 30 30 
16b9f     38 18 0C 00 
16ba3     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
16ba7     66 66 3C 3C 
16bab     FF FF 3C 3C 
16baf     66 66 00 00 
16bb3     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
16bb7     00 18 18 18 
16bbb     7E 7E 18 18 
16bbf     18 00 00 00 
16bc3     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
16bc7     00 00 00 00 
16bcb     00 00       | 	byte	$00[6]
16bcd     18 18 18 18 
16bd1     18          | 	byte	$18[5]
16bd2     0C 04 00 00 
16bd6     00 00 00 00 
16bda     7E 7E 00 00 
16bde     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
16be2     00 00 00 00 
16be6     00 00 00 00 
16bea     00 00 00 00 
16bee     00          | 	byte	$00[13]
16bef     18 18 18 00 
16bf3     00 00 00 60 
16bf7     60 60 30 30 
16bfb     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
16bff     06 06 06 00 
16c03     00 00 00 3C 
16c07     7E 66 66 66 
16c0b     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
16c0f     66 7E 3C 00 
16c13     00 00 00 18 
16c17     18 1C 1C 18 
16c1b     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
16c1f     18 7E 7E 00 
16c23     00 00 00 3C 
16c27     7E 66 66 30 
16c2b     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
16c2f     0C 7E 7E 00 
16c33     00 00 00 7E 
16c37     7E 30 30 18 
16c3b     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
16c3f     66 7E 3C 00 
16c43     00 00 00 30 
16c47     30 38 38 3C 
16c4b     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
16c4f     7E 30 30 00 
16c53     00 00 00 7E 
16c57     7E 06 06 3E 
16c5b     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
16c5f     66 7E 3C 00 
16c63     00 00 00 38 
16c67     3C 0E 06 06 
16c6b     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
16c6f     66 7E 3C 00 
16c73     00 00 00 7E 
16c77     7E 60 60 30 
16c7b     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
16c7f     0C 0C 0C 00 
16c83     00 00 00 3C 
16c87     7E 66 66 3C 
16c8b     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
16c8f     66 7E 3C 00 
16c93     00 00 00 3C 
16c97     7E 66 66 7E 
16c9b     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
16c9f     70 3C 1C 00 
16ca3     00 00 00 00 
16ca7     00 00 18 18 
16cab     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
16caf     18 18 18 00 
16cb3     00 00 00 00 
16cb7     00 00 18 18 
16cbb     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
16cbf     18 18 18 0C 
16cc3     04 00 00 00 
16cc7     70 38 1C 0E 
16ccb     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
16ccf     70 00 00 00 
16cd3     00 00 00 00 
16cd7     00 00 7E 7E 
16cdb     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
16cdf     00 00 00 00 
16ce3     00 00 00 00 | 	byte	$00[8]
16ce7     0E 1C 38 70 
16ceb     E0 70 38 1C 
16cef     0E 00 00 00 
16cf3     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
16cf7     7E 66 66 30 
16cfb     30 18 18 18 
16cff     00 18 18 00 
16d03     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
16d07     7E 66 66 66 
16d0b     66 36 06 66 
16d0f     66 7E 3C 00 
16d13     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
16d17     3C 7E 66 66 
16d1b     66 7E 7E 66 
16d1f     66 66 66 00 
16d23     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
16d27     7E 66 66 7E 
16d2b     3E 66 66 66 
16d2f     66 7E 3E 00 
16d33     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
16d37     7E 66 66 06 
16d3b     06 06 06 66 
16d3f     66 7E 3C 00 
16d43     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
16d47     7E 66 66 66 
16d4b     66 66 66 66 
16d4f     66 7E 3E 00 
16d53     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
16d57     7E 06 06 3E 
16d5b     3E 06 06 06 
16d5f     06 7E 7E 00 
16d63     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
16d67     7E 06 06 3E 
16d6b     3E 06 06 06 
16d6f     06 06 06 00 
16d73     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
16d77     7E 06 06 76 
16d7b     76 66 66 66 
16d7f     66 7E 3C 00 
16d83     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
16d87     66 66 66 7E 
16d8b     7E 66 66 66 
16d8f     66 66 66 00 
16d93     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
16d97     7E 18 18 18 
16d9b     18 18 18 18 
16d9f     18 7E 7E 00 
16da3     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
16da7     60 60 60 60 
16dab     60 60 60    | 	byte	$60[7]
16dae     66 66 7E 3C 
16db2     00 00 00 00 
16db6     66 66 36 36 
16dba     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
16dbe     66 66 C6 C6 
16dc2     00 00 00 00 
16dc6     06 06 06 06 
16dca     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
16dce     06 06 7E 7E 
16dd2     00 00 00 00 
16dd6     C6 C6 EE EE 
16dda     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
16dde     C6 C6 C6 C6 
16de2     00 00 00 00 
16de6     66 66 66 6E 
16dea     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
16dee     76 66 66 66 
16df2     00 00 00 00 
16df6     3C 7E 66 66 
16dfa     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
16dfe     66 66 7E 3C 
16e02     00 00 00 00 
16e06     3E 7E 66 66 
16e0a     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
16e0e     06 06 06 06 
16e12     00 00 00 00 
16e16     3C 7E 66 66 
16e1a     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
16e1e     66 56 3E 6C 
16e22     00 00 00 00 
16e26     3E 7E 66 66 
16e2a     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
16e2e     66 66 C6 C6 
16e32     00 00 00 00 
16e36     7C 7E 06 06 
16e3a     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
16e3e     60 60 7E 3E 
16e42     00 00 00 00 
16e46     7E 7E 18 18 
16e4a     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
16e4e     18 18 18 18 
16e52     00 00 00 00 
16e56     66 66 66 66 
16e5a     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
16e5e     66 66 7E 3C 
16e62     00 00 00 00 
16e66     66 66 66 66 
16e6a     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
16e6e     3C 3C 18 18 
16e72     00 00 00 00 
16e76     C6 C6 C6 C6 
16e7a     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
16e7e     FE EE C6 82 
16e82     00 00 00 00 
16e86     66 66 66 3C 
16e8a     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
16e8e     3C 66 66 66 
16e92     00 00 00 00 
16e96     66 66 66 66 
16e9a     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
16e9e     18 18 18 18 
16ea2     00 00 00 00 
16ea6     7E 7E 30 30 
16eaa     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
16eae     06 06 7E 7E 
16eb2     00 00 00 00 
16eb6     3C 3C 0C 0C 
16eba     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
16ebe     0C 0C 3C 3C 
16ec2     00 00 00 00 
16ec6     06 06 0C 0C 
16eca     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
16ece     60 60 C0 C0 
16ed2     00 00 00 00 
16ed6     3C 3C 30 30 
16eda     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
16ede     30 30 3C 3C 
16ee2     00 00 00 00 
16ee6     18 18 3C 3C 
16eea     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
16eee     00 00 00 00 
16ef2     00 00 00 00 
16ef6     00 00 00 00 
16efa     00 00 00 00 
16efe     00 00       | 	byte	$00[18]
16f00     FE FE 00 00 
16f04     00 00 0C 0C 
16f08     18 18 00 00 
16f0c     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
16f10     00 00 00 00 
16f14     00 00 00 00 
16f18     00          | 	byte	$00[9]
16f19     3C 7C 60 7C 
16f1d     7E 66 66 7E 
16f21     7C 00 00 00 
16f25     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
16f29     3E 7E 66 66 
16f2d     66 66 66 7E 
16f31     3E 00 00 00 
16f35     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
16f39     3C 3E 06 06 
16f3d     06 06 06 7E 
16f41     7C 00 00 00 
16f45     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
16f49     7C 7E 66 66 
16f4d     66 66 66 7E 
16f51     7C 00 00 00 
16f55     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
16f59     3C 7E 66 66 
16f5d     7E 06 06 7E 
16f61     7C 00 00 00 
16f65     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
16f69     18 7E 7E 18 
16f6d     18 18 18 18 
16f71     18 00 00 00 
16f75     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
16f79     7C 7E 66 66 
16f7d     66 66 7E 7C 
16f81     60 7E 3E 00 
16f85     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
16f89     3E 7E 66 66 
16f8d     66 66 66 66 
16f91     66 00 00 00 
16f95     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
16f99     1C 1C 18 18 
16f9d     18 18 18 3C 
16fa1     3C 00 00 00 
16fa5     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
16fa9     30 30 30 30 
16fad     30 30 30 30 
16fb1     30          | 	byte	$30[9]
16fb2     3E 1E 00 00 
16fb6     06 06 06 36 
16fba     36 1E 1E 1E 
16fbe     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
16fc2     00 00 00 00 
16fc6     1C 1C 18 18 
16fca     18 18 18 18 
16fce     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
16fd2     00 00 00 00 
16fd6     00 00 00    | 	byte	$00[7]
16fd9     6C FE FE D6 
16fdd     D6 C6 C6 C6 
16fe1     C6 00 00 00 
16fe5     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
16fe9     3E 7E 66 66 
16fed     66 66 66 66 
16ff1     66 00 00 00 
16ff5     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
16ff9     3C 7E 66 66 
16ffd     66 66 66 7E 
17001     3C 00 00 00 
17005     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
17009     3E 7E 66 66 
1700d     66 66 66 7E 
17011     3E 06 06 00 
17015     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
17019     7C 7E 66 66 
1701d     66 66 66 7E 
17021     7C 60 60 00 
17025     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
17029     3E 7E 66 06 
1702d     06 06 06 06 
17031     06 00 00 00 
17035     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
17039     7C 7E 06 0E 
1703d     3C 70 60 7E 
17041     3E 00 00 00 
17045     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
17049     7E 7E 18 18 
1704d     18 18 18 78 
17051     70 00 00 00 
17055     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
17059     66 66 66 66 
1705d     66 66 66    | 	byte	$66[7]
17060     7E 7C 00 00 
17064     00 00 00 00 
17068     00 66 66 66 
1706c     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
17070     18 18 00 00 
17074     00 00 00 00 
17078     00 C6 C6 D6 
1707c     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
17080     C6 82 00 00 
17084     00 00 00 00 
17088     00 66 66 3C 
1708c     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
17090     66 66 00 00 
17094     00 00 00 00 
17098     00 66 66 66 
1709c     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
170a0     7C 60 7E 3E 
170a4     00 00 00 00 
170a8     00 7E 7E 30 
170ac     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
170b0     7E 7E 00 00 
170b4     00 00 30 18 
170b8     18 18 18 0C 
170bc     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
170c0     18 30 00 00 
170c4     00 00 18 18 
170c8     18 18 18 18 
170cc     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
170d0     18 18 00 00 
170d4     00 00 0C 18 
170d8     18 18 18 30 
170dc     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
170e0     18 0C 00 00 
170e4     00 00 6C 7E 
170e8     36 00 00 00 
170ec     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
170f0     00 00 00 00 
170f4     00 00 00 00 
170f8     00          | 	byte	$00[9]
170f9     18 18 18 18 
170fd     18 18 00 00 
17101     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
17104     00 00 00 00 
17108     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1710c     00 00 00 00 
17110     00 80 80 80 
17114     00 00 00 FF 
17118     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1711c     00 00 00 00 
17120     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
17121     80 00 00 00 
17125     00 80 00 00 
17129     80 80 00 00 
1712d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
17131     80 00 80 00 
17135     00 40 80 00 
17139     AA AA AA 00 
1713d     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
17141     FF 00 00 00 
17145     00 FF 00 00 
17149     FF FF 00 00 
1714d     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
17151     FF 00 FF 00 
17155     00 FF FF 00 
17159     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1715c     00 00 00 00 
17160     00          | ataripalette   file "ataripalettep2.def"
17161     11 11 11 00 
17165     22 22 22 00 
17169     33 33 33 00 
1716d     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
17171     55 55 55 00 
17175     66 66 66 00 
17179     77 77 77 00 
1717d     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
17181     99 99 99 00 
17185     AA AA AA 00 
17189     BB BB BB 00 
1718d     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
17191     DD DD DD 00 
17195     EE EE EE 00 
17199     FF FF FF 00 
1719d     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
171a1     00 14 40 00 
171a5     00 1E 60 00 
171a9     00 28 80 00 
171ad     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
171b1     00 3C BF 00 
171b5     00 46 DF 00 
171b9     00 50 FF 00 
171bd     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
171c1     39 77 FF 00 
171c5     55 8A FF 00 
171c9     71 9E FF 00 
171cd     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
171d1     AA C5 FF 00 
171d5     C6 D8 FF 00 
171d9     E3 EC FF 00 
171dd     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
171e1     00 00 40 00 
171e5     00 00 60 00 
171e9     00 00 80 00 
171ed     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
171f1     00 00 BF 00 
171f5     00 00 DF 00 
171f9     00 00 FF 00 
171fd     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
17201     39 39 FF 00 
17205     55 55 FF 00 
17209     71 71 FF 00 
1720d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
17211     AA AA FF 00 
17215     C6 C6 FF 00 
17219     E3 E3 FF 00 
1721d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
17221     20 00 40 00 
17225     30 00 60 00 
17229     40 00 80 00 
1722d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
17231     60 00 BF 00 
17235     70 00 DF 00 
17239     80 00 FF 00 
1723d     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
17241     9C 39 FF 00 
17245     AA 55 FF 00 
17249     B8 71 FF 00 
1724d     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
17251     D5 AA FF 00 
17255     E3 C6 FF 00 
17259     F1 E3 FF 00 
1725d     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
17261     40 00 40 00 
17265     60 00 60 00 
17269     80 00 80 00 
1726d     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
17271     BF 00 BF 00 
17275     DF 00 DF 00 
17279     FF 00 FF 00 
1727d     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
17281     FF 39 FF 00 
17285     FF 55 FF 00 
17289     FF 71 FF 00 
1728d     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
17291     FF AA FF 00 
17295     FF C6 FF 00 
17299     FF E3 FF 00 
1729d     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
172a1     40 00 20 00 
172a5     60 00 30 00 
172a9     80 00 40 00 
172ad     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
172b1     BF 00 60 00 
172b5     DF 00 70 00 
172b9     FF 00 80 00 
172bd     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
172c1     FF 39 9C 00 
172c5     FF 55 AA 00 
172c9     FF 71 B8 00 
172cd     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
172d1     FF AA D5 00 
172d5     FF C6 E3 00 
172d9     FF E3 F1 00 
172dd     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
172e1     40 00 00 00 
172e5     60 00 00 00 
172e9     80 00 00 00 
172ed     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
172f1     BF 00 00 00 
172f5     DF 00 00 00 
172f9     FF 00 00 00 
172fd     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
17301     FF 39 39 00 
17305     FF 55 55 00 
17309     FF 71 71 00 
1730d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
17311     FF AA AA 00 
17315     FF C6 C6 00 
17319     FF E3 E3 00 
1731d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
17321     40 10 00 00 
17325     60 18 00 00 
17329     80 20 00 00 
1732d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
17331     BF 30 00 00 
17335     DF 38 00 00 
17339     FF 40 00 00 
1733d     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
17341     FF 6A 39 00 
17345     FF 80 55 00 
17349     FF 95 71 00 
1734d     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
17351     FF BF AA 00 
17355     FF D5 C6 00 
17359     FF EA E3 00 
1735d     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
17361     40 20 00 00 
17365     60 30 00 00 
17369     80 40 00 00 
1736d     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
17371     BF 60 00 00 
17375     DF 70 00 00 
17379     FF 80 00 00 
1737d     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
17381     FF 9C 39 00 
17385     FF AA 55 00 
17389     FF B8 71 00 
1738d     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
17391     FF D5 AA 00 
17395     FF E3 C6 00 
17399     FF F1 E3 00 
1739d     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
173a1     40 30 00 00 
173a5     60 48 00 00 
173a9     80 60 00 00 
173ad     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
173b1     BF 90 00 00 
173b5     DF A8 00 00 
173b9     FF C0 00 00 
173bd     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
173c1     FF CE 39 00 
173c5     FF D5 55 00 
173c9     FF DC 71 00 
173cd     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
173d1     FF EA AA 00 
173d5     FF F1 C6 00 
173d9     FF F8 E3 00 
173dd     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
173e1     30 40 00 00 
173e5     48 60 00 00 
173e9     60 80 00 00 
173ed     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
173f1     90 BF 00 00 
173f5     A8 DF 00 00 
173f9     C0 FF 00 00 
173fd     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
17401     CE FF 39 00 
17405     D5 FF 55 00 
17409     DC FF 71 00 
1740d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
17411     EA FF AA 00 
17415     F1 FF C6 00 
17419     F8 FF E3 00 
1741d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
17421     00 40 00 00 
17425     00 60 00 00 
17429     00 80 00 00 
1742d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
17431     00 BF 00 00 
17435     00 DF 00 00 
17439     00 FF 00 00 
1743d     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
17441     39 FF 39 00 
17445     55 FF 55 00 
17449     71 FF 71 00 
1744d     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
17451     AA FF AA 00 
17455     C6 FF C6 00 
17459     E3 FF E3 00 
1745d     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
17461     00 40 14 00 
17465     00 60 1E 00 
17469     00 80 28 00 
1746d     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
17471     00 BF 3C 00 
17475     00 DF 46 00 
17479     00 FF 50 00 
1747d     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
17481     39 FF 77 00 
17485     55 FF 8A 00 
17489     71 FF 9E 00 
1748d     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
17491     AA FF C5 00 
17495     C6 FF D8 00 
17499     E3 FF EC 00 
1749d     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
174a1     00 40 28 00 
174a5     00 60 3C 00 
174a9     00 80 50 00 
174ad     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
174b1     00 BF 78 00 
174b5     00 DF 8C 00 
174b9     00 FF A0 00 
174bd     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
174c1     39 FF B5 00 
174c5     55 FF C0 00 
174c9     71 FF CA 00 
174cd     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
174d1     AA FF DF 00 
174d5     C6 FF EA 00 
174d9     E3 FF F4 00 
174dd     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
174e1     00 40 40 00 
174e5     00 60 60 00 
174e9     00 80 80 00 
174ed     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
174f1     00 BF BF 00 
174f5     00 DF DF 00 
174f9     00 FF FF 00 
174fd     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
17501     39 FF FF 00 
17505     55 FF FF 00 
17509     71 FF FF 00 
1750d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
17511     AA FF FF 00 
17515     C6 FF FF 00 
17519     E3 FF FF 00 
1751d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
17521     00 28 40 00 
17525     00 3C 60 00 
17529     00 50 80 00 
1752d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
17531     00 78 BF 00 
17535     00 8C DF 00 
17539     00 A0 FF 00 
1753d     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
17541     39 B5 FF 00 
17545     55 C0 FF 00 
17549     71 CA FF 00 
1754d     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
17551     AA DF FF 00 
17555     C6 EA FF 00 
17559     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1755c                 | '**********************************************************************************
1755c                 | '
1755c                 | '        Timings and colors definitions
1755c                 | '
1755c                 | '**********************************************************************************
1755c                 | 
1755c                 |    'streamer sets for text mode, to add to timings[0..5]
1755c                 | ' todo for the retromachine: 768x576
1755c                 | 
1755c                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1755c     10 00 00 00 
17560     50 00 00 00 
17564     14 00 00 00 
17568     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1756c     70 00 00 00 
17570     08 00 00 00 
17574     30 00 00 00 
17578     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1757c     10 00 00 00 
17580     10 00 00 00 
17584     00 00 00 00 
17588     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1758c     E0 01 00 00 
17590     F6 32 24 15 
17594     FB 6C C3 01 
17598     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1759c                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
1759c     12 00 00 00 
175a0     30 00 00 00 
175a4     10 00 00 00 
175a8     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
175ac     18 00 00 00 
175b0     08 00 00 00 
175b4     18 00 00 00 
175b8     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
175bc     20 00 00 00 
175c0     18 00 00 00 
175c4     40 00 00 00 
175c8     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
175cc     F0 01 00 00 
175d0     00 D0 12 13 
175d4     FB 0F 00 01 
175d8     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
175dc     10 00 00 00 
175e0     40 00 00 00 
175e4     10 00 00 00 
175e8     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
175ec     08 00 00 00 
175f0     08 00 00 00 
175f4     08 00 00 00 
175f8     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
175fc     40 00 00 00 
17600     20 00 00 00 
17604     80 00 00 00 
17608     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1760c     E0 01 00 00 
17610     70 AE E9 10 
17614     FB 8B FF 01 
17618     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1761c     10 00 00 00 
17620     50 00 00 00 
17624     14 00 00 00 
17628     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1762c     00 00 00 00 
17630     08 00 00 00 
17634     00 00 00 00 
17638     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1763c     10 00 00 00 
17640     10 00 00 00 
17644     C0 00 00 00 
17648     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1764c     40 02 00 00 
17650     F6 32 24 15 
17654     FB 6C C3 01 
17658     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1765c     50 00 00 00 
17660     A0 00 00 00 
17664     54 00 00 00 
17668     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1766c     08 00 00 00 
17670     08 00 00 00 
17674     08 00 00 00 
17678     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1767c     0C 00 00 00 
17680     08 00 00 00 
17684     00 01 00 00 
17688     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1768c     E0 01 00 00 
17690     10 06 56 15 
17694     FB 64 C3 01 
17698     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1769c     50 00 00 00 
176a0     32 00 00 00 
176a4     50 00 00 00 
176a8     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
176ac     08 00 00 00 
176b0     08 00 00 00 
176b4     08 00 00 00 
176b8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
176bc     0C 00 00 00 
176c0     08 00 00 00 
176c4     40 01 00 00 
176c8     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
176cc     E0 01 00 00 
176d0     F2 CD 33 13 
176d4     FB 53 92 01 
176d8     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
176dc     18 00 00 00 
176e0     30 00 00 00 
176e4     18 00 00 00 
176e8     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
176ec     08 00 00 00 
176f0     08 00 00 00 
176f4     08 00 00 00 
176f8     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
176fc     0C 00 00 00 
17700     08 00 00 00 
17704     80 01 00 00 
17708     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1770c     E0 01 00 00 
17710     F4 8F 11 11 
17714     FB 3A 55 01 
17718     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1771c     20 00 00 00 
17720     40 00 00 00 
17724     22 00 00 00 
17728     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1772c     00 00 00 00 
17730     08 00 00 00 
17734     00 00 00 00 
17738     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1773c     0C 00 00 00 
17740     08 00 00 00 
17744     C0 01 00 00 
17748     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1774c     F0 01 00 00 
17750     F2 CD 33 13 
17754     FB 53 92 01 
17758     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1775c                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1775c     00 75 C7 97 
17760     27 47 F6 0A 
17764     05 79 CB 9B 
17768     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1776c                 | 
1776c     28 12 64 FD | hdmi            setq    #9
17770     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
17774                 |            '     setq2   #255
17774                 |             '    rdlong  $100, paletteptr 
17774     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
17778     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1777c     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
17780     78 F9 02 F1 |                 add     ii,hbase
17784     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
17788     7B 0B 80 FF 
1778c     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
17790                 | 
17790     66 66 86 FF 
17794     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
17798                 | 
17798                 | 
17798                 | ''--------  frame rendering main loop  ---------------------------------------------------
17798                 | 
17798                 | p101
17798     28 14 64 FD |                 setq    #10
1779c     00 DF 06 FB |                 rdlong  framebuf,  ptra
177a0     28 1E 64 FD |                 setq    #15
177a4     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
177a8     71 99 02 FB |                 rdlong  border,borderptr
177ac                 | 
177ac     01 C4 06 F1 |                 add     frames,#1
177b0     76 F5 02 F6 |                 mov     dlptr2,dlptr
177b4                 | 
177b4     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
177b8     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
177bc     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
177c0     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
177c4                 |  '' up porch
177c4                 | 
177c4     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
177c8     49 FF 02 F6 |                 mov     hsync1,sync_001
177cc     37 A8 46 FB |                 callpa  i_upporch ,#blank
177d0     72 01 68 FC |                 wrlong  #0,vblankptr
177d4                 |                 
177d4     1F EA 16 F4 |                 testb   paletteptr,#31 wc
177d8     29 FE 65 3D |          if_nc  setq2   #255
177dc     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
177e0                 | 
177e0                 | '' cursor blinking
177e0                 | 
177e0     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
177e4     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
177e8                 | 
177e8                 | '' main screen
177e8                 | 
177e8     00 BE 06 F6 |                 mov linenum,#0
177ec     00 18 07 F6 |                 mov rcnt,#0
177f0     00 1C 07 F6 |                 mov rcnt2a,#0
177f4                 | 
177f4                 | 
177f4     00 18 0F F2 | p301            cmp rcnt,#0 wz
177f8     18 00 90 AD |         if_z    jmp #p306
177fc     01 18 87 F1 |                 sub rcnt,#1
17800     90 F7 02 F6 |                 mov dl,rdl
17804     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
17808     8F F7 02 A1 |    if_z        add dl,roffset  
1780c     7B 21 03 F6 |                 mov rdl,dl
17810     04 00 90 FD |                 jmp #p307          
17814                 |           
17814                 |                 
17814     7A F7 02 FB | p306            rdlong  dl,dlptr2
17818     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1781c     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
17820     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
17824                 | 
17824                 | '' Special entry:
17824                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
17824                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
17824                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
17824                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
17824                 | '' todo: set horizontal scroll (if needed)
17824                 | 
17824     02 FA 66 F0 |                 shl framebuf2,#2
17828     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1782c     04 22 0F F2 |                 cmp dlc,#%100 wz
17830                 |   
17830                 |                 
17830     04 F4 06 F1 |                 add dlptr2,#4
17834     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
17838     7A 21 03 FB |                  rdlong rdl,dlptr2
1783c     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
17840     04 18 47 F0 |                  shr rcnt,#4
17844                 |              
17844     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
17848     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1784c                 |                 
1784c     04 1E 47 F0 |                  shr roffset,#4
17850     0C 1E 67 F0 |                  shl roffset,#12
17854                 |   
17854     9C FF 9F FD |                  jmp #p301
17858                 |                  
17858                 |                  
17858                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
17858     0C FA 46 F0 |                 shr     framebuf2,#12
1785c     02 FA 66 F0 |                 shl     framebuf2,#2
17860                 | 
17860     7B 03 E3 F8 |                 getbyte t1,dl,#0
17864     00 02 0F F2 |                 cmp     t1,#0 wz
17868     34 00 90 AD |     if_z        jmp     #borderline
1786c                 | 
1786c     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
17870     50 00 90 CD |           if_c   jmp     #textline
17874     50 02 90 3D |           if_nc  jmp     #graphline
17878                 | '
17878     01 BE 06 F1 | p302            add     linenum,#1
1787c     04 F4 06 F1 |                 add     dlptr2,#4
17880     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
17884     6C FF 9F 5D |          if_nz  jmp     #p301
17888                 | 
17888     72 03 68 FC | p112            wrlong  #1,vblankptr
1788c     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
17890                 | 
17890     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
17894     4B FF 02 F6 |                 mov     hsync1,sync_223
17898     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1789c     F8 FE 9F FD |                 jmp     #p101
178a0                 | 
178a0                 | '' ---------------  END of frame rendering loop -------------------------------------------
178a0                 | 
178a0                 | 
178a0     14 00 B0 FD | borderline      call    #hsync                      ' make a border
178a4     4C A1 C2 FC |                 xcont   m_vi,border
178a8     CC FF 9F FD |                 jmp     #p302
178ac                 | 
178ac                 | 
178ac     08 00 B0 FD | blank           call    #hsync                          'blank lines
178b0     7E A1 C2 FC |                 xcont   m_vi,hsync0
178b4     FD ED 6F 0B |         _ret_   djnz    pa,#blank
178b8                 | 
178b8     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
178bc     7F 9D B2 FC |                 xzero   m_sn,hsync1
178c0     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
178c4                 | 
178c4                 | 
178c4                 | 
178c4                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
178c4                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
178c4                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
178c4                 | 
178c4                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
178c4                 | 
178c4     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
178c8                 | 
178c8     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
178cc     7B 17 5B F8 |                 getnib  zoom, dl,#3
178d0     03 16 07 F5 |                 and             zoom, #3
178d4                 | 
178d4                 | 
178d4                 | 
178d4     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
178d8     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
178dc     3F BC 06 F5 |                 and     linestart,#63
178e0     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
178e4     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
178e8                 | 
178e8     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
178ec                 | 
178ec                 |                        ' if fontline =0, get a border color
178ec                 | 
178ec     51 03 33 F9 | p102            getword t1,m_border,#0
178f0     00 02 0F F2 |                 cmp     t1, #0 wz
178f4     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
178f8                 | 
178f8     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
178fc     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
17900     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
17904     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
17908     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1790c     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
17910     52 BB 02 F6 |                 mov m_lut2, m_lut1
17914     6A BB 02 F1 |                 add m_lut2, lutt1
17918     58 0F 03 F6 |                 mov cpl2,i_cpl
1791c                 | 
1791c     02 16 0F F2 |                cmp zoom,#2 wz
17920     E4 00 90 AD |           if_z jmp #p420
17924     01 16 0F F2 |                cmp zoom,#1 wz
17928     64 00 90 AD |           if_z jmp #p410
1792c     00 16 0F F2 |                 cmp zoom,#0 wz
17930     04 00 90 AD |           if_z jmp #p400
17934     50 01 90 FD |                jmp #p430
17938                 | 
17938                 |                    '
17938                 |  ''---------------------------------------------------------------------------------------------------------
17938     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1793c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
17940     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
17944     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
17948     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1794c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
17950     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
17954     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
17958     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1795c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
17960                 | 
17960     81 BB C2 FC |                         xcont m_lut2,t1
17964                 | 
17964     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
17968     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1796c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
17970     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
17974     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
17978     01 C0 86 F1 |                         sub     lutaddr,#1
1797c                 | 
1797c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
17980     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
17984     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
17988                 | 
17988     EB 0F 6F FB |                         djnz   cpl2,#p400
1798c     28 01 90 FD |  p401                   jmp    #p103
17990                 | 
17990                 | ''------------------------------------------------------------------------------------------------------------
17990                 | 
17990     01 0E 47 F0 |  p410                   shr cpl2,#1
17994                 | 
17994                 | ''---------------------------------------------------------------------------------------------------------
17994     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
17998     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1799c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
179a0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
179a4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
179a8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
179ac     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
179b0     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
179b4     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
179b8     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
179bc                 | 
179bc                 | 
179bc     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
179c0     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
179c4     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
179c8     03 02 07 FA |                         mul t1,#3
179cc     81 BB C2 FC |                         xcont m_lut2,t1
179d0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
179d4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
179d8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
179dc     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
179e0     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
179e4     01 C0 86 F1 |                         sub     lutaddr,#1
179e8     63 06 63 FD |                         mergew t3
179ec     03 06 07 FA |                         mul t3,#3
179f0     83 BB C2 FC |                         xcont m_lut2,t3
179f4                 | 
179f4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
179f8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
179fc                 | 
179fc     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
17a00                 | 
17a00     E4 0F 6F FB |                         djnz   cpl2,#p412
17a04     B0 00 90 FD |  p411                   jmp    #p103
17a08                 | 
17a08                 | ''------------------------------------------------------------------------------------------------------------
17a08                 | 
17a08     02 0E 47 F0 |  p420                   shr cpl2,#2
17a0c                 | 
17a0c                 | ''---------------------------------------------------------------------------------------
17a0c     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
17a10     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
17a14     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
17a18     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
17a1c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
17a20     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
17a24     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
17a28     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
17a2c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
17a30     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
17a34                 | 
17a34     61 02 63 FD |                         mergeb t1
17a38     81 07 3B F9 |                         getword t3,t1,#1
17a3c     0F 02 07 FA |                         mul t1,#15
17a40     81 BB C2 FC |                         xcont m_lut2,t1
17a44                 | 
17a44     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
17a48     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
17a4c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
17a50     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
17a54     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
17a58     01 C0 86 F1 |                         sub     lutaddr,#1
17a5c                 | 
17a5c     81 09 EB F8 |                         getbyte t4,t1,#1        '
17a60     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
17a64                 | 
17a64     0F 06 07 FA |                         mul t3,#15
17a68     83 BB C2 FC |                         xcont m_lut2,t3
17a6c                 | 
17a6c     83 0B EB F8 |                         getbyte t5,t3,#1
17a70     85 BB C2 FC |                         xcont m_lut2, t5
17a74     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
17a78     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
17a7c                 | 
17a7c     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
17a80                 | 
17a80     E2 0F 6F FB |                         djnz   cpl2,#p422
17a84     30 00 90 FD |  p421                   jmp    #p103
17a88                 | 
17a88                 | '--------------------------------------------------------------------------------------------------------------
17a88                 | 
17a88     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
17a8c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
17a90     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
17a94                 | 
17a94     00 BA C6 FC |                         xcont m_lut2,#0
17a98                 | 
17a98     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
17a9c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
17aa0     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
17aa4     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
17aa8     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
17aac     01 C0 86 F1 |                         sub     lutaddr,#1
17ab0                 | 
17ab0     F5 0F 6F FB |                         djnz   cpl2,#p430
17ab4     00 00 90 FD |  p431                   jmp    #p103
17ab8                 | 
17ab8                 | ''------------------------------------------------------------------------------------------------------------
17ab8                 | 
17ab8                 | 
17ab8                 | 
17ab8     51 25 33 F9 | p103            getword  mb2,m_border,#0
17abc     00 24 0F F2 |                 cmp      mb2, #0 wz
17ac0     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
17ac4                 | 
17ac4     B0 FD 9F FD |                 jmp #p302
17ac8                 | 
17ac8                 | '' -------------------------------------- END of text line ---------------------------------
17ac8                 | 
17ac8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
17ac8                 | 
17ac8     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
17acc                 | 
17acc                 | 
17acc     51 25 33 F9 | p202            getword mb2,m_border,#0
17ad0     00 24 0F F2 |                 cmp     mb2, #0 wz
17ad4     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
17ad8                 | 
17ad8                 | '----------------------------------------- display pixels
17ad8                 | 
17ad8     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
17adc     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
17ae0                 | 
17ae0     7B 17 5B F8 |                 getnib  zoom, dl,#3
17ae4     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
17ae8                 | 
17ae8     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
17aec     0C BC 06 F5 |                 and     colordepth,#12
17af0                 | 
17af0     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
17af4     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
17af8     64 00 90 AD |           if_z  jmp     #p240
17afc                 | 
17afc     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
17b00     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
17b04     98 00 90 AD |           if_z  jmp     #p250
17b08                 | 
17b08     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
17b0c     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
17b10     FC 00 90 AD |           if_z  jmp     #p260
17b14                 | 
17b14     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
17b18                 | 
17b18                 | '' --- 8 bit color modes
17b18                 | 
17b18     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
17b1c     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
17b20                 | 
17b20     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
17b24     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
17b28                 |        
17b28                 |  '  
17b28     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
17b2c     25 0C 07 A6 |                 if_z mov skippattern,#%100101
17b30                 |     
17b30                 |  
17b30     05 0C 07 56 |                 if_nz mov skippattern,#%000101
17b34     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
17b38                 |         
17b38                 | 
17b38                 |         
17b38     7D 11 03 FB | p235               rdlong  char,framebuf2
17b3c     32 0C 63 FD |                    skipf skippattern
17b40     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
17b44     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
17b48     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
17b4c     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
17b50     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
17b54     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
17b58     F7 0F 6F FB |                    djnz    cpl2,#p235
17b5c                 | 
17b5c     20 01 90 FD |                jmp    #p203
17b60                 |                   
17b60                 | 
17b60                 | 
17b60                 | '' --- 1 bit color modes
17b60                 | 
17b60     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
17b64     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
17b68                 | 
17b68     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
17b6c     13 0C 07 A6 |        if_z   mov skippattern,#%10011
17b70     08 0C 07 56 |        if_nz  mov skippattern,#%01000
17b74                 | 
17b74                 | 
17b74     7D 11 E3 FA | p241               rdword  char,framebuf2
17b78     44 10 FF F9 |                    movbyts char,#%01000100
17b7c     63 10 63 FD |                    mergew  char
17b80     32 0C 63 FD |                    skipf skippattern
17b84     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
17b88     63 10 63 FD |                    mergew  char                    ' 1 0
17b8c     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
17b90     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
17b94     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
17b98     F6 0F 6F FB |                    djnz   cpl2,#p241
17b9c                 | 
17b9c                 | 
17b9c     E0 00 90 FD |                jmp    #p203
17ba0                 | 
17ba0                 | '' --- 2 bit color modes
17ba0                 | 
17ba0     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
17ba4     C8 00 90 AD |        if_z   jmp #p251
17ba8                 | 
17ba8     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
17bac     30 00 90 AD |        if_z   jmp #p252
17bb0                 | 
17bb0                 | 
17bb0     7D 11 C3 FA | p254               rdbyte char,framebuf2
17bb4     04 0A 07 F6 |                    mov  t5,#4
17bb8     02 10 67 F0 | p255               shl  char,#2
17bbc     88 03 53 F8 |                    getnib  t1,char,#2
17bc0     03 02 07 F5 |                    and     t1,#3
17bc4     55 02 07 FA |                    mul     t1,#$55
17bc8     81 05 03 F9 |                    rolbyte  t2,t1,#0
17bcc     FA 0B 6F FB |                    djnz    t5,#p255
17bd0     82 BB C2 FC |                    xcont   m_lut2,t2
17bd4     01 FA 06 F1 |                    add     framebuf2,#1
17bd8     F5 0F 6F FB |                    djnz    cpl2,#p254
17bdc     A0 00 90 FD |                    jmp     #p203
17be0                 | 
17be0     7D 11 E3 FA | p252               rdword char,framebuf2
17be4     08 0A 07 F6 |                    mov  t5,#8
17be8     02 10 67 F0 | p253               shl  char,#2
17bec     88 03 63 F8 |                    getnib  t1,char,#4
17bf0     03 02 07 F5 |                    and     t1,#3
17bf4     05 02 07 FA |                    mul     t1,#5
17bf8     81 05 83 F8 |                    rolnib  t2,t1,#0
17bfc     FA 0B 6F FB |                    djnz    t5,#p253
17c00     82 BB C2 FC |                    xcont   m_lut2,t2
17c04     02 FA 06 F1 |                    add     framebuf2,#2
17c08     F5 0F 6F FB |                    djnz    cpl2,#p252
17c0c     70 00 90 FD |                    jmp     #p203
17c10                 | 
17c10                 | '' ------ 4 bit color modes
17c10                 | 
17c10     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
17c14     58 00 90 AD |        if_z   jmp #p251
17c18                 | 
17c18     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
17c1c     2C 00 90 AD |        if_z   jmp #p262
17c20                 | 
17c20                 | 
17c20     7D 11 C3 FA | p263               rdbyte char,framebuf2
17c24     02 0A DC FC |                            rep #5,#2
17c28     88 05 8B F8 |                              rolnib t2,char,#1
17c2c     88 05 8B F8 |                                  rolnib t2,char,#1
17c30     88 05 8B F8 |                              rolnib t2,char,#1
17c34     88 05 8B F8 |                                  rolnib t2,char,#1
17c38     04 10 67 F0 |                              shl char,#4
17c3c     82 BB C2 FC |                    xcont   m_lut2,t2
17c40     01 FA 06 F1 |                    add     framebuf2,#1
17c44     F6 0F 6F FB |                    djnz    cpl2,#p263
17c48     34 00 90 FD |                    jmp     #p203
17c4c                 | 
17c4c     7D 11 E3 FA | p262               rdword  char,framebuf2
17c50     04 06 DC FC |                            rep #3,#4
17c54     88 05 9B F8 |                              rolnib t2,char,#3
17c58     88 05 9B F8 |                                  rolnib t2,char,#3
17c5c     04 10 67 F0 |                              shl char,#4
17c60     82 BB C2 FC |                    xcont   m_lut2,t2
17c64     02 FA 06 F1 |                    add     framebuf2,#2
17c68     F8 0F 6F FB |                    djnz    cpl2,#p262
17c6c     10 00 90 FD |                    jmp     #p203
17c70                 | 
17c70                 | ''---------- all color modes without zoom
17c70                 | 
17c70     87 07 D8 FC | p251               rep  #3,cpl2
17c74     7D 11 03 FB |                    rdlong  char,framebuf2
17c78     04 FA 06 F1 |                    add     framebuf2,#4
17c7c     88 BB C2 FC |                    xcont   m_lut2,char
17c80                 |           
17c80                 |  ''-----------------------------------------------------------------------------------------
17c80                 | p203           ' getword  mb2,m_border,#0
17c80     00 24 0F F2 |                 cmp      mb2, #0 wz
17c84     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
17c88                 | 
17c88     EC FB 9F FD |                 jmp #p302
17c8c                 | 
17c8c                 | '' -------------------------------------- END of graph  line ---------------------------------
17c8c                 | 
17c8c                 | '' consts and vars
17c8c                 | 
17c8c     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
17c90     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
17c94     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
17c98     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
17c9c                 | 
17c9c     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
17ca0                 | 
17ca0                 | '------ these longs will be set by setmode function
17ca0                 | 
17ca0     00 00 00 00 | m_bs            long    0        'blanks before sync
17ca4     00 00 00 00 | m_sn            long    0        'sync
17ca8     00 00 00 00 | m_bv            long    0        'blanks before visible
17cac     00 00 00 00 | m_vi            long    0        'visible pixels #
17cb0     00 00 00 00 | m_border        long    0        'left/right borders
17cb4     00 00 00 00 | m_lut1          long    0        'characters
17cb8     00 00 00 00 | i_vborder       long    0        'up/down borders
17cbc     00 00 00 00 | i_upporch       long    0        'up porch lines
17cc0     00 00 00 00 | i_vsync         long    0        'vsync lines
17cc4     00 00 00 00 | i_downporch     long    0        'down porch lines
17cc8     00 00 00 00 | i_modenum       long    0        'mode #
17ccc     00 00 00 00 | i_cpl           long    0        'chars/longs per line
17cd0     00 00 00 00 | i_lines         long    0        'scanlines #
17cd4     00 00 00 00 | i_clock         long    0
17cd8     00 00 00 00 | i_hubset        long    0
17cdc     00 00 00 00 | i_totalvis      long    0
17ce0                 | 
17ce0                 | '-------------------------------------
17ce0                 | 
17ce0     00 00 00 00 | m_lut2          long    0
17ce4                 | 
17ce4                 | colordepth
17ce4     00 00 00 00 | linestart       long    0
17ce8     00 00 00 00 | linenum         long    0
17cec     00 01 00 00 | lutaddr         long    256
17cf0                 | 
17cf0     0E 00 00 00 | cursorsh        long    14
17cf4     00 00 00 00 | frames          long    0
17cf8     00 00 00 00 | cursorx         long    0
17cfc     00 00 00 00 | cursory         long    0
17d00     00 00 00 00 | cursorpos       long    0
17d04     00 00 00 00 | cursorpos2      long    0
17d08     00 00 00 00 | fontstart       long    0
17d0c     00 00 00 00 | border2         long 0
17d10     00 00 81 70 | lutiv           long $70810000
17d14     00 00 88 00 | lutt1           long $00880000
17d18     00 00 80 00 | lutg1           long $00800000
17d1c     00 00 80 10 | lutg2           long $10800000
17d20     00 00 80 20 | lutg4           long $20800000
17d24     00 00 80 30 | lutg8           long $30800000
17d28     00 00 00 00 | framebuf        long 0
17d2c     00 00 00 00 | fontbuf         long 0
17d30     00 00 00 00 | borderptr       long 0
17d34     00 00 00 00 | vblankptr       long 0
17d38     00 00 00 00 | cursorptr       long 0
17d3c     00 00 00 00 | modeptr         long 0
17d40     00 00 00 00 | paletteptr      long 0
17d44     00 00 00 00 | dlptr           long 0
17d48                 | fontnumptr      res     1
17d48                 | fontnumptr      res     1
17d48                 | hbase           res     1
17d48                 | hbase           res     1
17d48                 | borderptr2      res     1
17d48                 | borderptr2      res     1
17d48                 | dlptr2 res 1
17d48                 | dlptr2 res 1
17d48                 | dl              res 1
17d48                 | dl              res 1
17d48                 | ii              res     1
17d48                 | ii              res     1
17d48                 | framebuf2       res     1
17d48                 | framebuf2       res     1
17d48                 | hsync0          res     1
17d48                 | hsync0          res     1
17d48                 | hsync1          res     1
17d48                 | hsync1          res     1
17d48                 | fontline        res     1
17d48                 | fontline        res     1
17d48                 | t1              res     1
17d48                 | t1              res     1
17d48                 | t2              res     1
17d48                 | t2              res     1
17d48                 | t3 res 1
17d48                 | t3 res 1
17d48                 | t4 res 1
17d48                 | t4 res 1
17d48                 | t5 res 1
17d48                 | t5 res 1
17d48                 | skippattern res 1
17d48                 | skippattern res 1
17d48                 | cpl2 res 1
17d48                 | cpl2 res 1
17d48                 | char            res     1
17d48                 | char            res     1
17d48                 | backcolor       res     1
17d48                 | backcolor       res     1
17d48                 | charcolor       res     1
17d48                 | charcolor       res     1
17d48                 | zoom res 1
17d48                 | zoom res 1
17d48     00 00 00 00 | rcnt long 0 'dl repeat count
17d4c     00 00 00 00 | rcnt2 long 0
17d50     00 00 00 00 | rcnt2a long 0
17d54     00 00 00 00 | roffset long 0
17d58     00 00 00 00 | rdl long 0  'dl repeat line
17d5c     00 00 00 00 | dlc long 0 'dl command
17d60     00 00 00 00 | mb2 long 0
17d64     00 00 00 00 | aend             long 0
17d68                 |                 fit     496                     '
17d68                 | _trackerplayer_spin2_dat_
17d68                 | 
17d68     00 00 00 00 | null             long  0
17d6c     46 52 45 51 
17d70     46 52 45 51 
17d74     46 52 45 51 
17d78     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
17d7c     46 52 45 51 
17d80     46 52 45 51 
17d84     46 52 45 51 
17d88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17d8c     46 52 45 51 
17d90     46 52 45 51 
17d94     46 52 45 51 
17d98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17d9c     46 52 45 51 
17da0     46 52 45 51 
17da4     46 52 45 51 
17da8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17dac     46 52 45 51 
17db0     46 52 45 51 
17db4     46 52 45 51 
17db8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17dbc     46 52 45 51 
17dc0     46 52 45 51 
17dc4     46 52 45 51 
17dc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17dcc     46 52 45 51 
17dd0     46 52 45 51 
17dd4     46 52 45 51 
17dd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17ddc     46 52 45 51 
17de0     46 52 45 51 
17de4     46 52 45 51 
17de8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17dec     46 52 45 51 
17df0     46 52 45 51 
17df4     46 52 45 51 
17df8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17dfc     46 52 45 51 
17e00     46 52 45 51 
17e04     46 52 45 51 
17e08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e0c     46 52 45 51 
17e10     46 52 45 51 
17e14     46 52 45 51 
17e18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e1c     46 52 45 51 
17e20     46 52 45 51 
17e24     46 52 45 51 
17e28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e2c     46 52 45 51 
17e30     46 52 45 51 
17e34     46 52 45 51 
17e38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e3c     46 52 45 51 
17e40     46 52 45 51 
17e44     46 52 45 51 
17e48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e4c     46 52 45 51 
17e50     46 52 45 51 
17e54     46 52 45 51 
17e58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e5c     46 52 45 51 
17e60     46 52 45 51 
17e64     46 52 45 51 
17e68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e6c     46 52 45 51 
17e70     46 52 45 51 
17e74     46 52 45 51 
17e78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e7c     46 52 45 51 
17e80     46 52 45 51 
17e84     46 52 45 51 
17e88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e8c     46 52 45 51 
17e90     46 52 45 51 
17e94     46 52 45 51 
17e98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17e9c     46 52 45 51 
17ea0     46 52 45 51 
17ea4     46 52 45 51 
17ea8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17eac     46 52 45 51 
17eb0     46 52 45 51 
17eb4     46 52 45 51 
17eb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17ebc     46 52 45 51 
17ec0     46 52 45 51 
17ec4     46 52 45 51 
17ec8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17ecc     46 52 45 51 
17ed0     46 52 45 51 
17ed4     46 52 45 51 
17ed8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17edc     46 52 45 51 
17ee0     46 52 45 51 
17ee4     46 52 45 51 
17ee8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17eec     46 52 45 51 
17ef0     46 52 45 51 
17ef4     46 52 45 51 
17ef8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17efc     46 52 45 51 
17f00     46 52 45 51 
17f04     46 52 45 51 
17f08     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f0c     46 52 45 51 
17f10     46 52 45 51 
17f14     46 52 45 51 
17f18     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f1c     46 52 45 51 
17f20     46 52 45 51 
17f24     46 52 45 51 
17f28     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f2c     46 52 45 51 
17f30     46 52 45 51 
17f34     46 52 45 51 
17f38     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f3c     46 52 45 51 
17f40     46 52 45 51 
17f44     46 52 45 51 
17f48     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f4c     46 52 45 51 
17f50     46 52 45 51 
17f54     46 52 45 51 
17f58     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f5c     46 52 45 51 
17f60     46 52 45 51 
17f64     46 52 45 51 
17f68     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f6c     46 52 45 51 
17f70     46 52 45 51 
17f74     46 52 45 51 
17f78     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f7c     46 52 45 51 
17f80     46 52 45 51 
17f84     46 52 45 51 
17f88     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f8c     46 52 45 51 
17f90     46 52 45 51 
17f94     46 52 45 51 
17f98     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17f9c     46 52 45 51 
17fa0     46 52 45 51 
17fa4     46 52 45 51 
17fa8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17fac     46 52 45 51 
17fb0     46 52 45 51 
17fb4     46 52 45 51 
17fb8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17fbc     46 52 45 51 
17fc0     46 52 45 51 
17fc4     46 52 45 51 
17fc8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17fcc     46 52 45 51 
17fd0     46 52 45 51 
17fd4     46 52 45 51 
17fd8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17fdc     46 52 45 51 
17fe0     46 52 45 51 
17fe4     46 52 45 51 
17fe8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17fec     46 52 45 51 
17ff0     46 52 45 51 
17ff4     46 52 45 51 
17ff8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
17ffc     46 52 45 51 
18000     46 52 45 51 
18004     46 52 45 51 
18008     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1800c     46 52 45 51 
18010     46 52 45 51 
18014     46 52 45 51 
18018     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1801c     46 52 45 51 
18020     46 52 45 51 
18024     46 52 45 51 
18028     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1802c     46 52 45 51 
18030     46 52 45 51 
18034     46 52 45 51 
18038     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1803c     46 52 45 51 
18040     46 52 45 51 
18044     46 52 45 51 
18048     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1804c     46 52 45 51 
18050     46 52 45 51 
18054     46 52 45 51 
18058     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1805c     46 52 45 51 
18060     46 52 45 51 
18064     46 52 45 51 
18068     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1806c     46 52 45 51 
18070     46 52 45 51 
18074     46 52 45 51 
18078     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1807c     46 52 45 51 
18080     46 52 45 51 
18084     46 52 45 51 
18088     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1808c     46 52 45 51 
18090     46 52 45 51 
18094     46 52 45 51 
18098     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1809c     46 52 45 51 
180a0     46 52 45 51 
180a4     46 52 45 51 
180a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
180ac     46 52 45 51 
180b0     46 52 45 51 
180b4     46 52 45 51 
180b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
180bc     46 52 45 51 
180c0     46 52 45 51 
180c4     46 52 45 51 
180c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
180cc     46 52 45 51 
180d0     46 52 45 51 
180d4     46 52 45 51 
180d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
180dc     46 52 45 51 
180e0     46 52 45 51 
180e4     46 52 45 51 
180e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
180ec     46 52 45 51 
180f0     46 52 45 51 
180f4     46 52 45 51 
180f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
180fc     46 52 45 51 
18100     46 52 45 51 
18104     46 52 45 51 
18108     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1810c     46 52 45 51 
18110     46 52 45 51 
18114     46 52 45 51 
18118     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1811c     46 52 45 51 
18120     46 52 45 51 
18124     46 52 45 51 
18128     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1812c     46 52 45 51 
18130     46 52 45 51 
18134     46 52 45 51 
18138     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1813c     46 52 45 51 
18140     46 52 45 51 
18144     46 52 45 51 
18148     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1814c     46 52 45 51 
18150     46 52 45 51 
18154     46 52 45 51 
18158     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1815c     46 52 45 51 
18160     46 52 45 51 
18164     46 52 45 51 
18168     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1816c     46 52 45 51 
18170     46 52 45 51 
18174     46 52 45 51 
18178     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1817c     46 52 45 51 
18180     46 52 45 51 
18184     46 52 45 51 
18188     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1818c     46 52 45 51 
18190     46 52 45 51 
18194     46 52 45 51 
18198     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1819c     46 52 45 51 
181a0     46 52 45 51 
181a4     46 52 45 51 
181a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
181ac     46 52 45 51 
181b0     46 52 45 51 
181b4     46 52 45 51 
181b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
181bc     46 52 45 51 
181c0     46 52 45 51 
181c4     46 52 45 51 
181c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
181cc     46 52 45 51 
181d0     46 52 45 51 
181d4     46 52 45 51 
181d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
181dc     46 52 45 51 
181e0     46 52 45 51 
181e4     46 52 45 51 
181e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
181ec     46 52 45 51 
181f0     46 52 45 51 
181f4     46 52 45 51 
181f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
181fc     46 52 45 51 
18200     46 52 45 51 
18204     46 52 45 51 
18208     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1820c     46 52 45 51 
18210     46 52 45 51 
18214     46 52 45 51 
18218     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1821c     46 52 45 51 
18220     46 52 45 51 
18224     46 52 45 51 
18228     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1822c     46 52 45 51 
18230     46 52 45 51 
18234     46 52 45 51 
18238     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1823c     46 52 45 51 
18240     46 52 45 51 
18244     46 52 45 51 
18248     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1824c     46 52 45 51 
18250     46 52 45 51 
18254     46 52 45 51 
18258     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1825c     46 52 45 51 
18260     46 52 45 51 
18264     46 52 45 51 
18268     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1826c     46 52 45 51 
18270     46 52 45 51 
18274     46 52 45 51 
18278     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1827c     46 52 45 51 
18280     46 52 45 51 
18284     46 52 45 51 
18288     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1828c     46 52 45 51 
18290     46 52 45 51 
18294     46 52 45 51 
18298     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1829c     46 52 45 51 
182a0     46 52 45 51 
182a4     46 52 45 51 
182a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
182ac     46 52 45 51 
182b0     46 52 45 51 
182b4     46 52 45 51 
182b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
182bc     46 52 45 51 
182c0     46 52 45 51 
182c4     46 52 45 51 
182c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
182cc     46 52 45 51 
182d0     46 52 45 51 
182d4     46 52 45 51 
182d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
182dc     46 52 45 51 
182e0     46 52 45 51 
182e4     46 52 45 51 
182e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
182ec     46 52 45 51 
182f0     46 52 45 51 
182f4     46 52 45 51 
182f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
182fc     46 52 45 51 
18300     46 52 45 51 
18304     46 52 45 51 
18308     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1830c     46 52 45 51 
18310     46 52 45 51 
18314     46 52 45 51 
18318     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1831c     46 52 45 51 
18320     46 52 45 51 
18324     46 52 45 51 
18328     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1832c     46 52 45 51 
18330     46 52 45 51 
18334     46 52 45 51 
18338     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1833c     46 52 45 51 
18340     46 52 45 51 
18344     46 52 45 51 
18348     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1834c     46 52 45 51 
18350     46 52 45 51 
18354     46 52 45 51 
18358     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1835c     46 52 45 51 
18360     46 52 45 51 
18364     46 52 45 51 
18368     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1836c     46 52 45 51 
18370     46 52 45 51 
18374     46 52 45 51 
18378     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1837c     46 52 45 51 
18380     46 52 45 51 
18384     46 52 45 51 
18388     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1838c     46 52 45 51 
18390     46 52 45 51 
18394     46 52 45 51 
18398     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1839c     46 52 45 51 
183a0     46 52 45 51 
183a4     46 52 45 51 
183a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
183ac     46 52 45 51 
183b0     46 52 45 51 
183b4     46 52 45 51 
183b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
183bc     46 52 45 51 
183c0     46 52 45 51 
183c4     46 52 45 51 
183c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
183cc     46 52 45 51 
183d0     46 52 45 51 
183d4     46 52 45 51 
183d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
183dc     46 52 45 51 
183e0     46 52 45 51 
183e4     46 52 45 51 
183e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
183ec     46 52 45 51 
183f0     46 52 45 51 
183f4     46 52 45 51 
183f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
183fc     46 52 45 51 
18400     46 52 45 51 
18404     46 52 45 51 
18408     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1840c     46 52 45 51 
18410     46 52 45 51 
18414     46 52 45 51 
18418     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1841c     46 52 45 51 
18420     46 52 45 51 
18424     46 52 45 51 
18428     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1842c     46 52 45 51 
18430     46 52 45 51 
18434     46 52 45 51 
18438     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1843c     46 52 45 51 
18440     46 52 45 51 
18444     46 52 45 51 
18448     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1844c     46 52 45 51 
18450     46 52 45 51 
18454     46 52 45 51 
18458     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1845c     46 52 45 51 
18460     46 52 45 51 
18464     46 52 45 51 
18468     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1846c     46 52 45 51 
18470     46 52 45 51 
18474     46 52 45 51 
18478     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1847c     46 52 45 51 
18480     46 52 45 51 
18484     46 52 45 51 
18488     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1848c     46 52 45 51 
18490     46 52 45 51 
18494     46 52 45 51 
18498     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1849c     46 52 45 51 
184a0     46 52 45 51 
184a4     46 52 45 51 
184a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
184ac     46 52 45 51 
184b0     46 52 45 51 
184b4     46 52 45 51 
184b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
184bc     46 52 45 51 
184c0     46 52 45 51 
184c4     46 52 45 51 
184c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
184cc     46 52 45 51 
184d0     46 52 45 51 
184d4     46 52 45 51 
184d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
184dc     46 52 45 51 
184e0     46 52 45 51 
184e4     46 52 45 51 
184e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
184ec     46 52 45 51 
184f0     46 52 45 51 
184f4     46 52 45 51 
184f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
184fc     46 52 45 51 
18500     46 52 45 51 
18504     46 52 45 51 
18508     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1850c     46 52 45 51 
18510     46 52 45 51 
18514     46 52 45 51 
18518     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1851c     46 52 45 51 
18520     46 52 45 51 
18524     46 52 45 51 
18528     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1852c     46 52 45 51 
18530     46 52 45 51 
18534     46 52 45 51 
18538     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1853c     46 52 45 51 
18540     46 52 45 51 
18544     46 52 45 51 
18548     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1854c     46 52 45 51 
18550     46 52 45 51 
18554     46 52 45 51 
18558     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1855c     46 52 45 51 
18560     46 52 45 51 
18564     46 52 45 51 
18568     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1856c     46 52 45 51 
18570     46 52 45 51 
18574     46 52 45 51 
18578     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1857c     46 52 45 51 
18580     46 52 45 51 
18584     46 52 45 51 
18588     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1858c     46 52 45 51 
18590     46 52 45 51 
18594     46 52 45 51 
18598     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1859c     46 52 45 51 
185a0     46 52 45 51 
185a4     46 52 45 51 
185a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
185ac     46 52 45 51 
185b0     46 52 45 51 
185b4     46 52 45 51 
185b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
185bc     46 52 45 51 
185c0     46 52 45 51 
185c4     46 52 45 51 
185c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
185cc     46 52 45 51 
185d0     46 52 45 51 
185d4     46 52 45 51 
185d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
185dc     46 52 45 51 
185e0     46 52 45 51 
185e4     46 52 45 51 
185e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
185ec     46 52 45 51 
185f0     46 52 45 51 
185f4     46 52 45 51 
185f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
185fc     46 52 45 51 
18600     46 52 45 51 
18604     46 52 45 51 
18608     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1860c     46 52 45 51 
18610     46 52 45 51 
18614     46 52 45 51 
18618     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1861c     46 52 45 51 
18620     46 52 45 51 
18624     46 52 45 51 
18628     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1862c     46 52 45 51 
18630     46 52 45 51 
18634     46 52 45 51 
18638     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1863c     46 52 45 51 
18640     46 52 45 51 
18644     46 52 45 51 
18648     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1864c     46 52 45 51 
18650     46 52 45 51 
18654     46 52 45 51 
18658     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1865c     46 52 45 51 
18660     46 52 45 51 
18664     46 52 45 51 
18668     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1866c     46 52 45 51 
18670     46 52 45 51 
18674     46 52 45 51 
18678     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1867c     46 52 45 51 
18680     46 52 45 51 
18684     46 52 45 51 
18688     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1868c     46 52 45 51 
18690     46 52 45 51 
18694     46 52 45 51 
18698     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1869c     46 52 45 51 
186a0     46 52 45 51 
186a4     46 52 45 51 
186a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
186ac     46 52 45 51 
186b0     46 52 45 51 
186b4     46 52 45 51 
186b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
186bc     46 52 45 51 
186c0     46 52 45 51 
186c4     46 52 45 51 
186c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
186cc     46 52 45 51 
186d0     46 52 45 51 
186d4     46 52 45 51 
186d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
186dc     46 52 45 51 
186e0     46 52 45 51 
186e4     46 52 45 51 
186e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
186ec     46 52 45 51 
186f0     46 52 45 51 
186f4     46 52 45 51 
186f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
186fc     46 52 45 51 
18700     46 52 45 51 
18704     46 52 45 51 
18708     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1870c     46 52 45 51 
18710     46 52 45 51 
18714     46 52 45 51 
18718     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1871c     46 52 45 51 
18720     46 52 45 51 
18724     46 52 45 51 
18728     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1872c     46 52 45 51 
18730     46 52 45 51 
18734     46 52 45 51 
18738     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1873c     46 52 45 51 
18740     46 52 45 51 
18744     46 52 45 51 
18748     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1874c     46 52 45 51 
18750     46 52 45 51 
18754     46 52 45 51 
18758     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1875c     46 52 45 51 
18760     46 52 45 51 
18764     46 52 45 51 
18768     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1876c     46 52 45 51 
18770     46 52 45 51 
18774     46 52 45 51 
18778     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1877c     46 52 45 51 
18780     46 52 45 51 
18784     46 52 45 51 
18788     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1878c     46 52 45 51 
18790     46 52 45 51 
18794     46 52 45 51 
18798     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1879c     46 52 45 51 
187a0     46 52 45 51 
187a4     46 52 45 51 
187a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
187ac     46 52 45 51 
187b0     46 52 45 51 
187b4     46 52 45 51 
187b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
187bc     46 52 45 51 
187c0     46 52 45 51 
187c4     46 52 45 51 
187c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
187cc     46 52 45 51 
187d0     46 52 45 51 
187d4     46 52 45 51 
187d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
187dc     46 52 45 51 
187e0     46 52 45 51 
187e4     46 52 45 51 
187e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
187ec     46 52 45 51 
187f0     46 52 45 51 
187f4     46 52 45 51 
187f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
187fc     46 52 45 51 
18800     46 52 45 51 
18804     46 52 45 51 
18808     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1880c     46 52 45 51 
18810     46 52 45 51 
18814     46 52 45 51 
18818     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1881c     46 52 45 51 
18820     46 52 45 51 
18824     46 52 45 51 
18828     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1882c     46 52 45 51 
18830     46 52 45 51 
18834     46 52 45 51 
18838     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1883c     46 52 45 51 
18840     46 52 45 51 
18844     46 52 45 51 
18848     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1884c     46 52 45 51 
18850     46 52 45 51 
18854     46 52 45 51 
18858     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1885c     46 52 45 51 
18860     46 52 45 51 
18864     46 52 45 51 
18868     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1886c     46 52 45 51 
18870     46 52 45 51 
18874     46 52 45 51 
18878     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1887c     46 52 45 51 
18880     46 52 45 51 
18884     46 52 45 51 
18888     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1888c     46 52 45 51 
18890     46 52 45 51 
18894     46 52 45 51 
18898     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1889c     46 52 45 51 
188a0     46 52 45 51 
188a4     46 52 45 51 
188a8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
188ac     46 52 45 51 
188b0     46 52 45 51 
188b4     46 52 45 51 
188b8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
188bc     46 52 45 51 
188c0     46 52 45 51 
188c4     46 52 45 51 
188c8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
188cc     46 52 45 51 
188d0     46 52 45 51 
188d4     46 52 45 51 
188d8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
188dc     46 52 45 51 
188e0     46 52 45 51 
188e4     46 52 45 51 
188e8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
188ec     46 52 45 51 
188f0     46 52 45 51 
188f4     46 52 45 51 
188f8     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
188fc     46 52 45 51 
18900     46 52 45 51 
18904     46 52 45 51 
18908     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1890c     00 00 00 00 
18910     00 00 00 00 | panningLut       word  0[NR_CHANNELS]
18914                 | 
18914                 | 'instrPanningLut  word  32768[NR_SAMPLES]
18914                 | 
18914     00 00 00 00 
18918     18 00 00 00 
1891c     31 00 00 00 
18920     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
18924     61 00 00 00 
18928     78 00 00 00 
1892c     8D 00 00 00 
18930     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
18934     B4 00 00 00 
18938     C5 00 00 00 
1893c     D4 00 00 00 
18940     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
18944     EB 00 00 00 
18948     F4 00 00 00 
1894c     FA 00 00 00 
18950     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
18954     FF 00 00 00 
18958     FD 00 00 00 
1895c     FA 00 00 00 
18960     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
18964     EB 00 00 00 
18968     E0 00 00 00 
1896c     D4 00 00 00 
18970     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
18974     B4 00 00 00 
18978     A1 00 00 00 
1897c     8D 00 00 00 
18980     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
18984     61 00 00 00 
18988     4A 00 00 00 
1898c     31 00 00 00 
18990     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
18994     00 00 00 00 
18998     E8 FF FF FF 
1899c     CF FF FF FF 
189a0     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
189a4     9F FF FF FF 
189a8     88 FF FF FF 
189ac     73 FF FF FF 
189b0     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
189b4     4C FF FF FF 
189b8     3B FF FF FF 
189bc     2C FF FF FF 
189c0     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
189c4     15 FF FF FF 
189c8     0C FF FF FF 
189cc     06 FF FF FF 
189d0     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
189d4     01 FF FF FF 
189d8     03 FF FF FF 
189dc     06 FF FF FF 
189e0     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
189e4     15 FF FF FF 
189e8     20 FF FF FF 
189ec     2C FF FF FF 
189f0     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
189f4     4C FF FF FF 
189f8     5F FF FF FF 
189fc     73 FF FF FF 
18a00     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
18a04     9F FF FF FF 
18a08     B6 FF FF FF 
18a0c     CF FF FF FF 
18a10     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
18a14                 | 
18a14     58 03 28 03 
18a18     FA 02 D0 02 
18a1c     A6 02 80 02 
18a20     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
18a24     1A 02 FC 01 
18a28     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
18a2c     AC 01 94 01 
18a30     7D 01 68 01 
18a34     53 01 40 01 
18a38     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
18a3c     0D 01 FE 00 
18a40     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
18a44     D6 00 CA 00 
18a48     BE 00 B4 00 
18a4c     AA 00 A0 00 
18a50     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
18a54     87 00 7F 00 
18a58     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
18a5c     52 03 22 03 
18a60     F5 02 CB 02 
18a64     A2 02 7D 02 
18a68     59 02 37 02 |                  word  850 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
18a6c     17 02 F9 01 
18a70     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
18a74     A9 01 91 01 
18a78     7B 01 65 01 
18a7c     51 01 3E 01 
18a80     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
18a84     0C 01 FD 00 
18a88     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
18a8c     D5 00 C9 00 
18a90     BD 00 B3 00 
18a94     A9 00 9F 00 
18a98     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
18a9c     86 00 7E 00 
18aa0     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
18aa4     4C 03 1C 03 
18aa8     F0 02 C5 02 
18aac     9E 02 78 02 
18ab0     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
18ab4     14 02 F6 01 
18ab8     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
18abc     A6 01 8E 01 
18ac0     78 01 63 01 
18ac4     4F 01 3C 01 
18ac8     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
18acc     0A 01 FB 00 
18ad0     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
18ad4     D3 00 C7 00 
18ad8     BC 00 B1 00 
18adc     A7 00 9E 00 
18ae0     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
18ae4     85 00 7D 00 
18ae8     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
18aec     46 03 17 03 
18af0     EA 02 C0 02 
18af4     99 02 74 02 
18af8     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
18afc     10 02 F2 01 
18b00     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
18b04     A3 01 8B 01 
18b08     75 01 60 01 
18b0c     4C 01 3A 01 
18b10     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
18b14     08 01 F9 00 
18b18     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
18b1c     D1 00 C6 00 
18b20     BB 00 B0 00 
18b24     A6 00 9D 00 
18b28     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
18b2c     84 00 7D 00 
18b30     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
18b34     40 03 11 03 
18b38     E5 02 BB 02 
18b3c     94 02 6F 02 
18b40     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
18b44     0C 02 EF 01 
18b48     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
18b4c     A0 01 88 01 
18b50     72 01 5E 01 
18b54     4A 01 38 01 
18b58     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
18b5c     06 01 F7 00 
18b60     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
18b64     D0 00 C4 00 
18b68     B9 00 AF 00 
18b6c     A5 00 9C 00 
18b70     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
18b74     83 00 7C 00 
18b78     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
18b7c     3A 03 0B 03 
18b80     E0 02 B6 02 
18b84     8F 02 6B 02 
18b88     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
18b8c     08 02 EB 01 
18b90     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
18b94     9D 01 86 01 
18b98     70 01 5B 01 
18b9c     48 01 35 01 
18ba0     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
18ba4     04 01 F5 00 
18ba8     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
18bac     CE 00 C3 00 
18bb0     B8 00 AE 00 
18bb4     A4 00 9B 00 
18bb8     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
18bbc     82 00 7B 00 
18bc0     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
18bc4     34 03 06 03 
18bc8     DA 02 B1 02 
18bcc     8B 02 66 02 
18bd0     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
18bd4     04 02 E7 01 
18bd8     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
18bdc     9A 01 83 01 
18be0     6D 01 59 01 
18be4     45 01 33 01 
18be8     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
18bec     02 01 F4 00 
18bf0     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
18bf4     CD 00 C1 00 
18bf8     B7 00 AC 00 
18bfc     A3 00 9A 00 
18c00     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
18c04     81 00 7A 00 
18c08     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
18c0c     2E 03 00 03 
18c10     D5 02 AC 02 
18c14     86 02 62 02 
18c18     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
18c1c     01 02 E4 01 
18c20     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
18c24     97 01 80 01 
18c28     6B 01 56 01 
18c2c     43 01 31 01 
18c30     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
18c34     00 01 F2 00 
18c38     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
18c3c     CC 00 C0 00 
18c40     B5 00 AB 00 
18c44     A1 00 98 00 
18c48     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
18c4c     80 00 79 00 
18c50     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
18c54     8B 03 58 03 
18c58     28 03 FA 02 
18c5c     D0 02 A6 02 
18c60     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
18c64     3A 02 1A 02 
18c68     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
18c6c     C5 01 AC 01 
18c70     94 01 7D 01 
18c74     68 01 53 01 
18c78     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
18c7c     1D 01 0D 01 
18c80     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
18c84     E2 00 D6 00 
18c88     CA 00 BE 00 
18c8c     B4 00 AA 00 
18c90     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
18c94     8F 00 87 00 
18c98     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
18c9c     84 03 52 03 
18ca0     22 03 F5 02 
18ca4     CB 02 A3 02 
18ca8     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
18cac     37 02 17 02 
18cb0     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
18cb4     C2 01 A9 01 
18cb8     91 01 7B 01 
18cbc     65 01 51 01 
18cc0     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
18cc4     1C 01 0C 01 
18cc8     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
18ccc     E1 00 D4 00 
18cd0     C8 00 BD 00 
18cd4     B3 00 A9 00 
18cd8     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
18cdc     8E 00 86 00 
18ce0     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
18ce4     7E 03 4C 03 
18ce8     1C 03 F0 02 
18cec     C5 02 9E 02 
18cf0     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
18cf4     33 02 14 02 
18cf8     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
18cfc     BF 01 A6 01 
18d00     8E 01 78 01 
18d04     63 01 4F 01 
18d08     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
18d0c     1A 01 0A 01 
18d10     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
18d14     DF 00 D3 00 
18d18     C7 00 BC 00 
18d1c     B1 00 A7 00 
18d20     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
18d24     8D 00 85 00 
18d28     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
18d2c     77 03 46 03 
18d30     17 03 EA 02 
18d34     C0 02 99 02 
18d38     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
18d3c     2F 02 10 02 
18d40     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
18d44     BC 01 A3 01 
18d48     8B 01 75 01 
18d4c     60 01 4C 01 
18d50     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
18d54     18 01 08 01 
18d58     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
18d5c     DE 00 D1 00 
18d60     C6 00 BB 00 
18d64     B0 00 A6 00 
18d68     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
18d6c     8C 00 84 00 
18d70     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
18d74     71 03 40 03 
18d78     11 03 E5 02 
18d7c     BB 02 94 02 
18d80     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
18d84     2B 02 0C 02 
18d88     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
18d8c     B9 01 A0 01 
18d90     88 01 72 01 
18d94     5E 01 4A 01 
18d98     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
18d9c     16 01 06 01 
18da0     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
18da4     DC 00 D0 00 
18da8     C4 00 B9 00 
18dac     AF 00 A5 00 
18db0     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
18db4     8B 00 83 00 
18db8     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
18dbc     6B 03 3A 03 
18dc0     0B 03 E0 02 
18dc4     B6 02 8F 02 
18dc8     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
18dcc     27 02 08 02 
18dd0     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
18dd4     B5 01 9D 01 
18dd8     86 01 70 01 
18ddc     5B 01 48 01 
18de0     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
18de4     14 01 04 01 
18de8     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
18dec     DB 00 CE 00 
18df0     C3 00 B8 00 
18df4     AE 00 A4 00 
18df8     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
18dfc     8A 00 82 00 
18e00     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
18e04     64 03 34 03 
18e08     06 03 DA 02 
18e0c     B1 02 8B 02 
18e10     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
18e14     23 02 04 02 
18e18     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
18e1c     B2 01 9A 01 
18e20     83 01 6D 01 
18e24     59 01 45 01 
18e28     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
18e2c     12 01 02 01 
18e30     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
18e34     D9 00 CD 00 
18e38     C1 00 B7 00 
18e3c     AC 00 A3 00 
18e40     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
18e44     89 00 81 00 
18e48     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
18e4c     5E 03 2E 03 
18e50     00 03 D5 02 
18e54     AC 02 86 02 
18e58     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
18e5c     1F 02 01 02 
18e60     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
18e64     AF 01 97 01 
18e68     80 01 6B 01 
18e6c     56 01 43 01 
18e70     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
18e74     10 01 00 01 
18e78     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
18e7c     D8 00 CB 00 
18e80     C0 00 B5 00 
18e84     AB 00 A1 00 
18e88     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
18e8c     88 00 80 00 
18e90     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
18e94                 | 	alignl
18e94                 | _audio008_spin2_dat_
18e94                 | 
18e94                 | audio       org
18e94                 |   
18e94     28 34 64 FD |             setq    #26             ' Init cog channel variables from the hub, channel#*9 longs
18e98     00 97 06 FB |             rdlong  sstart1,ptra
18e9c                 |         
18e9c     0E 64 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
18ea0     0E B4 1C FC |             wxpin   #90,#left
18ea4                 | 
18ea4     0F 64 07 FC |             wrpin   dac,#right
18ea8     0F B4 1C FC |             wxpin   #90,#right
18eac                 | 
18eac     41 9C 64 FD |             dirh    #left addpins 1
18eb0                 | 
18eb0     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
18eb4     28 E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
18eb8     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
18ebc                 |             
18ebc                 | '---------------------------------------------------------------------------------        
18ebc                 | '----------------- The main loop -------------------------------------------------
18ebc                 | '---------------------------------------------------------------------------------
18ebc                 | 
18ebc     28 10 64 FD | loop        setq    #8              ' Read channel regs from the hub
18ec0     61 97 06 FB |             rdlong  sstart1,ptra++
18ec4     28 10 64 FD |             setq    #8              ' Cannot do one big setq+rdlong as it interferes with interrupts
18ec8     61 A9 06 FB |             rdlong  sstart2,ptra++
18ecc     28 10 64 FD |             setq    #8
18ed0     61 BB 06 FB |             rdlong  sstart3,ptra++
18ed4     28 10 64 FD |             setq    #8
18ed8     61 CD 06 FB |             rdlong  sstart4,ptra++
18edc     28 10 64 FD |             setq    #8
18ee0     61 DF 06 FB |             rdlong  sstart5,ptra++
18ee4     28 10 64 FD |             setq    #8
18ee8     61 F1 06 FB |             rdlong  sstart6,ptra++
18eec     28 10 64 FD |             setq    #8
18ef0     61 03 07 FB |             rdlong  sstart7,ptra++
18ef4     28 10 64 FD |             setq    #8
18ef8     61 15 07 FB |             rdlong  sstart8,ptra++
18efc                 | 
18efc     20 F1 87 F1 |             sub ptra,#9*4*8    
18f00                 |     
18f00     00 A6 0E F2 |             cmp     acmd1,#0 wz     ' if cmd=0, zero the phase accumulator
18f04     00 72 06 A6 |     if_e    mov     p1,#0
18f08     00 B8 0E F2 |             cmp     acmd2,#0 wz
18f0c     00 74 06 A6 |     if_e    mov     p2,#0
18f10     00 CA 0E F2 |             cmp     acmd3,#0 wz
18f14     00 76 06 A6 |     if_e    mov     p3,#0
18f18     00 DC 0E F2 |             cmp     acmd4,#0 wz
18f1c     00 78 06 A6 |     if_e    mov     p4,#0
18f20     00 EE 0E F2 |             cmp     acmd5,#0 wz
18f24     00 7A 06 A6 |     if_e    mov     p5,#0
18f28     00 00 0F F2 |             cmp     acmd6,#0 wz
18f2c     00 7C 06 A6 |     if_e    mov     p6,#0
18f30     00 12 0F F2 |             cmp     acmd7,#0 wz
18f34     00 7E 06 A6 |     if_e    mov     p7,#0
18f38     00 24 0F F2 |             cmp     acmd8,#0 wz
18f3c     00 80 06 A6 |     if_e    mov     p8,#0
18f40                 |           
18f40     44 83 02 F6 |             mov     qq,tail         ' Check if the buffer is full	
18f44     02 82 86 F1 |             sub     qq,#2
18f48     FF 83 06 F5 |             and     qq,#511
18f4c     43 83 1A F2 |             cmp     qq,front wcz
18f50     68 FF 9F AD |     if_e    jmp     #loop           ' If the buffer is full, do nothing               
18f54                 |       
18f54     00 3A 07 F6 |             mov     cn,#0           ' Find the channel to compute
18f58     94 3D 03 F6 |             mov     ct,time1        ' with the lowest next sample time
18f5c     95 3D 3B F3 |             fle     ct,time2 wcz    ' TODO: THIS WILL FAIL AFTER 1210 (or 605? )seconds when overflow
18f60     01 3A 07 C6 |     if_c    mov     cn,#1   
18f64     96 3D 3B F3 |             fle     ct,time3 wcz
18f68     02 3A 07 C6 |     if_c    mov     cn,#2        
18f6c     97 3D 3B F3 |             fle     ct,time4 wcz
18f70     03 3A 07 C6 |     if_c    mov     cn,#3 
18f74     98 3D 3B F3 |             fle     ct,time5 wcz
18f78     04 3A 07 C6 |     if_c    mov     cn,#4 
18f7c     99 3D 3B F3 |             fle     ct,time6 wcz
18f80     05 3A 07 C6 |     if_c    mov     cn,#5 
18f84     9A 3D 3B F3 |             fle     ct,time7 wcz
18f88     06 3A 07 C6 |     if_c    mov     cn,#6 
18f8c     9B 3D 3B F3 |             fle     ct,time8 wcz
18f90     07 3A 07 C6 |     if_c    mov     cn,#7 
18f94                 |  
18f94     00 3A 0F F2 |             cmp     cn,#0 wz'
18f98     38 00 90 AD |     if_z    jmp     #p201       
18f9c     01 3A 0F F2 |             cmp     cn,#1 wz
18fa0     8C 00 90 AD |     if_z    jmp     #p202       
18fa4     02 3A 0F F2 |             cmp     cn,#2 wz
18fa8     E0 00 90 AD |     if_z    jmp     #p203       
18fac     03 3A 0F F2 |             cmp     cn,#3 wz
18fb0     34 01 90 AD |     if_z    jmp     #p204       
18fb4     04 3A 0F F2 |             cmp     cn,#4 wz
18fb8     88 01 90 AD |     if_z    jmp     #p205       
18fbc     05 3A 0F F2 |             cmp     cn,#5 wz
18fc0     DC 01 90 AD |     if_z    jmp     #p206       
18fc4     06 3A 0F F2 |             cmp     cn,#6 wz
18fc8     30 02 90 AD |     if_z    jmp     #p207       
18fcc     07 3A 0F F2 |             cmp     cn,#7 wz
18fd0     84 02 90 AD |     if_z    jmp     #p208       
18fd4                 |            
18fd4                 | '----------------------------------------------------------------------------------
18fd4                 | '------------- Compute channel samples --------------------------------------------
18fd4                 | '----------------------------------------------------------------------------------
18fd4                 | 	
18fd4                 | ' ------------  Channel 1
18fd4                 |  
18fd4     94 3F 03 F6 | p201        mov     dt0,time1      ' compute the delta to add to the global time
18fd8     93 3F 83 F1 |             sub     dt0,time0
18fdc     51 29 03 F1 |             add     time1,freq1    ' compute the next channel time	
18fe0                 | 	        
18fe0     52 73 02 F1 |             add     p1,askip1      ' update the phase accumulator
18fe4     4E 73 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
18fe8     4E 73 82 31 |     if_ge   sub     p1,lend1	        
18fec     4D 73 02 31 |     if_ge   add     p1,lstart1       
18ff0     39 83 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
18ff4     4B 83 02 F1 |             add     qq,sstart1
18ff8                 |             
18ff8     00 98 0E F2 |             cmp     type1,#0 wz    ' check the sample type
18ffc     41 85 C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
19000     08 84 66 50 |     if_nz   shl     spl,#8
19004     41 85 E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
19008                 | 
19008     4F 85 32 FA |             scas    spl,vol1       ' apply the volume
1900c     00 84 02 F6 |             mov     spl,0-0
19010                 | 
19010     50 85 32 FA |             scas    spl,apan1      ' apply the pan
19014     00 44 03 F6 |             mov     ls1,0-0
19018     20 00 00 FF 
1901c     00 82 06 F6 |             mov     qq,##16384
19020     50 83 82 F1 |             sub     qq,apan1
19024     41 85 32 FA |             scas    spl,qq
19028     00 46 03 F6 |             mov     rs1,0-0
1902c                 |             
1902c     84 02 90 FD |             jmp     #p101              
19030                 | 	    	
19030                 | ' ------------  Channel 2
19030                 |  
19030     95 3F 03 F6 | p202        mov     dt0,time2
19034     93 3F 83 F1 |             sub     dt0,time0
19038     5A 2B 03 F1 |             add     time2,freq2  	
1903c                 | 	        
1903c     5B 75 02 F1 |             add     p2,askip2
19040     57 75 1A F2 |             cmp     p2,lend2 wcz
19044     57 75 82 31 |     if_ge   sub     p2,lend2	        
19048     56 75 02 31 |     if_ge   add     p2,lstart2       
1904c     3A 83 02 F6 |             mov     qq,p2
19050     54 83 02 F1 |             add     qq,sstart2
19054                 | 
19054     00 AA 0E F2 |             cmp     type2,#0 wz
19058     41 85 C2 5A |     if_nz   rdbyte  spl,qq
1905c     08 84 66 50 |     if_nz   shl     spl,#8
19060     41 85 E2 AA |     if_z    rdword  spl,qq
19064                 | 
19064     58 85 32 FA |             scas    spl,vol2
19068     00 84 02 F6 |             mov     spl,0-0
1906c                 |             
1906c     59 85 32 FA |             scas    spl,apan2
19070     00 48 03 F6 |             mov     ls2,0-0
19074     20 00 00 FF 
19078     00 82 06 F6 |             mov     qq,##16384
1907c     59 83 82 F1 |             sub     qq,apan2
19080     41 85 32 FA |             scas    spl,qq
19084     00 4A 03 F6 |             mov     rs2,0-0
19088                 |             
19088     28 02 90 FD |             jmp     #p101
1908c                 | 
1908c                 | ' ------------  Channel 3
1908c                 |  
1908c     96 3F 03 F6 | p203        mov     dt0,time3
19090     93 3F 83 F1 |             sub     dt0,time0
19094     63 2D 03 F1 |             add     time3,freq3  	
19098                 | 	        
19098     64 77 02 F1 |             add     p3,askip3
1909c     60 77 1A F2 |             cmp     p3,lend3 wcz
190a0     60 77 82 31 |     if_ge   sub     p3,lend3	        
190a4     5F 77 02 31 |     if_ge   add     p3,lstart3       
190a8     3B 83 02 F6 |             mov     qq,p3
190ac     5D 83 02 F1 |             add     qq,sstart3
190b0                 |             
190b0     00 BC 0E F2 |             cmp     type3,#0 wz
190b4     41 85 C2 5A |     if_nz   rdbyte  spl,qq
190b8     08 84 66 50 |     if_nz   shl     spl,#8
190bc     41 85 E2 AA |     if_z    rdword  spl,qq
190c0                 | 
190c0     61 85 32 FA |             scas    spl,vol3
190c4     00 84 02 F6 |             mov     spl,0-0
190c8                 |     	
190c8     62 85 32 FA |             scas    spl,apan3
190cc     00 4C 03 F6 |             mov     ls3,0-0
190d0                 |             
190d0     20 00 00 FF 
190d4     00 82 06 F6 |             mov     qq,##16384
190d8     62 83 82 F1 |             sub     qq,apan3
190dc     41 85 32 FA |             scas    spl,qq
190e0     00 4E 03 F6 |             mov     rs3,0-0
190e4                 | 
190e4     CC 01 90 FD |             jmp     #p101
190e8                 |             
190e8                 | ' ------------  Channel 4
190e8                 |  
190e8     97 3F 03 F6 | p204        mov     dt0,time4
190ec     93 3F 83 F1 |             sub     dt0,time0
190f0     6C 2F 03 F1 |             add     time4,freq4  	
190f4                 | 
190f4                 | 	        
190f4     6D 79 02 F1 |             add     p4,askip4
190f8     69 79 1A F2 |             cmp     p4,lend4 wcz
190fc     69 79 82 31 |     if_ge   sub     p4,lend4	        
19100     68 79 02 31 |     if_ge   add     p4,lstart4       
19104     3C 83 02 F6 |             mov     qq,p4
19108     66 83 02 F1 |             add     qq,sstart4
1910c                 |             
1910c     00 CE 0E F2 |             cmp     type4,#0 wz
19110     41 85 C2 5A |     if_nz   rdbyte  spl,qq
19114     08 84 66 50 |     if_nz   shl     spl,#8
19118     41 85 E2 AA |     if_z    rdword  spl,qq
1911c                 | 
1911c     6A 85 32 FA |             scas    spl,vol4
19120     00 84 02 F6 |             mov     spl,0-0
19124                 |     	
19124     6B 85 32 FA |             scas    spl,apan4
19128     00 52 03 F6 |             mov     ls4,0-0
1912c                 |             
1912c     20 00 00 FF 
19130     00 82 06 F6 |             mov     qq,##16384
19134     6B 83 82 F1 |             sub     qq,apan4
19138     41 85 32 FA |             scas    spl,qq
1913c     00 50 03 F6 |             mov     rs4,0-0
19140                 | 
19140     70 01 90 FD |             jmp     #p101
19144                 |             
19144                 | ' ------------  Channel 5
19144                 |  
19144     98 3F 03 F6 | p205        mov     dt0,time5
19148     93 3F 83 F1 |             sub     dt0,time0
1914c     75 31 03 F1 |             add     time5,freq5  	
19150                 | 
19150                 | 	        
19150     76 7B 02 F1 |             add     p5,askip5
19154     72 7B 1A F2 |             cmp     p5,lend5 wcz
19158     72 7B 82 31 |     if_ge   sub     p5,lend5	        
1915c     71 7B 02 31 |     if_ge   add     p5,lstart5       
19160     3D 83 02 F6 |             mov     qq,p5
19164     6F 83 02 F1 |             add     qq,sstart5
19168                 |             
19168     00 E0 0E F2 |             cmp     type5,#0 wz
1916c     41 85 C2 5A |     if_nz   rdbyte  spl,qq
19170     08 84 66 50 |     if_nz   shl     spl,#8
19174     41 85 E2 AA |     if_z    rdword  spl,qq
19178                 | 
19178     73 85 32 FA |             scas    spl,vol5
1917c     00 84 02 F6 |             mov     spl,0-0
19180                 |     	
19180     74 85 32 FA |             scas    spl,apan5
19184     00 56 03 F6 |             mov     ls5,0-0
19188                 |             
19188     20 00 00 FF 
1918c     00 82 06 F6 |             mov     qq,##16384
19190     74 83 82 F1 |             sub     qq,apan5
19194     41 85 32 FA |             scas    spl,qq
19198     00 54 03 F6 |             mov     rs5,0-0
1919c                 | 
1919c     14 01 90 FD |             jmp     #p101
191a0                 |   
191a0                 | ' ------------  Channel 6
191a0                 |  
191a0     99 3F 03 F6 | p206        mov     dt0,time6
191a4     93 3F 83 F1 |             sub     dt0,time0
191a8     7E 33 03 F1 |             add     time6,freq6  	
191ac                 | 
191ac                 | 	        
191ac     7F 7D 02 F1 |             add     p6,askip6
191b0     7B 7D 1A F2 |             cmp     p6,lend6 wcz
191b4     7B 7D 82 31 |     if_ge   sub     p6,lend6	        
191b8     7A 7D 02 31 |     if_ge   add     p6,lstart6       
191bc     3E 83 02 F6 |             mov     qq,p6
191c0     78 83 02 F1 |             add     qq,sstart6
191c4                 |             
191c4     00 F2 0E F2 |             cmp     type6,#0 wz
191c8     41 85 C2 5A |     if_nz   rdbyte  spl,qq
191cc     08 84 66 50 |     if_nz   shl     spl,#8
191d0     41 85 E2 AA |     if_z    rdword  spl,qq
191d4                 | 
191d4     7C 85 32 FA |             scas    spl,vol6
191d8     00 84 02 F6 |             mov     spl,0-0
191dc                 |     	
191dc     7D 85 32 FA |             scas    spl,apan6
191e0     00 5A 03 F6 |             mov     ls6,0-0
191e4                 |             
191e4     20 00 00 FF 
191e8     00 82 06 F6 |             mov     qq,##16384
191ec     7D 83 82 F1 |             sub     qq,apan6
191f0     41 85 32 FA |             scas    spl,qq
191f4     00 58 03 F6 |             mov     rs6,0-0
191f8                 | 
191f8     B8 00 90 FD |             jmp     #p101
191fc                 |             
191fc                 | ' ------------  Channel 7
191fc                 |  
191fc     9A 3F 03 F6 | p207        mov     dt0,time7
19200     93 3F 83 F1 |             sub     dt0,time0
19204     87 35 03 F1 |             add     time7,freq7  	
19208                 | 
19208                 | 	        
19208     88 7F 02 F1 |             add     p7,askip7
1920c     84 7F 1A F2 |             cmp     p7,lend7 wcz
19210     84 7F 82 31 |     if_ge   sub     p7,lend7	        
19214     83 7F 02 31 |     if_ge   add     p7,lstart7       
19218     3F 83 02 F6 |             mov     qq,p7
1921c     81 83 02 F1 |             add     qq,sstart7
19220                 |             
19220     00 04 0F F2 |             cmp     type7,#0 wz
19224     41 85 C2 5A |     if_nz   rdbyte  spl,qq
19228     08 84 66 50 |     if_nz   shl     spl,#8
1922c     41 85 E2 AA |     if_z    rdword  spl,qq
19230                 | 
19230     85 85 32 FA |             scas    spl,vol7
19234     00 84 02 F6 |             mov     spl,0-0
19238                 |     	
19238     86 85 32 FA |             scas    spl,apan7
1923c     00 5E 03 F6 |             mov     ls7,0-0
19240                 |             
19240     20 00 00 FF 
19244     00 82 06 F6 |             mov     qq,##16384
19248     86 83 82 F1 |             sub     qq,apan7
1924c     41 85 32 FA |             scas    spl,qq
19250     00 5C 03 F6 |             mov     rs7,0-0
19254                 | 
19254     5C 00 90 FD |             jmp     #p101     
19258                 |                    
19258                 | ' ------------  Channel 8
19258                 |  
19258     9B 3F 03 F6 | p208        mov     dt0,time8
1925c     93 3F 83 F1 |             sub     dt0,time0
19260     90 37 03 F1 |             add     time8,freq8  	
19264                 | 
19264                 | 	        
19264     91 81 02 F1 |             add     p8,askip8
19268     8D 81 1A F2 |             cmp     p8,lend8 wcz
1926c     8D 81 82 31 |     if_ge   sub     p8,lend8	        
19270     8C 81 02 31 |     if_ge   add     p8,lstart8       
19274     40 83 02 F6 |             mov     qq,p8
19278     8A 83 02 F1 |             add     qq,sstart8
1927c                 |             
1927c     00 16 0F F2 |             cmp     type8,#0 wz
19280     41 85 C2 5A |     if_nz   rdbyte  spl,qq
19284     08 84 66 50 |     if_nz   shl     spl,#8
19288     41 85 E2 AA |     if_z    rdword  spl,qq
1928c                 | 
1928c     8E 85 32 FA |             scas    spl,vol8
19290     00 84 02 F6 |             mov     spl,0-0
19294                 |     	
19294     8F 85 32 FA |             scas    spl,apan8
19298     00 62 03 F6 |             mov     ls8,0-0
1929c                 |             
1929c     20 00 00 FF 
192a0     00 82 06 F6 |             mov     qq,##16384
192a4     8F 83 82 F1 |             sub     qq,apan8
192a8     41 85 32 FA |             scas    spl,qq
192ac     00 60 03 F6 |             mov     rs8,0-0
192b0                 | 
192b0     00 00 90 FD |             jmp     #p101            
192b4                 |             
192b4                 | '------------------------ Channels end here --------------------       
192b4                 | 
192b4                 | ' Now add all channels and put the sample to the buffer    
192b4                 | 
192b4                 | 
192b4     93 39 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
192b8     02 86 86 A1 |     if_z    sub     front,#2         ' 
192bc     FF 87 06 A5 |     if_z    and     front,#511     
192c0                 |   
192c0     00 42 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
192c4     00 40 07 F6 |             mov     ls,#0
192c8     A3 43 03 F1 |             add     rs,rs1
192cc     A5 43 03 F1 |             add     rs,rs2
192d0     A7 43 03 F1 |             add     rs,rs3
192d4     A8 43 03 F1 |             add     rs,rs4
192d8     AA 43 03 F1 |             add     rs,rs5
192dc     AC 43 03 F1 |             add     rs,rs6
192e0     AE 43 03 F1 |             add     rs,rs7
192e4     B0 43 03 F1 |             add     rs,rs8
192e8                 |             
192e8     A2 41 03 F1 |             add     ls,ls1
192ec     A4 41 03 F1 |             add     ls,ls2
192f0     A6 41 03 F1 |             add     ls,ls3
192f4     A9 41 03 F1 |             add     ls,ls4
192f8     AB 41 03 F1 |             add     ls,ls5
192fc     AD 41 03 F1 |             add     ls,ls6
19300     AF 41 03 F1 |             add     ls,ls7
19304     B1 41 03 F1 |             add     ls,ls8
19308                 |  		
19308     0F 40 E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1930c     0F 42 E7 F4 |             bitnot  rs,#15		
19310                 | 		
19310     A0 43 2B F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
19314     43 43 33 FC |             wrlut   rs,front         ' and write it to LUT
19318     01 86 06 F1 |             add     front,#1         ' Write the sample time
1931c     43 27 33 FC |             wrlut   time0,front
19320                 | 
19320     01 86 06 F1 |             add     front,#1         ' move the front pointer
19324     FF 87 06 F5 |             and     front,#511       ' and loop at #512
19328     93 39 03 F6 |             mov     oldt0,time0      ' update global time
1932c     9F 27 03 F1 |             add     time0,dt0        
19330     88 FB 9F FD |             jmp     #loop            'loop
19334                 | 
19334                 | '-------------------------------------------------------------------------
19334                 | '------------------ This is the end of the main loop ---------------------
19334                 | '-------------------------------------------------------------------------
19334                 | 
19334                 | '--------------------------------------------------------------------------
19334                 | '------ Interrupt service -------------------------------------------------
19334                 | '------ Output the sample, get the next one if exists ---------------------
19334                 | '--------------------------------------------------------------------------
19334                 | 
19334     0E 8C 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
19338     0F 8E 26 FC |             wypin   rsample,#right       '4
1933c                 | 
1933c     01 8A 06 F1 |             add     counter,#1           '6     Increment the counter
19340     4A 8B 1A F2 |             cmp     counter,irqtime wcz  '8     Check if it is time for the next sample
19344     F5 FF 3B 5B |     if_ne   reti1                        '10/12 If not, do nothing
19348                 | 		
19348     48 8D 02 F6 |             mov     lsample,lsnext       '12    Prepare the next sample to output
1934c     49 8F 02 F6 |             mov     rsample,rsnext       '14
19350                 | 		        
19350     43 89 1A F2 |             cmp     tail,front wcz       '16    If the buffer is empty, do nothing 
19354     F5 FF 3B AB |             if_e    reti1                '18/20 
19358                 | 
19358     44 91 A2 FA |             rdlut   lsnext,tail          '21    else read the sample and its time from LUT
1935c     48 93 3A F9 |             getword rsnext,lsnext,#1     '23    Split for left and right
19360     48 91 32 F9 |             getword lsnext,lsnext,#0     '25
19364     01 88 06 F1 |             add    tail, #1              '27
19368     44 95 A2 FA |             rdlut  irqtime,tail          '30    Read the time for this sample
1936c     01 88 06 F1 |             add    tail,#1               '32    Go to the next entry
19370     FF 89 06 F5 |             and    tail,#511             '34
19374     F5 FF 3B FB |             reti1                        '38
19378                 | 
19378                 | '---------------------------------------------------------------------------
19378                 | '-------- End of interrupt -------------------------------------------------
19378                 | '---------------------------------------------------------------------------    
19378                 | 
19378                 | '---------------------------------------------------------------------------
19378                 | '------- Variables ---------------------------------------------------------
19378                 | '---------------------------------------------------------------------------
19378                 | 
19378                 | ' phase accumulators
19378                 | 
19378     00 00 00 00 | p1          long 0
1937c     00 00 00 00 | p2          long 0
19380     00 00 00 00 | p3          long 0
19384     00 00 00 00 | p4          long 0
19388     00 00 00 00 | p5          long 0
1938c     00 00 00 00 | p6          long 0
19390     00 00 00 00 | p7          long 0
19394     00 00 00 00 | p8          long 0
19398                 | 
19398                 | ' temporary variables 
19398                 | 
19398     00 00 00 00 | qq          long 0
1939c     00 00 00 00 | spl         long 0
193a0                 | 
193a0                 | ' circular buffer in LUT
193a0                 | 
193a0     00 00 00 00 | front       long 0
193a4     00 00 00 00 | tail        long 0
193a8                 | 
193a8                 | ' Interrupt ISR variables
193a8                 | 
193a8     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
193ac     00 00 00 00 | lsample     long 0
193b0     00 00 00 00 | rsample     long 0
193b4     00 00 00 00 | lsnext      long 0
193b8     00 00 00 00 | rsnext      long 0 
193bc     00 00 00 00 | irqtime     long 0
193c0                 | 
193c0                 | ' Channel 1 registers. TODO - optimize the memory usage
193c0                 | 
193c0     00 00 00 00 | sstart1     long 0       ' Sample start pointer
193c4     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
193c8     00 00 00 00 | lstart1     long 0       ' Loop start
193cc     02 00 00 00 | lend1       long 2       ' Loop end
193d0     00 00 00 00 | vol1        long 0       ' volume, 0..16384
193d4     00 00 00 00 | apan1       long 0       ' pan, 0..16384
193d8     65 00 00 00 | freq1       long 101     ' frequency divider
193dc     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
193e0     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
193e4                 | 
193e4                 | ' Channel 2 registers
193e4                 | 
193e4     00 00 00 00 | sstart2     long 0
193e8     00 00 00 00 | type2       long 0
193ec     00 00 00 00 | lstart2     long 0
193f0     02 00 00 00 | lend2       long 2        		
193f4     00 00 00 00 | vol2        long 0
193f8     00 00 00 00 | apan2       long 0
193fc     67 00 00 00 | freq2       long 103
19400     02 00 00 00 | askip2      long 2
19404     00 00 00 00 | acmd2       long 0
19408                 | 
19408                 | ' Channel 3 registers
19408                 | 
19408     00 00 00 00 | sstart3     long 0
1940c     00 00 00 00 | type3       long 0
19410     00 00 00 00 | lstart3     long 0
19414     02 00 00 00 | lend3       long 2       		'
19418     00 00 00 00 | vol3        long 0
1941c     00 00 00 00 | apan3       long 0
19420     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
19424     02 00 00 00 | askip3      long 2
19428     00 00 00 00 | acmd3       long 0
1942c                 | 
1942c                 | ' Channel 4 registers
1942c                 | 
1942c     00 00 00 00 | sstart4     long 0
19430     00 00 00 00 | type4       long 0
19434     00 00 00 00 | lstart4     long 0
19438     02 00 00 00 | lend4       long 2       		'
1943c     00 00 00 00 | vol4        long 0
19440     00 00 00 00 | apan4       long 0
19444     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
19448     02 00 00 00 | askip4      long 2
1944c     00 00 00 00 | acmd4       long 0
19450                 | 
19450                 | ' Channel 5 registers
19450                 | 
19450     00 00 00 00 | sstart5     long 0
19454     00 00 00 00 | type5       long 0
19458     00 00 00 00 | lstart5     long 0
1945c     02 00 00 00 | lend5       long 2       		'
19460     00 00 00 00 | vol5        long 0
19464     00 00 00 00 | apan5       long 0
19468     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
1946c     02 00 00 00 | askip5      long 2
19470     00 00 00 00 | acmd5       long 0
19474                 | 
19474                 | ' Channel 6 registers
19474                 | 
19474     00 00 00 00 | sstart6     long 0
19478     00 00 00 00 | type6       long 0
1947c     00 00 00 00 | lstart6     long 0
19480     02 00 00 00 | lend6       long 2       		'
19484     00 00 00 00 | vol6        long 0
19488     00 00 00 00 | apan6       long 0
1948c     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
19490     02 00 00 00 | askip6      long 2
19494     00 00 00 00 | acmd6       long 0
19498                 | 
19498                 | ' Channel 7 registers
19498                 | 
19498     00 00 00 00 | sstart7     long 0
1949c     00 00 00 00 | type7       long 0
194a0     00 00 00 00 | lstart7     long 0
194a4     02 00 00 00 | lend7       long 2       		'
194a8     00 00 00 00 | vol7        long 0
194ac     00 00 00 00 | apan7       long 0
194b0     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
194b4     02 00 00 00 | askip7      long 2
194b8     00 00 00 00 | acmd7       long 0
194bc                 | 
194bc                 | ' Channel 8 registers
194bc                 | 
194bc     00 00 00 00 | sstart8     long 0
194c0     00 00 00 00 | type8       long 0
194c4     00 00 00 00 | lstart8     long 0
194c8     02 00 00 00 | lend8       long 2       		'
194cc     00 00 00 00 | vol8        long 0
194d0     00 00 00 00 | apan8       long 0
194d4     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
194d8     02 00 00 00 | askip8      long 2
194dc     00 00 00 00 | acmd8       long 0
194e0                 | 
194e0                 | ' Time variables
194e0                 | 
194e0     00 00 00 00 | time0       long 0    ' Global sample computing time
194e4     01 00 00 00 | time1       long 1    ' Local channels time
194e8     02 00 00 00 | time2       long 2
194ec     03 00 00 00 | time3       long 3
194f0     04 00 00 00 | time4       long 4
194f4     05 00 00 00 | time5       long 5
194f8     06 00 00 00 | time6       long 6
194fc     07 00 00 00 | time7       long 7
19500     08 00 00 00 | time8       long 8
19504                 | 
19504     00 00 00 00 | oldt0       long 0    'Temporary time variables
19508     00 00 00 00 | cn          long 0
1950c     00 00 00 00 | ct          long 0
19510     00 00 00 00 | dt0         long 0
19514                 | 
19514                 | ' Samples
19514                 | 
19514     00 00 00 00 | ls          long 0    ' Global sample variable
19518     00 00 00 00 | rs          long 0
1951c                 | 
1951c     00 00 00 00 | ls1         long 0    ' Channel samples
19520     00 00 00 00 | rs1         long 0
19524     00 00 00 00 | ls2         long 0
19528     00 00 00 00 | rs2         long 0
1952c     00 00 00 00 | ls3         long 0
19530     00 00 00 00 | rs3         long 0
19534     00 00 00 00 | rs4         long 0
19538     00 00 00 00 | ls4         long 0
1953c     00 00 00 00 | rs5         long 0
19540     00 00 00 00 | ls5         long 0
19544     00 00 00 00 | rs6         long 0
19548     00 00 00 00 | ls6         long 0
1954c     00 00 00 00 | rs7         long 0
19550     00 00 00 00 | ls7         long 0
19554     00 00 00 00 | rs8         long 0
19558     00 00 00 00 | ls8         long 0
1955c                 | 
1955c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
19560                 | 
19560     00 00 00 00 
19564     00 00 00 00 | null  			long 	0,0           ' for channel reset
19568     73 32 00 04 
1956c     00 00 10 00 
19570     00 00 00 00 
19574     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
19578     00 00 C9 00 
1957c     92 01 5B 02 
19580     24 03 ED 03 
19584     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
19588     48 06 11 07 
1958c     D9 07 A2 08 
19590     6A 09 33 0A 
19594     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
19598     8C 0C 54 0D 
1959c     1C 0E E3 0E 
195a0     AB 0F 72 10 
195a4     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
195a8     C8 12 8F 13 
195ac     55 14 1C 15 
195b0     E2 15 A8 16 
195b4     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
195b8     F9 18 BE 19 
195bc     82 1A 47 1B 
195c0     0B 1C CF 1C 
195c4     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
195c8     1A 1F DD 1F 
195cc     9F 20 61 21 
195d0     23 22 E5 22 
195d4     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
195d8     28 25 E8 25 
195dc     A8 26 67 27 
195e0     26 28 E5 28 
195e4     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
195e8     1F 2B DC 2B 
195ec     99 2C 55 2D 
195f0     11 2E CC 2E 
195f4     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
195f8     FB 30 B5 31 
195fc     6E 32 26 33 
19600     DF 33 96 34 
19604     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
19608     BA 36 6F 37 
1960c     24 38 D9 38 
19610     8C 39 40 3A 
19614     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
19618     56 3C 07 3D 
1961c     B8 3D 68 3E 
19620     17 3F C5 3F 
19624     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
19628     CE 41 7A 42 
1962c     25 43 D0 43 
19630     7A 44 24 45 
19634     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
19638     1C 47 C3 47 
1963c     69 48 0F 49 
19640     B4 49 58 4A 
19644     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
19648     3F 4C E0 4C 
1964c     81 4D 20 4E 
19650     BF 4E 5D 4F 
19654     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
19658     33 51 CE 51 
1965c     68 52 02 53 
19660     9B 53 32 54 
19664     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
19668     F5 55 8A 56 
1966c     1D 57 B0 57 
19670     42 58 D3 58 
19674     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
19678     82 5A 0F 5B 
1967c     9C 5B 28 5C 
19680     B3 5C 3E 5D 
19684     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
19688     D7 5E 5D 5F 
1968c     E3 5F 68 60 
19690     EB 60 6E 61 
19694     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
19698     F1 62 70 63 
1969c     EE 63 6C 64 
196a0     E8 64 63 65 
196a4     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
196a8     CF 66 46 67 
196ac     BC 67 32 68 
196b0     A6 68 19 69 
196b4     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
196b8     6D 6A DC 6A 
196bc     4A 6B B7 6B 
196c0     23 6C 8E 6C 
196c4     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
196c8     C9 6D 30 6E 
196cc     96 6E FB 6E 
196d0     5E 6F C1 6F 
196d4     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
196d8     E2 70 40 71 
196dc     9D 71 F9 71 
196e0     54 72 AE 72 
196e4     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
196e8     B5 73 0A 74 
196ec     5F 74 B2 74 
196f0     04 75 55 75 
196f4     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
196f8     41 76 8D 76 
196fc     D8 76 22 77 
19700     6B 77 B3 77 
19704     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
19708     84 78 C7 78 
1970c     09 79 4A 79 
19710     89 79 C8 79 
19714     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
19718     7C 7A B6 7A 
1971c     EE 7A 26 7B 
19720     5C 7B 91 7B 
19724     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
19728     29 7C 59 7C 
1972c     88 7C B6 7C 
19730     E3 7C 0E 7D 
19734     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
19738     89 7D B0 7D 
1973c     D5 7D FA 7D 
19740     1D 7E 3E 7E 
19744     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
19748     9C 7E B9 7E 
1974c     D5 7E EF 7E 
19750     09 7F 21 7F 
19754     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
19758     61 7F 74 7F 
1975c     86 7F 97 7F 
19760     A6 7F B4 7F 
19764     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
19768     D8 7F E1 7F 
1976c     E9 7F F0 7F 
19770     F5 7F F9 7F 
19774     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
19778     FF 7F FE 7F 
1977c     FD 7F F9 7F 
19780     F5 7F F0 7F 
19784     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
19788     D8 7F CD 7F 
1978c     C1 7F B4 7F 
19790     A6 7F 97 7F 
19794     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
19798     61 7F 4D 7F 
1979c     37 7F 21 7F 
197a0     09 7F EF 7E 
197a4     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
197a8     9C 7E 7E 7E 
197ac     5F 7E 3E 7E 
197b0     1D 7E FA 7D 
197b4     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
197b8     89 7D 62 7D 
197bc     39 7D 0E 7D 
197c0     E3 7C B6 7C 
197c4     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
197c8     29 7C F8 7B 
197cc     C5 7B 91 7B 
197d0     5C 7B 26 7B 
197d4     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
197d8     7C 7A 41 7A 
197dc     05 7A C8 79 
197e0     89 79 4A 79 
197e4     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
197e8     84 78 3F 78 
197ec     FA 77 B3 77 
197f0     6B 77 22 77 
197f4     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
197f8     41 76 F3 75 
197fc     A5 75 55 75 
19800     04 75 B2 74 
19804     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
19808     B5 73 5E 73 
1980c     07 73 AE 72 
19810     54 72 F9 71 
19814     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
19818     E2 70 83 70 
1981c     22 70 C1 6F 
19820     5E 6F FB 6E 
19824     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
19828     C9 6D 61 6D 
1982c     F8 6C 8E 6C 
19830     23 6C B7 6B 
19834     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
19838     6D 6A FD 69 
1983c     8B 69 19 69 
19840     A6 68 32 68 
19844     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
19848     CF 66 56 66 
1984c     DD 65 63 65 
19850     E8 64 6C 64 
19854     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
19858     F1 62 71 62 
1985c     F0 61 6E 61 
19860     EB 60 68 60 
19864     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
19868     D7 5E 4F 5E 
1986c     C7 5D 3E 5D 
19870     B3 5C 28 5C 
19874     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
19878     82 5A F3 59 
1987c     64 59 D3 58 
19880     42 58 B0 57 
19884     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
19888     F5 55 60 55 
1988c     C9 54 32 54 
19890     9B 53 02 53 
19894     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
19898     33 51 97 50 
1989c     FB 4F 5D 4F 
198a0     BF 4E 20 4E 
198a4     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
198a8     3F 4C 9D 4B 
198ac     FB 4A 58 4A 
198b0     B4 49 0F 49 
198b4     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
198b8     1C 47 75 46 
198bc     CD 45 24 45 
198c0     7A 44 D0 43 
198c4     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
198c8     CE 41 21 41 
198cc     73 40 C5 3F 
198d0     17 3F 68 3E 
198d4     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
198d8     56 3C A5 3B 
198dc     F2 3A 40 3A 
198e0     8C 39 D9 38 
198e4     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
198e8     BA 36 04 36 
198ec     4D 35 96 34 
198f0     DF 33 26 33 
198f4     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
198f8     FB 30 41 30 
198fc     87 2F CC 2E 
19900     11 2E 55 2D 
19904     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
19908     1F 2B 61 2A 
1990c     A3 29 E5 28 
19910     26 28 67 27 
19914     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
19918     28 25 67 24 
1991c     A6 23 E5 22 
19920     23 22 61 21 
19924     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
19928     1A 1F 57 1E 
1992c     93 1D CF 1C 
19930     0B 1C 47 1B 
19934     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
19938     F9 18 33 18 
1993c     6E 17 A8 16 
19940     E2 15 1C 15 
19944     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
19948     C8 12 01 12 
1994c     3A 11 72 10 
19950     AB 0F E3 0E 
19954     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
19958     8C 0C C4 0B 
1995c     FB 0A 33 0A 
19960     6A 09 A2 08 
19964     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
19968     48 06 7F 05 
1996c     B6 04 ED 03 
19970     24 03 5B 02 
19974     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
19978     00 00 37 FF 
1997c     6E FE A5 FD 
19980     DC FC 13 FC 
19984     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
19988     B8 F9 EF F8 
1998c     27 F8 5E F7 
19990     96 F6 CD F5 
19994     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
19998     74 F3 AC F2 
1999c     E4 F1 1D F1 
199a0     55 F0 8E EF 
199a4     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
199a8     38 ED 71 EC 
199ac     AB EB E4 EA 
199b0     1E EA 58 E9 
199b4     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
199b8     07 E7 42 E6 
199bc     7E E5 B9 E4 
199c0     F5 E3 31 E3 
199c4     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
199c8     E6 E0 23 E0 
199cc     61 DF 9F DE 
199d0     DD DD 1B DD 
199d4     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
199d8     D8 DA 18 DA 
199dc     58 D9 99 D8 
199e0     DA D7 1B D7 
199e4     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
199e8     E1 D4 24 D4 
199ec     67 D3 AB D2 
199f0     EF D1 34 D1 
199f4     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
199f8     05 CF 4B CE 
199fc     92 CD DA CC 
19a00     21 CC 6A CB 
19a04     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
19a08     46 C9 91 C8 
19a0c     DC C7 27 C7 
19a10     74 C6 C0 C5 
19a14     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
19a18     AA C3 F9 C2 
19a1c     48 C2 98 C1 
19a20     E9 C0 3B C0 
19a24     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
19a28     32 BE 86 BD 
19a2c     DB BC 30 BC 
19a30     86 BB DC BA 
19a34     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
19a38     E4 B8 3D B8 
19a3c     97 B7 F1 B6 
19a40     4C B6 A8 B5 
19a44     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
19a48     C1 B3 20 B3 
19a4c     7F B2 E0 B1 
19a50     41 B1 A3 B0 
19a54     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
19a58     CD AE 32 AE 
19a5c     98 AD FE AC 
19a60     65 AC CE AB 
19a64     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
19a68     0B AA 76 A9 
19a6c     E3 A8 50 A8 
19a70     BE A7 2D A7 
19a74     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
19a78     7E A5 F1 A4 
19a7c     64 A4 D8 A3 
19a80     4D A3 C2 A2 
19a84     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
19a88     29 A1 A3 A0 
19a8c     1D A0 98 9F 
19a90     15 9F 92 9E 
19a94     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
19a98     0F 9D 90 9C 
19a9c     12 9C 94 9B 
19aa0     18 9B 9D 9A 
19aa4     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
19aa8     31 99 BA 98 
19aac     44 98 CE 97 
19ab0     5A 97 E7 96 
19ab4     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
19ab8     93 95 24 95 
19abc     B6 94 49 94 
19ac0     DD 93 72 93 
19ac4     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
19ac8     37 92 D0 91 
19acc     6A 91 05 91 
19ad0     A2 90 3F 90 
19ad4     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
19ad8     1E 8F C0 8E 
19adc     63 8E 07 8E 
19ae0     AC 8D 52 8D 
19ae4     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
19ae8     4B 8C F6 8B 
19aec     A1 8B 4E 8B 
19af0     FC 8A AB 8A 
19af4     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
19af8     BF 89 73 89 
19afc     28 89 DE 88 
19b00     95 88 4D 88 
19b04     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
19b08     7C 87 39 87 
19b0c     F7 86 B6 86 
19b10     77 86 38 86 
19b14     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
19b18     84 85 4A 85 
19b1c     12 85 DA 84 
19b20     A4 84 6F 84 
19b24     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
19b28     D7 83 A7 83 
19b2c     78 83 4A 83 
19b30     1D 83 F2 82 
19b34     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
19b38     77 82 50 82 
19b3c     2B 82 06 82 
19b40     E3 81 C2 81 
19b44     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
19b48     64 81 47 81 
19b4c     2B 81 11 81 
19b50     F7 80 DF 80 
19b54     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
19b58     9F 80 8C 80 
19b5c     7A 80 69 80 
19b60     5A 80 4C 80 
19b64     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
19b68     28 80 1F 80 
19b6c     17 80 10 80 
19b70     0B 80 07 80 
19b74     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
19b78     01 80 02 80 
19b7c     03 80 07 80 
19b80     0B 80 10 80 
19b84     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
19b88     28 80 33 80 
19b8c     3F 80 4C 80 
19b90     5A 80 69 80 
19b94     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
19b98     9F 80 B3 80 
19b9c     C9 80 DF 80 
19ba0     F7 80 11 81 
19ba4     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
19ba8     64 81 82 81 
19bac     A1 81 C2 81 
19bb0     E3 81 06 82 
19bb4     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
19bb8     77 82 9E 82 
19bbc     C7 82 F2 82 
19bc0     1D 83 4A 83 
19bc4     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
19bc8     D7 83 08 84 
19bcc     3B 84 6F 84 
19bd0     A4 84 DA 84 
19bd4     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
19bd8     84 85 BF 85 
19bdc     FB 85 38 86 
19be0     77 86 B6 86 
19be4     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
19be8     7C 87 C1 87 
19bec     06 88 4D 88 
19bf0     95 88 DE 88 
19bf4     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
19bf8     BF 89 0D 8A 
19bfc     5B 8A AB 8A 
19c00     FC 8A 4E 8B 
19c04     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
19c08     4B 8C A2 8C 
19c0c     F9 8C 52 8D 
19c10     AC 8D 07 8E 
19c14     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
19c18     1E 8F 7D 8F 
19c1c     DE 8F 3F 90 
19c20     A2 90 05 91 
19c24     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
19c28     37 92 9F 92 
19c2c     08 93 72 93 
19c30     DD 93 49 94 
19c34     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
19c38     93 95 03 96 
19c3c     75 96 E7 96 
19c40     5A 97 CE 97 
19c44     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
19c48     31 99 AA 99 
19c4c     23 9A 9D 9A 
19c50     18 9B 94 9B 
19c54     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
19c58     0F 9D 8F 9D 
19c5c     10 9E 92 9E 
19c60     15 9F 98 9F 
19c64     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
19c68     29 A1 B1 A1 
19c6c     39 A2 C2 A2 
19c70     4D A3 D8 A3 
19c74     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
19c78     7E A5 0D A6 
19c7c     9C A6 2D A7 
19c80     BE A7 50 A8 
19c84     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
19c88     0B AA A0 AA 
19c8c     37 AB CE AB 
19c90     65 AC FE AC 
19c94     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
19c98     CD AE 69 AF 
19c9c     05 B0 A3 B0 
19ca0     41 B1 E0 B1 
19ca4     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
19ca8     C1 B3 63 B4 
19cac     05 B5 A8 B5 
19cb0     4C B6 F1 B6 
19cb4     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
19cb8     E4 B8 8B B9 
19cbc     33 BA DC BA 
19cc0     86 BB 30 BC 
19cc4     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
19cc8     32 BE DF BE 
19ccc     8D BF 3B C0 
19cd0     E9 C0 98 C1 
19cd4     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
19cd8     AA C3 5B C4 
19cdc     0E C5 C0 C5 
19ce0     74 C6 27 C7 
19ce4     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
19ce8     46 C9 FC C9 
19cec     B3 CA 6A CB 
19cf0     21 CC DA CC 
19cf4     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
19cf8     05 CF BF CF 
19cfc     79 D0 34 D1 
19d00     EF D1 AB D2 
19d04     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
19d08     E1 D4 9F D5 
19d0c     5D D6 1B D7 
19d10     DA D7 99 D8 
19d14     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
19d18     D8 DA 99 DB 
19d1c     5A DC 1B DD 
19d20     DD DD 9F DE 
19d24     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
19d28     E6 E0 A9 E1 
19d2c     6D E2 31 E3 
19d30     F5 E3 B9 E4 
19d34     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
19d38     07 E7 CD E7 
19d3c     92 E8 58 E9 
19d40     1E EA E4 EA 
19d44     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
19d48     38 ED FF ED 
19d4c     C6 EE 8E EF 
19d50     55 F0 1D F1 
19d54     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
19d58     74 F3 3C F4 
19d5c     05 F5 CD F5 
19d60     96 F6 5E F7 
19d64     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
19d68     B8 F9 81 FA 
19d6c     4A FB 13 FC 
19d70     DC FC A5 FD 
19d74     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
19d78                 | 	alignl
19d78                 | __system__dat_
19d78     00 00 00 00 
19d7c     00 00 00 00 | 	byte	$00[8]
19d80     03 00 00 00 
19d84     00 00 00 00 
19d88     00 00 00 00 
19d8c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19d90     00 00 00 00 
19d94     00 00 00 00 
19d98     00 00 00 00 | 	byte	$00[12]
19d9c     05 00 00 00 
19da0     00 00 00 00 
19da4     00 00 00 00 
19da8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19dac     74 9F 01 00 | 	long	@@@__system__dat_ + 508
19db0     7C 9F 01 00 | 	long	@@@__system__dat_ + 516
19db4     00 00 00 00 | 	byte	$00, $00, $00, $00
19db8     84 9F 01 00 | 	long	@@@__system__dat_ + 524
19dbc     8C 9F 01 00 | 	long	@@@__system__dat_ + 532
19dc0     00 00 00 00 
19dc4     00 00 00 00 | 	byte	$00[8]
19dc8     01 00 00 00 
19dcc     06 00 00 00 
19dd0     00 00 00 00 
19dd4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19dd8     00 00 00 00 | 	byte	$00, $00, $00, $00
19ddc     94 9F 01 00 | 	long	@@@__system__dat_ + 540
19de0     9C 9F 01 00 | 	long	@@@__system__dat_ + 548
19de4     00 00 00 00 | 	byte	$00, $00, $00, $00
19de8     A4 9F 01 00 | 	long	@@@__system__dat_ + 556
19dec     AC 9F 01 00 | 	long	@@@__system__dat_ + 564
19df0     00 00 00 00 
19df4     00 00 00 00 | 	byte	$00[8]
19df8     01 00 00 00 
19dfc     06 00 00 00 
19e00     00 00 00 00 
19e04     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e08     00 00 00 00 | 	byte	$00, $00, $00, $00
19e0c     B4 9F 01 00 | 	long	@@@__system__dat_ + 572
19e10     BC 9F 01 00 | 	long	@@@__system__dat_ + 580
19e14     00 00 00 00 | 	byte	$00, $00, $00, $00
19e18     C4 9F 01 00 | 	long	@@@__system__dat_ + 588
19e1c     CC 9F 01 00 | 	long	@@@__system__dat_ + 596
19e20     00 00 00 00 
      ...             
19f70     00 00 00 00 
19f74     00 00 00 00 | 	byte	$00[344]
19f78     5C 4F 00 00 | 	long	@@@__system___tx
19f7c     00 00 00 00 | 	byte	$00, $00, $00, $00
19f80     A4 4F 00 00 | 	long	@@@__system___rx
19f84     00 00 00 00 | 	byte	$00, $00, $00, $00
19f88     6C 61 00 00 | 	long	@@@__system___rxtxioctl_0174
19f8c     00 00 00 00 | 	byte	$00, $00, $00, $00
19f90     E4 61 00 00 | 	long	@@@__system____dummy_flush_0175
19f94     00 00 00 00 | 	byte	$00, $00, $00, $00
19f98     5C 4F 00 00 | 	long	@@@__system___tx
19f9c     00 00 00 00 | 	byte	$00, $00, $00, $00
19fa0     A4 4F 00 00 | 	long	@@@__system___rx
19fa4     00 00 00 00 | 	byte	$00, $00, $00, $00
19fa8     6C 61 00 00 | 	long	@@@__system___rxtxioctl_0174
19fac     00 00 00 00 | 	byte	$00, $00, $00, $00
19fb0     E4 61 00 00 | 	long	@@@__system____dummy_flush_0175
19fb4     00 00 00 00 | 	byte	$00, $00, $00, $00
19fb8     5C 4F 00 00 | 	long	@@@__system___tx
19fbc     00 00 00 00 | 	byte	$00, $00, $00, $00
19fc0     A4 4F 00 00 | 	long	@@@__system___rx
19fc4     00 00 00 00 | 	byte	$00, $00, $00, $00
19fc8     6C 61 00 00 | 	long	@@@__system___rxtxioctl_0174
19fcc     00 00 00 00 | 	byte	$00, $00, $00, $00
19fd0     E4 61 00 00 | 	long	@@@__system____dummy_flush_0175
19fd4     00 00 00 00 | 	byte	$00, $00, $00, $00
19fd8                 | __heap_base
19fd8     00 00 00 00 
      ...             
1afd8     00 00 00 00 
1afdc     00 00 00 00 | 	long	0[1026]
1afe0                 | objmem
1afe0     00 00 00 00 | 	long	0[1]
1afe4 117             | 	org	COG_BSS_START
1afe4 117             | _var01
1afe4 117             | 	res	1
1afe4 118             | _var02
1afe4 118             | 	res	1
1afe4 119             | _var03
1afe4 119             | 	res	1
1afe4 11a             | _var04
1afe4 11a             | 	res	1
1afe4 11b             | _var05
1afe4 11b             | 	res	1
1afe4 11c             | _var06
1afe4 11c             | 	res	1
1afe4 11d             | _var07
1afe4 11d             | 	res	1
1afe4 11e             | _var08
1afe4 11e             | 	res	1
1afe4 11f             | _var09
1afe4 11f             | 	res	1
1afe4 120             | _var10
1afe4 120             | 	res	1
1afe4 121             | _var11
1afe4 121             | 	res	1
1afe4 122             | _var12
1afe4 122             | 	res	1
1afe4 123             | _var13
1afe4 123             | 	res	1
1afe4 124             | _var14
1afe4 124             | 	res	1
1afe4 125             | _var15
1afe4 125             | 	res	1
1afe4 126             | _var16
1afe4 126             | 	res	1
1afe4 127             | _var17
1afe4 127             | 	res	1
1afe4 128             | _var18
1afe4 128             | 	res	1
1afe4 129             | _var19
1afe4 129             | 	res	1
1afe4 12a             | _var20
1afe4 12a             | 	res	1
1afe4 12b             | _var21
1afe4 12b             | 	res	1
1afe4 12c             | _var22
1afe4 12c             | 	res	1
1afe4 12d             | arg01
1afe4 12d             | 	res	1
1afe4 12e             | arg02
1afe4 12e             | 	res	1
1afe4 12f             | arg03
1afe4 12f             | 	res	1
1afe4 130             | arg04
1afe4 130             | 	res	1
1afe4 131             | arg05
1afe4 131             | 	res	1
1afe4 132             | arg06
1afe4 132             | 	res	1
1afe4 133             | arg07
1afe4 133             | 	res	1
1afe4 134             | local01
1afe4 134             | 	res	1
1afe4 135             | local02
1afe4 135             | 	res	1
1afe4 136             | local03
1afe4 136             | 	res	1
1afe4 137             | local04
1afe4 137             | 	res	1
1afe4 138             | local05
1afe4 138             | 	res	1
1afe4 139             | local06
1afe4 139             | 	res	1
1afe4 13a             | local07
1afe4 13a             | 	res	1
1afe4 13b             | local08
1afe4 13b             | 	res	1
1afe4 13c             | local09
1afe4 13c             | 	res	1
1afe4 13d             | local10
1afe4 13d             | 	res	1
1afe4 13e             | local11
1afe4 13e             | 	res	1
1afe4 13f             | local12
1afe4 13f             | 	res	1
1afe4 140             | local13
1afe4 140             | 	res	1
1afe4 141             | local14
1afe4 141             | 	res	1
1afe4 142             | local15
1afe4 142             | 	res	1
1afe4 143             | local16
1afe4 143             | 	res	1
1afe4 144             | local17
1afe4 144             | 	res	1
1afe4 145             | local18
1afe4 145             | 	res	1
1afe4 146             | local19
1afe4 146             | 	res	1
1afe4 147             | local20
1afe4 147             | 	res	1
1afe4 148             | local21
1afe4 148             | 	res	1
1afe4 149             | local22
1afe4 149             | 	res	1
1afe4 14a             | local23
1afe4 14a             | 	res	1
1afe4 14b             | local24
1afe4 14b             | 	res	1
1afe4 14c             | local25
1afe4 14c             | 	res	1
1afe4 14d             | local26
1afe4 14d             | 	res	1
1afe4 14e             | local27
1afe4 14e             | 	res	1
1afe4 14f             | local28
1afe4 14f             | 	res	1
1afe4 150             | local29
1afe4 150             | 	res	1
1afe4 151             | local30
1afe4 151             | 	res	1
1afe4 152             | local31
1afe4 152             | 	res	1
1afe4 153             | local32
1afe4 153             | 	res	1
1afe4 154             | local33
1afe4 154             | 	res	1
1afe4 155             | local34
1afe4 155             | 	res	1
1afe4 156             | local35
1afe4 156             | 	res	1
1afe4 157             | local36
1afe4 157             | 	res	1
1afe4 158             | local37
1afe4 158             | 	res	1
1afe4 159             | local38
1afe4 159             | 	res	1
1afe4 15a             | local39
1afe4 15a             | 	res	1
1afe4 15b             | local40
1afe4 15b             | 	res	1
1afe4 15c             | local41
1afe4 15c             | 	res	1
1afe4 15d             | local42
1afe4 15d             | 	res	1
1afe4 15e             | local43
1afe4 15e             | 	res	1
1afe4 15f             | local44
1afe4 15f             | 	res	1
1afe4 160             | local45
1afe4 160             | 	res	1
1afe4 161             | local46
1afe4 161             | 	res	1
1afe4 162             | local47
1afe4 162             | 	res	1
1afe4 163             | local48
1afe4 163             | 	res	1
1afe4 164             | local49
1afe4 164             | 	res	1
1afe4 165             | local50
1afe4 165             | 	res	1
1afe4 166             | local51
1afe4 166             | 	res	1
1afe4 167             | local52
1afe4 167             | 	res	1
1afe4 168             | local53
1afe4 168             | 	res	1
1afe4 169             | local54
1afe4 169             | 	res	1
1afe4 16a             | local55
1afe4 16a             | 	res	1
1afe4 16b             | local56
1afe4 16b             | 	res	1
1afe4 16c             | local57
1afe4 16c             | 	res	1
1afe4 16d             | local58
1afe4 16d             | 	res	1
1afe4 16e             | local59
1afe4 16e             | 	res	1
1afe4 16f             | local60
1afe4 16f             | 	res	1
1afe4 170             | local61
1afe4 170             | 	res	1
1afe4 171             | local62
1afe4 171             | 	res	1
1afe4 172             | local63
1afe4 172             | 	res	1
1afe4 173             | local64
1afe4 173             | 	res	1
1afe4 174             | local65
1afe4 174             | 	res	1
1afe4 175             | local66
1afe4 175             | 	res	1
1afe4 176             | local67
1afe4 176             | 	res	1
1afe4 177             | local68
1afe4 177             | 	res	1
1afe4 178             | local69
1afe4 178             | 	res	1
1afe4 179             | local70
1afe4 179             | 	res	1
1afe4 17a             | local71
1afe4 17a             | 	res	1
1afe4 17b             | local72
1afe4 17b             | 	res	1
1afe4 17c             | local73
1afe4 17c             | 	res	1
1afe4 17d             | local74
1afe4 17d             | 	res	1
1afe4 17e             | local75
1afe4 17e             | 	res	1
1afe4 17f             | local76
1afe4 17f             | 	res	1
1afe4 180             | local77
1afe4 180             | 	res	1
1afe4 181             | local78
1afe4 181             | 	res	1
1afe4 182             | local79
1afe4 182             | 	res	1
1afe4 183             | local80
1afe4 183             | 	res	1
1afe4 184             | muldiva_
1afe4 184             | 	res	1
1afe4 185             | muldivb_
1afe4 185             | 	res	1
1afe4 186             | 	fit	480
1afe4 186             | 
