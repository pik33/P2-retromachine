00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/hn007-20210302.p2asm"
00000                 | ' 
00000                 | ' 
00000                 | ' hdmi_base       = 0           'must be a multiple of 8
00000                 | con
00000                 | 	hdmi_base = 0
00000                 | ' _clkfreq        = 200000000      'start safe, hubset will do the rest
00000                 | 	_clkfreq = 200000000
00000                 | ' 
00000                 | ' 
00000                 | ' ' 354_689_500   '200x Atari 8-bit PAL,  50x Amiga PAL  - real settings: 49 869 354693878  - 1.0000123 - mode 0
00000                 | ' ' 357_954_500   '200x Atari 8-bit NTSC, 50x Amiga NTSC - real settings: 49 877 357959184  - 1.0000131 - mode 256
00000                 | ' 
00000                 | ' ' We also need x180 and x160 speeds
00000                 | ' '
00000                 | ' ' 319_220_550 90x PAL  - real settings: 51 814 319215686 - 0.9999848 - mode 1
00000                 | ' ' 322_159_050 90x NTSC - real settings: 37 596 322162162 - 1.0000097 - mode 257
00000                 | ' 
00000                 | ' ' 283_751_600 80x PAL  - real settings: 64 908 283750000 - 0.9999944 - mode 2
00000                 | ' ' 286_363_600 80x NTSC - real settings: 22 315 286363636 - 1.0000001 - mode 258
00000                 | ' 
00000                 | ' 
00000                 | ' c_black         =    0
00000                 | 	c_black = 0
00000                 | ' c_blue          =  117
00000                 | 	c_blue = 117
00000                 | ' c_green         =  199
00000                 | 	c_green = 199
00000                 | ' c_cyan          =  151
00000                 | 	c_cyan = 151
00000                 | ' c_red           =   39
00000                 | 	c_red = 39
00000                 | ' c_magenta       =   71
00000                 | 	c_magenta = 71
00000                 | ' c_brown         =  246
00000                 | 	c_brown = 246
00000                 | ' c_lightgray     =   10
00000                 | 	c_lightgray = 10
00000                 | ' c_darkgray      =    5
00000                 | 	c_darkgray = 5
00000                 | ' c_lightblue     =  123
00000                 | 	c_lightblue = 123
00000                 | ' c_lightgreen    =  203
00000                 | 	c_lightgreen = 203
00000                 | ' c_lightcyan     =  155
00000                 | 	c_lightcyan = 155
00000                 | ' c_lightred      =   43
00000                 | 	c_lightred = 43
00000                 | ' c_lightmagenta  =   75
00000                 | 	c_lightmagenta = 75
00000                 | ' c_yellow        =  234
00000                 | 	c_yellow = 234
00000                 | ' c_white         =   15
00000                 | 	c_white = 15
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 200000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10009fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 BE 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DC F0 03 F6 | 	mov	ptra, objptr
00410 003 18 00 00 FF 
00414 004 50 F0 07 F1 | 	add	ptra, ##12368
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 04 80 80 FF 
00428 009 00 F0 67 FD | 	hubset	##16779768
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 04 80 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##16779771
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 E1 F5 85 FF 
00448 011 14 00 6C FC | 	wrlong	##200000000, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 84 07 A0 FD | 	call	#_demo
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 D0 61 FD | 	cogid	arg01
00614 084 03 D0 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 B9 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 BF 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 D1 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 D3 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 D5 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 D7 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D BE 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 D4 55 F0 |         shr	arg03, #1 wc
00688 0a1 E8 D2 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 D0 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 D2 FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 D4 55 F0 |         shr	arg03, #1 wc
00698 0a5 E8 D2 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 D0 05 C1 |  if_c   add	arg01, #2
006a0 0a7 E9 D2 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 E8 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 D4 0D F2 |         cmp	arg03, #0 wz
006ac 0aa EA 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 D2 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 F5 65 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 F5 05 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 44 87 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 88 62 FD |        getqx   muldivb_
00740 0cf 19 86 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 43 87 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 B6 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 44 89 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 B6 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 B6 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 43 87 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 B6 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 44 89 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | 
0076c 0da             | itmp1_
0076c 0da 00 00 00 00 | 	long	0
00770 0db             | itmp2_
00770 0db 00 00 00 00 | 	long	0
00774 0dc             | objptr
00774 0dc C0 53 00 00 | 	long	@objmem
00778 0dd             | ptr___system__dat__
00778 0dd A8 53 00 00 | 	long	@__system__dat_
0077c 0de             | ptr__dat__
0077c 0de 90 35 00 00 | 	long	@_dat_
00780 0df             | result1
00780 0df 00 00 00 00 | 	long	0
00784 0e0             | COG_BSS_START
00784 0e0             | 	fit	480
00784                 | 	orgh
00784                 | hubentry
00784                 | 
00784                 | ' 
00784                 | ' {{
00784                 | ' }}
00784                 | ' 
00784                 | ' pub demo() | random, i, j, k, s1,s2,s3,s4,s5,s6,s7,s8
00784                 | _demo
00784     49 5A 05 F6 | 	mov	COUNT_, #73
00788     B0 00 A0 FD | 	call	#pushregs_
0078c                 | ' 
0078c                 | ' s1:=string("A HDMI Nostalgic 100x30 text with border driver demo")
0078c     17 00 00 FF 
00790     4C F5 05 F6 | 	mov	local01, ##@LR__0183
00794                 | ' s2:=string("It uses 8x16 font")
00794     17 00 00 FF 
00798     81 F7 05 F6 | 	mov	local02, ##@LR__0184
0079c                 | ' s3:=string("This is a P2 so every letter can have its own foreground and background color")
0079c     17 00 00 FF 
007a0     93 F9 05 F6 | 	mov	local03, ##@LR__0185
007a4                 | ' s4:=string("Every line can have its own border color")
007a4     17 00 00 FF 
007a8     E1 FB 05 F6 | 	mov	local04, ##@LR__0186
007ac                 | ' s5:=string("This time the hub RAM is used for the color buffer")
007ac     18 00 00 FF 
007b0     0A FC 05 F6 | 	mov	local05, ##@LR__0187
007b4                 | ' s6:=string("You can set colors for all the screen using one function call")
007b4     18 00 00 FF 
007b8     3D FE 05 F6 | 	mov	local06, ##@LR__0188
007bc                 | ' s7:=string("You can set border color for all the screen using one function call, too")
007bc     18 00 00 FF 
007c0     7B 00 06 F6 | 	mov	local07, ##@LR__0189
007c4                 | ' s8:=string("1234567890")
007c4                 | ' 
007c4                 | ' 
007c4                 | ' 
007c4                 | ' start(256)
007c4     00 D1 05 F6 | 	mov	arg01, #256
007c8     28 B8 05 F1 | 	add	objptr, #40
007cc     DC 02 02 F6 | 	mov	local08, objptr
007d0                 | ' 
007d0                 | ' ' mode=0 - start at PAL timings, 624 lines
007d0                 | ' ' mode=256 - start at NTSC timings, 524 lines
007d0                 | ' 
007d0                 | ' '**********************************************************************************
007d0                 | ' '
007d0                 | ' '           Starts the driver
007d0                 | ' '
007d0                 | ' '**********************************************************************************
007d0                 | ' 
007d0                 | ' ' initialize pointers
007d0                 | ' 
007d0                 | ' border_ptr:=@bordercolor
007d0     20 B8 85 F1 | 	sub	objptr, #32
007d4     DC 02 62 FC | 	wrlong	local08, objptr
007d8                 | ' font_ptr:=@st_font
007d8     04 B8 85 F1 | 	sub	objptr, #4
007dc     DC BC 61 FC | 	wrlong	ptr__dat__, objptr
007e0     A4 B8 05 F1 | 	add	objptr, #164
007e4     DC 04 02 F6 | 	mov	local09, objptr
007e8                 | ' buf_ptr:=@buf
007e8     A8 B8 85 F1 | 	sub	objptr, #168
007ec     DC 04 62 FC | 	wrlong	local09, objptr
007f0     17 00 00 FF 
007f4     A4 B9 05 F1 | 	add	objptr, ##12196
007f8     DC 06 02 F6 | 	mov	local10, objptr
007fc                 | ' vblank_ptr:=@vblank
007fc     17 00 00 FF 
00800     98 B9 85 F1 | 	sub	objptr, ##12184
00804     DC 06 62 FC | 	wrlong	local10, objptr
00808     17 00 00 FF 
0080c     7C B9 05 F1 | 	add	objptr, ##12156
00810     DC 08 02 F6 | 	mov	local11, objptr
00814                 | ' cursor_ptr:=@cursor_x
00814     17 00 00 FF 
00818     78 B9 85 F1 | 	sub	objptr, ##12152
0081c     DC 08 62 FC | 	wrlong	local11, objptr
00820     17 00 00 FF 
00824     A4 B9 05 F1 | 	add	objptr, ##12196
00828     DC 0A 02 F6 | 	mov	local12, objptr
0082c                 | ' mode_ptr:=@timings
0082c     17 00 00 FF 
00830     A0 B9 85 F1 | 	sub	objptr, ##12192
00834     DC 0A 62 FC | 	wrlong	local12, objptr
00838     0C 00 00 FF 
0083c     00 BC 05 F1 | 	add	ptr__dat__, ##6144
00840                 | ' palette_ptr:=@ataripalette
00840     04 B8 05 F1 | 	add	objptr, #4
00844     DC BC 61 FC | 	wrlong	ptr__dat__, objptr
00848     17 00 00 FF 
0084c     C4 B9 05 F1 | 	add	objptr, ##12228
00850     DC 0C 02 F6 | 	mov	local13, objptr
00854                 | ' command_ptr:=@cmd1
00854     17 00 00 FF 
00858     C0 B9 85 F1 | 	sub	objptr, ##12224
0085c     DC 0C 62 FC | 	wrlong	local13, objptr
00860     17 00 00 FF 
00864     C8 B9 05 F1 | 	add	objptr, ##12232
00868     DC 0E 02 F6 | 	mov	local14, objptr
0086c                 | ' fontnum_ptr:=@fontnum
0086c     17 00 00 FF 
00870     C4 B9 85 F1 | 	sub	objptr, ##12228
00874     DC 0E 62 FC | 	wrlong	local14, objptr
00878                 | ' 
00878                 | ' fontnum:=2048  ' ST type font
00878     17 00 00 FF 
0087c     C4 B9 05 F1 | 	add	objptr, ##12228
00880     04 00 80 FF 
00884     DC 00 68 FC | 	wrlong	##2048, objptr
00888                 | ' 
00888                 | ' ' initialize a cursor
00888                 | ' 
00888                 | ' cursor_x:=0
00888     5C B8 85 F1 | 	sub	objptr, #92
0088c     DC 00 48 FC | 	wrbyte	#0, objptr
00890                 | ' cursor_y:=0
00890     01 B8 05 F1 | 	add	objptr, #1
00894     DC 00 48 FC | 	wrbyte	#0, objptr
00898                 | ' cursor_sh:=14
00898     01 B8 05 F1 | 	add	objptr, #1
0089c     DC 1C 48 FC | 	wrbyte	#14, objptr
008a0                 | ' 
008a0                 | ' ' set 16 VGA DOS like colors
008a0                 | ' 
008a0                 | ' colors[0] := c_black
008a0     0A B8 05 F1 | 	add	objptr, #10
008a4     DC 00 48 FC | 	wrbyte	#0, objptr
008a8                 | ' colors[1] := c_blue
008a8     01 B8 05 F1 | 	add	objptr, #1
008ac     DC EA 48 FC | 	wrbyte	#117, objptr
008b0                 | ' colors[2] := c_green
008b0     01 B8 05 F1 | 	add	objptr, #1
008b4     DC 8E 49 FC | 	wrbyte	#199, objptr
008b8                 | ' colors[3] := c_cyan
008b8     01 B8 05 F1 | 	add	objptr, #1
008bc     DC 2E 49 FC | 	wrbyte	#151, objptr
008c0                 | ' colors[4] := c_red
008c0     01 B8 05 F1 | 	add	objptr, #1
008c4     DC 4E 48 FC | 	wrbyte	#39, objptr
008c8                 | ' colors[5] := c_magenta
008c8     01 B8 05 F1 | 	add	objptr, #1
008cc     DC 8E 48 FC | 	wrbyte	#71, objptr
008d0                 | ' colors[6] := c_brown
008d0     01 B8 05 F1 | 	add	objptr, #1
008d4     DC EC 49 FC | 	wrbyte	#246, objptr
008d8                 | ' colors[7] := c_lightgray
008d8     01 B8 05 F1 | 	add	objptr, #1
008dc     DC 14 48 FC | 	wrbyte	#10, objptr
008e0                 | ' colors[8] := c_darkgray
008e0     01 B8 05 F1 | 	add	objptr, #1
008e4     DC 0A 48 FC | 	wrbyte	#5, objptr
008e8                 | ' colors[9] := c_lightblue
008e8     01 B8 05 F1 | 	add	objptr, #1
008ec     DC F6 48 FC | 	wrbyte	#123, objptr
008f0                 | ' colors[$A]:= c_lightgreen
008f0     01 B8 05 F1 | 	add	objptr, #1
008f4     DC 96 49 FC | 	wrbyte	#203, objptr
008f8                 | ' colors[$B]:= c_lightcyan
008f8     01 B8 05 F1 | 	add	objptr, #1
008fc     DC 36 49 FC | 	wrbyte	#155, objptr
00900                 | ' colors[$C]:= c_lightred
00900     01 B8 05 F1 | 	add	objptr, #1
00904     DC 56 48 FC | 	wrbyte	#43, objptr
00908                 | ' colors[$D]:= c_lightmagenta
00908     01 B8 05 F1 | 	add	objptr, #1
0090c     DC 96 48 FC | 	wrbyte	#75, objptr
00910                 | ' colors[$E]:= c_yellow
00910     01 B8 05 F1 | 	add	objptr, #1
00914     DC D4 49 FC | 	wrbyte	#234, objptr
00918                 | ' colors[$F]:= c_white
00918     01 B8 05 F1 | 	add	objptr, #1
0091c     DC 1E 48 FC | 	wrbyte	#15, objptr
00920     17 00 00 FF 
00924     A3 B9 85 F1 | 	sub	objptr, ##12195
00928                 | ' 
00928                 | ' ' set timings
00928                 | ' ' We can have 1140,1026 or 912 pixes per line
00928                 | ' 
00928                 | ' setmode(mode)
00928     0C 00 00 FF 
0092c     00 BC 85 F1 | 	sub	ptr__dat__, ##6144
00930     44 21 B0 FD | 	call	#_setmode
00934                 | ' 
00934                 | ' 
00934                 | ' 
00934                 | '   {{
00934                 | '     }}
00934                 | ' 
00934                 | ' cmd1:=257 ' set idle
00934     17 00 00 FF 
00938     DC B9 05 F1 | 	add	objptr, ##12252
0093c     DC 02 6A FC | 	wrlong	#257, objptr
00940     17 00 00 FF 
00944     DC B9 85 F1 | 	sub	objptr, ##12252
00948                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00948     0E 00 00 FF 
0094c     00 BC 05 F1 | 	add	ptr__dat__, ##7168
00950     DE D2 01 F6 | 	mov	arg02, ptr__dat__
00954     0E 00 00 FF 
00958     00 BC 85 F1 | 	sub	ptr__dat__, ##7168
0095c     DC D4 01 F6 | 	mov	arg03, objptr
00960     10 D0 05 F6 | 	mov	arg01, #16
00964     28 D4 61 FD | 	setq	arg03
00968     E9 D0 F1 FC | 	coginit	arg01, arg02 wc
0096c     01 D0 65 C6 |  if_b	neg	arg01, #1
00970     E8 BE 01 F6 | 	mov	result1, arg01
00974     DF 10 02 F6 | 	mov	local15, result1
00978     24 B8 05 F1 | 	add	objptr, #36
0097c     DC 10 62 FC | 	wrlong	local15, objptr
00980     24 B8 85 F1 | 	sub	objptr, #36
00984                 | ' waitms(20)
00984     14 D0 05 F6 | 	mov	arg01, #20
00988     14 12 06 F6 | 	mov	local16, #20
0098c     14 14 06 FB | 	rdlong	local17, #20
00990     84 F6 9F FE | 	loc	pa,	#(@LR__0002-@LR__0001)
00994     93 00 A0 FD | 	call	#FCACHE_LOAD_
00998                 | LR__0001
00998     01 00 00 FF 
0099c     E8 13 5E F2 | 	cmps	local16, ##1000 wcz
009a0     1F 14 62 1D |  if_a	waitx	local17
009a4     01 00 00 1F 
009a8     E8 13 86 11 |  if_a	sub	local16, ##1000
009ac     E8 FF 9F 1D |  if_a	jmp	#LR__0001
009b0                 | LR__0002
009b0     0C BA 05 F1 | 	add	ptr___system__dat__, #12
009b4     DD 16 0A FB | 	rdlong	local18, ptr___system__dat__ wz
009b8     0C BA 85 F1 | 	sub	ptr___system__dat__, #12
009bc     20 00 90 5D |  if_ne	jmp	#LR__0003
009c0     0A 87 02 F6 | 	mov	muldiva_, local17
009c4     01 00 00 FF 
009c8     E8 89 06 F6 | 	mov	muldivb_, ##1000
009cc     CC 00 A0 FD | 	call	#unsdivide_
009d0     44 17 02 F6 | 	mov	local18, muldivb_
009d4     0C BA 05 F1 | 	add	ptr___system__dat__, #12
009d8     DD 88 62 FC | 	wrlong	muldivb_, ptr___system__dat__
009dc     0C BA 85 F1 | 	sub	ptr___system__dat__, #12
009e0                 | LR__0003
009e0     00 12 5E F2 | 	cmps	local16, #0 wcz
009e4     0B 13 02 1D |  if_a	qmul	local16, local18
009e8     18 D0 61 1D |  if_a	getqx	arg01
009ec     1F D0 61 1D |  if_a	waitx	arg01
009f0                 | ' cls(c_green,c_black)
009f0     C7 D0 05 F6 | 	mov	arg01, #199
009f4     00 D2 05 F6 | 	mov	arg02, #0
009f8     04 1D B0 FD | 	call	#_cls
009fc                 | ' setwritecolors(c_green,c_black)
009fc                 | ' 
009fc                 | ' ''---------- Set colors for write and writeln
009fc                 | ' 
009fc                 | ' write_color:=ff
009fc     17 00 00 FF 
00a00     8C B9 05 F1 | 	add	objptr, ##12172
00a04     DC 8E 69 FC | 	wrlong	#199, objptr
00a08                 | ' write_background:=bb
00a08     04 B8 05 F1 | 	add	objptr, #4
00a0c     DC 00 68 FC | 	wrlong	#0, objptr
00a10                 | ' 
00a10                 | ' return cog
00a10     17 00 00 FF 
00a14     6C B9 85 F1 | 	sub	objptr, ##12140
00a18     DC BE 01 FB | 	rdlong	result1, objptr
00a1c     24 B8 85 F1 | 	sub	objptr, #36
00a20                 | ' 
00a20                 | ' 
00a20                 | ' 
00a20                 | ' 
00a20                 | ' 
00a20                 | ' j:=0
00a20                 | ' 
00a20                 | ' repeat
00a20                 | LR__0004
00a20                 | ' 
00a20                 | '   cursoroff()
00a20                 | ' 
00a20                 | ' ''---------- Switch the cursor on
00a20                 | ' 
00a20                 | ' cursor_sh-=16
00a20     17 00 00 FF 
00a24     8A B9 05 F1 | 	add	objptr, ##12170
00a28     DC 18 C2 FA | 	rdbyte	local19, objptr
00a2c     10 18 86 F1 | 	sub	local19, #16
00a30     DC 18 42 FC | 	wrbyte	local19, objptr
00a34     17 00 00 FF 
00a38     8A B9 85 F1 | 	sub	objptr, ##12170
00a3c                 | '   cls(151,145)
00a3c     97 D0 05 F6 | 	mov	arg01, #151
00a40     91 D2 05 F6 | 	mov	arg02, #145
00a44     B8 1C B0 FD | 	call	#_cls
00a48                 | '   waitvbl(60)
00a48     3C D0 05 F6 | 	mov	arg01, #60
00a4c     84 17 B0 FD | 	call	#_waitvbl
00a50                 | ' 
00a50                 | '   setbordercolors (0,0,0)
00a50     00 D0 05 F6 | 	mov	arg01, #0
00a54     00 D2 05 F6 | 	mov	arg02, #0
00a58     00 D4 05 F6 | 	mov	arg03, #0
00a5c     3C 18 B0 FD | 	call	#_setbordercolors
00a60                 | '   waitvbl(100)
00a60     64 D0 05 F6 | 	mov	arg01, #100
00a64     6C 17 B0 FD | 	call	#_waitvbl
00a68                 | ' 
00a68                 | '   outtextxy (50-(strsize(s1)>>1),10,s1)
00a68     FA D0 01 F6 | 	mov	arg01, local01
00a6c     00 1A 06 F6 | 	mov	local20, #0
00a70     9C F5 9F FE | 	loc	pa,	#(@LR__0006-@LR__0005)
00a74     93 00 A0 FD | 	call	#FCACHE_LOAD_
00a78                 | LR__0005
00a78     E8 18 CA FA | 	rdbyte	local19, arg01 wz
00a7c     01 1A 06 51 |  if_ne	add	local20, #1
00a80     01 D0 05 51 |  if_ne	add	arg01, #1
00a84     F0 FF 9F 5D |  if_ne	jmp	#LR__0005
00a88                 | LR__0006
00a88     0D BF 01 F6 | 	mov	result1, local20
00a8c     DF 1C 02 F6 | 	mov	local21, result1
00a90     01 1C 46 F0 | 	shr	local21, #1
00a94     32 D0 05 F6 | 	mov	arg01, #50
00a98     0E D1 81 F1 | 	sub	arg01, local21
00a9c     0A D2 05 F6 | 	mov	arg02, #10
00aa0     FA D4 01 F6 | 	mov	arg03, local01
00aa4     D0 18 B0 FD | 	call	#_outtextxy
00aa8                 | '   waitvbl(50)
00aa8     32 D0 05 F6 | 	mov	arg01, #50
00aac     24 17 B0 FD | 	call	#_waitvbl
00ab0                 | ' 
00ab0                 | '   outtextxy (50-(strsize(s2)>>1),12,s2)
00ab0     FB D0 01 F6 | 	mov	arg01, local02
00ab4     00 1A 06 F6 | 	mov	local20, #0
00ab8     54 F5 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00abc     93 00 A0 FD | 	call	#FCACHE_LOAD_
00ac0                 | LR__0007
00ac0     E8 18 CA FA | 	rdbyte	local19, arg01 wz
00ac4     01 1A 06 51 |  if_ne	add	local20, #1
00ac8     01 D0 05 51 |  if_ne	add	arg01, #1
00acc     F0 FF 9F 5D |  if_ne	jmp	#LR__0007
00ad0                 | LR__0008
00ad0     0D BF 01 F6 | 	mov	result1, local20
00ad4     DF 1C 02 F6 | 	mov	local21, result1
00ad8     01 1C 46 F0 | 	shr	local21, #1
00adc     32 D0 05 F6 | 	mov	arg01, #50
00ae0     0E D1 81 F1 | 	sub	arg01, local21
00ae4     FB D4 01 F6 | 	mov	arg03, local02
00ae8     0C D2 05 F6 | 	mov	arg02, #12
00aec     88 18 B0 FD | 	call	#_outtextxy
00af0                 | '   waitvbl(50)
00af0     32 D0 05 F6 | 	mov	arg01, #50
00af4     DC 16 B0 FD | 	call	#_waitvbl
00af8                 | ' 
00af8                 | '   repeat  k from 0 to 49
00af8     32 1E 06 F6 | 	mov	local22, #50
00afc                 | LR__0009
00afc                 | '     repeat i from 0 to 99
00afc     00 20 06 F6 | 	mov	local23, #0
00b00                 | LR__0010
00b00                 | '       setfontcolor (i,12,40)
00b00     10 D1 01 F6 | 	mov	arg01, local23
00b04     0C D2 05 F6 | 	mov	arg02, #12
00b08     28 D4 05 F6 | 	mov	arg03, #40
00b0c     C0 17 B0 FD | 	call	#_setfontcolor
00b10     01 20 06 F1 | 	add	local23, #1
00b14     64 20 5E F2 | 	cmps	local23, #100 wcz
00b18     E4 FF 9F CD |  if_b	jmp	#LR__0010
00b1c                 | '     waitvbl(10)
00b1c     0A D0 05 F6 | 	mov	arg01, #10
00b20     B0 16 B0 FD | 	call	#_waitvbl
00b24                 | '     repeat i from 0 to 99
00b24     00 20 06 F6 | 	mov	local23, #0
00b28                 | LR__0011
00b28                 | '       setfontcolor (i,12,235)
00b28     10 D1 01 F6 | 	mov	arg01, local23
00b2c     0C D2 05 F6 | 	mov	arg02, #12
00b30     EB D4 05 F6 | 	mov	arg03, #235
00b34     98 17 B0 FD | 	call	#_setfontcolor
00b38     01 20 06 F1 | 	add	local23, #1
00b3c     64 20 5E F2 | 	cmps	local23, #100 wcz
00b40     E4 FF 9F CD |  if_b	jmp	#LR__0011
00b44                 | '     waitvbl(10)
00b44     0A D0 05 F6 | 	mov	arg01, #10
00b48     88 16 B0 FD | 	call	#_waitvbl
00b4c     EB 1F 6E FB | 	djnz	local22, #LR__0009
00b50                 | '   repeat j from 0 to 29
00b50     1E 22 06 F6 | 	mov	local24, #30
00b54                 | LR__0012
00b54                 | '     scrolldown()
00b54     84 1C B0 FD | 	call	#_scrolldown
00b58                 | '     waitvbl(2)
00b58     02 D0 05 F6 | 	mov	arg01, #2
00b5c     74 16 B0 FD | 	call	#_waitvbl
00b60     FC 23 6E FB | 	djnz	local24, #LR__0012
00b64                 | ' 
00b64                 | '   cls(c_green,0)
00b64     C7 D0 05 F6 | 	mov	arg01, #199
00b68     00 D2 05 F6 | 	mov	arg02, #0
00b6c     90 1B B0 FD | 	call	#_cls
00b70                 | ' 
00b70                 | '   setcursorpos(0,27)
00b70     1B D2 05 F6 | 	mov	arg02, #27
00b74                 | ' 
00b74                 | ' ''---------- Set the (x,y) position of cursor
00b74                 | ' 
00b74                 | ' cursor_x:=x
00b74     17 00 00 FF 
00b78     88 B9 05 F1 | 	add	objptr, ##12168
00b7c     DC 00 48 FC | 	wrbyte	#0, objptr
00b80                 | ' cursor_y:=y
00b80     01 B8 05 F1 | 	add	objptr, #1
00b84     DC 36 48 FC | 	wrbyte	#27, objptr
00b88     17 00 00 FF 
00b8c     89 B9 85 F1 | 	sub	objptr, ##12169
00b90                 | '   writeln(string("This is MS-DOS like font style..."))
00b90     18 00 00 FF 
00b94     CF D0 05 F6 | 	mov	arg01, ##@LR__0191
00b98     04 1B B0 FD | 	call	#_writeln
00b9c                 | '   writeln(string(" "))
00b9c     18 00 00 FF 
00ba0     F1 D0 05 F6 | 	mov	arg01, ##@LR__0192
00ba4     F8 1A B0 FD | 	call	#_writeln
00ba8                 | '   write(string("C:\>"))
00ba8     18 00 00 FF 
00bac     F3 D0 05 F6 | 	mov	arg01, ##@LR__0193
00bb0     48 19 B0 FD | 	call	#_write
00bb4                 | '   cursoron()
00bb4                 | ' 
00bb4                 | ' ''---------- Switch the cursor on
00bb4                 | ' 
00bb4                 | ' cursor_sh+=16
00bb4     17 00 00 FF 
00bb8     8A B9 05 F1 | 	add	objptr, ##12170
00bbc     DC 18 C2 FA | 	rdbyte	local19, objptr
00bc0     10 18 06 F1 | 	add	local19, #16
00bc4     DC 18 42 FC | 	wrbyte	local19, objptr
00bc8     17 00 00 FF 
00bcc     8A B9 85 F1 | 	sub	objptr, ##12170
00bd0                 | ' 
00bd0                 | '   waitvbl(600)
00bd0     01 00 00 FF 
00bd4     58 D0 05 F6 | 	mov	arg01, ##600
00bd8     F8 15 B0 FD | 	call	#_waitvbl
00bdc                 | ' 
00bdc                 | '   writeln(string(" "))
00bdc     18 00 00 FF 
00be0     F8 D0 05 F6 | 	mov	arg01, ##@LR__0194
00be4     B8 1A B0 FD | 	call	#_writeln
00be8                 | '   writeln(string(" "))
00be8     18 00 00 FF 
00bec     FA D0 05 F6 | 	mov	arg01, ##@LR__0195
00bf0     AC 1A B0 FD | 	call	#_writeln
00bf4                 | ' 
00bf4                 | ' 
00bf4                 | '   write(string(" "))
00bf4     18 00 00 FF 
00bf8     FC D0 05 F6 | 	mov	arg01, ##@LR__0196
00bfc     FC 18 B0 FD | 	call	#_write
00c00     00 24 06 F6 | 	mov	local25, #0
00c04     10 22 06 F6 | 	mov	local24, #16
00c08                 | LR__0013
00c08                 | '     write(string("        "))
00c08     18 00 00 FF 
00c0c     FE D0 05 F6 | 	mov	arg01, ##@LR__0197
00c10     E8 18 B0 FD | 	call	#_write
00c14     00 20 06 F6 | 	mov	local23, #0
00c18                 | LR__0014
00c18     12 27 02 F6 | 	mov	local26, local25
00c1c     10 27 0A F1 | 	add	local26, local23 wz
00c20                 | '       teststring[0]:=16*j+i
00c20     17 00 00 FF 
00c24     E8 B9 05 F1 | 	add	objptr, ##12264
00c28     DC 26 42 FC | 	wrbyte	local26, objptr
00c2c     17 00 00 FF 
00c30     E8 B9 85 F1 | 	sub	objptr, ##12264
00c34                 | '       if (16*j+i)==0
00c34                 | '         teststring[0]:=32
00c34     17 00 00 AF 
00c38     E8 B9 05 A1 |  if_e	add	objptr, ##12264
00c3c     DC 40 48 AC |  if_e	wrbyte	#32, objptr
00c40     17 00 00 AF 
00c44     E8 B9 85 A1 |  if_e	sub	objptr, ##12264
00c48                 | '       teststring[1]:=0
00c48     17 00 00 FF 
00c4c     E9 B9 05 F1 | 	add	objptr, ##12265
00c50     DC 00 48 FC | 	wrbyte	#0, objptr
00c54     17 00 00 FF 
00c58     E9 B9 85 F1 | 	sub	objptr, ##12265
00c5c                 | '       write(inttohex(16*j+i,2))
00c5c     13 D1 01 F6 | 	mov	arg01, local26
00c60     02 D2 05 F6 | 	mov	arg02, #2
00c64     28 1D B0 FD | 	call	#_inttohex
00c68     DF D0 01 F6 | 	mov	arg01, result1
00c6c     8C 18 B0 FD | 	call	#_write
00c70                 | '       write(string(" "))
00c70     18 00 00 FF 
00c74     07 D1 05 F6 | 	mov	arg01, ##@LR__0198
00c78     80 18 B0 FD | 	call	#_write
00c7c     17 00 00 FF 
00c80     E8 B9 05 F1 | 	add	objptr, ##12264
00c84     DC D0 01 F6 | 	mov	arg01, objptr
00c88     17 00 00 FF 
00c8c     E8 B9 85 F1 | 	sub	objptr, ##12264
00c90                 | '       write(@teststring)
00c90     68 18 B0 FD | 	call	#_write
00c94                 | '       write(string(","))
00c94     18 00 00 FF 
00c98     09 D1 05 F6 | 	mov	arg01, ##@LR__0199
00c9c     5C 18 B0 FD | 	call	#_write
00ca0     01 20 06 F1 | 	add	local23, #1
00ca4     10 20 5E F2 | 	cmps	local23, #16 wcz
00ca8     6C FF 9F CD |  if_b	jmp	#LR__0014
00cac                 | '     writeln(string(" "))
00cac     18 00 00 FF 
00cb0     0B D1 05 F6 | 	mov	arg01, ##@LR__0200
00cb4     E8 19 B0 FD | 	call	#_writeln
00cb8                 | '     waitvbl(2)
00cb8     02 D0 05 F6 | 	mov	arg01, #2
00cbc     14 15 B0 FD | 	call	#_waitvbl
00cc0     10 24 06 F1 | 	add	local25, #16
00cc4     D0 23 6E FB | 	djnz	local24, #LR__0013
00cc8                 | ' 
00cc8                 | '   waitvbl(1200)
00cc8     02 00 00 FF 
00ccc     B0 D0 05 F6 | 	mov	arg01, ##1200
00cd0     00 15 B0 FD | 	call	#_waitvbl
00cd4                 | ' 
00cd4                 | '   setmode(0)
00cd4     00 D0 05 F6 | 	mov	arg01, #0
00cd8     9C 1D B0 FD | 	call	#_setmode
00cdc                 | '   defchar(0,2,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
00cdc     00 D0 05 F6 | 	mov	arg01, #0
00ce0     00 D4 05 F6 | 	mov	arg03, #0
00ce4     FF D6 05 F6 | 	mov	arg04, #255
00ce8     00 D8 05 F6 | 	mov	arg05, #0
00cec     00 DA 05 F6 | 	mov	arg06, #0
00cf0     00 DC 05 F6 | 	mov	arg07, #0
00cf4     00 DE 05 F6 | 	mov	arg08, #0
00cf8     00 E0 05 F6 | 	mov	arg09, #0
00cfc     00 E2 05 F6 | 	mov	arg10, #0
00d00     00 E4 05 F6 | 	mov	arg11, #0
00d04     00 E6 05 F6 | 	mov	arg12, #0
00d08     00 E8 05 F6 | 	mov	arg13, #0
00d0c     00 EA 05 F6 | 	mov	arg14, #0
00d10     00 EC 05 F6 | 	mov	arg15, #0
00d14     00 EE 05 F6 | 	mov	arg16, #0
00d18     00 F0 05 F6 | 	mov	arg17, #0
00d1c     00 F2 05 F6 | 	mov	arg18, #0
00d20     DE BE 01 F6 | 	mov	result1, ptr__dat__
00d24     20 BE 05 F1 | 	add	result1, #32
00d28                 | ' 
00d28                 | ' s:=@st_font+fontnum2+char2*16
00d28                 | ' byte[s+00]:=b0
00d28     DF 00 48 FC | 	wrbyte	#0, result1
00d2c     DF 28 02 F6 | 	mov	local27, result1
00d30     01 28 06 F1 | 	add	local27, #1
00d34                 | ' byte[s+01]:=b1
00d34     14 FF 49 FC | 	wrbyte	#255, local27
00d38     DF 2A 02 F6 | 	mov	local28, result1
00d3c     02 2A 06 F1 | 	add	local28, #2
00d40                 | ' byte[s+02]:=b2
00d40     15 01 48 FC | 	wrbyte	#0, local28
00d44     DF 2C 02 F6 | 	mov	local29, result1
00d48     03 2C 06 F1 | 	add	local29, #3
00d4c                 | ' byte[s+03]:=b3
00d4c     16 01 48 FC | 	wrbyte	#0, local29
00d50     DF 2E 02 F6 | 	mov	local30, result1
00d54     04 2E 06 F1 | 	add	local30, #4
00d58                 | ' byte[s+04]:=b4
00d58     17 01 48 FC | 	wrbyte	#0, local30
00d5c     DF 30 02 F6 | 	mov	local31, result1
00d60     05 30 06 F1 | 	add	local31, #5
00d64                 | ' byte[s+05]:=b5
00d64     18 01 48 FC | 	wrbyte	#0, local31
00d68     DF 32 02 F6 | 	mov	local32, result1
00d6c     06 32 06 F1 | 	add	local32, #6
00d70                 | ' byte[s+06]:=b6
00d70     19 01 48 FC | 	wrbyte	#0, local32
00d74     DF 34 02 F6 | 	mov	local33, result1
00d78     07 34 06 F1 | 	add	local33, #7
00d7c                 | ' byte[s+07]:=b7
00d7c     1A 01 48 FC | 	wrbyte	#0, local33
00d80     DF 36 02 F6 | 	mov	local34, result1
00d84     08 36 06 F1 | 	add	local34, #8
00d88                 | ' byte[s+08]:=b8
00d88     1B 01 48 FC | 	wrbyte	#0, local34
00d8c     DF 38 02 F6 | 	mov	local35, result1
00d90     09 38 06 F1 | 	add	local35, #9
00d94                 | ' byte[s+09]:=b9
00d94     1C 01 48 FC | 	wrbyte	#0, local35
00d98     DF 3A 02 F6 | 	mov	local36, result1
00d9c     0A 3A 06 F1 | 	add	local36, #10
00da0                 | ' byte[s+10]:=b10
00da0     1D 01 48 FC | 	wrbyte	#0, local36
00da4     DF 3C 02 F6 | 	mov	local37, result1
00da8     0B 3C 06 F1 | 	add	local37, #11
00dac                 | ' byte[s+11]:=b11
00dac     1E 01 48 FC | 	wrbyte	#0, local37
00db0     DF 3E 02 F6 | 	mov	local38, result1
00db4     0C 3E 06 F1 | 	add	local38, #12
00db8                 | ' byte[s+12]:=b12
00db8     1F 01 48 FC | 	wrbyte	#0, local38
00dbc     DF 40 02 F6 | 	mov	local39, result1
00dc0     0D 40 06 F1 | 	add	local39, #13
00dc4                 | ' byte[s+13]:=b13
00dc4     20 01 48 FC | 	wrbyte	#0, local39
00dc8     DF 42 02 F6 | 	mov	local40, result1
00dcc     0E 42 06 F1 | 	add	local40, #14
00dd0                 | ' byte[s+14]:=b14
00dd0     21 01 48 FC | 	wrbyte	#0, local40
00dd4     DF 44 02 F6 | 	mov	local41, result1
00dd8     0F 44 06 F1 | 	add	local41, #15
00ddc                 | ' byte[s+15]:=b15
00ddc     22 01 48 FC | 	wrbyte	#0, local41
00de0                 | '   fontnum:=0
00de0     17 00 00 FF 
00de4     E4 B9 05 F1 | 	add	objptr, ##12260
00de8     DC 00 68 FC | 	wrlong	#0, objptr
00dec     17 00 00 FF 
00df0     E4 B9 85 F1 | 	sub	objptr, ##12260
00df4                 | ' 
00df4                 | '   cls(0,15)
00df4     0F D2 05 F6 | 	mov	arg02, #15
00df8     04 19 B0 FD | 	call	#_cls
00dfc                 | '   setbordercolors(0,0,0)
00dfc     00 D0 05 F6 | 	mov	arg01, #0
00e00     00 D2 05 F6 | 	mov	arg02, #0
00e04     00 D4 05 F6 | 	mov	arg03, #0
00e08     90 14 B0 FD | 	call	#_setbordercolors
00e0c                 | '   cursoroff()
00e0c                 | ' 
00e0c                 | ' ''---------- Switch the cursor on
00e0c                 | ' 
00e0c                 | ' cursor_sh-=16
00e0c     17 00 00 FF 
00e10     8A B9 05 F1 | 	add	objptr, ##12170
00e14     DC 18 C2 FA | 	rdbyte	local19, objptr
00e18     10 18 86 F1 | 	sub	local19, #16
00e1c     DC 18 42 FC | 	wrbyte	local19, objptr
00e20     17 00 00 FF 
00e24     8A B9 85 F1 | 	sub	objptr, ##12170
00e28                 | '   outtextxy(0,0,string("  File    Options    View    Special"))
00e28     18 00 00 FF 
00e2c     0D D5 05 F6 | 	mov	arg03, ##@LR__0201
00e30     00 D0 05 F6 | 	mov	arg01, #0
00e34     00 D2 05 F6 | 	mov	arg02, #0
00e38     3C 15 B0 FD | 	call	#_outtextxy
00e3c     17 00 00 FF 
00e40     E8 B9 05 F1 | 	add	objptr, ##12264
00e44     DC 46 02 F6 | 	mov	local42, objptr
00e48     17 00 00 FF 
00e4c     E8 B9 85 F1 | 	sub	objptr, ##12264
00e50     B8 F1 9F FE | 	loc	pa,	#(@LR__0017-@LR__0015)
00e54     93 00 A0 FD | 	call	#FCACHE_LOAD_
00e58                 | LR__0015
00e58     64 04 DC FC | 	rep	@LR__0018, #100
00e5c                 | LR__0016
00e5c                 | '     teststring[i]:=2
00e5c     23 05 48 FC | 	wrbyte	#2, local42
00e60     01 46 06 F1 | 	add	local42, #1
00e64                 | LR__0017
00e64                 | LR__0018
00e64                 | '   teststring[100]:=0
00e64     18 00 00 FF 
00e68     4C B8 05 F1 | 	add	objptr, ##12364
00e6c     DC 00 48 FC | 	wrbyte	#0, objptr
00e70     64 B8 85 F1 | 	sub	objptr, #100
00e74     DC D4 01 F6 | 	mov	arg03, objptr
00e78     17 00 00 FF 
00e7c     E8 B9 85 F1 | 	sub	objptr, ##12264
00e80                 | '   outtextxy(0,1,@teststring)
00e80     00 D0 05 F6 | 	mov	arg01, #0
00e84     01 D2 05 F6 | 	mov	arg02, #1
00e88     EC 14 B0 FD | 	call	#_outtextxy
00e8c                 | '   teststring[0]:=10
00e8c     17 00 00 FF 
00e90     E8 B9 05 F1 | 	add	objptr, ##12264
00e94     DC 14 48 FC | 	wrbyte	#10, objptr
00e98     01 B8 05 F1 | 	add	objptr, #1
00e9c     DC 48 02 F6 | 	mov	local43, objptr
00ea0     17 00 00 FF 
00ea4     E9 B9 85 F1 | 	sub	objptr, ##12265
00ea8     60 F1 9F FE | 	loc	pa,	#(@LR__0021-@LR__0019)
00eac     93 00 A0 FD | 	call	#FCACHE_LOAD_
00eb0                 | LR__0019
00eb0     50 04 DC FC | 	rep	@LR__0022, #80
00eb4                 | LR__0020
00eb4                 | '     teststring[i]:=3
00eb4     24 07 48 FC | 	wrbyte	#3, local43
00eb8     01 48 06 F1 | 	add	local43, #1
00ebc                 | LR__0021
00ebc                 | LR__0022
00ebc                 | '   teststring[81]:=9
00ebc     18 00 00 FF 
00ec0     39 B8 05 F1 | 	add	objptr, ##12345
00ec4     DC 12 48 FC | 	wrbyte	#9, objptr
00ec8                 | '   teststring[82]:=0
00ec8     01 B8 05 F1 | 	add	objptr, #1
00ecc     DC 00 48 FC | 	wrbyte	#0, objptr
00ed0                 | ' 
00ed0                 | '   setcursorpos(8,5)
00ed0     05 D2 05 F6 | 	mov	arg02, #5
00ed4                 | ' 
00ed4                 | ' ''---------- Set the (x,y) position of cursor
00ed4                 | ' 
00ed4                 | ' cursor_x:=x
00ed4     B2 B8 85 F1 | 	sub	objptr, #178
00ed8     DC 10 48 FC | 	wrbyte	#8, objptr
00edc                 | ' cursor_y:=y
00edc     01 B8 05 F1 | 	add	objptr, #1
00ee0     DC 0A 48 FC | 	wrbyte	#5, objptr
00ee4     5F B8 05 F1 | 	add	objptr, #95
00ee8     DC D0 01 F6 | 	mov	arg01, objptr
00eec     17 00 00 FF 
00ef0     E8 B9 85 F1 | 	sub	objptr, ##12264
00ef4                 | '   writeln(@teststring)
00ef4     A8 17 B0 FD | 	call	#_writeln
00ef8     00 4A 06 F6 | 	mov	local44, #0
00efc     08 22 06 F6 | 	mov	local24, #8
00f00                 | LR__0023
00f00                 | '     write(string("        "))
00f00     18 00 00 FF 
00f04     32 D1 05 F6 | 	mov	arg01, ##@LR__0202
00f08     F0 15 B0 FD | 	call	#_write
00f0c     00 20 06 F6 | 	mov	local23, #0
00f10                 | LR__0024
00f10     25 4D 02 F6 | 	mov	local45, local44
00f14     10 4D 0A F1 | 	add	local45, local23 wz
00f18                 | '       teststring[0]:=16*j+i
00f18     17 00 00 FF 
00f1c     E8 B9 05 F1 | 	add	objptr, ##12264
00f20     DC 4C 42 FC | 	wrbyte	local45, objptr
00f24     17 00 00 FF 
00f28     E8 B9 85 F1 | 	sub	objptr, ##12264
00f2c                 | '       if (16*j+i)==0
00f2c                 | '         teststring[0]:=32
00f2c     17 00 00 AF 
00f30     E8 B9 05 A1 |  if_e	add	objptr, ##12264
00f34     DC 40 48 AC |  if_e	wrbyte	#32, objptr
00f38     17 00 00 AF 
00f3c     E8 B9 85 A1 |  if_e	sub	objptr, ##12264
00f40                 | '       teststring[1]:=0
00f40     17 00 00 FF 
00f44     E9 B9 05 F1 | 	add	objptr, ##12265
00f48     DC 00 48 FC | 	wrbyte	#0, objptr
00f4c     17 00 00 FF 
00f50     E9 B9 85 F1 | 	sub	objptr, ##12265
00f54                 | '       write(inttohex(16*j+i,2))
00f54     26 D1 01 F6 | 	mov	arg01, local45
00f58     02 D2 05 F6 | 	mov	arg02, #2
00f5c     30 1A B0 FD | 	call	#_inttohex
00f60     DF D0 01 F6 | 	mov	arg01, result1
00f64     94 15 B0 FD | 	call	#_write
00f68                 | '       write(string(" "))
00f68     18 00 00 FF 
00f6c     3C D1 05 F6 | 	mov	arg01, ##@LR__0203
00f70     88 15 B0 FD | 	call	#_write
00f74     17 00 00 FF 
00f78     E8 B9 05 F1 | 	add	objptr, ##12264
00f7c     DC D0 01 F6 | 	mov	arg01, objptr
00f80     17 00 00 FF 
00f84     E8 B9 85 F1 | 	sub	objptr, ##12264
00f88                 | '       write(@teststring)
00f88     70 15 B0 FD | 	call	#_write
00f8c                 | '       write(string(","))
00f8c     18 00 00 FF 
00f90     3E D1 05 F6 | 	mov	arg01, ##@LR__0204
00f94     64 15 B0 FD | 	call	#_write
00f98     01 20 06 F1 | 	add	local23, #1
00f9c     10 20 5E F2 | 	cmps	local23, #16 wcz
00fa0     6C FF 9F CD |  if_b	jmp	#LR__0024
00fa4                 | '     writeln(string(""))
00fa4     18 00 00 FF 
00fa8     40 D1 05 F6 | 	mov	arg01, ##@LR__0205
00fac     F0 16 B0 FD | 	call	#_writeln
00fb0                 | '     waitvbl(2)
00fb0     02 D0 05 F6 | 	mov	arg01, #2
00fb4     1C 12 B0 FD | 	call	#_waitvbl
00fb8     10 4A 06 F1 | 	add	local44, #16
00fbc     D0 23 6E FB | 	djnz	local24, #LR__0023
00fc0                 | '   teststring[0]:=$C
00fc0     17 00 00 FF 
00fc4     E8 B9 05 F1 | 	add	objptr, ##12264
00fc8     DC 18 48 FC | 	wrbyte	#12, objptr
00fcc     01 B8 05 F1 | 	add	objptr, #1
00fd0     DC 4E 02 F6 | 	mov	local46, objptr
00fd4     17 00 00 FF 
00fd8     E9 B9 85 F1 | 	sub	objptr, ##12265
00fdc     2C F0 9F FE | 	loc	pa,	#(@LR__0027-@LR__0025)
00fe0     93 00 A0 FD | 	call	#FCACHE_LOAD_
00fe4                 | LR__0025
00fe4     50 04 DC FC | 	rep	@LR__0028, #80
00fe8                 | LR__0026
00fe8                 | '     teststring[i]:=3
00fe8     27 07 48 FC | 	wrbyte	#3, local46
00fec     01 4E 06 F1 | 	add	local46, #1
00ff0                 | LR__0027
00ff0                 | LR__0028
00ff0                 | '   teststring[81]:=$B
00ff0     18 00 00 FF 
00ff4     39 B8 05 F1 | 	add	objptr, ##12345
00ff8     DC 16 48 FC | 	wrbyte	#11, objptr
00ffc                 | '   teststring[82]:=0
00ffc     01 B8 05 F1 | 	add	objptr, #1
01000     DC 00 48 FC | 	wrbyte	#0, objptr
01004                 | '   setcursorpos(8,14)
01004     0E D2 05 F6 | 	mov	arg02, #14
01008                 | ' 
01008                 | ' ''---------- Set the (x,y) position of cursor
01008                 | ' 
01008                 | ' cursor_x:=x
01008     B2 B8 85 F1 | 	sub	objptr, #178
0100c     DC 10 48 FC | 	wrbyte	#8, objptr
01010                 | ' cursor_y:=y
01010     01 B8 05 F1 | 	add	objptr, #1
01014     DC 1C 48 FC | 	wrbyte	#14, objptr
01018     5F B8 05 F1 | 	add	objptr, #95
0101c     DC D0 01 F6 | 	mov	arg01, objptr
01020     17 00 00 FF 
01024     E8 B9 85 F1 | 	sub	objptr, ##12264
01028                 | '   writeln(@teststring)
01028     74 16 B0 FD | 	call	#_writeln
0102c                 | ' 
0102c                 | '   writeln(string(" "))
0102c     18 00 00 FF 
01030     42 D1 05 F6 | 	mov	arg01, ##@LR__0206
01034     68 16 B0 FD | 	call	#_writeln
01038                 | '   writeln(string("     ... but Atari ST-like mono font can also be used."))
01038     18 00 00 FF 
0103c     44 D1 05 F6 | 	mov	arg01, ##@LR__0207
01040     5C 16 B0 FD | 	call	#_writeln
01044                 | '   writeln(string("         We also switched the graphics mode to PAL like 50 Hz, 624 lines."))
01044     18 00 00 FF 
01048     7B D1 05 F6 | 	mov	arg01, ##@LR__0208
0104c     50 16 B0 FD | 	call	#_writeln
01050                 | '   writeln(string(" "))
01050     18 00 00 FF 
01054     C5 D1 05 F6 | 	mov	arg01, ##@LR__0209
01058     44 16 B0 FD | 	call	#_writeln
0105c                 | '   setwritecolors(c_red,c_white)
0105c     0F D2 05 F6 | 	mov	arg02, #15
01060                 | ' 
01060                 | ' ''---------- Set colors for write and writeln
01060                 | ' 
01060                 | ' write_color:=ff
01060     17 00 00 FF 
01064     8C B9 05 F1 | 	add	objptr, ##12172
01068     DC 4E 68 FC | 	wrlong	#39, objptr
0106c                 | ' write_background:=bb
0106c     04 B8 05 F1 | 	add	objptr, #4
01070     DC 1E 68 FC | 	wrlong	#15, objptr
01074     17 00 00 FF 
01078     90 B9 85 F1 | 	sub	objptr, ##12176
0107c                 | '   writeln(string("         Although the font is mono style, we are still in the color mode here."))
0107c     18 00 00 FF 
01080     C7 D1 05 F6 | 	mov	arg01, ##@LR__0210
01084     18 16 B0 FD | 	call	#_writeln
01088                 | ' 
01088                 | ' 
01088                 | ' 
01088                 | '   waitvbl(2000)
01088     03 00 00 FF 
0108c     D0 D1 05 F6 | 	mov	arg01, ##2000
01090     40 11 B0 FD | 	call	#_waitvbl
01094                 | ' 
01094                 | ' '-----------------
01094                 | '   setmode(256)
01094     00 D1 05 F6 | 	mov	arg01, #256
01098     DC 19 B0 FD | 	call	#_setmode
0109c                 | '   fontnum:=2048
0109c     17 00 00 FF 
010a0     E4 B9 05 F1 | 	add	objptr, ##12260
010a4     04 00 80 FF 
010a8     DC 00 68 FC | 	wrlong	##2048, objptr
010ac     17 00 00 FF 
010b0     E4 B9 85 F1 | 	sub	objptr, ##12260
010b4                 | '   setscreencolors (151,145)
010b4     97 D0 05 F6 | 	mov	arg01, #151
010b8     91 D2 05 F6 | 	mov	arg02, #145
010bc     98 11 B0 FD | 	call	#_setscreencolors
010c0     A8 B8 05 F1 | 	add	objptr, #168
010c4     DC 50 02 F6 | 	mov	local47, objptr
010c8     00 20 06 F6 | 	mov	local23, #0
010cc     A8 B8 85 F1 | 	sub	objptr, #168
010d0     58 EF 9F FE | 	loc	pa,	#(@LR__0030-@LR__0029)
010d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
010d8                 | LR__0029
010d8     28 53 02 FB | 	rdlong	local48, local47
010dc     FF 52 26 F5 | 	andn	local48, #255
010e0     10 55 02 F6 | 	mov	local49, local23
010e4     FF 54 06 F5 | 	and	local49, #255
010e8     2A 53 42 F5 | 	or	local48, local49
010ec                 | '     buf[i]:=(buf[i] &$FF_FF_FF_00) | (i & $FF)
010ec     28 53 62 FC | 	wrlong	local48, local47
010f0     01 20 06 F1 | 	add	local23, #1
010f4     04 50 06 F1 | 	add	local47, #4
010f8     05 00 00 FF 
010fc     B8 21 5E F2 | 	cmps	local23, ##3000 wcz
01100     D4 FF 9F CD |  if_b	jmp	#LR__0029
01104                 | LR__0030
01104                 | ' 
01104                 | '   waitvbl(100)
01104     64 D0 05 F6 | 	mov	arg01, #100
01108     C8 10 B0 FD | 	call	#_waitvbl
0110c                 | ' 
0110c                 | '   repeat j from 0 to 29
0110c     1E 22 06 F6 | 	mov	local24, #30
01110                 | LR__0031
01110                 | '     scrolldown()
01110     C8 16 B0 FD | 	call	#_scrolldown
01114                 | '     waitvbl(1)
01114     01 D0 05 F6 | 	mov	arg01, #1
01118     B8 10 B0 FD | 	call	#_waitvbl
0111c     FC 23 6E FB | 	djnz	local24, #LR__0031
01120                 | ' 
01120                 | '   cls(151,145)
01120     97 D0 05 F6 | 	mov	arg01, #151
01124     91 D2 05 F6 | 	mov	arg02, #145
01128     D4 15 B0 FD | 	call	#_cls
0112c                 | ' 
0112c                 | '   outtextxy (50-(strsize(s3)>>1),10,s3)
0112c     FC D0 01 F6 | 	mov	arg01, local03
01130     00 1A 06 F6 | 	mov	local20, #0
01134     D8 EE 9F FE | 	loc	pa,	#(@LR__0033-@LR__0032)
01138     93 00 A0 FD | 	call	#FCACHE_LOAD_
0113c                 | LR__0032
0113c     E8 18 CA FA | 	rdbyte	local19, arg01 wz
01140     01 1A 06 51 |  if_ne	add	local20, #1
01144     01 D0 05 51 |  if_ne	add	arg01, #1
01148     F0 FF 9F 5D |  if_ne	jmp	#LR__0032
0114c                 | LR__0033
0114c     0D BF 01 F6 | 	mov	result1, local20
01150     DF 1C 02 F6 | 	mov	local21, result1
01154     01 1C 46 F0 | 	shr	local21, #1
01158     32 D0 05 F6 | 	mov	arg01, #50
0115c     0E D1 81 F1 | 	sub	arg01, local21
01160     FC D4 01 F6 | 	mov	arg03, local03
01164     0A D2 05 F6 | 	mov	arg02, #10
01168     0C 12 B0 FD | 	call	#_outtextxy
0116c                 | '   waitvbl(20)
0116c     14 D0 05 F6 | 	mov	arg01, #20
01170     60 10 B0 FD | 	call	#_waitvbl
01174                 | '   repeat k from 0 to 20
01174     00 1E 06 F6 | 	mov	local22, #0
01178                 | LR__0034
01178                 | '     repeat i from 0 to 99
01178     00 20 06 F6 | 	mov	local23, #0
0117c                 | LR__0035
0117c     10 57 02 F6 | 	mov	local50, local23
01180     0F 57 02 F1 | 	add	local50, local22
01184     2B 59 52 F6 | 	abs	local51, local50 wc
01188     0F 58 06 F5 | 	and	local51, #15
0118c     2C 59 62 C6 |  if_b	neg	local51, local51
01190                 | '       j:=(i+k)//16
01190     2C 5B 02 F6 | 	mov	local52, local51
01194     17 00 00 FF 
01198     94 B9 05 F1 | 	add	objptr, ##12180
0119c     DC 5A 02 F1 | 	add	local52, objptr
011a0                 | '       setfontcolor(i,10,colors[j])
011a0     2D D5 C1 FA | 	rdbyte	arg03, local52
011a4     10 D1 01 F6 | 	mov	arg01, local23
011a8     0A D2 05 F6 | 	mov	arg02, #10
011ac     17 00 00 FF 
011b0     94 B9 85 F1 | 	sub	objptr, ##12180
011b4     18 11 B0 FD | 	call	#_setfontcolor
011b8     04 58 06 F1 | 	add	local51, #4
011bc     2C 59 52 F6 | 	abs	local51, local51 wc
011c0     0F 58 06 F5 | 	and	local51, #15
011c4     2C 59 62 C6 |  if_b	neg	local51, local51
011c8     17 00 00 FF 
011cc     94 B9 05 F1 | 	add	objptr, ##12180
011d0     DC 58 02 F1 | 	add	local51, objptr
011d4     2C 5D 02 F6 | 	mov	local53, local51
011d8                 | '       setbackcolor(i,10,colors[(j+4)//16])
011d8     2E D5 C1 FA | 	rdbyte	arg03, local53
011dc     10 D1 01 F6 | 	mov	arg01, local23
011e0     0A D2 05 F6 | 	mov	arg02, #10
011e4     17 00 00 FF 
011e8     94 B9 85 F1 | 	sub	objptr, ##12180
011ec     34 11 B0 FD | 	call	#_setbackcolor
011f0     01 20 06 F1 | 	add	local23, #1
011f4     64 20 5E F2 | 	cmps	local23, #100 wcz
011f8     80 FF 9F CD |  if_b	jmp	#LR__0035
011fc                 | '     waitvbl(10)
011fc     0A D0 05 F6 | 	mov	arg01, #10
01200     D0 0F B0 FD | 	call	#_waitvbl
01204     01 1E 06 F1 | 	add	local22, #1
01208     15 1E 5E F2 | 	cmps	local22, #21 wcz
0120c     68 FF 9F CD |  if_b	jmp	#LR__0034
01210                 | '   repeat i from 0 to 99
01210     00 20 06 F6 | 	mov	local23, #0
01214                 | LR__0036
01214                 | '     setfontcolor(i,10,153)
01214     10 D1 01 F6 | 	mov	arg01, local23
01218     0A D2 05 F6 | 	mov	arg02, #10
0121c     99 D4 05 F6 | 	mov	arg03, #153
01220     AC 10 B0 FD | 	call	#_setfontcolor
01224                 | '     setbackcolor(i,10,145)
01224     10 D1 01 F6 | 	mov	arg01, local23
01228     0A D2 05 F6 | 	mov	arg02, #10
0122c     91 D4 05 F6 | 	mov	arg03, #145
01230     F0 10 B0 FD | 	call	#_setbackcolor
01234     01 20 06 F1 | 	add	local23, #1
01238     64 20 5E F2 | 	cmps	local23, #100 wcz
0123c     D4 FF 9F CD |  if_b	jmp	#LR__0036
01240                 | ' 
01240                 | '   outtextxy (50-(strsize(s4)>>1),12,s4)
01240     FD D0 01 F6 | 	mov	arg01, local04
01244     00 1A 06 F6 | 	mov	local20, #0
01248     C4 ED 9F FE | 	loc	pa,	#(@LR__0038-@LR__0037)
0124c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01250                 | LR__0037
01250     E8 18 CA FA | 	rdbyte	local19, arg01 wz
01254     01 1A 06 51 |  if_ne	add	local20, #1
01258     01 D0 05 51 |  if_ne	add	arg01, #1
0125c     F0 FF 9F 5D |  if_ne	jmp	#LR__0037
01260                 | LR__0038
01260     0D BF 01 F6 | 	mov	result1, local20
01264     DF 1C 02 F6 | 	mov	local21, result1
01268     01 1C 46 F0 | 	shr	local21, #1
0126c     32 D0 05 F6 | 	mov	arg01, #50
01270     0E D1 81 F1 | 	sub	arg01, local21
01274     0C D2 05 F6 | 	mov	arg02, #12
01278     FD D4 01 F6 | 	mov	arg03, local04
0127c     F8 10 B0 FD | 	call	#_outtextxy
01280                 | '   waitvbl(20)
01280     14 D0 05 F6 | 	mov	arg01, #20
01284     4C 0F B0 FD | 	call	#_waitvbl
01288                 | '   outtextxy (50-(strsize(s5)>>1),14,s5)
01288     FE D0 01 F6 | 	mov	arg01, local05
0128c     00 1A 06 F6 | 	mov	local20, #0
01290     7C ED 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
01294     93 00 A0 FD | 	call	#FCACHE_LOAD_
01298                 | LR__0039
01298     E8 18 CA FA | 	rdbyte	local19, arg01 wz
0129c     01 1A 06 51 |  if_ne	add	local20, #1
012a0     01 D0 05 51 |  if_ne	add	arg01, #1
012a4     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
012a8                 | LR__0040
012a8     0D BF 01 F6 | 	mov	result1, local20
012ac     DF 1C 02 F6 | 	mov	local21, result1
012b0     01 1C 46 F0 | 	shr	local21, #1
012b4     32 D0 05 F6 | 	mov	arg01, #50
012b8     0E D1 81 F1 | 	sub	arg01, local21
012bc     FE D4 01 F6 | 	mov	arg03, local05
012c0     0E D2 05 F6 | 	mov	arg02, #14
012c4     B0 10 B0 FD | 	call	#_outtextxy
012c8                 | '   waitvbl(200)
012c8     C8 D0 05 F6 | 	mov	arg01, #200
012cc     04 0F B0 FD | 	call	#_waitvbl
012d0     A8 B8 05 F1 | 	add	objptr, #168
012d4     DC 5E 02 F6 | 	mov	local54, objptr
012d8     00 20 06 F6 | 	mov	local23, #0
012dc     A8 B8 85 F1 | 	sub	objptr, #168
012e0     4C ED 9F FE | 	loc	pa,	#(@LR__0042-@LR__0041)
012e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
012e8                 | LR__0041
012e8     2F 61 02 FB | 	rdlong	local55, local54
012ec     80 FF 7F FF 
012f0     00 60 06 F5 | 	and	local55, ##-65536
012f4     10 63 02 F6 | 	mov	local56, local23
012f8     FF 62 06 F5 | 	and	local56, #255
012fc     31 61 42 F5 | 	or	local55, local56
01300                 | '     buf[i]:=(buf[i] &$FF_FF_00_00) | (i & $FF)
01300     2F 61 62 FC | 	wrlong	local55, local54
01304     01 20 06 F1 | 	add	local23, #1
01308     04 5E 06 F1 | 	add	local54, #4
0130c     05 00 00 FF 
01310     B8 21 5E F2 | 	cmps	local23, ##3000 wcz
01314     D0 FF 9F CD |  if_b	jmp	#LR__0041
01318                 | LR__0042
01318                 | ' 
01318                 | '   waitvbl(100)
01318     64 D0 05 F6 | 	mov	arg01, #100
0131c     B4 0E B0 FD | 	call	#_waitvbl
01320                 | ' 
01320                 | '   repeat k from 0 to 99
01320     64 1E 06 F6 | 	mov	local22, #100
01324                 | LR__0043
01324                 | '     repeat i from 0 to 31
01324     00 20 06 F6 | 	mov	local23, #0
01328     28 ED 9F FE | 	loc	pa,	#(@LR__0045-@LR__0044)
0132c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01330                 | LR__0044
01330                 | '       setbordercolor(i,getrnd() & 255,getrnd() & 255,getrnd()& 255)
01330     1B 64 62 FD | 	getrnd	local57
01334     FF 64 06 F5 | 	and	local57, #255
01338     1B 66 62 FD | 	getrnd	local58
0133c     FF 66 06 F5 | 	and	local58, #255
01340     1B D6 61 FD | 	getrnd	arg04
01344     FF D6 05 F5 | 	and	arg04, #255
01348     10 D1 01 F6 | 	mov	arg01, local23
0134c     32 D3 01 F6 | 	mov	arg02, local57
01350     33 D5 01 F6 | 	mov	arg03, local58
01354     10 D2 65 F0 | 	shl	arg02, #16
01358     08 D4 65 F0 | 	shl	arg03, #8
0135c     EA D2 01 F1 | 	add	arg02, arg03
01360     EB D2 01 F1 | 	add	arg02, arg04
01364                 | ' 
01364                 | ' ''---------- Set the border color at line 0..31.
01364                 | ' ''---------- 0 is upper border, 31 is lower border, add #1 to the text line #
01364                 | ' 
01364                 | ' color:=r<<16+g<<8+b
01364     02 D0 65 F0 | 	shl	arg01, #2
01368     28 B8 05 F1 | 	add	objptr, #40
0136c     DC D0 01 F1 | 	add	arg01, objptr
01370                 | ' bordercolor[line]:=color
01370     E8 D2 61 FC | 	wrlong	arg02, arg01
01374     28 B8 85 F1 | 	sub	objptr, #40
01378     01 20 06 F1 | 	add	local23, #1
0137c     20 20 5E F2 | 	cmps	local23, #32 wcz
01380     AC FF 9F CD |  if_b	jmp	#LR__0044
01384                 | LR__0045
01384                 | '     repeat j from 0 to 29
01384     00 22 06 F6 | 	mov	local24, #0
01388                 | LR__0046
01388                 | '       repeat i from 0 to 99
01388     00 20 06 F6 | 	mov	local23, #0
0138c                 | LR__0047
0138c                 | '         setfontcolor(i,j,getrnd()&255)
0138c     1B BE 61 FD | 	getrnd	result1
01390     DF D4 01 F6 | 	mov	arg03, result1
01394     FF D4 05 F5 | 	and	arg03, #255
01398     10 D1 01 F6 | 	mov	arg01, local23
0139c     11 D3 01 F6 | 	mov	arg02, local24
013a0     2C 0F B0 FD | 	call	#_setfontcolor
013a4                 | '         setbackcolor(i,j,getrnd()&255)
013a4     11 D3 01 F6 | 	mov	arg02, local24
013a8     1B BE 61 FD | 	getrnd	result1
013ac     DF D4 01 F6 | 	mov	arg03, result1
013b0     FF D4 05 F5 | 	and	arg03, #255
013b4     10 D1 01 F6 | 	mov	arg01, local23
013b8     68 0F B0 FD | 	call	#_setbackcolor
013bc     01 20 06 F1 | 	add	local23, #1
013c0     64 20 5E F2 | 	cmps	local23, #100 wcz
013c4     C4 FF 9F CD |  if_b	jmp	#LR__0047
013c8     01 22 06 F1 | 	add	local24, #1
013cc     1E 22 5E F2 | 	cmps	local24, #30 wcz
013d0     B4 FF 9F CD |  if_b	jmp	#LR__0046
013d4                 | '     waitvbl(1)
013d4     01 D0 05 F6 | 	mov	arg01, #1
013d8     F8 0D B0 FD | 	call	#_waitvbl
013dc     D1 1F 6E FB | 	djnz	local22, #LR__0043
013e0                 | ' 
013e0                 | '   waitvbl(500)
013e0     F4 D1 05 F6 | 	mov	arg01, #500
013e4     EC 0D B0 FD | 	call	#_waitvbl
013e8                 | ' 
013e8                 | '   cls(151,145)
013e8     97 D0 05 F6 | 	mov	arg01, #151
013ec     91 D2 05 F6 | 	mov	arg02, #145
013f0     0C 13 B0 FD | 	call	#_cls
013f4                 | '   setscreencolors (151,145)
013f4     97 D0 05 F6 | 	mov	arg01, #151
013f8     91 D2 05 F6 | 	mov	arg02, #145
013fc     58 0E B0 FD | 	call	#_setscreencolors
01400                 | '   setbordercolors(0,0,0)
01400     00 D0 05 F6 | 	mov	arg01, #0
01404     00 D2 05 F6 | 	mov	arg02, #0
01408     00 D4 05 F6 | 	mov	arg03, #0
0140c     8C 0E B0 FD | 	call	#_setbordercolors
01410                 | ' 
01410                 | '   outtextxy (50-(strsize(s6)>>1),10,s6)
01410     FF D0 01 F6 | 	mov	arg01, local06
01414     00 1A 06 F6 | 	mov	local20, #0
01418     F4 EB 9F FE | 	loc	pa,	#(@LR__0049-@LR__0048)
0141c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01420                 | LR__0048
01420     E8 18 CA FA | 	rdbyte	local19, arg01 wz
01424     01 1A 06 51 |  if_ne	add	local20, #1
01428     01 D0 05 51 |  if_ne	add	arg01, #1
0142c     F0 FF 9F 5D |  if_ne	jmp	#LR__0048
01430                 | LR__0049
01430     0D BF 01 F6 | 	mov	result1, local20
01434     DF 1C 02 F6 | 	mov	local21, result1
01438     01 1C 46 F0 | 	shr	local21, #1
0143c     32 D0 05 F6 | 	mov	arg01, #50
01440     0E D1 81 F1 | 	sub	arg01, local21
01444     FF D4 01 F6 | 	mov	arg03, local06
01448     0A D2 05 F6 | 	mov	arg02, #10
0144c     28 0F B0 FD | 	call	#_outtextxy
01450                 | '   waitvbl(50)
01450     32 D0 05 F6 | 	mov	arg01, #50
01454     7C 0D B0 FD | 	call	#_waitvbl
01458                 | ' 
01458                 | ' 
01458                 | '   random:=getrnd()
01458     1B BE 61 FD | 	getrnd	result1
0145c                 | ' 
0145c                 | '   repeat j from 0 to 15
0145c     10 22 06 F6 | 	mov	local24, #16
01460                 | LR__0050
01460                 | ' 
01460                 | '     waitvbl(25)
01460     19 D0 05 F6 | 	mov	arg01, #25
01464     6C 0D B0 FD | 	call	#_waitvbl
01468                 | '     setscreencolors (getrnd() & 255,getrnd() & 255)
01468     1B D0 61 FD | 	getrnd	arg01
0146c     FF D0 05 F5 | 	and	arg01, #255
01470     1B BE 61 FD | 	getrnd	result1
01474     DF D2 01 F6 | 	mov	arg02, result1
01478     FF D2 05 F5 | 	and	arg02, #255
0147c     D8 0D B0 FD | 	call	#_setscreencolors
01480     F7 23 6E FB | 	djnz	local24, #LR__0050
01484                 | ' 
01484                 | '  setscreencolors (151,145)
01484     97 D0 05 F6 | 	mov	arg01, #151
01488     91 D2 05 F6 | 	mov	arg02, #145
0148c     C8 0D B0 FD | 	call	#_setscreencolors
01490                 | ' 
01490                 | '   outtextxy (50-(strsize(s7)>>1),12,s7)
01490     00 D1 01 F6 | 	mov	arg01, local07
01494     00 1A 06 F6 | 	mov	local20, #0
01498     74 EB 9F FE | 	loc	pa,	#(@LR__0052-@LR__0051)
0149c     93 00 A0 FD | 	call	#FCACHE_LOAD_
014a0                 | LR__0051
014a0     E8 18 CA FA | 	rdbyte	local19, arg01 wz
014a4     01 1A 06 51 |  if_ne	add	local20, #1
014a8     01 D0 05 51 |  if_ne	add	arg01, #1
014ac     F0 FF 9F 5D |  if_ne	jmp	#LR__0051
014b0                 | LR__0052
014b0     0D BF 01 F6 | 	mov	result1, local20
014b4     DF 1C 02 F6 | 	mov	local21, result1
014b8     01 1C 46 F0 | 	shr	local21, #1
014bc     32 D0 05 F6 | 	mov	arg01, #50
014c0     0E D1 81 F1 | 	sub	arg01, local21
014c4     00 D5 01 F6 | 	mov	arg03, local07
014c8     0C D2 05 F6 | 	mov	arg02, #12
014cc     A8 0E B0 FD | 	call	#_outtextxy
014d0                 | '   waitvbl(50)
014d0     32 D0 05 F6 | 	mov	arg01, #50
014d4     FC 0C B0 FD | 	call	#_waitvbl
014d8                 | ' 
014d8                 | '   repeat j from 0 to 15
014d8     10 22 06 F6 | 	mov	local24, #16
014dc                 | LR__0053
014dc                 | '     waitvbl(25)
014dc     19 D0 05 F6 | 	mov	arg01, #25
014e0     F0 0C B0 FD | 	call	#_waitvbl
014e4                 | '     setbordercolors (getrnd() & 255,getrnd() & 255,getrnd() & 255)
014e4     1B 68 62 FD | 	getrnd	local59
014e8     FF 68 06 F5 | 	and	local59, #255
014ec     1B 6A 62 FD | 	getrnd	local60
014f0     FF 6A 06 F5 | 	and	local60, #255
014f4     1B BE 61 FD | 	getrnd	result1
014f8     DF D4 01 F6 | 	mov	arg03, result1
014fc     FF D4 05 F5 | 	and	arg03, #255
01500     34 D1 01 F6 | 	mov	arg01, local59
01504     35 D3 01 F6 | 	mov	arg02, local60
01508     90 0D B0 FD | 	call	#_setbordercolors
0150c     F3 23 6E FB | 	djnz	local24, #LR__0053
01510                 | ' 
01510                 | '   waitvbl(25)
01510     19 D0 05 F6 | 	mov	arg01, #25
01514     BC 0C B0 FD | 	call	#_waitvbl
01518                 | '   setbordercolors(0,0,0)
01518     00 D0 05 F6 | 	mov	arg01, #0
0151c     00 D2 05 F6 | 	mov	arg02, #0
01520     00 D4 05 F6 | 	mov	arg03, #0
01524     74 0D B0 FD | 	call	#_setbordercolors
01528                 | ' '
01528                 | '   repeat j from 0 to 29
01528     1E 22 06 F6 | 	mov	local24, #30
0152c                 | LR__0054
0152c                 | '     scrollup()
0152c     40 12 B0 FD | 	call	#_scrollup
01530                 | '     waitvbl(2)
01530     02 D0 05 F6 | 	mov	arg01, #2
01534     9C 0C B0 FD | 	call	#_waitvbl
01538     FC 23 6E FB | 	djnz	local24, #LR__0054
0153c                 | ' 
0153c                 | ' 
0153c                 | '   repeat i from 0 to 29
0153c     00 20 06 F6 | 	mov	local23, #0
01540                 | LR__0055
01540                 | '     waitvbl(2)
01540     02 D0 05 F6 | 	mov	arg01, #2
01544     8C 0C B0 FD | 	call	#_waitvbl
01548                 | '     cls(141,145)
01548     8D D0 05 F6 | 	mov	arg01, #141
0154c     91 D2 05 F6 | 	mov	arg02, #145
01550     AC 11 B0 FD | 	call	#_cls
01554                 | '     outtextxy(i,i,s1)
01554     FA D4 01 F6 | 	mov	arg03, local01
01558     10 D1 01 F6 | 	mov	arg01, local23
0155c     10 D3 01 F6 | 	mov	arg02, local23
01560     14 0E B0 FD | 	call	#_outtextxy
01564     01 20 06 F1 | 	add	local23, #1
01568     1E 20 5E F2 | 	cmps	local23, #30 wcz
0156c     D0 FF 9F CD |  if_b	jmp	#LR__0055
01570                 | ' 
01570                 | ' 
01570                 | '   waitvbl(100)
01570     64 D0 05 F6 | 	mov	arg01, #100
01574     5C 0C B0 FD | 	call	#_waitvbl
01578                 | ' 
01578                 | '   cursoron()
01578                 | ' 
01578                 | ' ''---------- Switch the cursor on
01578                 | ' 
01578                 | ' cursor_sh+=16
01578     17 00 00 FF 
0157c     8A B9 05 F1 | 	add	objptr, ##12170
01580     DC 18 C2 FA | 	rdbyte	local19, objptr
01584     10 18 06 F1 | 	add	local19, #16
01588     DC 18 42 FC | 	wrbyte	local19, objptr
0158c     17 00 00 FF 
01590     8A B9 85 F1 | 	sub	objptr, ##12170
01594                 | '   cls(15,0)
01594     0F D0 05 F6 | 	mov	arg01, #15
01598     00 D2 05 F6 | 	mov	arg02, #0
0159c     60 11 B0 FD | 	call	#_cls
015a0                 | '   setcursorpos(0,0)
015a0     00 D2 05 F6 | 	mov	arg02, #0
015a4                 | ' 
015a4                 | ' ''---------- Set the (x,y) position of cursor
015a4                 | ' 
015a4                 | ' cursor_x:=x
015a4     17 00 00 FF 
015a8     88 B9 05 F1 | 	add	objptr, ##12168
015ac     DC 00 48 FC | 	wrbyte	#0, objptr
015b0                 | ' cursor_y:=y
015b0     01 B8 05 F1 | 	add	objptr, #1
015b4     DC 00 48 FC | 	wrbyte	#0, objptr
015b8                 | '   setwritecolors(c_blue,0)
015b8                 | ' 
015b8                 | ' ''---------- Set colors for write and writeln
015b8                 | ' 
015b8                 | ' write_color:=ff
015b8     03 B8 05 F1 | 	add	objptr, #3
015bc     DC EA 68 FC | 	wrlong	#117, objptr
015c0                 | ' write_background:=bb
015c0     04 B8 05 F1 | 	add	objptr, #4
015c4     DC 00 68 FC | 	wrlong	#0, objptr
015c8     17 00 00 FF 
015cc     90 B9 85 F1 | 	sub	objptr, ##12176
015d0                 | '   writeln(string("blue"))
015d0     19 00 00 FF 
015d4     16 D0 05 F6 | 	mov	arg01, ##@LR__0211
015d8     C4 10 B0 FD | 	call	#_writeln
015dc                 | '   setwritecolors(c_green,0)
015dc     00 D2 05 F6 | 	mov	arg02, #0
015e0                 | ' 
015e0                 | ' ''---------- Set colors for write and writeln
015e0                 | ' 
015e0                 | ' write_color:=ff
015e0     17 00 00 FF 
015e4     8C B9 05 F1 | 	add	objptr, ##12172
015e8     DC 8E 69 FC | 	wrlong	#199, objptr
015ec                 | ' write_background:=bb
015ec     04 B8 05 F1 | 	add	objptr, #4
015f0     DC 00 68 FC | 	wrlong	#0, objptr
015f4     17 00 00 FF 
015f8     90 B9 85 F1 | 	sub	objptr, ##12176
015fc                 | '   writeln(string("green"))
015fc     19 00 00 FF 
01600     1B D0 05 F6 | 	mov	arg01, ##@LR__0212
01604     98 10 B0 FD | 	call	#_writeln
01608                 | '   setwritecolors(c_cyan,0)
01608     00 D2 05 F6 | 	mov	arg02, #0
0160c                 | ' 
0160c                 | ' ''---------- Set colors for write and writeln
0160c                 | ' 
0160c                 | ' write_color:=ff
0160c     17 00 00 FF 
01610     8C B9 05 F1 | 	add	objptr, ##12172
01614     DC 2E 69 FC | 	wrlong	#151, objptr
01618                 | ' write_background:=bb
01618     04 B8 05 F1 | 	add	objptr, #4
0161c     DC 00 68 FC | 	wrlong	#0, objptr
01620     17 00 00 FF 
01624     90 B9 85 F1 | 	sub	objptr, ##12176
01628                 | '   writeln(string("cyan"))
01628     19 00 00 FF 
0162c     21 D0 05 F6 | 	mov	arg01, ##@LR__0213
01630     6C 10 B0 FD | 	call	#_writeln
01634                 | '   setwritecolors(c_red,0)
01634     00 D2 05 F6 | 	mov	arg02, #0
01638                 | ' 
01638                 | ' ''---------- Set colors for write and writeln
01638                 | ' 
01638                 | ' write_color:=ff
01638     17 00 00 FF 
0163c     8C B9 05 F1 | 	add	objptr, ##12172
01640     DC 4E 68 FC | 	wrlong	#39, objptr
01644                 | ' write_background:=bb
01644     04 B8 05 F1 | 	add	objptr, #4
01648     DC 00 68 FC | 	wrlong	#0, objptr
0164c     17 00 00 FF 
01650     90 B9 85 F1 | 	sub	objptr, ##12176
01654                 | '   writeln(string("red"))
01654     19 00 00 FF 
01658     26 D0 05 F6 | 	mov	arg01, ##@LR__0214
0165c     40 10 B0 FD | 	call	#_writeln
01660                 | '   setwritecolors(c_magenta,0)
01660     00 D2 05 F6 | 	mov	arg02, #0
01664                 | ' 
01664                 | ' ''---------- Set colors for write and writeln
01664                 | ' 
01664                 | ' write_color:=ff
01664     17 00 00 FF 
01668     8C B9 05 F1 | 	add	objptr, ##12172
0166c     DC 8E 68 FC | 	wrlong	#71, objptr
01670                 | ' write_background:=bb
01670     04 B8 05 F1 | 	add	objptr, #4
01674     DC 00 68 FC | 	wrlong	#0, objptr
01678     17 00 00 FF 
0167c     90 B9 85 F1 | 	sub	objptr, ##12176
01680                 | '   writeln(string("magenta"))
01680     19 00 00 FF 
01684     2A D0 05 F6 | 	mov	arg01, ##@LR__0215
01688     14 10 B0 FD | 	call	#_writeln
0168c                 | '   setwritecolors(c_brown,0)
0168c     00 D2 05 F6 | 	mov	arg02, #0
01690                 | ' 
01690                 | ' ''---------- Set colors for write and writeln
01690                 | ' 
01690                 | ' write_color:=ff
01690     17 00 00 FF 
01694     8C B9 05 F1 | 	add	objptr, ##12172
01698     DC EC 69 FC | 	wrlong	#246, objptr
0169c                 | ' write_background:=bb
0169c     04 B8 05 F1 | 	add	objptr, #4
016a0     DC 00 68 FC | 	wrlong	#0, objptr
016a4     17 00 00 FF 
016a8     90 B9 85 F1 | 	sub	objptr, ##12176
016ac                 | '   writeln(string("brown"))
016ac     19 00 00 FF 
016b0     32 D0 05 F6 | 	mov	arg01, ##@LR__0216
016b4     E8 0F B0 FD | 	call	#_writeln
016b8                 | '   setwritecolors(c_lightgray,0)
016b8     00 D2 05 F6 | 	mov	arg02, #0
016bc                 | ' 
016bc                 | ' ''---------- Set colors for write and writeln
016bc                 | ' 
016bc                 | ' write_color:=ff
016bc     17 00 00 FF 
016c0     8C B9 05 F1 | 	add	objptr, ##12172
016c4     DC 14 68 FC | 	wrlong	#10, objptr
016c8                 | ' write_background:=bb
016c8     04 B8 05 F1 | 	add	objptr, #4
016cc     DC 00 68 FC | 	wrlong	#0, objptr
016d0     17 00 00 FF 
016d4     90 B9 85 F1 | 	sub	objptr, ##12176
016d8                 | '   writeln(string("light gray"))
016d8     19 00 00 FF 
016dc     38 D0 05 F6 | 	mov	arg01, ##@LR__0217
016e0     BC 0F B0 FD | 	call	#_writeln
016e4                 | '   setwritecolors(c_darkgray,0)
016e4     00 D2 05 F6 | 	mov	arg02, #0
016e8                 | ' 
016e8                 | ' ''---------- Set colors for write and writeln
016e8                 | ' 
016e8                 | ' write_color:=ff
016e8     17 00 00 FF 
016ec     8C B9 05 F1 | 	add	objptr, ##12172
016f0     DC 0A 68 FC | 	wrlong	#5, objptr
016f4                 | ' write_background:=bb
016f4     04 B8 05 F1 | 	add	objptr, #4
016f8     DC 00 68 FC | 	wrlong	#0, objptr
016fc     17 00 00 FF 
01700     90 B9 85 F1 | 	sub	objptr, ##12176
01704                 | '   writeln(string("dark gray"))
01704     19 00 00 FF 
01708     43 D0 05 F6 | 	mov	arg01, ##@LR__0218
0170c     90 0F B0 FD | 	call	#_writeln
01710                 | '   setwritecolors(c_lightblue,0)
01710     00 D2 05 F6 | 	mov	arg02, #0
01714                 | ' 
01714                 | ' ''---------- Set colors for write and writeln
01714                 | ' 
01714                 | ' write_color:=ff
01714     17 00 00 FF 
01718     8C B9 05 F1 | 	add	objptr, ##12172
0171c     DC F6 68 FC | 	wrlong	#123, objptr
01720                 | ' write_background:=bb
01720     04 B8 05 F1 | 	add	objptr, #4
01724     DC 00 68 FC | 	wrlong	#0, objptr
01728     17 00 00 FF 
0172c     90 B9 85 F1 | 	sub	objptr, ##12176
01730                 | '   writeln(string("light blue"))
01730     19 00 00 FF 
01734     4D D0 05 F6 | 	mov	arg01, ##@LR__0219
01738     64 0F B0 FD | 	call	#_writeln
0173c                 | '   setwritecolors(c_lightgreen,0)
0173c     00 D2 05 F6 | 	mov	arg02, #0
01740                 | ' 
01740                 | ' ''---------- Set colors for write and writeln
01740                 | ' 
01740                 | ' write_color:=ff
01740     17 00 00 FF 
01744     8C B9 05 F1 | 	add	objptr, ##12172
01748     DC 96 69 FC | 	wrlong	#203, objptr
0174c                 | ' write_background:=bb
0174c     04 B8 05 F1 | 	add	objptr, #4
01750     DC 00 68 FC | 	wrlong	#0, objptr
01754     17 00 00 FF 
01758     90 B9 85 F1 | 	sub	objptr, ##12176
0175c                 | '   writeln(string("light green"))
0175c     19 00 00 FF 
01760     58 D0 05 F6 | 	mov	arg01, ##@LR__0220
01764     38 0F B0 FD | 	call	#_writeln
01768                 | '   setwritecolors(c_lightcyan,0)
01768     00 D2 05 F6 | 	mov	arg02, #0
0176c                 | ' 
0176c                 | ' ''---------- Set colors for write and writeln
0176c                 | ' 
0176c                 | ' write_color:=ff
0176c     17 00 00 FF 
01770     8C B9 05 F1 | 	add	objptr, ##12172
01774     DC 36 69 FC | 	wrlong	#155, objptr
01778                 | ' write_background:=bb
01778     04 B8 05 F1 | 	add	objptr, #4
0177c     DC 00 68 FC | 	wrlong	#0, objptr
01780     17 00 00 FF 
01784     90 B9 85 F1 | 	sub	objptr, ##12176
01788                 | '   writeln(string("light cyan"))
01788     19 00 00 FF 
0178c     64 D0 05 F6 | 	mov	arg01, ##@LR__0221
01790     0C 0F B0 FD | 	call	#_writeln
01794                 | '   setwritecolors(c_lightred,0)
01794     00 D2 05 F6 | 	mov	arg02, #0
01798                 | ' 
01798                 | ' ''---------- Set colors for write and writeln
01798                 | ' 
01798                 | ' write_color:=ff
01798     17 00 00 FF 
0179c     8C B9 05 F1 | 	add	objptr, ##12172
017a0     DC 56 68 FC | 	wrlong	#43, objptr
017a4                 | ' write_background:=bb
017a4     04 B8 05 F1 | 	add	objptr, #4
017a8     DC 00 68 FC | 	wrlong	#0, objptr
017ac     17 00 00 FF 
017b0     90 B9 85 F1 | 	sub	objptr, ##12176
017b4                 | '   writeln(string("light red"))
017b4     19 00 00 FF 
017b8     6F D0 05 F6 | 	mov	arg01, ##@LR__0222
017bc     E0 0E B0 FD | 	call	#_writeln
017c0                 | '   setwritecolors(c_lightmagenta,0)
017c0     00 D2 05 F6 | 	mov	arg02, #0
017c4                 | ' 
017c4                 | ' ''---------- Set colors for write and writeln
017c4                 | ' 
017c4                 | ' write_color:=ff
017c4     17 00 00 FF 
017c8     8C B9 05 F1 | 	add	objptr, ##12172
017cc     DC 96 68 FC | 	wrlong	#75, objptr
017d0                 | ' write_background:=bb
017d0     04 B8 05 F1 | 	add	objptr, #4
017d4     DC 00 68 FC | 	wrlong	#0, objptr
017d8     17 00 00 FF 
017dc     90 B9 85 F1 | 	sub	objptr, ##12176
017e0                 | '   writeln(string("light magenta"))
017e0     19 00 00 FF 
017e4     79 D0 05 F6 | 	mov	arg01, ##@LR__0223
017e8     B4 0E B0 FD | 	call	#_writeln
017ec                 | '   setwritecolors(c_yellow,0)
017ec     00 D2 05 F6 | 	mov	arg02, #0
017f0                 | ' 
017f0                 | ' ''---------- Set colors for write and writeln
017f0                 | ' 
017f0                 | ' write_color:=ff
017f0     17 00 00 FF 
017f4     8C B9 05 F1 | 	add	objptr, ##12172
017f8     DC D4 69 FC | 	wrlong	#234, objptr
017fc                 | ' write_background:=bb
017fc     04 B8 05 F1 | 	add	objptr, #4
01800     DC 00 68 FC | 	wrlong	#0, objptr
01804     17 00 00 FF 
01808     90 B9 85 F1 | 	sub	objptr, ##12176
0180c                 | '   writeln(string("yellow"))
0180c     19 00 00 FF 
01810     87 D0 05 F6 | 	mov	arg01, ##@LR__0224
01814     88 0E B0 FD | 	call	#_writeln
01818                 | '   setwritecolors(c_white,0)
01818     00 D2 05 F6 | 	mov	arg02, #0
0181c                 | ' 
0181c                 | ' ''---------- Set colors for write and writeln
0181c                 | ' 
0181c                 | ' write_color:=ff
0181c     17 00 00 FF 
01820     8C B9 05 F1 | 	add	objptr, ##12172
01824     DC 1E 68 FC | 	wrlong	#15, objptr
01828                 | ' write_background:=bb
01828     04 B8 05 F1 | 	add	objptr, #4
0182c     DC 00 68 FC | 	wrlong	#0, objptr
01830     17 00 00 FF 
01834     90 B9 85 F1 | 	sub	objptr, ##12176
01838                 | '   writeln(string("white"))
01838     19 00 00 FF 
0183c     8E D0 05 F6 | 	mov	arg01, ##@LR__0225
01840     5C 0E B0 FD | 	call	#_writeln
01844                 | '   writeln(inttostr(clkfreq))
01844     14 D0 05 FB | 	rdlong	arg01, #20
01848     F4 0F B0 FD | 	call	#_inttostr
0184c     DF D0 01 F6 | 	mov	arg01, result1
01850     4C 0E B0 FD | 	call	#_writeln
01854     32 6C 06 F6 | 	mov	local61, #50
01858     00 6E 06 F6 | 	mov	local62, #0
0185c     33 70 06 F6 | 	mov	local63, #51
01860     10 20 06 F6 | 	mov	local23, #16
01864                 | LR__0056
01864     08 72 06 F6 | 	mov	local64, #8
01868     00 22 06 F6 | 	mov	local24, #0
0186c                 | LR__0057
0186c     37 75 02 F6 | 	mov	local65, local62
01870     11 75 02 F1 | 	add	local65, local24
01874     02 1E 06 F6 | 	mov	local22, #2
01878                 | LR__0058
01878                 | '         setbackcolor(2*i+50,j+8,16*i+j)
01878     36 D1 01 F6 | 	mov	arg01, local61
0187c     39 D3 01 F6 | 	mov	arg02, local64
01880     3A D5 01 F6 | 	mov	arg03, local65
01884     9C 0A B0 FD | 	call	#_setbackcolor
01888                 | '         setbackcolor(2*i+51,j+8,16*i+j)
01888     38 D1 01 F6 | 	mov	arg01, local63
0188c     39 D3 01 F6 | 	mov	arg02, local64
01890     3A D5 01 F6 | 	mov	arg03, local65
01894     8C 0A B0 FD | 	call	#_setbackcolor
01898     F7 1F 6E FB | 	djnz	local22, #LR__0058
0189c     01 22 06 F1 | 	add	local24, #1
018a0     01 72 06 F1 | 	add	local64, #1
018a4     10 22 5E F2 | 	cmps	local24, #16 wcz
018a8     C0 FF 9F CD |  if_b	jmp	#LR__0057
018ac     02 76 06 F1 | 	add	local66, #2
018b0     02 6C 06 F1 | 	add	local61, #2
018b4     10 6E 06 F1 | 	add	local62, #16
018b8     02 70 06 F1 | 	add	local63, #2
018bc     E9 21 6E FB | 	djnz	local23, #LR__0056
018c0                 | ' 
018c0                 | '   waitvbl(1000)
018c0     01 00 00 FF 
018c4     E8 D1 05 F6 | 	mov	arg01, ##1000
018c8     08 09 B0 FD | 	call	#_waitvbl
018cc                 | ' 
018cc                 | '     teststring[100]:=0
018cc     18 00 00 FF 
018d0     4C B8 05 F1 | 	add	objptr, ##12364
018d4     DC 00 48 FC | 	wrbyte	#0, objptr
018d8     64 B8 85 F1 | 	sub	objptr, #100
018dc     DC 78 02 F6 | 	mov	local67, objptr
018e0     17 00 00 FF 
018e4     E8 B9 85 F1 | 	sub	objptr, ##12264
018e8     20 E7 9F FE | 	loc	pa,	#(@LR__0061-@LR__0059)
018ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
018f0                 | LR__0059
018f0     64 04 DC FC | 	rep	@LR__0062, #100
018f4                 | LR__0060
018f4                 | '     teststring[i]:=32
018f4     3C 41 48 FC | 	wrbyte	#32, local67
018f8     01 78 06 F1 | 	add	local67, #1
018fc                 | LR__0061
018fc                 | LR__0062
018fc                 | '   repeat i from 21 to 29
018fc     15 20 06 F6 | 	mov	local23, #21
01900                 | LR__0063
01900     17 00 00 FF 
01904     E8 B9 05 F1 | 	add	objptr, ##12264
01908     DC D4 01 F6 | 	mov	arg03, objptr
0190c     17 00 00 FF 
01910     E8 B9 85 F1 | 	sub	objptr, ##12264
01914                 | '     outtextxyc(0,i,@teststring,c_white,c_black)
01914     00 D0 05 F6 | 	mov	arg01, #0
01918     10 D3 01 F6 | 	mov	arg02, local23
0191c     0F D6 05 F6 | 	mov	arg04, #15
01920     00 D8 05 F6 | 	mov	arg05, #0
01924     FC 0A B0 FD | 	call	#_outtextxyc
01928     01 20 06 F1 | 	add	local23, #1
0192c     1E 20 5E F2 | 	cmps	local23, #30 wcz
01930     CC FF 9F CD |  if_b	jmp	#LR__0063
01934                 | ' 
01934                 | '   setcursorpos(0,25)
01934     19 D2 05 F6 | 	mov	arg02, #25
01938                 | ' 
01938                 | ' ''---------- Set the (x,y) position of cursor
01938                 | ' 
01938                 | ' cursor_x:=x
01938     17 00 00 FF 
0193c     88 B9 05 F1 | 	add	objptr, ##12168
01940     DC 00 48 FC | 	wrbyte	#0, objptr
01944                 | ' cursor_y:=y
01944     01 B8 05 F1 | 	add	objptr, #1
01948     DC 32 48 FC | 	wrbyte	#25, objptr
0194c     17 00 00 FF 
01950     89 B9 85 F1 | 	sub	objptr, ##12169
01954                 | '   waitvbl(120)
01954     78 D0 05 F6 | 	mov	arg01, #120
01958     78 08 B0 FD | 	call	#_waitvbl
0195c                 | '   setwritecolors(c_white,c_black)
0195c     00 D2 05 F6 | 	mov	arg02, #0
01960                 | ' 
01960                 | ' ''---------- Set colors for write and writeln
01960                 | ' 
01960                 | ' write_color:=ff
01960     17 00 00 FF 
01964     8C B9 05 F1 | 	add	objptr, ##12172
01968     DC 1E 68 FC | 	wrlong	#15, objptr
0196c                 | ' write_background:=bb
0196c     04 B8 05 F1 | 	add	objptr, #4
01970     DC 00 68 FC | 	wrlong	#0, objptr
01974     17 00 00 FF 
01978     90 B9 85 F1 | 	sub	objptr, ##12176
0197c                 | '   write(string("C:\>"))
0197c     19 00 00 FF 
01980     94 D0 05 F6 | 	mov	arg01, ##@LR__0226
01984     74 0B B0 FD | 	call	#_write
01988                 | '   waitvbl(120)
01988     78 D0 05 F6 | 	mov	arg01, #120
0198c     44 08 B0 FD | 	call	#_waitvbl
01990                 | '   write(string("p"))
01990     19 00 00 FF 
01994     99 D0 05 F6 | 	mov	arg01, ##@LR__0227
01998     60 0B B0 FD | 	call	#_write
0199c                 | '   waitvbl(10)
0199c     0A D0 05 F6 | 	mov	arg01, #10
019a0     30 08 B0 FD | 	call	#_waitvbl
019a4                 | '   write(string("c"))
019a4     19 00 00 FF 
019a8     9B D0 05 F6 | 	mov	arg01, ##@LR__0228
019ac     4C 0B B0 FD | 	call	#_write
019b0                 | '   waitvbl(10)
019b0     0A D0 05 F6 | 	mov	arg01, #10
019b4     1C 08 B0 FD | 	call	#_waitvbl
019b8                 | '   writeln(string(" "))
019b8     19 00 00 FF 
019bc     9D D0 05 F6 | 	mov	arg01, ##@LR__0229
019c0     DC 0C B0 FD | 	call	#_writeln
019c4                 | '   waitvbl(120)
019c4     78 D0 05 F6 | 	mov	arg01, #120
019c8     08 08 B0 FD | 	call	#_waitvbl
019cc                 | '   write(string("The Propeller Commander, Copyleft ("))
019cc     19 00 00 FF 
019d0     9F D0 05 F6 | 	mov	arg01, ##@LR__0230
019d4     24 0B B0 FD | 	call	#_write
019d8                 | '   teststring[0]:=1
019d8     17 00 00 FF 
019dc     E8 B9 05 F1 | 	add	objptr, ##12264
019e0     DC 02 48 FC | 	wrbyte	#1, objptr
019e4                 | '   teststring[1]:=0
019e4     01 B8 05 F1 | 	add	objptr, #1
019e8     DC 00 48 FC | 	wrbyte	#0, objptr
019ec     01 B8 85 F1 | 	sub	objptr, #1
019f0     DC D0 01 F6 | 	mov	arg01, objptr
019f4     17 00 00 FF 
019f8     E8 B9 85 F1 | 	sub	objptr, ##12264
019fc                 | '   write(@teststring)
019fc     FC 0A B0 FD | 	call	#_write
01a00                 | '   writeln(string(") 2021 pik33@o2.pl"))
01a00     19 00 00 FF 
01a04     C3 D0 05 F6 | 	mov	arg01, ##@LR__0231
01a08     94 0C B0 FD | 	call	#_writeln
01a0c                 | '   waitvbl(60)
01a0c     3C D0 05 F6 | 	mov	arg01, #60
01a10     C0 07 B0 FD | 	call	#_waitvbl
01a14                 | '   writeln(string(" "))
01a14     19 00 00 FF 
01a18     D6 D0 05 F6 | 	mov	arg01, ##@LR__0232
01a1c     80 0C B0 FD | 	call	#_writeln
01a20                 | '   write(string("C:\>"))
01a20     19 00 00 FF 
01a24     D8 D0 05 F6 | 	mov	arg01, ##@LR__0233
01a28     D0 0A B0 FD | 	call	#_write
01a2c                 | ' 
01a2c                 | '   setwritecolors(c_lightcyan,c_blue)
01a2c                 | ' 
01a2c                 | ' ''---------- Set colors for write and writeln
01a2c                 | ' 
01a2c                 | ' write_color:=ff
01a2c     17 00 00 FF 
01a30     8C B9 05 F1 | 	add	objptr, ##12172
01a34     DC 36 69 FC | 	wrlong	#155, objptr
01a38                 | ' write_background:=bb
01a38     04 B8 05 F1 | 	add	objptr, #4
01a3c     DC EA 68 FC | 	wrlong	#117, objptr
01a40     59 B8 05 F1 | 	add	objptr, #89
01a44     DC 7A 02 F6 | 	mov	local68, objptr
01a48     17 00 00 FF 
01a4c     E9 B9 85 F1 | 	sub	objptr, ##12265
01a50     B8 E5 9F FE | 	loc	pa,	#(@LR__0066-@LR__0064)
01a54     93 00 A0 FD | 	call	#FCACHE_LOAD_
01a58                 | LR__0064
01a58     62 04 DC FC | 	rep	@LR__0067, #98
01a5c                 | LR__0065
01a5c                 | '     teststring[i]:=$CD
01a5c     3D 9B 49 FC | 	wrbyte	#205, local68
01a60     01 7A 06 F1 | 	add	local68, #1
01a64                 | LR__0066
01a64                 | LR__0067
01a64                 | '   teststring[0]:=$C9
01a64     17 00 00 FF 
01a68     E8 B9 05 F1 | 	add	objptr, ##12264
01a6c     DC 92 49 FC | 	wrbyte	#201, objptr
01a70                 | '   teststring[50]:=$C9
01a70     32 B8 05 F1 | 	add	objptr, #50
01a74     DC 92 49 FC | 	wrbyte	#201, objptr
01a78                 | ' 
01a78                 | '   teststring[49]:=$BB
01a78     01 B8 85 F1 | 	sub	objptr, #1
01a7c     DC 76 49 FC | 	wrbyte	#187, objptr
01a80                 | '   teststring[99]:=$BB
01a80     32 B8 05 F1 | 	add	objptr, #50
01a84     DC 76 49 FC | 	wrbyte	#187, objptr
01a88                 | '   teststring[100]:=0
01a88     01 B8 05 F1 | 	add	objptr, #1
01a8c     DC 00 48 FC | 	wrbyte	#0, objptr
01a90     64 B8 85 F1 | 	sub	objptr, #100
01a94     DC D4 01 F6 | 	mov	arg03, objptr
01a98     17 00 00 FF 
01a9c     E8 B9 85 F1 | 	sub	objptr, ##12264
01aa0                 | ' 
01aa0                 | '   outtextxyc(0,0,@teststring,c_lightcyan, c_blue)
01aa0     00 D0 05 F6 | 	mov	arg01, #0
01aa4     00 D2 05 F6 | 	mov	arg02, #0
01aa8     9B D6 05 F6 | 	mov	arg04, #155
01aac     75 D8 05 F6 | 	mov	arg05, #117
01ab0     70 09 B0 FD | 	call	#_outtextxyc
01ab4                 | '   outtextxyc(71,0,string(" Status "),c_lightcyan, c_blue)
01ab4     19 00 00 FF 
01ab8     DD D4 05 F6 | 	mov	arg03, ##@LR__0234
01abc     47 D0 05 F6 | 	mov	arg01, #71
01ac0     00 D2 05 F6 | 	mov	arg02, #0
01ac4     9B D6 05 F6 | 	mov	arg04, #155
01ac8     75 D8 05 F6 | 	mov	arg05, #117
01acc     54 09 B0 FD | 	call	#_outtextxyc
01ad0                 | '   outtextxyc(23,0,string(" C:\ "),c_blue, c_lightcyan)
01ad0     19 00 00 FF 
01ad4     E6 D4 05 F6 | 	mov	arg03, ##@LR__0235
01ad8     17 D0 05 F6 | 	mov	arg01, #23
01adc     00 D2 05 F6 | 	mov	arg02, #0
01ae0     75 D6 05 F6 | 	mov	arg04, #117
01ae4     9B D8 05 F6 | 	mov	arg05, #155
01ae8     38 09 B0 FD | 	call	#_outtextxyc
01aec     17 00 00 FF 
01af0     E9 B9 05 F1 | 	add	objptr, ##12265
01af4     DC 7C 02 F6 | 	mov	local69, objptr
01af8     17 00 00 FF 
01afc     E9 B9 85 F1 | 	sub	objptr, ##12265
01b00     08 E5 9F FE | 	loc	pa,	#(@LR__0070-@LR__0068)
01b04     93 00 A0 FD | 	call	#FCACHE_LOAD_
01b08                 | LR__0068
01b08     62 04 DC FC | 	rep	@LR__0071, #98
01b0c                 | LR__0069
01b0c                 | '     teststring[i]:=32
01b0c     3E 41 48 FC | 	wrbyte	#32, local69
01b10     01 7C 06 F1 | 	add	local69, #1
01b14                 | LR__0070
01b14                 | LR__0071
01b14                 | '   teststring[43]:=$B3
01b14     18 00 00 FF 
01b18     13 B8 05 F1 | 	add	objptr, ##12307
01b1c     DC 66 49 FC | 	wrbyte	#179, objptr
01b20                 | '   teststring[32]:=$B3
01b20     0B B8 85 F1 | 	sub	objptr, #11
01b24     DC 66 49 FC | 	wrbyte	#179, objptr
01b28                 | '   teststring[22]:=$B3
01b28     0A B8 85 F1 | 	sub	objptr, #10
01b2c     DC 66 49 FC | 	wrbyte	#179, objptr
01b30                 | '   teststring[0]:=$BA
01b30     16 B8 85 F1 | 	sub	objptr, #22
01b34     DC 74 49 FC | 	wrbyte	#186, objptr
01b38                 | '   teststring[49]:=$BA
01b38     31 B8 05 F1 | 	add	objptr, #49
01b3c     DC 74 49 FC | 	wrbyte	#186, objptr
01b40                 | '   teststring[50]:=$BA
01b40     01 B8 05 F1 | 	add	objptr, #1
01b44     DC 74 49 FC | 	wrbyte	#186, objptr
01b48                 | '   teststring[99]:=$BA
01b48     31 B8 05 F1 | 	add	objptr, #49
01b4c     DC 74 49 FC | 	wrbyte	#186, objptr
01b50     18 00 00 FF 
01b54     4B B8 85 F1 | 	sub	objptr, ##12363
01b58                 | '   repeat i from 1 to 19
01b58     01 20 06 F6 | 	mov	local23, #1
01b5c                 | LR__0072
01b5c     17 00 00 FF 
01b60     E8 B9 05 F1 | 	add	objptr, ##12264
01b64     DC D4 01 F6 | 	mov	arg03, objptr
01b68     17 00 00 FF 
01b6c     E8 B9 85 F1 | 	sub	objptr, ##12264
01b70                 | '     outtextxyc(0,i,@teststring,c_lightcyan, c_blue)
01b70     00 D0 05 F6 | 	mov	arg01, #0
01b74     10 D3 01 F6 | 	mov	arg02, local23
01b78     9B D6 05 F6 | 	mov	arg04, #155
01b7c     75 D8 05 F6 | 	mov	arg05, #117
01b80     A0 08 B0 FD | 	call	#_outtextxyc
01b84     01 20 06 F1 | 	add	local23, #1
01b88     14 20 5E F2 | 	cmps	local23, #20 wcz
01b8c     CC FF 9F CD |  if_b	jmp	#LR__0072
01b90     17 00 00 FF 
01b94     E9 B9 05 F1 | 	add	objptr, ##12265
01b98     DC 7E 02 F6 | 	mov	local70, objptr
01b9c     17 00 00 FF 
01ba0     E9 B9 85 F1 | 	sub	objptr, ##12265
01ba4     64 E4 9F FE | 	loc	pa,	#(@LR__0075-@LR__0073)
01ba8     93 00 A0 FD | 	call	#FCACHE_LOAD_
01bac                 | LR__0073
01bac     62 04 DC FC | 	rep	@LR__0076, #98
01bb0                 | LR__0074
01bb0                 | '     teststring[i]:=$CD
01bb0     3F 9B 49 FC | 	wrbyte	#205, local70
01bb4     01 7E 06 F1 | 	add	local70, #1
01bb8                 | LR__0075
01bb8                 | LR__0076
01bb8                 | '   teststring[0]:=$C8
01bb8     17 00 00 FF 
01bbc     E8 B9 05 F1 | 	add	objptr, ##12264
01bc0     DC 90 49 FC | 	wrbyte	#200, objptr
01bc4                 | '   teststring[50]:=$C8
01bc4     32 B8 05 F1 | 	add	objptr, #50
01bc8     DC 90 49 FC | 	wrbyte	#200, objptr
01bcc                 | ' 
01bcc                 | '   teststring[49]:=$BC
01bcc     01 B8 85 F1 | 	sub	objptr, #1
01bd0     DC 78 49 FC | 	wrbyte	#188, objptr
01bd4                 | '   teststring[99]:=$BC
01bd4     32 B8 05 F1 | 	add	objptr, #50
01bd8     DC 78 49 FC | 	wrbyte	#188, objptr
01bdc                 | '   teststring[100]:=0
01bdc     01 B8 05 F1 | 	add	objptr, #1
01be0     DC 00 48 FC | 	wrbyte	#0, objptr
01be4     64 B8 85 F1 | 	sub	objptr, #100
01be8     DC D4 01 F6 | 	mov	arg03, objptr
01bec     17 00 00 FF 
01bf0     E8 B9 85 F1 | 	sub	objptr, ##12264
01bf4                 | ' 
01bf4                 | '   outtextxyc(0,20,@teststring,c_lightcyan, c_blue)
01bf4     00 D0 05 F6 | 	mov	arg01, #0
01bf8     14 D2 05 F6 | 	mov	arg02, #20
01bfc     9B D6 05 F6 | 	mov	arg04, #155
01c00     75 D8 05 F6 | 	mov	arg05, #117
01c04     1C 08 B0 FD | 	call	#_outtextxyc
01c08                 | '   outtextxy(56,2,string("The Propeller Commander, Version 0.00"))
01c08     19 00 00 FF 
01c0c     EC D4 05 F6 | 	mov	arg03, ##@LR__0236
01c10     38 D0 05 F6 | 	mov	arg01, #56
01c14     02 D2 05 F6 | 	mov	arg02, #2
01c18     5C 07 B0 FD | 	call	#_outtextxy
01c1c                 | '   outtextxy(60,3,string("Copyleft ("))
01c1c     19 00 00 FF 
01c20     12 D5 05 F6 | 	mov	arg03, ##@LR__0237
01c24     3C D0 05 F6 | 	mov	arg01, #60
01c28     03 D2 05 F6 | 	mov	arg02, #3
01c2c     48 07 B0 FD | 	call	#_outtextxy
01c30                 | '   teststring[0]:=1
01c30     17 00 00 FF 
01c34     E8 B9 05 F1 | 	add	objptr, ##12264
01c38     DC 02 48 FC | 	wrbyte	#1, objptr
01c3c                 | '   teststring[1]:=0
01c3c     01 B8 05 F1 | 	add	objptr, #1
01c40     DC 00 48 FC | 	wrbyte	#0, objptr
01c44     01 B8 85 F1 | 	sub	objptr, #1
01c48     DC D4 01 F6 | 	mov	arg03, objptr
01c4c     17 00 00 FF 
01c50     E8 B9 85 F1 | 	sub	objptr, ##12264
01c54                 | '   outtextxy(70,3,@teststring)
01c54     46 D0 05 F6 | 	mov	arg01, #70
01c58     03 D2 05 F6 | 	mov	arg02, #3
01c5c     18 07 B0 FD | 	call	#_outtextxy
01c60                 | '   outtextxy(71,3,string(") 2021 pik33@o2.pl"))
01c60     19 00 00 FF 
01c64     1D D5 05 F6 | 	mov	arg03, ##@LR__0238
01c68     47 D0 05 F6 | 	mov	arg01, #71
01c6c     03 D2 05 F6 | 	mov	arg02, #3
01c70     04 07 B0 FD | 	call	#_outtextxy
01c74     17 00 00 FF 
01c78     E9 B9 05 F1 | 	add	objptr, ##12265
01c7c     DC 80 02 F6 | 	mov	local71, objptr
01c80     30 20 06 F6 | 	mov	local23, #48
01c84     17 00 00 FF 
01c88     E9 B9 85 F1 | 	sub	objptr, ##12265
01c8c     7C E3 9F FE | 	loc	pa,	#(@LR__0078-@LR__0077)
01c90     93 00 A0 FD | 	call	#FCACHE_LOAD_
01c94                 | LR__0077
01c94                 | '     teststring[i]:=$CD
01c94     40 9B 49 FC | 	wrbyte	#205, local71
01c98     01 80 06 F1 | 	add	local71, #1
01c9c     FD 21 6E FB | 	djnz	local23, #LR__0077
01ca0                 | LR__0078
01ca0                 | '   teststring[50]:=0
01ca0     18 00 00 FF 
01ca4     1A B8 05 F1 | 	add	objptr, ##12314
01ca8     DC 00 48 FC | 	wrbyte	#0, objptr
01cac                 | '   teststring[0]:=$CC
01cac     32 B8 85 F1 | 	sub	objptr, #50
01cb0     DC 98 49 FC | 	wrbyte	#204, objptr
01cb4                 | '   teststring[49]:=$B9
01cb4     31 B8 05 F1 | 	add	objptr, #49
01cb8     DC 72 49 FC | 	wrbyte	#185, objptr
01cbc     31 B8 85 F1 | 	sub	objptr, #49
01cc0     DC 82 02 F6 | 	mov	local72, objptr
01cc4                 | '   outtextxy(50,5,@teststring)
01cc4     32 D0 05 F6 | 	mov	arg01, #50
01cc8     05 D2 05 F6 | 	mov	arg02, #5
01ccc     41 D5 01 F6 | 	mov	arg03, local72
01cd0     17 00 00 FF 
01cd4     E8 B9 85 F1 | 	sub	objptr, ##12264
01cd8     9C 06 B0 FD | 	call	#_outtextxy
01cdc                 | '   outtextxy(50,14,@teststring)
01cdc     32 D0 05 F6 | 	mov	arg01, #50
01ce0     0E D2 05 F6 | 	mov	arg02, #14
01ce4     41 D5 01 F6 | 	mov	arg03, local72
01ce8     8C 06 B0 FD | 	call	#_outtextxy
01cec                 | ' 
01cec                 | '   outtextxy(65,7,string("524,288 Bytes Memory"))
01cec     19 00 00 FF 
01cf0     30 D5 05 F6 | 	mov	arg03, ##@LR__0239
01cf4     41 D0 05 F6 | 	mov	arg01, #65
01cf8     07 D2 05 F6 | 	mov	arg02, #7
01cfc     78 06 B0 FD | 	call	#_outtextxy
01d00     10 87 02 F6 | 	mov	muldiva_, local23
01d04     01 00 00 FF 
01d08     E8 89 06 F6 | 	mov	muldivb_, ##1000
01d0c     D0 00 A0 FD | 	call	#divide_
01d10                 | '  ' i:=$80000-@charcolor
01d10                 | '   outtextxy(66,8,inttostr(i / 1000))
01d10     42 58 06 F6 | 	mov	local51, #66
01d14     08 1C 06 F6 | 	mov	local21, #8
01d18     44 D1 01 F6 | 	mov	arg01, muldivb_
01d1c     20 0B B0 FD | 	call	#_inttostr
01d20     DF D4 01 F6 | 	mov	arg03, result1
01d24     2C D1 01 F6 | 	mov	arg01, local51
01d28     0E D3 01 F6 | 	mov	arg02, local21
01d2c     48 06 B0 FD | 	call	#_outtextxy
01d30                 | '   outtextxy(69,8,string(","))
01d30     19 00 00 FF 
01d34     45 D5 05 F6 | 	mov	arg03, ##@LR__0240
01d38     45 D0 05 F6 | 	mov	arg01, #69
01d3c     08 D2 05 F6 | 	mov	arg02, #8
01d40     34 06 B0 FD | 	call	#_outtextxy
01d44     10 87 02 F6 | 	mov	muldiva_, local23
01d48     01 00 00 FF 
01d4c     E8 89 06 F6 | 	mov	muldivb_, ##1000
01d50     D0 00 A0 FD | 	call	#divide_
01d54                 | '   outtextxy(70,8,inttostr(i // 1000))
01d54     46 58 06 F6 | 	mov	local51, #70
01d58     08 1C 06 F6 | 	mov	local21, #8
01d5c     43 D1 01 F6 | 	mov	arg01, muldiva_
01d60     DC 0A B0 FD | 	call	#_inttostr
01d64     DF D4 01 F6 | 	mov	arg03, result1
01d68     2C D1 01 F6 | 	mov	arg01, local51
01d6c     0E D3 01 F6 | 	mov	arg02, local21
01d70     04 06 B0 FD | 	call	#_outtextxy
01d74                 | '   outtextxy(74,8,string("Bytes Free"))
01d74     19 00 00 FF 
01d78     47 D5 05 F6 | 	mov	arg03, ##@LR__0241
01d7c     4A D0 05 F6 | 	mov	arg01, #74
01d80     08 D2 05 F6 | 	mov	arg02, #8
01d84     F0 05 B0 FD | 	call	#_outtextxy
01d88                 | '   outtextxy(56,9,string("32,212,254,720 total bytes on drive C:"))
01d88     19 00 00 FF 
01d8c     52 D5 05 F6 | 	mov	arg03, ##@LR__0242
01d90     38 D0 05 F6 | 	mov	arg01, #56
01d94     09 D2 05 F6 | 	mov	arg02, #9
01d98     DC 05 B0 FD | 	call	#_outtextxy
01d9c                 | '   outtextxy(57,10,string("3,989,123,640 bytes free on drive C:"))
01d9c     19 00 00 FF 
01da0     79 D5 05 F6 | 	mov	arg03, ##@LR__0243
01da4     39 D0 05 F6 | 	mov	arg01, #57
01da8     0A D2 05 F6 | 	mov	arg02, #10
01dac     C8 05 B0 FD | 	call	#_outtextxy
01db0                 | '   outtextxy(58,11,string("123 files use 128,956,384 bytes in"))
01db0     19 00 00 FF 
01db4     9E D5 05 F6 | 	mov	arg03, ##@LR__0244
01db8     3A D0 05 F6 | 	mov	arg01, #58
01dbc     0B D2 05 F6 | 	mov	arg02, #11
01dc0     B4 05 B0 FD | 	call	#_outtextxy
01dc4                 | '   outtextxy(74,12,string("C:"))
01dc4     19 00 00 FF 
01dc8     C1 D5 05 F6 | 	mov	arg03, ##@LR__0245
01dcc     4A D0 05 F6 | 	mov	arg01, #74
01dd0     0C D2 05 F6 | 	mov	arg02, #12
01dd4     A0 05 B0 FD | 	call	#_outtextxy
01dd8                 | '   outtextxy(58,17,string("No 'dirinfo' file in this directory"))
01dd8     19 00 00 FF 
01ddc     C4 D5 05 F6 | 	mov	arg03, ##@LR__0246
01de0     3A D0 05 F6 | 	mov	arg01, #58
01de4     11 D2 05 F6 | 	mov	arg02, #17
01de8     8C 05 B0 FD | 	call	#_outtextxy
01dec                 | ' 
01dec                 | '   outtextxyc(9,1,string("Name"),c_yellow,c_blue)
01dec     19 00 00 FF 
01df0     E8 D5 05 F6 | 	mov	arg03, ##@LR__0247
01df4     09 D0 05 F6 | 	mov	arg01, #9
01df8     01 D2 05 F6 | 	mov	arg02, #1
01dfc     EA D6 05 F6 | 	mov	arg04, #234
01e00     75 D8 05 F6 | 	mov	arg05, #117
01e04     1C 06 B0 FD | 	call	#_outtextxyc
01e08                 | '   outtextxyc(25,1,string("Size"),c_yellow,c_blue)
01e08     19 00 00 FF 
01e0c     ED D5 05 F6 | 	mov	arg03, ##@LR__0248
01e10     19 D0 05 F6 | 	mov	arg01, #25
01e14     01 D2 05 F6 | 	mov	arg02, #1
01e18     EA D6 05 F6 | 	mov	arg04, #234
01e1c     75 D8 05 F6 | 	mov	arg05, #117
01e20     00 06 B0 FD | 	call	#_outtextxyc
01e24                 | '   outtextxyc(36,1,string("Date"),c_yellow,c_blue)
01e24     19 00 00 FF 
01e28     F2 D5 05 F6 | 	mov	arg03, ##@LR__0249
01e2c     24 D0 05 F6 | 	mov	arg01, #36
01e30     01 D2 05 F6 | 	mov	arg02, #1
01e34     EA D6 05 F6 | 	mov	arg04, #234
01e38     75 D8 05 F6 | 	mov	arg05, #117
01e3c     E4 05 B0 FD | 	call	#_outtextxyc
01e40                 | '   outtextxyc(45,1,string("Time"),c_yellow,c_blue)
01e40     19 00 00 FF 
01e44     F7 D5 05 F6 | 	mov	arg03, ##@LR__0250
01e48     2D D0 05 F6 | 	mov	arg01, #45
01e4c     01 D2 05 F6 | 	mov	arg02, #1
01e50     EA D6 05 F6 | 	mov	arg04, #234
01e54     75 D8 05 F6 | 	mov	arg05, #117
01e58     C8 05 B0 FD | 	call	#_outtextxyc
01e5c                 | '   outtextxy(44,2,string("12:34"))
01e5c     19 00 00 FF 
01e60     FC D5 05 F6 | 	mov	arg03, ##@LR__0251
01e64     2C D0 05 F6 | 	mov	arg01, #44
01e68     02 D2 05 F6 | 	mov	arg02, #2
01e6c     08 05 B0 FD | 	call	#_outtextxy
01e70                 | '   outtextxy(33,2,string("2021.03.23"))
01e70     1A 00 00 FF 
01e74     02 D4 05 F6 | 	mov	arg03, ##@LR__0252
01e78     21 D0 05 F6 | 	mov	arg01, #33
01e7c     02 D2 05 F6 | 	mov	arg02, #2
01e80     F4 04 B0 FD | 	call	#_outtextxy
01e84                 | '   teststring[0]:=16
01e84     17 00 00 FF 
01e88     E8 B9 05 F1 | 	add	objptr, ##12264
01e8c     DC 20 48 FC | 	wrbyte	#16, objptr
01e90                 | '   teststring[1]:=0
01e90     01 B8 05 F1 | 	add	objptr, #1
01e94     DC 00 48 FC | 	wrbyte	#0, objptr
01e98     17 00 00 FF 
01e9c     E9 B9 85 F1 | 	sub	objptr, ##12265
01ea0                 | '   repeat i from 2 to 8
01ea0     02 20 06 F6 | 	mov	local23, #2
01ea4                 | LR__0079
01ea4     17 00 00 FF 
01ea8     E8 B9 05 F1 | 	add	objptr, ##12264
01eac     DC D4 01 F6 | 	mov	arg03, objptr
01eb0     17 00 00 FF 
01eb4     E8 B9 85 F1 | 	sub	objptr, ##12264
01eb8                 | '     outtextxy(23,i,@teststring)
01eb8     17 D0 05 F6 | 	mov	arg01, #23
01ebc     10 D3 01 F6 | 	mov	arg02, local23
01ec0     B4 04 B0 FD | 	call	#_outtextxy
01ec4     01 20 06 F1 | 	add	local23, #1
01ec8     09 20 5E F2 | 	cmps	local23, #9 wcz
01ecc     D4 FF 9F CD |  if_b	jmp	#LR__0079
01ed0                 | '   teststring[0]:=17
01ed0     17 00 00 FF 
01ed4     E8 B9 05 F1 | 	add	objptr, ##12264
01ed8     DC 22 48 FC | 	wrbyte	#17, objptr
01edc     17 00 00 FF 
01ee0     E8 B9 85 F1 | 	sub	objptr, ##12264
01ee4                 | '   repeat i from 2 to 8
01ee4     02 20 06 F6 | 	mov	local23, #2
01ee8                 | LR__0080
01ee8     17 00 00 FF 
01eec     E8 B9 05 F1 | 	add	objptr, ##12264
01ef0     DC D4 01 F6 | 	mov	arg03, objptr
01ef4     17 00 00 FF 
01ef8     E8 B9 85 F1 | 	sub	objptr, ##12264
01efc                 | '     outtextxy(31,i,@teststring)
01efc     1F D0 05 F6 | 	mov	arg01, #31
01f00     10 D3 01 F6 | 	mov	arg02, local23
01f04     70 04 B0 FD | 	call	#_outtextxy
01f08     01 20 06 F1 | 	add	local23, #1
01f0c     09 20 5E F2 | 	cmps	local23, #9 wcz
01f10     D4 FF 9F CD |  if_b	jmp	#LR__0080
01f14                 | '   repeat i from 2 to 8
01f14     02 20 06 F6 | 	mov	local23, #2
01f18                 | LR__0081
01f18                 | '     outtextxy(24,i,string("SUB-DIR"))
01f18     1A 00 00 FF 
01f1c     0D D4 05 F6 | 	mov	arg03, ##@LR__0253
01f20     18 D0 05 F6 | 	mov	arg01, #24
01f24     10 D3 01 F6 | 	mov	arg02, local23
01f28     4C 04 B0 FD | 	call	#_outtextxy
01f2c     01 20 06 F1 | 	add	local23, #1
01f30     09 20 5E F2 | 	cmps	local23, #9 wcz
01f34     E0 FF 9F CD |  if_b	jmp	#LR__0081
01f38                 | '   outtextxy(27,9,string("21356"))
01f38     1A 00 00 FF 
01f3c     15 D4 05 F6 | 	mov	arg03, ##@LR__0254
01f40     1B D0 05 F6 | 	mov	arg01, #27
01f44     09 D2 05 F6 | 	mov	arg02, #9
01f48     2C 04 B0 FD | 	call	#_outtextxy
01f4c                 | '   outtextxy(27,10,string("12564"))
01f4c     1A 00 00 FF 
01f50     1B D4 05 F6 | 	mov	arg03, ##@LR__0255
01f54     1B D0 05 F6 | 	mov	arg01, #27
01f58     0A D2 05 F6 | 	mov	arg02, #10
01f5c     18 04 B0 FD | 	call	#_outtextxy
01f60                 | '   outtextxy(28,11,string("1128"))
01f60     1A 00 00 FF 
01f64     21 D4 05 F6 | 	mov	arg03, ##@LR__0256
01f68     1C D0 05 F6 | 	mov	arg01, #28
01f6c     0B D2 05 F6 | 	mov	arg02, #11
01f70     04 04 B0 FD | 	call	#_outtextxy
01f74                 | '   outtextxy(26,12,string("105321"))
01f74     1A 00 00 FF 
01f78     26 D4 05 F6 | 	mov	arg03, ##@LR__0257
01f7c     1A D0 05 F6 | 	mov	arg01, #26
01f80     0C D2 05 F6 | 	mov	arg02, #12
01f84     F0 03 B0 FD | 	call	#_outtextxy
01f88                 | '   outtextxy(27,13,string("30831"))
01f88     1A 00 00 FF 
01f8c     2D D4 05 F6 | 	mov	arg03, ##@LR__0258
01f90     1B D0 05 F6 | 	mov	arg01, #27
01f94     0D D2 05 F6 | 	mov	arg02, #13
01f98     DC 03 B0 FD | 	call	#_outtextxy
01f9c                 | '   outtextxy(29,14,string("856"))
01f9c     1A 00 00 FF 
01fa0     33 D4 05 F6 | 	mov	arg03, ##@LR__0259
01fa4     1D D0 05 F6 | 	mov	arg01, #29
01fa8     0E D2 05 F6 | 	mov	arg02, #14
01fac     C8 03 B0 FD | 	call	#_outtextxy
01fb0                 | '   outtextxy(27,15,string("31248"))
01fb0     1A 00 00 FF 
01fb4     37 D4 05 F6 | 	mov	arg03, ##@LR__0260
01fb8     1B D0 05 F6 | 	mov	arg01, #27
01fbc     0F D2 05 F6 | 	mov	arg02, #15
01fc0     B4 03 B0 FD | 	call	#_outtextxy
01fc4                 | '   outtextxy(28,16,string("2316"))
01fc4     1A 00 00 FF 
01fc8     3D D4 05 F6 | 	mov	arg03, ##@LR__0261
01fcc     1C D0 05 F6 | 	mov	arg01, #28
01fd0     10 D2 05 F6 | 	mov	arg02, #16
01fd4     A0 03 B0 FD | 	call	#_outtextxy
01fd8                 | '   outtextxy(27,17,string("17531"))
01fd8     1A 00 00 FF 
01fdc     42 D4 05 F6 | 	mov	arg03, ##@LR__0262
01fe0     1B D0 05 F6 | 	mov	arg01, #27
01fe4     11 D2 05 F6 | 	mov	arg02, #17
01fe8     8C 03 B0 FD | 	call	#_outtextxy
01fec                 | '   outtextxy(1,2,string("PropDOS"))
01fec     1A 00 00 FF 
01ff0     48 D4 05 F6 | 	mov	arg03, ##@LR__0263
01ff4     01 D0 05 F6 | 	mov	arg01, #1
01ff8     02 D2 05 F6 | 	mov	arg02, #2
01ffc     78 03 B0 FD | 	call	#_outtextxy
02000                 | '   outtextxy(1,3,string("BASIC"))
02000     1A 00 00 FF 
02004     50 D4 05 F6 | 	mov	arg03, ##@LR__0264
02008     01 D0 05 F6 | 	mov	arg01, #1
0200c     03 D2 05 F6 | 	mov	arg02, #3
02010     64 03 B0 FD | 	call	#_outtextxy
02014                 | '   outtextxy(1,4,string("Spin"))
02014     1A 00 00 FF 
02018     56 D4 05 F6 | 	mov	arg03, ##@LR__0265
0201c     01 D0 05 F6 | 	mov	arg01, #1
02020     04 D2 05 F6 | 	mov	arg02, #4
02024     50 03 B0 FD | 	call	#_outtextxy
02028                 | '   outtextxy(1,5,string("Windows"))
02028     1A 00 00 FF 
0202c     5B D4 05 F6 | 	mov	arg03, ##@LR__0266
02030     01 D0 05 F6 | 	mov	arg01, #1
02034     05 D2 05 F6 | 	mov	arg02, #5
02038     3C 03 B0 FD | 	call	#_outtextxy
0203c                 | '   outtextxy(1,6,string("Atari             emu"))
0203c     1A 00 00 FF 
02040     63 D4 05 F6 | 	mov	arg03, ##@LR__0267
02044     01 D0 05 F6 | 	mov	arg01, #1
02048     06 D2 05 F6 | 	mov	arg02, #6
0204c     28 03 B0 FD | 	call	#_outtextxy
02050                 | '   outtextxy(1,7,string("Amiga             emu"))
02050     1A 00 00 FF 
02054     79 D4 05 F6 | 	mov	arg03, ##@LR__0268
02058     01 D0 05 F6 | 	mov	arg01, #1
0205c     07 D2 05 F6 | 	mov	arg02, #7
02060     14 03 B0 FD | 	call	#_outtextxy
02064                 | '   outtextxy(1,8,string("Propeller"))
02064     1A 00 00 FF 
02068     8F D4 05 F6 | 	mov	arg03, ##@LR__0269
0206c     01 D0 05 F6 | 	mov	arg01, #1
02070     08 D2 05 F6 | 	mov	arg02, #8
02074     00 03 B0 FD | 	call	#_outtextxy
02078                 | '   outtextxy(1,9,string("DOS               SYS"))
02078     1A 00 00 FF 
0207c     99 D4 05 F6 | 	mov	arg03, ##@LR__0270
02080     01 D0 05 F6 | 	mov	arg01, #1
02084     09 D2 05 F6 | 	mov	arg02, #9
02088     EC 02 B0 FD | 	call	#_outtextxy
0208c                 | '   outtextxy(1,10,string("DUP               SYS"))
0208c     1A 00 00 FF 
02090     AF D4 05 F6 | 	mov	arg03, ##@LR__0271
02094     01 D0 05 F6 | 	mov	arg01, #1
02098     0A D2 05 F6 | 	mov	arg02, #10
0209c     D8 02 B0 FD | 	call	#_outtextxy
020a0                 | '   outtextxy(1,11,string("Autoexec          BAT"))
020a0     1A 00 00 FF 
020a4     C5 D4 05 F6 | 	mov	arg03, ##@LR__0272
020a8     01 D0 05 F6 | 	mov	arg01, #1
020ac     0B D2 05 F6 | 	mov	arg02, #11
020b0     C4 02 B0 FD | 	call	#_outtextxy
020b4                 | '   outtextxy(1,12,string("pc                exe"))
020b4     1A 00 00 FF 
020b8     DB D4 05 F6 | 	mov	arg03, ##@LR__0273
020bc     01 D0 05 F6 | 	mov	arg01, #1
020c0     0C D2 05 F6 | 	mov	arg02, #12
020c4     B0 02 B0 FD | 	call	#_outtextxy
020c8                 | '   outtextxy(1,13,string("win               com"))
020c8     1A 00 00 FF 
020cc     F1 D4 05 F6 | 	mov	arg03, ##@LR__0274
020d0     01 D0 05 F6 | 	mov	arg01, #1
020d4     0D D2 05 F6 | 	mov	arg02, #13
020d8     9C 02 B0 FD | 	call	#_outtextxy
020dc                 | '   outtextxy(1,14,string("DOOM              BAT"))
020dc     1A 00 00 FF 
020e0     07 D5 05 F6 | 	mov	arg03, ##@LR__0275
020e4     01 D0 05 F6 | 	mov	arg01, #1
020e8     0E D2 05 F6 | 	mov	arg02, #14
020ec     88 02 B0 FD | 	call	#_outtextxy
020f0                 | '   outtextxy(1,15,string("command           com"))
020f0     1A 00 00 FF 
020f4     1D D5 05 F6 | 	mov	arg03, ##@LR__0276
020f8     01 D0 05 F6 | 	mov	arg01, #1
020fc     0F D2 05 F6 | 	mov	arg02, #15
02100     74 02 B0 FD | 	call	#_outtextxy
02104                 | '   outtextxy(1,16,string("config            sys"))
02104     1A 00 00 FF 
02108     33 D5 05 F6 | 	mov	arg03, ##@LR__0277
0210c     01 D0 05 F6 | 	mov	arg01, #1
02110     10 D2 05 F6 | 	mov	arg02, #16
02114     60 02 B0 FD | 	call	#_outtextxy
02118                 | '   outtextxy(1,17,string("msdos             sys"))
02118     1A 00 00 FF 
0211c     49 D5 05 F6 | 	mov	arg03, ##@LR__0278
02120     01 D0 05 F6 | 	mov	arg01, #1
02124     11 D2 05 F6 | 	mov	arg02, #17
02128     4C 02 B0 FD | 	call	#_outtextxy
0212c     17 00 00 FF 
02130     E8 B9 05 F1 | 	add	objptr, ##12264
02134     DC 84 02 F6 | 	mov	local73, objptr
02138     17 00 00 FF 
0213c     E8 B9 85 F1 | 	sub	objptr, ##12264
02140     C8 DE 9F FE | 	loc	pa,	#(@LR__0084-@LR__0082)
02144     93 00 A0 FD | 	call	#FCACHE_LOAD_
02148                 | LR__0082
02148     32 04 DC FC | 	rep	@LR__0085, #50
0214c                 | LR__0083
0214c                 | '     teststring[i]:=$C4
0214c     42 89 49 FC | 	wrbyte	#196, local73
02150     01 84 06 F1 | 	add	local73, #1
02154                 | LR__0084
02154                 | LR__0085
02154                 | '   teststring[50]:=0
02154     18 00 00 FF 
02158     1A B8 05 F1 | 	add	objptr, ##12314
0215c     DC 00 48 FC | 	wrbyte	#0, objptr
02160                 | '   teststring[0]:=$BA
02160     32 B8 85 F1 | 	sub	objptr, #50
02164     DC 74 49 FC | 	wrbyte	#186, objptr
02168                 | '   teststring[49]:=$BA
02168     31 B8 05 F1 | 	add	objptr, #49
0216c     DC 74 49 FC | 	wrbyte	#186, objptr
02170                 | '   teststring[22]:=$C1
02170     1B B8 85 F1 | 	sub	objptr, #27
02174     DC 82 49 FC | 	wrbyte	#193, objptr
02178                 | '   teststring[32]:=$C1
02178     0A B8 05 F1 | 	add	objptr, #10
0217c     DC 82 49 FC | 	wrbyte	#193, objptr
02180                 | '   teststring[43]:=$C1
02180     0B B8 05 F1 | 	add	objptr, #11
02184     DC 82 49 FC | 	wrbyte	#193, objptr
02188     2B B8 85 F1 | 	sub	objptr, #43
0218c     DC D4 01 F6 | 	mov	arg03, objptr
02190     17 00 00 FF 
02194     E8 B9 85 F1 | 	sub	objptr, ##12264
02198                 | '   outtextxy(0,18,@teststring)
02198     00 D0 05 F6 | 	mov	arg01, #0
0219c     12 D2 05 F6 | 	mov	arg02, #18
021a0     D4 01 B0 FD | 	call	#_outtextxy
021a4                 | '   outtextxy(1,19,string("pc.exe                105321    2021.03.23 12:34"))
021a4     1A 00 00 FF 
021a8     5F D5 05 F6 | 	mov	arg03, ##@LR__0279
021ac     01 D0 05 F6 | 	mov	arg01, #1
021b0     13 D2 05 F6 | 	mov	arg02, #19
021b4     C0 01 B0 FD | 	call	#_outtextxy
021b8                 | ' 
021b8                 | ' 
021b8                 | ' 
021b8                 | '   waitvbl(12000)
021b8     17 00 00 FF 
021bc     E0 D0 05 F6 | 	mov	arg01, ##12000
021c0     10 00 B0 FD | 	call	#_waitvbl
021c4     58 E8 9F FD | 	jmp	#LR__0004
021c8     AF F0 03 F6 | 	mov	ptra, fp
021cc     BF 00 A0 FD | 	call	#popregs_
021d0                 | _demo_ret
021d0     2D 00 64 FD | 	ret
021d4                 | 
021d4                 | ' 
021d4                 | ' '*************************************************************************
021d4                 | ' '                                                                        *
021d4                 | ' '  VBlank functions                                                      *
021d4                 | ' '                                                                        *
021d4                 | ' '*************************************************************************
021d4                 | ' 
021d4                 | ' pub waitvbl(amount) | i
021d4                 | _waitvbl
021d4     04 5A 05 F6 | 	mov	COUNT_, #4
021d8     B0 00 A0 FD | 	call	#pushregs_
021dc     E8 F4 01 F6 | 	mov	local01, arg01
021e0                 | ' 
021e0                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
021e0                 | ' 
021e0                 | ' repeat i from 1 to amount
021e0     01 F6 05 F6 | 	mov	local02, #1
021e4     01 F4 5D F2 | 	cmps	local01, #1 wcz
021e8     01 F8 05 16 |  if_a	mov	local03, #1
021ec     01 F8 65 E6 |  if_be	neg	local03, #1
021f0     FC F4 01 F1 | 	add	local01, local03
021f4                 | LR__0086
021f4                 | '   repeat until vblank==0
021f4                 | LR__0087
021f4     17 00 00 FF 
021f8     A4 B9 05 F1 | 	add	objptr, ##12196
021fc     DC FA 09 FB | 	rdlong	local04, objptr wz
02200     17 00 00 FF 
02204     A4 B9 85 F1 | 	sub	objptr, ##12196
02208     0C 00 90 AD |  if_e	jmp	#LR__0088
0220c                 | '     waitus(100)
0220c     64 D0 05 F6 | 	mov	arg01, #100
02210     E4 0C B0 FD | 	call	#__system___waitus
02214     DC FF 9F FD | 	jmp	#LR__0087
02218                 | LR__0088
02218                 | '   repeat until vblank==1
02218                 | LR__0089
02218     17 00 00 FF 
0221c     A4 B9 05 F1 | 	add	objptr, ##12196
02220     DC FA 01 FB | 	rdlong	local04, objptr
02224     17 00 00 FF 
02228     A4 B9 85 F1 | 	sub	objptr, ##12196
0222c     01 FA 0D F2 | 	cmp	local04, #1 wz
02230     0C 00 90 AD |  if_e	jmp	#LR__0090
02234                 | '     waitus(100)
02234     64 D0 05 F6 | 	mov	arg01, #100
02238     BC 0C B0 FD | 	call	#__system___waitus
0223c     D8 FF 9F FD | 	jmp	#LR__0089
02240                 | LR__0090
02240     FC F6 01 F1 | 	add	local02, local03
02244     FA F6 09 F2 | 	cmp	local02, local01 wz
02248     A8 FF 9F 5D |  if_ne	jmp	#LR__0086
0224c     AF F0 03 F6 | 	mov	ptra, fp
02250     BF 00 A0 FD | 	call	#popregs_
02254                 | _waitvbl_ret
02254     2D 00 64 FD | 	ret
02258                 | 
02258                 | ' 
02258                 | ' '*************************************************************************
02258                 | ' '                                                                        *
02258                 | ' '  Color functions                                                       *
02258                 | ' '                                                                        *
02258                 | ' '*************************************************************************
02258                 | ' 
02258                 | ' pub setscreencolors(ff,bb) | c ,i
02258                 | _setscreencolors
02258     18 D0 65 F0 | 	shl	arg01, #24
0225c     10 D2 65 F0 | 	shl	arg02, #16
02260     E9 D0 01 F1 | 	add	arg01, arg02
02264                 | ' 
02264                 | ' ''---------- Set font and back colors for all screen - from 256 color palette
02264                 | ' 
02264                 | ' c:=ff<<24+bb<<16
02264     A8 B8 05 F1 | 	add	objptr, #168
02268     DC C0 01 F6 | 	mov	_var01, objptr
0226c     A8 B8 85 F1 | 	sub	objptr, #168
02270     AC DD 9F FE | 	loc	pa,	#(@LR__0093-@LR__0091)
02274     93 00 A0 FD | 	call	#FCACHE_LOAD_
02278                 | LR__0091
02278     05 00 00 FF 
0227c     B8 0D DC FC | 	rep	@LR__0094, ##3000
02280                 | LR__0092
02280     E0 C2 01 FB | 	rdlong	_var02, _var01
02284     7F 00 00 FF 
02288     FF C3 05 F5 | 	and	_var02, ##65535
0228c     E8 C2 41 F5 | 	or	_var02, arg01
02290                 | '    buf[i]:= (buf[i] & $FFFF) |  c
02290     E0 C2 61 FC | 	wrlong	_var02, _var01
02294     04 C0 05 F1 | 	add	_var01, #4
02298                 | LR__0093
02298                 | LR__0094
02298                 | _setscreencolors_ret
02298     2D 00 64 FD | 	ret
0229c                 | 
0229c                 | ' 
0229c                 | ' 
0229c                 | ' pub setbordercolors(r,g,b) |color, i
0229c                 | _setbordercolors
0229c     10 D0 65 F0 | 	shl	arg01, #16
022a0     08 D2 65 F0 | 	shl	arg02, #8
022a4     E9 D0 01 F1 | 	add	arg01, arg02
022a8     EA D0 01 F1 | 	add	arg01, arg03
022ac                 | ' 
022ac                 | ' ''---------- Set border color for all screen - rgb
022ac                 | ' 
022ac                 | ' color:=r<<16+g<<8+b
022ac     28 B8 05 F1 | 	add	objptr, #40
022b0     DC C0 01 F6 | 	mov	_var01, objptr
022b4     28 B8 85 F1 | 	sub	objptr, #40
022b8     50 DD 9F FE | 	loc	pa,	#(@LR__0097-@LR__0095)
022bc     93 00 A0 FD | 	call	#FCACHE_LOAD_
022c0                 | LR__0095
022c0     20 04 DC FC | 	rep	@LR__0098, #32
022c4                 | LR__0096
022c4                 | '   bordercolor[i]:=color
022c4     E0 D0 61 FC | 	wrlong	arg01, _var01
022c8     04 C0 05 F1 | 	add	_var01, #4
022cc                 | LR__0097
022cc                 | LR__0098
022cc                 | _setbordercolors_ret
022cc     2D 00 64 FD | 	ret
022d0                 | 
022d0                 | ' 
022d0                 | ' 
022d0                 | ' 
022d0                 | ' pub setfontcolor(x,y,c) |   place, color
022d0                 | _setfontcolor
022d0     64 D2 05 FD | 	qmul	arg02, #100
022d4     18 C0 61 FD | 	getqx	_var01
022d8     E0 D0 01 F1 | 	add	arg01, _var01
022dc                 | ' 
022dc                 | ' ''---------- Set the colors for the character at line (0..29) and position (0..99)
022dc                 | ' 
022dc                 | ' place:=(x)+(y*100)
022dc                 | ' 
022dc                 | ' if (place>2999)
022dc     05 00 00 FF 
022e0     B7 D1 5D F2 | 	cmps	arg01, ##2999 wcz
022e4                 | '   place:=2999
022e4     05 00 00 1F 
022e8     B7 D1 05 16 |  if_a	mov	arg01, ##2999
022ec     E8 C2 01 F6 | 	mov	_var02, arg01
022f0     02 C2 65 F0 | 	shl	_var02, #2
022f4     A8 B8 05 F1 | 	add	objptr, #168
022f8     DC C2 01 F1 | 	add	_var02, objptr
022fc     E1 C4 01 FB | 	rdlong	_var03, _var02
02300     FF 7F 00 FF 
02304     FF C5 05 F5 | 	and	_var03, ##16777215
02308     18 D4 65 F0 | 	shl	arg03, #24
0230c     EA C4 41 F5 | 	or	_var03, arg03
02310                 | ' 
02310                 | ' color:=(buf[place] &$FFFFFF) | (c<<24)
02310     02 D0 65 F0 | 	shl	arg01, #2
02314     DC D0 01 F1 | 	add	arg01, objptr
02318                 | ' buf[place]:=color
02318     E8 C4 61 FC | 	wrlong	_var03, arg01
0231c     A8 B8 85 F1 | 	sub	objptr, #168
02320                 | _setfontcolor_ret
02320     2D 00 64 FD | 	ret
02324                 | 
02324                 | ' 
02324                 | ' 
02324                 | ' pub setbackcolor(x,y,c) | place, color
02324                 | _setbackcolor
02324     64 D2 05 FD | 	qmul	arg02, #100
02328     18 C0 61 FD | 	getqx	_var01
0232c     E0 D0 01 F1 | 	add	arg01, _var01
02330                 | ' 
02330                 | ' ''---------- Set the background color at line (0..29) and position (0..99)
02330                 | ' 
02330                 | ' place:=(x)+(y*100)
02330                 | ' 
02330                 | ' if (place>2999)
02330     05 00 00 FF 
02334     B7 D1 5D F2 | 	cmps	arg01, ##2999 wcz
02338                 | '   place:=2999
02338     05 00 00 1F 
0233c     B7 D1 05 16 |  if_a	mov	arg01, ##2999
02340     E8 C2 01 F6 | 	mov	_var02, arg01
02344     02 C2 65 F0 | 	shl	_var02, #2
02348     A8 B8 05 F1 | 	add	objptr, #168
0234c     DC C2 01 F1 | 	add	_var02, objptr
02350     E1 C4 01 FB | 	rdlong	_var03, _var02
02354     7F 80 7F FF 
02358     FF C5 05 F5 | 	and	_var03, ##-16711681
0235c     10 D4 65 F0 | 	shl	arg03, #16
02360     EA C4 41 F5 | 	or	_var03, arg03
02364                 | ' 
02364                 | ' color:=(buf[place] &$FF00FFFF) | (c<<16)
02364     02 D0 65 F0 | 	shl	arg01, #2
02368     DC D0 01 F1 | 	add	arg01, objptr
0236c                 | ' buf[place]:=color
0236c     E8 C4 61 FC | 	wrlong	_var03, arg01
02370     A8 B8 85 F1 | 	sub	objptr, #168
02374                 | _setbackcolor_ret
02374     2D 00 64 FD | 	ret
02378                 | 
02378                 | ' 
02378                 | ' 
02378                 | ' '*************************************************************************
02378                 | ' '                                                                        *
02378                 | ' '  Text functions                                                        *
02378                 | ' '                                                                        *
02378                 | ' '*************************************************************************
02378                 | ' 
02378                 | ' pub outtextxy(x,y,text) | iii
02378                 | _outtextxy
02378     0B 5A 05 F6 | 	mov	COUNT_, #11
0237c     B0 00 A0 FD | 	call	#pushregs_
02380     E8 F4 01 F6 | 	mov	local01, arg01
02384                 | ' 
02384                 | ' ''--------- Output a string at position x,y - set the colors first
02384                 | ' 
02384                 | ' repeat iii from 0 to strsize(text)-1
02384     00 F6 05 F6 | 	mov	local02, #0
02388     EA D0 01 F6 | 	mov	arg01, arg03
0238c     00 F8 05 F6 | 	mov	local03, #0
02390     7C DC 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
02394     93 00 A0 FD | 	call	#FCACHE_LOAD_
02398                 | LR__0099
02398     E8 FA C9 FA | 	rdbyte	local04, arg01 wz
0239c     01 F8 05 51 |  if_ne	add	local03, #1
023a0     01 D0 05 51 |  if_ne	add	arg01, #1
023a4     F0 FF 9F 5D |  if_ne	jmp	#LR__0099
023a8                 | LR__0100
023a8     FC BE 01 F6 | 	mov	result1, local03
023ac     DF FC 01 F6 | 	mov	local05, result1
023b0     01 FC 85 F1 | 	sub	local05, #1
023b4     00 FC 5D F2 | 	cmps	local05, #0 wcz
023b8     01 FE 05 16 |  if_a	mov	local06, #1
023bc     01 FE 65 E6 |  if_be	neg	local06, #1
023c0     FF FC 01 F1 | 	add	local05, local06
023c4     64 D2 05 FD | 	qmul	arg02, #100
023c8     18 00 62 FD | 	getqx	local07
023cc     FA 00 02 F1 | 	add	local07, local01
023d0     6C DC 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
023d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
023d8                 | LR__0101
023d8     00 03 02 F6 | 	mov	local08, local07
023dc     FB 02 02 F1 | 	add	local08, local02
023e0     02 02 66 F0 | 	shl	local08, #2
023e4     A8 B8 05 F1 | 	add	objptr, #168
023e8     DC 02 02 F1 | 	add	local08, objptr
023ec     01 05 02 FB | 	rdlong	local09, local08
023f0     FF 04 26 F5 | 	andn	local09, #255
023f4     EA 06 02 F6 | 	mov	local10, arg03
023f8     FB 06 02 F1 | 	add	local10, local02
023fc     03 09 C2 FA | 	rdbyte	local11, local10
02400     04 05 42 F5 | 	or	local09, local11
02404                 | '   buf[100*y+x+iii]:=(buf[100*y+x+iii] & $FFFFFF00)  | byte[text+iii]
02404     01 05 62 FC | 	wrlong	local09, local08
02408     FF F6 01 F1 | 	add	local02, local06
0240c     FE F6 09 F2 | 	cmp	local02, local05 wz
02410     A8 B8 85 F1 | 	sub	objptr, #168
02414     C0 FF 9F 5D |  if_ne	jmp	#LR__0101
02418                 | LR__0102
02418     AF F0 03 F6 | 	mov	ptra, fp
0241c     BF 00 A0 FD | 	call	#popregs_
02420                 | _outtextxy_ret
02420     2D 00 64 FD | 	ret
02424                 | 
02424                 | ' 
02424                 | ' pub outtextxyc(x,y,text,f,b) | iii,c
02424                 | _outtextxyc
02424     0D 5A 05 F6 | 	mov	COUNT_, #13
02428     B0 00 A0 FD | 	call	#pushregs_
0242c     E8 F4 01 F6 | 	mov	local01, arg01
02430     18 D6 65 F0 | 	shl	arg04, #24
02434     10 D8 65 F0 | 	shl	arg05, #16
02438     EC D6 01 F1 | 	add	arg04, arg05
0243c                 | ' 
0243c                 | ' ''--------- Output a string at position x,y and colors b,f
0243c                 | ' 
0243c                 | ' c:=f<<24+b<<16
0243c                 | ' repeat iii from 0 to strsize(text)-1
0243c     00 F6 05 F6 | 	mov	local02, #0
02440     EA D0 01 F6 | 	mov	arg01, arg03
02444     00 F8 05 F6 | 	mov	local03, #0
02448     C4 DB 9F FE | 	loc	pa,	#(@LR__0104-@LR__0103)
0244c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02450                 | LR__0103
02450     E8 FA C9 FA | 	rdbyte	local04, arg01 wz
02454     01 F8 05 51 |  if_ne	add	local03, #1
02458     01 D0 05 51 |  if_ne	add	arg01, #1
0245c     F0 FF 9F 5D |  if_ne	jmp	#LR__0103
02460                 | LR__0104
02460     FC BE 01 F6 | 	mov	result1, local03
02464     DF FC 01 F6 | 	mov	local05, result1
02468     01 FC 85 F1 | 	sub	local05, #1
0246c     00 FC 5D F2 | 	cmps	local05, #0 wcz
02470     01 FE 05 16 |  if_a	mov	local06, #1
02474     01 FE 65 E6 |  if_be	neg	local06, #1
02478     FF FC 01 F1 | 	add	local05, local06
0247c     64 D2 05 FD | 	qmul	arg02, #100
02480     18 00 62 FD | 	getqx	local07
02484     FA 00 02 F1 | 	add	local07, local01
02488     D4 DB 9F FE | 	loc	pa,	#(@LR__0106-@LR__0105)
0248c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02490                 | LR__0105
02490     00 03 02 F6 | 	mov	local08, local07
02494     FB 02 02 F1 | 	add	local08, local02
02498     01 05 02 F6 | 	mov	local09, local08
0249c     02 04 66 F0 | 	shl	local09, #2
024a0     A8 B8 05 F1 | 	add	objptr, #168
024a4     DC 04 02 F1 | 	add	local09, objptr
024a8     02 07 02 FB | 	rdlong	local10, local09
024ac     FF 06 26 F5 | 	andn	local10, #255
024b0     EA 08 02 F6 | 	mov	local11, arg03
024b4     FB 08 02 F1 | 	add	local11, local02
024b8     04 0B C2 FA | 	rdbyte	local12, local11
024bc     05 07 42 F5 | 	or	local10, local12
024c0                 | '   buf[100*y+x+iii]:=(buf[100*y+x+iii] & $FFFFFF00)  | byte[text+iii]
024c0     02 07 62 FC | 	wrlong	local10, local09
024c4     02 02 66 F0 | 	shl	local08, #2
024c8     DC 02 02 F1 | 	add	local08, objptr
024cc     01 0D 02 FB | 	rdlong	local13, local08
024d0     7F 00 00 FF 
024d4     FF 0D 06 F5 | 	and	local13, ##65535
024d8     EB 0C 42 F5 | 	or	local13, arg04
024dc                 | '   buf[100*y+x+iii]:=(buf[100*y+x+iii] & $0000FFFF)  | c
024dc     01 0D 62 FC | 	wrlong	local13, local08
024e0     FF F6 01 F1 | 	add	local02, local06
024e4     FE F6 09 F2 | 	cmp	local02, local05 wz
024e8     A8 B8 85 F1 | 	sub	objptr, #168
024ec     A0 FF 9F 5D |  if_ne	jmp	#LR__0105
024f0                 | LR__0106
024f0     AF F0 03 F6 | 	mov	ptra, fp
024f4     BF 00 A0 FD | 	call	#popregs_
024f8                 | _outtextxyc_ret
024f8     2D 00 64 FD | 	ret
024fc                 | 
024fc                 | ' 
024fc                 | ' 
024fc                 | ' 
024fc                 | ' pub write(text) | iii,c,ncx,ncy
024fc                 | _write
024fc     0E 5A 05 F6 | 	mov	COUNT_, #14
02500     B0 00 A0 FD | 	call	#pushregs_
02504     E8 F4 01 F6 | 	mov	local01, arg01
02508     17 00 00 FF 
0250c     8C B9 05 F1 | 	add	objptr, ##12172
02510     DC F6 01 FB | 	rdlong	local02, objptr
02514     18 F6 65 F0 | 	shl	local02, #24
02518     04 B8 05 F1 | 	add	objptr, #4
0251c     DC F8 01 FB | 	rdlong	local03, objptr
02520     10 F8 65 F0 | 	shl	local03, #16
02524     FC F6 01 F1 | 	add	local02, local03
02528                 | ' 
02528                 | ' ''--------- Output a string at the cursor position x,y, move the cursor
02528                 | ' 
02528                 | ' c:=write_color<<24+write_background<<16
02528                 | ' 'debug(uhex_long(write_color))
02528                 | ' ncy:=cursor_y
02528     07 B8 85 F1 | 	sub	objptr, #7
0252c     DC FA C1 FA | 	rdbyte	local04, objptr
02530                 | ' ncx:=cursor_x+strsize(text)
02530     01 B8 85 F1 | 	sub	objptr, #1
02534     DC FC C1 FA | 	rdbyte	local05, objptr
02538     17 00 00 FF 
0253c     88 B9 85 F1 | 	sub	objptr, ##12168
02540     FA D0 01 F6 | 	mov	arg01, local01
02544     00 FE 05 F6 | 	mov	local06, #0
02548     C4 DA 9F FE | 	loc	pa,	#(@LR__0108-@LR__0107)
0254c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02550                 | LR__0107
02550     E8 00 CA FA | 	rdbyte	local07, arg01 wz
02554     01 FE 05 51 |  if_ne	add	local06, #1
02558     01 D0 05 51 |  if_ne	add	arg01, #1
0255c     F0 FF 9F 5D |  if_ne	jmp	#LR__0107
02560                 | LR__0108
02560     FF BE 01 F6 | 	mov	result1, local06
02564     FF FC 01 F1 | 	add	local05, local06
02568     FE 02 02 F6 | 	mov	local08, local05
0256c     A0 DA 9F FE | 	loc	pa,	#(@LR__0110-@LR__0109)
02570     93 00 A0 FD | 	call	#FCACHE_LOAD_
02574                 | ' repeat while ncx>99
02574                 | LR__0109
02574     63 02 5E F2 | 	cmps	local08, #99 wcz
02578                 | '   ncx-=100
02578     64 02 86 11 |  if_a	sub	local08, #100
0257c                 | '   ncy+=1
0257c     01 FA 05 11 |  if_a	add	local04, #1
02580     F0 FF 9F 1D |  if_a	jmp	#LR__0109
02584                 | LR__0110
02584                 | ' repeat while ncy>29
02584                 | LR__0111
02584     1D FA 5D F2 | 	cmps	local04, #29 wcz
02588     28 00 90 ED |  if_be	jmp	#LR__0112
0258c                 | '   ncy-=1
0258c     01 FA 85 F1 | 	sub	local04, #1
02590                 | '   scrollup()
02590     DC 01 B0 FD | 	call	#_scrollup
02594                 | '   cursor_y-=1
02594     17 00 00 FF 
02598     89 B9 05 F1 | 	add	objptr, ##12169
0259c     DC FC C1 FA | 	rdbyte	local05, objptr
025a0     01 FC 85 F1 | 	sub	local05, #1
025a4     DC FC 41 FC | 	wrbyte	local05, objptr
025a8     17 00 00 FF 
025ac     89 B9 85 F1 | 	sub	objptr, ##12169
025b0     D0 FF 9F FD | 	jmp	#LR__0111
025b4                 | LR__0112
025b4                 | ' 
025b4                 | ' repeat iii from 0 to strsize(text)-1
025b4     00 04 06 F6 | 	mov	local09, #0
025b8     FA D0 01 F6 | 	mov	arg01, local01
025bc     00 FE 05 F6 | 	mov	local06, #0
025c0     4C DA 9F FE | 	loc	pa,	#(@LR__0114-@LR__0113)
025c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
025c8                 | LR__0113
025c8     E8 00 CA FA | 	rdbyte	local07, arg01 wz
025cc     01 FE 05 51 |  if_ne	add	local06, #1
025d0     01 D0 05 51 |  if_ne	add	arg01, #1
025d4     F0 FF 9F 5D |  if_ne	jmp	#LR__0113
025d8                 | LR__0114
025d8     FF BE 01 F6 | 	mov	result1, local06
025dc     DF 06 02 F6 | 	mov	local10, result1
025e0     01 06 86 F1 | 	sub	local10, #1
025e4     00 06 5E F2 | 	cmps	local10, #0 wcz
025e8     01 08 06 16 |  if_a	mov	local11, #1
025ec     01 08 66 E6 |  if_be	neg	local11, #1
025f0     04 07 02 F1 | 	add	local10, local11
025f4     60 DA 9F FE | 	loc	pa,	#(@LR__0116-@LR__0115)
025f8     93 00 A0 FD | 	call	#FCACHE_LOAD_
025fc                 | LR__0115
025fc     17 00 00 FF 
02600     89 B9 05 F1 | 	add	objptr, ##12169
02604     DC 0A C2 FA | 	rdbyte	local12, objptr
02608     64 0A 06 FD | 	qmul	local12, #100
0260c     18 0C 62 FD | 	getqx	local13
02610     01 B8 85 F1 | 	sub	objptr, #1
02614     DC 0A C2 FA | 	rdbyte	local12, objptr
02618     05 0D 02 F1 | 	add	local13, local12
0261c     02 0D 02 F1 | 	add	local13, local09
02620     02 0C 66 F0 | 	shl	local13, #2
02624     17 00 00 FF 
02628     E0 B8 85 F1 | 	sub	objptr, ##12000
0262c     DC 0C 02 F1 | 	add	local13, objptr
02630     06 0F 02 FB | 	rdlong	local14, local13
02634     7F 00 00 FF 
02638     FF 0F 06 F5 | 	and	local14, ##65535
0263c     FB 0E 42 F5 | 	or	local14, local02
02640                 | ' 
02640                 | '   buf[100*cursor_y+cursor_x+iii]:=buf[100*cursor_y+cursor_x+iii] &$FFFF | c
02640     06 0F 62 FC | 	wrlong	local14, local13
02644     04 05 02 F1 | 	add	local09, local11
02648     03 05 0A F2 | 	cmp	local09, local10 wz
0264c     A8 B8 85 F1 | 	sub	objptr, #168
02650     A8 FF 9F 5D |  if_ne	jmp	#LR__0115
02654                 | LR__0116
02654                 | ' 
02654                 | ' outtextxy(cursor_x,cursor_y,text)
02654     17 00 00 FF 
02658     88 B9 05 F1 | 	add	objptr, ##12168
0265c     DC D0 C1 FA | 	rdbyte	arg01, objptr
02660     01 B8 05 F1 | 	add	objptr, #1
02664     DC D2 C1 FA | 	rdbyte	arg02, objptr
02668     17 00 00 FF 
0266c     89 B9 85 F1 | 	sub	objptr, ##12169
02670     FA D4 01 F6 | 	mov	arg03, local01
02674     00 FD BF FD | 	call	#_outtextxy
02678                 | ' 
02678                 | ' cursor_x:=ncx
02678     17 00 00 FF 
0267c     88 B9 05 F1 | 	add	objptr, ##12168
02680     DC 02 42 FC | 	wrbyte	local08, objptr
02684                 | ' cursor_y:=ncy
02684     01 B8 05 F1 | 	add	objptr, #1
02688     DC FA 41 FC | 	wrbyte	local04, objptr
0268c     17 00 00 FF 
02690     89 B9 85 F1 | 	sub	objptr, ##12169
02694     AF F0 03 F6 | 	mov	ptra, fp
02698     BF 00 A0 FD | 	call	#popregs_
0269c                 | _write_ret
0269c     2D 00 64 FD | 	ret
026a0                 | 
026a0                 | ' 
026a0                 | ' pub writeln(text)
026a0                 | _writeln
026a0     01 5A 05 F6 | 	mov	COUNT_, #1
026a4     B0 00 A0 FD | 	call	#pushregs_
026a8                 | ' 
026a8                 | ' '--------- Output a string at the cursor position x,y, move the cursor to the next line
026a8                 | ' 
026a8                 | ' write(text)
026a8     50 FE BF FD | 	call	#_write
026ac                 | ' cursor_x:=0
026ac     17 00 00 FF 
026b0     88 B9 05 F1 | 	add	objptr, ##12168
026b4     DC 00 48 FC | 	wrbyte	#0, objptr
026b8                 | ' cursor_y+=1
026b8     01 B8 05 F1 | 	add	objptr, #1
026bc     DC F4 C1 FA | 	rdbyte	local01, objptr
026c0     01 F4 05 F1 | 	add	local01, #1
026c4     DC F4 41 FC | 	wrbyte	local01, objptr
026c8                 | ' if (cursor_y>29)
026c8     DC F4 C1 FA | 	rdbyte	local01, objptr
026cc     17 00 00 FF 
026d0     89 B9 85 F1 | 	sub	objptr, ##12169
026d4     1D F4 5D F2 | 	cmps	local01, #29 wcz
026d8     18 00 90 ED |  if_be	jmp	#LR__0117
026dc                 | '   scrollup()
026dc     90 00 B0 FD | 	call	#_scrollup
026e0                 | '   cursor_y:=29
026e0     17 00 00 FF 
026e4     89 B9 05 F1 | 	add	objptr, ##12169
026e8     DC 3A 48 FC | 	wrbyte	#29, objptr
026ec     17 00 00 FF 
026f0     89 B9 85 F1 | 	sub	objptr, ##12169
026f4                 | LR__0117
026f4     AF F0 03 F6 | 	mov	ptra, fp
026f8     BF 00 A0 FD | 	call	#popregs_
026fc                 | _writeln_ret
026fc     2D 00 64 FD | 	ret
02700                 | 
02700                 | ' 
02700                 | ' pub cls(fc,bc)   :c
02700                 | _cls
02700     04 5A 05 F6 | 	mov	COUNT_, #4
02704     B0 00 A0 FD | 	call	#pushregs_
02708     E8 F4 01 F6 | 	mov	local01, arg01
0270c     E9 F6 01 F6 | 	mov	local02, arg02
02710     FA F8 01 F6 | 	mov	local03, local01
02714     18 F8 65 F0 | 	shl	local03, #24
02718     FB FA 01 F6 | 	mov	local04, local02
0271c     10 FA 65 F0 | 	shl	local04, #16
02720     FD F8 01 F1 | 	add	local03, local04
02724     20 F8 05 F1 | 	add	local03, #32
02728                 | ' 
02728                 | ' ''---------- Clear the screen, set its foreground/background color
02728                 | ' 
02728                 | ' c:=fc<<24+bc<<16+$20
02728     A8 B8 05 F1 | 	add	objptr, #168
0272c     DC D0 01 F6 | 	mov	arg01, objptr
02730     A8 B8 85 F1 | 	sub	objptr, #168
02734                 | ' longfill(@buf,c,3000)
02734     FC D2 01 F6 | 	mov	arg02, local03
02738     05 00 00 FF 
0273c     B8 D5 05 F6 | 	mov	arg03, ##3000
02740     A8 00 A0 FD | 	call	#\builtin_longfill_
02744                 | '  setwritecolors(fc,bc)
02744                 | ' 
02744                 | ' ''---------- Set colors for write and writeln
02744                 | ' 
02744                 | ' write_color:=ff
02744     17 00 00 FF 
02748     8C B9 05 F1 | 	add	objptr, ##12172
0274c     DC F4 61 FC | 	wrlong	local01, objptr
02750                 | ' write_background:=bb
02750     04 B8 05 F1 | 	add	objptr, #4
02754     DC F6 61 FC | 	wrlong	local02, objptr
02758     17 00 00 FF 
0275c     90 B9 85 F1 | 	sub	objptr, ##12176
02760     FC BE 01 F6 | 	mov	result1, local03
02764     AF F0 03 F6 | 	mov	ptra, fp
02768     BF 00 A0 FD | 	call	#popregs_
0276c                 | _cls_ret
0276c     2D 00 64 FD | 	ret
02770                 | 
02770                 | ' 
02770                 | ' pub scrollup() | i
02770                 | _scrollup
02770     02 5A 05 F6 | 	mov	COUNT_, #2
02774     B0 00 A0 FD | 	call	#pushregs_
02778     A8 B8 05 F1 | 	add	objptr, #168
0277c     DC D0 01 F6 | 	mov	arg01, objptr
02780     A8 B8 85 F1 | 	sub	objptr, #168
02784     E8 D2 01 F6 | 	mov	arg02, arg01
02788     90 D3 05 F1 | 	add	arg02, #400
0278c                 | ' 
0278c                 | ' ''-----------  Scroll the screen one line up
0278c                 | ' 
0278c                 | ' longmove(@buf,@buf+400,2900)
0278c     05 00 00 FF 
02790     54 D5 05 F6 | 	mov	arg03, ##2900
02794     F0 06 B0 FD | 	call	#__system__longmove
02798     16 00 00 FF 
0279c     F8 B9 05 F1 | 	add	objptr, ##11768
027a0     DC F4 01 F6 | 	mov	local01, objptr
027a4     16 00 00 FF 
027a8     F8 B9 85 F1 | 	sub	objptr, ##11768
027ac     6C D8 9F FE | 	loc	pa,	#(@LR__0120-@LR__0118)
027b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
027b4                 | LR__0118
027b4     64 0C DC FC | 	rep	@LR__0121, #100
027b8                 | LR__0119
027b8     FA F6 01 FB | 	rdlong	local02, local01
027bc     80 FF 7F FF 
027c0     00 F6 05 F5 | 	and	local02, ##-65536
027c4     20 F6 45 F5 | 	or	local02, #32
027c8                 | '   buf[i]:=(buf[i] & $FFFF0000) | 32
027c8     FA F6 61 FC | 	wrlong	local02, local01
027cc     04 F4 05 F1 | 	add	local01, #4
027d0                 | LR__0120
027d0                 | LR__0121
027d0     AF F0 03 F6 | 	mov	ptra, fp
027d4     BF 00 A0 FD | 	call	#popregs_
027d8                 | _scrollup_ret
027d8     2D 00 64 FD | 	ret
027dc                 | 
027dc                 | ' 
027dc                 | ' pub scrolldown() | i
027dc                 | _scrolldown
027dc     02 5A 05 F6 | 	mov	COUNT_, #2
027e0     B0 00 A0 FD | 	call	#pushregs_
027e4     A8 B8 05 F1 | 	add	objptr, #168
027e8     DC D2 01 F6 | 	mov	arg02, objptr
027ec     A8 B8 85 F1 | 	sub	objptr, #168
027f0     E9 D0 01 F6 | 	mov	arg01, arg02
027f4     90 D1 05 F1 | 	add	arg01, #400
027f8                 | ' 
027f8                 | ' ''----------- Scroll the screen one line down
027f8                 | ' 
027f8                 | ' longmove(@buf+400,@buf,2900)
027f8     05 00 00 FF 
027fc     54 D5 05 F6 | 	mov	arg03, ##2900
02800     84 06 B0 FD | 	call	#__system__longmove
02804     A8 B8 05 F1 | 	add	objptr, #168
02808     DC F4 01 F6 | 	mov	local01, objptr
0280c     A8 B8 85 F1 | 	sub	objptr, #168
02810     08 D8 9F FE | 	loc	pa,	#(@LR__0124-@LR__0122)
02814     93 00 A0 FD | 	call	#FCACHE_LOAD_
02818                 | LR__0122
02818     64 0C DC FC | 	rep	@LR__0125, #100
0281c                 | LR__0123
0281c     FA F6 01 FB | 	rdlong	local02, local01
02820     80 FF 7F FF 
02824     00 F6 05 F5 | 	and	local02, ##-65536
02828     20 F6 45 F5 | 	or	local02, #32
0282c                 | '   buf[i]:=(buf[i] & $FFFF0000) | 32
0282c     FA F6 61 FC | 	wrlong	local02, local01
02830     04 F4 05 F1 | 	add	local01, #4
02834                 | LR__0124
02834                 | LR__0125
02834     AF F0 03 F6 | 	mov	ptra, fp
02838     BF 00 A0 FD | 	call	#popregs_
0283c                 | _scrolldown_ret
0283c     2D 00 64 FD | 	ret
02840                 | 
02840                 | ' 
02840                 | ' 
02840                 | ' pub inttostr(i):result |q,pos,k,j
02840                 | _inttostr
02840     07 5A 05 F6 | 	mov	COUNT_, #7
02844     B0 00 A0 FD | 	call	#pushregs_
02848     E8 F4 01 F6 | 	mov	local01, arg01
0284c                 | ' 
0284c                 | ' ''---------- Convert a integer to dec string, return a pointer
0284c                 | ' 
0284c                 | ' j:=i
0284c     FA F6 09 F6 | 	mov	local02, local01 wz
02850                 | ' pos:=10
02850     0A F8 05 F6 | 	mov	local03, #10
02854                 | ' k:=0
02854     00 FA 05 F6 | 	mov	local04, #0
02858                 | ' 
02858                 | ' if (j==0)
02858     20 00 90 5D |  if_ne	jmp	#LR__0126
0285c                 | '   n_string[0]:=48
0285c     17 00 00 FF 
02860     A8 B9 05 F1 | 	add	objptr, ##12200
02864     DC 60 48 FC | 	wrbyte	#48, objptr
02868                 | '   n_string[1]:=0
02868     01 B8 05 F1 | 	add	objptr, #1
0286c     DC 00 48 FC | 	wrbyte	#0, objptr
02870     17 00 00 FF 
02874     A9 B9 85 F1 | 	sub	objptr, ##12201
02878                 | ' 
02878                 | ' else
02878     F4 00 90 FD | 	jmp	#LR__0133
0287c                 | LR__0126
0287c                 | '   if (j<0)
0287c     00 F6 5D F2 | 	cmps	local02, #0 wcz
02880                 | '     j:=0-j
02880     FB F6 61 C6 |  if_b	neg	local02, local02
02884                 | '     k:=45
02884     2D FA 05 C6 |  if_b	mov	local04, #45
02888                 | ' 
02888                 | '   n_string[11]:=0
02888     17 00 00 FF 
0288c     B3 B9 05 F1 | 	add	objptr, ##12211
02890     DC 00 48 FC | 	wrbyte	#0, objptr
02894     17 00 00 FF 
02898     B3 B9 85 F1 | 	sub	objptr, ##12211
0289c     A8 D7 9F FE | 	loc	pa,	#(@LR__0128-@LR__0127)
028a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
028a4                 | '   repeat while (pos>-1)
028a4                 | LR__0127
028a4     FF FF 7F FF 
028a8     FF F9 5D F2 | 	cmps	local03, ##-1 wcz
028ac     3C 00 90 ED |  if_be	jmp	#LR__0129
028b0     FB 86 02 F6 | 	mov	muldiva_, local02
028b4     0A 88 06 F6 | 	mov	muldivb_, #10
028b8     D0 00 A0 FD | 	call	#divide_
028bc     43 FD 01 F6 | 	mov	local05, muldiva_
028c0                 | '     q:=j//10
028c0                 | '     q:=48+q
028c0     30 FC 05 F1 | 	add	local05, #48
028c4     FC FE 01 F6 | 	mov	local06, local03
028c8     17 00 00 FF 
028cc     A8 B9 05 F1 | 	add	objptr, ##12200
028d0     DC FE 01 F1 | 	add	local06, objptr
028d4                 | '     n_string[pos]:=q
028d4     FF FC 41 FC | 	wrbyte	local05, local06
028d8                 | '     j:=j/10
028d8     44 F7 01 F6 | 	mov	local02, muldivb_
028dc                 | '     pos-=1
028dc     01 F8 85 F1 | 	sub	local03, #1
028e0     17 00 00 FF 
028e4     A8 B9 85 F1 | 	sub	objptr, ##12200
028e8     B8 FF 9F FD | 	jmp	#LR__0127
028ec                 | LR__0128
028ec                 | LR__0129
028ec                 | '   repeat while n_string[0]==48
028ec                 | LR__0130
028ec     17 00 00 FF 
028f0     A8 B9 05 F1 | 	add	objptr, ##12200
028f4     DC 00 C2 FA | 	rdbyte	local07, objptr
028f8     17 00 00 FF 
028fc     A8 B9 85 F1 | 	sub	objptr, ##12200
02900     30 00 0E F2 | 	cmp	local07, #48 wz
02904     28 00 90 5D |  if_ne	jmp	#LR__0131
02908     17 00 00 FF 
0290c     A8 B9 05 F1 | 	add	objptr, ##12200
02910     DC D0 01 F6 | 	mov	arg01, objptr
02914     17 00 00 FF 
02918     A8 B9 85 F1 | 	sub	objptr, ##12200
0291c     E8 D2 01 F6 | 	mov	arg02, arg01
02920     01 D2 05 F1 | 	add	arg02, #1
02924                 | '     bytemove(@n_string,@n_string+1,12)
02924     0C D4 05 F6 | 	mov	arg03, #12
02928     CC 04 B0 FD | 	call	#__system____builtin_memmove
0292c     BC FF 9F FD | 	jmp	#LR__0130
02930                 | LR__0131
02930                 | ' 
02930                 | '   if k==45
02930     2D FA 0D F2 | 	cmp	local04, #45 wz
02934     38 00 90 5D |  if_ne	jmp	#LR__0132
02938     17 00 00 FF 
0293c     A8 B9 05 F1 | 	add	objptr, ##12200
02940     DC D2 01 F6 | 	mov	arg02, objptr
02944     17 00 00 FF 
02948     A8 B9 85 F1 | 	sub	objptr, ##12200
0294c     E9 D0 01 F6 | 	mov	arg01, arg02
02950     01 D0 05 F1 | 	add	arg01, #1
02954                 | '      bytemove(@n_string+1,@n_string,12)
02954     0C D4 05 F6 | 	mov	arg03, #12
02958     9C 04 B0 FD | 	call	#__system____builtin_memmove
0295c                 | '      n_string[0]:=k
0295c     17 00 00 FF 
02960     A8 B9 05 F1 | 	add	objptr, ##12200
02964     DC FA 41 FC | 	wrbyte	local04, objptr
02968     17 00 00 FF 
0296c     A8 B9 85 F1 | 	sub	objptr, ##12200
02970                 | LR__0132
02970                 | LR__0133
02970     17 00 00 FF 
02974     A8 B9 05 F1 | 	add	objptr, ##12200
02978     DC BE 01 F6 | 	mov	result1, objptr
0297c     17 00 00 FF 
02980     A8 B9 85 F1 | 	sub	objptr, ##12200
02984                 | ' 
02984                 | ' q:=@n_string
02984                 | ' return q
02984     AF F0 03 F6 | 	mov	ptra, fp
02988     BF 00 A0 FD | 	call	#popregs_
0298c                 | _inttostr_ret
0298c     2D 00 64 FD | 	ret
02990                 | 
02990                 | ' 
02990                 | ' 
02990                 | ' pub inttohex(i,d):result |q,pos,k,j
02990                 | _inttohex
02990                 | ' 
02990                 | ' ''----------  Convert integer to hex string with d digits, return a pointer
02990                 | ' 
02990                 | ' j:=i
02990     E9 C0 01 F6 | 	mov	_var01, arg02
02994     01 C0 85 F1 | 	sub	_var01, #1
02998                 | ' pos:=d-1
02998     E0 C2 01 F6 | 	mov	_var02, _var01
0299c                 | ' k:=0
0299c     17 00 00 FF 
029a0     A8 B9 05 F1 | 	add	objptr, ##12200
029a4     DC D2 01 F1 | 	add	arg02, objptr
029a8                 | ' n_string[d]:=0
029a8     E9 00 48 FC | 	wrbyte	#0, arg02
029ac                 | ' repeat k from 0 to d-1
029ac     00 C4 05 F6 | 	mov	_var03, #0
029b0     00 C0 5D F2 | 	cmps	_var01, #0 wcz
029b4     17 00 00 FF 
029b8     A8 B9 85 F1 | 	sub	objptr, ##12200
029bc     01 C6 05 16 |  if_a	mov	_var04, #1
029c0     01 C6 65 E6 |  if_be	neg	_var04, #1
029c4     E3 C8 01 F6 | 	mov	_var05, _var04
029c8     E3 C0 01 F1 | 	add	_var01, _var04
029cc     58 D6 9F FE | 	loc	pa,	#(@LR__0135-@LR__0134)
029d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
029d4                 | LR__0134
029d4     E2 CA 01 F6 | 	mov	_var06, _var03
029d8     17 00 00 FF 
029dc     A8 B9 05 F1 | 	add	objptr, ##12200
029e0     DC CA 01 F1 | 	add	_var06, objptr
029e4                 | '   n_string[k]:=48
029e4     E5 60 48 FC | 	wrbyte	#48, _var06
029e8     E4 C4 01 F1 | 	add	_var03, _var05
029ec     E0 C4 09 F2 | 	cmp	_var03, _var01 wz
029f0     17 00 00 FF 
029f4     A8 B9 85 F1 | 	sub	objptr, ##12200
029f8     D8 FF 9F 5D |  if_ne	jmp	#LR__0134
029fc                 | LR__0135
029fc                 | ' 
029fc                 | ' if (j<>0)
029fc     00 D0 0D F2 | 	cmp	arg01, #0 wz
02a00     5C 00 90 AD |  if_e	jmp	#LR__0138
02a04                 | ' 
02a04                 | '   repeat while (pos>-1)
02a04                 | LR__0136
02a04     FF FF 7F FF 
02a08     FF C3 5D F2 | 	cmps	_var02, ##-1 wcz
02a0c     50 00 90 ED |  if_be	jmp	#LR__0137
02a10     E8 C6 51 F6 | 	abs	_var04, arg01 wc
02a14     0F C6 05 F5 | 	and	_var04, #15
02a18     E3 C6 61 C6 |  if_b	neg	_var04, _var04
02a1c     E3 CC 01 F6 | 	mov	_var07, _var04
02a20                 | '     q:=j//16
02a20                 | '     if (q>9)
02a20     09 CC 5D F2 | 	cmps	_var07, #9 wcz
02a24                 | '       q:=q+7
02a24     07 CC 05 11 |  if_a	add	_var07, #7
02a28                 | '     q:=48+q
02a28     30 CC 05 F1 | 	add	_var07, #48
02a2c     E1 CE 01 F6 | 	mov	_var08, _var02
02a30     17 00 00 FF 
02a34     A8 B9 05 F1 | 	add	objptr, ##12200
02a38     DC CE 01 F1 | 	add	_var08, objptr
02a3c                 | '     n_string[pos]:=q
02a3c     E7 CC 41 FC | 	wrbyte	_var07, _var08
02a40                 | '     j:=j/16
02a40     E8 C6 51 F6 | 	abs	_var04, arg01 wc
02a44     04 C6 45 F0 | 	shr	_var04, #4
02a48     17 00 00 FF 
02a4c     A8 B9 85 F1 | 	sub	objptr, ##12200
02a50     E3 C6 61 C6 |  if_b	neg	_var04, _var04
02a54     E3 D0 01 F6 | 	mov	arg01, _var04
02a58                 | '     pos-=1
02a58     01 C2 85 F1 | 	sub	_var02, #1
02a5c     A4 FF 9F FD | 	jmp	#LR__0136
02a60                 | LR__0137
02a60                 | LR__0138
02a60     17 00 00 FF 
02a64     A8 B9 05 F1 | 	add	objptr, ##12200
02a68     DC BE 01 F6 | 	mov	result1, objptr
02a6c     17 00 00 FF 
02a70     A8 B9 85 F1 | 	sub	objptr, ##12200
02a74                 | ' 
02a74                 | ' q:=@n_string
02a74                 | ' return q
02a74                 | _inttohex_ret
02a74     2D 00 64 FD | 	ret
02a78                 | 
02a78                 | ' 
02a78                 | ' 
02a78                 | ' pub setmode(mode)
02a78                 | _setmode
02a78                 | ' 
02a78                 | ' if (mode==0)
02a78     00 D0 0D F2 | 	cmp	arg01, #0 wz
02a7c     8C 00 90 5D |  if_ne	jmp	#LR__0141
02a80                 | ' 
02a80                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 16          'before sync
02a80     17 00 00 FF 
02a84     B4 B9 05 F1 | 	add	objptr, ##12212
02a88     80 40 B8 FF 
02a8c     DC 20 68 FC | 	wrlong	##1887502352, objptr
02a90                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 80          'sync
02a90     04 B8 05 F1 | 	add	objptr, #4
02a94     80 40 B8 FF 
02a98     DC A0 68 FC | 	wrlong	##1887502416, objptr
02a9c                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 20          'before visible
02a9c     04 B8 05 F1 | 	add	objptr, #4
02aa0     80 40 B8 FF 
02aa4     DC 28 68 FC | 	wrlong	##1887502356, objptr
02aa8                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 1024        'visible 1024
02aa8     04 B8 05 F1 | 	add	objptr, #4
02aac     82 40 B8 FF 
02ab0     DC 00 68 FC | 	wrlong	##1887503360, objptr
02ab4                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 112         'immediate 112
02ab4     04 B8 05 F1 | 	add	objptr, #4
02ab8     80 40 B8 FF 
02abc     DC E0 68 FC | 	wrlong	##1887502448, objptr
02ac0                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
02ac0     04 B8 05 F1 | 	add	objptr, #4
02ac4     00 44 90 FF 
02ac8     DC 10 68 FC | 	wrlong	##545783816, objptr
02acc                 | '   timings[6]:= 48
02acc     04 B8 05 F1 | 	add	objptr, #4
02ad0     DC 60 68 FC | 	wrlong	#48, objptr
02ad4                 | '   timings[7]:= 16
02ad4     04 B8 05 F1 | 	add	objptr, #4
02ad8     DC 20 68 FC | 	wrlong	#16, objptr
02adc                 | '   timings[8]:= 16
02adc     04 B8 05 F1 | 	add	objptr, #4
02ae0     DC 20 68 FC | 	wrlong	#16, objptr
02ae4                 | '   timings[9]:= 16
02ae4     04 B8 05 F1 | 	add	objptr, #4
02ae8     DC 20 68 FC | 	wrlong	#16, objptr
02aec     17 00 00 FF 
02af0     D8 B9 85 F1 | 	sub	objptr, ##12248
02af4                 | ' 
02af4                 | '   clkfreq:=354693878
02af4     19 92 8A FF 
02af8     14 EC 6D FC | 	wrlong	##354693878, #20
02afc                 | '   org
02afc     08 D5 9F FE | 	loc	pa,	#(@LR__0140-@LR__0139)
02b00     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b04                 | LR__0139
02b04 000             | 	org	0
02b04 000 B6 E1 80 FF 
02b08 001 00 F6 65 FD | 	hubset	##29584635
02b0c 002             | LR__0140
02b0c                 | 	orgh
02b0c                 | LR__0141
02b0c                 | ' 
02b0c                 | ' 
02b0c                 | ' if (mode==1)   ' 1026 px per line
02b0c     01 D0 0D F2 | 	cmp	arg01, #1 wz
02b10     8C 00 90 5D |  if_ne	jmp	#LR__0144
02b14                 | ' 
02b14                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 30          'before sync
02b14     17 00 00 FF 
02b18     B4 B9 05 F1 | 	add	objptr, ##12212
02b1c     80 40 B8 FF 
02b20     DC 3C 68 FC | 	wrlong	##1887502366, objptr
02b24                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 80          'sync
02b24     04 B8 05 F1 | 	add	objptr, #4
02b28     80 40 B8 FF 
02b2c     DC A0 68 FC | 	wrlong	##1887502416, objptr
02b30                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 20          'before visible
02b30     04 B8 05 F1 | 	add	objptr, #4
02b34     80 40 B8 FF 
02b38     DC 28 68 FC | 	wrlong	##1887502356, objptr
02b3c                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 896         'visible 896
02b3c     04 B8 05 F1 | 	add	objptr, #4
02b40     81 40 B8 FF 
02b44     DC 00 6B FC | 	wrlong	##1887503232, objptr
02b48                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 48          'immediate 48
02b48     04 B8 05 F1 | 	add	objptr, #4
02b4c     80 40 B8 FF 
02b50     DC 60 68 FC | 	wrlong	##1887502384, objptr
02b54                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
02b54     04 B8 05 F1 | 	add	objptr, #4
02b58     00 44 90 FF 
02b5c     DC 10 68 FC | 	wrlong	##545783816, objptr
02b60                 | '   timings[6]:= 24
02b60     04 B8 05 F1 | 	add	objptr, #4
02b64     DC 30 68 FC | 	wrlong	#24, objptr
02b68                 | '   timings[7]:= 32
02b68     04 B8 05 F1 | 	add	objptr, #4
02b6c     DC 40 68 FC | 	wrlong	#32, objptr
02b70                 | '   timings[8]:= 32
02b70     04 B8 05 F1 | 	add	objptr, #4
02b74     DC 40 68 FC | 	wrlong	#32, objptr
02b78                 | '   timings[9]:= 32
02b78     04 B8 05 F1 | 	add	objptr, #4
02b7c     DC 40 68 FC | 	wrlong	#32, objptr
02b80     17 00 00 FF 
02b84     D8 B9 85 F1 | 	sub	objptr, ##12248
02b88                 | ' 
02b88                 | '   clkfreq:=319215686
02b88     6C 83 89 FF 
02b8c     14 8C 6C FC | 	wrlong	##319215686, #20
02b90                 | '   org
02b90     74 D4 9F FE | 	loc	pa,	#(@LR__0143-@LR__0142)
02b94     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b98                 | LR__0142
02b98 000             | 	org	0
02b98 000 96 E5 80 FF 
02b9c 001 00 F6 67 FD | 	hubset	##30092795
02ba0 002             | LR__0143
02ba0                 | 	orgh
02ba0                 | LR__0144
02ba0                 | ' 
02ba0                 | ' 
02ba0                 | ' if (mode==2) ' 912 pixes per line     ' 283_751_600 80x PAL  - real settings: 64 908 283750000 - 0.9999944
02ba0     02 D0 0D F2 | 	cmp	arg01, #2 wz
02ba4     8C 00 90 5D |  if_ne	jmp	#LR__0147
02ba8                 | ' 
02ba8                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 16           'before sync
02ba8     17 00 00 FF 
02bac     B4 B9 05 F1 | 	add	objptr, ##12212
02bb0     80 40 B8 FF 
02bb4     DC 20 68 FC | 	wrlong	##1887502352, objptr
02bb8                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 64           'sync
02bb8     04 B8 05 F1 | 	add	objptr, #4
02bbc     80 40 B8 FF 
02bc0     DC 80 68 FC | 	wrlong	##1887502400, objptr
02bc4                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 16           'before visible
02bc4     04 B8 05 F1 | 	add	objptr, #4
02bc8     80 40 B8 FF 
02bcc     DC 20 68 FC | 	wrlong	##1887502352, objptr
02bd0                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816          'visible 1024
02bd0     04 B8 05 F1 | 	add	objptr, #4
02bd4     81 40 B8 FF 
02bd8     DC 60 6A FC | 	wrlong	##1887503152, objptr
02bdc                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8            'immediate 112
02bdc     04 B8 05 F1 | 	add	objptr, #4
02be0     80 40 B8 FF 
02be4     DC 10 68 FC | 	wrlong	##1887502344, objptr
02be8                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8            'imm+lut, 1 char
02be8     04 B8 05 F1 | 	add	objptr, #4
02bec     00 44 90 FF 
02bf0     DC 10 68 FC | 	wrlong	##545783816, objptr
02bf4                 | '   timings[6]:= 8
02bf4     04 B8 05 F1 | 	add	objptr, #4
02bf8     DC 10 68 FC | 	wrlong	#8, objptr
02bfc                 | '   timings[7]:= 32
02bfc     04 B8 05 F1 | 	add	objptr, #4
02c00     DC 40 68 FC | 	wrlong	#32, objptr
02c04                 | '   timings[8]:= 64
02c04     04 B8 05 F1 | 	add	objptr, #4
02c08     DC 80 68 FC | 	wrlong	#64, objptr
02c0c                 | ' 
02c0c                 | '   timings[9]:= 32
02c0c     04 B8 05 F1 | 	add	objptr, #4
02c10     DC 40 68 FC | 	wrlong	#32, objptr
02c14     17 00 00 FF 
02c18     D8 B9 85 F1 | 	sub	objptr, ##12248
02c1c                 | ' 
02c1c                 | '   clkfreq:=283750000
02c1c     D7 74 88 FF 
02c20     14 E0 6C FC | 	wrlong	##283750000, #20
02c24                 | '   org
02c24     E0 D3 9F FE | 	loc	pa,	#(@LR__0146-@LR__0145)
02c28     93 00 A0 FD | 	call	#FCACHE_LOAD_
02c2c                 | LR__0145
02c2c 000             | 	org	0
02c2c 000 C5 FF 80 FF 
02c30 001 00 F6 67 FD | 	hubset	##33524731
02c34 002             | LR__0146
02c34                 | 	orgh
02c34                 | LR__0147
02c34                 | ' 
02c34                 | ' if (mode==256)
02c34     00 D1 0D F2 | 	cmp	arg01, #256 wz
02c38     8C 00 90 5D |  if_ne	jmp	#LR__0150
02c3c                 | ' 
02c3c                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 80          'before sync
02c3c     17 00 00 FF 
02c40     B4 B9 05 F1 | 	add	objptr, ##12212
02c44     80 40 B8 FF 
02c48     DC A0 68 FC | 	wrlong	##1887502416, objptr
02c4c                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 160         'sync
02c4c     04 B8 05 F1 | 	add	objptr, #4
02c50     80 40 B8 FF 
02c54     DC 40 69 FC | 	wrlong	##1887502496, objptr
02c58                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 84          'before visible
02c58     04 B8 05 F1 | 	add	objptr, #4
02c5c     80 40 B8 FF 
02c60     DC A8 68 FC | 	wrlong	##1887502420, objptr
02c64                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
02c64     04 B8 05 F1 | 	add	objptr, #4
02c68     81 40 B8 FF 
02c6c     DC 60 6A FC | 	wrlong	##1887503152, objptr
02c70                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
02c70     04 B8 05 F1 | 	add	objptr, #4
02c74     80 40 B8 FF 
02c78     DC 10 68 FC | 	wrlong	##1887502344, objptr
02c7c                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
02c7c     04 B8 05 F1 | 	add	objptr, #4
02c80     00 44 90 FF 
02c84     DC 10 68 FC | 	wrlong	##545783816, objptr
02c88                 | '   timings[6]:= 8
02c88     04 B8 05 F1 | 	add	objptr, #4
02c8c     DC 10 68 FC | 	wrlong	#8, objptr
02c90                 | '   timings[7]:= 8
02c90     04 B8 05 F1 | 	add	objptr, #4
02c94     DC 10 68 FC | 	wrlong	#8, objptr
02c98                 | '   timings[8]:= 12
02c98     04 B8 05 F1 | 	add	objptr, #4
02c9c     DC 18 68 FC | 	wrlong	#12, objptr
02ca0                 | '   timings[9]:= 8
02ca0     04 B8 05 F1 | 	add	objptr, #4
02ca4     DC 10 68 FC | 	wrlong	#8, objptr
02ca8     17 00 00 FF 
02cac     D8 B9 85 F1 | 	sub	objptr, ##12248
02cb0                 | ' 
02cb0                 | '   clkfreq:=357959184
02cb0     03 AB 8A FF 
02cb4     14 20 6C FC | 	wrlong	##357959184, #20
02cb8                 | '   org
02cb8     4C D3 9F FE | 	loc	pa,	#(@LR__0149-@LR__0148)
02cbc     93 00 A0 FD | 	call	#FCACHE_LOAD_
02cc0                 | LR__0148
02cc0 000             | 	org	0
02cc0 000 B2 E1 80 FF 
02cc4 001 00 F6 65 FD | 	hubset	##29582587
02cc8 002             | LR__0149
02cc8                 | 	orgh
02cc8                 | LR__0150
02cc8                 | ' 
02cc8                 | ' if (mode==257)  '1026 px
02cc8     01 D1 0D F2 | 	cmp	arg01, #257 wz
02ccc     8C 00 90 5D |  if_ne	jmp	#LR__0153
02cd0                 | ' 
02cd0                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 80          'before sync
02cd0     17 00 00 FF 
02cd4     B4 B9 05 F1 | 	add	objptr, ##12212
02cd8     80 40 B8 FF 
02cdc     DC A0 68 FC | 	wrlong	##1887502416, objptr
02ce0                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 50          'sync
02ce0     04 B8 05 F1 | 	add	objptr, #4
02ce4     80 40 B8 FF 
02ce8     DC 64 68 FC | 	wrlong	##1887502386, objptr
02cec                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 80          'before visible
02cec     04 B8 05 F1 | 	add	objptr, #4
02cf0     80 40 B8 FF 
02cf4     DC A0 68 FC | 	wrlong	##1887502416, objptr
02cf8                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
02cf8     04 B8 05 F1 | 	add	objptr, #4
02cfc     81 40 B8 FF 
02d00     DC 60 6A FC | 	wrlong	##1887503152, objptr
02d04                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
02d04     04 B8 05 F1 | 	add	objptr, #4
02d08     80 40 B8 FF 
02d0c     DC 10 68 FC | 	wrlong	##1887502344, objptr
02d10                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
02d10     04 B8 05 F1 | 	add	objptr, #4
02d14     00 44 90 FF 
02d18     DC 10 68 FC | 	wrlong	##545783816, objptr
02d1c                 | '   timings[6]:= 8
02d1c     04 B8 05 F1 | 	add	objptr, #4
02d20     DC 10 68 FC | 	wrlong	#8, objptr
02d24                 | '   timings[7]:= 8
02d24     04 B8 05 F1 | 	add	objptr, #4
02d28     DC 10 68 FC | 	wrlong	#8, objptr
02d2c                 | '   timings[8]:= 12
02d2c     04 B8 05 F1 | 	add	objptr, #4
02d30     DC 18 68 FC | 	wrlong	#12, objptr
02d34                 | '   timings[9]:= 8
02d34     04 B8 05 F1 | 	add	objptr, #4
02d38     DC 10 68 FC | 	wrlong	#8, objptr
02d3c     17 00 00 FF 
02d40     D8 B9 85 F1 | 	sub	objptr, ##12248
02d44                 | ' 
02d44                 | '   clkfreq:=322162162
02d44     E6 99 89 FF 
02d48     14 E4 6F FC | 	wrlong	##322162162, #20
02d4c                 | '   org
02d4c     B8 D2 9F FE | 	loc	pa,	#(@LR__0152-@LR__0151)
02d50     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d54                 | LR__0151
02d54 000             | 	org	0
02d54 000 29 C9 80 FF 
02d58 001 00 F6 67 FD | 	hubset	##26366971
02d5c 002             | LR__0152
02d5c                 | 	orgh
02d5c                 | LR__0153
02d5c                 | ' 
02d5c                 | ' if (mode==258)  '912 px
02d5c     02 D1 0D F2 | 	cmp	arg01, #258 wz
02d60     8C 00 90 5D |  if_ne	jmp	#LR__0156
02d64                 | ' 
02d64                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 24          'before sync
02d64     17 00 00 FF 
02d68     B4 B9 05 F1 | 	add	objptr, ##12212
02d6c     80 40 B8 FF 
02d70     DC 30 68 FC | 	wrlong	##1887502360, objptr
02d74                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 48         'sync
02d74     04 B8 05 F1 | 	add	objptr, #4
02d78     80 40 B8 FF 
02d7c     DC 60 68 FC | 	wrlong	##1887502384, objptr
02d80                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 24          'before visible
02d80     04 B8 05 F1 | 	add	objptr, #4
02d84     80 40 B8 FF 
02d88     DC 30 68 FC | 	wrlong	##1887502360, objptr
02d8c                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
02d8c     04 B8 05 F1 | 	add	objptr, #4
02d90     81 40 B8 FF 
02d94     DC 60 6A FC | 	wrlong	##1887503152, objptr
02d98                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
02d98     04 B8 05 F1 | 	add	objptr, #4
02d9c     80 40 B8 FF 
02da0     DC 10 68 FC | 	wrlong	##1887502344, objptr
02da4                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
02da4     04 B8 05 F1 | 	add	objptr, #4
02da8     00 44 90 FF 
02dac     DC 10 68 FC | 	wrlong	##545783816, objptr
02db0                 | '   timings[6]:= 8
02db0     04 B8 05 F1 | 	add	objptr, #4
02db4     DC 10 68 FC | 	wrlong	#8, objptr
02db8                 | '   timings[7]:= 8
02db8     04 B8 05 F1 | 	add	objptr, #4
02dbc     DC 10 68 FC | 	wrlong	#8, objptr
02dc0                 | '   timings[8]:= 12
02dc0     04 B8 05 F1 | 	add	objptr, #4
02dc4     DC 18 68 FC | 	wrlong	#12, objptr
02dc8                 | '   timings[9]:= 8
02dc8     04 B8 05 F1 | 	add	objptr, #4
02dcc     DC 10 68 FC | 	wrlong	#8, objptr
02dd0     17 00 00 FF 
02dd4     D8 B9 85 F1 | 	sub	objptr, ##12248
02dd8                 | ' 
02dd8                 | '   clkfreq:=286363636
02dd8     C7 88 88 FF 
02ddc     14 E8 6F FC | 	wrlong	##286363636, #20
02de0                 | '   org
02de0     24 D2 9F FE | 	loc	pa,	#(@LR__0155-@LR__0154)
02de4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02de8                 | LR__0154
02de8 000             | 	org	0
02de8 000 9D AA 80 FF 
02dec 001 00 F6 65 FD | 	hubset	##22362875
02df0 002             | LR__0155
02df0                 | 	orgh
02df0                 | LR__0156
02df0                 | _setmode_ret
02df0     2D 00 64 FD | 	ret
02df4                 | hubexit
02df4     81 00 80 FD | 	jmp	#cogexit
02df8                 | 
02df8                 | __system____builtin_memmove
02df8     E8 C0 01 F6 | 	mov	_var01, arg01
02dfc     E9 D0 59 F2 | 	cmps	arg01, arg02 wcz
02e00     50 00 90 3D |  if_ae	jmp	#LR__0164
02e04     18 D2 9F FE | 	loc	pa,	#(@LR__0158-@LR__0157)
02e08     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e0c                 | LR__0157
02e0c     03 D4 5D F2 | 	cmps	arg03, #3 wcz
02e10     18 00 90 ED |  if_be	jmp	#LR__0159
02e14     E9 C2 01 FB | 	rdlong	_var02, arg02
02e18     E8 C2 61 FC | 	wrlong	_var02, arg01
02e1c     04 D0 05 F1 | 	add	arg01, #4
02e20     04 D2 05 F1 | 	add	arg02, #4
02e24     04 D4 85 F1 | 	sub	arg03, #4
02e28     E0 FF 9F FD | 	jmp	#LR__0157
02e2c                 | LR__0158
02e2c                 | LR__0159
02e2c     EA C4 09 F6 | 	mov	_var03, arg03 wz
02e30     4C 00 90 AD |  if_e	jmp	#LR__0170
02e34     DC D1 9F FE | 	loc	pa,	#(@LR__0162-@LR__0160)
02e38     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e3c                 | LR__0160
02e3c     E2 08 D8 FC | 	rep	@LR__0163, _var03
02e40                 | LR__0161
02e40     E9 C2 C1 FA | 	rdbyte	_var02, arg02
02e44     E8 C2 41 FC | 	wrbyte	_var02, arg01
02e48     01 D0 05 F1 | 	add	arg01, #1
02e4c     01 D2 05 F1 | 	add	arg02, #1
02e50                 | LR__0162
02e50                 | LR__0163
02e50     2C 00 90 FD | 	jmp	#LR__0170
02e54                 | LR__0164
02e54     EA D0 01 F1 | 	add	arg01, arg03
02e58     EA D2 01 F1 | 	add	arg02, arg03
02e5c     EA C6 09 F6 | 	mov	_var04, arg03 wz
02e60     1C 00 90 AD |  if_e	jmp	#LR__0169
02e64     AC D1 9F FE | 	loc	pa,	#(@LR__0167-@LR__0165)
02e68     93 00 A0 FD | 	call	#FCACHE_LOAD_
02e6c                 | LR__0165
02e6c     E3 08 D8 FC | 	rep	@LR__0168, _var04
02e70                 | LR__0166
02e70     01 D0 85 F1 | 	sub	arg01, #1
02e74     01 D2 85 F1 | 	sub	arg02, #1
02e78     E9 C2 C1 FA | 	rdbyte	_var02, arg02
02e7c     E8 C2 41 FC | 	wrbyte	_var02, arg01
02e80                 | LR__0167
02e80                 | LR__0168
02e80                 | LR__0169
02e80                 | LR__0170
02e80     E0 BE 01 F6 | 	mov	result1, _var01
02e84                 | __system____builtin_memmove_ret
02e84     2D 00 64 FD | 	ret
02e88                 | 
02e88                 | __system__longmove
02e88     E8 C0 01 F6 | 	mov	_var01, arg01
02e8c     E9 D0 59 F2 | 	cmps	arg01, arg02 wcz
02e90     28 00 90 3D |  if_ae	jmp	#LR__0175
02e94     EA C2 09 F6 | 	mov	_var02, arg03 wz
02e98     54 00 90 AD |  if_e	jmp	#LR__0181
02e9c     74 D1 9F FE | 	loc	pa,	#(@LR__0173-@LR__0171)
02ea0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ea4                 | LR__0171
02ea4     E1 08 D8 FC | 	rep	@LR__0174, _var02
02ea8                 | LR__0172
02ea8     E9 C4 01 FB | 	rdlong	_var03, arg02
02eac     E8 C4 61 FC | 	wrlong	_var03, arg01
02eb0     04 D0 05 F1 | 	add	arg01, #4
02eb4     04 D2 05 F1 | 	add	arg02, #4
02eb8                 | LR__0173
02eb8                 | LR__0174
02eb8     34 00 90 FD | 	jmp	#LR__0181
02ebc                 | LR__0175
02ebc     EA C6 01 F6 | 	mov	_var04, arg03
02ec0     02 C6 65 F0 | 	shl	_var04, #2
02ec4     E3 D0 01 F1 | 	add	arg01, _var04
02ec8     E3 D2 01 F1 | 	add	arg02, _var04
02ecc     EA C8 09 F6 | 	mov	_var05, arg03 wz
02ed0     1C 00 90 AD |  if_e	jmp	#LR__0180
02ed4     3C D1 9F FE | 	loc	pa,	#(@LR__0178-@LR__0176)
02ed8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02edc                 | LR__0176
02edc     E4 08 D8 FC | 	rep	@LR__0179, _var05
02ee0                 | LR__0177
02ee0     04 D0 85 F1 | 	sub	arg01, #4
02ee4     04 D2 85 F1 | 	sub	arg02, #4
02ee8     E9 C4 01 FB | 	rdlong	_var03, arg02
02eec     E8 C4 61 FC | 	wrlong	_var03, arg01
02ef0                 | LR__0178
02ef0                 | LR__0179
02ef0                 | LR__0180
02ef0                 | LR__0181
02ef0     E0 BE 01 F6 | 	mov	result1, _var01
02ef4                 | __system__longmove_ret
02ef4     2D 00 64 FD | 	ret
02ef8                 | 
02ef8                 | __system___waitus
02ef8     02 5A 05 F6 | 	mov	COUNT_, #2
02efc     B0 00 A0 FD | 	call	#pushregs_
02f00     E8 F4 01 F6 | 	mov	local01, arg01
02f04     10 BA 05 F1 | 	add	ptr___system__dat__, #16
02f08     DD F6 09 FB | 	rdlong	local02, ptr___system__dat__ wz
02f0c     10 BA 85 F1 | 	sub	ptr___system__dat__, #16
02f10     20 00 90 5D |  if_ne	jmp	#LR__0182
02f14     14 86 06 FB | 	rdlong	muldiva_, #20
02f18     A1 07 00 FF 
02f1c     40 88 06 F6 | 	mov	muldivb_, ##1000000
02f20     CC 00 A0 FD | 	call	#unsdivide_
02f24     44 F7 01 F6 | 	mov	local02, muldivb_
02f28     10 BA 05 F1 | 	add	ptr___system__dat__, #16
02f2c     DD 88 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02f30     10 BA 85 F1 | 	sub	ptr___system__dat__, #16
02f34                 | LR__0182
02f34     FB F4 01 FD | 	qmul	local01, local02
02f38     18 D0 61 FD | 	getqx	arg01
02f3c     1F D0 61 FD | 	waitx	arg01
02f40     AF F0 03 F6 | 	mov	ptra, fp
02f44     BF 00 A0 FD | 	call	#popregs_
02f48                 | __system___waitus_ret
02f48     2D 00 64 FD | 	ret
02f4c                 | 
02f4c                 | LR__0183
02f4c     41 20 48 44 
02f50     4D 49 20 4E 
02f54     6F 73 74 61 
02f58     6C 67 69 63 
02f5c     20 31 30 30 
02f60     78 33 30 20 
02f64     74 65 78 74 
02f68     20 77 69 74 
02f6c     68 20 62 6F 
02f70     72 64 65 72 
02f74     20 64 72 69 
02f78     76 65 72 20 
02f7c     64 65 6D 6F | 	byte	"A HDMI Nostalgic 100x30 text with border driver demo"
02f80     00          | 	byte	0
02f81                 | LR__0184
02f81     49 74 20 75 
02f85     73 65 73 20 
02f89     38 78 31 36 
02f8d     20 66 6F 6E 
02f91     74          | 	byte	"It uses 8x16 font"
02f92     00          | 	byte	0
02f93                 | LR__0185
02f93     54 68 69 73 
02f97     20 69 73 20 
02f9b     61 20 50 32 
02f9f     20 73 6F 20 
02fa3     65 76 65 72 
02fa7     79 20 6C 65 
02fab     74 74 65 72 
02faf     20 63 61 6E 
02fb3     20 68 61 76 
02fb7     65 20 69 74 
02fbb     73 20 6F 77 
02fbf     6E 20 66 6F 
02fc3     72 65 67 72 
02fc7     6F 75 6E 64 
02fcb     20 61 6E 64 
02fcf     20 62 61 63 
02fd3     6B 67 72 6F 
02fd7     75 6E 64 20 
02fdb     63 6F 6C 6F 
02fdf     72          | 	byte	"This is a P2 so every letter can have its own foreground and background color"
02fe0     00          | 	byte	0
02fe1                 | LR__0186
02fe1     45 76 65 72 
02fe5     79 20 6C 69 
02fe9     6E 65 20 63 
02fed     61 6E 20 68 
02ff1     61 76 65 20 
02ff5     69 74 73 20 
02ff9     6F 77 6E 20 
02ffd     62 6F 72 64 
03001     65 72 20 63 
03005     6F 6C 6F 72 | 	byte	"Every line can have its own border color"
03009     00          | 	byte	0
0300a                 | LR__0187
0300a     54 68 69 73 
0300e     20 74 69 6D 
03012     65 20 74 68 
03016     65 20 68 75 
0301a     62 20 52 41 
0301e     4D 20 69 73 
03022     20 75 73 65 
03026     64 20 66 6F 
0302a     72 20 74 68 
0302e     65 20 63 6F 
03032     6C 6F 72 20 
03036     62 75 66 66 
0303a     65 72       | 	byte	"This time the hub RAM is used for the color buffer"
0303c     00          | 	byte	0
0303d                 | LR__0188
0303d     59 6F 75 20 
03041     63 61 6E 20 
03045     73 65 74 20 
03049     63 6F 6C 6F 
0304d     72 73 20 66 
03051     6F 72 20 61 
03055     6C 6C 20 74 
03059     68 65 20 73 
0305d     63 72 65 65 
03061     6E 20 75 73 
03065     69 6E 67 20 
03069     6F 6E 65 20 
0306d     66 75 6E 63 
03071     74 69 6F 6E 
03075     20 63 61 6C 
03079     6C          | 	byte	"You can set colors for all the screen using one function call"
0307a     00          | 	byte	0
0307b                 | LR__0189
0307b     59 6F 75 20 
0307f     63 61 6E 20 
03083     73 65 74 20 
03087     62 6F 72 64 
0308b     65 72 20 63 
0308f     6F 6C 6F 72 
03093     20 66 6F 72 
03097     20 61 6C 6C 
0309b     20 74 68 65 
0309f     20 73 63 72 
030a3     65 65 6E 20 
030a7     75 73 69 6E 
030ab     67 20 6F 6E 
030af     65 20 66 75 
030b3     6E 63 74 69 
030b7     6F 6E 20 63 
030bb     61 6C 6C 2C 
030bf     20 74 6F 6F | 	byte	"You can set border color for all the screen using one function call, too"
030c3     00          | 	byte	0
030c4                 | LR__0190
030c4     31 32 33 34 
030c8     35 36 37 38 
030cc     39 30       | 	byte	"1234567890"
030ce     00          | 	byte	0
030cf                 | LR__0191
030cf     54 68 69 73 
030d3     20 69 73 20 
030d7     4D 53 2D 44 
030db     4F 53 20 6C 
030df     69 6B 65 20 
030e3     66 6F 6E 74 
030e7     20 73 74 79 
030eb     6C 65 2E 2E 
030ef     2E          | 	byte	"This is MS-DOS like font style..."
030f0     00          | 	byte	0
030f1                 | LR__0192
030f1     20          | 	byte	" "
030f2     00          | 	byte	0
030f3                 | LR__0193
030f3     43 3A 5C 3E | 	byte	"C:\>"
030f7     00          | 	byte	0
030f8                 | LR__0194
030f8     20          | 	byte	" "
030f9     00          | 	byte	0
030fa                 | LR__0195
030fa     20          | 	byte	" "
030fb     00          | 	byte	0
030fc                 | LR__0196
030fc     20          | 	byte	" "
030fd     00          | 	byte	0
030fe                 | LR__0197
030fe     20 20 20 20 
03102     20 20 20 20 | 	byte	"        "
03106     00          | 	byte	0
03107                 | LR__0198
03107     20          | 	byte	" "
03108     00          | 	byte	0
03109                 | LR__0199
03109     2C          | 	byte	","
0310a     00          | 	byte	0
0310b                 | LR__0200
0310b     20          | 	byte	" "
0310c     00          | 	byte	0
0310d                 | LR__0201
0310d     20 20 46 69 
03111     6C 65 20 20 
03115     20 20 4F 70 
03119     74 69 6F 6E 
0311d     73 20 20 20 
03121     20 56 69 65 
03125     77 20 20 20 
03129     20 53 70 65 
0312d     63 69 61 6C | 	byte	"  File    Options    View    Special"
03131     00          | 	byte	0
03132                 | LR__0202
03132     20 20 20 20 
03136     20 20 20 20 
0313a     04          | 	byte	"        ",4
0313b     00          | 	byte	0
0313c                 | LR__0203
0313c     20          | 	byte	" "
0313d     00          | 	byte	0
0313e                 | LR__0204
0313e     2C          | 	byte	","
0313f     00          | 	byte	0
03140                 | LR__0205
03140     04          | 	byte	4
03141     00          | 	byte	0
03142                 | LR__0206
03142     20          | 	byte	" "
03143     00          | 	byte	0
03144                 | LR__0207
03144     20 20 20 20 
03148     20 2E 2E 2E 
0314c     20 62 75 74 
03150     20 41 74 61 
03154     72 69 20 53 
03158     54 2D 6C 69 
0315c     6B 65 20 6D 
03160     6F 6E 6F 20 
03164     66 6F 6E 74 
03168     20 63 61 6E 
0316c     20 61 6C 73 
03170     6F 20 62 65 
03174     20 75 73 65 
03178     64 2E       | 	byte	"     ... but Atari ST-like mono font can also be used."
0317a     00          | 	byte	0
0317b                 | LR__0208
0317b     20 20 20 20 
0317f     20 20 20 20 
03183     20 57 65 20 
03187     61 6C 73 6F 
0318b     20 73 77 69 
0318f     74 63 68 65 
03193     64 20 74 68 
03197     65 20 67 72 
0319b     61 70 68 69 
0319f     63 73 20 6D 
031a3     6F 64 65 20 
031a7     74 6F 20 50 
031ab     41 4C 20 6C 
031af     69 6B 65 20 
031b3     35 30 20 48 
031b7     7A 2C 20 36 
031bb     32 34 20 6C 
031bf     69 6E 65 73 
031c3     2E          | 	byte	"         We also switched the graphics mode to PAL like 50 Hz, 624 lines."
031c4     00          | 	byte	0
031c5                 | LR__0209
031c5     20          | 	byte	" "
031c6     00          | 	byte	0
031c7                 | LR__0210
031c7     20 20 20 20 
031cb     20 20 20 20 
031cf     20 41 6C 74 
031d3     68 6F 75 67 
031d7     68 20 74 68 
031db     65 20 66 6F 
031df     6E 74 20 69 
031e3     73 20 6D 6F 
031e7     6E 6F 20 73 
031eb     74 79 6C 65 
031ef     2C 20 77 65 
031f3     20 61 72 65 
031f7     20 73 74 69 
031fb     6C 6C 20 69 
031ff     6E 20 74 68 
03203     65 20 63 6F 
03207     6C 6F 72 20 
0320b     6D 6F 64 65 
0320f     20 68 65 72 
03213     65 2E       | 	byte	"         Although the font is mono style, we are still in the color mode here."
03215     00          | 	byte	0
03216                 | LR__0211
03216     62 6C 75 65 | 	byte	"blue"
0321a     00          | 	byte	0
0321b                 | LR__0212
0321b     67 72 65 65 
0321f     6E          | 	byte	"green"
03220     00          | 	byte	0
03221                 | LR__0213
03221     63 79 61 6E | 	byte	"cyan"
03225     00          | 	byte	0
03226                 | LR__0214
03226     72 65 64    | 	byte	"red"
03229     00          | 	byte	0
0322a                 | LR__0215
0322a     6D 61 67 65 
0322e     6E 74 61    | 	byte	"magenta"
03231     00          | 	byte	0
03232                 | LR__0216
03232     62 72 6F 77 
03236     6E          | 	byte	"brown"
03237     00          | 	byte	0
03238                 | LR__0217
03238     6C 69 67 68 
0323c     74 20 67 72 
03240     61 79       | 	byte	"light gray"
03242     00          | 	byte	0
03243                 | LR__0218
03243     64 61 72 6B 
03247     20 67 72 61 
0324b     79          | 	byte	"dark gray"
0324c     00          | 	byte	0
0324d                 | LR__0219
0324d     6C 69 67 68 
03251     74 20 62 6C 
03255     75 65       | 	byte	"light blue"
03257     00          | 	byte	0
03258                 | LR__0220
03258     6C 69 67 68 
0325c     74 20 67 72 
03260     65 65 6E    | 	byte	"light green"
03263     00          | 	byte	0
03264                 | LR__0221
03264     6C 69 67 68 
03268     74 20 63 79 
0326c     61 6E       | 	byte	"light cyan"
0326e     00          | 	byte	0
0326f                 | LR__0222
0326f     6C 69 67 68 
03273     74 20 72 65 
03277     64          | 	byte	"light red"
03278     00          | 	byte	0
03279                 | LR__0223
03279     6C 69 67 68 
0327d     74 20 6D 61 
03281     67 65 6E 74 
03285     61          | 	byte	"light magenta"
03286     00          | 	byte	0
03287                 | LR__0224
03287     79 65 6C 6C 
0328b     6F 77       | 	byte	"yellow"
0328d     00          | 	byte	0
0328e                 | LR__0225
0328e     77 68 69 74 
03292     65          | 	byte	"white"
03293     00          | 	byte	0
03294                 | LR__0226
03294     43 3A 5C 3E | 	byte	"C:\>"
03298     00          | 	byte	0
03299                 | LR__0227
03299     70          | 	byte	"p"
0329a     00          | 	byte	0
0329b                 | LR__0228
0329b     63          | 	byte	"c"
0329c     00          | 	byte	0
0329d                 | LR__0229
0329d     20          | 	byte	" "
0329e     00          | 	byte	0
0329f                 | LR__0230
0329f     54 68 65 20 
032a3     50 72 6F 70 
032a7     65 6C 6C 65 
032ab     72 20 43 6F 
032af     6D 6D 61 6E 
032b3     64 65 72 2C 
032b7     20 43 6F 70 
032bb     79 6C 65 66 
032bf     74 20 28    | 	byte	"The Propeller Commander, Copyleft ("
032c2     00          | 	byte	0
032c3                 | LR__0231
032c3     29 20 32 30 
032c7     32 31 20 70 
032cb     69 6B 33 33 
032cf     40 6F 32 2E 
032d3     70 6C       | 	byte	") 2021 pik33@o2.pl"
032d5     00          | 	byte	0
032d6                 | LR__0232
032d6     20          | 	byte	" "
032d7     00          | 	byte	0
032d8                 | LR__0233
032d8     43 3A 5C 3E | 	byte	"C:\>"
032dc     00          | 	byte	0
032dd                 | LR__0234
032dd     20 53 74 61 
032e1     74 75 73 20 | 	byte	" Status "
032e5     00          | 	byte	0
032e6                 | LR__0235
032e6     20 43 3A 5C 
032ea     20          | 	byte	" C:\ "
032eb     00          | 	byte	0
032ec                 | LR__0236
032ec     54 68 65 20 
032f0     50 72 6F 70 
032f4     65 6C 6C 65 
032f8     72 20 43 6F 
032fc     6D 6D 61 6E 
03300     64 65 72 2C 
03304     20 56 65 72 
03308     73 69 6F 6E 
0330c     20 30 2E 30 
03310     30          | 	byte	"The Propeller Commander, Version 0.00"
03311     00          | 	byte	0
03312                 | LR__0237
03312     43 6F 70 79 
03316     6C 65 66 74 
0331a     20 28       | 	byte	"Copyleft ("
0331c     00          | 	byte	0
0331d                 | LR__0238
0331d     29 20 32 30 
03321     32 31 20 70 
03325     69 6B 33 33 
03329     40 6F 32 2E 
0332d     70 6C       | 	byte	") 2021 pik33@o2.pl"
0332f     00          | 	byte	0
03330                 | LR__0239
03330     35 32 34 2C 
03334     32 38 38 20 
03338     42 79 74 65 
0333c     73 20 4D 65 
03340     6D 6F 72 79 | 	byte	"524,288 Bytes Memory"
03344     00          | 	byte	0
03345                 | LR__0240
03345     2C          | 	byte	","
03346     00          | 	byte	0
03347                 | LR__0241
03347     42 79 74 65 
0334b     73 20 46 72 
0334f     65 65       | 	byte	"Bytes Free"
03351     00          | 	byte	0
03352                 | LR__0242
03352     33 32 2C 32 
03356     31 32 2C 32 
0335a     35 34 2C 37 
0335e     32 30 20 74 
03362     6F 74 61 6C 
03366     20 62 79 74 
0336a     65 73 20 6F 
0336e     6E 20 64 72 
03372     69 76 65 20 
03376     43 3A       | 	byte	"32,212,254,720 total bytes on drive C:"
03378     00          | 	byte	0
03379                 | LR__0243
03379     33 2C 39 38 
0337d     39 2C 31 32 
03381     33 2C 36 34 
03385     30 20 62 79 
03389     74 65 73 20 
0338d     66 72 65 65 
03391     20 6F 6E 20 
03395     64 72 69 76 
03399     65 20 43 3A | 	byte	"3,989,123,640 bytes free on drive C:"
0339d     00          | 	byte	0
0339e                 | LR__0244
0339e     31 32 33 20 
033a2     66 69 6C 65 
033a6     73 20 75 73 
033aa     65 20 31 32 
033ae     38 2C 39 35 
033b2     36 2C 33 38 
033b6     34 20 62 79 
033ba     74 65 73 20 
033be     69 6E       | 	byte	"123 files use 128,956,384 bytes in"
033c0     00          | 	byte	0
033c1                 | LR__0245
033c1     43 3A       | 	byte	"C:"
033c3     00          | 	byte	0
033c4                 | LR__0246
033c4     4E 6F 20 27 
033c8     64 69 72 69 
033cc     6E 66 6F 27 
033d0     20 66 69 6C 
033d4     65 20 69 6E 
033d8     20 74 68 69 
033dc     73 20 64 69 
033e0     72 65 63 74 
033e4     6F 72 79    | 	byte	"No 'dirinfo' file in this directory"
033e7     00          | 	byte	0
033e8                 | LR__0247
033e8     4E 61 6D 65 | 	byte	"Name"
033ec     00          | 	byte	0
033ed                 | LR__0248
033ed     53 69 7A 65 | 	byte	"Size"
033f1     00          | 	byte	0
033f2                 | LR__0249
033f2     44 61 74 65 | 	byte	"Date"
033f6     00          | 	byte	0
033f7                 | LR__0250
033f7     54 69 6D 65 | 	byte	"Time"
033fb     00          | 	byte	0
033fc                 | LR__0251
033fc     31 32 3A 33 
03400     34          | 	byte	"12:34"
03401     00          | 	byte	0
03402                 | LR__0252
03402     32 30 32 31 
03406     2E 30 33 2E 
0340a     32 33       | 	byte	"2021.03.23"
0340c     00          | 	byte	0
0340d                 | LR__0253
0340d     53 55 42 2D 
03411     44 49 52    | 	byte	"SUB-DIR"
03414     00          | 	byte	0
03415                 | LR__0254
03415     32 31 33 35 
03419     36          | 	byte	"21356"
0341a     00          | 	byte	0
0341b                 | LR__0255
0341b     31 32 35 36 
0341f     34          | 	byte	"12564"
03420     00          | 	byte	0
03421                 | LR__0256
03421     31 31 32 38 | 	byte	"1128"
03425     00          | 	byte	0
03426                 | LR__0257
03426     31 30 35 33 
0342a     32 31       | 	byte	"105321"
0342c     00          | 	byte	0
0342d                 | LR__0258
0342d     33 30 38 33 
03431     31          | 	byte	"30831"
03432     00          | 	byte	0
03433                 | LR__0259
03433     38 35 36    | 	byte	"856"
03436     00          | 	byte	0
03437                 | LR__0260
03437     33 31 32 34 
0343b     38          | 	byte	"31248"
0343c     00          | 	byte	0
0343d                 | LR__0261
0343d     32 33 31 36 | 	byte	"2316"
03441     00          | 	byte	0
03442                 | LR__0262
03442     31 37 35 33 
03446     31          | 	byte	"17531"
03447     00          | 	byte	0
03448                 | LR__0263
03448     50 72 6F 70 
0344c     44 4F 53    | 	byte	"PropDOS"
0344f     00          | 	byte	0
03450                 | LR__0264
03450     42 41 53 49 
03454     43          | 	byte	"BASIC"
03455     00          | 	byte	0
03456                 | LR__0265
03456     53 70 69 6E | 	byte	"Spin"
0345a     00          | 	byte	0
0345b                 | LR__0266
0345b     57 69 6E 64 
0345f     6F 77 73    | 	byte	"Windows"
03462     00          | 	byte	0
03463                 | LR__0267
03463     41 74 61 72 
03467     69 20 20 20 
0346b     20 20 20 20 
0346f     20 20 20 20 
03473     20 20 65 6D 
03477     75          | 	byte	"Atari             emu"
03478     00          | 	byte	0
03479                 | LR__0268
03479     41 6D 69 67 
0347d     61 20 20 20 
03481     20 20 20 20 
03485     20 20 20 20 
03489     20 20 65 6D 
0348d     75          | 	byte	"Amiga             emu"
0348e     00          | 	byte	0
0348f                 | LR__0269
0348f     50 72 6F 70 
03493     65 6C 6C 65 
03497     72          | 	byte	"Propeller"
03498     00          | 	byte	0
03499                 | LR__0270
03499     44 4F 53 20 
0349d     20 20 20 20 
034a1     20 20 20 20 
034a5     20 20 20 20 
034a9     20 20 53 59 
034ad     53          | 	byte	"DOS               SYS"
034ae     00          | 	byte	0
034af                 | LR__0271
034af     44 55 50 20 
034b3     20 20 20 20 
034b7     20 20 20 20 
034bb     20 20 20 20 
034bf     20 20 53 59 
034c3     53          | 	byte	"DUP               SYS"
034c4     00          | 	byte	0
034c5                 | LR__0272
034c5     41 75 74 6F 
034c9     65 78 65 63 
034cd     20 20 20 20 
034d1     20 20 20 20 
034d5     20 20 42 41 
034d9     54          | 	byte	"Autoexec          BAT"
034da     00          | 	byte	0
034db                 | LR__0273
034db     70 63 20 20 
034df     20 20 20 20 
034e3     20 20 20 20 
034e7     20 20 20 20 
034eb     20 20 65 78 
034ef     65          | 	byte	"pc                exe"
034f0     00          | 	byte	0
034f1                 | LR__0274
034f1     77 69 6E 20 
034f5     20 20 20 20 
034f9     20 20 20 20 
034fd     20 20 20 20 
03501     20 20 63 6F 
03505     6D          | 	byte	"win               com"
03506     00          | 	byte	0
03507                 | LR__0275
03507     44 4F 4F 4D 
0350b     20 20 20 20 
0350f     20 20 20 20 
03513     20 20 20 20 
03517     20 20 42 41 
0351b     54          | 	byte	"DOOM              BAT"
0351c     00          | 	byte	0
0351d                 | LR__0276
0351d     63 6F 6D 6D 
03521     61 6E 64 20 
03525     20 20 20 20 
03529     20 20 20 20 
0352d     20 20 63 6F 
03531     6D          | 	byte	"command           com"
03532     00          | 	byte	0
03533                 | LR__0277
03533     63 6F 6E 66 
03537     69 67 20 20 
0353b     20 20 20 20 
0353f     20 20 20 20 
03543     20 20 73 79 
03547     73          | 	byte	"config            sys"
03548     00          | 	byte	0
03549                 | LR__0278
03549     6D 73 64 6F 
0354d     73 20 20 20 
03551     20 20 20 20 
03555     20 20 20 20 
03559     20 20 73 79 
0355d     73          | 	byte	"msdos             sys"
0355e     00          | 	byte	0
0355f                 | LR__0279
0355f     70 63 2E 65 
03563     78 65 20 20 
03567     20 20 20 20 
0356b     20 20 20 20 
0356f     20 20 20 20 
03573     20 20 31 30 
03577     35 33 32 31 
0357b     20 20 20 20 
0357f     32 30 32 31 
03583     2E 30 33 2E 
03587     32 33 20 31 
0358b     32 3A 33 34 | 	byte	"pc.exe                105321    2021.03.23 12:34"
0358f     00          | 	byte	0
03590                 | 	alignl
03590                 | _dat_
03590                 | 
03590     00 00 00 00 
      ...             
035c0     00 00 00 00 
035c4     00 00 00    | st_font                 file "st4font.def"
035c7     FF FF 00 00 
035cb     00 00 00 00 
035cf     00 18 18 18 
035d3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
035d7     18 18 18 18 
035db     18 18 18 18 
035df     18          | 	byte	$18[9]
035e0     00 00 00 00 
035e4     00 00 00    | 	byte	$00[7]
035e7     FF FF 18 18 
035eb     18 18 18 18 
035ef     18 18 18 18 
035f3     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
035f7     FF FF 00 00 
035fb     00 00 00 00 
035ff     00 18 18 18 
03603     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03607     1F 1F 18 18 
0360b     18 18 18 18 
0360f     18 18 18 18 
03613     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
03617     F8 F8 18 18 
0361b     18 18 18 18 
0361f     18 00 00 00 
03623     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
03627     1F 1F 18 18 
0362b     18 18 18 18 
0362f     18 00 00 00 
03633     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
03637     F8 F8 18 18 
0363b     18 18 18 18 
0363f     18 18 18 18 
03643     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
03647     1F 1F 00 00 
0364b     00 00 00 00 
0364f     00 18 18 18 
03653     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03657     F8 F8 00 00 
0365b     00 00 00 00 
0365f     00 18 18 18 
03663     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03667     FF FF 18 18 
0366b     18 18 18 18 
0366f     18 00 00 18 
03673     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
03677     66 7E 7E 66 
0367b     66 66 66 30 
0367f     18 00 00 7E 
03683     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
03687     3E 06 06 06 
0368b     06 7E 7E 18 
0368f     0C 30 18 3C 
03693     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
03697     06 06 06 66 
0369b     66 7E 3C 00 
0369f     00 30 18 66 
036a3     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
036a7     7E 7E 76 76 
036ab     66 66 66 00 
036af     00 30 18 7C 
036b3     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
036b7     1C 38 70 60 
036bb     60 7E 3E 00 
036bf     00 30 18 7E 
036c3     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
036c7     18 0C 0C 06 
036cb     06 7E 7E 00 
036cf     00 18 18 00 
036d3     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
036d7     18 18 0C 0C 
036db     06 7E 7E 00 
036df     00 30 18 3C 
036e3     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
036e7     66 66 66 66 
036eb     66          | 	byte	$66[5]
036ec     7E 3C 00 00 
036f0     00 00 06 06 
036f4     06 06 16 1E 
036f8     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
036fc     7E 7E 00 00 
03700     00 00 00 00 
03704     00 3C 7C 60 
03708     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
0370c     7E 7C 30 18 
03710     00 00 00 00 
03714     00 3C 7E 66 
03718     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
0371c     7E 7C 18 0C 
03720     00 00 30 18 
03724     00 3C 3E 06 
03728     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
0372c     7E 7C 00 00 
03730     00 00 30 18 
03734     00 3E 7E 66 
03738     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
0373c     66 66 00 00 
03740     00 00 30 18 
03744     00 7C 7E 06 
03748     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
0374c     7E 3E 00 00 
03750     00 00 30 18 
03754     00 7E 7E 30 
03758     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0375c     7E 7E 00 00 
03760     00 00 18 18 
03764     00 7E 7E 30 
03768     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
0376c     7E 7E 00 00 
03770     00 00 30 18 
03774     00 3C 7E 66 
03778     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
0377c     7E 3C 00 00 
03780     00 00 1C 1C 
03784     18 18 38 3C 
03788     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
0378c     3C 3C 00 00 
03790     00 00 00 00 
03794     00 00 00 00 
03798     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0379c     00 00 00 00 
037a0     00 00       | 	byte	$00[6]
037a2     18 18 18 18 
037a6     18 18 18 18 | 	byte	$18[8]
037aa     00 00 18 18 
037ae     00 00 00 00 
037b2     66 66 66 66 
037b6     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
037ba     00 00 00 00 
037be     00 00 00 00 
037c2     00          | 	byte	$00[9]
037c3     66 66 FF FF 
037c7     66 66 FF FF 
037cb     66 66 00 00 
037cf     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
037d3     7C 7E 06 06 
037d7     3E 7C 60 60 
037db     7E 3E 18 18 
037df     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
037e3     66 30 30 18 
037e7     18 0C 0C 66 
037eb     66 00 00 00 
037ef     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
037f3     66 66 3C 1C 
037f7     1C FC FE 66 
037fb     66 FE FC 00 
037ff     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
03803     18 18 18 18 
03807     00 00 00 00 
0380b     00 00 00 00 
0380f     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
03813     18 1C 0C 0C 
03817     0C 0C 0C 0C 
0381b     1C 18 30 00 
0381f     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
03823     18 38 30 30 
03827     30 30 30 30 
0382b     38 18 0C 00 
0382f     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
03833     66 66 3C 3C 
03837     FF FF 3C 3C 
0383b     66 66 00 00 
0383f     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
03843     00 18 18 18 
03847     7E 7E 18 18 
0384b     18 00 00 00 
0384f     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
03853     00 00 00 00 
03857     00 00       | 	byte	$00[6]
03859     18 18 18 18 
0385d     18          | 	byte	$18[5]
0385e     0C 04 00 00 
03862     00 00 00 00 
03866     7E 7E 00 00 
0386a     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
0386e     00 00 00 00 
03872     00 00 00 00 
03876     00 00 00 00 
0387a     00          | 	byte	$00[13]
0387b     18 18 18 00 
0387f     00 00 00 60 
03883     60 60 30 30 
03887     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
0388b     06 06 06 00 
0388f     00 00 00 3C 
03893     7E 66 66 66 
03897     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
0389b     66 7E 3C 00 
0389f     00 00 00 18 
038a3     18 1C 1C 18 
038a7     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
038ab     18 7E 7E 00 
038af     00 00 00 3C 
038b3     7E 66 66 30 
038b7     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
038bb     0C 7E 7E 00 
038bf     00 00 00 7E 
038c3     7E 30 30 18 
038c7     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
038cb     66 7E 3C 00 
038cf     00 00 00 30 
038d3     30 38 38 3C 
038d7     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
038db     7E 30 30 00 
038df     00 00 00 7E 
038e3     7E 06 06 3E 
038e7     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
038eb     66 7E 3C 00 
038ef     00 00 00 38 
038f3     3C 0E 06 06 
038f7     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
038fb     66 7E 3C 00 
038ff     00 00 00 7E 
03903     7E 60 60 30 
03907     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
0390b     0C 0C 0C 00 
0390f     00 00 00 3C 
03913     7E 66 66 3C 
03917     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
0391b     66 7E 3C 00 
0391f     00 00 00 3C 
03923     7E 66 66 7E 
03927     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
0392b     70 3C 1C 00 
0392f     00 00 00 00 
03933     00 00 18 18 
03937     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
0393b     18 18 18 00 
0393f     00 00 00 00 
03943     00 00 18 18 
03947     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
0394b     18 18 18 0C 
0394f     04 00 00 00 
03953     70 38 1C 0E 
03957     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
0395b     70 00 00 00 
0395f     00 00 00 00 
03963     00 00 7E 7E 
03967     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
0396b     00 00 00 00 
0396f     00 00 00 00 | 	byte	$00[8]
03973     0E 1C 38 70 
03977     E0 70 38 1C 
0397b     0E 00 00 00 
0397f     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
03983     7E 66 66 30 
03987     30 18 18 18 
0398b     00 18 18 00 
0398f     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
03993     7E 66 66 66 
03997     66 36 06 66 
0399b     66 7E 3C 00 
0399f     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
039a3     3C 7E 66 66 
039a7     66 7E 7E 66 
039ab     66 66 66 00 
039af     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
039b3     7E 66 66 7E 
039b7     3E 66 66 66 
039bb     66 7E 3E 00 
039bf     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
039c3     7E 66 66 06 
039c7     06 06 06 66 
039cb     66 7E 3C 00 
039cf     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
039d3     7E 66 66 66 
039d7     66 66 66 66 
039db     66 7E 3E 00 
039df     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
039e3     7E 06 06 3E 
039e7     3E 06 06 06 
039eb     06 7E 7E 00 
039ef     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
039f3     7E 06 06 3E 
039f7     3E 06 06 06 
039fb     06 06 06 00 
039ff     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
03a03     7E 06 06 76 
03a07     76 66 66 66 
03a0b     66 7E 3C 00 
03a0f     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
03a13     66 66 66 7E 
03a17     7E 66 66 66 
03a1b     66 66 66 00 
03a1f     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
03a23     7E 18 18 18 
03a27     18 18 18 18 
03a2b     18 7E 7E 00 
03a2f     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
03a33     60 60 60 60 
03a37     60 60 60    | 	byte	$60[7]
03a3a     66 66 7E 3C 
03a3e     00 00 00 00 
03a42     66 66 36 36 
03a46     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
03a4a     66 66 C6 C6 
03a4e     00 00 00 00 
03a52     06 06 06 06 
03a56     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
03a5a     06 06 7E 7E 
03a5e     00 00 00 00 
03a62     C6 C6 EE EE 
03a66     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
03a6a     C6 C6 C6 C6 
03a6e     00 00 00 00 
03a72     66 66 66 6E 
03a76     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
03a7a     76 66 66 66 
03a7e     00 00 00 00 
03a82     3C 7E 66 66 
03a86     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
03a8a     66 66 7E 3C 
03a8e     00 00 00 00 
03a92     3E 7E 66 66 
03a96     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
03a9a     06 06 06 06 
03a9e     00 00 00 00 
03aa2     3C 7E 66 66 
03aa6     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
03aaa     66 56 3E 6C 
03aae     00 00 00 00 
03ab2     3E 7E 66 66 
03ab6     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
03aba     66 66 C6 C6 
03abe     00 00 00 00 
03ac2     7C 7E 06 06 
03ac6     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
03aca     60 60 7E 3E 
03ace     00 00 00 00 
03ad2     7E 7E 18 18 
03ad6     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
03ada     18 18 18 18 
03ade     00 00 00 00 
03ae2     66 66 66 66 
03ae6     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
03aea     66 66 7E 3C 
03aee     00 00 00 00 
03af2     66 66 66 66 
03af6     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
03afa     3C 3C 18 18 
03afe     00 00 00 00 
03b02     C6 C6 C6 C6 
03b06     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
03b0a     FE EE C6 82 
03b0e     00 00 00 00 
03b12     66 66 66 3C 
03b16     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
03b1a     3C 66 66 66 
03b1e     00 00 00 00 
03b22     66 66 66 66 
03b26     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
03b2a     18 18 18 18 
03b2e     00 00 00 00 
03b32     7E 7E 30 30 
03b36     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
03b3a     06 06 7E 7E 
03b3e     00 00 00 00 
03b42     3C 3C 0C 0C 
03b46     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
03b4a     0C 0C 3C 3C 
03b4e     00 00 00 00 
03b52     06 06 0C 0C 
03b56     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
03b5a     60 60 C0 C0 
03b5e     00 00 00 00 
03b62     3C 3C 30 30 
03b66     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
03b6a     30 30 3C 3C 
03b6e     00 00 00 00 
03b72     18 18 3C 3C 
03b76     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
03b7a     00 00 00 00 
03b7e     00 00 00 00 
03b82     00 00 00 00 
03b86     00 00 00 00 
03b8a     00 00       | 	byte	$00[18]
03b8c     FE FE 00 00 
03b90     00 00 0C 0C 
03b94     18 18 00 00 
03b98     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
03b9c     00 00 00 00 
03ba0     00 00 00 00 
03ba4     00          | 	byte	$00[9]
03ba5     3C 7C 60 7C 
03ba9     7E 66 66 7E 
03bad     7C 00 00 00 
03bb1     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
03bb5     3E 7E 66 66 
03bb9     66 66 66 7E 
03bbd     3E 00 00 00 
03bc1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
03bc5     3C 3E 06 06 
03bc9     06 06 06 7E 
03bcd     7C 00 00 00 
03bd1     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
03bd5     7C 7E 66 66 
03bd9     66 66 66 7E 
03bdd     7C 00 00 00 
03be1     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
03be5     3C 7E 66 66 
03be9     7E 06 06 7E 
03bed     7C 00 00 00 
03bf1     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
03bf5     18 7E 7E 18 
03bf9     18 18 18 18 
03bfd     18 00 00 00 
03c01     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
03c05     7C 7E 66 66 
03c09     66 66 7E 7C 
03c0d     60 7E 3E 00 
03c11     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
03c15     3E 7E 66 66 
03c19     66 66 66 66 
03c1d     66 00 00 00 
03c21     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
03c25     1C 1C 18 18 
03c29     18 18 18 3C 
03c2d     3C 00 00 00 
03c31     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
03c35     30 30 30 30 
03c39     30 30 30 30 
03c3d     30          | 	byte	$30[9]
03c3e     3E 1E 00 00 
03c42     06 06 06 36 
03c46     36 1E 1E 1E 
03c4a     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
03c4e     00 00 00 00 
03c52     1C 1C 18 18 
03c56     18 18 18 18 
03c5a     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
03c5e     00 00 00 00 
03c62     00 00 00    | 	byte	$00[7]
03c65     6C FE FE D6 
03c69     D6 C6 C6 C6 
03c6d     C6 00 00 00 
03c71     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
03c75     3E 7E 66 66 
03c79     66 66 66 66 
03c7d     66 00 00 00 
03c81     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
03c85     3C 7E 66 66 
03c89     66 66 66 7E 
03c8d     3C 00 00 00 
03c91     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
03c95     3E 7E 66 66 
03c99     66 66 66 7E 
03c9d     3E 06 06 00 
03ca1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
03ca5     7C 7E 66 66 
03ca9     66 66 66 7E 
03cad     7C 60 60 00 
03cb1     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
03cb5     3E 7E 66 06 
03cb9     06 06 06 06 
03cbd     06 00 00 00 
03cc1     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
03cc5     7C 7E 06 0E 
03cc9     3C 70 60 7E 
03ccd     3E 00 00 00 
03cd1     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
03cd5     7E 7E 18 18 
03cd9     18 18 18 78 
03cdd     70 00 00 00 
03ce1     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
03ce5     66 66 66 66 
03ce9     66 66 66    | 	byte	$66[7]
03cec     7E 7C 00 00 
03cf0     00 00 00 00 
03cf4     00 66 66 66 
03cf8     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
03cfc     18 18 00 00 
03d00     00 00 00 00 
03d04     00 C6 C6 D6 
03d08     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
03d0c     C6 82 00 00 
03d10     00 00 00 00 
03d14     00 66 66 3C 
03d18     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
03d1c     66 66 00 00 
03d20     00 00 00 00 
03d24     00 66 66 66 
03d28     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
03d2c     7C 60 7E 3E 
03d30     00 00 00 00 
03d34     00 7E 7E 30 
03d38     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
03d3c     7E 7E 00 00 
03d40     00 00 30 18 
03d44     18 18 18 0C 
03d48     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
03d4c     18 30 00 00 
03d50     00 00 18 18 
03d54     18 18 18 18 
03d58     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
03d5c     18 18 00 00 
03d60     00 00 0C 18 
03d64     18 18 18 30 
03d68     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
03d6c     18 0C 00 00 
03d70     00 00 6C 7E 
03d74     36 00 00 00 
03d78     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
03d7c     00 00 00 00 
03d80     00 00 00 00 
03d84     00          | 	byte	$00[9]
03d85     18 18 18 18 
03d89     18 18 00 00 
03d8d     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
03d90                 | 'vga_font                                file "st4font.def"
03d90     00 00 00 00 
03d94     00 00 00 00 
03d98     00 00 00 00 
03d9c     00 00 00 00 
03da0     00 00 00    | vga_font                                file "vgafont.def"
03da3     7E 81 A5 81 
03da7     81 BD 99 81 
03dab     81 7E 00 00 
03daf     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
03db3     7E FF DB FF 
03db7     FF C3 E7 FF 
03dbb     FF 7E 00 00 
03dbf     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
03dc3     00 36 7F 7F 
03dc7     7F 7F 3E 1C 
03dcb     08 00 00 00 
03dcf     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
03dd3     00 08 1C 3E 
03dd7     7F 3E 1C 08 
03ddb     00 00 00 00 
03ddf     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
03de3     18 3C 3C E7 
03de7     E7 E7 18 18 
03deb     3C 00 00 00 
03def     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
03df3     18 3C 7E FF 
03df7     FF 7E 18 18 
03dfb     3C 00 00 00 
03dff     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
03e03     00 00 00 18 
03e07     3C 3C 18 00 
03e0b     00 00 00 00 
03e0f     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
03e13     FF FF FF E7 
03e17     C3 C3 E7 FF 
03e1b     FF FF FF FF 
03e1f     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03e23     00 00 3C 66 
03e27     42 42 66 3C 
03e2b     00 00 00 00 
03e2f     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
03e33     FF FF C3 99 
03e37     BD BD 99 C3 
03e3b     FF FF FF FF 
03e3f     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
03e43     78 70 58 4C 
03e47     1E 33 33 33 
03e4b     33 1E 00 00 
03e4f     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
03e53     3C 66 66 66 
03e57     66 3C 18 7E 
03e5b     18 18 00 00 
03e5f     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
03e63     FC CC FC 0C 
03e67     0C 0C 0C 0E 
03e6b     0F 07 00 00 
03e6f     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
03e73     FE C6 FE C6 
03e77     C6 C6 C6 E6 
03e7b     E7 67 03 00 
03e7f     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
03e83     18 18 DB 3C 
03e87     E7 3C DB 18 
03e8b     18 00 00 00 
03e8f     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
03e93     03 07 0F 1F 
03e97     7F 1F 0F 07 
03e9b     03 01 00 00 
03e9f     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
03ea3     60 70 78 7C 
03ea7     7F 7C 78 70 
03eab     60 40 00 00 
03eaf     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
03eb3     18 3C 7E 18 
03eb7     18 18 7E 3C 
03ebb     18 00 00 00 
03ebf     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
03ec3     66 66 66 66 
03ec7     66 66 66    | 	byte	$66[7]
03eca     00 66 66 00 
03ece     00 00 00 00 
03ed2     00 FE DB DB 
03ed6     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
03eda     D8 D8 D8 00 
03ede     00 00 00 3E 
03ee2     63 06 1C 36 
03ee6     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
03eea     30 63 3E 00 
03eee     00 00 00 00 
03ef2     00 00 00 00 
03ef6     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03efa     7F 7F 7F 00 
03efe     00 00 00 00 
03f02     00 18 3C 7E 
03f06     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
03f0a     3C 18 7E 00 
03f0e     00 00 00 00 
03f12     00 18 3C 7E 
03f16     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
03f1a     18 18 18 00 
03f1e     00 00 00 00 
03f22     00 18 18 18 
03f26     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
03f2a     7E 3C 18 00 
03f2e     00 00 00 00 
03f32     00 00 00 18 
03f36     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
03f3a     00 00 00 00 
03f3e     00 00 00 00 
03f42     00 00 00    | 	byte	$00[11]
03f45     0C 06 7F 06 
03f49     0C 00 00 00 
03f4d     00 00 00 00 
03f51     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03f55     00 03 03 03 
03f59     7F 00 00 00 
03f5d     00 00 00 00 
03f61     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03f65     14 36 7F 36 
03f69     14 00 00 00 
03f6d     00 00 00 00 
03f71     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
03f75     1C 1C 3E 3E 
03f79     7F 7F 00 00 
03f7d     00 00 00 00 
03f81     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03f85     7F 3E 3E 1C 
03f89     1C 08 00 00 
03f8d     00 00 00 00 
03f91     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03f95     00 00 00 00 
03f99     00 00 00 00 
03f9d     00 00 00 00 
03fa1     00 00       | 	byte	$00[14]
03fa3     18 3C 3C 3C 
03fa7     18 18 18 00 
03fab     18 18 00 00 
03faf     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
03fb3     66 24 00 00 
03fb7     00 00 00 00 
03fbb     00 00 00 00 
03fbf     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03fc3     00 36 36 7F 
03fc7     36 36 36 7F 
03fcb     36 36 00 00 
03fcf     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
03fd3     3E 63 43 03 
03fd7     3E 60 60 61 
03fdb     63 3E 18 18 
03fdf     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
03fe3     00 00 43 63 
03fe7     30 18 0C 06 
03feb     63 61 00 00 
03fef     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
03ff3     1C 36 36 1C 
03ff7     6E 3B 33 33 
03ffb     33 6E 00 00 
03fff     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
04003     0C 0C 0C 06 
04007     00 00 00 00 
0400b     00 00 00 00 
0400f     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04013     30 18 0C 0C 
04017     0C 0C 0C 0C 
0401b     18 30 00 00 
0401f     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
04023     0C 18 30 30 
04027     30 30 30 30 
0402b     18 0C 00 00 
0402f     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
04033     00 00 00 66 
04037     3C FF 3C 66 
0403b     00 00 00 00 
0403f     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
04043     00 00 00 18 
04047     18 7E 18 18 
0404b     00 00 00 00 
0404f     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
04053     00 00 00 00 
04057     00 00 00 00 | 	byte	$00[8]
0405b     18 18 18 0C 
0405f     00 00 00 00 
04063     00 00 00 00 
04067     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
0406b     00 00 00 00 
0406f     00 00 00 00 
04073     00 00 00 00 
04077     00 00 00 00 | 	byte	$00[16]
0407b     18 18 00 00 
0407f     00 00 00 00 
04083     00 00 40 60 
04087     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
0408b     03 01 00 00 
0408f     00 00 00 00 
04093     1C 36 63 63 
04097     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
0409b     36 1C 00 00 
0409f     00 00 00 00 
040a3     18 1C 1E 18 
040a7     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
040ab     18 7E 00 00 
040af     00 00 00 00 
040b3     3E 63 60 30 
040b7     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
040bb     63 7F 00 00 
040bf     00 00 00 00 
040c3     3E 63 60 60 
040c7     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
040cb     63 3E 00 00 
040cf     00 00 00 00 
040d3     30 38 3C 36 
040d7     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
040db     30 78 00 00 
040df     00 00 00 00 
040e3     7F 03 03 03 
040e7     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
040eb     63 3E 00 00 
040ef     00 00 00 00 
040f3     1C 06 03 03 
040f7     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
040fb     63 3E 00 00 
040ff     00 00 00 00 
04103     7F 63 60 60 
04107     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
0410b     0C 0C 00 00 
0410f     00 00 00 00 
04113     3E 63 63 63 
04117     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
0411b     63 3E 00 00 
0411f     00 00 00 00 
04123     3E 63 63 63 
04127     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
0412b     30 1E 00 00 
0412f     00 00 00 00 
04133     00 00 00 18 
04137     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
0413b     18 18 00 00 
0413f     00 00 00 00 
04143     00 00 00 18 
04147     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
0414b     18 18 0C 00 
0414f     00 00 00 00 
04153     00 60 30 18 
04157     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
0415b     30 60 00 00 
0415f     00 00 00 00 
04163     00 00 00 7E 
04167     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
0416b     00 00 00 00 
0416f     00 00 00 00 
04173     00          | 	byte	$00[9]
04174     06 0C 18 30 
04178     60 30 18 0C 
0417c     06 00 00 00 
04180     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
04184     63 63 30 18 
04188     18 18 00 18 
0418c     18 00 00 00 
04190     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
04194     3E 63 63 7B 
04198     7B 7B 3B 03 
0419c     3E 00 00 00 
041a0     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
041a4     1C 36 63 63 
041a8     7F 63 63 63 
041ac     63 00 00 00 
041b0     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
041b4     66 66 66 3E 
041b8     66 66 66 66 
041bc     3F 00 00 00 
041c0     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
041c4     66 43 03 03 
041c8     03 03 43 66 
041cc     3C 00 00 00 
041d0     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
041d4     36 66 66 66 
041d8     66 66 66 36 
041dc     1F 00 00 00 
041e0     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
041e4     66 46 16 1E 
041e8     16 06 46 66 
041ec     7F 00 00 00 
041f0     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
041f4     66 46 16 1E 
041f8     16 06 06 06 
041fc     0F 00 00 00 
04200     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
04204     66 43 03 03 
04208     7B 63 63 66 
0420c     5C 00 00 00 
04210     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
04214     63 63 63 7F 
04218     63 63 63 63 
0421c     63 00 00 00 
04220     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
04224     18 18 18 18 
04228     18 18 18 18 | 	byte	$18[8]
0422c     3C 00 00 00 
04230     00 00 00 78 
04234     30 30 30 30 
04238     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
0423c     1E 00 00 00 
04240     00 00 00 67 
04244     66 66 36 1E 
04248     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
0424c     67 00 00 00 
04250     00 00 00 0F 
04254     06 06 06 06 
04258     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
0425c     7F 00 00 00 
04260     00 00 00 63 
04264     77 7F 7F 6B 
04268     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
0426c     63 00 00 00 
04270     00 00 00 63 
04274     67 6F 7F 7B 
04278     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
0427c     63 00 00 00 
04280     00 00 00 3E 
04284     63 63 63 63 
04288     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0428c     3E 00 00 00 
04290     00 00 00 3F 
04294     66 66 66 3E 
04298     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
0429c     0F 00 00 00 
042a0     00 00 00 3E 
042a4     63 63 63 63 
042a8     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
042ac     3E 30 70 00 
042b0     00 00 00 3F 
042b4     66 66 66 3E 
042b8     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
042bc     67 00 00 00 
042c0     00 00 00 3E 
042c4     63 63 06 1C 
042c8     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
042cc     3E 00 00 00 
042d0     00 00 00 7E 
042d4     7E 5A 18 18 
042d8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
042dc     3C 00 00 00 
042e0     00 00 00 63 
042e4     63 63 63 63 
042e8     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
042ec     3E 00 00 00 
042f0     00 00 00 63 
042f4     63 63 63 63 
042f8     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
042fc     08 00 00 00 
04300     00 00 00 63 
04304     63 63 63 6B 
04308     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
0430c     36 00 00 00 
04310     00 00 00 63 
04314     63 36 3E 1C 
04318     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
0431c     63 00 00 00 
04320     00 00 00 66 
04324     66 66 66 3C 
04328     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
0432c     3C 00 00 00 
04330     00 00 00 7F 
04334     63 61 30 18 
04338     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
0433c     7F 00 00 00 
04340     00 00 00 3C 
04344     0C 0C 0C 0C 
04348     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
0434c     3C 00 00 00 
04350     00 00 00 00 
04354     01 03 07 0E 
04358     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
0435c     40 00 00 00 
04360     00 00 00 3C 
04364     30 30 30 30 
04368     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
0436c     3C 00 00 00 
04370     1C 36 00 00 
04374     00 00 00 00 
04378     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0437c     00 00 00 00 
04380     00 00 00 00 
04384     00 00 00 00 
04388     00 00 00 00 
0438c     00          | 	byte	$00[17]
0438d     FF 00 00 0C 
04391     18 00 00 00 
04395     00 00 00 00 
04399     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0439d     00 00 00 00 
043a1     00 00 00 00 
043a5     00          | 	byte	$00[9]
043a6     1E 30 3E 33 
043aa     33 33 6E 00 
043ae     00 00 00 00 
043b2     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
043b6     1E 36 66 66 
043ba     66 66 3E 00 
043be     00 00 00 00 
043c2     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
043c6     3E 63 03 03 
043ca     03 63 3E 00 
043ce     00 00 00 00 
043d2     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
043d6     3C 36 33 33 
043da     33 33 6E 00 
043de     00 00 00 00 
043e2     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
043e6     3E 63 7F 03 
043ea     03 63 3E 00 
043ee     00 00 00 00 
043f2     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
043f6     0C 1E 0C 0C 
043fa     0C 0C 1E 00 
043fe     00 00 00 00 
04402     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
04406     6E 33 33 33 
0440a     33 33 3E 30 
0440e     33 1E 00 00 
04412     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
04416     36 6E 66 66 
0441a     66 66 67 00 
0441e     00 00 00 00 
04422     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
04426     1C 18 18 18 
0442a     18 18 3C 00 
0442e     00 00 00 00 
04432     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
04436     70 60 60 60 
0443a     60 60 60 66 
0443e     66 3C 00 00 
04442     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
04446     66 36 1E 1E 
0444a     36 66 67 00 
0444e     00 00 00 00 
04452     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
04456     18 18 18 18 
0445a     18 18       | 	byte	$18[6]
0445c     3C 00 00 00 
04460     00 00 00 00 
04464     00 00 37 7F 
04468     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
0446c     63 00 00 00 
04470     00 00 00 00 
04474     00 00 3B 66 
04478     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
0447c     66 00 00 00 
04480     00 00 00 00 
04484     00 00 3E 63 
04488     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
0448c     3E 00 00 00 
04490     00 00 00 00 
04494     00 00 3B 66 
04498     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
0449c     3E 06 06 0F 
044a0     00 00 00 00 
044a4     00 00 6E 33 
044a8     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
044ac     3E 30 30 78 
044b0     00 00 00 00 
044b4     00 00 3B 6E 
044b8     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
044bc     0F 00 00 00 
044c0     00 00 00 00 
044c4     00 00 3E 63 
044c8     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
044cc     3E 00 00 00 
044d0     00 00 00 08 
044d4     0C 0C 3F 0C 
044d8     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
044dc     38 00 00 00 
044e0     00 00 00 00 
044e4     00 00 33 33 
044e8     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
044ec     6E 00 00 00 
044f0     00 00 00 00 
044f4     00 00 63 63 
044f8     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
044fc     1C 00 00 00 
04500     00 00 00 00 
04504     00 00 63 63 
04508     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
0450c     36 00 00 00 
04510     00 00 00 00 
04514     00 00 63 36 
04518     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
0451c     63 00 00 00 
04520     00 00 00 00 
04524     00 00 63 63 
04528     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
0452c     7E 60 30 1F 
04530     00 00 00 00 
04534     00 00 7F 33 
04538     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
0453c     7F 00 00 00 
04540     00 00 00 70 
04544     18 18 18 0E 
04548     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
0454c     70 00 00 00 
04550     00 00 00 18 
04554     18 18 18 18 
04558     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
0455c     18 00 00 00 
04560     00 00 00 0E 
04564     18 18 18 70 
04568     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
0456c     0E 00 00 00 
04570     6E 3B 00 00 
04574     00 00 00 00 
04578     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0457c     00 00 00 00 
04580     00 00 00 00 
04584     00 00       | 	byte	$00[10]
04586     08 1C 36 63 
0458a     63 63 7F 00 
0458e     00 00 00 00 
04592     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
04596     03 03 03 03 
0459a     43 66 3C 18 
0459e     30 1E 00 00 
045a2     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
045a6     33 33 33 33 
045aa     33 33       | 	byte	$33[6]
045ac     6E 00 00 00 
045b0     00 00 60 30 
045b4     18 00 3E 63 
045b8     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
045bc     3E 00 00 00 
045c0     00 00 08 1C 
045c4     36 00 1E 30 
045c8     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
045cc     6E 00 00 00 
045d0     00 00 00 00 
045d4     33 00 1E 30 
045d8     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
045dc     6E 00 00 00 
045e0     00 00 1C 36 
045e4     1C 00 33 33 
045e8     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
045ec     6E 00 00 00 
045f0     00 00 60 30 
045f4     18 00 3E 63 
045f8     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
045fc     3E 00 00 00 
04600     00 00 00 00 
04604     00 00 3E 63 
04608     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
0460c     3E 18 30 1E 
04610     00 00 00 1C 
04614     58 78 38 18 
04618     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
0461c     3C 00 00 00 
04620     00 00 00 00 
04624     63 00 3E 63 
04628     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
0462c     3E 00 00 00 
04630     66 33 00 3E 
04634     63 63 63 63 
04638     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0463c     3E 00 00 00 
04640     00 00 CC 66 
04644     33 00 3E 63 
04648     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
0464c     3E 00 00 00 
04650     00 00 18 3C 
04654     66 00 1C 18 
04658     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
0465c     3C 00 00 00 
04660     30 18 00 7F 
04664     63 61 30 18 
04668     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
0466c     7F 00 00 00 
04670     00 63 00 08 
04674     1C 36 63 63 
04678     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
0467c     63 00 00 00 
04680     30 18 00 3C 
04684     66 43 03 03 
04688     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
0468c     3C 00 00 00 
04690     30 18 00 7F 
04694     66 46 16 1E 
04698     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
0469c     7F 00 00 00 
046a0     0C 06 00 0F 
046a4     06 06 06 06 
046a8     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
046ac     7F 00 00 00 
046b0     30 18 00 1C 
046b4     18 18 18 18 
046b8     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
046bc     3C 00 00 00 
046c0     00 00 08 1C 
046c4     36 00 3E 63 
046c8     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
046cc     3E 00 00 00 
046d0     00 00 00 00 
046d4     63 00 3E 63 
046d8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
046dc     3E 00 00 00 
046e0     00 00 00 6F 
046e4     46 26 06 06 
046e8     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
046ec     7F 00 00 00 
046f0     00 00 00 6E 
046f4     4C 2C 0C 0C 
046f8     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
046fc     1E 00 00 00 
04700     30 18 00 3E 
04704     63 63 06 1C 
04708     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
0470c     3E 00 00 00 
04710     00 00 60 30 
04714     18 00 3E 63 
04718     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
0471c     3E 00 00 00 
04720     00 63 00 3E 
04724     63 63 63 63 
04728     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0472c     3E 00 00 00 
04730     00 63 00 63 
04734     63 63 63 63 
04738     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
0473c     3E 00 00 00 
04740     6C 38 00 7E 
04744     7E 5A 18 18 
04748     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
0474c     3C 00 00 00 
04750     00 00 60 48 
04754     2C 0C 3F 0C 
04758     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
0475c     38 00 00 00 
04760     00 00 00 0F 
04764     26 36 1E 0E 
04768     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
0476c     7F 00 00 00 
04770     00 00 00 00 
04774     00 63 36 1C 
04778     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
0477c     00 00 00 00 
04780     00 00       | 	byte	$00[6]
04782     36 1C 08 00 
04786     3E 63 03 03 
0478a     03 63 3E 00 
0478e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
04792     30 18 0C 00 
04796     1E 30 3E 33 
0479a     33 33 6E 00 
0479e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
047a2     60 30 18 00 
047a6     1C 18 18 18 
047aa     18 18 3C 00 
047ae     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
047b2     60 30 18 00 
047b6     3E 63 63 63 
047ba     63 63 3E 00 
047be     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
047c2     30 18 0C 00 
047c6     33 33 33 33 
047ca     33 33 6E 00 
047ce     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
047d2     00 08 1C 36 
047d6     63 63 7F 63 
047da     63 63 63 18 
047de     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
047e2     00 00 00 00 
047e6     1E 30 3E 33 
047ea     33 33 6E 18 
047ee     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
047f2     00 7F 63 61 
047f6     30 18 0C 06 
047fa     43 63 7F 00 
047fe     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
04802     36 1C 08 00 
04806     7F 33 18 0C 
0480a     06 63 7F 00 
0480e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
04812     00 7F 66 46 
04816     16 1E 16 06 
0481a     46 66 7F 18 
0481e     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
04822     00 00 00 00 
04826     3E 63 7F 03 
0482a     03 63 3E 18 
0482e     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
04832     00 3C 66 03 
04836     1F 03 0F 03 
0483a     03 66 3C 00 
0483e     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
04842     60 30 18 00 
04846     7F 33 18 0C 
0484a     06 63 7F 00 
0484e     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
04852     00 3C 66 43 
04856     03 03 03 03 
0485a     43 66 3C 00 
0485e     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
04862     00 00 00 00 
04866     3E 63 06 1C 
0486a     30 63 3E 18 
0486e     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
04872     00 00 00 00 
04876     00 00       | 	byte	$00[6]
04878     6C 36 1B 36 
0487c     6C 00 00 00 
04880     00 00 00 00 
04884     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04888     1B 36 6C 36 
0488c     1B 00 00 00 
04890     88 22 88 22 
04894     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
04898     88 22 88 22 
0489c     88 22 88 22 
048a0     AA 55 AA 55 
048a4     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
048a8     AA 55 AA 55 
048ac     AA 55 AA 55 
048b0     BB EE BB EE 
048b4     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
048b8     BB EE BB EE 
048bc     BB EE BB EE 
048c0     18 18 18 18 
048c4     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
048c8     18 18 18 18 
048cc     18 18 18 18 
048d0     18 18 18 18 
048d4     18 18 18    | 	byte	$18[15]
048d7     1F 18 18 18 
048db     18 18 18 18 
048df     18 30 18 00 
048e3     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
048e7     63 7F 63 63 
048eb     63 63 00 00 
048ef     00 1C 36 00 
048f3     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
048f7     63 7F 63 63 
048fb     63 63 00 00 
048ff     00 36 1C 00 
04903     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
04907     1E 16 06 46 
0490b     66 7F 00 00 
0490f     00 00 00 00 
04913     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
04917     1C 30 60 63 
0491b     63 3E 18 30 
0491f     1E 6C 6C 6C 
04923     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
04927     6F 6C 6C 6C 
0492b     6C 6C 6C 6C 
0492f     6C 6C 6C 6C 
04933     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04937     6C 6C 6C 6C 
0493b     6C 6C 6C 6C 
0493f     6C          | 	byte	$6c[9]
04940     00 00 00 00 
04944     00          | 	byte	$00[5]
04945     7F 60 6F 6C 
04949     6C 6C 6C 6C 
0494d     6C 6C 6C 6C 
04951     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04955     6F 60 7F 00 
04959     00 00 00 00 
0495d     00 00 00 18 
04961     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
04965     61 30 18 0C 
04969     06 43 63 7F 
0496d     00 00 00 00 
04971     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
04975     00 7F 33 18 
04979     0C 06 63 7F 
0497d     00 00 00 00 
04981     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
04985     00 00 1F 18 
04989     18 18 18 18 
0498d     18 18 18 18 
04991     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04995     18 18 F8 00 
04999     00 00 00 00 
0499d     00 00 00 18 
049a1     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
049a5     18 18 FF 00 
049a9     00 00 00 00 
049ad     00 00 00 00 
049b1     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
049b5     00 00 FF 18 
049b9     18 18 18 18 
049bd     18 18 18 18 
049c1     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
049c5     18 18 F8 18 
049c9     18 18 18 18 
049cd     18 18 18 00 
049d1     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
049d5     00 00 FF 00 
049d9     00 00 00 00 
049dd     00 00 00 18 
049e1     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
049e5     18 18 FF 18 
049e9     18 18 18 18 
049ed     18 18 18 63 
049f1     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
049f5     36 63 63 7F 
049f9     63 63 63 63 
049fd     00 00 00 00 
04a01     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
04a05     00 1E 30 3E 
04a09     33 33 33 6E 
04a0d     00 00 00 6C 
04a11     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04a15     EC 0C FC 00 
04a19     00 00 00 00 
04a1d     00 00 00 00 
04a21     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04a25     FC 0C EC 6C 
04a29     6C 6C 6C 6C 
04a2d     6C 6C 6C 6C 
04a31     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04a35     EF 00 FF 00 
04a39     00 00 00 00 
04a3d     00 00 00 00 
04a41     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04a45     FF 00 EF 6C 
04a49     6C 6C 6C 6C 
04a4d     6C 6C 6C 6C 
04a51     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04a55     EC 0C EC 6C 
04a59     6C 6C 6C 6C 
04a5d     6C 6C 6C 00 
04a61     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04a65     FF 00 FF 00 
04a69     00 00 00 00 
04a6d     00 00 00 6C 
04a71     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04a75     EF 00 EF 6C 
04a79     6C 6C 6C 6C 
04a7d     6C 6C 6C 00 
04a81     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04a85     63 3E 63 63 
04a89     63 63 3E 63 
04a8d     00 00 00 00 
04a91     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
04a95     30 3C 36 33 
04a99     33 33 33 6E 
04a9d     00 00 00 00 
04aa1     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
04aa5     66 66 6F 66 
04aa9     66 66 36 1F 
04aad     00 00 00 36 
04ab1     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
04ab5     66 66 66 66 
04ab9     66 66       | 	byte	$66[6]
04abb     36 1F 00 00 
04abf     00 00 63 00 
04ac3     7F 66 46 16 
04ac7     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
04acb     66 7F 00 00 
04acf     00 6C 38 00 
04ad3     38 30 30 3C 
04ad7     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
04adb     33 6E 00 00 
04adf     00 36 1C 00 
04ae3     63 67 6F 7F 
04ae7     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
04aeb     63 63 00 00 
04aef     00 30 18 00 
04af3     3C 18 18 18 
04af7     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04afb     18 3C 00 00 
04aff     00 3C 66 00 
04b03     3C 18 18 18 
04b07     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
04b0b     18 3C 00 00 
04b0f     00 00 00 36 
04b13     1C 08 00 3E 
04b17     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
04b1b     63 3E 00 00 
04b1f     00 18 18 18 
04b23     18 18 18 18 
04b27     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
04b2b     00 00 00 00 
04b2f     00 00 00 00 
04b33     00 00 00 00 | 	byte	$00[12]
04b37     F8 18 18 18 
04b3b     18 18 18 18 
04b3f     18 FF FF FF 
04b43     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
04b47     FF FF FF FF 
04b4b     FF FF FF FF 
04b4f     FF          | 	byte	$ff[9]
04b50     00 00 00 00 
04b54     00 00 00    | 	byte	$00[7]
04b57     FF FF FF FF 
04b5b     FF FF FF FF 
04b5f     FF          | 	byte	$ff[9]
04b60     00 00 00 7E 
04b64     7E 5A 18 18 
04b68     18 18 18 18 
04b6c     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
04b70     1C 36 1C 63 
04b74     63 63 63 63 
04b78     63 63 63 63 
04b7c     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04b80     FF FF FF FF 
04b84     FF FF FF    | 	byte	$ff[7]
04b87     00 00 00 00 
04b8b     00 00 00 00 
04b8f     00          | 	byte	$00[9]
04b90     30 18 00 3E 
04b94     63 63 63 63 
04b98     63 63 63 63 
04b9c     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04ba0     00 00 00 1E 
04ba4     33 33 33 1B 
04ba8     33 63 63 63 
04bac     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
04bb0     1C 36 00 3E 
04bb4     63 63 63 63 
04bb8     63 63 63 63 
04bbc     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04bc0     30 18 00 63 
04bc4     67 6F 7F 7B 
04bc8     73 63 63 63 
04bcc     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
04bd0     00 00 60 30 
04bd4     18 00 3B 66 
04bd8     66 66 66 66 
04bdc     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04be0     00 00 36 1C 
04be4     08 00 3B 66 
04be8     66 66 66 66 
04bec     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
04bf0     36 1C 00 3E 
04bf4     63 63 06 1C 
04bf8     30 60 63 63 
04bfc     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
04c00     00 00 36 1C 
04c04     08 00 3E 63 
04c08     06 1C 30 63 
04c0c     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
04c10     30 18 00 3F 
04c14     66 66 66 3E 
04c18     36 66 66 66 
04c1c     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
04c20     30 18 00 63 
04c24     63 63 63 63 
04c28     63 63 63 63 
04c2c     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04c30     00 00 60 30 
04c34     18 00 3B 6E 
04c38     66 06 06 06 
04c3c     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
04c40     66 33 00 63 
04c44     63 63 63 63 
04c48     63 63 63 63 
04c4c     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
04c50     00 00 60 30 
04c54     18 00 63 63 
04c58     63 63 63 63 
04c5c     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
04c60     30 18 00 66 
04c64     66 66 66 3C 
04c68     18 18 18 18 
04c6c     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
04c70     00 00 00 08 
04c74     0C 0C 3F 0C 
04c78     0C 0C 0C 6C 
04c7c     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
04c80     30 18 00 00 
04c84     00 00 00 00 
04c88     00 00 00 00 
04c8c     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04c90     00 00 00 00 
04c94     00 00 00 00 | 	byte	$00[8]
04c98     7F 00 00 00 
04c9c     00 00 00 00 
04ca0     66 33 00 00 
04ca4     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
04ca8     00 00 00 00 
04cac     00 00 00 00 
04cb0     00 00 00 00 
04cb4     00 00 00 00 
04cb8     00 00 00 00 
04cbc     00          | 	byte	$00[21]
04cbd     0C 06 3C 36 
04cc1     1C 00 00 00 
04cc5     00 00 00 00 
04cc9     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04ccd     00 00 00 63 
04cd1     3E 00 00 00 
04cd5     00 00 00 00 
04cd9     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04cdd     00 00 00 00 
04ce1     3E 63 06 1C 
04ce5     36 63 63 36 
04ce9     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
04ced     00 00 00 00 
04cf1     00 00 00 00 | 	byte	$00[8]
04cf5     18 00 7E 00 
04cf9     18 00 00 00 
04cfd     00 00 00 00 
04d01     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04d05     00 00 00 00 
04d09     00 00 00 00 | 	byte	$00[8]
04d0d     18 30 1E 00 
04d11     00 00 1C 36 
04d15     36 1C 00 00 
04d19     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
04d1d     00 00 00 00 
04d21     63 00 00 00 
04d25     00 00 00 00 
04d29     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04d2d     00 00 00 18 
04d31     18 00 00 00 
04d35     00 00 00 00 
04d39     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04d3d     00 00 00 00 
04d41     00          | 	byte	$00[5]
04d42     CC 66 33 00 
04d46     33 33 33 33 
04d4a     33 33 6E 00 
04d4e     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
04d52     00 3F 66 66 
04d56     66 3E 36 66 
04d5a     66 66 6F 00 
04d5e     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
04d62     36 1C 08 00 
04d66     3B 6E 66 06 
04d6a     06 06 0F 00 
04d6e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
04d72     00 00 00 7E 
04d76     7E 7E 7E 7E 
04d7a     7E 7E 00 00 
04d7e     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
04d82     00 00 00 00 
04d86     00 00 00 00 
04d8a     00 00 00 00 
04d8e     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04d90                 | 
04d90     00 00 00 00 
04d94     00          | ataripalette            file "ataripalettep2.def"
04d95     11 11 11 00 
04d99     22 22 22 00 
04d9d     33 33 33 00 
04da1     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
04da5     55 55 55 00 
04da9     66 66 66 00 
04dad     77 77 77 00 
04db1     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
04db5     99 99 99 00 
04db9     AA AA AA 00 
04dbd     BB BB BB 00 
04dc1     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
04dc5     DD DD DD 00 
04dc9     EE EE EE 00 
04dcd     FF FF FF 00 
04dd1     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
04dd5     00 14 40 00 
04dd9     00 1E 60 00 
04ddd     00 28 80 00 
04de1     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
04de5     00 3C BF 00 
04de9     00 46 DF 00 
04ded     00 50 FF 00 
04df1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
04df5     39 77 FF 00 
04df9     55 8A FF 00 
04dfd     71 9E FF 00 
04e01     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
04e05     AA C5 FF 00 
04e09     C6 D8 FF 00 
04e0d     E3 EC FF 00 
04e11     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
04e15     00 00 40 00 
04e19     00 00 60 00 
04e1d     00 00 80 00 
04e21     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
04e25     00 00 BF 00 
04e29     00 00 DF 00 
04e2d     00 00 FF 00 
04e31     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
04e35     39 39 FF 00 
04e39     55 55 FF 00 
04e3d     71 71 FF 00 
04e41     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
04e45     AA AA FF 00 
04e49     C6 C6 FF 00 
04e4d     E3 E3 FF 00 
04e51     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
04e55     20 00 40 00 
04e59     30 00 60 00 
04e5d     40 00 80 00 
04e61     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
04e65     60 00 BF 00 
04e69     70 00 DF 00 
04e6d     80 00 FF 00 
04e71     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
04e75     9C 39 FF 00 
04e79     AA 55 FF 00 
04e7d     B8 71 FF 00 
04e81     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
04e85     D5 AA FF 00 
04e89     E3 C6 FF 00 
04e8d     F1 E3 FF 00 
04e91     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
04e95     40 00 40 00 
04e99     60 00 60 00 
04e9d     80 00 80 00 
04ea1     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
04ea5     BF 00 BF 00 
04ea9     DF 00 DF 00 
04ead     FF 00 FF 00 
04eb1     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
04eb5     FF 39 FF 00 
04eb9     FF 55 FF 00 
04ebd     FF 71 FF 00 
04ec1     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
04ec5     FF AA FF 00 
04ec9     FF C6 FF 00 
04ecd     FF E3 FF 00 
04ed1     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
04ed5     40 00 20 00 
04ed9     60 00 30 00 
04edd     80 00 40 00 
04ee1     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
04ee5     BF 00 60 00 
04ee9     DF 00 70 00 
04eed     FF 00 80 00 
04ef1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
04ef5     FF 39 9C 00 
04ef9     FF 55 AA 00 
04efd     FF 71 B8 00 
04f01     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
04f05     FF AA D5 00 
04f09     FF C6 E3 00 
04f0d     FF E3 F1 00 
04f11     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
04f15     40 00 00 00 
04f19     60 00 00 00 
04f1d     80 00 00 00 
04f21     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
04f25     BF 00 00 00 
04f29     DF 00 00 00 
04f2d     FF 00 00 00 
04f31     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
04f35     FF 39 39 00 
04f39     FF 55 55 00 
04f3d     FF 71 71 00 
04f41     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
04f45     FF AA AA 00 
04f49     FF C6 C6 00 
04f4d     FF E3 E3 00 
04f51     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
04f55     40 10 00 00 
04f59     60 18 00 00 
04f5d     80 20 00 00 
04f61     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
04f65     BF 30 00 00 
04f69     DF 38 00 00 
04f6d     FF 40 00 00 
04f71     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
04f75     FF 6A 39 00 
04f79     FF 80 55 00 
04f7d     FF 95 71 00 
04f81     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
04f85     FF BF AA 00 
04f89     FF D5 C6 00 
04f8d     FF EA E3 00 
04f91     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
04f95     40 20 00 00 
04f99     60 30 00 00 
04f9d     80 40 00 00 
04fa1     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
04fa5     BF 60 00 00 
04fa9     DF 70 00 00 
04fad     FF 80 00 00 
04fb1     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
04fb5     FF 9C 39 00 
04fb9     FF AA 55 00 
04fbd     FF B8 71 00 
04fc1     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
04fc5     FF D5 AA 00 
04fc9     FF E3 C6 00 
04fcd     FF F1 E3 00 
04fd1     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
04fd5     40 30 00 00 
04fd9     60 48 00 00 
04fdd     80 60 00 00 
04fe1     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
04fe5     BF 90 00 00 
04fe9     DF A8 00 00 
04fed     FF C0 00 00 
04ff1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
04ff5     FF CE 39 00 
04ff9     FF D5 55 00 
04ffd     FF DC 71 00 
05001     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
05005     FF EA AA 00 
05009     FF F1 C6 00 
0500d     FF F8 E3 00 
05011     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
05015     30 40 00 00 
05019     48 60 00 00 
0501d     60 80 00 00 
05021     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
05025     90 BF 00 00 
05029     A8 DF 00 00 
0502d     C0 FF 00 00 
05031     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
05035     CE FF 39 00 
05039     D5 FF 55 00 
0503d     DC FF 71 00 
05041     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
05045     EA FF AA 00 
05049     F1 FF C6 00 
0504d     F8 FF E3 00 
05051     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
05055     00 40 00 00 
05059     00 60 00 00 
0505d     00 80 00 00 
05061     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
05065     00 BF 00 00 
05069     00 DF 00 00 
0506d     00 FF 00 00 
05071     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
05075     39 FF 39 00 
05079     55 FF 55 00 
0507d     71 FF 71 00 
05081     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
05085     AA FF AA 00 
05089     C6 FF C6 00 
0508d     E3 FF E3 00 
05091     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
05095     00 40 14 00 
05099     00 60 1E 00 
0509d     00 80 28 00 
050a1     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
050a5     00 BF 3C 00 
050a9     00 DF 46 00 
050ad     00 FF 50 00 
050b1     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
050b5     39 FF 77 00 
050b9     55 FF 8A 00 
050bd     71 FF 9E 00 
050c1     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
050c5     AA FF C5 00 
050c9     C6 FF D8 00 
050cd     E3 FF EC 00 
050d1     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
050d5     00 40 28 00 
050d9     00 60 3C 00 
050dd     00 80 50 00 
050e1     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
050e5     00 BF 78 00 
050e9     00 DF 8C 00 
050ed     00 FF A0 00 
050f1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
050f5     39 FF B5 00 
050f9     55 FF C0 00 
050fd     71 FF CA 00 
05101     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
05105     AA FF DF 00 
05109     C6 FF EA 00 
0510d     E3 FF F4 00 
05111     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
05115     00 40 40 00 
05119     00 60 60 00 
0511d     00 80 80 00 
05121     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
05125     00 BF BF 00 
05129     00 DF DF 00 
0512d     00 FF FF 00 
05131     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
05135     39 FF FF 00 
05139     55 FF FF 00 
0513d     71 FF FF 00 
05141     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
05145     AA FF FF 00 
05149     C6 FF FF 00 
0514d     E3 FF FF 00 
05151     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
05155     00 28 40 00 
05159     00 3C 60 00 
0515d     00 50 80 00 
05161     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
05165     00 78 BF 00 
05169     00 8C DF 00 
0516d     00 A0 FF 00 
05171     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
05175     39 B5 FF 00 
05179     55 C0 FF 00 
0517d     71 CA FF 00 
05181     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
05185     AA DF FF 00 
05189     C6 EA FF 00 
0518d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
05190                 | 
05190     3C 00 66 FD | hdmi            setcmod #$100                           'enable HDMI mode
05194     58 80 67 FD |                 drvl    #7<<6 + hdmi_base               'enable HDMI pins
05198     7B 0B 80 FF 
0519c     C0 01 0F FC |                 wrpin   ##%10110_1111_0111_10_00000_0, #7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
051a0     66 66 86 FF 
051a4     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk (25 MHz)
051a8                 | 
051a8     28 10 64 FD |                 setq    #8
051ac     61 0D 05 FB |                 rdlong  framebuf,  ptra++               'read pointers
051b0                 | 
051b0     29 FE 65 FD |                 setq2   #255
051b4     8C 00 00 FB |                 rdlong  $000, paletteptr                'read palette
051b8                 | 
051b8                 | '' Blank lines before the frame
051b8                 | 
051b8     28 12 64 FD | p101            setq    #9
051bc     8B E2 00 FB |                 rdlong  m_bs,modeptr                    'read timings
051c0     01 00 05 F1 |                 add     frames,#1
051c4     8E 0A 01 FB |                                 rdlong  fontstart,fontnumptr
051c8     87 0A 01 F1 |                                 add     fontstart,fontbuf
051cc     8A 02 01 FB |                 rdlong  cursorx, cursorptr
051d0     81 04 E9 F8 |                 getbyte cursory, cursorx,#1
051d4     81 FE F0 F8 |                 getbyte cursorsh,cursorx,#2
051d8     FF 02 05 F5 |                 and     cursorx,#255
051dc                 | 
051dc     88 1E 01 F6 |                 mov     borderptr2,borderptr
051e0     8F E0 00 FB |                 rdlong  border,borderptr2
051e4     04 1E 05 F1 |                 add     borderptr2,#4
051e8     08 E0 64 F0 |                 shl     border,#8
051ec                 | 
051ec     8D 2A 01 FB |                 rdlong  t1,commandptr
051f0     04 1A 05 F1 |                 add     commandptr,#4
051f4     8D 2C 01 FB |                 rdlong  t2,commandptr
051f8     04 1A 85 F1 |                 sub     commandptr,#4
051fc     01 2B 1D F2 |                 cmp     t1,#257  wcz
05200     95 2C 31 CC |          if_lt  wrlut   t2,t1
05204     01 2B 05 F6 |                 mov     t1, #257
05208     8D 2A 61 FC |                 wrlong  t1,commandptr
0520c     6C 24 01 F6 |                 mov     hsync0,sync_000                 'vsync off
05210     6D 26 01 F6 |                 mov     hsync1,sync_001
05214     44 F0 44 FB |                 callpa  i_upporch ,#blank
05218     89 00 48 FC |                 wrbyte  #0,vblankptr
0521c                 | 
0521c                 | '' Upper border.
0521c                 | 
0521c     04 00 0D F4 |                 testb   frames,#4 wz                    'cursor blinks at framerate/16, todo: define
05220     65 02 05 A6 |          if_z   mov     cursorx,#101
05224                 | 
05224                 | 
05224     77 20 01 F6 |                 mov     ii, i_vborder
05228                 | 
05228     08 01 B0 FD | up_border       call    #hsync
0522c     70 E8 C0 FC |                 xcont   m_vi,border
05230     FD 21 6D FB |                 djnz    ii,#up_border
05234                 | 
05234                 | '' 480 active lines
05234                 | 
05234     E0 21 05 F6 |                 mov     ii,#480
05238     00 F8 04 F6 |                 mov     linenum,#0
0523c                 | 
0523c     81 08 01 F6 | line1           mov     cursorpos2,cursorx
05240                 | 
05240     7C 28 41 F8 |                 getnib  fontline,linenum,#0             'fontline is 0 to 15, a line in font def
05244     86 22 01 F6 |                 mov     framebuf2,framebuf              'compute a line start in the framebuffer, which is (line div 16)*100
05248     7C F6 00 F6 |                 mov     linestart,linenum
0524c     04 F6 44 F0 |                 shr     linestart,#4
05250     82 F6 08 F2 |                 cmp     linestart,cursory wz
05254     78 08 05 56 |          if_nz  mov     cursorpos2,#120
05258     90 F7 04 FA |                 mul     linestart,#400
0525c     7B 22 01 F1 |                 add     framebuf2,linestart
05260     D0 00 B0 FD |                 call    #hsync
05264     00 28 0D F2 |                 cmp     fontline,#0 wz
05268     0C 00 90 5D |          if_nz  jmp     #p102                          'if fontline >0, display it
0526c                 | 
0526c     8F E0 00 FB |                 rdlong  border,borderptr2
05270     04 1E 05 F1 |                 add     borderptr2,#4
05274     08 E0 64 F0 |                 shl     border,#8
05278                 | 
05278     70 EA C0 FC | p102            xcont   m_border,border                 'display a left border
0527c     7F 28 19 F2 |                 cmp     fontline,cursorsh wcz
05280     65 06 05 C6 |          if_c   mov     cursorpos,#101
05284     84 06 01 36 |         if_nc   mov     cursorpos,cursorpos2
05288     01 06 05 F1 |                 add     cursorpos,#1
0528c     85 2C 01 F6 |                 mov     t2,fontstart
05290     94 2C 01 F1 |                 add     t2,fontline
05294                 | 
05294     64 28 DC FC |                 rep     @p103,#100                      'display 100 chars
05298                 | ''---------------------------------------------------------------------------------------
05298     91 2E 01 FB |                         rdlong  char,framebuf2                                                      '2
0529c     97 30 F1 F8 |                         getbyte backcolor,char,#2                                                   '4
052a0     97 32 F9 F8 |                         getbyte charcolor,char,#3                                                   '6
052a4     97 2E E1 F8 |                         getbyte char,char, #0                                                       '8
052a8     04 22 05 F1 |                         add     framebuf2,#4                                                        '10
052ac     04 2E 65 F0 |                         shl     char,#4                                                             '12
052b0     96 2E 01 F1 |                         add     char,t2                                                             '14
052b4     97 2A C1 FA |                         rdbyte  t1,char                                                             '16
052b8     01 06 8D F1 |                         sub     cursorpos,#1 wz                                                     '18
052bc     FF 2A 65 A5 |                 if_z    xor     t1, #$FF                                                            '20
052c0                 | 
052c0                 | 
052c0     61 2A 61 FD |                         mergeb  t1
052c4     95 EC C0 FC |                         xcont   m_lut1,t1                                                           '22
052c8                 | 
052c8     98 2A A1 FA |                         rdlut   t1,backcolor                                                        '25
052cc     7E 2A 31 FC |                         wrlut   t1,lutaddr                                                          '28
052d0     01 FC 04 F1 |                         add     lutaddr,#1                                                          '30
052d4                 | 
052d4     99 2A A1 FA |                         rdlut   t1,charcolor                                                        '33
052d8     7E 2A 31 FC |                         wrlut   t1,lutaddr                                                          '46
052dc     01 FC 84 F1 |                         sub     lutaddr,#1                                                          '38
052e0                 | 
052e0     7D EC 60 F5 |                         xor     m_lut1,a00010000                                                    '40
052e4     20 FC 64 F5 |                         xor     lutaddr,#32                                                         '42    .....    38 left
052e8                 | 
052e8                 | '' rep end ----------------------------------------------------------------------------
052e8                 | 
052e8                 | 
052e8     70 EA C0 FC | p103            xcont   m_border,border                     'display a right border
052ec                 | 
052ec     01 F8 04 F1 |                 add     linenum, #1
052f0     D2 21 6D FB |                 djnz    ii,#line1
052f4                 | 
052f4                 | '' end of active screen
052f4     89 02 68 FC |                 wrlong  #1,vblankptr
052f8     77 20 01 F6 |                 mov     ii,i_vborder                         'lower border
052fc                 | 
052fc                 | 
052fc     8F E0 00 FB |                 rdlong  border,borderptr2
05300     04 1E 05 F1 |                 add     borderptr2,#4
05304     08 E0 64 F0 |                 shl     border,#8
05308     28 00 B0 FD | down_border     call    #hsync
0530c     70 E8 C0 FC |                 xcont   m_vi,border
05310     FD 21 6D FB |                 djnz    ii,#down_border
05314     04 F4 44 FB |                 callpa  i_downporch ,#blank                  'bottom blanks
05318                 | 
05318     6E 24 01 F6 |                 mov     hsync0,sync_222                      'vsync on
0531c     6F 26 01 F6 |                 mov     hsync1,sync_223
05320     01 F2 44 FB |                 callpa  i_vsync,#blank                       'vertical sync blanks
05324     90 FE 9F FD |                 jmp     #p101                                'loop
05328                 | 
05328                 | '' Subroutines
05328                 | 
05328     08 00 B0 FD | blank           call    #hsync                          'blank lines
0532c     92 E8 C0 FC |                 xcont   m_vi,hsync0
05330     FD ED 6F 0B |         _ret_   djnz    pa,#blank
05334                 | 
05334     92 E2 C0 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
05338     93 E4 B0 FC |                 xzero   m_sn,hsync1
0533c     92 E6 C0 0C |         _ret_   xcont   m_bv,hsync0
05340                 | 
05340                 | '' consts and vars
05340                 | 
05340     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
05344     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
05348     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
0534c     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
05350                 | 
05350     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
05354                 | 
05354     10 00 81 70 | m_bs            long    $70810000 + hdmi_base<<17 + 16          'before sync
05358     50 00 81 70 | m_sn            long    $70810000 + hdmi_base<<17 + 80          'sync
0535c     14 00 81 70 | m_bv            long    $70810000 + hdmi_base<<17 + 20          'before visible
05360     00 04 81 70 | m_vi            long    $70810000 + hdmi_base<<17 + 1024        'visible 1024
05364     70 00 81 70 | m_border        long    $70810000 + hdmi_base<<17 + 112         'immediate 112
05368     08 00 88 20 | m_lut1          long    $20880000 + hdmi_base<<17 + 8          ' imm+lut, 1 char
0536c     30 00 00 00 | i_vborder       long    48
05370     10 00 00 00 | i_upporch       long    16
05374     10 00 00 00 | i_vsync         long    16
05378     10 00 00 00 | i_downporch     long    16
0537c                 | 
0537c     00 00 00 00 | linestart       long    0
05380     00 00 00 00 | linenum         long    0
05384     00 00 01 00 | a00010000       long    $00010000
05388     00 01 00 00 | lutaddr         long    256
0538c                 | 
0538c     0E 00 00 00 | cursorsh        long    14
05390     00 00 00 00 | frames          long    0
05394     00 00 00 00 | cursorx         long    0
05398     00 00 00 00 | cursory         long    0
0539c     00 00 00 00 | cursorpos       long    0
053a0     00 00 00 00 | cursorpos2      long    0
053a4     00 00 00 00 | fontstart           long        0
053a8                 | 
053a8                 | framebuf        res     1
053a8                 | framebuf        res     1
053a8                 | fontbuf         res     1
053a8                 | fontbuf         res     1
053a8                 | borderptr       res     1
053a8                 | borderptr       res     1
053a8                 | vblankptr       res     1
053a8                 | vblankptr       res     1
053a8                 | cursorptr       res     1
053a8                 | cursorptr       res     1
053a8                 | modeptr         res     1
053a8                 | modeptr         res     1
053a8                 | paletteptr      res     1
053a8                 | paletteptr      res     1
053a8                 | commandptr      res     1
053a8                 | commandptr      res     1
053a8                 | fontnumptr      res     1
053a8                 | fontnumptr      res     1
053a8                 | borderptr2      res     1
053a8                 | borderptr2      res     1
053a8                 | ii              res     1
053a8                 | ii              res     1
053a8                 | framebuf2       res     1
053a8                 | framebuf2       res     1
053a8                 | hsync0          res     1
053a8                 | hsync0          res     1
053a8                 | hsync1          res     1
053a8                 | hsync1          res     1
053a8                 | fontline        res     1
053a8                 | fontline        res     1
053a8                 | t1              res     1
053a8                 | t1              res     1
053a8                 | t2              res     1
053a8                 | t2              res     1
053a8                 | char            res     1
053a8                 | char            res     1
053a8                 | backcolor       res     1
053a8                 | backcolor       res     1
053a8                 | charcolor       res     1
053a8                 | charcolor       res     1
053a8                 |                 fit     496                     '
053a8                 | __system__dat_
053a8     00 00 00 00 
053ac     00 00 00 00 | 	byte	$00[8]
053b0     03 00 00 00 
053b4     00 00 00 00 
053b8     00 00 00 00 
053bc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
053c0                 | objmem
053c0     00 00 00 00 | 	long	0[1]
053c4 0e0             | 	org	COG_BSS_START
053c4 0e0             | _var01
053c4 0e0             | 	res	1
053c4 0e1             | _var02
053c4 0e1             | 	res	1
053c4 0e2             | _var03
053c4 0e2             | 	res	1
053c4 0e3             | _var04
053c4 0e3             | 	res	1
053c4 0e4             | _var05
053c4 0e4             | 	res	1
053c4 0e5             | _var06
053c4 0e5             | 	res	1
053c4 0e6             | _var07
053c4 0e6             | 	res	1
053c4 0e7             | _var08
053c4 0e7             | 	res	1
053c4 0e8             | arg01
053c4 0e8             | 	res	1
053c4 0e9             | arg02
053c4 0e9             | 	res	1
053c4 0ea             | arg03
053c4 0ea             | 	res	1
053c4 0eb             | arg04
053c4 0eb             | 	res	1
053c4 0ec             | arg05
053c4 0ec             | 	res	1
053c4 0ed             | arg06
053c4 0ed             | 	res	1
053c4 0ee             | arg07
053c4 0ee             | 	res	1
053c4 0ef             | arg08
053c4 0ef             | 	res	1
053c4 0f0             | arg09
053c4 0f0             | 	res	1
053c4 0f1             | arg10
053c4 0f1             | 	res	1
053c4 0f2             | arg11
053c4 0f2             | 	res	1
053c4 0f3             | arg12
053c4 0f3             | 	res	1
053c4 0f4             | arg13
053c4 0f4             | 	res	1
053c4 0f5             | arg14
053c4 0f5             | 	res	1
053c4 0f6             | arg15
053c4 0f6             | 	res	1
053c4 0f7             | arg16
053c4 0f7             | 	res	1
053c4 0f8             | arg17
053c4 0f8             | 	res	1
053c4 0f9             | arg18
053c4 0f9             | 	res	1
053c4 0fa             | local01
053c4 0fa             | 	res	1
053c4 0fb             | local02
053c4 0fb             | 	res	1
053c4 0fc             | local03
053c4 0fc             | 	res	1
053c4 0fd             | local04
053c4 0fd             | 	res	1
053c4 0fe             | local05
053c4 0fe             | 	res	1
053c4 0ff             | local06
053c4 0ff             | 	res	1
053c4 100             | local07
053c4 100             | 	res	1
053c4 101             | local08
053c4 101             | 	res	1
053c4 102             | local09
053c4 102             | 	res	1
053c4 103             | local10
053c4 103             | 	res	1
053c4 104             | local11
053c4 104             | 	res	1
053c4 105             | local12
053c4 105             | 	res	1
053c4 106             | local13
053c4 106             | 	res	1
053c4 107             | local14
053c4 107             | 	res	1
053c4 108             | local15
053c4 108             | 	res	1
053c4 109             | local16
053c4 109             | 	res	1
053c4 10a             | local17
053c4 10a             | 	res	1
053c4 10b             | local18
053c4 10b             | 	res	1
053c4 10c             | local19
053c4 10c             | 	res	1
053c4 10d             | local20
053c4 10d             | 	res	1
053c4 10e             | local21
053c4 10e             | 	res	1
053c4 10f             | local22
053c4 10f             | 	res	1
053c4 110             | local23
053c4 110             | 	res	1
053c4 111             | local24
053c4 111             | 	res	1
053c4 112             | local25
053c4 112             | 	res	1
053c4 113             | local26
053c4 113             | 	res	1
053c4 114             | local27
053c4 114             | 	res	1
053c4 115             | local28
053c4 115             | 	res	1
053c4 116             | local29
053c4 116             | 	res	1
053c4 117             | local30
053c4 117             | 	res	1
053c4 118             | local31
053c4 118             | 	res	1
053c4 119             | local32
053c4 119             | 	res	1
053c4 11a             | local33
053c4 11a             | 	res	1
053c4 11b             | local34
053c4 11b             | 	res	1
053c4 11c             | local35
053c4 11c             | 	res	1
053c4 11d             | local36
053c4 11d             | 	res	1
053c4 11e             | local37
053c4 11e             | 	res	1
053c4 11f             | local38
053c4 11f             | 	res	1
053c4 120             | local39
053c4 120             | 	res	1
053c4 121             | local40
053c4 121             | 	res	1
053c4 122             | local41
053c4 122             | 	res	1
053c4 123             | local42
053c4 123             | 	res	1
053c4 124             | local43
053c4 124             | 	res	1
053c4 125             | local44
053c4 125             | 	res	1
053c4 126             | local45
053c4 126             | 	res	1
053c4 127             | local46
053c4 127             | 	res	1
053c4 128             | local47
053c4 128             | 	res	1
053c4 129             | local48
053c4 129             | 	res	1
053c4 12a             | local49
053c4 12a             | 	res	1
053c4 12b             | local50
053c4 12b             | 	res	1
053c4 12c             | local51
053c4 12c             | 	res	1
053c4 12d             | local52
053c4 12d             | 	res	1
053c4 12e             | local53
053c4 12e             | 	res	1
053c4 12f             | local54
053c4 12f             | 	res	1
053c4 130             | local55
053c4 130             | 	res	1
053c4 131             | local56
053c4 131             | 	res	1
053c4 132             | local57
053c4 132             | 	res	1
053c4 133             | local58
053c4 133             | 	res	1
053c4 134             | local59
053c4 134             | 	res	1
053c4 135             | local60
053c4 135             | 	res	1
053c4 136             | local61
053c4 136             | 	res	1
053c4 137             | local62
053c4 137             | 	res	1
053c4 138             | local63
053c4 138             | 	res	1
053c4 139             | local64
053c4 139             | 	res	1
053c4 13a             | local65
053c4 13a             | 	res	1
053c4 13b             | local66
053c4 13b             | 	res	1
053c4 13c             | local67
053c4 13c             | 	res	1
053c4 13d             | local68
053c4 13d             | 	res	1
053c4 13e             | local69
053c4 13e             | 	res	1
053c4 13f             | local70
053c4 13f             | 	res	1
053c4 140             | local71
053c4 140             | 	res	1
053c4 141             | local72
053c4 141             | 	res	1
053c4 142             | local73
053c4 142             | 	res	1
053c4 143             | muldiva_
053c4 143             | 	res	1
053c4 144             | muldivb_
053c4 144             | 	res	1
053c4 145             | 	fit	480
053c4 145             | 
