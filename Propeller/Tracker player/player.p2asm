con
	_clkfreq = 354693878
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 354693647
	long	0 ' clock mode: will default to $1c364fb
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, objptr
	add	ptra, ##2348
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##29582584
	waitx	##200000
	mov	pa, ##29582587
	hubset	pa
	wrlong	pa, #24
	wrlong	##354693647, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_program
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra
	add	ptra, #4
	rdlong	result1, ptra
	add	ptra, #4
	rdlong	arg01, ptra
	add	ptra, #4
	rdlong	arg02, ptra
	add	ptra, #4
	rdlong	arg03, ptra
	add	ptra, #4
	rdlong	arg04, ptra
	sub	ptra, #16
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    pop	fcache_tmpb_
    add	fcache_tmpb_, pa
    push	fcache_tmpb_
    sub	fcache_tmpb_, pa
    shr	pa, #2
    altd	pa
    mov	 0-0, ret_instr_
    sub	pa, #1
    setq	pa
    rdlong	$0, fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    ret
fcache_tmpb_
    long 0
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    sub  COUNT_, #1
    setq COUNT_
    wrlong local01, ptra
    add  COUNT_, #1
pushregs_done_
    shl  COUNT_, #2
    add  ptra, COUNT_
    shr  COUNT_, #2
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra
    add    ptra, #12
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    sub    ptra, #12
    setq   #2
    rdlong COUNT_, ptra
    tjz    COUNT_, #popregs__ret
    shl    COUNT_, #2
    sub    ptra, COUNT_
    shr    COUNT_, #2
    sub    COUNT_, #1
    setq   COUNT_
    rdlong local01, ptra
popregs__ret
    push   RETADDR_
    jmp    pa

unsdivide_
       setq    #0
       qdiv    muldiva_, muldivb_
       getqx   muldivb_
 _ret_ getqy   muldiva_

divide_
       abs     muldiva_,muldiva_     wc       'abs(x)
       muxc    itmp2_,#%11                    'store sign of x
       abs     muldivb_,muldivb_     wcz      'abs(y)
 if_c  xor     itmp2_,#%10                    'store sign of y
 if_z  ret
       call    #unsdivide_
       test    itmp2_,#1        wc       'restore sign, remainder
       negc    muldiva_,muldiva_ 
       test    itmp2_,#%10      wc       'restore sign, division result
 _ret_ negc    muldivb_,muldivb_
__pc long 0
__setjmp
    pop __pc
    mov result1, #0
    mov result2, #0
    mov abortchain, arg01
    wrlong fp, arg01
    add arg01, #4
    wrlong ptra, arg01
    add arg01, #4
    wrlong objptr, arg01
    add arg01, #4
    wrlong __pc, arg01
    jmp __pc
__unwind_pc long 0
__unwind_stack
   pop  __unwind_pc
__unwind_loop
   cmp  arg01, arg02 wz
  if_z jmp #__unwind_stack_ret
   mov   ptra, arg01
   call  #popregs_
   mov   arg01, fp
   jmp   #__unwind_loop
__unwind_stack_ret
   jmp  __unwind_pc
__longjmp
    pop __pc
    cmp    arg01, #0 wz
 if_z jmp #nocatch
    mov result1, arg02
    mov result2, #1
    rdlong arg02, arg01
    add arg01, #4
    rdlong ptra, arg01
    add arg01, #4
    rdlong objptr, arg01
    add arg01, #4
    rdlong __pc, arg01
    mov arg01, fp
    call #__unwind_stack
__longjmp_ret
    jmp  __pc
nocatch
    cmp arg03, #0 wz
 if_z jmp #cogexit
    jmp #__longjmp_ret

__heap_ptr
	long	@__heap_base
abortchain
	long	0
entryptr__
	long	@entry
itmp1_
	long	0
itmp2_
	long	0
objptr
	long	@objmem
ptr___struct___bas_wrap_sender_tx_
	long	@__struct___bas_wrap_sender_tx
ptr___struct__s_vfs_file_t_putchar_
	long	@__struct__s_vfs_file_t_putchar
ptr___system__dat__
	long	@__system__dat_
ptr__audio016_spin2_dat__
	long	@_audio016_spin2_dat_
ptr__dat__
	long	@_dat_
ptr__hng030rm_spin2_dat__
	long	@_hng030rm_spin2_dat_
ptr__hng030rm_spin2_putchar_
	long	@_hng030rm_spin2_putchar
ptr__hng030rm_spin2_putpixel1_
	long	@_hng030rm_spin2_putpixel1
ptr__hng030rm_spin2_putpixel2_
	long	@_hng030rm_spin2_putpixel2
ptr__hng030rm_spin2_putpixel4_
	long	@_hng030rm_spin2_putpixel4
ptr__hng030rm_spin2_putpixel8_
	long	@_hng030rm_spin2_putpixel8
ptr__retrocog_spin2_serialcog_
	long	@_retrocog_spin2_serialcog
ptr__trackerplayer_spin2_dat__
	long	@_trackerplayer_spin2_dat_
result1
	long	0
result2
	long	0
result3
	long	0
COG_BSS_START
	fit	480
	orgh
hubentry

' 
' function addr(byref v as any)
_addr
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #8
	add	fp, #4
	wrlong	arg01, fp
' 
' return(cast(ulong,@v))
	mov	result1, arg01
	sub	fp, #4
	mov	ptra, fp
	call	#popregs_
_addr_ret
	ret

_program
	mov	COUNT_, #54
	call	#pushregs_
	add	objptr, #236
' 
' cog:=cogspin(16,serialcog(),@serialstack)
	mov	local01, objptr
	add	objptr, ##832
	mov	local02, objptr
	wrlong	local01, local02
	add	local02, #4
	wrlong	ptr__retrocog_spin2_serialcog_, local02
	mov	arg01, #16
	setq	objptr
	coginit	arg01, entryptr__ wc
 if_b	neg	arg01, #1
	mov	result1, arg01
' return cog
	add	objptr, #256
	wrlong	result1, objptr
' c=rm.start()
' return c
	mov	local03, #64
	sub	objptr, ##1280
	mov	local04, objptr
' 
' ' initialize pointers and variables
' 
' border_ptr:=@bordercolor
	sub	objptr, #36
	wrlong	local04, objptr
	add	ptr__hng030rm_spin2_dat__, ##4096
' font_ptr:=@st_font
	sub	objptr, #4
	wrlong	ptr__hng030rm_spin2_dat__, objptr
' hdmibase:=base
	add	objptr, #32
	wrlong	#0, objptr
	sub	objptr, #36
	mov	arg02, ptr__hng030rm_spin2_putpixel1_
' p1:=@putpixel1
	mov	arg01, objptr
	sub	ptr__hng030rm_spin2_dat__, ##4096
	call	#__system___make_methodptr
	mov	local05, result1
	add	objptr, #220
	wrlong	local05, objptr
	sub	objptr, #220
	mov	arg02, ptr__hng030rm_spin2_putpixel2_
' p2:=@putpixel2
	mov	arg01, objptr
	call	#__system___make_methodptr
	mov	local05, result1
	add	objptr, #224
	wrlong	local05, objptr
	sub	objptr, #224
	mov	arg02, ptr__hng030rm_spin2_putpixel4_
' p4:=@putpixel4
	mov	arg01, objptr
	call	#__system___make_methodptr
	mov	local05, result1
	add	objptr, #228
	wrlong	local05, objptr
	sub	objptr, #228
	mov	arg02, ptr__hng030rm_spin2_putpixel8_
' p8:=@putpixel8
	mov	arg01, objptr
	call	#__system___make_methodptr
	mov	local05, result1
	add	objptr, #232
	wrlong	local05, objptr
	sub	objptr, #232
' 
' 
' ' the mode has to be set here to enable computing the buffer length
' 
' setmode(mode)
	mov	arg01, #64
	call	#_hng030rm_spin2_setmode
	add	objptr, #64
	mov	local06, objptr
' 
' vblank_ptr:=@vblank
	sub	objptr, #52
	wrlong	local06, objptr
	add	objptr, #40
	mov	local07, objptr
' cursor_ptr:=@cursor_x
	sub	objptr, #36
	wrlong	local07, objptr
	add	objptr, #136
	mov	local08, objptr
' 
' fontnum_ptr:=@fontnum
	sub	objptr, #120
	wrlong	local08, objptr
' 
' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
	add	objptr, #120
	wrlong	#0, objptr
	add	objptr, #28
	mov	arg01, objptr
	sub	objptr, #180
	add	ptr__hng030rm_spin2_dat__, ##7768
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7768
' bytemove(@colors,@vgacolors,16)
	mov	arg03, #16
	call	#__system____builtin_memmove
' 
' ' initialize a cursor
' 
' cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
' cursor_y:=0
	add	objptr, #1
	wrbyte	#0, objptr
' cursor_sh:=14
	add	objptr, #1
	wrbyte	#14, objptr
	sub	objptr, #54
' 
' 
' ' start the cog
' 
' cog:=coginit(16,@hdmi, @buf_ptr)
	add	ptr__hng030rm_spin2_dat__, ##7784
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7784
	mov	arg03, objptr
	mov	arg01, #16
	setq	arg03
	coginit	arg01, arg02 wc
 if_b	neg	arg01, #1
	mov	result1, arg01
	mov	local09, result1
	add	objptr, #40
	wrlong	local09, objptr
	sub	objptr, #40
' waitms(20)
	mov	arg01, #20
	call	#__system___waitms
' 
' ' clear the screen and set the colors to green on black
' 
' cls(c_green,c_black)
	mov	arg01, #199
	mov	arg02, #0
	call	#_hng030rm_spin2_cls
' setbordercolor(0,0,128)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #128
	call	#_hng030rm_spin2_setbordercolor
' setwritecolors(c_green,c_black)
	mov	arg02, #0
' 
' 
' write_color:=ff
	add	objptr, #56
	wrlong	#199, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
' 
' return cog
	sub	objptr, #20
	rdlong	result1, objptr
	sub	objptr, #40
	mov	arg01, #0
	mov	arg03, #0
	call	#_hng030rm_spin2_setbordercolor
' v030.start(mode,pin)
' v030.setbordercolor(0,0,0)
' open SendRecvDevice(@v030.putchar, nil, nil) as #0
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putchar_
	call	#__system___make_methodptr
	mov	result3, #0
	mov	result2, #0
	mov	arg02, result1
	mov	arg03, #0
	mov	arg04, #0
	mov	arg01, #0
	call	#__system___basic_open
	mov	result1, #0
	mov	arg01, #154
	mov	arg02, #147
	call	#_hng030rm_spin2_cls
	add	objptr, ##1328
	wrlong	#128, objptr
	add	objptr, #4
	wrlong	#61, objptr
	add	objptr, #4
	wrlong	#60, objptr
	add	objptr, #4
	wrlong	#59, objptr
	add	objptr, #4
	wrlong	#58, objptr
	add	objptr, #4
	wrlong	#3, objptr
	mov	local10, ##@LR__0453
	add	objptr, ##932
	wrlong	local10, objptr
	sub	objptr, ##2280
	mov	local11, ptr__dat__
	mov	arg01, local11
	call	#_addr
	add	objptr, ##2284
	wrlong	result1, objptr
	mov	arg01, result1
	mov	arg02, #0
	sub	objptr, ##932
	call	#_trackerplayer_spin2_initModule
	mov	arg02, #1
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	sub	objptr, ##1300
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#1, objptr
' 
' emptystr$="                      "
' 
' ma=addr(module)
' tracker.initmodule(ma,0)
' 
' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
	add	objptr, ##2231
	rdlong	local12, objptr
	mov	local13, local12
	sub	objptr, ##2284
	add	local13, #20
LR__0001
	cmps	local12, local13 wcz
 if_ae	jmp	#LR__0002
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	local14, #0
' asm
	rdbyte	result1, local12
' return r
	mov	arg02, result1
	zerox	arg02, #7
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	add	local12, #1
	jmp	#LR__0001
LR__0002
	add	objptr, ##2288
	wrlong	#15, objptr
' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
	mov	local10, #0
	sub	objptr, #4
	rdlong	arg01, objptr
	add	arg01, ##1080
' asm
	rdbyte	local15, arg01
' return r
	zerox	local15, #7
	cmp	local15, #77 wz
 if_e	neg	local10, #1
	mov	local16, #0
	rdlong	arg01, objptr
	sub	objptr, ##2284
	add	arg01, ##1082
' asm
	rdbyte	result1, arg01
' return r
	mov	local17, result1
	zerox	local17, #7
	cmp	local17, #75 wz
 if_e	neg	local16, #1
	test	local10, local16 wz
 if_ne	add	objptr, ##2288
 if_ne	wrlong	#31, objptr
 if_ne	sub	objptr, ##2288
	mov	arg02, #2
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#2, objptr
	sub	objptr, #53
' position 1,2 : print samples;" ";"samples module"
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2288
	rdlong	arg02, objptr
	sub	objptr, ##2288
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg02, ##@LR__0454
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg02, ##@LR__0455
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	add	objptr, ##2284
	rdlong	local18, objptr
	add	objptr, #4
	rdlong	local19, objptr
	mov	arg02, #4
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	sub	objptr, ##2236
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#4, objptr
	sub	objptr, #53
' 'v030. setwritecolors(170,147):
' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	arg02, ##@LR__0451
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	add	objptr, ##2148
	mov	local20, objptr
	mov	local21, #0
	sub	objptr, ##2148
LR__0003
	mov	local22, ##@LR__0452
	mov	local23, local21
	mov	arg02, #2
	mov	arg03, #10
	mov	local24, #2 wz
	jmp	#LR__0006
LR__0004
	mov	local25, #0
	cmp	local26, local23 wcz
 if_be	neg	local25, #1
	mov	local27, #0
	cmp	local28, local26 wcz
 if_b	neg	local27, #1
	test	local25, local27 wz
 if_e	jmp	#LR__0005
	mov	local28, local26
	qmul	local26, #10
	getqx	local26
	add	local24, #1
	jmp	#LR__0004
LR__0005
LR__0006
	fle	local24, #32 wcz
	mov	arg01, local24
	add	arg01, #2
	call	#__system___gc_alloc_managed
	mov	local29, result1
	mov	local30, local24
	add	local30, local29
	wrbyte	#0, local30
	loc	pa,	#(@LR__0008-@LR__0007)
	call	#FCACHE_LOAD_
LR__0007
	cmp	local24, #0 wcz
 if_be	jmp	#LR__0009
	sub	local24, #1
	mov	muldiva_, local23
	mov	muldivb_, #10
	call	#unsdivide_
	mov	local31, muldiva_
	mov	local23, muldivb_
	cmp	local31, #10 wcz
 if_b	add	local31, #48
 if_ae	add	local31, #55
	mov	local32, local24
	add	local32, local29
	wrbyte	local31, local32
	jmp	#LR__0007
LR__0008
LR__0009
	mov	result1, local29
	mov	arg02, result1
	mov	arg01, local22
	call	#__system___string_concat
	mov	local33, result1
	mov	arg01, #19
	mov	arg02, ##@LR__0445
	call	#__system__String_S
	mov	arg02, result1
	mov	arg01, local33
	call	#__system___string_concat
	wrlong	result1, local20
	add	local21, #1
	add	local20, #4
	cmps	local21, #32 wcz
 if_b	jmp	#LR__0003
' for i=1 to num
	mov	local21, #1
	add	local19, #1
	mov	local34, local18
	add	local34, #20
	mov	local35, #0
	add	objptr, ##2152
	mov	local36, objptr
	add	local18, #20
	mov	local37, #0
	sub	objptr, ##2152
LR__0010
	cmps	local21, local19 wcz
 if_ae	jmp	#LR__0015
	mov	local38, local34
	add	local38, local35
	mov	local39, #0
LR__0011
	mov	arg01, local36
	call	#_addr
' asm
	rdlong	local40, result1
' return r
	add	objptr, ##2320
	wrlong	local40, objptr
	mov	arg01, local38
	add	arg01, local39
' asm
	rdbyte	result1, arg01
' return r
	mov	local22, result1
	zerox	local22, #7
	add	objptr, #4
	wrlong	local22, objptr
'     a=lpeek(addr(sn$(i)))
'     b=(peek(ma+20+30*(i-1)+j))
'     if b>=32 then poke a+j,b
	sub	objptr, ##2324
	cmps	local22, #32 wcz
 if_b	jmp	#LR__0012
	add	objptr, ##2320
	rdlong	arg01, objptr
	add	arg01, local39
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, ##2324
' asm
	wrbyte	arg02, arg01
LR__0012
	add	local39, #1
	cmps	local39, #22 wcz
 if_b	jmp	#LR__0011
	mov	local41, local18
	add	local41, local37
	mov	arg01, local41
	add	arg01, #22
	mov	local42, local41
	add	local42, #23
' asm
	rdbyte	local33, arg01
' return r
	zerox	local33, #7
	shl	local33, #8
' asm
	rdbyte	local43, local42
' return r
	zerox	local43, #7
	add	local33, local43
	shl	local33, #1
	add	objptr, ##2328
	wrlong	local33, objptr
	mov	arg01, local41
	add	arg01, #26
	mov	local44, local41
	add	local44, #27
' asm
	rdbyte	local33, arg01
' return r
	zerox	local33, #7
	shl	local33, #8
' asm
	rdbyte	local43, local44
' return r
	zerox	local43, #7
	add	local33, local43
	shl	local33, #1
	add	objptr, #4
	wrlong	local33, objptr
	mov	arg01, local41
	add	arg01, #28
	mov	local45, local41
	add	local45, #29
' asm
	rdbyte	local33, arg01
' return r
	zerox	local33, #7
	shl	local33, #8
' asm
	rdbyte	local43, local45
' return r
	zerox	local43, #7
	add	local33, local43
	shl	local33, #1
	add	objptr, #4
	wrlong	local33, objptr
	mov	arg01, local41
	add	arg01, #24
' asm
	rdbyte	local22, arg01
' return r
	zerox	local22, #7
	add	objptr, #4
	wrlong	local22, objptr
	add	local41, #25
' asm
	rdbyte	result1, local41
' return r
	mov	local22, result1
	zerox	local22, #7
	add	objptr, #4
	wrlong	local22, objptr
	sub	objptr, ##2344
' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
' ft=peek(ma+20+30*(i-1)+24)
' vl=peek(ma+20+30*(i-1)+25)
' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
	cmps	local21, #16 wcz
 if_ae	jmp	#LR__0013
	mov	local46, #5
	add	local46, local21
	mov	arg02, local46
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	mov	local47, local21
	shl	local47, #2
	add	objptr, ##2095
	add	local47, objptr
	mov	arg01, #0
	sub	objptr, ##2148
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	rdlong	arg02, local47
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local46
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#24, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2328
	rdlong	arg02, objptr
	sub	objptr, ##2328
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local46
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#31, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2340
	rdlong	arg02, objptr
	sub	objptr, ##2340
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local46
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#34, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2344
	rdlong	arg02, objptr
	sub	objptr, ##2344
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local46
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#37, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2332
	rdlong	arg02, objptr
	sub	objptr, ##2332
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local46
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#43, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2336
	rdlong	arg02, objptr
	sub	objptr, ##2336
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
LR__0013
' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
	cmps	local21, #16 wcz
 if_b	jmp	#LR__0014
	mov	local48, local21
	sub	local48, #11
	mov	arg02, local48
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#57, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	mov	local49, local21
	shl	local49, #2
	add	objptr, ##2095
	add	local49, objptr
	mov	arg01, #0
	sub	objptr, ##2148
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	rdlong	arg02, local49
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local48
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#80, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2328
	rdlong	arg02, objptr
	sub	objptr, ##2328
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local48
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#87, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2340
	rdlong	arg02, objptr
	sub	objptr, ##2340
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local48
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#90, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2344
	rdlong	arg02, objptr
	sub	objptr, ##2344
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local48
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#93, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2332
	rdlong	arg02, objptr
	sub	objptr, ##2332
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
	mov	arg02, local48
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#99, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	arg02, objptr
	sub	objptr, #53
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	add	objptr, ##2336
	rdlong	arg02, objptr
	sub	objptr, ##2336
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	mov	result1, #0
LR__0014
	add	local21, #1
	add	local35, #30
	add	local36, #4
	add	local37, #30
	jmp	#LR__0010
LR__0015
' print
	mov	arg01, #0
	call	#__system___getiolock_0145
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	arg01, #0
	call	#__system___getiolock_0145
	wrlong	#0, result1
	add	objptr, ##1860
	add	ptr__audio016_spin2_dat__, ##1776
' 
' 
' channel1[0]:=@null
	wrlong	ptr__audio016_spin2_dat__, objptr
' channel1[1]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel1[2]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel1[3]:=2
	add	objptr, #4
	wrlong	#2, objptr
' channel1[4]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel1[5]:=8192
	add	objptr, #4
	wrlong	##8192, objptr
' channel1[6]:=101
	add	objptr, #4
	wrlong	#101, objptr
' channel1[7]:=2
	add	objptr, #4
	wrlong	#2, objptr
' 
' channel2[0]:=@null
	add	objptr, #8
	wrlong	ptr__audio016_spin2_dat__, objptr
' channel2[1]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel2[2]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel2[3]:=2
	add	objptr, #4
	wrlong	#2, objptr
' channel2[4]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel2[5]:=8192
	add	objptr, #4
	wrlong	##8192, objptr
' channel2[6]:=103
	add	objptr, #4
	wrlong	#103, objptr
' channel2[7]:=2
	add	objptr, #4
	wrlong	#2, objptr
' 
' channel3[0]:=@null
	add	objptr, #8
	wrlong	ptr__audio016_spin2_dat__, objptr
' channel3[1]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel3[2]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel3[3]:=2
	add	objptr, #4
	wrlong	#2, objptr
' channel3[4]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel3[5]:=8192
	add	objptr, #4
	wrlong	##8192, objptr
' channel3[6]:=107
	add	objptr, #4
	wrlong	#107, objptr
' channel3[7]:=2
	add	objptr, #4
	wrlong	#2, objptr
' 
' channel4[0]:=@null
	add	objptr, #8
	wrlong	ptr__audio016_spin2_dat__, objptr
' channel4[1]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel4[2]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel4[3]:=2
	add	objptr, #4
	wrlong	#2, objptr
' channel4[4]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel4[5]:=8192
	add	objptr, #4
	wrlong	##8192, objptr
' channel4[6]:=109
	add	objptr, #4
	wrlong	#109, objptr
' channel4[7]:=2
	add	objptr, #4
	wrlong	#2, objptr
' channel4[8]:=1
	add	objptr, #4
	wrlong	#1, objptr
' 
' channel5[0]:=@null
	add	objptr, #4
	wrlong	ptr__audio016_spin2_dat__, objptr
' channel5[1]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel5[2]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel5[3]:=2
	add	objptr, #4
	wrlong	#2, objptr
' channel5[4]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel5[5]:=8192
	add	objptr, #4
	wrlong	##8192, objptr
' channel5[6]:=113
	add	objptr, #4
	wrlong	#113, objptr
' channel5[7]:=2
	add	objptr, #4
	wrlong	#2, objptr
' 
' channel6[0]:=@null
	add	objptr, #8
	wrlong	ptr__audio016_spin2_dat__, objptr
' channel6[1]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel6[2]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel6[3]:=2
	add	objptr, #4
	wrlong	#2, objptr
' channel6[4]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel6[5]:=8192
	add	objptr, #4
	wrlong	##8192, objptr
' channel6[6]:=127
	add	objptr, #4
	wrlong	#127, objptr
' channel6[7]:=2
	add	objptr, #4
	wrlong	#2, objptr
' 
' channel7[0]:=@null
	add	objptr, #8
	wrlong	ptr__audio016_spin2_dat__, objptr
' channel7[1]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel7[2]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel7[3]:=2
	add	objptr, #4
	wrlong	#2, objptr
' channel7[4]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel7[5]:=8192
	add	objptr, #4
	wrlong	##8192, objptr
' channel7[6]:=131
	add	objptr, #4
	wrlong	#131, objptr
' channel7[7]:=2
	add	objptr, #4
	wrlong	#2, objptr
' 
' channel8[0]:=@null
	add	objptr, #8
	wrlong	ptr__audio016_spin2_dat__, objptr
' channel8[1]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel8[2]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel8[3]:=2
	add	objptr, #4
	wrlong	#2, objptr
' channel8[4]:=0
	add	objptr, #4
	wrlong	#0, objptr
' channel8[5]:=8192
	add	objptr, #4
	wrlong	##8192, objptr
' channel8[6]:=137
	add	objptr, #4
	wrlong	#137, objptr
' channel8[7]:=2
	add	objptr, #4
	wrlong	#2, objptr
' 
' channel1[8]:=1
	sub	objptr, #248
	wrlong	#1, objptr
' channel2[8]:=1
	add	objptr, #36
	wrlong	#1, objptr
' channel3[8]:=1
	add	objptr, #36
	wrlong	#1, objptr
' channel4[8]:=1
	add	objptr, #36
	wrlong	#1, objptr
' channel5[8]:=1
	add	objptr, #36
	wrlong	#1, objptr
' channel6[8]:=1
	add	objptr, #36
	wrlong	#1, objptr
' channel7[8]:=1
	add	objptr, #36
	wrlong	#1, objptr
' channel8[8]:=1
	add	objptr, #36
	wrlong	#1, objptr
	sub	objptr, #284
' 
' cog:=coginit(16,@audio,@channel1)
	sub	ptr__audio016_spin2_dat__, ##1776
	mov	arg02, ptr__audio016_spin2_dat__
	mov	arg03, objptr
	mov	arg01, #16
	setq	arg03
	coginit	arg01, arg02 wc
 if_b	neg	arg01, #1
	mov	result1, arg01
' return cog
	add	objptr, #432
	wrlong	#0, objptr
	add	objptr, #4
	wrlong	#0, objptr
	add	objptr, #4
	wrlong	#0, objptr
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##2304
' getinfo(ma,samples)
' 
' paula.start
' 
' old1=0 : old2=0 :old3=0 : old4=0
' 
' do
LR__0016
' 
' ''---------- Wait for start of vblank. Amount=delay in frames
' 
' repeat i from 1 to amount
	mov	local50, #1
LR__0017
'   repeat until vblank==0
LR__0018
	add	objptr, #64
	rdlong	local51, objptr wz
	sub	objptr, #64
 if_e	jmp	#LR__0019
'     waitus(100)
	mov	arg01, #100
	call	#__system___waitus
	jmp	#LR__0018
LR__0019
'   repeat until vblank==1
LR__0020
	add	objptr, #64
	rdlong	local51, objptr
	sub	objptr, #64
	cmp	local51, #1 wz
 if_e	jmp	#LR__0021
'     waitus(100)
	mov	arg01, #100
	call	#__system___waitus
	jmp	#LR__0020
LR__0021
	djnz	local50, #LR__0017
	add	objptr, ##1352
	call	#_trackerplayer_spin2_tick
	add	objptr, #167
	rdlong	local10, objptr
	add	objptr, #341
	wrlong	local10, objptr
	add	objptr, #4
	wrlong	#1, objptr
	sub	objptr, #325
	rdword	local10, objptr
	add	objptr, #8
	rdlong	local52, objptr
	sub	local10, local52
	add	objptr, #321
	wrlong	local10, objptr
	sub	objptr, #329
	rdword	local10, objptr
	add	objptr, #333
	wrlong	local10, objptr
	sub	objptr, #265
	rdlong	local10, objptr
	add	objptr, #16
	rdlong	local52, objptr
	add	local10, local52
	sub	objptr, #295
	rdlong	local14, objptr
	qmul	local10, local14
	getqx	local53
	add	objptr, ##548
	wrlong	local53, objptr
	add	objptr, #4
	wrlong	##6144, objptr
	sub	objptr, #305
	rdlong	local10, objptr
	add	objptr, #16
	rdlong	local52, objptr
	add	local10, local52
	add	objptr, #293
	wrlong	local10, objptr
	add	objptr, #4
	wrlong	#1, objptr
	add	objptr, #8
	rdlong	local10, objptr
	add	objptr, #412
	wrlong	local10, objptr
	sub	objptr, ##785
	rdlong	local10, objptr
	add	objptr, #373
	wrlong	local10, objptr
	add	objptr, #4
	wrlong	#1, objptr
	sub	objptr, #359
	rdword	local10, objptr
	add	objptr, #10
	rdlong	local52, objptr
	sub	local10, local52
	add	objptr, #353
	wrlong	local10, objptr
	sub	objptr, #363
	rdword	local10, objptr
	add	objptr, #367
	wrlong	local10, objptr
	sub	objptr, #297
	rdlong	local10, objptr
	add	objptr, #16
	rdlong	local52, objptr
	add	local10, local52
	sub	objptr, #299
	rdlong	local14, objptr
	qmul	local10, local14
	getqx	local53
	add	objptr, ##584
	wrlong	local53, objptr
	add	objptr, #4
	wrlong	##10240, objptr
	sub	objptr, #337
	rdlong	local10, objptr
	add	objptr, #16
	rdlong	local52, objptr
	add	local10, local52
	add	objptr, #325
	wrlong	local10, objptr
	add	objptr, #4
	wrlong	#1, objptr
	add	objptr, #8
	rdlong	local10, objptr
	add	objptr, #380
	wrlong	local10, objptr
	sub	objptr, ##785
	rdlong	local10, objptr
	add	objptr, #405
	wrlong	local10, objptr
	add	objptr, #4
	wrlong	#1, objptr
	sub	objptr, #393
	rdword	local10, objptr
	add	objptr, #12
	rdlong	local52, objptr
	sub	local10, local52
	add	objptr, #385
	wrlong	local10, objptr
	sub	objptr, #397
	rdword	local10, objptr
	add	objptr, #401
	wrlong	local10, objptr
	sub	objptr, #329
	rdlong	local10, objptr
	add	objptr, #16
	rdlong	local52, objptr
	add	local10, local52
	sub	objptr, #303
	rdlong	local14, objptr
	qmul	local10, local14
	getqx	local53
	add	objptr, ##620
	wrlong	local53, objptr
	add	objptr, #4
	wrlong	##10240, objptr
	sub	objptr, #369
	rdlong	local10, objptr
	add	objptr, #16
	rdlong	local52, objptr
	add	local10, local52
	add	objptr, #357
	wrlong	local10, objptr
	add	objptr, #4
	wrlong	#1, objptr
	add	objptr, #8
	rdlong	local10, objptr
	add	objptr, #348
	wrlong	local10, objptr
	sub	objptr, ##785
	rdlong	local10, objptr
	add	objptr, #437
	wrlong	local10, objptr
	add	objptr, #4
	wrlong	#1, objptr
	sub	objptr, #427
	rdword	local10, objptr
	add	objptr, #14
	rdlong	local52, objptr
	sub	local10, local52
	add	objptr, #417
	wrlong	local10, objptr
	sub	objptr, #431
	rdword	local10, objptr
	add	objptr, #435
	wrlong	local10, objptr
	sub	objptr, #361
	rdlong	local10, objptr
	add	objptr, #16
	rdlong	local52, objptr
	add	local10, local52
	sub	objptr, #307
	rdlong	local14, objptr
	qmul	local10, local14
	getqx	local53
	add	objptr, ##656
	wrlong	local53, objptr
	add	objptr, #4
	wrlong	##6144, objptr
	sub	objptr, #401
	rdlong	local10, objptr
	add	objptr, #16
	rdlong	local52, objptr
	add	local10, local52
	add	objptr, #389
	wrlong	local10, objptr
	add	objptr, #4
	wrlong	#1, objptr
' 
'     waitvbl
'     tracker.tick
'     
' 	paula.channel1(0)=tracker.currSamplePtr(0)
' 	paula.channel1(1)=1
' 	paula.channel1(2)=tracker.currsamplelength(0)-tracker.currrepeatLength(0)
' 	paula.channel1(3)=tracker.currsamplelength(0)
' 	paula.channel1(4)=(tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
' 	paula.channel1(5)=8192-2048
' 	paula.channel1(6)=tracker.currPeriod(0)+tracker.deltaperiod(0)
' 	paula.channel1(7)=1
' 
' 
'     old12=paula.channel2(0)
' 	paula.channel2(0)=tracker.currSamplePtr(1)
' 	paula.channel2(1)=1
' 	paula.channel2(2)=tracker.currSampleLength(1)-tracker.currrepeatLength(1)
' 	paula.channel2(3)=tracker.currSampleLength(1)
' 	paula.channel2(4)=(tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
' 	paula.channel2(5)=8192+2048
' 	paula.channel2(6)=tracker.currPeriod(1)+tracker.deltaperiod(1)
' 	paula.channel2(7)=1
' 
' 
'     old13=paula.channel3(0)
' 	paula.channel3(0)=tracker.currSamplePtr(2)
' 	paula.channel3(1)=1
' 	paula.channel3(2)=tracker.currSampleLength(2)-tracker.currrepeatLength(2)
' 	paula.channel3(3)=tracker.currSampleLength(2)
' 	paula.channel3(4)=(tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
' 	paula.channel3(5)=8192+2048
' 	paula.channel3(6)=tracker.currPeriod(2)+tracker.deltaperiod(2)
' 	paula.channel3(7)=1
' 
' 
'     old14=paula.channel4(0)    
' 	paula.channel4(0)=tracker.currSamplePtr(3)
' 	paula.channel4(1)=1
' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
' 	paula.channel4(3)=tracker.currSampleLength(3)
' 	paula.channel4(4)=(tracker.currVolume(3)+tracker.deltavolume(3))*mainvolume
' 	paula.channel4(5)=8192-2048
' 	paula.channel4(6)=tracker.currPeriod(3)+tracker.deltaperiod(3)
' 	paula.channel4(7)=1
' 
'  
'     if tracker.trigger(0) <> old1 then paula.channel1(8)=0 : old1=tracker.trigger(0)
	sub	objptr, #142
	rdbyte	local10, objptr
	add	objptr, #438
	rdlong	local52, objptr
	sub	objptr, ##2292
	cmp	local10, local52 wz
 if_e	jmp	#LR__0022
	add	objptr, ##1892
	wrlong	#0, objptr
	sub	objptr, #38
	rdbyte	local10, objptr
	add	objptr, #438
	wrlong	local10, objptr
	sub	objptr, ##2292
LR__0022
'     if tracker.trigger(1) <> old2 then paula.channel2(8)=0 : old2=tracker.trigger(1)  
	add	objptr, ##1855
	rdbyte	local10, objptr
	add	objptr, #441
	rdlong	local52, objptr
	sub	objptr, ##2296
	cmp	local10, local52 wz
 if_e	jmp	#LR__0023
	add	objptr, ##1928
	wrlong	#0, objptr
	sub	objptr, #73
	rdbyte	local10, objptr
	add	objptr, #441
	wrlong	local10, objptr
	sub	objptr, ##2296
LR__0023
'     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 : old3=tracker.trigger(2)  
	add	objptr, ##1856
	rdbyte	local10, objptr
	add	objptr, #444
	rdlong	local52, objptr
	sub	objptr, ##2300
	cmp	local10, local52 wz
 if_e	jmp	#LR__0024
	add	objptr, ##1964
	wrlong	#0, objptr
	sub	objptr, #108
	rdbyte	local10, objptr
	add	objptr, #444
	wrlong	local10, objptr
	sub	objptr, ##2300
LR__0024
'     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 : old4=tracker.trigger(3) 
	add	objptr, ##1857
	rdbyte	local10, objptr
	add	objptr, #447
	rdlong	local52, objptr
	sub	objptr, ##2304
	cmp	local10, local52 wz
 if_e	jmp	#LR__0025
	add	objptr, ##2000
	wrlong	#0, objptr
	sub	objptr, #143
	rdbyte	local10, objptr
	add	objptr, #447
	wrlong	local10, objptr
	sub	objptr, ##2304
LR__0025
	mov	arg01, #300
	call	#__system___waitus
	add	objptr, ##1892
	wrlong	##-1, objptr
	add	objptr, #36
	wrlong	##-1, objptr
	add	objptr, #36
	wrlong	##-1, objptr
	add	objptr, #36
	wrlong	##-1, objptr
	mov	arg02, #29
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	sub	objptr, ##1948
	wrbyte	#5, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#29, objptr
	add	objptr, ##1482
	rdbyte	local54, objptr
	shl	local54, #2
	add	objptr, ##613
	add	local54, objptr
	rdlong	arg01, local54
	sub	objptr, ##2148
	call	#_hng030rm_spin2_write
	add	objptr, ##2280
	rdlong	arg01, objptr
	sub	objptr, ##2280
	call	#_hng030rm_spin2_write
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#1, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#29, objptr
	add	objptr, ##1522
	rdlong	arg01, objptr
	add	objptr, #16
	rdlong	local54, objptr
	sub	objptr, ##1591
	add	arg01, local54
	mov	arg02, #3
	call	#_hng030rm_spin2_inttostr2
	mov	arg01, result1
	call	#_hng030rm_spin2_write
	mov	arg02, #29
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#32, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#29, objptr
	add	objptr, ##1483
	rdbyte	local54, objptr
	shl	local54, #2
	add	objptr, ##612
	add	local54, objptr
	rdlong	arg01, local54
	sub	objptr, ##2148
	call	#_hng030rm_spin2_write
	add	objptr, ##2280
	rdlong	arg01, objptr
	sub	objptr, ##2280
	call	#_hng030rm_spin2_write
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#28, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#29, objptr
	add	objptr, ##1526
	rdlong	arg01, objptr
	add	objptr, #16
	rdlong	local54, objptr
	sub	objptr, ##1595
	add	arg01, local54
	mov	arg02, #3
	call	#_hng030rm_spin2_inttostr2
	mov	arg01, result1
	call	#_hng030rm_spin2_write
	mov	arg02, #29
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#60, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#29, objptr
	add	objptr, ##1484
	rdbyte	local54, objptr
	shl	local54, #2
	add	objptr, ##611
	add	local54, objptr
	rdlong	arg01, local54
	sub	objptr, ##2148
	call	#_hng030rm_spin2_write
	add	objptr, ##2280
	rdlong	arg01, objptr
	sub	objptr, ##2280
	call	#_hng030rm_spin2_write
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#56, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#29, objptr
	add	objptr, ##1530
	rdlong	arg01, objptr
	add	objptr, #16
	rdlong	local54, objptr
	sub	objptr, ##1599
	add	arg01, local54
	mov	arg02, #3
	call	#_hng030rm_spin2_inttostr2
	mov	arg01, result1
	call	#_hng030rm_spin2_write
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#84, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#29, objptr
	add	objptr, ##1534
	rdlong	arg01, objptr
	add	objptr, #16
	rdlong	local54, objptr
	sub	objptr, ##1603
	add	arg01, local54
	mov	arg02, #3
	call	#_hng030rm_spin2_inttostr2
	mov	arg01, result1
	call	#_hng030rm_spin2_write
	mov	arg02, #29
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, #52
	wrbyte	#88, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#29, objptr
	add	objptr, ##1485
	rdbyte	local54, objptr
	shl	local54, #2
	add	objptr, ##610
	add	local54, objptr
	rdlong	arg01, local54
	sub	objptr, ##2148
	call	#_hng030rm_spin2_write
	add	objptr, ##2280
	rdlong	arg01, objptr
	sub	objptr, ##2280
	call	#_hng030rm_spin2_write
	jmp	#LR__0016
	mov	ptra, fp
	call	#popregs_
_program_ret
	ret

' 
' 
' ''---------- putpixel - put a pixel on the screen
' 
' pub putpixel1(x,y,c) |byte b
_hng030rm_spin2_putpixel1
' 
' 
' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #5
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0028
	add	objptr, #144
	rdlong	_var07, objptr
	sub	objptr, #144
	shl	_var07, #2
	qmul	_var07, arg02
	getqx	_var08
	rdlong	_var09, objptr
	add	_var09, _var08
	mov	_var10, arg01
	shr	_var10, #3
	add	_var09, _var10
'     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
	rdbyte	_var11, _var09
'     if (c==0)
	cmp	arg03, #0 wz
 if_ne	jmp	#LR__0026
	abs	_var01, arg01 wc
	and	_var01, #7
 if_b	neg	_var01, _var01
	decod	_var12, _var01
'       b:=b & !(1<<(x//8))
	andn	_var11, _var12
'     else
	jmp	#LR__0027
LR__0026
	abs	_var01, arg01 wc
	and	_var01, #7
 if_b	neg	_var01, _var01
	decod	_var13, _var01
'       b:=b |(1<<(x//8))
	or	_var11, _var13
LR__0027
	add	objptr, #144
	rdlong	_var14, objptr
	sub	objptr, #144
	shl	_var14, #2
	qmul	_var14, arg02
	getqx	_var15
	rdlong	_var16, objptr
	add	_var16, _var15
	add	_var16, _var10
'     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
	wrbyte	_var11, _var16
LR__0028
_hng030rm_spin2_putpixel1_ret
	ret

' 
' 
' pub putpixel2(x,y,c) |byte b
_hng030rm_spin2_putpixel2
' 
' 
' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #4
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0029
	add	objptr, #144
	rdlong	_var07, objptr
	sub	objptr, #144
	shl	_var07, #2
	qmul	_var07, arg02
	getqx	_var08
	rdlong	_var09, objptr
	add	_var09, _var08
	mov	_var10, arg01
	shr	_var10, #2
	add	_var09, _var10
'     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
	rdbyte	_var11, _var09
	abs	_var01, arg01 wc
	and	_var01, #3
 if_b	neg	_var01, _var01
	shl	_var01, #1
	mov	_var12, #3
	shl	_var12, _var01
'     b:=b & !(%11<<((x//4)<<1))
	andn	_var11, _var12
	shl	arg03, _var01
'     b:=b |(c<<((x//4)<<1))
	or	_var11, arg03
	add	objptr, #144
	rdlong	_var13, objptr
	sub	objptr, #144
	shl	_var13, #2
	qmul	_var13, arg02
	getqx	_var14
	rdlong	_var15, objptr
	add	_var15, _var14
	add	_var15, _var10
'     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
	wrbyte	_var11, _var15
LR__0029
_hng030rm_spin2_putpixel2_ret
	ret

' 
' 
' pub putpixel4(x,y,c) |byte b
_hng030rm_spin2_putpixel4
' 
' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #4
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0030
	add	objptr, #144
	rdlong	_var07, objptr
	sub	objptr, #144
	shl	_var07, #2
	qmul	_var07, arg02
	getqx	_var08
	rdlong	_var09, objptr
	add	_var09, _var08
	mov	_var10, arg01
	shr	_var10, #1
	add	_var09, _var10
'     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
	rdbyte	_var11, _var09
	abs	_var01, arg01 wc
	and	_var01, #1
 if_b	neg	_var01, _var01
	shl	_var01, #2
	mov	_var12, #15
	shl	_var12, _var01
'     b:=b & !(%1111<<((x//2)<<2))
	andn	_var11, _var12
	shl	arg03, _var01
'     b:=b |(c<<((x//2)<<2))
	or	_var11, arg03
	add	objptr, #144
	rdlong	_var13, objptr
	sub	objptr, #144
	shl	_var13, #2
	qmul	_var13, arg02
	getqx	_var14
	rdlong	_var15, objptr
	add	_var15, _var14
	add	_var15, _var10
'     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
	wrbyte	_var11, _var15
LR__0030
_hng030rm_spin2_putpixel4_ret
	ret

' 
' 
' pub putpixel8(x,y,c)
_hng030rm_spin2_putpixel8
' 
' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #2
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0031
	add	objptr, #144
	rdlong	_var07, objptr
	sub	objptr, #144
	shl	_var07, #2
	qmul	_var07, arg02
	getqx	_var08
	rdlong	_var09, objptr
	add	_var09, _var08
	add	_var09, arg01
'     byte[buf_ptr+4*cpl*y+x]:=c
	wrbyte	arg03, _var09
LR__0031
_hng030rm_spin2_putpixel8_ret
	ret

' 
' ''---------- Set the border color, o is upper border, lines+1 is lower border
' 
' pub setbordercolor(r,g,b) | color
_hng030rm_spin2_setbordercolor
	shl	arg01, #24
	shl	arg02, #16
	add	arg01, arg02
	shl	arg03, #8
	add	arg01, arg03
' 
' color:=r<<24+g<<16+b<<8
' bordercolor:=color
	add	objptr, #44
	wrlong	arg01, objptr
	sub	objptr, #44
_hng030rm_spin2_setbordercolor_ret
	ret

' 
' 
' '*************************************************************************
' '                                                                        *
' '  Text functions                                                        *
' '                                                                        *
' '*************************************************************************
' 
' ''---------- Clear the screen, set its foreground/background color
' 
' pub cls(fc,bc)   :c
_hng030rm_spin2_cls
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
' if (graphmode<512)
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	cmps	local03, ##512 wcz
 if_ae	jmp	#LR__0032
	mov	local04, local01
	shl	local04, #24
	mov	local05, local02
	shl	local05, #16
	add	local04, local05
	add	local04, #32
'   c:=fc<<24+bc<<16+$20
'   longfill(buf_ptr,c,buflen)
	rdlong	arg01, objptr
	add	objptr, #48
	rdlong	arg03, objptr
	sub	objptr, #48
	mov	arg02, local04
	call	#\builtin_longfill_
' else
	jmp	#LR__0038
LR__0032
'   if (graphmode & 48) ==48
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #48 wz
'     c:=bc
 if_e	mov	local04, local02
 if_e	jmp	#LR__0037
'   elseif (graphmode & 48) ==32
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #32 wz
 if_ne	jmp	#LR__0033
	mov	local04, local02
	shl	local04, #4
	add	local04, local02
'     c:=bc<<4+bc
	jmp	#LR__0036
LR__0033
'   elseif (graphmode & 48) ==16
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #16 wz
 if_ne	jmp	#LR__0034
	mov	local04, local02
	shl	local04, #6
	mov	local06, local02
	shl	local06, #4
	add	local04, local06
	mov	local07, local02
	shl	local07, #2
	add	local04, local07
	add	local04, local02
'     c:=bc<<6+bc<<4+bc<<2+bc
'   else
	jmp	#LR__0035
LR__0034
'     if bc==1
	cmp	local02, #1 wz
'       c:=255
 if_e	mov	local04, #255
'     else
'       c:=0
 if_ne	mov	local04, #0
LR__0035
LR__0036
LR__0037
	add	objptr, #48
	rdlong	arg03, objptr
	sub	objptr, #48
	shl	arg03, #2
'   bytefill(buf_ptr,c,buflen*4)
	rdlong	arg01, objptr
	mov	arg02, local04
	call	#\builtin_bytefill_
LR__0038
' setwritecolors(fc,bc)
' 
' 
' write_color:=ff
	add	objptr, #56
	wrlong	local01, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	local02, objptr
' cursor_x:=0
	sub	objptr, #8
	wrbyte	#0, objptr
' cursor_y:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, #53
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_cls_ret
	ret

' 
' ''--------- Output a string at position x,y without changing colors
' 
' pub outtextxy(x,y,text) | iii
_hng030rm_spin2_outtextxy
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
' 
' repeat iii from 0 to strsize(text)-1
	mov	local02, #0
	mov	arg01, arg03
	mov	local03, #0
	loc	pa,	#(@LR__0040-@LR__0039)
	call	#FCACHE_LOAD_
LR__0039
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0039
LR__0040
	mov	result1, local03
	mov	local05, result1
	sub	local05, #1
	cmps	local05, #0 wcz
 if_a	mov	local06, #1
 if_be	neg	local06, #1
	add	local05, local06
	loc	pa,	#(@LR__0042-@LR__0041)
	call	#FCACHE_LOAD_
LR__0041
	add	objptr, #144
	rdlong	local07, objptr
	sub	objptr, #144
	qmul	local07, arg02
	getqx	local08
	add	local08, local01
	add	local08, local02
	shl	local08, #2
	rdlong	local09, objptr
	add	local09, local08
	rdlong	local10, local09
	andn	local10, #255
	mov	local11, arg03
	add	local11, local02
	rdbyte	local07, local11
	or	local10, local07
'   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
	wrlong	local10, local09
	add	local02, local06
	cmp	local02, local05 wz
 if_ne	jmp	#LR__0041
LR__0042
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_outtextxy_ret
	ret

' 
' ''---------- Output a char at the cursor position, move the cursor
' 
' pub putchar(achar) | c,x,y
_hng030rm_spin2_putchar
	mov	COUNT_, #18
	call	#pushregs_
	mov	local01, arg01
' 
' if achar==10
	cmp	local01, #10 wz
 if_ne	jmp	#LR__0043
'   crlf()
' 
' cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
' cursor_y+=1
	add	objptr, #1
	rdbyte	local02, objptr
	add	local02, #1
	wrbyte	local02, objptr
' if cursor_y>lines-1
	add	objptr, #95
	rdlong	local02, objptr
	sub	local02, #1
	sub	objptr, #95
	rdbyte	local03, objptr
	sub	objptr, #53
	cmps	local03, local02 wcz
 if_be	jmp	#LR__0046
'   scrollup()
	call	#_hng030rm_spin2_scrollup
	add	objptr, #148
	rdlong	local04, objptr
	sub	local04, #1
'   cursor_y:=lines-1
	sub	objptr, #95
	wrbyte	local04, objptr
	sub	objptr, #53
' else  
	jmp	#LR__0046
LR__0043
'   x:=cursor_x
	add	objptr, #52
	rdbyte	local05, objptr
'   y:=cursor_y
	add	objptr, #1
	rdbyte	local06, objptr
	add	objptr, #3
	rdlong	local07, objptr
	shl	local07, #24
	add	objptr, #4
	rdlong	local08, objptr
	shl	local08, #16
	add	local07, local08
'   c:=write_color<<24+write_background<<16
	add	objptr, #84
	rdlong	local09, objptr
	sub	objptr, #144
	qmul	local09, local06
	getqx	local10
	add	local10, local05
	shl	local10, #2
	rdlong	local11, objptr
	add	local11, local10
	rdlong	local12, local11
	and	local12, ##65535
	or	local12, local07
'   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
	wrlong	local12, local11
	add	objptr, #144
	rdlong	local09, objptr
	sub	objptr, #144
	qmul	local09, local06
	getqx	local13
	add	local13, local05
	shl	local13, #2
	rdlong	local14, objptr
	add	local14, local13
	rdlong	local15, local14
	andn	local15, #255
	and	local01, #255
	or	local15, local01
'   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
	wrlong	local15, local14
'   cursor_x+=1
	add	objptr, #52
	rdbyte	local16, objptr
	add	local16, #1
	wrbyte	local16, objptr
'   if cursor_x==cpl
	rdbyte	local16, objptr
	add	objptr, #92
	rdlong	local17, objptr
	sub	objptr, #144
	cmp	local16, local17 wz
 if_ne	jmp	#LR__0045
'     cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
'     cursor_y+=1
	add	objptr, #1
	rdbyte	local16, objptr
	add	local16, #1
	wrbyte	local16, objptr
'     if cursor_y>lines-1
	add	objptr, #95
	rdlong	local16, objptr
	sub	local16, #1
	sub	objptr, #95
	rdbyte	local17, objptr
	sub	objptr, #53
	cmps	local17, local16 wcz
 if_be	jmp	#LR__0044
'       scrollup()
	call	#_hng030rm_spin2_scrollup
	add	objptr, #148
	rdlong	local18, objptr
	sub	local18, #1
'       cursor_y:=lines-1
	sub	objptr, #95
	wrbyte	local18, objptr
	sub	objptr, #53
LR__0044
LR__0045
LR__0046
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_putchar_ret
	ret

' 
' ''--------- Output a string at the cursor position, move the cursor
' 
' pub write(text) | iii,c,ncx,ncy
_hng030rm_spin2_write
	mov	COUNT_, #17
	call	#pushregs_
	mov	local01, arg01
	add	objptr, #56
	rdlong	local02, objptr
	shl	local02, #24
	add	objptr, #4
	rdlong	local03, objptr
	shl	local03, #16
	add	local02, local03
' 
' c:=write_color<<24+write_background<<16
' 'debug(uhex_long(write_color))
' ncy:=cursor_y
	sub	objptr, #7
	rdbyte	local04, objptr
' ncx:=cursor_x+strsize(text)
	sub	objptr, #1
	rdbyte	local05, objptr
	sub	objptr, #52
	mov	arg01, local01
	mov	local06, #0
	loc	pa,	#(@LR__0048-@LR__0047)
	call	#FCACHE_LOAD_
LR__0047
	rdbyte	local07, arg01 wz
 if_ne	add	local06, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0047
LR__0048
	mov	result1, local06
	add	local05, local06
	mov	local08, local05
	loc	pa,	#(@LR__0050-@LR__0049)
	call	#FCACHE_LOAD_
' repeat while ncx>cpl-1
LR__0049
	add	objptr, #144
	rdlong	local05, objptr
	sub	objptr, #144
	sub	local05, #1
	cmps	local08, local05 wcz
 if_be	jmp	#LR__0051
'   ncx-=cpl
	add	objptr, #144
	rdlong	local09, objptr
	sub	objptr, #144
	sub	local08, local09
'   ncy+=1
	add	local04, #1
	jmp	#LR__0049
LR__0050
LR__0051
' repeat while ncy>lines-1
LR__0052
	add	objptr, #148
	rdlong	local05, objptr
	sub	objptr, #148
	sub	local05, #1
	cmps	local04, local05 wcz
 if_be	jmp	#LR__0053
'   ncy-=1
	sub	local04, #1
'   scrollup()
	call	#_hng030rm_spin2_scrollup
'   cursor_y-=1
	add	objptr, #53
	rdbyte	local05, objptr
	sub	local05, #1
	wrbyte	local05, objptr
	sub	objptr, #53
	jmp	#LR__0052
LR__0053
' 
' repeat iii from 0 to strsize(text)-1
	mov	local10, #0
	mov	arg01, local01
	mov	local06, #0
	loc	pa,	#(@LR__0055-@LR__0054)
	call	#FCACHE_LOAD_
LR__0054
	rdbyte	local07, arg01 wz
 if_ne	add	local06, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0054
LR__0055
	mov	result1, local06
	mov	local11, result1
	sub	local11, #1
	cmps	local11, #0 wcz
 if_a	mov	local12, #1
 if_be	neg	local12, #1
	add	local11, local12
	loc	pa,	#(@LR__0057-@LR__0056)
	call	#FCACHE_LOAD_
LR__0056
	add	objptr, #144
	rdlong	local13, objptr
	sub	objptr, #91
	rdbyte	local14, objptr
	qmul	local13, local14
	getqx	local15
	sub	objptr, #1
	rdbyte	local13, objptr
	sub	objptr, #52
	add	local15, local13
	add	local15, local10
	shl	local15, #2
	rdlong	local16, objptr
	add	local16, local15
	rdlong	local17, local16
	and	local17, ##65535
	or	local17, local02
' 
'   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
	wrlong	local17, local16
	add	local10, local12
	cmp	local10, local11 wz
 if_ne	jmp	#LR__0056
LR__0057
' 
' outtextxy(cursor_x,cursor_y,text)
	add	objptr, #52
	rdbyte	arg01, objptr
	add	objptr, #1
	rdbyte	arg02, objptr
	sub	objptr, #53
	mov	arg03, local01
	call	#_hng030rm_spin2_outtextxy
' 
' cursor_x:=ncx
	add	objptr, #52
	wrbyte	local08, objptr
' cursor_y:=ncy
	add	objptr, #1
	wrbyte	local04, objptr
	sub	objptr, #53
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_write_ret
	ret

' 
' ''-----------  Scroll the screen one line up
' 
' pub scrollup() | i
_hng030rm_spin2_scrollup
	mov	COUNT_, #10
	call	#pushregs_
	add	objptr, #144
	rdlong	local01, objptr
	sub	objptr, #144
	shl	local01, #2
	rdlong	arg02, objptr
	add	arg02, local01
	add	objptr, #48
	rdlong	arg03, objptr
	add	objptr, #96
	rdlong	local02, objptr
	sub	objptr, #144
	sub	arg03, local02
' 
' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
	rdlong	arg01, objptr
	call	#__system__longmove
' repeat i from buflen-cpl to buflen-1
	add	objptr, #48
	rdlong	local03, objptr
	add	objptr, #96
	rdlong	local02, objptr
	sub	local03, local02
	sub	objptr, #96
	rdlong	local04, objptr
	sub	local04, #1
	rdlong	local05, objptr
	add	objptr, #96
	rdlong	local06, objptr
	sub	objptr, #144
	sub	local05, local06
	cmps	local04, local05 wcz
 if_a	mov	local07, #1
 if_be	neg	local07, #1
	add	local04, local07
	loc	pa,	#(@LR__0059-@LR__0058)
	call	#FCACHE_LOAD_
LR__0058
	mov	local08, local03
	shl	local08, #2
	rdlong	local09, objptr
	add	local09, local08
	rdlong	local10, local09
	and	local10, ##-65536
	or	local10, #32
'   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
	wrlong	local10, local09
	add	local03, local07
	cmp	local03, local04 wz
 if_ne	jmp	#LR__0058
LR__0059
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_scrollup_ret
	ret

' 
' 
' 
' pub inttostr2(i,d):result |q,pos,k,j
_hng030rm_spin2_inttostr2
' 
' j:=i
	mov	_var01, arg02
	sub	_var01, #1
' pos:=d-1
	mov	_var02, _var01
' k:=0
	add	objptr, #68
	add	arg02, objptr
' 
' n_string[d]:=0
	wrbyte	#0, arg02
' repeat k from 0 to d-1
	mov	_var03, #0
	cmps	_var01, #0 wcz
	sub	objptr, #68
 if_a	mov	_var04, #1
 if_be	neg	_var04, #1
	add	_var01, _var04
	loc	pa,	#(@LR__0061-@LR__0060)
	call	#FCACHE_LOAD_
LR__0060
	mov	_var05, _var03
	add	objptr, #68
	add	_var05, objptr
'   n_string[k]:=48
	wrbyte	#48, _var05
	add	_var03, _var04
	cmp	_var03, _var01 wz
	sub	objptr, #68
 if_ne	jmp	#LR__0060
LR__0061
' 
' if (j<>0)
	cmp	arg01, #0 wz
 if_e	jmp	#LR__0064
' 
'   repeat while (pos>-1)
LR__0062
	cmps	_var02, ##-1 wcz
 if_be	jmp	#LR__0063
	mov	muldiva_, arg01
	mov	muldivb_, #10
	call	#unsdivide_
	mov	_var06, muldiva_
'     q:=j+//10
'     q:=48+q
	add	_var06, #48
	mov	_var07, _var02
	add	objptr, #68
	add	_var07, objptr
'     n_string[pos]:=q
	wrbyte	_var06, _var07
'     j:=j+/10
	mov	arg01, muldivb_
'     pos-=1
	sub	_var02, #1
	sub	objptr, #68
	jmp	#LR__0062
LR__0063
LR__0064
	add	objptr, #68
	mov	result1, objptr
	sub	objptr, #68
' 
' 
' q:=@n_string
' return q
_hng030rm_spin2_inttostr2_ret
	ret

' 
' 
' 
' '*************************************************************************
' '                                                                        *
' '  Mode setting and driver start                                                          *
' '                                                                        *
' '*************************************************************************
' 
' ''---------  Set the graphics mode
' 
' 
' 
' pub setmode(mode) | i', 'xzoom, yzoom, azoom
_hng030rm_spin2_setmode
	mov	COUNT_, #80
	call	#pushregs_
	mov	local01, arg01
' 
' '' mode:tn_bb_cc_vv_hh
' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
' 
' if mode==(512+192+48)
	cmp	local01, ##752 wz
'   return 'no RAM
 if_e	jmp	#LR__0105
' 
' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
	mov	local02, local01
	shr	local02, #6
	and	local02, #7
	fle	local02, #8
	mov	local03, local02
	jmprel	local03
LR__0065
	jmp	#LR__0066
	jmp	#LR__0067
	jmp	#LR__0068
	jmp	#LR__0069
	jmp	#LR__0070
	jmp	#LR__0071
	jmp	#LR__0072
	jmp	#LR__0073
	jmp	#LR__0074
LR__0066
' 
'     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7256
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7256
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0074
LR__0067
'     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7320
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7320
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0074
LR__0068
'     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7384
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7384
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0074
LR__0069
'     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7448
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7448
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0074
LR__0070
'     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7512
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7512
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0074
LR__0071
'     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7576
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7576
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0074
LR__0072
'     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7640
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg02, local05
	mov	arg03, #16
	sub	ptr__hng030rm_spin2_dat__, ##7640
	call	#__system__longmove
	mov	local07, result1
	jmp	#LR__0074
LR__0073
'     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
	add	objptr, #80
	mov	local08, objptr
	mov	local09, local08
	add	ptr__hng030rm_spin2_dat__, ##7704
	mov	local04, ptr__hng030rm_spin2_dat__
	mov	local05, local04
	mov	local06, #16
	mov	arg01, local09
	mov	arg02, local05
	mov	arg03, #16
	sub	objptr, #80
	sub	ptr__hng030rm_spin2_dat__, ##7704
	call	#__system__longmove
	mov	local07, result1
LR__0074
' 
' ' 4-bit graphics: do nothing with timings :)
' if mode<512
	cmps	local01, ##512 wcz
 if_ae	jmp	#LR__0075
	add	ptr__hng030rm_spin2_dat__, ##6232
	mov	local10, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@ataripalette
	add	objptr, #24
	wrlong	local10, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6232
LR__0075
' 
' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##560 wz
 if_ne	jmp	#LR__0076
'   timings[5]:=4
	add	objptr, #100
	wrlong	#4, objptr
	add	objptr, #24
	rdlong	local11, objptr
	shl	local11, #1
'   timings[11]:=timings[11]<<1
	wrlong	local11, objptr
'   putpixel:=p8
	add	objptr, #108
	rdlong	local02, objptr
	sub	objptr, #16
	wrlong	local02, objptr
	add	ptr__hng030rm_spin2_dat__, ##6232
	mov	local12, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@ataripalette
	sub	objptr, #192
	wrlong	local12, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6232
LR__0076
' 
' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##528 wz
 if_ne	jmp	#LR__0077
'   timings[5]:=16
	add	objptr, #100
	wrlong	#16, objptr
	add	objptr, #24
	rdlong	local13, objptr
	shr	local13, #1
'   timings[11]:=timings[11]>>1
	wrlong	local13, objptr
'   putpixel:=p2
	add	objptr, #100
	rdlong	local02, objptr
	sub	objptr, #8
	wrlong	local02, objptr
	add	ptr__hng030rm_spin2_dat__, ##6152
	mov	local14, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@fourcolors
	sub	objptr, #192
	wrlong	local14, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6152
LR__0077
' 
' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##512 wz
 if_ne	jmp	#LR__0078
'   timings[5]:=32
	add	objptr, #100
	wrlong	#32, objptr
	add	objptr, #24
	rdlong	local15, objptr
	shr	local15, #2
'   timings[11]:=timings[11]>>2
	wrlong	local15, objptr
'   putpixel:=p1
	add	objptr, #96
	rdlong	local02, objptr
	sub	objptr, #4
	wrlong	local02, objptr
	add	ptr__hng030rm_spin2_dat__, ##6144
	mov	local16, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@twocolors
	sub	objptr, #192
	wrlong	local16, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6144
LR__0078
' 
' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##544 wz
 if_ne	jmp	#LR__0079
'   putpixel:=p4
	add	objptr, #228
	rdlong	local02, objptr
	sub	objptr, #12
	wrlong	local02, objptr
	add	ptr__hng030rm_spin2_dat__, ##6168
	mov	local17, ptr__hng030rm_spin2_dat__
'   palette_ptr:=@vga16
	sub	objptr, #192
	wrlong	local17, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6168
LR__0079
' 
' repeat i from 0 to 4
	mov	local18, #0
	loc	pa,	#(@LR__0081-@LR__0080)
	call	#FCACHE_LOAD_
LR__0080
	mov	local19, local18
	shl	local19, #2
	add	objptr, #80
	add	local19, objptr
	sub	objptr, #44
	rdlong	local20, objptr
	sub	objptr, #36
	shl	local20, #17
	rdlong	local21, local19
	add	local21, local20
	mov	local22, local21
	add	local22, ##1887502336
'   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
	wrlong	local22, local19
	add	local18, #1
	cmps	local18, #5 wcz
 if_b	jmp	#LR__0080
LR__0081
	add	objptr, #36
	rdlong	local23, objptr
	shl	local23, #17
	add	objptr, #64
	rdlong	local24, objptr
	add	local24, local23
' timings[5]:=timings[5]+hdmibase<<17
	wrlong	local24, objptr
' clkfreq:=timings[13]
	add	objptr, #32
	rdlong	local02, objptr
	wrlong	local02, #20
' hubset(timings[14])
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #136
	hubset	arg01
' waitms(1)
	mov	arg01, #1
	call	#__system___waitms
	mov	local25, local01
	and	local25, #3
	decod	local26, local25
' 
' 
' xzoom:=1<<(mode & 3)
	add	objptr, #204
	wrlong	local26, objptr
' 
' if (xzoom==8) && (((mode>>4)&3)<>3)
	mov	local08, local26
	sub	objptr, #204
	cmp	local08, #8 wz
 if_ne	jmp	#LR__0082
	mov	local09, local01
	shr	local09, #4
	and	local09, #3
	cmp	local09, #3 wz
 if_e	jmp	#LR__0082
'   xzoom:=4
	mov	local02, #4
	add	objptr, #204
	wrlong	#4, objptr
	sub	objptr, #204
LR__0082
	mov	local27, local01
	shr	local27, #2
	and	local27, #3
	decod	local28, local27
' 
' yzoom:=1<<((mode>>2) & 3)
	add	objptr, #208
	wrlong	local28, objptr
	sub	objptr, #4
	rdlong	local08, objptr
	add	objptr, #4
	rdlong	local04, objptr
	qmul	local08, local04
	getqx	local29
' azoom:=xzoom*yzoom
	add	objptr, #4
	wrlong	local29, objptr
' 
' cpl:=timings[11]
	sub	objptr, #88
	rdlong	local02, objptr
	add	objptr, #20
	wrlong	local02, objptr
	sub	objptr, #144
' if (mode<512)
	cmps	local01, ##512 wcz
 if_ae	jmp	#LR__0083
	add	objptr, #128
	rdlong	muldiva_, objptr
	shr	muldiva_, #4
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#unsdivide_
'   lines:=(timings[12]>>4)+/yzoom
	add	objptr, #148
	wrlong	muldivb_, objptr
'   if ((timings[12]>>4)+//yzoom) <>0
	sub	objptr, #20
	rdlong	muldiva_, objptr
	shr	muldiva_, #4
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#unsdivide_
	cmp	muldiva_, #0 wz
 if_e	jmp	#LR__0086
'     lines +=1
	add	objptr, #148
	rdlong	local02, objptr
	add	local02, #1
	wrlong	local02, objptr
	sub	objptr, #148
' 
' else
	jmp	#LR__0086
LR__0083
	add	objptr, #128
	rdlong	muldiva_, objptr
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#divide_
'   lines:=timings[12]/yzoom
	add	objptr, #148
	wrlong	muldivb_, objptr
'   if cpl//xzoom==0
	sub	objptr, #4
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	cmp	muldiva_, #0 wz
 if_ne	jmp	#LR__0084
'     cpl:=cpl/xzoom
	add	objptr, #144
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	add	objptr, #144
	wrlong	muldivb_, objptr
	sub	objptr, #144
'   else
	jmp	#LR__0085
LR__0084
	add	objptr, #144
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	mov	local30, muldivb_
	add	local30, #1
'     cpl:=cpl/xzoom+1
	add	objptr, #144
	wrlong	local30, objptr
	sub	objptr, #144
LR__0085
LR__0086
	add	objptr, #144
	rdlong	local08, objptr
	add	objptr, #4
	rdlong	local04, objptr
	qmul	local08, local04
	getqx	local31
' 
' buflen:=(cpl*lines)
	sub	objptr, #100
	wrlong	local31, objptr
	sub	objptr, #48
	shl	local31, #2
	decod	local32, #19
	sub	local32, local31
' buf_ptr:=$80000-4*buflen
	wrlong	local32, objptr
	add	objptr, #80
	mov	local33, objptr
' mode_ptr:=@timings
	sub	objptr, #60
	wrlong	local33, objptr
' graphmode:=mode
	add	objptr, #176
	wrlong	local01, objptr
	sub	objptr, #196
' makedl(mode)
	mov	arg01, local01
' 
' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
'   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
' 
' '   0 - display a up/down border line
' 
' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
' '    nnnn - font line to display, 0..15
' '    llllll - character line, determines the cursor Y position
' 
' 
' if (mode &256==0)
	test	arg01, #256 wz
 if_ne	jmp	#LR__0087
	rdlong	local34, objptr
	sub	local34, ##2304
'   dl_ptr:=buf_ptr-4*576
	add	objptr, #28
	wrlong	local34, objptr
	sub	objptr, #28
' else
	jmp	#LR__0088
LR__0087
	rdlong	local35, objptr
	sub	local35, ##1984
'   dl_ptr:=buf_ptr-4*496
	add	objptr, #28
	wrlong	local35, objptr
	sub	objptr, #28
LR__0088
	mov	local36, arg01
	shr	local36, #2
	and	local36, #3
'  ' dl_ptr:=buf_ptr-4*540
' 
' vzoom:=((mode>>2) & 3)
' 
' 
' if mode<512 '' text modes
	cmps	arg01, ##512 wcz
 if_ae	jmp	#LR__0096
' 
'   if timings[6]>0 'borders
	add	objptr, #104
	rdlong	local37, objptr
	sub	objptr, #104
	cmps	local37, #0 wcz
 if_be	jmp	#LR__0093
'     repeat i from 0 to timings[6]-1 '0 to -1
	mov	local38, #0
	add	objptr, #104
	rdlong	local39, objptr
	sub	objptr, #104
	sub	local39, #1
	cmps	local39, #0 wcz
 if_a	mov	local40, #1
 if_be	neg	local40, #1
	mov	local41, local40
	add	local39, local40
	loc	pa,	#(@LR__0090-@LR__0089)
	call	#FCACHE_LOAD_
LR__0089
	mov	local42, local38
	shl	local42, #2
	add	objptr, #28
	rdlong	local43, objptr
	sub	objptr, #28
	add	local43, local42
'       long[dl_ptr+4*i]:=$0
	wrlong	#0, local43
	add	local38, local41
	cmp	local38, local39 wz
 if_ne	jmp	#LR__0089
LR__0090
'     repeat i from timings[6]+timings[12] to timings[15]-1
	add	objptr, #104
	rdlong	local38, objptr
	add	objptr, #24
	rdlong	local40, objptr
	add	local38, local40
	add	objptr, #12
	rdlong	local44, objptr
	sub	local44, #1
	sub	objptr, #36
	rdlong	local45, objptr
	add	objptr, #24
	rdlong	local46, objptr
	sub	objptr, #128
	add	local45, local46
	cmps	local44, local45 wcz
 if_a	mov	local47, #1
 if_be	neg	local47, #1
	mov	local48, local47
	add	local44, local47
	loc	pa,	#(@LR__0092-@LR__0091)
	call	#FCACHE_LOAD_
LR__0091
	mov	local49, local38
	shl	local49, #2
	add	objptr, #28
	rdlong	local50, objptr
	sub	objptr, #28
	add	local50, local49
'       long[dl_ptr+4*i]:=$0
	wrlong	#0, local50
	add	local38, local48
	cmp	local38, local44 wz
 if_ne	jmp	#LR__0091
LR__0092
LR__0093
	mov	local51, #16
	shl	local51, local36
'   lpc:=16<<vzoom
'   repeat i from timings[6] to timings[6]+timings[12]-1
	add	objptr, #104
	rdlong	local38, objptr
	mov	local52, local38
	add	objptr, #24
	rdlong	local53, objptr
	add	local52, local53
	sub	local52, #1
	sub	objptr, #24
	rdlong	local47, objptr
	sub	objptr, #104
	cmps	local52, local47 wcz
 if_a	mov	local54, #1
 if_be	neg	local54, #1
	mov	local55, local54
	add	local52, local54
	loc	pa,	#(@LR__0095-@LR__0094)
	call	#FCACHE_LOAD_
LR__0094
	mov	muldiva_, local38
	add	objptr, #104
	rdlong	local56, objptr
	sub	objptr, #104
	sub	muldiva_, local56
	mov	muldivb_, local51
	call	#unsdivide_
	shr	muldiva_, local36
'     fontline2:=((i-timings[6])+//lpc)>>vzoom
	mov	local57, muldiva_
	mov	muldiva_, local38
	add	objptr, #104
	rdlong	local56, objptr
	sub	objptr, #104
	sub	muldiva_, local56
	mov	muldivb_, local51
	call	#unsdivide_
	mov	local58, muldivb_
'     charline:=(i-timings[6])+/lpc
	add	objptr, #144
	rdlong	local56, objptr
	sub	objptr, #144
	qmul	local56, local58
	getqx	local59
	shl	local59, #2
	rdlong	local60, objptr
	add	local60, local59
	mov	local61, arg01
	and	local61, #3
	add	local60, local61
'     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
	shl	local60, #12
	shl	local57, #8
	add	local60, local57
	shl	local58, #2
	add	local60, local58
	add	local60, #1
	mov	local62, local38
	shl	local62, #2
	add	objptr, #28
	rdlong	local63, objptr
	sub	objptr, #28
	add	local63, local62
'     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
	wrlong	local60, local63
	add	local38, local55
	cmp	local38, local52 wz
 if_ne	jmp	#LR__0094
LR__0095
LR__0096
' 
' 
' 
' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
	cmps	arg01, ##512 wcz
 if_b	jmp	#LR__0104
' 
'   if timings[6]>0 'borders
	add	objptr, #104
	rdlong	local37, objptr
	sub	objptr, #104
	cmps	local37, #0 wcz
 if_be	jmp	#LR__0101
'     repeat i from 0 to timings[6]-1 '0 to -1
	mov	local38, #0
	add	objptr, #104
	rdlong	local64, objptr
	sub	objptr, #104
	sub	local64, #1
	cmps	local64, #0 wcz
 if_a	mov	local40, #1
 if_be	neg	local40, #1
	mov	local65, local40
	add	local64, local40
	loc	pa,	#(@LR__0098-@LR__0097)
	call	#FCACHE_LOAD_
LR__0097
	mov	local66, local38
	shl	local66, #2
	add	objptr, #28
	rdlong	local67, objptr
	sub	objptr, #28
	add	local67, local66
'       long[dl_ptr+4*i]:=$0
	wrlong	#0, local67
	add	local38, local65
	cmp	local38, local64 wz
 if_ne	jmp	#LR__0097
LR__0098
'     repeat i from timings[6]+timings[12] to timings[15]-1
	add	objptr, #104
	rdlong	local38, objptr
	add	objptr, #24
	rdlong	local40, objptr
	add	local38, local40
	add	objptr, #12
	rdlong	local68, objptr
	sub	local68, #1
	sub	objptr, #36
	rdlong	local45, objptr
	add	objptr, #24
	rdlong	local46, objptr
	sub	objptr, #128
	add	local45, local46
	cmps	local68, local45 wcz
 if_a	mov	local47, #1
 if_be	neg	local47, #1
	mov	local69, local47
	add	local68, local47
	loc	pa,	#(@LR__0100-@LR__0099)
	call	#FCACHE_LOAD_
LR__0099
	mov	local70, local38
	shl	local70, #2
	add	objptr, #28
	rdlong	local71, objptr
	sub	objptr, #28
	add	local71, local70
'       long[dl_ptr+4*i]:=$0
	wrlong	#0, local71
	add	local38, local69
	cmp	local38, local68 wz
 if_ne	jmp	#LR__0099
LR__0100
LR__0101
'   repeat i from timings[6] to timings[6]+timings[12]-1
	add	objptr, #104
	rdlong	local38, objptr
	mov	local72, local38
	add	objptr, #24
	rdlong	local53, objptr
	add	local72, local53
	sub	local72, #1
	sub	objptr, #24
	rdlong	local47, objptr
	sub	objptr, #104
	cmps	local72, local47 wcz
 if_a	mov	local54, #1
 if_be	neg	local54, #1
	mov	local73, local54
	add	local72, local54
	loc	pa,	#(@LR__0103-@LR__0102)
	call	#FCACHE_LOAD_
LR__0102
	mov	local74, local38
	add	objptr, #104
	rdlong	local56, objptr
	sub	local74, local56
	shr	local74, local36
	add	objptr, #40
	rdlong	local56, objptr
	sub	objptr, #144
	qmul	local56, local74
	getqx	local75
	shl	local75, #2
	rdlong	local76, objptr
	add	local76, local75
	mov	local77, arg01
	and	local77, #3
	add	local76, local77
'     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
	shl	local76, #12
	add	local76, #2
	mov	local78, arg01
	and	local78, #48
	shr	local78, #2
	add	local76, local78
	mov	local79, local38
	shl	local79, #2
	add	objptr, #28
	rdlong	local80, objptr
	sub	objptr, #28
	add	local80, local79
'     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
	wrlong	local76, local80
	add	local38, local73
	cmp	local38, local72 wz
 if_ne	jmp	#LR__0102
LR__0103
LR__0104
LR__0105
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_setmode_ret
	ret

' 
' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
_retrocog_spin2_serialcog
	mov	COUNT_, #28
	call	#pushregs_
' 
' 'start serial and midi
' 
' serial_start(rxpin, txpin, baudrate)
	mov	arg01, #32
	mov	arg02, #33
	mov	arg03, ##1920000
	call	#_retrocog_spin2_serial_start
' serial_start(midiin,midiout,mbaudrate)
	mov	arg01, #29
	mov	arg02, #30
	mov	arg03, ##31250
	call	#_retrocog_spin2_serial_start
' serial_start(srxpin,stxpin,sbaudrate)
	mov	local01, ##2000000
	mov	arg01, #63
	mov	arg02, #62
	mov	arg03, ##2000000
	call	#_retrocog_spin2_serial_start
' 
' mb:=(-1)
	neg	local02, #1
' b:=(-1)
	neg	local03, #1
' 
' mousefront:=0
	mov	local04, #0
	add	objptr, #8
	wrlong	#0, objptr
' mousetail:=0
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, #12
' kbdfront:=0
	wrlong	#0, objptr
' kbdtail:=0
	add	objptr, #4
	wrlong	#0, objptr
' midifront:=0
	add	objptr, #12
	wrlong	#0, objptr
' miditail:=0
	add	objptr, #4
	wrlong	#0, objptr
' serialfront:=0
	add	objptr, #4
	wrlong	#0, objptr
' serialtail:=0
	add	objptr, #4
	wrlong	#0, objptr
' long[$30]:=0
	wrlong	#0, #48
' long[$34]:=0
	wrlong	#0, #52
' long[$38]:=0
	wrlong	#0, #56
	sub	objptr, #28
' long[$3C]:=0
	wrlong	#0, #60
' 
' repeat
LR__0106
' 
' '  repeat 
'   rr:=rxcheck(rxpin)
	mov	arg01, #32
	call	#_retrocog_spin2_rxcheck
	mov	local05, result1
'   mrr:=rxcheck(midiin)
	mov	arg01, #29
	call	#_retrocog_spin2_rxcheck
	mov	local06, result1
'   srr:=rxcheck(srxpin)
	mov	local04, #63
	mov	arg01, #63
	call	#_retrocog_spin2_rxcheck
	mov	local07, result1
	mov	local08, local07
' 
' '  until rr>=0 || mrr>=0  || srr>=0
' 
'   
' ' midi. Must be >= $80 for a command
' '$80-$8F - 3 bytes note off. note, velocity
' '$90-$9F - 3 bytes note on, note, velocity
' '$A0-$AF - 3 bytes poly aftertouch. note, value
' '$B0-$BF - 3 bytes control change, controller-value, 
' '$C0-$CF - 2 bytes program change
' '$D0-$DF - 2 bytes mono aftertouch
' '$E0-$EF - 3 bytes pitch bend, $2000 - center
' '$F0-$FF - 1 byte
'   
'   if srr>=0
	cmps	local08, #0 wcz
 if_b	jmp	#LR__0108
'   
'     if serialfront<>((serialtail-1) //32)
	add	objptr, #28
	rdlong	local07, objptr
	mov	local04, local07
	sub	local04, #1
	abs	local01, local04 wc
	and	local01, #31
 if_b	neg	local01, local01
	sub	objptr, #4
	rdlong	local09, objptr
	sub	objptr, #24
	mov	local10, local09
	cmp	local10, local01 wz
 if_e	jmp	#LR__0107
	add	objptr, #24
	rdlong	local10, objptr
	add	objptr, ##776
	add	local10, objptr
	mov	local11, local10
'       serialbuf[serialfront]:=srr
	wrbyte	local08, local11
'       serialfront+=1
	sub	objptr, ##776
	rdlong	local01, objptr
	add	local01, #1
	wrlong	local01, objptr
'       serialfront:=serialfront // 32
	mov	local07, local01
	abs	local04, local07 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #24
LR__0107
LR__0108
'     
'   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
	cmps	local06, #128 wcz
 if_b	jmp	#LR__0109
	cmps	local06, #191 wcz
 if_be	jmp	#LR__0110
LR__0109
	cmps	local06, #224 wcz
 if_b	jmp	#LR__0111
	cmps	local06, #239 wcz
 if_a	jmp	#LR__0111
LR__0110
'     mb:=2
	mov	local02, #2
	mov	local04, local06
	shl	local04, #24
	mov	local12, local04
'     midireport:=mrr<<24
	mov	local13, local12
LR__0111
' 
'   if (mrr>=$C0) && (mrr<=$DF)
	cmps	local06, #192 wcz
 if_b	jmp	#LR__0112
	cmps	local06, #223 wcz
 if_a	jmp	#LR__0112
'     mb:=1
	mov	local02, #1
	mov	local04, local06
	shl	local04, #24
	mov	local14, local04
'     midireport:=mrr<<24
	mov	local13, local14
LR__0112
'   
'   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
	cmps	local06, #240 wcz
 if_b	jmp	#LR__0113
'     mb:=4
	mov	local02, #4
	mov	local15, local06
	shl	local15, #24
'     midireport:=mrr<<24  
	mov	local13, local15
LR__0113
'   
'   if (mrr<$80) && (mb>0) && (mrr>=0)
	cmps	local06, #128 wcz
 if_ae	jmp	#LR__0115
	cmps	local02, #0 wcz
 if_be	jmp	#LR__0115
	cmps	local06, #0 wcz
 if_b	jmp	#LR__0115
'     
'     mb--
	mov	local04, local02
	mov	local07, local02
	sub	local07, #1
	mov	local02, local07
'     if mb<3
	cmps	local02, #3 wcz
 if_ae	jmp	#LR__0114
	mov	local16, local02
	shl	local16, #3
	mov	local17, local06
	shl	local17, local16
'       midireport+=mrr<<(mb<<3)
	mov	local04, local13
	add	local04, local17
	mov	local13, local04
LR__0114
LR__0115
'   
'   if mb==0
	cmp	local02, #0 wz
 if_ne	jmp	#LR__0117
'     
'     if midifront<>((miditail-1) //32)
	add	objptr, #20
	rdlong	local07, objptr
	mov	local04, local07
	sub	local04, #1
	abs	local01, local04 wc
	and	local01, #31
 if_b	neg	local01, local01
	sub	objptr, #4
	rdlong	local09, objptr
	sub	objptr, #16
	mov	local10, local09
	cmp	local10, local01 wz
 if_e	jmp	#LR__0116
	add	objptr, #16
	rdlong	local10, objptr
	shl	local10, #2
	add	objptr, ##656
	add	local10, objptr
	mov	local18, local10
'       midibuf[midifront]:=midireport
	wrlong	local13, local18
'       midifront+=1
	sub	objptr, ##656
	rdlong	local01, objptr
	add	local01, #1
	wrlong	local01, objptr
'       midifront:=midifront // 32
	mov	local07, local01
	abs	local04, local07 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #16
LR__0116
'     mb:=(-1)
	neg	local02, #1
LR__0117
' 
' 'Keyboard and mouse
' 
'   if (rr>=$80) && (rr<>$FF)
	cmps	local05, #128 wcz
 if_b	jmp	#LR__0118
	cmp	local05, #255 wz
 if_e	jmp	#LR__0118
'     b:=3
	mov	local03, #3
	mov	local04, local05
	shl	local04, #24
	mov	local19, local04
'     kbmreport:=rr<<24
	mov	local20, local19
LR__0118
'   
'   if (rr<$80) && (b>0) && (rr>=0)
	cmps	local05, #128 wcz
 if_ae	jmp	#LR__0119
	cmps	local03, #0 wcz
 if_be	jmp	#LR__0119
	cmps	local05, #0 wcz
 if_b	jmp	#LR__0119
'     b--
	mov	local07, local03
	sub	local07, #1
	mov	local03, local07
	mov	local21, local03
	shl	local21, #3
	mov	local22, local05
	shl	local22, local21
'     kbmreport+=rr<<(b<<3)  
	mov	local04, local20
	add	local04, local22
	mov	local20, local04
LR__0119
'   
'   if (rr==$FF)
	cmp	local05, #255 wz
'     b:=0   
 if_e	mov	local03, #0
' 
'   if b==0  
	cmp	local03, #0 wz
 if_ne	jmp	#LR__0124
'  
'     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
	cmp	local20, ##-2147483648 wcz
 if_b	jmp	#LR__0121
	cmp	local20, ##-2030043136 wcz
 if_ae	jmp	#LR__0121
'       if mousefront<>((mousetail-1) //128)
	add	objptr, #12
	rdlong	local07, objptr
	mov	local04, local07
	sub	local04, #1
	abs	local01, local04 wc
	and	local01, #127
 if_b	neg	local01, local01
	sub	objptr, #4
	rdlong	local09, objptr
	sub	objptr, #8
	mov	local10, local09
	cmp	local10, local01 wz
 if_e	jmp	#LR__0120
	add	objptr, #8
	rdlong	local10, objptr
	shl	local10, #2
	add	objptr, #152
	add	local10, objptr
	mov	local23, local10
'         mousebuf[mousefront]:=kbmreport
	wrlong	local20, local23
'         mousefront+=1
	sub	objptr, #152
	rdlong	local01, objptr
	add	local01, #1
	wrlong	local01, objptr
'         mousefront:=mousefront // 128
	mov	local07, local01
	abs	local04, local07 wc
	and	local04, #127
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #8
LR__0120
LR__0121
'     b:=(-1)
	neg	local03, #1
' 
'     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
	cmp	local20, ##-2030043136 wcz
 if_b	jmp	#LR__0123
	cmp	local20, ##-1979711488 wcz
 if_ae	jmp	#LR__0123
'       if kbdfront<>((kbdtail-1) //32)
	add	objptr, #4
	rdlong	local07, objptr
	sub	objptr, #4
	mov	local04, local07
	sub	local04, #1
	abs	local01, local04 wc
	and	local01, #31
 if_b	neg	local01, local01
	rdlong	local10, objptr
	cmp	local10, local01 wz
 if_e	jmp	#LR__0122
	rdlong	local01, objptr
	shl	local01, #2
	add	objptr, #32
	add	local01, objptr
	mov	local24, local01
'         kbdbuf[kbdfront]:=kbmreport
	wrlong	local20, local24
'         kbdfront+=1
	sub	objptr, #32
	rdlong	local07, objptr
	add	local07, #1
	wrlong	local07, objptr
'         kbdfront:=kbdfront // 32
	abs	local04, local07 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
LR__0122
LR__0123
'     b:=(-1)
	neg	local03, #1
LR__0124
' 
' 
'   if long[$30]==0
	rdlong	local04, #48 wz
 if_ne	jmp	#LR__0126
'     if kbdfront<>kbdtail
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local01, objptr
	sub	objptr, #4
	cmp	local04, local01 wz
 if_e	jmp	#LR__0125
	add	objptr, #4
	rdlong	local25, objptr
	shl	local25, #2
	add	objptr, #28
	add	local25, objptr
'       long[$30]:=kbdbuf[kbdtail]
	rdlong	local04, local25
	wrlong	local04, #48
'       kbdtail++
	sub	objptr, #28
	rdlong	local10, objptr
	mov	local01, local10
	add	local01, #1
	wrlong	local01, objptr
'       kbdtail:= kbdtail // 32
	abs	local04, local01 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #4
LR__0125
LR__0126
'       
'   if long[$34]==0
	rdlong	local04, #52 wz
 if_ne	jmp	#LR__0128
'     if mousefront<>mousetail
	add	objptr, #8
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local10, objptr
	sub	objptr, #12
	mov	local01, local10
	cmp	local04, local01 wz
 if_e	jmp	#LR__0127
	add	objptr, #12
	rdlong	local26, objptr
	shl	local26, #2
	add	objptr, #148
	add	local26, objptr
'       long[$34]:=mousebuf[mousetail]
	rdlong	local04, local26
	wrlong	local04, #52
'       mousetail++
	sub	objptr, #148
	rdlong	local10, objptr
	mov	local01, local10
	add	local01, #1
	wrlong	local01, objptr
'       mousetail:= mousetail // 128
	abs	local04, local01 wc
	and	local04, #127
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #12
LR__0127
LR__0128
' 
'       
'   if long[$38]==0
	rdlong	local04, #56 wz
 if_ne	jmp	#LR__0130
'     if midifront<>miditail
	add	objptr, #16
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local10, objptr
	sub	objptr, #20
	mov	local01, local10
	cmp	local04, local01 wz
 if_e	jmp	#LR__0129
	add	objptr, #20
	rdlong	local27, objptr
	shl	local27, #2
	add	objptr, ##652
	add	local27, objptr
'       long[$38]:=midibuf[miditail]
	rdlong	local04, local27
	wrlong	local04, #56
'       miditail++
	sub	objptr, ##652
	rdlong	local10, objptr
	mov	local01, local10
	add	local01, #1
	wrlong	local01, objptr
'       miditail:= miditail // 32
	abs	local04, local01 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #20
LR__0129
LR__0130
'       
'   if long[$3c]==0
	rdlong	local04, #60 wz
 if_ne	jmp	#LR__0106
'     if serialfront<>serialtail
	add	objptr, #24
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local10, objptr
	sub	objptr, #28
	mov	local01, local10
	cmp	local04, local01 wz
 if_e	jmp	#LR__0106
'       byte[$3c]:=255
	wrbyte	#255, #60
	add	objptr, #28
	rdlong	local28, objptr
	add	objptr, ##772
	add	local28, objptr
'       byte[$3D]:=serialbuf[serialtail]
	rdbyte	local04, local28
	wrbyte	local04, #61
'       serialtail++
	sub	objptr, ##772
	rdlong	local10, objptr
	mov	local01, local10
	add	local01, #1
	wrlong	local01, objptr
'       serialtail:= serialtail // 32
	abs	local04, local01 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #28
	jmp	#LR__0106
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_serialcog_ret
	ret

'       
' 
' ''---------------------- Serial functions from jm_serial.spin2, modified
' 
' pub serial_start(rxpin, txpin, baud) | bitmode
_retrocog_spin2_serial_start
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
	rdlong	arg01, #20
	decod	arg02, #16
	qmul	arg01, arg02
	getqy	local03
	getqx	local04
	setq	local03
	qdiv	local04, arg03
	getqx	result1
	mov	arg03, result1
	and	arg03, ##-1024
' bitmode |= 7                                                  ' set bits (8)
	or	arg03, #7
' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
	dirl	local01
	wrpin	##4158, local01
	wxpin	arg03, local01
	wypin	#0, local01
	dirh	local01
' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
	dirl	local02
	wrpin	#124, local02
	wxpin	arg03, local02
	wypin	#0, local02
	dirh	local02
' pinhigh(rxpin)
	drvh	local01
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_serial_start_ret
	ret

' 
' pub rxcheck(pin) : rxbyte | check
_retrocog_spin2_rxcheck
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
' 
' '' Check for serial input
' '' -- returns -1 if nothing available
' 
'   rxbyte := -1
	neg	local02, #1
'   check := pinr(pin)
	mov	arg01, local01
	call	#__system___pinread
	mov	local03, result1 wz
'   if (check)
'     rxbyte := rdpin(pin) >> 24
 if_ne	mov	local02, #0
 if_ne	rdpin	local02, local01
 if_ne	shr	local02, #24
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_rxcheck_ret
	ret

_trackerplayer_spin2_initModule
	mov	COUNT_, #62
	call	#pushregs_
	add	ptra, #292
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	local01, fp
	add	local01, ##1080
' 
'   ' Set some data pointers
'   magicFour      := hubPtr + 1080
	add	objptr, #157
	wrlong	local01, objptr
'   nameStr        := hubPtr
	rdlong	local02, fp
	sub	objptr, #151
	wrlong	local02, objptr
	rdlong	local03, fp
	add	local03, #20
'   samplesInfoLut := hubPtr + 20
	add	objptr, #4
	wrlong	local03, objptr
' 
'   ' Is this a 31 sample module?
'   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
	add	objptr, #147
	rdlong	local02, objptr
	sub	objptr, #157
	rdbyte	local04, local02
	cmp	local04, #77 wz
 if_ne	jmp	#LR__0134
	add	objptr, #157
	rdlong	local05, objptr
	sub	objptr, #157
	add	local05, #2
	rdbyte	local06, local05
	cmp	local06, #75 wz
 if_ne	jmp	#LR__0134
	rdlong	local07, fp
	add	local07, ##950
'     songLength          := byte[hubPtr + 950]
	rdbyte	local02, local07
	add	objptr, #154
	wrbyte	local02, objptr
	rdlong	local08, fp
	add	local08, ##951
'     unknown1            := byte[hubPtr + 951]
	rdbyte	local02, local08
	add	objptr, #2
	wrbyte	local02, objptr
	rdlong	local09, fp
	add	local09, ##952
'     songPositionsLut    :=      hubPtr + 952
	sub	objptr, #6
	wrlong	local09, objptr
	rdlong	local10, fp
	add	local10, ##1084
'     patternsData        :=      hubPtr + 1084
	sub	objptr, #4
	wrlong	local10, objptr
'     numberOfInstruments := 31
	add	objptr, #20
	wrbyte	#31, objptr
'     numberOfPatterns    := 0    ' Find out how many patterns that are available
	sub	objptr, #11
	wrbyte	#0, objptr
	sub	objptr, #155
'     repeat i from 952 to 1079
	add	fp, #8
	wrlong	##952, fp
	sub	fp, #8
	loc	pa,	#(@LR__0133-@LR__0131)
	call	#FCACHE_LOAD_
LR__0131
'       if byte[hubPtr][i] > numberOfPatterns
	rdlong	local11, fp
	add	fp, #8
	rdlong	local04, fp
	sub	fp, #8
	add	local04, local11
	rdbyte	local06, local04
	add	objptr, #155
	rdbyte	local12, objptr
	sub	objptr, #155
	cmps	local06, local12 wcz
 if_be	jmp	#LR__0132
	rdlong	local11, fp
	add	fp, #8
	rdlong	local13, fp
	sub	fp, #8
	add	local13, local11
'         numberOfPatterns := byte[hubPtr][i]
	rdbyte	local14, local13
	add	objptr, #155
	wrbyte	local14, objptr
	sub	objptr, #155
LR__0132
	add	fp, #8
	rdlong	local14, fp
	add	local14, #1
	wrlong	local14, fp
	sub	fp, #8
	cmps	local14, ##1080 wcz
 if_b	jmp	#LR__0131
LR__0133
'     numberOfPatterns++
	add	objptr, #155
	rdbyte	local14, objptr
	rdbyte	local04, objptr
	add	local04, #1
	wrbyte	local04, objptr
	rdbyte	local15, objptr
	shl	local15, #10
	sub	objptr, #9
	rdlong	local16, objptr
	add	local16, local15
'     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
	sub	objptr, #132
	wrlong	local16, objptr
	sub	objptr, #14
' 
'   ' This must be an oldschool 15 sample soundtracker module
'   else
	jmp	#LR__0138
LR__0134
	rdlong	local17, fp
	add	local17, #470
'     songLength          := byte[hubPtr + 470]
	rdbyte	local02, local17
	add	objptr, #154
	wrbyte	local02, objptr
	rdlong	local18, fp
	add	local18, #471
'     unknown1            := byte[hubPtr + 471]
	rdbyte	local02, local18
	add	objptr, #2
	wrbyte	local02, objptr
	rdlong	local19, fp
	add	local19, #472
'     songPositionsLut    :=      hubPtr + 472
	sub	objptr, #6
	wrlong	local19, objptr
	rdlong	local20, fp
	add	local20, ##600
'     patternsData        :=      hubPtr + 600
	sub	objptr, #4
	wrlong	local20, objptr
'     numberOfInstruments := 15
	add	objptr, #20
	wrbyte	#15, objptr
'     numberOfPatterns    := 0    ' Find out how many patterns that are available
	sub	objptr, #11
	wrbyte	#0, objptr
	sub	objptr, #155
'     repeat i from 472 to 599
	add	fp, #8
	wrlong	#472, fp
	sub	fp, #8
	loc	pa,	#(@LR__0137-@LR__0135)
	call	#FCACHE_LOAD_
LR__0135
'       if byte[hubPtr][i] > numberOfPatterns
	rdlong	local11, fp
	add	fp, #8
	rdlong	local04, fp
	sub	fp, #8
	add	local04, local11
	rdbyte	local06, local04
	add	objptr, #155
	rdbyte	local12, objptr
	sub	objptr, #155
	cmps	local06, local12 wcz
 if_be	jmp	#LR__0136
	rdlong	local11, fp
	add	fp, #8
	rdlong	local21, fp
	sub	fp, #8
	add	local21, local11
'         numberOfPatterns := byte[hubPtr][i]
	rdbyte	local14, local21
	add	objptr, #155
	wrbyte	local14, objptr
	sub	objptr, #155
LR__0136
	add	fp, #8
	rdlong	local14, fp
	add	local14, #1
	wrlong	local14, fp
	sub	fp, #8
	cmps	local14, ##600 wcz
 if_b	jmp	#LR__0135
LR__0137
'     numberOfPatterns++
	add	objptr, #155
	rdbyte	local14, objptr
	rdbyte	local04, objptr
	add	local04, #1
	wrbyte	local04, objptr
	rdbyte	local22, objptr
	shl	local22, #10
	sub	objptr, #9
	rdlong	local23, objptr
	add	local23, local22
'     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
	sub	objptr, #132
	wrlong	local23, objptr
	sub	objptr, #14
LR__0138
' 
'   ' Iterate through all samples and fill in the sample pointer LUT
'   tmpPtr := sampleDataPtr
	add	objptr, #14
	rdlong	local02, objptr
	add	fp, #12
	wrlong	local02, fp
'   repeat i from 1 to numberOfInstruments
	sub	fp, #4
	wrlong	#1, fp
	sub	fp, #8
	add	objptr, #152
	rdbyte	local04, objptr
	cmps	local04, #1 wcz
 if_a	mov	local14, #1
 if_be	neg	local14, #1
	mov	local24, local14
	rdbyte	local25, objptr
	sub	objptr, #166
	add	local25, local24
LR__0139
	add	fp, #8
	rdlong	local26, fp
	sub	local26, #1
	shl	local26, #2
	add	objptr, #18
	add	local26, objptr
'     samplesPtrLut[i-1] := tmpPtr
	add	fp, #4
	rdlong	local12, fp
	wrlong	local12, local26
	add	fp, #24
	mov	arg02, fp
	sub	fp, #20
	mov	arg03, fp
	add	fp, #4
	mov	arg04, fp
	add	fp, #4
	mov	arg05, fp
	add	fp, #4
	mov	arg06, fp
	add	fp, #4
	mov	arg07, fp
'     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
	sub	fp, #24
	rdlong	arg01, fp
	sub	fp, #8
	sub	objptr, #18
	call	#_trackerplayer_spin2_getSampleInfo
'     tmpPtr += samLength
	add	fp, #12
	rdlong	local12, fp
	add	fp, #4
	rdlong	local27, fp
	add	local12, local27
	sub	fp, #4
	wrlong	local12, fp
	sub	fp, #4
	rdlong	local12, fp
	add	local12, local24
	wrlong	local12, fp
	sub	fp, #8
	cmp	local12, local25 wz
 if_ne	jmp	#LR__0139
' 
'   ' Below this point, all play routine variables are resest to their default values
'   tickCounter                 := 0
	add	objptr, #161
	wrbyte	#0, objptr
'   patternRow                  := 0
	add	objptr, #1
	wrbyte	#0, objptr
'   songPosition                := startPattern
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #4
	add	objptr, #1
	wrbyte	local02, objptr
'   currentSongSpeed            := 6
	add	objptr, #1
	wrbyte	#6, objptr
'   patternDelay                := 0
	add	objptr, #1
	wrbyte	#0, objptr
'   ticksPerMinute              := 50 * 60
	add	objptr, #258
	wrlong	##3000, objptr
	sub	objptr, #423
	rdlong	muldiva_, objptr
	mov	muldivb_, #50
	call	#divide_
'   cyclesToWait                := systemClock / 50
	add	objptr, #427
	wrlong	muldivb_, objptr
'   sampleNumber_memory         := 0
	add	objptr, #53
	wrbyte	#0, objptr
'   lpFilter                    := 0
	sub	objptr, #37
	wrbyte	#0, objptr
'   cmdD_memoryX                := 0
	add	objptr, #41
	wrbyte	#0, objptr
'   cmdD_memoryY                := 0
	add	objptr, #1
	wrbyte	#0, objptr
'   cmdD_updatePosition         := false
	add	objptr, #1
	wrbyte	#0, objptr
'   cmdB_memoryZ                := 0
	add	objptr, #1
	wrbyte	#0, objptr
'   cmdB_updatePosition         := false
	add	objptr, #1
	wrbyte	#0, objptr
'   cmdE6_updatePositionCommon  := false
	add	objptr, #13
	wrbyte	#0, objptr
	sub	objptr, #501
' 
'   repeat i from 0 to LAST_CHANNEL
	add	fp, #8
	wrlong	#0, fp
	sub	fp, #8
LR__0140
	add	fp, #8
	rdlong	local28, fp
	shl	local28, #1
	add	objptr, #215
	add	local28, objptr
' 
'     currRepeatPoint[i]        := 0
	wrword	#0, local28
	rdlong	local29, fp
	shl	local29, #1
	sub	objptr, #28
	add	local29, objptr
'     currSampleLength[i]       := 4
	wrword	#4, local29
	mov	local30, ptr__trackerplayer_spin2_dat__
	rdlong	local31, fp
	shl	local31, #2
	sub	objptr, #20
	add	local31, objptr
'     currSamplePtr[i]          := @null
	wrlong	local30, local31
	rdlong	local32, fp
	add	objptr, #16
	add	local32, objptr
'     currSampleNr[i]           := 0
	wrbyte	#0, local32
	rdlong	local33, fp
	shl	local33, #2
	add	objptr, #12
	add	local33, objptr
'     currRepeatLength[i]       := 1
	wrlong	#1, local33
	rdlong	local34, fp
	shl	local34, #2
	add	objptr, #28
	add	local34, objptr
'     currPeriod[i]             := 400
	wrlong	#400, local34
	rdlong	local35, fp
	shl	local35, #2
	add	objptr, #72
	add	local35, objptr
'     lastSetPeriod[i]          := 400
	wrlong	#400, local35
	rdlong	local36, fp
	shl	local36, #2
	add	objptr, #16
	add	local36, objptr
'     lastSetSamplePtr[i]       := 0
	wrlong	#0, local36
	rdlong	local37, fp
	shl	local37, #2
	add	objptr, #16
	add	local37, objptr
'     lastSetSampleNr[i]        := 0
	wrlong	#0, local37
	rdlong	local38, fp
	shl	local38, #2
	add	objptr, #16
	add	local38, objptr
'     lastSetSampleLength[i]    := 0
	wrlong	#0, local38
	rdlong	local39, fp
	shl	local39, #2
	add	objptr, #16
	add	local39, objptr
'     lastSetRepeatLength[i]    := 0
	wrlong	#0, local39
	rdlong	local40, fp
	shl	local40, #2
	add	objptr, #16
	add	local40, objptr
'     lastSetRepeatPoint[i]     := 0
	wrlong	#0, local40
	rdlong	local41, fp
	shl	local41, #2
	sub	objptr, #120
	add	local41, objptr
'     currVolume[i]             := 0
	wrlong	#0, local41
	rdlong	local42, fp
	shl	local42, #1
	add	objptr, #32
	add	local42, objptr
'     currPanning[i]            := 0
	wrword	#0, local42
	rdlong	local43, fp
	add	objptr, #169
	add	local43, objptr
'     cmd3_memoryZ[i]           := 0
	wrbyte	#0, local43
	rdlong	local44, fp
	add	objptr, #4
	add	local44, objptr
'     cmd4_memoryY[i]           := 0
	wrbyte	#0, local44
	rdlong	local45, fp
	add	objptr, #4
	add	local45, objptr
'     cmd4_memoryX[i]           := 0
	wrbyte	#0, local45
	rdlong	local46, fp
	add	objptr, #4
	add	local46, objptr
'     cmd7_memoryY[i]           := 0
	wrbyte	#0, local46
	rdlong	local47, fp
	add	objptr, #4
	add	local47, objptr
'     cmd7_memoryX[i]           := 0
	wrbyte	#0, local47
	rdlong	local48, fp
	add	objptr, #4
	add	local48, objptr
'     cmd9_memoryZ[i]           := 0
	wrbyte	#0, local48
	rdlong	local49, fp
	add	objptr, #13
	add	local49, objptr
'     cmdE6_memory[i]           := 0
	wrbyte	#0, local49
	rdlong	local50, fp
	add	objptr, #4
	add	local50, objptr
'     cmdE6_counter[i]          := 0
	wrbyte	#0, local50
	rdlong	local51, fp
	add	objptr, #4
	add	local51, objptr
'     cmdE6_updatePosition[i]   := false
	wrbyte	#0, local51
	rdlong	local52, fp
	sub	objptr, #17
	add	local52, objptr
'     sampleNumber_memory[i]    := 0
	wrbyte	#0, local52
	rdlong	local53, fp
	sub	objptr, #89
	add	local53, objptr
'     vibratoPos[i]             := 0
	wrbyte	#0, local53
	rdlong	local54, fp
	shl	local54, #2
	add	objptr, #16
	add	local54, objptr
'     portamentoPeriodMemory[i] := 0
	wrlong	#0, local54
	rdlong	local55, fp
	add	objptr, #37
	add	local55, objptr
'     portaGlissando[i]         := 0
	wrbyte	#0, local55
	rdlong	local56, fp
	add	objptr, #4
	add	local56, objptr
'     vibratoType[i]            := 0
	wrbyte	#0, local56
	rdlong	local57, fp
	add	objptr, #4
	add	local57, objptr
'     tremoloType[i]            := 0
	wrbyte	#0, local57
	rdlong	local58, fp
	sub	objptr, #57
	add	local58, objptr
'     tremoloPos[i]             := 0
	wrbyte	#0, local58
	rdlong	local59, fp
	shl	local59, #2
	sub	objptr, #124
	add	local59, objptr
'     deltaVolume[i]            := 0
	wrlong	#0, local59
	rdlong	local60, fp
	shl	local60, #2
	sub	objptr, #32
	add	local60, objptr
'     deltaPeriod[i]            := 0
	wrlong	#0, local60
	rdlong	local61, fp
	add	objptr, #160
	add	local61, objptr
'     resetTremolo[i]           := 0
	wrbyte	#0, local61
	rdlong	local62, fp
	add	objptr, #4
	add	local62, objptr
'     resetVibrato[i]           := 0
	wrbyte	#0, local62
	rdlong	local14, fp
	add	local14, #1
	wrlong	local14, fp
	sub	fp, #8
	cmps	local14, #4 wcz
	sub	objptr, #403
 if_b	jmp	#LR__0140
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_initModule_ret
	ret

' 
' 
' ' This routine needs to be ticked X number of times per second
' ' in order to advance the tracker play routine
' '
' PUB tick() | channel, sampleNumber, period, effect, i
_trackerplayer_spin2_tick
	mov	COUNT_, #18
	call	#pushregs_
	add	ptra, #48
' 
'   if currentSongSpeed == 0
	add	objptr, #164
	rdbyte	local01, objptr wz
	sub	objptr, #164
'     return
 if_e	jmp	#LR__0152
' 
'   ' Iterate over the channels and process everything
'   repeat channel from 0 to LAST_CHANNEL
	wrlong	#0, fp
LR__0141
	add	fp, #4
	mov	arg04, fp
	add	fp, #4
	mov	arg05, fp
	add	fp, #4
	mov	arg06, fp
	sub	fp, #12
' 
'     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
	rdlong	arg01, fp
	add	objptr, #163
	rdbyte	arg02, objptr
	sub	objptr, #1
	rdbyte	arg03, objptr
	and	arg02, #127
	sub	objptr, #12
	rdlong	local02, objptr
	add	arg02, local02
' 
'   ' Get the note data for a specific channel/song position/pattern row
'   patternNumber := byte[songPositionsLut][position & 127]
	rdbyte	local03, arg02
	shl	local03, #10
	sub	objptr, #4
	rdlong	local04, objptr
	sub	objptr, #146
	add	local04, local03
'   patternPtr    := patternsData + (patternNumber << 10)
	and	arg03, #63
	shl	arg03, #4
	add	local04, arg03
	and	arg01, #3
	shl	arg01, #2
	add	local04, arg01
'   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
	rdbyte	local05, local04
	shl	local05, #24
	add	local04, #1
	rdbyte	local06, local04
	shl	local06, #16
	or	local05, local06
	add	local04, #1
	rdbyte	local07, local04
	shl	local07, #8
	or	local05, local07
	add	local04, #1
	rdbyte	local08, local04
	or	local05, local08
'   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
	mov	local09, local05
	shr	local09, #12
	and	local09, #15
	mov	local10, local05
	shr	local10, #24
	and	local10, #240
	or	local09, local10
' 
'   ' Extract the different sub parts from the data
'   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
	wrlong	local09, arg04
	mov	local11, local05
	shr	local11, #16
	and	local11, ##4095
'   long[period]       :=  (data >> 16) & $FFF
	wrlong	local11, arg05
	and	local05, ##4095
'   long[effect]       :=   data & $FFF
	wrlong	local05, arg06
'     processChannel(channel, sampleNumber, period, effect)
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #4
	rdlong	arg04, fp
	sub	fp, #12
	call	#_trackerplayer_spin2_processChannel
	rdlong	local12, fp
	add	local12, #1
	wrlong	local12, fp
	cmps	local12, #4 wcz
 if_b	jmp	#LR__0141
' 
'   ' Incrementation the main counter that drives the whole play routine
'   if ++tickCounter >= (currentSongSpeed + patternDelay)
	add	objptr, #161
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
	add	objptr, #3
	rdbyte	local13, objptr
	add	objptr, #1
	rdbyte	local14, objptr
	add	local13, local14
	sub	objptr, #4
	rdbyte	local15, objptr
	sub	objptr, #161
	cmps	local15, local13 wcz
'     tickCounter := 0
 if_ae	add	objptr, #161
 if_ae	wrbyte	#0, objptr
 if_ae	sub	objptr, #161
' 
'   ' If the tick is zero, increment the other counters and do some song positioning handling
'   if tickCounter == 0
	add	objptr, #161
	rdbyte	local01, objptr wz
	sub	objptr, #161
 if_ne	jmp	#LR__0151
' 
'     ' Handle the "pattern repeat" command, "E6"
'     if cmdE6_updatePositionCommon
	add	objptr, #501
	rdbyte	local01, objptr wz
	sub	objptr, #501
 if_e	jmp	#LR__0145
'       repeat i from 0 to LAST_CHANNEL
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
	loc	pa,	#(@LR__0144-@LR__0142)
	call	#FCACHE_LOAD_
LR__0142
'         if cmdE6_updatePosition[i]
	add	fp, #16
	rdlong	local12, fp
	sub	fp, #16
	add	objptr, #497
	add	local12, objptr
	rdbyte	local14, local12 wz
	sub	objptr, #497
 if_e	jmp	#LR__0143
	add	fp, #16
	rdlong	local16, fp
	sub	fp, #16
	add	objptr, #489
	add	local16, objptr
'           patternRow := cmdE6_memory[i]
	rdbyte	local12, local16
	sub	objptr, #327
	wrbyte	local12, objptr
	sub	objptr, #162
LR__0143
	add	fp, #16
	rdlong	local17, fp
	add	objptr, #497
	add	local17, objptr
'         cmdE6_updatePosition[i] := false
	wrbyte	#0, local17
	rdlong	local12, fp
	add	local12, #1
	wrlong	local12, fp
	sub	fp, #16
	cmps	local12, #4 wcz
	sub	objptr, #497
 if_b	jmp	#LR__0142
LR__0144
	jmp	#LR__0149
LR__0145
' 
'     ' Handle the "skip to next pattern with offset command", "D"
'     elseif cmdD_updatePosition
	add	objptr, #486
	rdbyte	local01, objptr wz
	sub	objptr, #486
 if_e	jmp	#LR__0146
'       if ++songPosition >= songLength
	add	objptr, #163
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
	rdbyte	local13, objptr
	sub	objptr, #9
	rdbyte	local14, objptr
	sub	objptr, #154
	cmps	local13, local14 wcz
'         songPosition := 0
 if_ae	add	objptr, #163
 if_ae	wrbyte	#0, objptr
 if_ae	sub	objptr, #163
	add	objptr, #484
	rdbyte	local12, objptr
	mov	local18, local12
	shl	local18, #2
	add	local18, local12
	shl	local18, #1
	add	objptr, #1
	rdbyte	local12, objptr
	add	local18, local12
' 
'       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
	sub	objptr, #323
	wrbyte	local18, objptr
	sub	objptr, #162
' 
'     ' If no "jump to row commands" are active, do a normal pattern incrementation
'     else
	jmp	#LR__0148
LR__0146
'       if ++patternRow >= PATTERN_LENGTH
	add	objptr, #162
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
	rdbyte	local13, objptr
	sub	objptr, #162
	cmps	local13, #64 wcz
 if_b	jmp	#LR__0147
'         patternRow := 0
	add	objptr, #162
	wrbyte	#0, objptr
' 
'         if ++songPosition >= songLength
	add	objptr, #1
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
	rdbyte	local13, objptr
	sub	objptr, #9
	rdbyte	local14, objptr
	sub	objptr, #154
	cmps	local13, local14 wcz
'           songPosition := 0
 if_ae	add	objptr, #163
 if_ae	wrbyte	#0, objptr
 if_ae	sub	objptr, #163
LR__0147
LR__0148
LR__0149
' 
'     ' Handle "jump to song position" command, "B"
'     if cmdB_updatePosition
	add	objptr, #488
	rdbyte	local01, objptr wz
	sub	objptr, #488
 if_e	jmp	#LR__0150
' 
'       songPosition := cmdB_memoryZ
	add	objptr, #487
	rdbyte	local01, objptr
	sub	objptr, #324
	wrbyte	local01, objptr
' 
'       ifnot cmdD_updatePosition
	add	objptr, #323
	rdbyte	local01, objptr wz
	sub	objptr, #486
'         patternRow := 0
 if_e	add	objptr, #162
 if_e	wrbyte	#0, objptr
 if_e	sub	objptr, #162
LR__0150
' 
'     ' We need to be sure that all positioning commands are reset for the next tick
'     cmdE6_updatePositionCommon := false
	add	objptr, #501
	wrbyte	#0, objptr
'     cmdB_updatePosition := false
	sub	objptr, #13
	wrbyte	#0, objptr
'     cmdD_updatePosition := false
	sub	objptr, #2
	wrbyte	#0, objptr
'     patternDelay := 0
	sub	objptr, #321
	wrbyte	#0, objptr
	sub	objptr, #165
LR__0151
LR__0152
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_tick_ret
	ret

' 
' 
' PRI amigaPeriodToNote(period, fTune) : r | i
_trackerplayer_spin2_amigaPeriodToNote
' 
'   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
	mov	_var01, #0
	loc	pa,	#(@LR__0154-@LR__0153)
	call	#FCACHE_LOAD_
LR__0153
'     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
	add	ptr__trackerplayer_spin2_dat__, ##3236
	mov	_var02, ptr__trackerplayer_spin2_dat__
	mov	_var03, arg02
	shl	_var03, #3
	add	_var03, arg02
	shl	_var03, #3
	add	_var02, _var03
	mov	_var04, _var01
	shl	_var04, #1
	add	_var04, _var02
	rdword	_var05, _var04
	cmps	_var05, arg01 wcz
'       quit
	sub	ptr__trackerplayer_spin2_dat__, ##3236
 if_be	jmp	#LR__0155
	add	_var01, #1
	cmps	_var01, #36 wcz
 if_b	jmp	#LR__0153
LR__0154
LR__0155
' 
'   return i
	mov	result1, _var01
_trackerplayer_spin2_amigaPeriodToNote_ret
	ret

' 
' 
' PRI retunePeriod(period, fTune) | noteNumber
_trackerplayer_spin2_retunePeriod
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
'   if period > 0 and fTune < 16
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0156
	cmps	local02, #16 wcz
 if_ae	jmp	#LR__0156
'     noteNumber := amigaPeriodToNote(word[period], 0)
	rdword	arg01, local01
	mov	arg02, #0
	call	#_trackerplayer_spin2_amigaPeriodToNote
	mov	local03, result1
	add	ptr__trackerplayer_spin2_dat__, ##3236
	mov	local04, ptr__trackerplayer_spin2_dat__
	mov	local05, local02
	shl	local05, #3
	add	local05, local02
	shl	local05, #3
	add	local04, local05
	shl	local03, #1
	add	local03, local04
'     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
	rdword	local06, local03
	wrword	local06, local01
	sub	ptr__trackerplayer_spin2_dat__, ##3236
LR__0156
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_retunePeriod_ret
	ret

' 
' 
' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
_trackerplayer_spin2_getSampleInfo
	mov	_var01, arg01 wz
' 
'   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
 if_e	jmp	#LR__0157
	cmps	_var01, #31 wcz
 if_be	jmp	#LR__0158
LR__0157
'     long[samplePtr] := 0
	wrlong	#0, arg02
'     return
	jmp	#_trackerplayer_spin2_getSampleInfo_ret
LR__0158
' 
'   sampleNumber--
	sub	_var01, #1
	mov	_var02, _var01
	shl	_var02, #4
	sub	_var02, _var01
	shl	_var02, #1
	add	objptr, #10
	rdlong	_var03, objptr
	add	_var03, _var02
'   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
	mov	_var04, _var03
	add	_var04, #22
	rdbyte	_var05, _var04
	shl	_var05, #8
	mov	_var06, _var03
	add	_var06, #23
	rdbyte	_var07, _var06
	or	_var05, _var07
	shl	_var05, #1
'   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
	wrlong	_var05, arg03
	mov	_var08, _var03
	add	_var08, #24
'   long[fTune]        :=   byte[sampleInfoPtr + 24]
	rdbyte	_var09, _var08
	wrlong	_var09, arg04
	mov	_var10, _var03
	add	_var10, #25
'   long[volume]       :=   byte[sampleInfoPtr + 25]
	rdbyte	_var09, _var10
	wrlong	_var09, arg05
	mov	_var11, _var03
	add	_var11, #26
	rdbyte	_var12, _var11
	shl	_var12, #8
	mov	_var13, _var03
	add	_var13, #27
	rdbyte	_var07, _var13
	or	_var12, _var07
	shl	_var12, #1
'   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
	wrlong	_var12, arg06
	mov	_var14, _var03
	add	_var14, #28
	rdbyte	_var15, _var14
	shl	_var15, #8
	add	_var03, #29
	rdbyte	_var07, _var03
	or	_var15, _var07
	shl	_var15, #1
'   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
	wrlong	_var15, arg07
	shl	_var01, #2
	add	objptr, #8
	add	_var01, objptr
'   long[samplePtr]    := samplesPtrLut[sampleNumber]
	rdlong	_var09, _var01
	wrlong	_var09, arg02
' 
'   if long[repeatLength] == 2 && long[repeatPoint] == 0
	rdlong	_var09, arg07
	cmp	_var09, #2 wz
	sub	objptr, #18
 if_ne	jmp	#LR__0159
	rdlong	_var07, arg06 wz
'     long[repeatLength] := 1
 if_e	wrlong	#1, arg07
LR__0159
_trackerplayer_spin2_getSampleInfo_ret
	ret

' 
' 
' PRI triggerNote(channel)
_trackerplayer_spin2_triggerNote
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #327
	add	_var01, objptr
	mov	_var02, arg01
	sub	objptr, #144
' 
'   currSampleNr[channel]     := lastSetSampleNr[channel]
	rdlong	_var03, _var01
	add	_var02, objptr
	wrbyte	_var03, _var02
	mov	_var04, arg01
	shl	_var04, #2
	add	objptr, #128
	add	_var04, objptr
	mov	_var05, arg01
	shl	_var05, #2
	sub	objptr, #144
'   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
	rdlong	_var03, _var04
	add	_var05, objptr
	wrlong	_var03, _var05
	mov	_var06, arg01
	shl	_var06, #2
	add	objptr, #128
	add	_var06, objptr
	mov	_var07, arg01
	shl	_var07, #2
	sub	objptr, #72
'   currPeriod[channel]       := lastSetPeriod[channel]
	rdlong	_var03, _var06
	add	_var07, objptr
	wrlong	_var03, _var07
	mov	_var08, arg01
	shl	_var08, #2
	add	objptr, #120
	add	_var08, objptr
	mov	_var09, arg01
	shl	_var09, #1
	sub	objptr, #156
'   currSampleLength[channel] := lastSetSampleLength[channel]
	rdlong	_var03, _var08
	add	_var09, objptr
	wrword	_var03, _var09
	mov	_var10, arg01
	shl	_var10, #2
	add	objptr, #172
	add	_var10, objptr
	mov	_var11, arg01
	shl	_var11, #2
	sub	objptr, #164
'   currRepeatLength[channel] := lastSetRepeatLength[channel]
	rdlong	_var03, _var10
	add	_var11, objptr
	wrlong	_var03, _var11
	mov	_var12, arg01
	shl	_var12, #2
	add	objptr, #180
	add	_var12, objptr
	mov	_var13, arg01
	shl	_var13, #1
	sub	objptr, #160
'   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
	rdlong	_var03, _var12
	add	_var13, objptr
	wrword	_var03, _var13
	add	objptr, #287
	add	arg01, objptr
	rdbyte	_var14, arg01
	add	_var14, #1
'   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
	wrbyte	_var14, arg01
	sub	objptr, #502
_trackerplayer_spin2_triggerNote_ret
	ret

' 
' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
_trackerplayer_spin2_processChannel
	mov	COUNT_, #49
	call	#pushregs_
	add	ptra, #208
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	sub	fp, #12
' 
'   channel := channel & 3
	rdlong	local01, fp
	and	local01, #3
	wrlong	local01, fp
	add	fp, #12
	rdlong	local02, fp
	shr	local02, #8
	mov	local03, local02
	and	local03, #15
'   cmd     := (effect >> 8) & $F
	add	objptr, #442
	wrbyte	local03, objptr
	rdlong	local04, fp
	shr	local04, #4
	mov	local05, local04
	and	local05, #15
'   x       := (effect >> 4) & $F
	sub	objptr, #3
	wrbyte	local05, objptr
	rdlong	local06, fp
	and	local06, #15
'   y       := (effect     ) & $F
	add	objptr, #1
	wrbyte	local06, objptr
	rdlong	local07, fp
	sub	fp, #12
	and	local07, #255
'   z       := (effect     ) & $FF
	add	objptr, #1
	wrbyte	local07, objptr
' 
'   ' Handle everything that executes on "tick zero"
'   if tickCounter == 0
	sub	objptr, #280
	rdbyte	local01, objptr wz
	sub	objptr, #161
 if_ne	jmp	#LR__0170
	rdlong	local08, fp
	shl	local08, #2
	add	objptr, #239
	add	local08, objptr
' 
'     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
'     deltaPeriod[channel] := 0
	wrlong	#0, local08
	rdlong	local09, fp
	shl	local09, #2
	add	objptr, #32
	add	local09, objptr
'     deltaVolume[channel] := 0
	wrlong	#0, local09
' 
'     ' If the sample number is zero, the memory from "last set non zero sample number" is used
'     if sampleNumber > 0
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	cmps	local01, #0 wcz
	sub	objptr, #271
 if_be	jmp	#LR__0160
	rdlong	local10, fp
	add	objptr, #480
	add	local10, objptr
'       sampleNumber_memory[channel] := sampleNumber
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	wrbyte	local01, local10
	sub	objptr, #480
LR__0160
	rdlong	local11, fp
	add	objptr, #480
	add	local11, objptr
	add	fp, #32
	mov	local12, fp
	sub	fp, #16
	mov	local13, fp
	sub	objptr, #49
	mov	local14, objptr
	add	fp, #4
	mov	local15, fp
	add	fp, #4
	mov	local16, fp
	add	fp, #4
	mov	local17, fp
' 
'     ' Get data for the sample in use by the current channel (uses the memorized sample number)
'     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
	rdbyte	arg01, local11
	mov	arg04, local14
	mov	local18, local15
	mov	local19, local16
	mov	local20, local17
	mov	arg02, local12
	mov	arg03, local13
	mov	arg05, local18
	mov	arg06, local19
	mov	arg07, local20
	sub	objptr, #431
	sub	fp, #28
	call	#_trackerplayer_spin2_getSampleInfo
' 
'     ' Only set volume according to the default sample configuration if the sample number is non zero,
'     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
'     if sampleNumber > 0
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0161
	rdlong	local21, fp
	shl	local21, #2
	add	objptr, #255
	add	local21, objptr
'       currVolume[channel] := volume
	add	fp, #20
	rdlong	local01, fp
	sub	fp, #20
	wrlong	local01, local21
	sub	objptr, #255
LR__0161
' 
'     ' Handle all commands that executes on "zero tick"
'     sampleOffset := 0
	add	objptr, #435
	wrlong	#0, objptr
	sub	objptr, #435
'     handleZeroTickCommands(channel)
	rdlong	arg01, fp
	call	#_trackerplayer_spin2_handleZeroTickCommands
' 
'     ' Prepare sample data for triggering (now or later)
'     if period > 0
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #8
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0171
	add	fp, #8
	mov	local22, fp
' 
'       retunePeriod(@period, fineTune)
	add	objptr, #431
	rdlong	arg02, objptr
	sub	objptr, #431
	mov	arg01, local22
	sub	fp, #8
	call	#_trackerplayer_spin2_retunePeriod
	rdlong	local23, fp
	add	objptr, #211
	add	local23, objptr
'       currFineTune[channel]        := fineTune
	add	objptr, #220
	rdlong	local01, objptr
	wrbyte	local01, local23
	rdlong	local24, fp
	shl	local24, #2
	sub	objptr, #136
	add	local24, objptr
'       lastSetPeriod[channel]       := period
	add	fp, #8
	rdlong	local01, fp
	wrlong	local01, local24
	sub	fp, #8
	rdlong	local25, fp
	shl	local25, #2
	add	objptr, #64
	add	local25, objptr
'       lastSetRepeatLength[channel] := repeatLength
	add	fp, #28
	rdlong	local01, fp
	wrlong	local01, local25
	sub	fp, #28
	rdlong	local26, fp
	shl	local26, #2
	add	objptr, #16
	add	local26, objptr
'       lastSetRepeatPoint[channel]  := repeatPoint
	add	fp, #24
	rdlong	local01, fp
	wrlong	local01, local26
	add	fp, #8
	rdlong	local27, fp
	sub	fp, #32
	add	objptr, #60
	rdlong	local28, objptr
	add	local27, local28
	rdlong	local29, fp
	shl	local29, #2
	sub	objptr, #124
	add	local29, objptr
'       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
	wrlong	local27, local29
	rdlong	local30, fp
	shl	local30, #2
	add	objptr, #16
	add	local30, objptr
'       lastSetSampleNr[channel]     := sampleNumber
	add	fp, #4
	rdlong	local01, fp
	wrlong	local01, local30
' 
'       ' This calculates the correct sample length in all situations
'       if repeatLength > 2
	add	fp, #24
	rdlong	local01, fp
	sub	fp, #28
	cmps	local01, #2 wcz
	sub	objptr, #327
 if_be	jmp	#LR__0162
	add	fp, #24
	rdlong	local31, fp
	add	fp, #4
	rdlong	local28, fp
	add	local31, local28
'         sampleLength := repeatPoint + repeatLength
	sub	fp, #12
	wrlong	local31, fp
	sub	fp, #16
LR__0162
' 
'       if sampleLength - sampleOffset < 1
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	add	objptr, #435
	rdlong	local28, objptr
	sub	objptr, #435
	sub	local01, local28
	cmps	local01, #1 wcz
 if_ae	jmp	#LR__0163
	rdlong	local32, fp
	shl	local32, #2
	add	objptr, #343
	add	local32, objptr
'         lastSetSampleLength[channel] := 1
	wrlong	#1, local32
'       else
	sub	objptr, #343
	jmp	#LR__0164
LR__0163
	add	fp, #16
	rdlong	local33, fp
	sub	fp, #16
	add	objptr, #435
	rdlong	local28, objptr
	sub	local33, local28
	rdlong	local34, fp
	shl	local34, #2
	sub	objptr, #92
	add	local34, objptr
'         lastSetSampleLength[channel] := sampleLength - sampleOffset
	wrlong	local33, local34
	sub	objptr, #343
LR__0164
' 
'       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
'       if sampleOffset > sampleLength
	add	objptr, #435
	rdlong	local01, objptr
	sub	objptr, #435
	add	fp, #16
	rdlong	local28, fp
	sub	fp, #16
	cmps	local01, local28 wcz
 if_be	jmp	#LR__0165
	add	fp, #32
	rdlong	local35, fp
	sub	fp, #8
	rdlong	local28, fp
	sub	fp, #24
	add	local35, local28
	rdlong	local36, fp
	shl	local36, #2
	add	objptr, #311
	add	local36, objptr
'         lastSetSamplePtr[channel] := samplePtr + repeatPoint
	wrlong	local35, local36
	rdlong	local37, fp
	shl	local37, #2
	add	objptr, #32
	add	local37, objptr
'         lastSetSampleLength[channel] := repeatLength
	add	fp, #28
	rdlong	local01, fp
	sub	fp, #28
	wrlong	local01, local37
	sub	objptr, #343
LR__0165
' 
'       ' Trigger note/sample playback directly if no delay or portamento is active
'       ifnot cmd == $3 || cmd == $5
	add	objptr, #442
	rdbyte	local01, objptr
	sub	objptr, #442
	cmp	local01, #3 wz
 if_e	jmp	#LR__0168
	add	objptr, #442
	rdbyte	local38, objptr
	sub	objptr, #442
	mov	local28, local38
	cmp	local28, #5 wz
 if_e	jmp	#LR__0168
'         ifnot cmd == $E && x == $D
	add	objptr, #442
	rdbyte	local39, objptr
	sub	objptr, #442
	mov	local01, local39
	cmp	local01, #14 wz
 if_ne	jmp	#LR__0166
	add	objptr, #439
	rdbyte	local38, objptr
	sub	objptr, #439
	mov	local28, local38
	cmp	local28, #13 wz
 if_e	jmp	#LR__0167
LR__0166
'           triggerNote(channel)
	rdlong	local01, fp
	mov	arg01, local01
	call	#_trackerplayer_spin2_triggerNote
LR__0167
LR__0168
' 
'       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
'       if resetTremolo[channel] > 0
	rdlong	local01, fp
	add	objptr, #399
	add	local01, objptr
	rdbyte	local28, local01
	cmps	local28, #0 wcz
	sub	objptr, #399
 if_be	jmp	#LR__0169
	rdlong	local40, fp
	add	objptr, #395
	add	local40, objptr
'         tremoloPos[channel] := 0
	wrbyte	#0, local40
	sub	objptr, #395
LR__0169
' 
'       if resetVibrato[channel] > 0
	rdlong	local01, fp
	add	objptr, #403
	add	local01, objptr
	rdbyte	local28, local01
	cmps	local28, #0 wcz
	sub	objptr, #403
 if_be	jmp	#LR__0171
	rdlong	local41, fp
	add	objptr, #391
	add	local41, objptr
'         vibratoPos[channel] := 0
	wrbyte	#0, local41
	sub	objptr, #391
' 
'   else
	jmp	#LR__0171
LR__0170
'     ' Handle commands that executes on all "non zero ticks"
'     handleNonZeroTickCommands(channel)
	rdlong	arg01, fp
	call	#_trackerplayer_spin2_handleNonZeroTickCommands
LR__0171
' 
'   ' Handle commands that executes on every tick
'   handleEveryTickCommands(channel)
	rdlong	arg01, fp
	call	#_trackerplayer_spin2_handleEveryTickCommands
	rdlong	local42, fp
	shl	local42, #2
	add	objptr, #223
	add	local42, objptr
	rdlong	local43, local42
	fles	local43, ##856
' 
'   ' Handle boundaries that should be kept
'   currPeriod[channel] <#= MAXIMUM_PERIOD
	wrlong	local43, local42
	rdlong	local44, fp
	shl	local44, #2
	add	local44, objptr
	rdlong	local45, local44
	fges	local45, #113
'   currPeriod[channel] #>= MINIMUM_PERIOD
	wrlong	local45, local44
	rdlong	local46, fp
	shl	local46, #2
	add	objptr, #32
	add	local46, objptr
	rdlong	local47, local46
	fles	local47, #64
'   currVolume[channel] <#= MAXIMUM_VOLUME
	wrlong	local47, local46
	rdlong	local48, fp
	shl	local48, #2
	add	local48, objptr
	rdlong	local49, local48
	fges	local49, #0
'   currVolume[channel] #>= MINIMUM_VOLUME
	wrlong	local49, local48
	sub	objptr, #255
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_processChannel_ret
	ret

' 
' 
' ' Handle all commands that executes on tick zero
' '
' PRI handleZeroTickCommands(channel)
_trackerplayer_spin2_handleZeroTickCommands
	mov	_var01, arg01
' 
'   CASE_FAST cmd
	add	objptr, #442
	rdbyte	_var02, objptr
	sub	objptr, #442
	mov	_var03, _var02
	sub	_var03, #9
	fle	_var03, #7
	mov	_var04, _var03
	jmprel	_var04
LR__0172
	jmp	#LR__0173
	jmp	#LR__0196
	jmp	#LR__0175
	jmp	#LR__0176
	jmp	#LR__0177
	jmp	#LR__0178
	jmp	#LR__0193
	jmp	#LR__0196
LR__0173
' 
'     $9:                          ' Set sample offset
'       if z > 0
	add	objptr, #441
	rdbyte	_var05, objptr
	sub	objptr, #441
	cmps	_var05, #0 wcz
 if_be	jmp	#LR__0174
'         cmd9_memoryZ[channel] := z
	mov	_var05, _var01
	add	objptr, #476
	add	_var05, objptr
	sub	objptr, #35
	rdbyte	_var06, objptr
	sub	objptr, #441
	wrbyte	_var06, _var05
LR__0174
' 
'       sampleOffset := cmd9_memoryZ[channel] << 8
	add	objptr, #476
	add	_var01, objptr
	rdbyte	_var05, _var01
	shl	_var05, #8
	sub	objptr, #41
	wrlong	_var05, objptr
	sub	objptr, #435
	jmp	#LR__0196
LR__0175
' 
'     $B:                          ' Jump position
'       cmdB_memoryZ := z
	add	objptr, #441
	rdbyte	_var05, objptr
	add	objptr, #46
	wrbyte	_var05, objptr
'       cmdB_updatePosition := true
	add	objptr, #1
	wrbyte	##-1, objptr
	sub	objptr, #488
	jmp	#LR__0196
LR__0176
' 
'     $C:                          ' Set volume
'       currVolume[channel] := z
	shl	_var01, #2
	add	objptr, #255
	add	_var01, objptr
	add	objptr, #186
	rdbyte	_var06, objptr
	sub	objptr, #441
	wrlong	_var06, _var01
	jmp	#LR__0196
LR__0177
' 
'     $D:                          ' Pattern break
'       cmdD_memoryX := x
	add	objptr, #439
	rdbyte	_var05, objptr
	add	objptr, #45
	wrbyte	_var05, objptr
'       cmdD_memoryY := y
	sub	objptr, #44
	rdbyte	_var05, objptr
	add	objptr, #45
	wrbyte	_var05, objptr
'       cmdD_updatePosition := true
	add	objptr, #1
	wrbyte	##-1, objptr
	sub	objptr, #486
	jmp	#LR__0196
LR__0178
' 
'     $E:                          ' Handle "E commands" that execute on tick zero
' 
'       CASE_FAST x
	add	objptr, #439
	rdbyte	_var07, objptr
	sub	objptr, #439
	mov	_var05, _var07
	fle	_var05, #15
	mov	_var08, _var05
	jmprel	_var08
LR__0179
	jmp	#LR__0180
	jmp	#LR__0181
	jmp	#LR__0182
	jmp	#LR__0183
	jmp	#LR__0184
	jmp	#LR__0185
	jmp	#LR__0186
	jmp	#LR__0189
	jmp	#LR__0196
	jmp	#LR__0196
	jmp	#LR__0190
	jmp	#LR__0191
	jmp	#LR__0196
	jmp	#LR__0196
	jmp	#LR__0192
	jmp	#LR__0196
LR__0180
' 
'         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
	add	objptr, #440
	rdbyte	_var06, objptr
	not	_var06, _var06
	and	_var06, #1
	add	objptr, #3
	wrbyte	_var06, objptr
	sub	objptr, #443
	jmp	#LR__0196
LR__0181
' 
'         $1: currPeriod[channel] -= y             ' Fine frequency slide up
	mov	_var09, _var01
	shl	_var09, #2
	add	objptr, #223
	add	_var09, objptr
	rdlong	_var06, _var09
	add	objptr, #217
	rdbyte	_var10, objptr
	sub	_var06, _var10
	shl	_var01, #2
	sub	objptr, #217
	add	_var01, objptr
	wrlong	_var06, _var01
	sub	objptr, #223
	jmp	#LR__0196
LR__0182
' 
'         $2: currPeriod[channel] += y             ' Fine frequency slide down
	mov	_var09, _var01
	shl	_var09, #2
	add	objptr, #223
	add	_var09, objptr
	rdlong	_var06, _var09
	add	objptr, #217
	rdbyte	_var10, objptr
	add	_var06, _var10
	shl	_var01, #2
	sub	objptr, #217
	add	_var01, objptr
	wrlong	_var06, _var01
	sub	objptr, #223
	jmp	#LR__0196
LR__0183
' 
'         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
	add	objptr, #440
	rdbyte	_var06, objptr
	and	_var06, #1
	add	objptr, #4
	add	_var01, objptr
	wrbyte	_var06, _var01
	sub	objptr, #444
	jmp	#LR__0196
LR__0184
' 
'         $4:                                      ' Set vibrato waveform type
'           vibratoType[channel]  := y & 3
	add	objptr, #440
	rdbyte	_var06, objptr
	and	_var06, #3
	mov	_var11, _var01
	add	objptr, #8
	add	_var11, objptr
	wrbyte	_var06, _var11
'           resetVibrato[channel] := y & 4
	sub	objptr, #8
	rdbyte	_var06, objptr
	and	_var06, #4
	sub	objptr, #37
	add	_var01, objptr
	wrbyte	_var06, _var01
	sub	objptr, #403
	jmp	#LR__0196
LR__0185
' 
'         $5: fineTune := y                        ' Set finetune
	add	objptr, #440
	rdbyte	_var06, objptr
	sub	objptr, #9
	wrlong	_var06, objptr
	sub	objptr, #431
	jmp	#LR__0196
LR__0186
' 
'         $6:                                      ' Pattern looping
'           if y == 0
	add	objptr, #440
	rdbyte	_var06, objptr wz
	sub	objptr, #440
 if_ne	jmp	#LR__0187
'             cmdE6_memory[channel] := patternRow
	add	objptr, #489
	add	_var01, objptr
	sub	objptr, #327
	rdbyte	_var11, objptr
	sub	objptr, #162
	wrbyte	_var11, _var01
'           else
	jmp	#LR__0196
LR__0187
'             if ++cmdE6_counter[channel] <= y
	mov	_var09, _var01
	add	objptr, #493
	add	_var09, objptr
	rdbyte	_var06, _var09
	add	_var06, #1
	mov	_var10, _var01
	add	_var10, objptr
	wrbyte	_var06, _var10
	rdbyte	_var12, _var10
	sub	objptr, #53
	rdbyte	_var13, objptr
	sub	objptr, #440
	cmps	_var12, _var13 wcz
 if_a	jmp	#LR__0188
'               cmdE6_updatePosition[channel] := true
	add	objptr, #497
	add	_var01, objptr
	wrbyte	##-1, _var01
'               cmdE6_updatePositionCommon    := true
	add	objptr, #4
	wrbyte	##-1, objptr
	sub	objptr, #501
'             else
	jmp	#LR__0196
LR__0188
'               cmdE6_counter[channel] := 0
	add	objptr, #493
	add	_var01, objptr
	wrbyte	#0, _var01
	sub	objptr, #493
	jmp	#LR__0196
LR__0189
' 
'         $7:                                      ' Set tremolo waveform type
'           tremoloType[channel] := y & 3
	add	objptr, #440
	rdbyte	_var06, objptr
	and	_var06, #3
	mov	_var11, _var01
	add	objptr, #12
	add	_var11, objptr
	wrbyte	_var06, _var11
'           resetTremolo[channel] := y & 4
	sub	objptr, #12
	rdbyte	_var06, objptr
	and	_var06, #4
	sub	objptr, #41
	add	_var01, objptr
	wrbyte	_var06, _var01
	sub	objptr, #399
	jmp	#LR__0196
LR__0190
' 
'         $A: currVolume[channel] += y             ' Fine volume slide up
	mov	_var09, _var01
	shl	_var09, #2
	add	objptr, #255
	add	_var09, objptr
	rdlong	_var06, _var09
	add	objptr, #185
	rdbyte	_var10, objptr
	add	_var06, _var10
	shl	_var01, #2
	sub	objptr, #185
	add	_var01, objptr
	wrlong	_var06, _var01
	sub	objptr, #255
	jmp	#LR__0196
LR__0191
' 
'         $B: currVolume[channel] -= y             ' Fine volume slide down
	mov	_var09, _var01
	shl	_var09, #2
	add	objptr, #255
	add	_var09, objptr
	rdlong	_var06, _var09
	add	objptr, #185
	rdbyte	_var10, objptr
	sub	_var06, _var10
	shl	_var01, #2
	sub	objptr, #185
	add	_var01, objptr
	wrlong	_var06, _var01
	sub	objptr, #255
	jmp	#LR__0196
LR__0192
' 
'         $E: patternDelay := y * currentSongSpeed ' Pattern delay
	add	objptr, #440
	rdbyte	_var09, objptr
	sub	objptr, #276
	rdbyte	_var10, objptr
	qmul	_var09, _var10
	getqx	_var06
	add	objptr, #1
	wrbyte	_var06, objptr
	sub	objptr, #165
	jmp	#LR__0196
LR__0193
' 
'     $F:                          ' Set speed
'       if z < 32
	add	objptr, #441
	rdbyte	_var05, objptr
	sub	objptr, #441
	cmps	_var05, #32 wcz
 if_ae	jmp	#LR__0194
'         currentSongSpeed := z
	add	objptr, #441
	rdbyte	_var05, objptr
	sub	objptr, #277
	wrbyte	_var05, objptr
	sub	objptr, #164
'       else
	jmp	#LR__0195
LR__0194
'         ticksPerMinute := z * 24
	add	objptr, #441
	rdbyte	_var07, objptr
	mov	_var05, _var07
	shl	_var05, #1
	add	_var05, _var07
	shl	_var05, #3
	sub	objptr, #18
	wrlong	_var05, objptr
	sub	objptr, #423
'         cyclesToWait   := (systemClock / ticksPerMinute) * 60
	rdlong	muldiva_, objptr
	add	objptr, #423
	rdlong	muldivb_, objptr
	sub	objptr, #423
	call	#divide_
	mov	_var06, muldivb_
	shl	_var06, #4
	sub	_var06, muldivb_
	shl	_var06, #2
	add	objptr, #427
	wrlong	_var06, objptr
	sub	objptr, #427
LR__0195
LR__0196
_trackerplayer_spin2_handleZeroTickCommands_ret
	ret

' 
' 
' ' Handle all commands that executes on "non zero ticks"
' '
' PRI handleNonZeroTickCommands(channel)
_trackerplayer_spin2_handleNonZeroTickCommands
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
' 
'   CASE_FAST cmd
	add	objptr, #442
	rdbyte	local02, objptr
	sub	objptr, #442
	mov	local03, local02
	sub	local03, #1
	fle	local03, #14
	mov	local04, local03
	jmprel	local04
LR__0197
	jmp	#LR__0198
	jmp	#LR__0199
	jmp	#LR__0200
	jmp	#LR__0210
	jmp	#LR__0202
	jmp	#LR__0203
	jmp	#LR__0204
	jmp	#LR__0210
	jmp	#LR__0210
	jmp	#LR__0207
	jmp	#LR__0210
	jmp	#LR__0210
	jmp	#LR__0210
	jmp	#LR__0208
	jmp	#LR__0210
LR__0198
' 
'     $1: currPeriod[channel] -= z        ' Frequency slide up
	mov	local05, local01
	shl	local05, #2
	add	objptr, #223
	add	local05, objptr
	rdlong	local06, local05
	add	objptr, #218
	rdbyte	local07, objptr
	sub	local06, local07
	mov	local08, local01
	shl	local08, #2
	sub	objptr, #218
	add	local08, objptr
	wrlong	local06, local08
' 
'        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
'       if currPeriod[channel] < 0
	mov	local06, local01
	shl	local06, #2
	add	local06, objptr
	rdlong	local09, local06
	cmps	local09, #0 wcz
	sub	objptr, #223
 if_ae	jmp	#LR__0210
'         currPeriod[channel] := MAXIMUM_PERIOD
	shl	local01, #2
	add	objptr, #223
	add	local01, objptr
	wrlong	##856, local01
	sub	objptr, #223
	jmp	#LR__0210
LR__0199
' 
'     $2: currPeriod[channel] += z        ' Frequency slide down
	mov	local05, local01
	shl	local05, #2
	add	objptr, #223
	add	local05, objptr
	rdlong	local06, local05
	add	objptr, #218
	rdbyte	local07, objptr
	add	local06, local07
	shl	local01, #2
	sub	objptr, #218
	add	local01, objptr
	wrlong	local06, local01
	sub	objptr, #223
	jmp	#LR__0210
LR__0200
' 
'     $3:                                 ' Slide to note (portamento)
'       if z > 0
	add	objptr, #441
	rdbyte	local06, objptr
	sub	objptr, #441
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0201
'         cmd3_memoryZ[channel] := z
	mov	local06, local01
	add	objptr, #456
	add	local06, objptr
	sub	objptr, #15
	rdbyte	local09, objptr
	sub	objptr, #441
	wrbyte	local09, local06
LR__0201
' 
'       doPortamento(channel, lastSetPeriod[channel])
	mov	local05, local01
	shl	local05, #2
	add	objptr, #295
	add	local05, objptr
	rdlong	arg02, local05
	mov	arg01, local01
	sub	objptr, #295
	call	#_trackerplayer_spin2_doPortamento
	jmp	#LR__0210
LR__0202
' 
'     $5:                                 ' Volume slide + portamento
'       doVolumeSlide(channel)
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVolumeSlide
'       doPortamento(channel, lastSetPeriod[channel])
	mov	local05, local01
	shl	local05, #2
	add	objptr, #295
	add	local05, objptr
	rdlong	arg02, local05
	mov	arg01, local01
	sub	objptr, #295
	call	#_trackerplayer_spin2_doPortamento
	jmp	#LR__0210
LR__0203
' 
'     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVolumeSlide
	jmp	#LR__0210
LR__0204
' 
'     $7:                                 ' Tremolo
'       if x > 0
	add	objptr, #439
	rdbyte	local06, objptr
	sub	objptr, #439
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0205
'         cmd7_memoryX[channel] := x
	mov	local06, local01
	add	objptr, #472
	add	local06, objptr
	sub	objptr, #33
	rdbyte	local09, objptr
	sub	objptr, #439
	wrbyte	local09, local06
LR__0205
'       if y > 0
	add	objptr, #440
	rdbyte	local06, objptr
	sub	objptr, #440
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0206
'         cmd7_memoryY[channel] := y
	mov	local06, local01
	add	objptr, #468
	add	local06, objptr
	sub	objptr, #28
	rdbyte	local09, objptr
	sub	objptr, #440
	wrbyte	local09, local06
LR__0206
' 
'       doTremolo(channel)
	mov	arg01, local01
	call	#_trackerplayer_spin2_doTremolo
	jmp	#LR__0210
LR__0207
' 
'     $A: doVolumeSlide(channel)          ' Volume slide
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVolumeSlide
	jmp	#LR__0210
LR__0208
' 
'     $E:                                 ' Retrig every Y ticks
'       if (x == $9) && ((tickcounter // y) == 0)
	add	objptr, #439
	rdbyte	local05, objptr
	sub	objptr, #439
	cmp	local05, #9 wz
 if_ne	jmp	#LR__0209
	add	objptr, #161
	rdbyte	local07, objptr
	mov	muldiva_, local07
	add	objptr, #279
	rdbyte	local10, objptr
	sub	objptr, #440
	mov	muldivb_, local10
	call	#divide_
	mov	local09, muldiva_ wz
 if_ne	jmp	#LR__0209
'         triggerNote(channel)
	mov	local06, local01
	mov	arg01, local06
	call	#_trackerplayer_spin2_triggerNote
LR__0209
LR__0210
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_handleNonZeroTickCommands_ret
	ret

' 
' 
' ' Handle all commands that executes on every tick
' '
' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
_trackerplayer_spin2_handleEveryTickCommands
	mov	COUNT_, #18
	call	#pushregs_
	mov	local01, arg01
' 
'   CASE_FAST cmd
	add	objptr, #442
	rdbyte	local02, objptr
	sub	objptr, #442
	mov	local03, local02
	fle	local03, #15
	mov	local04, local03
	jmprel	local04
LR__0211
	jmp	#LR__0212
	jmp	#LR__0226
	jmp	#LR__0226
	jmp	#LR__0226
	jmp	#LR__0215
	jmp	#LR__0226
	jmp	#LR__0218
	jmp	#LR__0226
	jmp	#LR__0226
	jmp	#LR__0226
	jmp	#LR__0226
	jmp	#LR__0226
	jmp	#LR__0226
	jmp	#LR__0226
	jmp	#LR__0219
	jmp	#LR__0226
LR__0212
' 
'     $0:                                 ' Arpeggio
'       arpCounter := tickCounter // 3
	add	objptr, #161
	rdbyte	muldiva_, objptr
	sub	objptr, #161
	mov	muldivb_, #3
	call	#divide_
	mov	local05, muldiva_
'       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
	mov	local06, local01
	shl	local06, #2
	add	objptr, #223
	add	local06, objptr
	rdlong	arg01, local06
	mov	local07, local01
	sub	objptr, #12
	add	local07, objptr
	rdbyte	arg02, local07
	sub	objptr, #211
	call	#_trackerplayer_spin2_amigaPeriodToNote
	mov	local08, result1
	mov	local09, local08
	cmps	local08, #36 wcz
 if_ae	jmp	#LR__0226
'         if arpCounter == 1 and x > 0
	cmp	local05, #1 wz
 if_ne	jmp	#LR__0213
	add	objptr, #439
	rdbyte	local06, objptr
	sub	objptr, #439
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0213
'           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
	mov	local10, local09
	add	objptr, #439
	rdbyte	local07, objptr
	mov	local11, local07
	add	local10, local07
	mov	local12, local10
	mov	arg01, local12
	add	ptr__trackerplayer_spin2_dat__, ##3236
	shl	arg01, #1
	add	arg01, ptr__trackerplayer_spin2_dat__
' 
'   return word[@periodTable][noteNumber]
	rdword	result1, arg01
	sub	ptr__trackerplayer_spin2_dat__, ##3236
	mov	local13, result1
	mov	local14, local01
	shl	local14, #2
	sub	objptr, #216
	mov	local15, objptr
	add	local14, objptr
	mov	local06, local13
	rdlong	local16, local14
	sub	local06, local16
	mov	local17, local01
	shl	local17, #2
	add	objptr, #16
	mov	local18, objptr
	add	local17, objptr
	wrlong	local06, local17
	sub	objptr, #239
LR__0213
'         if arpCounter == 2 and y > 0
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0214
	add	objptr, #440
	rdbyte	local06, objptr
	sub	objptr, #440
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0214
'           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
	mov	local10, local09
	add	objptr, #440
	rdbyte	local07, objptr
	mov	local11, local07
	add	local10, local07
	mov	local12, local10
	mov	arg01, local12
	add	ptr__trackerplayer_spin2_dat__, ##3236
	shl	arg01, #1
	add	arg01, ptr__trackerplayer_spin2_dat__
' 
'   return word[@periodTable][noteNumber]
	rdword	result1, arg01
	sub	ptr__trackerplayer_spin2_dat__, ##3236
	mov	local13, result1
	mov	local14, local01
	shl	local14, #2
	sub	objptr, #217
	mov	local15, objptr
	add	local14, objptr
	mov	local06, local13
	rdlong	local16, local14
	sub	local06, local16
	mov	local17, local01
	shl	local17, #2
	add	objptr, #16
	mov	local18, objptr
	add	local17, objptr
	wrlong	local06, local17
	sub	objptr, #239
LR__0214
'         if arpCounter == 0 and (x + y) > 0
	cmp	local05, #0 wz
 if_ne	jmp	#LR__0226
	add	objptr, #439
	rdbyte	local06, objptr
	add	objptr, #1
	rdbyte	local07, objptr
	sub	objptr, #440
	add	local06, local07
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0226
'           deltaPeriod[channel] := 0
	shl	local01, #2
	add	objptr, #239
	add	local01, objptr
	wrlong	#0, local01
	sub	objptr, #239
	jmp	#LR__0226
LR__0215
' 
'     $4:                                 ' Vibrato
'       if x > 0
	add	objptr, #439
	rdbyte	local06, objptr
	sub	objptr, #439
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0216
'         cmd4_memoryX[channel] := x
	mov	local06, local01
	add	objptr, #464
	add	local06, objptr
	sub	objptr, #25
	rdbyte	local11, objptr
	sub	objptr, #439
	wrbyte	local11, local06
LR__0216
'       if y > 0
	add	objptr, #440
	rdbyte	local06, objptr
	sub	objptr, #440
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0217
'         cmd4_memoryY[channel] := y
	mov	local06, local01
	add	objptr, #460
	add	local06, objptr
	sub	objptr, #20
	rdbyte	local11, objptr
	sub	objptr, #440
	wrbyte	local11, local06
LR__0217
' 
'       doVibrato(channel)
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVibrato
	jmp	#LR__0226
LR__0218
' 
'     $6: doVibrato(channel)              ' Volume slide + Vibrato
	mov	arg01, local01
	call	#_trackerplayer_spin2_doVibrato
	jmp	#LR__0226
LR__0219
' 
'     $E:
'       if x == $C                        ' Cut note after Y ticks
	add	objptr, #439
	rdbyte	local06, objptr
	sub	objptr, #439
	cmp	local06, #12 wz
 if_ne	jmp	#LR__0220
'         if tickcounter == y
	add	objptr, #161
	rdbyte	local06, objptr
	add	objptr, #279
	rdbyte	local11, objptr
	sub	objptr, #440
	cmp	local06, local11 wz
 if_ne	jmp	#LR__0225
'           currVolume[channel] := 0
	shl	local01, #2
	add	objptr, #255
	add	local01, objptr
	wrlong	#0, local01
	sub	objptr, #255
	jmp	#LR__0225
LR__0220
' 
'       elseif x == $D                    ' Delay note Y ticks
	add	objptr, #439
	rdbyte	local06, objptr
	sub	objptr, #439
	cmp	local06, #13 wz
 if_ne	jmp	#LR__0224
'         if tickcounter == y
	add	objptr, #161
	rdbyte	local06, objptr
	add	objptr, #279
	rdbyte	local11, objptr
	sub	objptr, #440
	cmp	local06, local11 wz
 if_ne	jmp	#LR__0221
'           triggerNote(channel)
	mov	arg01, local01
	call	#_trackerplayer_spin2_triggerNote
	jmp	#LR__0223
LR__0221
'         ' Do a "bugged trigger" if y >= currentSongSpeed
'         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
	add	objptr, #440
	rdbyte	local06, objptr
	sub	objptr, #276
	rdbyte	local11, objptr
	sub	objptr, #164
	cmps	local06, local11 wcz
 if_b	jmp	#LR__0222
	add	objptr, #164
	rdbyte	local13, objptr
	mov	local12, local13
	sub	local12, #1
	sub	objptr, #3
	rdbyte	local15, objptr
	sub	objptr, #161
	mov	local14, local15
	cmp	local14, local12 wz
 if_ne	jmp	#LR__0222
'           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
	mov	local06, local01
	shl	local06, #2
	add	objptr, #295
	mov	local10, objptr
	add	local06, objptr
	mov	local11, local01
	shl	local11, #2
	sub	objptr, #72
	mov	local07, objptr
	rdlong	local12, local06
	add	local11, local07
	wrlong	local12, local11
	sub	objptr, #223
LR__0222
LR__0223
LR__0224
LR__0225
LR__0226
	mov	ptra, fp
	call	#popregs_
_trackerplayer_spin2_handleEveryTickCommands_ret
	ret

' 
' 
' PRI doTremolo(channel) | depth, sineWave, speed
_trackerplayer_spin2_doTremolo
	mov	_var01, arg01
	mov	_var02, _var01
	add	objptr, #395
	add	_var02, objptr
	add	ptr__trackerplayer_spin2_dat__, ##2980
	mov	_var03, ptr__trackerplayer_spin2_dat__
	rdbyte	_var04, _var02
	shl	_var04, #2
	add	_var04, _var03
' 
'   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
	rdlong	_var05, _var04
	mov	_var06, _var01
	add	objptr, #73
	add	_var06, objptr
'   depth    := cmd7_memoryY[channel]
	rdbyte	_var07, _var06
	mov	_var08, _var01
	add	objptr, #4
	add	_var08, objptr
'   speed    := cmd7_memoryX[channel]
	rdbyte	_var09, _var08
' 
'   CASE_FAST vibratoType[channel]
	mov	_var10, _var01
	sub	objptr, #24
	mov	_var11, objptr
	add	_var10, objptr
	rdbyte	_var12, _var10
	fle	_var12, #3
	mov	_var13, _var12
	sub	ptr__trackerplayer_spin2_dat__, ##2980
	sub	objptr, #448
	jmprel	_var13
LR__0227
	jmp	#LR__0228
	jmp	#LR__0229
	jmp	#LR__0230
	jmp	#LR__0231
LR__0228
' 
'     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
	qmul	_var07, _var05
	getqx	_var14
	sar	_var14, #6
	mov	_var15, _var01
	shl	_var15, #2
	add	objptr, #271
	add	_var15, objptr
	wrlong	_var14, _var15
	sub	objptr, #271
	jmp	#LR__0231
LR__0229
'     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
	mov	_var15, _var01
	add	objptr, #395
	add	_var15, objptr
	rdbyte	_var16, _var15
	shl	_var16, #3
	qmul	_var07, _var16
	getqx	_var14
	sub	_var14, #256
	sar	_var14, #6
	mov	_var17, _var01
	shl	_var17, #2
	sub	objptr, #124
	add	_var17, objptr
	wrlong	_var14, _var17
	sub	objptr, #271
	jmp	#LR__0231
LR__0230
'     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
	mov	_var15, _var01
	add	objptr, #395
	mov	_var18, objptr
	add	_var15, objptr
	rdbyte	_var16, _var15
	and	_var16, #32
	shl	_var16, #4
	qmul	_var07, _var16
	getqx	_var19
	mov	_var14, _var19
	sub	_var14, #256
	sar	_var14, #6
	mov	_var17, _var01
	shl	_var17, #2
	sub	objptr, #124
	mov	_var20, objptr
	add	_var17, objptr
	wrlong	_var14, _var17
	sub	objptr, #271
LR__0231
	add	objptr, #395
	add	_var01, objptr
	rdbyte	_var21, _var01
	add	_var21, _var09
	and	_var21, #63
' 
'   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
	wrbyte	_var21, _var01
	sub	objptr, #395
_trackerplayer_spin2_doTremolo_ret
	ret

' 
' 
' PRI doVibrato(channel) | depth, sineWave, speed
_trackerplayer_spin2_doVibrato
	mov	_var01, arg01
	mov	_var02, _var01
	add	objptr, #391
	add	_var02, objptr
	add	ptr__trackerplayer_spin2_dat__, ##2980
	mov	_var03, ptr__trackerplayer_spin2_dat__
	rdbyte	_var04, _var02
	shl	_var04, #2
	add	_var04, _var03
' 
'   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
	rdlong	_var05, _var04
	mov	_var06, _var01
	add	objptr, #69
	add	_var06, objptr
'   depth    := cmd4_memoryY[channel]
	rdbyte	_var07, _var06
	mov	_var08, _var01
	add	objptr, #4
	add	_var08, objptr
'   speed    := cmd4_memoryX[channel]
	rdbyte	_var09, _var08
' 
'   CASE_FAST vibratoType[channel]
	mov	_var10, _var01
	sub	objptr, #16
	mov	_var11, objptr
	add	_var10, objptr
	rdbyte	_var12, _var10
	fle	_var12, #3
	mov	_var13, _var12
	sub	ptr__trackerplayer_spin2_dat__, ##2980
	sub	objptr, #448
	jmprel	_var13
LR__0232
	jmp	#LR__0233
	jmp	#LR__0234
	jmp	#LR__0235
	jmp	#LR__0236
LR__0233
' 
'     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
	qmul	_var07, _var05
	getqx	_var14
	sar	_var14, #7
	mov	_var15, _var01
	shl	_var15, #2
	add	objptr, #239
	add	_var15, objptr
	wrlong	_var14, _var15
	sub	objptr, #239
	jmp	#LR__0236
LR__0234
'     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
	mov	_var15, _var01
	add	objptr, #391
	add	_var15, objptr
	rdbyte	_var16, _var15
	shl	_var16, #3
	qmul	_var07, _var16
	getqx	_var14
	sub	_var14, #256
	sar	_var14, #7
	mov	_var17, _var01
	shl	_var17, #2
	sub	objptr, #152
	add	_var17, objptr
	wrlong	_var14, _var17
	sub	objptr, #239
	jmp	#LR__0236
LR__0235
'     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
	mov	_var15, _var01
	add	objptr, #391
	mov	_var18, objptr
	add	_var15, objptr
	rdbyte	_var16, _var15
	and	_var16, #32
	shl	_var16, #4
	qmul	_var07, _var16
	getqx	_var19
	mov	_var14, _var19
	sub	_var14, #256
	sar	_var14, #7
	mov	_var17, _var01
	shl	_var17, #2
	sub	objptr, #152
	mov	_var20, objptr
	add	_var17, objptr
	wrlong	_var14, _var17
	sub	objptr, #239
LR__0236
	add	objptr, #391
	add	_var01, objptr
	rdbyte	_var21, _var01
	add	_var21, _var09
	and	_var21, #63
' 
'   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
	wrbyte	_var21, _var01
	sub	objptr, #391
_trackerplayer_spin2_doVibrato_ret
	ret

' 
' 
' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
_trackerplayer_spin2_doPortamento
' 
'   if period == currPeriod[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #223
	mov	_var02, objptr
	add	_var01, objptr
	rdlong	_var03, _var01
	cmp	arg02, _var03 wz
'     return
	sub	objptr, #223
 if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
' 
'   if period > 0
	cmps	arg02, #0 wcz
 if_be	jmp	#LR__0237
	mov	_var04, arg01
	shl	_var04, #2
	add	objptr, #407
	add	_var04, objptr
'     portamentoPeriodMemory[channel] := period
	wrlong	arg02, _var04
'   else
	sub	objptr, #407
	jmp	#LR__0238
LR__0237
	mov	_var05, arg01
	shl	_var05, #2
	add	objptr, #407
	add	_var05, objptr
'     period := portamentoPeriodMemory[channel]
	rdlong	arg02, _var05
	sub	objptr, #407
LR__0238
' 
'   if period > currPeriod[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #223
	add	_var01, objptr
	rdlong	_var03, _var01
	cmps	arg02, _var03 wcz
	sub	objptr, #223
 if_be	jmp	#LR__0239
	mov	_var06, arg01
	shl	_var06, #2
	add	objptr, #223
	add	_var06, objptr
	mov	_var07, arg01
	add	objptr, #233
	rdlong	_var08, _var06
	add	_var07, objptr
	rdbyte	_var02, _var07
	add	_var08, _var02
'     currPeriod[channel] += cmd3_memoryZ[channel]
	wrlong	_var08, _var06
	mov	_var09, arg01
	shl	_var09, #2
	sub	objptr, #233
	add	_var09, objptr
	rdlong	_var10, _var09
	fles	_var10, arg02
'     currPeriod[channel] <#= period
	wrlong	_var10, _var09
	sub	objptr, #223
	jmp	#LR__0241
LR__0239
' 
'   elseif period < currPeriod[channel]
	mov	_var01, arg01
	shl	_var01, #2
	add	objptr, #223
	add	_var01, objptr
	rdlong	_var03, _var01
	cmps	arg02, _var03 wcz
	sub	objptr, #223
 if_ae	jmp	#LR__0240
	mov	_var11, arg01
	shl	_var11, #2
	add	objptr, #223
	add	_var11, objptr
	mov	_var12, arg01
	add	objptr, #233
	rdlong	_var13, _var11
	add	_var12, objptr
	rdbyte	_var02, _var12
	sub	_var13, _var02
'     currPeriod[channel] -= cmd3_memoryZ[channel]
	wrlong	_var13, _var11
	mov	_var14, arg01
	shl	_var14, #2
	sub	objptr, #233
	add	_var14, objptr
	rdlong	_var15, _var14
	fges	_var15, arg02
'     currPeriod[channel] #>= period
	wrlong	_var15, _var14
	sub	objptr, #223
LR__0240
LR__0241
' 
'   ' Handle glissando if activated
'   if portaGlissando[channel] > 0
	mov	_var01, arg01
	add	objptr, #444
	add	_var01, objptr
	rdbyte	_var03, _var01
	cmps	_var03, #0 wcz
	sub	objptr, #444
 if_be	jmp	#LR__0244
	mov	_var16, arg01
	shl	_var16, #2
	add	objptr, #223
	add	_var16, objptr
' 
'     tempPeriod := currPeriod[channel]
	rdlong	_var17, _var16
' 
'     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
	mov	_var18, #0
	sub	objptr, #223
	loc	pa,	#(@LR__0243-@LR__0242)
	call	#FCACHE_LOAD_
LR__0242
	add	ptr__trackerplayer_spin2_dat__, ##3236
	mov	_var03, ptr__trackerplayer_spin2_dat__
	mov	_var19, arg01
	add	objptr, #211
	add	_var19, objptr
	rdbyte	_var02, _var19
	mov	_var20, _var02
	shl	_var20, #3
	add	_var20, _var02
	shl	_var20, #3
	add	_var03, _var20
	mov	_var21, _var18
	shl	_var21, #1
	add	_var21, _var03
' 
'       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
	rdword	_var22, _var21
'       if tempPeriod >= periodStep
	cmps	_var17, _var22 wcz
'         i += 1000
	sub	ptr__trackerplayer_spin2_dat__, ##3236
	sub	objptr, #211
 if_ae	add	_var18, ##1000
	add	_var18, #1
	cmps	_var18, #36 wcz
 if_b	jmp	#LR__0242
LR__0243
	sub	_var22, _var17
	shl	arg01, #2
	add	objptr, #239
	add	arg01, objptr
' 
'     deltaPeriod[channel] := periodStep - tempPeriod
	wrlong	_var22, arg01
	sub	objptr, #239
LR__0244
_trackerplayer_spin2_doPortamento_ret
	ret

' 
' 
' PRI doVolumeSlide(channel)
_trackerplayer_spin2_doVolumeSlide
' 
'   if x > 0
	add	objptr, #439
	rdbyte	_var01, objptr
	sub	objptr, #439
	cmps	_var01, #0 wcz
 if_be	jmp	#LR__0245
	mov	_var02, arg01
	shl	_var02, #2
	add	objptr, #255
	add	_var02, objptr
	rdlong	_var03, _var02
	add	objptr, #184
	rdbyte	_var04, objptr
	sub	objptr, #439
	add	_var03, _var04
'     currVolume[channel] += x
	wrlong	_var03, _var02
LR__0245
'   if y > 0
	add	objptr, #440
	rdbyte	_var01, objptr
	sub	objptr, #440
	cmps	_var01, #0 wcz
 if_be	jmp	#LR__0246
	shl	arg01, #2
	add	objptr, #255
	add	arg01, objptr
	rdlong	_var05, arg01
	add	objptr, #185
	rdbyte	_var04, objptr
	sub	objptr, #440
	sub	_var05, _var04
'     currVolume[channel] -= y
	wrlong	_var05, arg01
LR__0246
_trackerplayer_spin2_doVolumeSlide_ret
	ret
hubexit
	jmp	#cogexit

__system___setbaud
	rdlong	muldiva_, #20
	mov	muldivb_, arg01
	call	#divide_
	dirl	#62
	dirl	#63
	wrlong	muldivb_, ptr___system__dat__
	shl	muldivb_, #16
	mov	arg02, #7
	add	arg02, muldivb_
	wrpin	#124, #62
	wxpin	arg02, #62
	wrpin	#62, #63
	add	arg02, #20
	wxpin	arg02, #63
	dirh	#62
	dirh	#63
__system___setbaud_ret
	ret

__system___txraw
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_ne	jmp	#LR__0247
	mov	arg01, ##921600
	call	#__system___setbaud
LR__0247
	wypin	local01, #62
	waitx	#1
	loc	pa,	#(@LR__0249-@LR__0248)
	call	#FCACHE_LOAD_
LR__0248
	testp	#62 wc
 if_nc	jmp	#LR__0248
LR__0249
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__system___txraw_ret
	ret

__system___rxraw
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_ne	jmp	#LR__0250
	mov	arg01, ##921600
	call	#__system___setbaud
LR__0250
	cmp	local01, #0 wz
 if_e	jmp	#LR__0251
	rdlong	local03, #20
	shr	local03, #10
	qmul	local01, local03
	getqx	local04
	getct	local05
	add	local05, local04
LR__0251
	neg	local06, #1
	mov	local07, #0
	add	ptr___system__dat__, #4
	rdlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #4
LR__0252
	testb	local08, #8 wc
	testbn	local08, #9 andc
	shr	local08, #10
 if_b	mov	local07, #1
 if_b	jmp	#LR__0253
	testp	#63 wz
 if_e	mov	local07, #1
 if_e	rdpin	local08, #63
 if_e	shr	local08, #4
LR__0253
	mov	local02, #0
	cmp	local07, #0 wz
 if_ne	neg	local02, #1
	mov	local09, #0
	mov	local10, #0
	cmp	local01, #0 wz
 if_ne	neg	local10, #1
	mov	local11, #0
	mov	local12, #0
	getct	local13
	sub	local13, local05
	cmps	local13, #0 wcz
 if_b	neg	local12, #1
	cmp	local12, #0 wz
 if_ne	neg	local11, #1
	test	local10, local11 wz
 if_ne	neg	local09, #1
	or	local02, local09 wz
 if_e	jmp	#LR__0252
	cmp	local07, #0 wz
 if_ne	mov	local06, local08
 if_ne	and	local06, #255
	add	ptr___system__dat__, #4
	wrlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #4
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___rxraw_ret
	ret

__system____builtin_memmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0261
	loc	pa,	#(@LR__0255-@LR__0254)
	call	#FCACHE_LOAD_
LR__0254
	cmps	arg03, #3 wcz
 if_be	jmp	#LR__0256
	rdlong	_var02, arg02
	wrlong	_var02, arg01
	add	arg01, #4
	add	arg02, #4
	sub	arg03, #4
	jmp	#LR__0254
LR__0255
LR__0256
	mov	_var03, arg03 wz
 if_e	jmp	#LR__0267
	loc	pa,	#(@LR__0259-@LR__0257)
	call	#FCACHE_LOAD_
LR__0257
	rep	@LR__0260, _var03
LR__0258
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
	add	arg01, #1
	add	arg02, #1
LR__0259
LR__0260
	jmp	#LR__0267
LR__0261
	add	arg01, arg03
	add	arg02, arg03
	mov	_var04, arg03 wz
 if_e	jmp	#LR__0266
	loc	pa,	#(@LR__0264-@LR__0262)
	call	#FCACHE_LOAD_
LR__0262
	rep	@LR__0265, _var04
LR__0263
	sub	arg01, #1
	sub	arg02, #1
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
LR__0264
LR__0265
LR__0266
LR__0267
	mov	result1, _var01
__system____builtin_memmove_ret
	ret

__system__longmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0272
	mov	_var02, arg03 wz
 if_e	jmp	#LR__0278
	loc	pa,	#(@LR__0270-@LR__0268)
	call	#FCACHE_LOAD_
LR__0268
	rep	@LR__0271, _var02
LR__0269
	rdlong	_var03, arg02
	wrlong	_var03, arg01
	add	arg01, #4
	add	arg02, #4
LR__0270
LR__0271
	jmp	#LR__0278
LR__0272
	mov	_var04, arg03
	shl	_var04, #2
	add	arg01, _var04
	add	arg02, _var04
	mov	_var05, arg03 wz
 if_e	jmp	#LR__0277
	loc	pa,	#(@LR__0275-@LR__0273)
	call	#FCACHE_LOAD_
LR__0273
	rep	@LR__0276, _var05
LR__0274
	sub	arg01, #4
	sub	arg02, #4
	rdlong	_var03, arg02
	wrlong	_var03, arg01
LR__0275
LR__0276
LR__0277
LR__0278
	mov	result1, _var01
__system__longmove_ret
	ret

__system____topofstack
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #12
	add	fp, #4
	wrlong	arg01, fp
	mov	result1, fp
	sub	fp, #4
	mov	ptra, fp
	call	#popregs_
__system____topofstack_ret
	ret

__system___make_methodptr
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #8
	call	#__system___gc_alloc_managed
	mov	local03, result1 wz
 if_e	jmp	#LR__0279
	wrlong	local01, local03
	mov	local04, local03
	add	local04, #4
	wrlong	local02, local04
LR__0279
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
__system___make_methodptr_ret
	ret

__system___lockmem
	mov	COUNT_, #2
	call	#pushregs_
	cogid	result1
	mov	local01, result1
	add	local01, #256
LR__0280
	rdlong	local02, arg01 wz
 if_e	wrlong	local01, arg01
 if_e	rdlong	local02, arg01
 if_e	rdlong	local02, arg01
	cmp	local02, local01 wz
 if_ne	jmp	#LR__0280
	mov	ptra, fp
	call	#popregs_
__system___lockmem_ret
	ret

__system___string_concat
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	mov	local03, #0
	loc	pa,	#(@LR__0282-@LR__0281)
	call	#FCACHE_LOAD_
LR__0281
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0281
LR__0282
	mov	local05, local03
	mov	arg01, local02
	mov	local03, #0
	loc	pa,	#(@LR__0284-@LR__0283)
	call	#FCACHE_LOAD_
LR__0283
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0283
LR__0284
	mov	result1, local03
	mov	local06, result1
	mov	arg01, local05
	add	arg01, local06
	add	arg01, #1
	call	#__system___gc_alloc_managed
	mov	local07, result1 wz
 if_e	jmp	#LR__0285
	mov	arg01, local07
	mov	arg02, local01
	mov	arg03, local05
	call	#__system____builtin_memmove
	mov	arg01, local07
	add	arg01, local05
	add	local06, #1
	mov	arg02, local02
	mov	arg03, local06
	call	#__system____builtin_memmove
LR__0285
	mov	result1, local07
	mov	ptra, fp
	call	#popregs_
__system___string_concat_ret
	ret

__system___tx
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wz
 if_ne	jmp	#LR__0286
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #2 wz
 if_e	jmp	#LR__0286
	mov	local02, #13
	mov	arg01, #13
	call	#__system___txraw
LR__0286
	mov	arg01, local01
	call	#__system___txraw
	mov	ptra, fp
	call	#popregs_
__system___tx_ret
	ret

__system___rx
	mov	COUNT_, #2
	call	#pushregs_
LR__0287
	mov	arg01, #0
	call	#__system___rxraw
	mov	local01, result1
	cmp	local01, ##-1 wz
 if_e	jmp	#LR__0287
	cmp	local01, #13 wz
 if_ne	jmp	#LR__0288
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #2 wz
 if_ne	mov	local01, #10
LR__0288
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #1 wz
 if_e	jmp	#LR__0291
	cmp	local01, #127 wz
 if_ne	jmp	#LR__0289
	mov	arg01, #8
	call	#__system___tx
	jmp	#LR__0290
LR__0289
	mov	arg01, local01
	call	#__system___tx
LR__0290
LR__0291
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___rx_ret
	ret

__system___pinread
	test	arg01, #32 wz
 if_ne	mov	_var01, inb
 if_e	mov	_var01, ina
	mov	result1, _var01
	shr	result1, arg01
	shr	arg01, #6
	zerox	result1, arg01
__system___pinread_ret
	ret

__system___waitms
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, #20
	loc	pa,	#(@LR__0293-@LR__0292)
	call	#FCACHE_LOAD_
LR__0292
	cmps	local01, ##1000 wcz
 if_a	waitx	local02
 if_a	sub	local01, ##1000
 if_a	jmp	#LR__0292
LR__0293
	add	ptr___system__dat__, #12
	rdlong	local03, ptr___system__dat__ wz
	sub	ptr___system__dat__, #12
 if_ne	jmp	#LR__0294
	mov	muldiva_, local02
	mov	muldivb_, ##1000
	call	#unsdivide_
	mov	local03, muldivb_
	add	ptr___system__dat__, #12
	wrlong	muldivb_, ptr___system__dat__
	sub	ptr___system__dat__, #12
LR__0294
	cmps	local01, #0 wcz
 if_a	qmul	local01, local03
 if_a	getqx	arg01
 if_a	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitms_ret
	ret

__system___waitus
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	ptr___system__dat__, #16
	rdlong	local02, ptr___system__dat__ wz
	sub	ptr___system__dat__, #16
 if_ne	jmp	#LR__0295
	rdlong	muldiva_, #20
	mov	muldivb_, ##1000000
	call	#unsdivide_
	mov	local02, muldivb_
	add	ptr___system__dat__, #16
	wrlong	muldivb_, ptr___system__dat__
	sub	ptr___system__dat__, #16
LR__0295
	qmul	local01, local02
	getqx	arg01
	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitus_ret
	ret

__system___basic_open
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system____getftab
	mov	local04, result1 wz
 if_ne	jmp	#LR__0296
	mov	arg01, abortchain
	mov	arg02, #12
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0300
LR__0296
	cmp	local01, #0 wz
 if_e	jmp	#LR__0298
	mov	arg01, #4
	call	#__system___gc_alloc_managed
	mov	local05, result1 wz
 if_ne	jmp	#LR__0297
	mov	arg01, abortchain
	mov	arg02, #7
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0300
LR__0297
	wrlong	local01, local05
	mov	arg02, ptr___struct___bas_wrap_sender_tx_
	mov	arg01, local05
	call	#__system___make_methodptr
	add	local04, #24
	wrlong	result1, local04
	sub	local04, #24
	jmp	#LR__0299
LR__0298
	add	local04, #24
	wrlong	local01, local04
	sub	local04, #24
LR__0299
	add	local04, #28
	wrlong	local02, local04
	add	local04, #4
	wrlong	local03, local04
	mov	result1, #0
LR__0300
	mov	ptra, fp
	call	#popregs_
__system___basic_open_ret
	ret

__system___basic_print_char
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	call	#__system___gettxfunc
	mov	local02, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0301
	rdlong	local03, local02
	add	local02, #4
	rdlong	local04, local02
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	result1, #1
LR__0301
	mov	ptra, fp
	call	#popregs_
__system___basic_print_char_ret
	ret

__system___basic_print_string
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	call	#__system___gettxfunc
	mov	local03, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0302
	cmp	local01, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0302
	mov	arg01, local03
	mov	arg02, local02
	mov	arg03, local01
	call	#__system___fmtstr
LR__0302
	mov	ptra, fp
	call	#popregs_
__system___basic_print_string_ret
	ret

__system___basic_print_integer
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system___gettxfunc
	mov	local04, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0303
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, local01
	mov	arg04, local03
	call	#__system___fmtnum
LR__0303
	mov	ptra, fp
	call	#popregs_
__system___basic_print_integer_ret
	ret

__system___fmtchar
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrbyte	arg03, fp
	add	fp, #1
	wrbyte	#0, fp
	sub	fp, #1
	mov	arg03, fp
	sub	fp, #12
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#__system___fmtstr
	mov	ptra, fp
	call	#popregs_
__system___fmtchar_ret
	ret

__system___fmtstr
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	and	local04, #255
	mov	arg01, local03
	mov	local05, #0
	loc	pa,	#(@LR__0305-@LR__0304)
	call	#FCACHE_LOAD_
LR__0304
	rdbyte	local06, arg01 wz
 if_ne	add	local05, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0304
LR__0305
	mov	result1, local05
	mov	local07, result1
	cmp	local04, #0 wz
 if_e	jmp	#LR__0306
	fles	local07, local04 wcz
LR__0306
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local07
	mov	arg04, #2
	call	#__system___fmtpad
	mov	local08, result1
	cmps	local08, #0 wcz
 if_b	mov	result1, local08
 if_b	jmp	#LR__0309
	cmps	local07, #0 wcz
 if_be	jmp	#LR__0308
	mov	local09, local07
LR__0307
	mov	local10, local01
	rdlong	local11, local10
	add	local10, #4
	rdlong	local12, local10
	rdbyte	arg01, local03
	mov	local13, objptr
	mov	objptr, local11
	add	local03, #1
	call	local12
	mov	objptr, local13
	mov	local14, result1
	cmps	local14, #0 wcz
 if_b	mov	result1, local14
 if_b	jmp	#LR__0309
	add	local08, local14
	djnz	local09, #LR__0307
LR__0308
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local07
	mov	arg04, #1
	call	#__system___fmtpad
	mov	local14, result1
	cmps	local14, #0 wcz
 if_b	mov	result1, local14
 if_ae	add	local08, local14
 if_ae	mov	result1, local08
LR__0309
	mov	ptra, fp
	call	#popregs_
__system___fmtstr_ret
	ret

__system___fmtnum
	mov	COUNT_, #7
	call	#pushregs_
	add	ptra, #120
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #4
	mov	local01, fp
	add	fp, #68
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #84
	rdlong	local01, fp
	shr	local01, #16
	and	local01, #63
	add	fp, #88
	wrlong	local01, fp
	sub	fp, #88
	rdlong	local01, fp
	and	local01, #255
	add	fp, #92
	wrlong	local01, fp
	sub	fp, #92
	rdlong	local01, fp
	shr	local01, #26
	and	local01, #3
	add	fp, #96
	wrlong	local01, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #96
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0310
	add	fp, #96
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	sub	fp, #96
LR__0310
	add	fp, #100
	rdlong	local02, fp
	sub	fp, #100
	cmps	local02, #64 wcz
 if_a	jmp	#LR__0311
	add	fp, #100
	rdlong	local03, fp
	sub	fp, #100
	mov	local04, local03 wz
 if_ne	jmp	#LR__0312
LR__0311
	add	fp, #100
	wrlong	#64, fp
	sub	fp, #100
LR__0312
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #3 wz
 if_ne	jmp	#LR__0313
	add	fp, #104
	wrlong	#0, fp
	sub	fp, #104
	jmp	#LR__0315
LR__0313
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmps	local01, #0 wcz
 if_ae	jmp	#LR__0314
	add	fp, #104
	wrlong	#4, fp
	sub	fp, #92
	rdlong	local01, fp
	neg	local01, local01
	wrlong	local01, fp
	sub	fp, #12
LR__0314
LR__0315
	add	fp, #104
	rdlong	local01, fp wz
	sub	fp, #104
 if_e	jmp	#LR__0322
	add	fp, #92
	rdlong	local04, fp
	add	local04, #1
	wrlong	local04, fp
	add	fp, #4
	rdlong	local01, fp
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #100
	cmp	local01, local04 wz
 if_ne	jmp	#LR__0317
	add	fp, #96
	rdlong	local04, fp
	sub	local04, #1
	wrlong	local04, fp
	rdlong	local01, fp wz
	sub	fp, #96
 if_ne	jmp	#LR__0316
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg03, #35
	call	#__system___fmtchar
	jmp	#LR__0327
LR__0316
LR__0317
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #2 wz
 if_ne	jmp	#LR__0318
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#32, local01
	jmp	#LR__0321
LR__0318
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #4 wz
 if_ne	jmp	#LR__0319
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#45, local01
	jmp	#LR__0320
LR__0319
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#43, local01
LR__0320
LR__0321
LR__0322
	add	fp, #88
	rdlong	arg01, fp
	sub	fp, #76
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #80
	rdlong	arg04, fp
	mov	local05, #0
	sub	fp, #88
	rdlong	local06, fp
	sub	fp, #8
	testbn	local06, #29 wz
 if_ne	mov	local05, #1
	mov	arg05, local05
	call	#__system___uitoa
	mov	local07, result1
	add	fp, #92
	rdlong	local01, fp
	add	local01, local07
	wrlong	local01, fp
	add	fp, #8
	rdlong	local04, fp
	sub	fp, #100
	cmps	local01, local04 wcz
 if_be	jmp	#LR__0326
	loc	pa,	#(@LR__0324-@LR__0323)
	call	#FCACHE_LOAD_
LR__0323
	add	fp, #100
	rdlong	local01, fp
	mov	local04, local01
	sub	local04, #1
	wrlong	local04, fp
	sub	fp, #100
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0325
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#35, local01
	jmp	#LR__0323
LR__0324
LR__0325
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#0, local01
LR__0326
	add	fp, #20
	mov	arg03, fp
	sub	fp, #16
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#__system___fmtstr
LR__0327
	mov	ptra, fp
	call	#popregs_
__system___fmtnum_ret
	ret

__system__String_S
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local02
	mov	local03, #0
	loc	pa,	#(@LR__0329-@LR__0328)
	call	#FCACHE_LOAD_
LR__0328
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0328
LR__0329
	mov	result1, local03 wz
 if_e	mov	result1, ##@LR__0446
 if_e	jmp	#LR__0331
	cmps	local01, #0 wcz
 if_be	mov	result1, ##@LR__0447
 if_be	jmp	#LR__0331
	mov	local05, local01
	add	local05, #1
	mov	arg01, local05
	add	arg01, #1
	call	#__system___gc_alloc_managed
	mov	local06, result1 wz
 if_e	jmp	#LR__0330
	rdbyte	arg02, local02
	mov	arg01, local06
	mov	arg03, local01
	call	#\builtin_bytefill_
	add	local05, local06
	wrbyte	#0, local05
	mov	result1, local06
	jmp	#LR__0331
LR__0330
	mov	result1, local06
LR__0331
	mov	ptra, fp
	call	#popregs_
__system__String_S_ret
	ret

__system___gc_ptrs
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, __heap_ptr
	mov	local02, local01
	add	local02, ##4088
	rdlong	local03, local01 wz
 if_ne	jmp	#LR__0332
	mov	local04, local02
	sub	local04, local01
	wrword	#1, local01
	mov	local05, local01
	add	local05, #2
	wrword	##27792, local05
	mov	local06, local01
	add	local06, #4
	wrword	#0, local06
	mov	local07, local01
	add	local07, #6
	wrword	#1, local07
	add	local01, #16
	abs	local03, local04 wc
	shr	local03, #4
 if_b	neg	local03, local03
	wrword	local03, local01
	mov	local08, local01
	add	local08, #2
	wrword	##27791, local08
	mov	local09, local01
	add	local09, #4
	wrword	#0, local09
	mov	local10, local01
	add	local10, #6
	wrword	#0, local10
	sub	local01, #16
LR__0332
	mov	result2, local02
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___gc_ptrs_ret
	ret

__system___gc_nextBlockPtr
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdword	local02, local01 wz
 if_ne	jmp	#LR__0333
	mov	arg01, ##@LR__0448
	call	#__system___gc_errmsg
	jmp	#LR__0334
LR__0333
	shl	local02, #4
	mov	result1, local01
	add	result1, local02
LR__0334
	mov	ptra, fp
	call	#popregs_
__system___gc_nextBlockPtr_ret
	ret

__system___gc_tryalloc
	mov	COUNT_, #27
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
	mov	local05, local03
	mov	local06, #0
	loc	pa,	#(@LR__0336-@LR__0335)
	call	#FCACHE_LOAD_
LR__0335
	mov	local07, local05
	add	local05, #6
	mov	local08, local05
	mov	local09, local03
	rdword	local10, local08
	mov	arg01, local09
	mov	arg02, local10 wz
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local11, result1
	mov	local05, local11 wz
 if_ne	mov	local09, local05
 if_ne	mov	local12, local09
 if_ne	rdword	local06, local12
	cmp	local05, #0 wz
 if_e	jmp	#LR__0337
	cmps	local05, local04 wcz
 if_ae	jmp	#LR__0337
	cmps	local01, local06 wcz
 if_a	jmp	#LR__0335
LR__0336
LR__0337
	cmp	local05, #0 wz
 if_e	mov	result1, local05
 if_e	jmp	#LR__0340
	mov	local13, local05
	add	local13, #6
	rdword	local14, local13
	cmps	local01, local06 wcz
 if_ae	jmp	#LR__0339
	mov	local15, local05
	wrword	local01, local15
	mov	local16, local01
	shl	local16, #4
	mov	local17, local05
	add	local17, local16
	mov	local18, local06
	sub	local18, local01
	mov	local19, local17
	wrword	local18, local19
	mov	local20, local17
	add	local20, #2
	wrword	##27791, local20
	mov	local21, local17
	add	local21, #4
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	wrword	result1, local21
	mov	local22, local17
	rdword	local09, local13
	add	local22, #6
	wrword	local09, local22
	mov	local23, local17
	mov	arg02, local23 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local14, result1
	mov	arg01, local17
	call	#__system___gc_nextBlockPtr
	mov	local24, result1 wz
 if_e	jmp	#LR__0338
	cmps	local24, local04 wcz
 if_ae	jmp	#LR__0338
	mov	local25, local24
	add	local25, #4
	mov	local09, local03
	mov	local10, local23
	mov	arg01, local09
	mov	arg02, local10 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local11, result1
	wrword	local11, local25
LR__0338
LR__0339
	add	local07, #6
	wrword	local14, local07
	mov	local09, ##27776
	or	local09, local02
	mov	local26, local05
	add	local26, #2
	cogid	result1
	or	local09, result1
	wrword	local09, local26
	mov	local27, local03
	add	local27, #8
	rdword	local09, local27
	wrword	local09, local13
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	wrword	result1, local27
	add	local05, #8
	mov	result1, local05
	or	result1, ##1669332992
LR__0340
	mov	ptra, fp
	call	#popregs_
__system___gc_tryalloc_ret
	ret

__system___gc_errmsg
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
LR__0341
	rdbyte	local02, local01 wz
	add	local01, #1
 if_e	jmp	#LR__0342
	mov	arg01, local02
	call	#__system___tx
	jmp	#LR__0341
LR__0342
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system___gc_errmsg_ret
	ret

__system___gc_alloc_managed
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #0
	call	#__system___gc_doalloc
	mov	local02, result1 wz
 if_ne	jmp	#LR__0343
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0343
	mov	arg01, ##@LR__0449
	call	#__system___gc_errmsg
	jmp	#LR__0344
LR__0343
	mov	result1, local02
LR__0344
	mov	ptra, fp
	call	#popregs_
__system___gc_alloc_managed_ret
	ret

__system___gc_doalloc
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
 if_e	mov	result1, #0
 if_e	jmp	#LR__0352
	add	local01, #23
	andn	local01, #15
	shr	local01, #4
	add	ptr___system__dat__, #20
	mov	local03, ptr___system__dat__
	mov	arg01, local03
	sub	ptr___system__dat__, #20
	call	#__system___lockmem
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local04, result1 wz
 if_ne	jmp	#LR__0345
	call	#__system___gc_docollect
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local04, result1
LR__0345
	wrlong	#0, local03
	cmp	local04, #0 wz
 if_e	jmp	#LR__0351
	shl	local01, #4
	sub	local01, #8
	abs	local05, local01 wc
	shr	local05, #2
 if_b	neg	local05, local05
	mov	local06, local05 wz
	mov	local07, local04
 if_e	jmp	#LR__0350
	loc	pa,	#(@LR__0348-@LR__0346)
	call	#FCACHE_LOAD_
LR__0346
	rep	@LR__0349, local06
LR__0347
	wrlong	#0, local07
	add	local07, #4
LR__0348
LR__0349
LR__0350
LR__0351
	mov	result1, local04
LR__0352
	mov	ptra, fp
	call	#popregs_
__system___gc_doalloc_ret
	ret

__system___gc_isvalidptr
	mov	_var01, arg03
	mov	_var02, _var01
	and	_var02, ##-1048576
	cmp	_var02, ##1669332992 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	sub	_var01, #8
	mov	_var03, _var01
	andn	_var03, ##-1048576
	cmps	_var03, arg01 wcz
 if_b	jmp	#LR__0353
	cmps	_var03, arg02 wcz
 if_b	jmp	#LR__0354
LR__0353
	mov	result1, #0
	jmp	#__system___gc_isvalidptr_ret
LR__0354
	mov	_var02, _var03
	xor	_var02, arg01
	and	_var02, #15 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	mov	_var04, _var03
	add	_var04, #2
	rdword	_var02, _var04
	and	_var02, ##65472
	cmp	_var02, ##27776 wz
 if_ne	mov	result1, #0
 if_e	mov	result1, _var03
__system___gc_isvalidptr_ret
	ret

__system___gc_dofree
	mov	COUNT_, #26
	call	#pushregs_
	mov	local01, arg01
	call	#__system___gc_ptrs
	mov	local02, result2
	mov	local03, result1
	mov	local04, local01
	add	local04, #2
	wrword	##27791, local04
	mov	local05, local01
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local06, result1
	loc	pa,	#(@LR__0356-@LR__0355)
	call	#FCACHE_LOAD_
LR__0355
	add	local05, #4
	mov	local07, local05
	rdword	arg02, local07 wz
	mov	arg01, local03
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local05, result1 wz
 if_e	jmp	#LR__0357
	mov	arg01, local05
	mov	local08, #0
	add	arg01, #2
	rdword	local09, arg01
	cmp	local09, ##27791 wz
 if_e	neg	local08, #1
	mov	result1, local08
	mov	local10, result1 wz
 if_e	jmp	#LR__0355
LR__0356
LR__0357
	cmp	local05, #0 wz
 if_e	mov	local05, local03
	mov	local11, local05
	add	local11, #6
	mov	local12, local01
	rdword	local13, local11
	add	local12, #6
	wrword	local13, local12
	mov	arg02, local01 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local14, result1
	wrword	local14, local11
	cmp	local05, local03 wz
 if_e	jmp	#LR__0360
	mov	arg01, local05
	call	#__system___gc_nextBlockPtr
	cmp	result1, local01 wz
 if_ne	jmp	#LR__0359
	mov	local15, local05
	rdword	local16, local15
	mov	local17, local01
	rdword	local10, local17
	add	local16, local10
	wrword	local16, local15
	wrword	#0, local04
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local06, result1
	cmps	local06, local02 wcz
 if_ae	jmp	#LR__0358
	mov	local18, local06
	add	local18, #4
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local14, result1
	wrword	local14, local18
LR__0358
	rdword	local13, local12
	wrword	local13, local11
	wrword	#0, local12
	mov	local01, local05
LR__0359
LR__0360
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local19, result1 wz
 if_e	jmp	#LR__0362
	cmps	local19, local02 wcz
 if_ae	jmp	#LR__0362
	mov	arg01, local19
	mov	local08, #0
	add	arg01, #2
	rdword	local09, arg01
	cmp	local09, ##27791 wz
 if_e	neg	local08, #1
	mov	result1, local08 wz
 if_e	jmp	#LR__0362
	mov	local05, local01
	mov	local01, local19
	mov	local20, local05
	rdword	local21, local20
	mov	local22, local01
	rdword	local10, local22
	add	local21, local10
	wrword	local21, local20
	mov	local23, local01
	add	local23, #6
	mov	local24, local05
	rdword	local13, local23
	add	local24, #6
	wrword	local13, local24
	mov	local25, local01
	add	local25, #2
	wrword	#170, local25
	wrword	#0, local23
	mov	local13, local01
	mov	arg01, local13
	call	#__system___gc_nextBlockPtr
	mov	local10, result1
	mov	local06, local10 wz
 if_e	jmp	#LR__0361
	cmps	local06, local02 wcz
 if_ae	jmp	#LR__0361
	mov	local26, local06
	add	local26, #4
	mov	local13, local03
	mov	local10, local05
	mov	arg01, local13
	mov	arg02, local10 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local14, result1
	wrword	local14, local26
LR__0361
LR__0362
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___gc_dofree_ret
	ret

__system___gc_docollect
	mov	COUNT_, #12
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result2
	mov	local02, result1
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
	cogid	result1
	mov	local04, result1
 if_e	jmp	#LR__0364
LR__0363
	cmps	local03, local01 wcz
 if_ae	jmp	#LR__0364
	mov	local05, local03
	add	local05, #2
	rdword	local06, local05
	andn	local06, #32
	wrword	local06, local05
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
 if_ne	jmp	#LR__0363
LR__0364
	mov	local07, #0
	mov	arg01, #0
	call	#__system____topofstack
	mov	local08, result1
	mov	arg01, local07
	mov	arg02, local08
	call	#__system___gc_markhub
	call	#__system___gc_markcog
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local09, result1 wz
 if_ne	jmp	#LR__0365
	mov	arg01, ##@LR__0450
	call	#__system___gc_errmsg
	jmp	#LR__0371
LR__0365
LR__0366
	mov	local03, local09
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local09, result1
	mov	local10, local03
	add	local10, #2
	rdword	local11, local10
	test	local11, #32 wz
 if_ne	jmp	#LR__0369
	mov	local12, local11
	and	local12, #16 wz
 if_ne	jmp	#LR__0369
	mov	local07, local11
	and	local07, #15
	mov	local11, local07
	cmp	local11, local04 wz
 if_e	jmp	#LR__0367
	cmp	local11, #14 wz
 if_ne	jmp	#LR__0368
LR__0367
	mov	local07, local03
	mov	arg01, local07
	call	#__system___gc_dofree
	mov	local12, result1
	mov	local09, local12
LR__0368
LR__0369
	cmp	local09, #0 wz
 if_e	jmp	#LR__0370
	cmps	local09, local01 wcz
 if_b	jmp	#LR__0366
LR__0370
LR__0371
	mov	ptra, fp
	call	#popregs_
__system___gc_docollect_ret
	ret

__system___gc_markhub
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
LR__0372
	cmps	local01, local02 wcz
 if_ae	jmp	#LR__0373
	rdlong	arg03, local01
	add	local01, #4
	mov	arg01, local03
	mov	arg02, local04
	call	#__system___gc_isvalidptr
	mov	local05, result1 wz
 if_e	jmp	#LR__0372
	mov	arg01, local05
	mov	local06, #0
	add	arg01, #2
	rdword	local07, arg01
	cmp	local07, ##27791 wz
 if_e	neg	local06, #1
	mov	result1, local06
	mov	local08, result1 wz
 if_ne	jmp	#LR__0372
	mov	local09, local05
	add	local09, #2
	rdword	local10, local09
	andn	local10, #15
	or	local10, #46
	wrword	local10, local09
	jmp	#LR__0372
LR__0373
	mov	ptra, fp
	call	#popregs_
__system___gc_markhub_ret
	ret

__system___gc_markcog
	mov	COUNT_, #6
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result1
	mov	local02, result2
	mov	local03, #0
LR__0374
	mov	local04, #496
	sub	local04, local03
	add	local04, #496
	'.live	local04
	alts	local04, #0
	mov	local05, local04
	mov	arg02, local02
	mov	arg01, local01
	mov	arg03, local05
	call	#__system___gc_isvalidptr
	mov	local05, result1 wz
 if_e	jmp	#LR__0375
	add	local05, #2
	rdword	local06, local05
	or	local06, #32
	wrword	local06, local05
LR__0375
	add	local03, #1
	cmps	local03, #496 wcz
 if_b	jmp	#LR__0374
	mov	ptra, fp
	call	#popregs_
__system___gc_markcog_ret
	ret

__system__write
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0376
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0377
LR__0376
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, #28
	add	arg01, ptr___system__dat__
	mov	arg02, local02
	mov	arg03, local03
	sub	ptr___system__dat__, #28
	call	#__system___vfswrite
LR__0377
	mov	ptra, fp
	call	#popregs_
__system__write_ret
	ret

__system__read
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0378
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0379
LR__0378
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, #28
	add	arg01, ptr___system__dat__
	mov	arg02, local02
	mov	arg03, local03
	sub	ptr___system__dat__, #28
	call	#__system___vfsread
LR__0379
	mov	ptra, fp
	call	#popregs_
__system__read_ret
	ret

__system__close
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0380
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0381
LR__0380
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, #28
	add	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #28
	call	#__system___closeraw
LR__0381
	mov	ptra, fp
	call	#popregs_
__system__close_ret
	ret

__system__lseek
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0382
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0386
LR__0382
	mov	local04, local01
	shl	local04, #1
	add	local04, local01
	shl	local04, #4
	add	ptr___system__dat__, #28
	add	local04, ptr___system__dat__
	add	local04, #44
	rdlong	local05, local04 wz
	sub	local04, #44
	sub	ptr___system__dat__, #28
 if_ne	jmp	#LR__0383
	add	ptr___system__dat__, ##604
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0386
LR__0383
	add	local04, #8
	rdlong	local05, local04
	sub	local04, #8
	test	local05, #64 wz
 if_e	jmp	#LR__0384
	add	local04, #8
	rdlong	local05, local04
	or	local05, #128
	wrlong	local05, local04
	sub	local04, #8
LR__0384
	add	local04, #44
	rdlong	local05, local04
	sub	local04, #44
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, local03
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	mov	local09, result1
	cmps	local09, #0 wcz
 if_ae	jmp	#LR__0385
	neg	arg01, local09 wz
	add	ptr___system__dat__, ##604
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, ##604
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0386
LR__0385
	mov	result1, local09
LR__0386
	mov	ptra, fp
	call	#popregs_
__system__lseek_ret
	ret

__system____getftab
	cmp	arg01, #10 wcz
 if_ae	mov	result1, #0
 if_ae	jmp	#__system____getftab_ret
	mov	result1, arg01
	shl	result1, #1
	add	result1, arg01
	shl	result1, #4
	add	ptr___system__dat__, #28
	add	result1, ptr___system__dat__
	sub	ptr___system__dat__, #28
__system____getftab_ret
	ret

__system___strrev
	rdbyte	_var01, arg01 wz
 if_e	jmp	#__system___strrev_ret
	mov	_var02, arg01
	loc	pa,	#(@LR__0388-@LR__0387)
	call	#FCACHE_LOAD_
LR__0387
	rdbyte	_var01, _var02 wz
 if_ne	add	_var02, #1
 if_ne	jmp	#LR__0387
LR__0388
	sub	_var02, #1
LR__0389
	cmps	_var02, arg01 wcz
 if_be	jmp	#LR__0390
	rdbyte	_var03, arg01
	rdbyte	_var04, _var02
	wrbyte	_var04, arg01
	wrbyte	_var03, _var02
	add	arg01, #1
	sub	_var02, #1
	jmp	#LR__0389
LR__0390
__system___strrev_ret
	ret

__system___fmtpad
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg04
	getbyte	local04, local02, #1
	shr	local02, #22
	and	local02, #3 wz
	mov	local05, #0
 if_e	mov	local02, #1
	test	local02, local03 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0394
	sub	local04, arg03
	mov	local06, local04
	cmps	local06, #0 wcz
 if_be	mov	result1, #0
 if_be	jmp	#LR__0394
	cmp	local02, #3 wz
 if_ne	jmp	#LR__0391
	cmp	local03, #1 wz
	wrz	local07
	add	local06, local07
	abs	local06, local06 wc
	shr	local06, #1
 if_b	neg	local06, local06
LR__0391
	cmps	local06, #0 wcz
 if_be	jmp	#LR__0393
	mov	local08, local06
LR__0392
	mov	local09, local01
	rdlong	local07, local09
	add	local09, #4
	rdlong	local10, local09
	mov	arg01, #32
	mov	local11, objptr
	mov	objptr, local07
	call	local10
	mov	objptr, local11
	mov	local12, result1
	cmps	local12, #0 wcz
 if_b	mov	result1, local12
 if_b	jmp	#LR__0394
	add	local05, local12
	djnz	local08, #LR__0392
LR__0393
	mov	result1, local05
LR__0394
	mov	ptra, fp
	call	#popregs_
__system___fmtpad_ret
	ret

__system___uitoa
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05 wz
	mov	local06, local01
	mov	local07, #0
 if_ne	mov	local08, #55
 if_e	mov	local08, #87
LR__0395
	mov	muldiva_, local02
	mov	muldivb_, local03
	call	#unsdivide_
	mov	local09, muldiva_
	cmp	local09, #10 wcz
 if_b	add	local09, #48
 if_ae	add	local09, local08
	wrbyte	local09, local06
	mov	muldiva_, local02
	mov	muldivb_, local03
	add	local06, #1
	call	#unsdivide_
	mov	local02, muldivb_ wz
	add	local07, #1
 if_ne	jmp	#LR__0395
	cmp	local07, local04 wcz
 if_b	jmp	#LR__0395
	wrbyte	#0, local06
	mov	arg01, local01
	call	#__system___strrev
	mov	result1, local07
	mov	ptra, fp
	call	#popregs_
__system___uitoa_ret
	ret

__system___gettxfunc
	mov	COUNT_, #3
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0396
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	mov	local03, local02 wz
 if_ne	jmp	#LR__0397
LR__0396
	mov	result1, #0
	jmp	#LR__0398
LR__0397
	mov	arg01, local01
	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
	call	#__system___make_methodptr
LR__0398
	mov	ptra, fp
	call	#popregs_
__system___gettxfunc_ret
	ret

__system___getiolock_0145
	mov	COUNT_, #3
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0399
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	mov	local03, local02 wz
 if_ne	jmp	#LR__0400
LR__0399
	add	ptr___system__dat__, #24
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, #24
	jmp	#LR__0401
LR__0400
	add	local01, #12
	mov	result1, local01
LR__0401
	mov	ptra, fp
	call	#popregs_
__system___getiolock_0145_ret
	ret

__system___closeraw
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #8
	rdlong	local03, local01 wz
	sub	local01, #8
 if_ne	jmp	#LR__0402
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0405
LR__0402
	add	local01, #40
	rdlong	local03, local01 wz
	sub	local01, #40
 if_e	jmp	#LR__0403
	add	local01, #40
	rdlong	local03, local01
	sub	local01, #40
	rdlong	local04, local03
	add	local03, #4
	rdlong	local05, local03
	mov	arg01, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
LR__0403
	add	local01, #32
	rdlong	local03, local01 wz
	sub	local01, #32
 if_e	jmp	#LR__0404
	add	local01, #32
	rdlong	local03, local01
	sub	local01, #32
	rdlong	local04, local03
	add	local03, #4
	rdlong	local05, local03
	mov	arg01, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
	mov	local02, result1
LR__0404
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
	mov	result1, local02
LR__0405
	mov	ptra, fp
	call	#popregs_
__system___closeraw_ret
	ret

__system____default_getc
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local02, #8
	rdlong	local03, local02
	sub	local02, #8
	test	local03, #2 wz
 if_e	jmp	#LR__0406
	mov	arg01, local01
	call	#__system____default_flush
LR__0406
	add	local02, #8
	rdlong	local03, local02
	or	local03, #1
	wrlong	local03, local02
	sub	local02, #8
	rdlong	local04, local02 wz
 if_ne	jmp	#LR__0408
	mov	arg01, local01
	rdlong	local05, arg01
	add	local05, #12
	mov	arg02, local05
	sub	local05, #12
	add	arg01, #16
	rdlong	local06, arg01
	sub	arg01, #16
	rdlong	local07, local06
	add	local06, #4
	rdlong	local08, local06
	decod	arg03, #10
	mov	local09, objptr
	mov	objptr, local07
	call	local08
	mov	objptr, local09
	mov	local10, result1
	cmps	local10, #0 wcz
 if_b	neg	result1, #1
 if_b	jmp	#LR__0407
	wrlong	local10, local05
	add	local05, #12
	mov	local11, local05
	sub	local05, #8
	wrlong	local11, local05
	add	local05, #4
	rdlong	local06, local05
	or	local06, #1
	wrlong	local06, local05
	mov	result1, local10
LR__0407
	mov	local04, result1
LR__0408
	cmps	local04, #0 wcz
 if_be	neg	result1, #1
 if_be	jmp	#LR__0409
	sub	local04, #1
	wrlong	local04, local02
	add	local02, #4
	rdlong	local12, local02
	rdbyte	result1, local12
	add	local12, #1
	wrlong	local12, local02
LR__0409
	mov	ptra, fp
	call	#popregs_
__system____default_getc_ret
	ret

__system____default_putc
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	local04, local03
	sub	local03, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0410
	mov	arg01, local02
	call	#__system____default_flush
LR__0410
	add	local03, #8
	rdlong	local04, local03
	or	local04, #2
	wrlong	local04, local03
	sub	local03, #8
	rdlong	local05, local03
	mov	local06, local05
	add	local03, #12
	add	local06, local03
	wrbyte	local01, local06
	and	local01, #255
	add	local05, #1
	sub	local03, #12
	wrlong	local05, local03
	cmp	local05, ##1024 wz
 if_ne	jmp	#LR__0411
	mov	arg01, local02
	call	#__system____default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0411
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system____default_putc_ret
	ret

__system____default_putc_terminal
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	local04, local03
	sub	local03, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0412
	mov	arg01, local02
	call	#__system____default_flush
LR__0412
	add	local03, #8
	rdlong	local04, local03
	or	local04, #2
	wrlong	local04, local03
	sub	local03, #8
	rdlong	local05, local03
	mov	local06, local05
	add	local03, #12
	add	local06, local03
	wrbyte	local01, local06
	and	local01, #255
	sub	local03, #12
	add	local05, #1
	wrlong	local05, local03
	cmp	local01, #10 wz
 if_e	jmp	#LR__0413
	cmp	local05, ##1024 wz
 if_ne	jmp	#LR__0414
LR__0413
	mov	arg01, local02
	call	#__system____default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0414
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system____default_putc_terminal_ret
	ret

__system____default_flush
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	rdlong	local03, local02
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #2 wz
 if_e	jmp	#LR__0417
	cmps	local03, #0 wcz
 if_be	jmp	#LR__0419
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #64 wz
 if_e	jmp	#LR__0416
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #128 wz
 if_e	jmp	#LR__0415
	add	local01, #44
	rdlong	local04, local01
	sub	local01, #44
	rdlong	local05, local04
	add	local04, #4
	rdlong	local06, local04
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	add	local01, #8
	rdlong	local04, local01
	andn	local04, #128
	wrlong	local04, local01
	sub	local01, #8
LR__0415
LR__0416
	add	local02, #12
	mov	arg02, local02
	sub	local02, #12
	add	local01, #20
	rdlong	local04, local01
	sub	local01, #20
	rdlong	local05, local04
	add	local04, #4
	rdlong	local06, local04
	mov	arg01, local01
	mov	arg03, local03
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	jmp	#LR__0419
LR__0417
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0418
	cmp	local03, #0 wz
 if_e	jmp	#LR__0418
	add	local01, #44
	rdlong	local08, local01
	sub	local01, #44
	mov	local04, local08
	rdlong	local05, local04
	add	local04, #4
	rdlong	local09, local04
	sub	local04, #4
	mov	local06, local09
	mov	local10, local01
	mov	local11, local03
	neg	local11, local11
	mov	local12, local11
	mov	local07, #1
	mov	arg01, local10
	mov	arg02, local12
	mov	arg03, #1
	mov	local13, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local13
	mov	local14, result1
	mov	local15, local14
	cmps	local15, #0 wcz
 if_ae	mov	local15, local03
LR__0418
LR__0419
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system____default_flush_ret
	ret

__system___rxtxioctl_0174
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	cmp	local01, #256 wz
 if_e	jmp	#LR__0420
	cmp	local01, #257 wz
 if_e	jmp	#LR__0421
	jmp	#LR__0422
LR__0420
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	wrlong	result1, local02
	mov	result1, #0
	jmp	#LR__0423
LR__0421
	rdlong	arg01, local02
	add	ptr___system__dat__, #8
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
	mov	result1, #0
	jmp	#LR__0423
LR__0422
	add	ptr___system__dat__, ##604
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
LR__0423
	mov	ptra, fp
	call	#popregs_
__system___rxtxioctl_0174_ret
	ret

__system____dummy_flush_0175
	mov	result1, #0
__system____dummy_flush_0175_ret
	ret

__system___vfswrite
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #2 wz
 if_ne	jmp	#LR__0424
	add	ptr___system__dat__, ##604
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0432
LR__0424
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #64 wz
 if_e	jmp	#LR__0426
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #128 wz
 if_e	jmp	#LR__0425
	add	local01, #44
	rdlong	local05, local01
	sub	local01, #44
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	add	local01, #8
	rdlong	local05, local01
	andn	local05, #128
	wrlong	local05, local01
	sub	local01, #8
LR__0425
LR__0426
	add	local01, #20
	rdlong	local05, local01 wz
	sub	local01, #20
 if_e	jmp	#LR__0428
	add	local01, #20
	rdlong	local05, local01
	sub	local01, #20
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg02, local02
	mov	arg03, local03
	mov	arg01, local01
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	mov	local09, result1
	cmps	local09, #0 wcz
 if_ae	jmp	#LR__0427
	add	local01, #8
	rdlong	local05, local01
	or	local05, #32
	wrlong	local05, local01
	add	ptr___system__dat__, ##604
	wrlong	local09, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	cmp	local09, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0432
LR__0427
	mov	result1, local09
	jmp	#LR__0432
LR__0428
	add	local01, #24
	rdlong	local10, local01 wz
	sub	local01, #24
 if_ne	jmp	#LR__0429
	add	ptr___system__dat__, ##604
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0432
LR__0429
	mov	local09, #0
LR__0430
	cmp	local03, #0 wcz
 if_be	jmp	#LR__0431
	mov	local05, local10
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	rdbyte	arg01, local04
	mov	arg02, local01
	mov	local11, objptr
	mov	objptr, local06
	add	local04, #1
	call	local07
	mov	objptr, local11
	add	local09, result1
	sub	local03, #1
	jmp	#LR__0430
LR__0431
	mov	result1, local09
LR__0432
	mov	ptra, fp
	call	#popregs_
__system___vfswrite_ret
	ret

__system___vfsread
	mov	COUNT_, #15
	call	#pushregs_
	add	ptra, #44
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #20
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #28
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #8
	rdlong	local01, local02
	test	local01, #1 wz
 if_ne	jmp	#LR__0433
	add	ptr___system__dat__, ##604
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0441
LR__0433
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdlong	local03, local01 wz
 if_e	jmp	#LR__0435
	add	fp, #4
	rdlong	local04, fp
	add	local04, #16
	rdlong	local01, local04
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #12
	mov	local05, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local05
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmps	result1, #0 wcz
 if_ae	jmp	#LR__0434
	add	fp, #4
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #8
	rdlong	local03, local04
	or	local03, #32
	add	local01, #8
	wrlong	local03, local01
	add	fp, #12
	rdlong	arg01, fp wz
	sub	fp, #16
	add	ptr___system__dat__, ##604
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, ##604
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0441
LR__0434
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
	jmp	#LR__0441
LR__0435
	add	fp, #4
	rdlong	local01, fp
	add	local01, #28
	rdlong	local03, local01
	add	fp, #20
	wrlong	local03, fp
	rdlong	local01, fp wz
	sub	fp, #24
 if_ne	jmp	#LR__0436
	add	ptr___system__dat__, ##604
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0441
LR__0436
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #36
	rdlong	local03, local01 wz
 if_e	jmp	#LR__0438
	add	fp, #36
	mov	local06, fp
	sub	fp, #32
	rdlong	local07, fp
	mov	local04, local07
	add	local04, #36
	rdlong	local08, local04
	mov	local01, local08
	rdlong	local02, local01
	add	local01, #4
	rdlong	local09, local01
	mov	local03, local09
	mov	local10, local07
	sub	fp, #4
	mov	local11, local10
	mov	local12, #256
	mov	local13, local06
	mov	arg01, local11
	mov	arg02, #256
	mov	arg03, local13
	mov	local14, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local14
	mov	local15, result1
	add	fp, #16
	wrlong	local15, fp
	rdlong	local02, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0437
	add	fp, #36
	rdlong	local04, fp
	sub	fp, #36
	mov	local03, local04
	and	local03, #2 wz
 if_e	jmp	#LR__0437
	mov	local01, #1
	add	fp, #32
	wrlong	#1, fp
	sub	fp, #32
LR__0437
LR__0438
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
LR__0439
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #0 wcz
 if_be	jmp	#LR__0440
	add	fp, #24
	rdlong	local01, fp
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	sub	fp, #20
	rdlong	arg01, fp
	sub	fp, #4
	mov	local11, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local11
	mov	local10, result1
	add	fp, #20
	wrlong	local10, fp
	sub	fp, #20
	cmps	local10, #0 wcz
 if_b	jmp	#LR__0440
	add	fp, #28
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #8
	rdlong	local07, fp
	wrbyte	local07, local01
	sub	fp, #4
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #4
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	add	fp, #20
	rdlong	local01, fp wz
	sub	fp, #32
 if_e	jmp	#LR__0439
	add	fp, #20
	rdlong	local03, fp
	sub	fp, #20
	cmp	local03, #10 wz
 if_ne	jmp	#LR__0439
LR__0440
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__0441
	mov	ptra, fp
	call	#popregs_
__system___vfsread_ret
	ret

' 	
' 	FUNCTION pfunc(c as integer) as integer
___strs_cl_pfunc
' 		if (i < 16) then
	add	objptr, #4
	rdlong	_var01, objptr
	sub	objptr, #4
	cmps	_var01, #16 wcz
 if_ae	jmp	#LR__0442
	rdlong	_var02, objptr
	add	objptr, #4
	rdlong	_var03, objptr
	add	_var03, _var02
	wrbyte	arg01, _var03
	rdlong	_var01, objptr
	add	_var01, #1
	wrlong	_var01, objptr
	sub	objptr, #4
' 			p(i) = c
' 			i = i+1
' 			return 1
	mov	result1, #1
	jmp	#___strs_cl_pfunc_ret
LR__0442
' 			return -1
	neg	result1, #1
___strs_cl_pfunc_ret
	ret

__struct__s_vfs_file_t_putchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #24
	rdlong	local01, objptr wz
	sub	objptr, #24
 if_e	mov	result1, #0
 if_e	jmp	#LR__0443
	add	objptr, #24
	rdlong	local01, objptr
	sub	objptr, #24
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	arg02, objptr
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	cmps	result1, #0 wcz
 if_b	mov	local01, #0
 if_ae	mov	local01, #1
	mov	result1, local01
LR__0443
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_putchar_ret
	ret

__struct__s_vfs_file_t_getchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #28
	rdlong	local01, objptr wz
	sub	objptr, #28
 if_e	neg	result1, #1
 if_e	jmp	#LR__0444
'         return getcf(__this);
	add	objptr, #28
	rdlong	local01, objptr
	sub	objptr, #28
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	arg01, objptr
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
LR__0444
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_getchar_ret
	ret

__struct___bas_wrap_sender_tx
	mov	COUNT_, #4
	call	#pushregs_
	rdlong	local01, objptr
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__struct___bas_wrap_sender_tx_ret
	ret

LR__0445
	byte	" "
	byte	0
LR__0446
	byte	
	byte	0
LR__0447
	byte	
	byte	0
LR__0448
	byte	" !!! corrupted heap??? !!! "
	byte	0
LR__0449
	byte	" !!! out of heap memory !!! "
	byte	0
LR__0450
	byte	" !!! corrupted heap !!! "
	byte	0
LR__0451
	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
	byte	0
LR__0452
	byte	"S"
	byte	0
LR__0453
	byte	"                      "
	byte	0
LR__0454
	byte	" "
	byte	0
LR__0455
	byte	"samples module"
	byte	0
	alignl
_dat_
'-' module file "../../../mod/awaken.mod"
	byte	$74, $68, $65, $20, $61, $77, $61, $6b, $65, $6e, $69, $6e, $67, $00, $00, $00
	byte	$00, $00, $00, $00, $6d, $75, $73, $69, $63, $20, $62, $79, $20, $78, $74, $64
	byte	$00[17]
	byte	$01, $67, $64, $79, $6e, $69, $61, $20, $61, $6e, $64, $20, $6a, $61, $6e, $6f
	byte	$77, $6f, $63, $69, $74, $79, $00, $08, $44, $00, $40, $00, $00, $00, $01, $00
	byte	$00[28]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[7]
	byte	$03, $eb, $00, $15, $00, $00, $00, $01, $74, $61, $6c, $65, $7a, $00, $00, $00
	byte	$00[14]
	byte	$13, $69, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[7]
	byte	$13, $19, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$0f, $25, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[7]
	byte	$04, $19, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[7]
	byte	$07, $d0, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$01, $10, $04, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0b, $0c
	byte	$0d, $0e, $0f, $10, $11, $12, $13, $0e, $0f, $14, $15, $18, $19, $1a, $1b, $1c
	byte	$1d, $1e, $1e, $1f, $20, $21, $22, $23, $24, $24, $25, $26, $27, $00, $00, $00
	byte	$00[83]
	byte	$4d, $2e, $4b, $2e, $01, $7d, $df, $06, $02, $fa, $c0, $00, $00, $00, $00, $00
	byte	$00[20]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $df, $06, $02, $fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $00, $00, $00, $11, $1d, $2c, $40
	byte	$00[8]
	byte	$11, $1d, $2c, $40, $00, $00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00
	byte	$00[20]
	byte	$11, $1d, $2c, $30, $00, $fe, $d0, $00, $00, $00, $00, $00, $11, $1d, $2c, $30
	byte	$00[21]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $1d, $2c, $25, $00
	byte	$00[7]
	byte	$11, $1d, $2c, $25, $00, $00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00
	byte	$00[20]
	byte	$11, $1d, $2c, $20, $01, $40, $d0, $00, $00, $00, $00, $00, $11, $1d, $2c, $20
	byte	$00[21]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $1d, $2c, $15, $00
	byte	$00[7]
	byte	$11, $1d, $2c, $15, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00
	byte	$00[24]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $00, $0c, $40, $11, $40, $2c, $40
	byte	$00[8]
	byte	$11, $40, $2c, $40, $00, $00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00
	byte	$00[20]
	byte	$11, $40, $2c, $30, $01, $1d, $d0, $00, $00, $00, $00, $00, $11, $40, $2c, $30
	byte	$00[21]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $40, $2c, $25, $00
	byte	$00[7]
	byte	$11, $40, $2c, $25, $00, $00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00
	byte	$00[20]
	byte	$11, $40, $2c, $20, $01, $53, $d0, $00, $00, $00, $00, $00, $11, $40, $2c, $20
	byte	$00[20]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11, $40, $2c, $15
	byte	$00[8]
	byte	$11, $40, $2c, $15, $00, $00, $00, $00, $00, $d6, $d0, $00, $00, $00, $00, $00
	byte	$00[24]
	byte	$01, $7d, $df, $06, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $60, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $60, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$be, $20, $00, $00, $00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00
	byte	$00[24]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $df, $06, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $60, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
	byte	$00[24]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $60, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$be, $20, $00, $00, $00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00
	byte	$00[24]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$8f, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$7f, $c0, $00, $00, $00, $00, $00, $10, $d6, $50, $00, $00, $be, $50, $00, $00
	byte	$00[28]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $7f, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $7f, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $78, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $7f, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$8f, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
	byte	$00[28]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $8f, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$aa, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
	byte	$00[28]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$00, $00, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[11]
	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00, $00
	byte	$00[28]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $10, $d6, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $01, $7d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $f0, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $01, $7d, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $f0, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$10, $d6, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $c0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$be, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
	byte	$00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $a0, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $aa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$be, $20, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $c0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $c0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $e2, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$00, $00, $00, $00, $d6, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $c0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $10, $d6, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $00, $be, $20, $00, $02
	byte	$fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $02, $fa, $c0, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $10, $d6, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $00, $be, $20, $00, $02
	byte	$fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $02, $fa, $c0, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $7d, $d0, $00, $01, $40, $d0, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $fe, $d0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $02
	byte	$fa, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $40, $d0, $00, $00, $fe, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $00, $be, $20, $00, $03
	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $d6, $d0, $00, $03, $58, $c0, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $d6, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $d6, $d0, $00, $00, $be, $20, $00, $03
	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $03
	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $03, $58, $c0, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $00, $d6, $d0, $00, $00, $be, $20, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $10, $be, $50, $00, $03
	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $1d, $d0, $00, $01, $53, $d0, $00, $00, $00, $00, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00
	byte	$00, $00, $00, $01, $53, $d0, $00, $01, $1d, $d0, $00, $10, $be, $50, $00, $03
	byte	$58, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $01, $ac, $d0, $00, $01, $53, $d0, $00, $10, $be, $50, $00, $00
	byte	$be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $be, $60, $00, $00, $be, $6c, $00, $00, $be, $20, $00, $00
	byte	$be, $2c, $00, $00, $00, $00, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00
	byte	$00[47]
	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[45]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00
	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00
	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00
	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[19]
	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$be, $60, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[55]
	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[45]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$be, $60, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[55]
	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[32]
	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $20, $00
	byte	$00[29]
	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[19]
	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $20, $00
	byte	$00[29]
	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$d6, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[19]
	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$10, $d6, $50, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00, $be, $20, $00
	byte	$00[17]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[8]
	byte	$be, $60, $00, $00, $00, $00, $00, $00, $be, $20, $00, $10, $fe, $5c, $20, $00
	byte	$00, $00, $00, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $10, $be, $50, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00, $00, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $00, $00, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $fe, $5c, $20, $00, $be, $60, $00, $00, $be, $20, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $be, $60, $00, $00, $d6, $60, $00, $00, $be, $20, $00, $00
	byte	$00[28]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$be, $20, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[7]
	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$f0, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$f0, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$aa, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$a0, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$aa, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$d6, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$be, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$d6, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
	byte	$00[17]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$f0, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00, $00
	byte	$00[16]
	byte	$fe, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00, $00
	byte	$00[15]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $40, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$02, $3a, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $c5, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$10, $be, $50, $00, $00, $00, $00, $00, $01, $e0, $d0, $00, $00, $00, $00, $00
	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$01, $fc, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
	byte	$00[24]
	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
	byte	$00[48]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
	byte	$00[48]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
	byte	$00[48]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $7d, $d0, $00, $02, $fa, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
	byte	$00[48]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
	byte	$00[48]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
	byte	$00[48]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $7d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
	byte	$00[48]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
	byte	$00[24]
	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
	byte	$00[24]
	byte	$10, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $ac, $d0, $00, $03, $58, $c0, $00, $00, $be, $20, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $53, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$10, $be, $50, $00, $00, $00, $00, $00, $01, $53, $d0, $00, $00, $00, $00, $00
	byte	$10, $be, $50, $00, $00, $be, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$01, $1d, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
	byte	$00[16]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $be, $50, $00
	byte	$00[16]
	byte	$01, $ac, $d0, $00, $00, $00, $00, $00, $10, $be, $50, $00, $00, $00, $00, $00
	byte	$00[24598]
	byte	$10, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[29]
	byte	$ff, $ff, $00, $02, $02, $fd, $01, $fb, $c0, $cd, $24, $f9, $cf, $3f, $41, $c9
	byte	$92, $bd, $1a, $47, $0c, $f3, $f2, $d6, $19, $1f, $bc, $a5, $f7, $0d, $b6, $b6
	byte	$07, $ee, $ce, $c4, $c5, $0d, $13, $a2, $80, $e4, $2b, $e8, $97, $ad, $e1, $fc
	byte	$f7, $e0, $b3, $de, $3b, $fc, $bd, $e8, $15, $1b, $0a, $13, $02, $f2, $05, $18
	byte	$24, $05, $fc, $1f, $21, $0e, $16, $f7, $eb, $2a, $18, $fe, $0a, $11, $fb, $f5
	byte	$18, $0b, $ff, $07, $d7, $b6, $da, $ff, $17, $19, $f3, $8a, $80, $bf, $d2, $b7
	byte	$d7, $f4, $ec, $bc, $82, $80, $8e, $9d, $85, $80, $88, $82, $81, $80, $80, $80
	byte	$80[20]
	byte	$83, $8d, $92, $99, $9c, $9d, $a2, $af, $bb, $bd, $c3, $c5, $cb, $d7, $dc, $e0
	byte	$e8, $e9, $f4, $f5, $f1, $00, $02, $06, $16, $19, $0c, $0d, $21, $2a, $2a, $2b
	byte	$22, $28, $2f, $25, $46, $66, $32, $13, $4d, $6f, $44, $30, $40, $37, $3c, $4d
	byte	$59, $46, $34, $3d, $39, $39, $45, $4f, $4b, $46, $3c, $40, $3a, $34, $31, $29
	byte	$26, $1d, $1b, $19, $11, $0b, $ff, $fa, $f6, $ed, $e7, $df, $d8, $d2, $cb, $c6
	byte	$c0, $b5, $af, $ad, $ac, $a8, $9d, $92, $8b, $86, $82, $80, $80, $80, $80, $80
	byte	$80[50]
	byte	$8a, $80, $80, $80, $80, $87, $8a, $80, $80, $88, $8f, $98, $9f, $a3, $aa, $b3
	byte	$b6, $bc, $c5, $ce, $d4, $d7, $df, $e4, $ea, $f0, $f5, $fb, $fe, $01, $07, $0e
	byte	$13, $17, $16, $1a, $23, $2d, $31, $32, $38, $39, $3b, $3d, $3f, $4c, $4f, $4b
	byte	$45, $4e, $58, $58, $57, $55, $55, $56, $59, $61, $63, $5f, $5f, $61, $61, $62
	byte	$67, $65, $5e, $65, $69, $68, $68, $64, $62, $60, $5f, $5e, $5c, $5b, $58, $56
	byte	$54, $52, $50, $4d, $4b, $49, $46, $44, $42, $40, $3d, $39, $32, $31, $34, $2e
	byte	$24, $1d, $10, $07, $09, $0e, $03, $f3, $e6, $de, $e6, $e6, $d8, $ca, $bd, $b3
	byte	$b4, $b2, $aa, $a5, $9b, $90, $8f, $8e, $85, $81, $80, $80, $80, $80, $80, $80
	byte	$80[71]
	byte	$8b, $9a, $a2, $9e, $98, $9c, $a4, $b8, $bf, $b5, $b1, $b9, $c5, $cc, $ce, $cf
	byte	$d5, $e0, $e7, $ed, $f4, $f5, $f4, $f7, $ff, $06, $0d, $14, $17, $16, $17, $20
	byte	$29, $2d, $2c, $2a, $2e, $33, $38, $3b, $3c, $43, $49, $47, $45, $48, $4c, $4c
	byte	$4c, $54, $5b, $5c, $5a, $59, $5c, $5e, $5e, $5c, $60, $61, $61, $63, $65, $65
	byte	$64, $66, $64, $64, $63, $68, $6b, $69, $62, $5f, $6a, $6b, $63, $5f, $5c, $5d
	byte	$5e, $5d, $58, $51, $54, $58, $53, $50, $4a, $40, $42, $46, $48, $42, $42, $3b
	byte	$2c, $33, $34, $29, $21, $21, $22, $28, $21, $0e, $0f, $10, $0a, $03, $00, $ff
	byte	$fd, $f9, $f3, $f0, $ed, $eb, $e9, $e3, $dd, $d5, $ce, $d4, $d4, $c8, $c1, $c3
	byte	$c5, $bb, $b7, $b8, $b4, $b3, $b4, $a8, $a7, $aa, $a5, $a3, $9f, $9a, $9d, $9b
	byte	$97, $96, $92, $91, $94, $90, $8b, $8b, $89, $89, $89, $87, $87, $84, $85, $89
	byte	$87, $81, $80, $82, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
	byte	$80[23]
	byte	$84, $83, $80, $80, $80, $84, $85, $83, $80, $85, $83, $81, $84, $8a, $8e, $8d
	byte	$89, $8e, $93, $93, $8e, $88, $8d, $92, $92, $93, $93, $92, $97, $9d, $9c, $9b
	byte	$9e, $a0, $9f, $9e, $9e, $9e, $9e, $a2, $a4, $a5, $a8, $af, $af, $ac, $b0, $ac
	byte	$a8, $ac, $b5, $ba, $bb, $be, $bd, $bd, $bc, $bd, $c2, $c2, $c5, $ca, $cc, $cf
	byte	$d0, $d1, $d3, $da, $e1, $e3, $df, $db, $de, $e7, $ec, $ee, $ed, $ed, $f2, $fa
	byte	$fe, $fd, $ff, $01, $05, $0a, $0d, $0d, $0f, $12, $16, $1b, $1f, $1f, $1f, $23
	byte	$2b, $2f, $2f, $31, $34, $38, $3c, $3f, $3f, $42, $49, $4d, $4c, $4f, $54, $55
	byte	$59, $5b, $5c, $5d, $5f, $63, $65, $68, $6b, $6e, $6f, $70, $71, $71, $74, $78
	byte	$77, $78, $7a, $7d, $7b, $79, $7c, $7f, $7f, $7f, $7f, $7e, $79, $78, $7f, $7f
	byte	$7f, $7f, $7d, $7b, $7a, $7b, $7e, $7b, $7c, $7f, $7e, $7a, $79, $7c, $7c, $75
	byte	$71, $74, $75, $71, $68, $6a, $73, $75, $6c, $60, $64, $6b, $68, $61, $5c, $5a
	byte	$5e, $5f, $58, $52, $51, $51, $4d, $49, $46, $44, $40, $3b, $3a, $38, $36, $2e
	byte	$27, $26, $25, $20, $1a, $15, $13, $10, $0b, $06, $ff, $fa, $f6, $f2, $ef, $e8
	byte	$e3, $dc, $d8, $d8, $d4, $cb, $c3, $bf, $b9, $b4, $b5, $b2, $ac, $a7, $a1, $9b
	byte	$95, $91, $90, $8e, $8b, $88, $82, $80, $80, $80, $80, $80, $80, $80, $80, $80
	byte	$80[44]
	byte	$81, $85, $85, $85, $87, $88, $88, $8c, $8f, $8d, $8f, $91, $92, $96, $99, $9b
	byte	$9c, $9e, $a1, $a6, $a7, $a5, $a4, $a6, $ac, $b9, $be, $ba, $b9, $b6, $b7, $bf
	byte	$ca, $cf, $ce, $d1, $d8, $db, $dc, $df, $e9, $ed, $ec, $ef, $f4, $f6, $f8, $fe
	byte	$06, $0a, $0c, $0c, $10, $16, $19, $1c, $1f, $23, $28, $2b, $2d, $30, $33, $38
	byte	$3d, $3d, $3d, $42, $47, $46, $47, $4c, $4f, $51, $52, $53, $55, $58, $5b, $5e
	byte	$5e, $5e, $61, $63, $64, $65, $68, $6a, $69, $68, $68, $69, $6d, $6e, $70, $72
	byte	$70, $6d, $6e, $71, $73, $71, $73, $74, $73, $73, $6f, $6c, $6d, $6d, $6c, $6f
	byte	$71, $6d, $6b, $6c, $6d, $6a, $66, $66, $66, $60, $5f, $64, $67, $66, $5f, $59
	byte	$58, $58, $57, $53, $51, $54, $56, $55, $50, $4a, $47, $49, $4b, $49, $43, $3f
	byte	$3e, $3b, $3a, $3c, $3b, $34, $34, $37, $34, $31, $2f, $2b, $27, $28, $28, $26
	byte	$21, $1d, $1b, $1c, $1d, $1a, $13, $0e, $11, $14, $0e, $08, $06, $05, $06, $04
	byte	$fc, $f8, $fb, $fb, $f7, $f5, $f5, $f2, $f1, $f0, $ec, $ea, $e9, $e8, $e8, $e7
	byte	$e7, $e5, $e1, $e2, $e3, $df, $de, $e2, $e4, $df, $dd, $e0, $de, $d7, $d8, $e4
	byte	$e8, $e2, $df, $dd, $d7, $d4, $dd, $ed, $f1, $e6, $dd, $e0, $e5, $e6, $e7, $e4
	byte	$e4, $ec, $f2, $ee, $ea, $ed, $f1, $f2, $f2, $f0, $f1, $f5, $f2, $ef, $f4, $f8
	byte	$f5, $f3, $f6, $fa, $f9, $f9, $f8, $f5, $f3, $f7, $f9, $f7, $f7, $f9, $f9, $f6
	byte	$f3, $f3, $f4, $f4, $f7, $f8, $f5, $f4, $f6, $f6, $f3, $f4, $f4, $f6, $f9, $fa
	byte	$f5, $f4, $f7, $f9, $f5, $f3, $f6, $f5, $ef, $f0, $f7, $01, $02, $f5, $ed, $f2
	byte	$f3, $f2, $f9, $fe, $01, $01, $f9, $f4, $f6, $f9, $fb, $fb, $fc, $fc, $fd, $f8
	byte	$f0, $f4, $01, $02, $f7, $f2, $f9, $00, $fd, $f2, $f0, $fb, $03, $03, $ff, $fe
	byte	$03, $05, $00, $fc, $fe, $05, $06, $00, $00, $07, $0a, $07, $04, $03, $05, $08
	byte	$06, $03, $06, $07, $05, $04, $06, $06, $06, $06, $02, $01, $03, $04, $07, $0c
	byte	$0b, $06, $07, $09, $08, $0b, $0e, $0c, $0c, $0e, $0d, $0d, $0d, $0b, $10, $12
	byte	$0e, $10, $18, $18, $15, $16, $1a, $1d, $1d, $18, $15, $16, $1a, $1e, $24, $28
	byte	$25, $1d, $1c, $23, $24, $23, $26, $28, $2d, $35, $37, $33, $32, $32, $32, $35
	byte	$37, $37, $38, $3a, $3d, $3f, $3b, $38, $3a, $3e, $42, $41, $3c, $38, $3d, $41
	byte	$3e, $3b, $3a, $39, $3b, $3d, $39, $33, $34, $36, $34, $34, $33, $32, $32, $33
	byte	$31, $2e, $2d, $2e, $2f, $31, $32, $2f, $2d, $2e, $2f, $30, $2d, $2a, $2a, $2b
	byte	$2c, $2f, $30, $31, $2f, $2a, $26, $2a, $31, $32, $2d, $2d, $31, $2e, $28, $29
	byte	$2c, $2b, $2c, $2c, $2c, $2c, $2e, $2f, $2c, $28, $26, $27, $2c, $2d, $2a, $2a
	byte	$27, $25, $29, $28, $25, $24, $27, $28, $25, $20, $1f, $23, $24, $22, $21, $20
	byte	$1d, $19, $1b, $1e, $20, $1e, $1a, $17, $16, $18, $19, $15, $12, $16, $18, $14
	byte	$11, $13, $15, $15, $14, $12, $12, $13, $13, $12, $14, $15, $13, $11, $10, $10
	byte	$13, $13, $11, $11, $10, $0f, $0d, $0e, $0f, $12, $14, $13, $10, $0c, $0a, $0e
	byte	$12, $10, $11, $14, $11, $0c, $09, $0a, $0d, $12, $14, $12, $11, $10, $0d, $0e
	byte	$11, $0e, $10, $16, $17, $13, $11, $13, $1b, $20, $1e, $1b, $18, $1b, $27, $2b
	byte	$28, $27, $2c, $30, $2f, $2c, $2b, $2f, $32, $2f, $31, $3b, $3f, $39, $35, $37
	byte	$3f, $45, $42, $3d, $3c, $44, $4c, $48, $42, $46, $4d, $4c, $49, $48, $4c, $53
	byte	$55, $50, $4c, $4f, $54, $57, $59, $55, $51, $53, $57, $5a, $5a, $54, $56, $5b
	byte	$5c, $58, $57, $57, $56, $55, $56, $5a, $59, $53, $52, $4f, $47, $48, $57, $60
	byte	$58, $45, $3f, $48, $4b, $4a, $46, $3f, $41, $4b, $49, $3b, $39, $43, $3e, $31
	byte	$30, $32, $32, $2e, $29, $2a, $2f, $2a, $1f, $1b, $22, $26, $20, $19, $17, $14
	byte	$15, $17, $12, $0a, $0a, $0b, $06, $03, $06, $05, $fd, $fb, $00, $fe, $f9, $f6
	byte	$f6, $f7, $f5, $f5, $f4, $f4, $f7, $f4, $ed, $ef, $f2, $f2, $f1, $ef, $ee, $ee
	byte	$f0, $f0, $f0, $f7, $f9, $f0, $ec, $f1, $f3, $f2, $f8, $fd, $fb, $f8, $f9, $f6
	byte	$f1, $f5, $01, $07, $06, $06, $04, $02, $02, $04, $09, $0a, $0c, $10, $14, $19
	byte	$19, $10, $0d, $14, $1c, $22, $26, $27, $29, $2b, $2d, $2e, $2e, $30, $33, $31
	byte	$31, $37, $3e, $42, $42, $42, $41, $43, $46, $46, $45, $44, $48, $4d, $4d, $4b
	byte	$4a, $4d, $4f, $50, $4f, $4f, $54, $55, $53, $54, $58, $59, $59, $59, $56, $54
	byte	$58, $5b, $59, $5a, $5a, $57, $57, $56, $54, $58, $5c, $59, $53, $4e, $4f, $51
	byte	$53, $52, $4f, $4f, $4f, $4d, $4a, $49, $4a, $49, $48, $49, $47, $41, $3a, $39
	byte	$3f, $43, $40, $3e, $3f, $3a, $36, $37, $36, $37, $37, $35, $34, $31, $30, $30
	byte	$2e, $2c, $2c, $2b, $2a, $29, $28, $27, $27, $28, $27, $26, $26, $22, $1d, $1d
	byte	$21, $20, $1c, $1b, $1c, $1e, $1f, $1c, $17, $18, $1d, $1d, $19, $16, $16, $1a
	byte	$1d, $1b, $18, $18, $18, $16, $16, $17, $16, $17, $1a, $18, $17, $16, $15, $15
	byte	$17, $17, $15, $15, $16, $16, $16, $17, $18, $16, $15, $19, $1a, $14, $14, $19
	byte	$19, $15, $15, $1a, $1c, $18, $18, $1b, $1c, $1c, $1c, $17, $15, $1b, $20, $1b
	byte	$16, $1b, $20, $1f, $1c, $1b, $1e, $20, $1c, $18, $1c, $25, $25, $1c, $1a, $1f
	byte	$25, $25, $20, $1b, $1a, $1e, $21, $1d, $1f, $26, $27, $22, $20, $22, $25, $23
	byte	$20, $22, $23, $25, $25, $23, $22, $26, $27, $24, $23, $25, $26, $26, $25, $23
	byte	$22, $25, $27, $26, $23, $22, $20, $21, $25, $23, $20, $1f, $1f, $1c, $1b, $1f
	byte	$20, $1f, $20, $20, $1d, $1a, $19, $19, $19, $19, $1c, $1c, $18, $19, $1b, $1a
	byte	$1e, $21, $1d, $18, $18, $1b, $1e, $20, $21, $1e, $1c, $21, $25, $20, $1d, $1f
	byte	$21, $20, $22, $27, $28, $27, $28, $2a, $2c, $2e, $2d, $2c, $2e, $35, $38, $35
	byte	$33, $34, $37, $3b, $3d, $3c, $3b, $3f, $40, $40, $44, $46, $43, $43, $47, $49
	byte	$48, $49, $49, $48, $49, $4a, $49, $4c, $4e, $4e, $4c, $49, $49, $48, $49, $4b
	byte	$49, $47, $47, $47, $48, $49, $48, $45, $43, $43, $43, $44, $44, $44, $41, $3d
	byte	$3d, $40, $3d, $38, $3c, $40, $3a, $33, $32, $32, $33, $34, $32, $30, $2e, $2d
	byte	$2d, $2b, $27, $24, $24, $27, $29, $26, $22, $1f, $1d, $1c, $18, $15, $13, $12
	byte	$17, $17, $11, $0c, $0e, $0f, $0b, $07, $04, $03, $06, $07, $04, $00, $01, $02
	byte	$00, $fe, $fc, $fc, $fc, $fb, $fa, $f9, $f8, $f8, $f7, $f5, $f4, $f3, $f2, $f1
	byte	$f0, $ef, $ed, $ef, $f0, $ee, $ec, $eb, $ea, $eb, $ed, $f0, $f1, $ee, $e8, $e7
	byte	$eb, $ed, $ef, $f2, $f4, $f1, $ee, $ee, $f0, $ef, $ef, $f1, $f2, $f5, $f9, $f7
	byte	$f4, $f7, $00, $02, $fc, $fa, $fb, $ff, $01, $02, $05, $07, $08, $06, $06, $09
	byte	$0c, $0c, $0c, $0b, $0d, $12, $14, $13, $12, $13, $16, $16, $15, $16, $19, $1b
	byte	$1b, $1c, $1e, $1e, $1e, $20, $21, $22, $22, $22, $22, $23, $26, $26, $26, $26
	byte	$27, $29, $2a, $29, $27, $27, $28, $29, $2d, $31, $2e, $2a, $29, $2d, $2f, $33
	byte	$35, $32, $31, $33, $33, $30, $30, $35, $36, $35, $35, $36, $37, $37, $38, $39
	byte	$39, $3c, $3c, $39, $3b, $3e, $3e, $3c, $3d, $3e, $3d, $3d, $3f, $3e, $3d, $40
	byte	$42, $41, $42, $44, $45, $44, $42, $43, $46, $46, $44, $43, $44, $47, $49, $45
	byte	$40, $42, $45, $46, $44, $41, $41, $43, $44, $44, $42, $42, $41, $3d, $3b, $3c
	byte	$3c, $3b, $3a, $39, $3a, $3a, $38, $35, $33, $32, $32, $30, $2f, $30, $30, $2f
	byte	$2c, $29, $28, $29, $28, $25, $22, $21, $22, $23, $23, $21, $1d, $1c, $1b, $1a
	byte	$19, $1a, $1b, $17, $14, $15, $14, $0e, $0e, $11, $11, $0f, $0e, $0c, $0a, $09
	byte	$09, $08, $07, $06, $02, $fe, $ff, $03, $01, $fd, $fb, $fb, $fa, $f9, $f8, $f6
	byte	$f4, $f6, $f6, $f2, $f2, $f4, $f3, $ee, $eb, $eb, $ec, $ec, $ea, $e7, $e7, $e8
	byte	$e7, $e4, $e1, $e2, $e2, $e2, $e0, $de, $dd, $dd, $de, $dd, $db, $da, $d9, $d9
	byte	$db, $d9, $d6, $d4, $d6, $d8, $d9, $d8, $d6, $d6, $d8, $d8, $d6, $d5, $d6, $d8
	byte	$d9, $da, $db, $da, $db, $db, $db, $db, $dd, $df, $df, $e0, $e2, $e3, $e4, $e5
	byte	$e4, $e3, $e7, $ed, $ee, $eb, $eb, $ef, $f1, $f1, $f2, $f5, $f7, $f9, $fa, $fc
	byte	$fe, $ff, $00, $02, $04, $06, $09, $0c, $0d, $0c, $0d, $10, $12, $15, $17, $19
	byte	$1c, $1f, $22, $23, $22, $23, $26, $2a, $2c, $2c, $2d, $30, $33, $36, $36, $36
	byte	$38, $3a, $3b, $3c, $3d, $3f, $42, $43, $43, $44, $46, $45, $46, $49, $4b, $4b
	byte	$4c, $4c, $4c, $4d, $50, $51, $51, $53, $54, $54, $52, $53, $55, $55, $54, $55
	byte	$55, $55, $55, $54, $54, $55, $55, $54, $53, $53, $54, $53, $50, $50, $50, $4e
	byte	$4e, $4e, $4b, $49, $4a, $48, $45, $43, $44, $44, $44, $42, $3f, $3e, $3c, $3b
	byte	$39, $37, $38, $38, $35, $34, $33, $32, $32, $30, $2d, $2c, $2e, $2d, $2a, $28
	byte	$27, $26, $25, $24, $22, $20, $1e, $1c, $1c, $1a, $19, $17, $16, $15, $15, $14
	byte	$11, $0f, $0e, $0e, $0d, $0b, $08, $05, $06, $07, $06, $04, $05, $03, $fe, $fb
	byte	$f9, $fb, $fe, $fd, $fa, $f9, $f8, $f7, $f5, $f3, $f2, $f2, $f1, $f0, $ef, $f0
	byte	$ef, $ed, $eb, $eb, $ed, $ed, $e9, $e8, $ea, $eb, $ea, $e8, $e7, $e8, $e9, $e9
	byte	$e8, $e6, $e7, $e8, $e7, $e6, $e6, $e6, $e5, $e7, $e9, $ea, $e8, $e7, $e8, $eb
	byte	$eb, $e9, $e9, $eb, $ee, $ee, $ed, $ec, $ee, $f0, $f1, $f0, $ef, $ef, $f1, $f3
	byte	$f3, $f6, $f8, $f7, $f6, $f8, $fa, $fa, $fb, $fc, $fd, $fd, $fd, $fd, $ff, $02
	byte	$05, $07, $04, $03, $05, $07, $08, $08, $09, $0b, $0c, $0c, $0d, $0e, $0d, $0d
	byte	$0f, $12, $13, $13, $12, $11, $11, $14, $16, $15, $15, $17, $18, $17, $16, $17
	byte	$18, $19, $18, $19, $1a, $1a, $1b, $1b, $1d, $1e, $1e, $1d, $1e, $1f, $20, $20
	byte	$21, $23, $23, $23, $24, $24, $24, $25, $26, $25, $25, $27, $29, $29, $29, $2a
	byte	$2b, $2c, $2b, $2b, $2a, $2c, $2e, $2f, $30, $2f, $2e, $2e, $30, $32, $32, $31
	byte	$30, $31, $33, $33, $33, $34, $34, $35, $34, $34, $33, $33, $34, $35, $35, $35
	byte	$35, $35, $34, $33, $33, $34, $33, $32, $32, $31, $31, $30, $2f, $2f, $30, $2f
	byte	$2d, $2d, $2d, $2c, $2d, $2d, $2c, $29, $28, $28, $28, $27, $26, $26, $25, $24
	byte	$23, $22, $21, $20, $1e, $1c, $1c, $1b, $1a, $19, $17, $14, $12, $13, $14, $12
	byte	$10, $0d, $0b, $0b, $0a, $08, $06, $04, $04, $04, $03, $00, $ff, $fe, $fe, $fd
	byte	$fa, $f9, $f9, $f9, $f8, $f7, $f5, $f4, $f4, $f4, $f4, $f2, $f1, $f1, $f0, $ef
	byte	$f0, $f0, $f0, $ef, $ed, $ed, $ed, $ec, $eb, $ea, $eb, $ec, $ec, $eb, $eb, $eb
	byte	$eb, $ec, $eb, $ea, $eb, $ec, $ec, $eb, $ec, $ed, $ed, $eb, $eb, $ec, $ed, $ed
	byte	$ed, $ec, $ec, $ee, $ef, $ef, $ef, $f0, $ef, $ef, $f0, $f2, $f2, $f0, $f1, $f2
	byte	$f3, $f3, $f4, $f4, $f5, $f6, $f5, $f5, $f7, $f7, $f7, $f8, $f8, $f9, $f9, $fb
	byte	$fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $ff, $00, $01, $01, $02, $03, $05, $06
	byte	$06, $07, $06, $06, $07, $0a, $0b, $0b, $0b, $0c, $0d, $0e, $0e, $0e, $0f, $10
	byte	$0f, $10, $12, $14, $15, $14, $13, $14, $15, $16, $16, $17, $18, $19, $19, $1a
	byte	$1b, $1c, $1c, $1c, $1c, $1d, $1e, $1f, $1e, $1e, $20, $21, $21, $20, $20, $22
	byte	$23[5]
	byte	$25, $25, $24, $25, $26, $26, $26, $27, $26, $26, $25, $26, $27, $27, $26, $26
	byte	$28, $29, $28, $26, $26, $26, $27, $28, $27, $27, $27, $27, $27, $28, $27, $27
	byte	$25, $24, $24, $25, $25, $25, $24, $24, $23, $23, $22, $22, $22, $22, $21, $20
	byte	$1e, $1f, $20, $1f, $1f, $1e, $1e, $1d, $1c, $1c, $1c, $1b, $1a, $1b, $1b, $1a
	byte	$18, $17, $18, $18, $18, $17, $16, $15, $16, $15, $14, $13, $13, $14, $13, $12
	byte	$11, $11, $11, $11, $10, $10, $0f, $0e, $0d, $0e, $0e, $0d, $0c, $0c, $0b, $0b
	byte	$0a, $09, $09, $09, $08, $08, $07, $07, $07, $07, $06, $04, $03, $03, $03, $02
	byte	$01[5]
	byte	$ff, $fe, $fd, $fc, $fd, $fd, $fd, $fc, $fb, $f9, $f9, $f8, $f8, $f8, $f8, $f7
	byte	$f7, $f6, $f6, $f5, $f5, $f5, $f4, $f3, $f2, $f2, $f2, $f3, $f3, $f2, $f1, $f1
	byte	$f1, $f1, $f1, $f1, $f2, $f2, $f1, $f1, $f2, $f2, $f3, $f3, $f2, $f2, $f2, $f3
	byte	$f3, $f4, $f5, $f5, $f5, $f6, $f6, $f5, $f6, $f7, $f8, $f9, $f9, $f9, $fa, $fb
	byte	$fc, $fc, $fd, $fe, $fe, $ff, $01, $01, $01, $01, $03, $04, $06, $07, $06, $06
	byte	$08, $0a, $0a, $0a, $0b, $0c, $0c, $0c, $0d, $0e, $0f, $11, $12, $11, $11, $12
	byte	$13, $14, $14, $14, $14, $15, $15, $15, $16, $17, $16, $16, $16, $18, $19, $19
	byte	$18, $19, $19, $1a, $1a, $19, $1a, $1b, $1a, $19, $1a, $1a, $1a, $1a, $1a, $1a
	byte	$1a, $1a, $1a, $19, $19, $1a, $1b, $1a, $19, $19, $19, $19, $1a, $19, $18, $18
	byte	$18[5]
	byte	$17[6]
	byte	$16, $16, $15, $15, $15, $15, $15, $15, $14, $14, $14, $14, $14, $14, $14, $13
	byte	$13, $14, $14, $14, $13, $13, $12, $12, $12, $12, $11, $12, $12, $11, $11, $10
	byte	$10, $10, $11, $11, $0f, $0f, $0f, $0f, $0f, $0e, $0e, $0e, $0d, $0d, $0d, $0d
	byte	$0d, $0c, $0b, $0b, $0b, $0c, $0b, $0a, $0a, $0a, $0a, $09, $08, $08, $08, $08
	byte	$07, $06, $07, $07, $06, $05, $05, $05, $05, $05, $04, $04, $03, $04, $03, $03
	byte	$02, $02, $02, $02, $01, $01, $01, $01, $01, $01, $01, $00, $00, $01, $01, $01
	byte	$00, $00, $01, $01, $01, $00, $00, $01, $02, $02, $01, $01, $01, $01, $01, $01
	byte	$02, $02, $02, $02, $03, $03, $03, $03, $03, $03, $04, $04, $04, $04, $05, $05
	byte	$05, $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06
	byte	$06, $06, $05, $05, $06, $07, $06, $06, $05, $05, $06, $06, $05, $05, $05, $06
	byte	$06, $05, $04, $04, $05, $05, $05, $05, $04, $04, $04, $04, $05, $04, $04, $04
	byte	$04[6]
	byte	$05, $05, $05, $04, $04, $04, $04, $04, $05, $05, $06, $06, $05, $05, $05, $06
	byte	$06, $05, $05, $06, $07, $07, $07, $07, $07, $07, $07, $08, $08, $09, $08, $08
	byte	$09, $09, $09, $09, $0a, $0a, $0a, $0b, $0b, $0b, $0b, $0c, $0c, $0c, $0c, $0c
	byte	$0c, $0d, $0d, $0d, $0d, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0f, $0e, $0e, $0e
	byte	$0f, $0f, $0f, $0f, $0e, $0e, $0e, $0f, $0e, $0f, $0f, $0f, $0f, $0e, $0e, $0e
	byte	$0e[5]
	byte	$0d, $0d, $0d, $0d, $0c, $0c, $0d, $0d, $0d, $0c, $0b, $0b, $0a, $0a, $0a, $0a
	byte	$0a, $0a, $09, $08, $08, $08, $08, $08, $07, $07, $07, $07, $07, $07, $06, $06
	byte	$06, $06, $05, $06, $05, $05, $05, $04, $04, $04, $04, $04, $04, $03, $03, $03
	byte	$03[5]
	byte	$02, $03, $03, $03, $02, $02, $02, $02, $03, $02, $02, $02, $02, $03, $03, $02
	byte	$02, $02, $02, $03, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $03
	byte	$03, $02, $02, $02, $02, $02, $03, $03, $03, $03, $03, $02, $02, $02, $03, $03
	byte	$03, $03, $03, $02, $02, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02
	byte	$03, $04, $04, $03, $03, $03, $03, $03, $03, $04, $04, $04, $04, $05, $05, $05
	byte	$05[5]
	byte	$06[7]
	byte	$07[7]
	byte	$08[11]
	byte	$09, $09, $09, $08, $08, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0a
	byte	$0a, $09, $09, $09, $09, $09, $09, $0a, $0a, $09, $09, $09, $09, $09, $09, $09
	byte	$09[12]
	byte	$08, $09, $09, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
	byte	$08[15]
	byte	$07, $07, $07, $08, $08, $08, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07
	byte	$07[5]
	byte	$06[7]
	byte	$05[6]
	byte	$04[8]
	byte	$03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $01
	byte	$01, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff, $00, $ff, $ff, $ff, $ff, $ff
	byte	$ff, $ff, $fe, $fe, $fe, $fe, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe
	byte	$fe[5]
	byte	$ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $ff, $00
	byte	$00[5]
	byte	$01[6]
	byte	$02[5]
	byte	$03, $03, $03, $03, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05, $06
	byte	$06[7]
	byte	$07, $07, $06, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07
	byte	$07[17]
	byte	$06[9]
	byte	$05, $06, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $04
	byte	$04[9]
	byte	$03[12]
	byte	$02, $02, $02, $02, $03, $02, $02, $02, $02, $02, $02, $01, $01, $02, $02, $01
	byte	$01[11]
	byte	$00[33]
	byte	$01, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
	byte	$01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $03, $03, $02, $02
	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $03, $02, $03, $03, $03, $03, $02
	byte	$02, $02, $03, $03, $03, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
	byte	$02, $01, $02, $02, $02, $02, $01, $01, $01, $01, $02, $01, $01, $01, $01, $01
	byte	$01[36]
	byte	$02[6]
	byte	$03[15]
	byte	$04[14]
	byte	$05, $04, $04, $05, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
	byte	$04[11]
	byte	$03, $03, $03, $03, $00, $00, $00, $00, $3e, $80, $f9, $f5, $fb, $f1, $f1, $17
	byte	$29, $b9, $0d, $42, $e2, $c4, $3f, $07, $33, $06, $81, $d8, $f9, $de, $78, $04
	byte	$08, $2f, $ef, $81, $d2, $1c, $49, $1a, $32, $07, $e2, $e2, $dd, $f9, $3a, $3a
	byte	$fe, $24, $58, $2e, $0a, $46, $33, $29, $16, $0e, $fa, $ee, $c9, $c9, $59, $18
	byte	$81, $a4, $ad, $70, $0c, $37, $80, $f7, $55, $e3, $a0, $19, $13, $42, $3f, $c8
	byte	$03, $0f, $d9, $f0, $31, $94, $a4, $d7, $c3, $97, $45, $b1, $cc, $0b, $b4, $b9
	byte	$15, $99, $36, $db, $f8, $e2, $26, $d1, $9b, $2c, $db, $0d, $0a, $06, $01, $27
	byte	$dd, $ed, $ed, $d9, $80, $99, $0d, $00, $f0, $09, $80, $b4, $50, $2a, $08, $bb
	byte	$5d, $c0, $80, $59, $38, $16, $0e, $02, $1a, $f9, $59, $50, $de, $80, $42, $28
	byte	$3e, $0d, $2d, $26, $f8, $8c, $81, $b0, $bc, $8e, $25, $82, $2e, $db, $fe, $d7
	byte	$42, $3d, $9e, $32, $31, $f8, $3e, $39, $db, $43, $04, $dc, $b6, $10, $fe, $95
	byte	$02, $e1, $fc, $1e, $43, $bd, $25, $25, $dc, $36, $d4, $a7, $f2, $4a, $80, $c5
	byte	$80, $96, $9b, $1d, $08, $82, $66, $1f, $b7, $41, $e7, $cc, $09, $43, $d0, $0f
	byte	$70, $bc, $ba, $2b, $fd, $35, $09, $c5, $e9, $05, $0f, $ce, $f6, $e9, $12, $fe
	byte	$82, $0b, $cb, $d1, $e3, $4a, $3b, $7c, $0e, $a1, $29, $ab, $55, $38, $e6, $67
	byte	$ad, $6d, $86, $49, $df, $15, $00, $3c, $9e, $4c, $de, $fe, $1c, $4f, $da, $3f
	byte	$32, $06, $14, $32, $dd, $3e, $23, $d4, $d3, $00, $e5, $f5, $ef, $40, $07, $95
	byte	$dd, $d7, $a1, $f8, $2d, $5e, $59, $ed, $5f, $e5, $4e, $1d, $be, $48, $8b, $2a
	byte	$cd, $00, $1f, $2b, $db, $81, $d9, $f6, $cc, $a9, $ef, $f2, $17, $c9, $5c, $ee
	byte	$3c, $02, $76, $16, $e5, $2e, $2d, $eb, $29, $bc, $f9, $d1, $e1, $7b, $18, $d2
	byte	$2d, $ec, $12, $47, $03, $22, $15, $1e, $1c, $c5, $4e, $f5, $db, $81, $d5, $04
	byte	$90, $e5, $0c, $de, $49, $9d, $ff, $18, $2a, $17, $38, $ea, $9a, $18, $f3, $c4
	byte	$66, $3a, $ee, $4a, $e3, $0a, $46, $da, $81, $b4, $92, $cc, $06, $0d, $f4, $3b
	byte	$ef, $e4, $d6, $b3, $fa, $e4, $d3, $80, $b0, $23, $3a, $af, $63, $ea, $14, $45
	byte	$4c, $c4, $20, $80, $52, $34, $11, $f4, $c9, $80, $e2, $fc, $4b, $f1, $fe, $d6
	byte	$88, $0e, $22, $1a, $24, $f0, $fe, $e6, $ba, $38, $f9, $14, $cf, $2f, $c5, $28
	byte	$17, $da, $21, $80, $cc, $dc, $f4, $2c, $c1, $0e, $06, $f3, $41, $8c, $b0, $20
	byte	$01, $0f, $16, $ce, $8d, $c2, $d2, $89, $29, $4a, $25, $08, $32, $f6, $c9, $09
	byte	$25, $11, $2f, $1f, $e7, $2c, $11, $89, $23, $2c, $9e, $64, $24, $84, $e6, $0a
	byte	$f4, $e9, $2f, $e5, $f3, $9e, $fa, $2c, $d6, $6b, $f5, $09, $2b, $df, $e0, $e1
	byte	$50, $05, $50, $03, $e8, $fc, $12, $82, $3d, $2c, $de, $05, $2a, $ad, $e3, $cd
	byte	$2d, $d4, $51, $fc, $e5, $12, $1c, $f5, $71, $1d, $f8, $5b, $3c, $c0, $3e, $14
	byte	$0b, $d2, $5f, $94, $bb, $fa, $a5, $cf, $ff, $de, $e6, $22, $cd, $e9, $0b, $0b
	byte	$03, $46, $67, $1b, $32, $2d, $e3, $d3, $15, $e6, $c4, $12, $da, $d1, $b3, $65
	byte	$e2, $c6, $4e, $ed, $38, $03, $f2, $44, $fd, $ef, $44, $08, $c7, $22, $bf, $31
	byte	$db, $b9, $f5, $a3, $27, $18, $d3, $d9, $c4, $2b, $1c, $db, $38, $4d, $fd, $41
	byte	$ec, $16, $df, $57, $16, $21, $f2, $20, $23, $24, $1c, $f3, $23, $c1, $fb, $47
	byte	$9e, $21, $ff, $4c, $cc, $20, $df, $aa, $1f, $e4, $3d, $23, $29, $f4, $3f, $c1
	byte	$ed, $41, $c2, $06, $d1, $20, $ea, $eb, $c2, $03, $f6, $d0, $39, $ab, $ea, $d9
	byte	$80, $1c, $2d, $49, $f3, $02, $31, $f3, $cf, $e0, $ee, $d8, $11, $e0, $c9, $ef
	byte	$27, $d5, $49, $0d, $cc, $1c, $4e, $ee, $c0, $41, $e1, $11, $e9, $f6, $02, $e3
	byte	$c5, $e6, $05, $b7, $2a, $f3, $d2, $22, $0c, $f8, $12, $f4, $ef, $e1, $3a, $de
	byte	$19, $f6, $03, $16, $1a, $e8, $14, $53, $b4, $fd, $fc, $0b, $e9, $f8, $00, $f2
	byte	$10, $02, $3e, $d1, $c9, $27, $b0, $e3, $dd, $06, $1b, $11, $3d, $1b, $20, $e1
	byte	$49, $04, $0b, $01, $34, $f1, $fb, $33, $f1, $b0, $15, $17, $ca, $10, $e6, $40
	byte	$f0, $fb, $dd, $24, $00, $31, $3b, $34, $f2, $f8, $45, $ea, $fe, $1f, $19, $dd
	byte	$24, $13, $dc, $e3, $0f, $fe, $07, $2c, $b8, $fb, $db, $e9, $1a, $2c, $e8, $23
	byte	$f9, $c8, $d9, $e0, $f5, $dc, $28, $08, $0b, $ee, $dc, $17, $b9, $19, $08, $06
	byte	$f3, $df, $30, $09, $14, $28, $38, $0d, $ed, $f7, $e9, $e2, $06, $dd, $12, $cf
	byte	$e3, $f3, $13, $ea, $0f, $d9, $07, $16, $07, $bc, $f6, $05, $18, $22, $01, $17
	byte	$01, $28, $d7, $ff, $0a, $a9, $4b, $07, $eb, $00, $18, $ed, $fb, $19, $0d, $0e
	byte	$ea, $fc, $30, $fc, $33, $01, $0f, $16, $d7, $36, $e6, $fc, $db, $1c, $e4, $2f
	byte	$f7, $f9, $db, $0b, $17, $eb, $fe, $ee, $01, $e0, $f3, $11, $ed, $1f, $06, $07
	byte	$11, $14, $eb, $22, $e3, $ed, $1c, $f9, $e0, $11, $0a, $06, $ea, $0a, $dc, $d1
	byte	$ff, $07, $06, $16, $cf, $0d, $15, $0a, $22, $22, $fe, $1f, $19, $15, $f3, $36
	byte	$0d, $05, $f6, $0b, $fc, $e6, $0b, $ff, $12, $e4, $fa, $f1, $d6, $f6, $0d, $10
	byte	$f3, $22, $07, $11, $ec, $1c, $1f, $f5, $40, $e8, $45, $f1, $f1, $0d, $ea, $f4
	byte	$05, $e4, $d2, $39, $eb, $04, $04, $ff, $07, $01, $f2, $09, $36, $fd, $00, $fe
	byte	$09, $c2, $46, $f8, $e8, $02, $c4, $09, $f0, $f2, $0b, $cb, $06, $ef, $24, $cf
	byte	$06, $0b, $18, $12, $04, $09, $e2, $0d, $f5, $23, $d7, $d7, $1e, $c8, $d8, $0f
	byte	$d8, $fc, $fe, $01, $1b, $05, $d9, $0d, $e8, $18, $23, $18, $16, $0a, $0d, $ec
	byte	$01, $f7, $1c, $06, $fa, $03, $05, $ef, $e0, $2d, $e4, $ed, $05, $f5, $ef, $11
	byte	$01, $05, $23, $18, $25, $08, $f5, $04, $09, $f8, $0c, $23, $e4, $00, $e4, $f2
	byte	$08, $e2, $12, $13, $06, $f4, $06, $fb, $f2, $18, $07, $19, $02, $26, $fd, $09
	byte	$0e, $33, $07, $f5, $f6, $ed, $08, $ec, $f0, $ec, $01, $f4, $ef, $fe, $dd, $e5
	byte	$0b, $e0, $ef, $1f, $e8, $d8, $1c, $f1, $0a, $06, $0a, $16, $0b, $12, $fd, $08
	byte	$0e, $16, $11, $0c, $fa, $01, $15, $f1, $f0, $0e, $17, $dd, $ee, $f1, $f8, $f0
	byte	$08, $16, $0a, $12, $f0, $0b, $02, $0e, $11, $f3, $08, $14, $00, $f3, $0a, $00
	byte	$1e, $05, $fa, $18, $f3, $f8, $f7, $1a, $ed, $19, $1d, $e7, $17, $f7, $f4, $f9
	byte	$0c, $f5, $fd, $07, $dc, $0d, $ff, $fe, $00, $00, $10, $e3, $05, $f4, $fa, $0a
	byte	$02, $f9, $ff, $0b, $f8, $02, $d9, $22, $08, $ec, $ff, $00, $f5, $f3, $08, $ed
	byte	$16, $f9, $fa, $02, $00, $fb, $f1, $0e, $e5, $06, $0b, $f9, $1b, $fe, $fb, $ed
	byte	$1c, $f2, $1c, $ff, $0f, $04, $fc, $fc, $f4, $0a, $e9, $10, $ff, $fd, $fd, $fc
	byte	$09, $f0, $15, $04, $0e, $ed, $0c, $f4, $02, $12, $f0, $f9, $06, $13, $fc, $00
	byte	$0b, $f7, $1f, $f6, $0b, $02, $03, $f3, $02, $06, $03, $0e, $00, $18, $01, $f9
	byte	$f8, $f7, $ff, $00, $0f, $e4, $1a, $f2, $03, $f4, $01, $12, $0c, $f7, $f7, $0c
	byte	$fb, $0a, $0d, $00, $10, $f3, $0e, $f2, $08, $01, $f8, $f5, $00, $fa, $06, $f6
	byte	$ee, $16, $f7, $02, $00, $f5, $0b, $f0, $fb, $11, $ee, $1a, $00, $0f, $05, $12
	byte	$eb, $0c, $02, $09, $0c, $f8, $ec, $08, $fe, $fb, $0e, $f9, $fd, $f8, $fa, $09
	byte	$f0, $ff, $00, $01, $eb, $1f, $07, $f1, $0d, $0b, $11, $fd, $04, $01, $09, $02
	byte	$ee, $0d, $09, $e8, $06, $0b, $f2, $03, $0a, $f6, $0a, $08, $00, $00, $f7, $09
	byte	$05, $e7, $04, $fd, $f3, $fe, $00, $f8, $06, $fe, $fc, $09, $01, $06, $09, $09
	byte	$f1, $1c, $05, $00, $02, $16, $04, $ee, $0d, $0d, $05, $fc, $fc, $06, $f4, $07
	byte	$fe, $f9, $02, $07, $f0, $f7, $f9, $f5, $0e, $fb, $09, $17, $f9, $f4, $15, $04
	byte	$fc, $08, $fd, $ff, $fd, $fe, $05, $10, $ed, $0a, $0f, $f2, $06, $fe, $f5, $f6
	byte	$01, $f9, $ff, $fc, $ff, $07, $10, $f9, $09, $0c, $00, $06, $08, $f8, $0d, $07
	byte	$03, $f7, $0e, $fb, $04, $f0, $fb, $fe, $f4, $f0, $fe, $06, $04, $fe, $06, $fa
	byte	$03, $0d, $03, $f7, $06, $fc, $04, $00, $f6, $f7, $0a, $f6, $03, $08, $f3, $f8
	byte	$0a, $05, $04, $09, $04, $fa, $15, $0d, $fc, $0b, $05, $01, $09, $f5, $fa, $0b
	byte	$fd, $e9, $fb, $07, $ec, $fa, $05, $fa, $00, $fe, $f9, $fd, $fe, $0a, $08, $fc
	byte	$07, $00, $0c, $f8, $05, $05, $04, $02, $0e, $0d, $01, $09, $fc, $07, $fb, $f9
	byte	$0a, $f6, $fa, $fd, $f7, $f9, $fd, $0e, $f4, $fd, $fb, $05, $fc, $fc, $ff, $05
	byte	$02, $05, $07, $0d, $01, $04, $12, $ff, $03, $0b, $fa, $02, $ff, $fe, $fc, $f2
	byte	$ff, $fe, $01, $ee, $fb, $fb, $fe, $fd, $06, $01, $f2, $03, $06, $fd, $0e, $08
	byte	$02, $02, $04, $06, $02, $fd, $06, $06, $05, $fa, $04, $0a, $fd, $02, $01, $ff
	byte	$ef, $0a, $fe, $f7, $07, $f9, $fc, $06, $fe, $06, $00, $f9, $fe, $06, $fc, $ff
	byte	$09, $08, $01, $0c, $07, $f4, $07, $0b, $04, $ff, $05, $fd, $09, $fb, $f9, $07
	byte	$fb, $fa, $0d, $fa, $fb, $03, $fe, $fd, $0e, $fc, $0c, $ff, $fd, $0f, $06, $f9
	byte	$ff, $07, $fd, $00, $01, $06, $ff, $04, $01, $02, $09, $fe, $00, $04, $01, $fb
	byte	$00, $fb, $00, $06, $fe, $fe, $f9, $01, $00, $f3, $08, $ff, $f4, $08, $ff, $04
	byte	$07, $fe, $07, $0c, $02, $f9, $05, $f9, $ff, $0a, $04, $fc, $02, $fc, $02, $fc
	byte	$04, $03, $04, $fd, $05, $fe, $f6, $01, $02, $fc, $03, $03, $fb, $f5, $05, $fb
	byte	$03, $02, $f6, $05, $04, $f9, $09, $04, $00, $06, $06, $06, $03, $f6, $05, $fd
	byte	$02, $04, $01, $ff, $05, $00, $fc, $fe, $f0, $0b, $01, $f9, $0b, $fd, $fb, $01
	byte	$0b, $fc, $05, $09, $ff, $05, $00, $fc, $0a, $04, $00, $06, $02, $f2, $05, $01
	byte	$fc, $03, $04, $f7, $ff, $02, $fc, $00, $fd, $02, $0c, $02, $fc, $05, $01, $fd
	byte	$06, $00, $07, $fd, $02, $01, $ff, $02, $01, $01, $f7, $04, $05, $fc, $fb, $0a
	byte	$08, $ff, $02, $fc, $02, $fd, $01, $fd, $fd, $fe, $ff, $00, $fe, $00, $fb, $02
	byte	$fe, $00, $0a, $00, $f8, $0d, $03, $fe, $05, $06, $02, $04, $00, $00, $fe, $ff
	byte	$fe, $fe, $fb, $fb, $03, $f9, $fc, $0a, $01, $f9, $03, $ff, $04, $fe, $f9, $00
	byte	$05, $01, $08, $03, $fc, $03, $06, $f9, $01, $04, $fb, $fe, $00, $01, $04, $fb
	byte	$f9, $06, $02, $f6, $f9, $01, $00, $fe, $fa, $fd, $fc, $03, $06, $03, $ff, $04
	byte	$ff, $fd, $02, $09, $fc, $04, $03, $00, $09, $02, $ff, $08, $00, $fe, $08, $fc
	byte	$fa, $08, $fa, $f9, $08, $f8, $03, $00, $f6, $07, $02, $f7, $02, $06, $fc, $02
	byte	$04, $ff, $0d, $05, $00, $04, $05, $06, $08, $02, $01, $04, $0a, $ff, $01, $06
	byte	$fd, $02, $fd, $ff, $ff, $ff, $02, $02, $fc, $ff, $ff, $fa, $01, $08, $fe, $00
	byte	$01, $00, $09, $02, $03, $08, $01, $05, $01, $03, $04, $01, $01, $01, $05, $01
	byte	$03, $f8, $fc, $05, $fa, $fd, $fd, $00, $02, $fd, $ff, $ff, $03, $02, $03, $05
	byte	$01, $fe, $03, $01, $01, $03, $02, $ff, $02, $03, $fd, $00, $fc, $03, $03, $f9
	byte	$03, $02, $fe, $06, $fc, $00, $03, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[94]
	byte	$ff, $00, $df, $78, $80, $70, $00, $ff, $c0, $ff, $bf, $00, $bf, $3f, $00, $bf
	byte	$ff, $60, $87, $60, $df, $40, $bf, $c1, $3f, $81, $df, $6e, $00, $bf, $3f, $40
	byte	$81, $7f, $60, $80, $7f, $80, $bf, $6f, $00, $8f, $7c, $80, $ff, $60, $83, $7c
	byte	$1e, $80, $bf, $40, $81, $7f, $00, $80, $ff, $00, $9f, $07, $00, $30, $bf, $40
	byte	$ff, $20, $af, $ff, $40, $bf, $34, $7c, $87, $7c, $ff, $c0, $ff, $ff, $e0, $ff
	byte	$2f, $00, $bf, $ff, $60, $83, $3f, $c0, $bf, $40, $9f, $40, $87, $ff, $60, $c7
	byte	$80, $ff, $00, $ff, $07, $60, $87, $60, $9f, $fe, $ff, $20, $df, $df, $2c, $1f
	byte	$81, $ff, $78, $80, $30, $0f, $20, $c0, $ff, $00, $ff, $c0, $7c, $9f, $df, $7f
	byte	$80, $fe, $ff, $40, $8f, $78, $80, $bf, $00, $bf, $bf, $7c, $80, $ff, $c0, $bf
	byte	$70, $87, $e0, $bf, $40, $8b, $5f, $00, $df, $07, $60, $83, $3f, $4a, $81, $ff
	byte	$03, $00, $20, $83, $df, $78, $80, $ff, $00, $40, $bf, $60, $83, $7c, $9f, $fe
	byte	$8f, $7e, $80, $ff, $00, $bf, $78, $b3, $1f, $7c, $80, $ff, $60, $87, $7e, $ef
	byte	$00, $bf, $07, $40, $87, $ff, $40, $81, $ff, $40, $9f, $20, $ff, $bf, $70, $9f
	byte	$1f, $38, $8f, $78, $c0, $bf, $40, $3f, $80, $7f, $00, $bf, $50, $3f, $40, $af
	byte	$40, $ff, $00, $ff, $00, $80, $3f, $40, $00, $87, $60, $9f, $00, $bf, $00, $40
	byte	$81, $3f, $60, $83, $7e, $00, $87, $7f, $00, $8f, $50, $ff, $c0, $bf, $e0, $ff
	byte	$00, $bf, $40, $8f, $5e, $bf, $00, $87, $7c, $bf, $ff, $c3, $3f, $80, $9f, $40
	byte	$df, $40, $bf, $60, $87, $7f, $80, $ff, $c0, $ff, $40, $83, $ff, $40, $87, $32
	byte	$8f, $3e, $bf, $3e, $00, $9f, $60, $9f, $00, $bf, $7e, $00, $f8, $ff, $60, $9f
	byte	$40, $00, $ff, $20, $00, $9f, $50, $bf, $70, $00, $8f, $7e, $c0, $ff, $60, $a0
	byte	$ff, $ff, $38, $ee, $df, $fe, $9f, $78, $ff, $60, $9f, $60, $00, $bf, $10, $bf
	byte	$20, $bf, $40, $3c, $c0, $ff, $34, $c0, $ff, $2f, $00, $a1, $3f, $00, $9f, $40
	byte	$00, $ff, $00, $df, $60, $a0, $3e, $00, $00, $8f, $70, $80, $40, $9f, $00, $9f
	byte	$57, $00, $bf, $00, $5f, $00, $bb, $78, $80, $ff, $03, $00, $38, $9f, $78, $81
	byte	$60, $87, $50, $c0, $bf, $70, $81, $78, $a7, $00, $9f, $58, $a1, $3c, $00, $cf
	byte	$ff, $20, $bf, $40, $cf, $00, $1f, $00, $ff, $40, $ff, $e0, $ff, $20, $83, $ff
	byte	$00, $bf, $1f, $00, $bf, $a7, $ff, $87, $ff, $c0, $bf, $00, $af, $00, $ff, $c0
	byte	$00, $20, $a7, $78, $c0, $bf, $40, $bf, $20, $bf, $3f, $00, $bf, $40, $ff, $00
	byte	$3f, $00, $ff, $24, $e3, $ff, $d7, $70, $bf, $40, $bf, $20, $70, $81, $3f, $00
	byte	$9f, $58, $bf, $83, $ff, $00, $bf, $40, $bf, $60, $8f, $5e, $e0, $ff, $00, $ff
	byte	$40, $af, $ff, $c0, $ff, $40, $bf, $40, $8f, $7c, $8f, $3c, $c3, $50, $c7, $00
	byte	$f7, $20, $f7, $08, $d0, $ff, $40, $e0, $bf, $20, $ff, $60, $83, $60, $00, $ff
	byte	$00, $ff, $00, $78, $e0, $e4, $3c, $1f, $e0, $bf, $40, $cb, $40, $c0, $bf, $40
	byte	$af, $ff, $38, $95, $3f, $00, $f0, $ff, $00, $18, $f0, $e9, $3f, $00, $df, $40
	byte	$8f, $40, $bf, $40, $8f, $70, $c0, $10, $e3, $60, $81, $20, $1f, $00, $ff, $83
	byte	$17, $03, $00, $20, $97, $40, $ff, $40, $20, $c3, $70, $c0, $ff, $30, $ff, $10
	byte	$2f, $00, $f6, $ff, $20, $fe, $df, $18, $ff, $c0, $bf, $20, $af, $00, $ef, $e9
	byte	$e0, $ff, $80, $ff, $ff, $df, $3c, $8f, $20, $bf, $40, $bf, $20, $ff, $60, $df
	byte	$40, $bf, $33, $20, $87, $5f, $00, $ff, $df, $00, $ff, $00, $00, $8f, $40, $9f
	byte	$10, $bf, $fd, $f8, $f7, $d7, $fc, $0f, $20, $9f, $18, $ff, $00, $ff, $af, $5e
	byte	$c0, $ff, $00, $bf, $40, $ac, $ff, $00, $70, $e0, $e0, $ff, $40, $d7, $ff, $df
	byte	$eb, $3f, $00, $bf, $03, $3e, $bf, $ff, $f7, $ff, $1f, $c7, $ff, $17, $00, $ff
	byte	$f0, $ff, $03, $30, $9b, $ff, $00, $ef, $00, $9f, $40, $c1, $ff, $83, $70, $83
	byte	$60, $87, $3f, $e0, $df, $30, $e0, $ff, $10, $df, $20, $2c, $00, $ff, $00, $ff
	byte	$10, $9f, $7c, $81, $3f, $00, $df, $30, $bf, $70, $9f, $10, $3e, $9f, $70, $9f
	byte	$60, $c0, $ff, $00, $bf, $ff, $30, $c0, $ff, $00, $3c, $00, $ff, $40, $c0, $ff
	byte	$40, $af, $01, $1f, $00, $ff, $10, $df, $60, $a7, $00, $1f, $00, $cf, $58, $84
	byte	$ff, $20, $bf, $ff, $3b, $00, $ff, $ff, $00, $50, $00, $40, $cf, $40, $ff, $00
	byte	$bf, $38, $ff, $20, $bf, $40, $ff, $18, $e0, $ff, $40, $bf, $40, $d7, $4c, $97
	byte	$ff, $00, $ff, $10, $df, $09, $10, $cb, $1f, $87, $3f, $c0, $bf, $20, $08, $ff
	byte	$50, $8b, $70, $00, $ff, $c0, $ff, $00, $bf, $00, $e7, $28, $af, $00, $bf, $28
	byte	$db, $ff, $00, $bf, $24, $00, $cf, $40, $bf, $00, $bf, $30, $00, $df, $00, $ff
	byte	$00, $ff, $cf, $3f, $af, $38, $ef, $c7, $3f, $bf, $d1, $ff, $00, $bf, $00, $bf
	byte	$20, $ff, $df, $38, $bf, $20, $fe, $af, $38, $20, $d7, $e0, $ff, $20, $00, $df
	byte	$36, $f7, $00, $ff, $20, $ff, $28, $e0, $e8, $3f, $40, $9f, $3e, $00, $ef, $40
	byte	$87, $40, $ff, $00, $df, $ff, $f5, $38, $c0, $bf, $78, $af, $3c, $df, $60, $c3
	byte	$40, $ef, $00, $38, $00, $ea, $3e, $10, $50, $bf, $40, $ff, $20, $10, $df, $18
	byte	$1c, $df, $f8, $ff, $20, $00, $9f, $3f, $c0, $fe, $c9, $60, $af, $60, $a3, $ff
	byte	$00, $bf, $00, $1c, $df, $28, $08, $bf, $1f, $20, $9f, $60, $87, $3f, $40, $bf
	byte	$40, $ef, $00, $df, $00, $bf, $70, $a0, $3c, $c0, $38, $c1, $48, $83, $3f, $ef
	byte	$c1, $ff, $00, $df, $40, $bb, $60, $87, $78, $83, $ff, $10, $10, $ef, $50, $00
	byte	$df, $28, $e8, $2c, $00, $24, $00, $f7, $ff, $17, $c8, $df, $1f, $00, $ff, $00
	byte	$ff, $9f, $3c, $df, $ff, $00, $ef, $08, $df, $3e, $00, $ff, $40, $df, $01, $17
	byte	$20, $c0, $3f, $20, $df, $00, $1f, $00, $00, $bf, $3f, $40, $cf, $30, $90, $ff
	byte	$40, $e8, $c5, $2f, $00, $ff, $00, $ff, $00, $00, $9f, $5c, $c1, $ff, $00, $bf
	byte	$40, $ff, $00, $df, $08, $ff, $db, $3e, $e0, $ff, $00, $ff, $34, $bf, $5c, $c0
	byte	$ff, $0a, $07, $00, $db, $df, $3e, $c0, $ff, $28, $e0, $9f, $70, $c0, $3f, $00
	byte	$bf, $40, $bf, $70, $c1, $20, $ff, $40, $30, $00, $40, $ef, $f8, $28, $f9, $ff
	byte	$00, $df, $c0, $bf, $20, $00, $9f, $20, $fa, $e0, $ff, $00, $ff, $00, $ff, $00
	byte	$9f, $3f, $e0, $ff, $ff, $60, $00, $ff, $40, $bf, $78, $c1, $60, $00, $1f, $00
	byte	$fb, $ff, $1c, $ef, $f0, $ff, $20, $ee, $e0, $f7, $00, $bf, $20, $cf, $c1, $2f
	byte	$00, $00, $df, $20, $df, $00, $1f, $00, $ff, $40, $c7, $58, $c7, $1f, $20, $bf
	byte	$60, $c7, $40, $bf, $ff, $60, $8f, $60, $af, $40, $87, $28, $ff, $00, $ff, $af
	byte	$ff, $df, $30, $af, $38, $00, $5e, $00, $ff, $40, $b1, $50, $00, $10, $2a, $00
	byte	$c7, $3e, $af, $3f, $00, $ff, $10, $00, $cf, $20, $e7, $00, $ff, $40, $9f, $20
	byte	$df, $20, $bf, $40, $00, $3f, $c0, $ff, $40, $bf, $40, $e3, $10, $e7, $ff, $f0
	byte	$ff, $20, $cf, $16, $bf, $5e, $9f, $3c, $ef, $e7, $3e, $9f, $3f, $00, $ff, $00
	byte	$ef, $1b, $20, $df, $00, $ff, $01, $20, $83, $ff, $00, $ff, $d0, $3f, $d0, $ff
	byte	$ff, $40, $e7, $26, $13, $00, $df, $00, $df, $00, $bf, $00, $bf, $40, $c3, $ff
	byte	$c0, $ff, $00, $e0, $bf, $40, $9f, $3c, $00, $cf, $1e, $00, $df, $2e, $bf, $3f
	byte	$d0, $ff, $17, $10, $0f, $20, $07, $00, $ff, $40, $ff, $00, $10, $00, $1e, $00
	byte	$ff, $00, $df, $ff, $d0, $bf, $00, $ff, $d0, $ff, $00, $1f, $00, $ff, $20, $df
	byte	$d7, $28, $bf, $3c, $bf, $38, $ff, $e0, $3f, $00, $ff, $20, $ff, $00, $1f, $00
	byte	$3f, $87, $3f, $00, $df, $20, $ff, $c0, $70, $81, $30, $c3, $1f, $00, $bf, $40
	byte	$df, $20, $bf, $40, $df, $00, $ff, $00, $ff, $30, $e1, $f8, $3f, $20, $ff, $00
	byte	$3f, $00, $df, $00, $ff, $50, $c1, $30, $00, $f7, $00, $ff, $00, $ff, $e0, $f8
	byte	$ff, $e0, $ff, $00, $ff, $40, $df, $40, $9f, $0b, $1f, $c9, $ff, $1f, $3c, $af
	byte	$3f, $c0, $3f, $00, $f4, $fe, $ff, $40, $a3, $60, $c1, $1f, $9f, $1f, $df, $28
	byte	$d5, $ff, $c0, $ff, $40, $9f, $30, $c0, $ff, $00, $df, $08, $ff, $c7, $ff, $00
	byte	$ff, $10, $ff, $0a, $df, $3f, $00, $bf, $40, $87, $ff, $00, $ff, $00, $ef, $00
	byte	$cf, $18, $0f, $c3, $df, $03, $00, $ef, $20, $bf, $30, $e0, $3f, $00, $df, $00
	byte	$14, $c7, $20, $bf, $00, $00, $87, $7c, $87, $ff, $00, $d7, $20, $ff, $00, $df
	byte	$28, $8f, $7e, $c0, $3f, $00, $ff, $00, $ff, $70, $b7, $20, $ef, $10, $3c, $00
	byte	$ff, $c3, $1f, $00, $bf, $30, $ff, $00, $bf, $60, $c3, $ff, $00, $af, $ff, $40
	byte	$c5, $df, $08, $ff, $18, $df, $30, $ff, $00, $ff, $40, $0f, $00, $ff, $10, $bf
	byte	$40, $ff, $af, $ff, $20, $ff, $00, $f8, $ff, $40, $af, $1f, $00, $df, $ff, $c0
	byte	$ff, $00, $c0, $ff, $40, $b7, $ff, $34, $00, $ff, $40, $bf, $60, $3c, $00, $ff
	byte	$00, $ff, $10, $f0, $cf, $3f, $00, $bf, $60, $83, $3f, $00, $ff, $40, $00, $bf
	byte	$30, $ff, $40, $df, $00, $60, $c0, $ff, $00, $df, $00, $ff, $c7, $5e, $a7, $ff
	byte	$c0, $ff, $00, $f0, $ff, $60, $8f, $40, $9f, $ff, $20, $d7, $20, $cf, $4c, $af
	byte	$ff, $ff, $00, $00, $fd, $f3, $40, $a3, $1f, $07, $c0, $3f, $00, $bf, $00, $bf
	byte	$00, $ff, $00, $ff, $40, $df, $28, $d7, $ff, $1e, $c0, $ff, $60, $bf, $30, $0f
	byte	$00, $bf, $40, $bf, $20, $ef, $30, $e0, $1f, $00, $df, $00, $ff, $28, $18, $c0
	byte	$ff, $00, $ff, $1e, $00, $ff, $1f, $e2, $ff, $bf, $3c, $9f, $3c, $00, $20, $c0
	byte	$3f, $00, $ff, $cf, $34, $af, $3c, $d7, $38, $cb, $50, $c0, $ff, $48, $00, $ef
	byte	$40, $af, $3f, $00, $bf, $78, $8f, $ff, $c0, $ff, $3a, $00, $bf, $30, $e7, $1f
	byte	$e0, $bf, $20, $ff, $f0, $10, $ff, $40, $9f, $40, $e3, $3f, $00, $bf, $1f, $48
	byte	$df, $10, $df, $40, $ff, $20, $ef, $50, $c3, $ef, $1f, $18, $00, $df, $20, $cf
	byte	$ff, $2e, $81, $bf, $40, $bf, $40, $8f, $60, $8f, $e0, $df, $00, $1f, $00, $d0
	byte	$ff, $03, $1f, $10, $df, $60, $00, $dd, $3f, $00, $ff, $00, $ff, $10, $04, $08
	byte	$00, $df, $28, $df, $08, $df, $20, $e0, $ff, $00, $bf, $28, $d3, $20, $c1, $17
	byte	$0f, $00, $af, $3e, $e0, $ff, $2f, $d0, $ff, $00, $ff, $22, $00, $1f, $cf, $3f
	byte	$e0, $ff, $00, $e0, $ef, $38, $00, $fa, $af, $ff, $00, $ff, $e0, $ff, $ff, $40
	byte	$9f, $60, $af, $40, $a7, $00, $af, $40, $9f, $ff, $40, $8f, $70, $8b, $ff, $40
	byte	$8f, $28, $c0, $ff, $40, $c8, $df, $40, $00, $ff, $80, $bf, $50, $bf, $df, $18
	byte	$ff, $20, $bf, $30, $ff, $40, $ff, $00, $ff, $40, $af, $38, $9f, $7c, $a1, $10
	byte	$07, $00, $af, $20, $cf, $28, $ef, $f8, $bf, $50, $cf, $40, $97, $70, $87, $40
	byte	$9f, $10, $ef, $28, $e0, $fe, $ff, $20, $ff, $00, $ff, $00, $cf, $3f, $00, $ff
	byte	$e0, $20, $00, $1f, $00, $ff, $00, $bf, $20, $00, $bf, $38, $d7, $f7, $34, $e0
	byte	$ff, $00, $08, $f0, $ff, $30, $bf, $20, $df, $1f, $00, $df, $10, $e0, $ef, $3c
	byte	$bf, $ff, $ef, $20, $ff, $00, $ff, $60, $af, $28, $00, $ef, $20, $e0, $ff, $ff
	byte	$10, $ef, $d3, $ff, $18, $c3, $ff, $00, $df, $20, $bf, $1f, $08, $ef, $17, $20
	byte	$df, $40, $e7, $fe, $ef, $38, $00, $f8, $ff, $40, $ef, $40, $8f, $6c, $9f, $3c
	byte	$af, $30, $ff, $40, $81, $3f, $00, $ff, $f0, $ff, $20, $e1, $f3, $ff, $12, $00
	byte	$f0, $df, $38, $f5, $15, $00, $bf, $10, $df, $00, $1c, $df, $00, $ff, $00, $ff
	byte	$10, $ff, $00, $df, $40, $c7, $ff, $08, $fb, $00, $10, $e0, $28, $c3, $ff, $07
	byte	$00, $ef, $00, $f8, $ff, $00, $15, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $40
	byte	$ff, $00, $df, $40, $cf, $f3, $ff, $df, $f4, $9f, $48, $9f, $3c, $df, $f8, $ff
	byte	$ff, $00, $bf, $20, $fe, $ff, $28, $cf, $58, $c1, $20, $fb, $20, $ef, $10, $e0
	byte	$ff, $20, $d7, $0a, $ef, $3c, $e0, $f7, $0f, $38, $c0, $3f, $00, $ff, $20, $df
	byte	$e0, $ff, $20, $ff, $20, $cf, $3f, $c0, $ff, $10, $10, $d9, $30, $c3, $2f, $00
	byte	$df, $cf, $ff, $c0, $ff, $c0, $ff, $01, $10, $c1, $3f, $00, $ff, $cf, $ff, $28
	byte	$00, $ff, $00, $ff, $20, $df, $20, $e7, $00, $bf, $2f, $ef, $3c, $c0, $ff, $00
	byte	$ff, $00, $1f, $c3, $ff, $30, $cb, $40, $a7, $ff, $ff, $10, $bf, $3e, $e0, $ef
	byte	$20, $d7, $fb, $40, $83, $3e, $df, $05, $10, $e7, $00, $ff, $40, $d7, $1c, $ef
	byte	$20, $cf, $30, $00, $1a, $00, $1f, $d0, $ff, $30, $e0, $ff, $20, $ff, $00, $1e
	byte	$d0, $ff, $00, $ff, $00, $ef, $18, $e0, $cf, $40, $cf, $0f, $00, $bf, $60, $af
	byte	$18, $df, $04, $ff, $20, $bf, $3f, $00, $ff, $c3, $ff, $20, $c0, $bf, $30, $f3
	byte	$ff, $00, $bf, $3c, $e9, $f0, $bf, $38, $00, $bf, $38, $d7, $10, $1e, $b0, $ff
	byte	$20, $ff, $00, $df, $ff, $40, $c7, $0c, $0f, $20, $cf, $ff, $f9, $38, $c7, $30
	byte	$c7, $2f, $c1, $ff, $cf, $2c, $df, $f4, $ef, $0b, $1e, $c8, $ff, $d9, $2c, $0a
	byte	$e0, $ff, $00, $ff, $00, $ff, $00, $bf, $00, $9f, $50, $df, $60, $c1, $28, $10
	byte	$ef, $18, $f4, $df, $3e, $e0, $20, $df, $70, $a7, $00, $f7, $40, $f7, $e0, $28
	byte	$e7, $10, $f0, $f7, $fd, $2e, $00, $d0, $ff, $40, $e0, $ef, $00, $ff, $00, $ff
	byte	$00, $d7, $1f, $00, $ef, $ff, $30, $cf, $30, $00, $ff, $00, $bf, $30, $00, $ef
	byte	$40, $c7, $ff, $30, $00, $e9, $ff, $1f, $00, $ff, $00, $ff, $00, $08, $c0, $ff
	byte	$00, $ff, $e0, $ff, $40, $c7, $00, $df, $00, $ff, $00, $bf, $60, $d7, $20, $d7
	byte	$13, $30, $d0, $1b, $00, $1f, $00, $04, $af, $3f, $00, $ff, $20, $cf, $3e, $e0
	byte	$ff, $00, $ff, $10, $e7, $ff, $e0, $ff, $00, $c7, $1f, $cf, $ff, $e0, $ff, $00
	byte	$0f, $00, $ef, $db, $ff, $40, $ab, $2d, $00, $ff, $0f, $00, $bf, $3e, $ef, $fc
	byte	$bf, $60, $c0, $f7, $f7, $20, $d0, $ff, $00, $ff, $20, $df, $e0, $ff, $20, $bf
	byte	$00, $bf, $3c, $00, $bf, $2c, $ed, $18, $ff, $20, $df, $60, $e8, $e7, $ff, $3f
	byte	$e0, $f0, $ff, $20, $f9, $f0, $c7, $1f, $00, $00, $c7, $ff, $20, $fe, $c0, $ff
	byte	$00, $ff, $00, $bf, $30, $00, $17, $00, $ff, $00, $ef, $df, $1f, $f7, $1c, $d0
	byte	$ff, $2c, $d0, $df, $1f, $cf, $ff, $e0, $bf, $00, $30, $cf, $18, $ff, $00, $df
	byte	$15, $00, $df, $70, $a1, $29, $07, $00, $ef, $eb, $10, $cf, $40, $af, $ff, $00
	byte	$ff, $00, $ef, $40, $cf, $3c, $00, $ff, $20, $ef, $00, $df, $08, $ff, $00, $bf
	byte	$20, $d5, $ff, $c7, $ff, $00, $ff, $00, $e7, $00, $f7, $10, $d0, $ff, $40, $cf
	byte	$08, $cf, $3f, $00, $ff, $20, $ff, $20, $fc, $c7, $2b, $00, $ff, $20, $ef, $20
	byte	$c7, $ff, $10, $df, $30, $d1, $ff, $d3, $ff, $f0, $ff, $00, $ff, $40, $bf, $3e
	byte	$d0, $ff, $40, $af, $3e, $cf, $2c, $bf, $50, $bf, $50, $d1, $2f, $c1, $ff, $00
	byte	$cf, $20, $00, $f0, $ff, $00, $df, $08, $df, $ff, $1a, $d7, $ff, $f0, $ff, $00
	byte	$07, $00, $df, $10, $df, $20, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $10, $df
	byte	$40, $c3, $ff, $00, $e7, $10, $f7, $00, $bf, $20, $ef, $00, $d1, $ff, $00, $f7
	byte	$00, $df, $30, $00, $ff, $00, $20, $00, $ff, $00, $ff, $f0, $fe, $eb, $28, $00
	byte	$cf, $1f, $df, $18, $1f, $c0, $ff, $00, $ff, $00, $ff, $00, $30, $81, $ff, $10
	byte	$cb, $30, $c0, $ff, $10, $e0, $ff, $08, $f8, $eb, $1e, $00, $ff, $08, $e0, $ff
	byte	$10, $1e, $e8, $fb, $ff, $18, $ff, $20, $bf, $10, $ff, $d0, $ff, $00, $ed, $ff
	byte	$f0, $e0, $ff, $10, $bf, $40, $e7, $20, $f8, $d1, $27, $00, $f0, $ef, $0f, $30
	byte	$e0, $f3, $ff, $40, $c3, $20, $f0, $f3, $20, $c1, $ff, $00, $fa, $ff, $00, $bf
	byte	$20, $d7, $df, $3c, $eb, $18, $00, $df, $40, $e0, $e7, $28, $e0, $ff, $10, $f7
	byte	$20, $00, $e7, $10, $1f, $20, $ff, $40, $df, $00, $f7, $1c, $e0, $ff, $00, $ff
	byte	$00, $00, $ef, $00, $ff, $e0, $ff, $00, $df, $20, $e0, $ff, $02, $07, $e7, $10
	byte	$bf, $48, $af, $ff, $20, $cf, $1f, $cf, $ff, $00, $ff, $00, $ef, $10, $df, $18
	byte	$e1, $1f, $00, $df, $00, $1f, $d0, $ff, $00, $ff, $40, $db, $ff, $18, $eb, $10
	byte	$f3, $00, $1f, $00, $df, $10, $08, $f7, $e0, $ff, $10, $df, $20, $c5, $fc, $ff
	byte	$00, $ec, $ef, $10, $e0, $ff, $d3, $ff, $00, $ff, $d0, $ff, $40, $df, $00, $ff
	byte	$20, $e0, $ff, $00, $ff, $00, $f8, $eb, $3f, $00, $ff, $00, $e7, $ff, $00, $9f
	byte	$50, $eb, $f0, $ef, $00, $10, $00, $ff, $00, $ff, $00, $ea, $df, $2e, $00, $ff
	byte	$00, $1c, $e0, $ff, $00, $df, $58, $00, $fd, $ff, $20, $df, $20, $c7, $00, $cf
	byte	$02, $ff, $c0, $ff, $00, $ff, $40, $cf, $1d, $00, $df, $20, $eb, $0f, $00, $cf
	byte	$ff, $40, $cf, $f0, $ff, $00, $ff, $00, $ff, $00, $ff, $e0, $20, $e3, $38, $00
	byte	$d1, $1f, $00, $f8, $c3, $1f, $d7, $ff, $e0, $ff, $20, $c7, $20, $bf, $3f, $20
	byte	$af, $40, $af, $3a, $00, $db, $ff, $07, $20, $bf, $3e, $bf, $38, $ef, $08, $ff
	byte	$20, $fc, $c5, $30, $e7, $50, $d1, $e0, $ff, $00, $bf, $10, $bf, $3e, $c0, $ff
	byte	$00, $df, $3c, $a0, $ff, $40, $cf, $10, $df, $14, $0f, $00, $ff, $2f, $00, $df
	byte	$00, $df, $40, $d0, $ff, $e3, $2f, $00, $ff, $20, $af, $1f, $00, $ef, $0f, $00
	byte	$bf, $10, $bf, $18, $00, $bf, $70, $c0, $ff, $00, $0f, $00, $ff, $20, $ff, $30
	byte	$ff, $60, $a7, $64, $c6, $ff, $20, $f4, $fb, $18, $08, $d0, $ff, $00, $ff, $00
	byte	$df, $00, $ff, $00, $f6, $e7, $16, $ef, $08, $bf, $20, $f0, $20, $c1, $3f, $00
	byte	$bf, $40, $e3, $f7, $1f, $00, $ff, $10, $04, $04, $ff, $00, $ff, $20, $ef, $00
	byte	$ff, $00, $ff, $00, $df, $00, $f7, $cf, $4e, $c0, $ff, $20, $df, $2e, $00, $0e
	byte	$e7, $ff, $0f, $00, $ff, $e0, $ff, $40, $9f, $40, $00, $c1, $ff, $00, $ff, $40
	byte	$bf, $1f, $10, $f7, $ec, $ef, $30, $00, $ff, $e4, $ef, $3f, $00, $9f, $3c, $20
	byte	$df, $12, $ef, $07, $28, $c3, $ff, $10, $1e, $e0, $ff, $20, $00, $cf, $30, $c3
	byte	$ff, $e0, $df, $20, $e1, $ff, $1c, $e0, $10, $0f, $00, $cf, $ff, $30, $00, $ff
	byte	$00, $9f, $3f, $20, $bf, $30, $df, $1c, $fa, $0f, $1e, $e0, $ff, $00, $ff, $e9
	byte	$08, $ec, $df, $3e, $c0, $df, $00, $f7, $e0, $bf, $30, $08, $e0, $ef, $0f, $40
	byte	$bf, $60, $c0, $38, $08, $00, $ff, $10, $ef, $ef, $ff, $00, $ff, $d7, $ff, $f5
	byte	$ff, $00, $c7, $3e, $df, $ee, $ff, $07, $00, $df, $c1, $1f, $00, $bf, $ff, $00
	byte	$ef, $e1, $ff, $30, $00, $e0, $ff, $60, $c7, $ff, $00, $df, $60, $c0, $ff, $00
	byte	$f0, $df, $20, $df, $38, $c0, $ef, $10, $04, $e0, $ef, $38, $c0, $20, $c7, $20
	byte	$cf, $ff, $ef, $07, $18, $00, $d0, $ff, $34, $e0, $ff, $20, $e7, $18, $00, $ff
	byte	$00, $df, $40, $cf, $20, $bf, $30, $bf, $30, $c7, $1f, $00, $ff, $10, $c3, $1f
	byte	$10, $d0, $ff, $20, $d8, $ff, $20, $c7, $2f, $00, $ff, $10, $18, $e0, $ff, $00
	byte	$1f, $00, $db, $3e, $00, $df, $10, $cf, $10, $ff, $00, $ff, $00, $df, $20, $c1
	byte	$ff, $e0, $ff, $00, $ff, $00, $eb, $ff, $20, $ff, $00, $ef, $20, $cf, $5c, $b7
	byte	$ff, $00, $08, $ef, $0e, $00, $df, $20, $d0, $ff, $00, $ef, $14, $00, $ef, $24
	byte	$00, $ff, $00, $df, $40, $c0, $ff, $40, $cf, $40, $c5, $ef, $2f, $00, $c7, $ff
	byte	$00, $ef, $00, $ff, $00, $df, $10, $df, $20, $00, $d0, $ff, $00, $ff, $00, $ef
	byte	$00, $ff, $10, $e7, $13, $20, $e0, $ff, $3e, $ca, $3e, $e0, $ff, $02, $00, $e3
	byte	$ef, $1c, $00, $ff, $00, $1f, $00, $df, $10, $df, $20, $e0, $ff, $00, $ef, $0f
	byte	$00, $ff, $d7, $ff, $00, $ff, $20, $d7, $10, $0f, $00, $bf, $20, $ff, $20, $db
	byte	$30, $00, $17, $00, $df, $38, $00, $f0, $df, $20, $cf, $ff, $e8, $ff, $10, $e7
	byte	$ff, $10, $14, $00, $ff, $00, $ef, $08, $ef, $04, $e0, $ff, $20, $bf, $40, $bf
	byte	$1e, $ff, $00, $ff, $20, $df, $19, $10, $bf, $60, $c3, $ff, $00, $ff, $00, $ff
	byte	$df, $38, $e0, $ff, $20, $bf, $48, $9f, $ff, $20, $e8, $f7, $0d, $0d, $00, $e7
	byte	$00, $ff, $00, $df, $f6, $ff, $10, $df, $20, $cf, $3f, $00, $bf, $20, $df, $20
	byte	$c7, $ff, $20, $d3, $ff, $01, $02, $ef, $00, $bf, $50, $bf, $30, $00, $04, $06
	byte	$f0, $1f, $00, $df, $00, $0f, $c7, $ff, $00, $ff, $d0, $ff, $e0, $ff, $00, $cf
	byte	$10, $f2, $10, $f9, $10, $cf, $40, $00, $ef, $3c, $00, $ff, $00, $ff, $20, $f7
	byte	$00, $e7, $3a, $10, $b0, $ff, $00, $ff, $00, $ff, $ff, $20, $bf, $ff, $0b, $00
	byte	$e0, $ef, $00, $ef, $20, $bf, $ff, $f1, $20, $f0, $e7, $28, $00, $ff, $00, $ff
	byte	$07, $12, $e8, $ff, $10, $00, $ff, $28, $d7, $30, $eb, $00, $ff, $00, $ff, $00
	byte	$ff, $00, $1f, $c0, $ff, $00, $eb, $1f, $00, $bf, $30, $c3, $ff, $00, $df, $10
	byte	$e1, $10, $ef, $20, $e7, $00, $ff, $20, $ef, $e7, $ff, $08, $1f, $e0, $ff, $60
	byte	$a7, $ff, $00, $ff, $40, $df, $20, $df, $1f, $00, $eb, $ff, $e8, $ff, $10, $c1
	byte	$ff, $10, $d3, $18, $e0, $ff, $10, $d0, $ff, $04, $fb, $fe, $ff, $df, $3f, $bf
	byte	$ff, $e0, $ff, $00, $ff, $00, $ff, $10, $df, $ff, $00, $ff, $00, $ff, $e0, $ff
	byte	$20, $bf, $2f, $00, $ff, $00, $bf, $40, $df, $20, $cf, $00, $f7, $00, $e0, $ef
	byte	$40, $bf, $28, $cf, $3e, $00, $ff, $00, $ff, $00, $bf, $00, $ff, $20, $eb, $20
	byte	$cf, $2f, $00, $fe, $df, $18, $00, $f7, $14, $af, $3f, $00, $df, $20, $df, $00
	byte	$ff, $e0, $df, $58, $c0, $ff, $00, $ef, $20, $df, $28, $01, $ff, $f0, $ff, $10
	byte	$ff, $40, $af, $60, $c7, $20, $c7, $ff, $10, $fe, $e0, $ff, $3c, $af, $ff, $e0
	byte	$ff, $00, $ef, $00, $ff, $20, $bf, $30, $00, $20, $c1, $26, $e1, $ff, $00, $e1
	byte	$ff, $10, $ff, $ee, $ff, $e0, $ff, $00, $df, $40, $cf, $20, $ef, $10, $bf, $50
	byte	$00, $bf, $30, $bf, $58, $c0, $ff, $08, $ff, $08, $ff, $00, $ef, $60, $8f, $3f
	byte	$00, $db, $17, $00, $ff, $f0, $ff, $00, $ff, $20, $cf, $20, $df, $00, $ff, $e3
	byte	$0f, $f7, $00, $00, $cf, $1f, $d0, $ff, $20, $df, $13, $00, $ff, $00, $ff, $e0
	byte	$ff, $00, $ef, $00, $bf, $30, $e0, $ff, $20, $bf, $ff, $00, $ff, $00, $e7, $ff
	byte	$23, $00, $bf, $38, $00, $ef, $00, $ef, $14, $00, $f7, $f6, $ff, $00, $1f, $e0
	byte	$df, $30, $e9, $ff, $10, $f0, $1f, $00, $ff, $00, $0f, $e7, $00, $bf, $3e, $c0
	byte	$ff, $00, $00, $ff, $f0, $ff, $00, $df, $ff, $10, $e3, $1a, $e0, $ff, $20, $00
	byte	$00, $f7, $1c, $00, $ff, $00, $ff, $00, $fc, $ff, $20, $db, $00, $07, $00, $ff
	byte	$00, $bf, $30, $cb, $ff, $00, $ef, $00, $df, $20, $ed, $f8, $f7, $20, $e0, $ff
	byte	$10, $ff, $20, $ef, $00, $cf, $2c, $df, $38, $b7, $3e, $00, $18, $c1, $ff, $08
	byte	$f0, $f7, $00, $0f, $d3, $ff, $e0, $ff, $20, $cb, $17, $00, $ef, $20, $df, $20
	byte	$ff, $00, $f7, $04, $df, $28, $e2, $ff, $00, $ff, $20, $bf, $28, $f7, $30, $c1
	byte	$1f, $00, $df, $30, $e0, $ff, $0d, $00, $c7, $2f, $e0, $f7, $10, $a7, $4f, $a7
	byte	$ff, $c8, $ff, $00, $e7, $e8, $1f, $00, $df, $00, $ff, $28, $00, $ef, $00, $ff
	byte	$20, $bf, $20, $ff, $40, $c3, $0a, $df, $3c, $e0, $df, $20, $e7, $eb, $ef, $0c
	byte	$e0, $ff, $00, $af, $3e, $c0, $ff, $02, $08, $df, $20, $cb, $2a, $00, $ff, $00
	byte	$fd, $ff, $20, $f7, $e0, $ff, $20, $ef, $00, $ff, $00, $ef, $16, $e8, $28, $e0
	byte	$22, $00, $ff, $08, $d0, $ff, $00, $df, $00, $df, $10, $fb, $ff, $00, $0f, $00
	byte	$ff, $ef, $16, $e6, $ff, $10, $e7, $ff, $12, $00, $ff, $10, $df, $18, $14, $dd
	byte	$ff, $ef, $38, $d3, $20, $e3, $20, $c7, $ff, $00, $ff, $12, $00, $df, $30, $ff
	byte	$00, $ff, $00, $ff, $00, $df, $18, $00, $ef, $00, $ef, $10, $ef, $f8, $ef, $17
	byte	$10, $d0, $df, $2a, $00, $ff, $e7, $1e, $00, $ff, $00, $ef, $1c, $10, $df, $10
	byte	$f7, $17, $ea, $f6, $ff, $30, $bf, $28, $00, $00, $e5, $ff, $14, $0f, $10, $cb
	byte	$ff, $2f, $20, $bf, $1c, $ef, $20, $fc, $f0, $ef, $10, $f3, $00, $ff, $00, $ff
	byte	$00, $df, $00, $1f, $c7, $ff, $00, $ff, $05, $f0, $ff, $20, $eb, $fc, $e7, $ff
	byte	$00, $e2, $ef, $1e, $00, $ff, $00, $1f, $00, $df, $00, $ff, $10, $f0, $ef, $28
	byte	$00, $f7, $00, $ef, $2a, $00, $df, $00, $ef, $00, $07, $e3, $16, $e7, $1f, $e8
	byte	$ff, $00, $f7, $f8, $f5, $ff, $00, $f3, $f3, $0b, $00, $ff, $00, $ff, $20, $df
	byte	$20, $ff, $f0, $ff, $00, $08, $00, $f0, $ff, $20, $df, $f1, $ff, $30, $d0, $ef
	byte	$20, $df, $10, $df, $ef, $3f, $00, $ff, $40, $df, $00, $ef, $00, $18, $e3, $fb
	byte	$f7, $0f, $ef, $ff, $d7, $ff, $00, $ff, $00, $ef, $10, $ff, $00, $df, $40, $d3
	byte	$0f, $e3, $ff, $10, $c1, $3f, $00, $ff, $00, $df, $0f, $1c, $d7, $ff, $00, $ff
	byte	$1c, $f0, $df, $18, $f3, $ff, $fb, $f7, $00, $f7, $00, $df, $14, $ef, $1c, $ef
	byte	$20, $ff, $20, $df, $20, $d7, $14, $00, $d3, $2f, $00, $df, $1b, $00, $bf, $3e
	byte	$e0, $ff, $00, $f7, $1f, $00, $cf, $12, $ff, $10, $cf, $ff, $00, $0f, $00, $ef
	byte	$08, $ff, $df, $ff, $00, $fe, $df, $1c, $ff, $10, $ff, $00, $df, $20, $e7, $e7
	byte	$ff, $0b, $10, $c3, $ff, $10, $ff, $00, $f4, $ff, $40, $c0, $ff, $0b, $10, $cf
	byte	$04, $df, $2c, $f0, $cf, $ff, $18, $00, $df, $df, $1f, $10, $c0, $df, $2e, $10
	byte	$d7, $fe, $ef, $1e, $e0, $df, $24, $e7, $ff, $e0, $ff, $20, $10, $c1, $3c, $00
	byte	$ff, $00, $ef, $20, $f1, $20, $c7, $ff, $17, $00, $cf, $1c, $df, $10, $f7, $e8
	byte	$ff, $00, $df, $20, $ff, $00, $ff, $00, $df, $18, $02, $df, $ff, $00, $ff, $20
	byte	$df, $1e, $00, $eb, $ff, $00, $ff, $20, $df, $20, $07, $00, $ef, $00, $bf, $3c
	byte	$c1, $ff, $20, $e0, $ef, $0f, $08, $d3, $2b, $00, $df, $08, $df, $0f, $00, $df
	byte	$f0, $ff, $20, $ed, $fa, $f8, $ff, $38, $e0, $ff, $ff, $10, $e7, $20, $d7, $1f
	byte	$08, $e3, $0f, $00, $ff, $00, $ef, $1f, $00, $df, $20, $ef, $f0, $ff, $fc, $ff
	byte	$1e, $00, $bf, $40, $00, $00, $df, $0c, $ff, $00, $df, $30, $f0, $e0, $ff, $00
	byte	$ff, $00, $cf, $10, $00, $0a, $00, $cf, $3f, $00, $ff, $20, $f7, $00, $ef, $05
	byte	$00, $ff, $00, $e7, $e1, $2f, $00, $ef, $f8, $ff, $10, $e7, $ff, $00, $ff, $10
	byte	$bf, $30, $d3, $ff, $00, $e0, $ff, $20, $c4, $ff, $00, $df, $14, $f0, $ff, $10
	byte	$cf, $18, $f7, $20, $f5, $f8, $ef, $30, $f7, $10, $df, $1a, $10, $d1, $17, $00
	byte	$1f, $c3, $ff, $00, $ff, $00, $df, $00, $13, $00, $ff, $08, $ef, $08, $e0, $ff
	byte	$20, $df, $10, $e3, $ff, $08, $ef, $08, $fa, $fb, $1e, $00, $ff, $e8, $ff, $0f
	byte	$10, $f7, $00, $f7, $10, $df, $1e, $df, $ff, $00, $ff, $00, $df, $2c, $e0, $ff
	byte	$00, $00, $d7, $20, $c3, $ff, $00, $ef, $08, $ef, $10, $cf, $1f, $df, $30, $bf
	byte	$38, $00, $00, $fe, $f7, $38, $00, $ff, $00, $ef, $00, $df, $00, $ff, $20, $e3
	byte	$f8, $ff, $20, $c7, $ff, $00, $ff, $00, $f7, $16, $00, $ff, $00, $f7, $16, $00
	byte	$e5, $ff, $10, $ef, $20, $e7, $13, $00, $ff, $00, $ff, $10, $e1, $10, $d7, $ff
	byte	$10, $f0, $e7, $18, $00, $ff, $00, $ef, $24, $bf, $ff, $00, $ff, $18, $d0, $ff
	byte	$20, $df, $00, $ef, $00, $ff, $00, $ff, $00, $ff, $00, $f7, $16, $00, $ff, $00
	byte	$df, $20, $00, $d3, $ff, $00, $df, $ff, $00, $10, $e0, $df, $1c, $00, $20, $c0
	byte	$1f, $00, $f5, $ff, $04, $f7, $ff, $f0, $ff, $2f, $00, $ff, $fb, $2f, $00, $ef
	byte	$00, $bf, $20, $cf, $18, $ef, $30, $00, $ff, $00, $ff, $00, $bf, $18, $00, $ff
	byte	$00, $df, $30, $d7, $10, $00, $f8, $08, $eb, $f8, $ff, $10, $ef, $00, $ef, $20
	byte	$df, $14, $ff, $10, $ef, $0f, $10, $ff, $00, $f7, $00, $ff, $20, $df, $10, $c7
	byte	$ff, $00, $ff, $00, $cf, $3c, $d4, $ff, $00, $ef, $08, $f3, $ff, $17, $00, $df
	byte	$28, $00, $ff, $20, $df, $30, $00, $f8, $fd, $04, $08, $ff, $00, $f7, $08, $f7
	byte	$00, $d7, $00, $ff, $00, $df, $ff, $00, $ef, $10, $df, $20, $df, $18, $f5, $10
	byte	$e3, $16, $e0, $ff, $20, $db, $20, $d7, $ff, $00, $ff, $08, $e7, $ff, $00, $ff
	byte	$f0, $ff, $00, $ff, $00, $1f, $00, $ef, $00, $ef, $28, $00, $ff, $08, $f7, $00
	byte	$f5, $ff, $19, $00, $cf, $20, $cf, $34, $cf, $ff, $00, $ff, $00, $04, $e7, $ff
	byte	$f0, $ff, $08, $fe, $f7, $10, $d7, $30, $00, $08, $cb, $17, $e7, $0f, $e7, $ff
	byte	$0b, $00, $ff, $ef, $0c, $07, $00, $ff, $18, $00, $10, $06, $00, $ff, $00, $0f
	byte	$00, $f1, $e3, $16, $e7, $ff, $00, $ef, $10, $db, $ff, $00, $ef, $00, $ef, $20
	byte	$00, $d1, $ff, $1e, $00, $ff, $10, $e2, $ff, $00, $0c, $f3, $30, $00, $ef, $00
	byte	$df, $28, $c9, $ff, $00, $df, $10, $00, $ff, $18, $e0, $ff, $00, $ef, $10, $cf
	byte	$ff, $00, $ff, $e5, $10, $e1, $17, $00, $ff, $00, $e9, $ff, $00, $df, $18, $f1
	byte	$00, $e7, $ff, $00, $ff, $00, $ff, $20, $ff, $00, $ff, $00, $df, $20, $eb, $ff
	byte	$10, $df, $0e, $ff, $1c, $e0, $ff, $1c, $df, $ff, $00, $f7, $10, $e0, $ff, $00
	byte	$ff, $e0, $14, $00, $ef, $18, $e4, $e7, $1f, $e7, $ff, $00, $ff, $00, $13, $00
	byte	$ff, $00, $ff, $00, $ef, $28, $00, $ef, $10, $e0, $2f, $00, $bf, $1c, $00, $df
	byte	$ff, $00, $ff, $00, $d7, $00, $df, $08, $ef, $00, $ff, $00, $ff, $00, $ff, $00
	byte	$10, $ef, $20, $ef, $00, $f7, $00, $00, $ff, $00, $d7, $1f, $00, $df, $ff, $00
	byte	$ff, $00, $eb, $05, $00, $f0, $20, $00, $ff, $00, $df, $0a, $07, $00, $f7, $10
	byte	$ff, $00, $ff, $00, $df, $28, $bf, $1c, $ff, $f8, $ff, $00, $ff, $00, $f7, $00
	byte	$ff, $00, $ff, $00, $ff, $10, $df, $30, $e7, $ff, $10, $d3, $ff, $00, $0d, $e7
	byte	$ff, $03, $04, $ef, $28, $df, $1c, $00, $ff, $10, $f0, $ff, $00, $fc, $f7, $08
	byte	$ff, $00, $df, $08, $ff, $03, $00, $cf, $2f, $e0, $ff, $00, $ef, $ff, $ed, $ff
	byte	$06, $f0, $ff, $f7, $0e, $0b, $00, $ff, $ff, $00, $0f, $00, $ef, $14, $fb, $10
	byte	$e9, $ff, $08, $df, $ff, $01, $04, $e3, $f4, $ef, $04, $07, $00, $df, $24, $00
	byte	$ff, $08, $00, $ff, $00, $ef, $20, $00, $e3, $ff, $00, $ff, $00, $ff, $00, $ff
	byte	$12, $e8, $ff, $20, $ef, $10, $f0, $ff, $10, $00, $ff, $fd, $f5, $16, $00, $ef
	byte	$00, $ff, $00, $ef, $ff, $18, $e0, $1e, $00, $ff, $00, $ef, $16, $00, $ef, $00
	byte	$fb, $04, $00, $ff, $00, $ff, $00, $ef, $e7, $1f, $00, $ff, $00, $ff, $10, $f0
	byte	$ef, $20, $00, $ff, $00, $ff, $10, $f8, $e0, $ff, $10, $10, $d3, $20, $00, $f7
	byte	$04, $fb, $10, $00, $f0, $ff, $08, $e3, $fe, $ef, $1c, $e0, $ff, $00, $ef, $1f
	byte	$00, $ef, $40, $cf, $02, $ff, $fb, $11, $e7, $ff, $ff, $0f, $00, $df, $06, $f7
	byte	$00, $ef, $00, $ff, $18, $f7, $00, $fe, $f7, $18, $e0, $ff, $00, $ff, $00, $df
	byte	$18, $00, $ef, $14, $f4, $fe, $f3, $ff, $0c, $ed, $ff, $08, $04, $fb, $00, $ff
	byte	$16, $f2, $ff, $f4, $ff, $10, $e3, $ff, $10, $ef, $20, $df, $10, $df, $04, $ef
	byte	$00, $ef, $10, $ef, $f9, $ff, $0f, $00, $df, $20, $00, $ff, $00, $f7, $18, $00
	byte	$ff, $0a, $00, $ff, $00, $df, $20, $df, $08, $fb, $10, $00, $e8, $ff, $00, $eb
	byte	$ff, $f0, $ff, $00, $f0, $ef, $20, $f3, $10, $c7, $1f, $00, $ff, $00, $ef, $0f
	byte	$10, $eb, $10, $e9, $0f, $00, $ef, $ff, $00, $ff, $00, $ff, $08, $ff, $f0, $ff
	byte	$00, $ff, $00, $ef, $07, $f0, $ef, $00, $ff, $00, $df, $16, $08, $d7, $1f, $00
	byte	$ff, $04, $0c, $00, $fe, $ff, $08, $ff, $00, $0e, $00, $fc, $eb, $20, $d1, $ff
	byte	$00, $f7, $0f, $00, $ff, $00, $fb, $f7, $00, $ef, $28, $e0, $ff, $20, $d7, $ff
	byte	$00, $08, $00, $ff, $00, $27, $c3, $ff, $00, $ff, $10, $e7, $0f, $00, $ff, $10
	byte	$d7, $1f, $00, $ff, $e7, $ff, $00, $f7, $12, $e8, $ff, $10, $f7, $00, $ff, $00
	byte	$17, $00, $ff, $0b, $00, $ef, $02, $00, $f7, $10, $d7, $17, $ef, $08, $df, $ff
	byte	$00, $f7, $fa, $ff, $10, $00, $ff, $08, $f6, $ff, $0b, $00, $ff, $00, $f1, $ff
	byte	$10, $ff, $f0, $ff, $10, $f8, $f7, $10, $ef, $20, $e3, $f8, $f7, $00, $ff, $00
	byte	$df, $38, $00, $ed, $fb, $10, $00, $00, $ef, $00, $ef, $0f, $00, $f7, $10, $f0
	byte	$ff, $00, $1e, $00, $df, $1f, $00, $ff, $00, $f7, $00, $08, $f1, $00, $e7, $18
	byte	$00, $e5, $ff, $18, $df, $f8, $ff, $30, $00, $df, $18, $f3, $10, $f3, $f8, $ff
	byte	$00, $e7, $f1, $0f, $10, $df, $ff, $00, $0f, $00, $df, $14, $ff, $f8, $ff, $00
	byte	$fb, $00, $ef, $14, $eb, $ff, $00, $df, $1f, $00, $ef, $08, $00, $fb, $f7, $00
	byte	$ef, $08, $ef, $fe, $e9, $20, $00, $ff, $00, $ff, $00, $f0, $ff, $20, $e0, $ff
	byte	$02, $00, $ff, $f0, $ff, $00, $ef, $00, $df, $1c, $00, $df, $1a, $ff, $04, $ef
	byte	$ff, $fb, $f4, $ff, $0a, $e1, $ff, $18, $f7, $08, $f7, $08, $e3, $ff, $20, $e0
	byte	$ff, $e3, $ff, $00, $ff, $ef, $14, $fb, $10, $d1, $ff, $08, $e8, $f0, $ff, $20
	byte	$00, $ef, $f7, $ff, $07, $08, $e0, $ff, $10, $ef, $08, $ef, $ff, $00, $ef, $10
	byte	$03, $00, $e7, $ff, $10, $f2, $ff, $00, $f7, $02, $10, $d3, $30, $00, $ff, $00
	byte	$ff, $10, $e3, $ef, $01, $08, $00, $e8, $ff, $08, $df, $10, $ff, $00, $ff, $d7
	byte	$ff, $f7, $18, $e0, $ff, $05, $00, $f7, $00, $df, $ff, $0b, $00, $f7, $ff, $07
	byte	$00, $df, $20, $d7, $ff, $e8, $ff, $10, $f1, $f5, $18, $00, $ff, $00, $ff, $08
	byte	$fe, $ef, $1e, $10, $00, $df, $1f, $00, $f7, $00, $0f, $00, $ff, $ef, $ff, $f0
	byte	$ff, $00, $df, $28, $f0, $fa, $ff, $10, $f7, $00, $ff, $00, $eb, $ff, $00, $f7
	byte	$13, $00, $ff, $e3, $ff, $10, $00, $ff, $20, $ef, $10, $fb, $05, $00, $fd, $00
	byte	$ff, $0f, $00, $df, $1f, $00, $ef, $00, $ff, $03, $00, $c7, $ff, $00, $fe, $ef
	byte	$00, $ff, $20, $ef, $10, $df, $22, $ee, $fd, $ff, $00, $ff, $00, $ff, $20, $ef
	byte	$00, $f7, $08, $f7, $f7, $ff, $08, $f0, $f7, $0c, $f8, $f4, $f7, $00, $ff, $f7
	byte	$08, $ef, $28, $e0, $ff, $08, $00, $f1, $f5, $17, $00, $ff, $00, $ef, $0c, $0a
	byte	$f0, $ff, $10, $cf, $1f, $00, $ff, $00, $ff, $00, $ff, $00, $00, $ef, $00, $e7
	byte	$10, $ef, $00, $ff, $00, $ff, $00, $ff, $10, $f7, $00, $ff, $10, $ff, $00, $ff
	byte	$28, $e7, $ef, $1c, $f0, $ff, $00, $ef, $00, $ef, $00, $df, $1c, $00, $e7, $0a
	byte	$f0, $ff, $10, $d7, $ff, $0f, $00, $ff, $00, $ff, $10, $f7, $00, $ff, $10, $f3
	byte	$f3, $0f, $10, $ef, $10, $e5, $1f, $00, $ef, $02, $ff, $ff, $00, $df, $30, $cf
	byte	$18, $ef, $20, $ef, $00, $ef, $10, $ff, $02, $f0, $ff, $10, $f2, $ff, $00, $ff
	byte	$00, $f7, $00, $ff, $00, $ef, $10, $f7, $10, $fd, $00, $f7, $0f, $00, $ed, $17
	byte	$00, $df, $18, $ff, $00, $f7, $00, $ff, $00, $ff, $00, $ef, $14, $e8, $ff, $10
	byte	$ef, $16, $ef, $10, $f3, $18, $e0, $0f, $00, $ff, $20, $e1, $fb, $f7, $04, $e7
	byte	$0f, $f0, $ff, $08, $d7, $ff, $ec, $ff, $f0, $ff, $10, $00, $ef, $10, $f7, $00
	byte	$ff, $f0, $18, $00, $ef, $10, $fb, $00, $ff, $0e, $00, $ff, $00, $0f, $f8, $ff
	byte	$f0, $ff, $00, $e7, $00, $ef, $00, $f7, $01, $f0, $df, $18, $00, $e7, $ff, $08
	byte	$00, $ff, $00, $ff, $08, $e9, $08, $00, $1f, $00, $df, $30, $e7, $0e, $00, $f7
	byte	$10, $ff, $00, $ff, $00, $f8, $ed, $10, $00, $f0, $ff, $00, $ff, $00, $e7, $fd
	byte	$02, $f3, $ff, $e8, $ff, $00, $ef, $14, $f0, $ff, $10, $e3, $17, $00, $ff, $00
	byte	$ff, $00, $ff, $00, $f7, $00, $ff, $00, $ef, $10, $f1, $ff, $08, $f0, $ff, $00
	byte	$ff, $00, $ef, $00, $ff, $10, $df, $00, $ff, $00, $df, $00, $ef, $10, $ef, $fe
	byte	$ff, $00, $ff, $20, $e3, $00, $ef, $10, $ff, $00, $ff, $18, $ef, $18, $f3, $00
	byte	$fd, $06, $00, $ff, $10, $d7, $ff, $10, $ef, $ff, $0a, $f2, $ff, $00, $ef, $0c
	byte	$ef, $04, $ff, $00, $ff, $00, $ef, $10, $ff, $00, $ef, $14, $f7, $ec, $ff, $10
	byte	$f7, $00, $eb, $06, $ef, $1c, $cf, $ff, $04, $f8, $ff, $10, $fb, $10, $e7, $ff
	byte	$18, $00, $f3, $ff, $06, $00, $f3, $00, $f1, $08, $00, $f9, $0b, $00, $df, $ff
	byte	$07, $00, $f0, $f7, $18, $00, $f7, $00, $ef, $12, $f3, $ff, $ff, $00, $ff, $00
	byte	$f7, $10, $f7, $10, $df, $14, $ef, $ff, $ff, $10, $ef, $08, $00, $f2, $ff, $02
	byte	$f0, $ff, $0c, $00, $ef, $18, $00, $ff, $04, $00, $fc, $e9, $ff, $00, $ef, $ff
	byte	$00, $ff, $08, $f7, $ff, $f0, $ff, $10, $ea, $ff, $10, $f3, $ff, $08, $ff, $00
	byte	$ff, $20, $d7, $ff, $10, $e1, $ff, $00, $ff, $10, $e1, $ff, $07, $00, $e7, $fc
	byte	$ff, $18, $e1, $ff, $00, $ff, $00, $df, $2c, $00, $df, $01, $ff, $00, $ff, $fb
	byte	$0c, $fe, $0e, $00, $ef, $16, $00, $ff, $00, $ff, $0f, $e8, $ff, $f8, $10, $00
	byte	$fb, $f8, $10, $00, $fe, $f7, $ff, $10, $e0, $ff, $20, $e8, $fc, $f1, $0f, $00
	byte	$ff, $f3, $ff, $ef, $0f, $f0, $ff, $00, $ff, $00, $ff, $00, $f7, $1c, $00, $ef
	byte	$0c, $f7, $18, $e8, $f7, $08, $fd, $f5, $ff, $00, $ff, $00, $ff, $f8, $fe, $fb
	byte	$00, $e7, $20, $d3, $ff, $00, $ff, $f0, $ff, $00, $f7, $08, $f7, $00, $ff, $00
	byte	$f7, $00, $f9, $0f, $00, $ef, $18, $00, $f7, $00, $00, $f7, $04, $e7, $ff, $00
	byte	$ff, $00, $f7, $ff, $00, $f7, $08, $ef, $ff, $ef, $1e, $e0, $ff, $0d, $08, $db
	byte	$ff, $00, $ff, $00, $e3, $17, $00, $ff, $ec, $ff, $10, $e7, $10, $e7, $0f, $00
	byte	$f4, $ef, $28, $d5, $ff, $00, $ef, $ff, $fc, $08, $f9, $ff, $04, $f2, $ff, $00
	byte	$fc, $fb, $05, $00, $ff, $e7, $ff, $00, $ef, $00, $f7, $ff, $00, $ff, $00, $f7
	byte	$10, $ef, $05, $0b, $00, $ef, $1c, $00, $08, $e3, $17, $00, $ff, $01, $00, $ef
	byte	$0c, $ef, $10, $fb, $00, $f7, $00, $0f, $00, $d7, $ff, $00, $fe, $f0, $ff, $10
	byte	$e8, $ff, $10, $ff, $00, $18, $00, $ef, $0c, $0f, $f0, $ff, $08, $fb, $10, $00
	byte	$ef, $0d, $00, $ff, $00, $fb, $04, $00, $f7, $ff, $00, $e7, $04, $f7, $00, $ef
	byte	$08, $f0, $ff, $09, $00, $f7, $ff, $04, $f0, $f7, $12, $00, $f3, $ff, $10, $ff
	byte	$10, $f3, $04, $0b, $00, $ef, $ff, $10, $e3, $ff, $f5, $ff, $00, $d7, $ff, $09
	byte	$00, $ef, $00, $ff, $00, $ff, $f0, $ff, $10, $f3, $f0, $ff, $00, $ff, $00, $ff
	byte	$00, $ff, $00, $ff, $00, $f7, $00, $ff, $08, $ef, $ff, $ff, $00, $ff, $00, $fb
	byte	$10, $ff, $00, $ff, $00, $02, $eb, $0a, $e7, $ff, $00, $f4, $ff, $18, $e0, $ff
	byte	$00, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $fa, $f3, $07, $00, $f7, $08, $00
	byte	$fa, $ff, $00, $ff, $10, $e7, $08, $ef, $14, $00, $ef, $0b, $f8, $fd, $ff, $00
	byte	$ef, $10, $00, $ff, $00, $ff, $f7, $ff, $00, $fd, $ff, $02, $fc, $08, $f0, $ff
	byte	$08, $f2, $f7, $1e, $ec, $ff, $e8, $ff, $00, $17, $00, $df, $0d, $04, $f0, $fb
	byte	$08, $f7, $00, $ef, $0e, $00, $ef, $10, $e7, $16, $ea, $ff, $08, $00, $f0, $ff
	byte	$00, $0b, $00, $ef, $0e, $00, $ef, $fb, $0f, $00, $df, $13, $00, $f7, $04, $f9
	byte	$f7, $0f, $00, $fb, $04, $00, $f5, $ff, $0c, $00, $ff, $00, $ff, $00, $f7, $ff
	byte	$00, $ff, $e0, $17, $00, $f7, $00, $f5, $fd, $ff, $10, $e0, $ef, $08, $fe, $f8
	byte	$f7, $00, $f7, $08, $ef, $ff, $03, $00, $ef, $10, $00, $ff, $00, $fb, $10, $00
	byte	$ef, $00, $ff, $00, $df, $18, $f0, $00, $f3, $0a, $ef, $ff, $00, $f7, $00, $fc
	byte	$f0, $ff, $06, $00, $ef, $00, $e7, $18, $f0, $fd, $ff, $00, $ff, $10, $e0, $ff
	byte	$18, $f2, $fc, $ff, $10, $e7, $ff, $00, $ff, $10, $e0, $ef, $0f, $00, $f3, $f0
	byte	$f7, $10, $00, $f7, $00, $f7, $0a, $f0, $f7, $0a, $f7, $fe, $f7, $ff, $00, $f8
	byte	$fb, $10, $03, $00, $e7, $ff, $10, $eb, $ff, $01, $0f, $00, $e3, $ff, $12, $00
	byte	$e3, $ff, $ff, $00, $ef, $08, $ef, $18, $eb, $fa, $0f, $00, $ff, $00, $ff, $00
	byte	$0a, $f1, $f7, $f7, $14, $f0, $ef, $0e, $00, $04, $00, $f3, $0f, $00, $ff, $00
	byte	$ff, $f9, $ff, $ff, $f8, $f7, $10, $eb, $ff, $00, $e5, $ff, $04, $fb, $f7, $ff
	byte	$00, $ff, $00, $ff, $00, $07, $00, $ff, $10, $ef, $ff, $f1, $00, $f7, $04, $00
	byte	$f8, $f7, $16, $00, $ff, $00, $f7, $0a, $ff, $f0, $ff, $08, $f7, $f7, $ff, $00
	byte	$ff, $00, $ff, $00, $ff, $00, $0f, $00, $ff, $20, $f3, $00, $ef, $0b, $00, $ff
	byte	$00, $eb, $ff, $08, $00, $ef, $16, $f0, $ff, $f3, $ff, $04, $f8, $f5, $ff, $0b
	byte	$08, $ec, $fb, $ff, $08, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $10
	byte	$e7, $ff, $00, $ff, $10, $ef, $fd, $09, $00, $f7, $ff, $f9, $08, $e9, $0f, $00
	byte	$ff, $00, $f3, $10, $00, $ff, $00, $0f, $f0, $ff, $10, $ef, $00, $ff, $10, $e7
	byte	$ff, $00, $ff, $00, $f0, $f7, $10, $00, $ff, $f3, $0a, $f7, $08, $f2, $ff, $f8
	byte	$fe, $fb, $10, $d7, $ff, $00, $ff, $00, $ff, $00, $ef, $01, $03, $00, $ff, $0c
	byte	$00, $f7, $10, $df, $ff, $f8, $ff, $00, $ff, $00, $ef, $18, $00, $ff, $00, $ff
	byte	$0c, $fd, $f8, $ff, $20, $df, $10, $e7, $ff, $00, $ff, $f0, $ff, $00, $08, $00
	byte	$ff, $00, $ff, $08, $ff, $f4, $ff, $00, $08, $f0, $ff, $00, $ff, $00, $ff, $08
	byte	$ff, $f0, $ff, $00, $ff, $0a, $f0, $ff, $04, $09, $00, $df, $1c, $cf, $ff, $00
	byte	$ff, $00, $fe, $fb, $0c, $00, $ff, $08, $f5, $ff, $00, $f7, $14, $00, $f0, $eb
	byte	$1d, $00, $f0, $ef, $0c, $00, $fe, $ea, $ff, $00, $f5, $f8, $ff, $10, $00, $ec
	byte	$ff, $0e, $00, $f1, $fd, $fa, $ff, $04, $f1, $f7, $06, $00, $fb, $fa, $ff, $08
	byte	$f0, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $fb, $fb, $ff, $00, $eb, $ff, $04
	byte	$f9, $f7, $f8, $ff, $04, $f7, $00, $f7, $18, $00, $f7, $04, $01, $00, $f5, $f8
	byte	$ff, $00, $e3, $ff, $0b, $08, $ea, $fc, $ff, $10, $00, $ef, $ff, $14, $f0, $fb
	byte	$f8, $ff, $00, $eb, $ff, $08, $f9, $fa, $f3, $16, $00, $f3, $ff, $00, $fb, $04
	byte	$e1, $ff, $04, $fb, $f3, $ff, $fa, $ff, $f7, $0c, $f4, $f6, $ff, $fa, $ff, $00
	byte	$ef, $05, $ff, $10, $ec, $f7, $ff, $10, $f0, $ff, $00, $00, $f7, $05, $00, $f3
	byte	$ff, $00, $ff, $00, $f3, $ff, $00, $fe, $f8, $ff, $00, $fe, $f0, $ff, $00, $ef
	byte	$fc, $ff, $00, $ff, $00, $fd, $06, $00, $f3, $0a, $00, $ff, $00, $f7, $04, $ff
	byte	$00, $ff, $00, $ef, $08, $00, $f8, $f6, $ff, $04, $f7, $06, $f7, $ff, $ff, $00
	byte	$fb, $04, $00, $ff, $00, $fd, $fc, $f5, $ff, $00, $ff, $00, $fb, $04, $f3, $08
	byte	$00, $0d, $ef, $ff, $00, $fb, $00, $05, $00, $ff, $10, $e7, $ff, $00, $fc, $ff
	byte	$f8, $ff, $05, $00, $f7, $ff, $fb, $05, $00, $ff, $00, $f7, $08, $f3, $0b, $00
	byte	$f3, $ff, $08, $00, $eb, $0f, $f3, $ff, $ff, $10, $e9, $14, $00, $ff, $08, $fb
	byte	$f8, $f7, $0b, $00, $f7, $00, $fb, $08, $00, $f4, $f7, $10, $eb, $ff, $ec, $ff
	byte	$08, $f2, $f7, $ff, $08, $f0, $ff, $00, $f3, $ff, $00, $fd, $ff, $00, $f3, $0c
	byte	$00, $00, $f3, $07, $00, $fc, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $00
	byte	$ef, $0a, $f7, $ff, $00, $ff, $00, $ef, $00, $f8, $ff, $00, $f5, $ff, $0c, $00
	byte	$f0, $fb, $ff, $10, $ef, $09, $eb, $ff, $00, $ff, $00, $ff, $00, $f7, $04, $02
	byte	$f8, $f7, $08, $f7, $0e, $00, $ff, $00, $f7, $10, $00, $f8, $ff, $00, $ef, $0e
	byte	$f6, $ff, $f8, $ff, $00, $f0, $ff, $10, $ef, $00, $ef, $08, $ff, $00, $f2, $05
	byte	$00, $fe, $ff, $fd, $08, $f3, $08, $fb, $0a, $e7, $ff, $08, $ff, $00, $ff, $00
	byte	$f7, $02, $f7, $04, $ff, $0c, $f0, $ff, $0c, $f0, $ff, $00, $ff, $00, $ff, $00
	byte	$ff, $00, $ef, $10, $ff, $00, $f5, $fc, $ef, $1f, $00, $fb, $00, $fb, $09, $00
	byte	$ff, $00, $f7, $08, $ef, $0e, $ef, $ff, $ea, $10, $00, $00, $ef, $06, $f5, $ff
	byte	$04, $f3, $02, $f3, $04, $fb, $00, $f7, $10, $f0, $fb, $0f, $f4, $ff, $f7, $10
	byte	$00, $ff, $00, $ff, $0c, $f0, $f7, $02, $ff, $00, $ff, $f3, $ff, $00, $ef, $10
	byte	$e7, $07, $f4, $ff, $00, $fd, $06, $00, $f9, $08, $00, $ff, $02, $ff, $08, $f3
	byte	$07, $00, $ff, $0c, $00, $ff, $00, $06, $f7, $ff, $f8, $fb, $08, $eb, $ff, $ef
	byte	$ff, $f0, $ff, $00, $ef, $00, $e7, $04, $ff, $00, $ef, $10, $f1, $08, $00, $ff
	byte	$05, $00, $fe, $f9, $ff, $08, $ef, $ff, $ff, $10, $eb, $fb, $07, $08, $f8, $fb
	byte	$ff, $02, $f0, $ef, $0e, $f6, $ff, $f0, $f7, $07, $08, $e3, $ff, $08, $04, $f9
	byte	$fc, $f7, $ff, $0b, $f0, $ff, $10, $f7, $00, $f7, $16, $f0, $ff, $00, $ff, $00
	byte	$ef, $00, $fb, $04, $f7, $08, $00, $ff, $00, $f7, $04, $03, $00, $f7, $03, $00
	byte	$ff, $fd, $ff, $00, $ff, $00, $ef, $0a, $00, $fa, $f7, $10, $00, $ff, $00, $ef
	byte	$10, $07, $00, $ef, $0f, $00, $ff, $00, $ff, $f0, $ff, $00, $ff, $08, $f8, $ff
	byte	$10, $ef, $ff, $00, $ff, $00, $ff, $f0, $ff, $00, $f7, $fb, $06, $00, $f3, $ff
	byte	$00, $ef, $00, $ff, $00, $ff, $08, $f1, $f8, $ff, $10, $ef, $04, $ef, $14, $00
	byte	$ff, $00, $ff, $00, $fe, $f3, $0f, $00, $fa, $fd, $0c, $fa, $00, $e5, $19, $00
	byte	$ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $f5, $ff, $00, $fb, $ff, $ff, $fd
	byte	$0c, $f0, $ff, $00, $ff, $00, $07, $00, $ff, $00, $fb, $f8, $ff, $08, $f3, $ff
	byte	$08, $eb, $0b, $00, $fb, $ff, $0e, $f0, $ff, $00, $ff, $00, $ff, $00, $0f, $00
	byte	$f7, $ff, $02, $fb, $04, $f7, $08, $01, $08, $e3, $ff, $00, $ff, $f7, $16, $f4
	byte	$ff, $ff, $f8, $ff, $00, $ff, $00, $ff, $04, $f8, $ff, $00, $f7, $ff, $04, $f9
	byte	$00, $f7, $fd, $fb, $fd, $ff, $04, $ef, $ff, $03, $04, $f5, $01, $fd, $00, $f7
	byte	$08, $f7, $ff, $f9, $fe, $ff, $0c, $00, $ff, $08, $fb, $05, $00, $ff, $02, $01
	byte	$00, $f7, $00, $fb, $03, $00, $fc, $fe, $06, $f0, $f7, $ff, $00, $ff, $00, $ff
	byte	$00, $ff, $00, $ff, $00, $ff, $f1, $ff, $00, $fb, $00, $f7, $07, $00, $f8, $ff
	byte	$fb, $01, $f9, $ff, $00, $fb, $f8, $ff, $00, $ff, $00, $f7, $08, $f7, $fe, $ff
	byte	$00, $fe, $f8, $ff, $00, $ff, $04, $00, $fd, $07, $00, $ff, $10, $eb, $0b, $00
	byte	$ff, $00, $f3, $02, $f7, $04, $f3, $fe, $00, $f7, $f8, $f7, $00, $ff, $00, $f7
	byte	$04, $ff, $00, $fd, $ff, $0e, $00, $ff, $00, $f7, $0a, $00, $ef, $ff, $00, $ff
	byte	$f8, $f9, $06, $02, $00, $f1, $ff, $00, $f3, $fd, $ff, $02, $f8, $f7, $ff, $10
	byte	$00, $fa, $f3, $0f, $00, $ff, $f8, $ff, $05, $00, $ef, $ff, $00, $fb, $fb, $ff
	byte	$00, $ff, $00, $ff, $00, $ff, $00, $f7, $ff, $08, $f4, $ff, $01, $0d, $00, $f3
	byte	$02, $07, $00, $ef, $ff, $ff, $00, $fa, $f7, $0e, $00, $f7, $f8, $0b, $00, $ef
	byte	$ff, $04, $f7, $05, $f7, $ff, $fd, $ff, $f9, $fe, $f7, $05, $00, $ff, $00, $ff
	byte	$00, $ff, $f8, $0c, $00, $09, $00, $ff, $05, $04, $eb, $ff, $00, $fb, $f4, $ff
	byte	$00, $f7, $00, $ff, $ff, $09, $ed, $ff, $00, $ff, $00, $fc, $ff, $f8, $fd, $ff
	byte	$02, $07, $f0, $ff, $04, $00, $f9, $08, $f0, $ff, $05, $00, $f7, $08, $f7, $ff
	byte	$fb, $14, $f0, $ff, $00, $ff, $00, $00, $f7, $02, $f3, $ff, $00, $ff, $00, $f7
	byte	$00, $ff, $00, $ff, $00, $ff, $00, $f1, $ff, $08, $f4, $f7, $0a, $01, $00, $fb
	byte	$fa, $fb, $0b, $00, $f5, $fe, $ff, $00, $ff, $00, $fd, $00, $f3, $01, $ff, $00
	byte	$fb, $04, $f8, $07, $00, $ff, $00, $ff, $00, $f7, $ff, $04, $f3, $ff, $01, $00
	byte	$eb, $0f, $00, $ff, $00, $ff, $03, $00, $ff, $00, $ff, $08, $f1, $fb, $08, $00
	byte	$ff, $00, $f7, $08, $f7, $08, $00, $00, $f3, $0a, $00, $fb, $08, $f5, $ff, $00
	byte	$ff, $00, $f9, $00, $f7, $ff, $00, $00, $f7, $ff, $ff, $00, $fd, $f7, $04, $ff
	byte	$04, $f4, $fb, $01, $01, $00, $f8, $ff, $00, $04, $00, $fb, $ff, $fc, $00, $fe
	byte	$fc, $ff, $f8, $fb, $00, $fe, $fb, $f8, $fb, $00, $ff, $00, $ff, $00, $ff, $00
	byte	$f7, $04, $01, $00, $eb, $ff, $03, $0c, $ef, $ff, $03, $00, $fe, $fe, $ff, $08
	byte	$eb, $ff, $04, $00, $ec, $ff, $00, $fc, $f5, $fa, $f3, $0d, $00, $ff, $00, $fb
	byte	$02, $00, $f7, $08, $00, $00, $f7, $05, $00, $ff, $ff, $ff, $00, $f9, $ff, $ff
	byte	$0a, $00, $f3, $07, $00, $f7, $ff, $fc, $ff, $fc, $fd, $00, $f7, $ff, $f3, $ff
	byte	$00, $f7, $f8, $ff, $00, $02, $fb, $00, $fe, $01, $00, $ff, $04, $f5, $ff, $08
	byte	$f4, $fc, $ff, $00, $ff, $00, $f7, $0b, $f2, $fc, $fd, $06, $00, $f7, $01, $00
	byte	$f7, $fb, $ff, $00, $f7, $ff, $00, $f4, $ff, $08, $f8, $ff, $02, $ff, $10, $e8
	byte	$ff, $03, $06, $f7, $ff, $f4, $ff, $00, $f7, $f8, $ff, $02, $f1, $ff, $00, $ff
	byte	$00, $ef, $06, $05, $00, $fe, $00, $fb, $0c, $e3, $ff, $00, $ff, $f8, $ff, $06
	byte	$00, $f7, $00, $f1, $10, $eb, $04, $e7, $16, $f0, $ff, $00, $ff, $00, $ef, $08
	byte	$ff, $f5, $ff, $f2, $ff, $00, $ff, $f4, $ff, $00, $0a, $00, $07, $00, $ff, $ef
	byte	$ff, $00, $ff, $00, $f7, $04, $05, $00, $ee, $ff, $00, $ef, $0c, $ef, $08, $f3
	byte	$08, $00, $00, $f7, $ff, $00, $ff, $00, $ff, $04, $f4, $ff, $08, $ff, $00, $f3
	byte	$06, $01, $0a, $f5, $ff, $00, $fe, $f0, $0f, $00, $ef, $ff, $fa, $ff, $00, $f6
	byte	$fb, $ff, $fa, $ff, $00, $ef, $05, $f7, $06, $f7, $ff, $00, $ff, $00, $fb, $07
	byte	$00, $ff, $f8, $ff, $00, $f7, $00, $ff, $08, $eb, $18, $00, $0a, $00, $ff, $02
	byte	$ff, $00, $f8, $f7, $0c, $00, $fb, $fb, $ff, $00, $fd, $f7, $0f, $00, $ff, $00
	byte	$ff, $08, $ff, $f2, $ff, $0c, $00, $fb, $fb, $08, $00, $ff, $00, $ff, $00, $f7
	byte	$01, $ff, $02, $f7, $ff, $ff, $00, $f4, $ff, $00, $fb, $00, $f2, $ff, $00, $ef
	byte	$00, $f7, $00, $fe, $08, $f3, $ff, $f7, $ff, $00, $ff, $00, $f7, $ff, $00, $ff
	byte	$fc, $f7, $ff, $08, $f8, $f5, $ff, $ff, $f9, $ff, $00, $f7, $ff, $f9, $ff, $00
	byte	$ff, $f7, $ff, $00, $eb, $ff, $00, $ff, $08, $f7, $ff, $01, $00, $fd, $00, $f8
	byte	$ff, $08, $f4, $ff, $04, $00, $f7, $ff, $00, $ff, $00, $f7, $ff, $01, $f8, $f9
	byte	$ff, $0e, $00, $f3, $ff, $09, $00, $f7, $ff, $05, $00, $f6, $f7, $08, $fc, $fe
	byte	$fb, $08, $00, $fd, $f8, $ff, $08, $f8, $f4, $ff, $00, $ff, $f8, $fb, $00, $ff
	byte	$00, $f7, $ff, $06, $f4, $ff, $00, $ff, $00, $fb, $03, $07, $00, $f7, $fc, $ff
	byte	$00, $f7, $ff, $f8, $ff, $00, $ed, $ff, $00, $ff, $f8, $ff, $00, $ff, $00, $f7
	byte	$fb, $07, $00, $f7, $ff, $00, $ff, $00, $ff, $10, $f0, $fe, $f5, $0b, $00, $ff
	byte	$00, $ff, $04, $ff, $00, $f3, $07, $f8, $ff, $00, $ef, $06, $ef, $ff, $f4, $ff
	byte	$00, $fb, $f8, $0b, $00, $ff, $00, $fd, $04, $00, $ff, $00, $fd, $fd, $ff, $fd
	byte	$ff, $00, $ef, $ff, $00, $ff, $00, $ff, $00, $f7, $08, $00, $fc, $fb, $04, $00
	byte	$fb, $ff, $fd, $00, $f1, $ff, $00, $01, $eb, $ff, $08, $00, $f8, $f3, $05, $01
	byte	$02, $f4, $ff, $04, $f7, $ff, $01, $00, $f4, $ff, $00, $ff, $02, $f5, $ff, $02
	byte	$00, $ff, $f8, $fb, $08, $00, $ff, $00, $fd, $fc, $ff, $00, $f7, $03, $f8, $ff
	byte	$00, $fd, $00, $ff, $02, $fb, $fe, $f9, $0b, $00, $ef, $08, $f8, $ff, $00, $ff
	byte	$00, $ff, $01, $00, $f7, $ff, $00, $ff, $00, $f3, $ff, $00, $fe, $fd, $fd, $ff
	byte	$fc, $fe, $ff, $00, $fd, $fe, $f8, $ff, $00, $f3, $ff, $00, $ef, $0c, $ef, $ff
	byte	$00, $00, $fd, $00, $f3, $ff, $00, $f6, $f7, $08, $f9, $ff, $02, $f2, $ff, $00
	byte	$fb, $09, $00, $fd, $01, $00, $04, $00, $f9, $fd, $ff, $03, $04, $f8, $fb, $00
	byte	$07, $00, $ef, $0c, $f9, $00, $f9, $ff, $00, $00, $ef, $0c, $00, $fa, $ff, $fc
	byte	$ff, $00, $eb, $0a, $00, $00, $f5, $ff, $05, $04, $f7, $00, $fc, $ff, $fe, $fc
	byte	$ff, $00, $ff, $00, $f7, $08, $f6, $fc, $fd, $00, $fd, $f8, $fe, $f8, $ff, $00
	byte	$f7, $fb, $02, $f9, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $04, $fa, $fe
	byte	$f9, $05, $00, $ff, $00, $f1, $ff, $00, $f7, $fe, $fd, $08, $f7, $fc, $fb, $00
	byte	$fb, $ff, $f9, $fd, $01, $fc, $fa, $ff, $00, $f7, $ff, $07, $00, $f5, $fc, $fb
	byte	$07, $00, $ff, $08, $ef, $ff, $00, $f7, $ff, $00, $ff, $08, $ff, $f6, $fb, $ff
	byte	$00, $f4, $ff, $00, $ef, $08, $00, $fd, $fd, $fe, $ff, $00, $f3, $ff, $00, $f5
	byte	$ff, $00, $ff, $00, $f9, $00, $f9, $00, $f7, $ff, $00, $fb, $f8, $ff, $10, $f3
	byte	$fb, $ff, $04, $fb, $08, $f5, $ff, $00, $f7, $0a, $00, $f7, $ff, $fd, $ff, $00
	byte	$f5, $ff, $00, $ff, $00, $f3, $0b, $00, $ff, $08, $f3, $ff, $00, $fa, $fc, $ff
	byte	$00, $ff, $f1, $ff, $00, $fb, $fa, $ff, $00, $fe, $f8, $fb, $06, $00, $f7, $00
	byte	$fd, $07, $00, $fb, $ff, $02, $02, $fd, $00, $ef, $0b, $00, $ff, $07, $00, $f7
	byte	$08, $f9, $08, $ef, $ff, $00, $fc, $ff, $fc, $f7, $fe, $f9, $ff, $00, $fe, $f9
	byte	$06, $fa, $ff, $fa, $ff, $05, $fb, $ff, $ff, $01, $ff, $ff, $fa, $ff, $00, $ff
	byte	$08, $f6, $fb, $00, $fd, $ff, $00, $ef, $ff, $04, $00, $f7, $fe, $fc, $ff, $00
	byte	$fc, $f9, $fe, $fb, $01, $f7, $0c, $f4, $ff, $00, $ff, $00, $f8, $fb, $0a, $00
	byte	$fc, $fb, $fd, $ff, $00, $ef, $08, $00, $fc, $f3, $07, $00, $ff, $00, $ff, $00
	byte	$f7, $00, $fb, $04, $fa, $ff, $02, $f7, $07, $f7, $ff, $00, $fd, $ff, $ff, $07
	byte	$00, $ff, $00, $ef, $ff, $08, $00, $ff, $00, $f7, $08, $f3, $07, $00, $fe, $fd
	byte	$ff, $ff, $02, $f0, $ff, $00, $07, $00, $f3, $ff, $04, $fe, $04, $f8, $fe, $f5
	byte	$ff, $00, $f7, $ff, $fc, $ff, $ff, $00, $fe, $f8, $ff, $00, $fb, $ff, $00, $fb
	byte	$ff, $00, $ff, $fd, $fe, $fb, $00, $f8, $05, $00, $ff, $fe, $f9, $ff, $08, $00
	byte	$f6, $fb, $08, $00, $fb, $04, $f7, $fc, $fd, $03, $00, $f5, $fd, $00, $ff, $00
	byte	$f7, $f9, $ff, $00, $ff, $00, $fb, $fc, $fd, $01, $00, $f9, $ff, $00, $fb, $ff
	byte	$01, $00, $f3, $ff, $00, $02, $f9, $ff, $f9, $fd, $ff, $00, $fb, $08, $f2, $f7
	byte	$08, $00, $fa, $f7, $ff, $01, $00, $ff, $04, $f5, $ff, $03, $08, $f2, $ff, $04
	byte	$f7, $06, $00, $fc, $f9, $ff, $fd, $00, $01, $00, $fb, $07, $00, $f8, $ff, $00
	byte	$fe, $fc, $f7, $05, $f8, $ff, $00, $f7, $fe, $02, $00, $ff, $00, $ff, $00, $fd
	byte	$08, $f8, $fb, $ff, $00, $00, $fb, $00, $f1, $0b, $00, $fa, $fb, $00, $ff, $00
	byte	$00, $fb, $00, $f4, $ff, $00, $f7, $ff, $f8, $ff, $00, $04, $f4, $ff, $f9, $05
	byte	$00, $ff, $00, $fd, $03, $00, $ff, $00, $fe, $00, $f7, $02, $00, $00, $f7, $07
	byte	$f8, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $f7, $fe, $ff, $fc, $ff, $00, $ff
	byte	$04, $f4, $fb, $08, $ed, $ff, $00, $ff, $00, $f7, $00, $fb, $00, $ff, $00, $ff
	byte	$fe, $ff, $00, $ff, $f8, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $ff
	byte	$00, $fb, $01, $f6, $ff, $00, $fc, $f8, $fd, $06, $f8, $ff, $00, $fb, $00, $f7
	byte	$ff, $00, $f9, $fe, $00, $fd, $04, $f7, $ff, $00, $fd, $02, $00, $fb, $ff, $03
	byte	$fc, $ff, $f8, $ff, $08, $f3, $ff, $00, $fe, $f7, $ff, $f9, $ff, $00, $fb, $02
	byte	$00, $fb, $fd, $ff, $00, $f9, $fd, $ff, $00, $f9, $fc, $ff, $00, $fa, $ff, $00
	byte	$ff, $00, $fc, $fe, $ff, $00, $fb, $ff, $00, $fb, $ff, $fb, $ff, $fd, $fc, $fb
	byte	$ff, $f7, $04, $f8, $fe, $ff, $00, $ff, $00, $f8, $ff, $00, $ff, $04, $f1, $ff
	byte	$04, $f7, $ff, $f8, $ff, $00, $04, $00, $ff, $00, $ff, $00, $ff, $fc, $fd, $ff
	byte	$03, $00, $fa, $fd, $00, $fd, $02, $fe, $ff, $fa, $ff, $01, $fb, $fb, $ff, $00
	byte	$ff, $fa, $fd, $00, $f4, $ff, $00, $f9, $02, $f8, $ff, $04, $f4, $f7, $0b, $00
	byte	$ff, $00, $ff, $03, $f9, $ff, $00, $ff, $00, $ff, $00, $ff, $00, $fb, $ff, $02
	byte	$02, $f8, $fd, $fb, $05, $00, $ff, $00, $fa, $ff, $00, $f7, $ff, $00, $f8, $fd
	byte	$00, $ff, $00, $f7, $ff, $fc, $ff, $f8, $ff, $00, $ff, $00, $ff, $08, $fb, $fc
	byte	$f7, $0f, $00, $f7, $ff, $00, $ff, $00, $fc, $fc, $fd, $fc, $fd, $00, $fb, $ff
	byte	$f5, $ff, $04, $00, $f0, $08, $00, $07, $00, $f7, $06, $00, $ff, $00, $ff, $08
	byte	$fb, $fc, $ff, $00, $f7, $00, $ff, $00, $f7, $ff, $00, $ff, $f8, $ff, $00, $03
	byte	$00, $f4, $ff, $00, $ff, $04, $fb, $04, $f9, $00, $f3, $0b, $00, $ff, $00, $ff
	byte	$04, $f8, $f7, $ff, $ff, $00, $f8, $fb, $ff, $00, $fb, $ff, $fa, $ff, $00, $f7
	byte	$03, $03, $f6, $ff, $00, $fe, $fd, $fb, $ff, $00, $fb, $fb, $ff, $00, $f7, $00
	byte	$f7, $06, $00, $f9, $fe, $fd, $fe, $fe, $f9, $ff, $00, $fb, $fd, $ff, $00, $fc
	byte	$fa, $08, $00, $02, $f0, $ff, $08, $ff, $f8, $fb, $04, $01, $00, $fb, $03, $00
	byte	$f9, $ff, $08, $fa, $f8, $ff, $00, $ff, $00, $f7, $ff, $01, $f9, $ff, $fc, $ff
	byte	$00, $fb, $04, $f7, $ff, $00, $ff, $00, $fd, $ff, $fc, $ff, $00, $fd, $fc, $fb
	byte	$05, $00, $f9, $ff, $04, $f8, $ff, $00, $ff, $04, $00, $fb, $00, $ff, $00, $ff
	byte	$fe, $ff, $fc, $fb, $fe, $ff, $00, $ff, $00, $fb, $04, $fc, $f9, $ff, $00, $f9
	byte	$01, $fb, $03, $fa, $fe, $ff, $00, $fe, $fe, $ff, $00, $fb, $fe, $ff, $00, $fe
	byte	$f8, $ff, $02, $fd, $f8, $ff, $02, $00, $fa, $fb, $01, $f9, $fd, $01, $f9, $ff
	byte	$fa, $ff, $00, $ff, $00, $f7, $08, $f7, $04, $fa, $ff, $00, $fb, $ff, $00, $f9
	byte	$ff, $00, $f8, $ff, $00, $fb, $fe, $fb, $04, $f7, $ff, $ff, $05, $f3, $ff, $00
	byte	$ff, $f9, $fe, $fa, $ff, $00, $fa, $fb, $ff, $00, $fa, $ff, $08, $f4, $ff, $00
	byte	$ff, $00, $fd, $f7, $ff, $00, $ff, $00, $f7, $04, $00, $ff, $00, $fd, $00, $f7
	byte	$ff, $00, $ff, $f9, $ff, $00, $ff, $00, $fb, $ff, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $f0, $ed, $ec, $eb, $f1, $fc, $07, $0e, $12, $16, $17, $12, $0a, $01
	byte	$fd, $f8, $f4, $f1, $f4, $f7, $fa, $fc, $fc, $fc, $fb, $f8, $f6, $f5, $f8, $fb
	byte	$ff, $04, $09, $0d, $0e, $0d, $0a, $06, $01, $fa, $f7, $f8, $fb, $fc, $fd, $ff
	byte	$02, $01, $fe, $fb, $fb, $fa, $fb, $fd, $03, $0b, $0d, $0d, $0d, $0b, $02, $f8
	byte	$f4, $f5, $f5, $f4, $f8, $ff, $07, $0a, $09, $09, $08, $04, $fd, $f6, $f3, $f5
	byte	$fa, $fc, $fd, $ff, $02, $04, $01, $fd, $fc, $fd, $ff, $02, $08, $0e, $13, $14
	byte	$11, $0c, $04, $f6, $ec, $e4, $de, $db, $df, $ef, $ff, $0f, $19, $23, $29, $23
	byte	$18, $0b, $02, $fa, $f1, $ec, $ed, $f1, $f4, $f5, $f6, $f6, $f5, $f1, $ef, $ee
	byte	$f1, $f7, $ff, $09, $12, $18, $1c, $1b, $15, $0d, $00, $f7, $f1, $f3, $f4, $f5
	byte	$f8, $fe, $03, $02, $fd, $fa, $f9, $f9, $f8, $fa, $03, $0d, $12, $13, $13, $10
	byte	$06, $f6, $ee, $ef, $f1, $f1, $f5, $ff, $0c, $11, $11, $0e, $0b, $04, $fb, $f2
	byte	$ea, $e7, $ec, $f5, $fd, $02, $07, $0b, $0c, $08, $01, $fc, $fc, $ff, $06, $0d
	byte	$13, $17, $19, $16, $0b, $fb, $e9, $de, $d2, $c9, $cd, $dd, $f7, $0b, $1b, $2a
	byte	$38, $38, $29, $18, $0a, $01, $f6, $eb, $e8, $ea, $ed, $ef, $ed, $ec, $ea, $e7
	byte	$e5, $e5, $e8, $f1, $ff, $0f, $1e, $27, $2c, $2c, $26, $19, $04, $f3, $ef, $ee
	byte	$ec, $ea, $f1, $fa, $ff, $fe, $fa, $f8, $f9, $f7, $f4, $f7, $03, $0f, $17, $18
	byte	$15, $13, $0a, $f8, $e7, $e4, $ed, $f3, $f7, $ff, $11, $1d, $1c, $15, $0b, $01
	byte	$f5, $e9, $e0, $da, $dd, $e9, $fd, $09, $0f, $13, $17, $17, $0c, $fe, $f9, $fe
	byte	$05, $09, $0f, $17, $1f, $1d, $10, $fe, $ea, $da, $c9, $ba, $b9, $cd, $eb, $04
	byte	$19, $2e, $41, $49, $3b, $25, $16, $0c, $fe, $f0, $e7, $e7, $eb, $ea, $e6, $e0
	byte	$dd, $d9, $d7, $d8, $de, $eb, $fd, $17, $2b, $39, $3d, $3f, $38, $20, $06, $f4
	byte	$ee, $ea, $e1, $df, $e9, $f5, $fa, $f8, $f5, $f6, $f8, $f6, $f3, $f8, $04, $13
	byte	$1b, $1c, $18, $14, $0c, $f8, $e2, $da, $e5, $f6, $fd, $07, $17, $29, $2b, $1c
	byte	$0c, $fd, $ec, $dd, $d1, $cc, $cf, $df, $fb, $13, $1d, $21, $26, $24, $15, $02
	byte	$f7, $f8, $fd, $ff, $09, $15, $21, $21, $16, $04, $ee, $db, $c3, $b0, $ac, $bf
	byte	$df, $ff, $17, $33, $4a, $55, $48, $31, $20, $11, $02, $f2, $e7, $e5, $e8, $e7
	byte	$e1, $d8, $d3, $ce, $cc, $ce, $d5, $e5, $fd, $1d, $37, $45, $4d, $50, $43, $28
	byte	$09, $f9, $f0, $e2, $d8, $d8, $e3, $ec, $ed, $ee, $f1, $f5, $f6, $f5, $f5, $fb
	byte	$09, $15, $1c, $1c, $18, $11, $08, $f9, $e4, $d8, $df, $f7, $07, $10, $1d, $2d
	byte	$32, $24, $0e, $f6, $e0, $d1, $c8, $c0, $c5, $db, $fe, $1f, $2c, $33, $37, $31
	byte	$20, $03, $f5, $ef, $ee, $f1, $fb, $0d, $18, $1c, $18, $08, $f4, $dc, $c6, $b0
	byte	$a9, $be, $df, $fb, $17, $33, $4d, $59, $50, $3b, $24, $14, $04, $f5, $e8, $e3
	byte	$e4, $e6, $e1, $d9, $d1, $ca, $c9, $cc, $d1, $e1, $ff, $1f, $3a, $4b, $54, $54
	byte	$44, $28, $10, $00, $ec, $da, $d1, $d5, $dd, $df, $e2, $e9, $f1, $f5, $f8, $fa
	byte	$fc, $01, $0b, $15, $1a, $18, $15, $0f, $06, $f9, $ec, $dd, $df, $f7, $0d, $19
	byte	$21, $2d, $33, $29, $10, $f0, $d9, $cc, $c0, $b8, $bf, $df, $0e, $2a, $36, $3f
	byte	$43, $34, $18, $fd, $ec, $e2, $de, $e4, $f4, $07, $15, $1c, $1c, $10, $f8, $e4
	byte	$cc, $b6, $ad, $bf, $e3, $ff, $19, $33, $4f, $59, $50, $35, $1d, $0a, $fa, $f0
	byte	$e6, $e3, $e5, $eb, $eb, $e2, $d6, $cf, $cc, $cb, $cd, $df, $fe, $23, $39, $4a
	byte	$56, $53, $3c, $26, $13, $02, $e8, $d4, $cf, $d3, $d7, $d8, $df, $ea, $f2, $f7
	byte	$fb, $ff, $03, $06, $0f, $18, $19, $14, $10, $0d, $02, $f8, $ec, $e3, $e1, $ef
	byte	$0b, $1f, $28, $2d, $34, $2e, $14, $f2, $d6, $c7, $b6, $af, $c5, $ef, $12, $2b
	byte	$3e, $4c, $49, $2d, $10, $f6, $e5, $d4, $cf, $da, $ef, $ff, $10, $19, $1c, $12
	byte	$fc, $e9, $d2, $bd, $b6, $c9, $ef, $0b, $1f, $39, $51, $56, $44, $2a, $13, $fc
	byte	$ea, $e3, $e3, $e7, $ee, $f6, $fa, $f4, $e8, $da, $d1, $c9, $cc, $df, $fb, $19
	byte	$2e, $47, $53, $49, $34, $22, $15, $02, $e4, $d3, $d1, $d6, $d6, $d5, $dd, $eb
	byte	$f4, $f9, $ff, $05, $08, $0b, $13, $1a, $19, $12, $0d, $0a, $fd, $f0, $e9, $e5
	byte	$e1, $e9, $ff, $22, $31, $35, $38, $34, $20, $fc, $dc, $bc, $ae, $b7, $d3, $ef
	byte	$0d, $29, $45, $4f, $40, $1c, $06, $f2, $e0, $cb, $c8, $d6, $ed, $ff, $09, $12
	byte	$17, $10, $fd, $ee, $dd, $cc, $c9, $df, $ff, $19, $26, $37, $47, $44, $2d, $11
	byte	$fc, $ea, $dc, $d9, $e5, $f4, $ff, $0b, $0f, $0c, $fd, $e6, $d0, $c9, $cf, $dd
	byte	$ef, $07, $23, $3d, $45, $39, $28, $1d, $15, $02, $e8, $d8, $d9, $dd, $db, $d8
	byte	$df, $eb, $f5, $f9, $ff, $09, $0e, $13, $19, $1f, $1c, $11, $08, $01, $f6, $e4
	byte	$de, $e1, $e1, $e6, $fb, $23, $3e, $44, $40, $39, $2e, $0a, $da, $b9, $b9, $cb
	byte	$d6, $e5, $ff, $27, $3e, $3c, $28, $14, $02, $f2, $e0, $d1, $d0, $dd, $eb, $f8
	byte	$ff, $07, $0b, $08, $fe, $f6, $f0, $e6, $e6, $fb, $16, $27, $29, $2c, $30, $29
	byte	$0d, $f0, $e2, $da, $d5, $db, $ef, $0b, $1d, $23, $26, $20, $08, $ec, $d5, $cd
	byte	$cc, $d1, $df, $f9, $13, $28, $31, $2d, $20, $17, $11, $06, $f4, $e4, $e3, $e6
	byte	$e3, $dd, $de, $e7, $f3, $f9, $ff, $0e, $15, $1b, $21, $25, $20, $10, $ff, $f4
	byte	$e9, $d8, $ce, $d5, $e1, $e9, $fb, $1f, $47, $54, $4c, $45, $34, $10, $ea, $d4
	byte	$cd, $c9, $cc, $dd, $fb, $0d, $17, $1c, $1b, $12, $02, $f4, $ed, $e5, $e0, $df
	byte	$e6, $ed, $f1, $f6, $ff, $04, $07, $0c, $0f, $08, $06, $14, $27, $29, $19, $10
	byte	$0c, $01, $ea, $d0, $cc, $d5, $dd, $ea, $05, $23, $3b, $40, $39, $29, $14, $f9
	byte	$e0, $c8, $bd, $bf, $cf, $e5, $f7, $0b, $1e, $29, $20, $14, $11, $12, $05, $f4
	byte	$e9, $eb, $ec, $e6, $e1, $e7, $f3, $ff, $0a, $13, $19, $1f, $25, $27, $1e, $08
	byte	$f7, $e8, $dc, $cd, $c3, $c9, $df, $ef, $fd, $1b, $43, $61, $60, $48, $35, $2c
	byte	$18, $f4, $d0, $c3, $c9, $d1, $d4, $dd, $ef, $05, $13, $10, $08, $05, $03, $fa
	byte	$ea, $dd, $da, $df, $e6, $ed, $fa, $0b, $1b, $29, $2f, $24, $1c, $1f, $26, $19
	byte	$00, $ee, $e8, $e0, $ce, $c0, $c4, $d7, $ed, $fd, $13, $33, $4f, $54, $43, $35
	byte	$23, $08, $e2, $c0, $b2, $b1, $b7, $c5, $dd, $f9, $0f, $23, $29, $20, $14, $13
	byte	$10, $00, $ed, $e7, $ec, $f0, $ee, $ef, $f9, $07, $13, $19, $19, $1b, $21, $21
	byte	$16, $03, $f0, $e4, $d7, $cb, $c1, $c3, $d7, $ed, $f9, $0d, $37, $5b, $60, $54
	byte	$52, $55, $3c, $0c, $e2, $cb, $c0, $b1, $a9, $b7, $d1, $ef, $03, $15, $19, $16
	byte	$0d, $01, $f1, $dc, $d1, $d4, $e3, $f2, $07, $1b, $32, $43, $48, $38, $24, $1e
	byte	$19, $08, $e8, $d4, $cf, $cc, $c2, $bc, $c3, $dd, $f7, $0b, $1d, $3d, $55, $5a
	byte	$52, $44, $30, $10, $e8, $c4, $ae, $a1, $a0, $ab, $c7, $e7, $05, $1d, $2f, $32
	byte	$22, $0d, $05, $02, $f3, $e5, $e3, $f1, $ff, $06, $09, $13, $1f, $22, $1b, $12
	byte	$13, $15, $0e, $00, $f0, $e6, $dc, $d0, $c7, $c3, $cf, $e1, $ee, $fd, $1f, $3f
	byte	$5a, $69, $71, $70, $5c, $30, $06, $dc, $b4, $9c, $91, $9b, $b5, $d3, $ef, $0f
	byte	$1f, $21, $14, $00, $f1, $e1, $d4, $cf, $dd, $fb, $17, $31, $43, $55, $5a, $46
	byte	$28, $16, $0d, $f6, $d9, $c2, $c0, $c1, $bd, $ba, $c6, $dd, $f9, $0b, $21, $37
	byte	$4f, $5c, $5d, $51, $39, $1c, $f4, $d1, $b0, $9c, $95, $9f, $b5, $d6, $f7, $17
	byte	$2a, $36, $30, $18, $00, $f0, $ed, $e9, $e3, $e9, $ff, $1b, $26, $27, $2a, $2c
	byte	$24, $14, $09, $06, $01, $f5, $ed, $e8, $e2, $d8, $ce, $c9, $cb, $d3, $de, $eb
	byte	$ff, $1f, $49, $6c, $7f, $7f, $74, $5a, $30, $00, $c8, $a0, $8c, $89, $99, $b1
	byte	$d7, $fb, $13, $1f, $19, $05, $f0, $e0, $d8, $d5, $df, $f7, $1f, $3f, $55, $63
	byte	$66, $52, $34, $1a, $08, $f0, $cc, $b8, $b5, $b9, $b5, $b5, $bf, $db, $f3, $09
	byte	$1d, $33, $45, $58, $60, $58, $44, $28, $0a, $e4, $c0, $a3, $97, $9b, $ad, $c5
	byte	$e6, $07, $21, $2e, $2e, $22, $0c, $ec, $d8, $d9, $e5, $ed, $fb, $15, $35, $43
	byte	$44, $3c, $2d, $1d, $0e, $01, $f4, $e9, $e3, $e4, $e2, $dc, $d5, $d2, $d0, $d0
	byte	$d6, $dd, $e9, $fe, $23, $57, $79, $7f, $7f, $76, $5c, $24, $f0, $b8, $9a, $8b
	byte	$8a, $99, $b9, $dd, $fb, $0d, $11, $09, $f8, $e4, $d6, $d7, $e3, $f7, $15, $3e
	byte	$5b, $73, $76, $62, $42, $2d, $15, $f6, $cc, $b3, $ad, $ac, $a8, $a7, $b7, $d1
	byte	$eb, $ff, $17, $2b, $3f, $4f, $5a, $5b, $4b, $34, $18, $fc, $d8, $ba, $a5, $a3
	byte	$ab, $bf, $d3, $f1, $0b, $1f, $23, $1b, $0d, $fa, $e0, $cb, $cf, $e7, $fd, $13
	byte	$2a, $47, $5c, $59, $45, $2c, $1c, $0c, $f8, $e0, $d5, $d6, $d9, $d8, $d5, $d5
	byte	$d6, $d5, $d7, $db, $de, $e7, $ff, $2d, $5d, $79, $7f, $7f, $78, $58, $20, $e8
	byte	$ba, $a0, $91, $8e, $9d, $b7, $d7, $ef, $fd, $ff, $fa, $ed, $dd, $d4, $dd, $f5
	byte	$0f, $31, $53, $71, $7f, $78, $58, $44, $30, $10, $dc, $b8, $a8, $a1, $98, $94
	byte	$a1, $bb, $d9, $f3, $0d, $25, $37, $45, $50, $55, $4e, $3a, $24, $0c, $f2, $d8
	byte	$c1, $b7, $b8, $bf, $cd, $df, $f3, $05, $0d, $0e, $05, $f8, $ec, $da, $cc, $cf
	byte	$eb, $0f, $2a, $3e, $55, $6a, $68, $4e, $34, $1e, $09, $ec, $d0, $c7, $c7, $c8
	byte	$c9, $cf, $d8, $dc, $de, $e1, $e1, $e1, $eb, $07, $2f, $53, $69, $79, $7d, $72
	byte	$56, $28, $f9, $cc, $b0, $9c, $97, $9f, $b2, $c9, $dc, $e7, $eb, $e8, $e4, $df
	byte	$dd, $e9, $05, $27, $43, $5f, $7c, $7f, $74, $64, $54, $32, $04, $d0, $b4, $a0
	byte	$8c, $80, $85, $9f, $bd, $dd, $ff, $1b, $35, $42, $4b, $4d, $49, $3d, $2c, $1a
	byte	$05, $f2, $e1, $d6, $d0, $cf, $d2, $db, $e3, $eb, $f0, $f3, $f3, $ed, $e4, $df
	byte	$dd, $da, $dd, $ef, $1b, $3b, $52, $5f, $69, $69, $5a, $41, $22, $fd, $e2, $cb
	byte	$bd, $b3, $b3, $be, $cd, $d9, $df, $e9, $ef, $eb, $ec, $f7, $0b, $26, $43, $5c
	byte	$6e, $72, $68, $50, $32, $08, $e0, $c0, $ac, $a1, $a1, $a9, $b9, $c7, $d3, $d9
	byte	$dc, $df, $e5, $eb, $f9, $0f, $2f, $55, $6d, $76, $78, $7b, $76, $5a, $2c, $f8
	byte	$d4, $b0, $8c, $80, $80, $83, $9f, $bf, $e3, $0e, $29, $3b, $47, $4b, $44, $39
	byte	$2c, $21, $12, $04, $f8, $f3, $ef, $e8, $e3, $e1, $e1, $df, $dc, $d9, $d8, $d9
	byte	$d9, $d8, $da, $e5, $ed, $f3, $03, $1f, $47, $5d, $61, $61, $68, $61, $48, $18
	byte	$f8, $dc, $c6, $b1, $a3, $a6, $b7, $c9, $d8, $e7, $f7, $fa, $f2, $f7, $07, $14
	byte	$1b, $2f, $4f, $67, $66, $59, $4c, $3a, $19, $f0, $cc, $b8, $ab, $a3, $a2, $a9
	byte	$b6, $c3, $cd, $d6, $df, $ed, $fb, $09, $1b, $3b, $5a, $67, $6c, $78, $7f, $7c
	byte	$51, $22, $fc, $d5, $a8, $80, $80, $80, $85, $9f, $bf, $ef, $17, $2d, $3d, $47
	byte	$46, $39, $28, $20, $1b, $14, $08, $05, $08, $06, $fd, $f2, $e9, $e0, $d4, $c8
	byte	$c1, $c0, $c3, $cb, $d5, $df, $f1, $ff, $0b, $15, $2d, $4f, $5f, $5e, $5f, $65
	byte	$60, $40, $18, $f1, $d8, $bc, $a6, $9b, $a3, $b5, $c9, $d9, $ef, $ff, $ff, $f8
	byte	$ff, $17, $19, $14, $21, $49, $61, $5f, $50, $4a, $42, $24, $fa, $d8, $be, $b0
	byte	$a1, $9a, $9f, $ab, $bb, $ca, $da, $e9, $fb, $09, $15, $27, $43, $51, $58, $67
	byte	$7f, $7f, $68, $44, $20, $fc, $c5, $98, $80, $80, $80, $8a, $a5, $cf, $f7, $1b
	byte	$2b, $37, $3f, $3c, $2b, $1c, $18, $1b, $1a, $16, $15, $19, $19, $0c, $f8, $e8
	byte	$d5, $c3, $b5, $ad, $ae, $b8, $c6, $d9, $e9, $ff, $13, $1b, $27, $3b, $53, $5b
	byte	$5c, $5f, $5f, $50, $30, $0c, $e9, $c9, $b0, $a0, $9d, $a8, $bc, $cd, $df, $f9
	byte	$03, $00, $fd, $0b, $1d, $1a, $10, $1f, $43, $5d, $59, $4b, $48, $42, $2a, $00
	byte	$d2, $bc, $ac, $9d, $94, $98, $a6, $bb, $cf, $e3, $f9, $0a, $16, $23, $35, $3f
	byte	$47, $5b, $73, $7c, $70, $54, $3a, $18, $e2, $b0, $8c, $80, $80, $81, $95, $bb
	byte	$df, $05, $19, $25, $2f, $35, $30, $20, $15, $18, $23, $25, $24, $25, $27, $21
	byte	$0c, $f2, $d9, $c4, $b2, $a5, $a1, $a7, $b9, $cd, $e4, $fc, $13, $21, $28, $33
	byte	$45, $55, $5b, $5c, $5b, $52, $3d, $1d, $fa, $d9, $bc, $a8, $9e, $a2, $b3, $c7
	byte	$da, $f1, $ff, $03, $fe, $ff, $13, $1d, $18, $13, $29, $4d, $5e, $56, $4b, $46
	byte	$3c, $1c, $ec, $c9, $b1, $a4, $96, $92, $9d, $af, $c7, $dd, $f2, $07, $13, $1f
	byte	$2d, $36, $3d, $4f, $69, $76, $6e, $5c, $44, $28, $fc, $c4, $99, $84, $80, $80
	byte	$8f, $ad, $cf, $f7, $0e, $1c, $24, $2a, $2c, $24, $18, $17, $23, $2f, $31, $2f
	byte	$2d, $28, $19, $fc, $e0, $c2, $b0, $a1, $9b, $9f, $af, $c3, $df, $f5, $0f, $21
	byte	$2a, $31, $3f, $4f, $58, $5b, $59, $52, $44, $24, $02, $e0, $c3, $ac, $9f, $9f
	byte	$ad, $bf, $d6, $ea, $fd, $06, $01, $fd, $09, $19, $1d, $17, $1f, $3f, $5f, $61
	byte	$53, $48, $40, $28, $00, $d4, $b3, $a4, $98, $93, $99, $ab, $c3, $dc, $f3, $04
	byte	$0f, $1a, $25, $2d, $33, $47, $63, $75, $72, $64, $50, $34, $04, $d2, $a2, $89
	byte	$80, $80, $8b, $a3, $c7, $eb, $09, $17, $1e, $23, $29, $28, $1e, $19, $25, $35
	byte	$3a, $36, $31, $2d, $1c, $02, $e0, $c2, $ac, $9f, $98, $9c, $ad, $c5, $df, $f5
	byte	$0f, $1f, $28, $2f, $3d, $4c, $56, $5a, $5a, $54, $44, $2c, $08, $e2, $c4, $ac
	byte	$9f, $9e, $a9, $bf, $d3, $e7, $fb, $08, $06, $fd, $ff, $0f, $1e, $1a, $1f, $3b
	byte	$63, $6d, $5d, $4d, $41, $2c, $00, $cd, $b0, $9d, $95, $93, $9d, $af, $cb, $e1
	byte	$f5, $05, $0c, $12, $1b, $22, $2b, $3f, $5e, $75, $78, $6d, $5a, $40, $10, $d8
	byte	$a8, $88, $80, $80, $81, $9e, $bf, $e3, $05, $19, $21, $23, $29, $2a, $24, $1e
	byte	$27, $39, $40, $3c, $35, $2c, $1d, $fc, $d8, $bc, $a8, $9b, $96, $9d, $af, $c9
	byte	$df, $f9, $0f, $1f, $23, $2b, $3b, $49, $54, $59, $5b, $58, $48, $2c, $08, $e5
	byte	$c2, $ab, $9c, $9a, $a6, $b9, $d3, $e7, $fa, $09, $0c, $00, $f9, $07, $19, $1e
	byte	$25, $45, $69, $78, $69, $54, $41, $20, $f2, $c4, $a1, $94, $8f, $93, $a5, $bb
	byte	$d7, $ed, $fc, $07, $07, $07, $0f, $17, $22, $3b, $5b, $79, $7f, $79, $64, $48
	byte	$14, $dc, $a1, $80, $80, $80, $80, $97, $bb, $e5, $06, $1f, $29, $2a, $2c, $2c
	byte	$28, $25, $2e, $3c, $42, $3f, $35, $29, $14, $f4, $d2, $b4, $a1, $97, $97, $a3
	byte	$b7, $cf, $e7, $fd, $13, $1b, $1d, $27, $3c, $4b, $51, $58, $5f, $5c, $48, $24
	byte	$04, $e4, $c0, $a8, $97, $98, $a4, $ba, $d1, $ea, $fb, $09, $0f, $06, $fc, $ff
	byte	$0d, $21, $37, $53, $6f, $7b, $74, $60, $3a, $10, $dc, $b4, $94, $88, $88, $97
	byte	$b3, $cd, $e7, $f7, $03, $08, $01, $fd, $04, $0f, $1c, $37, $5f, $7f, $7f, $7f
	byte	$6c, $4a, $18, $d4, $a0, $80, $80, $80, $80, $95, $bf, $e7, $0f, $29, $33, $33
	byte	$2e, $2b, $2c, $2f, $33, $39, $3f, $40, $34, $20, $04, $e8, $c9, $b0, $9c, $96
	byte	$9c, $ad, $c3, $d9, $ee, $ff, $13, $15, $18, $2a, $3f, $4a, $4f, $59, $63, $5c
	byte	$40, $20, $01, $e0, $c0, $a2, $95, $99, $a7, $bb, $d4, $ee, $ff, $08, $0d, $0d
	byte	$00, $f5, $ff, $2b, $4f, $61, $6c, $7a, $7e, $5c, $2c, $f5, $c8, $a8, $8c, $80
	byte	$89, $a3, $bf, $db, $f2, $ff, $07, $05, $fa, $f6, $ff, $0d, $1b, $37, $63, $7f
	byte	$7f, $7f, $68, $48, $0c, $d0, $90, $80, $80, $80, $80, $97, $c5, $f5, $15, $2f
	byte	$3d, $39, $2d, $2b, $32, $35, $33, $33, $3a, $3c, $2e, $12, $f9, $e0, $c5, $ac
	byte	$9e, $9c, $a5, $b7, $cb, $df, $f1, $05, $0f, $0f, $19, $2f, $45, $4a, $4f, $5c
	byte	$66, $55, $36, $18, $fa, $d8, $b8, $a0, $98, $9f, $ae, $bf, $d9, $ef, $ff, $04
	byte	$0b, $0c, $fe, $f7, $0f, $3d, $5d, $68, $6f, $7b, $75, $4c, $18, $e0, $b8, $9d
	byte	$88, $83, $94, $af, $cd, $e7, $f9, $03, $06, $01, $f8, $f8, $09, $15, $1f, $3f
	byte	$67, $7f, $7f, $72, $5b, $38, $04, $c0, $8c, $80, $80, $80, $81, $a3, $d3, $fb
	byte	$1b, $33, $3b, $38, $30, $2f, $31, $31, $2f, $2f, $31, $2d, $1d, $09, $f0, $dc
	byte	$c6, $b3, $aa, $a9, $b2, $c1, $cf, $df, $f3, $ff, $05, $0b, $23, $3d, $49, $49
	byte	$52, $5f, $5e, $44, $25, $09, $f0, $d4, $b5, $a5, $a5, $ad, $b9, $c8, $db, $ea
	byte	$f9, $02, $01, $ff, $07, $17, $2a, $43, $5d, $72, $74, $68, $50, $30, $04, $d2
	byte	$b0, $98, $91, $95, $a3, $bd, $d5, $ea, $f7, $01, $03, $ff, $fe, $07, $17, $23
	byte	$2b, $3f, $63, $78, $70, $54, $40, $20, $f0, $b8, $91, $80, $80, $83, $99, $b7
	byte	$df, $ff, $1e, $2a, $33, $39, $38, $2e, $27, $28, $2b, $28, $20, $19, $12, $05
	byte	$f1, $de, $ce, $c2, $bb, $b9, $bd, $c5, $cf, $de, $ed, $f6, $ff, $13, $2f, $47
	byte	$4c, $4b, $54, $5a, $4c, $2e, $10, $fc, $e8, $d0, $bc, $b3, $b5, $be, $c6, $cf
	byte	$d8, $e5, $f2, $f4, $f5, $05, $27, $35, $35, $3f, $5f, $71, $61, $44, $2e, $1a
	byte	$fc, $d4, $b2, $a4, $a4, $a7, $af, $bd, $d1, $e3, $f4, $ff, $03, $0a, $13, $21
	byte	$2f, $31, $30, $3d, $51, $58, $48, $30, $20, $10, $ea, $c4, $a4, $9b, $9b, $a1
	byte	$ae, $c5, $e7, $ff, $13, $22, $2f, $38, $34, $26, $1f, $1e, $1e, $17, $10, $0d
	byte	$0d, $08, $f9, $ec, $dd, $d4, $ca, $c3, $c1, $c3, $cb, $db, $e6, $f0, $ff, $1f
	byte	$3f, $4b, $4c, $4d, $50, $4c, $39, $1a, $04, $f5, $e6, $d5, $c8, $c4, $c7, $cd
	byte	$ce, $cf, $d7, $de, $e0, $e8, $ff, $19, $2f, $3b, $3f, $45, $51, $55, $48, $31
	byte	$1d, $0d, $fa, $e0, $c4, $b5, $b1, $b1, $b1, $b9, $c6, $d9, $ef, $fe, $0c, $1b
	byte	$2b, $37, $3d, $36, $2d, $2d, $35, $35, $28, $17, $0d, $04, $f0, $d5, $c0, $b8
	byte	$b8, $b8, $be, $cd, $e3, $f5, $0a, $1d, $27, $2b, $29, $22, $19, $11, $0f, $0f
	byte	$0d, $0c, $0d, $0e, $08, $fb, $ed, $de, $d2, $c8, $bf, $bd, $c3, $d3, $df, $ed
	byte	$05, $27, $43, $4e, $4d, $4c, $4a, $41, $2b, $12, $fd, $f2, $e8, $db, $d2, $d1
	byte	$d4, $d4, $d1, $d1, $d3, $d2, $d6, $ed, $0b, $1f, $2b, $3c, $4a, $47, $3d, $3c
	byte	$3c, $30, $18, $08, $ff, $f0, $d8, $c2, $b6, $b3, $b0, $b2, $bd, $cf, $e9, $ff
	byte	$17, $2b, $3c, $45, $47, $3b, $26, $1d, $1f, $1d, $10, $03, $01, $01, $f8, $e4
	byte	$d4, $cd, $ca, $c8, $c9, $d1, $dd, $ed, $ff, $13, $1d, $1f, $21, $1f, $14, $08
	byte	$05, $0b, $0f, $0f, $10, $14, $14, $09, $f8, $e5, $d6, $c9, $be, $b9, $bf, $cf
	byte	$dd, $ec, $05, $29, $44, $50, $4e, $4a, $45, $3c, $2a, $10, $fa, $f1, $e9, $e1
	byte	$d9, $d8, $da, $d8, $d6, $d4, $d1, $cc, $d5, $ef, $09, $1a, $25, $39, $49, $44
	byte	$30, $2c, $33, $31, $20, $0a, $04, $fd, $ea, $cd, $ba, $b1, $ae, $ae, $b5, $c9
	byte	$e5, $ff, $1b, $2f, $42, $4d, $4e, $40, $26, $16, $15, $12, $06, $fa, $fb, $ff
	byte	$fc, $ed, $e0, $d9, $d7, $d2, $d1, $d4, $db, $e9, $fd, $0b, $13, $14, $17, $19
	byte	$13, $05, $02, $0b, $13, $17, $16, $1a, $1c, $12, $fc, $e8, $d6, $c7, $bd, $b5
	byte	$b8, $c9, $db, $ec, $ff, $1f, $3d, $51, $51, $47, $44, $40, $2e, $14, $fc, $f1
	byte	$eb, $e3, $d9, $d7, $d9, $da, $d8, $d7, $d3, $ce, $d5, $ed, $03, $12, $1d, $2d
	byte	$43, $45, $31, $27, $2f, $36, $28, $14, $0a, $06, $f9, $da, $c0, $b0, $aa, $a9
	byte	$ad, $bd, $d9, $f7, $17, $2f, $3f, $4e, $53, $48, $2d, $1a, $18, $16, $08, $f8
	byte	$f7, $fe, $fb, $ec, $e0, $dc, $da, $d7, $d4, $d7, $dd, $e7, $f7, $04, $0c, $0e
	byte	$10, $14, $12, $09, $04, $0b, $18, $1e, $1e, $1e, $1f, $16, $04, $e9, $d5, $c4
	byte	$b9, $b3, $b4, $bf, $d7, $ef, $ff, $17, $33, $4d, $54, $4a, $44, $44, $3b, $20
	byte	$04, $f4, $ed, $e2, $d7, $d1, $d4, $d9, $d9, $da, $db, $d7, $d7, $e5, $fb, $0d
	byte	$15, $1f, $31, $40, $38, $28, $28, $35, $38, $28, $14, $0d, $04, $ec, $cc, $b4
	byte	$a8, $a4, $a6, $b1, $c9, $e7, $0b, $26, $37, $47, $52, $4e, $38, $24, $23, $21
	byte	$14, $01, $fb, $fd, $f8, $ea, $db, $d6, $d5, $d3, $d3, $d8, $df, $e6, $f1, $fd
	byte	$08, $0b, $0a, $0d, $11, $0f, $0b, $0d, $1b, $27, $28, $25, $21, $19, $09, $ee
	byte	$d2, $c0, $b4, $ae, $b0, $bb, $ce, $e7, $ff, $11, $23, $3f, $51, $50, $47, $44
	byte	$43, $34, $16, $00, $f0, $e4, $d5, $cb, $c9, $cf, $d4, $d7, $df, $e2, $e0, $e1
	byte	$f1, $05, $11, $14, $1f, $31, $3a, $30, $27, $31, $3f, $3a, $24, $17, $0e, $fc
	byte	$e0, $bc, $a9, $a1, $a0, $a6, $b9, $d3, $f7, $15, $2b, $3a, $47, $4c, $41, $32
	byte	$31, $32, $29, $16, $0a, $04, $fb, $e6, $d5, $cc, $ca, $c9, $ca, $d2, $dd, $e8
	byte	$ee, $f7, $02, $09, $09, $09, $0d, $13, $14, $15, $1f, $2c, $32, $2e, $25, $1c
	byte	$0a, $f2, $d4, $bd, $ae, $a9, $a9, $b5, $c6, $df, $fb, $13, $1f, $2f, $3f, $4d
	byte	$4d, $49, $44, $3f, $2c, $15, $00, $e9, $d8, $c9, $c1, $c1, $c8, $d1, $d9, $e7
	byte	$ee, $ec, $ed, $f9, $09, $12, $11, $19, $2c, $32, $2c, $2d, $3d, $45, $3c, $29
	byte	$1a, $0c, $f2, $d0, $b4, $a4, $9e, $9e, $a9, $bf, $dd, $fd, $17, $29, $3a, $3f
	byte	$3c, $3a, $3f, $42, $3b, $2e, $23, $1b, $08, $f0, $d4, $c8, $c0, $bc, $bc, $c3
	byte	$d1, $e3, $ed, $f3, $f9, $03, $09, $09, $09, $10, $19, $1f, $26, $31, $3b, $3b
	byte	$31, $22, $10, $f4, $d5, $be, $a9, $a1, $a1, $ab, $bf, $d7, $f3, $0d, $23, $2f
	byte	$32, $38, $45, $4f, $4c, $40, $36, $2d, $1a, $00, $e0, $cd, $c2, $bb, $bb, $c1
	byte	$d1, $df, $ef, $f8, $f8, $f5, $fd, $0d, $11, $0f, $16, $25, $2b, $2d, $37, $45
	byte	$49, $3d, $2c, $1d, $05, $e8, $c2, $ac, $a0, $9c, $9f, $af, $c6, $e5, $fd, $15
	byte	$2a, $31, $2d, $32, $43, $51, $4c, $40, $3c, $38, $24, $00, $e0, $ca, $bd, $b0
	byte	$ab, $b1, $c1, $d1, $e3, $ee, $f5, $fa, $03, $0b, $0d, $11, $1a, $26, $2f, $39
	byte	$42, $44, $3b, $2b, $18, $fc, $da, $c0, $a8, $9d, $9b, $a3, $b5, $cf, $eb, $05
	byte	$1a, $2f, $38, $31, $31, $3f, $4d, $48, $3a, $31, $2c, $1a, $fc, $da, $c8, $bc
	byte	$b7, $b5, $bf, $d1, $e2, $f4, $ff, $03, $ff, $ff, $0a, $0f, $10, $13, $1a, $24
	byte	$33, $42, $4b, $46, $3c, $2e, $1c, $fc, $d8, $bd, $ac, $a4, $a0, $a6, $b9, $cf
	byte	$e9, $fa, $0f, $1d, $1d, $1f, $35, $4b, $55, $51, $4f, $4f, $44, $22, $00, $e0
	byte	$c6, $b4, $a5, $a1, $ab, $bc, $cc, $dd, $eb, $f4, $f9, $03, $0d, $16, $1d, $28
	byte	$33, $41, $4c, $4e, $46, $38, $20, $08, $e4, $c4, $a8, $9a, $95, $9b, $a9, $bf
	byte	$df, $fd, $13, $25, $34, $38, $32, $2f, $38, $41, $41, $37, $2f, $28, $18, $00
	byte	$e0, $c8, $bb, $b5, $b5, $be, $d1, $e3, $f6, $05, $0b, $07, $03, $07, $0f, $13
	byte	$12, $11, $1f, $37, $49, $49, $40, $39, $30, $1a, $f8, $d4, $be, $b2, $a9, $a7
	byte	$af, $bf, $d3, $e5, $f7, $02, $08, $0f, $24, $3b, $4a, $51, $5a, $60, $58, $40
	byte	$20, $00, $e2, $c5, $ae, $a0, $9f, $a7, $b5, $c4, $d5, $e5, $f1, $fa, $05, $11
	byte	$21, $2e, $37, $41, $4e, $57, $51, $40, $29, $0e, $f1, $cd, $b0, $9e, $95, $97
	byte	$a3, $b5, $d1, $ed, $09, $1f, $2d, $31, $35, $39, $34, $2d, $2d, $35, $37, $29
	byte	$1a, $0d, $fe, $e8, $cd, $be, $b9, $bd, $c6, $d3, $e2, $f5, $05, $0e, $0c, $07
	byte	$0b, $15, $19, $10, $0b, $1b, $35, $43, $3b, $33, $32, $2c, $16, $f1, $d8, $c9
	byte	$bf, $b7, $b3, $ba, $c5, $d2, $e3, $ec, $ef, $f9, $17, $31, $3d, $43, $53, $67
	byte	$68, $50, $34, $1c, $04, $e2, $c2, $ad, $a4, $a4, $a8, $af, $bd, $cd, $df, $ed
	byte	$fb, $0a, $1f, $33, $3f, $45, $4d, $57, $58, $45, $2d, $13, $fa, $da, $bd, $a8
	byte	$9b, $9c, $a4, $b1, $c5, $df, $fb, $11, $22, $2b, $2e, $35, $3b, $34, $26, $21
	byte	$2b, $2e, $20, $0e, $03, $fd, $ec, $d8, $c8, $c3, $c8, $cf, $d7, $e4, $f3, $05
	byte	$0b, $0b, $0c, $16, $1f, $1d, $10, $0d, $1f, $31, $31, $28, $24, $28, $20, $0a
	byte	$f3, $e1, $d9, $cd, $c5, $c1, $c1, $c7, $d2, $d9, $dc, $e5, $ff, $23, $37, $3f
	byte	$49, $5b, $65, $58, $40, $28, $14, $fc, $e0, $c4, $b3, $ac, $ab, $ac, $b1, $bb
	byte	$cc, $dc, $eb, $ff, $15, $2f, $41, $4b, $4f, $55, $56, $48, $30, $14, $fc, $e4
	byte	$c8, $b2, $a5, $a4, $aa, $b5, $c7, $d9, $ef, $03, $15, $21, $29, $31, $37, $39
	byte	$31, $23, $1a, $1c, $1c, $13, $04, $fa, $f6, $f0, $e2, $d4, $d0, $d4, $da, $de
	byte	$e5, $f3, $ff, $05, $0b, $17, $25, $28, $1d, $11, $14, $1f, $21, $18, $12, $17
	byte	$1c, $15, $05, $f8, $ee, $e6, $dc, $d0, $c6, $c4, $c9, $cd, $cd, $d7, $f3, $17
	byte	$2d, $3b, $45, $54, $59, $50, $40, $2a, $18, $04, $f0, $da, $c9, $bf, $b8, $b5
	byte	$b3, $b5, $bf, $cc, $dd, $ef, $0d, $27, $3f, $4b, $51, $54, $53, $46, $30, $12
	byte	$fc, $e4, $d0, $bd, $b0, $ae, $b3, $bd, $c9, $d7, $e7, $fd, $0d, $16, $1f, $2d
	byte	$36, $36, $32, $2a, $20, $11, $0b, $0a, $04, $fb, $f4, $f4, $f3, $ec, $e2, $df
	byte	$e1, $e1, $e3, $e9, $f1, $f8, $07, $1a, $29, $2b, $25, $1c, $14, $10, $0e, $09
	byte	$03, $05, $0f, $14, $0f, $07, $ff, $f9, $ee, $dd, $cf, $c5, $c5, $c8, $c6, $cf
	byte	$ed, $13, $2b, $37, $44, $4f, $4e, $40, $30, $21, $14, $02, $f5, $ea, $e1, $d6
	byte	$cd, $c4, $bf, $bc, $bd, $c1, $ce, $e3, $ff, $1b, $33, $47, $51, $52, $4b, $3e
	byte	$2c, $14, $fa, $e6, $d5, $c8, $bd, $b9, $bd, $c4, $ce, $d8, $e7, $f5, $05, $0f
	byte	$19, $29, $35, $37, $31, $2c, $25, $12, $fe, $f9, $fc, $fa, $f3, $f3, $f9, $fe
	byte	$f9, $f0, $ea, $e7, $e7, $e5, $e2, $eb, $03, $1d, $28, $28, $2b, $28, $16, $00
	byte	$f9, $fb, $fb, $f9, $ff, $11, $1b, $18, $0e, $04, $f8, $e6, $d4, $c4, $c3, $c5
	byte	$c8, $d3, $f3, $17, $2f, $38, $41, $48, $40, $2c, $19, $0e, $08, $fe, $f7, $f5
	byte	$f6, $f3, $e8, $dc, $d1, $c8, $be, $ba, $c3, $d7, $f5, $0b, $25, $3d, $4b, $4a
	byte	$40, $36, $29, $15, $fc, $e8, $dd, $d5, $cb, $c5, $c5, $cb, $d1, $d9, $e2, $ef
	byte	$fe, $0a, $15, $25, $35, $39, $33, $2c, $23, $10, $f8, $ed, $f0, $f6, $f5, $f5
	byte	$ff, $0b, $0a, $ff, $f2, $ee, $e9, $dc, $db, $eb, $07, $1b, $23, $27, $2f, $28
	byte	$10, $f0, $e8, $ef, $f5, $f4, $ff, $13, $27, $26, $18, $09, $fa, $ea, $d3, $c3
	byte	$c2, $c9, $d1, $df, $ff, $23, $38, $3b, $3b, $3a, $30, $14, $fe, $f8, $f8, $f9
	byte	$fb, $ff, $0b, $0c, $03, $f3, $e4, $d0, $c0, $b9, $bf, $d1, $e3, $fd, $17, $31
	byte	$3e, $3d, $38, $2e, $26, $18, $02, $f3, $e8, $e1, $da, $d0, $cc, $ce, $d2, $d6
	byte	$df, $eb, $fd, $09, $15, $26, $35, $3a, $31, $27, $1c, $0c, $f1, $e4, $e9, $f3
	byte	$f8, $fb, $08, $14, $14, $06, $fb, $f0, $e1, $d9, $e3, $f6, $05, $13, $1f, $2a
	byte	$27, $16, $00, $ea, $de, $e3, $ef, $fb, $07, $19, $2c, $2e, $20, $0b, $f7, $e4
	byte	$d2, $c4, $c6, $d1, $df, $ef, $0b, $2d, $3d, $38, $2f, $28, $18, $fd, $e7, $e5
	byte	$ed, $f9, $ff, $0f, $1e, $22, $1a, $08, $ed, $d6, $c5, $bd, $bc, $c3, $d3, $ef
	byte	$07, $1c, $2a, $33, $32, $2c, $24, $1b, $10, $01, $f4, $ec, $e4, $da, $d2, $ce
	byte	$d0, $d5, $dd, $eb, $fa, $09, $16, $27, $35, $36, $2c, $22, $16, $06, $ec, $e1
	byte	$e9, $f5, $fd, $02, $0f, $19, $18, $0d, $f9, $e9, $e2, $e9, $f0, $f5, $ff, $0f
	byte	$1f, $1e, $0e, $02, $f9, $e9, $da, $dd, $f3, $0b, $17, $20, $2b, $30, $22, $09
	byte	$f0, $e1, $d5, $cc, $d1, $de, $ec, $fb, $15, $2f, $39, $2c, $20, $15, $02, $e9
	byte	$d8, $dd, $ed, $fd, $0d, $1f, $2f, $34, $29, $11, $f8, $e2, $d0, $bd, $b3, $b8
	byte	$ca, $dd, $f3, $06, $19, $2a, $30, $2c, $28, $25, $20, $11, $00, $f4, $ea, $e0
	byte	$d4, $ce, $cf, $d6, $df, $eb, $fa, $09, $15, $25, $2f, $30, $26, $1a, $11, $fd
	byte	$ea, $e4, $ef, $fd, $03, $09, $13, $1d, $18, $02, $f1, $f0, $f6, $f3, $ef, $f3
	byte	$ff, $0c, $09, $02, $fb, $f6, $f2, $ea, $e0, $e4, $fd, $15, $21, $23, $26, $29
	byte	$20, $0a, $f1, $e5, $e0, $dd, $e1, $ec, $f6, $ff, $16, $29, $2c, $1c, $0d, $04
	byte	$f4, $e1, $d8, $df, $f2, $05, $15, $2a, $39, $38, $2c, $18, $04, $ec, $d0, $b8
	byte	$b0, $b1, $b9, $c7, $dd, $f9, $0f, $23, $2f, $34, $32, $30, $29, $1c, $0a, $f8
	byte	$ed, $e1, $d8, $d1, $d2, $d9, $e3, $ee, $fd, $07, $12, $1d, $29, $29, $20, $16
	byte	$0c, $fc, $ef, $ef, $fb, $03, $05, $0b, $17, $18, $08, $fb, $fd, $01, $fb, $f1
	byte	$f1, $fa, $fd, $f7, $f1, $f1, $f2, $ee, $ec, $f0, $f1, $f3, $ff, $17, $25, $24
	byte	$20, $20, $1d, $10, $fc, $ef, $ec, $ea, $ed, $f3, $f6, $fc, $0b, $1c, $1e, $13
	byte	$05, $ff, $f4, $e8, $e1, $e8, $f7, $06, $19, $2b, $34, $34, $2d, $21, $0a, $ed
	byte	$d0, $bd, $b0, $aa, $ab, $b9, $d3, $ee, $07, $1e, $31, $3d, $3c, $35, $2e, $22
	byte	$10, $fc, $ec, $e4, $dc, $d7, $d6, $db, $e5, $ef, $fb, $04, $0d, $18, $22, $22
	byte	$1c, $14, $0a, $fd, $f8, $fb, $02, $03, $04, $0d, $12, $09, $ff, $ff, $08, $05
	byte	$fb, $f6, $fa, $f9, $f0, $e7, $e5, $e8, $e9, $e8, $ec, $f7, $ff, $ff, $03, $13
	byte	$23, $26, $1e, $1b, $1b, $15, $08, $f8, $f2, $f0, $f2, $f4, $f1, $f3, $ff, $13
	byte	$17, $0e, $05, $ff, $f9, $f0, $e9, $eb, $f4, $03, $15, $21, $28, $2d, $2f, $25
	byte	$10, $f2, $da, $c4, $b4, $a6, $a5, $b3, $ca, $e7, $ff, $19, $31, $40, $41, $3a
	byte	$30, $24, $14, $00, $ed, $e5, $e0, $db, $da, $de, $e7, $f1, $fb, $01, $09, $13
	byte	$1c, $1d, $1a, $12, $08, $02, $04, $07, $05, $01, $05, $0c, $08, $fb, $f9, $03
	byte	$0a, $05, $fe, $fe, $ff, $f8, $ea, $e1, $de, $de, $e0, $e5, $ed, $f9, $08, $0d
	byte	$0d, $13, $21, $28, $21, $15, $13, $11, $09, $fd, $f3, $f0, $f4, $f7, $f2, $f1
	byte	$fe, $11, $18, $11, $08, $03, $ff, $f8, $ed, $e8, $ee, $fb, $0b, $13, $1b, $25
	byte	$2d, $28, $14, $fe, $e5, $d0, $bc, $ab, $a7, $af, $c5, $dd, $fb, $15, $2d, $3f
	byte	$45, $3e, $32, $25, $18, $02, $f0, $e2, $df, $de, $de, $e2, $e9, $f4, $ff, $04
	byte	$09, $10, $19, $1d, $18, $0c, $05, $09, $0f, $0c, $04, $ff, $05, $07, $fb, $ed
	byte	$f1, $02, $0a, $06, $03, $07, $08, $fe, $ec, $de, $d7, $d6, $d9, $df, $ec, $fb
	byte	$0e, $1b, $1b, $18, $1f, $27, $20, $11, $05, $05, $05, $fc, $f3, $ef, $f7, $fe
	byte	$fb, $f8, $ff, $13, $1e, $15, $09, $05, $04, $fa, $e9, $e0, $e5, $f1, $fb, $03
	byte	$0d, $1c, $29, $2b, $20, $0a, $f6, $e1, $c9, $b5, $aa, $af, $bf, $d5, $ef, $0d
	byte	$27, $3b, $45, $40, $34, $25, $18, $05, $f1, $e2, $de, $df, $e2, $e5, $ed, $f9
	byte	$03, $09, $0a, $0f, $17, $1b, $11, $06, $07, $10, $13, $09, $01, $01, $03, $fe
	byte	$f1, $e6, $eb, $fb, $09, $0c, $0b, $0f, $11, $08, $f1, $de, $d4, $d2, $d3, $da
	byte	$e9, $fc, $0f, $24, $28, $21, $1f, $22, $1d, $0c, $fc, $f7, $fb, $f9, $f3, $f0
	byte	$f9, $05, $05, $01, $09, $1d, $25, $19, $0c, $09, $06, $fa, $e2, $d8, $db, $e2
	byte	$eb, $f5, $03, $15, $24, $2c, $27, $19, $05, $f0, $da, $c4, $b3, $b1, $bb, $cd
	byte	$e7, $ff, $1d, $32, $3f, $40, $35, $25, $18, $06, $f4, $e4, $dd, $df, $e5, $e9
	byte	$ef, $fb, $07, $0c, $0d, $0f, $18, $19, $0d, $04, $09, $13, $10, $04, $ff, $ff
	byte	$ff, $f5, $ec, $e7, $e7, $f2, $ff, $0e, $13, $13, $14, $0f, $00, $e8, $d8, $d0
	byte	$d1, $d7, $e4, $f9, $0d, $23, $2e, $29, $21, $1e, $1c, $10, $f9, $ed, $ee, $f3
	byte	$f1, $ee, $f7, $04, $0c, $0a, $13, $25, $2d, $24, $15, $0f, $08, $f8, $dc, $cf
	byte	$cf, $d4, $da, $e7, $fc, $0e, $1d, $29, $2e, $26, $15, $fd, $e9, $d4, $c2, $b9
	byte	$bb, $cb, $de, $f7, $0f, $24, $35, $3a, $32, $24, $14, $08, $f8, $e9, $e0, $e0
	byte	$e6, $ed, $f3, $fb, $07, $0f, $0f, $11, $19, $19, $0f, $04, $09, $10, $0d, $00
	byte	$fa, $fd, $fb, $f1, $e9, $ea, $ec, $ed, $f6, $07, $16, $19, $15, $12, $0b, $fa
	byte	$e5, $d4, $d1, $d7, $df, $ef, $ff, $17, $2a, $2f, $25, $1d, $1b, $12, $00, $ec
	byte	$e7, $eb, $ed, $e9, $ef, $fe, $09, $0d, $19, $2d, $38, $31, $22, $1a, $10, $f8
	byte	$da, $c8, $c3, $c6, $cb, $d7, $ed, $06, $19, $25, $2c, $2c, $21, $0e, $f6, $e4
	byte	$d2, $c6, $c4, $cb, $dd, $ef, $06, $17, $27, $2e, $2c, $20, $13, $07, $fd, $f0
	byte	$e6, $e3, $e8, $ef, $f4, $fb, $06, $0d, $0f, $11, $18, $1c, $13, $07, $07, $0f
	byte	$0c, $fe, $f5, $f5, $f8, $f1, $e8, $e7, $f0, $f4, $f3, $fa, $0d, $1a, $1b, $13
	byte	$0d, $05, $f8, $e5, $d9, $d8, $df, $eb, $fa, $0b, $1d, $29, $28, $20, $1c, $1a
	byte	$0d, $f9, $ea, $e8, $e8, $e4, $e5, $f1, $fc, $06, $16, $2f, $3f, $3e, $30, $28
	byte	$1c, $04, $e0, $c5, $bc, $bb, $bf, $c8, $db, $f9, $11, $21, $27, $2a, $28, $19
	byte	$05, $ee, $e0, $d8, $d3, $d4, $dd, $eb, $fd, $0e, $18, $1e, $21, $1b, $0f, $05
	byte	$fd, $f7, $ef, $ea, $ec, $f1, $f5, $fa, $ff, $07, $0b, $11, $17, $1d, $18, $0c
	byte	$07, $0b, $0b, $fe, $f2, $ef, $f2, $f2, $ec, $e9, $ed, $f8, $fc, $f9, $fc, $0b
	byte	$18, $18, $0f, $08, $04, $fc, $ed, $e1, $df, $e7, $f3, $fb, $09, $19, $22, $1f
	byte	$1c, $1f, $1c, $0d, $fa, $ee, $ea, $e1, $db, $de, $e7, $f2, $09, $27, $3e, $46
	byte	$42, $3b, $30, $18, $f2, $d1, $bc, $b5, $b3, $bb, $ce, $e7, $ff, $17, $24, $26
	byte	$23, $1c, $10, $00, $ed, $e5, $e2, $e4, $e7, $ee, $fb, $06, $0e, $11, $11, $10
	byte	$08, $ff, $fc, $fb, $f8, $f3, $f3, $f7, $f9, $fa, $fd, $ff, $04, $0c, $13, $19
	byte	$1b, $15, $0c, $06, $06, $01, $f6, $ec, $ea, $ee, $f0, $ef, $f0, $f5, $ff, $03
	byte	$ff, $fd, $03, $10, $15, $0d, $06, $04, $02, $f8, $ec, $e7, $ec, $f3, $fa, $05
	byte	$11, $16, $18, $1f, $27, $24, $10, $00, $f6, $eb, $dc, $d2, $d0, $d9, $ef, $13
	byte	$2f, $41, $49, $4c, $40, $29, $05, $e5, $c8, $b8, $b0, $b4, $c1, $d9, $f3, $0b
	byte	$1b, $23, $20, $18, $10, $06, $fb, $ef, $ec, $ef, $f5, $f8, $fc, $02, $08, $08
	byte	$06, $03, $fe, $f9, $f8, $fb, $fe, $fd, $fc, $ff, $ff, $ff, $fc, $fb, $fc, $02
	byte	$0d, $13, $16, $19, $15, $0b, $00, $fc, $f9, $f0, $e9, $e8, $ef, $f6, $f8, $f9
	byte	$fd, $03, $06, $ff, $f9, $fd, $0a, $10, $0d, $07, $07, $07, $00, $f1, $ea, $ec
	byte	$ee, $f3, $fe, $07, $0d, $16, $27, $31, $29, $19, $08, $fa, $ea, $d5, $c6, $c3
	byte	$d7, $f7, $19, $2f, $3f, $4e, $4e, $3a, $16, $f8, $dc, $c6, $b5, $b3, $bf, $d3
	byte	$e9, $ff, $0f, $1c, $1f, $17, $0e, $06, $ff, $f8, $f4, $f5, $fb, $ff, $02, $03
	byte	$03, $01, $fc, $f9, $f6, $f2, $f1, $f7, $ff, $06, $07, $07, $08, $07, $02, $fa
	byte	$f5, $f9, $03, $0d, $0f, $11, $16, $14, $06, $f4, $ef, $f0, $ef, $e8, $e9, $f6
	byte	$02, $07, $06, $05, $08, $07, $fc, $f4, $f9, $05, $0e, $0c, $0b, $0d, $0b, $01
	byte	$f2, $e9, $e5, $e5, $eb, $f6, $ff, $09, $1b, $32, $3b, $31, $20, $10, $fe, $e9
	byte	$cc, $bc, $c5, $e3, $ff, $17, $2b, $43, $4f, $40, $20, $02, $e9, $d4, $c0, $b7
	byte	$bd, $d2, $ea, $fd, $0b, $17, $1d, $18, $0d, $03, $fe, $fb, $f8, $f9, $fd, $03
	byte	$06, $04, $00, $fd, $f6, $f0, $ee, $ec, $ec, $f3, $ff, $0c, $11, $11, $12, $11
	byte	$0c, $00, $f4, $f3, $fb, $03, $07, $0b, $0f, $13, $0c, $fc, $e9, $e3, $e8, $eb
	byte	$ec, $f1, $ff, $12, $18, $12, $0d, $0b, $01, $f4, $f1, $fb, $05, $0a, $0b, $0f
	byte	$12, $09, $fa, $ea, $e3, $dd, $db, $e3, $ef, $fb, $0d, $25, $3b, $3f, $34, $25
	byte	$16, $00, $e1, $c8, $c3, $db, $f4, $05, $17, $2e, $3f, $3b, $22, $06, $ea, $d8
	byte	$c9, $c1, $c4, $d3, $eb, $ff, $11, $1b, $1e, $1a, $11, $05, $fe, $fa, $f6, $f7
	byte	$fb, $ff, $02, $01, $fd, $f8, $f1, $e9, $e6, $e7, $e9, $ef, $fb, $0d, $17, $1b
	byte	$1b, $1a, $16, $0b, $fb, $f4, $f7, $fc, $fd, $ff, $08, $0a, $07, $fe, $f1, $e1
	byte	$da, $df, $ed, $f5, $ff, $0e, $1f, $25, $21, $18, $08, $fb, $f6, $fa, $fe, $ff
	byte	$05, $0f, $13, $0b, $fd, $ee, $e6, $de, $d4, $d6, $e1, $ef, $fd, $13, $2d, $3f
	byte	$3e, $32, $28, $1c, $04, $e1, $d4, $df, $f1, $fb, $05, $17, $28, $28, $18, $00
	byte	$ec, $d8, $c9, $c5, $cd, $dd, $ef, $05, $1a, $27, $28, $21, $16, $0d, $03, $f9
	byte	$f2, $f1, $f6, $f9, $fa, $f9, $f6, $f3, $ed, $e6, $e3, $e5, $e9, $ed, $f7, $09
	byte	$18, $21, $23, $23, $21, $18, $07, $fc, $fa, $fa, $f8, $f5, $f9, $ff, $fd, $f5
	byte	$ee, $e9, $e2, $d9, $de, $ef, $05, $13, $1b, $27, $30, $2c, $18, $05, $03, $05
	byte	$00, $f9, $fc, $05, $08, $00, $f6, $f0, $e9, $e1, $d9, $d6, $df, $e7, $ed, $f9
	byte	$13, $2d, $38, $35, $32, $33, $26, $0a, $f8, $f9, $ff, $fe, $fb, $ff, $09, $08
	byte	$f9, $e8, $dd, $d5, $cc, $c7, $d1, $e7, $ff, $0f, $21, $2f, $33, $2d, $24, $18
	byte	$0d, $fe, $f2, $ed, $eb, $ea, $e9, $ea, $eb, $ea, $e8, $e5, $e5, $e7, $eb, $ef
	byte	$f6, $03, $15, $21, $25, $29, $2b, $25, $19, $0b, $05, $ff, $f6, $ee, $eb, $ed
	byte	$ec, $e9, $e5, $e3, $e5, $e6, $e5, $ea, $fb, $0f, $1f, $27, $2a, $2a, $28, $25
	byte	$1e, $11, $04, $ff, $fc, $f7, $ef, $e9, $ea, $eb, $ea, $e7, $e6, $e4, $e6, $e9
	byte	$e6, $e6, $f2, $0a, $23, $2a, $31, $3d, $42, $35, $23, $1e, $1b, $0e, $fc, $f0
	byte	$ec, $e4, $d7, $cb, $c8, $ca, $cd, $d3, $dd, $ef, $03, $1b, $2b, $31, $33, $34
	byte	$33, $28, $18, $04, $f9, $f0, $e4, $db, $d8, $da, $de, $e0, $e3, $e7, $e9, $ec
	byte	$f0, $f3, $f5, $fd, $0b, $1b, $23, $29, $2f, $31, $29, $1c, $12, $09, $fb, $ed
	byte	$e2, $de, $db, $d9, $d9, $df, $e5, $eb, $f3, $f9, $fb, $ff, $15, $24, $24, $23
	byte	$2f, $3b, $36, $24, $11, $09, $fe, $ea, $d9, $d5, $d9, $df, $e4, $ec, $f3, $f4
	byte	$f1, $ee, $e8, $dc, $db, $eb, $09, $1b, $2c, $3f, $52, $54, $4a, $40, $35, $1d
	byte	$00, $e8, $d6, $c9, $ba, $b3, $b7, $c1, $cc, $d9, $ec, $fb, $0b, $1a, $29, $30
	byte	$35, $37, $35, $2e, $20, $11, $00, $f0, $e1, $d6, $d0, $cf, $d3, $d8, $de, $e5
	byte	$eb, $ee, $f1, $f5, $f7, $fa, $05, $15, $21, $2b, $32, $37, $34, $29, $1e, $10
	byte	$fe, $ec, $dd, $d5, $cf, $cd, $cf, $d7, $e5, $ee, $f7, $ff, $07, $08, $08, $0e
	byte	$1f, $31, $39, $38, $38, $35, $28, $10, $f4, $e0, $d6, $cf, $cd, $d4, $e1, $ef
	byte	$f9, $fc, $f8, $f0, $e8, $de, $d4, $dd, $f7, $13, $2f, $43, $5a, $62, $5f, $55
	byte	$40, $24, $00, $e2, $cc, $b9, $ab, $a7, $af, $c1, $d1, $e1, $f5, $07, $13, $18
	byte	$1f, $2c, $35, $34, $2f, $28, $24, $18, $04, $f0, $e4, $d9, $d2, $ce, $d0, $d5
	byte	$dc, $e2, $e9, $ec, $ef, $f3, $f7, $fa, $03, $13, $23, $2f, $37, $3a, $38, $31
	byte	$25, $15, $00, $eb, $db, $d1, $cb, $c8, $cd, $d7, $e6, $f1, $f9, $ff, $0a, $0a
	byte	$04, $09, $1f, $33, $38, $35, $37, $36, $26, $0c, $f0, $e0, $d8, $d0, $cf, $d5
	byte	$e3, $ef, $f7, $f9, $f5, $ec, $e5, $e0, $d8, $db, $f5, $17, $33, $4b, $5b, $62
	byte	$62, $58, $42, $20, $fc, $dd, $ca, $b8, $aa, $aa, $b5, $c9, $d9, $e9, $fb, $08
	byte	$13, $18, $1d, $23, $28, $29, $26, $22, $1c, $12, $07, $f8, $ec, $e2, $dc, $d9
	byte	$d7, $d8, $db, $de, $e1, $e5, $e7, $ed, $f5, $fb, $03, $13, $24, $34, $3b, $3c
	byte	$38, $30, $26, $12, $fe, $eb, $dc, $d4, $cc, $c9, $ce, $d8, $e4, $ef, $f9, $ff
	byte	$ff, $07, $11, $18, $1e, $29, $34, $38, $30, $24, $18, $0a, $f6, $e5, $da, $d9
	byte	$da, $dd, $e3, $ea, $ef, $ef, $ed, $e6, $e2, $e4, $e5, $eb, $fd, $1b, $3a, $51
	byte	$58, $58, $56, $50, $38, $15, $f4, $dd, $cd, $be, $b2, $b1, $bf, $cf, $df, $ef
	byte	$fb, $06, $12, $1b, $1b, $18, $19, $1d, $1c, $15, $0f, $0c, $09, $01, $f6, $ef
	byte	$ea, $e6, $e1, $dc, $d9, $d8, $d9, $dc, $e0, $e7, $f2, $fd, $09, $15, $27, $34
	byte	$3e, $3d, $35, $2f, $25, $16, $00, $ec, $e0, $d7, $d1, $ce, $d1, $d7, $e1, $ed
	byte	$f6, $f8, $fe, $0f, $1e, $1d, $19, $21, $32, $31, $21, $14, $10, $0c, $fc, $ec
	byte	$e3, $e3, $e4, $e2, $e1, $e3, $e4, $e6, $e6, $e4, $e3, $ea, $f4, $fb, $06, $1d
	byte	$39, $4f, $52, $4a, $47, $46, $38, $18, $f5, $e0, $d5, $c8, $bb, $b8, $c3, $d3
	byte	$e5, $ef, $fa, $07, $15, $1b, $16, $10, $0f, $12, $10, $09, $05, $09, $0b, $08
	byte	$02, $fc, $f9, $f2, $ea, $e0, $d8, $d3, $d2, $d4, $d9, $e1, $ee, $ff, $0b, $18
	byte	$25, $35, $3f, $3d, $34, $2c, $26, $19, $06, $ef, $e3, $dc, $d5, $d0, $ce, $d3
	byte	$df, $e9, $ef, $f5, $03, $19, $21, $1a, $17, $21, $2d, $28, $16, $0d, $0e, $0b
	byte	$fe, $f1, $eb, $eb, $e9, $e4, $df, $de, $df, $e0, $e1, $e2, $e5, $ed, $fb, $06
	byte	$0e, $1b, $36, $4c, $50, $43, $3e, $42, $3a, $19, $f8, $e3, $da, $cc, $be, $b8
	byte	$c2, $d7, $e5, $f1, $fd, $0b, $19, $1c, $14, $0b, $09, $09, $05, $ff, $fe, $05
	byte	$0b, $0b, $09, $07, $03, $fb, $f0, $e4, $d8, $d2, $cd, $ce, $d3, $dc, $eb, $fb
	byte	$0d, $19, $25, $33, $3f, $40, $37, $2d, $28, $1e, $08, $f4, $e5, $dd, $d8, $cf
	byte	$cd, $d0, $dd, $e7, $ed, $f3, $04, $19, $21, $1b, $17, $21, $2b, $24, $14, $0c
	byte	$0d, $0b, $ff, $f2, $ed, $ed, $eb, $e5, $e1, $df, $df, $dd, $dd, $df, $e3, $eb
	byte	$f7, $07, $11, $19, $2d, $47, $53, $48, $3f, $41, $40, $24, $00, $e5, $d9, $cd
	byte	$bd, $b5, $be, $cf, $e4, $f1, $ff, $0f, $1d, $1f, $16, $0c, $08, $04, $fe, $f9
	byte	$f9, $ff, $07, $0b, $0c, $0b, $09, $01, $f7, $e9, $dd, $d3, $cc, $ca, $cd, $d7
	byte	$e3, $f5, $07, $19, $25, $32, $3f, $44, $3c, $31, $2a, $20, $10, $f6, $e6, $dd
	byte	$d5, $ce, $cb, $ce, $da, $e6, $ed, $f2, $ff, $15, $1f, $1a, $19, $27, $2d, $25
	byte	$14, $0d, $0c, $06, $fa, $ef, $ed, $ed, $ec, $e8, $e5, $e5, $e1, $de, $db, $db
	byte	$de, $e4, $ef, $03, $13, $1d, $2f, $47, $59, $54, $43, $40, $3e, $28, $04, $e0
	byte	$d2, $c9, $bb, $b3, $ba, $cf, $e5, $f7, $03, $13, $1f, $22, $19, $10, $09, $03
	byte	$fa, $f3, $f2, $f7, $fd, $02, $07, $0a, $0b, $07, $ff, $f5, $e8, $db, $d1, $cc
	byte	$cc, $d1, $dc, $eb, $ff, $13, $23, $2f, $3d, $47, $43, $36, $2d, $24, $16, $fe
	byte	$e8, $dc, $d5, $cf, $cb, $ce, $d7, $e7, $ef, $f2, $fd, $0f, $19, $1b, $1d, $29
	byte	$30, $29, $1d, $12, $0c, $02, $f4, $eb, $e8, $e9, $eb, $eb, $ec, $eb, $e8, $e1
	byte	$db, $d6, $d7, $dc, $e5, $f7, $0f, $1f, $2f, $45, $5d, $5e, $51, $4a, $44, $30
	byte	$08, $e4, $ce, $c0, $b2, $aa, $b2, $c9, $df, $f7, $0a, $19, $23, $26, $20, $16
	byte	$0c, $01, $f8, $f2, $f1, $f3, $f9, $ff, $08, $0d, $0e, $0b, $04, $f8, $e9, $dc
	byte	$d0, $c8, $c5, $c9, $d5, $e5, $f9, $0f, $23, $31, $3e, $49, $48, $3f, $35, $28
	byte	$18, $00, $ea, $db, $d1, $c8, $c6, $cb, $d5, $e2, $ed, $f9, $ff, $04, $0d, $1b
	byte	$27, $2d, $2c, $2b, $28, $20, $10, $fd, $f0, $ea, $e7, $e5, $e7, $eb, $f0, $f0
	byte	$ec, $e4, $db, $d5, $d2, $d5, $dd, $eb, $07, $1d, $2f, $3f, $59, $64, $5e, $55
	byte	$4b, $34, $11, $e8, $d0, $ba, $aa, $a3, $ab, $bf, $d9, $f5, $0b, $1f, $25, $26
	byte	$25, $20, $11, $01, $f4, $f1, $f0, $f0, $f2, $fb, $05, $0d, $0f, $0d, $08, $fe
	byte	$f0, $e0, $d2, $c7, $c3, $c6, $cf, $dd, $f3, $0a, $23, $31, $3f, $48, $4b, $45
	byte	$3a, $2d, $1c, $08, $f0, $dc, $d0, $c8, $c4, $c8, $d3, $de, $e9, $f9, $03, $00
	byte	$03, $15, $2d, $32, $2a, $28, $2c, $26, $12, $f9, $ef, $ec, $e8, $e5, $e5, $ec
	byte	$f2, $f3, $ee, $e6, $de, $d4, $d0, $d1, $d9, $e7, $ff, $1b, $2e, $3f, $53, $61
	byte	$62, $5a, $4d, $3a, $19, $f8, $d8, $c0, $ab, $a3, $a9, $bb, $d1, $ea, $06, $1d
	byte	$26, $28, $27, $23, $14, $02, $f4, $ee, $ed, $ec, $ef, $f9, $06, $10, $14, $13
	byte	$0e, $03, $f5, $e2, $d3, $c7, $c0, $c1, $c9, $d9, $ef, $05, $1e, $2f, $3e, $45
	byte	$49, $46, $3e, $31, $21, $0c, $f9, $e4, $d5, $c9, $c4, $c7, $cd, $d7, $e5, $f2
	byte	$fd, $03, $0b, $16, $24, $2b, $2d, $2a, $27, $1e, $12, $05, $f8, $f0, $eb, $ea
	byte	$eb, $ed, $ef, $ef, $eb, $e4, $dc, $d5, $d1, $d3, $dc, $ea, $fd, $14, $29, $39
	byte	$45, $50, $58, $59, $50, $3d, $24, $09, $ec, $cd, $b5, $a8, $a8, $b3, $c5, $df
	byte	$f9, $0f, $1f, $2b, $2b, $20, $12, $05, $f8, $ec, $e5, $e9, $f2, $fe, $09, $13
	byte	$1b, $1c, $15, $08, $f4, $e2, $d2, $c4, $bc, $bd, $c5, $d7, $ea, $ff, $19, $2b
	byte	$3a, $41, $43, $42, $40, $35, $26, $12, $02, $f2, $e0, $d0, $c5, $c4, $c7, $ce
	byte	$dd, $e9, $f3, $ff, $16, $22, $20, $1d, $24, $2c, $26, $14, $0b, $0b, $08, $fd
	byte	$f4, $f3, $f4, $f4, $ed, $e8, $e3, $de, $d9, $d4, $d4, $d9, $e3, $f2, $ff, $13
	byte	$23, $31, $36, $39, $43, $4f, $50, $43, $2e, $1d, $06, $ea, $c8, $b4, $ad, $b1
	byte	$bd, $cd, $e7, $ff, $15, $25, $2b, $23, $11, $03, $f9, $ee, $e4, $e4, $f1, $ff
	byte	$11, $1b, $23, $25, $20, $0e, $fa, $e1, $d0, $be, $b6, $b6, $bf, $d2, $e7, $fe
	byte	$15, $29, $38, $3d, $3d, $3d, $3e, $38, $2b, $19, $0c, $fd, $ec, $d8, $cb, $c6
	byte	$c4, $c8, $d3, $dd, $eb, $fb, $13, $25, $27, $1f, $1c, $21, $21, $15, $08, $06
	byte	$0b, $0b, $04, $fe, $fc, $f9, $f2, $e7, $dc, $d6, $d1, $d1, $d3, $db, $e7, $f7
	byte	$07, $14, $1f, $2c, $2d, $29, $2e, $3f, $49, $41, $33, $28, $19, $00, $e0, $c2
	byte	$b7, $b4, $b8, $c5, $d7, $f2, $09, $1d, $27, $22, $15, $04, $f8, $ee, $e5, $e4
	byte	$ed, $ff, $13, $21, $2a, $2d, $28, $16, $00, $e4, $ce, $be, $b3, $b1, $ba, $cb
	byte	$e3, $fa, $11, $24, $35, $3c, $3a, $39, $3b, $39, $2e, $1d, $11, $05, $f5, $e1
	byte	$d0, $c8, $c4, $c5, $cc, $d6, $e2, $f4, $0f, $1f, $28, $24, $1d, $1b, $19, $13
	byte	$08, $04, $07, $0d, $0d, $08, $03, $ff, $f8, $ec, $de, $d4, $ce, $ce, $d1, $d9
	byte	$e6, $f7, $07, $14, $1d, $2a, $2c, $22, $21, $34, $45, $42, $34, $2b, $26, $14
	byte	$f0, $cc, $bd, $b8, $b8, $bf, $ce, $e7, $ff, $15, $23, $24, $19, $0a, $fa, $ee
	byte	$e6, $e4, $eb, $fb, $0f, $21, $2c, $30, $2c, $20, $08, $ed, $d4, $c0, $b2, $ae
	byte	$b4, $c5, $db, $f3, $0d, $1f, $31, $3b, $3b, $37, $39, $3b, $31, $23, $14, $0a
	byte	$fe, $e8, $d4, $ca, $c5, $c4, $c9, $d2, $dd, $ef, $05, $1d, $27, $27, $20, $1c
	byte	$1a, $15, $0d, $05, $06, $0c, $0e, $0a, $04, $ff, $fa, $ee, $e2, $d5, $d0, $cd
	byte	$cf, $d5, $e1, $ef, $ff, $0f, $19, $26, $2d, $26, $21, $2f, $44, $48, $39, $2d
	byte	$28, $1a, $f8, $d2, $be, $b7, $b6, $b9, $c7, $df, $f9, $11, $20, $25, $1f, $0e
	byte	$00, $f4, $ea, $e6, $e9, $f5, $0a, $1b, $27, $2d, $2c, $22, $0d, $f5, $da, $c4
	byte	$b7, $b0, $b4, $bf, $d3, $eb, $ff, $19, $2d, $39, $3c, $39, $3b, $3d, $36, $28
	byte	$18, $0c, $00, $ea, $d8, $c9, $c5, $c3, $c7, $d1, $de, $ec, $ff, $13, $25, $28
	byte	$20, $1a, $1e, $20, $15, $09, $06, $0c, $0d, $06, $ff, $fb, $f8, $f1, $e6, $dc
	byte	$d6, $d3, $d2, $d5, $db, $e7, $f5, $05, $0f, $1f, $2b, $2c, $28, $33, $49, $52
	byte	$44, $34, $29, $1c, $f8, $d4, $b8, $b0, $af, $b5, $c3, $db, $f7, $0d, $1f, $29
	byte	$26, $18, $04, $fa, $f2, $ea, $e8, $f1, $05, $13, $1d, $24, $25, $20, $10, $fa
	byte	$e2, $ce, $c0, $b7, $b5, $bd, $cd, $e2, $f9, $0f, $23, $35, $3d, $3d, $3e, $41
	byte	$3d, $30, $1c, $0d, $ff, $ec, $d7, $c8, $c2, $c3, $c6, $d1, $df, $ef, $f9, $07
	byte	$1c, $26, $20, $1b, $23, $29, $21, $14, $0d, $0e, $0a, $00, $f5, $f2, $f2, $ef
	byte	$e8, $e3, $e0, $dd, $d9, $d6, $d7, $dc, $e7, $f5, $ff, $13, $26, $32, $35, $3f
	byte	$52, $5e, $54, $40, $2a, $18, $f8, $d2, $b1, $a4, $a6, $af, $bf, $db, $f9, $0f
	byte	$22, $2b, $2a, $20, $10, $03, $f8, $f0, $eb, $f0, $fd, $09, $13, $19, $1d, $1a
	byte	$10, $fe, $ec, $d9, $cb, $c0, $bb, $bf, $cb, $db, $f1, $07, $1b, $2f, $3d, $40
	byte	$42, $44, $42, $36, $24, $10, $00, $eb, $d8, $c5, $bf, $c2, $c8, $d2, $df, $f2
	byte	$fe, $07, $0d, $14, $1e, $26, $2a, $28, $26, $22, $1b, $10, $00, $f5, $f0, $eb
	byte	$e9, $e8, $e9, $eb, $eb, $e6, $e0, $da, $d6, $d6, $db, $e5, $f5, $07, $1f, $31
	byte	$3d, $47, $5b, $66, $60, $48, $30, $14, $f4, $d0, $ad, $9e, $9f, $ab, $bd, $d7
	byte	$f5, $13, $25, $29, $27, $22, $1b, $0b, $fa, $f0, $ef, $f3, $f8, $fe, $08, $13
	byte	$18, $14, $0d, $02, $f4, $e3, $d4, $c6, $c0, $bf, $c7, $d6, $e7, $fd, $15, $29
	byte	$39, $3f, $45, $47, $44, $38, $28, $15, $01, $ec, $d8, $c9, $c1, $c1, $c8, $d3
	byte	$df, $ed, $ff, $08, $06, $08, $1b, $2c, $2f, $27, $25, $29, $25, $10, $fd, $f2
	byte	$ef, $ea, $e5, $e6, $ea, $ef, $ee, $eb, $e4, $dd, $d6, $d4, $d7, $df, $ef, $05
	byte	$1b, $2f, $3e, $4b, $59, $61, $5d, $4d, $34, $18, $f8, $d4, $b8, $a6, $a1, $ab
	byte	$bd, $d5, $f1, $0c, $1f, $28, $28, $24, $1c, $0e, $ff, $f4, $ef, $f0, $f3, $fb
	byte	$03, $0f, $14, $15, $11, $07, $fa, $e9, $d9, $cc, $c3, $c1, $c7, $d3, $e3, $f9
	byte	$11, $25, $33, $3e, $43, $44, $40, $38, $2b, $19, $08, $f2, $e1, $d1, $c8, $c5
	byte	$c8, $cf, $dc, $eb, $f5, $fc, $0a, $16, $1d, $1e, $24, $2b, $29, $1d, $14, $0e
	byte	$08, $fc, $f2, $ed, $ef, $ef, $ee, $eb, $e9, $e5, $e0, $db, $d6, $d7, $de, $e8
	byte	$f7, $08, $1c, $28, $35, $41, $4b, $4c, $4a, $44, $34, $1c, $02, $e8, $d0, $bd
	byte	$b2, $b2, $bd, $d1, $e9, $fb, $0d, $1f, $28, $22, $15, $08, $00, $f5, $eb, $e8
	byte	$ef, $fd, $09, $12, $19, $1d, $1a, $10, $fc, $ec, $da, $cb, $c1, $bf, $c5, $d1
	byte	$e3, $f9, $0d, $21, $2d, $36, $3b, $3d, $38, $31, $2a, $1e, $10, $fe, $f0, $e3
	byte	$d6, $cd, $c9, $cd, $d6, $dd, $e6, $fa, $11, $1f, $21, $1c, $1b, $1e, $1c, $10
	byte	$07, $05, $09, $09, $06, $01, $fe, $fa, $f4, $e9, $dd, $d6, $d4, $d3, $d7, $df
	byte	$ef, $fc, $0a, $18, $23, $22, $22, $29, $2f, $2c, $2a, $2f, $31, $29, $15, $04
	byte	$f4, $e4, $d0, $c4, $c5, $cd, $d7, $e9, $ff, $0f, $16, $16, $11, $04, $f6, $ea
	byte	$e7, $e9, $ef, $fd, $0f, $1f, $29, $2b, $24, $18, $04, $f0, $d8, $c5, $bd, $bd
	byte	$c3, $d3, $e5, $f9, $0d, $1e, $27, $2b, $30, $32, $2e, $28, $24, $21, $19, $0c
	byte	$00, $f4, $e8, $d9, $d0, $ca, $c8, $cf, $e3, $fc, $0d, $15, $1d, $25, $1c, $08
	byte	$fa, $fc, $03, $04, $04, $0c, $1a, $1f, $16, $08, $f8, $ea, $da, $cd, $c6, $cb
	byte	$d9, $eb, $fd, $0f, $1c, $26, $29, $1c, $0e, $0b, $0f, $0a, $07, $13, $27, $31
	byte	$2a, $20, $18, $0d, $f8, $e2, $d1, $cd, $d3, $dd, $e9, $f3, $fd, $03, $02, $f9
	byte	$ee, $e3, $e1, $e9, $f6, $03, $15, $27, $37, $3a, $32, $21, $0d, $f4, $db, $c6
	byte	$bb, $ba, $c1, $cf, $df, $f5, $09, $17, $1f, $21, $26, $29, $26, $20, $1f, $22
	byte	$22, $18, $0d, $01, $f6, $e9, $d8, $c8, $c8, $d7, $e7, $f1, $fe, $0c, $19, $19
	byte	$0e, $04, $f9, $f1, $f2, $fd, $0a, $15, $1c, $23, $24, $18, $04, $ed, $da, $d0
	byte	$c9, $cb, $d9, $ed, $03, $18, $23, $2a, $29, $19, $04, $fb, $fb, $f7, $f0, $fb
	byte	$15, $2e, $33, $2e, $2d, $2b, $18, $fd, $e4, $db, $db, $d9, $d8, $de, $e7, $ed
	byte	$ec, $e8, $e4, $e3, $e3, $e8, $f5, $07, $1d, $2d, $3a, $3f, $3b, $2d, $14, $fc
	byte	$e2, $d0, $c0, $ba, $bf, $cb, $db, $ed, $ff, $0f, $19, $1c, $1f, $24, $24, $1e
	byte	$1c, $21, $24, $1f, $12, $08, $02, $f3, $e0, $d0, $d3, $df, $e6, $eb, $f5, $03
	byte	$0c, $09, $02, $fd, $fd, $f8, $f1, $f4, $06, $17, $21, $21, $20, $1d, $11, $fa
	byte	$e5, $d6, $d2, $d4, $dd, $eb, $ff, $13, $21, $27, $26, $19, $02, $f5, $f5, $f2
	byte	$e8, $eb, $05, $23, $30, $2f, $30, $36, $2e, $16, $fc, $ee, $e8, $e0, $d5, $d3
	byte	$d6, $d9, $da, $d9, $da, $dd, $e3, $eb, $f6, $07, $1b, $2e, $3b, $3f, $3c, $32
	byte	$20, $08, $f0, $d8, $c9, $c1, $bf, $c7, $d4, $e3, $f5, $05, $10, $15, $1b, $21
	byte	$24, $1e, $1a, $1e, $23, $20, $15, $0b, $06, $fa, $e8, $db, $dd, $e5, $e7, $e8
	byte	$ef, $fa, $ff, $fd, $fa, $f9, $f8, $f9, $f9, $f9, $ff, $0d, $1c, $22, $1f, $17
	byte	$12, $08, $f6, $e4, $d9, $db, $e3, $ed, $fd, $0d, $19, $21, $23, $18, $05, $f8
	byte	$f6, $f4, $ea, $e3, $f3, $15, $27, $29, $2b, $34, $37, $28, $0e, $ff, $f5, $eb
	byte	$dc, $d1, $cf, $cf, $ce, $cf, $d2, $d7, $e1, $eb, $f9, $07, $19, $2b, $3a, $3e
	byte	$3b, $34, $26, $14, $f9, $e4, $d4, $c9, $c5, $c7, $d0, $de, $ed, $fd, $09, $0f
	byte	$17, $1e, $22, $1f, $1a, $1a, $1f, $1f, $16, $0c, $07, $00, $f0, $e4, $e3, $e9
	byte	$eb, $e9, $ed, $f5, $fb, $f8, $f5, $f5, $f7, $f8, $fb, $fd, $ff, $06, $13, $1e
	byte	$1f, $18, $10, $0b, $00, $f1, $e2, $df, $e5, $ed, $f9, $05, $12, $1c, $20, $18
	byte	$0a, $ff, $fc, $f8, $f0, $e5, $e9, $ff, $17, $1f, $23, $2b, $34, $2f, $1e, $0c
	byte	$01, $f6, $e6, $d8, $d1, $ce, $cc, $cc, $cf, $d7, $df, $eb, $f9, $05, $12, $22
	byte	$2f, $37, $35, $2f, $26, $16, $04, $f0, $de, $d4, $ce, $ce, $d4, $dd, $eb, $f8
	byte	$03, $0b, $11, $19, $1d, $1c, $18, $16, $17, $19, $15, $0c, $07, $03, $fa, $ec
	byte	$e7, $eb, $ef, $ef, $ed, $f3, $f9, $fa, $f7, $f5, $f7, $f8, $fb, $fe, $ff, $02
	byte	$09, $17, $1d, $18, $10, $0b, $04, $f8, $e9, $e2, $e3, $ec, $f5, $ff, $0b, $16
	byte	$1e, $19, $0e, $08, $03, $ff, $f5, $ea, $e8, $f3, $05, $13, $19, $21, $2b, $2f
	byte	$25, $15, $08, $ff, $f2, $e2, $d6, $d1, $d1, $d1, $d4, $d9, $e1, $ed, $f8, $03
	byte	$0d, $19, $24, $2d, $2d, $28, $20, $17, $08, $f8, $e8, $dd, $d7, $d6, $d9, $df
	byte	$eb, $f7, $ff, $07, $0e, $15, $19, $19, $14, $11, $11, $12, $11, $0c, $06, $04
	byte	$01, $f6, $ec, $e9, $ef, $f3, $f1, $f0, $f7, $fd, $fe, $fb, $f9, $fa, $fd, $ff
	byte	$fe, $fd, $04, $11, $19, $16, $11, $0d, $08, $fd, $ee, $e4, $e3, $e7, $f0, $f9
	byte	$04, $11, $1c, $1c, $13, $0f, $0d, $06, $fc, $f0, $eb, $ee, $f8, $05, $10, $17
	byte	$21, $28, $26, $1a, $0c, $00, $f8, $ea, $dd, $d5, $d5, $d9, $db, $df, $e6, $f1
	byte	$fb, $01, $09, $10, $1b, $21, $22, $1f, $1b, $13, $08, $fb, $ee, $e4, $df, $dc
	byte	$de, $e3, $eb, $f7, $ff, $05, $0b, $13, $17, $15, $13, $10, $0d, $0c, $0b, $0a
	byte	$08, $03, $02, $fe, $f5, $ec, $ea, $ef, $f3, $f3, $f4, $fb, $02, $04, $01, $fe
	byte	$ff, $00, $fd, $fa, $fd, $0a, $12, $13, $11, $0e, $0b, $00, $f2, $e8, $e2, $e3
	byte	$e9, $f1, $fd, $09, $16, $1a, $16, $14, $15, $10, $02, $f9, $f3, $f0, $f1, $fb
	byte	$06, $10, $17, $1d, $21, $1c, $10, $00, $f7, $ee, $e5, $dc, $da, $dd, $e5, $ea
	byte	$ef, $f6, $ff, $03, $06, $0b, $11, $15, $16, $15, $13, $0f, $06, $fc, $f2, $eb
	byte	$e5, $e3, $e3, $e7, $ef, $f6, $fe, $03, $0a, $11, $14, $13, $10, $0f, $0c, $07
	byte	$05, $06, $06, $04, $00, $ff, $fc, $f5, $ec, $ea, $ef, $f5, $f7, $f8, $ff, $07
	byte	$0b, $07, $03, $03, $ff, $fb, $fd, $05, $0c, $0d, $0e, $0e, $0b, $02, $f5, $ec
	byte	$e5, $e4, $e6, $ed, $f7, $ff, $0f, $13, $13, $15, $19, $17, $0c, $02, $fe, $f8
	byte	$f4, $f6, $ff, $09, $0e, $11, $15, $17, $10, $02, $f6, $ee, $e9, $e3, $e1, $e3
	byte	$eb, $f4, $f9, $ff, $04, $07, $07, $09, $0b, $0c, $0b, $0b, $09, $07, $01, $fb
	byte	$f6, $f0, $ec, $ea, $ea, $ec, $f2, $f8, $fd, $ff, $07, $0e, $13, $12, $10, $0f
	byte	$0c, $08, $03, $03, $03, $02, $ff, $fe, $fd, $fa, $f5, $ed, $eb, $ef, $f6, $fb
	byte	$fe, $05, $0b, $0f, $0d, $08, $01, $fe, $ff, $04, $05, $05, $07, $0a, $09, $00
	byte	$f8, $f0, $ec, $e9, $e8, $eb, $f1, $fa, $05, $0a, $0b, $0f, $17, $1a, $14, $0b
	byte	$09, $06, $fe, $f8, $fa, $02, $07, $07, $09, $0b, $0a, $02, $f8, $f0, $e9, $e9
	byte	$e9, $ec, $f1, $f9, $ff, $09, $0b, $0a, $09, $0a, $09, $05, $01, $ff, $ff, $fe
	byte	$fb, $f8, $f6, $f5, $f3, $f1, $f1, $f3, $f5, $f9, $fd, $ff, $03, $0a, $0f, $10
	byte	$0e, $0f, $0e, $09, $04, $ff, $ff, $ff, $fd, $fc, $00, $00, $00, $00, $f1, $ee
	byte	$f1, $f9, $ff, $03, $07, $0d, $11, $0f, $05, $03, $05, $07, $03, $00, $01, $04
	byte	$03, $fd, $f8, $f4, $f2, $f0, $ed, $ef, $f2, $f7, $fe, $01, $03, $07, $0f, $17
	byte	$15, $11, $11, $11, $0a, $ff, $fb, $ff, $02, $00, $fe, $ff, $02, $ff, $f8, $f1
	byte	$ee, $ec, $ed, $f0, $f6, $fc, $04, $0b, $0f, $0f, $0e, $0c, $0a, $02, $fd, $f9
	byte	$f8, $f7, $f4, $f5, $f6, $f7, $f8, $f8, $f9, $f9, $fa, $fc, $fd, $fd, $ff, $05
	byte	$0a, $0c, $0d, $0e, $0e, $0b, $04, $01, $ff, $ff, $fc, $fa, $fa, $fb, $fa, $f8
	byte	$f7, $f4, $f3, $f8, $fd, $03, $06, $0b, $0e, $0d, $0b, $09, $0a, $08, $03, $ff
	byte	$ff, $ff, $fb, $f8, $f6, $f6, $f5, $f3, $f3, $f5, $f6, $f8, $fb, $fc, $fc, $ff
	byte	$09, $11, $14, $15, $16, $18, $12, $08, $ff, $fe, $ff, $fc, $f8, $f8, $fc, $fc
	byte	$f8, $f4, $f1, $f1, $f1, $f4, $f9, $ff, $05, $0b, $0f, $11, $11, $0d, $08, $02
	byte	$fb, $f5, $f1, $ef, $ef, $f1, $f4, $f8, $fa, $fd, $ff, $ff, $fe, $ff, $fe, $fd
	byte	$fe, $01, $06, $09, $0b, $0c, $0d, $0c, $06, $01, $fe, $fd, $fb, $f9, $f9, $fa
	byte	$00, $00, $00, $00, $ec, $f4, $fe, $08, $11, $14, $12, $0a, $00, $f4, $eb, $e5
	byte	$e8, $ef, $fc, $09, $14, $19, $18, $0e, $02, $f3, $e7, $e1, $e3, $ec, $fa, $09
	byte	$18, $1f, $1d, $15, $04, $f3, $e4, $db, $dc, $e7, $f6, $09, $1c, $25, $25, $1b
	byte	$08, $f3, $e0, $d5, $d4, $df, $f4, $09, $20, $2c, $2d, $23, $0d, $f3, $dd, $cc
	byte	$ca, $d7, $ec, $08, $23, $34, $38, $2b, $15, $f6, $d8, $c2, $be, $c9, $e7, $08
	byte	$28, $3f, $44, $38, $1c, $f8, $d5, $ba, $b1, $bd, $d9, $ff, $29, $4a, $53, $46
	byte	$25, $00, $cd, $ad, $a1, $ad, $cf, $ff, $2f, $55, $63, $59, $37, $05, $cd, $a2
	byte	$8e, $98, $c4, $fa, $38, $65, $79, $6c, $47, $0a, $cd, $97, $81, $8e, $b3, $ea
	byte	$29, $65, $79, $71, $4b, $15, $d0, $9f, $84, $8c, $b3, $ea, $29, $5d, $75, $70
	byte	$4e, $15, $d7, $a2, $8a, $8c, $b3, $ea, $1f, $55, $74, $6e, $51, $15, $e0, $aa
	byte	$8b, $8e, $a9, $df, $1f, $53, $70, $6e, $51, $20, $e0, $ad, $8c, $8e, $a9, $df
	byte	$14, $4f, $6a, $6e, $56, $20, $eb, $af, $92, $8f, $a9, $df, $14, $47, $69, $6d
	byte	$56, $25, $eb, $b5, $94, $8f, $a9, $d4, $09, $44, $63, $6c, $56, $25, $f0, $ba
	byte	$97, $90, $a9, $d4, $0e, $3f, $5f, $69, $56, $2b, $f6, $c0, $9d, $93, $a6, $cf
	byte	$ff, $3a, $5a, $66, $56, $30, $00, $ca, $a1, $94, $a3, $c9, $ff, $34, $55, $65
	byte	$59, $30, $00, $d0, $a6, $97, $a3, $c4, $fa, $29, $55, $62, $59, $38, $05, $d5
	byte	$aa, $9a, $a1, $c4, $ef, $27, $4d, $61, $5b, $3b, $0a, $db, $af, $9d, $a3, $be
	byte	$ea, $1f, $4a, $5e, $5b, $40, $15, $e0, $b8, $9f, $a2, $be, $e8, $1c, $44, $5a
	byte	$5a, $43, $15, $eb, $ba, $a5, $a2, $bc, $e4, $14, $3e, $57, $59, $46, $1b, $eb
	byte	$c2, $a6, $a3, $b6, $df, $09, $3a, $53, $57, $46, $1d, $f2, $c5, $aa, $a5, $b3
	byte	$dc, $04, $33, $4e, $56, $48, $25, $00, $d0, $ae, $a5, $b3, $d1, $fe, $29, $4a
	byte	$55, $4b, $2b, $00, $d5, $b2, $a6, $b1, $cf, $fa, $24, $44, $52, $4b, $30, $05
	byte	$db, $ba, $aa, $ae, $c9, $ef, $1f, $3f, $51, $4b, $31, $0a, $e1, $c0, $ab, $ae
	byte	$c6, $ea, $14, $3c, $4e, $4e, $36, $15, $eb, $c5, $ae, $ae, $c4, $ea, $11, $34
	byte	$4d, $4e, $3b, $18, $f3, $ca, $b2, $ae, $c1, $e1, $0c, $2f, $48, $4e, $40, $1d
	byte	$f8, $d0, $b6, $af, $bd, $dc, $06, $29, $43, $4d, $3e, $20, $00, $d5, $bc, $b1
	byte	$bc, $d4, $fe, $24, $3f, $4a, $40, $25, $02, $db, $c0, $b3, $ba, $d1, $f7, $19
	byte	$3a, $47, $43, $2b, $0a, $e5, $c6, $b5, $b9, $cc, $ef, $11, $34, $44, $43, $30
	byte	$10, $ee, $ca, $ba, $b9, $c9, $ea, $0c, $29, $3f, $43, $33, $16, $f3, $d5, $bd
	byte	$b9, $c6, $e4, $ff, $27, $3c, $42, $36, $1d, $fb, $db, $c1, $ba, $c5, $dc, $fc
	byte	$1f, $37, $40, $38, $21, $00, $e0, $c5, $bc, $c2, $d9, $f7, $19, $31, $3e, $38
	byte	$25, $05, $e8, $cc, $c0, $c2, $d4, $ef, $11, $29, $3b, $3a, $2b, $0d, $ec, $d5
	byte	$c2, $c1, $d0, $ec, $09, $28, $37, $3a, $2d, $15, $f3, $d8, $c5, $c2, $d0, $e7
	byte	$ff, $21, $34, $38, $30, $18, $00, $e0, $cc, $c4, $cc, $e3, $fe, $1b, $2f, $37
	byte	$30, $20, $01, $e7, $d0, $c5, $cc, $dc, $f4, $14, $29, $34, $31, $21, $0a, $ec
	byte	$d5, $c8, $c9, $d9, $f0, $0c, $24, $31, $31, $24, $0e, $f6, $db, $cc, $c9, $d4
	byte	$ea, $04, $1f, $2d, $31, $28, $12, $f8, $e1, $d0, $ca, $d3, $e4, $ff, $16, $29
	byte	$2f, $2b, $18, $00, $e5, $d5, $cc, $d1, $e1, $fa, $11, $24, $2d, $2b, $1b, $05
	byte	$ee, $d8, $cf, $d0, $dc, $f2, $0c, $20, $29, $2b, $20, $08, $f2, $dd, $d1, $d1
	byte	$db, $ef, $04, $19, $27, $29, $20, $10, $f8, $e3, $d5, $d1, $d9, $ea, $ff, $14
	byte	$23, $28, $23, $12, $00, $e8, $db, $d4, $d8, $e4, $fa, $0d, $1f, $27, $24, $18
	byte	$04, $f2, $df, $d7, $d7, $e1, $f4, $08, $1b, $24, $24, $1b, $0a, $f6, $e5, $d9
	byte	$d7, $df, $ef, $04, $14, $21, $24, $1c, $0e, $fb, $eb, $dd, $d8, $dd, $ec, $fc
	byte	$0e, $1c, $23, $1d, $11, $01, $ef, $e0, $db, $dc, $e8, $f7, $09, $18, $20, $1f
	byte	$15, $05, $f3, $e5, $dc, $dc, $e5, $f4, $04, $14, $1c, $1f, $16, $09, $fa, $eb
	byte	$df, $dd, $e3, $ef, $ff, $0e, $19, $1d, $18, $0c, $fe, $ee, $e3, $dd, $e1, $ec
	byte	$fa, $09, $15, $1b, $18, $10, $02, $f3, $e7, $e0, $e1, $ea, $f7, $05, $11, $19
	byte	$19, $11, $06, $f7, $eb, $e3, $e1, $e8, $f3, $01, $0e, $16, $18, $14, $09, $fe
	byte	$f0, $e7, $e3, $e7, $f0, $fe, $09, $12, $18, $15, $0c, $00, $f3, $ea, $e4, $e7
	byte	$ee, $fa, $05, $10, $15, $14, $0d, $02, $f8, $ec, $e7, $e7, $ec, $f7, $01, $0c
	byte	$12, $14, $10, $06, $fb, $f0, $ea, $e7, $eb, $f4, $ff, $09, $10, $12, $10, $08
	byte	$ff, $f3, $ec, $e8, $ea, $f2, $fb, $04, $0d, $11, $10, $0a, $00, $f6, $ee, $ea
	byte	$ea, $ef, $f8, $01, $09, $0e, $0e, $0a, $01, $fa, $f2, $ec, $eb, $ef, $f6, $ff
	byte	$06, $0c, $0e, $0c, $05, $fc, $f4, $ee, $ec, $ee, $f3, $fb, $02, $09, $0c, $0c
	byte	$05, $ff, $f7, $f0, $ee, $ee, $f2, $fa, $ff, $06, $0a, $0c, $08, $01, $fb, $f3
	byte	$ef, $ee, $f2, $f7, $ff, $04, $09, $0a, $08, $04, $fc, $f6, $f2, $ef, $f2, $f6
	byte	$fc, $02, $08, $09, $09, $04, $ff, $f8, $f3, $f0, $f2, $f4, $fa, $ff, $05, $08
	byte	$08, $05, $00, $fb, $f6, $f2, $f2, $f4, $f8, $ff, $02, $06, $08, $05, $01, $fc
	byte	$f7, $f4, $f3, $f4, $f7, $fe, $01, $05, $06, $05, $01, $ff, $fa, $f6, $f4, $f4
	byte	$f7, $fb, $ff, $02, $04, $05, $02, $ff, $fb, $f7, $f6, $f4, $f7, $fa, $fe, $00
	byte	$02, $02, $01, $00, $fc, $f8, $f7, $f6, $f7, $f8, $fc, $ff, $00, $01, $01, $00
	byte	$fc, $fa, $f8, $f7, $f7, $f8, $fb, $fe, $ff, $00, $00, $ff, $fe, $fb, $fa, $f8
	byte	$f7, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fa, $f8, $f8, $f8, $fa, $fb
	byte	$fc, $fe, $ff, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe
	byte	$fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
	byte	$fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe, $fe, $fc, $fc, $fb, $fa
	byte	$fa, $fa, $fa, $fb, $fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $fa, $fb
	byte	$fc, $fe, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f7, $f7, $fa, $fb, $fe, $ff, $ff
	byte	$ff, $fe, $fc, $fa, $f7, $f6, $f6, $f7, $fa, $fc, $ff, $ff, $00, $ff, $fe, $fb
	byte	$f7, $f6, $f4, $f6, $f8, $fb, $fe, $00, $01, $00, $ff, $fc, $f8, $f6, $f4, $f4
	byte	$f7, $fa, $fe, $00, $02, $02, $01, $fe, $fb, $f7, $f4, $f3, $f4, $f8, $fc, $00
	byte	$02, $04, $02, $00, $fc, $f8, $f4, $f3, $f4, $f7, $fb, $ff, $02, $05, $05, $02
	byte	$ff, $fb, $f6, $f3, $f3, $f4, $fa, $fe, $02, $05, $06, $05, $01, $fc, $f8, $f4
	byte	$f2, $f3, $f7, $fc, $ff, $05, $08, $06, $04, $00, $fa, $f6, $f2, $f2, $f4, $fa
	byte	$ff, $04, $08, $08, $06, $02, $fc, $f7, $f3, $f0, $f2, $f7, $fc, $02, $06, $09
	byte	$08, $05, $00, $fa, $f3, $f0, $f0, $f3, $fa, $ff, $05, $09, $09, $08, $01, $fb
	byte	$f6, $f0, $ef, $f0, $f6, $fc, $02, $08, $0a, $09, $05, $00, $f8, $f2, $ee, $ef
	byte	$f2, $fa, $ff, $06, $0a, $0c, $08, $02, $fb, $f4, $ef, $ee, $ef, $f4, $fc, $04
	byte	$0a, $0c, $0a, $06, $00, $f8, $f0, $ee, $ee, $f2, $fa, $ff, $08, $0c, $0d, $0a
	byte	$02, $fb, $f4, $ef, $ec, $ef, $f4, $fe, $04, $0c, $0e, $0d, $08, $00, $f8, $f0
	byte	$ec, $ec, $f2, $fa, $01, $09, $0d, $0e, $0a, $04, $fc, $f3, $ee, $ec, $ef, $f4
	byte	$fe, $05, $0c, $0e, $0d, $08, $00, $f7, $f0, $ec, $ec, $f2, $fa, $02, $09, $0e
	byte	$10, $0c, $05, $fc, $f3, $ee, $eb, $ee, $f4, $fe, $06, $0d, $10, $0e, $08, $00
	byte	$f7, $ef, $eb, $eb, $f0, $fa, $01, $09, $0e, $10, $0c, $05, $fb, $f3, $eb, $ea
	byte	$ee, $f4, $fe, $06, $0d, $10, $0e, $08, $00, $f6, $ee, $ea, $ea, $ef, $f8, $01
	byte	$09, $10, $10, $0c, $04, $fb, $f0, $ea, $e8, $ec, $f4, $fe, $06, $0e, $11, $10
	byte	$08, $ff, $f6, $ec, $e8, $ea, $ef, $fa, $02, $0c, $11, $11, $0d, $04, $f8, $ef
	byte	$ea, $e7, $ec, $f4, $ff, $09, $10, $12, $10, $09, $00, $f3, $eb, $e7, $e8, $f0
	byte	$fa, $04, $0e, $12, $12, $0e, $04, $fa, $ee, $e8, $e7, $eb, $f4, $ff, $0a, $11
	byte	$14, $11, $0a, $fe, $f3, $ea, $e5, $e8, $ef, $fb, $05, $0e, $14, $14, $0d, $02
	byte	$f8, $ee, $e7, $e7, $eb, $f4, $ff, $0c, $12, $14, $11, $08, $fe, $f0, $e8, $e5
	byte	$e8, $ef, $fc, $06, $11, $15, $12, $0c, $00, $f6, $eb, $e5, $e5, $ea, $f6, $ff
	byte	$0d, $14, $15, $10, $05, $fb, $ee, $e5, $e3, $e7, $f2, $fc, $09, $12, $16, $14
	byte	$0c, $00, $f3, $e8, $e3, $e4, $eb, $f7, $04, $10, $15, $16, $10, $05, $f8, $ec
	byte	$e4, $e1, $e7, $f2, $ff, $0c, $14, $18, $14, $0a, $fe, $f0, $e7, $e1, $e4, $ec
	byte	$fb, $06, $11, $18, $18, $10, $04, $f6, $eb, $e1, $e1, $e7, $f4, $02, $0e, $18
	byte	$19, $15, $0a, $fc, $ee, $e4, $e0, $e4, $ef, $fc, $09, $16, $1b, $18, $10, $01
	byte	$f3, $e7, $e0, $e1, $ea, $f7, $06, $12, $19, $1b, $15, $06, $f8, $eb, $e1, $e0
	byte	$e5, $f2, $ff, $0e, $19, $1c, $18, $0c, $00, $ef, $e3, $df, $e1, $ec, $fa, $09
	byte	$15, $1c, $1b, $11, $04, $f3, $e7, $df, $df, $e7, $f4, $02, $12, $1b, $1c, $16
	byte	$08, $fb, $eb, $e0, $dd, $e3, $ee, $ff, $0e, $19, $1d, $1b, $10, $00, $f0, $e3
	byte	$dc, $df, $e7, $f7, $08, $15, $1d, $1c, $14, $05, $f6, $e5, $dd, $dc, $e3, $f2
	byte	$ff, $11, $1c, $1f, $19, $0c, $fb, $eb, $e0, $db, $df, $ea, $fb, $0c, $19, $1f
	byte	$1d, $10, $01, $f0, $e1, $db, $dc, $e7, $f7, $06, $16, $1f, $20, $16, $08, $f6
	byte	$e7, $dc, $db, $e1, $f2, $ff, $12, $1d, $21, $1b, $0d, $fb, $eb, $df, $d9, $df
	byte	$ea, $fc, $0e, $1b, $21, $1f, $15, $01, $f0, $e1, $d9, $db, $e5, $f4, $09, $18
	byte	$20, $20, $18, $08, $f7, $e5, $db, $d9, $e1, $ef, $ff, $14, $1f, $23, $1c, $0d
	byte	$fe, $eb, $dd, $d8, $dc, $ea, $fb, $0e, $1c, $23, $20, $12, $02, $ef, $e0, $d8
	byte	$d9, $e3, $f4, $08, $16, $21, $21, $18, $08, $f6, $e5, $db, $d8, $df, $ef, $ff
	byte	$12, $1f, $21, $1d, $0d, $fc, $e8, $dc, $d8, $dc, $ea, $fb, $0c, $1c, $23, $20
	byte	$12, $01, $f0, $df, $d8, $d9, $e4, $f7, $09, $19, $21, $21, $16, $08, $f6, $e3
	byte	$d9, $d8, $e0, $f2, $02, $14, $20, $23, $1c, $0c, $fa, $e8, $db, $d7, $dd, $ea
	byte	$fc, $10, $1f, $24, $20, $12, $00, $ee, $dd, $d7, $d9, $e7, $f7, $0c, $1b, $24
	byte	$23, $18, $05, $f3, $e3, $d8, $d9, $e1, $f2, $06, $16, $23, $24, $1c, $0c, $f8
	byte	$e7, $d9, $d7, $dd, $ee, $ff, $11, $20, $24, $1f, $12, $00, $eb, $dc, $d7, $db
	byte	$e7, $fc, $0c, $1d, $24, $21, $15, $05, $f0, $e0, $d7, $d8, $e3, $f3, $08, $18
	byte	$23, $23, $19, $0a, $f7, $e3, $d8, $d7, $dd, $ef, $ff, $14, $21, $24, $1d, $0d
	byte	$fb, $e8, $db, $d5, $d9, $ea, $fc, $0e, $1f, $24, $20, $15, $00, $ee, $dd, $d5
	byte	$d7, $e3, $f4, $09, $19, $24, $23, $18, $08, $f6, $e0, $d7, $d5, $df, $f0, $04
	byte	$16, $21, $24, $1d, $0d, $fb, $e7, $d9, $d5, $db, $ec, $ff, $12, $1f, $25, $20
	byte	$12, $00, $eb, $db, $d5, $d8, $e7, $fa, $0e, $1c, $25, $23, $18, $04, $f0, $e0
	byte	$d5, $d7, $e0, $f4, $06, $19, $24, $25, $1c, $0a, $f7, $e5, $d7, $d5, $dd, $ec
	byte	$ff, $14, $21, $25, $1f, $0e, $fc, $e7, $d9, $d4, $d9, $ea, $fc, $0e, $1f, $25
	byte	$21, $15, $00, $ee, $db, $d5, $d8, $e4, $f4, $0c, $1b, $25, $24, $18, $06, $f2
	byte	$df, $d5, $d5, $df, $f3, $06, $18, $24, $24, $1c, $0a, $f6, $e4, $d7, $d4, $dc
	byte	$ec, $ff, $14, $21, $25, $1f, $10, $fb, $e8, $d8, $d4, $d9, $e7, $fc, $0e, $1f
	byte	$25, $21, $12, $01, $eb, $dc, $d4, $d7, $e3, $f7, $09, $1c, $25, $24, $18, $05
	byte	$f0, $e0, $d5, $d4, $df, $ef, $06, $18, $24, $25, $1c, $0c, $f6, $e4, $d7, $d4
	byte	$db, $ec, $ff, $14, $23, $27, $1f, $10, $00, $e8, $d9, $d4, $d9, $ea, $fc, $11
	byte	$1f, $27, $23, $15, $00, $eb, $db, $d4, $d7, $e4, $f7, $0d, $1d, $25, $24, $16
	byte	$05, $ef, $dd, $d4, $d5, $e1, $f4, $08, $1b, $24, $25, $1b, $08, $f6, $e1, $d5
	byte	$d4, $dd, $ef, $06, $18, $24, $25, $1d, $0c, $f8, $e5, $d7, $d4, $db, $ec, $ff
	byte	$14, $21, $25, $20, $11, $fb, $e8, $d8, $d3, $d9, $e7, $fb, $11, $1f, $25, $21
	byte	$15, $01, $ee, $dc, $d4, $d7, $e4, $f7, $0c, $1c, $25, $23, $18, $05, $f0, $dd
	byte	$d5, $d4, $df, $f2, $06, $19, $24, $24, $1b, $08, $f3, $e0, $d5, $d4, $df, $ef
	byte	$04, $16, $23, $25, $1d, $0d, $f8, $e5, $d7, $d4, $dc, $ec, $ff, $14, $21, $25
	byte	$20, $10, $fc, $e7, $d9, $d4, $db, $ea, $fc, $11, $21, $27, $21, $12, $00, $eb
	byte	$db, $d4, $d8, $e7, $fa, $0e, $1f, $25, $23, $15, $01, $ee, $dc, $d5, $d7, $e3
	byte	$f7, $09, $1c, $25, $23, $18, $05, $f0, $dd, $d5, $d7, $e1, $f4, $06, $19, $24
	byte	$25, $19, $08, $f6, $e0, $d7, $d4, $dd, $f0, $04, $18, $23, $25, $1d, $0a, $f7
	byte	$e3, $d7, $d4, $dc, $ef, $ff, $14, $21, $25, $1f, $10, $fb, $e7, $d8, $d4, $d9
	byte	$e8, $ff, $10, $1f, $25, $20, $11, $fc, $eb, $d9, $d4, $d9, $e7, $fc, $0e, $1d
	byte	$24, $20, $12, $00, $eb, $db, $d4, $d8, $e4, $fa, $0c, $1d, $24, $21, $15, $02
	byte	$ec, $dd, $d4, $d7, $e4, $f7, $09, $1c, $24, $23, $15, $04, $ee, $e0, $d5, $d7
	byte	$e1, $f4, $09, $19, $24, $23, $18, $06, $f3, $e0, $d7, $d7, $e0, $f3, $06, $19
	byte	$23, $24, $1b, $0a, $f6, $e1, $d7, $d7, $df, $ef, $04, $16, $23, $25, $1b, $0a
	byte	$f8, $e5, $d8, $d7, $dd, $ef, $ff, $14, $21, $24, $1d, $0d, $fb, $e5, $d9, $d5
	byte	$dc, $ea, $ff, $11, $20, $24, $1d, $10, $fb, $e8, $db, $d5, $db, $ea, $ff, $10
	byte	$1f, $24, $1d, $10, $00, $eb, $db, $d5, $d9, $e8, $fa, $0e, $1d, $23, $20, $10
	byte	$00, $ec, $dd, $d5, $d9, $e7, $fa, $0c, $1c, $23, $20, $12, $00, $ec, $dd, $d5
	byte	$d8, $e4, $f7, $09, $1c, $23, $20, $12, $00, $ee, $dd, $d5, $d8, $e4, $f7, $09
	byte	$19, $23, $21, $15, $05, $f0, $e0, $d7, $d8, $e4, $f4, $09, $19, $23, $21, $16
	byte	$04, $f2, $e1, $d7, $d8, $e3, $f4, $09, $18, $23, $23, $18, $06, $f6, $e3, $d8
	byte	$d8, $e1, $f4, $06, $18, $21, $23, $19, $0a, $f6, $e4, $d9, $d8, $e1, $f3, $04
	byte	$16, $21, $23, $1b, $0a, $f7, $e5, $d9, $d8, $e0, $ef, $ff, $14, $20, $23, $1c
	byte	$0a, $fb, $e7, $db, $d8, $df, $ef, $ff, $11, $1f, $23, $1c, $0e, $fb, $eb, $db
	byte	$d7, $dd, $ea, $ff, $0e, $1c, $23, $1d, $10, $00, $eb, $dc, $d7, $dc, $ea, $fc
	byte	$0c, $1c, $21, $1d, $11, $00, $ee, $dd, $d7, $db, $e8, $fa, $0d, $1b, $21, $1f
	byte	$11, $01, $f0, $e0, $d8, $d9, $e4, $f8, $09, $19, $21, $1f, $15, $04, $f0, $e1
	byte	$d8, $d9, $e4, $f4, $09, $18, $20, $20, $16, $05, $f3, $e1, $d9, $d9, $e3, $f4
	byte	$06, $14, $20, $21, $16, $08, $f6, $e5, $db, $d9, $e3, $f2, $04, $14, $1f, $21
	byte	$19, $0a, $f8, $e8, $dc, $d9, $e0, $ef, $ff, $11, $1f, $21, $1b, $0d, $fb, $eb
	byte	$dd, $d9, $df, $ee, $fe, $10, $1c, $21, $1c, $10, $00, $ec, $e0, $d9, $dd, $ea
	byte	$fc, $0c, $1b, $20, $1d, $11, $00, $ee, $e0, $d9, $dc, $e8, $fa, $09, $18, $20
	byte	$1d, $12, $04, $f0, $e3, $db, $db, $e5, $f4, $06, $15, $1f, $1f, $15, $05, $f3
	byte	$e4, $db, $db, $e3, $f2, $04, $14, $1d, $1f, $16, $08, $f8, $e5, $db, $d9, $e1
	byte	$ef, $ff, $11, $1c, $1f, $18, $0a, $f8, $e8, $dd, $d9, $e0, $ee, $ff, $0e, $1b
	byte	$1f, $1b, $0d, $fc, $ec, $e0, $db, $df, $ea, $fc, $0c, $19, $1f, $1b, $10, $00
	byte	$ef, $e1, $db, $dd, $e8, $fa, $09, $16, $1f, $1d, $12, $02, $f2, $e4, $dc, $dc
	byte	$e7, $f4, $06, $14, $1f, $1d, $15, $05, $f7, $e5, $dd, $dc, $e4, $f2, $04, $12
	byte	$1c, $1f, $16, $09, $fa, $e8, $df, $dc, $e1, $ef, $ff, $10, $1b, $1d, $19, $0c
	byte	$fc, $eb, $e0, $dc, $e0, $ec, $fc, $0c, $19, $1d, $1b, $0d, $00, $ee, $e3, $dc
	byte	$df, $ea, $fa, $08, $16, $1d, $1b, $11, $01, $f3, $e4, $dc, $dd, $e7, $f7, $05
	byte	$14, $1c, $1c, $12, $05, $f6, $e7, $dd, $dd, $e4, $f3, $ff, $11, $1b, $1c, $15
	byte	$08, $f8, $eb, $df, $dc, $e3, $ee, $ff, $0d, $19, $1c, $18, $0c, $fe, $ec, $e1
	byte	$dc, $e0, $ea, $fb, $09, $16, $1c, $19, $0d, $00, $f0, $e4, $dd, $df, $ea, $f7
	byte	$06, $14, $1b, $1b, $12, $05, $f4, $e5, $df, $df, $e7, $f4, $04, $12, $1b, $1c
	byte	$15, $08, $f8, $eb, $e0, $df, $e4, $f2, $ff, $0d, $19, $1c, $16, $0a, $fb, $ee
	byte	$e1, $df, $e3, $ee, $fe, $0a, $16, $1b, $18, $0d, $00, $f0, $e3, $df, $e0, $ea
	byte	$f8, $08, $14, $1b, $19, $11, $02, $f3, $e7, $e0, $e0, $ea, $f4, $02, $11, $19
	byte	$19, $12, $05, $f8, $ea, $e1, $df, $e4, $f2, $ff, $0e, $16, $1b, $15, $0a, $fb
	byte	$ee, $e3, $df, $e4, $ee, $fc, $09, $14, $19, $16, $0d, $00, $f2, $e5, $e0, $e0
	byte	$ea, $f7, $04, $11, $18, $18, $10, $02, $f6, $e8, $e0, $e0, $e7, $f4, $01, $0e
	byte	$16, $18, $12, $08, $fa, $ec, $e3, $e0, $e5, $f0, $ff, $0c, $15, $18, $15, $0a
	byte	$fc, $f0, $e5, $e0, $e3, $ec, $fb, $06, $14, $18, $16, $0d, $01, $f3, $e7, $e1
	byte	$e3, $ea, $f8, $04, $11, $18, $18, $11, $05, $f7, $eb, $e3, $e1, $e8, $f4, $ff
	byte	$0d, $16, $18, $12, $09, $fb, $ee, $e4, $e1, $e5, $ef, $fe, $09, $14, $18, $15
	byte	$0c, $fe, $f2, $e7, $e1, $e4, $ec, $f8, $06, $11, $16, $15, $0e, $01, $f6, $ea
	byte	$e3, $e3, $ea, $f4, $02, $0e, $15, $16, $11, $06, $f8, $ec, $e4, $e3, $e7, $f2
	byte	$fe, $0a, $14, $16, $12, $09, $fe, $f0, $e5, $e3, $e5, $ee, $fb, $06, $11, $15
	byte	$15, $0c, $00, $f3, $e8, $e3, $e4, $ea, $f6, $04, $0e, $14, $15, $10, $02, $f8
	byte	$eb, $e4, $e3, $e8, $f4, $ff, $0a, $14, $15, $10, $06, $fb, $ef, $e5, $e3, $e7
	byte	$f0, $fb, $08, $11, $15, $12, $0a, $00, $f2, $e8, $e4, $e5, $ec, $f8, $04, $0e
	byte	$14, $14, $0d, $02, $f6, $ec, $e5, $e4, $ea, $f4, $ff, $0c, $12, $15, $10, $05
	byte	$fb, $ef, $e7, $e4, $e8, $f2, $fe, $08, $11, $15, $11, $0a, $00, $f3, $ea, $e4
	byte	$e7, $ef, $fa, $05, $0e, $14, $12, $0c, $02, $f6, $ec, $e5, $e5, $ea, $f6, $ff
	byte	$0c, $12, $14, $10, $05, $fb, $ef, $e7, $e5, $e8, $f2, $fc, $08, $10, $14, $10
	byte	$08, $fe, $f3, $ea, $e5, $e7, $ef, $fa, $05, $0d, $12, $11, $0a, $01, $f6, $ec
	byte	$e5, $e5, $ec, $f4, $ff, $09, $11, $12, $0d, $04, $fa, $ef, $e7, $e5, $ea, $f2
	byte	$fc, $06, $0e, $12, $10, $08, $fe, $f2, $ea, $e5, $e8, $ef, $fa, $04, $0d, $11
	byte	$11, $0c, $01, $f6, $ec, $e7, $e7, $ec, $f6, $ff, $09, $10, $12, $0d, $05, $fb
	byte	$f0, $ea, $e7, $ea, $f2, $fc, $06, $0e, $12, $10, $08, $00, $f4, $ec, $e7, $ea
	byte	$ef, $fa, $04, $0c, $11, $11, $0c, $02, $f8, $ef, $e8, $e8, $ec, $f6, $ff, $09
	byte	$10, $11, $0d, $05, $fb, $f2, $eb, $e8, $ea, $f2, $fc, $06, $0d, $11, $10, $08
	byte	$00, $f6, $ec, $e8, $ea, $ef, $f8, $01, $0a, $10, $10, $0a, $01, $f8, $ef, $ea
	byte	$e8, $ec, $f4, $ff, $06, $0e, $10, $0d, $05, $fc, $f3, $eb, $e8, $ea, $f0, $fa
	byte	$02, $0c, $0e, $0e, $09, $00, $f7, $ee, $ea, $ea, $ee, $f7, $ff, $08, $0e, $0e
	byte	$0a, $04, $fb, $f2, $eb, $e8, $ec, $f3, $fb, $05, $0c, $0e, $0d, $08, $ff, $f6
	byte	$ee, $ea, $ea, $ef, $f8, $01, $09, $0e, $0e, $0a, $02, $fa, $f2, $eb, $ea, $ee
	byte	$f4, $fe, $06, $0d, $0e, $0d, $05, $fe, $f6, $ee, $eb, $ec, $f2, $fa, $02, $0a
	byte	$0e, $0d, $09, $00, $f8, $f0, $eb, $eb, $ef, $f7, $ff, $08, $0d, $0e, $0a, $04
	byte	$fc, $f4, $ee, $eb, $ee, $f3, $fc, $04, $0a, $0d, $0d, $06, $00, $f6, $ef, $eb
	byte	$ec, $f0, $f8, $ff, $08, $0c, $0d, $0a, $02, $fb, $f3, $ee, $eb, $ee, $f4, $fc
	byte	$04, $0a, $0d, $0c, $05, $fe, $f6, $ef, $ec, $ec, $f2, $f8, $01, $08, $0c, $0c
	byte	$08, $01, $fb, $f2, $ec, $eb, $ef, $f4, $fe, $04, $09, $0c, $0a, $04, $fe, $f6
	byte	$ef, $ec, $ec, $f2, $fa, $ff, $08, $0c, $0a, $06, $00, $f8, $f2, $ee, $ec, $ef
	byte	$f6, $fe, $04, $0a, $0c, $09, $04, $fe, $f6, $ef, $ec, $ee, $f4, $fb, $01, $08
	byte	$0c, $0a, $06, $00, $fa, $f2, $ee, $ee, $f0, $f7, $ff, $05, $0a, $0c, $09, $04
	byte	$fc, $f6, $f0, $ee, $ef, $f4, $fc, $02, $08, $0a, $0a, $06, $00, $f8, $f3, $ee
	byte	$ee, $f2, $f8, $ff, $05, $09, $0a, $08, $02, $fc, $f4, $f0, $ee, $ef, $f4, $fc
	byte	$02, $08, $0a, $0a, $05, $00, $f8, $f3, $ef, $ef, $f2, $f8, $ff, $04, $09, $0a
	byte	$08, $02, $fc, $f6, $f0, $ee, $ef, $f4, $fb, $01, $06, $09, $09, $05, $ff, $f8
	byte	$f2, $ef, $ef, $f2, $f8, $ff, $04, $08, $09, $06, $02, $fb, $f6, $f0, $ef, $f0
	byte	$f4, $fb, $01, $06, $09, $08, $05, $ff, $f8, $f3, $ef, $ef, $f3, $f8, $ff, $04
	byte	$08, $09, $06, $01, $fb, $f6, $f0, $ef, $f0, $f4, $fb, $01, $06, $09, $08, $04
	byte	$00, $f8, $f3, $f0, $f0, $f3, $f8, $ff, $04, $08, $09, $06, $01, $fc, $f6, $f2
	byte	$f0, $f2, $f6, $fc, $01, $06, $09, $08, $04, $ff, $f8, $f4, $f0, $f0, $f4, $fa
	byte	$ff, $04, $08, $08, $06, $01, $fc, $f6, $f2, $f0, $f2, $f7, $fc, $02, $06, $08
	byte	$08, $04, $ff, $f8, $f3, $f0, $f2, $f4, $fa, $ff, $04, $06, $08, $05, $00, $fb
	byte	$f6, $f2, $f0, $f2, $f7, $fc, $01, $05, $06, $06, $02, $fe, $f8, $f3, $f2, $f2
	byte	$f4, $fa, $ff, $04, $06, $06, $04, $00, $fb, $f6, $f2, $f0, $f3, $f7, $fc, $01
	byte	$05, $06, $05, $01, $fc, $f8, $f3, $f2, $f2, $f6, $fa, $ff, $04, $06, $06, $04
	byte	$00, $fb, $f6, $f2, $f2, $f3, $f8, $fe, $01, $05, $06, $05, $01, $fc, $f7, $f3
	byte	$f2, $f3, $f7, $fb, $ff, $04, $06, $05, $02, $ff, $fa, $f6, $f3, $f3, $f6, $fa
	byte	$ff, $02, $05, $05, $04, $00, $fb, $f7, $f3, $f3, $f4, $f7, $fc, $00, $04, $06
	byte	$05, $01, $fe, $f8, $f6, $f3, $f3, $f6, $fa, $ff, $02, $05, $05, $02, $00, $fb
	byte	$f7, $f3, $f3, $f4, $f8, $fe, $01, $04, $05, $04, $01, $fe, $f8, $f4, $f3, $f4
	byte	$f7, $fb, $ff, $02, $04, $04, $01, $ff, $fa, $f6, $f3, $f3, $f4, $f8, $fe, $01
	byte	$04, $04, $02, $00, $fb, $f7, $f4, $f3, $f4, $f7, $fb, $ff, $02, $04, $04, $00
	byte	$fe, $f8, $f6, $f3, $f4, $f6, $fa, $ff, $01, $04, $04, $01, $ff, $fb, $f7, $f4
	byte	$f3, $f4, $f8, $fc, $ff, $02, $04, $02, $00, $fc, $f8, $f6, $f3, $f4, $f7, $fb
	byte	$ff, $02, $04, $04, $01, $fe, $fa, $f7, $f4, $f4, $f7, $fa, $fe, $01, $04, $04
	byte	$01, $ff, $fc, $f8, $f6, $f4, $f6, $f8, $fc, $ff, $02, $04, $02, $00, $fc, $fa
	byte	$f7, $f4, $f6, $f8, $fb, $ff, $01, $02, $02, $01, $ff, $fb, $f7, $f6, $f4, $f7
	byte	$fa, $fe, $ff, $02, $02, $01, $ff, $fc, $f8, $f6, $f6, $f6, $f8, $fc, $ff, $01
	byte	$02, $01, $00, $fe, $fa, $f7, $f4, $f6, $f7, $fa, $fe, $00, $01, $01, $00, $fe
	byte	$fb, $f7, $f6, $f4, $f7, $fa, $fc, $ff, $01, $01, $00, $ff, $fb, $f8, $f6, $f6
	byte	$f6, $f8, $fb, $fe, $00, $01, $01, $ff, $fc, $fa, $f7, $f6, $f6, $f7, $fa, $fc
	byte	$ff, $01, $01, $00, $fe, $fb, $f7, $f6, $f6, $f7, $fa, $fc, $ff, $01, $01, $00
	byte	$ff, $fc, $f8, $f7, $f6, $f7, $f8, $fc, $ff, $00, $01, $01, $ff, $fe, $fa, $f8
	byte	$f7, $f7, $f8, $fb, $fe, $ff, $01, $01, $00, $fe, $fb, $f8, $f7, $f7, $f8, $fa
	byte	$fc, $ff, $01, $01, $00, $ff, $fc, $fa, $f7, $f7, $f7, $fa, $fb, $ff, $00, $01
	byte	$00, $ff, $fc, $fa, $f8, $f7, $f7, $f8, $fb, $fe, $ff, $00, $00, $ff, $fe, $fb
	byte	$f8, $f7, $f7, $f8, $fa, $fc, $ff, $ff, $00, $ff, $fe, $fb, $f8, $f7, $f7, $f7
	byte	$fa, $fb, $fe, $ff, $ff, $ff, $fe, $fb, $fa, $f7, $f7, $f7, $f8, $fb, $fc, $ff
	byte	$ff, $ff, $ff, $fc, $fa, $f8, $f7, $f7, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fc
	byte	$fb, $f8, $f7, $f7, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fb, $fa, $f7, $f7
	byte	$f8, $fa, $fb, $fe, $ff, $ff, $ff, $ff, $fc, $fb, $f8, $f7, $f8, $fa, $fb, $fc
	byte	$ff, $ff, $ff, $ff, $fc, $fb, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff
	byte	$fe, $fb, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fa, $fa
	byte	$f8, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $f8, $fb
	byte	$fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $f8, $fa, $fb, $fc, $fe, $ff
	byte	$fe, $fc, $fb, $fa, $f8, $f8, $f8, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fb
	byte	$fa, $f8, $f8, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fb, $fa, $f8, $f8, $fa
	byte	$fa, $fb, $fc, $fe, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fb, $fc, $fe
	byte	$fe, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc
	byte	$fb, $fa, $fa, $fa, $fb, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fa, $fa
	byte	$fb, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fb, $fa, $fa, $fb, $fc, $fc
	byte	$fe, $fe, $fe, $fc, $fc, $fb, $fb, $fa, $fa, $fb, $fb, $fc, $fc, $fe, $fe, $fe
	byte	$fc, $fb, $fb, $fb, $fa, $fb, $fb, $fc, $fc, $fc, $fe, $fc, $fc, $fb, $fb, $fb
	byte	$fa, $fa, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fb, $fb, $fb
	byte	$fc[5]
	byte	$fb[8]
	byte	$fc[5]
	byte	$fb[6]
	byte	$fc[7]
	byte	$fb, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fe, $fc, $fc, $fc, $fc, $fb, $fb, $fb
	byte	$fc[86]
	byte	$fb[7]
	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fc, $fc, $fc
	byte	$fc, $fc, $fc, $fc, $fb, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
	byte	$fc, $fc, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $fe
	byte	$fc, $fc, $fc, $fc, $fb, $fb, $fb, $fc, $fc, $fc, $fe, $fe, $fe, $fc, $fc, $fc
	byte	$fb, $fb, $fb, $fb, $fc, $fc, $fc, $fe, $fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb
	byte	$fc[7]
	byte	$fb[6]
	byte	$fc[6]
	byte	$fb[6]
	byte	$fc[6]
	byte	$fb[6]
	byte	$fc, $fc, $fe, $fe, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe
	byte	$fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb
	byte	$fb, $fb, $fb, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb
	byte	$fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe
	byte	$fe, $fe, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe, $fe, $fe, $fc, $fb
	byte	$fb, $fb, $fb, $fb, $fc, $fc, $fe, $fe, $fe, $fe, $fc, $fb, $fb, $fa, $fa, $fb
	byte	$fc, $fc, $fe, $fe, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fe, $fe
	byte	$fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe, $fc, $fc, $fb
	byte	$fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc, $fc, $fb, $fa, $fa, $fa
	byte	$fb, $fc, $fe, $ff, $ff, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fb, $fc, $fe, $ff
	byte	$ff, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc
	byte	$fb, $fa, $fa, $fb, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $fa, $fa
	byte	$fb, $fc, $fe, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $fa, $fa, $fb, $fc, $fe, $ff
	byte	$ff, $ff, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fc, $fe, $fe, $ff, $ff, $fe, $fc
	byte	$fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $fa, $fa
	byte	$fa, $fb, $fc, $fe, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $fa, $fb, $fc, $fe
	byte	$ff, $ff, $fe, $fe, $fb, $fb, $fa, $fa, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe
	byte	$fc, $fb, $fa, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $fa
	byte	$fa, $fb, $fc, $fe, $ff, $ff, $ff, $ff, $fc, $fb, $fa, $fa, $fa, $fa, $fc, $fe
	byte	$ff, $ff, $ff, $ff, $fe, $fb, $fa, $fa, $fa, $fa, $fb, $fe, $ff, $ff, $ff, $ff
	byte	$fe, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $ff, $ff, $ff, $ff, $fe, $fc, $fb, $fa
	byte	$f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $fa, $fb, $fc
	byte	$fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff
	byte	$fe, $fc, $fb, $fa, $f8, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fb, $fa
	byte	$f8, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f8, $fa, $fb
	byte	$fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $f8, $f8, $fa, $fa, $fc, $ff, $ff, $ff
	byte	$ff, $ff, $fc, $fb, $fa, $f8, $fa, $fa, $fc, $fe, $ff, $ff, $00, $ff, $fe, $fb
	byte	$fa, $f8, $fa, $fa, $fc, $fe, $ff, $00, $00, $ff, $fe, $fc, $fa, $fa, $f8, $fa
	byte	$fb, $fe, $ff, $ff, $00, $ff, $fe, $fc, $fb, $fa, $f8, $fa, $fb, $fc, $ff, $ff
	byte	$00, $ff, $ff, $fc, $fb, $fa, $f8, $fa, $fa, $fc, $fe, $ff, $00, $ff, $ff, $fe
	byte	$fb, $fa, $f8, $f8, $fa, $fb, $fe, $ff, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f8
	byte	$fa, $fb, $fc, $ff, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f8, $f8, $fa, $fc, $ff
	byte	$ff, $00, $ff, $fe, $fc, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $ff
	byte	$fc, $fb, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $00, $00, $ff, $fe, $fb, $fa, $f8
	byte	$f8, $fa, $fb, $fe, $ff, $00, $00, $ff, $ff, $fc, $fb, $f8, $f8, $fa, $fb, $fe
	byte	$ff, $00, $00, $00, $ff, $fc, $fb, $fa, $f8, $fa, $fb, $fc, $ff, $00, $00, $00
	byte	$ff, $fe, $fb, $fa, $f8, $fa, $fa, $fc, $ff, $ff, $00, $00, $ff, $fe, $fc, $fa
	byte	$f8, $f8, $fa, $fb, $fe, $ff, $00, $00, $00, $ff, $fc, $fa, $f8, $f8, $fa, $fb
	byte	$fc, $ff, $ff, $00, $00, $ff, $fc, $fb, $fa, $f8, $f8, $fa, $fc, $ff, $ff, $00
	byte	$00, $ff, $fe, $fb, $fa, $f8, $f8, $fa, $fb, $fe, $ff, $00, $00, $ff, $fe, $fb
	byte	$fa, $f8, $f8, $f8, $fb, $fc, $ff, $ff, $00, $ff, $ff, $fc, $fb, $f8, $f8, $f8
	byte	$fa, $fc, $fe, $ff, $00, $00, $ff, $fe, $fb, $fa, $f8, $f8, $fa, $fc, $fe, $ff
	byte	$00, $00, $ff, $fe, $fc, $fa, $f8, $f8, $fa, $fb, $fe, $ff, $00, $01, $00, $ff
	byte	$fc, $fb, $f8, $f8, $fa, $fb, $fe, $ff, $00, $01, $00, $ff, $fe, $fb, $fa, $f8
	byte	$fa, $fa, $fc, $ff, $00, $01, $00, $00, $fe, $fc, $fa, $f8, $f8, $fa, $fc, $fe
	byte	$ff, $01, $01, $00, $ff, $fc, $fa, $f8, $f8, $fa, $fb, $fe, $ff, $00, $01, $00
	byte	$ff, $fc, $fb, $f8, $f8, $f8, $fa, $fc, $ff, $00, $01, $01, $ff, $fe, $fb, $f8
	byte	$f8, $f8, $fa, $fc, $fe, $ff, $01, $01, $00, $ff, $fc, $fa, $f8, $f8, $f8, $fb
	byte	$fe, $ff, $00, $01, $00, $ff, $fc, $fb, $f8, $f8, $f8, $fa, $fc, $ff, $00, $01
	byte	$01, $ff, $fe, $fb, $fa, $f8, $f8, $fa, $fc, $ff, $ff, $01, $01, $00, $ff, $fc
	byte	$fa, $f8, $f8, $fa, $fb, $fe, $ff, $01, $02, $01, $00, $fc, $fb, $f8, $f8, $f8
	byte	$fb, $fe, $ff, $01, $02, $01, $00, $fe, $fb, $fa, $f8, $f8, $fa, $fc, $ff, $01
	byte	$02, $02, $01, $ff, $fc, $fa, $f8, $f8, $fa, $fb, $fe, $00, $01, $02, $01, $00
	byte	$fe, $fb, $f8, $f8, $f8, $fb, $fc, $ff, $01, $02, $02, $00, $ff, $fb, $fa, $f7
	byte	$f8, $fa, $fc, $ff, $01, $02, $02, $01, $ff, $fc, $fa, $f8, $f7, $f8, $fb, $fe
	byte	$ff, $01, $02, $01, $00, $fe, $fa, $f8, $f7, $f8, $fa, $fc, $ff, $01, $02, $02
	byte	$00, $fe, $fb, $f8, $f7, $f7, $f8, $fb, $ff, $00, $01, $02, $01, $ff, $fc, $fa
	byte	$f8, $f7, $f8, $fa, $fe, $ff, $01, $02, $01, $00, $fe, $fb, $f8, $f7, $f8, $fa
	byte	$fc, $ff, $01, $02, $02, $01, $ff, $fc, $fa, $f7, $f7, $fa, $fc, $ff, $01, $02
	byte	$02, $02, $00, $fe, $fa, $f8, $f7, $f8, $fb, $fe, $00, $02, $04, $02, $01, $ff
	byte	$fb, $f8, $f7, $f7, $fa, $fc, $ff, $01, $04, $04, $02, $00, $fc, $fa, $f8, $f7
	byte	$f8, $fb, $ff, $00, $02, $04, $02, $00, $fe, $fb, $f8, $f7, $f7, $fa, $fc, $ff
	byte	$01, $04, $02, $01, $ff, $fb, $f8, $f7, $f7, $f8, $fb, $fe, $01, $02, $04, $02
	byte	$00, $fe, $fa, $f7, $f7, $f7, $fa, $fe, $ff, $02, $04, $02, $01, $ff, $fb, $f8
	byte	$f6, $f7, $f8, $fb, $ff, $01, $02, $04, $01, $ff, $fc, $fa, $f7, $f7, $f7, $fa
	byte	$fe, $ff, $02, $04, $02, $01, $fe, $fa, $f8, $f7, $f7, $f8, $fc, $ff, $01, $04
	byte	$04, $02, $00, $fc, $fa, $f7, $f7, $f8, $fb, $ff, $01, $04, $04, $04, $01, $fe
	byte	$fb, $f8, $f7, $f7, $fa, $fc, $ff, $02, $04, $04, $02, $00, $fc, $f8, $f7, $f7
	byte	$f8, $fb, $ff, $01, $04, $04, $04, $01, $fe, $fb, $f7, $f7, $f7, $fa, $fe, $00
	byte	$02, $05, $04, $02, $ff, $fb, $f8, $f7, $f7, $f8, $fb, $ff, $01, $04, $05, $02
	byte	$00, $fc, $fa, $f7, $f6, $f7, $fa, $fc, $00, $02, $04, $04, $01, $ff, $fb, $f7
	byte	$f6, $f6, $f8, $fb, $ff, $01, $04, $04, $02, $00, $fc, $f8, $f6, $f6, $f6, $fa
	byte	$fc, $ff, $02, $04, $04, $01, $fe, $fa, $f7, $f6, $f6, $f7, $fb, $ff, $01, $04
	byte	$04, $02, $00, $fc, $f8, $f6, $f6, $f7, $fa, $fe, $01, $04, $05, $04, $01, $ff
	byte	$fb, $f7, $f6, $f6, $f8, $fb, $ff, $02, $04, $05, $02, $00, $fc, $f8, $f6, $f6
	byte	$f7, $fa, $fe, $01, $04, $05, $05, $02, $ff, $fb, $f7, $f6, $f6, $f8, $fc, $ff
	byte	$02, $05, $05, $04, $00, $fc, $f8, $f6, $f6, $f7, $fa, $fe, $01, $04, $05, $04
	byte	$02, $ff, $fb, $f7, $f6, $f6, $f8, $fb, $ff, $02, $05, $05, $04, $00, $fc, $f8
	byte	$f6, $f4, $f6, $fa, $fe, $01, $04, $05, $04, $02, $ff, $fb, $f7, $f4, $f4, $f7
	byte	$fb, $ff, $02, $05, $05, $02, $00, $fc, $f8, $f4, $f4, $f6, $fa, $fe, $01, $04
	byte	$05, $04, $01, $fe, $fa, $f6, $f4, $f4, $f7, $fb, $ff, $02, $05, $05, $02, $ff
	byte	$fb, $f7, $f4, $f4, $f6, $fa, $fe, $01, $04, $05, $04, $01, $fe, $fa, $f6, $f4
	byte	$f4, $f8, $fb, $ff, $04, $05, $05, $04, $00, $fb, $f7, $f6, $f4, $f6, $fa, $ff
	byte	$01, $05, $06, $05, $01, $fe, $fa, $f6, $f4, $f6, $f8, $fc, $00, $04, $06, $06
	byte	$04, $00, $fc, $f7, $f6, $f4, $f7, $fa, $ff, $02, $05, $06, $05, $02, $fe, $fa
	byte	$f6, $f4, $f6, $f8, $fe, $01, $04, $06, $06, $02, $00, $fb, $f7, $f4, $f4, $f7
	byte	$fb, $ff, $02, $05, $06, $04, $00, $fc, $f8, $f6, $f4, $f4, $f8, $fe, $01, $05
	byte	$06, $05, $02, $ff, $fa, $f6, $f4, $f4, $f7, $fb, $ff, $04, $05, $06, $04, $00
	byte	$fb, $f7, $f4, $f3, $f4, $f8, $fe, $01, $05, $06, $05, $01, $fe, $f8, $f6, $f3
	byte	$f4, $f7, $fb, $ff, $04, $06, $05, $04, $00, $fb, $f7, $f3, $f3, $f6, $fa, $ff
	byte	$02, $05, $06, $05, $02, $fe, $f8, $f6, $f3, $f4, $f8, $fc, $01, $05, $06, $06
	byte	$02, $ff, $fb, $f6, $f4, $f4, $f6, $fb, $ff, $04, $06, $06, $05, $01, $fc, $f8
	byte	$f4, $f3, $f6, $fa, $fe, $02, $06, $08, $06, $02, $fe, $fa, $f6, $f3, $f4, $f7
	byte	$fc, $01, $05, $08, $06, $05, $00, $fb, $f6, $f4, $f3, $f6, $fa, $ff, $04, $06
	byte	$08, $05, $01, $fe, $f8, $f4, $f3, $f4, $f8, $fc, $01, $05, $06, $06, $02, $ff
	byte	$fa, $f6, $f3, $f3, $f6, $fb, $ff, $04, $06, $06, $04, $00, $fb, $f6, $f3, $f3
	byte	$f4, $f8, $fe, $02, $06, $06, $05, $01, $fe, $f8, $f4, $f3, $f3, $f7, $fc, $01
	byte	$05, $08, $06, $04, $00, $fa, $f6, $f3, $f3, $f6, $fa, $ff, $04, $06, $08, $05
	byte	$01, $fc, $f7, $f3, $f3, $f4, $f8, $ff, $02, $06, $08, $06, $02, $ff, $f8, $f4
	byte	$f3, $f3, $f7, $fc, $01, $05, $08, $08, $05, $00, $fb, $f6, $f3, $f3, $f6, $fa
	byte	$ff, $04, $08, $08, $05, $01, $fc, $f7, $f4, $f3, $f4, $f8, $fe, $02, $06, $08
	byte	$06, $04, $ff, $f8, $f4, $f3, $f3, $f7, $fc, $01, $06, $08, $08, $05, $00, $fb
	byte	$f6, $f3, $f3, $f6, $fa, $ff, $04, $08, $08, $06, $01, $fc, $f7, $f3, $f2, $f4
	byte	$f8, $fe, $02, $06, $08, $06, $02, $fe, $f8, $f4, $f2, $f3, $f6, $fb, $01, $05
	byte	$08, $08, $04, $00, $fa, $f6, $f2, $f2, $f4, $fa, $ff, $04, $06, $08, $05, $01
	byte	$fc, $f7, $f3, $f2, $f3, $f8, $fe, $02, $06, $08, $06, $02, $fe, $f8, $f3, $f2
	byte	$f3, $f7, $fc, $01, $05, $08, $08, $05, $00, $fa, $f6, $f2, $f2, $f4, $fa, $ff
	byte	$05, $08, $08, $05, $01, $fc, $f6, $f3, $f2, $f4, $fa, $ff, $04, $08, $09, $08
	byte	$02, $fe, $f8, $f3, $f2, $f3, $f7, $fe, $02, $06, $09, $08, $05, $ff, $fa, $f4
	byte	$f2, $f3, $f6, $fb, $00, $05, $09, $09, $05, $01, $fb, $f6, $f2, $f2, $f4, $fa
	byte	$ff, $04, $08, $09, $06, $02, $fe, $f7, $f3, $f2, $f3, $f7, $fe, $02, $06, $09
	byte	$08, $04, $ff, $f8, $f3, $f2, $f2, $f6, $fb, $01, $05, $08, $08, $05, $00, $fa
	byte	$f4, $f2, $f2, $f4, $fa, $ff, $04, $08, $09, $05, $01, $fb, $f6, $f2, $f0, $f3
	byte	$f8, $fe, $04, $08, $09, $08, $02, $fe, $f7, $f3, $f0, $f2, $f6, $fc, $01, $06
	byte	$09, $08, $05, $ff, $fa, $f4, $f2, $f2, $f4, $fa, $ff, $05, $09, $09, $06, $01
	byte	$fb, $f6, $f2, $f2, $f3, $fa, $ff, $04, $08, $09, $08, $02, $fe, $f7, $f3, $f2
	byte	$f3, $f7, $fe, $04, $08, $09, $08, $05, $ff, $f8, $f3, $f2, $f2, $f6, $fb, $01
	byte	$06, $09, $09, $05, $00, $fb, $f6, $f2, $f2, $f4, $fa, $ff, $05, $09, $09, $06
	byte	$01, $fb, $f6, $f2, $f0, $f3, $f8, $fe, $04, $08, $09, $08, $02, $fe, $f7, $f3
	byte	$f0, $f2, $f6, $fc, $02, $06, $09, $08, $04, $ff, $f8, $f3, $f0, $f2, $f4, $fb
	byte	$00, $05, $09, $09, $05, $00, $fa, $f4, $f0, $f0, $f3, $f8, $ff, $04, $09, $09
	byte	$06, $01, $fb, $f6, $f2, $f0, $f2, $f7, $fe, $02, $08, $09, $08, $02, $fe, $f7
	byte	$f2, $f0, $f2, $f6, $fc, $02, $06, $09, $09, $05, $ff, $f8, $f3, $f0, $f2, $f4
	byte	$fb, $01, $06, $09, $09, $06, $01, $fa, $f4, $f0, $f0, $f4, $fa, $ff, $05, $09
	byte	$0a, $06, $02, $fc, $f6, $f2, $f0, $f3, $f8, $ff, $04, $09, $0a, $08, $02, $fe
	byte	$f7, $f2, $f0, $f2, $f7, $fe, $04, $08, $0a, $09, $04, $ff, $f7, $f3, $f0, $f2
	byte	$f6, $fc, $01, $06, $09, $09, $05, $00, $fa, $f3, $f0, $f0, $f4, $fa, $01, $06
	byte	$09, $09, $06, $00, $fb, $f4, $f0, $f0, $f3, $f8, $ff, $05, $09, $09, $06, $01
	byte	$fb, $f6, $f0, $f0, $f2, $f7, $fe, $04, $08, $09, $08, $02, $fc, $f6, $f2, $ef
	byte	$f2, $f6, $fc, $02, $08, $09, $08, $04, $fe, $f8, $f2, $f0, $f0, $f4, $fb, $01
	byte	$06, $0a, $09, $05, $00, $fa, $f3, $f0, $f0, $f4, $fa, $01, $06, $09, $09, $06
	byte	$00, $fa, $f4, $f0, $f0, $f4, $fa, $ff, $05, $09, $0a, $08, $01, $fb, $f6, $f2
	byte	$f0, $f3, $f8, $ff, $04, $09, $0a, $08, $02, $fc, $f6, $f2, $f0, $f2, $f7, $fe
	byte	$04, $09, $0a, $08, $04, $fe, $f7, $f2, $f0, $f2, $f6, $fc, $02, $08, $0a, $09
	byte	$05, $ff, $f8, $f3, $f0, $f2, $f6, $fb, $02, $06, $0a, $09, $05, $ff, $f8, $f3
	byte	$f0, $f0, $f4, $fa, $ff, $06, $09, $09, $05, $00, $fa, $f3, $f0, $f0, $f3, $fa
	byte	$ff, $05, $09, $09, $06, $01, $fb, $f4, $f0, $ef, $f3, $f8, $ff, $04, $09, $09
	byte	$06, $01, $fb, $f4, $f0, $ef, $f2, $f7, $ff, $04, $08, $09, $06, $02, $fc, $f6
	byte	$f0, $ef, $f2, $f7, $fe, $04, $08, $0a, $08, $02, $fe, $f6, $f2, $f0, $f2, $f6
	byte	$fc, $02, $08, $0a, $08, $04, $ff, $f7, $f2, $f0, $f2, $f6, $fc, $02, $08, $0a
	byte	$09, $04, $ff, $f8, $f3, $f0, $f2, $f4, $fc, $01, $08, $0a, $09, $05, $00, $f8
	byte	$f3, $f0, $f0, $f4, $fa, $01, $06, $0a, $09, $05, $00, $fa, $f3, $f0, $f0, $f3
	byte	$fa, $ff, $06, $09, $0a, $06, $00, $fb, $f4, $f0, $f0, $f3, $fa, $ff, $05, $09
	byte	$09, $06, $01, $fb, $f4, $f0, $ef, $f3, $f8, $ff, $04, $09, $09, $06, $01, $fb
	byte	$f4, $f0, $ef, $f2, $f8, $fe, $04, $08, $09, $06, $01, $fb, $f6, $f0, $ef, $f2
	byte	$f7, $fe, $04, $08, $09, $08, $02, $fc, $f6, $f2, $ef, $f2, $f7, $fe, $04, $08
	byte	$09, $08, $02, $fe, $f6, $f2, $ef, $f2, $f7, $fc, $02, $08, $0a, $08, $04, $fe
	byte	$f7, $f2, $f0, $f2, $f6, $fc, $02, $08, $0a, $09, $05, $ff, $f7, $f3, $f0, $f2
	byte	$f6, $fc, $02, $08, $09, $09, $05, $ff, $f8, $f3, $f0, $f2, $f4, $fc, $01, $06
	byte	$09, $09, $05, $00, $f8, $f3, $f0, $f2, $f4, $fb, $01, $06, $09, $09, $05, $00
	byte	$fa, $f3, $f0, $f0, $f4, $fa, $00, $06, $09, $09, $06, $00, $fb, $f4, $f0, $f0
	byte	$f3, $fa, $ff, $05, $09, $09, $06, $01, $fb, $f6, $f0, $f0, $f3, $f8, $ff, $04
	byte	$08, $09, $06, $01, $fb, $f6, $f0, $f0, $f2, $f8, $ff, $04, $08, $09, $06, $01
	byte	$fc, $f6, $f2, $f0, $f2, $f7, $fe, $02, $06, $09, $06, $02, $fe, $f6, $f2, $f0
	byte	$f2, $f7, $fc, $02, $06, $09, $08, $04, $fe, $f7, $f3, $f0, $f2, $f6, $fc, $01
	byte	$06, $09, $08, $04, $ff, $f8, $f3, $f0, $f2, $f6, $fb, $01, $06, $09, $08, $05
	byte	$ff, $fa, $f3, $f2, $f2, $f4, $fb, $00, $06, $09, $09, $05, $00, $fb, $f6, $f2
	byte	$f2, $f4, $fa, $ff, $05, $09, $09, $05, $01, $fb, $f6, $f2, $f2, $f3, $fa, $ff
	byte	$04, $08, $09, $06, $01, $fc, $f6, $f2, $f0, $f3, $f8, $fe, $04, $08, $09, $06
	byte	$02, $fe, $f7, $f3, $f0, $f2, $f7, $fc, $02, $06, $09, $06, $02, $fe, $f8, $f3
	byte	$f0, $f2, $f6, $fc, $01, $06, $08, $08, $04, $fe, $f8, $f3, $f0, $f2, $f4, $fb
	byte	$ff, $05, $08, $08, $04, $ff, $f8, $f4, $f0, $f0, $f4, $fa, $ff, $04, $08, $08
	byte	$05, $00, $fa, $f4, $f2, $f0, $f4, $fa, $ff, $04, $08, $08, $05, $01, $fb, $f6
	byte	$f2, $f2, $f3, $f8, $fe, $02, $06, $08, $06, $02, $fc, $f7, $f3, $f2, $f3, $f7
	byte	$fe, $02, $06, $08, $06, $02, $ff, $f8, $f4, $f2, $f3, $f7, $fc, $01, $05, $08
	byte	$08, $04, $ff, $fa, $f4, $f2, $f3, $f6, $fb, $ff, $05, $08, $08, $04, $00, $fb
	byte	$f6, $f2, $f2, $f4, $fa, $ff, $04, $06, $06, $05, $00, $fb, $f6, $f3, $f2, $f4
	byte	$f8, $fe, $02, $06, $08, $05, $01, $fc, $f7, $f3, $f2, $f3, $f7, $fc, $01, $05
	byte	$06, $05, $02, $fe, $f8, $f3, $f2, $f3, $f7, $fc, $ff, $04, $06, $06, $02, $ff
	byte	$fa, $f4, $f2, $f3, $f6, $fa, $ff, $04, $06, $05, $02, $ff, $fa, $f6, $f3, $f2
	byte	$f4, $f8, $fe, $02, $05, $06, $04, $00, $fb, $f7, $f3, $f3, $f4, $f8, $fe, $01
	byte	$05, $06, $05, $01, $fe, $f8, $f4, $f3, $f4, $f7, $fc, $01, $04, $06, $05, $02
	byte	$ff, $fa, $f6, $f3, $f4, $f7, $fb, $ff, $04, $06, $05, $04, $00, $fb, $f6, $f4
	byte	$f4, $f7, $fa, $ff, $02, $05, $05, $04, $00, $fc, $f7, $f4, $f3, $f6, $fa, $fe
	byte	$01, $04, $05, $04, $00, $fc, $f8, $f6, $f3, $f4, $f8, $fc, $01, $04, $05, $04
	byte	$01, $fe, $fa, $f6, $f4, $f4, $f7, $fb, $ff, $02, $05, $04, $01, $ff, $fa, $f6
	byte	$f4, $f4, $f6, $fa, $ff, $01, $04, $04, $02, $ff, $fb, $f7, $f4, $f3, $f6, $f8
	byte	$fc, $ff, $02, $04, $02, $00, $fc, $f8, $f6, $f4, $f4, $f8, $fb, $ff, $01, $04
	byte	$02, $00, $fe, $fa, $f6, $f4, $f4, $f7, $fa, $ff, $01, $02, $02, $01, $ff, $fb
	byte	$f7, $f6, $f4, $f7, $fa, $fe, $00, $02, $04, $02, $ff, $fc, $f8, $f6, $f6, $f7
	byte	$fa, $fc, $ff, $02, $02, $02, $00, $fe, $fa, $f7, $f6, $f7, $f8, $fc, $ff, $01
	byte	$02, $02, $00, $fe, $fb, $f8, $f7, $f7, $f8, $fb, $fe, $00, $02, $02, $01, $ff
	byte	$fb, $f8, $f7, $f7, $f8, $fa, $fe, $ff, $01, $01, $01, $ff, $fc, $fa, $f8, $f7
	byte	$f7, $fa, $fc, $ff, $00, $01, $01, $ff, $fc, $fb, $f8, $f7, $f7, $f8, $fb, $fe
	byte	$ff, $01, $00, $ff, $fe, $fb, $f8, $f7, $f7, $f8, $fa, $fc, $ff, $ff, $00, $ff
	byte	$fe, $fb, $fa, $f7, $f7, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fa, $f8
	byte	$f7, $f7, $f8, $fb, $fe, $ff, $ff, $ff, $ff, $fc, $fa, $f8, $f7, $f7, $f8, $fa
	byte	$fc, $ff, $ff, $ff, $ff, $fe, $fb, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff
	byte	$ff, $fe, $fc, $fa, $f8, $f8, $f8, $fa, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb
	byte	$fa, $f8, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $ff, $fc, $fb, $fa, $fa, $f8, $fa
	byte	$fb, $fc, $fe, $ff, $ff, $ff, $fe, $fc, $fb, $fa, $f8, $fa, $fa, $fb, $fc, $fe
	byte	$ff, $fe, $fe, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $fe, $fe, $fc
	byte	$fb, $fa, $fa, $fa, $fa, $fb, $fb, $fc, $fe, $fe, $fe, $fc, $fb, $fa, $fa, $fa
	byte	$fa, $fa, $fb, $fc, $fe, $fe, $fe, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fb, $fc
	byte	$fc, $fe, $fe, $fe, $fc, $fb, $fb, $fa, $fa, $fa, $fb, $fc, $fc, $fc, $fe, $fe
	byte	$fc, $fc, $fb, $fb, $fb, $fb, $fb, $fc, $fc, $00, $00, $00, $00, $09, $f5, $e5
	byte	$d3, $bf, $a8, $a6, $b0, $c5, $ea, $ff, $10, $14, $23, $29, $30, $33, $40, $43
	byte	$49, $6a, $73, $68, $51, $33, $09, $fa, $ec, $df, $d7, $ca, $c2, $bf, $ba, $b3
	byte	$ab, $98, $88, $88, $9b, $ba, $e4, $03, $10, $20, $29, $33, $3d, $41, $45, $4d
	byte	$51, $5d, $7f, $76, $6a, $53, $29, $03, $f4, $e8, $d8, $d3, $c7, $c7, $bf, $bd
	byte	$b2, $ab, $93, $88, $95, $ab, $cd, $fc, $11, $1e, $28, $36, $3e, $45, $49, $50
	byte	$53, $56, $75, $7d, $78, $63, $4b, $1b, $ff, $ef, $e2, $d2, $d0, $c7, $bd, $bd
	byte	$b3, $af, $9b, $8a, $90, $9e, $b8, $dd, $01, $13, $1c, $2d, $38, $3b, $45, $46
	byte	$4b, $53, $62, $75, $73, $68, $51, $38, $0c, $f2, $ea, $da, $cf, $c5, $c2, $bf
	byte	$b5, $b0, $a6, $93, $8b, $98, $aa, $c2, $e7, $09, $14, $24, $2e, $36, $3b, $43
	byte	$46, $4d, $55, $6a, $72, $66, $58, $43, $2d, $ff, $ed, $dc, $d3, $c8, $c3, $bf
	byte	$b7, $b3, $aa, $9a, $8d, $96, $a0, $b2, $d0, $f0, $0c, $19, $26, $30, $3b, $40
	byte	$43, $49, $50, $5e, $6d, $6b, $5d, $51, $39, $20, $f8, $ea, $dd, $d2, $ca, $c2
	byte	$bd, $b8, $af, $aa, $90, $98, $9d, $ad, $c3, $dc, $01, $13, $1c, $29, $35, $3b
	byte	$40, $45, $4b, $51, $6b, $6b, $62, $5a, $45, $35, $14, $f7, $e7, $dd, $d2, $cb
	byte	$bf, $c0, $b7, $af, $98, $9a, $9d, $a3, $b7, $cb, $e5, $04, $16, $24, $30, $38
	byte	$40, $46, $4b, $51, $66, $6b, $65, $5e, $51, $3d, $2b, $09, $f0, $e2, $d5, $d0
	byte	$c5, $c0, $b8, $b3, $a0, $9b, $9d, $a3, $b0, $bf, $d5, $ed, $0c, $20, $28, $35
	byte	$38, $43, $49, $50, $5a, $6b, $66, $62, $53, $49, $35, $21, $00, $e8, $e0, $d5
	byte	$ca, $c2, $bf, $ba, $a8, $a0, $a0, $a5, $ab, $bb, $c7, $dd, $f7, $13, $23, $2d
	byte	$36, $40, $46, $46, $55, $65, $63, $63, $5a, $4b, $43, $2d, $18, $00, $e5, $dc
	byte	$cf, $ca, $c3, $bb, $b7, $a3, $a0, $a3, $ab, $b2, $c5, $cf, $e7, $f8, $14, $24
	byte	$2e, $38, $3e, $46, $4d, $5b, $63, $5d, $5b, $51, $45, $38, $29, $13, $fc, $e4
	byte	$dc, $cf, $c8, $c0, $b7, $aa, $a5, $a3, $aa, $b2, $bb, $cb, $dd, $ea, $00, $16
	byte	$26, $30, $36, $3e, $45, $50, $5b, $5d, $58, $51, $46, $3d, $2b, $1c, $08, $fc
	byte	$e4, $da, $d0, $ca, $c2, $b5, $ab, $aa, $aa, $b0, $b7, $c5, $cf, $e5, $f2, $01
	byte	$14, $23, $30, $31, $3e, $49, $4d, $56, $56, $51, $4d, $3d, $36, $24, $18, $08
	byte	$f7, $ea, $d8, $cf, $ca, $bd, $b3, $b0, $af, $af, $b3, $c0, $cd, $d7, $e5, $f8
	byte	$09, $1e, $2b, $46, $63, $39, $3d, $38, $2b, $14, $08, $04, $03, $0b, $16, $11
	byte	$10, $03, $00, $fa, $f4, $ef, $ef, $ea, $f4, $03, $0b, $03, $ff, $ea, $e5, $e7
	byte	$ea, $ef, $f4, $f7, $fc, $03, $03, $04, $01, $f5, $ec, $f2, $f5, $ff, $16, $16
	byte	$14, $11, $0e, $09, $03, $01, $fc, $fa, $fd, $01, $16, $10, $10, $04, $f2, $ea
	byte	$ea, $f0, $f0, $f4, $f7, $ff, $01, $04, $08, $01, $f5, $f0, $f7, $fd, $0e, $1b
	byte	$1c, $1b, $1b, $16, $13, $0b, $0b, $01, $06, $04, $18, $16, $18, $10, $06, $f2
	byte	$e8, $ed, $e8, $ea, $f4, $f4, $fc, $fd, $fd, $fd, $f5, $e7, $ef, $ec, $fa, $08
	byte	$18, $19, $18, $1c, $10, $13, $0e, $0b, $08, $09, $10, $1b, $1c, $14, $0e, $08
	byte	$ef, $ec, $ed, $e8, $ed, $ec, $f2, $f7, $f7, $f8, $f0, $e8, $e0, $e8, $f0, $f7
	byte	$09, $1b, $1b, $19, $19, $19, $10, $11, $0b, $0c, $0b, $1b, $1b, $1e, $11, $0b
	byte	$00, $ec, $e5, $e5, $e7, $ec, $ea, $f4, $f4, $f4, $f7, $ef, $e2, $e7, $ec, $f0
	byte	$00, $0e, $1c, $20, $1e, $1b, $1b, $16, $11, $0e, $10, $14, $1b, $21, $18, $11
	byte	$0c, $fd, $ec, $e7, $ea, $e8, $ea, $f2, $ef, $f5, $f4, $f4, $e5, $e4, $e7, $ec
	byte	$f4, $fd, $10, $1b, $18, $1c, $18, $14, $14, $0c, $0e, $0c, $1c, $1e, $1e, $16
	byte	$13, $08, $ff, $ec, $ec, $e7, $e7, $ef, $ef, $f0, $f0, $f7, $e8, $e4, $e7, $e8
	byte	$ed, $f8, $01, $0b, $19, $1c, $18, $16, $14, $14, $10, $10, $14, $20, $20, $1c
	byte	$16, $11, $09, $fc, $f2, $ea, $e8, $ed, $ed, $ef, $f2, $f0, $ef, $e4, $e4, $e2
	byte	$e7, $ef, $f4, $00, $0e, $18, $1c, $18, $16, $1b, $11, $14, $16, $21, $24, $20
	byte	$23, $19, $10, $09, $fc, $f0, $e2, $e7, $e5, $e5, $e4, $e8, $e8, $df, $dc, $df
	byte	$df, $e4, $ea, $f2, $ff, $09, $1e, $1b, $1c, $1b, $1c, $1b, $19, $1c, $28, $24
	byte	$20, $1c, $14, $0e, $08, $00, $ef, $e7, $e8, $e5, $ea, $e5, $ea, $e5, $e0, $dd
	byte	$e0, $dd, $e7, $ec, $f2, $00, $06, $11, $19, $16, $16, $19, $16, $19, $1e, $23
	byte	$23, $23, $21, $1b, $16, $09, $03, $fd, $ed, $ea, $ea, $e8, $e4, $e7, $dd, $d7
	byte	$d8, $dc, $dc, $e7, $ec, $f7, $01, $09, $11, $1e, $20, $1b, $1e, $23, $23, $29
	byte	$2b, $28, $23, $23, $16, $13, $08, $fd, $f7, $ed, $e8, $e8, $e4, $e5, $dd, $dc
	byte	$dd, $df, $dd, $e2, $ea, $f4, $fa, $fd, $06, $11, $14, $1e, $1e, $20, $26, $2b
	byte	$2d, $2e, $2b, $29, $23, $1c, $14, $09, $04, $ff, $f4, $ed, $e8, $e4, $dd, $dc
	byte	$da, $d7, $d8, $da, $dc, $e4, $ec, $f2, $fc, $03, $0e, $1c, $1c, $2b, $28, $2d
	byte	$2e, $2b, $29, $29, $21, $19, $16, $11, $04, $ff, $f0, $ec, $e0, $e0, $d8, $d8
	byte	$dc, $d5, $d8, $dc, $dd, $e0, $e8, $ed, $f7, $03, $0c, $14, $23, $24, $28, $2b
	byte	$29, $26, $28, $21, $1c, $20, $16, $11, $0e, $00, $f8, $f0, $e4, $e0, $dd, $d8
	byte	$dc, $dc, $e2, $dd, $e2, $ea, $e7, $f0, $f7, $ff, $06, $14, $1b, $1c, $23, $24
	byte	$26, $20, $23, $23, $1c, $16, $11, $0e, $06, $ff, $fd, $f4, $e5, $e7, $df, $da
	byte	$e5, $dd, $df, $dd, $e5, $e4, $ea, $f4, $f4, $fc, $03, $08, $14, $16, $1b, $21
	byte	$23, $20, $1e, $21, $20, $1b, $19, $16, $0c, $0b, $01, $fc, $f8, $f2, $ea, $e7
	byte	$e7, $dc, $e5, $e2, $dd, $e4, $e2, $e2, $ed, $f5, $f8, $04, $0b, $14, $1b, $24
	byte	$23, $26, $23, $1e, $1e, $1c, $13, $16, $11, $06, $01, $00, $f5, $f2, $f0, $e5
	byte	$e2, $e7, $e5, $e5, $e2, $e7, $e5, $ed, $f2, $f8, $00, $06, $0b, $16, $1c, $1c
	byte	$1c, $23, $23, $20, $24, $1c, $1c, $1b, $18, $0e, $09, $03, $fc, $f7, $ea, $ea
	byte	$e2, $dd, $dd, $dd, $dd, $dd, $e0, $e5, $e8, $f2, $fc, $01, $09, $11, $1b, $1c
	byte	$26, $24, $2b, $2b, $2d, $2d, $2e, $28, $1b, $18, $09, $00, $f7, $ef, $e8, $e8
	byte	$dc, $e0, $dd, $d7, $da, $d5, $da, $e0, $e4, $ef, $f5, $03, $0c, $13, $1b, $1e
	byte	$1c, $26, $28, $24, $29, $29, $26, $24, $1c, $16, $08, $ff, $f4, $ea, $e5, $e0
	byte	$e4, $dd, $e2, $dc, $e4, $dd, $e0, $e8, $ea, $f0, $fc, $04, $10, $16, $1b, $1c
	byte	$1b, $1c, $20, $1e, $1e, $1c, $1e, $1e, $16, $18, $0e, $fd, $f8, $ef, $ec, $ec
	byte	$ea, $ea, $ec, $ed, $e8, $e8, $e8, $e7, $e8, $ec, $f0, $ff, $06, $0e, $13, $18
	byte	$1b, $18, $1c, $1e, $1b, $23, $1c, $1e, $1c, $18, $11, $0b, $fa, $f4, $ef, $e5
	byte	$e7, $ea, $ec, $e7, $e7, $e8, $e0, $e5, $e5, $ed, $e8, $fc, $04, $11, $13, $1c
	byte	$1e, $1b, $18, $1c, $1e, $1c, $1e, $23, $1b, $1c, $18, $11, $01, $fa, $ed, $e8
	byte	$e7, $e5, $ea, $ea, $e4, $e2, $e4, $e2, $e2, $e5, $e0, $ea, $f7, $01, $0c, $16
	byte	$1c, $1e, $1e, $1b, $21, $26, $23, $23, $23, $21, $19, $16, $10, $00, $fc, $e8
	byte	$e4, $e5, $e0, $e7, $dc, $da, $df, $e2, $e2, $e7, $e7, $ed, $f0, $fd, $08, $11
	byte	$1b, $20, $1e, $1e, $24, $21, $21, $21, $1e, $16, $18, $11, $10, $04, $fa, $f2
	byte	$e8, $e4, $df, $e2, $e0, $e2, $e7, $e4, $e8, $e8, $ed, $ea, $f0, $f7, $04, $10
	byte	$1b, $21, $23, $24, $23, $23, $1e, $18, $14, $19, $16, $13, $13, $0b, $01, $f5
	byte	$ef, $e4, $e2, $df, $dd, $e2, $e0, $e5, $e5, $e5, $e4, $e4, $e2, $f5, $fd, $04
	byte	$10, $19, $1e, $26, $29, $20, $24, $20, $1e, $1c, $23, $20, $1b, $14, $04, $f8
	byte	$f4, $ec, $e2, $df, $df, $df, $dc, $e2, $dd, $e2, $dd, $dd, $df, $e7, $f0, $00
	byte	$0e, $14, $1b, $20, $28, $26, $28, $26, $28, $21, $24, $29, $23, $20, $16, $06
	byte	$f7, $ef, $ea, $dd, $da, $d7, $d8, $dc, $dd, $e0, $e5, $df, $e0, $ea, $f2, $fc
	byte	$0b, $13, $19, $23, $2b, $29, $2b, $23, $1e, $1c, $1c, $19, $1c, $16, $13, $03
	byte	$f7, $ed, $e7, $df, $d7, $d0, $d7, $df, $e2, $ea, $ef, $ef, $f2, $f7, $fa, $fd
	byte	$06, $0c, $11, $14, $1c, $20, $1e, $19, $1c, $18, $16, $14, $16, $14, $19, $0e
	byte	$06, $fc, $fa, $ef, $ea, $e4, $dd, $e4, $ea, $ea, $e7, $ec, $e5, $df, $e8, $f0
	byte	$f8, $09, $0e, $16, $23, $26, $2d, $28, $24, $1c, $1c, $1b, $19, $1b, $19, $10
	byte	$04, $fd, $ef, $e5, $df, $d8, $d7, $dd, $e4, $e4, $e8, $ed, $ec, $ec, $ec, $f4
	byte	$ff, $09, $13, $1c, $29, $2d, $35, $2d, $28, $1c, $1e, $11, $13, $10, $11, $0b
	byte	$01, $fc, $f0, $e4, $df, $dc, $d7, $dc, $e4, $e7, $e8, $ef, $ed, $ed, $f2, $f7
	byte	$ff, $08, $13, $1e, $28, $2d, $2d, $26, $1c, $20, $1b, $14, $16, $10, $14, $11
	byte	$0c, $ff, $f7, $e7, $df, $da, $d5, $d5, $df, $e0, $df, $e4, $e5, $e5, $e7, $f2
	byte	$f5, $01, $0b, $1c, $24, $2b, $30, $33, $2b, $21, $24, $24, $1e, $1b, $1c, $14
	byte	$09, $01, $f7, $ea, $df, $da, $d5, $d3, $d7, $da, $dd, $df, $df, $e5, $e8, $f0
	byte	$fc, $04, $09, $13, $1c, $2b, $2e, $2d, $2b, $24, $21, $23, $21, $23, $21, $1c
	byte	$16, $0b, $00, $fd, $ef, $e7, $da, $d0, $d5, $dd, $dc, $df, $dc, $e0, $df, $e2
	byte	$ef, $f8, $00, $06, $0c, $19, $20, $26, $2b, $28, $20, $20, $23, $24, $21, $23
	byte	$19, $0e, $08, $01, $f8, $f4, $e8, $e2, $e4, $e5, $e8, $ec, $ea, $ec, $e5, $e7
	byte	$ea, $f4, $fc, $03, $0b, $0c, $11, $16, $1b, $1b, $1c, $1b, $16, $19, $24, $2e
	byte	$24, $1c, $13, $09, $08, $00, $f5, $ec, $e2, $df, $e4, $e7, $e8, $e4, $df, $dc
	byte	$dd, $e8, $ea, $f5, $fc, $03, $0b, $14, $19, $24, $24, $23, $21, $23, $2e, $30
	byte	$30, $29, $1b, $14, $0e, $01, $f5, $e4, $e4, $dc, $dc, $df, $e0, $e7, $da, $d8
	byte	$d3, $d8, $dd, $e5, $ed, $fc, $03, $11, $18, $20, $26, $26, $23, $20, $28, $30
	byte	$35, $35, $29, $26, $19, $0c, $03, $f8, $ea, $da, $d2, $d5, $d0, $cf, $d3, $d3
	byte	$d3, $d7, $e4, $ec, $ef, $00, $08, $14, $1c, $23, $29, $2d, $2d, $30, $2e, $2b
	byte	$29, $28, $21, $18, $11, $0b, $fd, $f5, $e7, $dd, $d7, $d2, $cd, $cf, $cb, $d3
	byte	$da, $dc, $e0, $ea, $ef, $f5, $ff, $04, $14, $1e, $23, $2b, $35, $38, $33, $33
	byte	$2d, $23, $21, $1c, $16, $11, $03, $fc, $ed, $e2, $da, $d3, $cd, $c5, $c8, $d2
	byte	$d5, $dd, $ea, $f0, $f0, $fa, $01, $0e, $16, $19, $20, $21, $28, $2e, $31, $31
	byte	$2e, $26, $20, $1c, $19, $13, $09, $fc, $f2, $e8, $e0, $dd, $d8, $d0, $ca, $d0
	byte	$d2, $dc, $ea, $f2, $f2, $f5, $00, $0b, $11, $16, $1e, $23, $24, $29, $30, $30
	byte	$2b, $28, $20, $19, $16, $10, $09, $ff, $f8, $f0, $ea, $e4, $e4, $e0, $da, $d3
	byte	$d0, $d7, $da, $e8, $ea, $e8, $f4, $fd, $09, $11, $14, $19, $1c, $23, $28, $38
	byte	$38, $30, $28, $23, $14, $19, $10, $01, $fa, $f0, $f0, $e8, $e7, $e4, $df, $d8
	byte	$d2, $cf, $d5, $e0, $e7, $ec, $ef, $f8, $fd, $09, $0c, $14, $19, $1e, $20, $28
	byte	$2e, $2d, $30, $26, $1c, $16, $0e, $04, $ff, $f8, $f5, $ea, $e5, $e4, $dd, $dc
	byte	$d8, $d8, $d5, $df, $e8, $f0, $f8, $00, $04, $01, $08, $0c, $13, $16, $20, $21
	byte	$28, $26, $2e, $28, $21, $18, $0c, $08, $00, $ff, $ff, $f8, $f4, $f4, $f0, $e5
	byte	$e0, $dc, $d8, $d7, $dc, $e5, $f0, $f2, $f7, $fc, $fd, $01, $08, $08, $09, $14
	byte	$1c, $20, $2b, $30, $2e, $23, $1b, $16, $0c, $0b, $04, $03, $ff, $00, $fc, $f0
	byte	$e5, $e0, $da, $d7, $d5, $da, $e0, $e7, $ea, $f5, $f8, $f8, $f8, $00, $06, $10
	byte	$20, $28, $28, $2b, $31, $31, $24, $20, $13, $0b, $0c, $08, $06, $06, $ff, $f8
	byte	$ea, $e4, $d8, $d2, $d2, $d2, $da, $da, $e7, $ea, $f2, $fa, $f8, $fa, $01, $08
	byte	$16, $21, $21, $28, $29, $29, $26, $20, $14, $0b, $08, $09, $09, $06, $09, $06
	byte	$f8, $ed, $df, $d5, $d2, $cd, $cf, $d3, $dd, $ea, $f4, $fa, $ff, $03, $06, $00
	byte	$00[15]
	byte	$e4, $b1, $ea, $80, $f5, $0a, $0b, $02, $15, $9b, $80, $40, $d6, $30, $57, $00
	byte	$f2, $58, $e1, $33, $0f, $9b, $7c, $41, $90, $94, $3a, $aa, $9d, $0a, $aa, $e7
	byte	$82, $d2, $e5, $b0, $c0, $dd, $c6, $f1, $e9, $08, $06, $e3, $f2, $78, $6c, $ae
	byte	$17, $7e, $48, $62, $44, $f7, $19, $80, $2c, $64, $3a, $34, $67, $0d, $1d, $4a
	byte	$d3, $08, $2c, $1b, $ee, $3c, $fc, $b1, $f3, $df, $f0, $dd, $bd, $dc, $cf, $d5
	byte	$cc, $d6, $c3, $a7, $ec, $eb, $99, $a5, $e2, $e3, $b9, $9a, $d3, $10, $e6, $94
	byte	$e3, $25, $b7, $ba, $31, $b5, $d9, $21, $df, $08, $09, $50, $1b, $ea, $5a, $28
	byte	$14, $53, $51, $21, $49, $1a, $27, $65, $55, $3f, $63, $26, $1c, $38, $43, $3f
	byte	$38, $2c, $1a, $27, $20, $22, $36, $47, $22, $23, $f9, $0e, $09, $0b, $48, $cd
	byte	$fd, $25, $ea, $0b, $f8, $06, $21, $da, $28, $f5, $b4, $e3, $0a, $f5, $e0, $f4
	byte	$f6, $f0, $ac, $d8, $ea, $e4, $cf, $d5, $df, $b9, $d3, $c9, $c5, $c0, $c4, $bc
	byte	$99, $b8, $a7, $a3, $b4, $b5, $bf, $b4, $99, $c5, $b3, $c4, $ce, $cb, $df, $d2
	byte	$da, $01, $e2, $dc, $e0, $07, $01, $e3, $f0, $27, $15, $fa, $08, $13, $31, $f9
	byte	$31, $4a, $17, $2d, $2d, $54, $38, $4a, $64, $3b, $4e, $63, $62, $51, $77, $49
	byte	$57, $79, $60, $5b, $6e, $5e, $71, $76, $42, $68, $7d, $62, $38, $53, $3b, $4c
	byte	$4a, $ed, $fa, $63, $2f, $ff, $15, $df, $05, $08, $dc, $ea, $e4, $f3, $01, $c1
	byte	$a1, $ee, $c2, $d6, $ce, $ce, $e3, $d9, $bd, $f2, $c1, $d4, $d0, $dd, $b5, $bf
	byte	$bf, $d7, $aa, $c6, $c3, $b8, $b2, $bc, $b5, $b2, $a9, $a2, $c3, $bf, $ac, $a0
	byte	$c2, $bf, $d4, $cd, $89, $c6, $d9, $a8, $c2, $e8, $df, $ad, $cf, $ef, $e6, $cb
	byte	$fe, $d7, $ed, $02, $e1, $12, $ff, $fe, $29, $02, $2a, $26, $2b, $42, $34, $44
	byte	$46, $56, $43, $6b, $71, $55, $6f, $5f, $6a, $6e, $3f, $5e, $5e, $59, $66, $6e
	byte	$64, $59, $38, $21, $39, $51, $63, $49, $56, $55, $1e, $3d, $3d, $28, $f6, $13
	byte	$12, $22, $31, $05, $fc, $2b, $ed, $1a, $df, $22, $07, $f3, $dc, $f3, $ed, $fc
	byte	$0a, $fc, $c1, $f9, $09, $ca, $c8, $b9, $b9, $dd, $e9, $bf, $96, $d9, $e0, $c2
	byte	$c2, $aa, $cc, $a8, $a6, $c8, $b8, $8a, $ae, $ad, $98, $ac, $89, $d1, $a5, $aa
	byte	$b7, $d0, $d5, $aa, $a7, $b3, $0b, $d2, $d0, $d8, $02, $db, $f3, $df, $03, $d2
	byte	$0f, $14, $ec, $1b, $1a, $eb, $22, $3d, $1b, $04, $40, $32, $59, $40, $38, $3c
	byte	$31, $4e, $41, $61, $65, $5f, $4f, $45, $50, $5f, $6c, $6d, $80, $4f, $40, $6c
	byte	$57, $51, $62, $50, $3d, $45, $32, $47, $1d, $4c, $2e, $f3, $1f, $1f, $3e, $1b
	byte	$ea, $17, $fd, $ea, $ef, $11, $e4, $ce, $fc, $c9, $df, $b8, $ba, $bd, $d2, $d7
	byte	$b3, $c3, $8b, $bd, $c6, $98, $d2, $97, $8f, $e5, $8f, $9a, $b9, $a1, $95, $e7
	byte	$af, $91, $b3, $cc, $cb, $a0, $ce, $da, $c2, $b7, $d2, $f5, $d5, $e8, $e8, $e0
	byte	$f3, $10, $cd, $fd, $16, $d2, $1c, $22, $03, $1b, $08, $43, $17, $1c, $2c, $34
	byte	$2a, $37, $26, $4d, $30, $2e, $2d, $3d, $53, $30, $6e, $2c, $4a, $5b, $3a, $74
	byte	$4e, $45, $65, $3c, $48, $45, $5a, $80, $2d, $2b, $37, $45, $55, $4b, $53, $1d
	byte	$33, $3f, $45, $2f, $03, $2b, $35, $05, $2a, $15, $f3, $f5, $e8, $06, $c5, $db
	byte	$03, $a5, $d0, $fe, $9e, $a9, $be, $af, $e0, $c6, $81, $bf, $e5, $af, $b2, $be
	byte	$b4, $c8, $aa, $90, $c6, $b6, $da, $be, $99, $16, $ad, $aa, $0e, $ac, $bb, $d9
	byte	$ce, $0c, $9c, $03, $fd, $aa, $1c, $02, $dc, $f5, $d1, $10, $ff, $09, $f6, $0a
	byte	$18, $eb, $49, $1d, $2c, $13, $e3, $23, $5a, $dc, $14, $4b, $f7, $43, $12, $10
	byte	$47, $27, $25, $2a, $26, $3f, $1e, $44, $29, $19, $53, $35, $22, $4b, $26, $15
	byte	$67, $1b, $41, $3a, $21, $5b, $40, $2b, $34, $2a, $2b, $50, $15, $13, $36, $43
	byte	$18, $2d, $16, $ea, $47, $02, $ff, $14, $0b, $0f, $e5, $0a, $16, $c2, $e7, $1c
	byte	$c7, $f4, $e7, $f0, $dd, $e5, $e7, $df, $8d, $e6, $f3, $ab, $ef, $de, $da, $d2
	byte	$b0, $ed, $d2, $aa, $e7, $ec, $a6, $d8, $c3, $b1, $f9, $9e, $c4, $c2, $a3, $ce
	byte	$c6, $c6, $b5, $91, $fc, $c8, $c1, $fa, $bd, $ab, $f1, $d5, $d6, $ee, $ca, $f6
	byte	$ec, $bd, $31, $fb, $c1, $fd, $f4, $1a, $2f, $f8, $19, $1d, $27, $07, $24, $3b
	byte	$31, $0e, $49, $51, $26, $66, $0b, $45, $5a, $3b, $4c, $4c, $43, $68, $1e, $74
	byte	$35, $25, $70, $49, $2d, $38, $33, $5d, $25, $33, $31, $32, $2a, $44, $45, $2b
	byte	$3d, $21, $0f, $19, $2f, $24, $30, $0a, $e6, $47, $01, $e5, $06, $31, $fd, $d3
	byte	$15, $df, $12, $d0, $09, $f8, $cd, $fc, $ef, $cb, $e6, $d3, $e9, $b8, $e2, $e5
	byte	$c5, $e7, $bd, $d7, $f2, $ba, $90, $d9, $e2, $b6, $bd, $bd, $c3, $df, $a9, $c1
	byte	$b6, $c1, $f6, $9f, $8e, $c6, $cf, $cb, $d5, $ca, $b5, $e1, $b8, $e2, $db, $d6
	byte	$dd, $ec, $e5, $fc, $f0, $00, $15, $ec, $23, $18, $f3, $0e, $30, $0a, $42, $47
	byte	$1b, $19, $31, $30, $4d, $2e, $3d, $40, $1c, $50, $45, $2f, $55, $2a, $32, $4b
	byte	$24, $42, $31, $30, $27, $40, $3f, $3f, $62, $38, $1c, $45, $2f, $43, $04, $40
	byte	$44, $06, $3e, $15, $45, $36, $02, $29, $1d, $1e, $1d, $ef, $00, $14, $08, $ef
	byte	$12, $f4, $ec, $f7, $ec, $e3, $e6, $e8, $ea, $fa, $d1, $cd, $b3, $0b, $f9, $aa
	byte	$a8, $cc, $d6, $d1, $d2, $a2, $b2, $be, $e1, $c8, $9c, $b8, $bc, $cc, $a5, $8e
	byte	$d7, $de, $c7, $cb, $bd, $ea, $df, $cf, $f8, $c2, $be, $f2, $eb, $fe, $c9, $dc
	byte	$0e, $d2, $13, $f5, $ce, $28, $1f, $e8, $1d, $04, $f0, $1a, $1d, $24, $fe, $04
	byte	$12, $2c, $0d, $16, $12, $32, $32, $12, $23, $25, $17, $3c, $29, $2a, $47, $48
	byte	$07, $46, $41, $32, $22, $3b, $0d, $2a, $50, $44, $14, $0e, $60, $57, $2a, $17
	byte	$2f, $17, $38, $2c, $23, $22, $44, $1e, $f0, $0d, $4a, $15, $20, $ee, $2a, $02
	byte	$18, $41, $e1, $e5, $2e, $f6, $dc, $04, $f6, $ef, $de, $e8, $e2, $fa, $c5, $df
	byte	$f5, $c8, $c6, $fe, $ad, $d4, $e9, $99, $0c, $ee, $be, $f0, $a6, $f5, $bc, $dc
	byte	$b9, $d4, $fa, $c9, $da, $d2, $a8, $d0, $f0, $e6, $d6, $e0, $dd, $ca, $c6, $f9
	byte	$c5, $d3, $e8, $00, $d9, $db, $cf, $ec, $03, $f1, $f5, $e0, $27, $01, $07, $38
	byte	$08, $d5, $39, $14, $12, $2a, $17, $11, $2e, $15, $0b, $0c, $21, $40, $18, $11
	byte	$20, $16, $2a, $59, $1c, $01, $47, $3b, $46, $38, $0f, $5f, $0f, $32, $3c, $16
	byte	$32, $2e, $31, $1f, $48, $18, $1d, $31, $06, $44, $1f, $0d, $3e, $e7, $05, $3d
	byte	$08, $1e, $f9, $1a, $fc, $04, $ee, $18, $f4, $fa, $05, $0a, $eb, $02, $e7, $1d
	byte	$d0, $e9, $f4, $e5, $db, $fa, $ca, $e0, $e3, $bc, $05, $d4, $c8, $bf, $05, $d8
	byte	$c6, $e9, $bf, $e6, $c9, $d9, $ea, $bb, $c8, $ef, $d1, $f9, $da, $d3, $e9, $bb
	byte	$d9, $fb, $ce, $df, $ed, $e9, $dc, $fe, $f7, $fe, $ef, $e4, $0b, $d5, $f0, $fb
	byte	$1a, $1d, $e3, $0f, $1f, $f6, $1d, $fa, $04, $0a, $19, $27, $03, $0b, $35, $1f
	byte	$05, $20, $29, $23, $08, $2a, $34, $21, $0b, $3b, $4d, $4f, $00, $49, $30, $2f
	byte	$36, $03, $04, $2f, $20, $33, $02, $0c, $49, $1a, $2c, $f2, $05, $08, $03, $28
	byte	$14, $fe, $eb, $00, $1d, $ef, $13, $1b, $dd, $fa, $00, $d7, $fc, $09, $09, $de
	byte	$e3, $05, $f9, $f1, $cb, $de, $09, $fc, $da, $fa, $d1, $e7, $0c, $c0, $1c, $ea
	byte	$9e, $ff, $e5, $ed, $fd, $d3, $ef, $ee, $fa, $04, $f0, $e5, $e8, $ee, $fa, $e6
	byte	$eb, $d3, $ec, $1c, $f5, $dc, $f8, $e9, $e5, $14, $eb, $f1, $e8, $ed, $13, $19
	byte	$03, $c4, $04, $06, $f2, $0f, $07, $e2, $0f, $1c, $02, $eb, $fe, $09, $1d, $08
	byte	$1a, $2c, $0c, $00, $1c, $26, $07, $06, $11, $16, $12, $3c, $de, $fe, $1e, $08
	byte	$15, $1d, $12, $fb, $3c, $e9, $0d, $12, $1a, $0d, $02, $15, $23, $1d, $e9, $01
	byte	$fc, $1a, $1f, $14, $f9, $f1, $02, $26, $21, $e3, $02, $13, $e3, $12, $fd, $11
	byte	$e6, $02, $f1, $12, $f5, $0b, $0a, $e7, $eb, $11, $f1, $e4, $0a, $0f, $15, $0a
	byte	$f0, $06, $fb, $fb, $ee, $09, $f1, $e9, $f6, $12, $f5, $05, $fb, $f1, $e7, $41
	byte	$e8, $e5, $08, $d7, $0e, $00, $0b, $e1, $e6, $08, $00, $ee, $ef, $da, $fc, $ee
	byte	$eb, $15, $f2, $04, $f8, $dc, $24, $03, $f3, $f7, $e7, $f4, $04, $f8, $01, $ed
	byte	$fb, $10, $f5, $ed, $04, $0a, $ed, $df, $05, $01, $13, $e1, $ff, $09, $ed, $1a
	byte	$15, $fe, $f6, $e1, $10, $24, $1b, $e7, $0f, $0f, $1b, $25, $ee, $ef, $27, $14
	byte	$fd, $12, $f6, $19, $1c, $10, $10, $eb, $fe, $34, $0c, $fb, $0e, $06, $38, $fd
	byte	$fd, $22, $d8, $0c, $1c, $07, $0a, $19, $e6, $1a, $0b, $09, $1c, $e6, $01, $1c
	byte	$f0, $04, $18, $1c, $ee, $e4, $07, $05, $fc, $04, $06, $e0, $e7, $11, $01, $f7
	byte	$0d, $db, $0a, $f9, $ec, $fb, $15, $08, $de, $02, $10, $cd, $03, $1e, $eb, $ea
	byte	$e4, $e4, $06, $fc, $fd, $ec, $d4, $0f, $09, $f2, $03, $02, $d5, $13, $f1, $e3
	byte	$02, $15, $e5, $0f, $08, $ef, $f8, $dd, $f7, $02, $09, $02, $fd, $02, $00, $ee
	byte	$0d, $ff, $1e, $f3, $ec, $03, $0b, $f0, $0a, $0a, $f5, $fb, $0f, $05, $ed, $0d
	byte	$1b, $11, $fb, $0a, $02, $19, $2e, $1f, $f2, $24, $fe, $f8, $0b, $25, $12, $0d
	byte	$00, $1a, $eb, $e9, $2b, $20, $0b, $e8, $fa, $21, $22, $f7, $ea, $19, $11, $03
	byte	$f7, $fe, $12, $0e, $fd, $15, $04, $06, $fd, $01, $17, $f0, $19, $0d, $f7, $01
	byte	$f7, $09, $0c, $f1, $19, $0d, $e2, $f7, $03, $e5, $04, $f2, $ff, $fe, $e8, $01
	byte	$02, $e2, $0e, $ff, $fd, $dc, $f1, $16, $d4, $f2, $ef, $fa, $01, $01, $0b, $fb
	byte	$d4, $f0, $1c, $20, $e3, $d7, $10, $f5, $01, $0a, $d5, $01, $08, $e9, $f7, $ee
	byte	$09, $ef, $16, $fd, $f5, $0e, $06, $14, $e2, $0e, $14, $1a, $0c, $f8, $f6, $10
	byte	$20, $03, $f0, $ef, $17, $f7, $33, $0f, $d4, $0e, $0c, $00, $05, $fd, $0c, $00
	byte	$16, $03, $f6, $0f, $ea, $0e, $12, $0f, $01, $f6, $f8, $0e, $09, $04, $e1, $fb
	byte	$0d, $02, $03, $06, $18, $02, $09, $04, $ee, $18, $0b, $eb, $1d, $05, $e6, $f8
	byte	$0e, $07, $25, $08, $d9, $11, $0c, $ee, $26, $11, $f0, $fe, $01, $1d, $fc, $14
	byte	$06, $0c, $10, $f1, $09, $ea, $ec, $22, $03, $f2, $05, $ee, $16, $15, $00, $fb
	byte	$0e, $d8, $fd, $05, $0d, $fd, $fb, $e9, $ea, $09, $e8, $f8, $f9, $ef, $df, $16
	byte	$fa, $01, $e5, $fd, $f3, $03, $fe, $ed, $e8, $f2, $ea, $07, $07, $f9, $f4, $ef
	byte	$ee, $fb, $0b, $ec, $ec, $f7, $fa, $0a, $f0, $10, $f5, $ed, $10, $0a, $04, $f3
	byte	$15, $f6, $f4, $0d, $fc, $0c, $1f, $0f, $fd, $01, $f7, $23, $fc, $04, $2f, $09
	byte	$f9, $12, $0b, $0f, $2e, $f8, $12, $10, $00, $26, $10, $e6, $1e, $fd, $12, $15
	byte	$fb, $01, $20, $0e, $ef, $1a, $f4, $fc, $13, $10, $f8, $11, $15, $10, $fa, $fa
	byte	$ff, $08, $08, $09, $f0, $ea, $02, $15, $e1, $f3, $0d, $e8, $03, $06, $ef, $e0
	byte	$f8, $01, $06, $eb, $fd, $0d, $fb, $ee, $01, $ee, $ed, $05, $05, $01, $e8, $de
	byte	$18, $fd, $f4, $f4, $e4, $fa, $f1, $fa, $fa, $fe, $04, $e6, $e9, $03, $d3, $0d
	byte	$fa, $fd, $eb, $fa, $04, $02, $fd, $ee, $ef, $2d, $ee, $0c, $03, $f3, $fb, $fb
	byte	$02, $04, $09, $18, $f7, $17, $1d, $fc, $fd, $12, $21, $15, $01, $0d, $07, $13
	byte	$fa, $f4, $1f, $1b, $1b, $f6, $f4, $18, $0b, $16, $fc, $e3, $10, $1d, $1e, $01
	byte	$e6, $10, $11, $e7, $ef, $22, $0a, $f8, $09, $f9, $e7, $15, $fd, $01, $f2, $f0
	byte	$13, $f6, $f0, $fd, $11, $f1, $f8, $0c, $f8, $06, $0a, $fd, $f4, $0c, $05, $ec
	byte	$fc, $fc, $ff, $0c, $f2, $02, $11, $ec, $dd, $20, $0a, $0f, $e6, $fd, $ff, $0d
	byte	$03, $eb, $17, $fb, $fc, $f3, $f4, $ef, $07, $0b, $fd, $f5, $00, $de, $06, $f8
	byte	$e8, $e9, $05, $0f, $fc, $f2, $db, $0c, $09, $e7, $f6, $08, $04, $ef, $f8, $0a
	byte	$f3, $10, $1d, $00, $03, $e5, $01, $1c, $07, $07, $12, $fa, $0d, $18, $f2, $15
	byte	$1b, $04, $f2, $0d, $10, $fb, $09, $fc, $0c, $13, $fa, $07, $33, $ef, $fd, $20
	byte	$0c, $fe, $0c, $fb, $15, $0c, $0e, $08, $f9, $f0, $11, $18, $f6, $db, $19, $03
	byte	$05, $02, $e0, $05, $05, $f5, $04, $04, $05, $04, $06, $e9, $ef, $1a, $0a, $06
	byte	$fe, $00, $07, $0b, $fb, $e6, $fd, $fc, $10, $fa, $fc, $e0, $f0, $0a, $ea, $f1
	byte	$e8, $e5, $f7, $fc, $ea, $fd, $f8, $db, $06, $f7, $e6, $fa, $04, $fd, $e9, $e9
	byte	$06, $07, $0a, $e8, $12, $16, $01, $00, $f3, $ff, $2f, $0a, $f8, $0d, $20, $10
	byte	$08, $ed, $13, $1b, $0e, $0d, $f3, $03, $16, $fc, $0e, $08, $06, $08, $fd, $09
	byte	$0d, $20, $fc, $ef, $18, $0d, $f7, $0f, $ee, $fe, $05, $0b, $ee, $ed, $1a, $1d
	byte	$f6, $08, $f1, $f5, $04, $ff, $1e, $ea, $f0, $10, $fe, $06, $19, $ff, $fe, $00
	byte	$fd, $02, $0b, $fa, $01, $0c, $00, $f3, $02, $08, $0b, $f5, $0c, $fc, $f8, $e2
	byte	$0b, $fd, $fa, $f5, $eb, $fc, $f7, $e0, $f6, $ff, $15, $f6, $ee, $f5, $e6, $e4
	byte	$ff, $ff, $06, $e9, $f2, $f2, $fc, $03, $fe, $06, $ff, $ee, $13, $05, $f4, $0f
	byte	$1d, $23, $00, $08, $15, $01, $00, $23, $0e, $03, $13, $02, $1b, $08, $12, $0f
	byte	$02, $09, $fd, $11, $03, $08, $01, $05, $03, $16, $08, $0b, $fe, $05, $04, $0b
	byte	$e3, $fb, $1d, $03, $05, $01, $09, $09, $01, $fd, $ff, $ed, $ec, $08, $0a, $f5
	byte	$e5, $f7, $16, $01, $f9, $e2, $fa, $e1, $06, $01, $f9, $02, $f1, $e0, $fb, $0c
	byte	$06, $e9, $dd, $f6, $14, $01, $08, $ec, $fd, $0a, $03, $01, $eb, $f7, $00, $10
	byte	$e7, $00, $08, $06, $11, $fa, $ef, $13, $ef, $f4, $05, $0e, $fe, $f6, $f7, $20
	byte	$fb, $04, $02, $fe, $01, $f4, $0f, $2c, $09, $02, $09, $01, $0f, $13, $08, $f6
	byte	$0f, $14, $0d, $fa, $08, $15, $f5, $31, $11, $e5, $0a, $11, $02, $19, $11, $fd
	byte	$fb, $0d, $0c, $fa, $03, $05, $00, $00, $01, $03, $05, $08, $09, $01, $d9, $12
	byte	$04, $e2, $04, $07, $f8, $e6, $fc, $ed, $01, $0b, $f3, $fc, $ed, $ff, $05, $ec
	byte	$f4, $0c, $ff, $f8, $f3, $f7, $f7, $08, $f4, $f9, $03, $f4, $f4, $f5, $f2, $fd
	byte	$0a, $f7, $fe, $f7, $ed, $08, $10, $ef, $fd, $f3, $01, $03, $f2, $f8, $f1, $08
	byte	$fe, $08, $fa, $f2, $fa, $10, $05, $f2, $03, $03, $18, $07, $e9, $17, $18, $04
	byte	$0b, $10, $0c, $fc, $16, $fe, $09, $1c, $0b, $10, $09, $14, $1c, $11, $14, $0b
	byte	$06, $05, $0f, $0f, $18, $19, $17, $f4, $0e, $07, $12, $18, $06, $ef, $0b, $12
	byte	$fa, $fb, $f5, $02, $02, $06, $fd, $f3, $e9, $f3, $f6, $ef, $fc, $fb, $e8, $ea
	byte	$ef, $f3, $f8, $fc, $f2, $f2, $eb, $dd, $e8, $10, $f9, $f1, $04, $fa, $e2, $f5
	byte	$fc, $f2, $05, $00, $e8, $f5, $03, $fb, $e7, $fd, $01, $fc, $f1, $03, $03, $f3
	byte	$f0, $fc, $f8, $01, $fb, $0c, $ea, $08, $15, $09, $fc, $fa, $0a, $00, $f7, $19
	byte	$08, $09, $f9, $0c, $0f, $0a, $08, $1a, $fa, $1f, $10, $03, $fc, $0d, $27, $18
	byte	$07, $10, $06, $1a, $18, $16, $f7, $21, $13, $0d, $1f, $f7, $1a, $0b, $09, $fe
	byte	$17, $11, $1e, $f1, $f2, $0e, $1d, $fd, $00, $f4, $f5, $14, $00, $f5, $f3, $fc
	byte	$fe, $ed, $f9, $f1, $f9, $f2, $01, $f7, $f3, $fb, $e6, $f4, $f0, $fe, $eb, $eb
	byte	$f3, $e7, $f6, $ee, $f3, $e6, $e4, $08, $f3, $df, $ec, $fb, $00, $f1, $f8, $f5
	byte	$f3, $f4, $fe, $09, $f5, $f9, $ff, $02, $0a, $fc, $fe, $f9, $0d, $06, $f9, $07
	byte	$17, $11, $05, $ff, $ee, $05, $0e, $0e, $0e, $17, $f5, $03, $10, $05, $08, $12
	byte	$12, $fe, $0a, $22, $1b, $fe, $16, $17, $16, $ff, $0b, $23, $14, $0a, $0d, $10
	byte	$03, $11, $14, $02, $fc, $13, $12, $17, $f5, $04, $0d, $02, $04, $0f, $f0, $fb
	byte	$0e, $08, $f2, $f8, $f9, $0e, $f6, $f6, $01, $f9, $f5, $eb, $f8, $02, $f7, $fa
	byte	$f0, $05, $f6, $05, $e7, $e0, $0a, $f2, $02, $fe, $ec, $f3, $09, $f7, $ec, $f5
	byte	$f5, $ef, $03, $f7, $f9, $08, $fb, $ea, $05, $f1, $fd, $fc, $0b, $f5, $f4, $f1
	byte	$f1, $08, $11, $fe, $e6, $fe, $f1, $0c, $12, $03, $f4, $fd, $06, $12, $12, $f3
	byte	$0c, $02, $12, $f4, $0f, $02, $08, $09, $10, $11, $02, $fc, $10, $17, $f7, $05
	byte	$0d, $1a, $08, $00, $0f, $07, $f8, $0f, $12, $0a, $1c, $08, $fb, $0c, $15, $12
	byte	$f9, $0f, $1a, $0e, $fd, $13, $13, $04, $02, $04, $02, $f6, $11, $03, $03, $0a
	byte	$e8, $01, $fc, $fb, $ef, $0a, $06, $ee, $f2, $fa, $e6, $f6, $f9, $04, $f2, $df
	byte	$f8, $fc, $f0, $eb, $e4, $fd, $fc, $f4, $f6, $f0, $fb, $f3, $fa, $00, $ea, $08
	byte	$f3, $e0, $01, $fc, $e1, $17, $03, $e4, $ff, $fd, $ff, $02, $ed, $09, $ff, $f5
	byte	$f7, $0b, $03, $08, $09, $05, $00, $f6, $1b, $f4, $06, $1f, $01, $f8, $fd, $0d
	byte	$11, $09, $08, $06, $0c, $02, $0e, $03, $fb, $1d, $0a, $11, $08, $f8, $16, $20
	byte	$f9, $07, $12, $fd, $0d, $15, $08, $fd, $0f, $03, $17, $00, $fe, $08, $1f, $00
	byte	$04, $11, $f8, $01, $01, $f7, $14, $03, $00, $01, $f7, $05, $fd, $f1, $fe, $19
	byte	$02, $eb, $f4, $f5, $01, $08, $ef, $fe, $00, $f9, $eb, $fd, $f5, $fc, $f2, $f8
	byte	$fd, $f3, $f1, $06, $f1, $fc, $f6, $fb, $f9, $02, $f6, $f3, $01, $fa, $02, $fb
	byte	$fd, $f6, $fc, $0b, $f5, $f6, $fe, $f8, $04, $fe, $fe, $fc, $12, $02, $f2, $06
	byte	$0b, $ff, $04, $fb, $0f, $fc, $0f, $10, $f9, $11, $0b, $fd, $f6, $09, $1c, $0b
	byte	$00, $04, $06, $18, $0c, $f8, $f5, $14, $0c, $02, $10, $fe, $03, $06, $03, $08
	byte	$06, $fe, $01, $0f, $03, $fb, $01, $07, $09, $07, $0a, $0b, $f4, $fc, $07, $01
	byte	$fd, $0b, $fd, $ff, $f9, $09, $f4, $ef, $0a, $02, $f6, $fd, $f5, $f4, $ff, $10
	byte	$03, $ed, $02, $f8, $f4, $f9, $0a, $fd, $f8, $fe, $ff, $f9, $fd, $02, $ec, $06
	byte	$f7, $fb, $fe, $04, $fd, $01, $fd, $fc, $f3, $01, $fb, $ff, $fb, $ff, $0a, $f9
	byte	$fd, $fe, $04, $0b, $f9, $f5, $08, $0e, $fe, $ff, $0e, $00, $06, $05, $0b, $0a
	byte	$fd, $09, $10, $f1, $06, $08, $fc, $0a, $fd, $ff, $06, $01, $fb, $08, $f6, $f9
	byte	$07, $10, $fa, $fa, $f4, $0d, $09, $01, $00, $f8, $f9, $0b, $fc, $f1, $0b, $0f
	byte	$05, $fa, $0b, $f5, $01, $08, $09, $ff, $f1, $03, $04, $07, $06, $ff, $04, $fa
	byte	$fc, $fc, $14, $00, $f4, $fb, $03, $fa, $0e, $02, $f5, $06, $fd, $00, $fa, $03
	byte	$00, $0f, $04, $f7, $ff, $02, $0e, $fc, $f7, $10, $09, $eb, $06, $11, $fd, $fe
	byte	$f1, $fb, $0a, $fe, $ff, $fa, $fd, $08, $07, $04, $ed, $f9, $02, $08, $0a, $fe
	byte	$00, $fd, $03, $08, $fe, $06, $00, $07, $01, $fa, $03, $0d, $fa, $ff, $02, $03
	byte	$08, $11, $f6, $09, $ff, $f9, $06, $07, $f5, $0c, $fc, $0b, $f7, $f4, $00, $08
	byte	$f6, $02, $fb, $05, $f7, $fc, $03, $07, $0c, $f1, $fa, $15, $f2, $00, $fd, $f5
	byte	$18, $03, $ed, $07, $f2, $0b, $0a, $09, $fb, $0f, $fe, $02, $0e, $f9, $f7, $0d
	byte	$0a, $f7, $fe, $0a, $02, $f8, $03, $0c, $f3, $07, $05, $fa, $f2, $06, $fe, $03
	byte	$0a, $ec, $03, $03, $fc, $06, $f6, $f9, $0e, $05, $f4, $fc, $fb, $06, $0f, $f8
	byte	$fb, $ff, $fb, $ff, $19, $fb, $f5, $fe, $fd, $0a, $07, $0a, $f8, $04, $04, $10
	byte	$06, $fc, $0e, $fb, $f6, $0c, $14, $f6, $fa, $12, $08, $08, $fe, $08, $04, $01
	byte	$00, $10, $0b, $05, $02, $f6, $0b, $0b, $fe, $04, $01, $f5, $fa, $0c, $ff, $f1
	byte	$0a, $08, $f8, $02, $fd, $fc, $04, $f7, $ff, $fa, $f3, $12, $f7, $ef, $fd, $0d
	byte	$fa, $f5, $05, $fa, $ee, $10, $f3, $f4, $05, $fc, $00, $04, $f9, $09, $fb, $f0
	byte	$fb, $0d, $01, $fa, $f6, $ff, $0a, $06, $ea, $02, $ff, $f7, $05, $fe, $07, $01
	byte	$fb, $fa, $0f, $0d, $f0, $fe, $09, $0a, $fd, $fe, $01, $0b, $00, $01, $10, $04
	byte	$fe, $01, $09, $fe, $03, $03, $0a, $05, $ff, $10, $07, $f7, $02, $0f, $0e, $ed
	byte	$05, $0b, $ff, $ff, $0a, $08, $fb, $06, $09, $f2, $05, $10, $fe, $fb, $02, $07
	byte	$06, $08, $f8, $f4, $07, $fd, $ff, $08, $fa, $02, $0d, $fd, $e8, $00, $04, $04
	byte	$05, $f3, $f4, $0d, $09, $09, $ec, $f9, $0e, $f7, $ff, $fb, $fe, $0e, $04, $f2
	byte	$08, $fb, $f5, $fe, $f4, $fd, $05, $05, $f0, $08, $f3, $fe, $ff, $f2, $fb, $00
	byte	$fd, $f9, $04, $fd, $fc, $fc, $04, $fc, $f8, $07, $f1, $fc, $fd, $04, $01, $fe
	byte	$f9, $03, $fe, $16, $06, $fa, $e8, $14, $13, $fb, $fd, $10, $03, $fe, $0c, $04
	byte	$f7, $01, $0c, $01, $f7, $0b, $0a, $0a, $00, $03, $00, $03, $0d, $07, $02, $fe
	byte	$13, $08, $03, $04, $01, $0c, $0a, $f8, $03, $13, $fd, $01, $07, $f5, $14, $15
	byte	$f7, $f7, $0c, $ff, $ff, $ff, $fa, $08, $00, $01, $0b, $fe, $f6, $fd, $fd, $05
	byte	$00, $fb, $f6, $02, $fa, $03, $09, $02, $f0, $f9, $f6, $06, $fe, $fb, $04, $f5
	byte	$f6, $02, $f9, $06, $fa, $ef, $01, $05, $f9, $fd, $00, $fd, $06, $00, $f8, $00
	byte	$ff, $03, $05, $f7, $fb, $06, $f7, $00, $00, $08, $fb, $f9, $ff, $04, $03, $0a
	byte	$f6, $f6, $07, $01, $f9, $05, $f8, $08, $01, $08, $05, $01, $fb, $0c, $00, $f5
	byte	$00, $0a, $fd, $01, $15, $fe, $00, $fc, $10, $0a, $fd, $fb, $07, $ff, $f9, $0b
	byte	$03, $01, $0d, $fb, $f7, $13, $07, $02, $03, $f1, $0b, $0e, $07, $fa, $02, $f4
	byte	$11, $0c, $fa, $f9, $0e, $01, $05, $ff, $fe, $fd, $07, $02, $01, $03, $fe, $fe
	byte	$09, $f6, $0c, $01, $f9, $f3, $0a, $05, $fa, $f8, $ff, $11, $05, $f2, $f5, $07
	byte	$08, $08, $fb, $fb, $07, $fb, $04, $03, $f7, $00, $f9, $fe, $0b, $02, $f8, $09
	byte	$fc, $05, $f8, $f9, $0a, $fe, $08, $0f, $fa, $f6, $ff, $09, $0d, $fd, $f9, $08
	byte	$ff, $04, $04, $fa, $01, $0e, $f8, $01, $03, $01, $fd, $ff, $01, $01, $fb, $06
	byte	$ff, $f3, $0f, $13, $f4, $f8, $00, $05, $0e, $03, $f8, $07, $ff, $f7, $04, $fc
	byte	$f8, $11, $0a, $fa, $fa, $fc, $fe, $ff, $fd, $11, $fe, $f1, $07, $03, $fd, $00
	byte	$f4, $0b, $06, $f4, $fa, $0d, $03, $f2, $03, $07, $fa, $00, $08, $05, $ff, $fc
	byte	$0d, $fe, $f1, $06, $0f, $fd, $f8, $05, $07, $07, $f9, $f9, $0a, $ff, $fe, $0e
	byte	$01, $fa, $02, $05, $ff, $01, $00, $09, $05, $02, $0c, $0c, $0c, $f9, $01, $00
	byte	$fe, $0e, $08, $f2, $03, $0a, $08, $01, $fe, $fa, $04, $fa, $06, $ff, $fe, $04
	byte	$01, $00, $fc, $fa, $03, $09, $f2, $fe, $ff, $06, $f9, $02, $fd, $01, $0b, $f0
	byte	$f9, $08, $05, $04, $0b, $f7, $00, $00, $01, $01, $07, $f4, $fc, $07, $05, $00
	byte	$ed, $0e, $09, $f0, $05, $02, $fd, $09, $fb, $f9, $f6, $11, $f8, $05, $02, $01
	byte	$ed, $02, $0b, $f6, $f7, $06, $f9, $fa, $07, $f4, $f5, $0b, $f0, $f9, $01, $04
	byte	$fa, $fa, $f8, $01, $ff, $01, $08, $fa, $fd, $01, $05, $06, $fc, $05, $ff, $02
	byte	$15, $ff, $f5, $15, $01, $f8, $0f, $04, $08, $04, $0b, $02, $00, $12, $14, $05
	byte	$fa, $0c, $02, $0b, $0f, $05, $fe, $09, $08, $fe, $06, $0e, $08, $f5, $09, $07
	byte	$0a, $0b, $03, $fb, $04, $f5, $0a, $10, $05, $f6, $06, $fd, $06, $00, $01, $08
	byte	$fa, $ff, $03, $fd, $fe, $f6, $fa, $f7, $04, $0a, $f5, $01, $fc, $ff, $f1, $07
	byte	$03, $f6, $ef, $fe, $fc, $ff, $01, $f8, $f4, $f4, $fb, $ff, $f1, $fd, $00, $fb
	byte	$f3, $f5, $f8, $f9, $01, $03, $e9, $fe, $ff, $fb, $fe, $f9, $00, $00
	alignl
_hng030rm_spin2_dat_
'-' vga_font       file "vgafont.def"
	byte	$00[19]
	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
	byte	$00[11]
	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
	byte	$00[16]
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
	byte	$00[9]
	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
	byte	$18[8]
	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
	byte	$18[6]
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[10]
	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
	byte	$33[6]
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
	byte	$00[6]
	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
	byte	$00[6]
	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18[15]
	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6c[9]
	byte	$00[5]
	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
	byte	$66[6]
	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
	byte	$00[12]
	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
	byte	$ff[9]
	byte	$00[7]
	byte	$ff[9]
	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$ff[7]
	byte	$00[9]
	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
	byte	$00[8]
	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
'-' st_font        file "st4font.def"
	byte	$00[55]
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$18[9]
	byte	$00[7]
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
	byte	$66[5]
	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[8]
	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
	byte	$00[9]
	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[5]
	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00[13]
	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
	byte	$00[8]
	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
	byte	$60[7]
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
	byte	$00[18]
	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
	byte	$30[9]
	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
	byte	$00[7]
	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
'-' twocolors      long  $00000000,$FFFFFF00
	byte	$00, $00, $00, $00, $00, $ff, $ff, $ff
'-' fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
	byte	$00, $00, $00, $00, $00, $80, $80, $80, $00, $00, $00, $ff, $00, $ff, $ff, $ff
'-' vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
	byte	$00[5]
	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
'-' ataripalette   file "ataripalettep2.def"
	byte	$00[5]
	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
'-' '**********************************************************************************
'-' '
'-' '        Timings and colors definitions
'-' '
'-' '**********************************************************************************
'-' 
'-'    'streamer sets for text mode, to add to timings[0..5]
'-' ' todo for the retromachine: 768x576
'-' 
'-' '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
'-' timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
	byte	$10, $00, $00, $00, $50, $00, $00, $00, $14, $00, $00, $00, $00, $04, $00, $00
	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
'-' 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
'-' 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
'-' timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
	byte	$30, $00, $00, $00, $50, $00, $00, $00, $34, $00, $00, $00, $c0, $03, $00, $00
	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
'-' 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
'-' timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
	byte	$10, $00, $00, $00, $40, $00, $00, $00, $10, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
'-' timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
	byte	$10, $00, $00, $00, $42, $00, $00, $00, $14, $00, $00, $00, $00, $04, $00, $00
	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
'-' timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
	byte	$50, $00, $00, $00, $a0, $00, $00, $00, $54, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
'-' timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
	byte	$50, $00, $00, $00, $32, $00, $00, $00, $50, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
'-' timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
	byte	$18, $00, $00, $00, $30, $00, $00, $00, $18, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
'-' timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
	byte	$20, $00, $00, $00, $40, $00, $00, $00, $22, $00, $00, $00, $80, $03, $00, $00
	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
'-' 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
'-' vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
	byte	$00, $75, $c7, $97, $27, $47, $f6, $0a, $05, $79, $cb, $9b, $2b, $4b, $ea, $0f
'-' 
'-' hdmi            setq    #9
	byte	$28, $12, $64, $fd
'-'                 rdlong  framebuf,  ptra                  'read pointers
	byte	$00, $df, $06, $fb
'-'            '     setq2   #255
'-'             '    rdlong  $100, paletteptr 
'-'                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
	byte	$00, $26, $6f, $fc
'-'                 setcmod #$100                            'enable HDMI mode
	byte	$3c, $00, $66, $fd
'-'                 mov     ii,#448                          '7 << 6          
	byte	$c0, $f9, $06, $f6
'-'                 add     ii,hbase
	byte	$78, $f9, $02, $f1
'-'                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
	byte	$58, $f8, $62, $fd
'-'                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
	byte	$7b, $0b, $80, $ff, $7c, $01, $0b, $fc
'-' 
'-'                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
	byte	$66, $66, $86, $ff, $1d, $9a, $65, $fd
'-' 
'-' 
'-' ''--------  frame rendering main loop  ---------------------------------------------------
'-' 
'-' p101
'-'                 setq    #10
	byte	$28, $14, $64, $fd
'-'                 rdlong  framebuf,  ptra
	byte	$00, $df, $06, $fb
'-'                 setq    #15
	byte	$28, $1e, $64, $fd
'-'                 rdlong  m_bs,modeptr                     ' read timings
	byte	$74, $9b, $02, $fb
'-'                 rdlong  border,borderptr
	byte	$71, $99, $02, $fb
'-' 
'-'                 add     frames,#1
	byte	$01, $c4, $06, $f1
'-'                 mov     dlptr2,dlptr
	byte	$76, $f5, $02, $f6
'-' 
'-'                 rdlong  cursorx, cursorptr               ' read cursor position
	byte	$73, $c7, $02, $fb
'-'                 getbyte cursory, cursorx,#1              ' y position at byte #1
	byte	$63, $c9, $ea, $f8
'-'                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
	byte	$63, $c3, $f2, $f8
'-'                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
	byte	$ff, $c6, $06, $f5
'-'  '' up porch
'-' 
'-'                 mov     hsync0,sync_000                  '
	byte	$48, $fd, $02, $f6
'-'                 mov     hsync1,sync_001
	byte	$49, $ff, $02, $f6
'-'                 callpa  i_upporch ,#blank
	byte	$37, $a8, $46, $fb
'-'                 wrlong  #0,vblankptr
	byte	$72, $01, $68, $fc
'-'                 
'-'                 testb   paletteptr,#31 wc
	byte	$1f, $ea, $16, $f4
'-'          if_nc  setq2   #255
	byte	$29, $fe, $65, $3d
'-'          if_nc  rdlong  $000, paletteptr                'read palette
	byte	$75, $01, $00, $3b
'-' 
'-' '' cursor blinking
'-' 
'-'                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
	byte	$04, $c4, $0e, $f4
'-'          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
	byte	$81, $c6, $06, $a6
'-' 
'-' '' main screen
'-' 
'-'                 mov linenum,#0
	byte	$00, $be, $06, $f6
'-'                 mov rcnt,#0
	byte	$00, $18, $07, $f6
'-'                 mov rcnt2a,#0
	byte	$00, $1c, $07, $f6
'-' 
'-' 
'-' p301            cmp rcnt,#0 wz
	byte	$00, $18, $0f, $f2
'-'         if_z    jmp #p306
	byte	$18, $00, $90, $ad
'-'                 sub rcnt,#1
	byte	$01, $18, $87, $f1
'-'                 mov dl,rdl
	byte	$90, $f7, $02, $f6
'-'                incmod rcnt2a,rcnt2 wz
	byte	$8d, $1d, $0b, $f7
'-'    if_z        add dl,roffset  
	byte	$8f, $f7, $02, $a1
'-'                 mov rdl,dl
	byte	$7b, $21, $03, $f6
'-'                 jmp #p307          
	byte	$04, $00, $90, $fd
'-'           
'-'                 
'-' p306            rdlong  dl,dlptr2
	byte	$7a, $f7, $02, $fb
'-' p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
	byte	$7b, $fb, $1a, $f6
'-'                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
	byte	$6a, $fa, $7a, $fd
'-'    if_nz_or_nc  jmp     #p303                        
	byte	$34, $00, $90, $7d
'-' 
'-' '' Special entry:
'-' '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
'-' '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
'-' '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
'-' '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
'-' '' todo: set horizontal scroll (if needed)
'-' 
'-'                 shl framebuf2,#2
	byte	$02, $fa, $66, $f0
'-'                 getnib dlc,framebuf2,#0
	byte	$7d, $23, $43, $f8
'-'                 cmp dlc,#%100 wz
	byte	$04, $22, $0f, $f2
'-'   
'-'                 
'-'                 add dlptr2,#4
	byte	$04, $f4, $06, $f1
'-'                              if_nz  jmp #p301  '' now ignore unknown instruction 
	byte	$bc, $ff, $9f, $5d
'-'                  rdlong rdl,dlptr2
	byte	$7a, $21, $03, $fb
'-'                  getword rcnt,framebuf2,#1 
	byte	$7d, $19, $3b, $f9
'-'                  shr rcnt,#4
	byte	$04, $18, $47, $f0
'-'              
'-'                  getnib rcnt2,framebuf2,#4
	byte	$7d, $1b, $63, $f8
'-'                  getword roffset,framebuf2,#0
	byte	$7d, $1f, $33, $f9
'-'                 
'-'                  shr roffset,#4
	byte	$04, $1e, $47, $f0
'-'                  shl roffset,#12
	byte	$0c, $1e, $67, $f0
'-'   
'-'                  jmp #p301
	byte	$9c, $ff, $9f, $fd
'-'                  
'-'                  
'-' p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
'-'                 shr     framebuf2,#12
	byte	$0c, $fa, $46, $f0
'-'                 shl     framebuf2,#2
	byte	$02, $fa, $66, $f0
'-' 
'-'                 getbyte t1,dl,#0
	byte	$7b, $03, $e3, $f8
'-'                 cmp     t1,#0 wz
	byte	$00, $02, $0f, $f2
'-'     if_z        jmp     #borderline
	byte	$34, $00, $90, $ad
'-' 
'-'                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
	byte	$00, $f6, $16, $f4
'-'           if_c   jmp     #textline
	byte	$50, $00, $90, $cd
'-'           if_nc  jmp     #graphline
	byte	$50, $02, $90, $3d
'-' '
'-' p302            add     linenum,#1
	byte	$01, $be, $06, $f1
'-'                 add     dlptr2,#4
	byte	$04, $f4, $06, $f1
'-'                 cmp     linenum,i_totalvis  wz
	byte	$5c, $bf, $0a, $f2
'-'          if_nz  jmp     #p301
	byte	$6c, $ff, $9f, $5d
'-' 
'-' p112            wrlong  #1,vblankptr
	byte	$72, $03, $68, $fc
'-'                 callpa  i_downporch ,#blank             'bottom blanks
	byte	$07, $ac, $46, $fb
'-' 
'-'                 mov     hsync0,sync_222                 'vsync on
	byte	$4a, $fd, $02, $f6
'-'                 mov     hsync1,sync_223
	byte	$4b, $ff, $02, $f6
'-'                 callpa  i_vsync,#blank                  'vertical sync blanks
	byte	$04, $aa, $46, $fb
'-'                 jmp     #p101
	byte	$f8, $fe, $9f, $fd
'-' 
'-' '' ---------------  END of frame rendering loop -------------------------------------------
'-' 
'-' 
'-' borderline      call    #hsync                      ' make a border
	byte	$14, $00, $b0, $fd
'-'                 xcont   m_vi,border
	byte	$4c, $a1, $c2, $fc
'-'                 jmp     #p302
	byte	$cc, $ff, $9f, $fd
'-' 
'-' 
'-' blank           call    #hsync                          'blank lines
	byte	$08, $00, $b0, $fd
'-'                 xcont   m_vi,hsync0
	byte	$7e, $a1, $c2, $fc
'-'         _ret_   djnz    pa,#blank
	byte	$fd, $ed, $6f, $0b
'-' 
'-' hsync           xcont   m_bs,hsync0                     'horizontal sync
	byte	$7e, $9b, $c2, $fc
'-'                 xzero   m_sn,hsync1
	byte	$7f, $9d, $b2, $fc
'-'         _ret_   xcont   m_bv,hsync0
	byte	$7e, $9f, $c2, $0c
'-' 
'-' 
'-' 
'-' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
'-'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
'-'   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
'-' 
'-' '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
'-' 
'-' textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
	byte	$63, $cd, $02, $f6
'-' 
'-'                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
	byte	$7b, $01, $53, $f8
'-'                 getnib  zoom, dl,#3
	byte	$7b, $17, $5b, $f8
'-'                 and             zoom, #3
	byte	$03, $16, $07, $f5
'-' 
'-' 
'-' 
'-'                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
	byte	$7b, $bd, $02, $f6
'-'                 shr     linestart,#2                    ' scanline to char line
	byte	$02, $bc, $46, $f0
'-'                 and     linestart,#63
	byte	$3f, $bc, $06, $f5
'-'                 cmp     linestart,cursory wz            ' if the cursor is not here
	byte	$64, $bd, $0a, $f2
'-'           if_nz mov     cursorpos2,#129                 ' move it out of the screen
	byte	$81, $cc, $06, $56
'-' 
'-'                 call    #hsync                          ' now call hsync to gain some time between xconts
	byte	$cc, $ff, $bf, $fd
'-' 
'-'                        ' if fontline =0, get a border color
'-' 
'-' p102            getword t1,m_border,#0
	byte	$51, $03, $33, $f9
'-'                 cmp     t1, #0 wz
	byte	$00, $02, $0f, $f2
'-'           if_nz xcont   m_border,border                 ' display a left border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
	byte	$61, $01, $1b, $f2
'-'           if_c  mov     cursorpos,#129                  ' move it out of the screen
	byte	$81, $ca, $06, $c6
'-'          if_nc  mov     cursorpos,cursorpos2
	byte	$66, $cb, $02, $36
'-'                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
	byte	$01, $ca, $06, $f1
'-'                 mov     t2,fontbuf                      ' font definition pointer
	byte	$70, $05, $03, $f6
'-'                 add     t2,fontline                     ' add a current font line
	byte	$80, $05, $03, $f1
'-'                 mov m_lut2, m_lut1
	byte	$52, $bb, $02, $f6
'-'                 add m_lut2, lutt1
	byte	$6a, $bb, $02, $f1
'-'                 mov cpl2,i_cpl
	byte	$58, $0f, $03, $f6
'-' 
'-'                cmp zoom,#2 wz
	byte	$02, $16, $0f, $f2
'-'           if_z jmp #p420
	byte	$e4, $00, $90, $ad
'-'                cmp zoom,#1 wz
	byte	$01, $16, $0f, $f2
'-'           if_z jmp #p410
	byte	$64, $00, $90, $ad
'-'                 cmp zoom,#0 wz
	byte	$00, $16, $0f, $f2
'-'           if_z jmp #p400
	byte	$04, $00, $90, $ad
'-'                jmp #p430
	byte	$50, $01, $90, $fd
'-' 
'-'                    '
'-'  ''---------------------------------------------------------------------------------------------------------
'-'  p400                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p400
	byte	$eb, $0f, $6f, $fb
'-'  p401                   jmp    #p103
	byte	$28, $01, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-'  p410                   shr cpl2,#1
	byte	$01, $0e, $47, $f0
'-' 
'-' ''---------------------------------------------------------------------------------------------------------
'-'  p412                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-' 
'-'                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
	byte	$81, $07, $4b, $f8
'-'                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
	byte	$81, $03, $43, $f8
'-'                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
	byte	$63, $02, $63, $fd
'-'                         mul t1,#3
	byte	$03, $02, $07, $fa
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-'                         mergew t3
	byte	$63, $06, $63, $fd
'-'                         mul t3,#3
	byte	$03, $06, $07, $fa
'-'                         xcont m_lut2,t3
	byte	$83, $bb, $c2, $fc
'-' 
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-' 
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p412
	byte	$e4, $0f, $6f, $fb
'-'  p411                   jmp    #p103
	byte	$b0, $00, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-'  p420                   shr cpl2,#2
	byte	$02, $0e, $47, $f0
'-' 
'-' ''---------------------------------------------------------------------------------------
'-'  p422                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-'                         mergeb t1
	byte	$61, $02, $63, $fd
'-'                         getword t3,t1,#1
	byte	$81, $07, $3b, $f9
'-'                         mul t1,#15
	byte	$0f, $02, $07, $fa
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         getbyte t4,t1,#1        '
	byte	$81, $09, $eb, $f8
'-'                         xcont m_lut2,t4                                                                                                           '
	byte	$84, $bb, $c2, $fc
'-' 
'-'                         mul t3,#15
	byte	$0f, $06, $07, $fa
'-'                         xcont m_lut2,t3
	byte	$83, $bb, $c2, $fc
'-' 
'-'                         getbyte t5,t3,#1
	byte	$83, $0b, $eb, $f8
'-'                         xcont m_lut2, t5
	byte	$85, $bb, $c2, $fc
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-' 
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p422
	byte	$e2, $0f, $6f, $fb
'-'  p421                   jmp    #p103
	byte	$30, $00, $90, $fd
'-' 
'-' '--------------------------------------------------------------------------------------------------------------
'-' 
'-'  p430                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-' 
'-'                         xcont m_lut2,#0
	byte	$00, $ba, $c6, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         djnz   cpl2,#p430
	byte	$f5, $0f, $6f, $fb
'-'  p431                   jmp    #p103
	byte	$00, $00, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-' 
'-' 
'-' p103            getword  mb2,m_border,#0
	byte	$51, $25, $33, $f9
'-'                 cmp      mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'                 if_nz    xcont   m_border,border            'display a right border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 jmp #p302
	byte	$b0, $fd, $9f, $fd
'-' 
'-' '' -------------------------------------- END of text line ---------------------------------
'-' 
'-'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
'-' 
'-' graphline       call    #hsync                          ' now call hsync to gain some time between xconts
	byte	$ec, $fd, $bf, $fd
'-' 
'-' 
'-' p202            getword mb2,m_border,#0
	byte	$51, $25, $33, $f9
'-'                 cmp     mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'           if_nz xcont   m_border,border                 ' display a left border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-' '----------------------------------------- display pixels
'-' 
'-'                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
	byte	$52, $bb, $02, $f6
'-'                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
	byte	$58, $0f, $03, $f6
'-' 
'-'                 getnib  zoom, dl,#3
	byte	$7b, $17, $5b, $f8
'-'                 and             zoom, #3                        ' get a horizontal zoom for the line
	byte	$03, $16, $07, $f5
'-' 
'-'                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
	byte	$7b, $bd, $02, $f6
'-'                 and     colordepth,#12
	byte	$0c, $bc, $06, $f5
'-' 
'-'                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
	byte	$00, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg1
	byte	$6b, $bb, $02, $a1
'-'           if_z  jmp     #p240
	byte	$64, $00, $90, $ad
'-' 
'-'                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
	byte	$04, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg2
	byte	$6c, $bb, $02, $a1
'-'           if_z  jmp     #p250
	byte	$98, $00, $90, $ad
'-' 
'-'                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
	byte	$08, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg4
	byte	$6d, $bb, $02, $a1
'-'           if_z  jmp     #p260
	byte	$fc, $00, $90, $ad
'-' 
'-'                 add m_lut2,lutg8                        ' 8 bpp modes
	byte	$6e, $bb, $02, $f1
'-' 
'-' '' --- 8 bit color modes
'-' 
'-'                 cmp zoom, #%00 wz   '256 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
	byte	$50, $01, $90, $ad
'-' 
'-'                 cmp zoom, #%01 wz   '256 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'                 if_z mov skippattern,#%101010
	byte	$2a, $0c, $07, $a6
'-'        
'-'  '  
'-'                 cmp zoom, #%10 wz   '256 colors, zoom x4
	byte	$02, $16, $0f, $f2
'-'                 if_z mov skippattern,#%100101
	byte	$25, $0c, $07, $a6
'-'     
'-'  
'-'                 if_nz mov skippattern,#%000101
	byte	$05, $0c, $07, $56
'-'                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
	byte	$01, $0e, $47, $50
'-'         
'-' 
'-'         
'-' p235               rdlong  char,framebuf2
	byte	$7d, $11, $03, $fb
'-'                    skipf skippattern
	byte	$32, $0c, $63, $fd
'-'                    add     framebuf2,#2             '0 1 1
	byte	$02, $fa, $06, $f1
'-'                    add     framebuf2,#1             '1 0 0
	byte	$01, $fa, $06, $f1
'-'                    movbyts char,#%01010000          '0 1 1
	byte	$50, $10, $ff, $f9
'-'                    movbyts char,#%00000000          '1 0 0
	byte	$00, $10, $ff, $f9
'-'                    xcont   m_lut2,char              '0 0 0
	byte	$88, $bb, $c2, $fc
'-'                    xcont   m_lut2,char              '1 1 0
	byte	$88, $bb, $c2, $fc
'-'                    djnz    cpl2,#p235
	byte	$f7, $0f, $6f, $fb
'-' 
'-'                jmp    #p203
	byte	$20, $01, $90, $fd
'-'                   
'-' 
'-' 
'-' '' --- 1 bit color modes
'-' 
'-' p240          cmp zoom, #%00 wz     '2 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
	byte	$08, $01, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '2 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   mov skippattern,#%10011
	byte	$13, $0c, $07, $a6
'-'        if_nz  mov skippattern,#%01000
	byte	$08, $0c, $07, $56
'-' 
'-' 
'-' p241               rdword  char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                    movbyts char,#%01000100
	byte	$44, $10, $ff, $f9
'-'                    mergew  char
	byte	$63, $10, $63, $fd
'-'                    skipf skippattern
	byte	$32, $0c, $63, $fd
'-'                    movbyts char,#%01000100         ' 1 0
	byte	$44, $10, $ff, $f9
'-'                    mergew  char                    ' 1 0
	byte	$63, $10, $63, $fd
'-'                    xcont   m_lut2,char             ' 0 0
	byte	$88, $bb, $c2, $fc
'-'                    add     framebuf2,#2                    ' 0 1
	byte	$02, $fa, $06, $f1
'-'                    add     framebuf2,#1                ' 1 0
	byte	$01, $fa, $06, $f1
'-'                    djnz   cpl2,#p241
	byte	$f6, $0f, $6f, $fb
'-' 
'-' 
'-'                jmp    #p203
	byte	$e0, $00, $90, $fd
'-' 
'-' '' --- 2 bit color modes
'-' 
'-' p250          cmp zoom, #%00 wz     '4 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251
	byte	$c8, $00, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '4 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   jmp #p252
	byte	$30, $00, $90, $ad
'-' 
'-' 
'-' p254               rdbyte char,framebuf2
	byte	$7d, $11, $c3, $fa
'-'                    mov  t5,#4
	byte	$04, $0a, $07, $f6
'-' p255               shl  char,#2
	byte	$02, $10, $67, $f0
'-'                    getnib  t1,char,#2
	byte	$88, $03, $53, $f8
'-'                    and     t1,#3
	byte	$03, $02, $07, $f5
'-'                    mul     t1,#$55
	byte	$55, $02, $07, $fa
'-'                    rolbyte  t2,t1,#0
	byte	$81, $05, $03, $f9
'-'                    djnz    t5,#p255
	byte	$fa, $0b, $6f, $fb
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#1
	byte	$01, $fa, $06, $f1
'-'                    djnz    cpl2,#p254
	byte	$f5, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$a0, $00, $90, $fd
'-' 
'-' p252               rdword char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                    mov  t5,#8
	byte	$08, $0a, $07, $f6
'-' p253               shl  char,#2
	byte	$02, $10, $67, $f0
'-'                    getnib  t1,char,#4
	byte	$88, $03, $63, $f8
'-'                    and     t1,#3
	byte	$03, $02, $07, $f5
'-'                    mul     t1,#5
	byte	$05, $02, $07, $fa
'-'                    rolnib  t2,t1,#0
	byte	$81, $05, $83, $f8
'-'                    djnz    t5,#p253
	byte	$fa, $0b, $6f, $fb
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#2
	byte	$02, $fa, $06, $f1
'-'                    djnz    cpl2,#p252
	byte	$f5, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$70, $00, $90, $fd
'-' 
'-' '' ------ 4 bit color modes
'-' 
'-' p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251
	byte	$58, $00, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '4 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   jmp #p262
	byte	$2c, $00, $90, $ad
'-' 
'-' 
'-' p263               rdbyte char,framebuf2
	byte	$7d, $11, $c3, $fa
'-'                            rep #5,#2
	byte	$02, $0a, $dc, $fc
'-'                              rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                                  rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                              rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                                  rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                              shl char,#4
	byte	$04, $10, $67, $f0
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#1
	byte	$01, $fa, $06, $f1
'-'                    djnz    cpl2,#p263
	byte	$f6, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$34, $00, $90, $fd
'-' 
'-' p262               rdword  char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                            rep #3,#4
	byte	$04, $06, $dc, $fc
'-'                              rolnib t2,char,#3
	byte	$88, $05, $9b, $f8
'-'                                  rolnib t2,char,#3
	byte	$88, $05, $9b, $f8
'-'                              shl char,#4
	byte	$04, $10, $67, $f0
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#2
	byte	$02, $fa, $06, $f1
'-'                    djnz    cpl2,#p262
	byte	$f8, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$10, $00, $90, $fd
'-' 
'-' ''---------- all color modes without zoom
'-' 
'-' p251               rep  #3,cpl2
	byte	$87, $07, $d8, $fc
'-'                    rdlong  char,framebuf2
	byte	$7d, $11, $03, $fb
'-'                    add     framebuf2,#4
	byte	$04, $fa, $06, $f1
'-'                    xcont   m_lut2,char
	byte	$88, $bb, $c2, $fc
'-'           
'-'  ''-----------------------------------------------------------------------------------------
'-' p203           ' getword  mb2,m_border,#0
'-'                 cmp      mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'                 if_nz    xcont   m_border,border            'display a right border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 jmp #p302
	byte	$ec, $fb, $9f, $fd
'-' 
'-' '' -------------------------------------- END of graph  line ---------------------------------
'-' 
'-' '' consts and vars
'-' 
'-' sync_000        long    %1101010100_1101010100_1101010100_10    '
	byte	$52, $4d, $35, $d5
'-' sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
	byte	$ae, $42, $35, $d5
'-' sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
	byte	$52, $45, $15, $55
'-' sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
	byte	$ae, $4a, $15, $55
'-' 
'-' border          long    %00000000_00011010_00101100_00000000
	byte	$00, $2c, $1a, $00
'-' 
'-' '------ these longs will be set by setmode function
'-' 
'-' m_bs            long    0        'blanks before sync
	byte	$00, $00, $00, $00
'-' m_sn            long    0        'sync
	byte	$00, $00, $00, $00
'-' m_bv            long    0        'blanks before visible
	byte	$00, $00, $00, $00
'-' m_vi            long    0        'visible pixels #
	byte	$00, $00, $00, $00
'-' m_border        long    0        'left/right borders
	byte	$00, $00, $00, $00
'-' m_lut1          long    0        'characters
	byte	$00, $00, $00, $00
'-' i_vborder       long    0        'up/down borders
	byte	$00, $00, $00, $00
'-' i_upporch       long    0        'up porch lines
	byte	$00, $00, $00, $00
'-' i_vsync         long    0        'vsync lines
	byte	$00, $00, $00, $00
'-' i_downporch     long    0        'down porch lines
	byte	$00, $00, $00, $00
'-' i_modenum       long    0        'mode #
	byte	$00, $00, $00, $00
'-' i_cpl           long    0        'chars/longs per line
	byte	$00, $00, $00, $00
'-' i_lines         long    0        'scanlines #
	byte	$00, $00, $00, $00
'-' i_clock         long    0
	byte	$00, $00, $00, $00
'-' i_hubset        long    0
	byte	$00, $00, $00, $00
'-' i_totalvis      long    0
	byte	$00, $00, $00, $00
'-' 
'-' '-------------------------------------
'-' 
'-' m_lut2          long    0
	byte	$00, $00, $00, $00
'-' 
'-' colordepth
'-' linestart       long    0
	byte	$00, $00, $00, $00
'-' linenum         long    0
	byte	$00, $00, $00, $00
'-' lutaddr         long    256
	byte	$00, $01, $00, $00
'-' 
'-' cursorsh        long    14
	byte	$0e, $00, $00, $00
'-' frames          long    0
	byte	$00, $00, $00, $00
'-' cursorx         long    0
	byte	$00, $00, $00, $00
'-' cursory         long    0
	byte	$00, $00, $00, $00
'-' cursorpos       long    0
	byte	$00, $00, $00, $00
'-' cursorpos2      long    0
	byte	$00, $00, $00, $00
'-' fontstart       long    0
	byte	$00, $00, $00, $00
'-' border2         long 0
	byte	$00, $00, $00, $00
'-' lutiv           long $70810000
	byte	$00, $00, $81, $70
'-' lutt1           long $00880000
	byte	$00, $00, $88, $00
'-' lutg1           long $00800000
	byte	$00, $00, $80, $00
'-' lutg2           long $10800000
	byte	$00, $00, $80, $10
'-' lutg4           long $20800000
	byte	$00, $00, $80, $20
'-' lutg8           long $30800000
	byte	$00, $00, $80, $30
'-' framebuf        long 0
	byte	$00, $00, $00, $00
'-' fontbuf         long 0
	byte	$00, $00, $00, $00
'-' borderptr       long 0
	byte	$00, $00, $00, $00
'-' vblankptr       long 0
	byte	$00, $00, $00, $00
'-' cursorptr       long 0
	byte	$00, $00, $00, $00
'-' modeptr         long 0
	byte	$00, $00, $00, $00
'-' paletteptr      long 0
	byte	$00, $00, $00, $00
'-' dlptr           long 0
	byte	$00, $00, $00, $00
'-' fontnumptr      res     1
'-' fontnumptr      res     1
'-' hbase           res     1
'-' hbase           res     1
'-' borderptr2      res     1
'-' borderptr2      res     1
'-' dlptr2 res 1
'-' dlptr2 res 1
'-' dl              res 1
'-' dl              res 1
'-' ii              res     1
'-' ii              res     1
'-' framebuf2       res     1
'-' framebuf2       res     1
'-' hsync0          res     1
'-' hsync0          res     1
'-' hsync1          res     1
'-' hsync1          res     1
'-' fontline        res     1
'-' fontline        res     1
'-' t1              res     1
'-' t1              res     1
'-' t2              res     1
'-' t2              res     1
'-' t3 res 1
'-' t3 res 1
'-' t4 res 1
'-' t4 res 1
'-' t5 res 1
'-' t5 res 1
'-' skippattern res 1
'-' skippattern res 1
'-' cpl2 res 1
'-' cpl2 res 1
'-' char            res     1
'-' char            res     1
'-' backcolor       res     1
'-' backcolor       res     1
'-' charcolor       res     1
'-' charcolor       res     1
'-' zoom res 1
'-' zoom res 1
'-' rcnt long 0 'dl repeat count
	byte	$00, $00, $00, $00
'-' rcnt2 long 0
	byte	$00, $00, $00, $00
'-' rcnt2a long 0
	byte	$00, $00, $00, $00
'-' roffset long 0
	byte	$00, $00, $00, $00
'-' rdl long 0  'dl repeat line
	byte	$00, $00, $00, $00
'-' dlc long 0 'dl command
	byte	$00, $00, $00, $00
'-' mb2 long 0
	byte	$00, $00, $00, $00
'-' aend             long 0
	byte	$00, $00, $00, $00
'-'                 fit     496                     '
	alignl
_trackerplayer_spin2_dat_
'-' 
'-' null             long  0
	byte	$00, $00, $00, $00
'-' frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
'-' 
'-' vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
	byte	$00, $00, $00, $00, $18, $00, $00, $00, $31, $00, $00, $00, $4a, $00, $00, $00
	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
'-'                  long  180,  197,  212,  224,  235,  244,  250,  253
	byte	$b4, $00, $00, $00, $c5, $00, $00, $00, $d4, $00, $00, $00, $e0, $00, $00, $00
	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
'-'                  long  255,  253,  250,  244,  235,  224,  212,  197
	byte	$ff, $00, $00, $00, $fd, $00, $00, $00, $fa, $00, $00, $00, $f4, $00, $00, $00
	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
'-'                  long  180,  161,  141,  120,  97,   74,   49,   24
	byte	$b4, $00, $00, $00, $a1, $00, $00, $00, $8d, $00, $00, $00, $78, $00, $00, $00
	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
'-'                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
	byte	$00, $00, $00, $00, $e8, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $b6, $ff, $ff, $ff
	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
'-'                  long -180, -197, -212, -224, -235, -244, -250, -253
	byte	$4c, $ff, $ff, $ff, $3b, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $20, $ff, $ff, $ff
	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
'-'                  long -255, -253, -250, -244, -235, -224, -212, -197
	byte	$01, $ff, $ff, $ff, $03, $ff, $ff, $ff, $06, $ff, $ff, $ff, $0c, $ff, $ff, $ff
	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
'-'                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
	byte	$4c, $ff, $ff, $ff, $5f, $ff, $ff, $ff, $73, $ff, $ff, $ff, $88, $ff, $ff, $ff
	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
'-' 
'-' periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
	byte	$58, $03, $28, $03, $fa, $02, $d0, $02, $a6, $02, $80, $02, $5c, $02, $3a, $02
	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
'-'                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
	byte	$ac, $01, $94, $01, $7d, $01, $68, $01, $53, $01, $40, $01, $2e, $01, $1d, $01
	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
'-'                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
	byte	$d6, $00, $ca, $00, $be, $00, $b4, $00, $aa, $00, $a0, $00, $97, $00, $8f, $00
	byte	$87, $00, $7f, $00, $78, $00, $71, $00
'-'                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
	byte	$6b, $00, $22, $03, $f5, $02, $cb, $02, $a2, $02, $7d, $02, $59, $02, $37, $02
	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
'-'                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
	byte	$a9, $01, $91, $01, $7b, $01, $65, $01, $51, $01, $3e, $01, $2c, $01, $1c, $01
	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
'-'                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
	byte	$d5, $00, $c9, $00, $bd, $00, $b3, $00, $a9, $00, $9f, $00, $96, $00, $8e, $00
	byte	$86, $00, $7e, $00, $77, $00, $71, $00
'-'                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
	byte	$4c, $03, $1c, $03, $f0, $02, $c5, $02, $9e, $02, $78, $02, $55, $02, $33, $02
	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
'-'                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
	byte	$a6, $01, $8e, $01, $78, $01, $63, $01, $4f, $01, $3c, $01, $2a, $01, $1a, $01
	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
'-'                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
	byte	$d3, $00, $c7, $00, $bc, $00, $b1, $00, $a7, $00, $9e, $00, $95, $00, $8d, $00
	byte	$85, $00, $7d, $00, $76, $00, $70, $00
'-'                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
	byte	$46, $03, $17, $03, $ea, $02, $c0, $02, $99, $02, $74, $02, $50, $02, $2f, $02
	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
'-'                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
	byte	$a3, $01, $8b, $01, $75, $01, $60, $01, $4c, $01, $3a, $01, $28, $01, $18, $01
	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
'-'                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
	byte	$d1, $00, $c6, $00, $bb, $00, $b0, $00, $a6, $00, $9d, $00, $94, $00, $8c, $00
	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
'-'                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
	byte	$40, $03, $11, $03, $e5, $02, $bb, $02, $94, $02, $6f, $02, $4c, $02, $2b, $02
	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
'-'                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
	byte	$a0, $01, $88, $01, $72, $01, $5e, $01, $4a, $01, $38, $01, $26, $01, $16, $01
	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
'-'                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
	byte	$d0, $00, $c4, $00, $b9, $00, $af, $00, $a5, $00, $9c, $00, $93, $00, $8b, $00
	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
'-'                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
	byte	$3a, $03, $0b, $03, $e0, $02, $b6, $02, $8f, $02, $6b, $02, $48, $02, $27, $02
	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
'-'                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
	byte	$9d, $01, $86, $01, $70, $01, $5b, $01, $48, $01, $35, $01, $24, $01, $14, $01
	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
'-'                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
	byte	$ce, $00, $c3, $00, $b8, $00, $ae, $00, $a4, $00, $9b, $00, $92, $00, $8a, $00
	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
'-'                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
	byte	$34, $03, $06, $03, $da, $02, $b1, $02, $8b, $02, $66, $02, $44, $02, $23, $02
	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
'-'                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
	byte	$9a, $01, $83, $01, $6d, $01, $59, $01, $45, $01, $33, $01, $22, $01, $12, $01
	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
'-'                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
	byte	$cd, $00, $c1, $00, $b7, $00, $ac, $00, $a3, $00, $9a, $00, $91, $00, $89, $00
	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
'-'                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
	byte	$2e, $03, $00, $03, $d5, $02, $ac, $02, $86, $02, $62, $02, $3f, $02, $1f, $02
	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
'-'                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
	byte	$97, $01, $80, $01, $6b, $01, $56, $01, $43, $01, $31, $01, $20, $01, $10, $01
	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
'-'                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
	byte	$cc, $00, $c0, $00, $b5, $00, $ab, $00, $a1, $00, $98, $00, $90, $00, $88, $00
	byte	$80, $00, $79, $00, $72, $00, $6c, $00
'-'                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
	byte	$8b, $03, $58, $03, $28, $03, $fa, $02, $d0, $02, $a6, $02, $80, $02, $5c, $02
	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
'-'                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
	byte	$c5, $01, $ac, $01, $94, $01, $7d, $01, $68, $01, $53, $01, $40, $01, $2e, $01
	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
'-'                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
	byte	$e2, $00, $d6, $00, $ca, $00, $be, $00, $b4, $00, $aa, $00, $a0, $00, $97, $00
	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
'-'                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
	byte	$84, $03, $52, $03, $22, $03, $f5, $02, $cb, $02, $a3, $02, $7c, $02, $59, $02
	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
'-'                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
	byte	$c2, $01, $a9, $01, $91, $01, $7b, $01, $65, $01, $51, $01, $3e, $01, $2c, $01
	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
'-'                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
	byte	$e1, $00, $d4, $00, $c8, $00, $bd, $00, $b3, $00, $a9, $00, $9f, $00, $96, $00
	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
'-'                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
	byte	$7e, $03, $4c, $03, $1c, $03, $f0, $02, $c5, $02, $9e, $02, $78, $02, $55, $02
	byte	$33, $02, $14, $02, $f6, $01, $da, $01
'-'                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
	byte	$bf, $01, $a6, $01, $8e, $01, $78, $01, $63, $01, $4f, $01, $3c, $01, $2a, $01
	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
'-'                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
	byte	$df, $00, $d3, $00, $c7, $00, $bc, $00, $b1, $00, $a7, $00, $9e, $00, $95, $00
	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
'-'                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
	byte	$77, $03, $46, $03, $17, $03, $ea, $02, $c0, $02, $99, $02, $74, $02, $50, $02
	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
'-'                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
	byte	$bc, $01, $a3, $01, $8b, $01, $75, $01, $60, $01, $4c, $01, $3a, $01, $28, $01
	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
'-'                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
	byte	$de, $00, $d1, $00, $c6, $00, $bb, $00, $b0, $00, $a6, $00, $9d, $00, $94, $00
	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
'-'                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
	byte	$71, $03, $40, $03, $11, $03, $e5, $02, $bb, $02, $94, $02, $6f, $02, $4c, $02
	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
'-'                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
	byte	$b9, $01, $a0, $01, $88, $01, $72, $01, $5e, $01, $4a, $01, $38, $01, $26, $01
	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
'-'                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
	byte	$dc, $00, $d0, $00, $c4, $00, $b9, $00, $af, $00, $a5, $00, $9c, $00, $93, $00
	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
'-'                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
	byte	$6b, $03, $3a, $03, $0b, $03, $e0, $02, $b6, $02, $8f, $02, $6b, $02, $48, $02
	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
'-'                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
	byte	$b5, $01, $9d, $01, $86, $01, $70, $01, $5b, $01, $48, $01, $35, $01, $24, $01
	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
'-'                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
	byte	$db, $00, $ce, $00, $c3, $00, $b8, $00, $ae, $00, $a4, $00, $9b, $00, $92, $00
	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
'-'                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
	byte	$64, $03, $34, $03, $06, $03, $da, $02, $b1, $02, $8b, $02, $66, $02, $44, $02
	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
'-'                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
	byte	$b2, $01, $9a, $01, $83, $01, $6d, $01, $59, $01, $45, $01, $33, $01, $22, $01
	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
'-'                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
	byte	$d9, $00, $cd, $00, $c1, $00, $b7, $00, $ac, $00, $a3, $00, $9a, $00, $91, $00
	byte	$89, $00, $81, $00, $7a, $00, $73, $00
'-'                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
	byte	$5e, $03, $2e, $03, $00, $03, $d5, $02, $ac, $02, $86, $02, $62, $02, $3f, $02
	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
'-'                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
	byte	$af, $01, $97, $01, $80, $01, $6b, $01, $56, $01, $43, $01, $31, $01, $20, $01
	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
'-'                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
	byte	$d8, $00, $cb, $00, $c0, $00, $b5, $00, $ab, $00, $a1, $00, $98, $00, $90, $00
	byte	$88, $00, $80, $00, $79, $00, $72, $00
	alignl
_audio016_spin2_dat_
'-' 
'-' audio       org     0
'-' 			mov ptrb,#0
	byte	$00, $f2, $07, $f6
'-' 			setq #71
	byte	$28, $8e, $64, $fd
'-'             rdlong  sstart1,ptra
	byte	$00, $a9, $06, $fb
'-'             wrpin   dac,#left       ' Noise dither DACs at clk/90
	byte	$0e, $76, $07, $fc
'-'             wxpin   #100,#left
	byte	$0e, $c8, $1c, $fc
'-'             wrpin   dac,#right
	byte	$0f, $76, $07, $fc
'-'             wxpin   #100,#right
	byte	$0f, $c8, $1c, $fc
'-'             dirh    #left addpins 1
	byte	$41, $9c, $64, $fd
'-'             setse1  #%001<<6 + left ' Set the event - DAC empty
	byte	$20, $9c, $64, $fd
'-'             mov     ijmp1,#isr1     ' Init the interrupt
	byte	$2d, $e9, $07, $f6
'-'             setint1 #4              ' Interrupt from DAC empty event
	byte	$25, $08, $64, $fd
'-'             
'-' '---------------------------------------------------------------------------------        
'-' '----------------- The main loop -------------------------------------------------
'-' '---------------------------------------------------------------------------------
'-' 
'-' loop        cmp     time0,a21000000 wc  ' time counter overflow protection
	byte	$37, $39, $13, $f2
'-'       if_c  jmp     #loop1
	byte	$24, $00, $90, $cd
'-'       
'-'             sub     time1,a20000000
	byte	$36, $3b, $83, $f1
'-'             sub     time2,a20000000
	byte	$36, $3d, $83, $f1
'-'             sub     time3,a20000000
	byte	$36, $3f, $83, $f1
'-'             sub     time4,a20000000
	byte	$36, $41, $83, $f1
'-'             sub     time5,a20000000
	byte	$36, $43, $83, $f1
'-'             sub     time6,a20000000
	byte	$36, $45, $83, $f1
'-'             sub     time7,a20000000
	byte	$36, $47, $83, $f1
'-'             sub     time8,a20000000
	byte	$36, $49, $83, $f1
'-'             sub     time0,a20000000
	byte	$36, $39, $83, $f1
'-'     
'-' loop1       and     p1,acmd1            ' cmd=0 resets the phase accumulator
	byte	$5c, $87, $02, $f5
'-'             and     p2,acmd2
	byte	$65, $89, $02, $f5
'-'             and     p3,acmd3
	byte	$6e, $8b, $02, $f5
'-'             and     p4,acmd4
	byte	$77, $8d, $02, $f5
'-'             and     p5,acmd5
	byte	$80, $8f, $02, $f5
'-'             and     p6,acmd6
	byte	$89, $91, $02, $f5
'-'             and     p7,acmd7
	byte	$92, $93, $02, $f5
'-'             and     p8,acmd8
	byte	$9b, $95, $02, $f5
'-'        
'-'             mov     cn,#p201           ' Find the channel to compute
	byte	$2f, $4c, $07, $f6
'-'             mov     ct,time1           ' with the lowest next sample time
	byte	$9d, $4f, $03, $f6
'-'             fle     ct,time2 wcz   
	byte	$9e, $4f, $3b, $f3
'-'     if_c    mov     cn,#p202 
	byte	$48, $4c, $07, $c6
'-'             fle     ct,time3 wcz
	byte	$9f, $4f, $3b, $f3
'-'     if_c    mov     cn,#p203     
	byte	$63, $4c, $07, $c6
'-'             fle     ct,time4 wcz
	byte	$a0, $4f, $3b, $f3
'-'     if_c    mov     cn,#p204
	byte	$7e, $4c, $07, $c6
'-'             fle     ct,time5 wcz
	byte	$a1, $4f, $3b, $f3
'-'     if_c    mov     cn,#p205 
	byte	$99, $4c, $07, $c6
'-'             fle     ct,time6 wcz
	byte	$a2, $4f, $3b, $f3
'-'     if_c    mov     cn,#p206
	byte	$b4, $4c, $07, $c6
'-'             fle     ct,time7 wcz
	byte	$a3, $4f, $3b, $f3
'-'     if_c    mov     cn,#p207
	byte	$cf, $4c, $07, $c6
'-'             fle     ct,time8 wcz
	byte	$a4, $4f, $3b, $f3
'-'     if_c    mov     cn,#p208 
	byte	$ea, $4c, $07, $c6
'-'  
'-'             jmp     cn
	byte	$2c, $4c, $63, $fd
'-'    
'-' '----------------------------------------------------------------------------------
'-' '------------- Compute channel samples --------------------------------------------
'-' '----------------------------------------------------------------------------------
'-' 	
'-' ' ------------  Channel 1
'-'  
'-' p201        setq    #8              ' Read channel regs from the hub
	byte	$28, $10, $64, $fd
'-'             rdlong  sstart1,ptra
	byte	$00, $a9, $06, $fb
'-' 
'-'             mov     dt0,time1      ' compute the delta to add to the global time
	byte	$9d, $51, $03, $f6
'-'             sub     dt0,time0
	byte	$9c, $51, $83, $f1
'-'             add     time1,freq1    ' compute the next channel time	
	byte	$5a, $3b, $03, $f1
'-' 	        
'-'             add     p1,askip1      ' update the phase accumulator
	byte	$5b, $87, $02, $f1
'-'             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
	byte	$57, $87, $1a, $f2
'-'     if_ge   sub     p1,lend1	        
	byte	$57, $87, $82, $31
'-'     if_ge   add     p1,lstart1       
	byte	$56, $87, $02, $31
'-'             mov     qq,p1          ' compute the pointer to the next sample
	byte	$43, $97, $02, $f6
'-'             add     qq,sstart1
	byte	$54, $97, $02, $f1
'-'             
'-'             cmp     type1,#0 wz    ' check the sample type
	byte	$00, $aa, $0e, $f2
'-'     if_nz   rdbyte  spl,qq         ' not zero=8 bit
	byte	$4b, $99, $c2, $5a
'-'     if_nz   shl     spl,#8
	byte	$08, $98, $66, $50
'-'     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
	byte	$4b, $99, $e2, $aa
'-' 
'-'             scas    spl,vol1       ' apply the volume
	byte	$58, $99, $32, $fa
'-'             mov     spl,0-0
	byte	$00, $98, $02, $f6
'-' 
'-'             scas    spl,apan1      ' apply the pan
	byte	$59, $99, $32, $fa
'-'             mov     ls1,0-0
	byte	$00, $56, $03, $f6
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $96, $06, $f6
'-'             sub     qq,apan1
	byte	$59, $97, $82, $f1
'-'             scas    spl,qq
	byte	$4b, $99, $32, $fa
'-'             mov     rs1,0-0
	byte	$00, $58, $03, $f6
'-'             
'-'             jmp     #p101              
	byte	$f4, $02, $90, $fd
'-' 	    	
'-' ' ------------  Channel 2
'-'  
'-' p202        add     ptra,#36
	byte	$24, $f0, $07, $f1
'-'             setq    #8              
	byte	$28, $10, $64, $fd
'-'             rdlong  sstart2,ptra
	byte	$00, $bb, $06, $fb
'-'             sub     ptra, #36
	byte	$24, $f0, $87, $f1
'-' 
'-'             mov     dt0,time2
	byte	$9e, $51, $03, $f6
'-'             sub     dt0,time0
	byte	$9c, $51, $83, $f1
'-'             add     time2,freq2  	
	byte	$63, $3d, $03, $f1
'-' 	        
'-'             add     p2,askip2
	byte	$64, $89, $02, $f1
'-'             cmp     p2,lend2 wcz
	byte	$60, $89, $1a, $f2
'-'     if_ge   sub     p2,lend2	        
	byte	$60, $89, $82, $31
'-'     if_ge   add     p2,lstart2       
	byte	$5f, $89, $02, $31
'-'             mov     qq,p2
	byte	$44, $97, $02, $f6
'-'             add     qq,sstart2
	byte	$5d, $97, $02, $f1
'-' 
'-'             cmp     type2,#0 wz
	byte	$00, $bc, $0e, $f2
'-'     if_nz   rdbyte  spl,qq
	byte	$4b, $99, $c2, $5a
'-'     if_nz   shl     spl,#8
	byte	$08, $98, $66, $50
'-'     if_z    rdword  spl,qq
	byte	$4b, $99, $e2, $aa
'-' 
'-'             scas    spl,vol2
	byte	$61, $99, $32, $fa
'-'             mov     spl,0-0
	byte	$00, $98, $02, $f6
'-'             
'-'             scas    spl,apan2
	byte	$62, $99, $32, $fa
'-'             mov     ls2,0-0
	byte	$00, $5a, $03, $f6
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $96, $06, $f6
'-'             sub     qq,apan2
	byte	$62, $97, $82, $f1
'-'             scas    spl,qq
	byte	$4b, $99, $32, $fa
'-'             mov     rs2,0-0
	byte	$00, $5c, $03, $f6
'-'             
'-'             jmp     #p101
	byte	$88, $02, $90, $fd
'-' 
'-' ' ------------  Channel 3
'-'  
'-' p203        add     ptra,#36*2
	byte	$48, $f0, $07, $f1
'-'             setq    #8               
	byte	$28, $10, $64, $fd
'-'             rdlong  sstart3,ptra
	byte	$00, $cd, $06, $fb
'-'             sub     ptra, #36*2
	byte	$48, $f0, $87, $f1
'-' 
'-'             mov     dt0,time3
	byte	$9f, $51, $03, $f6
'-'             sub     dt0,time0
	byte	$9c, $51, $83, $f1
'-'             add     time3,freq3  	
	byte	$6c, $3f, $03, $f1
'-' 	        
'-'             add     p3,askip3
	byte	$6d, $8b, $02, $f1
'-'             cmp     p3,lend3 wcz
	byte	$69, $8b, $1a, $f2
'-'     if_ge   sub     p3,lend3	        
	byte	$69, $8b, $82, $31
'-'     if_ge   add     p3,lstart3       
	byte	$68, $8b, $02, $31
'-'             mov     qq,p3
	byte	$45, $97, $02, $f6
'-'             add     qq,sstart3
	byte	$66, $97, $02, $f1
'-'             
'-'             cmp     type3,#0 wz
	byte	$00, $ce, $0e, $f2
'-'     if_nz   rdbyte  spl,qq
	byte	$4b, $99, $c2, $5a
'-'     if_nz   shl     spl,#8
	byte	$08, $98, $66, $50
'-'     if_z    rdword  spl,qq
	byte	$4b, $99, $e2, $aa
'-' 
'-'             scas    spl,vol3
	byte	$6a, $99, $32, $fa
'-'             mov     spl,0-0
	byte	$00, $98, $02, $f6
'-'     	
'-'             scas    spl,apan3
	byte	$6b, $99, $32, $fa
'-'             mov     ls3,0-0
	byte	$00, $5e, $03, $f6
'-'             
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $96, $06, $f6
'-'             sub     qq,apan3
	byte	$6b, $97, $82, $f1
'-'             scas    spl,qq
	byte	$4b, $99, $32, $fa
'-'             mov     rs3,0-0
	byte	$00, $60, $03, $f6
'-' 
'-'             jmp     #p101
	byte	$1c, $02, $90, $fd
'-'             
'-' ' ------------  Channel 4
'-'  
'-' p204        add     ptra,#36*3
	byte	$6c, $f0, $07, $f1
'-'             setq    #8               
	byte	$28, $10, $64, $fd
'-'             rdlong  sstart4,ptra
	byte	$00, $df, $06, $fb
'-'             sub     ptra, #36*3
	byte	$6c, $f0, $87, $f1
'-' 
'-'             mov     dt0,time4
	byte	$a0, $51, $03, $f6
'-'             sub     dt0,time0
	byte	$9c, $51, $83, $f1
'-'             add     time4,freq4  	
	byte	$75, $41, $03, $f1
'-' 	        
'-'             add     p4,askip4
	byte	$76, $8d, $02, $f1
'-'             cmp     p4,lend4 wcz
	byte	$72, $8d, $1a, $f2
'-'     if_ge   sub     p4,lend4	        
	byte	$72, $8d, $82, $31
'-'     if_ge   add     p4,lstart4       
	byte	$71, $8d, $02, $31
'-'             mov     qq,p4
	byte	$46, $97, $02, $f6
'-'             add     qq,sstart4
	byte	$6f, $97, $02, $f1
'-'             
'-'             cmp     type4,#0 wz
	byte	$00, $e0, $0e, $f2
'-'     if_nz   rdbyte  spl,qq
	byte	$4b, $99, $c2, $5a
'-'     if_nz   shl     spl,#8
	byte	$08, $98, $66, $50
'-'     if_z    rdword  spl,qq
	byte	$4b, $99, $e2, $aa
'-' 
'-'             scas    spl,vol4
	byte	$73, $99, $32, $fa
'-'             mov     spl,0-0
	byte	$00, $98, $02, $f6
'-'     	
'-'             scas    spl,apan4
	byte	$74, $99, $32, $fa
'-'             mov     ls4,0-0
	byte	$00, $64, $03, $f6
'-'             
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $96, $06, $f6
'-'             sub     qq,apan4
	byte	$74, $97, $82, $f1
'-'             scas    spl,qq
	byte	$4b, $99, $32, $fa
'-'             mov     rs4,0-0
	byte	$00, $62, $03, $f6
'-' 
'-'             jmp     #p101
	byte	$b0, $01, $90, $fd
'-'             
'-' ' ------------  Channel 5
'-'  
'-' p205        add     ptra,#36*4
	byte	$90, $f0, $07, $f1
'-'             setq    #8               
	byte	$28, $10, $64, $fd
'-'             rdlong  sstart5,ptra
	byte	$00, $f1, $06, $fb
'-'             sub     ptra, #36*4
	byte	$90, $f0, $87, $f1
'-' 
'-'             mov     dt0,time5
	byte	$a1, $51, $03, $f6
'-'             sub     dt0,time0
	byte	$9c, $51, $83, $f1
'-'             add     time5,freq5  	
	byte	$7e, $43, $03, $f1
'-' 
'-' 	        
'-'             add     p5,askip5
	byte	$7f, $8f, $02, $f1
'-'             cmp     p5,lend5 wcz
	byte	$7b, $8f, $1a, $f2
'-'     if_ge   sub     p5,lend5	        
	byte	$7b, $8f, $82, $31
'-'     if_ge   add     p5,lstart5       
	byte	$7a, $8f, $02, $31
'-'             mov     qq,p5
	byte	$47, $97, $02, $f6
'-'             add     qq,sstart5
	byte	$78, $97, $02, $f1
'-'             
'-'             cmp     type5,#0 wz
	byte	$00, $f2, $0e, $f2
'-'     if_nz   rdbyte  spl,qq
	byte	$4b, $99, $c2, $5a
'-'     if_nz   shl     spl,#8
	byte	$08, $98, $66, $50
'-'     if_z    rdword  spl,qq
	byte	$4b, $99, $e2, $aa
'-' 
'-'             scas    spl,vol5
	byte	$7c, $99, $32, $fa
'-'             mov     spl,0-0
	byte	$00, $98, $02, $f6
'-'     	
'-'             scas    spl,apan5
	byte	$7d, $99, $32, $fa
'-'             mov     ls5,0-0
	byte	$00, $68, $03, $f6
'-'             
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $96, $06, $f6
'-'             sub     qq,apan5
	byte	$7d, $97, $82, $f1
'-'             scas    spl,qq
	byte	$4b, $99, $32, $fa
'-'             mov     rs5,0-0
	byte	$00, $66, $03, $f6
'-' 
'-'             jmp     #p101
	byte	$44, $01, $90, $fd
'-'   
'-' ' ------------  Channel 6
'-'  
'-' p206        add     ptra,#36*5
	byte	$b4, $f0, $07, $f1
'-'             setq    #8              
	byte	$28, $10, $64, $fd
'-'             rdlong  sstart6,ptra
	byte	$00, $03, $07, $fb
'-'             sub     ptra, #36*5
	byte	$b4, $f0, $87, $f1
'-' 
'-'             mov       dt0,time6
	byte	$a2, $51, $03, $f6
'-'             sub     dt0,time0
	byte	$9c, $51, $83, $f1
'-'             add     time6,freq6  	
	byte	$87, $45, $03, $f1
'-' 	        
'-'             add     p6,askip6
	byte	$88, $91, $02, $f1
'-'             cmp     p6,lend6 wcz
	byte	$84, $91, $1a, $f2
'-'     if_ge   sub     p6,lend6	        
	byte	$84, $91, $82, $31
'-'     if_ge   add     p6,lstart6       
	byte	$83, $91, $02, $31
'-'             mov     qq,p6
	byte	$48, $97, $02, $f6
'-'             add     qq,sstart6
	byte	$81, $97, $02, $f1
'-'             
'-'             cmp     type6,#0 wz
	byte	$00, $04, $0f, $f2
'-'     if_nz   rdbyte  spl,qq
	byte	$4b, $99, $c2, $5a
'-'     if_nz   shl     spl,#8
	byte	$08, $98, $66, $50
'-'     if_z    rdword  spl,qq
	byte	$4b, $99, $e2, $aa
'-'           
'-'             scas    spl,vol6
	byte	$85, $99, $32, $fa
'-'             mov     spl,0-0
	byte	$00, $98, $02, $f6
'-'     	
'-'             scas    spl,apan6
	byte	$86, $99, $32, $fa
'-'             mov     ls6,0-0
	byte	$00, $6c, $03, $f6
'-'             
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $96, $06, $f6
'-'             sub     qq,apan6
	byte	$86, $97, $82, $f1
'-'             scas    spl,qq
	byte	$4b, $99, $32, $fa
'-'             mov     rs6,0-0
	byte	$00, $6a, $03, $f6
'-' 
'-'             jmp     #p101
	byte	$d8, $00, $90, $fd
'-'             
'-' ' ------------  Channel 7
'-'  
'-' p207        add     ptra,#36*6
	byte	$d8, $f0, $07, $f1
'-'             setq    #8              ' 
	byte	$28, $10, $64, $fd
'-'             rdlong  sstart7,ptra
	byte	$00, $15, $07, $fb
'-'             sub     ptra, #36*6
	byte	$d8, $f0, $87, $f1
'-' 
'-'             mov     dt0,time7
	byte	$a3, $51, $03, $f6
'-'             sub     dt0,time0
	byte	$9c, $51, $83, $f1
'-'             add     time7,freq7  	
	byte	$90, $47, $03, $f1
'-' 	        
'-'             add     p7,askip7
	byte	$91, $93, $02, $f1
'-'             cmp     p7,lend7 wcz
	byte	$8d, $93, $1a, $f2
'-'     if_ge   sub     p7,lend7	        
	byte	$8d, $93, $82, $31
'-'     if_ge   add     p7,lstart7       
	byte	$8c, $93, $02, $31
'-'             mov     qq,p7
	byte	$49, $97, $02, $f6
'-'             add     qq,sstart7
	byte	$8a, $97, $02, $f1
'-'             
'-'             cmp     type7,#0 wz
	byte	$00, $16, $0f, $f2
'-'     if_nz   rdbyte  spl,qq
	byte	$4b, $99, $c2, $5a
'-'     if_nz   shl     spl,#8
	byte	$08, $98, $66, $50
'-'     if_z    rdword  spl,qq
	byte	$4b, $99, $e2, $aa
'-' 
'-'             scas    spl,vol7
	byte	$8e, $99, $32, $fa
'-'             mov     spl,0-0
	byte	$00, $98, $02, $f6
'-'     	
'-'             scas    spl,apan7
	byte	$8f, $99, $32, $fa
'-'             mov     ls7,0-0
	byte	$00, $70, $03, $f6
'-'             
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $96, $06, $f6
'-'             sub     qq,apan7
	byte	$8f, $97, $82, $f1
'-'             scas    spl,qq
	byte	$4b, $99, $32, $fa
'-'             mov     rs7,0-0
	byte	$00, $6e, $03, $f6
'-' 
'-'             jmp     #p101     
	byte	$6c, $00, $90, $fd
'-'                    
'-' ' ------------  Channel 8
'-'  
'-' p208        add     ptra,#36*7
	byte	$fc, $f0, $07, $f1
'-'             setq    #8              
	byte	$28, $10, $64, $fd
'-'             rdlong  sstart8,ptra
	byte	$00, $27, $07, $fb
'-'             sub     ptra, #36*7
	byte	$fc, $f0, $87, $f1
'-'  
'-'             mov     dt0,time8
	byte	$a4, $51, $03, $f6
'-'             sub     dt0,time0
	byte	$9c, $51, $83, $f1
'-'             add     time8,freq8  	
	byte	$99, $49, $03, $f1
'-' 	        
'-'             add     p8,askip8
	byte	$9a, $95, $02, $f1
'-'             cmp     p8,lend8 wcz
	byte	$96, $95, $1a, $f2
'-'     if_ge   sub     p8,lend8	        
	byte	$96, $95, $82, $31
'-'     if_ge   add     p8,lstart8       
	byte	$95, $95, $02, $31
'-'             mov     qq,p8
	byte	$4a, $97, $02, $f6
'-'             add     qq,sstart8
	byte	$93, $97, $02, $f1
'-'             
'-'             cmp     type8,#0 wz
	byte	$00, $28, $0f, $f2
'-'     if_nz   rdbyte  spl,qq
	byte	$4b, $99, $c2, $5a
'-'     if_nz   shl     spl,#8
	byte	$08, $98, $66, $50
'-'     if_z    rdword  spl,qq
	byte	$4b, $99, $e2, $aa
'-' 
'-'             scas    spl,vol8
	byte	$97, $99, $32, $fa
'-'             mov     spl,0-0
	byte	$00, $98, $02, $f6
'-'     	
'-'             scas    spl,apan8
	byte	$98, $99, $32, $fa
'-'             mov     ls8,0-0
	byte	$00, $74, $03, $f6
'-'             
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $96, $06, $f6
'-'             sub     qq,apan8
	byte	$98, $97, $82, $f1
'-'             scas    spl,qq
	byte	$4b, $99, $32, $fa
'-'             mov     rs8,0-0
	byte	$00, $72, $03, $f6
'-' 
'-'             jmp     #p101            
	byte	$00, $00, $90, $fd
'-'             
'-' '------------------------ Channels end here --------------------       
'-' 
'-' ' Now add all channels and put the sample to the buffer    
'-' 
'-' 
'-' p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
	byte	$9c, $4b, $0b, $f2
'-'     if_z    sub     front,#2         ' 
	byte	$02, $9a, $86, $a1
'-'     if_z    and     front,#511     
	byte	$ff, $9b, $06, $a5
'-'   
'-'             mov     rs,#0            ' Mix all channels to rs and ls
	byte	$00, $54, $07, $f6
'-'             mov     ls,#0
	byte	$00, $52, $07, $f6
'-'             add     rs,rs1
	byte	$ac, $55, $03, $f1
'-'             add     rs,rs2
	byte	$ae, $55, $03, $f1
'-'             add     rs,rs3
	byte	$b0, $55, $03, $f1
'-'             add     rs,rs4
	byte	$b1, $55, $03, $f1
'-'             add     rs,rs5
	byte	$b3, $55, $03, $f1
'-'             add     rs,rs6
	byte	$b5, $55, $03, $f1
'-'             add     rs,rs7
	byte	$b7, $55, $03, $f1
'-'             add     rs,rs8
	byte	$b9, $55, $03, $f1
'-'             
'-'             add     ls,ls1
	byte	$ab, $53, $03, $f1
'-'             add     ls,ls2
	byte	$ad, $53, $03, $f1
'-'             add     ls,ls3
	byte	$af, $53, $03, $f1
'-'             add     ls,ls4
	byte	$b2, $53, $03, $f1
'-'             add     ls,ls5
	byte	$b4, $53, $03, $f1
'-'             add     ls,ls6
	byte	$b6, $53, $03, $f1
'-'             add     ls,ls7
	byte	$b8, $53, $03, $f1
'-'             add     ls,ls8
	byte	$ba, $53, $03, $f1
'-'  		
'-'             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
	byte	$0f, $52, $e7, $f4
'-'             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
	byte	$0f, $54, $e7, $f4
'-' 		    
'-'             setword rs,ls,#1         ' Pack L and R to one long    		
	byte	$a9, $55, $2b, $f9
'-'             mov newsample, rs
	byte	$aa, $71, $02, $f6
'-' 
'-'             mov     oldt0,time0      ' update global time
	byte	$9c, $4b, $03, $f6
'-'             add     time0,dt0     
	byte	$a8, $39, $03, $f1
'-'             
'-'                                      ' now push dt0 samples to the buffer
'-'             cmp      dt0,#0 wz
	byte	$00, $50, $0f, $f2
'-'     if_z    jmp      #loop1
	byte	$d0, $fb, $9f, $ad
'-'             mov      t1,dt0
	byte	$a8, $75, $02, $f6
'-'   
'-' p301        mov     t2,ptrb         ' Check if the buffer is full	
	byte	$f9, $77, $02, $f6
'-'             sub     t2,#1
	byte	$01, $76, $86, $f1
'-'             and     t2,#511
	byte	$ff, $77, $06, $f5
'-'             cmp     t2,front wcz
	byte	$4d, $77, $1a, $f2
'-'     if_e    jmp     #p301    
	byte	$ec, $ff, $9f, $ad
'-'     
'-'             wrlut   newsample, front
	byte	$4d, $71, $32, $fc
'-'             add     front,#1
	byte	$01, $9a, $06, $f1
'-'             and     front,#511
	byte	$ff, $9b, $06, $f5
'-'             djnz    t1,#p301
	byte	$f7, $75, $6e, $fb
'-'             jmp     #loop            'loop
	byte	$78, $fb, $9f, $fd
'-' 
'-' '-------------------------------------------------------------------------
'-' '------------------ This is the end of the main loop ---------------------
'-' '-------------------------------------------------------------------------
'-' 
'-' '--------------------------------------------------------------------------
'-' '------ Interrupt service -------------------------------------------------
'-' '------ Output the sample, get the next one if exists ---------------------
'-' '--------------------------------------------------------------------------
'-' 
'-' isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
	byte	$0e, $9e, $26, $fc
'-'             wypin   rsample,#right       '4
	byte	$0f, $a0, $26, $fc
'-'            
'-'             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
	byte	$4d, $f3, $1b, $f2
'-'     if_e    reti1                        '8/10
	byte	$f5, $ff, $3b, $ab
'-' 
'-'             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
	byte	$e1, $a3, $a6, $fa
'-'           	getword rsample,lsnext,#1    '13
	byte	$51, $a1, $3a, $f9
'-'           	getword lsample,lsnext,#0    '15
	byte	$51, $9f, $32, $f9
'-'             reti1                        '17/19 
	byte	$f5, $ff, $3b, $fb
'-'           
'-' '---------------------------------------------------------------------------
'-' '-------- End of interrupt -------------------------------------------------
'-' '---------------------------------------------------------------------------    
'-' 
'-' 
'-' '---------------------------------------------------------------------------
'-' '------- Variables ---------------------------------------------------------
'-' '---------------------------------------------------------------------------
'-' 
'-' ' constants
'-' 
'-' a1fffffff long $1fffffff
	byte	$ff, $ff, $ff, $1f
'-' a20000000 long $20000000
	byte	$00, $00, $00, $20
'-' a21000000 long $21000000
	byte	$00, $00, $00, $21
'-' newsample long 0
	byte	$00, $00, $00, $00
'-' affff long $ffff
	byte	$ff, $ff, $00, $00
'-' t1 long 0
	byte	$00, $00, $00, $00
'-' t2 long 0
	byte	$00, $00, $00, $00
'-' nl long 0
	byte	$00, $00, $00, $00
'-' nr long 0
	byte	$00, $00, $00, $00
'-' nrsample long 0
	byte	$00, $00, $00, $00
'-' nlsample long 0
	byte	$00, $00, $00, $00
'-' fl long 31
	byte	$1f, $00, $00, $00
'-' fr long 31
	byte	$1f, $00, $00, $00
'-' d long 0
	byte	$00, $00, $00, $00
'-' ' phase accumulators
'-' 
'-' p1          long 0
	byte	$00, $00, $00, $00
'-' p2          long 0
	byte	$00, $00, $00, $00
'-' p3          long 0
	byte	$00, $00, $00, $00
'-' p4          long 0
	byte	$00, $00, $00, $00
'-' p5          long 0
	byte	$00, $00, $00, $00
'-' p6          long 0
	byte	$00, $00, $00, $00
'-' p7          long 0
	byte	$00, $00, $00, $00
'-' p8          long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' temporary variables 
'-' 
'-' qq          long 0
	byte	$00, $00, $00, $00
'-' spl         long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' circular buffer in LUT
'-' 
'-' front       long 0
	byte	$00, $00, $00, $00
'-' 'tail        long 0
'-' 
'-' ' Interrupt ISR variables
'-' 
'-' counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
	byte	$00, $f8, $ff, $ff
'-' lsample     long 0
	byte	$00, $00, $00, $00
'-' rsample     long 0
	byte	$00, $00, $00, $00
'-' lsnext      long 0
	byte	$00, $00, $00, $00
'-' rsnext      long 0 
	byte	$00, $00, $00, $00
'-' irqtime     long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Channel 1 registers. TODO - optimize the memory usage
'-' 
'-' sstart1     long 0       ' Sample start pointer
	byte	$00, $00, $00, $00
'-' type1       long 0       ' type 0 16 bit, 1 8 bit
	byte	$00, $00, $00, $00
'-' lstart1     long 0       ' Loop start
	byte	$00, $00, $00, $00
'-' lend1       long 2       ' Loop end
	byte	$02, $00, $00, $00
'-' vol1        long 0       ' volume, 0..16384
	byte	$00, $00, $00, $00
'-' apan1       long 0       ' pan, 0..16384
	byte	$00, $00, $00, $00
'-' freq1       long 101     ' frequency divider
	byte	$65, $00, $00, $00
'-' askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
	byte	$02, $00, $00, $00
'-' acmd1       long 0       ' command, 0 = reset the phase accumulator
	byte	$00, $00, $00, $00
'-' 
'-' ' Channel 2 registers
'-' 
'-' sstart2     long 0
	byte	$00, $00, $00, $00
'-' type2       long 0
	byte	$00, $00, $00, $00
'-' lstart2     long 0
	byte	$00, $00, $00, $00
'-' lend2       long 2        		
	byte	$02, $00, $00, $00
'-' vol2        long 0
	byte	$00, $00, $00, $00
'-' apan2       long 0
	byte	$00, $00, $00, $00
'-' freq2       long 103
	byte	$67, $00, $00, $00
'-' askip2      long 2
	byte	$02, $00, $00, $00
'-' acmd2       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Channel 3 registers
'-' 
'-' sstart3     long 0
	byte	$00, $00, $00, $00
'-' type3       long 0
	byte	$00, $00, $00, $00
'-' lstart3     long 0
	byte	$00, $00, $00, $00
'-' lend3       long 2       		'
	byte	$02, $00, $00, $00
'-' vol3        long 0
	byte	$00, $00, $00, $00
'-' apan3       long 0
	byte	$00, $00, $00, $00
'-' freq3       long 107 '109 113 127 131 137 ...
	byte	$6b, $00, $00, $00
'-' askip3      long 2
	byte	$02, $00, $00, $00
'-' acmd3       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Channel 4 registers
'-' 
'-' sstart4     long 0
	byte	$00, $00, $00, $00
'-' type4       long 0
	byte	$00, $00, $00, $00
'-' lstart4     long 0
	byte	$00, $00, $00, $00
'-' lend4       long 2       		'
	byte	$02, $00, $00, $00
'-' vol4        long 0
	byte	$00, $00, $00, $00
'-' apan4       long 0
	byte	$00, $00, $00, $00
'-' freq4       long 109 '109 113 127 131 137 ...
	byte	$6d, $00, $00, $00
'-' askip4      long 2
	byte	$02, $00, $00, $00
'-' acmd4       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Channel 5 registers
'-' 
'-' sstart5     long 0
	byte	$00, $00, $00, $00
'-' type5       long 0
	byte	$00, $00, $00, $00
'-' lstart5     long 0
	byte	$00, $00, $00, $00
'-' lend5       long 2       		'
	byte	$02, $00, $00, $00
'-' vol5        long 0
	byte	$00, $00, $00, $00
'-' apan5       long 0
	byte	$00, $00, $00, $00
'-' freq5       long 113 '109 113 127 131 137 ...
	byte	$71, $00, $00, $00
'-' askip5      long 2
	byte	$02, $00, $00, $00
'-' acmd5       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Channel 6 registers
'-' 
'-' sstart6     long 0
	byte	$00, $00, $00, $00
'-' type6       long 0
	byte	$00, $00, $00, $00
'-' lstart6     long 0
	byte	$00, $00, $00, $00
'-' lend6       long 2       		'
	byte	$02, $00, $00, $00
'-' vol6        long 0
	byte	$00, $00, $00, $00
'-' apan6       long 0
	byte	$00, $00, $00, $00
'-' freq6       long 127 '109 113 127 131 137 ...
	byte	$7f, $00, $00, $00
'-' askip6      long 2
	byte	$02, $00, $00, $00
'-' acmd6       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Channel 7 registers
'-' 
'-' sstart7     long 0
	byte	$00, $00, $00, $00
'-' type7       long 0
	byte	$00, $00, $00, $00
'-' lstart7     long 0
	byte	$00, $00, $00, $00
'-' lend7       long 2       		'
	byte	$02, $00, $00, $00
'-' vol7        long 0
	byte	$00, $00, $00, $00
'-' apan7       long 0
	byte	$00, $00, $00, $00
'-' freq7       long 131 '109 113 127 131 137 ...
	byte	$83, $00, $00, $00
'-' askip7      long 2
	byte	$02, $00, $00, $00
'-' acmd7       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Channel 8 registers
'-' 
'-' sstart8     long 0
	byte	$00, $00, $00, $00
'-' type8       long 0
	byte	$00, $00, $00, $00
'-' lstart8     long 0
	byte	$00, $00, $00, $00
'-' lend8       long 2       		'
	byte	$02, $00, $00, $00
'-' vol8        long 0
	byte	$00, $00, $00, $00
'-' apan8       long 0
	byte	$00, $00, $00, $00
'-' freq8       long 131 '109 113 127 131 137 ...
	byte	$83, $00, $00, $00
'-' askip8      long 2
	byte	$02, $00, $00, $00
'-' acmd8       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Time variables
'-' 
'-' time0       long 0    ' Global sample computing time
	byte	$00, $00, $00, $00
'-' time1       long 1    ' Local channels time
	byte	$01, $00, $00, $00
'-' time2       long 2
	byte	$02, $00, $00, $00
'-' time3       long 3
	byte	$03, $00, $00, $00
'-' time4       long 4
	byte	$04, $00, $00, $00
'-' time5       long 5
	byte	$05, $00, $00, $00
'-' time6       long 6
	byte	$06, $00, $00, $00
'-' time7       long 7
	byte	$07, $00, $00, $00
'-' time8       long 8
	byte	$08, $00, $00, $00
'-' 
'-' oldt0       long 0    'Temporary time variables
	byte	$00, $00, $00, $00
'-' cn          long 0
	byte	$00, $00, $00, $00
'-' ct          long 0
	byte	$00, $00, $00, $00
'-' dt0         long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Samples
'-' 
'-' ls          long 0    ' Global sample variable
	byte	$00, $00, $00, $00
'-' rs          long 0
	byte	$00, $00, $00, $00
'-' 
'-' ls1         long 0    ' Channel samples
	byte	$00, $00, $00, $00
'-' rs1         long 0
	byte	$00, $00, $00, $00
'-' ls2         long 0
	byte	$00, $00, $00, $00
'-' rs2         long 0
	byte	$00, $00, $00, $00
'-' ls3         long 0
	byte	$00, $00, $00, $00
'-' rs3         long 0
	byte	$00, $00, $00, $00
'-' rs4         long 0
	byte	$00, $00, $00, $00
'-' ls4         long 0
	byte	$00, $00, $00, $00
'-' rs5         long 0
	byte	$00, $00, $00, $00
'-' ls5         long 0
	byte	$00, $00, $00, $00
'-' rs6         long 0
	byte	$00, $00, $00, $00
'-' ls6         long 0
	byte	$00, $00, $00, $00
'-' rs7         long 0
	byte	$00, $00, $00, $00
'-' ls7         long 0
	byte	$00, $00, $00, $00
'-' rs8         long 0
	byte	$00, $00, $00, $00
'-' ls8         long 0
	byte	$00, $00, $00, $00
'-' 
'-' dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
	byte	$44, $00, $17, $00
'-' 
'-' null  			long 	0,0           ' for channel reset
	byte	$00, $00, $00, $00, $00, $00, $00, $00
'-' sinewave 		file 	"sinus.s2"    ' for testing
	byte	$73, $32, $00, $04, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
	alignl
__system__dat_
	byte	$00[8]
	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	long	@@@__system__dat_ + 508
	long	@@@__system__dat_ + 516
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 524
	long	@@@__system__dat_ + 532
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 540
	long	@@@__system__dat_ + 548
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 556
	long	@@@__system__dat_ + 564
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 572
	long	@@@__system__dat_ + 580
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 588
	long	@@@__system__dat_ + 596
	byte	$00[344]
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0174
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0175
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0174
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0175
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0174
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0175
	byte	$00, $00, $00, $00
__heap_base
	long	0[1026]
objmem
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
_var04
	res	1
_var05
	res	1
_var06
	res	1
_var07
	res	1
_var08
	res	1
_var09
	res	1
_var10
	res	1
_var11
	res	1
_var12
	res	1
_var13
	res	1
_var14
	res	1
_var15
	res	1
_var16
	res	1
_var17
	res	1
_var18
	res	1
_var19
	res	1
_var20
	res	1
_var21
	res	1
_var22
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
arg05
	res	1
arg06
	res	1
arg07
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
local05
	res	1
local06
	res	1
local07
	res	1
local08
	res	1
local09
	res	1
local10
	res	1
local11
	res	1
local12
	res	1
local13
	res	1
local14
	res	1
local15
	res	1
local16
	res	1
local17
	res	1
local18
	res	1
local19
	res	1
local20
	res	1
local21
	res	1
local22
	res	1
local23
	res	1
local24
	res	1
local25
	res	1
local26
	res	1
local27
	res	1
local28
	res	1
local29
	res	1
local30
	res	1
local31
	res	1
local32
	res	1
local33
	res	1
local34
	res	1
local35
	res	1
local36
	res	1
local37
	res	1
local38
	res	1
local39
	res	1
local40
	res	1
local41
	res	1
local42
	res	1
local43
	res	1
local44
	res	1
local45
	res	1
local46
	res	1
local47
	res	1
local48
	res	1
local49
	res	1
local50
	res	1
local51
	res	1
local52
	res	1
local53
	res	1
local54
	res	1
local55
	res	1
local56
	res	1
local57
	res	1
local58
	res	1
local59
	res	1
local60
	res	1
local61
	res	1
local62
	res	1
local63
	res	1
local64
	res	1
local65
	res	1
local66
	res	1
local67
	res	1
local68
	res	1
local69
	res	1
local70
	res	1
local71
	res	1
local72
	res	1
local73
	res	1
local74
	res	1
local75
	res	1
local76
	res	1
local77
	res	1
local78
	res	1
local79
	res	1
local80
	res	1
muldiva_
	res	1
muldivb_
	res	1
	fit	480
