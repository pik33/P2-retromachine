con
	_clkfreq = 320000000
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 320000000
	long	0 ' clock mode: will default to $1000ffb
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, ptr_stackspace_
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##16781304
	waitx	##200000
	mov	pa, ##16781307
	hubset	pa
	wrlong	pa, #24
	wrlong	##320000000, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_program
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra
	add	ptra, #4
	rdlong	result1, ptra
	add	ptra, #4
	rdlong	arg01, ptra
	add	ptra, #4
	rdlong	arg02, ptra
	add	ptra, #4
	rdlong	arg03, ptra
	add	ptra, #4
	rdlong	arg04, ptra
	sub	ptra, #16
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    pop	fcache_tmpb_
    add	fcache_tmpb_, pa
    push	fcache_tmpb_
    sub	fcache_tmpb_, pa
    shr	pa, #2
    altd	pa
    mov	 0-0, ret_instr_
    sub	pa, #1
    setq	pa
    rdlong	$0, fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    ret
fcache_tmpb_
    long 0
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    sub  COUNT_, #1
    setq COUNT_
    wrlong local01, ptra
    add  COUNT_, #1
pushregs_done_
    shl  COUNT_, #2
    add  ptra, COUNT_
    shr  COUNT_, #2
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra
    add    ptra, #12
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    sub    ptra, #12
    setq   #2
    rdlong COUNT_, ptra
    tjz    COUNT_, #popregs__ret
    shl    COUNT_, #2
    sub    ptra, COUNT_
    shr    COUNT_, #2
    sub    COUNT_, #1
    setq   COUNT_
    rdlong local01, ptra
popregs__ret
    push   RETADDR_
    jmp    pa

unsdivide_
       setq    #0
       qdiv    muldiva_, muldivb_
       getqx   muldivb_
 _ret_ getqy   muldiva_

divide_
       abs     muldiva_,muldiva_     wc       'abs(x)
       muxc    itmp2_,#%11                    'store sign of x
       abs     muldivb_,muldivb_     wcz      'abs(y)
 if_c  xor     itmp2_,#%10                    'store sign of y
 if_z  ret
       call    #unsdivide_
       test    itmp2_,#1        wc       'restore sign, remainder
       negc    muldiva_,muldiva_ 
       test    itmp2_,#%10      wc       'restore sign, division result
 _ret_ negc    muldivb_,muldivb_
__pc long 0
__setjmp
    pop __pc
    mov result1, #0
    mov result2, #0
    mov abortchain, arg01
    wrlong fp, arg01
    add arg01, #4
    wrlong ptra, arg01
    add arg01, #4
    wrlong objptr, arg01
    add arg01, #4
    wrlong __pc, arg01
    jmp __pc
__unwind_pc long 0
__unwind_stack
   pop  __unwind_pc
__unwind_loop
   cmp  arg01, arg02 wz
  if_z jmp #__unwind_stack_ret
   mov   ptra, arg01
   call  #popregs_
   mov   arg01, fp
   jmp   #__unwind_loop
__unwind_stack_ret
   jmp  __unwind_pc
__longjmp
    pop __pc
    cmp    arg01, #0 wz
 if_z jmp #nocatch
    mov result1, arg02
    mov result2, #1
    rdlong arg02, arg01
    add arg01, #4
    rdlong ptra, arg01
    add arg01, #4
    rdlong objptr, arg01
    add arg01, #4
    rdlong __pc, arg01
    mov arg01, fp
    call #__unwind_stack
__longjmp_ret
    jmp  __pc
nocatch
    cmp arg03, #0 wz
 if_z jmp #cogexit
    jmp #__longjmp_ret

__heap_ptr
	long	@__heap_base
abortchain
	long	0
entryptr__
	long	@entry
itmp1_
	long	0
itmp2_
	long	0
objptr
	long	@objmem
ptr___struct___bas_wrap_sender_tx_
	long	@__struct___bas_wrap_sender_tx
ptr___struct__s_vfs_file_t_putchar_
	long	@__struct__s_vfs_file_t_putchar
ptr___system__dat__
	long	@__system__dat_
ptr__hng030rm_spin2_dat__
	long	@_hng030rm_spin2_dat_
ptr__hng030rm_spin2_putchar_
	long	@_hng030rm_spin2_putchar
ptr__hng030rm_spin2_putpixel1_
	long	@_hng030rm_spin2_putpixel1
ptr__hng030rm_spin2_putpixel2_
	long	@_hng030rm_spin2_putpixel2
ptr__hng030rm_spin2_putpixel4_
	long	@_hng030rm_spin2_putpixel4
ptr__hng030rm_spin2_putpixel8_
	long	@_hng030rm_spin2_putpixel8
ptr__retrocog_spin2_serialcog_
	long	@_retrocog_spin2_serialcog
ptr_stackspace_
	long	@stackspace
result1
	long	0
result2
	long	0
result3
	long	0
COG_BSS_START
	fit	480
	orgh
hubentry

' 
' function startvideo(mode=64, pin=0) 'todo return a cog#
_startvideo
	call	#_hng030rm_spin2_start
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#_hng030rm_spin2_setbordercolor
' v030.start(mode,pin)
' v030.setbordercolor(0,0,0)
' open SendRecvDevice(@v030.putchar, nil, nil) as #0
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putchar_
	call	#__system___make_methodptr
	mov	result3, #0
	mov	result2, #0
	mov	arg02, result1
	mov	arg03, #0
	mov	arg04, #0
	mov	arg01, #0
	call	#__system___basic_open
	mov	result1, #0
_startvideo_ret
	ret

_program
	mov	COUNT_, #42
	call	#pushregs_
	mov	arg01, #64
	mov	arg02, #0
	call	#_startvideo
	add	objptr, #236
	call	#_retrocog_spin2_start
	sub	objptr, #236
	mov	arg01, #154
	mov	arg02, #147
	call	#_hng030rm_spin2_cls
' #line 2 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.bas"
' 
' 'e=0 ' this strange thing makes the program run in full optimization
' 
' startvideo 
' rm.start
' 
' cls
' print "Basic test"
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	arg02, ##@LR__0303
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local03, #1
	mov	local04, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local05, #0
' print
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local07, #1
	mov	local08, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local09, #0
' 
' do
LR__0001
'   if lpeek($30)<>0 then
' asm
	rdlong	result1, #48 wz
' return r
 if_e	jmp	#LR__0007
' asm
	rdbyte	result1, #51
' return r
	mov	local10, result1
	zerox	local10, #7
	add	objptr, ##1156
	wrlong	local10, objptr
'     cmd=peek($33)
'     if cmd<>0 then
	rdlong	local10, objptr wz
' asm
 if_ne	rdbyte	local11, #50
' return r
' asm
 if_ne	rdbyte	result1, #49
' return r
 if_ne	mov	local12, result1
	mov	arg02, #0
' asm
	wrlong	#0, #48
'     lpoke $30,0 
'     if cmd=$87 then print "Keyboard key released, scancode "; b11 
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #135 wz
 if_ne	jmp	#LR__0002
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0304
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	mov	local03, local11
	zerox	local03, #7
	mov	local04, local03
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local04
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local14, result1
	mov	local15, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local16, #1
	mov	local17, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local18, #0
LR__0002
'     if cmd=$88 then print "Keyboard key pressed,  scancode "; b11   ; ", charcode "; b12
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #136 wz
 if_ne	jmp	#LR__0003
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0305
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	mov	local03, local11
	zerox	local03, #7
	mov	local04, local03
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local04
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0306
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	mov	local21, local12
	zerox	local21, #7
	mov	local22, local21
	mov	local23, #0
	mov	local24, #10
	mov	arg01, #0
	mov	arg02, local22
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local25, result1
	mov	local26, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local27, #1
	mov	local28, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local29, #0
LR__0003
'     if cmd=$89 then 
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #137 wz
 if_ne	jmp	#LR__0006
'       if b11=0 then 
	mov	local10, local11
	zerox	local10, #7 wz
 if_ne	jmp	#LR__0004
'         print "Keyboard modifiers released"
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0307
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local03, #1
	mov	local04, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	local05, #0
	jmp	#LR__0005
LR__0004
'         print "Keyboard modifiers pressed: ";hex$(b11)
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0308
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	mov	local03, local11
	zerox	local03, #7
	mov	local04, local03
	mov	local05, #0
	mov	arg01, local04
	mov	arg02, #0
	mov	arg03, #16
	call	#__system__Number_S
	mov	local13, result1
	mov	local14, #0
	mov	arg01, local02
	mov	arg02, local13
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local15, result1
	mov	local16, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local17, #1
	mov	local18, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	local19, #0
LR__0005
LR__0006
LR__0007
'   
'   if lpeek($34)<>0 then
' asm
	rdlong	result1, #52 wz
' return r
 if_e	jmp	#LR__0014
' asm
	rdbyte	result1, #55
' return r
	mov	local30, result1
	mov	local10, local30
	zerox	local10, #7
	add	objptr, ##1156
	wrlong	local10, objptr
'     cmd=peek($37)
'     if cmd<>0 then
	rdlong	local10, objptr wz
' asm
 if_ne	rdbyte	local11, #54
' return r
' asm
 if_ne	rdbyte	result1, #53
' return r
 if_ne	mov	local12, result1
	mov	arg02, #0
' asm
	wrlong	#0, #52
'     lpoke $34,0
'     if cmd=$81 then mousex=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #129 wz
 if_ne	jmp	#LR__0008
	mov	local10, local11
	zerox	local10, #7
	mov	local31, local12
	zerox	local31, #7
	shl	local31, #7
	add	local10, local31
	add	objptr, ##1168
	wrlong	local10, objptr
	sub	objptr, ##1168
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local30, #0
	mov	local06, #0
	mov	local07, ##@LR__0309
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1168
	rdlong	local04, objptr
	sub	objptr, ##1168
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0310
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	add	objptr, ##1172
	rdlong	local22, objptr
	sub	objptr, ##1172
	mov	local21, local22
	mov	local23, #0
	mov	local24, #10
	mov	arg01, #0
	mov	arg02, local21
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local25, result1
	mov	local26, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local27, #1
	mov	local28, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local29, #0
LR__0008
'     if cmd=$82 then mousey=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #130 wz
 if_ne	jmp	#LR__0009
	mov	local10, local11
	zerox	local10, #7
	mov	local31, local12
	zerox	local31, #7
	shl	local31, #7
	add	local10, local31
	add	objptr, ##1172
	wrlong	local10, objptr
	sub	objptr, ##1172
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local30, #0
	mov	local06, #0
	mov	local07, ##@LR__0311
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1168
	rdlong	local04, objptr
	sub	objptr, ##1168
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0312
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	add	objptr, ##1172
	rdlong	local22, objptr
	sub	objptr, ##1172
	mov	local21, local22
	mov	local23, #0
	mov	local24, #10
	mov	arg01, #0
	mov	arg02, local21
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local25, result1
	mov	local26, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local27, #1
	mov	local28, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local29, #0
LR__0009
'     if cmd=$83 then mousewheel=b11+b12 shl 7 : print "Mousewheel: ";mousewheel
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #131 wz
 if_ne	jmp	#LR__0010
	mov	local10, local11
	zerox	local10, #7
	mov	local31, local12
	zerox	local31, #7
	shl	local31, #7
	add	local10, local31
	add	objptr, ##1176
	wrlong	local10, objptr
	sub	objptr, ##1176
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0313
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1176
	rdlong	local04, objptr
	sub	objptr, ##1176
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local16, #1
	mov	local17, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local18, #0
LR__0010
'     if cmd=$84 then print "Mouse key: ";b11
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #132 wz
 if_ne	jmp	#LR__0011
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0314
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	mov	local03, local11
	zerox	local03, #7
	mov	local04, local03
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local04
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local14, result1
	mov	local15, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local16, #1
	mov	local17, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local18, #0
LR__0011
'     if cmd=$85 then print "Mouse clicked"
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #133 wz
 if_ne	jmp	#LR__0012
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0315
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local03, #1
	mov	local04, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local05, #0
LR__0012
'     if cmd=$86 then print "Mouse double clicked"
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #134 wz
 if_ne	jmp	#LR__0013
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0316
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local03, #1
	mov	local04, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	local05, #0
LR__0013
LR__0014
' 
'   if lpeek($38)<>0 then 
	mov	arg01, #56
' asm
	rdlong	result1, #56
' return r
	mov	local31, result1 wz
 if_e	jmp	#LR__0001
' asm
	rdbyte	local10, #59
' return r
	zerox	local10, #7
	shr	local10, #4
	add	objptr, ##1156
	wrlong	local10, objptr
' asm
	rdbyte	local30, #59
' return r
	mov	local10, local30
	zerox	local10, #7
	and	local10, #15
	add	objptr, #24
	wrlong	local10, objptr
' asm
	rdbyte	local11, #57
' return r
	mov	arg01, #56
' asm
	rdbyte	result1, #56
' return r
	mov	local12, result1
	mov	arg02, #0
' asm
	wrlong	#0, #56
'     b11=peek($39)
'     b12=peek($38)
'     lpoke $38,0
'     if cmd=8 then print "Midi note off, channel ";channel;", note ";b11
	sub	objptr, #24
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #8 wz
 if_ne	jmp	#LR__0015
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local30, #0
	mov	local06, #0
	mov	local07, ##@LR__0317
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1180
	rdlong	local04, objptr
	sub	objptr, ##1180
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0318
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	mov	local21, local11
	zerox	local21, #7
	mov	local22, local21
	mov	local23, #0
	mov	local24, #10
	mov	arg01, #0
	mov	arg02, local22
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local25, result1
	mov	local26, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local27, #1
	mov	local28, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local29, #0
LR__0015
'     if cmd=9 then print "Midi note on,  channel ";channel;", note ";b11;", velocity ";b12
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #9 wz
 if_ne	jmp	#LR__0016
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local30, #0
	mov	local06, #0
	mov	local07, ##@LR__0319
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1180
	rdlong	local04, objptr
	sub	objptr, ##1180
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0320
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	mov	local21, local11
	zerox	local21, #7
	mov	local22, local21
	mov	local23, #0
	mov	local24, #10
	mov	arg01, #0
	mov	arg02, local22
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local25, result1
	mov	local26, #0
	mov	local27, ##@LR__0321
	mov	local28, local27
	mov	local29, #0
	mov	arg01, #0
	mov	arg02, local28
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local32, result1
	mov	local33, #0
	mov	local34, local12
	zerox	local34, #7
	mov	local35, local34
	mov	local36, #0
	mov	local37, #10
	mov	arg01, #0
	mov	arg02, local35
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local38, result1
	mov	local39, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local40, #1
	mov	local41, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local42, #0
LR__0016
'     if cmd=10 then print "Midi poly aftertouch, channel ";channel;" note ";b11;", velocity ";b12
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #10 wz
 if_ne	jmp	#LR__0017
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local30, #0
	mov	local06, #0
	mov	local07, ##@LR__0322
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1180
	rdlong	local04, objptr
	sub	objptr, ##1180
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0323
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	mov	local21, local11
	zerox	local21, #7
	mov	local22, local21
	mov	local23, #0
	mov	local24, #10
	mov	arg01, #0
	mov	arg02, local22
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local25, result1
	mov	local26, #0
	mov	local27, ##@LR__0324
	mov	local28, local27
	mov	local29, #0
	mov	arg01, #0
	mov	arg02, local28
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local32, result1
	mov	local33, #0
	mov	local34, local12
	zerox	local34, #7
	mov	local35, local34
	mov	local36, #0
	mov	local37, #10
	mov	arg01, #0
	mov	arg02, local35
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local38, result1
	mov	local39, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local40, #1
	mov	local41, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local42, #0
LR__0017
'     if cmd=11 then print "Midi control change, channel ";channel;" controller ";b11;", value ";b12
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #11 wz
 if_ne	jmp	#LR__0018
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local30, #0
	mov	local06, #0
	mov	local07, ##@LR__0325
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1180
	rdlong	local04, objptr
	sub	objptr, ##1180
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0326
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	mov	local21, local11
	zerox	local21, #7
	mov	local22, local21
	mov	local23, #0
	mov	local24, #10
	mov	arg01, #0
	mov	arg02, local22
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local25, result1
	mov	local26, #0
	mov	local27, ##@LR__0327
	mov	local28, local27
	mov	local29, #0
	mov	arg01, #0
	mov	arg02, local28
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local32, result1
	mov	local33, #0
	mov	local34, local12
	zerox	local34, #7
	mov	local35, local34
	mov	local36, #0
	mov	local37, #10
	mov	arg01, #0
	mov	arg02, local35
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local38, result1
	mov	local39, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local40, #1
	mov	local41, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local42, #0
LR__0018
'     if cmd=12 then print "Midi program change, channel ";channel;" program ";b12
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #12 wz
 if_ne	jmp	#LR__0019
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0328
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1180
	rdlong	local04, objptr
	sub	objptr, ##1180
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0329
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	mov	local21, local12
	zerox	local21, #7
	mov	local22, local21
	mov	local23, #0
	mov	local24, #10
	mov	arg01, #0
	mov	arg02, local22
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local25, result1
	mov	local26, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local27, #1
	mov	local28, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local29, #0
LR__0019
'     if cmd=13 then print "Midi mono aftertouch, channel ";channel;" value ";b12
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #13 wz
 if_ne	jmp	#LR__0020
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0330
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1180
	rdlong	local04, objptr
	sub	objptr, ##1180
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0331
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	mov	local21, local12
	zerox	local21, #7
	mov	local22, local21
	mov	local23, #0
	mov	local24, #10
	mov	arg01, #0
	mov	arg02, local22
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local25, result1
	mov	local26, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local27, #1
	mov	local28, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local29, #0
LR__0020
'     if cmd=14 then print "Midi pitch bend, channel ";channel;" value ";b11+b12 shl 7
	add	objptr, ##1156
	rdlong	local10, objptr
	sub	objptr, ##1156
	cmp	local10, #14 wz
 if_ne	jmp	#LR__0021
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0332
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	add	objptr, ##1180
	rdlong	local04, objptr
	sub	objptr, ##1180
	mov	local03, local04
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local14, result1
	mov	local15, #0
	mov	local16, ##@LR__0333
	mov	local17, local16
	mov	local18, #0
	mov	arg01, #0
	mov	arg02, local17
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local19, result1
	mov	local20, #0
	mov	local21, local11
	zerox	local21, #7
	mov	local22, local12
	zerox	local22, #7
	shl	local22, #7
	add	local21, local22
	mov	local23, local21
	mov	local24, #0
	mov	local25, #10
	mov	arg01, #0
	mov	arg02, local23
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local26, result1
	mov	local27, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local28, #1
	mov	local29, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	result1, #0
	mov	local32, #0
LR__0021
'     if cmd=15 then print "Novation control key "; b12 ' TODO Sysex has to be properly processed 
	add	objptr, ##1156
	rdlong	local31, objptr
	sub	objptr, ##1156
	cmp	local31, #15 wz
 if_ne	jmp	#LR__0001
	mov	local31, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	mov	arg01, result1
	call	#__system___lockmem
	mov	result1, #0
	mov	local06, #0
	mov	local07, ##@LR__0334
	mov	local08, local07
	mov	local09, #0
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local01, result1
	mov	local02, #0
	mov	local03, local12
	zerox	local03, #7
	mov	local04, local03
	mov	local05, #0
	mov	local13, #10
	mov	arg01, #0
	mov	arg02, local04
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_unsigned
	mov	local14, result1
	mov	local15, #0
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	result1, #1
	mov	local16, #1
	mov	local17, #0
	mov	arg01, #0
	call	#__system___getiolock_0102
	wrlong	#0, result1
	mov	local18, #0
	jmp	#LR__0001
	mov	ptra, fp
	call	#popregs_
_program_ret
	ret

' 
' 
' ''---------- putpixel - put a pixel on the screen
' 
' pub putpixel1(x,y,c) |byte b
_hng030rm_spin2_putpixel1
' 
' 
' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #5
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0024
'     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	mov	_var04, arg01
	shr	_var04, #3
	add	_var01, _var04
	rdbyte	_var08, _var01
'     if (c==0)
	cmp	arg03, #0 wz
 if_ne	jmp	#LR__0022
'       b:=b & !(1<<(x//8))
	abs	_var03, arg01 wc
	and	_var03, #7
 if_b	neg	_var03, _var03
	decod	_var02, _var03
	andn	_var08, _var02
'     else
	jmp	#LR__0023
LR__0022
'       b:=b |(1<<(x//8))
	abs	_var03, arg01 wc
	and	_var03, #7
 if_b	neg	_var03, _var03
	decod	_var02, _var03
	or	_var08, _var02
LR__0023
'     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	shr	arg01, #3
	add	_var01, arg01
	wrbyte	_var08, _var01
LR__0024
_hng030rm_spin2_putpixel1_ret
	ret

' 
' 
' pub putpixel2(x,y,c) |byte b
_hng030rm_spin2_putpixel2
' 
' 
' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #4
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0025
'     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	mov	_var04, arg01
	shr	_var04, #2
	add	_var01, _var04
	rdbyte	_var08, _var01
'     b:=b & !(%11<<((x//4)<<1))
	abs	_var03, arg01 wc
	and	_var03, #3
 if_b	neg	_var03, _var03
	shl	_var03, #1
	mov	_var02, #3
	shl	_var02, _var03
	andn	_var08, _var02
'     b:=b |(c<<((x//4)<<1))
	abs	_var03, arg01 wc
	and	_var03, #3
 if_b	neg	_var03, _var03
	shl	_var03, #1
	shl	arg03, _var03
	or	_var08, arg03
'     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	shr	arg01, #2
	add	_var01, arg01
	wrbyte	_var08, _var01
LR__0025
_hng030rm_spin2_putpixel2_ret
	ret

' 
' 
' pub putpixel4(x,y,c) |byte b
_hng030rm_spin2_putpixel4
' 
' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #4
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0026
'     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	mov	_var04, arg01
	shr	_var04, #1
	add	_var01, _var04
	rdbyte	_var08, _var01
'     b:=b & !(%1111<<((x//2)<<2))
	abs	_var03, arg01 wc
	and	_var03, #1
 if_b	neg	_var03, _var03
	shl	_var03, #2
	mov	_var02, #15
	shl	_var02, _var03
	andn	_var08, _var02
'     b:=b |(c<<((x//2)<<2))
	abs	_var03, arg01 wc
	and	_var03, #1
 if_b	neg	_var03, _var03
	shl	_var03, #2
	shl	arg03, _var03
	or	_var08, arg03
'     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	shr	arg01, #1
	add	_var01, arg01
	wrbyte	_var08, _var01
LR__0026
_hng030rm_spin2_putpixel4_ret
	ret

' 
' 
' pub putpixel8(x,y,c)
_hng030rm_spin2_putpixel8
' 
' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
	mov	_var01, #0
	cmps	arg01, #0 wcz
 if_ae	neg	_var01, #1
	mov	_var02, #0
	add	objptr, #144
	rdlong	_var03, objptr
	shl	_var03, #2
	cmps	arg01, _var03 wcz
 if_b	neg	_var02, #1
	and	_var01, _var02
	mov	_var04, #0
	cmps	arg02, #0 wcz
 if_ae	neg	_var04, #1
	and	_var01, _var04
	mov	_var05, #0
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #148
	cmps	arg02, _var06 wcz
 if_b	neg	_var05, #1
	test	_var01, _var05 wz
 if_e	jmp	#LR__0027
'     byte[buf_ptr+4*cpl*y+x]:=c
	rdlong	_var01, objptr
	add	objptr, #144
	rdlong	_var02, objptr
	sub	objptr, #144
	shl	_var02, #2
	qmul	_var02, arg02
	getqx	_var07
	add	_var01, _var07
	add	_var01, arg01
	wrbyte	arg03, _var01
LR__0027
_hng030rm_spin2_putpixel8_ret
	ret

' 
' ''---------- Set the border color, o is upper border, lines+1 is lower border
' 
' pub setbordercolor(r,g,b) | color
_hng030rm_spin2_setbordercolor
' 
' color:=r<<24+g<<16+b<<8
	shl	arg01, #24
	shl	arg02, #16
	add	arg01, arg02
	shl	arg03, #8
	add	arg01, arg03
' bordercolor:=color
	add	objptr, #44
	wrlong	arg01, objptr
	sub	objptr, #44
_hng030rm_spin2_setbordercolor_ret
	ret

' 
' 
' '*************************************************************************
' '                                                                        *
' '  Text functions                                                        *
' '                                                                        *
' '*************************************************************************
' 
' ''---------- Clear the screen, set its foreground/background color
' 
' pub cls(fc,bc)   :c
_hng030rm_spin2_cls
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
' if (graphmode<512)
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	cmps	local03, ##512 wcz
 if_ae	jmp	#LR__0028
'   c:=fc<<24+bc<<16+$20
	mov	local04, local01
	shl	local04, #24
	mov	local05, local02
	shl	local05, #16
	add	local04, local05
	add	local04, #32
'   longfill(buf_ptr,c,buflen)
	rdlong	arg01, objptr
	add	objptr, #48
	rdlong	arg03, objptr
	sub	objptr, #48
	mov	arg02, local04
	call	#\builtin_longfill_
' else
	jmp	#LR__0034
LR__0028
'   if (graphmode & 48) ==48
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #48 wz
'     c:=bc
 if_e	mov	local04, local02
 if_e	jmp	#LR__0033
'   elseif (graphmode & 48) ==32
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #32 wz
 if_ne	jmp	#LR__0029
'     c:=bc<<4+bc
	mov	local04, local02
	shl	local04, #4
	add	local04, local02
	jmp	#LR__0032
LR__0029
'   elseif (graphmode & 48) ==16
	add	objptr, #196
	rdlong	local03, objptr
	sub	objptr, #196
	and	local03, #48
	cmp	local03, #16 wz
 if_ne	jmp	#LR__0030
'     c:=bc<<6+bc<<4+bc<<2+bc
	mov	local04, local02
	shl	local04, #6
	mov	local05, local02
	shl	local05, #4
	add	local04, local05
	mov	local06, local02
	shl	local06, #2
	add	local04, local06
	add	local04, local02
'   else
	jmp	#LR__0031
LR__0030
'     if bc==1
	cmp	local02, #1 wz
'       c:=255
 if_e	mov	local04, #255
'     else
'       c:=0
 if_ne	mov	local04, #0
LR__0031
LR__0032
LR__0033
'   bytefill(buf_ptr,c,buflen*4)
	rdlong	arg01, objptr
	add	objptr, #48
	rdlong	arg03, objptr
	sub	objptr, #48
	shl	arg03, #2
	mov	arg02, local04
	call	#\builtin_bytefill_
LR__0034
' setwritecolors(fc,bc)
' 
' 
' write_color:=ff
	add	objptr, #56
	wrlong	local01, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	local02, objptr
' cursor_x:=0
	sub	objptr, #8
	wrbyte	#0, objptr
' cursor_y:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, #53
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_cls_ret
	ret

' 
' ''---------- Output a char at the cursor position, move the cursor
' 
' pub putchar(achar) | c,x,y
_hng030rm_spin2_putchar
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
' 
' if achar==10
	cmp	local01, #10 wz
 if_ne	jmp	#LR__0035
'   crlf()
	call	#_hng030rm_spin2_crlf
' else  
	jmp	#LR__0038
LR__0035
'   x:=cursor_x
	add	objptr, #52
	rdbyte	local02, objptr
'   y:=cursor_y
	add	objptr, #1
	rdbyte	local03, objptr
'   c:=write_color<<24+write_background<<16
	add	objptr, #3
	rdlong	local04, objptr
	shl	local04, #24
	add	objptr, #4
	rdlong	local05, objptr
	sub	objptr, #60
	shl	local05, #16
	add	local04, local05
'   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
	rdlong	local06, objptr
	add	objptr, #144
	rdlong	local07, objptr
	sub	objptr, #144
	qmul	local07, local03
	getqx	local08
	add	local08, local02
	shl	local08, #2
	add	local06, local08
	rdlong	local09, local06
	and	local09, ##65535
	or	local09, local04
	rdlong	local10, objptr
	add	objptr, #144
	rdlong	local11, objptr
	sub	objptr, #144
	qmul	local11, local03
	getqx	local12
	add	local12, local02
	shl	local12, #2
	add	local10, local12
	wrlong	local09, local10
'   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
	rdlong	local06, objptr
	add	objptr, #144
	rdlong	local07, objptr
	sub	objptr, #144
	qmul	local07, local03
	getqx	local08
	add	local08, local02
	shl	local08, #2
	add	local06, local08
	rdlong	local09, local06
	andn	local09, #255
	mov	local10, local01
	and	local10, #255
	or	local09, local10
	rdlong	local13, objptr
	add	objptr, #144
	rdlong	local14, objptr
	qmul	local14, local03
	getqx	local15
	add	local15, local02
	shl	local15, #2
	add	local13, local15
	wrlong	local09, local13
'   cursor_x+=1
	sub	objptr, #92
	rdbyte	local09, objptr
	add	local09, #1
	wrbyte	local09, objptr
'   if cursor_x==cpl
	rdbyte	local09, objptr
	add	objptr, #92
	rdlong	local05, objptr
	sub	objptr, #144
	cmp	local09, local05 wz
 if_ne	jmp	#LR__0037
'     cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
'     cursor_y+=1
	add	objptr, #1
	rdbyte	local09, objptr
	add	local09, #1
	wrbyte	local09, objptr
'     if cursor_y>lines-1
	add	objptr, #95
	rdlong	local09, objptr
	sub	local09, #1
	sub	objptr, #95
	rdbyte	local05, objptr
	sub	objptr, #53
	cmps	local05, local09 wcz
 if_be	jmp	#LR__0036
'       scrollup()
	call	#_hng030rm_spin2_scrollup
'       cursor_y:=lines-1
	add	objptr, #148
	rdlong	local09, objptr
	sub	local09, #1
	sub	objptr, #95
	wrbyte	local09, objptr
	sub	objptr, #53
LR__0036
LR__0037
LR__0038
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_putchar_ret
	ret

' 
' ''-----------  Scroll the screen one line up
' 
' pub scrollup() | i
_hng030rm_spin2_scrollup
	mov	COUNT_, #12
	call	#pushregs_
' 
' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
	rdlong	arg01, objptr
	mov	arg02, arg01
	add	objptr, #144
	rdlong	local01, objptr
	shl	local01, #2
	add	arg02, local01
	sub	objptr, #96
	rdlong	arg03, objptr
	add	objptr, #96
	rdlong	local02, objptr
	sub	objptr, #144
	sub	arg03, local02
	call	#__system__longmove
' repeat i from buflen-cpl to buflen-1
	add	objptr, #48
	rdlong	local03, objptr
	add	objptr, #96
	rdlong	local01, objptr
	sub	local03, local01
	sub	objptr, #96
	rdlong	local04, objptr
	sub	local04, #1
	rdlong	local05, objptr
	add	objptr, #96
	rdlong	local06, objptr
	sub	objptr, #144
	sub	local05, local06
	cmps	local04, local05 wcz
 if_a	mov	local07, #1
 if_be	neg	local07, #1
	add	local04, local07
	loc	pa,	#(@LR__0040-@LR__0039)
	call	#FCACHE_LOAD_
LR__0039
'   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
	rdlong	local08, objptr
	mov	local09, local03
	shl	local09, #2
	add	local08, local09
	rdlong	local10, local08
	and	local10, ##-65536
	or	local10, #32
	rdlong	local11, objptr
	mov	local12, local03
	shl	local12, #2
	add	local11, local12
	wrlong	local10, local11
	add	local03, local07
	cmp	local03, local04 wz
 if_ne	jmp	#LR__0039
LR__0040
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_scrollup_ret
	ret

' 
' ''----------- Set cursor at the first character in a new line, scroll if needed
' 
' pub crlf()
_hng030rm_spin2_crlf
	mov	COUNT_, #2
	call	#pushregs_
' 
' cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
' cursor_y+=1
	add	objptr, #1
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
' if cursor_y>lines-1
	add	objptr, #95
	rdlong	local01, objptr
	sub	local01, #1
	sub	objptr, #95
	rdbyte	local02, objptr
	sub	objptr, #53
	cmps	local02, local01 wcz
 if_be	jmp	#LR__0041
'   scrollup()
	call	#_hng030rm_spin2_scrollup
'   cursor_y:=lines-1
	add	objptr, #148
	rdlong	local01, objptr
	sub	local01, #1
	sub	objptr, #95
	wrbyte	local01, objptr
	sub	objptr, #53
LR__0041
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_crlf_ret
	ret

' 
' 
' 
' '*************************************************************************
' '                                                                        *
' '  Mode setting and driver start                                                          *
' '                                                                        *
' '*************************************************************************
' 
' ''---------  Set the graphics mode
' 
' 
' 
' pub setmode(mode) | i', 'xzoom, yzoom, azoom
_hng030rm_spin2_setmode
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
' 
' '' mode:tn_bb_cc_vv_hh
' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
' 
' if mode==(512+192+48)
	cmp	local01, ##752 wz
'   return 'no RAM
 if_e	jmp	#LR__0064
' 
' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
	mov	local02, local01
	shr	local02, #6
	and	local02, #7
	fle	local02, #8
	mov	local03, local02
	jmprel	local03
LR__0042
	jmp	#LR__0043
	jmp	#LR__0044
	jmp	#LR__0045
	jmp	#LR__0046
	jmp	#LR__0047
	jmp	#LR__0048
	jmp	#LR__0049
	jmp	#LR__0050
	jmp	#LR__0051
LR__0043
' 
'     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7256
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7256
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0051
LR__0044
'     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7320
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7320
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0051
LR__0045
'     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7384
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7384
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0051
LR__0046
'     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7448
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7448
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0051
LR__0047
'     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7512
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7512
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0051
LR__0048
'     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7576
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7576
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0051
LR__0049
'     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
	add	objptr, #80
	mov	arg01, objptr
	sub	objptr, #80
	add	ptr__hng030rm_spin2_dat__, ##7640
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7640
	mov	arg03, #16
	call	#__system__longmove
	jmp	#LR__0051
LR__0050
'     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
	add	objptr, #80
	mov	local04, objptr
	mov	local05, local04
	add	ptr__hng030rm_spin2_dat__, ##7704
	mov	local06, ptr__hng030rm_spin2_dat__
	mov	local07, local06
	mov	local08, #16
	mov	arg01, local05
	mov	arg02, local07
	mov	arg03, #16
	sub	objptr, #80
	sub	ptr__hng030rm_spin2_dat__, ##7704
	call	#__system__longmove
LR__0051
' 
' ' 4-bit graphics: do nothing with timings :)
' if mode<512
	cmps	local01, ##512 wcz
 if_ae	jmp	#LR__0052
'   palette_ptr:=@ataripalette
	add	ptr__hng030rm_spin2_dat__, ##6232
	add	objptr, #24
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6232
LR__0052
' 
' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##560 wz
 if_ne	jmp	#LR__0053
'   timings[5]:=4
	add	objptr, #100
	wrlong	#4, objptr
'   timings[11]:=timings[11]<<1
	add	objptr, #24
	rdlong	local02, objptr
	shl	local02, #1
	wrlong	local02, objptr
'   putpixel:=p8
	add	objptr, #108
	rdlong	local02, objptr
	sub	objptr, #16
	wrlong	local02, objptr
'   palette_ptr:=@ataripalette
	add	ptr__hng030rm_spin2_dat__, ##6232
	sub	objptr, #192
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6232
LR__0053
' 
' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##528 wz
 if_ne	jmp	#LR__0054
'   timings[5]:=16
	add	objptr, #100
	wrlong	#16, objptr
'   timings[11]:=timings[11]>>1
	add	objptr, #24
	rdlong	local02, objptr
	shr	local02, #1
	wrlong	local02, objptr
'   putpixel:=p2
	add	objptr, #100
	rdlong	local02, objptr
	sub	objptr, #8
	wrlong	local02, objptr
'   palette_ptr:=@fourcolors
	add	ptr__hng030rm_spin2_dat__, ##6152
	sub	objptr, #192
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6152
LR__0054
' 
' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##512 wz
 if_ne	jmp	#LR__0055
'   timings[5]:=32
	add	objptr, #100
	wrlong	#32, objptr
'   timings[11]:=timings[11]>>2
	add	objptr, #24
	rdlong	local02, objptr
	shr	local02, #2
	wrlong	local02, objptr
'   putpixel:=p1
	add	objptr, #96
	rdlong	local02, objptr
	sub	objptr, #4
	wrlong	local02, objptr
'   palette_ptr:=@twocolors
	add	ptr__hng030rm_spin2_dat__, ##6144
	sub	objptr, #192
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6144
LR__0055
' 
' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
	mov	local02, local01
	and	local02, ##560
	cmp	local02, ##544 wz
 if_ne	jmp	#LR__0056
'   putpixel:=p4
	add	objptr, #228
	rdlong	local02, objptr
	sub	objptr, #12
	wrlong	local02, objptr
'   palette_ptr:=@vga16
	add	ptr__hng030rm_spin2_dat__, ##6168
	sub	objptr, #192
	wrlong	ptr__hng030rm_spin2_dat__, objptr
	sub	objptr, #24
	sub	ptr__hng030rm_spin2_dat__, ##6168
LR__0056
' 
' repeat i from 0 to 4
	mov	local09, #0
	loc	pa,	#(@LR__0058-@LR__0057)
	call	#FCACHE_LOAD_
LR__0057
'   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
	mov	local04, local09
	shl	local04, #2
	add	objptr, #80
	mov	local05, objptr
	add	local04, objptr
	sub	objptr, #44
	rdlong	local07, objptr
	mov	local06, local07
	shl	local06, #17
	rdlong	local02, local04
	add	local02, local06
	add	local02, ##1887502336
	mov	local08, local09
	shl	local08, #2
	add	objptr, #44
	mov	local10, objptr
	add	local08, objptr
	wrlong	local02, local08
	add	local09, #1
	cmps	local09, #5 wcz
	sub	objptr, #80
 if_b	jmp	#LR__0057
LR__0058
' timings[5]:=timings[5]+hdmibase<<17
	add	objptr, #36
	rdlong	local04, objptr
	shl	local04, #17
	add	objptr, #64
	rdlong	local06, objptr
	mov	local02, local06
	add	local02, local04
	wrlong	local02, objptr
' clkfreq:=timings[13]
	add	objptr, #32
	rdlong	local02, objptr
	wrlong	local02, #20
' hubset(timings[14])
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #136
	hubset	arg01
' waitms(1)
	mov	arg01, #1
	call	#__system___waitms
' 
' 
' xzoom:=1<<(mode & 3)
	mov	local04, local01
	and	local04, #3
	decod	local02, local04
	add	objptr, #204
	wrlong	local02, objptr
' 
' if (xzoom==8) && (((mode>>4)&3)<>3)
	mov	local04, local02
	sub	objptr, #204
	cmp	local04, #8 wz
 if_ne	jmp	#LR__0059
	mov	local05, local01
	shr	local05, #4
	and	local05, #3
	cmp	local05, #3 wz
 if_e	jmp	#LR__0059
'   xzoom:=4
	mov	local02, #4
	add	objptr, #204
	wrlong	#4, objptr
	sub	objptr, #204
LR__0059
' 
' yzoom:=1<<((mode>>2) & 3)
	mov	local04, local01
	shr	local04, #2
	and	local04, #3
	decod	local02, local04
	add	objptr, #208
	wrlong	local02, objptr
' azoom:=xzoom*yzoom
	sub	objptr, #4
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local06, objptr
	qmul	local04, local06
	getqx	local02
	add	objptr, #4
	wrlong	local02, objptr
' 
' cpl:=timings[11]
	sub	objptr, #88
	rdlong	local02, objptr
	add	objptr, #20
	wrlong	local02, objptr
	sub	objptr, #144
' if (mode<512)
	cmps	local01, ##512 wcz
 if_ae	jmp	#LR__0060
'   lines:=(timings[12]>>4)+/yzoom
	add	objptr, #128
	rdlong	muldiva_, objptr
	shr	muldiva_, #4
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#unsdivide_
	add	objptr, #148
	wrlong	muldivb_, objptr
'   if ((timings[12]>>4)+//yzoom) <>0
	sub	objptr, #20
	rdlong	muldiva_, objptr
	shr	muldiva_, #4
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#unsdivide_
	cmp	muldiva_, #0 wz
 if_e	jmp	#LR__0063
'     lines +=1
	add	objptr, #148
	rdlong	local02, objptr
	add	local02, #1
	wrlong	local02, objptr
	sub	objptr, #148
' 
' else
	jmp	#LR__0063
LR__0060
'   lines:=timings[12]/yzoom
	add	objptr, #128
	rdlong	muldiva_, objptr
	add	objptr, #80
	rdlong	muldivb_, objptr
	sub	objptr, #208
	call	#divide_
	add	objptr, #148
	wrlong	muldivb_, objptr
'   if cpl//xzoom==0
	sub	objptr, #4
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	cmp	muldiva_, #0 wz
 if_ne	jmp	#LR__0061
'     cpl:=cpl/xzoom
	add	objptr, #144
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	add	objptr, #144
	wrlong	muldivb_, objptr
	sub	objptr, #144
'   else
	jmp	#LR__0062
LR__0061
'     cpl:=cpl/xzoom+1
	add	objptr, #144
	rdlong	muldiva_, objptr
	add	objptr, #60
	rdlong	muldivb_, objptr
	sub	objptr, #204
	call	#divide_
	mov	local02, muldivb_
	add	local02, #1
	add	objptr, #144
	wrlong	local02, objptr
	sub	objptr, #144
LR__0062
LR__0063
' 
' buflen:=(cpl*lines)
	add	objptr, #144
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local06, objptr
	qmul	local04, local06
	getqx	local02
	sub	objptr, #100
	wrlong	local02, objptr
' buf_ptr:=$80000-4*buflen
	mov	local04, local02
	sub	objptr, #48
	shl	local04, #2
	decod	local02, #19
	sub	local02, local04
	wrlong	local02, objptr
' mode_ptr:=@timings
	add	objptr, #80
	mov	local02, objptr
	sub	objptr, #60
	wrlong	local02, objptr
' graphmode:=mode
	add	objptr, #176
	wrlong	local01, objptr
	sub	objptr, #196
' makedl(mode)
	mov	arg01, local01
	call	#_hng030rm_spin2_makedl
LR__0064
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_setmode_ret
	ret

' 
' 
' 
' 
' '---------- Make a display list
' 
' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
_hng030rm_spin2_makedl
' 
' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
'   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
' 
' '   0 - display a up/down border line
' 
' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
' '    nnnn - font line to display, 0..15
' '    llllll - character line, determines the cursor Y position
' 
' 
' if (mode &256==0)
	test	arg01, #256 wz
 if_ne	jmp	#LR__0065
'   dl_ptr:=buf_ptr-4*576
	rdlong	_var01, objptr
	sub	_var01, ##2304
	add	objptr, #28
	wrlong	_var01, objptr
	sub	objptr, #28
' else
	jmp	#LR__0066
LR__0065
'   dl_ptr:=buf_ptr-4*496
	rdlong	_var01, objptr
	sub	_var01, ##1984
	add	objptr, #28
	wrlong	_var01, objptr
	sub	objptr, #28
LR__0066
'  ' dl_ptr:=buf_ptr-4*540
' 
' vzoom:=((mode>>2) & 3)
	mov	_var02, arg01
	shr	_var02, #2
	and	_var02, #3
' 
' 
' if mode<512 '' text modes
	cmps	arg01, ##512 wcz
 if_ae	jmp	#LR__0074
' 
'   if timings[6]>0 'borders
	add	objptr, #104
	rdlong	_var01, objptr
	sub	objptr, #104
	cmps	_var01, #0 wcz
 if_be	jmp	#LR__0071
'     repeat i from 0 to timings[6]-1 '0 to -1
	mov	_var03, #0
	add	objptr, #104
	rdlong	_var04, objptr
	sub	objptr, #104
	sub	_var04, #1
	cmps	_var04, #0 wcz
 if_a	mov	_var05, #1
 if_be	neg	_var05, #1
	mov	_var06, _var05
	add	_var04, _var05
	loc	pa,	#(@LR__0068-@LR__0067)
	call	#FCACHE_LOAD_
LR__0067
'       long[dl_ptr+4*i]:=$0
	add	objptr, #28
	rdlong	_var07, objptr
	sub	objptr, #28
	mov	_var08, _var03
	shl	_var08, #2
	add	_var07, _var08
	wrlong	#0, _var07
	add	_var03, _var06
	cmp	_var03, _var04 wz
 if_ne	jmp	#LR__0067
LR__0068
'     repeat i from timings[6]+timings[12] to timings[15]-1
	add	objptr, #104
	rdlong	_var03, objptr
	add	objptr, #24
	rdlong	_var05, objptr
	add	_var03, _var05
	add	objptr, #12
	rdlong	_var09, objptr
	sub	_var09, #1
	sub	objptr, #36
	rdlong	_var10, objptr
	add	objptr, #24
	rdlong	_var11, objptr
	sub	objptr, #128
	add	_var10, _var11
	cmps	_var09, _var10 wcz
 if_a	mov	_var08, #1
 if_be	neg	_var08, #1
	mov	_var12, _var08
	add	_var09, _var08
	loc	pa,	#(@LR__0070-@LR__0069)
	call	#FCACHE_LOAD_
LR__0069
'       long[dl_ptr+4*i]:=$0
	add	objptr, #28
	rdlong	_var13, objptr
	sub	objptr, #28
	mov	_var14, _var03
	shl	_var14, #2
	add	_var13, _var14
	wrlong	#0, _var13
	add	_var03, _var12
	cmp	_var03, _var09 wz
 if_ne	jmp	#LR__0069
LR__0070
LR__0071
'   lpc:=16<<vzoom
	mov	_var15, #16
	shl	_var15, _var02
'   repeat i from timings[6] to timings[6]+timings[12]-1
	add	objptr, #104
	rdlong	_var03, objptr
	mov	_var16, _var03
	add	objptr, #24
	rdlong	_var17, objptr
	add	_var16, _var17
	sub	_var16, #1
	sub	objptr, #24
	rdlong	_var08, objptr
	sub	objptr, #104
	cmps	_var16, _var08 wcz
 if_a	mov	_var18, #1
 if_be	neg	_var18, #1
	mov	_var19, _var18
	add	_var16, _var18
	loc	pa,	#(@LR__0073-@LR__0072)
	call	#FCACHE_LOAD_
LR__0072
'     fontline2:=((i-timings[6])+//lpc)>>vzoom
	mov	muldiva_, _var03
	add	objptr, #104
	rdlong	_var20, objptr
	sub	objptr, #104
	sub	muldiva_, _var20
	mov	muldivb_, _var15
	call	#unsdivide_
	shr	muldiva_, _var02
	mov	_var21, muldiva_
'     charline:=(i-timings[6])+/lpc
	mov	muldiva_, _var03
	add	objptr, #104
	rdlong	_var22, objptr
	sub	objptr, #104
	sub	muldiva_, _var22
	mov	muldivb_, _var15
	call	#unsdivide_
	mov	_var23, muldivb_
'     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
	rdlong	_var11, objptr
	add	objptr, #144
	rdlong	_var20, objptr
	qmul	_var20, _var23
	getqx	_var24
	shl	_var24, #2
	add	_var11, _var24
	mov	_var14, arg01
	and	_var14, #3
	add	_var11, _var14
'     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
	shl	_var11, #12
	mov	_var22, _var21
	shl	_var22, #8
	add	_var11, _var22
	mov	_var20, _var23
	shl	_var20, #2
	add	_var11, _var20
	add	_var11, #1
	sub	objptr, #116
	rdlong	_var13, objptr
	sub	objptr, #28
	mov	_var14, _var03
	shl	_var14, #2
	add	_var13, _var14
	wrlong	_var11, _var13
	add	_var03, _var19
	cmp	_var03, _var16 wz
 if_ne	jmp	#LR__0072
LR__0073
LR__0074
' 
' 
' 
' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
	cmps	arg01, ##512 wcz
 if_b	jmp	#LR__0082
' 
'   if timings[6]>0 'borders
	add	objptr, #104
	rdlong	_var01, objptr
	sub	objptr, #104
	cmps	_var01, #0 wcz
 if_be	jmp	#LR__0079
'     repeat i from 0 to timings[6]-1 '0 to -1
	mov	_var03, #0
	add	objptr, #104
	rdlong	_var25, objptr
	sub	objptr, #104
	sub	_var25, #1
	cmps	_var25, #0 wcz
 if_a	mov	_var05, #1
 if_be	neg	_var05, #1
	mov	_var26, _var05
	add	_var25, _var05
	loc	pa,	#(@LR__0076-@LR__0075)
	call	#FCACHE_LOAD_
LR__0075
'       long[dl_ptr+4*i]:=$0
	add	objptr, #28
	rdlong	_var07, objptr
	sub	objptr, #28
	mov	_var08, _var03
	shl	_var08, #2
	add	_var07, _var08
	wrlong	#0, _var07
	add	_var03, _var26
	cmp	_var03, _var25 wz
 if_ne	jmp	#LR__0075
LR__0076
'     repeat i from timings[6]+timings[12] to timings[15]-1
	add	objptr, #104
	rdlong	_var03, objptr
	add	objptr, #24
	rdlong	_var05, objptr
	add	_var03, _var05
	add	objptr, #12
	rdlong	_var27, objptr
	sub	_var27, #1
	sub	objptr, #36
	rdlong	_var10, objptr
	add	objptr, #24
	rdlong	_var11, objptr
	sub	objptr, #128
	add	_var10, _var11
	cmps	_var27, _var10 wcz
 if_a	mov	_var08, #1
 if_be	neg	_var08, #1
	mov	_var28, _var08
	add	_var27, _var08
	loc	pa,	#(@LR__0078-@LR__0077)
	call	#FCACHE_LOAD_
LR__0077
'       long[dl_ptr+4*i]:=$0
	add	objptr, #28
	rdlong	_var13, objptr
	sub	objptr, #28
	mov	_var14, _var03
	shl	_var14, #2
	add	_var13, _var14
	wrlong	#0, _var13
	add	_var03, _var28
	cmp	_var03, _var27 wz
 if_ne	jmp	#LR__0077
LR__0078
LR__0079
'   repeat i from timings[6] to timings[6]+timings[12]-1
	add	objptr, #104
	rdlong	_var03, objptr
	mov	_var29, _var03
	add	objptr, #24
	rdlong	_var17, objptr
	add	_var29, _var17
	sub	_var29, #1
	sub	objptr, #24
	rdlong	_var08, objptr
	sub	objptr, #104
	cmps	_var29, _var08 wcz
 if_a	mov	_var18, #1
 if_be	neg	_var18, #1
	mov	_var30, _var18
	add	_var29, _var18
	loc	pa,	#(@LR__0081-@LR__0080)
	call	#FCACHE_LOAD_
LR__0080
'     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
	rdlong	_var11, objptr
	mov	_var22, _var03
	add	objptr, #104
	rdlong	_var20, objptr
	sub	_var22, _var20
	shr	_var22, _var02
	add	objptr, #40
	rdlong	_var14, objptr
	qmul	_var14, _var22
	getqx	_var31
	shl	_var31, #2
	add	_var11, _var31
	mov	_var32, arg01
	and	_var32, #3
	add	_var11, _var32
'     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
	shl	_var11, #12
	add	_var11, #2
	mov	_var22, arg01
	and	_var22, #48
	shr	_var22, #2
	add	_var11, _var22
	sub	objptr, #116
	rdlong	_var20, objptr
	sub	objptr, #28
	mov	_var24, _var03
	shl	_var24, #2
	add	_var20, _var24
	wrlong	_var11, _var20
	add	_var03, _var30
	cmp	_var03, _var29 wz
 if_ne	jmp	#LR__0080
LR__0081
LR__0082
_hng030rm_spin2_makedl_ret
	ret

'       
' '--------- Start the driver with graphics mode 'mode' at pins 'base'
' 
' pub start(mode,base):result
_hng030rm_spin2_start
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
' 
' ' initialize pointers and variables
' 
' border_ptr:=@bordercolor
	add	objptr, #44
	mov	local02, objptr
	sub	objptr, #36
	wrlong	local02, objptr
' font_ptr:=@st_font
	add	ptr__hng030rm_spin2_dat__, ##4096
	sub	objptr, #4
	wrlong	ptr__hng030rm_spin2_dat__, objptr
' hdmibase:=base
	add	objptr, #32
	wrlong	arg02, objptr
	sub	objptr, #36
' p1:=@putpixel1
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putpixel1_
	sub	ptr__hng030rm_spin2_dat__, ##4096
	call	#__system___make_methodptr
	mov	local03, result1
	add	objptr, #220
	wrlong	local03, objptr
	sub	objptr, #220
' p2:=@putpixel2
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putpixel2_
	call	#__system___make_methodptr
	mov	local03, result1
	add	objptr, #224
	wrlong	local03, objptr
	sub	objptr, #224
' p4:=@putpixel4
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putpixel4_
	call	#__system___make_methodptr
	mov	local03, result1
	add	objptr, #228
	wrlong	local03, objptr
	sub	objptr, #228
' p8:=@putpixel8
	mov	arg01, objptr
	mov	arg02, ptr__hng030rm_spin2_putpixel8_
	call	#__system___make_methodptr
	mov	local03, result1
	add	objptr, #232
	wrlong	local03, objptr
	sub	objptr, #232
' 
' 
' ' the mode has to be set here to enable computing the buffer length
' 
' setmode(mode)
	mov	arg01, local01
	call	#_hng030rm_spin2_setmode
' 
' vblank_ptr:=@vblank
	add	objptr, #64
	mov	local02, objptr
	sub	objptr, #52
	wrlong	local02, objptr
' cursor_ptr:=@cursor_x
	add	objptr, #40
	mov	local02, objptr
	sub	objptr, #36
	wrlong	local02, objptr
' 
' fontnum_ptr:=@fontnum
	add	objptr, #136
	mov	local02, objptr
	sub	objptr, #120
	wrlong	local02, objptr
' 
' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
	add	objptr, #120
	wrlong	#0, objptr
' bytemove(@colors,@vgacolors,16)
	add	objptr, #28
	mov	arg01, objptr
	sub	objptr, #180
	add	ptr__hng030rm_spin2_dat__, ##7768
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7768
	mov	arg03, #16
	call	#__system____builtin_memmove
' 
' ' initialize a cursor
' 
' cursor_x:=0
	add	objptr, #52
	wrbyte	#0, objptr
' cursor_y:=0
	add	objptr, #1
	wrbyte	#0, objptr
' cursor_sh:=14
	add	objptr, #1
	wrbyte	#14, objptr
	sub	objptr, #54
' 
' 
' ' start the cog
' 
' cog:=coginit(16,@hdmi, @buf_ptr)
	add	ptr__hng030rm_spin2_dat__, ##7784
	mov	arg02, ptr__hng030rm_spin2_dat__
	sub	ptr__hng030rm_spin2_dat__, ##7784
	mov	arg03, objptr
	mov	arg01, #16
	setq	arg03
	coginit	arg01, arg02 wc
 if_b	neg	arg01, #1
	mov	result1, arg01
	mov	local04, result1
	add	objptr, #40
	wrlong	local04, objptr
	sub	objptr, #40
' waitms(20)
	mov	arg01, #20
	call	#__system___waitms
' 
' ' clear the screen and set the colors to green on black
' 
' cls(c_green,c_black)
	mov	arg01, #199
	mov	arg02, #0
	call	#_hng030rm_spin2_cls
' setbordercolor(0,0,128)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #128
	call	#_hng030rm_spin2_setbordercolor
' setwritecolors(c_green,c_black)
' 
' 
' write_color:=ff
	add	objptr, #56
	wrlong	#199, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
' 
' return cog
	sub	objptr, #20
	rdlong	result1, objptr
	sub	objptr, #40
	mov	ptra, fp
	call	#popregs_
_hng030rm_spin2_start_ret
	ret

' 'this is the object and not a program
' 
' pub start :cog
_retrocog_spin2_start
	mov	COUNT_, #2
	call	#pushregs_
' 
' cog:=cogspin(16,serialcog(),@serialstack)
	mov	local01, objptr
	add	objptr, ##792
	mov	local02, objptr
	wrlong	local01, local02
	add	local02, #4
	wrlong	ptr__retrocog_spin2_serialcog_, local02
	mov	arg03, objptr
	sub	objptr, ##792
	mov	arg01, #16
	setq	arg03
	coginit	arg01, entryptr__ wc
 if_b	neg	arg01, #1
	mov	result1, arg01
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_start_ret
	ret

' 
' pub serialcog()| rr, mrr, b, mb, midireport, kbmreport
_retrocog_spin2_serialcog
	mov	COUNT_, #11
	call	#pushregs_
' 
' 'start serial and midi
' 
' serial_start(rxpin, txpin, baudrate)
	mov	arg01, #32
	mov	arg02, #33
	mov	arg03, ##1920000
	call	#_retrocog_spin2_serial_start
' serial_start(midiin,midiout,mbaudrate)
	mov	local01, ##31250
	mov	arg01, #29
	mov	arg02, #30
	mov	arg03, ##31250
	call	#_retrocog_spin2_serial_start
' 
' mb:=(-1)
	neg	local02, #1
' b:=(-1)
	neg	local03, #1
' 
' mousefront:=0
	mov	local04, #0
	add	objptr, #8
	wrlong	#0, objptr
' mousetail:=0
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, #12
' kbdfront:=0
	wrlong	#0, objptr
' kbdtail:=0
	add	objptr, #4
	wrlong	#0, objptr
' midifront:=0
	add	objptr, #12
	wrlong	#0, objptr
' miditail:=0
	add	objptr, #4
	wrlong	#0, objptr
' long[$30]:=0
	wrlong	#0, #48
' long[$34]:=0
	wrlong	#0, #52
	sub	objptr, #20
' long[$38]:=0
	wrlong	#0, #56
' 
' repeat
LR__0083
' 
'   repeat 
LR__0084
'     rr:=rxcheck(rxpin)
	mov	arg01, #32
	call	#_retrocog_spin2_rxcheck
	mov	local05, result1
'     mrr:=rxcheck(midiin)
	mov	local04, #29
	mov	arg01, #29
	call	#_retrocog_spin2_rxcheck
	mov	local06, result1
	mov	local07, local06
	cmps	local05, #0 wcz
 if_ae	jmp	#LR__0085
	cmps	local07, #0 wcz
 if_b	jmp	#LR__0084
LR__0085
' 
'   until rr>=0 || mrr>=0  
' 
'   
' ' midi. Must be >= $80 for a command
' '$80-$8F - 3 bytes note off. note, velocity
' '$90-$9F - 3 bytes note on, note, velocity
' '$A0-$AF - 3 bytes poly aftertouch. note, value
' '$B0-$BF - 3 bytes control change, controller-value, 
' '$C0-$CF - 2 bytes program change
' '$D0-$DF - 2 bytes mono aftertouch
' '$E0-$EF - 3 bytes pitch bend, $2000 - center
' '$F0-$FF - 1 byte
'   
' 
'     
'   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
	cmps	local07, #128 wcz
 if_b	jmp	#LR__0086
	cmps	local07, #191 wcz
 if_be	jmp	#LR__0087
LR__0086
	cmps	local07, #224 wcz
 if_b	jmp	#LR__0088
	cmps	local07, #239 wcz
 if_a	jmp	#LR__0088
LR__0087
'     mb:=2
	mov	local02, #2
'     midireport:=mrr<<24
	mov	local04, local07
	shl	local04, #24
	mov	local08, local04
LR__0088
' 
'   if (mrr>=$C0) && (mrr<=$DF)
	cmps	local07, #192 wcz
 if_b	jmp	#LR__0089
	cmps	local07, #223 wcz
 if_a	jmp	#LR__0089
'     mb:=1
	mov	local02, #1
'     midireport:=mrr<<24
	mov	local04, local07
	shl	local04, #24
	mov	local08, local04
LR__0089
'   
'   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
	cmps	local07, #240 wcz
'     mb:=4
 if_ae	mov	local02, #4
'     midireport:=mrr<<24  
 if_ae	mov	local08, local07
 if_ae	shl	local08, #24
'   
'   if (mrr<$80) && (mb>0)
	cmps	local07, #128 wcz
 if_ae	jmp	#LR__0091
	cmps	local02, #0 wcz
 if_be	jmp	#LR__0091
'     
'     mb--
	mov	local04, local02
	mov	local06, local02
	sub	local06, #1
	mov	local02, local06
'     if mb<3
	cmps	local02, #3 wcz
 if_ae	jmp	#LR__0090
'       midireport+=mrr<<(mb<<3)
	mov	local04, local08
	mov	local06, local07
	mov	local01, local02
	shl	local01, #3
	shl	local06, local01
	add	local04, local06
	mov	local08, local04
LR__0090
LR__0091
'   
'   if mb==0
	cmp	local02, #0 wz
 if_ne	jmp	#LR__0093
'     
'     if midifront<>((miditail-1) //32)
	add	objptr, #20
	rdlong	local06, objptr
	mov	local04, local06
	sub	local04, #1
	abs	local01, local04 wc
	and	local01, #31
 if_b	neg	local01, local01
	sub	objptr, #4
	rdlong	local09, objptr
	sub	objptr, #16
	mov	local10, local09
	cmp	local10, local01 wz
 if_e	jmp	#LR__0092
'       midibuf[midifront]:=midireport
	add	objptr, #16
	rdlong	local04, objptr
	shl	local04, #2
	add	objptr, ##648
	add	local04, objptr
	wrlong	local08, local04
'       midifront+=1
	sub	objptr, ##648
	rdlong	local01, objptr
	add	local01, #1
	wrlong	local01, objptr
'       midifront:=midifront // 32
	mov	local06, local01
	abs	local04, local06 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #16
LR__0092
'     mb:=(-1)
	neg	local02, #1
LR__0093
' 
' 'Keyboard and mouse
' 
'   if (rr>=$80) && (rr<>$FF)
	cmps	local05, #128 wcz
 if_b	jmp	#LR__0094
	cmp	local05, #255 wz
 if_e	jmp	#LR__0094
'     b:=3
	mov	local03, #3
'     kbmreport:=rr<<24
	mov	local04, local05
	shl	local04, #24
	mov	local11, local04
LR__0094
'   
'   if (rr<$80) && (b>0)
	cmps	local05, #128 wcz
 if_ae	jmp	#LR__0095
	cmps	local03, #0 wcz
 if_be	jmp	#LR__0095
'     b--
	sub	local03, #1
'     kbmreport+=rr<<(b<<3)  
	mov	local04, local11
	mov	local06, local05
	mov	local01, local03
	shl	local01, #3
	shl	local06, local01
	add	local04, local06
	mov	local11, local04
LR__0095
'   
'   if (rr==$FF)
	cmp	local05, #255 wz
'     b:=0   
 if_e	mov	local03, #0
' 
'   if b==0  
	cmp	local03, #0 wz
 if_ne	jmp	#LR__0100
'  
'     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
	cmp	local11, ##-2147483648 wcz
 if_b	jmp	#LR__0097
	cmp	local11, ##-2030043136 wcz
 if_ae	jmp	#LR__0097
'       if mousefront<>((mousetail-1) //128)
	add	objptr, #12
	rdlong	local06, objptr
	mov	local04, local06
	sub	local04, #1
	abs	local01, local04 wc
	and	local01, #127
 if_b	neg	local01, local01
	sub	objptr, #4
	rdlong	local09, objptr
	sub	objptr, #8
	mov	local10, local09
	cmp	local10, local01 wz
 if_e	jmp	#LR__0096
'         mousebuf[mousefront]:=kbmreport
	add	objptr, #8
	rdlong	local04, objptr
	shl	local04, #2
	add	objptr, #144
	add	local04, objptr
	wrlong	local11, local04
'         mousefront+=1
	sub	objptr, #144
	rdlong	local01, objptr
	add	local01, #1
	wrlong	local01, objptr
'         mousefront:=mousefront // 128
	mov	local06, local01
	abs	local04, local06 wc
	and	local04, #127
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #8
LR__0096
LR__0097
'     b:=(-1)
	neg	local03, #1
' 
'     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
	cmp	local11, ##-2030043136 wcz
 if_b	jmp	#LR__0099
	cmp	local11, ##-1979711488 wcz
 if_ae	jmp	#LR__0099
'       if kbdfront<>((kbdtail-1) //32)
	add	objptr, #4
	rdlong	local06, objptr
	sub	objptr, #4
	mov	local04, local06
	sub	local04, #1
	abs	local01, local04 wc
	and	local01, #31
 if_b	neg	local01, local01
	rdlong	local10, objptr
	cmp	local10, local01 wz
 if_e	jmp	#LR__0098
'         kbdbuf[kbdfront]:=kbmreport
	rdlong	local04, objptr
	shl	local04, #2
	add	objptr, #24
	add	local04, objptr
	wrlong	local11, local04
'         kbdfront+=1
	sub	objptr, #24
	rdlong	local06, objptr
	add	local06, #1
	wrlong	local06, objptr
'         kbdfront:=kbdfront // 32
	abs	local04, local06 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
LR__0098
LR__0099
'     b:=(-1)
	neg	local03, #1
LR__0100
' 
' 
'   if long[$30]==0
	rdlong	local04, #48 wz
 if_ne	jmp	#LR__0102
'     if kbdfront<>kbdtail
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local01, objptr
	sub	objptr, #4
	cmp	local04, local01 wz
 if_e	jmp	#LR__0101
'       long[$30]:=kbdbuf[kbdtail]
	add	objptr, #4
	rdlong	local04, objptr
	shl	local04, #2
	add	objptr, #20
	add	local04, objptr
	rdlong	local10, local04
	wrlong	local10, #48
'       kbdtail++
	sub	objptr, #20
	rdlong	local10, objptr
	mov	local01, local10
	add	local01, #1
	wrlong	local01, objptr
'       kbdtail:= kbdtail // 32
	abs	local04, local01 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #4
LR__0101
LR__0102
'       
'   if long[$34]==0
	rdlong	local04, #52 wz
 if_ne	jmp	#LR__0104
'     if mousefront<>mousetail
	add	objptr, #8
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local10, objptr
	sub	objptr, #12
	mov	local01, local10
	cmp	local04, local01 wz
 if_e	jmp	#LR__0103
'       long[$34]:=mousebuf[mousetail]
	add	objptr, #12
	rdlong	local04, objptr
	shl	local04, #2
	add	objptr, #140
	add	local04, objptr
	rdlong	local10, local04
	wrlong	local10, #52
'       mousetail++
	sub	objptr, #140
	rdlong	local10, objptr
	mov	local01, local10
	add	local01, #1
	wrlong	local01, objptr
'       mousetail:= mousetail // 128
	abs	local04, local01 wc
	and	local04, #127
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #12
LR__0103
LR__0104
' 
'       
'   if long[$38]==0
	rdlong	local04, #56 wz
 if_ne	jmp	#LR__0083
'     if midifront<>miditail
	add	objptr, #16
	rdlong	local04, objptr
	add	objptr, #4
	rdlong	local10, objptr
	sub	objptr, #20
	mov	local01, local10
	cmp	local04, local01 wz
 if_e	jmp	#LR__0083
'       long[$38]:=midibuf[miditail]
	add	objptr, #20
	rdlong	local04, objptr
	shl	local04, #2
	add	objptr, ##644
	add	local04, objptr
	rdlong	local10, local04
	wrlong	local10, #56
'       miditail++
	sub	objptr, ##644
	rdlong	local10, objptr
	mov	local01, local10
	add	local01, #1
	wrlong	local01, objptr
'       miditail:= miditail // 32
	abs	local04, local01 wc
	and	local04, #31
 if_b	neg	local04, local04
	wrlong	local04, objptr
	sub	objptr, #20
	jmp	#LR__0083
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_serialcog_ret
	ret

'       
' 
' ''---------------------- Serial functions from jm_serial.spin2, modified
' 
' pub serial_start(rxpin, txpin, baud) | bitmode
_retrocog_spin2_serial_start
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
	rdlong	arg01, #20
	decod	arg02, #16
	qmul	arg01, arg02
	getqy	local03
	getqx	local04
	setq	local03
	qdiv	local04, arg03
	getqx	result1
	mov	arg03, result1
	and	arg03, ##-1024
' bitmode |= 7                                                  ' set bits (8)
	or	arg03, #7
' pinstart(rxpin,P_ASYNC_RX,bitmode,0)
	dirl	local01
	wrpin	#62, local01
	wxpin	arg03, local01
	wypin	#0, local01
	dirh	local01
' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
	dirl	local02
	wrpin	#124, local02
	wxpin	arg03, local02
	wypin	#0, local02
	dirh	local02
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_serial_start_ret
	ret

' 
' 
' pub rxcheck(pin) : rxbyte | check
_retrocog_spin2_rxcheck
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
' 
' '' Check for serial input
' '' -- returns -1 if nothing available
' 
'   rxbyte := -1
	neg	local02, #1
'   check := pinr(pin)
	mov	arg01, local01
	call	#__system___pinread
	mov	local03, result1 wz
'   if (check)
'     rxbyte := rdpin(pin) >> 24
 if_ne	mov	local02, #0
 if_ne	rdpin	local02, local01
 if_ne	shr	local02, #24
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_retrocog_spin2_rxcheck_ret
	ret
hubexit
	jmp	#cogexit

__system___setbaud
	rdlong	muldiva_, #20
	mov	muldivb_, arg01
	call	#divide_
	dirl	#62
	dirl	#63
	wrlong	muldivb_, ptr___system__dat__
	shl	muldivb_, #16
	mov	arg02, #7
	add	arg02, muldivb_
	wrpin	#124, #62
	wxpin	arg02, #62
	wrpin	#62, #63
	add	arg02, #20
	wxpin	arg02, #63
	dirh	#62
	dirh	#63
__system___setbaud_ret
	ret

__system___txraw
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_ne	jmp	#LR__0105
	mov	arg01, ##230400
	call	#__system___setbaud
LR__0105
	wypin	local01, #62
	waitx	#1
	loc	pa,	#(@LR__0107-@LR__0106)
	call	#FCACHE_LOAD_
LR__0106
	testp	#62 wc
 if_nc	jmp	#LR__0106
LR__0107
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__system___txraw_ret
	ret

__system___rxraw
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_ne	jmp	#LR__0108
	mov	arg01, ##230400
	call	#__system___setbaud
LR__0108
	cmp	local01, #0 wz
 if_e	jmp	#LR__0109
	getct	local03
	rdlong	local04, #20
	shr	local04, #10
	qmul	local01, local04
	getqx	local05
	add	local03, local05
LR__0109
	neg	local06, #1
	mov	local07, #0
	add	ptr___system__dat__, #4
	rdlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #4
LR__0110
	testb	local08, #8 wc
	testbn	local08, #9 andc
	shr	local08, #10
 if_b	mov	local07, #1
 if_b	jmp	#LR__0111
	testp	#63 wz
 if_e	mov	local07, #1
 if_e	rdpin	local08, #63
 if_e	shr	local08, #4
LR__0111
	mov	local02, #0
	cmp	local07, #0 wz
 if_ne	neg	local02, #1
	mov	local09, #0
	mov	local04, #0
	cmp	local01, #0 wz
 if_ne	neg	local04, #1
	mov	local05, #0
	mov	local10, #0
	getct	local11
	sub	local11, local03
	cmps	local11, #0 wcz
 if_b	neg	local10, #1
	cmp	local10, #0 wz
 if_ne	neg	local05, #1
	test	local04, local05 wz
 if_ne	neg	local09, #1
	or	local02, local09 wz
 if_e	jmp	#LR__0110
	cmp	local07, #0 wz
 if_ne	mov	local06, local08
 if_ne	and	local06, #255
	add	ptr___system__dat__, #4
	wrlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #4
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___rxraw_ret
	ret

__system____builtin_memmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0119
	loc	pa,	#(@LR__0113-@LR__0112)
	call	#FCACHE_LOAD_
LR__0112
	cmps	arg03, #3 wcz
 if_be	jmp	#LR__0114
	rdlong	_var02, arg02
	wrlong	_var02, arg01
	add	arg01, #4
	add	arg02, #4
	sub	arg03, #4
	jmp	#LR__0112
LR__0113
LR__0114
	mov	_var03, arg03 wz
 if_e	jmp	#LR__0125
	loc	pa,	#(@LR__0117-@LR__0115)
	call	#FCACHE_LOAD_
LR__0115
	rep	@LR__0118, _var03
LR__0116
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
	add	arg01, #1
	add	arg02, #1
LR__0117
LR__0118
	jmp	#LR__0125
LR__0119
	add	arg01, arg03
	add	arg02, arg03
	mov	_var04, arg03 wz
 if_e	jmp	#LR__0124
	loc	pa,	#(@LR__0122-@LR__0120)
	call	#FCACHE_LOAD_
LR__0120
	rep	@LR__0123, _var04
LR__0121
	sub	arg01, #1
	sub	arg02, #1
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
LR__0122
LR__0123
LR__0124
LR__0125
	mov	result1, _var01
__system____builtin_memmove_ret
	ret

__system__longmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0130
	mov	_var02, arg03 wz
 if_e	jmp	#LR__0136
	loc	pa,	#(@LR__0128-@LR__0126)
	call	#FCACHE_LOAD_
LR__0126
	rep	@LR__0129, _var02
LR__0127
	rdlong	_var03, arg02
	wrlong	_var03, arg01
	add	arg01, #4
	add	arg02, #4
LR__0128
LR__0129
	jmp	#LR__0136
LR__0130
	mov	_var04, arg03
	shl	_var04, #2
	add	arg01, _var04
	mov	_var04, arg03
	shl	_var04, #2
	add	arg02, _var04
	mov	_var05, arg03 wz
 if_e	jmp	#LR__0135
	loc	pa,	#(@LR__0133-@LR__0131)
	call	#FCACHE_LOAD_
LR__0131
	rep	@LR__0134, _var05
LR__0132
	sub	arg01, #4
	sub	arg02, #4
	rdlong	_var03, arg02
	wrlong	_var03, arg01
LR__0133
LR__0134
LR__0135
LR__0136
	mov	result1, _var01
__system__longmove_ret
	ret

__system____topofstack
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #8
	add	fp, #4
	wrlong	arg01, fp
	mov	result1, fp
	sub	fp, #4
	mov	ptra, fp
	call	#popregs_
__system____topofstack_ret
	ret

__system___make_methodptr
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #8
	call	#__system___gc_alloc_managed
	mov	local03, result1 wz
 if_e	jmp	#LR__0137
	wrlong	local01, local03
	mov	local04, local03
	add	local04, #4
	wrlong	local02, local04
LR__0137
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
__system___make_methodptr_ret
	ret

__system___lockmem
	mov	COUNT_, #2
	call	#pushregs_
	cogid	result1
	mov	local01, result1
	add	local01, #256
LR__0138
	rdlong	local02, arg01 wz
 if_e	wrlong	local01, arg01
 if_e	rdlong	local02, arg01
 if_e	rdlong	local02, arg01
	cmp	local02, local01 wz
 if_ne	jmp	#LR__0138
	mov	ptra, fp
	call	#popregs_
__system___lockmem_ret
	ret

__system___tx
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wz
 if_ne	jmp	#LR__0139
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #2 wz
 if_e	jmp	#LR__0139
	mov	local02, #13
	mov	arg01, #13
	call	#__system___txraw
LR__0139
	mov	arg01, local01
	call	#__system___txraw
	mov	ptra, fp
	call	#popregs_
__system___tx_ret
	ret

__system___rx
	mov	COUNT_, #2
	call	#pushregs_
LR__0140
	mov	arg01, #0
	call	#__system___rxraw
	mov	local01, result1
	cmp	local01, ##-1 wz
 if_e	jmp	#LR__0140
	cmp	local01, #13 wz
 if_ne	jmp	#LR__0141
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #2 wz
 if_ne	mov	local01, #10
LR__0141
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #1 wz
 if_e	jmp	#LR__0144
	cmp	local01, #127 wz
 if_ne	jmp	#LR__0142
	mov	arg01, #8
	call	#__system___tx
	jmp	#LR__0143
LR__0142
	mov	arg01, local01
	call	#__system___tx
LR__0143
LR__0144
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___rx_ret
	ret

__system___pinread
	test	arg01, #32 wz
 if_ne	mov	_var01, inb
 if_e	mov	_var01, ina
	shr	_var01, arg01
	shr	arg01, #6
	zerox	_var01, arg01
	mov	result1, _var01
__system___pinread_ret
	ret

__system___waitms
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, #20
	loc	pa,	#(@LR__0146-@LR__0145)
	call	#FCACHE_LOAD_
LR__0145
	cmps	local01, ##1000 wcz
 if_a	waitx	local02
 if_a	sub	local01, ##1000
 if_a	jmp	#LR__0145
LR__0146
	add	ptr___system__dat__, #12
	rdlong	local03, ptr___system__dat__ wz
	sub	ptr___system__dat__, #12
 if_ne	jmp	#LR__0147
	mov	muldiva_, local02
	mov	muldivb_, ##1000
	call	#unsdivide_
	mov	local03, muldivb_
	add	ptr___system__dat__, #12
	wrlong	muldivb_, ptr___system__dat__
	sub	ptr___system__dat__, #12
LR__0147
	cmps	local01, #0 wcz
 if_a	qmul	local01, local03
 if_a	getqx	arg01
 if_a	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitms_ret
	ret

__system___basic_open
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system____getftab
	mov	local04, result1 wz
 if_ne	jmp	#LR__0148
	mov	arg01, abortchain
	mov	arg02, #12
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0152
LR__0148
	cmp	local01, #0 wz
 if_e	jmp	#LR__0150
	mov	arg01, #4
	call	#__system___gc_alloc_managed
	mov	local05, result1 wz
 if_ne	jmp	#LR__0149
	mov	arg01, abortchain
	mov	arg02, #7
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0152
LR__0149
	wrlong	local01, local05
	mov	arg02, ptr___struct___bas_wrap_sender_tx_
	mov	arg01, local05
	call	#__system___make_methodptr
	add	local04, #24
	wrlong	result1, local04
	sub	local04, #24
	jmp	#LR__0151
LR__0150
	add	local04, #24
	wrlong	local01, local04
	sub	local04, #24
LR__0151
	add	local04, #28
	wrlong	local02, local04
	add	local04, #4
	wrlong	local03, local04
	mov	result1, #0
LR__0152
	mov	ptra, fp
	call	#popregs_
__system___basic_open_ret
	ret

__system___basic_print_char
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	call	#__system___gettxfunc
	mov	local02, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0153
	rdlong	local03, local02
	add	local02, #4
	rdlong	local04, local02
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	result1, #1
LR__0153
	mov	ptra, fp
	call	#popregs_
__system___basic_print_char_ret
	ret

__system___basic_print_string
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	call	#__system___gettxfunc
	mov	local03, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0154
	cmp	local01, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0154
	mov	arg01, local03
	mov	arg02, local02
	mov	arg03, local01
	call	#__system___fmtstr
LR__0154
	mov	ptra, fp
	call	#popregs_
__system___basic_print_string_ret
	ret

__system___basic_print_integer
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system___gettxfunc
	mov	local04, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0155
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, local01
	mov	arg04, local03
	call	#__system___fmtnum
LR__0155
	mov	ptra, fp
	call	#popregs_
__system___basic_print_integer_ret
	ret

__system___basic_print_unsigned
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system___gettxfunc
	mov	local04, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0156
	bith	local02, #58
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, local01
	mov	arg04, local03
	call	#__system___fmtnum
LR__0156
	mov	ptra, fp
	call	#popregs_
__system___basic_print_unsigned_ret
	ret

__system___fmtchar
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrbyte	arg03, fp
	add	fp, #1
	wrbyte	#0, fp
	sub	fp, #13
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #8
	mov	arg03, fp
	sub	fp, #16
	call	#__system___fmtstr
	mov	ptra, fp
	call	#popregs_
__system___fmtchar_ret
	ret

__system___fmtstr
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	and	local04, #255
	mov	arg01, local03
	mov	local05, #0
	loc	pa,	#(@LR__0158-@LR__0157)
	call	#FCACHE_LOAD_
LR__0157
	rdbyte	local06, arg01 wz
 if_ne	add	local05, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0157
LR__0158
	mov	result1, local05
	mov	local07, result1
	cmp	local04, #0 wz
 if_e	jmp	#LR__0159
	fles	local07, local04 wcz
LR__0159
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local07
	mov	arg04, #2
	call	#__system___fmtpad
	mov	local08, result1
	cmps	local08, #0 wcz
 if_b	mov	result1, local08
 if_b	jmp	#LR__0162
	mov	local09, #0
LR__0160
	cmps	local09, local07 wcz
 if_ae	jmp	#LR__0161
	mov	local10, local01
	rdlong	local11, local10
	add	local10, #4
	rdlong	local12, local10
	rdbyte	arg01, local03
	mov	local13, objptr
	mov	objptr, local11
	add	local03, #1
	call	local12
	mov	objptr, local13
	mov	local14, result1
	cmps	local14, #0 wcz
 if_b	mov	result1, local14
 if_b	jmp	#LR__0162
	add	local08, local14
	add	local09, #1
	jmp	#LR__0160
LR__0161
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local07
	mov	arg04, #1
	call	#__system___fmtpad
	mov	local14, result1
	cmps	local14, #0 wcz
 if_b	mov	result1, local14
 if_ae	add	local08, local14
 if_ae	mov	result1, local08
LR__0162
	mov	ptra, fp
	call	#popregs_
__system___fmtstr_ret
	ret

__system___fmtnum
	mov	COUNT_, #7
	call	#pushregs_
	add	ptra, #112
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #4
	mov	local01, fp
	add	fp, #68
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #84
	rdlong	local01, fp
	shr	local01, #16
	and	local01, #63
	add	fp, #88
	wrlong	local01, fp
	sub	fp, #88
	rdlong	local01, fp
	and	local01, #255
	add	fp, #92
	wrlong	local01, fp
	sub	fp, #92
	rdlong	local01, fp
	shr	local01, #26
	and	local01, #3
	add	fp, #96
	wrlong	local01, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #96
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0163
	add	fp, #96
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	sub	fp, #96
LR__0163
	add	fp, #100
	rdlong	local02, fp
	sub	fp, #100
	cmps	local02, #64 wcz
 if_a	jmp	#LR__0164
	add	fp, #100
	rdlong	local03, fp
	sub	fp, #100
	mov	local04, local03 wz
 if_ne	jmp	#LR__0165
LR__0164
	add	fp, #100
	wrlong	#64, fp
	sub	fp, #100
LR__0165
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #3 wz
 if_ne	jmp	#LR__0166
	add	fp, #104
	wrlong	#0, fp
	sub	fp, #104
	jmp	#LR__0168
LR__0166
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmps	local01, #0 wcz
 if_ae	jmp	#LR__0167
	add	fp, #104
	wrlong	#4, fp
	sub	fp, #92
	rdlong	local01, fp
	neg	local01, local01
	wrlong	local01, fp
	sub	fp, #12
LR__0167
LR__0168
	add	fp, #104
	rdlong	local01, fp wz
	sub	fp, #104
 if_e	jmp	#LR__0175
	add	fp, #92
	rdlong	local04, fp
	add	local04, #1
	wrlong	local04, fp
	add	fp, #4
	rdlong	local01, fp
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #100
	cmp	local01, local04 wz
 if_ne	jmp	#LR__0170
	add	fp, #96
	rdlong	local04, fp
	sub	local04, #1
	wrlong	local04, fp
	rdlong	local01, fp wz
	sub	fp, #96
 if_ne	jmp	#LR__0169
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg03, #35
	call	#__system___fmtchar
	jmp	#LR__0180
LR__0169
LR__0170
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #2 wz
 if_ne	jmp	#LR__0171
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#32, local01
	jmp	#LR__0174
LR__0171
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #4 wz
 if_ne	jmp	#LR__0172
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#45, local01
	jmp	#LR__0173
LR__0172
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#43, local01
LR__0173
LR__0174
LR__0175
	add	fp, #88
	rdlong	arg01, fp
	sub	fp, #76
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #80
	rdlong	arg04, fp
	mov	local05, #0
	sub	fp, #88
	rdlong	local06, fp
	sub	fp, #8
	testbn	local06, #29 wz
 if_ne	mov	local05, #1
	mov	arg05, local05
	call	#__system___uitoa
	mov	local07, result1
	add	fp, #92
	rdlong	local01, fp
	add	local01, local07
	wrlong	local01, fp
	add	fp, #8
	rdlong	local04, fp
	sub	fp, #100
	cmps	local01, local04 wcz
 if_be	jmp	#LR__0179
	loc	pa,	#(@LR__0177-@LR__0176)
	call	#FCACHE_LOAD_
LR__0176
	add	fp, #100
	rdlong	local01, fp
	mov	local04, local01
	sub	local04, #1
	wrlong	local04, fp
	sub	fp, #100
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0178
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#35, local01
	jmp	#LR__0176
LR__0177
LR__0178
	add	fp, #88
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #88
	wrbyte	#0, local01
LR__0179
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #12
	mov	arg03, fp
	sub	fp, #20
	call	#__system___fmtstr
LR__0180
	mov	ptra, fp
	call	#popregs_
__system___fmtnum_ret
	ret

__system__Number_S
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02 wz
	mov	local03, arg03
 if_ne	jmp	#LR__0183
	mov	local02, #1
	mov	local04, local03
	mov	local05, #1
LR__0181
	mov	local06, #0
	cmp	local04, local01 wcz
 if_be	neg	local06, #1
	mov	local07, #0
	cmp	local05, local04 wcz
 if_b	neg	local07, #1
	test	local06, local07 wz
 if_e	jmp	#LR__0182
	mov	local05, local04
	qmul	local04, local03
	getqx	local04
	add	local02, #1
	jmp	#LR__0181
LR__0182
LR__0183
	fle	local02, #32 wcz
	mov	arg01, local02
	add	arg01, #2
	call	#__system___gc_alloc_managed
	mov	local08, result1
	mov	local07, local02
	add	local07, local08
	wrbyte	#0, local07
	loc	pa,	#(@LR__0185-@LR__0184)
	call	#FCACHE_LOAD_
LR__0184
	cmp	local02, #0 wcz
 if_be	jmp	#LR__0186
	sub	local02, #1
	mov	muldiva_, local01
	mov	muldivb_, local03
	call	#unsdivide_
	mov	local09, muldiva_
	mov	local01, muldivb_
	cmp	local09, #10 wcz
 if_b	add	local09, #48
 if_ae	add	local09, #55
	mov	local07, local02
	add	local07, local08
	wrbyte	local09, local07
	jmp	#LR__0184
LR__0185
LR__0186
	mov	result1, local08
	mov	ptra, fp
	call	#popregs_
__system__Number_S_ret
	ret

__system___gc_ptrs
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, __heap_ptr
	mov	local02, local01
	add	local02, ##4088
	rdlong	local03, local01 wz
 if_ne	jmp	#LR__0187
	mov	local04, local02
	sub	local04, local01
	wrword	#1, local01
	mov	local03, local01
	add	local03, #2
	wrword	##27792, local03
	mov	local03, local01
	add	local03, #4
	wrword	#0, local03
	mov	local03, local01
	add	local03, #6
	wrword	#1, local03
	add	local01, #16
	abs	local03, local04 wc
	shr	local03, #4
 if_b	neg	local03, local03
	wrword	local03, local01
	mov	local03, local01
	add	local03, #2
	wrword	##27791, local03
	mov	local03, local01
	add	local03, #4
	wrword	#0, local03
	mov	local03, local01
	add	local03, #6
	wrword	#0, local03
	sub	local01, #16
LR__0187
	mov	result2, local02
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___gc_ptrs_ret
	ret

__system___gc_nextBlockPtr
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdword	local02, local01 wz
 if_ne	jmp	#LR__0188
	mov	arg01, ##@LR__0300
	call	#__system___gc_errmsg
	jmp	#LR__0189
LR__0188
	mov	result1, local01
	shl	local02, #4
	add	result1, local02
LR__0189
	mov	ptra, fp
	call	#popregs_
__system___gc_nextBlockPtr_ret
	ret

__system___gc_tryalloc
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
	mov	local05, local03
	mov	local06, #0
	loc	pa,	#(@LR__0191-@LR__0190)
	call	#FCACHE_LOAD_
LR__0190
	mov	local07, local05
	mov	local08, local03
	mov	local09, local05
	add	local09, #6
	rdword	local10, local09
	mov	arg01, local08
	mov	arg02, local10 wz
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local11, result1
	mov	local05, local11 wz
 if_ne	mov	local08, local05
 if_ne	rdword	local06, local08
	cmp	local05, #0 wz
 if_e	jmp	#LR__0192
	cmps	local05, local04 wcz
 if_ae	jmp	#LR__0192
	cmps	local01, local06 wcz
 if_a	jmp	#LR__0190
LR__0191
LR__0192
	cmp	local05, #0 wz
 if_e	mov	result1, local05
 if_e	jmp	#LR__0195
	mov	local08, local05
	add	local08, #6
	rdword	local12, local08
	cmps	local01, local06 wcz
 if_ae	jmp	#LR__0194
	wrword	local01, local05
	mov	arg01, local05
	mov	local09, local01
	shl	local09, #4
	add	arg01, local09
	mov	local08, local06
	sub	local08, local01
	wrword	local08, arg01
	mov	local08, arg01
	add	local08, #2
	wrword	##27791, local08
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local11, arg01
	add	local11, #4
	wrword	result1, local11
	mov	local08, local05
	add	local08, #6
	mov	local09, arg01
	rdword	local10, local08
	add	local09, #6
	wrword	local10, local09
	mov	local13, arg01
	mov	arg02, local13 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local12, result1
	call	#__system___gc_nextBlockPtr
	mov	local14, result1 wz
 if_e	jmp	#LR__0193
	cmps	local14, local04 wcz
 if_ae	jmp	#LR__0193
	mov	local08, local03
	mov	local09, local13
	mov	arg01, local08
	mov	arg02, local09 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local10, result1
	mov	local11, local14
	add	local11, #4
	wrword	local10, local11
LR__0193
LR__0194
	add	local07, #6
	wrword	local12, local07
	mov	local08, ##27776
	or	local08, local02
	cogid	result1
	or	local08, result1
	mov	local10, local05
	add	local10, #2
	wrword	local08, local10
	mov	local08, local03
	add	local08, #8
	mov	local09, local05
	rdword	local10, local08
	add	local09, #6
	wrword	local10, local09
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	add	local03, #8
	wrword	result1, local03
	mov	result1, local05
	add	result1, #8
	or	result1, ##1669332992
LR__0195
	mov	ptra, fp
	call	#popregs_
__system___gc_tryalloc_ret
	ret

__system___gc_errmsg
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
LR__0196
	rdbyte	local02, local01 wz
	add	local01, #1
 if_e	jmp	#LR__0197
	mov	arg01, local02
	call	#__system___tx
	jmp	#LR__0196
LR__0197
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system___gc_errmsg_ret
	ret

__system___gc_alloc_managed
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #0
	call	#__system___gc_doalloc
	mov	local02, result1 wz
 if_ne	jmp	#LR__0198
	cmps	local01, #0 wcz
 if_be	jmp	#LR__0198
	mov	arg01, ##@LR__0301
	call	#__system___gc_errmsg
	jmp	#LR__0199
LR__0198
	mov	result1, local02
LR__0199
	mov	ptra, fp
	call	#popregs_
__system___gc_alloc_managed_ret
	ret

__system___gc_doalloc
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
 if_e	mov	result1, #0
 if_e	jmp	#LR__0207
	add	local01, #23
	andn	local01, #15
	shr	local01, #4
	add	ptr___system__dat__, #20
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #20
	call	#__system___lockmem
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local03, result1 wz
 if_ne	jmp	#LR__0200
	call	#__system___gc_docollect
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local03, result1
LR__0200
	add	ptr___system__dat__, #20
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #20
	wrlong	#0, arg01
	cmp	local03, #0 wz
 if_e	jmp	#LR__0206
	shl	local01, #4
	sub	local01, #8
	abs	local04, local01 wc
	shr	local04, #2
 if_b	neg	local04, local04
	mov	local05, local04 wz
	mov	local06, local03
 if_e	jmp	#LR__0205
	loc	pa,	#(@LR__0203-@LR__0201)
	call	#FCACHE_LOAD_
LR__0201
	rep	@LR__0204, local05
LR__0202
	wrlong	#0, local06
	add	local06, #4
LR__0203
LR__0204
LR__0205
LR__0206
	mov	result1, local03
LR__0207
	mov	ptra, fp
	call	#popregs_
__system___gc_doalloc_ret
	ret

__system___gc_isvalidptr
	mov	_var01, arg03
	mov	_var02, _var01
	and	_var02, ##-1048576
	cmp	_var02, ##1669332992 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	sub	_var01, #8
	andn	_var01, ##-1048576
	cmps	_var01, arg01 wcz
 if_b	jmp	#LR__0208
	cmps	_var01, arg02 wcz
 if_b	jmp	#LR__0209
LR__0208
	mov	result1, #0
	jmp	#__system___gc_isvalidptr_ret
LR__0209
	mov	_var02, _var01
	xor	_var02, arg01
	and	_var02, #15 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	mov	_var02, _var01
	add	_var02, #2
	rdword	_var02, _var02
	and	_var02, ##65472
	cmp	_var02, ##27776 wz
 if_ne	mov	result1, #0
 if_e	mov	result1, _var01
__system___gc_isvalidptr_ret
	ret

__system___gc_dofree
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	call	#__system___gc_ptrs
	mov	local02, result1
	mov	local03, result2
	mov	local04, local01
	add	local04, #2
	wrword	##27791, local04
	mov	local05, local01
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local06, result1
	loc	pa,	#(@LR__0211-@LR__0210)
	call	#FCACHE_LOAD_
LR__0210
	add	local05, #4
	rdword	arg02, local05 wz
	mov	arg01, local02
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local05, result1 wz
 if_e	jmp	#LR__0212
	mov	arg01, local05
	mov	local07, #0
	add	arg01, #2
	rdword	local08, arg01
	cmp	local08, ##27791 wz
 if_e	neg	local07, #1
	mov	result1, local07
	mov	local09, result1 wz
 if_e	jmp	#LR__0210
LR__0211
LR__0212
	cmp	local05, #0 wz
 if_e	mov	local05, local02
	mov	local04, local05
	add	local04, #6
	mov	local09, local01
	rdword	local10, local04
	add	local09, #6
	wrword	local10, local09
	mov	arg02, local01 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local02
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local10, result1
	mov	local11, local05
	add	local11, #6
	wrword	local10, local11
	cmp	local05, local02 wz
 if_e	jmp	#LR__0215
	mov	arg01, local05
	call	#__system___gc_nextBlockPtr
	cmp	result1, local01 wz
 if_ne	jmp	#LR__0214
	rdword	local04, local05
	rdword	local11, local01
	add	local04, local11
	wrword	local04, local05
	mov	local04, local01
	add	local04, #2
	wrword	#0, local04
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local06, result1
	cmps	local06, local03 wcz
 if_ae	jmp	#LR__0213
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local02
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local11, local06
	add	local11, #4
	wrword	result1, local11
LR__0213
	mov	local04, local01
	add	local04, #6
	mov	local09, local05
	rdword	local10, local04
	add	local09, #6
	wrword	local10, local09
	add	local01, #6
	wrword	#0, local01
	mov	local01, local05
LR__0214
LR__0215
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local12, result1 wz
 if_e	jmp	#LR__0217
	cmps	local12, local03 wcz
 if_ae	jmp	#LR__0217
	mov	arg01, local12
	mov	local07, #0
	add	arg01, #2
	rdword	local08, arg01
	cmp	local08, ##27791 wz
 if_e	neg	local07, #1
	mov	result1, local07 wz
 if_e	jmp	#LR__0217
	mov	local05, local01
	rdword	local04, local05
	mov	local01, local12
	rdword	local11, local01
	add	local04, local11
	mov	local13, local05
	wrword	local04, local13
	mov	local04, local01
	add	local04, #6
	mov	local09, local05
	rdword	local10, local04
	add	local09, #6
	wrword	local10, local09
	mov	local04, local01
	add	local04, #2
	wrword	#170, local04
	mov	local04, local01
	add	local04, #6
	wrword	#0, local04
	mov	local04, local01
	mov	arg01, local04
	call	#__system___gc_nextBlockPtr
	mov	local09, result1
	mov	local06, local09 wz
 if_e	jmp	#LR__0216
	cmps	local06, local03 wcz
 if_ae	jmp	#LR__0216
	mov	local04, local02
	mov	local09, local05
	mov	arg01, local04
	mov	arg02, local09 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local10, result1
	mov	local11, local06
	add	local11, #4
	wrword	local10, local11
LR__0216
LR__0217
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___gc_dofree_ret
	ret

__system___gc_docollect
	mov	COUNT_, #9
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result2
	mov	local02, result1
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
	cogid	result1
	mov	local04, result1
 if_e	jmp	#LR__0219
LR__0218
	cmps	local03, local01 wcz
 if_ae	jmp	#LR__0219
	mov	local05, local03
	add	local05, #2
	rdword	local06, local05
	andn	local06, #32
	mov	local07, local03
	add	local07, #2
	wrword	local06, local07
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
 if_ne	jmp	#LR__0218
LR__0219
	mov	local06, #0
	mov	arg01, #0
	call	#__system____topofstack
	mov	local07, result1
	mov	arg01, local06
	mov	arg02, local07
	call	#__system___gc_markhub
	call	#__system___gc_markcog
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local08, result1 wz
 if_ne	jmp	#LR__0220
	mov	arg01, ##@LR__0302
	call	#__system___gc_errmsg
	jmp	#LR__0226
LR__0220
LR__0221
	mov	local03, local08
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local08, result1
	mov	local06, local03
	add	local06, #2
	rdword	local09, local06
	test	local09, #32 wz
 if_ne	jmp	#LR__0224
	mov	local05, local09
	and	local05, #16 wz
 if_ne	jmp	#LR__0224
	mov	local06, local09
	and	local06, #15
	mov	local09, local06
	cmp	local09, local04 wz
 if_e	jmp	#LR__0222
	cmp	local09, #14 wz
 if_ne	jmp	#LR__0223
LR__0222
	mov	local06, local03
	mov	arg01, local06
	call	#__system___gc_dofree
	mov	local05, result1
	mov	local08, local05
LR__0223
LR__0224
	cmp	local08, #0 wz
 if_e	jmp	#LR__0225
	cmps	local08, local01 wcz
 if_b	jmp	#LR__0221
LR__0225
LR__0226
	mov	ptra, fp
	call	#popregs_
__system___gc_docollect_ret
	ret

__system___gc_markhub
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
LR__0227
	cmps	local01, local02 wcz
 if_ae	jmp	#LR__0228
	rdlong	arg03, local01
	add	local01, #4
	mov	arg01, local03
	mov	arg02, local04
	call	#__system___gc_isvalidptr
	mov	local05, result1 wz
 if_e	jmp	#LR__0227
	mov	arg01, local05
	mov	local06, #0
	add	arg01, #2
	rdword	local07, arg01
	cmp	local07, ##27791 wz
 if_e	neg	local06, #1
	mov	result1, local06
	mov	local08, result1 wz
 if_ne	jmp	#LR__0227
	mov	local09, local05
	add	local09, #2
	rdword	local10, local09
	andn	local10, #15
	or	local10, #46
	mov	local09, local05
	add	local09, #2
	wrword	local10, local09
	jmp	#LR__0227
LR__0228
	mov	ptra, fp
	call	#popregs_
__system___gc_markhub_ret
	ret

__system___gc_markcog
	mov	COUNT_, #6
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result1
	mov	local02, result2
	mov	local03, #0
LR__0229
	mov	local04, #496
	sub	local04, local03
	add	local04, #496
	'.live	local04
	alts	local04, #0
	mov	local05, local04
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local05
	call	#__system___gc_isvalidptr
	mov	local05, result1 wz
 if_e	jmp	#LR__0230
	mov	local06, local05
	add	local06, #2
	rdword	local04, local06
	or	local04, #32
	add	local05, #2
	wrword	local04, local05
LR__0230
	add	local03, #1
	cmps	local03, #496 wcz
 if_b	jmp	#LR__0229
	mov	ptra, fp
	call	#popregs_
__system___gc_markcog_ret
	ret

__system__write
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0231
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0232
LR__0231
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, #28
	add	arg01, ptr___system__dat__
	mov	arg02, local02
	mov	arg03, local03
	sub	ptr___system__dat__, #28
	call	#__system___vfswrite
LR__0232
	mov	ptra, fp
	call	#popregs_
__system__write_ret
	ret

__system__read
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0233
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0234
LR__0233
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, #28
	add	arg01, ptr___system__dat__
	mov	arg02, local02
	mov	arg03, local03
	sub	ptr___system__dat__, #28
	call	#__system___vfsread
LR__0234
	mov	ptra, fp
	call	#popregs_
__system__read_ret
	ret

__system__close
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0235
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0236
LR__0235
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr___system__dat__, #28
	add	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #28
	call	#__system___closeraw
LR__0236
	mov	ptra, fp
	call	#popregs_
__system__close_ret
	ret

__system__lseek
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmp	local01, #10 wcz
 if_b	jmp	#LR__0237
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0241
LR__0237
	mov	local04, local01
	shl	local04, #1
	add	local04, local01
	shl	local04, #4
	add	ptr___system__dat__, #28
	add	local04, ptr___system__dat__
	add	local04, #44
	rdlong	local05, local04 wz
	sub	local04, #44
	sub	ptr___system__dat__, #28
 if_ne	jmp	#LR__0238
	add	ptr___system__dat__, ##604
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0241
LR__0238
	add	local04, #8
	rdlong	local05, local04
	sub	local04, #8
	test	local05, #64 wz
 if_e	jmp	#LR__0239
	add	local04, #8
	rdlong	local05, local04
	or	local05, #128
	wrlong	local05, local04
	sub	local04, #8
LR__0239
	add	local04, #44
	rdlong	local05, local04
	sub	local04, #44
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, local03
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	mov	local09, result1
	cmps	local09, #0 wcz
 if_ae	jmp	#LR__0240
	neg	arg01, local09 wz
	add	ptr___system__dat__, ##604
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, ##604
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0241
LR__0240
	mov	result1, local09
LR__0241
	mov	ptra, fp
	call	#popregs_
__system__lseek_ret
	ret

__system____getftab
	cmp	arg01, #10 wcz
 if_ae	mov	result1, #0
 if_ae	jmp	#__system____getftab_ret
	mov	result1, arg01
	shl	result1, #1
	add	result1, arg01
	shl	result1, #4
	add	ptr___system__dat__, #28
	add	result1, ptr___system__dat__
	sub	ptr___system__dat__, #28
__system____getftab_ret
	ret

__system___strrev
	rdbyte	_var01, arg01 wz
 if_e	jmp	#__system___strrev_ret
	mov	_var02, arg01
	loc	pa,	#(@LR__0243-@LR__0242)
	call	#FCACHE_LOAD_
LR__0242
	rdbyte	_var01, _var02 wz
 if_ne	add	_var02, #1
 if_ne	jmp	#LR__0242
LR__0243
	sub	_var02, #1
LR__0244
	cmps	_var02, arg01 wcz
 if_be	jmp	#LR__0245
	rdbyte	_var03, arg01
	rdbyte	_var04, _var02
	wrbyte	_var04, arg01
	wrbyte	_var03, _var02
	add	arg01, #1
	sub	_var02, #1
	jmp	#LR__0244
LR__0245
__system___strrev_ret
	ret

__system___fmtpad
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg04
	getbyte	local04, local02, #1
	shr	local02, #22
	and	local02, #3 wz
	mov	local05, #0
 if_e	mov	local02, #1
	test	local02, local03 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0249
	sub	local04, arg03
	mov	local06, local04
	cmps	local06, #0 wcz
 if_be	mov	result1, #0
 if_be	jmp	#LR__0249
	cmp	local02, #3 wz
 if_ne	jmp	#LR__0246
	cmp	local03, #1 wz
	wrz	local07
	add	local06, local07
	abs	local06, local06 wc
	shr	local06, #1
 if_b	neg	local06, local06
LR__0246
	mov	local08, #0
LR__0247
	cmps	local08, local06 wcz
 if_ae	jmp	#LR__0248
	mov	local09, local01
	rdlong	local07, local09
	add	local09, #4
	rdlong	local10, local09
	mov	arg01, #32
	mov	local11, objptr
	mov	objptr, local07
	call	local10
	mov	objptr, local11
	mov	local12, result1
	cmps	local12, #0 wcz
 if_b	mov	result1, local12
 if_b	jmp	#LR__0249
	add	local05, local12
	add	local08, #1
	jmp	#LR__0247
LR__0248
	mov	result1, local05
LR__0249
	mov	ptra, fp
	call	#popregs_
__system___fmtpad_ret
	ret

__system___uitoa
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05 wz
	mov	local06, local01
	mov	local07, #0
 if_ne	mov	local08, #55
 if_e	mov	local08, #87
LR__0250
	mov	muldiva_, local02
	mov	muldivb_, local03
	call	#unsdivide_
	mov	local09, muldiva_
	cmp	local09, #10 wcz
 if_b	add	local09, #48
 if_ae	add	local09, local08
	wrbyte	local09, local06
	mov	muldiva_, local02
	mov	muldivb_, local03
	add	local06, #1
	call	#unsdivide_
	mov	local02, muldivb_ wz
	add	local07, #1
 if_ne	jmp	#LR__0250
	cmp	local07, local04 wcz
 if_b	jmp	#LR__0250
	wrbyte	#0, local06
	mov	arg01, local01
	call	#__system___strrev
	mov	result1, local07
	mov	ptra, fp
	call	#popregs_
__system___uitoa_ret
	ret

__system___gettxfunc
	mov	COUNT_, #3
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0251
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	mov	local03, local02 wz
 if_ne	jmp	#LR__0252
LR__0251
	mov	result1, #0
	jmp	#LR__0253
LR__0252
	mov	arg01, local01
	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
	call	#__system___make_methodptr
LR__0253
	mov	ptra, fp
	call	#popregs_
__system___gettxfunc_ret
	ret

__system___getiolock_0102
	mov	COUNT_, #3
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0254
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	mov	local03, local02 wz
 if_ne	jmp	#LR__0255
LR__0254
	add	ptr___system__dat__, #24
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, #24
	jmp	#LR__0256
LR__0255
	add	local01, #12
	mov	result1, local01
LR__0256
	mov	ptra, fp
	call	#popregs_
__system___getiolock_0102_ret
	ret

__system___closeraw
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #8
	rdlong	local03, local01 wz
	sub	local01, #8
 if_ne	jmp	#LR__0257
	add	ptr___system__dat__, ##604
	wrlong	#5, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0260
LR__0257
	add	local01, #40
	rdlong	local03, local01 wz
	sub	local01, #40
 if_e	jmp	#LR__0258
	add	local01, #40
	rdlong	local03, local01
	sub	local01, #40
	rdlong	local04, local03
	add	local03, #4
	rdlong	local05, local03
	mov	arg01, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
LR__0258
	add	local01, #32
	rdlong	local03, local01 wz
	sub	local01, #32
 if_e	jmp	#LR__0259
	add	local01, #32
	rdlong	local03, local01
	sub	local01, #32
	rdlong	local04, local03
	add	local03, #4
	rdlong	local05, local03
	mov	arg01, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
	mov	local02, result1
LR__0259
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
	mov	result1, local02
LR__0260
	mov	ptra, fp
	call	#popregs_
__system___closeraw_ret
	ret

__system____default_getc
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local02, #8
	rdlong	local03, local02
	sub	local02, #8
	test	local03, #2 wz
 if_e	jmp	#LR__0261
	mov	arg01, local01
	call	#__system____default_flush
LR__0261
	add	local02, #8
	rdlong	local03, local02
	or	local03, #1
	wrlong	local03, local02
	sub	local02, #8
	rdlong	local04, local02 wz
 if_ne	jmp	#LR__0262
	mov	arg01, local01
	call	#__system____default_filbuf
	mov	local04, result1
LR__0262
	cmps	local04, #0 wcz
 if_be	neg	result1, #1
 if_be	jmp	#LR__0263
	sub	local04, #1
	wrlong	local04, local02
	add	local02, #4
	rdlong	local05, local02
	rdbyte	result1, local05
	add	local05, #1
	wrlong	local05, local02
LR__0263
	mov	ptra, fp
	call	#popregs_
__system____default_getc_ret
	ret

__system____default_putc
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	local04, local03
	sub	local03, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0264
	mov	arg01, local02
	call	#__system____default_flush
LR__0264
	add	local03, #8
	rdlong	local04, local03
	or	local04, #2
	wrlong	local04, local03
	sub	local03, #8
	rdlong	local05, local03
	mov	local06, local05
	add	local03, #12
	add	local06, local03
	wrbyte	local01, local06
	and	local01, #255
	add	local05, #1
	sub	local03, #12
	wrlong	local05, local03
	cmp	local05, ##1024 wz
 if_ne	jmp	#LR__0265
	mov	arg01, local02
	call	#__system____default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0265
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system____default_putc_ret
	ret

__system____default_putc_terminal
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	local04, local03
	sub	local03, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0266
	mov	arg01, local02
	call	#__system____default_flush
LR__0266
	add	local03, #8
	rdlong	local04, local03
	or	local04, #2
	wrlong	local04, local03
	sub	local03, #8
	rdlong	local05, local03
	mov	local06, local05
	add	local03, #12
	add	local06, local03
	wrbyte	local01, local06
	and	local01, #255
	sub	local03, #12
	add	local05, #1
	wrlong	local05, local03
	cmp	local01, #10 wz
 if_e	jmp	#LR__0267
	cmp	local05, ##1024 wz
 if_ne	jmp	#LR__0268
LR__0267
	mov	arg01, local02
	call	#__system____default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0268
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system____default_putc_terminal_ret
	ret

__system____default_flush
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	rdlong	local03, local02
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #2 wz
 if_e	jmp	#LR__0271
	cmps	local03, #0 wcz
 if_be	jmp	#LR__0273
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #64 wz
 if_e	jmp	#LR__0270
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #128 wz
 if_e	jmp	#LR__0269
	add	local01, #44
	rdlong	local04, local01
	sub	local01, #44
	rdlong	local05, local04
	add	local04, #4
	rdlong	local06, local04
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	add	local01, #8
	rdlong	local04, local01
	andn	local04, #128
	wrlong	local04, local01
	sub	local01, #8
LR__0269
LR__0270
	add	local01, #20
	rdlong	local04, local01
	sub	local01, #20
	rdlong	local05, local04
	add	local04, #4
	rdlong	local06, local04
	add	local02, #12
	mov	arg02, local02
	sub	local02, #12
	mov	arg01, local01
	mov	arg03, local03
	mov	local08, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local08
	jmp	#LR__0273
LR__0271
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0272
	cmp	local03, #0 wz
 if_e	jmp	#LR__0272
	add	local01, #44
	rdlong	local09, local01
	sub	local01, #44
	mov	local04, local09
	rdlong	local05, local04
	add	local04, #4
	rdlong	local10, local04
	sub	local04, #4
	mov	local06, local10
	mov	local11, local01
	mov	local12, local03
	neg	local12, local12
	mov	local13, local12
	mov	local07, #1
	mov	arg01, local11
	mov	arg02, local13
	mov	arg03, #1
	mov	local08, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local08
	mov	local14, result1
	mov	local15, local14
	cmps	local15, #0 wcz
 if_ae	mov	local15, local03
LR__0272
LR__0273
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system____default_flush_ret
	ret

__system___rxtxioctl_0131
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	cmp	local01, #256 wz
 if_e	jmp	#LR__0274
	cmp	local01, #257 wz
 if_e	jmp	#LR__0275
	jmp	#LR__0276
LR__0274
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	wrlong	result1, local02
	mov	result1, #0
	jmp	#LR__0277
LR__0275
	rdlong	arg01, local02
	add	ptr___system__dat__, #8
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
	mov	result1, #0
	jmp	#LR__0277
LR__0276
	add	ptr___system__dat__, ##604
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
LR__0277
	mov	ptra, fp
	call	#popregs_
__system___rxtxioctl_0131_ret
	ret

__system____dummy_flush_0132
	mov	result1, #0
__system____dummy_flush_0132_ret
	ret

__system___vfswrite
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #2 wz
 if_ne	jmp	#LR__0278
	add	ptr___system__dat__, ##604
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0286
LR__0278
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #64 wz
 if_e	jmp	#LR__0280
	add	local01, #8
	rdlong	local05, local01
	sub	local01, #8
	test	local05, #128 wz
 if_e	jmp	#LR__0279
	add	local01, #44
	rdlong	local05, local01
	sub	local01, #44
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	add	local01, #8
	rdlong	local05, local01
	andn	local05, #128
	wrlong	local05, local01
	sub	local01, #8
LR__0279
LR__0280
	add	local01, #20
	rdlong	local05, local01 wz
	sub	local01, #20
 if_e	jmp	#LR__0282
	add	local01, #20
	rdlong	local05, local01
	sub	local01, #20
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	mov	arg02, local02
	mov	arg03, local03
	mov	arg01, local01
	mov	local08, objptr
	mov	objptr, local06
	call	local07
	mov	objptr, local08
	mov	local09, result1
	cmps	local09, #0 wcz
 if_ae	jmp	#LR__0281
	add	local01, #8
	rdlong	local05, local01
	or	local05, #32
	wrlong	local05, local01
	add	ptr___system__dat__, ##604
	wrlong	local09, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	cmp	local09, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0286
LR__0281
	mov	result1, local09
	jmp	#LR__0286
LR__0282
	add	local01, #24
	rdlong	local10, local01 wz
	sub	local01, #24
 if_ne	jmp	#LR__0283
	add	ptr___system__dat__, ##604
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0286
LR__0283
	mov	local09, #0
LR__0284
	cmp	local03, #0 wcz
 if_be	jmp	#LR__0285
	mov	local05, local10
	rdlong	local06, local05
	add	local05, #4
	rdlong	local07, local05
	rdbyte	arg01, local04
	mov	arg02, local01
	mov	local11, objptr
	mov	objptr, local06
	add	local04, #1
	call	local07
	mov	objptr, local11
	add	local09, result1
	sub	local03, #1
	jmp	#LR__0284
LR__0285
	mov	result1, local09
LR__0286
	mov	ptra, fp
	call	#popregs_
__system___vfswrite_ret
	ret

__system___vfsread
	mov	COUNT_, #14
	call	#pushregs_
	add	ptra, #40
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #20
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #28
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #8
	rdlong	local01, local02
	test	local01, #1 wz
 if_ne	jmp	#LR__0287
	add	ptr___system__dat__, ##604
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0295
LR__0287
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdlong	local03, local01 wz
 if_e	jmp	#LR__0289
	add	fp, #4
	rdlong	local04, fp
	add	local04, #16
	rdlong	local01, local04
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #12
	mov	local05, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local05
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmps	result1, #0 wcz
 if_ae	jmp	#LR__0288
	add	fp, #4
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #8
	rdlong	local03, local04
	or	local03, #32
	add	local01, #8
	wrlong	local03, local01
	add	fp, #12
	rdlong	arg01, fp wz
	sub	fp, #16
	add	ptr___system__dat__, ##604
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, ##604
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0295
LR__0288
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
	jmp	#LR__0295
LR__0289
	add	fp, #4
	rdlong	local01, fp
	add	local01, #28
	rdlong	local03, local01
	add	fp, #20
	wrlong	local03, fp
	rdlong	local01, fp wz
	sub	fp, #24
 if_ne	jmp	#LR__0290
	add	ptr___system__dat__, ##604
	wrlong	#6, ptr___system__dat__
	sub	ptr___system__dat__, ##604
	neg	result1, #1
	jmp	#LR__0295
LR__0290
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #36
	rdlong	local03, local01 wz
 if_e	jmp	#LR__0292
	add	fp, #4
	rdlong	local06, fp
	mov	local04, local06
	add	local04, #36
	rdlong	local07, local04
	mov	local01, local07
	rdlong	local02, local01
	add	local01, #4
	rdlong	local08, local01
	mov	local03, local08
	mov	local09, local06
	mov	local10, local09
	mov	local11, #256
	add	fp, #32
	mov	local12, fp
	mov	local13, local12
	mov	arg01, local10
	mov	arg02, #256
	mov	arg03, local13
	mov	local14, objptr
	mov	objptr, local02
	sub	fp, #36
	call	local03
	mov	objptr, local14
	mov	local05, result1
	add	fp, #16
	wrlong	local05, fp
	rdlong	local02, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0291
	add	fp, #36
	rdlong	local04, fp
	sub	fp, #36
	mov	local03, local04
	and	local03, #2 wz
 if_e	jmp	#LR__0291
	mov	local01, #1
	add	fp, #32
	wrlong	#1, fp
	sub	fp, #32
LR__0291
LR__0292
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
LR__0293
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #0 wcz
 if_be	jmp	#LR__0294
	add	fp, #24
	rdlong	local01, fp
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	sub	fp, #20
	rdlong	arg01, fp
	sub	fp, #4
	mov	local10, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local10
	mov	local09, result1
	add	fp, #20
	wrlong	local09, fp
	sub	fp, #20
	cmps	local09, #0 wcz
 if_b	jmp	#LR__0294
	add	fp, #28
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #8
	rdlong	local06, fp
	wrbyte	local06, local01
	sub	fp, #4
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #4
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	add	fp, #20
	rdlong	local01, fp wz
	sub	fp, #32
 if_e	jmp	#LR__0293
	add	fp, #20
	rdlong	local03, fp
	sub	fp, #20
	cmp	local03, #10 wz
 if_ne	jmp	#LR__0293
LR__0294
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__0295
	mov	ptra, fp
	call	#popregs_
__system___vfsread_ret
	ret

__system____default_filbuf
	mov	COUNT_, #6
	call	#pushregs_
	rdlong	local01, arg01
	add	arg01, #16
	rdlong	local02, arg01
	sub	arg01, #16
	rdlong	local03, local02
	add	local02, #4
	rdlong	local04, local02
	add	local01, #12
	mov	arg02, local01
	sub	local01, #12
	decod	arg03, #10
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
	cmps	local06, #0 wcz
 if_b	neg	result1, #1
 if_b	jmp	#LR__0296
	wrlong	local06, local01
	add	local01, #12
	mov	local02, local01
	sub	local01, #8
	wrlong	local02, local01
	add	local01, #4
	rdlong	local02, local01
	or	local02, #1
	wrlong	local02, local01
	mov	result1, local06
LR__0296
	mov	ptra, fp
	call	#popregs_
__system____default_filbuf_ret
	ret

' 	
' 	FUNCTION pfunc(c as integer) as integer
___strs_cl_pfunc
' 		if (i < 16) then
	add	objptr, #4
	rdlong	_var01, objptr
	sub	objptr, #4
	cmps	_var01, #16 wcz
 if_ae	jmp	#LR__0297
	rdlong	_var02, objptr
	add	objptr, #4
	rdlong	_var03, objptr
	add	_var03, _var02
	wrbyte	arg01, _var03
	rdlong	_var01, objptr
	add	_var01, #1
	wrlong	_var01, objptr
	sub	objptr, #4
' 			p(i) = c
' 			i = i+1
' 			return 1
	mov	result1, #1
	jmp	#___strs_cl_pfunc_ret
LR__0297
' 			return -1
	neg	result1, #1
___strs_cl_pfunc_ret
	ret

__struct__s_vfs_file_t_putchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #24
	rdlong	local01, objptr wz
	sub	objptr, #24
 if_e	mov	result1, #0
 if_e	jmp	#LR__0298
	add	objptr, #24
	rdlong	local01, objptr
	sub	objptr, #24
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	arg02, objptr
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	cmps	result1, #0 wcz
 if_b	mov	local01, #0
 if_ae	mov	local01, #1
	mov	result1, local01
LR__0298
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_putchar_ret
	ret

__struct__s_vfs_file_t_getchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #28
	rdlong	local01, objptr wz
	sub	objptr, #28
 if_e	neg	result1, #1
 if_e	jmp	#LR__0299
'         return getcf(__this);
	add	objptr, #28
	rdlong	local01, objptr
	sub	objptr, #28
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	arg01, objptr
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
LR__0299
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_getchar_ret
	ret

__struct___bas_wrap_sender_tx
	mov	COUNT_, #4
	call	#pushregs_
	rdlong	local01, objptr
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__struct___bas_wrap_sender_tx_ret
	ret

LR__0300
	byte	" !!! corrupted heap??? !!! "
	byte	0
LR__0301
	byte	" !!! out of heap memory !!! "
	byte	0
LR__0302
	byte	" !!! corrupted heap !!! "
	byte	0
LR__0303
	byte	"Basic test"
	byte	0
LR__0304
	byte	"Keyboard key released, scancode "
	byte	0
LR__0305
	byte	"Keyboard key pressed,  scancode "
	byte	0
LR__0306
	byte	", charcode "
	byte	0
LR__0307
	byte	"Keyboard modifiers released"
	byte	0
LR__0308
	byte	"Keyboard modifiers pressed: "
	byte	0
LR__0309
	byte	"Mouse moved, x= "
	byte	0
LR__0310
	byte	" y= "
	byte	0
LR__0311
	byte	"Mouse moved, x= "
	byte	0
LR__0312
	byte	" y= "
	byte	0
LR__0313
	byte	"Mousewheel: "
	byte	0
LR__0314
	byte	"Mouse key: "
	byte	0
LR__0315
	byte	"Mouse clicked"
	byte	0
LR__0316
	byte	"Mouse double clicked"
	byte	0
LR__0317
	byte	"Midi note off, channel "
	byte	0
LR__0318
	byte	", note "
	byte	0
LR__0319
	byte	"Midi note on,  channel "
	byte	0
LR__0320
	byte	", note "
	byte	0
LR__0321
	byte	", velocity "
	byte	0
LR__0322
	byte	"Midi poly aftertouch, channel "
	byte	0
LR__0323
	byte	" note "
	byte	0
LR__0324
	byte	", velocity "
	byte	0
LR__0325
	byte	"Midi control change, channel "
	byte	0
LR__0326
	byte	" controller "
	byte	0
LR__0327
	byte	", value "
	byte	0
LR__0328
	byte	"Midi program change, channel "
	byte	0
LR__0329
	byte	" program "
	byte	0
LR__0330
	byte	"Midi mono aftertouch, channel "
	byte	0
LR__0331
	byte	" value "
	byte	0
LR__0332
	byte	"Midi pitch bend, channel "
	byte	0
LR__0333
	byte	" value "
	byte	0
LR__0334
	byte	"Novation control key "
	byte	0
	alignl
_hng030rm_spin2_dat_
'-' vga_font       file "vgafont.def"
	byte	$00[19]
	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
	byte	$00[11]
	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
	byte	$00[16]
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
	byte	$00[9]
	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
	byte	$18[8]
	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
	byte	$18[6]
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[10]
	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
	byte	$33[6]
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
	byte	$00[6]
	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
	byte	$00[6]
	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18[15]
	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6c[9]
	byte	$00[5]
	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
	byte	$66[6]
	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
	byte	$00[12]
	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
	byte	$ff[9]
	byte	$00[7]
	byte	$ff[9]
	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$ff[7]
	byte	$00[9]
	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
	byte	$00[8]
	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
'-' st_font        file "st4font.def"
	byte	$00[55]
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$18[9]
	byte	$00[7]
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
	byte	$66[5]
	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[8]
	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
	byte	$00[9]
	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[5]
	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00[13]
	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
	byte	$00[8]
	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
	byte	$60[7]
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
	byte	$00[18]
	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
	byte	$30[9]
	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
	byte	$00[7]
	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
'-' twocolors      long  $00000000,$FFFFFF00
	byte	$00, $00, $00, $00, $00, $ff, $ff, $ff
'-' fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
	byte	$00, $00, $00, $00, $00, $80, $80, $80, $00, $00, $00, $ff, $00, $ff, $ff, $ff
'-' vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
	byte	$00[5]
	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
'-' ataripalette   file "ataripalettep2.def"
	byte	$00[5]
	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
'-' '**********************************************************************************
'-' '
'-' '        Timings and colors definitions
'-' '
'-' '**********************************************************************************
'-' 
'-'    'streamer sets for text mode, to add to timings[0..5]
'-' 
'-' 
'-' '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
'-' timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
	byte	$10, $00, $00, $00, $50, $00, $00, $00, $14, $00, $00, $00, $00, $04, $00, $00
	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
'-' 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
'-' timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
	byte	$12, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00, $b0, $03, $00, $00
	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
'-' timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
	byte	$10, $00, $00, $00, $40, $00, $00, $00, $10, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
'-' timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
	byte	$10, $00, $00, $00, $50, $00, $00, $00, $14, $00, $00, $00, $00, $04, $00, $00
	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
'-' timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
	byte	$50, $00, $00, $00, $a0, $00, $00, $00, $54, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
'-' timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
	byte	$50, $00, $00, $00, $32, $00, $00, $00, $50, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
'-' timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
	byte	$18, $00, $00, $00, $30, $00, $00, $00, $18, $00, $00, $00, $30, $03, $00, $00
	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
'-' timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
	byte	$20, $00, $00, $00, $40, $00, $00, $00, $22, $00, $00, $00, $80, $03, $00, $00
	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
'-' 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
'-' vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
	byte	$00, $75, $c7, $97, $27, $47, $f6, $0a, $05, $79, $cb, $9b, $2b, $4b, $ea, $0f
'-' 
'-' hdmi            setq    #9
	byte	$28, $12, $64, $fd
'-'                 rdlong  framebuf,  ptra                  'read pointers
	byte	$00, $df, $06, $fb
'-'            '     setq2   #255
'-'             '    rdlong  $100, paletteptr 
'-'                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
	byte	$00, $26, $6f, $fc
'-'                 setcmod #$100                            'enable HDMI mode
	byte	$3c, $00, $66, $fd
'-'                 mov     ii,#448                          '7 << 6          
	byte	$c0, $f9, $06, $f6
'-'                 add     ii,hbase
	byte	$78, $f9, $02, $f1
'-'                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
	byte	$58, $f8, $62, $fd
'-'                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
	byte	$7b, $0b, $80, $ff, $7c, $01, $0b, $fc
'-' 
'-'                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
	byte	$66, $66, $86, $ff, $1d, $9a, $65, $fd
'-' 
'-' 
'-' ''--------  frame rendering main loop  ---------------------------------------------------
'-' 
'-' p101
'-'                 setq    #10
	byte	$28, $14, $64, $fd
'-'                 rdlong  framebuf,  ptra
	byte	$00, $df, $06, $fb
'-'                 setq    #15
	byte	$28, $1e, $64, $fd
'-'                 rdlong  m_bs,modeptr                     ' read timings
	byte	$74, $9b, $02, $fb
'-'                 rdlong  border,borderptr
	byte	$71, $99, $02, $fb
'-' 
'-'                 add     frames,#1
	byte	$01, $c4, $06, $f1
'-'                 mov     dlptr2,dlptr
	byte	$76, $f5, $02, $f6
'-' 
'-'                 rdlong  cursorx, cursorptr               ' read cursor position
	byte	$73, $c7, $02, $fb
'-'                 getbyte cursory, cursorx,#1              ' y position at byte #1
	byte	$63, $c9, $ea, $f8
'-'                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
	byte	$63, $c3, $f2, $f8
'-'                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
	byte	$ff, $c6, $06, $f5
'-'  '' up porch
'-' 
'-'                 mov     hsync0,sync_000                  '
	byte	$48, $fd, $02, $f6
'-'                 mov     hsync1,sync_001
	byte	$49, $ff, $02, $f6
'-'                 callpa  i_upporch ,#blank
	byte	$37, $a8, $46, $fb
'-'                 wrlong  #0,vblankptr
	byte	$72, $01, $68, $fc
'-'                 
'-'                 testb   paletteptr,#31 wc
	byte	$1f, $ea, $16, $f4
'-'          if_nc  setq2   #255
	byte	$29, $fe, $65, $3d
'-'          if_nc  rdlong  $000, paletteptr                'read palette
	byte	$75, $01, $00, $3b
'-' 
'-' '' cursor blinking
'-' 
'-'                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
	byte	$04, $c4, $0e, $f4
'-'          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
	byte	$81, $c6, $06, $a6
'-' 
'-' '' main screen
'-' 
'-'                 mov linenum,#0
	byte	$00, $be, $06, $f6
'-'                 mov rcnt,#0
	byte	$00, $18, $07, $f6
'-'                 mov rcnt2a,#0
	byte	$00, $1c, $07, $f6
'-' 
'-' 
'-' p301            cmp rcnt,#0 wz
	byte	$00, $18, $0f, $f2
'-'         if_z    jmp #p306
	byte	$18, $00, $90, $ad
'-'                 sub rcnt,#1
	byte	$01, $18, $87, $f1
'-'                 mov dl,rdl
	byte	$90, $f7, $02, $f6
'-'                incmod rcnt2a,rcnt2 wz
	byte	$8d, $1d, $0b, $f7
'-'    if_z        add dl,roffset  
	byte	$8f, $f7, $02, $a1
'-'                 mov rdl,dl
	byte	$7b, $21, $03, $f6
'-'                 jmp #p307          
	byte	$04, $00, $90, $fd
'-'           
'-'                 
'-' p306            rdlong  dl,dlptr2
	byte	$7a, $f7, $02, $fb
'-' p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
	byte	$7b, $fb, $1a, $f6
'-'                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
	byte	$6a, $fa, $7a, $fd
'-'    if_nz_or_nc  jmp     #p303                        
	byte	$34, $00, $90, $7d
'-' 
'-' '' Special entry:
'-' '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
'-' '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
'-' '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
'-' '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
'-' '' todo: set horizontal scroll (if needed)
'-' 
'-'                 shl framebuf2,#2
	byte	$02, $fa, $66, $f0
'-'                 getnib dlc,framebuf2,#0
	byte	$7d, $23, $43, $f8
'-'                 cmp dlc,#%100 wz
	byte	$04, $22, $0f, $f2
'-'   
'-'                 
'-'                 add dlptr2,#4
	byte	$04, $f4, $06, $f1
'-'                              if_nz  jmp #p301  '' now ignore unknown instruction 
	byte	$bc, $ff, $9f, $5d
'-'                  rdlong rdl,dlptr2
	byte	$7a, $21, $03, $fb
'-'                  getword rcnt,framebuf2,#1 
	byte	$7d, $19, $3b, $f9
'-'                  shr rcnt,#4
	byte	$04, $18, $47, $f0
'-'              
'-'                  getnib rcnt2,framebuf2,#4
	byte	$7d, $1b, $63, $f8
'-'                  getword roffset,framebuf2,#0
	byte	$7d, $1f, $33, $f9
'-'                 
'-'                  shr roffset,#4
	byte	$04, $1e, $47, $f0
'-'                  shl roffset,#12
	byte	$0c, $1e, $67, $f0
'-'   
'-'                  jmp #p301
	byte	$9c, $ff, $9f, $fd
'-'                  
'-'                  
'-' p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
'-'                 shr     framebuf2,#12
	byte	$0c, $fa, $46, $f0
'-'                 shl     framebuf2,#2
	byte	$02, $fa, $66, $f0
'-' 
'-'                 getbyte t1,dl,#0
	byte	$7b, $03, $e3, $f8
'-'                 cmp     t1,#0 wz
	byte	$00, $02, $0f, $f2
'-'     if_z        jmp     #borderline
	byte	$34, $00, $90, $ad
'-' 
'-'                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
	byte	$00, $f6, $16, $f4
'-'           if_c   jmp     #textline
	byte	$50, $00, $90, $cd
'-'           if_nc  jmp     #graphline
	byte	$50, $02, $90, $3d
'-' '
'-' p302            add     linenum,#1
	byte	$01, $be, $06, $f1
'-'                 add     dlptr2,#4
	byte	$04, $f4, $06, $f1
'-'                 cmp     linenum,i_totalvis  wz
	byte	$5c, $bf, $0a, $f2
'-'          if_nz  jmp     #p301
	byte	$6c, $ff, $9f, $5d
'-' 
'-' p112            wrlong  #1,vblankptr
	byte	$72, $03, $68, $fc
'-'                 callpa  i_downporch ,#blank             'bottom blanks
	byte	$07, $ac, $46, $fb
'-' 
'-'                 mov     hsync0,sync_222                 'vsync on
	byte	$4a, $fd, $02, $f6
'-'                 mov     hsync1,sync_223
	byte	$4b, $ff, $02, $f6
'-'                 callpa  i_vsync,#blank                  'vertical sync blanks
	byte	$04, $aa, $46, $fb
'-'                 jmp     #p101
	byte	$f8, $fe, $9f, $fd
'-' 
'-' '' ---------------  END of frame rendering loop -------------------------------------------
'-' 
'-' 
'-' borderline      call    #hsync                      ' make a border
	byte	$14, $00, $b0, $fd
'-'                 xcont   m_vi,border
	byte	$4c, $a1, $c2, $fc
'-'                 jmp     #p302
	byte	$cc, $ff, $9f, $fd
'-' 
'-' 
'-' blank           call    #hsync                          'blank lines
	byte	$08, $00, $b0, $fd
'-'                 xcont   m_vi,hsync0
	byte	$7e, $a1, $c2, $fc
'-'         _ret_   djnz    pa,#blank
	byte	$fd, $ed, $6f, $0b
'-' 
'-' hsync           xcont   m_bs,hsync0                     'horizontal sync
	byte	$7e, $9b, $c2, $fc
'-'                 xzero   m_sn,hsync1
	byte	$7f, $9d, $b2, $fc
'-'         _ret_   xcont   m_bv,hsync0
	byte	$7e, $9f, $c2, $0c
'-' 
'-' 
'-' 
'-' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
'-'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
'-'   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
'-' 
'-' '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
'-' 
'-' textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
	byte	$63, $cd, $02, $f6
'-' 
'-'                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
	byte	$7b, $01, $53, $f8
'-'                 getnib  zoom, dl,#3
	byte	$7b, $17, $5b, $f8
'-'                 and             zoom, #3
	byte	$03, $16, $07, $f5
'-' 
'-' 
'-' 
'-'                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
	byte	$7b, $bd, $02, $f6
'-'                 shr     linestart,#2                    ' scanline to char line
	byte	$02, $bc, $46, $f0
'-'                 and     linestart,#63
	byte	$3f, $bc, $06, $f5
'-'                 cmp     linestart,cursory wz            ' if the cursor is not here
	byte	$64, $bd, $0a, $f2
'-'           if_nz mov     cursorpos2,#129                 ' move it out of the screen
	byte	$81, $cc, $06, $56
'-' 
'-'                 call    #hsync                          ' now call hsync to gain some time between xconts
	byte	$cc, $ff, $bf, $fd
'-' 
'-'                        ' if fontline =0, get a border color
'-' 
'-' p102            getword t1,m_border,#0
	byte	$51, $03, $33, $f9
'-'                 cmp     t1, #0 wz
	byte	$00, $02, $0f, $f2
'-'           if_nz xcont   m_border,border                 ' display a left border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
	byte	$61, $01, $1b, $f2
'-'           if_c  mov     cursorpos,#129                  ' move it out of the screen
	byte	$81, $ca, $06, $c6
'-'          if_nc  mov     cursorpos,cursorpos2
	byte	$66, $cb, $02, $36
'-'                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
	byte	$01, $ca, $06, $f1
'-'                 mov     t2,fontbuf                      ' font definition pointer
	byte	$70, $05, $03, $f6
'-'                 add     t2,fontline                     ' add a current font line
	byte	$80, $05, $03, $f1
'-'                 mov m_lut2, m_lut1
	byte	$52, $bb, $02, $f6
'-'                 add m_lut2, lutt1
	byte	$6a, $bb, $02, $f1
'-'                 mov cpl2,i_cpl
	byte	$58, $0f, $03, $f6
'-' 
'-'                cmp zoom,#2 wz
	byte	$02, $16, $0f, $f2
'-'           if_z jmp #p420
	byte	$e4, $00, $90, $ad
'-'                cmp zoom,#1 wz
	byte	$01, $16, $0f, $f2
'-'           if_z jmp #p410
	byte	$64, $00, $90, $ad
'-'                 cmp zoom,#0 wz
	byte	$00, $16, $0f, $f2
'-'           if_z jmp #p400
	byte	$04, $00, $90, $ad
'-'                jmp #p430
	byte	$50, $01, $90, $fd
'-' 
'-'                    '
'-'  ''---------------------------------------------------------------------------------------------------------
'-'  p400                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p400
	byte	$eb, $0f, $6f, $fb
'-'  p401                   jmp    #p103
	byte	$28, $01, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-'  p410                   shr cpl2,#1
	byte	$01, $0e, $47, $f0
'-' 
'-' ''---------------------------------------------------------------------------------------------------------
'-'  p412                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-' 
'-'                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
	byte	$81, $07, $4b, $f8
'-'                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
	byte	$81, $03, $43, $f8
'-'                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
	byte	$63, $02, $63, $fd
'-'                         mul t1,#3
	byte	$03, $02, $07, $fa
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-'                         mergew t3
	byte	$63, $06, $63, $fd
'-'                         mul t3,#3
	byte	$03, $06, $07, $fa
'-'                         xcont m_lut2,t3
	byte	$83, $bb, $c2, $fc
'-' 
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-' 
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p412
	byte	$e4, $0f, $6f, $fb
'-'  p411                   jmp    #p103
	byte	$b0, $00, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-'  p420                   shr cpl2,#2
	byte	$02, $0e, $47, $f0
'-' 
'-' ''---------------------------------------------------------------------------------------
'-'  p422                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-'                         getbyte char,char, #0           ' word #0 - char code                       '4
	byte	$88, $11, $e3, $f8
'-'                         add     framebuf2,#4            ' point to the next long                    '5
	byte	$04, $fa, $06, $f1
'-'                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
	byte	$04, $10, $67, $f0
'-'                         add     char,t2                 ' add this to font/line pointer             '7
	byte	$82, $11, $03, $f1
'-'                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
	byte	$88, $03, $c3, $fa
'-'                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
	byte	$01, $ca, $8e, $f1
'-'                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
	byte	$ff, $02, $67, $a5
'-' 
'-'                         mergeb t1
	byte	$61, $02, $63, $fd
'-'                         getword t3,t1,#1
	byte	$81, $07, $3b, $f9
'-'                         mul t1,#15
	byte	$0f, $02, $07, $fa
'-'                         xcont m_lut2,t1
	byte	$81, $bb, $c2, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         getbyte t4,t1,#1        '
	byte	$81, $09, $eb, $f8
'-'                         xcont m_lut2,t4                                                                                                           '
	byte	$84, $bb, $c2, $fc
'-' 
'-'                         mul t3,#15
	byte	$0f, $06, $07, $fa
'-'                         xcont m_lut2,t3
	byte	$83, $bb, $c2, $fc
'-' 
'-'                         getbyte t5,t3,#1
	byte	$83, $0b, $eb, $f8
'-'                         xcont m_lut2, t5
	byte	$85, $bb, $c2, $fc
'-'                         bitnot  m_lut2,#16                                                          '19
	byte	$10, $ba, $e6, $f4
'-'                         bitnot  m_lut1,#16                                                          '19
	byte	$10, $a4, $e6, $f4
'-' 
'-'                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
	byte	$20, $c0, $66, $f5
'-' 
'-'                         djnz   cpl2,#p422
	byte	$e2, $0f, $6f, $fb
'-'  p421                   jmp    #p103
	byte	$30, $00, $90, $fd
'-' 
'-' '--------------------------------------------------------------------------------------------------------------
'-' 
'-'  p430                   rdlong  char,framebuf2          ' read a long char                          '1
	byte	$7d, $11, $03, $fb
'-'                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
	byte	$88, $13, $f3, $f8
'-'                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
	byte	$88, $15, $fb, $f8
'-' 
'-'                         xcont m_lut2,#0
	byte	$00, $ba, $c6, $fc
'-' 
'-'                         rdlut   t5,backcolor            ' read a background color from palette      '13
	byte	$89, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
	byte	$60, $0b, $33, $fc
'-'                         add     lutaddr,#1                                                          '15
	byte	$01, $c0, $06, $f1
'-'                         rdlut   t5,charcolor            ' the same for the foreground               '16
	byte	$8a, $0b, $a3, $fa
'-'                         wrlut   t5,lutaddr                                                          '17
	byte	$60, $0b, $33, $fc
'-'                         sub     lutaddr,#1
	byte	$01, $c0, $86, $f1
'-' 
'-'                         djnz   cpl2,#p430
	byte	$f5, $0f, $6f, $fb
'-'  p431                   jmp    #p103
	byte	$00, $00, $90, $fd
'-' 
'-' ''------------------------------------------------------------------------------------------------------------
'-' 
'-' 
'-' 
'-' p103            getword  mb2,m_border,#0
	byte	$51, $25, $33, $f9
'-'                 cmp      mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'                 if_nz    xcont   m_border,border            'display a right border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 jmp #p302
	byte	$b0, $fd, $9f, $fd
'-' 
'-' '' -------------------------------------- END of text line ---------------------------------
'-' 
'-'   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
'-' 
'-' graphline       call    #hsync                          ' now call hsync to gain some time between xconts
	byte	$ec, $fd, $bf, $fd
'-' 
'-' 
'-' p202            getword mb2,m_border,#0
	byte	$51, $25, $33, $f9
'-'                 cmp     mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'           if_nz xcont   m_border,border                 ' display a left border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-' '----------------------------------------- display pixels
'-' 
'-'                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
	byte	$52, $bb, $02, $f6
'-'                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
	byte	$58, $0f, $03, $f6
'-' 
'-'                 getnib  zoom, dl,#3
	byte	$7b, $17, $5b, $f8
'-'                 and             zoom, #3                        ' get a horizontal zoom for the line
	byte	$03, $16, $07, $f5
'-' 
'-'                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
	byte	$7b, $bd, $02, $f6
'-'                 and     colordepth,#12
	byte	$0c, $bc, $06, $f5
'-' 
'-'                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
	byte	$00, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg1
	byte	$6b, $bb, $02, $a1
'-'           if_z  jmp     #p240
	byte	$64, $00, $90, $ad
'-' 
'-'                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
	byte	$04, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg2
	byte	$6c, $bb, $02, $a1
'-'           if_z  jmp     #p250
	byte	$98, $00, $90, $ad
'-' 
'-'                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
	byte	$08, $bc, $0e, $f2
'-'           if_z  add     m_lut2,lutg4
	byte	$6d, $bb, $02, $a1
'-'           if_z  jmp     #p260
	byte	$fc, $00, $90, $ad
'-' 
'-'                 add m_lut2,lutg8                        ' 8 bpp modes
	byte	$6e, $bb, $02, $f1
'-' 
'-' '' --- 8 bit color modes
'-' 
'-'                 cmp zoom, #%00 wz   '256 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
	byte	$50, $01, $90, $ad
'-' 
'-'                 cmp zoom, #%01 wz   '256 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'                 if_z mov skippattern,#%101010
	byte	$2a, $0c, $07, $a6
'-'        
'-'  '  
'-'                 cmp zoom, #%10 wz   '256 colors, zoom x4
	byte	$02, $16, $0f, $f2
'-'                 if_z mov skippattern,#%100101
	byte	$25, $0c, $07, $a6
'-'     
'-'  
'-'                 if_nz mov skippattern,#%000101
	byte	$05, $0c, $07, $56
'-'                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
	byte	$01, $0e, $47, $50
'-'         
'-' 
'-'         
'-' p235               rdlong  char,framebuf2
	byte	$7d, $11, $03, $fb
'-'                    skipf skippattern
	byte	$32, $0c, $63, $fd
'-'                    add     framebuf2,#2             '0 1 1
	byte	$02, $fa, $06, $f1
'-'                    add     framebuf2,#1             '1 0 0
	byte	$01, $fa, $06, $f1
'-'                    movbyts char,#%01010000          '0 1 1
	byte	$50, $10, $ff, $f9
'-'                    movbyts char,#%00000000          '1 0 0
	byte	$00, $10, $ff, $f9
'-'                    xcont   m_lut2,char              '0 0 0
	byte	$88, $bb, $c2, $fc
'-'                    xcont   m_lut2,char              '1 1 0
	byte	$88, $bb, $c2, $fc
'-'                    djnz    cpl2,#p235
	byte	$f7, $0f, $6f, $fb
'-' 
'-'                jmp    #p203
	byte	$20, $01, $90, $fd
'-'                   
'-' 
'-' 
'-' '' --- 1 bit color modes
'-' 
'-' p240          cmp zoom, #%00 wz     '2 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
	byte	$08, $01, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '2 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   mov skippattern,#%10011
	byte	$13, $0c, $07, $a6
'-'        if_nz  mov skippattern,#%01000
	byte	$08, $0c, $07, $56
'-' 
'-' 
'-' p241               rdword  char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                    movbyts char,#%01000100
	byte	$44, $10, $ff, $f9
'-'                    mergew  char
	byte	$63, $10, $63, $fd
'-'                    skipf skippattern
	byte	$32, $0c, $63, $fd
'-'                    movbyts char,#%01000100         ' 1 0
	byte	$44, $10, $ff, $f9
'-'                    mergew  char                    ' 1 0
	byte	$63, $10, $63, $fd
'-'                    xcont   m_lut2,char             ' 0 0
	byte	$88, $bb, $c2, $fc
'-'                    add     framebuf2,#2                    ' 0 1
	byte	$02, $fa, $06, $f1
'-'                    add     framebuf2,#1                ' 1 0
	byte	$01, $fa, $06, $f1
'-'                    djnz   cpl2,#p241
	byte	$f6, $0f, $6f, $fb
'-' 
'-' 
'-'                jmp    #p203
	byte	$e0, $00, $90, $fd
'-' 
'-' '' --- 2 bit color modes
'-' 
'-' p250          cmp zoom, #%00 wz     '4 colors, zoom x1
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251
	byte	$c8, $00, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '4 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   jmp #p252
	byte	$30, $00, $90, $ad
'-' 
'-' 
'-' p254               rdbyte char,framebuf2
	byte	$7d, $11, $c3, $fa
'-'                    mov  t5,#4
	byte	$04, $0a, $07, $f6
'-' p255               shl  char,#2
	byte	$02, $10, $67, $f0
'-'                    getnib  t1,char,#2
	byte	$88, $03, $53, $f8
'-'                    and     t1,#3
	byte	$03, $02, $07, $f5
'-'                    mul     t1,#$55
	byte	$55, $02, $07, $fa
'-'                    rolbyte  t2,t1,#0
	byte	$81, $05, $03, $f9
'-'                    djnz    t5,#p255
	byte	$fa, $0b, $6f, $fb
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#1
	byte	$01, $fa, $06, $f1
'-'                    djnz    cpl2,#p254
	byte	$f5, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$a0, $00, $90, $fd
'-' 
'-' p252               rdword char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                    mov  t5,#8
	byte	$08, $0a, $07, $f6
'-' p253               shl  char,#2
	byte	$02, $10, $67, $f0
'-'                    getnib  t1,char,#4
	byte	$88, $03, $63, $f8
'-'                    and     t1,#3
	byte	$03, $02, $07, $f5
'-'                    mul     t1,#5
	byte	$05, $02, $07, $fa
'-'                    rolnib  t2,t1,#0
	byte	$81, $05, $83, $f8
'-'                    djnz    t5,#p253
	byte	$fa, $0b, $6f, $fb
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#2
	byte	$02, $fa, $06, $f1
'-'                    djnz    cpl2,#p252
	byte	$f5, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$70, $00, $90, $fd
'-' 
'-' '' ------ 4 bit color modes
'-' 
'-' p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
	byte	$00, $16, $0f, $f2
'-'        if_z   jmp #p251
	byte	$58, $00, $90, $ad
'-' 
'-'               cmp zoom, #%01 wz     '4 colors, zoom x2
	byte	$01, $16, $0f, $f2
'-'        if_z   jmp #p262
	byte	$2c, $00, $90, $ad
'-' 
'-' 
'-' p263               rdbyte char,framebuf2
	byte	$7d, $11, $c3, $fa
'-'                            rep #5,#2
	byte	$02, $0a, $dc, $fc
'-'                              rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                                  rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                              rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                                  rolnib t2,char,#1
	byte	$88, $05, $8b, $f8
'-'                              shl char,#4
	byte	$04, $10, $67, $f0
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#1
	byte	$01, $fa, $06, $f1
'-'                    djnz    cpl2,#p263
	byte	$f6, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$34, $00, $90, $fd
'-' 
'-' p262               rdword  char,framebuf2
	byte	$7d, $11, $e3, $fa
'-'                            rep #3,#4
	byte	$04, $06, $dc, $fc
'-'                              rolnib t2,char,#3
	byte	$88, $05, $9b, $f8
'-'                                  rolnib t2,char,#3
	byte	$88, $05, $9b, $f8
'-'                              shl char,#4
	byte	$04, $10, $67, $f0
'-'                    xcont   m_lut2,t2
	byte	$82, $bb, $c2, $fc
'-'                    add     framebuf2,#2
	byte	$02, $fa, $06, $f1
'-'                    djnz    cpl2,#p262
	byte	$f8, $0f, $6f, $fb
'-'                    jmp     #p203
	byte	$10, $00, $90, $fd
'-' 
'-' ''---------- all color modes without zoom
'-' 
'-' p251               rep  #3,cpl2
	byte	$87, $07, $d8, $fc
'-'                    rdlong  char,framebuf2
	byte	$7d, $11, $03, $fb
'-'                    add     framebuf2,#4
	byte	$04, $fa, $06, $f1
'-'                    xcont   m_lut2,char
	byte	$88, $bb, $c2, $fc
'-'           
'-'  ''-----------------------------------------------------------------------------------------
'-' p203           ' getword  mb2,m_border,#0
'-'                 cmp      mb2, #0 wz
	byte	$00, $24, $0f, $f2
'-'                 if_nz    xcont   m_border,border            'display a right border if exists
	byte	$4c, $a3, $c2, $5c
'-' 
'-'                 jmp #p302
	byte	$ec, $fb, $9f, $fd
'-' 
'-' '' -------------------------------------- END of graph  line ---------------------------------
'-' 
'-' '' consts and vars
'-' 
'-' sync_000        long    %1101010100_1101010100_1101010100_10    '
	byte	$52, $4d, $35, $d5
'-' sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
	byte	$ae, $42, $35, $d5
'-' sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
	byte	$52, $45, $15, $55
'-' sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
	byte	$ae, $4a, $15, $55
'-' 
'-' border          long    %00000000_00011010_00101100_00000000
	byte	$00, $2c, $1a, $00
'-' 
'-' '------ these longs will be set by setmode function
'-' 
'-' m_bs            long    0        'blanks before sync
	byte	$00, $00, $00, $00
'-' m_sn            long    0        'sync
	byte	$00, $00, $00, $00
'-' m_bv            long    0        'blanks before visible
	byte	$00, $00, $00, $00
'-' m_vi            long    0        'visible pixels #
	byte	$00, $00, $00, $00
'-' m_border        long    0        'left/right borders
	byte	$00, $00, $00, $00
'-' m_lut1          long    0        'characters
	byte	$00, $00, $00, $00
'-' i_vborder       long    0        'up/down borders
	byte	$00, $00, $00, $00
'-' i_upporch       long    0        'up porch lines
	byte	$00, $00, $00, $00
'-' i_vsync         long    0        'vsync lines
	byte	$00, $00, $00, $00
'-' i_downporch     long    0        'down porch lines
	byte	$00, $00, $00, $00
'-' i_modenum       long    0        'mode #
	byte	$00, $00, $00, $00
'-' i_cpl           long    0        'chars/longs per line
	byte	$00, $00, $00, $00
'-' i_lines         long    0        'scanlines #
	byte	$00, $00, $00, $00
'-' i_clock         long    0
	byte	$00, $00, $00, $00
'-' i_hubset        long    0
	byte	$00, $00, $00, $00
'-' i_totalvis      long    0
	byte	$00, $00, $00, $00
'-' 
'-' '-------------------------------------
'-' 
'-' m_lut2          long    0
	byte	$00, $00, $00, $00
'-' 
'-' colordepth
'-' linestart       long    0
	byte	$00, $00, $00, $00
'-' linenum         long    0
	byte	$00, $00, $00, $00
'-' lutaddr         long    256
	byte	$00, $01, $00, $00
'-' 
'-' cursorsh        long    14
	byte	$0e, $00, $00, $00
'-' frames          long    0
	byte	$00, $00, $00, $00
'-' cursorx         long    0
	byte	$00, $00, $00, $00
'-' cursory         long    0
	byte	$00, $00, $00, $00
'-' cursorpos       long    0
	byte	$00, $00, $00, $00
'-' cursorpos2      long    0
	byte	$00, $00, $00, $00
'-' fontstart       long    0
	byte	$00, $00, $00, $00
'-' border2         long 0
	byte	$00, $00, $00, $00
'-' lutiv           long $70810000
	byte	$00, $00, $81, $70
'-' lutt1           long $00880000
	byte	$00, $00, $88, $00
'-' lutg1           long $00800000
	byte	$00, $00, $80, $00
'-' lutg2           long $10800000
	byte	$00, $00, $80, $10
'-' lutg4           long $20800000
	byte	$00, $00, $80, $20
'-' lutg8           long $30800000
	byte	$00, $00, $80, $30
'-' framebuf        long 0
	byte	$00, $00, $00, $00
'-' fontbuf         long 0
	byte	$00, $00, $00, $00
'-' borderptr       long 0
	byte	$00, $00, $00, $00
'-' vblankptr       long 0
	byte	$00, $00, $00, $00
'-' cursorptr       long 0
	byte	$00, $00, $00, $00
'-' modeptr         long 0
	byte	$00, $00, $00, $00
'-' paletteptr      long 0
	byte	$00, $00, $00, $00
'-' dlptr           long 0
	byte	$00, $00, $00, $00
'-' fontnumptr      res     1
'-' fontnumptr      res     1
'-' hbase           res     1
'-' hbase           res     1
'-' borderptr2      res     1
'-' borderptr2      res     1
'-' dlptr2 res 1
'-' dlptr2 res 1
'-' dl              res 1
'-' dl              res 1
'-' ii              res     1
'-' ii              res     1
'-' framebuf2       res     1
'-' framebuf2       res     1
'-' hsync0          res     1
'-' hsync0          res     1
'-' hsync1          res     1
'-' hsync1          res     1
'-' fontline        res     1
'-' fontline        res     1
'-' t1              res     1
'-' t1              res     1
'-' t2              res     1
'-' t2              res     1
'-' t3 res 1
'-' t3 res 1
'-' t4 res 1
'-' t4 res 1
'-' t5 res 1
'-' t5 res 1
'-' skippattern res 1
'-' skippattern res 1
'-' cpl2 res 1
'-' cpl2 res 1
'-' char            res     1
'-' char            res     1
'-' backcolor       res     1
'-' backcolor       res     1
'-' charcolor       res     1
'-' charcolor       res     1
'-' zoom res 1
'-' zoom res 1
'-' rcnt long 0 'dl repeat count
	byte	$00, $00, $00, $00
'-' rcnt2 long 0
	byte	$00, $00, $00, $00
'-' rcnt2a long 0
	byte	$00, $00, $00, $00
'-' roffset long 0
	byte	$00, $00, $00, $00
'-' rdl long 0  'dl repeat line
	byte	$00, $00, $00, $00
'-' dlc long 0 'dl command
	byte	$00, $00, $00, $00
'-' mb2 long 0
	byte	$00, $00, $00, $00
'-' aend             long 0
	byte	$00, $00, $00, $00
'-'                 fit     496                     '
	alignl
__system__dat_
	byte	$00[8]
	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[12]
	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	long	@@@__system__dat_ + 508
	long	@@@__system__dat_ + 516
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 524
	long	@@@__system__dat_ + 532
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 540
	long	@@@__system__dat_ + 548
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 556
	long	@@@__system__dat_ + 564
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 572
	long	@@@__system__dat_ + 580
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 588
	long	@@@__system__dat_ + 596
	byte	$00[344]
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0131
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0132
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0131
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0132
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_0131
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_0132
	byte	$00, $00, $00, $00
__heap_base
	long	0[1026]
objmem
	long	0[296]
stackspace
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
_var04
	res	1
_var05
	res	1
_var06
	res	1
_var07
	res	1
_var08
	res	1
_var09
	res	1
_var10
	res	1
_var11
	res	1
_var12
	res	1
_var13
	res	1
_var14
	res	1
_var15
	res	1
_var16
	res	1
_var17
	res	1
_var18
	res	1
_var19
	res	1
_var20
	res	1
_var21
	res	1
_var22
	res	1
_var23
	res	1
_var24
	res	1
_var25
	res	1
_var26
	res	1
_var27
	res	1
_var28
	res	1
_var29
	res	1
_var30
	res	1
_var31
	res	1
_var32
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
arg05
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
local05
	res	1
local06
	res	1
local07
	res	1
local08
	res	1
local09
	res	1
local10
	res	1
local11
	res	1
local12
	res	1
local13
	res	1
local14
	res	1
local15
	res	1
local16
	res	1
local17
	res	1
local18
	res	1
local19
	res	1
local20
	res	1
local21
	res	1
local22
	res	1
local23
	res	1
local24
	res	1
local25
	res	1
local26
	res	1
local27
	res	1
local28
	res	1
local29
	res	1
local30
	res	1
local31
	res	1
local32
	res	1
local33
	res	1
local34
	res	1
local35
	res	1
local36
	res	1
local37
	res	1
local38
	res	1
local39
	res	1
local40
	res	1
local41
	res	1
local42
	res	1
muldiva_
	res	1
muldivb_
	res	1
	fit	480
