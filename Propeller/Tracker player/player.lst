00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/player.p2asm"
00000                 | con
00000                 | 	_clkfreq = 319215686
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 2A 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 04 00 00 FF 
00414 004 14 F1 07 F1 | 	add	ptra, ##2324
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 96 E5 80 FF 
00428 009 00 F0 67 FD | 	hubset	##30092792
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 96 E5 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##30092795
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 6C 83 89 FF 
00448 011 14 6C 6D FC | 	wrlong	##319215798, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5C 62 FD | 	cogid	arg01
00614 084 03 5C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 2B 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 5F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 61 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 63 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 2A 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 60 56 F0 |         shr	arg03, #1 wc
00688 0a1 2E 5F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 5E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 60 56 F0 |         shr	arg03, #1 wc
00698 0a5 2E 5F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 2F 5F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2E 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 60 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 30 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 5E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 6B 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 6B 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 86 0B 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0C 63 FD |        getqx   muldivb_
00740 0cf 19 0A 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 85 0B 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 86 0D 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 85 0B 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 86 0D 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 2A 06 F6 |     mov result1, #0
00778 0dd 00 2C 06 F6 |     mov result2, #0
0077c 0de 2E 07 02 F6 |     mov abortchain, arg01
00780 0df 2E 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 5C 06 F1 |     add arg01, #4
00788 0e1 2E F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 5C 06 F1 |     add arg01, #4
00790 0e3 2E 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 5C 06 F1 |     add arg01, #4
00798 0e5 2E B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 2F 5D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 2E F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 5C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 5C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 2F 2B 02 F6 |     mov result1, arg02
007d4 0f4 01 2C 06 F6 |     mov result2, #1
007d8 0f5 2E 5F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 5C 06 F1 |     add arg01, #4
007e0 0f7 2E F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 5C 06 F1 |     add arg01, #4
007e8 0f9 2E 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 5C 06 F1 |     add arg01, #4
007f0 0fb 2E B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 5C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 60 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 BC D5 01 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 C4 E5 01 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 24 80 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 6C 7F 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a 5C D3 01 00 | 	long	@__system__dat_
00830 10b             | ptr__audio014_spin2_dat__
00830 10b 38 C4 01 00 | 	long	@_audio014_spin2_dat_
00834 10c             | ptr__dat__
00834 10c 48 81 00 00 | 	long	@_dat_
00838 10d             | ptr__hng030rm_spin2_dat__
00838 10d B0 8E 01 00 | 	long	@_hng030rm_spin2_dat_
0083c 10e             | ptr__hng030rm_spin2_putchar_
0083c 10e 68 24 00 00 | 	long	@_hng030rm_spin2_putchar
00840 10f             | ptr__hng030rm_spin2_putpixel1_
00840 10f 3C 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
00844 110             | ptr__hng030rm_spin2_putpixel2_
00844 110 24 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00848 111             | ptr__hng030rm_spin2_putpixel4_
00848 111 FC 20 00 00 | 	long	@_hng030rm_spin2_putpixel4
0084c 112             | ptr__hng030rm_spin2_putpixel8_
0084c 112 D4 21 00 00 | 	long	@_hng030rm_spin2_putpixel8
00850 113             | ptr__retrocog_spin2_serialcog_
00850 113 64 33 00 00 | 	long	@_retrocog_spin2_serialcog
00854 114             | ptr__trackerplayer_spin2_dat__
00854 114 14 B3 01 00 | 	long	@_trackerplayer_spin2_dat_
00858 115             | result1
00858 115 00 00 00 00 | 	long	0
0085c 116             | result2
0085c 116 00 00 00 00 | 	long	0
00860 117             | result3
00860 117 00 00 00 00 | 	long	0
00864 118             | COG_BSS_START
00864 118             | 	fit	480
00864                 | 	orgh
00864                 | hubentry
00864                 | 
00864                 | ' 
00864                 | ' function addr(byref v as any)
00864                 | _addr
00864     00 5A 05 F6 | 	mov	COUNT_, #0
00868     B0 00 A0 FD | 	call	#pushregs_
0086c     08 F0 07 F1 | 	add	ptra, #8
00870     04 5E 05 F1 | 	add	fp, #4
00874     AF 5C 62 FC | 	wrlong	arg01, fp
00878                 | ' 
00878                 | ' return(cast(ulong,@v))
00878     2E 2B 02 F6 | 	mov	result1, arg01
0087c     04 5E 85 F1 | 	sub	fp, #4
00880     AF F0 03 F6 | 	mov	ptra, fp
00884     BF 00 A0 FD | 	call	#popregs_
00888                 | _addr_ret
00888     2D 00 64 FD | 	ret
0088c                 | 
0088c                 | _program
0088c     36 5A 05 F6 | 	mov	COUNT_, #54
00890     B0 00 A0 FD | 	call	#pushregs_
00894     EC 0E 06 F1 | 	add	objptr, #236
00898                 | ' 
00898                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00898     07 6B 02 F6 | 	mov	local01, objptr
0089c     01 00 00 FF 
008a0     40 0F 06 F1 | 	add	objptr, ##832
008a4     07 6D 02 F6 | 	mov	local02, objptr
008a8     36 6B 62 FC | 	wrlong	local01, local02
008ac     04 6C 06 F1 | 	add	local02, #4
008b0     36 27 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
008b4     10 5C 06 F6 | 	mov	arg01, #16
008b8     28 0E 62 FD | 	setq	objptr
008bc     04 5D F2 FC | 	coginit	arg01, entryptr__ wc
008c0     01 5C 66 C6 |  if_b	neg	arg01, #1
008c4     2E 2B 02 F6 | 	mov	result1, arg01
008c8                 | ' return cog
008c8     00 0F 06 F1 | 	add	objptr, #256
008cc     07 2B 62 FC | 	wrlong	result1, objptr
008d0                 | ' c=rm.start()
008d0                 | ' return c
008d0     40 6E 06 F6 | 	mov	local03, #64
008d4     02 00 00 FF 
008d8     00 0F 86 F1 | 	sub	objptr, ##1280
008dc     07 71 02 F6 | 	mov	local04, objptr
008e0                 | ' 
008e0                 | ' ' initialize pointers and variables
008e0                 | ' 
008e0                 | ' border_ptr:=@bordercolor
008e0     24 0E 86 F1 | 	sub	objptr, #36
008e4     07 71 62 FC | 	wrlong	local04, objptr
008e8     08 00 00 FF 
008ec     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
008f0                 | ' font_ptr:=@st_font
008f0     04 0E 86 F1 | 	sub	objptr, #4
008f4     07 1B 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
008f8                 | ' hdmibase:=base
008f8     20 0E 06 F1 | 	add	objptr, #32
008fc     07 01 68 FC | 	wrlong	#0, objptr
00900     24 0E 86 F1 | 	sub	objptr, #36
00904     0F 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00908                 | ' p1:=@putpixel1
00908     07 5D 02 F6 | 	mov	arg01, objptr
0090c     08 00 00 FF 
00910     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
00914     58 55 B0 FD | 	call	#__system___make_methodptr
00918     15 73 02 F6 | 	mov	local05, result1
0091c     DC 0E 06 F1 | 	add	objptr, #220
00920     07 73 62 FC | 	wrlong	local05, objptr
00924     DC 0E 86 F1 | 	sub	objptr, #220
00928     10 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
0092c                 | ' p2:=@putpixel2
0092c     07 5D 02 F6 | 	mov	arg01, objptr
00930     3C 55 B0 FD | 	call	#__system___make_methodptr
00934     15 73 02 F6 | 	mov	local05, result1
00938     E0 0E 06 F1 | 	add	objptr, #224
0093c     07 73 62 FC | 	wrlong	local05, objptr
00940     E0 0E 86 F1 | 	sub	objptr, #224
00944     11 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
00948                 | ' p4:=@putpixel4
00948     07 5D 02 F6 | 	mov	arg01, objptr
0094c     20 55 B0 FD | 	call	#__system___make_methodptr
00950     15 73 02 F6 | 	mov	local05, result1
00954     E4 0E 06 F1 | 	add	objptr, #228
00958     07 73 62 FC | 	wrlong	local05, objptr
0095c     E4 0E 86 F1 | 	sub	objptr, #228
00960     12 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
00964                 | ' p8:=@putpixel8
00964     07 5D 02 F6 | 	mov	arg01, objptr
00968     04 55 B0 FD | 	call	#__system___make_methodptr
0096c     15 73 02 F6 | 	mov	local05, result1
00970     E8 0E 06 F1 | 	add	objptr, #232
00974     07 73 62 FC | 	wrlong	local05, objptr
00978     E8 0E 86 F1 | 	sub	objptr, #232
0097c                 | ' 
0097c                 | ' 
0097c                 | ' ' the mode has to be set here to enable computing the buffer length
0097c                 | ' 
0097c                 | ' setmode(mode)
0097c     40 5C 06 F6 | 	mov	arg01, #64
00980     A0 1F B0 FD | 	call	#_hng030rm_spin2_setmode
00984     40 0E 06 F1 | 	add	objptr, #64
00988     07 75 02 F6 | 	mov	local06, objptr
0098c                 | ' 
0098c                 | ' vblank_ptr:=@vblank
0098c     34 0E 86 F1 | 	sub	objptr, #52
00990     07 75 62 FC | 	wrlong	local06, objptr
00994     28 0E 06 F1 | 	add	objptr, #40
00998     07 77 02 F6 | 	mov	local07, objptr
0099c                 | ' cursor_ptr:=@cursor_x
0099c     24 0E 86 F1 | 	sub	objptr, #36
009a0     07 77 62 FC | 	wrlong	local07, objptr
009a4     88 0E 06 F1 | 	add	objptr, #136
009a8     07 79 02 F6 | 	mov	local08, objptr
009ac                 | ' 
009ac                 | ' fontnum_ptr:=@fontnum
009ac     78 0E 86 F1 | 	sub	objptr, #120
009b0     07 79 62 FC | 	wrlong	local08, objptr
009b4                 | ' 
009b4                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
009b4     78 0E 06 F1 | 	add	objptr, #120
009b8     07 01 68 FC | 	wrlong	#0, objptr
009bc     1C 0E 06 F1 | 	add	objptr, #28
009c0     07 5D 02 F6 | 	mov	arg01, objptr
009c4     B4 0E 86 F1 | 	sub	objptr, #180
009c8     0F 00 00 FF 
009cc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
009d0     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
009d4     0F 00 00 FF 
009d8     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
009dc                 | ' bytemove(@colors,@vgacolors,16)
009dc     10 60 06 F6 | 	mov	arg03, #16
009e0     64 53 B0 FD | 	call	#__system____builtin_memmove
009e4                 | ' 
009e4                 | ' ' initialize a cursor
009e4                 | ' 
009e4                 | ' cursor_x:=0
009e4     34 0E 06 F1 | 	add	objptr, #52
009e8     07 01 48 FC | 	wrbyte	#0, objptr
009ec                 | ' cursor_y:=0
009ec     01 0E 06 F1 | 	add	objptr, #1
009f0     07 01 48 FC | 	wrbyte	#0, objptr
009f4                 | ' cursor_sh:=14
009f4     01 0E 06 F1 | 	add	objptr, #1
009f8     07 1D 48 FC | 	wrbyte	#14, objptr
009fc     36 0E 86 F1 | 	sub	objptr, #54
00a00                 | ' 
00a00                 | ' 
00a00                 | ' ' start the cog
00a00                 | ' 
00a00                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00a00     0F 00 00 FF 
00a04     68 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00a08     0D 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00a0c     0F 00 00 FF 
00a10     68 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
00a14     07 61 02 F6 | 	mov	arg03, objptr
00a18     10 5C 06 F6 | 	mov	arg01, #16
00a1c     28 60 62 FD | 	setq	arg03
00a20     2F 5D F2 FC | 	coginit	arg01, arg02 wc
00a24     01 5C 66 C6 |  if_b	neg	arg01, #1
00a28     2E 2B 02 F6 | 	mov	result1, arg01
00a2c     15 7B 02 F6 | 	mov	local09, result1
00a30     28 0E 06 F1 | 	add	objptr, #40
00a34     07 7B 62 FC | 	wrlong	local09, objptr
00a38     28 0E 86 F1 | 	sub	objptr, #40
00a3c                 | ' waitms(20)
00a3c     14 5C 06 F6 | 	mov	arg01, #20
00a40     34 56 B0 FD | 	call	#__system___waitms
00a44                 | ' 
00a44                 | ' ' clear the screen and set the colors to green on black
00a44                 | ' 
00a44                 | ' cls(c_green,c_black)
00a44     C7 5C 06 F6 | 	mov	arg01, #199
00a48     00 5E 06 F6 | 	mov	arg02, #0
00a4c     2C 18 B0 FD | 	call	#_hng030rm_spin2_cls
00a50                 | ' setbordercolor(0,0,128)
00a50     00 5C 06 F6 | 	mov	arg01, #0
00a54     00 5E 06 F6 | 	mov	arg02, #0
00a58     80 60 06 F6 | 	mov	arg03, #128
00a5c     F8 17 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a60                 | ' setwritecolors(c_green,c_black)
00a60     00 5E 06 F6 | 	mov	arg02, #0
00a64                 | ' 
00a64                 | ' 
00a64                 | ' write_color:=ff
00a64     38 0E 06 F1 | 	add	objptr, #56
00a68     07 8F 69 FC | 	wrlong	#199, objptr
00a6c                 | ' write_background:=bb
00a6c     04 0E 06 F1 | 	add	objptr, #4
00a70     07 01 68 FC | 	wrlong	#0, objptr
00a74                 | ' 
00a74                 | ' return cog
00a74     14 0E 86 F1 | 	sub	objptr, #20
00a78     07 2B 02 FB | 	rdlong	result1, objptr
00a7c     28 0E 86 F1 | 	sub	objptr, #40
00a80     00 5C 06 F6 | 	mov	arg01, #0
00a84     00 60 06 F6 | 	mov	arg03, #0
00a88     CC 17 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a8c                 | ' v030.start(mode,pin)
00a8c                 | ' v030.setbordercolor(0,0,0)
00a8c                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a8c     07 5D 02 F6 | 	mov	arg01, objptr
00a90     0E 5F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a94     D8 53 B0 FD | 	call	#__system___make_methodptr
00a98     00 2E 06 F6 | 	mov	result3, #0
00a9c     00 2C 06 F6 | 	mov	result2, #0
00aa0     15 5F 02 F6 | 	mov	arg02, result1
00aa4     00 60 06 F6 | 	mov	arg03, #0
00aa8     00 62 06 F6 | 	mov	arg04, #0
00aac     00 5C 06 F6 | 	mov	arg01, #0
00ab0     94 56 B0 FD | 	call	#__system___basic_open
00ab4     00 2A 06 F6 | 	mov	result1, #0
00ab8     9A 5C 06 F6 | 	mov	arg01, #154
00abc     93 5E 06 F6 | 	mov	arg02, #147
00ac0     B8 17 B0 FD | 	call	#_hng030rm_spin2_cls
00ac4     40 00 00 FF 
00ac8     1D 7D 06 F6 | 	mov	local10, ##@LR__0453
00acc     04 00 00 FF 
00ad0     D0 0E 06 F1 | 	add	objptr, ##2256
00ad4     07 7D 62 FC | 	wrlong	local10, objptr
00ad8     04 00 00 FF 
00adc     D0 0E 86 F1 | 	sub	objptr, ##2256
00ae0     0C 7F 02 F6 | 	mov	local11, ptr__dat__
00ae4     3F 5D 02 F6 | 	mov	arg01, local11
00ae8     78 FD BF FD | 	call	#_addr
00aec     04 00 00 FF 
00af0     D4 0E 06 F1 | 	add	objptr, ##2260
00af4     07 2B 62 FC | 	wrlong	result1, objptr
00af8     15 5D 02 F6 | 	mov	arg01, result1
00afc     00 5E 06 F6 | 	mov	arg02, #0
00b00     01 00 00 FF 
00b04     A4 0F 86 F1 | 	sub	objptr, ##932
00b08     00 2F B0 FD | 	call	#_trackerplayer_spin2_initModule
00b0c     01 5E 06 F6 | 	mov	arg02, #1
00b10                 | ' 
00b10                 | ' ''---------- Set the (x,y) position of cursor
00b10                 | ' 
00b10                 | ' cursor_x:=x
00b10     02 00 00 FF 
00b14     FC 0E 86 F1 | 	sub	objptr, ##1276
00b18     07 03 48 FC | 	wrbyte	#1, objptr
00b1c                 | ' cursor_y:=y
00b1c     01 0E 06 F1 | 	add	objptr, #1
00b20     07 03 48 FC | 	wrbyte	#1, objptr
00b24                 | ' 
00b24                 | ' emptystr$="                      "
00b24                 | ' 
00b24                 | ' ma=addr(module)
00b24                 | ' tracker.initmodule(ma,0)
00b24                 | ' 
00b24                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
00b24     04 00 00 FF 
00b28     9F 0E 06 F1 | 	add	objptr, ##2207
00b2c     07 81 02 FB | 	rdlong	local12, objptr
00b30     40 83 02 F6 | 	mov	local13, local12
00b34     04 00 00 FF 
00b38     D4 0E 86 F1 | 	sub	objptr, ##2260
00b3c     14 82 06 F1 | 	add	local13, #20
00b40                 | LR__0001
00b40     41 81 5A F2 | 	cmps	local12, local13 wcz
00b44     44 00 90 3D |  if_ae	jmp	#LR__0002
00b48     00 5C 06 F6 | 	mov	arg01, #0
00b4c     A4 69 B0 FD | 	call	#__system___getiolock_0145
00b50     15 5D 02 F6 | 	mov	arg01, result1
00b54     58 53 B0 FD | 	call	#__system___lockmem
00b58     00 84 06 F6 | 	mov	local14, #0
00b5c                 | ' asm
00b5c     40 2B C2 FA | 	rdbyte	result1, local12
00b60                 | ' return r
00b60     15 5F 02 F6 | 	mov	arg02, result1
00b64     07 5E 46 F7 | 	zerox	arg02, #7
00b68     00 5C 06 F6 | 	mov	arg01, #0
00b6c     00 60 06 F6 | 	mov	arg03, #0
00b70     88 56 B0 FD | 	call	#__system___basic_print_char
00b74     00 5C 06 F6 | 	mov	arg01, #0
00b78     78 69 B0 FD | 	call	#__system___getiolock_0145
00b7c     15 01 68 FC | 	wrlong	#0, result1
00b80     00 2A 06 F6 | 	mov	result1, #0
00b84     01 80 06 F1 | 	add	local12, #1
00b88     B4 FF 9F FD | 	jmp	#LR__0001
00b8c                 | LR__0002
00b8c     04 00 00 FF 
00b90     D8 0E 06 F1 | 	add	objptr, ##2264
00b94     07 1F 68 FC | 	wrlong	#15, objptr
00b98                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
00b98     00 7C 06 F6 | 	mov	local10, #0
00b9c     04 0E 86 F1 | 	sub	objptr, #4
00ba0     07 5D 02 FB | 	rdlong	arg01, objptr
00ba4     02 00 00 FF 
00ba8     38 5C 06 F1 | 	add	arg01, ##1080
00bac                 | ' asm
00bac     2E 87 C2 FA | 	rdbyte	local15, arg01
00bb0                 | ' return r
00bb0     07 86 46 F7 | 	zerox	local15, #7
00bb4     4D 86 0E F2 | 	cmp	local15, #77 wz
00bb8     01 7C 66 A6 |  if_e	neg	local10, #1
00bbc     00 88 06 F6 | 	mov	local16, #0
00bc0     07 5D 02 FB | 	rdlong	arg01, objptr
00bc4     04 00 00 FF 
00bc8     D4 0E 86 F1 | 	sub	objptr, ##2260
00bcc     02 00 00 FF 
00bd0     3A 5C 06 F1 | 	add	arg01, ##1082
00bd4                 | ' asm
00bd4     2E 2B C2 FA | 	rdbyte	result1, arg01
00bd8                 | ' return r
00bd8     15 8B 02 F6 | 	mov	local17, result1
00bdc     07 8A 46 F7 | 	zerox	local17, #7
00be0     4B 8A 0E F2 | 	cmp	local17, #75 wz
00be4     01 88 66 A6 |  if_e	neg	local16, #1
00be8     44 7D CA F7 | 	test	local10, local16 wz
00bec     04 00 00 5F 
00bf0     D8 0E 06 51 |  if_ne	add	objptr, ##2264
00bf4     07 3F 68 5C |  if_ne	wrlong	#31, objptr
00bf8     04 00 00 5F 
00bfc     D8 0E 86 51 |  if_ne	sub	objptr, ##2264
00c00     02 5E 06 F6 | 	mov	arg02, #2
00c04                 | ' 
00c04                 | ' ''---------- Set the (x,y) position of cursor
00c04                 | ' 
00c04                 | ' cursor_x:=x
00c04     34 0E 06 F1 | 	add	objptr, #52
00c08     07 03 48 FC | 	wrbyte	#1, objptr
00c0c                 | ' cursor_y:=y
00c0c     01 0E 06 F1 | 	add	objptr, #1
00c10     07 05 48 FC | 	wrbyte	#2, objptr
00c14     35 0E 86 F1 | 	sub	objptr, #53
00c18                 | ' position 1,2 : print samples;" ";"samples module"
00c18     00 5C 06 F6 | 	mov	arg01, #0
00c1c     D4 68 B0 FD | 	call	#__system___getiolock_0145
00c20     15 5D 02 F6 | 	mov	arg01, result1
00c24     88 52 B0 FD | 	call	#__system___lockmem
00c28     00 2A 06 F6 | 	mov	result1, #0
00c2c     04 00 00 FF 
00c30     D8 0E 06 F1 | 	add	objptr, ##2264
00c34     07 5F 02 FB | 	rdlong	arg02, objptr
00c38     04 00 00 FF 
00c3c     D8 0E 86 F1 | 	sub	objptr, ##2264
00c40     00 5C 06 F6 | 	mov	arg01, #0
00c44     00 60 06 F6 | 	mov	arg03, #0
00c48     0A 62 06 F6 | 	mov	arg04, #10
00c4c     40 56 B0 FD | 	call	#__system___basic_print_integer
00c50     40 00 00 FF 
00c54     34 5F 06 F6 | 	mov	arg02, ##@LR__0454
00c58     00 5C 06 F6 | 	mov	arg01, #0
00c5c     00 60 06 F6 | 	mov	arg03, #0
00c60     E4 55 B0 FD | 	call	#__system___basic_print_string
00c64     40 00 00 FF 
00c68     36 5F 06 F6 | 	mov	arg02, ##@LR__0455
00c6c     00 5C 06 F6 | 	mov	arg01, #0
00c70     00 60 06 F6 | 	mov	arg03, #0
00c74     D0 55 B0 FD | 	call	#__system___basic_print_string
00c78     00 5C 06 F6 | 	mov	arg01, #0
00c7c     0A 5E 06 F6 | 	mov	arg02, #10
00c80     00 60 06 F6 | 	mov	arg03, #0
00c84     74 55 B0 FD | 	call	#__system___basic_print_char
00c88     01 2A 06 F6 | 	mov	result1, #1
00c8c     00 5C 06 F6 | 	mov	arg01, #0
00c90     60 68 B0 FD | 	call	#__system___getiolock_0145
00c94     15 01 68 FC | 	wrlong	#0, result1
00c98     00 2A 06 F6 | 	mov	result1, #0
00c9c     04 00 00 FF 
00ca0     D4 0E 06 F1 | 	add	objptr, ##2260
00ca4     07 8D 02 FB | 	rdlong	local18, objptr
00ca8     04 0E 06 F1 | 	add	objptr, #4
00cac     07 8F 02 FB | 	rdlong	local19, objptr
00cb0     04 5E 06 F6 | 	mov	arg02, #4
00cb4                 | ' 
00cb4                 | ' ''---------- Set the (x,y) position of cursor
00cb4                 | ' 
00cb4                 | ' cursor_x:=x
00cb4     04 00 00 FF 
00cb8     A4 0E 86 F1 | 	sub	objptr, ##2212
00cbc     07 03 48 FC | 	wrbyte	#1, objptr
00cc0                 | ' cursor_y:=y
00cc0     01 0E 06 F1 | 	add	objptr, #1
00cc4     07 09 48 FC | 	wrbyte	#4, objptr
00cc8     35 0E 86 F1 | 	sub	objptr, #53
00ccc                 | ' 'v030. setwritecolors(170,147):
00ccc                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00ccc     00 5C 06 F6 | 	mov	arg01, #0
00cd0     20 68 B0 FD | 	call	#__system___getiolock_0145
00cd4     15 5D 02 F6 | 	mov	arg01, result1
00cd8     D4 51 B0 FD | 	call	#__system___lockmem
00cdc     00 2A 06 F6 | 	mov	result1, #0
00ce0     40 00 00 FF 
00ce4     B2 5E 06 F6 | 	mov	arg02, ##@LR__0451
00ce8     00 5C 06 F6 | 	mov	arg01, #0
00cec     00 60 06 F6 | 	mov	arg03, #0
00cf0     54 55 B0 FD | 	call	#__system___basic_print_string
00cf4     00 5C 06 F6 | 	mov	arg01, #0
00cf8     0A 5E 06 F6 | 	mov	arg02, #10
00cfc     00 60 06 F6 | 	mov	arg03, #0
00d00     F8 54 B0 FD | 	call	#__system___basic_print_char
00d04     01 2A 06 F6 | 	mov	result1, #1
00d08     00 5C 06 F6 | 	mov	arg01, #0
00d0c     E4 67 B0 FD | 	call	#__system___getiolock_0145
00d10     15 01 68 FC | 	wrlong	#0, result1
00d14     00 2A 06 F6 | 	mov	result1, #0
00d18     04 00 00 FF 
00d1c     4C 0E 06 F1 | 	add	objptr, ##2124
00d20     07 91 02 F6 | 	mov	local20, objptr
00d24     00 92 06 F6 | 	mov	local21, #0
00d28     04 00 00 FF 
00d2c     4C 0E 86 F1 | 	sub	objptr, ##2124
00d30                 | LR__0003
00d30     40 00 00 FF 
00d34     1B 95 06 F6 | 	mov	local22, ##@LR__0452
00d38     49 97 02 F6 | 	mov	local23, local21
00d3c     02 5E 06 F6 | 	mov	arg02, #2
00d40     0A 60 06 F6 | 	mov	arg03, #10
00d44     02 98 0E F6 | 	mov	local24, #2 wz
00d48     34 00 90 FD | 	jmp	#LR__0006
00d4c                 | LR__0004
00d4c     00 9A 06 F6 | 	mov	local25, #0
00d50     4B 9D 1A F2 | 	cmp	local26, local23 wcz
00d54     01 9A 66 E6 |  if_be	neg	local25, #1
00d58     00 9E 06 F6 | 	mov	local27, #0
00d5c     4E A1 1A F2 | 	cmp	local28, local26 wcz
00d60     01 9E 66 C6 |  if_b	neg	local27, #1
00d64     4F 9B CA F7 | 	test	local25, local27 wz
00d68     14 00 90 AD |  if_e	jmp	#LR__0005
00d6c     4E A1 02 F6 | 	mov	local28, local26
00d70     0A 9C 06 FD | 	qmul	local26, #10
00d74     18 9C 62 FD | 	getqx	local26
00d78     01 98 06 F1 | 	add	local24, #1
00d7c     CC FF 9F FD | 	jmp	#LR__0004
00d80                 | LR__0005
00d80                 | LR__0006
00d80     20 98 3E F3 | 	fle	local24, #32 wcz
00d84     4C 5D 02 F6 | 	mov	arg01, local24
00d88     02 5C 06 F1 | 	add	arg01, #2
00d8c     54 5D B0 FD | 	call	#__system___gc_alloc_managed
00d90     15 A3 02 F6 | 	mov	local29, result1
00d94     4C A5 02 F6 | 	mov	local30, local24
00d98     51 A5 02 F1 | 	add	local30, local29
00d9c     52 01 48 FC | 	wrbyte	#0, local30
00da0     98 F2 9F FE | 	loc	pa,	#(@LR__0008-@LR__0007)
00da4     93 00 A0 FD | 	call	#FCACHE_LOAD_
00da8                 | LR__0007
00da8     00 98 1E F2 | 	cmp	local24, #0 wcz
00dac     34 00 90 ED |  if_be	jmp	#LR__0009
00db0     01 98 86 F1 | 	sub	local24, #1
00db4     4B 0B 03 F6 | 	mov	muldiva_, local23
00db8     0A 0C 07 F6 | 	mov	muldivb_, #10
00dbc     CC 00 A0 FD | 	call	#unsdivide_
00dc0     85 A7 02 F6 | 	mov	local31, muldiva_
00dc4     86 97 02 F6 | 	mov	local23, muldivb_
00dc8     0A A6 1E F2 | 	cmp	local31, #10 wcz
00dcc     30 A6 06 C1 |  if_b	add	local31, #48
00dd0     37 A6 06 31 |  if_ae	add	local31, #55
00dd4     4C A9 02 F6 | 	mov	local32, local24
00dd8     51 A9 02 F1 | 	add	local32, local29
00ddc     54 A7 42 FC | 	wrbyte	local31, local32
00de0     C4 FF 9F FD | 	jmp	#LR__0007
00de4                 | LR__0008
00de4                 | LR__0009
00de4     51 2B 02 F6 | 	mov	result1, local29
00de8     15 5F 02 F6 | 	mov	arg02, result1
00dec     4A 5D 02 F6 | 	mov	arg01, local22
00df0     F4 50 B0 FD | 	call	#__system___string_concat
00df4     15 AB 02 F6 | 	mov	local33, result1
00df8     13 5C 06 F6 | 	mov	arg01, #19
00dfc     40 00 00 FF 
00e00     5C 5E 06 F6 | 	mov	arg02, ##@LR__0445
00e04     4C 59 B0 FD | 	call	#__system__String_S
00e08     15 5F 02 F6 | 	mov	arg02, result1
00e0c     55 5D 02 F6 | 	mov	arg01, local33
00e10     D4 50 B0 FD | 	call	#__system___string_concat
00e14     48 2B 62 FC | 	wrlong	result1, local20
00e18     01 92 06 F1 | 	add	local21, #1
00e1c     04 90 06 F1 | 	add	local20, #4
00e20     20 92 5E F2 | 	cmps	local21, #32 wcz
00e24     08 FF 9F CD |  if_b	jmp	#LR__0003
00e28                 | ' for i=1 to num
00e28     01 92 06 F6 | 	mov	local21, #1
00e2c     01 8E 06 F1 | 	add	local19, #1
00e30     46 AD 02 F6 | 	mov	local34, local18
00e34     14 AC 06 F1 | 	add	local34, #20
00e38     00 AE 06 F6 | 	mov	local35, #0
00e3c     04 00 00 FF 
00e40     50 0E 06 F1 | 	add	objptr, ##2128
00e44     07 B1 02 F6 | 	mov	local36, objptr
00e48     14 8C 06 F1 | 	add	local18, #20
00e4c     00 B2 06 F6 | 	mov	local37, #0
00e50     04 00 00 FF 
00e54     50 0E 86 F1 | 	sub	objptr, ##2128
00e58                 | LR__0010
00e58     47 93 5A F2 | 	cmps	local21, local19 wcz
00e5c     0C 07 90 3D |  if_ae	jmp	#LR__0015
00e60     56 B5 02 F6 | 	mov	local38, local34
00e64     57 B5 02 F1 | 	add	local38, local35
00e68     00 B6 06 F6 | 	mov	local39, #0
00e6c                 | LR__0011
00e6c     58 5D 02 F6 | 	mov	arg01, local36
00e70     F0 F9 BF FD | 	call	#_addr
00e74                 | ' asm
00e74     15 B9 02 FB | 	rdlong	local40, result1
00e78                 | ' return r
00e78     04 00 00 FF 
00e7c     F8 0E 06 F1 | 	add	objptr, ##2296
00e80     07 B9 62 FC | 	wrlong	local40, objptr
00e84     5A 5D 02 F6 | 	mov	arg01, local38
00e88     5B 5D 02 F1 | 	add	arg01, local39
00e8c                 | ' asm
00e8c     2E 2B C2 FA | 	rdbyte	result1, arg01
00e90                 | ' return r
00e90     15 95 02 F6 | 	mov	local22, result1
00e94     07 94 46 F7 | 	zerox	local22, #7
00e98     04 0E 06 F1 | 	add	objptr, #4
00e9c     07 95 62 FC | 	wrlong	local22, objptr
00ea0                 | '     a=lpeek(addr(sn$(i)))
00ea0                 | '     b=(peek(ma+20+30*(i-1)+j))
00ea0                 | '     if b>=32 then poke a+j,b
00ea0     04 00 00 FF 
00ea4     FC 0E 86 F1 | 	sub	objptr, ##2300
00ea8     20 94 5E F2 | 	cmps	local22, #32 wcz
00eac     24 00 90 CD |  if_b	jmp	#LR__0012
00eb0     04 00 00 FF 
00eb4     F8 0E 06 F1 | 	add	objptr, ##2296
00eb8     07 5D 02 FB | 	rdlong	arg01, objptr
00ebc     5B 5D 02 F1 | 	add	arg01, local39
00ec0     04 0E 06 F1 | 	add	objptr, #4
00ec4     07 5F 02 FB | 	rdlong	arg02, objptr
00ec8     04 00 00 FF 
00ecc     FC 0E 86 F1 | 	sub	objptr, ##2300
00ed0                 | ' asm
00ed0     2E 5F 42 FC | 	wrbyte	arg02, arg01
00ed4                 | LR__0012
00ed4     01 B6 06 F1 | 	add	local39, #1
00ed8     16 B6 5E F2 | 	cmps	local39, #22 wcz
00edc     8C FF 9F CD |  if_b	jmp	#LR__0011
00ee0     46 BB 02 F6 | 	mov	local41, local18
00ee4     59 BB 02 F1 | 	add	local41, local37
00ee8     5D 5D 02 F6 | 	mov	arg01, local41
00eec     16 5C 06 F1 | 	add	arg01, #22
00ef0     5D BD 02 F6 | 	mov	local42, local41
00ef4     17 BC 06 F1 | 	add	local42, #23
00ef8                 | ' asm
00ef8     2E AB C2 FA | 	rdbyte	local33, arg01
00efc                 | ' return r
00efc     07 AA 46 F7 | 	zerox	local33, #7
00f00     08 AA 66 F0 | 	shl	local33, #8
00f04                 | ' asm
00f04     5E BF C2 FA | 	rdbyte	local43, local42
00f08                 | ' return r
00f08     07 BE 46 F7 | 	zerox	local43, #7
00f0c     5F AB 02 F1 | 	add	local33, local43
00f10     01 AA 66 F0 | 	shl	local33, #1
00f14     04 00 00 FF 
00f18     00 0F 06 F1 | 	add	objptr, ##2304
00f1c     07 AB 62 FC | 	wrlong	local33, objptr
00f20     5D 5D 02 F6 | 	mov	arg01, local41
00f24     1A 5C 06 F1 | 	add	arg01, #26
00f28     5D C1 02 F6 | 	mov	local44, local41
00f2c     1B C0 06 F1 | 	add	local44, #27
00f30                 | ' asm
00f30     2E AB C2 FA | 	rdbyte	local33, arg01
00f34                 | ' return r
00f34     07 AA 46 F7 | 	zerox	local33, #7
00f38     08 AA 66 F0 | 	shl	local33, #8
00f3c                 | ' asm
00f3c     60 BF C2 FA | 	rdbyte	local43, local44
00f40                 | ' return r
00f40     07 BE 46 F7 | 	zerox	local43, #7
00f44     5F AB 02 F1 | 	add	local33, local43
00f48     01 AA 66 F0 | 	shl	local33, #1
00f4c     04 0E 06 F1 | 	add	objptr, #4
00f50     07 AB 62 FC | 	wrlong	local33, objptr
00f54     5D 5D 02 F6 | 	mov	arg01, local41
00f58     1C 5C 06 F1 | 	add	arg01, #28
00f5c     5D C3 02 F6 | 	mov	local45, local41
00f60     1D C2 06 F1 | 	add	local45, #29
00f64                 | ' asm
00f64     2E AB C2 FA | 	rdbyte	local33, arg01
00f68                 | ' return r
00f68     07 AA 46 F7 | 	zerox	local33, #7
00f6c     08 AA 66 F0 | 	shl	local33, #8
00f70                 | ' asm
00f70     61 BF C2 FA | 	rdbyte	local43, local45
00f74                 | ' return r
00f74     07 BE 46 F7 | 	zerox	local43, #7
00f78     5F AB 02 F1 | 	add	local33, local43
00f7c     01 AA 66 F0 | 	shl	local33, #1
00f80     04 0E 06 F1 | 	add	objptr, #4
00f84     07 AB 62 FC | 	wrlong	local33, objptr
00f88     5D 5D 02 F6 | 	mov	arg01, local41
00f8c     18 5C 06 F1 | 	add	arg01, #24
00f90                 | ' asm
00f90     2E 95 C2 FA | 	rdbyte	local22, arg01
00f94                 | ' return r
00f94     07 94 46 F7 | 	zerox	local22, #7
00f98     04 0E 06 F1 | 	add	objptr, #4
00f9c     07 95 62 FC | 	wrlong	local22, objptr
00fa0     19 BA 06 F1 | 	add	local41, #25
00fa4                 | ' asm
00fa4     5D 2B C2 FA | 	rdbyte	result1, local41
00fa8                 | ' return r
00fa8     15 95 02 F6 | 	mov	local22, result1
00fac     07 94 46 F7 | 	zerox	local22, #7
00fb0     04 0E 06 F1 | 	add	objptr, #4
00fb4     07 95 62 FC | 	wrlong	local22, objptr
00fb8     04 00 00 FF 
00fbc     10 0F 86 F1 | 	sub	objptr, ##2320
00fc0                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00fc0                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00fc0                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00fc0                 | ' ft=peek(ma+20+30*(i-1)+24)
00fc0                 | ' vl=peek(ma+20+30*(i-1)+25)
00fc0                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00fc0     10 92 5E F2 | 	cmps	local21, #16 wcz
00fc4     C4 02 90 3D |  if_ae	jmp	#LR__0013
00fc8     05 C4 06 F6 | 	mov	local46, #5
00fcc     49 C5 02 F1 | 	add	local46, local21
00fd0     62 5F 02 F6 | 	mov	arg02, local46
00fd4                 | ' 
00fd4                 | ' ''---------- Set the (x,y) position of cursor
00fd4                 | ' 
00fd4                 | ' cursor_x:=x
00fd4     34 0E 06 F1 | 	add	objptr, #52
00fd8     07 03 48 FC | 	wrbyte	#1, objptr
00fdc                 | ' cursor_y:=y
00fdc     01 0E 06 F1 | 	add	objptr, #1
00fe0     07 5F 42 FC | 	wrbyte	arg02, objptr
00fe4     49 C7 02 F6 | 	mov	local47, local21
00fe8     02 C6 66 F0 | 	shl	local47, #2
00fec     04 00 00 FF 
00ff0     17 0E 06 F1 | 	add	objptr, ##2071
00ff4     07 C7 02 F1 | 	add	local47, objptr
00ff8     00 5C 06 F6 | 	mov	arg01, #0
00ffc     04 00 00 FF 
01000     4C 0E 86 F1 | 	sub	objptr, ##2124
01004     EC 64 B0 FD | 	call	#__system___getiolock_0145
01008     15 5D 02 F6 | 	mov	arg01, result1
0100c     A0 4E B0 FD | 	call	#__system___lockmem
01010     00 2A 06 F6 | 	mov	result1, #0
01014     63 5F 02 FB | 	rdlong	arg02, local47
01018     00 5C 06 F6 | 	mov	arg01, #0
0101c     00 60 06 F6 | 	mov	arg03, #0
01020     24 52 B0 FD | 	call	#__system___basic_print_string
01024     00 5C 06 F6 | 	mov	arg01, #0
01028     0A 5E 06 F6 | 	mov	arg02, #10
0102c     00 60 06 F6 | 	mov	arg03, #0
01030     C8 51 B0 FD | 	call	#__system___basic_print_char
01034     01 2A 06 F6 | 	mov	result1, #1
01038     00 5C 06 F6 | 	mov	arg01, #0
0103c     B4 64 B0 FD | 	call	#__system___getiolock_0145
01040     15 01 68 FC | 	wrlong	#0, result1
01044     00 2A 06 F6 | 	mov	result1, #0
01048     62 5F 02 F6 | 	mov	arg02, local46
0104c                 | ' 
0104c                 | ' ''---------- Set the (x,y) position of cursor
0104c                 | ' 
0104c                 | ' cursor_x:=x
0104c     34 0E 06 F1 | 	add	objptr, #52
01050     07 31 48 FC | 	wrbyte	#24, objptr
01054                 | ' cursor_y:=y
01054     01 0E 06 F1 | 	add	objptr, #1
01058     07 5F 42 FC | 	wrbyte	arg02, objptr
0105c     35 0E 86 F1 | 	sub	objptr, #53
01060     00 5C 06 F6 | 	mov	arg01, #0
01064     8C 64 B0 FD | 	call	#__system___getiolock_0145
01068     15 5D 02 F6 | 	mov	arg01, result1
0106c     40 4E B0 FD | 	call	#__system___lockmem
01070     00 2A 06 F6 | 	mov	result1, #0
01074     04 00 00 FF 
01078     00 0F 06 F1 | 	add	objptr, ##2304
0107c     07 5F 02 FB | 	rdlong	arg02, objptr
01080     04 00 00 FF 
01084     00 0F 86 F1 | 	sub	objptr, ##2304
01088     00 5C 06 F6 | 	mov	arg01, #0
0108c     00 60 06 F6 | 	mov	arg03, #0
01090     0A 62 06 F6 | 	mov	arg04, #10
01094     F8 51 B0 FD | 	call	#__system___basic_print_integer
01098     00 5C 06 F6 | 	mov	arg01, #0
0109c     0A 5E 06 F6 | 	mov	arg02, #10
010a0     00 60 06 F6 | 	mov	arg03, #0
010a4     54 51 B0 FD | 	call	#__system___basic_print_char
010a8     01 2A 06 F6 | 	mov	result1, #1
010ac     00 5C 06 F6 | 	mov	arg01, #0
010b0     40 64 B0 FD | 	call	#__system___getiolock_0145
010b4     15 01 68 FC | 	wrlong	#0, result1
010b8     00 2A 06 F6 | 	mov	result1, #0
010bc     62 5F 02 F6 | 	mov	arg02, local46
010c0                 | ' 
010c0                 | ' ''---------- Set the (x,y) position of cursor
010c0                 | ' 
010c0                 | ' cursor_x:=x
010c0     34 0E 06 F1 | 	add	objptr, #52
010c4     07 3F 48 FC | 	wrbyte	#31, objptr
010c8                 | ' cursor_y:=y
010c8     01 0E 06 F1 | 	add	objptr, #1
010cc     07 5F 42 FC | 	wrbyte	arg02, objptr
010d0     35 0E 86 F1 | 	sub	objptr, #53
010d4     00 5C 06 F6 | 	mov	arg01, #0
010d8     18 64 B0 FD | 	call	#__system___getiolock_0145
010dc     15 5D 02 F6 | 	mov	arg01, result1
010e0     CC 4D B0 FD | 	call	#__system___lockmem
010e4     00 2A 06 F6 | 	mov	result1, #0
010e8     04 00 00 FF 
010ec     0C 0F 06 F1 | 	add	objptr, ##2316
010f0     07 5F 02 FB | 	rdlong	arg02, objptr
010f4     04 00 00 FF 
010f8     0C 0F 86 F1 | 	sub	objptr, ##2316
010fc     00 5C 06 F6 | 	mov	arg01, #0
01100     00 60 06 F6 | 	mov	arg03, #0
01104     0A 62 06 F6 | 	mov	arg04, #10
01108     84 51 B0 FD | 	call	#__system___basic_print_integer
0110c     00 5C 06 F6 | 	mov	arg01, #0
01110     0A 5E 06 F6 | 	mov	arg02, #10
01114     00 60 06 F6 | 	mov	arg03, #0
01118     E0 50 B0 FD | 	call	#__system___basic_print_char
0111c     01 2A 06 F6 | 	mov	result1, #1
01120     00 5C 06 F6 | 	mov	arg01, #0
01124     CC 63 B0 FD | 	call	#__system___getiolock_0145
01128     15 01 68 FC | 	wrlong	#0, result1
0112c     00 2A 06 F6 | 	mov	result1, #0
01130     62 5F 02 F6 | 	mov	arg02, local46
01134                 | ' 
01134                 | ' ''---------- Set the (x,y) position of cursor
01134                 | ' 
01134                 | ' cursor_x:=x
01134     34 0E 06 F1 | 	add	objptr, #52
01138     07 45 48 FC | 	wrbyte	#34, objptr
0113c                 | ' cursor_y:=y
0113c     01 0E 06 F1 | 	add	objptr, #1
01140     07 5F 42 FC | 	wrbyte	arg02, objptr
01144     35 0E 86 F1 | 	sub	objptr, #53
01148     00 5C 06 F6 | 	mov	arg01, #0
0114c     A4 63 B0 FD | 	call	#__system___getiolock_0145
01150     15 5D 02 F6 | 	mov	arg01, result1
01154     58 4D B0 FD | 	call	#__system___lockmem
01158     00 2A 06 F6 | 	mov	result1, #0
0115c     04 00 00 FF 
01160     10 0F 06 F1 | 	add	objptr, ##2320
01164     07 5F 02 FB | 	rdlong	arg02, objptr
01168     04 00 00 FF 
0116c     10 0F 86 F1 | 	sub	objptr, ##2320
01170     00 5C 06 F6 | 	mov	arg01, #0
01174     00 60 06 F6 | 	mov	arg03, #0
01178     0A 62 06 F6 | 	mov	arg04, #10
0117c     10 51 B0 FD | 	call	#__system___basic_print_integer
01180     00 5C 06 F6 | 	mov	arg01, #0
01184     0A 5E 06 F6 | 	mov	arg02, #10
01188     00 60 06 F6 | 	mov	arg03, #0
0118c     6C 50 B0 FD | 	call	#__system___basic_print_char
01190     01 2A 06 F6 | 	mov	result1, #1
01194     00 5C 06 F6 | 	mov	arg01, #0
01198     58 63 B0 FD | 	call	#__system___getiolock_0145
0119c     15 01 68 FC | 	wrlong	#0, result1
011a0     00 2A 06 F6 | 	mov	result1, #0
011a4     62 5F 02 F6 | 	mov	arg02, local46
011a8                 | ' 
011a8                 | ' ''---------- Set the (x,y) position of cursor
011a8                 | ' 
011a8                 | ' cursor_x:=x
011a8     34 0E 06 F1 | 	add	objptr, #52
011ac     07 4B 48 FC | 	wrbyte	#37, objptr
011b0                 | ' cursor_y:=y
011b0     01 0E 06 F1 | 	add	objptr, #1
011b4     07 5F 42 FC | 	wrbyte	arg02, objptr
011b8     35 0E 86 F1 | 	sub	objptr, #53
011bc     00 5C 06 F6 | 	mov	arg01, #0
011c0     30 63 B0 FD | 	call	#__system___getiolock_0145
011c4     15 5D 02 F6 | 	mov	arg01, result1
011c8     E4 4C B0 FD | 	call	#__system___lockmem
011cc     00 2A 06 F6 | 	mov	result1, #0
011d0     04 00 00 FF 
011d4     04 0F 06 F1 | 	add	objptr, ##2308
011d8     07 5F 02 FB | 	rdlong	arg02, objptr
011dc     04 00 00 FF 
011e0     04 0F 86 F1 | 	sub	objptr, ##2308
011e4     00 5C 06 F6 | 	mov	arg01, #0
011e8     00 60 06 F6 | 	mov	arg03, #0
011ec     0A 62 06 F6 | 	mov	arg04, #10
011f0     9C 50 B0 FD | 	call	#__system___basic_print_integer
011f4     00 5C 06 F6 | 	mov	arg01, #0
011f8     0A 5E 06 F6 | 	mov	arg02, #10
011fc     00 60 06 F6 | 	mov	arg03, #0
01200     F8 4F B0 FD | 	call	#__system___basic_print_char
01204     01 2A 06 F6 | 	mov	result1, #1
01208     00 5C 06 F6 | 	mov	arg01, #0
0120c     E4 62 B0 FD | 	call	#__system___getiolock_0145
01210     15 01 68 FC | 	wrlong	#0, result1
01214     00 2A 06 F6 | 	mov	result1, #0
01218     62 5F 02 F6 | 	mov	arg02, local46
0121c                 | ' 
0121c                 | ' ''---------- Set the (x,y) position of cursor
0121c                 | ' 
0121c                 | ' cursor_x:=x
0121c     34 0E 06 F1 | 	add	objptr, #52
01220     07 57 48 FC | 	wrbyte	#43, objptr
01224                 | ' cursor_y:=y
01224     01 0E 06 F1 | 	add	objptr, #1
01228     07 5F 42 FC | 	wrbyte	arg02, objptr
0122c     35 0E 86 F1 | 	sub	objptr, #53
01230     00 5C 06 F6 | 	mov	arg01, #0
01234     BC 62 B0 FD | 	call	#__system___getiolock_0145
01238     15 5D 02 F6 | 	mov	arg01, result1
0123c     70 4C B0 FD | 	call	#__system___lockmem
01240     00 2A 06 F6 | 	mov	result1, #0
01244     04 00 00 FF 
01248     08 0F 06 F1 | 	add	objptr, ##2312
0124c     07 5F 02 FB | 	rdlong	arg02, objptr
01250     04 00 00 FF 
01254     08 0F 86 F1 | 	sub	objptr, ##2312
01258     00 5C 06 F6 | 	mov	arg01, #0
0125c     00 60 06 F6 | 	mov	arg03, #0
01260     0A 62 06 F6 | 	mov	arg04, #10
01264     28 50 B0 FD | 	call	#__system___basic_print_integer
01268     00 5C 06 F6 | 	mov	arg01, #0
0126c     0A 5E 06 F6 | 	mov	arg02, #10
01270     00 60 06 F6 | 	mov	arg03, #0
01274     84 4F B0 FD | 	call	#__system___basic_print_char
01278     01 2A 06 F6 | 	mov	result1, #1
0127c     00 5C 06 F6 | 	mov	arg01, #0
01280     70 62 B0 FD | 	call	#__system___getiolock_0145
01284     15 01 68 FC | 	wrlong	#0, result1
01288     00 2A 06 F6 | 	mov	result1, #0
0128c                 | LR__0013
0128c                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
0128c     10 92 5E F2 | 	cmps	local21, #16 wcz
01290     C4 02 90 CD |  if_b	jmp	#LR__0014
01294     49 C9 02 F6 | 	mov	local48, local21
01298     0B C8 86 F1 | 	sub	local48, #11
0129c     64 5F 02 F6 | 	mov	arg02, local48
012a0                 | ' 
012a0                 | ' ''---------- Set the (x,y) position of cursor
012a0                 | ' 
012a0                 | ' cursor_x:=x
012a0     34 0E 06 F1 | 	add	objptr, #52
012a4     07 73 48 FC | 	wrbyte	#57, objptr
012a8                 | ' cursor_y:=y
012a8     01 0E 06 F1 | 	add	objptr, #1
012ac     07 5F 42 FC | 	wrbyte	arg02, objptr
012b0     49 CB 02 F6 | 	mov	local49, local21
012b4     02 CA 66 F0 | 	shl	local49, #2
012b8     04 00 00 FF 
012bc     17 0E 06 F1 | 	add	objptr, ##2071
012c0     07 CB 02 F1 | 	add	local49, objptr
012c4     00 5C 06 F6 | 	mov	arg01, #0
012c8     04 00 00 FF 
012cc     4C 0E 86 F1 | 	sub	objptr, ##2124
012d0     20 62 B0 FD | 	call	#__system___getiolock_0145
012d4     15 5D 02 F6 | 	mov	arg01, result1
012d8     D4 4B B0 FD | 	call	#__system___lockmem
012dc     00 2A 06 F6 | 	mov	result1, #0
012e0     65 5F 02 FB | 	rdlong	arg02, local49
012e4     00 5C 06 F6 | 	mov	arg01, #0
012e8     00 60 06 F6 | 	mov	arg03, #0
012ec     58 4F B0 FD | 	call	#__system___basic_print_string
012f0     00 5C 06 F6 | 	mov	arg01, #0
012f4     0A 5E 06 F6 | 	mov	arg02, #10
012f8     00 60 06 F6 | 	mov	arg03, #0
012fc     FC 4E B0 FD | 	call	#__system___basic_print_char
01300     01 2A 06 F6 | 	mov	result1, #1
01304     00 5C 06 F6 | 	mov	arg01, #0
01308     E8 61 B0 FD | 	call	#__system___getiolock_0145
0130c     15 01 68 FC | 	wrlong	#0, result1
01310     00 2A 06 F6 | 	mov	result1, #0
01314     64 5F 02 F6 | 	mov	arg02, local48
01318                 | ' 
01318                 | ' ''---------- Set the (x,y) position of cursor
01318                 | ' 
01318                 | ' cursor_x:=x
01318     34 0E 06 F1 | 	add	objptr, #52
0131c     07 A1 48 FC | 	wrbyte	#80, objptr
01320                 | ' cursor_y:=y
01320     01 0E 06 F1 | 	add	objptr, #1
01324     07 5F 42 FC | 	wrbyte	arg02, objptr
01328     35 0E 86 F1 | 	sub	objptr, #53
0132c     00 5C 06 F6 | 	mov	arg01, #0
01330     C0 61 B0 FD | 	call	#__system___getiolock_0145
01334     15 5D 02 F6 | 	mov	arg01, result1
01338     74 4B B0 FD | 	call	#__system___lockmem
0133c     00 2A 06 F6 | 	mov	result1, #0
01340     04 00 00 FF 
01344     00 0F 06 F1 | 	add	objptr, ##2304
01348     07 5F 02 FB | 	rdlong	arg02, objptr
0134c     04 00 00 FF 
01350     00 0F 86 F1 | 	sub	objptr, ##2304
01354     00 5C 06 F6 | 	mov	arg01, #0
01358     00 60 06 F6 | 	mov	arg03, #0
0135c     0A 62 06 F6 | 	mov	arg04, #10
01360     2C 4F B0 FD | 	call	#__system___basic_print_integer
01364     00 5C 06 F6 | 	mov	arg01, #0
01368     0A 5E 06 F6 | 	mov	arg02, #10
0136c     00 60 06 F6 | 	mov	arg03, #0
01370     88 4E B0 FD | 	call	#__system___basic_print_char
01374     01 2A 06 F6 | 	mov	result1, #1
01378     00 5C 06 F6 | 	mov	arg01, #0
0137c     74 61 B0 FD | 	call	#__system___getiolock_0145
01380     15 01 68 FC | 	wrlong	#0, result1
01384     00 2A 06 F6 | 	mov	result1, #0
01388     64 5F 02 F6 | 	mov	arg02, local48
0138c                 | ' 
0138c                 | ' ''---------- Set the (x,y) position of cursor
0138c                 | ' 
0138c                 | ' cursor_x:=x
0138c     34 0E 06 F1 | 	add	objptr, #52
01390     07 AF 48 FC | 	wrbyte	#87, objptr
01394                 | ' cursor_y:=y
01394     01 0E 06 F1 | 	add	objptr, #1
01398     07 5F 42 FC | 	wrbyte	arg02, objptr
0139c     35 0E 86 F1 | 	sub	objptr, #53
013a0     00 5C 06 F6 | 	mov	arg01, #0
013a4     4C 61 B0 FD | 	call	#__system___getiolock_0145
013a8     15 5D 02 F6 | 	mov	arg01, result1
013ac     00 4B B0 FD | 	call	#__system___lockmem
013b0     00 2A 06 F6 | 	mov	result1, #0
013b4     04 00 00 FF 
013b8     0C 0F 06 F1 | 	add	objptr, ##2316
013bc     07 5F 02 FB | 	rdlong	arg02, objptr
013c0     04 00 00 FF 
013c4     0C 0F 86 F1 | 	sub	objptr, ##2316
013c8     00 5C 06 F6 | 	mov	arg01, #0
013cc     00 60 06 F6 | 	mov	arg03, #0
013d0     0A 62 06 F6 | 	mov	arg04, #10
013d4     B8 4E B0 FD | 	call	#__system___basic_print_integer
013d8     00 5C 06 F6 | 	mov	arg01, #0
013dc     0A 5E 06 F6 | 	mov	arg02, #10
013e0     00 60 06 F6 | 	mov	arg03, #0
013e4     14 4E B0 FD | 	call	#__system___basic_print_char
013e8     01 2A 06 F6 | 	mov	result1, #1
013ec     00 5C 06 F6 | 	mov	arg01, #0
013f0     00 61 B0 FD | 	call	#__system___getiolock_0145
013f4     15 01 68 FC | 	wrlong	#0, result1
013f8     00 2A 06 F6 | 	mov	result1, #0
013fc     64 5F 02 F6 | 	mov	arg02, local48
01400                 | ' 
01400                 | ' ''---------- Set the (x,y) position of cursor
01400                 | ' 
01400                 | ' cursor_x:=x
01400     34 0E 06 F1 | 	add	objptr, #52
01404     07 B5 48 FC | 	wrbyte	#90, objptr
01408                 | ' cursor_y:=y
01408     01 0E 06 F1 | 	add	objptr, #1
0140c     07 5F 42 FC | 	wrbyte	arg02, objptr
01410     35 0E 86 F1 | 	sub	objptr, #53
01414     00 5C 06 F6 | 	mov	arg01, #0
01418     D8 60 B0 FD | 	call	#__system___getiolock_0145
0141c     15 5D 02 F6 | 	mov	arg01, result1
01420     8C 4A B0 FD | 	call	#__system___lockmem
01424     00 2A 06 F6 | 	mov	result1, #0
01428     04 00 00 FF 
0142c     10 0F 06 F1 | 	add	objptr, ##2320
01430     07 5F 02 FB | 	rdlong	arg02, objptr
01434     04 00 00 FF 
01438     10 0F 86 F1 | 	sub	objptr, ##2320
0143c     00 5C 06 F6 | 	mov	arg01, #0
01440     00 60 06 F6 | 	mov	arg03, #0
01444     0A 62 06 F6 | 	mov	arg04, #10
01448     44 4E B0 FD | 	call	#__system___basic_print_integer
0144c     00 5C 06 F6 | 	mov	arg01, #0
01450     0A 5E 06 F6 | 	mov	arg02, #10
01454     00 60 06 F6 | 	mov	arg03, #0
01458     A0 4D B0 FD | 	call	#__system___basic_print_char
0145c     01 2A 06 F6 | 	mov	result1, #1
01460     00 5C 06 F6 | 	mov	arg01, #0
01464     8C 60 B0 FD | 	call	#__system___getiolock_0145
01468     15 01 68 FC | 	wrlong	#0, result1
0146c     00 2A 06 F6 | 	mov	result1, #0
01470     64 5F 02 F6 | 	mov	arg02, local48
01474                 | ' 
01474                 | ' ''---------- Set the (x,y) position of cursor
01474                 | ' 
01474                 | ' cursor_x:=x
01474     34 0E 06 F1 | 	add	objptr, #52
01478     07 BB 48 FC | 	wrbyte	#93, objptr
0147c                 | ' cursor_y:=y
0147c     01 0E 06 F1 | 	add	objptr, #1
01480     07 5F 42 FC | 	wrbyte	arg02, objptr
01484     35 0E 86 F1 | 	sub	objptr, #53
01488     00 5C 06 F6 | 	mov	arg01, #0
0148c     64 60 B0 FD | 	call	#__system___getiolock_0145
01490     15 5D 02 F6 | 	mov	arg01, result1
01494     18 4A B0 FD | 	call	#__system___lockmem
01498     00 2A 06 F6 | 	mov	result1, #0
0149c     04 00 00 FF 
014a0     04 0F 06 F1 | 	add	objptr, ##2308
014a4     07 5F 02 FB | 	rdlong	arg02, objptr
014a8     04 00 00 FF 
014ac     04 0F 86 F1 | 	sub	objptr, ##2308
014b0     00 5C 06 F6 | 	mov	arg01, #0
014b4     00 60 06 F6 | 	mov	arg03, #0
014b8     0A 62 06 F6 | 	mov	arg04, #10
014bc     D0 4D B0 FD | 	call	#__system___basic_print_integer
014c0     00 5C 06 F6 | 	mov	arg01, #0
014c4     0A 5E 06 F6 | 	mov	arg02, #10
014c8     00 60 06 F6 | 	mov	arg03, #0
014cc     2C 4D B0 FD | 	call	#__system___basic_print_char
014d0     01 2A 06 F6 | 	mov	result1, #1
014d4     00 5C 06 F6 | 	mov	arg01, #0
014d8     18 60 B0 FD | 	call	#__system___getiolock_0145
014dc     15 01 68 FC | 	wrlong	#0, result1
014e0     00 2A 06 F6 | 	mov	result1, #0
014e4     64 5F 02 F6 | 	mov	arg02, local48
014e8                 | ' 
014e8                 | ' ''---------- Set the (x,y) position of cursor
014e8                 | ' 
014e8                 | ' cursor_x:=x
014e8     34 0E 06 F1 | 	add	objptr, #52
014ec     07 C7 48 FC | 	wrbyte	#99, objptr
014f0                 | ' cursor_y:=y
014f0     01 0E 06 F1 | 	add	objptr, #1
014f4     07 5F 42 FC | 	wrbyte	arg02, objptr
014f8     35 0E 86 F1 | 	sub	objptr, #53
014fc     00 5C 06 F6 | 	mov	arg01, #0
01500     F0 5F B0 FD | 	call	#__system___getiolock_0145
01504     15 5D 02 F6 | 	mov	arg01, result1
01508     A4 49 B0 FD | 	call	#__system___lockmem
0150c     00 2A 06 F6 | 	mov	result1, #0
01510     04 00 00 FF 
01514     08 0F 06 F1 | 	add	objptr, ##2312
01518     07 5F 02 FB | 	rdlong	arg02, objptr
0151c     04 00 00 FF 
01520     08 0F 86 F1 | 	sub	objptr, ##2312
01524     00 5C 06 F6 | 	mov	arg01, #0
01528     00 60 06 F6 | 	mov	arg03, #0
0152c     0A 62 06 F6 | 	mov	arg04, #10
01530     5C 4D B0 FD | 	call	#__system___basic_print_integer
01534     00 5C 06 F6 | 	mov	arg01, #0
01538     0A 5E 06 F6 | 	mov	arg02, #10
0153c     00 60 06 F6 | 	mov	arg03, #0
01540     B8 4C B0 FD | 	call	#__system___basic_print_char
01544     01 2A 06 F6 | 	mov	result1, #1
01548     00 5C 06 F6 | 	mov	arg01, #0
0154c     A4 5F B0 FD | 	call	#__system___getiolock_0145
01550     15 01 68 FC | 	wrlong	#0, result1
01554     00 2A 06 F6 | 	mov	result1, #0
01558                 | LR__0014
01558     01 92 06 F1 | 	add	local21, #1
0155c     1E AE 06 F1 | 	add	local35, #30
01560     04 B0 06 F1 | 	add	local36, #4
01564     1E B2 06 F1 | 	add	local37, #30
01568     EC F8 9F FD | 	jmp	#LR__0010
0156c                 | LR__0015
0156c                 | ' print
0156c     00 5C 06 F6 | 	mov	arg01, #0
01570     80 5F B0 FD | 	call	#__system___getiolock_0145
01574     15 5D 02 F6 | 	mov	arg01, result1
01578     34 49 B0 FD | 	call	#__system___lockmem
0157c     00 2A 06 F6 | 	mov	result1, #0
01580     00 5C 06 F6 | 	mov	arg01, #0
01584     0A 5E 06 F6 | 	mov	arg02, #10
01588     00 60 06 F6 | 	mov	arg03, #0
0158c     6C 4C B0 FD | 	call	#__system___basic_print_char
01590     01 2A 06 F6 | 	mov	result1, #1
01594     00 5C 06 F6 | 	mov	arg01, #0
01598     58 5F B0 FD | 	call	#__system___getiolock_0145
0159c     15 01 68 FC | 	wrlong	#0, result1
015a0     03 00 00 FF 
015a4     2C 0F 06 F1 | 	add	objptr, ##1836
015a8     03 00 00 FF 
015ac     0C 17 06 F1 | 	add	ptr__audio014_spin2_dat__, ##1804
015b0                 | ' 
015b0                 | ' 
015b0                 | ' channel1[0]:=@null
015b0     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
015b4                 | ' channel1[1]:=0
015b4     04 0E 06 F1 | 	add	objptr, #4
015b8     07 01 68 FC | 	wrlong	#0, objptr
015bc                 | ' channel1[2]:=0
015bc     04 0E 06 F1 | 	add	objptr, #4
015c0     07 01 68 FC | 	wrlong	#0, objptr
015c4                 | ' channel1[3]:=2
015c4     04 0E 06 F1 | 	add	objptr, #4
015c8     07 05 68 FC | 	wrlong	#2, objptr
015cc                 | ' channel1[4]:=0
015cc     04 0E 06 F1 | 	add	objptr, #4
015d0     07 01 68 FC | 	wrlong	#0, objptr
015d4                 | ' channel1[5]:=8192
015d4     04 0E 06 F1 | 	add	objptr, #4
015d8     10 00 80 FF 
015dc     07 01 68 FC | 	wrlong	##8192, objptr
015e0                 | ' channel1[6]:=101
015e0     04 0E 06 F1 | 	add	objptr, #4
015e4     07 CB 68 FC | 	wrlong	#101, objptr
015e8                 | ' channel1[7]:=2
015e8     04 0E 06 F1 | 	add	objptr, #4
015ec     07 05 68 FC | 	wrlong	#2, objptr
015f0                 | ' 
015f0                 | ' channel2[0]:=@null
015f0     08 0E 06 F1 | 	add	objptr, #8
015f4     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
015f8                 | ' channel2[1]:=0
015f8     04 0E 06 F1 | 	add	objptr, #4
015fc     07 01 68 FC | 	wrlong	#0, objptr
01600                 | ' channel2[2]:=0
01600     04 0E 06 F1 | 	add	objptr, #4
01604     07 01 68 FC | 	wrlong	#0, objptr
01608                 | ' channel2[3]:=2
01608     04 0E 06 F1 | 	add	objptr, #4
0160c     07 05 68 FC | 	wrlong	#2, objptr
01610                 | ' channel2[4]:=0
01610     04 0E 06 F1 | 	add	objptr, #4
01614     07 01 68 FC | 	wrlong	#0, objptr
01618                 | ' channel2[5]:=8192
01618     04 0E 06 F1 | 	add	objptr, #4
0161c     10 00 80 FF 
01620     07 01 68 FC | 	wrlong	##8192, objptr
01624                 | ' channel2[6]:=103
01624     04 0E 06 F1 | 	add	objptr, #4
01628     07 CF 68 FC | 	wrlong	#103, objptr
0162c                 | ' channel2[7]:=2
0162c     04 0E 06 F1 | 	add	objptr, #4
01630     07 05 68 FC | 	wrlong	#2, objptr
01634                 | ' 
01634                 | ' channel3[0]:=@null
01634     08 0E 06 F1 | 	add	objptr, #8
01638     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
0163c                 | ' channel3[1]:=0
0163c     04 0E 06 F1 | 	add	objptr, #4
01640     07 01 68 FC | 	wrlong	#0, objptr
01644                 | ' channel3[2]:=0
01644     04 0E 06 F1 | 	add	objptr, #4
01648     07 01 68 FC | 	wrlong	#0, objptr
0164c                 | ' channel3[3]:=2
0164c     04 0E 06 F1 | 	add	objptr, #4
01650     07 05 68 FC | 	wrlong	#2, objptr
01654                 | ' channel3[4]:=0
01654     04 0E 06 F1 | 	add	objptr, #4
01658     07 01 68 FC | 	wrlong	#0, objptr
0165c                 | ' channel3[5]:=8192
0165c     04 0E 06 F1 | 	add	objptr, #4
01660     10 00 80 FF 
01664     07 01 68 FC | 	wrlong	##8192, objptr
01668                 | ' channel3[6]:=107
01668     04 0E 06 F1 | 	add	objptr, #4
0166c     07 D7 68 FC | 	wrlong	#107, objptr
01670                 | ' channel3[7]:=2
01670     04 0E 06 F1 | 	add	objptr, #4
01674     07 05 68 FC | 	wrlong	#2, objptr
01678                 | ' 
01678                 | ' channel4[0]:=@null
01678     08 0E 06 F1 | 	add	objptr, #8
0167c     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
01680                 | ' channel4[1]:=0
01680     04 0E 06 F1 | 	add	objptr, #4
01684     07 01 68 FC | 	wrlong	#0, objptr
01688                 | ' channel4[2]:=0
01688     04 0E 06 F1 | 	add	objptr, #4
0168c     07 01 68 FC | 	wrlong	#0, objptr
01690                 | ' channel4[3]:=2
01690     04 0E 06 F1 | 	add	objptr, #4
01694     07 05 68 FC | 	wrlong	#2, objptr
01698                 | ' channel4[4]:=0
01698     04 0E 06 F1 | 	add	objptr, #4
0169c     07 01 68 FC | 	wrlong	#0, objptr
016a0                 | ' channel4[5]:=8192
016a0     04 0E 06 F1 | 	add	objptr, #4
016a4     10 00 80 FF 
016a8     07 01 68 FC | 	wrlong	##8192, objptr
016ac                 | ' channel4[6]:=109
016ac     04 0E 06 F1 | 	add	objptr, #4
016b0     07 DB 68 FC | 	wrlong	#109, objptr
016b4                 | ' channel4[7]:=2
016b4     04 0E 06 F1 | 	add	objptr, #4
016b8     07 05 68 FC | 	wrlong	#2, objptr
016bc                 | ' channel4[8]:=1
016bc     04 0E 06 F1 | 	add	objptr, #4
016c0     07 03 68 FC | 	wrlong	#1, objptr
016c4                 | ' 
016c4                 | ' channel5[0]:=@null
016c4     04 0E 06 F1 | 	add	objptr, #4
016c8     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
016cc                 | ' channel5[1]:=0
016cc     04 0E 06 F1 | 	add	objptr, #4
016d0     07 01 68 FC | 	wrlong	#0, objptr
016d4                 | ' channel5[2]:=0
016d4     04 0E 06 F1 | 	add	objptr, #4
016d8     07 01 68 FC | 	wrlong	#0, objptr
016dc                 | ' channel5[3]:=2
016dc     04 0E 06 F1 | 	add	objptr, #4
016e0     07 05 68 FC | 	wrlong	#2, objptr
016e4                 | ' channel5[4]:=0
016e4     04 0E 06 F1 | 	add	objptr, #4
016e8     07 01 68 FC | 	wrlong	#0, objptr
016ec                 | ' channel5[5]:=8192
016ec     04 0E 06 F1 | 	add	objptr, #4
016f0     10 00 80 FF 
016f4     07 01 68 FC | 	wrlong	##8192, objptr
016f8                 | ' channel5[6]:=113
016f8     04 0E 06 F1 | 	add	objptr, #4
016fc     07 E3 68 FC | 	wrlong	#113, objptr
01700                 | ' channel5[7]:=2
01700     04 0E 06 F1 | 	add	objptr, #4
01704     07 05 68 FC | 	wrlong	#2, objptr
01708                 | ' 
01708                 | ' channel6[0]:=@null
01708     08 0E 06 F1 | 	add	objptr, #8
0170c     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
01710                 | ' channel6[1]:=0
01710     04 0E 06 F1 | 	add	objptr, #4
01714     07 01 68 FC | 	wrlong	#0, objptr
01718                 | ' channel6[2]:=0
01718     04 0E 06 F1 | 	add	objptr, #4
0171c     07 01 68 FC | 	wrlong	#0, objptr
01720                 | ' channel6[3]:=2
01720     04 0E 06 F1 | 	add	objptr, #4
01724     07 05 68 FC | 	wrlong	#2, objptr
01728                 | ' channel6[4]:=0
01728     04 0E 06 F1 | 	add	objptr, #4
0172c     07 01 68 FC | 	wrlong	#0, objptr
01730                 | ' channel6[5]:=8192
01730     04 0E 06 F1 | 	add	objptr, #4
01734     10 00 80 FF 
01738     07 01 68 FC | 	wrlong	##8192, objptr
0173c                 | ' channel6[6]:=127
0173c     04 0E 06 F1 | 	add	objptr, #4
01740     07 FF 68 FC | 	wrlong	#127, objptr
01744                 | ' channel6[7]:=2
01744     04 0E 06 F1 | 	add	objptr, #4
01748     07 05 68 FC | 	wrlong	#2, objptr
0174c                 | ' 
0174c                 | ' channel7[0]:=@null
0174c     08 0E 06 F1 | 	add	objptr, #8
01750     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
01754                 | ' channel7[1]:=0
01754     04 0E 06 F1 | 	add	objptr, #4
01758     07 01 68 FC | 	wrlong	#0, objptr
0175c                 | ' channel7[2]:=0
0175c     04 0E 06 F1 | 	add	objptr, #4
01760     07 01 68 FC | 	wrlong	#0, objptr
01764                 | ' channel7[3]:=2
01764     04 0E 06 F1 | 	add	objptr, #4
01768     07 05 68 FC | 	wrlong	#2, objptr
0176c                 | ' channel7[4]:=0
0176c     04 0E 06 F1 | 	add	objptr, #4
01770     07 01 68 FC | 	wrlong	#0, objptr
01774                 | ' channel7[5]:=8192
01774     04 0E 06 F1 | 	add	objptr, #4
01778     10 00 80 FF 
0177c     07 01 68 FC | 	wrlong	##8192, objptr
01780                 | ' channel7[6]:=131
01780     04 0E 06 F1 | 	add	objptr, #4
01784     07 07 69 FC | 	wrlong	#131, objptr
01788                 | ' channel7[7]:=2
01788     04 0E 06 F1 | 	add	objptr, #4
0178c     07 05 68 FC | 	wrlong	#2, objptr
01790                 | ' 
01790                 | ' channel8[0]:=@null
01790     08 0E 06 F1 | 	add	objptr, #8
01794     07 17 62 FC | 	wrlong	ptr__audio014_spin2_dat__, objptr
01798                 | ' channel8[1]:=0
01798     04 0E 06 F1 | 	add	objptr, #4
0179c     07 01 68 FC | 	wrlong	#0, objptr
017a0                 | ' channel8[2]:=0
017a0     04 0E 06 F1 | 	add	objptr, #4
017a4     07 01 68 FC | 	wrlong	#0, objptr
017a8                 | ' channel8[3]:=2
017a8     04 0E 06 F1 | 	add	objptr, #4
017ac     07 05 68 FC | 	wrlong	#2, objptr
017b0                 | ' channel8[4]:=0
017b0     04 0E 06 F1 | 	add	objptr, #4
017b4     07 01 68 FC | 	wrlong	#0, objptr
017b8                 | ' channel8[5]:=8192
017b8     04 0E 06 F1 | 	add	objptr, #4
017bc     10 00 80 FF 
017c0     07 01 68 FC | 	wrlong	##8192, objptr
017c4                 | ' channel8[6]:=137
017c4     04 0E 06 F1 | 	add	objptr, #4
017c8     07 13 69 FC | 	wrlong	#137, objptr
017cc                 | ' channel8[7]:=2
017cc     04 0E 06 F1 | 	add	objptr, #4
017d0     07 05 68 FC | 	wrlong	#2, objptr
017d4                 | ' 
017d4                 | ' channel1[8]:=1
017d4     F8 0E 86 F1 | 	sub	objptr, #248
017d8     07 03 68 FC | 	wrlong	#1, objptr
017dc                 | ' channel2[8]:=1
017dc     24 0E 06 F1 | 	add	objptr, #36
017e0     07 03 68 FC | 	wrlong	#1, objptr
017e4                 | ' channel3[8]:=1
017e4     24 0E 06 F1 | 	add	objptr, #36
017e8     07 03 68 FC | 	wrlong	#1, objptr
017ec                 | ' channel4[8]:=1
017ec     24 0E 06 F1 | 	add	objptr, #36
017f0     07 03 68 FC | 	wrlong	#1, objptr
017f4                 | ' channel5[8]:=1
017f4     24 0E 06 F1 | 	add	objptr, #36
017f8     07 03 68 FC | 	wrlong	#1, objptr
017fc                 | ' channel6[8]:=1
017fc     24 0E 06 F1 | 	add	objptr, #36
01800     07 03 68 FC | 	wrlong	#1, objptr
01804                 | ' channel7[8]:=1
01804     24 0E 06 F1 | 	add	objptr, #36
01808     07 03 68 FC | 	wrlong	#1, objptr
0180c                 | ' channel8[8]:=1
0180c     24 0E 06 F1 | 	add	objptr, #36
01810     07 03 68 FC | 	wrlong	#1, objptr
01814     1C 0F 86 F1 | 	sub	objptr, #284
01818                 | ' 
01818                 | ' cog:=coginit(16,@audio,@channel1)
01818     03 00 00 FF 
0181c     0C 17 86 F1 | 	sub	ptr__audio014_spin2_dat__, ##1804
01820     0B 5F 02 F6 | 	mov	arg02, ptr__audio014_spin2_dat__
01824     07 61 02 F6 | 	mov	arg03, objptr
01828     10 5C 06 F6 | 	mov	arg01, #16
0182c     28 60 62 FD | 	setq	arg03
01830     2F 5D F2 FC | 	coginit	arg01, arg02 wc
01834     01 5C 66 C6 |  if_b	neg	arg01, #1
01838     2E 2B 02 F6 | 	mov	result1, arg01
0183c                 | ' return cog
0183c     B0 0F 06 F1 | 	add	objptr, #432
01840     07 01 68 FC | 	wrlong	#0, objptr
01844     04 0E 06 F1 | 	add	objptr, #4
01848     07 01 68 FC | 	wrlong	#0, objptr
0184c     04 0E 06 F1 | 	add	objptr, #4
01850     07 01 68 FC | 	wrlong	#0, objptr
01854     04 0E 06 F1 | 	add	objptr, #4
01858     07 01 68 FC | 	wrlong	#0, objptr
0185c     04 00 00 FF 
01860     E8 0E 86 F1 | 	sub	objptr, ##2280
01864                 | ' getinfo(ma,samples)
01864                 | ' 
01864                 | ' paula.start
01864                 | ' 
01864                 | ' old1=0 : old2=0 :old3=0 : old4=0
01864                 | ' 
01864                 | ' do
01864                 | LR__0016
01864                 | ' 
01864                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01864                 | ' 
01864                 | ' repeat i from 1 to amount
01864     01 CC 06 F6 | 	mov	local50, #1
01868                 | LR__0017
01868                 | '   repeat until vblank==0
01868                 | LR__0018
01868     40 0E 06 F1 | 	add	objptr, #64
0186c     07 CF 0A FB | 	rdlong	local51, objptr wz
01870     40 0E 86 F1 | 	sub	objptr, #64
01874     0C 00 90 AD |  if_e	jmp	#LR__0019
01878                 | '     waitus(100)
01878     64 5C 06 F6 | 	mov	arg01, #100
0187c     74 48 B0 FD | 	call	#__system___waitus
01880     E4 FF 9F FD | 	jmp	#LR__0018
01884                 | LR__0019
01884                 | '   repeat until vblank==1
01884                 | LR__0020
01884     40 0E 06 F1 | 	add	objptr, #64
01888     07 CF 02 FB | 	rdlong	local51, objptr
0188c     40 0E 86 F1 | 	sub	objptr, #64
01890     01 CE 0E F2 | 	cmp	local51, #1 wz
01894     0C 00 90 AD |  if_e	jmp	#LR__0021
01898                 | '     waitus(100)
01898     64 5C 06 F6 | 	mov	arg01, #100
0189c     54 48 B0 FD | 	call	#__system___waitus
018a0     E0 FF 9F FD | 	jmp	#LR__0020
018a4                 | LR__0021
018a4     F0 CD 6E FB | 	djnz	local50, #LR__0017
018a8     02 00 00 FF 
018ac     30 0F 06 F1 | 	add	objptr, ##1328
018b0     34 28 B0 FD | 	call	#_trackerplayer_spin2_tick
018b4     A7 0E 06 F1 | 	add	objptr, #167
018b8     07 7D 02 FB | 	rdlong	local10, objptr
018bc     55 0F 06 F1 | 	add	objptr, #341
018c0     07 7D 62 FC | 	wrlong	local10, objptr
018c4     04 0E 06 F1 | 	add	objptr, #4
018c8     07 03 68 FC | 	wrlong	#1, objptr
018cc     45 0F 86 F1 | 	sub	objptr, #325
018d0     07 7D E2 FA | 	rdword	local10, objptr
018d4     08 0E 06 F1 | 	add	objptr, #8
018d8     07 D1 02 FB | 	rdlong	local52, objptr
018dc     68 7D 82 F1 | 	sub	local10, local52
018e0     41 0F 06 F1 | 	add	objptr, #321
018e4     07 7D 62 FC | 	wrlong	local10, objptr
018e8     49 0F 86 F1 | 	sub	objptr, #329
018ec     07 7D E2 FA | 	rdword	local10, objptr
018f0     4D 0F 06 F1 | 	add	objptr, #333
018f4     07 7D 62 FC | 	wrlong	local10, objptr
018f8     09 0F 86 F1 | 	sub	objptr, #265
018fc     07 D3 02 FB | 	rdlong	local53, objptr
01900     10 0E 06 F1 | 	add	objptr, #16
01904     07 D1 02 FB | 	rdlong	local52, objptr
01908     68 D3 02 F1 | 	add	local53, local52
0190c     07 D2 66 F0 | 	shl	local53, #7
01910     FD 0E 06 F1 | 	add	objptr, #253
01914     07 D3 62 FC | 	wrlong	local53, objptr
01918     04 0E 06 F1 | 	add	objptr, #4
0191c     0C 00 80 FF 
01920     07 01 68 FC | 	wrlong	##6144, objptr
01924     31 0F 86 F1 | 	sub	objptr, #305
01928     07 7D 02 FB | 	rdlong	local10, objptr
0192c     10 0E 06 F1 | 	add	objptr, #16
01930     07 D1 02 FB | 	rdlong	local52, objptr
01934     68 7D 02 F1 | 	add	local10, local52
01938     25 0F 06 F1 | 	add	objptr, #293
0193c     07 7D 62 FC | 	wrlong	local10, objptr
01940     04 0E 06 F1 | 	add	objptr, #4
01944     07 03 68 FC | 	wrlong	#1, objptr
01948                 | ' 
01948                 | '     waitvbl
01948                 | '     tracker.tick
01948                 | '     
01948                 | ' 	paula.channel1(0)=tracker.currSamplePtr(0)
01948                 | ' 	paula.channel1(1)=1
01948                 | ' 	paula.channel1(2)=tracker.currsamplelength(0)-tracker.currrepeatLength(0)
01948                 | ' 	paula.channel1(3)=tracker.currsamplelength(0)
01948                 | ' 	paula.channel1(4)=(tracker.currVolume(0)+tracker.deltavolume(0))*128
01948                 | ' 	paula.channel1(5)=8192-2048
01948                 | ' 	paula.channel1(6)=tracker.currPeriod(0)+tracker.deltaperiod(0)
01948                 | ' 	paula.channel1(7)=1
01948                 | '     if tracker.trigger(0) <> old1 then paula.channel1(8)=0 :waitus 100 : paula.channel1(8)=1 :old1=tracker.trigger(0)
01948     22 0E 86 F1 | 	sub	objptr, #34
0194c     07 7D C2 FA | 	rdbyte	local10, objptr
01950     B6 0F 06 F1 | 	add	objptr, #438
01954     07 D1 02 FB | 	rdlong	local52, objptr
01958     04 00 00 FF 
0195c     DC 0E 86 F1 | 	sub	objptr, ##2268
01960     68 7D 0A F2 | 	cmp	local10, local52 wz
01964     40 00 90 AD |  if_e	jmp	#LR__0022
01968     03 00 00 FF 
0196c     4C 0F 06 F1 | 	add	objptr, ##1868
01970     07 01 68 FC | 	wrlong	#0, objptr
01974     03 00 00 FF 
01978     4C 0F 86 F1 | 	sub	objptr, ##1868
0197c     64 5C 06 F6 | 	mov	arg01, #100
01980     70 47 B0 FD | 	call	#__system___waitus
01984     03 00 00 FF 
01988     4C 0F 06 F1 | 	add	objptr, ##1868
0198c     07 03 68 FC | 	wrlong	#1, objptr
01990     26 0E 86 F1 | 	sub	objptr, #38
01994     07 7D C2 FA | 	rdbyte	local10, objptr
01998     B6 0F 06 F1 | 	add	objptr, #438
0199c     07 7D 62 FC | 	wrlong	local10, objptr
019a0     04 00 00 FF 
019a4     DC 0E 86 F1 | 	sub	objptr, ##2268
019a8                 | LR__0022
019a8     03 00 00 FF 
019ac     50 0F 06 F1 | 	add	objptr, ##1872
019b0     07 7D 02 FB | 	rdlong	local10, objptr
019b4     9C 0F 06 F1 | 	add	objptr, #412
019b8     07 7D 62 FC | 	wrlong	local10, objptr
019bc     01 00 00 FF 
019c0     11 0F 86 F1 | 	sub	objptr, ##785
019c4     07 7D 02 FB | 	rdlong	local10, objptr
019c8     75 0F 06 F1 | 	add	objptr, #373
019cc     07 7D 62 FC | 	wrlong	local10, objptr
019d0     04 0E 06 F1 | 	add	objptr, #4
019d4     07 03 68 FC | 	wrlong	#1, objptr
019d8     67 0F 86 F1 | 	sub	objptr, #359
019dc     07 7D E2 FA | 	rdword	local10, objptr
019e0     0A 0E 06 F1 | 	add	objptr, #10
019e4     07 D1 02 FB | 	rdlong	local52, objptr
019e8     68 7D 82 F1 | 	sub	local10, local52
019ec     61 0F 06 F1 | 	add	objptr, #353
019f0     07 7D 62 FC | 	wrlong	local10, objptr
019f4     6B 0F 86 F1 | 	sub	objptr, #363
019f8     07 7D E2 FA | 	rdword	local10, objptr
019fc     6F 0F 06 F1 | 	add	objptr, #367
01a00     07 7D 62 FC | 	wrlong	local10, objptr
01a04     29 0F 86 F1 | 	sub	objptr, #297
01a08     07 D3 02 FB | 	rdlong	local53, objptr
01a0c     10 0E 06 F1 | 	add	objptr, #16
01a10     07 D1 02 FB | 	rdlong	local52, objptr
01a14     68 D3 02 F1 | 	add	local53, local52
01a18     07 D2 66 F0 | 	shl	local53, #7
01a1c     1D 0F 06 F1 | 	add	objptr, #285
01a20     07 D3 62 FC | 	wrlong	local53, objptr
01a24     04 0E 06 F1 | 	add	objptr, #4
01a28     14 00 80 FF 
01a2c     07 01 68 FC | 	wrlong	##10240, objptr
01a30     51 0F 86 F1 | 	sub	objptr, #337
01a34     07 7D 02 FB | 	rdlong	local10, objptr
01a38     10 0E 06 F1 | 	add	objptr, #16
01a3c     07 D1 02 FB | 	rdlong	local52, objptr
01a40     68 7D 02 F1 | 	add	local10, local52
01a44     45 0F 06 F1 | 	add	objptr, #325
01a48     07 7D 62 FC | 	wrlong	local10, objptr
01a4c     04 0E 06 F1 | 	add	objptr, #4
01a50     07 03 68 FC | 	wrlong	#1, objptr
01a54                 | ' 
01a54                 | '     old12=paula.channel2(0)
01a54                 | ' 	paula.channel2(0)=tracker.currSamplePtr(1)
01a54                 | ' 	paula.channel2(1)=1
01a54                 | ' 	paula.channel2(2)=tracker.currSampleLength(1)-tracker.currrepeatLength(1)
01a54                 | ' 	paula.channel2(3)=tracker.currSampleLength(1)
01a54                 | ' 	paula.channel2(4)=(tracker.currVolume(1)+tracker.deltavolume(1))*128
01a54                 | ' 	paula.channel2(5)=8192+2048
01a54                 | ' 	paula.channel2(6)=tracker.currPeriod(1)+tracker.deltaperiod(1)
01a54                 | ' 	paula.channel2(7)=1
01a54                 | '     if tracker.trigger(1) <> old2 then paula.channel2(8)=0 :waitus 100 : paula.channel2(8)=1 :old2=tracker.trigger(1)
01a54     45 0E 86 F1 | 	sub	objptr, #69
01a58     07 7D C2 FA | 	rdbyte	local10, objptr
01a5c     B9 0F 06 F1 | 	add	objptr, #441
01a60     07 D1 02 FB | 	rdlong	local52, objptr
01a64     04 00 00 FF 
01a68     E0 0E 86 F1 | 	sub	objptr, ##2272
01a6c     68 7D 0A F2 | 	cmp	local10, local52 wz
01a70     40 00 90 AD |  if_e	jmp	#LR__0023
01a74     03 00 00 FF 
01a78     70 0F 06 F1 | 	add	objptr, ##1904
01a7c     07 01 68 FC | 	wrlong	#0, objptr
01a80     03 00 00 FF 
01a84     70 0F 86 F1 | 	sub	objptr, ##1904
01a88     64 5C 06 F6 | 	mov	arg01, #100
01a8c     64 46 B0 FD | 	call	#__system___waitus
01a90     03 00 00 FF 
01a94     70 0F 06 F1 | 	add	objptr, ##1904
01a98     07 03 68 FC | 	wrlong	#1, objptr
01a9c     49 0E 86 F1 | 	sub	objptr, #73
01aa0     07 7D C2 FA | 	rdbyte	local10, objptr
01aa4     B9 0F 06 F1 | 	add	objptr, #441
01aa8     07 7D 62 FC | 	wrlong	local10, objptr
01aac     04 00 00 FF 
01ab0     E0 0E 86 F1 | 	sub	objptr, ##2272
01ab4                 | LR__0023
01ab4     03 00 00 FF 
01ab8     74 0F 06 F1 | 	add	objptr, ##1908
01abc     07 7D 02 FB | 	rdlong	local10, objptr
01ac0     7C 0F 06 F1 | 	add	objptr, #380
01ac4     07 7D 62 FC | 	wrlong	local10, objptr
01ac8     01 00 00 FF 
01acc     11 0F 86 F1 | 	sub	objptr, ##785
01ad0     07 7D 02 FB | 	rdlong	local10, objptr
01ad4     95 0F 06 F1 | 	add	objptr, #405
01ad8     07 7D 62 FC | 	wrlong	local10, objptr
01adc     04 0E 06 F1 | 	add	objptr, #4
01ae0     07 03 68 FC | 	wrlong	#1, objptr
01ae4     89 0F 86 F1 | 	sub	objptr, #393
01ae8     07 7D E2 FA | 	rdword	local10, objptr
01aec     0C 0E 06 F1 | 	add	objptr, #12
01af0     07 D1 02 FB | 	rdlong	local52, objptr
01af4     68 7D 82 F1 | 	sub	local10, local52
01af8     81 0F 06 F1 | 	add	objptr, #385
01afc     07 7D 62 FC | 	wrlong	local10, objptr
01b00     8D 0F 86 F1 | 	sub	objptr, #397
01b04     07 7D E2 FA | 	rdword	local10, objptr
01b08     91 0F 06 F1 | 	add	objptr, #401
01b0c     07 7D 62 FC | 	wrlong	local10, objptr
01b10     49 0F 86 F1 | 	sub	objptr, #329
01b14     07 D3 02 FB | 	rdlong	local53, objptr
01b18     10 0E 06 F1 | 	add	objptr, #16
01b1c     07 D1 02 FB | 	rdlong	local52, objptr
01b20     68 D3 02 F1 | 	add	local53, local52
01b24     07 D2 66 F0 | 	shl	local53, #7
01b28     3D 0F 06 F1 | 	add	objptr, #317
01b2c     07 D3 62 FC | 	wrlong	local53, objptr
01b30     04 0E 06 F1 | 	add	objptr, #4
01b34     14 00 80 FF 
01b38     07 01 68 FC | 	wrlong	##10240, objptr
01b3c     71 0F 86 F1 | 	sub	objptr, #369
01b40     07 7D 02 FB | 	rdlong	local10, objptr
01b44     10 0E 06 F1 | 	add	objptr, #16
01b48     07 D1 02 FB | 	rdlong	local52, objptr
01b4c     68 7D 02 F1 | 	add	local10, local52
01b50     65 0F 06 F1 | 	add	objptr, #357
01b54     07 7D 62 FC | 	wrlong	local10, objptr
01b58     04 0E 06 F1 | 	add	objptr, #4
01b5c     07 03 68 FC | 	wrlong	#1, objptr
01b60                 | ' 
01b60                 | '     old13=paula.channel3(0)
01b60                 | ' 	paula.channel3(0)=tracker.currSamplePtr(2)
01b60                 | ' 	paula.channel3(1)=1
01b60                 | ' 	paula.channel3(2)=tracker.currSampleLength(2)-tracker.currrepeatLength(2)
01b60                 | ' 	paula.channel3(3)=tracker.currSampleLength(2)
01b60                 | ' 	paula.channel3(4)=(tracker.currVolume(2)+tracker.deltavolume(2))*128
01b60                 | ' 	paula.channel3(5)=8192+2048
01b60                 | ' 	paula.channel3(6)=tracker.currPeriod(2)+tracker.deltaperiod(2)
01b60                 | ' 	paula.channel3(7)=1
01b60                 | '     if tracker.trigger(2) <> old3 then paula.channel3(8)=0 :waitus 100 : paula.channel3(8)=1 :old3=tracker.trigger(2)
01b60     68 0E 86 F1 | 	sub	objptr, #104
01b64     07 7D C2 FA | 	rdbyte	local10, objptr
01b68     BC 0F 06 F1 | 	add	objptr, #444
01b6c     07 D1 02 FB | 	rdlong	local52, objptr
01b70     04 00 00 FF 
01b74     E4 0E 86 F1 | 	sub	objptr, ##2276
01b78     68 7D 0A F2 | 	cmp	local10, local52 wz
01b7c     40 00 90 AD |  if_e	jmp	#LR__0024
01b80     03 00 00 FF 
01b84     94 0F 06 F1 | 	add	objptr, ##1940
01b88     07 01 68 FC | 	wrlong	#0, objptr
01b8c     03 00 00 FF 
01b90     94 0F 86 F1 | 	sub	objptr, ##1940
01b94     64 5C 06 F6 | 	mov	arg01, #100
01b98     58 45 B0 FD | 	call	#__system___waitus
01b9c     03 00 00 FF 
01ba0     94 0F 06 F1 | 	add	objptr, ##1940
01ba4     07 03 68 FC | 	wrlong	#1, objptr
01ba8     6C 0E 86 F1 | 	sub	objptr, #108
01bac     07 7D C2 FA | 	rdbyte	local10, objptr
01bb0     BC 0F 06 F1 | 	add	objptr, #444
01bb4     07 7D 62 FC | 	wrlong	local10, objptr
01bb8     04 00 00 FF 
01bbc     E4 0E 86 F1 | 	sub	objptr, ##2276
01bc0                 | LR__0024
01bc0     03 00 00 FF 
01bc4     98 0F 06 F1 | 	add	objptr, ##1944
01bc8     07 7D 02 FB | 	rdlong	local10, objptr
01bcc     5C 0F 06 F1 | 	add	objptr, #348
01bd0     07 7D 62 FC | 	wrlong	local10, objptr
01bd4     01 00 00 FF 
01bd8     11 0F 86 F1 | 	sub	objptr, ##785
01bdc     07 7D 02 FB | 	rdlong	local10, objptr
01be0     B5 0F 06 F1 | 	add	objptr, #437
01be4     07 7D 62 FC | 	wrlong	local10, objptr
01be8     04 0E 06 F1 | 	add	objptr, #4
01bec     07 03 68 FC | 	wrlong	#1, objptr
01bf0     AB 0F 86 F1 | 	sub	objptr, #427
01bf4     07 7D E2 FA | 	rdword	local10, objptr
01bf8     0E 0E 06 F1 | 	add	objptr, #14
01bfc     07 D1 02 FB | 	rdlong	local52, objptr
01c00     68 7D 82 F1 | 	sub	local10, local52
01c04     A1 0F 06 F1 | 	add	objptr, #417
01c08     07 7D 62 FC | 	wrlong	local10, objptr
01c0c     AF 0F 86 F1 | 	sub	objptr, #431
01c10     07 7D E2 FA | 	rdword	local10, objptr
01c14     B3 0F 06 F1 | 	add	objptr, #435
01c18     07 7D 62 FC | 	wrlong	local10, objptr
01c1c     69 0F 86 F1 | 	sub	objptr, #361
01c20     07 D3 02 FB | 	rdlong	local53, objptr
01c24     10 0E 06 F1 | 	add	objptr, #16
01c28     07 D1 02 FB | 	rdlong	local52, objptr
01c2c     68 D3 02 F1 | 	add	local53, local52
01c30     07 D2 66 F0 | 	shl	local53, #7
01c34     5D 0F 06 F1 | 	add	objptr, #349
01c38     07 D3 62 FC | 	wrlong	local53, objptr
01c3c     04 0E 06 F1 | 	add	objptr, #4
01c40     0C 00 80 FF 
01c44     07 01 68 FC | 	wrlong	##6144, objptr
01c48     91 0F 86 F1 | 	sub	objptr, #401
01c4c     07 7D 02 FB | 	rdlong	local10, objptr
01c50     10 0E 06 F1 | 	add	objptr, #16
01c54     07 D1 02 FB | 	rdlong	local52, objptr
01c58     68 7D 02 F1 | 	add	local10, local52
01c5c     85 0F 06 F1 | 	add	objptr, #389
01c60     07 7D 62 FC | 	wrlong	local10, objptr
01c64     04 0E 06 F1 | 	add	objptr, #4
01c68     07 03 68 FC | 	wrlong	#1, objptr
01c6c                 | ' 
01c6c                 | '     old14=paula.channel4(0)    
01c6c                 | ' 	paula.channel4(0)=tracker.currSamplePtr(3)
01c6c                 | ' 	paula.channel4(1)=1
01c6c                 | ' 	paula.channel4(2)=tracker.currSampleLength(3)-tracker.currrepeatLength(3)
01c6c                 | ' 	paula.channel4(3)=tracker.currSampleLength(3)
01c6c                 | ' 	paula.channel4(4)=(tracker.currVolume(3)+tracker.deltavolume(3))*128
01c6c                 | ' 	paula.channel4(5)=8192-2048
01c6c                 | ' 	paula.channel4(6)=tracker.currPeriod(3)+tracker.deltaperiod(3)
01c6c                 | ' 	paula.channel4(7)=1
01c6c                 | '     if tracker.trigger(3) <> old4 then paula.channel4(8)=0 :waitus 100 : paula.channel4(8)=1 :old4=tracker.trigger(3)
01c6c     8B 0E 86 F1 | 	sub	objptr, #139
01c70     07 7D C2 FA | 	rdbyte	local10, objptr
01c74     BF 0F 06 F1 | 	add	objptr, #447
01c78     07 D1 02 FB | 	rdlong	local52, objptr
01c7c     04 00 00 FF 
01c80     E8 0E 86 F1 | 	sub	objptr, ##2280
01c84     68 7D 0A F2 | 	cmp	local10, local52 wz
01c88     40 00 90 AD |  if_e	jmp	#LR__0025
01c8c     03 00 00 FF 
01c90     B8 0F 06 F1 | 	add	objptr, ##1976
01c94     07 01 68 FC | 	wrlong	#0, objptr
01c98     03 00 00 FF 
01c9c     B8 0F 86 F1 | 	sub	objptr, ##1976
01ca0     64 5C 06 F6 | 	mov	arg01, #100
01ca4     4C 44 B0 FD | 	call	#__system___waitus
01ca8     03 00 00 FF 
01cac     B8 0F 06 F1 | 	add	objptr, ##1976
01cb0     07 03 68 FC | 	wrlong	#1, objptr
01cb4     8F 0E 86 F1 | 	sub	objptr, #143
01cb8     07 7D C2 FA | 	rdbyte	local10, objptr
01cbc     BF 0F 06 F1 | 	add	objptr, #447
01cc0     07 7D 62 FC | 	wrlong	local10, objptr
01cc4     04 00 00 FF 
01cc8     E8 0E 86 F1 | 	sub	objptr, ##2280
01ccc                 | LR__0025
01ccc     1D 5E 06 F6 | 	mov	arg02, #29
01cd0                 | ' 
01cd0                 | ' ''---------- Set the (x,y) position of cursor
01cd0                 | ' 
01cd0                 | ' cursor_x:=x
01cd0     34 0E 06 F1 | 	add	objptr, #52
01cd4     07 0B 48 FC | 	wrbyte	#5, objptr
01cd8                 | ' cursor_y:=y
01cd8     01 0E 06 F1 | 	add	objptr, #1
01cdc     07 3B 48 FC | 	wrbyte	#29, objptr
01ce0     02 00 00 FF 
01ce4     B2 0F 06 F1 | 	add	objptr, ##1458
01ce8     07 D5 C2 FA | 	rdbyte	local54, objptr
01cec     02 D4 66 F0 | 	shl	local54, #2
01cf0     01 00 00 FF 
01cf4     65 0E 06 F1 | 	add	objptr, ##613
01cf8     07 D5 02 F1 | 	add	local54, objptr
01cfc     6A 5D 02 FB | 	rdlong	arg01, local54
01d00     04 00 00 FF 
01d04     4C 0E 86 F1 | 	sub	objptr, ##2124
01d08     EC 08 B0 FD | 	call	#_hng030rm_spin2_write
01d0c     04 00 00 FF 
01d10     D0 0E 06 F1 | 	add	objptr, ##2256
01d14     07 5D 02 FB | 	rdlong	arg01, objptr
01d18     04 00 00 FF 
01d1c     D0 0E 86 F1 | 	sub	objptr, ##2256
01d20     D4 08 B0 FD | 	call	#_hng030rm_spin2_write
01d24                 | ' 
01d24                 | ' ''---------- Set the (x,y) position of cursor
01d24                 | ' 
01d24                 | ' cursor_x:=x
01d24     34 0E 06 F1 | 	add	objptr, #52
01d28     07 03 48 FC | 	wrbyte	#1, objptr
01d2c                 | ' cursor_y:=y
01d2c     01 0E 06 F1 | 	add	objptr, #1
01d30     07 3B 48 FC | 	wrbyte	#29, objptr
01d34     02 00 00 FF 
01d38     DA 0F 06 F1 | 	add	objptr, ##1498
01d3c     07 5D 02 FB | 	rdlong	arg01, objptr
01d40     10 0E 06 F1 | 	add	objptr, #16
01d44     07 D5 02 FB | 	rdlong	local54, objptr
01d48     03 00 00 FF 
01d4c     1F 0E 86 F1 | 	sub	objptr, ##1567
01d50     6A 5D 02 F1 | 	add	arg01, local54
01d54     03 5E 06 F6 | 	mov	arg02, #3
01d58     18 0B B0 FD | 	call	#_hng030rm_spin2_inttostr2
01d5c     15 5D 02 F6 | 	mov	arg01, result1
01d60     94 08 B0 FD | 	call	#_hng030rm_spin2_write
01d64     1D 5E 06 F6 | 	mov	arg02, #29
01d68                 | ' 
01d68                 | ' ''---------- Set the (x,y) position of cursor
01d68                 | ' 
01d68                 | ' cursor_x:=x
01d68     34 0E 06 F1 | 	add	objptr, #52
01d6c     07 41 48 FC | 	wrbyte	#32, objptr
01d70                 | ' cursor_y:=y
01d70     01 0E 06 F1 | 	add	objptr, #1
01d74     07 3B 48 FC | 	wrbyte	#29, objptr
01d78     02 00 00 FF 
01d7c     B3 0F 06 F1 | 	add	objptr, ##1459
01d80     07 D5 C2 FA | 	rdbyte	local54, objptr
01d84     02 D4 66 F0 | 	shl	local54, #2
01d88     01 00 00 FF 
01d8c     64 0E 06 F1 | 	add	objptr, ##612
01d90     07 D5 02 F1 | 	add	local54, objptr
01d94     6A 5D 02 FB | 	rdlong	arg01, local54
01d98     04 00 00 FF 
01d9c     4C 0E 86 F1 | 	sub	objptr, ##2124
01da0     54 08 B0 FD | 	call	#_hng030rm_spin2_write
01da4     04 00 00 FF 
01da8     D0 0E 06 F1 | 	add	objptr, ##2256
01dac     07 5D 02 FB | 	rdlong	arg01, objptr
01db0     04 00 00 FF 
01db4     D0 0E 86 F1 | 	sub	objptr, ##2256
01db8     3C 08 B0 FD | 	call	#_hng030rm_spin2_write
01dbc                 | ' 
01dbc                 | ' ''---------- Set the (x,y) position of cursor
01dbc                 | ' 
01dbc                 | ' cursor_x:=x
01dbc     34 0E 06 F1 | 	add	objptr, #52
01dc0     07 39 48 FC | 	wrbyte	#28, objptr
01dc4                 | ' cursor_y:=y
01dc4     01 0E 06 F1 | 	add	objptr, #1
01dc8     07 3B 48 FC | 	wrbyte	#29, objptr
01dcc     02 00 00 FF 
01dd0     DE 0F 06 F1 | 	add	objptr, ##1502
01dd4     07 5D 02 FB | 	rdlong	arg01, objptr
01dd8     10 0E 06 F1 | 	add	objptr, #16
01ddc     07 D5 02 FB | 	rdlong	local54, objptr
01de0     03 00 00 FF 
01de4     23 0E 86 F1 | 	sub	objptr, ##1571
01de8     6A 5D 02 F1 | 	add	arg01, local54
01dec     03 5E 06 F6 | 	mov	arg02, #3
01df0     80 0A B0 FD | 	call	#_hng030rm_spin2_inttostr2
01df4     15 5D 02 F6 | 	mov	arg01, result1
01df8     FC 07 B0 FD | 	call	#_hng030rm_spin2_write
01dfc     1D 5E 06 F6 | 	mov	arg02, #29
01e00                 | ' 
01e00                 | ' ''---------- Set the (x,y) position of cursor
01e00                 | ' 
01e00                 | ' cursor_x:=x
01e00     34 0E 06 F1 | 	add	objptr, #52
01e04     07 79 48 FC | 	wrbyte	#60, objptr
01e08                 | ' cursor_y:=y
01e08     01 0E 06 F1 | 	add	objptr, #1
01e0c     07 3B 48 FC | 	wrbyte	#29, objptr
01e10     02 00 00 FF 
01e14     B4 0F 06 F1 | 	add	objptr, ##1460
01e18     07 D5 C2 FA | 	rdbyte	local54, objptr
01e1c     02 D4 66 F0 | 	shl	local54, #2
01e20     01 00 00 FF 
01e24     63 0E 06 F1 | 	add	objptr, ##611
01e28     07 D5 02 F1 | 	add	local54, objptr
01e2c     6A 5D 02 FB | 	rdlong	arg01, local54
01e30     04 00 00 FF 
01e34     4C 0E 86 F1 | 	sub	objptr, ##2124
01e38     BC 07 B0 FD | 	call	#_hng030rm_spin2_write
01e3c     04 00 00 FF 
01e40     D0 0E 06 F1 | 	add	objptr, ##2256
01e44     07 5D 02 FB | 	rdlong	arg01, objptr
01e48     04 00 00 FF 
01e4c     D0 0E 86 F1 | 	sub	objptr, ##2256
01e50     A4 07 B0 FD | 	call	#_hng030rm_spin2_write
01e54                 | ' 
01e54                 | ' ''---------- Set the (x,y) position of cursor
01e54                 | ' 
01e54                 | ' cursor_x:=x
01e54     34 0E 06 F1 | 	add	objptr, #52
01e58     07 71 48 FC | 	wrbyte	#56, objptr
01e5c                 | ' cursor_y:=y
01e5c     01 0E 06 F1 | 	add	objptr, #1
01e60     07 3B 48 FC | 	wrbyte	#29, objptr
01e64     02 00 00 FF 
01e68     E2 0F 06 F1 | 	add	objptr, ##1506
01e6c     07 5D 02 FB | 	rdlong	arg01, objptr
01e70     10 0E 06 F1 | 	add	objptr, #16
01e74     07 D5 02 FB | 	rdlong	local54, objptr
01e78     03 00 00 FF 
01e7c     27 0E 86 F1 | 	sub	objptr, ##1575
01e80     6A 5D 02 F1 | 	add	arg01, local54
01e84     03 5E 06 F6 | 	mov	arg02, #3
01e88     E8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01e8c     15 5D 02 F6 | 	mov	arg01, result1
01e90     64 07 B0 FD | 	call	#_hng030rm_spin2_write
01e94                 | ' 
01e94                 | ' ''---------- Set the (x,y) position of cursor
01e94                 | ' 
01e94                 | ' cursor_x:=x
01e94     34 0E 06 F1 | 	add	objptr, #52
01e98     07 A9 48 FC | 	wrbyte	#84, objptr
01e9c                 | ' cursor_y:=y
01e9c     01 0E 06 F1 | 	add	objptr, #1
01ea0     07 3B 48 FC | 	wrbyte	#29, objptr
01ea4     02 00 00 FF 
01ea8     E6 0F 06 F1 | 	add	objptr, ##1510
01eac     07 5D 02 FB | 	rdlong	arg01, objptr
01eb0     10 0E 06 F1 | 	add	objptr, #16
01eb4     07 D5 02 FB | 	rdlong	local54, objptr
01eb8     03 00 00 FF 
01ebc     2B 0E 86 F1 | 	sub	objptr, ##1579
01ec0     6A 5D 02 F1 | 	add	arg01, local54
01ec4     03 5E 06 F6 | 	mov	arg02, #3
01ec8     A8 09 B0 FD | 	call	#_hng030rm_spin2_inttostr2
01ecc     15 5D 02 F6 | 	mov	arg01, result1
01ed0     24 07 B0 FD | 	call	#_hng030rm_spin2_write
01ed4     1D 5E 06 F6 | 	mov	arg02, #29
01ed8                 | ' 
01ed8                 | ' ''---------- Set the (x,y) position of cursor
01ed8                 | ' 
01ed8                 | ' cursor_x:=x
01ed8     34 0E 06 F1 | 	add	objptr, #52
01edc     07 B1 48 FC | 	wrbyte	#88, objptr
01ee0                 | ' cursor_y:=y
01ee0     01 0E 06 F1 | 	add	objptr, #1
01ee4     07 3B 48 FC | 	wrbyte	#29, objptr
01ee8     02 00 00 FF 
01eec     B5 0F 06 F1 | 	add	objptr, ##1461
01ef0     07 D5 C2 FA | 	rdbyte	local54, objptr
01ef4     02 D4 66 F0 | 	shl	local54, #2
01ef8     01 00 00 FF 
01efc     62 0E 06 F1 | 	add	objptr, ##610
01f00     07 D5 02 F1 | 	add	local54, objptr
01f04     6A 5D 02 FB | 	rdlong	arg01, local54
01f08     04 00 00 FF 
01f0c     4C 0E 86 F1 | 	sub	objptr, ##2124
01f10     E4 06 B0 FD | 	call	#_hng030rm_spin2_write
01f14     04 00 00 FF 
01f18     D0 0E 06 F1 | 	add	objptr, ##2256
01f1c     07 5D 02 FB | 	rdlong	arg01, objptr
01f20     04 00 00 FF 
01f24     D0 0E 86 F1 | 	sub	objptr, ##2256
01f28     CC 06 B0 FD | 	call	#_hng030rm_spin2_write
01f2c     34 F9 9F FD | 	jmp	#LR__0016
01f30     AF F0 03 F6 | 	mov	ptra, fp
01f34     BF 00 A0 FD | 	call	#popregs_
01f38                 | _program_ret
01f38     2D 00 64 FD | 	ret
01f3c                 | 
01f3c                 | ' 
01f3c                 | ' 
01f3c                 | ' ''---------- putpixel - put a pixel on the screen
01f3c                 | ' 
01f3c                 | ' pub putpixel1(x,y,c) |byte b
01f3c                 | _hng030rm_spin2_putpixel1
01f3c                 | ' 
01f3c                 | ' 
01f3c                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f3c     00 30 06 F6 | 	mov	_var01, #0
01f40     00 5C 5E F2 | 	cmps	arg01, #0 wcz
01f44     01 30 66 36 |  if_ae	neg	_var01, #1
01f48     00 32 06 F6 | 	mov	_var02, #0
01f4c     90 0E 06 F1 | 	add	objptr, #144
01f50     07 35 02 FB | 	rdlong	_var03, objptr
01f54     05 34 66 F0 | 	shl	_var03, #5
01f58     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
01f5c     01 32 66 C6 |  if_b	neg	_var02, #1
01f60     19 31 02 F5 | 	and	_var01, _var02
01f64     00 36 06 F6 | 	mov	_var04, #0
01f68     00 5E 5E F2 | 	cmps	arg02, #0 wcz
01f6c     01 36 66 36 |  if_ae	neg	_var04, #1
01f70     1B 31 02 F5 | 	and	_var01, _var04
01f74     00 38 06 F6 | 	mov	_var05, #0
01f78     04 0E 06 F1 | 	add	objptr, #4
01f7c     07 3B 02 FB | 	rdlong	_var06, objptr
01f80     94 0E 86 F1 | 	sub	objptr, #148
01f84     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
01f88     01 38 66 C6 |  if_b	neg	_var05, #1
01f8c     1C 31 CA F7 | 	test	_var01, _var05 wz
01f90     8C 00 90 AD |  if_e	jmp	#LR__0028
01f94     90 0E 06 F1 | 	add	objptr, #144
01f98     07 3D 02 FB | 	rdlong	_var07, objptr
01f9c     90 0E 86 F1 | 	sub	objptr, #144
01fa0     02 3C 66 F0 | 	shl	_var07, #2
01fa4     2F 3D 02 FD | 	qmul	_var07, arg02
01fa8     18 3E 62 FD | 	getqx	_var08
01fac     07 41 02 FB | 	rdlong	_var09, objptr
01fb0     1F 41 02 F1 | 	add	_var09, _var08
01fb4     2E 43 02 F6 | 	mov	_var10, arg01
01fb8     03 42 46 F0 | 	shr	_var10, #3
01fbc     21 41 02 F1 | 	add	_var09, _var10
01fc0                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01fc0     20 45 C2 FA | 	rdbyte	_var11, _var09
01fc4                 | '     if (c==0)
01fc4     00 60 0E F2 | 	cmp	arg03, #0 wz
01fc8     18 00 90 5D |  if_ne	jmp	#LR__0026
01fcc     2E 31 52 F6 | 	abs	_var01, arg01 wc
01fd0     07 30 06 F5 | 	and	_var01, #7
01fd4     18 31 62 C6 |  if_b	neg	_var01, _var01
01fd8     18 47 C2 F9 | 	decod	_var12, _var01
01fdc                 | '       b:=b & !(1<<(x//8))
01fdc     23 45 22 F5 | 	andn	_var11, _var12
01fe0                 | '     else
01fe0     14 00 90 FD | 	jmp	#LR__0027
01fe4                 | LR__0026
01fe4     2E 31 52 F6 | 	abs	_var01, arg01 wc
01fe8     07 30 06 F5 | 	and	_var01, #7
01fec     18 31 62 C6 |  if_b	neg	_var01, _var01
01ff0     18 49 C2 F9 | 	decod	_var13, _var01
01ff4                 | '       b:=b |(1<<(x//8))
01ff4     24 45 42 F5 | 	or	_var11, _var13
01ff8                 | LR__0027
01ff8     90 0E 06 F1 | 	add	objptr, #144
01ffc     07 4B 02 FB | 	rdlong	_var14, objptr
02000     90 0E 86 F1 | 	sub	objptr, #144
02004     02 4A 66 F0 | 	shl	_var14, #2
02008     2F 4B 02 FD | 	qmul	_var14, arg02
0200c     18 4C 62 FD | 	getqx	_var15
02010     07 4F 02 FB | 	rdlong	_var16, objptr
02014     26 4F 02 F1 | 	add	_var16, _var15
02018     21 4F 02 F1 | 	add	_var16, _var10
0201c                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
0201c     27 45 42 FC | 	wrbyte	_var11, _var16
02020                 | LR__0028
02020                 | _hng030rm_spin2_putpixel1_ret
02020     2D 00 64 FD | 	ret
02024                 | 
02024                 | ' 
02024                 | ' 
02024                 | ' pub putpixel2(x,y,c) |byte b
02024                 | _hng030rm_spin2_putpixel2
02024                 | ' 
02024                 | ' 
02024                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02024     00 30 06 F6 | 	mov	_var01, #0
02028     00 5C 5E F2 | 	cmps	arg01, #0 wcz
0202c     01 30 66 36 |  if_ae	neg	_var01, #1
02030     00 32 06 F6 | 	mov	_var02, #0
02034     90 0E 06 F1 | 	add	objptr, #144
02038     07 35 02 FB | 	rdlong	_var03, objptr
0203c     04 34 66 F0 | 	shl	_var03, #4
02040     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
02044     01 32 66 C6 |  if_b	neg	_var02, #1
02048     19 31 02 F5 | 	and	_var01, _var02
0204c     00 36 06 F6 | 	mov	_var04, #0
02050     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02054     01 36 66 36 |  if_ae	neg	_var04, #1
02058     1B 31 02 F5 | 	and	_var01, _var04
0205c     00 38 06 F6 | 	mov	_var05, #0
02060     04 0E 06 F1 | 	add	objptr, #4
02064     07 3B 02 FB | 	rdlong	_var06, objptr
02068     94 0E 86 F1 | 	sub	objptr, #148
0206c     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02070     01 38 66 C6 |  if_b	neg	_var05, #1
02074     1C 31 CA F7 | 	test	_var01, _var05 wz
02078     7C 00 90 AD |  if_e	jmp	#LR__0029
0207c     90 0E 06 F1 | 	add	objptr, #144
02080     07 3D 02 FB | 	rdlong	_var07, objptr
02084     90 0E 86 F1 | 	sub	objptr, #144
02088     02 3C 66 F0 | 	shl	_var07, #2
0208c     2F 3D 02 FD | 	qmul	_var07, arg02
02090     18 3E 62 FD | 	getqx	_var08
02094     07 41 02 FB | 	rdlong	_var09, objptr
02098     1F 41 02 F1 | 	add	_var09, _var08
0209c     2E 43 02 F6 | 	mov	_var10, arg01
020a0     02 42 46 F0 | 	shr	_var10, #2
020a4     21 41 02 F1 | 	add	_var09, _var10
020a8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
020a8     20 45 C2 FA | 	rdbyte	_var11, _var09
020ac     2E 31 52 F6 | 	abs	_var01, arg01 wc
020b0     03 30 06 F5 | 	and	_var01, #3
020b4     18 31 62 C6 |  if_b	neg	_var01, _var01
020b8     01 30 66 F0 | 	shl	_var01, #1
020bc     03 46 06 F6 | 	mov	_var12, #3
020c0     18 47 62 F0 | 	shl	_var12, _var01
020c4                 | '     b:=b & !(%11<<((x//4)<<1))
020c4     23 45 22 F5 | 	andn	_var11, _var12
020c8     18 61 62 F0 | 	shl	arg03, _var01
020cc                 | '     b:=b |(c<<((x//4)<<1))
020cc     30 45 42 F5 | 	or	_var11, arg03
020d0     90 0E 06 F1 | 	add	objptr, #144
020d4     07 49 02 FB | 	rdlong	_var13, objptr
020d8     90 0E 86 F1 | 	sub	objptr, #144
020dc     02 48 66 F0 | 	shl	_var13, #2
020e0     2F 49 02 FD | 	qmul	_var13, arg02
020e4     18 4A 62 FD | 	getqx	_var14
020e8     07 4D 02 FB | 	rdlong	_var15, objptr
020ec     25 4D 02 F1 | 	add	_var15, _var14
020f0     21 4D 02 F1 | 	add	_var15, _var10
020f4                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
020f4     26 45 42 FC | 	wrbyte	_var11, _var15
020f8                 | LR__0029
020f8                 | _hng030rm_spin2_putpixel2_ret
020f8     2D 00 64 FD | 	ret
020fc                 | 
020fc                 | ' 
020fc                 | ' 
020fc                 | ' pub putpixel4(x,y,c) |byte b
020fc                 | _hng030rm_spin2_putpixel4
020fc                 | ' 
020fc                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
020fc     00 30 06 F6 | 	mov	_var01, #0
02100     00 5C 5E F2 | 	cmps	arg01, #0 wcz
02104     01 30 66 36 |  if_ae	neg	_var01, #1
02108     00 32 06 F6 | 	mov	_var02, #0
0210c     90 0E 06 F1 | 	add	objptr, #144
02110     07 35 02 FB | 	rdlong	_var03, objptr
02114     04 34 66 F0 | 	shl	_var03, #4
02118     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
0211c     01 32 66 C6 |  if_b	neg	_var02, #1
02120     19 31 02 F5 | 	and	_var01, _var02
02124     00 36 06 F6 | 	mov	_var04, #0
02128     00 5E 5E F2 | 	cmps	arg02, #0 wcz
0212c     01 36 66 36 |  if_ae	neg	_var04, #1
02130     1B 31 02 F5 | 	and	_var01, _var04
02134     00 38 06 F6 | 	mov	_var05, #0
02138     04 0E 06 F1 | 	add	objptr, #4
0213c     07 3B 02 FB | 	rdlong	_var06, objptr
02140     94 0E 86 F1 | 	sub	objptr, #148
02144     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02148     01 38 66 C6 |  if_b	neg	_var05, #1
0214c     1C 31 CA F7 | 	test	_var01, _var05 wz
02150     7C 00 90 AD |  if_e	jmp	#LR__0030
02154     90 0E 06 F1 | 	add	objptr, #144
02158     07 3D 02 FB | 	rdlong	_var07, objptr
0215c     90 0E 86 F1 | 	sub	objptr, #144
02160     02 3C 66 F0 | 	shl	_var07, #2
02164     2F 3D 02 FD | 	qmul	_var07, arg02
02168     18 3E 62 FD | 	getqx	_var08
0216c     07 41 02 FB | 	rdlong	_var09, objptr
02170     1F 41 02 F1 | 	add	_var09, _var08
02174     2E 43 02 F6 | 	mov	_var10, arg01
02178     01 42 46 F0 | 	shr	_var10, #1
0217c     21 41 02 F1 | 	add	_var09, _var10
02180                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02180     20 45 C2 FA | 	rdbyte	_var11, _var09
02184     2E 31 52 F6 | 	abs	_var01, arg01 wc
02188     01 30 06 F5 | 	and	_var01, #1
0218c     18 31 62 C6 |  if_b	neg	_var01, _var01
02190     02 30 66 F0 | 	shl	_var01, #2
02194     0F 46 06 F6 | 	mov	_var12, #15
02198     18 47 62 F0 | 	shl	_var12, _var01
0219c                 | '     b:=b & !(%1111<<((x//2)<<2))
0219c     23 45 22 F5 | 	andn	_var11, _var12
021a0     18 61 62 F0 | 	shl	arg03, _var01
021a4                 | '     b:=b |(c<<((x//2)<<2))
021a4     30 45 42 F5 | 	or	_var11, arg03
021a8     90 0E 06 F1 | 	add	objptr, #144
021ac     07 49 02 FB | 	rdlong	_var13, objptr
021b0     90 0E 86 F1 | 	sub	objptr, #144
021b4     02 48 66 F0 | 	shl	_var13, #2
021b8     2F 49 02 FD | 	qmul	_var13, arg02
021bc     18 4A 62 FD | 	getqx	_var14
021c0     07 4D 02 FB | 	rdlong	_var15, objptr
021c4     25 4D 02 F1 | 	add	_var15, _var14
021c8     21 4D 02 F1 | 	add	_var15, _var10
021cc                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
021cc     26 45 42 FC | 	wrbyte	_var11, _var15
021d0                 | LR__0030
021d0                 | _hng030rm_spin2_putpixel4_ret
021d0     2D 00 64 FD | 	ret
021d4                 | 
021d4                 | ' 
021d4                 | ' 
021d4                 | ' pub putpixel8(x,y,c)
021d4                 | _hng030rm_spin2_putpixel8
021d4                 | ' 
021d4                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
021d4     00 30 06 F6 | 	mov	_var01, #0
021d8     00 5C 5E F2 | 	cmps	arg01, #0 wcz
021dc     01 30 66 36 |  if_ae	neg	_var01, #1
021e0     00 32 06 F6 | 	mov	_var02, #0
021e4     90 0E 06 F1 | 	add	objptr, #144
021e8     07 35 02 FB | 	rdlong	_var03, objptr
021ec     02 34 66 F0 | 	shl	_var03, #2
021f0     1A 5D 5A F2 | 	cmps	arg01, _var03 wcz
021f4     01 32 66 C6 |  if_b	neg	_var02, #1
021f8     19 31 02 F5 | 	and	_var01, _var02
021fc     00 36 06 F6 | 	mov	_var04, #0
02200     00 5E 5E F2 | 	cmps	arg02, #0 wcz
02204     01 36 66 36 |  if_ae	neg	_var04, #1
02208     1B 31 02 F5 | 	and	_var01, _var04
0220c     00 38 06 F6 | 	mov	_var05, #0
02210     04 0E 06 F1 | 	add	objptr, #4
02214     07 3B 02 FB | 	rdlong	_var06, objptr
02218     94 0E 86 F1 | 	sub	objptr, #148
0221c     1D 5F 5A F2 | 	cmps	arg02, _var06 wcz
02220     01 38 66 C6 |  if_b	neg	_var05, #1
02224     1C 31 CA F7 | 	test	_var01, _var05 wz
02228     28 00 90 AD |  if_e	jmp	#LR__0031
0222c     90 0E 06 F1 | 	add	objptr, #144
02230     07 3D 02 FB | 	rdlong	_var07, objptr
02234     90 0E 86 F1 | 	sub	objptr, #144
02238     02 3C 66 F0 | 	shl	_var07, #2
0223c     2F 3D 02 FD | 	qmul	_var07, arg02
02240     18 3E 62 FD | 	getqx	_var08
02244     07 41 02 FB | 	rdlong	_var09, objptr
02248     1F 41 02 F1 | 	add	_var09, _var08
0224c     2E 41 02 F1 | 	add	_var09, arg01
02250                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02250     20 61 42 FC | 	wrbyte	arg03, _var09
02254                 | LR__0031
02254                 | _hng030rm_spin2_putpixel8_ret
02254     2D 00 64 FD | 	ret
02258                 | 
02258                 | ' 
02258                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02258                 | ' 
02258                 | ' pub setbordercolor(r,g,b) | color
02258                 | _hng030rm_spin2_setbordercolor
02258     18 5C 66 F0 | 	shl	arg01, #24
0225c     10 5E 66 F0 | 	shl	arg02, #16
02260     2F 5D 02 F1 | 	add	arg01, arg02
02264     08 60 66 F0 | 	shl	arg03, #8
02268     30 5D 02 F1 | 	add	arg01, arg03
0226c                 | ' 
0226c                 | ' color:=r<<24+g<<16+b<<8
0226c                 | ' bordercolor:=color
0226c     2C 0E 06 F1 | 	add	objptr, #44
02270     07 5D 62 FC | 	wrlong	arg01, objptr
02274     2C 0E 86 F1 | 	sub	objptr, #44
02278                 | _hng030rm_spin2_setbordercolor_ret
02278     2D 00 64 FD | 	ret
0227c                 | 
0227c                 | ' 
0227c                 | ' 
0227c                 | ' '*************************************************************************
0227c                 | ' '                                                                        *
0227c                 | ' '  Text functions                                                        *
0227c                 | ' '                                                                        *
0227c                 | ' '*************************************************************************
0227c                 | ' 
0227c                 | ' ''---------- Clear the screen, set its foreground/background color
0227c                 | ' 
0227c                 | ' pub cls(fc,bc)   :c
0227c                 | _hng030rm_spin2_cls
0227c     07 5A 05 F6 | 	mov	COUNT_, #7
02280     B0 00 A0 FD | 	call	#pushregs_
02284     2E 6B 02 F6 | 	mov	local01, arg01
02288     2F 6D 02 F6 | 	mov	local02, arg02
0228c                 | ' 
0228c                 | ' if (graphmode<512)
0228c     C4 0E 06 F1 | 	add	objptr, #196
02290     07 6F 02 FB | 	rdlong	local03, objptr
02294     C4 0E 86 F1 | 	sub	objptr, #196
02298     01 00 00 FF 
0229c     00 6E 5E F2 | 	cmps	local03, ##512 wcz
022a0     34 00 90 3D |  if_ae	jmp	#LR__0032
022a4     35 71 02 F6 | 	mov	local04, local01
022a8     18 70 66 F0 | 	shl	local04, #24
022ac     36 73 02 F6 | 	mov	local05, local02
022b0     10 72 66 F0 | 	shl	local05, #16
022b4     39 71 02 F1 | 	add	local04, local05
022b8     20 70 06 F1 | 	add	local04, #32
022bc                 | '   c:=fc<<24+bc<<16+$20
022bc                 | '   longfill(buf_ptr,c,buflen)
022bc     07 5D 02 FB | 	rdlong	arg01, objptr
022c0     30 0E 06 F1 | 	add	objptr, #48
022c4     07 61 02 FB | 	rdlong	arg03, objptr
022c8     30 0E 86 F1 | 	sub	objptr, #48
022cc     38 5F 02 F6 | 	mov	arg02, local04
022d0     A8 00 A0 FD | 	call	#\builtin_longfill_
022d4                 | ' else
022d4     AC 00 90 FD | 	jmp	#LR__0038
022d8                 | LR__0032
022d8                 | '   if (graphmode & 48) ==48
022d8     C4 0E 06 F1 | 	add	objptr, #196
022dc     07 6F 02 FB | 	rdlong	local03, objptr
022e0     C4 0E 86 F1 | 	sub	objptr, #196
022e4     30 6E 06 F5 | 	and	local03, #48
022e8     30 6E 0E F2 | 	cmp	local03, #48 wz
022ec                 | '     c:=bc
022ec     36 71 02 A6 |  if_e	mov	local04, local02
022f0     74 00 90 AD |  if_e	jmp	#LR__0037
022f4                 | '   elseif (graphmode & 48) ==32
022f4     C4 0E 06 F1 | 	add	objptr, #196
022f8     07 6F 02 FB | 	rdlong	local03, objptr
022fc     C4 0E 86 F1 | 	sub	objptr, #196
02300     30 6E 06 F5 | 	and	local03, #48
02304     20 6E 0E F2 | 	cmp	local03, #32 wz
02308     10 00 90 5D |  if_ne	jmp	#LR__0033
0230c     36 71 02 F6 | 	mov	local04, local02
02310     04 70 66 F0 | 	shl	local04, #4
02314     36 71 02 F1 | 	add	local04, local02
02318                 | '     c:=bc<<4+bc
02318     4C 00 90 FD | 	jmp	#LR__0036
0231c                 | LR__0033
0231c                 | '   elseif (graphmode & 48) ==16
0231c     C4 0E 06 F1 | 	add	objptr, #196
02320     07 6F 02 FB | 	rdlong	local03, objptr
02324     C4 0E 86 F1 | 	sub	objptr, #196
02328     30 6E 06 F5 | 	and	local03, #48
0232c     10 6E 0E F2 | 	cmp	local03, #16 wz
02330     28 00 90 5D |  if_ne	jmp	#LR__0034
02334     36 71 02 F6 | 	mov	local04, local02
02338     06 70 66 F0 | 	shl	local04, #6
0233c     36 75 02 F6 | 	mov	local06, local02
02340     04 74 66 F0 | 	shl	local06, #4
02344     3A 71 02 F1 | 	add	local04, local06
02348     36 77 02 F6 | 	mov	local07, local02
0234c     02 76 66 F0 | 	shl	local07, #2
02350     3B 71 02 F1 | 	add	local04, local07
02354     36 71 02 F1 | 	add	local04, local02
02358                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02358                 | '   else
02358     0C 00 90 FD | 	jmp	#LR__0035
0235c                 | LR__0034
0235c                 | '     if bc==1
0235c     01 6C 0E F2 | 	cmp	local02, #1 wz
02360                 | '       c:=255
02360     FF 70 06 A6 |  if_e	mov	local04, #255
02364                 | '     else
02364                 | '       c:=0
02364     00 70 06 56 |  if_ne	mov	local04, #0
02368                 | LR__0035
02368                 | LR__0036
02368                 | LR__0037
02368     30 0E 06 F1 | 	add	objptr, #48
0236c     07 61 02 FB | 	rdlong	arg03, objptr
02370     30 0E 86 F1 | 	sub	objptr, #48
02374     02 60 66 F0 | 	shl	arg03, #2
02378                 | '   bytefill(buf_ptr,c,buflen*4)
02378     07 5D 02 FB | 	rdlong	arg01, objptr
0237c     38 5F 02 F6 | 	mov	arg02, local04
02380     A0 00 A0 FD | 	call	#\builtin_bytefill_
02384                 | LR__0038
02384                 | ' setwritecolors(fc,bc)
02384                 | ' 
02384                 | ' 
02384                 | ' write_color:=ff
02384     38 0E 06 F1 | 	add	objptr, #56
02388     07 6B 62 FC | 	wrlong	local01, objptr
0238c                 | ' write_background:=bb
0238c     04 0E 06 F1 | 	add	objptr, #4
02390     07 6D 62 FC | 	wrlong	local02, objptr
02394                 | ' cursor_x:=0
02394     08 0E 86 F1 | 	sub	objptr, #8
02398     07 01 48 FC | 	wrbyte	#0, objptr
0239c                 | ' cursor_y:=0
0239c     01 0E 06 F1 | 	add	objptr, #1
023a0     07 01 48 FC | 	wrbyte	#0, objptr
023a4     35 0E 86 F1 | 	sub	objptr, #53
023a8     38 2B 02 F6 | 	mov	result1, local04
023ac     AF F0 03 F6 | 	mov	ptra, fp
023b0     BF 00 A0 FD | 	call	#popregs_
023b4                 | _hng030rm_spin2_cls_ret
023b4     2D 00 64 FD | 	ret
023b8                 | 
023b8                 | ' 
023b8                 | ' ''--------- Output a string at position x,y without changing colors
023b8                 | ' 
023b8                 | ' pub outtextxy(x,y,text) | iii
023b8                 | _hng030rm_spin2_outtextxy
023b8     0B 5A 05 F6 | 	mov	COUNT_, #11
023bc     B0 00 A0 FD | 	call	#pushregs_
023c0     2E 6B 02 F6 | 	mov	local01, arg01
023c4                 | ' 
023c4                 | ' repeat iii from 0 to strsize(text)-1
023c4     00 6C 06 F6 | 	mov	local02, #0
023c8     30 5D 02 F6 | 	mov	arg01, arg03
023cc     00 6E 06 F6 | 	mov	local03, #0
023d0     3C DC 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
023d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
023d8                 | LR__0039
023d8     2E 71 CA FA | 	rdbyte	local04, arg01 wz
023dc     01 6E 06 51 |  if_ne	add	local03, #1
023e0     01 5C 06 51 |  if_ne	add	arg01, #1
023e4     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
023e8                 | LR__0040
023e8     37 2B 02 F6 | 	mov	result1, local03
023ec     15 73 02 F6 | 	mov	local05, result1
023f0     01 72 86 F1 | 	sub	local05, #1
023f4     00 72 5E F2 | 	cmps	local05, #0 wcz
023f8     01 74 06 16 |  if_a	mov	local06, #1
023fc     01 74 66 E6 |  if_be	neg	local06, #1
02400     3A 73 02 F1 | 	add	local05, local06
02404     48 DC 9F FE | 	loc	pa,	#(@LR__0042-@LR__0041)
02408     93 00 A0 FD | 	call	#FCACHE_LOAD_
0240c                 | LR__0041
0240c     90 0E 06 F1 | 	add	objptr, #144
02410     07 77 02 FB | 	rdlong	local07, objptr
02414     90 0E 86 F1 | 	sub	objptr, #144
02418     2F 77 02 FD | 	qmul	local07, arg02
0241c     18 78 62 FD | 	getqx	local08
02420     35 79 02 F1 | 	add	local08, local01
02424     36 79 02 F1 | 	add	local08, local02
02428     02 78 66 F0 | 	shl	local08, #2
0242c     07 7B 02 FB | 	rdlong	local09, objptr
02430     3C 7B 02 F1 | 	add	local09, local08
02434     3D 7D 02 FB | 	rdlong	local10, local09
02438     FF 7C 26 F5 | 	andn	local10, #255
0243c     30 7F 02 F6 | 	mov	local11, arg03
02440     36 7F 02 F1 | 	add	local11, local02
02444     3F 77 C2 FA | 	rdbyte	local07, local11
02448     3B 7D 42 F5 | 	or	local10, local07
0244c                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
0244c     3D 7D 62 FC | 	wrlong	local10, local09
02450     3A 6D 02 F1 | 	add	local02, local06
02454     39 6D 0A F2 | 	cmp	local02, local05 wz
02458     B0 FF 9F 5D |  if_ne	jmp	#LR__0041
0245c                 | LR__0042
0245c     AF F0 03 F6 | 	mov	ptra, fp
02460     BF 00 A0 FD | 	call	#popregs_
02464                 | _hng030rm_spin2_outtextxy_ret
02464     2D 00 64 FD | 	ret
02468                 | 
02468                 | ' 
02468                 | ' ''---------- Output a char at the cursor position, move the cursor
02468                 | ' 
02468                 | ' pub putchar(achar) | c,x,y
02468                 | _hng030rm_spin2_putchar
02468     12 5A 05 F6 | 	mov	COUNT_, #18
0246c     B0 00 A0 FD | 	call	#pushregs_
02470     2E 6B 02 F6 | 	mov	local01, arg01
02474                 | ' 
02474                 | ' if achar==10
02474     0A 6A 0E F2 | 	cmp	local01, #10 wz
02478     58 00 90 5D |  if_ne	jmp	#LR__0043
0247c                 | '   crlf()
0247c                 | ' 
0247c                 | ' cursor_x:=0
0247c     34 0E 06 F1 | 	add	objptr, #52
02480     07 01 48 FC | 	wrbyte	#0, objptr
02484                 | ' cursor_y+=1
02484     01 0E 06 F1 | 	add	objptr, #1
02488     07 6D C2 FA | 	rdbyte	local02, objptr
0248c     01 6C 06 F1 | 	add	local02, #1
02490     07 6D 42 FC | 	wrbyte	local02, objptr
02494                 | ' if cursor_y>lines-1
02494     5F 0E 06 F1 | 	add	objptr, #95
02498     07 6D 02 FB | 	rdlong	local02, objptr
0249c     01 6C 86 F1 | 	sub	local02, #1
024a0     5F 0E 86 F1 | 	sub	objptr, #95
024a4     07 6F C2 FA | 	rdbyte	local03, objptr
024a8     35 0E 86 F1 | 	sub	objptr, #53
024ac     36 6F 5A F2 | 	cmps	local03, local02 wcz
024b0     38 01 90 ED |  if_be	jmp	#LR__0046
024b4                 | '   scrollup()
024b4     F4 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
024b8     94 0E 06 F1 | 	add	objptr, #148
024bc     07 71 02 FB | 	rdlong	local04, objptr
024c0     01 70 86 F1 | 	sub	local04, #1
024c4                 | '   cursor_y:=lines-1
024c4     5F 0E 86 F1 | 	sub	objptr, #95
024c8     07 71 42 FC | 	wrbyte	local04, objptr
024cc     35 0E 86 F1 | 	sub	objptr, #53
024d0                 | ' else  
024d0     18 01 90 FD | 	jmp	#LR__0046
024d4                 | LR__0043
024d4                 | '   x:=cursor_x
024d4     34 0E 06 F1 | 	add	objptr, #52
024d8     07 73 C2 FA | 	rdbyte	local05, objptr
024dc                 | '   y:=cursor_y
024dc     01 0E 06 F1 | 	add	objptr, #1
024e0     07 75 C2 FA | 	rdbyte	local06, objptr
024e4     03 0E 06 F1 | 	add	objptr, #3
024e8     07 77 02 FB | 	rdlong	local07, objptr
024ec     18 76 66 F0 | 	shl	local07, #24
024f0     04 0E 06 F1 | 	add	objptr, #4
024f4     07 79 02 FB | 	rdlong	local08, objptr
024f8     10 78 66 F0 | 	shl	local08, #16
024fc     3C 77 02 F1 | 	add	local07, local08
02500                 | '   c:=write_color<<24+write_background<<16
02500     54 0E 06 F1 | 	add	objptr, #84
02504     07 7B 02 FB | 	rdlong	local09, objptr
02508     90 0E 86 F1 | 	sub	objptr, #144
0250c     3A 7B 02 FD | 	qmul	local09, local06
02510     18 7C 62 FD | 	getqx	local10
02514     39 7D 02 F1 | 	add	local10, local05
02518     02 7C 66 F0 | 	shl	local10, #2
0251c     07 7F 02 FB | 	rdlong	local11, objptr
02520     3E 7F 02 F1 | 	add	local11, local10
02524     3F 81 02 FB | 	rdlong	local12, local11
02528     7F 00 00 FF 
0252c     FF 81 06 F5 | 	and	local12, ##65535
02530     3B 81 42 F5 | 	or	local12, local07
02534                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02534     3F 81 62 FC | 	wrlong	local12, local11
02538     90 0E 06 F1 | 	add	objptr, #144
0253c     07 7B 02 FB | 	rdlong	local09, objptr
02540     90 0E 86 F1 | 	sub	objptr, #144
02544     3A 7B 02 FD | 	qmul	local09, local06
02548     18 82 62 FD | 	getqx	local13
0254c     39 83 02 F1 | 	add	local13, local05
02550     02 82 66 F0 | 	shl	local13, #2
02554     07 85 02 FB | 	rdlong	local14, objptr
02558     41 85 02 F1 | 	add	local14, local13
0255c     42 87 02 FB | 	rdlong	local15, local14
02560     FF 86 26 F5 | 	andn	local15, #255
02564     FF 6A 06 F5 | 	and	local01, #255
02568     35 87 42 F5 | 	or	local15, local01
0256c                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
0256c     42 87 62 FC | 	wrlong	local15, local14
02570                 | '   cursor_x+=1
02570     34 0E 06 F1 | 	add	objptr, #52
02574     07 89 C2 FA | 	rdbyte	local16, objptr
02578     01 88 06 F1 | 	add	local16, #1
0257c     07 89 42 FC | 	wrbyte	local16, objptr
02580                 | '   if cursor_x==cpl
02580     07 89 C2 FA | 	rdbyte	local16, objptr
02584     5C 0E 06 F1 | 	add	objptr, #92
02588     07 8B 02 FB | 	rdlong	local17, objptr
0258c     90 0E 86 F1 | 	sub	objptr, #144
02590     45 89 0A F2 | 	cmp	local16, local17 wz
02594     54 00 90 5D |  if_ne	jmp	#LR__0045
02598                 | '     cursor_x:=0
02598     34 0E 06 F1 | 	add	objptr, #52
0259c     07 01 48 FC | 	wrbyte	#0, objptr
025a0                 | '     cursor_y+=1
025a0     01 0E 06 F1 | 	add	objptr, #1
025a4     07 89 C2 FA | 	rdbyte	local16, objptr
025a8     01 88 06 F1 | 	add	local16, #1
025ac     07 89 42 FC | 	wrbyte	local16, objptr
025b0                 | '     if cursor_y>lines-1
025b0     5F 0E 06 F1 | 	add	objptr, #95
025b4     07 89 02 FB | 	rdlong	local16, objptr
025b8     01 88 86 F1 | 	sub	local16, #1
025bc     5F 0E 86 F1 | 	sub	objptr, #95
025c0     07 8B C2 FA | 	rdbyte	local17, objptr
025c4     35 0E 86 F1 | 	sub	objptr, #53
025c8     44 8B 5A F2 | 	cmps	local17, local16 wcz
025cc     1C 00 90 ED |  if_be	jmp	#LR__0044
025d0                 | '       scrollup()
025d0     D8 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
025d4     94 0E 06 F1 | 	add	objptr, #148
025d8     07 8D 02 FB | 	rdlong	local18, objptr
025dc     01 8C 86 F1 | 	sub	local18, #1
025e0                 | '       cursor_y:=lines-1
025e0     5F 0E 86 F1 | 	sub	objptr, #95
025e4     07 8D 42 FC | 	wrbyte	local18, objptr
025e8     35 0E 86 F1 | 	sub	objptr, #53
025ec                 | LR__0044
025ec                 | LR__0045
025ec                 | LR__0046
025ec     AF F0 03 F6 | 	mov	ptra, fp
025f0     BF 00 A0 FD | 	call	#popregs_
025f4                 | _hng030rm_spin2_putchar_ret
025f4     2D 00 64 FD | 	ret
025f8                 | 
025f8                 | ' 
025f8                 | ' ''--------- Output a string at the cursor position, move the cursor
025f8                 | ' 
025f8                 | ' pub write(text) | iii,c,ncx,ncy
025f8                 | _hng030rm_spin2_write
025f8     11 5A 05 F6 | 	mov	COUNT_, #17
025fc     B0 00 A0 FD | 	call	#pushregs_
02600     2E 6B 02 F6 | 	mov	local01, arg01
02604     38 0E 06 F1 | 	add	objptr, #56
02608     07 6D 02 FB | 	rdlong	local02, objptr
0260c     18 6C 66 F0 | 	shl	local02, #24
02610     04 0E 06 F1 | 	add	objptr, #4
02614     07 6F 02 FB | 	rdlong	local03, objptr
02618     10 6E 66 F0 | 	shl	local03, #16
0261c     37 6D 02 F1 | 	add	local02, local03
02620                 | ' 
02620                 | ' c:=write_color<<24+write_background<<16
02620                 | ' 'debug(uhex_long(write_color))
02620                 | ' ncy:=cursor_y
02620     07 0E 86 F1 | 	sub	objptr, #7
02624     07 71 C2 FA | 	rdbyte	local04, objptr
02628                 | ' ncx:=cursor_x+strsize(text)
02628     01 0E 86 F1 | 	sub	objptr, #1
0262c     07 73 C2 FA | 	rdbyte	local05, objptr
02630     34 0E 86 F1 | 	sub	objptr, #52
02634     35 5D 02 F6 | 	mov	arg01, local01
02638     00 74 06 F6 | 	mov	local06, #0
0263c     D0 D9 9F FE | 	loc	pa,	#(@LR__0048-@LR__0047)
02640     93 00 A0 FD | 	call	#FCACHE_LOAD_
02644                 | LR__0047
02644     2E 77 CA FA | 	rdbyte	local07, arg01 wz
02648     01 74 06 51 |  if_ne	add	local06, #1
0264c     01 5C 06 51 |  if_ne	add	arg01, #1
02650     F0 FF 9F 5D |  if_ne	jmp	#LR__0047
02654                 | LR__0048
02654     3A 2B 02 F6 | 	mov	result1, local06
02658     3A 73 02 F1 | 	add	local05, local06
0265c     39 79 02 F6 | 	mov	local08, local05
02660     CC D9 9F FE | 	loc	pa,	#(@LR__0050-@LR__0049)
02664     93 00 A0 FD | 	call	#FCACHE_LOAD_
02668                 | ' repeat while ncx>cpl-1
02668                 | LR__0049
02668     90 0E 06 F1 | 	add	objptr, #144
0266c     07 73 02 FB | 	rdlong	local05, objptr
02670     90 0E 86 F1 | 	sub	objptr, #144
02674     01 72 86 F1 | 	sub	local05, #1
02678     39 79 5A F2 | 	cmps	local08, local05 wcz
0267c     18 00 90 ED |  if_be	jmp	#LR__0051
02680                 | '   ncx-=cpl
02680     90 0E 06 F1 | 	add	objptr, #144
02684     07 7B 02 FB | 	rdlong	local09, objptr
02688     90 0E 86 F1 | 	sub	objptr, #144
0268c     3D 79 82 F1 | 	sub	local08, local09
02690                 | '   ncy+=1
02690     01 70 06 F1 | 	add	local04, #1
02694     D0 FF 9F FD | 	jmp	#LR__0049
02698                 | LR__0050
02698                 | LR__0051
02698                 | ' repeat while ncy>lines-1
02698                 | LR__0052
02698     94 0E 06 F1 | 	add	objptr, #148
0269c     07 73 02 FB | 	rdlong	local05, objptr
026a0     94 0E 86 F1 | 	sub	objptr, #148
026a4     01 72 86 F1 | 	sub	local05, #1
026a8     39 71 5A F2 | 	cmps	local04, local05 wcz
026ac     20 00 90 ED |  if_be	jmp	#LR__0053
026b0                 | '   ncy-=1
026b0     01 70 86 F1 | 	sub	local04, #1
026b4                 | '   scrollup()
026b4     F4 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
026b8                 | '   cursor_y-=1
026b8     35 0E 06 F1 | 	add	objptr, #53
026bc     07 73 C2 FA | 	rdbyte	local05, objptr
026c0     01 72 86 F1 | 	sub	local05, #1
026c4     07 73 42 FC | 	wrbyte	local05, objptr
026c8     35 0E 86 F1 | 	sub	objptr, #53
026cc     C8 FF 9F FD | 	jmp	#LR__0052
026d0                 | LR__0053
026d0                 | ' 
026d0                 | ' repeat iii from 0 to strsize(text)-1
026d0     00 7C 06 F6 | 	mov	local10, #0
026d4     35 5D 02 F6 | 	mov	arg01, local01
026d8     00 74 06 F6 | 	mov	local06, #0
026dc     30 D9 9F FE | 	loc	pa,	#(@LR__0055-@LR__0054)
026e0     93 00 A0 FD | 	call	#FCACHE_LOAD_
026e4                 | LR__0054
026e4     2E 77 CA FA | 	rdbyte	local07, arg01 wz
026e8     01 74 06 51 |  if_ne	add	local06, #1
026ec     01 5C 06 51 |  if_ne	add	arg01, #1
026f0     F0 FF 9F 5D |  if_ne	jmp	#LR__0054
026f4                 | LR__0055
026f4     3A 2B 02 F6 | 	mov	result1, local06
026f8     15 7F 02 F6 | 	mov	local11, result1
026fc     01 7E 86 F1 | 	sub	local11, #1
02700     00 7E 5E F2 | 	cmps	local11, #0 wcz
02704     01 80 06 16 |  if_a	mov	local12, #1
02708     01 80 66 E6 |  if_be	neg	local12, #1
0270c     40 7F 02 F1 | 	add	local11, local12
02710     44 D9 9F FE | 	loc	pa,	#(@LR__0057-@LR__0056)
02714     93 00 A0 FD | 	call	#FCACHE_LOAD_
02718                 | LR__0056
02718     90 0E 06 F1 | 	add	objptr, #144
0271c     07 83 02 FB | 	rdlong	local13, objptr
02720     5B 0E 86 F1 | 	sub	objptr, #91
02724     07 85 C2 FA | 	rdbyte	local14, objptr
02728     42 83 02 FD | 	qmul	local13, local14
0272c     18 86 62 FD | 	getqx	local15
02730     01 0E 86 F1 | 	sub	objptr, #1
02734     07 83 C2 FA | 	rdbyte	local13, objptr
02738     34 0E 86 F1 | 	sub	objptr, #52
0273c     41 87 02 F1 | 	add	local15, local13
02740     3E 87 02 F1 | 	add	local15, local10
02744     02 86 66 F0 | 	shl	local15, #2
02748     07 89 02 FB | 	rdlong	local16, objptr
0274c     43 89 02 F1 | 	add	local16, local15
02750     44 8B 02 FB | 	rdlong	local17, local16
02754     7F 00 00 FF 
02758     FF 8B 06 F5 | 	and	local17, ##65535
0275c     36 8B 42 F5 | 	or	local17, local02
02760                 | ' 
02760                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
02760     44 8B 62 FC | 	wrlong	local17, local16
02764     40 7D 02 F1 | 	add	local10, local12
02768     3F 7D 0A F2 | 	cmp	local10, local11 wz
0276c     A8 FF 9F 5D |  if_ne	jmp	#LR__0056
02770                 | LR__0057
02770                 | ' 
02770                 | ' outtextxy(cursor_x,cursor_y,text)
02770     34 0E 06 F1 | 	add	objptr, #52
02774     07 5D C2 FA | 	rdbyte	arg01, objptr
02778     01 0E 06 F1 | 	add	objptr, #1
0277c     07 5F C2 FA | 	rdbyte	arg02, objptr
02780     35 0E 86 F1 | 	sub	objptr, #53
02784     35 61 02 F6 | 	mov	arg03, local01
02788     2C FC BF FD | 	call	#_hng030rm_spin2_outtextxy
0278c                 | ' 
0278c                 | ' cursor_x:=ncx
0278c     34 0E 06 F1 | 	add	objptr, #52
02790     07 79 42 FC | 	wrbyte	local08, objptr
02794                 | ' cursor_y:=ncy
02794     01 0E 06 F1 | 	add	objptr, #1
02798     07 71 42 FC | 	wrbyte	local04, objptr
0279c     35 0E 86 F1 | 	sub	objptr, #53
027a0     AF F0 03 F6 | 	mov	ptra, fp
027a4     BF 00 A0 FD | 	call	#popregs_
027a8                 | _hng030rm_spin2_write_ret
027a8     2D 00 64 FD | 	ret
027ac                 | 
027ac                 | ' 
027ac                 | ' ''-----------  Scroll the screen one line up
027ac                 | ' 
027ac                 | ' pub scrollup() | i
027ac                 | _hng030rm_spin2_scrollup
027ac     0A 5A 05 F6 | 	mov	COUNT_, #10
027b0     B0 00 A0 FD | 	call	#pushregs_
027b4     90 0E 06 F1 | 	add	objptr, #144
027b8     07 6B 02 FB | 	rdlong	local01, objptr
027bc     90 0E 86 F1 | 	sub	objptr, #144
027c0     02 6A 66 F0 | 	shl	local01, #2
027c4     07 5F 02 FB | 	rdlong	arg02, objptr
027c8     35 5F 02 F1 | 	add	arg02, local01
027cc     30 0E 06 F1 | 	add	objptr, #48
027d0     07 61 02 FB | 	rdlong	arg03, objptr
027d4     60 0E 06 F1 | 	add	objptr, #96
027d8     07 6D 02 FB | 	rdlong	local02, objptr
027dc     90 0E 86 F1 | 	sub	objptr, #144
027e0     36 61 82 F1 | 	sub	arg03, local02
027e4                 | ' 
027e4                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
027e4     07 5D 02 FB | 	rdlong	arg01, objptr
027e8     EC 35 B0 FD | 	call	#__system__longmove
027ec                 | ' repeat i from buflen-cpl to buflen-1
027ec     30 0E 06 F1 | 	add	objptr, #48
027f0     07 6F 02 FB | 	rdlong	local03, objptr
027f4     60 0E 06 F1 | 	add	objptr, #96
027f8     07 6D 02 FB | 	rdlong	local02, objptr
027fc     36 6F 82 F1 | 	sub	local03, local02
02800     60 0E 86 F1 | 	sub	objptr, #96
02804     07 71 02 FB | 	rdlong	local04, objptr
02808     01 70 86 F1 | 	sub	local04, #1
0280c     07 73 02 FB | 	rdlong	local05, objptr
02810     60 0E 06 F1 | 	add	objptr, #96
02814     07 75 02 FB | 	rdlong	local06, objptr
02818     90 0E 86 F1 | 	sub	objptr, #144
0281c     3A 73 82 F1 | 	sub	local05, local06
02820     39 71 5A F2 | 	cmps	local04, local05 wcz
02824     01 76 06 16 |  if_a	mov	local07, #1
02828     01 76 66 E6 |  if_be	neg	local07, #1
0282c     3B 71 02 F1 | 	add	local04, local07
02830     FC D7 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
02834     93 00 A0 FD | 	call	#FCACHE_LOAD_
02838                 | LR__0058
02838     37 79 02 F6 | 	mov	local08, local03
0283c     02 78 66 F0 | 	shl	local08, #2
02840     07 7B 02 FB | 	rdlong	local09, objptr
02844     3C 7B 02 F1 | 	add	local09, local08
02848     3D 7D 02 FB | 	rdlong	local10, local09
0284c     80 FF 7F FF 
02850     00 7C 06 F5 | 	and	local10, ##-65536
02854     20 7C 46 F5 | 	or	local10, #32
02858                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
02858     3D 7D 62 FC | 	wrlong	local10, local09
0285c     3B 6F 02 F1 | 	add	local03, local07
02860     38 6F 0A F2 | 	cmp	local03, local04 wz
02864     D0 FF 9F 5D |  if_ne	jmp	#LR__0058
02868                 | LR__0059
02868     AF F0 03 F6 | 	mov	ptra, fp
0286c     BF 00 A0 FD | 	call	#popregs_
02870                 | _hng030rm_spin2_scrollup_ret
02870     2D 00 64 FD | 	ret
02874                 | 
02874                 | ' 
02874                 | ' 
02874                 | ' 
02874                 | ' pub inttostr2(i,d):result |q,pos,k,j
02874                 | _hng030rm_spin2_inttostr2
02874                 | ' 
02874                 | ' j:=i
02874     2F 31 02 F6 | 	mov	_var01, arg02
02878     01 30 86 F1 | 	sub	_var01, #1
0287c                 | ' pos:=d-1
0287c     18 33 02 F6 | 	mov	_var02, _var01
02880                 | ' k:=0
02880     44 0E 06 F1 | 	add	objptr, #68
02884     07 5F 02 F1 | 	add	arg02, objptr
02888                 | ' 
02888                 | ' n_string[d]:=0
02888     2F 01 48 FC | 	wrbyte	#0, arg02
0288c                 | ' repeat k from 0 to d-1
0288c     00 34 06 F6 | 	mov	_var03, #0
02890     00 30 5E F2 | 	cmps	_var01, #0 wcz
02894     44 0E 86 F1 | 	sub	objptr, #68
02898     01 36 06 16 |  if_a	mov	_var04, #1
0289c     01 36 66 E6 |  if_be	neg	_var04, #1
028a0     1B 31 02 F1 | 	add	_var01, _var04
028a4     78 D7 9F FE | 	loc	pa,	#(@LR__0061-@LR__0060)
028a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
028ac                 | LR__0060
028ac     1A 39 02 F6 | 	mov	_var05, _var03
028b0     44 0E 06 F1 | 	add	objptr, #68
028b4     07 39 02 F1 | 	add	_var05, objptr
028b8                 | '   n_string[k]:=48
028b8     1C 61 48 FC | 	wrbyte	#48, _var05
028bc     1B 35 02 F1 | 	add	_var03, _var04
028c0     18 35 0A F2 | 	cmp	_var03, _var01 wz
028c4     44 0E 86 F1 | 	sub	objptr, #68
028c8     E0 FF 9F 5D |  if_ne	jmp	#LR__0060
028cc                 | LR__0061
028cc                 | ' 
028cc                 | ' if (j<>0)
028cc     00 5C 0E F2 | 	cmp	arg01, #0 wz
028d0     40 00 90 AD |  if_e	jmp	#LR__0064
028d4                 | ' 
028d4                 | '   repeat while (pos>-1)
028d4                 | LR__0062
028d4     FF FF 7F FF 
028d8     FF 33 5E F2 | 	cmps	_var02, ##-1 wcz
028dc     34 00 90 ED |  if_be	jmp	#LR__0063
028e0     2E 0B 03 F6 | 	mov	muldiva_, arg01
028e4     0A 0C 07 F6 | 	mov	muldivb_, #10
028e8     CC 00 A0 FD | 	call	#unsdivide_
028ec     85 3B 02 F6 | 	mov	_var06, muldiva_
028f0                 | '     q:=j+//10
028f0                 | '     q:=48+q
028f0     30 3A 06 F1 | 	add	_var06, #48
028f4     19 3D 02 F6 | 	mov	_var07, _var02
028f8     44 0E 06 F1 | 	add	objptr, #68
028fc     07 3D 02 F1 | 	add	_var07, objptr
02900                 | '     n_string[pos]:=q
02900     1E 3B 42 FC | 	wrbyte	_var06, _var07
02904                 | '     j:=j+/10
02904     86 5D 02 F6 | 	mov	arg01, muldivb_
02908                 | '     pos-=1
02908     01 32 86 F1 | 	sub	_var02, #1
0290c     44 0E 86 F1 | 	sub	objptr, #68
02910     C0 FF 9F FD | 	jmp	#LR__0062
02914                 | LR__0063
02914                 | LR__0064
02914     44 0E 06 F1 | 	add	objptr, #68
02918     07 2B 02 F6 | 	mov	result1, objptr
0291c     44 0E 86 F1 | 	sub	objptr, #68
02920                 | ' 
02920                 | ' 
02920                 | ' q:=@n_string
02920                 | ' return q
02920                 | _hng030rm_spin2_inttostr2_ret
02920     2D 00 64 FD | 	ret
02924                 | 
02924                 | ' 
02924                 | ' 
02924                 | ' 
02924                 | ' '*************************************************************************
02924                 | ' '                                                                        *
02924                 | ' '  Mode setting and driver start                                                          *
02924                 | ' '                                                                        *
02924                 | ' '*************************************************************************
02924                 | ' 
02924                 | ' ''---------  Set the graphics mode
02924                 | ' 
02924                 | ' 
02924                 | ' 
02924                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02924                 | _hng030rm_spin2_setmode
02924     50 5A 05 F6 | 	mov	COUNT_, #80
02928     B0 00 A0 FD | 	call	#pushregs_
0292c     2E 6B 02 F6 | 	mov	local01, arg01
02930                 | ' 
02930                 | ' '' mode:tn_bb_cc_vv_hh
02930                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02930                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02930                 | ' 
02930                 | ' if mode==(512+192+48)
02930     01 00 00 FF 
02934     F0 6A 0E F2 | 	cmp	local01, ##752 wz
02938                 | '   return 'no RAM
02938     1C 0A 90 AD |  if_e	jmp	#LR__0105
0293c                 | ' 
0293c                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
0293c     35 6D 02 F6 | 	mov	local02, local01
02940     06 6C 46 F0 | 	shr	local02, #6
02944     07 6C 06 F5 | 	and	local02, #7
02948     08 6C 26 F3 | 	fle	local02, #8
0294c     36 6F 02 F6 | 	mov	local03, local02
02950     30 6E 62 FD | 	jmprel	local03
02954                 | LR__0065
02954     20 00 90 FD | 	jmp	#LR__0066
02958     58 00 90 FD | 	jmp	#LR__0067
0295c     90 00 90 FD | 	jmp	#LR__0068
02960     C8 00 90 FD | 	jmp	#LR__0069
02964     00 01 90 FD | 	jmp	#LR__0070
02968     38 01 90 FD | 	jmp	#LR__0071
0296c     70 01 90 FD | 	jmp	#LR__0072
02970     A8 01 90 FD | 	jmp	#LR__0073
02974     E4 01 90 FD | 	jmp	#LR__0074
02978                 | LR__0066
02978                 | ' 
02978                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02978     50 0E 06 F1 | 	add	objptr, #80
0297c     07 5D 02 F6 | 	mov	arg01, objptr
02980     50 0E 86 F1 | 	sub	objptr, #80
02984     0E 00 00 FF 
02988     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
0298c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02990     38 73 02 F6 | 	mov	local05, local04
02994     10 74 06 F6 | 	mov	local06, #16
02998     39 5F 02 F6 | 	mov	arg02, local05
0299c     10 60 06 F6 | 	mov	arg03, #16
029a0     0E 00 00 FF 
029a4     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
029a8     2C 34 B0 FD | 	call	#__system__longmove
029ac     15 77 02 F6 | 	mov	local07, result1
029b0     A8 01 90 FD | 	jmp	#LR__0074
029b4                 | LR__0067
029b4                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
029b4     50 0E 06 F1 | 	add	objptr, #80
029b8     07 5D 02 F6 | 	mov	arg01, objptr
029bc     50 0E 86 F1 | 	sub	objptr, #80
029c0     0E 00 00 FF 
029c4     98 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
029c8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
029cc     38 73 02 F6 | 	mov	local05, local04
029d0     10 74 06 F6 | 	mov	local06, #16
029d4     39 5F 02 F6 | 	mov	arg02, local05
029d8     10 60 06 F6 | 	mov	arg03, #16
029dc     0E 00 00 FF 
029e0     98 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
029e4     F0 33 B0 FD | 	call	#__system__longmove
029e8     15 77 02 F6 | 	mov	local07, result1
029ec     6C 01 90 FD | 	jmp	#LR__0074
029f0                 | LR__0068
029f0                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
029f0     50 0E 06 F1 | 	add	objptr, #80
029f4     07 5D 02 F6 | 	mov	arg01, objptr
029f8     50 0E 86 F1 | 	sub	objptr, #80
029fc     0E 00 00 FF 
02a00     D8 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02a04     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a08     38 73 02 F6 | 	mov	local05, local04
02a0c     10 74 06 F6 | 	mov	local06, #16
02a10     39 5F 02 F6 | 	mov	arg02, local05
02a14     10 60 06 F6 | 	mov	arg03, #16
02a18     0E 00 00 FF 
02a1c     D8 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02a20     B4 33 B0 FD | 	call	#__system__longmove
02a24     15 77 02 F6 | 	mov	local07, result1
02a28     30 01 90 FD | 	jmp	#LR__0074
02a2c                 | LR__0069
02a2c                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02a2c     50 0E 06 F1 | 	add	objptr, #80
02a30     07 5D 02 F6 | 	mov	arg01, objptr
02a34     50 0E 86 F1 | 	sub	objptr, #80
02a38     0E 00 00 FF 
02a3c     18 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02a40     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a44     38 73 02 F6 | 	mov	local05, local04
02a48     10 74 06 F6 | 	mov	local06, #16
02a4c     39 5F 02 F6 | 	mov	arg02, local05
02a50     10 60 06 F6 | 	mov	arg03, #16
02a54     0E 00 00 FF 
02a58     18 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02a5c     78 33 B0 FD | 	call	#__system__longmove
02a60     15 77 02 F6 | 	mov	local07, result1
02a64     F4 00 90 FD | 	jmp	#LR__0074
02a68                 | LR__0070
02a68                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02a68     50 0E 06 F1 | 	add	objptr, #80
02a6c     07 5D 02 F6 | 	mov	arg01, objptr
02a70     50 0E 86 F1 | 	sub	objptr, #80
02a74     0E 00 00 FF 
02a78     58 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02a7c     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02a80     38 73 02 F6 | 	mov	local05, local04
02a84     10 74 06 F6 | 	mov	local06, #16
02a88     39 5F 02 F6 | 	mov	arg02, local05
02a8c     10 60 06 F6 | 	mov	arg03, #16
02a90     0E 00 00 FF 
02a94     58 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02a98     3C 33 B0 FD | 	call	#__system__longmove
02a9c     15 77 02 F6 | 	mov	local07, result1
02aa0     B8 00 90 FD | 	jmp	#LR__0074
02aa4                 | LR__0071
02aa4                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02aa4     50 0E 06 F1 | 	add	objptr, #80
02aa8     07 5D 02 F6 | 	mov	arg01, objptr
02aac     50 0E 86 F1 | 	sub	objptr, #80
02ab0     0E 00 00 FF 
02ab4     98 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02ab8     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02abc     38 73 02 F6 | 	mov	local05, local04
02ac0     10 74 06 F6 | 	mov	local06, #16
02ac4     39 5F 02 F6 | 	mov	arg02, local05
02ac8     10 60 06 F6 | 	mov	arg03, #16
02acc     0E 00 00 FF 
02ad0     98 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02ad4     00 33 B0 FD | 	call	#__system__longmove
02ad8     15 77 02 F6 | 	mov	local07, result1
02adc     7C 00 90 FD | 	jmp	#LR__0074
02ae0                 | LR__0072
02ae0                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02ae0     50 0E 06 F1 | 	add	objptr, #80
02ae4     07 5D 02 F6 | 	mov	arg01, objptr
02ae8     50 0E 86 F1 | 	sub	objptr, #80
02aec     0E 00 00 FF 
02af0     D8 1B 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02af4     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02af8     38 73 02 F6 | 	mov	local05, local04
02afc     10 74 06 F6 | 	mov	local06, #16
02b00     39 5F 02 F6 | 	mov	arg02, local05
02b04     10 60 06 F6 | 	mov	arg03, #16
02b08     0E 00 00 FF 
02b0c     D8 1B 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02b10     C4 32 B0 FD | 	call	#__system__longmove
02b14     15 77 02 F6 | 	mov	local07, result1
02b18     40 00 90 FD | 	jmp	#LR__0074
02b1c                 | LR__0073
02b1c                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02b1c     50 0E 06 F1 | 	add	objptr, #80
02b20     07 79 02 F6 | 	mov	local08, objptr
02b24     3C 7B 02 F6 | 	mov	local09, local08
02b28     0F 00 00 FF 
02b2c     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02b30     0D 71 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02b34     38 73 02 F6 | 	mov	local05, local04
02b38     10 74 06 F6 | 	mov	local06, #16
02b3c     3D 5D 02 F6 | 	mov	arg01, local09
02b40     39 5F 02 F6 | 	mov	arg02, local05
02b44     10 60 06 F6 | 	mov	arg03, #16
02b48     50 0E 86 F1 | 	sub	objptr, #80
02b4c     0F 00 00 FF 
02b50     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02b54     80 32 B0 FD | 	call	#__system__longmove
02b58     15 77 02 F6 | 	mov	local07, result1
02b5c                 | LR__0074
02b5c                 | ' 
02b5c                 | ' ' 4-bit graphics: do nothing with timings :)
02b5c                 | ' if mode<512
02b5c     01 00 00 FF 
02b60     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02b64     20 00 90 3D |  if_ae	jmp	#LR__0075
02b68     0C 00 00 FF 
02b6c     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02b70     0D 7D 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02b74                 | '   palette_ptr:=@ataripalette
02b74     18 0E 06 F1 | 	add	objptr, #24
02b78     07 7D 62 FC | 	wrlong	local10, objptr
02b7c     18 0E 86 F1 | 	sub	objptr, #24
02b80     0C 00 00 FF 
02b84     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02b88                 | LR__0075
02b88                 | ' 
02b88                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02b88     35 6D 02 F6 | 	mov	local02, local01
02b8c     01 00 00 FF 
02b90     30 6C 06 F5 | 	and	local02, ##560
02b94     01 00 00 FF 
02b98     30 6C 0E F2 | 	cmp	local02, ##560 wz
02b9c     48 00 90 5D |  if_ne	jmp	#LR__0076
02ba0                 | '   timings[5]:=4
02ba0     64 0E 06 F1 | 	add	objptr, #100
02ba4     07 09 68 FC | 	wrlong	#4, objptr
02ba8     18 0E 06 F1 | 	add	objptr, #24
02bac     07 7F 02 FB | 	rdlong	local11, objptr
02bb0     01 7E 66 F0 | 	shl	local11, #1
02bb4                 | '   timings[11]:=timings[11]<<1
02bb4     07 7F 62 FC | 	wrlong	local11, objptr
02bb8                 | '   putpixel:=p8
02bb8     6C 0E 06 F1 | 	add	objptr, #108
02bbc     07 6D 02 FB | 	rdlong	local02, objptr
02bc0     10 0E 86 F1 | 	sub	objptr, #16
02bc4     07 6D 62 FC | 	wrlong	local02, objptr
02bc8     0C 00 00 FF 
02bcc     58 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02bd0     0D 81 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
02bd4                 | '   palette_ptr:=@ataripalette
02bd4     C0 0E 86 F1 | 	sub	objptr, #192
02bd8     07 81 62 FC | 	wrlong	local12, objptr
02bdc     18 0E 86 F1 | 	sub	objptr, #24
02be0     0C 00 00 FF 
02be4     58 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02be8                 | LR__0076
02be8                 | ' 
02be8                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02be8     35 6D 02 F6 | 	mov	local02, local01
02bec     01 00 00 FF 
02bf0     30 6C 06 F5 | 	and	local02, ##560
02bf4     01 00 00 FF 
02bf8     10 6C 0E F2 | 	cmp	local02, ##528 wz
02bfc     48 00 90 5D |  if_ne	jmp	#LR__0077
02c00                 | '   timings[5]:=16
02c00     64 0E 06 F1 | 	add	objptr, #100
02c04     07 21 68 FC | 	wrlong	#16, objptr
02c08     18 0E 06 F1 | 	add	objptr, #24
02c0c     07 83 02 FB | 	rdlong	local13, objptr
02c10     01 82 46 F0 | 	shr	local13, #1
02c14                 | '   timings[11]:=timings[11]>>1
02c14     07 83 62 FC | 	wrlong	local13, objptr
02c18                 | '   putpixel:=p2
02c18     64 0E 06 F1 | 	add	objptr, #100
02c1c     07 6D 02 FB | 	rdlong	local02, objptr
02c20     08 0E 86 F1 | 	sub	objptr, #8
02c24     07 6D 62 FC | 	wrlong	local02, objptr
02c28     0C 00 00 FF 
02c2c     08 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02c30     0D 85 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02c34                 | '   palette_ptr:=@fourcolors
02c34     C0 0E 86 F1 | 	sub	objptr, #192
02c38     07 85 62 FC | 	wrlong	local14, objptr
02c3c     18 0E 86 F1 | 	sub	objptr, #24
02c40     0C 00 00 FF 
02c44     08 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02c48                 | LR__0077
02c48                 | ' 
02c48                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02c48     35 6D 02 F6 | 	mov	local02, local01
02c4c     01 00 00 FF 
02c50     30 6C 06 F5 | 	and	local02, ##560
02c54     01 00 00 FF 
02c58     00 6C 0E F2 | 	cmp	local02, ##512 wz
02c5c     48 00 90 5D |  if_ne	jmp	#LR__0078
02c60                 | '   timings[5]:=32
02c60     64 0E 06 F1 | 	add	objptr, #100
02c64     07 41 68 FC | 	wrlong	#32, objptr
02c68     18 0E 06 F1 | 	add	objptr, #24
02c6c     07 87 02 FB | 	rdlong	local15, objptr
02c70     02 86 46 F0 | 	shr	local15, #2
02c74                 | '   timings[11]:=timings[11]>>2
02c74     07 87 62 FC | 	wrlong	local15, objptr
02c78                 | '   putpixel:=p1
02c78     60 0E 06 F1 | 	add	objptr, #96
02c7c     07 6D 02 FB | 	rdlong	local02, objptr
02c80     04 0E 86 F1 | 	sub	objptr, #4
02c84     07 6D 62 FC | 	wrlong	local02, objptr
02c88     0C 00 00 FF 
02c8c     00 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02c90     0D 89 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02c94                 | '   palette_ptr:=@twocolors
02c94     C0 0E 86 F1 | 	sub	objptr, #192
02c98     07 89 62 FC | 	wrlong	local16, objptr
02c9c     18 0E 86 F1 | 	sub	objptr, #24
02ca0     0C 00 00 FF 
02ca4     00 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02ca8                 | LR__0078
02ca8                 | ' 
02ca8                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02ca8     35 6D 02 F6 | 	mov	local02, local01
02cac     01 00 00 FF 
02cb0     30 6C 06 F5 | 	and	local02, ##560
02cb4     01 00 00 FF 
02cb8     20 6C 0E F2 | 	cmp	local02, ##544 wz
02cbc     30 00 90 5D |  if_ne	jmp	#LR__0079
02cc0                 | '   putpixel:=p4
02cc0     E4 0E 06 F1 | 	add	objptr, #228
02cc4     07 6D 02 FB | 	rdlong	local02, objptr
02cc8     0C 0E 86 F1 | 	sub	objptr, #12
02ccc     07 6D 62 FC | 	wrlong	local02, objptr
02cd0     0C 00 00 FF 
02cd4     18 1A 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02cd8     0D 8B 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
02cdc                 | '   palette_ptr:=@vga16
02cdc     C0 0E 86 F1 | 	sub	objptr, #192
02ce0     07 8B 62 FC | 	wrlong	local17, objptr
02ce4     18 0E 86 F1 | 	sub	objptr, #24
02ce8     0C 00 00 FF 
02cec     18 1A 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02cf0                 | LR__0079
02cf0                 | ' 
02cf0                 | ' repeat i from 0 to 4
02cf0     00 8C 06 F6 | 	mov	local18, #0
02cf4     4C D3 9F FE | 	loc	pa,	#(@LR__0081-@LR__0080)
02cf8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02cfc                 | LR__0080
02cfc     46 8F 02 F6 | 	mov	local19, local18
02d00     02 8E 66 F0 | 	shl	local19, #2
02d04     50 0E 06 F1 | 	add	objptr, #80
02d08     07 8F 02 F1 | 	add	local19, objptr
02d0c     2C 0E 86 F1 | 	sub	objptr, #44
02d10     07 91 02 FB | 	rdlong	local20, objptr
02d14     24 0E 86 F1 | 	sub	objptr, #36
02d18     11 90 66 F0 | 	shl	local20, #17
02d1c     47 93 02 FB | 	rdlong	local21, local19
02d20     48 93 02 F1 | 	add	local21, local20
02d24     49 95 02 F6 | 	mov	local22, local21
02d28     80 40 38 FF 
02d2c     00 94 06 F1 | 	add	local22, ##1887502336
02d30                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02d30     47 95 62 FC | 	wrlong	local22, local19
02d34     01 8C 06 F1 | 	add	local18, #1
02d38     05 8C 5E F2 | 	cmps	local18, #5 wcz
02d3c     BC FF 9F CD |  if_b	jmp	#LR__0080
02d40                 | LR__0081
02d40     24 0E 06 F1 | 	add	objptr, #36
02d44     07 97 02 FB | 	rdlong	local23, objptr
02d48     11 96 66 F0 | 	shl	local23, #17
02d4c     40 0E 06 F1 | 	add	objptr, #64
02d50     07 99 02 FB | 	rdlong	local24, objptr
02d54     4B 99 02 F1 | 	add	local24, local23
02d58                 | ' timings[5]:=timings[5]+hdmibase<<17
02d58     07 99 62 FC | 	wrlong	local24, objptr
02d5c                 | ' clkfreq:=timings[13]
02d5c     20 0E 06 F1 | 	add	objptr, #32
02d60     07 6D 02 FB | 	rdlong	local02, objptr
02d64     14 6C 66 FC | 	wrlong	local02, #20
02d68                 | ' hubset(timings[14])
02d68     04 0E 06 F1 | 	add	objptr, #4
02d6c     07 5D 02 FB | 	rdlong	arg01, objptr
02d70     88 0E 86 F1 | 	sub	objptr, #136
02d74     00 5C 62 FD | 	hubset	arg01
02d78                 | ' waitms(1)
02d78     01 5C 06 F6 | 	mov	arg01, #1
02d7c     F8 32 B0 FD | 	call	#__system___waitms
02d80     35 9B 02 F6 | 	mov	local25, local01
02d84     03 9A 06 F5 | 	and	local25, #3
02d88     4D 9D C2 F9 | 	decod	local26, local25
02d8c                 | ' 
02d8c                 | ' 
02d8c                 | ' xzoom:=1<<(mode & 3)
02d8c     CC 0E 06 F1 | 	add	objptr, #204
02d90     07 9D 62 FC | 	wrlong	local26, objptr
02d94                 | ' 
02d94                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02d94     4E 79 02 F6 | 	mov	local08, local26
02d98     CC 0E 86 F1 | 	sub	objptr, #204
02d9c     08 78 0E F2 | 	cmp	local08, #8 wz
02da0     24 00 90 5D |  if_ne	jmp	#LR__0082
02da4     35 7B 02 F6 | 	mov	local09, local01
02da8     04 7A 46 F0 | 	shr	local09, #4
02dac     03 7A 06 F5 | 	and	local09, #3
02db0     03 7A 0E F2 | 	cmp	local09, #3 wz
02db4     10 00 90 AD |  if_e	jmp	#LR__0082
02db8                 | '   xzoom:=4
02db8     04 6C 06 F6 | 	mov	local02, #4
02dbc     CC 0E 06 F1 | 	add	objptr, #204
02dc0     07 09 68 FC | 	wrlong	#4, objptr
02dc4     CC 0E 86 F1 | 	sub	objptr, #204
02dc8                 | LR__0082
02dc8     35 9F 02 F6 | 	mov	local27, local01
02dcc     02 9E 46 F0 | 	shr	local27, #2
02dd0     03 9E 06 F5 | 	and	local27, #3
02dd4     4F A1 C2 F9 | 	decod	local28, local27
02dd8                 | ' 
02dd8                 | ' yzoom:=1<<((mode>>2) & 3)
02dd8     D0 0E 06 F1 | 	add	objptr, #208
02ddc     07 A1 62 FC | 	wrlong	local28, objptr
02de0     04 0E 86 F1 | 	sub	objptr, #4
02de4     07 79 02 FB | 	rdlong	local08, objptr
02de8     04 0E 06 F1 | 	add	objptr, #4
02dec     07 71 02 FB | 	rdlong	local04, objptr
02df0     38 79 02 FD | 	qmul	local08, local04
02df4     18 A2 62 FD | 	getqx	local29
02df8                 | ' azoom:=xzoom*yzoom
02df8     04 0E 06 F1 | 	add	objptr, #4
02dfc     07 A3 62 FC | 	wrlong	local29, objptr
02e00                 | ' 
02e00                 | ' cpl:=timings[11]
02e00     58 0E 86 F1 | 	sub	objptr, #88
02e04     07 6D 02 FB | 	rdlong	local02, objptr
02e08     14 0E 06 F1 | 	add	objptr, #20
02e0c     07 6D 62 FC | 	wrlong	local02, objptr
02e10     90 0E 86 F1 | 	sub	objptr, #144
02e14                 | ' if (mode<512)
02e14     01 00 00 FF 
02e18     00 6A 5E F2 | 	cmps	local01, ##512 wcz
02e1c     60 00 90 3D |  if_ae	jmp	#LR__0083
02e20     80 0E 06 F1 | 	add	objptr, #128
02e24     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e28     04 0A 47 F0 | 	shr	muldiva_, #4
02e2c     50 0E 06 F1 | 	add	objptr, #80
02e30     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e34     D0 0E 86 F1 | 	sub	objptr, #208
02e38     CC 00 A0 FD | 	call	#unsdivide_
02e3c                 | '   lines:=(timings[12]>>4)+/yzoom
02e3c     94 0E 06 F1 | 	add	objptr, #148
02e40     07 0D 63 FC | 	wrlong	muldivb_, objptr
02e44                 | '   if ((timings[12]>>4)+//yzoom) <>0
02e44     14 0E 86 F1 | 	sub	objptr, #20
02e48     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e4c     04 0A 47 F0 | 	shr	muldiva_, #4
02e50     50 0E 06 F1 | 	add	objptr, #80
02e54     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e58     D0 0E 86 F1 | 	sub	objptr, #208
02e5c     CC 00 A0 FD | 	call	#unsdivide_
02e60     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02e64     AC 00 90 AD |  if_e	jmp	#LR__0086
02e68                 | '     lines +=1
02e68     94 0E 06 F1 | 	add	objptr, #148
02e6c     07 6D 02 FB | 	rdlong	local02, objptr
02e70     01 6C 06 F1 | 	add	local02, #1
02e74     07 6D 62 FC | 	wrlong	local02, objptr
02e78     94 0E 86 F1 | 	sub	objptr, #148
02e7c                 | ' 
02e7c                 | ' else
02e7c     94 00 90 FD | 	jmp	#LR__0086
02e80                 | LR__0083
02e80     80 0E 06 F1 | 	add	objptr, #128
02e84     07 0B 03 FB | 	rdlong	muldiva_, objptr
02e88     50 0E 06 F1 | 	add	objptr, #80
02e8c     07 0D 03 FB | 	rdlong	muldivb_, objptr
02e90     D0 0E 86 F1 | 	sub	objptr, #208
02e94     D0 00 A0 FD | 	call	#divide_
02e98                 | '   lines:=timings[12]/yzoom
02e98     94 0E 06 F1 | 	add	objptr, #148
02e9c     07 0D 63 FC | 	wrlong	muldivb_, objptr
02ea0                 | '   if cpl//xzoom==0
02ea0     04 0E 86 F1 | 	sub	objptr, #4
02ea4     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ea8     3C 0E 06 F1 | 	add	objptr, #60
02eac     07 0D 03 FB | 	rdlong	muldivb_, objptr
02eb0     CC 0E 86 F1 | 	sub	objptr, #204
02eb4     D0 00 A0 FD | 	call	#divide_
02eb8     00 0A 0F F2 | 	cmp	muldiva_, #0 wz
02ebc     28 00 90 5D |  if_ne	jmp	#LR__0084
02ec0                 | '     cpl:=cpl/xzoom
02ec0     90 0E 06 F1 | 	add	objptr, #144
02ec4     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ec8     3C 0E 06 F1 | 	add	objptr, #60
02ecc     07 0D 03 FB | 	rdlong	muldivb_, objptr
02ed0     CC 0E 86 F1 | 	sub	objptr, #204
02ed4     D0 00 A0 FD | 	call	#divide_
02ed8     90 0E 06 F1 | 	add	objptr, #144
02edc     07 0D 63 FC | 	wrlong	muldivb_, objptr
02ee0     90 0E 86 F1 | 	sub	objptr, #144
02ee4                 | '   else
02ee4     2C 00 90 FD | 	jmp	#LR__0085
02ee8                 | LR__0084
02ee8     90 0E 06 F1 | 	add	objptr, #144
02eec     07 0B 03 FB | 	rdlong	muldiva_, objptr
02ef0     3C 0E 06 F1 | 	add	objptr, #60
02ef4     07 0D 03 FB | 	rdlong	muldivb_, objptr
02ef8     CC 0E 86 F1 | 	sub	objptr, #204
02efc     D0 00 A0 FD | 	call	#divide_
02f00     86 A5 02 F6 | 	mov	local30, muldivb_
02f04     01 A4 06 F1 | 	add	local30, #1
02f08                 | '     cpl:=cpl/xzoom+1
02f08     90 0E 06 F1 | 	add	objptr, #144
02f0c     07 A5 62 FC | 	wrlong	local30, objptr
02f10     90 0E 86 F1 | 	sub	objptr, #144
02f14                 | LR__0085
02f14                 | LR__0086
02f14     90 0E 06 F1 | 	add	objptr, #144
02f18     07 79 02 FB | 	rdlong	local08, objptr
02f1c     04 0E 06 F1 | 	add	objptr, #4
02f20     07 71 02 FB | 	rdlong	local04, objptr
02f24     38 79 02 FD | 	qmul	local08, local04
02f28     18 A6 62 FD | 	getqx	local31
02f2c                 | ' 
02f2c                 | ' buflen:=(cpl*lines)
02f2c     64 0E 86 F1 | 	sub	objptr, #100
02f30     07 A7 62 FC | 	wrlong	local31, objptr
02f34     30 0E 86 F1 | 	sub	objptr, #48
02f38     02 A6 66 F0 | 	shl	local31, #2
02f3c     13 A8 C6 F9 | 	decod	local32, #19
02f40     53 A9 82 F1 | 	sub	local32, local31
02f44                 | ' buf_ptr:=$80000-4*buflen
02f44     07 A9 62 FC | 	wrlong	local32, objptr
02f48     50 0E 06 F1 | 	add	objptr, #80
02f4c     07 AB 02 F6 | 	mov	local33, objptr
02f50                 | ' mode_ptr:=@timings
02f50     3C 0E 86 F1 | 	sub	objptr, #60
02f54     07 AB 62 FC | 	wrlong	local33, objptr
02f58                 | ' graphmode:=mode
02f58     B0 0E 06 F1 | 	add	objptr, #176
02f5c     07 6B 62 FC | 	wrlong	local01, objptr
02f60     C4 0E 86 F1 | 	sub	objptr, #196
02f64                 | ' makedl(mode)
02f64     35 5D 02 F6 | 	mov	arg01, local01
02f68                 | ' 
02f68                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02f68                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02f68                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02f68                 | ' 
02f68                 | ' '   0 - display a up/down border line
02f68                 | ' 
02f68                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02f68                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02f68                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02f68                 | ' '    nnnn - font line to display, 0..15
02f68                 | ' '    llllll - character line, determines the cursor Y position
02f68                 | ' 
02f68                 | ' 
02f68                 | ' if (mode &256==0)
02f68     00 5D CE F7 | 	test	arg01, #256 wz
02f6c     1C 00 90 5D |  if_ne	jmp	#LR__0087
02f70     07 AD 02 FB | 	rdlong	local34, objptr
02f74     04 00 00 FF 
02f78     00 AD 86 F1 | 	sub	local34, ##2304
02f7c                 | '   dl_ptr:=buf_ptr-4*576
02f7c     1C 0E 06 F1 | 	add	objptr, #28
02f80     07 AD 62 FC | 	wrlong	local34, objptr
02f84     1C 0E 86 F1 | 	sub	objptr, #28
02f88                 | ' else
02f88     18 00 90 FD | 	jmp	#LR__0088
02f8c                 | LR__0087
02f8c     07 AF 02 FB | 	rdlong	local35, objptr
02f90     03 00 00 FF 
02f94     C0 AF 86 F1 | 	sub	local35, ##1984
02f98                 | '   dl_ptr:=buf_ptr-4*496
02f98     1C 0E 06 F1 | 	add	objptr, #28
02f9c     07 AF 62 FC | 	wrlong	local35, objptr
02fa0     1C 0E 86 F1 | 	sub	objptr, #28
02fa4                 | LR__0088
02fa4     2E B1 02 F6 | 	mov	local36, arg01
02fa8     02 B0 46 F0 | 	shr	local36, #2
02fac     03 B0 06 F5 | 	and	local36, #3
02fb0                 | '  ' dl_ptr:=buf_ptr-4*540
02fb0                 | ' 
02fb0                 | ' vzoom:=((mode>>2) & 3)
02fb0                 | ' 
02fb0                 | ' 
02fb0                 | ' if mode<512 '' text modes
02fb0     01 00 00 FF 
02fb4     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
02fb8     E4 01 90 3D |  if_ae	jmp	#LR__0096
02fbc                 | ' 
02fbc                 | '   if timings[6]>0 'borders
02fbc     68 0E 06 F1 | 	add	objptr, #104
02fc0     07 B3 02 FB | 	rdlong	local37, objptr
02fc4     68 0E 86 F1 | 	sub	objptr, #104
02fc8     00 B2 5E F2 | 	cmps	local37, #0 wcz
02fcc     D4 00 90 ED |  if_be	jmp	#LR__0093
02fd0                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02fd0     00 B4 06 F6 | 	mov	local38, #0
02fd4     68 0E 06 F1 | 	add	objptr, #104
02fd8     07 B7 02 FB | 	rdlong	local39, objptr
02fdc     68 0E 86 F1 | 	sub	objptr, #104
02fe0     01 B6 86 F1 | 	sub	local39, #1
02fe4     00 B6 5E F2 | 	cmps	local39, #0 wcz
02fe8     01 B8 06 16 |  if_a	mov	local40, #1
02fec     01 B8 66 E6 |  if_be	neg	local40, #1
02ff0     5C BB 02 F6 | 	mov	local41, local40
02ff4     5C B7 02 F1 | 	add	local39, local40
02ff8     2C D0 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
02ffc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03000                 | LR__0089
03000     5A BD 02 F6 | 	mov	local42, local38
03004     02 BC 66 F0 | 	shl	local42, #2
03008     1C 0E 06 F1 | 	add	objptr, #28
0300c     07 BF 02 FB | 	rdlong	local43, objptr
03010     1C 0E 86 F1 | 	sub	objptr, #28
03014     5E BF 02 F1 | 	add	local43, local42
03018                 | '       long[dl_ptr+4*i]:=$0
03018     5F 01 68 FC | 	wrlong	#0, local43
0301c     5D B5 02 F1 | 	add	local38, local41
03020     5B B5 0A F2 | 	cmp	local38, local39 wz
03024     D8 FF 9F 5D |  if_ne	jmp	#LR__0089
03028                 | LR__0090
03028                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03028     68 0E 06 F1 | 	add	objptr, #104
0302c     07 B5 02 FB | 	rdlong	local38, objptr
03030     18 0E 06 F1 | 	add	objptr, #24
03034     07 B9 02 FB | 	rdlong	local40, objptr
03038     5C B5 02 F1 | 	add	local38, local40
0303c     0C 0E 06 F1 | 	add	objptr, #12
03040     07 C1 02 FB | 	rdlong	local44, objptr
03044     01 C0 86 F1 | 	sub	local44, #1
03048     24 0E 86 F1 | 	sub	objptr, #36
0304c     07 C3 02 FB | 	rdlong	local45, objptr
03050     18 0E 06 F1 | 	add	objptr, #24
03054     07 C5 02 FB | 	rdlong	local46, objptr
03058     80 0E 86 F1 | 	sub	objptr, #128
0305c     62 C3 02 F1 | 	add	local45, local46
03060     61 C1 5A F2 | 	cmps	local44, local45 wcz
03064     01 C6 06 16 |  if_a	mov	local47, #1
03068     01 C6 66 E6 |  if_be	neg	local47, #1
0306c     63 C9 02 F6 | 	mov	local48, local47
03070     63 C1 02 F1 | 	add	local44, local47
03074     B0 CF 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
03078     93 00 A0 FD | 	call	#FCACHE_LOAD_
0307c                 | LR__0091
0307c     5A CB 02 F6 | 	mov	local49, local38
03080     02 CA 66 F0 | 	shl	local49, #2
03084     1C 0E 06 F1 | 	add	objptr, #28
03088     07 CD 02 FB | 	rdlong	local50, objptr
0308c     1C 0E 86 F1 | 	sub	objptr, #28
03090     65 CD 02 F1 | 	add	local50, local49
03094                 | '       long[dl_ptr+4*i]:=$0
03094     66 01 68 FC | 	wrlong	#0, local50
03098     64 B5 02 F1 | 	add	local38, local48
0309c     60 B5 0A F2 | 	cmp	local38, local44 wz
030a0     D8 FF 9F 5D |  if_ne	jmp	#LR__0091
030a4                 | LR__0092
030a4                 | LR__0093
030a4     10 CE 06 F6 | 	mov	local51, #16
030a8     58 CF 62 F0 | 	shl	local51, local36
030ac                 | '   lpc:=16<<vzoom
030ac                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
030ac     68 0E 06 F1 | 	add	objptr, #104
030b0     07 B5 02 FB | 	rdlong	local38, objptr
030b4     5A D1 02 F6 | 	mov	local52, local38
030b8     18 0E 06 F1 | 	add	objptr, #24
030bc     07 D3 02 FB | 	rdlong	local53, objptr
030c0     69 D1 02 F1 | 	add	local52, local53
030c4     01 D0 86 F1 | 	sub	local52, #1
030c8     18 0E 86 F1 | 	sub	objptr, #24
030cc     07 C7 02 FB | 	rdlong	local47, objptr
030d0     68 0E 86 F1 | 	sub	objptr, #104
030d4     63 D1 5A F2 | 	cmps	local52, local47 wcz
030d8     01 D4 06 16 |  if_a	mov	local54, #1
030dc     01 D4 66 E6 |  if_be	neg	local54, #1
030e0     6A D7 02 F6 | 	mov	local55, local54
030e4     6A D1 02 F1 | 	add	local52, local54
030e8     C4 CF 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
030ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
030f0                 | LR__0094
030f0     5A 0B 03 F6 | 	mov	muldiva_, local38
030f4     68 0E 06 F1 | 	add	objptr, #104
030f8     07 D9 02 FB | 	rdlong	local56, objptr
030fc     68 0E 86 F1 | 	sub	objptr, #104
03100     6C 0B 83 F1 | 	sub	muldiva_, local56
03104     67 0D 03 F6 | 	mov	muldivb_, local51
03108     CC 00 A0 FD | 	call	#unsdivide_
0310c     58 0B 43 F0 | 	shr	muldiva_, local36
03110                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
03110     85 DB 02 F6 | 	mov	local57, muldiva_
03114     5A 0B 03 F6 | 	mov	muldiva_, local38
03118     68 0E 06 F1 | 	add	objptr, #104
0311c     07 D9 02 FB | 	rdlong	local56, objptr
03120     68 0E 86 F1 | 	sub	objptr, #104
03124     6C 0B 83 F1 | 	sub	muldiva_, local56
03128     67 0D 03 F6 | 	mov	muldivb_, local51
0312c     CC 00 A0 FD | 	call	#unsdivide_
03130     86 DD 02 F6 | 	mov	local58, muldivb_
03134                 | '     charline:=(i-timings[6])+/lpc
03134     90 0E 06 F1 | 	add	objptr, #144
03138     07 D9 02 FB | 	rdlong	local56, objptr
0313c     90 0E 86 F1 | 	sub	objptr, #144
03140     6E D9 02 FD | 	qmul	local56, local58
03144     18 DE 62 FD | 	getqx	local59
03148     02 DE 66 F0 | 	shl	local59, #2
0314c     07 E1 02 FB | 	rdlong	local60, objptr
03150     6F E1 02 F1 | 	add	local60, local59
03154     2E E3 02 F6 | 	mov	local61, arg01
03158     03 E2 06 F5 | 	and	local61, #3
0315c     71 E1 02 F1 | 	add	local60, local61
03160                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
03160     0C E0 66 F0 | 	shl	local60, #12
03164     08 DA 66 F0 | 	shl	local57, #8
03168     6D E1 02 F1 | 	add	local60, local57
0316c     02 DC 66 F0 | 	shl	local58, #2
03170     6E E1 02 F1 | 	add	local60, local58
03174     01 E0 06 F1 | 	add	local60, #1
03178     5A E5 02 F6 | 	mov	local62, local38
0317c     02 E4 66 F0 | 	shl	local62, #2
03180     1C 0E 06 F1 | 	add	objptr, #28
03184     07 E7 02 FB | 	rdlong	local63, objptr
03188     1C 0E 86 F1 | 	sub	objptr, #28
0318c     72 E7 02 F1 | 	add	local63, local62
03190                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03190     73 E1 62 FC | 	wrlong	local60, local63
03194     6B B5 02 F1 | 	add	local38, local55
03198     68 B5 0A F2 | 	cmp	local38, local52 wz
0319c     50 FF 9F 5D |  if_ne	jmp	#LR__0094
031a0                 | LR__0095
031a0                 | LR__0096
031a0                 | ' 
031a0                 | ' 
031a0                 | ' 
031a0                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
031a0     01 00 00 FF 
031a4     00 5C 5E F2 | 	cmps	arg01, ##512 wcz
031a8     AC 01 90 CD |  if_b	jmp	#LR__0104
031ac                 | ' 
031ac                 | '   if timings[6]>0 'borders
031ac     68 0E 06 F1 | 	add	objptr, #104
031b0     07 B3 02 FB | 	rdlong	local37, objptr
031b4     68 0E 86 F1 | 	sub	objptr, #104
031b8     00 B2 5E F2 | 	cmps	local37, #0 wcz
031bc     D4 00 90 ED |  if_be	jmp	#LR__0101
031c0                 | '     repeat i from 0 to timings[6]-1 '0 to -1
031c0     00 B4 06 F6 | 	mov	local38, #0
031c4     68 0E 06 F1 | 	add	objptr, #104
031c8     07 E9 02 FB | 	rdlong	local64, objptr
031cc     68 0E 86 F1 | 	sub	objptr, #104
031d0     01 E8 86 F1 | 	sub	local64, #1
031d4     00 E8 5E F2 | 	cmps	local64, #0 wcz
031d8     01 B8 06 16 |  if_a	mov	local40, #1
031dc     01 B8 66 E6 |  if_be	neg	local40, #1
031e0     5C EB 02 F6 | 	mov	local65, local40
031e4     5C E9 02 F1 | 	add	local64, local40
031e8     3C CE 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
031ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
031f0                 | LR__0097
031f0     5A ED 02 F6 | 	mov	local66, local38
031f4     02 EC 66 F0 | 	shl	local66, #2
031f8     1C 0E 06 F1 | 	add	objptr, #28
031fc     07 EF 02 FB | 	rdlong	local67, objptr
03200     1C 0E 86 F1 | 	sub	objptr, #28
03204     76 EF 02 F1 | 	add	local67, local66
03208                 | '       long[dl_ptr+4*i]:=$0
03208     77 01 68 FC | 	wrlong	#0, local67
0320c     75 B5 02 F1 | 	add	local38, local65
03210     74 B5 0A F2 | 	cmp	local38, local64 wz
03214     D8 FF 9F 5D |  if_ne	jmp	#LR__0097
03218                 | LR__0098
03218                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03218     68 0E 06 F1 | 	add	objptr, #104
0321c     07 B5 02 FB | 	rdlong	local38, objptr
03220     18 0E 06 F1 | 	add	objptr, #24
03224     07 B9 02 FB | 	rdlong	local40, objptr
03228     5C B5 02 F1 | 	add	local38, local40
0322c     0C 0E 06 F1 | 	add	objptr, #12
03230     07 F1 02 FB | 	rdlong	local68, objptr
03234     01 F0 86 F1 | 	sub	local68, #1
03238     24 0E 86 F1 | 	sub	objptr, #36
0323c     07 C3 02 FB | 	rdlong	local45, objptr
03240     18 0E 06 F1 | 	add	objptr, #24
03244     07 C5 02 FB | 	rdlong	local46, objptr
03248     80 0E 86 F1 | 	sub	objptr, #128
0324c     62 C3 02 F1 | 	add	local45, local46
03250     61 F1 5A F2 | 	cmps	local68, local45 wcz
03254     01 C6 06 16 |  if_a	mov	local47, #1
03258     01 C6 66 E6 |  if_be	neg	local47, #1
0325c     63 F3 02 F6 | 	mov	local69, local47
03260     63 F1 02 F1 | 	add	local68, local47
03264     C0 CD 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
03268     93 00 A0 FD | 	call	#FCACHE_LOAD_
0326c                 | LR__0099
0326c     5A F5 02 F6 | 	mov	local70, local38
03270     02 F4 66 F0 | 	shl	local70, #2
03274     1C 0E 06 F1 | 	add	objptr, #28
03278     07 F7 02 FB | 	rdlong	local71, objptr
0327c     1C 0E 86 F1 | 	sub	objptr, #28
03280     7A F7 02 F1 | 	add	local71, local70
03284                 | '       long[dl_ptr+4*i]:=$0
03284     7B 01 68 FC | 	wrlong	#0, local71
03288     79 B5 02 F1 | 	add	local38, local69
0328c     78 B5 0A F2 | 	cmp	local38, local68 wz
03290     D8 FF 9F 5D |  if_ne	jmp	#LR__0099
03294                 | LR__0100
03294                 | LR__0101
03294                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03294     68 0E 06 F1 | 	add	objptr, #104
03298     07 B5 02 FB | 	rdlong	local38, objptr
0329c     5A F9 02 F6 | 	mov	local72, local38
032a0     18 0E 06 F1 | 	add	objptr, #24
032a4     07 D3 02 FB | 	rdlong	local53, objptr
032a8     69 F9 02 F1 | 	add	local72, local53
032ac     01 F8 86 F1 | 	sub	local72, #1
032b0     18 0E 86 F1 | 	sub	objptr, #24
032b4     07 C7 02 FB | 	rdlong	local47, objptr
032b8     68 0E 86 F1 | 	sub	objptr, #104
032bc     63 F9 5A F2 | 	cmps	local72, local47 wcz
032c0     01 D4 06 16 |  if_a	mov	local54, #1
032c4     01 D4 66 E6 |  if_be	neg	local54, #1
032c8     6A FB 02 F6 | 	mov	local73, local54
032cc     6A F9 02 F1 | 	add	local72, local54
032d0     AC CD 9F FE | 	loc	pa,	#(@LR__0103-@LR__0102)
032d4     93 00 A0 FD | 	call	#FCACHE_LOAD_
032d8                 | LR__0102
032d8     5A FD 02 F6 | 	mov	local74, local38
032dc     68 0E 06 F1 | 	add	objptr, #104
032e0     07 D9 02 FB | 	rdlong	local56, objptr
032e4     6C FD 82 F1 | 	sub	local74, local56
032e8     58 FD 42 F0 | 	shr	local74, local36
032ec     28 0E 06 F1 | 	add	objptr, #40
032f0     07 D9 02 FB | 	rdlong	local56, objptr
032f4     90 0E 86 F1 | 	sub	objptr, #144
032f8     7E D9 02 FD | 	qmul	local56, local74
032fc     18 FE 62 FD | 	getqx	local75
03300     02 FE 66 F0 | 	shl	local75, #2
03304     07 01 03 FB | 	rdlong	local76, objptr
03308     7F 01 03 F1 | 	add	local76, local75
0330c     2E 03 03 F6 | 	mov	local77, arg01
03310     03 02 07 F5 | 	and	local77, #3
03314     81 01 03 F1 | 	add	local76, local77
03318                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03318     0C 00 67 F0 | 	shl	local76, #12
0331c     02 00 07 F1 | 	add	local76, #2
03320     2E 05 03 F6 | 	mov	local78, arg01
03324     30 04 07 F5 | 	and	local78, #48
03328     02 04 47 F0 | 	shr	local78, #2
0332c     82 01 03 F1 | 	add	local76, local78
03330     5A 07 03 F6 | 	mov	local79, local38
03334     02 06 67 F0 | 	shl	local79, #2
03338     1C 0E 06 F1 | 	add	objptr, #28
0333c     07 09 03 FB | 	rdlong	local80, objptr
03340     1C 0E 86 F1 | 	sub	objptr, #28
03344     83 09 03 F1 | 	add	local80, local79
03348                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03348     84 01 63 FC | 	wrlong	local76, local80
0334c     7D B5 02 F1 | 	add	local38, local73
03350     7C B5 0A F2 | 	cmp	local38, local72 wz
03354     80 FF 9F 5D |  if_ne	jmp	#LR__0102
03358                 | LR__0103
03358                 | LR__0104
03358                 | LR__0105
03358     AF F0 03 F6 | 	mov	ptra, fp
0335c     BF 00 A0 FD | 	call	#popregs_
03360                 | _hng030rm_spin2_setmode_ret
03360     2D 00 64 FD | 	ret
03364                 | 
03364                 | ' 
03364                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
03364                 | _retrocog_spin2_serialcog
03364     1C 5A 05 F6 | 	mov	COUNT_, #28
03368     B0 00 A0 FD | 	call	#pushregs_
0336c                 | ' 
0336c                 | ' 'start serial and midi
0336c                 | ' 
0336c                 | ' serial_start(rxpin, txpin, baudrate)
0336c     20 5C 06 F6 | 	mov	arg01, #32
03370     21 5E 06 F6 | 	mov	arg02, #33
03374     A6 0E 00 FF 
03378     00 60 06 F6 | 	mov	arg03, ##1920000
0337c     D8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03380                 | ' serial_start(midiin,midiout,mbaudrate)
03380     1D 5C 06 F6 | 	mov	arg01, #29
03384     1E 5E 06 F6 | 	mov	arg02, #30
03388     3D 00 00 FF 
0338c     12 60 06 F6 | 	mov	arg03, ##31250
03390     C4 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03394                 | ' serial_start(srxpin,stxpin,sbaudrate)
03394     42 0F 00 FF 
03398     80 6A 06 F6 | 	mov	local01, ##2000000
0339c     3F 5C 06 F6 | 	mov	arg01, #63
033a0     3E 5E 06 F6 | 	mov	arg02, #62
033a4     42 0F 00 FF 
033a8     80 60 06 F6 | 	mov	arg03, ##2000000
033ac     A8 05 B0 FD | 	call	#_retrocog_spin2_serial_start
033b0                 | ' 
033b0                 | ' mb:=(-1)
033b0     01 6C 66 F6 | 	neg	local02, #1
033b4                 | ' b:=(-1)
033b4     01 6E 66 F6 | 	neg	local03, #1
033b8                 | ' 
033b8                 | ' mousefront:=0
033b8     00 70 06 F6 | 	mov	local04, #0
033bc     08 0E 06 F1 | 	add	objptr, #8
033c0     07 01 68 FC | 	wrlong	#0, objptr
033c4                 | ' mousetail:=0
033c4     04 0E 06 F1 | 	add	objptr, #4
033c8     07 01 68 FC | 	wrlong	#0, objptr
033cc     0C 0E 86 F1 | 	sub	objptr, #12
033d0                 | ' kbdfront:=0
033d0     07 01 68 FC | 	wrlong	#0, objptr
033d4                 | ' kbdtail:=0
033d4     04 0E 06 F1 | 	add	objptr, #4
033d8     07 01 68 FC | 	wrlong	#0, objptr
033dc                 | ' midifront:=0
033dc     0C 0E 06 F1 | 	add	objptr, #12
033e0     07 01 68 FC | 	wrlong	#0, objptr
033e4                 | ' miditail:=0
033e4     04 0E 06 F1 | 	add	objptr, #4
033e8     07 01 68 FC | 	wrlong	#0, objptr
033ec                 | ' serialfront:=0
033ec     04 0E 06 F1 | 	add	objptr, #4
033f0     07 01 68 FC | 	wrlong	#0, objptr
033f4                 | ' serialtail:=0
033f4     04 0E 06 F1 | 	add	objptr, #4
033f8     07 01 68 FC | 	wrlong	#0, objptr
033fc                 | ' long[$30]:=0
033fc     30 00 6C FC | 	wrlong	#0, #48
03400                 | ' long[$34]:=0
03400     34 00 6C FC | 	wrlong	#0, #52
03404                 | ' long[$38]:=0
03404     38 00 6C FC | 	wrlong	#0, #56
03408     1C 0E 86 F1 | 	sub	objptr, #28
0340c                 | ' long[$3C]:=0
0340c     3C 00 6C FC | 	wrlong	#0, #60
03410                 | ' 
03410                 | ' repeat
03410                 | LR__0106
03410                 | ' 
03410                 | ' '  repeat 
03410                 | '   rr:=rxcheck(rxpin)
03410     20 5C 06 F6 | 	mov	arg01, #32
03414     BC 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03418     15 73 02 F6 | 	mov	local05, result1
0341c                 | '   mrr:=rxcheck(midiin)
0341c     1D 5C 06 F6 | 	mov	arg01, #29
03420     B0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03424     15 75 02 F6 | 	mov	local06, result1
03428                 | '   srr:=rxcheck(srxpin)
03428     3F 70 06 F6 | 	mov	local04, #63
0342c     3F 5C 06 F6 | 	mov	arg01, #63
03430     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
03434     15 77 02 F6 | 	mov	local07, result1
03438     3B 79 02 F6 | 	mov	local08, local07
0343c                 | ' 
0343c                 | ' '  until rr>=0 || mrr>=0  || srr>=0
0343c                 | ' 
0343c                 | '   
0343c                 | ' ' midi. Must be >= $80 for a command
0343c                 | ' '$80-$8F - 3 bytes note off. note, velocity
0343c                 | ' '$90-$9F - 3 bytes note on, note, velocity
0343c                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
0343c                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
0343c                 | ' '$C0-$CF - 2 bytes program change
0343c                 | ' '$D0-$DF - 2 bytes mono aftertouch
0343c                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
0343c                 | ' '$F0-$FF - 1 byte
0343c                 | '   
0343c                 | '   if srr>=0
0343c     00 78 5E F2 | 	cmps	local08, #0 wcz
03440     7C 00 90 CD |  if_b	jmp	#LR__0108
03444                 | '   
03444                 | '     if serialfront<>((serialtail-1) //32)
03444     1C 0E 06 F1 | 	add	objptr, #28
03448     07 77 02 FB | 	rdlong	local07, objptr
0344c     3B 71 02 F6 | 	mov	local04, local07
03450     01 70 86 F1 | 	sub	local04, #1
03454     38 6B 52 F6 | 	abs	local01, local04 wc
03458     1F 6A 06 F5 | 	and	local01, #31
0345c     35 6B 62 C6 |  if_b	neg	local01, local01
03460     04 0E 86 F1 | 	sub	objptr, #4
03464     07 7B 02 FB | 	rdlong	local09, objptr
03468     18 0E 86 F1 | 	sub	objptr, #24
0346c     3D 7D 02 F6 | 	mov	local10, local09
03470     35 7D 0A F2 | 	cmp	local10, local01 wz
03474     48 00 90 AD |  if_e	jmp	#LR__0107
03478     18 0E 06 F1 | 	add	objptr, #24
0347c     07 7D 02 FB | 	rdlong	local10, objptr
03480     01 00 00 FF 
03484     08 0F 06 F1 | 	add	objptr, ##776
03488     07 7D 02 F1 | 	add	local10, objptr
0348c     3E 7F 02 F6 | 	mov	local11, local10
03490                 | '       serialbuf[serialfront]:=srr
03490     3F 79 42 FC | 	wrbyte	local08, local11
03494                 | '       serialfront+=1
03494     01 00 00 FF 
03498     08 0F 86 F1 | 	sub	objptr, ##776
0349c     07 6B 02 FB | 	rdlong	local01, objptr
034a0     01 6A 06 F1 | 	add	local01, #1
034a4     07 6B 62 FC | 	wrlong	local01, objptr
034a8                 | '       serialfront:=serialfront // 32
034a8     35 77 02 F6 | 	mov	local07, local01
034ac     3B 71 52 F6 | 	abs	local04, local07 wc
034b0     1F 70 06 F5 | 	and	local04, #31
034b4     38 71 62 C6 |  if_b	neg	local04, local04
034b8     07 71 62 FC | 	wrlong	local04, objptr
034bc     18 0E 86 F1 | 	sub	objptr, #24
034c0                 | LR__0107
034c0                 | LR__0108
034c0                 | '     
034c0                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
034c0     80 74 5E F2 | 	cmps	local06, #128 wcz
034c4     08 00 90 CD |  if_b	jmp	#LR__0109
034c8     BF 74 5E F2 | 	cmps	local06, #191 wcz
034cc     10 00 90 ED |  if_be	jmp	#LR__0110
034d0                 | LR__0109
034d0     E0 74 5E F2 | 	cmps	local06, #224 wcz
034d4     1C 00 90 CD |  if_b	jmp	#LR__0111
034d8     EF 74 5E F2 | 	cmps	local06, #239 wcz
034dc     14 00 90 1D |  if_a	jmp	#LR__0111
034e0                 | LR__0110
034e0                 | '     mb:=2
034e0     02 6C 06 F6 | 	mov	local02, #2
034e4     3A 71 02 F6 | 	mov	local04, local06
034e8     18 70 66 F0 | 	shl	local04, #24
034ec     38 81 02 F6 | 	mov	local12, local04
034f0                 | '     midireport:=mrr<<24
034f0     40 83 02 F6 | 	mov	local13, local12
034f4                 | LR__0111
034f4                 | ' 
034f4                 | '   if (mrr>=$C0) && (mrr<=$DF)
034f4     C0 74 5E F2 | 	cmps	local06, #192 wcz
034f8     1C 00 90 CD |  if_b	jmp	#LR__0112
034fc     DF 74 5E F2 | 	cmps	local06, #223 wcz
03500     14 00 90 1D |  if_a	jmp	#LR__0112
03504                 | '     mb:=1
03504     01 6C 06 F6 | 	mov	local02, #1
03508     3A 71 02 F6 | 	mov	local04, local06
0350c     18 70 66 F0 | 	shl	local04, #24
03510     38 85 02 F6 | 	mov	local14, local04
03514                 | '     midireport:=mrr<<24
03514     42 83 02 F6 | 	mov	local13, local14
03518                 | LR__0112
03518                 | '   
03518                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03518     F0 74 5E F2 | 	cmps	local06, #240 wcz
0351c     10 00 90 CD |  if_b	jmp	#LR__0113
03520                 | '     mb:=4
03520     04 6C 06 F6 | 	mov	local02, #4
03524     3A 87 02 F6 | 	mov	local15, local06
03528     18 86 66 F0 | 	shl	local15, #24
0352c                 | '     midireport:=mrr<<24  
0352c     43 83 02 F6 | 	mov	local13, local15
03530                 | LR__0113
03530                 | '   
03530                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
03530     80 74 5E F2 | 	cmps	local06, #128 wcz
03534     44 00 90 3D |  if_ae	jmp	#LR__0115
03538     00 6C 5E F2 | 	cmps	local02, #0 wcz
0353c     3C 00 90 ED |  if_be	jmp	#LR__0115
03540     00 74 5E F2 | 	cmps	local06, #0 wcz
03544     34 00 90 CD |  if_b	jmp	#LR__0115
03548                 | '     
03548                 | '     mb--
03548     36 71 02 F6 | 	mov	local04, local02
0354c     36 77 02 F6 | 	mov	local07, local02
03550     01 76 86 F1 | 	sub	local07, #1
03554     3B 6D 02 F6 | 	mov	local02, local07
03558                 | '     if mb<3
03558     03 6C 5E F2 | 	cmps	local02, #3 wcz
0355c     1C 00 90 3D |  if_ae	jmp	#LR__0114
03560     36 89 02 F6 | 	mov	local16, local02
03564     03 88 66 F0 | 	shl	local16, #3
03568     3A 8B 02 F6 | 	mov	local17, local06
0356c     44 8B 62 F0 | 	shl	local17, local16
03570                 | '       midireport+=mrr<<(mb<<3)
03570     41 71 02 F6 | 	mov	local04, local13
03574     45 71 02 F1 | 	add	local04, local17
03578     38 83 02 F6 | 	mov	local13, local04
0357c                 | LR__0114
0357c                 | LR__0115
0357c                 | '   
0357c                 | '   if mb==0
0357c     00 6C 0E F2 | 	cmp	local02, #0 wz
03580     84 00 90 5D |  if_ne	jmp	#LR__0117
03584                 | '     
03584                 | '     if midifront<>((miditail-1) //32)
03584     14 0E 06 F1 | 	add	objptr, #20
03588     07 77 02 FB | 	rdlong	local07, objptr
0358c     3B 71 02 F6 | 	mov	local04, local07
03590     01 70 86 F1 | 	sub	local04, #1
03594     38 6B 52 F6 | 	abs	local01, local04 wc
03598     1F 6A 06 F5 | 	and	local01, #31
0359c     35 6B 62 C6 |  if_b	neg	local01, local01
035a0     04 0E 86 F1 | 	sub	objptr, #4
035a4     07 7B 02 FB | 	rdlong	local09, objptr
035a8     10 0E 86 F1 | 	sub	objptr, #16
035ac     3D 7D 02 F6 | 	mov	local10, local09
035b0     35 7D 0A F2 | 	cmp	local10, local01 wz
035b4     4C 00 90 AD |  if_e	jmp	#LR__0116
035b8     10 0E 06 F1 | 	add	objptr, #16
035bc     07 7D 02 FB | 	rdlong	local10, objptr
035c0     02 7C 66 F0 | 	shl	local10, #2
035c4     01 00 00 FF 
035c8     90 0E 06 F1 | 	add	objptr, ##656
035cc     07 7D 02 F1 | 	add	local10, objptr
035d0     3E 8D 02 F6 | 	mov	local18, local10
035d4                 | '       midibuf[midifront]:=midireport
035d4     46 83 62 FC | 	wrlong	local13, local18
035d8                 | '       midifront+=1
035d8     01 00 00 FF 
035dc     90 0E 86 F1 | 	sub	objptr, ##656
035e0     07 6B 02 FB | 	rdlong	local01, objptr
035e4     01 6A 06 F1 | 	add	local01, #1
035e8     07 6B 62 FC | 	wrlong	local01, objptr
035ec                 | '       midifront:=midifront // 32
035ec     35 77 02 F6 | 	mov	local07, local01
035f0     3B 71 52 F6 | 	abs	local04, local07 wc
035f4     1F 70 06 F5 | 	and	local04, #31
035f8     38 71 62 C6 |  if_b	neg	local04, local04
035fc     07 71 62 FC | 	wrlong	local04, objptr
03600     10 0E 86 F1 | 	sub	objptr, #16
03604                 | LR__0116
03604                 | '     mb:=(-1)
03604     01 6C 66 F6 | 	neg	local02, #1
03608                 | LR__0117
03608                 | ' 
03608                 | ' 'Keyboard and mouse
03608                 | ' 
03608                 | '   if (rr>=$80) && (rr<>$FF)
03608     80 72 5E F2 | 	cmps	local05, #128 wcz
0360c     1C 00 90 CD |  if_b	jmp	#LR__0118
03610     FF 72 0E F2 | 	cmp	local05, #255 wz
03614     14 00 90 AD |  if_e	jmp	#LR__0118
03618                 | '     b:=3
03618     03 6E 06 F6 | 	mov	local03, #3
0361c     39 71 02 F6 | 	mov	local04, local05
03620     18 70 66 F0 | 	shl	local04, #24
03624     38 8F 02 F6 | 	mov	local19, local04
03628                 | '     kbmreport:=rr<<24
03628     47 91 02 F6 | 	mov	local20, local19
0362c                 | LR__0118
0362c                 | '   
0362c                 | '   if (rr<$80) && (b>0) && (rr>=0)
0362c     80 72 5E F2 | 	cmps	local05, #128 wcz
03630     38 00 90 3D |  if_ae	jmp	#LR__0119
03634     00 6E 5E F2 | 	cmps	local03, #0 wcz
03638     30 00 90 ED |  if_be	jmp	#LR__0119
0363c     00 72 5E F2 | 	cmps	local05, #0 wcz
03640     28 00 90 CD |  if_b	jmp	#LR__0119
03644                 | '     b--
03644     37 77 02 F6 | 	mov	local07, local03
03648     01 76 86 F1 | 	sub	local07, #1
0364c     3B 6F 02 F6 | 	mov	local03, local07
03650     37 93 02 F6 | 	mov	local21, local03
03654     03 92 66 F0 | 	shl	local21, #3
03658     39 95 02 F6 | 	mov	local22, local05
0365c     49 95 62 F0 | 	shl	local22, local21
03660                 | '     kbmreport+=rr<<(b<<3)  
03660     48 71 02 F6 | 	mov	local04, local20
03664     4A 71 02 F1 | 	add	local04, local22
03668     38 91 02 F6 | 	mov	local20, local04
0366c                 | LR__0119
0366c                 | '   
0366c                 | '   if (rr==$FF)
0366c     FF 72 0E F2 | 	cmp	local05, #255 wz
03670                 | '     b:=0   
03670     00 6E 06 A6 |  if_e	mov	local03, #0
03674                 | ' 
03674                 | '   if b==0  
03674     00 6E 0E F2 | 	cmp	local03, #0 wz
03678     14 01 90 5D |  if_ne	jmp	#LR__0124
0367c                 | '  
0367c                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
0367c     00 00 40 FF 
03680     00 90 1E F2 | 	cmp	local20, ##-2147483648 wcz
03684     84 00 90 CD |  if_b	jmp	#LR__0121
03688     00 80 43 FF 
0368c     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
03690     78 00 90 3D |  if_ae	jmp	#LR__0121
03694                 | '       if mousefront<>((mousetail-1) //128)
03694     0C 0E 06 F1 | 	add	objptr, #12
03698     07 77 02 FB | 	rdlong	local07, objptr
0369c     3B 71 02 F6 | 	mov	local04, local07
036a0     01 70 86 F1 | 	sub	local04, #1
036a4     38 6B 52 F6 | 	abs	local01, local04 wc
036a8     7F 6A 06 F5 | 	and	local01, #127
036ac     35 6B 62 C6 |  if_b	neg	local01, local01
036b0     04 0E 86 F1 | 	sub	objptr, #4
036b4     07 7B 02 FB | 	rdlong	local09, objptr
036b8     08 0E 86 F1 | 	sub	objptr, #8
036bc     3D 7D 02 F6 | 	mov	local10, local09
036c0     35 7D 0A F2 | 	cmp	local10, local01 wz
036c4     44 00 90 AD |  if_e	jmp	#LR__0120
036c8     08 0E 06 F1 | 	add	objptr, #8
036cc     07 7D 02 FB | 	rdlong	local10, objptr
036d0     02 7C 66 F0 | 	shl	local10, #2
036d4     98 0E 06 F1 | 	add	objptr, #152
036d8     07 7D 02 F1 | 	add	local10, objptr
036dc     3E 97 02 F6 | 	mov	local23, local10
036e0                 | '         mousebuf[mousefront]:=kbmreport
036e0     4B 91 62 FC | 	wrlong	local20, local23
036e4                 | '         mousefront+=1
036e4     98 0E 86 F1 | 	sub	objptr, #152
036e8     07 6B 02 FB | 	rdlong	local01, objptr
036ec     01 6A 06 F1 | 	add	local01, #1
036f0     07 6B 62 FC | 	wrlong	local01, objptr
036f4                 | '         mousefront:=mousefront // 128
036f4     35 77 02 F6 | 	mov	local07, local01
036f8     3B 71 52 F6 | 	abs	local04, local07 wc
036fc     7F 70 06 F5 | 	and	local04, #127
03700     38 71 62 C6 |  if_b	neg	local04, local04
03704     07 71 62 FC | 	wrlong	local04, objptr
03708     08 0E 86 F1 | 	sub	objptr, #8
0370c                 | LR__0120
0370c                 | LR__0121
0370c                 | '     b:=(-1)
0370c     01 6E 66 F6 | 	neg	local03, #1
03710                 | ' 
03710                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
03710     00 80 43 FF 
03714     00 90 1E F2 | 	cmp	local20, ##-2030043136 wcz
03718     70 00 90 CD |  if_b	jmp	#LR__0123
0371c     00 00 45 FF 
03720     00 90 1E F2 | 	cmp	local20, ##-1979711488 wcz
03724     64 00 90 3D |  if_ae	jmp	#LR__0123
03728                 | '       if kbdfront<>((kbdtail-1) //32)
03728     04 0E 06 F1 | 	add	objptr, #4
0372c     07 77 02 FB | 	rdlong	local07, objptr
03730     04 0E 86 F1 | 	sub	objptr, #4
03734     3B 71 02 F6 | 	mov	local04, local07
03738     01 70 86 F1 | 	sub	local04, #1
0373c     38 6B 52 F6 | 	abs	local01, local04 wc
03740     1F 6A 06 F5 | 	and	local01, #31
03744     35 6B 62 C6 |  if_b	neg	local01, local01
03748     07 7D 02 FB | 	rdlong	local10, objptr
0374c     35 7D 0A F2 | 	cmp	local10, local01 wz
03750     38 00 90 AD |  if_e	jmp	#LR__0122
03754     07 6B 02 FB | 	rdlong	local01, objptr
03758     02 6A 66 F0 | 	shl	local01, #2
0375c     20 0E 06 F1 | 	add	objptr, #32
03760     07 6B 02 F1 | 	add	local01, objptr
03764     35 99 02 F6 | 	mov	local24, local01
03768                 | '         kbdbuf[kbdfront]:=kbmreport
03768     4C 91 62 FC | 	wrlong	local20, local24
0376c                 | '         kbdfront+=1
0376c     20 0E 86 F1 | 	sub	objptr, #32
03770     07 77 02 FB | 	rdlong	local07, objptr
03774     01 76 06 F1 | 	add	local07, #1
03778     07 77 62 FC | 	wrlong	local07, objptr
0377c                 | '         kbdfront:=kbdfront // 32
0377c     3B 71 52 F6 | 	abs	local04, local07 wc
03780     1F 70 06 F5 | 	and	local04, #31
03784     38 71 62 C6 |  if_b	neg	local04, local04
03788     07 71 62 FC | 	wrlong	local04, objptr
0378c                 | LR__0122
0378c                 | LR__0123
0378c                 | '     b:=(-1)
0378c     01 6E 66 F6 | 	neg	local03, #1
03790                 | LR__0124
03790                 | ' 
03790                 | ' 
03790                 | '   if long[$30]==0
03790     30 70 0E FB | 	rdlong	local04, #48 wz
03794     5C 00 90 5D |  if_ne	jmp	#LR__0126
03798                 | '     if kbdfront<>kbdtail
03798     07 71 02 FB | 	rdlong	local04, objptr
0379c     04 0E 06 F1 | 	add	objptr, #4
037a0     07 6B 02 FB | 	rdlong	local01, objptr
037a4     04 0E 86 F1 | 	sub	objptr, #4
037a8     35 71 0A F2 | 	cmp	local04, local01 wz
037ac     44 00 90 AD |  if_e	jmp	#LR__0125
037b0     04 0E 06 F1 | 	add	objptr, #4
037b4     07 9B 02 FB | 	rdlong	local25, objptr
037b8     02 9A 66 F0 | 	shl	local25, #2
037bc     1C 0E 06 F1 | 	add	objptr, #28
037c0     07 9B 02 F1 | 	add	local25, objptr
037c4                 | '       long[$30]:=kbdbuf[kbdtail]
037c4     4D 71 02 FB | 	rdlong	local04, local25
037c8     30 70 66 FC | 	wrlong	local04, #48
037cc                 | '       kbdtail++
037cc     1C 0E 86 F1 | 	sub	objptr, #28
037d0     07 7D 02 FB | 	rdlong	local10, objptr
037d4     3E 6B 02 F6 | 	mov	local01, local10
037d8     01 6A 06 F1 | 	add	local01, #1
037dc     07 6B 62 FC | 	wrlong	local01, objptr
037e0                 | '       kbdtail:= kbdtail // 32
037e0     35 71 52 F6 | 	abs	local04, local01 wc
037e4     1F 70 06 F5 | 	and	local04, #31
037e8     38 71 62 C6 |  if_b	neg	local04, local04
037ec     07 71 62 FC | 	wrlong	local04, objptr
037f0     04 0E 86 F1 | 	sub	objptr, #4
037f4                 | LR__0125
037f4                 | LR__0126
037f4                 | '       
037f4                 | '   if long[$34]==0
037f4     34 70 0E FB | 	rdlong	local04, #52 wz
037f8     64 00 90 5D |  if_ne	jmp	#LR__0128
037fc                 | '     if mousefront<>mousetail
037fc     08 0E 06 F1 | 	add	objptr, #8
03800     07 71 02 FB | 	rdlong	local04, objptr
03804     04 0E 06 F1 | 	add	objptr, #4
03808     07 7D 02 FB | 	rdlong	local10, objptr
0380c     0C 0E 86 F1 | 	sub	objptr, #12
03810     3E 6B 02 F6 | 	mov	local01, local10
03814     35 71 0A F2 | 	cmp	local04, local01 wz
03818     44 00 90 AD |  if_e	jmp	#LR__0127
0381c     0C 0E 06 F1 | 	add	objptr, #12
03820     07 9D 02 FB | 	rdlong	local26, objptr
03824     02 9C 66 F0 | 	shl	local26, #2
03828     94 0E 06 F1 | 	add	objptr, #148
0382c     07 9D 02 F1 | 	add	local26, objptr
03830                 | '       long[$34]:=mousebuf[mousetail]
03830     4E 71 02 FB | 	rdlong	local04, local26
03834     34 70 66 FC | 	wrlong	local04, #52
03838                 | '       mousetail++
03838     94 0E 86 F1 | 	sub	objptr, #148
0383c     07 7D 02 FB | 	rdlong	local10, objptr
03840     3E 6B 02 F6 | 	mov	local01, local10
03844     01 6A 06 F1 | 	add	local01, #1
03848     07 6B 62 FC | 	wrlong	local01, objptr
0384c                 | '       mousetail:= mousetail // 128
0384c     35 71 52 F6 | 	abs	local04, local01 wc
03850     7F 70 06 F5 | 	and	local04, #127
03854     38 71 62 C6 |  if_b	neg	local04, local04
03858     07 71 62 FC | 	wrlong	local04, objptr
0385c     0C 0E 86 F1 | 	sub	objptr, #12
03860                 | LR__0127
03860                 | LR__0128
03860                 | ' 
03860                 | '       
03860                 | '   if long[$38]==0
03860     38 70 0E FB | 	rdlong	local04, #56 wz
03864     6C 00 90 5D |  if_ne	jmp	#LR__0130
03868                 | '     if midifront<>miditail
03868     10 0E 06 F1 | 	add	objptr, #16
0386c     07 71 02 FB | 	rdlong	local04, objptr
03870     04 0E 06 F1 | 	add	objptr, #4
03874     07 7D 02 FB | 	rdlong	local10, objptr
03878     14 0E 86 F1 | 	sub	objptr, #20
0387c     3E 6B 02 F6 | 	mov	local01, local10
03880     35 71 0A F2 | 	cmp	local04, local01 wz
03884     4C 00 90 AD |  if_e	jmp	#LR__0129
03888     14 0E 06 F1 | 	add	objptr, #20
0388c     07 9F 02 FB | 	rdlong	local27, objptr
03890     02 9E 66 F0 | 	shl	local27, #2
03894     01 00 00 FF 
03898     8C 0E 06 F1 | 	add	objptr, ##652
0389c     07 9F 02 F1 | 	add	local27, objptr
038a0                 | '       long[$38]:=midibuf[miditail]
038a0     4F 71 02 FB | 	rdlong	local04, local27
038a4     38 70 66 FC | 	wrlong	local04, #56
038a8                 | '       miditail++
038a8     01 00 00 FF 
038ac     8C 0E 86 F1 | 	sub	objptr, ##652
038b0     07 7D 02 FB | 	rdlong	local10, objptr
038b4     3E 6B 02 F6 | 	mov	local01, local10
038b8     01 6A 06 F1 | 	add	local01, #1
038bc     07 6B 62 FC | 	wrlong	local01, objptr
038c0                 | '       miditail:= miditail // 32
038c0     35 71 52 F6 | 	abs	local04, local01 wc
038c4     1F 70 06 F5 | 	and	local04, #31
038c8     38 71 62 C6 |  if_b	neg	local04, local04
038cc     07 71 62 FC | 	wrlong	local04, objptr
038d0     14 0E 86 F1 | 	sub	objptr, #20
038d4                 | LR__0129
038d4                 | LR__0130
038d4                 | '       
038d4                 | '   if long[$3c]==0
038d4     3C 70 0E FB | 	rdlong	local04, #60 wz
038d8     34 FB 9F 5D |  if_ne	jmp	#LR__0106
038dc                 | '     if serialfront<>serialtail
038dc     18 0E 06 F1 | 	add	objptr, #24
038e0     07 71 02 FB | 	rdlong	local04, objptr
038e4     04 0E 06 F1 | 	add	objptr, #4
038e8     07 7D 02 FB | 	rdlong	local10, objptr
038ec     1C 0E 86 F1 | 	sub	objptr, #28
038f0     3E 6B 02 F6 | 	mov	local01, local10
038f4     35 71 0A F2 | 	cmp	local04, local01 wz
038f8     14 FB 9F AD |  if_e	jmp	#LR__0106
038fc                 | '       byte[$3c]:=255
038fc     3C FE 4D FC | 	wrbyte	#255, #60
03900     1C 0E 06 F1 | 	add	objptr, #28
03904     07 A1 02 FB | 	rdlong	local28, objptr
03908     01 00 00 FF 
0390c     04 0F 06 F1 | 	add	objptr, ##772
03910     07 A1 02 F1 | 	add	local28, objptr
03914                 | '       byte[$3D]:=serialbuf[serialtail]
03914     50 71 C2 FA | 	rdbyte	local04, local28
03918     3D 70 46 FC | 	wrbyte	local04, #61
0391c                 | '       serialtail++
0391c     01 00 00 FF 
03920     04 0F 86 F1 | 	sub	objptr, ##772
03924     07 7D 02 FB | 	rdlong	local10, objptr
03928     3E 6B 02 F6 | 	mov	local01, local10
0392c     01 6A 06 F1 | 	add	local01, #1
03930     07 6B 62 FC | 	wrlong	local01, objptr
03934                 | '       serialtail:= serialtail // 32
03934     35 71 52 F6 | 	abs	local04, local01 wc
03938     1F 70 06 F5 | 	and	local04, #31
0393c     38 71 62 C6 |  if_b	neg	local04, local04
03940     07 71 62 FC | 	wrlong	local04, objptr
03944     1C 0E 86 F1 | 	sub	objptr, #28
03948     C4 FA 9F FD | 	jmp	#LR__0106
0394c     AF F0 03 F6 | 	mov	ptra, fp
03950     BF 00 A0 FD | 	call	#popregs_
03954                 | _retrocog_spin2_serialcog_ret
03954     2D 00 64 FD | 	ret
03958                 | 
03958                 | '       
03958                 | ' 
03958                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03958                 | ' 
03958                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03958                 | _retrocog_spin2_serial_start
03958     04 5A 05 F6 | 	mov	COUNT_, #4
0395c     B0 00 A0 FD | 	call	#pushregs_
03960     2E 6B 02 F6 | 	mov	local01, arg01
03964     2F 6D 02 F6 | 	mov	local02, arg02
03968                 | ' 
03968                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03968     14 5C 06 FB | 	rdlong	arg01, #20
0396c     10 5E C6 F9 | 	decod	arg02, #16
03970     2F 5D 02 FD | 	qmul	arg01, arg02
03974     19 6E 62 FD | 	getqy	local03
03978     18 70 62 FD | 	getqx	local04
0397c     28 6E 62 FD | 	setq	local03
03980     30 71 12 FD | 	qdiv	local04, arg03
03984     18 2A 62 FD | 	getqx	result1
03988     15 61 02 F6 | 	mov	arg03, result1
0398c     FE FF 7F FF 
03990     00 60 06 F5 | 	and	arg03, ##-1024
03994                 | ' bitmode |= 7                                                  ' set bits (8)
03994     07 60 46 F5 | 	or	arg03, #7
03998                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03998     40 6A 62 FD | 	dirl	local01
0399c     08 00 80 FF 
039a0     35 7D 08 FC | 	wrpin	##4158, local01
039a4     35 61 12 FC | 	wxpin	arg03, local01
039a8     35 01 28 FC | 	wypin	#0, local01
039ac     41 6A 62 FD | 	dirh	local01
039b0                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
039b0     40 6C 62 FD | 	dirl	local02
039b4     36 F9 08 FC | 	wrpin	#124, local02
039b8     36 61 12 FC | 	wxpin	arg03, local02
039bc     36 01 28 FC | 	wypin	#0, local02
039c0     41 6C 62 FD | 	dirh	local02
039c4                 | ' pinhigh(rxpin)
039c4     59 6A 62 FD | 	drvh	local01
039c8     AF F0 03 F6 | 	mov	ptra, fp
039cc     BF 00 A0 FD | 	call	#popregs_
039d0                 | _retrocog_spin2_serial_start_ret
039d0     2D 00 64 FD | 	ret
039d4                 | 
039d4                 | ' 
039d4                 | ' pub rxcheck(pin) : rxbyte | check
039d4                 | _retrocog_spin2_rxcheck
039d4     03 5A 05 F6 | 	mov	COUNT_, #3
039d8     B0 00 A0 FD | 	call	#pushregs_
039dc     2E 6B 02 F6 | 	mov	local01, arg01
039e0                 | ' 
039e0                 | ' '' Check for serial input
039e0                 | ' '' -- returns -1 if nothing available
039e0                 | ' 
039e0                 | '   rxbyte := -1
039e0     01 6C 66 F6 | 	neg	local02, #1
039e4                 | '   check := pinr(pin)
039e4     35 5D 02 F6 | 	mov	arg01, local01
039e8     6C 26 B0 FD | 	call	#__system___pinread
039ec     15 6F 0A F6 | 	mov	local03, result1 wz
039f0                 | '   if (check)
039f0                 | '     rxbyte := rdpin(pin) >> 24
039f0     00 6C 06 56 |  if_ne	mov	local02, #0
039f4     35 6D 8A 5A |  if_ne	rdpin	local02, local01
039f8     18 6C 46 50 |  if_ne	shr	local02, #24
039fc     36 2B 02 F6 | 	mov	result1, local02
03a00     AF F0 03 F6 | 	mov	ptra, fp
03a04     BF 00 A0 FD | 	call	#popregs_
03a08                 | _retrocog_spin2_rxcheck_ret
03a08     2D 00 64 FD | 	ret
03a0c                 | 
03a0c                 | _trackerplayer_spin2_initModule
03a0c     3E 5A 05 F6 | 	mov	COUNT_, #62
03a10     B0 00 A0 FD | 	call	#pushregs_
03a14     24 F1 07 F1 | 	add	ptra, #292
03a18     AF 5C 62 FC | 	wrlong	arg01, fp
03a1c     04 5E 05 F1 | 	add	fp, #4
03a20     AF 5E 62 FC | 	wrlong	arg02, fp
03a24     04 5E 85 F1 | 	sub	fp, #4
03a28     AF 6A 02 FB | 	rdlong	local01, fp
03a2c     02 00 00 FF 
03a30     38 6A 06 F1 | 	add	local01, ##1080
03a34                 | ' 
03a34                 | '   ' Set some data pointers
03a34                 | '   magicFour      := hubPtr + 1080
03a34     9D 0E 06 F1 | 	add	objptr, #157
03a38     07 6B 62 FC | 	wrlong	local01, objptr
03a3c                 | '   nameStr        := hubPtr
03a3c     AF 6C 02 FB | 	rdlong	local02, fp
03a40     97 0E 86 F1 | 	sub	objptr, #151
03a44     07 6D 62 FC | 	wrlong	local02, objptr
03a48     AF 6E 02 FB | 	rdlong	local03, fp
03a4c     14 6E 06 F1 | 	add	local03, #20
03a50                 | '   samplesInfoLut := hubPtr + 20
03a50     04 0E 06 F1 | 	add	objptr, #4
03a54     07 6F 62 FC | 	wrlong	local03, objptr
03a58                 | ' 
03a58                 | '   ' Is this a 31 sample module?
03a58                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03a58     93 0E 06 F1 | 	add	objptr, #147
03a5c     07 6D 02 FB | 	rdlong	local02, objptr
03a60     9D 0E 86 F1 | 	sub	objptr, #157
03a64     36 71 C2 FA | 	rdbyte	local04, local02
03a68     4D 70 0E F2 | 	cmp	local04, #77 wz
03a6c     48 01 90 5D |  if_ne	jmp	#LR__0134
03a70     9D 0E 06 F1 | 	add	objptr, #157
03a74     07 73 02 FB | 	rdlong	local05, objptr
03a78     9D 0E 86 F1 | 	sub	objptr, #157
03a7c     02 72 06 F1 | 	add	local05, #2
03a80     39 75 C2 FA | 	rdbyte	local06, local05
03a84     4B 74 0E F2 | 	cmp	local06, #75 wz
03a88     2C 01 90 5D |  if_ne	jmp	#LR__0134
03a8c     AF 76 02 FB | 	rdlong	local07, fp
03a90     01 00 00 FF 
03a94     B6 77 06 F1 | 	add	local07, ##950
03a98                 | '     songLength          := byte[hubPtr + 950]
03a98     3B 6D C2 FA | 	rdbyte	local02, local07
03a9c     9A 0E 06 F1 | 	add	objptr, #154
03aa0     07 6D 42 FC | 	wrbyte	local02, objptr
03aa4     AF 78 02 FB | 	rdlong	local08, fp
03aa8     01 00 00 FF 
03aac     B7 79 06 F1 | 	add	local08, ##951
03ab0                 | '     unknown1            := byte[hubPtr + 951]
03ab0     3C 6D C2 FA | 	rdbyte	local02, local08
03ab4     02 0E 06 F1 | 	add	objptr, #2
03ab8     07 6D 42 FC | 	wrbyte	local02, objptr
03abc     AF 7A 02 FB | 	rdlong	local09, fp
03ac0     01 00 00 FF 
03ac4     B8 7B 06 F1 | 	add	local09, ##952
03ac8                 | '     songPositionsLut    :=      hubPtr + 952
03ac8     06 0E 86 F1 | 	sub	objptr, #6
03acc     07 7B 62 FC | 	wrlong	local09, objptr
03ad0     AF 7C 02 FB | 	rdlong	local10, fp
03ad4     02 00 00 FF 
03ad8     3C 7C 06 F1 | 	add	local10, ##1084
03adc                 | '     patternsData        :=      hubPtr + 1084
03adc     04 0E 86 F1 | 	sub	objptr, #4
03ae0     07 7D 62 FC | 	wrlong	local10, objptr
03ae4                 | '     numberOfInstruments := 31
03ae4     14 0E 06 F1 | 	add	objptr, #20
03ae8     07 3F 48 FC | 	wrbyte	#31, objptr
03aec                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03aec     0B 0E 86 F1 | 	sub	objptr, #11
03af0     07 01 48 FC | 	wrbyte	#0, objptr
03af4     9B 0E 86 F1 | 	sub	objptr, #155
03af8                 | '     repeat i from 952 to 1079
03af8     08 5E 05 F1 | 	add	fp, #8
03afc     01 00 80 FF 
03b00     AF 70 6B FC | 	wrlong	##952, fp
03b04     08 5E 85 F1 | 	sub	fp, #8
03b08     64 C5 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
03b0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03b10                 | LR__0131
03b10                 | '       if byte[hubPtr][i] > numberOfPatterns
03b10     AF 7E 02 FB | 	rdlong	local11, fp
03b14     08 5E 05 F1 | 	add	fp, #8
03b18     AF 70 02 FB | 	rdlong	local04, fp
03b1c     08 5E 85 F1 | 	sub	fp, #8
03b20     3F 71 02 F1 | 	add	local04, local11
03b24     38 75 C2 FA | 	rdbyte	local06, local04
03b28     9B 0E 06 F1 | 	add	objptr, #155
03b2c     07 81 C2 FA | 	rdbyte	local12, objptr
03b30     9B 0E 86 F1 | 	sub	objptr, #155
03b34     40 75 5A F2 | 	cmps	local06, local12 wcz
03b38     24 00 90 ED |  if_be	jmp	#LR__0132
03b3c     AF 7E 02 FB | 	rdlong	local11, fp
03b40     08 5E 05 F1 | 	add	fp, #8
03b44     AF 82 02 FB | 	rdlong	local13, fp
03b48     08 5E 85 F1 | 	sub	fp, #8
03b4c     3F 83 02 F1 | 	add	local13, local11
03b50                 | '         numberOfPatterns := byte[hubPtr][i]
03b50     41 85 C2 FA | 	rdbyte	local14, local13
03b54     9B 0E 06 F1 | 	add	objptr, #155
03b58     07 85 42 FC | 	wrbyte	local14, objptr
03b5c     9B 0E 86 F1 | 	sub	objptr, #155
03b60                 | LR__0132
03b60     08 5E 05 F1 | 	add	fp, #8
03b64     AF 84 02 FB | 	rdlong	local14, fp
03b68     01 84 06 F1 | 	add	local14, #1
03b6c     AF 84 62 FC | 	wrlong	local14, fp
03b70     08 5E 85 F1 | 	sub	fp, #8
03b74     02 00 00 FF 
03b78     38 84 5E F2 | 	cmps	local14, ##1080 wcz
03b7c     90 FF 9F CD |  if_b	jmp	#LR__0131
03b80                 | LR__0133
03b80                 | '     numberOfPatterns++
03b80     9B 0E 06 F1 | 	add	objptr, #155
03b84     07 85 C2 FA | 	rdbyte	local14, objptr
03b88     07 71 C2 FA | 	rdbyte	local04, objptr
03b8c     01 70 06 F1 | 	add	local04, #1
03b90     07 71 42 FC | 	wrbyte	local04, objptr
03b94     07 87 C2 FA | 	rdbyte	local15, objptr
03b98     0A 86 66 F0 | 	shl	local15, #10
03b9c     09 0E 86 F1 | 	sub	objptr, #9
03ba0     07 89 02 FB | 	rdlong	local16, objptr
03ba4     43 89 02 F1 | 	add	local16, local15
03ba8                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03ba8     84 0E 86 F1 | 	sub	objptr, #132
03bac     07 89 62 FC | 	wrlong	local16, objptr
03bb0     0E 0E 86 F1 | 	sub	objptr, #14
03bb4                 | ' 
03bb4                 | '   ' This must be an oldschool 15 sample soundtracker module
03bb4                 | '   else
03bb4     18 01 90 FD | 	jmp	#LR__0138
03bb8                 | LR__0134
03bb8     AF 8A 02 FB | 	rdlong	local17, fp
03bbc     D6 8B 06 F1 | 	add	local17, #470
03bc0                 | '     songLength          := byte[hubPtr + 470]
03bc0     45 6D C2 FA | 	rdbyte	local02, local17
03bc4     9A 0E 06 F1 | 	add	objptr, #154
03bc8     07 6D 42 FC | 	wrbyte	local02, objptr
03bcc     AF 8C 02 FB | 	rdlong	local18, fp
03bd0     D7 8D 06 F1 | 	add	local18, #471
03bd4                 | '     unknown1            := byte[hubPtr + 471]
03bd4     46 6D C2 FA | 	rdbyte	local02, local18
03bd8     02 0E 06 F1 | 	add	objptr, #2
03bdc     07 6D 42 FC | 	wrbyte	local02, objptr
03be0     AF 8E 02 FB | 	rdlong	local19, fp
03be4     D8 8F 06 F1 | 	add	local19, #472
03be8                 | '     songPositionsLut    :=      hubPtr + 472
03be8     06 0E 86 F1 | 	sub	objptr, #6
03bec     07 8F 62 FC | 	wrlong	local19, objptr
03bf0     AF 90 02 FB | 	rdlong	local20, fp
03bf4     01 00 00 FF 
03bf8     58 90 06 F1 | 	add	local20, ##600
03bfc                 | '     patternsData        :=      hubPtr + 600
03bfc     04 0E 86 F1 | 	sub	objptr, #4
03c00     07 91 62 FC | 	wrlong	local20, objptr
03c04                 | '     numberOfInstruments := 15
03c04     14 0E 06 F1 | 	add	objptr, #20
03c08     07 1F 48 FC | 	wrbyte	#15, objptr
03c0c                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03c0c     0B 0E 86 F1 | 	sub	objptr, #11
03c10     07 01 48 FC | 	wrbyte	#0, objptr
03c14     9B 0E 86 F1 | 	sub	objptr, #155
03c18                 | '     repeat i from 472 to 599
03c18     08 5E 05 F1 | 	add	fp, #8
03c1c     AF B0 6B FC | 	wrlong	#472, fp
03c20     08 5E 85 F1 | 	sub	fp, #8
03c24     48 C4 9F FE | 	loc	pa,	#(@LR__0137-@LR__0135)
03c28     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c2c                 | LR__0135
03c2c                 | '       if byte[hubPtr][i] > numberOfPatterns
03c2c     AF 7E 02 FB | 	rdlong	local11, fp
03c30     08 5E 05 F1 | 	add	fp, #8
03c34     AF 70 02 FB | 	rdlong	local04, fp
03c38     08 5E 85 F1 | 	sub	fp, #8
03c3c     3F 71 02 F1 | 	add	local04, local11
03c40     38 75 C2 FA | 	rdbyte	local06, local04
03c44     9B 0E 06 F1 | 	add	objptr, #155
03c48     07 81 C2 FA | 	rdbyte	local12, objptr
03c4c     9B 0E 86 F1 | 	sub	objptr, #155
03c50     40 75 5A F2 | 	cmps	local06, local12 wcz
03c54     24 00 90 ED |  if_be	jmp	#LR__0136
03c58     AF 7E 02 FB | 	rdlong	local11, fp
03c5c     08 5E 05 F1 | 	add	fp, #8
03c60     AF 92 02 FB | 	rdlong	local21, fp
03c64     08 5E 85 F1 | 	sub	fp, #8
03c68     3F 93 02 F1 | 	add	local21, local11
03c6c                 | '         numberOfPatterns := byte[hubPtr][i]
03c6c     49 85 C2 FA | 	rdbyte	local14, local21
03c70     9B 0E 06 F1 | 	add	objptr, #155
03c74     07 85 42 FC | 	wrbyte	local14, objptr
03c78     9B 0E 86 F1 | 	sub	objptr, #155
03c7c                 | LR__0136
03c7c     08 5E 05 F1 | 	add	fp, #8
03c80     AF 84 02 FB | 	rdlong	local14, fp
03c84     01 84 06 F1 | 	add	local14, #1
03c88     AF 84 62 FC | 	wrlong	local14, fp
03c8c     08 5E 85 F1 | 	sub	fp, #8
03c90     01 00 00 FF 
03c94     58 84 5E F2 | 	cmps	local14, ##600 wcz
03c98     90 FF 9F CD |  if_b	jmp	#LR__0135
03c9c                 | LR__0137
03c9c                 | '     numberOfPatterns++
03c9c     9B 0E 06 F1 | 	add	objptr, #155
03ca0     07 85 C2 FA | 	rdbyte	local14, objptr
03ca4     07 71 C2 FA | 	rdbyte	local04, objptr
03ca8     01 70 06 F1 | 	add	local04, #1
03cac     07 71 42 FC | 	wrbyte	local04, objptr
03cb0     07 95 C2 FA | 	rdbyte	local22, objptr
03cb4     0A 94 66 F0 | 	shl	local22, #10
03cb8     09 0E 86 F1 | 	sub	objptr, #9
03cbc     07 97 02 FB | 	rdlong	local23, objptr
03cc0     4A 97 02 F1 | 	add	local23, local22
03cc4                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03cc4     84 0E 86 F1 | 	sub	objptr, #132
03cc8     07 97 62 FC | 	wrlong	local23, objptr
03ccc     0E 0E 86 F1 | 	sub	objptr, #14
03cd0                 | LR__0138
03cd0                 | ' 
03cd0                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03cd0                 | '   tmpPtr := sampleDataPtr
03cd0     0E 0E 06 F1 | 	add	objptr, #14
03cd4     07 6D 02 FB | 	rdlong	local02, objptr
03cd8     0C 5E 05 F1 | 	add	fp, #12
03cdc     AF 6C 62 FC | 	wrlong	local02, fp
03ce0                 | '   repeat i from 1 to numberOfInstruments
03ce0     04 5E 85 F1 | 	sub	fp, #4
03ce4     AF 02 68 FC | 	wrlong	#1, fp
03ce8     08 5E 85 F1 | 	sub	fp, #8
03cec     98 0E 06 F1 | 	add	objptr, #152
03cf0     07 71 C2 FA | 	rdbyte	local04, objptr
03cf4     01 70 5E F2 | 	cmps	local04, #1 wcz
03cf8     01 84 06 16 |  if_a	mov	local14, #1
03cfc     01 84 66 E6 |  if_be	neg	local14, #1
03d00     42 99 02 F6 | 	mov	local24, local14
03d04     07 9B C2 FA | 	rdbyte	local25, objptr
03d08     A6 0E 86 F1 | 	sub	objptr, #166
03d0c     4C 9B 02 F1 | 	add	local25, local24
03d10                 | LR__0139
03d10     08 5E 05 F1 | 	add	fp, #8
03d14     AF 9C 02 FB | 	rdlong	local26, fp
03d18     01 9C 86 F1 | 	sub	local26, #1
03d1c     02 9C 66 F0 | 	shl	local26, #2
03d20     12 0E 06 F1 | 	add	objptr, #18
03d24     07 9D 02 F1 | 	add	local26, objptr
03d28                 | '     samplesPtrLut[i-1] := tmpPtr
03d28     04 5E 05 F1 | 	add	fp, #4
03d2c     AF 80 02 FB | 	rdlong	local12, fp
03d30     4E 81 62 FC | 	wrlong	local12, local26
03d34     18 5E 05 F1 | 	add	fp, #24
03d38     AF 5E 02 F6 | 	mov	arg02, fp
03d3c     14 5E 85 F1 | 	sub	fp, #20
03d40     AF 60 02 F6 | 	mov	arg03, fp
03d44     04 5E 05 F1 | 	add	fp, #4
03d48     AF 62 02 F6 | 	mov	arg04, fp
03d4c     04 5E 05 F1 | 	add	fp, #4
03d50     AF 64 02 F6 | 	mov	arg05, fp
03d54     04 5E 05 F1 | 	add	fp, #4
03d58     AF 66 02 F6 | 	mov	arg06, fp
03d5c     04 5E 05 F1 | 	add	fp, #4
03d60     AF 68 02 F6 | 	mov	arg07, fp
03d64                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03d64     18 5E 85 F1 | 	sub	fp, #24
03d68     AF 5C 02 FB | 	rdlong	arg01, fp
03d6c     08 5E 85 F1 | 	sub	fp, #8
03d70     12 0E 86 F1 | 	sub	objptr, #18
03d74     A0 07 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03d78                 | '     tmpPtr += samLength
03d78     0C 5E 05 F1 | 	add	fp, #12
03d7c     AF 80 02 FB | 	rdlong	local12, fp
03d80     04 5E 05 F1 | 	add	fp, #4
03d84     AF 9E 02 FB | 	rdlong	local27, fp
03d88     4F 81 02 F1 | 	add	local12, local27
03d8c     04 5E 85 F1 | 	sub	fp, #4
03d90     AF 80 62 FC | 	wrlong	local12, fp
03d94     04 5E 85 F1 | 	sub	fp, #4
03d98     AF 80 02 FB | 	rdlong	local12, fp
03d9c     4C 81 02 F1 | 	add	local12, local24
03da0     AF 80 62 FC | 	wrlong	local12, fp
03da4     08 5E 85 F1 | 	sub	fp, #8
03da8     4D 81 0A F2 | 	cmp	local12, local25 wz
03dac     60 FF 9F 5D |  if_ne	jmp	#LR__0139
03db0                 | ' 
03db0                 | '   ' Below this point, all play routine variables are resest to their default values
03db0                 | '   tickCounter                 := 0
03db0     A1 0E 06 F1 | 	add	objptr, #161
03db4     07 01 48 FC | 	wrbyte	#0, objptr
03db8                 | '   patternRow                  := 0
03db8     01 0E 06 F1 | 	add	objptr, #1
03dbc     07 01 48 FC | 	wrbyte	#0, objptr
03dc0                 | '   songPosition                := startPattern
03dc0     04 5E 05 F1 | 	add	fp, #4
03dc4     AF 6C 02 FB | 	rdlong	local02, fp
03dc8     04 5E 85 F1 | 	sub	fp, #4
03dcc     01 0E 06 F1 | 	add	objptr, #1
03dd0     07 6D 42 FC | 	wrbyte	local02, objptr
03dd4                 | '   currentSongSpeed            := 6
03dd4     01 0E 06 F1 | 	add	objptr, #1
03dd8     07 0D 48 FC | 	wrbyte	#6, objptr
03ddc                 | '   patternDelay                := 0
03ddc     01 0E 06 F1 | 	add	objptr, #1
03de0     07 01 48 FC | 	wrbyte	#0, objptr
03de4                 | '   ticksPerMinute              := 50 * 60
03de4     02 0F 06 F1 | 	add	objptr, #258
03de8     05 00 80 FF 
03dec     07 71 6B FC | 	wrlong	##3000, objptr
03df0     A7 0F 86 F1 | 	sub	objptr, #423
03df4     07 0B 03 FB | 	rdlong	muldiva_, objptr
03df8     32 0C 07 F6 | 	mov	muldivb_, #50
03dfc     D0 00 A0 FD | 	call	#divide_
03e00                 | '   cyclesToWait                := systemClock / 50
03e00     AB 0F 06 F1 | 	add	objptr, #427
03e04     07 0D 63 FC | 	wrlong	muldivb_, objptr
03e08                 | '   sampleNumber_memory         := 0
03e08     35 0E 06 F1 | 	add	objptr, #53
03e0c     07 01 48 FC | 	wrbyte	#0, objptr
03e10                 | '   lpFilter                    := 0
03e10     25 0E 86 F1 | 	sub	objptr, #37
03e14     07 01 48 FC | 	wrbyte	#0, objptr
03e18                 | '   cmdD_memoryX                := 0
03e18     29 0E 06 F1 | 	add	objptr, #41
03e1c     07 01 48 FC | 	wrbyte	#0, objptr
03e20                 | '   cmdD_memoryY                := 0
03e20     01 0E 06 F1 | 	add	objptr, #1
03e24     07 01 48 FC | 	wrbyte	#0, objptr
03e28                 | '   cmdD_updatePosition         := false
03e28     01 0E 06 F1 | 	add	objptr, #1
03e2c     07 01 48 FC | 	wrbyte	#0, objptr
03e30                 | '   cmdB_memoryZ                := 0
03e30     01 0E 06 F1 | 	add	objptr, #1
03e34     07 01 48 FC | 	wrbyte	#0, objptr
03e38                 | '   cmdB_updatePosition         := false
03e38     01 0E 06 F1 | 	add	objptr, #1
03e3c     07 01 48 FC | 	wrbyte	#0, objptr
03e40                 | '   cmdE6_updatePositionCommon  := false
03e40     0D 0E 06 F1 | 	add	objptr, #13
03e44     07 01 48 FC | 	wrbyte	#0, objptr
03e48     F5 0F 86 F1 | 	sub	objptr, #501
03e4c                 | ' 
03e4c                 | '   repeat i from 0 to LAST_CHANNEL
03e4c     08 5E 05 F1 | 	add	fp, #8
03e50     AF 00 68 FC | 	wrlong	#0, fp
03e54     08 5E 85 F1 | 	sub	fp, #8
03e58                 | LR__0140
03e58     08 5E 05 F1 | 	add	fp, #8
03e5c     AF A0 02 FB | 	rdlong	local28, fp
03e60     01 A0 66 F0 | 	shl	local28, #1
03e64     D7 0E 06 F1 | 	add	objptr, #215
03e68     07 A1 02 F1 | 	add	local28, objptr
03e6c                 | ' 
03e6c                 | '     currRepeatPoint[i]        := 0
03e6c     50 01 58 FC | 	wrword	#0, local28
03e70     AF A2 02 FB | 	rdlong	local29, fp
03e74     01 A2 66 F0 | 	shl	local29, #1
03e78     1C 0E 86 F1 | 	sub	objptr, #28
03e7c     07 A3 02 F1 | 	add	local29, objptr
03e80                 | '     currSampleLength[i]       := 4
03e80     51 09 58 FC | 	wrword	#4, local29
03e84     14 A5 02 F6 | 	mov	local30, ptr__trackerplayer_spin2_dat__
03e88     AF A6 02 FB | 	rdlong	local31, fp
03e8c     02 A6 66 F0 | 	shl	local31, #2
03e90     14 0E 86 F1 | 	sub	objptr, #20
03e94     07 A7 02 F1 | 	add	local31, objptr
03e98                 | '     currSamplePtr[i]          := @null
03e98     53 A5 62 FC | 	wrlong	local30, local31
03e9c     AF A8 02 FB | 	rdlong	local32, fp
03ea0     10 0E 06 F1 | 	add	objptr, #16
03ea4     07 A9 02 F1 | 	add	local32, objptr
03ea8                 | '     currSampleNr[i]           := 0
03ea8     54 01 48 FC | 	wrbyte	#0, local32
03eac     AF AA 02 FB | 	rdlong	local33, fp
03eb0     02 AA 66 F0 | 	shl	local33, #2
03eb4     0C 0E 06 F1 | 	add	objptr, #12
03eb8     07 AB 02 F1 | 	add	local33, objptr
03ebc                 | '     currRepeatLength[i]       := 1
03ebc     55 03 68 FC | 	wrlong	#1, local33
03ec0     AF AC 02 FB | 	rdlong	local34, fp
03ec4     02 AC 66 F0 | 	shl	local34, #2
03ec8     1C 0E 06 F1 | 	add	objptr, #28
03ecc     07 AD 02 F1 | 	add	local34, objptr
03ed0                 | '     currPeriod[i]             := 400
03ed0     56 21 6B FC | 	wrlong	#400, local34
03ed4     AF AE 02 FB | 	rdlong	local35, fp
03ed8     02 AE 66 F0 | 	shl	local35, #2
03edc     48 0E 06 F1 | 	add	objptr, #72
03ee0     07 AF 02 F1 | 	add	local35, objptr
03ee4                 | '     lastSetPeriod[i]          := 400
03ee4     57 21 6B FC | 	wrlong	#400, local35
03ee8     AF B0 02 FB | 	rdlong	local36, fp
03eec     02 B0 66 F0 | 	shl	local36, #2
03ef0     10 0E 06 F1 | 	add	objptr, #16
03ef4     07 B1 02 F1 | 	add	local36, objptr
03ef8                 | '     lastSetSamplePtr[i]       := 0
03ef8     58 01 68 FC | 	wrlong	#0, local36
03efc     AF B2 02 FB | 	rdlong	local37, fp
03f00     02 B2 66 F0 | 	shl	local37, #2
03f04     10 0E 06 F1 | 	add	objptr, #16
03f08     07 B3 02 F1 | 	add	local37, objptr
03f0c                 | '     lastSetSampleNr[i]        := 0
03f0c     59 01 68 FC | 	wrlong	#0, local37
03f10     AF B4 02 FB | 	rdlong	local38, fp
03f14     02 B4 66 F0 | 	shl	local38, #2
03f18     10 0E 06 F1 | 	add	objptr, #16
03f1c     07 B5 02 F1 | 	add	local38, objptr
03f20                 | '     lastSetSampleLength[i]    := 0
03f20     5A 01 68 FC | 	wrlong	#0, local38
03f24     AF B6 02 FB | 	rdlong	local39, fp
03f28     02 B6 66 F0 | 	shl	local39, #2
03f2c     10 0E 06 F1 | 	add	objptr, #16
03f30     07 B7 02 F1 | 	add	local39, objptr
03f34                 | '     lastSetRepeatLength[i]    := 0
03f34     5B 01 68 FC | 	wrlong	#0, local39
03f38     AF B8 02 FB | 	rdlong	local40, fp
03f3c     02 B8 66 F0 | 	shl	local40, #2
03f40     10 0E 06 F1 | 	add	objptr, #16
03f44     07 B9 02 F1 | 	add	local40, objptr
03f48                 | '     lastSetRepeatPoint[i]     := 0
03f48     5C 01 68 FC | 	wrlong	#0, local40
03f4c     AF BA 02 FB | 	rdlong	local41, fp
03f50     02 BA 66 F0 | 	shl	local41, #2
03f54     78 0E 86 F1 | 	sub	objptr, #120
03f58     07 BB 02 F1 | 	add	local41, objptr
03f5c                 | '     currVolume[i]             := 0
03f5c     5D 01 68 FC | 	wrlong	#0, local41
03f60     AF BC 02 FB | 	rdlong	local42, fp
03f64     01 BC 66 F0 | 	shl	local42, #1
03f68     20 0E 06 F1 | 	add	objptr, #32
03f6c     07 BD 02 F1 | 	add	local42, objptr
03f70                 | '     currPanning[i]            := 0
03f70     5E 01 58 FC | 	wrword	#0, local42
03f74     AF BE 02 FB | 	rdlong	local43, fp
03f78     A9 0E 06 F1 | 	add	objptr, #169
03f7c     07 BF 02 F1 | 	add	local43, objptr
03f80                 | '     cmd3_memoryZ[i]           := 0
03f80     5F 01 48 FC | 	wrbyte	#0, local43
03f84     AF C0 02 FB | 	rdlong	local44, fp
03f88     04 0E 06 F1 | 	add	objptr, #4
03f8c     07 C1 02 F1 | 	add	local44, objptr
03f90                 | '     cmd4_memoryY[i]           := 0
03f90     60 01 48 FC | 	wrbyte	#0, local44
03f94     AF C2 02 FB | 	rdlong	local45, fp
03f98     04 0E 06 F1 | 	add	objptr, #4
03f9c     07 C3 02 F1 | 	add	local45, objptr
03fa0                 | '     cmd4_memoryX[i]           := 0
03fa0     61 01 48 FC | 	wrbyte	#0, local45
03fa4     AF C4 02 FB | 	rdlong	local46, fp
03fa8     04 0E 06 F1 | 	add	objptr, #4
03fac     07 C5 02 F1 | 	add	local46, objptr
03fb0                 | '     cmd7_memoryY[i]           := 0
03fb0     62 01 48 FC | 	wrbyte	#0, local46
03fb4     AF C6 02 FB | 	rdlong	local47, fp
03fb8     04 0E 06 F1 | 	add	objptr, #4
03fbc     07 C7 02 F1 | 	add	local47, objptr
03fc0                 | '     cmd7_memoryX[i]           := 0
03fc0     63 01 48 FC | 	wrbyte	#0, local47
03fc4     AF C8 02 FB | 	rdlong	local48, fp
03fc8     04 0E 06 F1 | 	add	objptr, #4
03fcc     07 C9 02 F1 | 	add	local48, objptr
03fd0                 | '     cmd9_memoryZ[i]           := 0
03fd0     64 01 48 FC | 	wrbyte	#0, local48
03fd4     AF CA 02 FB | 	rdlong	local49, fp
03fd8     0D 0E 06 F1 | 	add	objptr, #13
03fdc     07 CB 02 F1 | 	add	local49, objptr
03fe0                 | '     cmdE6_memory[i]           := 0
03fe0     65 01 48 FC | 	wrbyte	#0, local49
03fe4     AF CC 02 FB | 	rdlong	local50, fp
03fe8     04 0E 06 F1 | 	add	objptr, #4
03fec     07 CD 02 F1 | 	add	local50, objptr
03ff0                 | '     cmdE6_counter[i]          := 0
03ff0     66 01 48 FC | 	wrbyte	#0, local50
03ff4     AF CE 02 FB | 	rdlong	local51, fp
03ff8     04 0E 06 F1 | 	add	objptr, #4
03ffc     07 CF 02 F1 | 	add	local51, objptr
04000                 | '     cmdE6_updatePosition[i]   := false
04000     67 01 48 FC | 	wrbyte	#0, local51
04004     AF D0 02 FB | 	rdlong	local52, fp
04008     11 0E 86 F1 | 	sub	objptr, #17
0400c     07 D1 02 F1 | 	add	local52, objptr
04010                 | '     sampleNumber_memory[i]    := 0
04010     68 01 48 FC | 	wrbyte	#0, local52
04014     AF D2 02 FB | 	rdlong	local53, fp
04018     59 0E 86 F1 | 	sub	objptr, #89
0401c     07 D3 02 F1 | 	add	local53, objptr
04020                 | '     vibratoPos[i]             := 0
04020     69 01 48 FC | 	wrbyte	#0, local53
04024     AF D4 02 FB | 	rdlong	local54, fp
04028     02 D4 66 F0 | 	shl	local54, #2
0402c     10 0E 06 F1 | 	add	objptr, #16
04030     07 D5 02 F1 | 	add	local54, objptr
04034                 | '     portamentoPeriodMemory[i] := 0
04034     6A 01 68 FC | 	wrlong	#0, local54
04038     AF D6 02 FB | 	rdlong	local55, fp
0403c     25 0E 06 F1 | 	add	objptr, #37
04040     07 D7 02 F1 | 	add	local55, objptr
04044                 | '     portaGlissando[i]         := 0
04044     6B 01 48 FC | 	wrbyte	#0, local55
04048     AF D8 02 FB | 	rdlong	local56, fp
0404c     04 0E 06 F1 | 	add	objptr, #4
04050     07 D9 02 F1 | 	add	local56, objptr
04054                 | '     vibratoType[i]            := 0
04054     6C 01 48 FC | 	wrbyte	#0, local56
04058     AF DA 02 FB | 	rdlong	local57, fp
0405c     04 0E 06 F1 | 	add	objptr, #4
04060     07 DB 02 F1 | 	add	local57, objptr
04064                 | '     tremoloType[i]            := 0
04064     6D 01 48 FC | 	wrbyte	#0, local57
04068     AF DC 02 FB | 	rdlong	local58, fp
0406c     39 0E 86 F1 | 	sub	objptr, #57
04070     07 DD 02 F1 | 	add	local58, objptr
04074                 | '     tremoloPos[i]             := 0
04074     6E 01 48 FC | 	wrbyte	#0, local58
04078     AF DE 02 FB | 	rdlong	local59, fp
0407c     02 DE 66 F0 | 	shl	local59, #2
04080     7C 0E 86 F1 | 	sub	objptr, #124
04084     07 DF 02 F1 | 	add	local59, objptr
04088                 | '     deltaVolume[i]            := 0
04088     6F 01 68 FC | 	wrlong	#0, local59
0408c     AF E0 02 FB | 	rdlong	local60, fp
04090     02 E0 66 F0 | 	shl	local60, #2
04094     20 0E 86 F1 | 	sub	objptr, #32
04098     07 E1 02 F1 | 	add	local60, objptr
0409c                 | '     deltaPeriod[i]            := 0
0409c     70 01 68 FC | 	wrlong	#0, local60
040a0     AF E2 02 FB | 	rdlong	local61, fp
040a4     A0 0E 06 F1 | 	add	objptr, #160
040a8     07 E3 02 F1 | 	add	local61, objptr
040ac                 | '     resetTremolo[i]           := 0
040ac     71 01 48 FC | 	wrbyte	#0, local61
040b0     AF E4 02 FB | 	rdlong	local62, fp
040b4     04 0E 06 F1 | 	add	objptr, #4
040b8     07 E5 02 F1 | 	add	local62, objptr
040bc                 | '     resetVibrato[i]           := 0
040bc     72 01 48 FC | 	wrbyte	#0, local62
040c0     AF 84 02 FB | 	rdlong	local14, fp
040c4     01 84 06 F1 | 	add	local14, #1
040c8     AF 84 62 FC | 	wrlong	local14, fp
040cc     08 5E 85 F1 | 	sub	fp, #8
040d0     04 84 5E F2 | 	cmps	local14, #4 wcz
040d4     93 0F 86 F1 | 	sub	objptr, #403
040d8     7C FD 9F CD |  if_b	jmp	#LR__0140
040dc     AF F0 03 F6 | 	mov	ptra, fp
040e0     BF 00 A0 FD | 	call	#popregs_
040e4                 | _trackerplayer_spin2_initModule_ret
040e4     2D 00 64 FD | 	ret
040e8                 | 
040e8                 | ' 
040e8                 | ' 
040e8                 | ' ' This routine needs to be ticked X number of times per second
040e8                 | ' ' in order to advance the tracker play routine
040e8                 | ' '
040e8                 | ' PUB tick() | channel, sampleNumber, period, effect, i
040e8                 | _trackerplayer_spin2_tick
040e8     12 5A 05 F6 | 	mov	COUNT_, #18
040ec     B0 00 A0 FD | 	call	#pushregs_
040f0     30 F0 07 F1 | 	add	ptra, #48
040f4                 | ' 
040f4                 | '   if currentSongSpeed == 0
040f4     A4 0E 06 F1 | 	add	objptr, #164
040f8     07 6B CA FA | 	rdbyte	local01, objptr wz
040fc     A4 0E 86 F1 | 	sub	objptr, #164
04100                 | '     return
04100     34 03 90 AD |  if_e	jmp	#LR__0152
04104                 | ' 
04104                 | '   ' Iterate over the channels and process everything
04104                 | '   repeat channel from 0 to LAST_CHANNEL
04104     AF 00 68 FC | 	wrlong	#0, fp
04108                 | LR__0141
04108     04 5E 05 F1 | 	add	fp, #4
0410c     AF 62 02 F6 | 	mov	arg04, fp
04110     04 5E 05 F1 | 	add	fp, #4
04114     AF 64 02 F6 | 	mov	arg05, fp
04118     04 5E 05 F1 | 	add	fp, #4
0411c     AF 66 02 F6 | 	mov	arg06, fp
04120     0C 5E 85 F1 | 	sub	fp, #12
04124                 | ' 
04124                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04124     AF 5C 02 FB | 	rdlong	arg01, fp
04128     A3 0E 06 F1 | 	add	objptr, #163
0412c     07 5F C2 FA | 	rdbyte	arg02, objptr
04130     01 0E 86 F1 | 	sub	objptr, #1
04134     07 61 C2 FA | 	rdbyte	arg03, objptr
04138     7F 5E 06 F5 | 	and	arg02, #127
0413c     0C 0E 86 F1 | 	sub	objptr, #12
04140     07 6D 02 FB | 	rdlong	local02, objptr
04144     36 5F 02 F1 | 	add	arg02, local02
04148                 | ' 
04148                 | '   ' Get the note data for a specific channel/song position/pattern row
04148                 | '   patternNumber := byte[songPositionsLut][position & 127]
04148     2F 6F C2 FA | 	rdbyte	local03, arg02
0414c     0A 6E 66 F0 | 	shl	local03, #10
04150     04 0E 86 F1 | 	sub	objptr, #4
04154     07 71 02 FB | 	rdlong	local04, objptr
04158     92 0E 86 F1 | 	sub	objptr, #146
0415c     37 71 02 F1 | 	add	local04, local03
04160                 | '   patternPtr    := patternsData + (patternNumber << 10)
04160     3F 60 06 F5 | 	and	arg03, #63
04164     04 60 66 F0 | 	shl	arg03, #4
04168     30 71 02 F1 | 	add	local04, arg03
0416c     03 5C 06 F5 | 	and	arg01, #3
04170     02 5C 66 F0 | 	shl	arg01, #2
04174     2E 71 02 F1 | 	add	local04, arg01
04178                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04178     38 73 C2 FA | 	rdbyte	local05, local04
0417c     18 72 66 F0 | 	shl	local05, #24
04180     01 70 06 F1 | 	add	local04, #1
04184     38 75 C2 FA | 	rdbyte	local06, local04
04188     10 74 66 F0 | 	shl	local06, #16
0418c     3A 73 42 F5 | 	or	local05, local06
04190     01 70 06 F1 | 	add	local04, #1
04194     38 77 C2 FA | 	rdbyte	local07, local04
04198     08 76 66 F0 | 	shl	local07, #8
0419c     3B 73 42 F5 | 	or	local05, local07
041a0     01 70 06 F1 | 	add	local04, #1
041a4     38 79 C2 FA | 	rdbyte	local08, local04
041a8     3C 73 42 F5 | 	or	local05, local08
041ac                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
041ac     39 7B 02 F6 | 	mov	local09, local05
041b0     0C 7A 46 F0 | 	shr	local09, #12
041b4     0F 7A 06 F5 | 	and	local09, #15
041b8     39 7D 02 F6 | 	mov	local10, local05
041bc     18 7C 46 F0 | 	shr	local10, #24
041c0     F0 7C 06 F5 | 	and	local10, #240
041c4     3E 7B 42 F5 | 	or	local09, local10
041c8                 | ' 
041c8                 | '   ' Extract the different sub parts from the data
041c8                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
041c8     31 7B 62 FC | 	wrlong	local09, arg04
041cc     39 7F 02 F6 | 	mov	local11, local05
041d0     10 7E 46 F0 | 	shr	local11, #16
041d4     07 00 00 FF 
041d8     FF 7F 06 F5 | 	and	local11, ##4095
041dc                 | '   long[period]       :=  (data >> 16) & $FFF
041dc     32 7F 62 FC | 	wrlong	local11, arg05
041e0     07 00 00 FF 
041e4     FF 73 06 F5 | 	and	local05, ##4095
041e8                 | '   long[effect]       :=   data & $FFF
041e8     33 73 62 FC | 	wrlong	local05, arg06
041ec                 | '     processChannel(channel, sampleNumber, period, effect)
041ec     AF 5C 02 FB | 	rdlong	arg01, fp
041f0     04 5E 05 F1 | 	add	fp, #4
041f4     AF 5E 02 FB | 	rdlong	arg02, fp
041f8     04 5E 05 F1 | 	add	fp, #4
041fc     AF 60 02 FB | 	rdlong	arg03, fp
04200     04 5E 05 F1 | 	add	fp, #4
04204     AF 62 02 FB | 	rdlong	arg04, fp
04208     0C 5E 85 F1 | 	sub	fp, #12
0420c     0C 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04210     AF 80 02 FB | 	rdlong	local12, fp
04214     01 80 06 F1 | 	add	local12, #1
04218     AF 80 62 FC | 	wrlong	local12, fp
0421c     04 80 5E F2 | 	cmps	local12, #4 wcz
04220     E4 FE 9F CD |  if_b	jmp	#LR__0141
04224                 | ' 
04224                 | '   ' Incrementation the main counter that drives the whole play routine
04224                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04224     A1 0E 06 F1 | 	add	objptr, #161
04228     07 6B C2 FA | 	rdbyte	local01, objptr
0422c     01 6A 06 F1 | 	add	local01, #1
04230     07 6B 42 FC | 	wrbyte	local01, objptr
04234     03 0E 06 F1 | 	add	objptr, #3
04238     07 83 C2 FA | 	rdbyte	local13, objptr
0423c     01 0E 06 F1 | 	add	objptr, #1
04240     07 85 C2 FA | 	rdbyte	local14, objptr
04244     42 83 02 F1 | 	add	local13, local14
04248     04 0E 86 F1 | 	sub	objptr, #4
0424c     07 87 C2 FA | 	rdbyte	local15, objptr
04250     A1 0E 86 F1 | 	sub	objptr, #161
04254     41 87 5A F2 | 	cmps	local15, local13 wcz
04258                 | '     tickCounter := 0
04258     A1 0E 06 31 |  if_ae	add	objptr, #161
0425c     07 01 48 3C |  if_ae	wrbyte	#0, objptr
04260     A1 0E 86 31 |  if_ae	sub	objptr, #161
04264                 | ' 
04264                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
04264                 | '   if tickCounter == 0
04264     A1 0E 06 F1 | 	add	objptr, #161
04268     07 6B CA FA | 	rdbyte	local01, objptr wz
0426c     A1 0E 86 F1 | 	sub	objptr, #161
04270     C4 01 90 5D |  if_ne	jmp	#LR__0151
04274                 | ' 
04274                 | '     ' Handle the "pattern repeat" command, "E6"
04274                 | '     if cmdE6_updatePositionCommon
04274     F5 0F 06 F1 | 	add	objptr, #501
04278     07 6B CA FA | 	rdbyte	local01, objptr wz
0427c     F5 0F 86 F1 | 	sub	objptr, #501
04280     8C 00 90 AD |  if_e	jmp	#LR__0145
04284                 | '       repeat i from 0 to LAST_CHANNEL
04284     10 5E 05 F1 | 	add	fp, #16
04288     AF 00 68 FC | 	wrlong	#0, fp
0428c     10 5E 85 F1 | 	sub	fp, #16
04290     E0 BD 9F FE | 	loc	pa,	#(@LR__0144-@LR__0142)
04294     93 00 A0 FD | 	call	#FCACHE_LOAD_
04298                 | LR__0142
04298                 | '         if cmdE6_updatePosition[i]
04298     10 5E 05 F1 | 	add	fp, #16
0429c     AF 80 02 FB | 	rdlong	local12, fp
042a0     10 5E 85 F1 | 	sub	fp, #16
042a4     F1 0F 06 F1 | 	add	objptr, #497
042a8     07 81 02 F1 | 	add	local12, objptr
042ac     40 85 CA FA | 	rdbyte	local14, local12 wz
042b0     F1 0F 86 F1 | 	sub	objptr, #497
042b4     24 00 90 AD |  if_e	jmp	#LR__0143
042b8     10 5E 05 F1 | 	add	fp, #16
042bc     AF 88 02 FB | 	rdlong	local16, fp
042c0     10 5E 85 F1 | 	sub	fp, #16
042c4     E9 0F 06 F1 | 	add	objptr, #489
042c8     07 89 02 F1 | 	add	local16, objptr
042cc                 | '           patternRow := cmdE6_memory[i]
042cc     44 81 C2 FA | 	rdbyte	local12, local16
042d0     47 0F 86 F1 | 	sub	objptr, #327
042d4     07 81 42 FC | 	wrbyte	local12, objptr
042d8     A2 0E 86 F1 | 	sub	objptr, #162
042dc                 | LR__0143
042dc     10 5E 05 F1 | 	add	fp, #16
042e0     AF 8A 02 FB | 	rdlong	local17, fp
042e4     F1 0F 06 F1 | 	add	objptr, #497
042e8     07 8B 02 F1 | 	add	local17, objptr
042ec                 | '         cmdE6_updatePosition[i] := false
042ec     45 01 48 FC | 	wrbyte	#0, local17
042f0     AF 80 02 FB | 	rdlong	local12, fp
042f4     01 80 06 F1 | 	add	local12, #1
042f8     AF 80 62 FC | 	wrlong	local12, fp
042fc     10 5E 85 F1 | 	sub	fp, #16
04300     04 80 5E F2 | 	cmps	local12, #4 wcz
04304     F1 0F 86 F1 | 	sub	objptr, #497
04308     8C FF 9F CD |  if_b	jmp	#LR__0142
0430c                 | LR__0144
0430c     CC 00 90 FD | 	jmp	#LR__0149
04310                 | LR__0145
04310                 | ' 
04310                 | '     ' Handle the "skip to next pattern with offset command", "D"
04310                 | '     elseif cmdD_updatePosition
04310     E6 0F 06 F1 | 	add	objptr, #486
04314     07 6B CA FA | 	rdbyte	local01, objptr wz
04318     E6 0F 86 F1 | 	sub	objptr, #486
0431c     64 00 90 AD |  if_e	jmp	#LR__0146
04320                 | '       if ++songPosition >= songLength
04320     A3 0E 06 F1 | 	add	objptr, #163
04324     07 6B C2 FA | 	rdbyte	local01, objptr
04328     01 6A 06 F1 | 	add	local01, #1
0432c     07 6B 42 FC | 	wrbyte	local01, objptr
04330     07 83 C2 FA | 	rdbyte	local13, objptr
04334     09 0E 86 F1 | 	sub	objptr, #9
04338     07 85 C2 FA | 	rdbyte	local14, objptr
0433c     9A 0E 86 F1 | 	sub	objptr, #154
04340     42 83 5A F2 | 	cmps	local13, local14 wcz
04344                 | '         songPosition := 0
04344     A3 0E 06 31 |  if_ae	add	objptr, #163
04348     07 01 48 3C |  if_ae	wrbyte	#0, objptr
0434c     A3 0E 86 31 |  if_ae	sub	objptr, #163
04350     E4 0F 06 F1 | 	add	objptr, #484
04354     07 81 C2 FA | 	rdbyte	local12, objptr
04358     40 8D 02 F6 | 	mov	local18, local12
0435c     02 8C 66 F0 | 	shl	local18, #2
04360     40 8D 02 F1 | 	add	local18, local12
04364     01 8C 66 F0 | 	shl	local18, #1
04368     01 0E 06 F1 | 	add	objptr, #1
0436c     07 81 C2 FA | 	rdbyte	local12, objptr
04370     40 8D 02 F1 | 	add	local18, local12
04374                 | ' 
04374                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
04374     43 0F 86 F1 | 	sub	objptr, #323
04378     07 8D 42 FC | 	wrbyte	local18, objptr
0437c     A2 0E 86 F1 | 	sub	objptr, #162
04380                 | ' 
04380                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
04380                 | '     else
04380     58 00 90 FD | 	jmp	#LR__0148
04384                 | LR__0146
04384                 | '       if ++patternRow >= PATTERN_LENGTH
04384     A2 0E 06 F1 | 	add	objptr, #162
04388     07 6B C2 FA | 	rdbyte	local01, objptr
0438c     01 6A 06 F1 | 	add	local01, #1
04390     07 6B 42 FC | 	wrbyte	local01, objptr
04394     07 83 C2 FA | 	rdbyte	local13, objptr
04398     A2 0E 86 F1 | 	sub	objptr, #162
0439c     40 82 5E F2 | 	cmps	local13, #64 wcz
043a0     38 00 90 CD |  if_b	jmp	#LR__0147
043a4                 | '         patternRow := 0
043a4     A2 0E 06 F1 | 	add	objptr, #162
043a8     07 01 48 FC | 	wrbyte	#0, objptr
043ac                 | ' 
043ac                 | '         if ++songPosition >= songLength
043ac     01 0E 06 F1 | 	add	objptr, #1
043b0     07 6B C2 FA | 	rdbyte	local01, objptr
043b4     01 6A 06 F1 | 	add	local01, #1
043b8     07 6B 42 FC | 	wrbyte	local01, objptr
043bc     07 83 C2 FA | 	rdbyte	local13, objptr
043c0     09 0E 86 F1 | 	sub	objptr, #9
043c4     07 85 C2 FA | 	rdbyte	local14, objptr
043c8     9A 0E 86 F1 | 	sub	objptr, #154
043cc     42 83 5A F2 | 	cmps	local13, local14 wcz
043d0                 | '           songPosition := 0
043d0     A3 0E 06 31 |  if_ae	add	objptr, #163
043d4     07 01 48 3C |  if_ae	wrbyte	#0, objptr
043d8     A3 0E 86 31 |  if_ae	sub	objptr, #163
043dc                 | LR__0147
043dc                 | LR__0148
043dc                 | LR__0149
043dc                 | ' 
043dc                 | '     ' Handle "jump to song position" command, "B"
043dc                 | '     if cmdB_updatePosition
043dc     E8 0F 06 F1 | 	add	objptr, #488
043e0     07 6B CA FA | 	rdbyte	local01, objptr wz
043e4     E8 0F 86 F1 | 	sub	objptr, #488
043e8     28 00 90 AD |  if_e	jmp	#LR__0150
043ec                 | ' 
043ec                 | '       songPosition := cmdB_memoryZ
043ec     E7 0F 06 F1 | 	add	objptr, #487
043f0     07 6B C2 FA | 	rdbyte	local01, objptr
043f4     44 0F 86 F1 | 	sub	objptr, #324
043f8     07 6B 42 FC | 	wrbyte	local01, objptr
043fc                 | ' 
043fc                 | '       ifnot cmdD_updatePosition
043fc     43 0F 06 F1 | 	add	objptr, #323
04400     07 6B CA FA | 	rdbyte	local01, objptr wz
04404     E6 0F 86 F1 | 	sub	objptr, #486
04408                 | '         patternRow := 0
04408     A2 0E 06 A1 |  if_e	add	objptr, #162
0440c     07 01 48 AC |  if_e	wrbyte	#0, objptr
04410     A2 0E 86 A1 |  if_e	sub	objptr, #162
04414                 | LR__0150
04414                 | ' 
04414                 | '     ' We need to be sure that all positioning commands are reset for the next tick
04414                 | '     cmdE6_updatePositionCommon := false
04414     F5 0F 06 F1 | 	add	objptr, #501
04418     07 01 48 FC | 	wrbyte	#0, objptr
0441c                 | '     cmdB_updatePosition := false
0441c     0D 0E 86 F1 | 	sub	objptr, #13
04420     07 01 48 FC | 	wrbyte	#0, objptr
04424                 | '     cmdD_updatePosition := false
04424     02 0E 86 F1 | 	sub	objptr, #2
04428     07 01 48 FC | 	wrbyte	#0, objptr
0442c                 | '     patternDelay := 0
0442c     41 0F 86 F1 | 	sub	objptr, #321
04430     07 01 48 FC | 	wrbyte	#0, objptr
04434     A5 0E 86 F1 | 	sub	objptr, #165
04438                 | LR__0151
04438                 | LR__0152
04438     AF F0 03 F6 | 	mov	ptra, fp
0443c     BF 00 A0 FD | 	call	#popregs_
04440                 | _trackerplayer_spin2_tick_ret
04440     2D 00 64 FD | 	ret
04444                 | 
04444                 | ' 
04444                 | ' 
04444                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
04444                 | _trackerplayer_spin2_amigaPeriodToNote
04444                 | ' 
04444                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
04444     00 30 06 F6 | 	mov	_var01, #0
04448     00 BC 9F FE | 	loc	pa,	#(@LR__0154-@LR__0153)
0444c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04450                 | LR__0153
04450                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
04450     06 00 00 FF 
04454     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04458     14 33 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
0445c     2F 35 02 F6 | 	mov	_var03, arg02
04460     03 34 66 F0 | 	shl	_var03, #3
04464     2F 35 02 F1 | 	add	_var03, arg02
04468     03 34 66 F0 | 	shl	_var03, #3
0446c     1A 33 02 F1 | 	add	_var02, _var03
04470     18 37 02 F6 | 	mov	_var04, _var01
04474     01 36 66 F0 | 	shl	_var04, #1
04478     19 37 02 F1 | 	add	_var04, _var02
0447c     1B 39 E2 FA | 	rdword	_var05, _var04
04480     2E 39 5A F2 | 	cmps	_var05, arg01 wcz
04484                 | '       quit
04484     06 00 00 FF 
04488     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
0448c     0C 00 90 ED |  if_be	jmp	#LR__0155
04490     01 30 06 F1 | 	add	_var01, #1
04494     24 30 5E F2 | 	cmps	_var01, #36 wcz
04498     B4 FF 9F CD |  if_b	jmp	#LR__0153
0449c                 | LR__0154
0449c                 | LR__0155
0449c                 | ' 
0449c                 | '   return i
0449c     18 2B 02 F6 | 	mov	result1, _var01
044a0                 | _trackerplayer_spin2_amigaPeriodToNote_ret
044a0     2D 00 64 FD | 	ret
044a4                 | 
044a4                 | ' 
044a4                 | ' 
044a4                 | ' PRI retunePeriod(period, fTune) | noteNumber
044a4                 | _trackerplayer_spin2_retunePeriod
044a4     06 5A 05 F6 | 	mov	COUNT_, #6
044a8     B0 00 A0 FD | 	call	#pushregs_
044ac     2E 6B 02 F6 | 	mov	local01, arg01
044b0     2F 6D 02 F6 | 	mov	local02, arg02
044b4                 | ' 
044b4                 | '   if period > 0 and fTune < 16
044b4     00 6A 5E F2 | 	cmps	local01, #0 wcz
044b8     50 00 90 ED |  if_be	jmp	#LR__0156
044bc     10 6C 5E F2 | 	cmps	local02, #16 wcz
044c0     48 00 90 3D |  if_ae	jmp	#LR__0156
044c4                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
044c4     35 5D E2 FA | 	rdword	arg01, local01
044c8     00 5E 06 F6 | 	mov	arg02, #0
044cc     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
044d0     15 6F 02 F6 | 	mov	local03, result1
044d4     06 00 00 FF 
044d8     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
044dc     14 71 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
044e0     36 73 02 F6 | 	mov	local05, local02
044e4     03 72 66 F0 | 	shl	local05, #3
044e8     36 73 02 F1 | 	add	local05, local02
044ec     03 72 66 F0 | 	shl	local05, #3
044f0     39 71 02 F1 | 	add	local04, local05
044f4     01 6E 66 F0 | 	shl	local03, #1
044f8     38 6F 02 F1 | 	add	local03, local04
044fc                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
044fc     37 75 E2 FA | 	rdword	local06, local03
04500     35 75 52 FC | 	wrword	local06, local01
04504     06 00 00 FF 
04508     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
0450c                 | LR__0156
0450c     AF F0 03 F6 | 	mov	ptra, fp
04510     BF 00 A0 FD | 	call	#popregs_
04514                 | _trackerplayer_spin2_retunePeriod_ret
04514     2D 00 64 FD | 	ret
04518                 | 
04518                 | ' 
04518                 | ' 
04518                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04518                 | _trackerplayer_spin2_getSampleInfo
04518     2E 31 0A F6 | 	mov	_var01, arg01 wz
0451c                 | ' 
0451c                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
0451c     08 00 90 AD |  if_e	jmp	#LR__0157
04520     1F 30 5E F2 | 	cmps	_var01, #31 wcz
04524     08 00 90 ED |  if_be	jmp	#LR__0158
04528                 | LR__0157
04528                 | '     long[samplePtr] := 0
04528     2F 01 68 FC | 	wrlong	#0, arg02
0452c                 | '     return
0452c     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
04530                 | LR__0158
04530                 | ' 
04530                 | '   sampleNumber--
04530     01 30 86 F1 | 	sub	_var01, #1
04534     18 33 02 F6 | 	mov	_var02, _var01
04538     04 32 66 F0 | 	shl	_var02, #4
0453c     18 33 82 F1 | 	sub	_var02, _var01
04540     01 32 66 F0 | 	shl	_var02, #1
04544     0A 0E 06 F1 | 	add	objptr, #10
04548     07 35 02 FB | 	rdlong	_var03, objptr
0454c     19 35 02 F1 | 	add	_var03, _var02
04550                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
04550     1A 37 02 F6 | 	mov	_var04, _var03
04554     16 36 06 F1 | 	add	_var04, #22
04558     1B 39 C2 FA | 	rdbyte	_var05, _var04
0455c     08 38 66 F0 | 	shl	_var05, #8
04560     1A 3B 02 F6 | 	mov	_var06, _var03
04564     17 3A 06 F1 | 	add	_var06, #23
04568     1D 3D C2 FA | 	rdbyte	_var07, _var06
0456c     1E 39 42 F5 | 	or	_var05, _var07
04570     01 38 66 F0 | 	shl	_var05, #1
04574                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
04574     30 39 62 FC | 	wrlong	_var05, arg03
04578     1A 3F 02 F6 | 	mov	_var08, _var03
0457c     18 3E 06 F1 | 	add	_var08, #24
04580                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
04580     1F 41 C2 FA | 	rdbyte	_var09, _var08
04584     31 41 62 FC | 	wrlong	_var09, arg04
04588     1A 43 02 F6 | 	mov	_var10, _var03
0458c     19 42 06 F1 | 	add	_var10, #25
04590                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
04590     21 41 C2 FA | 	rdbyte	_var09, _var10
04594     32 41 62 FC | 	wrlong	_var09, arg05
04598     1A 45 02 F6 | 	mov	_var11, _var03
0459c     1A 44 06 F1 | 	add	_var11, #26
045a0     22 47 C2 FA | 	rdbyte	_var12, _var11
045a4     08 46 66 F0 | 	shl	_var12, #8
045a8     1A 49 02 F6 | 	mov	_var13, _var03
045ac     1B 48 06 F1 | 	add	_var13, #27
045b0     24 3D C2 FA | 	rdbyte	_var07, _var13
045b4     1E 47 42 F5 | 	or	_var12, _var07
045b8     01 46 66 F0 | 	shl	_var12, #1
045bc                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
045bc     33 47 62 FC | 	wrlong	_var12, arg06
045c0     1A 4B 02 F6 | 	mov	_var14, _var03
045c4     1C 4A 06 F1 | 	add	_var14, #28
045c8     25 4D C2 FA | 	rdbyte	_var15, _var14
045cc     08 4C 66 F0 | 	shl	_var15, #8
045d0     1D 34 06 F1 | 	add	_var03, #29
045d4     1A 3D C2 FA | 	rdbyte	_var07, _var03
045d8     1E 4D 42 F5 | 	or	_var15, _var07
045dc     01 4C 66 F0 | 	shl	_var15, #1
045e0                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
045e0     34 4D 62 FC | 	wrlong	_var15, arg07
045e4     02 30 66 F0 | 	shl	_var01, #2
045e8     08 0E 06 F1 | 	add	objptr, #8
045ec     07 31 02 F1 | 	add	_var01, objptr
045f0                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
045f0     18 41 02 FB | 	rdlong	_var09, _var01
045f4     2F 41 62 FC | 	wrlong	_var09, arg02
045f8                 | ' 
045f8                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
045f8     34 41 02 FB | 	rdlong	_var09, arg07
045fc     02 40 0E F2 | 	cmp	_var09, #2 wz
04600     12 0E 86 F1 | 	sub	objptr, #18
04604     08 00 90 5D |  if_ne	jmp	#LR__0159
04608     33 3D 0A FB | 	rdlong	_var07, arg06 wz
0460c                 | '     long[repeatLength] := 1
0460c     34 03 68 AC |  if_e	wrlong	#1, arg07
04610                 | LR__0159
04610                 | _trackerplayer_spin2_getSampleInfo_ret
04610     2D 00 64 FD | 	ret
04614                 | 
04614                 | ' 
04614                 | ' 
04614                 | ' PRI triggerNote(channel)
04614                 | _trackerplayer_spin2_triggerNote
04614     2E 31 02 F6 | 	mov	_var01, arg01
04618     02 30 66 F0 | 	shl	_var01, #2
0461c     47 0F 06 F1 | 	add	objptr, #327
04620     07 31 02 F1 | 	add	_var01, objptr
04624     2E 33 02 F6 | 	mov	_var02, arg01
04628     90 0E 86 F1 | 	sub	objptr, #144
0462c                 | ' 
0462c                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
0462c     18 35 02 FB | 	rdlong	_var03, _var01
04630     07 33 02 F1 | 	add	_var02, objptr
04634     19 35 42 FC | 	wrbyte	_var03, _var02
04638     2E 37 02 F6 | 	mov	_var04, arg01
0463c     02 36 66 F0 | 	shl	_var04, #2
04640     80 0E 06 F1 | 	add	objptr, #128
04644     07 37 02 F1 | 	add	_var04, objptr
04648     2E 39 02 F6 | 	mov	_var05, arg01
0464c     02 38 66 F0 | 	shl	_var05, #2
04650     90 0E 86 F1 | 	sub	objptr, #144
04654                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
04654     1B 35 02 FB | 	rdlong	_var03, _var04
04658     07 39 02 F1 | 	add	_var05, objptr
0465c     1C 35 62 FC | 	wrlong	_var03, _var05
04660     2E 3B 02 F6 | 	mov	_var06, arg01
04664     02 3A 66 F0 | 	shl	_var06, #2
04668     80 0E 06 F1 | 	add	objptr, #128
0466c     07 3B 02 F1 | 	add	_var06, objptr
04670     2E 3D 02 F6 | 	mov	_var07, arg01
04674     02 3C 66 F0 | 	shl	_var07, #2
04678     48 0E 86 F1 | 	sub	objptr, #72
0467c                 | '   currPeriod[channel]       := lastSetPeriod[channel]
0467c     1D 35 02 FB | 	rdlong	_var03, _var06
04680     07 3D 02 F1 | 	add	_var07, objptr
04684     1E 35 62 FC | 	wrlong	_var03, _var07
04688     2E 3F 02 F6 | 	mov	_var08, arg01
0468c     02 3E 66 F0 | 	shl	_var08, #2
04690     78 0E 06 F1 | 	add	objptr, #120
04694     07 3F 02 F1 | 	add	_var08, objptr
04698     2E 41 02 F6 | 	mov	_var09, arg01
0469c     01 40 66 F0 | 	shl	_var09, #1
046a0     9C 0E 86 F1 | 	sub	objptr, #156
046a4                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
046a4     1F 35 02 FB | 	rdlong	_var03, _var08
046a8     07 41 02 F1 | 	add	_var09, objptr
046ac     20 35 52 FC | 	wrword	_var03, _var09
046b0     2E 43 02 F6 | 	mov	_var10, arg01
046b4     02 42 66 F0 | 	shl	_var10, #2
046b8     AC 0E 06 F1 | 	add	objptr, #172
046bc     07 43 02 F1 | 	add	_var10, objptr
046c0     2E 45 02 F6 | 	mov	_var11, arg01
046c4     02 44 66 F0 | 	shl	_var11, #2
046c8     A4 0E 86 F1 | 	sub	objptr, #164
046cc                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
046cc     21 35 02 FB | 	rdlong	_var03, _var10
046d0     07 45 02 F1 | 	add	_var11, objptr
046d4     22 35 62 FC | 	wrlong	_var03, _var11
046d8     2E 47 02 F6 | 	mov	_var12, arg01
046dc     02 46 66 F0 | 	shl	_var12, #2
046e0     B4 0E 06 F1 | 	add	objptr, #180
046e4     07 47 02 F1 | 	add	_var12, objptr
046e8     2E 49 02 F6 | 	mov	_var13, arg01
046ec     01 48 66 F0 | 	shl	_var13, #1
046f0     A0 0E 86 F1 | 	sub	objptr, #160
046f4                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
046f4     23 35 02 FB | 	rdlong	_var03, _var12
046f8     07 49 02 F1 | 	add	_var13, objptr
046fc     24 35 52 FC | 	wrword	_var03, _var13
04700     1F 0F 06 F1 | 	add	objptr, #287
04704     07 5D 02 F1 | 	add	arg01, objptr
04708     2E 4B C2 FA | 	rdbyte	_var14, arg01
0470c     01 4A 06 F1 | 	add	_var14, #1
04710                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
04710     2E 4B 42 FC | 	wrbyte	_var14, arg01
04714     F6 0F 86 F1 | 	sub	objptr, #502
04718                 | _trackerplayer_spin2_triggerNote_ret
04718     2D 00 64 FD | 	ret
0471c                 | 
0471c                 | ' 
0471c                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
0471c                 | _trackerplayer_spin2_processChannel
0471c     31 5A 05 F6 | 	mov	COUNT_, #49
04720     B0 00 A0 FD | 	call	#pushregs_
04724     D0 F0 07 F1 | 	add	ptra, #208
04728     AF 5C 62 FC | 	wrlong	arg01, fp
0472c     04 5E 05 F1 | 	add	fp, #4
04730     AF 5E 62 FC | 	wrlong	arg02, fp
04734     04 5E 05 F1 | 	add	fp, #4
04738     AF 60 62 FC | 	wrlong	arg03, fp
0473c     04 5E 05 F1 | 	add	fp, #4
04740     AF 62 62 FC | 	wrlong	arg04, fp
04744     0C 5E 85 F1 | 	sub	fp, #12
04748                 | ' 
04748                 | '   channel := channel & 3
04748     AF 6A 02 FB | 	rdlong	local01, fp
0474c     03 6A 06 F5 | 	and	local01, #3
04750     AF 6A 62 FC | 	wrlong	local01, fp
04754     0C 5E 05 F1 | 	add	fp, #12
04758     AF 6C 02 FB | 	rdlong	local02, fp
0475c     08 6C 46 F0 | 	shr	local02, #8
04760     36 6F 02 F6 | 	mov	local03, local02
04764     0F 6E 06 F5 | 	and	local03, #15
04768                 | '   cmd     := (effect >> 8) & $F
04768     BA 0F 06 F1 | 	add	objptr, #442
0476c     07 6F 42 FC | 	wrbyte	local03, objptr
04770     AF 70 02 FB | 	rdlong	local04, fp
04774     04 70 46 F0 | 	shr	local04, #4
04778     38 73 02 F6 | 	mov	local05, local04
0477c     0F 72 06 F5 | 	and	local05, #15
04780                 | '   x       := (effect >> 4) & $F
04780     03 0E 86 F1 | 	sub	objptr, #3
04784     07 73 42 FC | 	wrbyte	local05, objptr
04788     AF 74 02 FB | 	rdlong	local06, fp
0478c     0F 74 06 F5 | 	and	local06, #15
04790                 | '   y       := (effect     ) & $F
04790     01 0E 06 F1 | 	add	objptr, #1
04794     07 75 42 FC | 	wrbyte	local06, objptr
04798     AF 76 02 FB | 	rdlong	local07, fp
0479c     0C 5E 85 F1 | 	sub	fp, #12
047a0     FF 76 06 F5 | 	and	local07, #255
047a4                 | '   z       := (effect     ) & $FF
047a4     01 0E 06 F1 | 	add	objptr, #1
047a8     07 77 42 FC | 	wrbyte	local07, objptr
047ac                 | ' 
047ac                 | '   ' Handle everything that executes on "tick zero"
047ac                 | '   if tickCounter == 0
047ac     18 0F 86 F1 | 	sub	objptr, #280
047b0     07 6B CA FA | 	rdbyte	local01, objptr wz
047b4     A1 0E 86 F1 | 	sub	objptr, #161
047b8     F0 03 90 5D |  if_ne	jmp	#LR__0170
047bc     AF 78 02 FB | 	rdlong	local08, fp
047c0     02 78 66 F0 | 	shl	local08, #2
047c4     EF 0E 06 F1 | 	add	objptr, #239
047c8     07 79 02 F1 | 	add	local08, objptr
047cc                 | ' 
047cc                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
047cc                 | '     deltaPeriod[channel] := 0
047cc     3C 01 68 FC | 	wrlong	#0, local08
047d0     AF 7A 02 FB | 	rdlong	local09, fp
047d4     02 7A 66 F0 | 	shl	local09, #2
047d8     20 0E 06 F1 | 	add	objptr, #32
047dc     07 7B 02 F1 | 	add	local09, objptr
047e0                 | '     deltaVolume[channel] := 0
047e0     3D 01 68 FC | 	wrlong	#0, local09
047e4                 | ' 
047e4                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
047e4                 | '     if sampleNumber > 0
047e4     04 5E 05 F1 | 	add	fp, #4
047e8     AF 6A 02 FB | 	rdlong	local01, fp
047ec     04 5E 85 F1 | 	sub	fp, #4
047f0     00 6A 5E F2 | 	cmps	local01, #0 wcz
047f4     0F 0F 86 F1 | 	sub	objptr, #271
047f8     20 00 90 ED |  if_be	jmp	#LR__0160
047fc     AF 7C 02 FB | 	rdlong	local10, fp
04800     E0 0F 06 F1 | 	add	objptr, #480
04804     07 7D 02 F1 | 	add	local10, objptr
04808                 | '       sampleNumber_memory[channel] := sampleNumber
04808     04 5E 05 F1 | 	add	fp, #4
0480c     AF 6A 02 FB | 	rdlong	local01, fp
04810     04 5E 85 F1 | 	sub	fp, #4
04814     3E 6B 42 FC | 	wrbyte	local01, local10
04818     E0 0F 86 F1 | 	sub	objptr, #480
0481c                 | LR__0160
0481c     AF 7E 02 FB | 	rdlong	local11, fp
04820     E0 0F 06 F1 | 	add	objptr, #480
04824     07 7F 02 F1 | 	add	local11, objptr
04828     20 5E 05 F1 | 	add	fp, #32
0482c     AF 80 02 F6 | 	mov	local12, fp
04830     10 5E 85 F1 | 	sub	fp, #16
04834     AF 82 02 F6 | 	mov	local13, fp
04838     31 0E 86 F1 | 	sub	objptr, #49
0483c     07 85 02 F6 | 	mov	local14, objptr
04840     04 5E 05 F1 | 	add	fp, #4
04844     AF 86 02 F6 | 	mov	local15, fp
04848     04 5E 05 F1 | 	add	fp, #4
0484c     AF 88 02 F6 | 	mov	local16, fp
04850     04 5E 05 F1 | 	add	fp, #4
04854     AF 8A 02 F6 | 	mov	local17, fp
04858                 | ' 
04858                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
04858                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
04858     3F 5D C2 FA | 	rdbyte	arg01, local11
0485c     42 63 02 F6 | 	mov	arg04, local14
04860     43 8D 02 F6 | 	mov	local18, local15
04864     44 8F 02 F6 | 	mov	local19, local16
04868     45 91 02 F6 | 	mov	local20, local17
0486c     40 5F 02 F6 | 	mov	arg02, local12
04870     41 61 02 F6 | 	mov	arg03, local13
04874     46 65 02 F6 | 	mov	arg05, local18
04878     47 67 02 F6 | 	mov	arg06, local19
0487c     48 69 02 F6 | 	mov	arg07, local20
04880     AF 0F 86 F1 | 	sub	objptr, #431
04884     1C 5E 85 F1 | 	sub	fp, #28
04888     8C FC BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
0488c                 | ' 
0488c                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
0488c                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
0488c                 | '     if sampleNumber > 0
0488c     04 5E 05 F1 | 	add	fp, #4
04890     AF 6A 02 FB | 	rdlong	local01, fp
04894     04 5E 85 F1 | 	sub	fp, #4
04898     00 6A 5E F2 | 	cmps	local01, #0 wcz
0489c     24 00 90 ED |  if_be	jmp	#LR__0161
048a0     AF 92 02 FB | 	rdlong	local21, fp
048a4     02 92 66 F0 | 	shl	local21, #2
048a8     FF 0E 06 F1 | 	add	objptr, #255
048ac     07 93 02 F1 | 	add	local21, objptr
048b0                 | '       currVolume[channel] := volume
048b0     14 5E 05 F1 | 	add	fp, #20
048b4     AF 6A 02 FB | 	rdlong	local01, fp
048b8     14 5E 85 F1 | 	sub	fp, #20
048bc     49 6B 62 FC | 	wrlong	local01, local21
048c0     FF 0E 86 F1 | 	sub	objptr, #255
048c4                 | LR__0161
048c4                 | ' 
048c4                 | '     ' Handle all commands that executes on "zero tick"
048c4                 | '     sampleOffset := 0
048c4     B3 0F 06 F1 | 	add	objptr, #435
048c8     07 01 68 FC | 	wrlong	#0, objptr
048cc     B3 0F 86 F1 | 	sub	objptr, #435
048d0                 | '     handleZeroTickCommands(channel)
048d0     AF 5C 02 FB | 	rdlong	arg01, fp
048d4     60 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
048d8                 | ' 
048d8                 | '     ' Prepare sample data for triggering (now or later)
048d8                 | '     if period > 0
048d8     08 5E 05 F1 | 	add	fp, #8
048dc     AF 6A 02 FB | 	rdlong	local01, fp
048e0     08 5E 85 F1 | 	sub	fp, #8
048e4     00 6A 5E F2 | 	cmps	local01, #0 wcz
048e8     C8 02 90 ED |  if_be	jmp	#LR__0171
048ec     08 5E 05 F1 | 	add	fp, #8
048f0     AF 94 02 F6 | 	mov	local22, fp
048f4                 | ' 
048f4                 | '       retunePeriod(@period, fineTune)
048f4     AF 0F 06 F1 | 	add	objptr, #431
048f8     07 5F 02 FB | 	rdlong	arg02, objptr
048fc     AF 0F 86 F1 | 	sub	objptr, #431
04900     4A 5D 02 F6 | 	mov	arg01, local22
04904     08 5E 85 F1 | 	sub	fp, #8
04908     98 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
0490c     AF 96 02 FB | 	rdlong	local23, fp
04910     D3 0E 06 F1 | 	add	objptr, #211
04914     07 97 02 F1 | 	add	local23, objptr
04918                 | '       currFineTune[channel]        := fineTune
04918     DC 0E 06 F1 | 	add	objptr, #220
0491c     07 6B 02 FB | 	rdlong	local01, objptr
04920     4B 6B 42 FC | 	wrbyte	local01, local23
04924     AF 98 02 FB | 	rdlong	local24, fp
04928     02 98 66 F0 | 	shl	local24, #2
0492c     88 0E 86 F1 | 	sub	objptr, #136
04930     07 99 02 F1 | 	add	local24, objptr
04934                 | '       lastSetPeriod[channel]       := period
04934     08 5E 05 F1 | 	add	fp, #8
04938     AF 6A 02 FB | 	rdlong	local01, fp
0493c     4C 6B 62 FC | 	wrlong	local01, local24
04940     08 5E 85 F1 | 	sub	fp, #8
04944     AF 9A 02 FB | 	rdlong	local25, fp
04948     02 9A 66 F0 | 	shl	local25, #2
0494c     40 0E 06 F1 | 	add	objptr, #64
04950     07 9B 02 F1 | 	add	local25, objptr
04954                 | '       lastSetRepeatLength[channel] := repeatLength
04954     1C 5E 05 F1 | 	add	fp, #28
04958     AF 6A 02 FB | 	rdlong	local01, fp
0495c     4D 6B 62 FC | 	wrlong	local01, local25
04960     1C 5E 85 F1 | 	sub	fp, #28
04964     AF 9C 02 FB | 	rdlong	local26, fp
04968     02 9C 66 F0 | 	shl	local26, #2
0496c     10 0E 06 F1 | 	add	objptr, #16
04970     07 9D 02 F1 | 	add	local26, objptr
04974                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04974     18 5E 05 F1 | 	add	fp, #24
04978     AF 6A 02 FB | 	rdlong	local01, fp
0497c     4E 6B 62 FC | 	wrlong	local01, local26
04980     08 5E 05 F1 | 	add	fp, #8
04984     AF 9E 02 FB | 	rdlong	local27, fp
04988     20 5E 85 F1 | 	sub	fp, #32
0498c     3C 0E 06 F1 | 	add	objptr, #60
04990     07 A1 02 FB | 	rdlong	local28, objptr
04994     50 9F 02 F1 | 	add	local27, local28
04998     AF A2 02 FB | 	rdlong	local29, fp
0499c     02 A2 66 F0 | 	shl	local29, #2
049a0     7C 0E 86 F1 | 	sub	objptr, #124
049a4     07 A3 02 F1 | 	add	local29, objptr
049a8                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
049a8     51 9F 62 FC | 	wrlong	local27, local29
049ac     AF A4 02 FB | 	rdlong	local30, fp
049b0     02 A4 66 F0 | 	shl	local30, #2
049b4     10 0E 06 F1 | 	add	objptr, #16
049b8     07 A5 02 F1 | 	add	local30, objptr
049bc                 | '       lastSetSampleNr[channel]     := sampleNumber
049bc     04 5E 05 F1 | 	add	fp, #4
049c0     AF 6A 02 FB | 	rdlong	local01, fp
049c4     52 6B 62 FC | 	wrlong	local01, local30
049c8                 | ' 
049c8                 | '       ' This calculates the correct sample length in all situations
049c8                 | '       if repeatLength > 2
049c8     18 5E 05 F1 | 	add	fp, #24
049cc     AF 6A 02 FB | 	rdlong	local01, fp
049d0     1C 5E 85 F1 | 	sub	fp, #28
049d4     02 6A 5E F2 | 	cmps	local01, #2 wcz
049d8     47 0F 86 F1 | 	sub	objptr, #327
049dc     20 00 90 ED |  if_be	jmp	#LR__0162
049e0     18 5E 05 F1 | 	add	fp, #24
049e4     AF A6 02 FB | 	rdlong	local31, fp
049e8     04 5E 05 F1 | 	add	fp, #4
049ec     AF A0 02 FB | 	rdlong	local28, fp
049f0     50 A7 02 F1 | 	add	local31, local28
049f4                 | '         sampleLength := repeatPoint + repeatLength
049f4     0C 5E 85 F1 | 	sub	fp, #12
049f8     AF A6 62 FC | 	wrlong	local31, fp
049fc     10 5E 85 F1 | 	sub	fp, #16
04a00                 | LR__0162
04a00                 | ' 
04a00                 | '       if sampleLength - sampleOffset < 1
04a00     10 5E 05 F1 | 	add	fp, #16
04a04     AF 6A 02 FB | 	rdlong	local01, fp
04a08     10 5E 85 F1 | 	sub	fp, #16
04a0c     B3 0F 06 F1 | 	add	objptr, #435
04a10     07 A1 02 FB | 	rdlong	local28, objptr
04a14     B3 0F 86 F1 | 	sub	objptr, #435
04a18     50 6B 82 F1 | 	sub	local01, local28
04a1c     01 6A 5E F2 | 	cmps	local01, #1 wcz
04a20     1C 00 90 3D |  if_ae	jmp	#LR__0163
04a24     AF A8 02 FB | 	rdlong	local32, fp
04a28     02 A8 66 F0 | 	shl	local32, #2
04a2c     57 0F 06 F1 | 	add	objptr, #343
04a30     07 A9 02 F1 | 	add	local32, objptr
04a34                 | '         lastSetSampleLength[channel] := 1
04a34     54 03 68 FC | 	wrlong	#1, local32
04a38                 | '       else
04a38     57 0F 86 F1 | 	sub	objptr, #343
04a3c     30 00 90 FD | 	jmp	#LR__0164
04a40                 | LR__0163
04a40     10 5E 05 F1 | 	add	fp, #16
04a44     AF AA 02 FB | 	rdlong	local33, fp
04a48     10 5E 85 F1 | 	sub	fp, #16
04a4c     B3 0F 06 F1 | 	add	objptr, #435
04a50     07 A1 02 FB | 	rdlong	local28, objptr
04a54     50 AB 82 F1 | 	sub	local33, local28
04a58     AF AC 02 FB | 	rdlong	local34, fp
04a5c     02 AC 66 F0 | 	shl	local34, #2
04a60     5C 0E 86 F1 | 	sub	objptr, #92
04a64     07 AD 02 F1 | 	add	local34, objptr
04a68                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04a68     56 AB 62 FC | 	wrlong	local33, local34
04a6c     57 0F 86 F1 | 	sub	objptr, #343
04a70                 | LR__0164
04a70                 | ' 
04a70                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04a70                 | '       if sampleOffset > sampleLength
04a70     B3 0F 06 F1 | 	add	objptr, #435
04a74     07 6B 02 FB | 	rdlong	local01, objptr
04a78     B3 0F 86 F1 | 	sub	objptr, #435
04a7c     10 5E 05 F1 | 	add	fp, #16
04a80     AF A0 02 FB | 	rdlong	local28, fp
04a84     10 5E 85 F1 | 	sub	fp, #16
04a88     50 6B 5A F2 | 	cmps	local01, local28 wcz
04a8c     50 00 90 ED |  if_be	jmp	#LR__0165
04a90     20 5E 05 F1 | 	add	fp, #32
04a94     AF AE 02 FB | 	rdlong	local35, fp
04a98     08 5E 85 F1 | 	sub	fp, #8
04a9c     AF A0 02 FB | 	rdlong	local28, fp
04aa0     18 5E 85 F1 | 	sub	fp, #24
04aa4     50 AF 02 F1 | 	add	local35, local28
04aa8     AF B0 02 FB | 	rdlong	local36, fp
04aac     02 B0 66 F0 | 	shl	local36, #2
04ab0     37 0F 06 F1 | 	add	objptr, #311
04ab4     07 B1 02 F1 | 	add	local36, objptr
04ab8                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04ab8     58 AF 62 FC | 	wrlong	local35, local36
04abc     AF B2 02 FB | 	rdlong	local37, fp
04ac0     02 B2 66 F0 | 	shl	local37, #2
04ac4     20 0E 06 F1 | 	add	objptr, #32
04ac8     07 B3 02 F1 | 	add	local37, objptr
04acc                 | '         lastSetSampleLength[channel] := repeatLength
04acc     1C 5E 05 F1 | 	add	fp, #28
04ad0     AF 6A 02 FB | 	rdlong	local01, fp
04ad4     1C 5E 85 F1 | 	sub	fp, #28
04ad8     59 6B 62 FC | 	wrlong	local01, local37
04adc     57 0F 86 F1 | 	sub	objptr, #343
04ae0                 | LR__0165
04ae0                 | ' 
04ae0                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04ae0                 | '       ifnot cmd == $3 || cmd == $5
04ae0     BA 0F 06 F1 | 	add	objptr, #442
04ae4     07 6B C2 FA | 	rdbyte	local01, objptr
04ae8     BA 0F 86 F1 | 	sub	objptr, #442
04aec     03 6A 0E F2 | 	cmp	local01, #3 wz
04af0     54 00 90 AD |  if_e	jmp	#LR__0168
04af4     BA 0F 06 F1 | 	add	objptr, #442
04af8     07 B5 C2 FA | 	rdbyte	local38, objptr
04afc     BA 0F 86 F1 | 	sub	objptr, #442
04b00     5A A1 02 F6 | 	mov	local28, local38
04b04     05 A0 0E F2 | 	cmp	local28, #5 wz
04b08     3C 00 90 AD |  if_e	jmp	#LR__0168
04b0c                 | '         ifnot cmd == $E && x == $D
04b0c     BA 0F 06 F1 | 	add	objptr, #442
04b10     07 B7 C2 FA | 	rdbyte	local39, objptr
04b14     BA 0F 86 F1 | 	sub	objptr, #442
04b18     5B 6B 02 F6 | 	mov	local01, local39
04b1c     0E 6A 0E F2 | 	cmp	local01, #14 wz
04b20     18 00 90 5D |  if_ne	jmp	#LR__0166
04b24     B7 0F 06 F1 | 	add	objptr, #439
04b28     07 B5 C2 FA | 	rdbyte	local38, objptr
04b2c     B7 0F 86 F1 | 	sub	objptr, #439
04b30     5A A1 02 F6 | 	mov	local28, local38
04b34     0D A0 0E F2 | 	cmp	local28, #13 wz
04b38     0C 00 90 AD |  if_e	jmp	#LR__0167
04b3c                 | LR__0166
04b3c                 | '           triggerNote(channel)
04b3c     AF 6A 02 FB | 	rdlong	local01, fp
04b40     35 5D 02 F6 | 	mov	arg01, local01
04b44     CC FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04b48                 | LR__0167
04b48                 | LR__0168
04b48                 | ' 
04b48                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04b48                 | '       if resetTremolo[channel] > 0
04b48     AF 6A 02 FB | 	rdlong	local01, fp
04b4c     8F 0F 06 F1 | 	add	objptr, #399
04b50     07 6B 02 F1 | 	add	local01, objptr
04b54     35 A1 C2 FA | 	rdbyte	local28, local01
04b58     00 A0 5E F2 | 	cmps	local28, #0 wcz
04b5c     8F 0F 86 F1 | 	sub	objptr, #399
04b60     14 00 90 ED |  if_be	jmp	#LR__0169
04b64     AF B8 02 FB | 	rdlong	local40, fp
04b68     8B 0F 06 F1 | 	add	objptr, #395
04b6c     07 B9 02 F1 | 	add	local40, objptr
04b70                 | '         tremoloPos[channel] := 0
04b70     5C 01 48 FC | 	wrbyte	#0, local40
04b74     8B 0F 86 F1 | 	sub	objptr, #395
04b78                 | LR__0169
04b78                 | ' 
04b78                 | '       if resetVibrato[channel] > 0
04b78     AF 6A 02 FB | 	rdlong	local01, fp
04b7c     93 0F 06 F1 | 	add	objptr, #403
04b80     07 6B 02 F1 | 	add	local01, objptr
04b84     35 A1 C2 FA | 	rdbyte	local28, local01
04b88     00 A0 5E F2 | 	cmps	local28, #0 wcz
04b8c     93 0F 86 F1 | 	sub	objptr, #403
04b90     20 00 90 ED |  if_be	jmp	#LR__0171
04b94     AF BA 02 FB | 	rdlong	local41, fp
04b98     87 0F 06 F1 | 	add	objptr, #391
04b9c     07 BB 02 F1 | 	add	local41, objptr
04ba0                 | '         vibratoPos[channel] := 0
04ba0     5D 01 48 FC | 	wrbyte	#0, local41
04ba4     87 0F 86 F1 | 	sub	objptr, #391
04ba8                 | ' 
04ba8                 | '   else
04ba8     08 00 90 FD | 	jmp	#LR__0171
04bac                 | LR__0170
04bac                 | '     ' Handle commands that executes on all "non zero ticks"
04bac                 | '     handleNonZeroTickCommands(channel)
04bac     AF 5C 02 FB | 	rdlong	arg01, fp
04bb0     E4 04 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04bb4                 | LR__0171
04bb4                 | ' 
04bb4                 | '   ' Handle commands that executes on every tick
04bb4                 | '   handleEveryTickCommands(channel)
04bb4     AF 5C 02 FB | 	rdlong	arg01, fp
04bb8     40 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04bbc     AF BC 02 FB | 	rdlong	local42, fp
04bc0     02 BC 66 F0 | 	shl	local42, #2
04bc4     DF 0E 06 F1 | 	add	objptr, #223
04bc8     07 BD 02 F1 | 	add	local42, objptr
04bcc     5E BF 02 FB | 	rdlong	local43, local42
04bd0     01 00 00 FF 
04bd4     58 BF 66 F3 | 	fles	local43, ##856
04bd8                 | ' 
04bd8                 | '   ' Handle boundaries that should be kept
04bd8                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04bd8     5E BF 62 FC | 	wrlong	local43, local42
04bdc     AF C0 02 FB | 	rdlong	local44, fp
04be0     02 C0 66 F0 | 	shl	local44, #2
04be4     07 C1 02 F1 | 	add	local44, objptr
04be8     60 C3 02 FB | 	rdlong	local45, local44
04bec     71 C2 46 F3 | 	fges	local45, #113
04bf0                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04bf0     60 C3 62 FC | 	wrlong	local45, local44
04bf4     AF C4 02 FB | 	rdlong	local46, fp
04bf8     02 C4 66 F0 | 	shl	local46, #2
04bfc     20 0E 06 F1 | 	add	objptr, #32
04c00     07 C5 02 F1 | 	add	local46, objptr
04c04     62 C7 02 FB | 	rdlong	local47, local46
04c08     40 C6 66 F3 | 	fles	local47, #64
04c0c                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04c0c     62 C7 62 FC | 	wrlong	local47, local46
04c10     AF C8 02 FB | 	rdlong	local48, fp
04c14     02 C8 66 F0 | 	shl	local48, #2
04c18     07 C9 02 F1 | 	add	local48, objptr
04c1c     64 CB 02 FB | 	rdlong	local49, local48
04c20     00 CA 46 F3 | 	fges	local49, #0
04c24                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04c24     64 CB 62 FC | 	wrlong	local49, local48
04c28     FF 0E 86 F1 | 	sub	objptr, #255
04c2c     AF F0 03 F6 | 	mov	ptra, fp
04c30     BF 00 A0 FD | 	call	#popregs_
04c34                 | _trackerplayer_spin2_processChannel_ret
04c34     2D 00 64 FD | 	ret
04c38                 | 
04c38                 | ' 
04c38                 | ' 
04c38                 | ' ' Handle all commands that executes on tick zero
04c38                 | ' '
04c38                 | ' PRI handleZeroTickCommands(channel)
04c38                 | _trackerplayer_spin2_handleZeroTickCommands
04c38     2E 31 02 F6 | 	mov	_var01, arg01
04c3c                 | ' 
04c3c                 | '   CASE_FAST cmd
04c3c     BA 0F 06 F1 | 	add	objptr, #442
04c40     07 33 C2 FA | 	rdbyte	_var02, objptr
04c44     BA 0F 86 F1 | 	sub	objptr, #442
04c48     19 35 02 F6 | 	mov	_var03, _var02
04c4c     09 34 86 F1 | 	sub	_var03, #9
04c50     07 34 26 F3 | 	fle	_var03, #7
04c54     1A 37 02 F6 | 	mov	_var04, _var03
04c58     30 36 62 FD | 	jmprel	_var04
04c5c                 | LR__0172
04c5c     1C 00 90 FD | 	jmp	#LR__0173
04c60     30 04 90 FD | 	jmp	#LR__0196
04c64     64 00 90 FD | 	jmp	#LR__0175
04c68     84 00 90 FD | 	jmp	#LR__0176
04c6c     A0 00 90 FD | 	jmp	#LR__0177
04c70     D0 00 90 FD | 	jmp	#LR__0178
04c74     9C 03 90 FD | 	jmp	#LR__0193
04c78     18 04 90 FD | 	jmp	#LR__0196
04c7c                 | LR__0173
04c7c                 | ' 
04c7c                 | '     $9:                          ' Set sample offset
04c7c                 | '       if z > 0
04c7c     B9 0F 06 F1 | 	add	objptr, #441
04c80     07 39 C2 FA | 	rdbyte	_var05, objptr
04c84     B9 0F 86 F1 | 	sub	objptr, #441
04c88     00 38 5E F2 | 	cmps	_var05, #0 wcz
04c8c     1C 00 90 ED |  if_be	jmp	#LR__0174
04c90                 | '         cmd9_memoryZ[channel] := z
04c90     18 39 02 F6 | 	mov	_var05, _var01
04c94     DC 0F 06 F1 | 	add	objptr, #476
04c98     07 39 02 F1 | 	add	_var05, objptr
04c9c     23 0E 86 F1 | 	sub	objptr, #35
04ca0     07 3B C2 FA | 	rdbyte	_var06, objptr
04ca4     B9 0F 86 F1 | 	sub	objptr, #441
04ca8     1C 3B 42 FC | 	wrbyte	_var06, _var05
04cac                 | LR__0174
04cac                 | ' 
04cac                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04cac     DC 0F 06 F1 | 	add	objptr, #476
04cb0     07 31 02 F1 | 	add	_var01, objptr
04cb4     18 39 C2 FA | 	rdbyte	_var05, _var01
04cb8     08 38 66 F0 | 	shl	_var05, #8
04cbc     29 0E 86 F1 | 	sub	objptr, #41
04cc0     07 39 62 FC | 	wrlong	_var05, objptr
04cc4     B3 0F 86 F1 | 	sub	objptr, #435
04cc8     C8 03 90 FD | 	jmp	#LR__0196
04ccc                 | LR__0175
04ccc                 | ' 
04ccc                 | '     $B:                          ' Jump position
04ccc                 | '       cmdB_memoryZ := z
04ccc     B9 0F 06 F1 | 	add	objptr, #441
04cd0     07 39 C2 FA | 	rdbyte	_var05, objptr
04cd4     2E 0E 06 F1 | 	add	objptr, #46
04cd8     07 39 42 FC | 	wrbyte	_var05, objptr
04cdc                 | '       cmdB_updatePosition := true
04cdc     01 0E 06 F1 | 	add	objptr, #1
04ce0     FF FF FF FF 
04ce4     07 FF 4B FC | 	wrbyte	##-1, objptr
04ce8     E8 0F 86 F1 | 	sub	objptr, #488
04cec     A4 03 90 FD | 	jmp	#LR__0196
04cf0                 | LR__0176
04cf0                 | ' 
04cf0                 | '     $C:                          ' Set volume
04cf0                 | '       currVolume[channel] := z
04cf0     02 30 66 F0 | 	shl	_var01, #2
04cf4     FF 0E 06 F1 | 	add	objptr, #255
04cf8     07 31 02 F1 | 	add	_var01, objptr
04cfc     BA 0E 06 F1 | 	add	objptr, #186
04d00     07 3B C2 FA | 	rdbyte	_var06, objptr
04d04     B9 0F 86 F1 | 	sub	objptr, #441
04d08     18 3B 62 FC | 	wrlong	_var06, _var01
04d0c     84 03 90 FD | 	jmp	#LR__0196
04d10                 | LR__0177
04d10                 | ' 
04d10                 | '     $D:                          ' Pattern break
04d10                 | '       cmdD_memoryX := x
04d10     B7 0F 06 F1 | 	add	objptr, #439
04d14     07 39 C2 FA | 	rdbyte	_var05, objptr
04d18     2D 0E 06 F1 | 	add	objptr, #45
04d1c     07 39 42 FC | 	wrbyte	_var05, objptr
04d20                 | '       cmdD_memoryY := y
04d20     2C 0E 86 F1 | 	sub	objptr, #44
04d24     07 39 C2 FA | 	rdbyte	_var05, objptr
04d28     2D 0E 06 F1 | 	add	objptr, #45
04d2c     07 39 42 FC | 	wrbyte	_var05, objptr
04d30                 | '       cmdD_updatePosition := true
04d30     01 0E 06 F1 | 	add	objptr, #1
04d34     FF FF FF FF 
04d38     07 FF 4B FC | 	wrbyte	##-1, objptr
04d3c     E6 0F 86 F1 | 	sub	objptr, #486
04d40     50 03 90 FD | 	jmp	#LR__0196
04d44                 | LR__0178
04d44                 | ' 
04d44                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04d44                 | ' 
04d44                 | '       CASE_FAST x
04d44     B7 0F 06 F1 | 	add	objptr, #439
04d48     07 3D C2 FA | 	rdbyte	_var07, objptr
04d4c     B7 0F 86 F1 | 	sub	objptr, #439
04d50     1E 39 02 F6 | 	mov	_var05, _var07
04d54     0F 38 26 F3 | 	fle	_var05, #15
04d58     1C 3F 02 F6 | 	mov	_var08, _var05
04d5c     30 3E 62 FD | 	jmprel	_var08
04d60                 | LR__0179
04d60     3C 00 90 FD | 	jmp	#LR__0180
04d64     58 00 90 FD | 	jmp	#LR__0181
04d68     8C 00 90 FD | 	jmp	#LR__0182
04d6c     C0 00 90 FD | 	jmp	#LR__0183
04d70     DC 00 90 FD | 	jmp	#LR__0184
04d74     14 01 90 FD | 	jmp	#LR__0185
04d78     28 01 90 FD | 	jmp	#LR__0186
04d7c     C0 01 90 FD | 	jmp	#LR__0189
04d80     10 03 90 FD | 	jmp	#LR__0196
04d84     0C 03 90 FD | 	jmp	#LR__0196
04d88     F0 01 90 FD | 	jmp	#LR__0190
04d8c     24 02 90 FD | 	jmp	#LR__0191
04d90     00 03 90 FD | 	jmp	#LR__0196
04d94     FC 02 90 FD | 	jmp	#LR__0196
04d98     50 02 90 FD | 	jmp	#LR__0192
04d9c     F4 02 90 FD | 	jmp	#LR__0196
04da0                 | LR__0180
04da0                 | ' 
04da0                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04da0     B8 0F 06 F1 | 	add	objptr, #440
04da4     07 3B C2 FA | 	rdbyte	_var06, objptr
04da8     1D 3B 22 F6 | 	not	_var06, _var06
04dac     01 3A 06 F5 | 	and	_var06, #1
04db0     03 0E 06 F1 | 	add	objptr, #3
04db4     07 3B 42 FC | 	wrbyte	_var06, objptr
04db8     BB 0F 86 F1 | 	sub	objptr, #443
04dbc     D4 02 90 FD | 	jmp	#LR__0196
04dc0                 | LR__0181
04dc0                 | ' 
04dc0                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04dc0     18 41 02 F6 | 	mov	_var09, _var01
04dc4     02 40 66 F0 | 	shl	_var09, #2
04dc8     DF 0E 06 F1 | 	add	objptr, #223
04dcc     07 41 02 F1 | 	add	_var09, objptr
04dd0     20 3B 02 FB | 	rdlong	_var06, _var09
04dd4     D9 0E 06 F1 | 	add	objptr, #217
04dd8     07 43 C2 FA | 	rdbyte	_var10, objptr
04ddc     21 3B 82 F1 | 	sub	_var06, _var10
04de0     02 30 66 F0 | 	shl	_var01, #2
04de4     D9 0E 86 F1 | 	sub	objptr, #217
04de8     07 31 02 F1 | 	add	_var01, objptr
04dec     18 3B 62 FC | 	wrlong	_var06, _var01
04df0     DF 0E 86 F1 | 	sub	objptr, #223
04df4     9C 02 90 FD | 	jmp	#LR__0196
04df8                 | LR__0182
04df8                 | ' 
04df8                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04df8     18 41 02 F6 | 	mov	_var09, _var01
04dfc     02 40 66 F0 | 	shl	_var09, #2
04e00     DF 0E 06 F1 | 	add	objptr, #223
04e04     07 41 02 F1 | 	add	_var09, objptr
04e08     20 3B 02 FB | 	rdlong	_var06, _var09
04e0c     D9 0E 06 F1 | 	add	objptr, #217
04e10     07 43 C2 FA | 	rdbyte	_var10, objptr
04e14     21 3B 02 F1 | 	add	_var06, _var10
04e18     02 30 66 F0 | 	shl	_var01, #2
04e1c     D9 0E 86 F1 | 	sub	objptr, #217
04e20     07 31 02 F1 | 	add	_var01, objptr
04e24     18 3B 62 FC | 	wrlong	_var06, _var01
04e28     DF 0E 86 F1 | 	sub	objptr, #223
04e2c     64 02 90 FD | 	jmp	#LR__0196
04e30                 | LR__0183
04e30                 | ' 
04e30                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
04e30     B8 0F 06 F1 | 	add	objptr, #440
04e34     07 3B C2 FA | 	rdbyte	_var06, objptr
04e38     01 3A 06 F5 | 	and	_var06, #1
04e3c     04 0E 06 F1 | 	add	objptr, #4
04e40     07 31 02 F1 | 	add	_var01, objptr
04e44     18 3B 42 FC | 	wrbyte	_var06, _var01
04e48     BC 0F 86 F1 | 	sub	objptr, #444
04e4c     44 02 90 FD | 	jmp	#LR__0196
04e50                 | LR__0184
04e50                 | ' 
04e50                 | '         $4:                                      ' Set vibrato waveform type
04e50                 | '           vibratoType[channel]  := y & 3
04e50     B8 0F 06 F1 | 	add	objptr, #440
04e54     07 3B C2 FA | 	rdbyte	_var06, objptr
04e58     03 3A 06 F5 | 	and	_var06, #3
04e5c     18 45 02 F6 | 	mov	_var11, _var01
04e60     08 0E 06 F1 | 	add	objptr, #8
04e64     07 45 02 F1 | 	add	_var11, objptr
04e68     22 3B 42 FC | 	wrbyte	_var06, _var11
04e6c                 | '           resetVibrato[channel] := y & 4
04e6c     08 0E 86 F1 | 	sub	objptr, #8
04e70     07 3B C2 FA | 	rdbyte	_var06, objptr
04e74     04 3A 06 F5 | 	and	_var06, #4
04e78     25 0E 86 F1 | 	sub	objptr, #37
04e7c     07 31 02 F1 | 	add	_var01, objptr
04e80     18 3B 42 FC | 	wrbyte	_var06, _var01
04e84     93 0F 86 F1 | 	sub	objptr, #403
04e88     08 02 90 FD | 	jmp	#LR__0196
04e8c                 | LR__0185
04e8c                 | ' 
04e8c                 | '         $5: fineTune := y                        ' Set finetune
04e8c     B8 0F 06 F1 | 	add	objptr, #440
04e90     07 3B C2 FA | 	rdbyte	_var06, objptr
04e94     09 0E 86 F1 | 	sub	objptr, #9
04e98     07 3B 62 FC | 	wrlong	_var06, objptr
04e9c     AF 0F 86 F1 | 	sub	objptr, #431
04ea0     F0 01 90 FD | 	jmp	#LR__0196
04ea4                 | LR__0186
04ea4                 | ' 
04ea4                 | '         $6:                                      ' Pattern looping
04ea4                 | '           if y == 0
04ea4     B8 0F 06 F1 | 	add	objptr, #440
04ea8     07 3B CA FA | 	rdbyte	_var06, objptr wz
04eac     B8 0F 86 F1 | 	sub	objptr, #440
04eb0     1C 00 90 5D |  if_ne	jmp	#LR__0187
04eb4                 | '             cmdE6_memory[channel] := patternRow
04eb4     E9 0F 06 F1 | 	add	objptr, #489
04eb8     07 31 02 F1 | 	add	_var01, objptr
04ebc     47 0F 86 F1 | 	sub	objptr, #327
04ec0     07 45 C2 FA | 	rdbyte	_var11, objptr
04ec4     A2 0E 86 F1 | 	sub	objptr, #162
04ec8     18 45 42 FC | 	wrbyte	_var11, _var01
04ecc                 | '           else
04ecc     C4 01 90 FD | 	jmp	#LR__0196
04ed0                 | LR__0187
04ed0                 | '             if ++cmdE6_counter[channel] <= y
04ed0     18 41 02 F6 | 	mov	_var09, _var01
04ed4     ED 0F 06 F1 | 	add	objptr, #493
04ed8     07 41 02 F1 | 	add	_var09, objptr
04edc     20 3B C2 FA | 	rdbyte	_var06, _var09
04ee0     01 3A 06 F1 | 	add	_var06, #1
04ee4     18 43 02 F6 | 	mov	_var10, _var01
04ee8     07 43 02 F1 | 	add	_var10, objptr
04eec     21 3B 42 FC | 	wrbyte	_var06, _var10
04ef0     21 47 C2 FA | 	rdbyte	_var12, _var10
04ef4     35 0E 86 F1 | 	sub	objptr, #53
04ef8     07 49 C2 FA | 	rdbyte	_var13, objptr
04efc     B8 0F 86 F1 | 	sub	objptr, #440
04f00     24 47 5A F2 | 	cmps	_var12, _var13 wcz
04f04     24 00 90 1D |  if_a	jmp	#LR__0188
04f08                 | '               cmdE6_updatePosition[channel] := true
04f08     F1 0F 06 F1 | 	add	objptr, #497
04f0c     07 31 02 F1 | 	add	_var01, objptr
04f10     FF FF FF FF 
04f14     18 FF 4B FC | 	wrbyte	##-1, _var01
04f18                 | '               cmdE6_updatePositionCommon    := true
04f18     04 0E 06 F1 | 	add	objptr, #4
04f1c     FF FF FF FF 
04f20     07 FF 4B FC | 	wrbyte	##-1, objptr
04f24     F5 0F 86 F1 | 	sub	objptr, #501
04f28                 | '             else
04f28     68 01 90 FD | 	jmp	#LR__0196
04f2c                 | LR__0188
04f2c                 | '               cmdE6_counter[channel] := 0
04f2c     ED 0F 06 F1 | 	add	objptr, #493
04f30     07 31 02 F1 | 	add	_var01, objptr
04f34     18 01 48 FC | 	wrbyte	#0, _var01
04f38     ED 0F 86 F1 | 	sub	objptr, #493
04f3c     54 01 90 FD | 	jmp	#LR__0196
04f40                 | LR__0189
04f40                 | ' 
04f40                 | '         $7:                                      ' Set tremolo waveform type
04f40                 | '           tremoloType[channel] := y & 3
04f40     B8 0F 06 F1 | 	add	objptr, #440
04f44     07 3B C2 FA | 	rdbyte	_var06, objptr
04f48     03 3A 06 F5 | 	and	_var06, #3
04f4c     18 45 02 F6 | 	mov	_var11, _var01
04f50     0C 0E 06 F1 | 	add	objptr, #12
04f54     07 45 02 F1 | 	add	_var11, objptr
04f58     22 3B 42 FC | 	wrbyte	_var06, _var11
04f5c                 | '           resetTremolo[channel] := y & 4
04f5c     0C 0E 86 F1 | 	sub	objptr, #12
04f60     07 3B C2 FA | 	rdbyte	_var06, objptr
04f64     04 3A 06 F5 | 	and	_var06, #4
04f68     29 0E 86 F1 | 	sub	objptr, #41
04f6c     07 31 02 F1 | 	add	_var01, objptr
04f70     18 3B 42 FC | 	wrbyte	_var06, _var01
04f74     8F 0F 86 F1 | 	sub	objptr, #399
04f78     18 01 90 FD | 	jmp	#LR__0196
04f7c                 | LR__0190
04f7c                 | ' 
04f7c                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
04f7c     18 41 02 F6 | 	mov	_var09, _var01
04f80     02 40 66 F0 | 	shl	_var09, #2
04f84     FF 0E 06 F1 | 	add	objptr, #255
04f88     07 41 02 F1 | 	add	_var09, objptr
04f8c     20 3B 02 FB | 	rdlong	_var06, _var09
04f90     B9 0E 06 F1 | 	add	objptr, #185
04f94     07 43 C2 FA | 	rdbyte	_var10, objptr
04f98     21 3B 02 F1 | 	add	_var06, _var10
04f9c     02 30 66 F0 | 	shl	_var01, #2
04fa0     B9 0E 86 F1 | 	sub	objptr, #185
04fa4     07 31 02 F1 | 	add	_var01, objptr
04fa8     18 3B 62 FC | 	wrlong	_var06, _var01
04fac     FF 0E 86 F1 | 	sub	objptr, #255
04fb0     E0 00 90 FD | 	jmp	#LR__0196
04fb4                 | LR__0191
04fb4                 | ' 
04fb4                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
04fb4     18 41 02 F6 | 	mov	_var09, _var01
04fb8     02 40 66 F0 | 	shl	_var09, #2
04fbc     FF 0E 06 F1 | 	add	objptr, #255
04fc0     07 41 02 F1 | 	add	_var09, objptr
04fc4     20 3B 02 FB | 	rdlong	_var06, _var09
04fc8     B9 0E 06 F1 | 	add	objptr, #185
04fcc     07 43 C2 FA | 	rdbyte	_var10, objptr
04fd0     21 3B 82 F1 | 	sub	_var06, _var10
04fd4     02 30 66 F0 | 	shl	_var01, #2
04fd8     B9 0E 86 F1 | 	sub	objptr, #185
04fdc     07 31 02 F1 | 	add	_var01, objptr
04fe0     18 3B 62 FC | 	wrlong	_var06, _var01
04fe4     FF 0E 86 F1 | 	sub	objptr, #255
04fe8     A8 00 90 FD | 	jmp	#LR__0196
04fec                 | LR__0192
04fec                 | ' 
04fec                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
04fec     B8 0F 06 F1 | 	add	objptr, #440
04ff0     07 41 C2 FA | 	rdbyte	_var09, objptr
04ff4     14 0F 86 F1 | 	sub	objptr, #276
04ff8     07 43 C2 FA | 	rdbyte	_var10, objptr
04ffc     21 41 02 FD | 	qmul	_var09, _var10
05000     18 3A 62 FD | 	getqx	_var06
05004     01 0E 06 F1 | 	add	objptr, #1
05008     07 3B 42 FC | 	wrbyte	_var06, objptr
0500c     A5 0E 86 F1 | 	sub	objptr, #165
05010     80 00 90 FD | 	jmp	#LR__0196
05014                 | LR__0193
05014                 | ' 
05014                 | '     $F:                          ' Set speed
05014                 | '       if z < 32
05014     B9 0F 06 F1 | 	add	objptr, #441
05018     07 39 C2 FA | 	rdbyte	_var05, objptr
0501c     B9 0F 86 F1 | 	sub	objptr, #441
05020     20 38 5E F2 | 	cmps	_var05, #32 wcz
05024     18 00 90 3D |  if_ae	jmp	#LR__0194
05028                 | '         currentSongSpeed := z
05028     B9 0F 06 F1 | 	add	objptr, #441
0502c     07 39 C2 FA | 	rdbyte	_var05, objptr
05030     15 0F 86 F1 | 	sub	objptr, #277
05034     07 39 42 FC | 	wrbyte	_var05, objptr
05038     A4 0E 86 F1 | 	sub	objptr, #164
0503c                 | '       else
0503c     54 00 90 FD | 	jmp	#LR__0195
05040                 | LR__0194
05040                 | '         ticksPerMinute := z * 24
05040     B9 0F 06 F1 | 	add	objptr, #441
05044     07 3D C2 FA | 	rdbyte	_var07, objptr
05048     1E 39 02 F6 | 	mov	_var05, _var07
0504c     01 38 66 F0 | 	shl	_var05, #1
05050     1E 39 02 F1 | 	add	_var05, _var07
05054     03 38 66 F0 | 	shl	_var05, #3
05058     12 0E 86 F1 | 	sub	objptr, #18
0505c     07 39 62 FC | 	wrlong	_var05, objptr
05060     A7 0F 86 F1 | 	sub	objptr, #423
05064                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05064     07 0B 03 FB | 	rdlong	muldiva_, objptr
05068     A7 0F 06 F1 | 	add	objptr, #423
0506c     07 0D 03 FB | 	rdlong	muldivb_, objptr
05070     A7 0F 86 F1 | 	sub	objptr, #423
05074     D0 00 A0 FD | 	call	#divide_
05078     86 3B 02 F6 | 	mov	_var06, muldivb_
0507c     04 3A 66 F0 | 	shl	_var06, #4
05080     86 3B 82 F1 | 	sub	_var06, muldivb_
05084     02 3A 66 F0 | 	shl	_var06, #2
05088     AB 0F 06 F1 | 	add	objptr, #427
0508c     07 3B 62 FC | 	wrlong	_var06, objptr
05090     AB 0F 86 F1 | 	sub	objptr, #427
05094                 | LR__0195
05094                 | LR__0196
05094                 | _trackerplayer_spin2_handleZeroTickCommands_ret
05094     2D 00 64 FD | 	ret
05098                 | 
05098                 | ' 
05098                 | ' 
05098                 | ' ' Handle all commands that executes on "non zero ticks"
05098                 | ' '
05098                 | ' PRI handleNonZeroTickCommands(channel)
05098                 | _trackerplayer_spin2_handleNonZeroTickCommands
05098     0A 5A 05 F6 | 	mov	COUNT_, #10
0509c     B0 00 A0 FD | 	call	#pushregs_
050a0     2E 6B 02 F6 | 	mov	local01, arg01
050a4                 | ' 
050a4                 | '   CASE_FAST cmd
050a4     BA 0F 06 F1 | 	add	objptr, #442
050a8     07 6D C2 FA | 	rdbyte	local02, objptr
050ac     BA 0F 86 F1 | 	sub	objptr, #442
050b0     36 6F 02 F6 | 	mov	local03, local02
050b4     01 6E 86 F1 | 	sub	local03, #1
050b8     0E 6E 26 F3 | 	fle	local03, #14
050bc     37 71 02 F6 | 	mov	local04, local03
050c0     30 70 62 FD | 	jmprel	local04
050c4                 | LR__0197
050c4     38 00 90 FD | 	jmp	#LR__0198
050c8     A0 00 90 FD | 	jmp	#LR__0199
050cc     D4 00 90 FD | 	jmp	#LR__0200
050d0     1C 02 90 FD | 	jmp	#LR__0210
050d4     20 01 90 FD | 	jmp	#LR__0202
050d8     48 01 90 FD | 	jmp	#LR__0203
050dc     50 01 90 FD | 	jmp	#LR__0204
050e0     0C 02 90 FD | 	jmp	#LR__0210
050e4     08 02 90 FD | 	jmp	#LR__0210
050e8     B0 01 90 FD | 	jmp	#LR__0207
050ec     00 02 90 FD | 	jmp	#LR__0210
050f0     FC 01 90 FD | 	jmp	#LR__0210
050f4     F8 01 90 FD | 	jmp	#LR__0210
050f8     AC 01 90 FD | 	jmp	#LR__0208
050fc     F0 01 90 FD | 	jmp	#LR__0210
05100                 | LR__0198
05100                 | ' 
05100                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
05100     35 73 02 F6 | 	mov	local05, local01
05104     02 72 66 F0 | 	shl	local05, #2
05108     DF 0E 06 F1 | 	add	objptr, #223
0510c     07 73 02 F1 | 	add	local05, objptr
05110     39 75 02 FB | 	rdlong	local06, local05
05114     DA 0E 06 F1 | 	add	objptr, #218
05118     07 77 C2 FA | 	rdbyte	local07, objptr
0511c     3B 75 82 F1 | 	sub	local06, local07
05120     35 79 02 F6 | 	mov	local08, local01
05124     02 78 66 F0 | 	shl	local08, #2
05128     DA 0E 86 F1 | 	sub	objptr, #218
0512c     07 79 02 F1 | 	add	local08, objptr
05130     3C 75 62 FC | 	wrlong	local06, local08
05134                 | ' 
05134                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05134                 | '       if currPeriod[channel] < 0
05134     35 75 02 F6 | 	mov	local06, local01
05138     02 74 66 F0 | 	shl	local06, #2
0513c     07 75 02 F1 | 	add	local06, objptr
05140     3A 7B 02 FB | 	rdlong	local09, local06
05144     00 7A 5E F2 | 	cmps	local09, #0 wcz
05148     DF 0E 86 F1 | 	sub	objptr, #223
0514c     A0 01 90 3D |  if_ae	jmp	#LR__0210
05150                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05150     02 6A 66 F0 | 	shl	local01, #2
05154     DF 0E 06 F1 | 	add	objptr, #223
05158     07 6B 02 F1 | 	add	local01, objptr
0515c     01 00 80 FF 
05160     35 B1 6A FC | 	wrlong	##856, local01
05164     DF 0E 86 F1 | 	sub	objptr, #223
05168     84 01 90 FD | 	jmp	#LR__0210
0516c                 | LR__0199
0516c                 | ' 
0516c                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
0516c     35 73 02 F6 | 	mov	local05, local01
05170     02 72 66 F0 | 	shl	local05, #2
05174     DF 0E 06 F1 | 	add	objptr, #223
05178     07 73 02 F1 | 	add	local05, objptr
0517c     39 75 02 FB | 	rdlong	local06, local05
05180     DA 0E 06 F1 | 	add	objptr, #218
05184     07 77 C2 FA | 	rdbyte	local07, objptr
05188     3B 75 02 F1 | 	add	local06, local07
0518c     02 6A 66 F0 | 	shl	local01, #2
05190     DA 0E 86 F1 | 	sub	objptr, #218
05194     07 6B 02 F1 | 	add	local01, objptr
05198     35 75 62 FC | 	wrlong	local06, local01
0519c     DF 0E 86 F1 | 	sub	objptr, #223
051a0     4C 01 90 FD | 	jmp	#LR__0210
051a4                 | LR__0200
051a4                 | ' 
051a4                 | '     $3:                                 ' Slide to note (portamento)
051a4                 | '       if z > 0
051a4     B9 0F 06 F1 | 	add	objptr, #441
051a8     07 75 C2 FA | 	rdbyte	local06, objptr
051ac     B9 0F 86 F1 | 	sub	objptr, #441
051b0     00 74 5E F2 | 	cmps	local06, #0 wcz
051b4     1C 00 90 ED |  if_be	jmp	#LR__0201
051b8                 | '         cmd3_memoryZ[channel] := z
051b8     35 75 02 F6 | 	mov	local06, local01
051bc     C8 0F 06 F1 | 	add	objptr, #456
051c0     07 75 02 F1 | 	add	local06, objptr
051c4     0F 0E 86 F1 | 	sub	objptr, #15
051c8     07 7B C2 FA | 	rdbyte	local09, objptr
051cc     B9 0F 86 F1 | 	sub	objptr, #441
051d0     3A 7B 42 FC | 	wrbyte	local09, local06
051d4                 | LR__0201
051d4                 | ' 
051d4                 | '       doPortamento(channel, lastSetPeriod[channel])
051d4     35 73 02 F6 | 	mov	local05, local01
051d8     02 72 66 F0 | 	shl	local05, #2
051dc     27 0F 06 F1 | 	add	objptr, #295
051e0     07 73 02 F1 | 	add	local05, objptr
051e4     39 5F 02 FB | 	rdlong	arg02, local05
051e8     35 5D 02 F6 | 	mov	arg01, local01
051ec     27 0F 86 F1 | 	sub	objptr, #295
051f0     64 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
051f4     F8 00 90 FD | 	jmp	#LR__0210
051f8                 | LR__0202
051f8                 | ' 
051f8                 | '     $5:                                 ' Volume slide + portamento
051f8                 | '       doVolumeSlide(channel)
051f8     35 5D 02 F6 | 	mov	arg01, local01
051fc     54 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05200                 | '       doPortamento(channel, lastSetPeriod[channel])
05200     35 73 02 F6 | 	mov	local05, local01
05204     02 72 66 F0 | 	shl	local05, #2
05208     27 0F 06 F1 | 	add	objptr, #295
0520c     07 73 02 F1 | 	add	local05, objptr
05210     39 5F 02 FB | 	rdlong	arg02, local05
05214     35 5D 02 F6 | 	mov	arg01, local01
05218     27 0F 86 F1 | 	sub	objptr, #295
0521c     38 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
05220     CC 00 90 FD | 	jmp	#LR__0210
05224                 | LR__0203
05224                 | ' 
05224                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05224     35 5D 02 F6 | 	mov	arg01, local01
05228     28 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0522c     C0 00 90 FD | 	jmp	#LR__0210
05230                 | LR__0204
05230                 | ' 
05230                 | '     $7:                                 ' Tremolo
05230                 | '       if x > 0
05230     B7 0F 06 F1 | 	add	objptr, #439
05234     07 75 C2 FA | 	rdbyte	local06, objptr
05238     B7 0F 86 F1 | 	sub	objptr, #439
0523c     00 74 5E F2 | 	cmps	local06, #0 wcz
05240     1C 00 90 ED |  if_be	jmp	#LR__0205
05244                 | '         cmd7_memoryX[channel] := x
05244     35 75 02 F6 | 	mov	local06, local01
05248     D8 0F 06 F1 | 	add	objptr, #472
0524c     07 75 02 F1 | 	add	local06, objptr
05250     21 0E 86 F1 | 	sub	objptr, #33
05254     07 7B C2 FA | 	rdbyte	local09, objptr
05258     B7 0F 86 F1 | 	sub	objptr, #439
0525c     3A 7B 42 FC | 	wrbyte	local09, local06
05260                 | LR__0205
05260                 | '       if y > 0
05260     B8 0F 06 F1 | 	add	objptr, #440
05264     07 75 C2 FA | 	rdbyte	local06, objptr
05268     B8 0F 86 F1 | 	sub	objptr, #440
0526c     00 74 5E F2 | 	cmps	local06, #0 wcz
05270     1C 00 90 ED |  if_be	jmp	#LR__0206
05274                 | '         cmd7_memoryY[channel] := y
05274     35 75 02 F6 | 	mov	local06, local01
05278     D4 0F 06 F1 | 	add	objptr, #468
0527c     07 75 02 F1 | 	add	local06, objptr
05280     1C 0E 86 F1 | 	sub	objptr, #28
05284     07 7B C2 FA | 	rdbyte	local09, objptr
05288     B8 0F 86 F1 | 	sub	objptr, #440
0528c     3A 7B 42 FC | 	wrbyte	local09, local06
05290                 | LR__0206
05290                 | ' 
05290                 | '       doTremolo(channel)
05290     35 5D 02 F6 | 	mov	arg01, local01
05294     08 04 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
05298     54 00 90 FD | 	jmp	#LR__0210
0529c                 | LR__0207
0529c                 | ' 
0529c                 | '     $A: doVolumeSlide(channel)          ' Volume slide
0529c     35 5D 02 F6 | 	mov	arg01, local01
052a0     B0 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
052a4     48 00 90 FD | 	jmp	#LR__0210
052a8                 | LR__0208
052a8                 | ' 
052a8                 | '     $E:                                 ' Retrig every Y ticks
052a8                 | '       if (x == $9) && ((tickcounter // y) == 0)
052a8     B7 0F 06 F1 | 	add	objptr, #439
052ac     07 73 C2 FA | 	rdbyte	local05, objptr
052b0     B7 0F 86 F1 | 	sub	objptr, #439
052b4     09 72 0E F2 | 	cmp	local05, #9 wz
052b8     34 00 90 5D |  if_ne	jmp	#LR__0209
052bc     A1 0E 06 F1 | 	add	objptr, #161
052c0     07 77 C2 FA | 	rdbyte	local07, objptr
052c4     3B 0B 03 F6 | 	mov	muldiva_, local07
052c8     17 0F 06 F1 | 	add	objptr, #279
052cc     07 7D C2 FA | 	rdbyte	local10, objptr
052d0     B8 0F 86 F1 | 	sub	objptr, #440
052d4     3E 0D 03 F6 | 	mov	muldivb_, local10
052d8     D0 00 A0 FD | 	call	#divide_
052dc     85 7B 0A F6 | 	mov	local09, muldiva_ wz
052e0     0C 00 90 5D |  if_ne	jmp	#LR__0209
052e4                 | '         triggerNote(channel)
052e4     35 75 02 F6 | 	mov	local06, local01
052e8     3A 5D 02 F6 | 	mov	arg01, local06
052ec     24 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
052f0                 | LR__0209
052f0                 | LR__0210
052f0     AF F0 03 F6 | 	mov	ptra, fp
052f4     BF 00 A0 FD | 	call	#popregs_
052f8                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
052f8     2D 00 64 FD | 	ret
052fc                 | 
052fc                 | ' 
052fc                 | ' 
052fc                 | ' ' Handle all commands that executes on every tick
052fc                 | ' '
052fc                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
052fc                 | _trackerplayer_spin2_handleEveryTickCommands
052fc     12 5A 05 F6 | 	mov	COUNT_, #18
05300     B0 00 A0 FD | 	call	#pushregs_
05304     2E 6B 02 F6 | 	mov	local01, arg01
05308                 | ' 
05308                 | '   CASE_FAST cmd
05308     BA 0F 06 F1 | 	add	objptr, #442
0530c     07 6D C2 FA | 	rdbyte	local02, objptr
05310     BA 0F 86 F1 | 	sub	objptr, #442
05314     36 6F 02 F6 | 	mov	local03, local02
05318     0F 6E 26 F3 | 	fle	local03, #15
0531c     37 71 02 F6 | 	mov	local04, local03
05320     30 70 62 FD | 	jmprel	local04
05324                 | LR__0211
05324     3C 00 90 FD | 	jmp	#LR__0212
05328     68 03 90 FD | 	jmp	#LR__0226
0532c     64 03 90 FD | 	jmp	#LR__0226
05330     60 03 90 FD | 	jmp	#LR__0226
05334     E8 01 90 FD | 	jmp	#LR__0215
05338     58 03 90 FD | 	jmp	#LR__0226
0533c     4C 02 90 FD | 	jmp	#LR__0218
05340     50 03 90 FD | 	jmp	#LR__0226
05344     4C 03 90 FD | 	jmp	#LR__0226
05348     48 03 90 FD | 	jmp	#LR__0226
0534c     44 03 90 FD | 	jmp	#LR__0226
05350     40 03 90 FD | 	jmp	#LR__0226
05354     3C 03 90 FD | 	jmp	#LR__0226
05358     38 03 90 FD | 	jmp	#LR__0226
0535c     38 02 90 FD | 	jmp	#LR__0219
05360     30 03 90 FD | 	jmp	#LR__0226
05364                 | LR__0212
05364                 | ' 
05364                 | '     $0:                                 ' Arpeggio
05364                 | '       arpCounter := tickCounter // 3
05364     A1 0E 06 F1 | 	add	objptr, #161
05368     07 0B C3 FA | 	rdbyte	muldiva_, objptr
0536c     A1 0E 86 F1 | 	sub	objptr, #161
05370     03 0C 07 F6 | 	mov	muldivb_, #3
05374     D0 00 A0 FD | 	call	#divide_
05378     85 73 02 F6 | 	mov	local05, muldiva_
0537c                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
0537c     35 75 02 F6 | 	mov	local06, local01
05380     02 74 66 F0 | 	shl	local06, #2
05384     DF 0E 06 F1 | 	add	objptr, #223
05388     07 75 02 F1 | 	add	local06, objptr
0538c     3A 5D 02 FB | 	rdlong	arg01, local06
05390     35 77 02 F6 | 	mov	local07, local01
05394     0C 0E 86 F1 | 	sub	objptr, #12
05398     07 77 02 F1 | 	add	local07, objptr
0539c     3B 5F C2 FA | 	rdbyte	arg02, local07
053a0     D3 0E 86 F1 | 	sub	objptr, #211
053a4     9C F0 BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
053a8     15 79 02 F6 | 	mov	local08, result1
053ac     3C 7B 02 F6 | 	mov	local09, local08
053b0     24 78 5E F2 | 	cmps	local08, #36 wcz
053b4     DC 02 90 3D |  if_ae	jmp	#LR__0226
053b8                 | '         if arpCounter == 1 and x > 0
053b8     01 72 0E F2 | 	cmp	local05, #1 wz
053bc     8C 00 90 5D |  if_ne	jmp	#LR__0213
053c0     B7 0F 06 F1 | 	add	objptr, #439
053c4     07 75 C2 FA | 	rdbyte	local06, objptr
053c8     B7 0F 86 F1 | 	sub	objptr, #439
053cc     00 74 5E F2 | 	cmps	local06, #0 wcz
053d0     78 00 90 ED |  if_be	jmp	#LR__0213
053d4                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
053d4     3D 7D 02 F6 | 	mov	local10, local09
053d8     B7 0F 06 F1 | 	add	objptr, #439
053dc     07 77 C2 FA | 	rdbyte	local07, objptr
053e0     3B 7F 02 F6 | 	mov	local11, local07
053e4     3B 7D 02 F1 | 	add	local10, local07
053e8     3E 81 02 F6 | 	mov	local12, local10
053ec     40 5D 02 F6 | 	mov	arg01, local12
053f0     06 00 00 FF 
053f4     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
053f8     01 5C 66 F0 | 	shl	arg01, #1
053fc     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05400                 | ' 
05400                 | '   return word[@periodTable][noteNumber]
05400     2E 2B E2 FA | 	rdword	result1, arg01
05404     06 00 00 FF 
05408     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
0540c     15 83 02 F6 | 	mov	local13, result1
05410     35 85 02 F6 | 	mov	local14, local01
05414     02 84 66 F0 | 	shl	local14, #2
05418     D8 0E 86 F1 | 	sub	objptr, #216
0541c     07 87 02 F6 | 	mov	local15, objptr
05420     07 85 02 F1 | 	add	local14, objptr
05424     41 75 02 F6 | 	mov	local06, local13
05428     42 89 02 FB | 	rdlong	local16, local14
0542c     44 75 82 F1 | 	sub	local06, local16
05430     35 8B 02 F6 | 	mov	local17, local01
05434     02 8A 66 F0 | 	shl	local17, #2
05438     10 0E 06 F1 | 	add	objptr, #16
0543c     07 8D 02 F6 | 	mov	local18, objptr
05440     07 8B 02 F1 | 	add	local17, objptr
05444     45 75 62 FC | 	wrlong	local06, local17
05448     EF 0E 86 F1 | 	sub	objptr, #239
0544c                 | LR__0213
0544c                 | '         if arpCounter == 2 and y > 0
0544c     02 72 0E F2 | 	cmp	local05, #2 wz
05450     8C 00 90 5D |  if_ne	jmp	#LR__0214
05454     B8 0F 06 F1 | 	add	objptr, #440
05458     07 75 C2 FA | 	rdbyte	local06, objptr
0545c     B8 0F 86 F1 | 	sub	objptr, #440
05460     00 74 5E F2 | 	cmps	local06, #0 wcz
05464     78 00 90 ED |  if_be	jmp	#LR__0214
05468                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05468     3D 7D 02 F6 | 	mov	local10, local09
0546c     B8 0F 06 F1 | 	add	objptr, #440
05470     07 77 C2 FA | 	rdbyte	local07, objptr
05474     3B 7F 02 F6 | 	mov	local11, local07
05478     3B 7D 02 F1 | 	add	local10, local07
0547c     3E 81 02 F6 | 	mov	local12, local10
05480     40 5D 02 F6 | 	mov	arg01, local12
05484     06 00 00 FF 
05488     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
0548c     01 5C 66 F0 | 	shl	arg01, #1
05490     14 5D 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05494                 | ' 
05494                 | '   return word[@periodTable][noteNumber]
05494     2E 2B E2 FA | 	rdword	result1, arg01
05498     06 00 00 FF 
0549c     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
054a0     15 83 02 F6 | 	mov	local13, result1
054a4     35 85 02 F6 | 	mov	local14, local01
054a8     02 84 66 F0 | 	shl	local14, #2
054ac     D9 0E 86 F1 | 	sub	objptr, #217
054b0     07 87 02 F6 | 	mov	local15, objptr
054b4     07 85 02 F1 | 	add	local14, objptr
054b8     41 75 02 F6 | 	mov	local06, local13
054bc     42 89 02 FB | 	rdlong	local16, local14
054c0     44 75 82 F1 | 	sub	local06, local16
054c4     35 8B 02 F6 | 	mov	local17, local01
054c8     02 8A 66 F0 | 	shl	local17, #2
054cc     10 0E 06 F1 | 	add	objptr, #16
054d0     07 8D 02 F6 | 	mov	local18, objptr
054d4     07 8B 02 F1 | 	add	local17, objptr
054d8     45 75 62 FC | 	wrlong	local06, local17
054dc     EF 0E 86 F1 | 	sub	objptr, #239
054e0                 | LR__0214
054e0                 | '         if arpCounter == 0 and (x + y) > 0
054e0     00 72 0E F2 | 	cmp	local05, #0 wz
054e4     AC 01 90 5D |  if_ne	jmp	#LR__0226
054e8     B7 0F 06 F1 | 	add	objptr, #439
054ec     07 75 C2 FA | 	rdbyte	local06, objptr
054f0     01 0E 06 F1 | 	add	objptr, #1
054f4     07 77 C2 FA | 	rdbyte	local07, objptr
054f8     B8 0F 86 F1 | 	sub	objptr, #440
054fc     3B 75 02 F1 | 	add	local06, local07
05500     00 74 5E F2 | 	cmps	local06, #0 wcz
05504     8C 01 90 ED |  if_be	jmp	#LR__0226
05508                 | '           deltaPeriod[channel] := 0
05508     02 6A 66 F0 | 	shl	local01, #2
0550c     EF 0E 06 F1 | 	add	objptr, #239
05510     07 6B 02 F1 | 	add	local01, objptr
05514     35 01 68 FC | 	wrlong	#0, local01
05518     EF 0E 86 F1 | 	sub	objptr, #239
0551c     74 01 90 FD | 	jmp	#LR__0226
05520                 | LR__0215
05520                 | ' 
05520                 | '     $4:                                 ' Vibrato
05520                 | '       if x > 0
05520     B7 0F 06 F1 | 	add	objptr, #439
05524     07 75 C2 FA | 	rdbyte	local06, objptr
05528     B7 0F 86 F1 | 	sub	objptr, #439
0552c     00 74 5E F2 | 	cmps	local06, #0 wcz
05530     1C 00 90 ED |  if_be	jmp	#LR__0216
05534                 | '         cmd4_memoryX[channel] := x
05534     35 75 02 F6 | 	mov	local06, local01
05538     D0 0F 06 F1 | 	add	objptr, #464
0553c     07 75 02 F1 | 	add	local06, objptr
05540     19 0E 86 F1 | 	sub	objptr, #25
05544     07 7F C2 FA | 	rdbyte	local11, objptr
05548     B7 0F 86 F1 | 	sub	objptr, #439
0554c     3A 7F 42 FC | 	wrbyte	local11, local06
05550                 | LR__0216
05550                 | '       if y > 0
05550     B8 0F 06 F1 | 	add	objptr, #440
05554     07 75 C2 FA | 	rdbyte	local06, objptr
05558     B8 0F 86 F1 | 	sub	objptr, #440
0555c     00 74 5E F2 | 	cmps	local06, #0 wcz
05560     1C 00 90 ED |  if_be	jmp	#LR__0217
05564                 | '         cmd4_memoryY[channel] := y
05564     35 75 02 F6 | 	mov	local06, local01
05568     CC 0F 06 F1 | 	add	objptr, #460
0556c     07 75 02 F1 | 	add	local06, objptr
05570     14 0E 86 F1 | 	sub	objptr, #20
05574     07 7F C2 FA | 	rdbyte	local11, objptr
05578     B8 0F 86 F1 | 	sub	objptr, #440
0557c     3A 7F 42 FC | 	wrbyte	local11, local06
05580                 | LR__0217
05580                 | ' 
05580                 | '       doVibrato(channel)
05580     35 5D 02 F6 | 	mov	arg01, local01
05584     74 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05588     08 01 90 FD | 	jmp	#LR__0226
0558c                 | LR__0218
0558c                 | ' 
0558c                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
0558c     35 5D 02 F6 | 	mov	arg01, local01
05590     68 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05594     FC 00 90 FD | 	jmp	#LR__0226
05598                 | LR__0219
05598                 | ' 
05598                 | '     $E:
05598                 | '       if x == $C                        ' Cut note after Y ticks
05598     B7 0F 06 F1 | 	add	objptr, #439
0559c     07 75 C2 FA | 	rdbyte	local06, objptr
055a0     B7 0F 86 F1 | 	sub	objptr, #439
055a4     0C 74 0E F2 | 	cmp	local06, #12 wz
055a8     34 00 90 5D |  if_ne	jmp	#LR__0220
055ac                 | '         if tickcounter == y
055ac     A1 0E 06 F1 | 	add	objptr, #161
055b0     07 75 C2 FA | 	rdbyte	local06, objptr
055b4     17 0F 06 F1 | 	add	objptr, #279
055b8     07 7F C2 FA | 	rdbyte	local11, objptr
055bc     B8 0F 86 F1 | 	sub	objptr, #440
055c0     3F 75 0A F2 | 	cmp	local06, local11 wz
055c4     CC 00 90 5D |  if_ne	jmp	#LR__0225
055c8                 | '           currVolume[channel] := 0
055c8     02 6A 66 F0 | 	shl	local01, #2
055cc     FF 0E 06 F1 | 	add	objptr, #255
055d0     07 6B 02 F1 | 	add	local01, objptr
055d4     35 01 68 FC | 	wrlong	#0, local01
055d8     FF 0E 86 F1 | 	sub	objptr, #255
055dc     B4 00 90 FD | 	jmp	#LR__0225
055e0                 | LR__0220
055e0                 | ' 
055e0                 | '       elseif x == $D                    ' Delay note Y ticks
055e0     B7 0F 06 F1 | 	add	objptr, #439
055e4     07 75 C2 FA | 	rdbyte	local06, objptr
055e8     B7 0F 86 F1 | 	sub	objptr, #439
055ec     0D 74 0E F2 | 	cmp	local06, #13 wz
055f0     A0 00 90 5D |  if_ne	jmp	#LR__0224
055f4                 | '         if tickcounter == y
055f4     A1 0E 06 F1 | 	add	objptr, #161
055f8     07 75 C2 FA | 	rdbyte	local06, objptr
055fc     17 0F 06 F1 | 	add	objptr, #279
05600     07 7F C2 FA | 	rdbyte	local11, objptr
05604     B8 0F 86 F1 | 	sub	objptr, #440
05608     3F 75 0A F2 | 	cmp	local06, local11 wz
0560c     0C 00 90 5D |  if_ne	jmp	#LR__0221
05610                 | '           triggerNote(channel)
05610     35 5D 02 F6 | 	mov	arg01, local01
05614     FC EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
05618     78 00 90 FD | 	jmp	#LR__0223
0561c                 | LR__0221
0561c                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
0561c                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
0561c     B8 0F 06 F1 | 	add	objptr, #440
05620     07 75 C2 FA | 	rdbyte	local06, objptr
05624     14 0F 86 F1 | 	sub	objptr, #276
05628     07 7F C2 FA | 	rdbyte	local11, objptr
0562c     A4 0E 86 F1 | 	sub	objptr, #164
05630     3F 75 5A F2 | 	cmps	local06, local11 wcz
05634     5C 00 90 CD |  if_b	jmp	#LR__0222
05638     A4 0E 06 F1 | 	add	objptr, #164
0563c     07 83 C2 FA | 	rdbyte	local13, objptr
05640     41 81 02 F6 | 	mov	local12, local13
05644     01 80 86 F1 | 	sub	local12, #1
05648     03 0E 86 F1 | 	sub	objptr, #3
0564c     07 87 C2 FA | 	rdbyte	local15, objptr
05650     A1 0E 86 F1 | 	sub	objptr, #161
05654     43 85 02 F6 | 	mov	local14, local15
05658     40 85 0A F2 | 	cmp	local14, local12 wz
0565c     34 00 90 5D |  if_ne	jmp	#LR__0222
05660                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
05660     35 75 02 F6 | 	mov	local06, local01
05664     02 74 66 F0 | 	shl	local06, #2
05668     27 0F 06 F1 | 	add	objptr, #295
0566c     07 7D 02 F6 | 	mov	local10, objptr
05670     07 75 02 F1 | 	add	local06, objptr
05674     35 7F 02 F6 | 	mov	local11, local01
05678     02 7E 66 F0 | 	shl	local11, #2
0567c     48 0E 86 F1 | 	sub	objptr, #72
05680     07 77 02 F6 | 	mov	local07, objptr
05684     3A 81 02 FB | 	rdlong	local12, local06
05688     3B 7F 02 F1 | 	add	local11, local07
0568c     3F 81 62 FC | 	wrlong	local12, local11
05690     DF 0E 86 F1 | 	sub	objptr, #223
05694                 | LR__0222
05694                 | LR__0223
05694                 | LR__0224
05694                 | LR__0225
05694                 | LR__0226
05694     AF F0 03 F6 | 	mov	ptra, fp
05698     BF 00 A0 FD | 	call	#popregs_
0569c                 | _trackerplayer_spin2_handleEveryTickCommands_ret
0569c     2D 00 64 FD | 	ret
056a0                 | 
056a0                 | ' 
056a0                 | ' 
056a0                 | ' PRI doTremolo(channel) | depth, sineWave, speed
056a0                 | _trackerplayer_spin2_doTremolo
056a0     2E 31 02 F6 | 	mov	_var01, arg01
056a4     18 33 02 F6 | 	mov	_var02, _var01
056a8     8B 0F 06 F1 | 	add	objptr, #395
056ac     07 33 02 F1 | 	add	_var02, objptr
056b0     05 00 00 FF 
056b4     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
056b8     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
056bc     19 37 C2 FA | 	rdbyte	_var04, _var02
056c0     02 36 66 F0 | 	shl	_var04, #2
056c4     1A 37 02 F1 | 	add	_var04, _var03
056c8                 | ' 
056c8                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
056c8     1B 39 02 FB | 	rdlong	_var05, _var04
056cc     18 3B 02 F6 | 	mov	_var06, _var01
056d0     49 0E 06 F1 | 	add	objptr, #73
056d4     07 3B 02 F1 | 	add	_var06, objptr
056d8                 | '   depth    := cmd7_memoryY[channel]
056d8     1D 3D C2 FA | 	rdbyte	_var07, _var06
056dc     18 3F 02 F6 | 	mov	_var08, _var01
056e0     04 0E 06 F1 | 	add	objptr, #4
056e4     07 3F 02 F1 | 	add	_var08, objptr
056e8                 | '   speed    := cmd7_memoryX[channel]
056e8     1F 41 C2 FA | 	rdbyte	_var09, _var08
056ec                 | ' 
056ec                 | '   CASE_FAST vibratoType[channel]
056ec     18 43 02 F6 | 	mov	_var10, _var01
056f0     18 0E 86 F1 | 	sub	objptr, #24
056f4     07 45 02 F6 | 	mov	_var11, objptr
056f8     07 43 02 F1 | 	add	_var10, objptr
056fc     21 47 C2 FA | 	rdbyte	_var12, _var10
05700     03 46 26 F3 | 	fle	_var12, #3
05704     23 49 02 F6 | 	mov	_var13, _var12
05708     05 00 00 FF 
0570c     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05710     C0 0F 86 F1 | 	sub	objptr, #448
05714     30 48 62 FD | 	jmprel	_var13
05718                 | LR__0227
05718     0C 00 90 FD | 	jmp	#LR__0228
0571c     30 00 90 FD | 	jmp	#LR__0229
05720     6C 00 90 FD | 	jmp	#LR__0230
05724     B4 00 90 FD | 	jmp	#LR__0231
05728                 | LR__0228
05728                 | ' 
05728                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
05728     1C 3D 02 FD | 	qmul	_var07, _var05
0572c     18 4A 62 FD | 	getqx	_var14
05730     06 4A C6 F0 | 	sar	_var14, #6
05734     18 4D 02 F6 | 	mov	_var15, _var01
05738     02 4C 66 F0 | 	shl	_var15, #2
0573c     0F 0F 06 F1 | 	add	objptr, #271
05740     07 4D 02 F1 | 	add	_var15, objptr
05744     26 4B 62 FC | 	wrlong	_var14, _var15
05748     0F 0F 86 F1 | 	sub	objptr, #271
0574c     8C 00 90 FD | 	jmp	#LR__0231
05750                 | LR__0229
05750                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
05750     18 4D 02 F6 | 	mov	_var15, _var01
05754     8B 0F 06 F1 | 	add	objptr, #395
05758     07 4D 02 F1 | 	add	_var15, objptr
0575c     26 4F C2 FA | 	rdbyte	_var16, _var15
05760     03 4E 66 F0 | 	shl	_var16, #3
05764     27 3D 02 FD | 	qmul	_var07, _var16
05768     18 4A 62 FD | 	getqx	_var14
0576c     00 4B 86 F1 | 	sub	_var14, #256
05770     06 4A C6 F0 | 	sar	_var14, #6
05774     18 51 02 F6 | 	mov	_var17, _var01
05778     02 50 66 F0 | 	shl	_var17, #2
0577c     7C 0E 86 F1 | 	sub	objptr, #124
05780     07 51 02 F1 | 	add	_var17, objptr
05784     28 4B 62 FC | 	wrlong	_var14, _var17
05788     0F 0F 86 F1 | 	sub	objptr, #271
0578c     4C 00 90 FD | 	jmp	#LR__0231
05790                 | LR__0230
05790                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
05790     18 4D 02 F6 | 	mov	_var15, _var01
05794     8B 0F 06 F1 | 	add	objptr, #395
05798     07 53 02 F6 | 	mov	_var18, objptr
0579c     07 4D 02 F1 | 	add	_var15, objptr
057a0     26 4F C2 FA | 	rdbyte	_var16, _var15
057a4     20 4E 06 F5 | 	and	_var16, #32
057a8     04 4E 66 F0 | 	shl	_var16, #4
057ac     27 3D 02 FD | 	qmul	_var07, _var16
057b0     18 54 62 FD | 	getqx	_var19
057b4     2A 4B 02 F6 | 	mov	_var14, _var19
057b8     00 4B 86 F1 | 	sub	_var14, #256
057bc     06 4A C6 F0 | 	sar	_var14, #6
057c0     18 51 02 F6 | 	mov	_var17, _var01
057c4     02 50 66 F0 | 	shl	_var17, #2
057c8     7C 0E 86 F1 | 	sub	objptr, #124
057cc     07 57 02 F6 | 	mov	_var20, objptr
057d0     07 51 02 F1 | 	add	_var17, objptr
057d4     28 4B 62 FC | 	wrlong	_var14, _var17
057d8     0F 0F 86 F1 | 	sub	objptr, #271
057dc                 | LR__0231
057dc     8B 0F 06 F1 | 	add	objptr, #395
057e0     07 31 02 F1 | 	add	_var01, objptr
057e4     18 59 C2 FA | 	rdbyte	_var21, _var01
057e8     20 59 02 F1 | 	add	_var21, _var09
057ec     3F 58 06 F5 | 	and	_var21, #63
057f0                 | ' 
057f0                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
057f0     18 59 42 FC | 	wrbyte	_var21, _var01
057f4     8B 0F 86 F1 | 	sub	objptr, #395
057f8                 | _trackerplayer_spin2_doTremolo_ret
057f8     2D 00 64 FD | 	ret
057fc                 | 
057fc                 | ' 
057fc                 | ' 
057fc                 | ' PRI doVibrato(channel) | depth, sineWave, speed
057fc                 | _trackerplayer_spin2_doVibrato
057fc     2E 31 02 F6 | 	mov	_var01, arg01
05800     18 33 02 F6 | 	mov	_var02, _var01
05804     87 0F 06 F1 | 	add	objptr, #391
05808     07 33 02 F1 | 	add	_var02, objptr
0580c     05 00 00 FF 
05810     A4 29 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05814     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05818     19 37 C2 FA | 	rdbyte	_var04, _var02
0581c     02 36 66 F0 | 	shl	_var04, #2
05820     1A 37 02 F1 | 	add	_var04, _var03
05824                 | ' 
05824                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
05824     1B 39 02 FB | 	rdlong	_var05, _var04
05828     18 3B 02 F6 | 	mov	_var06, _var01
0582c     45 0E 06 F1 | 	add	objptr, #69
05830     07 3B 02 F1 | 	add	_var06, objptr
05834                 | '   depth    := cmd4_memoryY[channel]
05834     1D 3D C2 FA | 	rdbyte	_var07, _var06
05838     18 3F 02 F6 | 	mov	_var08, _var01
0583c     04 0E 06 F1 | 	add	objptr, #4
05840     07 3F 02 F1 | 	add	_var08, objptr
05844                 | '   speed    := cmd4_memoryX[channel]
05844     1F 41 C2 FA | 	rdbyte	_var09, _var08
05848                 | ' 
05848                 | '   CASE_FAST vibratoType[channel]
05848     18 43 02 F6 | 	mov	_var10, _var01
0584c     10 0E 86 F1 | 	sub	objptr, #16
05850     07 45 02 F6 | 	mov	_var11, objptr
05854     07 43 02 F1 | 	add	_var10, objptr
05858     21 47 C2 FA | 	rdbyte	_var12, _var10
0585c     03 46 26 F3 | 	fle	_var12, #3
05860     23 49 02 F6 | 	mov	_var13, _var12
05864     05 00 00 FF 
05868     A4 29 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
0586c     C0 0F 86 F1 | 	sub	objptr, #448
05870     30 48 62 FD | 	jmprel	_var13
05874                 | LR__0232
05874     0C 00 90 FD | 	jmp	#LR__0233
05878     30 00 90 FD | 	jmp	#LR__0234
0587c     6C 00 90 FD | 	jmp	#LR__0235
05880     B4 00 90 FD | 	jmp	#LR__0236
05884                 | LR__0233
05884                 | ' 
05884                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
05884     1C 3D 02 FD | 	qmul	_var07, _var05
05888     18 4A 62 FD | 	getqx	_var14
0588c     07 4A C6 F0 | 	sar	_var14, #7
05890     18 4D 02 F6 | 	mov	_var15, _var01
05894     02 4C 66 F0 | 	shl	_var15, #2
05898     EF 0E 06 F1 | 	add	objptr, #239
0589c     07 4D 02 F1 | 	add	_var15, objptr
058a0     26 4B 62 FC | 	wrlong	_var14, _var15
058a4     EF 0E 86 F1 | 	sub	objptr, #239
058a8     8C 00 90 FD | 	jmp	#LR__0236
058ac                 | LR__0234
058ac                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
058ac     18 4D 02 F6 | 	mov	_var15, _var01
058b0     87 0F 06 F1 | 	add	objptr, #391
058b4     07 4D 02 F1 | 	add	_var15, objptr
058b8     26 4F C2 FA | 	rdbyte	_var16, _var15
058bc     03 4E 66 F0 | 	shl	_var16, #3
058c0     27 3D 02 FD | 	qmul	_var07, _var16
058c4     18 4A 62 FD | 	getqx	_var14
058c8     00 4B 86 F1 | 	sub	_var14, #256
058cc     07 4A C6 F0 | 	sar	_var14, #7
058d0     18 51 02 F6 | 	mov	_var17, _var01
058d4     02 50 66 F0 | 	shl	_var17, #2
058d8     98 0E 86 F1 | 	sub	objptr, #152
058dc     07 51 02 F1 | 	add	_var17, objptr
058e0     28 4B 62 FC | 	wrlong	_var14, _var17
058e4     EF 0E 86 F1 | 	sub	objptr, #239
058e8     4C 00 90 FD | 	jmp	#LR__0236
058ec                 | LR__0235
058ec                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
058ec     18 4D 02 F6 | 	mov	_var15, _var01
058f0     87 0F 06 F1 | 	add	objptr, #391
058f4     07 53 02 F6 | 	mov	_var18, objptr
058f8     07 4D 02 F1 | 	add	_var15, objptr
058fc     26 4F C2 FA | 	rdbyte	_var16, _var15
05900     20 4E 06 F5 | 	and	_var16, #32
05904     04 4E 66 F0 | 	shl	_var16, #4
05908     27 3D 02 FD | 	qmul	_var07, _var16
0590c     18 54 62 FD | 	getqx	_var19
05910     2A 4B 02 F6 | 	mov	_var14, _var19
05914     00 4B 86 F1 | 	sub	_var14, #256
05918     07 4A C6 F0 | 	sar	_var14, #7
0591c     18 51 02 F6 | 	mov	_var17, _var01
05920     02 50 66 F0 | 	shl	_var17, #2
05924     98 0E 86 F1 | 	sub	objptr, #152
05928     07 57 02 F6 | 	mov	_var20, objptr
0592c     07 51 02 F1 | 	add	_var17, objptr
05930     28 4B 62 FC | 	wrlong	_var14, _var17
05934     EF 0E 86 F1 | 	sub	objptr, #239
05938                 | LR__0236
05938     87 0F 06 F1 | 	add	objptr, #391
0593c     07 31 02 F1 | 	add	_var01, objptr
05940     18 59 C2 FA | 	rdbyte	_var21, _var01
05944     20 59 02 F1 | 	add	_var21, _var09
05948     3F 58 06 F5 | 	and	_var21, #63
0594c                 | ' 
0594c                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
0594c     18 59 42 FC | 	wrbyte	_var21, _var01
05950     87 0F 86 F1 | 	sub	objptr, #391
05954                 | _trackerplayer_spin2_doVibrato_ret
05954     2D 00 64 FD | 	ret
05958                 | 
05958                 | ' 
05958                 | ' 
05958                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05958                 | _trackerplayer_spin2_doPortamento
05958                 | ' 
05958                 | '   if period == currPeriod[channel]
05958     2E 31 02 F6 | 	mov	_var01, arg01
0595c     02 30 66 F0 | 	shl	_var01, #2
05960     DF 0E 06 F1 | 	add	objptr, #223
05964     07 33 02 F6 | 	mov	_var02, objptr
05968     07 31 02 F1 | 	add	_var01, objptr
0596c     18 35 02 FB | 	rdlong	_var03, _var01
05970     1A 5F 0A F2 | 	cmp	arg02, _var03 wz
05974                 | '     return
05974     DF 0E 86 F1 | 	sub	objptr, #223
05978     D4 01 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
0597c                 | ' 
0597c                 | '   if period > 0
0597c     00 5E 5E F2 | 	cmps	arg02, #0 wcz
05980     1C 00 90 ED |  if_be	jmp	#LR__0237
05984     2E 37 02 F6 | 	mov	_var04, arg01
05988     02 36 66 F0 | 	shl	_var04, #2
0598c     97 0F 06 F1 | 	add	objptr, #407
05990     07 37 02 F1 | 	add	_var04, objptr
05994                 | '     portamentoPeriodMemory[channel] := period
05994     1B 5F 62 FC | 	wrlong	arg02, _var04
05998                 | '   else
05998     97 0F 86 F1 | 	sub	objptr, #407
0599c     18 00 90 FD | 	jmp	#LR__0238
059a0                 | LR__0237
059a0     2E 39 02 F6 | 	mov	_var05, arg01
059a4     02 38 66 F0 | 	shl	_var05, #2
059a8     97 0F 06 F1 | 	add	objptr, #407
059ac     07 39 02 F1 | 	add	_var05, objptr
059b0                 | '     period := portamentoPeriodMemory[channel]
059b0     1C 5F 02 FB | 	rdlong	arg02, _var05
059b4     97 0F 86 F1 | 	sub	objptr, #407
059b8                 | LR__0238
059b8                 | ' 
059b8                 | '   if period > currPeriod[channel]
059b8     2E 31 02 F6 | 	mov	_var01, arg01
059bc     02 30 66 F0 | 	shl	_var01, #2
059c0     DF 0E 06 F1 | 	add	objptr, #223
059c4     07 31 02 F1 | 	add	_var01, objptr
059c8     18 35 02 FB | 	rdlong	_var03, _var01
059cc     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
059d0     DF 0E 86 F1 | 	sub	objptr, #223
059d4     50 00 90 ED |  if_be	jmp	#LR__0239
059d8     2E 3B 02 F6 | 	mov	_var06, arg01
059dc     02 3A 66 F0 | 	shl	_var06, #2
059e0     DF 0E 06 F1 | 	add	objptr, #223
059e4     07 3B 02 F1 | 	add	_var06, objptr
059e8     2E 3D 02 F6 | 	mov	_var07, arg01
059ec     E9 0E 06 F1 | 	add	objptr, #233
059f0     1D 3F 02 FB | 	rdlong	_var08, _var06
059f4     07 3D 02 F1 | 	add	_var07, objptr
059f8     1E 33 C2 FA | 	rdbyte	_var02, _var07
059fc     19 3F 02 F1 | 	add	_var08, _var02
05a00                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05a00     1D 3F 62 FC | 	wrlong	_var08, _var06
05a04     2E 41 02 F6 | 	mov	_var09, arg01
05a08     02 40 66 F0 | 	shl	_var09, #2
05a0c     E9 0E 86 F1 | 	sub	objptr, #233
05a10     07 41 02 F1 | 	add	_var09, objptr
05a14     20 43 02 FB | 	rdlong	_var10, _var09
05a18     2F 43 62 F3 | 	fles	_var10, arg02
05a1c                 | '     currPeriod[channel] <#= period
05a1c     20 43 62 FC | 	wrlong	_var10, _var09
05a20     DF 0E 86 F1 | 	sub	objptr, #223
05a24     6C 00 90 FD | 	jmp	#LR__0241
05a28                 | LR__0239
05a28                 | ' 
05a28                 | '   elseif period < currPeriod[channel]
05a28     2E 31 02 F6 | 	mov	_var01, arg01
05a2c     02 30 66 F0 | 	shl	_var01, #2
05a30     DF 0E 06 F1 | 	add	objptr, #223
05a34     07 31 02 F1 | 	add	_var01, objptr
05a38     18 35 02 FB | 	rdlong	_var03, _var01
05a3c     1A 5F 5A F2 | 	cmps	arg02, _var03 wcz
05a40     DF 0E 86 F1 | 	sub	objptr, #223
05a44     4C 00 90 3D |  if_ae	jmp	#LR__0240
05a48     2E 45 02 F6 | 	mov	_var11, arg01
05a4c     02 44 66 F0 | 	shl	_var11, #2
05a50     DF 0E 06 F1 | 	add	objptr, #223
05a54     07 45 02 F1 | 	add	_var11, objptr
05a58     2E 47 02 F6 | 	mov	_var12, arg01
05a5c     E9 0E 06 F1 | 	add	objptr, #233
05a60     22 49 02 FB | 	rdlong	_var13, _var11
05a64     07 47 02 F1 | 	add	_var12, objptr
05a68     23 33 C2 FA | 	rdbyte	_var02, _var12
05a6c     19 49 82 F1 | 	sub	_var13, _var02
05a70                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05a70     22 49 62 FC | 	wrlong	_var13, _var11
05a74     2E 4B 02 F6 | 	mov	_var14, arg01
05a78     02 4A 66 F0 | 	shl	_var14, #2
05a7c     E9 0E 86 F1 | 	sub	objptr, #233
05a80     07 4B 02 F1 | 	add	_var14, objptr
05a84     25 4D 02 FB | 	rdlong	_var15, _var14
05a88     2F 4D 42 F3 | 	fges	_var15, arg02
05a8c                 | '     currPeriod[channel] #>= period
05a8c     25 4D 62 FC | 	wrlong	_var15, _var14
05a90     DF 0E 86 F1 | 	sub	objptr, #223
05a94                 | LR__0240
05a94                 | LR__0241
05a94                 | ' 
05a94                 | '   ' Handle glissando if activated
05a94                 | '   if portaGlissando[channel] > 0
05a94     2E 31 02 F6 | 	mov	_var01, arg01
05a98     BC 0F 06 F1 | 	add	objptr, #444
05a9c     07 31 02 F1 | 	add	_var01, objptr
05aa0     18 35 C2 FA | 	rdbyte	_var03, _var01
05aa4     00 34 5E F2 | 	cmps	_var03, #0 wcz
05aa8     BC 0F 86 F1 | 	sub	objptr, #444
05aac     A0 00 90 ED |  if_be	jmp	#LR__0244
05ab0     2E 4F 02 F6 | 	mov	_var16, arg01
05ab4     02 4E 66 F0 | 	shl	_var16, #2
05ab8     DF 0E 06 F1 | 	add	objptr, #223
05abc     07 4F 02 F1 | 	add	_var16, objptr
05ac0                 | ' 
05ac0                 | '     tempPeriod := currPeriod[channel]
05ac0     27 51 02 FB | 	rdlong	_var17, _var16
05ac4                 | ' 
05ac4                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05ac4     00 52 06 F6 | 	mov	_var18, #0
05ac8     DF 0E 86 F1 | 	sub	objptr, #223
05acc     94 A5 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
05ad0     93 00 A0 FD | 	call	#FCACHE_LOAD_
05ad4                 | LR__0242
05ad4     06 00 00 FF 
05ad8     A4 28 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05adc     14 35 02 F6 | 	mov	_var03, ptr__trackerplayer_spin2_dat__
05ae0     2E 55 02 F6 | 	mov	_var19, arg01
05ae4     D3 0E 06 F1 | 	add	objptr, #211
05ae8     07 55 02 F1 | 	add	_var19, objptr
05aec     2A 33 C2 FA | 	rdbyte	_var02, _var19
05af0     19 57 02 F6 | 	mov	_var20, _var02
05af4     03 56 66 F0 | 	shl	_var20, #3
05af8     19 57 02 F1 | 	add	_var20, _var02
05afc     03 56 66 F0 | 	shl	_var20, #3
05b00     2B 35 02 F1 | 	add	_var03, _var20
05b04     29 59 02 F6 | 	mov	_var21, _var18
05b08     01 58 66 F0 | 	shl	_var21, #1
05b0c     1A 59 02 F1 | 	add	_var21, _var03
05b10                 | ' 
05b10                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05b10     2C 5B E2 FA | 	rdword	_var22, _var21
05b14                 | '       if tempPeriod >= periodStep
05b14     2D 51 5A F2 | 	cmps	_var17, _var22 wcz
05b18                 | '         i += 1000
05b18     06 00 00 FF 
05b1c     A4 28 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05b20     D3 0E 86 F1 | 	sub	objptr, #211
05b24     01 00 00 3F 
05b28     E8 53 06 31 |  if_ae	add	_var18, ##1000
05b2c     01 52 06 F1 | 	add	_var18, #1
05b30     24 52 5E F2 | 	cmps	_var18, #36 wcz
05b34     9C FF 9F CD |  if_b	jmp	#LR__0242
05b38                 | LR__0243
05b38     28 5B 82 F1 | 	sub	_var22, _var17
05b3c     02 5C 66 F0 | 	shl	arg01, #2
05b40     EF 0E 06 F1 | 	add	objptr, #239
05b44     07 5D 02 F1 | 	add	arg01, objptr
05b48                 | ' 
05b48                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05b48     2E 5B 62 FC | 	wrlong	_var22, arg01
05b4c     EF 0E 86 F1 | 	sub	objptr, #239
05b50                 | LR__0244
05b50                 | _trackerplayer_spin2_doPortamento_ret
05b50     2D 00 64 FD | 	ret
05b54                 | 
05b54                 | ' 
05b54                 | ' 
05b54                 | ' PRI doVolumeSlide(channel)
05b54                 | _trackerplayer_spin2_doVolumeSlide
05b54                 | ' 
05b54                 | '   if x > 0
05b54     B7 0F 06 F1 | 	add	objptr, #439
05b58     07 31 C2 FA | 	rdbyte	_var01, objptr
05b5c     B7 0F 86 F1 | 	sub	objptr, #439
05b60     00 30 5E F2 | 	cmps	_var01, #0 wcz
05b64     28 00 90 ED |  if_be	jmp	#LR__0245
05b68     2E 33 02 F6 | 	mov	_var02, arg01
05b6c     02 32 66 F0 | 	shl	_var02, #2
05b70     FF 0E 06 F1 | 	add	objptr, #255
05b74     07 33 02 F1 | 	add	_var02, objptr
05b78     19 35 02 FB | 	rdlong	_var03, _var02
05b7c     B8 0E 06 F1 | 	add	objptr, #184
05b80     07 37 C2 FA | 	rdbyte	_var04, objptr
05b84     B7 0F 86 F1 | 	sub	objptr, #439
05b88     1B 35 02 F1 | 	add	_var03, _var04
05b8c                 | '     currVolume[channel] += x
05b8c     19 35 62 FC | 	wrlong	_var03, _var02
05b90                 | LR__0245
05b90                 | '   if y > 0
05b90     B8 0F 06 F1 | 	add	objptr, #440
05b94     07 31 C2 FA | 	rdbyte	_var01, objptr
05b98     B8 0F 86 F1 | 	sub	objptr, #440
05b9c     00 30 5E F2 | 	cmps	_var01, #0 wcz
05ba0     24 00 90 ED |  if_be	jmp	#LR__0246
05ba4     02 5C 66 F0 | 	shl	arg01, #2
05ba8     FF 0E 06 F1 | 	add	objptr, #255
05bac     07 5D 02 F1 | 	add	arg01, objptr
05bb0     2E 39 02 FB | 	rdlong	_var05, arg01
05bb4     B9 0E 06 F1 | 	add	objptr, #185
05bb8     07 37 C2 FA | 	rdbyte	_var04, objptr
05bbc     B8 0F 86 F1 | 	sub	objptr, #440
05bc0     1B 39 82 F1 | 	sub	_var05, _var04
05bc4                 | '     currVolume[channel] -= y
05bc4     2E 39 62 FC | 	wrlong	_var05, arg01
05bc8                 | LR__0246
05bc8                 | _trackerplayer_spin2_doVolumeSlide_ret
05bc8     2D 00 64 FD | 	ret
05bcc                 | hubexit
05bcc     81 00 80 FD | 	jmp	#cogexit
05bd0                 | 
05bd0                 | __system___setbaud
05bd0     14 0A 07 FB | 	rdlong	muldiva_, #20
05bd4     2E 0D 03 F6 | 	mov	muldivb_, arg01
05bd8     D0 00 A0 FD | 	call	#divide_
05bdc     40 7C 64 FD | 	dirl	#62
05be0     40 7E 64 FD | 	dirl	#63
05be4     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
05be8     10 0C 67 F0 | 	shl	muldivb_, #16
05bec     07 5E 06 F6 | 	mov	arg02, #7
05bf0     86 5F 02 F1 | 	add	arg02, muldivb_
05bf4     3E F8 0C FC | 	wrpin	#124, #62
05bf8     3E 5E 16 FC | 	wxpin	arg02, #62
05bfc     3F 7C 0C FC | 	wrpin	#62, #63
05c00     14 5E 06 F1 | 	add	arg02, #20
05c04     3F 5E 16 FC | 	wxpin	arg02, #63
05c08     41 7C 64 FD | 	dirh	#62
05c0c     41 7E 64 FD | 	dirh	#63
05c10                 | __system___setbaud_ret
05c10     2D 00 64 FD | 	ret
05c14                 | 
05c14                 | __system___txraw
05c14     02 5A 05 F6 | 	mov	COUNT_, #2
05c18     B0 00 A0 FD | 	call	#pushregs_
05c1c     2E 6B 02 F6 | 	mov	local01, arg01
05c20     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05c24     0C 00 90 5D |  if_ne	jmp	#LR__0247
05c28     42 0F 00 FF 
05c2c     80 5C 06 F6 | 	mov	arg01, ##2000000
05c30     9C FF BF FD | 	call	#__system___setbaud
05c34                 | LR__0247
05c34     3E 6A 26 FC | 	wypin	local01, #62
05c38     1F 02 64 FD | 	waitx	#1
05c3c     C8 A3 9F FE | 	loc	pa,	#(@LR__0249-@LR__0248)
05c40     93 00 A0 FD | 	call	#FCACHE_LOAD_
05c44                 | LR__0248
05c44     40 7C 74 FD | 	testp	#62 wc
05c48     F8 FF 9F 3D |  if_nc	jmp	#LR__0248
05c4c                 | LR__0249
05c4c     01 2A 06 F6 | 	mov	result1, #1
05c50     AF F0 03 F6 | 	mov	ptra, fp
05c54     BF 00 A0 FD | 	call	#popregs_
05c58                 | __system___txraw_ret
05c58     2D 00 64 FD | 	ret
05c5c                 | 
05c5c                 | __system___rxraw
05c5c     0D 5A 05 F6 | 	mov	COUNT_, #13
05c60     B0 00 A0 FD | 	call	#pushregs_
05c64     2E 6B 02 F6 | 	mov	local01, arg01
05c68     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05c6c     0C 00 90 5D |  if_ne	jmp	#LR__0250
05c70     42 0F 00 FF 
05c74     80 5C 06 F6 | 	mov	arg01, ##2000000
05c78     54 FF BF FD | 	call	#__system___setbaud
05c7c                 | LR__0250
05c7c     00 6A 0E F2 | 	cmp	local01, #0 wz
05c80     18 00 90 AD |  if_e	jmp	#LR__0251
05c84     14 6E 06 FB | 	rdlong	local03, #20
05c88     0A 6E 46 F0 | 	shr	local03, #10
05c8c     37 6B 02 FD | 	qmul	local01, local03
05c90     18 70 62 FD | 	getqx	local04
05c94     1A 72 62 FD | 	getct	local05
05c98     38 73 02 F1 | 	add	local05, local04
05c9c                 | LR__0251
05c9c     01 74 66 F6 | 	neg	local06, #1
05ca0     00 76 06 F6 | 	mov	local07, #0
05ca4     04 14 06 F1 | 	add	ptr___system__dat__, #4
05ca8     0A 79 02 FB | 	rdlong	local08, ptr___system__dat__
05cac     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05cb0                 | LR__0252
05cb0     08 78 16 F4 | 	testb	local08, #8 wc
05cb4     09 78 76 F4 | 	testbn	local08, #9 andc
05cb8     0A 78 46 F0 | 	shr	local08, #10
05cbc     01 76 06 C6 |  if_b	mov	local07, #1
05cc0     10 00 90 CD |  if_b	jmp	#LR__0253
05cc4     40 7E 6C FD | 	testp	#63 wz
05cc8     01 76 06 A6 |  if_e	mov	local07, #1
05ccc     3F 78 8E AA |  if_e	rdpin	local08, #63
05cd0     04 78 46 A0 |  if_e	shr	local08, #4
05cd4                 | LR__0253
05cd4     00 6C 06 F6 | 	mov	local02, #0
05cd8     00 76 0E F2 | 	cmp	local07, #0 wz
05cdc     01 6C 66 56 |  if_ne	neg	local02, #1
05ce0     00 7A 06 F6 | 	mov	local09, #0
05ce4     00 7C 06 F6 | 	mov	local10, #0
05ce8     00 6A 0E F2 | 	cmp	local01, #0 wz
05cec     01 7C 66 56 |  if_ne	neg	local10, #1
05cf0     00 7E 06 F6 | 	mov	local11, #0
05cf4     00 80 06 F6 | 	mov	local12, #0
05cf8     1A 82 62 FD | 	getct	local13
05cfc     39 83 82 F1 | 	sub	local13, local05
05d00     00 82 5E F2 | 	cmps	local13, #0 wcz
05d04     01 80 66 C6 |  if_b	neg	local12, #1
05d08     00 80 0E F2 | 	cmp	local12, #0 wz
05d0c     01 7E 66 56 |  if_ne	neg	local11, #1
05d10     3F 7D CA F7 | 	test	local10, local11 wz
05d14     01 7A 66 56 |  if_ne	neg	local09, #1
05d18     3D 6D 4A F5 | 	or	local02, local09 wz
05d1c     90 FF 9F AD |  if_e	jmp	#LR__0252
05d20     00 76 0E F2 | 	cmp	local07, #0 wz
05d24     3C 75 02 56 |  if_ne	mov	local06, local08
05d28     FF 74 06 55 |  if_ne	and	local06, #255
05d2c     04 14 06 F1 | 	add	ptr___system__dat__, #4
05d30     0A 79 62 FC | 	wrlong	local08, ptr___system__dat__
05d34     04 14 86 F1 | 	sub	ptr___system__dat__, #4
05d38     3A 2B 02 F6 | 	mov	result1, local06
05d3c     AF F0 03 F6 | 	mov	ptra, fp
05d40     BF 00 A0 FD | 	call	#popregs_
05d44                 | __system___rxraw_ret
05d44     2D 00 64 FD | 	ret
05d48                 | 
05d48                 | __system____builtin_memmove
05d48     2E 31 02 F6 | 	mov	_var01, arg01
05d4c     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05d50     50 00 90 3D |  if_ae	jmp	#LR__0261
05d54     C8 A2 9F FE | 	loc	pa,	#(@LR__0255-@LR__0254)
05d58     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d5c                 | LR__0254
05d5c     03 60 5E F2 | 	cmps	arg03, #3 wcz
05d60     18 00 90 ED |  if_be	jmp	#LR__0256
05d64     2F 33 02 FB | 	rdlong	_var02, arg02
05d68     2E 33 62 FC | 	wrlong	_var02, arg01
05d6c     04 5C 06 F1 | 	add	arg01, #4
05d70     04 5E 06 F1 | 	add	arg02, #4
05d74     04 60 86 F1 | 	sub	arg03, #4
05d78     E0 FF 9F FD | 	jmp	#LR__0254
05d7c                 | LR__0255
05d7c                 | LR__0256
05d7c     30 35 0A F6 | 	mov	_var03, arg03 wz
05d80     4C 00 90 AD |  if_e	jmp	#LR__0267
05d84     8C A2 9F FE | 	loc	pa,	#(@LR__0259-@LR__0257)
05d88     93 00 A0 FD | 	call	#FCACHE_LOAD_
05d8c                 | LR__0257
05d8c     1A 09 D8 FC | 	rep	@LR__0260, _var03
05d90                 | LR__0258
05d90     2F 33 C2 FA | 	rdbyte	_var02, arg02
05d94     2E 33 42 FC | 	wrbyte	_var02, arg01
05d98     01 5C 06 F1 | 	add	arg01, #1
05d9c     01 5E 06 F1 | 	add	arg02, #1
05da0                 | LR__0259
05da0                 | LR__0260
05da0     2C 00 90 FD | 	jmp	#LR__0267
05da4                 | LR__0261
05da4     30 5D 02 F1 | 	add	arg01, arg03
05da8     30 5F 02 F1 | 	add	arg02, arg03
05dac     30 37 0A F6 | 	mov	_var04, arg03 wz
05db0     1C 00 90 AD |  if_e	jmp	#LR__0266
05db4     5C A2 9F FE | 	loc	pa,	#(@LR__0264-@LR__0262)
05db8     93 00 A0 FD | 	call	#FCACHE_LOAD_
05dbc                 | LR__0262
05dbc     1B 09 D8 FC | 	rep	@LR__0265, _var04
05dc0                 | LR__0263
05dc0     01 5C 86 F1 | 	sub	arg01, #1
05dc4     01 5E 86 F1 | 	sub	arg02, #1
05dc8     2F 33 C2 FA | 	rdbyte	_var02, arg02
05dcc     2E 33 42 FC | 	wrbyte	_var02, arg01
05dd0                 | LR__0264
05dd0                 | LR__0265
05dd0                 | LR__0266
05dd0                 | LR__0267
05dd0     18 2B 02 F6 | 	mov	result1, _var01
05dd4                 | __system____builtin_memmove_ret
05dd4     2D 00 64 FD | 	ret
05dd8                 | 
05dd8                 | __system__longmove
05dd8     2E 31 02 F6 | 	mov	_var01, arg01
05ddc     2F 5D 5A F2 | 	cmps	arg01, arg02 wcz
05de0     28 00 90 3D |  if_ae	jmp	#LR__0272
05de4     30 33 0A F6 | 	mov	_var02, arg03 wz
05de8     54 00 90 AD |  if_e	jmp	#LR__0278
05dec     24 A2 9F FE | 	loc	pa,	#(@LR__0270-@LR__0268)
05df0     93 00 A0 FD | 	call	#FCACHE_LOAD_
05df4                 | LR__0268
05df4     19 09 D8 FC | 	rep	@LR__0271, _var02
05df8                 | LR__0269
05df8     2F 35 02 FB | 	rdlong	_var03, arg02
05dfc     2E 35 62 FC | 	wrlong	_var03, arg01
05e00     04 5C 06 F1 | 	add	arg01, #4
05e04     04 5E 06 F1 | 	add	arg02, #4
05e08                 | LR__0270
05e08                 | LR__0271
05e08     34 00 90 FD | 	jmp	#LR__0278
05e0c                 | LR__0272
05e0c     30 37 02 F6 | 	mov	_var04, arg03
05e10     02 36 66 F0 | 	shl	_var04, #2
05e14     1B 5D 02 F1 | 	add	arg01, _var04
05e18     1B 5F 02 F1 | 	add	arg02, _var04
05e1c     30 39 0A F6 | 	mov	_var05, arg03 wz
05e20     1C 00 90 AD |  if_e	jmp	#LR__0277
05e24     EC A1 9F FE | 	loc	pa,	#(@LR__0275-@LR__0273)
05e28     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e2c                 | LR__0273
05e2c     1C 09 D8 FC | 	rep	@LR__0276, _var05
05e30                 | LR__0274
05e30     04 5C 86 F1 | 	sub	arg01, #4
05e34     04 5E 86 F1 | 	sub	arg02, #4
05e38     2F 35 02 FB | 	rdlong	_var03, arg02
05e3c     2E 35 62 FC | 	wrlong	_var03, arg01
05e40                 | LR__0275
05e40                 | LR__0276
05e40                 | LR__0277
05e40                 | LR__0278
05e40     18 2B 02 F6 | 	mov	result1, _var01
05e44                 | __system__longmove_ret
05e44     2D 00 64 FD | 	ret
05e48                 | 
05e48                 | __system____topofstack
05e48     00 5A 05 F6 | 	mov	COUNT_, #0
05e4c     B0 00 A0 FD | 	call	#pushregs_
05e50     0C F0 07 F1 | 	add	ptra, #12
05e54     04 5E 05 F1 | 	add	fp, #4
05e58     AF 5C 62 FC | 	wrlong	arg01, fp
05e5c     AF 2A 02 F6 | 	mov	result1, fp
05e60     04 5E 85 F1 | 	sub	fp, #4
05e64     AF F0 03 F6 | 	mov	ptra, fp
05e68     BF 00 A0 FD | 	call	#popregs_
05e6c                 | __system____topofstack_ret
05e6c     2D 00 64 FD | 	ret
05e70                 | 
05e70                 | __system___make_methodptr
05e70     04 5A 05 F6 | 	mov	COUNT_, #4
05e74     B0 00 A0 FD | 	call	#pushregs_
05e78     2E 6B 02 F6 | 	mov	local01, arg01
05e7c     2F 6D 02 F6 | 	mov	local02, arg02
05e80     08 5C 06 F6 | 	mov	arg01, #8
05e84     5C 0C B0 FD | 	call	#__system___gc_alloc_managed
05e88     15 6F 0A F6 | 	mov	local03, result1 wz
05e8c     10 00 90 AD |  if_e	jmp	#LR__0279
05e90     37 6B 62 FC | 	wrlong	local01, local03
05e94     37 71 02 F6 | 	mov	local04, local03
05e98     04 70 06 F1 | 	add	local04, #4
05e9c     38 6D 62 FC | 	wrlong	local02, local04
05ea0                 | LR__0279
05ea0     37 2B 02 F6 | 	mov	result1, local03
05ea4     AF F0 03 F6 | 	mov	ptra, fp
05ea8     BF 00 A0 FD | 	call	#popregs_
05eac                 | __system___make_methodptr_ret
05eac     2D 00 64 FD | 	ret
05eb0                 | 
05eb0                 | __system___lockmem
05eb0     02 5A 05 F6 | 	mov	COUNT_, #2
05eb4     B0 00 A0 FD | 	call	#pushregs_
05eb8     01 2A 62 FD | 	cogid	result1
05ebc     15 6B 02 F6 | 	mov	local01, result1
05ec0     00 6B 06 F1 | 	add	local01, #256
05ec4                 | LR__0280
05ec4     2E 6D 0A FB | 	rdlong	local02, arg01 wz
05ec8     2E 6B 62 AC |  if_e	wrlong	local01, arg01
05ecc     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05ed0     2E 6D 02 AB |  if_e	rdlong	local02, arg01
05ed4     35 6D 0A F2 | 	cmp	local02, local01 wz
05ed8     E8 FF 9F 5D |  if_ne	jmp	#LR__0280
05edc     AF F0 03 F6 | 	mov	ptra, fp
05ee0     BF 00 A0 FD | 	call	#popregs_
05ee4                 | __system___lockmem_ret
05ee4     2D 00 64 FD | 	ret
05ee8                 | 
05ee8                 | __system___string_concat
05ee8     07 5A 05 F6 | 	mov	COUNT_, #7
05eec     B0 00 A0 FD | 	call	#pushregs_
05ef0     2E 6B 02 F6 | 	mov	local01, arg01
05ef4     2F 6D 02 F6 | 	mov	local02, arg02
05ef8     35 5D 02 F6 | 	mov	arg01, local01
05efc     00 6E 06 F6 | 	mov	local03, #0
05f00     0C A1 9F FE | 	loc	pa,	#(@LR__0282-@LR__0281)
05f04     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f08                 | LR__0281
05f08     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f0c     01 6E 06 51 |  if_ne	add	local03, #1
05f10     01 5C 06 51 |  if_ne	add	arg01, #1
05f14     F0 FF 9F 5D |  if_ne	jmp	#LR__0281
05f18                 | LR__0282
05f18     37 73 02 F6 | 	mov	local05, local03
05f1c     36 5D 02 F6 | 	mov	arg01, local02
05f20     00 6E 06 F6 | 	mov	local03, #0
05f24     E8 A0 9F FE | 	loc	pa,	#(@LR__0284-@LR__0283)
05f28     93 00 A0 FD | 	call	#FCACHE_LOAD_
05f2c                 | LR__0283
05f2c     2E 71 CA FA | 	rdbyte	local04, arg01 wz
05f30     01 6E 06 51 |  if_ne	add	local03, #1
05f34     01 5C 06 51 |  if_ne	add	arg01, #1
05f38     F0 FF 9F 5D |  if_ne	jmp	#LR__0283
05f3c                 | LR__0284
05f3c     37 2B 02 F6 | 	mov	result1, local03
05f40     15 75 02 F6 | 	mov	local06, result1
05f44     39 5D 02 F6 | 	mov	arg01, local05
05f48     3A 5D 02 F1 | 	add	arg01, local06
05f4c     01 5C 06 F1 | 	add	arg01, #1
05f50     90 0B B0 FD | 	call	#__system___gc_alloc_managed
05f54     15 77 0A F6 | 	mov	local07, result1 wz
05f58     28 00 90 AD |  if_e	jmp	#LR__0285
05f5c     3B 5D 02 F6 | 	mov	arg01, local07
05f60     35 5F 02 F6 | 	mov	arg02, local01
05f64     39 61 02 F6 | 	mov	arg03, local05
05f68     DC FD BF FD | 	call	#__system____builtin_memmove
05f6c     3B 5D 02 F6 | 	mov	arg01, local07
05f70     39 5D 02 F1 | 	add	arg01, local05
05f74     01 74 06 F1 | 	add	local06, #1
05f78     36 5F 02 F6 | 	mov	arg02, local02
05f7c     3A 61 02 F6 | 	mov	arg03, local06
05f80     C4 FD BF FD | 	call	#__system____builtin_memmove
05f84                 | LR__0285
05f84     3B 2B 02 F6 | 	mov	result1, local07
05f88     AF F0 03 F6 | 	mov	ptra, fp
05f8c     BF 00 A0 FD | 	call	#popregs_
05f90                 | __system___string_concat_ret
05f90     2D 00 64 FD | 	ret
05f94                 | 
05f94                 | __system___tx
05f94     02 5A 05 F6 | 	mov	COUNT_, #2
05f98     B0 00 A0 FD | 	call	#pushregs_
05f9c     2E 6B 02 F6 | 	mov	local01, arg01
05fa0     0A 6A 0E F2 | 	cmp	local01, #10 wz
05fa4     20 00 90 5D |  if_ne	jmp	#LR__0286
05fa8     08 14 06 F1 | 	add	ptr___system__dat__, #8
05fac     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
05fb0     08 14 86 F1 | 	sub	ptr___system__dat__, #8
05fb4     02 6C CE F7 | 	test	local02, #2 wz
05fb8     0C 00 90 AD |  if_e	jmp	#LR__0286
05fbc     0D 6C 06 F6 | 	mov	local02, #13
05fc0     0D 5C 06 F6 | 	mov	arg01, #13
05fc4     4C FC BF FD | 	call	#__system___txraw
05fc8                 | LR__0286
05fc8     35 5D 02 F6 | 	mov	arg01, local01
05fcc     44 FC BF FD | 	call	#__system___txraw
05fd0     AF F0 03 F6 | 	mov	ptra, fp
05fd4     BF 00 A0 FD | 	call	#popregs_
05fd8                 | __system___tx_ret
05fd8     2D 00 64 FD | 	ret
05fdc                 | 
05fdc                 | __system___rx
05fdc     02 5A 05 F6 | 	mov	COUNT_, #2
05fe0     B0 00 A0 FD | 	call	#pushregs_
05fe4                 | LR__0287
05fe4     00 5C 06 F6 | 	mov	arg01, #0
05fe8     70 FC BF FD | 	call	#__system___rxraw
05fec     15 6B 02 F6 | 	mov	local01, result1
05ff0     FF FF 7F FF 
05ff4     FF 6B 0E F2 | 	cmp	local01, ##-1 wz
05ff8     E8 FF 9F AD |  if_e	jmp	#LR__0287
05ffc     0D 6A 0E F2 | 	cmp	local01, #13 wz
06000     14 00 90 5D |  if_ne	jmp	#LR__0288
06004     08 14 06 F1 | 	add	ptr___system__dat__, #8
06008     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
0600c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06010     02 6C CE F7 | 	test	local02, #2 wz
06014     0A 6A 06 56 |  if_ne	mov	local01, #10
06018                 | LR__0288
06018     08 14 06 F1 | 	add	ptr___system__dat__, #8
0601c     0A 6D 02 FB | 	rdlong	local02, ptr___system__dat__
06020     08 14 86 F1 | 	sub	ptr___system__dat__, #8
06024     01 6C CE F7 | 	test	local02, #1 wz
06028     1C 00 90 AD |  if_e	jmp	#LR__0291
0602c     7F 6A 0E F2 | 	cmp	local01, #127 wz
06030     0C 00 90 5D |  if_ne	jmp	#LR__0289
06034     08 5C 06 F6 | 	mov	arg01, #8
06038     58 FF BF FD | 	call	#__system___tx
0603c     08 00 90 FD | 	jmp	#LR__0290
06040                 | LR__0289
06040     35 5D 02 F6 | 	mov	arg01, local01
06044     4C FF BF FD | 	call	#__system___tx
06048                 | LR__0290
06048                 | LR__0291
06048     35 2B 02 F6 | 	mov	result1, local01
0604c     AF F0 03 F6 | 	mov	ptra, fp
06050     BF 00 A0 FD | 	call	#popregs_
06054                 | __system___rx_ret
06054     2D 00 64 FD | 	ret
06058                 | 
06058                 | __system___pinread
06058     20 5C CE F7 | 	test	arg01, #32 wz
0605c     FF 31 02 56 |  if_ne	mov	_var01, inb
06060     FE 31 02 A6 |  if_e	mov	_var01, ina
06064     18 2B 02 F6 | 	mov	result1, _var01
06068     2E 2B 42 F0 | 	shr	result1, arg01
0606c     06 5C 46 F0 | 	shr	arg01, #6
06070     2E 2B 42 F7 | 	zerox	result1, arg01
06074                 | __system___pinread_ret
06074     2D 00 64 FD | 	ret
06078                 | 
06078                 | __system___waitms
06078     03 5A 05 F6 | 	mov	COUNT_, #3
0607c     B0 00 A0 FD | 	call	#pushregs_
06080     2E 6B 02 F6 | 	mov	local01, arg01
06084     14 6C 06 FB | 	rdlong	local02, #20
06088     8C 9F 9F FE | 	loc	pa,	#(@LR__0293-@LR__0292)
0608c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06090                 | LR__0292
06090     01 00 00 FF 
06094     E8 6B 5E F2 | 	cmps	local01, ##1000 wcz
06098     1F 6C 62 1D |  if_a	waitx	local02
0609c     01 00 00 1F 
060a0     E8 6B 86 11 |  if_a	sub	local01, ##1000
060a4     E8 FF 9F 1D |  if_a	jmp	#LR__0292
060a8                 | LR__0293
060a8     0C 14 06 F1 | 	add	ptr___system__dat__, #12
060ac     0A 6F 0A FB | 	rdlong	local03, ptr___system__dat__ wz
060b0     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
060b4     20 00 90 5D |  if_ne	jmp	#LR__0294
060b8     36 0B 03 F6 | 	mov	muldiva_, local02
060bc     01 00 00 FF 
060c0     E8 0D 07 F6 | 	mov	muldivb_, ##1000
060c4     CC 00 A0 FD | 	call	#unsdivide_
060c8     86 6F 02 F6 | 	mov	local03, muldivb_
060cc     0C 14 06 F1 | 	add	ptr___system__dat__, #12
060d0     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
060d4     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
060d8                 | LR__0294
060d8     00 6A 5E F2 | 	cmps	local01, #0 wcz
060dc     37 6B 02 1D |  if_a	qmul	local01, local03
060e0     18 5C 62 1D |  if_a	getqx	arg01
060e4     1F 5C 62 1D |  if_a	waitx	arg01
060e8     AF F0 03 F6 | 	mov	ptra, fp
060ec     BF 00 A0 FD | 	call	#popregs_
060f0                 | __system___waitms_ret
060f0     2D 00 64 FD | 	ret
060f4                 | 
060f4                 | __system___waitus
060f4     02 5A 05 F6 | 	mov	COUNT_, #2
060f8     B0 00 A0 FD | 	call	#pushregs_
060fc     2E 6B 02 F6 | 	mov	local01, arg01
06100     10 14 06 F1 | 	add	ptr___system__dat__, #16
06104     0A 6D 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06108     10 14 86 F1 | 	sub	ptr___system__dat__, #16
0610c     20 00 90 5D |  if_ne	jmp	#LR__0295
06110     14 0A 07 FB | 	rdlong	muldiva_, #20
06114     A1 07 00 FF 
06118     40 0C 07 F6 | 	mov	muldivb_, ##1000000
0611c     CC 00 A0 FD | 	call	#unsdivide_
06120     86 6D 02 F6 | 	mov	local02, muldivb_
06124     10 14 06 F1 | 	add	ptr___system__dat__, #16
06128     0A 0D 63 FC | 	wrlong	muldivb_, ptr___system__dat__
0612c     10 14 86 F1 | 	sub	ptr___system__dat__, #16
06130                 | LR__0295
06130     36 6B 02 FD | 	qmul	local01, local02
06134     18 5C 62 FD | 	getqx	arg01
06138     1F 5C 62 FD | 	waitx	arg01
0613c     AF F0 03 F6 | 	mov	ptra, fp
06140     BF 00 A0 FD | 	call	#popregs_
06144                 | __system___waitus_ret
06144     2D 00 64 FD | 	ret
06148                 | 
06148                 | __system___basic_open
06148     05 5A 05 F6 | 	mov	COUNT_, #5
0614c     B0 00 A0 FD | 	call	#pushregs_
06150     2F 6B 02 F6 | 	mov	local01, arg02
06154     30 6D 02 F6 | 	mov	local02, arg03
06158     31 6F 02 F6 | 	mov	local03, arg04
0615c     88 11 B0 FD | 	call	#__system____getftab
06160     15 71 0A F6 | 	mov	local04, result1 wz
06164     18 00 90 5D |  if_ne	jmp	#LR__0296
06168     03 5D 02 F6 | 	mov	arg01, abortchain
0616c     0C 5E 06 F6 | 	mov	arg02, #12
06170     01 60 06 F6 | 	mov	arg03, #1
06174     F0 00 A0 FD | 	call	#__longjmp
06178     01 2A 66 F6 | 	neg	result1, #1
0617c     70 00 90 FD | 	jmp	#LR__0300
06180                 | LR__0296
06180     00 6A 0E F2 | 	cmp	local01, #0 wz
06184     48 00 90 AD |  if_e	jmp	#LR__0298
06188     04 5C 06 F6 | 	mov	arg01, #4
0618c     54 09 B0 FD | 	call	#__system___gc_alloc_managed
06190     15 73 0A F6 | 	mov	local05, result1 wz
06194     18 00 90 5D |  if_ne	jmp	#LR__0297
06198     03 5D 02 F6 | 	mov	arg01, abortchain
0619c     07 5E 06 F6 | 	mov	arg02, #7
061a0     01 60 06 F6 | 	mov	arg03, #1
061a4     F0 00 A0 FD | 	call	#__longjmp
061a8     01 2A 66 F6 | 	neg	result1, #1
061ac     40 00 90 FD | 	jmp	#LR__0300
061b0                 | LR__0297
061b0     39 6B 62 FC | 	wrlong	local01, local05
061b4     08 5F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
061b8     39 5D 02 F6 | 	mov	arg01, local05
061bc     B0 FC BF FD | 	call	#__system___make_methodptr
061c0     18 70 06 F1 | 	add	local04, #24
061c4     38 2B 62 FC | 	wrlong	result1, local04
061c8     18 70 86 F1 | 	sub	local04, #24
061cc     0C 00 90 FD | 	jmp	#LR__0299
061d0                 | LR__0298
061d0     18 70 06 F1 | 	add	local04, #24
061d4     38 6B 62 FC | 	wrlong	local01, local04
061d8     18 70 86 F1 | 	sub	local04, #24
061dc                 | LR__0299
061dc     1C 70 06 F1 | 	add	local04, #28
061e0     38 6D 62 FC | 	wrlong	local02, local04
061e4     04 70 06 F1 | 	add	local04, #4
061e8     38 6F 62 FC | 	wrlong	local03, local04
061ec     00 2A 06 F6 | 	mov	result1, #0
061f0                 | LR__0300
061f0     AF F0 03 F6 | 	mov	ptra, fp
061f4     BF 00 A0 FD | 	call	#popregs_
061f8                 | __system___basic_open_ret
061f8     2D 00 64 FD | 	ret
061fc                 | 
061fc                 | __system___basic_print_char
061fc     05 5A 05 F6 | 	mov	COUNT_, #5
06200     B0 00 A0 FD | 	call	#pushregs_
06204     2F 6B 02 F6 | 	mov	local01, arg02
06208     A0 12 B0 FD | 	call	#__system___gettxfunc
0620c     15 6D 0A F6 | 	mov	local02, result1 wz
06210     00 2A 06 A6 |  if_e	mov	result1, #0
06214     24 00 90 AD |  if_e	jmp	#LR__0301
06218     36 6F 02 FB | 	rdlong	local03, local02
0621c     04 6C 06 F1 | 	add	local02, #4
06220     36 71 02 FB | 	rdlong	local04, local02
06224     35 5D 02 F6 | 	mov	arg01, local01
06228     07 73 02 F6 | 	mov	local05, objptr
0622c     37 0F 02 F6 | 	mov	objptr, local03
06230     2D 70 62 FD | 	call	local04
06234     39 0F 02 F6 | 	mov	objptr, local05
06238     01 2A 06 F6 | 	mov	result1, #1
0623c                 | LR__0301
0623c     AF F0 03 F6 | 	mov	ptra, fp
06240     BF 00 A0 FD | 	call	#popregs_
06244                 | __system___basic_print_char_ret
06244     2D 00 64 FD | 	ret
06248                 | 
06248                 | __system___basic_print_string
06248     03 5A 05 F6 | 	mov	COUNT_, #3
0624c     B0 00 A0 FD | 	call	#pushregs_
06250     2F 6B 02 F6 | 	mov	local01, arg02
06254     30 6D 02 F6 | 	mov	local02, arg03
06258     50 12 B0 FD | 	call	#__system___gettxfunc
0625c     15 6F 0A F6 | 	mov	local03, result1 wz
06260     00 2A 06 A6 |  if_e	mov	result1, #0
06264     1C 00 90 AD |  if_e	jmp	#LR__0302
06268     00 6A 0E F2 | 	cmp	local01, #0 wz
0626c     00 2A 06 A6 |  if_e	mov	result1, #0
06270     10 00 90 AD |  if_e	jmp	#LR__0302
06274     37 5D 02 F6 | 	mov	arg01, local03
06278     36 5F 02 F6 | 	mov	arg02, local02
0627c     35 61 02 F6 | 	mov	arg03, local01
06280     B0 00 B0 FD | 	call	#__system___fmtstr
06284                 | LR__0302
06284     AF F0 03 F6 | 	mov	ptra, fp
06288     BF 00 A0 FD | 	call	#popregs_
0628c                 | __system___basic_print_string_ret
0628c     2D 00 64 FD | 	ret
06290                 | 
06290                 | __system___basic_print_integer
06290     04 5A 05 F6 | 	mov	COUNT_, #4
06294     B0 00 A0 FD | 	call	#pushregs_
06298     2F 6B 02 F6 | 	mov	local01, arg02
0629c     30 6D 02 F6 | 	mov	local02, arg03
062a0     31 6F 02 F6 | 	mov	local03, arg04
062a4     04 12 B0 FD | 	call	#__system___gettxfunc
062a8     15 71 0A F6 | 	mov	local04, result1 wz
062ac     00 2A 06 A6 |  if_e	mov	result1, #0
062b0     14 00 90 AD |  if_e	jmp	#LR__0303
062b4     38 5D 02 F6 | 	mov	arg01, local04
062b8     36 5F 02 F6 | 	mov	arg02, local02
062bc     35 61 02 F6 | 	mov	arg03, local01
062c0     37 63 02 F6 | 	mov	arg04, local03
062c4     60 01 B0 FD | 	call	#__system___fmtnum
062c8                 | LR__0303
062c8     AF F0 03 F6 | 	mov	ptra, fp
062cc     BF 00 A0 FD | 	call	#popregs_
062d0                 | __system___basic_print_integer_ret
062d0     2D 00 64 FD | 	ret
062d4                 | 
062d4                 | __system___fmtchar
062d4     00 5A 05 F6 | 	mov	COUNT_, #0
062d8     B0 00 A0 FD | 	call	#pushregs_
062dc     18 F0 07 F1 | 	add	ptra, #24
062e0     04 5E 05 F1 | 	add	fp, #4
062e4     AF 5C 62 FC | 	wrlong	arg01, fp
062e8     04 5E 05 F1 | 	add	fp, #4
062ec     AF 5E 62 FC | 	wrlong	arg02, fp
062f0     04 5E 05 F1 | 	add	fp, #4
062f4     AF 60 62 FC | 	wrlong	arg03, fp
062f8     04 5E 05 F1 | 	add	fp, #4
062fc     AF 60 42 FC | 	wrbyte	arg03, fp
06300     01 5E 05 F1 | 	add	fp, #1
06304     AF 00 48 FC | 	wrbyte	#0, fp
06308     01 5E 85 F1 | 	sub	fp, #1
0630c     AF 60 02 F6 | 	mov	arg03, fp
06310     0C 5E 85 F1 | 	sub	fp, #12
06314     AF 5C 02 FB | 	rdlong	arg01, fp
06318     04 5E 05 F1 | 	add	fp, #4
0631c     AF 5E 02 FB | 	rdlong	arg02, fp
06320     08 5E 85 F1 | 	sub	fp, #8
06324     0C 00 B0 FD | 	call	#__system___fmtstr
06328     AF F0 03 F6 | 	mov	ptra, fp
0632c     BF 00 A0 FD | 	call	#popregs_
06330                 | __system___fmtchar_ret
06330     2D 00 64 FD | 	ret
06334                 | 
06334                 | __system___fmtstr
06334     0E 5A 05 F6 | 	mov	COUNT_, #14
06338     B0 00 A0 FD | 	call	#pushregs_
0633c     2E 6B 02 F6 | 	mov	local01, arg01
06340     2F 6D 02 F6 | 	mov	local02, arg02
06344     30 6F 02 F6 | 	mov	local03, arg03
06348     36 71 02 F6 | 	mov	local04, local02
0634c     FF 70 06 F5 | 	and	local04, #255
06350     37 5D 02 F6 | 	mov	arg01, local03
06354     00 72 06 F6 | 	mov	local05, #0
06358     B4 9C 9F FE | 	loc	pa,	#(@LR__0305-@LR__0304)
0635c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06360                 | LR__0304
06360     2E 75 CA FA | 	rdbyte	local06, arg01 wz
06364     01 72 06 51 |  if_ne	add	local05, #1
06368     01 5C 06 51 |  if_ne	add	arg01, #1
0636c     F0 FF 9F 5D |  if_ne	jmp	#LR__0304
06370                 | LR__0305
06370     39 2B 02 F6 | 	mov	result1, local05
06374     15 77 02 F6 | 	mov	local07, result1
06378     00 70 0E F2 | 	cmp	local04, #0 wz
0637c     04 00 90 AD |  if_e	jmp	#LR__0306
06380     38 77 7A F3 | 	fles	local07, local04 wcz
06384                 | LR__0306
06384     35 5D 02 F6 | 	mov	arg01, local01
06388     36 5F 02 F6 | 	mov	arg02, local02
0638c     3B 61 02 F6 | 	mov	arg03, local07
06390     02 62 06 F6 | 	mov	arg04, #2
06394     C8 0F B0 FD | 	call	#__system___fmtpad
06398     15 79 02 F6 | 	mov	local08, result1
0639c     00 78 5E F2 | 	cmps	local08, #0 wcz
063a0     3C 2B 02 C6 |  if_b	mov	result1, local08
063a4     74 00 90 CD |  if_b	jmp	#LR__0309
063a8     00 76 5E F2 | 	cmps	local07, #0 wcz
063ac     44 00 90 ED |  if_be	jmp	#LR__0308
063b0     3B 7B 02 F6 | 	mov	local09, local07
063b4                 | LR__0307
063b4     35 7D 02 F6 | 	mov	local10, local01
063b8     3E 7F 02 FB | 	rdlong	local11, local10
063bc     04 7C 06 F1 | 	add	local10, #4
063c0     3E 81 02 FB | 	rdlong	local12, local10
063c4     37 5D C2 FA | 	rdbyte	arg01, local03
063c8     07 83 02 F6 | 	mov	local13, objptr
063cc     3F 0F 02 F6 | 	mov	objptr, local11
063d0     01 6E 06 F1 | 	add	local03, #1
063d4     2D 80 62 FD | 	call	local12
063d8     41 0F 02 F6 | 	mov	objptr, local13
063dc     15 85 02 F6 | 	mov	local14, result1
063e0     00 84 5E F2 | 	cmps	local14, #0 wcz
063e4     42 2B 02 C6 |  if_b	mov	result1, local14
063e8     30 00 90 CD |  if_b	jmp	#LR__0309
063ec     42 79 02 F1 | 	add	local08, local14
063f0     F0 7B 6E FB | 	djnz	local09, #LR__0307
063f4                 | LR__0308
063f4     35 5D 02 F6 | 	mov	arg01, local01
063f8     36 5F 02 F6 | 	mov	arg02, local02
063fc     3B 61 02 F6 | 	mov	arg03, local07
06400     01 62 06 F6 | 	mov	arg04, #1
06404     58 0F B0 FD | 	call	#__system___fmtpad
06408     15 85 02 F6 | 	mov	local14, result1
0640c     00 84 5E F2 | 	cmps	local14, #0 wcz
06410     42 2B 02 C6 |  if_b	mov	result1, local14
06414     42 79 02 31 |  if_ae	add	local08, local14
06418     3C 2B 02 36 |  if_ae	mov	result1, local08
0641c                 | LR__0309
0641c     AF F0 03 F6 | 	mov	ptra, fp
06420     BF 00 A0 FD | 	call	#popregs_
06424                 | __system___fmtstr_ret
06424     2D 00 64 FD | 	ret
06428                 | 
06428                 | __system___fmtnum
06428     07 5A 05 F6 | 	mov	COUNT_, #7
0642c     B0 00 A0 FD | 	call	#pushregs_
06430     78 F0 07 F1 | 	add	ptra, #120
06434     04 5E 05 F1 | 	add	fp, #4
06438     AF 5C 62 FC | 	wrlong	arg01, fp
0643c     04 5E 05 F1 | 	add	fp, #4
06440     AF 5E 62 FC | 	wrlong	arg02, fp
06444     04 5E 05 F1 | 	add	fp, #4
06448     AF 60 62 FC | 	wrlong	arg03, fp
0644c     04 5E 05 F1 | 	add	fp, #4
06450     AF 62 62 FC | 	wrlong	arg04, fp
06454     04 5E 05 F1 | 	add	fp, #4
06458     AF 6A 02 F6 | 	mov	local01, fp
0645c     44 5E 05 F1 | 	add	fp, #68
06460     AF 6A 62 FC | 	wrlong	local01, fp
06464     04 5E 05 F1 | 	add	fp, #4
06468     AF 00 68 FC | 	wrlong	#0, fp
0646c     54 5E 85 F1 | 	sub	fp, #84
06470     AF 6A 02 FB | 	rdlong	local01, fp
06474     10 6A 46 F0 | 	shr	local01, #16
06478     3F 6A 06 F5 | 	and	local01, #63
0647c     58 5E 05 F1 | 	add	fp, #88
06480     AF 6A 62 FC | 	wrlong	local01, fp
06484     58 5E 85 F1 | 	sub	fp, #88
06488     AF 6A 02 FB | 	rdlong	local01, fp
0648c     FF 6A 06 F5 | 	and	local01, #255
06490     5C 5E 05 F1 | 	add	fp, #92
06494     AF 6A 62 FC | 	wrlong	local01, fp
06498     5C 5E 85 F1 | 	sub	fp, #92
0649c     AF 6A 02 FB | 	rdlong	local01, fp
064a0     1A 6A 46 F0 | 	shr	local01, #26
064a4     03 6A 06 F5 | 	and	local01, #3
064a8     60 5E 05 F1 | 	add	fp, #96
064ac     AF 6A 62 FC | 	wrlong	local01, fp
064b0     08 5E 85 F1 | 	sub	fp, #8
064b4     AF 6A 02 FB | 	rdlong	local01, fp
064b8     60 5E 85 F1 | 	sub	fp, #96
064bc     00 6A 5E F2 | 	cmps	local01, #0 wcz
064c0     14 00 90 ED |  if_be	jmp	#LR__0310
064c4     60 5E 05 F1 | 	add	fp, #96
064c8     AF 6A 02 FB | 	rdlong	local01, fp
064cc     01 6A 86 F1 | 	sub	local01, #1
064d0     AF 6A 62 FC | 	wrlong	local01, fp
064d4     60 5E 85 F1 | 	sub	fp, #96
064d8                 | LR__0310
064d8     64 5E 05 F1 | 	add	fp, #100
064dc     AF 6C 02 FB | 	rdlong	local02, fp
064e0     64 5E 85 F1 | 	sub	fp, #100
064e4     40 6C 5E F2 | 	cmps	local02, #64 wcz
064e8     14 00 90 1D |  if_a	jmp	#LR__0311
064ec     64 5E 05 F1 | 	add	fp, #100
064f0     AF 6E 02 FB | 	rdlong	local03, fp
064f4     64 5E 85 F1 | 	sub	fp, #100
064f8     37 71 0A F6 | 	mov	local04, local03 wz
064fc     0C 00 90 5D |  if_ne	jmp	#LR__0312
06500                 | LR__0311
06500     64 5E 05 F1 | 	add	fp, #100
06504     AF 80 68 FC | 	wrlong	#64, fp
06508     64 5E 85 F1 | 	sub	fp, #100
0650c                 | LR__0312
0650c     68 5E 05 F1 | 	add	fp, #104
06510     AF 6A 02 FB | 	rdlong	local01, fp
06514     68 5E 85 F1 | 	sub	fp, #104
06518     03 6A 0E F2 | 	cmp	local01, #3 wz
0651c     10 00 90 5D |  if_ne	jmp	#LR__0313
06520     68 5E 05 F1 | 	add	fp, #104
06524     AF 00 68 FC | 	wrlong	#0, fp
06528     68 5E 85 F1 | 	sub	fp, #104
0652c     30 00 90 FD | 	jmp	#LR__0315
06530                 | LR__0313
06530     0C 5E 05 F1 | 	add	fp, #12
06534     AF 6A 02 FB | 	rdlong	local01, fp
06538     0C 5E 85 F1 | 	sub	fp, #12
0653c     00 6A 5E F2 | 	cmps	local01, #0 wcz
06540     1C 00 90 3D |  if_ae	jmp	#LR__0314
06544     68 5E 05 F1 | 	add	fp, #104
06548     AF 08 68 FC | 	wrlong	#4, fp
0654c     5C 5E 85 F1 | 	sub	fp, #92
06550     AF 6A 02 FB | 	rdlong	local01, fp
06554     35 6B 62 F6 | 	neg	local01, local01
06558     AF 6A 62 FC | 	wrlong	local01, fp
0655c     0C 5E 85 F1 | 	sub	fp, #12
06560                 | LR__0314
06560                 | LR__0315
06560     68 5E 05 F1 | 	add	fp, #104
06564     AF 6A 0A FB | 	rdlong	local01, fp wz
06568     68 5E 85 F1 | 	sub	fp, #104
0656c     EC 00 90 AD |  if_e	jmp	#LR__0322
06570     5C 5E 05 F1 | 	add	fp, #92
06574     AF 70 02 FB | 	rdlong	local04, fp
06578     01 70 06 F1 | 	add	local04, #1
0657c     AF 70 62 FC | 	wrlong	local04, fp
06580     04 5E 05 F1 | 	add	fp, #4
06584     AF 6A 02 FB | 	rdlong	local01, fp
06588     04 5E 05 F1 | 	add	fp, #4
0658c     AF 70 02 FB | 	rdlong	local04, fp
06590     64 5E 85 F1 | 	sub	fp, #100
06594     38 6B 0A F2 | 	cmp	local01, local04 wz
06598     3C 00 90 5D |  if_ne	jmp	#LR__0317
0659c     60 5E 05 F1 | 	add	fp, #96
065a0     AF 70 02 FB | 	rdlong	local04, fp
065a4     01 70 86 F1 | 	sub	local04, #1
065a8     AF 70 62 FC | 	wrlong	local04, fp
065ac     AF 6A 0A FB | 	rdlong	local01, fp wz
065b0     60 5E 85 F1 | 	sub	fp, #96
065b4     20 00 90 5D |  if_ne	jmp	#LR__0316
065b8     04 5E 05 F1 | 	add	fp, #4
065bc     AF 5C 02 FB | 	rdlong	arg01, fp
065c0     04 5E 05 F1 | 	add	fp, #4
065c4     AF 5E 02 FB | 	rdlong	arg02, fp
065c8     08 5E 85 F1 | 	sub	fp, #8
065cc     23 60 06 F6 | 	mov	arg03, #35
065d0     00 FD BF FD | 	call	#__system___fmtchar
065d4     70 01 90 FD | 	jmp	#LR__0327
065d8                 | LR__0316
065d8                 | LR__0317
065d8     68 5E 05 F1 | 	add	fp, #104
065dc     AF 6A 02 FB | 	rdlong	local01, fp
065e0     68 5E 85 F1 | 	sub	fp, #104
065e4     02 6A 0E F2 | 	cmp	local01, #2 wz
065e8     20 00 90 5D |  if_ne	jmp	#LR__0318
065ec     58 5E 05 F1 | 	add	fp, #88
065f0     AF 6A 02 FB | 	rdlong	local01, fp
065f4     35 71 02 F6 | 	mov	local04, local01
065f8     01 70 06 F1 | 	add	local04, #1
065fc     AF 70 62 FC | 	wrlong	local04, fp
06600     58 5E 85 F1 | 	sub	fp, #88
06604     35 41 48 FC | 	wrbyte	#32, local01
06608     50 00 90 FD | 	jmp	#LR__0321
0660c                 | LR__0318
0660c     68 5E 05 F1 | 	add	fp, #104
06610     AF 6A 02 FB | 	rdlong	local01, fp
06614     68 5E 85 F1 | 	sub	fp, #104
06618     04 6A 0E F2 | 	cmp	local01, #4 wz
0661c     20 00 90 5D |  if_ne	jmp	#LR__0319
06620     58 5E 05 F1 | 	add	fp, #88
06624     AF 6A 02 FB | 	rdlong	local01, fp
06628     35 71 02 F6 | 	mov	local04, local01
0662c     01 70 06 F1 | 	add	local04, #1
06630     AF 70 62 FC | 	wrlong	local04, fp
06634     58 5E 85 F1 | 	sub	fp, #88
06638     35 5B 48 FC | 	wrbyte	#45, local01
0663c     1C 00 90 FD | 	jmp	#LR__0320
06640                 | LR__0319
06640     58 5E 05 F1 | 	add	fp, #88
06644     AF 6A 02 FB | 	rdlong	local01, fp
06648     35 71 02 F6 | 	mov	local04, local01
0664c     01 70 06 F1 | 	add	local04, #1
06650     AF 70 62 FC | 	wrlong	local04, fp
06654     58 5E 85 F1 | 	sub	fp, #88
06658     35 57 48 FC | 	wrbyte	#43, local01
0665c                 | LR__0320
0665c                 | LR__0321
0665c                 | LR__0322
0665c     58 5E 05 F1 | 	add	fp, #88
06660     AF 5C 02 FB | 	rdlong	arg01, fp
06664     4C 5E 85 F1 | 	sub	fp, #76
06668     AF 5E 02 FB | 	rdlong	arg02, fp
0666c     04 5E 05 F1 | 	add	fp, #4
06670     AF 60 02 FB | 	rdlong	arg03, fp
06674     50 5E 05 F1 | 	add	fp, #80
06678     AF 62 02 FB | 	rdlong	arg04, fp
0667c     00 72 06 F6 | 	mov	local05, #0
06680     58 5E 85 F1 | 	sub	fp, #88
06684     AF 74 02 FB | 	rdlong	local06, fp
06688     08 5E 85 F1 | 	sub	fp, #8
0668c     1D 74 2E F4 | 	testbn	local06, #29 wz
06690     01 72 06 56 |  if_ne	mov	local05, #1
06694     39 65 02 F6 | 	mov	arg05, local05
06698     84 0D B0 FD | 	call	#__system___uitoa
0669c     15 77 02 F6 | 	mov	local07, result1
066a0     5C 5E 05 F1 | 	add	fp, #92
066a4     AF 6A 02 FB | 	rdlong	local01, fp
066a8     3B 6B 02 F1 | 	add	local01, local07
066ac     AF 6A 62 FC | 	wrlong	local01, fp
066b0     08 5E 05 F1 | 	add	fp, #8
066b4     AF 70 02 FB | 	rdlong	local04, fp
066b8     64 5E 85 F1 | 	sub	fp, #100
066bc     38 6B 5A F2 | 	cmps	local01, local04 wcz
066c0     64 00 90 ED |  if_be	jmp	#LR__0326
066c4     78 99 9F FE | 	loc	pa,	#(@LR__0324-@LR__0323)
066c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
066cc                 | LR__0323
066cc     64 5E 05 F1 | 	add	fp, #100
066d0     AF 6A 02 FB | 	rdlong	local01, fp
066d4     35 71 02 F6 | 	mov	local04, local01
066d8     01 70 86 F1 | 	sub	local04, #1
066dc     AF 70 62 FC | 	wrlong	local04, fp
066e0     64 5E 85 F1 | 	sub	fp, #100
066e4     00 6A 5E F2 | 	cmps	local01, #0 wcz
066e8     20 00 90 ED |  if_be	jmp	#LR__0325
066ec     58 5E 05 F1 | 	add	fp, #88
066f0     AF 6A 02 FB | 	rdlong	local01, fp
066f4     35 71 02 F6 | 	mov	local04, local01
066f8     01 70 06 F1 | 	add	local04, #1
066fc     AF 70 62 FC | 	wrlong	local04, fp
06700     58 5E 85 F1 | 	sub	fp, #88
06704     35 47 48 FC | 	wrbyte	#35, local01
06708     C0 FF 9F FD | 	jmp	#LR__0323
0670c                 | LR__0324
0670c                 | LR__0325
0670c     58 5E 05 F1 | 	add	fp, #88
06710     AF 6A 02 FB | 	rdlong	local01, fp
06714     35 71 02 F6 | 	mov	local04, local01
06718     01 70 06 F1 | 	add	local04, #1
0671c     AF 70 62 FC | 	wrlong	local04, fp
06720     58 5E 85 F1 | 	sub	fp, #88
06724     35 01 48 FC | 	wrbyte	#0, local01
06728                 | LR__0326
06728     14 5E 05 F1 | 	add	fp, #20
0672c     AF 60 02 F6 | 	mov	arg03, fp
06730     10 5E 85 F1 | 	sub	fp, #16
06734     AF 5C 02 FB | 	rdlong	arg01, fp
06738     04 5E 05 F1 | 	add	fp, #4
0673c     AF 5E 02 FB | 	rdlong	arg02, fp
06740     08 5E 85 F1 | 	sub	fp, #8
06744     EC FB BF FD | 	call	#__system___fmtstr
06748                 | LR__0327
06748     AF F0 03 F6 | 	mov	ptra, fp
0674c     BF 00 A0 FD | 	call	#popregs_
06750                 | __system___fmtnum_ret
06750     2D 00 64 FD | 	ret
06754                 | 
06754                 | __system__String_S
06754     06 5A 05 F6 | 	mov	COUNT_, #6
06758     B0 00 A0 FD | 	call	#pushregs_
0675c     2E 6B 02 F6 | 	mov	local01, arg01
06760     2F 6D 02 F6 | 	mov	local02, arg02
06764     36 5D 02 F6 | 	mov	arg01, local02
06768     00 6E 06 F6 | 	mov	local03, #0
0676c     A0 98 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
06770     93 00 A0 FD | 	call	#FCACHE_LOAD_
06774                 | LR__0328
06774     2E 71 CA FA | 	rdbyte	local04, arg01 wz
06778     01 6E 06 51 |  if_ne	add	local03, #1
0677c     01 5C 06 51 |  if_ne	add	arg01, #1
06780     F0 FF 9F 5D |  if_ne	jmp	#LR__0328
06784                 | LR__0329
06784     37 2B 0A F6 | 	mov	result1, local03 wz
06788     40 00 00 AF 
0678c     5E 2A 06 A6 |  if_e	mov	result1, ##@LR__0446
06790     50 00 90 AD |  if_e	jmp	#LR__0331
06794     00 6A 5E F2 | 	cmps	local01, #0 wcz
06798     40 00 00 EF 
0679c     5F 2A 06 E6 |  if_be	mov	result1, ##@LR__0447
067a0     40 00 90 ED |  if_be	jmp	#LR__0331
067a4     35 73 02 F6 | 	mov	local05, local01
067a8     01 72 06 F1 | 	add	local05, #1
067ac     39 5D 02 F6 | 	mov	arg01, local05
067b0     01 5C 06 F1 | 	add	arg01, #1
067b4     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
067b8     15 75 0A F6 | 	mov	local06, result1 wz
067bc     20 00 90 AD |  if_e	jmp	#LR__0330
067c0     36 5F C2 FA | 	rdbyte	arg02, local02
067c4     3A 5D 02 F6 | 	mov	arg01, local06
067c8     35 61 02 F6 | 	mov	arg03, local01
067cc     A0 00 A0 FD | 	call	#\builtin_bytefill_
067d0     3A 73 02 F1 | 	add	local05, local06
067d4     39 01 48 FC | 	wrbyte	#0, local05
067d8     3A 2B 02 F6 | 	mov	result1, local06
067dc     04 00 90 FD | 	jmp	#LR__0331
067e0                 | LR__0330
067e0     3A 2B 02 F6 | 	mov	result1, local06
067e4                 | LR__0331
067e4     AF F0 03 F6 | 	mov	ptra, fp
067e8     BF 00 A0 FD | 	call	#popregs_
067ec                 | __system__String_S_ret
067ec     2D 00 64 FD | 	ret
067f0                 | 
067f0                 | __system___gc_ptrs
067f0     0A 5A 05 F6 | 	mov	COUNT_, #10
067f4     B0 00 A0 FD | 	call	#pushregs_
067f8     02 6B 02 F6 | 	mov	local01, __heap_ptr
067fc     35 6D 02 F6 | 	mov	local02, local01
06800     07 00 00 FF 
06804     F8 6D 06 F1 | 	add	local02, ##4088
06808     35 6F 0A FB | 	rdlong	local03, local01 wz
0680c     74 00 90 5D |  if_ne	jmp	#LR__0332
06810     36 71 02 F6 | 	mov	local04, local02
06814     35 71 82 F1 | 	sub	local04, local01
06818     35 03 58 FC | 	wrword	#1, local01
0681c     35 73 02 F6 | 	mov	local05, local01
06820     02 72 06 F1 | 	add	local05, #2
06824     36 00 80 FF 
06828     39 21 59 FC | 	wrword	##27792, local05
0682c     35 75 02 F6 | 	mov	local06, local01
06830     04 74 06 F1 | 	add	local06, #4
06834     3A 01 58 FC | 	wrword	#0, local06
06838     35 77 02 F6 | 	mov	local07, local01
0683c     06 76 06 F1 | 	add	local07, #6
06840     3B 03 58 FC | 	wrword	#1, local07
06844     10 6A 06 F1 | 	add	local01, #16
06848     38 6F 52 F6 | 	abs	local03, local04 wc
0684c     04 6E 46 F0 | 	shr	local03, #4
06850     37 6F 62 C6 |  if_b	neg	local03, local03
06854     35 6F 52 FC | 	wrword	local03, local01
06858     35 79 02 F6 | 	mov	local08, local01
0685c     02 78 06 F1 | 	add	local08, #2
06860     36 00 80 FF 
06864     3C 1F 59 FC | 	wrword	##27791, local08
06868     35 7B 02 F6 | 	mov	local09, local01
0686c     04 7A 06 F1 | 	add	local09, #4
06870     3D 01 58 FC | 	wrword	#0, local09
06874     35 7D 02 F6 | 	mov	local10, local01
06878     06 7C 06 F1 | 	add	local10, #6
0687c     3E 01 58 FC | 	wrword	#0, local10
06880     10 6A 86 F1 | 	sub	local01, #16
06884                 | LR__0332
06884     36 2D 02 F6 | 	mov	result2, local02
06888     35 2B 02 F6 | 	mov	result1, local01
0688c     AF F0 03 F6 | 	mov	ptra, fp
06890     BF 00 A0 FD | 	call	#popregs_
06894                 | __system___gc_ptrs_ret
06894     2D 00 64 FD | 	ret
06898                 | 
06898                 | __system___gc_nextBlockPtr
06898     02 5A 05 F6 | 	mov	COUNT_, #2
0689c     B0 00 A0 FD | 	call	#pushregs_
068a0     2E 6B 02 F6 | 	mov	local01, arg01
068a4     35 6D EA FA | 	rdword	local02, local01 wz
068a8     10 00 90 5D |  if_ne	jmp	#LR__0333
068ac     40 00 00 FF 
068b0     60 5C 06 F6 | 	mov	arg01, ##@LR__0448
068b4     F8 01 B0 FD | 	call	#__system___gc_errmsg
068b8     0C 00 90 FD | 	jmp	#LR__0334
068bc                 | LR__0333
068bc     04 6C 66 F0 | 	shl	local02, #4
068c0     35 2B 02 F6 | 	mov	result1, local01
068c4     36 2B 02 F1 | 	add	result1, local02
068c8                 | LR__0334
068c8     AF F0 03 F6 | 	mov	ptra, fp
068cc     BF 00 A0 FD | 	call	#popregs_
068d0                 | __system___gc_nextBlockPtr_ret
068d0     2D 00 64 FD | 	ret
068d4                 | 
068d4                 | __system___gc_tryalloc
068d4     1B 5A 05 F6 | 	mov	COUNT_, #27
068d8     B0 00 A0 FD | 	call	#pushregs_
068dc     2E 6B 02 F6 | 	mov	local01, arg01
068e0     2F 6D 02 F6 | 	mov	local02, arg02
068e4     08 FF BF FD | 	call	#__system___gc_ptrs
068e8     15 6F 02 F6 | 	mov	local03, result1
068ec     16 71 02 F6 | 	mov	local04, result2
068f0     37 73 02 F6 | 	mov	local05, local03
068f4     00 74 06 F6 | 	mov	local06, #0
068f8     5C 97 9F FE | 	loc	pa,	#(@LR__0336-@LR__0335)
068fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
06900                 | LR__0335
06900     39 77 02 F6 | 	mov	local07, local05
06904     06 72 06 F1 | 	add	local05, #6
06908     39 79 02 F6 | 	mov	local08, local05
0690c     37 7B 02 F6 | 	mov	local09, local03
06910     3C 7D E2 FA | 	rdword	local10, local08
06914     3D 5D 02 F6 | 	mov	arg01, local09
06918     3E 5F 0A F6 | 	mov	arg02, local10 wz
0691c     00 2A 06 A6 |  if_e	mov	result1, #0
06920     04 5E 66 50 |  if_ne	shl	arg02, #4
06924     2F 5D 02 51 |  if_ne	add	arg01, arg02
06928     2E 2B 02 56 |  if_ne	mov	result1, arg01
0692c     15 7F 02 F6 | 	mov	local11, result1
06930     3F 73 0A F6 | 	mov	local05, local11 wz
06934     39 7B 02 56 |  if_ne	mov	local09, local05
06938     3D 81 02 56 |  if_ne	mov	local12, local09
0693c     40 75 E2 5A |  if_ne	rdword	local06, local12
06940     00 72 0E F2 | 	cmp	local05, #0 wz
06944     10 00 90 AD |  if_e	jmp	#LR__0337
06948     38 73 5A F2 | 	cmps	local05, local04 wcz
0694c     08 00 90 3D |  if_ae	jmp	#LR__0337
06950     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06954     A8 FF 9F 1D |  if_a	jmp	#LR__0335
06958                 | LR__0336
06958                 | LR__0337
06958     00 72 0E F2 | 	cmp	local05, #0 wz
0695c     39 2B 02 A6 |  if_e	mov	result1, local05
06960     40 01 90 AD |  if_e	jmp	#LR__0340
06964     39 83 02 F6 | 	mov	local13, local05
06968     06 82 06 F1 | 	add	local13, #6
0696c     41 85 E2 FA | 	rdword	local14, local13
06970     3A 6B 5A F2 | 	cmps	local01, local06 wcz
06974     CC 00 90 3D |  if_ae	jmp	#LR__0339
06978     39 87 02 F6 | 	mov	local15, local05
0697c     43 6B 52 FC | 	wrword	local01, local15
06980     35 89 02 F6 | 	mov	local16, local01
06984     04 88 66 F0 | 	shl	local16, #4
06988     39 8B 02 F6 | 	mov	local17, local05
0698c     44 8B 02 F1 | 	add	local17, local16
06990     3A 8D 02 F6 | 	mov	local18, local06
06994     35 8D 82 F1 | 	sub	local18, local01
06998     45 8F 02 F6 | 	mov	local19, local17
0699c     47 8D 52 FC | 	wrword	local18, local19
069a0     45 91 02 F6 | 	mov	local20, local17
069a4     02 90 06 F1 | 	add	local20, #2
069a8     36 00 80 FF 
069ac     48 1F 59 FC | 	wrword	##27791, local20
069b0     45 93 02 F6 | 	mov	local21, local17
069b4     04 92 06 F1 | 	add	local21, #4
069b8     39 5F 0A F6 | 	mov	arg02, local05 wz
069bc     00 2A 06 A6 |  if_e	mov	result1, #0
069c0     37 5F 82 51 |  if_ne	sub	arg02, local03
069c4     04 5E 46 50 |  if_ne	shr	arg02, #4
069c8     2F 2B 02 56 |  if_ne	mov	result1, arg02
069cc     49 2B 52 FC | 	wrword	result1, local21
069d0     45 95 02 F6 | 	mov	local22, local17
069d4     41 7B E2 FA | 	rdword	local09, local13
069d8     06 94 06 F1 | 	add	local22, #6
069dc     4A 7B 52 FC | 	wrword	local09, local22
069e0     45 97 02 F6 | 	mov	local23, local17
069e4     4B 5F 0A F6 | 	mov	arg02, local23 wz
069e8     00 2A 06 A6 |  if_e	mov	result1, #0
069ec     37 5F 82 51 |  if_ne	sub	arg02, local03
069f0     04 5E 46 50 |  if_ne	shr	arg02, #4
069f4     2F 2B 02 56 |  if_ne	mov	result1, arg02
069f8     15 85 02 F6 | 	mov	local14, result1
069fc     45 5D 02 F6 | 	mov	arg01, local17
06a00     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
06a04     15 99 0A F6 | 	mov	local24, result1 wz
06a08     38 00 90 AD |  if_e	jmp	#LR__0338
06a0c     38 99 5A F2 | 	cmps	local24, local04 wcz
06a10     30 00 90 3D |  if_ae	jmp	#LR__0338
06a14     4C 9B 02 F6 | 	mov	local25, local24
06a18     04 9A 06 F1 | 	add	local25, #4
06a1c     37 7B 02 F6 | 	mov	local09, local03
06a20     4B 7D 02 F6 | 	mov	local10, local23
06a24     3D 5D 02 F6 | 	mov	arg01, local09
06a28     3E 5F 0A F6 | 	mov	arg02, local10 wz
06a2c     00 2A 06 A6 |  if_e	mov	result1, #0
06a30     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06a34     04 5E 46 50 |  if_ne	shr	arg02, #4
06a38     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a3c     15 7F 02 F6 | 	mov	local11, result1
06a40     4D 7F 52 FC | 	wrword	local11, local25
06a44                 | LR__0338
06a44                 | LR__0339
06a44     06 76 06 F1 | 	add	local07, #6
06a48     3B 85 52 FC | 	wrword	local14, local07
06a4c     36 00 00 FF 
06a50     80 7A 06 F6 | 	mov	local09, ##27776
06a54     36 7B 42 F5 | 	or	local09, local02
06a58     39 9D 02 F6 | 	mov	local26, local05
06a5c     02 9C 06 F1 | 	add	local26, #2
06a60     01 2A 62 FD | 	cogid	result1
06a64     15 7B 42 F5 | 	or	local09, result1
06a68     4E 7B 52 FC | 	wrword	local09, local26
06a6c     37 9F 02 F6 | 	mov	local27, local03
06a70     08 9E 06 F1 | 	add	local27, #8
06a74     4F 7B E2 FA | 	rdword	local09, local27
06a78     41 7B 52 FC | 	wrword	local09, local13
06a7c     39 5F 0A F6 | 	mov	arg02, local05 wz
06a80     00 2A 06 A6 |  if_e	mov	result1, #0
06a84     37 5F 82 51 |  if_ne	sub	arg02, local03
06a88     04 5E 46 50 |  if_ne	shr	arg02, #4
06a8c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06a90     4F 2B 52 FC | 	wrword	result1, local27
06a94     08 72 06 F1 | 	add	local05, #8
06a98     39 2B 02 F6 | 	mov	result1, local05
06a9c     00 C0 31 FF 
06aa0     00 2A 46 F5 | 	or	result1, ##1669332992
06aa4                 | LR__0340
06aa4     AF F0 03 F6 | 	mov	ptra, fp
06aa8     BF 00 A0 FD | 	call	#popregs_
06aac                 | __system___gc_tryalloc_ret
06aac     2D 00 64 FD | 	ret
06ab0                 | 
06ab0                 | __system___gc_errmsg
06ab0     02 5A 05 F6 | 	mov	COUNT_, #2
06ab4     B0 00 A0 FD | 	call	#pushregs_
06ab8     2E 6B 02 F6 | 	mov	local01, arg01
06abc                 | LR__0341
06abc     35 6D CA FA | 	rdbyte	local02, local01 wz
06ac0     01 6A 06 F1 | 	add	local01, #1
06ac4     0C 00 90 AD |  if_e	jmp	#LR__0342
06ac8     36 5D 02 F6 | 	mov	arg01, local02
06acc     C4 F4 BF FD | 	call	#__system___tx
06ad0     E8 FF 9F FD | 	jmp	#LR__0341
06ad4                 | LR__0342
06ad4     00 2A 06 F6 | 	mov	result1, #0
06ad8     AF F0 03 F6 | 	mov	ptra, fp
06adc     BF 00 A0 FD | 	call	#popregs_
06ae0                 | __system___gc_errmsg_ret
06ae0     2D 00 64 FD | 	ret
06ae4                 | 
06ae4                 | __system___gc_alloc_managed
06ae4     02 5A 05 F6 | 	mov	COUNT_, #2
06ae8     B0 00 A0 FD | 	call	#pushregs_
06aec     2E 6B 02 F6 | 	mov	local01, arg01
06af0     00 5E 06 F6 | 	mov	arg02, #0
06af4     30 00 B0 FD | 	call	#__system___gc_doalloc
06af8     15 6D 0A F6 | 	mov	local02, result1 wz
06afc     18 00 90 5D |  if_ne	jmp	#LR__0343
06b00     00 6A 5E F2 | 	cmps	local01, #0 wcz
06b04     10 00 90 ED |  if_be	jmp	#LR__0343
06b08     40 00 00 FF 
06b0c     7C 5C 06 F6 | 	mov	arg01, ##@LR__0449
06b10     9C FF BF FD | 	call	#__system___gc_errmsg
06b14     04 00 90 FD | 	jmp	#LR__0344
06b18                 | LR__0343
06b18     36 2B 02 F6 | 	mov	result1, local02
06b1c                 | LR__0344
06b1c     AF F0 03 F6 | 	mov	ptra, fp
06b20     BF 00 A0 FD | 	call	#popregs_
06b24                 | __system___gc_alloc_managed_ret
06b24     2D 00 64 FD | 	ret
06b28                 | 
06b28                 | __system___gc_doalloc
06b28     07 5A 05 F6 | 	mov	COUNT_, #7
06b2c     B0 00 A0 FD | 	call	#pushregs_
06b30     2E 6B 0A F6 | 	mov	local01, arg01 wz
06b34     2F 6D 02 F6 | 	mov	local02, arg02
06b38     00 2A 06 A6 |  if_e	mov	result1, #0
06b3c     8C 00 90 AD |  if_e	jmp	#LR__0352
06b40     17 6A 06 F1 | 	add	local01, #23
06b44     0F 6A 26 F5 | 	andn	local01, #15
06b48     04 6A 46 F0 | 	shr	local01, #4
06b4c     14 14 06 F1 | 	add	ptr___system__dat__, #20
06b50     0A 6F 02 F6 | 	mov	local03, ptr___system__dat__
06b54     37 5D 02 F6 | 	mov	arg01, local03
06b58     14 14 86 F1 | 	sub	ptr___system__dat__, #20
06b5c     50 F3 BF FD | 	call	#__system___lockmem
06b60     35 5D 02 F6 | 	mov	arg01, local01
06b64     36 5F 02 F6 | 	mov	arg02, local02
06b68     68 FD BF FD | 	call	#__system___gc_tryalloc
06b6c     15 71 0A F6 | 	mov	local04, result1 wz
06b70     14 00 90 5D |  if_ne	jmp	#LR__0345
06b74     10 03 B0 FD | 	call	#__system___gc_docollect
06b78     35 5D 02 F6 | 	mov	arg01, local01
06b7c     36 5F 02 F6 | 	mov	arg02, local02
06b80     50 FD BF FD | 	call	#__system___gc_tryalloc
06b84     15 71 02 F6 | 	mov	local04, result1
06b88                 | LR__0345
06b88     37 01 68 FC | 	wrlong	#0, local03
06b8c     00 70 0E F2 | 	cmp	local04, #0 wz
06b90     34 00 90 AD |  if_e	jmp	#LR__0351
06b94     04 6A 66 F0 | 	shl	local01, #4
06b98     08 6A 86 F1 | 	sub	local01, #8
06b9c     35 73 52 F6 | 	abs	local05, local01 wc
06ba0     02 72 46 F0 | 	shr	local05, #2
06ba4     39 73 62 C6 |  if_b	neg	local05, local05
06ba8     39 75 0A F6 | 	mov	local06, local05 wz
06bac     38 77 02 F6 | 	mov	local07, local04
06bb0     14 00 90 AD |  if_e	jmp	#LR__0350
06bb4     54 94 9F FE | 	loc	pa,	#(@LR__0348-@LR__0346)
06bb8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06bbc                 | LR__0346
06bbc     3A 05 D8 FC | 	rep	@LR__0349, local06
06bc0                 | LR__0347
06bc0     3B 01 68 FC | 	wrlong	#0, local07
06bc4     04 76 06 F1 | 	add	local07, #4
06bc8                 | LR__0348
06bc8                 | LR__0349
06bc8                 | LR__0350
06bc8                 | LR__0351
06bc8     38 2B 02 F6 | 	mov	result1, local04
06bcc                 | LR__0352
06bcc     AF F0 03 F6 | 	mov	ptra, fp
06bd0     BF 00 A0 FD | 	call	#popregs_
06bd4                 | __system___gc_doalloc_ret
06bd4     2D 00 64 FD | 	ret
06bd8                 | 
06bd8                 | __system___gc_isvalidptr
06bd8     30 31 02 F6 | 	mov	_var01, arg03
06bdc     18 33 02 F6 | 	mov	_var02, _var01
06be0     00 F8 7F FF 
06be4     00 32 06 F5 | 	and	_var02, ##-1048576
06be8     00 C0 31 FF 
06bec     00 32 0E F2 | 	cmp	_var02, ##1669332992 wz
06bf0     00 2A 06 56 |  if_ne	mov	result1, #0
06bf4     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06bf8     08 30 86 F1 | 	sub	_var01, #8
06bfc     18 35 02 F6 | 	mov	_var03, _var01
06c00     00 F8 7F FF 
06c04     00 34 26 F5 | 	andn	_var03, ##-1048576
06c08     2E 35 5A F2 | 	cmps	_var03, arg01 wcz
06c0c     08 00 90 CD |  if_b	jmp	#LR__0353
06c10     2F 35 5A F2 | 	cmps	_var03, arg02 wcz
06c14     08 00 90 CD |  if_b	jmp	#LR__0354
06c18                 | LR__0353
06c18     00 2A 06 F6 | 	mov	result1, #0
06c1c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
06c20                 | LR__0354
06c20     1A 33 02 F6 | 	mov	_var02, _var03
06c24     2E 33 62 F5 | 	xor	_var02, arg01
06c28     0F 32 0E F5 | 	and	_var02, #15 wz
06c2c     00 2A 06 56 |  if_ne	mov	result1, #0
06c30     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
06c34     1A 37 02 F6 | 	mov	_var04, _var03
06c38     02 36 06 F1 | 	add	_var04, #2
06c3c     1B 33 E2 FA | 	rdword	_var02, _var04
06c40     7F 00 00 FF 
06c44     C0 33 06 F5 | 	and	_var02, ##65472
06c48     36 00 00 FF 
06c4c     80 32 0E F2 | 	cmp	_var02, ##27776 wz
06c50     00 2A 06 56 |  if_ne	mov	result1, #0
06c54     1A 2B 02 A6 |  if_e	mov	result1, _var03
06c58                 | __system___gc_isvalidptr_ret
06c58     2D 00 64 FD | 	ret
06c5c                 | 
06c5c                 | __system___gc_dofree
06c5c     1A 5A 05 F6 | 	mov	COUNT_, #26
06c60     B0 00 A0 FD | 	call	#pushregs_
06c64     2E 6B 02 F6 | 	mov	local01, arg01
06c68     84 FB BF FD | 	call	#__system___gc_ptrs
06c6c     16 6D 02 F6 | 	mov	local02, result2
06c70     15 6F 02 F6 | 	mov	local03, result1
06c74     35 71 02 F6 | 	mov	local04, local01
06c78     02 70 06 F1 | 	add	local04, #2
06c7c     36 00 80 FF 
06c80     38 1F 59 FC | 	wrword	##27791, local04
06c84     35 73 02 F6 | 	mov	local05, local01
06c88     35 5D 02 F6 | 	mov	arg01, local01
06c8c     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
06c90     15 75 02 F6 | 	mov	local06, result1
06c94     B8 93 9F FE | 	loc	pa,	#(@LR__0356-@LR__0355)
06c98     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c9c                 | LR__0355
06c9c     04 72 06 F1 | 	add	local05, #4
06ca0     39 77 02 F6 | 	mov	local07, local05
06ca4     3B 5F EA FA | 	rdword	arg02, local07 wz
06ca8     37 5D 02 F6 | 	mov	arg01, local03
06cac     00 2A 06 A6 |  if_e	mov	result1, #0
06cb0     04 5E 66 50 |  if_ne	shl	arg02, #4
06cb4     2F 5D 02 51 |  if_ne	add	arg01, arg02
06cb8     2E 2B 02 56 |  if_ne	mov	result1, arg01
06cbc     15 73 0A F6 | 	mov	local05, result1 wz
06cc0     28 00 90 AD |  if_e	jmp	#LR__0357
06cc4     39 5D 02 F6 | 	mov	arg01, local05
06cc8     00 78 06 F6 | 	mov	local08, #0
06ccc     02 5C 06 F1 | 	add	arg01, #2
06cd0     2E 7B E2 FA | 	rdword	local09, arg01
06cd4     36 00 00 FF 
06cd8     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06cdc     01 78 66 A6 |  if_e	neg	local08, #1
06ce0     3C 2B 02 F6 | 	mov	result1, local08
06ce4     15 7D 0A F6 | 	mov	local10, result1 wz
06ce8     B0 FF 9F AD |  if_e	jmp	#LR__0355
06cec                 | LR__0356
06cec                 | LR__0357
06cec     00 72 0E F2 | 	cmp	local05, #0 wz
06cf0     37 73 02 A6 |  if_e	mov	local05, local03
06cf4     39 7F 02 F6 | 	mov	local11, local05
06cf8     06 7E 06 F1 | 	add	local11, #6
06cfc     35 81 02 F6 | 	mov	local12, local01
06d00     3F 83 E2 FA | 	rdword	local13, local11
06d04     06 80 06 F1 | 	add	local12, #6
06d08     40 83 52 FC | 	wrword	local13, local12
06d0c     35 5F 0A F6 | 	mov	arg02, local01 wz
06d10     00 2A 06 A6 |  if_e	mov	result1, #0
06d14     37 5F 82 51 |  if_ne	sub	arg02, local03
06d18     04 5E 46 50 |  if_ne	shr	arg02, #4
06d1c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06d20     15 85 02 F6 | 	mov	local14, result1
06d24     3F 85 52 FC | 	wrword	local14, local11
06d28     37 73 0A F2 | 	cmp	local05, local03 wz
06d2c     74 00 90 AD |  if_e	jmp	#LR__0360
06d30     39 5D 02 F6 | 	mov	arg01, local05
06d34     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
06d38     35 2B 0A F2 | 	cmp	result1, local01 wz
06d3c     64 00 90 5D |  if_ne	jmp	#LR__0359
06d40     39 87 02 F6 | 	mov	local15, local05
06d44     43 89 E2 FA | 	rdword	local16, local15
06d48     35 8B 02 F6 | 	mov	local17, local01
06d4c     45 7D E2 FA | 	rdword	local10, local17
06d50     3E 89 02 F1 | 	add	local16, local10
06d54     43 89 52 FC | 	wrword	local16, local15
06d58     38 01 58 FC | 	wrword	#0, local04
06d5c     35 5D 02 F6 | 	mov	arg01, local01
06d60     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
06d64     15 75 02 F6 | 	mov	local06, result1
06d68     36 75 5A F2 | 	cmps	local06, local02 wcz
06d6c     24 00 90 3D |  if_ae	jmp	#LR__0358
06d70     3A 8D 02 F6 | 	mov	local18, local06
06d74     04 8C 06 F1 | 	add	local18, #4
06d78     39 5F 0A F6 | 	mov	arg02, local05 wz
06d7c     00 2A 06 A6 |  if_e	mov	result1, #0
06d80     37 5F 82 51 |  if_ne	sub	arg02, local03
06d84     04 5E 46 50 |  if_ne	shr	arg02, #4
06d88     2F 2B 02 56 |  if_ne	mov	result1, arg02
06d8c     15 85 02 F6 | 	mov	local14, result1
06d90     46 85 52 FC | 	wrword	local14, local18
06d94                 | LR__0358
06d94     40 83 E2 FA | 	rdword	local13, local12
06d98     3F 83 52 FC | 	wrword	local13, local11
06d9c     40 01 58 FC | 	wrword	#0, local12
06da0     39 6B 02 F6 | 	mov	local01, local05
06da4                 | LR__0359
06da4                 | LR__0360
06da4     35 5D 02 F6 | 	mov	arg01, local01
06da8     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
06dac     15 8F 0A F6 | 	mov	local19, result1 wz
06db0     C4 00 90 AD |  if_e	jmp	#LR__0362
06db4     36 8F 5A F2 | 	cmps	local19, local02 wcz
06db8     BC 00 90 3D |  if_ae	jmp	#LR__0362
06dbc     47 5D 02 F6 | 	mov	arg01, local19
06dc0     00 78 06 F6 | 	mov	local08, #0
06dc4     02 5C 06 F1 | 	add	arg01, #2
06dc8     2E 7B E2 FA | 	rdword	local09, arg01
06dcc     36 00 00 FF 
06dd0     8F 7A 0E F2 | 	cmp	local09, ##27791 wz
06dd4     01 78 66 A6 |  if_e	neg	local08, #1
06dd8     3C 2B 0A F6 | 	mov	result1, local08 wz
06ddc     98 00 90 AD |  if_e	jmp	#LR__0362
06de0     35 73 02 F6 | 	mov	local05, local01
06de4     47 6B 02 F6 | 	mov	local01, local19
06de8     39 91 02 F6 | 	mov	local20, local05
06dec     48 93 E2 FA | 	rdword	local21, local20
06df0     35 95 02 F6 | 	mov	local22, local01
06df4     4A 7D E2 FA | 	rdword	local10, local22
06df8     3E 93 02 F1 | 	add	local21, local10
06dfc     48 93 52 FC | 	wrword	local21, local20
06e00     35 97 02 F6 | 	mov	local23, local01
06e04     06 96 06 F1 | 	add	local23, #6
06e08     39 99 02 F6 | 	mov	local24, local05
06e0c     4B 83 E2 FA | 	rdword	local13, local23
06e10     06 98 06 F1 | 	add	local24, #6
06e14     4C 83 52 FC | 	wrword	local13, local24
06e18     35 9B 02 F6 | 	mov	local25, local01
06e1c     02 9A 06 F1 | 	add	local25, #2
06e20     4D 55 59 FC | 	wrword	#170, local25
06e24     4B 01 58 FC | 	wrword	#0, local23
06e28     35 83 02 F6 | 	mov	local13, local01
06e2c     41 5D 02 F6 | 	mov	arg01, local13
06e30     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
06e34     15 7D 02 F6 | 	mov	local10, result1
06e38     3E 75 0A F6 | 	mov	local06, local10 wz
06e3c     38 00 90 AD |  if_e	jmp	#LR__0361
06e40     36 75 5A F2 | 	cmps	local06, local02 wcz
06e44     30 00 90 3D |  if_ae	jmp	#LR__0361
06e48     3A 9D 02 F6 | 	mov	local26, local06
06e4c     04 9C 06 F1 | 	add	local26, #4
06e50     37 83 02 F6 | 	mov	local13, local03
06e54     39 7D 02 F6 | 	mov	local10, local05
06e58     41 5D 02 F6 | 	mov	arg01, local13
06e5c     3E 5F 0A F6 | 	mov	arg02, local10 wz
06e60     00 2A 06 A6 |  if_e	mov	result1, #0
06e64     2E 5F 82 51 |  if_ne	sub	arg02, arg01
06e68     04 5E 46 50 |  if_ne	shr	arg02, #4
06e6c     2F 2B 02 56 |  if_ne	mov	result1, arg02
06e70     15 85 02 F6 | 	mov	local14, result1
06e74     4E 85 52 FC | 	wrword	local14, local26
06e78                 | LR__0361
06e78                 | LR__0362
06e78     3A 2B 02 F6 | 	mov	result1, local06
06e7c     AF F0 03 F6 | 	mov	ptra, fp
06e80     BF 00 A0 FD | 	call	#popregs_
06e84                 | __system___gc_dofree_ret
06e84     2D 00 64 FD | 	ret
06e88                 | 
06e88                 | __system___gc_docollect
06e88     0C 5A 05 F6 | 	mov	COUNT_, #12
06e8c     B0 00 A0 FD | 	call	#pushregs_
06e90     5C F9 BF FD | 	call	#__system___gc_ptrs
06e94     16 6B 02 F6 | 	mov	local01, result2
06e98     15 6D 02 F6 | 	mov	local02, result1
06e9c     36 5D 02 F6 | 	mov	arg01, local02
06ea0     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06ea4     15 6F 0A F6 | 	mov	local03, result1 wz
06ea8     01 2A 62 FD | 	cogid	result1
06eac     15 71 02 F6 | 	mov	local04, result1
06eb0     2C 00 90 AD |  if_e	jmp	#LR__0364
06eb4                 | LR__0363
06eb4     35 6F 5A F2 | 	cmps	local03, local01 wcz
06eb8     24 00 90 3D |  if_ae	jmp	#LR__0364
06ebc     37 73 02 F6 | 	mov	local05, local03
06ec0     02 72 06 F1 | 	add	local05, #2
06ec4     39 75 E2 FA | 	rdword	local06, local05
06ec8     20 74 26 F5 | 	andn	local06, #32
06ecc     39 75 52 FC | 	wrword	local06, local05
06ed0     37 5D 02 F6 | 	mov	arg01, local03
06ed4     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06ed8     15 6F 0A F6 | 	mov	local03, result1 wz
06edc     D4 FF 9F 5D |  if_ne	jmp	#LR__0363
06ee0                 | LR__0364
06ee0     00 76 06 F6 | 	mov	local07, #0
06ee4     00 5C 06 F6 | 	mov	arg01, #0
06ee8     5C EF BF FD | 	call	#__system____topofstack
06eec     15 79 02 F6 | 	mov	local08, result1
06ef0     3B 5D 02 F6 | 	mov	arg01, local07
06ef4     3C 5F 02 F6 | 	mov	arg02, local08
06ef8     A0 00 B0 FD | 	call	#__system___gc_markhub
06efc     2C 01 B0 FD | 	call	#__system___gc_markcog
06f00     36 5D 02 F6 | 	mov	arg01, local02
06f04     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f08     15 7B 0A F6 | 	mov	local09, result1 wz
06f0c     10 00 90 5D |  if_ne	jmp	#LR__0365
06f10     40 00 00 FF 
06f14     99 5C 06 F6 | 	mov	arg01, ##@LR__0450
06f18     94 FB BF FD | 	call	#__system___gc_errmsg
06f1c     70 00 90 FD | 	jmp	#LR__0371
06f20                 | LR__0365
06f20                 | LR__0366
06f20     3D 6F 02 F6 | 	mov	local03, local09
06f24     37 5D 02 F6 | 	mov	arg01, local03
06f28     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
06f2c     15 7B 02 F6 | 	mov	local09, result1
06f30     37 7D 02 F6 | 	mov	local10, local03
06f34     02 7C 06 F1 | 	add	local10, #2
06f38     3E 7F E2 FA | 	rdword	local11, local10
06f3c     20 7E CE F7 | 	test	local11, #32 wz
06f40     3C 00 90 5D |  if_ne	jmp	#LR__0369
06f44     3F 81 02 F6 | 	mov	local12, local11
06f48     10 80 0E F5 | 	and	local12, #16 wz
06f4c     30 00 90 5D |  if_ne	jmp	#LR__0369
06f50     3F 77 02 F6 | 	mov	local07, local11
06f54     0F 76 06 F5 | 	and	local07, #15
06f58     3B 7F 02 F6 | 	mov	local11, local07
06f5c     38 7F 0A F2 | 	cmp	local11, local04 wz
06f60     08 00 90 AD |  if_e	jmp	#LR__0367
06f64     0E 7E 0E F2 | 	cmp	local11, #14 wz
06f68     14 00 90 5D |  if_ne	jmp	#LR__0368
06f6c                 | LR__0367
06f6c     37 77 02 F6 | 	mov	local07, local03
06f70     3B 5D 02 F6 | 	mov	arg01, local07
06f74     E4 FC BF FD | 	call	#__system___gc_dofree
06f78     15 81 02 F6 | 	mov	local12, result1
06f7c     40 7B 02 F6 | 	mov	local09, local12
06f80                 | LR__0368
06f80                 | LR__0369
06f80     00 7A 0E F2 | 	cmp	local09, #0 wz
06f84     08 00 90 AD |  if_e	jmp	#LR__0370
06f88     35 7B 5A F2 | 	cmps	local09, local01 wcz
06f8c     90 FF 9F CD |  if_b	jmp	#LR__0366
06f90                 | LR__0370
06f90                 | LR__0371
06f90     AF F0 03 F6 | 	mov	ptra, fp
06f94     BF 00 A0 FD | 	call	#popregs_
06f98                 | __system___gc_docollect_ret
06f98     2D 00 64 FD | 	ret
06f9c                 | 
06f9c                 | __system___gc_markhub
06f9c     0A 5A 05 F6 | 	mov	COUNT_, #10
06fa0     B0 00 A0 FD | 	call	#pushregs_
06fa4     2E 6B 02 F6 | 	mov	local01, arg01
06fa8     2F 6D 02 F6 | 	mov	local02, arg02
06fac     40 F8 BF FD | 	call	#__system___gc_ptrs
06fb0     15 6F 02 F6 | 	mov	local03, result1
06fb4     16 71 02 F6 | 	mov	local04, result2
06fb8                 | LR__0372
06fb8     36 6B 5A F2 | 	cmps	local01, local02 wcz
06fbc     60 00 90 3D |  if_ae	jmp	#LR__0373
06fc0     35 61 02 FB | 	rdlong	arg03, local01
06fc4     04 6A 06 F1 | 	add	local01, #4
06fc8     37 5D 02 F6 | 	mov	arg01, local03
06fcc     38 5F 02 F6 | 	mov	arg02, local04
06fd0     04 FC BF FD | 	call	#__system___gc_isvalidptr
06fd4     15 73 0A F6 | 	mov	local05, result1 wz
06fd8     DC FF 9F AD |  if_e	jmp	#LR__0372
06fdc     39 5D 02 F6 | 	mov	arg01, local05
06fe0     00 74 06 F6 | 	mov	local06, #0
06fe4     02 5C 06 F1 | 	add	arg01, #2
06fe8     2E 77 E2 FA | 	rdword	local07, arg01
06fec     36 00 00 FF 
06ff0     8F 76 0E F2 | 	cmp	local07, ##27791 wz
06ff4     01 74 66 A6 |  if_e	neg	local06, #1
06ff8     3A 2B 02 F6 | 	mov	result1, local06
06ffc     15 79 0A F6 | 	mov	local08, result1 wz
07000     B4 FF 9F 5D |  if_ne	jmp	#LR__0372
07004     39 7B 02 F6 | 	mov	local09, local05
07008     02 7A 06 F1 | 	add	local09, #2
0700c     3D 7D E2 FA | 	rdword	local10, local09
07010     0F 7C 26 F5 | 	andn	local10, #15
07014     2E 7C 46 F5 | 	or	local10, #46
07018     3D 7D 52 FC | 	wrword	local10, local09
0701c     98 FF 9F FD | 	jmp	#LR__0372
07020                 | LR__0373
07020     AF F0 03 F6 | 	mov	ptra, fp
07024     BF 00 A0 FD | 	call	#popregs_
07028                 | __system___gc_markhub_ret
07028     2D 00 64 FD | 	ret
0702c                 | 
0702c                 | __system___gc_markcog
0702c     06 5A 05 F6 | 	mov	COUNT_, #6
07030     B0 00 A0 FD | 	call	#pushregs_
07034     B8 F7 BF FD | 	call	#__system___gc_ptrs
07038     15 6B 02 F6 | 	mov	local01, result1
0703c     16 6D 02 F6 | 	mov	local02, result2
07040     00 6E 06 F6 | 	mov	local03, #0
07044                 | LR__0374
07044     F0 71 06 F6 | 	mov	local04, #496
07048     37 71 82 F1 | 	sub	local04, local03
0704c     F0 71 06 F1 | 	add	local04, #496
07050                 | 	'.live	local04
07050     00 70 96 F9 | 	alts	local04, #0
07054     38 73 02 F6 | 	mov	local05, local04
07058     36 5F 02 F6 | 	mov	arg02, local02
0705c     35 5D 02 F6 | 	mov	arg01, local01
07060     39 61 02 F6 | 	mov	arg03, local05
07064     70 FB BF FD | 	call	#__system___gc_isvalidptr
07068     15 73 0A F6 | 	mov	local05, result1 wz
0706c     10 00 90 AD |  if_e	jmp	#LR__0375
07070     02 72 06 F1 | 	add	local05, #2
07074     39 75 E2 FA | 	rdword	local06, local05
07078     20 74 46 F5 | 	or	local06, #32
0707c     39 75 52 FC | 	wrword	local06, local05
07080                 | LR__0375
07080     01 6E 06 F1 | 	add	local03, #1
07084     F0 6F 5E F2 | 	cmps	local03, #496 wcz
07088     B8 FF 9F CD |  if_b	jmp	#LR__0374
0708c     AF F0 03 F6 | 	mov	ptra, fp
07090     BF 00 A0 FD | 	call	#popregs_
07094                 | __system___gc_markcog_ret
07094     2D 00 64 FD | 	ret
07098                 | 
07098                 | __system__write
07098     03 5A 05 F6 | 	mov	COUNT_, #3
0709c     B0 00 A0 FD | 	call	#pushregs_
070a0     2E 6B 02 F6 | 	mov	local01, arg01
070a4     2F 6D 02 F6 | 	mov	local02, arg02
070a8     30 6F 02 F6 | 	mov	local03, arg03
070ac     0A 6A 1E F2 | 	cmp	local01, #10 wcz
070b0     1C 00 90 CD |  if_b	jmp	#LR__0376
070b4     01 00 00 FF 
070b8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
070bc     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
070c0     01 00 00 FF 
070c4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
070c8     01 2A 66 F6 | 	neg	result1, #1
070cc     28 00 90 FD | 	jmp	#LR__0377
070d0                 | LR__0376
070d0     35 5D 02 F6 | 	mov	arg01, local01
070d4     01 5C 66 F0 | 	shl	arg01, #1
070d8     35 5D 02 F1 | 	add	arg01, local01
070dc     04 5C 66 F0 | 	shl	arg01, #4
070e0     1C 14 06 F1 | 	add	ptr___system__dat__, #28
070e4     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
070e8     36 5F 02 F6 | 	mov	arg02, local02
070ec     37 61 02 F6 | 	mov	arg03, local03
070f0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
070f4     4C 09 B0 FD | 	call	#__system___vfswrite
070f8                 | LR__0377
070f8     AF F0 03 F6 | 	mov	ptra, fp
070fc     BF 00 A0 FD | 	call	#popregs_
07100                 | __system__write_ret
07100     2D 00 64 FD | 	ret
07104                 | 
07104                 | __system__read
07104     03 5A 05 F6 | 	mov	COUNT_, #3
07108     B0 00 A0 FD | 	call	#pushregs_
0710c     2E 6B 02 F6 | 	mov	local01, arg01
07110     2F 6D 02 F6 | 	mov	local02, arg02
07114     30 6F 02 F6 | 	mov	local03, arg03
07118     0A 6A 1E F2 | 	cmp	local01, #10 wcz
0711c     1C 00 90 CD |  if_b	jmp	#LR__0378
07120     01 00 00 FF 
07124     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07128     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0712c     01 00 00 FF 
07130     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07134     01 2A 66 F6 | 	neg	result1, #1
07138     28 00 90 FD | 	jmp	#LR__0379
0713c                 | LR__0378
0713c     35 5D 02 F6 | 	mov	arg01, local01
07140     01 5C 66 F0 | 	shl	arg01, #1
07144     35 5D 02 F1 | 	add	arg01, local01
07148     04 5C 66 F0 | 	shl	arg01, #4
0714c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07150     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
07154     36 5F 02 F6 | 	mov	arg02, local02
07158     37 61 02 F6 | 	mov	arg03, local03
0715c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07160     A4 0A B0 FD | 	call	#__system___vfsread
07164                 | LR__0379
07164     AF F0 03 F6 | 	mov	ptra, fp
07168     BF 00 A0 FD | 	call	#popregs_
0716c                 | __system__read_ret
0716c     2D 00 64 FD | 	ret
07170                 | 
07170                 | __system__close
07170     01 5A 05 F6 | 	mov	COUNT_, #1
07174     B0 00 A0 FD | 	call	#pushregs_
07178     2E 6B 02 F6 | 	mov	local01, arg01
0717c     0A 6A 1E F2 | 	cmp	local01, #10 wcz
07180     1C 00 90 CD |  if_b	jmp	#LR__0380
07184     01 00 00 FF 
07188     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0718c     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07190     01 00 00 FF 
07194     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07198     01 2A 66 F6 | 	neg	result1, #1
0719c     20 00 90 FD | 	jmp	#LR__0381
071a0                 | LR__0380
071a0     35 5D 02 F6 | 	mov	arg01, local01
071a4     01 5C 66 F0 | 	shl	arg01, #1
071a8     35 5D 02 F1 | 	add	arg01, local01
071ac     04 5C 66 F0 | 	shl	arg01, #4
071b0     1C 14 06 F1 | 	add	ptr___system__dat__, #28
071b4     0A 5D 02 F1 | 	add	arg01, ptr___system__dat__
071b8     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
071bc     80 03 B0 FD | 	call	#__system___closeraw
071c0                 | LR__0381
071c0     AF F0 03 F6 | 	mov	ptra, fp
071c4     BF 00 A0 FD | 	call	#popregs_
071c8                 | __system__close_ret
071c8     2D 00 64 FD | 	ret
071cc                 | 
071cc                 | __system__lseek
071cc     09 5A 05 F6 | 	mov	COUNT_, #9
071d0     B0 00 A0 FD | 	call	#pushregs_
071d4     2E 6B 02 F6 | 	mov	local01, arg01
071d8     2F 6D 02 F6 | 	mov	local02, arg02
071dc     30 6F 02 F6 | 	mov	local03, arg03
071e0     0A 6A 1E F2 | 	cmp	local01, #10 wcz
071e4     1C 00 90 CD |  if_b	jmp	#LR__0382
071e8     01 00 00 FF 
071ec     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
071f0     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
071f4     01 00 00 FF 
071f8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
071fc     01 2A 66 F6 | 	neg	result1, #1
07200     D8 00 90 FD | 	jmp	#LR__0386
07204                 | LR__0382
07204     35 71 02 F6 | 	mov	local04, local01
07208     01 70 66 F0 | 	shl	local04, #1
0720c     35 71 02 F1 | 	add	local04, local01
07210     04 70 66 F0 | 	shl	local04, #4
07214     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07218     0A 71 02 F1 | 	add	local04, ptr___system__dat__
0721c     2C 70 06 F1 | 	add	local04, #44
07220     38 73 0A FB | 	rdlong	local05, local04 wz
07224     2C 70 86 F1 | 	sub	local04, #44
07228     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
0722c     1C 00 90 5D |  if_ne	jmp	#LR__0383
07230     01 00 00 FF 
07234     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07238     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
0723c     01 00 00 FF 
07240     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07244     01 2A 66 F6 | 	neg	result1, #1
07248     90 00 90 FD | 	jmp	#LR__0386
0724c                 | LR__0383
0724c     08 70 06 F1 | 	add	local04, #8
07250     38 73 02 FB | 	rdlong	local05, local04
07254     08 70 86 F1 | 	sub	local04, #8
07258     40 72 CE F7 | 	test	local05, #64 wz
0725c     14 00 90 AD |  if_e	jmp	#LR__0384
07260     08 70 06 F1 | 	add	local04, #8
07264     38 73 02 FB | 	rdlong	local05, local04
07268     80 72 46 F5 | 	or	local05, #128
0726c     38 73 62 FC | 	wrlong	local05, local04
07270     08 70 86 F1 | 	sub	local04, #8
07274                 | LR__0384
07274     2C 70 06 F1 | 	add	local04, #44
07278     38 73 02 FB | 	rdlong	local05, local04
0727c     2C 70 86 F1 | 	sub	local04, #44
07280     39 75 02 FB | 	rdlong	local06, local05
07284     04 72 06 F1 | 	add	local05, #4
07288     39 77 02 FB | 	rdlong	local07, local05
0728c     38 5D 02 F6 | 	mov	arg01, local04
07290     36 5F 02 F6 | 	mov	arg02, local02
07294     37 61 02 F6 | 	mov	arg03, local03
07298     07 79 02 F6 | 	mov	local08, objptr
0729c     3A 0F 02 F6 | 	mov	objptr, local06
072a0     2D 76 62 FD | 	call	local07
072a4     3C 0F 02 F6 | 	mov	objptr, local08
072a8     15 7B 02 F6 | 	mov	local09, result1
072ac     00 7A 5E F2 | 	cmps	local09, #0 wcz
072b0     24 00 90 3D |  if_ae	jmp	#LR__0385
072b4     3D 5D 6A F6 | 	neg	arg01, local09 wz
072b8     01 00 00 FF 
072bc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
072c0     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
072c4     01 00 00 FF 
072c8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
072cc     01 2A 66 56 |  if_ne	neg	result1, #1
072d0     00 2A 06 A6 |  if_e	mov	result1, #0
072d4     04 00 90 FD | 	jmp	#LR__0386
072d8                 | LR__0385
072d8     3D 2B 02 F6 | 	mov	result1, local09
072dc                 | LR__0386
072dc     AF F0 03 F6 | 	mov	ptra, fp
072e0     BF 00 A0 FD | 	call	#popregs_
072e4                 | __system__lseek_ret
072e4     2D 00 64 FD | 	ret
072e8                 | 
072e8                 | __system____getftab
072e8     0A 5C 1E F2 | 	cmp	arg01, #10 wcz
072ec     00 2A 06 36 |  if_ae	mov	result1, #0
072f0     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
072f4     2E 2B 02 F6 | 	mov	result1, arg01
072f8     01 2A 66 F0 | 	shl	result1, #1
072fc     2E 2B 02 F1 | 	add	result1, arg01
07300     04 2A 66 F0 | 	shl	result1, #4
07304     1C 14 06 F1 | 	add	ptr___system__dat__, #28
07308     0A 2B 02 F1 | 	add	result1, ptr___system__dat__
0730c     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
07310                 | __system____getftab_ret
07310     2D 00 64 FD | 	ret
07314                 | 
07314                 | __system___strrev
07314     2E 31 CA FA | 	rdbyte	_var01, arg01 wz
07318     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
0731c     2E 33 02 F6 | 	mov	_var02, arg01
07320     E8 8C 9F FE | 	loc	pa,	#(@LR__0388-@LR__0387)
07324     93 00 A0 FD | 	call	#FCACHE_LOAD_
07328                 | LR__0387
07328     19 31 CA FA | 	rdbyte	_var01, _var02 wz
0732c     01 32 06 51 |  if_ne	add	_var02, #1
07330     F4 FF 9F 5D |  if_ne	jmp	#LR__0387
07334                 | LR__0388
07334     01 32 86 F1 | 	sub	_var02, #1
07338                 | LR__0389
07338     2E 33 5A F2 | 	cmps	_var02, arg01 wcz
0733c     1C 00 90 ED |  if_be	jmp	#LR__0390
07340     2E 35 C2 FA | 	rdbyte	_var03, arg01
07344     19 37 C2 FA | 	rdbyte	_var04, _var02
07348     2E 37 42 FC | 	wrbyte	_var04, arg01
0734c     19 35 42 FC | 	wrbyte	_var03, _var02
07350     01 5C 06 F1 | 	add	arg01, #1
07354     01 32 86 F1 | 	sub	_var02, #1
07358     DC FF 9F FD | 	jmp	#LR__0389
0735c                 | LR__0390
0735c                 | __system___strrev_ret
0735c     2D 00 64 FD | 	ret
07360                 | 
07360                 | __system___fmtpad
07360     0C 5A 05 F6 | 	mov	COUNT_, #12
07364     B0 00 A0 FD | 	call	#pushregs_
07368     2E 6B 02 F6 | 	mov	local01, arg01
0736c     2F 6D 02 F6 | 	mov	local02, arg02
07370     31 6F 02 F6 | 	mov	local03, arg04
07374     36 71 EA F8 | 	getbyte	local04, local02, #1
07378     16 6C 46 F0 | 	shr	local02, #22
0737c     03 6C 0E F5 | 	and	local02, #3 wz
07380     00 72 06 F6 | 	mov	local05, #0
07384     01 6C 06 A6 |  if_e	mov	local02, #1
07388     37 6D CA F7 | 	test	local02, local03 wz
0738c     00 2A 06 A6 |  if_e	mov	result1, #0
07390     80 00 90 AD |  if_e	jmp	#LR__0394
07394     30 71 82 F1 | 	sub	local04, arg03
07398     38 75 02 F6 | 	mov	local06, local04
0739c     00 74 5E F2 | 	cmps	local06, #0 wcz
073a0     00 2A 06 E6 |  if_be	mov	result1, #0
073a4     6C 00 90 ED |  if_be	jmp	#LR__0394
073a8     03 6C 0E F2 | 	cmp	local02, #3 wz
073ac     18 00 90 5D |  if_ne	jmp	#LR__0391
073b0     01 6E 0E F2 | 	cmp	local03, #1 wz
073b4     6E 76 62 FD | 	wrz	local07
073b8     3B 75 02 F1 | 	add	local06, local07
073bc     3A 75 52 F6 | 	abs	local06, local06 wc
073c0     01 74 46 F0 | 	shr	local06, #1
073c4     3A 75 62 C6 |  if_b	neg	local06, local06
073c8                 | LR__0391
073c8     00 74 5E F2 | 	cmps	local06, #0 wcz
073cc     40 00 90 ED |  if_be	jmp	#LR__0393
073d0     3A 79 02 F6 | 	mov	local08, local06
073d4                 | LR__0392
073d4     35 7B 02 F6 | 	mov	local09, local01
073d8     3D 77 02 FB | 	rdlong	local07, local09
073dc     04 7A 06 F1 | 	add	local09, #4
073e0     3D 7D 02 FB | 	rdlong	local10, local09
073e4     20 5C 06 F6 | 	mov	arg01, #32
073e8     07 7F 02 F6 | 	mov	local11, objptr
073ec     3B 0F 02 F6 | 	mov	objptr, local07
073f0     2D 7C 62 FD | 	call	local10
073f4     3F 0F 02 F6 | 	mov	objptr, local11
073f8     15 81 02 F6 | 	mov	local12, result1
073fc     00 80 5E F2 | 	cmps	local12, #0 wcz
07400     40 2B 02 C6 |  if_b	mov	result1, local12
07404     0C 00 90 CD |  if_b	jmp	#LR__0394
07408     40 73 02 F1 | 	add	local05, local12
0740c     F1 79 6E FB | 	djnz	local08, #LR__0392
07410                 | LR__0393
07410     39 2B 02 F6 | 	mov	result1, local05
07414                 | LR__0394
07414     AF F0 03 F6 | 	mov	ptra, fp
07418     BF 00 A0 FD | 	call	#popregs_
0741c                 | __system___fmtpad_ret
0741c     2D 00 64 FD | 	ret
07420                 | 
07420                 | __system___uitoa
07420     09 5A 05 F6 | 	mov	COUNT_, #9
07424     B0 00 A0 FD | 	call	#pushregs_
07428     2E 6B 02 F6 | 	mov	local01, arg01
0742c     2F 6D 02 F6 | 	mov	local02, arg02
07430     30 6F 02 F6 | 	mov	local03, arg03
07434     31 71 02 F6 | 	mov	local04, arg04
07438     32 73 0A F6 | 	mov	local05, arg05 wz
0743c     35 75 02 F6 | 	mov	local06, local01
07440     00 76 06 F6 | 	mov	local07, #0
07444     37 78 06 56 |  if_ne	mov	local08, #55
07448     57 78 06 A6 |  if_e	mov	local08, #87
0744c                 | LR__0395
0744c     36 0B 03 F6 | 	mov	muldiva_, local02
07450     37 0D 03 F6 | 	mov	muldivb_, local03
07454     CC 00 A0 FD | 	call	#unsdivide_
07458     85 7B 02 F6 | 	mov	local09, muldiva_
0745c     0A 7A 1E F2 | 	cmp	local09, #10 wcz
07460     30 7A 06 C1 |  if_b	add	local09, #48
07464     3C 7B 02 31 |  if_ae	add	local09, local08
07468     3A 7B 42 FC | 	wrbyte	local09, local06
0746c     36 0B 03 F6 | 	mov	muldiva_, local02
07470     37 0D 03 F6 | 	mov	muldivb_, local03
07474     01 74 06 F1 | 	add	local06, #1
07478     CC 00 A0 FD | 	call	#unsdivide_
0747c     86 6D 0A F6 | 	mov	local02, muldivb_ wz
07480     01 76 06 F1 | 	add	local07, #1
07484     C4 FF 9F 5D |  if_ne	jmp	#LR__0395
07488     38 77 1A F2 | 	cmp	local07, local04 wcz
0748c     BC FF 9F CD |  if_b	jmp	#LR__0395
07490     3A 01 48 FC | 	wrbyte	#0, local06
07494     35 5D 02 F6 | 	mov	arg01, local01
07498     78 FE BF FD | 	call	#__system___strrev
0749c     3B 2B 02 F6 | 	mov	result1, local07
074a0     AF F0 03 F6 | 	mov	ptra, fp
074a4     BF 00 A0 FD | 	call	#popregs_
074a8                 | __system___uitoa_ret
074a8     2D 00 64 FD | 	ret
074ac                 | 
074ac                 | __system___gettxfunc
074ac     03 5A 05 F6 | 	mov	COUNT_, #3
074b0     B0 00 A0 FD | 	call	#pushregs_
074b4     30 FE BF FD | 	call	#__system____getftab
074b8     15 6B 0A F6 | 	mov	local01, result1 wz
074bc     14 00 90 AD |  if_e	jmp	#LR__0396
074c0     08 6A 06 F1 | 	add	local01, #8
074c4     35 6D 02 FB | 	rdlong	local02, local01
074c8     08 6A 86 F1 | 	sub	local01, #8
074cc     36 6F 0A F6 | 	mov	local03, local02 wz
074d0     08 00 90 5D |  if_ne	jmp	#LR__0397
074d4                 | LR__0396
074d4     00 2A 06 F6 | 	mov	result1, #0
074d8     0C 00 90 FD | 	jmp	#LR__0398
074dc                 | LR__0397
074dc     35 5D 02 F6 | 	mov	arg01, local01
074e0     09 5F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
074e4     88 E9 BF FD | 	call	#__system___make_methodptr
074e8                 | LR__0398
074e8     AF F0 03 F6 | 	mov	ptra, fp
074ec     BF 00 A0 FD | 	call	#popregs_
074f0                 | __system___gettxfunc_ret
074f0     2D 00 64 FD | 	ret
074f4                 | 
074f4                 | __system___getiolock_0145
074f4     03 5A 05 F6 | 	mov	COUNT_, #3
074f8     B0 00 A0 FD | 	call	#pushregs_
074fc     E8 FD BF FD | 	call	#__system____getftab
07500     15 6B 0A F6 | 	mov	local01, result1 wz
07504     14 00 90 AD |  if_e	jmp	#LR__0399
07508     08 6A 06 F1 | 	add	local01, #8
0750c     35 6D 02 FB | 	rdlong	local02, local01
07510     08 6A 86 F1 | 	sub	local01, #8
07514     36 6F 0A F6 | 	mov	local03, local02 wz
07518     10 00 90 5D |  if_ne	jmp	#LR__0400
0751c                 | LR__0399
0751c     18 14 06 F1 | 	add	ptr___system__dat__, #24
07520     0A 2B 02 F6 | 	mov	result1, ptr___system__dat__
07524     18 14 86 F1 | 	sub	ptr___system__dat__, #24
07528     08 00 90 FD | 	jmp	#LR__0401
0752c                 | LR__0400
0752c     0C 6A 06 F1 | 	add	local01, #12
07530     35 2B 02 F6 | 	mov	result1, local01
07534                 | LR__0401
07534     AF F0 03 F6 | 	mov	ptra, fp
07538     BF 00 A0 FD | 	call	#popregs_
0753c                 | __system___getiolock_0145_ret
0753c     2D 00 64 FD | 	ret
07540                 | 
07540                 | __system___closeraw
07540     06 5A 05 F6 | 	mov	COUNT_, #6
07544     B0 00 A0 FD | 	call	#pushregs_
07548     2E 6B 02 F6 | 	mov	local01, arg01
0754c     00 6C 06 F6 | 	mov	local02, #0
07550     08 6A 06 F1 | 	add	local01, #8
07554     35 6F 0A FB | 	rdlong	local03, local01 wz
07558     08 6A 86 F1 | 	sub	local01, #8
0755c     1C 00 90 5D |  if_ne	jmp	#LR__0402
07560     01 00 00 FF 
07564     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07568     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
0756c     01 00 00 FF 
07570     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07574     01 2A 66 F6 | 	neg	result1, #1
07578     90 00 90 FD | 	jmp	#LR__0405
0757c                 | LR__0402
0757c     28 6A 06 F1 | 	add	local01, #40
07580     35 6F 0A FB | 	rdlong	local03, local01 wz
07584     28 6A 86 F1 | 	sub	local01, #40
07588     2C 00 90 AD |  if_e	jmp	#LR__0403
0758c     28 6A 06 F1 | 	add	local01, #40
07590     35 6F 02 FB | 	rdlong	local03, local01
07594     28 6A 86 F1 | 	sub	local01, #40
07598     37 71 02 FB | 	rdlong	local04, local03
0759c     04 6E 06 F1 | 	add	local03, #4
075a0     37 73 02 FB | 	rdlong	local05, local03
075a4     35 5D 02 F6 | 	mov	arg01, local01
075a8     07 75 02 F6 | 	mov	local06, objptr
075ac     38 0F 02 F6 | 	mov	objptr, local04
075b0     2D 72 62 FD | 	call	local05
075b4     3A 0F 02 F6 | 	mov	objptr, local06
075b8                 | LR__0403
075b8     20 6A 06 F1 | 	add	local01, #32
075bc     35 6F 0A FB | 	rdlong	local03, local01 wz
075c0     20 6A 86 F1 | 	sub	local01, #32
075c4     30 00 90 AD |  if_e	jmp	#LR__0404
075c8     20 6A 06 F1 | 	add	local01, #32
075cc     35 6F 02 FB | 	rdlong	local03, local01
075d0     20 6A 86 F1 | 	sub	local01, #32
075d4     37 71 02 FB | 	rdlong	local04, local03
075d8     04 6E 06 F1 | 	add	local03, #4
075dc     37 73 02 FB | 	rdlong	local05, local03
075e0     35 5D 02 F6 | 	mov	arg01, local01
075e4     07 75 02 F6 | 	mov	local06, objptr
075e8     38 0F 02 F6 | 	mov	objptr, local04
075ec     2D 72 62 FD | 	call	local05
075f0     3A 0F 02 F6 | 	mov	objptr, local06
075f4     15 6D 02 F6 | 	mov	local02, result1
075f8                 | LR__0404
075f8     35 5D 02 F6 | 	mov	arg01, local01
075fc     00 5E 06 F6 | 	mov	arg02, #0
07600     30 60 06 F6 | 	mov	arg03, #48
07604     A0 00 A0 FD | 	call	#\builtin_bytefill_
07608     36 2B 02 F6 | 	mov	result1, local02
0760c                 | LR__0405
0760c     AF F0 03 F6 | 	mov	ptra, fp
07610     BF 00 A0 FD | 	call	#popregs_
07614                 | __system___closeraw_ret
07614     2D 00 64 FD | 	ret
07618                 | 
07618                 | __system____default_getc
07618     0C 5A 05 F6 | 	mov	COUNT_, #12
0761c     B0 00 A0 FD | 	call	#pushregs_
07620     2E 6B 02 F6 | 	mov	local01, arg01
07624     35 6D 02 FB | 	rdlong	local02, local01
07628     08 6C 06 F1 | 	add	local02, #8
0762c     36 6F 02 FB | 	rdlong	local03, local02
07630     08 6C 86 F1 | 	sub	local02, #8
07634     02 6E CE F7 | 	test	local03, #2 wz
07638     08 00 90 AD |  if_e	jmp	#LR__0406
0763c     35 5D 02 F6 | 	mov	arg01, local01
07640     FC 01 B0 FD | 	call	#__system____default_flush
07644                 | LR__0406
07644     08 6C 06 F1 | 	add	local02, #8
07648     36 6F 02 FB | 	rdlong	local03, local02
0764c     01 6E 46 F5 | 	or	local03, #1
07650     36 6F 62 FC | 	wrlong	local03, local02
07654     08 6C 86 F1 | 	sub	local02, #8
07658     36 71 0A FB | 	rdlong	local04, local02 wz
0765c     7C 00 90 5D |  if_ne	jmp	#LR__0408
07660     35 5D 02 F6 | 	mov	arg01, local01
07664     2E 73 02 FB | 	rdlong	local05, arg01
07668     0C 72 06 F1 | 	add	local05, #12
0766c     39 5F 02 F6 | 	mov	arg02, local05
07670     0C 72 86 F1 | 	sub	local05, #12
07674     10 5C 06 F1 | 	add	arg01, #16
07678     2E 75 02 FB | 	rdlong	local06, arg01
0767c     10 5C 86 F1 | 	sub	arg01, #16
07680     3A 77 02 FB | 	rdlong	local07, local06
07684     04 74 06 F1 | 	add	local06, #4
07688     3A 79 02 FB | 	rdlong	local08, local06
0768c     0A 60 C6 F9 | 	decod	arg03, #10
07690     07 7B 02 F6 | 	mov	local09, objptr
07694     3B 0F 02 F6 | 	mov	objptr, local07
07698     2D 78 62 FD | 	call	local08
0769c     3D 0F 02 F6 | 	mov	objptr, local09
076a0     15 7D 02 F6 | 	mov	local10, result1
076a4     00 7C 5E F2 | 	cmps	local10, #0 wcz
076a8     01 2A 66 C6 |  if_b	neg	result1, #1
076ac     28 00 90 CD |  if_b	jmp	#LR__0407
076b0     39 7D 62 FC | 	wrlong	local10, local05
076b4     0C 72 06 F1 | 	add	local05, #12
076b8     39 7F 02 F6 | 	mov	local11, local05
076bc     08 72 86 F1 | 	sub	local05, #8
076c0     39 7F 62 FC | 	wrlong	local11, local05
076c4     04 72 06 F1 | 	add	local05, #4
076c8     39 75 02 FB | 	rdlong	local06, local05
076cc     01 74 46 F5 | 	or	local06, #1
076d0     39 75 62 FC | 	wrlong	local06, local05
076d4     3E 2B 02 F6 | 	mov	result1, local10
076d8                 | LR__0407
076d8     15 71 02 F6 | 	mov	local04, result1
076dc                 | LR__0408
076dc     00 70 5E F2 | 	cmps	local04, #0 wcz
076e0     01 2A 66 E6 |  if_be	neg	result1, #1
076e4     1C 00 90 ED |  if_be	jmp	#LR__0409
076e8     01 70 86 F1 | 	sub	local04, #1
076ec     36 71 62 FC | 	wrlong	local04, local02
076f0     04 6C 06 F1 | 	add	local02, #4
076f4     36 81 02 FB | 	rdlong	local12, local02
076f8     40 2B C2 FA | 	rdbyte	result1, local12
076fc     01 80 06 F1 | 	add	local12, #1
07700     36 81 62 FC | 	wrlong	local12, local02
07704                 | LR__0409
07704     AF F0 03 F6 | 	mov	ptra, fp
07708     BF 00 A0 FD | 	call	#popregs_
0770c                 | __system____default_getc_ret
0770c     2D 00 64 FD | 	ret
07710                 | 
07710                 | __system____default_putc
07710     06 5A 05 F6 | 	mov	COUNT_, #6
07714     B0 00 A0 FD | 	call	#pushregs_
07718     2E 6B 02 F6 | 	mov	local01, arg01
0771c     2F 6D 02 F6 | 	mov	local02, arg02
07720     36 6F 02 FB | 	rdlong	local03, local02
07724     08 6E 06 F1 | 	add	local03, #8
07728     37 71 02 FB | 	rdlong	local04, local03
0772c     08 6E 86 F1 | 	sub	local03, #8
07730     01 70 CE F7 | 	test	local04, #1 wz
07734     08 00 90 AD |  if_e	jmp	#LR__0410
07738     36 5D 02 F6 | 	mov	arg01, local02
0773c     00 01 B0 FD | 	call	#__system____default_flush
07740                 | LR__0410
07740     08 6E 06 F1 | 	add	local03, #8
07744     37 71 02 FB | 	rdlong	local04, local03
07748     02 70 46 F5 | 	or	local04, #2
0774c     37 71 62 FC | 	wrlong	local04, local03
07750     08 6E 86 F1 | 	sub	local03, #8
07754     37 73 02 FB | 	rdlong	local05, local03
07758     39 75 02 F6 | 	mov	local06, local05
0775c     0C 6E 06 F1 | 	add	local03, #12
07760     37 75 02 F1 | 	add	local06, local03
07764     3A 6B 42 FC | 	wrbyte	local01, local06
07768     FF 6A 06 F5 | 	and	local01, #255
0776c     01 72 06 F1 | 	add	local05, #1
07770     0C 6E 86 F1 | 	sub	local03, #12
07774     37 73 62 FC | 	wrlong	local05, local03
07778     02 00 00 FF 
0777c     00 72 0E F2 | 	cmp	local05, ##1024 wz
07780     10 00 90 5D |  if_ne	jmp	#LR__0411
07784     36 5D 02 F6 | 	mov	arg01, local02
07788     B4 00 B0 FD | 	call	#__system____default_flush
0778c     00 2A 0E F2 | 	cmp	result1, #0 wz
07790     01 6A 66 56 |  if_ne	neg	local01, #1
07794                 | LR__0411
07794     35 2B 02 F6 | 	mov	result1, local01
07798     AF F0 03 F6 | 	mov	ptra, fp
0779c     BF 00 A0 FD | 	call	#popregs_
077a0                 | __system____default_putc_ret
077a0     2D 00 64 FD | 	ret
077a4                 | 
077a4                 | __system____default_putc_terminal
077a4     06 5A 05 F6 | 	mov	COUNT_, #6
077a8     B0 00 A0 FD | 	call	#pushregs_
077ac     2E 6B 02 F6 | 	mov	local01, arg01
077b0     2F 6D 02 F6 | 	mov	local02, arg02
077b4     36 6F 02 FB | 	rdlong	local03, local02
077b8     08 6E 06 F1 | 	add	local03, #8
077bc     37 71 02 FB | 	rdlong	local04, local03
077c0     08 6E 86 F1 | 	sub	local03, #8
077c4     01 70 CE F7 | 	test	local04, #1 wz
077c8     08 00 90 AD |  if_e	jmp	#LR__0412
077cc     36 5D 02 F6 | 	mov	arg01, local02
077d0     6C 00 B0 FD | 	call	#__system____default_flush
077d4                 | LR__0412
077d4     08 6E 06 F1 | 	add	local03, #8
077d8     37 71 02 FB | 	rdlong	local04, local03
077dc     02 70 46 F5 | 	or	local04, #2
077e0     37 71 62 FC | 	wrlong	local04, local03
077e4     08 6E 86 F1 | 	sub	local03, #8
077e8     37 73 02 FB | 	rdlong	local05, local03
077ec     39 75 02 F6 | 	mov	local06, local05
077f0     0C 6E 06 F1 | 	add	local03, #12
077f4     37 75 02 F1 | 	add	local06, local03
077f8     3A 6B 42 FC | 	wrbyte	local01, local06
077fc     FF 6A 06 F5 | 	and	local01, #255
07800     0C 6E 86 F1 | 	sub	local03, #12
07804     01 72 06 F1 | 	add	local05, #1
07808     37 73 62 FC | 	wrlong	local05, local03
0780c     0A 6A 0E F2 | 	cmp	local01, #10 wz
07810     0C 00 90 AD |  if_e	jmp	#LR__0413
07814     02 00 00 FF 
07818     00 72 0E F2 | 	cmp	local05, ##1024 wz
0781c     10 00 90 5D |  if_ne	jmp	#LR__0414
07820                 | LR__0413
07820     36 5D 02 F6 | 	mov	arg01, local02
07824     18 00 B0 FD | 	call	#__system____default_flush
07828     00 2A 0E F2 | 	cmp	result1, #0 wz
0782c     01 6A 66 56 |  if_ne	neg	local01, #1
07830                 | LR__0414
07830     35 2B 02 F6 | 	mov	result1, local01
07834     AF F0 03 F6 | 	mov	ptra, fp
07838     BF 00 A0 FD | 	call	#popregs_
0783c                 | __system____default_putc_terminal_ret
0783c     2D 00 64 FD | 	ret
07840                 | 
07840                 | __system____default_flush
07840     0F 5A 05 F6 | 	mov	COUNT_, #15
07844     B0 00 A0 FD | 	call	#pushregs_
07848     2E 6B 02 F6 | 	mov	local01, arg01
0784c     35 6D 02 FB | 	rdlong	local02, local01
07850     36 6F 02 FB | 	rdlong	local03, local02
07854     08 6C 06 F1 | 	add	local02, #8
07858     36 71 02 FB | 	rdlong	local04, local02
0785c     08 6C 86 F1 | 	sub	local02, #8
07860     02 70 CE F7 | 	test	local04, #2 wz
07864     B8 00 90 AD |  if_e	jmp	#LR__0417
07868     00 6E 5E F2 | 	cmps	local03, #0 wcz
0786c     30 01 90 ED |  if_be	jmp	#LR__0419
07870     08 6A 06 F1 | 	add	local01, #8
07874     35 71 02 FB | 	rdlong	local04, local01
07878     08 6A 86 F1 | 	sub	local01, #8
0787c     40 70 CE F7 | 	test	local04, #64 wz
07880     5C 00 90 AD |  if_e	jmp	#LR__0416
07884     08 6A 06 F1 | 	add	local01, #8
07888     35 71 02 FB | 	rdlong	local04, local01
0788c     08 6A 86 F1 | 	sub	local01, #8
07890     80 70 CE F7 | 	test	local04, #128 wz
07894     48 00 90 AD |  if_e	jmp	#LR__0415
07898     2C 6A 06 F1 | 	add	local01, #44
0789c     35 71 02 FB | 	rdlong	local04, local01
078a0     2C 6A 86 F1 | 	sub	local01, #44
078a4     38 73 02 FB | 	rdlong	local05, local04
078a8     04 70 06 F1 | 	add	local04, #4
078ac     38 75 02 FB | 	rdlong	local06, local04
078b0     35 5D 02 F6 | 	mov	arg01, local01
078b4     00 5E 06 F6 | 	mov	arg02, #0
078b8     02 60 06 F6 | 	mov	arg03, #2
078bc     07 77 02 F6 | 	mov	local07, objptr
078c0     39 0F 02 F6 | 	mov	objptr, local05
078c4     2D 74 62 FD | 	call	local06
078c8     3B 0F 02 F6 | 	mov	objptr, local07
078cc     08 6A 06 F1 | 	add	local01, #8
078d0     35 71 02 FB | 	rdlong	local04, local01
078d4     80 70 26 F5 | 	andn	local04, #128
078d8     35 71 62 FC | 	wrlong	local04, local01
078dc     08 6A 86 F1 | 	sub	local01, #8
078e0                 | LR__0415
078e0                 | LR__0416
078e0     0C 6C 06 F1 | 	add	local02, #12
078e4     36 5F 02 F6 | 	mov	arg02, local02
078e8     0C 6C 86 F1 | 	sub	local02, #12
078ec     14 6A 06 F1 | 	add	local01, #20
078f0     35 71 02 FB | 	rdlong	local04, local01
078f4     14 6A 86 F1 | 	sub	local01, #20
078f8     38 73 02 FB | 	rdlong	local05, local04
078fc     04 70 06 F1 | 	add	local04, #4
07900     38 75 02 FB | 	rdlong	local06, local04
07904     35 5D 02 F6 | 	mov	arg01, local01
07908     37 61 02 F6 | 	mov	arg03, local03
0790c     07 77 02 F6 | 	mov	local07, objptr
07910     39 0F 02 F6 | 	mov	objptr, local05
07914     2D 74 62 FD | 	call	local06
07918     3B 0F 02 F6 | 	mov	objptr, local07
0791c     80 00 90 FD | 	jmp	#LR__0419
07920                 | LR__0417
07920     08 6C 06 F1 | 	add	local02, #8
07924     36 71 02 FB | 	rdlong	local04, local02
07928     08 6C 86 F1 | 	sub	local02, #8
0792c     01 70 CE F7 | 	test	local04, #1 wz
07930     6C 00 90 AD |  if_e	jmp	#LR__0418
07934     00 6E 0E F2 | 	cmp	local03, #0 wz
07938     64 00 90 AD |  if_e	jmp	#LR__0418
0793c     2C 6A 06 F1 | 	add	local01, #44
07940     35 79 02 FB | 	rdlong	local08, local01
07944     2C 6A 86 F1 | 	sub	local01, #44
07948     3C 71 02 F6 | 	mov	local04, local08
0794c     38 73 02 FB | 	rdlong	local05, local04
07950     04 70 06 F1 | 	add	local04, #4
07954     38 7B 02 FB | 	rdlong	local09, local04
07958     04 70 86 F1 | 	sub	local04, #4
0795c     3D 75 02 F6 | 	mov	local06, local09
07960     35 7D 02 F6 | 	mov	local10, local01
07964     37 7F 02 F6 | 	mov	local11, local03
07968     3F 7F 62 F6 | 	neg	local11, local11
0796c     3F 81 02 F6 | 	mov	local12, local11
07970     01 76 06 F6 | 	mov	local07, #1
07974     3E 5D 02 F6 | 	mov	arg01, local10
07978     40 5F 02 F6 | 	mov	arg02, local12
0797c     01 60 06 F6 | 	mov	arg03, #1
07980     07 83 02 F6 | 	mov	local13, objptr
07984     39 0F 02 F6 | 	mov	objptr, local05
07988     2D 74 62 FD | 	call	local06
0798c     41 0F 02 F6 | 	mov	objptr, local13
07990     15 85 02 F6 | 	mov	local14, result1
07994     42 87 02 F6 | 	mov	local15, local14
07998     00 86 5E F2 | 	cmps	local15, #0 wcz
0799c     37 87 02 36 |  if_ae	mov	local15, local03
079a0                 | LR__0418
079a0                 | LR__0419
079a0     36 01 68 FC | 	wrlong	#0, local02
079a4     04 6C 06 F1 | 	add	local02, #4
079a8     36 01 68 FC | 	wrlong	#0, local02
079ac     04 6C 06 F1 | 	add	local02, #4
079b0     36 01 68 FC | 	wrlong	#0, local02
079b4     00 2A 06 F6 | 	mov	result1, #0
079b8     AF F0 03 F6 | 	mov	ptra, fp
079bc     BF 00 A0 FD | 	call	#popregs_
079c0                 | __system____default_flush_ret
079c0     2D 00 64 FD | 	ret
079c4                 | 
079c4                 | __system___rxtxioctl_0174
079c4     02 5A 05 F6 | 	mov	COUNT_, #2
079c8     B0 00 A0 FD | 	call	#pushregs_
079cc     2F 6B 02 F6 | 	mov	local01, arg02
079d0     30 6D 02 F6 | 	mov	local02, arg03
079d4     00 6B 0E F2 | 	cmp	local01, #256 wz
079d8     0C 00 90 AD |  if_e	jmp	#LR__0420
079dc     01 6B 0E F2 | 	cmp	local01, #257 wz
079e0     1C 00 90 AD |  if_e	jmp	#LR__0421
079e4     30 00 90 FD | 	jmp	#LR__0422
079e8                 | LR__0420
079e8     08 14 06 F1 | 	add	ptr___system__dat__, #8
079ec     0A 2B 02 FB | 	rdlong	result1, ptr___system__dat__
079f0     08 14 86 F1 | 	sub	ptr___system__dat__, #8
079f4     36 2B 62 FC | 	wrlong	result1, local02
079f8     00 2A 06 F6 | 	mov	result1, #0
079fc     30 00 90 FD | 	jmp	#LR__0423
07a00                 | LR__0421
07a00     36 5D 02 FB | 	rdlong	arg01, local02
07a04     08 14 06 F1 | 	add	ptr___system__dat__, #8
07a08     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07a0c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
07a10     00 2A 06 F6 | 	mov	result1, #0
07a14     18 00 90 FD | 	jmp	#LR__0423
07a18                 | LR__0422
07a18     01 00 00 FF 
07a1c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07a20     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
07a24     01 00 00 FF 
07a28     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07a2c     01 2A 66 F6 | 	neg	result1, #1
07a30                 | LR__0423
07a30     AF F0 03 F6 | 	mov	ptra, fp
07a34     BF 00 A0 FD | 	call	#popregs_
07a38                 | __system___rxtxioctl_0174_ret
07a38     2D 00 64 FD | 	ret
07a3c                 | 
07a3c                 | __system____dummy_flush_0175
07a3c     00 2A 06 F6 | 	mov	result1, #0
07a40                 | __system____dummy_flush_0175_ret
07a40     2D 00 64 FD | 	ret
07a44                 | 
07a44                 | __system___vfswrite
07a44     0B 5A 05 F6 | 	mov	COUNT_, #11
07a48     B0 00 A0 FD | 	call	#pushregs_
07a4c     2E 6B 02 F6 | 	mov	local01, arg01
07a50     2F 6D 02 F6 | 	mov	local02, arg02
07a54     30 6F 02 F6 | 	mov	local03, arg03
07a58     36 71 02 F6 | 	mov	local04, local02
07a5c     08 6A 06 F1 | 	add	local01, #8
07a60     35 73 02 FB | 	rdlong	local05, local01
07a64     08 6A 86 F1 | 	sub	local01, #8
07a68     02 72 CE F7 | 	test	local05, #2 wz
07a6c     1C 00 90 5D |  if_ne	jmp	#LR__0424
07a70     01 00 00 FF 
07a74     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07a78     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07a7c     01 00 00 FF 
07a80     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07a84     01 2A 66 F6 | 	neg	result1, #1
07a88     70 01 90 FD | 	jmp	#LR__0432
07a8c                 | LR__0424
07a8c     08 6A 06 F1 | 	add	local01, #8
07a90     35 73 02 FB | 	rdlong	local05, local01
07a94     08 6A 86 F1 | 	sub	local01, #8
07a98     40 72 CE F7 | 	test	local05, #64 wz
07a9c     5C 00 90 AD |  if_e	jmp	#LR__0426
07aa0     08 6A 06 F1 | 	add	local01, #8
07aa4     35 73 02 FB | 	rdlong	local05, local01
07aa8     08 6A 86 F1 | 	sub	local01, #8
07aac     80 72 CE F7 | 	test	local05, #128 wz
07ab0     48 00 90 AD |  if_e	jmp	#LR__0425
07ab4     2C 6A 06 F1 | 	add	local01, #44
07ab8     35 73 02 FB | 	rdlong	local05, local01
07abc     2C 6A 86 F1 | 	sub	local01, #44
07ac0     39 75 02 FB | 	rdlong	local06, local05
07ac4     04 72 06 F1 | 	add	local05, #4
07ac8     39 77 02 FB | 	rdlong	local07, local05
07acc     35 5D 02 F6 | 	mov	arg01, local01
07ad0     00 5E 06 F6 | 	mov	arg02, #0
07ad4     02 60 06 F6 | 	mov	arg03, #2
07ad8     07 79 02 F6 | 	mov	local08, objptr
07adc     3A 0F 02 F6 | 	mov	objptr, local06
07ae0     2D 76 62 FD | 	call	local07
07ae4     3C 0F 02 F6 | 	mov	objptr, local08
07ae8     08 6A 06 F1 | 	add	local01, #8
07aec     35 73 02 FB | 	rdlong	local05, local01
07af0     80 72 26 F5 | 	andn	local05, #128
07af4     35 73 62 FC | 	wrlong	local05, local01
07af8     08 6A 86 F1 | 	sub	local01, #8
07afc                 | LR__0425
07afc                 | LR__0426
07afc     14 6A 06 F1 | 	add	local01, #20
07b00     35 73 0A FB | 	rdlong	local05, local01 wz
07b04     14 6A 86 F1 | 	sub	local01, #20
07b08     7C 00 90 AD |  if_e	jmp	#LR__0428
07b0c     14 6A 06 F1 | 	add	local01, #20
07b10     35 73 02 FB | 	rdlong	local05, local01
07b14     14 6A 86 F1 | 	sub	local01, #20
07b18     39 75 02 FB | 	rdlong	local06, local05
07b1c     04 72 06 F1 | 	add	local05, #4
07b20     39 77 02 FB | 	rdlong	local07, local05
07b24     36 5F 02 F6 | 	mov	arg02, local02
07b28     37 61 02 F6 | 	mov	arg03, local03
07b2c     35 5D 02 F6 | 	mov	arg01, local01
07b30     07 79 02 F6 | 	mov	local08, objptr
07b34     3A 0F 02 F6 | 	mov	objptr, local06
07b38     2D 76 62 FD | 	call	local07
07b3c     3C 0F 02 F6 | 	mov	objptr, local08
07b40     15 7B 02 F6 | 	mov	local09, result1
07b44     00 7A 5E F2 | 	cmps	local09, #0 wcz
07b48     34 00 90 3D |  if_ae	jmp	#LR__0427
07b4c     08 6A 06 F1 | 	add	local01, #8
07b50     35 73 02 FB | 	rdlong	local05, local01
07b54     20 72 46 F5 | 	or	local05, #32
07b58     35 73 62 FC | 	wrlong	local05, local01
07b5c     01 00 00 FF 
07b60     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07b64     0A 7B 62 FC | 	wrlong	local09, ptr___system__dat__
07b68     01 00 00 FF 
07b6c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07b70     00 7A 0E F2 | 	cmp	local09, #0 wz
07b74     01 2A 66 56 |  if_ne	neg	result1, #1
07b78     00 2A 06 A6 |  if_e	mov	result1, #0
07b7c     7C 00 90 FD | 	jmp	#LR__0432
07b80                 | LR__0427
07b80     3D 2B 02 F6 | 	mov	result1, local09
07b84     74 00 90 FD | 	jmp	#LR__0432
07b88                 | LR__0428
07b88     18 6A 06 F1 | 	add	local01, #24
07b8c     35 7D 0A FB | 	rdlong	local10, local01 wz
07b90     18 6A 86 F1 | 	sub	local01, #24
07b94     1C 00 90 5D |  if_ne	jmp	#LR__0429
07b98     01 00 00 FF 
07b9c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07ba0     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07ba4     01 00 00 FF 
07ba8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07bac     01 2A 66 F6 | 	neg	result1, #1
07bb0     48 00 90 FD | 	jmp	#LR__0432
07bb4                 | LR__0429
07bb4     00 7A 06 F6 | 	mov	local09, #0
07bb8                 | LR__0430
07bb8     00 6E 1E F2 | 	cmp	local03, #0 wcz
07bbc     38 00 90 ED |  if_be	jmp	#LR__0431
07bc0     3E 73 02 F6 | 	mov	local05, local10
07bc4     39 75 02 FB | 	rdlong	local06, local05
07bc8     04 72 06 F1 | 	add	local05, #4
07bcc     39 77 02 FB | 	rdlong	local07, local05
07bd0     38 5D C2 FA | 	rdbyte	arg01, local04
07bd4     35 5F 02 F6 | 	mov	arg02, local01
07bd8     07 7F 02 F6 | 	mov	local11, objptr
07bdc     3A 0F 02 F6 | 	mov	objptr, local06
07be0     01 70 06 F1 | 	add	local04, #1
07be4     2D 76 62 FD | 	call	local07
07be8     3F 0F 02 F6 | 	mov	objptr, local11
07bec     15 7B 02 F1 | 	add	local09, result1
07bf0     01 6E 86 F1 | 	sub	local03, #1
07bf4     C0 FF 9F FD | 	jmp	#LR__0430
07bf8                 | LR__0431
07bf8     3D 2B 02 F6 | 	mov	result1, local09
07bfc                 | LR__0432
07bfc     AF F0 03 F6 | 	mov	ptra, fp
07c00     BF 00 A0 FD | 	call	#popregs_
07c04                 | __system___vfswrite_ret
07c04     2D 00 64 FD | 	ret
07c08                 | 
07c08                 | __system___vfsread
07c08     0F 5A 05 F6 | 	mov	COUNT_, #15
07c0c     B0 00 A0 FD | 	call	#pushregs_
07c10     2C F0 07 F1 | 	add	ptra, #44
07c14     04 5E 05 F1 | 	add	fp, #4
07c18     AF 5C 62 FC | 	wrlong	arg01, fp
07c1c     04 5E 05 F1 | 	add	fp, #4
07c20     AF 5E 62 FC | 	wrlong	arg02, fp
07c24     04 5E 05 F1 | 	add	fp, #4
07c28     AF 60 62 FC | 	wrlong	arg03, fp
07c2c     04 5E 85 F1 | 	sub	fp, #4
07c30     AF 6A 02 FB | 	rdlong	local01, fp
07c34     14 5E 05 F1 | 	add	fp, #20
07c38     AF 6A 62 FC | 	wrlong	local01, fp
07c3c     04 5E 05 F1 | 	add	fp, #4
07c40     AF 00 68 FC | 	wrlong	#0, fp
07c44     1C 5E 85 F1 | 	sub	fp, #28
07c48     AF 6C 02 FB | 	rdlong	local02, fp
07c4c     04 5E 85 F1 | 	sub	fp, #4
07c50     08 6C 06 F1 | 	add	local02, #8
07c54     36 6B 02 FB | 	rdlong	local01, local02
07c58     01 6A CE F7 | 	test	local01, #1 wz
07c5c     1C 00 90 5D |  if_ne	jmp	#LR__0433
07c60     01 00 00 FF 
07c64     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07c68     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07c6c     01 00 00 FF 
07c70     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07c74     01 2A 66 F6 | 	neg	result1, #1
07c78     9C 02 90 FD | 	jmp	#LR__0441
07c7c                 | LR__0433
07c7c     04 5E 05 F1 | 	add	fp, #4
07c80     AF 6A 02 FB | 	rdlong	local01, fp
07c84     04 5E 85 F1 | 	sub	fp, #4
07c88     10 6A 06 F1 | 	add	local01, #16
07c8c     35 6F 0A FB | 	rdlong	local03, local01 wz
07c90     B4 00 90 AD |  if_e	jmp	#LR__0435
07c94     04 5E 05 F1 | 	add	fp, #4
07c98     AF 70 02 FB | 	rdlong	local04, fp
07c9c     10 70 06 F1 | 	add	local04, #16
07ca0     38 6B 02 FB | 	rdlong	local01, local04
07ca4     35 6D 02 FB | 	rdlong	local02, local01
07ca8     04 6A 06 F1 | 	add	local01, #4
07cac     35 6F 02 FB | 	rdlong	local03, local01
07cb0     AF 5C 02 FB | 	rdlong	arg01, fp
07cb4     04 5E 05 F1 | 	add	fp, #4
07cb8     AF 5E 02 FB | 	rdlong	arg02, fp
07cbc     04 5E 05 F1 | 	add	fp, #4
07cc0     AF 60 02 FB | 	rdlong	arg03, fp
07cc4     0C 5E 85 F1 | 	sub	fp, #12
07cc8     07 73 02 F6 | 	mov	local05, objptr
07ccc     36 0F 02 F6 | 	mov	objptr, local02
07cd0     2D 6E 62 FD | 	call	local03
07cd4     39 0F 02 F6 | 	mov	objptr, local05
07cd8     10 5E 05 F1 | 	add	fp, #16
07cdc     AF 2A 62 FC | 	wrlong	result1, fp
07ce0     10 5E 85 F1 | 	sub	fp, #16
07ce4     00 2A 5E F2 | 	cmps	result1, #0 wcz
07ce8     4C 00 90 3D |  if_ae	jmp	#LR__0434
07cec     04 5E 05 F1 | 	add	fp, #4
07cf0     AF 6A 02 FB | 	rdlong	local01, fp
07cf4     35 71 02 F6 | 	mov	local04, local01
07cf8     08 70 06 F1 | 	add	local04, #8
07cfc     38 6F 02 FB | 	rdlong	local03, local04
07d00     20 6E 46 F5 | 	or	local03, #32
07d04     08 6A 06 F1 | 	add	local01, #8
07d08     35 6F 62 FC | 	wrlong	local03, local01
07d0c     0C 5E 05 F1 | 	add	fp, #12
07d10     AF 5C 0A FB | 	rdlong	arg01, fp wz
07d14     10 5E 85 F1 | 	sub	fp, #16
07d18     01 00 00 FF 
07d1c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d20     0A 5D 62 FC | 	wrlong	arg01, ptr___system__dat__
07d24     01 00 00 FF 
07d28     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d2c     01 2A 66 56 |  if_ne	neg	result1, #1
07d30     00 2A 06 A6 |  if_e	mov	result1, #0
07d34     E0 01 90 FD | 	jmp	#LR__0441
07d38                 | LR__0434
07d38     10 5E 05 F1 | 	add	fp, #16
07d3c     AF 2A 02 FB | 	rdlong	result1, fp
07d40     10 5E 85 F1 | 	sub	fp, #16
07d44     D0 01 90 FD | 	jmp	#LR__0441
07d48                 | LR__0435
07d48     04 5E 05 F1 | 	add	fp, #4
07d4c     AF 6A 02 FB | 	rdlong	local01, fp
07d50     1C 6A 06 F1 | 	add	local01, #28
07d54     35 6F 02 FB | 	rdlong	local03, local01
07d58     14 5E 05 F1 | 	add	fp, #20
07d5c     AF 6E 62 FC | 	wrlong	local03, fp
07d60     AF 6A 0A FB | 	rdlong	local01, fp wz
07d64     18 5E 85 F1 | 	sub	fp, #24
07d68     1C 00 90 5D |  if_ne	jmp	#LR__0436
07d6c     01 00 00 FF 
07d70     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
07d74     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07d78     01 00 00 FF 
07d7c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
07d80     01 2A 66 F6 | 	neg	result1, #1
07d84     90 01 90 FD | 	jmp	#LR__0441
07d88                 | LR__0436
07d88     04 5E 05 F1 | 	add	fp, #4
07d8c     AF 6A 02 FB | 	rdlong	local01, fp
07d90     04 5E 85 F1 | 	sub	fp, #4
07d94     24 6A 06 F1 | 	add	local01, #36
07d98     35 6F 0A FB | 	rdlong	local03, local01 wz
07d9c     A0 00 90 AD |  if_e	jmp	#LR__0438
07da0     24 5E 05 F1 | 	add	fp, #36
07da4     AF 74 02 F6 | 	mov	local06, fp
07da8     20 5E 85 F1 | 	sub	fp, #32
07dac     AF 76 02 FB | 	rdlong	local07, fp
07db0     3B 71 02 F6 | 	mov	local04, local07
07db4     24 70 06 F1 | 	add	local04, #36
07db8     38 79 02 FB | 	rdlong	local08, local04
07dbc     3C 6B 02 F6 | 	mov	local01, local08
07dc0     35 6D 02 FB | 	rdlong	local02, local01
07dc4     04 6A 06 F1 | 	add	local01, #4
07dc8     35 7B 02 FB | 	rdlong	local09, local01
07dcc     3D 6F 02 F6 | 	mov	local03, local09
07dd0     3B 7D 02 F6 | 	mov	local10, local07
07dd4     04 5E 85 F1 | 	sub	fp, #4
07dd8     3E 7F 02 F6 | 	mov	local11, local10
07ddc     00 81 06 F6 | 	mov	local12, #256
07de0     3A 83 02 F6 | 	mov	local13, local06
07de4     3F 5D 02 F6 | 	mov	arg01, local11
07de8     00 5F 06 F6 | 	mov	arg02, #256
07dec     41 61 02 F6 | 	mov	arg03, local13
07df0     07 85 02 F6 | 	mov	local14, objptr
07df4     36 0F 02 F6 | 	mov	objptr, local02
07df8     2D 6E 62 FD | 	call	local03
07dfc     42 0F 02 F6 | 	mov	objptr, local14
07e00     15 87 02 F6 | 	mov	local15, result1
07e04     10 5E 05 F1 | 	add	fp, #16
07e08     AF 86 62 FC | 	wrlong	local15, fp
07e0c     AF 6C 0A FB | 	rdlong	local02, fp wz
07e10     10 5E 85 F1 | 	sub	fp, #16
07e14     28 00 90 5D |  if_ne	jmp	#LR__0437
07e18     24 5E 05 F1 | 	add	fp, #36
07e1c     AF 70 02 FB | 	rdlong	local04, fp
07e20     24 5E 85 F1 | 	sub	fp, #36
07e24     38 6F 02 F6 | 	mov	local03, local04
07e28     02 6E 0E F5 | 	and	local03, #2 wz
07e2c     10 00 90 AD |  if_e	jmp	#LR__0437
07e30     01 6A 06 F6 | 	mov	local01, #1
07e34     20 5E 05 F1 | 	add	fp, #32
07e38     AF 02 68 FC | 	wrlong	#1, fp
07e3c     20 5E 85 F1 | 	sub	fp, #32
07e40                 | LR__0437
07e40                 | LR__0438
07e40     10 5E 05 F1 | 	add	fp, #16
07e44     AF 00 68 FC | 	wrlong	#0, fp
07e48     10 5E 85 F1 | 	sub	fp, #16
07e4c                 | LR__0439
07e4c     0C 5E 05 F1 | 	add	fp, #12
07e50     AF 6A 02 FB | 	rdlong	local01, fp
07e54     0C 5E 85 F1 | 	sub	fp, #12
07e58     00 6A 1E F2 | 	cmp	local01, #0 wcz
07e5c     AC 00 90 ED |  if_be	jmp	#LR__0440
07e60     18 5E 05 F1 | 	add	fp, #24
07e64     AF 6A 02 FB | 	rdlong	local01, fp
07e68     35 6D 02 FB | 	rdlong	local02, local01
07e6c     04 6A 06 F1 | 	add	local01, #4
07e70     35 6F 02 FB | 	rdlong	local03, local01
07e74     14 5E 85 F1 | 	sub	fp, #20
07e78     AF 5C 02 FB | 	rdlong	arg01, fp
07e7c     04 5E 85 F1 | 	sub	fp, #4
07e80     07 7F 02 F6 | 	mov	local11, objptr
07e84     36 0F 02 F6 | 	mov	objptr, local02
07e88     2D 6E 62 FD | 	call	local03
07e8c     3F 0F 02 F6 | 	mov	objptr, local11
07e90     15 7D 02 F6 | 	mov	local10, result1
07e94     14 5E 05 F1 | 	add	fp, #20
07e98     AF 7C 62 FC | 	wrlong	local10, fp
07e9c     14 5E 85 F1 | 	sub	fp, #20
07ea0     00 7C 5E F2 | 	cmps	local10, #0 wcz
07ea4     64 00 90 CD |  if_b	jmp	#LR__0440
07ea8     1C 5E 05 F1 | 	add	fp, #28
07eac     AF 6A 02 FB | 	rdlong	local01, fp
07eb0     35 6F 02 F6 | 	mov	local03, local01
07eb4     01 6E 06 F1 | 	add	local03, #1
07eb8     AF 6E 62 FC | 	wrlong	local03, fp
07ebc     08 5E 85 F1 | 	sub	fp, #8
07ec0     AF 76 02 FB | 	rdlong	local07, fp
07ec4     35 77 42 FC | 	wrbyte	local07, local01
07ec8     04 5E 85 F1 | 	sub	fp, #4
07ecc     AF 6A 02 FB | 	rdlong	local01, fp
07ed0     01 6A 06 F1 | 	add	local01, #1
07ed4     AF 6A 62 FC | 	wrlong	local01, fp
07ed8     04 5E 85 F1 | 	sub	fp, #4
07edc     AF 6A 02 FB | 	rdlong	local01, fp
07ee0     01 6A 86 F1 | 	sub	local01, #1
07ee4     AF 6A 62 FC | 	wrlong	local01, fp
07ee8     14 5E 05 F1 | 	add	fp, #20
07eec     AF 6A 0A FB | 	rdlong	local01, fp wz
07ef0     20 5E 85 F1 | 	sub	fp, #32
07ef4     54 FF 9F AD |  if_e	jmp	#LR__0439
07ef8     14 5E 05 F1 | 	add	fp, #20
07efc     AF 6E 02 FB | 	rdlong	local03, fp
07f00     14 5E 85 F1 | 	sub	fp, #20
07f04     0A 6E 0E F2 | 	cmp	local03, #10 wz
07f08     40 FF 9F 5D |  if_ne	jmp	#LR__0439
07f0c                 | LR__0440
07f0c     10 5E 05 F1 | 	add	fp, #16
07f10     AF 2A 02 FB | 	rdlong	result1, fp
07f14     10 5E 85 F1 | 	sub	fp, #16
07f18                 | LR__0441
07f18     AF F0 03 F6 | 	mov	ptra, fp
07f1c     BF 00 A0 FD | 	call	#popregs_
07f20                 | __system___vfsread_ret
07f20     2D 00 64 FD | 	ret
07f24                 | 
07f24                 | ' 	
07f24                 | ' 	FUNCTION pfunc(c as integer) as integer
07f24                 | ___strs_cl_pfunc
07f24                 | ' 		if (i < 16) then
07f24     04 0E 06 F1 | 	add	objptr, #4
07f28     07 31 02 FB | 	rdlong	_var01, objptr
07f2c     04 0E 86 F1 | 	sub	objptr, #4
07f30     10 30 5E F2 | 	cmps	_var01, #16 wcz
07f34     2C 00 90 3D |  if_ae	jmp	#LR__0442
07f38     07 33 02 FB | 	rdlong	_var02, objptr
07f3c     04 0E 06 F1 | 	add	objptr, #4
07f40     07 35 02 FB | 	rdlong	_var03, objptr
07f44     19 35 02 F1 | 	add	_var03, _var02
07f48     1A 5D 42 FC | 	wrbyte	arg01, _var03
07f4c     07 31 02 FB | 	rdlong	_var01, objptr
07f50     01 30 06 F1 | 	add	_var01, #1
07f54     07 31 62 FC | 	wrlong	_var01, objptr
07f58     04 0E 86 F1 | 	sub	objptr, #4
07f5c                 | ' 			p(i) = c
07f5c                 | ' 			i = i+1
07f5c                 | ' 			return 1
07f5c     01 2A 06 F6 | 	mov	result1, #1
07f60     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
07f64                 | LR__0442
07f64                 | ' 			return -1
07f64     01 2A 66 F6 | 	neg	result1, #1
07f68                 | ___strs_cl_pfunc_ret
07f68     2D 00 64 FD | 	ret
07f6c                 | 
07f6c                 | __struct__s_vfs_file_t_putchar
07f6c     04 5A 05 F6 | 	mov	COUNT_, #4
07f70     B0 00 A0 FD | 	call	#pushregs_
07f74     18 0E 06 F1 | 	add	objptr, #24
07f78     07 6B 0A FB | 	rdlong	local01, objptr wz
07f7c     18 0E 86 F1 | 	sub	objptr, #24
07f80     00 2A 06 A6 |  if_e	mov	result1, #0
07f84     3C 00 90 AD |  if_e	jmp	#LR__0443
07f88     18 0E 06 F1 | 	add	objptr, #24
07f8c     07 6B 02 FB | 	rdlong	local01, objptr
07f90     18 0E 86 F1 | 	sub	objptr, #24
07f94     35 6D 02 FB | 	rdlong	local02, local01
07f98     04 6A 06 F1 | 	add	local01, #4
07f9c     35 6F 02 FB | 	rdlong	local03, local01
07fa0     07 5F 02 F6 | 	mov	arg02, objptr
07fa4     07 71 02 F6 | 	mov	local04, objptr
07fa8     36 0F 02 F6 | 	mov	objptr, local02
07fac     2D 6E 62 FD | 	call	local03
07fb0     38 0F 02 F6 | 	mov	objptr, local04
07fb4     00 2A 5E F2 | 	cmps	result1, #0 wcz
07fb8     00 6A 06 C6 |  if_b	mov	local01, #0
07fbc     01 6A 06 36 |  if_ae	mov	local01, #1
07fc0     35 2B 02 F6 | 	mov	result1, local01
07fc4                 | LR__0443
07fc4     AF F0 03 F6 | 	mov	ptra, fp
07fc8     BF 00 A0 FD | 	call	#popregs_
07fcc                 | __struct__s_vfs_file_t_putchar_ret
07fcc     2D 00 64 FD | 	ret
07fd0                 | 
07fd0                 | __struct__s_vfs_file_t_getchar
07fd0     04 5A 05 F6 | 	mov	COUNT_, #4
07fd4     B0 00 A0 FD | 	call	#pushregs_
07fd8     1C 0E 06 F1 | 	add	objptr, #28
07fdc     07 6B 0A FB | 	rdlong	local01, objptr wz
07fe0     1C 0E 86 F1 | 	sub	objptr, #28
07fe4     01 2A 66 A6 |  if_e	neg	result1, #1
07fe8     2C 00 90 AD |  if_e	jmp	#LR__0444
07fec                 | '         return getcf(__this);
07fec     1C 0E 06 F1 | 	add	objptr, #28
07ff0     07 6B 02 FB | 	rdlong	local01, objptr
07ff4     1C 0E 86 F1 | 	sub	objptr, #28
07ff8     35 6D 02 FB | 	rdlong	local02, local01
07ffc     04 6A 06 F1 | 	add	local01, #4
08000     35 6F 02 FB | 	rdlong	local03, local01
08004     07 5D 02 F6 | 	mov	arg01, objptr
08008     07 71 02 F6 | 	mov	local04, objptr
0800c     36 0F 02 F6 | 	mov	objptr, local02
08010     2D 6E 62 FD | 	call	local03
08014     38 0F 02 F6 | 	mov	objptr, local04
08018                 | LR__0444
08018     AF F0 03 F6 | 	mov	ptra, fp
0801c     BF 00 A0 FD | 	call	#popregs_
08020                 | __struct__s_vfs_file_t_getchar_ret
08020     2D 00 64 FD | 	ret
08024                 | 
08024                 | __struct___bas_wrap_sender_tx
08024     04 5A 05 F6 | 	mov	COUNT_, #4
08028     B0 00 A0 FD | 	call	#pushregs_
0802c     07 6B 02 FB | 	rdlong	local01, objptr
08030     35 6D 02 FB | 	rdlong	local02, local01
08034     04 6A 06 F1 | 	add	local01, #4
08038     35 6F 02 FB | 	rdlong	local03, local01
0803c     07 71 02 F6 | 	mov	local04, objptr
08040     36 0F 02 F6 | 	mov	objptr, local02
08044     2D 6E 62 FD | 	call	local03
08048     38 0F 02 F6 | 	mov	objptr, local04
0804c     01 2A 06 F6 | 	mov	result1, #1
08050     AF F0 03 F6 | 	mov	ptra, fp
08054     BF 00 A0 FD | 	call	#popregs_
08058                 | __struct___bas_wrap_sender_tx_ret
08058     2D 00 64 FD | 	ret
0805c                 | 
0805c                 | LR__0445
0805c     20          | 	byte	" "
0805d     00          | 	byte	0
0805e                 | LR__0446
0805e                 | 	byte	
0805e     00          | 	byte	0
0805f                 | LR__0447
0805f                 | 	byte	
0805f     00          | 	byte	0
08060                 | LR__0448
08060     20 21 21 21 
08064     20 63 6F 72 
08068     72 75 70 74 
0806c     65 64 20 68 
08070     65 61 70 3F 
08074     3F 3F 20 21 
08078     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0807b     00          | 	byte	0
0807c                 | LR__0449
0807c     20 21 21 21 
08080     20 6F 75 74 
08084     20 6F 66 20 
08088     68 65 61 70 
0808c     20 6D 65 6D 
08090     6F 72 79 20 
08094     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
08098     00          | 	byte	0
08099                 | LR__0450
08099     20 21 21 21 
0809d     20 63 6F 72 
080a1     72 75 70 74 
080a5     65 64 20 68 
080a9     65 61 70 20 
080ad     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
080b1     00          | 	byte	0
080b2                 | LR__0451
080b2     4E 61 6D 65 
080b6     20 20 20 20 
080ba     20 20 20 20 
080be     20 20 20 20 
080c2     20 20 20 20 
080c6     20 20 20 6C 
080ca     65 6E 20 20 
080ce     20 66 74 20 
080d2     76 6F 6C 20 
080d6     72 65 70 20 
080da     20 20 72 2E 
080de     6C 65 6E 20 
080e2     20 20 20 20 
080e6     20 20 20 20 
080ea     4E 61 6D 65 
080ee     20 20 20 20 
080f2     20 20 20 20 
080f6     20 20 20 20 
080fa     20 20 20 20 
080fe     20 20 20 6C 
08102     65 6E 20 20 
08106     20 66 74 20 
0810a     76 6F 6C 20 
0810e     72 65 70 20 
08112     20 20 72 2E 
08116     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
0811a     00          | 	byte	0
0811b                 | LR__0452
0811b     53          | 	byte	"S"
0811c     00          | 	byte	0
0811d                 | LR__0453
0811d     20 20 20 20 
08121     20 20 20 20 
08125     20 20 20 20 
08129     20 20 20 20 
0812d     20 20 20 20 
08131     20 20       | 	byte	"                      "
08133     00          | 	byte	0
08134                 | LR__0454
08134     20          | 	byte	" "
08135     00          | 	byte	0
08136                 | LR__0455
08136     73 61 6D 70 
0813a     6C 65 73 20 
0813e     6D 6F 64 75 
08142     6C 65       | 	byte	"samples module"
08144     00          | 	byte	0
08145     00 00 00    | 	alignl
08148                 | _dat_
08148     6A 75 6E 67 
0814c     6C 65 32 00 
08150     00 00 00 00 
08154     00 00 00 00 | module file "../../../mod/jungle.mod"
08158     00 00 00 00 
0815c     73 74 2D 30 
08160     33 3A 53 69 
08164     6E 65 43 5A | 	byte	$00, $00, $00, $00, $73, $74, $2d, $30, $33, $3a, $53, $69, $6e, $65, $43, $5a
08168     00 00 00 00 
0816c     00 00 00 00 
08170     00 00       | 	byte	$00[10]
08172     07 9E 00 40 
08176     00 F6 04 31 
0817a     73 74 2D 30 
0817e     34 3A 54 69 | 	byte	$07, $9e, $00, $40, $00, $f6, $04, $31, $73, $74, $2d, $30, $34, $3a, $54, $69
08182     6E 65 57 61 
08186     76 65 00 00 
0818a     00 00 00 00 
0818e     00 00 12 D1 | 	byte	$6e, $65, $57, $61, $76, $65, $00, $00, $00, $00, $00, $00, $00, $00, $12, $d1
08192     00 40 00 00 
08196     00 01 73 74 
0819a     2D 30 34 3A 
0819e     53 79 6E 74 | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $34, $3a, $53, $79, $6e, $74
081a2     68 65 42 61 
081a6     73 73 00 00 
081aa     00 00 00 00 
081ae     0F 6E 00 40 | 	byte	$68, $65, $42, $61, $73, $73, $00, $00, $00, $00, $00, $00, $0f, $6e, $00, $40
081b2     00 00 00 01 
081b6     73 74 2D 30 
081ba     32 3A 48 61 
081be     6C 6C 42 72 | 	byte	$00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $48, $61, $6c, $6c, $42, $72
081c2     61 73 73 00 
081c6     00 00 00 00 
081ca     00 00 12 5C 
081ce     00 40 00 00 | 	byte	$61, $73, $73, $00, $00, $00, $00, $00, $00, $00, $12, $5c, $00, $40, $00, $00
081d2     00 01 73 74 
081d6     2D 30 31 3A 
081da     42 61 73 73 
081de     44 72 75 6D | 	byte	$00, $01, $73, $74, $2d, $30, $31, $3a, $42, $61, $73, $73, $44, $72, $75, $6d
081e2     33 00 00 00 
081e6     00 00 00 00 
081ea     05 B3 00 40 
081ee     00 00 00 01 | 	byte	$33, $00, $00, $00, $00, $00, $00, $00, $05, $b3, $00, $40, $00, $00, $00, $01
081f2     73 74 2D 30 
081f6     33 3A 50 6F 
081fa     70 53 6E 61 
081fe     72 65 32 00 | 	byte	$73, $74, $2d, $30, $33, $3a, $50, $6f, $70, $53, $6e, $61, $72, $65, $32, $00
08202     00 00 00 00 
08206     00 00       | 	byte	$00[6]
08208     07 D0 00 40 
0820c     00 00 00 01 
08210     73 74 2D 30 
08214     32 3A 48 69 | 	byte	$07, $d0, $00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $48, $69
08218     48 61 74 32 
0821c     00 00 00 00 
08220     00 00 00 00 
08224     00 00 03 E8 | 	byte	$48, $61, $74, $32, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $e8
08228     00 40 00 00 
0822c     00 01 73 74 
08230     2D 30 32 3A 
08234     4E 69 63 65 | 	byte	$00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $32, $3a, $4e, $69, $63, $65
08238     00 00 00 00 
0823c     00 00 00 00 
08240     00 00 00 00 | 	byte	$00[12]
08244     0C E4 00 40 
08248     00 00 00 01 
0824c     73 74 2D 30 
08250     31 3A 44 69 | 	byte	$0c, $e4, $00, $40, $00, $00, $00, $01, $73, $74, $2d, $30, $31, $3a, $44, $69
08254     67 44 75 67 
08258     00 00 00 00 
0825c     00 00 00 00 
08260     00 00 06 0E | 	byte	$67, $44, $75, $67, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $0e
08264     00 40 00 00 
08268     00 01 00 00 
0826c     00 00 00 00 
08270     00 00 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08274     00 00 00 00 
      ...             
084f8     00 00 00 00 
084fc     00 00       | 	byte	$00[650]
084fe     23 00 00 01 
08502     02 02 03 04 
08506     05 06 07 02 
0850a     02 03 04 05 | 	byte	$23, $00, $00, $01, $02, $02, $03, $04, $05, $06, $07, $02, $02, $03, $04, $05
0850e     08 09 0A 0A 
08512     0B 0C 0D 0D 
08516     0E 02 02 03 
0851a     02 02 03 04 | 	byte	$08, $09, $0a, $0a, $0b, $0c, $0d, $0d, $0e, $02, $02, $03, $02, $02, $03, $04
0851e     05 06 0F 10 
08522     11 00 00 00 
08526     00 00 00 00 
0852a     00 00 00 00 | 	byte	$05, $06, $0f, $10, $11, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0852e     00 00 00 00 
      ...             
0857a     00 00 00 00 
0857e     00 00       | 	byte	$00[82]
08580     4D 2E 4B 2E 
08584     01 FC 1F 05 
08588     03 58 10 00 
0858c     02 A6 10 00 | 	byte	$4d, $2e, $4b, $2e, $01, $fc, $1f, $05, $03, $58, $10, $00, $02, $a6, $10, $00
08590     02 3A 10 00 
08594     00 00 00 00 
08598     00 00 00 00 
0859c     00 00 00 00 | 	byte	$02, $3a, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
085a0     00 00 00 00 
      ...             
0867c     00 00 00 00 
08680     00 00 00 00 | 	byte	$00[228]
08684     02 FA 10 00 
08688     02 5C 10 00 
0868c     01 FC 10 00 
08690     01 AC 10 00 | 	byte	$02, $fa, $10, $00, $02, $5c, $10, $00, $01, $fc, $10, $00, $01, $ac, $10, $00
08694     00 00 00 00 
      ...             
0877c     00 00 00 00 
08780     00 00 00 00 | 	byte	$00[240]
08784     02 D0 10 00 
08788     02 5C 10 00 
0878c     01 FC 10 00 
08790     01 C5 10 00 | 	byte	$02, $d0, $10, $00, $02, $5c, $10, $00, $01, $fc, $10, $00, $01, $c5, $10, $00
08794     00 00 00 00 
      ...             
08840     00 00 00 00 
08844     00 00       | 	byte	$00[178]
08846     0D 03 00 00 
0884a     0D 03 00 00 
0884e     0D 03 00 00 
08852     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
08856     0D 03 00 00 
0885a     0D 03 00 00 
0885e     0D 03 00 00 
08862     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
08866     0D 03 00 00 
0886a     0D 03 00 00 
0886e     0D 03 00 00 
08872     0D 03 00 00 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00
08876     0D 03 00 00 
0887a     0D 03 00 00 
0887e     0D 03 00 00 
08882     0D 03 01 53 | 	byte	$0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $00, $00, $0d, $03, $01, $53
08886     20 00 00 00 
0888a     00 00 00 00 
0888e     0D 03 00 00 
08892     0D 04 01 2E | 	byte	$20, $00, $00, $00, $00, $00, $00, $00, $0d, $03, $00, $00, $0d, $04, $01, $2e
08896     20 00 01 53 
0889a     2C 20 00 00 
0889e     0D 14 00 00 
088a2     0D 14 00 00 | 	byte	$20, $00, $01, $53, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
088a6     00 00 01 2E 
088aa     2C 20 00 00 
088ae     0D 14 00 00 
088b2     0D 14 01 2E | 	byte	$00, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $01, $2e
088b6     20 00 00 00 
088ba     00 00 00 00 
088be     0D 14 00 00 
088c2     0D 14 01 2E | 	byte	$20, $00, $00, $00, $00, $00, $00, $00, $0d, $14, $00, $00, $0d, $14, $01, $2e
088c6     20 00 01 2E 
088ca     2C 20 00 00 
088ce     0D 14 00 00 
088d2     0D 14 00 00 | 	byte	$20, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
088d6     00 00 01 2E 
088da     2C 20 00 00 
088de     0D 14 00 00 
088e2     0D 14 00 00 | 	byte	$00, $00, $01, $2e, $2c, $20, $00, $00, $0d, $14, $00, $00, $0d, $14, $00, $00
088e6     00 00 00 00 
088ea     00 00 00 00 | 	byte	$00[8]
088ee     0D 14 00 00 
088f2     0D 14 00 00 
088f6     00 00 00 00 
088fa     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088fe     0D 14 00 00 
08902     0D 14 01 53 
08906     20 00 00 00 
0890a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $53, $20, $00, $00, $00, $00, $00, $00, $00
0890e     0D 14 00 00 
08912     0D 14 01 2E 
08916     20 00 01 53 
0891a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $01, $53, $2c, $20, $00, $00
0891e     0D 14 00 00 
08922     0D 14 00 00 
08926     00 00 01 2E 
0892a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $01, $2e, $2c, $20, $00, $00
0892e     0D 14 00 00 
08932     0D 14 01 2E 
08936     20 00 00 00 
0893a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $00, $00, $00, $00, $00, $00
0893e     0D 14 00 00 
08942     0D 14 01 2E 
08946     20 00 01 2E 
0894a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $01, $2e, $20, $00, $01, $2e, $2c, $20, $00, $00
0894e     0D 14 00 00 
08952     0D 14 00 00 
08956     00 00 01 2E 
0895a     2C 20 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $01, $2e, $2c, $20, $00, $00
0895e     0D 14 00 00 
08962     0D 14 00 00 
08966     00 00 00 00 
0896a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $0d, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0896e     0D 14 00 00 
08972     00 10 00 00 
08976     00 00 00 00 
0897a     00 00 00 00 | 	byte	$0d, $14, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0897e     0C 00 00 00 
08982     0C 00 01 53 
08986     20 00 00 00 
0898a     00 00 00 00 | 	byte	$0c, $00, $00, $00, $0c, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00, $00
0898e     00 00 00 00 
08992     00 00       | 	byte	$00[6]
08994     01 2E 20 00 
08998     01 53 2C 20 
0899c     00 00 00 00 
089a0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $01, $53, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00
089a4     00 00 00 00 
089a8     01 2E 00 00 
089ac     00 00 00 00 
089b0     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089b4     01 2E 20 00 
089b8     00 00 00 00 
089bc     00 00 00 00 
089c0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089c4     00 E2 20 00 
089c8     01 2E 00 00 
089cc     00 00 00 00 
089d0     00 00 00 00 | 	byte	$00, $e2, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089d4     00 FE 20 00 
089d8     00 E2 00 00 
089dc     00 00 00 00 
089e0     00 00 00 00 | 	byte	$00, $fe, $20, $00, $00, $e2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089e4     01 2E 20 00 
089e8     00 FE 00 00 
089ec     00 00 00 00 
089f0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
089f4     00 FE 20 00 
089f8     01 2E 00 00 
089fc     00 00 00 00 
08a00     00 00 00 00 | 	byte	$00, $fe, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a04     01 2E 20 00 
08a08     00 FE 00 00 
08a0c     00 00 00 00 
08a10     00 00 00 00 | 	byte	$01, $2e, $20, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a14     01 53 20 00 
08a18     01 2E 00 00 
08a1c     00 00 00 00 
08a20     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a24     01 94 20 00 
08a28     01 53 00 00 
08a2c     00 00 00 00 
08a30     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a34     01 53 20 00 
08a38     01 94 00 00 
08a3c     00 00 00 00 
08a40     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a44     01 94 20 00 
08a48     01 53 00 00 
08a4c     00 00 00 00 
08a50     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a54     01 C5 20 00 
08a58     01 94 00 00 
08a5c     00 00 00 00 
08a60     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a64     01 FC 20 00 
08a68     01 C5 00 00 
08a6c     00 00 00 00 
08a70     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a74     00 00 00 00 
08a78     01 FC 00 00 
08a7c     00 00 00 00 
08a80     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a84     02 5C 20 00 
08a88     00 00 00 00 
08a8c     00 00 00 00 
08a90     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a94     02 5C 20 00 
08a98     02 5C 00 00 
08a9c     00 00 00 00 
08aa0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08aa4     00 00 00 00 
08aa8     02 5C 00 00 
08aac     00 00 00 00 
08ab0     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ab4     02 5C 20 00 
08ab8     00 00 00 00 
08abc     00 00 00 00 
08ac0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ac4     01 2E 20 00 
08ac8     02 5C 00 00 
08acc     00 00 00 00 
08ad0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ad4     01 53 20 00 
08ad8     01 2E 00 00 
08adc     00 00 00 00 
08ae0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ae4     01 94 20 00 
08ae8     01 53 00 00 
08aec     00 00 00 00 
08af0     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08af4     01 53 20 00 
08af8     01 94 00 00 
08afc     00 00 00 00 
08b00     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b04     00 00 00 00 
08b08     01 53 00 00 
08b0c     00 00 00 00 
08b10     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b14     01 94 20 00 
08b18     00 00 00 00 
08b1c     00 00 00 00 
08b20     00 00 00 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b24     01 C5 20 00 
08b28     01 94 00 00 
08b2c     00 00 00 00 
08b30     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b34     01 94 20 00 
08b38     01 C5 00 00 
08b3c     00 00 00 00 
08b40     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b44     01 C5 20 00 
08b48     01 94 00 00 
08b4c     00 00 00 00 
08b50     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b54     01 FC 20 00 
08b58     01 C5 00 00 
08b5c     00 00 00 00 
08b60     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b64     02 5C 20 00 
08b68     01 FC 00 00 
08b6c     00 00 00 00 
08b70     00 00 00 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b74     00 00 00 00 
08b78     02 5C 00 00 
08b7c     00 00 00 00 
08b80     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b84     02 5C 20 00 
08b88     00 00 00 00 
08b8c     00 00 00 00 
08b90     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b94     02 5C 20 00 
08b98     02 5C 00 00 
08b9c     00 00 00 00 
08ba0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ba4     00 00 00 00 
08ba8     02 5C 00 00 
08bac     00 00 00 00 
08bb0     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bb4     02 5C 20 00 
08bb8     00 00 00 00 
08bbc     00 00 00 00 
08bc0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bc4     01 2E 20 00 
08bc8     02 5C 00 00 
08bcc     00 00 00 00 
08bd0     00 00 00 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bd4     01 53 20 00 
08bd8     01 2E 00 00 
08bdc     00 00 00 00 
08be0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08be4     01 94 20 00 
08be8     01 53 00 00 
08bec     00 00 00 00 
08bf0     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf4     01 53 20 00 
08bf8     01 94 00 00 
08bfc     00 00 00 00 
08c00     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c04     00 00 00 00 
08c08     01 53 00 00 
08c0c     00 00 00 00 
08c10     00 00 00 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c14     01 94 20 00 
08c18     00 00 00 00 
08c1c     00 00 00 00 
08c20     00 00 00 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c24     01 C5 20 00 
08c28     01 94 00 00 
08c2c     00 00 00 00 
08c30     00 00 00 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c34     01 94 20 00 
08c38     01 C5 00 00 
08c3c     00 00 00 00 
08c40     00 00 00 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c44     01 C5 20 00 
08c48     01 94 00 00 
08c4c     01 53 11 01 
08c50     00 D6 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $01, $53, $11, $01, $00, $d6, $60, $00
08c54     01 FC 20 00 
08c58     01 C5 00 00 
08c5c     00 00 01 01 
08c60     00 00 00 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08c64     02 5C 20 00 
08c68     01 FC 00 00 
08c6c     00 00 01 01 
08c70     00 00 00 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08c74     00 00 00 00 
08c78     02 5C 00 00 
08c7c     00 00 01 01 
08c80     00 00 00 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08c84     02 5C 20 00 
08c88     00 00 00 00 
08c8c     00 00 01 01 
08c90     00 D6 60 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08c94     02 5C 20 00 
08c98     02 5C 00 00 
08c9c     00 00 01 01 
08ca0     01 1D 60 00 | 	byte	$02, $5c, $20, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $01, $1d, $60, $00
08ca4     00 00 00 00 
08ca8     02 5C 00 00 
08cac     00 00 01 01 
08cb0     00 D6 60 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08cb4     02 5C 20 00 
08cb8     00 00 00 00 
08cbc     00 00 01 01 
08cc0     00 00 00 00 | 	byte	$02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08cc4     01 2E 20 00 
08cc8     02 5C 00 00 
08ccc     00 00 01 01 
08cd0     01 53 60 00 | 	byte	$01, $2e, $20, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $01, $53, $60, $00
08cd4     01 53 20 00 
08cd8     01 2E 00 00 
08cdc     00 00 01 01 
08ce0     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08ce4     01 94 20 00 
08ce8     01 53 00 00 
08cec     00 00 01 01 
08cf0     01 40 60 00 | 	byte	$01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08cf4     01 53 20 00 
08cf8     01 94 00 00 
08cfc     00 00 01 01 
08d00     00 00 00 00 | 	byte	$01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $00, $00, $00, $00
08d04     00 00 00 00 
08d08     01 53 00 00 
08d0c     00 00 01 01 
08d10     00 D6 60 00 | 	byte	$00, $00, $00, $00, $01, $53, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d14     01 94 20 00 
08d18     00 00 00 00 
08d1c     00 00 01 01 
08d20     00 D6 60 00 | 	byte	$01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d24     01 C5 20 00 
08d28     01 94 00 00 
08d2c     00 00 01 01 
08d30     01 40 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08d34     01 94 20 00 
08d38     01 C5 00 00 
08d3c     00 00 01 01 
08d40     00 D6 60 00 | 	byte	$01, $94, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d44     01 C5 20 00 
08d48     01 94 00 00 
08d4c     00 00 01 01 
08d50     00 D6 60 00 | 	byte	$01, $c5, $20, $00, $01, $94, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d54     01 FC 20 00 
08d58     01 C5 00 00 
08d5c     00 00 01 01 
08d60     01 40 60 00 | 	byte	$01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $01, $01, $01, $40, $60, $00
08d64     02 5C 20 00 
08d68     01 FC 00 00 
08d6c     00 00 01 01 
08d70     00 D6 60 00 | 	byte	$02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d74     00 00 00 00 
08d78     02 5C 00 00 
08d7c     00 00 01 01 
08d80     00 D6 60 00 | 	byte	$00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $01, $01, $00, $d6, $60, $00
08d84     00 FE 10 00 
08d88     01 FC 20 47 
08d8c     01 FC 30 00 
08d90     01 AC 50 00 | 	byte	$00, $fe, $10, $00, $01, $fc, $20, $47, $01, $fc, $30, $00, $01, $ac, $50, $00
08d94     00 00 00 00 
08d98     00 00 00    | 	byte	$00[7]
08d9b     47 00 00 00 
08d9f     00 00 AA 70 
08da3     00 00 00 00 
08da7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08dab     47 00 00 00 
08daf     00 00 AA 70 
08db3     00 00 00 00 
08db7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08dbb     47 00 00 00 
08dbf     00 00 AA 70 
08dc3     00 00 00 00 
08dc7     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08dcb     47 01 94 30 
08dcf     00 00 D6 60 
08dd3     00 00 00 00 
08dd7     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08ddb     47 00 00 00 
08ddf     00 00 AA 70 
08de3     00 00 00 00 
08de7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08deb     47 00 00 00 
08def     00 00 AA 70 
08df3     00 00 00 00 
08df7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08dfb     47 00 00 00 
08dff     00 00 AA 70 
08e03     00 00 00 00 
08e07     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08e0b     47 01 53 30 
08e0f     00 01 AC 50 
08e13     00 00 00 00 
08e17     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08e1b     47 00 00 00 
08e1f     00 00 AA 70 
08e23     00 00 00 00 
08e27     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e2b     47 00 00 00 
08e2f     00 00 AA 70 
08e33     00 00 00 00 
08e37     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08e3b     47 00 00 00 
08e3f     00 00 AA 70 
08e43     00 00 00 00 
08e47     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $fc, $20
08e4b     47 01 94 30 
08e4f     00 00 D6 60 
08e53     00 00 00 00 
08e57     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08e5b     47 00 00 00 
08e5f     00 00 AA 70 
08e63     00 01 2E 00 
08e67     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $2e, $00, $00, $00, $00, $00
08e6b     47 01 53 30 
08e6f     00 01 AC 50 
08e73     00 00 00 00 
08e77     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08e7b     47 00 00 00 
08e7f     00 00 AA 70 
08e83     00 01 53 00 
08e87     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $53, $00, $00, $01, $fc, $20
08e8b     47 01 FC 30 
08e8f     00 01 AC 50 
08e93     00 00 00 00 
08e97     00 00 00 00 | 	byte	$47, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08e9b     47 00 00 00 
08e9f     00 00 AA 70 
08ea3     00 01 53 00 
08ea7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $53, $00, $00, $00, $00, $00
08eab     47 00 00 00 
08eaf     00 00 AA 70 
08eb3     00 00 00 00 
08eb7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08ebb     47 00 00 00 
08ebf     00 00 AA 70 
08ec3     00 01 94 00 
08ec7     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $00, $00, $01, $fc, $20
08ecb     47 01 94 30 
08ecf     00 00 D6 60 
08ed3     00 00 00 00 
08ed7     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08edb     47 00 00 00 
08edf     00 00 AA 70 
08ee3     00 01 C5 00 
08ee7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $00, $00, $00
08eeb     47 00 00 00 
08eef     00 00 AA 70 
08ef3     00 00 00 00 
08ef7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08efb     47 00 00 00 
08eff     00 00 AA 70 
08f03     00 01 C5 00 
08f07     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $01, $fc, $20
08f0b     47 01 53 30 
08f0f     00 01 AC 50 
08f13     00 00 00 00 
08f17     00 00 00 00 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08f1b     47 00 00 00 
08f1f     00 00 AA 70 
08f23     00 01 FC 00 
08f27     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $00, $00, $01, $fc, $20
08f2b     47 00 00 00 
08f2f     00 00 AA 70 
08f33     00 00 00 00 
08f37     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00
08f3b     47 00 00 00 
08f3f     00 00 AA 70 
08f43     00 01 C5 00 
08f47     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $01, $fc, $20
08f4b     47 01 94 30 
08f4f     00 00 D6 60 
08f53     00 00 00 00 
08f57     00 00 00 00 | 	byte	$47, $01, $94, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00
08f5b     47 00 00 00 
08f5f     00 00 AA 70 
08f63     00 01 94 00 
08f67     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $00, $00, $01, $fc, $20
08f6b     47 01 53 30 
08f6f     00 01 AC 50 
08f73     00 00 00 00 
08f77     00 01 FC 20 | 	byte	$47, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $01, $fc, $20
08f7b     47 00 00 00 
08f7f     00 00 AA 70 
08f83     00 01 C5 00 
08f87     00 00 E2 20 | 	byte	$47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $c5, $00, $00, $00, $e2, $20
08f8b     00 02 5C 30 
08f8f     00 01 AC 50 
08f93     00 00 00 00 
08f97     00 00 00 00 | 	byte	$00, $02, $5c, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
08f9b     00 00 00 00 
08f9f     00 00       | 	byte	$00[6]
08fa1     AA 70 00 01 
08fa5     FC 00 00 00 
08fa9     FE 20 00 00 
08fad     00 00 00 00 | 	byte	$aa, $70, $00, $01, $fc, $00, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
08fb1     AA 70 00 00 
08fb5     00 00 00 00 
08fb9     00 00 00 00 
08fbd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08fc1     AA 70 00 01 
08fc5     2E 20 00 00 
08fc9     00 00 00 02 
08fcd     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
08fd1     AC 50 00 01 
08fd5     53 20 00 01 
08fd9     2E 2C 40 00 
08fdd     00 00 00 00 | 	byte	$ac, $50, $00, $01, $53, $20, $00, $01, $2e, $2c, $40, $00, $00, $00, $00, $00
08fe1     AA 70 00 01 
08fe5     94 20 00 01 
08fe9     53 2C 40 00 
08fed     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $40, $00, $00, $00, $00, $00
08ff1     AA 70 00 01 
08ff5     53 20 00 01 
08ff9     94 2C 40 00 
08ffd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $2c, $40, $00, $00, $00, $00, $00
09001     AA 70 00 00 
09005     00 00 00 01 
09009     53 2C 40 02 
0900d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $2c, $40, $02, $5c, $30, $00, $01
09011     AC 50 00 00 
09015     00 00 00 00 
09019     00 00 40 00 
0901d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00
09021     AA 70 00 01 
09025     94 20 00 00 
09029     00 00 40 00 
0902d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $40, $00, $00, $00, $00, $00
09031     AA 70 00 01 
09035     AC 20 00 01 
09039     94 2C 30 00 
0903d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $2c, $30, $00, $00, $00, $00, $00
09041     AA 70 00 01 
09045     C5 20 00 01 
09049     AC 2C 30 02 
0904d     5C 30 00 00 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $2c, $30, $02, $5c, $30, $00, $00
09051     D6 60 00 01 
09055     FC 20 00 01 
09059     C5 2C 20 00 
0905d     00 00 00 00 | 	byte	$d6, $60, $00, $01, $fc, $20, $00, $01, $c5, $2c, $20, $00, $00, $00, $00, $00
09061     AA 70 00 02 
09065     5C 20 00 01 
09069     FC 2C 20 00 
0906d     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $01, $fc, $2c, $20, $00, $00, $00, $00, $00
09071     AA 70 00 00 
09075     00 00 00 02 
09079     5C 2C 20 00 
0907d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
09081     AA 70 00 02 
09085     5C 20 00 00 
09089     00 0C 20 02 
0908d     5C 30 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $0c, $20, $02, $5c, $30, $00, $00
09091     D6 60 00 00 
09095     00 00 00 02 
09099     5C 2C 20 00 
0909d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
090a1     AA 70 00 02 
090a5     5C 20 00 00 
090a9     00 0C 20 00 
090ad     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00
090b1     AA 70 00 00 
090b5     00 00 00 02 
090b9     5C 2C 20 00 
090bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $2c, $20, $00, $00, $00, $00, $00
090c1     AA 70 00 01 
090c5     2E 20 00 00 
090c9     00 0C 20 02 
090cd     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $0c, $20, $02, $5c, $30, $00, $01
090d1     AC 50 00 01 
090d5     53 20 00 01 
090d9     2E 2C 20 00 
090dd     00 00 00 00 | 	byte	$ac, $50, $00, $01, $53, $20, $00, $01, $2e, $2c, $20, $00, $00, $00, $00, $00
090e1     AA 70 00 01 
090e5     94 20 00 01 
090e9     53 2C 20 00 
090ed     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $20, $00, $00, $00, $00, $00
090f1     D6 60 00 00 
090f5     E2 20 00 01 
090f9     94 2C 20 00 
090fd     00 00 00 00 | 	byte	$d6, $60, $00, $00, $e2, $20, $00, $01, $94, $2c, $20, $00, $00, $00, $00, $00
09101     AA 70 00 00 
09105     00 00 00 00 
09109     E2 2C 20 02 
0910d     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $e2, $2c, $20, $02, $5c, $30, $00, $00
09111     D6 60 00 00 
09115     FE 20 00 00 
09119     00 0C 20 00 
0911d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $fe, $20, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00
09121     AA 70 00 01 
09125     2E 20 00 00 
09129     FE 2C 20 00 
0912d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $fe, $2c, $20, $00, $00, $00, $00, $00
09131     D6 60 00 01 
09135     53 20 00 01 
09139     2E 2C 30 00 
0913d     00 00 00 00 | 	byte	$d6, $60, $00, $01, $53, $20, $00, $01, $2e, $2c, $30, $00, $00, $00, $00, $00
09141     AA 70 00 01 
09145     94 20 00 01 
09149     53 2C 30 02 
0914d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $2c, $30, $02, $5c, $30, $00, $01
09151     AC 50 00 01 
09155     C5 20 00 01 
09159     94 2C 40 00 
0915d     00 00 00 00 | 	byte	$ac, $50, $00, $01, $c5, $20, $00, $01, $94, $2c, $40, $00, $00, $00, $00, $00
09161     D6 60 00 01 
09165     FC 20 00 01 
09169     C5 2C 50 00 
0916d     00 00 00 00 | 	byte	$d6, $60, $00, $01, $fc, $20, $00, $01, $c5, $2c, $50, $00, $00, $00, $00, $00
09171     D6 60 00 00 
09175     00 00 00 01 
09179     FC 2C 60 00 
0917d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $01, $fc, $2c, $60, $00, $00, $00, $00, $00
09181     D6 60 00 00 
09185     AA 40 00 00 
09189     E2 80 47 01 
0918d     C5 30 00 01 | 	byte	$d6, $60, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09191     AC 50 00 00 
09195     00 00 00 00 
09199     00 00 47 00 
0919d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
091a1     AA 70 00 00 
091a5     AA 40 00 00 
091a9     E2 80 47 00 
091ad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
091b1     AA 70 00 00 
091b5     00 00 00 00 
091b9     00 00 47 00 
091bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
091c1     AA 70 00 00 
091c5     AA 40 00 00 
091c9     E2 80 47 01 
091cd     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
091d1     D6 60 00 00 
091d5     AA 40 00 00 
091d9     E2 80 47 00 
091dd     00 00 00 00 | 	byte	$d6, $60, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
091e1     AA 70 00 00 
091e5     00 00 00 00 
091e9     00 00 47 00 
091ed     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
091f1     AA 70 00 00 
091f5     AA 40 00 00 
091f9     E2 80 47 00 
091fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09201     AA 70 00 00 
09205     97 40 00 00 
09209     97 80 47 02 
0920d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $01
09211     AC 50 00 00 
09215     00 00 00 00 
09219     00 00 47 00 
0921d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09221     AA 70 00 00 
09225     97 40 00 00 
09229     97 80 47 00 
0922d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $00, $97, $80, $47, $00, $00, $00, $00, $00
09231     AA 70 00 00 
09235     00 00 00 00 
09239     00 00 47 00 
0923d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09241     AA 70 00 00 
09245     00 00 00 00 
09249     97 80 47 02 
0924d     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $00
09251     D6 60 00 00 
09255     00 00 00 00 
09259     00 00 47 00 
0925d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09261     AA 70 00 00 
09265     00 00 00 00 
09269     97 80 47 00 
0926d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $01
09271     AC 50 00 00 
09275     00 00 00 00 
09279     00 00 47 00 
0927d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09281     AA 70 00 00 
09285     AA 40 00 00 
09289     E2 80 47 01 
0928d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09291     AC 50 00 00 
09295     AA 40 00 00 
09299     E2 80 47 00 
0929d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
092a1     AA 70 00 00 
092a5     AA 40 00 00 
092a9     E2 80 47 00 
092ad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
092b1     AA 70 00 00 
092b5     00 00 00 00 
092b9     00 00 47 00 
092bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
092c1     AA 70 00 00 
092c5     AA 40 00 00 
092c9     E2 80 47 01 
092cd     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
092d1     D6 60 00 00 
092d5     00 00 00 00 
092d9     00 00 47 00 
092dd     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
092e1     AA 70 00 00 
092e5     AA 40 00 00 
092e9     E2 80 47 00 
092ed     00 00 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
092f1     AA 70 00 00 
092f5     00 00 00 00 
092f9     00 00 47 00 
092fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09301     AA 70 00 00 
09305     97 40 00 01 
09309     2E 80 47 02 
0930d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $97, $40, $00, $01, $2e, $80, $47, $02, $5c, $30, $00, $01
09311     AC 50 00 00 
09315     00 00 00 00 
09319     00 00 47 00 
0931d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09321     AA 70 00 00 
09325     00 00 00 01 
09329     2E 80 47 00 
0932d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $2e, $80, $47, $00, $00, $00, $00, $00
09331     AA 70 00 00 
09335     00 00 00 00 
09339     00 00 47 00 
0933d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09341     AA 70 00 00 
09345     00 00 00 00 
09349     97 80 47 02 
0934d     5C 30 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $02, $5c, $30, $00, $00
09351     D6 60 00 00 
09355     00 00 00 00 
09359     97 80 47 00 
0935d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $00
09361     AA 70 00 00 
09365     00 00 00 00 
09369     97 80 47 00 
0936d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $97, $80, $47, $00, $00, $00, $00, $01
09371     AC 50 00 00 
09375     00 00 00 00 
09379     00 00 47 00 
0937d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09381     AA 70 00 00 
09385     AA 40 00 00 
09389     E2 80 47 01 
0938d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09391     AC 50 00 00 
09395     00 00 00 00 
09399     00 00 47 00 
0939d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093a1     AA 70 00 00 
093a5     B4 40 00 00 
093a9     E2 80 47 00 
093ad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
093b1     AA 70 00 00 
093b5     00 00 00 00 
093b9     00 00 47 00 
093bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093c1     AA 70 00 00 
093c5     AA 40 00 00 
093c9     E2 80 47 01 
093cd     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
093d1     AC 50 00 00 
093d5     00 00 00 00 
093d9     00 00 47 00 
093dd     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
093e1     AA 70 00 00 
093e5     B4 40 00 00 
093e9     E2 80 47 00 
093ed     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
093f1     AA 70 00 00 
093f5     00 00 00 00 
093f9     00 00 47 00 
093fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09401     AA 70 00 00 
09405     AA 40 00 00 
09409     E2 80 47 01 
0940d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09411     AC 50 00 00 
09415     00 00 00 00 
09419     00 00 47 00 
0941d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09421     AA 70 00 00 
09425     B4 40 00 00 
09429     E2 80 47 00 
0942d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09431     AA 70 00 00 
09435     00 00 00 00 
09439     00 00 47 00 
0943d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09441     AA 70 00 00 
09445     AA 40 00 00 
09449     E2 80 47 01 
0944d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
09451     D6 60 00 00 
09455     00 00 00 00 
09459     00 00 47 00 
0945d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09461     AA 70 00 00 
09465     B4 40 00 00 
09469     E2 80 47 00 
0946d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09471     AA 70 00 00 
09475     00 00 00 00 
09479     00 00 47 00 
0947d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09481     AA 70 00 00 
09485     AA 40 00 00 
09489     E2 80 47 01 
0948d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
09491     D6 60 00 00 
09495     B4 40 00 00 
09499     00 00 47 00 
0949d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094a1     AA 70 00 00 
094a5     00 00 00 00 
094a9     00 00 47 00 
094ad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094b1     AA 70 00 00 
094b5     00 00 00 00 
094b9     00 00 47 00 
094bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094c1     AA 70 00 00 
094c5     AA 40 00 00 
094c9     E2 80 47 01 
094cd     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
094d1     AC 50 00 00 
094d5     B4 40 00 00 
094d9     00 00 47 00 
094dd     00 00 00 00 | 	byte	$ac, $50, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094e1     AA 70 00 00 
094e5     00 00 00 00 
094e9     00 00 47 00 
094ed     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
094f1     D6 60 00 00 
094f5     00 00 00 00 
094f9     00 00 47 00 
094fd     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09501     AA 70 00 00 
09505     AA 40 00 00 
09509     E2 80 47 01 
0950d     C5 30 00 00 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $00
09511     D6 60 00 00 
09515     B4 40 00 00 
09519     E2 80 47 00 
0951d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $b4, $40, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09521     AA 70 00 00 
09525     00 00 00 00 
09529     00 00 47 00 
0952d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09531     D6 60 00 00 
09535     00 00 00 00 
09539     E2 80 47 00 
0953d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09541     AA 70 00 00 
09545     AA 40 00 00 
09549     E2 80 47 01 
0954d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $aa, $40, $00, $00, $e2, $80, $47, $01, $c5, $30, $00, $01
09551     AC 50 00 00 
09555     B4 40 00 00 
09559     00 00 47 00 
0955d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $b4, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09561     D6 60 00 00 
09565     00 00 00 00 
09569     E2 80 47 00 
0956d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09571     D6 60 00 00 
09575     00 00 00 00 
09579     E2 80 47 00 
0957d     00 00 00 00 | 	byte	$d6, $60, $00, $00, $00, $00, $00, $00, $e2, $80, $47, $00, $00, $00, $00, $00
09581     D6 60 00 00 
09585     7F 40 00 01 
09589     94 20 38 01 
0958d     FC 30 00 01 | 	byte	$d6, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
09591     AC 50 00 00 
09595     7F 40 00 01 
09599     94 20 38 00 
0959d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
095a1     AA 70 00 00 
095a5     00 00 00 00 
095a9     00 00 38 00 
095ad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
095b1     AA 70 00 00 
095b5     7F 40 00 01 
095b9     94 20 38 00 
095bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
095c1     AA 70 00 00 
095c5     00 00 00 00 
095c9     00 00 38 01 
095cd     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
095d1     1D 60 00 00 
095d5     00 00 00 00 
095d9     00 00 38 00 
095dd     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
095e1     AA 70 00 00 
095e5     00 00 00 00 
095e9     00 00 38 00 
095ed     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
095f1     AA 70 00 00 
095f5     00 00 00 00 
095f9     00 00 38 00 
095fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09601     AA 70 00 00 
09605     8F 40 00 01 
09609     C5 20 59 01 
0960d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09611     AC 50 00 00 
09615     8F 40 00 01 
09619     C5 20 59 00 
0961d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09621     AA 70 00 00 
09625     00 00 00 00 
09629     00 00 59 00 
0962d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09631     AA 70 00 00 
09635     8F 40 00 01 
09639     C5 20 59 00 
0963d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09641     AA 70 00 00 
09645     00 00 00 00 
09649     00 00 59 01 
0964d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09651     1D 60 00 00 
09655     00 00 00 00 
09659     00 00 59 00 
0965d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09661     AA 70 00 00 
09665     00 00 00 00 
09669     00 00 59 00 
0966d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09671     AA 70 00 00 
09675     00 00 00 00 
09679     00 00 59 00 
0967d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09681     AA 70 00 00 
09685     BE 40 00 01 
09689     7D 20 47 01 
0968d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09691     AC 50 00 00 
09695     BE 40 00 00 
09699     00 00 47 00 
0969d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096a1     AA 70 00 00 
096a5     BE 40 00 00 
096a9     00 00 47 00 
096ad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096b1     AA 70 00 00 
096b5     BE 40 00 00 
096b9     00 00 47 00 
096bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096c1     AA 70 00 00 
096c5     BE 40 00 01 
096c9     7D 20 47 01 
096cd     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
096d1     1D 60 00 00 
096d5     BE 40 00 00 
096d9     00 00 47 00 
096dd     00 00 00 00 | 	byte	$1d, $60, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096e1     AA 70 00 00 
096e5     BE 40 00 00 
096e9     00 00 47 00 
096ed     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
096f1     AA 70 00 00 
096f5     BE 40 00 00 
096f9     00 00 47 00 
096fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09701     AA 70 00 00 
09705     CA 40 00 01 
09709     C5 20 47 01 
0970d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $ca, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
09711     AC 50 00 00 
09715     00 00 00 00 
09719     00 00 47 00 
0971d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09721     AA 70 00 00 
09725     E2 40 00 01 
09729     C5 20 47 00 
0972d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $00
09731     AA 70 00 00 
09735     00 00 00 00 
09739     00 00 47 00 
0973d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09741     AA 70 00 00 
09745     E2 40 00 01 
09749     C5 20 47 01 
0974d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
09751     1D 60 00 00 
09755     00 00 00 01 
09759     C5 20 47 00 
0975d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $00
09761     AA 70 00 00 
09765     FE 40 00 01 
09769     C5 20 47 00 
0976d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $fe, $40, $00, $01, $c5, $20, $47, $00, $00, $00, $00, $01
09771     1D 60 00 00 
09775     00 00 00 00 
09779     00 00 47 00 
0977d     00 00 00 01 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09781     1D 60 00 00 
09785     CA 40 00 02 
09789     5C 20 47 02 
0978d     5C 30 00 01 | 	byte	$1d, $60, $00, $00, $ca, $40, $00, $02, $5c, $20, $47, $02, $5c, $30, $00, $01
09791     AC 50 00 00 
09795     00 00 00 00 
09799     00 00 47 00 
0979d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097a1     AA 70 00 00 
097a5     00 00 00 00 
097a9     00 00 47 00 
097ad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097b1     AA 70 00 00 
097b5     00 00 00 00 
097b9     00 00 47 00 
097bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
097c1     AA 70 00 01 
097c5     2E 20 00 00 
097c9     00 00 47 02 
097cd     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $47, $02, $5c, $30, $00, $01
097d1     1D 60 00 01 
097d5     53 20 00 01 
097d9     2E 2C 30 00 
097dd     00 00 00 00 | 	byte	$1d, $60, $00, $01, $53, $20, $00, $01, $2e, $2c, $30, $00, $00, $00, $00, $00
097e1     AA 70 00 01 
097e5     94 20 00 01 
097e9     53 00 00 00 
097ed     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
097f1     AA 70 00 01 
097f5     53 20 00 01 
097f9     94 00 00 00 
097fd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09801     AA 70 00 00 
09805     00 00 00 01 
09809     53 00 00 02 
0980d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $00, $00, $02, $5c, $30, $00, $01
09811     AC 50 00 00 
09815     00 00 00 00 
09819     00 00 00 00 
0981d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09821     AA 70 00 01 
09825     94 20 00 00 
09829     00 00 00 00 
0982d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09831     AA 70 00 01 
09835     AC 20 00 01 
09839     94 00 00 00 
0983d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09841     AA 70 00 01 
09845     C5 20 00 01 
09849     AC 00 00 02 
0984d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $00, $00, $02, $5c, $30, $00, $01
09851     1D 60 00 01 
09855     FC 20 00 01 
09859     C5 00 00 00 
0985d     00 00 00 00 | 	byte	$1d, $60, $00, $01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $00
09861     AA 70 00 02 
09865     5C 20 00 01 
09869     FC 00 00 00 
0986d     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
09871     AA 70 00 00 
09875     00 00 00 02 
09879     5C 00 00 00 
0987d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
09881     AA 70 00 02 
09885     5C 20 00 00 
09889     00 00 00 02 
0988d     5C 30 00 01 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
09891     AC 50 00 00 
09895     00 00 00 02 
09899     5C 00 00 00 
0989d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
098a1     AA 70 00 02 
098a5     5C 20 00 00 
098a9     00 00 00 00 
098ad     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098b1     AA 70 00 00 
098b5     00 00 00 02 
098b9     5C 00 00 00 
098bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $00
098c1     AA 70 00 01 
098c5     2E 20 00 00 
098c9     00 00 00 02 
098cd     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $2e, $20, $00, $00, $00, $00, $00, $02, $5c, $30, $00, $01
098d1     1D 60 00 01 
098d5     53 20 00 01 
098d9     2E 00 00 00 
098dd     00 00 00 00 | 	byte	$1d, $60, $00, $01, $53, $20, $00, $01, $2e, $00, $00, $00, $00, $00, $00, $00
098e1     AA 70 00 01 
098e5     94 20 00 01 
098e9     53 00 00 00 
098ed     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $01, $53, $00, $00, $00, $00, $00, $00, $00
098f1     AA 70 00 01 
098f5     53 20 00 01 
098f9     94 00 00 00 
098fd     00 00 00 00 | 	byte	$aa, $70, $00, $01, $53, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09901     AA 70 00 00 
09905     00 00 00 01 
09909     53 00 00 02 
0990d     5C 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $53, $00, $00, $02, $5c, $30, $00, $01
09911     AC 50 00 00 
09915     00 00 00 00 
09919     00 00 00 00 
0991d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09921     AA 70 00 01 
09925     94 20 00 00 
09929     00 00 00 00 
0992d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09931     AA 70 00 01 
09935     AC 20 00 01 
09939     94 00 00 00 
0993d     00 00 00 00 | 	byte	$aa, $70, $00, $01, $ac, $20, $00, $01, $94, $00, $00, $00, $00, $00, $00, $00
09941     AA 70 00 01 
09945     C5 20 00 01 
09949     AC 00 00 02 
0994d     5C 30 00 01 | 	byte	$aa, $70, $00, $01, $c5, $20, $00, $01, $ac, $00, $00, $02, $5c, $30, $00, $01
09951     1D 60 00 01 
09955     FC 20 00 01 
09959     C5 00 00 00 
0995d     00 00 00 01 | 	byte	$1d, $60, $00, $01, $fc, $20, $00, $01, $c5, $00, $00, $00, $00, $00, $00, $01
09961     1D 60 00 02 
09965     5C 20 00 01 
09969     FC 00 00 00 
0996d     00 00 00 00 | 	byte	$1d, $60, $00, $02, $5c, $20, $00, $01, $fc, $00, $00, $00, $00, $00, $00, $00
09971     AA 70 00 00 
09975     00 00 00 02 
09979     5C 00 00 00 
0997d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $02, $5c, $00, $00, $00, $00, $00, $00, $01
09981     1D 60 00 00 
09985     7F 40 00 01 
09989     94 20 38 01 
0998d     FC 30 00 01 | 	byte	$1d, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
09991     AC 50 00 00 
09995     7F 40 00 01 
09999     94 20 38 00 
0999d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
099a1     AA 70 00 00 
099a5     00 00 00 00 
099a9     00 00 38 00 
099ad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
099b1     AA 70 00 00 
099b5     7F 40 00 01 
099b9     94 20 38 00 
099bd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
099c1     AA 70 00 00 
099c5     00 00 00 00 
099c9     00 00 38 01 
099cd     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
099d1     1D 60 00 00 
099d5     00 00 00 00 
099d9     00 00 38 00 
099dd     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
099e1     AA 70 00 00 
099e5     00 00 00 00 
099e9     00 00 38 00 
099ed     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
099f1     AA 70 00 00 
099f5     00 00 00 00 
099f9     00 00 38 00 
099fd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09a01     AA 70 00 00 
09a05     8F 40 00 01 
09a09     C5 20 59 01 
09a0d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09a11     AC 50 00 00 
09a15     8F 40 00 01 
09a19     C5 20 59 00 
09a1d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09a21     AA 70 00 00 
09a25     00 00 00 00 
09a29     00 00 59 00 
09a2d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09a31     AA 70 00 00 
09a35     8F 40 00 01 
09a39     C5 20 59 00 
09a3d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09a41     AA 70 00 00 
09a45     00 00 00 00 
09a49     00 00 59 01 
09a4d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09a51     1D 60 00 00 
09a55     00 00 00 00 
09a59     00 00 59 00 
09a5d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09a61     AA 70 00 00 
09a65     00 00 00 00 
09a69     00 00 59 00 
09a6d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09a71     AA 70 00 00 
09a75     00 00 00 00 
09a79     00 00 59 00 
09a7d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09a81     AA 70 00 00 
09a85     BE 40 00 01 
09a89     7D 20 47 01 
09a8d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09a91     AC 50 00 00 
09a95     BE 40 00 00 
09a99     00 00 47 00 
09a9d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09aa1     AA 70 00 00 
09aa5     BE 40 00 00 
09aa9     00 00 47 00 
09aad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ab1     AA 70 00 00 
09ab5     BE 40 00 00 
09ab9     00 00 47 00 
09abd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ac1     AA 70 00 00 
09ac5     BE 40 00 01 
09ac9     7D 20 47 01 
09acd     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09ad1     1D 60 00 00 
09ad5     BE 40 00 00 
09ad9     00 00 47 00 
09add     00 00 00 00 | 	byte	$1d, $60, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ae1     AA 70 00 00 
09ae5     BE 40 00 00 
09ae9     00 00 47 00 
09aed     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09af1     AA 70 00 00 
09af5     BE 40 00 00 
09af9     00 00 47 00 
09afd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $be, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b01     AA 70 00 00 
09b05     CA 40 00 01 
09b09     C5 20 47 01 
09b0d     C5 30 00 01 | 	byte	$aa, $70, $00, $00, $ca, $40, $00, $01, $c5, $20, $47, $01, $c5, $30, $00, $01
09b11     AC 50 00 00 
09b15     E2 40 00 00 
09b19     00 00 47 00 
09b1d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $e2, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b21     AA 70 00 00 
09b25     00 00 00 00 
09b29     00 00 47 00 
09b2d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b31     AA 70 00 00 
09b35     E2 40 00 00 
09b39     00 00 47 00 
09b3d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $e2, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b41     AA 70 00 00 
09b45     00 00 00 01 
09b49     C5 20 47 01 
09b4d     E0 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $c5, $20, $47, $01, $e0, $30, $00, $01
09b51     1D 60 00 00 
09b55     00 00 00 00 
09b59     00 00 47 00 
09b5d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09b61     AA 70 00 00 
09b65     00 00 00 00 
09b69     00 00 47 00 
09b6d     00 00 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09b71     1D 60 00 00 
09b75     00 00 00 00 
09b79     00 00 47 00 
09b7d     00 00 00 01 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $47, $00, $00, $00, $00, $01
09b81     1D 60 00 00 
09b85     7F 40 00 01 
09b89     94 20 38 01 
09b8d     FC 30 00 01 | 	byte	$1d, $60, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $01, $fc, $30, $00, $01
09b91     AC 50 00 00 
09b95     7F 40 00 01 
09b99     94 20 38 00 
09b9d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09ba1     AA 70 00 00 
09ba5     00 00 00 00 
09ba9     00 00 38 00 
09bad     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09bb1     AA 70 00 00 
09bb5     7F 40 00 01 
09bb9     94 20 38 00 
09bbd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $7f, $40, $00, $01, $94, $20, $38, $00, $00, $00, $00, $00
09bc1     AA 70 00 00 
09bc5     00 00 00 00 
09bc9     00 00 38 01 
09bcd     FC 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $01, $fc, $30, $00, $01
09bd1     1D 60 00 00 
09bd5     00 00 00 00 
09bd9     00 00 38 00 
09bdd     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09be1     AA 70 00 00 
09be5     00 00 00 00 
09be9     00 00 38 00 
09bed     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09bf1     AA 70 00 00 
09bf5     00 00 00 00 
09bf9     00 00 38 00 
09bfd     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00, $00, $00, $00, $00
09c01     AA 70 00 00 
09c05     8F 40 00 01 
09c09     C5 20 59 01 
09c0d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $01, $53, $30, $00, $01
09c11     AC 50 00 00 
09c15     8F 40 00 01 
09c19     C5 20 59 00 
09c1d     00 00 00 00 | 	byte	$ac, $50, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09c21     AA 70 00 00 
09c25     00 00 00 00 
09c29     00 00 59 00 
09c2d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09c31     AA 70 00 00 
09c35     8F 40 00 01 
09c39     C5 20 59 00 
09c3d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $8f, $40, $00, $01, $c5, $20, $59, $00, $00, $00, $00, $00
09c41     AA 70 00 00 
09c45     00 00 00 00 
09c49     00 00 59 01 
09c4d     53 30 00 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $01, $53, $30, $00, $01
09c51     1D 60 00 00 
09c55     00 00 00 00 
09c59     00 00 59 00 
09c5d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09c61     AA 70 00 00 
09c65     00 00 00 00 
09c69     00 00 59 00 
09c6d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09c71     AA 70 00 00 
09c75     00 00 00 00 
09c79     00 00 59 00 
09c7d     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $59, $00, $00, $00, $00, $00
09c81     AA 70 00 00 
09c85     FE 40 00 01 
09c89     7D 20 47 01 
09c8d     7D 30 00 01 | 	byte	$aa, $70, $00, $00, $fe, $40, $00, $01, $7d, $20, $47, $01, $7d, $30, $00, $01
09c91     1D 60 00 00 
09c95     FE 40 00 00 
09c99     00 00 47 00 
09c9d     00 00 00 00 | 	byte	$1d, $60, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ca1     00 00 00 00 
09ca5     FE 40 00 00 
09ca9     00 00 47 00 
09cad     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09cb1     00 00 00 00 
09cb5     FE 40 00 00 
09cb9     00 00 47 00 
09cbd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09cc1     00 00 00 00 
09cc5     FE 40 00 00 
09cc9     00 00 47 00 
09ccd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09cd1     00 00 00 00 
09cd5     FE 40 00 00 
09cd9     00 00 47 00 
09cdd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09ce1     00 00 00 00 
09ce5     FE 40 00 00 
09ce9     00 00 47 00 
09ced     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09cf1     00 00 00 00 
09cf5     FE 40 00 00 
09cf9     00 00 47 00 
09cfd     00 00 00 00 | 	byte	$00, $00, $00, $00, $fe, $40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00
09d01     00 00 00 01 
09d05     0D 40 00 01 
09d09     C5 20 49 01 
09d0d     C5 30 00 01 | 	byte	$00, $00, $00, $01, $0d, $40, $00, $01, $c5, $20, $49, $01, $c5, $30, $00, $01
09d11     1D 60 00 01 
09d15     2E 40 00 00 
09d19     00 00 49 00 
09d1d     00 00 00 00 | 	byte	$1d, $60, $00, $01, $2e, $40, $00, $00, $00, $00, $49, $00, $00, $00, $00, $00
09d21     00 00 00 00 
09d25     00 00 00 00 
09d29     00 00       | 	byte	$00[10]
09d2b     49 00 00 00 
09d2f     00 00 00 00 
09d33     00 01 2E 40 
09d37     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $00, $00
09d3b     49 00 00 00 
09d3f     00 00 00 00 
09d43     00 00 00 00 
09d47     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d4b     49 00 00 00 
09d4f     00 00 00 00 
09d53     00 00 00 00 
09d57     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d5b     49 00 00 00 
09d5f     00 00 00 00 
09d63     00 00 00 00 
09d67     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d6b     49 00 00 00 
09d6f     00 00 00 00 
09d73     00 01 2E 40 
09d77     00 01 E0 20 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $01, $e0, $20
09d7b     38 02 5C 30 
09d7f     00 03 58 60 
09d83     00 00 00 00 
09d87     00 00 00 00 | 	byte	$38, $02, $5c, $30, $00, $03, $58, $60, $00, $00, $00, $00, $00, $00, $00, $00
09d8b     38 00 00 00 
09d8f     00 00 00 00 
09d93     00 00 00 00 
09d97     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d9b     38 00 00 00 
09d9f     00 00 00 00 
09da3     00 00 00 00 
09da7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dab     38 00 00 00 
09daf     00 00 00 00 
09db3     00 00 00 00 
09db7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dbb     38 00 00 00 
09dbf     00 00 00 00 
09dc3     00 00 00 00 
09dc7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dcb     38 00 00 00 
09dcf     00 00 00 00 
09dd3     00 00 00 00 
09dd7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ddb     38 00 00 00 
09ddf     00 00 00 00 
09de3     00 00 00 00 
09de7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09deb     38 00 00 00 
09def     00 00 00 00 
09df3     00 00 00 00 
09df7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dfb     38 00 00 00 
09dff     00 00 00 00 
09e03     00 00 00 00 
09e07     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e0b     38 00 00 00 
09e0f     00 00 00 00 
09e13     00 00 00 00 
09e17     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e1b     38 00 00 00 
09e1f     00 00 00 00 
09e23     00 00 00 00 
09e27     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e2b     38 00 00 00 
09e2f     00 00 00 00 
09e33     00 00 00 00 
09e37     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e3b     38 00 00 00 
09e3f     00 00 00 00 
09e43     00 00 00 00 
09e47     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e4b     38 00 00 00 
09e4f     00 00 00 00 
09e53     00 00 00 00 
09e57     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e5b     38 00 00 00 
09e5f     00 00 00 00 
09e63     00 00 00 00 
09e67     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e6b     38 00 00 00 
09e6f     00 00 00 00 
09e73     00 00 00 00 
09e77     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e7b     38 00 00 00 
09e7f     00 00 00 00 
09e83     00 01 53 40 
09e87     00 00 AA 70 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $53, $40, $00, $00, $aa, $70
09e8b     00 02 5C 90 
09e8f     00 00 D6 50 
09e93     00 01 2E 40 
09e97     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
09e9b     00 02 5C 90 
09e9f     00 00 00 00 
09ea3     00 00 00 00 
09ea7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09eab     00 02 5C 90 
09eaf     00 00 00 00 
09eb3     00 01 2E 40 
09eb7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
09ebb     00 02 5C 90 
09ebf     00 00 00 00 
09ec3     00 00 00 00 
09ec7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09ecb     00 02 5C 90 
09ecf     00 00 D6 50 
09ed3     00 00 00 00 
09ed7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09edb     00 02 5C 90 
09edf     00 00 D6 50 
09ee3     00 00 00 00 
09ee7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09eeb     00 02 5C 90 
09eef     00 00 D6 50 
09ef3     00 00 00 00 
09ef7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09efb     00 02 5C 90 
09eff     00 00 D6 50 
09f03     00 01 53 40 
09f07     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
09f0b     00 02 5C 90 
09f0f     00 01 AC 60 
09f13     00 01 2E 40 
09f17     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e, $40, $00, $00, $aa, $70
09f1b     00 02 5C 90 
09f1f     00 00 00 00 
09f23     00 00 00 00 
09f27     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f2b     00 02 5C 90 
09f2f     00 00 00 00 
09f33     00 01 2E 40 
09f37     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
09f3b     00 02 5C 90 
09f3f     00 00 00 00 
09f43     00 00 00 00 
09f47     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f4b     00 02 5C 90 
09f4f     00 00 D6 50 
09f53     00 00 00 00 
09f57     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09f5b     00 02 5C 90 
09f5f     00 00 00 00 
09f63     00 00 00 00 
09f67     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f6b     00 02 5C 90 
09f6f     00 00 00 00 
09f73     00 00 00 00 
09f77     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
09f7b     00 02 5C 90 
09f7f     00 00 00 00 
09f83     00 00 FE 40 
09f87     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
09f8b     00 01 C5 90 
09f8f     00 00 D6 50 
09f93     00 00 00 00 
09f97     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09f9b     00 01 C5 90 
09f9f     00 00 D6 50 
09fa3     00 00 FE 40 
09fa7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
09fab     00 01 C5 90 
09faf     00 00 D6 50 
09fb3     00 00 00 00 
09fb7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
09fbb     00 01 C5 90 
09fbf     00 00 D6 50 
09fc3     00 00 FE 40 
09fc7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
09fcb     00 01 C5 90 
09fcf     00 01 AC 60 
09fd3     00 00 FE 40 
09fd7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $fe, $40, $00, $00, $aa, $70
09fdb     00 01 C5 90 
09fdf     00 00 00 00 
09fe3     00 01 0D 40 
09fe7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $00, $aa, $70
09feb     00 01 C5 90 
09fef     00 00 00 00 
09ff3     00 01 2E 40 
09ff7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
09ffb     00 01 C5 90 
09fff     00 00 00 00 
0a003     00 01 0D 40 
0a007     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $0d, $40, $00, $00, $aa, $70
0a00b     00 02 5C 90 
0a00f     00 00 D6 50 
0a013     00 01 2E 40 
0a017     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a01b     00 02 5C 90 
0a01f     00 00 D6 50 
0a023     00 00 00 00 
0a027     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a02b     00 02 5C 90 
0a02f     00 00 D6 50 
0a033     00 01 2E 40 
0a037     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a03b     00 02 5C 90 
0a03f     00 00 D6 50 
0a043     00 00 00 00 
0a047     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a04b     00 02 5C 90 
0a04f     00 01 AC 60 
0a053     00 00 00 00 
0a057     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a05b     00 02 5C 90 
0a05f     00 00 00 00 
0a063     00 00 00 00 
0a067     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a06b     00 02 5C 90 
0a06f     00 00 00 00 
0a073     00 00 00 00 
0a077     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a07b     00 02 5C 90 
0a07f     00 00 00 00 
0a083     00 01 53 40 
0a087     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $53, $40, $00, $00, $aa, $70
0a08b     00 02 5C 90 
0a08f     00 00 D6 50 
0a093     00 01 53 40 
0a097     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
0a09b     00 02 5C 90 
0a09f     00 00 00 00 
0a0a3     00 00 00 00 
0a0a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a0ab     00 02 5C 90 
0a0af     00 00 00 00 
0a0b3     00 01 2E 40 
0a0b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a0bb     00 02 5C 90 
0a0bf     00 00 00 00 
0a0c3     00 00 00 00 
0a0c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a0cb     00 02 5C 90 
0a0cf     00 00 D6 50 
0a0d3     00 00 00 00 
0a0d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a0db     00 02 5C 90 
0a0df     00 00 D6 50 
0a0e3     00 00 00 00 
0a0e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a0eb     00 02 5C 90 
0a0ef     00 00 D6 50 
0a0f3     00 00 00 00 
0a0f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a0fb     00 02 5C 90 
0a0ff     00 00 D6 50 
0a103     00 01 53 40 
0a107     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $01, $53, $40, $00, $00, $aa, $70
0a10b     00 02 5C 90 
0a10f     00 01 AC 60 
0a113     00 01 53 40 
0a117     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $53, $40, $00, $00, $aa, $70
0a11b     00 02 5C 90 
0a11f     00 00 00 00 
0a123     00 00 00 00 
0a127     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a12b     00 02 5C 90 
0a12f     00 00 00 00 
0a133     00 01 2E 40 
0a137     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a13b     00 02 5C 90 
0a13f     00 00 00 00 
0a143     00 00 00 00 
0a147     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a14b     00 02 5C 90 
0a14f     00 00 D6 50 
0a153     00 00 00 00 
0a157     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a15b     00 02 5C 90 
0a15f     00 00 00 00 
0a163     00 01 2E 40 
0a167     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a16b     00 02 5C 90 
0a16f     00 01 AC 50 
0a173     00 01 2E 40 
0a177     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a17b     00 02 5C 90 
0a17f     00 01 AC 50 
0a183     00 00 FE 40 
0a187     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a18b     00 01 C5 90 
0a18f     00 00 D6 50 
0a193     00 00 00 00 
0a197     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a19b     00 01 C5 90 
0a19f     00 00 00 00 
0a1a3     00 00 FE 40 
0a1a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
0a1ab     00 01 C5 90 
0a1af     00 00 00 00 
0a1b3     00 00 00 00 
0a1b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a1bb     00 01 C5 90 
0a1bf     00 00 00 00 
0a1c3     00 00 FE 40 
0a1c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe, $40, $00, $00, $aa, $70
0a1cb     00 01 C5 90 
0a1cf     00 00 D6 50 
0a1d3     00 00 FE 40 
0a1d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $40, $00, $00, $aa, $70
0a1db     00 01 C5 90 
0a1df     00 00 D6 50 
0a1e3     00 01 0D 40 
0a1e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d, $40, $00, $00, $aa, $70
0a1eb     00 01 C5 90 
0a1ef     00 00 D6 50 
0a1f3     00 01 2E 40 
0a1f7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $2e, $40, $00, $00, $aa, $70
0a1fb     00 01 C5 90 
0a1ff     00 00 D6 50 
0a203     00 01 0D 40 
0a207     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d, $40, $00, $00, $aa, $70
0a20b     00 02 5C 90 
0a20f     00 01 AC 60 
0a213     00 01 2E 40 
0a217     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e, $40, $00, $00, $aa, $70
0a21b     00 02 5C 90 
0a21f     00 00 00 00 
0a223     00 00 00 00 
0a227     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a22b     00 02 5C 90 
0a22f     00 00 00 00 
0a233     00 01 2E 40 
0a237     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e, $40, $00, $00, $aa, $70
0a23b     00 02 5C 90 
0a23f     00 00 00 00 
0a243     00 00 00 00 
0a247     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a24b     00 02 5C 90 
0a24f     00 00 D6 50 
0a253     00 00 00 00 
0a257     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a25b     00 02 5C 90 
0a25f     00 00 00 00 
0a263     00 00 00 00 
0a267     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a26b     00 02 5C 90 
0a26f     00 00 00 00 
0a273     00 00 00 00 
0a277     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a27b     00 02 5C 90 
0a27f     00 00 00 00 
0a283     00 00 AA 40 
0a287     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa, $40, $00, $00, $aa, $70
0a28b     00 02 5C 90 
0a28f     00 00 D6 50 
0a293     00 00 AA 40 
0a297     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa, $40, $00, $00, $aa, $70
0a29b     00 02 5C 90 
0a29f     00 00 00 00 
0a2a3     00 00 00 00 
0a2a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a2ab     00 02 5C 90 
0a2af     00 00 00 00 
0a2b3     00 00 97 40 
0a2b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a2bb     00 02 5C 90 
0a2bf     00 00 00 00 
0a2c3     00 00 00 00 
0a2c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a2cb     00 02 5C 90 
0a2cf     00 00 D6 50 
0a2d3     00 00 00 00 
0a2d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a2db     00 02 5C 90 
0a2df     00 00 D6 50 
0a2e3     00 00 00 00 
0a2e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a2eb     00 02 5C 90 
0a2ef     00 00 D6 50 
0a2f3     00 00 00 00 
0a2f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a2fb     00 02 5C 90 
0a2ff     00 00 D6 50 
0a303     00 00 AA 40 
0a307     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa, $40, $00, $00, $aa, $70
0a30b     00 02 5C 90 
0a30f     00 01 AC 60 
0a313     00 00 AA 40 
0a317     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $aa, $40, $00, $00, $aa, $70
0a31b     00 02 5C 90 
0a31f     00 00 00 00 
0a323     00 00 00 00 
0a327     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a32b     00 02 5C 90 
0a32f     00 00 00 00 
0a333     00 00 97 40 
0a337     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a33b     00 02 5C 90 
0a33f     00 00 00 00 
0a343     00 00 00 00 
0a347     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a34b     00 02 5C 90 
0a34f     00 00 D6 50 
0a353     00 00 00 00 
0a357     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a35b     00 02 5C 90 
0a35f     00 00 00 00 
0a363     00 00 AA 40 
0a367     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa, $40, $00, $00, $aa, $70
0a36b     00 02 5C 90 
0a36f     00 00 00 00 
0a373     00 00 97 40 
0a377     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a37b     00 02 5C 90 
0a37f     00 00 00 00 
0a383     00 00 7F 40 
0a387     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a38b     00 01 C5 90 
0a38f     00 00 D6 50 
0a393     00 00 7F 40 
0a397     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a39b     00 01 C5 90 
0a39f     00 00 00 00 
0a3a3     00 00 7F 40 
0a3a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3ab     00 01 C5 90 
0a3af     00 00 00 00 
0a3b3     00 00 7F 40 
0a3b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3bb     00 01 C5 90 
0a3bf     00 00 00 00 
0a3c3     00 00 7F 40 
0a3c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3cb     00 01 C5 90 
0a3cf     00 00 D6 50 
0a3d3     00 00 7F 40 
0a3d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a3db     00 01 C5 90 
0a3df     00 00 00 00 
0a3e3     00 00 87 40 
0a3e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87, $40, $00, $00, $aa, $70
0a3eb     00 01 C5 90 
0a3ef     00 00 00 00 
0a3f3     00 00 97 40 
0a3f7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a3fb     00 01 C5 90 
0a3ff     00 00 00 00 
0a403     00 00 7F 40 
0a407     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a40b     00 01 C5 90 
0a40f     00 00 D6 50 
0a413     00 00 7F 40 
0a417     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a41b     00 01 C5 90 
0a41f     00 00 00 00 
0a423     00 00 7F 40 
0a427     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a42b     00 01 C5 90 
0a42f     00 00 00 00 
0a433     00 00 7F 40 
0a437     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a43b     00 01 C5 90 
0a43f     00 00 00 00 
0a443     00 00 7F 40 
0a447     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a44b     00 01 C5 90 
0a44f     00 00 D6 50 
0a453     00 00 7F 40 
0a457     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a45b     00 01 C5 90 
0a45f     00 00 00 00 
0a463     00 00 87 40 
0a467     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87, $40, $00, $00, $aa, $70
0a46b     00 01 C5 90 
0a46f     00 00 00 00 
0a473     00 00 97 40 
0a477     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $aa, $70
0a47b     00 01 C5 90 
0a47f     00 00 00 00 
0a483     00 00 7F 40 
0a487     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a48b     00 01 C5 90 
0a48f     00 00 D6 50 
0a493     00 00 7F 40 
0a497     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $7f, $40, $00, $00, $aa, $70
0a49b     00 01 C5 90 
0a49f     00 00 00 00 
0a4a3     00 00 7F 40 
0a4a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4ab     00 01 C5 90 
0a4af     00 00 00 00 
0a4b3     00 00 7F 40 
0a4b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4bb     00 01 C5 90 
0a4bf     00 00 00 00 
0a4c3     00 00 7F 40 
0a4c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $00, $aa, $70
0a4cb     00 01 C5 90 
0a4cf     00 00 D6 50 
0a4d3     00 00 00 00 
0a4d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a4db     00 00 00 00 
0a4df     00 00 00 00 
0a4e3     00 00       | 	byte	$00[10]
0a4e5     7F 40 00 00 
0a4e9     AA 70 00 01 
0a4ed     C5 90 00 00 
0a4f1     D6 50 00 00 | 	byte	$7f, $40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00
0a4f5     00 00 00 00 
0a4f9     AA 70 00 00 
0a4fd     00 00 00 00 
0a501     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a505     00 00 00 00 
0a509     AA 70 00 01 
0a50d     C5 90 00 00 
0a511     D6 50 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00
0a515     00 00 00 00 
0a519     AA 70 00 00 
0a51d     00 00 00 00 
0a521     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a525     7F 40 00 00 
0a529     AA 70 00 00 
0a52d     00 00 00 01 
0a531     1D 60 00 00 | 	byte	$7f, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $1d, $60, $00, $00
0a535     00 00 00 00 
0a539     AA 70 00 00 
0a53d     00 00 00 00 
0a541     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a545     87 40 00 00 
0a549     AA 70 00 00 
0a54d     00 00 00 01 
0a551     53 60 00 00 | 	byte	$87, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $53, $60, $00, $00
0a555     97 40 00 00 
0a559     AA 70 00 00 
0a55d     00 00 00 00 
0a561     D6 60 00 00 | 	byte	$97, $40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $d6, $60, $00, $00
0a565     00 00 00 00 
0a569     AA 70 00 00 
0a56d     00 00 00 01 
0a571     AC 60 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0a575     00 00 00 00 
0a579     AA 70 00 00 
0a57d     00 00 00 00 
0a581     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a585     00 00 00 00 
0a589     00 00       | 	byte	$00[6]
0a58b     38 00 00 00 
0a58f     00 00 00 00 
0a593     00 00 00 00 
0a597     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a59b     38 00 00 00 
0a59f     00 00 00 00 
0a5a3     00 00 00 00 
0a5a7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5ab     38 00 00 00 
0a5af     00 00 00 00 
0a5b3     00 00 00 00 
0a5b7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5bb     38 00 00 00 
0a5bf     00 00 00 00 
0a5c3     00 00 00 00 
0a5c7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5cb     38 00 00 00 
0a5cf     00 00 00 00 
0a5d3     00 00 00 00 
0a5d7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5db     38 00 00 00 
0a5df     00 00 00 00 
0a5e3     00 00 00 00 
0a5e7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5eb     38 00 00 00 
0a5ef     00 00 00 00 
0a5f3     00 00 00 00 
0a5f7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5fb     38 00 00 00 
0a5ff     00 00 00 00 
0a603     00 00 00 00 
0a607     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a60b     38 00 00 00 
0a60f     00 00 00 00 
0a613     00 00 00 00 
0a617     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a61b     38 00 00 00 
0a61f     00 00 00 00 
0a623     00 00 00 00 
0a627     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a62b     38 00 00 00 
0a62f     00 00 00 00 
0a633     00 00 00 00 
0a637     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a63b     38 00 00 00 
0a63f     00 00 00 00 
0a643     00 00 00 00 
0a647     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a64b     38 00 00 00 
0a64f     00 00 00 00 
0a653     00 00 00 00 
0a657     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a65b     38 00 00 00 
0a65f     00 00 00 00 
0a663     00 00 00 00 
0a667     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a66b     38 00 00 00 
0a66f     00 00 00 00 
0a673     00 00 00 00 
0a677     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a67b     38 00 00 00 
0a67f     00 00 00 00 
0a683     00 02 A6 20 
0a687     00 00 AA 70 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a68b     00 02 5C 90 
0a68f     00 00 D6 50 
0a693     00 02 5C 20 
0a697     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a69b     00 02 5C 90 
0a69f     00 00 00 00 
0a6a3     00 00 00 00 
0a6a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a6ab     00 02 5C 90 
0a6af     00 00 00 00 
0a6b3     00 02 5C 20 
0a6b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a6bb     00 02 5C 90 
0a6bf     00 00 00 00 
0a6c3     00 02 5C 20 
0a6c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a6cb     00 02 5C 90 
0a6cf     00 00 D6 50 
0a6d3     00 00 00 00 
0a6d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a6db     00 02 5C 90 
0a6df     00 00 D6 50 
0a6e3     00 02 5C 20 
0a6e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a6eb     00 02 5C 90 
0a6ef     00 00 D6 50 
0a6f3     00 02 5C 20 
0a6f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a6fb     00 02 5C 90 
0a6ff     00 00 D6 50 
0a703     00 02 A6 20 
0a707     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0a70b     00 02 5C 90 
0a70f     00 01 AC 60 
0a713     00 02 5C 20 
0a717     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a71b     00 02 5C 90 
0a71f     00 00 00 00 
0a723     00 00 00 00 
0a727     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a72b     00 02 5C 90 
0a72f     00 00 00 00 
0a733     00 02 5C 20 
0a737     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a73b     00 02 5C 90 
0a73f     00 00 00 00 
0a743     00 02 5C 20 
0a747     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a74b     00 02 5C 90 
0a74f     00 00 D6 50 
0a753     00 00 00 00 
0a757     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a75b     00 02 5C 90 
0a75f     00 00 00 00 
0a763     00 02 5C 20 
0a767     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a76b     00 02 5C 90 
0a76f     00 00 00 00 
0a773     00 02 5C 20 
0a777     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a77b     00 02 5C 90 
0a77f     00 00 00 00 
0a783     00 01 C5 20 
0a787     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a78b     00 01 C5 90 
0a78f     00 00 D6 50 
0a793     00 00 00 00 
0a797     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a79b     00 01 C5 90 
0a79f     00 00 D6 50 
0a7a3     00 01 C5 20 
0a7a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7ab     00 01 C5 90 
0a7af     00 00 D6 50 
0a7b3     00 01 C5 20 
0a7b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7bb     00 01 C5 90 
0a7bf     00 00 D6 50 
0a7c3     00 01 C5 20 
0a7c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7cb     00 01 C5 90 
0a7cf     00 01 AC 60 
0a7d3     00 00 00 00 
0a7d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a7db     00 01 C5 90 
0a7df     00 00 00 00 
0a7e3     00 01 C5 20 
0a7e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7eb     00 01 C5 90 
0a7ef     00 00 00 00 
0a7f3     00 01 C5 20 
0a7f7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a7fb     00 01 C5 90 
0a7ff     00 00 00 00 
0a803     00 02 A6 20 
0a807     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a80b     00 02 5C 90 
0a80f     00 00 D6 50 
0a813     00 00 00 00 
0a817     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a81b     00 02 5C 90 
0a81f     00 00 D6 50 
0a823     00 02 5C 20 
0a827     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a82b     00 02 5C 90 
0a82f     00 00 D6 50 
0a833     00 02 5C 20 
0a837     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a83b     00 02 5C 90 
0a83f     00 00 D6 50 
0a843     00 02 5C 20 
0a847     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a84b     00 02 5C 90 
0a84f     00 01 AC 60 
0a853     00 00 00 00 
0a857     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0a85b     00 02 5C 90 
0a85f     00 00 00 00 
0a863     00 02 5C 20 
0a867     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a86b     00 02 5C 90 
0a86f     00 00 00 00 
0a873     00 02 5C 20 
0a877     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a87b     00 02 5C 90 
0a87f     00 00 00 00 
0a883     00 02 A6 20 
0a887     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0a88b     00 02 5C 90 
0a88f     00 00 D6 50 
0a893     00 02 5C 20 
0a897     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a89b     00 02 5C 90 
0a89f     00 00 00 00 
0a8a3     00 00 00 00 
0a8a7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a8ab     00 02 5C 90 
0a8af     00 00 00 00 
0a8b3     00 02 5C 20 
0a8b7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8bb     00 02 5C 90 
0a8bf     00 00 00 00 
0a8c3     00 02 5C 20 
0a8c7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8cb     00 02 5C 90 
0a8cf     00 00 D6 50 
0a8d3     00 00 00 00 
0a8d7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a8db     00 02 5C 90 
0a8df     00 00 D6 50 
0a8e3     00 02 5C 20 
0a8e7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8eb     00 02 5C 90 
0a8ef     00 00 D6 50 
0a8f3     00 02 5C 20 
0a8f7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0a8fb     00 02 5C 90 
0a8ff     00 00 D6 50 
0a903     00 02 A6 20 
0a907     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0a90b     00 02 5C 90 
0a90f     00 01 AC 60 
0a913     00 02 5C 20 
0a917     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a91b     00 02 5C 90 
0a91f     00 00 00 00 
0a923     00 00 00 00 
0a927     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0a92b     00 02 5C 90 
0a92f     00 00 00 00 
0a933     00 02 5C 20 
0a937     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a93b     00 02 5C 90 
0a93f     00 00 00 00 
0a943     00 02 5C 20 
0a947     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a94b     00 02 5C 90 
0a94f     00 00 D6 50 
0a953     00 00 00 00 
0a957     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a95b     00 02 5C 90 
0a95f     00 00 00 00 
0a963     00 02 5C 20 
0a967     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0a96b     00 02 5C 90 
0a96f     00 01 AC 60 
0a973     00 02 5C 20 
0a977     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0a97b     00 02 5C 90 
0a97f     00 01 AC 60 
0a983     00 01 C5 20 
0a987     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $c5, $20, $00, $00, $aa, $70
0a98b     00 01 C5 90 
0a98f     00 00 D6 50 
0a993     00 00 00 00 
0a997     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a99b     00 01 C5 90 
0a99f     00 00 00 00 
0a9a3     00 01 C5 20 
0a9a7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9ab     00 01 C5 90 
0a9af     00 00 00 00 
0a9b3     00 01 C5 20 
0a9b7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9bb     00 01 C5 90 
0a9bf     00 00 00 00 
0a9c3     00 01 C5 20 
0a9c7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9cb     00 01 C5 90 
0a9cf     00 00 D6 50 
0a9d3     00 00 00 00 
0a9d7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0a9db     00 01 C5 90 
0a9df     00 00 D6 50 
0a9e3     00 01 C5 20 
0a9e7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9eb     00 01 C5 90 
0a9ef     00 00 D6 50 
0a9f3     00 01 C5 20 
0a9f7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $c5, $20, $00, $00, $aa, $70
0a9fb     00 01 C5 90 
0a9ff     00 00 D6 50 
0aa03     00 02 A6 20 
0aa07     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0aa0b     00 02 5C 90 
0aa0f     00 01 AC 60 
0aa13     00 00 00 00 
0aa17     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $aa, $70
0aa1b     00 02 5C 90 
0aa1f     00 00 00 00 
0aa23     00 02 5C 20 
0aa27     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa2b     00 02 5C 90 
0aa2f     00 00 00 00 
0aa33     00 02 5C 20 
0aa37     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa3b     00 02 5C 90 
0aa3f     00 00 00 00 
0aa43     00 02 5C 20 
0aa47     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa4b     00 02 5C 90 
0aa4f     00 00 D6 50 
0aa53     00 00 00 00 
0aa57     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aa5b     00 02 5C 90 
0aa5f     00 00 00 00 
0aa63     00 02 5C 20 
0aa67     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa6b     00 02 5C 90 
0aa6f     00 00 00 00 
0aa73     00 02 5C 20 
0aa77     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa7b     00 02 5C 90 
0aa7f     00 00 00 00 
0aa83     00 02 A6 20 
0aa87     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $a6, $20, $00, $00, $aa, $70
0aa8b     00 02 5C 90 
0aa8f     00 00 D6 50 
0aa93     00 02 5C 20 
0aa97     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0aa9b     00 02 5C 90 
0aa9f     00 00 00 00 
0aaa3     00 00 00 00 
0aaa7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0aaab     00 02 5C 90 
0aaaf     00 00 00 00 
0aab3     00 02 5C 20 
0aab7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aabb     00 02 5C 90 
0aabf     00 00 00 00 
0aac3     00 02 5C 20 
0aac7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0aacb     00 02 5C 90 
0aacf     00 00 D6 50 
0aad3     00 00 00 00 
0aad7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0aadb     00 02 5C 90 
0aadf     00 00 D6 50 
0aae3     00 02 5C 20 
0aae7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0aaeb     00 02 5C 90 
0aaef     00 00 D6 50 
0aaf3     00 02 5C 20 
0aaf7     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $5c, $20, $00, $00, $aa, $70
0aafb     00 02 5C 90 
0aaff     00 00 D6 50 
0ab03     00 02 A6 20 
0ab07     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $02, $a6, $20, $00, $00, $aa, $70
0ab0b     00 02 5C 90 
0ab0f     00 01 AC 60 
0ab13     00 02 5C 20 
0ab17     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $01, $ac, $60, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab1b     00 02 5C 90 
0ab1f     00 00 00 00 
0ab23     00 00 00 00 
0ab27     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70
0ab2b     00 02 5C 90 
0ab2f     00 00 00 00 
0ab33     00 02 5C 20 
0ab37     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab3b     00 02 5C 90 
0ab3f     00 00 00 00 
0ab43     00 02 5C 20 
0ab47     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab4b     00 02 5C 90 
0ab4f     00 00 D6 50 
0ab53     00 00 00 00 
0ab57     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ab5b     00 02 5C 90 
0ab5f     00 00 00 00 
0ab63     00 02 5C 20 
0ab67     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab6b     00 02 5C 90 
0ab6f     00 00 00 00 
0ab73     00 02 5C 20 
0ab77     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $02, $5c, $20, $00, $00, $aa, $70
0ab7b     00 02 5C 90 
0ab7f     00 00 00 00 
0ab83     00 01 C5 20 
0ab87     00 00 AA 70 | 	byte	$00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ab8b     00 01 C5 90 
0ab8f     00 00 D6 50 
0ab93     00 00 00 00 
0ab97     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ab9b     00 01 C5 90 
0ab9f     00 00 00 00 
0aba3     00 01 C5 20 
0aba7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abab     00 01 C5 90 
0abaf     00 00 00 00 
0abb3     00 01 C5 20 
0abb7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abbb     00 01 C5 90 
0abbf     00 00 00 00 
0abc3     00 01 C5 20 
0abc7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abcb     00 01 C5 90 
0abcf     00 00 D6 50 
0abd3     00 00 00 00 
0abd7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0abdb     00 01 C5 90 
0abdf     00 00 00 00 
0abe3     00 01 C5 20 
0abe7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abeb     00 01 C5 90 
0abef     00 00 00 00 
0abf3     00 01 C5 20 
0abf7     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0abfb     00 01 C5 90 
0abff     00 00 00 00 
0ac03     00 01 C5 20 
0ac07     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac0b     00 01 C5 90 
0ac0f     00 00 D6 50 
0ac13     00 00 00 00 
0ac17     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ac1b     00 01 C5 90 
0ac1f     00 00 00 00 
0ac23     00 01 C5 20 
0ac27     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac2b     00 01 C5 90 
0ac2f     00 00 00 00 
0ac33     00 01 C5 20 
0ac37     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac3b     00 01 C5 90 
0ac3f     00 00 00 00 
0ac43     00 01 C5 20 
0ac47     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac4b     00 01 C5 90 
0ac4f     00 00 D6 50 
0ac53     00 00 00 00 
0ac57     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ac5b     00 01 C5 90 
0ac5f     00 00 00 00 
0ac63     00 01 C5 20 
0ac67     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac6b     00 01 C5 90 
0ac6f     00 00 00 00 
0ac73     00 01 C5 20 
0ac77     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac7b     00 01 C5 90 
0ac7f     00 00 00 00 
0ac83     00 01 C5 20 
0ac87     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $00, $00, $00, $01, $c5, $20, $00, $00, $aa, $70
0ac8b     00 01 C5 90 
0ac8f     00 00 D6 50 
0ac93     00 00 00 00 
0ac97     00 00 AA 70 | 	byte	$00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00, $aa, $70
0ac9b     00 00 00 00 
0ac9f     00 00 00 00 
0aca3     00          | 	byte	$00[9]
0aca4     01 C5 20 00 
0aca8     00 AA 70 00 
0acac     00 00 00 00 
0acb0     00 00 00 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00
0acb4     01 C5 20 00 
0acb8     00 AA 70 00 
0acbc     01 C5 90 00 
0acc0     00 D6 50 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00
0acc4     01 C5 20 00 
0acc8     00 AA 70 00 
0accc     01 C5 90 00 
0acd0     00 D6 50 00 | 	byte	$01, $c5, $20, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00
0acd4     00 00 00 00 
0acd8     00          | 	byte	$00[5]
0acd9     AA 70 00 01 
0acdd     C5 90 00 00 
0ace1     D6 50 00 00 
0ace5     FE 20 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe, $20, $00, $00
0ace9     AA 70 00 00 
0aced     00 00 00 00 
0acf1     00 00 00 00 
0acf5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0acf9     AA 70 00 01 
0acfd     C5 90 00 00 
0ad01     D6 50 00 00 
0ad05     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00, $00, $00, $00
0ad09     AA 70 00 00 
0ad0d     00 00 00 00 
0ad11     00 00 00 00 
0ad15     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad19     AA 70 00 00 
0ad1d     00 00 00 00 
0ad21     00 00 00 00 
0ad25     FE 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00
0ad29     AA 70 00 00 
0ad2d     00 00 00 00 
0ad31     00 00 00 00 
0ad35     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad39     AA 70 00 00 
0ad3d     00 00 00 00 
0ad41     00 00 00 01 
0ad45     0D 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $0d, $20, $00, $00
0ad49     AA 70 00 00 
0ad4d     00 00 00 00 
0ad51     00 00 00 01 
0ad55     2E 20 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $2e, $20, $00, $00
0ad59     AA 70 00 00 
0ad5d     00 00 00 00 
0ad61     00 00 00 00 
0ad65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad69     AA 70 00 00 
0ad6d     00 00 00 00 
0ad71     00 00 00 00 
0ad75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ad79     AA 70 00 00 
0ad7d     00 00 00 00 
0ad81     00 00 00 03 
0ad85     28 10 38 03 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $28, $10, $38, $03
0ad89     28 10 38 01 
0ad8d     FC 30 00 01 
0ad91     AC 50 00 00 
0ad95     00 00 38 00 | 	byte	$28, $10, $38, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0ad99     00 00 38 00 
0ad9d     00 00 00 00 
0ada1     AA 70 00 00 
0ada5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0ada9     00 00 38 00 
0adad     00 00 00 00 
0adb1     AA 70 00 00 
0adb5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0adb9     00 00 38 00 
0adbd     00 00 00 00 
0adc1     AA 70 00 00 
0adc5     00 00 38 03 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $03
0adc9     28 10 38 01 
0adcd     94 30 00 01 
0add1     1D 60 00 00 
0add5     00 00 38 00 | 	byte	$28, $10, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0add9     00 00 38 00 
0addd     00 00 00 00 
0ade1     AA 70 00 00 
0ade5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0ade9     00 00 38 00 
0aded     00 00 00 00 
0adf1     AA 70 00 00 
0adf5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0adf9     00 00 38 00 
0adfd     00 00 00 00 
0ae01     AA 70 00 02 
0ae05     A6 10 59 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $a6, $10, $59, $02
0ae09     A6 10 59 01 
0ae0d     53 30 00 01 
0ae11     AC 50 00 00 
0ae15     00 00 59 00 | 	byte	$a6, $10, $59, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $59, $00
0ae19     00 00 59 00 
0ae1d     00 00 00 00 
0ae21     AA 70 00 00 
0ae25     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae29     00 00 59 00 
0ae2d     00 00 00 00 
0ae31     AA 70 00 00 
0ae35     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae39     00 00 59 00 
0ae3d     00 00 00 00 
0ae41     AA 70 00 00 
0ae45     00 00 59 02 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $02
0ae49     A6 10 59 01 
0ae4d     2E 30 00 01 
0ae51     1D 60 00 00 
0ae55     00 00 59 00 | 	byte	$a6, $10, $59, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $59, $00
0ae59     00 00 59 00 
0ae5d     00 00 00 00 
0ae61     AA 70 00 00 
0ae65     00 00 59 00 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae69     00 00 59 01 
0ae6d     53 30 00 00 
0ae71     AA 70 00 00 
0ae75     00 00 59 00 | 	byte	$00, $00, $59, $01, $53, $30, $00, $00, $aa, $70, $00, $00, $00, $00, $59, $00
0ae79     00 00 59 00 
0ae7d     00 00 00 00 
0ae81     AA 70 00 01 
0ae85     FC 10 47 01 | 	byte	$00, $00, $59, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $10, $47, $01
0ae89     FC 10 47 01 
0ae8d     FC 30 00 01 
0ae91     AC 50 00 00 
0ae95     00 00 47 00 | 	byte	$fc, $10, $47, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $47, $00
0ae99     00 00 47 00 
0ae9d     00 00 00 00 
0aea1     AA 70 00 00 
0aea5     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0aea9     00 00 47 00 
0aead     00 00 00 00 
0aeb1     AA 70 00 00 
0aeb5     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0aeb9     00 00 47 00 
0aebd     00 00 00 00 
0aec1     AA 70 00 00 
0aec5     00 00 47 01 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $01
0aec9     FC 10 47 01 
0aecd     94 30 00 01 
0aed1     1D 60 00 00 
0aed5     00 00 47 00 | 	byte	$fc, $10, $47, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $47, $00
0aed9     00 00 47 00 
0aedd     00 00 00 00 
0aee1     AA 70 00 00 
0aee5     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0aee9     00 00 47 00 
0aeed     00 00 00 00 
0aef1     AA 70 00 00 
0aef5     00 00 47 00 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $47, $00
0aef9     00 00 47 00 
0aefd     00 00 00 00 
0af01     AA 70 00 01 
0af05     94 10 38 01 | 	byte	$00, $00, $47, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $94, $10, $38, $01
0af09     94 10 38 01 
0af0d     53 30 00 01 
0af11     AC 50 00 00 
0af15     00 00 38 00 | 	byte	$94, $10, $38, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0af19     00 00 38 00 
0af1d     00 00 00 00 
0af21     AA 70 00 00 
0af25     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0af29     00 00 38 00 
0af2d     00 00 00 00 
0af31     AA 70 00 00 
0af35     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0af39     00 00 38 00 
0af3d     00 00 00 00 
0af41     AA 70 00 00 
0af45     00 00 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $01
0af49     94 10 38 01 
0af4d     2E 30 00 01 
0af51     1D 60 00 00 
0af55     00 00 38 00 | 	byte	$94, $10, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0af59     00 00 38 00 
0af5d     00 00 00 00 
0af61     AA 70 00 00 
0af65     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0af69     00 00 38 01 
0af6d     53 30 00 01 
0af71     1D 60 00 00 
0af75     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0af79     00 00 38 00 
0af7d     00 00 00 01 
0af81     1D 60 00 01 
0af85     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $e0, $10, $38, $01
0af89     E0 10 38 01 
0af8d     2E 30 00 01 
0af91     AC 50 00 00 
0af95     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0af99     00 00 38 00 
0af9d     00 00 00 00 
0afa1     AA 70 00 00 
0afa5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0afa9     00 00 38 00 
0afad     00 00 00 00 
0afb1     AA 70 00 00 
0afb5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0afb9     00 00 38 00 
0afbd     00 00 00 00 
0afc1     AA 70 00 00 
0afc5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0afc9     00 00 38 01 
0afcd     2E 30 00 01 
0afd1     1D 60 00 00 
0afd5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0afd9     00 00 38 00 
0afdd     00 00 00 00 
0afe1     AA 70 00 00 
0afe5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0afe9     00 00 38 00 
0afed     00 00 00 00 
0aff1     AA 70 00 00 
0aff5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0aff9     00 00 38 00 
0affd     00 00 00 00 
0b001     AA 70 00 00 
0b005     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b009     00 00 38 01 
0b00d     2E 30 00 01 
0b011     AC 50 00 00 
0b015     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b019     00 00 38 00 
0b01d     00 00 00 00 
0b021     AA 70 00 00 
0b025     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b029     00 00 38 00 
0b02d     00 00 00 01 
0b031     AC 50 00 00 
0b035     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b039     00 00 38 00 
0b03d     00 00 00 00 
0b041     AA 70 00 00 
0b045     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b049     00 00 38 01 
0b04d     2E 30 00 01 
0b051     1D 60 00 00 
0b055     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b059     00 00 38 00 
0b05d     00 00 00 00 
0b061     AA 70 00 00 
0b065     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b069     00 00 38 00 
0b06d     00 00 00 00 
0b071     AA 70 00 00 
0b075     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b079     00 00 38 00 
0b07d     00 00 00 00 
0b081     AA 70 00 01 
0b085     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $e0, $10, $38, $01
0b089     E0 10 38 01 
0b08d     2E 30 00 01 
0b091     AC 50 00 00 
0b095     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b099     00 00 38 00 
0b09d     00 00 00 00 
0b0a1     AA 70 00 00 
0b0a5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0a9     00 00 38 00 
0b0ad     00 00 00 00 
0b0b1     AA 70 00 00 
0b0b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0b9     00 00 38 00 
0b0bd     00 00 00 00 
0b0c1     AA 70 00 00 
0b0c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0c9     00 00 38 01 
0b0cd     2E 30 00 01 
0b0d1     1D 60 00 00 
0b0d5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b0d9     00 00 38 00 
0b0dd     00 00 00 00 
0b0e1     AA 70 00 00 
0b0e5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0e9     00 00 38 00 
0b0ed     00 00 00 00 
0b0f1     AA 70 00 00 
0b0f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b0f9     00 00 38 00 
0b0fd     00 00 00 00 
0b101     AA 70 00 00 
0b105     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b109     00 00 38 01 
0b10d     2E 30 00 01 
0b111     AC 50 00 00 
0b115     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b119     00 00 38 00 
0b11d     00 00 00 00 
0b121     AA 70 00 00 
0b125     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b129     00 00 38 00 
0b12d     00 00 00 01 
0b131     AC 50 00 00 
0b135     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b139     00 00 38 00 
0b13d     00 00 00 00 
0b141     AA 70 00 00 
0b145     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b149     00 00 38 01 
0b14d     2E 30 00 01 
0b151     1D 60 00 00 
0b155     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b159     00 00 38 00 
0b15d     00 00 00 01 
0b161     1D 60 00 00 
0b165     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b169     00 00 38 00 
0b16d     00 00 00 00 
0b171     AA 70 00 00 
0b175     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b179     00 00 38 00 
0b17d     00 00 00 01 
0b181     1D 60 00 01 
0b185     94 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $94, $10, $38, $01
0b189     94 10 38 01 
0b18d     FC 30 00 01 
0b191     AC 50 00 00 
0b195     00 00 38 00 | 	byte	$94, $10, $38, $01, $fc, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b199     00 00 38 00 
0b19d     00 00 00 00 
0b1a1     AA 70 00 00 
0b1a5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1a9     00 00 38 00 
0b1ad     00 00 00 00 
0b1b1     AA 70 00 00 
0b1b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1b9     00 00 38 00 
0b1bd     00 00 00 00 
0b1c1     AA 70 00 00 
0b1c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1c9     00 00 38 01 
0b1cd     94 30 00 01 
0b1d1     1D 60 00 00 
0b1d5     00 00 38 00 | 	byte	$00, $00, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b1d9     00 00 38 00 
0b1dd     00 00 00 00 
0b1e1     AA 70 00 00 
0b1e5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1e9     00 00 38 00 
0b1ed     00 00 00 00 
0b1f1     AA 70 00 00 
0b1f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b1f9     00 00 38 00 
0b1fd     00 00 00 00 
0b201     AA 70 00 00 
0b205     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b209     00 00 38 01 
0b20d     53 30 00 01 
0b211     AC 50 00 00 
0b215     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b219     00 00 38 00 
0b21d     00 00 00 00 
0b221     AA 70 00 00 
0b225     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b229     00 00 38 00 
0b22d     00 00 00 00 
0b231     AA 70 00 00 
0b235     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b239     00 00 38 00 
0b23d     00 00 00 00 
0b241     AA 70 00 00 
0b245     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b249     00 00 38 01 
0b24d     94 30 00 01 
0b251     1D 60 00 00 
0b255     00 00 38 00 | 	byte	$00, $00, $38, $01, $94, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b259     00 00 38 00 
0b25d     00 00 00 00 
0b261     AA 70 00 00 
0b265     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b269     00 00 38 01 
0b26d     53 30 00 00 
0b271     AA 70 00 00 
0b275     00 00 38 00 | 	byte	$00, $00, $38, $01, $53, $30, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b279     00 00 38 00 
0b27d     00 00 00 00 
0b281     AA 70 00 01 
0b285     68 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $68, $10, $38, $01
0b289     68 10 38 01 
0b28d     C5 30 00 01 
0b291     AC 50 00 00 
0b295     00 00 38 00 | 	byte	$68, $10, $38, $01, $c5, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b299     00 00 38 00 
0b29d     00 00 00 00 
0b2a1     AA 70 00 00 
0b2a5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2a9     00 00 38 00 
0b2ad     00 00 00 00 
0b2b1     AA 70 00 00 
0b2b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2b9     00 00 38 00 
0b2bd     00 00 00 00 
0b2c1     AA 70 00 00 
0b2c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2c9     00 00 38 01 
0b2cd     68 30 00 01 
0b2d1     1D 60 00 00 
0b2d5     00 00 38 00 | 	byte	$00, $00, $38, $01, $68, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b2d9     00 00 38 00 
0b2dd     00 00 00 00 
0b2e1     AA 70 00 00 
0b2e5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2e9     00 00 38 00 
0b2ed     00 00 00 00 
0b2f1     AA 70 00 00 
0b2f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b2f9     00 00 38 00 
0b2fd     00 00 00 00 
0b301     AA 70 00 00 
0b305     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b309     00 00 38 01 
0b30d     2E 30 00 01 
0b311     AC 50 00 00 
0b315     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b319     00 00 38 00 
0b31d     00 00 00 00 
0b321     AA 70 00 00 
0b325     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b329     00 00 38 00 
0b32d     00 00 00 00 
0b331     AA 70 00 00 
0b335     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b339     00 00 38 00 
0b33d     00 00 00 00 
0b341     AA 70 00 00 
0b345     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b349     00 00 38 01 
0b34d     68 30 00 01 
0b351     1D 60 00 00 
0b355     00 00 38 00 | 	byte	$00, $00, $38, $01, $68, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b359     00 00 38 00 
0b35d     00 00 00 00 
0b361     AA 70 00 00 
0b365     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b369     00 00 38 00 
0b36d     00 00 00 01 
0b371     1D 60 00 00 
0b375     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b379     00 00 38 00 
0b37d     00 00 00 01 
0b381     1D 60 00 02 
0b385     5C 10 38 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $02, $5c, $10, $38, $02
0b389     5C 10 38 01 
0b38d     7D 30 00 01 
0b391     AC 50 00 00 
0b395     00 00 38 00 | 	byte	$5c, $10, $38, $01, $7d, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b399     00 00 38 00 
0b39d     00 00 00 00 
0b3a1     AA 70 00 00 
0b3a5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3a9     00 00 38 00 
0b3ad     00 00 00 00 
0b3b1     AA 70 00 00 
0b3b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3b9     00 00 38 00 
0b3bd     00 00 00 00 
0b3c1     AA 70 00 00 
0b3c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3c9     00 00 38 01 
0b3cd     2E 30 00 01 
0b3d1     1D 60 00 00 
0b3d5     00 00 38 00 | 	byte	$00, $00, $38, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b3d9     00 00 38 00 
0b3dd     00 00 00 00 
0b3e1     AA 70 00 00 
0b3e5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3e9     00 00 38 00 
0b3ed     00 00 00 00 
0b3f1     AA 70 00 00 
0b3f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b3f9     00 00 38 00 
0b3fd     00 00 00 00 
0b401     AA 70 00 02 
0b405     5C 10 49 02 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $5c, $10, $49, $02
0b409     5C 10 49 01 
0b40d     E0 30 00 01 
0b411     AC 50 00 00 
0b415     00 00 49 00 | 	byte	$5c, $10, $49, $01, $e0, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b419     00 00 49 00 
0b41d     00 00 00 00 
0b421     AA 70 00 00 
0b425     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b429     00 00 49 00 
0b42d     00 00 00 01 
0b431     AC 50 00 00 
0b435     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b439     00 00 49 00 
0b43d     00 00 00 00 
0b441     AA 70 00 00 
0b445     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b449     00 00 49 01 
0b44d     2E 30 00 01 
0b451     1D 60 00 00 
0b455     00 00 49 00 | 	byte	$00, $00, $49, $01, $2e, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $49, $00
0b459     00 00 49 00 
0b45d     00 00 00 00 
0b461     AA 70 00 00 
0b465     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b469     00 00 49 00 
0b46d     00 00 00 00 
0b471     AA 70 00 00 
0b475     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b479     00 00 49 00 
0b47d     00 00 00 00 
0b481     AA 70 00 02 
0b485     3A 10 49 02 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $02, $3a, $10, $49, $02
0b489     3A 10 49 01 
0b48d     53 30 00 01 
0b491     AC 50 00 00 
0b495     00 00 49 00 | 	byte	$3a, $10, $49, $01, $53, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $49, $00
0b499     00 00 49 00 
0b49d     00 00 00 00 
0b4a1     AA 70 00 00 
0b4a5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4a9     00 00 49 00 
0b4ad     00 00 00 00 
0b4b1     AA 70 00 00 
0b4b5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4b9     00 00 49 00 
0b4bd     00 00 00 00 
0b4c1     AA 70 00 00 
0b4c5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4c9     00 00 49 01 
0b4cd     53 30 00 01 
0b4d1     1D 60 00 00 
0b4d5     00 00 49 00 | 	byte	$00, $00, $49, $01, $53, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $49, $00
0b4d9     00 00 49 00 
0b4dd     00 00 00 00 
0b4e1     AA 70 00 00 
0b4e5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4e9     00 00 49 00 
0b4ed     00 00 00 00 
0b4f1     AA 70 00 00 
0b4f5     00 00 49 00 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $49, $00
0b4f9     00 00 49 00 
0b4fd     00 00 00 00 
0b501     AA 70 00 01 
0b505     FC 10 38 01 | 	byte	$00, $00, $49, $00, $00, $00, $00, $00, $aa, $70, $00, $01, $fc, $10, $38, $01
0b509     FC 10 38 01 
0b50d     40 30 00 01 
0b511     AC 50 00 00 
0b515     00 00 38 00 | 	byte	$fc, $10, $38, $01, $40, $30, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b519     00 00 38 00 
0b51d     00 00 00 00 
0b521     AA 70 00 00 
0b525     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b529     00 00 38 00 
0b52d     00 00 00 01 
0b531     AC 50 00 00 
0b535     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $38, $00
0b539     00 00 38 00 
0b53d     00 00 00 00 
0b541     AA 70 00 00 
0b545     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b549     00 00 38 01 
0b54d     40 30 00 01 
0b551     1D 60 00 00 
0b555     00 00 38 00 | 	byte	$00, $00, $38, $01, $40, $30, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b559     00 00 38 00 
0b55d     00 00 00 01 
0b561     1D 60 00 00 
0b565     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $00, $00, $00, $38, $00
0b569     00 00 38 00 
0b56d     00 00 00 00 
0b571     AA 70 00 00 
0b575     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00, $00, $38, $00
0b579     00 00 38 00 
0b57d     00 00 00 01 
0b581     1D 60 00 01 
0b585     E0 10 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $01, $1d, $60, $00, $01, $e0, $10, $38, $01
0b589     E0 10 38 01 
0b58d     2E 30 00 02 
0b591     80 60 00 00 
0b595     00 00 38 00 | 	byte	$e0, $10, $38, $01, $2e, $30, $00, $02, $80, $60, $00, $00, $00, $00, $38, $00
0b599     00 00 38 00 
0b59d     00 00 00 00 
0b5a1     00 00 00 00 
0b5a5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5a9     00 00 38 00 
0b5ad     00 00 00 00 
0b5b1     00 00 00 00 
0b5b5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5b9     00 00 38 00 
0b5bd     00 00 00 00 
0b5c1     00 00 00 00 
0b5c5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5c9     00 00 38 00 
0b5cd     00 00 00 00 
0b5d1     00 00 00 00 
0b5d5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5d9     00 00 38 00 
0b5dd     00 00 00 00 
0b5e1     00 00 00 00 
0b5e5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5e9     00 00 38 00 
0b5ed     00 00 00 00 
0b5f1     00 00 00 00 
0b5f5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b5f9     00 00 38 00 
0b5fd     00 00 00 00 
0b601     00 00 00 00 
0b605     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b609     00 00 38 00 
0b60d     00 00 00 00 
0b611     00 00 00 00 
0b615     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b619     00 00 38 00 
0b61d     00 00 00 00 
0b621     00 00 00 00 
0b625     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b629     00 00 38 00 
0b62d     00 00 00 00 
0b631     00 00 00 00 
0b635     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b639     00 00 38 00 
0b63d     00 00 00 00 
0b641     00 00 00 00 
0b645     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b649     00 00 38 00 
0b64d     00 00 00 00 
0b651     00 00 00 00 
0b655     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b659     00 00 38 00 
0b65d     00 00 00 00 
0b661     00 00 00 00 
0b665     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b669     00 00 38 00 
0b66d     00 00 00 00 
0b671     00 00 00 00 
0b675     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b679     00 00 38 00 
0b67d     00 00 00 00 
0b681     00 00 00 00 
0b685     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0b689     00 00 38 00 
0b68d     00 00 00 00 
0b691     00 00 00 00 
0b695     00 0C 20 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $20, $00
0b699     00 0C 20 00 
0b69d     00 00 00 00 
0b6a1     00 00 00 00 
0b6a5     00 0C 10 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00
0b6a9     00 0C 10 00 
0b6ad     00 00 00 00 
0b6b1     00 00 00 00 
0b6b5     00 0C 00 00 | 	byte	$00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00
0b6b9     00 0C 00 00 
0b6bd     00 00 00 00 
0b6c1     00 00 00 00 
0b6c5     00 00 00 00 | 	byte	$00, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6c9     00 00 00 00 
      ...             
0b77d     00 00 00 00 
0b781     00 00 00    | 	byte	$00[187]
0b784     02 A6 80 00 
0b788     00 AA 70 00 
0b78c     02 A6 90 00 
0b790     01 AC 50 00 | 	byte	$02, $a6, $80, $00, $00, $aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00
0b794     02 5C 80 00 
0b798     00 AA 70 00 
0b79c     02 5C 90 00 
0b7a0     00 00 00 00 | 	byte	$02, $5c, $80, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00
0b7a4     00 00 00 00 
0b7a8     00          | 	byte	$00[5]
0b7a9     AA 70 00 00 
0b7ad     00 00 00 01 
0b7b1     AC 50 00 02 
0b7b5     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b7b9     AA 70 00 02 
0b7bd     5C 90 00 01 
0b7c1     AC 50 00 00 
0b7c5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b7c9     D6 70 00 00 
0b7cd     00 00 00 01 
0b7d1     AC 60 00 00 
0b7d5     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b7d9     AA 70 00 00 
0b7dd     00 00 00 00 
0b7e1     00 00 00 00 
0b7e5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7e9     AA 70 00 00 
0b7ed     00 00 00 01 
0b7f1     AC 50 00 00 
0b7f5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b7f9     AA 70 00 00 
0b7fd     00 00 00 00 
0b801     00 00 00 02 
0b805     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b809     AA 70 00 02 
0b80d     A6 90 00 01 
0b811     AC 50 00 02 
0b815     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b819     AA 70 00 02 
0b81d     5C 90 00 00 
0b821     00 00 00 00 
0b825     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b829     AA 70 00 00 
0b82d     00 00 00 01 
0b831     AC 50 00 02 
0b835     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b839     AA 70 00 02 
0b83d     5C 90 00 01 
0b841     AC 50 00 00 
0b845     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b849     D6 70 00 00 
0b84d     00 00 00 01 
0b851     AC 60 00 00 
0b855     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b859     AA 70 00 00 
0b85d     00 00 00 00 
0b861     00 00 00 00 
0b865     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b869     AA 70 00 00 
0b86d     00 00 00 01 
0b871     AC 50 00 00 
0b875     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b879     AA 70 00 00 
0b87d     00 00 00 00 
0b881     00 00 00 01 
0b885     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0b889     AA 70 00 01 
0b88d     FC 90 00 01 
0b891     AC 50 00 01 
0b895     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0b899     AA 70 00 01 
0b89d     C5 90 00 00 
0b8a1     00 00 00 00 
0b8a5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8a9     AA 70 00 00 
0b8ad     00 00 00 01 
0b8b1     AC 50 00 01 
0b8b5     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0b8b9     AA 70 00 01 
0b8bd     C5 90 00 01 
0b8c1     AC 50 00 00 
0b8c5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b8c9     D6 70 00 00 
0b8cd     00 00 00 01 
0b8d1     AC 60 00 00 
0b8d5     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b8d9     AA 70 00 00 
0b8dd     00 00 00 00 
0b8e1     00 00 00 00 
0b8e5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8e9     AA 70 00 00 
0b8ed     00 00 00 01 
0b8f1     AC 50 00 00 
0b8f5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b8f9     AA 70 00 00 
0b8fd     00 00 00 00 
0b901     00 00 00 02 
0b905     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b909     AA 70 00 02 
0b90d     A6 90 00 01 
0b911     AC 50 00 02 
0b915     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b919     AA 70 00 02 
0b91d     5C 90 00 00 
0b921     00 00 00 00 
0b925     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b929     AA 70 00 00 
0b92d     00 00 00 01 
0b931     AC 50 00 02 
0b935     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b939     AA 70 00 02 
0b93d     5C 90 00 01 
0b941     AC 50 00 00 
0b945     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b949     D6 70 00 00 
0b94d     00 00 00 01 
0b951     AC 60 00 00 
0b955     00 00 00 00 | 	byte	$d6, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b959     AA 70 00 00 
0b95d     00 00 00 00 
0b961     00 00 00 00 
0b965     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b969     AA 70 00 00 
0b96d     00 00 00 01 
0b971     AC 50 00 00 
0b975     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b979     AA 70 00 00 
0b97d     00 00 00 00 
0b981     00 00 00 02 
0b985     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0b989     AA 70 00 02 
0b98d     A6 90 00 01 
0b991     AC 50 00 02 
0b995     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0b999     AA 70 00 02 
0b99d     5C 90 00 01 
0b9a1     AC 50 00 00 
0b9a5     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0b9a9     AA 70 00 00 
0b9ad     00 00 00 00 
0b9b1     00 00 00 02 
0b9b5     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0b9b9     AA 70 00 02 
0b9bd     5C 90 00 01 
0b9c1     AC 50 00 00 
0b9c5     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0b9c9     AA 70 00 00 
0b9cd     00 00 00 01 
0b9d1     AC 60 00 00 
0b9d5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0b9d9     AA 70 00 00 
0b9dd     00 00 00 00 
0b9e1     00 00 00 00 
0b9e5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9e9     AA 70 00 00 
0b9ed     00 00 00 01 
0b9f1     AC 50 00 00 
0b9f5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0b9f9     AA 70 00 00 
0b9fd     00 00 00 00 
0ba01     00 00 00 02 
0ba05     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0ba09     AA 70 00 02 
0ba0d     A6 90 00 01 
0ba11     AC 50 00 02 
0ba15     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0ba19     AA 70 00 02 
0ba1d     5C 90 00 01 
0ba21     AC 50 00 00 
0ba25     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0ba29     AA 70 00 00 
0ba2d     00 00 00 00 
0ba31     00 00 00 02 
0ba35     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0ba39     AA 70 00 02 
0ba3d     5C 90 00 01 
0ba41     AC 50 00 00 
0ba45     00 80 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0ba49     AA 70 00 00 
0ba4d     00 00 00 01 
0ba51     AC 60 00 00 
0ba55     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0ba59     AA 70 00 00 
0ba5d     00 00 00 00 
0ba61     00 00 00 00 
0ba65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba69     AA 70 00 00 
0ba6d     00 00 00 01 
0ba71     AC 50 00 00 
0ba75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0ba79     AA 70 00 00 
0ba7d     00 00 00 00 
0ba81     00 00 00 01 
0ba85     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0ba89     AA 70 00 01 
0ba8d     FC 90 00 01 
0ba91     AC 50 00 01 
0ba95     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0ba99     AA 70 00 01 
0ba9d     C5 90 00 01 
0baa1     AC 50 00 00 
0baa5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0baa9     AA 70 00 00 
0baad     00 00 00 00 
0bab1     00 00 00 01 
0bab5     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $c5, $80, $00, $00
0bab9     AA 70 00 01 
0babd     C5 90 00 01 
0bac1     AC 50 00 00 
0bac5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bac9     AA 70 00 00 
0bacd     00 00 00 01 
0bad1     AC 60 00 00 
0bad5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bad9     AA 70 00 00 
0badd     00 00 00 00 
0bae1     00 00 00 00 
0bae5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bae9     AA 70 00 00 
0baed     00 00 00 01 
0baf1     AC 50 00 00 
0baf5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0baf9     AA 70 00 00 
0bafd     00 00 00 00 
0bb01     00 00 00 02 
0bb05     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bb09     AA 70 00 02 
0bb0d     A6 90 00 01 
0bb11     AC 50 00 02 
0bb15     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bb19     AA 70 00 02 
0bb1d     5C 90 00 01 
0bb21     AC 50 00 00 
0bb25     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb29     AA 70 00 00 
0bb2d     00 00 00 00 
0bb31     00 00 00 02 
0bb35     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0bb39     AA 70 00 02 
0bb3d     5C 90 00 01 
0bb41     AC 50 00 00 
0bb45     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb49     AA 70 00 00 
0bb4d     00 00 00 01 
0bb51     AC 60 00 00 
0bb55     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bb59     AA 70 00 00 
0bb5d     00 00 00 00 
0bb61     00 00 00 00 
0bb65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb69     AA 70 00 00 
0bb6d     00 00 00 01 
0bb71     AC 50 00 00 
0bb75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bb79     AA 70 00 00 
0bb7d     00 00 00 00 
0bb81     00 00 00 02 
0bb85     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bb89     AA 70 00 02 
0bb8d     A6 90 00 01 
0bb91     AC 50 00 02 
0bb95     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bb99     AA 70 00 02 
0bb9d     5C 90 00 00 
0bba1     00 00 00 00 
0bba5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bba9     AA 70 00 00 
0bbad     00 00 00 01 
0bbb1     AC 50 00 02 
0bbb5     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bbb9     AA 70 00 02 
0bbbd     5C 90 00 01 
0bbc1     AC 50 00 00 
0bbc5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bbc9     AA 70 00 00 
0bbcd     00 00 00 01 
0bbd1     AC 60 00 00 
0bbd5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bbd9     AA 70 00 00 
0bbdd     00 00 00 00 
0bbe1     00 00 00 00 
0bbe5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbe9     AA 70 00 00 
0bbed     00 00 00 01 
0bbf1     AC 50 00 00 
0bbf5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bbf9     AA 70 00 00 
0bbfd     00 00 00 00 
0bc01     00 00 00 02 
0bc05     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bc09     AA 70 00 02 
0bc0d     A6 90 00 01 
0bc11     AC 50 00 02 
0bc15     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bc19     AA 70 00 02 
0bc1d     5C 90 00 00 
0bc21     00 00 00 00 
0bc25     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc29     AA 70 00 00 
0bc2d     00 00 00 01 
0bc31     AC 50 00 02 
0bc35     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bc39     AA 70 00 02 
0bc3d     5C 90 00 01 
0bc41     AC 50 00 00 
0bc45     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc49     AA 70 00 00 
0bc4d     00 00 00 01 
0bc51     AC 60 00 00 
0bc55     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bc59     AA 70 00 00 
0bc5d     00 00 00 00 
0bc61     00 00 00 00 
0bc65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc69     AA 70 00 00 
0bc6d     00 00 00 01 
0bc71     AC 50 00 00 
0bc75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bc79     AA 70 00 00 
0bc7d     00 00 00 00 
0bc81     00 00 00 01 
0bc85     FC 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $fc, $80, $00, $00
0bc89     AA 70 00 01 
0bc8d     FC 90 00 01 
0bc91     AC 50 00 01 
0bc95     C5 80 00 00 | 	byte	$aa, $70, $00, $01, $fc, $90, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bc99     AA 70 00 01 
0bc9d     C5 90 00 00 
0bca1     00 00 00 00 
0bca5     00 00 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bca9     AA 70 00 00 
0bcad     00 00 00 01 
0bcb1     AC 50 00 01 
0bcb5     C5 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $01, $c5, $80, $00, $00
0bcb9     AA 70 00 01 
0bcbd     C5 90 00 01 
0bcc1     AC 50 00 00 
0bcc5     00 80 00 00 | 	byte	$aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $80, $00, $00
0bcc9     AA 70 00 00 
0bccd     00 00 00 01 
0bcd1     AC 60 00 00 
0bcd5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bcd9     AA 70 00 00 
0bcdd     00 00 00 00 
0bce1     00 00 00 00 
0bce5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bce9     AA 70 00 00 
0bced     00 00 00 01 
0bcf1     AC 50 00 00 
0bcf5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bcf9     AA 70 00 00 
0bcfd     00 00 00 00 
0bd01     00 00 00 02 
0bd05     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bd09     AA 70 00 02 
0bd0d     A6 90 00 01 
0bd11     AC 50 00 02 
0bd15     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bd19     AA 70 00 02 
0bd1d     5C 90 00 00 
0bd21     00 00 00 00 
0bd25     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd29     AA 70 00 00 
0bd2d     00 00 00 01 
0bd31     AC 50 00 02 
0bd35     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bd39     AA 70 00 02 
0bd3d     5C 90 00 01 
0bd41     AC 50 00 00 
0bd45     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bd49     AA 70 00 00 
0bd4d     00 00 00 01 
0bd51     AC 60 00 00 
0bd55     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bd59     AA 70 00 00 
0bd5d     00 00 00 00 
0bd61     00 00 00 00 
0bd65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd69     AA 70 00 00 
0bd6d     00 00 00 01 
0bd71     AC 50 00 00 
0bd75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bd79     AA 70 00 00 
0bd7d     00 00 00 00 
0bd81     00 00 00 02 
0bd85     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0bd89     AA 70 00 02 
0bd8d     A6 90 00 01 
0bd91     AC 50 00 02 
0bd95     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0bd99     AA 70 00 02 
0bd9d     5C 90 00 01 
0bda1     AC 50 00 00 
0bda5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bda9     AA 70 00 00 
0bdad     00 00 00 00 
0bdb1     00 00 00 02 
0bdb5     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0bdb9     AA 70 00 02 
0bdbd     5C 90 00 01 
0bdc1     AC 50 00 00 
0bdc5     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bdc9     AA 70 00 00 
0bdcd     00 00 00 01 
0bdd1     AC 60 00 00 
0bdd5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0bdd9     AA 70 00 00 
0bddd     00 00 00 00 
0bde1     00 00 00 00 
0bde5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bde9     AA 70 00 00 
0bded     00 00 00 01 
0bdf1     AC 50 00 00 
0bdf5     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0bdf9     AA 70 00 00 
0bdfd     00 00 00 00 
0be01     00 00 00 02 
0be05     A6 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $a6, $80, $00, $00
0be09     AA 70 00 02 
0be0d     A6 90 00 01 
0be11     AC 50 00 02 
0be15     5C 80 00 00 | 	byte	$aa, $70, $00, $02, $a6, $90, $00, $01, $ac, $50, $00, $02, $5c, $80, $00, $00
0be19     AA 70 00 02 
0be1d     5C 90 00 01 
0be21     AC 50 00 00 
0be25     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be29     AA 70 00 00 
0be2d     00 00 00 00 
0be31     00 00 00 02 
0be35     5C 80 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $5c, $80, $00, $00
0be39     AA 70 00 02 
0be3d     5C 90 00 01 
0be41     AC 50 00 00 
0be45     00 00 00 00 | 	byte	$aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be49     AA 70 00 00 
0be4d     00 00 00 01 
0be51     AC 60 00 00 
0be55     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00
0be59     AA 70 00 00 
0be5d     00 00 00 00 
0be61     00 00 00 00 
0be65     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be69     AA 70 00 00 
0be6d     00 00 00 01 
0be71     AC 50 00 00 
0be75     00 00 00 00 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00
0be79     AA 70 00 00 
0be7d     00 00 00 00 
0be81     00 00 00 01 
0be85     68 80 38 01 | 	byte	$aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0be89     68 20 38 01 
0be8d     C5 90 00 01 
0be91     53 60 00 00 
0be95     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0be99     00 00 38 00 
0be9d     00 00 00 00 
0bea1     00 00 00 00 
0bea5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bea9     00 00 38 00 
0bead     00 00 00 00 
0beb1     00 00 00 00 
0beb5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0beb9     00 00 38 00 
0bebd     00 00 00 00 
0bec1     00 00 00 00 
0bec5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bec9     00 00 38 00 
0becd     00 00 00 00 
0bed1     00 00 00 00 
0bed5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bed9     00 00 38 00 
0bedd     00 00 00 00 
0bee1     00 00 00 01 
0bee5     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bee9     68 20 38 01 
0beed     C5 90 00 01 
0bef1     53 60 00 00 
0bef5     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bef9     00 00 38 00 
0befd     00 00 00 00 
0bf01     00 00 00 00 
0bf05     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf09     00 00 38 00 
0bf0d     00 00 00 00 
0bf11     00 00 00 00 
0bf15     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf19     00 00 38 00 
0bf1d     00 00 00 00 
0bf21     00 00 00 00 
0bf25     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf29     00 00 38 00 
0bf2d     00 00 00 00 
0bf31     00 00 00 00 
0bf35     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf39     00 00 38 00 
0bf3d     00 00 00 00 
0bf41     00 00 00 01 
0bf45     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bf49     68 20 38 01 
0bf4d     C5 90 00 01 
0bf51     53 60 00 00 
0bf55     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bf59     00 00 38 00 
0bf5d     00 00 00 00 
0bf61     00 00 00 00 
0bf65     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf69     00 00 38 00 
0bf6d     00 00 00 00 
0bf71     00 00 00 00 
0bf75     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf79     00 00 38 00 
0bf7d     00 00 00 00 
0bf81     00 00 00 00 
0bf85     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf89     00 00 38 00 
0bf8d     00 00 00 00 
0bf91     00 00 00 00 
0bf95     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bf99     00 00 38 00 
0bf9d     00 00 00 00 
0bfa1     00 00 00 00 
0bfa5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfa9     00 00 38 00 
0bfad     00 00 00 00 
0bfb1     00 00 00 00 
0bfb5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfb9     00 00 38 00 
0bfbd     00 00 00 00 
0bfc1     00 00 00 01 
0bfc5     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0bfc9     68 20 38 01 
0bfcd     C5 90 00 01 
0bfd1     53 60 00 00 
0bfd5     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0bfd9     00 00 38 00 
0bfdd     00 00 00 00 
0bfe1     00 00 00 00 
0bfe5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bfe9     00 00 38 00 
0bfed     00 00 00 00 
0bff1     00 00 00 00 
0bff5     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0bff9     00 00 38 00 
0bffd     00 00 00 00 
0c001     00 00 00 01 
0c005     68 80 38 01 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $01, $68, $80, $38, $01
0c009     68 20 38 01 
0c00d     C5 90 00 01 
0c011     53 60 00 00 
0c015     00 00 38 00 | 	byte	$68, $20, $38, $01, $c5, $90, $00, $01, $53, $60, $00, $00, $00, $00, $38, $00
0c019     00 00 38 00 
0c01d     00 00 00 00 
0c021     00 00 00 00 
0c025     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c029     00 00 38 00 
0c02d     00 00 00 00 
0c031     00 00 00 00 
0c035     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c039     00 00 38 00 
0c03d     00 00 00 00 
0c041     00 00 00 00 
0c045     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c049     00 00 38 00 
0c04d     00 00 00 00 
0c051     00 00 00 00 
0c055     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c059     00 00 38 00 
0c05d     00 00 00 00 
0c061     00 00 00 00 
0c065     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c069     00 00 38 00 
0c06d     00 00 00 00 
0c071     00 00 00 00 
0c075     00 00 38 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $38, $00
0c079     00 00 38 00 
0c07d     00 00 00 00 
0c081     00 00 00 00 
0c085     71 12 02 00 | 	byte	$00, $00, $38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $71, $12, $02, $00
0c089     00 00 00 00 
0c08d     00 00 00 00 
0c091     00 00 00 00 
0c095     00          | 	byte	$00[13]
0c096     02 02 00 00 
0c09a     00 00 00 00 
0c09e     00 00 00 00 
0c0a2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0a6     02 02 00 00 
0c0aa     00 00 00 00 
0c0ae     00 00 00 00 
0c0b2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0b6     02 02 00 00 
0c0ba     00 00 00 00 
0c0be     00 00 00 00 
0c0c2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0c6     02 02 00 00 
0c0ca     00 00 00 00 
0c0ce     00 00 00 00 
0c0d2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0d6     02 02 00 00 
0c0da     00 00 00 00 
0c0de     00 00 00 00 
0c0e2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0e6     02 02 00 00 
0c0ea     00 00 00 00 
0c0ee     00 00 00 00 
0c0f2     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0f6     02 02 00 00 
0c0fa     00 00 00 00 
0c0fe     00 00 00 00 
0c102     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c106     02 02 00 00 
0c10a     00 00 00 00 
0c10e     00 00 00 AA 
0c112     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c116     02 02 00 00 
0c11a     00 00 00 00 
0c11e     00 00 00 00 
0c122     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c126     02 02 00 00 
0c12a     00 00 00 00 
0c12e     00 00 00 AA 
0c132     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c136     02 02 00 00 
0c13a     00 00 00 00 
0c13e     00 00 00 00 
0c142     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c146     02 02 00 00 
0c14a     00 00 00 00 
0c14e     00 00 00 AA 
0c152     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c156     02 02 00 00 
0c15a     00 00 00 00 
0c15e     00 00 00 AA 
0c162     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c166     02 02 00 00 
0c16a     00 00 00 00 
0c16e     00 00 00 AA 
0c172     70 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $00
0c176     02 02 00 00 
0c17a     00 00 00 00 
0c17e     00 00 00 AA 
0c182     70 00 00 FE | 	byte	$02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $70, $00, $00, $fe
0c186     40 00 00 AA 
0c18a     70 00 01 C5 
0c18e     90 00 00 D6 
0c192     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $00
0c196     00 00 00 AA 
0c19a     70 00 01 C5 
0c19e     90 00 00 00 
0c1a2     00 00 00 FE | 	byte	$00, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c1a6     40 00 00 AA 
0c1aa     70 00 01 C5 
0c1ae     90 00 00 00 
0c1b2     00 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c1b6     40 00 00 AA 
0c1ba     70 00 01 C5 
0c1be     90 00 00 00 
0c1c2     00 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $fe
0c1c6     40 00 00 AA 
0c1ca     70 00 01 C5 
0c1ce     90 00 00 D6 
0c1d2     50 00 00 FE | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $00, $fe
0c1d6     40 00 00 AA 
0c1da     70 00 01 C5 
0c1de     90 00 00 D6 
0c1e2     50 00 01 0D | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d
0c1e6     40 00 00 AA 
0c1ea     70 00 01 C5 
0c1ee     90 00 00 D6 
0c1f2     50 00 01 2E | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $2e
0c1f6     40 00 00 AA 
0c1fa     70 00 01 C5 
0c1fe     90 00 00 D6 
0c202     50 00 01 0D | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $d6, $50, $00, $01, $0d
0c206     40 00 00 AA 
0c20a     70 00 02 5C 
0c20e     90 00 01 AC 
0c212     60 00 01 2E | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $01, $2e
0c216     40 00 00 AA 
0c21a     70 00 02 5C 
0c21e     90 00 00 00 
0c222     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c226     00 00 00 AA 
0c22a     70 00 02 5C 
0c22e     90 00 00 00 
0c232     00 00 01 2E | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $01, $2e
0c236     40 00 00 AA 
0c23a     70 00 02 5C 
0c23e     90 00 00 00 
0c242     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c246     00 00 00 AA 
0c24a     70 00 02 5C 
0c24e     90 00 00 D6 
0c252     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c256     00 00 00 AA 
0c25a     70 00 02 5C 
0c25e     90 00 00 00 
0c262     00 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c266     00 00 00 AA 
0c26a     70 00 02 5C 
0c26e     90 00 00 00 
0c272     00 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c276     00 00 00 AA 
0c27a     70 00 02 5C 
0c27e     90 00 00 00 
0c282     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa
0c286     40 00 00 AA 
0c28a     70 00 02 5C 
0c28e     90 00 00 D6 
0c292     50 00 00 AA | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa
0c296     40 00 00 AA 
0c29a     70 00 02 5C 
0c29e     90 00 00 00 
0c2a2     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c2a6     00 00 00 AA 
0c2aa     70 00 02 5C 
0c2ae     90 00 00 00 
0c2b2     00 00 00 97 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c2b6     40 00 00 AA 
0c2ba     70 00 02 5C 
0c2be     90 00 00 00 
0c2c2     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c2c6     00 00 00 AA 
0c2ca     70 00 02 5C 
0c2ce     90 00 00 D6 
0c2d2     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c2d6     00 00 00 AA 
0c2da     70 00 02 5C 
0c2de     90 00 00 D6 
0c2e2     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c2e6     00 00 00 AA 
0c2ea     70 00 02 5C 
0c2ee     90 00 00 D6 
0c2f2     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c2f6     00 00 00 AA 
0c2fa     70 00 02 5C 
0c2fe     90 00 00 D6 
0c302     50 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $aa
0c306     40 00 00 AA 
0c30a     70 00 02 5C 
0c30e     90 00 01 AC 
0c312     60 00 00 AA | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $aa
0c316     40 00 00 AA 
0c31a     70 00 02 5C 
0c31e     90 00 00 00 
0c322     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c326     00 00 00 AA 
0c32a     70 00 02 5C 
0c32e     90 00 00 00 
0c332     00 00 00 97 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c336     40 00 00 AA 
0c33a     70 00 02 5C 
0c33e     90 00 00 00 
0c342     00 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $00
0c346     00 00 00 AA 
0c34a     70 00 02 5C 
0c34e     90 00 00 D6 
0c352     50 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $d6, $50, $00, $00, $00
0c356     00 00 00 AA 
0c35a     70 00 02 5C 
0c35e     90 00 00 00 
0c362     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $aa
0c366     40 00 00 AA 
0c36a     70 00 02 5C 
0c36e     90 00 00 00 
0c372     00 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $97
0c376     40 00 00 AA 
0c37a     70 00 02 5C 
0c37e     90 00 00 00 
0c382     00 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $00, $00, $00, $00, $00, $7f
0c386     40 00 00 AA 
0c38a     70 00 01 C5 
0c38e     90 00 01 AC 
0c392     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c396     40 00 00 AA 
0c39a     70 00 01 C5 
0c39e     90 00 01 AC 
0c3a2     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c3a6     40 00 00 AA 
0c3aa     70 00 01 C5 
0c3ae     90 00 01 AC 
0c3b2     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c3b6     40 00 00 AA 
0c3ba     70 00 01 C5 
0c3be     90 00 01 AC 
0c3c2     50 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $7f
0c3c6     40 00 00 AA 
0c3ca     70 00 01 C5 
0c3ce     90 00 01 AC 
0c3d2     60 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $60, $00, $00, $00
0c3d6     00 00 00 AA 
0c3da     70 00 00 00 
0c3de     00 00 00 00 
0c3e2     00 00 00 87 | 	byte	$00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $87
0c3e6     40 00 00 AA 
0c3ea     70 00 01 C5 
0c3ee     90 00 01 AC 
0c3f2     50 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $97
0c3f6     40 00 00 AA 
0c3fa     70 00 01 C5 
0c3fe     90 00 00 00 
0c402     00 00 00 87 | 	byte	$40, $00, $00, $aa, $70, $00, $01, $c5, $90, $00, $00, $00, $00, $00, $00, $87
0c406     40 00 00 AA 
0c40a     70 00 02 5C 
0c40e     90 00 01 AC 
0c412     50 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $97
0c416     40 00 00 AA 
0c41a     70 00 02 5C 
0c41e     90 00 01 AC 
0c422     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00
0c426     00 00 00 AA 
0c42a     70 00 02 5C 
0c42e     90 00 01 AC 
0c432     50 00 00 87 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $87
0c436     40 00 00 AA 
0c43a     70 00 02 5C 
0c43e     90 00 01 AC 
0c442     50 00 00 00 | 	byte	$40, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $50, $00, $00, $00
0c446     00 00 00 AA 
0c44a     70 00 02 5C 
0c44e     90 00 01 AC 
0c452     60 00 00 00 | 	byte	$00, $00, $00, $aa, $70, $00, $02, $5c, $90, $00, $01, $ac, $60, $00, $00, $00
0c456     00 00 00 AA 
0c45a     70 00 00 00 
0c45e     00 00 00 00 
0c462     00 00 00 AA | 	byte	$00, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0c466     40 00 00 AA 
0c46a     70 00 00 00 
0c46e     00 00 00 00 
0c472     00 00 00 97 | 	byte	$40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97
0c476     40 00 00 AA 
0c47a     70 00 00 00 
0c47e     00 00 00 00 
0c482     00 00 00 7F | 	byte	$40, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0c486     40 00 01 FC 
0c48a     20 47 01 FC 
0c48e     90 00 01 AC 
0c492     50 00 00 97 | 	byte	$40, $00, $01, $fc, $20, $47, $01, $fc, $90, $00, $01, $ac, $50, $00, $00, $97
0c496     40 00 00 00 
0c49a     00 47 00 00 
0c49e     00 00 00 00 
0c4a2     00 00 00 00 | 	byte	$40, $00, $00, $00, $00, $47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4a6     00 00 00 00 
0c4aa     00          | 	byte	$00[5]
0c4ab     47 00 00 00 
0c4af     00 00 00 00 
0c4b3     00 00 97 40 
0c4b7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c4bb     47 00 00 00 
0c4bf     00 00 00 00 
0c4c3     00 00 00 00 
0c4c7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4cb     47 00 00 00 
0c4cf     00 00 00 00 
0c4d3     00 00 00 00 
0c4d7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4db     47 00 00 00 
0c4df     00 00 00 00 
0c4e3     00 00 00 00 
0c4e7     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4eb     47 00 00 00 
0c4ef     00 00 00 00 
0c4f3     00 00 7F 40 
0c4f7     00 01 C5 20 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $01, $c5, $20
0c4fb     47 01 C5 90 
0c4ff     00 01 AC 50 
0c503     00 00 00 00 
0c507     00 00 00 00 | 	byte	$47, $01, $c5, $90, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
0c50b     47 00 00 00 
0c50f     00 00 00 00 
0c513     00 00 97 40 
0c517     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c51b     47 00 00 00 
0c51f     00 00 00 00 
0c523     00 00 00 00 
0c527     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c52b     47 00 00 00 
0c52f     00 00 00 00 
0c533     00 00 97 40 
0c537     00 00 00 00 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c53b     47 00 00 00 
0c53f     00 00 00 00 
0c543     00 00 7F 40 
0c547     00 01 FC 20 | 	byte	$47, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $40, $00, $01, $fc, $20
0c54b     49 01 7D 90 
0c54f     00 01 AC 50 
0c553     00 00 97 40 
0c557     00 00 00 00 | 	byte	$49, $01, $7d, $90, $00, $01, $ac, $50, $00, $00, $97, $40, $00, $00, $00, $00
0c55b     49 00 00 00 
0c55f     00 00 00 00 
0c563     00 00 00 00 
0c567     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c56b     49 00 00 00 
0c56f     00 00 00 00 
0c573     00 00 97 40 
0c577     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $97, $40, $00, $00, $00, $00
0c57b     49 00 00 00 
0c57f     00 00 00 00 
0c583     00 00 00 00 
0c587     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c58b     49 00 00 00 
0c58f     00 00 00 00 
0c593     00 00 00 00 
0c597     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c59b     49 00 00 00 
0c59f     00 00 00 00 
0c5a3     00 00 00 00 
0c5a7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5ab     49 00 00 00 
0c5af     00 00 00 00 
0c5b3     00 00 00 00 
0c5b7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5bb     49 00 00 00 
0c5bf     00 00 00 00 
0c5c3     00 00 00 00 
0c5c7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5cb     49 00 00 00 
0c5cf     00 01 AC 50 
0c5d3     00 00 00 00 
0c5d7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $01, $ac, $50, $00, $00, $00, $00, $00, $00, $00, $00
0c5db     49 00 00 00 
0c5df     00 03 58 60 
0c5e3     00 00 00 00 
0c5e7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $03, $58, $60, $00, $00, $00, $00, $00, $00, $00, $00
0c5eb     49 00 00 00 
0c5ef     00 00 00 00 
0c5f3     00 00 00 00 
0c5f7     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5fb     49 00 00 00 
0c5ff     00 00 00 00 
0c603     00 00 00 00 
0c607     00 00 00 00 | 	byte	$49, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c60b     00 00 00 00 
      ...             
0c67f     00 00 00 00 
0c683     00          | 	byte	$00[121]
0c684     01 2E 20 00 
0c688     01 E0 20 38 
0c68c     02 5C 30 00 
0c690     01 E0 20 00 | 	byte	$01, $2e, $20, $00, $01, $e0, $20, $38, $02, $5c, $30, $00, $01, $e0, $20, $00
0c694     00 00 00 00 
0c698     00 00 00    | 	byte	$00[7]
0c69b     38 00 00 00 
0c69f     00 00 00 00 
0c6a3     00 00 00 00 
0c6a7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6ab     38 00 00 00 
0c6af     00 00 00 00 
0c6b3     00 00 00 00 
0c6b7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6bb     38 00 00 00 
0c6bf     00 00 00 00 
0c6c3     00 00 00 00 
0c6c7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6cb     38 00 00 00 
0c6cf     00 00 00 00 
0c6d3     00 00 00 00 
0c6d7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6db     38 00 00 00 
0c6df     00 00 00 00 
0c6e3     00 00 00 00 
0c6e7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6eb     38 00 00 00 
0c6ef     00 00 00 00 
0c6f3     00 00 00 00 
0c6f7     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c6fb     38 00 00 00 
0c6ff     00 00 00 00 
0c703     00 00 00 00 
0c707     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c70b     38 00 00 00 
0c70f     00 00 00 00 
0c713     00 00 00 00 
0c717     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c71b     38 00 00 00 
0c71f     00 00 00 00 
0c723     00 00 00 00 
0c727     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c72b     38 00 00 00 
0c72f     00 00 00 00 
0c733     00 00 00 00 
0c737     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c73b     38 00 00 00 
0c73f     00 00 00 00 
0c743     00 00 00 00 
0c747     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c74b     38 00 00 00 
0c74f     00 00 00 00 
0c753     00 00 00 00 
0c757     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c75b     38 00 00 00 
0c75f     00 00 00 00 
0c763     00 00 00 00 
0c767     00 00 00 00 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c76b     00 00 00 00 
      ...             
0cd83     00 00 00 00 
0cd87     00          | 	byte	$00[1565]
0cd88     E7 F0 14 26 
0cd8c     25 3B 3B 25 
0cd90     19 0F E9 DA 
0cd94     DA C5 C7 DD | 	byte	$e7, $f0, $14, $26, $25, $3b, $3b, $25, $19, $0f, $e9, $da, $da, $c5, $c7, $dd
0cd98     E9 F4 1D 27 
0cd9c     27 3D 37 22 
0cda0     18 0A DF D8 
0cda4     D7 C3 CC DF | 	byte	$e9, $f4, $1d, $27, $27, $3d, $37, $22, $18, $0a, $df, $d8, $d7, $c3, $cc, $df
0cda8     E9 F7 21 28 
0cdac     29 3E 33 1F 
0cdb0     16 05 DB D7 
0cdb4     D6 C2 D1 E1 | 	byte	$e9, $f7, $21, $28, $29, $3e, $33, $1f, $16, $05, $db, $d7, $d6, $c2, $d1, $e1
0cdb8     EA FF 27 29 
0cdbc     2C 3E 2E 1E 
0cdc0     15 00 D7 D8 
0cdc4     D3 C3 D5 E3 | 	byte	$ea, $ff, $27, $29, $2c, $3e, $2e, $1e, $15, $00, $d7, $d8, $d3, $c3, $d5, $e3
0cdc8     EC 04 2B 29 
0cdcc     30 3C 2A 1D 
0cdd0     13 F7 D4 D7 
0cdd4     CF C5 D9 E3 | 	byte	$ec, $04, $2b, $29, $30, $3c, $2a, $1d, $13, $f7, $d4, $d7, $cf, $c5, $d9, $e3
0cdd8     EE 0D 2D 29 
0cddc     33 38 26 1D 
0cde0     10 ED D1 D7 
0cde4     CE C9 DC E4 | 	byte	$ee, $0d, $2d, $29, $33, $38, $26, $1d, $10, $ed, $d1, $d7, $ce, $c9, $dc, $e4
0cde8     F1 16 2F 29 
0cdec     33 35 23 1C 
0cdf0     0C E6 D0 D6 
0cdf4     CC CE DE E5 | 	byte	$f1, $16, $2f, $29, $33, $35, $23, $1c, $0c, $e6, $d0, $d6, $cc, $ce, $de, $e5
0cdf8     F6 18 2F 2A 
0cdfc     34 30 22 1A 
0ce00     07 E4 D1 D5 
0ce04     CD D2 DE E7 | 	byte	$f6, $18, $2f, $2a, $34, $30, $22, $1a, $07, $e4, $d1, $d5, $cd, $d2, $de, $e7
0ce08     F9 21 2F 2B 
0ce0c     33 2D 22 18 
0ce10     04 DB D1 D5 
0ce14     CF D4 DE E9 | 	byte	$f9, $21, $2f, $2b, $33, $2d, $22, $18, $04, $db, $d1, $d5, $cf, $d4, $de, $e9
0ce18     FF 27 30 2B 
0ce1c     30 2A 23 14 
0ce20     00 D8 D0 D6 
0ce24     D2 D7 DD ED | 	byte	$ff, $27, $30, $2b, $30, $2a, $23, $14, $00, $d8, $d0, $d6, $d2, $d7, $dd, $ed
0ce28     02 2B 31 29 
0ce2c     2D 28 22 10 
0ce30     FB D4 CF D8 
0ce34     D4 D8 DE F0 | 	byte	$02, $2b, $31, $29, $2d, $28, $22, $10, $fb, $d4, $cf, $d8, $d4, $d8, $de, $f0
0ce38     08 2C 30 26 
0ce3c     2A 27 21 0D 
0ce40     F4 D3 D0 DA 
0ce44     D7 D8 DF F5 | 	byte	$08, $2c, $30, $26, $2a, $27, $21, $0d, $f4, $d3, $d0, $da, $d7, $d8, $df, $f5
0ce48     0D 2F 2F 24 
0ce4c     28 28 20 09 
0ce50     F1 D2 D3 DD 
0ce54     D8 D8 E2 F8 | 	byte	$0d, $2f, $2f, $24, $28, $28, $20, $09, $f1, $d2, $d3, $dd, $d8, $d8, $e2, $f8
0ce58     12 30 2B 21 
0ce5c     27 28 1E 05 
0ce60     ED CD D5 E0 
0ce64     D9 D7 E3 FC | 	byte	$12, $30, $2b, $21, $27, $28, $1e, $05, $ed, $cd, $d5, $e0, $d9, $d7, $e3, $fc
0ce68     14 32 29 1E 
0ce6c     27 28 1B 01 
0ce70     E8 CE DA E4 
0ce74     D8 D7 E8 02 | 	byte	$14, $32, $29, $1e, $27, $28, $1b, $01, $e8, $ce, $da, $e4, $d8, $d7, $e8, $02
0ce78     17 31 25 1A 
0ce7c     27 28 17 FD 
0ce80     E4 CF DD E7 
0ce84     D7 D7 ED 04 | 	byte	$17, $31, $25, $1a, $27, $28, $17, $fd, $e4, $cf, $dd, $e7, $d7, $d7, $ed, $04
0ce88     1A 2F 22 18 
0ce8c     29 27 10 FA 
0ce90     E3 D2 DF E8 
0ce94     D5 D8 F4 05 | 	byte	$1a, $2f, $22, $18, $29, $27, $10, $fa, $e3, $d2, $df, $e8, $d5, $d8, $f4, $05
0ce98     1E 2C 1D 17 
0ce9c     2B 27 09 FA 
0cea0     E0 D5 E6 E9 
0cea4     D3 DA F8 06 | 	byte	$1e, $2c, $1d, $17, $2b, $27, $09, $fa, $e0, $d5, $e6, $e9, $d3, $da, $f8, $06
0cea8     21 2A 17 18 
0ceac     2D 25 05 F9 
0ceb0     E0 D6 EC E9 
0ceb4     D2 DE FE 07 | 	byte	$21, $2a, $17, $18, $2d, $25, $05, $f9, $e0, $d6, $ec, $e9, $d2, $de, $fe, $07
0ceb8     1F 29 12 17 
0cebc     2F 21 FF F7 
0cec0     E1 D8 EF E6 
0cec4     D0 E5 02 07 | 	byte	$1f, $29, $12, $17, $2f, $21, $ff, $f7, $e1, $d8, $ef, $e6, $d0, $e5, $02, $07
0cec8     1F 24 0F 1C 
0cecc     31 19 FD F7 
0ced0     E1 DE F3 E1 
0ced4     CE EB 03 07 | 	byte	$1f, $24, $0f, $1c, $31, $19, $fd, $f7, $e1, $de, $f3, $e1, $ce, $eb, $03, $07
0ced8     22 1E 0A 22 
0cedc     32 10 FD F9 
0cee0     DD E2 F8 DA 
0cee4     CF F3 03 06 | 	byte	$22, $1e, $0a, $22, $32, $10, $fd, $f9, $dd, $e2, $f8, $da, $cf, $f3, $03, $06
0cee8     24 1C 07 25 
0ceec     2E 09 FE FA 
0cef0     DD E7 F9 D8 
0cef4     D5 F7 00 05 | 	byte	$24, $1c, $07, $25, $2e, $09, $fe, $fa, $dd, $e7, $f9, $d8, $d5, $f7, $00, $05
0cef8     23 16 08 2D 
0cefc     27 06 01 FB 
0cf00     DE EC F6 D0 
0cf04     DD FD FD 06 | 	byte	$23, $16, $08, $2d, $27, $06, $01, $fb, $de, $ec, $f6, $d0, $dd, $fd, $fd, $06
0cf08     20 0F 09 32 
0cf0c     20 00 05 F6 
0cf10     E1 F2 F2 CE 
0cf14     E0 00 F8 0B | 	byte	$20, $0f, $09, $32, $20, $00, $05, $f6, $e1, $f2, $f2, $ce, $e0, $00, $f8, $0b
0cf18     1E 0A 11 32 
0cf1c     1A 00 09 F4 
0cf20     E2 F9 EF D0 
0cf24     E5 FF F5 0D | 	byte	$1e, $0a, $11, $32, $1a, $00, $09, $f4, $e2, $f9, $ef, $d0, $e5, $ff, $f5, $0d
0cf28     1C 06 16 2E 
0cf2c     14 02 0B F4 
0cf30     E4 FC E7 D4 
0cf34     EE FB F5 0D | 	byte	$1c, $06, $16, $2e, $14, $02, $0b, $f4, $e4, $fc, $e7, $d4, $ee, $fb, $f5, $0d
0cf38     1A 03 1D 2B 
0cf3c     0C 07 09 F5 
0cf40     E8 FC E1 D6 
0cf44     F6 F6 F8 0A | 	byte	$1a, $03, $1d, $2b, $0c, $07, $09, $f5, $e8, $fc, $e1, $d6, $f6, $f6, $f8, $0a
0cf48     15 04 1F 29 
0cf4c     09 0C 07 F3 
0cf50     ED F9 E2 D9 
0cf54     F8 F2 F9 0C | 	byte	$15, $04, $1f, $29, $09, $0c, $07, $f3, $ed, $f9, $e2, $d9, $f8, $f2, $f9, $0c
0cf58     10 0A 1E 23 
0cf5c     09 0E 07 F3 
0cf60     F1 F5 E2 DE 
0cf64     F5 F1 F8 0E | 	byte	$10, $0a, $1e, $23, $09, $0e, $07, $f3, $f1, $f5, $e2, $de, $f5, $f1, $f8, $0e
0cf68     0F 0D 1C 1C 
0cf6c     0C 0E 0A F1 
0cf70     F2 F3 E0 E4 
0cf74     F1 F2 F5 0E | 	byte	$0f, $0d, $1c, $1c, $0c, $0e, $0a, $f1, $f2, $f3, $e0, $e4, $f1, $f2, $f5, $0e
0cf78     0F 0C 20 1A 
0cf7c     10 0E 0A F3 
0cf80     F0 F5 E0 E8 
0cf84     EF F1 F5 0C | 	byte	$0f, $0c, $20, $1a, $10, $0e, $0a, $f3, $f0, $f5, $e0, $e8, $ef, $f1, $f5, $0c
0cf88     11 09 1F 18 
0cf8c     11 0F 0A F4 
0cf90     EE F9 E1 E7 
0cf94     EF EF F4 0D | 	byte	$11, $09, $1f, $18, $11, $0f, $0a, $f4, $ee, $f9, $e1, $e7, $ef, $ef, $f4, $0d
0cf98     12 06 1E 1B 
0cf9c     0F 12 0B F2 
0cfa0     ED F9 E3 E3 
0cfa4     F1 EC F5 12 | 	byte	$12, $06, $1e, $1b, $0f, $12, $0b, $f2, $ed, $f9, $e3, $e3, $f1, $ec, $f5, $12
0cfa8     11 07 1C 1D 
0cfac     0E 16 0A ED 
0cfb0     F4 F6 E3 E3 
0cfb4     F1 E9 F7 18 | 	byte	$11, $07, $1c, $1d, $0e, $16, $0a, $ed, $f4, $f6, $e3, $e3, $f1, $e9, $f7, $18
0cfb8     09 0A 1E 1C 
0cfbc     0F 19 09 E7 
0cfc0     FC F5 DF E6 
0cfc4     EF E6 F9 1C | 	byte	$09, $0a, $1e, $1c, $0f, $19, $09, $e7, $fc, $f5, $df, $e6, $ef, $e6, $f9, $1c
0cfc8     01 08 24 17 
0cfcc     12 1B 07 E4 
0cfd0     02 F7 DA E8 
0cfd4     EC E5 FD 1B | 	byte	$01, $08, $24, $17, $12, $1b, $07, $e4, $02, $f7, $da, $e8, $ec, $e5, $fd, $1b
0cfd8     FD 0B 28 16 
0cfdc     16 1D FC E6 
0cfe0     05 F4 D7 EC 
0cfe4     E8 E3 05 16 | 	byte	$fd, $0b, $28, $16, $16, $1d, $fc, $e6, $05, $f4, $d7, $ec, $e8, $e3, $05, $16
0cfe8     FA 0F 29 14 
0cfec     1A 1D F5 EE 
0cff0     07 ED D8 EC 
0cff4     E3 E2 10 0D | 	byte	$fa, $0f, $29, $14, $1a, $1d, $f5, $ee, $07, $ed, $d8, $ec, $e3, $e2, $10, $0d
0cff8     F7 1A 28 14 
0cffc     1F 1D EC F6 
0d000     09 E1 DA EB 
0d004     DF E5 17 06 | 	byte	$f7, $1a, $28, $14, $1f, $1d, $ec, $f6, $09, $e1, $da, $eb, $df, $e5, $17, $06
0d008     F7 21 22 16 
0d00c     23 17 E8 FC 
0d010     0A DB E0 E9 
0d014     DB EE 18 01 | 	byte	$f7, $21, $22, $16, $23, $17, $e8, $fc, $0a, $db, $e0, $e9, $db, $ee, $18, $01
0d018     F8 28 20 1A 
0d01c     26 0A E9 04 
0d020     04 D6 E1 E4 
0d024     D9 F9 15 F9 | 	byte	$f8, $28, $20, $1a, $26, $0a, $e9, $04, $04, $d6, $e1, $e4, $d9, $f9, $15, $f9
0d028     03 2B 1D 1E 
0d02c     27 04 ED 0C 
0d030     FB D5 E3 DF 
0d034     DB 01 11 F2 | 	byte	$03, $2b, $1d, $1e, $27, $04, $ed, $0c, $fb, $d5, $e3, $df, $db, $01, $11, $f2
0d038     0D 2B 1D 24 
0d03c     23 FB F3 0F 
0d040     EE D6 E3 D9 
0d044     E0 05 0B F1 | 	byte	$0d, $2b, $1d, $24, $23, $fb, $f3, $0f, $ee, $d6, $e3, $d9, $e0, $05, $0b, $f1
0d048     15 2B 1E 28 
0d04c     1B F7 F9 0E 
0d050     E5 D6 E0 D7 
0d054     E6 0A 04 F5 | 	byte	$15, $2b, $1e, $28, $1b, $f7, $f9, $0e, $e5, $d6, $e0, $d7, $e6, $0a, $04, $f5
0d058     1E 2A 22 29 
0d05c     14 F7 FF 09 
0d060     E1 D7 DB D7 
0d064     EF 09 FC F9 | 	byte	$1e, $2a, $22, $29, $14, $f7, $ff, $09, $e1, $d7, $db, $d7, $ef, $09, $fc, $f9
0d068     20 29 26 27 
0d06c     0D F7 05 03 
0d070     DD D7 D7 DB 
0d074     F3 08 F9 00 | 	byte	$20, $29, $26, $27, $0d, $f7, $05, $03, $dd, $d7, $d7, $db, $f3, $08, $f9, $00
0d078     25 2A 2B 23 
0d07c     0B FA 05 FA 
0d080     D9 D5 D5 DE 
0d084     F7 04 FB 08 | 	byte	$25, $2a, $2b, $23, $0b, $fa, $05, $fa, $d9, $d5, $d5, $de, $f7, $04, $fb, $08
0d088     29 2C 2A 1F 
0d08c     09 FD 05 F4 
0d090     D7 D1 D7 E4 
0d094     F7 02 FD 0F | 	byte	$29, $2c, $2a, $1f, $09, $fd, $05, $f4, $d7, $d1, $d7, $e4, $f7, $02, $fd, $0f
0d098     2C 31 28 19 
0d09c     09 FE 02 F0 
0d0a0     D2 CC D9 EA 
0d0a4     F4 03 FF 10 | 	byte	$2c, $31, $28, $19, $09, $fe, $02, $f0, $d2, $cc, $d9, $ea, $f4, $03, $ff, $10
0d0a8     31 35 25 13 
0d0ac     0D FB FE EF 
0d0b0     CC C9 DD EC 
0d0b4     F2 06 04 14 | 	byte	$31, $35, $25, $13, $0d, $fb, $fe, $ef, $cc, $c9, $dd, $ec, $f2, $06, $04, $14
0d0b8     37 36 21 14 
0d0bc     0E FA FA E8 
0d0c0     C7 CD E2 EB 
0d0c4     F4 08 08 1B | 	byte	$37, $36, $21, $14, $0e, $fa, $fa, $e8, $c7, $cd, $e2, $eb, $f4, $08, $08, $1b
0d0c8     3E 31 1A 17 
0d0cc     09 F7 F7 E4 
0d0d0     BE D1 E8 E6 
0d0d4     F9 0A 08 1F | 	byte	$3e, $31, $1a, $17, $09, $f7, $f7, $e4, $be, $d1, $e8, $e6, $f9, $0a, $08, $1f
0d0d8     44 2C 15 1C 
0d0dc     03 F3 F7 DA 
0d0e0     BB D3 EB E1 
0d0e4     FC 0E 09 2A | 	byte	$44, $2c, $15, $1c, $03, $f3, $f7, $da, $bb, $d3, $eb, $e1, $fc, $0e, $09, $2a
0d0e8     45 2B 14 20 
0d0ec     00 EF F6 D0 
0d0f0     BC D8 EB E1 
0d0f4     02 14 0C 36 | 	byte	$45, $2b, $14, $20, $00, $ef, $f6, $d0, $bc, $d8, $eb, $e1, $02, $14, $0c, $36
0d0f8     43 26 17 1D 
0d0fc     FC EB F2 C5 
0d100     BF DE E3 E6 
0d104     06 16 11 3F | 	byte	$43, $26, $17, $1d, $fc, $eb, $f2, $c5, $bf, $de, $e3, $e6, $06, $16, $11, $3f
0d108     41 20 20 18 
0d10c     F6 E9 EC BC 
0d110     C0 E5 DB ED 
0d114     0D 16 1B 46 | 	byte	$41, $20, $20, $18, $f6, $e9, $ec, $bc, $c0, $e5, $db, $ed, $0d, $16, $1b, $46
0d118     40 19 26 11 
0d11c     EF EA DF BA 
0d120     C4 E7 D8 F3 
0d124     13 15 26 46 | 	byte	$40, $19, $26, $11, $ef, $ea, $df, $ba, $c4, $e7, $d8, $f3, $13, $15, $26, $46
0d128     3A 18 26 0C 
0d12c     E8 E9 D3 B9 
0d130     C9 E5 DB F8 
0d134     19 17 2F 48 | 	byte	$3a, $18, $26, $0c, $e8, $e9, $d3, $b9, $c9, $e5, $db, $f8, $19, $17, $2f, $48
0d138     34 1E 21 08 
0d13c     E4 E6 CD B8 
0d140     CF DE E1 FC 
0d144     1F 1D 36 49 | 	byte	$34, $1e, $21, $08, $e4, $e6, $cd, $b8, $cf, $de, $e1, $fc, $1f, $1d, $36, $49
0d148     32 25 1C 01 
0d14c     DF DE C7 B8 
0d150     D0 D9 E4 04 
0d154     22 27 3B 48 | 	byte	$32, $25, $1c, $01, $df, $de, $c7, $b8, $d0, $d9, $e4, $04, $22, $27, $3b, $48
0d158     2F 28 19 F8 
0d15c     DD D3 C3 B9 
0d160     D1 D7 E9 0C 
0d164     24 31 3D 47 | 	byte	$2f, $28, $19, $f8, $dd, $d3, $c3, $b9, $d1, $d7, $e9, $0c, $24, $31, $3d, $47
0d168     2E 28 15 F3 
0d16c     D9 CC C2 BA 
0d170     CF D9 EF 10 
0d174     2A 37 3F 46 | 	byte	$2e, $28, $15, $f3, $d9, $cc, $c2, $ba, $cf, $d9, $ef, $10, $2a, $37, $3f, $46
0d178     33 25 0E EB 
0d17c     D2 C7 C0 BA 
0d180     CC DD F2 18 
0d184     32 3B 41 46 | 	byte	$33, $25, $0e, $eb, $d2, $c7, $c0, $ba, $cc, $dd, $f2, $18, $32, $3b, $41, $46
0d188     35 20 0A E3 
0d18c     CC C3 BF B9 
0d190     CA E3 F9 20 
0d194     38 3F 42 47 | 	byte	$35, $20, $0a, $e3, $cc, $c3, $bf, $b9, $ca, $e3, $f9, $20, $38, $3f, $42, $47
0d198     37 1D 03 DC 
0d19c     C4 BF BE B9 
0d1a0     C9 E5 01 24 
0d1a4     3F 42 44 47 | 	byte	$37, $1d, $03, $dc, $c4, $bf, $be, $b9, $c9, $e5, $01, $24, $3f, $42, $44, $47
0d1a8     39 17 FB D7 
0d1ac     BD BC BA BA 
0d1b0     C8 EB 09 2D 
0d1b4     45 45 48 47 | 	byte	$39, $17, $fb, $d7, $bd, $bc, $ba, $ba, $c8, $eb, $09, $2d, $45, $45, $48, $47
0d1b8     36 12 F2 D0 
0d1bc     B7 BB B6 B9 
0d1c0     CB F0 0F 33 
0d1c4     4A 46 4B 47 | 	byte	$36, $12, $f2, $d0, $b7, $bb, $b6, $b9, $cb, $f0, $0f, $33, $4a, $46, $4b, $47
0d1c8     31 0F E9 CA 
0d1cc     B3 B9 B4 B8 
0d1d0     CE F5 19 39 
0d1d4     4E 49 4D 49 | 	byte	$31, $0f, $e9, $ca, $b3, $b9, $b4, $b8, $ce, $f5, $19, $39, $4e, $49, $4d, $49
0d1d8     30 09 E2 C3 
0d1dc     B0 B5 B3 B6 
0d1e0     D2 FA 21 40 
0d1e4     51 4E 4D 4A | 	byte	$30, $09, $e2, $c3, $b0, $b5, $b3, $b6, $d2, $fa, $21, $40, $51, $4e, $4d, $4a
0d1e8     2C 02 DA BC 
0d1ec     AE B0 B4 B6 
0d1f0     DA 00 2A 48 
0d1f4     53 53 4D 49 | 	byte	$2c, $02, $da, $bc, $ae, $b0, $b4, $b6, $da, $00, $2a, $48, $53, $53, $4d, $49
0d1f8     28 FB D2 B6 
0d1fc     AB AB B4 B8 
0d200     DB 0B 2E 4D 
0d204     56 57 4C 49 | 	byte	$28, $fb, $d2, $b6, $ab, $ab, $b4, $b8, $db, $0b, $2e, $4d, $56, $57, $4c, $49
0d208     20 F1 CD B1 
0d20c     A7 A8 B4 B7 
0d210     E1 17 33 51 
0d214     5C 58 4D 47 | 	byte	$20, $f1, $cd, $b1, $a7, $a8, $b4, $b7, $e1, $17, $33, $51, $5c, $58, $4d, $47
0d218     1B E8 CA AE 
0d21c     A1 A8 B4 BB 
0d220     E8 1E 3B 53 
0d224     61 59 4C 43 | 	byte	$1b, $e8, $ca, $ae, $a1, $a8, $b4, $bb, $e8, $1e, $3b, $53, $61, $59, $4c, $43
0d228     14 DD C2 AC 
0d22c     9B A6 B5 BF 
0d230     EC 26 42 56 
0d234     67 5A 4C 42 | 	byte	$14, $dd, $c2, $ac, $9b, $a6, $b5, $bf, $ec, $26, $42, $56, $67, $5a, $4c, $42
0d238     10 D6 BD A7 
0d23c     98 A6 B4 C0 
0d240     F6 2C 45 5C 
0d244     6A 58 4C 3E | 	byte	$10, $d6, $bd, $a7, $98, $a6, $b4, $c0, $f6, $2c, $45, $5c, $6a, $58, $4c, $3e
0d248     04 D2 B8 A0 
0d24c     95 A9 B4 C5 
0d250     04 30 4A 61 
0d254     6D 55 4B 3A | 	byte	$04, $d2, $b8, $a0, $95, $a9, $b4, $c5, $04, $30, $4a, $61, $6d, $55, $4b, $3a
0d258     F7 CC B3 9C 
0d25c     93 AC B5 CB 
0d260     0F 36 4F 68 
0d264     6E 54 4B 31 | 	byte	$f7, $cc, $b3, $9c, $93, $ac, $b5, $cb, $0f, $36, $4f, $68, $6e, $54, $4b, $31
0d268     F2 C7 AD 95 
0d26c     92 AC B7 D3 
0d270     13 3B 52 6E 
0d274     6D 55 49 2E | 	byte	$f2, $c7, $ad, $95, $92, $ac, $b7, $d3, $13, $3b, $52, $6e, $6d, $55, $49, $2e
0d278     E5 C2 AB 8F 
0d27c     92 AD B7 DA 
0d280     1B 3E 5B 72 
0d284     6C 54 48 1F | 	byte	$e5, $c2, $ab, $8f, $92, $ad, $b7, $da, $1b, $3e, $5b, $72, $6c, $54, $48, $1f
0d288     DF BF A3 8C 
0d28c     96 AD B9 DF 
0d290     24 42 60 77 
0d294     6B 53 46 1A | 	byte	$df, $bf, $a3, $8c, $96, $ad, $b9, $df, $24, $42, $60, $77, $6b, $53, $46, $1a
0d298     D6 BD 9C 88 
0d29c     97 AE BC EC 
0d2a0     2C 45 68 79 
0d2a4     65 51 43 12 | 	byte	$d6, $bd, $9c, $88, $97, $ae, $bc, $ec, $2c, $45, $68, $79, $65, $51, $43, $12
0d2a8     D2 B8 95 87 
0d2ac     9C AF C1 F6 
0d2b0     30 4C 6E 7B 
0d2b4     64 51 3C 04 | 	byte	$d2, $b8, $95, $87, $9c, $af, $c1, $f6, $30, $4c, $6e, $7b, $64, $51, $3c, $04
0d2b8     CD B1 90 87 
0d2bc     9C B0 C7 00 
0d2c0     33 52 71 79 
0d2c4     64 50 36 FA | 	byte	$cd, $b1, $90, $87, $9c, $b0, $c7, $00, $33, $52, $71, $79, $64, $50, $36, $fa
0d2c8     CB AB 8C 88 
0d2cc     9C B3 D0 0A 
0d2d0     37 59 76 75 
0d2d4     64 4C 31 F1 | 	byte	$cb, $ab, $8c, $88, $9c, $b3, $d0, $0a, $37, $59, $76, $75, $64, $4c, $31, $f1
0d2d8     C5 A3 89 8D 
0d2dc     9D B7 D4 13 
0d2e0     3B 62 79 73 
0d2e4     63 49 24 EC | 	byte	$c5, $a3, $89, $8d, $9d, $b7, $d4, $13, $3b, $62, $79, $73, $63, $49, $24, $ec
0d2e8     BE 9D 87 8F 
0d2ec     9E BA DF 18 
0d2f0     42 67 7A 71 
0d2f4     62 44 1A E9 | 	byte	$be, $9d, $87, $8f, $9e, $ba, $df, $18, $42, $67, $7a, $71, $62, $44, $1a, $e9
0d2f8     B9 97 87 90 
0d2fc     9E BF EB 1A 
0d300     4A 69 79 71 
0d304     60 3D 13 E3 | 	byte	$b9, $97, $87, $90, $9e, $bf, $eb, $1a, $4a, $69, $79, $71, $60, $3d, $13, $e3
0d308     B2 94 8A 8F 
0d30c     A2 C5 F1 20 
0d310     52 6E 75 73 
0d314     5A 3A 0C DC | 	byte	$b2, $94, $8a, $8f, $a2, $c5, $f1, $20, $52, $6e, $75, $73, $5a, $3a, $0c, $dc
0d318     AD 8F 8D 8D 
0d31c     A9 CB F9 24 
0d320     55 72 72 73 
0d324     54 31 07 D7 | 	byte	$ad, $8f, $8d, $8d, $a9, $cb, $f9, $24, $55, $72, $72, $73, $54, $31, $07, $d7
0d328     A8 8C 8F 8E 
0d32c     AC D6 FD 2C 
0d330     5A 73 71 71 
0d334     4E 25 04 CC | 	byte	$a8, $8c, $8f, $8e, $ac, $d6, $fd, $2c, $5a, $73, $71, $71, $4e, $25, $04, $cc
0d338     A2 8E 8E 8E 
0d33c     B2 E0 01 36 
0d340     5F 71 73 70 
0d344     4B 1C FF C3 | 	byte	$a2, $8e, $8e, $8e, $b2, $e0, $01, $36, $5f, $71, $73, $70, $4b, $1c, $ff, $c3
0d348     9E 90 8B 93 
0d34c     BA E6 05 40 
0d350     61 6D 77 6A 
0d354     41 19 F7 BD | 	byte	$9e, $90, $8b, $93, $ba, $e6, $05, $40, $61, $6d, $77, $6a, $41, $19, $f7, $bd
0d358     9D 94 8A 9A 
0d35c     C5 E8 0D 43 
0d360     66 6C 79 63 
0d364     3B 17 EE BA | 	byte	$9d, $94, $8a, $9a, $c5, $e8, $0d, $43, $66, $6c, $79, $63, $3b, $17, $ee, $ba
0d368     9A 95 88 A1 
0d36c     CB E9 12 48 
0d370     65 6D 78 5C 
0d374     2E 15 E8 B4 | 	byte	$9a, $95, $88, $a1, $cb, $e9, $12, $48, $65, $6d, $78, $5c, $2e, $15, $e8, $b4
0d378     9B 93 89 A8 
0d37c     D6 EC 1D 50 
0d380     62 6F 76 55 
0d384     27 13 E0 AF | 	byte	$9b, $93, $89, $a8, $d6, $ec, $1d, $50, $62, $6f, $76, $55, $27, $13, $e0, $af
0d388     A0 90 8D AD 
0d38c     DC EE 26 52 
0d390     5F 72 71 4E 
0d394     23 10 D7 AB | 	byte	$a0, $90, $8d, $ad, $dc, $ee, $26, $52, $5f, $72, $71, $4e, $23, $10, $d7, $ab
0d398     A2 8D 90 B8 
0d39c     DD F5 29 54 
0d3a0     5E 74 6E 42 
0d3a4     22 07 D3 AB | 	byte	$a2, $8d, $90, $b8, $dd, $f5, $29, $54, $5e, $74, $6e, $42, $22, $07, $d3, $ab
0d3a8     A2 8C 95 C4 
0d3ac     DF FB 33 54 
0d3b0     60 74 68 38 
0d3b4     21 01 C9 AD | 	byte	$a2, $8c, $95, $c4, $df, $fb, $33, $54, $60, $74, $68, $38, $21, $01, $c9, $ad
0d3b8     9E 8E 9D CC 
0d3bc     E0 03 39 51 
0d3c0     63 71 60 32 
0d3c4     20 FA C8 B0 | 	byte	$9e, $8e, $9d, $cc, $e0, $03, $39, $51, $63, $71, $60, $32, $20, $fa, $c8, $b0
0d3c8     9B 90 A7 D1 
0d3cc     E2 09 3A 4F 
0d3d0     67 6F 51 2F 
0d3d4     19 F6 C3 B1 | 	byte	$9b, $90, $a7, $d1, $e2, $09, $3a, $4f, $67, $6f, $51, $2f, $19, $f6, $c3, $b1
0d3d8     98 93 B1 D2 
0d3dc     E8 0D 3E 50 
0d3e0     69 6B 49 2C 
0d3e4     18 EF C2 B0 | 	byte	$98, $93, $b1, $d2, $e8, $0d, $3e, $50, $69, $6b, $49, $2c, $18, $ef, $c2, $b0
0d3e8     97 99 BB D5 
0d3ec     EB 16 3C 51 
0d3f0     68 65 3F 29 
0d3f4     13 E8 C4 AC | 	byte	$97, $99, $bb, $d5, $eb, $16, $3c, $51, $68, $65, $3f, $29, $13, $e8, $c4, $ac
0d3f8     98 9F C4 D6 
0d3fc     F0 1C 3B 55 
0d400     66 5B 3A 28 
0d404     0E E5 C3 A8 | 	byte	$98, $9f, $c4, $d6, $f0, $1c, $3b, $55, $66, $5b, $3a, $28, $0e, $e5, $c3, $a8
0d408     9C AA C6 DB 
0d40c     F5 1B 3D 57 
0d410     63 51 39 23 
0d414     0C E2 C0 A9 | 	byte	$9c, $aa, $c6, $db, $f5, $1b, $3d, $57, $63, $51, $39, $23, $0c, $e2, $c0, $a9
0d418     A0 B2 C9 E0 
0d41c     F9 1E 3E 58 
0d420     5C 4A 36 1F 
0d424     06 E1 BC A8 | 	byte	$a0, $b2, $c9, $e0, $f9, $1e, $3e, $58, $5c, $4a, $36, $1f, $06, $e1, $bc, $a8
0d428     A8 B9 CC E2 
0d42c     FB 1E 43 58 
0d430     53 44 31 1A 
0d434     03 E1 BA A9 | 	byte	$a8, $b9, $cc, $e2, $fb, $1e, $43, $58, $53, $44, $31, $1a, $03, $e1, $ba, $a9
0d438     B0 BE CF E9 
0d43c     FD 1F 47 55 
0d440     4A 41 2E 15 
0d444     02 DE B7 AD | 	byte	$b0, $be, $cf, $e9, $fd, $1f, $47, $55, $4a, $41, $2e, $15, $02, $de, $b7, $ad
0d448     B9 C0 D5 EB 
0d44c     FE 24 4A 50 
0d450     43 3E 28 13 
0d454     02 DC B5 B4 | 	byte	$b9, $c0, $d5, $eb, $fe, $24, $4a, $50, $43, $3e, $28, $13, $02, $dc, $b5, $b4
0d458     C0 C4 D9 EE 
0d45c     FE 27 4A 48 
0d460     3E 3A 24 11 
0d464     01 D5 B6 BD | 	byte	$c0, $c4, $d9, $ee, $fe, $27, $4a, $48, $3e, $3a, $24, $11, $01, $d5, $b6, $bd
0d468     C3 C6 DF EE 
0d46c     FE 2E 49 3E 
0d470     3D 37 1D 12 
0d474     FE CE B9 C7 | 	byte	$c3, $c6, $df, $ee, $fe, $2e, $49, $3e, $3d, $37, $1d, $12, $fe, $ce, $b9, $c7
0d478     C3 CC E5 EC 
0d47c     04 34 44 36 
0d480     3D 33 19 16 
0d484     F9 CA C0 CD | 	byte	$c3, $cc, $e5, $ec, $04, $34, $44, $36, $3d, $33, $19, $16, $f9, $ca, $c0, $cd
0d488     C3 D0 E9 E9 
0d48c     09 3B 3C 32 
0d490     3D 2C 16 19 
0d494     F0 C7 CB D1 | 	byte	$c3, $d0, $e9, $e9, $09, $3b, $3c, $32, $3d, $2c, $16, $19, $f0, $c7, $cb, $d1
0d498     C5 D8 EA E7 
0d49c     14 3B 30 30 
0d4a0     3A 27 17 19 
0d4a4     EE C6 D3 CF | 	byte	$c5, $d8, $ea, $e7, $14, $3b, $30, $30, $3a, $27, $17, $19, $ee, $c6, $d3, $cf
0d4a8     C7 DE E8 EA 
0d4ac     17 38 29 31 
0d4b0     37 20 1B 16 
0d4b4     E6 CA DB CE | 	byte	$c7, $de, $e8, $ea, $17, $38, $29, $31, $37, $20, $1b, $16, $e6, $ca, $db, $ce
0d4b8     CA E2 E3 ED 
0d4bc     1F 32 22 32 
0d4c0     33 1B 1E 10 
0d4c4     DF D2 DE CD | 	byte	$ca, $e2, $e3, $ed, $1f, $32, $22, $32, $33, $1b, $1e, $10, $df, $d2, $de, $cd
0d4c8     CF E6 E0 F5 
0d4cc     20 29 22 32 
0d4d0     2E 1A 21 07 
0d4d4     DE DD DF CE | 	byte	$cf, $e6, $e0, $f5, $20, $29, $22, $32, $2e, $1a, $21, $07, $de, $dd, $df, $ce
0d4d8     D6 E6 DF FD 
0d4dc     22 1F 21 32 
0d4e0     27 1B 20 04 
0d4e4     DE E4 DE CF | 	byte	$d6, $e6, $df, $fd, $22, $1f, $21, $32, $27, $1b, $20, $04, $de, $e4, $de, $cf
0d4e8     DA E3 E1 FF 
0d4ec     20 1A 23 31 
0d4f0     23 1F 1E FC 
0d4f4     E3 E8 DC D0 | 	byte	$da, $e3, $e1, $ff, $20, $1a, $23, $31, $23, $1f, $1e, $fc, $e3, $e8, $dc, $d0
0d4f8     DF E0 E3 06 
0d4fc     19 16 25 2E 
0d500     20 20 1B F7 
0d504     EA EA DA D4 | 	byte	$df, $e0, $e3, $06, $19, $16, $25, $2e, $20, $20, $1b, $f7, $ea, $ea, $da, $d4
0d508     E0 E0 E7 0A 
0d50c     12 16 27 2A 
0d510     20 20 16 F8 
0d514     F0 EA DA D8 | 	byte	$e0, $e0, $e7, $0a, $12, $16, $27, $2a, $20, $20, $16, $f8, $f0, $ea, $da, $d8
0d518     E0 E1 ED 08 
0d51c     0E 16 28 26 
0d520     21 1F 13 F9 
0d524     F3 E9 D8 DB | 	byte	$e0, $e1, $ed, $08, $0e, $16, $28, $26, $21, $1f, $13, $f9, $f3, $e9, $d8, $db
0d528     DF E1 F0 04 
0d52c     0C 17 26 23 
0d530     20 1E 0D FF 
0d534     F4 E8 DA DD | 	byte	$df, $e1, $f0, $04, $0c, $17, $26, $23, $20, $1e, $0d, $ff, $f4, $e8, $da, $dd
0d538     E0 E1 F3 FF 
0d53c     0C 19 24 23 
0d540     1F 1D 0C 02 
0d544     F3 E6 DC DC | 	byte	$e0, $e1, $f3, $ff, $0c, $19, $24, $23, $1f, $1d, $0c, $02, $f3, $e6, $dc, $dc
0d548     E2 E3 F2 FD 
0d54c     0C 19 22 24 
0d550     1D 1C 0F 03 
0d554     F4 E5 DE DC | 	byte	$e2, $e3, $f2, $fd, $0c, $19, $22, $24, $1d, $1c, $0f, $03, $f4, $e5, $de, $dc
0d558     E4 E5 EF FC 
0d55c     0D 1B 21 24 
0d560     1C 1B 12 03 
0d564     F2 E5 DF DD | 	byte	$e4, $e5, $ef, $fc, $0d, $1b, $21, $24, $1c, $1b, $12, $03, $f2, $e5, $df, $dd
0d568     E4 E6 EC FD 
0d56c     0E 1C 21 22 
0d570     1C 1A 15 02 
0d574     F1 E5 DE E0 | 	byte	$e4, $e6, $ec, $fd, $0e, $1c, $21, $22, $1c, $1a, $15, $02, $f1, $e5, $de, $e0
0d578     E4 E5 EB 00 
0d57c     10 1B 22 20 
0d580     1C 1C 17 00 
0d584     F0 E5 DD E2 | 	byte	$e4, $e5, $eb, $00, $10, $1b, $22, $20, $1c, $1c, $17, $00, $f0, $e5, $dd, $e2
0d588     E4 E2 EA 00 
0d58c     11 1A 22 1D 
0d590     1C 20 15 FD 
0d594     EE E4 DE E3 | 	byte	$e4, $e2, $ea, $00, $11, $1a, $22, $1d, $1c, $20, $15, $fd, $ee, $e4, $de, $e3
0d598     E3 DE ED 02 
0d59c     11 1D 21 1C 
0d5a0     1E 24 12 FC 
0d5a4     EE E3 DF E4 | 	byte	$e3, $de, $ed, $02, $11, $1d, $21, $1c, $1e, $24, $12, $fc, $ee, $e3, $df, $e4
0d5a8     E1 DB ED 05 
0d5ac     11 1E 20 1C 
0d5b0     21 25 11 F9 
0d5b4     F0 E1 E1 E4 | 	byte	$e1, $db, $ed, $05, $11, $1e, $20, $1c, $21, $25, $11, $f9, $f0, $e1, $e1, $e4
0d5b8     DC DB F0 08 
0d5bc     11 20 1E 1C 
0d5c0     27 25 0D F7 
0d5c4     EE E0 E2 E4 | 	byte	$dc, $db, $f0, $08, $11, $20, $1e, $1c, $27, $25, $0d, $f7, $ee, $e0, $e2, $e4
0d5c8     D6 DB F5 08 
0d5cc     13 20 1D 1D 
0d5d0     2C 23 09 F8 
0d5d4     EB E0 E3 E1 | 	byte	$d6, $db, $f5, $08, $13, $20, $1d, $1d, $2c, $23, $09, $f8, $eb, $e0, $e3, $e1
0d5d8     D2 DF F6 08 
0d5dc     16 1F 1D 20 
0d5e0     2F 1F 08 F8 
0d5e4     E8 E1 E3 DE | 	byte	$d2, $df, $f6, $08, $16, $1f, $1d, $20, $2f, $1f, $08, $f8, $e8, $e1, $e3, $de
0d5e8     CF E3 FB 08 
0d5ec     1A 1E 1D 25 
0d5f0     31 1E 04 F7 
0d5f4     E6 E3 E4 D8 | 	byte	$cf, $e3, $fb, $08, $1a, $1e, $1d, $25, $31, $1e, $04, $f7, $e6, $e3, $e4, $d8
0d5f8     D0 E5 FE 09 
0d5fc     1C 1D 1D 2B 
0d600     30 19 02 F5 
0d604     E3 E2 E2 D1 | 	byte	$d0, $e5, $fe, $09, $1c, $1d, $1d, $2b, $30, $19, $02, $f5, $e3, $e2, $e2, $d1
0d608     D1 E9 FE 0C 
0d60c     1C 1D 1F 31 
0d610     2D 16 01 F1 
0d614     E3 E2 E0 CC | 	byte	$d1, $e9, $fe, $0c, $1c, $1d, $1f, $31, $2d, $16, $01, $f1, $e3, $e2, $e0, $cc
0d618     D4 EC FF 0E 
0d61c     1C 1D 23 35 
0d620     2C 12 00 EF 
0d624     E3 E2 DA CA | 	byte	$d4, $ec, $ff, $0e, $1c, $1d, $23, $35, $2c, $12, $00, $ef, $e3, $e2, $da, $ca
0d628     D6 F1 00 11 
0d62c     1D 1E 2A 36 
0d630     28 0F FF EC 
0d634     E2 E1 D4 CA | 	byte	$d6, $f1, $00, $11, $1d, $1e, $2a, $36, $28, $0f, $ff, $ec, $e2, $e1, $d4, $ca
0d638     D9 F3 02 14 
0d63c     1E 20 2F 36 
0d640     26 0D FC EB 
0d644     E1 DE CF CA | 	byte	$d9, $f3, $02, $14, $1e, $20, $2f, $36, $26, $0d, $fc, $eb, $e1, $de, $cf, $ca
0d648     DC F4 06 15 
0d64c     20 24 33 36 
0d650     21 0D F8 E9 
0d654     DF D8 CD CA | 	byte	$dc, $f4, $06, $15, $20, $24, $33, $36, $21, $0d, $f8, $e9, $df, $d8, $cd, $ca
0d658     E0 F5 0A 17 
0d65c     21 29 34 35 
0d660     1D 0A F5 E8 
0d664     DD D4 CB CB | 	byte	$e0, $f5, $0a, $17, $21, $29, $34, $35, $1d, $0a, $f5, $e8, $dd, $d4, $cb, $cb
0d668     E4 F9 0B 19 
0d66c     23 30 35 34 
0d670     1D 04 F4 E5 
0d674     DB CE CB CD | 	byte	$e4, $f9, $0b, $19, $23, $30, $35, $34, $1d, $04, $f4, $e5, $db, $ce, $cb, $cd
0d678     E5 FD 0C 1D 
0d67c     28 33 35 32 
0d680     1A 00 F3 E2 
0d684     D5 CD CA D0 | 	byte	$e5, $fd, $0c, $1d, $28, $33, $35, $32, $1a, $00, $f3, $e2, $d5, $cd, $ca, $d0
0d688     E6 02 0E 20 
0d68c     2E 34 37 2F 
0d690     18 FB F2 DF 
0d694     CF CB C9 D2 | 	byte	$e6, $02, $0e, $20, $2e, $34, $37, $2f, $18, $fb, $f2, $df, $cf, $cb, $c9, $d2
0d698     EB 06 0F 24 
0d69c     33 34 38 2F 
0d6a0     12 F9 F0 D9 
0d6a4     CB CB C8 D2 | 	byte	$eb, $06, $0f, $24, $33, $34, $38, $2f, $12, $f9, $f0, $d9, $cb, $cb, $c8, $d2
0d6a8     F1 06 13 2A 
0d6ac     36 35 39 2D 
0d6b0     0B F9 EB D4 
0d6b4     C8 CB C7 D5 | 	byte	$f1, $06, $13, $2a, $36, $35, $39, $2d, $0b, $f9, $eb, $d4, $c8, $cb, $c7, $d5
0d6b8     F5 07 17 30 
0d6bc     38 35 3A 27 
0d6c0     08 F8 E8 CD 
0d6c4     C8 CA C6 DB | 	byte	$f5, $07, $17, $30, $38, $35, $3a, $27, $08, $f8, $e8, $cd, $c8, $ca, $c6, $db
0d6c8     FA 08 1B 35 
0d6cc     38 37 3A 22 
0d6d0     05 F6 E1 C8 
0d6d4     C8 C9 C6 DE | 	byte	$fa, $08, $1b, $35, $38, $37, $3a, $22, $05, $f6, $e1, $c8, $c8, $c9, $c6, $de
0d6d8     FD 0A 24 39 
0d6dc     39 39 3A 1D 
0d6e0     02 F4 D8 C4 
0d6e4     C7 C6 C7 E3 | 	byte	$fd, $0a, $24, $39, $39, $39, $3a, $1d, $02, $f4, $d8, $c4, $c7, $c6, $c7, $e3
0d6e8     FF 0E 28 3C 
0d6ec     39 3C 36 19 
0d6f0     00 EF D4 C2 
0d6f4     C5 C3 CC E9 | 	byte	$ff, $0e, $28, $3c, $39, $3c, $36, $19, $00, $ef, $d4, $c2, $c5, $c3, $cc, $e9
0d6f8     00 12 2F 3E 
0d6fc     3B 3E 34 15 
0d700     FE E9 CF C1 
0d704     C4 C1 D0 EF | 	byte	$00, $12, $2f, $3e, $3b, $3e, $34, $15, $fe, $e9, $cf, $c1, $c4, $c1, $d0, $ef
0d708     01 1A 34 3F 
0d70c     3E 3F 2E 12 
0d710     FE E2 CA C0 
0d714     C1 C1 D4 F0 | 	byte	$01, $1a, $34, $3f, $3e, $3f, $2e, $12, $fe, $e2, $ca, $c0, $c1, $c1, $d4, $f0
0d718     04 1F 38 41 
0d71c     41 3D 2B 0E 
0d720     FB DB C6 BE 
0d724     BD C5 D7 F3 | 	byte	$04, $1f, $38, $41, $41, $3d, $2b, $0e, $fb, $db, $c6, $be, $bd, $c5, $d7, $f3
0d728     08 26 3C 43 
0d72c     45 3B 26 0C 
0d730     F6 D7 C3 BC 
0d734     BB C7 DC F3 | 	byte	$08, $26, $3c, $43, $45, $3b, $26, $0c, $f6, $d7, $c3, $bc, $bb, $c7, $dc, $f3
0d738     0F 29 3F 46 
0d73c     46 36 23 0A 
0d740     EF D5 BF B9 
0d744     BA CA E0 F6 | 	byte	$0f, $29, $3f, $46, $46, $36, $23, $0a, $ef, $d5, $bf, $b9, $ba, $ca, $e0, $f6
0d748     13 2D 42 49 
0d74c     45 35 1F 09 
0d750     E9 CF BD B5 
0d754     BC CD E2 F9 | 	byte	$13, $2d, $42, $49, $45, $35, $1f, $09, $e9, $cf, $bd, $b5, $bc, $cd, $e2, $f9
0d758     18 30 45 4C 
0d75c     44 32 1D 04 
0d760     E3 CD B9 B3 
0d764     BD D0 E3 FF | 	byte	$18, $30, $45, $4c, $44, $32, $1d, $04, $e3, $cd, $b9, $b3, $bd, $d0, $e3, $ff
0d768     1E 35 49 4E 
0d76c     42 2F 1B FE 
0d770     E3 C8 B4 B1 
0d774     C0 D1 E7 03 | 	byte	$1e, $35, $49, $4e, $42, $2f, $1b, $fe, $e3, $c8, $b4, $b1, $c0, $d1, $e7, $03
0d778     1F 3A 4C 4E 
0d77c     3F 2E 16 FA 
0d780     DE C2 B1 B2 
0d784     C0 D3 EC 05 | 	byte	$1f, $3a, $4c, $4e, $3f, $2e, $16, $fa, $de, $c2, $b1, $b2, $c0, $d3, $ec, $05
0d788     23 41 50 4D 
0d78c     3F 2B 13 F9 
0d790     DA BE AF B3 
0d794     C1 D6 EF 09 | 	byte	$23, $41, $50, $4d, $3f, $2b, $13, $f9, $da, $be, $af, $b3, $c1, $d6, $ef, $09
0d798     28 45 52 4D 
0d79c     3D 27 0E F6 
0d7a0     D8 B7 AE B5 
0d7a4     C3 D9 F4 0C | 	byte	$28, $45, $52, $4d, $3d, $27, $0e, $f6, $d8, $b7, $ae, $b5, $c3, $d9, $f4, $0c
0d7a8     2A 4C 51 4B 
0d7ac     3D 21 0B F2 
0d7b0     D2 B1 AF B5 
0d7b4     C4 DF F7 0F | 	byte	$2a, $4c, $51, $4b, $3d, $21, $0b, $f2, $d2, $b1, $af, $b5, $c4, $df, $f7, $0f
0d7b8     32 50 50 4B 
0d7bc     3D 1F 08 F1 
0d7c0     C8 AD B0 B5 
0d7c4     C5 E4 F8 12 | 	byte	$32, $50, $50, $4b, $3d, $1f, $08, $f1, $c8, $ad, $b0, $b5, $c5, $e4, $f8, $12
0d7c8     38 53 4F 4B 
0d7cc     3A 18 07 EF 
0d7d0     C2 AC B0 B5 
0d7d4     C8 EB F9 12 | 	byte	$38, $53, $4f, $4b, $3a, $18, $07, $ef, $c2, $ac, $b0, $b5, $c8, $eb, $f9, $12
0d7d8     41 53 4F 4B 
0d7dc     38 12 05 EB 
0d7e0     BB AC B0 B4 
0d7e4     CD EF F9 17 | 	byte	$41, $53, $4f, $4b, $38, $12, $05, $eb, $bb, $ac, $b0, $b4, $cd, $ef, $f9, $17
0d7e8     47 52 4F 4C 
0d7ec     33 10 05 E5 
0d7f0     B5 AE B1 B3 
0d7f4     D1 F1 FA 21 | 	byte	$47, $52, $4f, $4c, $33, $10, $05, $e5, $b5, $ae, $b1, $b3, $d1, $f1, $fa, $21
0d7f8     4E 50 4F 4C 
0d7fc     2B 0E 05 DB 
0d800     B0 B0 B0 B4 
0d804     D8 F2 FC 29 | 	byte	$4e, $50, $4f, $4c, $2b, $0e, $05, $db, $b0, $b0, $b0, $b4, $d8, $f2, $fc, $29
0d808     52 50 51 4B 
0d80c     24 0E 03 D1 
0d810     AD B1 AF B7 
0d814     DD F2 00 31 | 	byte	$52, $50, $51, $4b, $24, $0e, $03, $d1, $ad, $b1, $af, $b7, $dd, $f2, $00, $31
0d818     53 4F 53 46 
0d81c     20 0E 00 CE 
0d820     AD B1 AC BA 
0d824     E4 F1 05 39 | 	byte	$53, $4f, $53, $46, $20, $0e, $00, $ce, $ad, $b1, $ac, $ba, $e4, $f1, $05, $39
0d828     52 4E 55 43 
0d82c     1B 0E F9 C1 
0d830     AE B1 AA C1 
0d834     E6 F1 0B 41 | 	byte	$52, $4e, $55, $43, $1b, $0e, $f9, $c1, $ae, $b1, $aa, $c1, $e6, $f1, $0b, $41
0d838     51 4F 56 3C 
0d83c     19 0F F0 BF 
0d840     AE AF AA C9 
0d844     E7 F1 15 43 | 	byte	$51, $4f, $56, $3c, $19, $0f, $f0, $bf, $ae, $af, $aa, $c9, $e7, $f1, $15, $43
0d848     50 51 55 35 
0d84c     19 0D E6 BB 
0d850     B0 AE AD CB 
0d854     E8 F4 1A 46 | 	byte	$50, $51, $55, $35, $19, $0d, $e6, $bb, $b0, $ae, $ad, $cb, $e8, $f4, $1a, $46
0d858     50 53 51 32 
0d85c     17 0C E2 B9 
0d860     B0 AB B1 D0 
0d864     E8 F6 23 47 | 	byte	$50, $53, $51, $32, $17, $0c, $e2, $b9, $b0, $ab, $b1, $d0, $e8, $f6, $23, $47
0d868     50 56 4E 2D 
0d86c     17 07 DA B9 
0d870     AF A9 B4 D5 
0d874     E7 FE 2B 46 | 	byte	$50, $56, $4e, $2d, $17, $07, $da, $b9, $af, $a9, $b4, $d5, $e7, $fe, $2b, $46
0d878     51 56 48 2A 
0d87c     18 00 D7 B8 
0d880     AD AA BB D4 
0d884     E9 06 2B 48 | 	byte	$51, $56, $48, $2a, $18, $00, $d7, $b8, $ad, $aa, $bb, $d4, $e9, $06, $2b, $48
0d888     53 55 42 28 
0d88c     16 FA D1 B7 
0d890     AC AC BE D7 
0d894     EC 0D 2F 4A | 	byte	$53, $55, $42, $28, $16, $fa, $d1, $b7, $ac, $ac, $be, $d7, $ec, $0d, $2f, $4a
0d898     55 53 41 29 
0d89c     11 F3 CE B6 
0d8a0     AA B0 C2 D8 
0d8a4     F2 11 33 49 | 	byte	$55, $53, $41, $29, $11, $f3, $ce, $b6, $aa, $b0, $c2, $d8, $f2, $11, $33, $49
0d8a8     56 4E 3D 27 
0d8ac     0D EB CB B5 
0d8b0     AA B2 C5 DA 
0d8b4     F5 16 33 4D | 	byte	$56, $4e, $3d, $27, $0d, $eb, $cb, $b5, $aa, $b2, $c5, $da, $f5, $16, $33, $4d
0d8b8     55 4C 3A 27 
0d8bc     07 E7 CB B0 
0d8c0     AB B7 C6 DB 
0d8c4     FD 19 35 4F | 	byte	$55, $4c, $3a, $27, $07, $e7, $cb, $b0, $ab, $b7, $c6, $db, $fd, $19, $35, $4f
0d8c8     54 47 3A 22 
0d8cc     00 E5 CA AF 
0d8d0     AD BA C8 E0 
0d8d4     00 1D 3A 52 | 	byte	$54, $47, $3a, $22, $00, $e5, $ca, $af, $ad, $ba, $c8, $e0, $00, $1d, $3a, $52
0d8d8     52 45 38 1E 
0d8dc     FB E2 C4 AD 
0d8e0     B1 BC C9 E5 
0d8e4     08 1F 3E 52 | 	byte	$52, $45, $38, $1e, $fb, $e2, $c4, $ad, $b1, $bc, $c9, $e5, $08, $1f, $3e, $52
0d8e8     4E 43 37 16 
0d8ec     F8 DF C2 AD 
0d8f0     B4 BE CC EB 
0d8f4     0C 21 41 52 | 	byte	$4e, $43, $37, $16, $f8, $df, $c2, $ad, $b4, $be, $cc, $eb, $0c, $21, $41, $52
0d8f8     4B 41 35 11 
0d8fc     F4 DB BD AF 
0d900     B7 BE CF F1 
0d904     0F 24 43 50 | 	byte	$4b, $41, $35, $11, $f4, $db, $bd, $af, $b7, $be, $cf, $f1, $0f, $24, $43, $50
0d908     48 42 2F 0A 
0d90c     F1 D9 BB B0 
0d910     B9 BE D4 F6 
0d914     10 29 47 4E | 	byte	$48, $42, $2f, $0a, $f1, $d9, $bb, $b0, $b9, $be, $d4, $f6, $10, $29, $47, $4e
0d918     45 41 29 06 
0d91c     EE D8 B8 B3 
0d920     BB C0 D8 FC 
0d924     13 2B 48 4B | 	byte	$45, $41, $29, $06, $ee, $d8, $b8, $b3, $bb, $c0, $d8, $fc, $13, $2b, $48, $4b
0d928     44 3F 24 00 
0d92c     ED D3 B7 B6 
0d930     BC C1 DE 01 
0d934     13 30 48 48 | 	byte	$44, $3f, $24, $00, $ed, $d3, $b7, $b6, $bc, $c1, $de, $01, $13, $30, $48, $48
0d938     44 3E 1D FF 
0d93c     EB CE B8 B9 
0d940     BC C3 E6 03 
0d944     17 32 47 46 | 	byte	$44, $3e, $1d, $ff, $eb, $ce, $b8, $b9, $bc, $c3, $e6, $03, $17, $32, $47, $46
0d948     44 39 16 FC 
0d94c     E9 CC B9 BB 
0d950     BD C9 E9 06 
0d954     1A 35 46 44 | 	byte	$44, $39, $16, $fc, $e9, $cc, $b9, $bb, $bd, $c9, $e9, $06, $1a, $35, $46, $44
0d958     43 33 14 F9 
0d95c     E7 C9 BB BC 
0d960     BD CD F0 08 
0d964     1A 37 44 43 | 	byte	$43, $33, $14, $f9, $e7, $c9, $bb, $bc, $bd, $cd, $f0, $08, $1a, $37, $44, $43
0d968     42 30 0E F6 
0d96c     E3 C7 BD BD 
0d970     BF D3 F5 0B 
0d974     20 39 42 43 | 	byte	$42, $30, $0e, $f6, $e3, $c7, $bd, $bd, $bf, $d3, $f5, $0b, $20, $39, $42, $43
0d978     41 29 0A F5 
0d97c     E0 C8 BF BD 
0d980     C1 DB F8 0D 
0d984     21 38 40 42 | 	byte	$41, $29, $0a, $f5, $e0, $c8, $bf, $bd, $c1, $db, $f8, $0d, $21, $38, $40, $42
0d988     3D 24 06 F2 
0d98c     DC C7 C0 BD 
0d990     C5 DE FC 0D 
0d994     24 38 3F 42 | 	byte	$3d, $24, $06, $f2, $dc, $c7, $c0, $bd, $c5, $de, $fc, $0d, $24, $38, $3f, $42
0d998     39 1E 02 F1 
0d99c     DA C9 C1 BE 
0d9a0     C9 E5 FD 11 
0d9a4     25 36 3F 41 | 	byte	$39, $1e, $02, $f1, $da, $c9, $c1, $be, $c9, $e5, $fd, $11, $25, $36, $3f, $41
0d9a8     34 1A 02 EE 
0d9ac     DA CA C1 C0 
0d9b0     CF E9 FF 13 
0d9b4     26 35 3F 3F | 	byte	$34, $1a, $02, $ee, $da, $ca, $c1, $c0, $cf, $e9, $ff, $13, $26, $35, $3f, $3f
0d9b8     30 15 FE EC 
0d9bc     D9 CB C1 C2 
0d9c0     D4 EC 03 15 
0d9c4     27 34 3F 3C | 	byte	$30, $15, $fe, $ec, $d9, $cb, $c1, $c2, $d4, $ec, $03, $15, $27, $34, $3f, $3c
0d9c8     2A 11 FD EA 
0d9cc     DB CB C0 C5 
0d9d0     D9 EF 05 17 
0d9d4     25 35 3F 38 | 	byte	$2a, $11, $fd, $ea, $db, $cb, $c0, $c5, $d9, $ef, $05, $17, $25, $35, $3f, $38
0d9d8     26 0F F9 E9 
0d9dc     DC CB C1 CA 
0d9e0     DC F2 07 17 
0d9e4     24 36 3E 35 | 	byte	$26, $0f, $f9, $e9, $dc, $cb, $c1, $ca, $dc, $f2, $07, $17, $24, $36, $3e, $35
0d9e8     21 0C F7 E8 
0d9ec     DD C9 C2 CE 
0d9f0     E1 F5 0A 17 
0d9f4     24 37 3C 2F | 	byte	$21, $0c, $f7, $e8, $dd, $c9, $c2, $ce, $e1, $f5, $0a, $17, $24, $37, $3c, $2f
0d9f8     1F 0A F4 EA 
0d9fc     DD C8 C5 D4 
0da00     E3 F7 0C 15 
0da04     24 38 38 2A | 	byte	$1f, $0a, $f4, $ea, $dd, $c8, $c5, $d4, $e3, $f7, $0c, $15, $24, $38, $38, $2a
0da08     1C 06 F4 EB 
0da0c     DB C8 C9 D7 
0da10     E5 FC 0D 14 
0da14     24 39 34 26 | 	byte	$1c, $06, $f4, $eb, $db, $c8, $c9, $d7, $e5, $fc, $0d, $14, $24, $39, $34, $26
0da18     19 05 F3 ED 
0da1c     DB C7 CF DB 
0da20     E9 FD 0D 12 
0da24     26 38 30 24 | 	byte	$19, $05, $f3, $ed, $db, $c7, $cf, $db, $e9, $fd, $0d, $12, $26, $38, $30, $24
0da28     16 01 F4 EF 
0da2c     D7 C8 D3 DE 
0da30     EA 01 0B 11 
0da34     2A 37 2A 21 | 	byte	$16, $01, $f4, $ef, $d7, $c8, $d3, $de, $ea, $01, $0b, $11, $2a, $37, $2a, $21
0da38     15 FE F6 EE 
0da3c     D4 CA D8 DF 
0da40     ED 04 09 13 
0da44     2B 33 25 21 | 	byte	$15, $fe, $f6, $ee, $d4, $ca, $d8, $df, $ed, $04, $09, $13, $2b, $33, $25, $21
0da48     11 FD F9 EC 
0da4c     D4 CE DC E0 
0da50     F1 04 06 15 
0da54     2D 2F 23 1F | 	byte	$11, $fd, $f9, $ec, $d4, $ce, $dc, $e0, $f1, $04, $06, $15, $2d, $2f, $23, $1f
0da58     0E FB FB EA 
0da5c     D3 D3 DE E2 
0da60     F4 04 04 18 
0da64     2D 2A 21 1E | 	byte	$0e, $fb, $fb, $ea, $d3, $d3, $de, $e2, $f4, $04, $04, $18, $2d, $2a, $21, $1e
0da68     0A FD FC E5 
0da6c     D3 D9 DF E3 
0da70     F7 02 04 1C 
0da74     2C 24 21 1B | 	byte	$0a, $fd, $fc, $e5, $d3, $d9, $df, $e3, $f7, $02, $04, $1c, $2c, $24, $21, $1b
0da78     07 FF FB E5 
0da7c     D5 DD DF E7 
0da80     FA FE 06 1D 
0da84     2A 21 21 19 | 	byte	$07, $ff, $fb, $e5, $d5, $dd, $df, $e7, $fa, $fe, $06, $1d, $2a, $21, $21, $19
0da88     06 03 FA E3 
0da8c     D9 E0 DF E9 
0da90     FA FC 07 1E 
0da94     25 1F 21 15 | 	byte	$06, $03, $fa, $e3, $d9, $e0, $df, $e9, $fa, $fc, $07, $1e, $25, $1f, $21, $15
0da98     06 05 F9 E1 
0da9c     DD E2 E0 EB 
0daa0     F9 FA 0B 1E 
0daa4     21 1E 1F 13 | 	byte	$06, $05, $f9, $e1, $dd, $e2, $e0, $eb, $f9, $fa, $0b, $1e, $21, $1e, $1f, $13
0daa8     08 06 F5 E2 
0daac     E1 E2 E2 EE 
0dab0     F7 FA 0E 1D 
0dab4     1E 1E 1E 10 | 	byte	$08, $06, $f5, $e2, $e1, $e2, $e2, $ee, $f7, $fa, $0e, $1d, $1e, $1e, $1e, $10
0dab8     0A 05 F3 E4 
0dabc     E3 E1 E2 F0 
0dac0     F5 FC 0E 1B 
0dac4     1C 1F 1B 10 | 	byte	$0a, $05, $f3, $e4, $e3, $e1, $e2, $f0, $f5, $fc, $0e, $1b, $1c, $1f, $1b, $10
0dac8     0C 02 F1 E7 
0dacc     E4 E1 E6 F0 
0dad0     F3 FF 0F 18 
0dad4     1C 1E 1A 11 | 	byte	$0c, $02, $f1, $e7, $e4, $e1, $e6, $f0, $f3, $ff, $0f, $18, $1c, $1e, $1a, $11
0dad8     0C 01 F1 EA 
0dadc     E4 E2 E7 EE 
0dae0     F3 00 0F 15 
0dae4     1C 1D 18 13 | 	byte	$0c, $01, $f1, $ea, $e4, $e2, $e7, $ee, $f3, $00, $0f, $15, $1c, $1d, $18, $13
0dae8     0D FF F2 EC 
0daec     E4 E3 E9 EC 
0daf0     F4 02 0D 14 
0daf4     1C 1C 17 15 | 	byte	$0d, $ff, $f2, $ec, $e4, $e3, $e9, $ec, $f4, $02, $0d, $14, $1c, $1c, $17, $15
0daf8     0B FD F4 EB 
0dafc     E4 E4 E8 EA 
0db00     F6 02 0A 15 
0db04     1C 1B 18 15 | 	byte	$0b, $fd, $f4, $eb, $e4, $e4, $e8, $ea, $f6, $02, $0a, $15, $1c, $1b, $18, $15
0db08     08 FE F6 EB 
0db0c     E4 E5 E6 EB 
0db10     F9 01 09 16 
0db14     1B 1A 1A 15 | 	byte	$08, $fe, $f6, $eb, $e4, $e5, $e6, $eb, $f9, $01, $09, $16, $1b, $1a, $1a, $15
0db18     07 FF F7 EA 
0db1c     E5 E6 E5 ED 
0db20     FA 00 08 18 
0db24     1A 1A 1D 13 | 	byte	$07, $ff, $f7, $ea, $e5, $e6, $e5, $ed, $fa, $00, $08, $18, $1a, $1a, $1d, $13
0db28     06 02 F6 E8 
0db2c     E6 E5 E3 EE 
0db30     FA FD 09 18 
0db34     19 1C 1D 10 | 	byte	$06, $02, $f6, $e8, $e6, $e5, $e3, $ee, $fa, $fd, $09, $18, $19, $1c, $1d, $10
0db38     06 04 F6 E7 
0db3c     E7 E3 E3 F1 
0db40     F9 FB 0B 18 
0db44     18 1E 1D 0D | 	byte	$06, $04, $f6, $e7, $e7, $e3, $e3, $f1, $f9, $fb, $0b, $18, $18, $1e, $1d, $0d
0db48     08 05 F2 E8 
0db4c     E7 E0 E3 F4 
0db50     F7 FA 0F 18 
0db54     18 20 1B 0B | 	byte	$08, $05, $f2, $e8, $e7, $e0, $e3, $f4, $f7, $fa, $0f, $18, $18, $20, $1b, $0b
0db58     0B 05 F1 E8 
0db5c     E7 DE E5 F5 
0db60     F4 FB 11 17 
0db64     1A 23 18 0B | 	byte	$0b, $05, $f1, $e8, $e7, $de, $e5, $f5, $f4, $fb, $11, $17, $1a, $23, $18, $0b
0db68     0E 04 EE E9 
0db6c     E5 DC E8 F4 
0db70     F1 FC 12 16 
0db74     1C 23 16 0C | 	byte	$0e, $04, $ee, $e9, $e5, $dc, $e8, $f4, $f1, $fc, $12, $16, $1c, $23, $16, $0c
0db78     10 00 ED EA 
0db7c     E1 DC EC F2 
0db80     EF 00 13 16 
0db84     21 23 13 0E | 	byte	$10, $00, $ed, $ea, $e1, $dc, $ec, $f2, $ef, $00, $13, $16, $21, $23, $13, $0e
0db88     11 FD ED EA 
0db8c     DE DE ED F0 
0db90     EF 03 13 17 
0db94     24 21 12 12 | 	byte	$11, $fd, $ed, $ea, $de, $de, $ed, $f0, $ef, $03, $13, $17, $24, $21, $12, $12
0db98     10 FB ED E8 
0db9c     DB E0 EF EC 
0dba0     F1 06 13 19 
0dba4     26 1F 12 15 | 	byte	$10, $fb, $ed, $e8, $db, $e0, $ef, $ec, $f1, $06, $13, $19, $26, $1f, $12, $15
0dba8     0E F8 ED E6 
0dbac     D9 E3 EE E9 
0dbb0     F2 0A 13 1D 
0dbb4     27 1C 13 18 | 	byte	$0e, $f8, $ed, $e6, $d9, $e3, $ee, $e9, $f2, $0a, $13, $1d, $27, $1c, $13, $18
0dbb8     0C F6 ED E1 
0dbbc     D9 E5 EC E8 
0dbc0     F7 0A 13 21 
0dbc4     26 19 16 19 | 	byte	$0c, $f6, $ed, $e1, $d9, $e5, $ec, $e8, $f7, $0a, $13, $21, $26, $19, $16, $19
0dbc8     0A F5 EB DF 
0dbcc     DA E7 E9 E8 
0dbd0     F9 0B 16 23 
0dbd4     24 19 19 17 | 	byte	$0a, $f5, $eb, $df, $da, $e7, $e9, $e8, $f9, $0b, $16, $23, $24, $19, $19, $17
0dbd8     05 F3 E9 DC 
0dbdc     DD E7 E6 E9 
0dbe0     FB 0D 18 26 
0dbe4     23 19 1C 16 | 	byte	$05, $f3, $e9, $dc, $dd, $e7, $e6, $e9, $fb, $0d, $18, $26, $23, $19, $1c, $16
0dbe8     02 F4 E6 DA 
0dbec     DE E6 E3 EC 
0dbf0     FF 0D 1C 26 
0dbf4     20 1B 1D 13 | 	byte	$02, $f4, $e6, $da, $de, $e6, $e3, $ec, $ff, $0d, $1c, $26, $20, $1b, $1d, $13
0dbf8     00 F2 E2 DA 
0dbfc     E0 E4 E3 EF 
0dc00     00 10 20 26 
0dc04     1F 1D 1D 0F | 	byte	$00, $f2, $e2, $da, $e0, $e4, $e3, $ef, $00, $10, $20, $26, $1f, $1d, $1d, $0f
0dc08     FF EF E0 DA 
0dc0c     E1 E1 E4 F1 
0dc10     02 14 22 25 
0dc14     1F 21 1C 0D | 	byte	$ff, $ef, $e0, $da, $e1, $e1, $e4, $f1, $02, $14, $22, $25, $1f, $21, $1c, $0d
0dc18     FE EB DD DC 
0dc1c     E0 DF E6 F4 
0dc20     02 17 23 23 
0dc24     20 22 19 0B | 	byte	$fe, $eb, $dd, $dc, $e0, $df, $e6, $f4, $02, $17, $23, $23, $20, $22, $19, $0b
0dc28     FC E6 DC DD 
0dc2c     DF DE E8 F6 
0dc30     05 1C 23 22 
0dc34     22 22 16 0A | 	byte	$fc, $e6, $dc, $dd, $df, $de, $e8, $f6, $05, $1c, $23, $22, $22, $22, $16, $0a
0dc38     F8 E2 DC DD 
0dc3c     DB DE EA F6 
0dc40     0A 1F 23 23 
0dc44     25 21 15 08 | 	byte	$f8, $e2, $dc, $dd, $db, $de, $ea, $f6, $0a, $1f, $23, $23, $25, $21, $15, $08
0dc48     F6 E0 DD DD 
0dc4c     D9 DF EC F9 
0dc50     0E 20 22 23 
0dc54     27 1E 13 07 | 	byte	$f6, $e0, $dd, $dd, $d9, $df, $ec, $f9, $0e, $20, $22, $23, $27, $1e, $13, $07
0dc58     F0 DE DE DB 
0dc5c     D8 E2 EE F9 
0dc60     12 22 22 26 
0dc64     28 1C 12 04 | 	byte	$f0, $de, $de, $db, $d8, $e2, $ee, $f9, $12, $22, $22, $26, $28, $1c, $12, $04
0dc68     ED DE DE D9 
0dc6c     D8 E5 EF FF 
0dc70     16 22 23 29 
0dc74     27 1B 10 01 | 	byte	$ed, $de, $de, $d9, $d8, $e5, $ef, $ff, $16, $22, $23, $29, $27, $1b, $10, $01
0dc78     E8 DF DD D6 
0dc7c     D9 E7 F0 00 
0dc80     1A 22 24 2A 
0dc84     26 19 0F FD | 	byte	$e8, $df, $dd, $d6, $d9, $e7, $f0, $00, $1a, $22, $24, $2a, $26, $19, $0f, $fd
0dc88     E5 DE DB D4 
0dc8c     DA E8 F1 06 
0dc90     1B 21 26 2C 
0dc94     24 18 0E F9 | 	byte	$e5, $de, $db, $d4, $da, $e8, $f1, $06, $1b, $21, $26, $2c, $24, $18, $0e, $f9
0dc98     E3 DE D9 D3 
0dc9c     DE E9 F4 09 
0dca0     1D 22 28 2C 
0dca4     23 16 0A F4 | 	byte	$e3, $de, $d9, $d3, $de, $e9, $f4, $09, $1d, $22, $28, $2c, $23, $16, $0a, $f4
0dca8     E2 DE D6 D4 
0dcac     DF EA F6 0D 
0dcb0     1E 22 2B 2C 
0dcb4     20 15 08 F0 | 	byte	$e2, $de, $d6, $d4, $df, $ea, $f6, $0d, $1e, $22, $2b, $2c, $20, $15, $08, $f0
0dcb8     E2 DC D4 D4 
0dcbc     E1 EC FA 12 
0dcc0     00 00 00 00 
0dcc4     28 03 F6 DE | 	byte	$e2, $dc, $d4, $d4, $e1, $ec, $fa, $12, $00, $00, $00, $00, $28, $03, $f6, $de
0dcc8     B7 E4 04 27 
0dccc     5A 5C 59 11 
0dcd0     E8 BB A0 A2 
0dcd4     CE 22 74 66 | 	byte	$b7, $e4, $04, $27, $5a, $5c, $59, $11, $e8, $bb, $a0, $a2, $ce, $22, $74, $66
0dcd8     1B D4 BE BD 
0dcdc     D5 DD ED FC 
0dce0     F2 13 2C 34 
0dce4     2A 05 FD D1 | 	byte	$1b, $d4, $be, $bd, $d5, $dd, $ed, $fc, $f2, $13, $2c, $34, $2a, $05, $fd, $d1
0dce8     B0 DA FC 26 
0dcec     62 61 5E 16 
0dcf0     DB AB A7 A5 
0dcf4     E0 30 7D 67 | 	byte	$b0, $da, $fc, $26, $62, $61, $5e, $16, $db, $ab, $a7, $a5, $e0, $30, $7d, $67
0dcf8     0F CE B4 CC 
0dcfc     B9 CA F0 04 
0dd00     1F 27 23 1A 
0dd04     30 09 FC C3 | 	byte	$0f, $ce, $b4, $cc, $b9, $ca, $f0, $04, $1f, $27, $23, $1a, $30, $09, $fc, $c3
0dd08     BB D1 FF 2B 
0dd0c     60 6E 54 1D 
0dd10     C4 8F 9E C8 
0dd14     1B 6D 7C 53 | 	byte	$bb, $d1, $ff, $2b, $60, $6e, $54, $1d, $c4, $8f, $9e, $c8, $1b, $6d, $7c, $53
0dd18     DB B6 88 8C 
0dd1c     83 93 CF 41 
0dd20     6E 7D 76 57 
0dd24     52 03 B8 86 | 	byte	$db, $b6, $88, $8c, $83, $93, $cf, $41, $6e, $7d, $76, $57, $52, $03, $b8, $86
0dd28     9A C8 0C 5B 
0dd2c     7F 7F 52 E7 
0dd30     89 80 80 CD 
0dd34     4C 7F 7F 4B | 	byte	$9a, $c8, $0c, $5b, $7f, $7f, $52, $e7, $89, $80, $80, $cd, $4c, $7f, $7f, $4b
0dd38     D3 AD 98 88 
0dd3c     82 82 BA 2F 
0dd40     6C 7F 6A 5C 
0dd44     36 1C D4 87 | 	byte	$d3, $ad, $98, $88, $82, $82, $ba, $2f, $6c, $7f, $6a, $5c, $36, $1c, $d4, $87
0dd48     96 B8 EB 46 
0dd4c     76 7F 59 F9 
0dd50     A9 80 80 AD 
0dd54     39 7F 7F 55 | 	byte	$96, $b8, $eb, $46, $76, $7f, $59, $f9, $a9, $80, $80, $ad, $39, $7f, $7f, $55
0dd58     F1 B9 9C 8D 
0dd5c     81 81 A1 18 
0dd60     63 7F 6B 51 
0dd64     32 14 E9 9F | 	byte	$f1, $b9, $9c, $8d, $81, $81, $a1, $18, $63, $7f, $6b, $51, $32, $14, $e9, $9f
0dd68     A2 B9 F0 2F 
0dd6c     65 70 50 FC 
0dd70     BB 82 81 BD 
0dd74     31 7F 7F 38 | 	byte	$a2, $b9, $f0, $2f, $65, $70, $50, $fc, $bb, $82, $81, $bd, $31, $7f, $7f, $38
0dd78     08 D2 B3 8D 
0dd7c     80 82 A2 01 
0dd80     55 72 7F 53 
0dd84     32 0B E8 C4 | 	byte	$08, $d2, $b3, $8d, $80, $82, $a2, $01, $55, $72, $7f, $53, $32, $0b, $e8, $c4
0dd88     B5 C2 F5 31 
0dd8c     54 5C 34 08 
0dd90     BB 9D 8E DC 
0dd94     3F 77 64 28 | 	byte	$b5, $c2, $f5, $31, $54, $5c, $34, $08, $bb, $9d, $8e, $dc, $3f, $77, $64, $28
0dd98     FE E8 C6 92 
0dd9c     80 91 B9 F4 
0dda0     43 66 6E 56 
0dda4     34 02 DD DC | 	byte	$fe, $e8, $c6, $92, $80, $91, $b9, $f4, $43, $66, $6e, $56, $34, $02, $dd, $dc
0dda8     D9 D1 FB 2D 
0ddac     42 41 23 ED 
0ddb0     BE A9 B0 F8 
0ddb4     52 66 38 FD | 	byte	$d9, $d1, $fb, $2d, $42, $41, $23, $ed, $be, $a9, $b0, $f8, $52, $66, $38, $fd
0ddb8     F4 FA DB 9A 
0ddbc     85 9A D5 03 
0ddc0     43 52 5E 4D 
0ddc4     38 F6 CD EE | 	byte	$f4, $fa, $db, $9a, $85, $9a, $d5, $03, $43, $52, $5e, $4d, $38, $f6, $cd, $ee
0ddc8     F5 FE 07 21 
0ddcc     29 24 FB D1 
0ddd0     BE B1 D1 20 
0ddd4     68 61 19 D9 | 	byte	$f5, $fe, $07, $21, $29, $24, $fb, $d1, $be, $b1, $d1, $20, $68, $61, $19, $d9
0ddd8     DF 03 F9 AC 
0dddc     94 A4 E0 1E 
0dde0     37 48 56 40 
0dde4     2C E9 C1 EB | 	byte	$df, $03, $f9, $ac, $94, $a4, $e0, $1e, $37, $48, $56, $40, $2c, $e9, $c1, $eb
0dde8     FE 0E 2B 22 
0ddec     28 05 E4 B9 
0ddf0     BB BC F0 45 
0ddf4     7D 5D F4 BF | 	byte	$fe, $0e, $2b, $22, $28, $05, $e4, $b9, $bb, $bc, $f0, $45, $7d, $5d, $f4, $bf
0ddf8     C7 FA F9 CC 
0ddfc     A4 B4 DC 29 
0de00     30 39 4D 3A 
0de04     2F DB C1 DC | 	byte	$c7, $fa, $f9, $cc, $a4, $b4, $dc, $29, $30, $39, $4d, $3a, $2f, $db, $c1, $dc
0de08     03 16 43 36 
0de0c     28 F6 D5 9D 
0de10     AD C1 16 69 
0de14     7F 6B E5 AA | 	byte	$03, $16, $43, $36, $28, $f6, $d5, $9d, $ad, $c1, $16, $69, $7f, $6b, $e5, $aa
0de18     A3 EA E3 D1 
0de1c     BF D0 EB 2D 
0de20     3A 33 44 2F 
0de24     25 C7 CC DF | 	byte	$a3, $ea, $e3, $d1, $bf, $d0, $eb, $2d, $3a, $33, $44, $2f, $25, $c7, $cc, $df
0de28     05 27 4B 4E 
0de2c     2C EC BD 8D 
0de30     95 BD 23 7F 
0de34     7F 61 E7 AC | 	byte	$05, $27, $4b, $4e, $2c, $ec, $bd, $8d, $95, $bd, $23, $7f, $7f, $61, $e7, $ac
0de38     A0 CF C4 D0 
0de3c     CD ED 01 37 
0de40     31 37 3A 37 
0de44     0A B9 BB E7 | 	byte	$a0, $cf, $c4, $d0, $cd, $ed, $01, $37, $31, $37, $3a, $37, $0a, $b9, $bb, $e7
0de48     00 34 53 59 
0de4c     30 F2 AC 82 
0de50     83 B5 2A 7F 
0de54     7F 5F EB B6 | 	byte	$00, $34, $53, $59, $30, $f2, $ac, $82, $83, $b5, $2a, $7f, $7f, $5f, $eb, $b6
0de58     A9 C5 A2 B7 
0de5c     D3 00 1A 3F 
0de60     39 3D 3D 3D 
0de64     03 B2 B2 CE | 	byte	$a9, $c5, $a2, $b7, $d3, $00, $1a, $3f, $39, $3d, $3d, $3d, $03, $b2, $b2, $ce
0de68     FE 3F 53 5B 
0de6c     2C F9 A8 80 
0de70     83 B1 3A 7F 
0de74     7F 4C E0 B4 | 	byte	$fe, $3f, $53, $5b, $2c, $f9, $a8, $80, $83, $b1, $3a, $7f, $7f, $4c, $e0, $b4
0de78     A7 B2 9D AB 
0de7c     DC 15 41 54 
0de80     3D 3C 38 36 
0de84     FF B8 B6 CA | 	byte	$a7, $b2, $9d, $ab, $dc, $15, $41, $54, $3d, $3c, $38, $36, $ff, $b8, $b6, $ca
0de88     FD 40 50 56 
0de8c     23 F6 AA 81 
0de90     81 BB 38 7F 
0de94     7F 30 DB B3 | 	byte	$fd, $40, $50, $56, $23, $f6, $aa, $81, $81, $bb, $38, $7f, $7f, $30, $db, $b3
0de98     C3 AF 9D 98 
0de9c     D0 14 48 5C 
0dea0     38 39 30 3D 
0dea4     03 C3 B8 C5 | 	byte	$c3, $af, $9d, $98, $d0, $14, $48, $5c, $38, $39, $30, $3d, $03, $c3, $b8, $c5
0dea8     F4 35 4E 52 
0deac     2A EC B3 8B 
0deb0     85 CA 3B 7F 
0deb4     7F 32 DA BA | 	byte	$f4, $35, $4e, $52, $2a, $ec, $b3, $8b, $85, $ca, $3b, $7f, $7f, $32, $da, $ba
0deb8     CC B2 9C 95 
0debc     BF 08 4D 5D 
0dec0     41 3D 39 33 
0dec4     03 CF C1 C7 | 	byte	$cc, $b2, $9c, $95, $bf, $08, $4d, $5d, $41, $3d, $39, $33, $03, $cf, $c1, $c7
0dec8     F0 23 51 46 
0decc     26 EC B4 90 
0ded0     8B CD 55 7F 
0ded4     7F 30 E0 C6 | 	byte	$f0, $23, $51, $46, $26, $ec, $b4, $90, $8b, $cd, $55, $7f, $7f, $30, $e0, $c6
0ded8     CD BB A2 9E 
0dedc     BB 01 43 5E 
0dee0     4F 3E 3E 1F 
0dee4     F4 D2 D2 D1 | 	byte	$cd, $bb, $a2, $9e, $bb, $01, $43, $5e, $4f, $3e, $3e, $1f, $f4, $d2, $d2, $d1
0dee8     F9 1C 4A 3F 
0deec     17 E0 AE 92 
0def0     9E DC 59 7F 
0def4     69 27 E3 D6 | 	byte	$f9, $1c, $4a, $3f, $17, $e0, $ae, $92, $9e, $dc, $59, $7f, $69, $27, $e3, $d6
0def8     D6 BF A6 A6 
0defc     C6 FE 2E 4A 
0df00     55 4D 45 17 
0df04     ED DC DB D8 | 	byte	$d6, $bf, $a6, $a6, $c6, $fe, $2e, $4a, $55, $4d, $45, $17, $ed, $dc, $db, $d8
0df08     FA 19 43 33 
0df0c     12 DC B5 94 
0df10     B5 F3 59 7F 
0df14     45 11 DD DB | 	byte	$fa, $19, $43, $33, $12, $dc, $b5, $94, $b5, $f3, $59, $7f, $45, $11, $dd, $db
0df18     CE C7 A9 BB 
0df1c     D4 11 23 39 
0df20     4D 44 49 13 
0df24     F3 E1 E6 EA | 	byte	$ce, $c7, $a9, $bb, $d4, $11, $23, $39, $4d, $44, $49, $13, $f3, $e1, $e6, $ea
0df28     FF 17 34 26 
0df2c     01 D2 B2 9B 
0df30     C2 12 63 7B 
0df34     34 06 D0 D8 | 	byte	$ff, $17, $34, $26, $01, $d2, $b2, $9b, $c2, $12, $63, $7b, $34, $06, $d0, $d8
0df38     C1 C7 AF C9 
0df3c     E1 19 28 37 
0df40     41 41 3A 01 
0df44     F1 DA EA 02 | 	byte	$c1, $c7, $af, $c9, $e1, $19, $28, $37, $41, $41, $3a, $01, $f1, $da, $ea, $02
0df48     13 23 29 1B 
0df4c     EB C5 A1 95 
0df50     DA 39 7A 7A 
0df54     2E FD CD C9 | 	byte	$13, $23, $29, $1b, $eb, $c5, $a1, $95, $da, $39, $7a, $7a, $2e, $fd, $cd, $c9
0df58     B7 C2 BB D1 
0df5c     F5 1C 2D 3B 
0df60     38 3F 31 03 
0df64     ED DD E1 0A | 	byte	$b7, $c2, $bb, $d1, $f5, $1c, $2d, $3b, $38, $3f, $31, $03, $ed, $dd, $e1, $0a
0df68     16 2F 25 14 
0df6c     EA B7 98 92 
0df70     EA 46 7E 6D 
0df74     28 FB D0 C0 | 	byte	$16, $2f, $25, $14, $ea, $b7, $98, $92, $ea, $46, $7e, $6d, $28, $fb, $d0, $c0
0df78     AE C5 C7 DF 
0df7c     00 25 2E 3D 
0df80     29 35 24 02 
0df84     F1 DE E4 10 | 	byte	$ae, $c5, $c7, $df, $00, $25, $2e, $3d, $29, $35, $24, $02, $f1, $de, $e4, $10
0df88     16 2E 25 1A 
0df8c     E9 B9 97 98 
0df90     EA 49 74 59 
0df94     2B F4 DC BA | 	byte	$16, $2e, $25, $1a, $e9, $b9, $97, $98, $ea, $49, $74, $59, $2b, $f4, $dc, $ba
0df98     A7 BB CF EA 
0df9c     16 2C 31 3E 
0dfa0     27 2B 0B FD 
0dfa4     F2 DF F2 13 | 	byte	$a7, $bb, $cf, $ea, $16, $2c, $31, $3e, $27, $2b, $0b, $fd, $f2, $df, $f2, $13
0dfa8     22 30 1B 0C 
0dfac     E3 C1 9E B2 
0dfb0     EA 36 61 52 
0dfb4     2E 00 E0 BC | 	byte	$22, $30, $1b, $0c, $e3, $c1, $9e, $b2, $ea, $36, $61, $52, $2e, $00, $e0, $bc
0dfb8     BA C9 DB F1 
0dfbc     14 21 22 24 
0dfc0     10 13 0B 12 
0dfc4     06 EC F3 01 | 	byte	$ba, $c9, $db, $f1, $14, $21, $22, $24, $10, $13, $0b, $12, $06, $ec, $f3, $01
0dfc8     10 1B 18 0D 
0dfcc     F9 DF C1 C2 
0dfd0     E4 10 40 45 
0dfd4     2B FD DF C8 | 	byte	$10, $1b, $18, $0d, $f9, $df, $c1, $c2, $e4, $10, $40, $45, $2b, $fd, $df, $c8
0dfd8     D2 E3 EB FA 
0dfdc     0B 14 0C 0D 
0dfe0     07 0C 14 1E 
0dfe4     11 F3 F4 FF | 	byte	$d2, $e3, $eb, $fa, $0b, $14, $0c, $0d, $07, $0c, $14, $1e, $11, $f3, $f4, $ff
0dfe8     06 0E 10 0C 
0dfec     00 EB CE C6 
0dff0     E2 0A 2F 41 
0dff4     30 05 DD CC | 	byte	$06, $0e, $10, $0c, $00, $eb, $ce, $c6, $e2, $0a, $2f, $41, $30, $05, $dd, $cc
0dff8     DD F0 F0 FD 
0dffc     02 0F 05 0C 
0e000     01 10 18 1F 
0e004     11 F5 FD FD | 	byte	$dd, $f0, $f0, $fd, $02, $0f, $05, $0c, $01, $10, $18, $1f, $11, $f5, $fd, $fd
0e008     07 09 0A 07 
0e00c     FB E8 D3 C8 
0e010     E4 0A 28 3F 
0e014     31 13 E8 D3 | 	byte	$07, $09, $0a, $07, $fb, $e8, $d3, $c8, $e4, $0a, $28, $3f, $31, $13, $e8, $d3
0e018     DC EF F1 F4 
0e01c     FB 06 06 0A 
0e020     07 10 15 1A 
0e024     0C FB 01 08 | 	byte	$dc, $ef, $f1, $f4, $fb, $06, $06, $0a, $07, $10, $15, $1a, $0c, $fb, $01, $08
0e028     05 0B 07 0C 
0e02c     F7 DF CF CE 
0e030     ED 07 28 3D 
0e034     30 10 E6 D3 | 	byte	$05, $0b, $07, $0c, $f7, $df, $cf, $ce, $ed, $07, $28, $3d, $30, $10, $e6, $d3
0e038     DA EF F0 F9 
0e03c     02 09 03 0B 
0e040     02 0D 16 16 
0e044     09 FA 03 0C | 	byte	$da, $ef, $f0, $f9, $02, $09, $03, $0b, $02, $0d, $16, $16, $09, $fa, $03, $0c
0e048     01 0A 03 14 
0e04c     F3 DE CB D3 
0e050     F4 05 21 3A 
0e054     32 12 E8 DB | 	byte	$01, $0a, $03, $14, $f3, $de, $cb, $d3, $f4, $05, $21, $3a, $32, $12, $e8, $db
0e058     DD EB EB F1 
0e05c     FF 09 06 14 
0e060     0D 16 15 10 
0e064     FD EA FC 06 | 	byte	$dd, $eb, $eb, $f1, $ff, $09, $06, $14, $0d, $16, $15, $10, $fd, $ea, $fc, $06
0e068     03 09 0F 16 
0e06c     FC E4 D5 DD 
0e070     F4 03 1E 31 
0e074     25 12 F3 E8 | 	byte	$03, $09, $0f, $16, $fc, $e4, $d5, $dd, $f4, $03, $1e, $31, $25, $12, $f3, $e8
0e078     DF E6 E6 E6 
0e07c     F6 04 15 1F 
0e080     1B 14 0D 08 
0e084     F2 E4 F7 04 | 	byte	$df, $e6, $e6, $e6, $f6, $04, $15, $1f, $1b, $14, $0d, $08, $f2, $e4, $f7, $04
0e088     05 0F 13 16 
0e08c     FD E3 D9 DA 
0e090     F7 FD 1B 2B 
0e094     27 10 F8 E8 | 	byte	$05, $0f, $13, $16, $fd, $e3, $d9, $da, $f7, $fd, $1b, $2b, $27, $10, $f8, $e8
0e098     DE E2 E6 EA 
0e09c     F4 02 17 28 
0e0a0     1D 14 09 0D 
0e0a4     FC EB F2 FC | 	byte	$de, $e2, $e6, $ea, $f4, $02, $17, $28, $1d, $14, $09, $0d, $fc, $eb, $f2, $fc
0e0a8     FB 09 0D 0F 
0e0ac     FE EF E3 E7 
0e0b0     F7 FF 13 23 
0e0b4     20 13 FF EA | 	byte	$fb, $09, $0d, $0f, $fe, $ef, $e3, $e7, $f7, $ff, $13, $23, $20, $13, $ff, $ea
0e0b8     E1 E1 E5 E8 
0e0bc     ED FF 14 28 
0e0c0     1C 18 07 0A 
0e0c4     F7 E4 EF FB | 	byte	$e1, $e1, $e5, $e8, $ed, $ff, $14, $28, $1c, $18, $07, $0a, $f7, $e4, $ef, $fb
0e0c8     05 14 15 0C 
0e0cc     F9 EB E2 E6 
0e0d0     F5 FF 14 2A 
0e0d4     27 17 FE EE | 	byte	$05, $14, $15, $0c, $f9, $eb, $e2, $e6, $f5, $ff, $14, $2a, $27, $17, $fe, $ee
0e0d8     E5 E6 E3 E2 
0e0dc     E9 F3 10 20 
0e0e0     21 1E 17 13 
0e0e4     F7 E0 E7 F6 | 	byte	$e5, $e6, $e3, $e2, $e9, $f3, $10, $20, $21, $1e, $17, $13, $f7, $e0, $e7, $f6
0e0e8     03 16 1B 13 
0e0ec     00 EF E0 E3 
0e0f0     EA F0 10 2C 
0e0f4     2B 12 FE EB | 	byte	$03, $16, $1b, $13, $00, $ef, $e0, $e3, $ea, $f0, $10, $2c, $2b, $12, $fe, $eb
0e0f8     F0 F1 E6 E4 
0e0fc     E8 F8 0B 19 
0e100     18 1F 22 17 
0e104     FB E0 E0 EA | 	byte	$f0, $f1, $e6, $e4, $e8, $f8, $0b, $19, $18, $1f, $22, $17, $fb, $e0, $e0, $ea
0e108     FC 17 1F 1B 
0e10c     02 F5 E5 E9 
0e110     E9 F2 0E 25 
0e114     1E 0A F7 EA | 	byte	$fc, $17, $1f, $1b, $02, $f5, $e5, $e9, $e9, $f2, $0e, $25, $1e, $0a, $f7, $ea
0e118     F8 00 F9 F5 
0e11c     F6 00 05 08 
0e120     FE 07 0A 11 
0e124     04 F8 EC EC | 	byte	$f8, $00, $f9, $f5, $f6, $00, $05, $08, $fe, $07, $0a, $11, $04, $f8, $ec, $ec
0e128     FA 11 17 0D 
0e12c     FA F8 F6 FB 
0e130     F4 F6 03 10 
0e134     07 FB F2 F0 | 	byte	$fa, $11, $17, $0d, $fa, $f8, $f6, $fb, $f4, $f6, $03, $10, $07, $fb, $f2, $f0
0e138     FE 11 0D 08 
0e13c     05 06 08 01 
0e140     F2 F4 FC 0B 
0e144     09 FF F0 EA | 	byte	$fe, $11, $0d, $08, $05, $06, $08, $01, $f2, $f4, $fc, $0b, $09, $ff, $f0, $ea
0e148     FB 0F 11 09 
0e14c     FA FC 01 04 
0e150     FB F5 FF 05 
0e154     02 FD F2 F5 | 	byte	$fb, $0f, $11, $09, $fa, $fc, $01, $04, $fb, $f5, $ff, $05, $02, $fd, $f2, $f5
0e158     00 15 17 0F 
0e15c     09 07 01 FA 
0e160     EB ED F9 0B 
0e164     12 07 F4 E4 | 	byte	$00, $15, $17, $0f, $09, $07, $01, $fa, $eb, $ed, $f9, $0b, $12, $07, $f4, $e4
0e168     F8 08 07 03 
0e16c     FE 06 0C 09 
0e170     FA F1 F8 FB 
0e174     FE 00 F5 FA | 	byte	$f8, $08, $07, $03, $fe, $06, $0c, $09, $fa, $f1, $f8, $fb, $fe, $00, $f5, $fa
0e178     06 12 19 13 
0e17c     0A 03 FD F4 
0e180     EC EF FB 08 
0e184     10 06 F5 E6 | 	byte	$06, $12, $19, $13, $0a, $03, $fd, $f4, $ec, $ef, $fb, $08, $10, $06, $f5, $e6
0e188     F4 02 05 05 
0e18c     08 0C 12 0C 
0e190     F8 EE EE F6 
0e194     FA 03 FC 02 | 	byte	$f4, $02, $05, $05, $08, $0c, $12, $0c, $f8, $ee, $ee, $f6, $fa, $03, $fc, $02
0e198     09 0D 0F 0D 
0e19c     09 01 FF F4 
0e1a0     F2 F6 FF 03 
0e1a4     09 00 F8 EC | 	byte	$09, $0d, $0f, $0d, $09, $01, $ff, $f4, $f2, $f6, $ff, $03, $09, $00, $f8, $ec
0e1a8     F7 01 03 03 
0e1ac     05 0E 0F 06 
0e1b0     F8 F0 EF F4 
0e1b4     FB 00 01 FE | 	byte	$f7, $01, $03, $03, $05, $0e, $0f, $06, $f8, $f0, $ef, $f4, $fb, $00, $01, $fe
0e1b8     09 09 13 13 
0e1bc     0E 05 FB F2 
0e1c0     EF F7 04 0B 
0e1c4     0C FF F1 EF | 	byte	$09, $09, $13, $13, $0e, $05, $fb, $f2, $ef, $f7, $04, $0b, $0c, $ff, $f1, $ef
0e1c8     F6 F9 FE 04 
0e1cc     0D 15 13 06 
0e1d0     FB F1 EE E8 
0e1d4     F6 FC 02 00 | 	byte	$f6, $f9, $fe, $04, $0d, $15, $13, $06, $fb, $f1, $ee, $e8, $f6, $fc, $02, $00
0e1d8     06 0C 18 19 
0e1dc     13 07 F6 ED 
0e1e0     ED FB 09 15 
0e1e4     10 00 EE EA | 	byte	$06, $0c, $18, $19, $13, $07, $f6, $ed, $ed, $fb, $09, $15, $10, $00, $ee, $ea
0e1e8     EF EC F3 00 
0e1ec     10 18 1B 0C 
0e1f0     01 F9 F0 E6 
0e1f4     F0 F5 FB 05 | 	byte	$ef, $ec, $f3, $00, $10, $18, $1b, $0c, $01, $f9, $f0, $e6, $f0, $f5, $fb, $05
0e1f8     06 10 14 18 
0e1fc     10 07 F1 E5 
0e200     ED FE 11 19 
0e204     12 00 F0 E7 | 	byte	$06, $10, $14, $18, $10, $07, $f1, $e5, $ed, $fe, $11, $19, $12, $00, $f0, $e7
0e208     EA E9 EF 03 
0e20c     15 25 20 12 
0e210     01 F3 E3 DA 
0e214     E2 F1 FD 11 | 	byte	$ea, $e9, $ef, $03, $15, $25, $20, $12, $01, $f3, $e3, $da, $e2, $f1, $fd, $11
0e218     17 1E 1E 19 
0e21c     0C FB E6 DC 
0e220     E7 FE 15 20 
0e224     16 05 EF E8 | 	byte	$17, $1e, $1e, $19, $0c, $fb, $e6, $dc, $e7, $fe, $15, $20, $16, $05, $ef, $e8
0e228     E6 E6 EC FC 
0e22c     10 29 26 1B 
0e230     07 F7 E3 DA 
0e234     D8 E7 FA 0F | 	byte	$e6, $e6, $ec, $fc, $10, $29, $26, $1b, $07, $f7, $e3, $da, $d8, $e7, $fa, $0f
0e238     1E 20 1D 15 
0e23c     0A FC ED E5 
0e240     ED 04 15 1D 
0e244     0E F7 E9 EF | 	byte	$1e, $20, $1d, $15, $0a, $fc, $ed, $e5, $ed, $04, $15, $1d, $0e, $f7, $e9, $ef
0e248     EF EE EC F3 
0e24c     06 24 26 1E 
0e250     0E FD E5 DD 
0e254     D9 E1 F7 16 | 	byte	$ef, $ee, $ec, $f3, $06, $24, $26, $1e, $0e, $fd, $e5, $dd, $d9, $e1, $f7, $16
0e258     1F 24 1A 0E 
0e25c     07 F8 EE EB 
0e260     F3 06 1B 18 
0e264     07 EF E6 EC | 	byte	$1f, $24, $1a, $0e, $07, $f8, $ee, $eb, $f3, $06, $1b, $18, $07, $ef, $e6, $ec
0e268     ED EB ED F5 
0e26c     0A 26 2C 22 
0e270     0E F8 E5 DD 
0e274     D9 E0 FB 16 | 	byte	$ed, $eb, $ed, $f5, $0a, $26, $2c, $22, $0e, $f8, $e5, $dd, $d9, $e0, $fb, $16
0e278     1D 1F 16 0D 
0e27c     05 F7 EB EE 
0e280     F7 06 17 0F 
0e284     02 F1 F5 FC | 	byte	$1d, $1f, $16, $0d, $05, $f7, $eb, $ee, $f7, $06, $17, $0f, $02, $f1, $f5, $fc
0e288     F8 EC E8 EF 
0e28c     04 18 24 21 
0e290     13 01 EC E3 
0e294     DD E4 F7 12 | 	byte	$f8, $ec, $e8, $ef, $04, $18, $24, $21, $13, $01, $ec, $e3, $dd, $e4, $f7, $12
0e298     1A 1A 1A 0E 
0e29c     03 F2 EA F2 
0e2a0     FE 0D 16 0E 
0e2a4     01 F0 F8 F9 | 	byte	$1a, $1a, $1a, $0e, $03, $f2, $ea, $f2, $fe, $0d, $16, $0e, $01, $f0, $f8, $f9
0e2a8     F7 EB E8 EF 
0e2ac     09 11 1C 1B 
0e2b0     10 00 F1 E7 
0e2b4     E4 ED 00 0F | 	byte	$f7, $eb, $e8, $ef, $09, $11, $1c, $1b, $10, $00, $f1, $e7, $e4, $ed, $00, $0f
0e2b8     17 14 11 0D 
0e2bc     01 F7 ED F3 
0e2c0     04 11 10 05 
0e2c4     F8 F4 FE FD | 	byte	$17, $14, $11, $0d, $01, $f7, $ed, $f3, $04, $11, $10, $05, $f8, $f4, $fe, $fd
0e2c8     F7 EA E9 F3 
0e2cc     0B 0F 12 14 
0e2d0     10 FE F1 E5 
0e2d4     E5 F2 06 14 | 	byte	$f7, $ea, $e9, $f3, $0b, $0f, $12, $14, $10, $fe, $f1, $e5, $e5, $f2, $06, $14
0e2d8     18 11 09 0B 
0e2dc     01 FB F0 F4 
0e2e0     05 16 0E 03 
0e2e4     F2 F4 FF FE | 	byte	$18, $11, $09, $0b, $01, $fb, $f0, $f4, $05, $16, $0e, $03, $f2, $f4, $ff, $fe
0e2e8     F7 EB F0 FC 
0e2ec     11 10 06 04 
0e2f0     05 F7 F4 EA 
0e2f4     ED FA 0E 17 | 	byte	$f7, $eb, $f0, $fc, $11, $10, $06, $04, $05, $f7, $f4, $ea, $ed, $fa, $0e, $17
0e2f8     12 0A 02 0A 
0e2fc     03 FD F2 F7 
0e300     08 16 0D FD 
0e304     EF F3 05 FD | 	byte	$12, $0a, $02, $0a, $03, $fd, $f2, $f7, $08, $16, $0d, $fd, $ef, $f3, $05, $fd
0e308     F4 EF F8 0D 
0e30c     17 10 FF F6 
0e310     F6 F0 EC EA 
0e314     F4 0B 19 18 | 	byte	$f4, $ef, $f8, $0d, $17, $10, $ff, $f6, $f6, $f0, $ec, $ea, $f4, $0b, $19, $18
0e318     0F 04 04 08 
0e31c     05 FA F2 F9 
0e320     09 14 0C FC 
0e324     F2 F4 00 FE | 	byte	$0f, $04, $04, $08, $05, $fa, $f2, $f9, $09, $14, $0c, $fc, $f2, $f4, $00, $fe
0e328     ED EE F7 12 
0e32c     16 0F 01 F6 
0e330     F1 EF E8 E8 
0e334     F9 12 21 17 | 	byte	$ed, $ee, $f7, $12, $16, $0f, $01, $f6, $f1, $ef, $e8, $e8, $f9, $12, $21, $17
0e338     0A 00 02 07 
0e33c     04 FC F6 02 
0e340     0C 0D 03 F8 
0e344     F0 FD FF FD | 	byte	$0a, $00, $02, $07, $04, $fc, $f6, $02, $0c, $0d, $03, $f8, $f0, $fd, $ff, $fd
0e348     F2 F4 FB 0E 
0e34c     0E 05 FF FB 
0e350     F5 F4 EF EC 
0e354     00 17 19 0A | 	byte	$f2, $f4, $fb, $0e, $0e, $05, $ff, $fb, $f5, $f4, $ef, $ec, $00, $17, $19, $0a
0e358     FE FC 06 0A 
0e35c     0A 05 00 05 
0e360     0B 03 F8 EF 
0e364     F3 04 03 FD | 	byte	$fe, $fc, $06, $0a, $0a, $05, $00, $05, $0b, $03, $f8, $ef, $f3, $04, $03, $fd
0e368     F6 F8 01 0D 
0e36c     08 FD FB FB 
0e370     F2 EF EF F1 
0e374     05 1C 1B 0E | 	byte	$f6, $f8, $01, $0d, $08, $fd, $fb, $fb, $f2, $ef, $ef, $f1, $05, $1c, $1b, $0e
0e378     FF FA 04 05 
0e37c     08 FE 00 08 
0e380     12 06 F8 EA 
0e384     EE FF 01 F5 | 	byte	$ff, $fa, $04, $05, $08, $fe, $00, $08, $12, $06, $f8, $ea, $ee, $ff, $01, $f5
0e388     F2 FB 11 19 
0e38c     0D 02 FB F9 
0e390     ED E8 E5 F4 
0e394     08 1D 18 0F | 	byte	$f2, $fb, $11, $19, $0d, $02, $fb, $f9, $ed, $e8, $e5, $f4, $08, $1d, $18, $0f
0e398     01 FC 04 04 
0e39c     02 FB 03 0A 
0e3a0     13 06 FA EB 
0e3a4     F4 FD FD F0 | 	byte	$01, $fc, $04, $04, $02, $fb, $03, $0a, $13, $06, $fa, $eb, $f4, $fd, $fd, $f0
0e3a8     EE F8 11 18 
0e3ac     0F 06 03 FB 
0e3b0     EB E7 E3 F5 
0e3b4     08 14 0E 08 | 	byte	$ee, $f8, $11, $18, $0f, $06, $03, $fb, $eb, $e7, $e3, $f5, $08, $14, $0e, $08
0e3b8     05 08 10 0B 
0e3bc     03 F9 FF 09 
0e3c0     0B FD F9 EF 
0e3c4     00 01 FF F3 | 	byte	$05, $08, $10, $0b, $03, $f9, $ff, $09, $0b, $fd, $f9, $ef, $00, $01, $ff, $f3
0e3c8     F0 F5 06 0A 
0e3cc     06 07 0D 04 
0e3d0     F4 E8 E7 F6 
0e3d4     08 0A 01 01 | 	byte	$f0, $f5, $06, $0a, $06, $07, $0d, $04, $f4, $e8, $e7, $f6, $08, $0a, $01, $01
0e3d8     07 13 17 11 
0e3dc     02 FC FE 05 
0e3e0     FE F5 EF F1 
0e3e4     03 07 03 FB | 	byte	$07, $13, $17, $11, $02, $fc, $fe, $05, $fe, $f5, $ef, $f1, $03, $07, $03, $fb
0e3e8     F9 FA FE FA 
0e3ec     FE 05 13 0A 
0e3f0     FA E9 E9 FD 
0e3f4     0C 0D FD FA | 	byte	$f9, $fa, $fe, $fa, $fe, $05, $13, $0a, $fa, $e9, $e9, $fd, $0c, $0d, $fd, $fa
0e3f8     06 14 14 0B 
0e3fc     FC FC FF 0A 
0e400     01 FA ED F5 
0e404     05 02 FB F7 | 	byte	$06, $14, $14, $0b, $fc, $fc, $ff, $0a, $01, $fa, $ed, $f5, $05, $02, $fb, $f7
0e408     FA 03 FF F5 
0e40c     F9 03 11 0A 
0e410     FE EF F0 FF 
0e414     09 06 F9 F8 | 	byte	$fa, $03, $ff, $f5, $f9, $03, $11, $0a, $fe, $ef, $f0, $ff, $09, $06, $f9, $f8
0e418     0A 19 1A 0F 
0e41c     FA F6 FA 03 
0e420     FB FB F3 FC 
0e424     0A 06 FD F8 | 	byte	$0a, $19, $1a, $0f, $fa, $f6, $fa, $03, $fb, $fb, $f3, $fc, $0a, $06, $fd, $f8
0e428     F6 04 FE F3 
0e42c     F5 02 0A 03 
0e430     FB F2 FA 05 
0e434     0E 04 FC F9 | 	byte	$f6, $04, $fe, $f3, $f5, $02, $0a, $03, $fb, $f2, $fa, $05, $0e, $04, $fc, $f9
0e438     09 15 15 0B 
0e43c     F8 F8 FB 02 
0e440     FC FE F5 00 
0e444     05 06 FA F6 | 	byte	$09, $15, $15, $0b, $f8, $f8, $fb, $02, $fc, $fe, $f5, $00, $05, $06, $fa, $f6
0e448     F7 06 03 F9 
0e44c     F9 03 04 FD 
0e450     F6 F0 FF 05 
0e454     0F 04 FF FE | 	byte	$f7, $06, $03, $f9, $f9, $03, $04, $fd, $f6, $f0, $ff, $05, $0f, $04, $ff, $fe
0e458     0F 14 11 01 
0e45c     F3 F4 FC FF 
0e460     FE 01 01 0C 
0e464     0B 04 F8 F1 | 	byte	$0f, $14, $11, $01, $f3, $f4, $fc, $ff, $fe, $01, $01, $0c, $0b, $04, $f8, $f1
0e468     F1 FD FD FE 
0e46c     FE 09 04 FC 
0e470     F7 F5 00 03 
0e474     02 F9 FE 08 | 	byte	$f1, $fd, $fd, $fe, $fe, $09, $04, $fc, $f7, $f5, $00, $03, $02, $f9, $fe, $08
0e478     16 15 15 F9 
0e47c     F4 EF FB FA 
0e480     01 02 09 0F 
0e484     0B 01 F8 EF | 	byte	$16, $15, $15, $f9, $f4, $ef, $fb, $fa, $01, $02, $09, $0f, $0b, $01, $f8, $ef
0e488     F1 F7 F7 02 
0e48c     04 0B 00 FE 
0e490     F9 02 01 FF 
0e494     F8 F4 FF 11 | 	byte	$f1, $f7, $f7, $02, $04, $0b, $00, $fe, $f9, $02, $01, $ff, $f8, $f4, $ff, $11
0e498     1F 1C 11 F7 
0e49c     EF E9 F3 F4 
0e4a0     03 03 11 14 
0e4a4     0E 00 FA F1 | 	byte	$1f, $1c, $11, $f7, $ef, $e9, $f3, $f4, $03, $03, $11, $14, $0e, $00, $fa, $f1
0e4a8     F2 F0 F3 00 
0e4ac     0B 0D 02 03 
0e4b0     FA 03 FC FA 
0e4b4     EB EE FC 17 | 	byte	$f2, $f0, $f3, $00, $0b, $0d, $02, $03, $fa, $03, $fc, $fa, $eb, $ee, $fc, $17
0e4b8     25 26 14 F9 
0e4bc     EE EA EE EC 
0e4c0     FA 00 15 1B 
0e4c4     17 02 F6 F1 | 	byte	$25, $26, $14, $f9, $ee, $ea, $ee, $ec, $fa, $00, $15, $1b, $17, $02, $f6, $f1
0e4c8     F1 ED EE 01 
0e4cc     0F 0E 04 FD 
0e4d0     F5 FF FA F9 
0e4d4     E9 EC 00 1E | 	byte	$f1, $ed, $ee, $01, $0f, $0e, $04, $fd, $f5, $ff, $fa, $f9, $e9, $ec, $00, $1e
0e4d8     2B 2A 11 F7 
0e4dc     ED EB EB E6 
0e4e0     F3 03 18 21 
0e4e4     15 02 F8 F8 | 	byte	$2b, $2a, $11, $f7, $ed, $eb, $eb, $e6, $f3, $03, $18, $21, $15, $02, $f8, $f8
0e4e8     FB EE EF F8 
0e4ec     0B 06 01 F9 
0e4f0     F6 FF 01 FD 
0e4f4     EF F0 01 1B | 	byte	$fb, $ee, $ef, $f8, $0b, $06, $01, $f9, $f6, $ff, $01, $fd, $ef, $f0, $01, $1b
0e4f8     29 24 0E F9 
0e4fc     EF F0 E8 EC 
0e500     F0 07 1C 20 
0e504     16 00 F7 F8 | 	byte	$29, $24, $0e, $f9, $ef, $f0, $e8, $ec, $f0, $07, $1c, $20, $16, $00, $f7, $f8
0e508     FB F2 F2 F6 
0e50c     05 06 04 FA 
0e510     F9 FA FB F5 
0e514     EB F2 05 20 | 	byte	$fb, $f2, $f2, $f6, $05, $06, $04, $fa, $f9, $fa, $fb, $f5, $eb, $f2, $05, $20
0e518     2C 25 0D FB 
0e51c     EC EC E0 EA 
0e520     F1 08 1E 28 
0e524     16 03 F0 EF | 	byte	$2c, $25, $0d, $fb, $ec, $ec, $e0, $ea, $f1, $08, $1e, $28, $16, $03, $f0, $ef
0e528     F0 EE F3 FD 
0e52c     0C 0C 0B FD 
0e530     FD F5 F6 F0 
0e534     EB F5 0C 1F | 	byte	$f0, $ee, $f3, $fd, $0c, $0c, $0b, $fd, $fd, $f5, $f6, $f0, $eb, $f5, $0c, $1f
0e538     2B 1C 06 FB 
0e53c     F0 F0 E3 EB 
0e540     F5 08 1A 21 
0e544     15 08 F7 F0 | 	byte	$2b, $1c, $06, $fb, $f0, $f0, $e3, $eb, $f5, $08, $1a, $21, $15, $08, $f7, $f0
0e548     EC EE F3 FE 
0e54c     06 0A 09 01 
0e550     00 F4 F5 ED 
0e554     F1 F6 10 20 | 	byte	$ec, $ee, $f3, $fe, $06, $0a, $09, $01, $00, $f4, $f5, $ed, $f1, $f6, $10, $20
0e558     28 1A 06 F9 
0e55c     F5 EC E2 E6 
0e560     F1 08 1A 1C 
0e564     17 0E 01 F1 | 	byte	$28, $1a, $06, $f9, $f5, $ec, $e2, $e6, $f1, $08, $1a, $1c, $17, $0e, $01, $f1
0e568     E3 E7 F0 01 
0e56c     08 0D 0B 06 
0e570     FE F5 F0 E8 
0e574     F0 FC 16 1E | 	byte	$e3, $e7, $f0, $01, $08, $0d, $0b, $06, $fe, $f5, $f0, $e8, $f0, $fc, $16, $1e
0e578     24 14 06 FA 
0e57c     F8 EA E7 E8 
0e580     F3 0B 14 13 
0e584     0F 0F 09 FF | 	byte	$24, $14, $06, $fa, $f8, $ea, $e7, $e8, $f3, $0b, $14, $13, $0f, $0f, $09, $ff
0e588     EA EA F0 01 
0e58c     06 09 04 02 
0e590     02 FC F5 E9 
0e594     EC FA 0F 14 | 	byte	$ea, $ea, $f0, $01, $06, $09, $04, $02, $02, $fc, $f5, $e9, $ec, $fa, $0f, $14
0e598     1B 0E 0D 03 
0e59c     FE EE E9 EC 
0e5a0     F7 0D 12 09 
0e5a4     09 07 08 01 | 	byte	$1b, $0e, $0d, $03, $fe, $ee, $e9, $ec, $f7, $0d, $12, $09, $09, $07, $08, $01
0e5a8     ED E8 F0 02 
0e5ac     08 09 FE 02 
0e5b0     FE 00 F9 EF 
0e5b4     EE 02 14 1A | 	byte	$ed, $e8, $f0, $02, $08, $09, $fe, $02, $fe, $00, $f9, $ef, $ee, $02, $14, $1a
0e5b8     1A 0C 08 FE 
0e5bc     F5 E2 E5 F0 
0e5c0     06 14 1A 06 
0e5c4     09 01 04 FA | 	byte	$1a, $0c, $08, $fe, $f5, $e2, $e5, $f0, $06, $14, $1a, $06, $09, $01, $04, $fa
0e5c8     EC E6 F1 03 
0e5cc     0D 0C 02 04 
0e5d0     F9 FE F1 F1 
0e5d4     F3 09 14 1B | 	byte	$ec, $e6, $f1, $03, $0d, $0c, $02, $04, $f9, $fe, $f1, $f1, $f3, $09, $14, $1b
0e5d8     16 0A 06 FD 
0e5dc     EE E0 EA F4 
0e5e0     0E 18 19 0B 
0e5e4     08 00 FB F0 | 	byte	$16, $0a, $06, $fd, $ee, $e0, $ea, $f4, $0e, $18, $19, $0b, $08, $00, $fb, $f0
0e5e8     E9 E7 F3 05 
0e5ec     0F 10 08 07 
0e5f0     F9 F2 EA ED 
0e5f4     F5 0B 14 1F | 	byte	$e9, $e7, $f3, $05, $0f, $10, $08, $07, $f9, $f2, $ea, $ed, $f5, $0b, $14, $1f
0e5f8     18 0F 02 F6 
0e5fc     E4 E0 E8 F9 
0e600     10 1F 1C 15 
0e604     0B 02 F6 E6 | 	byte	$18, $0f, $02, $f6, $e4, $e0, $e8, $f9, $10, $1f, $1c, $15, $0b, $02, $f6, $e6
0e608     E2 E8 FB 08 
0e60c     14 0E 0E 03 
0e610     F8 ED E5 EA 
0e614     FC 0E 18 23 | 	byte	$e2, $e8, $fb, $08, $14, $0e, $0e, $03, $f8, $ed, $e5, $ea, $fc, $0e, $18, $23
0e618     1E 13 00 F2 
0e61c     DE DF E8 00 
0e620     14 1E 14 10 
0e624     09 FE F1 E1 | 	byte	$1e, $13, $00, $f2, $de, $df, $e8, $00, $14, $1e, $14, $10, $09, $fe, $f1, $e1
0e628     E2 EC 04 0A 
0e62c     16 0F 0E FE 
0e630     F6 EE E6 EE 
0e634     00 12 18 1B | 	byte	$e2, $ec, $04, $0a, $16, $0f, $0e, $fe, $f6, $ee, $e6, $ee, $00, $12, $18, $1b
0e638     15 10 FC F2 
0e63c     DF E6 ED 08 
0e640     16 1A 12 10 
0e644     0A FD ED DC | 	byte	$15, $10, $fc, $f2, $df, $e6, $ed, $08, $16, $1a, $12, $10, $0a, $fd, $ed, $dc
0e648     E0 F0 0A 0F 
0e64c     1B 12 13 FA 
0e650     EC E3 E0 ED 
0e654     03 17 25 20 | 	byte	$e0, $f0, $0a, $0f, $1b, $12, $13, $fa, $ec, $e3, $e0, $ed, $03, $17, $25, $20
0e658     15 0B F4 E8 
0e65c     DA E9 F5 0E 
0e660     19 1A 14 0F 
0e664     06 F8 E4 DE | 	byte	$15, $0b, $f4, $e8, $da, $e9, $f5, $0e, $19, $1a, $14, $0f, $06, $f8, $e4, $de
0e668     E1 F5 0B 14 
0e66c     1A 12 0C F4 
0e670     E8 E0 E6 F3 
0e674     0D 19 28 1E | 	byte	$e1, $f5, $0b, $14, $1a, $12, $0c, $f4, $e8, $e0, $e6, $f3, $0d, $19, $28, $1e
0e678     13 01 EF E0 
0e67c     DF F0 01 14 
0e680     19 18 0E 08 
0e684     FC F5 E5 E4 | 	byte	$13, $01, $ef, $e0, $df, $f0, $01, $14, $19, $18, $0e, $08, $fc, $f5, $e5, $e4
0e688     E9 FF 09 15 
0e68c     16 12 06 F2 
0e690     E6 DF EA F9 
0e694     14 1B 24 1B | 	byte	$e9, $ff, $09, $15, $16, $12, $06, $f2, $e6, $df, $ea, $f9, $14, $1b, $24, $1b
0e698     0F F5 EB DD 
0e69c     E5 F7 09 16 
0e6a0     1A 16 0F 06 
0e6a4     FD F3 E8 E7 | 	byte	$0f, $f5, $eb, $dd, $e5, $f7, $09, $16, $1a, $16, $0f, $06, $fd, $f3, $e8, $e7
0e6a8     ED 00 04 11 
0e6ac     11 0E 01 F5 
0e6b0     EB E5 EE 02 
0e6b4     11 1E 1D 16 | 	byte	$ed, $00, $04, $11, $11, $0e, $01, $f5, $eb, $e5, $ee, $02, $11, $1e, $1d, $16
0e6b8     0D F2 EB DF 
0e6bc     E9 F8 06 11 
0e6c0     16 14 15 09 
0e6c4     FF F3 EA E6 | 	byte	$0d, $f2, $eb, $df, $e9, $f8, $06, $11, $16, $14, $15, $09, $ff, $f3, $ea, $e6
0e6c8     EE FE 03 10 
0e6cc     0D 0F FD F0 
0e6d0     E8 E9 F0 08 
0e6d4     10 1C 18 12 | 	byte	$ee, $fe, $03, $10, $0d, $0f, $fd, $f0, $e8, $e9, $f0, $08, $10, $1c, $18, $12
0e6d8     0B F4 EE E2 
0e6dc     ED F6 07 0C 
0e6e0     12 11 15 0A 
0e6e4     FE F0 EC EA | 	byte	$0b, $f4, $ee, $e2, $ed, $f6, $07, $0c, $12, $11, $15, $0a, $fe, $f0, $ec, $ea
0e6e8     F6 01 06 0F 
0e6ec     0C 0D FB EF 
0e6f0     E7 EE FB 11 
0e6f4     16 17 12 07 | 	byte	$f6, $01, $06, $0f, $0c, $0d, $fb, $ef, $e7, $ee, $fb, $11, $16, $17, $12, $07
0e6f8     FC F0 E7 E8 
0e6fc     F6 02 11 15 
0e700     11 0D 0A 03 
0e704     F7 EA EC EF | 	byte	$fc, $f0, $e7, $e8, $f6, $02, $11, $15, $11, $0d, $0a, $03, $f7, $ea, $ec, $ef
0e708     01 05 0B 0D 
0e70c     09 06 F7 E9 
0e710     E6 F3 06 1C 
0e714     1D 16 09 FF | 	byte	$01, $05, $0b, $0d, $09, $06, $f7, $e9, $e6, $f3, $06, $1c, $1d, $16, $09, $ff
0e718     EF EA E5 F1 
0e71c     01 0E 13 14 
0e720     0D 0B 01 FB 
0e724     F3 E8 EE F4 | 	byte	$ef, $ea, $e5, $f1, $01, $0e, $13, $14, $0d, $0b, $01, $fb, $f3, $e8, $ee, $f4
0e728     02 06 11 11 
0e72c     10 FF EF E4 
0e730     E5 F0 0A 1F 
0e734     25 1C 09 F7 | 	byte	$02, $06, $11, $11, $10, $ff, $ef, $e4, $e5, $f0, $0a, $1f, $25, $1c, $09, $f7
0e738     E1 E1 E2 F4 
0e73c     07 1B 19 18 
0e740     0A 07 F9 F6 
0e744     F3 ED F4 FA | 	byte	$e1, $e1, $e2, $f4, $07, $1b, $19, $18, $0a, $07, $f9, $f6, $f3, $ed, $f4, $fa
0e748     02 04 0F 0E 
0e74c     13 FC F3 EA 
0e750     E9 F0 08 1B 
0e754     24 1C 08 F6 | 	byte	$02, $04, $0f, $0e, $13, $fc, $f3, $ea, $e9, $f0, $08, $1b, $24, $1c, $08, $f6
0e758     E2 E0 DE F7 
0e75c     09 1F 1F 15 
0e760     03 FC F3 F0 
0e764     F2 F5 FA 01 | 	byte	$e2, $e0, $de, $f7, $09, $1f, $1f, $15, $03, $fc, $f3, $f0, $f2, $f5, $fa, $01
0e768     04 03 11 0E 
0e76c     12 FD F1 E9 
0e770     EA F2 07 18 
0e774     21 19 05 F3 | 	byte	$04, $03, $11, $0e, $12, $fd, $f1, $e9, $ea, $f2, $07, $18, $21, $19, $05, $f3
0e778     E6 DF E2 F8 
0e77c     0E 20 24 16 
0e780     04 F7 EE ED 
0e784     ED FA FD 04 | 	byte	$e6, $df, $e2, $f8, $0e, $20, $24, $16, $04, $f7, $ee, $ed, $ed, $fa, $fd, $04
0e788     02 07 0D 0F 
0e78c     0E FB EE EC 
0e790     F1 FD 10 19 
0e794     19 0D 01 EB | 	byte	$02, $07, $0d, $0f, $0e, $fb, $ee, $ec, $f1, $fd, $10, $19, $19, $0d, $01, $eb
0e798     E5 E0 EA F9 
0e79c     0F 1F 28 1C 
0e7a0     07 F7 EC E8 
0e7a4     EB F8 FC 01 | 	byte	$e5, $e0, $ea, $f9, $0f, $1f, $28, $1c, $07, $f7, $ec, $e8, $eb, $f8, $fc, $01
0e7a8     02 0A 0E 12 
0e7ac     07 F7 EC E5 
0e7b0     F0 03 15 1B 
0e7b4     16 08 FD EB | 	byte	$02, $0a, $0e, $12, $07, $f7, $ec, $e5, $f0, $03, $15, $1b, $16, $08, $fd, $eb
0e7b8     E6 E3 EC FD 
0e7bc     10 1F 22 1A 
0e7c0     0B F8 F0 EE 
0e7c4     EF F6 FD FE | 	byte	$e6, $e3, $ec, $fd, $10, $1f, $22, $1a, $0b, $f8, $f0, $ee, $ef, $f6, $fd, $fe
0e7c8     FD 06 0D 13 
0e7cc     05 F6 ED E7 
0e7d0     F2 09 19 20 
0e7d4     15 06 F9 E9 | 	byte	$fd, $06, $0d, $13, $05, $f6, $ed, $e7, $f2, $09, $19, $20, $15, $06, $f9, $e9
0e7d8     E3 E1 EF 01 
0e7dc     15 20 20 11 
0e7e0     06 F4 EC EA 
0e7e4     F0 F7 02 05 | 	byte	$e3, $e1, $ef, $01, $15, $20, $20, $11, $06, $f4, $ec, $ea, $f0, $f7, $02, $05
0e7e8     03 0C 0D 15 
0e7ec     FD EF E5 E8 
0e7f0     F5 10 1A 22 
0e7f4     15 06 F4 E7 | 	byte	$03, $0c, $0d, $15, $fd, $ef, $e5, $e8, $f5, $10, $1a, $22, $15, $06, $f4, $e7
0e7f8     E3 E2 F3 05 
0e7fc     18 1F 1E 0F 
0e800     09 F9 ED E8 
0e804     EF F4 FF 03 | 	byte	$e3, $e2, $f3, $05, $18, $1f, $1e, $0f, $09, $f9, $ed, $e8, $ef, $f4, $ff, $03
0e808     04 0E 11 14 
0e80c     01 EF E4 E9 
0e810     F8 0F 17 1C 
0e814     12 08 F5 EA | 	byte	$04, $0e, $11, $14, $01, $ef, $e4, $e9, $f8, $0f, $17, $1c, $12, $08, $f5, $ea
0e818     E3 E4 F5 08 
0e81c     17 1C 14 0D 
0e820     06 FB F1 E9 
0e824     F2 F7 FE FF | 	byte	$e3, $e4, $f5, $08, $17, $1c, $14, $0d, $06, $fb, $f1, $e9, $f2, $f7, $fe, $ff
0e828     07 0F 14 0B 
0e82c     FF EE E9 EE 
0e830     FD 0E 15 16 
0e834     0F 08 F9 EC | 	byte	$07, $0f, $14, $0b, $ff, $ee, $e9, $ee, $fd, $0e, $15, $16, $0f, $08, $f9, $ec
0e838     E2 EA F8 09 
0e83c     12 18 0E 0B 
0e840     03 FF F6 F0 
0e844     F2 F7 F9 FA | 	byte	$e2, $ea, $f8, $09, $12, $18, $0e, $0b, $03, $ff, $f6, $f0, $f2, $f7, $f9, $fa
0e848     07 0F 18 07 
0e84c     FA E9 E9 F4 
0e850     04 0E 14 12 
0e854     11 0A FB ED | 	byte	$07, $0f, $18, $07, $fa, $e9, $e9, $f4, $04, $0e, $14, $12, $11, $0a, $fb, $ed
0e858     E2 EE FB 09 
0e85c     0D 11 0B 0A 
0e860     06 FE F8 F3 
0e864     F1 F7 F7 F6 | 	byte	$e2, $ee, $fb, $09, $0d, $11, $0b, $0a, $06, $fe, $f8, $f3, $f1, $f7, $f7, $f6
0e868     0A 11 19 06 
0e86c     F5 EC F0 FC 
0e870     08 0E 0F 0E 
0e874     0D 03 F7 EF | 	byte	$0a, $11, $19, $06, $f5, $ec, $f0, $fc, $08, $0e, $0f, $0e, $0d, $03, $f7, $ef
0e878     E8 F3 FB 05 
0e87c     05 0D 0C 0E 
0e880     0B 04 FD F7 
0e884     EE EE F1 F7 | 	byte	$e8, $f3, $fb, $05, $05, $0d, $0c, $0e, $0b, $04, $fd, $f7, $ee, $ee, $f1, $f7
0e888     0A 14 19 08 
0e88c     F6 EA F1 F8 
0e890     09 0F 12 0F 
0e894     0C FF F5 E9 | 	byte	$0a, $14, $19, $08, $f6, $ea, $f1, $f8, $09, $0f, $12, $0f, $0c, $ff, $f5, $e9
0e898     E8 F3 F9 04 
0e89c     09 0F 0F 10 
0e8a0     09 02 F8 F6 
0e8a4     EF F1 F1 FD | 	byte	$e8, $f3, $f9, $04, $09, $0f, $0f, $10, $09, $02, $f8, $f6, $ef, $f1, $f1, $fd
0e8a8     0A 18 13 01 
0e8ac     F4 EB F5 FA 
0e8b0     0D 14 14 0E 
0e8b4     08 F8 F0 E8 | 	byte	$0a, $18, $13, $01, $f4, $eb, $f5, $fa, $0d, $14, $14, $0e, $08, $f8, $f0, $e8
0e8b8     F1 FA 00 01 
0e8bc     06 0A 0E 0E 
0e8c0     0B 05 FB F9 
0e8c4     F1 EE EA FA | 	byte	$f1, $fa, $00, $01, $06, $0a, $0e, $0e, $0b, $05, $fb, $f9, $f1, $ee, $ea, $fa
0e8c8     05 15 0F 03 
0e8cc     F9 F7 FA 02 
0e8d0     09 0F 0E 09 
0e8d4     01 F6 F4 EB | 	byte	$05, $15, $0f, $03, $f9, $f7, $fa, $02, $09, $0f, $0e, $09, $01, $f6, $f4, $eb
0e8d8     F7 FE 02 FD 
0e8dc     01 04 0B 0A 
0e8e0     0A 06 FF FA 
0e8e4     F5 F0 EB FB | 	byte	$f7, $fe, $02, $fd, $01, $04, $0b, $0a, $0a, $06, $ff, $fa, $f5, $f0, $eb, $fb
0e8e8     06 10 0A FF 
0e8ec     FB FD FE 02 
0e8f0     04 06 09 0A 
0e8f4     05 FD F7 F2 | 	byte	$06, $10, $0a, $ff, $fb, $fd, $fe, $02, $04, $06, $09, $0a, $05, $fd, $f7, $f2
0e8f8     F7 FC FE FA 
0e8fc     FE 05 0B 0D 
0e900     0A 08 05 FE 
0e904     F6 EC EA F8 | 	byte	$f7, $fc, $fe, $fa, $fe, $05, $0b, $0d, $0a, $08, $05, $fe, $f6, $ec, $ea, $f8
0e908     02 0B 05 01 
0e90c     00 08 08 06 
0e910     FE FD FC 07 
0e914     03 02 FB FA | 	byte	$02, $0b, $05, $01, $00, $08, $08, $06, $fe, $fd, $fc, $07, $03, $02, $fb, $fa
0e918     FC FC F8 F4 
0e91c     F8 03 10 12 
0e920     0F 06 07 FC 
0e924     F4 EB ED F8 | 	byte	$fc, $fc, $f8, $f4, $f8, $03, $10, $12, $0f, $06, $07, $fc, $f4, $eb, $ed, $f8
0e928     05 09 FF FB 
0e92c     FD 07 0B 0B 
0e930     00 FE FD 07 
0e934     05 04 FF 00 | 	byte	$05, $09, $ff, $fb, $fd, $07, $0b, $0b, $00, $fe, $fd, $07, $05, $04, $ff, $00
0e938     02 F8 F4 F0 
0e93c     F5 FF 0B 0E 
0e940     0C 05 09 02 
0e944     FA EF F3 F8 | 	byte	$02, $f8, $f4, $f0, $f5, $ff, $0b, $0e, $0c, $05, $09, $02, $fa, $ef, $f3, $f8
0e948     01 02 FB FC 
0e94c     04 0C 0F 07 
0e950     FF F9 FA 02 
0e954     02 05 05 06 | 	byte	$01, $02, $fb, $fc, $04, $0c, $0f, $07, $ff, $f9, $fa, $02, $02, $05, $05, $06
0e958     07 F8 ED EE 
0e95c     F4 02 08 0D 
0e960     0C 08 09 07 
0e964     FD F2 F5 F9 | 	byte	$07, $f8, $ed, $ee, $f4, $02, $08, $0d, $0c, $08, $09, $07, $fd, $f2, $f5, $f9
0e968     FE FA F9 FA 
0e96c     07 0C 12 07 
0e970     00 F6 F6 F8 
0e974     FA 03 08 0F | 	byte	$fe, $fa, $f9, $fa, $07, $0c, $12, $07, $00, $f6, $f6, $f8, $fa, $03, $08, $0f
0e978     0B FF EF F0 
0e97c     F3 FD 02 08 
0e980     0A 0B 09 07 
0e984     01 F7 FA FC | 	byte	$0b, $ff, $ef, $f0, $f3, $fd, $02, $08, $0a, $0b, $09, $07, $01, $f7, $fa, $fc
0e988     FF F5 F4 F6 
0e98c     04 0E 12 0E 
0e990     05 FB F8 F6 
0e994     F8 FD 05 0C | 	byte	$ff, $f5, $f4, $f6, $04, $0e, $12, $0e, $05, $fb, $f8, $f6, $f8, $fd, $05, $0c
0e998     05 00 F6 F3 
0e99c     FA 01 05 07 
0e9a0     05 08 04 01 
0e9a4     FC FB 00 02 | 	byte	$05, $00, $f6, $f3, $fa, $01, $05, $07, $05, $08, $04, $01, $fc, $fb, $00, $02
0e9a8     FF F3 ED F5 
0e9ac     02 0E 15 13 
0e9b0     0B 00 F9 F1 
0e9b4     F6 FB 06 0C | 	byte	$ff, $f3, $ed, $f5, $02, $0e, $15, $13, $0b, $00, $f9, $f1, $f6, $fb, $06, $0c
0e9b8     05 00 FA F5 
0e9bc     FA FC 00 01 
0e9c0     03 0C 06 01 
0e9c4     F8 FC 02 02 | 	byte	$05, $00, $fa, $f5, $fa, $fc, $00, $01, $03, $0c, $06, $01, $f8, $fc, $02, $02
0e9c8     FC F3 F2 FB 
0e9cc     03 09 12 0F 
0e9d0     0D 03 F9 F0 
0e9d4     F5 FB 05 0A | 	byte	$fc, $f3, $f2, $fb, $03, $09, $12, $0f, $0d, $03, $f9, $f0, $f5, $fb, $05, $0a
0e9d8     02 FE FD FC 
0e9dc     FD FE FD 00 
0e9e0     00 07 06 02 
0e9e4     F9 00 03 03 | 	byte	$02, $fe, $fd, $fc, $fd, $fe, $fd, $00, $00, $07, $06, $02, $f9, $00, $03, $03
0e9e8     FB F4 F3 FB 
0e9ec     06 0C 11 0F 
0e9f0     09 00 F7 F1 
0e9f4     F3 FB 04 0A | 	byte	$fb, $f4, $f3, $fb, $06, $0c, $11, $0f, $09, $00, $f7, $f1, $f3, $fb, $04, $0a
0e9f8     07 02 01 00 
0e9fc     FE FB F9 FC 
0ea00     03 04 04 FE 
0ea04     F8 00 02 03 | 	byte	$07, $02, $01, $00, $fe, $fb, $f9, $fc, $03, $04, $04, $fe, $f8, $00, $02, $03
0ea08     FB F5 F4 FB 
0ea0c     05 0F 10 0E 
0ea10     07 05 FB F7 
0ea14     F3 F8 FF 04 | 	byte	$fb, $f5, $f4, $fb, $05, $0f, $10, $0e, $07, $05, $fb, $f7, $f3, $f8, $ff, $04
0ea18     03 00 03 06 
0ea1c     06 FE FB F9 
0ea20     06 05 02 FA 
0ea24     F6 FD 02 03 | 	byte	$03, $00, $03, $06, $06, $fe, $fb, $f9, $06, $05, $02, $fa, $f6, $fd, $02, $03
0ea28     FB F7 F5 FE 
0ea2c     07 0F 0B 0B 
0ea30     09 08 01 FA 
0ea34     F5 F6 FC FB | 	byte	$fb, $f7, $f5, $fe, $07, $0f, $0b, $0b, $09, $08, $01, $fa, $f5, $f6, $fc, $fb
0ea38     FC FC 03 07 
0ea3c     08 02 FE FC 
0ea40     05 05 FB F2 
0ea44     F4 FC 02 06 | 	byte	$fc, $fc, $03, $07, $08, $02, $fe, $fc, $05, $05, $fb, $f2, $f4, $fc, $02, $06
0ea48     FF FC FD 03 
0ea4c     07 06 02 04 
0ea50     09 0D 07 FF 
0ea54     FB F6 F6 EF | 	byte	$ff, $fc, $fd, $03, $07, $06, $02, $04, $09, $0d, $07, $ff, $fb, $f6, $f6, $ef
0ea58     F1 FA 06 0D 
0ea5c     0D 0A 05 02 
0ea60     03 01 F6 EB 
0ea64     F1 FA 03 03 | 	byte	$f1, $fa, $06, $0d, $0d, $0a, $05, $02, $03, $01, $f6, $eb, $f1, $fa, $03, $03
0ea68     00 FE 05 07 
0ea6c     0B 04 FF 01 
0ea70     08 0A 06 00 
0ea74     FE FC F6 EF | 	byte	$00, $fe, $05, $07, $0b, $04, $ff, $01, $08, $0a, $06, $00, $fe, $fc, $f6, $ef
0ea78     EB F7 06 10 
0ea7c     11 0B 05 04 
0ea80     03 FC F1 E8 
0ea84     F1 FB 04 02 | 	byte	$eb, $f7, $06, $10, $11, $0b, $05, $04, $03, $fc, $f1, $e8, $f1, $fb, $04, $02
0ea88     FE FF 06 0A 
0ea8c     09 00 FA FF 
0ea90     0A 10 0C 06 
0ea94     03 FF F3 E8 | 	byte	$fe, $ff, $06, $0a, $09, $00, $fa, $ff, $0a, $10, $0c, $06, $03, $ff, $f3, $e8
0ea98     E1 EF 05 15 
0ea9c     19 11 09 05 
0eaa0     02 F6 EA E5 
0eaa4     F0 FD 09 07 | 	byte	$e1, $ef, $05, $15, $19, $11, $09, $05, $02, $f6, $ea, $e5, $f0, $fd, $09, $07
0eaa8     03 02 06 07 
0eaac     04 FA F7 FE 
0eab0     0A 12 13 0B 
0eab4     04 FE F1 E6 | 	byte	$03, $02, $06, $07, $04, $fa, $f7, $fe, $0a, $12, $13, $0b, $04, $fe, $f1, $e6
0eab8     E2 EE 03 15 
0eabc     18 14 0B 08 
0eac0     01 F7 E8 E8 
0eac4     F0 FE 0A 08 | 	byte	$e2, $ee, $03, $15, $18, $14, $0b, $08, $01, $f7, $e8, $e8, $f0, $fe, $0a, $08
0eac8     06 02 05 02 
0eacc     FD F6 F9 00 
0ead0     0E 11 13 0C 
0ead4     05 FF EE E4 | 	byte	$06, $02, $05, $02, $fd, $f6, $f9, $00, $0e, $11, $13, $0c, $05, $ff, $ee, $e4
0ead8     E3 F2 01 13 
0eadc     16 15 0E 08 
0eae0     00 F3 E5 E8 
0eae4     F1 00 09 0B | 	byte	$e3, $f2, $01, $13, $16, $15, $0e, $08, $00, $f3, $e5, $e8, $f1, $00, $09, $0b
0eae8     0A 09 05 FD 
0eaec     F5 F1 F6 01 
0eaf0     10 12 11 0D 
0eaf4     08 FD EF E2 | 	byte	$0a, $09, $05, $fd, $f5, $f1, $f6, $01, $10, $12, $11, $0d, $08, $fd, $ef, $e2
0eaf8     E6 F5 05 10 
0eafc     16 15 11 09 
0eb00     FC EC E6 EC 
0eb04     F5 04 05 08 | 	byte	$e6, $f5, $05, $10, $16, $15, $11, $09, $fc, $ec, $e6, $ec, $f5, $04, $05, $08
0eb08     09 08 02 F8 
0eb0c     F1 F3 FC 0A 
0eb10     0F 13 0E 0C 
0eb14     0A FB F2 E7 | 	byte	$09, $08, $02, $f8, $f1, $f3, $fc, $0a, $0f, $13, $0e, $0c, $0a, $fb, $f2, $e7
0eb18     E9 F6 05 09 
0eb1c     10 15 14 09 
0eb20     F8 E5 E1 EA 
0eb24     FA 08 0B 0C | 	byte	$e9, $f6, $05, $09, $10, $15, $14, $09, $f8, $e5, $e1, $ea, $fa, $08, $0b, $0c
0eb28     0C 0A 01 F4 
0eb2c     EB F0 FF 0B 
0eb30     10 0F 0C 0C 
0eb34     0C FE F2 E7 | 	byte	$0c, $0a, $01, $f4, $eb, $f0, $ff, $0b, $10, $0f, $0c, $0c, $0c, $fe, $f2, $e7
0eb38     EA F5 03 08 
0eb3c     0E 15 19 0E 
0eb40     F8 E2 DE E8 
0eb44     FA 09 0B 0E | 	byte	$ea, $f5, $03, $08, $0e, $15, $19, $0e, $f8, $e2, $de, $e8, $fa, $09, $0b, $0e
0eb48     11 12 05 F5 
0eb4c     E9 EE FC 0B 
0eb50     0E 0B 0A 0B 
0eb54     0A FD F0 E7 | 	byte	$11, $12, $05, $f5, $e9, $ee, $fc, $0b, $0e, $0b, $0a, $0b, $0a, $fd, $f0, $e7
0eb58     EC F8 05 0B 
0eb5c     0F 14 17 0B 
0eb60     F7 E1 DE E8 
0eb64     FC 05 09 0C | 	byte	$ec, $f8, $05, $0b, $0f, $14, $17, $0b, $f7, $e1, $de, $e8, $fc, $05, $09, $0c
0eb68     10 10 08 F8 
0eb6c     F0 F4 00 0C 
0eb70     0C 06 03 07 
0eb74     06 FF F4 EF | 	byte	$10, $10, $08, $f8, $f0, $f4, $00, $0c, $0c, $06, $03, $07, $06, $ff, $f4, $ef
0eb78     F3 FD 05 09 
0eb7c     0F 13 13 07 
0eb80     F3 DF DD E9 
0eb84     FA 05 0A 12 | 	byte	$f3, $fd, $05, $09, $0f, $13, $13, $07, $f3, $df, $dd, $e9, $fa, $05, $0a, $12
0eb88     16 0E 05 F5 
0eb8c     EE F2 FD 0B 
0eb90     0F 0B 06 07 
0eb94     01 FB F0 ED | 	byte	$16, $0e, $05, $f5, $ee, $f2, $fd, $0b, $0f, $0b, $06, $07, $01, $fb, $f0, $ed
0eb98     F5 00 07 0C 
0eb9c     11 15 12 06 
0eba0     F1 E1 E2 EA 
0eba4     F7 FF 08 13 | 	byte	$f5, $00, $07, $0c, $11, $15, $12, $06, $f1, $e1, $e2, $ea, $f7, $ff, $08, $13
0eba8     18 11 07 F9 
0ebac     F4 F7 FC 06 
0ebb0     0C 09 06 06 
0ebb4     FF F8 EF EF | 	byte	$18, $11, $07, $f9, $f4, $f7, $fc, $06, $0c, $09, $06, $06, $ff, $f8, $ef, $ef
0ebb8     F8 03 06 0A 
0ebbc     0C 12 0F 03 
0ebc0     F1 E8 EA F1 
0ebc4     F8 FC 07 11 | 	byte	$f8, $03, $06, $0a, $0c, $12, $0f, $03, $f1, $e8, $ea, $f1, $f8, $fc, $07, $11
0ebc8     14 0D 03 F9 
0ebcc     F8 F9 FD 02 
0ebd0     07 0B 0A 0A 
0ebd4     00 F6 ED F2 | 	byte	$14, $0d, $03, $f9, $f8, $f9, $fd, $02, $07, $0b, $0a, $0a, $00, $f6, $ed, $f2
0ebd8     F9 02 06 0B 
0ebdc     0D 11 0B FE 
0ebe0     EF EA EB F3 
0ebe4     F9 FE 07 11 | 	byte	$f9, $02, $06, $0b, $0d, $11, $0b, $fe, $ef, $ea, $eb, $f3, $f9, $fe, $07, $11
0ebe8     12 0D 04 FC 
0ebec     FD FC FF FE 
0ebf0     00 07 0C 0B 
0ebf4     FE F6 ED F3 | 	byte	$12, $0d, $04, $fc, $fd, $fc, $ff, $fe, $00, $07, $0c, $0b, $fe, $f6, $ed, $f3
0ebf8     FA 02 08 0A 
0ebfc     0F 11 06 F9 
0ec00     EB ED F1 F7 
0ec04     FA FD 07 0D | 	byte	$fa, $02, $08, $0a, $0f, $11, $06, $f9, $eb, $ed, $f1, $f7, $fa, $fd, $07, $0d
0ec08     0E 0B 03 FE 
0ec0c     01 00 01 FD 
0ec10     FD 00 09 07 
0ec14     01 F7 F1 F7 | 	byte	$0e, $0b, $03, $fe, $01, $00, $01, $fd, $fd, $00, $09, $07, $01, $f7, $f1, $f7
0ec18     FF 05 08 0B 
0ec1c     0D 0E 02 F3 
0ec20     E9 EF F8 FF 
0ec24     FD FC 01 05 | 	byte	$ff, $05, $08, $0b, $0d, $0e, $02, $f3, $e9, $ef, $f8, $ff, $fd, $fc, $01, $05
0ec28     08 07 02 01 
0ec2c     05 07 07 00 
0ec30     FD FE 03 00 
0ec34     FC F5 F3 FA | 	byte	$08, $07, $02, $01, $05, $07, $07, $00, $fd, $fe, $03, $00, $fc, $f5, $f3, $fa
0ec38     05 09 0D 0C 
0ec3c     0E 09 F9 E9 
0ec40     E6 EE FD 07 
0ec44     02 00 FF 04 | 	byte	$05, $09, $0d, $0c, $0e, $09, $f9, $e9, $e6, $ee, $fd, $07, $02, $00, $ff, $04
0ec48     02 02 00 03 
0ec4c     07 0B 07 04 
0ec50     FE FB FD FA 
0ec54     F9 F5 F8 FF | 	byte	$02, $02, $00, $03, $07, $0b, $07, $04, $fe, $fb, $fd, $fa, $f9, $f5, $f8, $ff
0ec58     08 0C 0F 10 
0ec5c     0F 05 F5 E5 
0ec60     E5 F0 00 0B 
0ec64     09 05 FE FC | 	byte	$08, $0c, $0f, $10, $0f, $05, $f5, $e5, $e5, $f0, $00, $0b, $09, $05, $fe, $fc
0ec68     FA FB 00 05 
0ec6c     0C 11 0C 03 
0ec70     FD F6 F7 F6 
0ec74     F9 F9 FE 04 | 	byte	$fa, $fb, $00, $05, $0c, $11, $0c, $03, $fd, $f6, $f7, $f6, $f9, $f9, $fe, $04
0ec78     09 0B 0D 10 
0ec7c     0C 01 F1 E6 
0ec80     E9 F3 01 09 
0ec84     0A 08 01 F8 | 	byte	$09, $0b, $0d, $10, $0c, $01, $f1, $e6, $e9, $f3, $01, $09, $0a, $08, $01, $f8
0ec88     F5 F5 FE 08 
0ec8c     0F 14 0F 05 
0ec90     FD F8 F3 F3 
0ec94     F5 FB 02 07 | 	byte	$f5, $f5, $fe, $08, $0f, $14, $0f, $05, $fd, $f8, $f3, $f3, $f5, $fb, $02, $07
0ec98     08 0C 0F 10 
0ec9c     0A FD EE E6 
0eca0     EA F6 01 09 
0eca4     0C 0A 06 FA | 	byte	$08, $0c, $0f, $10, $0a, $fd, $ee, $e6, $ea, $f6, $01, $09, $0c, $0a, $06, $fa
0eca8     F1 EE F4 08 
0ecac     12 18 11 07 
0ecb0     01 F9 F0 ED 
0ecb4     EF F9 04 0C | 	byte	$f1, $ee, $f4, $08, $12, $18, $11, $07, $01, $f9, $f0, $ed, $ef, $f9, $04, $0c
0ecb8     0B 0E 11 10 
0ecbc     07 F9 ED E8 
0ecc0     ED FA 03 04 
0ecc4     08 07 08 FE | 	byte	$0b, $0e, $11, $10, $07, $f9, $ed, $e8, $ed, $fa, $03, $04, $08, $07, $08, $fe
0ecc8     F4 EF F5 07 
0eccc     12 14 0E 06 
0ecd0     00 FC F3 F0 
0ecd4     EE F7 03 0A | 	byte	$f4, $ef, $f5, $07, $12, $14, $0e, $06, $00, $fc, $f3, $f0, $ee, $f7, $03, $0a
0ecd8     0A 0E 11 11 
0ecdc     07 F7 EC EA 
0ece0     F0 FC 06 03 
0ece4     06 07 07 FF | 	byte	$0a, $0e, $11, $11, $07, $f7, $ec, $ea, $f0, $fc, $06, $03, $06, $07, $07, $ff
0ece8     F4 EC F4 01 
0ecec     11 16 0F 09 
0ecf0     03 FD F4 F0 
0ecf4     EC F8 03 0B | 	byte	$f4, $ec, $f4, $01, $11, $16, $0f, $09, $03, $fd, $f4, $f0, $ec, $f8, $03, $0b
0ecf8     0C 0F 11 0F 
0ecfc     04 F5 E8 EA 
0ed00     F3 01 08 04 
0ed04     04 07 04 FD | 	byte	$0c, $0f, $11, $0f, $04, $f5, $e8, $ea, $f3, $01, $08, $04, $04, $07, $04, $fd
0ed08     F3 EE F8 01 
0ed0c     11 17 10 0B 
0ed10     01 F9 F1 ED 
0ed14     EF FC 06 0B | 	byte	$f3, $ee, $f8, $01, $11, $17, $10, $0b, $01, $f9, $f1, $ed, $ef, $fc, $06, $0b
0ed18     0D 11 11 0D 
0ed1c     01 F2 E6 EB 
0ed20     F5 03 07 04 
0ed24     06 08 03 FA | 	byte	$0d, $11, $11, $0d, $01, $f2, $e6, $eb, $f5, $03, $07, $04, $06, $08, $03, $fa
0ed28     F1 EF F9 01 
0ed2c     0F 14 13 0D 
0ed30     06 F9 F2 EA 
0ed34     F1 FC 06 0A | 	byte	$f1, $ef, $f9, $01, $0f, $14, $13, $0d, $06, $f9, $f2, $ea, $f1, $fc, $06, $0a
0ed38     0D 11 11 0C 
0ed3c     FD EE E7 EE 
0ed40     FC 06 04 03 
0ed44     04 04 00 F9 | 	byte	$0d, $11, $11, $0c, $fd, $ee, $e7, $ee, $fc, $06, $04, $03, $04, $04, $00, $f9
0ed48     F5 F6 FE 02 
0ed4c     0B 0D 0E 0B 
0ed50     07 FB F4 EC 
0ed54     F2 FD 06 08 | 	byte	$f5, $f6, $fe, $02, $0b, $0d, $0e, $0b, $07, $fb, $f4, $ec, $f2, $fd, $06, $08
0ed58     0D 10 11 0A 
0ed5c     FC EE ED F3 
0ed60     FE 06 01 02 
0ed64     02 01 FC F9 | 	byte	$0d, $10, $11, $0a, $fc, $ee, $ed, $f3, $fe, $06, $01, $02, $02, $01, $fc, $f9
0ed68     F6 FC 02 06 
0ed6c     07 06 08 09 
0ed70     09 01 F7 EF 
0ed74     F5 FD 03 04 | 	byte	$f6, $fc, $02, $06, $07, $06, $08, $09, $09, $01, $f7, $ef, $f5, $fd, $03, $04
0ed78     09 0E 11 0A 
0ed7c     F9 ED EE F6 
0ed80     FE 05 00 05 
0ed84     07 03 FD F5 | 	byte	$09, $0e, $11, $0a, $f9, $ed, $ee, $f6, $fe, $05, $00, $05, $07, $03, $fd, $f5
0ed88     F3 FB 01 06 
0ed8c     06 04 07 0B 
0ed90     0B 03 F8 F1 
0ed94     F7 FC 01 05 | 	byte	$f3, $fb, $01, $06, $06, $04, $07, $0b, $0b, $03, $f8, $f1, $f7, $fc, $01, $05
0ed98     0A 0F 0C 05 
0ed9c     F4 ED F2 FC 
0eda0     04 05 04 06 
0eda4     04 FD F6 F2 | 	byte	$0a, $0f, $0c, $05, $f4, $ed, $f2, $fc, $04, $05, $04, $06, $04, $fd, $f6, $f2
0eda8     F4 FE 05 09 
0edac     08 03 05 0A 
0edb0     09 02 F9 F5 
0edb4     F9 FC FE 05 | 	byte	$f4, $fe, $05, $09, $08, $03, $05, $0a, $09, $02, $f9, $f5, $f9, $fc, $fe, $05
0edb8     0B 0F 0C 02 
0edbc     F4 ED F2 FD 
0edc0     06 05 06 07 
0edc4     06 FE F5 F0 | 	byte	$0b, $0f, $0c, $02, $f4, $ed, $f2, $fd, $06, $05, $06, $07, $06, $fe, $f5, $f0
0edc8     F3 FF 06 0C 
0edcc     07 02 01 05 
0edd0     05 01 FA FB 
0edd4     FE FF FE 02 | 	byte	$f3, $ff, $06, $0c, $07, $02, $01, $05, $05, $01, $fa, $fb, $fe, $ff, $fe, $02
0edd8     07 0A 08 01 
0eddc     F6 F2 F5 FD 
0ede0     05 02 05 05 
0ede4     04 FD F5 F1 | 	byte	$07, $0a, $08, $01, $f6, $f2, $f5, $fd, $05, $02, $05, $05, $04, $fd, $f5, $f1
0ede8     F6 02 0A 0F 
0edec     07 01 FE 01 
0edf0     00 FC FA FE 
0edf4     02 03 02 02 | 	byte	$f6, $02, $0a, $0f, $07, $01, $fe, $01, $00, $fc, $fa, $fe, $02, $03, $02, $02
0edf8     04 06 06 FF 
0edfc     F9 F7 F9 00 
0ee00     02 00 00 02 
0ee04     01 FC F6 F3 | 	byte	$04, $06, $06, $ff, $f9, $f7, $f9, $00, $02, $00, $00, $02, $01, $fc, $f6, $f3
0ee08     FA 03 0C 0D 
0ee0c     08 01 FF FE 
0ee10     FE F8 F8 FD 
0ee14     05 07 06 05 | 	byte	$fa, $03, $0c, $0d, $08, $01, $ff, $fe, $fe, $f8, $f8, $fd, $05, $07, $06, $05
0ee18     03 06 03 FC 
0ee1c     F7 F9 FB FE 
0ee20     FF 00 01 02 
0ee24     00 FE FB F8 | 	byte	$03, $06, $03, $fc, $f7, $f9, $fb, $fe, $ff, $00, $01, $02, $00, $fe, $fb, $f8
0ee28     FD FF 09 08 
0ee2c     06 02 02 00 
0ee30     FC F9 FA FF 
0ee34     03 05 05 04 | 	byte	$fd, $ff, $09, $08, $06, $02, $02, $00, $fc, $f9, $fa, $ff, $03, $05, $05, $04
0ee38     01 02 00 00 
0ee3c     FD 00 02 FF 
0ee40     FC FB FB FC 
0ee44     FD FF 00 FF | 	byte	$01, $02, $00, $00, $fd, $00, $02, $ff, $fc, $fb, $fb, $fc, $fd, $ff, $00, $ff
0ee48     03 02 05 02 
0ee4c     FF 01 04 02 
0ee50     FE FD FE 03 
0ee54     04 03 02 02 | 	byte	$03, $02, $05, $02, $ff, $01, $04, $02, $fe, $fd, $fe, $03, $04, $03, $02, $02
0ee58     01 00 FD FE 
0ee5c     00 04 04 01 
0ee60     FB F9 F8 F9 
0ee64     FA FE 00 04 | 	byte	$01, $00, $fd, $fe, $00, $04, $04, $01, $fb, $f9, $f8, $f9, $fa, $fe, $00, $04
0ee68     06 06 06 FF 
0ee6c     FD 00 05 02 
0ee70     00 FE 00 02 
0ee74     03 FF 01 01 | 	byte	$06, $06, $06, $ff, $fd, $00, $05, $02, $00, $fe, $00, $02, $03, $ff, $01, $01
0ee78     02 00 FD FE 
0ee7c     03 07 04 03 
0ee80     F9 F8 F6 F6 
0ee84     F8 FE 01 08 | 	byte	$02, $00, $fd, $fe, $03, $07, $04, $03, $f9, $f8, $f6, $f6, $f8, $fe, $01, $08
0ee88     0A 09 04 FD 
0ee8c     FB FD 01 00 
0ee90     01 01 04 03 
0ee94     00 FE 01 01 | 	byte	$0a, $09, $04, $fd, $fb, $fd, $01, $00, $01, $01, $04, $03, $00, $fe, $01, $01
0ee98     02 01 FE FE 
0ee9c     02 07 04 00 
0eea0     F8 F5 F5 F7 
0eea4     FA FF 05 0C | 	byte	$02, $01, $fe, $fe, $02, $07, $04, $00, $f8, $f5, $f5, $f7, $fa, $ff, $05, $0c
0eea8     0B 08 01 FA 
0eeac     FA FD 00 02 
0eeb0     02 03 03 FF 
0eeb4     F9 FA FF 03 | 	byte	$0b, $08, $01, $fa, $fa, $fd, $00, $02, $02, $03, $03, $ff, $f9, $fa, $ff, $03
0eeb8     05 04 FF FF 
0eebc     02 04 04 00 
0eec0     FA F8 F7 F8 
0eec4     FB FE 03 0A | 	byte	$05, $04, $ff, $ff, $02, $04, $04, $00, $fa, $f8, $f7, $f8, $fb, $fe, $03, $0a
0eec8     08 08 FF F9 
0eecc     FC 01 04 04 
0eed0     04 01 00 FD 
0eed4     F7 FA 03 08 | 	byte	$08, $08, $ff, $f9, $fc, $01, $04, $04, $04, $01, $00, $fd, $f7, $fa, $03, $08
0eed8     09 02 FD FC 
0eedc     FF 02 05 01 
0eee0     FE F9 F5 F6 
0eee4     F9 FF 04 0A | 	byte	$09, $02, $fd, $fc, $ff, $02, $05, $01, $fe, $f9, $f5, $f6, $f9, $ff, $04, $0a
0eee8     0A 08 FF F9 
0eeec     F9 00 04 06 
0eef0     06 02 00 FC 
0eef4     F8 FB 00 08 | 	byte	$0a, $08, $ff, $f9, $f9, $00, $04, $06, $06, $02, $00, $fc, $f8, $fb, $00, $08
0eef8     09 03 FE FD 
0eefc     FF 03 05 03 
0ef00     FF F7 F4 F5 
0ef04     FA FF 05 08 | 	byte	$09, $03, $fe, $fd, $ff, $03, $05, $03, $ff, $f7, $f4, $f5, $fa, $ff, $05, $08
0ef08     0B 08 FF F9 
0ef0c     F8 FF 05 06 
0ef10     04 02 FE FA 
0ef14     F8 FC 01 0A | 	byte	$0b, $08, $ff, $f9, $f8, $ff, $05, $06, $04, $02, $fe, $fa, $f8, $fc, $01, $0a
0ef18     0A 05 FF FD 
0ef1c     FD 01 03 03 
0ef20     00 FA F7 F5 
0ef24     FA FC 05 05 | 	byte	$0a, $05, $ff, $fd, $fd, $01, $03, $03, $00, $fa, $f7, $f5, $fa, $fc, $05, $05
0ef28     0A 08 01 FB 
0ef2c     FA FC 03 05 
0ef30     04 02 FD F8 
0ef34     F9 FF 03 0A | 	byte	$0a, $08, $01, $fb, $fa, $fc, $03, $05, $04, $02, $fd, $f8, $f9, $ff, $03, $0a
0ef38     08 05 FF FC 
0ef3c     FD 00 02 03 
0ef40     02 FD F8 F5 
0ef44     FA FD 04 05 | 	byte	$08, $05, $ff, $fc, $fd, $00, $02, $03, $02, $fd, $f8, $f5, $fa, $fd, $04, $05
0ef48     09 05 01 FB 
0ef4c     FC FD 01 05 
0ef50     05 04 FD F8 
0ef54     FA 02 04 08 | 	byte	$09, $05, $01, $fb, $fc, $fd, $01, $05, $05, $04, $fd, $f8, $fa, $02, $04, $08
0ef58     04 02 FF FE 
0ef5c     FF 00 01 02 
0ef60     00 FF F9 F7 
0ef64     FA FD 02 04 | 	byte	$04, $02, $ff, $fe, $ff, $00, $01, $02, $00, $ff, $f9, $f7, $fa, $fd, $02, $04
0ef68     07 03 01 FD 
0ef6c     FD FD FE 02 
0ef70     05 04 FF FA 
0ef74     FD 03 06 04 | 	byte	$07, $03, $01, $fd, $fd, $fd, $fe, $02, $05, $04, $ff, $fa, $fd, $03, $06, $04
0ef78     FF 00 FF 01 
0ef7c     00 00 FE FF 
0ef80     FE 00 FC FC 
0ef84     FA FE 01 02 | 	byte	$ff, $00, $ff, $01, $00, $00, $fe, $ff, $fe, $00, $fc, $fc, $fa, $fe, $01, $02
0ef88     03 FF FE FE 
0ef8c     FF FE 00 03 
0ef90     08 05 FF FB 
0ef94     FE 01 06 02 | 	byte	$03, $ff, $fe, $fe, $ff, $fe, $00, $03, $08, $05, $ff, $fb, $fe, $01, $06, $02
0ef98     FD FD 01 07 
0ef9c     04 FF FA FA 
0efa0     F9 FC FC 00 
0efa4     01 05 05 03 | 	byte	$fd, $fd, $01, $07, $04, $ff, $fa, $fa, $f9, $fc, $fc, $00, $01, $05, $05, $03
0efa8     00 FD F9 FD 
0efac     00 00 03 03 
0efb0     06 01 FA FB 
0efb4     00 04 09 02 | 	byte	$00, $fd, $f9, $fd, $00, $00, $03, $03, $06, $01, $fa, $fb, $00, $04, $09, $02
0efb8     FF FC 02 07 
0efbc     03 FE F9 F7 
0efc0     FA FC FE 04 
0efc4     05 07 05 02 | 	byte	$ff, $fc, $02, $07, $03, $fe, $f9, $f7, $fa, $fc, $fe, $04, $05, $07, $05, $02
0efc8     FD F9 F9 FE 
0efcc     01 01 02 03 
0efd0     02 FF FB FD 
0efd4     04 08 0A 02 | 	byte	$fd, $f9, $f9, $fe, $01, $01, $02, $03, $02, $ff, $fb, $fd, $04, $08, $0a, $02
0efd8     FD FB FF 05 
0efdc     02 FC F9 F8 
0efe0     F9 FA FF 05 
0efe4     09 0B 08 05 | 	byte	$fd, $fb, $ff, $05, $02, $fc, $f9, $f8, $f9, $fa, $ff, $05, $09, $0b, $08, $05
0efe8     FC F5 F5 FA 
0efec     FF 02 03 04 
0eff0     01 FE FD FF 
0eff4     05 09 08 02 | 	byte	$fc, $f5, $f5, $fa, $ff, $02, $03, $04, $01, $fe, $fd, $ff, $05, $09, $08, $02
0eff8     FD FD FF 02 
0effc     01 FD FC F8 
0f000     F8 F9 FE 05 
0f004     0A 0E 0C 06 | 	byte	$fd, $fd, $ff, $02, $01, $fd, $fc, $f8, $f8, $f9, $fe, $05, $0a, $0e, $0c, $06
0f008     FD F2 F3 F9 
0f00c     FF 06 06 05 
0f010     FD F9 F8 FD 
0f014     07 0C 0B 05 | 	byte	$fd, $f2, $f3, $f9, $ff, $06, $06, $05, $fd, $f9, $f8, $fd, $07, $0c, $0b, $05
0f018     FF FD FC FA 
0f01c     FB FA FE FD 
0f020     FD FD 02 04 
0f024     08 0A 08 02 | 	byte	$ff, $fd, $fc, $fa, $fb, $fa, $fe, $fd, $fd, $fd, $02, $04, $08, $0a, $08, $02
0f028     FB F5 F7 FB 
0f02c     02 08 07 03 
0f030     FA F5 F7 00 
0f034     08 0D 0A 06 | 	byte	$fb, $f5, $f7, $fb, $02, $08, $07, $03, $fa, $f5, $f7, $00, $08, $0d, $0a, $06
0f038     01 FE FB F7 
0f03c     F8 FA FD FE 
0f040     FF 00 03 05 
0f044     09 08 05 00 | 	byte	$01, $fe, $fb, $f7, $f8, $fa, $fd, $fe, $ff, $00, $03, $05, $09, $08, $05, $00
0f048     F9 F7 F8 FC 
0f04c     02 08 09 03 
0f050     F8 F4 F5 FF 
0f054     05 0C 0B 09 | 	byte	$f9, $f7, $f8, $fc, $02, $08, $09, $03, $f8, $f4, $f5, $ff, $05, $0c, $0b, $09
0f058     04 01 FB F6 
0f05c     F4 F8 FB FD 
0f060     FF 02 07 08 
0f064     0B 08 04 FB | 	byte	$04, $01, $fb, $f6, $f4, $f8, $fb, $fd, $ff, $02, $07, $08, $0b, $08, $04, $fb
0f068     F8 F8 FB FD 
0f06c     02 06 07 02 
0f070     F9 F6 F7 00 
0f074     06 0B 08 07 | 	byte	$f8, $f8, $fb, $fd, $02, $06, $07, $02, $f9, $f6, $f7, $00, $06, $0b, $08, $07
0f078     03 01 FD F7 
0f07c     F4 F9 FB FD 
0f080     FE 01 05 05 
0f084     09 06 04 FB | 	byte	$03, $01, $fd, $f7, $f4, $f9, $fb, $fd, $fe, $01, $05, $05, $09, $06, $04, $fb
0f088     FA FC 01 03 
0f08c     04 04 02 FE 
0f090     F9 F8 FB 01 
0f094     06 08 05 03 | 	byte	$fa, $fc, $01, $03, $04, $04, $02, $fe, $f9, $f8, $fb, $01, $06, $08, $05, $03
0f098     00 00 FD FA 
0f09c     F8 FA FD 00 
0f0a0     02 03 03 05 
0f0a4     05 03 00 FB | 	byte	$00, $00, $fd, $fa, $f8, $fa, $fd, $00, $02, $03, $03, $05, $05, $03, $00, $fb
0f0a8     F9 FF 03 06 
0f0ac     06 02 FE FA 
0f0b0     F7 F9 FE 02 
0f0b4     07 07 08 06 | 	byte	$f9, $ff, $03, $06, $06, $02, $fe, $fa, $f7, $f9, $fe, $02, $07, $07, $08, $06
0f0b8     03 00 FA F7 
0f0bc     F5 F6 FB 02 
0f0c0     07 0B 07 07 
0f0c4     01 FF FB F8 | 	byte	$03, $00, $fa, $f7, $f5, $f6, $fb, $02, $07, $0b, $07, $07, $01, $ff, $fb, $f8
0f0c8     F7 FD 04 09 
0f0cc     0A 05 FF FA 
0f0d0     F8 F9 FE FF 
0f0d4     03 03 08 09 | 	byte	$f7, $fd, $04, $09, $0a, $05, $ff, $fa, $f8, $f9, $fe, $ff, $03, $03, $08, $09
0f0d8     08 03 FB F8 
0f0dc     F6 F4 F8 00 
0f0e0     08 0E 0B 07 
0f0e4     00 FA F7 F5 | 	byte	$08, $03, $fb, $f8, $f6, $f4, $f8, $00, $08, $0e, $0b, $07, $00, $fa, $f7, $f5
0f0e8     F7 FD 05 0A 
0f0ec     0C 08 01 FA 
0f0f0     F8 FB FF 00 
0f0f4     00 00 06 09 | 	byte	$f7, $fd, $05, $0a, $0c, $08, $01, $fa, $f8, $fb, $ff, $00, $00, $00, $06, $09
0f0f8     08 03 FB F8 
0f0fc     F7 F4 F6 FD 
0f100     09 10 12 0B 
0f104     01 F8 F1 F2 | 	byte	$08, $03, $fb, $f8, $f7, $f4, $f6, $fd, $09, $10, $12, $0b, $01, $f8, $f1, $f2
0f108     F6 FD 04 0B 
0f10c     0C 0A 01 FA 
0f110     F6 FA FE FF 
0f114     FE FF 08 0B | 	byte	$f6, $fd, $04, $0b, $0c, $0a, $01, $fa, $f6, $fa, $fe, $ff, $fe, $ff, $08, $0b
0f118     0A 04 FC F7 
0f11c     F5 F2 F5 FB 
0f120     09 10 14 0E 
0f124     03 F8 EF F1 | 	byte	$0a, $04, $fc, $f7, $f5, $f2, $f5, $fb, $09, $10, $14, $0e, $03, $f8, $ef, $f1
0f128     F5 FC 01 08 
0f12c     0B 0A 02 FB 
0f130     F8 FB FD FE 
0f134     FD FF 06 09 | 	byte	$f5, $fc, $01, $08, $0b, $0a, $02, $fb, $f8, $fb, $fd, $fe, $fd, $ff, $06, $09
0f138     0B 04 00 F9 
0f13c     F3 F2 F5 FB 
0f140     08 10 14 0E 
0f144     03 F7 EF EF | 	byte	$0b, $04, $00, $f9, $f3, $f2, $f5, $fb, $08, $10, $14, $0e, $03, $f7, $ef, $ef
0f148     F6 FF 03 09 
0f14c     0B 09 00 FA 
0f150     F7 FC FD 00 
0f154     FF 05 07 08 | 	byte	$f6, $ff, $03, $09, $0b, $09, $00, $fa, $f7, $fc, $fd, $00, $ff, $05, $07, $08
0f158     07 02 FC F8 
0f15c     F2 F5 FA 02 
0f160     0A 0E 10 07 
0f164     FF F2 F0 F1 | 	byte	$07, $02, $fc, $f8, $f2, $f5, $fa, $02, $0a, $0e, $10, $07, $ff, $f2, $f0, $f1
0f168     FB 04 09 0A 
0f16c     09 03 FD F8 
0f170     F9 FF 00 02 
0f174     01 08 06 05 | 	byte	$fb, $04, $09, $0a, $09, $03, $fd, $f8, $f9, $ff, $00, $02, $01, $08, $06, $05
0f178     03 00 FC F9 
0f17c     F5 F7 FC 04 
0f180     09 0B 0A 02 
0f184     FE F6 F4 F5 | 	byte	$03, $00, $fc, $f9, $f5, $f7, $fc, $04, $09, $0b, $0a, $02, $fe, $f6, $f4, $f5
0f188     FC 05 0A 0B 
0f18c     07 00 FB F7 
0f190     FA FE FF 02 
0f194     04 07 05 02 | 	byte	$fc, $05, $0a, $0b, $07, $00, $fb, $f7, $fa, $fe, $ff, $02, $04, $07, $05, $02
0f198     FE FD FC FA 
0f19c     F9 FB 00 07 
0f1a0     09 08 03 FE 
0f1a4     FD FA FA F9 | 	byte	$fe, $fd, $fc, $fa, $f9, $fb, $00, $07, $09, $08, $03, $fe, $fd, $fa, $fa, $f9
0f1a8     FF 04 09 09 
0f1ac     04 FE FB F9 
0f1b0     FC FF 01 02 
0f1b4     05 07 05 01 | 	byte	$ff, $04, $09, $09, $04, $fe, $fb, $f9, $fc, $ff, $01, $02, $05, $07, $05, $01
0f1b8     FC FC FC FA 
0f1bc     F9 FC 00 08 
0f1c0     08 06 FF FE 
0f1c4     FD FE FC FB | 	byte	$fc, $fc, $fc, $fa, $f9, $fc, $00, $08, $08, $06, $ff, $fe, $fd, $fe, $fc, $fb
0f1c8     FC 00 07 08 
0f1cc     05 00 FB FB 
0f1d0     FF FF 01 00 
0f1d4     03 06 04 01 | 	byte	$fc, $00, $07, $08, $05, $00, $fb, $fb, $ff, $ff, $01, $00, $03, $06, $04, $01
0f1d8     FB FA F9 FB 
0f1dc     FB FF 02 0A 
0f1e0     09 04 FB F9 
0f1e4     FA FF 02 01 | 	byte	$fb, $fa, $f9, $fb, $fb, $ff, $02, $0a, $09, $04, $fb, $f9, $fa, $ff, $02, $01
0f1e8     00 00 04 06 
0f1ec     02 FE FA FE 
0f1f0     04 04 03 FE 
0f1f4     FF 01 FF FD | 	byte	$00, $00, $04, $06, $02, $fe, $fa, $fe, $04, $04, $03, $fe, $ff, $01, $ff, $fd
0f1f8     FA FA FD FF 
0f1fc     01 03 05 07 
0f200     05 00 F8 F7 
0f204     F9 02 07 07 | 	byte	$fa, $fa, $fd, $ff, $01, $03, $05, $07, $05, $00, $f8, $f7, $f9, $02, $07, $07
0f208     03 02 02 02 
0f20c     FE FB FA FF 
0f210     06 07 04 FF 
0f214     00 00 FE FC | 	byte	$03, $02, $02, $02, $fe, $fb, $fa, $ff, $06, $07, $04, $ff, $00, $00, $fe, $fc
0f218     FA F8 FB FF 
0f21c     05 06 0A 07 
0f220     04 FD F7 F3 
0f224     F7 00 06 09 | 	byte	$fa, $f8, $fb, $ff, $05, $06, $0a, $07, $04, $fd, $f7, $f3, $f7, $00, $06, $09
0f228     05 04 02 00 
0f22c     FB F9 F9 01 
0f230     07 09 05 01 
0f234     00 FE FC FA | 	byte	$05, $04, $02, $00, $fb, $f9, $f9, $01, $07, $09, $05, $01, $00, $fe, $fc, $fa
0f238     F9 FA FB FF 
0f23c     06 08 0B 07 
0f240     03 FB F7 F3 
0f244     F8 00 06 09 | 	byte	$f9, $fa, $fb, $ff, $06, $08, $0b, $07, $03, $fb, $f7, $f3, $f8, $00, $06, $09
0f248     07 05 01 FE 
0f24c     F9 F7 FB 04 
0f250     08 0B 05 02 
0f254     00 FC FA F9 | 	byte	$07, $05, $01, $fe, $f9, $f7, $fb, $04, $08, $0b, $05, $02, $00, $fc, $fa, $f9
0f258     FA FB FC FE 
0f25c     04 07 0A 06 
0f260     01 FA F7 F6 
0f264     FB 01 05 07 | 	byte	$fa, $fb, $fc, $fe, $04, $07, $0a, $06, $01, $fa, $f7, $f6, $fb, $01, $05, $07
0f268     08 08 04 FF 
0f26c     F8 F7 FB 04 
0f270     07 09 03 01 
0f274     FE FA F8 F8 | 	byte	$08, $08, $04, $ff, $f8, $f7, $fb, $04, $07, $09, $03, $01, $fe, $fa, $f8, $f8
0f278     FC 00 00 00 
0f27c     02 06 07 03 
0f280     00 FA FA FB 
0f284     FF 01 03 03 | 	byte	$fc, $00, $00, $00, $02, $06, $07, $03, $00, $fa, $fa, $fb, $ff, $01, $03, $03
0f288     06 07 04 FD 
0f28c     F7 F8 FE 07 
0f290     08 07 04 01 
0f294     FD F7 F4 F8 | 	byte	$06, $07, $04, $fd, $f7, $f8, $fe, $07, $08, $07, $04, $01, $fd, $f7, $f4, $f8
0f298     FC 02 02 03 
0f29c     02 06 06 02 
0f2a0     FE FB FB FD 
0f2a4     01 00 02 02 | 	byte	$fc, $02, $02, $03, $02, $06, $06, $02, $fe, $fb, $fb, $fd, $01, $00, $02, $02
0f2a8     05 07 05 FC 
0f2ac     F6 F7 FE 05 
0f2b0     08 07 07 05 
0f2b4     FE F9 F4 F6 | 	byte	$05, $07, $05, $fc, $f6, $f7, $fe, $05, $08, $07, $07, $05, $fe, $f9, $f4, $f6
0f2b8     FB 00 02 04 
0f2bc     04 06 05 02 
0f2c0     FD FA FA FC 
0f2c4     01 02 03 03 | 	byte	$fb, $00, $02, $04, $04, $06, $05, $02, $fd, $fa, $fa, $fc, $01, $02, $03, $03
0f2c8     06 07 05 FA 
0f2cc     F6 F7 00 05 
0f2d0     08 06 08 06 
0f2d4     FF F7 F3 F4 | 	byte	$06, $07, $05, $fa, $f6, $f7, $00, $05, $08, $06, $08, $06, $ff, $f7, $f3, $f4
0f2d8     FA FE 02 06 
0f2dc     06 07 04 01 
0f2e0     FC F9 F9 FC 
0f2e4     00 02 03 05 | 	byte	$fa, $fe, $02, $06, $06, $07, $04, $01, $fc, $f9, $f9, $fc, $00, $02, $03, $05
0f2e8     09 08 04 FA 
0f2ec     F4 F5 FE 03 
0f2f0     06 06 0A 08 
0f2f4     FF F7 F4 F4 | 	byte	$09, $08, $04, $fa, $f4, $f5, $fe, $03, $06, $06, $0a, $08, $ff, $f7, $f4, $f4
0f2f8     F9 FE 01 05 
0f2fc     06 06 03 01 
0f300     FD FB FB FF 
0f304     00 00 01 04 | 	byte	$f9, $fe, $01, $05, $06, $06, $03, $01, $fd, $fb, $fb, $ff, $00, $00, $01, $04
0f308     08 08 03 FC 
0f30c     F8 F9 FE 00 
0f310     02 04 09 08 
0f314     01 F9 F6 F6 | 	byte	$08, $08, $03, $fc, $f8, $f9, $fe, $00, $02, $04, $09, $08, $01, $f9, $f6, $f6
0f318     F9 FE 01 04 
0f31c     06 05 03 01 
0f320     FD FC FA FF 
0f324     FF 01 01 04 | 	byte	$f9, $fe, $01, $04, $06, $05, $03, $01, $fd, $fc, $fa, $ff, $ff, $01, $01, $04
0f328     09 07 01 FC 
0f32c     FA FD 00 FF 
0f330     01 03 07 06 
0f334     00 F9 F6 F7 | 	byte	$09, $07, $01, $fc, $fa, $fd, $00, $ff, $01, $03, $07, $06, $00, $f9, $f6, $f7
0f338     FB FF 03 04 
0f33c     06 05 03 00 
0f340     FD FC FB FD 
0f344     FE 01 02 05 | 	byte	$fb, $ff, $03, $04, $06, $05, $03, $00, $fd, $fc, $fb, $fd, $fe, $01, $02, $05
0f348     07 06 FF FB 
0f34c     FC 00 00 FF 
0f350     FF 02 05 04 
0f354     00 FC F9 FA | 	byte	$07, $06, $ff, $fb, $fc, $00, $00, $ff, $ff, $02, $05, $04, $00, $fc, $f9, $fa
0f358     FD FF 01 01 
0f35c     03 03 04 01 
0f360     00 FE FF FD 
0f364     FD FF 00 04 | 	byte	$fd, $ff, $01, $01, $03, $03, $04, $01, $00, $fe, $ff, $fd, $fd, $ff, $00, $04
0f368     05 05 00 FD 
0f36c     FF 03 00 FE 
0f370     FD 01 04 01 
0f374     FD FC FB FC | 	byte	$05, $05, $00, $fd, $ff, $03, $00, $fe, $fd, $01, $04, $01, $fd, $fc, $fb, $fc
0f378     FE FF 00 00 
0f37c     03 04 06 02 
0f380     02 FF FF FB 
0f384     F9 FB FF 04 | 	byte	$fe, $ff, $00, $00, $03, $04, $06, $02, $02, $ff, $ff, $fb, $f9, $fb, $ff, $04
0f388     05 03 01 FE 
0f38c     01 04 00 FF 
0f390     00 04 05 00 
0f394     FB FB FA FD | 	byte	$05, $03, $01, $fe, $01, $04, $00, $ff, $00, $04, $05, $00, $fb, $fb, $fa, $fd
0f398     FD FE FE 01 
0f39c     03 06 06 03 
0f3a0     03 01 00 FC 
0f3a4     F9 F8 FE 02 | 	byte	$fd, $fe, $fe, $01, $03, $06, $06, $03, $03, $01, $00, $fc, $f9, $f8, $fe, $02
0f3a8     05 01 01 02 
0f3ac     04 05 00 FF 
0f3b0     01 04 03 FD 
0f3b4     F9 FA FD 01 | 	byte	$05, $01, $01, $02, $04, $05, $00, $ff, $01, $04, $03, $fd, $f9, $fa, $fd, $01
0f3b8     00 FE FB FD 
0f3bc     FE 03 04 04 
0f3c0     06 05 04 FE 
0f3c4     F8 F6 FB 00 | 	byte	$00, $fe, $fb, $fd, $fe, $03, $04, $04, $06, $05, $04, $fe, $f8, $f6, $fb, $00
0f3c8     03 01 01 04 
0f3cc     08 05 00 FE 
0f3d0     00 03 FF FB 
0f3d4     F9 FC 01 04 | 	byte	$03, $01, $01, $04, $08, $05, $00, $fe, $00, $03, $ff, $fb, $f9, $fc, $01, $04
0f3d8     02 FE F9 F8 
0f3dc     FB 01 04 06 
0f3e0     09 07 05 FD 
0f3e4     F8 F6 FA FE | 	byte	$02, $fe, $f9, $f8, $fb, $01, $04, $06, $09, $07, $05, $fd, $f8, $f6, $fa, $fe
0f3e8     00 FF 00 05 
0f3ec     0A 07 04 00 
0f3f0     00 00 FD F8 
0f3f4     F8 FB 02 06 | 	byte	$00, $ff, $00, $05, $0a, $07, $04, $00, $00, $00, $fd, $f8, $f8, $fb, $02, $06
0f3f8     05 01 FA F8 
0f3fc     FA FF 01 05 
0f400     08 09 06 00 
0f404     FA F9 FA FD | 	byte	$05, $01, $fa, $f8, $fa, $ff, $01, $05, $08, $09, $06, $00, $fa, $f9, $fa, $fd
0f408     FD FC FE 04 
0f40c     0A 09 06 03 
0f410     02 FE FC F7 
0f414     F9 FB 03 07 | 	byte	$fd, $fc, $fe, $04, $0a, $09, $06, $03, $02, $fe, $fc, $f7, $f9, $fb, $03, $07
0f418     07 01 FB F8 
0f41c     FA FE 00 05 
0f420     06 08 05 00 
0f424     FC FB FC FD | 	byte	$07, $01, $fb, $f8, $fa, $fe, $00, $05, $06, $08, $05, $00, $fc, $fb, $fc, $fd
0f428     FC FB FE 04 
0f42c     08 08 09 06 
0f430     05 FF FA F7 
0f434     F8 FD 02 05 | 	byte	$fc, $fb, $fe, $04, $08, $08, $09, $06, $05, $ff, $fa, $f7, $f8, $fd, $02, $05
0f438     05 00 FC F9 
0f43c     FA FD FE 03 
0f440     05 07 03 01 
0f444     FE FE FE FE | 	byte	$05, $00, $fc, $f9, $fa, $fd, $fe, $03, $05, $07, $03, $01, $fe, $fe, $fe, $fe
0f448     FC FB FF 04 
0f44c     06 05 06 06 
0f450     05 FF FA F7 
0f454     F8 FD 03 05 | 	byte	$fc, $fb, $ff, $04, $06, $05, $06, $06, $05, $ff, $fa, $f7, $f8, $fd, $03, $05
0f458     05 01 FE FB 
0f45c     FB FB FD 02 
0f460     05 07 05 02 
0f464     FF FD FD FC | 	byte	$05, $01, $fe, $fb, $fb, $fb, $fd, $02, $05, $07, $05, $02, $ff, $fd, $fd, $fc
0f468     FC FD 01 06 
0f46c     04 04 03 06 
0f470     06 02 F9 F5 
0f474     F7 FC 02 04 | 	byte	$fc, $fd, $01, $06, $04, $04, $03, $06, $06, $02, $f9, $f5, $f7, $fc, $02, $04
0f478     05 02 01 FD 
0f47c     FC F9 FB FF 
0f480     05 07 04 03 
0f484     01 FE FC F9 | 	byte	$05, $02, $01, $fd, $fc, $f9, $fb, $ff, $05, $07, $04, $03, $01, $fe, $fc, $f9
0f488     F9 FD 04 08 
0f48c     06 04 03 05 
0f490     05 00 F9 F7 
0f494     F8 FD 01 03 | 	byte	$f9, $fd, $04, $08, $06, $04, $03, $05, $05, $00, $f9, $f7, $f8, $fd, $01, $03
0f498     02 01 00 FF 
0f49c     FD FA FC FE 
0f4a0     03 06 05 04 
0f4a4     02 01 FD F8 | 	byte	$02, $01, $00, $ff, $fd, $fa, $fc, $fe, $03, $06, $05, $04, $02, $01, $fd, $f8
0f4a8     F7 FC 04 09 
0f4ac     07 05 04 04 
0f4b0     02 FD F9 F8 
0f4b4     F9 FE 01 02 | 	byte	$f7, $fc, $04, $09, $07, $05, $04, $04, $02, $fd, $f9, $f8, $f9, $fe, $01, $02
0f4b8     00 00 FF FF 
0f4bc     FD FA FC FE 
0f4c0     05 06 06 03 
0f4c4     03 01 FE F6 | 	byte	$00, $00, $ff, $ff, $fd, $fa, $fc, $fe, $05, $06, $06, $03, $03, $01, $fe, $f6
0f4c8     F5 FB 05 09 
0f4cc     08 07 05 04 
0f4d0     FF FB F8 FA 
0f4d4     FA FF 02 02 | 	byte	$f5, $fb, $05, $09, $08, $07, $05, $04, $ff, $fb, $f8, $fa, $fa, $ff, $02, $02
0f4d8     01 00 00 00 
0f4dc     FC FB FC FF 
0f4e0     03 04 05 03 
0f4e4     04 03 FE F8 | 	byte	$01, $00, $00, $00, $fc, $fb, $fc, $ff, $03, $04, $05, $03, $04, $03, $fe, $f8
0f4e8     F6 FB 05 07 
0f4ec     08 08 06 04 
0f4f0     FF FA F9 FA 
0f4f4     FB FE 00 01 | 	byte	$f6, $fb, $05, $07, $08, $08, $06, $04, $ff, $fa, $f9, $fa, $fb, $fe, $00, $01
0f4f8     00 00 00 02 
0f4fc     FD FC FD 01 
0f500     03 03 02 03 
0f504     04 03 FD F9 | 	byte	$00, $00, $00, $02, $fd, $fc, $fd, $01, $03, $03, $02, $03, $04, $03, $fd, $f9
0f508     F8 FE 05 06 
0f50c     07 07 06 02 
0f510     FE F9 FA FB 
0f514     FF 00 00 00 | 	byte	$f8, $fe, $05, $06, $07, $07, $06, $02, $fe, $f9, $fa, $fb, $ff, $00, $00, $00
0f518     FF FF FF 00 
0f51c     FD FF 01 05 
0f520     04 01 FF 00 
0f524     01 00 FB F9 | 	byte	$ff, $ff, $ff, $00, $fd, $ff, $01, $05, $04, $01, $ff, $00, $01, $00, $fb, $f9
0f528     FC 01 06 06 
0f52c     07 05 04 00 
0f530     FC FA FB FD 
0f534     02 02 00 FD | 	byte	$fc, $01, $06, $06, $07, $05, $04, $00, $fc, $fa, $fb, $fd, $02, $02, $00, $fd
0f538     FD FD FE FE 
0f53c     FE 03 04 07 
0f540     03 FF FC FE 
0f544     00 FF FC FC | 	byte	$fd, $fd, $fe, $fe, $fe, $03, $04, $07, $03, $ff, $fc, $fe, $00, $ff, $fc, $fc
0f548     FF 06 07 05 
0f54c     03 03 03 00 
0f550     FD FB FD FF 
0f554     02 01 FD FB | 	byte	$ff, $06, $07, $05, $03, $03, $03, $00, $fd, $fb, $fd, $ff, $02, $01, $fd, $fb
0f558     FB FE FF FF 
0f55c     01 05 06 06 
0f560     02 FD FB FF 
0f564     FF FD FA FB | 	byte	$fb, $fe, $ff, $ff, $01, $05, $06, $06, $02, $fd, $fb, $ff, $ff, $fd, $fa, $fb
0f568     01 08 07 06 
0f56c     03 02 02 FF 
0f570     FD FC FE FF 
0f574     03 01 FD FA | 	byte	$01, $08, $07, $06, $03, $02, $02, $ff, $fd, $fc, $fe, $ff, $03, $01, $fd, $fa
0f578     FA FC FF FF 
0f57c     03 06 08 06 
0f580     FF FB F9 FE 
0f584     FE FC F9 FC | 	byte	$fa, $fc, $ff, $ff, $03, $06, $08, $06, $ff, $fb, $f9, $fe, $fe, $fc, $f9, $fc
0f588     03 0A 08 05 
0f58c     00 00 FF FF 
0f590     FE FF 00 02 
0f594     03 00 FC F7 | 	byte	$03, $0a, $08, $05, $00, $00, $ff, $ff, $fe, $ff, $00, $02, $03, $00, $fc, $f7
0f598     F7 FC 01 02 
0f59c     06 07 08 04 
0f5a0     FD F8 FA FD 
0f5a4     00 FD FC FE | 	byte	$f7, $fc, $01, $02, $06, $07, $08, $04, $fd, $f8, $fa, $fd, $00, $fd, $fc, $fe
0f5a8     04 08 06 03 
0f5ac     FF FF FD 00 
0f5b0     01 04 03 04 
0f5b4     01 FD F9 F6 | 	byte	$04, $08, $06, $03, $ff, $ff, $fd, $00, $01, $04, $03, $04, $01, $fd, $f9, $f6
0f5b8     F7 FD 03 05 
0f5bc     09 08 07 01 
0f5c0     FB F7 FA FC 
0f5c4     FF FF FE 01 | 	byte	$f7, $fd, $03, $05, $09, $08, $07, $01, $fb, $f7, $fa, $fc, $ff, $ff, $fe, $01
0f5c8     05 06 06 03 
0f5cc     FF FF FD FF 
0f5d0     00 03 04 05 
0f5d4     02 FE F8 F5 | 	byte	$05, $06, $06, $03, $ff, $ff, $fd, $ff, $00, $03, $04, $05, $02, $fe, $f8, $f5
0f5d8     F7 FD 02 06 
0f5dc     09 09 06 FF 
0f5e0     FA F7 FA FD 
0f5e4     FE FF 01 04 | 	byte	$f7, $fd, $02, $06, $09, $09, $06, $ff, $fa, $f7, $fa, $fd, $fe, $ff, $01, $04
0f5e8     07 05 04 00 
0f5ec     FE FE FD FF 
0f5f0     02 04 05 04 
0f5f4     01 FC F7 F6 | 	byte	$07, $05, $04, $00, $fe, $fe, $fd, $ff, $02, $04, $05, $04, $01, $fc, $f7, $f6
0f5f8     F9 FF 02 08 
0f5fc     0A 08 04 FD 
0f600     F9 F9 FB FC 
0f604     FC FD 02 05 | 	byte	$f9, $ff, $02, $08, $0a, $08, $04, $fd, $f9, $f9, $fb, $fc, $fc, $fd, $02, $05
0f608     08 05 03 00 
0f60c     FE FE FE FF 
0f610     02 04 06 06 
0f614     00 FC F7 F7 | 	byte	$08, $05, $03, $00, $fe, $fe, $fe, $ff, $02, $04, $06, $06, $00, $fc, $f7, $f7
0f618     F9 FF 00 06 
0f61c     09 08 03 FC 
0f620     F9 FC FE FE 
0f624     FB FB 00 06 | 	byte	$f9, $ff, $00, $06, $09, $08, $03, $fc, $f9, $fc, $fe, $fe, $fb, $fb, $00, $06
0f628     08 05 03 00 
0f62c     FF FE FD FE 
0f630     00 02 06 07 
0f634     01 FB F6 F6 | 	byte	$08, $05, $03, $00, $ff, $fe, $fd, $fe, $00, $02, $06, $07, $01, $fb, $f6, $f6
0f638     F9 FE 02 07 
0f63c     0A 09 01 FA 
0f640     F6 FB FE FE 
0f644     FB FC 01 08 | 	byte	$f9, $fe, $02, $07, $0a, $09, $01, $fa, $f6, $fb, $fe, $fe, $fb, $fc, $01, $08
0f648     0A 07 03 00 
0f64c     FF FE FC FC 
0f650     FF 02 07 07 
0f654     02 FB F7 F6 | 	byte	$0a, $07, $03, $00, $ff, $fe, $fc, $fc, $ff, $02, $07, $07, $02, $fb, $f7, $f6
0f658     F9 FD 01 07 
0f65c     09 07 00 F9 
0f660     F8 FC FF FF 
0f664     FC FC 01 08 | 	byte	$f9, $fd, $01, $07, $09, $07, $00, $f9, $f8, $fc, $ff, $ff, $fc, $fc, $01, $08
0f668     09 07 03 00 
0f66c     00 FD FC FC 
0f670     FE 01 05 06 
0f674     03 FC F7 F7 | 	byte	$09, $07, $03, $00, $00, $fd, $fc, $fc, $fe, $01, $05, $06, $03, $fc, $f7, $f7
0f678     FB FF 03 08 
0f67c     08 05 FE F7 
0f680     F8 FC FF FF 
0f684     FE FE 01 07 | 	byte	$fb, $ff, $03, $08, $08, $05, $fe, $f7, $f8, $fc, $ff, $ff, $fe, $fe, $01, $07
0f688     07 06 03 01 
0f68c     01 FF FD FE 
0f690     FD 00 03 04 
0f694     02 FB F7 F8 | 	byte	$07, $06, $03, $01, $01, $ff, $fd, $fe, $fd, $00, $03, $04, $02, $fb, $f7, $f8
0f698     FD 01 05 08 
0f69c     08 03 FB F7 
0f6a0     F9 FE 01 01 
0f6a4     FF FF 01 04 | 	byte	$fd, $01, $05, $08, $08, $03, $fb, $f7, $f9, $fe, $01, $01, $ff, $ff, $01, $04
0f6a8     05 05 03 02 
0f6ac     02 01 FE FE 
0f6b0     FC FE 02 03 
0f6b4     02 FD FA FA | 	byte	$05, $05, $03, $02, $02, $01, $fe, $fe, $fc, $fe, $02, $03, $02, $fd, $fa, $fa
0f6b8     FF 01 06 07 
0f6bc     06 00 FB F7 
0f6c0     FA FE 00 00 
0f6c4     00 01 02 03 | 	byte	$ff, $01, $06, $07, $06, $00, $fb, $f7, $fa, $fe, $00, $00, $00, $01, $02, $03
0f6c8     03 04 04 03 
0f6cc     01 00 FF FD 
0f6d0     FC FD 01 02 
0f6d4     00 FE FC FD | 	byte	$03, $04, $04, $03, $01, $00, $ff, $fd, $fc, $fd, $01, $02, $00, $fe, $fc, $fd
0f6d8     FF 02 06 06 
0f6dc     04 FF FB F9 
0f6e0     FB FE FF 00 
0f6e4     01 02 04 02 | 	byte	$ff, $02, $06, $06, $04, $ff, $fb, $f9, $fb, $fe, $ff, $00, $01, $02, $04, $02
0f6e8     02 03 04 05 
0f6ec     02 FF FE FC 
0f6f0     FA FC FF 00 
0f6f4     FE FE FE 00 | 	byte	$02, $03, $04, $05, $02, $ff, $fe, $fc, $fa, $fc, $ff, $00, $fe, $fe, $fe, $00
0f6f8     01 04 06 04 
0f6fc     02 FD FA FA 
0f700     FD 00 01 00 
0f704     00 02 02 00 | 	byte	$01, $04, $06, $04, $02, $fd, $fa, $fa, $fd, $00, $01, $00, $00, $02, $02, $00
0f708     00 01 05 06 
0f70c     05 02 00 FD 
0f710     FB FC FD FE 
0f714     FD FD FF 02 | 	byte	$00, $01, $05, $06, $05, $02, $00, $fd, $fb, $fc, $fd, $fe, $fd, $fd, $ff, $02
0f718     03 05 06 04 
0f71c     00 FB F8 F9 
0f720     FE 01 02 01 
0f724     01 01 01 00 | 	byte	$03, $05, $06, $04, $00, $fb, $f8, $f9, $fe, $01, $02, $01, $01, $01, $01, $00
0f728     00 01 05 07 
0f72c     06 02 FF FC 
0f730     FC FC FD FC 
0f734     FD FD 00 03 | 	byte	$00, $01, $05, $07, $06, $02, $ff, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $00, $03
0f738     04 06 06 03 
0f73c     FF F9 F6 F9 
0f740     FD 02 02 01 
0f744     01 02 01 00 | 	byte	$04, $06, $06, $03, $ff, $f9, $f6, $f9, $fd, $02, $02, $01, $01, $02, $01, $00
0f748     FF 00 03 05 
0f74c     06 03 00 FD 
0f750     FD FD FC FB 
0f754     FC FE 01 04 | 	byte	$ff, $00, $03, $05, $06, $03, $00, $fd, $fd, $fd, $fc, $fb, $fc, $fe, $01, $04
0f758     04 06 05 04 
0f75c     FF F9 F7 FB 
0f760     FF 02 01 02 
0f764     01 01 FF FF | 	byte	$04, $06, $05, $04, $ff, $f9, $f7, $fb, $ff, $02, $01, $02, $01, $01, $ff, $ff
0f768     00 02 03 04 
0f76c     04 04 00 FD 
0f770     FB FC FC FC 
0f774     FD FF 02 03 | 	byte	$00, $02, $03, $04, $04, $04, $00, $fd, $fb, $fc, $fc, $fc, $fd, $ff, $02, $03
0f778     03 05 04 02 
0f77c     FE FA FA FD 
0f780     01 02 01 01 
0f784     01 FF FE FE | 	byte	$03, $05, $04, $02, $fe, $fa, $fa, $fd, $01, $02, $01, $01, $01, $ff, $fe, $fe
0f788     00 03 04 03 
0f78c     03 03 01 FF 
0f790     FD FB FB FB 
0f794     FE 00 02 03 | 	byte	$00, $03, $04, $03, $03, $03, $01, $ff, $fd, $fb, $fb, $fb, $fe, $00, $02, $03
0f798     04 05 04 FF 
0f79c     FC FA FB FF 
0f7a0     01 02 00 01 
0f7a4     00 FF FE FE | 	byte	$04, $05, $04, $ff, $fc, $fa, $fb, $ff, $01, $02, $00, $01, $00, $ff, $fe, $fe
0f7a8     01 04 04 03 
0f7ac     01 01 00 FF 
0f7b0     FE FB FB FC 
0f7b4     FF 01 02 02 | 	byte	$01, $04, $04, $03, $01, $01, $00, $ff, $fe, $fb, $fb, $fc, $ff, $01, $02, $02
0f7b8     03 04 04 FF 
0f7bc     FC FB FE 00 
0f7c0     00 00 FF 00 
0f7c4     FE FF 00 01 | 	byte	$03, $04, $04, $ff, $fc, $fb, $fe, $00, $00, $00, $ff, $00, $fe, $ff, $00, $01
0f7c8     02 04 02 02 
0f7cc     FF 00 00 00 
0f7d0     FF FE FC FD 
0f7d4     FE 01 02 02 | 	byte	$02, $04, $02, $02, $ff, $00, $00, $00, $ff, $fe, $fc, $fd, $fe, $01, $02, $02
0f7d8     04 04 04 FF 
0f7dc     FC FB FE FF 
0f7e0     00 00 FF 00 
0f7e4     00 FF 01 01 | 	byte	$04, $04, $04, $ff, $fc, $fb, $fe, $ff, $00, $00, $ff, $00, $00, $ff, $01, $01
0f7e8     01 01 00 00 
0f7ec     00 01 01 02 
0f7f0     00 FD FB FB 
0f7f4     FE 02 03 03 | 	byte	$01, $01, $00, $00, $00, $01, $01, $02, $00, $fd, $fb, $fb, $fe, $02, $03, $03
0f7f8     03 03 01 FE 
0f7fc     FD FD 00 01 
0f800     01 FF FF FE 
0f804     FF FF 01 02 | 	byte	$03, $03, $01, $fe, $fd, $fd, $00, $01, $01, $ff, $ff, $fe, $ff, $ff, $01, $02
0f808     01 02 00 01 
0f80c     02 02 02 01 
0f810     FE FC FB FC 
0f814     FF 03 03 04 | 	byte	$01, $02, $00, $01, $02, $02, $02, $01, $fe, $fc, $fb, $fc, $ff, $03, $03, $04
0f818     03 03 00 FC 
0f81c     FB FD 00 01 
0f820     01 00 FF FF 
0f824     FF 00 00 01 | 	byte	$03, $03, $00, $fc, $fb, $fd, $00, $01, $01, $00, $ff, $ff, $ff, $00, $00, $01
0f828     01 00 00 01 
0f82c     03 03 02 00 
0f830     FD FC FB FD 
0f834     00 02 02 03 | 	byte	$01, $00, $00, $01, $03, $03, $02, $00, $fd, $fc, $fb, $fd, $00, $02, $02, $03
0f838     02 02 00 FD 
0f83c     FC FE 00 01 
0f840     00 FE FF FE 
0f844     FE 00 01 02 | 	byte	$02, $02, $00, $fd, $fc, $fe, $00, $01, $00, $fe, $ff, $fe, $fe, $00, $01, $02
0f848     02 01 01 02 
0f84c     03 02 01 FE 
0f850     FB FA FC FF 
0f854     02 04 03 02 | 	byte	$02, $01, $01, $02, $03, $02, $01, $fe, $fb, $fa, $fc, $ff, $02, $04, $03, $02
0f858     02 01 FE FC 
0f85c     FD 01 03 03 
0f860     01 FE FD FC 
0f864     FD FE 00 01 | 	byte	$02, $01, $fe, $fc, $fd, $01, $03, $03, $01, $fe, $fd, $fc, $fd, $fe, $00, $01
0f868     02 02 02 03 
0f86c     04 03 02 FE 
0f870     FB F9 FB 00 
0f874     04 05 03 02 | 	byte	$02, $02, $02, $03, $04, $03, $02, $fe, $fb, $f9, $fb, $00, $04, $05, $03, $02
0f878     02 00 FC FB 
0f87c     FD 01 03 03 
0f880     01 FF FE FE 
0f884     FE FF FF 00 | 	byte	$02, $00, $fc, $fb, $fd, $01, $03, $03, $01, $ff, $fe, $fe, $fe, $ff, $ff, $00
0f888     01 01 02 04 
0f88c     05 05 02 FE 
0f890     FA F8 FA FF 
0f894     03 04 03 03 | 	byte	$01, $01, $02, $04, $05, $05, $02, $fe, $fa, $f8, $fa, $ff, $03, $04, $03, $03
0f898     02 FF FC FB 
0f89c     FE 01 02 02 
0f8a0     01 00 FE FE 
0f8a4     FF FF FF FF | 	byte	$02, $ff, $fc, $fb, $fe, $01, $02, $02, $01, $00, $fe, $fe, $ff, $ff, $ff, $ff
0f8a8     FF 01 03 05 
0f8ac     06 06 02 FE 
0f8b0     FB F8 FB FF 
0f8b4     03 04 04 03 | 	byte	$ff, $01, $03, $05, $06, $06, $02, $fe, $fb, $f8, $fb, $ff, $03, $04, $04, $03
0f8b8     00 FC FA FB 
0f8bc     00 02 04 03 
0f8c0     01 00 FD FD 
0f8c4     FF 00 00 FF | 	byte	$00, $fc, $fa, $fb, $00, $02, $04, $03, $01, $00, $fd, $fd, $ff, $00, $00, $ff
0f8c8     00 00 02 04 
0f8cc     05 05 02 FE 
0f8d0     FA F9 FC FF 
0f8d4     03 03 04 03 | 	byte	$00, $00, $02, $04, $05, $05, $02, $fe, $fa, $f9, $fc, $ff, $03, $03, $04, $03
0f8d8     00 FC FB FD 
0f8dc     01 03 03 02 
0f8e0     00 FE FC FC 
0f8e4     FF 01 02 01 | 	byte	$00, $fc, $fb, $fd, $01, $03, $03, $02, $00, $fe, $fc, $fc, $ff, $01, $02, $01
0f8e8     00 00 02 03 
0f8ec     03 03 01 FF 
0f8f0     FC FC FD 01 
0f8f4     02 03 03 01 | 	byte	$00, $00, $02, $03, $03, $03, $01, $ff, $fc, $fc, $fd, $01, $02, $03, $03, $01
0f8f8     FE FC FC FE 
0f8fc     02 03 03 01 
0f900     FF FD FC FD 
0f904     FF 02 03 03 | 	byte	$fe, $fc, $fc, $fe, $02, $03, $03, $01, $ff, $fd, $fc, $fd, $ff, $02, $03, $03
0f908     00 01 01 02 
0f90c     01 01 00 FE 
0f910     FB FC FE 01 
0f914     03 05 04 00 | 	byte	$00, $01, $01, $02, $01, $01, $00, $fe, $fb, $fc, $fe, $01, $03, $05, $04, $00
0f918     FC FA FC FF 
0f91c     02 04 04 02 
0f920     00 FC FC FC 
0f924     FE 00 02 03 | 	byte	$fc, $fa, $fc, $ff, $02, $04, $04, $02, $00, $fc, $fc, $fc, $fe, $00, $02, $03
0f928     03 03 03 02 
0f92c     01 00 FE FC 
0f930     FA FC FF 04 
0f934     06 06 03 FE | 	byte	$03, $03, $03, $02, $01, $00, $fe, $fc, $fa, $fc, $ff, $04, $06, $06, $03, $fe
0f938     FA F9 FC 01 
0f93c     04 06 05 02 
0f940     FE FB FA FC 
0f944     00 02 03 04 | 	byte	$fa, $f9, $fc, $01, $04, $06, $05, $02, $fe, $fb, $fa, $fc, $00, $02, $03, $04
0f948     04 03 02 FF 
0f94c     00 00 FF FB 
0f950     F9 FC FF 03 
0f954     05 05 02 FF | 	byte	$04, $03, $02, $ff, $00, $00, $ff, $fb, $f9, $fc, $ff, $03, $05, $05, $02, $ff
0f958     FB FA FD 03 
0f95c     05 06 04 01 
0f960     FD FA F9 FC 
0f964     00 02 04 05 | 	byte	$fb, $fa, $fd, $03, $05, $06, $04, $01, $fd, $fa, $f9, $fc, $00, $02, $04, $05
0f968     05 04 01 FE 
0f96c     FF FF FE FB 
0f970     FB FC 00 03 
0f974     04 04 01 FE | 	byte	$05, $04, $01, $fe, $ff, $ff, $fe, $fb, $fb, $fc, $00, $03, $04, $04, $01, $fe
0f978     FB FC FF 03 
0f97c     05 05 04 00 
0f980     FC F9 F8 FB 
0f984     FF 03 05 07 | 	byte	$fb, $fc, $ff, $03, $05, $05, $04, $00, $fc, $f9, $f8, $fb, $ff, $03, $05, $07
0f988     07 05 01 FD 
0f98c     FC FC FC FC 
0f990     FD FE 01 02 
0f994     04 02 00 FD | 	byte	$07, $05, $01, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $01, $02, $04, $02, $00, $fd
0f998     FC FE 01 03 
0f99c     04 04 03 00 
0f9a0     FD FA FA FC 
0f9a4     00 04 06 07 | 	byte	$fc, $fe, $01, $03, $04, $04, $03, $00, $fd, $fa, $fa, $fc, $00, $04, $06, $07
0f9a8     07 04 00 FD 
0f9ac     FB FB FC FD 
0f9b0     FE 00 01 01 
0f9b4     01 01 FE FD | 	byte	$07, $04, $00, $fd, $fb, $fb, $fc, $fd, $fe, $00, $01, $01, $01, $01, $fe, $fd
0f9b8     FD 00 04 04 
0f9bc     03 03 01 00 
0f9c0     FD FA FA FC 
0f9c4     FF 03 06 06 | 	byte	$fd, $00, $04, $04, $03, $03, $01, $00, $fd, $fa, $fa, $fc, $ff, $03, $06, $06
0f9c8     05 03 FF FD 
0f9cc     FC FD FD FE 
0f9d0     FF 01 02 01 
0f9d4     00 00 FD FC | 	byte	$05, $03, $ff, $fd, $fc, $fd, $fd, $fe, $ff, $01, $02, $01, $00, $00, $fd, $fc
0f9d8     FE 01 05 04 
0f9dc     03 02 01 00 
0f9e0     FC F9 FA FB 
0f9e4     FF 03 07 08 | 	byte	$fe, $01, $05, $04, $03, $02, $01, $00, $fc, $f9, $fa, $fb, $ff, $03, $07, $08
0f9e8     04 01 FD FC 
0f9ec     FC FD FD FF 
0f9f0     01 02 03 02 
0f9f4     FF FE FD FC | 	byte	$04, $01, $fd, $fc, $fc, $fd, $fd, $ff, $01, $02, $03, $02, $ff, $fe, $fd, $fc
0f9f8     FF 02 06 04 
0f9fc     03 02 00 FF 
0fa00     FB FA FA FC 
0fa04     00 03 06 07 | 	byte	$ff, $02, $06, $04, $03, $02, $00, $ff, $fb, $fa, $fa, $fc, $00, $03, $06, $07
0fa08     04 00 FC FC 
0fa0c     FD FF FF 00 
0fa10     01 02 02 01 
0fa14     FE FD FD FD | 	byte	$04, $00, $fc, $fc, $fd, $ff, $ff, $00, $01, $02, $02, $01, $fe, $fd, $fd, $fd
0fa18     00 04 05 03 
0fa1c     02 01 01 FF 
0fa20     FC FB FC FE 
0fa24     00 03 05 06 | 	byte	$00, $04, $05, $03, $02, $01, $01, $ff, $fc, $fb, $fc, $fe, $00, $03, $05, $06
0fa28     04 00 FC FB 
0fa2c     FC FE 00 02 
0fa30     02 03 02 01 
0fa34     FE FC FC FD | 	byte	$04, $00, $fc, $fb, $fc, $fe, $00, $02, $02, $03, $02, $01, $fe, $fc, $fc, $fd
0fa38     01 05 04 03 
0fa3c     02 02 01 FD 
0fa40     FA FA FC 00 
0fa44     02 04 06 05 | 	byte	$01, $05, $04, $03, $02, $02, $01, $fd, $fa, $fa, $fc, $00, $02, $04, $06, $05
0fa48     03 FE FB FA 
0fa4c     FC FF 01 03 
0fa50     04 03 02 00 
0fa54     FE FC FB FD | 	byte	$03, $fe, $fb, $fa, $fc, $ff, $01, $03, $04, $03, $02, $00, $fe, $fc, $fb, $fd
0fa58     01 04 03 02 
0fa5c     03 02 01 FD 
0fa60     FA FB FD 01 
0fa64     03 05 06 04 | 	byte	$01, $04, $03, $02, $03, $02, $01, $fd, $fa, $fb, $fd, $01, $03, $05, $06, $04
0fa68     01 FD FA FA 
0fa6c     FC FE 02 04 
0fa70     05 03 02 00 
0fa74     FE FC FA FC | 	byte	$01, $fd, $fa, $fa, $fc, $fe, $02, $04, $05, $03, $02, $00, $fe, $fc, $fa, $fc
0fa78     01 03 02 02 
0fa7c     03 03 01 FD 
0fa80     F9 FA FD 01 
0fa84     05 07 06 04 | 	byte	$01, $03, $02, $02, $03, $03, $01, $fd, $f9, $fa, $fd, $01, $05, $07, $06, $04
0fa88     00 FD FB FA 
0fa8c     FC FE 02 05 
0fa90     06 04 02 00 
0fa94     FD FC FA FD | 	byte	$00, $fd, $fb, $fa, $fc, $fe, $02, $05, $06, $04, $02, $00, $fd, $fc, $fa, $fd
0fa98     01 02 02 02 
0fa9c     02 03 00 FD 
0faa0     FA FB FE 02 
0faa4     06 07 05 02 | 	byte	$01, $02, $02, $02, $02, $03, $00, $fd, $fa, $fb, $fe, $02, $06, $07, $05, $02
0faa8     00 FD FB FB 
0faac     FC FE 01 03 
0fab0     03 02 02 01 
0fab4     FF FD FC FF | 	byte	$00, $fd, $fb, $fb, $fc, $fe, $01, $03, $03, $02, $02, $01, $ff, $fd, $fc, $ff
0fab8     01 01 FF 01 
0fabc     02 02 01 FD 
0fac0     FC FC FF 03 
0fac4     05 06 04 01 | 	byte	$01, $01, $ff, $01, $02, $02, $01, $fd, $fc, $fc, $ff, $03, $05, $06, $04, $01
0fac8     FE FC FA FB 
0facc     FD FF 01 02 
0fad0     02 02 01 01 
0fad4     00 FF FF 00 | 	byte	$fe, $fc, $fa, $fb, $fd, $ff, $01, $02, $02, $02, $01, $01, $00, $ff, $ff, $00
0fad8     01 FF FF FF 
0fadc     00 01 00 FD 
0fae0     FD FD 00 03 
0fae4     05 06 05 02 | 	byte	$01, $ff, $ff, $ff, $00, $01, $00, $fd, $fd, $fd, $00, $03, $05, $06, $05, $02
0fae8     FE FC FA FC 
0faec     FD FE 01 02 
0faf0     02 02 01 00 
0faf4     FF FE 00 01 | 	byte	$fe, $fc, $fa, $fc, $fd, $fe, $01, $02, $02, $02, $01, $00, $ff, $fe, $00, $01
0faf8     02 FF FF FF 
0fafc     00 01 FF FE 
0fb00     FE FF 00 02 
0fb04     05 06 04 02 | 	byte	$02, $ff, $ff, $ff, $00, $01, $ff, $fe, $fe, $ff, $00, $02, $05, $06, $04, $02
0fb08     FE FD FB FC 
0fb0c     FE FF 00 00 
0fb10     00 01 01 00 
0fb14     FF 00 02 02 | 	byte	$fe, $fd, $fb, $fc, $fe, $ff, $00, $00, $00, $01, $01, $00, $ff, $00, $02, $02
0fb18     02 FE FD FD 
0fb1c     FE 00 00 01 
0fb20     01 01 01 02 
0fb24     03 03 03 01 | 	byte	$02, $fe, $fd, $fd, $fe, $00, $00, $01, $01, $01, $01, $02, $03, $03, $03, $01
0fb28     FE FD FD FE 
0fb2c     FE FF FF FE 
0fb30     FE 00 00 00 
0fb34     00 01 03 04 | 	byte	$fe, $fd, $fd, $fe, $fe, $ff, $ff, $fe, $fe, $00, $00, $00, $00, $01, $03, $04
0fb38     01 FE FD FD 
0fb3c     FD FE FF 00 
0fb40     02 03 02 01 
0fb44     01 01 01 00 | 	byte	$01, $fe, $fd, $fd, $fd, $fe, $ff, $00, $02, $03, $02, $01, $01, $01, $01, $00
0fb48     FE FE FE FF 
0fb4c     FF 00 FF FE 
0fb50     FF 00 00 FF 
0fb54     00 01 03 03 | 	byte	$fe, $fe, $fe, $ff, $ff, $00, $ff, $fe, $ff, $00, $00, $ff, $00, $01, $03, $03
0fb58     01 FE FE FD 
0fb5c     FD FD FE 00 
0fb60     02 04 04 03 
0fb64     01 00 00 FF | 	byte	$01, $fe, $fe, $fd, $fd, $fd, $fe, $00, $02, $04, $04, $03, $01, $00, $00, $ff
0fb68     FF FE FF 00 
0fb6c     00 00 FF FE 
0fb70     FF FF 00 FF 
0fb74     00 02 03 03 | 	byte	$ff, $fe, $ff, $00, $00, $00, $ff, $fe, $ff, $ff, $00, $ff, $00, $02, $03, $03
0fb78     01 FF FE FD 
0fb7c     FD FD FF 02 
0fb80     03 05 04 03 
0fb84     01 00 FE FE | 	byte	$01, $ff, $fe, $fd, $fd, $fd, $ff, $02, $03, $05, $04, $03, $01, $00, $fe, $fe
0fb88     FF FF 00 01 
0fb8c     00 FF FE FD 
0fb90     00 00 FF FF 
0fb94     FF 02 03 02 | 	byte	$ff, $ff, $00, $01, $00, $ff, $fe, $fd, $00, $00, $ff, $ff, $ff, $02, $03, $02
0fb98     01 00 FE FD 
0fb9c     FD FD FE 02 
0fba0     04 04 03 02 
0fba4     01 FF FE FD | 	byte	$01, $00, $fe, $fd, $fd, $fd, $fe, $02, $04, $04, $03, $02, $01, $ff, $fe, $fd
0fba8     FE 00 02 01 
0fbac     00 FE FD FE 
0fbb0     00 01 FF FE 
0fbb4     FF 01 03 02 | 	byte	$fe, $00, $02, $01, $00, $fe, $fd, $fe, $00, $01, $ff, $fe, $ff, $01, $03, $02
0fbb8     01 00 FF FE 
0fbbc     FD FE FF 02 
0fbc0     04 03 02 02 
0fbc4     01 FF FD FD | 	byte	$01, $00, $ff, $fe, $fd, $fe, $ff, $02, $04, $03, $02, $02, $01, $ff, $fd, $fd
0fbc8     FE 00 02 01 
0fbcc     FF FE FE 00 
0fbd0     01 01 FF FD 
0fbd4     FD FF 02 03 | 	byte	$fe, $00, $02, $01, $ff, $fe, $fe, $00, $01, $01, $ff, $fd, $fd, $ff, $02, $03
0fbd8     02 02 01 FE 
0fbdc     FD FD FF 01 
0fbe0     03 03 03 02 
0fbe4     01 00 FD FD | 	byte	$02, $02, $01, $fe, $fd, $fd, $ff, $01, $03, $03, $03, $02, $01, $00, $fd, $fd
0fbe8     FD 01 02 02 
0fbec     00 FE FE 00 
0fbf0     02 02 FF FD 
0fbf4     FC FF 02 02 | 	byte	$fd, $01, $02, $02, $00, $fe, $fe, $00, $02, $02, $ff, $fd, $fc, $ff, $02, $02
0fbf8     02 02 01 FE 
0fbfc     FD FD FF 01 
0fc00     03 04 04 03 
0fc04     01 FF FD FD | 	byte	$02, $02, $01, $fe, $fd, $fd, $ff, $01, $03, $04, $04, $03, $01, $ff, $fd, $fd
0fc08     FD 00 02 01 
0fc0c     00 FE FE 00 
0fc10     02 01 FF FD 
0fc14     FD FF 02 02 | 	byte	$fd, $00, $02, $01, $00, $fe, $fe, $00, $02, $01, $ff, $fd, $fd, $ff, $02, $02
0fc18     03 03 02 FF 
0fc1c     FD FD FE 00 
0fc20     01 03 05 04 
0fc24     02 FE FD FD | 	byte	$03, $03, $02, $ff, $fd, $fd, $fe, $00, $01, $03, $05, $04, $02, $fe, $fd, $fd
0fc28     FD 00 01 01 
0fc2c     00 FF FF 01 
0fc30     02 01 FF FE 
0fc34     FE FF 01 01 | 	byte	$fd, $00, $01, $01, $00, $ff, $ff, $01, $02, $01, $ff, $fe, $fe, $ff, $01, $01
0fc38     02 03 01 FF 
0fc3c     FD FD FE 01 
0fc40     02 03 06 04 
0fc44     01 FE FC FC | 	byte	$02, $03, $01, $ff, $fd, $fd, $fe, $01, $02, $03, $06, $04, $01, $fe, $fc, $fc
0fc48     FE 02 02 02 
0fc4c     01 FF FF 00 
0fc50     00 FF FE FE 
0fc54     FF 00 01 01 | 	byte	$fe, $02, $02, $02, $01, $ff, $ff, $00, $00, $ff, $fe, $fe, $ff, $00, $01, $01
0fc58     02 03 01 FF 
0fc5c     FD FD FE 00 
0fc60     02 03 05 04 
0fc64     01 FE FC FD | 	byte	$02, $03, $01, $ff, $fd, $fd, $fe, $00, $02, $03, $05, $04, $01, $fe, $fc, $fd
0fc68     FF 02 02 01 
0fc6c     FF FF 00 01 
0fc70     01 FF FE FF 
0fc74     00 01 00 FF | 	byte	$ff, $02, $02, $01, $ff, $ff, $00, $01, $01, $ff, $fe, $ff, $00, $01, $00, $ff
0fc78     01 01 01 FF 
0fc7c     FE FF FF 01 
0fc80     01 02 02 02 
0fc84     00 FF FE FE | 	byte	$01, $01, $01, $ff, $fe, $ff, $ff, $01, $01, $02, $02, $02, $00, $ff, $fe, $fe
0fc88     00 02 01 FF 
0fc8c     FD FE 00 02 
0fc90     01 FE FD FE 
0fc94     00 01 00 00 | 	byte	$00, $02, $01, $ff, $fd, $fe, $00, $02, $01, $fe, $fd, $fe, $00, $01, $00, $00
0fc98     01 01 00 FF 
0fc9c     FF FF 00 01 
0fca0     01 02 01 01 
0fca4     01 00 FF FF | 	byte	$01, $01, $00, $ff, $ff, $ff, $00, $01, $01, $02, $01, $01, $01, $00, $ff, $ff
0fca8     01 01 FF FD 
0fcac     FC FE 03 04 
0fcb0     03 FF FE FE 
0fcb4     FF 00 FE FF | 	byte	$01, $01, $ff, $fd, $fc, $fe, $03, $04, $03, $ff, $fe, $fe, $ff, $00, $fe, $ff
0fcb8     01 01 00 FF 
0fcbc     FF 00 01 02 
0fcc0     01 01 00 01 
0fcc4     01 00 FF FF | 	byte	$01, $01, $00, $ff, $ff, $00, $01, $02, $01, $01, $00, $01, $01, $00, $ff, $ff
0fcc8     01 02 00 FD 
0fccc     FC FE 03 05 
0fcd0     03 FF FD FE 
0fcd4     FE FE FE FF | 	byte	$01, $02, $00, $fd, $fc, $fe, $03, $05, $03, $ff, $fd, $fe, $fe, $fe, $fe, $ff
0fcd8     01 01 00 FE 
0fcdc     FF 01 02 02 
0fce0     01 00 FF 00 
0fce4     01 00 00 01 | 	byte	$01, $01, $00, $fe, $ff, $01, $02, $02, $01, $00, $ff, $00, $01, $00, $00, $01
0fce8     02 02 FF FC 
0fcec     FB FE 03 05 
0fcf0     04 00 FE FD 
0fcf4     FD FC FD 00 | 	byte	$02, $02, $ff, $fc, $fb, $fe, $03, $05, $04, $00, $fe, $fd, $fd, $fc, $fd, $00
0fcf8     02 02 00 FF 
0fcfc     00 00 01 02 
0fd00     01 00 FF FF 
0fd04     00 01 01 02 | 	byte	$02, $02, $00, $ff, $00, $00, $01, $02, $01, $00, $ff, $ff, $00, $01, $01, $02
0fd08     02 01 FE FB 
0fd0c     FB FE 02 05 
0fd10     04 02 FF FE 
0fd14     FC FB FC FF | 	byte	$02, $01, $fe, $fb, $fb, $fe, $02, $05, $04, $02, $ff, $fe, $fc, $fb, $fc, $ff
0fd18     01 02 02 01 
0fd1c     01 00 01 01 
0fd20     01 FF FF FF 
0fd24     00 01 02 03 | 	byte	$01, $02, $02, $01, $01, $00, $01, $01, $01, $ff, $ff, $ff, $00, $01, $02, $03
0fd28     03 01 FD FB 
0fd2c     FB FE 02 04 
0fd30     04 04 01 FF 
0fd34     FD FB FC FE | 	byte	$03, $01, $fd, $fb, $fb, $fe, $02, $04, $04, $04, $01, $ff, $fd, $fb, $fc, $fe
0fd38     00 01 02 02 
0fd3c     02 01 01 00 
0fd40     00 FF FF FF 
0fd44     00 01 02 03 | 	byte	$00, $01, $02, $02, $02, $01, $01, $00, $00, $ff, $ff, $ff, $00, $01, $02, $03
0fd48     04 01 FD FB 
0fd4c     FB FF 02 03 
0fd50     03 03 02 FF 
0fd54     FC FA FC FF | 	byte	$04, $01, $fd, $fb, $fb, $ff, $02, $03, $03, $03, $02, $ff, $fc, $fa, $fc, $ff
0fd58     00 01 02 02 
0fd5c     02 01 00 FF 
0fd60     FF FF 00 00 
0fd64     00 00 02 03 | 	byte	$00, $01, $02, $02, $02, $01, $00, $ff, $ff, $ff, $00, $00, $00, $00, $02, $03
0fd68     03 00 FD FB 
0fd6c     FC 00 01 02 
0fd70     02 02 02 FF 
0fd74     FB FA FD 00 | 	byte	$03, $00, $fd, $fb, $fc, $00, $01, $02, $02, $02, $02, $ff, $fb, $fa, $fd, $00
0fd78     01 02 02 03 
0fd7c     02 01 00 FE 
0fd80     FD FF 00 01 
0fd84     02 01 02 03 | 	byte	$01, $02, $02, $03, $02, $01, $00, $fe, $fd, $ff, $00, $01, $02, $01, $02, $03
0fd88     02 FF FC FB 
0fd8c     FD 00 03 02 
0fd90     02 02 00 FE 
0fd94     FA F9 FD FF | 	byte	$02, $ff, $fc, $fb, $fd, $00, $03, $02, $02, $02, $00, $fe, $fa, $f9, $fd, $ff
0fd98     02 02 03 03 
0fd9c     03 02 00 FE 
0fda0     FD FE 00 01 
0fda4     02 02 03 04 | 	byte	$02, $02, $03, $03, $03, $02, $00, $fe, $fd, $fe, $00, $01, $02, $02, $03, $04
0fda8     02 00 FC FB 
0fdac     FC FF 01 02 
0fdb0     03 03 01 FF 
0fdb4     FB FA FD FF | 	byte	$02, $00, $fc, $fb, $fc, $ff, $01, $02, $03, $03, $01, $ff, $fb, $fa, $fd, $ff
0fdb8     01 02 03 03 
0fdbc     03 02 FF FE 
0fdc0     FD FE FF 01 
0fdc4     01 02 03 03 | 	byte	$01, $02, $03, $03, $03, $02, $ff, $fe, $fd, $fe, $ff, $01, $01, $02, $03, $03
0fdc8     02 00 FD FB 
0fdcc     FD FE 00 01 
0fdd0     03 03 01 FE 
0fdd4     FC FB FD FE | 	byte	$02, $00, $fd, $fb, $fd, $fe, $00, $01, $03, $03, $01, $fe, $fc, $fb, $fd, $fe
0fdd8     00 02 03 04 
0fddc     04 02 00 FE 
0fde0     FD FE 00 01 
0fde4     02 02 03 02 | 	byte	$00, $02, $03, $04, $04, $02, $00, $fe, $fd, $fe, $00, $01, $02, $02, $03, $02
0fde8     00 FE FC FC 
0fdec     FE 00 01 02 
0fdf0     03 02 00 FE 
0fdf4     FC FD FE FF | 	byte	$00, $fe, $fc, $fc, $fe, $00, $01, $02, $03, $02, $00, $fe, $fc, $fd, $fe, $ff
0fdf8     00 01 02 03 
0fdfc     04 02 00 FF 
0fe00     FE FF 00 01 
0fe04     01 01 02 02 | 	byte	$00, $01, $02, $03, $04, $02, $00, $ff, $fe, $ff, $00, $01, $01, $01, $02, $02
0fe08     FF FE FE FF 
0fe0c     FF 00 00 01 
0fe10     01 01 FF FE 
0fe14     FD FF 00 FF | 	byte	$ff, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $01, $ff, $fe, $fd, $ff, $00, $ff
0fe18     00 FF 02 03 
0fe1c     03 01 00 FF 
0fe20     00 00 01 01 
0fe24     01 02 02 01 | 	byte	$00, $ff, $02, $03, $03, $01, $00, $ff, $00, $00, $01, $01, $01, $02, $02, $01
0fe28     FF FD FE FF 
0fe2c     00 01 00 00 
0fe30     00 FF FE FC 
0fe34     FE 00 01 01 | 	byte	$ff, $fd, $fe, $ff, $00, $01, $00, $00, $00, $ff, $fe, $fc, $fe, $00, $01, $01
0fe38     00 00 01 02 
0fe3c     02 01 FF FF 
0fe40     FF 00 01 01 
0fe44     01 01 01 FF | 	byte	$00, $00, $01, $02, $02, $01, $ff, $ff, $ff, $00, $01, $01, $01, $01, $01, $ff
0fe48     FD FC FE 00 
0fe4c     02 03 02 01 
0fe50     FF FE FD FC 
0fe54     FD 00 01 02 | 	byte	$fd, $fc, $fe, $00, $02, $03, $02, $01, $ff, $fe, $fd, $fc, $fd, $00, $01, $02
0fe58     01 01 01 01 
0fe5c     01          | 	byte	$01[5]
0fe5d     00 FF FE FF 
0fe61     01 02 02 02 
0fe65     01 00 FE FC 
0fe69     FC FE 01 04 | 	byte	$00, $ff, $fe, $ff, $01, $02, $02, $02, $01, $00, $fe, $fc, $fc, $fe, $01, $04
0fe6d     04 02 00 FD 
0fe71     FC FC FC FE 
0fe75     00 02 03 01 
0fe79     00 00 00 00 | 	byte	$04, $02, $00, $fd, $fc, $fc, $fc, $fe, $00, $02, $03, $01, $00, $00, $00, $00
0fe7d     01 00 FF 00 
0fe81     00 01 01 01 
0fe85     01 00 FD FC 
0fe89     FC FF 02 05 | 	byte	$01, $00, $ff, $00, $00, $01, $01, $01, $01, $00, $fd, $fc, $fc, $ff, $02, $05
0fe8d     05 03 01 FE 
0fe91     FC FB FB FD 
0fe95     00 02 03 02 
0fe99     01 00 00 00 | 	byte	$05, $03, $01, $fe, $fc, $fb, $fb, $fd, $00, $02, $03, $02, $01, $00, $00, $00
0fe9d     00 FF FF 00 
0fea1     01 02 01 01 
0fea5     01 FE FD FC 
0fea9     FD 00 03 05 | 	byte	$00, $ff, $ff, $00, $01, $02, $01, $01, $01, $fe, $fd, $fc, $fd, $00, $03, $05
0fead     04 03 01 FE 
0feb1     FC F9 FA FD 
0feb5     00 03 04 03 
0feb9     01 FF FE FE | 	byte	$04, $03, $01, $fe, $fc, $f9, $fa, $fd, $00, $03, $04, $03, $01, $ff, $fe, $fe
0febd     FF FF 00 01 
0fec1     03 03 01 00 
0fec5     FF FD FC FC 
0fec9     FE 02 04 05 | 	byte	$ff, $ff, $00, $01, $03, $03, $01, $00, $ff, $fd, $fc, $fc, $fe, $02, $04, $05
0fecd     04 03 01 FF 
0fed1     FB F9 FA FE 
0fed5     01 03 04 04 
0fed9     02 FF FE FC | 	byte	$04, $03, $01, $ff, $fb, $f9, $fa, $fe, $01, $03, $04, $04, $02, $ff, $fe, $fc
0fedd     FD FF 01 03 
0fee1     04 04 02 00 
0fee5     FE FC FB FC 
0fee9     FF 03 05 05 | 	byte	$fd, $ff, $01, $03, $04, $04, $02, $00, $fe, $fc, $fb, $fc, $ff, $03, $05, $05
0feed     04 03 00 FE 
0fef1     FB F9 FB FE 
0fef5     01 03 03 03 
0fef9     01 00 FE FD | 	byte	$04, $03, $00, $fe, $fb, $f9, $fb, $fe, $01, $03, $03, $03, $01, $00, $fe, $fd
0fefd     FC FE 02 04 
0ff01     05 04 02 01 
0ff05     FE FB FA FB 
0ff09     FF 03 05 05 | 	byte	$fc, $fe, $02, $04, $05, $04, $02, $01, $fe, $fb, $fa, $fb, $ff, $03, $05, $05
0ff0d     05 03 01 FE 
0ff11     FB FA FB FD 
0ff15     00 02 03 02 
0ff19     01 01 FF FE | 	byte	$05, $03, $01, $fe, $fb, $fa, $fb, $fd, $00, $02, $03, $02, $01, $01, $ff, $fe
0ff1d     FC FE 01 04 
0ff21     05 04 02 01 
0ff25     FE FB FA FB 
0ff29     00 03 05 05 | 	byte	$fc, $fe, $01, $04, $05, $04, $02, $01, $fe, $fb, $fa, $fb, $00, $03, $05, $05
0ff2d     04 02 00 FE 
0ff31     FC FC FD FF 
0ff35     00 01 01 00 
0ff39     01 01 00 FE | 	byte	$04, $02, $00, $fe, $fc, $fc, $fd, $ff, $00, $01, $01, $00, $01, $01, $00, $fe
0ff3d     FD FE 00 03 
0ff41     04 04 03 02 
0ff45     FE FB FA FC 
0ff49     00 03 05 04 | 	byte	$fd, $fe, $00, $03, $04, $04, $03, $02, $fe, $fb, $fa, $fc, $00, $03, $05, $04
0ff4d     03 02 FF FE 
0ff51     FC FD FE 00 
0ff55     00 00 00 00 
0ff59     01 01 01 FF | 	byte	$03, $02, $ff, $fe, $fc, $fd, $fe, $00, $00, $00, $00, $00, $01, $01, $01, $ff
0ff5d     FE FE 00 03 
0ff61     03 04 03 01 
0ff65     FD FA FA FD 
0ff69     01 04 04 04 | 	byte	$fe, $fe, $00, $03, $03, $04, $03, $01, $fd, $fa, $fa, $fd, $01, $04, $04, $04
0ff6d     03 01 FF FD 
0ff71     FB FD 00 01 
0ff75     01 00 FF FF 
0ff79     00 00 00 FF | 	byte	$03, $01, $ff, $fd, $fb, $fd, $00, $01, $01, $00, $ff, $ff, $00, $00, $00, $ff
0ff7d     FF FF 01 03 
0ff81     04 04 03 00 
0ff85     FC FA FA FE 
0ff89     01 04 05 04 | 	byte	$ff, $ff, $01, $03, $04, $04, $03, $00, $fc, $fa, $fa, $fe, $01, $04, $05, $04
0ff8d     03 00 FE FC 
0ff91     FC FE 00 02 
0ff95     01 00 FF FF 
0ff99     00 00 00 FF | 	byte	$03, $00, $fe, $fc, $fc, $fe, $00, $02, $01, $00, $ff, $ff, $00, $00, $00, $ff
0ff9d     FF 00 01 03 
0ffa1     03 04 03 00 
0ffa5     FC FA FB FD 
0ffa9     01 03 04 04 | 	byte	$ff, $00, $01, $03, $03, $04, $03, $00, $fc, $fa, $fb, $fd, $01, $03, $04, $04
0ffad     03 01 FE FC 
0ffb1     FC FE 00 01 
0ffb5     01 00 FF 00 
0ffb9     00 00 00 FE | 	byte	$03, $01, $fe, $fc, $fc, $fe, $00, $01, $01, $00, $ff, $00, $00, $00, $00, $fe
0ffbd     FF 00 02 03 
0ffc1     05 04 03 FF 
0ffc5     FC FA FB FE 
0ffc9     01 04 04 04 | 	byte	$ff, $00, $02, $03, $05, $04, $03, $ff, $fc, $fa, $fb, $fe, $01, $04, $04, $04
0ffcd     02 00 FE FC 
0ffd1     FC FE 00 01 
0ffd5     01 00 FF FF 
0ffd9     01 01 01 FF | 	byte	$02, $00, $fe, $fc, $fc, $fe, $00, $01, $01, $00, $ff, $ff, $01, $01, $01, $ff
0ffdd     FF FF 01 02 
0ffe1     03 04 02 FF 
0ffe5     FC FB FC FF 
0ffe9     01 03 03 04 | 	byte	$ff, $ff, $01, $02, $03, $04, $02, $ff, $fc, $fb, $fc, $ff, $01, $03, $03, $04
0ffed     02 00 FD FC 
0fff1     FD FF 00 01 
0fff5     01 00 FF 00 
0fff9     00 00 00 FF | 	byte	$02, $00, $fd, $fc, $fd, $ff, $00, $01, $01, $00, $ff, $00, $00, $00, $00, $ff
0fffd     00 00 01 02 
10001     03 03 01 FE 
10005     FC FC FD 00 
10009     01 03 03 03 | 	byte	$00, $00, $01, $02, $03, $03, $01, $fe, $fc, $fc, $fd, $00, $01, $03, $03, $03
1000d     01 FF FD FC 
10011     FD FF 00 01 
10015     00 00 00 01 
10019     01 00 FF FF | 	byte	$01, $ff, $fd, $fc, $fd, $ff, $00, $01, $00, $00, $00, $01, $01, $00, $ff, $ff
1001d     00 01 02 02 
10021     02 01 FF FC 
10025     FB FC FF 01 
10029     03 03 03 02 | 	byte	$00, $01, $02, $02, $02, $01, $ff, $fc, $fb, $fc, $ff, $01, $03, $03, $03, $02
1002d     01 FE FC FC 
10031     FD FF 01 01 
10035     00 00 00 00 
10039     00 FF FF FF | 	byte	$01, $fe, $fc, $fc, $fd, $ff, $01, $01, $00, $00, $00, $00, $00, $ff, $ff, $ff
1003d     00 01 02 02 
10041     02 00 FE FC 
10045     FC FD 01 02 
10049     03 03 02 01 | 	byte	$00, $01, $02, $02, $02, $00, $fe, $fc, $fc, $fd, $01, $02, $03, $03, $02, $01
1004d     00 FE FD FD 
10051     FE FF 00 00 
10055     00 00 00 01 
10059     01 00 FF 00 | 	byte	$00, $fe, $fd, $fd, $fe, $ff, $00, $00, $00, $00, $00, $01, $01, $00, $ff, $00
1005d     01 02 02 02 
10061     01 00 FD FB 
10065     FB FD 01 03 
10069     04 04 02 01 | 	byte	$01, $02, $02, $02, $01, $00, $fd, $fb, $fb, $fd, $01, $03, $04, $04, $02, $01
1006d     00 FE FD FD 
10071     FD FF 00 00 
10075     00 00 00 01 
10079     01 00 FF 00 | 	byte	$00, $fe, $fd, $fd, $fd, $ff, $00, $00, $00, $00, $00, $01, $01, $00, $ff, $00
1007d     01 03 03 02 
10081     00 FF FC FA 
10085     FB FE 02 04 
10089     05 04 01 00 | 	byte	$01, $03, $03, $02, $00, $ff, $fc, $fa, $fb, $fe, $02, $04, $05, $04, $01, $00
1008d     FF FF FE FF 
10091     FF 00 00 FF 
10095     FF FE FE 00 
10099     01 01 01 01 | 	byte	$ff, $ff, $fe, $ff, $ff, $00, $00, $ff, $ff, $fe, $fe, $00, $01, $01, $01, $01
1009d     01 03 02 01 
100a1     00 FE FC FC 
100a5     FD 00 03 04 
100a9     05 03 00 FF | 	byte	$01, $03, $02, $01, $00, $fe, $fc, $fc, $fd, $00, $03, $04, $05, $03, $00, $ff
100ad     FE FF 00 01 
100b1     01 01 00 FF 
100b5     FE FE FE FF 
100b9     01 01 01 01 | 	byte	$fe, $ff, $00, $01, $01, $01, $00, $ff, $fe, $fe, $fe, $ff, $01, $01, $01, $01
100bd     02 02 02 01 
100c1     00 FD FC FC 
100c5     FE 01 03 04 
100c9     04 02 00 FE | 	byte	$02, $02, $02, $01, $00, $fd, $fc, $fc, $fe, $01, $03, $04, $04, $02, $00, $fe
100cd     FD FE FF 00 
100d1     01 01 00 FF 
100d5     FE FD FE FF 
100d9     01 01 02 02 | 	byte	$fd, $fe, $ff, $00, $01, $01, $00, $ff, $fe, $fd, $fe, $ff, $01, $01, $02, $02
100dd     02 02 01 01 
100e1     FF FD FC FD 
100e5     FF 01 02 03 
100e9     03 02 00 FF | 	byte	$02, $02, $01, $01, $ff, $fd, $fc, $fd, $ff, $01, $02, $03, $03, $02, $00, $ff
100ed     FE FE FE FF 
100f1     01 02 00 FF 
100f5     FF FF FF 00 
100f9     00 00 01 01 | 	byte	$fe, $fe, $fe, $ff, $01, $02, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $01, $01
100fd     01 02 02 02 
10101     01 FD FC FC 
10105     FE 00 02 02 
10109     03 02 02 01 | 	byte	$01, $02, $02, $02, $01, $fd, $fc, $fc, $fe, $00, $02, $02, $03, $02, $02, $01
1010d     FF FE FD FE 
10111     00 01 01 01 
10115     FF 00 00 00 
10119     FF FF 00 00 | 	byte	$ff, $fe, $fd, $fe, $00, $01, $01, $01, $ff, $00, $00, $00, $ff, $ff, $00, $00
1011d     01 01 01 01 
10121     01          | 	byte	$01[5]
10122     FE FD FD FF 
10126     01 02 02 02 
1012a     02 02 01 00 
1012e     FD FC FD 00 | 	byte	$fe, $fd, $fd, $ff, $01, $02, $02, $02, $02, $02, $01, $00, $fd, $fc, $fd, $00
10132     01 01 00 00 
10136     00 01 01 00 
1013a     00 00 00 01 
1013e     FF 00 01 00 | 	byte	$01, $01, $00, $00, $00, $01, $01, $00, $00, $00, $00, $01, $ff, $00, $01, $00
10142     FF FE FE 00 
10146     01 02 02 01 
1014a     01 02 01 00 
1014e     FD FC FD 00 | 	byte	$ff, $fe, $fe, $00, $01, $02, $02, $01, $01, $02, $01, $00, $fd, $fc, $fd, $00
10152     01 02 01 00 
10156     00 00 01 00 
1015a     00 01 01 00 
1015e     FF FF 00 00 | 	byte	$01, $02, $01, $00, $00, $00, $01, $00, $00, $01, $01, $00, $ff, $ff, $00, $00
10162     FF FF FF 01 
10166     01 01 01 00 
1016a     01 02 02 00 
1016e     FD FC FC FF | 	byte	$ff, $ff, $ff, $01, $01, $01, $01, $00, $01, $02, $02, $00, $fd, $fc, $fc, $ff
10172     00 01 01 00 
10176     00 01 01 00 
1017a     00 01 01 01 
1017e     00 FF FF FE | 	byte	$00, $01, $01, $00, $00, $01, $01, $00, $00, $01, $01, $01, $00, $ff, $ff, $fe
10182     FE FF 00 01 
10186     02 01 01 00 
1018a     01 02 01 00 
1018e     FE FD FD FF | 	byte	$fe, $ff, $00, $01, $02, $01, $01, $00, $01, $02, $01, $00, $fe, $fd, $fd, $ff
10192     00 01 00 00 
10196     00 01 01 01 
1019a     00 00 01 00 
1019e     00 FF FF FD | 	byte	$00, $01, $00, $00, $00, $01, $01, $01, $00, $00, $01, $00, $00, $ff, $ff, $fd
101a2     FE 00 01 02 
101a6     02 00 01 00 
101aa     01 01 01 00 
101ae     FE FD FD FE | 	byte	$fe, $00, $01, $02, $02, $00, $01, $00, $01, $01, $01, $00, $fe, $fd, $fd, $fe
101b2     FF 00 00 01 
101b6     01 01 00 00 
101ba     00 00 00 00 
101be     00 00 FE FE | 	byte	$ff, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $fe
101c2     FE FF 01 02 
101c6     02 01 00 00 
101ca     00 01 00 00 
101ce     FE FE FF FE | 	byte	$fe, $ff, $01, $02, $02, $01, $00, $00, $00, $01, $00, $00, $fe, $fe, $ff, $fe
101d2     FF FF 00 01 
101d6     01 01 01 00 
101da     00 FF FF 00 
101de     00 00 FF FE | 	byte	$ff, $ff, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $00, $00, $00, $ff, $fe
101e2     FF 00 01 01 
101e6     01 00 00 00 
101ea     01 01 00 00 
101ee     FF FE FE FE | 	byte	$ff, $00, $01, $01, $01, $00, $00, $00, $01, $01, $00, $00, $ff, $fe, $fe, $fe
101f2     FF FF 00 01 
101f6     02 02 01 01 
101fa     00 FF FF 00 
101fe     00 00 FF FF | 	byte	$ff, $ff, $00, $01, $02, $02, $01, $01, $00, $ff, $ff, $00, $00, $00, $ff, $ff
10202     FF 00 01 01 
10206     01 00 FF 00 
1020a     00 00 00 00 
1020e     FF FF FF FF | 	byte	$ff, $00, $01, $01, $01, $00, $ff, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff
10212     FF FF FF 00 
10216     01 02 01 01 
1021a     00 00 FF FF 
1021e     00 FF FF FF | 	byte	$ff, $ff, $ff, $00, $01, $02, $01, $01, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
10222     00 00 00 01 
10226     01 01 00 00 
1022a     00 00 00 FF 
1022e     FF 00 FF FF | 	byte	$00, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $ff, $ff, $00, $ff, $ff
10232     FF FF FF 00 
10236     01 02 02 01 
1023a     00 00 FF FF 
1023e     FF FF 00 00 | 	byte	$ff, $ff, $ff, $00, $01, $02, $02, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00
10242     00 00 00 00 
10246     00          | 	byte	$00[5]
10247     01 00 00 00 
1024b     00 00 FF FF 
1024f     FF FF FF 00 
10253     FF 00 01 02 | 	byte	$01, $00, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $00, $01, $02
10257     01 01 01 00 
1025b     00 00 00 00 
1025f     00 00 01 00 
10263     00 00 00 F6 | 	byte	$01, $01, $01, $00, $00, $00, $00, $00, $00, $00, $01, $00, $00, $00, $00, $f6
10267     F7 F8 F8 F8 
1026b     F9 FA FB FC 
1026f     FC FC FC FD 
10273     F9 F0 E6 DF | 	byte	$f7, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fc, $fc, $fc, $fd, $f9, $f0, $e6, $df
10277     DC DB DB DC 
1027b     DE E2 E5 E7 
1027f     E8 EA EB EC 
10283     EF F3 F6 F8 | 	byte	$dc, $db, $db, $dc, $de, $e2, $e5, $e7, $e8, $ea, $eb, $ec, $ef, $f3, $f6, $f8
10287     F9 FA FB FC 
1028b     FF 03 05 06 
1028f     07 08 08 09 
10293     0A 0B 09 07 | 	byte	$f9, $fa, $fb, $fc, $ff, $03, $05, $06, $07, $08, $08, $09, $0a, $0b, $09, $07
10297     04 02 01 02 
1029b     05 08 09 0A 
1029f     09 09 08 08 
102a3     0B 06 00 FF | 	byte	$04, $02, $01, $02, $05, $08, $09, $0a, $09, $09, $08, $08, $0b, $06, $00, $ff
102a7     00 01 02 04 
102ab     08 0D 0E 0F 
102af     0F 0F 0F 0F 
102b3     11 10 0B 07 | 	byte	$00, $01, $02, $04, $08, $0d, $0e, $0f, $0f, $0f, $0f, $0f, $11, $10, $0b, $07
102b7     04 03 03 03 
102bb     07 0A 09 08 
102bf     07 06 06 09 
102c3     12 1B 1E 1F | 	byte	$04, $03, $03, $03, $07, $0a, $09, $08, $07, $06, $06, $09, $12, $1b, $1e, $1f
102c7     20 20 20 22 
102cb     28 2D 2E 2D 
102cf     2C 2B 2A 0F 
102d3     D0 B4 B4 B8 | 	byte	$20, $20, $20, $22, $28, $2d, $2e, $2d, $2c, $2b, $2a, $0f, $d0, $b4, $b4, $b8
102d7     BC C0 C4 CA 
102db     D4 DA DD DE 
102df     E0 E2 E3 E8 
102e3     F2 F4 F3 F4 | 	byte	$bc, $c0, $c4, $ca, $d4, $da, $dd, $de, $e0, $e2, $e3, $e8, $f2, $f4, $f3, $f4
102e7     F5 F7 F8 FD 
102eb     04 06 05 05 
102ef     06 06 08 0E 
102f3     1C 22 23 22 | 	byte	$f5, $f7, $f8, $fd, $04, $06, $05, $05, $06, $06, $08, $0e, $1c, $22, $23, $22
102f7     21 20 20 24 
102fb     29 2A 28 26 
102ff     24 23 23 2A 
10303     38 3C 3B 39 | 	byte	$21, $20, $20, $24, $29, $2a, $28, $26, $24, $23, $23, $2a, $38, $3c, $3b, $39
10307     37 35 34 39 
1030b     41 42 40 3D 
1030f     39 37 2D 14 
10313     FE F7 F7 F7 | 	byte	$37, $35, $34, $39, $41, $42, $40, $3d, $39, $37, $2d, $14, $fe, $f7, $f7, $f7
10317     F8 F8 F3 EC 
1031b     E4 E2 E6 E9 
1031f     ED EF F0 D1 
10323     BE BF C3 C6 | 	byte	$f8, $f8, $f3, $ec, $e4, $e2, $e6, $e9, $ed, $ef, $f0, $d1, $be, $bf, $c3, $c6
10327     CA CE D3 DF 
1032b     E9 EB EC ED 
1032f     EF F1 F6 0C 
10333     19 1B 1A 19 | 	byte	$ca, $ce, $d3, $df, $e9, $eb, $ec, $ed, $ef, $f1, $f6, $0c, $19, $1b, $1a, $19
10337     19 18 1B 26 
1033b     2C 2C 2A 28 
1033f     26 24 2A 3C 
10343     44 42 3E 3A | 	byte	$19, $18, $1b, $26, $2c, $2c, $2a, $28, $26, $24, $2a, $3c, $44, $42, $3e, $3a
10347     37 34 36 3F 
1034b     43 40 3B 37 
1034f     34 31 2C EA 
10353     C1 BD BF C1 | 	byte	$37, $34, $36, $3f, $43, $40, $3b, $37, $34, $31, $2c, $ea, $c1, $bd, $bf, $c1
10357     C2 C2 C2 C4 
1035b     C6 C7 CA CD 
1035f     D0 CD C0 C1 
10363     C5 C9 CB CE | 	byte	$c2, $c2, $c2, $c4, $c6, $c7, $ca, $cd, $d0, $cd, $c0, $c1, $c5, $c9, $cb, $ce
10367     D1 D3 D4 D4 
1036b     D5 D7 DA DD 
1036f     E0 E6 FD 0F 
10373     15 16 14 14 | 	byte	$d1, $d3, $d4, $d4, $d5, $d7, $da, $dd, $e0, $e6, $fd, $0f, $15, $16, $14, $14
10377     14 16 1E 29 
1037b     2D 2B 29 27 
1037f     25 2B 3C 4A 
10383     4B 47 43 3F | 	byte	$14, $16, $1e, $29, $2d, $2b, $29, $27, $25, $2b, $3c, $4a, $4b, $47, $43, $3f
10387     3C 3C 41 49 
1038b     49 45 3F 3C 
1038f     36 1D 01 F7 
10393     F7 F8 F8 F8 | 	byte	$3c, $3c, $41, $49, $49, $45, $3f, $3c, $36, $1d, $01, $f7, $f7, $f8, $f8, $f8
10397     F8 F9 F5 EA 
1039b     E4 E6 E8 EA 
1039f     ED D2 9D 94 
103a3     9A 9F A4 A9 | 	byte	$f8, $f9, $f5, $ea, $e4, $e6, $e8, $ea, $ed, $d2, $9d, $94, $9a, $9f, $a4, $a9
103a7     AC B1 B6 BF 
103ab     C5 C9 CC D0 
103af     D8 EC FE 0A 
103b3     0C 0C 0C 0C | 	byte	$ac, $b1, $b6, $bf, $c5, $c9, $cc, $d0, $d8, $ec, $fe, $0a, $0c, $0c, $0c, $0c
103b7     0E 13 1E 27 
103bb     28 26 24 23 
103bf     28 37 44 49 
103c3     48 44 40 3C | 	byte	$0e, $13, $1e, $27, $28, $26, $24, $23, $28, $37, $44, $49, $48, $44, $40, $3c
103c7     3A 3E 45 4A 
103cb     47 42 3E 3B 
103cf     41 4A 1B DE 
103d3     C7 C5 C5 C5 | 	byte	$3a, $3e, $45, $4a, $47, $42, $3e, $3b, $41, $4a, $1b, $de, $c7, $c5, $c5, $c5
103d7     C5 C2 C1 C5 
103db     C8 CB CB B5 
103df     8F 8C 9A A6 
103e3     AD B2 B6 BB | 	byte	$c5, $c2, $c1, $c5, $c8, $cb, $cb, $b5, $8f, $8c, $9a, $a6, $ad, $b2, $b6, $bb
103e7     BE B9 B3 B7 
103eb     BE C3 C8 D2 
103ef     E1 F5 02 0A 
103f3     0D 0D 0D 0E | 	byte	$be, $b9, $b3, $b7, $be, $c3, $c8, $d2, $e1, $f5, $02, $0a, $0d, $0d, $0d, $0e
103f7     13 1C 26 2B 
103fb     2B 2A 29 2E 
103ff     3A 45 4C 4E 
10403     4C 49 45 42 | 	byte	$13, $1c, $26, $2b, $2b, $2a, $29, $2e, $3a, $45, $4c, $4e, $4c, $49, $45, $42
10407     44 48 4D 4F 
1040b     4C 46 45 3F 
1040f     19 FA F3 F5 
10413     F7 F7 F7 F9 | 	byte	$44, $48, $4d, $4f, $4c, $46, $45, $3f, $19, $fa, $f3, $f5, $f7, $f7, $f7, $f9
10417     FF 02 F9 E9 
1041b     E4 E6 EB EA 
1041f     B6 90 8D 95 
10423     9B A0 A2 9F | 	byte	$ff, $02, $f9, $e9, $e4, $e6, $eb, $ea, $b6, $90, $8d, $95, $9b, $a0, $a2, $9f
10427     9C A0 AC B8 
1042b     BE C4 CF DB 
1042f     ED F8 02 08 
10433     0B 0B 0C 10 | 	byte	$9c, $a0, $ac, $b8, $be, $c4, $cf, $db, $ed, $f8, $02, $08, $0b, $0b, $0c, $10
10437     17 1F 26 29 
1043b     29 29 2D 35 
1043f     3F 46 49 4A 
10443     48 44 41 41 | 	byte	$17, $1f, $26, $29, $29, $29, $2d, $35, $3f, $46, $49, $4a, $48, $44, $41, $41
10447     45 47 4A 4A 
1044b     46 46 47 4C 
1044f     52 42 08 D7 
10453     C8 C5 C5 C6 | 	byte	$45, $47, $4a, $4a, $46, $46, $47, $4c, $52, $42, $08, $d7, $c8, $c5, $c5, $c6
10457     C0 BA BB C1 
1045b     BF 9D 82 80 
1045f     85 92 9E A9 
10463     AF B5 BA BE | 	byte	$c0, $ba, $bb, $c1, $bf, $9d, $82, $80, $85, $92, $9e, $a9, $af, $b5, $ba, $be
10467     B7 AF B2 BA 
1046b     C3 CF D9 E9 
1046f     F7 00 07 0D 
10473     10 11 14 1A | 	byte	$b7, $af, $b2, $ba, $c3, $cf, $d9, $e9, $f7, $00, $07, $0d, $10, $11, $14, $1a
10477     21 27 2C 2F 
1047b     31 35 3A 43 
1047f     4A 4C 4F 4F 
10483     4D 4A 48 4B | 	byte	$21, $27, $2c, $2f, $31, $35, $3a, $43, $4a, $4c, $4f, $4f, $4d, $4a, $48, $4b
10487     4D 4E 50 4F 
1048b     50 50 42 1B 
1048f     01 F7 F7 FA 
10493     FB FC FF 05 | 	byte	$4d, $4e, $50, $4f, $50, $50, $42, $1b, $01, $f7, $f7, $fa, $fb, $fc, $ff, $05
10497     09 09 FE EE 
1049b     EB EE D9 AB 
1049f     90 8C 92 99 
104a3     9D 9B 95 97 | 	byte	$09, $09, $fe, $ee, $eb, $ee, $d9, $ab, $90, $8c, $92, $99, $9d, $9b, $95, $97
104a7     A0 AC B7 C3 
104ab     CE D8 E5 F2 
104af     FC 03 0A 0F 
104b3     11 14 18 1F | 	byte	$a0, $ac, $b7, $c3, $ce, $d8, $e5, $f2, $fc, $03, $0a, $0f, $11, $14, $18, $1f
104b7     24 28 2C 31 
104bb     36 3A 40 48 
104bf     4B 4B 4D 4C 
104c3     4B 49 4A 4B | 	byte	$24, $28, $2c, $31, $36, $3a, $40, $48, $4b, $4b, $4d, $4c, $4b, $49, $4a, $4b
104c7     4C 4C 4D 50 
104cb     51 51 54 56 
104cf     54 32 FF DD 
104d3     CD CA C9 C3 | 	byte	$4c, $4c, $4d, $50, $51, $51, $54, $56, $54, $32, $ff, $dd, $cd, $ca, $c9, $c3
104d7     BA B7 B1 98 
104db     81 81 82 89 
104df     94 9E A9 B2 
104e3     B9 C1 C3 BD | 	byte	$ba, $b7, $b1, $98, $81, $81, $82, $89, $94, $9e, $a9, $b2, $b9, $c1, $c3, $bd
104e7     B4 B3 BD CA 
104eb     D5 E0 ED F9 
104ef     00 06 0D 11 
104f3     16 19 1F 24 | 	byte	$b4, $b3, $bd, $ca, $d5, $e0, $ed, $f9, $00, $06, $0d, $11, $16, $19, $1f, $24
104f7     28 2C 32 39 
104fb     3D 41 48 4C 
104ff     4D 4E 4F 4F 
10503     4E 4E 4E 4F | 	byte	$28, $2c, $32, $39, $3d, $41, $48, $4c, $4d, $4e, $4f, $4f, $4e, $4e, $4e, $4f
10507     4F 50 53 56 
1050b     53 42 21 09 
1050f     FD FB FB FE 
10513     00 04 08 0C | 	byte	$4f, $50, $53, $56, $53, $42, $21, $09, $fd, $fb, $fb, $fe, $00, $04, $08, $0c
10517     0E 0D 06 FA 
1051b     EE CC AA 93 
1051f     8C 8E 93 94 
10523     90 8F 95 A0 | 	byte	$0e, $0d, $06, $fa, $ee, $cc, $aa, $93, $8c, $8e, $93, $94, $90, $8f, $95, $a0
10527     A9 B6 C5 D2 
1052b     DB E7 F3 FB 
1052f     01 06 0C 11 
10533     15 1A 1F 23 | 	byte	$a9, $b6, $c5, $d2, $db, $e7, $f3, $fb, $01, $06, $0c, $11, $15, $1a, $1f, $23
10537     27 2D 33 38 
1053b     3B 41 47 49 
1053f     49 49 4A 4A 
10543     4B 4A 4B 4B | 	byte	$27, $2d, $33, $38, $3b, $41, $47, $49, $49, $49, $4a, $4a, $4b, $4a, $4b, $4b
10547     4B 4E 51 52 
1054b     53 55 56 54 
1054f     49 25 FE E1 
10553     D2 CC C5 B9 | 	byte	$4b, $4e, $51, $52, $53, $55, $56, $54, $49, $25, $fe, $e1, $d2, $cc, $c5, $b9
10557     A8 8E 81 81 
1055b     81 82 8A 94 
1055f     9E A7 B0 B9 
10563     C1 C4 BF B9 | 	byte	$a8, $8e, $81, $81, $81, $82, $8a, $94, $9e, $a7, $b0, $b9, $c1, $c4, $bf, $b9
10567     B8 BF CA D4 
1056b     DF EC F6 FD 
1056f     03 08 0E 13 
10573     19 1D 22 27 | 	byte	$b8, $bf, $ca, $d4, $df, $ec, $f6, $fd, $03, $08, $0e, $13, $19, $1d, $22, $27
10577     2C 32 37 3B 
1057b     40 46 4A 4B 
1057f     4B 4B 4C 4C 
10583     4D 4D 4D 4F | 	byte	$2c, $32, $37, $3b, $40, $46, $4a, $4b, $4b, $4b, $4c, $4c, $4d, $4d, $4d, $4f
10587     50 53 54 51 
1058b     3E 26 0F 03 
1058f     FD FC FE 01 
10593     04 07 0B 0F | 	byte	$50, $53, $54, $51, $3e, $26, $0f, $03, $fd, $fc, $fe, $01, $04, $07, $0b, $0f
10597     12 13 0B F2 
1059b     CA AA 96 8D 
1059f     8B 8B 89 88 
105a3     8C 94 9E AB | 	byte	$12, $13, $0b, $f2, $ca, $aa, $96, $8d, $8b, $8b, $89, $88, $8c, $94, $9e, $ab
105a7     B7 C3 CE DA 
105ab     E5 F0 F8 FE 
105af     02 07 0D 12 
105b3     17 1C 21 27 | 	byte	$b7, $c3, $ce, $da, $e5, $f0, $f8, $fe, $02, $07, $0d, $12, $17, $1c, $21, $27
105b7     2C 31 35 39 
105bb     3F 43 46 46 
105bf     45 46 47 48 
105c3     48 49 4A 4C | 	byte	$2c, $31, $35, $39, $3f, $43, $46, $46, $45, $46, $47, $48, $48, $49, $4a, $4c
105c7     4E 4E 4F 50 
105cb     52 53 52 4D 
105cf     39 1B FA E4 
105d3     D4 C6 B0 8F | 	byte	$4e, $4e, $4f, $50, $52, $53, $52, $4d, $39, $1b, $fa, $e4, $d4, $c6, $b0, $8f
105d7     81 81 81 81 
105db     82 88 93 9B 
105df     A5 AE B6 BF 
105e3     C3 C1 BE BE | 	byte	$81, $81, $81, $81, $82, $88, $93, $9b, $a5, $ae, $b6, $bf, $c3, $c1, $be, $be
105e7     C2 C9 D2 DD 
105eb     E9 F2 FA FF 
105ef     05 0A 10 16 
105f3     1B 21 27 2C | 	byte	$c2, $c9, $d2, $dd, $e9, $f2, $fa, $ff, $05, $0a, $10, $16, $1b, $21, $27, $2c
105f7     31 35 39 3F 
105fb     43 47 48 48 
105ff     48 48 49 4A 
10603     4B 4D 4F 51 | 	byte	$31, $35, $39, $3f, $43, $47, $48, $48, $48, $48, $49, $4a, $4b, $4d, $4f, $51
10607     51 51 4B 3B 
1060b     27 14 08 01 
1060f     FE FE 00 03 
10613     07 0B 10 13 | 	byte	$51, $51, $4b, $3b, $27, $14, $08, $01, $fe, $fe, $00, $03, $07, $0b, $10, $13
10617     15 0E F2 D0 
1061b     AF 99 8E 87 
1061f     84 83 83 88 
10623     91 9E AC B7 | 	byte	$15, $0e, $f2, $d0, $af, $99, $8e, $87, $84, $83, $83, $88, $91, $9e, $ac, $b7
10627     C0 CB D6 E3 
1062b     ED F5 FA 00 
1062f     05 0A 10 14 
10633     1B 21 27 2C | 	byte	$c0, $cb, $d6, $e3, $ed, $f5, $fa, $00, $05, $0a, $10, $14, $1b, $21, $27, $2c
10637     2F 32 37 3D 
1063b     42 43 44 44 
1063f     44 44 44 46 
10643     48 4B 4D 4D | 	byte	$2f, $32, $37, $3d, $42, $43, $44, $44, $44, $44, $44, $46, $48, $4b, $4d, $4d
10647     4C 4D 4F 51 
1064b     52 50 4D 45 
1064f     2B 0E F2 DC 
10653     BD A0 85 80 | 	byte	$4c, $4d, $4f, $51, $52, $50, $4d, $45, $2b, $0e, $f2, $dc, $bd, $a0, $85, $80
10657     81 81 81 82 
1065b     89 94 9D A6 
1065f     AF B6 BE C3 
10663     C5 C4 C4 C5 | 	byte	$81, $81, $81, $82, $89, $94, $9d, $a6, $af, $b6, $be, $c3, $c5, $c4, $c4, $c5
10667     CA D3 DE E8 
1066b     F2 F9 FE 04 
1066f     09 0E 14 1A 
10673     22 29 2D 30 | 	byte	$ca, $d3, $de, $e8, $f2, $f9, $fe, $04, $09, $0e, $14, $1a, $22, $29, $2d, $30
10677     33 38 3E 43 
1067b     46 48 48 48 
1067f     48 48 49 4C 
10683     4F 51 52 51 | 	byte	$33, $38, $3e, $43, $46, $48, $48, $48, $48, $48, $49, $4c, $4f, $51, $52, $51
10687     4F 49 38 27 
1068b     16 0A 03 00 
1068f     FF 01 03 08 
10693     0D 11 14 13 | 	byte	$4f, $49, $38, $27, $16, $0a, $03, $00, $ff, $01, $03, $08, $0d, $11, $14, $13
10697     09 EE D0 B1 
1069b     9D 8E 85 82 
1069f     82 82 89 94 
106a3     A2 AD B8 C0 | 	byte	$09, $ee, $d0, $b1, $9d, $8e, $85, $82, $82, $82, $89, $94, $a2, $ad, $b8, $c0
106a7     CB D7 E1 EC 
106ab     F3 FA FF 04 
106af     09 0E 14 1C 
106b3     23 28 2B 2D | 	byte	$cb, $d7, $e1, $ec, $f3, $fa, $ff, $04, $09, $0e, $14, $1c, $23, $28, $2b, $2d
106b7     32 37 3D 41 
106bb     42 43 42 43 
106bf     43 43 46 4A 
106c3     4C 4D 4C 4C | 	byte	$32, $37, $3d, $41, $42, $43, $42, $43, $43, $43, $46, $4a, $4c, $4d, $4c, $4c
106c7     4C 4E 50 50 
106cb     4F 4D 48 36 
106cf     1B F6 CF AE 
106d3     8F 81 81 81 | 	byte	$4c, $4e, $50, $50, $4f, $4d, $48, $36, $1b, $f6, $cf, $ae, $8f, $81, $81, $81
106d7     82 81 83 8D 
106db     97 A0 A8 B0 
106df     B8 C1 C6 C9 
106e3     C8 C7 C8 CD | 	byte	$82, $81, $83, $8d, $97, $a0, $a8, $b0, $b8, $c1, $c6, $c9, $c8, $c7, $c8, $cd
106e7     D5 DF E9 F2 
106eb     F9 FF 04 08 
106ef     0D 15 1D 24 
106f3     29 2D 2F 33 | 	byte	$d5, $df, $e9, $f2, $f9, $ff, $04, $08, $0d, $15, $1d, $24, $29, $2d, $2f, $33
106f7     38 3D 42 44 
106fb     46 46 46 45 
106ff     47 49 4D 50 
10703     51 51 50 4C | 	byte	$38, $3d, $42, $44, $46, $46, $46, $45, $47, $49, $4d, $50, $51, $51, $50, $4c
10707     42 31 20 12 
1070b     09 04 01 00 
1070f     02 07 0B 10 
10713     13 14 0F FB | 	byte	$42, $31, $20, $12, $09, $04, $01, $00, $02, $07, $0b, $10, $13, $14, $0f, $fb
10717     E3 C8 AF 9D 
1071b     8C 83 82 81 
1071f     83 8C 98 A6 
10723     B1 B9 C2 CD | 	byte	$e3, $c8, $af, $9d, $8c, $83, $82, $81, $83, $8c, $98, $a6, $b1, $b9, $c2, $cd
10727     D8 E3 EC F4 
1072b     FB 00 04 09 
1072f     10 17 1F 25 
10733     29 2B 2D 32 | 	byte	$d8, $e3, $ec, $f4, $fb, $00, $04, $09, $10, $17, $1f, $25, $29, $2b, $2d, $32
10737     37 3B 3F 41 
1073b     42 42 41 42 
1073f     44 48 4B 4D 
10743     4C 4B 4B 4C | 	byte	$37, $3b, $3f, $41, $42, $42, $41, $42, $44, $48, $4b, $4d, $4c, $4b, $4b, $4c
10747     4F 4F 4F 4E 
1074b     4C 48 3A 16 
1074f     EC BF 9C 87 
10753     81 81 81 82 | 	byte	$4f, $4f, $4f, $4e, $4c, $48, $3a, $16, $ec, $bf, $9c, $87, $81, $81, $81, $82
10757     82 87 93 9D 
1075b     A6 AE B5 BE 
1075f     C7 CC CC CB 
10763     CA CB D1 DA | 	byte	$82, $87, $93, $9d, $a6, $ae, $b5, $be, $c7, $cc, $cc, $cb, $ca, $cb, $d1, $da
10767     E4 EC F5 FB 
1076b     01 05 0A 11 
1076f     18 20 25 2A 
10773     2D 2F 33 39 | 	byte	$e4, $ec, $f5, $fb, $01, $05, $0a, $11, $18, $20, $25, $2a, $2d, $2f, $33, $39
10777     3D 41 43 45 
1077b     45 45 45 48 
1077f     4B 4E 50 50 
10783     4F 4E 48 3A | 	byte	$3d, $41, $43, $45, $45, $45, $45, $48, $4b, $4e, $50, $50, $4f, $4e, $48, $3a
10787     2B 19 0E 06 
1078b     02 01 02 05 
1078f     09 0E 11 14 
10793     12 03 EC D4 | 	byte	$2b, $19, $0e, $06, $02, $01, $02, $05, $09, $0e, $11, $14, $12, $03, $ec, $d4
10797     C1 AE 9C 8B 
1079b     83 82 82 88 
1079f     93 9F A9 B4 
107a3     BC C5 D1 DB | 	byte	$c1, $ae, $9c, $8b, $83, $82, $82, $88, $93, $9f, $a9, $b4, $bc, $c5, $d1, $db
107a7     E6 EE F6 FC 
107ab     01 06 0D 13 
107af     1A 21 25 28 
107b3     2B 2E 33 37 | 	byte	$e6, $ee, $f6, $fc, $01, $06, $0d, $13, $1a, $21, $25, $28, $2b, $2e, $33, $37
107b7     3B 3E 40 41 
107bb     41 41 44 46 
107bf     49 4A 4B 4A 
107c3     4A 4A 4B 4C | 	byte	$3b, $3e, $40, $41, $41, $41, $44, $46, $49, $4a, $4b, $4a, $4a, $4a, $4b, $4c
107c7     4D 4C 4C 49 
107cb     41 2B 07 DA 
107cf     B7 99 85 81 
107d3     82 81 81 84 | 	byte	$4d, $4c, $4c, $49, $41, $2b, $07, $da, $b7, $99, $85, $81, $82, $81, $81, $84
107d7     8D 98 A1 A9 
107db     B2 BA C4 CC 
107df     CE CD CB CB 
107e3     CD D3 DD E5 | 	byte	$8d, $98, $a1, $a9, $b2, $ba, $c4, $cc, $ce, $cd, $cb, $cb, $cd, $d3, $dd, $e5
107e7     EE F6 FC 03 
107eb     07 0E 15 1B 
107ef     21 26 2A 2D 
107f3     30 34 39 3D | 	byte	$ee, $f6, $fc, $03, $07, $0e, $15, $1b, $21, $26, $2a, $2d, $30, $34, $39, $3d
107f7     40 42 44 44 
107fb     46 47 49 4C 
107ff     4D 4E 4E 4D 
10803     4B 43 34 22 | 	byte	$40, $42, $44, $44, $46, $47, $49, $4c, $4d, $4e, $4e, $4d, $4b, $43, $34, $22
10807     14 0A 04 02 
1080b     02 04 08 0B 
1080f     0E 11 11 09 
10813     F5 DD C9 B8 | 	byte	$14, $0a, $04, $02, $02, $04, $08, $0b, $0e, $11, $11, $09, $f5, $dd, $c9, $b8
10817     AA 9B 8C 85 
1081b     83 86 8D 98 
1081f     A2 AC B5 BF 
10823     C8 D3 DE E7 | 	byte	$aa, $9b, $8c, $85, $83, $86, $8d, $98, $a2, $ac, $b5, $bf, $c8, $d3, $de, $e7
10827     F0 F7 FE 03 
1082b     0A 10 16 1C 
1082f     21 25 28 2B 
10833     2F 34 38 3B | 	byte	$f0, $f7, $fe, $03, $0a, $10, $16, $1c, $21, $25, $28, $2b, $2f, $34, $38, $3b
10837     3E 40 41 44 
1083b     45 47 49 4A 
1083f     4A 4A 4A 4A 
10843     4B 4C 4C 4D | 	byte	$3e, $40, $41, $44, $45, $47, $49, $4a, $4a, $4a, $4a, $4a, $4b, $4c, $4c, $4d
10847     4C 49 40 2E 
1084b     16 FA D7 B8 
1084f     9D 8B 82 81 
10853     82 82 89 92 | 	byte	$4c, $49, $40, $2e, $16, $fa, $d7, $b8, $9d, $8b, $82, $81, $82, $82, $89, $92
10857     9C A5 AF B8 
1085b     C1 C9 CF CF 
1085f     CD CB CC D1 
10863     D7 DF E8 EF | 	byte	$9c, $a5, $af, $b8, $c1, $c9, $cf, $cf, $cd, $cb, $cc, $d1, $d7, $df, $e8, $ef
10867     F7 FE 04 0B 
1086b     11 17 1D 21 
1086f     26 29 2D 31 
10873     35 39 3D 40 | 	byte	$f7, $fe, $04, $0b, $11, $17, $1d, $21, $26, $29, $2d, $31, $35, $39, $3d, $40
10877     42 44 46 48 
1087b     49 4A 4B 4C 
1087f     4C 4C 4C 49 
10883     3E 2E 1D 11 | 	byte	$42, $44, $46, $48, $49, $4a, $4b, $4c, $4c, $4c, $4c, $49, $3e, $2e, $1d, $11
10887     08 05 05 06 
1088b     07 09 0C 0F 
1088f     11 0D FC E6 
10893     CE BD AE A3 | 	byte	$08, $05, $05, $06, $07, $09, $0c, $0f, $11, $0d, $fc, $e6, $ce, $bd, $ae, $a3
10897     9A 93 8F 8D 
1089b     8F 95 9D A5 
1089f     AE B7 C2 CC 
108a3     D6 E0 EA F1 | 	byte	$9a, $93, $8f, $8d, $8f, $95, $9d, $a5, $ae, $b7, $c2, $cc, $d6, $e0, $ea, $f1
108a7     F9 00 07 0D 
108ab     12 18 1C 20 
108af     24 27 2C 30 
108b3     34 38 3B 3E | 	byte	$f9, $00, $07, $0d, $12, $18, $1c, $20, $24, $27, $2c, $30, $34, $38, $3b, $3e
108b7     40 42 45 46 
108bb     47 47 48 48 
108bf     48 48 49 4A 
108c3     4B 4B 4C 47 | 	byte	$40, $42, $45, $46, $47, $47, $48, $48, $48, $48, $49, $4a, $4b, $4b, $4c, $47
108c7     3B 27 14 02 
108cb     F2 D9 BE A7 
108cf     93 87 83 84 
108d3     87 8F 99 A1 | 	byte	$3b, $27, $14, $02, $f2, $d9, $be, $a7, $93, $87, $83, $84, $87, $8f, $99, $a1
108d7     AC B5 BE C7 
108db     CD D0 CF CD 
108df     CB CD D3 DA 
108e3     E2 EA F1 FA | 	byte	$ac, $b5, $be, $c7, $cd, $d0, $cf, $cd, $cb, $cd, $d3, $da, $e2, $ea, $f1, $fa
108e7     01 09 0F 14 
108eb     19 1D 21 25 
108ef     29 2D 31 35 
108f3     39 3D 40 43 | 	byte	$01, $09, $0f, $14, $19, $1d, $21, $25, $29, $2d, $31, $35, $39, $3d, $40, $43
108f7     46 48 49 4A 
108fb     49 4A 4A 4A 
108ff     4A 4A 45 37 
10903     26 18 0D 08 | 	byte	$46, $48, $49, $4a, $49, $4a, $4a, $4a, $4a, $4a, $45, $37, $26, $18, $0d, $08
10907     06 06 07 09 
1090b     0B 0D 0F 0E 
1090f     03 EF D7 C2 
10913     B0 A3 9E 9C | 	byte	$06, $06, $07, $09, $0b, $0d, $0f, $0e, $03, $ef, $d7, $c2, $b0, $a3, $9e, $9c
10917     9B 9A 99 99 
1091b     9D A2 AA B1 
1091f     BB C6 D0 DA 
10923     E3 EC F5 FD | 	byte	$9b, $9a, $99, $99, $9d, $a2, $aa, $b1, $bb, $c6, $d0, $da, $e3, $ec, $f5, $fd
10927     04 0A 0F 13 
1092b     17 1B 1F 22 
1092f     27 2B 30 34 
10933     38 3B 3E 41 | 	byte	$04, $0a, $0f, $13, $17, $1b, $1f, $22, $27, $2b, $30, $34, $38, $3b, $3e, $41
10937     44 45 45 45 
1093b     45 45 45 45 
1093f     47 49 4A 4A 
10943     49 44 35 21 | 	byte	$44, $45, $45, $45, $45, $45, $45, $45, $47, $49, $4a, $4a, $49, $44, $35, $21
10947     0F FF F6 ED 
1094b     DD C8 B0 9E 
1094f     90 8A 8A 8E 
10953     95 9E A8 B3 | 	byte	$0f, $ff, $f6, $ed, $dd, $c8, $b0, $9e, $90, $8a, $8a, $8e, $95, $9e, $a8, $b3
10957     BB C3 CA CF 
1095b     D0 CF CC CC 
1095f     CF D5 DD E4 
10963     EC F5 FD 05 | 	byte	$bb, $c3, $ca, $cf, $d0, $cf, $cc, $cc, $cf, $d5, $dd, $e4, $ec, $f5, $fd, $05
10967     0C 10 15 18 
1096b     1D 20 24 28 
1096f     2E 32 37 3A 
10973     3D 41 45 47 | 	byte	$0c, $10, $15, $18, $1d, $20, $24, $28, $2e, $32, $37, $3a, $3d, $41, $45, $47
10977     49 49 48 48 
1097b     48 48 48 49 
1097f     48 40 31 20 
10983     13 0C 09 07 | 	byte	$49, $49, $48, $48, $48, $48, $48, $49, $48, $40, $31, $20, $13, $0c, $09, $07
10987     06 07 09 0A 
1098b     0C 0D 07 F7 
1098f     DE C9 B4 A5 
10993     9E 9D 9F A3 | 	byte	$06, $07, $09, $0a, $0c, $0d, $07, $f7, $de, $c9, $b4, $a5, $9e, $9d, $9f, $a3
10997     A4 A3 A2 A3 
1099b     A7 AD B4 BF 
1099f     C8 D2 DD E5 
109a3     EF F8 00 07 | 	byte	$a4, $a3, $a2, $a3, $a7, $ad, $b4, $bf, $c8, $d2, $dd, $e5, $ef, $f8, $00, $07
109a7     0B 10 13 16 
109ab     1A 1E 23 27 
109af     2C 31 34 39 
109b3     3C 40 43 44 | 	byte	$0b, $10, $13, $16, $1a, $1e, $23, $27, $2c, $31, $34, $39, $3c, $40, $43, $44
109b7     44 44 44 43 
109bb     43 43 44 45 
109bf     48 49 47 3E 
109c3     2F 1B 0A FE | 	byte	$44, $44, $44, $43, $43, $43, $44, $45, $48, $49, $47, $3e, $2f, $1b, $0a, $fe
109c7     F5 F1 EF E7 
109cb     D7 C1 AD 9E 
109cf     95 93 95 9C 
109d3     A4 AE B7 BF | 	byte	$f5, $f1, $ef, $e7, $d7, $c1, $ad, $9e, $95, $93, $95, $9c, $a4, $ae, $b7, $bf
109d7     C6 CC CF CF 
109db     CD CB CC D0 
109df     D7 DE E6 EF 
109e3     F8 00 07 0C | 	byte	$c6, $cc, $cf, $cf, $cd, $cb, $cc, $d0, $d7, $de, $e6, $ef, $f8, $00, $07, $0c
109e7     10 14 17 1B 
109eb     1F 23 28 2D 
109ef     32 37 3A 3F 
109f3     43 45 47 48 | 	byte	$10, $14, $17, $1b, $1f, $23, $28, $2d, $32, $37, $3a, $3f, $43, $45, $47, $48
109f7     47 47 46 45 
109fb     46 47 48 46 
109ff     3B 2D 1F 14 
10a03     0E 09 08 07 | 	byte	$47, $47, $46, $45, $46, $47, $48, $46, $3b, $2d, $1f, $14, $0e, $09, $08, $07
10a07     08 08 09 0B 
10a0b     09 FE EB D2 
10a0f     BD AB A1 9C 
10a13     9D A2 A6 AA | 	byte	$08, $08, $09, $0b, $09, $fe, $eb, $d2, $bd, $ab, $a1, $9c, $9d, $a2, $a6, $aa
10a17     AC AB AB AC 
10a1b     B0 B7 C0 CA 
10a1f     D4 DE E8 F1 
10a23     F9 00 06 0A | 	byte	$ac, $ab, $ab, $ac, $b0, $b7, $c0, $ca, $d4, $de, $e8, $f1, $f9, $00, $06, $0a
10a27     0E 11 14 18 
10a2b     1C 22 27 2C 
10a2f     31 35 3A 3E 
10a33     41 43 43 43 | 	byte	$0e, $11, $14, $18, $1c, $22, $27, $2c, $31, $35, $3a, $3e, $41, $43, $43, $43
10a37     43 41 41 40 
10a3b     41 43 45 47 
10a3f     45 3C 2B 1A 
10a43     0B FF F8 F4 | 	byte	$43, $41, $41, $40, $41, $43, $45, $47, $45, $3c, $2b, $1a, $0b, $ff, $f8, $f4
10a47     F2 F2 EF E3 
10a4b     D2 BD AE A2 
10a4f     9E 9F A4 AA 
10a53     B2 BA C1 C7 | 	byte	$f2, $f2, $ef, $e3, $d2, $bd, $ae, $a2, $9e, $9f, $a4, $aa, $b2, $ba, $c1, $c7
10a57     CC CF CF CD 
10a5b     CB CE D2 DA 
10a5f     E1 E9 F2 FA 
10a63     01 06 0B 0F | 	byte	$cc, $cf, $cf, $cd, $cb, $ce, $d2, $da, $e1, $e9, $f2, $fa, $01, $06, $0b, $0f
10a67     12 16 19 1D 
10a6b     22 27 2D 32 
10a6f     37 3C 40 44 
10a73     45 46 46 45 | 	byte	$12, $16, $19, $1d, $22, $27, $2d, $32, $37, $3c, $40, $44, $45, $46, $46, $45
10a77     45 44 43 43 
10a7b     45 47 43 39 
10a7f     2B 1F 14 0E 
10a83     0A 08 07 07 | 	byte	$45, $44, $43, $43, $45, $47, $43, $39, $2b, $1f, $14, $0e, $0a, $08, $07, $07
10a87     08 08 09 03 
10a8b     F3 DE C6 B2 
10a8f     A6 A0 9E A0 
10a93     A4 AA AF B3 | 	byte	$08, $08, $09, $03, $f3, $de, $c6, $b2, $a6, $a0, $9e, $a0, $a4, $aa, $af, $b3
10a97     B4 B4 B3 B7 
10a9b     BC C4 CE D7 
10a9f     E1 EB F2 FA 
10aa3     FF 04 09 0C | 	byte	$b4, $b4, $b3, $b7, $bc, $c4, $ce, $d7, $e1, $eb, $f2, $fa, $ff, $04, $09, $0c
10aa7     10 13 17 1C 
10aab     21 27 2C 32 
10aaf     37 3B 3E 41 
10ab3     42 41 41 40 | 	byte	$10, $13, $17, $1c, $21, $27, $2c, $32, $37, $3b, $3e, $41, $42, $41, $41, $40
10ab7     3F 3F 3E 41 
10abb     43 44 42 37 
10abf     28 17 08 FF 
10ac3     F8 F5 F4 F4 | 	byte	$3f, $3f, $3e, $41, $43, $44, $42, $37, $28, $17, $08, $ff, $f8, $f5, $f4, $f4
10ac7     F5 F5 EF E0 
10acb     CC BC B0 AA 
10acf     AA AC B1 B7 
10ad3     BD C2 C8 CD | 	byte	$f5, $f5, $ef, $e0, $cc, $bc, $b0, $aa, $aa, $ac, $b1, $b7, $bd, $c2, $c8, $cd
10ad7     CF CF CD CE 
10adb     D1 D6 DD E6 
10adf     EE F5 FC 01 
10ae3     07 0B 0E 12 | 	byte	$cf, $cf, $cd, $ce, $d1, $d6, $dd, $e6, $ee, $f5, $fc, $01, $07, $0b, $0e, $12
10ae7     15 18 1C 22 
10aeb     27 2E 34 3A 
10aef     3E 41 42 43 
10af3     43 43 43 42 | 	byte	$15, $18, $1c, $22, $27, $2e, $34, $3a, $3e, $41, $42, $43, $43, $43, $43, $42
10af7     41 40 42 44 
10afb     45 3F 35 28 
10aff     1C 13 0C 08 
10b03     06 05 06 07 | 	byte	$41, $40, $42, $44, $45, $3f, $35, $28, $1c, $13, $0c, $08, $06, $05, $06, $07
10b07     07 05 F7 E4 
10b0b     CD B8 AA A1 
10b0f     9F 9F A2 A7 
10b13     AC B3 B8 BC | 	byte	$07, $05, $f7, $e4, $cd, $b8, $aa, $a1, $9f, $9f, $a2, $a7, $ac, $b3, $b8, $bc
10b17     BC BC BE C4 
10b1b     CA D4 DD E7 
10b1f     EE F4 FA FF 
10b23     04 08 0B 0F | 	byte	$bc, $bc, $be, $c4, $ca, $d4, $dd, $e7, $ee, $f4, $fa, $ff, $04, $08, $0b, $0f
10b27     11 16 1C 22 
10b2b     29 30 36 3A 
10b2f     3D 3E 3F 3F 
10b33     3F 3E 3E 3D | 	byte	$11, $16, $1c, $22, $29, $30, $36, $3a, $3d, $3e, $3f, $3f, $3f, $3e, $3e, $3d
10b37     3D 3E 3F 41 
10b3b     3D 32 22 13 
10b3f     06 FD F7 F4 
10b43     F4 F5 F6 F9 | 	byte	$3d, $3e, $3f, $41, $3d, $32, $22, $13, $06, $fd, $f7, $f4, $f4, $f5, $f6, $f9
10b47     FA F8 ED DB 
10b4b     CB BD B6 B3 
10b4f     B3 B5 BA BE 
10b53     C4 C9 CE CF | 	byte	$fa, $f8, $ed, $db, $cb, $bd, $b6, $b3, $b3, $b5, $ba, $be, $c4, $c9, $ce, $cf
10b57     CD CD CE D2 
10b5b     D9 E1 EA F1 
10b5f     F7 FC 01 05 
10b63     09 0D 10 13 | 	byte	$cd, $cd, $ce, $d2, $d9, $e1, $ea, $f1, $f7, $fc, $01, $05, $09, $0d, $10, $13
10b67     17 1D 23 29 
10b6b     31 37 3C 3F 
10b6f     41 41 41 41 
10b73     40 40 3F 3E | 	byte	$17, $1d, $23, $29, $31, $37, $3c, $3f, $41, $41, $41, $41, $40, $40, $3f, $3e
10b77     3E 41 43 43 
10b7b     3D 32 24 19 
10b7f     0F 09 05 04 
10b83     04 04 05 05 | 	byte	$3e, $41, $43, $43, $3d, $32, $24, $19, $0f, $09, $05, $04, $04, $04, $05, $05
10b87     FC E9 D4 BE 
10b8b     AF A5 A0 9F 
10b8f     A1 A4 AA B0 
10b93     B6 BD C2 C4 | 	byte	$fc, $e9, $d4, $be, $af, $a5, $a0, $9f, $a1, $a4, $aa, $b0, $b6, $bd, $c2, $c4
10b97     C6 C8 CD D4 
10b9b     DC E4 EB F0 
10b9f     F6 FA FE 03 
10ba3     07 0A 0D 11 | 	byte	$c6, $c8, $cd, $d4, $dc, $e4, $eb, $f0, $f6, $fa, $fe, $03, $07, $0a, $0d, $11
10ba7     16 1C 24 2B 
10bab     33 38 3B 3D 
10baf     3E 3D 3D 3D 
10bb3     3C 3C 3B 3B | 	byte	$16, $1c, $24, $2b, $33, $38, $3b, $3d, $3e, $3d, $3d, $3d, $3c, $3c, $3b, $3b
10bb7     3D 3D 37 2C 
10bbb     1D 10 05 FD 
10bbf     F8 F6 F6 F7 
10bc3     F9 FB FE 01 | 	byte	$3d, $3d, $37, $2c, $1d, $10, $05, $fd, $f8, $f6, $f6, $f7, $f9, $fb, $fe, $01
10bc7     01 FA ED DB 
10bcb     CD C2 BC B9 
10bcf     B9 BB BF C4 
10bd3     C9 CD CD CC | 	byte	$01, $fa, $ed, $db, $cd, $c2, $bc, $b9, $b9, $bb, $bf, $c4, $c9, $cd, $cd, $cc
10bd7     CC CF D4 DD 
10bdb     E4 EC F2 F7 
10bdf     FB FF 03 07 
10be3     0A 0E 12 16 | 	byte	$cc, $cf, $d4, $dd, $e4, $ec, $f2, $f7, $fb, $ff, $03, $07, $0a, $0e, $12, $16
10be7     1C 23 2C 33 
10beb     39 3D 3F 3F 
10bef     3F 3E 3E 3E 
10bf3     3D 3C 3C 3D | 	byte	$1c, $23, $2c, $33, $39, $3d, $3f, $3f, $3f, $3e, $3e, $3e, $3d, $3c, $3c, $3d
10bf7     40 43 42 3A 
10bfb     2F 21 16 0C 
10bff     07 04 02 03 
10c03     04 04 FF F1 | 	byte	$40, $43, $42, $3a, $2f, $21, $16, $0c, $07, $04, $02, $03, $04, $04, $ff, $f1
10c07     DC C5 B5 A9 
10c0b     A3 A0 A1 A2 
10c0f     A6 AC B2 B9 
10c13     BF C6 CB CF | 	byte	$dc, $c5, $b5, $a9, $a3, $a0, $a1, $a2, $a6, $ac, $b2, $b9, $bf, $c6, $cb, $cf
10c17     D3 D8 DD E4 
10c1b     E9 EE F2 F5 
10c1f     F9 FC 00 05 
10c23     08 0C 11 16 | 	byte	$d3, $d8, $dd, $e4, $e9, $ee, $f2, $f5, $f9, $fc, $00, $05, $08, $0c, $11, $16
10c27     1E 26 2E 34 
10c2b     39 3B 3B 3B 
10c2f     3B 3A 3A 3A 
10c33     39 39 3A 37 | 	byte	$1e, $26, $2e, $34, $39, $3b, $3b, $3b, $3b, $3a, $3a, $3a, $39, $39, $3a, $37
10c37     30 24 18 0C 
10c3b     03 FD F9 F7 
10c3f     F6 F7 F9 FC 
10c43     FE 01 06 09 | 	byte	$30, $24, $18, $0c, $03, $fd, $f9, $f7, $f6, $f7, $f9, $fc, $fe, $01, $06, $09
10c47     07 FD EC DB 
10c4b     CF C5 BF BD 
10c4f     BE C0 C6 CA 
10c53     CD CE CD CF | 	byte	$07, $fd, $ec, $db, $cf, $c5, $bf, $bd, $be, $c0, $c6, $ca, $cd, $ce, $cd, $cf
10c57     D3 D9 E0 E7 
10c5b     ED F2 F5 F9 
10c5f     FC 01 05 09 
10c63     0C 11 17 1F | 	byte	$d3, $d9, $e0, $e7, $ed, $f2, $f5, $f9, $fc, $01, $05, $09, $0c, $11, $17, $1f
10c67     26 2F 34 3A 
10c6b     3D 3D 3D 3C 
10c6f     3B 3B 3B 3B 
10c73     3B 3B 3E 42 | 	byte	$26, $2f, $34, $3a, $3d, $3d, $3d, $3c, $3b, $3b, $3b, $3b, $3b, $3b, $3e, $42
10c77     44 41 38 2B 
10c7b     1E 14 0B 05 
10c7f     02 01 02 03 
10c83     00 F5 E3 CD | 	byte	$44, $41, $38, $2b, $1e, $14, $0b, $05, $02, $01, $02, $03, $00, $f5, $e3, $cd
10c87     BA AE A5 A1 
10c8b     A1 A2 A5 AA 
10c8f     AE B5 BC C3 
10c93     CA D2 DA E0 | 	byte	$ba, $ae, $a5, $a1, $a1, $a2, $a5, $aa, $ae, $b5, $bc, $c3, $ca, $d2, $da, $e0
10c97     E5 E9 EC EF 
10c9b     F2 F4 F6 F9 
10c9f     FD 00 04 08 
10ca3     0C 13 1A 22 | 	byte	$e5, $e9, $ec, $ef, $f2, $f4, $f6, $f9, $fd, $00, $04, $08, $0c, $13, $1a, $22
10ca7     2A 30 35 38 
10cab     3A 39 38 38 
10caf     36 36 37 36 
10cb3     36 32 28 1D | 	byte	$2a, $30, $35, $38, $3a, $39, $38, $38, $36, $36, $37, $36, $36, $32, $28, $1d
10cb7     11 08 01 FC 
10cbb     FA F8 F7 F8 
10cbf     FA FC FF 02 
10cc3     06 0C 12 13 | 	byte	$11, $08, $01, $fc, $fa, $f8, $f7, $f8, $fa, $fc, $ff, $02, $06, $0c, $12, $13
10cc7     0A F9 E6 D8 
10ccb     CC C5 C1 C0 
10ccf     C2 C6 CA CD 
10cd3     CE D0 D2 D7 | 	byte	$0a, $f9, $e6, $d8, $cc, $c5, $c1, $c0, $c2, $c6, $ca, $cd, $ce, $d0, $d2, $d7
10cd7     DC E2 E8 ED 
10cdb     F2 F5 F8 FB 
10cdf     FF 03 07 0C 
10ce3     13 1A 23 2A | 	byte	$dc, $e2, $e8, $ed, $f2, $f5, $f8, $fb, $ff, $03, $07, $0c, $13, $1a, $23, $2a
10ce7     30 36 39 3B 
10ceb     3C 3B 3A 39 
10cef     38 38 38 39 
10cf3     3C 40 44 44 | 	byte	$30, $36, $39, $3b, $3c, $3b, $3a, $39, $38, $38, $38, $39, $3c, $40, $44, $44
10cf7     3E 32 26 19 
10cfb     10 08 03 00 
10cff     FF 00 00 F8 
10d03     E9 D3 C0 B0 | 	byte	$3e, $32, $26, $19, $10, $08, $03, $00, $ff, $00, $00, $f8, $e9, $d3, $c0, $b0
10d07     A6 A2 A0 A2 
10d0b     A4 A8 AC B1 
10d0f     B8 BF C6 CF 
10d13     D9 E4 EB F0 | 	byte	$a6, $a2, $a0, $a2, $a4, $a8, $ac, $b1, $b8, $bf, $c6, $cf, $d9, $e4, $eb, $f0
10d17     F2 F2 F4 F4 
10d1b     F5 F6 F8 FA 
10d1f     FE 02 06 0D 
10d23     16 1D 26 2B | 	byte	$f2, $f2, $f4, $f4, $f5, $f6, $f8, $fa, $fe, $02, $06, $0d, $16, $1d, $26, $2b
10d27     30 35 37 38 
10d2b     37 36 34 34 
10d2f     34 34 32 2C 
10d33     22 15 0A 02 | 	byte	$30, $35, $37, $38, $37, $36, $34, $34, $34, $34, $32, $2c, $22, $15, $0a, $02
10d37     FD FA F9 F9 
10d3b     F9 F9 FA FC 
10d3f     FF 02 07 0D 
10d43     15 1B 1C 14 | 	byte	$fd, $fa, $f9, $f9, $f9, $f9, $fa, $fc, $ff, $02, $07, $0d, $15, $1b, $1c, $14
10d47     06 F1 E0 D3 
10d4b     CA C5 C3 C4 
10d4f     C7 CB CF D1 
10d53     D4 D6 DA DF | 	byte	$06, $f1, $e0, $d3, $ca, $c5, $c3, $c4, $c7, $cb, $cf, $d1, $d4, $d6, $da, $df
10d57     E4 E9 ED F1 
10d5b     F4 F7 FA FD 
10d5f     02 07 0E 17 
10d63     1F 27 2D 32 | 	byte	$e4, $e9, $ed, $f1, $f4, $f7, $fa, $fd, $02, $07, $0e, $17, $1f, $27, $2d, $32
10d67     36 38 3A 3A 
10d6b     39 37 36 35 
10d6f     35 37 3A 3F 
10d73     44 45 43 3A | 	byte	$36, $38, $3a, $3a, $39, $37, $36, $35, $35, $37, $3a, $3f, $44, $45, $43, $3a
10d77     2E 21 15 0C 
10d7b     05 01 FF FF 
10d7f     FF FB EF DB 
10d83     C7 B6 AA A3 | 	byte	$2e, $21, $15, $0c, $05, $01, $ff, $ff, $ff, $fb, $ef, $db, $c7, $b6, $aa, $a3
10d87     A1 A1 A3 A7 
10d8b     AA AF B4 BA 
10d8f     C2 CA D6 E1 
10d93     EC F3 F8 F9 | 	byte	$a1, $a1, $a3, $a7, $aa, $af, $b4, $ba, $c2, $ca, $d6, $e1, $ec, $f3, $f8, $f9
10d97     F8 F7 F6 F6 
10d9b     F6 F7 F9 FD 
10d9f     01 07 0F 19 
10da3     21 27 2B 2F | 	byte	$f8, $f7, $f6, $f6, $f6, $f7, $f9, $fd, $01, $07, $0f, $19, $21, $27, $2b, $2f
10da7     32 34 35 34 
10dab     33 32 31 30 
10daf     2C 25 19 0F 
10db3     06 FE FA F8 | 	byte	$32, $34, $35, $34, $33, $32, $31, $30, $2c, $25, $19, $0f, $06, $fe, $fa, $f8
10db7     F8 F9 FA FB 
10dbb     FC FD FF 02 
10dbf     07 0D 15 1B 
10dc3     22 23 1E 10 | 	byte	$f8, $f9, $fa, $fb, $fc, $fd, $ff, $02, $07, $0d, $15, $1b, $22, $23, $1e, $10
10dc7     00 ED DD D3 
10dcb     CB C7 C7 C9 
10dcf     CC D0 D3 D6 
10dd3     D7 DA DE E2 | 	byte	$00, $ed, $dd, $d3, $cb, $c7, $c7, $c9, $cc, $d0, $d3, $d6, $d7, $da, $de, $e2
10dd7     E7 EB EE F2 
10ddb     F5 F7 FB 00 
10ddf     06 0F 18 20 
10de3     26 2C 30 33 | 	byte	$e7, $eb, $ee, $f2, $f5, $f7, $fb, $00, $06, $0f, $18, $20, $26, $2c, $30, $33
10de7     35 36 36 35 
10deb     34 33 32 33 
10def     36 3A 3F 44 
10df3     44 3F 36 2A | 	byte	$35, $36, $36, $35, $34, $33, $32, $33, $36, $3a, $3f, $44, $44, $3f, $36, $2a
10df7     1E 14 0B 05 
10dfb     00 FD FD FB 
10dff     F4 E4 D2 C1 
10e03     B2 A9 A3 A2 | 	byte	$1e, $14, $0b, $05, $00, $fd, $fd, $fb, $f4, $e4, $d2, $c1, $b2, $a9, $a3, $a2
10e07     A3 A5 A9 AD 
10e0b     B1 B6 BC C4 
10e0f     CE DA E4 EF 
10e13     F5 FB FD FD | 	byte	$a3, $a5, $a9, $ad, $b1, $b6, $bc, $c4, $ce, $da, $e4, $ef, $f5, $fb, $fd, $fd
10e17     FC FA F8 F7 
10e1b     F7 F8 FB 00 
10e1f     08 10 19 1F 
10e23     25 29 2C 2F | 	byte	$fc, $fa, $f8, $f7, $f7, $f8, $fb, $00, $08, $10, $19, $1f, $25, $29, $2c, $2f
10e27     31 31 31 30 
10e2b     2F 2E 28 20 
10e2f     16 0D 05 FF 
10e33     FB F9 F8 F9 | 	byte	$31, $31, $31, $30, $2f, $2e, $28, $20, $16, $0d, $05, $ff, $fb, $f9, $f8, $f9
10e37     FB FC FD FF 
10e3b     01 03 06 0C 
10e3f     13 1A 21 25 
10e43     27 24 19 0B | 	byte	$fb, $fc, $fd, $ff, $01, $03, $06, $0c, $13, $1a, $21, $25, $27, $24, $19, $0b
10e47     FA E9 DD D4 
10e4b     CD CC CD D0 
10e4f     D4 D7 D9 DA 
10e53     DC DE E2 E6 | 	byte	$fa, $e9, $dd, $d4, $cd, $cc, $cd, $d0, $d4, $d7, $d9, $da, $dc, $de, $e2, $e6
10e57     E9 EE F1 F3 
10e5b     F7 FB 00 08 
10e5f     10 19 20 27 
10e63     2B 2E 30 32 | 	byte	$e9, $ee, $f1, $f3, $f7, $fb, $00, $08, $10, $19, $20, $27, $2b, $2e, $30, $32
10e67     33 33 33 31 
10e6b     30 31 32 36 
10e6f     3B 3F 42 42 
10e73     3C 32 26 1B | 	byte	$33, $33, $33, $31, $30, $31, $32, $36, $3b, $3f, $42, $42, $3c, $32, $26, $1b
10e77     11 0A 04 00 
10e7b     FE FC F7 EC 
10e7f     DA C8 BB AE 
10e83     A7 A2 A2 A3 | 	byte	$11, $0a, $04, $00, $fe, $fc, $f7, $ec, $da, $c8, $bb, $ae, $a7, $a2, $a2, $a3
10e87     A7 AA AF B4 
10e8b     B9 C0 C9 D4 
10e8f     DF E8 F2 F8 
10e93     FD 01 02 01 | 	byte	$a7, $aa, $af, $b4, $b9, $c0, $c9, $d4, $df, $e8, $f2, $f8, $fd, $01, $02, $01
10e97     FF FC FA F9 
10e9b     FA FD 03 0A 
10e9f     12 1A 1F 24 
10ea3     28 2A 2C 2E | 	byte	$ff, $fc, $fa, $f9, $fa, $fd, $03, $0a, $12, $1a, $1f, $24, $28, $2a, $2c, $2e
10ea7     2E 2E 2E 2B 
10eab     25 1A 10 07 
10eaf     00 FC F9 F8 
10eb3     F7 F9 FA FC | 	byte	$2e, $2e, $2e, $2b, $25, $1a, $10, $07, $00, $fc, $f9, $f8, $f7, $f9, $fa, $fc
10eb7     FE 00 02 04 
10ebb     07 0B 12 19 
10ebf     1F 24 28 2A 
10ec3     28 20 13 02 | 	byte	$fe, $00, $02, $04, $07, $0b, $12, $19, $1f, $24, $28, $2a, $28, $20, $13, $02
10ec7     F2 E5 DA D3 
10ecb     D1 D1 D5 D7 
10ecf     D9 DA DB DC 
10ed3     DE E1 E4 E7 | 	byte	$f2, $e5, $da, $d3, $d1, $d1, $d5, $d7, $d9, $da, $db, $dc, $de, $e1, $e4, $e7
10ed7     EB EE F1 F5 
10edb     FB 01 09 11 
10edf     1A 21 25 29 
10ee3     2C 2D 2F 30 | 	byte	$eb, $ee, $f1, $f5, $fb, $01, $09, $11, $1a, $21, $25, $29, $2c, $2d, $2f, $30
10ee7     30 30 2F 2F 
10eeb     31 33 36 3C 
10eef     3F 41 3F 37 
10ef3     2E 21 17 0E | 	byte	$30, $30, $2f, $2f, $31, $33, $36, $3c, $3f, $41, $3f, $37, $2e, $21, $17, $0e
10ef7     07 02 FF FD 
10efb     F9 EE DF CD 
10eff     BF B1 A9 A3 
10f03     A1 A2 A4 A8 | 	byte	$07, $02, $ff, $fd, $f9, $ee, $df, $cd, $bf, $b1, $a9, $a3, $a1, $a2, $a4, $a8
10f07     AC B2 B7 BD 
10f0b     C6 CE D9 E4 
10f0f     ED F5 FB 00 
10f13     04 06 05 03 | 	byte	$ac, $b2, $b7, $bd, $c6, $ce, $d9, $e4, $ed, $f5, $fb, $00, $04, $06, $05, $03
10f17     00 FE FD FE 
10f1b     01 07 0D 14 
10f1f     1A 20 23 26 
10f23     28 29 2B 2B | 	byte	$00, $fe, $fd, $fe, $01, $07, $0d, $14, $1a, $20, $23, $26, $28, $29, $2b, $2b
10f27     2B 28 20 15 
10f2b     09 01 FA F7 
10f2f     F6 F6 F7 F9 
10f33     FA FD FF 02 | 	byte	$2b, $28, $20, $15, $09, $01, $fa, $f7, $f6, $f6, $f7, $f9, $fa, $fd, $ff, $02
10f37     04 07 0A 0E 
10f3b     13 19 1F 25 
10f3f     2A 2D 2E 2C 
10f43     25 19 09 F9 | 	byte	$04, $07, $0a, $0e, $13, $19, $1f, $25, $2a, $2d, $2e, $2c, $25, $19, $09, $f9
10f47     EB E0 D9 D6 
10f4b     D7 D8 DA DA 
10f4f     DA DB DC DD 
10f53     DF E2 E6 E9 | 	byte	$eb, $e0, $d9, $d6, $d7, $d8, $da, $da, $da, $db, $dc, $dd, $df, $e2, $e6, $e9
10f57     ED F1 F6 FC 
10f5b     03 0C 13 1A 
10f5f     21 25 28 2A 
10f63     2B 2C 2D 2D | 	byte	$ed, $f1, $f6, $fc, $03, $0c, $13, $1a, $21, $25, $28, $2a, $2b, $2c, $2d, $2d
10f67     2D 2E 2F 31 
10f6b     34 38 3C 3F 
10f6f     3F 3C 34 27 
10f73     1C 13 0A 04 | 	byte	$2d, $2e, $2f, $31, $34, $38, $3c, $3f, $3f, $3c, $34, $27, $1c, $13, $0a, $04
10f77     00 FE FB F3 
10f7b     E3 D3 C2 B5 
10f7f     AB A4 A2 A1 
10f83     A3 A6 AB AF | 	byte	$00, $fe, $fb, $f3, $e3, $d3, $c2, $b5, $ab, $a4, $a2, $a1, $a3, $a6, $ab, $af
10f87     B5 BC C4 CD 
10f8b     D6 E0 E9 F1 
10f8f     F8 FD 02 05 
10f93     07 08 06 04 | 	byte	$b5, $bc, $c4, $cd, $d6, $e0, $e9, $f1, $f8, $fd, $02, $05, $07, $08, $06, $04
10f97     02 02 03 06 
10f9b     0A 10 16 1A 
10f9f     1F 22 24 26 
10fa3     27 28 27 23 | 	byte	$02, $02, $03, $06, $0a, $10, $16, $1a, $1f, $22, $24, $26, $27, $28, $27, $23
10fa7     1B 0F 03 FA 
10fab     F4 F2 F2 F3 
10faf     F5 F8 FA FD 
10fb3     FF 02 05 07 | 	byte	$1b, $0f, $03, $fa, $f4, $f2, $f2, $f3, $f5, $f8, $fa, $fd, $ff, $02, $05, $07
10fb7     0B 0F 14 19 
10fbb     1E 24 29 2C 
10fbf     2F 2F 2D 28 
10fc3     1E 10 02 F3 | 	byte	$0b, $0f, $14, $19, $1e, $24, $29, $2c, $2f, $2f, $2d, $28, $1e, $10, $02, $f3
10fc7     E8 E1 DE DD 
10fcb     DD DC DB DA 
10fcf     DA DA DC DD 
10fd3     E0 E4 E8 ED | 	byte	$e8, $e1, $de, $dd, $dd, $dc, $db, $da, $da, $da, $dc, $dd, $e0, $e4, $e8, $ed
10fd7     F1 F7 FD 04 
10fdb     0C 13 19 1E 
10fdf     22 25 27 28 
10fe3     29 2A 2B 2B | 	byte	$f1, $f7, $fd, $04, $0c, $13, $19, $1e, $22, $25, $27, $28, $29, $2a, $2b, $2b
10fe7     2D 2F 31 35 
10feb     37 3B 3D 3B 
10fef     37 2D 23 18 
10ff3     0F 07 02 FF | 	byte	$2d, $2f, $31, $35, $37, $3b, $3d, $3b, $37, $2d, $23, $18, $0f, $07, $02, $ff
10ff7     FC F6 E9 DA 
10ffb     C9 B9 AE A7 
10fff     A3 A1 A2 A5 
11003     A8 AE B3 BA | 	byte	$fc, $f6, $e9, $da, $c9, $b9, $ae, $a7, $a3, $a1, $a2, $a5, $a8, $ae, $b3, $ba
11007     C1 C9 D3 DC 
1100b     E4 EC F4 FA 
1100f     FF 03 06 09 
11013     0A 0A 0A 09 | 	byte	$c1, $c9, $d3, $dc, $e4, $ec, $f4, $fa, $ff, $03, $06, $09, $0a, $0a, $0a, $09
11017     09 09 0C 0F 
1101b     12 17 1B 1E 
1101f     21 22 24 25 
11023     24 1F 16 0A | 	byte	$09, $09, $0c, $0f, $12, $17, $1b, $1e, $21, $22, $24, $25, $24, $1f, $16, $0a
11027     FF F6 F0 EE 
1102b     EE F0 F2 F6 
1102f     F8 FC FE 01 
11033     04 07 0C 0F | 	byte	$ff, $f6, $f0, $ee, $ee, $f0, $f2, $f6, $f8, $fc, $fe, $01, $04, $07, $0c, $0f
11037     14 19 1D 22 
1103b     27 2B 2E 30 
1103f     31 2E 2B 24 
11043     17 0A FC F1 | 	byte	$14, $19, $1d, $22, $27, $2b, $2e, $30, $31, $2e, $2b, $24, $17, $0a, $fc, $f1
11047     EA E6 E3 E1 
1104b     DF DC DB DA 
1104f     DA DB DD DF 
11053     E4 E7 ED F2 | 	byte	$ea, $e6, $e3, $e1, $df, $dc, $db, $da, $da, $db, $dd, $df, $e4, $e7, $ed, $f2
11057     F9 00 06 0D 
1105b     14 19 1D 21 
1105f     23 25 26 27 
11063     28 29 2A 2C | 	byte	$f9, $00, $06, $0d, $14, $19, $1d, $21, $23, $25, $26, $27, $28, $29, $2a, $2c
11067     2F 32 35 38 
1106b     3A 3B 39 33 
1106f     29 20 15 0C 
11073     06 02 FF F9 | 	byte	$2f, $32, $35, $38, $3a, $3b, $39, $33, $29, $20, $15, $0c, $06, $02, $ff, $f9
11077     EE E0 CE BF 
1107b     B2 A8 A3 A1 
1107f     A1 A3 A7 AB 
11083     B1 B7 BF C7 | 	byte	$ee, $e0, $ce, $bf, $b2, $a8, $a3, $a1, $a1, $a3, $a7, $ab, $b1, $b7, $bf, $c7
11087     CF D7 E1 E8 
1108b     EF F6 FC 01 
1108f     04 07 0A 0C 
11093     0E 0F 0E 0E | 	byte	$cf, $d7, $e1, $e8, $ef, $f6, $fc, $01, $04, $07, $0a, $0c, $0e, $0f, $0e, $0e
11097     0E 10 12 15 
1109b     18 1A 1D 1F 
1109f     20 21 1F 19 
110a3     10 04 F9 F1 | 	byte	$0e, $10, $12, $15, $18, $1a, $1d, $1f, $20, $21, $1f, $19, $10, $04, $f9, $f1
110a7     EC EA EA ED 
110ab     F0 F4 F8 FB 
110af     FF 02 05 08 
110b3     0C 10 14 19 | 	byte	$ec, $ea, $ea, $ed, $f0, $f4, $f8, $fb, $ff, $02, $05, $08, $0c, $10, $14, $19
110b7     1D 22 26 29 
110bb     2D 2F 30 31 
110bf     2F 2C 27 1D 
110c3     11 05 F9 F1 | 	byte	$1d, $22, $26, $29, $2d, $2f, $30, $31, $2f, $2c, $27, $1d, $11, $05, $f9, $f1
110c7     EC E8 E4 E0 
110cb     DD DA D9 D9 
110cf     DA DC DF E4 
110d3     E9 EE F4 FA | 	byte	$ec, $e8, $e4, $e0, $dd, $da, $d9, $d9, $da, $dc, $df, $e4, $e9, $ee, $f4, $fa
110d7     01 07 0E 13 
110db     17 1C 1F 21 
110df     23 24 26 27 
110e3     29 2B 2D 2F | 	byte	$01, $07, $0e, $13, $17, $1c, $1f, $21, $23, $24, $26, $27, $29, $2b, $2d, $2f
110e7     32 35 37 38 
110eb     39 35 2E 25 
110ef     1B 11 0A 05 
110f3     01 FC F3 E6 | 	byte	$32, $35, $37, $38, $39, $35, $2e, $25, $1b, $11, $0a, $05, $01, $fc, $f3, $e6
110f7     D4 C4 B5 AB 
110fb     A4 A1 A0 A2 
110ff     A5 AA AF B6 
11103     BD C5 CC D4 | 	byte	$d4, $c4, $b5, $ab, $a4, $a1, $a0, $a2, $a5, $aa, $af, $b6, $bd, $c5, $cc, $d4
11107     DD E4 EB F2 
1110b     F8 FD 01 04 
1110f     08 0A 0E 10 
11113     13 13 14 14 | 	byte	$dd, $e4, $eb, $f2, $f8, $fd, $01, $04, $08, $0a, $0e, $10, $13, $13, $14, $14
11117     14 15 16 18 
1111b     1A 1C 1D 1D 
1111f     1B 14 09 FE 
11123     F3 EC E8 E7 | 	byte	$14, $15, $16, $18, $1a, $1c, $1d, $1d, $1b, $14, $09, $fe, $f3, $ec, $e8, $e7
11127     E7 EA EE F2 
1112b     F7 FB FE 02 
1112f     06 09 0D 11 
11133     15 19 1E 22 | 	byte	$e7, $ea, $ee, $f2, $f7, $fb, $fe, $02, $06, $09, $0d, $11, $15, $19, $1e, $22
11137     26 2A 2C 2F 
1113b     31 31 32 30 
1113f     2E 2A 22 17 
11143     0C 01 F8 F2 | 	byte	$26, $2a, $2c, $2f, $31, $31, $32, $30, $2e, $2a, $22, $17, $0c, $01, $f8, $f2
11147     EC E6 E1 DD 
1114b     D9 D8 D8 DA 
1114f     DC E0 E5 EA 
11153     EF F5 FC 02 | 	byte	$ec, $e6, $e1, $dd, $d9, $d8, $d8, $da, $dc, $e0, $e5, $ea, $ef, $f5, $fc, $02
11157     08 0E 12 16 
1115b     1A 1D 1F 21 
1115f     23 25 26 28 
11163     2A 2C 2F 32 | 	byte	$08, $0e, $12, $16, $1a, $1d, $1f, $21, $23, $25, $26, $28, $2a, $2c, $2f, $32
11167     34 36 37 35 
1116b     30 29 1F 16 
1116f     0E 08 03 FD 
11173     F5 E9 D8 C9 | 	byte	$34, $36, $37, $35, $30, $29, $1f, $16, $0e, $08, $03, $fd, $f5, $e9, $d8, $c9
11177     B9 AE A5 A0 
1117b     9F A0 A3 A8 
1117f     AE B4 BB C2 
11183     CA D1 D9 E1 | 	byte	$b9, $ae, $a5, $a0, $9f, $a0, $a3, $a8, $ae, $b4, $bb, $c2, $ca, $d1, $d9, $e1
11187     E8 EE F4 F9 
1118b     FE 02 05 09 
1118f     0D 10 13 16 
11193     17 19 18 18 | 	byte	$e8, $ee, $f4, $f9, $fe, $02, $05, $09, $0d, $10, $13, $16, $17, $19, $18, $18
11197     18 18 18 19 
1119b     1A 19 15 0E 
1119f     03 F9 EF E8 
111a3     E4 E3 E5 E8 | 	byte	$18, $18, $18, $19, $1a, $19, $15, $0e, $03, $f9, $ef, $e8, $e4, $e3, $e5, $e8
111a7     EB F0 F4 F9 
111ab     FD 01 05 0A 
111af     0D 12 15 19 
111b3     1D 21 25 29 | 	byte	$eb, $f0, $f4, $f9, $fd, $01, $05, $0a, $0d, $12, $15, $19, $1d, $21, $25, $29
111b7     2C 2E 30 31 
111bb     32 33 32 30 
111bf     2D 27 1F 14 
111c3     0B 01 F9 F2 | 	byte	$2c, $2e, $30, $31, $32, $33, $32, $30, $2d, $27, $1f, $14, $0b, $01, $f9, $f2
111c7     EA E3 DD D9 
111cb     D8 D8 DA DD 
111cf     E1 E5 EA EF 
111d3     F6 FC 02 08 | 	byte	$ea, $e3, $dd, $d9, $d8, $d8, $da, $dd, $e1, $e5, $ea, $ef, $f6, $fc, $02, $08
111d7     0D 11 14 18 
111db     1A 1D 20 22 
111df     24 26 27 29 
111e3     2B 2E 30 31 | 	byte	$0d, $11, $14, $18, $1a, $1d, $20, $22, $24, $26, $27, $29, $2b, $2e, $30, $31
111e7     33 33 32 2C 
111eb     24 1C 15 0E 
111ef     07 01 F9 EE 
111f3     DF D0 C1 B4 | 	byte	$33, $33, $32, $2c, $24, $1c, $15, $0e, $07, $01, $f9, $ee, $df, $d0, $c1, $b4
111f7     AA A4 A1 A0 
111fb     A2 A6 AB B1 
111ff     B8 BE C5 CC 
11203     D3 DB E3 E9 | 	byte	$aa, $a4, $a1, $a0, $a2, $a6, $ab, $b1, $b8, $be, $c5, $cc, $d3, $db, $e3, $e9
11207     EF F5 F9 FD 
1120b     02 06 0A 0E 
1120f     11 14 17 1A 
11213     1B 1C 1B 1B | 	byte	$ef, $f5, $f9, $fd, $02, $06, $0a, $0e, $11, $14, $17, $1a, $1b, $1c, $1b, $1b
11217     1A 19 19 17 
1121b     12 0A 01 F6 
1121f     ED E6 E2 E1 
11223     E2 E5 E9 ED | 	byte	$1a, $19, $19, $17, $12, $0a, $01, $f6, $ed, $e6, $e2, $e1, $e2, $e5, $e9, $ed
11227     F2 F6 FB FF 
1122b     04 08 0D 11 
1122f     15 18 1C 20 
11233     23 27 2A 2D | 	byte	$f2, $f6, $fb, $ff, $04, $08, $0d, $11, $15, $18, $1c, $20, $23, $27, $2a, $2d
11237     2F 30 32 33 
1123b     33 33 32 30 
1123f     2C 26 1C 12 
11243     09 00 F7 EE | 	byte	$2f, $30, $32, $33, $33, $33, $32, $30, $2c, $26, $1c, $12, $09, $00, $f7, $ee
11247     E6 E0 DB D9 
1124b     DA DB DE E2 
1124f     E6 EA EF F4 
11253     FB 00 05 0A | 	byte	$e6, $e0, $db, $d9, $da, $db, $de, $e2, $e6, $ea, $ef, $f4, $fb, $00, $05, $0a
11257     0F 12 15 18 
1125b     1B 1E 20 22 
1125f     24 25 28 2A 
11263     2C 2E 30 31 | 	byte	$0f, $12, $15, $18, $1b, $1e, $20, $22, $24, $25, $28, $2a, $2c, $2e, $30, $31
11267     31 2E 29 22 
1126b     1B 14 0D 06 
1126f     FE F3 E7 D6 
11273     C8 B9 AE A6 | 	byte	$31, $2e, $29, $22, $1b, $14, $0d, $06, $fe, $f3, $e7, $d6, $c8, $b9, $ae, $a6
11277     A1 9F A0 A4 
1127b     A8 AE B4 BB 
1127f     C2 C8 D0 D7 
11283     DF E5 EB F1 | 	byte	$a1, $9f, $a0, $a4, $a8, $ae, $b4, $bb, $c2, $c8, $d0, $d7, $df, $e5, $eb, $f1
11287     F6 FB FF 03 
1128b     08 0C 10 13 
1128f     16 19 1D 1F 
11293     20 20 1F 1D | 	byte	$f6, $fb, $ff, $03, $08, $0c, $10, $13, $16, $19, $1d, $1f, $20, $20, $1f, $1d
11297     1B 17 11 08 
1129b     FC F3 EA E4 
1129f     E0 DF E0 E3 
112a3     E6 EB F1 F5 | 	byte	$1b, $17, $11, $08, $fc, $f3, $ea, $e4, $e0, $df, $e0, $e3, $e6, $eb, $f1, $f5
112a7     FA FF 04 09 
112ab     0D 12 16 19 
112af     1C 20 24 27 
112b3     2B 2E 30 32 | 	byte	$fa, $ff, $04, $09, $0d, $12, $16, $19, $1c, $20, $24, $27, $2b, $2e, $30, $32
112b7     32 34 36 36 
112bb     37 35 33 2F 
112bf     29 21 18 0F 
112c3     04 FA F0 E7 | 	byte	$32, $34, $36, $36, $37, $35, $33, $2f, $29, $21, $18, $0f, $04, $fa, $f0, $e7
112c7     E0 DC DA DA 
112cb     DC DF E2 E5 
112cf     EA EF F5 FA 
112d3     00 05 08 0D | 	byte	$e0, $dc, $da, $da, $dc, $df, $e2, $e5, $ea, $ef, $f5, $fa, $00, $05, $08, $0d
112d7     10 14 17 1A 
112db     1D 1F 21 23 
112df     24 27 29 2B 
112e3     2D 2E 2F 2E | 	byte	$10, $14, $17, $1a, $1d, $1f, $21, $23, $24, $27, $29, $2b, $2d, $2e, $2f, $2e
112e7     2A 25 1E 18 
112eb     10 09 00 F6 
112ef     E7 D9 C9 BA 
112f3     AF A6 A1 9F | 	byte	$2a, $25, $1e, $18, $10, $09, $00, $f6, $e7, $d9, $c9, $ba, $af, $a6, $a1, $9f
112f7     A0 A2 A7 AD 
112fb     B3 BA C0 C6 
112ff     CE D5 DD E3 
11303     E9 EF F4 F9 | 	byte	$a0, $a2, $a7, $ad, $b3, $ba, $c0, $c6, $ce, $d5, $dd, $e3, $e9, $ef, $f4, $f9
11307     FE 03 07 0B 
1130b     0F 12 15 18 
1130f     1B 1F 21 22 
11313     22 21 1D 17 | 	byte	$fe, $03, $07, $0b, $0f, $12, $15, $18, $1b, $1f, $21, $22, $22, $21, $1d, $17
11317     0E 02 F8 EE 
1131b     E5 E0 DC DC 
1131f     DE E0 E5 EA 
11323     EF F5 FA FF | 	byte	$0e, $02, $f8, $ee, $e5, $e0, $dc, $dc, $de, $e0, $e5, $ea, $ef, $f5, $fa, $ff
11327     04 0A 0F 13 
1132b     17 1A 1E 21 
1132f     24 27 2A 2D 
11333     2F 31 32 34 | 	byte	$04, $0a, $0f, $13, $17, $1a, $1e, $21, $24, $27, $2a, $2d, $2f, $31, $32, $34
11337     36 37 38 38 
1133b     36 34 30 2A 
1133f     23 1A 0F 04 
11343     F9 EF E6 E0 | 	byte	$36, $37, $38, $38, $36, $34, $30, $2a, $23, $1a, $0f, $04, $f9, $ef, $e6, $e0
11347     DD DC DC DE 
1134b     E1 E3 E7 EC 
1134f     F1 F7 FC 01 
11353     05 09 0D 10 | 	byte	$dd, $dc, $dc, $de, $e1, $e3, $e7, $ec, $f1, $f7, $fc, $01, $05, $09, $0d, $10
11357     14 17 1A 1C 
1135b     1E 20 22 24 
1135f     27 29 2A 2C 
11363     2C 2D 2B 26 | 	byte	$14, $17, $1a, $1c, $1e, $20, $22, $24, $27, $29, $2a, $2c, $2c, $2d, $2b, $26
11367     20 19 11 0A 
1136b     00 F5 E8 D7 
1136f     C8 BA AD A6 
11373     A0 9E 9F A3 | 	byte	$20, $19, $11, $0a, $00, $f5, $e8, $d7, $c8, $ba, $ad, $a6, $a0, $9e, $9f, $a3
11377     A7 AE B3 BA 
1137b     C1 C7 CE D6 
1137f     DC E3 E9 EF 
11383     F4 F9 FE 03 | 	byte	$a7, $ae, $b3, $ba, $c1, $c7, $ce, $d6, $dc, $e3, $e9, $ef, $f4, $f9, $fe, $03
11387     08 0C 0F 13 
1138b     15 18 1B 1E 
1138f     21 23 24 24 
11393     1F 16 0B FF | 	byte	$08, $0c, $0f, $13, $15, $18, $1b, $1e, $21, $23, $24, $24, $1f, $16, $0b, $ff
11397     F3 E9 E2 DD 
1139b     DB DB DD E1 
1139f     E6 EB F0 F5 
113a3     FB 00 06 0B | 	byte	$f3, $e9, $e2, $dd, $db, $db, $dd, $e1, $e6, $eb, $f0, $f5, $fb, $00, $06, $0b
113a7     10 14 17 1B 
113ab     1E 20 24 27 
113af     29 2C 2E 30 
113b3     32 34 36 37 | 	byte	$10, $14, $17, $1b, $1e, $20, $24, $27, $29, $2c, $2e, $30, $32, $34, $36, $37
113b7     38 38 37 36 
113bb     33 2F 2A 22 
113bf     19 0D 01 F6 
113c3     ED E5 E1 DE | 	byte	$38, $38, $37, $36, $33, $2f, $2a, $22, $19, $0d, $01, $f6, $ed, $e5, $e1, $de
113c7     DD DE E0 E2 
113cb     E5 E9 EF F3 
113cf     F8 FD 01 06 
113d3     0A 0E 12 15 | 	byte	$dd, $de, $e0, $e2, $e5, $e9, $ef, $f3, $f8, $fd, $01, $06, $0a, $0e, $12, $15
113d7     17 19 1B 1D 
113db     1F 21 23 25 
113df     27 29 2A 2A 
113e3     29 26 20 1A | 	byte	$17, $19, $1b, $1d, $1f, $21, $23, $25, $27, $29, $2a, $2a, $29, $26, $20, $1a
113e7     11 09 FF F2 
113eb     E3 D3 C5 B6 
113ef     AB A4 A0 9F 
113f3     A0 A4 A9 AE | 	byte	$11, $09, $ff, $f2, $e3, $d3, $c5, $b6, $ab, $a4, $a0, $9f, $a0, $a4, $a9, $ae
113f7     B4 BA C1 C7 
113fb     CF D5 DC E3 
113ff     E8 EE F3 F9 
11403     FE 03 07 0C | 	byte	$b4, $ba, $c1, $c7, $cf, $d5, $dc, $e3, $e8, $ee, $f3, $f9, $fe, $03, $07, $0c
11407     0F 12 15 18 
1140b     1B 1E 21 23 
1140f     24 21 1B 10 
11413     05 F9 EE E6 | 	byte	$0f, $12, $15, $18, $1b, $1e, $21, $23, $24, $21, $1b, $10, $05, $f9, $ee, $e6
11417     E0 DC DB DC 
1141b     DE E2 E7 EC 
1141f     F2 F7 FD 03 
11423     08 0D 12 15 | 	byte	$e0, $dc, $db, $dc, $de, $e2, $e7, $ec, $f2, $f7, $fd, $03, $08, $0d, $12, $15
11427     19 1C 1F 22 
1142b     25 28 2A 2D 
1142f     2F 31 33 35 
11433     36 38 39 39 | 	byte	$19, $1c, $1f, $22, $25, $28, $2a, $2d, $2f, $31, $33, $35, $36, $38, $39, $39
11437     38 37 35 33 
1143b     2E 28 20 15 
1143f     09 FE F4 EB 
11443     E5 E1 DF DF | 	byte	$38, $37, $35, $33, $2e, $28, $20, $15, $09, $fe, $f4, $eb, $e5, $e1, $df, $df
11447     DF E1 E4 E8 
1144b     ED F2 F6 FB 
1144f     FF 04 08 0C 
11453     10 13 15 17 | 	byte	$df, $e1, $e4, $e8, $ed, $f2, $f6, $fb, $ff, $04, $08, $0c, $10, $13, $15, $17
11457     19 1B 1D 20 
1145b     22 24 26 27 
1145f     29 2A 29 25 
11463     20 19 10 07 | 	byte	$19, $1b, $1d, $20, $22, $24, $26, $27, $29, $2a, $29, $25, $20, $19, $10, $07
11467     FC EF E0 CF 
1146b     C0 B4 A9 A4 
1146f     A0 A0 A2 A6 
11473     AB B1 B7 BD | 	byte	$fc, $ef, $e0, $cf, $c0, $b4, $a9, $a4, $a0, $a0, $a2, $a6, $ab, $b1, $b7, $bd
11477     C3 C9 D0 D7 
1147b     DE E4 EA F0 
1147f     F5 FB 00 04 
11483     08 0C 0F 11 | 	byte	$c3, $c9, $d0, $d7, $de, $e4, $ea, $f0, $f5, $fb, $00, $04, $08, $0c, $0f, $11
11487     14 17 1A 1D 
1148b     1F 21 1F 1A 
1148f     13 09 FE F3 
11493     EA E3 DE DB | 	byte	$14, $17, $1a, $1d, $1f, $21, $1f, $1a, $13, $09, $fe, $f3, $ea, $e3, $de, $db
11497     DB DD E0 E5 
1149b     E9 EF F4 FA 
1149f     00 05 0B 10 
114a3     14 17 1A 1E | 	byte	$db, $dd, $e0, $e5, $e9, $ef, $f4, $fa, $00, $05, $0b, $10, $14, $17, $1a, $1e
114a7     20 23 26 29 
114ab     2B 2D 30 32 
114af     34 36 38 39 
114b3     39 3A 39 38 | 	byte	$20, $23, $26, $29, $2b, $2d, $30, $32, $34, $36, $38, $39, $39, $3a, $39, $38
114b7     36 34 32 2D 
114bb     25 1C 11 06 
114bf     FA F1 EA E4 
114c3     E1 E0 E0 E1 | 	byte	$36, $34, $32, $2d, $25, $1c, $11, $06, $fa, $f1, $ea, $e4, $e1, $e0, $e0, $e1
114c7     E4 E7 EB F0 
114cb     F4 F9 FE 02 
114cf     06 0A 0E 10 
114d3     13 15 17 19 | 	byte	$e4, $e7, $eb, $f0, $f4, $f9, $fe, $02, $06, $0a, $0e, $10, $13, $15, $17, $19
114d7     1B 1D 20 21 
114db     23 26 27 28 
114df     27 24 1D 16 
114e3     0D 04 F8 EA | 	byte	$1b, $1d, $20, $21, $23, $26, $27, $28, $27, $24, $1d, $16, $0d, $04, $f8, $ea
114e7     DB CB BD B1 
114eb     A8 A3 A0 A1 
114ef     A3 A7 AB B1 
114f3     B7 BD C3 CA | 	byte	$db, $cb, $bd, $b1, $a8, $a3, $a0, $a1, $a3, $a7, $ab, $b1, $b7, $bd, $c3, $ca
114f7     D1 D7 DE E4 
114fb     EA F0 F7 FC 
114ff     01 05 08 0C 
11503     0F 11 14 17 | 	byte	$d1, $d7, $de, $e4, $ea, $f0, $f7, $fc, $01, $05, $08, $0c, $0f, $11, $14, $17
11507     1A 1C 1E 1D 
1150b     19 12 0A 01 
1150f     F8 F0 E8 E3 
11513     DF DD DD DF | 	byte	$1a, $1c, $1e, $1d, $19, $12, $0a, $01, $f8, $f0, $e8, $e3, $df, $dd, $dd, $df
11517     E2 E6 EB F0 
1151b     F7 FD 02 08 
1151f     0D 12 15 19 
11523     1C 1E 21 24 | 	byte	$e2, $e6, $eb, $f0, $f7, $fd, $02, $08, $0d, $12, $15, $19, $1c, $1e, $21, $24
11527     27 29 2B 2E 
1152b     30 33 35 37 
1152f     38 39 3A 3A 
11533     39 39 37 35 | 	byte	$27, $29, $2b, $2e, $30, $33, $35, $37, $38, $39, $3a, $3a, $39, $39, $37, $35
11537     34 31 2C 25 
1153b     1A 0F 03 F9 
1153f     EF E9 E4 E1 
11543     E0 E1 E3 E6 | 	byte	$34, $31, $2c, $25, $1a, $0f, $03, $f9, $ef, $e9, $e4, $e1, $e0, $e1, $e3, $e6
11547     EA EE F2 F7 
1154b     FC 01 05 08 
1154f     0C 0F 12 14 
11553     16 18 1A 1C | 	byte	$ea, $ee, $f2, $f7, $fc, $01, $05, $08, $0c, $0f, $12, $14, $16, $18, $1a, $1c
11557     1E 20 22 25 
1155b     27 28 27 24 
1155f     1E 15 0C 02 
11563     F6 E9 D9 CB | 	byte	$1e, $20, $22, $25, $27, $28, $27, $24, $1e, $15, $0c, $02, $f6, $e9, $d9, $cb
11567     BC B1 A8 A3 
1156b     A2 A2 A4 A7 
1156f     AC B1 B6 BC 
11573     C2 C9 CF D6 | 	byte	$bc, $b1, $a8, $a3, $a2, $a2, $a4, $a7, $ac, $b1, $b6, $bc, $c2, $c9, $cf, $d6
11577     DC E2 E9 EF 
1157b     F6 FC 00 04 
1157f     08 0B 0E 10 
11583     13 15 18 1A | 	byte	$dc, $e2, $e9, $ef, $f6, $fc, $00, $04, $08, $0b, $0e, $10, $13, $15, $18, $1a
11587     1A 18 12 0B 
1158b     04 FC F5 EE 
1158f     E9 E5 E2 E0 
11593     E0 E1 E4 E8 | 	byte	$1a, $18, $12, $0b, $04, $fc, $f5, $ee, $e9, $e5, $e2, $e0, $e0, $e1, $e4, $e8
11597     EC F1 F7 FC 
1159b     03 08 0D 12 
1159f     16 19 1C 1E 
115a3     21 23 26 28 | 	byte	$ec, $f1, $f7, $fc, $03, $08, $0d, $12, $16, $19, $1c, $1e, $21, $23, $26, $28
115a7     2B 2D 2F 32 
115ab     35 36 38 39 
115af     3A 39 39 39 
115b3     37 36 34 33 | 	byte	$2b, $2d, $2f, $32, $35, $36, $38, $39, $3a, $39, $39, $39, $37, $36, $34, $33
115b7     31 2D 26 1C 
115bb     11 06 FC F3 
115bf     EC E7 E4 E3 
115c3     E3 E4 E7 EA | 	byte	$31, $2d, $26, $1c, $11, $06, $fc, $f3, $ec, $e7, $e4, $e3, $e3, $e4, $e7, $ea
115c7     ED F2 F7 FB 
115cb     00 03 07 0A 
115cf     0C 0F 11 13 
115d3     15 17 19 1C | 	byte	$ed, $f2, $f7, $fb, $00, $03, $07, $0a, $0c, $0f, $11, $13, $15, $17, $19, $1c
115d7     1D 20 22 24 
115db     25 23 1E 17 
115df     0F 05 FB EF 
115e3     E2 D4 C6 BB | 	byte	$1d, $20, $22, $24, $25, $23, $1e, $17, $0f, $05, $fb, $ef, $e2, $d4, $c6, $bb
115e7     B2 AB A7 A6 
115eb     A6 A7 AB AF 
115ef     B4 B8 BD C4 
115f3     C9 D0 D6 DC | 	byte	$b2, $ab, $a7, $a6, $a6, $a7, $ab, $af, $b4, $b8, $bd, $c4, $c9, $d0, $d6, $dc
115f7     E3 E9 F0 F5 
115fb     FA 00 03 07 
115ff     0A 0D 0F 12 
11603     15 16 16 14 | 	byte	$e3, $e9, $f0, $f5, $fa, $00, $03, $07, $0a, $0d, $0f, $12, $15, $16, $16, $14
11607     0F 08 02 FC 
1160b     F6 F2 EE EB 
1160f     E8 E6 E5 E5 
11613     E6 E9 EC F0 | 	byte	$0f, $08, $02, $fc, $f6, $f2, $ee, $eb, $e8, $e6, $e5, $e5, $e6, $e9, $ec, $f0
11617     F5 FA 00 05 
1161b     0A 0F 12 16 
1161f     19 1C 1E 21 
11623     23 26 29 2C | 	byte	$f5, $fa, $00, $05, $0a, $0f, $12, $16, $19, $1c, $1e, $21, $23, $26, $29, $2c
11627     2E 31 33 35 
1162b     37 38 39 3A 
1162f     3A 3A 3A 38 
11633     38 36 35 33 | 	byte	$2e, $31, $33, $35, $37, $38, $39, $3a, $3a, $3a, $3a, $38, $38, $36, $35, $33
11637     30 2A 22 18 
1163b     0E 03 FB F2 
1163f     ED E8 E6 E5 
11643     E5 E7 EA ED | 	byte	$30, $2a, $22, $18, $0e, $03, $fb, $f2, $ed, $e8, $e6, $e5, $e5, $e7, $ea, $ed
11647     F1 F5 F9 FD 
1164b     00 04 07 0A 
1164f     0C 0D 10 12 
11653     15 17 19 1C | 	byte	$f1, $f5, $f9, $fd, $00, $04, $07, $0a, $0c, $0d, $10, $12, $15, $17, $19, $1c
11657     1E 21 23 22 
1165b     20 1A 14 0C 
1165f     03 F8 EC DF 
11663     D2 C5 BA B2 | 	byte	$1e, $21, $23, $22, $20, $1a, $14, $0c, $03, $f8, $ec, $df, $d2, $c5, $ba, $b2
11667     AD A9 A8 A8 
1166b     A9 AC B0 B4 
1166f     B9 BE C4 CA 
11673     D0 D8 DE E5 | 	byte	$ad, $a9, $a8, $a8, $a9, $ac, $b0, $b4, $b9, $be, $c4, $ca, $d0, $d8, $de, $e5
11677     EB F1 F6 FB 
1167b     00 03 07 0A 
1167f     0C 0F 11 13 
11683     13 10 0C 06 | 	byte	$eb, $f1, $f6, $fb, $00, $03, $07, $0a, $0c, $0f, $11, $13, $13, $10, $0c, $06
11687     00 FA F5 F1 
1168b     EF ED EC EA 
1168f     E9 E9 EA EC 
11693     EE F1 F6 FA | 	byte	$00, $fa, $f5, $f1, $ef, $ed, $ec, $ea, $e9, $e9, $ea, $ec, $ee, $f1, $f6, $fa
11697     FF 04 08 0C 
1169b     10 14 17 1A 
1169f     1C 1F 21 24 
116a3     27 2A 2C 2F | 	byte	$ff, $04, $08, $0c, $10, $14, $17, $1a, $1c, $1f, $21, $24, $27, $2a, $2c, $2f
116a7     32 33 35 37 
116ab     38 39 39 39 
116af     39 38 37 37 
116b3     36 36 34 32 | 	byte	$32, $33, $35, $37, $38, $39, $39, $39, $39, $38, $37, $37, $36, $36, $34, $32
116b7     2D 26 1D 13 
116bb     08 FF F6 EF 
116bf     EA E7 E6 E6 
116c3     E8 EA ED F1 | 	byte	$2d, $26, $1d, $13, $08, $ff, $f6, $ef, $ea, $e7, $e6, $e6, $e8, $ea, $ed, $f1
116c7     F4 F8 FC FF 
116cb     02 05 07 09 
116cf     0B 0E 10 13 
116d3     15 18 1B 1D | 	byte	$f4, $f8, $fc, $ff, $02, $05, $07, $09, $0b, $0e, $10, $13, $15, $18, $1b, $1d
116d7     1F 20 1F 1C 
116db     17 0F 08 FF 
116df     F4 E8 DB CF 
116e3     C2 B8 B1 AC | 	byte	$1f, $20, $1f, $1c, $17, $0f, $08, $ff, $f4, $e8, $db, $cf, $c2, $b8, $b1, $ac
116e7     A9 A7 A8 AA 
116eb     AD B0 B5 BA 
116ef     BF C5 CB D2 
116f3     D9 DF E6 EC | 	byte	$a9, $a7, $a8, $aa, $ad, $b0, $b5, $ba, $bf, $c5, $cb, $d2, $d9, $df, $e6, $ec
116f7     F1 F7 FB 00 
116fb     04 06 0A 0C 
116ff     0E 10 10 0E 
11703     0A 05 FF F9 | 	byte	$f1, $f7, $fb, $00, $04, $06, $0a, $0c, $0e, $10, $10, $0e, $0a, $05, $ff, $f9
11707     F4 F0 EE ED 
1170b     EC EC ED ED 
1170f     EE EF F2 F5 
11713     F8 FC 00 04 | 	byte	$f4, $f0, $ee, $ed, $ec, $ec, $ed, $ed, $ee, $ef, $f2, $f5, $f8, $fc, $00, $04
11717     08 0C 0F 13 
1171b     16 19 1B 1E 
1171f     1F 22 25 27 
11723     2A 2D 2F 31 | 	byte	$08, $0c, $0f, $13, $16, $19, $1b, $1e, $1f, $22, $25, $27, $2a, $2d, $2f, $31
11727     34 35 36 37 
1172b     38 38 38 37 
1172f     38 37 37 37 
11733     36 35 33 2F | 	byte	$34, $35, $36, $37, $38, $38, $38, $37, $38, $37, $37, $37, $36, $35, $33, $2f
11737     2A 21 18 0E 
1173b     05 FB F4 EE 
1173f     E9 E8 E7 E9 
11743     EB ED F0 F3 | 	byte	$2a, $21, $18, $0e, $05, $fb, $f4, $ee, $e9, $e8, $e7, $e9, $eb, $ed, $f0, $f3
11747     F7 F9 FD 00 
1174b     02 04 07 08 
1174f     0B 0D 10 14 
11753     17 1A 1C 1D | 	byte	$f7, $f9, $fd, $00, $02, $04, $07, $08, $0b, $0d, $10, $14, $17, $1a, $1c, $1d
11757     1E 1D 1A 15 
1175b     0E 06 FD F2 
1175f     E7 DA CE C2 
11763     BA B3 AD AA | 	byte	$1e, $1d, $1a, $15, $0e, $06, $fd, $f2, $e7, $da, $ce, $c2, $ba, $b3, $ad, $aa
11767     A8 A9 AA AD 
1176b     B1 B5 B9 BE 
1176f     C5 CA D2 D9 
11773     DF E6 EC F1 | 	byte	$a8, $a9, $aa, $ad, $b1, $b5, $b9, $be, $c5, $ca, $d2, $d9, $df, $e6, $ec, $f1
11777     F7 FB FF 03 
1177b     06 09 0B 0D 
1177f     0D 0C 08 04 
11783     FF F9 F4 F0 | 	byte	$f7, $fb, $ff, $03, $06, $09, $0b, $0d, $0d, $0c, $08, $04, $ff, $f9, $f4, $f0
11787     EE EC EC EC 
1178b     ED EE F0 F1 
1178f     F3 F6 F9 FC 
11793     FF 02 06 09 | 	byte	$ee, $ec, $ec, $ec, $ed, $ee, $f0, $f1, $f3, $f6, $f9, $fc, $ff, $02, $06, $09
11797     0D 10 13 16 
1179b     18 1B 1D 1F 
1179f     21 24 27 2A 
117a3     2D 2F 32 33 | 	byte	$0d, $10, $13, $16, $18, $1b, $1d, $1f, $21, $24, $27, $2a, $2d, $2f, $32, $33
117a7     34 35 37 37 
117ab     37 37 37 37 
117af     37 37 37 36 
117b3     35 33 31 2C | 	byte	$34, $35, $37, $37, $37, $37, $37, $37, $37, $37, $37, $36, $35, $33, $31, $2c
117b7     26 1F 15 0D 
117bb     03 FB F4 EF 
117bf     EB EA E9 EA 
117c3     EC EF F1 F4 | 	byte	$26, $1f, $15, $0d, $03, $fb, $f4, $ef, $eb, $ea, $e9, $ea, $ec, $ef, $f1, $f4
117c7     F6 F9 FC FF 
117cb     01 03 05 08 
117cf     0B 0D 11 14 
117d3     17 19 1B 1B | 	byte	$f6, $f9, $fc, $ff, $01, $03, $05, $08, $0b, $0d, $11, $14, $17, $19, $1b, $1b
117d7     1A 17 13 0D 
117db     07 FE F6 EA 
117df     DE D2 C7 BD 
117e3     B6 B0 AC AA | 	byte	$1a, $17, $13, $0d, $07, $fe, $f6, $ea, $de, $d2, $c7, $bd, $b6, $b0, $ac, $aa
117e7     AA AB AD B1 
117eb     B4 B9 BE C3 
117ef     C9 D0 D7 DE 
117f3     E4 EA EF F4 | 	byte	$aa, $ab, $ad, $b1, $b4, $b9, $be, $c3, $c9, $d0, $d7, $de, $e4, $ea, $ef, $f4
117f7     F9 FD 01 04 
117fb     07 09 0A 0A 
117ff     08 04 FF FA 
11803     F5 F1 EE EC | 	byte	$f9, $fd, $01, $04, $07, $09, $0a, $0a, $08, $04, $ff, $fa, $f5, $f1, $ee, $ec
11807     EA EB EB EC 
1180b     EE F0 F3 F6 
1180f     F9 FC FF 02 
11813     05 08 0B 0E | 	byte	$ea, $eb, $eb, $ec, $ee, $f0, $f3, $f6, $f9, $fc, $ff, $02, $05, $08, $0b, $0e
11817     11 13 16 19 
1181b     1A 1D 1F 21 
1181f     24 27 29 2C 
11823     2F 31 32 34 | 	byte	$11, $13, $16, $19, $1a, $1d, $1f, $21, $24, $27, $29, $2c, $2f, $31, $32, $34
11827     35 35 36 36 
1182b     36 36 36 37 
1182f     37 37 37 37 
11833     36 33 2F 2C | 	byte	$35, $35, $36, $36, $36, $36, $36, $37, $37, $37, $37, $37, $36, $33, $2f, $2c
11837     25 1D 15 0C 
1183b     03 FC F5 F1 
1183f     EE EC EC ED 
11843     EE F0 F2 F4 | 	byte	$25, $1d, $15, $0c, $03, $fc, $f5, $f1, $ee, $ec, $ec, $ed, $ee, $f0, $f2, $f4
11847     F7 F9 FC FE 
1184b     00 02 05 08 
1184f     0B 0E 12 14 
11853     16 18 19 18 | 	byte	$f7, $f9, $fc, $fe, $00, $02, $05, $08, $0b, $0e, $12, $14, $16, $18, $19, $18
11857     16 12 0D 07 
1185b     00 F8 EC E0 
1185f     D5 C9 C0 B8 
11863     B2 AE AB AA | 	byte	$16, $12, $0d, $07, $00, $f8, $ec, $e0, $d5, $c9, $c0, $b8, $b2, $ae, $ab, $aa
11867     AB AD AF B3 
1186b     B7 BC C2 C8 
1186f     CF D5 DC E2 
11873     E8 EE F3 F7 | 	byte	$ab, $ad, $af, $b3, $b7, $bc, $c2, $c8, $cf, $d5, $dc, $e2, $e8, $ee, $f3, $f7
11877     FB FF 03 05 
1187b     07 07 06 03 
1187f     FF FB F5 F2 
11883     EE EC EA EA | 	byte	$fb, $ff, $03, $05, $07, $07, $06, $03, $ff, $fb, $f5, $f2, $ee, $ec, $ea, $ea
11887     EA EB ED EF 
1188b     F2 F5 F9 FD 
1188f     01 04 08 0A 
11893     0D 0F 10 13 | 	byte	$ea, $eb, $ed, $ef, $f2, $f5, $f9, $fd, $01, $04, $08, $0a, $0d, $0f, $10, $13
11897     15 17 19 1B 
1189b     1D 1F 21 24 
1189f     27 29 2B 2E 
118a3     30 31 33 34 | 	byte	$15, $17, $19, $1b, $1d, $1f, $21, $24, $27, $29, $2b, $2e, $30, $31, $33, $34
118a7     34 35 35 35 
118ab     36 36 37 38 
118af     38 38 38 37 
118b3     35 32 2E 29 | 	byte	$34, $35, $35, $35, $36, $36, $37, $38, $38, $38, $38, $37, $35, $32, $2e, $29
118b7     22 1A 12 0A 
118bb     01 FB F6 F2 
118bf     EF EE EE EE 
118c3     EF F1 F3 F5 | 	byte	$22, $1a, $12, $0a, $01, $fb, $f6, $f2, $ef, $ee, $ee, $ee, $ef, $f1, $f3, $f5
118c7     F7 F9 FB FE 
118cb     01 03 06 0A 
118cf     0D 11 14 16 
118d3     17 17 16 14 | 	byte	$f7, $f9, $fb, $fe, $01, $03, $06, $0a, $0d, $11, $14, $16, $17, $17, $16, $14
118d7     11 0C 07 FF 
118db     F7 EC E0 D4 
118df     C9 BF B7 B0 
118e3     AC AA A9 AA | 	byte	$11, $0c, $07, $ff, $f7, $ec, $e0, $d4, $c9, $bf, $b7, $b0, $ac, $aa, $a9, $aa
118e7     AB AE B2 B6 
118eb     BB C1 C8 CF 
118ef     D5 DC E2 E8 
118f3     ED F2 F6 FB | 	byte	$ab, $ae, $b2, $b6, $bb, $c1, $c8, $cf, $d5, $dc, $e2, $e8, $ed, $f2, $f6, $fb
118f7     FE 02 04 05 
118fb     04 02 FE F9 
118ff     F5 F0 ED EB 
11903     EA E9 E9 EA | 	byte	$fe, $02, $04, $05, $04, $02, $fe, $f9, $f5, $f0, $ed, $eb, $ea, $e9, $e9, $ea
11907     EB EE F0 F4 
1190b     F7 FC 00 05 
1190f     09 0D 0F 11 
11913     14 15 16 17 | 	byte	$eb, $ee, $f0, $f4, $f7, $fc, $00, $05, $09, $0d, $0f, $11, $14, $15, $16, $17
11917     19 1A 1C 1E 
1191b     20 22 25 28 
1191f     2A 2C 2E 30 
11923     31 33 33 34 | 	byte	$19, $1a, $1c, $1e, $20, $22, $25, $28, $2a, $2c, $2e, $30, $31, $33, $33, $34
11927     34 34 35 35 
1192b     36 37 38 39 
1192f     39 39 38 35 
11933     33 2E 2A 24 | 	byte	$34, $34, $35, $35, $36, $37, $38, $39, $39, $39, $38, $35, $33, $2e, $2a, $24
11937     1D 15 0D 05 
1193b     FF F9 F5 F1 
1193f     F0 EF EF EF 
11943     F0 F1 F3 F5 | 	byte	$1d, $15, $0d, $05, $ff, $f9, $f5, $f1, $f0, $ef, $ef, $ef, $f0, $f1, $f3, $f5
11947     F7 F9 FB FF 
1194b     02 05 09 0C 
1194f     0F 12 13 14 
11953     14 14 11 0E | 	byte	$f7, $f9, $fb, $ff, $02, $05, $09, $0c, $0f, $12, $13, $14, $14, $14, $11, $0e
11957     09 04 FC F2 
1195b     E8 DC D0 C6 
1195f     BC B5 AF AB 
11963     AA A9 AA AC | 	byte	$09, $04, $fc, $f2, $e8, $dc, $d0, $c6, $bc, $b5, $af, $ab, $aa, $a9, $aa, $ac
11967     AF B3 B7 BD 
1196b     C3 CA D0 D6 
1196f     DE E3 E8 ED 
11973     F2 F6 FA FE | 	byte	$af, $b3, $b7, $bd, $c3, $ca, $d0, $d6, $de, $e3, $e8, $ed, $f2, $f6, $fa, $fe
11977     00 02 01 FE 
1197b     FB F7 F2 EF 
1197f     EC E9 E8 E7 
11983     E8 E9 EB ED | 	byte	$00, $02, $01, $fe, $fb, $f7, $f2, $ef, $ec, $e9, $e8, $e7, $e8, $e9, $eb, $ed
11987     EF F3 F6 FB 
1198b     00 04 0A 0D 
1198f     11 13 15 17 
11993     18 19 1A 1B | 	byte	$ef, $f3, $f6, $fb, $00, $04, $0a, $0d, $11, $13, $15, $17, $18, $19, $1a, $1b
11997     1C 1E 20 22 
1199b     24 27 28 2B 
1199f     2C 2E 30 31 
119a3     32 33 33 33 | 	byte	$1c, $1e, $20, $22, $24, $27, $28, $2b, $2c, $2e, $30, $31, $32, $33, $33, $33
119a7     34 35 35 37 
119ab     38 39 39 3A 
119af     39 38 36 32 
119b3     2F 29 25 1E | 	byte	$34, $35, $35, $37, $38, $39, $39, $3a, $39, $38, $36, $32, $2f, $29, $25, $1e
119b7     17 11 09 04 
119bb     FF FA F6 F3 
119bf     F2 F0 F0 F0 
119c3     F1 F2 F3 F5 | 	byte	$17, $11, $09, $04, $ff, $fa, $f6, $f3, $f2, $f0, $f0, $f0, $f1, $f2, $f3, $f5
119c7     F7 F9 FD 00 
119cb     03 07 09 0C 
119cf     0E 10 10 10 
119d3     0F 0C 09 06 | 	byte	$f7, $f9, $fd, $00, $03, $07, $09, $0c, $0e, $10, $10, $10, $0f, $0c, $09, $06
119d7     00 F9 F1 E6 
119db     DC D0 C7 BE 
119df     B7 B1 AE AC 
119e3     AB AC AD B0 | 	byte	$00, $f9, $f1, $e6, $dc, $d0, $c7, $be, $b7, $b1, $ae, $ac, $ab, $ac, $ad, $b0
119e7     B4 B9 BE C4 
119eb     CA D1 D7 DC 
119ef     E2 E7 ED F1 
119f3     F5 F9 FC FD | 	byte	$b4, $b9, $be, $c4, $ca, $d1, $d7, $dc, $e2, $e7, $ed, $f1, $f5, $f9, $fc, $fd
119f7     FD FB F8 F5 
119fb     F2 EE EC E9 
119ff     E8 E7 E7 E8 
11a03     EA EC EE F1 | 	byte	$fd, $fb, $f8, $f5, $f2, $ee, $ec, $e9, $e8, $e7, $e7, $e8, $ea, $ec, $ee, $f1
11a07     F5 F9 FE 02 
11a0b     07 0C 10 14 
11a0f     17 19 1A 1B 
11a13     1C 1D 1E 1E | 	byte	$f5, $f9, $fe, $02, $07, $0c, $10, $14, $17, $19, $1a, $1b, $1c, $1d, $1e, $1e
11a17     20 22 23 25 
11a1b     28 29 2B 2D 
11a1f     2E 2F 30 31 
11a23     32 32 32 33 | 	byte	$20, $22, $23, $25, $28, $29, $2b, $2d, $2e, $2f, $30, $31, $32, $32, $32, $33
11a27     34 35 37 38 
11a2b     38 39 39 39 
11a2f     37 35 32 2E 
11a33     29 25 1F 19 | 	byte	$34, $35, $37, $38, $38, $39, $39, $39, $37, $35, $32, $2e, $29, $25, $1f, $19
11a37     13 0D 07 02 
11a3b     FD F9 F6 F3 
11a3f     F1 F1 F0 F1 
11a43     F1 F2 F4 F7 | 	byte	$13, $0d, $07, $02, $fd, $f9, $f6, $f3, $f1, $f1, $f0, $f1, $f1, $f2, $f4, $f7
11a47     F9 FC FF 03 
11a4b     06 08 0B 0D 
11a4f     0D 0D 0D 0B 
11a53     09 07 02 FD | 	byte	$f9, $fc, $ff, $03, $06, $08, $0b, $0d, $0d, $0d, $0d, $0b, $09, $07, $02, $fd
11a57     F4 EA E1 D5 
11a5b     CC C2 BA B4 
11a5f     AF AC AB AB 
11a63     AD AF B2 B7 | 	byte	$f4, $ea, $e1, $d5, $cc, $c2, $ba, $b4, $af, $ac, $ab, $ab, $ad, $af, $b2, $b7
11a67     BC C2 C7 CE 
11a6b     D4 DA DF E4 
11a6f     E9 EE F2 F6 
11a73     F9 FA F9 F7 | 	byte	$bc, $c2, $c7, $ce, $d4, $da, $df, $e4, $e9, $ee, $f2, $f6, $f9, $fa, $f9, $f7
11a77     F5 F2 EF EC 
11a7b     EA E8 E7 E7 
11a7f     E7 E8 EA EC 
11a83     EF F2 F5 FA | 	byte	$f5, $f2, $ef, $ec, $ea, $e8, $e7, $e7, $e7, $e8, $ea, $ec, $ef, $f2, $f5, $fa
11a87     FF 04 09 0D 
11a8b     11 15 18 1C 
11a8f     1E 20 21 21 
11a93     22 22 23 24 | 	byte	$ff, $04, $09, $0d, $11, $15, $18, $1c, $1e, $20, $21, $21, $22, $22, $23, $24
11a97     26 28 29 2B 
11a9b     2C 2D 2E 2F 
11a9f     30 30 30 31 
11aa3     31 32 33 34 | 	byte	$26, $28, $29, $2b, $2c, $2d, $2e, $2f, $30, $30, $30, $31, $31, $32, $33, $34
11aa7     35 37 38 39 
11aab     38 39 38 36 
11aaf     33 30 2C 27 
11ab3     22 1D 18 13 | 	byte	$35, $37, $38, $39, $38, $39, $38, $36, $33, $30, $2c, $27, $22, $1d, $18, $13
11ab7     0D 07 03 FE 
11abb     FA F6 F3 F2 
11abf     F1 F0 F0 F1 
11ac3     F3 F5 F7 FA | 	byte	$0d, $07, $03, $fe, $fa, $f6, $f3, $f2, $f1, $f0, $f0, $f1, $f3, $f5, $f7, $fa
11ac7     FD 00 03 06 
11acb     08 0A 0B 0B 
11acf     0A 09 08 06 
11ad3     02 FC F4 EA | 	byte	$fd, $00, $03, $06, $08, $0a, $0b, $0b, $0a, $09, $08, $06, $02, $fc, $f4, $ea
11ad7     E0 D6 CB C3 
11adb     BA B3 AF AC 
11adf     AA AA AB AE 
11ae3     B2 B6 BB C1 | 	byte	$e0, $d6, $cb, $c3, $ba, $b3, $af, $ac, $aa, $aa, $ab, $ae, $b2, $b6, $bb, $c1
11ae7     C7 CD D3 D8 
11aeb     DE E3 E8 EC 
11aef     F1 F4 F6 F6 
11af3     F4 F2 EF ED | 	byte	$c7, $cd, $d3, $d8, $de, $e3, $e8, $ec, $f1, $f4, $f6, $f6, $f4, $f2, $ef, $ed
11af7     EA E8 E6 E6 
11afb     E5 E5 E6 E8 
11aff     EA ED F0 F4 
11b03     F7 FC 01 06 | 	byte	$ea, $e8, $e6, $e6, $e5, $e5, $e6, $e8, $ea, $ed, $f0, $f4, $f7, $fc, $01, $06
11b07     0B 0F 13 17 
11b0b     1B 1E 20 22 
11b0f     23 24 24 25 
11b13     26 27 28 29 | 	byte	$0b, $0f, $13, $17, $1b, $1e, $20, $22, $23, $24, $24, $25, $26, $27, $28, $29
11b17     2A 2B 2C 2D 
11b1b     2E 2E 2F 2F 
11b1f     30 30 31 32 
11b23     33 34 35 36 | 	byte	$2a, $2b, $2c, $2d, $2e, $2e, $2f, $2f, $30, $30, $31, $32, $33, $34, $35, $36
11b27     37 38 39 38 
11b2b     38 36 34 31 
11b2f     2C 28 24 1F 
11b33     1B 16 10 0B | 	byte	$37, $38, $39, $38, $38, $36, $34, $31, $2c, $28, $24, $1f, $1b, $16, $10, $0b
11b37     06 01 FC F9 
11b3b     F5 F3 F1 F0 
11b3f     F0 F1 F2 F4 
11b43     F6 F8 FC FF | 	byte	$06, $01, $fc, $f9, $f5, $f3, $f1, $f0, $f0, $f1, $f2, $f4, $f6, $f8, $fc, $ff
11b47     02 04 06 08 
11b4b     09 08 08 07 
11b4f     05 03 00 F9 
11b53     F2 E9 DE D4 | 	byte	$02, $04, $06, $08, $09, $08, $08, $07, $05, $03, $00, $f9, $f2, $e9, $de, $d4
11b57     CA C1 B9 B3 
11b5b     AF AC AA AA 
11b5f     AC AF B2 B7 
11b63     BC C3 C8 CE | 	byte	$ca, $c1, $b9, $b3, $af, $ac, $aa, $aa, $ac, $af, $b2, $b7, $bc, $c3, $c8, $ce
11b67     D5 DA DF E4 
11b6b     E9 ED F1 F3 
11b6f     F4 F3 F0 EE 
11b73     EB E9 E6 E5 | 	byte	$d5, $da, $df, $e4, $e9, $ed, $f1, $f3, $f4, $f3, $f0, $ee, $eb, $e9, $e6, $e5
11b77     E4 E4 E4 E5 
11b7b     E7 E9 EB EE 
11b7f     F1 F5 F9 FE 
11b83     03 08 0D 11 | 	byte	$e4, $e4, $e4, $e5, $e7, $e9, $eb, $ee, $f1, $f5, $f9, $fe, $03, $08, $0d, $11
11b87     15 19 1C 1F 
11b8b     21 23 25 26 
11b8f     27 28 28 29 
11b93     2A 2B 2C 2C | 	byte	$15, $19, $1c, $1f, $21, $23, $25, $26, $27, $28, $28, $29, $2a, $2b, $2c, $2c
11b97     2D 2D 2E 2E 
11b9b     2E 2E 2F 2F 
11b9f     30 31 32 34 
11ba3     34 36 37 37 | 	byte	$2d, $2d, $2e, $2e, $2e, $2e, $2f, $2f, $30, $31, $32, $34, $34, $36, $37, $37
11ba7     37 37 36 35 
11bab     33 30 2C 27 
11baf     23 20 1C 17 
11bb3     13 0E 09 04 | 	byte	$37, $37, $36, $35, $33, $30, $2c, $27, $23, $20, $1c, $17, $13, $0e, $09, $04
11bb7     00 FB F7 F5 
11bbb     F3 F1 F1 F1 
11bbf     F2 F3 F6 F8 
11bc3     FB FE 01 02 | 	byte	$00, $fb, $f7, $f5, $f3, $f1, $f1, $f1, $f2, $f3, $f6, $f8, $fb, $fe, $01, $02
11bc7     04 05 05 05 
11bcb     04 03 02 00 
11bcf     FD F7 EF E6 
11bd3     DD D2 C9 C0 | 	byte	$04, $05, $05, $05, $04, $03, $02, $00, $fd, $f7, $ef, $e6, $dd, $d2, $c9, $c0
11bd7     B8 B3 AF AC 
11bdb     AB AB AD B0 
11bdf     B4 B8 BE C3 
11be3     C9 CE D4 DA | 	byte	$b8, $b3, $af, $ac, $ab, $ab, $ad, $b0, $b4, $b8, $be, $c3, $c9, $ce, $d4, $da
11be7     DE E3 E7 EC 
11beb     EE EF EF ED 
11bef     EA E8 E6 E4 
11bf3     E3 E2 E2 E2 | 	byte	$de, $e3, $e7, $ec, $ee, $ef, $ef, $ed, $ea, $e8, $e6, $e4, $e3, $e2, $e2, $e2
11bf7     E3 E5 E7 E9 
11bfb     EC F0 F3 F7 
11bff     FC 01 06 0A 
11c03     0F 13 17 1A | 	byte	$e3, $e5, $e7, $e9, $ec, $f0, $f3, $f7, $fc, $01, $06, $0a, $0f, $13, $17, $1a
11c07     1D 20 23 25 
11c0b     27 29 2A 2A 
11c0f     2B 2C 2D 2D 
11c13     2E 2E 2F 2E | 	byte	$1d, $20, $23, $25, $27, $29, $2a, $2a, $2b, $2c, $2d, $2d, $2e, $2e, $2f, $2e
11c17     2E 2E 2E 2F 
11c1b     2F 2F 30 31 
11c1f     32 33 34 35 
11c23     36 36 37 36 | 	byte	$2e, $2e, $2e, $2f, $2f, $2f, $30, $31, $32, $33, $34, $35, $36, $36, $37, $36
11c27     36 35 32 30 
11c2b     2C 29 25 20 
11c2f     1D 19 15 11 
11c33     0C 08 03 FF | 	byte	$36, $35, $32, $30, $2c, $29, $25, $20, $1d, $19, $15, $11, $0c, $08, $03, $ff
11c37     FB F7 F5 F3 
11c3b     F2 F2 F3 F4 
11c3f     F6 F8 FA FD 
11c43     FF 01 03 03 | 	byte	$fb, $f7, $f5, $f3, $f2, $f2, $f3, $f4, $f6, $f8, $fa, $fd, $ff, $01, $03, $03
11c47     04 03 02 02 
11c4b     01 FF FD F6 
11c4f     EF E6 DC D2 
11c53     C9 C1 B9 B4 | 	byte	$04, $03, $02, $02, $01, $ff, $fd, $f6, $ef, $e6, $dc, $d2, $c9, $c1, $b9, $b4
11c57     B0 AD AC AC 
11c5b     AE B1 B4 B9 
11c5f     BD C2 C8 CD 
11c63     D4 D8 DE E2 | 	byte	$b0, $ad, $ac, $ac, $ae, $b1, $b4, $b9, $bd, $c2, $c8, $cd, $d4, $d8, $de, $e2
11c67     E6 E9 EB EB 
11c6b     E9 E7 E5 E3 
11c6f     E1 E1 DF DF 
11c73     E0 E1 E3 E5 | 	byte	$e6, $e9, $eb, $eb, $e9, $e7, $e5, $e3, $e1, $e1, $df, $df, $e0, $e1, $e3, $e5
11c77     E7 EA ED F1 
11c7b     F5 F9 FE 03 
11c7f     08 0C 10 15 
11c83     18 1C 1E 21 | 	byte	$e7, $ea, $ed, $f1, $f5, $f9, $fe, $03, $08, $0c, $10, $15, $18, $1c, $1e, $21
11c87     24 26 28 2A 
11c8b     2C 2D 2E 2F 
11c8f     2F 30 30 30 
11c93     30 2F 2F 2F | 	byte	$24, $26, $28, $2a, $2c, $2d, $2e, $2f, $2f, $30, $30, $30, $30, $2f, $2f, $2f
11c97     2F 2F 2F 30 
11c9b     30 31 32 33 
11c9f     34 35 35 36 
11ca3     36 36 35 34 | 	byte	$2f, $2f, $2f, $30, $30, $31, $32, $33, $34, $35, $35, $36, $36, $36, $35, $34
11ca7     32 30 2D 29 
11cab     24 21 1E 1A 
11caf     17 13 0F 0B 
11cb3     06 01 FD FA | 	byte	$32, $30, $2d, $29, $24, $21, $1e, $1a, $17, $13, $0f, $0b, $06, $01, $fd, $fa
11cb7     F7 F5 F3 F3 
11cbb     F3 F4 F6 F7 
11cbf     FA FC FE FF 
11cc3     00 01 01 00 | 	byte	$f7, $f5, $f3, $f3, $f3, $f4, $f6, $f7, $fa, $fc, $fe, $ff, $00, $01, $01, $00
11cc7     00 FF FF FD 
11ccb     FA F5 ED E4 
11ccf     DC D2 C9 C0 
11cd3     B8 B3 AF AC | 	byte	$00, $ff, $ff, $fd, $fa, $f5, $ed, $e4, $dc, $d2, $c9, $c0, $b8, $b3, $af, $ac
11cd7     AB AC AD B0 
11cdb     B4 B8 BD C2 
11cdf     C8 CD D2 D8 
11ce3     DC E1 E5 E7 | 	byte	$ab, $ac, $ad, $b0, $b4, $b8, $bd, $c2, $c8, $cd, $d2, $d8, $dc, $e1, $e5, $e7
11ce7     E7 E6 E5 E3 
11ceb     E0 DF DE DD 
11cef     DD DD DE E0 
11cf3     E2 E5 E7 EB | 	byte	$e7, $e6, $e5, $e3, $e0, $df, $de, $dd, $dd, $dd, $de, $e0, $e2, $e5, $e7, $eb
11cf7     EE F3 F7 FB 
11cfb     00 04 09 0E 
11cff     12 16 1A 1D 
11d03     20 22 25 27 | 	byte	$ee, $f3, $f7, $fb, $00, $04, $09, $0e, $12, $16, $1a, $1d, $20, $22, $25, $27
11d07     2A 2C 2E 2F 
11d0b     31 31 32 32 
11d0f     32 32 32 31 
11d13     30 30 30 30 | 	byte	$2a, $2c, $2e, $2f, $31, $31, $32, $32, $32, $32, $32, $31, $30, $30, $30, $30
11d17     30 30 31 31 
11d1b     32 33 33 34 
11d1f     35 35 35 35 
11d23     35 34 33 31 | 	byte	$30, $30, $31, $31, $32, $33, $33, $34, $35, $35, $35, $35, $35, $34, $33, $31
11d27     2E 2B 26 23 
11d2b     1F 1C 19 16 
11d2f     13 0E 0A 06 
11d33     02 FE FB F8 | 	byte	$2e, $2b, $26, $23, $1f, $1c, $19, $16, $13, $0e, $0a, $06, $02, $fe, $fb, $f8
11d37     F6 F5 F5 F5 
11d3b     F6 F7 F8 FA 
11d3f     FB FC FD FD 
11d43     FD FC FC FC | 	byte	$f6, $f5, $f5, $f5, $f6, $f7, $f8, $fa, $fb, $fc, $fd, $fd, $fd, $fc, $fc, $fc
11d47     FC FB F9 F4 
11d4b     EE E6 DE D3 
11d4f     CB C2 BB B5 
11d53     B1 AE AD AD | 	byte	$fc, $fb, $f9, $f4, $ee, $e6, $de, $d3, $cb, $c2, $bb, $b5, $b1, $ae, $ad, $ad
11d57     AE B0 B3 B8 
11d5b     BB C0 C6 CB 
11d5f     D0 D5 DA DE 
11d63     E1 E3 E3 E2 | 	byte	$ae, $b0, $b3, $b8, $bb, $c0, $c6, $cb, $d0, $d5, $da, $de, $e1, $e3, $e3, $e2
11d67     E0 DE DD DB 
11d6b     DB DA DA DB 
11d6f     DC DE E1 E4 
11d73     E7 EA EE F2 | 	byte	$e0, $de, $dd, $db, $db, $da, $da, $db, $dc, $de, $e1, $e4, $e7, $ea, $ee, $f2
11d77     F7 FB FF 04 
11d7b     08 0D 11 15 
11d7f     19 1C 1F 22 
11d83     24 26 29 2C | 	byte	$f7, $fb, $ff, $04, $08, $0d, $11, $15, $19, $1c, $1f, $22, $24, $26, $29, $2c
11d87     2D 2F 31 32 
11d8b     33 33 33 33 
11d8f     32 31 31 30 
11d93     30 30 30 30 | 	byte	$2d, $2f, $31, $32, $33, $33, $33, $33, $32, $31, $31, $30, $30, $30, $30, $30
11d97     30 31 31 32 
11d9b     32 33 33 34 
11d9f     34 34 34 33 
11da3     33 31 2F 2C | 	byte	$30, $31, $31, $32, $32, $33, $33, $34, $34, $34, $34, $33, $33, $31, $2f, $2c
11da7     28 24 21 1D 
11dab     1A 17 14 11 
11daf     0E 0A 07 04 
11db3     01 FF FC FA | 	byte	$28, $24, $21, $1d, $1a, $17, $14, $11, $0e, $0a, $07, $04, $01, $ff, $fc, $fa
11db7     F9 F8 F7 F8 
11dbb     F8 F9 FA FB 
11dbf     FB FB FA FA 
11dc3     FA F9 F9 F9 | 	byte	$f9, $f8, $f7, $f8, $f8, $f9, $fa, $fb, $fb, $fb, $fa, $fa, $fa, $f9, $f9, $f9
11dc7     F9 F6 F2 EC 
11dcb     E6 DE D5 CE 
11dcf     C6 C0 BB B7 
11dd3     B4 B2 B2 B2 | 	byte	$f9, $f6, $f2, $ec, $e6, $de, $d5, $ce, $c6, $c0, $bb, $b7, $b4, $b2, $b2, $b2
11dd7     B4 B6 B9 BD 
11ddb     C1 C6 CA CF 
11ddf     D3 D8 DB DC 
11de3     DD DD DC DB | 	byte	$b4, $b6, $b9, $bd, $c1, $c6, $ca, $cf, $d3, $d8, $db, $dc, $dd, $dd, $dc, $db
11de7     D9 D9 D8 D8 
11deb     D8 D9 DA DC 
11def     DE E1 E4 E7 
11df3     EA EF F3 F6 | 	byte	$d9, $d9, $d8, $d8, $d8, $d9, $da, $dc, $de, $e1, $e4, $e7, $ea, $ef, $f3, $f6
11df7     FB FF 04 08 
11dfb     0C 11 14 18 
11dff     1B 1E 21 23 
11e03     27 29 2B 2D | 	byte	$fb, $ff, $04, $08, $0c, $11, $14, $18, $1b, $1e, $21, $23, $27, $29, $2b, $2d
11e07     2F 31 32 33 
11e0b     34 34 35 34 
11e0f     33 33 32 31 
11e13     31 31 31 31 | 	byte	$2f, $31, $32, $33, $34, $34, $35, $34, $33, $33, $32, $31, $31, $31, $31, $31
11e17     31 31 31 32 
11e1b     32 33 32 32 
11e1f     32 32 32 31 
11e23     30 2E 2B 29 | 	byte	$31, $31, $31, $32, $32, $33, $32, $32, $32, $32, $32, $31, $30, $2e, $2b, $29
11e27     25 21 1E 1B 
11e2b     18 16 13 10 
11e2f     0D 0B 07 04 
11e33     02 FF FE FC | 	byte	$25, $21, $1e, $1b, $18, $16, $13, $10, $0d, $0b, $07, $04, $02, $ff, $fe, $fc
11e37     FA F9 F9 F9 
11e3b     F9 FA FA F9 
11e3f     F9 F9 F8 F8 
11e43     F8 F9 F8 F7 | 	byte	$fa, $f9, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f8, $f8, $f8, $f9, $f8, $f7
11e47     F4 F0 EB E4 
11e4b     DD D5 CE C8 
11e4f     C1 BC B8 B5 
11e53     B3 B3 B3 B4 | 	byte	$f4, $f0, $eb, $e4, $dd, $d5, $ce, $c8, $c1, $bc, $b8, $b5, $b3, $b3, $b3, $b4
11e57     B7 BA BD C1 
11e5b     C5 CA CE D2 
11e5f     D5 D7 D9 D9 
11e63     D8 D8 D7 D5 | 	byte	$b7, $ba, $bd, $c1, $c5, $ca, $ce, $d2, $d5, $d7, $d9, $d9, $d8, $d8, $d7, $d5
11e67     D5 D5 D5 D6 
11e6b     D8 D9 DB DE 
11e6f     E1 E4 E8 EC 
11e73     F0 F4 F8 FC | 	byte	$d5, $d5, $d5, $d6, $d8, $d9, $db, $de, $e1, $e4, $e8, $ec, $f0, $f4, $f8, $fc
11e77     01 05 09 0D 
11e7b     11 15 19 1C 
11e7f     1F 22 25 27 
11e83     2A 2C 2E 30 | 	byte	$01, $05, $09, $0d, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30
11e87     32 33 34 35 
11e8b     35 35 35 34 
11e8f     33 33 33 32 
11e93     32 32 31 31 | 	byte	$32, $33, $34, $35, $35, $35, $35, $34, $33, $33, $33, $32, $32, $32, $31, $31
11e97     31 31 31 31 
11e9b     32 32 32 32 
11e9f     32 31 31 30 
11ea3     2E 2C 29 26 | 	byte	$31, $31, $31, $31, $32, $32, $32, $32, $32, $31, $31, $30, $2e, $2c, $29, $26
11ea7     22 1F 1B 19 
11eab     16 13 11 0F 
11eaf     0C 0A 07 04 
11eb3     02 00 FE FC | 	byte	$22, $1f, $1b, $19, $16, $13, $11, $0f, $0c, $0a, $07, $04, $02, $00, $fe, $fc
11eb7     FB FA FA F9 
11ebb     F9 F9 F8 F8 
11ebf     F7 F7 F7 F7 
11ec3     F7 F7 F6 F3 | 	byte	$fb, $fa, $fa, $f9, $f9, $f9, $f8, $f8, $f7, $f7, $f7, $f7, $f7, $f7, $f6, $f3
11ec7     EF EA E4 DD 
11ecb     D6 CE C7 C2 
11ecf     BD B9 B6 B4 
11ed3     B4 B4 B5 B7 | 	byte	$ef, $ea, $e4, $dd, $d6, $ce, $c7, $c2, $bd, $b9, $b6, $b4, $b4, $b4, $b5, $b7
11ed7     BA BD C0 C5 
11edb     C9 CD D0 D3 
11edf     D5 D5 D6 D5 
11ee3     D4 D3 D3 D2 | 	byte	$ba, $bd, $c0, $c5, $c9, $cd, $d0, $d3, $d5, $d5, $d6, $d5, $d4, $d3, $d3, $d2
11ee7     D3 D3 D4 D6 
11eeb     D9 DB DF E3 
11eef     E5 E9 ED F1 
11ef3     F6 F9 FE 02 | 	byte	$d3, $d3, $d4, $d6, $d9, $db, $df, $e3, $e5, $e9, $ed, $f1, $f6, $f9, $fe, $02
11ef7     06 0A 0E 12 
11efb     16 19 1C 1F 
11eff     22 25 28 2A 
11f03     2C 2E 30 31 | 	byte	$06, $0a, $0e, $12, $16, $19, $1c, $1f, $22, $25, $28, $2a, $2c, $2e, $30, $31
11f07     33 34 36 36 
11f0b     36 36 36 36 
11f0f     35 34 34 33 
11f13     33 32 32 32 | 	byte	$33, $34, $36, $36, $36, $36, $36, $36, $35, $34, $34, $33, $33, $32, $32, $32
11f17     31 32 32 31 
11f1b     31 31 31 31 
11f1f     31 30 2F 2E 
11f23     2B 29 26 22 | 	byte	$31, $32, $32, $31, $31, $31, $31, $31, $31, $30, $2f, $2e, $2b, $29, $26, $22
11f27     1F 1C 19 17 
11f2b     14 12 10 0E 
11f2f     0C 0A 07 05 
11f33     02 00 FE FD | 	byte	$1f, $1c, $19, $17, $14, $12, $10, $0e, $0c, $0a, $07, $05, $02, $00, $fe, $fd
11f37     FC FB FA F9 
11f3b     F9 F8 F7 F6 
11f3f     F6 F5 F6 F6 
11f43     F5 F4 F2 EF | 	byte	$fc, $fb, $fa, $f9, $f9, $f8, $f7, $f6, $f6, $f5, $f6, $f6, $f5, $f4, $f2, $ef
11f47     EA E4 DD D7 
11f4b     CF C8 C3 BD 
11f4f     BA B7 B5 B4 
11f53     B4 B5 B7 B9 | 	byte	$ea, $e4, $dd, $d7, $cf, $c8, $c3, $bd, $ba, $b7, $b5, $b4, $b4, $b5, $b7, $b9
11f57     BC BF C3 C7 
11f5b     CB CE D0 D2 
11f5f     D2 D2 D1 D0 
11f63     D0 D0 CF D0 | 	byte	$bc, $bf, $c3, $c7, $cb, $ce, $d0, $d2, $d2, $d2, $d1, $d0, $d0, $d0, $cf, $d0
11f67     D1 D2 D4 D7 
11f6b     DA DD E1 E4 
11f6f     E9 ED F1 F5 
11f73     F9 FE 02 06 | 	byte	$d1, $d2, $d4, $d7, $da, $dd, $e1, $e4, $e9, $ed, $f1, $f5, $f9, $fe, $02, $06
11f77     0A 0E 12 15 
11f7b     19 1C 1F 23 
11f7f     25 28 2A 2C 
11f83     2E 30 31 33 | 	byte	$0a, $0e, $12, $15, $19, $1c, $1f, $23, $25, $28, $2a, $2c, $2e, $30, $31, $33
11f87     34 35 36 36 
11f8b     37 37 37 36 
11f8f     35 35 34 34 
11f93     33 32 31 31 | 	byte	$34, $35, $36, $36, $37, $37, $37, $36, $35, $35, $34, $34, $33, $32, $31, $31
11f97     31 31 31 30 
11f9b     30 30 30 30 
11f9f     30 2F 2E 2C 
11fa3     29 26 23 20 | 	byte	$31, $31, $31, $30, $30, $30, $30, $30, $30, $2f, $2e, $2c, $29, $26, $23, $20
11fa7     1D 19 17 14 
11fab     12 10 0E 0D 
11faf     0B 09 07 05 
11fb3     03 01 FF FE | 	byte	$1d, $19, $17, $14, $12, $10, $0e, $0d, $0b, $09, $07, $05, $03, $01, $ff, $fe
11fb7     FD FC FA F9 
11fbb     F8 F7 F6 F6 
11fbf     F5 F5 F5 F5 
11fc3     F4 F3 EF EB | 	byte	$fd, $fc, $fa, $f9, $f8, $f7, $f6, $f6, $f5, $f5, $f5, $f5, $f4, $f3, $ef, $eb
11fc7     E6 DF D9 D3 
11fcb     CC C7 C2 BE 
11fcf     BB B8 B7 B6 
11fd3     B7 B8 BA BC | 	byte	$e6, $df, $d9, $d3, $cc, $c7, $c2, $be, $bb, $b8, $b7, $b6, $b7, $b8, $ba, $bc
11fd7     BF C3 C6 C9 
11fdb     CB CD CD CE 
11fdf     CD CD CC CC 
11fe3     CC CC CD CE | 	byte	$bf, $c3, $c6, $c9, $cb, $cd, $cd, $ce, $cd, $cd, $cc, $cc, $cc, $cc, $cd, $ce
11fe7     D0 D2 D5 D8 
11feb     DB E0 E4 E8 
11fef     EC F0 F5 F9 
11ff3     FD 02 06 09 | 	byte	$d0, $d2, $d5, $d8, $db, $e0, $e4, $e8, $ec, $f0, $f5, $f9, $fd, $02, $06, $09
11ff7     0E 11 15 19 
11ffb     1C 1F 22 26 
11fff     27 2A 2D 2E 
12003     30 31 33 34 | 	byte	$0e, $11, $15, $19, $1c, $1f, $22, $26, $27, $2a, $2d, $2e, $30, $31, $33, $34
12007     35 36 37 38 
1200b     38 38 38 37 
1200f     37 36 35 34 
12013     33 33 32 31 | 	byte	$35, $36, $37, $38, $38, $38, $38, $37, $37, $36, $35, $34, $33, $33, $32, $31
12017     31 31 31 30 
1201b     31 30 30 30 
1201f     2F 2E 2C 2A 
12023     27 24 21 1E | 	byte	$31, $31, $31, $30, $31, $30, $30, $30, $2f, $2e, $2c, $2a, $27, $24, $21, $1e
12027     1A 18 15 13 
1202b     11 10 0F 0D 
1202f     0B 09 07 05 
12033     03 01 FF FD | 	byte	$1a, $18, $15, $13, $11, $10, $0f, $0d, $0b, $09, $07, $05, $03, $01, $ff, $fd
12037     FC FB F9 F8 
1203b     F7 F6 F5 F5 
1203f     F4 F4 F4 F3 
12043     F1 EE E9 E4 | 	byte	$fc, $fb, $f9, $f8, $f7, $f6, $f5, $f5, $f4, $f4, $f4, $f3, $f1, $ee, $e9, $e4
12047     DE D8 D2 CC 
1204b     C5 C1 BD BA 
1204f     B7 B6 B5 B6 
12053     B7 B8 BB BE | 	byte	$de, $d8, $d2, $cc, $c5, $c1, $bd, $ba, $b7, $b6, $b5, $b6, $b7, $b8, $bb, $be
12057     C1 C4 C6 C8 
1205b     CA CA CA CA 
1205f     C9 C9 C9 C9 
12063     CA CB CC CF | 	byte	$c1, $c4, $c6, $c8, $ca, $ca, $ca, $ca, $c9, $c9, $c9, $c9, $ca, $cb, $cc, $cf
12067     D1 D5 D8 DC 
1206b     E0 E5 E9 EE 
1206f     F2 F6 FA FF 
12073     03 07 0B 0F | 	byte	$d1, $d5, $d8, $dc, $e0, $e5, $e9, $ee, $f2, $f6, $fa, $ff, $03, $07, $0b, $0f
12077     13 17 1A 1E 
1207b     21 23 27 29 
1207f     2C 2E 2F 31 
12083     32 34 35 36 | 	byte	$13, $17, $1a, $1e, $21, $23, $27, $29, $2c, $2e, $2f, $31, $32, $34, $35, $36
12087     37 38 39 39 
1208b     39 39 39 38 
1208f     38 37 36 35 
12093     34 33 32 32 | 	byte	$37, $38, $39, $39, $39, $39, $39, $38, $38, $37, $36, $35, $34, $33, $32, $32
12097     31 31 31 31 
1209b     30 30 30 30 
1209f     2E 2D 2B 28 
120a3     25 22 1F 1C | 	byte	$31, $31, $31, $31, $30, $30, $30, $30, $2e, $2d, $2b, $28, $25, $22, $1f, $1c
120a7     19 16 14 13 
120ab     11 10 0E 0C 
120af     0A 08 06 04 
120b3     02 01 FE FD | 	byte	$19, $16, $14, $13, $11, $10, $0e, $0c, $0a, $08, $06, $04, $02, $01, $fe, $fd
120b7     FB F9 F8 F7 
120bb     F6 F4 F3 F3 
120bf     F2 F2 F0 EE 
120c3     EA E6 E0 DA | 	byte	$fb, $f9, $f8, $f7, $f6, $f4, $f3, $f3, $f2, $f2, $f0, $ee, $ea, $e6, $e0, $da
120c7     D4 CE C8 C3 
120cb     BF BB B8 B6 
120cf     B5 B5 B6 B7 
120d3     B9 BC BE C1 | 	byte	$d4, $ce, $c8, $c3, $bf, $bb, $b8, $b6, $b5, $b5, $b6, $b7, $b9, $bc, $be, $c1
120d7     C3 C5 C6 C6 
120db     C6 C6 C6 C5 
120df     C5 C5 C6 C8 
120e3     C9 CC CF D2 | 	byte	$c3, $c5, $c6, $c6, $c6, $c6, $c6, $c5, $c5, $c5, $c6, $c8, $c9, $cc, $cf, $d2
120e7     D5 DA DE E2 
120eb     E7 EC F0 F5 
120ef     F9 FD 02 06 
120f3     0A 0E 12 16 | 	byte	$d5, $da, $de, $e2, $e7, $ec, $f0, $f5, $f9, $fd, $02, $06, $0a, $0e, $12, $16
120f7     19 1D 21 23 
120fb     26 29 2B 2E 
120ff     2F 31 32 33 
12103     35 36 37 38 | 	byte	$19, $1d, $21, $23, $26, $29, $2b, $2e, $2f, $31, $32, $33, $35, $36, $37, $38
12107     39 3A 3A 3B 
1210b     3B 3B 3A 39 
1210f     38 37 36 35 
12113     34 33 32 32 | 	byte	$39, $3a, $3a, $3b, $3b, $3b, $3a, $39, $38, $37, $36, $35, $34, $33, $32, $32
12117     32 31 30 30 
1211b     30 30 2F 2D 
1211f     2C 29 27 24 
12123     21 1E 1B 18 | 	byte	$32, $31, $30, $30, $30, $30, $2f, $2d, $2c, $29, $27, $24, $21, $1e, $1b, $18
12127     15 13 12 10 
1212b     0E 0D 0B 09 
1212f     08 05 03 01 
12133     FF FE FC FA | 	byte	$15, $13, $12, $10, $0e, $0d, $0b, $09, $08, $05, $03, $01, $ff, $fe, $fc, $fa
12137     F8 F6 F5 F4 
1213b     F3 F2 F2 00 
1213f     00 00 00 03 
12143     02 01 00 00 | 	byte	$f8, $f6, $f5, $f4, $f3, $f2, $f2, $00, $00, $00, $00, $03, $02, $01, $00, $00
12147     FE FE FD FC 
1214b     FB FA FA F9 
1214f     FA FA FA FB 
12153     FC FD FD FE | 	byte	$fe, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $fa, $fa, $fa, $fb, $fc, $fd, $fd, $fe
12157     FE FE FF 00 
1215b     00 01 02 02 
1215f     02 00 00 FE 
12163     FD FC FB FA | 	byte	$fe, $fe, $ff, $00, $00, $01, $02, $02, $02, $00, $00, $fe, $fd, $fc, $fb, $fa
12167     FA FA F9 F9 
1216b     F8 F9 F9 F9 
1216f     FA FB FC FE 
12173     FF FF 00 00 | 	byte	$fa, $fa, $f9, $f9, $f8, $f9, $f9, $f9, $fa, $fb, $fc, $fe, $ff, $ff, $00, $00
12177     00 00 00 01 
1217b     00 00 FF FF 
1217f     FD FB FA F9 
12183     F8 F8 F8 F8 | 	byte	$00, $00, $00, $01, $00, $00, $ff, $ff, $fd, $fb, $fa, $f9, $f8, $f8, $f8, $f8
12187     F8 F9 F9 F9 
1218b     FA FA FA FB 
1218f     FC FE FE FF 
12193     FF FF FF FE | 	byte	$f8, $f9, $f9, $f9, $fa, $fa, $fa, $fb, $fc, $fe, $fe, $ff, $ff, $ff, $ff, $fe
12197     FE FE FF FF 
1219b     00 00 00 FF 
1219f     FF FF FF FF 
121a3     00 01 02 03 | 	byte	$fe, $fe, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $01, $02, $03
121a7     04 05 04 03 
121ab     03 02 02 02 
121af     03 03 03 03 
121b3     03 03 03 03 | 	byte	$04, $05, $04, $03, $03, $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03
121b7     04 05 07 08 
121bb     09 09 0A 0A 
121bf     09 08 08 07 
121c3     06 05 03 01 | 	byte	$04, $05, $07, $08, $09, $09, $0a, $0a, $09, $08, $08, $07, $06, $05, $03, $01
121c7     FE F9 F5 EF 
121cb     ED EC EF F5 
121cf     FB 03 09 11 
121d3     17 1B 1F 21 | 	byte	$fe, $f9, $f5, $ef, $ed, $ec, $ef, $f5, $fb, $03, $09, $11, $17, $1b, $1f, $21
121d7     24 25 24 20 
121db     1C 15 0E 04 
121df     FC F2 EB E8 
121e3     E8 EA EB EC | 	byte	$24, $25, $24, $20, $1c, $15, $0e, $04, $fc, $f2, $eb, $e8, $e8, $ea, $eb, $ec
121e7     EC EB EA EC 
121eb     F1 F8 03 0E 
121ef     19 21 27 2A 
121f3     2B 29 27 25 | 	byte	$ec, $eb, $ea, $ec, $f1, $f8, $03, $0e, $19, $21, $27, $2a, $2b, $29, $27, $25
121f7     24 21 1C 17 
121fb     10 04 F4 E6 
121ff     DB D7 D9 DE 
12203     E7 E9 E4 DC | 	byte	$24, $21, $1c, $17, $10, $04, $f4, $e6, $db, $d7, $d9, $de, $e7, $e9, $e4, $dc
12207     D8 DA E2 EE 
1220b     00 10 20 2C 
1220f     34 3A 3A 36 
12213     32 31 33 34 | 	byte	$d8, $da, $e2, $ee, $00, $10, $20, $2c, $34, $3a, $3a, $36, $32, $31, $33, $34
12217     30 27 1C 0E 
1221b     F8 DC C5 C1 
1221f     C6 CE D6 E0 
12223     E4 DA CB CA | 	byte	$30, $27, $1c, $0e, $f8, $dc, $c5, $c1, $c6, $ce, $d6, $e0, $e4, $da, $cb, $ca
12227     D3 E0 EF 01 
1222b     16 28 36 40 
1222f     46 44 3B 35 
12233     34 3A 3B 36 | 	byte	$d3, $e0, $ef, $01, $16, $28, $36, $40, $46, $44, $3b, $35, $34, $3a, $3b, $36
12237     2B 1B 09 F2 
1223b     C6 B0 B9 C3 
1223f     C4 C8 D6 E1 
12243     CC B6 C5 D4 | 	byte	$2b, $1b, $09, $f2, $c6, $b0, $b9, $c3, $c4, $c8, $d6, $e1, $cc, $b6, $c5, $d4
12247     DA EA 02 1A 
1224b     31 3C 47 4D 
1224f     4A 3E 36 3E 
12253     48 44 3F 33 | 	byte	$da, $ea, $02, $1a, $31, $3c, $47, $4d, $4a, $3e, $36, $3e, $48, $44, $3f, $33
12257     1F 08 E8 BD 
1225b     AC B4 B9 BA 
1225f     C2 D0 DA D6 
12263     AC B6 CC D5 | 	byte	$1f, $08, $e8, $bd, $ac, $b4, $b9, $ba, $c2, $d0, $da, $d6, $ac, $b6, $cc, $d5
12267     E4 F9 0B 2E 
1226b     38 47 51 4D 
1226f     3B 37 41 4B 
12273     4B 48 40 2A | 	byte	$e4, $f9, $0b, $2e, $38, $47, $51, $4d, $3b, $37, $41, $4b, $4b, $48, $40, $2a
12277     11 EB CA A5 
1227b     AC B4 B5 B5 
1227f     C3 CD D5 B2 
12283     A7 C4 CD DB | 	byte	$11, $eb, $ca, $a5, $ac, $b4, $b5, $b5, $c3, $cd, $d5, $b2, $a7, $c4, $cd, $db
12287     ED 00 19 36 
1228b     3F 55 54 41 
1228f     3A 44 54 57 
12293     53 4E 3F 20 | 	byte	$ed, $00, $19, $36, $3f, $55, $54, $41, $3a, $44, $54, $57, $53, $4e, $3f, $20
12297     FC DD AF A9 
1229b     AE B0 AC B9 
1229f     C4 CC CD 9E 
122a3     B3 C5 CF E0 | 	byte	$fc, $dd, $af, $a9, $ae, $b0, $ac, $b9, $c4, $cc, $cd, $9e, $b3, $c5, $cf, $e0
122a7     F1 07 1E 39 
122ab     47 57 46 3A 
122af     46 51 5C 5C 
122b3     5A 52 3D 12 | 	byte	$f1, $07, $1e, $39, $47, $57, $46, $3a, $46, $51, $5c, $5c, $5a, $52, $3d, $12
122b7     EB CD A7 AA 
122bb     AC AA AD B9 
122bf     C4 CC B3 A0 
122c3     B7 C4 D5 E3 | 	byte	$eb, $cd, $a7, $aa, $ac, $aa, $ad, $b9, $c4, $cc, $b3, $a0, $b7, $c4, $d5, $e3
122c7     F4 0E 20 3F 
122cb     50 50 3B 43 
122cf     50 5F 65 66 
122d3     61 53 30 03 | 	byte	$f4, $0e, $20, $3f, $50, $50, $3b, $43, $50, $5f, $65, $66, $61, $53, $30, $03
122d7     E9 B3 AB AD 
122db     AB A7 B0 BC 
122df     C6 CD A3 A9 
122e3     BD C9 D8 E6 | 	byte	$e9, $b3, $ab, $ad, $ab, $a7, $b0, $bc, $c6, $cd, $a3, $a9, $bd, $c9, $d8, $e6
122e7     F5 0D 22 42 
122eb     52 3C 3B 49 
122ef     58 67 6C 6C 
122f3     68 55 23 FD | 	byte	$f5, $0d, $22, $42, $52, $3c, $3b, $49, $58, $67, $6c, $6c, $68, $55, $23, $fd
122f7     DF B3 B0 AF 
122fb     A9 AB B6 C2 
122ff     CD C9 A2 AC 
12303     BE CF D7 E4 | 	byte	$df, $b3, $b0, $af, $a9, $ab, $b6, $c2, $cd, $c9, $a2, $ac, $be, $cf, $d7, $e4
12307     F7 06 26 41 
1230b     45 31 40 50 
1230f     62 6F 74 73 
12313     6E 4A 1C 01 | 	byte	$f7, $06, $26, $41, $45, $31, $40, $50, $62, $6f, $74, $73, $6e, $4a, $1c, $01
12317     CB B9 BA B1 
1231b     AE B1 BE C9 
1231f     D4 BE A8 B0 
12323     BC CE D0 DA | 	byte	$cb, $b9, $ba, $b1, $ae, $b1, $be, $c9, $d4, $be, $a8, $b0, $bc, $ce, $d0, $da
12327     F1 00 28 3A 
1232b     2E 31 44 54 
1232f     6B 75 7C 7D 
12333     70 3D 18 02 | 	byte	$f1, $00, $28, $3a, $2e, $31, $44, $54, $6b, $75, $7c, $7d, $70, $3d, $18, $02
12337     CB C4 BF B4 
1233b     B2 B7 C4 D0 
1233f     D5 B0 A6 B5 
12343     C1 D3 CE DB | 	byte	$cb, $c4, $bf, $b4, $b2, $b7, $c4, $d0, $d5, $b0, $a6, $b5, $c1, $d3, $ce, $db
12347     ED 05 2A 2D 
1234b     26 38 47 5C 
1234f     6F 7A 7E 7F 
12353     5E 35 1D F1 | 	byte	$ed, $05, $2a, $2d, $26, $38, $47, $5c, $6f, $7a, $7e, $7f, $5e, $35, $1d, $f1
12357     D1 CC BD B7 
1235b     B2 BC C6 D5 
1235f     D3 A8 A7 B6 
12363     C6 D6 CF DD | 	byte	$d1, $cc, $bd, $b7, $b2, $bc, $c6, $d5, $d3, $a8, $a7, $b6, $c6, $d6, $cf, $dd
12367     EE 08 27 21 
1236b     27 3F 4B 67 
1236f     76 7F 7F 7C 
12373     4F 2D 21 E6 | 	byte	$ee, $08, $27, $21, $27, $3f, $4b, $67, $76, $7f, $7f, $7c, $4f, $2d, $21, $e6
12377     D8 CF BE B5 
1237b     B3 C0 C8 D8 
1237f     CD A6 AB B7 
12383     CB D4 CF DB | 	byte	$d8, $cf, $be, $b5, $b3, $c0, $c8, $d8, $cd, $a6, $ab, $b7, $cb, $d4, $cf, $db
12387     F1 0B 1A 1C 
1238b     2D 3F 52 69 
1238f     78 7F 7F 6A 
12393     42 32 10 EC | 	byte	$f1, $0b, $1a, $1c, $2d, $3f, $52, $69, $78, $7f, $7f, $6a, $42, $32, $10, $ec
12397     E2 D0 C2 B4 
1239b     B7 C1 CF D9 
1239f     BA A4 B1 BE 
123a3     D3 CF D2 DD | 	byte	$e2, $d0, $c2, $b4, $b7, $c1, $cf, $d9, $ba, $a4, $b1, $be, $d3, $cf, $d2, $dd
123a7     F5 05 0F 20 
123ab     34 42 5A 6E 
123af     7A 7F 7F 5A 
123b3     39 36 04 F3 | 	byte	$f5, $05, $0f, $20, $34, $42, $5a, $6e, $7a, $7f, $7f, $5a, $39, $36, $04, $f3
123b7     E9 D5 C2 B4 
123bb     BC C1 D6 DC 
123bf     AD A7 B1 C4 
123c3     D8 CA D2 E1 | 	byte	$e9, $d5, $c2, $b4, $bc, $c1, $d6, $dc, $ad, $a7, $b1, $c4, $d8, $ca, $d2, $e1
123c7     F5 F9 0B 24 
123cb     36 46 60 71 
123cf     7C 7F 6B 46 
123d3     3B 2F 05 FC | 	byte	$f5, $f9, $0b, $24, $36, $46, $60, $71, $7c, $7f, $6b, $46, $3b, $2f, $05, $fc
123d7     EF DB BF B4 
123db     BC C6 DB DC 
123df     A3 AB B5 C9 
123e3     D6 C8 CF E3 | 	byte	$ef, $db, $bf, $b4, $bc, $c6, $db, $dc, $a3, $ab, $b5, $c9, $d6, $c8, $cf, $e3
123e7     EC F7 0C 29 
123eb     37 4D 62 72 
123ef     7D 78 5A 39 
123f3     3D 19 0C 05 | 	byte	$ec, $f7, $0c, $29, $37, $4d, $62, $72, $7d, $78, $5a, $39, $3d, $19, $0c, $05
123f7     F8 DD C0 B8 
123fb     BE D2 E1 CD 
123ff     A4 AD BF D0 
12403     D3 C9 D1 E5 | 	byte	$f8, $dd, $c0, $b8, $be, $d2, $e1, $cd, $a4, $ad, $bf, $d0, $d3, $c9, $d1, $e5
12407     DD FB 10 2B 
1240b     3A 51 64 72 
1240f     7A 60 44 39 
12413     3A 12 0F 12 | 	byte	$dd, $fb, $10, $2b, $3a, $51, $64, $72, $7a, $60, $44, $39, $3a, $12, $0f, $12
12417     04 DF C2 BB 
1241b     C0 D9 E6 B8 
1241f     AA AF C4 D4 
12423     CF CE D2 DA | 	byte	$04, $df, $c2, $bb, $c0, $d9, $e6, $b8, $aa, $af, $c4, $d4, $cf, $ce, $d2, $da
12427     D9 FE 18 2B 
1242b     3F 56 66 73 
1242f     69 57 30 38 
12433     27 14 18 1E | 	byte	$d9, $fe, $18, $2b, $3f, $56, $66, $73, $69, $57, $30, $38, $27, $14, $18, $1e
12437     0B E6 C4 BC 
1243b     CA E0 E9 A9 
1243f     AC B8 C9 D6 
12443     C8 D1 D2 CD | 	byte	$0b, $e6, $c4, $bc, $ca, $e0, $e9, $a9, $ac, $b8, $c9, $d6, $c8, $d1, $d2, $cd
12447     DD 03 20 31 
1244b     46 57 69 6F 
1244f     54 41 2F 38 
12453     16 15 25 29 | 	byte	$dd, $03, $20, $31, $46, $57, $69, $6f, $54, $41, $2f, $38, $16, $15, $25, $29
12457     0F EB C7 BE 
1245b     D3 E8 E2 A7 
1245f     AC BF CE D6 
12463     C6 D1 C8 C8 | 	byte	$0f, $eb, $c7, $be, $d3, $e8, $e2, $a7, $ac, $bf, $ce, $d6, $c6, $d1, $c8, $c8
12467     E7 02 26 33 
1246b     49 57 69 56 
1246f     50 28 2C 2F 
12473     0E 1A 2F 30 | 	byte	$e7, $02, $26, $33, $49, $57, $69, $56, $50, $28, $2c, $2f, $0e, $1a, $2f, $30
12477     1A EF C9 C2 
1247b     D9 ED C3 AC 
1247f     B0 C5 D1 D3 
12483     C8 CC BE C8 | 	byte	$1a, $ef, $c9, $c2, $d9, $ed, $c3, $ac, $b0, $c5, $d1, $d3, $c8, $cc, $be, $c8
12487     F7 05 29 3B 
1248b     4A 5D 60 4E 
1248f     38 24 2E 1A 
12493     0E 25 37 36 | 	byte	$f7, $05, $29, $3b, $4a, $5d, $60, $4e, $38, $24, $2e, $1a, $0e, $25, $37, $36
12497     25 F7 C8 C8 
1249b     E2 EF B4 AC 
1249f     B6 C8 D4 CD 
124a3     CF BF BC CE | 	byte	$25, $f7, $c8, $c8, $e2, $ef, $b4, $ac, $b6, $c8, $d4, $cd, $cf, $bf, $bc, $ce
124a7     FD 0B 2C 3E 
124ab     4C 5E 47 49 
124af     25 20 2B 05 
124b3     12 2D 3E 3C | 	byte	$fd, $0b, $2c, $3e, $4c, $5e, $47, $49, $25, $20, $2b, $05, $12, $2d, $3e, $3c
124b7     2C FB CC D1 
124bb     E8 E2 B3 AD 
124bf     BE CC D7 C6 
124c3     CC B2 BD DD | 	byte	$2c, $fb, $cc, $d1, $e8, $e2, $b3, $ad, $be, $cc, $d7, $c6, $cc, $b2, $bd, $dd
124c7     FD 15 2F 41 
124cb     50 49 49 33 
124cf     1B 21 19 02 
124d3     1C 32 42 43 | 	byte	$fd, $15, $2f, $41, $50, $49, $49, $33, $1b, $21, $19, $02, $1c, $32, $42, $43
124d7     35 00 D2 D5 
124db     EB D4 AE AF 
124df     C4 D0 D7 C4 
124e3     BE AF C1 F0 | 	byte	$35, $00, $d2, $d5, $eb, $d4, $ae, $af, $c4, $d0, $d7, $c4, $be, $af, $c1, $f0
124e7     FE 1D 35 44 
124eb     4A 40 44 20 
124ef     19 23 04 09 
124f3     21 38 44 49 | 	byte	$fe, $1d, $35, $44, $4a, $40, $44, $20, $19, $23, $04, $09, $21, $38, $44, $49
124f7     3F 0A D6 DB 
124fb     E1 C9 AD B6 
124ff     C6 D4 CF C1 
12503     B6 B1 C8 FB | 	byte	$3f, $0a, $d6, $db, $e1, $c9, $ad, $b6, $c6, $d4, $cf, $c1, $b6, $b1, $c8, $fb
12507     03 24 38 43 
1250b     34 44 31 15 
1250f     17 19 FA 0F 
12513     26 3C 48 4F | 	byte	$03, $24, $38, $43, $34, $44, $31, $15, $17, $19, $fa, $0f, $26, $3c, $48, $4f
12517     45 0E DA DD 
1251b     DE BF AC BD 
1251f     CD D8 C6 B9 
12523     B4 B7 DB FF | 	byte	$45, $0e, $da, $dd, $de, $bf, $ac, $bd, $cd, $d8, $c6, $b9, $b4, $b7, $db, $ff
12527     09 2E 3B 33 
1252b     3A 3E 1D 11 
1252f     1A 08 FE 16 
12533     2B 3E 4A 57 | 	byte	$09, $2e, $3b, $33, $3a, $3e, $1d, $11, $1a, $08, $fe, $16, $2b, $3e, $4a, $57
12537     4D 19 DC D2 
1253b     E2 B6 AD C3 
1253f     D2 D8 BA B4 
12543     B2 BA ED 00 | 	byte	$4d, $19, $dc, $d2, $e2, $b6, $ad, $c3, $d2, $d8, $ba, $b4, $b2, $ba, $ed, $00
12547     0D 35 34 28 
1254b     3C 2F 12 11 
1254f     18 F9 04 1C 
12553     2F 40 4C 5C | 	byte	$0d, $35, $34, $28, $3c, $2f, $12, $11, $18, $f9, $04, $1c, $2f, $40, $4c, $5c
12557     54 25 D9 D4 
1255b     DC AB B4 C7 
1255f     D4 CE AF B4 
12563     B0 C6 F9 03 | 	byte	$54, $25, $d9, $d4, $dc, $ab, $b4, $c7, $d4, $ce, $af, $b4, $b0, $c6, $f9, $03
12567     15 33 1E 30 
1256b     3A 1E 0C 15 
1256f     0B F7 0C 21 
12573     33 41 52 60 | 	byte	$15, $33, $1e, $30, $3a, $1e, $0c, $15, $0b, $f7, $0c, $21, $33, $41, $52, $60
12577     5B 21 CC DD 
1257b     CE A7 BB CD 
1257f     D9 BA AE B7 
12583     B1 D5 FE 06 | 	byte	$5b, $21, $cc, $dd, $ce, $a7, $bb, $cd, $d9, $ba, $ae, $b7, $b1, $d5, $fe, $06
12587     25 1F 25 32 
1258b     2B 14 0D 15 
1258f     FC FC 12 25 
12593     35 42 56 64 | 	byte	$25, $1f, $25, $32, $2b, $14, $0d, $15, $fc, $fc, $12, $25, $35, $42, $56, $64
12597     63 1F CC DE 
1259b     BB AC C1 D1 
1259f     D4 A8 AF B7 
125a3     B4 EA FE 08 | 	byte	$63, $1f, $cc, $de, $bb, $ac, $c1, $d1, $d4, $a8, $af, $b7, $b4, $ea, $fe, $08
125a7     24 15 29 2D 
125ab     23 0C 11 0D 
125af     F6 05 18 2A 
125b3     38 46 5D 69 | 	byte	$24, $15, $29, $2d, $23, $0c, $11, $0d, $f6, $05, $18, $2a, $38, $46, $5d, $69
125b7     69 08 D5 DB 
125bb     A6 B3 C9 D5 
125bf     C0 A6 B3 B2 
125c3     BF F9 03 0D | 	byte	$69, $08, $d5, $db, $a6, $b3, $c9, $d5, $c0, $a6, $b3, $b2, $bf, $f9, $03, $0d
125c7     11 1F 2C 21 
125cb     19 0A 13 00 
125cf     F8 0A 1E 2B 
125d3     39 4D 60 6F | 	byte	$11, $1f, $2c, $21, $19, $0a, $13, $00, $f8, $0a, $1e, $2b, $39, $4d, $60, $6f
125d7     66 09 DA CC 
125db     A4 B9 CD D3 
125df     AE AB B7 AF 
125e3     D6 FD 07 05 | 	byte	$66, $09, $da, $cc, $a4, $b9, $cd, $d3, $ae, $ab, $b7, $af, $d6, $fd, $07, $05
125e7     16 25 21 22 
125eb     0F 0D 10 F8 
125ef     FE 0F 21 2D 
125f3     3A 51 62 76 | 	byte	$16, $25, $21, $22, $0f, $0d, $10, $f8, $fe, $0f, $21, $2d, $3a, $51, $62, $76
125f7     54 17 DE B7 
125fb     A7 C2 D0 C9 
125ff     A3 B0 B8 B2 
12603     E5 FF 04 03 | 	byte	$54, $17, $de, $b7, $a7, $c2, $d0, $c9, $a3, $b0, $b8, $b2, $e5, $ff, $04, $03
12607     1B 24 1E 1A 
1260b     0B 12 08 F6 
1260f     05 17 24 2F 
12613     41 55 67 75 | 	byte	$1b, $24, $1e, $1a, $0b, $12, $08, $f6, $05, $17, $24, $2f, $41, $55, $67, $75
12617     50 12 D8 A8 
1261b     AD C8 CF BA 
1261f     A2 B2 B4 BD 
12623     F2 01 F0 14 | 	byte	$50, $12, $d8, $a8, $ad, $c8, $cf, $ba, $a2, $b2, $b4, $bd, $f2, $01, $f0, $14
12627     1E 17 1D 10 
1262b     0B 11 FF F9 
1262f     0B 19 25 31 
12633     45 59 6D 66 | 	byte	$1e, $17, $1d, $10, $0b, $11, $ff, $f9, $0b, $19, $25, $31, $45, $59, $6d, $66
12637     58 1A C5 A7 
1263b     B5 CB C7 AC 
1263f     A9 B5 B1 C9 
12643     FC F6 F5 17 | 	byte	$58, $1a, $c5, $a7, $b5, $cb, $c7, $ac, $a9, $b5, $b1, $c9, $fc, $f6, $f5, $17
12647     15 1C 16 0B 
1264b     0F 0D F8 FE 
1264f     10 1D 25 36 
12653     49 5C 6F 5C | 	byte	$15, $1c, $16, $0b, $0f, $0d, $f8, $fe, $10, $1d, $25, $36, $49, $5c, $6f, $5c
12657     5C 17 BD A5 
1265b     BA C9 BE A7 
1265f     B0 B6 B0 D8 
12663     FE E5 10 15 | 	byte	$5c, $17, $bd, $a5, $ba, $c9, $be, $a7, $b0, $b6, $b0, $d8, $fe, $e5, $10, $15
12667     11 1D 0E 0A 
1266b     11 07 F7 04 
1266f     14 1D 28 3B 
12673     4E 61 66 5F | 	byte	$11, $1d, $0e, $0a, $11, $07, $f7, $04, $14, $1d, $28, $3b, $4e, $61, $66, $5f
12677     5D FB B9 A8 
1267b     BD C2 B9 A3 
1267f     B1 B3 B3 E4 
12683     EA F0 17 08 | 	byte	$5d, $fb, $b9, $a8, $bd, $c2, $b9, $a3, $b1, $b3, $b3, $e4, $ea, $f0, $17, $08
12687     19 1B 08 0E 
1268b     10 FF FB 0D 
1268f     19 21 2E 44 
12693     52 68 5A 65 | 	byte	$19, $1b, $08, $0e, $10, $ff, $fb, $0d, $19, $21, $2e, $44, $52, $68, $5a, $65
12697     50 F4 B1 AD 
1269b     BC BB B7 A6 
1269f     B4 AD BB F0 
126a3     DB 04 0E 0F | 	byte	$50, $f4, $b1, $ad, $bc, $bb, $b7, $a6, $b4, $ad, $bb, $f0, $db, $04, $0e, $0f
126a7     1D 15 06 13 
126ab     11 FE 04 14 
126af     1E 26 36 46 
126b3     55 61 52 5C | 	byte	$1d, $15, $06, $13, $11, $fe, $04, $14, $1e, $26, $36, $46, $55, $61, $52, $5c
126b7     36 DE AE AB 
126bb     AE B1 B2 A8 
126bf     B2 AD C5 E4 
126c3     EC 0E 10 1D | 	byte	$36, $de, $ae, $ab, $ae, $b1, $b2, $a8, $b2, $ad, $c5, $e4, $ec, $0e, $10, $1d
126c7     23 11 0B 15 
126cb     0B FB 07 13 
126cf     17 20 32 3F 
126d3     52 4E 50 4A | 	byte	$23, $11, $0b, $15, $0b, $fb, $07, $13, $17, $20, $32, $3f, $52, $4e, $50, $4a
126d7     2A DB B5 AF 
126db     B1 BC BB BA 
126df     BA C3 D5 EA 
126e3     00 14 1C 26 | 	byte	$2a, $db, $b5, $af, $b1, $bc, $bb, $ba, $ba, $c3, $d5, $ea, $00, $14, $1c, $26
126e7     21 0E 10 17 
126eb     05 FE 0D 13 
126ef     16 23 31 40 
126f3     4E 40 4A 3C | 	byte	$21, $0e, $10, $17, $05, $fe, $0d, $13, $16, $23, $31, $40, $4e, $40, $4a, $3c
126f7     1C D7 B6 AD 
126fb     B3 C2 BD C2 
126ff     BD CE DF F3 
12703     08 19 1E 24 | 	byte	$1c, $d7, $b6, $ad, $b3, $c2, $bd, $c2, $bd, $ce, $df, $f3, $08, $19, $1e, $24
12707     18 0B 12 12 
1270b     FC 00 0C 0F 
1270f     15 23 31 3E 
12713     44 3B 3B 35 | 	byte	$18, $0b, $12, $12, $fc, $00, $0c, $0f, $15, $23, $31, $3e, $44, $3b, $3b, $35
12717     12 CD B2 AC 
1271b     B8 C8 BD C4 
1271f     C5 D7 E8 FC 
12723     10 1B 1F 1F | 	byte	$12, $cd, $b2, $ac, $b8, $c8, $bd, $c4, $c5, $d7, $e8, $fc, $10, $1b, $1f, $1f
12727     10 0C 14 09 
1272b     F9 04 0C 0D 
1272f     15 24 2F 3D 
12733     38 38 32 2D | 	byte	$10, $0c, $14, $09, $f9, $04, $0c, $0d, $15, $24, $2f, $3d, $38, $38, $32, $2d
12737     04 C7 B0 B0 
1273b     BC CC C0 C3 
1273f     CF DE F0 03 
12743     13 1C 1E 18 | 	byte	$04, $c7, $b0, $b0, $bc, $cc, $c0, $c3, $cf, $de, $f0, $03, $13, $1c, $1e, $18
12747     0B 0D 11 FF 
1274b     FA 06 0A 0C 
1274f     17 24 30 3B 
12753     2F 2E 30 27 | 	byte	$0b, $0d, $11, $ff, $fa, $06, $0a, $0c, $17, $24, $30, $3b, $2f, $2e, $30, $27
12757     FA C3 B0 B6 
1275b     C2 CD C2 C5 
1275f     D6 E4 F6 08 
12763     15 1C 1C 11 | 	byte	$fa, $c3, $b0, $b6, $c2, $cd, $c2, $c5, $d6, $e4, $f6, $08, $15, $1c, $1c, $11
12767     09 10 0B FB 
1276b     FF 08 09 0F 
1276f     1A 27 31 36 
12773     29 2A 2C 21 | 	byte	$09, $10, $0b, $fb, $ff, $08, $09, $0f, $1a, $27, $31, $36, $29, $2a, $2c, $21
12777     EE BD B4 BD 
1277b     C7 CD C3 CD 
1277f     DC EB FC 0C 
12783     17 1B 16 0B | 	byte	$ee, $bd, $b4, $bd, $c7, $cd, $c3, $cd, $dc, $eb, $fc, $0c, $17, $1b, $16, $0b
12787     0B 11 05 FA 
1278b     03 08 0A 10 
1278f     1E 27 32 2D 
12793     23 29 29 19 | 	byte	$0b, $11, $05, $fa, $03, $08, $0a, $10, $1e, $27, $32, $2d, $23, $29, $29, $19
12797     E0 BB BD C2 
1279b     CB CE C5 D5 
1279f     E3 F0 03 10 
127a3     19 19 12 09 | 	byte	$e0, $bb, $bd, $c2, $cb, $ce, $c5, $d5, $e3, $f0, $03, $10, $19, $19, $12, $09
127a7     0E 0F FE FB 
127ab     05 08 0B 14 
127af     1F 29 31 23 
127b3     24 28 25 10 | 	byte	$0e, $0f, $fe, $fb, $05, $08, $0b, $14, $1f, $29, $31, $23, $24, $28, $25, $10
127b7     D8 BE C4 C8 
127bb     CE CF CC DA 
127bf     E8 F8 08 13 
127c3     19 16 0D 0A | 	byte	$d8, $be, $c4, $c8, $ce, $cf, $cc, $da, $e8, $f8, $08, $13, $19, $16, $0d, $0a
127c7     11 0A FD 00 
127cb     07 09 0C 17 
127cf     22 2A 2E 1C 
127d3     24 27 22 01 | 	byte	$11, $0a, $fd, $00, $07, $09, $0c, $17, $22, $2a, $2e, $1c, $24, $27, $22, $01
127d7     D3 C5 CA CC 
127db     D2 D1 D3 E0 
127df     ED FC 0B 14 
127e3     18 12 09 0B | 	byte	$d3, $c5, $ca, $cc, $d2, $d1, $d3, $e0, $ed, $fc, $0b, $14, $18, $12, $09, $0b
127e7     0F 03 FB 01 
127eb     07 09 0F 18 
127ef     22 29 25 1D 
127f3     22 24 19 F5 | 	byte	$0f, $03, $fb, $01, $07, $09, $0f, $18, $22, $29, $25, $1d, $22, $24, $19, $f5
127f7     CF CC CE CF 
127fb     D5 D0 D8 E4 
127ff     F2 00 0D 14 
12803     15 0C 08 0E | 	byte	$cf, $cc, $ce, $cf, $d5, $d0, $d8, $e4, $f2, $00, $0d, $14, $15, $0c, $08, $0e
12807     0D FF FD 03 
1280b     08 09 11 1B 
1280f     22 28 1D 1E 
12813     22 21 10 EB | 	byte	$0d, $ff, $fd, $03, $08, $09, $11, $1b, $22, $28, $1d, $1e, $22, $21, $10, $eb
12817     D3 D2 D3 D4 
1281b     D9 D5 DE E9 
1281f     F7 04 0F 14 
12823     11 0A 09 0E | 	byte	$d3, $d2, $d3, $d4, $d9, $d5, $de, $e9, $f7, $04, $0f, $14, $11, $0a, $09, $0e
12827     07 FD FE 04 
1282b     07 0B 13 1B 
1282f     22 22 19 1E 
12833     20 1C 07 E8 | 	byte	$07, $fd, $fe, $04, $07, $0b, $13, $1b, $22, $22, $19, $1e, $20, $1c, $07, $e8
12837     D6 D4 D5 D7 
1283b     DA D8 E1 ED 
1283f     F9 05 0E 13 
12843     0F 09 09 0B | 	byte	$d6, $d4, $d5, $d7, $da, $d8, $e1, $ed, $f9, $05, $0e, $13, $0f, $09, $09, $0b
12847     01 FC 00 05 
1284b     08 0C 14 1C 
1284f     22 1E 19 1D 
12853     1E 19 01 E7 | 	byte	$01, $fc, $00, $05, $08, $0c, $14, $1c, $22, $1e, $19, $1d, $1e, $19, $01, $e7
12857     D9 D9 D9 DB 
1285b     DC DB E6 F1 
1285f     FD 07 10 13 
12863     0E 09 09 06 | 	byte	$d9, $d9, $d9, $db, $dc, $db, $e6, $f1, $fd, $07, $10, $13, $0e, $09, $09, $06
12867     FE FC 02 05 
1286b     07 0C 14 1B 
1286f     1D 1B 18 1B 
12873     1B 14 FB E5 | 	byte	$fe, $fc, $02, $05, $07, $0c, $14, $1b, $1d, $1b, $18, $1b, $1b, $14, $fb, $e5
12877     DB DB DC DC 
1287b     DC DD E9 F4 
1287f     FF 08 0F 11 
12883     0D 09 08 02 | 	byte	$db, $db, $dc, $dc, $dc, $dd, $e9, $f4, $ff, $08, $0f, $11, $0d, $09, $08, $02
12887     FB FD 02 04 
1288b     07 0D 14 1A 
1288f     1B 18 18 1A 
12893     19 10 F8 E4 | 	byte	$fb, $fd, $02, $04, $07, $0d, $14, $1a, $1b, $18, $18, $1a, $19, $10, $f8, $e4
12897     E0 DF DF DE 
1289b     E0 E0 ED F7 
1289f     01 0A 10 10 
128a3     0E 0B 07 FF | 	byte	$e0, $df, $df, $de, $e0, $e0, $ed, $f7, $01, $0a, $10, $10, $0e, $0b, $07, $ff
128a7     FC FF 03 04 
128ab     07 0D 14 18 
128af     19 15 17 18 
128b3     17 0A F5 E5 | 	byte	$fc, $ff, $03, $04, $07, $0d, $14, $18, $19, $15, $17, $18, $17, $0a, $f5, $e5
128b7     E2 E1 E0 DE 
128bb     E2 E3 EE F9 
128bf     01 09 0E 0F 
128c3     0D 09 03 FD | 	byte	$e2, $e1, $e0, $de, $e2, $e3, $ee, $f9, $01, $09, $0e, $0f, $0d, $09, $03, $fd
128c7     FC FF 02 04 
128cb     08 0D 14 16 
128cf     18 14 16 17 
128d3     14 07 F2 E8 | 	byte	$fc, $ff, $02, $04, $08, $0d, $14, $16, $18, $14, $16, $17, $14, $07, $f2, $e8
128d7     E5 E4 E2 E0 
128db     E4 E7 F2 FB 
128df     03 09 0D 0E 
128e3     0D 09 01 FC | 	byte	$e5, $e4, $e2, $e0, $e4, $e7, $f2, $fb, $03, $09, $0d, $0e, $0d, $09, $01, $fc
128e7     FD 00 02 04 
128eb     09 0E 13 15 
128ef     14 13 14 15 
128f3     11 03 F1 EA | 	byte	$fd, $00, $02, $04, $09, $0e, $13, $15, $14, $13, $14, $15, $11, $03, $f1, $ea
128f7     E7 E5 E3 E2 
128fb     E6 EA F4 FC 
128ff     04 09 0C 0E 
12903     0C 06 FF FC | 	byte	$e7, $e5, $e3, $e2, $e6, $ea, $f4, $fc, $04, $09, $0c, $0e, $0c, $06, $ff, $fc
12907     FD 00 01 05 
1290b     09 0F 10 14 
1290f     11 12 14 14 
12913     0E FF F1 EC | 	byte	$fd, $00, $01, $05, $09, $0f, $10, $14, $11, $12, $14, $14, $0e, $ff, $f1, $ec
12917     E9 E7 E5 E4 
1291b     E8 ED F6 FD 
1291f     03 08 0B 0D 
12923     0B 04 FD FD | 	byte	$e9, $e7, $e5, $e4, $e8, $ed, $f6, $fd, $03, $08, $0b, $0d, $0b, $04, $fd, $fd
12927     FE 00 02 05 
1292b     09 0E 10 13 
1292f     10 12 13 12 
12933     0A FD F2 EE | 	byte	$fe, $00, $02, $05, $09, $0e, $10, $13, $10, $12, $13, $12, $0a, $fd, $f2, $ee
12937     EB E8 E6 E6 
1293b     EA EF F8 FE 
1293f     03 07 0B 0D 
12943     09 02 FD FD | 	byte	$eb, $e8, $e6, $e6, $ea, $ef, $f8, $fe, $03, $07, $0b, $0d, $09, $02, $fd, $fd
12947     FF 00 02 05 
1294b     0A 0D 10 10 
1294f     0F 11 11 10 
12953     07 FB F2 EE | 	byte	$ff, $00, $02, $05, $0a, $0d, $10, $10, $0f, $11, $11, $10, $07, $fb, $f2, $ee
12957     EB E9 E6 E8 
1295b     EB F2 F9 FF 
1295f     04 07 0B 0C 
12963     08 00 FD FE | 	byte	$eb, $e9, $e6, $e8, $eb, $f2, $f9, $ff, $04, $07, $0b, $0c, $08, $00, $fd, $fe
12967     FF 00 02 05 
1296b     09 0C 0F 0E 
1296f     0F 0F 10 0E 
12973     05 FA F3 EF | 	byte	$ff, $00, $02, $05, $09, $0c, $0f, $0e, $0f, $0f, $10, $0e, $05, $fa, $f3, $ef
12977     ED EA E7 EB 
1297b     EE F4 FA 00 
1297f     04 08 0B 0C 
12983     06 00 FE FF | 	byte	$ed, $ea, $e7, $eb, $ee, $f4, $fa, $00, $04, $08, $0b, $0c, $06, $00, $fe, $ff
12987     01 01 03 06 
1298b     0A 0C 0F 0D 
1298f     0E 0F 10 0C 
12993     04 F9 F4 F0 | 	byte	$01, $01, $03, $06, $0a, $0c, $0f, $0d, $0e, $0f, $10, $0c, $04, $f9, $f4, $f0
12997     EE EB E9 ED 
1299b     EF F5 FB 00 
1299f     04 08 0B 09 
129a3     04 FF FE FF | 	byte	$ee, $eb, $e9, $ed, $ef, $f5, $fb, $00, $04, $08, $0b, $09, $04, $ff, $fe, $ff
129a7     00 01 03 06 
129ab     09 0C 0D 0C 
129af     0D 0E 0E 09 
129b3     01 FA F5 F1 | 	byte	$00, $01, $03, $06, $09, $0c, $0d, $0c, $0d, $0e, $0e, $09, $01, $fa, $f5, $f1
129b7     EE EB EB EE 
129bb     F0 F6 FC 00 
129bf     03 08 0A 08 
129c3     03 00 FF 01 | 	byte	$ee, $eb, $eb, $ee, $f0, $f6, $fc, $00, $03, $08, $0a, $08, $03, $00, $ff, $01
129c7     01 01 03 07 
129cb     09 0C 0B 0C 
129cf     0D 0D 0C 08 
129d3     00 F9 F5 F2 | 	byte	$01, $01, $03, $07, $09, $0c, $0b, $0c, $0d, $0d, $0c, $08, $00, $f9, $f5, $f2
129d7     EE ED ED F0 
129db     F3 F8 FD 01 
129df     04 08 09 07 
129e3     02 00 00 01 | 	byte	$ee, $ed, $ed, $f0, $f3, $f8, $fd, $01, $04, $08, $09, $07, $02, $00, $00, $01
129e7     01 02 04 07 
129eb     08 0A 09 0A 
129ef     0B 0C 0A 05 
129f3     FF F8 F4 F1 | 	byte	$01, $02, $04, $07, $08, $0a, $09, $0a, $0b, $0c, $0a, $05, $ff, $f8, $f4, $f1
129f7     EF EE EF F1 
129fb     F3 F7 FC 00 
129ff     04 07 08 05 
12a03     02 00 00 01 | 	byte	$ef, $ee, $ef, $f1, $f3, $f7, $fc, $00, $04, $07, $08, $05, $02, $00, $00, $01
12a07     02 02 05 07 
12a0b     09 09 0A 0B 
12a0f     0B 0B 09 05 
12a13     FE F9 F6 F2 | 	byte	$02, $02, $05, $07, $09, $09, $0a, $0b, $0b, $0b, $09, $05, $fe, $f9, $f6, $f2
12a17     F0 EF F1 F1 
12a1b     F5 F9 FE 01 
12a1f     05 07 07 04 
12a23     02 00 01 02 | 	byte	$f0, $ef, $f1, $f1, $f5, $f9, $fe, $01, $05, $07, $07, $04, $02, $00, $01, $02
12a27     02 03 05 06 
12a2b     08 08 09 0A 
12a2f     0A 0A 08 03 
12a33     FD F8 F5 F1 | 	byte	$02, $03, $05, $06, $08, $08, $09, $0a, $0a, $0a, $08, $03, $fd, $f8, $f5, $f1
12a37     F0 F0 F1 F2 
12a3b     F6 FA FE 01 
12a3f     05 06 05 04 
12a43     02 01 01 02 | 	byte	$f0, $f0, $f1, $f2, $f6, $fa, $fe, $01, $05, $06, $05, $04, $02, $01, $01, $02
12a47     02 03 05 06 
12a4b     07 07 09 0A 
12a4f     0A 09 07 02 
12a53     FD F9 F5 F3 | 	byte	$02, $03, $05, $06, $07, $07, $09, $0a, $0a, $09, $07, $02, $fd, $f9, $f5, $f3
12a57     F2 F2 F2 F4 
12a5b     F8 FB FF 02 
12a5f     06 06 05 04 
12a63     03 03 03 03 | 	byte	$f2, $f2, $f2, $f4, $f8, $fb, $ff, $02, $06, $06, $05, $04, $03, $03, $03, $03
12a67     03 04 05 06 
12a6b     06 08 09 09 
12a6f     09 08 06 01 
12a73     FC F8 F4 F4 | 	byte	$03, $04, $05, $06, $06, $08, $09, $09, $09, $08, $06, $01, $fc, $f8, $f4, $f4
12a77     F3 F2 F2 F4 
12a7b     F7 FB FE 02 
12a7f     04 05 04 04 
12a83     03 02 02 02 | 	byte	$f3, $f2, $f2, $f4, $f7, $fb, $fe, $02, $04, $05, $04, $04, $03, $02, $02, $02
12a87     03 04 04 05 
12a8b     06 07 08 08 
12a8f     08 08 05 00 
12a93     FB F7 F6 F5 | 	byte	$03, $04, $04, $05, $06, $07, $08, $08, $08, $08, $05, $00, $fb, $f7, $f6, $f5
12a97     F4 F3 F3 F5 
12a9b     F8 FB FF 03 
12a9f     05 05 04 04 
12aa3     03 03 03 03 | 	byte	$f4, $f3, $f3, $f5, $f8, $fb, $ff, $03, $05, $05, $04, $04, $03, $03, $03, $03
12aa7     03 04 04 05 
12aab     05 07 07 08 
12aaf     07 06 03 FF 
12ab3     FA F7 F6 F5 | 	byte	$03, $04, $04, $05, $05, $07, $07, $08, $07, $06, $03, $ff, $fa, $f7, $f6, $f5
12ab7     F4 F4 F4 F6 
12abb     F9 FC 00 03 
12abf     04 04 04 04 
12ac3     03 03 03 03 | 	byte	$f4, $f4, $f4, $f6, $f9, $fc, $00, $03, $04, $04, $04, $04, $03, $03, $03, $03
12ac7     03 03 04 04 
12acb     06 06 06 06 
12acf     06 05 02 FE 
12ad3     FA F8 F7 F6 | 	byte	$03, $03, $04, $04, $06, $06, $06, $06, $06, $05, $02, $fe, $fa, $f8, $f7, $f6
12ad7     F5 F4 F5 F7 
12adb     FA FC 01 03 
12adf     04 04 04 04 
12ae3     04 03 03 03 | 	byte	$f5, $f4, $f5, $f7, $fa, $fc, $01, $03, $04, $04, $04, $04, $04, $03, $03, $03
12ae7     04 03 04 04 
12aeb     05 07 07 07 
12aef     06 04 01 FC 
12af3     FA F9 F7 F6 | 	byte	$04, $03, $04, $04, $05, $07, $07, $07, $06, $04, $01, $fc, $fa, $f9, $f7, $f6
12af7     F5 F4 F6 F7 
12afb     FA FD 01 03 
12aff     03 04 04 04 
12b03     04 04 03 04 | 	byte	$f5, $f4, $f6, $f7, $fa, $fd, $01, $03, $03, $04, $04, $04, $04, $04, $03, $04
12b07     04 03 03 04 
12b0b     05 06 06 06 
12b0f     05 03 FE FB 
12b13     FA F9 F7 F6 | 	byte	$04, $03, $03, $04, $05, $06, $06, $06, $05, $03, $fe, $fb, $fa, $f9, $f7, $f6
12b17     F5 F4 F6 F8 
12b1b     FB FE 02 03 
12b1f     03 04 04 04 
12b23     04 04 04 03 | 	byte	$f5, $f4, $f6, $f8, $fb, $fe, $02, $03, $03, $04, $04, $04, $04, $04, $04, $03
12b27     03 03 03 04 
12b2b     04 05 05 05 
12b2f     04 00 FD FC 
12b33     FB F9 F8 F7 | 	byte	$03, $03, $03, $04, $04, $05, $05, $05, $04, $00, $fd, $fc, $fb, $f9, $f8, $f7
12b37     F6 F6 F7 F9 
12b3b     FB 00 03 03 
12b3f     04 04 05 06 
12b43     05 05 04 04 | 	byte	$f6, $f6, $f7, $f9, $fb, $00, $03, $03, $04, $04, $05, $06, $05, $05, $04, $04
12b47     04 03 04 04 
12b4b     05 05 05 04 
12b4f     03 FF FD FC 
12b53     FB FA F9 F8 | 	byte	$04, $03, $04, $04, $05, $05, $05, $04, $03, $ff, $fd, $fc, $fb, $fa, $f9, $f8
12b57     F6 F6 F7 F9 
12b5b     FC 00 02 03 
12b5f     04 04 05 05 
12b63     05 04 04 04 | 	byte	$f6, $f6, $f7, $f9, $fc, $00, $02, $03, $04, $04, $05, $05, $05, $04, $04, $04
12b67     03 03 03 04 
12b6b     04 04 04 03 
12b6f     FF FD FD FC 
12b73     FB FA F9 F8 | 	byte	$03, $03, $03, $04, $04, $04, $04, $03, $ff, $fd, $fd, $fc, $fb, $fa, $f9, $f8
12b77     F7 F7 F8 F9 
12b7b     FC 01 02 03 
12b7f     04 04 05 05 
12b83     05 05 05 04 | 	byte	$f7, $f7, $f8, $f9, $fc, $01, $02, $03, $04, $04, $05, $05, $05, $05, $05, $04
12b87     03 04 04 04 
12b8b     04 04 03 01 
12b8f     FD FD FC FC 
12b93     FB FA FA F8 | 	byte	$03, $04, $04, $04, $04, $04, $03, $01, $fd, $fd, $fc, $fc, $fb, $fa, $fa, $f8
12b97     F8 F8 F9 FA 
12b9b     FE 02 02 03 
12b9f     04 04 05 05 
12ba3     05 05 04 03 | 	byte	$f8, $f8, $f9, $fa, $fe, $02, $02, $03, $04, $04, $05, $05, $05, $05, $04, $03
12ba7     03 03 04 04 
12bab     03 02 01 FD 
12baf     FC FC FC FB 
12bb3     FA FA FA F9 | 	byte	$03, $03, $04, $04, $03, $02, $01, $fd, $fc, $fc, $fc, $fb, $fa, $fa, $fa, $f9
12bb7     F8 F9 FA FC 
12bbb     FF 01 02 02 
12bbf     03 04 05 05 
12bc3     05 05 04 03 | 	byte	$f8, $f9, $fa, $fc, $ff, $01, $02, $02, $03, $04, $05, $05, $05, $05, $04, $03
12bc7     03 04 05 04 
12bcb     04 03 FF FD 
12bcf     FD FC FC FB 
12bd3     FB FA FA F9 | 	byte	$03, $04, $05, $04, $04, $03, $ff, $fd, $fd, $fc, $fc, $fb, $fb, $fa, $fa, $f9
12bd7     F9 FA FA FD 
12bdb     01 02 03 03 
12bdf     03 04 05 05 
12be3     05 04 04 03 | 	byte	$f9, $fa, $fa, $fd, $01, $02, $03, $03, $03, $04, $05, $05, $05, $04, $04, $03
12be7     04 04 04 03 
12beb     03 00 FD FC 
12bef     FC FC FB FB 
12bf3     FA FA FA F9 | 	byte	$04, $04, $04, $03, $03, $00, $fd, $fc, $fc, $fc, $fb, $fb, $fa, $fa, $fa, $f9
12bf7     F9 FA FB FE 
12bfb     02 03 03 03 
12bff     03 04 05 05 
12c03     05 04 04 04 | 	byte	$f9, $fa, $fb, $fe, $02, $03, $03, $03, $03, $04, $05, $05, $05, $04, $04, $04
12c07     04 04 04 03 
12c0b     02 FE FD FC 
12c0f     FC FC FC FB 
12c13     FB FA FA FA | 	byte	$04, $04, $04, $03, $02, $fe, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fa, $fa, $fa
12c17     FA FB FC 00 
12c1b     03 03 04 04 
12c1f     04 05 06 05 
12c23     05 05 04 05 | 	byte	$fa, $fb, $fc, $00, $03, $03, $04, $04, $04, $05, $06, $05, $05, $05, $04, $05
12c27     05 04 04 04 
12c2b     01 FD FD FD 
12c2f     FC FC FB FA 
12c33     FA FA FA F9 | 	byte	$05, $04, $04, $04, $01, $fd, $fd, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fa, $f9
12c37     FA FB FD 00 
12c3b     03 03 03 04 
12c3f     04 04 05 05 
12c43     05 04 04 04 | 	byte	$fa, $fb, $fd, $00, $03, $03, $03, $04, $04, $04, $05, $05, $05, $04, $04, $04
12c47     04 04 04 02 
12c4b     FE FC FD FC 
12c4f     FC FC FB FB 
12c53     FB FA FA FA | 	byte	$04, $04, $04, $02, $fe, $fc, $fd, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa
12c57     FA FB FD 01 
12c5b     03 03 04 04 
12c5f     04 05 05 05 
12c63     05 04 04 05 | 	byte	$fa, $fb, $fd, $01, $03, $03, $04, $04, $04, $05, $05, $05, $05, $04, $04, $05
12c67     05 04 03 FF 
12c6b     FD FC FC FC 
12c6f     FC FC FB FB 
12c73     FB FB FA FA | 	byte	$05, $04, $03, $ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa
12c77     FB FC FF 03 
12c7b     04 04 04 05 
12c7f     05 05 05 05 
12c83     04 04 04 04 | 	byte	$fb, $fc, $ff, $03, $04, $04, $04, $05, $05, $05, $05, $05, $04, $04, $04, $04
12c87     04 04 02 FE 
12c8b     FC FC FC FC 
12c8f     FB FB FB FA 
12c93     FA FA FA FA | 	byte	$04, $04, $02, $fe, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fa, $fa, $fa, $fa, $fa
12c97     FC FD 01 03 
12c9b     04 04 04 04 
12c9f     04 05 05 05 
12ca3     04 04 04 04 | 	byte	$fc, $fd, $01, $03, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $04, $04
12ca7     04 03 00 FD 
12cab     FD FC FC FC 
12caf     FC FB FB FB 
12cb3     FB FB FA FB | 	byte	$04, $03, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fa, $fb
12cb7     FC FE 01 04 
12cbb     04 04 04 04 
12cbf     05 05 05 04 
12cc3     04 05 05 04 | 	byte	$fc, $fe, $01, $04, $04, $04, $04, $04, $05, $05, $05, $04, $04, $05, $05, $04
12cc7     03 01 FE FC 
12ccb     FC FC FC FC 
12ccf     FB FB FB FB 
12cd3     FA FA FA FB | 	byte	$03, $01, $fe, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fa, $fa, $fa, $fb
12cd7     FC FE 02 04 
12cdb     05 04 05 05 
12cdf     05 05 05 04 
12ce3     04 04 04 03 | 	byte	$fc, $fe, $02, $04, $05, $04, $05, $05, $05, $05, $05, $04, $04, $04, $04, $03
12ce7     02 FF FD FC 
12ceb     FC FC FC FB 
12cef     FB FB FB FB 
12cf3     FB FB FB FC | 	byte	$02, $ff, $fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc
12cf7     FE 00 03 05 
12cfb     05 05 05 06 
12cff     06 06 05 05 
12d03     05 05 05 03 | 	byte	$fe, $00, $03, $05, $05, $05, $05, $06, $06, $06, $05, $05, $05, $05, $05, $03
12d07     01 FE FD FC 
12d0b     FC FC FC FC 
12d0f     FB FB FB FB 
12d13     FB FB FB FC | 	byte	$01, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc
12d17     FE 01 03 05 
12d1b     05 05 05 05 
12d1f     05 05 05 04 
12d23     04 04 03 01 | 	byte	$fe, $01, $03, $05, $05, $05, $05, $05, $05, $05, $05, $04, $04, $04, $03, $01
12d27     FF FD FC FC 
12d2b     FC FC FC FB 
12d2f     FB FB FB FB 
12d33     FB FB FB FD | 	byte	$ff, $fd, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fd
12d37     FF 01 04 06 
12d3b     05 06 05 06 
12d3f     06 06 05 05 
12d43     05 04 02 01 | 	byte	$ff, $01, $04, $06, $05, $06, $05, $06, $06, $06, $05, $05, $05, $04, $02, $01
12d47     FE FC FC FC 
12d4b     FC FC FC FB 
12d4f     FB FC FB FC 
12d53     FC FB FC FE | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fb, $fb, $fc, $fb, $fc, $fc, $fb, $fc, $fe
12d57     00 02 04 06 
12d5b     06 05 06 06 
12d5f     05 05 05 05 
12d63     04 02 01 00 | 	byte	$00, $02, $04, $06, $06, $05, $06, $06, $05, $05, $05, $05, $04, $02, $01, $00
12d67     FD FC FC FC 
12d6b     FC FB FB FB 
12d6f     FB FB FB FB 
12d73     FB FB FC FE | 	byte	$fd, $fc, $fc, $fc, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fe
12d77     00 02 04 06 
12d7b     06 06 05 05 
12d7f     05 06 05 05 
12d83     03 02 01 FF | 	byte	$00, $02, $04, $06, $06, $06, $05, $05, $05, $06, $05, $05, $03, $02, $01, $ff
12d87     FD FC FC FD 
12d8b     FD FC FC FC 
12d8f     FC FC FC FC 
12d93     FC FC FD FF | 	byte	$fd, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $ff
12d97     00 02 05 06 
12d9b     06 06 05 05 
12d9f     06 05 05 04 
12da3     02 01 00 FD | 	byte	$00, $02, $05, $06, $06, $06, $05, $05, $06, $05, $05, $04, $02, $01, $00, $fd
12da7     FC FC FC FC 
12dab     FC          | 	byte	$fc[5]
12dac     FB FB FC FB 
12db0     FB FB FB FB 
12db4     FB FD FF 00 
12db8     02 05 07 06 | 	byte	$fb, $fb, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fd, $ff, $00, $02, $05, $07, $06
12dbc     06 05 06 06 
12dc0     06 05 03 01 
12dc4     01 FF FC FB 
12dc8     FC FC FC FB | 	byte	$06, $05, $06, $06, $06, $05, $03, $01, $01, $ff, $fc, $fb, $fc, $fc, $fc, $fb
12dcc     FB FB FC FC 
12dd0     FC FC FC FC 
12dd4     FC FE 00 01 
12dd8     03 06 07 07 | 	byte	$fb, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $01, $03, $06, $07, $07
12ddc     07 07 07 07 
12de0     06 04 03 02 
12de4     01 FE FC FC 
12de8     FC FC FC FC | 	byte	$07, $07, $07, $07, $06, $04, $03, $02, $01, $fe, $fc, $fc, $fc, $fc, $fc, $fc
12dec     FC FC FC FC 
12df0     FC FC FC FC | 	byte	$fc[8]
12df4     FD FE 00 01 
12df8     03 06 07 07 
12dfc     06 06 06 06 
12e00     05 03 01 01 | 	byte	$fd, $fe, $00, $01, $03, $06, $07, $07, $06, $06, $06, $06, $05, $03, $01, $01
12e04     00 FD FB FC 
12e08     FC FC FC FB 
12e0c     FC FC FC FC 
12e10     FC FC FC FC | 	byte	$00, $fd, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
12e14     FD 00 00 01 
12e18     04 06 07 07 
12e1c     06 07 07 06 
12e20     04 02 02 01 | 	byte	$fd, $00, $00, $01, $04, $06, $07, $07, $06, $07, $07, $06, $04, $02, $02, $01
12e24     FF FC FC FC 
12e28     FC FC FC FC 
12e2c     FC FC FC FC 
12e30     FC FC FC FC | 	byte	$ff, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
12e34     FE 00 01 01 
12e38     04 07 08 07 
12e3c     07 08 08 05 
12e40     03 01 02 00 | 	byte	$fe, $00, $01, $01, $04, $07, $08, $07, $07, $08, $08, $05, $03, $01, $02, $00
12e44     FD FB FB FC 
12e48     FC FC FC FB 
12e4c     FC FC FC FC 
12e50     FC FC FC FD | 	byte	$fd, $fb, $fb, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd
12e54     FE 00 01 02 
12e58     04 07 07 07 
12e5c     07 08 07 04 
12e60     02 02 02 FF | 	byte	$fe, $00, $01, $02, $04, $07, $07, $07, $07, $08, $07, $04, $02, $02, $02, $ff
12e64     FD FB FC FC 
12e68     FC FC FD FD 
12e6c     FD FD FD FC 
12e70     FD FD FD FD | 	byte	$fd, $fb, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd
12e74     FF 00 01 02 
12e78     05 08 07 07 
12e7c     08 08 06 03 
12e80     02 02 01 FE | 	byte	$ff, $00, $01, $02, $05, $08, $07, $07, $08, $08, $06, $03, $02, $02, $01, $fe
12e84     FC FB FC FC 
12e88     FC FC FC FC 
12e8c     FD FD FC FC 
12e90     FD FC FC FD | 	byte	$fc, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fc, $fc, $fd, $fc, $fc, $fd
12e94     FF 00 01 02 
12e98     05 07 07 07 
12e9c     08 07 04 02 
12ea0     02 02 00 FC | 	byte	$ff, $00, $01, $02, $05, $07, $07, $07, $08, $07, $04, $02, $02, $02, $00, $fc
12ea4     FB FC FC FB 
12ea8     FB FC FD FD 
12eac     FD FD FC FD 
12eb0     FD FD FD FE | 	byte	$fb, $fc, $fc, $fb, $fb, $fc, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe
12eb4     00 01 01 03 
12eb8     06 08 09 09 
12ebc     09 07 04 03 
12ec0     03 02 FE FC | 	byte	$00, $01, $01, $03, $06, $08, $09, $09, $09, $07, $04, $03, $03, $02, $fe, $fc
12ec4     FC FC FC FC 
12ec8     FC          | 	byte	$fc[5]
12ec9     FD FD FD FE 
12ecd     FE FD FD FD 
12ed1     FD FE FF 00 
12ed5     01 01 03 06 | 	byte	$fd, $fd, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01, $01, $03, $06
12ed9     07 08 09 08 
12edd     05 02 02 02 
12ee1     00 FD FB FB 
12ee5     FB FB FC FC | 	byte	$07, $08, $09, $08, $05, $02, $02, $02, $00, $fd, $fb, $fb, $fb, $fb, $fc, $fc
12ee9     FD FD FE FE 
12eed     FE FD FD FD 
12ef1     FD FE FE 00 
12ef5     01 01 03 05 | 	byte	$fd, $fd, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $00, $01, $01, $03, $05
12ef9     08 09 09 07 
12efd     04 02 02 02 
12f01     FF FC FB FB 
12f05     FC FC FC FD | 	byte	$08, $09, $09, $07, $04, $02, $02, $02, $ff, $fc, $fb, $fb, $fc, $fc, $fc, $fd
12f09     FD FE FE FE 
12f0d     FE FD FD FD 
12f11     FE FF FF 01 
12f15     01 01 04 06 | 	byte	$fd, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $ff, $ff, $01, $01, $01, $04, $06
12f19     09 0A 09 06 
12f1d     03 02 02 00 
12f21     FD FB FB FA 
12f25     FB FC FD FE | 	byte	$09, $0a, $09, $06, $03, $02, $02, $00, $fd, $fb, $fb, $fa, $fb, $fc, $fd, $fe
12f29     FE FD FE FE 
12f2d     FD FD FD FD 
12f31     FD FF FF 01 
12f35     01 02 04 07 | 	byte	$fe, $fd, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $ff, $ff, $01, $01, $02, $04, $07
12f39     09 0A 08 05 
12f3d     02 02 02 FF 
12f41     FC FA FA FB 
12f45     FC FD FE FE | 	byte	$09, $0a, $08, $05, $02, $02, $02, $ff, $fc, $fa, $fa, $fb, $fc, $fd, $fe, $fe
12f49     FF FF FF FF 
12f4d     FE FE FE FE 
12f51     FE FF 00 01 
12f55     01 02 04 07 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $00, $01, $01, $02, $04, $07
12f59     0A 09 07 04 
12f5d     02 02 01 FD 
12f61     FB FA FB FB 
12f65     FC FD FE FE | 	byte	$0a, $09, $07, $04, $02, $02, $01, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $fe
12f69     FE FF FF FF 
12f6d     FD FE FD FD 
12f71     FE FE FF 00 
12f75     01 02 04 08 | 	byte	$fe, $ff, $ff, $ff, $fd, $fe, $fd, $fd, $fe, $fe, $ff, $00, $01, $02, $04, $08
12f79     0A 08 06 03 
12f7d     02 01 FF FC 
12f81     FA FA FA FC 
12f85     FD FE FE FF | 	byte	$0a, $08, $06, $03, $02, $01, $ff, $fc, $fa, $fa, $fa, $fc, $fd, $fe, $fe, $ff
12f89     FF FF FF FF 
12f8d     FE FE FE FE 
12f91     FF FF 01 01 
12f95     02 02 05 0A | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $01, $01, $02, $02, $05, $0a
12f99     0A 08 06 03 
12f9d     03 01 FE FB 
12fa1     FA FB FB FD 
12fa5     FE FE FF 00 | 	byte	$0a, $08, $06, $03, $03, $01, $fe, $fb, $fa, $fb, $fb, $fd, $fe, $fe, $ff, $00
12fa9     00 00 00 00 
12fad     FE FF FE FE 
12fb1     FF FE 00 01 
12fb5     01 02 06 09 | 	byte	$00, $00, $00, $00, $fe, $ff, $fe, $fe, $ff, $fe, $00, $01, $01, $02, $06, $09
12fb9     09 07 04 02 
12fbd     01 FE FB F9 
12fc1     F9 FA FC FD 
12fc5     FE FF FF 00 | 	byte	$09, $07, $04, $02, $01, $fe, $fb, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $ff, $00
12fc9     00 01 01 00 
12fcd     FF FF FF FE 
12fd1     FF FE 01 01 
12fd5     01 03 07 09 | 	byte	$00, $01, $01, $00, $ff, $ff, $ff, $fe, $ff, $fe, $01, $01, $01, $03, $07, $09
12fd9     08 06 03 02 
12fdd     00 FD FA FA 
12fe1     FA FB FD FE 
12fe5     FF 00 00 01 | 	byte	$08, $06, $03, $02, $00, $fd, $fa, $fa, $fa, $fb, $fd, $fe, $ff, $00, $00, $01
12fe9     01 01 01 00 
12fed     FF FF FF FE 
12ff1     FE FE 00 01 
12ff5     02 04 08 09 | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $00, $01, $02, $04, $08, $09
12ff9     08 05 02 02 
12ffd     FE FA F9 F9 
13001     FA FC FD FE 
13005     FF 00 01 01 | 	byte	$08, $05, $02, $02, $fe, $fa, $f9, $f9, $fa, $fc, $fd, $fe, $ff, $00, $01, $01
13009     01 01 01 FF 
1300d     FE FE FE FE 
13011     FD FF 00 01 
13015     02 05 08 08 | 	byte	$01, $01, $01, $ff, $fe, $fe, $fe, $fe, $fd, $ff, $00, $01, $02, $05, $08, $08
13019     06 03 02 FF 
1301d     FB F9 F8 FA 
13021     FB FD FE FF 
13025     01 01 01 02 | 	byte	$06, $03, $02, $ff, $fb, $f9, $f8, $fa, $fb, $fd, $fe, $ff, $01, $01, $01, $02
13029     03 03 02 00 
1302d     FF FF FF FF 
13031     FD FF 01 01 
13035     02 06 08 08 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $ff, $fd, $ff, $01, $01, $02, $06, $08, $08
13039     05 02 00 FD 
1303d     FA F8 F9 FA 
13041     FC FE FF 00 
13045     01 02 02 02 | 	byte	$05, $02, $00, $fd, $fa, $f8, $f9, $fa, $fc, $fe, $ff, $00, $01, $02, $02, $02
13049     03 03 02 00 
1304d     FF FF FE FE 
13051     FD FF 01 01 
13055     02 06 07 07 | 	byte	$03, $03, $02, $00, $ff, $ff, $fe, $fe, $fd, $ff, $01, $01, $02, $06, $07, $07
13059     03 01 FE FA 
1305d     F8 F8 F9 FB 
13061     FD FE 00 01 
13065     02 03 03 03 | 	byte	$03, $01, $fe, $fa, $f8, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $03
13069     03 03 02 00 
1306d     FF FF FF FD 
13071     FD 00 02 01 
13075     04 07 08 06 | 	byte	$03, $03, $02, $00, $ff, $ff, $ff, $fd, $fd, $00, $02, $01, $04, $07, $08, $06
13079     02 00 FC F9 
1307d     F8 F9 FB FD 
13081     FE 00 01 02 
13085     03 03 04 04 | 	byte	$02, $00, $fc, $f9, $f8, $f9, $fb, $fd, $fe, $00, $01, $02, $03, $03, $04, $04
13089     04 04 03 00 
1308d     00 FF FF FC 
13091     FD 00 01 01 
13095     03 06 06 03 | 	byte	$04, $04, $03, $00, $00, $ff, $ff, $fc, $fd, $00, $01, $01, $03, $06, $06, $03
13099     00 FD F9 F7 
1309d     F7 F9 FB FD 
130a1     FF 00 02 03 
130a5     04 04 04 05 | 	byte	$00, $fd, $f9, $f7, $f7, $f9, $fb, $fd, $ff, $00, $02, $03, $04, $04, $04, $05
130a9     05 05 03 00 
130ad     00 FF FE FB 
130b1     FE 00 01 01 
130b5     03 05 05 00 | 	byte	$05, $05, $03, $00, $00, $ff, $fe, $fb, $fe, $00, $01, $01, $03, $05, $05, $00
130b9     FE F9 F7 F7 
130bd     F8 FA FD FE 
130c1     00 02 03 04 
130c5     05 05 05 06 | 	byte	$fe, $f9, $f7, $f7, $f8, $fa, $fd, $fe, $00, $02, $03, $04, $05, $05, $05, $06
130c9     06 05 03 00 
130cd     00 FF FD FB 
130d1     FE 00 00 01 
130d5     04 05 02 FF | 	byte	$06, $05, $03, $00, $00, $ff, $fd, $fb, $fe, $00, $00, $01, $04, $05, $02, $ff
130d9     FB F7 F6 F7 
130dd     F9 FB FE FF 
130e1     01 03 04 05 
130e5     06 06 06 06 | 	byte	$fb, $f7, $f6, $f7, $f9, $fb, $fe, $ff, $01, $03, $04, $05, $06, $06, $06, $06
130e9     06 05 02 00 
130ed     00 FE FB FB 
130f1     FE 00 FF 01 
130f5     04 04 FF FD | 	byte	$06, $05, $02, $00, $00, $fe, $fb, $fb, $fe, $00, $ff, $01, $04, $04, $ff, $fd
130f9     F8 F5 F6 F8 
130fd     FA FC FF 01 
13101     03 04 06 06 
13105     07 07 07 08 | 	byte	$f8, $f5, $f6, $f8, $fa, $fc, $ff, $01, $03, $04, $06, $06, $07, $07, $07, $08
13109     07 06 02 01 
1310d     00 FF FA FD 
13111     FF FF FE 00 
13115     03 00 FC F9 | 	byte	$07, $06, $02, $01, $00, $ff, $fa, $fd, $ff, $ff, $fe, $00, $03, $00, $fc, $f9
13119     F5 F5 F7 F9 
1311d     FB FD 00 02 
13121     04 06 07 08 
13125     08 08 08 08 | 	byte	$f5, $f5, $f7, $f9, $fb, $fd, $00, $02, $04, $06, $07, $08, $08, $08, $08, $08
13129     07 06 01 00 
1312d     FF FD F9 FC 
13131     FE FD FD FF 
13135     01 FC F9 F5 | 	byte	$07, $06, $01, $00, $ff, $fd, $f9, $fc, $fe, $fd, $fd, $ff, $01, $fc, $f9, $f5
13139     F4 F5 F7 FA 
1313d     FC FF 01 04 
13141     05 07 08 09 
13145     09 09 09 09 | 	byte	$f4, $f5, $f7, $fa, $fc, $ff, $01, $04, $05, $07, $08, $09, $09, $09, $09, $09
13149     08 06 01 00 
1314d     FF FB FA FD 
13151     FE FC FE 01 
13155     FF FA F7 F4 | 	byte	$08, $06, $01, $00, $ff, $fb, $fa, $fd, $fe, $fc, $fe, $01, $ff, $fa, $f7, $f4
13159     F5 F7 F9 FC 
1315d     FF 01 03 05 
13161     07 08 09 0A 
13165     09 09 09 09 | 	byte	$f5, $f7, $f9, $fc, $ff, $01, $03, $05, $07, $08, $09, $0a, $09, $09, $09, $09
13169     08 05 01 00 
1316d     FF FA FA FD 
13171     FC FB FD FF 
13175     FB F8 F5 F4 | 	byte	$08, $05, $01, $00, $ff, $fa, $fa, $fd, $fc, $fb, $fd, $ff, $fb, $f8, $f5, $f4
13179     F5 F8 FA FD 
1317d     FF 01 04 05 
13181     08 09 09 09 
13185     09 09 09 09 | 	byte	$f5, $f8, $fa, $fd, $ff, $01, $04, $05, $08, $09, $09, $09, $09, $09, $09, $09
13189     07 03 01 00 
1318d     FE F8 FB FD 
13191     FA FB FD FC 
13195     F8 F6 F4 F5 | 	byte	$07, $03, $01, $00, $fe, $f8, $fb, $fd, $fa, $fb, $fd, $fc, $f8, $f6, $f4, $f5
13199     F7 F9 FC FE 
1319d     01 03 06 07 
131a1     08 09 0A 0A 
131a5     0A 09 09 08 | 	byte	$f7, $f9, $fc, $fe, $01, $03, $06, $07, $08, $09, $0a, $0a, $0a, $09, $09, $08
131a9     07 02 00 FF 
131ad     FD F9 FC FB 
131b1     F9 FB FD F9 
131b5     F7 F5 F4 F6 | 	byte	$07, $02, $00, $ff, $fd, $f9, $fc, $fb, $f9, $fb, $fd, $f9, $f7, $f5, $f4, $f6
131b9     F8 FA FD 00 
131bd     02 04 06 08 
131c1     09 0A 0A 0A 
131c5     0A 09 09 07 | 	byte	$f8, $fa, $fd, $00, $02, $04, $06, $08, $09, $0a, $0a, $0a, $0a, $09, $09, $07
131c9     05 00 FF FF 
131cd     FA F9 FC F8 
131d1     F8 FA FB F7 
131d5     F6 F4 F5 F7 | 	byte	$05, $00, $ff, $ff, $fa, $f9, $fc, $f8, $f8, $fa, $fb, $f7, $f6, $f4, $f5, $f7
131d9     F9 FC FE 01 
131dd     03 05 07 09 
131e1     0A 0A 0A 0B 
131e5     0A 0A 09 08 | 	byte	$f9, $fc, $fe, $01, $03, $05, $07, $09, $0a, $0a, $0a, $0b, $0a, $0a, $09, $08
131e9     05 00 00 FF 
131ed     FA FB FB F7 
131f1     F8 FB F7 F6 
131f5     F5 F4 F6 F8 | 	byte	$05, $00, $00, $ff, $fa, $fb, $fb, $f7, $f8, $fb, $f7, $f6, $f5, $f4, $f6, $f8
131f9     FA FD FF 02 
131fd     04 06 08 09 
13201     0B 0B 0B 0A 
13205     0A 09 08 07 | 	byte	$fa, $fd, $ff, $02, $04, $06, $08, $09, $0b, $0b, $0b, $0a, $0a, $09, $08, $07
13209     03 00 FF FE 
1320d     F9 FA F8 F5 
13211     F8 F8 F5 F5 
13215     F4 F5 F7 F9 | 	byte	$03, $00, $ff, $fe, $f9, $fa, $f8, $f5, $f8, $f8, $f5, $f5, $f4, $f5, $f7, $f9
13219     FC FE 01 03 
1321d     05 07 09 0A 
13221     0B 0B 0B 0B 
13225     0A 09 08 06 | 	byte	$fc, $fe, $01, $03, $05, $07, $09, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $06
13229     02 00 FF FD 
1322d     F9 F9 F6 F6 
13231     F8 F6 F3 F5 
13235     F5 F7 F9 FC | 	byte	$02, $00, $ff, $fd, $f9, $f9, $f6, $f6, $f8, $f6, $f3, $f5, $f5, $f7, $f9, $fc
13239     FE 00 03 05 
1323d     08 09 0A 0B 
13241     0C 0C 0C 0B 
13245     0A 0A 08 05 | 	byte	$fe, $00, $03, $05, $08, $09, $0a, $0b, $0c, $0c, $0c, $0b, $0a, $0a, $08, $05
13249     00 00 00 FC 
1324d     F8 F5 F4 F5 
13251     F6 F2 F3 F4 
13255     F5 F7 FA FC | 	byte	$00, $00, $00, $fc, $f8, $f5, $f4, $f5, $f6, $f2, $f3, $f4, $f5, $f7, $fa, $fc
13259     FF 01 03 05 
1325d     08 09 0B 0C 
13261     0C 0C 0B 0B 
13265     0A 09 07 03 | 	byte	$ff, $01, $03, $05, $08, $09, $0b, $0c, $0c, $0c, $0b, $0b, $0a, $09, $07, $03
13269     00 00 FF FA 
1326d     F5 F3 F4 F5 
13271     F3 F0 F3 F5 
13275     F6 F9 FB FE | 	byte	$00, $00, $ff, $fa, $f5, $f3, $f4, $f5, $f3, $f0, $f3, $f5, $f6, $f9, $fb, $fe
13279     01 03 05 07 
1327d     09 0B 0C 0C 
13281     0D 0C 0C 0A 
13285     0A 08 07 01 | 	byte	$01, $03, $05, $07, $09, $0b, $0c, $0c, $0d, $0c, $0c, $0a, $0a, $08, $07, $01
13289     00 00 FF F8 
1328d     F2 F2 F4 F4 
13291     F0 F0 F3 F6 
13295     F8 FA FD FF | 	byte	$00, $00, $ff, $f8, $f2, $f2, $f4, $f4, $f0, $f0, $f3, $f6, $f8, $fa, $fd, $ff
13299     02 04 06 08 
1329d     0A 0B 0C 0D 
132a1     0D 0C 0B 0A 
132a5     0A 08 04 00 | 	byte	$02, $04, $06, $08, $0a, $0b, $0c, $0d, $0d, $0c, $0b, $0a, $0a, $08, $04, $00
132a9     FF 00 FD F4 
132ad     F0 F2 F3 F1 
132b1     ED F1 F5 F7 
132b5     F9 FC FE 01 | 	byte	$ff, $00, $fd, $f4, $f0, $f2, $f3, $f1, $ed, $f1, $f5, $f7, $f9, $fc, $fe, $01
132b9     03 05 07 09 
132bd     0B 0C 0D 0D 
132c1     0D 0D 0B 0B 
132c5     0A 08 03 01 | 	byte	$03, $05, $07, $09, $0b, $0c, $0d, $0d, $0d, $0d, $0b, $0b, $0a, $08, $03, $01
132c9     01 00 FA F0 
132cd     F1 F3 F2 EE 
132d1     EB F1 F6 F7 
132d5     FA FE 00 02 | 	byte	$01, $00, $fa, $f0, $f1, $f3, $f2, $ee, $eb, $f1, $f6, $f7, $fa, $fe, $00, $02
132d9     05 06 09 0A 
132dd     0C 0D 0D 0E 
132e1     0D 0C 0B 0A 
132e5     09 07 01 00 | 	byte	$05, $06, $09, $0a, $0c, $0d, $0d, $0e, $0d, $0c, $0b, $0a, $09, $07, $01, $00
132e9     00 FD F6 EE 
132ed     F0 F3 EF EA 
132f1     EB F2 F6 F8 
132f5     FC FF 01 04 | 	byte	$00, $fd, $f6, $ee, $f0, $f3, $ef, $ea, $eb, $f2, $f6, $f8, $fc, $ff, $01, $04
132f9     06 08 0A 0B 
132fd     0C 0D 0E 0E 
13301     0D 0C 0B 0A 
13305     08 05 01 01 | 	byte	$06, $08, $0a, $0b, $0c, $0d, $0e, $0e, $0d, $0c, $0b, $0a, $08, $05, $01, $01
13309     FF FA F1 EE 
1330d     F2 F2 ED E8 
13311     EC F3 F7 FA 
13315     FF 01 04 06 | 	byte	$ff, $fa, $f1, $ee, $f2, $f2, $ed, $e8, $ec, $f3, $f7, $fa, $ff, $01, $04, $06
13319     08 0A 0C 0D 
1331d     0E 0F 0F 0F 
13321     0E 0D 0B 0A 
13325     08 03 01 00 | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0f, $0e, $0d, $0b, $0a, $08, $03, $01, $00
13329     FC F6 EF EF 
1332d     F2 EF E9 E6 
13331     ED F3 F8 FC 
13335     FF 02 04 07 | 	byte	$fc, $f6, $ef, $ef, $f2, $ef, $e9, $e6, $ed, $f3, $f8, $fc, $ff, $02, $04, $07
13339     08 0A 0C 0D 
1333d     0E 0F 0F 0E 
13341     0D 0C 0B 09 
13345     07 03 01 FF | 	byte	$08, $0a, $0c, $0d, $0e, $0f, $0f, $0e, $0d, $0c, $0b, $09, $07, $03, $01, $ff
13349     F9 F2 EF F0 
1334d     F1 ED E5 E6 
13351     EE F5 FA FE 
13355     01 04 06 08 | 	byte	$f9, $f2, $ef, $f0, $f1, $ed, $e5, $e6, $ee, $f5, $fa, $fe, $01, $04, $06, $08
13359     0A 0C 0D 0E 
1335d     0F 10 10 0F 
13361     0E 0C 0B 09 
13365     05 02 00 FB | 	byte	$0a, $0c, $0d, $0e, $0f, $10, $10, $0f, $0e, $0c, $0b, $09, $05, $02, $00, $fb
13369     F5 F2 EF F1 
1336d     F0 E9 E3 E7 
13371     EF F6 FC 00 
13375     03 05 08 09 | 	byte	$f5, $f2, $ef, $f1, $f0, $e9, $e3, $e7, $ef, $f6, $fc, $00, $03, $05, $08, $09
13379     0C 0D 0E 0F 
1337d     0F 10 0F 0E 
13381     0D 0B 0A 09 
13385     04 01 FD F8 | 	byte	$0c, $0d, $0e, $0f, $0f, $10, $0f, $0e, $0d, $0b, $0a, $09, $04, $01, $fd, $f8
13389     F1 F1 F0 F0 
1338d     ED E5 E1 E7 
13391     F0 F8 FE 02 
13395     05 07 09 0B | 	byte	$f1, $f1, $f0, $f0, $ed, $e5, $e1, $e7, $f0, $f8, $fe, $02, $05, $07, $09, $0b
13399     0C 0E 0F 10 
1339d     10 10 10 0F 
133a1     0E 0C 0A 08 
133a5     03 00 FC F4 | 	byte	$0c, $0e, $0f, $10, $10, $10, $10, $0f, $0e, $0c, $0a, $08, $03, $00, $fc, $f4
133a9     F2 F3 F0 EF 
133ad     EA E2 E0 E8 
133b1     F1 F9 00 04 
133b5     06 09 0A 0C | 	byte	$f2, $f3, $f0, $ef, $ea, $e2, $e0, $e8, $f1, $f9, $00, $04, $06, $09, $0a, $0c
133b9     0D 0F 10 10 
133bd     10 11 10 0F 
133c1     0D 0B 0A 06 
133c5     01 FD F8 F1 | 	byte	$0d, $0f, $10, $10, $10, $11, $10, $0f, $0d, $0b, $0a, $06, $01, $fd, $f8, $f1
133c9     F2 F3 F0 ED 
133cd     E6 DE DF E9 
133d1     F2 FC 02 05 
133d5     08 0A 0C 0D | 	byte	$f2, $f3, $f0, $ed, $e6, $de, $df, $e9, $f2, $fc, $02, $05, $08, $0a, $0c, $0d
133d9     0F 10 10 11 
133dd     11 11 10 0F 
133e1     0D 0C 0A 05 
133e5     FF FB F4 F1 | 	byte	$0f, $10, $10, $11, $11, $11, $10, $0f, $0d, $0c, $0a, $05, $ff, $fb, $f4, $f1
133e9     F3 F3 EF EB 
133ed     E3 DC E0 EA 
133f1     F4 FF 05 08 
133f5     0A 0C 0E 10 | 	byte	$f3, $f3, $ef, $eb, $e3, $dc, $e0, $ea, $f4, $ff, $05, $08, $0a, $0c, $0e, $10
133f9     11 12 12 12 
133fd     12 12 11 10 
13401     0E 0C 0A 03 
13405     FD F8 F1 F1 | 	byte	$11, $12, $12, $12, $12, $12, $11, $10, $0e, $0c, $0a, $03, $fd, $f8, $f1, $f1
13409     F3 F3 ED E7 
1340d     E0 DA E1 EB 
13411     F7 00 07 09 
13415     0B 0D 0E 10 | 	byte	$f3, $f3, $ed, $e7, $e0, $da, $e1, $eb, $f7, $00, $07, $09, $0b, $0d, $0e, $10
13419     11 12 12 12 
1341d     12 12 11 0F 
13421     0D 0C 07 01 
13425     FB F5 F1 F2 | 	byte	$11, $12, $12, $12, $12, $12, $11, $0f, $0d, $0c, $07, $01, $fb, $f5, $f1, $f2
13429     F4 F2 EA E3 
1342d     DB D9 E1 ED 
13431     F9 03 09 0B 
13435     0D 0F 10 11 | 	byte	$f4, $f2, $ea, $e3, $db, $d9, $e1, $ed, $f9, $03, $09, $0b, $0d, $0f, $10, $11
13439     13 13 13 13 
1343d     13 13       | 	byte	$13[6]
1343f     11 0F 0D 0B 
13443     05 FE F8 F2 
13447     F1 F2 F4 F0 
1344b     E7 DF D9 DA | 	byte	$11, $0f, $0d, $0b, $05, $fe, $f8, $f2, $f1, $f2, $f4, $f0, $e7, $df, $d9, $da
1344f     E3 F0 FC 06 
13453     0B 0D 0E 10 
13457     12 13 14 14 
1345b     14 14 13 12 | 	byte	$e3, $f0, $fc, $06, $0b, $0d, $0e, $10, $12, $13, $14, $14, $14, $14, $13, $12
1345f     11 0F 0D 09 
13463     02 FB F6 F1 
13467     F0 F1 F2 EC 
1346b     E2 DB D6 DA | 	byte	$11, $0f, $0d, $09, $02, $fb, $f6, $f1, $f0, $f1, $f2, $ec, $e2, $db, $d6, $da
1346f     E5 F3 FF 09 
13473     0E 0F 10 12 
13477     13 14 14 15 
1347b     15 14 14 13 | 	byte	$e5, $f3, $ff, $09, $0e, $0f, $10, $12, $13, $14, $14, $15, $15, $14, $14, $13
1347f     11 0F 0D 08 
13483     FF F9 F3 F1 
13487     F1 F2 F1 E9 
1348b     DE D8 D6 DD | 	byte	$11, $0f, $0d, $08, $ff, $f9, $f3, $f1, $f1, $f2, $f1, $e9, $de, $d8, $d6, $dd
1348f     E8 F6 02 0B 
13493     0F 10 12 13 
13497     14 15 15 16 
1349b     15 15 14 13 | 	byte	$e8, $f6, $02, $0b, $0f, $10, $12, $13, $14, $15, $15, $16, $15, $15, $14, $13
1349f     11 0F 0B 06 
134a3     FC F6 F1 F0 
134a7     F0 F1 ED E3 
134ab     D9 D5 D6 DE | 	byte	$11, $0f, $0b, $06, $fc, $f6, $f1, $f0, $f0, $f1, $ed, $e3, $d9, $d5, $d6, $de
134af     EA F8 05 0D 
134b3     11 12 14 15 
134b7     16 16 16 16 
134bb     16 15 14 13 | 	byte	$ea, $f8, $05, $0d, $11, $12, $14, $15, $16, $16, $16, $16, $16, $15, $14, $13
134bf     11 0F 09 02 
134c3     F9 F3 F1 EF 
134c7     F0 EE E8 DF 
134cb     D7 D4 D9 E2 | 	byte	$11, $0f, $09, $02, $f9, $f3, $f1, $ef, $f0, $ee, $e8, $df, $d7, $d4, $d9, $e2
134cf     ED FC 09 10 
134d3     13 15 16 17 
134d7     18 18 18 18 
134db     18 16 15 14 | 	byte	$ed, $fc, $09, $10, $13, $15, $16, $17, $18, $18, $18, $18, $18, $16, $15, $14
134df     12 0D 07 FE 
134e3     F8 F2 F0 EF 
134e7     EE EA E4 DA 
134eb     D4 D4 DA E4 | 	byte	$12, $0d, $07, $fe, $f8, $f2, $f0, $ef, $ee, $ea, $e4, $da, $d4, $d4, $da, $e4
134ef     F2 FF 0C 13 
134f3     15 16 17 18 
134f7     19 19 19 18 
134fb     17 16 15 14 | 	byte	$f2, $ff, $0c, $13, $15, $16, $17, $18, $19, $19, $19, $18, $17, $16, $15, $14
134ff     11 0B 04 FC 
13503     F5 F1 EF EE 
13507     EB E6 DF D6 
1350b     D2 D5 DC E6 | 	byte	$11, $0b, $04, $fc, $f5, $f1, $ef, $ee, $eb, $e6, $df, $d6, $d2, $d5, $dc, $e6
1350f     F4 03 0F 15 
13513     17 18 19 1A 
13517     1B 1A 1A 19 
1351b     19 17 16 14 | 	byte	$f4, $03, $0f, $15, $17, $18, $19, $1a, $1b, $1a, $1a, $19, $19, $17, $16, $14
1351f     0F 08 01 F9 
13523     F3 F0 EE EC 
13527     E7 E1 DA D4 
1352b     D2 D7 DF EB | 	byte	$0f, $08, $01, $f9, $f3, $f0, $ee, $ec, $e7, $e1, $da, $d4, $d2, $d7, $df, $eb
1352f     F8 07 12 17 
13533     19 1A 1B 1B 
13537     1C 1C 1B 1A 
1353b     18 17 16 12 | 	byte	$f8, $07, $12, $17, $19, $1a, $1b, $1b, $1c, $1c, $1b, $1a, $18, $17, $16, $12
1353f     0D 05 FE F6 
13543     F1 EF EC E7 
13547     E0 DB D6 D1 
1354b     D3 D9 E1 EF | 	byte	$0d, $05, $fe, $f6, $f1, $ef, $ec, $e7, $e0, $db, $d6, $d1, $d3, $d9, $e1, $ef
1354f     FD 0A 15 1A 
13553     1B 1C 1D 1D 
13557     1D 1D 1C 1B 
1355b     19 18 16 12 | 	byte	$fd, $0a, $15, $1a, $1b, $1c, $1d, $1d, $1d, $1d, $1c, $1b, $19, $18, $16, $12
1355f     0B 03 FD F5 
13563     F0 ED E9 E3 
13567     DB D7 D3 D1 
1356b     D4 DC E5 F2 | 	byte	$0b, $03, $fd, $f5, $f0, $ed, $e9, $e3, $db, $d7, $d3, $d1, $d4, $dc, $e5, $f2
1356f     02 0E 18 1D 
13573     1D 1E 1E 1F 
13577     1F 1E 1D 1B 
1357b     1A 18 15 10 | 	byte	$02, $0e, $18, $1d, $1d, $1e, $1e, $1f, $1f, $1e, $1d, $1b, $1a, $18, $15, $10
1357f     08 01 F9 F2 
13583     EE EA E4 DB 
13587     D6 D3 D1 D1 
1358b     D7 DE E8 F7 | 	byte	$08, $01, $f9, $f2, $ee, $ea, $e4, $db, $d6, $d3, $d1, $d1, $d7, $de, $e8, $f7
1358f     06 13 1B 1E 
13593     1E 1F 20 1F 
13597     1F 1E 1D 1B 
1359b     19 18 13 0D | 	byte	$06, $13, $1b, $1e, $1e, $1f, $20, $1f, $1f, $1e, $1d, $1b, $19, $18, $13, $0d
1359f     05 FE F7 F0 
135a3     ED E7 DE D7 
135a7     D3 D2 D2 D4 
135ab     DB E3 ED FC | 	byte	$05, $fe, $f7, $f0, $ed, $e7, $de, $d7, $d3, $d2, $d2, $d4, $db, $e3, $ed, $fc
135af     0C 16 1D 1F 
135b3     20 21 21 21 
135b7     20 1F 1D 1C 
135bb     1A 17 12 0A | 	byte	$0c, $16, $1d, $1f, $20, $21, $21, $21, $20, $1f, $1d, $1c, $1a, $17, $12, $0a
135bf     03 FD F7 EF 
135c3     EB E4 DA D3 
135c7     D1 D3 D3 D7 
135cb     DE E6 F2 00 | 	byte	$03, $fd, $f7, $ef, $eb, $e4, $da, $d3, $d1, $d3, $d3, $d7, $de, $e6, $f2, $00
135cf     0E 19 1E 1F 
135d3     20 20 20 20 
135d7     1F 1E 1C 1A 
135db     19 16 0F 07 | 	byte	$0e, $19, $1e, $1f, $20, $20, $20, $20, $1f, $1e, $1c, $1a, $19, $16, $0f, $07
135df     00 FB F4 ED 
135e3     E8 DE D6 D1 
135e7     D1 D4 D4 DB 
135eb     E2 EB F6 05 | 	byte	$00, $fb, $f4, $ed, $e8, $de, $d6, $d1, $d1, $d4, $d4, $db, $e2, $eb, $f6, $05
135ef     11 1B 1F 20 
135f3     20 20 21 20 
135f7     1F 1E 1C 1B 
135fb     18 13 0C 04 | 	byte	$11, $1b, $1f, $20, $20, $20, $21, $20, $1f, $1e, $1c, $1b, $18, $13, $0c, $04
135ff     FE FA F1 EB 
13603     E4 D9 D2 D0 
13607     D2 D4 D8 DF 
1360b     E6 EF FB 0A | 	byte	$fe, $fa, $f1, $eb, $e4, $d9, $d2, $d0, $d2, $d4, $d8, $df, $e6, $ef, $fb, $0a
1360f     14 1D 20 20 
13613     21 21 21 20 
13617     1F 1E 1C 1A 
1361b     16 10 09 01 | 	byte	$14, $1d, $20, $20, $21, $21, $21, $20, $1f, $1e, $1c, $1a, $16, $10, $09, $01
1361f     FD F7 EF E8 
13623     DE D5 CF CF 
13627     D3 D4 DA E2 
1362b     E9 F3 00 0D | 	byte	$fd, $f7, $ef, $e8, $de, $d5, $cf, $cf, $d3, $d4, $da, $e2, $e9, $f3, $00, $0d
1362f     18 1E 21 21 
13633     21 21 20 1F 
13637     1E 1D 1B 19 
1363b     15 0E 06 00 | 	byte	$18, $1e, $21, $21, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $15, $0e, $06, $00
1363f     FC F6 EC E4 
13643     DA D2 CF D2 
13647     D5 D7 DE E6 
1364b     EE F8 05 10 | 	byte	$fc, $f6, $ec, $e4, $da, $d2, $cf, $d2, $d5, $d7, $de, $e6, $ee, $f8, $05, $10
1364f     1A 20 21 21 
13653     21 21 20 1F 
13657     1D 1C 1B 18 
1365b     12 0B 03 FF | 	byte	$1a, $20, $21, $21, $21, $21, $20, $1f, $1d, $1c, $1b, $18, $12, $0b, $03, $ff
1365f     FA F3 E7 DE 
13663     D5 D0 CF D3 
13667     D5 D9 E2 E9 
1366b     F1 FD 08 15 | 	byte	$fa, $f3, $e7, $de, $d5, $d0, $cf, $d3, $d5, $d9, $e2, $e9, $f1, $fd, $08, $15
1366f     1D 21 21 21 
13673     21 20 20 1E 
13677     1D 1B 19 15 
1367b     0F 08 01 FC | 	byte	$1d, $21, $21, $21, $21, $20, $20, $1e, $1d, $1b, $19, $15, $0f, $08, $01, $fc
1367f     F8 EE E3 D9 
13683     D2 CF D1 D5 
13687     D7 DE E6 ED 
1368b     F5 01 0E 18 | 	byte	$f8, $ee, $e3, $d9, $d2, $cf, $d1, $d5, $d7, $de, $e6, $ed, $f5, $01, $0e, $18
1368f     1F 22 21 22 
13693     21 21 20 1F 
13697     1E 1C 19 14 
1369b     0D 05 00 FB | 	byte	$1f, $22, $21, $22, $21, $21, $20, $1f, $1e, $1c, $19, $14, $0d, $05, $00, $fb
1369f     F6 EA DE D6 
136a3     D1 D0 D3 D5 
136a7     D9 E2 E9 F0 
136ab     FA 05 11 1B | 	byte	$f6, $ea, $de, $d6, $d1, $d0, $d3, $d5, $d9, $e2, $e9, $f0, $fa, $05, $11, $1b
136af     1F 21 21 21 
136b3     20 20 1F 1E 
136b7     1C 1A 16 11 
136bb     09 03 FD FA | 	byte	$1f, $21, $21, $21, $20, $20, $1f, $1e, $1c, $1a, $16, $11, $09, $03, $fd, $fa
136bf     F1 E5 D9 D3 
136c3     D1 D3 D5 D7 
136c7     DD E5 ED F4 
136cb     FE 0A 14 1D | 	byte	$f1, $e5, $d9, $d3, $d1, $d3, $d5, $d7, $dd, $e5, $ed, $f4, $fe, $0a, $14, $1d
136cf     21 21 21 20 
136d3     20 1F 1E 1D 
136d7     1C 19 14 0D 
136db     06 01 FD F6 | 	byte	$21, $21, $21, $20, $20, $1f, $1e, $1d, $1c, $19, $14, $0d, $06, $01, $fd, $f6
136df     EC DF D6 D3 
136e3     D3 D4 D6 D9 
136e7     E0 E9 F0 F8 
136eb     03 0D 18 1E | 	byte	$ec, $df, $d6, $d3, $d3, $d4, $d6, $d9, $e0, $e9, $f0, $f8, $03, $0d, $18, $1e
136ef     21 21 21 20 
136f3     1F 1F 1E 1C 
136f7     1A 17 10 0A 
136fb     04 FF FA F2 | 	byte	$21, $21, $21, $20, $1f, $1f, $1e, $1c, $1a, $17, $10, $0a, $04, $ff, $fa, $f2
136ff     E5 DA D4 D4 
13703     D5 D5 D7 DB 
13707     E3 EC F3 FB 
1370b     06 11 1A 20 | 	byte	$e5, $da, $d4, $d4, $d5, $d5, $d7, $db, $e3, $ec, $f3, $fb, $06, $11, $1a, $20
1370f     22 21 21 20 
13713     1F 1E 1D 1B 
13717     19 14 0E 07 
1371b     02 FD F7 EC | 	byte	$22, $21, $21, $20, $1f, $1e, $1d, $1b, $19, $14, $0e, $07, $02, $fd, $f7, $ec
1371f     E1 D8 D5 D6 
13723     D7 D7 DB DF 
13727     E8 F0 F6 00 
1372b     0A 14 1C 20 | 	byte	$e1, $d8, $d5, $d6, $d7, $d7, $db, $df, $e8, $f0, $f6, $00, $0a, $14, $1c, $20
1372f     21 20 20 1F 
13733     1E 1D 1C 1A 
13737     16 11 0B 05 
1373b     00 FB F2 E7 | 	byte	$21, $20, $20, $1f, $1e, $1d, $1c, $1a, $16, $11, $0b, $05, $00, $fb, $f2, $e7
1373f     DE D7 D6 D7 
13743     D7 D8 DC E2 
13747     EA F3 F9 03 
1374b     0D 17 1E 21 | 	byte	$de, $d7, $d6, $d7, $d7, $d8, $dc, $e2, $ea, $f3, $f9, $03, $0d, $17, $1e, $21
1374f     21 20 1F 1E 
13753     1E 1C 1B 18 
13757     13 0D 07 03 
1375b     FE F7 ED E2 | 	byte	$21, $20, $1f, $1e, $1e, $1c, $1b, $18, $13, $0d, $07, $03, $fe, $f7, $ed, $e2
1375f     DB D7 D9 D9 
13763     D8 DB DF E5 
13767     EE F6 FD 07 
1376b     11 1A 1F 22 | 	byte	$db, $d7, $d9, $d9, $d8, $db, $df, $e5, $ee, $f6, $fd, $07, $11, $1a, $1f, $22
1376f     21 20 1F 1F 
13773     1E 1C 1B 17 
13777     11 0C 06 02 
1377b     FC F3 E9 E0 | 	byte	$21, $20, $1f, $1f, $1e, $1c, $1b, $17, $11, $0c, $06, $02, $fc, $f3, $e9, $e0
1377f     DA D9 DA DA 
13783     DA DE E2 E9 
13787     F1 F8 00 09 
1378b     13 1B 20 21 | 	byte	$da, $d9, $da, $da, $da, $de, $e2, $e9, $f1, $f8, $00, $09, $13, $1b, $20, $21
1378f     20 1F 1F 1D 
13793     1D 1B 18 13 
13797     0E 09 04 FF 
1379b     F9 EF E5 DE | 	byte	$20, $1f, $1f, $1d, $1d, $1b, $18, $13, $0e, $09, $04, $ff, $f9, $ef, $e5, $de
1379f     DB DB DC DB 
137a3     DD E1 E5 EC 
137a7     F5 FA 03 0C 
137ab     15 1D 20 20 | 	byte	$db, $db, $dc, $db, $dd, $e1, $e5, $ec, $f5, $fa, $03, $0c, $15, $1d, $20, $20
137af     20 1E 1E 1D 
137b3     1B 19 16 11 
137b7     0B 06 03 FD 
137bb     F5 EA E2 DE | 	byte	$20, $1e, $1e, $1d, $1b, $19, $16, $11, $0b, $06, $03, $fd, $f5, $ea, $e2, $de
137bf     DC DD DD DC 
137c3     E0 E3 E8 F0 
137c7     F7 FD 06 0E 
137cb     17 1E 20 20 | 	byte	$dc, $dd, $dd, $dc, $e0, $e3, $e8, $f0, $f7, $fd, $06, $0e, $17, $1e, $20, $20
137cf     1F 1E 1D 1C 
137d3     1B 18 13 0D 
137d7     09 04 01 FA 
137db     F0 E7 E1 DE | 	byte	$1f, $1e, $1d, $1c, $1b, $18, $13, $0d, $09, $04, $01, $fa, $f0, $e7, $e1, $de
137df     DE DE DE DE 
137e3     E2 E4 E9 F2 
137e7     F8 00 08 11 
137eb     18 1E 20 1F | 	byte	$de, $de, $de, $de, $e2, $e4, $e9, $f2, $f8, $00, $08, $11, $18, $1e, $20, $1f
137ef     1F 1E 1D 1C 
137f3     19 15 10 0B 
137f7     07 03 FE F6 
137fb     EC E5 E2 E0 | 	byte	$1f, $1e, $1d, $1c, $19, $15, $10, $0b, $07, $03, $fe, $f6, $ec, $e5, $e2, $e0
137ff     E0 E1 DF E2 
13803     E6 E8 EE F6 
13807     FB 02 0A 12 
1380b     1A 1F 1F 1F | 	byte	$e0, $e1, $df, $e2, $e6, $e8, $ee, $f6, $fb, $02, $0a, $12, $1a, $1f, $1f, $1f
1380f     1D 1C 1B 1A 
13813     16 12 0D 08 
13817     05 02 FB F2 
1381b     E9 E4 E2 E1 | 	byte	$1d, $1c, $1b, $1a, $16, $12, $0d, $08, $05, $02, $fb, $f2, $e9, $e4, $e2, $e1
1381f     E2 E0 E0 E4 
13823     E7 EA F0 F7 
13827     FD 04 0C 14 
1382b     1A 1E 1F 1E | 	byte	$e2, $e0, $e0, $e4, $e7, $ea, $f0, $f7, $fd, $04, $0c, $14, $1a, $1e, $1f, $1e
1382f     1D 1B 1A 18 
13833     14 0F 0B 07 
13837     04 FF F7 EF 
1383b     E7 E4 E3 E3 | 	byte	$1d, $1b, $1a, $18, $14, $0f, $0b, $07, $04, $ff, $f7, $ef, $e7, $e4, $e3, $e3
1383f     E3 E1 E3 E7 
13843     E9 EC F4 FA 
13847     FF 06 0E 15 
1384b     1C 1F 1F 1E | 	byte	$e3, $e1, $e3, $e7, $e9, $ec, $f4, $fa, $ff, $06, $0e, $15, $1c, $1f, $1f, $1e
1384f     1C 1B 1A 16 
13853     12 0D 09 06 
13857     03 FD F5 EC 
1385b     E8 E6 E5 E5 | 	byte	$1c, $1b, $1a, $16, $12, $0d, $09, $06, $03, $fd, $f5, $ec, $e8, $e6, $e5, $e5
1385f     E4 E3 E5 E9 
13863     EB F0 F6 FB 
13867     01 08 0F 16 
1386b     1C 1E 1E 1C | 	byte	$e4, $e3, $e5, $e9, $eb, $f0, $f6, $fb, $01, $08, $0f, $16, $1c, $1e, $1e, $1c
1386f     1B 1A 17 13 
13873     0E 0A 07 05 
13877     00 F9 F1 EA 
1387b     E7 E7 E6 E6 | 	byte	$1b, $1a, $17, $13, $0e, $0a, $07, $05, $00, $f9, $f1, $ea, $e7, $e7, $e6, $e6
1387f     E5 E5 E8 EC 
13883     EE F2 F9 FD 
13887     02 09 10 17 
1388b     1B 1D 1D 1C | 	byte	$e5, $e5, $e8, $ec, $ee, $f2, $f9, $fd, $02, $09, $10, $17, $1b, $1d, $1d, $1c
1388f     1A 18 15 10 
13893     0D 09 07 03 
13897     FE F6 EE EA 
1389b     E8 E8 E7 E7 | 	byte	$1a, $18, $15, $10, $0d, $09, $07, $03, $fe, $f6, $ee, $ea, $e8, $e8, $e7, $e7
1389f     E5 E7 EA EE 
138a3     F0 F5 FA FE 
138a7     04 0A 11 18 
138ab     1B 1D 1C 1B | 	byte	$e5, $e7, $ea, $ee, $f0, $f5, $fa, $fe, $04, $0a, $11, $18, $1b, $1d, $1c, $1b
138af     19 16 12 0E 
138b3     0A 07 05 01 
138b7     FB F3 EC E9 
138bb     E9 E9 E8 E8 | 	byte	$19, $16, $12, $0e, $0a, $07, $05, $01, $fb, $f3, $ec, $e9, $e9, $e9, $e8, $e8
138bf     E6 E9 ED F0 
138c3     F1 F6 FB FF 
138c7     04 0B 12 18 
138cb     1B 1C 1B 1A | 	byte	$e6, $e9, $ed, $f0, $f1, $f6, $fb, $ff, $04, $0b, $12, $18, $1b, $1c, $1b, $1a
138cf     18 14 11 0C 
138d3     09 07 04 FF 
138d7     F8 F1 EC EB 
138db     EB EA EA E9 | 	byte	$18, $14, $11, $0c, $09, $07, $04, $ff, $f8, $f1, $ec, $eb, $eb, $ea, $ea, $e9
138df     E9 EC F0 F2 
138e3     F4 F9 FD 01 
138e7     06 0C 13 18 
138eb     1B 1B 1A 18 | 	byte	$e9, $ec, $f0, $f2, $f4, $f9, $fd, $01, $06, $0c, $13, $18, $1b, $1b, $1a, $18
138ef     15 11 0D 0A 
138f3     08 06 02 FC 
138f7     F5 EF EC EC 
138fb     EC EB EB E9 | 	byte	$15, $11, $0d, $0a, $08, $06, $02, $fc, $f5, $ef, $ec, $ec, $ec, $eb, $eb, $e9
138ff     EA ED F1 F3 
13903     F5 FA FE 02 
13907     07 0D 13 18 
1390b     1A 1B 19 16 | 	byte	$ea, $ed, $f1, $f3, $f5, $fa, $fe, $02, $07, $0d, $13, $18, $1a, $1b, $19, $16
1390f     13 0F 0C 09 
13913     07 05 FF F9 
13917     F3 EE ED ED 
1391b     ED EC EB EA | 	byte	$13, $0f, $0c, $09, $07, $05, $ff, $f9, $f3, $ee, $ed, $ed, $ed, $ec, $eb, $ea
1391f     EC F0 F3 F5 
13923     F7 FC FF 03 
13927     09 0E 14 18 
1392b     1B 1A 18 14 | 	byte	$ec, $f0, $f3, $f5, $f7, $fc, $ff, $03, $09, $0e, $14, $18, $1b, $1a, $18, $14
1392f     11 0E 0B 09 
13933     07 04 FE F7 
13937     F2 EF EF EF 
1393b     EE EE EC EC | 	byte	$11, $0e, $0b, $09, $07, $04, $fe, $f7, $f2, $ef, $ef, $ef, $ee, $ee, $ec, $ec
1393f     EE F2 F5 F6 
13943     F9 FD 00 03 
13947     09 0E 14 18 
1394b     19 18 15 12 | 	byte	$ee, $f2, $f5, $f6, $f9, $fd, $00, $03, $09, $0e, $14, $18, $19, $18, $15, $12
1394f     0F 0C 0A 08 
13953     06 01 FB F4 
13957     F1 EF F0 F0 
1395b     EF EF ED EE | 	byte	$0f, $0c, $0a, $08, $06, $01, $fb, $f4, $f1, $ef, $f0, $f0, $ef, $ef, $ed, $ee
1395f     F0 F4 F7 F8 
13963     FA FE 00 04 
13967     09 0F 14 17 
1396b     18 17 14 11 | 	byte	$f0, $f4, $f7, $f8, $fa, $fe, $00, $04, $09, $0f, $14, $17, $18, $17, $14, $11
1396f     0D 0B 0A 08 
13973     04 FF F9 F4 
13977     F1 F1 F1 F0 
1397b     F0 EF EE EF | 	byte	$0d, $0b, $0a, $08, $04, $ff, $f9, $f4, $f1, $f1, $f1, $f0, $f0, $ef, $ee, $ef
1397f     F2 F5 F8 F9 
13983     FB FE 01 05 
13987     09 0F 13 17 
1398b     17 15 11 0F | 	byte	$f2, $f5, $f8, $f9, $fb, $fe, $01, $05, $09, $0f, $13, $17, $17, $15, $11, $0f
1398f     0C 0A 09 06 
13993     02 FD F7 F4 
13997     F1 F1 F2 F1 
1399b     F1 EF EE F0 | 	byte	$0c, $0a, $09, $06, $02, $fd, $f7, $f4, $f1, $f1, $f2, $f1, $f1, $ef, $ee, $f0
1399f     F3 F7 F9 F9 
139a3     FC FE 01 05 
139a7     0A 0F 14 16 
139ab     15 13 10 0E | 	byte	$f3, $f7, $f9, $f9, $fc, $fe, $01, $05, $0a, $0f, $14, $16, $15, $13, $10, $0e
139af     0C 0A 08 05 
139b3     00 FB F6 F3 
139b7     F2 F3 F3 F2 
139bb     F2 F0 F0 F2 | 	byte	$0c, $0a, $08, $05, $00, $fb, $f6, $f3, $f2, $f3, $f3, $f2, $f2, $f0, $f0, $f2
139bf     F6 F8 FA FB 
139c3     FE 00 03 06 
139c7     0B 0F 14 15 
139cb     14 12 0F 0C | 	byte	$f6, $f8, $fa, $fb, $fe, $00, $03, $06, $0b, $0f, $14, $15, $14, $12, $0f, $0c
139cf     0B 09 07 03 
139d3     FE F9 F5 F3 
139d7     F3 F4 F4 F3 
139db     F3 F1 F1 F3 | 	byte	$0b, $09, $07, $03, $fe, $f9, $f5, $f3, $f3, $f4, $f4, $f3, $f3, $f1, $f1, $f3
139df     F6 F9 FB FB 
139e3     FD 00 02 06 
139e7     0B 0F 12 14 
139eb     12 10 0D 0C | 	byte	$f6, $f9, $fb, $fb, $fd, $00, $02, $06, $0b, $0f, $12, $14, $12, $10, $0d, $0c
139ef     0A 08 06 01 
139f3     FC F7 F5 F4 
139f7     F4 F5 F4 F3 
139fb     F3 F1 F3 F5 | 	byte	$0a, $08, $06, $01, $fc, $f7, $f5, $f4, $f4, $f5, $f4, $f3, $f3, $f1, $f3, $f5
139ff     F8 FB FC FC 
13a03     FE 01 03 07 
13a07     0C 10 12 13 
13a0b     11 0F 0D 0C | 	byte	$f8, $fb, $fc, $fc, $fe, $01, $03, $07, $0c, $10, $12, $13, $11, $0f, $0d, $0c
13a0f     0B 08 05 01 
13a13     FB F8 F6 F5 
13a17     F6 F7 F5 F4 
13a1b     F3 F3 F5 F7 | 	byte	$0b, $08, $05, $01, $fb, $f8, $f6, $f5, $f6, $f7, $f5, $f4, $f3, $f3, $f5, $f7
13a1f     F9 FB FD FD 
13a23     FF 01 04 07 
13a27     0B 0F 10 11 
13a2b     10 0E 0C 0B | 	byte	$f9, $fb, $fd, $fd, $ff, $01, $04, $07, $0b, $0f, $10, $11, $10, $0e, $0c, $0b
13a2f     09 07 03 FD 
13a33     F9 F7 F5 F5 
13a37     F6 F6 F5 F5 
13a3b     F4 F4 F5 F8 | 	byte	$09, $07, $03, $fd, $f9, $f7, $f5, $f5, $f6, $f6, $f5, $f5, $f4, $f4, $f5, $f8
13a3f     FA FC FE FE 
13a43     00 02 04 08 
13a47     0B 0E 0F 10 
13a4b     0F 0D 0C 0A | 	byte	$fa, $fc, $fe, $fe, $00, $02, $04, $08, $0b, $0e, $0f, $10, $0f, $0d, $0c, $0a
13a4f     08 05 02 FC 
13a53     F9 F7 F7 F7 
13a57     F8 F7 F6 F6 
13a5b     F4 F5 F7 F9 | 	byte	$08, $05, $02, $fc, $f9, $f7, $f7, $f7, $f8, $f7, $f6, $f6, $f4, $f5, $f7, $f9
13a5f     FB FD FE FE 
13a63     00 02 05 08 
13a67     0B 0D 0F 0E 
13a6b     0E 0C 0B 09 | 	byte	$fb, $fd, $fe, $fe, $00, $02, $05, $08, $0b, $0d, $0f, $0e, $0e, $0c, $0b, $09
13a6f     07 04 00 FB 
13a73     F8 F7 F7 F7 
13a77     F7 F7 F6 F5 
13a7b     F4 F5 F7 F9 | 	byte	$07, $04, $00, $fb, $f8, $f7, $f7, $f7, $f7, $f7, $f6, $f5, $f4, $f5, $f7, $f9
13a7f     FC FE FF FE 
13a83     00 02 04 08 
13a87     0A 0C 0D 0D 
13a8b     0D 0C 0A 09 | 	byte	$fc, $fe, $ff, $fe, $00, $02, $04, $08, $0a, $0c, $0d, $0d, $0d, $0c, $0a, $09
13a8f     06 03 FE FA 
13a93     F8 F7 F8 F9 
13a97     F9 F8 F7 F7 
13a9b     F6 F7 F8 FA | 	byte	$06, $03, $fe, $fa, $f8, $f7, $f8, $f9, $f9, $f8, $f7, $f7, $f6, $f7, $f8, $fa
13a9f     FD FF FF 00 
13aa3     01 03 06 08 
13aa7     0A 0C 0D 0D 
13aab     0C 0B 09 07 | 	byte	$fd, $ff, $ff, $00, $01, $03, $06, $08, $0a, $0c, $0d, $0d, $0c, $0b, $09, $07
13aaf     05 00 FC F9 
13ab3     F8 F8 F8 F9 
13ab7     F9 F8 F8 F6 
13abb     F6 F7 F9 FB | 	byte	$05, $00, $fc, $f9, $f8, $f8, $f8, $f9, $f9, $f8, $f8, $f6, $f6, $f7, $f9, $fb
13abf     FD FF FE FF 
13ac3     01 03 05 07 
13ac7     09 0B 0C 0C 
13acb     0C 0A 09 06 | 	byte	$fd, $ff, $fe, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0c, $0c, $0a, $09, $06
13acf     03 FF FB F9 
13ad3     F8 F8 F9 F9 
13ad7     F9 F8 F7 F6 
13adb     F7 F8 FA FC | 	byte	$03, $ff, $fb, $f9, $f8, $f8, $f9, $f9, $f9, $f8, $f7, $f6, $f7, $f8, $fa, $fc
13adf     FE FF FF 00 
13ae3     02 04 06 08 
13ae7     09 0B 0C 0C 
13aeb     0C 0A 08 06 | 	byte	$fe, $ff, $ff, $00, $02, $04, $06, $08, $09, $0b, $0c, $0c, $0c, $0a, $08, $06
13aef     02 FF FB FA 
13af3     F9 FA FA FA 
13af7     FB FA F8 F7 
13afb     F8 FA FB FD | 	byte	$02, $ff, $fb, $fa, $f9, $fa, $fa, $fa, $fb, $fa, $f8, $f7, $f8, $fa, $fb, $fd
13aff     FF 00 FF 01 
13b03     02 04 05 08 
13b07     09 0A 0B 0B 
13b0b     0A 09 06 04 | 	byte	$ff, $00, $ff, $01, $02, $04, $05, $08, $09, $0a, $0b, $0b, $0a, $09, $06, $04
13b0f     00 FD FA F9 
13b13     F9 FA FA FA 
13b17     FA F9 F8 F8 
13b1b     F9 FA FB FE | 	byte	$00, $fd, $fa, $f9, $f9, $fa, $fa, $fa, $fa, $f9, $f8, $f8, $f9, $fa, $fb, $fe
13b1f     00 00 00 02 
13b23     03 04 05 07 
13b27     08 0A 0A 0A 
13b2b     09 08 06 03 | 	byte	$00, $00, $00, $02, $03, $04, $05, $07, $08, $0a, $0a, $0a, $09, $08, $06, $03
13b2f     FF FC FA FA 
13b33     FB FB FB FB 
13b37     FB F9 F8 F8 
13b3b     F9 FA FC FE | 	byte	$ff, $fc, $fa, $fa, $fb, $fb, $fb, $fb, $fb, $f9, $f8, $f8, $f9, $fa, $fc, $fe
13b3f     00 00 00 02 
13b43     03 04 06 07 
13b47     08 09 0A 0A 
13b4b     09 07 04 01 | 	byte	$00, $00, $00, $02, $03, $04, $06, $07, $08, $09, $0a, $0a, $09, $07, $04, $01
13b4f     FE FB FA FA 
13b53     FB FB FB FC 
13b57     FB F9 F8 F9 
13b5b     F9 FA FC FE | 	byte	$fe, $fb, $fa, $fa, $fb, $fb, $fb, $fc, $fb, $f9, $f8, $f9, $f9, $fa, $fc, $fe
13b5f     00 00 00 02 
13b63     02 03 05 06 
13b67     07 08 09 09 
13b6b     08 05 04 01 | 	byte	$00, $00, $00, $02, $02, $03, $05, $06, $07, $08, $09, $09, $08, $05, $04, $01
13b6f     FE FB FB FB 
13b73     FB FC FC FD 
13b77     FB F9 F9 FA 
13b7b     FB FB FD FF | 	byte	$fe, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fb, $f9, $f9, $fa, $fb, $fb, $fd, $ff
13b7f     01 01 02 03 
13b83     04 05 05 06 
13b87     07 08 09 08 
13b8b     06 04 02 FF | 	byte	$01, $01, $02, $03, $04, $05, $05, $06, $07, $08, $09, $08, $06, $04, $02, $ff
13b8f     FC FB FB FC 
13b93     FC FC FD FD 
13b97     FB F9 FA FA 
13b9b     FB FC FD FF | 	byte	$fc, $fb, $fb, $fc, $fc, $fc, $fd, $fd, $fb, $f9, $fa, $fa, $fb, $fc, $fd, $ff
13b9f     00 00 01 03 
13ba3     03 04 05 06 
13ba7     07 08 08 07 
13bab     06 03 01 FE | 	byte	$00, $00, $01, $03, $03, $04, $05, $06, $07, $08, $08, $07, $06, $03, $01, $fe
13baf     FC FB FC FC 
13bb3     FC FD FD FD 
13bb7     FA F9 FA FB 
13bbb     FB FC FE 00 | 	byte	$fc, $fb, $fc, $fc, $fc, $fd, $fd, $fd, $fa, $f9, $fa, $fb, $fb, $fc, $fe, $00
13bbf     00 01 02 03 
13bc3     03 04 05 06 
13bc7     07 08 08 07 
13bcb     05 03 01 FE | 	byte	$00, $01, $02, $03, $03, $04, $05, $06, $07, $08, $08, $07, $05, $03, $01, $fe
13bcf     FD FD FD FD 
13bd3     FE FE FE FD 
13bd7     FB FA FB FB 
13bdb     FC FD FE 00 | 	byte	$fd, $fd, $fd, $fd, $fe, $fe, $fe, $fd, $fb, $fa, $fb, $fb, $fc, $fd, $fe, $00
13bdf     01 01 02 03 
13be3     03 04 05 06 
13be7     07 07 07 05 
13beb     03 01 FF FD | 	byte	$01, $01, $02, $03, $03, $04, $05, $06, $07, $07, $07, $05, $03, $01, $ff, $fd
13bef     FD FC FD FD 
13bf3     FE FE FE FC 
13bf7     FA FB FB FB 
13bfb     FC FD FF 00 | 	byte	$fd, $fc, $fd, $fd, $fe, $fe, $fe, $fc, $fa, $fb, $fb, $fb, $fc, $fd, $ff, $00
13bff     00 01 03 03 
13c03     03 03 04 05 
13c07     07 07 06 04 
13c0b     02 01 FE FD | 	byte	$00, $01, $03, $03, $03, $03, $04, $05, $07, $07, $06, $04, $02, $01, $fe, $fd
13c0f     FD FD FE FE 
13c13     FE FF FE FC 
13c17     FB FB FB FC 
13c1b     FC FD FF 00 | 	byte	$fd, $fd, $fe, $fe, $fe, $ff, $fe, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00
13c1f     00 02 03 02 
13c23     03 04 05 06 
13c27     06 06 05 03 
13c2b     01 00 FE FD | 	byte	$00, $02, $03, $02, $03, $04, $05, $06, $06, $06, $05, $03, $01, $00, $fe, $fd
13c2f     FE FE FE FE 
13c33     FE          | 	byte	$fe[5]
13c34     FF FD FC FB 
13c38     FB FB FC FC 
13c3c     FD FF 00 01 
13c40     02 02 02 02 | 	byte	$ff, $fd, $fc, $fb, $fb, $fb, $fc, $fc, $fd, $ff, $00, $01, $02, $02, $02, $02
13c44     03 04 05 06 
13c48     05 04 02 01 
13c4c     00 FF FF FF 
13c50     FE FE FF FF | 	byte	$03, $04, $05, $06, $05, $04, $02, $01, $00, $ff, $ff, $ff, $fe, $fe, $ff, $ff
13c54     FF FD FC FC 
13c58     FC FC FC FD 
13c5c     FF 00 00 01 
13c60     02 03 02 03 | 	byte	$ff, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $ff, $00, $00, $01, $02, $03, $02, $03
13c64     04 05 06 05 
13c68     04 03 01 00 
13c6c     FF FE FE FE 
13c70     FE FF FF FF | 	byte	$04, $05, $06, $05, $04, $03, $01, $00, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff
13c74     FE FD FD FC 
13c78     FC FC FD FD 
13c7c     FE FF FF 00 
13c80     01 01 01 02 | 	byte	$fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $00, $01, $01, $01, $02
13c84     03 04 05 05 
13c88     03 02 01 00 
13c8c     FF FF FF FF 
13c90     FF FF FF FF | 	byte	$03, $04, $05, $05, $03, $02, $01, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
13c94     FD FD FD FC 
13c98     FC FC FC FE 
13c9c     FF 00 00 00 
13ca0     01 02 02 03 | 	byte	$fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00, $01, $02, $02, $03
13ca4     04 05 05 04 
13ca8     03 02 01 00 
13cac     00 00 00 00 
13cb0     00 01 00 FF | 	byte	$04, $05, $05, $04, $03, $02, $01, $00, $00, $00, $00, $00, $00, $01, $00, $ff
13cb4     FF FF FE FD 
13cb8     FD FD FD FF 
13cbc     FF 00 00 01 
13cc0     01 02 02 03 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $00, $00, $01, $01, $02, $02, $03
13cc4     03 04 04 03 
13cc8     01 00 00 00 
13ccc     FF 00 00 FF 
13cd0     00 00 FF FE | 	byte	$03, $04, $04, $03, $01, $00, $00, $00, $ff, $00, $00, $ff, $00, $00, $ff, $fe
13cd4     FE FE FE FD 
13cd8     FD FD FD FF 
13cdc     FF FF 00 01 
13ce0     01 01 02 03 | 	byte	$fe, $fe, $fe, $fd, $fd, $fd, $fd, $ff, $ff, $ff, $00, $01, $01, $01, $02, $03
13ce4     03 03 03 02 
13ce8     01 00 01 00 
13cec     00 00 00 01 
13cf0     01 01 FF FF | 	byte	$03, $03, $03, $02, $01, $00, $01, $00, $00, $00, $00, $01, $01, $01, $ff, $ff
13cf4     FF FF FD FD 
13cf8     FD FD FE FF 
13cfc     FF FF FF 00 
13d00     01 01 02 03 | 	byte	$ff, $ff, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $ff, $ff, $00, $01, $01, $02, $03
13d04     03 03 02 02 
13d08     01 01 01 00 
13d0c     00 00 01 01 
13d10     01 00 FF FF | 	byte	$03, $03, $02, $02, $01, $01, $01, $00, $00, $00, $01, $01, $01, $00, $ff, $ff
13d14     FF FE FD FD 
13d18     FD FD FD FE 
13d1c     FE FE 00 00 
13d20     00 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $00, $00, $00, $00, $01, $02
13d24     02 02 01 01 
13d28     00 01 01 01 
13d2c     01 01 01 01 
13d30     01 00 FF FF | 	byte	$02, $02, $01, $01, $00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $ff
13d34     FF FF FE FD 
13d38     FD FD FE FF 
13d3c     FE FF 00 00 
13d40     01 01 02 02 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $ff, $fe, $ff, $00, $00, $01, $01, $02, $02
13d44     02 02 01 01 
13d48     01 01 01 00 
13d4c     01 01 01 01 
13d50     00 FF 00 FF | 	byte	$02, $02, $01, $01, $01, $01, $01, $00, $01, $01, $01, $01, $00, $ff, $00, $ff
13d54     FF FF FE FD 
13d58     FD FD FE FE 
13d5c     FE FE FF FF 
13d60     00 00 01 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00, $00, $01, $01
13d64     01 01 01 01 
13d68     01 01 01 01 
13d6c     01 01 01 01 | 	byte	$01[12]
13d70     00 FF 00 FF 
13d74     FF FE FE FD 
13d78     FD FE FE FE 
13d7c     FE FE FF FF | 	byte	$00, $ff, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff
13d80     00 00 01 02 
13d84     01 02 02 02 
13d88     02 02 02 02 
13d8c     02 02 02 02 | 	byte	$00, $00, $01, $02, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
13d90     01 00 00 00 
13d94     00 FF FF FF 
13d98     FE FE FE FE 
13d9c     FE FE FF FF | 	byte	$01, $00, $00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff
13da0     00 00 01 01 
13da4     01 01 01 01 
13da8     02 01 01 01 
13dac     01 02 02 01 | 	byte	$00, $00, $01, $01, $01, $01, $01, $01, $02, $01, $01, $01, $01, $02, $02, $01
13db0     00 00 00 00 
13db4     FF FF FE FE 
13db8     FE FE FE FD 
13dbc     FE FE FF FF | 	byte	$00, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $ff, $ff
13dc0     00 00 00 01 
13dc4     01 01 01 01 
13dc8     02 01 01 02 
13dcc     02 02 02 01 | 	byte	$00, $00, $00, $01, $01, $01, $01, $01, $02, $01, $01, $02, $02, $02, $02, $01
13dd0     00 01 00 00 
13dd4     00 FF FE FE 
13dd8     FE FE FE FD 
13ddc     FE FE FE FF | 	byte	$00, $01, $00, $00, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $ff
13de0     00 00 00 01 
13de4     01 01 02 02 
13de8     02 01 02 02 
13dec     02 02 01 01 | 	byte	$00, $00, $00, $01, $01, $01, $02, $02, $02, $01, $02, $02, $02, $02, $01, $01
13df0     01 00 00 00 
13df4     FF FF FE FE 
13df8     FE FE FD FC 
13dfc     FD FE FE FF | 	byte	$01, $00, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fc, $fd, $fe, $fe, $ff
13e00     FF FF FF 00 
13e04     01 01 02 02 
13e08     02 02 02 03 
13e0c     03 02 02 01 | 	byte	$ff, $ff, $ff, $00, $01, $01, $02, $02, $02, $02, $02, $03, $03, $02, $02, $01
13e10     01 01 01 00 
13e14     FF FF FF FE 
13e18     FE FE FD FD 
13e1c     FD FF FF FF | 	byte	$01, $01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $ff, $ff, $ff
13e20     00 00 00 01 
13e24     02 02 02 02 
13e28     02 02 02 02 
13e2c     02 02 00 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $00, $00
13e30     00 01 00 00 
13e34     FF FF FF FE 
13e38     FE FE FC FC 
13e3c     FD FD FE FE | 	byte	$00, $01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fc, $fc, $fd, $fd, $fe, $fe
13e40     FE FF 00 00 
13e44     01 02 02 02 
13e48     02 02 02 02 
13e4c     02 01 01 01 | 	byte	$fe, $ff, $00, $00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
13e50     01 00 00 FF 
13e54     FF FF FE FE 
13e58     FE FD FD FC 
13e5c     FD FE FE FE | 	byte	$01, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fc, $fd, $fe, $fe, $fe
13e60     FF 00 00 01 
13e64     02 03 03 03 
13e68     03 03 03 03 
13e6c     02 02 02 02 | 	byte	$ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02
13e70     02 01 01 00 
13e74     FF 00 FF FE 
13e78     FE FD FC FD 
13e7c     FD FD FE FE | 	byte	$02, $01, $01, $00, $ff, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fd, $fe, $fe
13e80     FF FF 00 01 
13e84     02 02 02 02 
13e88     02 03 02 02 
13e8c     02 01 01 01 | 	byte	$ff, $ff, $00, $01, $02, $02, $02, $02, $02, $03, $02, $02, $02, $01, $01, $01
13e90     01 01 00 FF 
13e94     FF FF FE FE 
13e98     FD FD FC FD 
13e9c     FD FE FE FE | 	byte	$01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fe, $fe, $fe
13ea0     FF 00 01 02 
13ea4     02 02 02 02 
13ea8     03 03 03 03 
13eac     02 01 01 01 | 	byte	$ff, $00, $01, $02, $02, $02, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01
13eb0     01 01 00 00 
13eb4     FF FF FE FD 
13eb8     FD FC FC FC 
13ebc     FD FD FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe
13ec0     FF 00 01 02 
13ec4     03 02 02 03 
13ec8     03 03 03 02 
13ecc     01 01 01 01 | 	byte	$ff, $00, $01, $02, $03, $02, $02, $03, $03, $03, $03, $02, $01, $01, $01, $01
13ed0     01 00 00 FF 
13ed4     FF FE FD FD 
13ed8     FC FC FC FC 
13edc     FD FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $fe
13ee0     FE 00 01 02 
13ee4     02 02 02 03 
13ee8     03 03 03 03 
13eec     02 02 01 01 | 	byte	$fe, $00, $01, $02, $02, $02, $02, $03, $03, $03, $03, $03, $02, $02, $01, $01
13ef0     01 01 00 FF 
13ef4     FF FE FE FD 
13ef8     FD FC FC FD 
13efc     FD FE FE FF | 	byte	$01, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $ff
13f00     00 01 02 02 
13f04     02 03 03 03 
13f08     02 02 02 02 
13f0c     01 01 01 01 | 	byte	$00, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01
13f10     01 00 00 FF 
13f14     FF FE FD FD 
13f18     FD FC FC FC 
13f1c     FC FD FD FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe
13f20     FF 01 01 02 
13f24     02 03 03 03 
13f28     03 03 03 01 
13f2c     01 01 01 01 | 	byte	$ff, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $01, $01, $01, $01, $01
13f30     01 00 FF FF 
13f34     FE FE FD FD 
13f38     FC FC FC FC 
13f3c     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
13f40     00 01 02 03 
13f44     03 03 04 03 
13f48     03 04 03 02 
13f4c     02 02 02 02 | 	byte	$00, $01, $02, $03, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02
13f50     02 01 00 FF 
13f54     FF FE FE FD 
13f58     FD FC FC FD 
13f5c     FD FD FE FF | 	byte	$02, $01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fe, $ff
13f60     00 01 02 02 
13f64     03 03 03 03 
13f68     03 03 02 01 
13f6c     01 01 01 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
13f70     01 00 FF FF 
13f74     FE FE FD FD 
13f78     FD FC FD FD 
13f7c     FD FD FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
13f80     01 01 02 02 
13f84     03 03 03 03 
13f88     03 03 02 01 
13f8c     01 01 02 01 | 	byte	$01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $02, $01
13f90     01 00 FF FF 
13f94     FE FD FD FD 
13f98     FD FC FD FD 
13f9c     FD FE FF 00 | 	byte	$01, $00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $ff, $00
13fa0     01 02 02 03 
13fa4     03 03 03 03 
13fa8     03 03 02 01 
13fac     01 01 01 01 | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01
13fb0     00 FF FF FE 
13fb4     FD FD FD FD 
13fb8     FC FC FC FC 
13fbc     FD FD FE FF | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff
13fc0     00 01 02 02 
13fc4     03 03 03 03 
13fc8     03 02 02 02 
13fcc     02 02 02 01 | 	byte	$00, $01, $02, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01
13fd0     00 FF FF FE 
13fd4     FD FD FD FD 
13fd8     FD FC FC FD 
13fdc     FE FE FF 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fe, $fe, $ff, $01
13fe0     01 02 03 03 
13fe4     03 03 03 03 
13fe8     03 02 01 01 
13fec     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
13ff0     00 FF FF FE 
13ff4     FD FD FD FD 
13ff8     FD FC FC FC 
13ffc     FD FE FF 00 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $ff, $00
14000     01 01 02 03 
14004     03 03 03 03 
14008     03 02 01 01 
1400c     01 01 01 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $01, $01, $00
14010     FF FF FE FD 
14014     FD FD FD FD 
14018     FC FC FC FD 
1401c     FE FE FF 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $fe, $ff, $01
14020     01 02 03 03 
14024     04 03 03 04 
14028     03 02 02 02 
1402c     02 02 02 01 | 	byte	$01, $02, $03, $03, $04, $03, $03, $04, $03, $02, $02, $02, $02, $02, $02, $01
14030     00 FF FF FE 
14034     FE FE FE FD 
14038     FD FD FD FD 
1403c     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
14040     01 02 03 03 
14044     03 03 03 03 
14048     02 02 01 01 
1404c     01 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $01, $01, $01, $00
14050     FF FF FE FD 
14054     FD FD FD FD 
14058     FD FC FD FD 
1405c     FE FF 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01
14060     01 02 03 03 
14064     03 03 03 03 
14068     02 02 02 02 
1406c     02 01 01 00 | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
14070     FF FF FE FD 
14074     FD FD FD FD 
14078     FC FC FD FD 
1407c     FE 00 00 01 | 	byte	$ff, $ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fe, $00, $00, $01
14080     02 03 03 03 
14084     03 03 03 02 
14088     02 02 01 02 
1408c     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $02, $01, $01, $00, $ff
14090     FF FE FD FD 
14094     FD FD FD FC 
14098     FC FC FC FE 
1409c     FF 00 00 00 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fe, $ff, $00, $00, $00
140a0     01 02 03 03 
140a4     03 03 03 03 
140a8     02 02 02 02 
140ac     02 01 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $00, $ff
140b0     FF FE FD FD 
140b4     FD FD FD FD 
140b8     FC FD FD FE 
140bc     FF 00 01 02 | 	byte	$ff, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fd, $fe, $ff, $00, $01, $02
140c0     02 03 03 03 
140c4     03 03 03 02 
140c8     01 02 02 01 
140cc     01 01 00 FF | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $02, $01, $01, $01, $00, $ff
140d0     FE FE FD FD 
140d4     FD FD FD FD 
140d8     FC FD FE FE 
140dc     FF 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $00, $00, $01
140e0     02 03 03 03 
140e4     03 03 03 02 
140e8     01 02 01 01 
140ec     01 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $03, $02, $01, $02, $01, $01, $01, $00, $ff, $fe
140f0     FE FD FD FD 
140f4     FD FD FD FD 
140f8     FC FD FE FF 
140fc     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02
14100     02 03 04 04 
14104     04 04 03 02 
14108     02 02 02 02 
1410c     01 01 00 FF | 	byte	$02, $03, $04, $04, $04, $04, $03, $02, $02, $02, $02, $02, $01, $01, $00, $ff
14110     FE FE FD FD 
14114     FD FD FD FD 
14118     FD FD FE FF 
1411c     00 00 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $00, $00, $01, $02
14120     02 03 03 03 
14124     03 03 02 02 
14128     02 01 01 01 
1412c     00 00 FF FE | 	byte	$02, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $01, $00, $00, $ff, $fe
14130     FE FD FD FD 
14134     FD FD FD FD 
14138     FD FE FF FF 
1413c     00 00 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01, $02
14140     03 03 03 04 
14144     03 03 02 02 
14148     02 02 02 01 
1414c     00 00 FF FE | 	byte	$03, $03, $03, $04, $03, $03, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $fe
14150     FE FD FD FD 
14154     FD FD FD FC 
14158     FD FE FF 00 
1415c     00 01 02 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fd, $fc, $fd, $fe, $ff, $00, $00, $01, $02, $02
14160     03 03 04 04 
14164     03 02 02 02 
14168     02 01 01 01 
1416c     00 FF FE FD | 	byte	$03, $03, $04, $04, $03, $02, $02, $02, $02, $01, $01, $01, $00, $ff, $fe, $fd
14170     FD FD FD FD 
14174     FC FC FC FC 
14178     FD FE FF 00 
1417c     00 01 01 02 | 	byte	$fd, $fd, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $00, $00, $01, $01, $02
14180     02 03 03 03 
14184     03 02 02 02 
14188     02 02 02 01 
1418c     00 FF FF FE | 	byte	$02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $01, $00, $ff, $ff, $fe
14190     FD FD FD FD 
14194     FD FD FD FD | 	byte	$fd[8]
14198     FE FF 00 01 
1419c     01 02 02 03 
141a0     03 03 03 03 
141a4     03 02 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02
141a8     01 01 01 00 
141ac     00 FF FE FE 
141b0     FD FD FD FD 
141b4     FD FD FD FD | 	byte	$01, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fd
141b8     FE FF FF 00 
141bc     00 01 02 02 
141c0     02 03 04 03 
141c4     02 02 02 02 | 	byte	$fe, $ff, $ff, $00, $00, $01, $02, $02, $02, $03, $04, $03, $02, $02, $02, $02
141c8     01 01 00 00 
141cc     FF FF FE FD 
141d0     FC FC FC FC 
141d4     FD FD FD FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe
141d8     FE FF 00 01 
141dc     01 02 03 03 
141e0     04 04 04 03 
141e4     03 03 02 02 | 	byte	$fe, $ff, $00, $01, $01, $02, $03, $03, $04, $04, $04, $03, $03, $03, $02, $02
141e8     02 01 01 00 
141ec     00 FF FE FE 
141f0     FD FD FD FD 
141f4     FD FD FD FE | 	byte	$02, $01, $01, $00, $00, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe
141f8     FF FF 00 00 
141fc     01 02 03 03 
14200     03 03 03 02 
14204     02 02 02 01 | 	byte	$ff, $ff, $00, $00, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $01
14208     01 00 00 00 
1420c     FF FE FD FD 
14210     FC FC FD FD 
14214     FD FD FD FE | 	byte	$01, $00, $00, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $fd, $fe
14218     FF 00 01 01 
1421c     01 02 03 03 
14220     03 03 03 02 
14224     02 02 02 02 | 	byte	$ff, $00, $01, $01, $01, $02, $03, $03, $03, $03, $03, $02, $02, $02, $02, $02
14228     02 01 00 00 
1422c     FF FF FE FD 
14230     FD FC FD FD 
14234     FD FD FE FF | 	byte	$02, $01, $00, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $ff
14238     00 00 01 01 
1423c     02 03 03 03 
14240     04 03 02 02 
14244     02 02 02 01 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01
14248     01 00 00 FF 
1424c     FF FD FD FC 
14250     FD FC FC FC 
14254     FC FD FE FE | 	byte	$01, $00, $00, $ff, $ff, $fd, $fd, $fc, $fd, $fc, $fc, $fc, $fc, $fd, $fe, $fe
14258     FF 00 01 01 
1425c     02 02 02 03 
14260     03 02 02 02 
14264     02 02 02 01 | 	byte	$ff, $00, $01, $01, $02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $01
14268     01 01 01 00 
1426c     FF FE FD FD 
14270     FC FC FD FD 
14274     FD FD FF FF | 	byte	$01, $01, $01, $00, $ff, $fe, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $ff
14278     00 01 01 02 
1427c     02 03 03 04 
14280     03 02 02 02 
14284     02 02 01 01 | 	byte	$00, $01, $01, $02, $02, $03, $03, $04, $03, $02, $02, $02, $02, $02, $01, $01
14288     00 00 FF FF 
1428c     FE FD FC FC 
14290     FC FD FD FD 
14294     FD FE FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $ff
14298     00 00 01 01 
1429c     02 03 03 03 
142a0     03 02 02 02 
142a4     02 01 01 00 | 	byte	$00, $00, $01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $01, $01, $00
142a8     00 00 FF FF 
142ac     FE FD FC FC 
142b0     FC FC FD FD 
142b4     FD FE FF 00 | 	byte	$00, $00, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $00
142b8     01 01 01 02 
142bc     03 03 04 03 
142c0     03 02 03 03 
142c4     03 02 02 01 | 	byte	$01, $01, $01, $02, $03, $03, $04, $03, $03, $02, $03, $03, $03, $02, $02, $01
142c8     01 00 00 FF 
142cc     FE FE FD FC 
142d0     FD FD FE FE 
142d4     FE FF 00 00 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fd, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00
142d8     01 01 02 02 
142dc     02 03 03 03 
142e0     02 02 02 02 
142e4     02 01 01 00 | 	byte	$01, $01, $02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
142e8     FF FF FF FE 
142ec     FD FC FC FC 
142f0     FD FD FD FD 
142f4     FE FF 00 01 | 	byte	$ff, $ff, $ff, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $00, $01
142f8     01 01 02 02 
142fc     03 03 02 02 
14300     02 02 02 02 
14304     02 01 01 00 | 	byte	$01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00
14308     00 FF FF FE 
1430c     FD FD FC FD 
14310     FD FD FD FE 
14314     FE FF 00 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $00, $01
14318     01 01 02 03 
1431c     03 03 03 02 
14320     02 02 02 02 
14324     01 01 00 00 | 	byte	$01, $01, $02, $03, $03, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00, $00
14328     00 FF FE FE 
1432c     FD FC FC FC 
14330     FD FD FD FE 
14334     FE FF 00 00 | 	byte	$00, $ff, $fe, $fe, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $ff, $00, $00
14338     01 01 02 03 
1433c     02 02 02 02 
14340     02 02 02 02 
14344     01 01 01 00 | 	byte	$01, $01, $02, $03, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00
14348     00 FF FF FE 
1434c     FD FC FC FD 
14350     FD FE FE FE 
14354     FF 00 01 01 | 	byte	$00, $ff, $ff, $fe, $fd, $fc, $fc, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
14358     01 02 03 03 
1435c     03 03 03 03 
14360     02 02 02 01 
14364     01 00 00 FF | 	byte	$01, $02, $03, $03, $03, $03, $03, $03, $02, $02, $02, $01, $01, $00, $00, $ff
14368     FF FE FE FD 
1436c     FD FC FD FD 
14370     FD FE FE FE 
14374     FF 00 01 01 | 	byte	$ff, $fe, $fe, $fd, $fd, $fc, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $01, $01
14378     01 02 02 02 
1437c     02 02 02 02 
14380     02 02 01 01 
14384     01 00 00 FF | 	byte	$01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $00, $00, $ff
14388     FF FE FD FD 
1438c     FC FC FC FD 
14390     FD FD FE FF 
14394     FF 00 00 01 | 	byte	$ff, $fe, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01
14398     02 02 02 03 
1439c     03 02 02 02 
143a0     02 02 02 02 
143a4     01 01 00 00 | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00
143a8     FF FF FE FE 
143ac     FD FD FD FE 
143b0     FE FE FF FF 
143b4     00 01 01 01 | 	byte	$ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $01, $01, $01
143b8     02 02 03 03 
143bc     03 02 02 02 
143c0     02 01 01 01 
143c4     01 00 FF FF | 	byte	$02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff
143c8     FE FE FD FD 
143cc     FD FD FD FE 
143d0     FE FE FF 00 
143d4     00 01 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
143d8     02 02 03 02 
143dc     02 02 02 02 
143e0     02 01 01 00 
143e4     01 00 FF 00 | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $02, $01, $01, $00, $01, $00, $ff, $00
143e8     FF FE FE FD 
143ec     FD FD FE FE 
143f0     FE FE FF 00 
143f4     00 01 01 02 | 	byte	$ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $00, $00, $01, $01, $02
143f8     02 02 03 02 
143fc     02 02 02 02 
14400     01 01 01 01 
14404     00 FF FF FF | 	byte	$02, $02, $03, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $ff, $ff, $ff
14408     FE FE FD FD 
1440c     FD FD FD FE 
14410     FE FE FF FF 
14414     00 00 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $00, $00, $01
14418     02 02 02 02 
1441c     02          | 	byte	$02[5]
1441d     01 01 01 01 
14421     01 01       | 	byte	$01[6]
14423     00 00 00 FF 
14427     00 FF FF FE 
1442b     FD FD FE FE 
1442f     FE FE FF FF | 	byte	$00, $00, $00, $ff, $00, $ff, $ff, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff
14433     00 01 01 01 
14437     02 02 03 03 
1443b     02 02 02 02 
1443f     02 01 01 00 | 	byte	$00, $01, $01, $01, $02, $02, $03, $03, $02, $02, $02, $02, $02, $01, $01, $00
14443     00 FF FF FF 
14447     FE FE FE FD 
1444b     FD FE FE FE 
1444f     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $ff, $ff
14453     00 00 00 01 
14457     02 02 02 02 
1445b     01 02 01 01 
1445f     01 01 01 00 | 	byte	$00, $00, $00, $01, $02, $02, $02, $02, $01, $02, $01, $01, $01, $01, $01, $00
14463     00 FF FF FF 
14467     FE FE FD FD 
1446b     FD FE FE FE 
1446f     FE FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $ff, $00
14473     00 00 01 01 
14477     02 02 02 02 
1447b     02 02 02 02 
1447f     02 01 01 01 | 	byte	$00, $00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
14483     00 01 00 FF 
14487     FF FF FF FE 
1448b     FE FE FF FF 
1448f     FF FF 00 00 | 	byte	$00, $01, $00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $00, $00
14493     00 01 01 02 
14497     02 02 02 02 
1449b     02 02 02 01 
1449f     01 00 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00
144a3     00 FF FF FF 
144a7     FE FE FE FE 
144ab     FE FE FF FF 
144af     FF FF FF 00 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00
144b3     00 01 01 02 
144b7     02 02 02 01 
144bb     01 02 02 01 
144bf     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $01, $01, $02, $02, $01, $01, $01, $00, $00
144c3     00 FF FF FF 
144c7     FF FE FE FE 
144cb     FE FF FF FF 
144cf     FF FF 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
144d3     00 01 01 02 
144d7     02 02 02 02 
144db     02 02 01 01 
144df     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $00, $00
144e3     00 FF FF FF 
144e7     FF FE FE FE 
144eb     FE FE FE FF 
144ef     FF FF FF FF | 	byte	$00, $ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff
144f3     00 00 01 01 
144f7     01 02 02 02 
144fb     01 01 00 00 
144ff     00 00 00 00 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $01, $01, $00, $00, $00, $00, $00, $00
14503     FF 00 FF FF 
14507     FF FF FF FE 
1450b     FE FF FF FF 
1450f     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
14513     00 01 02 02 
14517     02 02 02 02 
1451b     02 02 01 01 
1451f     00 00 00 FF | 	byte	$00, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00, $00, $00, $ff
14523     FF FF FF FF 
14527     FE FE FE FE 
1452b     FF FF FF FF 
1452f     FF FF FF 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
14533     00 01 01 01 
14537     01 01 01 01 
1453b     01 00 00 00 
1453f     00 00 00 FF | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00, $00, $ff
14543     FF FF FF FF 
14547     FE FE FE FE 
1454b     FE FF FF FF 
1454f     FF FF 00 00 | 	byte	$ff, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $00, $00
14553     00 01 01 02 
14557     02 01 01 01 
1455b     01 01 01 01 
1455f     01 01 00 00 | 	byte	$00, $01, $01, $02, $02, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00
14563     00 00 00 00 
14567     00          | 	byte	$00[5]
14568     FF FF FF FF 
1456c     00 00 FF 00 
14570     00 00 00 01 
14574     01 01 02 01 | 	byte	$ff, $ff, $ff, $ff, $00, $00, $ff, $00, $00, $00, $00, $01, $01, $01, $02, $01
14578     01 01 01 01 
1457c     01          | 	byte	$01[5]
1457d     00 00 00 00 
14581     00          | 	byte	$00[5]
14582     FF 00 FF FF 
14586     FF FE FE FE 
1458a     FF FF FF FF 
1458e     FF FF 00 00 | 	byte	$ff, $00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
14592     00 01 01 01 
14596     01 01 01 01 
1459a     01 01 01 00 
1459e     00 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00
145a2     FF 00 00 FF 
145a6     00 FF FF FF 
145aa     FF FF FF FF 
145ae     FF FF 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00
145b2     00 01 01 01 
145b6     01 01 01 01 
145ba     01 01 01 01 
145be     01 00 00 00 | 	byte	$00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00
145c2     FF 00 FF FF 
145c6     FF FF FF FF 
145ca     FF FF FF FF 
145ce     FF FF FF FF | 	byte	$ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
145d2     00 00 00 01 
145d6     00 00 01 01 
145da     01 00 00 00 
145de     00 00 00 00 | 	byte	$00, $00, $00, $01, $00, $00, $01, $01, $01, $00, $00, $00, $00, $00, $00, $00
145e2     00 00 00 00 
145e6     00 00 00 00 | 	byte	$00[8]
145ea     FF 00 00 FF 
145ee     00 FF 00 00 
145f2     00 01 01 01 
145f6     00 00 00 00 | 	byte	$ff, $00, $00, $ff, $00, $ff, $00, $00, $00, $01, $01, $01, $00, $00, $00, $00
145fa     7F 7F 7F 7F 
      ...             
1461a     7F 7F 7F 7F 
1461e     7F          | 	byte	$7f[37]
1461f     74 5D 79 72 
14623     4B 54 49 3B 
14627     44 38 1C 25 
1462b     27 1A 2F 28 | 	byte	$74, $5d, $79, $72, $4b, $54, $49, $3b, $44, $38, $1c, $25, $27, $1a, $2f, $28
1462f     22 31 18 1E 
14633     2B 35 32 24 
14637     34 24 18 36 
1463b     24 13 2D 2E | 	byte	$22, $31, $18, $1e, $2b, $35, $32, $24, $34, $24, $18, $36, $24, $13, $2d, $2e
1463f     21 25 1D 0E 
14643     29 28 0E 0A 
14647     08 FB 01 09 
1464b     12 ED F1 F7 | 	byte	$21, $25, $1d, $0e, $29, $28, $0e, $0a, $08, $fb, $01, $09, $12, $ed, $f1, $f7
1464f     EA EA EC D6 
14653     DD E5 DE DD 
14657     CA C5 D0 C8 
1465b     B6 BF C2 C3 | 	byte	$ea, $ea, $ec, $d6, $dd, $e5, $de, $dd, $ca, $c5, $d0, $c8, $b6, $bf, $c2, $c3
1465f     BC B2 CB B4 
14663     B1 B9 9B A7 
14667     A0 8B 8F 8D 
1466b     90 95 88 81 | 	byte	$bc, $b2, $cb, $b4, $b1, $b9, $9b, $a7, $a0, $8b, $8f, $8d, $90, $95, $88, $81
1466f     81 83 81 81 
14673     81 81 81 81 
14677     87 81 8B 95 
1467b     81 8B 91 87 | 	byte	$81, $83, $81, $81, $81, $81, $81, $81, $87, $81, $8b, $95, $81, $8b, $91, $87
1467f     A5 A2 88 87 
14683     AF 94 8F 9C 
14687     88 91 96 93 
1468b     97 99 AA 9B | 	byte	$a5, $a2, $88, $87, $af, $94, $8f, $9c, $88, $91, $96, $93, $97, $99, $aa, $9b
1468f     99 AF A4 AF 
14693     B6 AC B3 CE 
14697     C0 BE D9 CD 
1469b     D7 DC CC CF | 	byte	$99, $af, $a4, $af, $b6, $ac, $b3, $ce, $c0, $be, $d9, $cd, $d7, $dc, $cc, $cf
1469f     E8 D2 D6 DB 
146a3     D8 D0 E7 E2 
146a7     DC E5 F2 EA 
146ab     F3 07 FC 09 | 	byte	$e8, $d2, $d6, $db, $d8, $d0, $e7, $e2, $dc, $e5, $f2, $ea, $f3, $07, $fc, $09
146af     17 11 13 20 
146b3     24 2F 3F 34 
146b7     3F 63 4C 57 
146bb     74 6D 7B 7F | 	byte	$17, $11, $13, $20, $24, $2f, $3f, $34, $3f, $63, $4c, $57, $74, $6d, $7b, $7f
146bf     77 7D 7F 7F 
146c3     7F 7F 7F 7F 
146c7     7F 7F 7F 7F 
146cb     7F 7F 7F 7F | 	byte	$77, $7d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
146cf     7F 7F 7F 7F 
146d3     7F 7F 7F 7F 
146d7     7F 7F 7F 7F 
146db     7F 7F 7F 7F 
146df     7F 7F 7F    | 	byte	$7f[19]
146e2     68 6E 6F 63 
146e6     61 5C 46 4A 
146ea     49 2E 34 3A 
146ee     1F 25 1C 05 | 	byte	$68, $6e, $6f, $63, $61, $5c, $46, $4a, $49, $2e, $34, $3a, $1f, $25, $1c, $05
146f2     13 19 02 04 
146f6     F9 F2 F4 EB 
146fa     E0 D3 DA D5 
146fe     B8 BA B2 AB | 	byte	$13, $19, $02, $04, $f9, $f2, $f4, $eb, $e0, $d3, $da, $d5, $b8, $ba, $b2, $ab
14702     B6 98 87 89 
14706     83 81 81 81 
1470a     81 81 81 81 
1470e     81 81 81 81 | 	byte	$b6, $98, $87, $89, $83, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81, $81
14712     81 81 81 81 
      ...             
1473e     81 81 81 81 
14742     81 81 81 81 | 	byte	$81[52]
14746     87 90 8B 9B 
1474a     A4 A7 A9 B7 
1474e     B8 C3 D4 CE 
14752     D2 E7 E4 EB | 	byte	$87, $90, $8b, $9b, $a4, $a7, $a9, $b7, $b8, $c3, $d4, $ce, $d2, $e7, $e4, $eb
14756     FC FB 04 10 
1475a     18 13 1F 24 
1475e     27 3B 2D 2F 
14762     43 3F 46 4A | 	byte	$fc, $fb, $04, $10, $18, $13, $1f, $24, $27, $3b, $2d, $2f, $43, $3f, $46, $4a
14766     49 4C 52 55 
1476a     4B 51 5F 5D 
1476e     52 55 5B 5C 
14772     65 5A 4F 63 | 	byte	$49, $4c, $52, $55, $4b, $51, $5f, $5d, $52, $55, $5b, $5c, $65, $5a, $4f, $63
14776     55 4F 53 4C 
1477a     53 53 4B 3E 
1477e     45 41 41 45 
14782     3F 3F 3B 37 | 	byte	$55, $4f, $53, $4c, $53, $53, $4b, $3e, $45, $41, $41, $45, $3f, $3f, $3b, $37
14786     36 3C 48 2D 
1478a     2B 37 29 25 
1478e     28 21 22 24 
14792     18 10 19 0A | 	byte	$36, $3c, $48, $2d, $2b, $37, $29, $25, $28, $21, $22, $24, $18, $10, $19, $0a
14796     11 12 00 0A 
1479a     08 FA 01 00 
1479e     FA FF FC F5 
147a2     F7 F7 F2 F6 | 	byte	$11, $12, $00, $0a, $08, $fa, $01, $00, $fa, $ff, $fc, $f5, $f7, $f7, $f2, $f6
147a6     F5 F0 EE EF 
147aa     EF E9 EC E2 
147ae     E2 DF DF D9 
147b2     DF DB CF DB | 	byte	$f5, $f0, $ee, $ef, $ef, $e9, $ec, $e2, $e2, $df, $df, $d9, $df, $db, $cf, $db
147b6     DA CC D5 D0 
147ba     D4 D8 D0 D4 
147be     D6 DD E0 DF 
147c2     E2 E6 E8 E8 | 	byte	$da, $cc, $d5, $d0, $d4, $d8, $d0, $d4, $d6, $dd, $e0, $df, $e2, $e6, $e8, $e8
147c6     F0 F7 FC 03 
147ca     FB 01 12 0E 
147ce     15 11 18 21 
147d2     20 1C 29 2E | 	byte	$f0, $f7, $fc, $03, $fb, $01, $12, $0e, $15, $11, $18, $21, $20, $1c, $29, $2e
147d6     29 33 2F 2F 
147da     3D 3F 3A 3D 
147de     4A 49 4E 53 
147e2     53 57 66 60 | 	byte	$29, $33, $2f, $2f, $3d, $3f, $3a, $3d, $4a, $49, $4e, $53, $53, $57, $66, $60
147e6     5F 66 66 67 
147ea     72 6E 6D 77 
147ee     6F 6E 7E 74 
147f2     73 7F 76 74 | 	byte	$5f, $66, $66, $67, $72, $6e, $6d, $77, $6f, $6e, $7e, $74, $73, $7f, $76, $74
147f6     7C 7B 7A 7A 
147fa     78 7A 7F 7E 
147fe     75 7B 7F 7E 
14802     7F 79 7F 7D | 	byte	$7c, $7b, $7a, $7a, $78, $7a, $7f, $7e, $75, $7b, $7f, $7e, $7f, $79, $7f, $7d
14806     78 77 76 79 
1480a     6D 6D 70 6C 
1480e     6D 61 61 5D 
14812     5F 5B 53 54 | 	byte	$78, $77, $76, $79, $6d, $6d, $70, $6c, $6d, $61, $61, $5d, $5f, $5b, $53, $54
14816     51 4A 4A 41 
1481a     3C 35 38 31 
1481e     22 2A 23 10 
14822     15 0C 05 07 | 	byte	$51, $4a, $4a, $41, $3c, $35, $38, $31, $22, $2a, $23, $10, $15, $0c, $05, $07
14826     00 F0 F6 E8 
1482a     E1 E8 DE D9 
1482e     D8 D0 CB C9 
14832     C7 BD B6 B1 | 	byte	$00, $f0, $f6, $e8, $e1, $e8, $de, $d9, $d8, $d0, $cb, $c9, $c7, $bd, $b6, $b1
14836     A9 A7 A6 98 
1483a     90 95 8E 8A 
1483e     87 81 82 82 
14842     81 81 82 81 | 	byte	$a9, $a7, $a6, $98, $90, $95, $8e, $8a, $87, $81, $82, $82, $81, $81, $82, $81
14846     81 81 81 81 
1484a     81 81 81 81 
1484e     81          | 	byte	$81[9]
1484f     82 83 82 82 
14853     84 85 82 89 
14857     88 86 87 89 
1485b     88 90 92 8D | 	byte	$82, $83, $82, $82, $84, $85, $82, $89, $88, $86, $87, $89, $88, $90, $92, $8d
1485f     97 9A 92 9F 
14863     9F 9C A7 A4 
14867     9C AB AD AA 
1486b     B2 B0 AB B7 | 	byte	$97, $9a, $92, $9f, $9f, $9c, $a7, $a4, $9c, $ab, $ad, $aa, $b2, $b0, $ab, $b7
1486f     B7 B5 BA BB 
14873     BC BC BD C2 
14877     C0 C5 BE C3 
1487b     C5 C4 C5 C9 | 	byte	$b7, $b5, $ba, $bb, $bc, $bc, $bd, $c2, $c0, $c5, $be, $c3, $c5, $c4, $c5, $c9
1487f     C2 C3 CB C6 
14883     C7 CE C9 C7 
14887     C6 D2 D2 CF 
1488b     D1 DD D8 DB | 	byte	$c2, $c3, $cb, $c6, $c7, $ce, $c9, $c7, $c6, $d2, $d2, $cf, $d1, $dd, $d8, $db
1488f     DB DB E1 E9 
14893     EA E9 E2 E6 
14897     F0 EE E7 F1 
1489b     F5 F7 FD F5 | 	byte	$db, $db, $e1, $e9, $ea, $e9, $e2, $e6, $f0, $ee, $e7, $f1, $f5, $f7, $fd, $f5
1489f     F9 09 04 05 
148a3     0E 0E 15 20 
148a7     17 1C 1F 21 
148ab     2B 32 2E 33 | 	byte	$f9, $09, $04, $05, $0e, $0e, $15, $20, $17, $1c, $1f, $21, $2b, $32, $2e, $33
148af     31 33 3C 37 
148b3     3E 37 34 42 
148b7     3C 37 3F 38 
148bb     38 38 35 35 | 	byte	$31, $33, $3c, $37, $3e, $37, $34, $42, $3c, $37, $3f, $38, $38, $38, $35, $35
148bf     36 34 35 36 
148c3     33 38 32 33 
148c7     37 37 34 3B 
148cb     32 37 3B 3E | 	byte	$36, $34, $35, $36, $33, $38, $32, $33, $37, $37, $34, $3b, $32, $37, $3b, $3e
148cf     3C 3A 37 3B 
148d3     39 37 45 3D 
148d7     3C 3B 33 3E 
148db     40 3B 3F 3C | 	byte	$3c, $3a, $37, $3b, $39, $37, $45, $3d, $3c, $3b, $33, $3e, $40, $3b, $3f, $3c
148df     38 40 40 44 
148e3     48 40 3D 4E 
148e7     48 4A 4E 44 
148eb     47 50 46 49 | 	byte	$38, $40, $40, $44, $48, $40, $3d, $4e, $48, $4a, $4e, $44, $47, $50, $46, $49
148ef     49 45 46 46 
148f3     3D 3B 43 42 
148f7     38 38 33 2F 
148fb     31 36 24 2A | 	byte	$49, $45, $46, $46, $3d, $3b, $43, $42, $38, $38, $33, $2f, $31, $36, $24, $2a
148ff     27 1F 20 1C 
14903     12 1E 13 0D 
14907     16 0D 06 09 
1490b     08 06 01 01 | 	byte	$27, $1f, $20, $1c, $12, $1e, $13, $0d, $16, $0d, $06, $09, $08, $06, $01, $01
1490f     01 01 FF FC 
14913     FE 01 FB F8 
14917     00 FE FD 01 
1491b     F8 FA 00 F8 | 	byte	$01, $01, $ff, $fc, $fe, $01, $fb, $f8, $00, $fe, $fd, $01, $f8, $fa, $00, $f8
1491f     FF 02 FB 02 
14923     03 07 04 05 
14927     0A 08 0E 0C 
1492b     0E 0F 0C 16 | 	byte	$ff, $02, $fb, $02, $03, $07, $04, $05, $0a, $08, $0e, $0c, $0e, $0f, $0c, $16
1492f     12 10 0A 0F 
14933     0E 0B 0D 01 
14937     03 04 FB FB 
1493b     F3 F1 F2 EB | 	byte	$12, $10, $0a, $0f, $0e, $0b, $0d, $01, $03, $04, $fb, $fb, $f3, $f1, $f2, $eb
1493f     E7 E5 DF DC 
14943     D6 E1 DA D5 
14947     D5 D1 CD D0 
1494b     D0 C9 CB D0 | 	byte	$e7, $e5, $df, $dc, $d6, $e1, $da, $d5, $d5, $d1, $cd, $d0, $d0, $c9, $cb, $d0
1494f     C7 C7 C9 C3 
14953     C8 C8 C0 BE 
14957     C5 C4 C4 C0 
1495b     C4 CC C8 C7 | 	byte	$c7, $c7, $c9, $c3, $c8, $c8, $c0, $be, $c5, $c4, $c4, $c0, $c4, $cc, $c8, $c7
1495f     CF D3 D7 DC 
14963     D2 DD E3 EB 
14967     EC EE F5 FD 
1496b     FD 00 01 01 | 	byte	$cf, $d3, $d7, $dc, $d2, $dd, $e3, $eb, $ec, $ee, $f5, $fd, $fd, $00, $01, $01
1496f     0E 0B 01 0A 
14973     10 09 0B 11 
14977     0C 07 10 0B 
1497b     0A 16 11 10 | 	byte	$0e, $0b, $01, $0a, $10, $09, $0b, $11, $0c, $07, $10, $0b, $0a, $16, $11, $10
1497f     10 08 0B 19 
14983     12 0C 11 13 
14987     0B 0E 08 0B 
1498b     11 0D 03 06 | 	byte	$10, $08, $0b, $19, $12, $0c, $11, $13, $0b, $0e, $08, $0b, $11, $0d, $03, $06
1498f     04 FE 08 02 
14993     F1 F6 00 FD 
14997     FB F9 F1 F7 
1499b     01 F0 F4 FC | 	byte	$04, $fe, $08, $02, $f1, $f6, $00, $fd, $fb, $f9, $f1, $f7, $01, $f0, $f4, $fc
1499f     F7 F5 FA F6 
149a3     F4 F2 EF F7 
149a7     EF ED EB E6 
149ab     DF E1 D6 DC | 	byte	$f7, $f5, $fa, $f6, $f4, $f2, $ef, $f7, $ef, $ed, $eb, $e6, $df, $e1, $d6, $dc
149af     D4 CB CE C6 
149b3     C9 CB C2 C1 
149b7     C3 BE BF BA 
149bb     BB BA B8 BB | 	byte	$d4, $cb, $ce, $c6, $c9, $cb, $c2, $c1, $c3, $be, $bf, $ba, $bb, $ba, $b8, $bb
149bf     B8 B8 C1 C0 
149c3     B9 BF BA B4 
149c7     C3 C2 BF CB 
149cb     CA C4 CA CE | 	byte	$b8, $b8, $c1, $c0, $b9, $bf, $ba, $b4, $c3, $c2, $bf, $cb, $ca, $c4, $ca, $ce
149cf     C9 CD DB D9 
149d3     DA DF DE E9 
149d7     ED E2 EB F7 
149db     F7 FD 06 FC | 	byte	$c9, $cd, $db, $d9, $da, $df, $de, $e9, $ed, $e2, $eb, $f7, $f7, $fd, $06, $fc
149df     06 16 11 17 
149e3     1F 1D 29 2A 
149e7     27 2C 31 30 
149eb     31 37 38 3D | 	byte	$06, $16, $11, $17, $1f, $1d, $29, $2a, $27, $2c, $31, $30, $31, $37, $38, $3d
149ef     3E 37 42 46 
149f3     3E 3A 48 4B 
149f7     47 49 47 4D 
149fb     53 54 55 51 | 	byte	$3e, $37, $42, $46, $3e, $3a, $48, $4b, $47, $49, $47, $4d, $53, $54, $55, $51
149ff     50 59 5D 56 
14a03     4E 59 54 4A 
14a07     4B 4A 4F 4F 
14a0b     44 43 41 43 | 	byte	$50, $59, $5d, $56, $4e, $59, $54, $4a, $4b, $4a, $4f, $4f, $44, $43, $41, $43
14a0f     44 40 40 40 
14a13     38 3C 3A 36 
14a17     30 30 32 2D 
14a1b     24 23 24 19 | 	byte	$44, $40, $40, $40, $38, $3c, $3a, $36, $30, $30, $32, $2d, $24, $23, $24, $19
14a1f     18 18 08 07 
14a23     03 00 FD F1 
14a27     EA EC EB E4 
14a2b     DB DF DA D2 | 	byte	$18, $18, $08, $07, $03, $00, $fd, $f1, $ea, $ec, $eb, $e4, $db, $df, $da, $d2
14a2f     D7 C9 C3 C1 
14a33     BC BC B9 AF 
14a37     AB AE B0 A1 
14a3b     A6 AB A4 A1 | 	byte	$d7, $c9, $c3, $c1, $bc, $bc, $b9, $af, $ab, $ae, $b0, $a1, $a6, $ab, $a4, $a1
14a3f     9E 9C 9E 9F 
14a43     9B 9D 99 A3 
14a47     A6 A2 A6 AB 
14a4b     AB B3 B1 AC | 	byte	$9e, $9c, $9e, $9f, $9b, $9d, $99, $a3, $a6, $a2, $a6, $ab, $ab, $b3, $b1, $ac
14a4f     BA C2 C4 BE 
14a53     C9 D2 D1 CE 
14a57     D9 DC DE E9 
14a5b     E0 E0 E9 EA | 	byte	$ba, $c2, $c4, $be, $c9, $d2, $d1, $ce, $d9, $dc, $de, $e9, $e0, $e0, $e9, $ea
14a5f     F4 F5 F0 F5 
14a63     F9 FE 01 07 
14a67     0A 0B 0D 11 
14a6b     15 19 25 1E | 	byte	$f4, $f5, $f0, $f5, $f9, $fe, $01, $07, $0a, $0b, $0d, $11, $15, $19, $25, $1e
14a6f     25 2F 29 2B 
14a73     2F 33 3A 3F 
14a77     3B 3C 41 45 
14a7b     43 47 47 4A | 	byte	$25, $2f, $29, $2b, $2f, $33, $3a, $3f, $3b, $3c, $41, $45, $43, $47, $47, $4a
14a7f     4E 57 51 53 
14a83     59 55 62 6A 
14a87     5A 63 6D 69 
14a8b     6B 72 6E 70 | 	byte	$4e, $57, $51, $53, $59, $55, $62, $6a, $5a, $63, $6d, $69, $6b, $72, $6e, $70
14a8f     6C 70 6F 70 
14a93     6D 6D 6E 6B 
14a97     69 69 69 5E 
14a9b     67 68 5F 63 | 	byte	$6c, $70, $6f, $70, $6d, $6d, $6e, $6b, $69, $69, $69, $5e, $67, $68, $5f, $63
14a9f     60 55 62 56 
14aa3     4E 52 4B 48 
14aa7     42 41 41 36 
14aab     35 37 31 2E | 	byte	$60, $55, $62, $56, $4e, $52, $4b, $48, $42, $41, $41, $36, $35, $37, $31, $2e
14aaf     25 1F 20 1D 
14ab3     17 13 10 10 
14ab7     08 01 02 06 
14abb     FC FD F4 E9 | 	byte	$25, $1f, $20, $1d, $17, $13, $10, $10, $08, $01, $02, $06, $fc, $fd, $f4, $e9
14abf     F2 EC E5 E0 
14ac3     D2 D9 D6 D2 
14ac7     CF CD CC CA 
14acb     C7 C9 C7 C7 | 	byte	$f2, $ec, $e5, $e0, $d2, $d9, $d6, $d2, $cf, $cd, $cc, $ca, $c7, $c9, $c7, $c7
14acf     C9 CA C7 CC 
14ad3     CA CB CE CC 
14ad7     CC CE CE CD 
14adb     D0 CB CB CC | 	byte	$c9, $ca, $c7, $cc, $ca, $cb, $ce, $cc, $cc, $ce, $ce, $cd, $d0, $cb, $cb, $cc
14adf     C9 D0 CC C6 
14ae3     CB CA C9 D0 
14ae7     CF CD CD CD 
14aeb     D2 D2 CB CF | 	byte	$c9, $d0, $cc, $c6, $cb, $ca, $c9, $d0, $cf, $cd, $cd, $cd, $d2, $d2, $cb, $cf
14aef     D1 CA D2 D0 
14af3     CE D5 D3 D3 
14af7     D4 CC CF D3 
14afb     D1 D0 D0 CC | 	byte	$d1, $ca, $d2, $d0, $ce, $d5, $d3, $d3, $d4, $cc, $cf, $d3, $d1, $d0, $d0, $cc
14aff     CE CA CC CA 
14b03     CD D0 C7 CF 
14b07     CF C9 C6 CE 
14b0b     CD D0 CF C9 | 	byte	$ce, $ca, $cc, $ca, $cd, $d0, $c7, $cf, $cf, $c9, $c6, $ce, $cd, $d0, $cf, $c9
14b0f     CC D8 D1 D1 
14b13     D2 D1 D7 DD 
14b17     D8 D7 DA DD 
14b1b     D4 D8 D3 D5 | 	byte	$cc, $d8, $d1, $d1, $d2, $d1, $d7, $dd, $d8, $d7, $da, $dd, $d4, $d8, $d3, $d5
14b1f     DD D4 C9 CF 
14b23     D3 D1 D0 D0 
14b27     CF D0 D0 CF 
14b2b     D2 D6 D5 D5 | 	byte	$dd, $d4, $c9, $cf, $d3, $d1, $d0, $d0, $cf, $d0, $d0, $cf, $d2, $d6, $d5, $d5
14b2f     DA D5 D7 DF 
14b33     DD DD E3 DD 
14b37     E2 E7 DB DF 
14b3b     E6 DE DB DD | 	byte	$da, $d5, $d7, $df, $dd, $dd, $e3, $dd, $e2, $e7, $db, $df, $e6, $de, $db, $dd
14b3f     DD DD DD DE 
14b43     E0 DB E1 E0 
14b47     E3 E6 E4 E8 
14b4b     EA ED F1 F2 | 	byte	$dd, $dd, $dd, $de, $e0, $db, $e1, $e0, $e3, $e6, $e4, $e8, $ea, $ed, $f1, $f2
14b4f     F2 F8 F8 F8 
14b53     FE 00 00 0C 
14b57     0A 0C 0D 0F 
14b5b     17 16 14 19 | 	byte	$f2, $f8, $f8, $f8, $fe, $00, $00, $0c, $0a, $0c, $0d, $0f, $17, $16, $14, $19
14b5f     1A 1F 21 1E 
14b63     23 29 2A 2B 
14b67     25 2D 36 2F 
14b6b     32 33 32 3A | 	byte	$1a, $1f, $21, $1e, $23, $29, $2a, $2b, $25, $2d, $36, $2f, $32, $33, $32, $3a
14b6f     39 34 3D 41 
14b73     3C 3E 3C 3E 
14b77     4A 45 3D 43 
14b7b     45 43 44 40 | 	byte	$39, $34, $3d, $41, $3c, $3e, $3c, $3e, $4a, $45, $3d, $43, $45, $43, $44, $40
14b7f     38 3B 3F 37 
14b83     39 38 30 33 
14b87     30 2C 32 2D 
14b8b     27 2D 2C 2D | 	byte	$38, $3b, $3f, $37, $39, $38, $30, $33, $30, $2c, $32, $2d, $27, $2d, $2c, $2d
14b8f     30 2F 2A 31 
14b93     31 2C 33 33 
14b97     2D 31 33 2D 
14b9b     2C 2F 2F 2F | 	byte	$30, $2f, $2a, $31, $31, $2c, $33, $33, $2d, $31, $33, $2d, $2c, $2f, $2f, $2f
14b9f     30 23 28 28 
14ba3     23 2D 2B 22 
14ba7     27 26 23 27 
14bab     28 29 2A 28 | 	byte	$30, $23, $28, $28, $23, $2d, $2b, $22, $27, $26, $23, $27, $28, $29, $2a, $28
14baf     23 28 2B 2F 
14bb3     2C 29 28 2A 
14bb7     26 25 26 24 
14bbb     21 23 20 18 | 	byte	$23, $28, $2b, $2f, $2c, $29, $28, $2a, $26, $25, $26, $24, $21, $23, $20, $18
14bbf     1F 1E 1A 17 
14bc3     17 0D 12 12 
14bc7     06 0D 12 09 
14bcb     01 06 08 09 | 	byte	$1f, $1e, $1a, $17, $17, $0d, $12, $12, $06, $0d, $12, $09, $01, $06, $08, $09
14bcf     05 04 07 09 
14bd3     09 09 06 08 
14bd7     0D 09 0C 0A 
14bdb     07 0D 0F 09 | 	byte	$05, $04, $07, $09, $09, $09, $06, $08, $0d, $09, $0c, $0a, $07, $0d, $0f, $09
14bdf     06 0B 09 08 
14be3     06 06 08 09 
14be7     02 02 08 08 
14beb     05 0B 04 03 | 	byte	$06, $0b, $09, $08, $06, $06, $08, $09, $02, $02, $08, $08, $05, $0b, $04, $03
14bef     09 07 03 05 
14bf3     08 04 04 FC 
14bf7     FA 00 FC F5 
14bfb     F3 F1 F1 ED | 	byte	$09, $07, $03, $05, $08, $04, $04, $fc, $fa, $00, $fc, $f5, $f3, $f1, $f1, $ed
14bff     E5 EA EB E4 
14c03     E2 E0 DC DF 
14c07     DE DA D9 D7 
14c0b     D5 D5 D5 D2 | 	byte	$e5, $ea, $eb, $e4, $e2, $e0, $dc, $df, $de, $da, $d9, $d7, $d5, $d5, $d5, $d2
14c0f     D0 CE CC CB 
14c13     C9 C9 C7 C5 
14c17     C3 C2 C4 C3 
14c1b     C3 C4 C0 C4 | 	byte	$d0, $ce, $cc, $cb, $c9, $c9, $c7, $c5, $c3, $c2, $c4, $c3, $c3, $c4, $c0, $c4
14c1f     C2 C3 C4 C1 
14c23     C1 C2 C1 BF 
14c27     BD C0 BF BE 
14c2b     BB BC BC BA | 	byte	$c2, $c3, $c4, $c1, $c1, $c2, $c1, $bf, $bd, $c0, $bf, $be, $bb, $bc, $bc, $ba
14c2f     C1 C0 B8 BD 
14c33     C2 C3 C2 C2 
14c37     BD C4 C9 C6 
14c3b     C4 C1 C6 C6 | 	byte	$c1, $c0, $b8, $bd, $c2, $c3, $c2, $c2, $bd, $c4, $c9, $c6, $c4, $c1, $c6, $c6
14c3f     C7 C4 C2 C6 
14c43     C9 C4 C7 C5 
14c47     C7 CC CA C7 
14c4b     CE D0 CF D8 | 	byte	$c7, $c4, $c2, $c6, $c9, $c4, $c7, $c5, $c7, $cc, $ca, $c7, $ce, $d0, $cf, $d8
14c4f     D8 D9 DB DA 
14c53     DF E4 E2 E6 
14c57     E6 E8 E8 EB 
14c5b     F0 F1 F3 F9 | 	byte	$d8, $d9, $db, $da, $df, $e4, $e2, $e6, $e6, $e8, $e8, $eb, $f0, $f1, $f3, $f9
14c5f     FC FD 02 05 
14c63     07 10 0E 11 
14c67     18 1A 1F 1F 
14c6b     1E 27 28 27 | 	byte	$fc, $fd, $02, $05, $07, $10, $0e, $11, $18, $1a, $1f, $1f, $1e, $27, $28, $27
14c6f     27 24 26 2D 
14c73     2F 2B 27 2C 
14c77     2F 2C 2D 30 
14c7b     2F 31 35 35 | 	byte	$27, $24, $26, $2d, $2f, $2b, $27, $2c, $2f, $2c, $2d, $30, $2f, $31, $35, $35
14c7f     35 39 38 39 
14c83     3B 3A 38 3D 
14c87     3C 38 38 3A 
14c8b     38 3A 33 36 | 	byte	$35, $39, $38, $39, $3b, $3a, $38, $3d, $3c, $38, $38, $3a, $38, $3a, $33, $36
14c8f     3A 36 37 36 
14c93     32 35 37 37 
14c97     32 31 34 33 
14c9b     35 34 31 32 | 	byte	$3a, $36, $37, $36, $32, $35, $37, $37, $32, $31, $34, $33, $35, $34, $31, $32
14c9f     33 2D 2F 2E 
14ca3     2B 2D 29 26 
14ca7     2C 27 23 2B 
14cab     21 1F 23 1E | 	byte	$33, $2d, $2f, $2e, $2b, $2d, $29, $26, $2c, $27, $23, $2b, $21, $1f, $23, $1e
14caf     1C 20 1A 19 
14cb3     1B 18 14 19 
14cb7     16 0F 13 0F 
14cbb     0B 0E 0E 07 | 	byte	$1c, $20, $1a, $19, $1b, $18, $14, $19, $16, $0f, $13, $0f, $0b, $0e, $0e, $07
14cbf     0A 10 08 05 
14cc3     0A 06 08 0E 
14cc7     08 07 08 06 
14ccb     06 06 01 02 | 	byte	$0a, $10, $08, $05, $0a, $06, $08, $0e, $08, $07, $08, $06, $06, $06, $01, $02
14ccf     02 FC FB FA 
14cd3     FA FA F5 F2 
14cd7     F0 F3 F1 EA 
14cdb     E8 E7 E8 E6 | 	byte	$02, $fc, $fb, $fa, $fa, $fa, $f5, $f2, $f0, $f3, $f1, $ea, $e8, $e7, $e8, $e6
14cdf     E4 E5 E0 E2 
14ce3     E3 E0 DF E0 
14ce7     DE DC D8 D7 
14ceb     DA DA D6 D6 | 	byte	$e4, $e5, $e0, $e2, $e3, $e0, $df, $e0, $de, $dc, $d8, $d7, $da, $da, $d6, $d6
14cef     D6 D4 D8 D7 
14cf3     D5 D8 D9 D8 
14cf7     D5 D9 D9 D8 
14cfb     DA D9 DB DF | 	byte	$d6, $d4, $d8, $d7, $d5, $d8, $d9, $d8, $d5, $d9, $d9, $d8, $da, $d9, $db, $df
14cff     DC DE E0 E1 
14d03     E2 E5 E3 E1 
14d07     E5 E7 E2 E5 
14d0b     E7 E9 E9 E6 | 	byte	$dc, $de, $e0, $e1, $e2, $e5, $e3, $e1, $e5, $e7, $e2, $e5, $e7, $e9, $e9, $e6
14d0f     EA EB ED ED 
14d13     EE EF ED ED 
14d17     EF F2 F0 F0 
14d1b     F1 F0 F0 F6 | 	byte	$ea, $eb, $ed, $ed, $ee, $ef, $ed, $ed, $ef, $f2, $f0, $f0, $f1, $f0, $f0, $f6
14d1f     F5 F9 FA FA 
14d23     F9 FB FE FE 
14d27     00 01 00 01 
14d2b     04 06 08 08 | 	byte	$f5, $f9, $fa, $fa, $f9, $fb, $fe, $fe, $00, $01, $00, $01, $04, $06, $08, $08
14d2f     09 0B 0E 0B 
14d33     11 0F 0D 13 
14d37     10 11 14 15 
14d3b     15 16 17 17 | 	byte	$09, $0b, $0e, $0b, $11, $0f, $0d, $13, $10, $11, $14, $15, $15, $16, $17, $17
14d3f     18 1C 1B 1B 
14d43     1F 20 1F 1F 
14d47     20 20 23 20 
14d4b     1E 22 21 1F | 	byte	$18, $1c, $1b, $1b, $1f, $20, $1f, $1f, $20, $20, $23, $20, $1e, $22, $21, $1f
14d4f     1D 1C 1B 1A 
14d53     16 16 12 0E 
14d57     0D 0F 0C 0B 
14d5b     07 04 03 03 | 	byte	$1d, $1c, $1b, $1a, $16, $16, $12, $0e, $0d, $0f, $0c, $0b, $07, $04, $03, $03
14d5f     03 01 FE FD 
14d63     FE FB FB F8 
14d67     F8 FA F7 F7 
14d6b     F6 F5 F3 F2 | 	byte	$03, $01, $fe, $fd, $fe, $fb, $fb, $f8, $f8, $fa, $f7, $f7, $f6, $f5, $f3, $f2
14d6f     F3 F1 F1 F2 
14d73     F0 EF F0 EF 
14d77     F0 F3 F5 F3 
14d7b     F3 F3 F5 F9 | 	byte	$f3, $f1, $f1, $f2, $f0, $ef, $f0, $ef, $f0, $f3, $f5, $f3, $f3, $f3, $f5, $f9
14d7f     F7 F9 FA FA 
14d83     FD FE FD FD 
14d87     FE FD FE 00 
14d8b     FD FE 00 00 | 	byte	$f7, $f9, $fa, $fa, $fd, $fe, $fd, $fd, $fe, $fd, $fe, $00, $fd, $fe, $00, $00
14d8f     FD FE 00 FF 
14d93     00 FF 00 02 
14d97     02 01 01 05 
14d9b     05 08 07 09 | 	byte	$fd, $fe, $00, $ff, $00, $ff, $00, $02, $02, $01, $01, $05, $05, $08, $07, $09
14d9f     0B 09 09 0C 
14da3     0F 12 11 10 
14da7     11 16 15 16 
14dab     19 16 19 1B | 	byte	$0b, $09, $09, $0c, $0f, $12, $11, $10, $11, $16, $15, $16, $19, $16, $19, $1b
14daf     19 1A 1B 1B 
14db3     1A 19 17 16 
14db7     1C 1A 17 16 
14dbb     14 12 13 12 | 	byte	$19, $1a, $1b, $1b, $1a, $19, $17, $16, $1c, $1a, $17, $16, $14, $12, $13, $12
14dbf     0F 10 0C 09 
14dc3     0B 08 05 06 
14dc7     06 03 03 05 
14dcb     00 FC FE FB | 	byte	$0f, $10, $0c, $09, $0b, $08, $05, $06, $06, $03, $03, $05, $00, $fc, $fe, $fb
14dcf     FB F7 F3 F2 
14dd3     F2 F2 EB EA 
14dd7     EB E9 E6 E4 
14ddb     E6 E6 E5 E2 | 	byte	$fb, $f7, $f3, $f2, $f2, $f2, $eb, $ea, $eb, $e9, $e6, $e4, $e6, $e6, $e5, $e2
14ddf     DF E1 E2 E0 
14de3     DF DF E0 E3 
14de7     E2 DF E1 E2 
14deb     E0 E1 E1 DF | 	byte	$df, $e1, $e2, $e0, $df, $df, $e0, $e3, $e2, $df, $e1, $e2, $e0, $e1, $e1, $df
14def     E2 E5 E2 E0 
14df3     E3 E5 E5 E5 
14df7     E5 E6 E9 E9 
14dfb     E7 E9 EA EC | 	byte	$e2, $e5, $e2, $e0, $e3, $e5, $e5, $e5, $e5, $e6, $e9, $e9, $e7, $e9, $ea, $ec
14dff     EB E9 EC EB 
14e03     EA EF EC ED 
14e07     EE F0 F2 F2 
14e0b     F0 EE F2 F3 | 	byte	$eb, $e9, $ec, $eb, $ea, $ef, $ec, $ed, $ee, $f0, $f2, $f2, $f0, $ee, $f2, $f3
14e0f     F5 F4 F3 F5 
14e13     F7 FB FA F8 
14e17     F9 F8 FB FC 
14e1b     F8 F9 FE FC | 	byte	$f5, $f4, $f3, $f5, $f7, $fb, $fa, $f8, $f9, $f8, $fb, $fc, $f8, $f9, $fe, $fc
14e1f     FB FD FB FD 
14e23     02 00 00 03 
14e27     02 03 05 04 
14e2b     05 09 08 05 | 	byte	$fb, $fd, $fb, $fd, $02, $00, $00, $03, $02, $03, $05, $04, $05, $09, $08, $05
14e2f     08 0A 0B 0B 
14e33     0B 0B 0C 10 
14e37     0B 0B 12 0D 
14e3b     0D 12 10 11 | 	byte	$08, $0a, $0b, $0b, $0b, $0b, $0c, $10, $0b, $0b, $12, $0d, $0d, $12, $10, $11
14e3f     14 11 13 14 
14e43     13 13 12 11 
14e47     15 18 13 11 
14e4b     12 14 14 12 | 	byte	$14, $11, $13, $14, $13, $13, $12, $11, $15, $18, $13, $11, $12, $14, $14, $12
14e4f     0F 10 11 11 
14e53     11 10 10 0F 
14e57     10 10 0E 10 
14e5b     11 10 10 0C | 	byte	$0f, $10, $11, $11, $11, $10, $10, $0f, $10, $10, $0e, $10, $11, $10, $10, $0c
14e5f     0E 12 10 0B 
14e63     0C 0C 0B 0C 
14e67     09 08 08 06 
14e6b     07 07 05 06 | 	byte	$0e, $12, $10, $0b, $0c, $0c, $0b, $0c, $09, $08, $08, $06, $07, $07, $05, $06
14e6f     04 01 02 02 
14e73     02 03 00 FF 
14e77     00 00 FE FF 
14e7b     FF FE FD FD | 	byte	$04, $01, $02, $02, $02, $03, $00, $ff, $00, $00, $fe, $ff, $ff, $fe, $fd, $fd
14e7f     FB FA FA F7 
14e83     F7 F6 F5 F4 
14e87     F4 F0 ED EF 
14e8b     EC EB ED ED | 	byte	$fb, $fa, $fa, $f7, $f7, $f6, $f5, $f4, $f4, $f0, $ed, $ef, $ec, $eb, $ed, $ed
14e8f     EA EA E9 E9 
14e93     E9 EC ED EB 
14e97     EC EA EC F0 
14e9b     EF EE EF F1 | 	byte	$ea, $ea, $e9, $e9, $e9, $ec, $ed, $eb, $ec, $ea, $ec, $f0, $ef, $ee, $ef, $f1
14e9f     F1 F3 F7 F4 
14ea3     F2 F4 F5 F8 
14ea7     F7 F8 F9 F8 
14eab     FA FD FB FD | 	byte	$f1, $f3, $f7, $f4, $f2, $f4, $f5, $f8, $f7, $f8, $f9, $f8, $fa, $fd, $fb, $fd
14eaf     01 03 03 05 
14eb3     05 08 0C 0B 
14eb7     0D 10 11 11 
14ebb     13 15 15 17 | 	byte	$01, $03, $03, $05, $05, $08, $0c, $0b, $0d, $10, $11, $11, $13, $15, $15, $17
14ebf     18 16 15 17 
14ec3     18 18 16 15 
14ec7     18 18 16 15 
14ecb     16 18 18 17 | 	byte	$18, $16, $15, $17, $18, $18, $16, $15, $18, $18, $16, $15, $16, $18, $18, $17
14ecf     15 17 17 17 
14ed3     1A 19 1A 1B 
14ed7     19 18 19 1B 
14edb     1B 19 19 1B | 	byte	$15, $17, $17, $17, $1a, $19, $1a, $1b, $19, $18, $19, $1b, $1b, $19, $19, $1b
14edf     1B 19 19 19 
14ee3     1B 19 18 18 
14ee7     19 18 18 18 
14eeb     17 17 17 15 | 	byte	$1b, $19, $19, $19, $1b, $19, $18, $18, $19, $18, $18, $18, $17, $17, $17, $15
14eef     15 15 13 14 
14ef3     15 13 12 10 
14ef7     11 0F 0D 0B 
14efb     08 08 05 03 | 	byte	$15, $15, $13, $14, $15, $13, $12, $10, $11, $0f, $0d, $0b, $08, $08, $05, $03
14eff     02 01 FE FC 
14f03     FA F7 F4 F5 
14f07     F3 F0 EC E9 
14f0b     EC EB E9 E7 | 	byte	$02, $01, $fe, $fc, $fa, $f7, $f4, $f5, $f3, $f0, $ec, $e9, $ec, $eb, $e9, $e7
14f0f     E6 E3 E5 E6 
14f13     E3 E1 E0 DF 
14f17     E0 DE DA DB 
14f1b     DE DB D8 D9 | 	byte	$e6, $e3, $e5, $e6, $e3, $e1, $e0, $df, $e0, $de, $da, $db, $de, $db, $d8, $d9
14f1f     D9 DA DB DA 
14f23     D8 D9 DA DC 
14f27     DD DC DD DF 
14f2b     E2 E1 E2 E4 | 	byte	$d9, $da, $db, $da, $d8, $d9, $da, $dc, $dd, $dc, $dd, $df, $e2, $e1, $e2, $e4
14f2f     E5 E7 E8 E8 
14f33     E9 E9 EB EB 
14f37     EB EB EB ED 
14f3b     EC ED EE ED | 	byte	$e5, $e7, $e8, $e8, $e9, $e9, $eb, $eb, $eb, $eb, $eb, $ed, $ec, $ed, $ee, $ed
14f3f     EF F0 F1 F2 
14f43     F3 F4 F4 F7 
14f47     F6 F6 F8 FC 
14f4b     FD FB FE FE | 	byte	$ef, $f0, $f1, $f2, $f3, $f4, $f4, $f7, $f6, $f6, $f8, $fc, $fd, $fb, $fe, $fe
14f4f     00 02 00 00 
14f53     03 03 04 05 
14f57     02 03 07 06 
14f5b     08 08 07 08 | 	byte	$00, $02, $00, $00, $03, $03, $04, $05, $02, $03, $07, $06, $08, $08, $07, $08
14f5f     0B 0C 0C 0E 
14f63     0F 0E 0F 11 
14f67     0F 11 14 11 
14f6b     10 13 13 12 | 	byte	$0b, $0c, $0c, $0e, $0f, $0e, $0f, $11, $0f, $11, $14, $11, $10, $13, $13, $12
14f6f     13 11 12 12 
14f73     10 11 0F 0F 
14f77     10 0E 0C 0B 
14f7b     0C 0C 0B 0B | 	byte	$13, $11, $12, $12, $10, $11, $0f, $0f, $10, $0e, $0c, $0b, $0c, $0c, $0b, $0b
14f7f     09 07 08 08 
14f83     06 05 03 01 
14f87     02 01 01 02 
14f8b     00 00 01 FF | 	byte	$09, $07, $08, $08, $06, $05, $03, $01, $02, $01, $01, $02, $00, $00, $01, $ff
14f8f     FE FF 00 00 
14f93     FD FC FC FA 
14f97     FB FA F8 F9 
14f9b     F8 F7 F9 F9 | 	byte	$fe, $ff, $00, $00, $fd, $fc, $fc, $fa, $fb, $fa, $f8, $f9, $f8, $f7, $f9, $f9
14f9f     F7 F6 FA FA 
14fa3     FA F9 FA FB 
14fa7     FA FC FD FB 
14fab     FC FD FC FC | 	byte	$f7, $f6, $fa, $fa, $fa, $f9, $fa, $fb, $fa, $fc, $fd, $fb, $fc, $fd, $fc, $fc
14faf     FD FD FC FB 
14fb3     FA F9 FB FC 
14fb7     FB F9 FA FB 
14fbb     FB FC FC FB | 	byte	$fd, $fd, $fc, $fb, $fa, $f9, $fb, $fc, $fb, $f9, $fa, $fb, $fb, $fc, $fc, $fb
14fbf     FD FE FD FC 
14fc3     FD FE 00 FF 
14fc7     FD FE FE FE 
14fcb     FC FC FC FC | 	byte	$fd, $fe, $fd, $fc, $fd, $fe, $00, $ff, $fd, $fe, $fe, $fe, $fc, $fc, $fc, $fc
14fcf     FC FB F9 F9 
14fd3     F9 F8 F9 FA 
14fd7     F8 F9 FB F9 
14fdb     FA FC FA FB | 	byte	$fc, $fb, $f9, $f9, $f9, $f8, $f9, $fa, $f8, $f9, $fb, $f9, $fa, $fc, $fa, $fb
14fdf     FD FA FB FC 
14fe3     FB FC FD FA 
14fe7     FB FC FB FA 
14feb     FA FA FA FB | 	byte	$fd, $fa, $fb, $fc, $fb, $fc, $fd, $fa, $fb, $fc, $fb, $fa, $fa, $fa, $fa, $fb
14fef     FB F9 F9 FA 
14ff3     F9 FB FC F9 
14ff7     F9 FA FB FD 
14ffb     FB FB FD FD | 	byte	$fb, $f9, $f9, $fa, $f9, $fb, $fc, $f9, $f9, $fa, $fb, $fd, $fb, $fb, $fd, $fd
14fff     FC FD 00 00 
15003     00 00 00 01 
15007     03 03 03 05 
1500b     04 03 05 06 | 	byte	$fc, $fd, $00, $00, $00, $00, $00, $01, $03, $03, $03, $05, $04, $03, $05, $06
1500f     05 07 07 05 
15013     07 08 07 06 
15017     06 09 09 08 
1501b     07 07 0A 0A | 	byte	$05, $07, $07, $05, $07, $08, $07, $06, $06, $09, $09, $08, $07, $07, $0a, $0a
1501f     0B 0B 0B 0C 
15023     0F 0B 0B 0E 
15027     0E 0F 10 0C 
1502b     0D 0F 0C 0C | 	byte	$0b, $0b, $0b, $0c, $0f, $0b, $0b, $0e, $0e, $0f, $10, $0c, $0d, $0f, $0c, $0c
1502f     0C 0B 0A 0B 
15033     09 09 0B 0A 
15037     0A 09 08 09 
1503b     0B 0A 09 09 | 	byte	$0c, $0b, $0a, $0b, $09, $09, $0b, $0a, $0a, $09, $08, $09, $0b, $0a, $09, $09
1503f     08 07 0B 09 
15043     07 08 08 07 
15047     08 07 04 05 
1504b     05 03 03 02 | 	byte	$08, $07, $0b, $09, $07, $08, $08, $07, $08, $07, $04, $05, $05, $03, $03, $02
1504f     02 02 02 01 
15053     00 00 02 01 
15057     00 01 01 01 
1505b     02 01 00 01 | 	byte	$02, $02, $02, $01, $00, $00, $02, $01, $00, $01, $01, $01, $02, $01, $00, $01
1505f     02 03 02 01 
15063     02 04 04 03 
15067     03 02 02 03 
1506b     04 03 02 02 | 	byte	$02, $03, $02, $01, $02, $04, $04, $03, $03, $02, $02, $03, $04, $03, $02, $02
1506f     01 02 02 01 
15073     01 00 00 00 
15077     00 FE 00 00 
1507b     00 FF FC FC | 	byte	$01, $02, $02, $01, $01, $00, $00, $00, $00, $fe, $00, $00, $00, $ff, $fc, $fc
1507f     FF FF FD FD 
15083     FC FD FD FB 
15087     FB FC FC FB 
1508b     FA F9 FB FC | 	byte	$ff, $ff, $fd, $fd, $fc, $fd, $fd, $fb, $fb, $fc, $fc, $fb, $fa, $f9, $fb, $fc
1508f     FB FA FB FA 
15093     FA FA FA FA 
15097     FB FA F9 F9 
1509b     F8 F8 F8 F8 | 	byte	$fb, $fa, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f8
1509f     F7 F8 F6 F6 
150a3     F6 F5 F6 F6 
150a7     F5 F5 F7 F5 
150ab     F4 F6 F6 F5 | 	byte	$f7, $f8, $f6, $f6, $f6, $f5, $f6, $f6, $f5, $f5, $f7, $f5, $f4, $f6, $f6, $f5
150af     F6 F4 F6 F6 
150b3     F5 F5 F5 F5 
150b7     F7 F7 F6 F5 
150bb     F6 F6 F7 F7 | 	byte	$f6, $f4, $f6, $f6, $f5, $f5, $f5, $f5, $f7, $f7, $f6, $f5, $f6, $f6, $f7, $f7
150bf     F6 F6 F7 F7 
150c3     F7 F8 F7 F7 
150c7     F9 FA F9 FA 
150cb     FB FC FD FB | 	byte	$f6, $f6, $f7, $f7, $f7, $f8, $f7, $f7, $f9, $fa, $f9, $fa, $fb, $fc, $fd, $fb
150cf     FC FE FF 00 
150d3     00 FF 00 00 
150d7     01 02 03 02 
150db     04 06 06 06 | 	byte	$fc, $fe, $ff, $00, $00, $ff, $00, $00, $01, $02, $03, $02, $04, $06, $06, $06
150df     07 08 0A 09 
150e3     09 0A 0B 0C 
150e7     0C 0C 0C 0E 
150eb     0F 0E 0C 0D | 	byte	$07, $08, $0a, $09, $09, $0a, $0b, $0c, $0c, $0c, $0c, $0e, $0f, $0e, $0c, $0d
150ef     0F 0F 0F 0E 
150f3     0F 0F 0F 0D 
150f7     0E 0D 0D 0D 
150fb     0B 0B 0A 09 | 	byte	$0f, $0f, $0f, $0e, $0f, $0f, $0f, $0d, $0e, $0d, $0d, $0d, $0b, $0b, $0a, $09
150ff     09 08 07 07 
15103     06 05 04 04 
15107     03 02 01 01 
1510b     00 00 FF 00 | 	byte	$09, $08, $07, $07, $06, $05, $04, $04, $03, $02, $01, $01, $00, $00, $ff, $00
1510f     FE FD FD FD 
15113     FD FD FB FB 
15117     FB FB FA F9 
1511b     FA FA F9 F9 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fb, $fb, $fb, $fb, $fa, $f9, $fa, $fa, $f9, $f9
1511f     F8 F8 F8 F9 
15123     FA F9 F8 F9 
15127     F8 F7 F8 F9 
1512b     F7 F7 F7 F7 | 	byte	$f8, $f8, $f8, $f9, $fa, $f9, $f8, $f9, $f8, $f7, $f8, $f9, $f7, $f7, $f7, $f7
1512f     F8 F7 F7 F7 
15133     F7 F6 F7 F6 
15137     F7 F8 F7 F7 
1513b     F7 F6 F7 F8 | 	byte	$f8, $f7, $f7, $f7, $f7, $f6, $f7, $f6, $f7, $f8, $f7, $f7, $f7, $f6, $f7, $f8
1513f     F7 F6 F7 F6 
15143     F5 F5 F4 F4 
15147     F4 F3 F3 F1 
1514b     F2 F2 F3 F2 | 	byte	$f7, $f6, $f7, $f6, $f5, $f5, $f4, $f4, $f4, $f3, $f3, $f1, $f2, $f2, $f3, $f2
1514f     F1 F1 F1 F2 
15153     F3 F3 F2 F3 
15157     F4 F3 F4 F4 
1515b     F5 00 00 00 | 	byte	$f1, $f1, $f1, $f2, $f3, $f3, $f2, $f3, $f4, $f3, $f4, $f4, $f5, $00, $00, $00
1515f     00 E4 B1 EA 
15163     80 F5 0A 0B 
15167     02 15 9B 80 
1516b     40 D6 30 57 | 	byte	$00, $e4, $b1, $ea, $80, $f5, $0a, $0b, $02, $15, $9b, $80, $40, $d6, $30, $57
1516f     00 F2 58 E1 
15173     33 0F 9B 7C 
15177     41 90 94 3A 
1517b     AA 9D 0A AA | 	byte	$00, $f2, $58, $e1, $33, $0f, $9b, $7c, $41, $90, $94, $3a, $aa, $9d, $0a, $aa
1517f     E7 82 D2 E5 
15183     B0 C0 DD C6 
15187     F1 E9 08 06 
1518b     E3 F2 78 6C | 	byte	$e7, $82, $d2, $e5, $b0, $c0, $dd, $c6, $f1, $e9, $08, $06, $e3, $f2, $78, $6c
1518f     AE 17 7E 48 
15193     62 44 F7 19 
15197     80 2C 64 3A 
1519b     34 67 0D 1D | 	byte	$ae, $17, $7e, $48, $62, $44, $f7, $19, $80, $2c, $64, $3a, $34, $67, $0d, $1d
1519f     4A D3 08 2C 
151a3     1B EE 3C FC 
151a7     B1 F3 DF F0 
151ab     DD BD DC CF | 	byte	$4a, $d3, $08, $2c, $1b, $ee, $3c, $fc, $b1, $f3, $df, $f0, $dd, $bd, $dc, $cf
151af     D5 CC D6 C3 
151b3     A7 EC EB 99 
151b7     A5 E2 E3 B9 
151bb     9A D3 10 E6 | 	byte	$d5, $cc, $d6, $c3, $a7, $ec, $eb, $99, $a5, $e2, $e3, $b9, $9a, $d3, $10, $e6
151bf     94 E3 25 B7 
151c3     BA 31 B5 D9 
151c7     21 DF 08 09 
151cb     50 1B EA 5A | 	byte	$94, $e3, $25, $b7, $ba, $31, $b5, $d9, $21, $df, $08, $09, $50, $1b, $ea, $5a
151cf     28 14 53 51 
151d3     21 49 1A 27 
151d7     65 55 3F 63 
151db     26 1C 38 43 | 	byte	$28, $14, $53, $51, $21, $49, $1a, $27, $65, $55, $3f, $63, $26, $1c, $38, $43
151df     3F 38 2C 1A 
151e3     27 20 22 36 
151e7     47 22 23 F9 
151eb     0E 09 0B 48 | 	byte	$3f, $38, $2c, $1a, $27, $20, $22, $36, $47, $22, $23, $f9, $0e, $09, $0b, $48
151ef     CD FD 25 EA 
151f3     0B F8 06 21 
151f7     DA 28 F5 B4 
151fb     E3 0A F5 E0 | 	byte	$cd, $fd, $25, $ea, $0b, $f8, $06, $21, $da, $28, $f5, $b4, $e3, $0a, $f5, $e0
151ff     F4 F6 F0 AC 
15203     D8 EA E4 CF 
15207     D5 DF B9 D3 
1520b     C9 C5 C0 C4 | 	byte	$f4, $f6, $f0, $ac, $d8, $ea, $e4, $cf, $d5, $df, $b9, $d3, $c9, $c5, $c0, $c4
1520f     BC 99 B8 A7 
15213     A3 B4 B5 BF 
15217     B4 99 C5 B3 
1521b     C4 CE CB DF | 	byte	$bc, $99, $b8, $a7, $a3, $b4, $b5, $bf, $b4, $99, $c5, $b3, $c4, $ce, $cb, $df
1521f     D2 DA 01 E2 
15223     DC E0 07 01 
15227     E3 F0 27 15 
1522b     FA 08 13 31 | 	byte	$d2, $da, $01, $e2, $dc, $e0, $07, $01, $e3, $f0, $27, $15, $fa, $08, $13, $31
1522f     F9 31 4A 17 
15233     2D 2D 54 38 
15237     4A 64 3B 4E 
1523b     63 62 51 77 | 	byte	$f9, $31, $4a, $17, $2d, $2d, $54, $38, $4a, $64, $3b, $4e, $63, $62, $51, $77
1523f     49 57 79 60 
15243     5B 6E 5E 71 
15247     76 42 68 7D 
1524b     62 38 53 3B | 	byte	$49, $57, $79, $60, $5b, $6e, $5e, $71, $76, $42, $68, $7d, $62, $38, $53, $3b
1524f     4C 4A ED FA 
15253     63 2F FF 15 
15257     DF 05 08 DC 
1525b     EA E4 F3 01 | 	byte	$4c, $4a, $ed, $fa, $63, $2f, $ff, $15, $df, $05, $08, $dc, $ea, $e4, $f3, $01
1525f     C1 A1 EE C2 
15263     D6 CE CE E3 
15267     D9 BD F2 C1 
1526b     D4 D0 DD B5 | 	byte	$c1, $a1, $ee, $c2, $d6, $ce, $ce, $e3, $d9, $bd, $f2, $c1, $d4, $d0, $dd, $b5
1526f     BF BF D7 AA 
15273     C6 C3 B8 B2 
15277     BC B5 B2 A9 
1527b     A2 C3 BF AC | 	byte	$bf, $bf, $d7, $aa, $c6, $c3, $b8, $b2, $bc, $b5, $b2, $a9, $a2, $c3, $bf, $ac
1527f     A0 C2 BF D4 
15283     CD 89 C6 D9 
15287     A8 C2 E8 DF 
1528b     AD CF EF E6 | 	byte	$a0, $c2, $bf, $d4, $cd, $89, $c6, $d9, $a8, $c2, $e8, $df, $ad, $cf, $ef, $e6
1528f     CB FE D7 ED 
15293     02 E1 12 FF 
15297     FE 29 02 2A 
1529b     26 2B 42 34 | 	byte	$cb, $fe, $d7, $ed, $02, $e1, $12, $ff, $fe, $29, $02, $2a, $26, $2b, $42, $34
1529f     44 46 56 43 
152a3     6B 71 55 6F 
152a7     5F 6A 6E 3F 
152ab     5E 5E 59 66 | 	byte	$44, $46, $56, $43, $6b, $71, $55, $6f, $5f, $6a, $6e, $3f, $5e, $5e, $59, $66
152af     6E 64 59 38 
152b3     21 39 51 63 
152b7     49 56 55 1E 
152bb     3D 3D 28 F6 | 	byte	$6e, $64, $59, $38, $21, $39, $51, $63, $49, $56, $55, $1e, $3d, $3d, $28, $f6
152bf     13 12 22 31 
152c3     05 FC 2B ED 
152c7     1A DF 22 07 
152cb     F3 DC F3 ED | 	byte	$13, $12, $22, $31, $05, $fc, $2b, $ed, $1a, $df, $22, $07, $f3, $dc, $f3, $ed
152cf     FC 0A FC C1 
152d3     F9 09 CA C8 
152d7     B9 B9 DD E9 
152db     BF 96 D9 E0 | 	byte	$fc, $0a, $fc, $c1, $f9, $09, $ca, $c8, $b9, $b9, $dd, $e9, $bf, $96, $d9, $e0
152df     C2 C2 AA CC 
152e3     A8 A6 C8 B8 
152e7     8A AE AD 98 
152eb     AC 89 D1 A5 | 	byte	$c2, $c2, $aa, $cc, $a8, $a6, $c8, $b8, $8a, $ae, $ad, $98, $ac, $89, $d1, $a5
152ef     AA B7 D0 D5 
152f3     AA A7 B3 0B 
152f7     D2 D0 D8 02 
152fb     DB F3 DF 03 | 	byte	$aa, $b7, $d0, $d5, $aa, $a7, $b3, $0b, $d2, $d0, $d8, $02, $db, $f3, $df, $03
152ff     D2 0F 14 EC 
15303     1B 1A EB 22 
15307     3D 1B 04 40 
1530b     32 59 40 38 | 	byte	$d2, $0f, $14, $ec, $1b, $1a, $eb, $22, $3d, $1b, $04, $40, $32, $59, $40, $38
1530f     3C 31 4E 41 
15313     61 65 5F 4F 
15317     45 50 5F 6C 
1531b     6D 80 4F 40 | 	byte	$3c, $31, $4e, $41, $61, $65, $5f, $4f, $45, $50, $5f, $6c, $6d, $80, $4f, $40
1531f     6C 57 51 62 
15323     50 3D 45 32 
15327     47 1D 4C 2E 
1532b     F3 1F 1F 3E | 	byte	$6c, $57, $51, $62, $50, $3d, $45, $32, $47, $1d, $4c, $2e, $f3, $1f, $1f, $3e
1532f     1B EA 17 FD 
15333     EA EF 11 E4 
15337     CE FC C9 DF 
1533b     B8 BA BD D2 | 	byte	$1b, $ea, $17, $fd, $ea, $ef, $11, $e4, $ce, $fc, $c9, $df, $b8, $ba, $bd, $d2
1533f     D7 B3 C3 8B 
15343     BD C6 98 D2 
15347     97 8F E5 8F 
1534b     9A B9 A1 95 | 	byte	$d7, $b3, $c3, $8b, $bd, $c6, $98, $d2, $97, $8f, $e5, $8f, $9a, $b9, $a1, $95
1534f     E7 AF 91 B3 
15353     CC CB A0 CE 
15357     DA C2 B7 D2 
1535b     F5 D5 E8 E8 | 	byte	$e7, $af, $91, $b3, $cc, $cb, $a0, $ce, $da, $c2, $b7, $d2, $f5, $d5, $e8, $e8
1535f     E0 F3 10 CD 
15363     FD 16 D2 1C 
15367     22 03 1B 08 
1536b     43 17 1C 2C | 	byte	$e0, $f3, $10, $cd, $fd, $16, $d2, $1c, $22, $03, $1b, $08, $43, $17, $1c, $2c
1536f     34 2A 37 26 
15373     4D 30 2E 2D 
15377     3D 53 30 6E 
1537b     2C 4A 5B 3A | 	byte	$34, $2a, $37, $26, $4d, $30, $2e, $2d, $3d, $53, $30, $6e, $2c, $4a, $5b, $3a
1537f     74 4E 45 65 
15383     3C 48 45 5A 
15387     80 2D 2B 37 
1538b     45 55 4B 53 | 	byte	$74, $4e, $45, $65, $3c, $48, $45, $5a, $80, $2d, $2b, $37, $45, $55, $4b, $53
1538f     1D 33 3F 45 
15393     2F 03 2B 35 
15397     05 2A 15 F3 
1539b     F5 E8 06 C5 | 	byte	$1d, $33, $3f, $45, $2f, $03, $2b, $35, $05, $2a, $15, $f3, $f5, $e8, $06, $c5
1539f     DB 03 A5 D0 
153a3     FE 9E A9 BE 
153a7     AF E0 C6 81 
153ab     BF E5 AF B2 | 	byte	$db, $03, $a5, $d0, $fe, $9e, $a9, $be, $af, $e0, $c6, $81, $bf, $e5, $af, $b2
153af     BE B4 C8 AA 
153b3     90 C6 B6 DA 
153b7     BE 99 16 AD 
153bb     AA 0E AC BB | 	byte	$be, $b4, $c8, $aa, $90, $c6, $b6, $da, $be, $99, $16, $ad, $aa, $0e, $ac, $bb
153bf     D9 CE 0C 9C 
153c3     03 FD AA 1C 
153c7     02 DC F5 D1 
153cb     10 FF 09 F6 | 	byte	$d9, $ce, $0c, $9c, $03, $fd, $aa, $1c, $02, $dc, $f5, $d1, $10, $ff, $09, $f6
153cf     0A 18 EB 49 
153d3     1D 2C 13 E3 
153d7     23 5A DC 14 
153db     4B F7 43 12 | 	byte	$0a, $18, $eb, $49, $1d, $2c, $13, $e3, $23, $5a, $dc, $14, $4b, $f7, $43, $12
153df     10 47 27 25 
153e3     2A 26 3F 1E 
153e7     44 29 19 53 
153eb     35 22 4B 26 | 	byte	$10, $47, $27, $25, $2a, $26, $3f, $1e, $44, $29, $19, $53, $35, $22, $4b, $26
153ef     15 67 1B 41 
153f3     3A 21 5B 40 
153f7     2B 34 2A 2B 
153fb     50 15 13 36 | 	byte	$15, $67, $1b, $41, $3a, $21, $5b, $40, $2b, $34, $2a, $2b, $50, $15, $13, $36
153ff     43 18 2D 16 
15403     EA 47 02 FF 
15407     14 0B 0F E5 
1540b     0A 16 C2 E7 | 	byte	$43, $18, $2d, $16, $ea, $47, $02, $ff, $14, $0b, $0f, $e5, $0a, $16, $c2, $e7
1540f     1C C7 F4 E7 
15413     F0 DD E5 E7 
15417     DF 8D E6 F3 
1541b     AB EF DE DA | 	byte	$1c, $c7, $f4, $e7, $f0, $dd, $e5, $e7, $df, $8d, $e6, $f3, $ab, $ef, $de, $da
1541f     D2 B0 ED D2 
15423     AA E7 EC A6 
15427     D8 C3 B1 F9 
1542b     9E C4 C2 A3 | 	byte	$d2, $b0, $ed, $d2, $aa, $e7, $ec, $a6, $d8, $c3, $b1, $f9, $9e, $c4, $c2, $a3
1542f     CE C6 C6 B5 
15433     91 FC C8 C1 
15437     FA BD AB F1 
1543b     D5 D6 EE CA | 	byte	$ce, $c6, $c6, $b5, $91, $fc, $c8, $c1, $fa, $bd, $ab, $f1, $d5, $d6, $ee, $ca
1543f     F6 EC BD 31 
15443     FB C1 FD F4 
15447     1A 2F F8 19 
1544b     1D 27 07 24 | 	byte	$f6, $ec, $bd, $31, $fb, $c1, $fd, $f4, $1a, $2f, $f8, $19, $1d, $27, $07, $24
1544f     3B 31 0E 49 
15453     51 26 66 0B 
15457     45 5A 3B 4C 
1545b     4C 43 68 1E | 	byte	$3b, $31, $0e, $49, $51, $26, $66, $0b, $45, $5a, $3b, $4c, $4c, $43, $68, $1e
1545f     74 35 25 70 
15463     49 2D 38 33 
15467     5D 25 33 31 
1546b     32 2A 44 45 | 	byte	$74, $35, $25, $70, $49, $2d, $38, $33, $5d, $25, $33, $31, $32, $2a, $44, $45
1546f     2B 3D 21 0F 
15473     19 2F 24 30 
15477     0A E6 47 01 
1547b     E5 06 31 FD | 	byte	$2b, $3d, $21, $0f, $19, $2f, $24, $30, $0a, $e6, $47, $01, $e5, $06, $31, $fd
1547f     D3 15 DF 12 
15483     D0 09 F8 CD 
15487     FC EF CB E6 
1548b     D3 E9 B8 E2 | 	byte	$d3, $15, $df, $12, $d0, $09, $f8, $cd, $fc, $ef, $cb, $e6, $d3, $e9, $b8, $e2
1548f     E5 C5 E7 BD 
15493     D7 F2 BA 90 
15497     D9 E2 B6 BD 
1549b     BD C3 DF A9 | 	byte	$e5, $c5, $e7, $bd, $d7, $f2, $ba, $90, $d9, $e2, $b6, $bd, $bd, $c3, $df, $a9
1549f     C1 B6 C1 F6 
154a3     9F 8E C6 CF 
154a7     CB D5 CA B5 
154ab     E1 B8 E2 DB | 	byte	$c1, $b6, $c1, $f6, $9f, $8e, $c6, $cf, $cb, $d5, $ca, $b5, $e1, $b8, $e2, $db
154af     D6 DD EC E5 
154b3     FC F0 00 15 
154b7     EC 23 18 F3 
154bb     0E 30 0A 42 | 	byte	$d6, $dd, $ec, $e5, $fc, $f0, $00, $15, $ec, $23, $18, $f3, $0e, $30, $0a, $42
154bf     47 1B 19 31 
154c3     30 4D 2E 3D 
154c7     40 1C 50 45 
154cb     2F 55 2A 32 | 	byte	$47, $1b, $19, $31, $30, $4d, $2e, $3d, $40, $1c, $50, $45, $2f, $55, $2a, $32
154cf     4B 24 42 31 
154d3     30 27 40 3F 
154d7     3F 62 38 1C 
154db     45 2F 43 04 | 	byte	$4b, $24, $42, $31, $30, $27, $40, $3f, $3f, $62, $38, $1c, $45, $2f, $43, $04
154df     40 44 06 3E 
154e3     15 45 36 02 
154e7     29 1D 1E 1D 
154eb     EF 00 14 08 | 	byte	$40, $44, $06, $3e, $15, $45, $36, $02, $29, $1d, $1e, $1d, $ef, $00, $14, $08
154ef     EF 12 F4 EC 
154f3     F7 EC E3 E6 
154f7     E8 EA FA D1 
154fb     CD B3 0B F9 | 	byte	$ef, $12, $f4, $ec, $f7, $ec, $e3, $e6, $e8, $ea, $fa, $d1, $cd, $b3, $0b, $f9
154ff     AA A8 CC D6 
15503     D1 D2 A2 B2 
15507     BE E1 C8 9C 
1550b     B8 BC CC A5 | 	byte	$aa, $a8, $cc, $d6, $d1, $d2, $a2, $b2, $be, $e1, $c8, $9c, $b8, $bc, $cc, $a5
1550f     8E D7 DE C7 
15513     CB BD EA DF 
15517     CF F8 C2 BE 
1551b     F2 EB FE C9 | 	byte	$8e, $d7, $de, $c7, $cb, $bd, $ea, $df, $cf, $f8, $c2, $be, $f2, $eb, $fe, $c9
1551f     DC 0E D2 13 
15523     F5 CE 28 1F 
15527     E8 1D 04 F0 
1552b     1A 1D 24 FE | 	byte	$dc, $0e, $d2, $13, $f5, $ce, $28, $1f, $e8, $1d, $04, $f0, $1a, $1d, $24, $fe
1552f     04 12 2C 0D 
15533     16 12 32 32 
15537     12 23 25 17 
1553b     3C 29 2A 47 | 	byte	$04, $12, $2c, $0d, $16, $12, $32, $32, $12, $23, $25, $17, $3c, $29, $2a, $47
1553f     48 07 46 41 
15543     32 22 3B 0D 
15547     2A 50 44 14 
1554b     0E 60 57 2A | 	byte	$48, $07, $46, $41, $32, $22, $3b, $0d, $2a, $50, $44, $14, $0e, $60, $57, $2a
1554f     17 2F 17 38 
15553     2C 23 22 44 
15557     1E F0 0D 4A 
1555b     15 20 EE 2A | 	byte	$17, $2f, $17, $38, $2c, $23, $22, $44, $1e, $f0, $0d, $4a, $15, $20, $ee, $2a
1555f     02 18 41 E1 
15563     E5 2E F6 DC 
15567     04 F6 EF DE 
1556b     E8 E2 FA C5 | 	byte	$02, $18, $41, $e1, $e5, $2e, $f6, $dc, $04, $f6, $ef, $de, $e8, $e2, $fa, $c5
1556f     DF F5 C8 C6 
15573     FE AD D4 E9 
15577     99 0C EE BE 
1557b     F0 A6 F5 BC | 	byte	$df, $f5, $c8, $c6, $fe, $ad, $d4, $e9, $99, $0c, $ee, $be, $f0, $a6, $f5, $bc
1557f     DC B9 D4 FA 
15583     C9 DA D2 A8 
15587     D0 F0 E6 D6 
1558b     E0 DD CA C6 | 	byte	$dc, $b9, $d4, $fa, $c9, $da, $d2, $a8, $d0, $f0, $e6, $d6, $e0, $dd, $ca, $c6
1558f     F9 C5 D3 E8 
15593     00 D9 DB CF 
15597     EC 03 F1 F5 
1559b     E0 27 01 07 | 	byte	$f9, $c5, $d3, $e8, $00, $d9, $db, $cf, $ec, $03, $f1, $f5, $e0, $27, $01, $07
1559f     38 08 D5 39 
155a3     14 12 2A 17 
155a7     11 2E 15 0B 
155ab     0C 21 40 18 | 	byte	$38, $08, $d5, $39, $14, $12, $2a, $17, $11, $2e, $15, $0b, $0c, $21, $40, $18
155af     11 20 16 2A 
155b3     59 1C 01 47 
155b7     3B 46 38 0F 
155bb     5F 0F 32 3C | 	byte	$11, $20, $16, $2a, $59, $1c, $01, $47, $3b, $46, $38, $0f, $5f, $0f, $32, $3c
155bf     16 32 2E 31 
155c3     1F 48 18 1D 
155c7     31 06 44 1F 
155cb     0D 3E E7 05 | 	byte	$16, $32, $2e, $31, $1f, $48, $18, $1d, $31, $06, $44, $1f, $0d, $3e, $e7, $05
155cf     3D 08 1E F9 
155d3     1A FC 04 EE 
155d7     18 F4 FA 05 
155db     0A EB 02 E7 | 	byte	$3d, $08, $1e, $f9, $1a, $fc, $04, $ee, $18, $f4, $fa, $05, $0a, $eb, $02, $e7
155df     1D D0 E9 F4 
155e3     E5 DB FA CA 
155e7     E0 E3 BC 05 
155eb     D4 C8 BF 05 | 	byte	$1d, $d0, $e9, $f4, $e5, $db, $fa, $ca, $e0, $e3, $bc, $05, $d4, $c8, $bf, $05
155ef     D8 C6 E9 BF 
155f3     E6 C9 D9 EA 
155f7     BB C8 EF D1 
155fb     F9 DA D3 E9 | 	byte	$d8, $c6, $e9, $bf, $e6, $c9, $d9, $ea, $bb, $c8, $ef, $d1, $f9, $da, $d3, $e9
155ff     BB D9 FB CE 
15603     DF ED E9 DC 
15607     FE F7 FE EF 
1560b     E4 0B D5 F0 | 	byte	$bb, $d9, $fb, $ce, $df, $ed, $e9, $dc, $fe, $f7, $fe, $ef, $e4, $0b, $d5, $f0
1560f     FB 1A 1D E3 
15613     0F 1F F6 1D 
15617     FA 04 0A 19 
1561b     27 03 0B 35 | 	byte	$fb, $1a, $1d, $e3, $0f, $1f, $f6, $1d, $fa, $04, $0a, $19, $27, $03, $0b, $35
1561f     1F 05 20 29 
15623     23 08 2A 34 
15627     21 0B 3B 4D 
1562b     4F 00 49 30 | 	byte	$1f, $05, $20, $29, $23, $08, $2a, $34, $21, $0b, $3b, $4d, $4f, $00, $49, $30
1562f     2F 36 03 04 
15633     2F 20 33 02 
15637     0C 49 1A 2C 
1563b     F2 05 08 03 | 	byte	$2f, $36, $03, $04, $2f, $20, $33, $02, $0c, $49, $1a, $2c, $f2, $05, $08, $03
1563f     28 14 FE EB 
15643     00 1D EF 13 
15647     1B DD FA 00 
1564b     D7 FC 09 09 | 	byte	$28, $14, $fe, $eb, $00, $1d, $ef, $13, $1b, $dd, $fa, $00, $d7, $fc, $09, $09
1564f     DE E3 05 F9 
15653     F1 CB DE 09 
15657     FC DA FA D1 
1565b     E7 0C C0 1C | 	byte	$de, $e3, $05, $f9, $f1, $cb, $de, $09, $fc, $da, $fa, $d1, $e7, $0c, $c0, $1c
1565f     EA 9E FF E5 
15663     ED FD D3 EF 
15667     EE FA 04 F0 
1566b     E5 E8 EE FA | 	byte	$ea, $9e, $ff, $e5, $ed, $fd, $d3, $ef, $ee, $fa, $04, $f0, $e5, $e8, $ee, $fa
1566f     E6 EB D3 EC 
15673     1C F5 DC F8 
15677     E9 E5 14 EB 
1567b     F1 E8 ED 13 | 	byte	$e6, $eb, $d3, $ec, $1c, $f5, $dc, $f8, $e9, $e5, $14, $eb, $f1, $e8, $ed, $13
1567f     19 03 C4 04 
15683     06 F2 0F 07 
15687     E2 0F 1C 02 
1568b     EB FE 09 1D | 	byte	$19, $03, $c4, $04, $06, $f2, $0f, $07, $e2, $0f, $1c, $02, $eb, $fe, $09, $1d
1568f     08 1A 2C 0C 
15693     00 1C 26 07 
15697     06 11 16 12 
1569b     3C DE FE 1E | 	byte	$08, $1a, $2c, $0c, $00, $1c, $26, $07, $06, $11, $16, $12, $3c, $de, $fe, $1e
1569f     08 15 1D 12 
156a3     FB 3C E9 0D 
156a7     12 1A 0D 02 
156ab     15 23 1D E9 | 	byte	$08, $15, $1d, $12, $fb, $3c, $e9, $0d, $12, $1a, $0d, $02, $15, $23, $1d, $e9
156af     01 FC 1A 1F 
156b3     14 F9 F1 02 
156b7     26 21 E3 02 
156bb     13 E3 12 FD | 	byte	$01, $fc, $1a, $1f, $14, $f9, $f1, $02, $26, $21, $e3, $02, $13, $e3, $12, $fd
156bf     11 E6 02 F1 
156c3     12 F5 0B 0A 
156c7     E7 EB 11 F1 
156cb     E4 0A 0F 15 | 	byte	$11, $e6, $02, $f1, $12, $f5, $0b, $0a, $e7, $eb, $11, $f1, $e4, $0a, $0f, $15
156cf     0A F0 06 FB 
156d3     FB EE 09 F1 
156d7     E9 F6 12 F5 
156db     05 FB F1 E7 | 	byte	$0a, $f0, $06, $fb, $fb, $ee, $09, $f1, $e9, $f6, $12, $f5, $05, $fb, $f1, $e7
156df     41 E8 E5 08 
156e3     D7 0E 00 0B 
156e7     E1 E6 08 00 
156eb     EE EF DA FC | 	byte	$41, $e8, $e5, $08, $d7, $0e, $00, $0b, $e1, $e6, $08, $00, $ee, $ef, $da, $fc
156ef     EE EB 15 F2 
156f3     04 F8 DC 24 
156f7     03 F3 F7 E7 
156fb     F4 04 F8 01 | 	byte	$ee, $eb, $15, $f2, $04, $f8, $dc, $24, $03, $f3, $f7, $e7, $f4, $04, $f8, $01
156ff     ED FB 10 F5 
15703     ED 04 0A ED 
15707     DF 05 01 13 
1570b     E1 FF 09 ED | 	byte	$ed, $fb, $10, $f5, $ed, $04, $0a, $ed, $df, $05, $01, $13, $e1, $ff, $09, $ed
1570f     1A 15 FE F6 
15713     E1 10 24 1B 
15717     E7 0F 0F 1B 
1571b     25 EE EF 27 | 	byte	$1a, $15, $fe, $f6, $e1, $10, $24, $1b, $e7, $0f, $0f, $1b, $25, $ee, $ef, $27
1571f     14 FD 12 F6 
15723     19 1C 10 10 
15727     EB FE 34 0C 
1572b     FB 0E 06 38 | 	byte	$14, $fd, $12, $f6, $19, $1c, $10, $10, $eb, $fe, $34, $0c, $fb, $0e, $06, $38
1572f     FD FD 22 D8 
15733     0C 1C 07 0A 
15737     19 E6 1A 0B 
1573b     09 1C E6 01 | 	byte	$fd, $fd, $22, $d8, $0c, $1c, $07, $0a, $19, $e6, $1a, $0b, $09, $1c, $e6, $01
1573f     1C F0 04 18 
15743     1C EE E4 07 
15747     05 FC 04 06 
1574b     E0 E7 11 01 | 	byte	$1c, $f0, $04, $18, $1c, $ee, $e4, $07, $05, $fc, $04, $06, $e0, $e7, $11, $01
1574f     F7 0D DB 0A 
15753     F9 EC FB 15 
15757     08 DE 02 10 
1575b     CD 03 1E EB | 	byte	$f7, $0d, $db, $0a, $f9, $ec, $fb, $15, $08, $de, $02, $10, $cd, $03, $1e, $eb
1575f     EA E4 E4 06 
15763     FC FD EC D4 
15767     0F 09 F2 03 
1576b     02 D5 13 F1 | 	byte	$ea, $e4, $e4, $06, $fc, $fd, $ec, $d4, $0f, $09, $f2, $03, $02, $d5, $13, $f1
1576f     E3 02 15 E5 
15773     0F 08 EF F8 
15777     DD F7 02 09 
1577b     02 FD 02 00 | 	byte	$e3, $02, $15, $e5, $0f, $08, $ef, $f8, $dd, $f7, $02, $09, $02, $fd, $02, $00
1577f     EE 0D FF 1E 
15783     F3 EC 03 0B 
15787     F0 0A 0A F5 
1578b     FB 0F 05 ED | 	byte	$ee, $0d, $ff, $1e, $f3, $ec, $03, $0b, $f0, $0a, $0a, $f5, $fb, $0f, $05, $ed
1578f     0D 1B 11 FB 
15793     0A 02 19 2E 
15797     1F F2 24 FE 
1579b     F8 0B 25 12 | 	byte	$0d, $1b, $11, $fb, $0a, $02, $19, $2e, $1f, $f2, $24, $fe, $f8, $0b, $25, $12
1579f     0D 00 1A EB 
157a3     E9 2B 20 0B 
157a7     E8 FA 21 22 
157ab     F7 EA 19 11 | 	byte	$0d, $00, $1a, $eb, $e9, $2b, $20, $0b, $e8, $fa, $21, $22, $f7, $ea, $19, $11
157af     03 F7 FE 12 
157b3     0E FD 15 04 
157b7     06 FD 01 17 
157bb     F0 19 0D F7 | 	byte	$03, $f7, $fe, $12, $0e, $fd, $15, $04, $06, $fd, $01, $17, $f0, $19, $0d, $f7
157bf     01 F7 09 0C 
157c3     F1 19 0D E2 
157c7     F7 03 E5 04 
157cb     F2 FF FE E8 | 	byte	$01, $f7, $09, $0c, $f1, $19, $0d, $e2, $f7, $03, $e5, $04, $f2, $ff, $fe, $e8
157cf     01 02 E2 0E 
157d3     FF FD DC F1 
157d7     16 D4 F2 EF 
157db     FA 01 01 0B | 	byte	$01, $02, $e2, $0e, $ff, $fd, $dc, $f1, $16, $d4, $f2, $ef, $fa, $01, $01, $0b
157df     FB D4 F0 1C 
157e3     20 E3 D7 10 
157e7     F5 01 0A D5 
157eb     01 08 E9 F7 | 	byte	$fb, $d4, $f0, $1c, $20, $e3, $d7, $10, $f5, $01, $0a, $d5, $01, $08, $e9, $f7
157ef     EE 09 EF 16 
157f3     FD F5 0E 06 
157f7     14 E2 0E 14 
157fb     1A 0C F8 F6 | 	byte	$ee, $09, $ef, $16, $fd, $f5, $0e, $06, $14, $e2, $0e, $14, $1a, $0c, $f8, $f6
157ff     10 20 03 F0 
15803     EF 17 F7 33 
15807     0F D4 0E 0C 
1580b     00 05 FD 0C | 	byte	$10, $20, $03, $f0, $ef, $17, $f7, $33, $0f, $d4, $0e, $0c, $00, $05, $fd, $0c
1580f     00 16 03 F6 
15813     0F EA 0E 12 
15817     0F 01 F6 F8 
1581b     0E 09 04 E1 | 	byte	$00, $16, $03, $f6, $0f, $ea, $0e, $12, $0f, $01, $f6, $f8, $0e, $09, $04, $e1
1581f     FB 0D 02 03 
15823     06 18 02 09 
15827     04 EE 18 0B 
1582b     EB 1D 05 E6 | 	byte	$fb, $0d, $02, $03, $06, $18, $02, $09, $04, $ee, $18, $0b, $eb, $1d, $05, $e6
1582f     F8 0E 07 25 
15833     08 D9 11 0C 
15837     EE 26 11 F0 
1583b     FE 01 1D FC | 	byte	$f8, $0e, $07, $25, $08, $d9, $11, $0c, $ee, $26, $11, $f0, $fe, $01, $1d, $fc
1583f     14 06 0C 10 
15843     F1 09 EA EC 
15847     22 03 F2 05 
1584b     EE 16 15 00 | 	byte	$14, $06, $0c, $10, $f1, $09, $ea, $ec, $22, $03, $f2, $05, $ee, $16, $15, $00
1584f     FB 0E D8 FD 
15853     05 0D FD FB 
15857     E9 EA 09 E8 
1585b     F8 F9 EF DF | 	byte	$fb, $0e, $d8, $fd, $05, $0d, $fd, $fb, $e9, $ea, $09, $e8, $f8, $f9, $ef, $df
1585f     16 FA 01 E5 
15863     FD F3 03 FE 
15867     ED E8 F2 EA 
1586b     07 07 F9 F4 | 	byte	$16, $fa, $01, $e5, $fd, $f3, $03, $fe, $ed, $e8, $f2, $ea, $07, $07, $f9, $f4
1586f     EF EE FB 0B 
15873     EC EC F7 FA 
15877     0A F0 10 F5 
1587b     ED 10 0A 04 | 	byte	$ef, $ee, $fb, $0b, $ec, $ec, $f7, $fa, $0a, $f0, $10, $f5, $ed, $10, $0a, $04
1587f     F3 15 F6 F4 
15883     0D FC 0C 1F 
15887     0F FD 01 F7 
1588b     23 FC 04 2F | 	byte	$f3, $15, $f6, $f4, $0d, $fc, $0c, $1f, $0f, $fd, $01, $f7, $23, $fc, $04, $2f
1588f     09 F9 12 0B 
15893     0F 2E F8 12 
15897     10 00 26 10 
1589b     E6 1E FD 12 | 	byte	$09, $f9, $12, $0b, $0f, $2e, $f8, $12, $10, $00, $26, $10, $e6, $1e, $fd, $12
1589f     15 FB 01 20 
158a3     0E EF 1A F4 
158a7     FC 13 10 F8 
158ab     11 15 10 FA | 	byte	$15, $fb, $01, $20, $0e, $ef, $1a, $f4, $fc, $13, $10, $f8, $11, $15, $10, $fa
158af     FA FF 08 08 
158b3     09 F0 EA 02 
158b7     15 E1 F3 0D 
158bb     E8 03 06 EF | 	byte	$fa, $ff, $08, $08, $09, $f0, $ea, $02, $15, $e1, $f3, $0d, $e8, $03, $06, $ef
158bf     E0 F8 01 06 
158c3     EB FD 0D FB 
158c7     EE 01 EE ED 
158cb     05 05 01 E8 | 	byte	$e0, $f8, $01, $06, $eb, $fd, $0d, $fb, $ee, $01, $ee, $ed, $05, $05, $01, $e8
158cf     DE 18 FD F4 
158d3     F4 E4 FA F1 
158d7     FA FA FE 04 
158db     E6 E9 03 D3 | 	byte	$de, $18, $fd, $f4, $f4, $e4, $fa, $f1, $fa, $fa, $fe, $04, $e6, $e9, $03, $d3
158df     0D FA FD EB 
158e3     FA 04 02 FD 
158e7     EE EF 2D EE 
158eb     0C 03 F3 FB | 	byte	$0d, $fa, $fd, $eb, $fa, $04, $02, $fd, $ee, $ef, $2d, $ee, $0c, $03, $f3, $fb
158ef     FB 02 04 09 
158f3     18 F7 17 1D 
158f7     FC FD 12 21 
158fb     15 01 0D 07 | 	byte	$fb, $02, $04, $09, $18, $f7, $17, $1d, $fc, $fd, $12, $21, $15, $01, $0d, $07
158ff     13 FA F4 1F 
15903     1B 1B F6 F4 
15907     18 0B 16 FC 
1590b     E3 10 1D 1E | 	byte	$13, $fa, $f4, $1f, $1b, $1b, $f6, $f4, $18, $0b, $16, $fc, $e3, $10, $1d, $1e
1590f     01 E6 10 11 
15913     E7 EF 22 0A 
15917     F8 09 F9 E7 
1591b     15 FD 01 F2 | 	byte	$01, $e6, $10, $11, $e7, $ef, $22, $0a, $f8, $09, $f9, $e7, $15, $fd, $01, $f2
1591f     F0 13 F6 F0 
15923     FD 11 F1 F8 
15927     0C F8 06 0A 
1592b     FD F4 0C 05 | 	byte	$f0, $13, $f6, $f0, $fd, $11, $f1, $f8, $0c, $f8, $06, $0a, $fd, $f4, $0c, $05
1592f     EC FC FC FF 
15933     0C F2 02 11 
15937     EC DD 20 0A 
1593b     0F E6 FD FF | 	byte	$ec, $fc, $fc, $ff, $0c, $f2, $02, $11, $ec, $dd, $20, $0a, $0f, $e6, $fd, $ff
1593f     0D 03 EB 17 
15943     FB FC F3 F4 
15947     EF 07 0B FD 
1594b     F5 00 DE 06 | 	byte	$0d, $03, $eb, $17, $fb, $fc, $f3, $f4, $ef, $07, $0b, $fd, $f5, $00, $de, $06
1594f     F8 E8 E9 05 
15953     0F FC F2 DB 
15957     0C 09 E7 F6 
1595b     08 04 EF F8 | 	byte	$f8, $e8, $e9, $05, $0f, $fc, $f2, $db, $0c, $09, $e7, $f6, $08, $04, $ef, $f8
1595f     0A F3 10 1D 
15963     00 03 E5 01 
15967     1C 07 07 12 
1596b     FA 0D 18 F2 | 	byte	$0a, $f3, $10, $1d, $00, $03, $e5, $01, $1c, $07, $07, $12, $fa, $0d, $18, $f2
1596f     15 1B 04 F2 
15973     0D 10 FB 09 
15977     FC 0C 13 FA 
1597b     07 33 EF FD | 	byte	$15, $1b, $04, $f2, $0d, $10, $fb, $09, $fc, $0c, $13, $fa, $07, $33, $ef, $fd
1597f     20 0C FE 0C 
15983     FB 15 0C 0E 
15987     08 F9 F0 11 
1598b     18 F6 DB 19 | 	byte	$20, $0c, $fe, $0c, $fb, $15, $0c, $0e, $08, $f9, $f0, $11, $18, $f6, $db, $19
1598f     03 05 02 E0 
15993     05 05 F5 04 
15997     04 05 04 06 
1599b     E9 EF 1A 0A | 	byte	$03, $05, $02, $e0, $05, $05, $f5, $04, $04, $05, $04, $06, $e9, $ef, $1a, $0a
1599f     06 FE 00 07 
159a3     0B FB E6 FD 
159a7     FC 10 FA FC 
159ab     E0 F0 0A EA | 	byte	$06, $fe, $00, $07, $0b, $fb, $e6, $fd, $fc, $10, $fa, $fc, $e0, $f0, $0a, $ea
159af     F1 E8 E5 F7 
159b3     FC EA FD F8 
159b7     DB 06 F7 E6 
159bb     FA 04 FD E9 | 	byte	$f1, $e8, $e5, $f7, $fc, $ea, $fd, $f8, $db, $06, $f7, $e6, $fa, $04, $fd, $e9
159bf     E9 06 07 0A 
159c3     E8 12 16 01 
159c7     00 F3 FF 2F 
159cb     0A F8 0D 20 | 	byte	$e9, $06, $07, $0a, $e8, $12, $16, $01, $00, $f3, $ff, $2f, $0a, $f8, $0d, $20
159cf     10 08 ED 13 
159d3     1B 0E 0D F3 
159d7     03 16 FC 0E 
159db     08 06 08 FD | 	byte	$10, $08, $ed, $13, $1b, $0e, $0d, $f3, $03, $16, $fc, $0e, $08, $06, $08, $fd
159df     09 0D 20 FC 
159e3     EF 18 0D F7 
159e7     0F EE FE 05 
159eb     0B EE ED 1A | 	byte	$09, $0d, $20, $fc, $ef, $18, $0d, $f7, $0f, $ee, $fe, $05, $0b, $ee, $ed, $1a
159ef     1D F6 08 F1 
159f3     F5 04 FF 1E 
159f7     EA F0 10 FE 
159fb     06 19 FF FE | 	byte	$1d, $f6, $08, $f1, $f5, $04, $ff, $1e, $ea, $f0, $10, $fe, $06, $19, $ff, $fe
159ff     00 FD 02 0B 
15a03     FA 01 0C 00 
15a07     F3 02 08 0B 
15a0b     F5 0C FC F8 | 	byte	$00, $fd, $02, $0b, $fa, $01, $0c, $00, $f3, $02, $08, $0b, $f5, $0c, $fc, $f8
15a0f     E2 0B FD FA 
15a13     F5 EB FC F7 
15a17     E0 F6 FF 15 
15a1b     F6 EE F5 E6 | 	byte	$e2, $0b, $fd, $fa, $f5, $eb, $fc, $f7, $e0, $f6, $ff, $15, $f6, $ee, $f5, $e6
15a1f     E4 FF FF 06 
15a23     E9 F2 F2 FC 
15a27     03 FE 06 FF 
15a2b     EE 13 05 F4 | 	byte	$e4, $ff, $ff, $06, $e9, $f2, $f2, $fc, $03, $fe, $06, $ff, $ee, $13, $05, $f4
15a2f     0F 1D 23 00 
15a33     08 15 01 00 
15a37     23 0E 03 13 
15a3b     02 1B 08 12 | 	byte	$0f, $1d, $23, $00, $08, $15, $01, $00, $23, $0e, $03, $13, $02, $1b, $08, $12
15a3f     0F 02 09 FD 
15a43     11 03 08 01 
15a47     05 03 16 08 
15a4b     0B FE 05 04 | 	byte	$0f, $02, $09, $fd, $11, $03, $08, $01, $05, $03, $16, $08, $0b, $fe, $05, $04
15a4f     0B E3 FB 1D 
15a53     03 05 01 09 
15a57     09 01 FD FF 
15a5b     ED EC 08 0A | 	byte	$0b, $e3, $fb, $1d, $03, $05, $01, $09, $09, $01, $fd, $ff, $ed, $ec, $08, $0a
15a5f     F5 E5 F7 16 
15a63     01 F9 E2 FA 
15a67     E1 06 01 F9 
15a6b     02 F1 E0 FB | 	byte	$f5, $e5, $f7, $16, $01, $f9, $e2, $fa, $e1, $06, $01, $f9, $02, $f1, $e0, $fb
15a6f     0C 06 E9 DD 
15a73     F6 14 01 08 
15a77     EC FD 0A 03 
15a7b     01 EB F7 00 | 	byte	$0c, $06, $e9, $dd, $f6, $14, $01, $08, $ec, $fd, $0a, $03, $01, $eb, $f7, $00
15a7f     10 E7 00 08 
15a83     06 11 FA EF 
15a87     13 EF F4 05 
15a8b     0E FE F6 F7 | 	byte	$10, $e7, $00, $08, $06, $11, $fa, $ef, $13, $ef, $f4, $05, $0e, $fe, $f6, $f7
15a8f     20 FB 04 02 
15a93     FE 01 F4 0F 
15a97     2C 09 02 09 
15a9b     01 0F 13 08 | 	byte	$20, $fb, $04, $02, $fe, $01, $f4, $0f, $2c, $09, $02, $09, $01, $0f, $13, $08
15a9f     F6 0F 14 0D 
15aa3     FA 08 15 F5 
15aa7     31 11 E5 0A 
15aab     11 02 19 11 | 	byte	$f6, $0f, $14, $0d, $fa, $08, $15, $f5, $31, $11, $e5, $0a, $11, $02, $19, $11
15aaf     FD FB 0D 0C 
15ab3     FA 03 05 00 
15ab7     00 01 03 05 
15abb     08 09 01 D9 | 	byte	$fd, $fb, $0d, $0c, $fa, $03, $05, $00, $00, $01, $03, $05, $08, $09, $01, $d9
15abf     12 04 E2 04 
15ac3     07 F8 E6 FC 
15ac7     ED 01 0B F3 
15acb     FC ED FF 05 | 	byte	$12, $04, $e2, $04, $07, $f8, $e6, $fc, $ed, $01, $0b, $f3, $fc, $ed, $ff, $05
15acf     EC F4 0C FF 
15ad3     F8 F3 F7 F7 
15ad7     08 F4 F9 03 
15adb     F4 F4 F5 F2 | 	byte	$ec, $f4, $0c, $ff, $f8, $f3, $f7, $f7, $08, $f4, $f9, $03, $f4, $f4, $f5, $f2
15adf     FD 0A F7 FE 
15ae3     F7 ED 08 10 
15ae7     EF FD F3 01 
15aeb     03 F2 F8 F1 | 	byte	$fd, $0a, $f7, $fe, $f7, $ed, $08, $10, $ef, $fd, $f3, $01, $03, $f2, $f8, $f1
15aef     08 FE 08 FA 
15af3     F2 FA 10 05 
15af7     F2 03 03 18 
15afb     07 E9 17 18 | 	byte	$08, $fe, $08, $fa, $f2, $fa, $10, $05, $f2, $03, $03, $18, $07, $e9, $17, $18
15aff     04 0B 10 0C 
15b03     FC 16 FE 09 
15b07     1C 0B 10 09 
15b0b     14 1C 11 14 | 	byte	$04, $0b, $10, $0c, $fc, $16, $fe, $09, $1c, $0b, $10, $09, $14, $1c, $11, $14
15b0f     0B 06 05 0F 
15b13     0F 18 19 17 
15b17     F4 0E 07 12 
15b1b     18 06 EF 0B | 	byte	$0b, $06, $05, $0f, $0f, $18, $19, $17, $f4, $0e, $07, $12, $18, $06, $ef, $0b
15b1f     12 FA FB F5 
15b23     02 02 06 FD 
15b27     F3 E9 F3 F6 
15b2b     EF FC FB E8 | 	byte	$12, $fa, $fb, $f5, $02, $02, $06, $fd, $f3, $e9, $f3, $f6, $ef, $fc, $fb, $e8
15b2f     EA EF F3 F8 
15b33     FC F2 F2 EB 
15b37     DD E8 10 F9 
15b3b     F1 04 FA E2 | 	byte	$ea, $ef, $f3, $f8, $fc, $f2, $f2, $eb, $dd, $e8, $10, $f9, $f1, $04, $fa, $e2
15b3f     F5 FC F2 05 
15b43     00 E8 F5 03 
15b47     FB E7 FD 01 
15b4b     FC F1 03 03 | 	byte	$f5, $fc, $f2, $05, $00, $e8, $f5, $03, $fb, $e7, $fd, $01, $fc, $f1, $03, $03
15b4f     F3 F0 FC F8 
15b53     01 FB 0C EA 
15b57     08 15 09 FC 
15b5b     FA 0A 00 F7 | 	byte	$f3, $f0, $fc, $f8, $01, $fb, $0c, $ea, $08, $15, $09, $fc, $fa, $0a, $00, $f7
15b5f     19 08 09 F9 
15b63     0C 0F 0A 08 
15b67     1A FA 1F 10 
15b6b     03 FC 0D 27 | 	byte	$19, $08, $09, $f9, $0c, $0f, $0a, $08, $1a, $fa, $1f, $10, $03, $fc, $0d, $27
15b6f     18 07 10 06 
15b73     1A 18 16 F7 
15b77     21 13 0D 1F 
15b7b     F7 1A 0B 09 | 	byte	$18, $07, $10, $06, $1a, $18, $16, $f7, $21, $13, $0d, $1f, $f7, $1a, $0b, $09
15b7f     FE 17 11 1E 
15b83     F1 F2 0E 1D 
15b87     FD 00 F4 F5 
15b8b     14 00 F5 F3 | 	byte	$fe, $17, $11, $1e, $f1, $f2, $0e, $1d, $fd, $00, $f4, $f5, $14, $00, $f5, $f3
15b8f     FC FE ED F9 
15b93     F1 F9 F2 01 
15b97     F7 F3 FB E6 
15b9b     F4 F0 FE EB | 	byte	$fc, $fe, $ed, $f9, $f1, $f9, $f2, $01, $f7, $f3, $fb, $e6, $f4, $f0, $fe, $eb
15b9f     EB F3 E7 F6 
15ba3     EE F3 E6 E4 
15ba7     08 F3 DF EC 
15bab     FB 00 F1 F8 | 	byte	$eb, $f3, $e7, $f6, $ee, $f3, $e6, $e4, $08, $f3, $df, $ec, $fb, $00, $f1, $f8
15baf     F5 F3 F4 FE 
15bb3     09 F5 F9 FF 
15bb7     02 0A FC FE 
15bbb     F9 0D 06 F9 | 	byte	$f5, $f3, $f4, $fe, $09, $f5, $f9, $ff, $02, $0a, $fc, $fe, $f9, $0d, $06, $f9
15bbf     07 17 11 05 
15bc3     FF EE 05 0E 
15bc7     0E 0E 17 F5 
15bcb     03 10 05 08 | 	byte	$07, $17, $11, $05, $ff, $ee, $05, $0e, $0e, $0e, $17, $f5, $03, $10, $05, $08
15bcf     12 12 FE 0A 
15bd3     22 1B FE 16 
15bd7     17 16 FF 0B 
15bdb     23 14 0A 0D | 	byte	$12, $12, $fe, $0a, $22, $1b, $fe, $16, $17, $16, $ff, $0b, $23, $14, $0a, $0d
15bdf     10 03 11 14 
15be3     02 FC 13 12 
15be7     17 F5 04 0D 
15beb     02 04 0F F0 | 	byte	$10, $03, $11, $14, $02, $fc, $13, $12, $17, $f5, $04, $0d, $02, $04, $0f, $f0
15bef     FB 0E 08 F2 
15bf3     F8 F9 0E F6 
15bf7     F6 01 F9 F5 
15bfb     EB F8 02 F7 | 	byte	$fb, $0e, $08, $f2, $f8, $f9, $0e, $f6, $f6, $01, $f9, $f5, $eb, $f8, $02, $f7
15bff     FA F0 05 F6 
15c03     05 E7 E0 0A 
15c07     F2 02 FE EC 
15c0b     F3 09 F7 EC | 	byte	$fa, $f0, $05, $f6, $05, $e7, $e0, $0a, $f2, $02, $fe, $ec, $f3, $09, $f7, $ec
15c0f     F5 F5 EF 03 
15c13     F7 F9 08 FB 
15c17     EA 05 F1 FD 
15c1b     FC 0B F5 F4 | 	byte	$f5, $f5, $ef, $03, $f7, $f9, $08, $fb, $ea, $05, $f1, $fd, $fc, $0b, $f5, $f4
15c1f     F1 F1 08 11 
15c23     FE E6 FE F1 
15c27     0C 12 03 F4 
15c2b     FD 06 12 12 | 	byte	$f1, $f1, $08, $11, $fe, $e6, $fe, $f1, $0c, $12, $03, $f4, $fd, $06, $12, $12
15c2f     F3 0C 02 12 
15c33     F4 0F 02 08 
15c37     09 10 11 02 
15c3b     FC 10 17 F7 | 	byte	$f3, $0c, $02, $12, $f4, $0f, $02, $08, $09, $10, $11, $02, $fc, $10, $17, $f7
15c3f     05 0D 1A 08 
15c43     00 0F 07 F8 
15c47     0F 12 0A 1C 
15c4b     08 FB 0C 15 | 	byte	$05, $0d, $1a, $08, $00, $0f, $07, $f8, $0f, $12, $0a, $1c, $08, $fb, $0c, $15
15c4f     12 F9 0F 1A 
15c53     0E FD 13 13 
15c57     04 02 04 02 
15c5b     F6 11 03 03 | 	byte	$12, $f9, $0f, $1a, $0e, $fd, $13, $13, $04, $02, $04, $02, $f6, $11, $03, $03
15c5f     0A E8 01 FC 
15c63     FB EF 0A 06 
15c67     EE F2 FA E6 
15c6b     F6 F9 04 F2 | 	byte	$0a, $e8, $01, $fc, $fb, $ef, $0a, $06, $ee, $f2, $fa, $e6, $f6, $f9, $04, $f2
15c6f     DF F8 FC F0 
15c73     EB E4 FD FC 
15c77     F4 F6 F0 FB 
15c7b     F3 FA 00 EA | 	byte	$df, $f8, $fc, $f0, $eb, $e4, $fd, $fc, $f4, $f6, $f0, $fb, $f3, $fa, $00, $ea
15c7f     08 F3 E0 01 
15c83     FC E1 17 03 
15c87     E4 FF FD FF 
15c8b     02 ED 09 FF | 	byte	$08, $f3, $e0, $01, $fc, $e1, $17, $03, $e4, $ff, $fd, $ff, $02, $ed, $09, $ff
15c8f     F5 F7 0B 03 
15c93     08 09 05 00 
15c97     F6 1B F4 06 
15c9b     1F 01 F8 FD | 	byte	$f5, $f7, $0b, $03, $08, $09, $05, $00, $f6, $1b, $f4, $06, $1f, $01, $f8, $fd
15c9f     0D 11 09 08 
15ca3     06 0C 02 0E 
15ca7     03 FB 1D 0A 
15cab     11 08 F8 16 | 	byte	$0d, $11, $09, $08, $06, $0c, $02, $0e, $03, $fb, $1d, $0a, $11, $08, $f8, $16
15caf     20 F9 07 12 
15cb3     FD 0D 15 08 
15cb7     FD 0F 03 17 
15cbb     00 FE 08 1F | 	byte	$20, $f9, $07, $12, $fd, $0d, $15, $08, $fd, $0f, $03, $17, $00, $fe, $08, $1f
15cbf     00 04 11 F8 
15cc3     01 01 F7 14 
15cc7     03 00 01 F7 
15ccb     05 FD F1 FE | 	byte	$00, $04, $11, $f8, $01, $01, $f7, $14, $03, $00, $01, $f7, $05, $fd, $f1, $fe
15ccf     19 02 EB F4 
15cd3     F5 01 08 EF 
15cd7     FE 00 F9 EB 
15cdb     FD F5 FC F2 | 	byte	$19, $02, $eb, $f4, $f5, $01, $08, $ef, $fe, $00, $f9, $eb, $fd, $f5, $fc, $f2
15cdf     F8 FD F3 F1 
15ce3     06 F1 FC F6 
15ce7     FB F9 02 F6 
15ceb     F3 01 FA 02 | 	byte	$f8, $fd, $f3, $f1, $06, $f1, $fc, $f6, $fb, $f9, $02, $f6, $f3, $01, $fa, $02
15cef     FB FD F6 FC 
15cf3     0B F5 F6 FE 
15cf7     F8 04 FE FE 
15cfb     FC 12 02 F2 | 	byte	$fb, $fd, $f6, $fc, $0b, $f5, $f6, $fe, $f8, $04, $fe, $fe, $fc, $12, $02, $f2
15cff     06 0B FF 04 
15d03     FB 0F FC 0F 
15d07     10 F9 11 0B 
15d0b     FD F6 09 1C | 	byte	$06, $0b, $ff, $04, $fb, $0f, $fc, $0f, $10, $f9, $11, $0b, $fd, $f6, $09, $1c
15d0f     0B 00 04 06 
15d13     18 0C F8 F5 
15d17     14 0C 02 10 
15d1b     FE 03 06 03 | 	byte	$0b, $00, $04, $06, $18, $0c, $f8, $f5, $14, $0c, $02, $10, $fe, $03, $06, $03
15d1f     08 06 FE 01 
15d23     0F 03 FB 01 
15d27     07 09 07 0A 
15d2b     0B F4 FC 07 | 	byte	$08, $06, $fe, $01, $0f, $03, $fb, $01, $07, $09, $07, $0a, $0b, $f4, $fc, $07
15d2f     01 FD 0B FD 
15d33     FF F9 09 F4 
15d37     EF 0A 02 F6 
15d3b     FD F5 F4 FF | 	byte	$01, $fd, $0b, $fd, $ff, $f9, $09, $f4, $ef, $0a, $02, $f6, $fd, $f5, $f4, $ff
15d3f     10 03 ED 02 
15d43     F8 F4 F9 0A 
15d47     FD F8 FE FF 
15d4b     F9 FD 02 EC | 	byte	$10, $03, $ed, $02, $f8, $f4, $f9, $0a, $fd, $f8, $fe, $ff, $f9, $fd, $02, $ec
15d4f     06 F7 FB FE 
15d53     04 FD 01 FD 
15d57     FC F3 01 FB 
15d5b     FF FB FF 0A | 	byte	$06, $f7, $fb, $fe, $04, $fd, $01, $fd, $fc, $f3, $01, $fb, $ff, $fb, $ff, $0a
15d5f     F9 FD FE 04 
15d63     0B F9 F5 08 
15d67     0E FE FF 0E 
15d6b     00 06 05 0B | 	byte	$f9, $fd, $fe, $04, $0b, $f9, $f5, $08, $0e, $fe, $ff, $0e, $00, $06, $05, $0b
15d6f     0A FD 09 10 
15d73     F1 06 08 FC 
15d77     0A FD FF 06 
15d7b     01 FB 08 F6 | 	byte	$0a, $fd, $09, $10, $f1, $06, $08, $fc, $0a, $fd, $ff, $06, $01, $fb, $08, $f6
15d7f     F9 07 10 FA 
15d83     FA F4 0D 09 
15d87     01 00 F8 F9 
15d8b     0B FC F1 0B | 	byte	$f9, $07, $10, $fa, $fa, $f4, $0d, $09, $01, $00, $f8, $f9, $0b, $fc, $f1, $0b
15d8f     0F 05 FA 0B 
15d93     F5 01 08 09 
15d97     FF F1 03 04 
15d9b     07 06 FF 04 | 	byte	$0f, $05, $fa, $0b, $f5, $01, $08, $09, $ff, $f1, $03, $04, $07, $06, $ff, $04
15d9f     FA FC FC 14 
15da3     00 F4 FB 03 
15da7     FA 0E 02 F5 
15dab     06 FD 00 FA | 	byte	$fa, $fc, $fc, $14, $00, $f4, $fb, $03, $fa, $0e, $02, $f5, $06, $fd, $00, $fa
15daf     03 00 0F 04 
15db3     F7 FF 02 0E 
15db7     FC F7 10 09 
15dbb     EB 06 11 FD | 	byte	$03, $00, $0f, $04, $f7, $ff, $02, $0e, $fc, $f7, $10, $09, $eb, $06, $11, $fd
15dbf     FE F1 FB 0A 
15dc3     FE FF FA FD 
15dc7     08 07 04 ED 
15dcb     F9 02 08 0A | 	byte	$fe, $f1, $fb, $0a, $fe, $ff, $fa, $fd, $08, $07, $04, $ed, $f9, $02, $08, $0a
15dcf     FE 00 FD 03 
15dd3     08 FE 06 00 
15dd7     07 01 FA 03 
15ddb     0D FA FF 02 | 	byte	$fe, $00, $fd, $03, $08, $fe, $06, $00, $07, $01, $fa, $03, $0d, $fa, $ff, $02
15ddf     03 08 11 F6 
15de3     09 FF F9 06 
15de7     07 F5 0C FC 
15deb     0B F7 F4 00 | 	byte	$03, $08, $11, $f6, $09, $ff, $f9, $06, $07, $f5, $0c, $fc, $0b, $f7, $f4, $00
15def     08 F6 02 FB 
15df3     05 F7 FC 03 
15df7     07 0C F1 FA 
15dfb     15 F2 00 FD | 	byte	$08, $f6, $02, $fb, $05, $f7, $fc, $03, $07, $0c, $f1, $fa, $15, $f2, $00, $fd
15dff     F5 18 03 ED 
15e03     07 F2 0B 0A 
15e07     09 FB 0F FE 
15e0b     02 0E F9 F7 | 	byte	$f5, $18, $03, $ed, $07, $f2, $0b, $0a, $09, $fb, $0f, $fe, $02, $0e, $f9, $f7
15e0f     0D 0A F7 FE 
15e13     0A 02 F8 03 
15e17     0C F3 07 05 
15e1b     FA F2 06 FE | 	byte	$0d, $0a, $f7, $fe, $0a, $02, $f8, $03, $0c, $f3, $07, $05, $fa, $f2, $06, $fe
15e1f     03 0A EC 03 
15e23     03 FC 06 F6 
15e27     F9 0E 05 F4 
15e2b     FC FB 06 0F | 	byte	$03, $0a, $ec, $03, $03, $fc, $06, $f6, $f9, $0e, $05, $f4, $fc, $fb, $06, $0f
15e2f     F8 FB FF FB 
15e33     FF 19 FB F5 
15e37     FE FD 0A 07 
15e3b     0A F8 04 04 | 	byte	$f8, $fb, $ff, $fb, $ff, $19, $fb, $f5, $fe, $fd, $0a, $07, $0a, $f8, $04, $04
15e3f     10 06 FC 0E 
15e43     FB F6 0C 14 
15e47     F6 FA 12 08 
15e4b     08 FE 08 04 | 	byte	$10, $06, $fc, $0e, $fb, $f6, $0c, $14, $f6, $fa, $12, $08, $08, $fe, $08, $04
15e4f     01 00 10 0B 
15e53     05 02 F6 0B 
15e57     0B FE 04 01 
15e5b     F5 FA 0C FF | 	byte	$01, $00, $10, $0b, $05, $02, $f6, $0b, $0b, $fe, $04, $01, $f5, $fa, $0c, $ff
15e5f     F1 0A 08 F8 
15e63     02 FD FC 04 
15e67     F7 FF FA F3 
15e6b     12 F7 EF FD | 	byte	$f1, $0a, $08, $f8, $02, $fd, $fc, $04, $f7, $ff, $fa, $f3, $12, $f7, $ef, $fd
15e6f     0D FA F5 05 
15e73     FA EE 10 F3 
15e77     F4 05 FC 00 
15e7b     04 F9 09 FB | 	byte	$0d, $fa, $f5, $05, $fa, $ee, $10, $f3, $f4, $05, $fc, $00, $04, $f9, $09, $fb
15e7f     F0 FB 0D 01 
15e83     FA F6 FF 0A 
15e87     06 EA 02 FF 
15e8b     F7 05 FE 07 | 	byte	$f0, $fb, $0d, $01, $fa, $f6, $ff, $0a, $06, $ea, $02, $ff, $f7, $05, $fe, $07
15e8f     01 FB FA 0F 
15e93     0D F0 FE 09 
15e97     0A FD FE 01 
15e9b     0B 00 01 10 | 	byte	$01, $fb, $fa, $0f, $0d, $f0, $fe, $09, $0a, $fd, $fe, $01, $0b, $00, $01, $10
15e9f     04 FE 01 09 
15ea3     FE 03 03 0A 
15ea7     05 FF 10 07 
15eab     F7 02 0F 0E | 	byte	$04, $fe, $01, $09, $fe, $03, $03, $0a, $05, $ff, $10, $07, $f7, $02, $0f, $0e
15eaf     ED 05 0B FF 
15eb3     FF 0A 08 FB 
15eb7     06 09 F2 05 
15ebb     10 FE FB 02 | 	byte	$ed, $05, $0b, $ff, $ff, $0a, $08, $fb, $06, $09, $f2, $05, $10, $fe, $fb, $02
15ebf     07 06 08 F8 
15ec3     F4 07 FD FF 
15ec7     08 FA 02 0D 
15ecb     FD E8 00 04 | 	byte	$07, $06, $08, $f8, $f4, $07, $fd, $ff, $08, $fa, $02, $0d, $fd, $e8, $00, $04
15ecf     04 05 F3 F4 
15ed3     0D 09 09 EC 
15ed7     F9 0E F7 FF 
15edb     FB FE 0E 04 | 	byte	$04, $05, $f3, $f4, $0d, $09, $09, $ec, $f9, $0e, $f7, $ff, $fb, $fe, $0e, $04
15edf     F2 08 FB F5 
15ee3     FE F4 FD 05 
15ee7     05 F0 08 F3 
15eeb     FE FF F2 FB | 	byte	$f2, $08, $fb, $f5, $fe, $f4, $fd, $05, $05, $f0, $08, $f3, $fe, $ff, $f2, $fb
15eef     00 FD F9 04 
15ef3     FD FC FC 04 
15ef7     FC F8 07 F1 
15efb     FC FD 04 01 | 	byte	$00, $fd, $f9, $04, $fd, $fc, $fc, $04, $fc, $f8, $07, $f1, $fc, $fd, $04, $01
15eff     FE F9 03 FE 
15f03     16 06 FA E8 
15f07     14 13 FB FD 
15f0b     10 03 FE 0C | 	byte	$fe, $f9, $03, $fe, $16, $06, $fa, $e8, $14, $13, $fb, $fd, $10, $03, $fe, $0c
15f0f     04 F7 01 0C 
15f13     01 F7 0B 0A 
15f17     0A 00 03 00 
15f1b     03 0D 07 02 | 	byte	$04, $f7, $01, $0c, $01, $f7, $0b, $0a, $0a, $00, $03, $00, $03, $0d, $07, $02
15f1f     FE 13 08 03 
15f23     04 01 0C 0A 
15f27     F8 03 13 FD 
15f2b     01 07 F5 14 | 	byte	$fe, $13, $08, $03, $04, $01, $0c, $0a, $f8, $03, $13, $fd, $01, $07, $f5, $14
15f2f     15 F7 F7 0C 
15f33     FF FF FF FA 
15f37     08 00 01 0B 
15f3b     FE F6 FD FD | 	byte	$15, $f7, $f7, $0c, $ff, $ff, $ff, $fa, $08, $00, $01, $0b, $fe, $f6, $fd, $fd
15f3f     05 00 FB F6 
15f43     02 FA 03 09 
15f47     02 F0 F9 F6 
15f4b     06 FE FB 04 | 	byte	$05, $00, $fb, $f6, $02, $fa, $03, $09, $02, $f0, $f9, $f6, $06, $fe, $fb, $04
15f4f     F5 F6 02 F9 
15f53     06 FA EF 01 
15f57     05 F9 FD 00 
15f5b     FD 06 00 F8 | 	byte	$f5, $f6, $02, $f9, $06, $fa, $ef, $01, $05, $f9, $fd, $00, $fd, $06, $00, $f8
15f5f     00 FF 03 05 
15f63     F7 FB 06 F7 
15f67     00 00 08 FB 
15f6b     F9 FF 04 03 | 	byte	$00, $ff, $03, $05, $f7, $fb, $06, $f7, $00, $00, $08, $fb, $f9, $ff, $04, $03
15f6f     0A F6 F6 07 
15f73     01 F9 05 F8 
15f77     08 01 08 05 
15f7b     01 FB 0C 00 | 	byte	$0a, $f6, $f6, $07, $01, $f9, $05, $f8, $08, $01, $08, $05, $01, $fb, $0c, $00
15f7f     F5 00 0A FD 
15f83     01 15 FE 00 
15f87     FC 10 0A FD 
15f8b     FB 07 FF F9 | 	byte	$f5, $00, $0a, $fd, $01, $15, $fe, $00, $fc, $10, $0a, $fd, $fb, $07, $ff, $f9
15f8f     0B 03 01 0D 
15f93     FB F7 13 07 
15f97     02 03 F1 0B 
15f9b     0E 07 FA 02 | 	byte	$0b, $03, $01, $0d, $fb, $f7, $13, $07, $02, $03, $f1, $0b, $0e, $07, $fa, $02
15f9f     F4 11 0C FA 
15fa3     F9 0E 01 05 
15fa7     FF FE FD 07 
15fab     02 01 03 FE | 	byte	$f4, $11, $0c, $fa, $f9, $0e, $01, $05, $ff, $fe, $fd, $07, $02, $01, $03, $fe
15faf     FE 09 F6 0C 
15fb3     01 F9 F3 0A 
15fb7     05 FA F8 FF 
15fbb     11 05 F2 F5 | 	byte	$fe, $09, $f6, $0c, $01, $f9, $f3, $0a, $05, $fa, $f8, $ff, $11, $05, $f2, $f5
15fbf     07 08 08 FB 
15fc3     FB 07 FB 04 
15fc7     03 F7 00 F9 
15fcb     FE 0B 02 F8 | 	byte	$07, $08, $08, $fb, $fb, $07, $fb, $04, $03, $f7, $00, $f9, $fe, $0b, $02, $f8
15fcf     09 FC 05 F8 
15fd3     F9 0A FE 08 
15fd7     0F FA F6 FF 
15fdb     09 0D FD F9 | 	byte	$09, $fc, $05, $f8, $f9, $0a, $fe, $08, $0f, $fa, $f6, $ff, $09, $0d, $fd, $f9
15fdf     08 FF 04 04 
15fe3     FA 01 0E F8 
15fe7     01 03 01 FD 
15feb     FF 01 01 FB | 	byte	$08, $ff, $04, $04, $fa, $01, $0e, $f8, $01, $03, $01, $fd, $ff, $01, $01, $fb
15fef     06 FF F3 0F 
15ff3     13 F4 F8 00 
15ff7     05 0E 03 F8 
15ffb     07 FF F7 04 | 	byte	$06, $ff, $f3, $0f, $13, $f4, $f8, $00, $05, $0e, $03, $f8, $07, $ff, $f7, $04
15fff     FC F8 11 0A 
16003     FA FA FC FE 
16007     FF FD 11 FE 
1600b     F1 07 03 FD | 	byte	$fc, $f8, $11, $0a, $fa, $fa, $fc, $fe, $ff, $fd, $11, $fe, $f1, $07, $03, $fd
1600f     00 F4 0B 06 
16013     F4 FA 0D 03 
16017     F2 03 07 FA 
1601b     00 08 05 FF | 	byte	$00, $f4, $0b, $06, $f4, $fa, $0d, $03, $f2, $03, $07, $fa, $00, $08, $05, $ff
1601f     FC 0D FE F1 
16023     06 0F FD F8 
16027     05 07 07 F9 
1602b     F9 0A FF FE | 	byte	$fc, $0d, $fe, $f1, $06, $0f, $fd, $f8, $05, $07, $07, $f9, $f9, $0a, $ff, $fe
1602f     0E 01 FA 02 
16033     05 FF 01 00 
16037     09 05 02 0C 
1603b     0C 0C F9 01 | 	byte	$0e, $01, $fa, $02, $05, $ff, $01, $00, $09, $05, $02, $0c, $0c, $0c, $f9, $01
1603f     00 FE 0E 08 
16043     F2 03 0A 08 
16047     01 FE FA 04 
1604b     FA 06 FF FE | 	byte	$00, $fe, $0e, $08, $f2, $03, $0a, $08, $01, $fe, $fa, $04, $fa, $06, $ff, $fe
1604f     04 01 00 FC 
16053     FA 03 09 F2 
16057     FE FF 06 F9 
1605b     02 FD 01 0B | 	byte	$04, $01, $00, $fc, $fa, $03, $09, $f2, $fe, $ff, $06, $f9, $02, $fd, $01, $0b
1605f     F0 F9 08 05 
16063     04 0B F7 00 
16067     00 01 01 07 
1606b     F4 FC 07 05 | 	byte	$f0, $f9, $08, $05, $04, $0b, $f7, $00, $00, $01, $01, $07, $f4, $fc, $07, $05
1606f     00 ED 0E 09 
16073     F0 05 02 FD 
16077     09 FB F9 F6 
1607b     11 F8 05 02 | 	byte	$00, $ed, $0e, $09, $f0, $05, $02, $fd, $09, $fb, $f9, $f6, $11, $f8, $05, $02
1607f     01 ED 02 0B 
16083     F6 F7 06 F9 
16087     FA 07 F4 F5 
1608b     0B F0 F9 01 | 	byte	$01, $ed, $02, $0b, $f6, $f7, $06, $f9, $fa, $07, $f4, $f5, $0b, $f0, $f9, $01
1608f     04 FA FA F8 
16093     01 FF 01 08 
16097     FA FD 01 05 
1609b     06 FC 05 FF | 	byte	$04, $fa, $fa, $f8, $01, $ff, $01, $08, $fa, $fd, $01, $05, $06, $fc, $05, $ff
1609f     02 15 FF F5 
160a3     15 01 F8 0F 
160a7     04 08 04 0B 
160ab     02 00 12 14 | 	byte	$02, $15, $ff, $f5, $15, $01, $f8, $0f, $04, $08, $04, $0b, $02, $00, $12, $14
160af     05 FA 0C 02 
160b3     0B 0F 05 FE 
160b7     09 08 FE 06 
160bb     0E 08 F5 09 | 	byte	$05, $fa, $0c, $02, $0b, $0f, $05, $fe, $09, $08, $fe, $06, $0e, $08, $f5, $09
160bf     07 0A 0B 03 
160c3     FB 04 F5 0A 
160c7     10 05 F6 06 
160cb     FD 06 00 01 | 	byte	$07, $0a, $0b, $03, $fb, $04, $f5, $0a, $10, $05, $f6, $06, $fd, $06, $00, $01
160cf     08 FA FF 03 
160d3     FD FE F6 FA 
160d7     F7 04 0A F5 
160db     01 FC FF F1 | 	byte	$08, $fa, $ff, $03, $fd, $fe, $f6, $fa, $f7, $04, $0a, $f5, $01, $fc, $ff, $f1
160df     07 03 F6 EF 
160e3     FE FC FF 01 
160e7     F8 F4 F4 FB 
160eb     FF F1 FD 00 | 	byte	$07, $03, $f6, $ef, $fe, $fc, $ff, $01, $f8, $f4, $f4, $fb, $ff, $f1, $fd, $00
160ef     FB F3 F5 F8 
160f3     F9 01 03 E9 
160f7     FE FF FB FE 
160fb     F9 00 00 00 | 	byte	$fb, $f3, $f5, $f8, $f9, $01, $03, $e9, $fe, $ff, $fb, $fe, $f9, $00, $00, $00
160ff     00 01 02 00 
16103     02 FF 01 00 
16107     FC 08 07 EC 
1610b     2B D3 10 D9 | 	byte	$00, $01, $02, $00, $02, $ff, $01, $00, $fc, $08, $07, $ec, $2b, $d3, $10, $d9
1610f     55 B5 FE 4F 
16113     DF C5 78 BE 
16117     28 05 E6 2E 
1611b     BC 5D D1 05 | 	byte	$55, $b5, $fe, $4f, $df, $c5, $78, $be, $28, $05, $e6, $2e, $bc, $5d, $d1, $05
1611f     E9 27 DB 2E 
16123     D0 2E C0 57 
16127     97 33 D0 1D 
1612b     F7 CD 3A CC | 	byte	$e9, $27, $db, $2e, $d0, $2e, $c0, $57, $97, $33, $d0, $1d, $f7, $cd, $3a, $cc
1612f     3C 8F 6C 96 
16133     60 A3 63 A7 
16137     4A DE 08 0F 
1613b     03 DD 25 EC | 	byte	$3c, $8f, $6c, $96, $60, $a3, $63, $a7, $4a, $de, $08, $0f, $03, $dd, $25, $ec
1613f     1B A9 68 A6 
16143     3B C4 5E 90 
16147     5E B8 7F 87 
1614b     67 D9 F6 38 | 	byte	$1b, $a9, $68, $a6, $3b, $c4, $5e, $90, $5e, $b8, $7f, $87, $67, $d9, $f6, $38
1614f     A4 53 BE 64 
16153     9D 41 E9 07 
16157     E4 2D CC 59 
1615b     AA 56 E0 F9 | 	byte	$a4, $53, $be, $64, $9d, $41, $e9, $07, $e4, $2d, $cc, $59, $aa, $56, $e0, $f9
1615f     1C DB 31 C8 
16163     3C AB 5E 9C 
16167     4F D0 33 D4 
1616b     4D A0 61 BD | 	byte	$1c, $db, $31, $c8, $3c, $ab, $5e, $9c, $4f, $d0, $33, $d4, $4d, $a0, $61, $bd
1616f     2D DC 34 C0 
16173     1A E5 38 D5 
16177     FD 0F D3 2A 
1617b     C3 37 CC 49 | 	byte	$2d, $dc, $34, $c0, $1a, $e5, $38, $d5, $fd, $0f, $d3, $2a, $c3, $37, $cc, $49
1617f     B0 28 F2 E5 
16183     34 C8 3E DB 
16187     F3 0D 30 B2 
1618b     40 D9 15 0B | 	byte	$b0, $28, $f2, $e5, $34, $c8, $3e, $db, $f3, $0d, $30, $b2, $40, $d9, $15, $0b
1618f     FE FE DF 1B 
16193     AD 3E C4 0B 
16197     0E FD 37 B3 
1619b     5E AD 4D CA | 	byte	$fe, $fe, $df, $1b, $ad, $3e, $c4, $0b, $0e, $fd, $37, $b3, $5e, $ad, $4d, $ca
1619f     38 CB 3C DF 
161a3     01 20 F8 DD 
161a7     42 D5 2F CB 
161ab     47 B2 5D 9C | 	byte	$38, $cb, $3c, $df, $01, $20, $f8, $dd, $42, $d5, $2f, $cb, $47, $b2, $5d, $9c
161af     48 C9 0D FB 
161b3     E5 29 D0 36 
161b7     D3 30 B0 49 
161bb     C7 28 D0 23 | 	byte	$48, $c9, $0d, $fb, $e5, $29, $d0, $36, $d3, $30, $b0, $49, $c7, $28, $d0, $23
161bf     D5 22 F0 EB 
161c3     29 D8 1B 05 
161c7     DD 2C CC 39 
161cb     D3 2B D9 41 | 	byte	$d5, $22, $f0, $eb, $29, $d8, $1b, $05, $dd, $2c, $cc, $39, $d3, $2b, $d9, $41
161cf     A2 64 AB 2C 
161d3     FB D8 23 E0 
161d7     11 F5 17 09 
161db     E1 2C E1 0B | 	byte	$a2, $64, $ab, $2c, $fb, $d8, $23, $e0, $11, $f5, $17, $09, $e1, $2c, $e1, $0b
161df     FD EF 17 B6 
161e3     44 E3 F7 20 
161e7     D8 1B 0B EC 
161eb     03 13 DF 25 | 	byte	$fd, $ef, $17, $b6, $44, $e3, $f7, $20, $d8, $1b, $0b, $ec, $03, $13, $df, $25
161ef     CB 38 BE 40 
161f3     B5 3D C5 52 
161f7     C3 29 D6 2F 
161fb     C2 43 D2 1A | 	byte	$cb, $38, $be, $40, $b5, $3d, $c5, $52, $c3, $29, $d6, $2f, $c2, $43, $d2, $1a
161ff     F2 10 F0 08 
16203     0A 09 F0 FF 
16207     23 C8 45 BD 
1620b     42 D7 2A D1 | 	byte	$f2, $10, $f0, $08, $0a, $09, $f0, $ff, $23, $c8, $45, $bd, $42, $d7, $2a, $d1
1620f     41 DE 06 0B 
16213     F6 13 F8 14 
16217     EB 25 DD 23 
1621b     EF 09 E1 22 | 	byte	$41, $de, $06, $0b, $f6, $13, $f8, $14, $eb, $25, $dd, $23, $ef, $09, $e1, $22
1621f     DC 30 CD 31 
16223     F7 F5 07 1A 
16227     DB 12 07 F5 
1622b     10 F3 12 F1 | 	byte	$dc, $30, $cd, $31, $f7, $f5, $07, $1a, $db, $12, $07, $f5, $10, $f3, $12, $f1
1622f     1F FD EC 34 
16233     CF 2A E4 2F 
16237     CF 2E F2 FF 
1623b     06 16 F8 0E | 	byte	$1f, $fd, $ec, $34, $cf, $2a, $e4, $2f, $cf, $2e, $f2, $ff, $06, $16, $f8, $0e
1623f     FB 07 25 D8 
16243     25 E8 12 FA 
16247     0B E6 25 D0 
1624b     3C C4 2E E0 | 	byte	$fb, $07, $25, $d8, $25, $e8, $12, $fa, $0b, $e6, $25, $d0, $3c, $c4, $2e, $e0
1624f     1B EC 0B 05 
16253     F9 1A D7 20 
16257     FD 01 04 DC 
1625b     35 DF 16 E5 | 	byte	$1b, $ec, $0b, $05, $f9, $1a, $d7, $20, $fd, $01, $04, $dc, $35, $df, $16, $e5
1625f     2C BE 3C DF 
16263     1E EE 10 04 
16267     06 FD 0F F1 
1626b     0B F2 17 D8 | 	byte	$2c, $be, $3c, $df, $1e, $ee, $10, $04, $06, $fd, $0f, $f1, $0b, $f2, $17, $d8
1626f     2C F3 F5 1A 
16273     DF 28 E9 FD 
16277     16 EA 02 08 
1627b     00 FB 02 01 | 	byte	$2c, $f3, $f5, $1a, $df, $28, $e9, $fd, $16, $ea, $02, $08, $00, $fb, $02, $01
1627f     10 E2 20 D8 
16283     36 DE 17 F1 
16287     0D FE 04 FC 
1628b     18 E9 17 EE | 	byte	$10, $e2, $20, $d8, $36, $de, $17, $f1, $0d, $fe, $04, $fc, $18, $e9, $17, $ee
1628f     09 1B E8 21 
16293     E0 29 F2 23 
16297     D9 2C CC 46 
1629b     C0 35 E8 0B | 	byte	$09, $1b, $e8, $21, $e0, $29, $f2, $23, $d9, $2c, $cc, $46, $c0, $35, $e8, $0b
1629f     0B EB 2A E5 
162a3     17 F2 FD 22 
162a7     E3 14 09 E6 
162ab     FF 04 FC 0B | 	byte	$0b, $eb, $2a, $e5, $17, $f2, $fd, $22, $e3, $14, $09, $e6, $ff, $04, $fc, $0b
162af     0D D6 46 C8 
162b3     1C 08 0D E0 
162b7     46 C8 22 E2 
162bb     F7 2A D8 2F | 	byte	$0d, $d6, $46, $c8, $1c, $08, $0d, $e0, $46, $c8, $22, $e2, $f7, $2a, $d8, $2f
162bf     DD 27 ED 24 
162c3     C9 3B DF F6 
162c7     25 E3 17 E8 
162cb     1F E9 07 F3 | 	byte	$dd, $27, $ed, $24, $c9, $3b, $df, $f6, $25, $e3, $17, $e8, $1f, $e9, $07, $f3
162cf     08 FD F0 1E 
162d3     D4 28 E5 1F 
162d7     E5 11 F8 F0 
162db     2D C0 44 C4 | 	byte	$08, $fd, $f0, $1e, $d4, $28, $e5, $1f, $e5, $11, $f8, $f0, $2d, $c0, $44, $c4
162df     35 DC 2A D4 
162e3     36 D0 2B DE 
162e7     FD 12 FB F3 
162eb     02 F5 11 FB | 	byte	$35, $dc, $2a, $d4, $36, $d0, $2b, $de, $fd, $12, $fb, $f3, $02, $f5, $11, $fb
162ef     E9 20 D8 34 
162f3     D3 2A DC 29 
162f7     E6 10 FA F7 
162fb     0B 13 D3 36 | 	byte	$e9, $20, $d8, $34, $d3, $2a, $dc, $29, $e6, $10, $fa, $f7, $0b, $13, $d3, $36
162ff     D1 16 FD F1 
16303     16 11 C4 4B 
16307     C2 43 AF 5A 
1630b     BD 20 06 E3 | 	byte	$d1, $16, $fd, $f1, $16, $11, $c4, $4b, $c2, $43, $af, $5a, $bd, $20, $06, $e3
1630f     23 E6 07 FA 
16313     02 FC 10 F6 
16317     F8 1B D6 38 
1631b     CF 18 FD 02 | 	byte	$23, $e6, $07, $fa, $02, $fc, $10, $f6, $f8, $1b, $d6, $38, $cf, $18, $fd, $02
1631f     18 D0 40 CC 
16323     21 F3 02 FF 
16327     1A F0 00 10 
1632b     E8 21 EB 20 | 	byte	$18, $d0, $40, $cc, $21, $f3, $02, $ff, $1a, $f0, $00, $10, $e8, $21, $eb, $20
1632f     E0 29 D3 25 
16333     E5 0F FB 10 
16337     E9 27 D2 1F 
1633b     DD 1F F5 01 | 	byte	$e0, $29, $d3, $25, $e5, $0f, $fb, $10, $e9, $27, $d2, $1f, $dd, $1f, $f5, $01
1633f     FB 1B EC FA 
16343     1E E6 09 FD 
16347     0B F1 0E F7 
1634b     0D EE 1C F1 | 	byte	$fb, $1b, $ec, $fa, $1e, $e6, $09, $fd, $0b, $f1, $0e, $f7, $0d, $ee, $1c, $f1
1634f     0E 05 F5 20 
16353     E3 21 E8 08 
16357     06 01 EA 20 
1635b     F0 04 0D F9 | 	byte	$0e, $05, $f5, $20, $e3, $21, $e8, $08, $06, $01, $ea, $20, $f0, $04, $0d, $f9
1635f     09 E6 2C D7 
16363     20 EF 0D 05 
16367     F3 07 FC 17 
1636b     D4 3B C8 14 | 	byte	$09, $e6, $2c, $d7, $20, $ef, $0d, $05, $f3, $07, $fc, $17, $d4, $3b, $c8, $14
1636f     0A F0 0A 00 
16373     00 01 06 F1 
16377     22 DC 18 FE 
1637b     04 F1 27 CA | 	byte	$0a, $f0, $0a, $00, $00, $01, $06, $f1, $22, $dc, $18, $fe, $04, $f1, $27, $ca
1637f     3E D0 25 E2 
16383     27 DC 21 E9 
16387     1C DE 2B E3 
1638b     09 07 F2 17 | 	byte	$3e, $d0, $25, $e2, $27, $dc, $21, $e9, $1c, $de, $2b, $e3, $09, $07, $f2, $17
1638f     F0 1C D9 2D 
16393     E3 11 FD 09 
16397     F9 16 DF 2C 
1639b     E0 1C FC 06 | 	byte	$f0, $1c, $d9, $2d, $e3, $11, $fd, $09, $f9, $16, $df, $2c, $e0, $1c, $fc, $06
1639f     0A F1 05 04 
163a3     06 F5 18 F6 
163a7     08 FC 10 F1 
163ab     21 E3 15 F9 | 	byte	$0a, $f1, $05, $04, $06, $f5, $18, $f6, $08, $fc, $10, $f1, $21, $e3, $15, $f9
163af     00 09 FD FF 
163b3     09 ED 1A E8 
163b7     1E E4 21 E1 
163bb     0E FE F1 14 | 	byte	$00, $09, $fd, $ff, $09, $ed, $1a, $e8, $1e, $e4, $21, $e1, $0e, $fe, $f1, $14
163bf     07 E6 25 EA 
163c3     06 09 00 FC 
163c7     05 00 F2 1D 
163cb     EE 18 E8 27 | 	byte	$07, $e6, $25, $ea, $06, $09, $00, $fc, $05, $00, $f2, $1d, $ee, $18, $e8, $27
163cf     DE 1A EF 17 
163d3     DC 29 E0 10 
163d7     FD FA 10 EF 
163db     17 EF 12 EF | 	byte	$de, $1a, $ef, $17, $dc, $29, $e0, $10, $fd, $fa, $10, $ef, $17, $ef, $12, $ef
163df     1A D9 30 DC 
163e3     13 EB 2B C7 
163e7     43 D2 1C EE 
163eb     13 E5 17 E9 | 	byte	$1a, $d9, $30, $dc, $13, $eb, $2b, $c7, $43, $d2, $1c, $ee, $13, $e5, $17, $e9
163ef     18 F0 07 02 
163f3     01 F3 13 F8 
163f7     04 0D ED 14 
163fb     ED 0A E5 27 | 	byte	$18, $f0, $07, $02, $01, $f3, $13, $f8, $04, $0d, $ed, $14, $ed, $0a, $e5, $27
163ff     DF 0F FB 08 
16403     F7 1C E5 17 
16407     F1 FA 11 EE 
1640b     17 FD F3 20 | 	byte	$df, $0f, $fb, $08, $f7, $1c, $e5, $17, $f1, $fa, $11, $ee, $17, $fd, $f3, $20
1640f     DF 24 DF 20 
16413     ED FC 17 EE 
16417     16 E4 17 E4 
1641b     21 E9 07 06 | 	byte	$df, $24, $df, $20, $ed, $fc, $17, $ee, $16, $e4, $17, $e4, $21, $e9, $07, $06
1641f     FE FA 11 E9 
16423     11 01 F8 09 
16427     01 FD 0D 07 
1642b     ED 15 ED 1B | 	byte	$fe, $fa, $11, $e9, $11, $01, $f8, $09, $01, $fd, $0d, $07, $ed, $15, $ed, $1b
1642f     E1 28 DD 25 
16433     D5 31 DC 1C 
16437     EC 18 E9 18 
1643b     EB 12 FA 05 | 	byte	$e1, $28, $dd, $25, $d5, $31, $dc, $1c, $ec, $18, $e9, $18, $eb, $12, $fa, $05
1643f     07 F5 10 E9 
16443     1B F0 FB 17 
16447     DD 2B D3 28 
1644b     E3 16 F9 FC | 	byte	$07, $f5, $10, $e9, $1b, $f0, $fb, $17, $dd, $2b, $d3, $28, $e3, $16, $f9, $fc
1644f     08 01 00 F9 
16453     13 EF 0F F2 
16457     04 FD 02 03 
1645b     FC 0D EF 1C | 	byte	$08, $01, $00, $f9, $13, $ef, $0f, $f2, $04, $fd, $02, $03, $fc, $0d, $ef, $1c
1645f     E4 21 E5 15 
16463     F0 17 E9 15 
16467     F5 01 0B EF 
1646b     13 F7 00 0A | 	byte	$e4, $21, $e5, $15, $f0, $17, $e9, $15, $f5, $01, $0b, $ef, $13, $f7, $00, $0a
1646f     E5 24 D9 20 
16473     FD F6 08 FA 
16477     0E EE 16 EA 
1647b     1C E8 1E E4 | 	byte	$e5, $24, $d9, $20, $fd, $f6, $08, $fa, $0e, $ee, $16, $ea, $1c, $e8, $1e, $e4
1647f     22 DD 2B CF 
16483     37 CB 2C E4 
16487     11 FB F5 1F 
1648b     D1 30 DC 27 | 	byte	$22, $dd, $2b, $cf, $37, $cb, $2c, $e4, $11, $fb, $f5, $1f, $d1, $30, $dc, $27
1648f     DD 22 E9 06 
16493     0F E6 1C E8 
16497     17 F2 04 FE 
1649b     04 FC 09 FF | 	byte	$dd, $22, $e9, $06, $0f, $e6, $1c, $e8, $17, $f2, $04, $fe, $04, $fc, $09, $ff
1649f     F7 16 EA 17 
164a3     F1 0A 02 FD 
164a7     01 05 04 F1 
164ab     22 D7 30 D7 | 	byte	$f7, $16, $ea, $17, $f1, $0a, $02, $fd, $01, $05, $04, $f1, $22, $d7, $30, $d7
164af     22 F0 0F F6 
164b3     12 ED 14 F3 
164b7     07 04 00 F9 
164bb     16 E1 27 DF | 	byte	$22, $f0, $0f, $f6, $12, $ed, $14, $f3, $07, $04, $00, $f9, $16, $e1, $27, $df
164bf     22 E3 0E FE 
164c3     F7 14 EF 15 
164c7     ED 1A F1 FE 
164cb     0D F8 FE 08 | 	byte	$22, $e3, $0e, $fe, $f7, $14, $ef, $15, $ed, $1a, $f1, $fe, $0d, $f8, $fe, $08
164cf     F2 10 F8 02 
164d3     0D EE 15 F0 
164d7     0D F9 01 02 
164db     06 00 06 F9 | 	byte	$f2, $10, $f8, $02, $0d, $ee, $15, $f0, $0d, $f9, $01, $02, $06, $00, $06, $f9
164df     10 F6 15 F3 
164e3     0B FE FD 00 
164e7     03 03 EE 18 
164eb     E9 18 EA 15 | 	byte	$10, $f6, $15, $f3, $0b, $fe, $fd, $00, $03, $03, $ee, $18, $e9, $18, $ea, $15
164ef     F1 09 F8 0E 
164f3     F2 08 01 02 
164f7     01 03 FC 06 
164fb     FC 02 01 00 | 	byte	$f1, $09, $f8, $0e, $f2, $08, $01, $02, $01, $03, $fc, $06, $fc, $02, $01, $00
164ff     01 FF 00 00 
16503     01 00 FC 06 
16507     F6 12 EB 11 
1650b     F8 05 F9 0A | 	byte	$01, $ff, $00, $00, $01, $00, $fc, $06, $f6, $12, $eb, $11, $f8, $05, $f9, $0a
1650f     F6 07 FC 07 
16513     FA 03 06 FD 
16517     FE 07 FC FC 
1651b     0D F1 0F F2 | 	byte	$f6, $07, $fc, $07, $fa, $03, $06, $fd, $fe, $07, $fc, $fc, $0d, $f1, $0f, $f2
1651f     10 F1 10 F6 
16523     00 06 F8 06 
16527     FD 00 F8 09 
1652b     FC 05 F8 08 | 	byte	$10, $f1, $10, $f6, $00, $06, $f8, $06, $fd, $00, $f8, $09, $fc, $05, $f8, $08
1652f     F8 05 00 FC 
16533     09 F1 12 EB 
16537     15 F3 04 04 
1653b     F9 13 E9 18 | 	byte	$f8, $05, $00, $fc, $09, $f1, $12, $eb, $15, $f3, $04, $04, $f9, $13, $e9, $18
1653f     ED 0F F8 07 
16543     FC 07 FF F8 
16547     0D F9 04 FF 
1654b     04 F7 0F F6 | 	byte	$ed, $0f, $f8, $07, $fc, $07, $ff, $f8, $0d, $f9, $04, $ff, $04, $f7, $0f, $f6
1654f     05 FF 03 01 
16553     00 FE 04 FE 
16557     01 FD 05 FF 
1655b     00 04 F9 10 | 	byte	$05, $ff, $03, $01, $00, $fe, $04, $fe, $01, $fd, $05, $ff, $00, $04, $f9, $10
1655f     F1 0E F2 15 
16563     EA 13 ED 13 
16567     ED 0B F6 0D 
1656b     EF 0E F3 0E | 	byte	$f1, $0e, $f2, $15, $ea, $13, $ed, $13, $ed, $0b, $f6, $0d, $ef, $0e, $f3, $0e
1656f     EF 03 03 FA 
16573     06 FC 01 00 
16577     03 F8 09 FB 
1657b     04 F2 15 EF | 	byte	$ef, $03, $03, $fa, $06, $fc, $01, $00, $03, $f8, $09, $fb, $04, $f2, $15, $ef
1657f     0B F9 02 07 
16583     F3 11 F2 0A 
16587     FF F8 09 F9 
1658b     FF 0A F5 09 | 	byte	$0b, $f9, $02, $07, $f3, $11, $f2, $0a, $ff, $f8, $09, $f9, $ff, $0a, $f5, $09
1658f     F1 12 EC 0E 
16593     FC 05 F5 0D 
16597     F8 FF 02 01 
1659b     FF FD 0E EF | 	byte	$f1, $12, $ec, $0e, $fc, $05, $f5, $0d, $f8, $ff, $02, $01, $ff, $fd, $0e, $ef
1659f     0F F3 08 FC 
165a3     02 FF 00 01 
165a7     03 FA 03 01 
165ab     07 F6 0D F9 | 	byte	$0f, $f3, $08, $fc, $02, $ff, $00, $01, $03, $fa, $03, $01, $07, $f6, $0d, $f9
165af     04 FF 03 FB 
165b3     06 FA FC 03 
165b7     FD 09 FB 05 
165bb     FB 07 FA 06 | 	byte	$04, $ff, $03, $fb, $06, $fa, $fc, $03, $fd, $09, $fb, $05, $fb, $07, $fa, $06
165bf     06 F5 11 EF 
165c3     11 EF 14 EE 
165c7     12 F5 09 FD 
165cb     FC 00 0D F1 | 	byte	$06, $f5, $11, $ef, $11, $ef, $14, $ee, $12, $f5, $09, $fd, $fc, $00, $0d, $f1
165cf     13 EE 11 F1 
165d3     13 F1 0B F5 
165d7     0D EB 18 E0 
165db     16 F0 03 01 | 	byte	$13, $ee, $11, $f1, $13, $f1, $0b, $f5, $0d, $eb, $18, $e0, $16, $f0, $03, $01
165df     FA 0A F6 07 
165e3     F7 0A F8 06 
165e7     02 FD 05 FC 
165eb     04 FC 05 FC | 	byte	$fa, $0a, $f6, $07, $f7, $0a, $f8, $06, $02, $fd, $05, $fc, $04, $fc, $05, $fc
165ef     04 FE FF 03 
165f3     FC 07 F5 0E 
165f7     F3 09 FB 02 
165fb     01 03 FC 08 | 	byte	$04, $fe, $ff, $03, $fc, $07, $f5, $0e, $f3, $09, $fb, $02, $01, $03, $fc, $08
165ff     F9 08 FD FD 
16603     09 FA 06 FC 
16607     00 03 01 FE 
1660b     07 FD 01 0A | 	byte	$f9, $08, $fd, $fd, $09, $fa, $06, $fc, $00, $03, $01, $fe, $07, $fd, $01, $0a
1660f     F5 06 FF 04 
16613     FD 03 FE 06 
16617     F8 0D FB 05 
1661b     01 00 FC 0F | 	byte	$f5, $06, $ff, $04, $fd, $03, $fe, $06, $f8, $0d, $fb, $05, $01, $00, $fc, $0f
1661f     F2 0D F8 11 
16623     EF 14 EF 0E 
16627     EE 16 EF 02 
1662b     06 F8 0A F6 | 	byte	$f2, $0d, $f8, $11, $ef, $14, $ef, $0e, $ee, $16, $ef, $02, $06, $f8, $0a, $f6
1662f     06 FA 0E F1 
16633     09 FE 01 04 
16637     F7 0A F9 03 
1663b     FF FF 09 F3 | 	byte	$06, $fa, $0e, $f1, $09, $fe, $01, $04, $f7, $0a, $f9, $03, $ff, $ff, $09, $f3
1663f     0E F5 0A F7 
16643     05 FC 03 FA 
16647     0A F8 05 FD 
1664b     0B F5 0B F7 | 	byte	$0e, $f5, $0a, $f7, $05, $fc, $03, $fa, $0a, $f8, $05, $fd, $0b, $f5, $0b, $f7
1664f     08 F9 06 00 
16653     FC 07 F8 08 
16657     F7 10 EA 1A 
1665b     EC 14 F5 07 | 	byte	$08, $f9, $06, $00, $fc, $07, $f8, $08, $f7, $10, $ea, $1a, $ec, $14, $f5, $07
1665f     FD FD 03 FF 
16663     03 FB 0B F6 
16667     08 F8 09 FA 
1666b     04 FD 08 F5 | 	byte	$fd, $fd, $03, $ff, $03, $fb, $0b, $f6, $08, $f8, $09, $fa, $04, $fd, $08, $f5
1666f     0D F6 0B F8 
16673     07 F7 0A FA 
16677     04 FF 03 02 
1667b     FB 07 F7 08 | 	byte	$0d, $f6, $0b, $f8, $07, $f7, $0a, $fa, $04, $ff, $03, $02, $fb, $07, $f7, $08
1667f     FB 04 FD 02 
16683     01 FD 07 FB 
16687     05 01 FF 03 
1668b     F9 09 FB 01 | 	byte	$fb, $04, $fd, $02, $01, $fd, $07, $fb, $05, $01, $ff, $03, $f9, $09, $fb, $01
1668f     04 F9 08 F9 
16693     02 02 FB 05 
16697     FA 05 FF FF 
1669b     FF 08 F7 03 | 	byte	$04, $f9, $08, $f9, $02, $02, $fb, $05, $fa, $05, $ff, $ff, $ff, $08, $f7, $03
1669f     01 00 05 F6 
166a3     0E EF 11 F0 
166a7     0B F9 01 02 
166ab     FD 04 FE 02 | 	byte	$01, $00, $05, $f6, $0e, $ef, $11, $f0, $0b, $f9, $01, $02, $fd, $04, $fe, $02
166af     FA 0F F1 0B 
166b3     F9 08 F9 04 
166b7     FE FF 02 02 
166bb     FC 06 FC 03 | 	byte	$fa, $0f, $f1, $0b, $f9, $08, $f9, $04, $fe, $ff, $02, $02, $fc, $06, $fc, $03
166bf     FE 02 FE 03 
166c3     FB 04 FD 00 
166c7     05 F7 08 F9 
166cb     0A F9 FF 04 | 	byte	$fe, $02, $fe, $03, $fb, $04, $fd, $00, $05, $f7, $08, $f9, $0a, $f9, $ff, $04
166cf     FE 01 03 FF 
166d3     02 FE 04 FF 
166d7     04 FF 07 01 
166db     01 00 07 FB | 	byte	$fe, $01, $03, $ff, $02, $fe, $04, $ff, $04, $ff, $07, $01, $01, $00, $07, $fb
166df     04 01 01 01 
166e3     01 04 FF 02 
166e7     04 FC 04 02 
166eb     FB 08 FE 03 | 	byte	$04, $01, $01, $01, $01, $04, $ff, $02, $04, $fc, $04, $02, $fb, $08, $fe, $03
166ef     FD 0A F9 07 
166f3     FD 04 FB 03 
166f7     01 02 02 01 
166fb     00 FF 08 F7 | 	byte	$fd, $0a, $f9, $07, $fd, $04, $fb, $03, $01, $02, $02, $01, $00, $ff, $08, $f7
166ff     09 FA 09 F9 
16703     08 F7 0E F5 
16707     09 FC 03 FD 
1670b     08 FC 09 F8 | 	byte	$09, $fa, $09, $f9, $08, $f7, $0e, $f5, $09, $fc, $03, $fd, $08, $fc, $09, $f8
1670f     0B FA 04 01 
16713     02 03 FC 09 
16717     F9 09 FA 0D 
1671b     F8 0D F6 0D | 	byte	$0b, $fa, $04, $01, $02, $03, $fc, $09, $f9, $09, $fa, $0d, $f8, $0d, $f6, $0d
1671f     F9 09 FA 07 
16723     FF 02 00 03 
16727     01 06 FC 0B 
1672b     F9 0A F6 12 | 	byte	$f9, $09, $fa, $07, $ff, $02, $00, $03, $01, $06, $fc, $0b, $f9, $0a, $f6, $12
1672f     F6 09 FD 07 
16733     FF FF 07 FD 
16737     05 FF 05 FF 
1673b     01 05 FA 07 | 	byte	$f6, $09, $fd, $07, $ff, $ff, $07, $fd, $05, $ff, $05, $ff, $01, $05, $fa, $07
1673f     FC 01 02 FF 
16743     00 FD 04 FC 
16747     01 02 03 FC 
1674b     FD 05 FF 02 | 	byte	$fc, $01, $02, $ff, $00, $fd, $04, $fc, $01, $02, $03, $fc, $fd, $05, $ff, $02
1674f     FD 06 F8 09 
16753     F5 08 FD 00 
16757     01 01 00 02 
1675b     FE 02 00 02 | 	byte	$fd, $06, $f8, $09, $f5, $08, $fd, $00, $01, $01, $00, $02, $fe, $02, $00, $02
1675f     FA 0A FC 00 
16763     FC 03 FE 02 
16767     FF FE 08 F7 
1676b     0D F7 06 FA | 	byte	$fa, $0a, $fc, $00, $fc, $03, $fe, $02, $ff, $fe, $08, $f7, $0d, $f7, $06, $fa
1676f     09 F9 04 FA 
16773     09 F6 0A F9 
16777     05 FD 04 FA 
1677b     0A FC 01 FF | 	byte	$09, $f9, $04, $fa, $09, $f6, $0a, $f9, $05, $fd, $04, $fa, $0a, $fc, $01, $ff
1677f     08 F9 06 FD 
16783     03 FE 04 02 
16787     00 00 02 01 
1678b     00 03 FE 07 | 	byte	$08, $f9, $06, $fd, $03, $fe, $04, $02, $00, $00, $02, $01, $00, $03, $fe, $07
1678f     FF FC 08 F8 
16793     06 FD 01 FD 
16797     03 FF 05 F7 
1679b     11 F2 0A F9 | 	byte	$ff, $fc, $08, $f8, $06, $fd, $01, $fd, $03, $ff, $05, $f7, $11, $f2, $0a, $f9
1679f     0A F8 04 FC 
167a3     03 FE 03 FF 
167a7     FF 01 00 00 
167ab     FF 02 01 FD | 	byte	$0a, $f8, $04, $fc, $03, $fe, $03, $ff, $ff, $01, $00, $00, $ff, $02, $01, $fd
167af     04 00 FC 07 
167b3     F8 08 FC 06 
167b7     F7 09 F7 09 
167bb     FB 01 FE 06 | 	byte	$04, $00, $fc, $07, $f8, $08, $fc, $06, $f7, $09, $f7, $09, $fb, $01, $fe, $06
167bf     F8 0B F8 04 
167c3     02 FF 01 03 
167c7     FB 07 F9 04 
167cb     01 00 02 03 | 	byte	$f8, $0b, $f8, $04, $02, $ff, $01, $03, $fb, $07, $f9, $04, $01, $00, $02, $03
167cf     FA 07 FC 02 
167d3     FD 05 FD 01 
167d7     01 00 00 02 
167db     02 FD 04 FE | 	byte	$fa, $07, $fc, $02, $fd, $05, $fd, $01, $01, $00, $00, $02, $02, $fd, $04, $fe
167df     03 00 FF 02 
167e3     00 03 FC 0A 
167e7     FA 0A F7 07 
167eb     FD 01 FF 01 | 	byte	$03, $00, $ff, $02, $00, $03, $fc, $0a, $fa, $0a, $f7, $07, $fd, $01, $ff, $01
167ef     00 FE 01 FD 
167f3     03 FF 01 FF 
167f7     FF 03 F9 0A 
167fb     F7 04 01 FE | 	byte	$00, $fe, $01, $fd, $03, $ff, $01, $ff, $ff, $03, $f9, $0a, $f7, $04, $01, $fe
167ff     FF 02 00 01 
16803     00 00 01 00 
16807     FF 02 FC 06 
1680b     FB 03 FC 08 | 	byte	$ff, $02, $00, $01, $00, $00, $01, $00, $ff, $02, $fc, $06, $fb, $03, $fc, $08
1680f     F9 05 FF FF 
16813     05 FC 03 FE 
16817     06 FB 07 FD 
1681b     04 FF 02 FF | 	byte	$f9, $05, $ff, $ff, $05, $fc, $03, $fe, $06, $fb, $07, $fd, $04, $ff, $02, $ff
1681f     01 01 00 FD 
16823     02 01 FD 03 
16827     FE 04 FB 06 
1682b     FB 05 FD 03 | 	byte	$01, $01, $00, $fd, $02, $01, $fd, $03, $fe, $04, $fb, $06, $fb, $05, $fd, $03
1682f     01 FD 03 FB 
16833     06 FC 01 FD 
16837     07 F7 07 F7 
1683b     0A F9 07 FD | 	byte	$01, $fd, $03, $fb, $06, $fc, $01, $fd, $07, $f7, $07, $f7, $0a, $f9, $07, $fd
1683f     03 FF 03 FD 
16843     01 01 00 00 
16847     03 FD 01 01 
1684b     00 FE 04 FF | 	byte	$03, $ff, $03, $fd, $01, $01, $00, $00, $03, $fd, $01, $01, $00, $fe, $04, $ff
1684f     00 01 FD 05 
16853     F9 06 FC 04 
16857     FB 01 02 01 
1685b     02 FB 05 FC | 	byte	$00, $01, $fd, $05, $f9, $06, $fc, $04, $fb, $01, $02, $01, $02, $fb, $05, $fc
1685f     04 FE FF 00 
16863     02 FD 04 FE 
16867     02 FF 00 01 
1686b     02 FD 02 FE | 	byte	$04, $fe, $ff, $00, $02, $fd, $04, $fe, $02, $ff, $00, $01, $02, $fd, $02, $fe
1686f     03 00 02 FF 
16873     06 F9 07 FF 
16877     FC 07 FF 02 
1687b     FD 05 FC 03 | 	byte	$03, $00, $02, $ff, $06, $f9, $07, $ff, $fc, $07, $ff, $02, $fd, $05, $fc, $03
1687f     FF 03 FD 03 
16883     FD 04 FD 04 
16887     FB 04 FB 05 
1688b     FB 06 F9 05 | 	byte	$ff, $03, $fd, $03, $fd, $04, $fd, $04, $fb, $04, $fb, $05, $fb, $06, $f9, $05
1688f     FF 03 FC 03 
16893     01 FE 06 FA 
16897     04 01 03 FD 
1689b     02 00 FF 01 | 	byte	$ff, $03, $fc, $03, $01, $fe, $06, $fa, $04, $01, $03, $fd, $02, $00, $ff, $01
1689f     01 01 03 00 
168a3     FE 02 02 00 
168a7     02 00 04 FF 
168ab     04 01 FF 02 | 	byte	$01, $01, $03, $00, $fe, $02, $02, $00, $02, $00, $04, $ff, $04, $01, $ff, $02
168af     02 FE FF 06 
168b3     FD 03 03 FC 
168b7     06 FE 08 FC 
168bb     05 00 00 00 | 	byte	$02, $fe, $ff, $06, $fd, $03, $03, $fc, $06, $fe, $08, $fc, $05, $00, $00, $00
168bf     00 00 00 00 
168c3     00 00 00 00 
168c7     00 00 00 00 
168cb     00 00 00 00 
168cf     00          | 	byte	$00[17]
168d0     D3 CA D2 D6 
168d4     E3 2D 3B 32 
168d8     2E 2A 25 21 
168dc     1F 1D 18 02 | 	byte	$d3, $ca, $d2, $d6, $e3, $2d, $3b, $32, $2e, $2a, $25, $21, $1f, $1d, $18, $02
168e0     BD BA C5 C8 
168e4     CE D2 D7 DA 
168e8     E2 DC E7 E7 
168ec     E8 EF F3 FC | 	byte	$bd, $ba, $c5, $c8, $ce, $d2, $d7, $da, $e2, $dc, $e7, $e7, $e8, $ef, $f3, $fc
168f0     4E 5B 3A 28 
168f4     3B 3A 2E 20 
168f8     1D 21 36 29 
168fc     1C 1A 12 DB | 	byte	$4e, $5b, $3a, $28, $3b, $3a, $2e, $20, $1d, $21, $36, $29, $1c, $1a, $12, $db
16900     A0 A4 AE B6 
16904     BE C5 D8 DF 
16908     E3 F3 0A 07 
1690c     05 04 04 24 | 	byte	$a0, $a4, $ae, $b6, $be, $c5, $d8, $df, $e3, $f3, $0a, $07, $05, $04, $04, $24
16910     57 55 4A 42 
16914     3C 33 21 1A 
16918     17 06 EF F2 
1691c     F5 F6 F7 D5 | 	byte	$57, $55, $4a, $42, $3c, $33, $21, $1a, $17, $06, $ef, $f2, $f5, $f6, $f7, $d5
16920     A8 A9 B4 BC 
16924     C3 CB DF E6 
16928     E9 FD 12 0F 
1692c     0D 0B 0B 2B | 	byte	$a8, $a9, $b4, $bc, $c3, $cb, $df, $e6, $e9, $fd, $12, $0f, $0d, $0b, $0b, $2b
16930     59 56 4C 44 
16934     3D 34 1F 19 
16938     16 01 EB EE 
1693c     F1 F3 F2 CF | 	byte	$59, $56, $4c, $44, $3d, $34, $1f, $19, $16, $01, $eb, $ee, $f1, $f3, $f2, $cf
16940     A6 A9 B5 BC 
16944     C3 CF E2 E8 
16948     EC 05 18 14 
1694c     11 0F 10 36 | 	byte	$a6, $a9, $b5, $bc, $c3, $cf, $e2, $e8, $ec, $05, $18, $14, $11, $0f, $10, $36
16950     5A 57 4C 44 
16954     3D 32 1D 17 
16958     13 F7 E5 E9 
1695c     ED EF ED C7 | 	byte	$5a, $57, $4c, $44, $3d, $32, $1d, $17, $13, $f7, $e5, $e9, $ed, $ef, $ed, $c7
16960     A7 AA B4 BC 
16964     C3 D1 E5 EA 
16968     EF 0C 1D 19 
1696c     16 13 17 38 | 	byte	$a7, $aa, $b4, $bc, $c3, $d1, $e5, $ea, $ef, $0c, $1d, $19, $16, $13, $17, $38
16970     5A 57 4D 45 
16974     3D 2E 1B 16 
16978     10 F2 E1 E5 
1697c     E9 EC E7 C5 | 	byte	$5a, $57, $4d, $45, $3d, $2e, $1b, $16, $10, $f2, $e1, $e5, $e9, $ec, $e7, $c5
16980     A7 AA B4 BD 
16984     C5 D5 E7 EC 
16988     F4 11 22 1D 
1698c     19 16 1D 3F | 	byte	$a7, $aa, $b4, $bd, $c5, $d5, $e7, $ec, $f4, $11, $22, $1d, $19, $16, $1d, $3f
16990     59 57 4D 44 
16994     3B 2A 18 14 
16998     0B EC DC E1 
1699c     E5 E8 DF C2 | 	byte	$59, $57, $4d, $44, $3b, $2a, $18, $14, $0b, $ec, $dc, $e1, $e5, $e8, $df, $c2
169a0     A7 A9 B4 BC 
169a4     C6 D8 E8 ED 
169a8     F8 16 25 21 
169ac     1D 19 22 42 | 	byte	$a7, $a9, $b4, $bc, $c6, $d8, $e8, $ed, $f8, $16, $25, $21, $1d, $19, $22, $42
169b0     59 57 4C 44 
169b4     39 26 16 12 
169b8     03 E7 D7 DC 
169bc     E1 E4 D9 BC | 	byte	$59, $57, $4c, $44, $39, $26, $16, $12, $03, $e7, $d7, $dc, $e1, $e4, $d9, $bc
169c0     A6 A9 B4 BC 
169c4     C8 DA EA EF 
169c8     FD 1A 29 25 
169cc     20 1D 2A 44 | 	byte	$a6, $a9, $b4, $bc, $c8, $da, $ea, $ef, $fd, $1a, $29, $25, $20, $1d, $2a, $44
169d0     59 57 4C 43 
169d4     36 23 14 10 
169d8     FF E4 D4 D8 
169dc     DD E0 D4 B9 | 	byte	$59, $57, $4c, $43, $36, $23, $14, $10, $ff, $e4, $d4, $d8, $dd, $e0, $d4, $b9
169e0     A7 AA B3 BD 
169e4     CB DD EC F0 
169e8     02 1D 2C 28 
169ec     23 21 2E 46 | 	byte	$a7, $aa, $b3, $bd, $cb, $dd, $ec, $f0, $02, $1d, $2c, $28, $23, $21, $2e, $46
169f0     59 56 4C 43 
169f4     35 21 13 0E 
169f8     FC E0 D2 D5 
169fc     DA DD D0 B8 | 	byte	$59, $56, $4c, $43, $35, $21, $13, $0e, $fc, $e0, $d2, $d5, $da, $dd, $d0, $b8
16a00     A7 AA B4 BE 
16a04     CD E1 ED F3 
16a08     04 1E 2E 2C 
16a0c     26 25 33 4A | 	byte	$a7, $aa, $b4, $be, $cd, $e1, $ed, $f3, $04, $1e, $2e, $2c, $26, $25, $33, $4a
16a10     58 56 4C 42 
16a14     30 1F 11 0C 
16a18     F9 DE D0 D1 
16a1c     D8 D8 CA B7 | 	byte	$58, $56, $4c, $42, $30, $1f, $11, $0c, $f9, $de, $d0, $d1, $d8, $d8, $ca, $b7
16a20     A8 AB B4 C0 
16a24     D0 E2 EF F5 
16a28     09 20 30 2F 
16a2c     29 29 38 4B | 	byte	$a8, $ab, $b4, $c0, $d0, $e2, $ef, $f5, $09, $20, $30, $2f, $29, $29, $38, $4b
16a30     58 56 4B 40 
16a34     2E 1C 11 09 
16a38     F4 DE CD CE 
16a3c     D5 D4 C6 B4 | 	byte	$58, $56, $4b, $40, $2e, $1c, $11, $09, $f4, $de, $cd, $ce, $d5, $d4, $c6, $b4
16a40     A9 AB B5 C1 
16a44     D1 E4 EF F7 
16a48     0A 23 31 32 
16a4c     2C 2D 3C 4C | 	byte	$a9, $ab, $b5, $c1, $d1, $e4, $ef, $f7, $0a, $23, $31, $32, $2c, $2d, $3c, $4c
16a50     57 55 4C 3E 
16a54     2D 1B 0F 08 
16a58     F5 DD CC CC 
16a5c     D3 D0 C3 B3 | 	byte	$57, $55, $4c, $3e, $2d, $1b, $0f, $08, $f5, $dd, $cc, $cc, $d3, $d0, $c3, $b3
16a60     A9 AB B6 C3 
16a64     D6 E5 EF F9 
16a68     0C 23 33 34 
16a6c     2E 31 3E 4E | 	byte	$a9, $ab, $b6, $c3, $d6, $e5, $ef, $f9, $0c, $23, $33, $34, $2e, $31, $3e, $4e
16a70     57 55 4B 3C 
16a74     2A 1A 10 06 
16a78     F3 DB CC CA 
16a7c     CF CC BF B2 | 	byte	$57, $55, $4b, $3c, $2a, $1a, $10, $06, $f3, $db, $cc, $ca, $cf, $cc, $bf, $b2
16a80     A9 AB B7 C5 
16a84     D6 E7 F0 FB 
16a88     0E 25 33 36 
16a8c     31 35 40 4E | 	byte	$a9, $ab, $b7, $c5, $d6, $e7, $f0, $fb, $0e, $25, $33, $36, $31, $35, $40, $4e
16a90     55 54 49 3A 
16a94     28 19 0E 04 
16a98     F1 DB CC C8 
16a9c     CC C8 BD B1 | 	byte	$55, $54, $49, $3a, $28, $19, $0e, $04, $f1, $db, $cc, $c8, $cc, $c8, $bd, $b1
16aa0     AA AC B7 C8 
16aa4     D7 E7 F2 FC 
16aa8     10 24 33 38 
16aac     34 39 43 4F | 	byte	$aa, $ac, $b7, $c8, $d7, $e7, $f2, $fc, $10, $24, $33, $38, $34, $39, $43, $4f
16ab0     55 54 49 39 
16ab4     27 18 0E 02 
16ab8     F1 DB CB C7 
16abc     C9 C4 BB B0 | 	byte	$55, $54, $49, $39, $27, $18, $0e, $02, $f1, $db, $cb, $c7, $c9, $c4, $bb, $b0
16ac0     AB AD B8 C8 
16ac4     DA E7 F2 FF 
16ac8     10 25 33 39 
16acc     38 3C 46 4F | 	byte	$ab, $ad, $b8, $c8, $da, $e7, $f2, $ff, $10, $25, $33, $39, $38, $3c, $46, $4f
16ad0     55 53 48 36 
16ad4     25 18 0D 01 
16ad8     EE DA CC C6 
16adc     C6 C1 B8 B0 | 	byte	$55, $53, $48, $36, $25, $18, $0d, $01, $ee, $da, $cc, $c6, $c6, $c1, $b8, $b0
16ae0     AB AE BA CB 
16ae4     DA E8 F3 00 
16ae8     13 25 34 3B 
16aec     3B 40 48 50 | 	byte	$ab, $ae, $ba, $cb, $da, $e8, $f3, $00, $13, $25, $34, $3b, $3b, $40, $48, $50
16af0     55 52 45 35 
16af4     25 17 0C FE 
16af8     EE DB CB C5 
16afc     C2 BF B7 B0 | 	byte	$55, $52, $45, $35, $25, $17, $0c, $fe, $ee, $db, $cb, $c5, $c2, $bf, $b7, $b0
16b00     AC AE BB CB 
16b04     DB E9 F3 01 
16b08     12 25 34 3B 
16b0c     3E 42 49 51 | 	byte	$ac, $ae, $bb, $cb, $db, $e9, $f3, $01, $12, $25, $34, $3b, $3e, $42, $49, $51
16b10     54 51 43 34 
16b14     24 17 0B FC 
16b18     ED DA CB C4 
16b1c     C0 BC B5 AF | 	byte	$54, $51, $43, $34, $24, $17, $0b, $fc, $ed, $da, $cb, $c4, $c0, $bc, $b5, $af
16b20     AC B0 BC CD 
16b24     DC E9 F4 03 
16b28     14 25 34 3C 
16b2c     41 45 4B 51 | 	byte	$ac, $b0, $bc, $cd, $dc, $e9, $f4, $03, $14, $25, $34, $3c, $41, $45, $4b, $51
16b30     54 50 44 34 
16b34     23 17 0B FC 
16b38     EB DB CD C4 
16b3c     BE BA B4 AF | 	byte	$54, $50, $44, $34, $23, $17, $0b, $fc, $eb, $db, $cd, $c4, $be, $ba, $b4, $af
16b40     AD B1 BE CD 
16b44     DD EA F5 05 
16b48     16 25 33 3D 
16b4c     43 47 4C 51 | 	byte	$ad, $b1, $be, $cd, $dd, $ea, $f5, $05, $16, $25, $33, $3d, $43, $47, $4c, $51
16b50     53 4F 42 32 
16b54     23 16 0B FB 
16b58     EC DB CC C3 
16b5c     BC B8 B4 AF | 	byte	$53, $4f, $42, $32, $23, $16, $0b, $fb, $ec, $db, $cc, $c3, $bc, $b8, $b4, $af
16b60     AD B2 BF CE 
16b64     DE EA F7 05 
16b68     16 26 33 3E 
16b6c     45 49 4D 51 | 	byte	$ad, $b2, $bf, $ce, $de, $ea, $f7, $05, $16, $26, $33, $3e, $45, $49, $4d, $51
16b70     52 4D 40 31 
16b74     22 15 09 F9 
16b78     EA D9 CC C2 
16b7c     BA B6 B2 AF | 	byte	$52, $4d, $40, $31, $22, $15, $09, $f9, $ea, $d9, $cc, $c2, $ba, $b6, $b2, $af
16b80     AE B4 BF CF 
16b84     DE EA F8 07 
16b88     17 27 33 3E 
16b8c     47 4A 4E 51 | 	byte	$ae, $b4, $bf, $cf, $de, $ea, $f8, $07, $17, $27, $33, $3e, $47, $4a, $4e, $51
16b90     51 4C 40 31 
16b94     22 15 07 F8 
16b98     E7 DA CD C1 
16b9c     B9 B4 B2 AF | 	byte	$51, $4c, $40, $31, $22, $15, $07, $f8, $e7, $da, $cd, $c1, $b9, $b4, $b2, $af
16ba0     AF B5 C0 CF 
16ba4     DE EB F9 09 
16ba8     18 27 34 3E 
16bac     47 4C 4F 51 | 	byte	$af, $b5, $c0, $cf, $de, $eb, $f9, $09, $18, $27, $34, $3e, $47, $4c, $4f, $51
16bb0     50 4A 3F 30 
16bb4     21 16 07 F7 
16bb8     E7 D9 CD C1 
16bbc     B8 B4 B1 B0 | 	byte	$50, $4a, $3f, $30, $21, $16, $07, $f7, $e7, $d9, $cd, $c1, $b8, $b4, $b1, $b0
16bc0     B0 B7 C2 D1 
16bc4     DE EB FB 0A 
16bc8     1A 28 33 3F 
16bcc     48 4D 4F 50 | 	byte	$b0, $b7, $c2, $d1, $de, $eb, $fb, $0a, $1a, $28, $33, $3f, $48, $4d, $4f, $50
16bd0     4F 49 3D 2E 
16bd4     21 14 06 F5 
16bd8     E6 D8 CB C1 
16bdc     B7 B3 B1 B0 | 	byte	$4f, $49, $3d, $2e, $21, $14, $06, $f5, $e6, $d8, $cb, $c1, $b7, $b3, $b1, $b0
16be0     B1 B8 C3 D1 
16be4     DE EC FC 0C 
16be8     1B 29 35 40 
16bec     49 4D 4F 50 | 	byte	$b1, $b8, $c3, $d1, $de, $ec, $fc, $0c, $1b, $29, $35, $40, $49, $4d, $4f, $50
16bf0     4E 47 3D 2E 
16bf4     21 13 04 F3 
16bf8     E3 D7 CB BF 
16bfc     B7 B2 B1 B0 | 	byte	$4e, $47, $3d, $2e, $21, $13, $04, $f3, $e3, $d7, $cb, $bf, $b7, $b2, $b1, $b0
16c00     B3 B9 C3 D2 
16c04     DF EC FD 0D 
16c08     1D 29 35 41 
16c0c     49 4E 4F 50 | 	byte	$b3, $b9, $c3, $d2, $df, $ec, $fd, $0d, $1d, $29, $35, $41, $49, $4e, $4f, $50
16c10     4D 47 3B 2F 
16c14     21 13 02 F2 
16c18     E3 D6 CA BF 
16c1c     B6 B2 B2 B1 | 	byte	$4d, $47, $3b, $2f, $21, $13, $02, $f2, $e3, $d6, $ca, $bf, $b6, $b2, $b2, $b1
16c20     B4 BA C5 D2 
16c24     E0 ED FE 10 
16c28     1E 2A 37 41 
16c2c     4A 4E 4E 4E | 	byte	$b4, $ba, $c5, $d2, $e0, $ed, $fe, $10, $1e, $2a, $37, $41, $4a, $4e, $4e, $4e
16c30     4C 46 3B 2D 
16c34     20 12 01 F0 
16c38     E1 D5 C9 BE 
16c3c     B6 B2 B1 B2 | 	byte	$4c, $46, $3b, $2d, $20, $12, $01, $f0, $e1, $d5, $c9, $be, $b6, $b2, $b1, $b2
16c40     B5 BC C6 D2 
16c44     E0 EE 00 10 
16c48     20 2B 37 42 
16c4c     4A 4D 4E 4D | 	byte	$b5, $bc, $c6, $d2, $e0, $ee, $00, $10, $20, $2b, $37, $42, $4a, $4d, $4e, $4d
16c50     4A 43 3A 2C 
16c54     1F 11 FE EF 
16c58     DF D3 C8 BD 
16c5c     B6 B2 B2 B3 | 	byte	$4a, $43, $3a, $2c, $1f, $11, $fe, $ef, $df, $d3, $c8, $bd, $b6, $b2, $b2, $b3
16c60     B6 BC C6 D4 
16c64     E1 F1 01 12 
16c68     21 2D 39 42 
16c6c     4A 4E 4E 4C | 	byte	$b6, $bc, $c6, $d4, $e1, $f1, $01, $12, $21, $2d, $39, $42, $4a, $4e, $4e, $4c
16c70     49 43 38 2C 
16c74     1E 0F FE ED 
16c78     DE D2 C6 BC 
16c7c     B5 B3 B3 B4 | 	byte	$49, $43, $38, $2c, $1e, $0f, $fe, $ed, $de, $d2, $c6, $bc, $b5, $b3, $b3, $b4
16c80     B7 BE C9 D5 
16c84     E2 F1 04 13 
16c88     23 2E 39 44 
16c8c     4A 4D 4D 4B | 	byte	$b7, $be, $c9, $d5, $e2, $f1, $04, $13, $23, $2e, $39, $44, $4a, $4d, $4d, $4b
16c90     48 41 37 2C 
16c94     1E 0D FC EB 
16c98     DE D0 C6 BD 
16c9c     B5 B3 B3 B5 | 	byte	$48, $41, $37, $2c, $1e, $0d, $fc, $eb, $de, $d0, $c6, $bd, $b5, $b3, $b3, $b5
16ca0     B9 C0 C8 D5 
16ca4     E4 F3 05 15 
16ca8     24 30 3B 44 
16cac     4A 4D 4C 4B | 	byte	$b9, $c0, $c8, $d5, $e4, $f3, $05, $15, $24, $30, $3b, $44, $4a, $4d, $4c, $4b
16cb0     47 3F 36 2A 
16cb4     1C 0B FB EA 
16cb8     DB CF C4 BB 
16cbc     B6 B3 B4 B6 | 	byte	$47, $3f, $36, $2a, $1c, $0b, $fb, $ea, $db, $cf, $c4, $bb, $b6, $b3, $b4, $b6
16cc0     BA C2 CA D6 
16cc4     E6 F5 07 16 
16cc8     25 32 3C 44 
16ccc     4A 4C 4B 49 | 	byte	$ba, $c2, $ca, $d6, $e6, $f5, $07, $16, $25, $32, $3c, $44, $4a, $4c, $4b, $49
16cd0     45 3E 35 29 
16cd4     1A 09 F9 E9 
16cd8     DA CE C3 BB 
16cdc     B6 B4 B6 B8 | 	byte	$45, $3e, $35, $29, $1a, $09, $f9, $e9, $da, $ce, $c3, $bb, $b6, $b4, $b6, $b8
16ce0     BB C2 CC D7 
16ce4     E6 F8 08 18 
16ce8     26 32 3D 44 
16cec     4A 4C 4B 48 | 	byte	$bb, $c2, $cc, $d7, $e6, $f8, $08, $18, $26, $32, $3d, $44, $4a, $4c, $4b, $48
16cf0     44 3D 34 28 
16cf4     19 08 F7 E7 
16cf8     D9 CD C3 BB 
16cfc     B7 B5 B7 B9 | 	byte	$44, $3d, $34, $28, $19, $08, $f7, $e7, $d9, $cd, $c3, $bb, $b7, $b5, $b7, $b9
16d00     BE C4 CD DA 
16d04     E9 F9 0A 19 
16d08     27 34 3E 45 
16d0c     49 4B 49 46 | 	byte	$be, $c4, $cd, $da, $e9, $f9, $0a, $19, $27, $34, $3e, $45, $49, $4b, $49, $46
16d10     43 3C 32 27 
16d14     16 07 F5 E6 
16d18     D9 CC C3 BC 
16d1c     B7 B6 B8 BB | 	byte	$43, $3c, $32, $27, $16, $07, $f5, $e6, $d9, $cc, $c3, $bc, $b7, $b6, $b8, $bb
16d20     BF C6 CE DA 
16d24     EB FB 0C 1A 
16d28     29 34 3E 44 
16d2c     48 49 47 44 | 	byte	$bf, $c6, $ce, $da, $eb, $fb, $0c, $1a, $29, $34, $3e, $44, $48, $49, $47, $44
16d30     40 39 30 24 
16d34     14 04 F3 E4 
16d38     D7 CA C2 BB 
16d3c     B8 B7 B9 BC | 	byte	$40, $39, $30, $24, $14, $04, $f3, $e4, $d7, $ca, $c2, $bb, $b8, $b7, $b9, $bc
16d40     C0 C8 D0 DE 
16d44     EC FD 0E 1C 
16d48     2A 36 3E 45 
16d4c     48 48 46 43 | 	byte	$c0, $c8, $d0, $de, $ec, $fd, $0e, $1c, $2a, $36, $3e, $45, $48, $48, $46, $43
16d50     3F 38 2F 20 
16d54     11 00 F2 E3 
16d58     D6 CA C1 BC 
16d5c     B8 B8 BA BE | 	byte	$3f, $38, $2f, $20, $11, $00, $f2, $e3, $d6, $ca, $c1, $bc, $b8, $b8, $ba, $be
16d60     C3 C9 D2 E0 
16d64     EF 00 10 1D 
16d68     2B 36 3F 44 
16d6c     47 47 45 42 | 	byte	$c3, $c9, $d2, $e0, $ef, $00, $10, $1d, $2b, $36, $3f, $44, $47, $47, $45, $42
16d70     3D 37 2C 1E 
16d74     0F FF F0 E2 
16d78     D4 CA C1 BC 
16d7c     B9 BA BC BF | 	byte	$3d, $37, $2c, $1e, $0f, $ff, $f0, $e2, $d4, $ca, $c1, $bc, $b9, $ba, $bc, $bf
16d80     C4 CB D5 E2 
16d84     F3 01 11 20 
16d88     2B 36 3E 44 
16d8c     46 46 43 40 | 	byte	$c4, $cb, $d5, $e2, $f3, $01, $11, $20, $2b, $36, $3e, $44, $46, $46, $43, $40
16d90     3B 33 2A 1C 
16d94     0D FD ED E1 
16d98     D4 C9 C1 BC 
16d9c     BA BB BE C1 | 	byte	$3b, $33, $2a, $1c, $0d, $fd, $ed, $e1, $d4, $c9, $c1, $bc, $ba, $bb, $be, $c1
16da0     C6 CD D8 E6 
16da4     F5 05 12 20 
16da8     2C 37 3F 43 
16dac     45 44 41 3E | 	byte	$c6, $cd, $d8, $e6, $f5, $05, $12, $20, $2c, $37, $3f, $43, $45, $44, $41, $3e
16db0     39 32 27 19 
16db4     09 FB EC DF 
16db8     D3 C9 C2 BD 
16dbc     BC BD BF C3 | 	byte	$39, $32, $27, $19, $09, $fb, $ec, $df, $d3, $c9, $c2, $bd, $bc, $bd, $bf, $c3
16dc0     C8 D0 DA E8 
16dc4     F7 07 14 22 
16dc8     2D 37 3E 43 
16dcc     44 43 40 3C | 	byte	$c8, $d0, $da, $e8, $f7, $07, $14, $22, $2d, $37, $3e, $43, $44, $43, $40, $3c
16dd0     38 2F 24 18 
16dd4     08 F8 EB DF 
16dd8     D3 CA C2 BE 
16ddc     BD BF C1 C4 | 	byte	$38, $2f, $24, $18, $08, $f8, $eb, $df, $d3, $ca, $c2, $be, $bd, $bf, $c1, $c4
16de0     CA D3 DE EB 
16de4     FA 08 16 22 
16de8     2E 37 3D 42 
16dec     42 41 3F 3A | 	byte	$ca, $d3, $de, $eb, $fa, $08, $16, $22, $2e, $37, $3d, $42, $42, $41, $3f, $3a
16df0     35 2D 21 14 
16df4     05 F7 EA DD 
16df8     D3 C9 C2 BF 
16dfc     BE C0 C3 C6 | 	byte	$35, $2d, $21, $14, $05, $f7, $ea, $dd, $d3, $c9, $c2, $bf, $be, $c0, $c3, $c6
16e00     CC D5 E1 ED 
16e04     FC 0A 17 23 
16e08     2D 36 3C 40 
16e0c     41 3F 3C 38 | 	byte	$cc, $d5, $e1, $ed, $fc, $0a, $17, $23, $2d, $36, $3c, $40, $41, $3f, $3c, $38
16e10     32 29 1E 10 
16e14     03 F5 E7 DC 
16e18     D2 C9 C3 BF 
16e1c     BF C1 C4 C8 | 	byte	$32, $29, $1e, $10, $03, $f5, $e7, $dc, $d2, $c9, $c3, $bf, $bf, $c1, $c4, $c8
16e20     CF D7 E3 F1 
16e24     FD 0C 18 24 
16e28     2E 36 3C 3F 
16e2c     40 3E 3B 36 | 	byte	$cf, $d7, $e3, $f1, $fd, $0c, $18, $24, $2e, $36, $3c, $3f, $40, $3e, $3b, $36
16e30     2F 26 1B 0F 
16e34     00 F4 E7 DB 
16e38     D2 CA C4 C1 
16e3c     C0 C2 C6 CA | 	byte	$2f, $26, $1b, $0f, $00, $f4, $e7, $db, $d2, $ca, $c4, $c1, $c0, $c2, $c6, $ca
16e40     D1 DA E5 F3 
16e44     01 0D 19 24 
16e48     2E 35 3B 3E 
16e4c     3F 3D 39 34 | 	byte	$d1, $da, $e5, $f3, $01, $0d, $19, $24, $2e, $35, $3b, $3e, $3f, $3d, $39, $34
16e50     2D 24 19 0B 
16e54     00 F2 E7 DC 
16e58     D2 CB C5 C2 
16e5c     C2 C4 C7 CD | 	byte	$2d, $24, $19, $0b, $00, $f2, $e7, $dc, $d2, $cb, $c5, $c2, $c2, $c4, $c7, $cd
16e60     D4 DD E9 F5 
16e64     01 0E 19 25 
16e68     2E 35 3B 3D 
16e6c     3D 3B 37 32 | 	byte	$d4, $dd, $e9, $f5, $01, $0e, $19, $25, $2e, $35, $3b, $3d, $3d, $3b, $37, $32
16e70     2B 21 15 0A 
16e74     FD F2 E6 DC 
16e78     D2 CB C6 C3 
16e7c     C3 C5 C9 CE | 	byte	$2b, $21, $15, $0a, $fd, $f2, $e6, $dc, $d2, $cb, $c6, $c3, $c3, $c5, $c9, $ce
16e80     D6 E0 EA F7 
16e84     03 0F 1B 25 
16e88     2E 35 3A 3C 
16e8c     3C 39 36 30 | 	byte	$d6, $e0, $ea, $f7, $03, $0f, $1b, $25, $2e, $35, $3a, $3c, $3c, $39, $36, $30
16e90     28 1F 13 08 
16e94     FC F0 E5 DB 
16e98     D3 CB C7 C5 
16e9c     C5 C7 CB D1 | 	byte	$28, $1f, $13, $08, $fc, $f0, $e5, $db, $d3, $cb, $c7, $c5, $c5, $c7, $cb, $d1
16ea0     D9 E2 EE F9 
16ea4     05 10 1C 25 
16ea8     2D 34 39 3B 
16eac     3B 39 35 2E | 	byte	$d9, $e2, $ee, $f9, $05, $10, $1c, $25, $2d, $34, $39, $3b, $3b, $39, $35, $2e
16eb0     27 1D 12 07 
16eb4     FB EF E5 DB 
16eb8     D3 CC C8 C5 
16ebc     C5 C8 CC D3 | 	byte	$27, $1d, $12, $07, $fb, $ef, $e5, $db, $d3, $cc, $c8, $c5, $c5, $c8, $cc, $d3
16ec0     DA E5 EF FB 
16ec4     06 11 1C 26 
16ec8     2E 35 39 3B 
16ecc     3A 38 33 2C | 	byte	$da, $e5, $ef, $fb, $06, $11, $1c, $26, $2e, $35, $39, $3b, $3a, $38, $33, $2c
16ed0     24 1A 0F 04 
16ed4     F7 ED E3 D9 
16ed8     D2 CB C8 C6 
16edc     C6 CA CE D5 | 	byte	$24, $1a, $0f, $04, $f7, $ed, $e3, $d9, $d2, $cb, $c8, $c6, $c6, $ca, $ce, $d5
16ee0     DE E7 F2 FE 
16ee4     09 15 1E 28 
16ee8     2F 34 38 39 
16eec     38 35 30 29 | 	byte	$de, $e7, $f2, $fe, $09, $15, $1e, $28, $2f, $34, $38, $39, $38, $35, $30, $29
16ef0     20 17 0B 00 
16ef4     F5 EA E0 D7 
16ef8     D0 CB C7 C6 
16efc     C7 CB D0 D8 | 	byte	$20, $17, $0b, $00, $f5, $ea, $e0, $d7, $d0, $cb, $c7, $c6, $c7, $cb, $d0, $d8
16f00     E0 EA F6 01 
16f04     0C 16 21 2A 
16f08     30 35 38 38 
16f0c     37 33 2D 26 | 	byte	$e0, $ea, $f6, $01, $0c, $16, $21, $2a, $30, $35, $38, $38, $37, $33, $2d, $26
16f10     1D 13 09 FD 
16f14     F3 E8 DE D6 
16f18     CF CB C8 C7 
16f1c     C9 CD D3 DA | 	byte	$1d, $13, $09, $fd, $f3, $e8, $de, $d6, $cf, $cb, $c8, $c7, $c9, $cd, $d3, $da
16f20     E4 EE F9 05 
16f24     0F 1A 22 2B 
16f28     30 35 38 38 
16f2c     36 31 2B 23 | 	byte	$e4, $ee, $f9, $05, $0f, $1a, $22, $2b, $30, $35, $38, $38, $36, $31, $2b, $23
16f30     1B 10 06 FA 
16f34     F0 E6 DC D6 
16f38     CF CB C9 C9 
16f3c     CB CF D5 DE | 	byte	$1b, $10, $06, $fa, $f0, $e6, $dc, $d6, $cf, $cb, $c9, $c9, $cb, $cf, $d5, $de
16f40     E7 F1 FC 07 
16f44     12 1C 24 2C 
16f48     31 35 37 36 
16f4c     34 2F 29 20 | 	byte	$e7, $f1, $fc, $07, $12, $1c, $24, $2c, $31, $35, $37, $36, $34, $2f, $29, $20
16f50     17 0D 02 F8 
16f54     ED E4 DB D3 
16f58     CE CB CA CA 
16f5c     CD D2 D9 E0 | 	byte	$17, $0d, $02, $f8, $ed, $e4, $db, $d3, $ce, $cb, $ca, $ca, $cd, $d2, $d9, $e0
16f60     EA F5 FF 0A 
16f64     15 1E 26 2D 
16f68     32 35 36 35 
16f6c     32 2C 26 1E | 	byte	$ea, $f5, $ff, $0a, $15, $1e, $26, $2d, $32, $35, $36, $35, $32, $2c, $26, $1e
16f70     14 0A FF F5 
16f74     EB E1 DA D3 
16f78     CE CB CA CC 
16f7c     CF D4 DB E4 | 	byte	$14, $0a, $ff, $f5, $eb, $e1, $da, $d3, $ce, $cb, $ca, $cc, $cf, $d4, $db, $e4
16f80     ED F7 01 0D 
16f84     16 20 27 2E 
16f88     33 35 35 34 
16f8c     30 2B 23 1C | 	byte	$ed, $f7, $01, $0d, $16, $20, $27, $2e, $33, $35, $35, $34, $30, $2b, $23, $1c
16f90     12 08 FD F3 
16f94     E9 E0 D8 D3 
16f98     CE CC CC CD 
16f9c     D1 D7 DE E6 | 	byte	$12, $08, $fd, $f3, $e9, $e0, $d8, $d3, $ce, $cc, $cc, $cd, $d1, $d7, $de, $e6
16fa0     EF FA 04 0F 
16fa4     18 21 28 2E 
16fa8     32 34 35 32 
16fac     2F 28 21 19 | 	byte	$ef, $fa, $04, $0f, $18, $21, $28, $2e, $32, $34, $35, $32, $2f, $28, $21, $19
16fb0     0F 05 FA F1 
16fb4     E7 DE D7 D2 
16fb8     CE CC CD CE 
16fbc     D3 D8 E1 E9 | 	byte	$0f, $05, $fa, $f1, $e7, $de, $d7, $d2, $ce, $cc, $cd, $ce, $d3, $d8, $e1, $e9
16fc0     F1 FC 07 11 
16fc4     1A 22 29 2E 
16fc8     32 33 32 30 
16fcc     2B 25 1E 15 | 	byte	$f1, $fc, $07, $11, $1a, $22, $29, $2e, $32, $33, $32, $30, $2b, $25, $1e, $15
16fd0     0C 02 F8 EE 
16fd4     E5 DD D6 D1 
16fd8     CE CD CE D0 
16fdc     D5 DB E2 EB | 	byte	$0c, $02, $f8, $ee, $e5, $dd, $d6, $d1, $ce, $cd, $ce, $d0, $d5, $db, $e2, $eb
16fe0     F5 FF 09 12 
16fe4     1C 24 29 2F 
16fe8     32 32 31 2F 
16fec     2A 24 1C 13 | 	byte	$f5, $ff, $09, $12, $1c, $24, $29, $2f, $32, $32, $31, $2f, $2a, $24, $1c, $13
16ff0     0A FF F6 EC 
16ff4     E4 DC D6 D1 
16ff8     CE CD CF D2 
16ffc     D6 DC E5 EE | 	byte	$0a, $ff, $f6, $ec, $e4, $dc, $d6, $d1, $ce, $cd, $cf, $d2, $d6, $dc, $e5, $ee
17000     F7 01 0B 15 
17004     1D 24 2B 2E 
17008     31 32 30 2D 
1700c     28 21 1A 10 | 	byte	$f7, $01, $0b, $15, $1d, $24, $2b, $2e, $31, $32, $30, $2d, $28, $21, $1a, $10
17010     08 FE F4 EA 
17014     E2 DB D6 D1 
17018     CF CE D0 D3 
1701c     D8 DF E7 F0 | 	byte	$08, $fe, $f4, $ea, $e2, $db, $d6, $d1, $cf, $ce, $d0, $d3, $d8, $df, $e7, $f0
17020     F9 03 0D 17 
17024     1E 25 2B 2F 
17028     31 31 2F 2B 
1702c     26 1F 18 0E | 	byte	$f9, $03, $0d, $17, $1e, $25, $2b, $2f, $31, $31, $2f, $2b, $26, $1f, $18, $0e
17030     04 FC F2 EA 
17034     E1 DA D5 D1 
17038     CF CF D1 D5 
1703c     DA E1 E9 F2 | 	byte	$04, $fc, $f2, $ea, $e1, $da, $d5, $d1, $cf, $cf, $d1, $d5, $da, $e1, $e9, $f2
17040     FC 05 0E 17 
17044     1F 26 2B 2F 
17048     30 30 2E 2A 
1704c     24 1D 15 0D | 	byte	$fc, $05, $0e, $17, $1f, $26, $2b, $2f, $30, $30, $2e, $2a, $24, $1d, $15, $0d
17050     03 F9 F0 E7 
17054     E0 DA D4 D1 
17058     D0 D0 D2 D6 
1705c     DC E3 EB F4 | 	byte	$03, $f9, $f0, $e7, $e0, $da, $d4, $d1, $d0, $d0, $d2, $d6, $dc, $e3, $eb, $f4
17060     FD 07 10 19 
17064     20 27 2C 2F 
17068     30 30 2D 29 
1706c     23 1C 14 0B | 	byte	$fd, $07, $10, $19, $20, $27, $2c, $2f, $30, $30, $2d, $29, $23, $1c, $14, $0b
17070     02 F9 EF E7 
17074     E0 D9 D5 D2 
17078     D1 D1 D3 D8 
1707c     DD E5 ED F6 | 	byte	$02, $f9, $ef, $e7, $e0, $d9, $d5, $d2, $d1, $d1, $d3, $d8, $dd, $e5, $ed, $f6
17080     FF 09 12 1A 
17084     21 27 2B 2E 
17088     30 2F 2B 27 
1708c     21 1A 12 09 | 	byte	$ff, $09, $12, $1a, $21, $27, $2b, $2e, $30, $2f, $2b, $27, $21, $1a, $12, $09
17090     00 F6 EE E6 
17094     DE D9 D5 D2 
17098     D1 D2 D5 DA 
1709c     DF E6 EE F7 | 	byte	$00, $f6, $ee, $e6, $de, $d9, $d5, $d2, $d1, $d2, $d5, $da, $df, $e6, $ee, $f7
170a0     00 0A 13 1B 
170a4     21 27 2C 2D 
170a8     2E 2D 2A 26 
170ac     1F 18 0F 07 | 	byte	$00, $0a, $13, $1b, $21, $27, $2c, $2d, $2e, $2d, $2a, $26, $1f, $18, $0f, $07
170b0     FD F5 EC E4 
170b4     DD D8 D4 D2 
170b8     D1 D3 D6 DB 
170bc     E1 E8 F1 FA | 	byte	$fd, $f5, $ec, $e4, $dd, $d8, $d4, $d2, $d1, $d3, $d6, $db, $e1, $e8, $f1, $fa
170c0     02 0C 15 1C 
170c4     23 28 2C 2D 
170c8     2E 2C 29 24 
170cc     1E 17 0E 05 | 	byte	$02, $0c, $15, $1c, $23, $28, $2c, $2d, $2e, $2c, $29, $24, $1e, $17, $0e, $05
170d0     FC F3 EB E4 
170d4     DD D8 D4 D2 
170d8     D2 D4 D7 DC 
170dc     E2 EA F2 FB | 	byte	$fc, $f3, $eb, $e4, $dd, $d8, $d4, $d2, $d2, $d4, $d7, $dc, $e2, $ea, $f2, $fb
170e0     04 0D 16 1D 
170e4     23 28 2B 2E 
170e8     2D 2B 28 23 
170ec     1D 14 0D 04 | 	byte	$04, $0d, $16, $1d, $23, $28, $2b, $2e, $2d, $2b, $28, $23, $1d, $14, $0d, $04
170f0     FB F2 E9 E3 
170f4     DD D8 D5 D3 
170f8     D3 D5 D9 DE 
170fc     E4 EC F4 FC | 	byte	$fb, $f2, $e9, $e3, $dd, $d8, $d5, $d3, $d3, $d5, $d9, $de, $e4, $ec, $f4, $fc
17100     05 0F 16 1D 
17104     24 28 2B 2C 
17108     2C 2A 27 21 
1710c     1B 13 0B 02 | 	byte	$05, $0f, $16, $1d, $24, $28, $2b, $2c, $2c, $2a, $27, $21, $1b, $13, $0b, $02
17110     F9 F1 E9 E2 
17114     DD D8 D5 D3 
17118     D4 D6 DA DF 
1711c     E5 ED F5 FE | 	byte	$f9, $f1, $e9, $e2, $dd, $d8, $d5, $d3, $d4, $d6, $da, $df, $e5, $ed, $f5, $fe
17120     07 10 18 1F 
17124     24 28 2B 2C 
17128     2C 29 25 20 
1712c     19 12 09 01 | 	byte	$07, $10, $18, $1f, $24, $28, $2b, $2c, $2c, $29, $25, $20, $19, $12, $09, $01
17130     F8 EF E8 E1 
17134     DB D7 D5 D4 
17138     D5 D7 DB E0 
1713c     E7 EF F7 00 | 	byte	$f8, $ef, $e8, $e1, $db, $d7, $d5, $d4, $d5, $d7, $db, $e0, $e7, $ef, $f7, $00
17140     09 11 18 1F 
17144     25 29 2B 2C 
17148     2B 28 25 1F 
1714c     18 10 08 00 | 	byte	$09, $11, $18, $1f, $25, $29, $2b, $2c, $2b, $28, $25, $1f, $18, $10, $08, $00
17150     F7 EF E7 E1 
17154     DC D8 D5 D5 
17158     D6 D8 DC E2 
1715c     E9 F1 F9 01 | 	byte	$f7, $ef, $e7, $e1, $dc, $d8, $d5, $d5, $d6, $d8, $dc, $e2, $e9, $f1, $f9, $01
17160     0A 12 19 20 
17164     25 29 2B 2B 
17168     2A 27 23 1D 
1716c     17 0E 06 FE | 	byte	$0a, $12, $19, $20, $25, $29, $2b, $2b, $2a, $27, $23, $1d, $17, $0e, $06, $fe
17170     F6 ED E6 E0 
17174     DB D8 D5 D5 
17178     D6 DA DE E3 
1717c     EA F2 FA 03 | 	byte	$f6, $ed, $e6, $e0, $db, $d8, $d5, $d5, $d6, $da, $de, $e3, $ea, $f2, $fa, $03
17180     0B 13 1A 20 
17184     25 28 2A 2A 
17188     29 26 21 1B 
1718c     14 0D 04 FC | 	byte	$0b, $13, $1a, $20, $25, $28, $2a, $2a, $29, $26, $21, $1b, $14, $0d, $04, $fc
17190     F4 EC E5 E0 
17194     DA D7 D5 D5 
17198     D7 DA DF E5 
1719c     EC F4 FC 05 | 	byte	$f4, $ec, $e5, $e0, $da, $d7, $d5, $d5, $d7, $da, $df, $e5, $ec, $f4, $fc, $05
171a0     0D 14 1B 21 
171a4     26 28 2A 2A 
171a8     28 25 1F 1A 
171ac     12 0B 03 FA | 	byte	$0d, $14, $1b, $21, $26, $28, $2a, $2a, $28, $25, $1f, $1a, $12, $0b, $03, $fa
171b0     F3 EB E5 DF 
171b4     DA D7 D6 D6 
171b8     D8 DC E0 E7 
171bc     ED F5 FD 06 | 	byte	$f3, $eb, $e5, $df, $da, $d7, $d6, $d6, $d8, $dc, $e0, $e7, $ed, $f5, $fd, $06
171c0     0E 15 1C 22 
171c4     26 29 29 29 
171c8     27 24 1E 18 
171cc     11 09 01 F9 | 	byte	$0e, $15, $1c, $22, $26, $29, $29, $29, $27, $24, $1e, $18, $11, $09, $01, $f9
171d0     F1 EA E3 DF 
171d4     DA D8 D6 D7 
171d8     D9 DD E2 E8 
171dc     EF F6 FF 08 | 	byte	$f1, $ea, $e3, $df, $da, $d8, $d6, $d7, $d9, $dd, $e2, $e8, $ef, $f6, $ff, $08
171e0     0F 16 1D 22 
171e4     26 28 29 28 
171e8     26 21 1D 17 
171ec     0F 08 FF F8 | 	byte	$0f, $16, $1d, $22, $26, $28, $29, $28, $26, $21, $1d, $17, $0f, $08, $ff, $f8
171f0     F0 E8 E3 DD 
171f4     DA D8 D7 D8 
171f8     DA DE E3 EA 
171fc     F1 FA 01 09 | 	byte	$f0, $e8, $e3, $dd, $da, $d8, $d7, $d8, $da, $de, $e3, $ea, $f1, $fa, $01, $09
17200     10 18 1D 23 
17204     26 28 28 27 
17208     25 21 1B 14 
1720c     0E 05 FE F6 | 	byte	$10, $18, $1d, $23, $26, $28, $28, $27, $25, $21, $1b, $14, $0e, $05, $fe, $f6
17210     EF E8 E2 DD 
17214     DA D8 D8 D9 
17218     DC E0 E5 EC 
1721c     F3 FB 02 0B | 	byte	$ef, $e8, $e2, $dd, $da, $d8, $d8, $d9, $dc, $e0, $e5, $ec, $f3, $fb, $02, $0b
17220     12 19 1F 23 
17224     26 28 28 27 
17228     24 1F 1A 13 
1722c     0C 04 FD F5 | 	byte	$12, $19, $1f, $23, $26, $28, $28, $27, $24, $1f, $1a, $13, $0c, $04, $fd, $f5
17230     ED E7 E1 DD 
17234     DA D9 D9 DA 
17238     DD E1 E7 ED 
1723c     F5 FD 04 0C | 	byte	$ed, $e7, $e1, $dd, $da, $d9, $d9, $da, $dd, $e1, $e7, $ed, $f5, $fd, $04, $0c
17240     13 19 1F 23 
17244     26 27 27 26 
17248     22 1E 18 11 
1724c     0A 02 FB F3 | 	byte	$13, $19, $1f, $23, $26, $27, $27, $26, $22, $1e, $18, $11, $0a, $02, $fb, $f3
17250     EC E6 E1 DD 
17254     DA D9 D9 DB 
17258     DE E3 E8 EF 
1725c     F6 FE 06 0D | 	byte	$ec, $e6, $e1, $dd, $da, $d9, $d9, $db, $de, $e3, $e8, $ef, $f6, $fe, $06, $0d
17260     14 1A 20 23 
17264     26 26 26 24 
17268     21 1C 15 0F 
1726c     09 00 F9 F2 | 	byte	$14, $1a, $20, $23, $26, $26, $26, $24, $21, $1c, $15, $0f, $09, $00, $f9, $f2
17270     EB E5 E0 DC 
17274     DA D9 DA DB 
17278     DF E4 EA F1 
1727c     F8 00 07 0F | 	byte	$eb, $e5, $e0, $dc, $da, $d9, $da, $db, $df, $e4, $ea, $f1, $f8, $00, $07, $0f
17280     15 1B 20 23 
17284     25 26 25 23 
17288     1F 1A 15 0D 
1728c     06 FF F7 F1 | 	byte	$15, $1b, $20, $23, $25, $26, $25, $23, $1f, $1a, $15, $0d, $06, $ff, $f7, $f1
17290     EA E4 E0 DC 
17294     DA DA DB DD 
17298     E1 E5 EC F3 
1729c     FA 02 0A 10 | 	byte	$ea, $e4, $e0, $dc, $da, $da, $db, $dd, $e1, $e5, $ec, $f3, $fa, $02, $0a, $10
172a0     17 1C 21 24 
172a4     25 25 24 22 
172a8     1E 19 13 0C 
172ac     04 FE F6 EF | 	byte	$17, $1c, $21, $24, $25, $25, $24, $22, $1e, $19, $13, $0c, $04, $fe, $f6, $ef
172b0     E9 E4 DF DC 
172b4     DB DB DC DF 
172b8     E3 E8 EE F4 
172bc     FC 03 0A 12 | 	byte	$e9, $e4, $df, $dc, $db, $db, $dc, $df, $e3, $e8, $ee, $f4, $fc, $03, $0a, $12
172c0     17 1D 21 23 
172c4     25 25 23 20 
172c8     1C 17 10 09 
172cc     03 FC F5 ED | 	byte	$17, $1d, $21, $23, $25, $25, $23, $20, $1c, $17, $10, $09, $03, $fc, $f5, $ed
172d0     E8 E3 DF DC 
172d4     DB DC DD E1 
172d8     E4 EA F0 F7 
172dc     FE 05 0C 13 | 	byte	$e8, $e3, $df, $dc, $db, $dc, $dd, $e1, $e4, $ea, $f0, $f7, $fe, $05, $0c, $13
172e0     18 1D 21 23 
172e4     24 24 22 1F 
172e8     1A 15 0F 08 
172ec     01 F9 F3 ED | 	byte	$18, $1d, $21, $23, $24, $24, $22, $1f, $1a, $15, $0f, $08, $01, $f9, $f3, $ed
172f0     E7 E2 DF DD 
172f4     DC DD DE E2 
172f8     E6 EC F2 F9 
172fc     00 07 0E 14 | 	byte	$e7, $e2, $df, $dd, $dc, $dd, $de, $e2, $e6, $ec, $f2, $f9, $00, $07, $0e, $14
17300     19 1E 21 24 
17304     24 23 21 1D 
17308     18 13 0D 06 
1730c     FF F8 F2 EB | 	byte	$19, $1e, $21, $24, $24, $23, $21, $1d, $18, $13, $0d, $06, $ff, $f8, $f2, $eb
17310     E7 E2 DF DD 
17314     DD DE E0 E3 
17318     E8 EE F4 FB 
1731c     02 09 0F 15 | 	byte	$e7, $e2, $df, $dd, $dd, $de, $e0, $e3, $e8, $ee, $f4, $fb, $02, $09, $0f, $15
17320     1A 1E 21 23 
17324     23 21 1F 1C 
17328     17 11 0A 04 
1732c     FE F7 F1 EA | 	byte	$1a, $1e, $21, $23, $23, $21, $1f, $1c, $17, $11, $0a, $04, $fe, $f7, $f1, $ea
17330     E6 E2 DF DE 
17334     DE DE E1 E5 
17338     EA EF F6 FD 
1733c     04 0A 10 16 | 	byte	$e6, $e2, $df, $de, $de, $de, $e1, $e5, $ea, $ef, $f6, $fd, $04, $0a, $10, $16
17340     1B 1F 21 22 
17344     22 20 1E 19 
17348     14 0F 09 02 
1734c     FB F4 EF E9 | 	byte	$1b, $1f, $21, $22, $22, $20, $1e, $19, $14, $0f, $09, $02, $fb, $f4, $ef, $e9
17350     E5 E1 DF DE 
17354     DE E0 E2 E7 
17358     EC F1 F8 FE 
1735c     05 0C 12 17 | 	byte	$e5, $e1, $df, $de, $de, $e0, $e2, $e7, $ec, $f1, $f8, $fe, $05, $0c, $12, $17
17360     1B 1F 21 21 
17364     20 1F 1C 18 
17368     13 0D 07 00 
1736c     F9 F3 ED E8 | 	byte	$1b, $1f, $21, $21, $20, $1f, $1c, $18, $13, $0d, $07, $00, $f9, $f3, $ed, $e8
17370     E4 E1 DF DF 
17374     E0 E1 E4 E8 
17378     EE F3 FA 01 
1737c     07 0D 13 17 | 	byte	$e4, $e1, $df, $df, $e0, $e1, $e4, $e8, $ee, $f3, $fa, $01, $07, $0d, $13, $17
17380     1C 1F 20 21 
17384     20 1E 1A 16 
17388     11 0B 05 FF 
1738c     F8 F2 ED E8 | 	byte	$1c, $1f, $20, $21, $20, $1e, $1a, $16, $11, $0b, $05, $ff, $f8, $f2, $ed, $e8
17390     E4 E2 E0 E0 
17394     E1 E3 E6 EA 
17398     F0 F6 FC 03 
1739c     09 0E 14 19 | 	byte	$e4, $e2, $e0, $e0, $e1, $e3, $e6, $ea, $f0, $f6, $fc, $03, $09, $0e, $14, $19
173a0     1C 1F 20 20 
173a4     1F 1C 19 14 
173a8     0F 09 03 FD 
173ac     F7 F1 EB E7 | 	byte	$1c, $1f, $20, $20, $1f, $1c, $19, $14, $0f, $09, $03, $fd, $f7, $f1, $eb, $e7
173b0     E4 E2 E1 E1 
173b4     E2 E5 E8 EC 
173b8     F2 F8 FE 04 
173bc     0A 0F 15 19 | 	byte	$e4, $e2, $e1, $e1, $e2, $e5, $e8, $ec, $f2, $f8, $fe, $04, $0a, $0f, $15, $19
173c0     1C 1E 1F 1F 
173c4     1D 1A 16 12 
173c8     0D 07 01 FA 
173cc     F5 EF EB E7 | 	byte	$1c, $1e, $1f, $1f, $1d, $1a, $16, $12, $0d, $07, $01, $fa, $f5, $ef, $eb, $e7
173d0     E4 E2 E1 E2 
173d4     E3 E6 EA EE 
173d8     F4 F9 00 06 
173dc     0B 11 15 1A | 	byte	$e4, $e2, $e1, $e2, $e3, $e6, $ea, $ee, $f4, $f9, $00, $06, $0b, $11, $15, $1a
173e0     1C 1E 1E 1E 
173e4     1C 19 15 10 
173e8     0B 05 00 F9 
173ec     F4 EF EA E7 | 	byte	$1c, $1e, $1e, $1e, $1c, $19, $15, $10, $0b, $05, $00, $f9, $f4, $ef, $ea, $e7
173f0     E4 E2 E2 E3 
173f4     E5 E8 EC F0 
173f8     F6 FB 02 07 
173fc     0D 12 17 1A | 	byte	$e4, $e2, $e2, $e3, $e5, $e8, $ec, $f0, $f6, $fb, $02, $07, $0d, $12, $17, $1a
17400     1C 1D 1D 1C 
17404     1B 17 13 0F 
17408     09 03 FE F8 
1740c     F2 EE E9 E6 | 	byte	$1c, $1d, $1d, $1c, $1b, $17, $13, $0f, $09, $03, $fe, $f8, $f2, $ee, $e9, $e6
17410     E4 E2 E2 E4 
17414     E6 E9 EE F2 
17418     F8 FD 03 09 
1741c     0E 13 16 1A | 	byte	$e4, $e2, $e2, $e4, $e6, $e9, $ee, $f2, $f8, $fd, $03, $09, $0e, $13, $16, $1a
17420     1C 1C 1C 1B 
17424     19 15 11 0C 
17428     07 01 FB F6 
1742c     F1 EC E9 E6 | 	byte	$1c, $1c, $1c, $1b, $19, $15, $11, $0c, $07, $01, $fb, $f6, $f1, $ec, $e9, $e6
17430     E4 E3 E3 E5 
17434     E7 EB EF F5 
17438     F9 FF 04 0A 
1743c     0F 13 17 1A | 	byte	$e4, $e3, $e3, $e5, $e7, $eb, $ef, $f5, $f9, $ff, $04, $0a, $0f, $13, $17, $1a
17440     1B 1C 1B 1A 
17444     17 14 0F 0B 
17448     05 FF FA F5 
1744c     F0 EC E8 E6 | 	byte	$1b, $1c, $1b, $1a, $17, $14, $0f, $0b, $05, $ff, $fa, $f5, $f0, $ec, $e8, $e6
17450     E4 E4 E5 E6 
17454     E9 ED F1 F6 
17458     FB 01 06 0B 
1745c     10 14 17 1A | 	byte	$e4, $e4, $e5, $e6, $e9, $ed, $f1, $f6, $fb, $01, $06, $0b, $10, $14, $17, $1a
17460     1B 1B 1A 19 
17464     16 12 0E 09 
17468     04 FF F9 F4 
1746c     EF EC E9 E7 | 	byte	$1b, $1b, $1a, $19, $16, $12, $0e, $09, $04, $ff, $f9, $f4, $ef, $ec, $e9, $e7
17470     E5 E5 E6 E8 
17474     EB EE F3 F7 
17478     FD 02 07 0D 
1747c     11 15 18 1A | 	byte	$e5, $e5, $e6, $e8, $eb, $ee, $f3, $f7, $fd, $02, $07, $0d, $11, $15, $18, $1a
17480     1A 1A 19 17 
17484     14 10 0C 07 
17488     02 FD F8 F3 
1748c     EF EB E8 E6 | 	byte	$1a, $1a, $19, $17, $14, $10, $0c, $07, $02, $fd, $f8, $f3, $ef, $eb, $e8, $e6
17490     E5 E6 E7 E9 
17494     EC F0 F4 F9 
17498     FE 03 09 0D 
1749c     12 15 18 1A | 	byte	$e5, $e6, $e7, $e9, $ec, $f0, $f4, $f9, $fe, $03, $09, $0d, $12, $15, $18, $1a
174a0     1A 1A 19 16 
174a4     13 0F 0B 06 
174a8     01 FB F6 F2 
174ac     EE EB E8 E7 | 	byte	$1a, $1a, $19, $16, $13, $0f, $0b, $06, $01, $fb, $f6, $f2, $ee, $eb, $e8, $e7
174b0     E6 E7 E8 EA 
174b4     ED F1 F5 FB 
174b8     00 05 0A 0F 
174bc     12 15 18 19 | 	byte	$e6, $e7, $e8, $ea, $ed, $f1, $f5, $fb, $00, $05, $0a, $0f, $12, $15, $18, $19
174c0     1A 19 18 15 
174c4     12 0E 09 04 
174c8     00 FB F6 F2 
174cc     EE EB E9 E7 | 	byte	$1a, $19, $18, $15, $12, $0e, $09, $04, $00, $fb, $f6, $f2, $ee, $eb, $e9, $e7
174d0     E7 E8 E9 EC 
174d4     EF F3 F7 FC 
174d8     01 06 0B 0F 
174dc     13 16 18 19 | 	byte	$e7, $e8, $e9, $ec, $ef, $f3, $f7, $fc, $01, $06, $0b, $0f, $13, $16, $18, $19
174e0     19 18 17 14 
174e4     11 0C 07 03 
174e8     FE F9 F4 F0 
174ec     ED EA E8 E7 | 	byte	$19, $18, $17, $14, $11, $0c, $07, $03, $fe, $f9, $f4, $f0, $ed, $ea, $e8, $e7
174f0     E7 E8 EA ED 
174f4     F0 F4 F9 FE 
174f8     02 07 0C 10 
174fc     13 15 17 18 | 	byte	$e7, $e8, $ea, $ed, $f0, $f4, $f9, $fe, $02, $07, $0c, $10, $13, $15, $17, $18
17500     18 17 15 12 
17504     0E 0A 06 01 
17508     FC F7 F3 EF 
1750c     EC EA E8 E7 | 	byte	$18, $17, $15, $12, $0e, $0a, $06, $01, $fc, $f7, $f3, $ef, $ec, $ea, $e8, $e7
17510     E8 E9 EB EE 
17514     F1 F5 FA FF 
17518     03 09 0D 10 
1751c     13 16 17 18 | 	byte	$e8, $e9, $eb, $ee, $f1, $f5, $fa, $ff, $03, $09, $0d, $10, $13, $16, $17, $18
17520     17 16 14 11 
17524     0E 09 05 00 
17528     FC F7 F3 EF 
1752c     EC EA E9 E8 | 	byte	$17, $16, $14, $11, $0e, $09, $05, $00, $fc, $f7, $f3, $ef, $ec, $ea, $e9, $e8
17530     E8 EA EC EF 
17534     F3 F7 FB 01 
17538     05 09 0D 11 
1753c     14 16 17 18 | 	byte	$e8, $ea, $ec, $ef, $f3, $f7, $fb, $01, $05, $09, $0d, $11, $14, $16, $17, $18
17540     17 15 13 10 
17544     0C 08 04 FF 
17548     FB F6 F2 EF 
1754c     EC EA E9 E9 | 	byte	$17, $15, $13, $10, $0c, $08, $04, $ff, $fb, $f6, $f2, $ef, $ec, $ea, $e9, $e9
17550     EA EB ED F1 
17554     F4 F9 FD 01 
17558     06 0A 0E 12 
1755c     14 16 17 17 | 	byte	$ea, $eb, $ed, $f1, $f4, $f9, $fd, $01, $06, $0a, $0e, $12, $14, $16, $17, $17
17560     16 14 12 0F 
17564     0B 07 02 FE 
17568     F9 F5 F1 EE 
1756c     EC EA E9 E9 | 	byte	$16, $14, $12, $0f, $0b, $07, $02, $fe, $f9, $f5, $f1, $ee, $ec, $ea, $e9, $e9
17570     EA EC EF F2 
17574     F6 FA FE 03 
17578     07 0B 0F 12 
1757c     14 16 16 17 | 	byte	$ea, $ec, $ef, $f2, $f6, $fa, $fe, $03, $07, $0b, $0f, $12, $14, $16, $16, $17
17580     15 13 11 0D 
17584     0A 06 01 FC 
17588     F8 F4 F0 EE 
1758c     EB EA E9 EA | 	byte	$15, $13, $11, $0d, $0a, $06, $01, $fc, $f8, $f4, $f0, $ee, $eb, $ea, $e9, $ea
17590     EB ED F0 F3 
17594     F7 FB 00 04 
17598     08 0D 10 12 
1759c     14 16 16 16 | 	byte	$eb, $ed, $f0, $f3, $f7, $fb, $00, $04, $08, $0d, $10, $12, $14, $16, $16, $16
175a0     15 13 10 0D 
175a4     09 05 01 FC 
175a8     F8 F4 F0 EE 
175ac     EB EA EA EB | 	byte	$15, $13, $10, $0d, $09, $05, $01, $fc, $f8, $f4, $f0, $ee, $eb, $ea, $ea, $eb
175b0     EC EE F1 F4 
175b4     F8 FC 00 05 
175b8     09 0D 10 13 
175bc     14 16 16 15 | 	byte	$ec, $ee, $f1, $f4, $f8, $fc, $00, $05, $09, $0d, $10, $13, $14, $16, $16, $15
175c0     14 12 0F 0B 
175c4     07 03 FF FB 
175c8     F7 F3 F0 ED 
175cc     EB EA EA EB | 	byte	$14, $12, $0f, $0b, $07, $03, $ff, $fb, $f7, $f3, $f0, $ed, $eb, $ea, $ea, $eb
175d0     EC EE F2 F5 
175d4     F8 FD 01 06 
175d8     0A 0D 10 13 
175dc     14 15 15 15 | 	byte	$ec, $ee, $f2, $f5, $f8, $fd, $01, $06, $0a, $0d, $10, $13, $14, $15, $15, $15
175e0     13 10 0D 0A 
175e4     07 02 FD FA 
175e8     F5 F2 EF ED 
175ec     EB EA EB EB | 	byte	$13, $10, $0d, $0a, $07, $02, $fd, $fa, $f5, $f2, $ef, $ed, $eb, $ea, $eb, $eb
175f0     ED EF F2 F5 
175f4     FA FE 02 07 
175f8     0A 0E 11 13 
175fc     14 15 15 14 | 	byte	$ed, $ef, $f2, $f5, $fa, $fe, $02, $07, $0a, $0e, $11, $13, $14, $15, $15, $14
17600     12 0F 0D 09 
17604     05 01 FD F9 
17608     F5 F2 EF ED 
1760c     EC EB EB EC | 	byte	$12, $0f, $0d, $09, $05, $01, $fd, $f9, $f5, $f2, $ef, $ed, $ec, $eb, $eb, $ec
17610     EE F0 F3 F6 
17614     FA FF 03 07 
17618     0B 0E 11 13 
1761c     14 15 15 13 | 	byte	$ee, $f0, $f3, $f6, $fa, $ff, $03, $07, $0b, $0e, $11, $13, $14, $15, $15, $13
17620     12 0F 0C 08 
17624     05 00 FC F8 
17628     F4 F1 EF ED 
1762c     EC EB EB ED | 	byte	$12, $0f, $0c, $08, $05, $00, $fc, $f8, $f4, $f1, $ef, $ed, $ec, $eb, $eb, $ed
17630     EE F1 F4 F8 
17634     FC 00 04 08 
17638     0C 0F 11 13 
1763c     14 15 14 13 | 	byte	$ee, $f1, $f4, $f8, $fc, $00, $04, $08, $0c, $0f, $11, $13, $14, $15, $14, $13
17640     11 0E 0B 07 
17644     03 FF FB F8 
17648     F4 F0 EE ED 
1764c     EC EB EC ED | 	byte	$11, $0e, $0b, $07, $03, $ff, $fb, $f8, $f4, $f0, $ee, $ed, $ec, $eb, $ec, $ed
17650     EF F2 F5 F9 
17654     FD 01 05 08 
17658     0C 0F 11 13 
1765c     14 14 14 12 | 	byte	$ef, $f2, $f5, $f9, $fd, $01, $05, $08, $0c, $0f, $11, $13, $14, $14, $14, $12
17660     10 0E 0B 07 
17664     03 FE FB F7 
17668     F3 F1 EE ED 
1766c     EC EC EC EE | 	byte	$10, $0e, $0b, $07, $03, $fe, $fb, $f7, $f3, $f1, $ee, $ed, $ec, $ec, $ec, $ee
17670     F0 F3 F6 F9 
17674     FD 02 06 0A 
17678     0D 10 12 13 
1767c     14 14 14 12 | 	byte	$f0, $f3, $f6, $f9, $fd, $02, $06, $0a, $0d, $10, $12, $13, $14, $14, $14, $12
17680     10 0D 0A 06 
17684     02 FE FA F7 
17688     F3 F1 EE ED 
1768c     EC EC ED EE | 	byte	$10, $0d, $0a, $06, $02, $fe, $fa, $f7, $f3, $f1, $ee, $ed, $ec, $ec, $ed, $ee
17690     F1 F3 F7 FA 
17694     FF 02 07 0A 
17698     0D 10 12 14 
1769c     14 14 13 12 | 	byte	$f1, $f3, $f7, $fa, $ff, $02, $07, $0a, $0d, $10, $12, $14, $14, $14, $13, $12
176a0     0F 0C 09 05 
176a4     02 FD FA F6 
176a8     F3 F1 EE ED 
176ac     EC EC ED EF | 	byte	$0f, $0c, $09, $05, $02, $fd, $fa, $f6, $f3, $f1, $ee, $ed, $ec, $ec, $ed, $ef
176b0     F1 F4 F8 FB 
176b4     FF 03 06 0A 
176b8     0D 10 12 13 
176bc     13 13 12 11 | 	byte	$f1, $f4, $f8, $fb, $ff, $03, $06, $0a, $0d, $10, $12, $13, $13, $13, $12, $11
176c0     0E 0B 08 04 
176c4     00 FD F8 F5 
176c8     F2 EF ED ED 
176cc     EC EC ED EF | 	byte	$0e, $0b, $08, $04, $00, $fd, $f8, $f5, $f2, $ef, $ed, $ed, $ec, $ec, $ed, $ef
176d0     F1 F4 F8 FC 
176d4     FF 03 07 0A 
176d8     0E 10 12 13 
176dc     14 13 12 10 | 	byte	$f1, $f4, $f8, $fc, $ff, $03, $07, $0a, $0e, $10, $12, $13, $14, $13, $12, $10
176e0     0E 0B 07 04 
176e4     00 FC F8 F5 
176e8     F2 F0 EE ED 
176ec     EC ED EE F0 | 	byte	$0e, $0b, $07, $04, $00, $fc, $f8, $f5, $f2, $f0, $ee, $ed, $ec, $ed, $ee, $f0
176f0     F2 F5 F8 FD 
176f4     01 04 08 0B 
176f8     0E 10 12 13 
176fc     13 13 11 0F | 	byte	$f2, $f5, $f8, $fd, $01, $04, $08, $0b, $0e, $10, $12, $13, $13, $13, $11, $0f
17700     0D 0A 07 03 
17704     FF FC F8 F5 
17708     F2 F0 EE ED 
1770c     ED EE EF F1 | 	byte	$0d, $0a, $07, $03, $ff, $fc, $f8, $f5, $f2, $f0, $ee, $ed, $ed, $ee, $ef, $f1
17710     F3 F6 FA FD 
17714     01 05 08 0B 
17718     0E 10 12 13 
1771c     13 12 11 0F | 	byte	$f3, $f6, $fa, $fd, $01, $05, $08, $0b, $0e, $10, $12, $13, $13, $12, $11, $0f
17720     0D 09 06 02 
17724     FE FB F8 F4 
17728     F1 EF EE ED 
1772c     ED EE EF F1 | 	byte	$0d, $09, $06, $02, $fe, $fb, $f8, $f4, $f1, $ef, $ee, $ed, $ed, $ee, $ef, $f1
17730     F4 F7 FB FE 
17734     02 05 09 0C 
17738     0E 10 12 13 
1773c     13 12 10 0F | 	byte	$f4, $f7, $fb, $fe, $02, $05, $09, $0c, $0e, $10, $12, $13, $13, $12, $10, $0f
17740     0C 09 05 01 
17744     FE FA F7 F3 
17748     F1 EF EE ED 
1774c     ED EE F0 F2 | 	byte	$0c, $09, $05, $01, $fe, $fa, $f7, $f3, $f1, $ef, $ee, $ed, $ed, $ee, $f0, $f2
17750     F5 F8 FB FF 
17754     03 06 09 0C 
17758     0F 11 12 12 
1775c     12 11 10 0E | 	byte	$f5, $f8, $fb, $ff, $03, $06, $09, $0c, $0f, $11, $12, $12, $12, $11, $10, $0e
17760     0B 08 04 01 
17764     FE FA F7 F4 
17768     F1 F0 EF EE 
1776c     EE EF F0 F3 | 	byte	$0b, $08, $04, $01, $fe, $fa, $f7, $f4, $f1, $f0, $ef, $ee, $ee, $ef, $f0, $f3
17770     F5 F9 FC 00 
17774     04 07 0A 0C 
17778     0F 11 12 12 
1777c     12 11 0F 0D | 	byte	$f5, $f9, $fc, $00, $04, $07, $0a, $0c, $0f, $11, $12, $12, $12, $11, $0f, $0d
17780     0B 07 04 00 
17784     FD F9 F6 F3 
17788     F1 EF EE EE 
1778c     EE EF F1 F3 | 	byte	$0b, $07, $04, $00, $fd, $f9, $f6, $f3, $f1, $ef, $ee, $ee, $ee, $ef, $f1, $f3
17790     F6 F9 FC 00 
17794     04 07 0A 0D 
17798     0F 10 11 11 
1779c     11 10 0E 0C | 	byte	$f6, $f9, $fc, $00, $04, $07, $0a, $0d, $0f, $10, $11, $11, $11, $10, $0e, $0c
177a0     09 06 03 FF 
177a4     FC F8 F5 F3 
177a8     F0 EF EE EE 
177ac     EF EF F1 F4 | 	byte	$09, $06, $03, $ff, $fc, $f8, $f5, $f3, $f0, $ef, $ee, $ee, $ef, $ef, $f1, $f4
177b0     F6 FA FD 01 
177b4     04 07 0A 0D 
177b8     0F 11 11 11 
177bc     11 10 0E 0C | 	byte	$f6, $fa, $fd, $01, $04, $07, $0a, $0d, $0f, $11, $11, $11, $11, $10, $0e, $0c
177c0     09 05 02 FF 
177c4     FB F8 F5 F2 
177c8     F1 EF EE EE 
177cc     EF F0 F2 F4 | 	byte	$09, $05, $02, $ff, $fb, $f8, $f5, $f2, $f1, $ef, $ee, $ee, $ef, $f0, $f2, $f4
177d0     F7 FB FE 01 
177d4     05 08 0B 0E 
177d8     0F 10 11 11 
177dc     11 0F 0D 0B | 	byte	$f7, $fb, $fe, $01, $05, $08, $0b, $0e, $0f, $10, $11, $11, $11, $0f, $0d, $0b
177e0     08 05 01 FE 
177e4     FB F7 F5 F2 
177e8     F0 EF EF EF 
177ec     F0 F1 F3 F5 | 	byte	$08, $05, $01, $fe, $fb, $f7, $f5, $f2, $f0, $ef, $ef, $ef, $f0, $f1, $f3, $f5
177f0     F8 FB FF 02 
177f4     06 09 0B 0D 
177f8     0F 10 11 11 
177fc     10 0E 0C 0A | 	byte	$f8, $fb, $ff, $02, $06, $09, $0b, $0d, $0f, $10, $11, $11, $10, $0e, $0c, $0a
17800     07 04 01 FD 
17804     FA F7 F4 F2 
17808     F1 EF EF EF 
1780c     F0 F2 F4 F6 | 	byte	$07, $04, $01, $fd, $fa, $f7, $f4, $f2, $f1, $ef, $ef, $ef, $f0, $f2, $f4, $f6
17810     F9 FC FF 03 
17814     06 09 0B 0D 
17818     0F 10 11 10 
1781c     0F 0E 0C 09 | 	byte	$f9, $fc, $ff, $03, $06, $09, $0b, $0d, $0f, $10, $11, $10, $0f, $0e, $0c, $09
17820     07 03 00 FC 
17824     F9 F6 F4 F2 
17828     F0 F0 EF F0 
1782c     F1 F2 F5 F7 | 	byte	$07, $03, $00, $fc, $f9, $f6, $f4, $f2, $f0, $f0, $ef, $f0, $f1, $f2, $f5, $f7
17830     FA FD 00 03 
17834     07 09 0C 0E 
17838     0F 10 10 10 
1783c     0F 0D 0B 09 | 	byte	$fa, $fd, $00, $03, $07, $09, $0c, $0e, $0f, $10, $10, $10, $0f, $0d, $0b, $09
17840     06 03 FF FC 
17844     F9 F6 F4 F2 
17848     F1 F0 F0 F0 
1784c     F1 F3 F5 F8 | 	byte	$06, $03, $ff, $fc, $f9, $f6, $f4, $f2, $f1, $f0, $f0, $f0, $f1, $f3, $f5, $f8
17850     FB FE 01 04 
17854     07 09 0C 0E 
17858     0F 10 10 10 
1785c     0E 0D 0A 08 | 	byte	$fb, $fe, $01, $04, $07, $09, $0c, $0e, $0f, $10, $10, $10, $0e, $0d, $0a, $08
17860     05 02 FF FC 
17864     F9 F6 F4 F2 
17868     F1 F0 F0 F1 
1786c     F2 F3 F5 F9 | 	byte	$05, $02, $ff, $fc, $f9, $f6, $f4, $f2, $f1, $f0, $f0, $f1, $f2, $f3, $f5, $f9
17870     FB FF 02 05 
17874     08 0A 0C 0E 
17878     0F 10 0F 0E 
1787c     0D 0C 09 06 | 	byte	$fb, $ff, $02, $05, $08, $0a, $0c, $0e, $0f, $10, $0f, $0e, $0d, $0c, $09, $06
17880     04 00 FE FB 
17884     F8 F6 F3 F1 
17888     F1 F0 F1 F1 
1788c     F2 F4 F6 F9 | 	byte	$04, $00, $fe, $fb, $f8, $f6, $f3, $f1, $f1, $f0, $f1, $f1, $f2, $f4, $f6, $f9
17890     FC FF 02 05 
17894     08 0A 0C 0E 
17898     0F 0F 10 0E 
1789c     0D 0B 09 06 | 	byte	$fc, $ff, $02, $05, $08, $0a, $0c, $0e, $0f, $0f, $10, $0e, $0d, $0b, $09, $06
178a0     03 01 FD FA 
178a4     F8 F5 F4 F2 
178a8     F1 F1 F1 F2 
178ac     F3 F5 F7 FA | 	byte	$03, $01, $fd, $fa, $f8, $f5, $f4, $f2, $f1, $f1, $f1, $f2, $f3, $f5, $f7, $fa
178b0     FD 00 03 05 
178b4     08 0B 0C 0D 
178b8     0F 0F 0E 0E 
178bc     0C 0A 08 05 | 	byte	$fd, $00, $03, $05, $08, $0b, $0c, $0d, $0f, $0f, $0e, $0e, $0c, $0a, $08, $05
178c0     03 00 FD FA 
178c4     F7 F5 F4 F2 
178c8     F2 F1 F2 F3 
178cc     F4 F6 F8 FB | 	byte	$03, $00, $fd, $fa, $f7, $f5, $f4, $f2, $f2, $f1, $f2, $f3, $f4, $f6, $f8, $fb
178d0     FE 01 03 06 
178d4     09 0B 0C 0D 
178d8     0E 0E 0E 0D 
178dc     0B 09 07 04 | 	byte	$fe, $01, $03, $06, $09, $0b, $0c, $0d, $0e, $0e, $0e, $0d, $0b, $09, $07, $04
178e0     02 FF FC F9 
178e4     F7 F5 F3 F2 
178e8     F2 F2 F2 F3 
178ec     F5 F7 F9 FC | 	byte	$02, $ff, $fc, $f9, $f7, $f5, $f3, $f2, $f2, $f2, $f2, $f3, $f5, $f7, $f9, $fc
178f0     FE 01 04 07 
178f4     09 0B 0D 0D 
178f8     0E 0D 0D 0C 
178fc     0B 09 06 04 | 	byte	$fe, $01, $04, $07, $09, $0b, $0d, $0d, $0e, $0d, $0d, $0c, $0b, $09, $06, $04
17900     01 FF FB F9 
17904     F6 F5 F3 F2 
17908     F2 F2 F3 F4 
1790c     F6 F7 FA FC | 	byte	$01, $ff, $fb, $f9, $f6, $f5, $f3, $f2, $f2, $f2, $f3, $f4, $f6, $f7, $fa, $fc
17910     FF 02 05 07 
17914     09 0B 0D 0D 
17918     0E 0D 0D 0B 
1791c     0A 08 06 03 | 	byte	$ff, $02, $05, $07, $09, $0b, $0d, $0d, $0e, $0d, $0d, $0b, $0a, $08, $06, $03
17920     01 FE FB F9 
17924     F7 F5 F4 F3 
17928     F3 F3 F4 F5 
1792c     F6 F9 FB FE | 	byte	$01, $fe, $fb, $f9, $f7, $f5, $f4, $f3, $f3, $f3, $f4, $f5, $f6, $f9, $fb, $fe
17930     00 03 05 08 
17934     0A 0B 0C 0D 
17938     0E 0D 0C 0B 
1793c     09 07 05 02 | 	byte	$00, $03, $05, $08, $0a, $0b, $0c, $0d, $0e, $0d, $0c, $0b, $09, $07, $05, $02
17940     00 FD FA F8 
17944     F6 F5 F4 F3 
17948     F3 F3 F4 F6 
1794c     F7 F9 FC FE | 	byte	$00, $fd, $fa, $f8, $f6, $f5, $f4, $f3, $f3, $f3, $f4, $f6, $f7, $f9, $fc, $fe
17950     01 03 06 08 
17954     0A 0B 0C 0D 
17958     0D 0C 0B 09 
1795c     08 06 04 01 | 	byte	$01, $03, $06, $08, $0a, $0b, $0c, $0d, $0d, $0c, $0b, $09, $08, $06, $04, $01
17960     FF FC FA F8 
17964     F6 F5 F4 F3 
17968     F3 F4 F5 F6 
1796c     F8 FA FC FF | 	byte	$ff, $fc, $fa, $f8, $f6, $f5, $f4, $f3, $f3, $f4, $f5, $f6, $f8, $fa, $fc, $ff
17970     01 03 06 08 
17974     0A 0B 0B 0C 
17978     0C 0C 0B 09 
1797c     07 05 03 01 | 	byte	$01, $03, $06, $08, $0a, $0b, $0b, $0c, $0c, $0c, $0b, $09, $07, $05, $03, $01
17980     FE FC F9 F8 
17984     F6 F5 F4 F3 
17988     F4 F4 F5 F7 
1798c     F8 FA FD FF | 	byte	$fe, $fc, $f9, $f8, $f6, $f5, $f4, $f3, $f4, $f4, $f5, $f7, $f8, $fa, $fd, $ff
17990     02 04 06 08 
17994     09 0B 0C 0C 
17998     0C 0B 0A 08 
1799c     06 04 02 00 | 	byte	$02, $04, $06, $08, $09, $0b, $0c, $0c, $0c, $0b, $0a, $08, $06, $04, $02, $00
179a0     FE FB FA F7 
179a4     F6 F5 F4 F4 
179a8     F4 F5 F6 F8 
179ac     FA FC FE 00 | 	byte	$fe, $fb, $fa, $f7, $f6, $f5, $f4, $f4, $f4, $f5, $f6, $f8, $fa, $fc, $fe, $00
179b0     03 05 07 08 
179b4     0A 0B 0B 0B 
179b8     0B 0A 09 08 
179bc     05 03 01 FF | 	byte	$03, $05, $07, $08, $0a, $0b, $0b, $0b, $0b, $0a, $09, $08, $05, $03, $01, $ff
179c0     FD FB F9 F7 
179c4     F6 F5 F4 F5 
179c8     F5 F6 F7 F8 
179cc     FB FC FF 01 | 	byte	$fd, $fb, $f9, $f7, $f6, $f5, $f4, $f5, $f5, $f6, $f7, $f8, $fb, $fc, $ff, $01
179d0     03 05 07 09 
179d4     0A 0A 0B 0B 
179d8     0A 0A 08 07 
179dc     05 03 01 FE | 	byte	$03, $05, $07, $09, $0a, $0a, $0b, $0b, $0a, $0a, $08, $07, $05, $03, $01, $fe
179e0     FC FA F8 F7 
179e4     F6 F5 F5 F5 
179e8     F6 F6 F8 F9 
179ec     FB FD FF 01 | 	byte	$fc, $fa, $f8, $f7, $f6, $f5, $f5, $f5, $f6, $f6, $f8, $f9, $fb, $fd, $ff, $01
179f0     03 05 07 08 
179f4     09 0A 0B 0B 
179f8     0A 09 08 06 
179fc     04 02 00 FE | 	byte	$03, $05, $07, $08, $09, $0a, $0b, $0b, $0a, $09, $08, $06, $04, $02, $00, $fe
17a00     FC FB F9 F7 
17a04     F6 F6 F6 F6 
17a08     F7 F7 F9 FA 
17a0c     FD FE 00 03 | 	byte	$fc, $fb, $f9, $f7, $f6, $f6, $f6, $f6, $f7, $f7, $f9, $fa, $fd, $fe, $00, $03
17a10     04 06 08 09 
17a14     0A 0A 0A 0A 
17a18     09 08 07 05 
17a1c     04 01 00 FD | 	byte	$04, $06, $08, $09, $0a, $0a, $0a, $0a, $09, $08, $07, $05, $04, $01, $00, $fd
17a20     FC FA F8 F7 
17a24     F6 F6 F6 F6 
17a28     F7 F8 F9 FB 
17a2c     FD FE 01 03 | 	byte	$fc, $fa, $f8, $f7, $f6, $f6, $f6, $f6, $f7, $f8, $f9, $fb, $fd, $fe, $01, $03
17a30     05 06 08 09 
17a34     09 0A 09 09 
17a38     08 07 06 04 
17a3c     03 01 FF FD | 	byte	$05, $06, $08, $09, $09, $0a, $09, $09, $08, $07, $06, $04, $03, $01, $ff, $fd
17a40     FB F9 F8 F7 
17a44     F6 F6 F6 F6 
17a48     F7 F8 F9 FB 
17a4c     FD FF 01 03 | 	byte	$fb, $f9, $f8, $f7, $f6, $f6, $f6, $f6, $f7, $f8, $f9, $fb, $fd, $ff, $01, $03
17a50     05 06 07 09 
17a54     09 0A 0A 09 
17a58     08 07 05 04 
17a5c     02 00 FF FD | 	byte	$05, $06, $07, $09, $09, $0a, $0a, $09, $08, $07, $05, $04, $02, $00, $ff, $fd
17a60     FB F9 F8 F7 
17a64     F6 F6 F6 F7 
17a68     F8 F9 FA FC 
17a6c     FE 00 02 03 | 	byte	$fb, $f9, $f8, $f7, $f6, $f6, $f6, $f7, $f8, $f9, $fa, $fc, $fe, $00, $02, $03
17a70     05 07 08 08 
17a74     09 09 09 09 
17a78     08 06 05 03 
17a7c     02 00 FE FC | 	byte	$05, $07, $08, $08, $09, $09, $09, $09, $08, $06, $05, $03, $02, $00, $fe, $fc
17a80     FA F9 F8 F7 
17a84     F7 F7 F7 F7 
17a88     F8 F9 FB FD 
17a8c     FF 00 02 04 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f7, $f7, $f8, $f9, $fb, $fd, $ff, $00, $02, $04
17a90     06 07 08 08 
17a94     09 09 09 08 
17a98     07 06 04 03 
17a9c     01 FF FD FC | 	byte	$06, $07, $08, $08, $09, $09, $09, $08, $07, $06, $04, $03, $01, $ff, $fd, $fc
17aa0     FA F9 F8 F7 
17aa4     F7 F7 F7 F8 
17aa8     F9 FA FC FD 
17aac     FF 01 02 04 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f7, $f8, $f9, $fa, $fc, $fd, $ff, $01, $02, $04
17ab0     06 07 08 09 
17ab4     09 09 08 08 
17ab8     07 05 04 02 
17abc     01 FF FD FB | 	byte	$06, $07, $08, $09, $09, $09, $08, $08, $07, $05, $04, $02, $01, $ff, $fd, $fb
17ac0     FA F9 F8 F7 
17ac4     F7 F7 F8 F8 
17ac8     F9 FA FC FE 
17acc     FF 01 03 05 | 	byte	$fa, $f9, $f8, $f7, $f7, $f7, $f8, $f8, $f9, $fa, $fc, $fe, $ff, $01, $03, $05
17ad0     06 07 08 09 
17ad4     09 09 08 07 
17ad8     06 05 04 02 
17adc     00 FF FD FC | 	byte	$06, $07, $08, $09, $09, $09, $08, $07, $06, $05, $04, $02, $00, $ff, $fd, $fc
17ae0     FA F9 F8 F8 
17ae4     F8 F8 F8 F9 
17ae8     FA FB FD FE 
17aec     00 02 04 05 | 	byte	$fa, $f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fd, $fe, $00, $02, $04, $05
17af0     06 07 08 08 
17af4     08 09 08 07 
17af8     06 05 03 01 
17afc     00 FE FD FB | 	byte	$06, $07, $08, $08, $08, $09, $08, $07, $06, $05, $03, $01, $00, $fe, $fd, $fb
17b00     FA F9 F8 F8 
17b04     F8 F8 F8 F9 
17b08     FA FC FD FF 
17b0c     01 02 04 05 | 	byte	$fa, $f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fc, $fd, $ff, $01, $02, $04, $05
17b10     06 07 08 08 
17b14     08 08 07 06 
17b18     05 04 02 00 
17b1c     FF FE FC FA | 	byte	$06, $07, $08, $08, $08, $08, $07, $06, $05, $04, $02, $00, $ff, $fe, $fc, $fa
17b20     F9 F8 F8 F7 
17b24     F8 F8 F8 F9 
17b28     FA FC FE FF 
17b2c     01 02 04 05 | 	byte	$f9, $f8, $f8, $f7, $f8, $f8, $f8, $f9, $fa, $fc, $fe, $ff, $01, $02, $04, $05
17b30     07 07 08 08 
17b34     08 08 07 06 
17b38     05 03 02 01 
17b3c     FF FD FC FA | 	byte	$07, $07, $08, $08, $08, $08, $07, $06, $05, $03, $02, $01, $ff, $fd, $fc, $fa
17b40     F9 F8 F8 F8 
17b44     F8 F8 F9 FA 
17b48     FB FC FE 00 
17b4c     01 03 04 05 | 	byte	$f9, $f8, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $00, $01, $03, $04, $05
17b50     07 07 08 08 
17b54     08 07 07 06 
17b58     05 03 02 00 
17b5c     FE FD FB FA | 	byte	$07, $07, $08, $08, $08, $07, $07, $06, $05, $03, $02, $00, $fe, $fd, $fb, $fa
17b60     F9 F8 F8 F8 
17b64     F8 F9 F9 FA 
17b68     FC FD FF 00 
17b6c     02 04 05 06 | 	byte	$f9, $f8, $f8, $f8, $f8, $f9, $f9, $fa, $fc, $fd, $ff, $00, $02, $04, $05, $06
17b70     07 07 08 08 
17b74     08 07 06 05 
17b78     04 02 01 FF 
17b7c     FE FC FB FA | 	byte	$07, $07, $08, $08, $08, $07, $06, $05, $04, $02, $01, $ff, $fe, $fc, $fb, $fa
17b80     F9 F8 F8 F8 
17b84     F8 F9 FA FB 
17b88     FC FE FF 01 
17b8c     02 04 05 06 | 	byte	$f9, $f8, $f8, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $ff, $01, $02, $04, $05, $06
17b90     07 07 07 08 
17b94     07 07 06 05 
17b98     03 02 01 FF 
17b9c     FD FC FB F9 | 	byte	$07, $07, $07, $08, $07, $07, $06, $05, $03, $02, $01, $ff, $fd, $fc, $fb, $f9
17ba0     F9 F8 F7 F8 
17ba4     F8 F9 FA FB 
17ba8     FC FE FF 01 
17bac     02 04 05 06 | 	byte	$f9, $f8, $f7, $f8, $f8, $f9, $fa, $fb, $fc, $fe, $ff, $01, $02, $04, $05, $06
17bb0     07 07 08 08 
17bb4     07 07 06 04 
17bb8     03 02 00 FF 
17bbc     FD FC FB FA | 	byte	$07, $07, $08, $08, $07, $07, $06, $04, $03, $02, $00, $ff, $fd, $fc, $fb, $fa
17bc0     F9 F9 F8 F9 
17bc4     F9 FA FA FC 
17bc8     FD FE 00 01 
17bcc     03 04 05 06 | 	byte	$f9, $f9, $f8, $f9, $f9, $fa, $fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06
17bd0     07 07 08 07 
17bd4     07 06 05 04 
17bd8     03 02 00 FE 
17bdc     FD FC FB FA | 	byte	$07, $07, $08, $07, $07, $06, $05, $04, $03, $02, $00, $fe, $fd, $fc, $fb, $fa
17be0     F9 F8 F9 F9 
17be4     F9 FA FB FC 
17be8     FD FF 01 02 
17bec     03 05 06 06 | 	byte	$f9, $f8, $f9, $f9, $f9, $fa, $fb, $fc, $fd, $ff, $01, $02, $03, $05, $06, $06
17bf0     07 07 07 07 
17bf4     07          | 	byte	$07[5]
17bf5     06 05 03 02 
17bf9     01 FF FE FC 
17bfd     FB FA F9 F9 
17c01     F8 F8 F8 F9 | 	byte	$06, $05, $03, $02, $01, $ff, $fe, $fc, $fb, $fa, $f9, $f9, $f8, $f8, $f8, $f9
17c05     FA FB FC FD 
17c09     FF 00 02 03 
17c0d     04 05 07 07 
17c11     07 07 07 07 | 	byte	$fa, $fb, $fc, $fd, $ff, $00, $02, $03, $04, $05, $07, $07, $07, $07, $07, $07
17c15     06 05 03 02 
17c19     01 FF FD FC 
17c1d     FB FA F9 F9 
17c21     F8 F8 F9 F9 | 	byte	$06, $05, $03, $02, $01, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f8, $f8, $f9, $f9
17c25     FA FB FD FE 
17c29     FF 01 02 04 
17c2d     05 06 07 07 
17c31     07 07 07 07 | 	byte	$fa, $fb, $fd, $fe, $ff, $01, $02, $04, $05, $06, $07, $07, $07, $07, $07, $07
17c35     06 04 03 02 
17c39     01 FF FD FC 
17c3d     FB FA F9 F9 
17c41     F9 F9 F9 F9 | 	byte	$06, $04, $03, $02, $01, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $f9, $f9
17c45     FA FC FD FE 
17c49     00 01 03 04 
17c4d     05 06 07 07 
17c51     07 07 07 06 | 	byte	$fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06, $07, $07, $07, $07, $07, $06
17c55     05 04 03 01 
17c59     00 FF FD FC 
17c5d     FB F9 F9 F9 
17c61     F8 F8 F9 FA | 	byte	$05, $04, $03, $01, $00, $ff, $fd, $fc, $fb, $f9, $f9, $f9, $f8, $f8, $f9, $fa
17c65     FA FC FD FE 
17c69     00 01 03 04 
17c6d     05 06 07 07 
17c71     07 07 07 06 | 	byte	$fa, $fc, $fd, $fe, $00, $01, $03, $04, $05, $06, $07, $07, $07, $07, $07, $06
17c75     05 04 02 01 
17c79     00 FF FD FC 
17c7d     FB F9 F9 F8 
17c81     F8 F9 F9 FA | 	byte	$05, $04, $02, $01, $00, $ff, $fd, $fc, $fb, $f9, $f9, $f8, $f8, $f9, $f9, $fa
17c85     FB FC FD FE 
17c89     00 02 03 04 
17c8d     05 06 07 07 
17c91     07 07 06 06 | 	byte	$fb, $fc, $fd, $fe, $00, $02, $03, $04, $05, $06, $07, $07, $07, $07, $06, $06
17c95     05 04 03 01 
17c99     00 FE FD FC 
17c9d     FB FA F9 F9 
17ca1     F9 F9 FA FB | 	byte	$05, $04, $03, $01, $00, $fe, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fb
17ca5     FC FD FE FF 
17ca9     01 02 03 04 
17cad     06 06 07 07 
17cb1     07 07 06 05 | 	byte	$fc, $fd, $fe, $ff, $01, $02, $03, $04, $06, $06, $07, $07, $07, $07, $06, $05
17cb5     05 04 02 01 
17cb9     00 FE FD FB 
17cbd     FB FA F9 F9 
17cc1     F9 F9 FA FA | 	byte	$05, $04, $02, $01, $00, $fe, $fd, $fb, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fa
17cc5     FC FC FE FF 
17cc9     01 02 03 05 
17ccd     06 06 07 07 
17cd1     07 06 06 05 | 	byte	$fc, $fc, $fe, $ff, $01, $02, $03, $05, $06, $06, $07, $07, $07, $06, $06, $05
17cd5     04 03 01 00 
17cd9     FF FD FC FB 
17cdd     FA FA F9 F9 
17ce1     F9 F9 FA FA | 	byte	$04, $03, $01, $00, $ff, $fd, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $f9, $fa, $fa
17ce5     FB FC FE FF 
17ce9     01 02 03 04 
17ced     06 06 07 07 
17cf1     07 07 06 05 | 	byte	$fb, $fc, $fe, $ff, $01, $02, $03, $04, $06, $06, $07, $07, $07, $07, $06, $05
17cf5     04 03 02 00 
17cf9     FF FD FC FB 
17cfd     FA F9 F9 F9 
17d01     F9 F9 FA FB | 	byte	$04, $03, $02, $00, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $f9, $fa, $fb
17d05     FC FD FE 00 
17d09     01 02 03 04 
17d0d     05 06 07 07 
17d11     07 06 06 05 | 	byte	$fc, $fd, $fe, $00, $01, $02, $03, $04, $05, $06, $07, $07, $07, $06, $06, $05
17d15     04 03 02 00 
17d19     FF FE FC FB 
17d1d     FA FA F9 F9 
17d21     F9 F9 FB FC | 	byte	$04, $03, $02, $00, $ff, $fe, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $f9, $fb, $fc
17d25     FC FD FF 00 
17d29     02 03 04 05 
17d2d     06 06 07 07 
17d31     07 06 06 05 | 	byte	$fc, $fd, $ff, $00, $02, $03, $04, $05, $06, $06, $07, $07, $07, $06, $06, $05
17d35     04 02 01 00 
17d39     FF FD FC FB 
17d3d     FA F9 F9 F9 
17d41     F9 FA FB FB | 	byte	$04, $02, $01, $00, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fb, $fb
17d45     FC FE FF 01 
17d49     01 03 04 05 
17d4d     06 06 06 06 
17d51     07 06 05 04 | 	byte	$fc, $fe, $ff, $01, $01, $03, $04, $05, $06, $06, $06, $06, $07, $06, $05, $04
17d55     03 02 01 00 
17d59     FE FD FC FB 
17d5d     FA F9 F9 F9 
17d61     F9 FA FA FB | 	byte	$03, $02, $01, $00, $fe, $fd, $fc, $fb, $fa, $f9, $f9, $f9, $f9, $fa, $fa, $fb
17d65     FC FE FF 00 
17d69     02 03 04 05 
17d6d     06 06 07 07 
17d71     06 06 05 04 | 	byte	$fc, $fe, $ff, $00, $02, $03, $04, $05, $06, $06, $07, $07, $06, $06, $05, $04
17d75     03 02 01 FF 
17d79     FF FD FC FB 
17d7d     FA F9 F9 FA 
17d81     FA FA FB FC | 	byte	$03, $02, $01, $ff, $ff, $fd, $fc, $fb, $fa, $f9, $f9, $fa, $fa, $fa, $fb, $fc
17d85     FD FE 00 01 
17d89     02 03 04 05 
17d8d     06 06 07 07 
17d91     06 06 05 04 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $07, $07, $06, $06, $05, $04
17d95     03 02 00 FF 
17d99     FE FD FC FB 
17d9d     FA FA FA FA 
17da1     FA FB FB FC | 	byte	$03, $02, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fb, $fc
17da5     FD FE 00 01 
17da9     02 03 04 05 
17dad     06 06 06 06 
17db1     06 05 04 04 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $06, $06, $06, $05, $04, $04
17db5     02 01 00 FE 
17db9     FD FC FB FA 
17dbd     FA F9 F9 F9 
17dc1     FA FA FB FC | 	byte	$02, $01, $00, $fe, $fd, $fc, $fb, $fa, $fa, $f9, $f9, $f9, $fa, $fa, $fb, $fc
17dc5     FD FE 00 01 
17dc9     02 03 04 05 
17dcd     06 06 06 06 
17dd1     06 05 04 03 | 	byte	$fd, $fe, $00, $01, $02, $03, $04, $05, $06, $06, $06, $06, $06, $05, $04, $03
17dd5     02 01 00 FE 
17dd9     FD FC FB FB 
17ddd     FA FA FA FA 
17de1     FA FB FB FD | 	byte	$02, $01, $00, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fb, $fd
17de5     FE FF 00 01 
17de9     03 03 04 05 
17ded     06 06 06 06 
17df1     05 05 04 03 | 	byte	$fe, $ff, $00, $01, $03, $03, $04, $05, $06, $06, $06, $06, $05, $05, $04, $03
17df5     02 01 FF FE 
17df9     FD FC FB FB 
17dfd     FA FA FA FA 
17e01     FA FB FC FD | 	byte	$02, $01, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fa, $fa, $fb, $fc, $fd
17e05     FE FF 01 02 
17e09     03 04 05 05 
17e0d     05 06 06 05 
17e11     05 04 04 03 | 	byte	$fe, $ff, $01, $02, $03, $04, $05, $05, $05, $06, $06, $05, $05, $04, $04, $03
17e15     01 01 FF FE 
17e19     FD FC FB FB 
17e1d     FA FA FA FB 
17e21     FB FC FC FD | 	byte	$01, $01, $ff, $fe, $fd, $fc, $fb, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fc, $fd
17e25     FF 00 01 02 
17e29     03 04 05 05 
17e2d     05 06 05 05 
17e31     05 04 03 02 | 	byte	$ff, $00, $01, $02, $03, $04, $05, $05, $05, $06, $05, $05, $05, $04, $03, $02
17e35     01 00 FF FE 
17e39     FD FC FB FA 
17e3d     FA FA FA FB 
17e41     FB FB FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fa, $fa, $fa, $fa, $fb, $fb, $fb, $fd, $fe
17e45     FE 00 01 02 
17e49     03 04 05 05 
17e4d     05 06 06 05 
17e51     05 04 03 02 | 	byte	$fe, $00, $01, $02, $03, $04, $05, $05, $05, $06, $06, $05, $05, $04, $03, $02
17e55     01 00 FF FE 
17e59     FD FC FB FB 
17e5d     FB FA FA FB 
17e61     FB FC FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fa, $fa, $fb, $fb, $fc, $fd, $fe
17e65     FF 00 01 02 
17e69     03 04 05 06 
17e6d     05 06 05 05 
17e71     05 04 03 02 | 	byte	$ff, $00, $01, $02, $03, $04, $05, $06, $05, $06, $05, $05, $05, $04, $03, $02
17e75     01 00 FF FE 
17e79     FD FC FB FB 
17e7d     FB FB FB FB 
17e81     FC FD FD FE | 	byte	$01, $00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe
17e85     FF 01 02 03 
17e89     03 04 05 05 
17e8d     05 05 05 05 
17e91     04 03 02 01 | 	byte	$ff, $01, $02, $03, $03, $04, $05, $05, $05, $05, $05, $05, $04, $03, $02, $01
17e95     00 FF FE FD 
17e99     FC FC FB FB 
17e9d     FA FA FB FB 
17ea1     FB FC FD FE | 	byte	$00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fa, $fa, $fb, $fb, $fb, $fc, $fd, $fe
17ea5     FF 00 01 02 
17ea9     03 04 04 05 
17ead     05 05 05 04 
17eb1     03 03 02 01 | 	byte	$ff, $00, $01, $02, $03, $04, $04, $05, $05, $05, $05, $04, $03, $03, $02, $01
17eb5     00 FF FE FD 
17eb9     FC FB FB FB 
17ebd     FB FB FB FB 
17ec1     FC FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fe, $ff
17ec5     00 01 02 03 
17ec9     03 04 04 05 
17ecd     05 05 04 04 
17ed1     04 03 02 01 | 	byte	$00, $01, $02, $03, $03, $04, $04, $05, $05, $05, $04, $04, $04, $03, $02, $01
17ed5     00 FF FE FD 
17ed9     FC FB FB FB 
17edd     FB FB FB FC 
17ee1     FD FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fb, $fb, $fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe, $ff
17ee5     00 01 02 02 
17ee9     03 04 04 05 
17eed     05 05 04 04 
17ef1     03 02 02 01 | 	byte	$00, $01, $02, $02, $03, $04, $04, $05, $05, $05, $04, $04, $03, $02, $02, $01
17ef5     00 FF FE FD 
17ef9     FC FC FB FB 
17efd     FB FB FC FC 
17f01     FD FD FE FF | 	byte	$00, $ff, $fe, $fd, $fc, $fc, $fb, $fb, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
17f05     00 01 02 03 
17f09     03 04 04 05 
17f0d     05 04 04 03 
17f11     03 02 01 01 | 	byte	$00, $01, $02, $03, $03, $04, $04, $05, $05, $04, $04, $03, $03, $02, $01, $01
17f15     00 FF FE FD 
17f19     FD FC FB FC 
17f1d     FB FB FC FC 
17f21     FD FE FF 00 | 	byte	$00, $ff, $fe, $fd, $fd, $fc, $fb, $fc, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $00
17f25     01 02 02 03 
17f29     04 04 04 04 
17f2d     04 04 04 04 
17f31     03 02 01 00 | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $04, $04, $03, $02, $01, $00
17f35     00 FF FE FD 
17f39     FD FC FC FC 
17f3d     FC FC FD FD 
17f41     FD FE FF 00 | 	byte	$00, $ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $00
17f45     01 02 02 03 
17f49     04 04 04 04 
17f4d     04 04 04 03 
17f51     02 02 01 00 | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $04, $03, $02, $02, $01, $00
17f55     FF FF FE FD 
17f59     FC FC FC FC 
17f5d     FC FD FD FD 
17f61     FE FF FF 00 | 	byte	$ff, $ff, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $ff, $ff, $00
17f65     01 02 02 03 
17f69     04 04 04 04 
17f6d     04 04 03 02 
17f71     02 01 00 FF | 	byte	$01, $02, $02, $03, $04, $04, $04, $04, $04, $04, $03, $02, $02, $01, $00, $ff
17f75     FE FE FD FC 
17f79     FC FC FC FC 
17f7d     FC FC FD FD 
17f81     FE FF FF 00 | 	byte	$fe, $fe, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $00
17f85     01 01 02 03 
17f89     03 03 04 04 
17f8d     03 03 03 02 
17f91     02 01 00 00 | 	byte	$01, $01, $02, $03, $03, $03, $04, $04, $03, $03, $03, $02, $02, $01, $00, $00
17f95     FF FE FD FD 
17f99     FC FC FC FC 
17f9d     FC FC FD FE 
17fa1     FE FF FF 01 | 	byte	$ff, $fe, $fd, $fd, $fc, $fc, $fc, $fc, $fc, $fc, $fd, $fe, $fe, $ff, $ff, $01
17fa5     01 01 02 03 
17fa9     03 04 03 04 
17fad     03 03 03 02 
17fb1     01 00 00 FF | 	byte	$01, $01, $02, $03, $03, $04, $03, $04, $03, $03, $03, $02, $01, $00, $00, $ff
17fb5     FE FE FD FD 
17fb9     FD FD FC FC 
17fbd     FD FD FD FE 
17fc1     FE FF 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fe, $fe, $ff, $00, $01
17fc5     01 02 02 03 
17fc9     03 03 03 03 
17fcd     03 03 02 01 
17fd1     01 01 00 FF | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $01, $01, $01, $00, $ff
17fd5     FE FE FD FD 
17fd9     FD FC FC FD 
17fdd     FD FD FD FE 
17fe1     FF FF 00 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fc, $fc, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $01
17fe5     01 02 02 03 
17fe9     03 03 03 03 
17fed     03 02 02 01 
17ff1     01 00 FF FF | 	byte	$01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $00, $ff, $ff
17ff5     FE FD FD FD 
17ff9     FD FC FC FC 
17ffd     FD FD FE FE 
18001     FF 00 00 01 | 	byte	$fe, $fd, $fd, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fe, $fe, $ff, $00, $00, $01
18005     01 02 02 02 
18009     03 03 03 03 
1800d     03 03 02 01 
18011     01 00 FF FF | 	byte	$01, $02, $02, $02, $03, $03, $03, $03, $03, $03, $02, $01, $01, $00, $ff, $ff
18015     FE FE FD FD 
18019     FD FD FD FD 
1801d     FD FE FE FF 
18021     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $00, $00, $01, $01
18025     02 02 03 03 
18029     03 03 03 03 
1802d     03 02 02 01 
18031     01 00 00 FF | 	byte	$02, $02, $03, $03, $03, $03, $03, $03, $03, $02, $02, $01, $01, $00, $00, $ff
18035     FE FE FD FD 
18039     FD FD FD FE 
1803d     FE FE FE FF 
18041     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff, $00, $00, $01, $01
18045     02 02 02 03 
18049     03 03 03 02 
1804d     02 02 01 01 
18051     00 FF FF FF | 	byte	$02, $02, $02, $03, $03, $03, $03, $02, $02, $02, $01, $01, $00, $ff, $ff, $ff
18055     FE FE FD FD 
18059     FD FD FD FD 
1805d     FD FE FE FF 
18061     FF 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $00, $01, $01
18065     02 02 02 03 
18069     03 03 02 02 
1806d     02 02 01 00 
18071     00 00 FF FE | 	byte	$02, $02, $02, $03, $03, $03, $02, $02, $02, $02, $01, $00, $00, $00, $ff, $fe
18075     FE FE FD FD 
18079     FD FD FD FD 
1807d     FD FE FF FF 
18081     00 00 01 01 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fd, $fd, $fe, $ff, $ff, $00, $00, $01, $01
18085     02 02 02 02 
18089     03 02 02 02 
1808d     02 02 01 01 
18091     00 FF FF FE | 	byte	$02, $02, $02, $02, $03, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $ff, $fe
18095     FE FE FD FD 
18099     FD FD FD FE 
1809d     FE FF FF 00 
180a1     00 01 01 02 | 	byte	$fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $02
180a5     02 02 03 03 
180a9     03 03 03 02 
180ad     02 01 01 01 
180b1     00 FF FF FE | 	byte	$02, $02, $03, $03, $03, $03, $03, $02, $02, $01, $01, $01, $00, $ff, $ff, $fe
180b5     FE FD FD FD 
180b9     FD FD FE FE 
180bd     FE FF FF 00 
180c1     00 01 01 02 | 	byte	$fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff, $00, $00, $01, $01, $02
180c5     02 02 02 02 
180c9     03 03 02 02 
180cd     02 01 01 00 
180d1     FF FF FF FE | 	byte	$02, $02, $02, $02, $03, $03, $02, $02, $02, $01, $01, $00, $ff, $ff, $ff, $fe
180d5     FE FD FD FE 
180d9     FD FD FD FE 
180dd     FE FF FF FF 
180e1     00 01 01 02 | 	byte	$fe, $fd, $fd, $fe, $fd, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $00, $01, $01, $02
180e5     02 02 02 03 
180e9     03 02 02 02 
180ed     02 02 01 00 
180f1     00 FF FF FF | 	byte	$02, $02, $02, $03, $03, $02, $02, $02, $02, $02, $01, $00, $00, $ff, $ff, $ff
180f5     FE FE FE FE 
180f9     FE FE FE FE | 	byte	$fe[8]
180fd     FF FF 00 00 
18101     01 01 02 02 
18105     03 03 03 03 
18109     03 03 02 02 | 	byte	$ff, $ff, $00, $00, $01, $01, $02, $02, $03, $03, $03, $03, $03, $03, $02, $02
1810d     01 01 01 00 
18111     00 FF FF FE 
18115     FE FE FE FE 
18119     FE FE FE FE | 	byte	$01, $01, $01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe
1811d     FF FF 00 00 
18121     01 01 02 02 
18125     02 02 03 02 
18129     02 02 02 02 | 	byte	$ff, $ff, $00, $00, $01, $01, $02, $02, $02, $02, $03, $02, $02, $02, $02, $02
1812d     01 01 00 00 
18131     FF FF FE FE 
18135     FE FE FD FD 
18139     FD FE FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $fe, $fe
1813d     FF FF 00 00 
18141     00 01 01 02 
18145     02 02 02 02 
18149     03 02 02 02 | 	byte	$ff, $ff, $00, $00, $00, $01, $01, $02, $02, $02, $02, $02, $03, $02, $02, $02
1814d     01 01 00 00 
18151     FF FF FE FE 
18155     FD FD FD FD 
18159     FD FE FE FE | 	byte	$01, $01, $00, $00, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe
1815d     FE FF 00 00 
18161     01 01 01 02 
18165     02 02 02 02 
18169     02 02 02 01 | 	byte	$fe, $ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01
1816d     01 01 00 FF 
18171     FF FF FE FE 
18175     FD FD FD FD 
18179     FD FE FE FE | 	byte	$01, $01, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fe, $fe
1817d     FF 00 00 01 
18181     01 01 02 02 
18185     02 02 02 02 
18189     02 02 02 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $02, $01
1818d     01 00 00 FF 
18191     FE FE FE FE 
18195     FE FD FD FE 
18199     FE FE FE FE | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $fe, $fe, $fe
1819d     FF 00 00 01 
181a1     01 01 02 02 
181a5     02 02 02 02 
181a9     02 02 01 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01
181ad     01 00 00 FF 
181b1     FF FE FE FE 
181b5     FE FD FD FD 
181b9     FD FE FE FE | 	byte	$01, $00, $00, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe
181bd     FF 00 00 01 
181c1     01 01 01 02 
181c5     02 02 03 02 
181c9     02 02 02 01 | 	byte	$ff, $00, $00, $01, $01, $01, $01, $02, $02, $02, $03, $02, $02, $02, $02, $01
181cd     00 00 00 FF 
181d1     FF FF FE FE 
181d5     FE FE FE FE 
181d9     FE FE FE FF | 	byte	$00, $00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $fe, $ff
181dd     00 00 01 01 
181e1     02 02 02 02 
181e5     02 03 03 03 
181e9     02 02 02 01 | 	byte	$00, $00, $01, $01, $02, $02, $02, $02, $02, $03, $03, $03, $02, $02, $02, $01
181ed     01 00 FF FF 
181f1     FF FE FE FE 
181f5     FE FD FE FE 
181f9     FE FF FF FF | 	byte	$01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $ff, $ff, $ff
181fd     00 00 00 01 
18201     01 01 02 02 
18205     02 02 02 02 
18209     02 02 01 01 | 	byte	$00, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01
1820d     01 00 FF FF 
18211     FE FE FE FD 
18215     FD FD FD FE 
18219     FE FE FE FF | 	byte	$01, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $fe, $ff
1821d     FF 00 00 01 
18221     01 01 02 02 
18225     02 02 02 02 
18229     02 01 01 01 | 	byte	$ff, $00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1822d     01 00 FF FF 
18231     FF FE FE FE 
18235     FD FE FD FE 
18239     FE FE FF FF | 	byte	$01, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fd, $fe, $fd, $fe, $fe, $fe, $ff, $ff
1823d     00 00 01 01 
18241     01 01 02 02 
18245     02 02 02 02 
18249     02 01 01 00 | 	byte	$00, $00, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $01, $01, $00
1824d     00 00 FF FF 
18251     FE FE FE FD 
18255     FE FD FE FE 
18259     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fe, $fd, $fe, $fe, $fe, $ff, $ff, $ff
1825d     00 00 01 01 
18261     01 02 02 02 
18265     02 02 02 02 
18269     02 01 01 01 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1826d     00 00 FF FF 
18271     FE FE FE FD 
18275     FD FD FD FE 
18279     FE FE FF FF | 	byte	$00, $00, $ff, $ff, $fe, $fe, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $fe, $ff, $ff
1827d     00 00 01 01 
18281     01 02 02 02 
18285     02 02 02 02 
18289     02 01 01 01 | 	byte	$00, $00, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01
1828d     00 FF FF FF 
18291     FE FE FE 00 
18295     00 00 00 2E 
18299     2D 2B 29 26 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $00, $00, $00, $00, $2e, $2d, $2b, $29, $26
1829d     25 23 21 1F 
182a1     1E 1C 1A 18 
182a5     16 14 12 10 
182a9     0E 0C 09 07 | 	byte	$25, $23, $21, $1f, $1e, $1c, $1a, $18, $16, $14, $12, $10, $0e, $0c, $09, $07
182ad     06 03 01 FE 
182b1     FC FA F7 F5 
182b5     F2 F1 EE EC 
182b9     E9 E7 E5 E3 | 	byte	$06, $03, $01, $fe, $fc, $fa, $f7, $f5, $f2, $f1, $ee, $ec, $e9, $e7, $e5, $e3
182bd     E0 DF DC DA 
182c1     D8 D6 D4 D3 
182c5     D1 CF CE CC 
182c9     CB C9 C9 C8 | 	byte	$e0, $df, $dc, $da, $d8, $d6, $d4, $d3, $d1, $cf, $ce, $cc, $cb, $c9, $c9, $c8
182cd     C7 C6 C6 C5 
182d1     C5 C5 C5 C5 
182d5     C6 C6 C6 C7 
182d9     C7 C8 C9 C9 | 	byte	$c7, $c6, $c6, $c5, $c5, $c5, $c5, $c5, $c6, $c6, $c6, $c7, $c7, $c8, $c9, $c9
182dd     CA CB CD CE 
182e1     CF D1 D2 D3 
182e5     D4 D5 D7 D9 
182e9     DA DC DE E0 | 	byte	$ca, $cb, $cd, $ce, $cf, $d1, $d2, $d3, $d4, $d5, $d7, $d9, $da, $dc, $de, $e0
182ed     E1 E3 E4 E7 
182f1     E9 EC EE F1 
182f5     F4 F7 FC 00 
182f9     06 0F 19 24 | 	byte	$e1, $e3, $e4, $e7, $e9, $ec, $ee, $f1, $f4, $f7, $fc, $00, $06, $0f, $19, $24
182fd     30 3F 50 5F 
18301     6C 6B 52 1B 
18305     E0 D5 F1 0D 
18309     23 31 3B 41 | 	byte	$30, $3f, $50, $5f, $6c, $6b, $52, $1b, $e0, $d5, $f1, $0d, $23, $31, $3b, $41
1830d     46 47 49 4A 
18311     4A 49 48 46 
18315     44 42 40 3E 
18319     3C 3A 38 35 | 	byte	$46, $47, $49, $4a, $4a, $49, $48, $46, $44, $42, $40, $3e, $3c, $3a, $38, $35
1831d     33 31 2F 2C 
18321     2A 27 25 23 
18325     21 1F 1D 1A 
18329     18 15 13 10 | 	byte	$33, $31, $2f, $2c, $2a, $27, $25, $23, $21, $1f, $1d, $1a, $18, $15, $13, $10
1832d     0E 0C 09 07 
18331     05 02 00 FD 
18335     FB F8 F5 F3 
18339     F1 EF EC EA | 	byte	$0e, $0c, $09, $07, $05, $02, $00, $fd, $fb, $f8, $f5, $f3, $f1, $ef, $ec, $ea
1833d     E8 E6 E4 E2 
18341     E0 DE DC DB 
18345     D9 D7 D6 D4 
18349     D3 D3 D2 D1 | 	byte	$e8, $e6, $e4, $e2, $e0, $de, $dc, $db, $d9, $d7, $d6, $d4, $d3, $d3, $d2, $d1
1834d     D0 D0 CF CE 
18351     CE CD CD CD 
18355     CD CE CE CF 
18359     CF CF D0 D1 | 	byte	$d0, $d0, $cf, $ce, $ce, $cd, $cd, $cd, $cd, $ce, $ce, $cf, $cf, $cf, $d0, $d1
1835d     D1 D3 D3 D4 
18361     D5 D6 D8 D9 
18365     DA DB DD DE 
18369     E0 E1 E3 E5 | 	byte	$d1, $d3, $d3, $d4, $d5, $d6, $d8, $d9, $da, $db, $dd, $de, $e0, $e1, $e3, $e5
1836d     E7 EA EC EF 
18371     F2 F4 F7 FB 
18375     00 05 0A 11 
18379     18 22 2C 38 | 	byte	$e7, $ea, $ec, $ef, $f2, $f4, $f7, $fb, $00, $05, $0a, $11, $18, $22, $2c, $38
1837d     45 53 5D 65 
18381     62 4C 27 F4 
18385     D1 CC D9 EE 
18389     FF 0E 19 23 | 	byte	$45, $53, $5d, $65, $62, $4c, $27, $f4, $d1, $cc, $d9, $ee, $ff, $0e, $19, $23
1838d     2B 31 36 39 
18391     3B 3D 3D 3C 
18395     3C 3B 3A 39 
18399     38 36 35 33 | 	byte	$2b, $31, $36, $39, $3b, $3d, $3d, $3c, $3c, $3b, $3a, $39, $38, $36, $35, $33
1839d     31 2F 2E 2B 
183a1     29 27 25 23 
183a5     21 1F 1C 1A 
183a9     17 15 13 10 | 	byte	$31, $2f, $2e, $2b, $29, $27, $25, $23, $21, $1f, $1c, $1a, $17, $15, $13, $10
183ad     0F 0C 0A 08 
183b1     06 03 02 FF 
183b5     FD FA F8 F6 
183b9     F4 F2 F0 EE | 	byte	$0f, $0c, $0a, $08, $06, $03, $02, $ff, $fd, $fa, $f8, $f6, $f4, $f2, $f0, $ee
183bd     EB EA E8 E6 
183c1     E4 E3 E2 E0 
183c5     DE DC DB DA 
183c9     D9 D8 D7 D6 | 	byte	$eb, $ea, $e8, $e6, $e4, $e3, $e2, $e0, $de, $dc, $db, $da, $d9, $d8, $d7, $d6
183cd     D6 D5 D5 D4 
183d1     D4 D4 D3 D3 
183d5     D3 D4 D4 D4 
183d9     D4 D5 D6 D6 | 	byte	$d6, $d5, $d5, $d4, $d4, $d4, $d3, $d3, $d3, $d4, $d4, $d4, $d4, $d5, $d6, $d6
183dd     D7 D8 D9 DA 
183e1     DB DC DE DF 
183e5     E1 E2 E4 E7 
183e9     E8 EA EC EE | 	byte	$d7, $d8, $d9, $da, $db, $dc, $de, $df, $e1, $e2, $e4, $e7, $e8, $ea, $ec, $ee
183ed     F0 F2 F5 F8 
183f1     FB FE 03 09 
183f5     0F 15 1B 22 
183f9     2C 35 3F 48 | 	byte	$f0, $f2, $f5, $f8, $fb, $fe, $03, $09, $0f, $15, $1b, $22, $2c, $35, $3f, $48
183fd     51 58 59 54 
18401     42 28 02 DE 
18405     C8 C0 C5 D2 
18409     E1 EE FC 08 | 	byte	$51, $58, $59, $54, $42, $28, $02, $de, $c8, $c0, $c5, $d2, $e1, $ee, $fc, $08
1840d     10 1A 20 25 
18411     2A 2C 2F 31 
18415     32 32 32 32 
18419     31 2F 2F 2D | 	byte	$10, $1a, $20, $25, $2a, $2c, $2f, $31, $32, $32, $32, $32, $31, $2f, $2f, $2d
1841d     2C 2A 29 27 
18421     26 24 22 20 
18425     1D 1C 1A 18 
18429     16 14 12 10 | 	byte	$2c, $2a, $29, $27, $26, $24, $22, $20, $1d, $1c, $1a, $18, $16, $14, $12, $10
1842d     0E 0B 0A 08 
18431     06 04 02 00 
18435     FE FC FB F8 
18439     F6 F4 F2 F1 | 	byte	$0e, $0b, $0a, $08, $06, $04, $02, $00, $fe, $fc, $fb, $f8, $f6, $f4, $f2, $f1
1843d     EF ED EC EA 
18441     E8 E7 E5 E4 
18445     E3 E2 E1 E0 
18449     DF DE DE DD | 	byte	$ef, $ed, $ec, $ea, $e8, $e7, $e5, $e4, $e3, $e2, $e1, $e0, $df, $de, $de, $dd
1844d     DC DB DB DA 
18451     DA DA DA DA 
18455     DA DA DB DA 
18459     DB DC DC DD | 	byte	$dc, $db, $db, $da, $da, $da, $da, $da, $da, $da, $db, $da, $db, $dc, $dc, $dd
1845d     DE DE DF E0 
18461     E1 E3 E4 E5 
18465     E6 E8 EB EC 
18469     EE F0 F2 F5 | 	byte	$de, $de, $df, $e0, $e1, $e3, $e4, $e5, $e6, $e8, $eb, $ec, $ee, $f0, $f2, $f5
1846d     F7 FB FE 03 
18471     07 0B 11 17 
18475     1C 23 29 31 
18479     3A 43 4A 4F | 	byte	$f7, $fb, $fe, $03, $07, $0b, $11, $17, $1c, $23, $29, $31, $3a, $43, $4a, $4f
1847d     52 51 4A 3C 
18481     29 0C EE D6 
18485     C3 BB BC C3 
18489     CD D9 E4 F0 | 	byte	$52, $51, $4a, $3c, $29, $0c, $ee, $d6, $c3, $bb, $bc, $c3, $cd, $d9, $e4, $f0
1848d     F8 00 09 10 
18491     16 1B 1F 21 
18495     24 26 27 28 
18499     28 28 29 28 | 	byte	$f8, $00, $09, $10, $16, $1b, $1f, $21, $24, $26, $27, $28, $28, $28, $29, $28
1849d     28 26 25 24 
184a1     23 21 20 1E 
184a5     1D 1B 19 18 
184a9     16 15 13 11 | 	byte	$28, $26, $25, $24, $23, $21, $20, $1e, $1d, $1b, $19, $18, $16, $15, $13, $11
184ad     0F 0E 0C 0A 
184b1     08 06 04 03 
184b5     00 FF FD FB 
184b9     F9 F8 F6 F5 | 	byte	$0f, $0e, $0c, $0a, $08, $06, $04, $03, $00, $ff, $fd, $fb, $f9, $f8, $f6, $f5
184bd     F3 F1 F0 EE 
184c1     ED EC EB EA 
184c5     E9 E8 E9 E8 
184c9     E7 E6 E5 E4 | 	byte	$f3, $f1, $f0, $ee, $ed, $ec, $eb, $ea, $e9, $e8, $e9, $e8, $e7, $e6, $e5, $e4
184cd     E3 E3 E2 E1 
184d1     E1 E1 E0 E0 
184d5     E0 E0 E0 E0 
184d9     E1 E1 E2 E3 | 	byte	$e3, $e3, $e2, $e1, $e1, $e1, $e0, $e0, $e0, $e0, $e0, $e0, $e1, $e1, $e2, $e3
184dd     E4 E4 E5 E6 
184e1     E7 E8 EA EB 
184e5     ED EE F0 F2 
184e9     F4 F7 F9 FC | 	byte	$e4, $e4, $e5, $e6, $e7, $e8, $ea, $eb, $ed, $ee, $f0, $f2, $f4, $f7, $f9, $fc
184ed     00 03 07 0B 
184f1     10 14 19 1F 
184f5     24 2A 30 36 
184f9     3C 42 47 49 | 	byte	$00, $03, $07, $0b, $10, $14, $19, $1f, $24, $2a, $30, $36, $3c, $42, $47, $49
184fd     48 44 3A 2C 
18501     19 03 EB D3 
18505     C4 BA B5 B7 
18509     BD C4 CD D8 | 	byte	$48, $44, $3a, $2c, $19, $03, $eb, $d3, $c4, $ba, $b5, $b7, $bd, $c4, $cd, $d8
1850d     E1 EA F3 FB 
18511     03 08 0C 10 
18515     14 18 1A 1C 
18519     1E 1F 20 20 | 	byte	$e1, $ea, $f3, $fb, $03, $08, $0c, $10, $14, $18, $1a, $1c, $1e, $1f, $20, $20
1851d     20 21 20 20 
18521     1F 1F 1E 1D 
18525     1B 1A 18 18 
18529     17 15 14 12 | 	byte	$20, $21, $20, $20, $1f, $1f, $1e, $1d, $1b, $1a, $18, $18, $17, $15, $14, $12
1852d     11 0F 0E 0C 
18531     0A 09 07 06 
18535     04 03 01 FF 
18539     FD FC FA F9 | 	byte	$11, $0f, $0e, $0c, $0a, $09, $07, $06, $04, $03, $01, $ff, $fd, $fc, $fa, $f9
1853d     F8 F7 F6 F5 
18541     F3 F2 F1 F0 
18545     EF EE EE EC 
18549     EB EB EA EA | 	byte	$f8, $f7, $f6, $f5, $f3, $f2, $f1, $f0, $ef, $ee, $ee, $ec, $eb, $eb, $ea, $ea
1854d     E9 E9 E8 E8 
18551     E8 E8 E8 E7 
18555     E7 E8 E8 E9 
18559     E9 E9 EA EB | 	byte	$e9, $e9, $e8, $e8, $e8, $e8, $e8, $e7, $e7, $e8, $e8, $e9, $e9, $e9, $ea, $eb
1855d     EB EC ED EE 
18561     F0 F1 F2 F4 
18565     F6 F7 F9 FB 
18569     FD 00 02 05 | 	byte	$eb, $ec, $ed, $ee, $f0, $f1, $f2, $f4, $f6, $f7, $f9, $fb, $fd, $00, $02, $05
1856d     08 0C 0F 13 
18571     17 1C 22 27 
18575     2C 31 36 3A 
18579     3E 41 42 41 | 	byte	$08, $0c, $0f, $13, $17, $1c, $22, $27, $2c, $31, $36, $3a, $3e, $41, $42, $41
1857d     3D 37 2C 1D 
18581     0D F9 E6 D3 
18585     C4 B9 B3 B2 
18589     B3 B7 BF C7 | 	byte	$3d, $37, $2c, $1d, $0d, $f9, $e6, $d3, $c4, $b9, $b3, $b2, $b3, $b7, $bf, $c7
1858d     CF D8 E0 E8 
18591     F0 F7 FD 02 
18595     07 0B 0F 11 
18599     13 15 16 18 | 	byte	$cf, $d8, $e0, $e8, $f0, $f7, $fd, $02, $07, $0b, $0f, $11, $13, $15, $16, $18
1859d     19 1A 1A 1A 
185a1     1A 1A 19 19 
185a5     18 19 19 18 
185a9     17 16 15 13 | 	byte	$19, $1a, $1a, $1a, $1a, $1a, $19, $19, $18, $19, $19, $18, $17, $16, $15, $13
185ad     11 10 0E 0D 
185b1     0C 0A 08 07 
185b5     06 04 03 02 
185b9     00 FF FE FD | 	byte	$11, $10, $0e, $0d, $0c, $0a, $08, $07, $06, $04, $03, $02, $00, $ff, $fe, $fd
185bd     FB FA F8 F8 
185c1     F7 F6 F5 F4 
185c5     F4 F3 F2 F1 
185c9     F1 F0 EF EF | 	byte	$fb, $fa, $f8, $f8, $f7, $f6, $f5, $f4, $f4, $f3, $f2, $f1, $f1, $f0, $ef, $ef
185cd     EF EE EE EE 
185d1     EE EE EE EE 
185d5     EE EE EE EE 
185d9     EF EF F0 F0 | 	byte	$ef, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ee, $ef, $ef, $f0, $f0
185dd     F1 F2 F3 F4 
185e1     F5 F6 F8 F9 
185e5     FB FE 00 02 
185e9     04 07 09 0C | 	byte	$f1, $f2, $f3, $f4, $f5, $f6, $f8, $f9, $fb, $fe, $00, $02, $04, $07, $09, $0c
185ed     0F 12 17 1C 
185f1     1F 23 27 2C 
185f5     30 33 37 3A 
185f9     3C 3C 3B 38 | 	byte	$0f, $12, $17, $1c, $1f, $23, $27, $2c, $30, $33, $37, $3a, $3c, $3c, $3b, $38
185fd     32 2B 20 14 
18601     04 F4 E3 D3 
18605     C5 BB B4 B1 
18609     B0 B1 B5 BB | 	byte	$32, $2b, $20, $14, $04, $f4, $e3, $d3, $c5, $bb, $b4, $b1, $b0, $b1, $b5, $bb
1860d     C1 C8 D0 D7 
18611     DF E5 EC F1 
18615     F7 FC 01 05 
18619     08 0B 0E 10 | 	byte	$c1, $c8, $d0, $d7, $df, $e5, $ec, $f1, $f7, $fc, $01, $05, $08, $0b, $0e, $10
1861d     12 14 14 14 
18621     15 16 16 16 
18625     17 17 16 16 
18629     15 14 14 13 | 	byte	$12, $14, $14, $14, $15, $16, $16, $16, $17, $17, $16, $16, $15, $14, $14, $13
1862d     12 11 10 0F 
18631     0E 0C 0B 0A 
18635     09 08 07 06 
18639     05 04 03 02 | 	byte	$12, $11, $10, $0f, $0e, $0c, $0b, $0a, $09, $08, $07, $06, $05, $04, $03, $02
1863d     01 00 FE FE 
18641     FC FB FB FA 
18645     F9 F8 F8 F7 
18649     F7 F6 F5 F5 | 	byte	$01, $00, $fe, $fe, $fc, $fb, $fb, $fa, $f9, $f8, $f8, $f7, $f7, $f6, $f5, $f5
1864d     F5 F4 F4 F4 
18651     F4 F4 F4 F4 
18655     F4 F4 F5 F5 
18659     F6 F6 F7 F8 | 	byte	$f5, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f8
1865d     F8 FA FA FC 
18661     FD FE FF 00 
18665     02 04 06 09 
18669     0B 0D 11 14 | 	byte	$f8, $fa, $fa, $fc, $fd, $fe, $ff, $00, $02, $04, $06, $09, $0b, $0d, $11, $14
1866d     17 1A 1E 21 
18671     24 27 2B 2E 
18675     31 33 35 36 
18679     37 36 33 2E | 	byte	$17, $1a, $1e, $21, $24, $27, $2b, $2e, $31, $33, $35, $36, $37, $36, $33, $2e
1867d     28 1F 14 07 
18681     F9 EA DD D0 
18685     C4 BC B5 B1 
18689     AF B0 B2 B6 | 	byte	$28, $1f, $14, $07, $f9, $ea, $dd, $d0, $c4, $bc, $b5, $b1, $af, $b0, $b2, $b6
1868d     BA C0 C7 CD 
18691     D4 D9 DF E4 
18695     EA EF F4 F8 
18699     FC 00 03 06 | 	byte	$ba, $c0, $c7, $cd, $d4, $d9, $df, $e4, $ea, $ef, $f4, $f8, $fc, $00, $03, $06
1869d     09 0B 0D 0E 
186a1     0F 10 11 12 
186a5     12 12 12 12 
186a9     12 12 11 11 | 	byte	$09, $0b, $0d, $0e, $0f, $10, $11, $12, $12, $12, $12, $12, $12, $12, $11, $11
186ad     11 10 0F 0F 
186b1     0E 0D 0D 0C 
186b5     0B 0A 09 08 
186b9     07 06 05 05 | 	byte	$11, $10, $0f, $0f, $0e, $0d, $0d, $0c, $0b, $0a, $09, $08, $07, $06, $05, $05
186bd     04 03 02 02 
186c1     01 00 FF FF 
186c5     FE FD FD FC 
186c9     FC FB FB FB | 	byte	$04, $03, $02, $02, $01, $00, $ff, $ff, $fe, $fd, $fd, $fc, $fc, $fb, $fb, $fb
186cd     FA FA FA FA 
186d1     FA FA FA FA | 	byte	$fa[8]
186d5     FB FB FB FB 
186d9     FC FD FD FE 
186dd     FF 00 02 03 
186e1     04 06 07 09 | 	byte	$fb, $fb, $fb, $fb, $fc, $fd, $fd, $fe, $ff, $00, $02, $03, $04, $06, $07, $09
186e5     0B 0C 0E 11 
186e9     13 15 17 1A 
186ed     1D 20 23 25 
186f1     29 2C 2E 30 | 	byte	$0b, $0c, $0e, $11, $13, $15, $17, $1a, $1d, $20, $23, $25, $29, $2c, $2e, $30
186f5     32 33 33 33 
186f9     31 2E 29 24 
186fd     1C 12 08 FC 
18701     EF E3 D7 CC | 	byte	$32, $33, $33, $33, $31, $2e, $29, $24, $1c, $12, $08, $fc, $ef, $e3, $d7, $cc
18705     C2 B9 B4 AF 
18709     AD AD AE B1 
1870d     B5 BA C0 C6 
18711     CC D2 D7 DD | 	byte	$c2, $b9, $b4, $af, $ad, $ad, $ae, $b1, $b5, $ba, $c0, $c6, $cc, $d2, $d7, $dd
18715     E3 E8 ED F0 
18719     F5 F9 FC FF 
1871d     02 05 07 09 
18721     0A 0B 0D 0E | 	byte	$e3, $e8, $ed, $f0, $f5, $f9, $fc, $ff, $02, $05, $07, $09, $0a, $0b, $0d, $0e
18725     0F 0F 10 10 
18729     10 10 10 10 
1872d     10 10 0F 0F 
18731     0F 0E 0E 0D | 	byte	$0f, $0f, $10, $10, $10, $10, $10, $10, $10, $10, $0f, $0f, $0f, $0e, $0e, $0d
18735     0C 0C 0B 0A 
18739     0A 09 08 08 
1873d     07 06 06 05 
18741     04 04 03 03 | 	byte	$0c, $0c, $0b, $0a, $0a, $09, $08, $08, $07, $06, $06, $05, $04, $04, $03, $03
18745     02 02 01 01 
18749     01 01 00 FF 
1874d     00 FF FF FF 
18751     00 00 00 00 | 	byte	$02, $02, $01, $01, $01, $01, $00, $ff, $00, $ff, $ff, $ff, $00, $00, $00, $00
18755     00 00 01 01 
18759     02 03 03 04 
1875d     05 06 07 08 
18761     0A 0B 0D 0F | 	byte	$00, $00, $01, $01, $02, $03, $03, $04, $05, $06, $07, $08, $0a, $0b, $0d, $0f
18765     12 14 16 18 
18769     1A 1C 1E 20 
1876d     23 25 28 2A 
18771     2B 2C 2E 2F | 	byte	$12, $14, $16, $18, $1a, $1c, $1e, $20, $23, $25, $28, $2a, $2b, $2c, $2e, $2f
18775     2F 2E 2D 2B 
18779     28 24 1F 18 
1877d     10 06 FD F1 
18781     E7 DB D1 C7 | 	byte	$2f, $2e, $2d, $2b, $28, $24, $1f, $18, $10, $06, $fd, $f1, $e7, $db, $d1, $c7
18785     BE B8 B2 AE 
18789     AC AC AD AF 
1878d     B2 B6 BA BF 
18791     C5 CA CF D5 | 	byte	$be, $b8, $b2, $ae, $ac, $ac, $ad, $af, $b2, $b6, $ba, $bf, $c5, $ca, $cf, $d5
18795     DA E0 E4 E9 
18799     EE F2 F6 F9 
1879d     FC FE 01 03 
187a1     05 07 09 0A | 	byte	$da, $e0, $e4, $e9, $ee, $f2, $f6, $f9, $fc, $fe, $01, $03, $05, $07, $09, $0a
187a5     0C 0D 0E 0E 
187a9     0F 0F 0F 10 
187ad     10 10 10 10 
187b1     0F 0F 0F 0E | 	byte	$0c, $0d, $0e, $0e, $0f, $0f, $0f, $10, $10, $10, $10, $10, $0f, $0f, $0f, $0e
187b5     0D 0D 0C 0C 
187b9     0C 0B 0B 0A 
187bd     0A 09 09 08 
187c1     08 07 07 07 | 	byte	$0d, $0d, $0c, $0c, $0c, $0b, $0b, $0a, $0a, $09, $09, $08, $08, $07, $07, $07
187c5     06 06 06 06 
187c9     05 05 04 05 
187cd     05 05 04 04 
187d1     05 05 05 05 | 	byte	$06, $06, $06, $06, $05, $05, $04, $05, $05, $05, $04, $04, $05, $05, $05, $05
187d5     05 06 07 08 
187d9     09 09 0A 0B 
187dd     0C 0D 0E 0F 
187e1     11 12 13 14 | 	byte	$05, $06, $07, $08, $09, $09, $0a, $0b, $0c, $0d, $0e, $0f, $11, $12, $13, $14
187e5     16 18 1A 1B 
187e9     1E 20 22 24 
187ed     26 28 29 2B 
187f1     2C 2D 2D 2D | 	byte	$16, $18, $1a, $1b, $1e, $20, $22, $24, $26, $28, $29, $2b, $2c, $2d, $2d, $2d
187f5     2C 2B 29 26 
187f9     22 1D 18 10 
187fd     07 FE F4 EB 
18801     E1 D7 CE C5 | 	byte	$2c, $2b, $29, $26, $22, $1d, $18, $10, $07, $fe, $f4, $eb, $e1, $d7, $ce, $c5
18805     BE B7 B2 AF 
18809     AD AC AC AE 
1880d     B0 B4 B7 BB 
18811     C0 C5 CA CF | 	byte	$be, $b7, $b2, $af, $ad, $ac, $ac, $ae, $b0, $b4, $b7, $bb, $c0, $c5, $ca, $cf
18815     D4 D9 DE E2 
18819     E7 EB EF F2 
1881d     F6 F9 FC FE 
18821     01 03 04 06 | 	byte	$d4, $d9, $de, $e2, $e7, $eb, $ef, $f2, $f6, $f9, $fc, $fe, $01, $03, $04, $06
18825     08 09 0B 0C 
18829     0C 0D 0E 0E 
1882d     0F 0F 0F 0F 
18831     0F 0F 0F 0F | 	byte	$08, $09, $0b, $0c, $0c, $0d, $0e, $0e, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
18835     0F 0E 0E 0E 
18839     0E 0D 0D 0C 
1883d     0C 0C 0C 0C 
18841     0B 0B 0B 0B | 	byte	$0f, $0e, $0e, $0e, $0e, $0d, $0d, $0c, $0c, $0c, $0c, $0c, $0b, $0b, $0b, $0b
18845     0C 0C 0B 0B 
18849     0A 0A 0A 0A 
1884d     0A 0A 0A 09 
18851     09 09 09 0A | 	byte	$0c, $0c, $0b, $0b, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $09, $09, $09, $09, $0a
18855     0A 0A 0B 0C 
18859     0C 0D 0E 0F 
1885d     11 12 13 14 
18861     16 17 19 1A | 	byte	$0a, $0a, $0b, $0c, $0c, $0d, $0e, $0f, $11, $12, $13, $14, $16, $17, $19, $1a
18865     1B 1D 1F 20 
18869     22 23 25 26 
1886d     28 29 2A 2B 
18871     2B 2B 2B 29 | 	byte	$1b, $1d, $1f, $20, $22, $23, $25, $26, $28, $29, $2a, $2b, $2b, $2b, $2b, $29
18875     27 25 22 1E 
18879     1A 14 0D 05 
1887d     FE F5 EC E3 
18881     DA D1 CA C2 | 	byte	$27, $25, $22, $1e, $1a, $14, $0d, $05, $fe, $f5, $ec, $e3, $da, $d1, $ca, $c2
18885     BC B7 B2 AF 
18889     AD AD AD AD 
1888d     B0 B2 B6 BA 
18891     BE C2 C7 CC | 	byte	$bc, $b7, $b2, $af, $ad, $ad, $ad, $ad, $b0, $b2, $b6, $ba, $be, $c2, $c7, $cc
18895     D0 D5 D9 DE 
18899     E2 E6 EA EE 
1889d     F1 F5 F7 FA 
188a1     FC FF 01 03 | 	byte	$d0, $d5, $d9, $de, $e2, $e6, $ea, $ee, $f1, $f5, $f7, $fa, $fc, $ff, $01, $03
188a5     05 07 08 0A 
188a9     0B 0B 0C 0D 
188ad     0E 0E 0F 0F 
188b1     0F 0F 0F 10 | 	byte	$05, $07, $08, $0a, $0b, $0b, $0c, $0d, $0e, $0e, $0f, $0f, $0f, $0f, $0f, $10
188b5     10 10 10 10 
188b9     10 10 10 10 | 	byte	$10[8]
188bd     0F 0F 0F 0F 
188c1     0F          | 	byte	$0f[5]
188c2     0E 0E 0E 0E 
188c6     0E          | 	byte	$0e[5]
188c7     0D 0E 0E 0D 
188cb     0D 0D 0D 0D 
188cf     0D 0E 0F 0F 
188d3     0F 0F 10 10 | 	byte	$0d, $0e, $0e, $0d, $0d, $0d, $0d, $0d, $0d, $0e, $0f, $0f, $0f, $0f, $10, $10
188d7     11 12 12 13 
188db     14 15 16 16 
188df     17 19 1A 1B 
188e3     1D 1F 20 21 | 	byte	$11, $12, $12, $13, $14, $15, $16, $16, $17, $19, $1a, $1b, $1d, $1f, $20, $21
188e7     22 24 25 26 
188eb     28 29 2A 2A 
188ef     2A 2B 2A 29 
188f3     27 25 23 1F | 	byte	$22, $24, $25, $26, $28, $29, $2a, $2a, $2a, $2b, $2a, $29, $27, $25, $23, $1f
188f7     1C 17 12 0B 
188fb     05 FE F5 EE 
188ff     E5 DD D5 CD 
18903     C7 C0 BB B6 | 	byte	$1c, $17, $12, $0b, $05, $fe, $f5, $ee, $e5, $dd, $d5, $cd, $c7, $c0, $bb, $b6
18907     B2 AF AE AD 
1890b     AD AE B0 B2 
1890f     B5 B9 BC C0 
18913     C4 C8 CD D2 | 	byte	$b2, $af, $ae, $ad, $ad, $ae, $b0, $b2, $b5, $b9, $bc, $c0, $c4, $c8, $cd, $d2
18917     D6 DB DF E3 
1891b     E6 EA ED F0 
1891f     F4 F7 F9 FC 
18923     FE 02 04 06 | 	byte	$d6, $db, $df, $e3, $e6, $ea, $ed, $f0, $f4, $f7, $f9, $fc, $fe, $02, $04, $06
18927     08 09 0A 0B 
1892b     0C 0D 0E 0E 
1892f     0F 0E 0F 0F 
18933     0F 0F 0F 10 | 	byte	$08, $09, $0a, $0b, $0c, $0d, $0e, $0e, $0f, $0e, $0f, $0f, $0f, $0f, $0f, $10
18937     10 10 10 10 
1893b     10 10 10 10 
1893f     10 10 10    | 	byte	$10[11]
18942     11 11 11 10 
18946     10 10 11 10 
1894a     11 11 11 11 
1894e     11 12 12 12 | 	byte	$11, $11, $11, $10, $10, $10, $11, $10, $11, $11, $11, $11, $11, $12, $12, $12
18952     13 13 13 14 
18956     15 16 16 17 
1895a     18 19 1A 1A 
1895e     1B 1C 1D 1F | 	byte	$13, $13, $13, $14, $15, $16, $16, $17, $18, $19, $1a, $1a, $1b, $1c, $1d, $1f
18962     20 21 21 23 
18966     24 25 26 27 
1896a     28 29 29 29 
1896e     29 29 28 27 | 	byte	$20, $21, $21, $23, $24, $25, $26, $27, $28, $29, $29, $29, $29, $29, $28, $27
18972     25 23 20 1D 
18976     1A 15 10 0A 
1897a     05 FE F6 EF 
1897e     E7 E0 D8 D1 | 	byte	$25, $23, $20, $1d, $1a, $15, $10, $0a, $05, $fe, $f6, $ef, $e7, $e0, $d8, $d1
18982     CB C4 BE BA 
18986     B6 B2 B0 AF 
1898a     AE AE AF B0 
1898e     B2 B5 B8 BB | 	byte	$cb, $c4, $be, $ba, $b6, $b2, $b0, $af, $ae, $ae, $af, $b0, $b2, $b5, $b8, $bb
18992     BF C3 C6 CB 
18996     CF D3 D8 DB 
1899a     DF E3 E7 EA 
1899e     ED F1 F4 F7 | 	byte	$bf, $c3, $c6, $cb, $cf, $d3, $d8, $db, $df, $e3, $e7, $ea, $ed, $f1, $f4, $f7
189a2     F9 FB FE 00 
189a6     02 04 06 07 
189aa     09 0A 0C 0D 
189ae     0E 0E 0F 10 | 	byte	$f9, $fb, $fe, $00, $02, $04, $06, $07, $09, $0a, $0c, $0d, $0e, $0e, $0f, $10
189b2     10 11 11 12 
189b6     12 12 12 12 
189ba     13 13 13 13 
189be     13 13 13 13 | 	byte	$10, $11, $11, $12, $12, $12, $12, $12, $13, $13, $13, $13, $13, $13, $13, $13
189c2     13 13 13 14 
189c6     14 14 14 15 
189ca     15 15 15 15 
189ce     16 16 16 16 | 	byte	$13, $13, $13, $14, $14, $14, $14, $15, $15, $15, $15, $15, $16, $16, $16, $16
189d2     17 18 18 19 
189d6     19 1A 1B 1B 
189da     1C 1D 1E 1F 
189de     20 20 21 22 | 	byte	$17, $18, $18, $19, $19, $1a, $1b, $1b, $1c, $1d, $1e, $1f, $20, $20, $21, $22
189e2     23 24 25 26 
189e6     27 27 28 29 
189ea     29 29 29 29 
189ee     28 27 26 24 | 	byte	$23, $24, $25, $26, $27, $27, $28, $29, $29, $29, $29, $29, $28, $27, $26, $24
189f2     21 1E 1B 18 
189f6     13 0F 0A 04 
189fa     FE F7 F1 EA 
189fe     E3 DC D5 CF | 	byte	$21, $1e, $1b, $18, $13, $0f, $0a, $04, $fe, $f7, $f1, $ea, $e3, $dc, $d5, $cf
18a02     C9 C4 C0 BC 
18a06     B8 B5 B2 B0 
18a0a     AF B0 B0 B1 
18a0e     B3 B5 B7 B9 | 	byte	$c9, $c4, $c0, $bc, $b8, $b5, $b2, $b0, $af, $b0, $b0, $b1, $b3, $b5, $b7, $b9
18a12     BD C1 C4 C8 
18a16     CB D0 D3 D8 
18a1a     DC E0 E3 E7 
18a1e     EA ED F0 F3 | 	byte	$bd, $c1, $c4, $c8, $cb, $d0, $d3, $d8, $dc, $e0, $e3, $e7, $ea, $ed, $f0, $f3
18a22     F6 F8 FB FD 
18a26     FF 02 03 04 
18a2a     07 08 09 0B 
18a2e     0C 0D 0E 0F | 	byte	$f6, $f8, $fb, $fd, $ff, $02, $03, $04, $07, $08, $09, $0b, $0c, $0d, $0e, $0f
18a32     10 11 11 12 
18a36     12 13 13 14 
18a3a     14 14 15 15 
18a3e     15 15 16 16 | 	byte	$10, $11, $11, $12, $12, $13, $13, $14, $14, $14, $15, $15, $15, $15, $16, $16
18a42     16 16 16 17 
18a46     17 17 17 17 
18a4a     18 18 18 19 
18a4e     19 1A 1B 1B | 	byte	$16, $16, $16, $17, $17, $17, $17, $17, $18, $18, $18, $19, $19, $1a, $1b, $1b
18a52     1B 1B 1B 1C 
18a56     1D 1D 1E 1F 
18a5a     1F 20 21 21 
18a5e     22 23 24 25 | 	byte	$1b, $1b, $1b, $1c, $1d, $1d, $1e, $1f, $1f, $20, $21, $21, $22, $23, $24, $25
18a62     26 27 27 28 
18a66     28 28 29 29 
18a6a     29 28 28 27 
18a6e     26 25 23 21 | 	byte	$26, $27, $27, $28, $28, $28, $29, $29, $29, $28, $28, $27, $26, $25, $23, $21
18a72     1E 1B 17 13 
18a76     0E 0A 05 00 
18a7a     FA F3 ED E6 
18a7e     E0 D9 D4 CE | 	byte	$1e, $1b, $17, $13, $0e, $0a, $05, $00, $fa, $f3, $ed, $e6, $e0, $d9, $d4, $ce
18a82     C9 C3 BF BB 
18a86     B7 B4 B2 B1 
18a8a     B0 B0 B1 B1 
18a8e     B3 B5 B7 BA | 	byte	$c9, $c3, $bf, $bb, $b7, $b4, $b2, $b1, $b0, $b0, $b1, $b1, $b3, $b5, $b7, $ba
18a92     BD C0 C4 C7 
18a96     CB CF D2 D6 
18a9a     D9 DD E1 E5 
18a9e     E8 EB EE F1 | 	byte	$bd, $c0, $c4, $c7, $cb, $cf, $d2, $d6, $d9, $dd, $e1, $e5, $e8, $eb, $ee, $f1
18aa2     F4 F7 F9 FB 
18aa6     FE 00 02 04 
18aaa     06 08 09 0B 
18aae     0C 0D 0E 0F | 	byte	$f4, $f7, $f9, $fb, $fe, $00, $02, $04, $06, $08, $09, $0b, $0c, $0d, $0e, $0f
18ab2     10 11 12 12 
18ab6     13 14 14 15 
18aba     15 16 16 16 
18abe     16 16 17 18 | 	byte	$10, $11, $12, $12, $13, $14, $14, $15, $15, $16, $16, $16, $16, $16, $17, $18
18ac2     18 19 19 19 
18ac6     1A 1A 1A 1B 
18aca     1B 1B 1B 1C 
18ace     1C 1D 1D 1D | 	byte	$18, $19, $19, $19, $1a, $1a, $1a, $1b, $1b, $1b, $1b, $1c, $1c, $1d, $1d, $1d
18ad2     1E 1E 1F 20 
18ad6     21 21 21 22 
18ada     23 23 24 25 
18ade     25 26 26 27 | 	byte	$1e, $1e, $1f, $20, $21, $21, $21, $22, $23, $23, $24, $25, $25, $26, $26, $27
18ae2     28 29 2A 2B 
18ae6     2A 2A 2A 29 
18aea     29 28 27 25 
18aee     24 21 1F 1C | 	byte	$28, $29, $2a, $2b, $2a, $2a, $2a, $29, $29, $28, $27, $25, $24, $21, $1f, $1c
18af2     19 15 11 0E 
18af6     09 05 FF FA 
18afa     F4 EE E8 E2 
18afe     DC D6 D1 CC | 	byte	$19, $15, $11, $0e, $09, $05, $ff, $fa, $f4, $ee, $e8, $e2, $dc, $d6, $d1, $cc
18b02     C7 C2 BE BB 
18b06     B7 B5 B3 B1 
18b0a     B1 B0 B1 B2 
18b0e     B3 B5 B7 B9 | 	byte	$c7, $c2, $be, $bb, $b7, $b5, $b3, $b1, $b1, $b0, $b1, $b2, $b3, $b5, $b7, $b9
18b12     BC BF C2 C5 
18b16     C9 CD D0 D4 
18b1a     D7 DB DE E2 
18b1e     E5 E8 EC EE | 	byte	$bc, $bf, $c2, $c5, $c9, $cd, $d0, $d4, $d7, $db, $de, $e2, $e5, $e8, $ec, $ee
18b22     F1 F4 F7 F9 
18b26     FB FE 00 03 
18b2a     04 06 08 0A 
18b2e     0B 0D 0E 0F | 	byte	$f1, $f4, $f7, $f9, $fb, $fe, $00, $03, $04, $06, $08, $0a, $0b, $0d, $0e, $0f
18b32     10 11 11 12 
18b36     14 14 15 15 
18b3a     16 17 17 18 
18b3e     18 19 1A 1A | 	byte	$10, $11, $11, $12, $14, $14, $15, $15, $16, $17, $17, $18, $18, $19, $1a, $1a
18b42     1B 1B 1B 1C 
18b46     1C 1C 1C 1D 
18b4a     1E 1E 1F 1F 
18b4e     1F 20 20 21 | 	byte	$1b, $1b, $1b, $1c, $1c, $1c, $1c, $1d, $1e, $1e, $1f, $1f, $1f, $20, $20, $21
18b52     21 22 22 23 
18b56     23 24 25 26 
18b5a     26 27 27 28 
18b5e     29 29 29 29 | 	byte	$21, $22, $22, $23, $23, $24, $25, $26, $26, $27, $27, $28, $29, $29, $29, $29
18b62     2A 2A 2A 2A 
18b66     2A          | 	byte	$2a[5]
18b67     29 29 28 27 
18b6b     26 25 23 21 
18b6f     1F 1C 1A 16 
18b73     13 0F 0A 06 | 	byte	$29, $29, $28, $27, $26, $25, $23, $21, $1f, $1c, $1a, $16, $13, $0f, $0a, $06
18b77     01 FC F7 F1 
18b7b     EB E5 E0 DA 
18b7f     D5 D0 CC C7 
18b83     C3 BF BB B9 | 	byte	$01, $fc, $f7, $f1, $eb, $e5, $e0, $da, $d5, $d0, $cc, $c7, $c3, $bf, $bb, $b9
18b87     B6 B4 B3 B2 
18b8b     B2 B2 B3 B4 
18b8f     B5 B8 BA BC 
18b93     BF C2 C5 C8 | 	byte	$b6, $b4, $b3, $b2, $b2, $b2, $b3, $b4, $b5, $b8, $ba, $bc, $bf, $c2, $c5, $c8
18b97     CC CF D2 D6 
18b9b     D9 DD DF E3 
18b9f     E6 E9 EC EF 
18ba3     F2 F5 F7 FA | 	byte	$cc, $cf, $d2, $d6, $d9, $dd, $df, $e3, $e6, $e9, $ec, $ef, $f2, $f5, $f7, $fa
18ba7     FC FF 01 03 
18bab     05 07 09 0A 
18baf     0C 0D 0E 10 
18bb3     11 12 13 14 | 	byte	$fc, $ff, $01, $03, $05, $07, $09, $0a, $0c, $0d, $0e, $10, $11, $12, $13, $14
18bb7     15 16 17 18 
18bbb     18 19 1A 1A 
18bbf     1B 1C 1C 1D 
18bc3     1F 1F 1F 1F | 	byte	$15, $16, $17, $18, $18, $19, $1a, $1a, $1b, $1c, $1c, $1d, $1f, $1f, $1f, $1f
18bc7     20 20 20 21 
18bcb     21 21 21 22 
18bcf     22 22 22 23 
18bd3     23 24 24 25 | 	byte	$20, $20, $20, $21, $21, $21, $21, $22, $22, $22, $22, $23, $23, $24, $24, $25
18bd7     25 26 26 27 
18bdb     27 28 28 28 
18bdf     29 29 2A 2A 
18be3     2A 29 2A 29 | 	byte	$25, $26, $26, $27, $27, $28, $28, $28, $29, $29, $2a, $2a, $2a, $29, $2a, $29
18be7     29 28 27 26 
18beb     24 23 21 1F 
18bef     1D 1A 17 14 
18bf3     10 0C 08 04 | 	byte	$29, $28, $27, $26, $24, $23, $21, $1f, $1d, $1a, $17, $14, $10, $0c, $08, $04
18bf7     FE FA F5 F0 
18bfb     EA E5 E0 DA 
18bff     D5 D1 CC C7 
18c03     C4 C0 BD BA | 	byte	$fe, $fa, $f5, $f0, $ea, $e5, $e0, $da, $d5, $d1, $cc, $c7, $c4, $c0, $bd, $ba
18c07     B8 B6 B5 B4 
18c0b     B4 B4 B4 B5 
18c0f     B6 B8 B9 BB 
18c13     BE C0 C3 C6 | 	byte	$b8, $b6, $b5, $b4, $b4, $b4, $b4, $b5, $b6, $b8, $b9, $bb, $be, $c0, $c3, $c6
18c17     C9 CC CF D3 
18c1b     D6 D9 DD E0 
18c1f     E3 E7 EA ED 
18c23     F0 F3 F5 F7 | 	byte	$c9, $cc, $cf, $d3, $d6, $d9, $dd, $e0, $e3, $e7, $ea, $ed, $f0, $f3, $f5, $f7
18c27     FA FC FF 01 
18c2b     03 05 07 09 
18c2f     0B 0C 0D 0F 
18c33     11 12 14 15 | 	byte	$fa, $fc, $ff, $01, $03, $05, $07, $09, $0b, $0c, $0d, $0f, $11, $12, $14, $15
18c37     16 17 18 18 
18c3b     19 1A 1B 1C 
18c3f     1C 1D 1E 1F 
18c43     1F 1F 20 21 | 	byte	$16, $17, $18, $18, $19, $1a, $1b, $1c, $1c, $1d, $1e, $1f, $1f, $1f, $20, $21
18c47     21 22 22 23 
18c4b     23 23 24 24 
18c4f     25 25 26 26 
18c53     27 27 28 28 | 	byte	$21, $22, $22, $23, $23, $23, $24, $24, $25, $25, $26, $26, $27, $27, $28, $28
18c57     29 29 29 29 
18c5b     2A 2A 2A 2B 
18c5f     2B 2B 2B 2B 
18c63     2B 2B 2A 29 | 	byte	$29, $29, $29, $29, $2a, $2a, $2a, $2b, $2b, $2b, $2b, $2b, $2b, $2b, $2a, $29
18c67     29 28 27 26 
18c6b     24 22 20 1E 
18c6f     1B 18 15 12 
18c73     0E 0B 07 03 | 	byte	$29, $28, $27, $26, $24, $22, $20, $1e, $1b, $18, $15, $12, $0e, $0b, $07, $03
18c77     FD F8 F4 EF 
18c7b     E9 E4 E0 DB 
18c7f     D7 D2 CE C9 
18c83     C5 C2 BF BC | 	byte	$fd, $f8, $f4, $ef, $e9, $e4, $e0, $db, $d7, $d2, $ce, $c9, $c5, $c2, $bf, $bc
18c87     BA B8 B6 B5 
18c8b     B5 B4 B5 B5 
18c8f     B6 B7 B9 BB 
18c93     BD BF C2 C5 | 	byte	$ba, $b8, $b6, $b5, $b5, $b4, $b5, $b5, $b6, $b7, $b9, $bb, $bd, $bf, $c2, $c5
18c97     C7 CA CD D1 
18c9b     D4 D7 DA DE 
18c9f     E1 E4 E7 EB 
18ca3     EF F2 F4 F6 | 	byte	$c7, $ca, $cd, $d1, $d4, $d7, $da, $de, $e1, $e4, $e7, $eb, $ef, $f2, $f4, $f6
18ca7     F9 FB FD 00 
18cab     02 04 06 07 
18caf     09 0A 0C 0D 
18cb3     0F 10 11 13 | 	byte	$f9, $fb, $fd, $00, $02, $04, $06, $07, $09, $0a, $0c, $0d, $0f, $10, $11, $13
18cb7     14 16 17 18 
18cbb     19 1A 1B 1C 
18cbf     1D 1E 1E 1F 
18cc3     20 20 21 22 | 	byte	$14, $16, $17, $18, $19, $1a, $1b, $1c, $1d, $1e, $1e, $1f, $20, $20, $21, $22
18cc7     22 23 24 24 
18ccb     25 25 25 26 
18ccf     26 27 28 28 
18cd3     29 29 29 2A | 	byte	$22, $23, $24, $24, $25, $25, $25, $26, $26, $27, $28, $28, $29, $29, $29, $2a
18cd7     2A 2A 2B 2B 
18cdb     2C 2C 2C 2C 
18cdf     2C 2C 2C 2B 
18ce3     2B 2A 2A 29 | 	byte	$2a, $2a, $2b, $2b, $2c, $2c, $2c, $2c, $2c, $2c, $2c, $2b, $2b, $2a, $2a, $29
18ce7     28 27 26 25 
18ceb     23 21 1F 1D 
18cef     1A 16 13 10 
18cf3     0C 09 05 01 | 	byte	$28, $27, $26, $25, $23, $21, $1f, $1d, $1a, $16, $13, $10, $0c, $09, $05, $01
18cf7     FC F8 F3 EE 
18cfb     E9 E5 E0 DB 
18cff     D7 D3 CF CB 
18d03     C7 C3 C0 BE | 	byte	$fc, $f8, $f3, $ee, $e9, $e5, $e0, $db, $d7, $d3, $cf, $cb, $c7, $c3, $c0, $be
18d07     BB B9 B8 B7 
18d0b     B6 B5 B5 B6 
18d0f     B7 B8 B9 BA 
18d13     BD BF C1 C4 | 	byte	$bb, $b9, $b8, $b7, $b6, $b5, $b5, $b6, $b7, $b8, $b9, $ba, $bd, $bf, $c1, $c4
18d17     C6 C9 CC CF 
18d1b     D2 D5 D8 DB 
18d1f     DF E2 E5 E8 
18d23     EB EE F1 F3 | 	byte	$c6, $c9, $cc, $cf, $d2, $d5, $d8, $db, $df, $e2, $e5, $e8, $eb, $ee, $f1, $f3
18d27     F6 F8 FB FD 
18d2b     00 02 04 06 
18d2f     08 0A 0C 0E 
18d33     10 11 12 14 | 	byte	$f6, $f8, $fb, $fd, $00, $02, $04, $06, $08, $0a, $0c, $0e, $10, $11, $12, $14
18d37     15 17 18 19 
18d3b     1A 1B 1C 1D 
18d3f     1E 1F 20 21 
18d43     21 22 23 23 | 	byte	$15, $17, $18, $19, $1a, $1b, $1c, $1d, $1e, $1f, $20, $21, $21, $22, $23, $23
18d47     25 25 26 26 
18d4b     27 27 28 28 
18d4f     29 29 2A 2B 
18d53     2B 2B 2C 2C | 	byte	$25, $25, $26, $26, $27, $27, $28, $28, $29, $29, $2a, $2b, $2b, $2b, $2c, $2c
18d57     2C 2C 2D 2D 
18d5b     2D 2D 2D 2D 
18d5f     2D 2D 2C 2C 
18d63     2B 2B 2A 29 | 	byte	$2c, $2c, $2d, $2d, $2d, $2d, $2d, $2d, $2d, $2d, $2c, $2c, $2b, $2b, $2a, $29
18d67     28 27 25 24 
18d6b     22 20 1D 1B 
18d6f     18 15 12 0E 
18d73     0B 07 03 FE | 	byte	$28, $27, $25, $24, $22, $20, $1d, $1b, $18, $15, $12, $0e, $0b, $07, $03, $fe
18d77     FA F6 F2 ED 
18d7b     E8 E3 DF DB 
18d7f     D7 D3 D0 CD 
18d83     C9 C5 C2 BF | 	byte	$fa, $f6, $f2, $ed, $e8, $e3, $df, $db, $d7, $d3, $d0, $cd, $c9, $c5, $c2, $bf
18d87     BE BB B9 B8 
18d8b     B7 B7 B7 B6 
18d8f     B7 B7 B8 BA 
18d93     BC BD C0 C2 | 	byte	$be, $bb, $b9, $b8, $b7, $b7, $b7, $b6, $b7, $b7, $b8, $ba, $bc, $bd, $c0, $c2
18d97     C5 C8 CA CD 
18d9b     D0 D3 D7 DA 
18d9f     DD E0 E3 E6 
18da3     E9 EC EF F1 | 	byte	$c5, $c8, $ca, $cd, $d0, $d3, $d7, $da, $dd, $e0, $e3, $e6, $e9, $ec, $ef, $f1
18da7     F4 F7 F9 FC 
18dab     FE 00 03 05 
18daf     07 09 0B 0D 
18db3     0F 11 12 13 | 	byte	$f4, $f7, $f9, $fc, $fe, $00, $03, $05, $07, $09, $0b, $0d, $0f, $11, $12, $13
18db7     15 17 18 19 
18dbb     1A 1B 1C 1E 
18dbf     1F 20 21 22 
18dc3     23 23 24 25 | 	byte	$15, $17, $18, $19, $1a, $1b, $1c, $1e, $1f, $20, $21, $22, $23, $23, $24, $25
18dc7     26 26 27 28 
18dcb     29 29 2A 2A 
18dcf     2A 2B 2B 2C 
18dd3     2D 2D 2D 2D | 	byte	$26, $26, $27, $28, $29, $29, $2a, $2a, $2a, $2b, $2b, $2c, $2d, $2d, $2d, $2d
18dd7     2E 2E 2E 2E 
18ddb     2E 2E 2E 2E 
18ddf     2E          | 	byte	$2e[9]
18de0     2D 2D 2C 2C 
18de4     2B 2A 28 27 
18de8     26 24 22 20 
18dec     1E 1C 19 16 | 	byte	$2d, $2d, $2c, $2c, $2b, $2a, $28, $27, $26, $24, $22, $20, $1e, $1c, $19, $16
18df0     13 10 0C 08 
18df4     05 01 FD F9 
18df8     F4 EF EB E6 
18dfc     E3 DE DA D6 | 	byte	$13, $10, $0c, $08, $05, $01, $fd, $f9, $f4, $ef, $eb, $e6, $e3, $de, $da, $d6
18e00     D2 CE CB C8 
18e04     C5 C2 BF BD 
18e08     BB BA B8 B8 
18e0c     B8 B8 B8 B9 | 	byte	$d2, $ce, $cb, $c8, $c5, $c2, $bf, $bd, $bb, $ba, $b8, $b8, $b8, $b8, $b8, $b9
18e10     B9 BA BC BD 
18e14     BF C1 C3 C6 
18e18     C8 CB CE D1 
18e1c     D3 D6 DA DD | 	byte	$b9, $ba, $bc, $bd, $bf, $c1, $c3, $c6, $c8, $cb, $ce, $d1, $d3, $d6, $da, $dd
18e20     E0 E2 E5 E8 
18e24     EB EE F1 F4 
18e28     F6 F9 FC FE 
18e2c     01 03 05 07 | 	byte	$e0, $e2, $e5, $e8, $eb, $ee, $f1, $f4, $f6, $f9, $fc, $fe, $01, $03, $05, $07
18e30     09 0B 0D 0F 
18e34     11 13 14 15 
18e38     17 18 1A 1B 
18e3c     1C 1E 1F 20 | 	byte	$09, $0b, $0d, $0f, $11, $13, $14, $15, $17, $18, $1a, $1b, $1c, $1e, $1f, $20
18e40     21 22 23 24 
18e44     25 26 27 28 
18e48     28 29 29 2A 
18e4c     2B 2B 2B 2C | 	byte	$21, $22, $23, $24, $25, $26, $27, $28, $28, $29, $29, $2a, $2b, $2b, $2b, $2c
18e50     2D 2D 2E 2E 
18e54     2E 2F 2F 2F 
18e58     2F 2F 2F 2F 
18e5c     2F 2F 2E 2E | 	byte	$2d, $2d, $2e, $2e, $2e, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2f, $2e, $2e
18e60     2E 2E 2E 2C 
18e64     2B 2A 29 27 
18e68     25 23 21 1F 
18e6c     1C 19 16 13 | 	byte	$2e, $2e, $2e, $2c, $2b, $2a, $29, $27, $25, $23, $21, $1f, $1c, $19, $16, $13
18e70     10 0C 09 05 
18e74     01 FD F9 F5 
18e78     F1 EC E8 E4 
18e7c     E0 DC D8 D4 | 	byte	$10, $0c, $09, $05, $01, $fd, $f9, $f5, $f1, $ec, $e8, $e4, $e0, $dc, $d8, $d4
18e80     D1 CD CA C7 
18e84     C4 C1 BF BD 
18e88     BC BA B9 B9 
18e8c     B9 B8 B8 B9 | 	byte	$d1, $cd, $ca, $c7, $c4, $c1, $bf, $bd, $bc, $ba, $b9, $b9, $b9, $b8, $b8, $b9
18e90     BA BB BC BD 
18e94     C0 C1 C3 C6 
18e98     C8 CB CE D0 
18e9c     D3 D6 D9 DC | 	byte	$ba, $bb, $bc, $bd, $c0, $c1, $c3, $c6, $c8, $cb, $ce, $d0, $d3, $d6, $d9, $dc
18ea0     DF E2 E5 E8 
18ea4     EA ED F0 F2 
18ea8     F6 F8 FB FE 
18eac     00 02 04 07 | 	byte	$df, $e2, $e5, $e8, $ea, $ed, $f0, $f2, $f6, $f8, $fb, $fe, $00, $02, $04, $07
18eb0                 | 	alignl
18eb0                 | _hng030rm_spin2_dat_
18eb0     00 00 00 00 
18eb4     00 00 00 00 
18eb8     00 00 00 00 
18ebc     00 00 00 00 
18ec0     00 00 00    | vga_font       file "vgafont.def"
18ec3     7E 81 A5 81 
18ec7     81 BD 99 81 
18ecb     81 7E 00 00 
18ecf     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
18ed3     7E FF DB FF 
18ed7     FF C3 E7 FF 
18edb     FF 7E 00 00 
18edf     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
18ee3     00 36 7F 7F 
18ee7     7F 7F 3E 1C 
18eeb     08 00 00 00 
18eef     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
18ef3     00 08 1C 3E 
18ef7     7F 3E 1C 08 
18efb     00 00 00 00 
18eff     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
18f03     18 3C 3C E7 
18f07     E7 E7 18 18 
18f0b     3C 00 00 00 
18f0f     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18f13     18 3C 7E FF 
18f17     FF 7E 18 18 
18f1b     3C 00 00 00 
18f1f     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
18f23     00 00 00 18 
18f27     3C 3C 18 00 
18f2b     00 00 00 00 
18f2f     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
18f33     FF FF FF E7 
18f37     C3 C3 E7 FF 
18f3b     FF FF FF FF 
18f3f     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
18f43     00 00 3C 66 
18f47     42 42 66 3C 
18f4b     00 00 00 00 
18f4f     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
18f53     FF FF C3 99 
18f57     BD BD 99 C3 
18f5b     FF FF FF FF 
18f5f     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
18f63     78 70 58 4C 
18f67     1E 33 33 33 
18f6b     33 1E 00 00 
18f6f     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
18f73     3C 66 66 66 
18f77     66 3C 18 7E 
18f7b     18 18 00 00 
18f7f     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
18f83     FC CC FC 0C 
18f87     0C 0C 0C 0E 
18f8b     0F 07 00 00 
18f8f     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
18f93     FE C6 FE C6 
18f97     C6 C6 C6 E6 
18f9b     E7 67 03 00 
18f9f     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
18fa3     18 18 DB 3C 
18fa7     E7 3C DB 18 
18fab     18 00 00 00 
18faf     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
18fb3     03 07 0F 1F 
18fb7     7F 1F 0F 07 
18fbb     03 01 00 00 
18fbf     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
18fc3     60 70 78 7C 
18fc7     7F 7C 78 70 
18fcb     60 40 00 00 
18fcf     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
18fd3     18 3C 7E 18 
18fd7     18 18 7E 3C 
18fdb     18 00 00 00 
18fdf     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
18fe3     66 66 66 66 
18fe7     66 66 66    | 	byte	$66[7]
18fea     00 66 66 00 
18fee     00 00 00 00 
18ff2     00 FE DB DB 
18ff6     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
18ffa     D8 D8 D8 00 
18ffe     00 00 00 3E 
19002     63 06 1C 36 
19006     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1900a     30 63 3E 00 
1900e     00 00 00 00 
19012     00 00 00 00 
19016     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1901a     7F 7F 7F 00 
1901e     00 00 00 00 
19022     00 18 3C 7E 
19026     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1902a     3C 18 7E 00 
1902e     00 00 00 00 
19032     00 18 3C 7E 
19036     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1903a     18 18 18 00 
1903e     00 00 00 00 
19042     00 18 18 18 
19046     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1904a     7E 3C 18 00 
1904e     00 00 00 00 
19052     00 00 00 18 
19056     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1905a     00 00 00 00 
1905e     00 00 00 00 
19062     00 00 00    | 	byte	$00[11]
19065     0C 06 7F 06 
19069     0C 00 00 00 
1906d     00 00 00 00 
19071     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19075     00 03 03 03 
19079     7F 00 00 00 
1907d     00 00 00 00 
19081     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19085     14 36 7F 36 
19089     14 00 00 00 
1908d     00 00 00 00 
19091     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
19095     1C 1C 3E 3E 
19099     7F 7F 00 00 
1909d     00 00 00 00 
190a1     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
190a5     7F 3E 3E 1C 
190a9     1C 08 00 00 
190ad     00 00 00 00 
190b1     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
190b5     00 00 00 00 
190b9     00 00 00 00 
190bd     00 00 00 00 
190c1     00 00       | 	byte	$00[14]
190c3     18 3C 3C 3C 
190c7     18 18 18 00 
190cb     18 18 00 00 
190cf     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
190d3     66 24 00 00 
190d7     00 00 00 00 
190db     00 00 00 00 
190df     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
190e3     00 36 36 7F 
190e7     36 36 36 7F 
190eb     36 36 00 00 
190ef     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
190f3     3E 63 43 03 
190f7     3E 60 60 61 
190fb     63 3E 18 18 
190ff     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
19103     00 00 43 63 
19107     30 18 0C 06 
1910b     63 61 00 00 
1910f     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
19113     1C 36 36 1C 
19117     6E 3B 33 33 
1911b     33 6E 00 00 
1911f     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
19123     0C 0C 0C 06 
19127     00 00 00 00 
1912b     00 00 00 00 
1912f     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19133     30 18 0C 0C 
19137     0C 0C 0C 0C 
1913b     18 30 00 00 
1913f     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
19143     0C 18 30 30 
19147     30 30 30 30 
1914b     18 0C 00 00 
1914f     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
19153     00 00 00 66 
19157     3C FF 3C 66 
1915b     00 00 00 00 
1915f     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
19163     00 00 00 18 
19167     18 7E 18 18 
1916b     00 00 00 00 
1916f     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
19173     00 00 00 00 
19177     00 00 00 00 | 	byte	$00[8]
1917b     18 18 18 0C 
1917f     00 00 00 00 
19183     00 00 00 00 
19187     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1918b     00 00 00 00 
1918f     00 00 00 00 
19193     00 00 00 00 
19197     00 00 00 00 | 	byte	$00[16]
1919b     18 18 00 00 
1919f     00 00 00 00 
191a3     00 00 40 60 
191a7     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
191ab     03 01 00 00 
191af     00 00 00 00 
191b3     1C 36 63 63 
191b7     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
191bb     36 1C 00 00 
191bf     00 00 00 00 
191c3     18 1C 1E 18 
191c7     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
191cb     18 7E 00 00 
191cf     00 00 00 00 
191d3     3E 63 60 30 
191d7     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
191db     63 7F 00 00 
191df     00 00 00 00 
191e3     3E 63 60 60 
191e7     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
191eb     63 3E 00 00 
191ef     00 00 00 00 
191f3     30 38 3C 36 
191f7     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
191fb     30 78 00 00 
191ff     00 00 00 00 
19203     7F 03 03 03 
19207     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1920b     63 3E 00 00 
1920f     00 00 00 00 
19213     1C 06 03 03 
19217     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1921b     63 3E 00 00 
1921f     00 00 00 00 
19223     7F 63 60 60 
19227     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1922b     0C 0C 00 00 
1922f     00 00 00 00 
19233     3E 63 63 63 
19237     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1923b     63 3E 00 00 
1923f     00 00 00 00 
19243     3E 63 63 63 
19247     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1924b     30 1E 00 00 
1924f     00 00 00 00 
19253     00 00 00 18 
19257     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1925b     18 18 00 00 
1925f     00 00 00 00 
19263     00 00 00 18 
19267     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1926b     18 18 0C 00 
1926f     00 00 00 00 
19273     00 60 30 18 
19277     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1927b     30 60 00 00 
1927f     00 00 00 00 
19283     00 00 00 7E 
19287     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1928b     00 00 00 00 
1928f     00 00 00 00 
19293     00          | 	byte	$00[9]
19294     06 0C 18 30 
19298     60 30 18 0C 
1929c     06 00 00 00 
192a0     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
192a4     63 63 30 18 
192a8     18 18 00 18 
192ac     18 00 00 00 
192b0     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
192b4     3E 63 63 7B 
192b8     7B 7B 3B 03 
192bc     3E 00 00 00 
192c0     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
192c4     1C 36 63 63 
192c8     7F 63 63 63 
192cc     63 00 00 00 
192d0     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
192d4     66 66 66 3E 
192d8     66 66 66 66 
192dc     3F 00 00 00 
192e0     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
192e4     66 43 03 03 
192e8     03 03 43 66 
192ec     3C 00 00 00 
192f0     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
192f4     36 66 66 66 
192f8     66 66 66 36 
192fc     1F 00 00 00 
19300     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
19304     66 46 16 1E 
19308     16 06 46 66 
1930c     7F 00 00 00 
19310     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
19314     66 46 16 1E 
19318     16 06 06 06 
1931c     0F 00 00 00 
19320     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
19324     66 43 03 03 
19328     7B 63 63 66 
1932c     5C 00 00 00 
19330     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
19334     63 63 63 7F 
19338     63 63 63 63 
1933c     63 00 00 00 
19340     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
19344     18 18 18 18 
19348     18 18 18 18 | 	byte	$18[8]
1934c     3C 00 00 00 
19350     00 00 00 78 
19354     30 30 30 30 
19358     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1935c     1E 00 00 00 
19360     00 00 00 67 
19364     66 66 36 1E 
19368     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1936c     67 00 00 00 
19370     00 00 00 0F 
19374     06 06 06 06 
19378     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1937c     7F 00 00 00 
19380     00 00 00 63 
19384     77 7F 7F 6B 
19388     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1938c     63 00 00 00 
19390     00 00 00 63 
19394     67 6F 7F 7B 
19398     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1939c     63 00 00 00 
193a0     00 00 00 3E 
193a4     63 63 63 63 
193a8     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
193ac     3E 00 00 00 
193b0     00 00 00 3F 
193b4     66 66 66 3E 
193b8     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
193bc     0F 00 00 00 
193c0     00 00 00 3E 
193c4     63 63 63 63 
193c8     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
193cc     3E 30 70 00 
193d0     00 00 00 3F 
193d4     66 66 66 3E 
193d8     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
193dc     67 00 00 00 
193e0     00 00 00 3E 
193e4     63 63 06 1C 
193e8     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
193ec     3E 00 00 00 
193f0     00 00 00 7E 
193f4     7E 5A 18 18 
193f8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
193fc     3C 00 00 00 
19400     00 00 00 63 
19404     63 63 63 63 
19408     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1940c     3E 00 00 00 
19410     00 00 00 63 
19414     63 63 63 63 
19418     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1941c     08 00 00 00 
19420     00 00 00 63 
19424     63 63 63 6B 
19428     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1942c     36 00 00 00 
19430     00 00 00 63 
19434     63 36 3E 1C 
19438     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1943c     63 00 00 00 
19440     00 00 00 66 
19444     66 66 66 3C 
19448     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1944c     3C 00 00 00 
19450     00 00 00 7F 
19454     63 61 30 18 
19458     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1945c     7F 00 00 00 
19460     00 00 00 3C 
19464     0C 0C 0C 0C 
19468     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1946c     3C 00 00 00 
19470     00 00 00 00 
19474     01 03 07 0E 
19478     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1947c     40 00 00 00 
19480     00 00 00 3C 
19484     30 30 30 30 
19488     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1948c     3C 00 00 00 
19490     1C 36 00 00 
19494     00 00 00 00 
19498     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1949c     00 00 00 00 
194a0     00 00 00 00 
194a4     00 00 00 00 
194a8     00 00 00 00 
194ac     00          | 	byte	$00[17]
194ad     FF 00 00 0C 
194b1     18 00 00 00 
194b5     00 00 00 00 
194b9     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
194bd     00 00 00 00 
194c1     00 00 00 00 
194c5     00          | 	byte	$00[9]
194c6     1E 30 3E 33 
194ca     33 33 6E 00 
194ce     00 00 00 00 
194d2     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
194d6     1E 36 66 66 
194da     66 66 3E 00 
194de     00 00 00 00 
194e2     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
194e6     3E 63 03 03 
194ea     03 63 3E 00 
194ee     00 00 00 00 
194f2     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
194f6     3C 36 33 33 
194fa     33 33 6E 00 
194fe     00 00 00 00 
19502     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
19506     3E 63 7F 03 
1950a     03 63 3E 00 
1950e     00 00 00 00 
19512     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
19516     0C 1E 0C 0C 
1951a     0C 0C 1E 00 
1951e     00 00 00 00 
19522     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
19526     6E 33 33 33 
1952a     33 33 3E 30 
1952e     33 1E 00 00 
19532     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
19536     36 6E 66 66 
1953a     66 66 67 00 
1953e     00 00 00 00 
19542     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
19546     1C 18 18 18 
1954a     18 18 3C 00 
1954e     00 00 00 00 
19552     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
19556     70 60 60 60 
1955a     60 60 60 66 
1955e     66 3C 00 00 
19562     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
19566     66 36 1E 1E 
1956a     36 66 67 00 
1956e     00 00 00 00 
19572     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
19576     18 18 18 18 
1957a     18 18       | 	byte	$18[6]
1957c     3C 00 00 00 
19580     00 00 00 00 
19584     00 00 37 7F 
19588     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1958c     63 00 00 00 
19590     00 00 00 00 
19594     00 00 3B 66 
19598     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1959c     66 00 00 00 
195a0     00 00 00 00 
195a4     00 00 3E 63 
195a8     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
195ac     3E 00 00 00 
195b0     00 00 00 00 
195b4     00 00 3B 66 
195b8     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
195bc     3E 06 06 0F 
195c0     00 00 00 00 
195c4     00 00 6E 33 
195c8     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
195cc     3E 30 30 78 
195d0     00 00 00 00 
195d4     00 00 3B 6E 
195d8     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
195dc     0F 00 00 00 
195e0     00 00 00 00 
195e4     00 00 3E 63 
195e8     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
195ec     3E 00 00 00 
195f0     00 00 00 08 
195f4     0C 0C 3F 0C 
195f8     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
195fc     38 00 00 00 
19600     00 00 00 00 
19604     00 00 33 33 
19608     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1960c     6E 00 00 00 
19610     00 00 00 00 
19614     00 00 63 63 
19618     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1961c     1C 00 00 00 
19620     00 00 00 00 
19624     00 00 63 63 
19628     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1962c     36 00 00 00 
19630     00 00 00 00 
19634     00 00 63 36 
19638     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1963c     63 00 00 00 
19640     00 00 00 00 
19644     00 00 63 63 
19648     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1964c     7E 60 30 1F 
19650     00 00 00 00 
19654     00 00 7F 33 
19658     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1965c     7F 00 00 00 
19660     00 00 00 70 
19664     18 18 18 0E 
19668     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1966c     70 00 00 00 
19670     00 00 00 18 
19674     18 18 18 18 
19678     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1967c     18 00 00 00 
19680     00 00 00 0E 
19684     18 18 18 70 
19688     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1968c     0E 00 00 00 
19690     6E 3B 00 00 
19694     00 00 00 00 
19698     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1969c     00 00 00 00 
196a0     00 00 00 00 
196a4     00 00       | 	byte	$00[10]
196a6     08 1C 36 63 
196aa     63 63 7F 00 
196ae     00 00 00 00 
196b2     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
196b6     03 03 03 03 
196ba     43 66 3C 18 
196be     30 1E 00 00 
196c2     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
196c6     33 33 33 33 
196ca     33 33       | 	byte	$33[6]
196cc     6E 00 00 00 
196d0     00 00 60 30 
196d4     18 00 3E 63 
196d8     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
196dc     3E 00 00 00 
196e0     00 00 08 1C 
196e4     36 00 1E 30 
196e8     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
196ec     6E 00 00 00 
196f0     00 00 00 00 
196f4     33 00 1E 30 
196f8     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
196fc     6E 00 00 00 
19700     00 00 1C 36 
19704     1C 00 33 33 
19708     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1970c     6E 00 00 00 
19710     00 00 60 30 
19714     18 00 3E 63 
19718     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1971c     3E 00 00 00 
19720     00 00 00 00 
19724     00 00 3E 63 
19728     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1972c     3E 18 30 1E 
19730     00 00 00 1C 
19734     58 78 38 18 
19738     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1973c     3C 00 00 00 
19740     00 00 00 00 
19744     63 00 3E 63 
19748     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1974c     3E 00 00 00 
19750     66 33 00 3E 
19754     63 63 63 63 
19758     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1975c     3E 00 00 00 
19760     00 00 CC 66 
19764     33 00 3E 63 
19768     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1976c     3E 00 00 00 
19770     00 00 18 3C 
19774     66 00 1C 18 
19778     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1977c     3C 00 00 00 
19780     30 18 00 7F 
19784     63 61 30 18 
19788     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1978c     7F 00 00 00 
19790     00 63 00 08 
19794     1C 36 63 63 
19798     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1979c     63 00 00 00 
197a0     30 18 00 3C 
197a4     66 43 03 03 
197a8     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
197ac     3C 00 00 00 
197b0     30 18 00 7F 
197b4     66 46 16 1E 
197b8     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
197bc     7F 00 00 00 
197c0     0C 06 00 0F 
197c4     06 06 06 06 
197c8     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
197cc     7F 00 00 00 
197d0     30 18 00 1C 
197d4     18 18 18 18 
197d8     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
197dc     3C 00 00 00 
197e0     00 00 08 1C 
197e4     36 00 3E 63 
197e8     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
197ec     3E 00 00 00 
197f0     00 00 00 00 
197f4     63 00 3E 63 
197f8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
197fc     3E 00 00 00 
19800     00 00 00 6F 
19804     46 26 06 06 
19808     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1980c     7F 00 00 00 
19810     00 00 00 6E 
19814     4C 2C 0C 0C 
19818     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1981c     1E 00 00 00 
19820     30 18 00 3E 
19824     63 63 06 1C 
19828     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1982c     3E 00 00 00 
19830     00 00 60 30 
19834     18 00 3E 63 
19838     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1983c     3E 00 00 00 
19840     00 63 00 3E 
19844     63 63 63 63 
19848     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1984c     3E 00 00 00 
19850     00 63 00 63 
19854     63 63 63 63 
19858     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1985c     3E 00 00 00 
19860     6C 38 00 7E 
19864     7E 5A 18 18 
19868     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1986c     3C 00 00 00 
19870     00 00 60 48 
19874     2C 0C 3F 0C 
19878     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1987c     38 00 00 00 
19880     00 00 00 0F 
19884     26 36 1E 0E 
19888     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1988c     7F 00 00 00 
19890     00 00 00 00 
19894     00 63 36 1C 
19898     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
1989c     00 00 00 00 
198a0     00 00       | 	byte	$00[6]
198a2     36 1C 08 00 
198a6     3E 63 03 03 
198aa     03 63 3E 00 
198ae     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
198b2     30 18 0C 00 
198b6     1E 30 3E 33 
198ba     33 33 6E 00 
198be     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
198c2     60 30 18 00 
198c6     1C 18 18 18 
198ca     18 18 3C 00 
198ce     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
198d2     60 30 18 00 
198d6     3E 63 63 63 
198da     63 63 3E 00 
198de     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
198e2     30 18 0C 00 
198e6     33 33 33 33 
198ea     33 33 6E 00 
198ee     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
198f2     00 08 1C 36 
198f6     63 63 7F 63 
198fa     63 63 63 18 
198fe     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
19902     00 00 00 00 
19906     1E 30 3E 33 
1990a     33 33 6E 18 
1990e     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
19912     00 7F 63 61 
19916     30 18 0C 06 
1991a     43 63 7F 00 
1991e     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
19922     36 1C 08 00 
19926     7F 33 18 0C 
1992a     06 63 7F 00 
1992e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
19932     00 7F 66 46 
19936     16 1E 16 06 
1993a     46 66 7F 18 
1993e     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
19942     00 00 00 00 
19946     3E 63 7F 03 
1994a     03 63 3E 18 
1994e     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
19952     00 3C 66 03 
19956     1F 03 0F 03 
1995a     03 66 3C 00 
1995e     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
19962     60 30 18 00 
19966     7F 33 18 0C 
1996a     06 63 7F 00 
1996e     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
19972     00 3C 66 43 
19976     03 03 03 03 
1997a     43 66 3C 00 
1997e     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
19982     00 00 00 00 
19986     3E 63 06 1C 
1998a     30 63 3E 18 
1998e     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
19992     00 00 00 00 
19996     00 00       | 	byte	$00[6]
19998     6C 36 1B 36 
1999c     6C 00 00 00 
199a0     00 00 00 00 
199a4     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
199a8     1B 36 6C 36 
199ac     1B 00 00 00 
199b0     88 22 88 22 
199b4     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
199b8     88 22 88 22 
199bc     88 22 88 22 
199c0     AA 55 AA 55 
199c4     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
199c8     AA 55 AA 55 
199cc     AA 55 AA 55 
199d0     BB EE BB EE 
199d4     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
199d8     BB EE BB EE 
199dc     BB EE BB EE 
199e0     18 18 18 18 
199e4     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
199e8     18 18 18 18 
199ec     18 18 18 18 
199f0     18 18 18 18 
199f4     18 18 18    | 	byte	$18[15]
199f7     1F 18 18 18 
199fb     18 18 18 18 
199ff     18 30 18 00 
19a03     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
19a07     63 7F 63 63 
19a0b     63 63 00 00 
19a0f     00 1C 36 00 
19a13     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
19a17     63 7F 63 63 
19a1b     63 63 00 00 
19a1f     00 36 1C 00 
19a23     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
19a27     1E 16 06 46 
19a2b     66 7F 00 00 
19a2f     00 00 00 00 
19a33     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
19a37     1C 30 60 63 
19a3b     63 3E 18 30 
19a3f     1E 6C 6C 6C 
19a43     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
19a47     6F 6C 6C 6C 
19a4b     6C 6C 6C 6C 
19a4f     6C 6C 6C 6C 
19a53     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19a57     6C 6C 6C 6C 
19a5b     6C 6C 6C 6C 
19a5f     6C          | 	byte	$6c[9]
19a60     00 00 00 00 
19a64     00          | 	byte	$00[5]
19a65     7F 60 6F 6C 
19a69     6C 6C 6C 6C 
19a6d     6C 6C 6C 6C 
19a71     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19a75     6F 60 7F 00 
19a79     00 00 00 00 
19a7d     00 00 00 18 
19a81     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
19a85     61 30 18 0C 
19a89     06 43 63 7F 
19a8d     00 00 00 00 
19a91     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
19a95     00 7F 33 18 
19a99     0C 06 63 7F 
19a9d     00 00 00 00 
19aa1     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
19aa5     00 00 1F 18 
19aa9     18 18 18 18 
19aad     18 18 18 18 
19ab1     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19ab5     18 18 F8 00 
19ab9     00 00 00 00 
19abd     00 00 00 18 
19ac1     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19ac5     18 18 FF 00 
19ac9     00 00 00 00 
19acd     00 00 00 00 
19ad1     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19ad5     00 00 FF 18 
19ad9     18 18 18 18 
19add     18 18 18 18 
19ae1     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19ae5     18 18 F8 18 
19ae9     18 18 18 18 
19aed     18 18 18 00 
19af1     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
19af5     00 00 FF 00 
19af9     00 00 00 00 
19afd     00 00 00 18 
19b01     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
19b05     18 18 FF 18 
19b09     18 18 18 18 
19b0d     18 18 18 63 
19b11     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
19b15     36 63 63 7F 
19b19     63 63 63 63 
19b1d     00 00 00 00 
19b21     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
19b25     00 1E 30 3E 
19b29     33 33 33 6E 
19b2d     00 00 00 6C 
19b31     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19b35     EC 0C FC 00 
19b39     00 00 00 00 
19b3d     00 00 00 00 
19b41     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19b45     FC 0C EC 6C 
19b49     6C 6C 6C 6C 
19b4d     6C 6C 6C 6C 
19b51     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19b55     EF 00 FF 00 
19b59     00 00 00 00 
19b5d     00 00 00 00 
19b61     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19b65     FF 00 EF 6C 
19b69     6C 6C 6C 6C 
19b6d     6C 6C 6C 6C 
19b71     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
19b75     EC 0C EC 6C 
19b79     6C 6C 6C 6C 
19b7d     6C 6C 6C 00 
19b81     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19b85     FF 00 FF 00 
19b89     00 00 00 00 
19b8d     00 00 00 6C 
19b91     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
19b95     EF 00 EF 6C 
19b99     6C 6C 6C 6C 
19b9d     6C 6C 6C 00 
19ba1     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
19ba5     63 3E 63 63 
19ba9     63 63 3E 63 
19bad     00 00 00 00 
19bb1     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
19bb5     30 3C 36 33 
19bb9     33 33 33 6E 
19bbd     00 00 00 00 
19bc1     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
19bc5     66 66 6F 66 
19bc9     66 66 36 1F 
19bcd     00 00 00 36 
19bd1     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
19bd5     66 66 66 66 
19bd9     66 66       | 	byte	$66[6]
19bdb     36 1F 00 00 
19bdf     00 00 63 00 
19be3     7F 66 46 16 
19be7     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
19beb     66 7F 00 00 
19bef     00 6C 38 00 
19bf3     38 30 30 3C 
19bf7     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
19bfb     33 6E 00 00 
19bff     00 36 1C 00 
19c03     63 67 6F 7F 
19c07     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
19c0b     63 63 00 00 
19c0f     00 30 18 00 
19c13     3C 18 18 18 
19c17     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19c1b     18 3C 00 00 
19c1f     00 3C 66 00 
19c23     3C 18 18 18 
19c27     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
19c2b     18 3C 00 00 
19c2f     00 00 00 36 
19c33     1C 08 00 3E 
19c37     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
19c3b     63 3E 00 00 
19c3f     00 18 18 18 
19c43     18 18 18 18 
19c47     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
19c4b     00 00 00 00 
19c4f     00 00 00 00 
19c53     00 00 00 00 | 	byte	$00[12]
19c57     F8 18 18 18 
19c5b     18 18 18 18 
19c5f     18 FF FF FF 
19c63     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
19c67     FF FF FF FF 
19c6b     FF FF FF FF 
19c6f     FF          | 	byte	$ff[9]
19c70     00 00 00 00 
19c74     00 00 00    | 	byte	$00[7]
19c77     FF FF FF FF 
19c7b     FF FF FF FF 
19c7f     FF          | 	byte	$ff[9]
19c80     00 00 00 7E 
19c84     7E 5A 18 18 
19c88     18 18 18 18 
19c8c     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
19c90     1C 36 1C 63 
19c94     63 63 63 63 
19c98     63 63 63 63 
19c9c     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19ca0     FF FF FF FF 
19ca4     FF FF FF    | 	byte	$ff[7]
19ca7     00 00 00 00 
19cab     00 00 00 00 
19caf     00          | 	byte	$00[9]
19cb0     30 18 00 3E 
19cb4     63 63 63 63 
19cb8     63 63 63 63 
19cbc     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19cc0     00 00 00 1E 
19cc4     33 33 33 1B 
19cc8     33 63 63 63 
19ccc     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
19cd0     1C 36 00 3E 
19cd4     63 63 63 63 
19cd8     63 63 63 63 
19cdc     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19ce0     30 18 00 63 
19ce4     67 6F 7F 7B 
19ce8     73 63 63 63 
19cec     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
19cf0     00 00 60 30 
19cf4     18 00 3B 66 
19cf8     66 66 66 66 
19cfc     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19d00     00 00 36 1C 
19d04     08 00 3B 66 
19d08     66 66 66 66 
19d0c     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
19d10     36 1C 00 3E 
19d14     63 63 06 1C 
19d18     30 60 63 63 
19d1c     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
19d20     00 00 36 1C 
19d24     08 00 3E 63 
19d28     06 1C 30 63 
19d2c     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
19d30     30 18 00 3F 
19d34     66 66 66 3E 
19d38     36 66 66 66 
19d3c     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
19d40     30 18 00 63 
19d44     63 63 63 63 
19d48     63 63 63 63 
19d4c     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19d50     00 00 60 30 
19d54     18 00 3B 6E 
19d58     66 06 06 06 
19d5c     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
19d60     66 33 00 63 
19d64     63 63 63 63 
19d68     63 63 63 63 
19d6c     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
19d70     00 00 60 30 
19d74     18 00 63 63 
19d78     63 63 63 63 
19d7c     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
19d80     30 18 00 66 
19d84     66 66 66 3C 
19d88     18 18 18 18 
19d8c     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
19d90     00 00 00 08 
19d94     0C 0C 3F 0C 
19d98     0C 0C 0C 6C 
19d9c     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
19da0     30 18 00 00 
19da4     00 00 00 00 
19da8     00 00 00 00 
19dac     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19db0     00 00 00 00 
19db4     00 00 00 00 | 	byte	$00[8]
19db8     7F 00 00 00 
19dbc     00 00 00 00 
19dc0     66 33 00 00 
19dc4     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
19dc8     00 00 00 00 
19dcc     00 00 00 00 
19dd0     00 00 00 00 
19dd4     00 00 00 00 
19dd8     00 00 00 00 
19ddc     00          | 	byte	$00[21]
19ddd     0C 06 3C 36 
19de1     1C 00 00 00 
19de5     00 00 00 00 
19de9     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19ded     00 00 00 63 
19df1     3E 00 00 00 
19df5     00 00 00 00 
19df9     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19dfd     00 00 00 00 
19e01     3E 63 06 1C 
19e05     36 63 63 36 
19e09     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
19e0d     00 00 00 00 
19e11     00 00 00 00 | 	byte	$00[8]
19e15     18 00 7E 00 
19e19     18 00 00 00 
19e1d     00 00 00 00 
19e21     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e25     00 00 00 00 
19e29     00 00 00 00 | 	byte	$00[8]
19e2d     18 30 1E 00 
19e31     00 00 1C 36 
19e35     36 1C 00 00 
19e39     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
19e3d     00 00 00 00 
19e41     63 00 00 00 
19e45     00 00 00 00 
19e49     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e4d     00 00 00 18 
19e51     18 00 00 00 
19e55     00 00 00 00 
19e59     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19e5d     00 00 00 00 
19e61     00          | 	byte	$00[5]
19e62     CC 66 33 00 
19e66     33 33 33 33 
19e6a     33 33 6E 00 
19e6e     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
19e72     00 3F 66 66 
19e76     66 3E 36 66 
19e7a     66 66 6F 00 
19e7e     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
19e82     36 1C 08 00 
19e86     3B 6E 66 06 
19e8a     06 06 0F 00 
19e8e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
19e92     00 00 00 7E 
19e96     7E 7E 7E 7E 
19e9a     7E 7E 00 00 
19e9e     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
19ea2     00 00 00 00 
19ea6     00 00 00 00 
19eaa     00 00 00 00 
19eae     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
19eb0     00 00 00 00 
      ...             
19ee0     00 00 00 00 
19ee4     00 00 00    | st_font        file "st4font.def"
19ee7     FF FF 00 00 
19eeb     00 00 00 00 
19eef     00 18 18 18 
19ef3     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19ef7     18 18 18 18 
19efb     18 18 18 18 
19eff     18          | 	byte	$18[9]
19f00     00 00 00 00 
19f04     00 00 00    | 	byte	$00[7]
19f07     FF FF 18 18 
19f0b     18 18 18 18 
19f0f     18 18 18 18 
19f13     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19f17     FF FF 00 00 
19f1b     00 00 00 00 
19f1f     00 18 18 18 
19f23     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19f27     1F 1F 18 18 
19f2b     18 18 18 18 
19f2f     18 18 18 18 
19f33     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19f37     F8 F8 18 18 
19f3b     18 18 18 18 
19f3f     18 00 00 00 
19f43     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19f47     1F 1F 18 18 
19f4b     18 18 18 18 
19f4f     18 00 00 00 
19f53     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
19f57     F8 F8 18 18 
19f5b     18 18 18 18 
19f5f     18 18 18 18 
19f63     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
19f67     1F 1F 00 00 
19f6b     00 00 00 00 
19f6f     00 18 18 18 
19f73     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19f77     F8 F8 00 00 
19f7b     00 00 00 00 
19f7f     00 18 18 18 
19f83     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
19f87     FF FF 18 18 
19f8b     18 18 18 18 
19f8f     18 00 00 18 
19f93     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
19f97     66 7E 7E 66 
19f9b     66 66 66 30 
19f9f     18 00 00 7E 
19fa3     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
19fa7     3E 06 06 06 
19fab     06 7E 7E 18 
19faf     0C 30 18 3C 
19fb3     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
19fb7     06 06 06 66 
19fbb     66 7E 3C 00 
19fbf     00 30 18 66 
19fc3     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
19fc7     7E 7E 76 76 
19fcb     66 66 66 00 
19fcf     00 30 18 7C 
19fd3     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
19fd7     1C 38 70 60 
19fdb     60 7E 3E 00 
19fdf     00 30 18 7E 
19fe3     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
19fe7     18 0C 0C 06 
19feb     06 7E 7E 00 
19fef     00 18 18 00 
19ff3     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
19ff7     18 18 0C 0C 
19ffb     06 7E 7E 00 
19fff     00 30 18 3C 
1a003     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1a007     66 66 66 66 
1a00b     66          | 	byte	$66[5]
1a00c     7E 3C 00 00 
1a010     00 00 06 06 
1a014     06 06 16 1E 
1a018     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1a01c     7E 7E 00 00 
1a020     00 00 00 00 
1a024     00 3C 7C 60 
1a028     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1a02c     7E 7C 30 18 
1a030     00 00 00 00 
1a034     00 3C 7E 66 
1a038     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1a03c     7E 7C 18 0C 
1a040     00 00 30 18 
1a044     00 3C 3E 06 
1a048     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1a04c     7E 7C 00 00 
1a050     00 00 30 18 
1a054     00 3E 7E 66 
1a058     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1a05c     66 66 00 00 
1a060     00 00 30 18 
1a064     00 7C 7E 06 
1a068     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1a06c     7E 3E 00 00 
1a070     00 00 30 18 
1a074     00 7E 7E 30 
1a078     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a07c     7E 7E 00 00 
1a080     00 00 18 18 
1a084     00 7E 7E 30 
1a088     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a08c     7E 7E 00 00 
1a090     00 00 30 18 
1a094     00 3C 7E 66 
1a098     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1a09c     7E 3C 00 00 
1a0a0     00 00 1C 1C 
1a0a4     18 18 38 3C 
1a0a8     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1a0ac     3C 3C 00 00 
1a0b0     00 00 00 00 
1a0b4     00 00 00 00 
1a0b8     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1a0bc     00 00 00 00 
1a0c0     00 00       | 	byte	$00[6]
1a0c2     18 18 18 18 
1a0c6     18 18 18 18 | 	byte	$18[8]
1a0ca     00 00 18 18 
1a0ce     00 00 00 00 
1a0d2     66 66 66 66 
1a0d6     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1a0da     00 00 00 00 
1a0de     00 00 00 00 
1a0e2     00          | 	byte	$00[9]
1a0e3     66 66 FF FF 
1a0e7     66 66 FF FF 
1a0eb     66 66 00 00 
1a0ef     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1a0f3     7C 7E 06 06 
1a0f7     3E 7C 60 60 
1a0fb     7E 3E 18 18 
1a0ff     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1a103     66 30 30 18 
1a107     18 0C 0C 66 
1a10b     66 00 00 00 
1a10f     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1a113     66 66 3C 1C 
1a117     1C FC FE 66 
1a11b     66 FE FC 00 
1a11f     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1a123     18 18 18 18 
1a127     00 00 00 00 
1a12b     00 00 00 00 
1a12f     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1a133     18 1C 0C 0C 
1a137     0C 0C 0C 0C 
1a13b     1C 18 30 00 
1a13f     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1a143     18 38 30 30 
1a147     30 30 30 30 
1a14b     38 18 0C 00 
1a14f     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1a153     66 66 3C 3C 
1a157     FF FF 3C 3C 
1a15b     66 66 00 00 
1a15f     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1a163     00 18 18 18 
1a167     7E 7E 18 18 
1a16b     18 00 00 00 
1a16f     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a173     00 00 00 00 
1a177     00 00       | 	byte	$00[6]
1a179     18 18 18 18 
1a17d     18          | 	byte	$18[5]
1a17e     0C 04 00 00 
1a182     00 00 00 00 
1a186     7E 7E 00 00 
1a18a     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1a18e     00 00 00 00 
1a192     00 00 00 00 
1a196     00 00 00 00 
1a19a     00          | 	byte	$00[13]
1a19b     18 18 18 00 
1a19f     00 00 00 60 
1a1a3     60 60 30 30 
1a1a7     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1a1ab     06 06 06 00 
1a1af     00 00 00 3C 
1a1b3     7E 66 66 66 
1a1b7     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1a1bb     66 7E 3C 00 
1a1bf     00 00 00 18 
1a1c3     18 1C 1C 18 
1a1c7     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1a1cb     18 7E 7E 00 
1a1cf     00 00 00 3C 
1a1d3     7E 66 66 30 
1a1d7     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1a1db     0C 7E 7E 00 
1a1df     00 00 00 7E 
1a1e3     7E 30 30 18 
1a1e7     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1a1eb     66 7E 3C 00 
1a1ef     00 00 00 30 
1a1f3     30 38 38 3C 
1a1f7     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1a1fb     7E 30 30 00 
1a1ff     00 00 00 7E 
1a203     7E 06 06 3E 
1a207     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1a20b     66 7E 3C 00 
1a20f     00 00 00 38 
1a213     3C 0E 06 06 
1a217     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1a21b     66 7E 3C 00 
1a21f     00 00 00 7E 
1a223     7E 60 60 30 
1a227     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1a22b     0C 0C 0C 00 
1a22f     00 00 00 3C 
1a233     7E 66 66 3C 
1a237     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1a23b     66 7E 3C 00 
1a23f     00 00 00 3C 
1a243     7E 66 66 7E 
1a247     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1a24b     70 3C 1C 00 
1a24f     00 00 00 00 
1a253     00 00 18 18 
1a257     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1a25b     18 18 18 00 
1a25f     00 00 00 00 
1a263     00 00 18 18 
1a267     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1a26b     18 18 18 0C 
1a26f     04 00 00 00 
1a273     70 38 1C 0E 
1a277     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1a27b     70 00 00 00 
1a27f     00 00 00 00 
1a283     00 00 7E 7E 
1a287     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1a28b     00 00 00 00 
1a28f     00 00 00 00 | 	byte	$00[8]
1a293     0E 1C 38 70 
1a297     E0 70 38 1C 
1a29b     0E 00 00 00 
1a29f     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1a2a3     7E 66 66 30 
1a2a7     30 18 18 18 
1a2ab     00 18 18 00 
1a2af     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1a2b3     7E 66 66 66 
1a2b7     66 36 06 66 
1a2bb     66 7E 3C 00 
1a2bf     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1a2c3     3C 7E 66 66 
1a2c7     66 7E 7E 66 
1a2cb     66 66 66 00 
1a2cf     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1a2d3     7E 66 66 7E 
1a2d7     3E 66 66 66 
1a2db     66 7E 3E 00 
1a2df     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1a2e3     7E 66 66 06 
1a2e7     06 06 06 66 
1a2eb     66 7E 3C 00 
1a2ef     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1a2f3     7E 66 66 66 
1a2f7     66 66 66 66 
1a2fb     66 7E 3E 00 
1a2ff     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1a303     7E 06 06 3E 
1a307     3E 06 06 06 
1a30b     06 7E 7E 00 
1a30f     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1a313     7E 06 06 3E 
1a317     3E 06 06 06 
1a31b     06 06 06 00 
1a31f     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1a323     7E 06 06 76 
1a327     76 66 66 66 
1a32b     66 7E 3C 00 
1a32f     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1a333     66 66 66 7E 
1a337     7E 66 66 66 
1a33b     66 66 66 00 
1a33f     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1a343     7E 18 18 18 
1a347     18 18 18 18 
1a34b     18 7E 7E 00 
1a34f     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1a353     60 60 60 60 
1a357     60 60 60    | 	byte	$60[7]
1a35a     66 66 7E 3C 
1a35e     00 00 00 00 
1a362     66 66 36 36 
1a366     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1a36a     66 66 C6 C6 
1a36e     00 00 00 00 
1a372     06 06 06 06 
1a376     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1a37a     06 06 7E 7E 
1a37e     00 00 00 00 
1a382     C6 C6 EE EE 
1a386     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1a38a     C6 C6 C6 C6 
1a38e     00 00 00 00 
1a392     66 66 66 6E 
1a396     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1a39a     76 66 66 66 
1a39e     00 00 00 00 
1a3a2     3C 7E 66 66 
1a3a6     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a3aa     66 66 7E 3C 
1a3ae     00 00 00 00 
1a3b2     3E 7E 66 66 
1a3b6     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1a3ba     06 06 06 06 
1a3be     00 00 00 00 
1a3c2     3C 7E 66 66 
1a3c6     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1a3ca     66 56 3E 6C 
1a3ce     00 00 00 00 
1a3d2     3E 7E 66 66 
1a3d6     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1a3da     66 66 C6 C6 
1a3de     00 00 00 00 
1a3e2     7C 7E 06 06 
1a3e6     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1a3ea     60 60 7E 3E 
1a3ee     00 00 00 00 
1a3f2     7E 7E 18 18 
1a3f6     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1a3fa     18 18 18 18 
1a3fe     00 00 00 00 
1a402     66 66 66 66 
1a406     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a40a     66 66 7E 3C 
1a40e     00 00 00 00 
1a412     66 66 66 66 
1a416     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1a41a     3C 3C 18 18 
1a41e     00 00 00 00 
1a422     C6 C6 C6 C6 
1a426     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1a42a     FE EE C6 82 
1a42e     00 00 00 00 
1a432     66 66 66 3C 
1a436     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1a43a     3C 66 66 66 
1a43e     00 00 00 00 
1a442     66 66 66 66 
1a446     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1a44a     18 18 18 18 
1a44e     00 00 00 00 
1a452     7E 7E 30 30 
1a456     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1a45a     06 06 7E 7E 
1a45e     00 00 00 00 
1a462     3C 3C 0C 0C 
1a466     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1a46a     0C 0C 3C 3C 
1a46e     00 00 00 00 
1a472     06 06 0C 0C 
1a476     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1a47a     60 60 C0 C0 
1a47e     00 00 00 00 
1a482     3C 3C 30 30 
1a486     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1a48a     30 30 3C 3C 
1a48e     00 00 00 00 
1a492     18 18 3C 3C 
1a496     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1a49a     00 00 00 00 
1a49e     00 00 00 00 
1a4a2     00 00 00 00 
1a4a6     00 00 00 00 
1a4aa     00 00       | 	byte	$00[18]
1a4ac     FE FE 00 00 
1a4b0     00 00 0C 0C 
1a4b4     18 18 00 00 
1a4b8     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1a4bc     00 00 00 00 
1a4c0     00 00 00 00 
1a4c4     00          | 	byte	$00[9]
1a4c5     3C 7C 60 7C 
1a4c9     7E 66 66 7E 
1a4cd     7C 00 00 00 
1a4d1     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1a4d5     3E 7E 66 66 
1a4d9     66 66 66 7E 
1a4dd     3E 00 00 00 
1a4e1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1a4e5     3C 3E 06 06 
1a4e9     06 06 06 7E 
1a4ed     7C 00 00 00 
1a4f1     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1a4f5     7C 7E 66 66 
1a4f9     66 66 66 7E 
1a4fd     7C 00 00 00 
1a501     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1a505     3C 7E 66 66 
1a509     7E 06 06 7E 
1a50d     7C 00 00 00 
1a511     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1a515     18 7E 7E 18 
1a519     18 18 18 18 
1a51d     18 00 00 00 
1a521     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1a525     7C 7E 66 66 
1a529     66 66 7E 7C 
1a52d     60 7E 3E 00 
1a531     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1a535     3E 7E 66 66 
1a539     66 66 66 66 
1a53d     66 00 00 00 
1a541     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1a545     1C 1C 18 18 
1a549     18 18 18 3C 
1a54d     3C 00 00 00 
1a551     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1a555     30 30 30 30 
1a559     30 30 30 30 
1a55d     30          | 	byte	$30[9]
1a55e     3E 1E 00 00 
1a562     06 06 06 36 
1a566     36 1E 1E 1E 
1a56a     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1a56e     00 00 00 00 
1a572     1C 1C 18 18 
1a576     18 18 18 18 
1a57a     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
1a57e     00 00 00 00 
1a582     00 00 00    | 	byte	$00[7]
1a585     6C FE FE D6 
1a589     D6 C6 C6 C6 
1a58d     C6 00 00 00 
1a591     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1a595     3E 7E 66 66 
1a599     66 66 66 66 
1a59d     66 00 00 00 
1a5a1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1a5a5     3C 7E 66 66 
1a5a9     66 66 66 7E 
1a5ad     3C 00 00 00 
1a5b1     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1a5b5     3E 7E 66 66 
1a5b9     66 66 66 7E 
1a5bd     3E 06 06 00 
1a5c1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
1a5c5     7C 7E 66 66 
1a5c9     66 66 66 7E 
1a5cd     7C 60 60 00 
1a5d1     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1a5d5     3E 7E 66 06 
1a5d9     06 06 06 06 
1a5dd     06 00 00 00 
1a5e1     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1a5e5     7C 7E 06 0E 
1a5e9     3C 70 60 7E 
1a5ed     3E 00 00 00 
1a5f1     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1a5f5     7E 7E 18 18 
1a5f9     18 18 18 78 
1a5fd     70 00 00 00 
1a601     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1a605     66 66 66 66 
1a609     66 66 66    | 	byte	$66[7]
1a60c     7E 7C 00 00 
1a610     00 00 00 00 
1a614     00 66 66 66 
1a618     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
1a61c     18 18 00 00 
1a620     00 00 00 00 
1a624     00 C6 C6 D6 
1a628     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
1a62c     C6 82 00 00 
1a630     00 00 00 00 
1a634     00 66 66 3C 
1a638     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
1a63c     66 66 00 00 
1a640     00 00 00 00 
1a644     00 66 66 66 
1a648     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
1a64c     7C 60 7E 3E 
1a650     00 00 00 00 
1a654     00 7E 7E 30 
1a658     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1a65c     7E 7E 00 00 
1a660     00 00 30 18 
1a664     18 18 18 0C 
1a668     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
1a66c     18 30 00 00 
1a670     00 00 18 18 
1a674     18 18 18 18 
1a678     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1a67c     18 18 00 00 
1a680     00 00 0C 18 
1a684     18 18 18 30 
1a688     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
1a68c     18 0C 00 00 
1a690     00 00 6C 7E 
1a694     36 00 00 00 
1a698     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
1a69c     00 00 00 00 
1a6a0     00 00 00 00 
1a6a4     00          | 	byte	$00[9]
1a6a5     18 18 18 18 
1a6a9     18 18 00 00 
1a6ad     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1a6b0     00 00 00 00 
1a6b4     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
1a6b8     00 00 00 00 
1a6bc     00 80 80 80 
1a6c0     00 00 00 FF 
1a6c4     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
1a6c8     00 00 00 00 
1a6cc     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
1a6cd     80 00 00 00 
1a6d1     00 80 00 00 
1a6d5     80 80 00 00 
1a6d9     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
1a6dd     80 00 80 00 
1a6e1     00 40 80 00 
1a6e5     AA AA AA 00 
1a6e9     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
1a6ed     FF 00 00 00 
1a6f1     00 FF 00 00 
1a6f5     FF FF 00 00 
1a6f9     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
1a6fd     FF 00 FF 00 
1a701     00 FF FF 00 
1a705     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
1a708     00 00 00 00 
1a70c     00          | ataripalette   file "ataripalettep2.def"
1a70d     11 11 11 00 
1a711     22 22 22 00 
1a715     33 33 33 00 
1a719     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
1a71d     55 55 55 00 
1a721     66 66 66 00 
1a725     77 77 77 00 
1a729     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
1a72d     99 99 99 00 
1a731     AA AA AA 00 
1a735     BB BB BB 00 
1a739     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
1a73d     DD DD DD 00 
1a741     EE EE EE 00 
1a745     FF FF FF 00 
1a749     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
1a74d     00 14 40 00 
1a751     00 1E 60 00 
1a755     00 28 80 00 
1a759     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
1a75d     00 3C BF 00 
1a761     00 46 DF 00 
1a765     00 50 FF 00 
1a769     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
1a76d     39 77 FF 00 
1a771     55 8A FF 00 
1a775     71 9E FF 00 
1a779     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
1a77d     AA C5 FF 00 
1a781     C6 D8 FF 00 
1a785     E3 EC FF 00 
1a789     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
1a78d     00 00 40 00 
1a791     00 00 60 00 
1a795     00 00 80 00 
1a799     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
1a79d     00 00 BF 00 
1a7a1     00 00 DF 00 
1a7a5     00 00 FF 00 
1a7a9     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
1a7ad     39 39 FF 00 
1a7b1     55 55 FF 00 
1a7b5     71 71 FF 00 
1a7b9     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
1a7bd     AA AA FF 00 
1a7c1     C6 C6 FF 00 
1a7c5     E3 E3 FF 00 
1a7c9     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
1a7cd     20 00 40 00 
1a7d1     30 00 60 00 
1a7d5     40 00 80 00 
1a7d9     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
1a7dd     60 00 BF 00 
1a7e1     70 00 DF 00 
1a7e5     80 00 FF 00 
1a7e9     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
1a7ed     9C 39 FF 00 
1a7f1     AA 55 FF 00 
1a7f5     B8 71 FF 00 
1a7f9     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
1a7fd     D5 AA FF 00 
1a801     E3 C6 FF 00 
1a805     F1 E3 FF 00 
1a809     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
1a80d     40 00 40 00 
1a811     60 00 60 00 
1a815     80 00 80 00 
1a819     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
1a81d     BF 00 BF 00 
1a821     DF 00 DF 00 
1a825     FF 00 FF 00 
1a829     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
1a82d     FF 39 FF 00 
1a831     FF 55 FF 00 
1a835     FF 71 FF 00 
1a839     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
1a83d     FF AA FF 00 
1a841     FF C6 FF 00 
1a845     FF E3 FF 00 
1a849     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
1a84d     40 00 20 00 
1a851     60 00 30 00 
1a855     80 00 40 00 
1a859     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
1a85d     BF 00 60 00 
1a861     DF 00 70 00 
1a865     FF 00 80 00 
1a869     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
1a86d     FF 39 9C 00 
1a871     FF 55 AA 00 
1a875     FF 71 B8 00 
1a879     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
1a87d     FF AA D5 00 
1a881     FF C6 E3 00 
1a885     FF E3 F1 00 
1a889     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
1a88d     40 00 00 00 
1a891     60 00 00 00 
1a895     80 00 00 00 
1a899     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
1a89d     BF 00 00 00 
1a8a1     DF 00 00 00 
1a8a5     FF 00 00 00 
1a8a9     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
1a8ad     FF 39 39 00 
1a8b1     FF 55 55 00 
1a8b5     FF 71 71 00 
1a8b9     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
1a8bd     FF AA AA 00 
1a8c1     FF C6 C6 00 
1a8c5     FF E3 E3 00 
1a8c9     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
1a8cd     40 10 00 00 
1a8d1     60 18 00 00 
1a8d5     80 20 00 00 
1a8d9     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
1a8dd     BF 30 00 00 
1a8e1     DF 38 00 00 
1a8e5     FF 40 00 00 
1a8e9     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
1a8ed     FF 6A 39 00 
1a8f1     FF 80 55 00 
1a8f5     FF 95 71 00 
1a8f9     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
1a8fd     FF BF AA 00 
1a901     FF D5 C6 00 
1a905     FF EA E3 00 
1a909     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
1a90d     40 20 00 00 
1a911     60 30 00 00 
1a915     80 40 00 00 
1a919     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
1a91d     BF 60 00 00 
1a921     DF 70 00 00 
1a925     FF 80 00 00 
1a929     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
1a92d     FF 9C 39 00 
1a931     FF AA 55 00 
1a935     FF B8 71 00 
1a939     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
1a93d     FF D5 AA 00 
1a941     FF E3 C6 00 
1a945     FF F1 E3 00 
1a949     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
1a94d     40 30 00 00 
1a951     60 48 00 00 
1a955     80 60 00 00 
1a959     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
1a95d     BF 90 00 00 
1a961     DF A8 00 00 
1a965     FF C0 00 00 
1a969     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
1a96d     FF CE 39 00 
1a971     FF D5 55 00 
1a975     FF DC 71 00 
1a979     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
1a97d     FF EA AA 00 
1a981     FF F1 C6 00 
1a985     FF F8 E3 00 
1a989     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
1a98d     30 40 00 00 
1a991     48 60 00 00 
1a995     60 80 00 00 
1a999     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
1a99d     90 BF 00 00 
1a9a1     A8 DF 00 00 
1a9a5     C0 FF 00 00 
1a9a9     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
1a9ad     CE FF 39 00 
1a9b1     D5 FF 55 00 
1a9b5     DC FF 71 00 
1a9b9     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
1a9bd     EA FF AA 00 
1a9c1     F1 FF C6 00 
1a9c5     F8 FF E3 00 
1a9c9     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
1a9cd     00 40 00 00 
1a9d1     00 60 00 00 
1a9d5     00 80 00 00 
1a9d9     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
1a9dd     00 BF 00 00 
1a9e1     00 DF 00 00 
1a9e5     00 FF 00 00 
1a9e9     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
1a9ed     39 FF 39 00 
1a9f1     55 FF 55 00 
1a9f5     71 FF 71 00 
1a9f9     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
1a9fd     AA FF AA 00 
1aa01     C6 FF C6 00 
1aa05     E3 FF E3 00 
1aa09     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
1aa0d     00 40 14 00 
1aa11     00 60 1E 00 
1aa15     00 80 28 00 
1aa19     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
1aa1d     00 BF 3C 00 
1aa21     00 DF 46 00 
1aa25     00 FF 50 00 
1aa29     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
1aa2d     39 FF 77 00 
1aa31     55 FF 8A 00 
1aa35     71 FF 9E 00 
1aa39     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
1aa3d     AA FF C5 00 
1aa41     C6 FF D8 00 
1aa45     E3 FF EC 00 
1aa49     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
1aa4d     00 40 28 00 
1aa51     00 60 3C 00 
1aa55     00 80 50 00 
1aa59     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
1aa5d     00 BF 78 00 
1aa61     00 DF 8C 00 
1aa65     00 FF A0 00 
1aa69     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
1aa6d     39 FF B5 00 
1aa71     55 FF C0 00 
1aa75     71 FF CA 00 
1aa79     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
1aa7d     AA FF DF 00 
1aa81     C6 FF EA 00 
1aa85     E3 FF F4 00 
1aa89     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
1aa8d     00 40 40 00 
1aa91     00 60 60 00 
1aa95     00 80 80 00 
1aa99     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
1aa9d     00 BF BF 00 
1aaa1     00 DF DF 00 
1aaa5     00 FF FF 00 
1aaa9     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
1aaad     39 FF FF 00 
1aab1     55 FF FF 00 
1aab5     71 FF FF 00 
1aab9     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
1aabd     AA FF FF 00 
1aac1     C6 FF FF 00 
1aac5     E3 FF FF 00 
1aac9     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
1aacd     00 28 40 00 
1aad1     00 3C 60 00 
1aad5     00 50 80 00 
1aad9     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
1aadd     00 78 BF 00 
1aae1     00 8C DF 00 
1aae5     00 A0 FF 00 
1aae9     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
1aaed     39 B5 FF 00 
1aaf1     55 C0 FF 00 
1aaf5     71 CA FF 00 
1aaf9     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
1aafd     AA DF FF 00 
1ab01     C6 EA FF 00 
1ab05     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
1ab08                 | '**********************************************************************************
1ab08                 | '
1ab08                 | '        Timings and colors definitions
1ab08                 | '
1ab08                 | '**********************************************************************************
1ab08                 | 
1ab08                 |    'streamer sets for text mode, to add to timings[0..5]
1ab08                 | ' todo for the retromachine: 768x576
1ab08                 | 
1ab08                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
1ab08     10 00 00 00 
1ab0c     50 00 00 00 
1ab10     14 00 00 00 
1ab14     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1ab18     70 00 00 00 
1ab1c     08 00 00 00 
1ab20     30 00 00 00 
1ab24     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
1ab28     10 00 00 00 
1ab2c     10 00 00 00 
1ab30     00 00 00 00 
1ab34     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
1ab38     E0 01 00 00 
1ab3c     F6 32 24 15 
1ab40     FB 6C C3 01 
1ab44     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1ab48                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
1ab48                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
1ab48     30 00 00 00 
1ab4c     50 00 00 00 
1ab50     34 00 00 00 
1ab54     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
1ab58     20 00 00 00 
1ab5c     08 00 00 00 
1ab60     16 00 00 00 
1ab64     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
1ab68     24 00 00 00 
1ab6c     18 00 00 00 
1ab70     40 00 00 00 
1ab74     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
1ab78     F0 01 00 00 
1ab7c     F6 32 24 15 
1ab80     FB 6C C3 01 
1ab84     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
1ab88                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
1ab88     10 00 00 00 
1ab8c     40 00 00 00 
1ab90     10 00 00 00 
1ab94     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
1ab98     08 00 00 00 
1ab9c     08 00 00 00 
1aba0     08 00 00 00 
1aba4     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
1aba8     40 00 00 00 
1abac     20 00 00 00 
1abb0     80 00 00 00 
1abb4     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
1abb8     E0 01 00 00 
1abbc     70 AE E9 10 
1abc0     FB 8B FF 01 
1abc4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
1abc8     10 00 00 00 
1abcc     42 00 00 00 
1abd0     14 00 00 00 
1abd4     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
1abd8     00 00 00 00 
1abdc     08 00 00 00 
1abe0     00 00 00 00 
1abe4     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
1abe8     10 00 00 00 
1abec     10 00 00 00 
1abf0     C0 00 00 00 
1abf4     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
1abf8     40 02 00 00 
1abfc     F6 32 24 15 
1ac00     FB 6C C3 01 
1ac04     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
1ac08     50 00 00 00 
1ac0c     A0 00 00 00 
1ac10     54 00 00 00 
1ac14     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
1ac18     08 00 00 00 
1ac1c     08 00 00 00 
1ac20     08 00 00 00 
1ac24     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ac28     0C 00 00 00 
1ac2c     08 00 00 00 
1ac30     00 01 00 00 
1ac34     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
1ac38     E0 01 00 00 
1ac3c     10 06 56 15 
1ac40     FB 64 C3 01 
1ac44     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
1ac48     50 00 00 00 
1ac4c     32 00 00 00 
1ac50     50 00 00 00 
1ac54     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1ac58     08 00 00 00 
1ac5c     08 00 00 00 
1ac60     08 00 00 00 
1ac64     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1ac68     0C 00 00 00 
1ac6c     08 00 00 00 
1ac70     40 01 00 00 
1ac74     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
1ac78     E0 01 00 00 
1ac7c     F2 CD 33 13 
1ac80     FB 53 92 01 
1ac84     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1ac88     18 00 00 00 
1ac8c     30 00 00 00 
1ac90     18 00 00 00 
1ac94     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
1ac98     08 00 00 00 
1ac9c     08 00 00 00 
1aca0     08 00 00 00 
1aca4     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
1aca8     0C 00 00 00 
1acac     08 00 00 00 
1acb0     80 01 00 00 
1acb4     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
1acb8     E0 01 00 00 
1acbc     F4 8F 11 11 
1acc0     FB 3A 55 01 
1acc4     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
1acc8     20 00 00 00 
1accc     40 00 00 00 
1acd0     22 00 00 00 
1acd4     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
1acd8     00 00 00 00 
1acdc     08 00 00 00 
1ace0     00 00 00 00 
1ace4     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
1ace8     0C 00 00 00 
1acec     08 00 00 00 
1acf0     C0 01 00 00 
1acf4     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
1acf8     F0 01 00 00 
1acfc     F2 CD 33 13 
1ad00     FB 53 92 01 
1ad04     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
1ad08                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
1ad08     00 75 C7 97 
1ad0c     27 47 F6 0A 
1ad10     05 79 CB 9B 
1ad14     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
1ad18                 | 
1ad18     28 12 64 FD | hdmi            setq    #9
1ad1c     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
1ad20                 |            '     setq2   #255
1ad20                 |             '    rdlong  $100, paletteptr 
1ad20     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
1ad24     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
1ad28     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
1ad2c     78 F9 02 F1 |                 add     ii,hbase
1ad30     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
1ad34     7B 0B 80 FF 
1ad38     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
1ad3c                 | 
1ad3c     66 66 86 FF 
1ad40     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
1ad44                 | 
1ad44                 | 
1ad44                 | ''--------  frame rendering main loop  ---------------------------------------------------
1ad44                 | 
1ad44                 | p101
1ad44     28 14 64 FD |                 setq    #10
1ad48     00 DF 06 FB |                 rdlong  framebuf,  ptra
1ad4c     28 1E 64 FD |                 setq    #15
1ad50     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
1ad54     71 99 02 FB |                 rdlong  border,borderptr
1ad58                 | 
1ad58     01 C4 06 F1 |                 add     frames,#1
1ad5c     76 F5 02 F6 |                 mov     dlptr2,dlptr
1ad60                 | 
1ad60     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
1ad64     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
1ad68     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
1ad6c     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
1ad70                 |  '' up porch
1ad70                 | 
1ad70     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
1ad74     49 FF 02 F6 |                 mov     hsync1,sync_001
1ad78     37 A8 46 FB |                 callpa  i_upporch ,#blank
1ad7c     72 01 68 FC |                 wrlong  #0,vblankptr
1ad80                 |                 
1ad80     1F EA 16 F4 |                 testb   paletteptr,#31 wc
1ad84     29 FE 65 3D |          if_nc  setq2   #255
1ad88     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
1ad8c                 | 
1ad8c                 | '' cursor blinking
1ad8c                 | 
1ad8c     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
1ad90     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
1ad94                 | 
1ad94                 | '' main screen
1ad94                 | 
1ad94     00 BE 06 F6 |                 mov linenum,#0
1ad98     00 18 07 F6 |                 mov rcnt,#0
1ad9c     00 1C 07 F6 |                 mov rcnt2a,#0
1ada0                 | 
1ada0                 | 
1ada0     00 18 0F F2 | p301            cmp rcnt,#0 wz
1ada4     18 00 90 AD |         if_z    jmp #p306
1ada8     01 18 87 F1 |                 sub rcnt,#1
1adac     90 F7 02 F6 |                 mov dl,rdl
1adb0     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
1adb4     8F F7 02 A1 |    if_z        add dl,roffset  
1adb8     7B 21 03 F6 |                 mov rdl,dl
1adbc     04 00 90 FD |                 jmp #p307          
1adc0                 |           
1adc0                 |                 
1adc0     7A F7 02 FB | p306            rdlong  dl,dlptr2
1adc4     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
1adc8     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
1adcc     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
1add0                 | 
1add0                 | '' Special entry:
1add0                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
1add0                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
1add0                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
1add0                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
1add0                 | '' todo: set horizontal scroll (if needed)
1add0                 | 
1add0     02 FA 66 F0 |                 shl framebuf2,#2
1add4     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
1add8     04 22 0F F2 |                 cmp dlc,#%100 wz
1addc                 |   
1addc                 |                 
1addc     04 F4 06 F1 |                 add dlptr2,#4
1ade0     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
1ade4     7A 21 03 FB |                  rdlong rdl,dlptr2
1ade8     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
1adec     04 18 47 F0 |                  shr rcnt,#4
1adf0                 |              
1adf0     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
1adf4     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
1adf8                 |                 
1adf8     04 1E 47 F0 |                  shr roffset,#4
1adfc     0C 1E 67 F0 |                  shl roffset,#12
1ae00                 |   
1ae00     9C FF 9F FD |                  jmp #p301
1ae04                 |                  
1ae04                 |                  
1ae04                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
1ae04     0C FA 46 F0 |                 shr     framebuf2,#12
1ae08     02 FA 66 F0 |                 shl     framebuf2,#2
1ae0c                 | 
1ae0c     7B 03 E3 F8 |                 getbyte t1,dl,#0
1ae10     00 02 0F F2 |                 cmp     t1,#0 wz
1ae14     34 00 90 AD |     if_z        jmp     #borderline
1ae18                 | 
1ae18     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
1ae1c     50 00 90 CD |           if_c   jmp     #textline
1ae20     50 02 90 3D |           if_nc  jmp     #graphline
1ae24                 | '
1ae24     01 BE 06 F1 | p302            add     linenum,#1
1ae28     04 F4 06 F1 |                 add     dlptr2,#4
1ae2c     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
1ae30     6C FF 9F 5D |          if_nz  jmp     #p301
1ae34                 | 
1ae34     72 03 68 FC | p112            wrlong  #1,vblankptr
1ae38     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
1ae3c                 | 
1ae3c     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
1ae40     4B FF 02 F6 |                 mov     hsync1,sync_223
1ae44     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
1ae48     F8 FE 9F FD |                 jmp     #p101
1ae4c                 | 
1ae4c                 | '' ---------------  END of frame rendering loop -------------------------------------------
1ae4c                 | 
1ae4c                 | 
1ae4c     14 00 B0 FD | borderline      call    #hsync                      ' make a border
1ae50     4C A1 C2 FC |                 xcont   m_vi,border
1ae54     CC FF 9F FD |                 jmp     #p302
1ae58                 | 
1ae58                 | 
1ae58     08 00 B0 FD | blank           call    #hsync                          'blank lines
1ae5c     7E A1 C2 FC |                 xcont   m_vi,hsync0
1ae60     FD ED 6F 0B |         _ret_   djnz    pa,#blank
1ae64                 | 
1ae64     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
1ae68     7F 9D B2 FC |                 xzero   m_sn,hsync1
1ae6c     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
1ae70                 | 
1ae70                 | 
1ae70                 | 
1ae70                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
1ae70                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
1ae70                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
1ae70                 | 
1ae70                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
1ae70                 | 
1ae70     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
1ae74                 | 
1ae74     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
1ae78     7B 17 5B F8 |                 getnib  zoom, dl,#3
1ae7c     03 16 07 F5 |                 and             zoom, #3
1ae80                 | 
1ae80                 | 
1ae80                 | 
1ae80     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
1ae84     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
1ae88     3F BC 06 F5 |                 and     linestart,#63
1ae8c     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
1ae90     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
1ae94                 | 
1ae94     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
1ae98                 | 
1ae98                 |                        ' if fontline =0, get a border color
1ae98                 | 
1ae98     51 03 33 F9 | p102            getword t1,m_border,#0
1ae9c     00 02 0F F2 |                 cmp     t1, #0 wz
1aea0     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1aea4                 | 
1aea4     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
1aea8     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
1aeac     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
1aeb0     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
1aeb4     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
1aeb8     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
1aebc     52 BB 02 F6 |                 mov m_lut2, m_lut1
1aec0     6A BB 02 F1 |                 add m_lut2, lutt1
1aec4     58 0F 03 F6 |                 mov cpl2,i_cpl
1aec8                 | 
1aec8     02 16 0F F2 |                cmp zoom,#2 wz
1aecc     E4 00 90 AD |           if_z jmp #p420
1aed0     01 16 0F F2 |                cmp zoom,#1 wz
1aed4     64 00 90 AD |           if_z jmp #p410
1aed8     00 16 0F F2 |                 cmp zoom,#0 wz
1aedc     04 00 90 AD |           if_z jmp #p400
1aee0     50 01 90 FD |                jmp #p430
1aee4                 | 
1aee4                 |                    '
1aee4                 |  ''---------------------------------------------------------------------------------------------------------
1aee4     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
1aee8     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1aeec     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1aef0     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1aef4     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1aef8     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1aefc     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1af00     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1af04     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1af08     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1af0c                 | 
1af0c     81 BB C2 FC |                         xcont m_lut2,t1
1af10                 | 
1af10     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1af14     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1af18     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1af1c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1af20     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1af24     01 C0 86 F1 |                         sub     lutaddr,#1
1af28                 | 
1af28     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1af2c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1af30     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1af34                 | 
1af34     EB 0F 6F FB |                         djnz   cpl2,#p400
1af38     28 01 90 FD |  p401                   jmp    #p103
1af3c                 | 
1af3c                 | ''------------------------------------------------------------------------------------------------------------
1af3c                 | 
1af3c     01 0E 47 F0 |  p410                   shr cpl2,#1
1af40                 | 
1af40                 | ''---------------------------------------------------------------------------------------------------------
1af40     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
1af44     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1af48     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1af4c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1af50     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1af54     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1af58     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1af5c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1af60     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1af64     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1af68                 | 
1af68                 | 
1af68     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
1af6c     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
1af70     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
1af74     03 02 07 FA |                         mul t1,#3
1af78     81 BB C2 FC |                         xcont m_lut2,t1
1af7c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1af80     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1af84     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1af88     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1af8c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1af90     01 C0 86 F1 |                         sub     lutaddr,#1
1af94     63 06 63 FD |                         mergew t3
1af98     03 06 07 FA |                         mul t3,#3
1af9c     83 BB C2 FC |                         xcont m_lut2,t3
1afa0                 | 
1afa0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1afa4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1afa8                 | 
1afa8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1afac                 | 
1afac     E4 0F 6F FB |                         djnz   cpl2,#p412
1afb0     B0 00 90 FD |  p411                   jmp    #p103
1afb4                 | 
1afb4                 | ''------------------------------------------------------------------------------------------------------------
1afb4                 | 
1afb4     02 0E 47 F0 |  p420                   shr cpl2,#2
1afb8                 | 
1afb8                 | ''---------------------------------------------------------------------------------------
1afb8     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
1afbc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1afc0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1afc4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
1afc8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
1afcc     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
1afd0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
1afd4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
1afd8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
1afdc     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
1afe0                 | 
1afe0     61 02 63 FD |                         mergeb t1
1afe4     81 07 3B F9 |                         getword t3,t1,#1
1afe8     0F 02 07 FA |                         mul t1,#15
1afec     81 BB C2 FC |                         xcont m_lut2,t1
1aff0                 | 
1aff0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1aff4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1aff8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1affc     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b000     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b004     01 C0 86 F1 |                         sub     lutaddr,#1
1b008                 | 
1b008     81 09 EB F8 |                         getbyte t4,t1,#1        '
1b00c     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
1b010                 | 
1b010     0F 06 07 FA |                         mul t3,#15
1b014     83 BB C2 FC |                         xcont m_lut2,t3
1b018                 | 
1b018     83 0B EB F8 |                         getbyte t5,t3,#1
1b01c     85 BB C2 FC |                         xcont m_lut2, t5
1b020     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
1b024     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
1b028                 | 
1b028     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
1b02c                 | 
1b02c     E2 0F 6F FB |                         djnz   cpl2,#p422
1b030     30 00 90 FD |  p421                   jmp    #p103
1b034                 | 
1b034                 | '--------------------------------------------------------------------------------------------------------------
1b034                 | 
1b034     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
1b038     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
1b03c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
1b040                 | 
1b040     00 BA C6 FC |                         xcont m_lut2,#0
1b044                 | 
1b044     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
1b048     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
1b04c     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
1b050     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
1b054     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
1b058     01 C0 86 F1 |                         sub     lutaddr,#1
1b05c                 | 
1b05c     F5 0F 6F FB |                         djnz   cpl2,#p430
1b060     00 00 90 FD |  p431                   jmp    #p103
1b064                 | 
1b064                 | ''------------------------------------------------------------------------------------------------------------
1b064                 | 
1b064                 | 
1b064                 | 
1b064     51 25 33 F9 | p103            getword  mb2,m_border,#0
1b068     00 24 0F F2 |                 cmp      mb2, #0 wz
1b06c     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b070                 | 
1b070     B0 FD 9F FD |                 jmp #p302
1b074                 | 
1b074                 | '' -------------------------------------- END of text line ---------------------------------
1b074                 | 
1b074                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
1b074                 | 
1b074     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
1b078                 | 
1b078                 | 
1b078     51 25 33 F9 | p202            getword mb2,m_border,#0
1b07c     00 24 0F F2 |                 cmp     mb2, #0 wz
1b080     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
1b084                 | 
1b084                 | '----------------------------------------- display pixels
1b084                 | 
1b084     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
1b088     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
1b08c                 | 
1b08c     7B 17 5B F8 |                 getnib  zoom, dl,#3
1b090     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
1b094                 | 
1b094     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
1b098     0C BC 06 F5 |                 and     colordepth,#12
1b09c                 | 
1b09c     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
1b0a0     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
1b0a4     64 00 90 AD |           if_z  jmp     #p240
1b0a8                 | 
1b0a8     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
1b0ac     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
1b0b0     98 00 90 AD |           if_z  jmp     #p250
1b0b4                 | 
1b0b4     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
1b0b8     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
1b0bc     FC 00 90 AD |           if_z  jmp     #p260
1b0c0                 | 
1b0c0     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
1b0c4                 | 
1b0c4                 | '' --- 8 bit color modes
1b0c4                 | 
1b0c4     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1b0c8     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b0cc                 | 
1b0cc     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1b0d0     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1b0d4                 |        
1b0d4                 |  '  
1b0d4     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1b0d8     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1b0dc                 |     
1b0dc                 |  
1b0dc     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1b0e0     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1b0e4                 |         
1b0e4                 | 
1b0e4                 |         
1b0e4     7D 11 03 FB | p235               rdlong  char,framebuf2
1b0e8     32 0C 63 FD |                    skipf skippattern
1b0ec     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1b0f0     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1b0f4     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1b0f8     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1b0fc     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1b100     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1b104     F7 0F 6F FB |                    djnz    cpl2,#p235
1b108                 | 
1b108     20 01 90 FD |                jmp    #p203
1b10c                 |                   
1b10c                 | 
1b10c                 | 
1b10c                 | '' --- 1 bit color modes
1b10c                 | 
1b10c     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1b110     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1b114                 | 
1b114     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1b118     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1b11c     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1b120                 | 
1b120                 | 
1b120     7D 11 E3 FA | p241               rdword  char,framebuf2
1b124     44 10 FF F9 |                    movbyts char,#%01000100
1b128     63 10 63 FD |                    mergew  char
1b12c     32 0C 63 FD |                    skipf skippattern
1b130     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1b134     63 10 63 FD |                    mergew  char                    ' 1 0
1b138     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1b13c     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1b140     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1b144     F6 0F 6F FB |                    djnz   cpl2,#p241
1b148                 | 
1b148                 | 
1b148     E0 00 90 FD |                jmp    #p203
1b14c                 | 
1b14c                 | '' --- 2 bit color modes
1b14c                 | 
1b14c     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1b150     C8 00 90 AD |        if_z   jmp #p251
1b154                 | 
1b154     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b158     30 00 90 AD |        if_z   jmp #p252
1b15c                 | 
1b15c                 | 
1b15c     7D 11 C3 FA | p254               rdbyte char,framebuf2
1b160     04 0A 07 F6 |                    mov  t5,#4
1b164     02 10 67 F0 | p255               shl  char,#2
1b168     88 03 53 F8 |                    getnib  t1,char,#2
1b16c     03 02 07 F5 |                    and     t1,#3
1b170     55 02 07 FA |                    mul     t1,#$55
1b174     81 05 03 F9 |                    rolbyte  t2,t1,#0
1b178     FA 0B 6F FB |                    djnz    t5,#p255
1b17c     82 BB C2 FC |                    xcont   m_lut2,t2
1b180     01 FA 06 F1 |                    add     framebuf2,#1
1b184     F5 0F 6F FB |                    djnz    cpl2,#p254
1b188     A0 00 90 FD |                    jmp     #p203
1b18c                 | 
1b18c     7D 11 E3 FA | p252               rdword char,framebuf2
1b190     08 0A 07 F6 |                    mov  t5,#8
1b194     02 10 67 F0 | p253               shl  char,#2
1b198     88 03 63 F8 |                    getnib  t1,char,#4
1b19c     03 02 07 F5 |                    and     t1,#3
1b1a0     05 02 07 FA |                    mul     t1,#5
1b1a4     81 05 83 F8 |                    rolnib  t2,t1,#0
1b1a8     FA 0B 6F FB |                    djnz    t5,#p253
1b1ac     82 BB C2 FC |                    xcont   m_lut2,t2
1b1b0     02 FA 06 F1 |                    add     framebuf2,#2
1b1b4     F5 0F 6F FB |                    djnz    cpl2,#p252
1b1b8     70 00 90 FD |                    jmp     #p203
1b1bc                 | 
1b1bc                 | '' ------ 4 bit color modes
1b1bc                 | 
1b1bc     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1b1c0     58 00 90 AD |        if_z   jmp #p251
1b1c4                 | 
1b1c4     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1b1c8     2C 00 90 AD |        if_z   jmp #p262
1b1cc                 | 
1b1cc                 | 
1b1cc     7D 11 C3 FA | p263               rdbyte char,framebuf2
1b1d0     02 0A DC FC |                            rep #5,#2
1b1d4     88 05 8B F8 |                              rolnib t2,char,#1
1b1d8     88 05 8B F8 |                                  rolnib t2,char,#1
1b1dc     88 05 8B F8 |                              rolnib t2,char,#1
1b1e0     88 05 8B F8 |                                  rolnib t2,char,#1
1b1e4     04 10 67 F0 |                              shl char,#4
1b1e8     82 BB C2 FC |                    xcont   m_lut2,t2
1b1ec     01 FA 06 F1 |                    add     framebuf2,#1
1b1f0     F6 0F 6F FB |                    djnz    cpl2,#p263
1b1f4     34 00 90 FD |                    jmp     #p203
1b1f8                 | 
1b1f8     7D 11 E3 FA | p262               rdword  char,framebuf2
1b1fc     04 06 DC FC |                            rep #3,#4
1b200     88 05 9B F8 |                              rolnib t2,char,#3
1b204     88 05 9B F8 |                                  rolnib t2,char,#3
1b208     04 10 67 F0 |                              shl char,#4
1b20c     82 BB C2 FC |                    xcont   m_lut2,t2
1b210     02 FA 06 F1 |                    add     framebuf2,#2
1b214     F8 0F 6F FB |                    djnz    cpl2,#p262
1b218     10 00 90 FD |                    jmp     #p203
1b21c                 | 
1b21c                 | ''---------- all color modes without zoom
1b21c                 | 
1b21c     87 07 D8 FC | p251               rep  #3,cpl2
1b220     7D 11 03 FB |                    rdlong  char,framebuf2
1b224     04 FA 06 F1 |                    add     framebuf2,#4
1b228     88 BB C2 FC |                    xcont   m_lut2,char
1b22c                 |           
1b22c                 |  ''-----------------------------------------------------------------------------------------
1b22c                 | p203           ' getword  mb2,m_border,#0
1b22c     00 24 0F F2 |                 cmp      mb2, #0 wz
1b230     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1b234                 | 
1b234     EC FB 9F FD |                 jmp #p302
1b238                 | 
1b238                 | '' -------------------------------------- END of graph  line ---------------------------------
1b238                 | 
1b238                 | '' consts and vars
1b238                 | 
1b238     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1b23c     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1b240     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1b244     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1b248                 | 
1b248     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1b24c                 | 
1b24c                 | '------ these longs will be set by setmode function
1b24c                 | 
1b24c     00 00 00 00 | m_bs            long    0        'blanks before sync
1b250     00 00 00 00 | m_sn            long    0        'sync
1b254     00 00 00 00 | m_bv            long    0        'blanks before visible
1b258     00 00 00 00 | m_vi            long    0        'visible pixels #
1b25c     00 00 00 00 | m_border        long    0        'left/right borders
1b260     00 00 00 00 | m_lut1          long    0        'characters
1b264     00 00 00 00 | i_vborder       long    0        'up/down borders
1b268     00 00 00 00 | i_upporch       long    0        'up porch lines
1b26c     00 00 00 00 | i_vsync         long    0        'vsync lines
1b270     00 00 00 00 | i_downporch     long    0        'down porch lines
1b274     00 00 00 00 | i_modenum       long    0        'mode #
1b278     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1b27c     00 00 00 00 | i_lines         long    0        'scanlines #
1b280     00 00 00 00 | i_clock         long    0
1b284     00 00 00 00 | i_hubset        long    0
1b288     00 00 00 00 | i_totalvis      long    0
1b28c                 | 
1b28c                 | '-------------------------------------
1b28c                 | 
1b28c     00 00 00 00 | m_lut2          long    0
1b290                 | 
1b290                 | colordepth
1b290     00 00 00 00 | linestart       long    0
1b294     00 00 00 00 | linenum         long    0
1b298     00 01 00 00 | lutaddr         long    256
1b29c                 | 
1b29c     0E 00 00 00 | cursorsh        long    14
1b2a0     00 00 00 00 | frames          long    0
1b2a4     00 00 00 00 | cursorx         long    0
1b2a8     00 00 00 00 | cursory         long    0
1b2ac     00 00 00 00 | cursorpos       long    0
1b2b0     00 00 00 00 | cursorpos2      long    0
1b2b4     00 00 00 00 | fontstart       long    0
1b2b8     00 00 00 00 | border2         long 0
1b2bc     00 00 81 70 | lutiv           long $70810000
1b2c0     00 00 88 00 | lutt1           long $00880000
1b2c4     00 00 80 00 | lutg1           long $00800000
1b2c8     00 00 80 10 | lutg2           long $10800000
1b2cc     00 00 80 20 | lutg4           long $20800000
1b2d0     00 00 80 30 | lutg8           long $30800000
1b2d4     00 00 00 00 | framebuf        long 0
1b2d8     00 00 00 00 | fontbuf         long 0
1b2dc     00 00 00 00 | borderptr       long 0
1b2e0     00 00 00 00 | vblankptr       long 0
1b2e4     00 00 00 00 | cursorptr       long 0
1b2e8     00 00 00 00 | modeptr         long 0
1b2ec     00 00 00 00 | paletteptr      long 0
1b2f0     00 00 00 00 | dlptr           long 0
1b2f4                 | fontnumptr      res     1
1b2f4                 | fontnumptr      res     1
1b2f4                 | hbase           res     1
1b2f4                 | hbase           res     1
1b2f4                 | borderptr2      res     1
1b2f4                 | borderptr2      res     1
1b2f4                 | dlptr2 res 1
1b2f4                 | dlptr2 res 1
1b2f4                 | dl              res 1
1b2f4                 | dl              res 1
1b2f4                 | ii              res     1
1b2f4                 | ii              res     1
1b2f4                 | framebuf2       res     1
1b2f4                 | framebuf2       res     1
1b2f4                 | hsync0          res     1
1b2f4                 | hsync0          res     1
1b2f4                 | hsync1          res     1
1b2f4                 | hsync1          res     1
1b2f4                 | fontline        res     1
1b2f4                 | fontline        res     1
1b2f4                 | t1              res     1
1b2f4                 | t1              res     1
1b2f4                 | t2              res     1
1b2f4                 | t2              res     1
1b2f4                 | t3 res 1
1b2f4                 | t3 res 1
1b2f4                 | t4 res 1
1b2f4                 | t4 res 1
1b2f4                 | t5 res 1
1b2f4                 | t5 res 1
1b2f4                 | skippattern res 1
1b2f4                 | skippattern res 1
1b2f4                 | cpl2 res 1
1b2f4                 | cpl2 res 1
1b2f4                 | char            res     1
1b2f4                 | char            res     1
1b2f4                 | backcolor       res     1
1b2f4                 | backcolor       res     1
1b2f4                 | charcolor       res     1
1b2f4                 | charcolor       res     1
1b2f4                 | zoom res 1
1b2f4                 | zoom res 1
1b2f4     00 00 00 00 | rcnt long 0 'dl repeat count
1b2f8     00 00 00 00 | rcnt2 long 0
1b2fc     00 00 00 00 | rcnt2a long 0
1b300     00 00 00 00 | roffset long 0
1b304     00 00 00 00 | rdl long 0  'dl repeat line
1b308     00 00 00 00 | dlc long 0 'dl command
1b30c     00 00 00 00 | mb2 long 0
1b310     00 00 00 00 | aend             long 0
1b314                 |                 fit     496                     '
1b314                 | _trackerplayer_spin2_dat_
1b314                 | 
1b314     00 00 00 00 | null             long  0
1b318     46 52 45 51 
1b31c     46 52 45 51 
1b320     46 52 45 51 
1b324     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1b328     46 52 45 51 
1b32c     46 52 45 51 
1b330     46 52 45 51 
1b334     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b338     46 52 45 51 
1b33c     46 52 45 51 
1b340     46 52 45 51 
1b344     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b348     46 52 45 51 
1b34c     46 52 45 51 
1b350     46 52 45 51 
1b354     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b358     46 52 45 51 
1b35c     46 52 45 51 
1b360     46 52 45 51 
1b364     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b368     46 52 45 51 
1b36c     46 52 45 51 
1b370     46 52 45 51 
1b374     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b378     46 52 45 51 
1b37c     46 52 45 51 
1b380     46 52 45 51 
1b384     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b388     46 52 45 51 
1b38c     46 52 45 51 
1b390     46 52 45 51 
1b394     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b398     46 52 45 51 
1b39c     46 52 45 51 
1b3a0     46 52 45 51 
1b3a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3a8     46 52 45 51 
1b3ac     46 52 45 51 
1b3b0     46 52 45 51 
1b3b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3b8     46 52 45 51 
1b3bc     46 52 45 51 
1b3c0     46 52 45 51 
1b3c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3c8     46 52 45 51 
1b3cc     46 52 45 51 
1b3d0     46 52 45 51 
1b3d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3d8     46 52 45 51 
1b3dc     46 52 45 51 
1b3e0     46 52 45 51 
1b3e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3e8     46 52 45 51 
1b3ec     46 52 45 51 
1b3f0     46 52 45 51 
1b3f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b3f8     46 52 45 51 
1b3fc     46 52 45 51 
1b400     46 52 45 51 
1b404     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b408     46 52 45 51 
1b40c     46 52 45 51 
1b410     46 52 45 51 
1b414     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b418     46 52 45 51 
1b41c     46 52 45 51 
1b420     46 52 45 51 
1b424     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b428     46 52 45 51 
1b42c     46 52 45 51 
1b430     46 52 45 51 
1b434     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b438     46 52 45 51 
1b43c     46 52 45 51 
1b440     46 52 45 51 
1b444     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b448     46 52 45 51 
1b44c     46 52 45 51 
1b450     46 52 45 51 
1b454     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b458     46 52 45 51 
1b45c     46 52 45 51 
1b460     46 52 45 51 
1b464     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b468     46 52 45 51 
1b46c     46 52 45 51 
1b470     46 52 45 51 
1b474     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b478     46 52 45 51 
1b47c     46 52 45 51 
1b480     46 52 45 51 
1b484     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b488     46 52 45 51 
1b48c     46 52 45 51 
1b490     46 52 45 51 
1b494     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b498     46 52 45 51 
1b49c     46 52 45 51 
1b4a0     46 52 45 51 
1b4a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4a8     46 52 45 51 
1b4ac     46 52 45 51 
1b4b0     46 52 45 51 
1b4b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4b8     46 52 45 51 
1b4bc     46 52 45 51 
1b4c0     46 52 45 51 
1b4c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4c8     46 52 45 51 
1b4cc     46 52 45 51 
1b4d0     46 52 45 51 
1b4d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4d8     46 52 45 51 
1b4dc     46 52 45 51 
1b4e0     46 52 45 51 
1b4e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4e8     46 52 45 51 
1b4ec     46 52 45 51 
1b4f0     46 52 45 51 
1b4f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b4f8     46 52 45 51 
1b4fc     46 52 45 51 
1b500     46 52 45 51 
1b504     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b508     46 52 45 51 
1b50c     46 52 45 51 
1b510     46 52 45 51 
1b514     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b518     46 52 45 51 
1b51c     46 52 45 51 
1b520     46 52 45 51 
1b524     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b528     46 52 45 51 
1b52c     46 52 45 51 
1b530     46 52 45 51 
1b534     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b538     46 52 45 51 
1b53c     46 52 45 51 
1b540     46 52 45 51 
1b544     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b548     46 52 45 51 
1b54c     46 52 45 51 
1b550     46 52 45 51 
1b554     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b558     46 52 45 51 
1b55c     46 52 45 51 
1b560     46 52 45 51 
1b564     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b568     46 52 45 51 
1b56c     46 52 45 51 
1b570     46 52 45 51 
1b574     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b578     46 52 45 51 
1b57c     46 52 45 51 
1b580     46 52 45 51 
1b584     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b588     46 52 45 51 
1b58c     46 52 45 51 
1b590     46 52 45 51 
1b594     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b598     46 52 45 51 
1b59c     46 52 45 51 
1b5a0     46 52 45 51 
1b5a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5a8     46 52 45 51 
1b5ac     46 52 45 51 
1b5b0     46 52 45 51 
1b5b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5b8     46 52 45 51 
1b5bc     46 52 45 51 
1b5c0     46 52 45 51 
1b5c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5c8     46 52 45 51 
1b5cc     46 52 45 51 
1b5d0     46 52 45 51 
1b5d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5d8     46 52 45 51 
1b5dc     46 52 45 51 
1b5e0     46 52 45 51 
1b5e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5e8     46 52 45 51 
1b5ec     46 52 45 51 
1b5f0     46 52 45 51 
1b5f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b5f8     46 52 45 51 
1b5fc     46 52 45 51 
1b600     46 52 45 51 
1b604     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b608     46 52 45 51 
1b60c     46 52 45 51 
1b610     46 52 45 51 
1b614     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b618     46 52 45 51 
1b61c     46 52 45 51 
1b620     46 52 45 51 
1b624     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b628     46 52 45 51 
1b62c     46 52 45 51 
1b630     46 52 45 51 
1b634     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b638     46 52 45 51 
1b63c     46 52 45 51 
1b640     46 52 45 51 
1b644     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b648     46 52 45 51 
1b64c     46 52 45 51 
1b650     46 52 45 51 
1b654     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b658     46 52 45 51 
1b65c     46 52 45 51 
1b660     46 52 45 51 
1b664     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b668     46 52 45 51 
1b66c     46 52 45 51 
1b670     46 52 45 51 
1b674     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b678     46 52 45 51 
1b67c     46 52 45 51 
1b680     46 52 45 51 
1b684     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b688     46 52 45 51 
1b68c     46 52 45 51 
1b690     46 52 45 51 
1b694     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b698     46 52 45 51 
1b69c     46 52 45 51 
1b6a0     46 52 45 51 
1b6a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6a8     46 52 45 51 
1b6ac     46 52 45 51 
1b6b0     46 52 45 51 
1b6b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6b8     46 52 45 51 
1b6bc     46 52 45 51 
1b6c0     46 52 45 51 
1b6c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6c8     46 52 45 51 
1b6cc     46 52 45 51 
1b6d0     46 52 45 51 
1b6d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6d8     46 52 45 51 
1b6dc     46 52 45 51 
1b6e0     46 52 45 51 
1b6e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6e8     46 52 45 51 
1b6ec     46 52 45 51 
1b6f0     46 52 45 51 
1b6f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b6f8     46 52 45 51 
1b6fc     46 52 45 51 
1b700     46 52 45 51 
1b704     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b708     46 52 45 51 
1b70c     46 52 45 51 
1b710     46 52 45 51 
1b714     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b718     46 52 45 51 
1b71c     46 52 45 51 
1b720     46 52 45 51 
1b724     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b728     46 52 45 51 
1b72c     46 52 45 51 
1b730     46 52 45 51 
1b734     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b738     46 52 45 51 
1b73c     46 52 45 51 
1b740     46 52 45 51 
1b744     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b748     46 52 45 51 
1b74c     46 52 45 51 
1b750     46 52 45 51 
1b754     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b758     46 52 45 51 
1b75c     46 52 45 51 
1b760     46 52 45 51 
1b764     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b768     46 52 45 51 
1b76c     46 52 45 51 
1b770     46 52 45 51 
1b774     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b778     46 52 45 51 
1b77c     46 52 45 51 
1b780     46 52 45 51 
1b784     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b788     46 52 45 51 
1b78c     46 52 45 51 
1b790     46 52 45 51 
1b794     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b798     46 52 45 51 
1b79c     46 52 45 51 
1b7a0     46 52 45 51 
1b7a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7a8     46 52 45 51 
1b7ac     46 52 45 51 
1b7b0     46 52 45 51 
1b7b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7b8     46 52 45 51 
1b7bc     46 52 45 51 
1b7c0     46 52 45 51 
1b7c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7c8     46 52 45 51 
1b7cc     46 52 45 51 
1b7d0     46 52 45 51 
1b7d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7d8     46 52 45 51 
1b7dc     46 52 45 51 
1b7e0     46 52 45 51 
1b7e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7e8     46 52 45 51 
1b7ec     46 52 45 51 
1b7f0     46 52 45 51 
1b7f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b7f8     46 52 45 51 
1b7fc     46 52 45 51 
1b800     46 52 45 51 
1b804     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b808     46 52 45 51 
1b80c     46 52 45 51 
1b810     46 52 45 51 
1b814     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b818     46 52 45 51 
1b81c     46 52 45 51 
1b820     46 52 45 51 
1b824     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b828     46 52 45 51 
1b82c     46 52 45 51 
1b830     46 52 45 51 
1b834     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b838     46 52 45 51 
1b83c     46 52 45 51 
1b840     46 52 45 51 
1b844     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b848     46 52 45 51 
1b84c     46 52 45 51 
1b850     46 52 45 51 
1b854     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b858     46 52 45 51 
1b85c     46 52 45 51 
1b860     46 52 45 51 
1b864     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b868     46 52 45 51 
1b86c     46 52 45 51 
1b870     46 52 45 51 
1b874     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b878     46 52 45 51 
1b87c     46 52 45 51 
1b880     46 52 45 51 
1b884     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b888     46 52 45 51 
1b88c     46 52 45 51 
1b890     46 52 45 51 
1b894     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b898     46 52 45 51 
1b89c     46 52 45 51 
1b8a0     46 52 45 51 
1b8a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8a8     46 52 45 51 
1b8ac     46 52 45 51 
1b8b0     46 52 45 51 
1b8b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8b8     46 52 45 51 
1b8bc     46 52 45 51 
1b8c0     46 52 45 51 
1b8c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8c8     46 52 45 51 
1b8cc     46 52 45 51 
1b8d0     46 52 45 51 
1b8d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8d8     46 52 45 51 
1b8dc     46 52 45 51 
1b8e0     46 52 45 51 
1b8e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8e8     46 52 45 51 
1b8ec     46 52 45 51 
1b8f0     46 52 45 51 
1b8f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b8f8     46 52 45 51 
1b8fc     46 52 45 51 
1b900     46 52 45 51 
1b904     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b908     46 52 45 51 
1b90c     46 52 45 51 
1b910     46 52 45 51 
1b914     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b918     46 52 45 51 
1b91c     46 52 45 51 
1b920     46 52 45 51 
1b924     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b928     46 52 45 51 
1b92c     46 52 45 51 
1b930     46 52 45 51 
1b934     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b938     46 52 45 51 
1b93c     46 52 45 51 
1b940     46 52 45 51 
1b944     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b948     46 52 45 51 
1b94c     46 52 45 51 
1b950     46 52 45 51 
1b954     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b958     46 52 45 51 
1b95c     46 52 45 51 
1b960     46 52 45 51 
1b964     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b968     46 52 45 51 
1b96c     46 52 45 51 
1b970     46 52 45 51 
1b974     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b978     46 52 45 51 
1b97c     46 52 45 51 
1b980     46 52 45 51 
1b984     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b988     46 52 45 51 
1b98c     46 52 45 51 
1b990     46 52 45 51 
1b994     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b998     46 52 45 51 
1b99c     46 52 45 51 
1b9a0     46 52 45 51 
1b9a4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9a8     46 52 45 51 
1b9ac     46 52 45 51 
1b9b0     46 52 45 51 
1b9b4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9b8     46 52 45 51 
1b9bc     46 52 45 51 
1b9c0     46 52 45 51 
1b9c4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9c8     46 52 45 51 
1b9cc     46 52 45 51 
1b9d0     46 52 45 51 
1b9d4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9d8     46 52 45 51 
1b9dc     46 52 45 51 
1b9e0     46 52 45 51 
1b9e4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9e8     46 52 45 51 
1b9ec     46 52 45 51 
1b9f0     46 52 45 51 
1b9f4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1b9f8     46 52 45 51 
1b9fc     46 52 45 51 
1ba00     46 52 45 51 
1ba04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba08     46 52 45 51 
1ba0c     46 52 45 51 
1ba10     46 52 45 51 
1ba14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba18     46 52 45 51 
1ba1c     46 52 45 51 
1ba20     46 52 45 51 
1ba24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba28     46 52 45 51 
1ba2c     46 52 45 51 
1ba30     46 52 45 51 
1ba34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba38     46 52 45 51 
1ba3c     46 52 45 51 
1ba40     46 52 45 51 
1ba44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba48     46 52 45 51 
1ba4c     46 52 45 51 
1ba50     46 52 45 51 
1ba54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba58     46 52 45 51 
1ba5c     46 52 45 51 
1ba60     46 52 45 51 
1ba64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba68     46 52 45 51 
1ba6c     46 52 45 51 
1ba70     46 52 45 51 
1ba74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba78     46 52 45 51 
1ba7c     46 52 45 51 
1ba80     46 52 45 51 
1ba84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba88     46 52 45 51 
1ba8c     46 52 45 51 
1ba90     46 52 45 51 
1ba94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ba98     46 52 45 51 
1ba9c     46 52 45 51 
1baa0     46 52 45 51 
1baa4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baa8     46 52 45 51 
1baac     46 52 45 51 
1bab0     46 52 45 51 
1bab4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bab8     46 52 45 51 
1babc     46 52 45 51 
1bac0     46 52 45 51 
1bac4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bac8     46 52 45 51 
1bacc     46 52 45 51 
1bad0     46 52 45 51 
1bad4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bad8     46 52 45 51 
1badc     46 52 45 51 
1bae0     46 52 45 51 
1bae4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bae8     46 52 45 51 
1baec     46 52 45 51 
1baf0     46 52 45 51 
1baf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1baf8     46 52 45 51 
1bafc     46 52 45 51 
1bb00     46 52 45 51 
1bb04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb08     46 52 45 51 
1bb0c     46 52 45 51 
1bb10     46 52 45 51 
1bb14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb18     46 52 45 51 
1bb1c     46 52 45 51 
1bb20     46 52 45 51 
1bb24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb28     46 52 45 51 
1bb2c     46 52 45 51 
1bb30     46 52 45 51 
1bb34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb38     46 52 45 51 
1bb3c     46 52 45 51 
1bb40     46 52 45 51 
1bb44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb48     46 52 45 51 
1bb4c     46 52 45 51 
1bb50     46 52 45 51 
1bb54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb58     46 52 45 51 
1bb5c     46 52 45 51 
1bb60     46 52 45 51 
1bb64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb68     46 52 45 51 
1bb6c     46 52 45 51 
1bb70     46 52 45 51 
1bb74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb78     46 52 45 51 
1bb7c     46 52 45 51 
1bb80     46 52 45 51 
1bb84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb88     46 52 45 51 
1bb8c     46 52 45 51 
1bb90     46 52 45 51 
1bb94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bb98     46 52 45 51 
1bb9c     46 52 45 51 
1bba0     46 52 45 51 
1bba4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bba8     46 52 45 51 
1bbac     46 52 45 51 
1bbb0     46 52 45 51 
1bbb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbb8     46 52 45 51 
1bbbc     46 52 45 51 
1bbc0     46 52 45 51 
1bbc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbc8     46 52 45 51 
1bbcc     46 52 45 51 
1bbd0     46 52 45 51 
1bbd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbd8     46 52 45 51 
1bbdc     46 52 45 51 
1bbe0     46 52 45 51 
1bbe4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbe8     46 52 45 51 
1bbec     46 52 45 51 
1bbf0     46 52 45 51 
1bbf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bbf8     46 52 45 51 
1bbfc     46 52 45 51 
1bc00     46 52 45 51 
1bc04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc08     46 52 45 51 
1bc0c     46 52 45 51 
1bc10     46 52 45 51 
1bc14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc18     46 52 45 51 
1bc1c     46 52 45 51 
1bc20     46 52 45 51 
1bc24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc28     46 52 45 51 
1bc2c     46 52 45 51 
1bc30     46 52 45 51 
1bc34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc38     46 52 45 51 
1bc3c     46 52 45 51 
1bc40     46 52 45 51 
1bc44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc48     46 52 45 51 
1bc4c     46 52 45 51 
1bc50     46 52 45 51 
1bc54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc58     46 52 45 51 
1bc5c     46 52 45 51 
1bc60     46 52 45 51 
1bc64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc68     46 52 45 51 
1bc6c     46 52 45 51 
1bc70     46 52 45 51 
1bc74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc78     46 52 45 51 
1bc7c     46 52 45 51 
1bc80     46 52 45 51 
1bc84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc88     46 52 45 51 
1bc8c     46 52 45 51 
1bc90     46 52 45 51 
1bc94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bc98     46 52 45 51 
1bc9c     46 52 45 51 
1bca0     46 52 45 51 
1bca4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bca8     46 52 45 51 
1bcac     46 52 45 51 
1bcb0     46 52 45 51 
1bcb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcb8     46 52 45 51 
1bcbc     46 52 45 51 
1bcc0     46 52 45 51 
1bcc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcc8     46 52 45 51 
1bccc     46 52 45 51 
1bcd0     46 52 45 51 
1bcd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcd8     46 52 45 51 
1bcdc     46 52 45 51 
1bce0     46 52 45 51 
1bce4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bce8     46 52 45 51 
1bcec     46 52 45 51 
1bcf0     46 52 45 51 
1bcf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bcf8     46 52 45 51 
1bcfc     46 52 45 51 
1bd00     46 52 45 51 
1bd04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd08     46 52 45 51 
1bd0c     46 52 45 51 
1bd10     46 52 45 51 
1bd14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd18     46 52 45 51 
1bd1c     46 52 45 51 
1bd20     46 52 45 51 
1bd24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd28     46 52 45 51 
1bd2c     46 52 45 51 
1bd30     46 52 45 51 
1bd34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd38     46 52 45 51 
1bd3c     46 52 45 51 
1bd40     46 52 45 51 
1bd44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd48     46 52 45 51 
1bd4c     46 52 45 51 
1bd50     46 52 45 51 
1bd54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd58     46 52 45 51 
1bd5c     46 52 45 51 
1bd60     46 52 45 51 
1bd64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd68     46 52 45 51 
1bd6c     46 52 45 51 
1bd70     46 52 45 51 
1bd74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd78     46 52 45 51 
1bd7c     46 52 45 51 
1bd80     46 52 45 51 
1bd84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd88     46 52 45 51 
1bd8c     46 52 45 51 
1bd90     46 52 45 51 
1bd94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bd98     46 52 45 51 
1bd9c     46 52 45 51 
1bda0     46 52 45 51 
1bda4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bda8     46 52 45 51 
1bdac     46 52 45 51 
1bdb0     46 52 45 51 
1bdb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdb8     46 52 45 51 
1bdbc     46 52 45 51 
1bdc0     46 52 45 51 
1bdc4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdc8     46 52 45 51 
1bdcc     46 52 45 51 
1bdd0     46 52 45 51 
1bdd4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdd8     46 52 45 51 
1bddc     46 52 45 51 
1bde0     46 52 45 51 
1bde4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bde8     46 52 45 51 
1bdec     46 52 45 51 
1bdf0     46 52 45 51 
1bdf4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bdf8     46 52 45 51 
1bdfc     46 52 45 51 
1be00     46 52 45 51 
1be04     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be08     46 52 45 51 
1be0c     46 52 45 51 
1be10     46 52 45 51 
1be14     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be18     46 52 45 51 
1be1c     46 52 45 51 
1be20     46 52 45 51 
1be24     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be28     46 52 45 51 
1be2c     46 52 45 51 
1be30     46 52 45 51 
1be34     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be38     46 52 45 51 
1be3c     46 52 45 51 
1be40     46 52 45 51 
1be44     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be48     46 52 45 51 
1be4c     46 52 45 51 
1be50     46 52 45 51 
1be54     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be58     46 52 45 51 
1be5c     46 52 45 51 
1be60     46 52 45 51 
1be64     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be68     46 52 45 51 
1be6c     46 52 45 51 
1be70     46 52 45 51 
1be74     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be78     46 52 45 51 
1be7c     46 52 45 51 
1be80     46 52 45 51 
1be84     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be88     46 52 45 51 
1be8c     46 52 45 51 
1be90     46 52 45 51 
1be94     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1be98     46 52 45 51 
1be9c     46 52 45 51 
1bea0     46 52 45 51 
1bea4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1bea8     46 52 45 51 
1beac     46 52 45 51 
1beb0     46 52 45 51 
1beb4     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1beb8                 | 
1beb8     00 00 00 00 
1bebc     18 00 00 00 
1bec0     31 00 00 00 
1bec4     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1bec8     61 00 00 00 
1becc     78 00 00 00 
1bed0     8D 00 00 00 
1bed4     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1bed8     B4 00 00 00 
1bedc     C5 00 00 00 
1bee0     D4 00 00 00 
1bee4     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1bee8     EB 00 00 00 
1beec     F4 00 00 00 
1bef0     FA 00 00 00 
1bef4     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1bef8     FF 00 00 00 
1befc     FD 00 00 00 
1bf00     FA 00 00 00 
1bf04     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1bf08     EB 00 00 00 
1bf0c     E0 00 00 00 
1bf10     D4 00 00 00 
1bf14     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1bf18     B4 00 00 00 
1bf1c     A1 00 00 00 
1bf20     8D 00 00 00 
1bf24     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1bf28     61 00 00 00 
1bf2c     4A 00 00 00 
1bf30     31 00 00 00 
1bf34     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1bf38     00 00 00 00 
1bf3c     E8 FF FF FF 
1bf40     CF FF FF FF 
1bf44     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1bf48     9F FF FF FF 
1bf4c     88 FF FF FF 
1bf50     73 FF FF FF 
1bf54     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1bf58     4C FF FF FF 
1bf5c     3B FF FF FF 
1bf60     2C FF FF FF 
1bf64     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1bf68     15 FF FF FF 
1bf6c     0C FF FF FF 
1bf70     06 FF FF FF 
1bf74     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1bf78     01 FF FF FF 
1bf7c     03 FF FF FF 
1bf80     06 FF FF FF 
1bf84     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1bf88     15 FF FF FF 
1bf8c     20 FF FF FF 
1bf90     2C FF FF FF 
1bf94     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1bf98     4C FF FF FF 
1bf9c     5F FF FF FF 
1bfa0     73 FF FF FF 
1bfa4     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1bfa8     9F FF FF FF 
1bfac     B6 FF FF FF 
1bfb0     CF FF FF FF 
1bfb4     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1bfb8                 | 
1bfb8     58 03 28 03 
1bfbc     FA 02 D0 02 
1bfc0     A6 02 80 02 
1bfc4     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1bfc8     1A 02 FC 01 
1bfcc     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1bfd0     AC 01 94 01 
1bfd4     7D 01 68 01 
1bfd8     53 01 40 01 
1bfdc     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1bfe0     0D 01 FE 00 
1bfe4     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1bfe8     D6 00 CA 00 
1bfec     BE 00 B4 00 
1bff0     AA 00 A0 00 
1bff4     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1bff8     87 00 7F 00 
1bffc     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1c000     52 03 22 03 
1c004     F5 02 CB 02 
1c008     A2 02 7D 02 
1c00c     59 02 37 02 |                  word  850 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1c010     17 02 F9 01 
1c014     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1c018     A9 01 91 01 
1c01c     7B 01 65 01 
1c020     51 01 3E 01 
1c024     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1c028     0C 01 FD 00 
1c02c     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1c030     D5 00 C9 00 
1c034     BD 00 B3 00 
1c038     A9 00 9F 00 
1c03c     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1c040     86 00 7E 00 
1c044     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1c048     4C 03 1C 03 
1c04c     F0 02 C5 02 
1c050     9E 02 78 02 
1c054     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1c058     14 02 F6 01 
1c05c     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1c060     A6 01 8E 01 
1c064     78 01 63 01 
1c068     4F 01 3C 01 
1c06c     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1c070     0A 01 FB 00 
1c074     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1c078     D3 00 C7 00 
1c07c     BC 00 B1 00 
1c080     A7 00 9E 00 
1c084     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1c088     85 00 7D 00 
1c08c     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1c090     46 03 17 03 
1c094     EA 02 C0 02 
1c098     99 02 74 02 
1c09c     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1c0a0     10 02 F2 01 
1c0a4     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1c0a8     A3 01 8B 01 
1c0ac     75 01 60 01 
1c0b0     4C 01 3A 01 
1c0b4     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1c0b8     08 01 F9 00 
1c0bc     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1c0c0     D1 00 C6 00 
1c0c4     BB 00 B0 00 
1c0c8     A6 00 9D 00 
1c0cc     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1c0d0     84 00 7D 00 
1c0d4     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1c0d8     40 03 11 03 
1c0dc     E5 02 BB 02 
1c0e0     94 02 6F 02 
1c0e4     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1c0e8     0C 02 EF 01 
1c0ec     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1c0f0     A0 01 88 01 
1c0f4     72 01 5E 01 
1c0f8     4A 01 38 01 
1c0fc     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1c100     06 01 F7 00 
1c104     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1c108     D0 00 C4 00 
1c10c     B9 00 AF 00 
1c110     A5 00 9C 00 
1c114     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1c118     83 00 7C 00 
1c11c     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1c120     3A 03 0B 03 
1c124     E0 02 B6 02 
1c128     8F 02 6B 02 
1c12c     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1c130     08 02 EB 01 
1c134     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1c138     9D 01 86 01 
1c13c     70 01 5B 01 
1c140     48 01 35 01 
1c144     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1c148     04 01 F5 00 
1c14c     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1c150     CE 00 C3 00 
1c154     B8 00 AE 00 
1c158     A4 00 9B 00 
1c15c     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1c160     82 00 7B 00 
1c164     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1c168     34 03 06 03 
1c16c     DA 02 B1 02 
1c170     8B 02 66 02 
1c174     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1c178     04 02 E7 01 
1c17c     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1c180     9A 01 83 01 
1c184     6D 01 59 01 
1c188     45 01 33 01 
1c18c     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1c190     02 01 F4 00 
1c194     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1c198     CD 00 C1 00 
1c19c     B7 00 AC 00 
1c1a0     A3 00 9A 00 
1c1a4     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1c1a8     81 00 7A 00 
1c1ac     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1c1b0     2E 03 00 03 
1c1b4     D5 02 AC 02 
1c1b8     86 02 62 02 
1c1bc     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1c1c0     01 02 E4 01 
1c1c4     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1c1c8     97 01 80 01 
1c1cc     6B 01 56 01 
1c1d0     43 01 31 01 
1c1d4     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1c1d8     00 01 F2 00 
1c1dc     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1c1e0     CC 00 C0 00 
1c1e4     B5 00 AB 00 
1c1e8     A1 00 98 00 
1c1ec     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1c1f0     80 00 79 00 
1c1f4     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1c1f8     8B 03 58 03 
1c1fc     28 03 FA 02 
1c200     D0 02 A6 02 
1c204     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1c208     3A 02 1A 02 
1c20c     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1c210     C5 01 AC 01 
1c214     94 01 7D 01 
1c218     68 01 53 01 
1c21c     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1c220     1D 01 0D 01 
1c224     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1c228     E2 00 D6 00 
1c22c     CA 00 BE 00 
1c230     B4 00 AA 00 
1c234     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1c238     8F 00 87 00 
1c23c     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1c240     84 03 52 03 
1c244     22 03 F5 02 
1c248     CB 02 A3 02 
1c24c     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1c250     37 02 17 02 
1c254     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1c258     C2 01 A9 01 
1c25c     91 01 7B 01 
1c260     65 01 51 01 
1c264     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1c268     1C 01 0C 01 
1c26c     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1c270     E1 00 D4 00 
1c274     C8 00 BD 00 
1c278     B3 00 A9 00 
1c27c     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1c280     8E 00 86 00 
1c284     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1c288     7E 03 4C 03 
1c28c     1C 03 F0 02 
1c290     C5 02 9E 02 
1c294     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1c298     33 02 14 02 
1c29c     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1c2a0     BF 01 A6 01 
1c2a4     8E 01 78 01 
1c2a8     63 01 4F 01 
1c2ac     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1c2b0     1A 01 0A 01 
1c2b4     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1c2b8     DF 00 D3 00 
1c2bc     C7 00 BC 00 
1c2c0     B1 00 A7 00 
1c2c4     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1c2c8     8D 00 85 00 
1c2cc     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1c2d0     77 03 46 03 
1c2d4     17 03 EA 02 
1c2d8     C0 02 99 02 
1c2dc     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1c2e0     2F 02 10 02 
1c2e4     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1c2e8     BC 01 A3 01 
1c2ec     8B 01 75 01 
1c2f0     60 01 4C 01 
1c2f4     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1c2f8     18 01 08 01 
1c2fc     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1c300     DE 00 D1 00 
1c304     C6 00 BB 00 
1c308     B0 00 A6 00 
1c30c     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1c310     8C 00 84 00 
1c314     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1c318     71 03 40 03 
1c31c     11 03 E5 02 
1c320     BB 02 94 02 
1c324     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1c328     2B 02 0C 02 
1c32c     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1c330     B9 01 A0 01 
1c334     88 01 72 01 
1c338     5E 01 4A 01 
1c33c     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1c340     16 01 06 01 
1c344     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1c348     DC 00 D0 00 
1c34c     C4 00 B9 00 
1c350     AF 00 A5 00 
1c354     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1c358     8B 00 83 00 
1c35c     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1c360     6B 03 3A 03 
1c364     0B 03 E0 02 
1c368     B6 02 8F 02 
1c36c     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1c370     27 02 08 02 
1c374     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1c378     B5 01 9D 01 
1c37c     86 01 70 01 
1c380     5B 01 48 01 
1c384     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1c388     14 01 04 01 
1c38c     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1c390     DB 00 CE 00 
1c394     C3 00 B8 00 
1c398     AE 00 A4 00 
1c39c     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1c3a0     8A 00 82 00 
1c3a4     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1c3a8     64 03 34 03 
1c3ac     06 03 DA 02 
1c3b0     B1 02 8B 02 
1c3b4     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1c3b8     23 02 04 02 
1c3bc     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1c3c0     B2 01 9A 01 
1c3c4     83 01 6D 01 
1c3c8     59 01 45 01 
1c3cc     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1c3d0     12 01 02 01 
1c3d4     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1c3d8     D9 00 CD 00 
1c3dc     C1 00 B7 00 
1c3e0     AC 00 A3 00 
1c3e4     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1c3e8     89 00 81 00 
1c3ec     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1c3f0     5E 03 2E 03 
1c3f4     00 03 D5 02 
1c3f8     AC 02 86 02 
1c3fc     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1c400     1F 02 01 02 
1c404     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1c408     AF 01 97 01 
1c40c     80 01 6B 01 
1c410     56 01 43 01 
1c414     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1c418     10 01 00 01 
1c41c     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1c420     D8 00 CB 00 
1c424     C0 00 B5 00 
1c428     AB 00 A1 00 
1c42c     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1c430     88 00 80 00 
1c434     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1c438                 | 	alignl
1c438                 | _audio014_spin2_dat_
1c438                 | 
1c438                 | audio       org     0
1c438     00 F2 07 F6 | 			mov ptrb,#0
1c43c     0E 84 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1c440     0E C8 1C FC |             wxpin   #100,#left
1c444                 | 
1c444     0F 84 07 FC |             wrpin   dac,#right
1c448     0F C8 1C FC |             wxpin   #100,#right
1c44c                 | 
1c44c     41 9C 64 FD |             dirh    #left addpins 1
1c450                 | 
1c450     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1c454     30 E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1c458     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1c45c                 |             
1c45c                 | '---------------------------------------------------------------------------------        
1c45c                 | '----------------- The main loop -------------------------------------------------
1c45c                 | '---------------------------------------------------------------------------------
1c45c                 | 
1c45c     28 10 64 FD | loop        setq    #8              ' Read channel regs from the hub
1c460     61 B7 06 FB |             rdlong  sstart1,ptra++
1c464     28 10 64 FD |             setq    #8              ' Cannot do one big setq+rdlong as it interferes with interrupts
1c468     61 C9 06 FB |             rdlong  sstart2,ptra++
1c46c     28 10 64 FD |             setq    #8
1c470     61 DB 06 FB |             rdlong  sstart3,ptra++
1c474     28 10 64 FD |             setq    #8
1c478     61 ED 06 FB |             rdlong  sstart4,ptra++
1c47c     28 10 64 FD |             setq    #8
1c480     61 FF 06 FB |             rdlong  sstart5,ptra++
1c484     28 10 64 FD |             setq    #8
1c488     61 11 07 FB |             rdlong  sstart6,ptra++
1c48c     28 10 64 FD |             setq    #8
1c490     61 23 07 FB |             rdlong  sstart7,ptra++
1c494     28 10 64 FD |             setq    #8
1c498     61 35 07 FB |             rdlong  sstart8,ptra++
1c49c                 | 
1c49c     20 F1 87 F1 |             sub     ptra,#9*4*8    
1c4a0                 |             
1c4a0     3E 47 13 F2 |             cmp     time0,a21000000 wc
1c4a4                 | 
1c4a4     3D 49 83 31 |      if_nc  sub     time1,a20000000
1c4a8     3D 4B 83 31 |      if_nc  sub     time2,a20000000
1c4ac     3D 4D 83 31 |      if_nc  sub     time3,a20000000
1c4b0     3D 4F 83 31 |      if_nc  sub     time4,a20000000
1c4b4     3D 51 83 31 |      if_nc  sub     time5,a20000000
1c4b8     3D 53 83 31 |      if_nc  sub     time6,a20000000
1c4bc     3D 55 83 31 |      if_nc  sub     time7,a20000000
1c4c0     3D 57 83 31 |      if_nc  sub     time8,a20000000
1c4c4     3D 47 83 31 |      if_nc  sub     time0,a20000000
1c4c8                 | 
1c4c8                 |        
1c4c8                 |     
1c4c8     00 C6 0E F2 | loop1           cmp     acmd1,#0 wz     ' if cmd=0, zero the phase accumulator
1c4cc     00 94 06 A6 |     if_e    mov     p1,#0
1c4d0     00 D8 0E F2 |             cmp     acmd2,#0 wz
1c4d4     00 96 06 A6 |     if_e    mov     p2,#0
1c4d8     00 EA 0E F2 |             cmp     acmd3,#0 wz
1c4dc     00 98 06 A6 |     if_e    mov     p3,#0
1c4e0     00 FC 0E F2 |             cmp     acmd4,#0 wz
1c4e4     00 9A 06 A6 |     if_e    mov     p4,#0
1c4e8     00 0E 0F F2 |             cmp     acmd5,#0 wz
1c4ec     00 9C 06 A6 |     if_e    mov     p5,#0
1c4f0     00 20 0F F2 |             cmp     acmd6,#0 wz
1c4f4     00 9E 06 A6 |     if_e    mov     p6,#0
1c4f8     00 32 0F F2 |             cmp     acmd7,#0 wz
1c4fc     00 A0 06 A6 |     if_e    mov     p7,#0
1c500     00 44 0F F2 |             cmp     acmd8,#0 wz
1c504     00 A2 06 A6 |     if_e    mov     p8,#0
1c508                 |           
1c508     F9 A5 02 F6 |             mov     qq,ptrb         ' Check if the buffer is full	
1c50c     02 A4 86 F1 |             sub     qq,#2
1c510     FF A5 06 F5 |             and     qq,#511
1c514     54 A5 1A F2 |             cmp     qq,front wcz
1c518     40 FF 9F AD |     if_e    jmp     #loop           ' If the buffer is full, do nothing               
1c51c                 |       
1c51c     4A 5A 07 F6 |             mov     cn,#p201           ' Find the channel to compute
1c520     A4 5D 03 F6 |             mov     ct,time1        ' with the lowest next sample time
1c524     A5 5D 3B F3 |             fle     ct,time2 wcz   
1c528     62 5A 07 C6 |     if_c    mov     cn,#p202 
1c52c     A6 5D 3B F3 |             fle     ct,time3 wcz
1c530     7A 5A 07 C6 |     if_c    mov     cn,#p203     
1c534     A7 5D 3B F3 |             fle     ct,time4 wcz
1c538     92 5A 07 C6 |     if_c    mov     cn,#p204
1c53c     A8 5D 3B F3 |             fle     ct,time5 wcz
1c540     AA 5A 07 C6 |     if_c    mov     cn,#p205 
1c544     A9 5D 3B F3 |             fle     ct,time6 wcz
1c548     C1 5A 07 C6 |     if_c    mov     cn,#p206
1c54c     AA 5D 3B F3 |             fle     ct,time7 wcz
1c550     D8 5A 07 C6 |     if_c    mov     cn,#p207
1c554     AB 5D 3B F3 |             fle     ct,time8 wcz
1c558     EF 5A 07 C6 |     if_c    mov     cn,#p208 
1c55c                 |  
1c55c     2C 5A 63 FD |             jmp     cn
1c560                 |    
1c560                 | '----------------------------------------------------------------------------------
1c560                 | '------------- Compute channel samples --------------------------------------------
1c560                 | '----------------------------------------------------------------------------------
1c560                 | 	
1c560                 | ' ------------  Channel 1
1c560                 |  
1c560     A4 5F 03 F6 | p201        mov     dt0,time1      ' compute the delta to add to the global time
1c564     A3 5F 83 F1 |             sub     dt0,time0
1c568     61 49 03 F1 |             add     time1,freq1    ' compute the next channel time	
1c56c                 | 	        
1c56c     62 95 02 F1 |             add     p1,askip1      ' update the phase accumulator
1c570     5E 95 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
1c574     5E 95 82 31 |     if_ge   sub     p1,lend1	        
1c578     5D 95 02 31 |     if_ge   add     p1,lstart1       
1c57c     4A A5 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
1c580     5B A5 02 F1 |             add     qq,sstart1
1c584                 |             
1c584     00 B8 0E F2 |             cmp     type1,#0 wz    ' check the sample type
1c588     52 A7 C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
1c58c     08 A6 66 50 |     if_nz   shl     spl,#8
1c590     52 A7 E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
1c594     80 03 B0 FD |             call    #delay
1c598     5F A7 32 FA |             scas    spl,vol1       ' apply the volume
1c59c     00 A6 02 F6 |             mov     spl,0-0
1c5a0                 | 
1c5a0     60 A7 32 FA |             scas    spl,apan1      ' apply the pan
1c5a4     00 64 03 F6 |             mov     ls1,0-0
1c5a8     20 00 00 FF 
1c5ac     00 A4 06 F6 |             mov     qq,##16384
1c5b0     60 A5 82 F1 |             sub     qq,apan1
1c5b4     52 A7 32 FA |             scas    spl,qq
1c5b8     00 66 03 F6 |             mov     rs1,0-0
1c5bc                 |             
1c5bc     90 02 90 FD |             jmp     #p101              
1c5c0                 | 	    	
1c5c0                 | ' ------------  Channel 2
1c5c0                 |  
1c5c0     A5 5F 03 F6 | p202        mov     dt0,time2
1c5c4     A3 5F 83 F1 |             sub     dt0,time0
1c5c8     6A 4B 03 F1 |             add     time2,freq2  	
1c5cc                 | 	        
1c5cc     6B 97 02 F1 |             add     p2,askip2
1c5d0     67 97 1A F2 |             cmp     p2,lend2 wcz
1c5d4     67 97 82 31 |     if_ge   sub     p2,lend2	        
1c5d8     66 97 02 31 |     if_ge   add     p2,lstart2       
1c5dc     4B A5 02 F6 |             mov     qq,p2
1c5e0     64 A5 02 F1 |             add     qq,sstart2
1c5e4                 | 
1c5e4     00 CA 0E F2 |             cmp     type2,#0 wz
1c5e8     52 A7 C2 5A |     if_nz   rdbyte  spl,qq
1c5ec     08 A6 66 50 |     if_nz   shl     spl,#8
1c5f0     52 A7 E2 AA |     if_z    rdword  spl,qq
1c5f4     20 03 B0 FD |             call #delay
1c5f8     68 A7 32 FA |             scas    spl,vol2
1c5fc     00 A6 02 F6 |             mov     spl,0-0
1c600                 |             
1c600     69 A7 32 FA |             scas    spl,apan2
1c604     00 68 03 F6 |             mov     ls2,0-0
1c608     20 00 00 FF 
1c60c     00 A4 06 F6 |             mov     qq,##16384
1c610     69 A5 82 F1 |             sub     qq,apan2
1c614     52 A7 32 FA |             scas    spl,qq
1c618     00 6A 03 F6 |             mov     rs2,0-0
1c61c                 |             
1c61c     30 02 90 FD |             jmp     #p101
1c620                 | 
1c620                 | ' ------------  Channel 3
1c620                 |  
1c620     A6 5F 03 F6 | p203        mov     dt0,time3
1c624     A3 5F 83 F1 |             sub     dt0,time0
1c628     73 4D 03 F1 |             add     time3,freq3  	
1c62c                 | 	        
1c62c     74 99 02 F1 |             add     p3,askip3
1c630     70 99 1A F2 |             cmp     p3,lend3 wcz
1c634     70 99 82 31 |     if_ge   sub     p3,lend3	        
1c638     6F 99 02 31 |     if_ge   add     p3,lstart3       
1c63c     4C A5 02 F6 |             mov     qq,p3
1c640     6D A5 02 F1 |             add     qq,sstart3
1c644                 |             
1c644     00 DC 0E F2 |             cmp     type3,#0 wz
1c648     52 A7 C2 5A |     if_nz   rdbyte  spl,qq
1c64c     08 A6 66 50 |     if_nz   shl     spl,#8
1c650     52 A7 E2 AA |     if_z    rdword  spl,qq
1c654     C0 02 B0 FD |             call #delay
1c658     71 A7 32 FA |             scas    spl,vol3
1c65c     00 A6 02 F6 |             mov     spl,0-0
1c660                 |     	
1c660     72 A7 32 FA |             scas    spl,apan3
1c664     00 6C 03 F6 |             mov     ls3,0-0
1c668                 |             
1c668     20 00 00 FF 
1c66c     00 A4 06 F6 |             mov     qq,##16384
1c670     72 A5 82 F1 |             sub     qq,apan3
1c674     52 A7 32 FA |             scas    spl,qq
1c678     00 6E 03 F6 |             mov     rs3,0-0
1c67c                 | 
1c67c     D0 01 90 FD |             jmp     #p101
1c680                 |             
1c680                 | ' ------------  Channel 4
1c680                 |  
1c680     A7 5F 03 F6 | p204        mov     dt0,time4
1c684     A3 5F 83 F1 |             sub     dt0,time0
1c688     7C 4F 03 F1 |             add     time4,freq4  	
1c68c                 | 
1c68c                 | 	        
1c68c     7D 9B 02 F1 |             add     p4,askip4
1c690     79 9B 1A F2 |             cmp     p4,lend4 wcz
1c694     79 9B 82 31 |     if_ge   sub     p4,lend4	        
1c698     78 9B 02 31 |     if_ge   add     p4,lstart4       
1c69c     4D A5 02 F6 |             mov     qq,p4
1c6a0     76 A5 02 F1 |             add     qq,sstart4
1c6a4                 |             
1c6a4     00 EE 0E F2 |             cmp     type4,#0 wz
1c6a8     52 A7 C2 5A |     if_nz   rdbyte  spl,qq
1c6ac     08 A6 66 50 |     if_nz   shl     spl,#8
1c6b0     52 A7 E2 AA |     if_z    rdword  spl,qq
1c6b4     60 02 B0 FD |            call #delay
1c6b8     7A A7 32 FA |             scas    spl,vol4
1c6bc     00 A6 02 F6 |             mov     spl,0-0
1c6c0                 |     	
1c6c0     7B A7 32 FA |             scas    spl,apan4
1c6c4     00 72 03 F6 |             mov     ls4,0-0
1c6c8                 |             
1c6c8     20 00 00 FF 
1c6cc     00 A4 06 F6 |             mov     qq,##16384
1c6d0     7B A5 82 F1 |             sub     qq,apan4
1c6d4     52 A7 32 FA |             scas    spl,qq
1c6d8     00 70 03 F6 |             mov     rs4,0-0
1c6dc                 | 
1c6dc     70 01 90 FD |             jmp     #p101
1c6e0                 |             
1c6e0                 | ' ------------  Channel 5
1c6e0                 |  
1c6e0     A8 5F 03 F6 | p205        mov     dt0,time5
1c6e4     A3 5F 83 F1 |             sub     dt0,time0
1c6e8     85 51 03 F1 |             add     time5,freq5  	
1c6ec                 | 
1c6ec                 | 	        
1c6ec     86 9D 02 F1 |             add     p5,askip5
1c6f0     82 9D 1A F2 |             cmp     p5,lend5 wcz
1c6f4     82 9D 82 31 |     if_ge   sub     p5,lend5	        
1c6f8     81 9D 02 31 |     if_ge   add     p5,lstart5       
1c6fc     4E A5 02 F6 |             mov     qq,p5
1c700     7F A5 02 F1 |             add     qq,sstart5
1c704                 |             
1c704     00 00 0F F2 |             cmp     type5,#0 wz
1c708     52 A7 C2 5A |     if_nz   rdbyte  spl,qq
1c70c     08 A6 66 50 |     if_nz   shl     spl,#8
1c710     52 A7 E2 AA |     if_z    rdword  spl,qq
1c714                 | 
1c714     83 A7 32 FA |             scas    spl,vol5
1c718     00 A6 02 F6 |             mov     spl,0-0
1c71c                 |     	
1c71c     84 A7 32 FA |             scas    spl,apan5
1c720     00 76 03 F6 |             mov     ls5,0-0
1c724                 |             
1c724     20 00 00 FF 
1c728     00 A4 06 F6 |             mov     qq,##16384
1c72c     84 A5 82 F1 |             sub     qq,apan5
1c730     52 A7 32 FA |             scas    spl,qq
1c734     00 74 03 F6 |             mov     rs5,0-0
1c738                 | 
1c738     14 01 90 FD |             jmp     #p101
1c73c                 |   
1c73c                 | ' ------------  Channel 6
1c73c                 |  
1c73c     A9 5F 03 F6 | p206        mov     dt0,time6
1c740     A3 5F 83 F1 |             sub     dt0,time0
1c744     8E 53 03 F1 |             add     time6,freq6  	
1c748                 | 
1c748                 | 	        
1c748     8F 9F 02 F1 |             add     p6,askip6
1c74c     8B 9F 1A F2 |             cmp     p6,lend6 wcz
1c750     8B 9F 82 31 |     if_ge   sub     p6,lend6	        
1c754     8A 9F 02 31 |     if_ge   add     p6,lstart6       
1c758     4F A5 02 F6 |             mov     qq,p6
1c75c     88 A5 02 F1 |             add     qq,sstart6
1c760                 |             
1c760     00 12 0F F2 |             cmp     type6,#0 wz
1c764     52 A7 C2 5A |     if_nz   rdbyte  spl,qq
1c768     08 A6 66 50 |     if_nz   shl     spl,#8
1c76c     52 A7 E2 AA |     if_z    rdword  spl,qq
1c770                 |           
1c770     8C A7 32 FA |             scas    spl,vol6
1c774     00 A6 02 F6 |             mov     spl,0-0
1c778                 |     	
1c778     8D A7 32 FA |             scas    spl,apan6
1c77c     00 7A 03 F6 |             mov     ls6,0-0
1c780                 |             
1c780     20 00 00 FF 
1c784     00 A4 06 F6 |             mov     qq,##16384
1c788     8D A5 82 F1 |             sub     qq,apan6
1c78c     52 A7 32 FA |             scas    spl,qq
1c790     00 78 03 F6 |             mov     rs6,0-0
1c794                 | 
1c794     B8 00 90 FD |             jmp     #p101
1c798                 |             
1c798                 | ' ------------  Channel 7
1c798                 |  
1c798     AA 5F 03 F6 | p207        mov     dt0,time7
1c79c     A3 5F 83 F1 |             sub     dt0,time0
1c7a0     97 55 03 F1 |             add     time7,freq7  	
1c7a4                 | 
1c7a4                 | 	        
1c7a4     98 A1 02 F1 |             add     p7,askip7
1c7a8     94 A1 1A F2 |             cmp     p7,lend7 wcz
1c7ac     94 A1 82 31 |     if_ge   sub     p7,lend7	        
1c7b0     93 A1 02 31 |     if_ge   add     p7,lstart7       
1c7b4     50 A5 02 F6 |             mov     qq,p7
1c7b8     91 A5 02 F1 |             add     qq,sstart7
1c7bc                 |             
1c7bc     00 24 0F F2 |             cmp     type7,#0 wz
1c7c0     52 A7 C2 5A |     if_nz   rdbyte  spl,qq
1c7c4     08 A6 66 50 |     if_nz   shl     spl,#8
1c7c8     52 A7 E2 AA |     if_z    rdword  spl,qq
1c7cc                 | 
1c7cc     95 A7 32 FA |             scas    spl,vol7
1c7d0     00 A6 02 F6 |             mov     spl,0-0
1c7d4                 |     	
1c7d4     96 A7 32 FA |             scas    spl,apan7
1c7d8     00 7E 03 F6 |             mov     ls7,0-0
1c7dc                 |             
1c7dc     20 00 00 FF 
1c7e0     00 A4 06 F6 |             mov     qq,##16384
1c7e4     96 A5 82 F1 |             sub     qq,apan7
1c7e8     52 A7 32 FA |             scas    spl,qq
1c7ec     00 7C 03 F6 |             mov     rs7,0-0
1c7f0                 | 
1c7f0     5C 00 90 FD |             jmp     #p101     
1c7f4                 |                    
1c7f4                 | ' ------------  Channel 8
1c7f4                 |  
1c7f4     AB 5F 03 F6 | p208        mov     dt0,time8
1c7f8     A3 5F 83 F1 |             sub     dt0,time0
1c7fc     A0 57 03 F1 |             add     time8,freq8  	
1c800                 | 
1c800                 | 	        
1c800     A1 A3 02 F1 |             add     p8,askip8
1c804     9D A3 1A F2 |             cmp     p8,lend8 wcz
1c808     9D A3 82 31 |     if_ge   sub     p8,lend8	        
1c80c     9C A3 02 31 |     if_ge   add     p8,lstart8       
1c810     51 A5 02 F6 |             mov     qq,p8
1c814     9A A5 02 F1 |             add     qq,sstart8
1c818                 |             
1c818     00 36 0F F2 |             cmp     type8,#0 wz
1c81c     52 A7 C2 5A |     if_nz   rdbyte  spl,qq
1c820     08 A6 66 50 |     if_nz   shl     spl,#8
1c824     52 A7 E2 AA |     if_z    rdword  spl,qq
1c828                 | 
1c828     9E A7 32 FA |             scas    spl,vol8
1c82c     00 A6 02 F6 |             mov     spl,0-0
1c830                 |     	
1c830     9F A7 32 FA |             scas    spl,apan8
1c834     00 82 03 F6 |             mov     ls8,0-0
1c838                 |             
1c838     20 00 00 FF 
1c83c     00 A4 06 F6 |             mov     qq,##16384
1c840     9F A5 82 F1 |             sub     qq,apan8
1c844     52 A7 32 FA |             scas    spl,qq
1c848     00 80 03 F6 |             mov     rs8,0-0
1c84c                 | 
1c84c     00 00 90 FD |             jmp     #p101            
1c850                 |             
1c850                 | '------------------------ Channels end here --------------------       
1c850                 | 
1c850                 | ' Now add all channels and put the sample to the buffer    
1c850                 | 
1c850                 | 
1c850     A3 59 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1c854     02 A8 86 A1 |     if_z    sub     front,#2         ' 
1c858     FF A9 06 A5 |     if_z    and     front,#511     
1c85c                 |   
1c85c     00 62 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1c860     00 60 07 F6 |             mov     ls,#0
1c864     B3 63 03 F1 |             add     rs,rs1
1c868     B5 63 03 F1 |             add     rs,rs2
1c86c     B7 63 03 F1 |             add     rs,rs3
1c870     B8 63 03 F1 |             add     rs,rs4
1c874     BA 63 03 F1 |             add     rs,rs5
1c878     BC 63 03 F1 |             add     rs,rs6
1c87c     BE 63 03 F1 |             add     rs,rs7
1c880     C0 63 03 F1 |             add     rs,rs8
1c884                 |             
1c884     B2 61 03 F1 |             add     ls,ls1
1c888     B4 61 03 F1 |             add     ls,ls2
1c88c     B6 61 03 F1 |             add     ls,ls3
1c890     B9 61 03 F1 |             add     ls,ls4
1c894     BB 61 03 F1 |             add     ls,ls5
1c898     BD 61 03 F1 |             add     ls,ls6
1c89c     BF 61 03 F1 |             add     ls,ls7
1c8a0     C1 61 03 F1 |             add     ls,ls8
1c8a4                 |  		
1c8a4     0F 60 E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1c8a8     0F 62 E7 F4 |             bitnot  rs,#15		
1c8ac     40 61 03 F5 |  		    and ls,affff
1c8b0     40 63 03 F5 | 	 	    and rs,affff
1c8b4                 | 		    
1c8b4     B0 63 2B F9 |            setword rs,ls,#1         ' Pack L and R to one long    		
1c8b8                 | '
1c8b8     B1 7F 02 F6 |          mov newsample, rs
1c8bc                 | 
1c8bc                 | 
1c8bc     A3 59 03 F6 |             mov     oldt0,time0      ' update global time
1c8c0     AF 47 03 F1 |             add     time0,dt0     
1c8c4                 |             
1c8c4                 |   ' now push dt0 samples to the buffer
1c8c4     00 5E 0F F2 |    cmp dt0,#0 wz
1c8c8     FC FB 9F AD |   if_z jmp #loop1
1c8cc     AF 83 02 F6 |   mov t1,dt0
1c8d0                 |   
1c8d0     F9 85 02 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1c8d4     01 84 86 F1 |             sub     t2,#1
1c8d8     FF 85 06 F5 |             and     t2,#511
1c8dc     54 85 1A F2 |             cmp     t2,front wcz
1c8e0     EC FF 9F AD |     if_e    jmp     #p301    
1c8e4                 |     
1c8e4                 |  '            mul nl,#31
1c8e4                 |   ''           mul nr,#031
1c8e4                 |    '          add nl, ls
1c8e4                 |     '         add nr,rs
1c8e4                 |      '        shr nl,#5
1c8e4                 |       '      shr nr,#5
1c8e4                 | '
1c8e4                 |      '       mov newsample,nr
1c8e4                 |      '        setword newsample, nl,#1
1c8e4                 | 
1c8e4     54 7F 32 FC |             wrlut   newsample, front
1c8e8     01 A8 06 F1 |             add     front,#1
1c8ec     FF A9 06 F5 |             and     front,#511
1c8f0     F7 83 6E FB |             djnz t1,#p301
1c8f4                 | 
1c8f4                 |                
1c8f4     64 FB 9F FD |             jmp     #loop            'loop
1c8f8                 | 
1c8f8                 | '-------------------------------------------------------------------------
1c8f8                 | '------------------ This is the end of the main loop ---------------------
1c8f8                 | '-------------------------------------------------------------------------
1c8f8                 | 
1c8f8                 | '--------------------------------------------------------------------------
1c8f8                 | '------ Interrupt service -------------------------------------------------
1c8f8                 | '------ Output the sample, get the next one if exists ---------------------
1c8f8                 | '--------------------------------------------------------------------------
1c8f8                 | 
1c8f8     0E AC 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
1c8fc     0F AE 26 FC |             wypin   rsample,#right       '4
1c900                 |            
1c900     54 F3 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1c904     F5 FF 3B AB |     if_e    reti1                        '8/10
1c908                 | 
1c908     E1 B1 A6 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1c90c     58 AF 3A F9 |           	getword rsample,lsnext,#1    '13
1c910     58 AD 32 F9 |           	getword lsample,lsnext,#0    '15
1c914     F5 FF 3B FB |             reti1                        '17/19 
1c918                 |             
1c918                 |       
1c918                 |           
1c918                 | '---------------------------------------------------------------------------
1c918                 | '-------- End of interrupt -------------------------------------------------
1c918                 | '---------------------------------------------------------------------------    
1c918                 | 
1c918                 | 
1c918     00 00 00 FF 
1c91c     50 A4 06 F6 | delay   mov qq,##80
1c920     FF A5 6E FB | p900    djnz qq,#p900
1c924                 | 
1c924                 | 
1c924     2D 00 64 FD |         ret
1c928                 | 
1c928                 | '---------------------------------------------------------------------------
1c928                 | '------- Variables ---------------------------------------------------------
1c928                 | '---------------------------------------------------------------------------
1c928                 | 
1c928                 | ' constants
1c928                 | 
1c928     FF FF FF 1F | a1fffffff long $1fffffff
1c92c     00 00 00 20 | a20000000 long $20000000
1c930     00 00 00 21 | a21000000 long $21000000
1c934     00 00 00 00 | newsample long 0
1c938     FF FF 00 00 | affff long $ffff
1c93c     00 00 00 00 | t1 long 0
1c940     00 00 00 00 | t2 long 0
1c944     00 00 00 00 | nl long 0
1c948     00 00 00 00 | nr long 0
1c94c     00 00 00 00 | nrsample long 0
1c950     00 00 00 00 | nlsample long 0
1c954     1F 00 00 00 | fl long 31
1c958     1F 00 00 00 | fr long 31
1c95c     00 00 00 00 | d long 0
1c960                 | ' phase accumulators
1c960                 | 
1c960     00 00 00 00 | p1          long 0
1c964     00 00 00 00 | p2          long 0
1c968     00 00 00 00 | p3          long 0
1c96c     00 00 00 00 | p4          long 0
1c970     00 00 00 00 | p5          long 0
1c974     00 00 00 00 | p6          long 0
1c978     00 00 00 00 | p7          long 0
1c97c     00 00 00 00 | p8          long 0
1c980                 | 
1c980                 | ' temporary variables 
1c980                 | 
1c980     00 00 00 00 | qq          long 0
1c984     00 00 00 00 | spl         long 0
1c988                 | 
1c988                 | ' circular buffer in LUT
1c988                 | 
1c988     00 00 00 00 | front       long 0
1c98c                 | 'tail        long 0
1c98c                 | 
1c98c                 | ' Interrupt ISR variables
1c98c                 | 
1c98c     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
1c990     00 00 00 00 | lsample     long 0
1c994     00 00 00 00 | rsample     long 0
1c998     00 00 00 00 | lsnext      long 0
1c99c     00 00 00 00 | rsnext      long 0 
1c9a0     00 00 00 00 | irqtime     long 0
1c9a4                 | 
1c9a4                 | ' Channel 1 registers. TODO - optimize the memory usage
1c9a4                 | 
1c9a4     00 00 00 00 | sstart1     long 0       ' Sample start pointer
1c9a8     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
1c9ac     00 00 00 00 | lstart1     long 0       ' Loop start
1c9b0     02 00 00 00 | lend1       long 2       ' Loop end
1c9b4     00 00 00 00 | vol1        long 0       ' volume, 0..16384
1c9b8     00 00 00 00 | apan1       long 0       ' pan, 0..16384
1c9bc     65 00 00 00 | freq1       long 101     ' frequency divider
1c9c0     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
1c9c4     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
1c9c8                 | 
1c9c8                 | ' Channel 2 registers
1c9c8                 | 
1c9c8     00 00 00 00 | sstart2     long 0
1c9cc     00 00 00 00 | type2       long 0
1c9d0     00 00 00 00 | lstart2     long 0
1c9d4     02 00 00 00 | lend2       long 2        		
1c9d8     00 00 00 00 | vol2        long 0
1c9dc     00 00 00 00 | apan2       long 0
1c9e0     67 00 00 00 | freq2       long 103
1c9e4     02 00 00 00 | askip2      long 2
1c9e8     00 00 00 00 | acmd2       long 0
1c9ec                 | 
1c9ec                 | ' Channel 3 registers
1c9ec                 | 
1c9ec     00 00 00 00 | sstart3     long 0
1c9f0     00 00 00 00 | type3       long 0
1c9f4     00 00 00 00 | lstart3     long 0
1c9f8     02 00 00 00 | lend3       long 2       		'
1c9fc     00 00 00 00 | vol3        long 0
1ca00     00 00 00 00 | apan3       long 0
1ca04     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
1ca08     02 00 00 00 | askip3      long 2
1ca0c     00 00 00 00 | acmd3       long 0
1ca10                 | 
1ca10                 | ' Channel 4 registers
1ca10                 | 
1ca10     00 00 00 00 | sstart4     long 0
1ca14     00 00 00 00 | type4       long 0
1ca18     00 00 00 00 | lstart4     long 0
1ca1c     02 00 00 00 | lend4       long 2       		'
1ca20     00 00 00 00 | vol4        long 0
1ca24     00 00 00 00 | apan4       long 0
1ca28     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
1ca2c     02 00 00 00 | askip4      long 2
1ca30     00 00 00 00 | acmd4       long 0
1ca34                 | 
1ca34                 | ' Channel 5 registers
1ca34                 | 
1ca34     00 00 00 00 | sstart5     long 0
1ca38     00 00 00 00 | type5       long 0
1ca3c     00 00 00 00 | lstart5     long 0
1ca40     02 00 00 00 | lend5       long 2       		'
1ca44     00 00 00 00 | vol5        long 0
1ca48     00 00 00 00 | apan5       long 0
1ca4c     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
1ca50     02 00 00 00 | askip5      long 2
1ca54     00 00 00 00 | acmd5       long 0
1ca58                 | 
1ca58                 | ' Channel 6 registers
1ca58                 | 
1ca58     00 00 00 00 | sstart6     long 0
1ca5c     00 00 00 00 | type6       long 0
1ca60     00 00 00 00 | lstart6     long 0
1ca64     02 00 00 00 | lend6       long 2       		'
1ca68     00 00 00 00 | vol6        long 0
1ca6c     00 00 00 00 | apan6       long 0
1ca70     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
1ca74     02 00 00 00 | askip6      long 2
1ca78     00 00 00 00 | acmd6       long 0
1ca7c                 | 
1ca7c                 | ' Channel 7 registers
1ca7c                 | 
1ca7c     00 00 00 00 | sstart7     long 0
1ca80     00 00 00 00 | type7       long 0
1ca84     00 00 00 00 | lstart7     long 0
1ca88     02 00 00 00 | lend7       long 2       		'
1ca8c     00 00 00 00 | vol7        long 0
1ca90     00 00 00 00 | apan7       long 0
1ca94     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
1ca98     02 00 00 00 | askip7      long 2
1ca9c     00 00 00 00 | acmd7       long 0
1caa0                 | 
1caa0                 | ' Channel 8 registers
1caa0                 | 
1caa0     00 00 00 00 | sstart8     long 0
1caa4     00 00 00 00 | type8       long 0
1caa8     00 00 00 00 | lstart8     long 0
1caac     02 00 00 00 | lend8       long 2       		'
1cab0     00 00 00 00 | vol8        long 0
1cab4     00 00 00 00 | apan8       long 0
1cab8     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
1cabc     02 00 00 00 | askip8      long 2
1cac0     00 00 00 00 | acmd8       long 0
1cac4                 | 
1cac4                 | ' Time variables
1cac4                 | 
1cac4     00 00 00 00 | time0       long 0    ' Global sample computing time
1cac8     01 00 00 00 | time1       long 1    ' Local channels time
1cacc     02 00 00 00 | time2       long 2
1cad0     03 00 00 00 | time3       long 3
1cad4     04 00 00 00 | time4       long 4
1cad8     05 00 00 00 | time5       long 5
1cadc     06 00 00 00 | time6       long 6
1cae0     07 00 00 00 | time7       long 7
1cae4     08 00 00 00 | time8       long 8
1cae8                 | 
1cae8     00 00 00 00 | oldt0       long 0    'Temporary time variables
1caec     00 00 00 00 | cn          long 0
1caf0     00 00 00 00 | ct          long 0
1caf4     00 00 00 00 | dt0         long 0
1caf8                 | 
1caf8                 | ' Samples
1caf8                 | 
1caf8     00 00 00 00 | ls          long 0    ' Global sample variable
1cafc     00 00 00 00 | rs          long 0
1cb00                 | 
1cb00     00 00 00 00 | ls1         long 0    ' Channel samples
1cb04     00 00 00 00 | rs1         long 0
1cb08     00 00 00 00 | ls2         long 0
1cb0c     00 00 00 00 | rs2         long 0
1cb10     00 00 00 00 | ls3         long 0
1cb14     00 00 00 00 | rs3         long 0
1cb18     00 00 00 00 | rs4         long 0
1cb1c     00 00 00 00 | ls4         long 0
1cb20     00 00 00 00 | rs5         long 0
1cb24     00 00 00 00 | ls5         long 0
1cb28     00 00 00 00 | rs6         long 0
1cb2c     00 00 00 00 | ls6         long 0
1cb30     00 00 00 00 | rs7         long 0
1cb34     00 00 00 00 | ls7         long 0
1cb38     00 00 00 00 | rs8         long 0
1cb3c     00 00 00 00 | ls8         long 0
1cb40                 | 
1cb40     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1cb44                 | 
1cb44     00 00 00 00 
1cb48     00 00 00 00 | null  			long 	0,0           ' for channel reset
1cb4c     73 32 00 04 
1cb50     00 00 10 00 
1cb54     00 00 00 00 
1cb58     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1cb5c     00 00 C9 00 
1cb60     92 01 5B 02 
1cb64     24 03 ED 03 
1cb68     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1cb6c     48 06 11 07 
1cb70     D9 07 A2 08 
1cb74     6A 09 33 0A 
1cb78     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1cb7c     8C 0C 54 0D 
1cb80     1C 0E E3 0E 
1cb84     AB 0F 72 10 
1cb88     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1cb8c     C8 12 8F 13 
1cb90     55 14 1C 15 
1cb94     E2 15 A8 16 
1cb98     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1cb9c     F9 18 BE 19 
1cba0     82 1A 47 1B 
1cba4     0B 1C CF 1C 
1cba8     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1cbac     1A 1F DD 1F 
1cbb0     9F 20 61 21 
1cbb4     23 22 E5 22 
1cbb8     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1cbbc     28 25 E8 25 
1cbc0     A8 26 67 27 
1cbc4     26 28 E5 28 
1cbc8     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1cbcc     1F 2B DC 2B 
1cbd0     99 2C 55 2D 
1cbd4     11 2E CC 2E 
1cbd8     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1cbdc     FB 30 B5 31 
1cbe0     6E 32 26 33 
1cbe4     DF 33 96 34 
1cbe8     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1cbec     BA 36 6F 37 
1cbf0     24 38 D9 38 
1cbf4     8C 39 40 3A 
1cbf8     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1cbfc     56 3C 07 3D 
1cc00     B8 3D 68 3E 
1cc04     17 3F C5 3F 
1cc08     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1cc0c     CE 41 7A 42 
1cc10     25 43 D0 43 
1cc14     7A 44 24 45 
1cc18     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1cc1c     1C 47 C3 47 
1cc20     69 48 0F 49 
1cc24     B4 49 58 4A 
1cc28     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1cc2c     3F 4C E0 4C 
1cc30     81 4D 20 4E 
1cc34     BF 4E 5D 4F 
1cc38     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1cc3c     33 51 CE 51 
1cc40     68 52 02 53 
1cc44     9B 53 32 54 
1cc48     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1cc4c     F5 55 8A 56 
1cc50     1D 57 B0 57 
1cc54     42 58 D3 58 
1cc58     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1cc5c     82 5A 0F 5B 
1cc60     9C 5B 28 5C 
1cc64     B3 5C 3E 5D 
1cc68     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1cc6c     D7 5E 5D 5F 
1cc70     E3 5F 68 60 
1cc74     EB 60 6E 61 
1cc78     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1cc7c     F1 62 70 63 
1cc80     EE 63 6C 64 
1cc84     E8 64 63 65 
1cc88     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1cc8c     CF 66 46 67 
1cc90     BC 67 32 68 
1cc94     A6 68 19 69 
1cc98     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1cc9c     6D 6A DC 6A 
1cca0     4A 6B B7 6B 
1cca4     23 6C 8E 6C 
1cca8     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1ccac     C9 6D 30 6E 
1ccb0     96 6E FB 6E 
1ccb4     5E 6F C1 6F 
1ccb8     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1ccbc     E2 70 40 71 
1ccc0     9D 71 F9 71 
1ccc4     54 72 AE 72 
1ccc8     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1cccc     B5 73 0A 74 
1ccd0     5F 74 B2 74 
1ccd4     04 75 55 75 
1ccd8     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1ccdc     41 76 8D 76 
1cce0     D8 76 22 77 
1cce4     6B 77 B3 77 
1cce8     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1ccec     84 78 C7 78 
1ccf0     09 79 4A 79 
1ccf4     89 79 C8 79 
1ccf8     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1ccfc     7C 7A B6 7A 
1cd00     EE 7A 26 7B 
1cd04     5C 7B 91 7B 
1cd08     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1cd0c     29 7C 59 7C 
1cd10     88 7C B6 7C 
1cd14     E3 7C 0E 7D 
1cd18     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1cd1c     89 7D B0 7D 
1cd20     D5 7D FA 7D 
1cd24     1D 7E 3E 7E 
1cd28     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1cd2c     9C 7E B9 7E 
1cd30     D5 7E EF 7E 
1cd34     09 7F 21 7F 
1cd38     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1cd3c     61 7F 74 7F 
1cd40     86 7F 97 7F 
1cd44     A6 7F B4 7F 
1cd48     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1cd4c     D8 7F E1 7F 
1cd50     E9 7F F0 7F 
1cd54     F5 7F F9 7F 
1cd58     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1cd5c     FF 7F FE 7F 
1cd60     FD 7F F9 7F 
1cd64     F5 7F F0 7F 
1cd68     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1cd6c     D8 7F CD 7F 
1cd70     C1 7F B4 7F 
1cd74     A6 7F 97 7F 
1cd78     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1cd7c     61 7F 4D 7F 
1cd80     37 7F 21 7F 
1cd84     09 7F EF 7E 
1cd88     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
1cd8c     9C 7E 7E 7E 
1cd90     5F 7E 3E 7E 
1cd94     1D 7E FA 7D 
1cd98     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
1cd9c     89 7D 62 7D 
1cda0     39 7D 0E 7D 
1cda4     E3 7C B6 7C 
1cda8     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
1cdac     29 7C F8 7B 
1cdb0     C5 7B 91 7B 
1cdb4     5C 7B 26 7B 
1cdb8     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
1cdbc     7C 7A 41 7A 
1cdc0     05 7A C8 79 
1cdc4     89 79 4A 79 
1cdc8     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
1cdcc     84 78 3F 78 
1cdd0     FA 77 B3 77 
1cdd4     6B 77 22 77 
1cdd8     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
1cddc     41 76 F3 75 
1cde0     A5 75 55 75 
1cde4     04 75 B2 74 
1cde8     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
1cdec     B5 73 5E 73 
1cdf0     07 73 AE 72 
1cdf4     54 72 F9 71 
1cdf8     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
1cdfc     E2 70 83 70 
1ce00     22 70 C1 6F 
1ce04     5E 6F FB 6E 
1ce08     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
1ce0c     C9 6D 61 6D 
1ce10     F8 6C 8E 6C 
1ce14     23 6C B7 6B 
1ce18     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
1ce1c     6D 6A FD 69 
1ce20     8B 69 19 69 
1ce24     A6 68 32 68 
1ce28     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
1ce2c     CF 66 56 66 
1ce30     DD 65 63 65 
1ce34     E8 64 6C 64 
1ce38     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
1ce3c     F1 62 71 62 
1ce40     F0 61 6E 61 
1ce44     EB 60 68 60 
1ce48     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
1ce4c     D7 5E 4F 5E 
1ce50     C7 5D 3E 5D 
1ce54     B3 5C 28 5C 
1ce58     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
1ce5c     82 5A F3 59 
1ce60     64 59 D3 58 
1ce64     42 58 B0 57 
1ce68     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
1ce6c     F5 55 60 55 
1ce70     C9 54 32 54 
1ce74     9B 53 02 53 
1ce78     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
1ce7c     33 51 97 50 
1ce80     FB 4F 5D 4F 
1ce84     BF 4E 20 4E 
1ce88     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
1ce8c     3F 4C 9D 4B 
1ce90     FB 4A 58 4A 
1ce94     B4 49 0F 49 
1ce98     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
1ce9c     1C 47 75 46 
1cea0     CD 45 24 45 
1cea4     7A 44 D0 43 
1cea8     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
1ceac     CE 41 21 41 
1ceb0     73 40 C5 3F 
1ceb4     17 3F 68 3E 
1ceb8     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
1cebc     56 3C A5 3B 
1cec0     F2 3A 40 3A 
1cec4     8C 39 D9 38 
1cec8     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
1cecc     BA 36 04 36 
1ced0     4D 35 96 34 
1ced4     DF 33 26 33 
1ced8     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
1cedc     FB 30 41 30 
1cee0     87 2F CC 2E 
1cee4     11 2E 55 2D 
1cee8     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
1ceec     1F 2B 61 2A 
1cef0     A3 29 E5 28 
1cef4     26 28 67 27 
1cef8     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
1cefc     28 25 67 24 
1cf00     A6 23 E5 22 
1cf04     23 22 61 21 
1cf08     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
1cf0c     1A 1F 57 1E 
1cf10     93 1D CF 1C 
1cf14     0B 1C 47 1B 
1cf18     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
1cf1c     F9 18 33 18 
1cf20     6E 17 A8 16 
1cf24     E2 15 1C 15 
1cf28     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
1cf2c     C8 12 01 12 
1cf30     3A 11 72 10 
1cf34     AB 0F E3 0E 
1cf38     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
1cf3c     8C 0C C4 0B 
1cf40     FB 0A 33 0A 
1cf44     6A 09 A2 08 
1cf48     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
1cf4c     48 06 7F 05 
1cf50     B6 04 ED 03 
1cf54     24 03 5B 02 
1cf58     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
1cf5c     00 00 37 FF 
1cf60     6E FE A5 FD 
1cf64     DC FC 13 FC 
1cf68     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
1cf6c     B8 F9 EF F8 
1cf70     27 F8 5E F7 
1cf74     96 F6 CD F5 
1cf78     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
1cf7c     74 F3 AC F2 
1cf80     E4 F1 1D F1 
1cf84     55 F0 8E EF 
1cf88     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
1cf8c     38 ED 71 EC 
1cf90     AB EB E4 EA 
1cf94     1E EA 58 E9 
1cf98     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
1cf9c     07 E7 42 E6 
1cfa0     7E E5 B9 E4 
1cfa4     F5 E3 31 E3 
1cfa8     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
1cfac     E6 E0 23 E0 
1cfb0     61 DF 9F DE 
1cfb4     DD DD 1B DD 
1cfb8     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
1cfbc     D8 DA 18 DA 
1cfc0     58 D9 99 D8 
1cfc4     DA D7 1B D7 
1cfc8     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
1cfcc     E1 D4 24 D4 
1cfd0     67 D3 AB D2 
1cfd4     EF D1 34 D1 
1cfd8     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
1cfdc     05 CF 4B CE 
1cfe0     92 CD DA CC 
1cfe4     21 CC 6A CB 
1cfe8     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
1cfec     46 C9 91 C8 
1cff0     DC C7 27 C7 
1cff4     74 C6 C0 C5 
1cff8     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
1cffc     AA C3 F9 C2 
1d000     48 C2 98 C1 
1d004     E9 C0 3B C0 
1d008     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
1d00c     32 BE 86 BD 
1d010     DB BC 30 BC 
1d014     86 BB DC BA 
1d018     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
1d01c     E4 B8 3D B8 
1d020     97 B7 F1 B6 
1d024     4C B6 A8 B5 
1d028     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
1d02c     C1 B3 20 B3 
1d030     7F B2 E0 B1 
1d034     41 B1 A3 B0 
1d038     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
1d03c     CD AE 32 AE 
1d040     98 AD FE AC 
1d044     65 AC CE AB 
1d048     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
1d04c     0B AA 76 A9 
1d050     E3 A8 50 A8 
1d054     BE A7 2D A7 
1d058     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
1d05c     7E A5 F1 A4 
1d060     64 A4 D8 A3 
1d064     4D A3 C2 A2 
1d068     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
1d06c     29 A1 A3 A0 
1d070     1D A0 98 9F 
1d074     15 9F 92 9E 
1d078     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
1d07c     0F 9D 90 9C 
1d080     12 9C 94 9B 
1d084     18 9B 9D 9A 
1d088     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
1d08c     31 99 BA 98 
1d090     44 98 CE 97 
1d094     5A 97 E7 96 
1d098     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
1d09c     93 95 24 95 
1d0a0     B6 94 49 94 
1d0a4     DD 93 72 93 
1d0a8     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
1d0ac     37 92 D0 91 
1d0b0     6A 91 05 91 
1d0b4     A2 90 3F 90 
1d0b8     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
1d0bc     1E 8F C0 8E 
1d0c0     63 8E 07 8E 
1d0c4     AC 8D 52 8D 
1d0c8     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
1d0cc     4B 8C F6 8B 
1d0d0     A1 8B 4E 8B 
1d0d4     FC 8A AB 8A 
1d0d8     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
1d0dc     BF 89 73 89 
1d0e0     28 89 DE 88 
1d0e4     95 88 4D 88 
1d0e8     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
1d0ec     7C 87 39 87 
1d0f0     F7 86 B6 86 
1d0f4     77 86 38 86 
1d0f8     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
1d0fc     84 85 4A 85 
1d100     12 85 DA 84 
1d104     A4 84 6F 84 
1d108     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
1d10c     D7 83 A7 83 
1d110     78 83 4A 83 
1d114     1D 83 F2 82 
1d118     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
1d11c     77 82 50 82 
1d120     2B 82 06 82 
1d124     E3 81 C2 81 
1d128     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
1d12c     64 81 47 81 
1d130     2B 81 11 81 
1d134     F7 80 DF 80 
1d138     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
1d13c     9F 80 8C 80 
1d140     7A 80 69 80 
1d144     5A 80 4C 80 
1d148     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
1d14c     28 80 1F 80 
1d150     17 80 10 80 
1d154     0B 80 07 80 
1d158     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
1d15c     01 80 02 80 
1d160     03 80 07 80 
1d164     0B 80 10 80 
1d168     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
1d16c     28 80 33 80 
1d170     3F 80 4C 80 
1d174     5A 80 69 80 
1d178     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
1d17c     9F 80 B3 80 
1d180     C9 80 DF 80 
1d184     F7 80 11 81 
1d188     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
1d18c     64 81 82 81 
1d190     A1 81 C2 81 
1d194     E3 81 06 82 
1d198     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
1d19c     77 82 9E 82 
1d1a0     C7 82 F2 82 
1d1a4     1D 83 4A 83 
1d1a8     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
1d1ac     D7 83 08 84 
1d1b0     3B 84 6F 84 
1d1b4     A4 84 DA 84 
1d1b8     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
1d1bc     84 85 BF 85 
1d1c0     FB 85 38 86 
1d1c4     77 86 B6 86 
1d1c8     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
1d1cc     7C 87 C1 87 
1d1d0     06 88 4D 88 
1d1d4     95 88 DE 88 
1d1d8     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
1d1dc     BF 89 0D 8A 
1d1e0     5B 8A AB 8A 
1d1e4     FC 8A 4E 8B 
1d1e8     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
1d1ec     4B 8C A2 8C 
1d1f0     F9 8C 52 8D 
1d1f4     AC 8D 07 8E 
1d1f8     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
1d1fc     1E 8F 7D 8F 
1d200     DE 8F 3F 90 
1d204     A2 90 05 91 
1d208     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
1d20c     37 92 9F 92 
1d210     08 93 72 93 
1d214     DD 93 49 94 
1d218     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
1d21c     93 95 03 96 
1d220     75 96 E7 96 
1d224     5A 97 CE 97 
1d228     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
1d22c     31 99 AA 99 
1d230     23 9A 9D 9A 
1d234     18 9B 94 9B 
1d238     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
1d23c     0F 9D 8F 9D 
1d240     10 9E 92 9E 
1d244     15 9F 98 9F 
1d248     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
1d24c     29 A1 B1 A1 
1d250     39 A2 C2 A2 
1d254     4D A3 D8 A3 
1d258     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
1d25c     7E A5 0D A6 
1d260     9C A6 2D A7 
1d264     BE A7 50 A8 
1d268     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
1d26c     0B AA A0 AA 
1d270     37 AB CE AB 
1d274     65 AC FE AC 
1d278     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
1d27c     CD AE 69 AF 
1d280     05 B0 A3 B0 
1d284     41 B1 E0 B1 
1d288     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
1d28c     C1 B3 63 B4 
1d290     05 B5 A8 B5 
1d294     4C B6 F1 B6 
1d298     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
1d29c     E4 B8 8B B9 
1d2a0     33 BA DC BA 
1d2a4     86 BB 30 BC 
1d2a8     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
1d2ac     32 BE DF BE 
1d2b0     8D BF 3B C0 
1d2b4     E9 C0 98 C1 
1d2b8     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
1d2bc     AA C3 5B C4 
1d2c0     0E C5 C0 C5 
1d2c4     74 C6 27 C7 
1d2c8     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
1d2cc     46 C9 FC C9 
1d2d0     B3 CA 6A CB 
1d2d4     21 CC DA CC 
1d2d8     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
1d2dc     05 CF BF CF 
1d2e0     79 D0 34 D1 
1d2e4     EF D1 AB D2 
1d2e8     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
1d2ec     E1 D4 9F D5 
1d2f0     5D D6 1B D7 
1d2f4     DA D7 99 D8 
1d2f8     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
1d2fc     D8 DA 99 DB 
1d300     5A DC 1B DD 
1d304     DD DD 9F DE 
1d308     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
1d30c     E6 E0 A9 E1 
1d310     6D E2 31 E3 
1d314     F5 E3 B9 E4 
1d318     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
1d31c     07 E7 CD E7 
1d320     92 E8 58 E9 
1d324     1E EA E4 EA 
1d328     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
1d32c     38 ED FF ED 
1d330     C6 EE 8E EF 
1d334     55 F0 1D F1 
1d338     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
1d33c     74 F3 3C F4 
1d340     05 F5 CD F5 
1d344     96 F6 5E F7 
1d348     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
1d34c     B8 F9 81 FA 
1d350     4A FB 13 FC 
1d354     DC FC A5 FD 
1d358     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
1d35c                 | 	alignl
1d35c                 | __system__dat_
1d35c     00 00 00 00 
1d360     00 00 00 00 | 	byte	$00[8]
1d364     03 00 00 00 
1d368     00 00 00 00 
1d36c     00 00 00 00 
1d370     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d374     00 00 00 00 
1d378     00 00 00 00 
1d37c     00 00 00 00 | 	byte	$00[12]
1d380     05 00 00 00 
1d384     00 00 00 00 
1d388     00 00 00 00 
1d38c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d390     58 D5 01 00 | 	long	@@@__system__dat_ + 508
1d394     60 D5 01 00 | 	long	@@@__system__dat_ + 516
1d398     00 00 00 00 | 	byte	$00, $00, $00, $00
1d39c     68 D5 01 00 | 	long	@@@__system__dat_ + 524
1d3a0     70 D5 01 00 | 	long	@@@__system__dat_ + 532
1d3a4     00 00 00 00 
1d3a8     00 00 00 00 | 	byte	$00[8]
1d3ac     01 00 00 00 
1d3b0     06 00 00 00 
1d3b4     00 00 00 00 
1d3b8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d3bc     00 00 00 00 | 	byte	$00, $00, $00, $00
1d3c0     78 D5 01 00 | 	long	@@@__system__dat_ + 540
1d3c4     80 D5 01 00 | 	long	@@@__system__dat_ + 548
1d3c8     00 00 00 00 | 	byte	$00, $00, $00, $00
1d3cc     88 D5 01 00 | 	long	@@@__system__dat_ + 556
1d3d0     90 D5 01 00 | 	long	@@@__system__dat_ + 564
1d3d4     00 00 00 00 
1d3d8     00 00 00 00 | 	byte	$00[8]
1d3dc     01 00 00 00 
1d3e0     06 00 00 00 
1d3e4     00 00 00 00 
1d3e8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1d3ec     00 00 00 00 | 	byte	$00, $00, $00, $00
1d3f0     98 D5 01 00 | 	long	@@@__system__dat_ + 572
1d3f4     A0 D5 01 00 | 	long	@@@__system__dat_ + 580
1d3f8     00 00 00 00 | 	byte	$00, $00, $00, $00
1d3fc     A8 D5 01 00 | 	long	@@@__system__dat_ + 588
1d400     B0 D5 01 00 | 	long	@@@__system__dat_ + 596
1d404     00 00 00 00 
      ...             
1d554     00 00 00 00 
1d558     00 00 00 00 | 	byte	$00[344]
1d55c     94 5F 00 00 | 	long	@@@__system___tx
1d560     00 00 00 00 | 	byte	$00, $00, $00, $00
1d564     DC 5F 00 00 | 	long	@@@__system___rx
1d568     00 00 00 00 | 	byte	$00, $00, $00, $00
1d56c     C4 79 00 00 | 	long	@@@__system___rxtxioctl_0174
1d570     00 00 00 00 | 	byte	$00, $00, $00, $00
1d574     3C 7A 00 00 | 	long	@@@__system____dummy_flush_0175
1d578     00 00 00 00 | 	byte	$00, $00, $00, $00
1d57c     94 5F 00 00 | 	long	@@@__system___tx
1d580     00 00 00 00 | 	byte	$00, $00, $00, $00
1d584     DC 5F 00 00 | 	long	@@@__system___rx
1d588     00 00 00 00 | 	byte	$00, $00, $00, $00
1d58c     C4 79 00 00 | 	long	@@@__system___rxtxioctl_0174
1d590     00 00 00 00 | 	byte	$00, $00, $00, $00
1d594     3C 7A 00 00 | 	long	@@@__system____dummy_flush_0175
1d598     00 00 00 00 | 	byte	$00, $00, $00, $00
1d59c     94 5F 00 00 | 	long	@@@__system___tx
1d5a0     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5a4     DC 5F 00 00 | 	long	@@@__system___rx
1d5a8     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5ac     C4 79 00 00 | 	long	@@@__system___rxtxioctl_0174
1d5b0     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5b4     3C 7A 00 00 | 	long	@@@__system____dummy_flush_0175
1d5b8     00 00 00 00 | 	byte	$00, $00, $00, $00
1d5bc                 | __heap_base
1d5bc     00 00 00 00 
      ...             
1e5bc     00 00 00 00 
1e5c0     00 00 00 00 | 	long	0[1026]
1e5c4                 | objmem
1e5c4     00 00 00 00 | 	long	0[1]
1e5c8 118             | 	org	COG_BSS_START
1e5c8 118             | _var01
1e5c8 118             | 	res	1
1e5c8 119             | _var02
1e5c8 119             | 	res	1
1e5c8 11a             | _var03
1e5c8 11a             | 	res	1
1e5c8 11b             | _var04
1e5c8 11b             | 	res	1
1e5c8 11c             | _var05
1e5c8 11c             | 	res	1
1e5c8 11d             | _var06
1e5c8 11d             | 	res	1
1e5c8 11e             | _var07
1e5c8 11e             | 	res	1
1e5c8 11f             | _var08
1e5c8 11f             | 	res	1
1e5c8 120             | _var09
1e5c8 120             | 	res	1
1e5c8 121             | _var10
1e5c8 121             | 	res	1
1e5c8 122             | _var11
1e5c8 122             | 	res	1
1e5c8 123             | _var12
1e5c8 123             | 	res	1
1e5c8 124             | _var13
1e5c8 124             | 	res	1
1e5c8 125             | _var14
1e5c8 125             | 	res	1
1e5c8 126             | _var15
1e5c8 126             | 	res	1
1e5c8 127             | _var16
1e5c8 127             | 	res	1
1e5c8 128             | _var17
1e5c8 128             | 	res	1
1e5c8 129             | _var18
1e5c8 129             | 	res	1
1e5c8 12a             | _var19
1e5c8 12a             | 	res	1
1e5c8 12b             | _var20
1e5c8 12b             | 	res	1
1e5c8 12c             | _var21
1e5c8 12c             | 	res	1
1e5c8 12d             | _var22
1e5c8 12d             | 	res	1
1e5c8 12e             | arg01
1e5c8 12e             | 	res	1
1e5c8 12f             | arg02
1e5c8 12f             | 	res	1
1e5c8 130             | arg03
1e5c8 130             | 	res	1
1e5c8 131             | arg04
1e5c8 131             | 	res	1
1e5c8 132             | arg05
1e5c8 132             | 	res	1
1e5c8 133             | arg06
1e5c8 133             | 	res	1
1e5c8 134             | arg07
1e5c8 134             | 	res	1
1e5c8 135             | local01
1e5c8 135             | 	res	1
1e5c8 136             | local02
1e5c8 136             | 	res	1
1e5c8 137             | local03
1e5c8 137             | 	res	1
1e5c8 138             | local04
1e5c8 138             | 	res	1
1e5c8 139             | local05
1e5c8 139             | 	res	1
1e5c8 13a             | local06
1e5c8 13a             | 	res	1
1e5c8 13b             | local07
1e5c8 13b             | 	res	1
1e5c8 13c             | local08
1e5c8 13c             | 	res	1
1e5c8 13d             | local09
1e5c8 13d             | 	res	1
1e5c8 13e             | local10
1e5c8 13e             | 	res	1
1e5c8 13f             | local11
1e5c8 13f             | 	res	1
1e5c8 140             | local12
1e5c8 140             | 	res	1
1e5c8 141             | local13
1e5c8 141             | 	res	1
1e5c8 142             | local14
1e5c8 142             | 	res	1
1e5c8 143             | local15
1e5c8 143             | 	res	1
1e5c8 144             | local16
1e5c8 144             | 	res	1
1e5c8 145             | local17
1e5c8 145             | 	res	1
1e5c8 146             | local18
1e5c8 146             | 	res	1
1e5c8 147             | local19
1e5c8 147             | 	res	1
1e5c8 148             | local20
1e5c8 148             | 	res	1
1e5c8 149             | local21
1e5c8 149             | 	res	1
1e5c8 14a             | local22
1e5c8 14a             | 	res	1
1e5c8 14b             | local23
1e5c8 14b             | 	res	1
1e5c8 14c             | local24
1e5c8 14c             | 	res	1
1e5c8 14d             | local25
1e5c8 14d             | 	res	1
1e5c8 14e             | local26
1e5c8 14e             | 	res	1
1e5c8 14f             | local27
1e5c8 14f             | 	res	1
1e5c8 150             | local28
1e5c8 150             | 	res	1
1e5c8 151             | local29
1e5c8 151             | 	res	1
1e5c8 152             | local30
1e5c8 152             | 	res	1
1e5c8 153             | local31
1e5c8 153             | 	res	1
1e5c8 154             | local32
1e5c8 154             | 	res	1
1e5c8 155             | local33
1e5c8 155             | 	res	1
1e5c8 156             | local34
1e5c8 156             | 	res	1
1e5c8 157             | local35
1e5c8 157             | 	res	1
1e5c8 158             | local36
1e5c8 158             | 	res	1
1e5c8 159             | local37
1e5c8 159             | 	res	1
1e5c8 15a             | local38
1e5c8 15a             | 	res	1
1e5c8 15b             | local39
1e5c8 15b             | 	res	1
1e5c8 15c             | local40
1e5c8 15c             | 	res	1
1e5c8 15d             | local41
1e5c8 15d             | 	res	1
1e5c8 15e             | local42
1e5c8 15e             | 	res	1
1e5c8 15f             | local43
1e5c8 15f             | 	res	1
1e5c8 160             | local44
1e5c8 160             | 	res	1
1e5c8 161             | local45
1e5c8 161             | 	res	1
1e5c8 162             | local46
1e5c8 162             | 	res	1
1e5c8 163             | local47
1e5c8 163             | 	res	1
1e5c8 164             | local48
1e5c8 164             | 	res	1
1e5c8 165             | local49
1e5c8 165             | 	res	1
1e5c8 166             | local50
1e5c8 166             | 	res	1
1e5c8 167             | local51
1e5c8 167             | 	res	1
1e5c8 168             | local52
1e5c8 168             | 	res	1
1e5c8 169             | local53
1e5c8 169             | 	res	1
1e5c8 16a             | local54
1e5c8 16a             | 	res	1
1e5c8 16b             | local55
1e5c8 16b             | 	res	1
1e5c8 16c             | local56
1e5c8 16c             | 	res	1
1e5c8 16d             | local57
1e5c8 16d             | 	res	1
1e5c8 16e             | local58
1e5c8 16e             | 	res	1
1e5c8 16f             | local59
1e5c8 16f             | 	res	1
1e5c8 170             | local60
1e5c8 170             | 	res	1
1e5c8 171             | local61
1e5c8 171             | 	res	1
1e5c8 172             | local62
1e5c8 172             | 	res	1
1e5c8 173             | local63
1e5c8 173             | 	res	1
1e5c8 174             | local64
1e5c8 174             | 	res	1
1e5c8 175             | local65
1e5c8 175             | 	res	1
1e5c8 176             | local66
1e5c8 176             | 	res	1
1e5c8 177             | local67
1e5c8 177             | 	res	1
1e5c8 178             | local68
1e5c8 178             | 	res	1
1e5c8 179             | local69
1e5c8 179             | 	res	1
1e5c8 17a             | local70
1e5c8 17a             | 	res	1
1e5c8 17b             | local71
1e5c8 17b             | 	res	1
1e5c8 17c             | local72
1e5c8 17c             | 	res	1
1e5c8 17d             | local73
1e5c8 17d             | 	res	1
1e5c8 17e             | local74
1e5c8 17e             | 	res	1
1e5c8 17f             | local75
1e5c8 17f             | 	res	1
1e5c8 180             | local76
1e5c8 180             | 	res	1
1e5c8 181             | local77
1e5c8 181             | 	res	1
1e5c8 182             | local78
1e5c8 182             | 	res	1
1e5c8 183             | local79
1e5c8 183             | 	res	1
1e5c8 184             | local80
1e5c8 184             | 	res	1
1e5c8 185             | muldiva_
1e5c8 185             | 	res	1
1e5c8 186             | muldivb_
1e5c8 186             | 	res	1
1e5c8 187             | 	fit	480
1e5c8 187             | 
