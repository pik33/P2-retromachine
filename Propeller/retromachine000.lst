00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.p2asm"
00000                 | con
00000                 | 	_clkfreq = 320000000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 24 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 07 F1 03 F6 | 	mov	ptra, objptr
00410 003 02 00 00 FF 
00414 004 B0 F0 07 F1 | 	add	ptra, ##1200
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 07 80 80 FF 
00428 009 00 F0 67 FD | 	hubset	##16781304
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c 07 80 00 FF 
00438 00d FB ED 07 F6 | 	mov	pa, ##16781307
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 68 89 89 FF 
00448 011 14 00 6C FC | 	wrlong	##320000000, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 58 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 4A 62 FD | 	cogid	arg01
00614 084 03 4A 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 25 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 4B 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 4D 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 4F 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 51 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 24 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 4E 56 F0 |         shr	arg03, #1 wc
00688 0a1 25 4D 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 4A 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 4C FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 4E 56 F0 |         shr	arg03, #1 wc
00698 0a5 25 4D 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 4A 06 C1 |  if_c   add	arg01, #2
006a0 0a7 26 4D 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 25 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 4E 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 27 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 4C 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 55 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 55 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 85 09 13 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 0A 63 FD |        getqx   muldivb_
00740 0cf 19 08 63 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 84 09 53 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 85 0B 5B F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 84 09 83 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 85 0B 83 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 24 06 F6 |     mov result1, #0
00778 0dd 00 26 06 F6 |     mov result2, #0
0077c 0de 25 07 02 F6 |     mov abortchain, arg01
00780 0df 25 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 4A 06 F1 |     add arg01, #4
00788 0e1 25 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 4A 06 F1 |     add arg01, #4
00790 0e3 25 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 4A 06 F1 |     add arg01, #4
00798 0e5 25 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 26 4B 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 25 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 4A 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 4A 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 26 25 02 F6 |     mov result1, arg02
007d4 0f4 01 26 06 F6 |     mov result2, #1
007d8 0f5 25 4D 02 FB |     rdlong arg02, arg01
007dc 0f6 04 4A 06 F1 |     add arg01, #4
007e0 0f7 25 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 4A 06 F1 |     add arg01, #4
007e8 0f9 25 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 4A 06 F1 |     add arg01, #4
007f0 0fb 25 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 4A 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 4E 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 30 82 00 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 38 92 00 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 AC 58 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 F4 57 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a D0 7F 00 00 | 	long	@__system__dat_
00830 10b             | ptr__hng030rm_spin2_dat__
00830 10b 6C 5B 00 00 | 	long	@_hng030rm_spin2_dat_
00834 10c             | ptr__hng030rm_spin2_putchar_
00834 10c A0 23 00 00 | 	long	@_hng030rm_spin2_putchar
00838 10d             | ptr__hng030rm_spin2_putpixel1_
00838 10d 24 1F 00 00 | 	long	@_hng030rm_spin2_putpixel1
0083c 10e             | ptr__hng030rm_spin2_putpixel2_
0083c 10e 0C 20 00 00 | 	long	@_hng030rm_spin2_putpixel2
00840 10f             | ptr__hng030rm_spin2_putpixel4_
00840 10f E4 20 00 00 | 	long	@_hng030rm_spin2_putpixel4
00844 110             | ptr__hng030rm_spin2_putpixel8_
00844 110 BC 21 00 00 | 	long	@_hng030rm_spin2_putpixel8
00848 111             | ptr__retrocog_spin2_serialcog_
00848 111 38 30 00 00 | 	long	@_retrocog_spin2_serialcog
0084c 112             | result1
0084c 112 00 00 00 00 | 	long	0
00850 113             | result2
00850 113 00 00 00 00 | 	long	0
00854 114             | result3
00854 114 00 00 00 00 | 	long	0
00858 115             | COG_BSS_START
00858 115             | 	fit	480
00858                 | 	orgh
00858                 | hubentry
00858                 | 
00858                 | _program
00858     5A 5A 05 F6 | 	mov	COUNT_, #90
0085c     B0 00 A0 FD | 	call	#pushregs_
00860     40 54 06 F6 | 	mov	local01, #64
00864     2C 0E 06 F1 | 	add	objptr, #44
00868     07 57 02 F6 | 	mov	local02, objptr
0086c                 | ' 
0086c                 | ' ' initialize pointers and variables
0086c                 | ' 
0086c                 | ' border_ptr:=@bordercolor
0086c     24 0E 86 F1 | 	sub	objptr, #36
00870     07 57 62 FC | 	wrlong	local02, objptr
00874     08 00 00 FF 
00878     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
0087c                 | ' font_ptr:=@st_font
0087c     04 0E 86 F1 | 	sub	objptr, #4
00880     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
00884                 | ' hdmibase:=base
00884     20 0E 06 F1 | 	add	objptr, #32
00888     07 01 68 FC | 	wrlong	#0, objptr
0088c     24 0E 86 F1 | 	sub	objptr, #36
00890     0D 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
00894                 | ' p1:=@putpixel1
00894     07 4B 02 F6 | 	mov	arg01, objptr
00898     08 00 00 FF 
0089c     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
008a0     C8 2F B0 FD | 	call	#__system___make_methodptr
008a4     12 59 02 F6 | 	mov	local03, result1
008a8     DC 0E 06 F1 | 	add	objptr, #220
008ac     07 59 62 FC | 	wrlong	local03, objptr
008b0     DC 0E 86 F1 | 	sub	objptr, #220
008b4     0E 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
008b8                 | ' p2:=@putpixel2
008b8     07 4B 02 F6 | 	mov	arg01, objptr
008bc     AC 2F B0 FD | 	call	#__system___make_methodptr
008c0     12 59 02 F6 | 	mov	local03, result1
008c4     E0 0E 06 F1 | 	add	objptr, #224
008c8     07 59 62 FC | 	wrlong	local03, objptr
008cc     E0 0E 86 F1 | 	sub	objptr, #224
008d0     0F 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
008d4                 | ' p4:=@putpixel4
008d4     07 4B 02 F6 | 	mov	arg01, objptr
008d8     90 2F B0 FD | 	call	#__system___make_methodptr
008dc     12 59 02 F6 | 	mov	local03, result1
008e0     E4 0E 06 F1 | 	add	objptr, #228
008e4     07 59 62 FC | 	wrlong	local03, objptr
008e8     E4 0E 86 F1 | 	sub	objptr, #228
008ec     10 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
008f0                 | ' p8:=@putpixel8
008f0     07 4B 02 F6 | 	mov	arg01, objptr
008f4     74 2F B0 FD | 	call	#__system___make_methodptr
008f8     12 59 02 F6 | 	mov	local03, result1
008fc     E8 0E 06 F1 | 	add	objptr, #232
00900     07 59 62 FC | 	wrlong	local03, objptr
00904     E8 0E 86 F1 | 	sub	objptr, #232
00908                 | ' 
00908                 | ' 
00908                 | ' ' the mode has to be set here to enable computing the buffer length
00908                 | ' 
00908                 | ' setmode(mode)
00908     40 4A 06 F6 | 	mov	arg01, #64
0090c     E8 1C B0 FD | 	call	#_hng030rm_spin2_setmode
00910     40 0E 06 F1 | 	add	objptr, #64
00914     07 5B 02 F6 | 	mov	local04, objptr
00918                 | ' 
00918                 | ' vblank_ptr:=@vblank
00918     34 0E 86 F1 | 	sub	objptr, #52
0091c     07 5B 62 FC | 	wrlong	local04, objptr
00920     28 0E 06 F1 | 	add	objptr, #40
00924     07 5D 02 F6 | 	mov	local05, objptr
00928                 | ' cursor_ptr:=@cursor_x
00928     24 0E 86 F1 | 	sub	objptr, #36
0092c     07 5D 62 FC | 	wrlong	local05, objptr
00930     88 0E 06 F1 | 	add	objptr, #136
00934     07 5F 02 F6 | 	mov	local06, objptr
00938                 | ' 
00938                 | ' fontnum_ptr:=@fontnum
00938     78 0E 86 F1 | 	sub	objptr, #120
0093c     07 5F 62 FC | 	wrlong	local06, objptr
00940                 | ' 
00940                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
00940     78 0E 06 F1 | 	add	objptr, #120
00944     07 01 68 FC | 	wrlong	#0, objptr
00948     1C 0E 06 F1 | 	add	objptr, #28
0094c     07 4B 02 F6 | 	mov	arg01, objptr
00950     B4 0E 86 F1 | 	sub	objptr, #180
00954     0F 00 00 FF 
00958     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
0095c     0B 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00960     0F 00 00 FF 
00964     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
00968                 | ' bytemove(@colors,@vgacolors,16)
00968     10 4E 06 F6 | 	mov	arg03, #16
0096c     D4 2D B0 FD | 	call	#__system____builtin_memmove
00970                 | ' 
00970                 | ' ' initialize a cursor
00970                 | ' 
00970                 | ' cursor_x:=0
00970     34 0E 06 F1 | 	add	objptr, #52
00974     07 01 48 FC | 	wrbyte	#0, objptr
00978                 | ' cursor_y:=0
00978     01 0E 06 F1 | 	add	objptr, #1
0097c     07 01 48 FC | 	wrbyte	#0, objptr
00980                 | ' cursor_sh:=14
00980     01 0E 06 F1 | 	add	objptr, #1
00984     07 1D 48 FC | 	wrbyte	#14, objptr
00988     36 0E 86 F1 | 	sub	objptr, #54
0098c                 | ' 
0098c                 | ' 
0098c                 | ' ' start the cog
0098c                 | ' 
0098c                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
0098c     0F 00 00 FF 
00990     68 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
00994     0B 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
00998     0F 00 00 FF 
0099c     68 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
009a0     07 4F 02 F6 | 	mov	arg03, objptr
009a4     10 4A 06 F6 | 	mov	arg01, #16
009a8     28 4E 62 FD | 	setq	arg03
009ac     26 4B F2 FC | 	coginit	arg01, arg02 wc
009b0     01 4A 66 C6 |  if_b	neg	arg01, #1
009b4     25 25 02 F6 | 	mov	result1, arg01
009b8     12 61 02 F6 | 	mov	local07, result1
009bc     28 0E 06 F1 | 	add	objptr, #40
009c0     07 61 62 FC | 	wrlong	local07, objptr
009c4     28 0E 86 F1 | 	sub	objptr, #40
009c8                 | ' waitms(20)
009c8     14 4A 06 F6 | 	mov	arg01, #20
009cc     D8 2F B0 FD | 	call	#__system___waitms
009d0                 | ' 
009d0                 | ' ' clear the screen and set the colors to green on black
009d0                 | ' 
009d0                 | ' cls(c_green,c_black)
009d0     C7 4A 06 F6 | 	mov	arg01, #199
009d4     00 4C 06 F6 | 	mov	arg02, #0
009d8     88 18 B0 FD | 	call	#_hng030rm_spin2_cls
009dc                 | ' setbordercolor(0,0,128)
009dc     00 4A 06 F6 | 	mov	arg01, #0
009e0     00 4C 06 F6 | 	mov	arg02, #0
009e4     80 4E 06 F6 | 	mov	arg03, #128
009e8     54 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
009ec                 | ' setwritecolors(c_green,c_black)
009ec     00 4C 06 F6 | 	mov	arg02, #0
009f0                 | ' 
009f0                 | ' 
009f0                 | ' write_color:=ff
009f0     38 0E 06 F1 | 	add	objptr, #56
009f4     07 8F 69 FC | 	wrlong	#199, objptr
009f8                 | ' write_background:=bb
009f8     04 0E 06 F1 | 	add	objptr, #4
009fc     07 01 68 FC | 	wrlong	#0, objptr
00a00                 | ' 
00a00                 | ' return cog
00a00     14 0E 86 F1 | 	sub	objptr, #20
00a04     07 25 02 FB | 	rdlong	result1, objptr
00a08     28 0E 86 F1 | 	sub	objptr, #40
00a0c     00 4A 06 F6 | 	mov	arg01, #0
00a10     00 4E 06 F6 | 	mov	arg03, #0
00a14     28 18 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00a18                 | ' v030.start(mode,pin)
00a18                 | ' v030.setbordercolor(0,0,0)
00a18                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00a18     07 4B 02 F6 | 	mov	arg01, objptr
00a1c     0C 4D 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00a20     48 2E B0 FD | 	call	#__system___make_methodptr
00a24     00 28 06 F6 | 	mov	result3, #0
00a28     00 26 06 F6 | 	mov	result2, #0
00a2c     12 4D 02 F6 | 	mov	arg02, result1
00a30     00 4E 06 F6 | 	mov	arg03, #0
00a34     00 50 06 F6 | 	mov	arg04, #0
00a38     00 4A 06 F6 | 	mov	arg01, #0
00a3c     E4 2F B0 FD | 	call	#__system___basic_open
00a40     EC 0E 06 F1 | 	add	objptr, #236
00a44                 | ' 
00a44                 | ' cog:=cogspin(16,serialcog(),@serialstack)
00a44     07 63 02 F6 | 	mov	local08, objptr
00a48     01 00 00 FF 
00a4c     18 0F 06 F1 | 	add	objptr, ##792
00a50     07 65 02 F6 | 	mov	local09, objptr
00a54     32 63 62 FC | 	wrlong	local08, local09
00a58     04 64 06 F1 | 	add	local09, #4
00a5c     32 23 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local09
00a60     07 4F 02 F6 | 	mov	arg03, objptr
00a64     10 4A 06 F6 | 	mov	arg01, #16
00a68     28 4E 62 FD | 	setq	arg03
00a6c     04 4B F2 FC | 	coginit	arg01, entryptr__ wc
00a70     01 4A 66 C6 |  if_b	neg	arg01, #1
00a74     25 25 02 F6 | 	mov	result1, arg01
00a78     02 00 00 FF 
00a7c     04 0E 86 F1 | 	sub	objptr, ##1028
00a80     9A 4A 06 F6 | 	mov	arg01, #154
00a84     93 4C 06 F6 | 	mov	arg02, #147
00a88     D8 17 B0 FD | 	call	#_hng030rm_spin2_cls
00a8c                 | ' #line 2 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.bas"
00a8c                 | ' 
00a8c                 | ' 'e=0 ' this strange thing makes the program run in full optimization
00a8c                 | ' 
00a8c                 | ' startvideo 
00a8c                 | ' rm.start
00a8c                 | ' 
00a8c                 | ' cls
00a8c                 | ' print "Basic test"
00a8c     00 4A 06 F6 | 	mov	arg01, #0
00a90     E8 42 B0 FD | 	call	#__system___getiolock_0102
00a94     12 4B 02 F6 | 	mov	arg01, result1
00a98     10 2E B0 FD | 	call	#__system___lockmem
00a9c     00 24 06 F6 | 	mov	result1, #0
00aa0     2C 00 00 FF 
00aa4     36 4D 06 F6 | 	mov	arg02, ##@LR__0303
00aa8     00 4A 06 F6 | 	mov	arg01, #0
00aac     00 4E 06 F6 | 	mov	arg03, #0
00ab0     70 30 B0 FD | 	call	#__system___basic_print_string
00ab4     12 67 02 F6 | 	mov	local10, result1
00ab8     00 68 06 F6 | 	mov	local11, #0
00abc     00 4A 06 F6 | 	mov	arg01, #0
00ac0     0A 4C 06 F6 | 	mov	arg02, #10
00ac4     00 4E 06 F6 | 	mov	arg03, #0
00ac8     0C 30 B0 FD | 	call	#__system___basic_print_char
00acc     01 24 06 F6 | 	mov	result1, #1
00ad0     01 6A 06 F6 | 	mov	local12, #1
00ad4     00 6C 06 F6 | 	mov	local13, #0
00ad8     00 4A 06 F6 | 	mov	arg01, #0
00adc     9C 42 B0 FD | 	call	#__system___getiolock_0102
00ae0     12 01 68 FC | 	wrlong	#0, result1
00ae4     00 24 06 F6 | 	mov	result1, #0
00ae8     00 6E 06 F6 | 	mov	local14, #0
00aec                 | ' print
00aec     00 4A 06 F6 | 	mov	arg01, #0
00af0     88 42 B0 FD | 	call	#__system___getiolock_0102
00af4     12 4B 02 F6 | 	mov	arg01, result1
00af8     B0 2D B0 FD | 	call	#__system___lockmem
00afc     00 24 06 F6 | 	mov	result1, #0
00b00     00 70 06 F6 | 	mov	local15, #0
00b04     00 4A 06 F6 | 	mov	arg01, #0
00b08     0A 4C 06 F6 | 	mov	arg02, #10
00b0c     00 4E 06 F6 | 	mov	arg03, #0
00b10     C4 2F B0 FD | 	call	#__system___basic_print_char
00b14     01 24 06 F6 | 	mov	result1, #1
00b18     01 72 06 F6 | 	mov	local16, #1
00b1c     00 74 06 F6 | 	mov	local17, #0
00b20     00 4A 06 F6 | 	mov	arg01, #0
00b24     54 42 B0 FD | 	call	#__system___getiolock_0102
00b28     12 01 68 FC | 	wrlong	#0, result1
00b2c     00 24 06 F6 | 	mov	result1, #0
00b30     00 76 06 F6 | 	mov	local18, #0
00b34                 | ' 
00b34                 | ' do
00b34                 | LR__0001
00b34                 | '   if lpeek($30)<>0 then
00b34                 | ' asm
00b34     30 24 0E FB | 	rdlong	result1, #48 wz
00b38                 | ' return r
00b38     F0 03 90 AD |  if_e	jmp	#LR__0013
00b3c                 | ' asm
00b3c     33 24 C6 FA | 	rdbyte	result1, #51
00b40                 | ' return r
00b40     12 79 02 F6 | 	mov	local19, result1
00b44     3C 7B 02 F6 | 	mov	local20, local19
00b48     07 7A 46 F7 | 	zerox	local20, #7
00b4c     02 00 00 FF 
00b50     94 0E 06 F1 | 	add	objptr, ##1172
00b54     07 7B 62 FC | 	wrlong	local20, objptr
00b58                 | '     cmd=peek($33)
00b58                 | '     if cmd<>0 then
00b58     07 7B 0A FB | 	rdlong	local20, objptr wz
00b5c                 | ' asm
00b5c     32 7C C6 5A |  if_ne	rdbyte	local21, #50
00b60                 | ' return r
00b60                 | ' asm
00b60     31 24 C6 5A |  if_ne	rdbyte	result1, #49
00b64                 | ' return r
00b64     12 7F 02 56 |  if_ne	mov	local22, result1
00b68     00 4C 06 F6 | 	mov	arg02, #0
00b6c                 | ' asm
00b6c     30 00 6C FC | 	wrlong	#0, #48
00b70                 | '     lpoke $30,0 
00b70                 | '     if cmd=$87 then print "Keyboard key released, scancode "; b11 
00b70     07 7B 02 FB | 	rdlong	local20, objptr
00b74     02 00 00 FF 
00b78     94 0E 86 F1 | 	sub	objptr, ##1172
00b7c     87 7A 0E F2 | 	cmp	local20, #135 wz
00b80     A0 00 90 5D |  if_ne	jmp	#LR__0002
00b84     3E 81 02 F6 | 	mov	local23, local21
00b88     07 80 46 F7 | 	zerox	local23, #7
00b8c     00 4A 06 F6 | 	mov	arg01, #0
00b90     E8 41 B0 FD | 	call	#__system___getiolock_0102
00b94     12 4B 02 F6 | 	mov	arg01, result1
00b98     10 2D B0 FD | 	call	#__system___lockmem
00b9c     00 24 06 F6 | 	mov	result1, #0
00ba0     00 70 06 F6 | 	mov	local15, #0
00ba4     2C 00 00 FF 
00ba8     41 73 06 F6 | 	mov	local16, ##@LR__0304
00bac     39 75 02 F6 | 	mov	local17, local16
00bb0     00 76 06 F6 | 	mov	local18, #0
00bb4     00 4A 06 F6 | 	mov	arg01, #0
00bb8     3A 4D 02 F6 | 	mov	arg02, local17
00bbc     00 4E 06 F6 | 	mov	arg03, #0
00bc0     60 2F B0 FD | 	call	#__system___basic_print_string
00bc4     12 67 02 F6 | 	mov	local10, result1
00bc8     00 68 06 F6 | 	mov	local11, #0
00bcc     40 6B 02 F6 | 	mov	local12, local23
00bd0     00 6C 06 F6 | 	mov	local13, #0
00bd4     0A 6E 06 F6 | 	mov	local14, #10
00bd8     00 4A 06 F6 | 	mov	arg01, #0
00bdc     35 4D 02 F6 | 	mov	arg02, local12
00be0     00 4E 06 F6 | 	mov	arg03, #0
00be4     0A 50 06 F6 | 	mov	arg04, #10
00be8     C4 2F B0 FD | 	call	#__system___basic_print_unsigned
00bec     12 83 02 F6 | 	mov	local24, result1
00bf0     00 84 06 F6 | 	mov	local25, #0
00bf4     00 4A 06 F6 | 	mov	arg01, #0
00bf8     0A 4C 06 F6 | 	mov	arg02, #10
00bfc     00 4E 06 F6 | 	mov	arg03, #0
00c00     D4 2E B0 FD | 	call	#__system___basic_print_char
00c04     01 24 06 F6 | 	mov	result1, #1
00c08     01 86 06 F6 | 	mov	local26, #1
00c0c     00 88 06 F6 | 	mov	local27, #0
00c10     00 4A 06 F6 | 	mov	arg01, #0
00c14     64 41 B0 FD | 	call	#__system___getiolock_0102
00c18     12 01 68 FC | 	wrlong	#0, result1
00c1c     00 24 06 F6 | 	mov	result1, #0
00c20     00 8A 06 F6 | 	mov	local28, #0
00c24                 | LR__0002
00c24                 | '     if cmd=$88 then print "Keyboard key pressed,  scancode "; b11   ; ", charcode "; b12
00c24     02 00 00 FF 
00c28     94 0E 06 F1 | 	add	objptr, ##1172
00c2c     07 7B 02 FB | 	rdlong	local20, objptr
00c30     02 00 00 FF 
00c34     94 0E 86 F1 | 	sub	objptr, ##1172
00c38     88 7A 0E F2 | 	cmp	local20, #136 wz
00c3c     F8 00 90 5D |  if_ne	jmp	#LR__0003
00c40     3E 8D 02 F6 | 	mov	local29, local21
00c44     07 8C 46 F7 | 	zerox	local29, #7
00c48     3F 8F 02 F6 | 	mov	local30, local22
00c4c     07 8E 46 F7 | 	zerox	local30, #7
00c50     00 4A 06 F6 | 	mov	arg01, #0
00c54     24 41 B0 FD | 	call	#__system___getiolock_0102
00c58     12 4B 02 F6 | 	mov	arg01, result1
00c5c     4C 2C B0 FD | 	call	#__system___lockmem
00c60     00 24 06 F6 | 	mov	result1, #0
00c64     00 70 06 F6 | 	mov	local15, #0
00c68     2C 00 00 FF 
00c6c     62 73 06 F6 | 	mov	local16, ##@LR__0305
00c70     39 75 02 F6 | 	mov	local17, local16
00c74     00 76 06 F6 | 	mov	local18, #0
00c78     00 4A 06 F6 | 	mov	arg01, #0
00c7c     3A 4D 02 F6 | 	mov	arg02, local17
00c80     00 4E 06 F6 | 	mov	arg03, #0
00c84     9C 2E B0 FD | 	call	#__system___basic_print_string
00c88     12 67 02 F6 | 	mov	local10, result1
00c8c     00 68 06 F6 | 	mov	local11, #0
00c90     46 6B 02 F6 | 	mov	local12, local29
00c94     00 6C 06 F6 | 	mov	local13, #0
00c98     0A 6E 06 F6 | 	mov	local14, #10
00c9c     00 4A 06 F6 | 	mov	arg01, #0
00ca0     35 4D 02 F6 | 	mov	arg02, local12
00ca4     00 4E 06 F6 | 	mov	arg03, #0
00ca8     0A 50 06 F6 | 	mov	arg04, #10
00cac     00 2F B0 FD | 	call	#__system___basic_print_unsigned
00cb0     12 83 02 F6 | 	mov	local24, result1
00cb4     00 84 06 F6 | 	mov	local25, #0
00cb8     2C 00 00 FF 
00cbc     83 87 06 F6 | 	mov	local26, ##@LR__0306
00cc0     43 89 02 F6 | 	mov	local27, local26
00cc4     00 8A 06 F6 | 	mov	local28, #0
00cc8     00 4A 06 F6 | 	mov	arg01, #0
00ccc     44 4D 02 F6 | 	mov	arg02, local27
00cd0     00 4E 06 F6 | 	mov	arg03, #0
00cd4     4C 2E B0 FD | 	call	#__system___basic_print_string
00cd8     12 91 02 F6 | 	mov	local31, result1
00cdc     00 92 06 F6 | 	mov	local32, #0
00ce0     47 95 02 F6 | 	mov	local33, local30
00ce4     00 96 06 F6 | 	mov	local34, #0
00ce8     0A 98 06 F6 | 	mov	local35, #10
00cec     00 4A 06 F6 | 	mov	arg01, #0
00cf0     4A 4D 02 F6 | 	mov	arg02, local33
00cf4     00 4E 06 F6 | 	mov	arg03, #0
00cf8     0A 50 06 F6 | 	mov	arg04, #10
00cfc     B0 2E B0 FD | 	call	#__system___basic_print_unsigned
00d00     12 9B 02 F6 | 	mov	local36, result1
00d04     00 9C 06 F6 | 	mov	local37, #0
00d08     00 4A 06 F6 | 	mov	arg01, #0
00d0c     0A 4C 06 F6 | 	mov	arg02, #10
00d10     00 4E 06 F6 | 	mov	arg03, #0
00d14     C0 2D B0 FD | 	call	#__system___basic_print_char
00d18     01 24 06 F6 | 	mov	result1, #1
00d1c     01 9E 06 F6 | 	mov	local38, #1
00d20     00 A0 06 F6 | 	mov	local39, #0
00d24     00 4A 06 F6 | 	mov	arg01, #0
00d28     50 40 B0 FD | 	call	#__system___getiolock_0102
00d2c     12 01 68 FC | 	wrlong	#0, result1
00d30     00 24 06 F6 | 	mov	result1, #0
00d34     00 A2 06 F6 | 	mov	local40, #0
00d38                 | LR__0003
00d38                 | '     if cmd=$89 then 
00d38     02 00 00 FF 
00d3c     94 0E 06 F1 | 	add	objptr, ##1172
00d40     07 7B 02 FB | 	rdlong	local20, objptr
00d44     02 00 00 FF 
00d48     94 0E 86 F1 | 	sub	objptr, ##1172
00d4c     89 7A 0E F2 | 	cmp	local20, #137 wz
00d50     D8 01 90 5D |  if_ne	jmp	#LR__0012
00d54                 | '       if b11=0 then 
00d54     3E 7B 02 F6 | 	mov	local20, local21
00d58     07 7A 4E F7 | 	zerox	local20, #7 wz
00d5c     70 00 90 5D |  if_ne	jmp	#LR__0004
00d60                 | '         print "Keyboard modifiers released"
00d60     00 4A 06 F6 | 	mov	arg01, #0
00d64     14 40 B0 FD | 	call	#__system___getiolock_0102
00d68     12 4B 02 F6 | 	mov	arg01, result1
00d6c     3C 2B B0 FD | 	call	#__system___lockmem
00d70     00 24 06 F6 | 	mov	result1, #0
00d74     00 70 06 F6 | 	mov	local15, #0
00d78     2C 00 00 FF 
00d7c     8F 73 06 F6 | 	mov	local16, ##@LR__0307
00d80     39 75 02 F6 | 	mov	local17, local16
00d84     00 76 06 F6 | 	mov	local18, #0
00d88     00 4A 06 F6 | 	mov	arg01, #0
00d8c     3A 4D 02 F6 | 	mov	arg02, local17
00d90     00 4E 06 F6 | 	mov	arg03, #0
00d94     8C 2D B0 FD | 	call	#__system___basic_print_string
00d98     12 67 02 F6 | 	mov	local10, result1
00d9c     00 68 06 F6 | 	mov	local11, #0
00da0     00 4A 06 F6 | 	mov	arg01, #0
00da4     0A 4C 06 F6 | 	mov	arg02, #10
00da8     00 4E 06 F6 | 	mov	arg03, #0
00dac     28 2D B0 FD | 	call	#__system___basic_print_char
00db0     01 24 06 F6 | 	mov	result1, #1
00db4     01 6A 06 F6 | 	mov	local12, #1
00db8     00 6C 06 F6 | 	mov	local13, #0
00dbc     00 4A 06 F6 | 	mov	arg01, #0
00dc0     B8 3F B0 FD | 	call	#__system___getiolock_0102
00dc4     12 01 68 FC | 	wrlong	#0, result1
00dc8     00 6E 06 F6 | 	mov	local14, #0
00dcc     5C 01 90 FD | 	jmp	#LR__0011
00dd0                 | LR__0004
00dd0     3E A5 02 F6 | 	mov	local41, local21
00dd4     07 A4 46 F7 | 	zerox	local41, #7
00dd8                 | '         print "Keyboard modifiers pressed: ";hex$(b11)
00dd8     00 4A 06 F6 | 	mov	arg01, #0
00ddc     9C 3F B0 FD | 	call	#__system___getiolock_0102
00de0     12 4B 02 F6 | 	mov	arg01, result1
00de4     C4 2A B0 FD | 	call	#__system___lockmem
00de8     00 24 06 F6 | 	mov	result1, #0
00dec     00 70 06 F6 | 	mov	local15, #0
00df0     2C 00 00 FF 
00df4     AB 73 06 F6 | 	mov	local16, ##@LR__0308
00df8     39 75 02 F6 | 	mov	local17, local16
00dfc     00 76 06 F6 | 	mov	local18, #0
00e00     00 4A 06 F6 | 	mov	arg01, #0
00e04     3A 4D 02 F6 | 	mov	arg02, local17
00e08     00 4E 06 F6 | 	mov	arg03, #0
00e0c     14 2D B0 FD | 	call	#__system___basic_print_string
00e10     12 67 02 F6 | 	mov	local10, result1
00e14     00 68 06 F6 | 	mov	local11, #0
00e18     52 6B 02 F6 | 	mov	local12, local41
00e1c     00 6C 06 F6 | 	mov	local13, #0
00e20     35 A7 02 F6 | 	mov	local42, local12
00e24     00 4C 06 F6 | 	mov	arg02, #0
00e28     10 4E 06 F6 | 	mov	arg03, #16
00e2c     00 A8 0E F6 | 	mov	local43, #0 wz
00e30     01 A8 06 F6 | 	mov	local43, #1
00e34     10 AA 06 F6 | 	mov	local44, #16
00e38     01 AC 06 F6 | 	mov	local45, #1
00e3c     F4 F1 9F FE | 	loc	pa,	#(@LR__0006-@LR__0005)
00e40     93 00 A0 FD | 	call	#FCACHE_LOAD_
00e44                 | LR__0005
00e44     00 AE 06 F6 | 	mov	local46, #0
00e48     53 AB 1A F2 | 	cmp	local44, local42 wcz
00e4c     01 AE 66 E6 |  if_be	neg	local46, #1
00e50     00 B0 06 F6 | 	mov	local47, #0
00e54     55 AD 1A F2 | 	cmp	local45, local44 wcz
00e58     01 B0 66 C6 |  if_b	neg	local47, #1
00e5c     58 AF CA F7 | 	test	local46, local47 wz
00e60     14 00 90 AD |  if_e	jmp	#LR__0007
00e64     55 AD 02 F6 | 	mov	local45, local44
00e68     10 AA 06 FD | 	qmul	local44, #16
00e6c     18 AA 62 FD | 	getqx	local44
00e70     01 A8 06 F1 | 	add	local43, #1
00e74     CC FF 9F FD | 	jmp	#LR__0005
00e78                 | LR__0006
00e78                 | LR__0007
00e78     20 A8 3E F3 | 	fle	local43, #32 wcz
00e7c     54 4B 02 F6 | 	mov	arg01, local43
00e80     02 4A 06 F1 | 	add	arg01, #2
00e84     E4 34 B0 FD | 	call	#__system___gc_alloc_managed
00e88     12 B3 02 F6 | 	mov	local48, result1
00e8c     54 B5 02 F6 | 	mov	local49, local43
00e90     59 B5 02 F1 | 	add	local49, local48
00e94     5A 01 48 FC | 	wrbyte	#0, local49
00e98     A0 F1 9F FE | 	loc	pa,	#(@LR__0009-@LR__0008)
00e9c     93 00 A0 FD | 	call	#FCACHE_LOAD_
00ea0                 | LR__0008
00ea0     00 A8 1E F2 | 	cmp	local43, #0 wcz
00ea4     34 00 90 ED |  if_be	jmp	#LR__0010
00ea8     01 A8 86 F1 | 	sub	local43, #1
00eac     53 09 03 F6 | 	mov	muldiva_, local42
00eb0     10 0A 07 F6 | 	mov	muldivb_, #16
00eb4     CC 00 A0 FD | 	call	#unsdivide_
00eb8     84 B7 02 F6 | 	mov	local50, muldiva_
00ebc     85 A7 02 F6 | 	mov	local42, muldivb_
00ec0     0A B6 1E F2 | 	cmp	local50, #10 wcz
00ec4     30 B6 06 C1 |  if_b	add	local50, #48
00ec8     37 B6 06 31 |  if_ae	add	local50, #55
00ecc     54 B9 02 F6 | 	mov	local51, local43
00ed0     59 B9 02 F1 | 	add	local51, local48
00ed4     5C B7 42 FC | 	wrbyte	local50, local51
00ed8     C4 FF 9F FD | 	jmp	#LR__0008
00edc                 | LR__0009
00edc                 | LR__0010
00edc     59 25 02 F6 | 	mov	result1, local48
00ee0     12 6F 02 F6 | 	mov	local14, result1
00ee4     00 82 06 F6 | 	mov	local24, #0
00ee8     34 4B 02 F6 | 	mov	arg01, local11
00eec     37 4D 02 F6 | 	mov	arg02, local14
00ef0     00 4E 06 F6 | 	mov	arg03, #0
00ef4     2C 2C B0 FD | 	call	#__system___basic_print_string
00ef8     12 85 02 F6 | 	mov	local25, result1
00efc     00 86 06 F6 | 	mov	local26, #0
00f00     00 4A 06 F6 | 	mov	arg01, #0
00f04     0A 4C 06 F6 | 	mov	arg02, #10
00f08     00 4E 06 F6 | 	mov	arg03, #0
00f0c     C8 2B B0 FD | 	call	#__system___basic_print_char
00f10     01 24 06 F6 | 	mov	result1, #1
00f14     01 88 06 F6 | 	mov	local27, #1
00f18     00 8A 06 F6 | 	mov	local28, #0
00f1c     00 4A 06 F6 | 	mov	arg01, #0
00f20     58 3E B0 FD | 	call	#__system___getiolock_0102
00f24     12 01 68 FC | 	wrlong	#0, result1
00f28     00 90 06 F6 | 	mov	local31, #0
00f2c                 | LR__0011
00f2c                 | LR__0012
00f2c                 | LR__0013
00f2c                 | '   
00f2c                 | '   if lpeek($34)<>0 then
00f2c                 | ' asm
00f2c     34 24 0E FB | 	rdlong	result1, #52 wz
00f30                 | ' return r
00f30     C0 05 90 AD |  if_e	jmp	#LR__0020
00f34                 | ' asm
00f34     37 24 C6 FA | 	rdbyte	result1, #55
00f38                 | ' return r
00f38     12 79 02 F6 | 	mov	local19, result1
00f3c     3C 7B 02 F6 | 	mov	local20, local19
00f40     07 7A 46 F7 | 	zerox	local20, #7
00f44     02 00 00 FF 
00f48     94 0E 06 F1 | 	add	objptr, ##1172
00f4c     07 7B 62 FC | 	wrlong	local20, objptr
00f50                 | '     cmd=peek($37)
00f50                 | '     if cmd<>0 then
00f50     07 7B 0A FB | 	rdlong	local20, objptr wz
00f54                 | ' asm
00f54     36 7C C6 5A |  if_ne	rdbyte	local21, #54
00f58                 | ' return r
00f58                 | ' asm
00f58     35 24 C6 5A |  if_ne	rdbyte	result1, #53
00f5c                 | ' return r
00f5c     12 7F 02 56 |  if_ne	mov	local22, result1
00f60     00 4C 06 F6 | 	mov	arg02, #0
00f64                 | ' asm
00f64     34 00 6C FC | 	wrlong	#0, #52
00f68                 | '     lpoke $34,0
00f68                 | '     if cmd=$81 then mousex=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
00f68     07 7B 02 FB | 	rdlong	local20, objptr
00f6c     02 00 00 FF 
00f70     94 0E 86 F1 | 	sub	objptr, ##1172
00f74     81 7A 0E F2 | 	cmp	local20, #129 wz
00f78     48 01 90 5D |  if_ne	jmp	#LR__0014
00f7c     3E BB 02 F6 | 	mov	local52, local21
00f80     07 BA 46 F7 | 	zerox	local52, #7
00f84     3F BD 02 F6 | 	mov	local53, local22
00f88     07 BC 46 F7 | 	zerox	local53, #7
00f8c     5E BF 02 F6 | 	mov	local54, local53
00f90     07 BE 66 F0 | 	shl	local54, #7
00f94     5D C1 02 F6 | 	mov	local55, local52
00f98     5F C1 02 F1 | 	add	local55, local54
00f9c     02 00 00 FF 
00fa0     A0 0E 06 F1 | 	add	objptr, ##1184
00fa4     07 C1 62 FC | 	wrlong	local55, objptr
00fa8     02 00 00 FF 
00fac     A0 0E 86 F1 | 	sub	objptr, ##1184
00fb0     00 4A 06 F6 | 	mov	arg01, #0
00fb4     C4 3D B0 FD | 	call	#__system___getiolock_0102
00fb8     12 4B 02 F6 | 	mov	arg01, result1
00fbc     EC 28 B0 FD | 	call	#__system___lockmem
00fc0     00 24 06 F6 | 	mov	result1, #0
00fc4     00 78 06 F6 | 	mov	local19, #0
00fc8     00 70 06 F6 | 	mov	local15, #0
00fcc     2C 00 00 FF 
00fd0     C8 73 06 F6 | 	mov	local16, ##@LR__0309
00fd4     39 75 02 F6 | 	mov	local17, local16
00fd8     00 76 06 F6 | 	mov	local18, #0
00fdc     00 4A 06 F6 | 	mov	arg01, #0
00fe0     3A 4D 02 F6 | 	mov	arg02, local17
00fe4     00 4E 06 F6 | 	mov	arg03, #0
00fe8     38 2B B0 FD | 	call	#__system___basic_print_string
00fec     12 67 02 F6 | 	mov	local10, result1
00ff0     00 68 06 F6 | 	mov	local11, #0
00ff4     02 00 00 FF 
00ff8     A0 0E 06 F1 | 	add	objptr, ##1184
00ffc     07 6D 02 FB | 	rdlong	local13, objptr
01000     02 00 00 FF 
01004     A0 0E 86 F1 | 	sub	objptr, ##1184
01008     36 6B 02 F6 | 	mov	local12, local13
0100c     00 6E 06 F6 | 	mov	local14, #0
01010     0A 82 06 F6 | 	mov	local24, #10
01014     00 4A 06 F6 | 	mov	arg01, #0
01018     35 4D 02 F6 | 	mov	arg02, local12
0101c     00 4E 06 F6 | 	mov	arg03, #0
01020     0A 50 06 F6 | 	mov	arg04, #10
01024     44 2B B0 FD | 	call	#__system___basic_print_integer
01028     12 85 02 F6 | 	mov	local25, result1
0102c     00 86 06 F6 | 	mov	local26, #0
01030     2C 00 00 FF 
01034     D9 89 06 F6 | 	mov	local27, ##@LR__0310
01038     44 8B 02 F6 | 	mov	local28, local27
0103c     00 90 06 F6 | 	mov	local31, #0
01040     00 4A 06 F6 | 	mov	arg01, #0
01044     45 4D 02 F6 | 	mov	arg02, local28
01048     00 4E 06 F6 | 	mov	arg03, #0
0104c     D4 2A B0 FD | 	call	#__system___basic_print_string
01050     12 93 02 F6 | 	mov	local32, result1
01054     00 94 06 F6 | 	mov	local33, #0
01058     02 00 00 FF 
0105c     A4 0E 06 F1 | 	add	objptr, ##1188
01060     07 99 02 FB | 	rdlong	local35, objptr
01064     02 00 00 FF 
01068     A4 0E 86 F1 | 	sub	objptr, ##1188
0106c     4C 97 02 F6 | 	mov	local34, local35
01070     00 9A 06 F6 | 	mov	local36, #0
01074     0A 9C 06 F6 | 	mov	local37, #10
01078     00 4A 06 F6 | 	mov	arg01, #0
0107c     4B 4D 02 F6 | 	mov	arg02, local34
01080     00 4E 06 F6 | 	mov	arg03, #0
01084     0A 50 06 F6 | 	mov	arg04, #10
01088     E0 2A B0 FD | 	call	#__system___basic_print_integer
0108c     12 9F 02 F6 | 	mov	local38, result1
01090     00 A0 06 F6 | 	mov	local39, #0
01094     00 4A 06 F6 | 	mov	arg01, #0
01098     0A 4C 06 F6 | 	mov	arg02, #10
0109c     00 4E 06 F6 | 	mov	arg03, #0
010a0     34 2A B0 FD | 	call	#__system___basic_print_char
010a4     01 24 06 F6 | 	mov	result1, #1
010a8     01 A2 06 F6 | 	mov	local40, #1
010ac     00 C2 06 F6 | 	mov	local56, #0
010b0     00 4A 06 F6 | 	mov	arg01, #0
010b4     C4 3C B0 FD | 	call	#__system___getiolock_0102
010b8     12 01 68 FC | 	wrlong	#0, result1
010bc     00 24 06 F6 | 	mov	result1, #0
010c0     00 C4 06 F6 | 	mov	local57, #0
010c4                 | LR__0014
010c4                 | '     if cmd=$82 then mousey=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
010c4     02 00 00 FF 
010c8     94 0E 06 F1 | 	add	objptr, ##1172
010cc     07 7B 02 FB | 	rdlong	local20, objptr
010d0     02 00 00 FF 
010d4     94 0E 86 F1 | 	sub	objptr, ##1172
010d8     82 7A 0E F2 | 	cmp	local20, #130 wz
010dc     48 01 90 5D |  if_ne	jmp	#LR__0015
010e0     3E C7 02 F6 | 	mov	local58, local21
010e4     07 C6 46 F7 | 	zerox	local58, #7
010e8     3F C9 02 F6 | 	mov	local59, local22
010ec     07 C8 46 F7 | 	zerox	local59, #7
010f0     64 CB 02 F6 | 	mov	local60, local59
010f4     07 CA 66 F0 | 	shl	local60, #7
010f8     63 CD 02 F6 | 	mov	local61, local58
010fc     65 CD 02 F1 | 	add	local61, local60
01100     02 00 00 FF 
01104     A4 0E 06 F1 | 	add	objptr, ##1188
01108     07 CD 62 FC | 	wrlong	local61, objptr
0110c     02 00 00 FF 
01110     A4 0E 86 F1 | 	sub	objptr, ##1188
01114     00 4A 06 F6 | 	mov	arg01, #0
01118     60 3C B0 FD | 	call	#__system___getiolock_0102
0111c     12 4B 02 F6 | 	mov	arg01, result1
01120     88 27 B0 FD | 	call	#__system___lockmem
01124     00 24 06 F6 | 	mov	result1, #0
01128     00 78 06 F6 | 	mov	local19, #0
0112c     00 70 06 F6 | 	mov	local15, #0
01130     2C 00 00 FF 
01134     DE 73 06 F6 | 	mov	local16, ##@LR__0311
01138     39 75 02 F6 | 	mov	local17, local16
0113c     00 76 06 F6 | 	mov	local18, #0
01140     00 4A 06 F6 | 	mov	arg01, #0
01144     3A 4D 02 F6 | 	mov	arg02, local17
01148     00 4E 06 F6 | 	mov	arg03, #0
0114c     D4 29 B0 FD | 	call	#__system___basic_print_string
01150     12 67 02 F6 | 	mov	local10, result1
01154     00 68 06 F6 | 	mov	local11, #0
01158     02 00 00 FF 
0115c     A0 0E 06 F1 | 	add	objptr, ##1184
01160     07 6D 02 FB | 	rdlong	local13, objptr
01164     02 00 00 FF 
01168     A0 0E 86 F1 | 	sub	objptr, ##1184
0116c     36 6B 02 F6 | 	mov	local12, local13
01170     00 6E 06 F6 | 	mov	local14, #0
01174     0A 82 06 F6 | 	mov	local24, #10
01178     00 4A 06 F6 | 	mov	arg01, #0
0117c     35 4D 02 F6 | 	mov	arg02, local12
01180     00 4E 06 F6 | 	mov	arg03, #0
01184     0A 50 06 F6 | 	mov	arg04, #10
01188     E0 29 B0 FD | 	call	#__system___basic_print_integer
0118c     12 85 02 F6 | 	mov	local25, result1
01190     00 86 06 F6 | 	mov	local26, #0
01194     2C 00 00 FF 
01198     EF 89 06 F6 | 	mov	local27, ##@LR__0312
0119c     44 8B 02 F6 | 	mov	local28, local27
011a0     00 90 06 F6 | 	mov	local31, #0
011a4     00 4A 06 F6 | 	mov	arg01, #0
011a8     45 4D 02 F6 | 	mov	arg02, local28
011ac     00 4E 06 F6 | 	mov	arg03, #0
011b0     70 29 B0 FD | 	call	#__system___basic_print_string
011b4     12 93 02 F6 | 	mov	local32, result1
011b8     00 94 06 F6 | 	mov	local33, #0
011bc     02 00 00 FF 
011c0     A4 0E 06 F1 | 	add	objptr, ##1188
011c4     07 99 02 FB | 	rdlong	local35, objptr
011c8     02 00 00 FF 
011cc     A4 0E 86 F1 | 	sub	objptr, ##1188
011d0     4C 97 02 F6 | 	mov	local34, local35
011d4     00 9A 06 F6 | 	mov	local36, #0
011d8     0A 9C 06 F6 | 	mov	local37, #10
011dc     00 4A 06 F6 | 	mov	arg01, #0
011e0     4B 4D 02 F6 | 	mov	arg02, local34
011e4     00 4E 06 F6 | 	mov	arg03, #0
011e8     0A 50 06 F6 | 	mov	arg04, #10
011ec     7C 29 B0 FD | 	call	#__system___basic_print_integer
011f0     12 9F 02 F6 | 	mov	local38, result1
011f4     00 A0 06 F6 | 	mov	local39, #0
011f8     00 4A 06 F6 | 	mov	arg01, #0
011fc     0A 4C 06 F6 | 	mov	arg02, #10
01200     00 4E 06 F6 | 	mov	arg03, #0
01204     D0 28 B0 FD | 	call	#__system___basic_print_char
01208     01 24 06 F6 | 	mov	result1, #1
0120c     01 A2 06 F6 | 	mov	local40, #1
01210     00 C2 06 F6 | 	mov	local56, #0
01214     00 4A 06 F6 | 	mov	arg01, #0
01218     60 3B B0 FD | 	call	#__system___getiolock_0102
0121c     12 01 68 FC | 	wrlong	#0, result1
01220     00 24 06 F6 | 	mov	result1, #0
01224     00 C4 06 F6 | 	mov	local57, #0
01228                 | LR__0015
01228                 | '     if cmd=$83 then mousewheel=b11+b12 shl 7 : print "Mousewheel: ";mousewheel
01228     02 00 00 FF 
0122c     94 0E 06 F1 | 	add	objptr, ##1172
01230     07 7B 02 FB | 	rdlong	local20, objptr
01234     02 00 00 FF 
01238     94 0E 86 F1 | 	sub	objptr, ##1172
0123c     83 7A 0E F2 | 	cmp	local20, #131 wz
01240     E0 00 90 5D |  if_ne	jmp	#LR__0016
01244     3E CF 02 F6 | 	mov	local62, local21
01248     07 CE 46 F7 | 	zerox	local62, #7
0124c     3F D1 02 F6 | 	mov	local63, local22
01250     07 D0 46 F7 | 	zerox	local63, #7
01254     68 D3 02 F6 | 	mov	local64, local63
01258     07 D2 66 F0 | 	shl	local64, #7
0125c     67 D5 02 F6 | 	mov	local65, local62
01260     69 D5 02 F1 | 	add	local65, local64
01264     02 00 00 FF 
01268     A8 0E 06 F1 | 	add	objptr, ##1192
0126c     07 D5 62 FC | 	wrlong	local65, objptr
01270     02 00 00 FF 
01274     A8 0E 86 F1 | 	sub	objptr, ##1192
01278     00 4A 06 F6 | 	mov	arg01, #0
0127c     FC 3A B0 FD | 	call	#__system___getiolock_0102
01280     12 4B 02 F6 | 	mov	arg01, result1
01284     24 26 B0 FD | 	call	#__system___lockmem
01288     00 24 06 F6 | 	mov	result1, #0
0128c     00 70 06 F6 | 	mov	local15, #0
01290     2C 00 00 FF 
01294     F4 73 06 F6 | 	mov	local16, ##@LR__0313
01298     39 75 02 F6 | 	mov	local17, local16
0129c     00 76 06 F6 | 	mov	local18, #0
012a0     00 4A 06 F6 | 	mov	arg01, #0
012a4     3A 4D 02 F6 | 	mov	arg02, local17
012a8     00 4E 06 F6 | 	mov	arg03, #0
012ac     74 28 B0 FD | 	call	#__system___basic_print_string
012b0     12 67 02 F6 | 	mov	local10, result1
012b4     00 68 06 F6 | 	mov	local11, #0
012b8     02 00 00 FF 
012bc     A8 0E 06 F1 | 	add	objptr, ##1192
012c0     07 6D 02 FB | 	rdlong	local13, objptr
012c4     02 00 00 FF 
012c8     A8 0E 86 F1 | 	sub	objptr, ##1192
012cc     36 6B 02 F6 | 	mov	local12, local13
012d0     00 6E 06 F6 | 	mov	local14, #0
012d4     0A 82 06 F6 | 	mov	local24, #10
012d8     00 4A 06 F6 | 	mov	arg01, #0
012dc     35 4D 02 F6 | 	mov	arg02, local12
012e0     00 4E 06 F6 | 	mov	arg03, #0
012e4     0A 50 06 F6 | 	mov	arg04, #10
012e8     80 28 B0 FD | 	call	#__system___basic_print_integer
012ec     12 85 02 F6 | 	mov	local25, result1
012f0     00 86 06 F6 | 	mov	local26, #0
012f4     00 4A 06 F6 | 	mov	arg01, #0
012f8     0A 4C 06 F6 | 	mov	arg02, #10
012fc     00 4E 06 F6 | 	mov	arg03, #0
01300     D4 27 B0 FD | 	call	#__system___basic_print_char
01304     01 24 06 F6 | 	mov	result1, #1
01308     01 88 06 F6 | 	mov	local27, #1
0130c     00 8A 06 F6 | 	mov	local28, #0
01310     00 4A 06 F6 | 	mov	arg01, #0
01314     64 3A B0 FD | 	call	#__system___getiolock_0102
01318     12 01 68 FC | 	wrlong	#0, result1
0131c     00 24 06 F6 | 	mov	result1, #0
01320     00 90 06 F6 | 	mov	local31, #0
01324                 | LR__0016
01324                 | '     if cmd=$84 then print "Mouse key: ";b11
01324     02 00 00 FF 
01328     94 0E 06 F1 | 	add	objptr, ##1172
0132c     07 7B 02 FB | 	rdlong	local20, objptr
01330     02 00 00 FF 
01334     94 0E 86 F1 | 	sub	objptr, ##1172
01338     84 7A 0E F2 | 	cmp	local20, #132 wz
0133c     A0 00 90 5D |  if_ne	jmp	#LR__0017
01340     3E D7 02 F6 | 	mov	local66, local21
01344     07 D6 46 F7 | 	zerox	local66, #7
01348     00 4A 06 F6 | 	mov	arg01, #0
0134c     2C 3A B0 FD | 	call	#__system___getiolock_0102
01350     12 4B 02 F6 | 	mov	arg01, result1
01354     54 25 B0 FD | 	call	#__system___lockmem
01358     00 24 06 F6 | 	mov	result1, #0
0135c     00 70 06 F6 | 	mov	local15, #0
01360     2D 00 00 FF 
01364     01 72 06 F6 | 	mov	local16, ##@LR__0314
01368     39 75 02 F6 | 	mov	local17, local16
0136c     00 76 06 F6 | 	mov	local18, #0
01370     00 4A 06 F6 | 	mov	arg01, #0
01374     3A 4D 02 F6 | 	mov	arg02, local17
01378     00 4E 06 F6 | 	mov	arg03, #0
0137c     A4 27 B0 FD | 	call	#__system___basic_print_string
01380     12 67 02 F6 | 	mov	local10, result1
01384     00 68 06 F6 | 	mov	local11, #0
01388     6B 6B 02 F6 | 	mov	local12, local66
0138c     00 6C 06 F6 | 	mov	local13, #0
01390     0A 6E 06 F6 | 	mov	local14, #10
01394     00 4A 06 F6 | 	mov	arg01, #0
01398     35 4D 02 F6 | 	mov	arg02, local12
0139c     00 4E 06 F6 | 	mov	arg03, #0
013a0     0A 50 06 F6 | 	mov	arg04, #10
013a4     08 28 B0 FD | 	call	#__system___basic_print_unsigned
013a8     12 83 02 F6 | 	mov	local24, result1
013ac     00 84 06 F6 | 	mov	local25, #0
013b0     00 4A 06 F6 | 	mov	arg01, #0
013b4     0A 4C 06 F6 | 	mov	arg02, #10
013b8     00 4E 06 F6 | 	mov	arg03, #0
013bc     18 27 B0 FD | 	call	#__system___basic_print_char
013c0     01 24 06 F6 | 	mov	result1, #1
013c4     01 86 06 F6 | 	mov	local26, #1
013c8     00 88 06 F6 | 	mov	local27, #0
013cc     00 4A 06 F6 | 	mov	arg01, #0
013d0     A8 39 B0 FD | 	call	#__system___getiolock_0102
013d4     12 01 68 FC | 	wrlong	#0, result1
013d8     00 24 06 F6 | 	mov	result1, #0
013dc     00 8A 06 F6 | 	mov	local28, #0
013e0                 | LR__0017
013e0                 | '     if cmd=$85 then print "Mouse clicked"
013e0     02 00 00 FF 
013e4     94 0E 06 F1 | 	add	objptr, ##1172
013e8     07 7B 02 FB | 	rdlong	local20, objptr
013ec     02 00 00 FF 
013f0     94 0E 86 F1 | 	sub	objptr, ##1172
013f4     85 7A 0E F2 | 	cmp	local20, #133 wz
013f8     70 00 90 5D |  if_ne	jmp	#LR__0018
013fc     00 4A 06 F6 | 	mov	arg01, #0
01400     78 39 B0 FD | 	call	#__system___getiolock_0102
01404     12 4B 02 F6 | 	mov	arg01, result1
01408     A0 24 B0 FD | 	call	#__system___lockmem
0140c     00 24 06 F6 | 	mov	result1, #0
01410     00 70 06 F6 | 	mov	local15, #0
01414     2D 00 00 FF 
01418     0D 72 06 F6 | 	mov	local16, ##@LR__0315
0141c     39 75 02 F6 | 	mov	local17, local16
01420     00 76 06 F6 | 	mov	local18, #0
01424     00 4A 06 F6 | 	mov	arg01, #0
01428     3A 4D 02 F6 | 	mov	arg02, local17
0142c     00 4E 06 F6 | 	mov	arg03, #0
01430     F0 26 B0 FD | 	call	#__system___basic_print_string
01434     12 67 02 F6 | 	mov	local10, result1
01438     00 68 06 F6 | 	mov	local11, #0
0143c     00 4A 06 F6 | 	mov	arg01, #0
01440     0A 4C 06 F6 | 	mov	arg02, #10
01444     00 4E 06 F6 | 	mov	arg03, #0
01448     8C 26 B0 FD | 	call	#__system___basic_print_char
0144c     01 24 06 F6 | 	mov	result1, #1
01450     01 6A 06 F6 | 	mov	local12, #1
01454     00 6C 06 F6 | 	mov	local13, #0
01458     00 4A 06 F6 | 	mov	arg01, #0
0145c     1C 39 B0 FD | 	call	#__system___getiolock_0102
01460     12 01 68 FC | 	wrlong	#0, result1
01464     00 24 06 F6 | 	mov	result1, #0
01468     00 6E 06 F6 | 	mov	local14, #0
0146c                 | LR__0018
0146c                 | '     if cmd=$86 then print "Mouse double clicked"
0146c     02 00 00 FF 
01470     94 0E 06 F1 | 	add	objptr, ##1172
01474     07 7B 02 FB | 	rdlong	local20, objptr
01478     02 00 00 FF 
0147c     94 0E 86 F1 | 	sub	objptr, ##1172
01480     86 7A 0E F2 | 	cmp	local20, #134 wz
01484     6C 00 90 5D |  if_ne	jmp	#LR__0019
01488     00 4A 06 F6 | 	mov	arg01, #0
0148c     EC 38 B0 FD | 	call	#__system___getiolock_0102
01490     12 4B 02 F6 | 	mov	arg01, result1
01494     14 24 B0 FD | 	call	#__system___lockmem
01498     00 24 06 F6 | 	mov	result1, #0
0149c     00 70 06 F6 | 	mov	local15, #0
014a0     2D 00 00 FF 
014a4     1B 72 06 F6 | 	mov	local16, ##@LR__0316
014a8     39 75 02 F6 | 	mov	local17, local16
014ac     00 76 06 F6 | 	mov	local18, #0
014b0     00 4A 06 F6 | 	mov	arg01, #0
014b4     3A 4D 02 F6 | 	mov	arg02, local17
014b8     00 4E 06 F6 | 	mov	arg03, #0
014bc     64 26 B0 FD | 	call	#__system___basic_print_string
014c0     12 67 02 F6 | 	mov	local10, result1
014c4     00 68 06 F6 | 	mov	local11, #0
014c8     00 4A 06 F6 | 	mov	arg01, #0
014cc     0A 4C 06 F6 | 	mov	arg02, #10
014d0     00 4E 06 F6 | 	mov	arg03, #0
014d4     00 26 B0 FD | 	call	#__system___basic_print_char
014d8     01 24 06 F6 | 	mov	result1, #1
014dc     01 6A 06 F6 | 	mov	local12, #1
014e0     00 6C 06 F6 | 	mov	local13, #0
014e4     00 4A 06 F6 | 	mov	arg01, #0
014e8     90 38 B0 FD | 	call	#__system___getiolock_0102
014ec     12 01 68 FC | 	wrlong	#0, result1
014f0     00 6E 06 F6 | 	mov	local14, #0
014f4                 | LR__0019
014f4                 | LR__0020
014f4                 | ' 
014f4                 | '   if lpeek($38)<>0 then 
014f4     38 4A 06 F6 | 	mov	arg01, #56
014f8                 | ' asm
014f8     38 24 06 FB | 	rdlong	result1, #56
014fc                 | ' return r
014fc     12 D9 0A F6 | 	mov	local67, result1 wz
01500     30 F6 9F AD |  if_e	jmp	#LR__0001
01504                 | ' asm
01504     3B 7A C6 FA | 	rdbyte	local20, #59
01508                 | ' return r
01508     07 7A 46 F7 | 	zerox	local20, #7
0150c     04 7A 46 F0 | 	shr	local20, #4
01510     02 00 00 FF 
01514     94 0E 06 F1 | 	add	objptr, ##1172
01518     07 7B 62 FC | 	wrlong	local20, objptr
0151c                 | ' asm
0151c     3B 78 C6 FA | 	rdbyte	local19, #59
01520                 | ' return r
01520     3C 7B 02 F6 | 	mov	local20, local19
01524     07 7A 46 F7 | 	zerox	local20, #7
01528     0F 7A 06 F5 | 	and	local20, #15
0152c     18 0E 06 F1 | 	add	objptr, #24
01530     07 7B 62 FC | 	wrlong	local20, objptr
01534                 | ' asm
01534     39 7C C6 FA | 	rdbyte	local21, #57
01538                 | ' return r
01538     38 4A 06 F6 | 	mov	arg01, #56
0153c                 | ' asm
0153c     38 24 C6 FA | 	rdbyte	result1, #56
01540                 | ' return r
01540     12 7F 02 F6 | 	mov	local22, result1
01544     00 4C 06 F6 | 	mov	arg02, #0
01548                 | ' asm
01548     38 00 6C FC | 	wrlong	#0, #56
0154c                 | '     b11=peek($39)
0154c                 | '     b12=peek($38)
0154c                 | '     lpoke $38,0
0154c                 | '     if cmd=8 then print "Midi note off, channel ";channel;", note ";b11
0154c     18 0E 86 F1 | 	sub	objptr, #24
01550     07 7B 02 FB | 	rdlong	local20, objptr
01554     02 00 00 FF 
01558     94 0E 86 F1 | 	sub	objptr, ##1172
0155c     08 7A 0E F2 | 	cmp	local20, #8 wz
01560     08 01 90 5D |  if_ne	jmp	#LR__0021
01564     3E DB 02 F6 | 	mov	local68, local21
01568     07 DA 46 F7 | 	zerox	local68, #7
0156c     00 4A 06 F6 | 	mov	arg01, #0
01570     08 38 B0 FD | 	call	#__system___getiolock_0102
01574     12 4B 02 F6 | 	mov	arg01, result1
01578     30 23 B0 FD | 	call	#__system___lockmem
0157c     00 24 06 F6 | 	mov	result1, #0
01580     00 78 06 F6 | 	mov	local19, #0
01584     00 70 06 F6 | 	mov	local15, #0
01588     2D 00 00 FF 
0158c     30 72 06 F6 | 	mov	local16, ##@LR__0317
01590     39 75 02 F6 | 	mov	local17, local16
01594     00 76 06 F6 | 	mov	local18, #0
01598     00 4A 06 F6 | 	mov	arg01, #0
0159c     3A 4D 02 F6 | 	mov	arg02, local17
015a0     00 4E 06 F6 | 	mov	arg03, #0
015a4     7C 25 B0 FD | 	call	#__system___basic_print_string
015a8     12 67 02 F6 | 	mov	local10, result1
015ac     00 68 06 F6 | 	mov	local11, #0
015b0     02 00 00 FF 
015b4     AC 0E 06 F1 | 	add	objptr, ##1196
015b8     07 6D 02 FB | 	rdlong	local13, objptr
015bc     02 00 00 FF 
015c0     AC 0E 86 F1 | 	sub	objptr, ##1196
015c4     36 6B 02 F6 | 	mov	local12, local13
015c8     00 6E 06 F6 | 	mov	local14, #0
015cc     0A 82 06 F6 | 	mov	local24, #10
015d0     00 4A 06 F6 | 	mov	arg01, #0
015d4     35 4D 02 F6 | 	mov	arg02, local12
015d8     00 4E 06 F6 | 	mov	arg03, #0
015dc     0A 50 06 F6 | 	mov	arg04, #10
015e0     88 25 B0 FD | 	call	#__system___basic_print_integer
015e4     12 85 02 F6 | 	mov	local25, result1
015e8     00 86 06 F6 | 	mov	local26, #0
015ec     2D 00 00 FF 
015f0     48 88 06 F6 | 	mov	local27, ##@LR__0318
015f4     44 8B 02 F6 | 	mov	local28, local27
015f8     00 90 06 F6 | 	mov	local31, #0
015fc     00 4A 06 F6 | 	mov	arg01, #0
01600     45 4D 02 F6 | 	mov	arg02, local28
01604     00 4E 06 F6 | 	mov	arg03, #0
01608     18 25 B0 FD | 	call	#__system___basic_print_string
0160c     12 93 02 F6 | 	mov	local32, result1
01610     00 94 06 F6 | 	mov	local33, #0
01614     6D 97 02 F6 | 	mov	local34, local68
01618     00 98 06 F6 | 	mov	local35, #0
0161c     0A 9A 06 F6 | 	mov	local36, #10
01620     00 4A 06 F6 | 	mov	arg01, #0
01624     4B 4D 02 F6 | 	mov	arg02, local34
01628     00 4E 06 F6 | 	mov	arg03, #0
0162c     0A 50 06 F6 | 	mov	arg04, #10
01630     7C 25 B0 FD | 	call	#__system___basic_print_unsigned
01634     12 9D 02 F6 | 	mov	local37, result1
01638     00 9E 06 F6 | 	mov	local38, #0
0163c     00 4A 06 F6 | 	mov	arg01, #0
01640     0A 4C 06 F6 | 	mov	arg02, #10
01644     00 4E 06 F6 | 	mov	arg03, #0
01648     8C 24 B0 FD | 	call	#__system___basic_print_char
0164c     01 24 06 F6 | 	mov	result1, #1
01650     01 A0 06 F6 | 	mov	local39, #1
01654     00 A2 06 F6 | 	mov	local40, #0
01658     00 4A 06 F6 | 	mov	arg01, #0
0165c     1C 37 B0 FD | 	call	#__system___getiolock_0102
01660     12 01 68 FC | 	wrlong	#0, result1
01664     00 24 06 F6 | 	mov	result1, #0
01668     00 C2 06 F6 | 	mov	local56, #0
0166c                 | LR__0021
0166c                 | '     if cmd=9 then print "Midi note on,  channel ";channel;", note ";b11;", velocity ";b12
0166c     02 00 00 FF 
01670     94 0E 06 F1 | 	add	objptr, ##1172
01674     07 7B 02 FB | 	rdlong	local20, objptr
01678     02 00 00 FF 
0167c     94 0E 86 F1 | 	sub	objptr, ##1172
01680     09 7A 0E F2 | 	cmp	local20, #9 wz
01684     60 01 90 5D |  if_ne	jmp	#LR__0022
01688     3E DD 02 F6 | 	mov	local69, local21
0168c     07 DC 46 F7 | 	zerox	local69, #7
01690     3F DF 02 F6 | 	mov	local70, local22
01694     07 DE 46 F7 | 	zerox	local70, #7
01698     00 4A 06 F6 | 	mov	arg01, #0
0169c     DC 36 B0 FD | 	call	#__system___getiolock_0102
016a0     12 4B 02 F6 | 	mov	arg01, result1
016a4     04 22 B0 FD | 	call	#__system___lockmem
016a8     00 24 06 F6 | 	mov	result1, #0
016ac     00 78 06 F6 | 	mov	local19, #0
016b0     00 70 06 F6 | 	mov	local15, #0
016b4     2D 00 00 FF 
016b8     50 72 06 F6 | 	mov	local16, ##@LR__0319
016bc     39 75 02 F6 | 	mov	local17, local16
016c0     00 76 06 F6 | 	mov	local18, #0
016c4     00 4A 06 F6 | 	mov	arg01, #0
016c8     3A 4D 02 F6 | 	mov	arg02, local17
016cc     00 4E 06 F6 | 	mov	arg03, #0
016d0     50 24 B0 FD | 	call	#__system___basic_print_string
016d4     12 67 02 F6 | 	mov	local10, result1
016d8     00 68 06 F6 | 	mov	local11, #0
016dc     02 00 00 FF 
016e0     AC 0E 06 F1 | 	add	objptr, ##1196
016e4     07 6D 02 FB | 	rdlong	local13, objptr
016e8     02 00 00 FF 
016ec     AC 0E 86 F1 | 	sub	objptr, ##1196
016f0     36 6B 02 F6 | 	mov	local12, local13
016f4     00 6E 06 F6 | 	mov	local14, #0
016f8     0A 82 06 F6 | 	mov	local24, #10
016fc     00 4A 06 F6 | 	mov	arg01, #0
01700     35 4D 02 F6 | 	mov	arg02, local12
01704     00 4E 06 F6 | 	mov	arg03, #0
01708     0A 50 06 F6 | 	mov	arg04, #10
0170c     5C 24 B0 FD | 	call	#__system___basic_print_integer
01710     12 85 02 F6 | 	mov	local25, result1
01714     00 86 06 F6 | 	mov	local26, #0
01718     2D 00 00 FF 
0171c     68 88 06 F6 | 	mov	local27, ##@LR__0320
01720     44 8B 02 F6 | 	mov	local28, local27
01724     00 90 06 F6 | 	mov	local31, #0
01728     00 4A 06 F6 | 	mov	arg01, #0
0172c     45 4D 02 F6 | 	mov	arg02, local28
01730     00 4E 06 F6 | 	mov	arg03, #0
01734     EC 23 B0 FD | 	call	#__system___basic_print_string
01738     12 93 02 F6 | 	mov	local32, result1
0173c     00 94 06 F6 | 	mov	local33, #0
01740     6E 97 02 F6 | 	mov	local34, local69
01744     00 98 06 F6 | 	mov	local35, #0
01748     0A 9A 06 F6 | 	mov	local36, #10
0174c     00 4A 06 F6 | 	mov	arg01, #0
01750     4B 4D 02 F6 | 	mov	arg02, local34
01754     00 4E 06 F6 | 	mov	arg03, #0
01758     0A 50 06 F6 | 	mov	arg04, #10
0175c     50 24 B0 FD | 	call	#__system___basic_print_unsigned
01760     12 9D 02 F6 | 	mov	local37, result1
01764     00 9E 06 F6 | 	mov	local38, #0
01768     2D 00 00 FF 
0176c     70 A0 06 F6 | 	mov	local39, ##@LR__0321
01770     50 A3 02 F6 | 	mov	local40, local39
01774     00 C2 06 F6 | 	mov	local56, #0
01778     00 4A 06 F6 | 	mov	arg01, #0
0177c     51 4D 02 F6 | 	mov	arg02, local40
01780     00 4E 06 F6 | 	mov	arg03, #0
01784     9C 23 B0 FD | 	call	#__system___basic_print_string
01788     12 C5 02 F6 | 	mov	local57, result1
0178c     00 E0 06 F6 | 	mov	local71, #0
01790     6F E3 02 F6 | 	mov	local72, local70
01794     00 E4 06 F6 | 	mov	local73, #0
01798     0A E6 06 F6 | 	mov	local74, #10
0179c     00 4A 06 F6 | 	mov	arg01, #0
017a0     71 4D 02 F6 | 	mov	arg02, local72
017a4     00 4E 06 F6 | 	mov	arg03, #0
017a8     0A 50 06 F6 | 	mov	arg04, #10
017ac     00 24 B0 FD | 	call	#__system___basic_print_unsigned
017b0     12 E9 02 F6 | 	mov	local75, result1
017b4     00 EA 06 F6 | 	mov	local76, #0
017b8     00 4A 06 F6 | 	mov	arg01, #0
017bc     0A 4C 06 F6 | 	mov	arg02, #10
017c0     00 4E 06 F6 | 	mov	arg03, #0
017c4     10 23 B0 FD | 	call	#__system___basic_print_char
017c8     01 24 06 F6 | 	mov	result1, #1
017cc     01 EC 06 F6 | 	mov	local77, #1
017d0     00 EE 06 F6 | 	mov	local78, #0
017d4     00 4A 06 F6 | 	mov	arg01, #0
017d8     A0 35 B0 FD | 	call	#__system___getiolock_0102
017dc     12 01 68 FC | 	wrlong	#0, result1
017e0     00 24 06 F6 | 	mov	result1, #0
017e4     00 F0 06 F6 | 	mov	local79, #0
017e8                 | LR__0022
017e8                 | '     if cmd=10 then print "Midi poly aftertouch, channel ";channel;" note ";b11;", velocity ";b12
017e8     02 00 00 FF 
017ec     94 0E 06 F1 | 	add	objptr, ##1172
017f0     07 7B 02 FB | 	rdlong	local20, objptr
017f4     02 00 00 FF 
017f8     94 0E 86 F1 | 	sub	objptr, ##1172
017fc     0A 7A 0E F2 | 	cmp	local20, #10 wz
01800     60 01 90 5D |  if_ne	jmp	#LR__0023
01804     3E F3 02 F6 | 	mov	local80, local21
01808     07 F2 46 F7 | 	zerox	local80, #7
0180c     3F F5 02 F6 | 	mov	local81, local22
01810     07 F4 46 F7 | 	zerox	local81, #7
01814     00 4A 06 F6 | 	mov	arg01, #0
01818     60 35 B0 FD | 	call	#__system___getiolock_0102
0181c     12 4B 02 F6 | 	mov	arg01, result1
01820     88 20 B0 FD | 	call	#__system___lockmem
01824     00 24 06 F6 | 	mov	result1, #0
01828     00 78 06 F6 | 	mov	local19, #0
0182c     00 70 06 F6 | 	mov	local15, #0
01830     2D 00 00 FF 
01834     7C 72 06 F6 | 	mov	local16, ##@LR__0322
01838     39 75 02 F6 | 	mov	local17, local16
0183c     00 76 06 F6 | 	mov	local18, #0
01840     00 4A 06 F6 | 	mov	arg01, #0
01844     3A 4D 02 F6 | 	mov	arg02, local17
01848     00 4E 06 F6 | 	mov	arg03, #0
0184c     D4 22 B0 FD | 	call	#__system___basic_print_string
01850     12 67 02 F6 | 	mov	local10, result1
01854     00 68 06 F6 | 	mov	local11, #0
01858     02 00 00 FF 
0185c     AC 0E 06 F1 | 	add	objptr, ##1196
01860     07 6D 02 FB | 	rdlong	local13, objptr
01864     02 00 00 FF 
01868     AC 0E 86 F1 | 	sub	objptr, ##1196
0186c     36 6B 02 F6 | 	mov	local12, local13
01870     00 6E 06 F6 | 	mov	local14, #0
01874     0A 82 06 F6 | 	mov	local24, #10
01878     00 4A 06 F6 | 	mov	arg01, #0
0187c     35 4D 02 F6 | 	mov	arg02, local12
01880     00 4E 06 F6 | 	mov	arg03, #0
01884     0A 50 06 F6 | 	mov	arg04, #10
01888     E0 22 B0 FD | 	call	#__system___basic_print_integer
0188c     12 85 02 F6 | 	mov	local25, result1
01890     00 86 06 F6 | 	mov	local26, #0
01894     2D 00 00 FF 
01898     9B 88 06 F6 | 	mov	local27, ##@LR__0323
0189c     44 8B 02 F6 | 	mov	local28, local27
018a0     00 90 06 F6 | 	mov	local31, #0
018a4     00 4A 06 F6 | 	mov	arg01, #0
018a8     45 4D 02 F6 | 	mov	arg02, local28
018ac     00 4E 06 F6 | 	mov	arg03, #0
018b0     70 22 B0 FD | 	call	#__system___basic_print_string
018b4     12 93 02 F6 | 	mov	local32, result1
018b8     00 94 06 F6 | 	mov	local33, #0
018bc     79 97 02 F6 | 	mov	local34, local80
018c0     00 98 06 F6 | 	mov	local35, #0
018c4     0A 9A 06 F6 | 	mov	local36, #10
018c8     00 4A 06 F6 | 	mov	arg01, #0
018cc     4B 4D 02 F6 | 	mov	arg02, local34
018d0     00 4E 06 F6 | 	mov	arg03, #0
018d4     0A 50 06 F6 | 	mov	arg04, #10
018d8     D4 22 B0 FD | 	call	#__system___basic_print_unsigned
018dc     12 9D 02 F6 | 	mov	local37, result1
018e0     00 9E 06 F6 | 	mov	local38, #0
018e4     2D 00 00 FF 
018e8     A2 A0 06 F6 | 	mov	local39, ##@LR__0324
018ec     50 A3 02 F6 | 	mov	local40, local39
018f0     00 C2 06 F6 | 	mov	local56, #0
018f4     00 4A 06 F6 | 	mov	arg01, #0
018f8     51 4D 02 F6 | 	mov	arg02, local40
018fc     00 4E 06 F6 | 	mov	arg03, #0
01900     20 22 B0 FD | 	call	#__system___basic_print_string
01904     12 C5 02 F6 | 	mov	local57, result1
01908     00 E0 06 F6 | 	mov	local71, #0
0190c     7A E3 02 F6 | 	mov	local72, local81
01910     00 E4 06 F6 | 	mov	local73, #0
01914     0A E6 06 F6 | 	mov	local74, #10
01918     00 4A 06 F6 | 	mov	arg01, #0
0191c     71 4D 02 F6 | 	mov	arg02, local72
01920     00 4E 06 F6 | 	mov	arg03, #0
01924     0A 50 06 F6 | 	mov	arg04, #10
01928     84 22 B0 FD | 	call	#__system___basic_print_unsigned
0192c     12 E9 02 F6 | 	mov	local75, result1
01930     00 EA 06 F6 | 	mov	local76, #0
01934     00 4A 06 F6 | 	mov	arg01, #0
01938     0A 4C 06 F6 | 	mov	arg02, #10
0193c     00 4E 06 F6 | 	mov	arg03, #0
01940     94 21 B0 FD | 	call	#__system___basic_print_char
01944     01 24 06 F6 | 	mov	result1, #1
01948     01 EC 06 F6 | 	mov	local77, #1
0194c     00 EE 06 F6 | 	mov	local78, #0
01950     00 4A 06 F6 | 	mov	arg01, #0
01954     24 34 B0 FD | 	call	#__system___getiolock_0102
01958     12 01 68 FC | 	wrlong	#0, result1
0195c     00 24 06 F6 | 	mov	result1, #0
01960     00 F0 06 F6 | 	mov	local79, #0
01964                 | LR__0023
01964                 | '     if cmd=11 then print "Midi control change, channel ";channel;" controller ";b11;", value ";b12
01964     02 00 00 FF 
01968     94 0E 06 F1 | 	add	objptr, ##1172
0196c     07 7B 02 FB | 	rdlong	local20, objptr
01970     02 00 00 FF 
01974     94 0E 86 F1 | 	sub	objptr, ##1172
01978     0B 7A 0E F2 | 	cmp	local20, #11 wz
0197c     60 01 90 5D |  if_ne	jmp	#LR__0024
01980     3E F7 02 F6 | 	mov	local82, local21
01984     07 F6 46 F7 | 	zerox	local82, #7
01988     3F F9 02 F6 | 	mov	local83, local22
0198c     07 F8 46 F7 | 	zerox	local83, #7
01990     00 4A 06 F6 | 	mov	arg01, #0
01994     E4 33 B0 FD | 	call	#__system___getiolock_0102
01998     12 4B 02 F6 | 	mov	arg01, result1
0199c     0C 1F B0 FD | 	call	#__system___lockmem
019a0     00 24 06 F6 | 	mov	result1, #0
019a4     00 78 06 F6 | 	mov	local19, #0
019a8     00 70 06 F6 | 	mov	local15, #0
019ac     2D 00 00 FF 
019b0     AE 72 06 F6 | 	mov	local16, ##@LR__0325
019b4     39 75 02 F6 | 	mov	local17, local16
019b8     00 76 06 F6 | 	mov	local18, #0
019bc     00 4A 06 F6 | 	mov	arg01, #0
019c0     3A 4D 02 F6 | 	mov	arg02, local17
019c4     00 4E 06 F6 | 	mov	arg03, #0
019c8     58 21 B0 FD | 	call	#__system___basic_print_string
019cc     12 67 02 F6 | 	mov	local10, result1
019d0     00 68 06 F6 | 	mov	local11, #0
019d4     02 00 00 FF 
019d8     AC 0E 06 F1 | 	add	objptr, ##1196
019dc     07 6D 02 FB | 	rdlong	local13, objptr
019e0     02 00 00 FF 
019e4     AC 0E 86 F1 | 	sub	objptr, ##1196
019e8     36 6B 02 F6 | 	mov	local12, local13
019ec     00 6E 06 F6 | 	mov	local14, #0
019f0     0A 82 06 F6 | 	mov	local24, #10
019f4     00 4A 06 F6 | 	mov	arg01, #0
019f8     35 4D 02 F6 | 	mov	arg02, local12
019fc     00 4E 06 F6 | 	mov	arg03, #0
01a00     0A 50 06 F6 | 	mov	arg04, #10
01a04     64 21 B0 FD | 	call	#__system___basic_print_integer
01a08     12 85 02 F6 | 	mov	local25, result1
01a0c     00 86 06 F6 | 	mov	local26, #0
01a10     2D 00 00 FF 
01a14     CC 88 06 F6 | 	mov	local27, ##@LR__0326
01a18     44 8B 02 F6 | 	mov	local28, local27
01a1c     00 90 06 F6 | 	mov	local31, #0
01a20     00 4A 06 F6 | 	mov	arg01, #0
01a24     45 4D 02 F6 | 	mov	arg02, local28
01a28     00 4E 06 F6 | 	mov	arg03, #0
01a2c     F4 20 B0 FD | 	call	#__system___basic_print_string
01a30     12 93 02 F6 | 	mov	local32, result1
01a34     00 94 06 F6 | 	mov	local33, #0
01a38     7B 97 02 F6 | 	mov	local34, local82
01a3c     00 98 06 F6 | 	mov	local35, #0
01a40     0A 9A 06 F6 | 	mov	local36, #10
01a44     00 4A 06 F6 | 	mov	arg01, #0
01a48     4B 4D 02 F6 | 	mov	arg02, local34
01a4c     00 4E 06 F6 | 	mov	arg03, #0
01a50     0A 50 06 F6 | 	mov	arg04, #10
01a54     58 21 B0 FD | 	call	#__system___basic_print_unsigned
01a58     12 9D 02 F6 | 	mov	local37, result1
01a5c     00 9E 06 F6 | 	mov	local38, #0
01a60     2D 00 00 FF 
01a64     D9 A0 06 F6 | 	mov	local39, ##@LR__0327
01a68     50 A3 02 F6 | 	mov	local40, local39
01a6c     00 C2 06 F6 | 	mov	local56, #0
01a70     00 4A 06 F6 | 	mov	arg01, #0
01a74     51 4D 02 F6 | 	mov	arg02, local40
01a78     00 4E 06 F6 | 	mov	arg03, #0
01a7c     A4 20 B0 FD | 	call	#__system___basic_print_string
01a80     12 C5 02 F6 | 	mov	local57, result1
01a84     00 E0 06 F6 | 	mov	local71, #0
01a88     7C E3 02 F6 | 	mov	local72, local83
01a8c     00 E4 06 F6 | 	mov	local73, #0
01a90     0A E6 06 F6 | 	mov	local74, #10
01a94     00 4A 06 F6 | 	mov	arg01, #0
01a98     71 4D 02 F6 | 	mov	arg02, local72
01a9c     00 4E 06 F6 | 	mov	arg03, #0
01aa0     0A 50 06 F6 | 	mov	arg04, #10
01aa4     08 21 B0 FD | 	call	#__system___basic_print_unsigned
01aa8     12 E9 02 F6 | 	mov	local75, result1
01aac     00 EA 06 F6 | 	mov	local76, #0
01ab0     00 4A 06 F6 | 	mov	arg01, #0
01ab4     0A 4C 06 F6 | 	mov	arg02, #10
01ab8     00 4E 06 F6 | 	mov	arg03, #0
01abc     18 20 B0 FD | 	call	#__system___basic_print_char
01ac0     01 24 06 F6 | 	mov	result1, #1
01ac4     01 EC 06 F6 | 	mov	local77, #1
01ac8     00 EE 06 F6 | 	mov	local78, #0
01acc     00 4A 06 F6 | 	mov	arg01, #0
01ad0     A8 32 B0 FD | 	call	#__system___getiolock_0102
01ad4     12 01 68 FC | 	wrlong	#0, result1
01ad8     00 24 06 F6 | 	mov	result1, #0
01adc     00 F0 06 F6 | 	mov	local79, #0
01ae0                 | LR__0024
01ae0                 | '     if cmd=12 then print "Midi program change, channel ";channel;" program ";b12
01ae0     02 00 00 FF 
01ae4     94 0E 06 F1 | 	add	objptr, ##1172
01ae8     07 7B 02 FB | 	rdlong	local20, objptr
01aec     02 00 00 FF 
01af0     94 0E 86 F1 | 	sub	objptr, ##1172
01af4     0C 7A 0E F2 | 	cmp	local20, #12 wz
01af8     04 01 90 5D |  if_ne	jmp	#LR__0025
01afc     3F FB 02 F6 | 	mov	local84, local22
01b00     07 FA 46 F7 | 	zerox	local84, #7
01b04     00 4A 06 F6 | 	mov	arg01, #0
01b08     70 32 B0 FD | 	call	#__system___getiolock_0102
01b0c     12 4B 02 F6 | 	mov	arg01, result1
01b10     98 1D B0 FD | 	call	#__system___lockmem
01b14     00 24 06 F6 | 	mov	result1, #0
01b18     00 70 06 F6 | 	mov	local15, #0
01b1c     2D 00 00 FF 
01b20     E2 72 06 F6 | 	mov	local16, ##@LR__0328
01b24     39 75 02 F6 | 	mov	local17, local16
01b28     00 76 06 F6 | 	mov	local18, #0
01b2c     00 4A 06 F6 | 	mov	arg01, #0
01b30     3A 4D 02 F6 | 	mov	arg02, local17
01b34     00 4E 06 F6 | 	mov	arg03, #0
01b38     E8 1F B0 FD | 	call	#__system___basic_print_string
01b3c     12 67 02 F6 | 	mov	local10, result1
01b40     00 68 06 F6 | 	mov	local11, #0
01b44     02 00 00 FF 
01b48     AC 0E 06 F1 | 	add	objptr, ##1196
01b4c     07 6D 02 FB | 	rdlong	local13, objptr
01b50     02 00 00 FF 
01b54     AC 0E 86 F1 | 	sub	objptr, ##1196
01b58     36 6B 02 F6 | 	mov	local12, local13
01b5c     00 6E 06 F6 | 	mov	local14, #0
01b60     0A 82 06 F6 | 	mov	local24, #10
01b64     00 4A 06 F6 | 	mov	arg01, #0
01b68     35 4D 02 F6 | 	mov	arg02, local12
01b6c     00 4E 06 F6 | 	mov	arg03, #0
01b70     0A 50 06 F6 | 	mov	arg04, #10
01b74     F4 1F B0 FD | 	call	#__system___basic_print_integer
01b78     12 85 02 F6 | 	mov	local25, result1
01b7c     00 86 06 F6 | 	mov	local26, #0
01b80     2D 00 00 FF 
01b84     00 89 06 F6 | 	mov	local27, ##@LR__0329
01b88     44 8B 02 F6 | 	mov	local28, local27
01b8c     00 90 06 F6 | 	mov	local31, #0
01b90     00 4A 06 F6 | 	mov	arg01, #0
01b94     45 4D 02 F6 | 	mov	arg02, local28
01b98     00 4E 06 F6 | 	mov	arg03, #0
01b9c     84 1F B0 FD | 	call	#__system___basic_print_string
01ba0     12 93 02 F6 | 	mov	local32, result1
01ba4     00 94 06 F6 | 	mov	local33, #0
01ba8     7D 97 02 F6 | 	mov	local34, local84
01bac     00 98 06 F6 | 	mov	local35, #0
01bb0     0A 9A 06 F6 | 	mov	local36, #10
01bb4     00 4A 06 F6 | 	mov	arg01, #0
01bb8     4B 4D 02 F6 | 	mov	arg02, local34
01bbc     00 4E 06 F6 | 	mov	arg03, #0
01bc0     0A 50 06 F6 | 	mov	arg04, #10
01bc4     E8 1F B0 FD | 	call	#__system___basic_print_unsigned
01bc8     12 9D 02 F6 | 	mov	local37, result1
01bcc     00 9E 06 F6 | 	mov	local38, #0
01bd0     00 4A 06 F6 | 	mov	arg01, #0
01bd4     0A 4C 06 F6 | 	mov	arg02, #10
01bd8     00 4E 06 F6 | 	mov	arg03, #0
01bdc     F8 1E B0 FD | 	call	#__system___basic_print_char
01be0     01 24 06 F6 | 	mov	result1, #1
01be4     01 A0 06 F6 | 	mov	local39, #1
01be8     00 A2 06 F6 | 	mov	local40, #0
01bec     00 4A 06 F6 | 	mov	arg01, #0
01bf0     88 31 B0 FD | 	call	#__system___getiolock_0102
01bf4     12 01 68 FC | 	wrlong	#0, result1
01bf8     00 24 06 F6 | 	mov	result1, #0
01bfc     00 C2 06 F6 | 	mov	local56, #0
01c00                 | LR__0025
01c00                 | '     if cmd=13 then print "Midi mono aftertouch, channel ";channel;" value ";b12
01c00     02 00 00 FF 
01c04     94 0E 06 F1 | 	add	objptr, ##1172
01c08     07 7B 02 FB | 	rdlong	local20, objptr
01c0c     02 00 00 FF 
01c10     94 0E 86 F1 | 	sub	objptr, ##1172
01c14     0D 7A 0E F2 | 	cmp	local20, #13 wz
01c18     04 01 90 5D |  if_ne	jmp	#LR__0026
01c1c     3F FD 02 F6 | 	mov	local85, local22
01c20     07 FC 46 F7 | 	zerox	local85, #7
01c24     00 4A 06 F6 | 	mov	arg01, #0
01c28     50 31 B0 FD | 	call	#__system___getiolock_0102
01c2c     12 4B 02 F6 | 	mov	arg01, result1
01c30     78 1C B0 FD | 	call	#__system___lockmem
01c34     00 24 06 F6 | 	mov	result1, #0
01c38     00 70 06 F6 | 	mov	local15, #0
01c3c     2D 00 00 FF 
01c40     0A 73 06 F6 | 	mov	local16, ##@LR__0330
01c44     39 75 02 F6 | 	mov	local17, local16
01c48     00 76 06 F6 | 	mov	local18, #0
01c4c     00 4A 06 F6 | 	mov	arg01, #0
01c50     3A 4D 02 F6 | 	mov	arg02, local17
01c54     00 4E 06 F6 | 	mov	arg03, #0
01c58     C8 1E B0 FD | 	call	#__system___basic_print_string
01c5c     12 67 02 F6 | 	mov	local10, result1
01c60     00 68 06 F6 | 	mov	local11, #0
01c64     02 00 00 FF 
01c68     AC 0E 06 F1 | 	add	objptr, ##1196
01c6c     07 6D 02 FB | 	rdlong	local13, objptr
01c70     02 00 00 FF 
01c74     AC 0E 86 F1 | 	sub	objptr, ##1196
01c78     36 6B 02 F6 | 	mov	local12, local13
01c7c     00 6E 06 F6 | 	mov	local14, #0
01c80     0A 82 06 F6 | 	mov	local24, #10
01c84     00 4A 06 F6 | 	mov	arg01, #0
01c88     35 4D 02 F6 | 	mov	arg02, local12
01c8c     00 4E 06 F6 | 	mov	arg03, #0
01c90     0A 50 06 F6 | 	mov	arg04, #10
01c94     D4 1E B0 FD | 	call	#__system___basic_print_integer
01c98     12 85 02 F6 | 	mov	local25, result1
01c9c     00 86 06 F6 | 	mov	local26, #0
01ca0     2D 00 00 FF 
01ca4     29 89 06 F6 | 	mov	local27, ##@LR__0331
01ca8     44 8B 02 F6 | 	mov	local28, local27
01cac     00 90 06 F6 | 	mov	local31, #0
01cb0     00 4A 06 F6 | 	mov	arg01, #0
01cb4     45 4D 02 F6 | 	mov	arg02, local28
01cb8     00 4E 06 F6 | 	mov	arg03, #0
01cbc     64 1E B0 FD | 	call	#__system___basic_print_string
01cc0     12 93 02 F6 | 	mov	local32, result1
01cc4     00 94 06 F6 | 	mov	local33, #0
01cc8     7E 97 02 F6 | 	mov	local34, local85
01ccc     00 98 06 F6 | 	mov	local35, #0
01cd0     0A 9A 06 F6 | 	mov	local36, #10
01cd4     00 4A 06 F6 | 	mov	arg01, #0
01cd8     4B 4D 02 F6 | 	mov	arg02, local34
01cdc     00 4E 06 F6 | 	mov	arg03, #0
01ce0     0A 50 06 F6 | 	mov	arg04, #10
01ce4     C8 1E B0 FD | 	call	#__system___basic_print_unsigned
01ce8     12 9D 02 F6 | 	mov	local37, result1
01cec     00 9E 06 F6 | 	mov	local38, #0
01cf0     00 4A 06 F6 | 	mov	arg01, #0
01cf4     0A 4C 06 F6 | 	mov	arg02, #10
01cf8     00 4E 06 F6 | 	mov	arg03, #0
01cfc     D8 1D B0 FD | 	call	#__system___basic_print_char
01d00     01 24 06 F6 | 	mov	result1, #1
01d04     01 A0 06 F6 | 	mov	local39, #1
01d08     00 A2 06 F6 | 	mov	local40, #0
01d0c     00 4A 06 F6 | 	mov	arg01, #0
01d10     68 30 B0 FD | 	call	#__system___getiolock_0102
01d14     12 01 68 FC | 	wrlong	#0, result1
01d18     00 24 06 F6 | 	mov	result1, #0
01d1c     00 C2 06 F6 | 	mov	local56, #0
01d20                 | LR__0026
01d20                 | '     if cmd=14 then print "Midi pitch bend, channel ";channel;" value ";b11+b12 shl 7
01d20     02 00 00 FF 
01d24     94 0E 06 F1 | 	add	objptr, ##1172
01d28     07 7B 02 FB | 	rdlong	local20, objptr
01d2c     02 00 00 FF 
01d30     94 0E 86 F1 | 	sub	objptr, ##1172
01d34     0E 7A 0E F2 | 	cmp	local20, #14 wz
01d38     1C 01 90 5D |  if_ne	jmp	#LR__0027
01d3c     3E FF 02 F6 | 	mov	local86, local21
01d40     07 FE 46 F7 | 	zerox	local86, #7
01d44     3F 01 03 F6 | 	mov	local87, local22
01d48     07 00 47 F7 | 	zerox	local87, #7
01d4c     80 03 03 F6 | 	mov	local88, local87
01d50     07 02 67 F0 | 	shl	local88, #7
01d54     7F 05 03 F6 | 	mov	local89, local86
01d58     81 05 03 F1 | 	add	local89, local88
01d5c     00 4A 06 F6 | 	mov	arg01, #0
01d60     18 30 B0 FD | 	call	#__system___getiolock_0102
01d64     12 4B 02 F6 | 	mov	arg01, result1
01d68     40 1B B0 FD | 	call	#__system___lockmem
01d6c     00 24 06 F6 | 	mov	result1, #0
01d70     00 70 06 F6 | 	mov	local15, #0
01d74     2D 00 00 FF 
01d78     31 73 06 F6 | 	mov	local16, ##@LR__0332
01d7c     39 75 02 F6 | 	mov	local17, local16
01d80     00 76 06 F6 | 	mov	local18, #0
01d84     00 4A 06 F6 | 	mov	arg01, #0
01d88     3A 4D 02 F6 | 	mov	arg02, local17
01d8c     00 4E 06 F6 | 	mov	arg03, #0
01d90     90 1D B0 FD | 	call	#__system___basic_print_string
01d94     12 67 02 F6 | 	mov	local10, result1
01d98     00 68 06 F6 | 	mov	local11, #0
01d9c     02 00 00 FF 
01da0     AC 0E 06 F1 | 	add	objptr, ##1196
01da4     07 6D 02 FB | 	rdlong	local13, objptr
01da8     02 00 00 FF 
01dac     AC 0E 86 F1 | 	sub	objptr, ##1196
01db0     36 6B 02 F6 | 	mov	local12, local13
01db4     00 6E 06 F6 | 	mov	local14, #0
01db8     0A 82 06 F6 | 	mov	local24, #10
01dbc     00 4A 06 F6 | 	mov	arg01, #0
01dc0     35 4D 02 F6 | 	mov	arg02, local12
01dc4     00 4E 06 F6 | 	mov	arg03, #0
01dc8     0A 50 06 F6 | 	mov	arg04, #10
01dcc     9C 1D B0 FD | 	call	#__system___basic_print_integer
01dd0     12 85 02 F6 | 	mov	local25, result1
01dd4     00 86 06 F6 | 	mov	local26, #0
01dd8     2D 00 00 FF 
01ddc     4B 89 06 F6 | 	mov	local27, ##@LR__0333
01de0     44 8B 02 F6 | 	mov	local28, local27
01de4     00 90 06 F6 | 	mov	local31, #0
01de8     00 4A 06 F6 | 	mov	arg01, #0
01dec     45 4D 02 F6 | 	mov	arg02, local28
01df0     00 4E 06 F6 | 	mov	arg03, #0
01df4     2C 1D B0 FD | 	call	#__system___basic_print_string
01df8     12 93 02 F6 | 	mov	local32, result1
01dfc     00 94 06 F6 | 	mov	local33, #0
01e00     82 97 02 F6 | 	mov	local34, local89
01e04     00 98 06 F6 | 	mov	local35, #0
01e08     0A 9A 06 F6 | 	mov	local36, #10
01e0c     00 4A 06 F6 | 	mov	arg01, #0
01e10     4B 4D 02 F6 | 	mov	arg02, local34
01e14     00 4E 06 F6 | 	mov	arg03, #0
01e18     0A 50 06 F6 | 	mov	arg04, #10
01e1c     4C 1D B0 FD | 	call	#__system___basic_print_integer
01e20     12 9D 02 F6 | 	mov	local37, result1
01e24     00 9E 06 F6 | 	mov	local38, #0
01e28     00 4A 06 F6 | 	mov	arg01, #0
01e2c     0A 4C 06 F6 | 	mov	arg02, #10
01e30     00 4E 06 F6 | 	mov	arg03, #0
01e34     A0 1C B0 FD | 	call	#__system___basic_print_char
01e38     01 24 06 F6 | 	mov	result1, #1
01e3c     01 A0 06 F6 | 	mov	local39, #1
01e40     00 A2 06 F6 | 	mov	local40, #0
01e44     00 4A 06 F6 | 	mov	arg01, #0
01e48     30 2F B0 FD | 	call	#__system___getiolock_0102
01e4c     12 01 68 FC | 	wrlong	#0, result1
01e50     00 24 06 F6 | 	mov	result1, #0
01e54     00 C2 06 F6 | 	mov	local56, #0
01e58                 | LR__0027
01e58                 | '     if cmd=15 then print "Novation control key "; b12 ' TODO Sysex has to be properly processed 
01e58     02 00 00 FF 
01e5c     94 0E 06 F1 | 	add	objptr, ##1172
01e60     07 D9 02 FB | 	rdlong	local67, objptr
01e64     02 00 00 FF 
01e68     94 0E 86 F1 | 	sub	objptr, ##1172
01e6c     0F D8 0E F2 | 	cmp	local67, #15 wz
01e70     C0 EC 9F 5D |  if_ne	jmp	#LR__0001
01e74     3F 07 03 F6 | 	mov	local90, local22
01e78     07 06 47 F7 | 	zerox	local90, #7
01e7c     00 D8 06 F6 | 	mov	local67, #0
01e80     00 4A 06 F6 | 	mov	arg01, #0
01e84     F4 2E B0 FD | 	call	#__system___getiolock_0102
01e88     12 4B 02 F6 | 	mov	arg01, result1
01e8c     1C 1A B0 FD | 	call	#__system___lockmem
01e90     00 24 06 F6 | 	mov	result1, #0
01e94     00 70 06 F6 | 	mov	local15, #0
01e98     2D 00 00 FF 
01e9c     53 73 06 F6 | 	mov	local16, ##@LR__0334
01ea0     39 75 02 F6 | 	mov	local17, local16
01ea4     00 76 06 F6 | 	mov	local18, #0
01ea8     00 4A 06 F6 | 	mov	arg01, #0
01eac     3A 4D 02 F6 | 	mov	arg02, local17
01eb0     00 4E 06 F6 | 	mov	arg03, #0
01eb4     6C 1C B0 FD | 	call	#__system___basic_print_string
01eb8     12 67 02 F6 | 	mov	local10, result1
01ebc     00 68 06 F6 | 	mov	local11, #0
01ec0     83 6B 02 F6 | 	mov	local12, local90
01ec4     00 6C 06 F6 | 	mov	local13, #0
01ec8     0A 6E 06 F6 | 	mov	local14, #10
01ecc     00 4A 06 F6 | 	mov	arg01, #0
01ed0     35 4D 02 F6 | 	mov	arg02, local12
01ed4     00 4E 06 F6 | 	mov	arg03, #0
01ed8     0A 50 06 F6 | 	mov	arg04, #10
01edc     D0 1C B0 FD | 	call	#__system___basic_print_unsigned
01ee0     12 83 02 F6 | 	mov	local24, result1
01ee4     00 84 06 F6 | 	mov	local25, #0
01ee8     00 4A 06 F6 | 	mov	arg01, #0
01eec     0A 4C 06 F6 | 	mov	arg02, #10
01ef0     00 4E 06 F6 | 	mov	arg03, #0
01ef4     E0 1B B0 FD | 	call	#__system___basic_print_char
01ef8     01 24 06 F6 | 	mov	result1, #1
01efc     01 86 06 F6 | 	mov	local26, #1
01f00     00 88 06 F6 | 	mov	local27, #0
01f04     00 4A 06 F6 | 	mov	arg01, #0
01f08     70 2E B0 FD | 	call	#__system___getiolock_0102
01f0c     12 01 68 FC | 	wrlong	#0, result1
01f10     00 8A 06 F6 | 	mov	local28, #0
01f14     1C EC 9F FD | 	jmp	#LR__0001
01f18     AF F0 03 F6 | 	mov	ptra, fp
01f1c     BF 00 A0 FD | 	call	#popregs_
01f20                 | _program_ret
01f20     2D 00 64 FD | 	ret
01f24                 | 
01f24                 | ' 
01f24                 | ' 
01f24                 | ' ''---------- putpixel - put a pixel on the screen
01f24                 | ' 
01f24                 | ' pub putpixel1(x,y,c) |byte b
01f24                 | _hng030rm_spin2_putpixel1
01f24                 | ' 
01f24                 | ' 
01f24                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01f24     00 2A 06 F6 | 	mov	_var01, #0
01f28     00 4A 5E F2 | 	cmps	arg01, #0 wcz
01f2c     01 2A 66 36 |  if_ae	neg	_var01, #1
01f30     00 2C 06 F6 | 	mov	_var02, #0
01f34     90 0E 06 F1 | 	add	objptr, #144
01f38     07 2F 02 FB | 	rdlong	_var03, objptr
01f3c     05 2E 66 F0 | 	shl	_var03, #5
01f40     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
01f44     01 2C 66 C6 |  if_b	neg	_var02, #1
01f48     16 2B 02 F5 | 	and	_var01, _var02
01f4c     00 30 06 F6 | 	mov	_var04, #0
01f50     00 4C 5E F2 | 	cmps	arg02, #0 wcz
01f54     01 30 66 36 |  if_ae	neg	_var04, #1
01f58     18 2B 02 F5 | 	and	_var01, _var04
01f5c     00 32 06 F6 | 	mov	_var05, #0
01f60     04 0E 06 F1 | 	add	objptr, #4
01f64     07 35 02 FB | 	rdlong	_var06, objptr
01f68     94 0E 86 F1 | 	sub	objptr, #148
01f6c     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
01f70     01 32 66 C6 |  if_b	neg	_var05, #1
01f74     19 2B CA F7 | 	test	_var01, _var05 wz
01f78     8C 00 90 AD |  if_e	jmp	#LR__0030
01f7c     90 0E 06 F1 | 	add	objptr, #144
01f80     07 37 02 FB | 	rdlong	_var07, objptr
01f84     90 0E 86 F1 | 	sub	objptr, #144
01f88     02 36 66 F0 | 	shl	_var07, #2
01f8c     26 37 02 FD | 	qmul	_var07, arg02
01f90     18 38 62 FD | 	getqx	_var08
01f94     07 3B 02 FB | 	rdlong	_var09, objptr
01f98     1C 3B 02 F1 | 	add	_var09, _var08
01f9c     25 3D 02 F6 | 	mov	_var10, arg01
01fa0     03 3C 46 F0 | 	shr	_var10, #3
01fa4     1E 3B 02 F1 | 	add	_var09, _var10
01fa8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01fa8     1D 3F C2 FA | 	rdbyte	_var11, _var09
01fac                 | '     if (c==0)
01fac     00 4E 0E F2 | 	cmp	arg03, #0 wz
01fb0     18 00 90 5D |  if_ne	jmp	#LR__0028
01fb4     25 2B 52 F6 | 	abs	_var01, arg01 wc
01fb8     07 2A 06 F5 | 	and	_var01, #7
01fbc     15 2B 62 C6 |  if_b	neg	_var01, _var01
01fc0     15 41 C2 F9 | 	decod	_var12, _var01
01fc4                 | '       b:=b & !(1<<(x//8))
01fc4     20 3F 22 F5 | 	andn	_var11, _var12
01fc8                 | '     else
01fc8     14 00 90 FD | 	jmp	#LR__0029
01fcc                 | LR__0028
01fcc     25 2B 52 F6 | 	abs	_var01, arg01 wc
01fd0     07 2A 06 F5 | 	and	_var01, #7
01fd4     15 2B 62 C6 |  if_b	neg	_var01, _var01
01fd8     15 43 C2 F9 | 	decod	_var13, _var01
01fdc                 | '       b:=b |(1<<(x//8))
01fdc     21 3F 42 F5 | 	or	_var11, _var13
01fe0                 | LR__0029
01fe0     90 0E 06 F1 | 	add	objptr, #144
01fe4     07 45 02 FB | 	rdlong	_var14, objptr
01fe8     90 0E 86 F1 | 	sub	objptr, #144
01fec     02 44 66 F0 | 	shl	_var14, #2
01ff0     26 45 02 FD | 	qmul	_var14, arg02
01ff4     18 46 62 FD | 	getqx	_var15
01ff8     07 49 02 FB | 	rdlong	_var16, objptr
01ffc     23 49 02 F1 | 	add	_var16, _var15
02000     1E 49 02 F1 | 	add	_var16, _var10
02004                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02004     24 3F 42 FC | 	wrbyte	_var11, _var16
02008                 | LR__0030
02008                 | _hng030rm_spin2_putpixel1_ret
02008     2D 00 64 FD | 	ret
0200c                 | 
0200c                 | ' 
0200c                 | ' 
0200c                 | ' pub putpixel2(x,y,c) |byte b
0200c                 | _hng030rm_spin2_putpixel2
0200c                 | ' 
0200c                 | ' 
0200c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
0200c     00 2A 06 F6 | 	mov	_var01, #0
02010     00 4A 5E F2 | 	cmps	arg01, #0 wcz
02014     01 2A 66 36 |  if_ae	neg	_var01, #1
02018     00 2C 06 F6 | 	mov	_var02, #0
0201c     90 0E 06 F1 | 	add	objptr, #144
02020     07 2F 02 FB | 	rdlong	_var03, objptr
02024     04 2E 66 F0 | 	shl	_var03, #4
02028     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
0202c     01 2C 66 C6 |  if_b	neg	_var02, #1
02030     16 2B 02 F5 | 	and	_var01, _var02
02034     00 30 06 F6 | 	mov	_var04, #0
02038     00 4C 5E F2 | 	cmps	arg02, #0 wcz
0203c     01 30 66 36 |  if_ae	neg	_var04, #1
02040     18 2B 02 F5 | 	and	_var01, _var04
02044     00 32 06 F6 | 	mov	_var05, #0
02048     04 0E 06 F1 | 	add	objptr, #4
0204c     07 35 02 FB | 	rdlong	_var06, objptr
02050     94 0E 86 F1 | 	sub	objptr, #148
02054     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02058     01 32 66 C6 |  if_b	neg	_var05, #1
0205c     19 2B CA F7 | 	test	_var01, _var05 wz
02060     7C 00 90 AD |  if_e	jmp	#LR__0031
02064     90 0E 06 F1 | 	add	objptr, #144
02068     07 37 02 FB | 	rdlong	_var07, objptr
0206c     90 0E 86 F1 | 	sub	objptr, #144
02070     02 36 66 F0 | 	shl	_var07, #2
02074     26 37 02 FD | 	qmul	_var07, arg02
02078     18 38 62 FD | 	getqx	_var08
0207c     07 3B 02 FB | 	rdlong	_var09, objptr
02080     1C 3B 02 F1 | 	add	_var09, _var08
02084     25 3D 02 F6 | 	mov	_var10, arg01
02088     02 3C 46 F0 | 	shr	_var10, #2
0208c     1E 3B 02 F1 | 	add	_var09, _var10
02090                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02090     1D 3F C2 FA | 	rdbyte	_var11, _var09
02094     25 2B 52 F6 | 	abs	_var01, arg01 wc
02098     03 2A 06 F5 | 	and	_var01, #3
0209c     15 2B 62 C6 |  if_b	neg	_var01, _var01
020a0     01 2A 66 F0 | 	shl	_var01, #1
020a4     03 40 06 F6 | 	mov	_var12, #3
020a8     15 41 62 F0 | 	shl	_var12, _var01
020ac                 | '     b:=b & !(%11<<((x//4)<<1))
020ac     20 3F 22 F5 | 	andn	_var11, _var12
020b0     15 4F 62 F0 | 	shl	arg03, _var01
020b4                 | '     b:=b |(c<<((x//4)<<1))
020b4     27 3F 42 F5 | 	or	_var11, arg03
020b8     90 0E 06 F1 | 	add	objptr, #144
020bc     07 43 02 FB | 	rdlong	_var13, objptr
020c0     90 0E 86 F1 | 	sub	objptr, #144
020c4     02 42 66 F0 | 	shl	_var13, #2
020c8     26 43 02 FD | 	qmul	_var13, arg02
020cc     18 44 62 FD | 	getqx	_var14
020d0     07 47 02 FB | 	rdlong	_var15, objptr
020d4     22 47 02 F1 | 	add	_var15, _var14
020d8     1E 47 02 F1 | 	add	_var15, _var10
020dc                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
020dc     23 3F 42 FC | 	wrbyte	_var11, _var15
020e0                 | LR__0031
020e0                 | _hng030rm_spin2_putpixel2_ret
020e0     2D 00 64 FD | 	ret
020e4                 | 
020e4                 | ' 
020e4                 | ' 
020e4                 | ' pub putpixel4(x,y,c) |byte b
020e4                 | _hng030rm_spin2_putpixel4
020e4                 | ' 
020e4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
020e4     00 2A 06 F6 | 	mov	_var01, #0
020e8     00 4A 5E F2 | 	cmps	arg01, #0 wcz
020ec     01 2A 66 36 |  if_ae	neg	_var01, #1
020f0     00 2C 06 F6 | 	mov	_var02, #0
020f4     90 0E 06 F1 | 	add	objptr, #144
020f8     07 2F 02 FB | 	rdlong	_var03, objptr
020fc     04 2E 66 F0 | 	shl	_var03, #4
02100     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
02104     01 2C 66 C6 |  if_b	neg	_var02, #1
02108     16 2B 02 F5 | 	and	_var01, _var02
0210c     00 30 06 F6 | 	mov	_var04, #0
02110     00 4C 5E F2 | 	cmps	arg02, #0 wcz
02114     01 30 66 36 |  if_ae	neg	_var04, #1
02118     18 2B 02 F5 | 	and	_var01, _var04
0211c     00 32 06 F6 | 	mov	_var05, #0
02120     04 0E 06 F1 | 	add	objptr, #4
02124     07 35 02 FB | 	rdlong	_var06, objptr
02128     94 0E 86 F1 | 	sub	objptr, #148
0212c     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02130     01 32 66 C6 |  if_b	neg	_var05, #1
02134     19 2B CA F7 | 	test	_var01, _var05 wz
02138     7C 00 90 AD |  if_e	jmp	#LR__0032
0213c     90 0E 06 F1 | 	add	objptr, #144
02140     07 37 02 FB | 	rdlong	_var07, objptr
02144     90 0E 86 F1 | 	sub	objptr, #144
02148     02 36 66 F0 | 	shl	_var07, #2
0214c     26 37 02 FD | 	qmul	_var07, arg02
02150     18 38 62 FD | 	getqx	_var08
02154     07 3B 02 FB | 	rdlong	_var09, objptr
02158     1C 3B 02 F1 | 	add	_var09, _var08
0215c     25 3D 02 F6 | 	mov	_var10, arg01
02160     01 3C 46 F0 | 	shr	_var10, #1
02164     1E 3B 02 F1 | 	add	_var09, _var10
02168                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02168     1D 3F C2 FA | 	rdbyte	_var11, _var09
0216c     25 2B 52 F6 | 	abs	_var01, arg01 wc
02170     01 2A 06 F5 | 	and	_var01, #1
02174     15 2B 62 C6 |  if_b	neg	_var01, _var01
02178     02 2A 66 F0 | 	shl	_var01, #2
0217c     0F 40 06 F6 | 	mov	_var12, #15
02180     15 41 62 F0 | 	shl	_var12, _var01
02184                 | '     b:=b & !(%1111<<((x//2)<<2))
02184     20 3F 22 F5 | 	andn	_var11, _var12
02188     15 4F 62 F0 | 	shl	arg03, _var01
0218c                 | '     b:=b |(c<<((x//2)<<2))
0218c     27 3F 42 F5 | 	or	_var11, arg03
02190     90 0E 06 F1 | 	add	objptr, #144
02194     07 43 02 FB | 	rdlong	_var13, objptr
02198     90 0E 86 F1 | 	sub	objptr, #144
0219c     02 42 66 F0 | 	shl	_var13, #2
021a0     26 43 02 FD | 	qmul	_var13, arg02
021a4     18 44 62 FD | 	getqx	_var14
021a8     07 47 02 FB | 	rdlong	_var15, objptr
021ac     22 47 02 F1 | 	add	_var15, _var14
021b0     1E 47 02 F1 | 	add	_var15, _var10
021b4                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
021b4     23 3F 42 FC | 	wrbyte	_var11, _var15
021b8                 | LR__0032
021b8                 | _hng030rm_spin2_putpixel4_ret
021b8     2D 00 64 FD | 	ret
021bc                 | 
021bc                 | ' 
021bc                 | ' 
021bc                 | ' pub putpixel8(x,y,c)
021bc                 | _hng030rm_spin2_putpixel8
021bc                 | ' 
021bc                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
021bc     00 2A 06 F6 | 	mov	_var01, #0
021c0     00 4A 5E F2 | 	cmps	arg01, #0 wcz
021c4     01 2A 66 36 |  if_ae	neg	_var01, #1
021c8     00 2C 06 F6 | 	mov	_var02, #0
021cc     90 0E 06 F1 | 	add	objptr, #144
021d0     07 2F 02 FB | 	rdlong	_var03, objptr
021d4     02 2E 66 F0 | 	shl	_var03, #2
021d8     17 4B 5A F2 | 	cmps	arg01, _var03 wcz
021dc     01 2C 66 C6 |  if_b	neg	_var02, #1
021e0     16 2B 02 F5 | 	and	_var01, _var02
021e4     00 30 06 F6 | 	mov	_var04, #0
021e8     00 4C 5E F2 | 	cmps	arg02, #0 wcz
021ec     01 30 66 36 |  if_ae	neg	_var04, #1
021f0     18 2B 02 F5 | 	and	_var01, _var04
021f4     00 32 06 F6 | 	mov	_var05, #0
021f8     04 0E 06 F1 | 	add	objptr, #4
021fc     07 35 02 FB | 	rdlong	_var06, objptr
02200     94 0E 86 F1 | 	sub	objptr, #148
02204     1A 4D 5A F2 | 	cmps	arg02, _var06 wcz
02208     01 32 66 C6 |  if_b	neg	_var05, #1
0220c     19 2B CA F7 | 	test	_var01, _var05 wz
02210     28 00 90 AD |  if_e	jmp	#LR__0033
02214     90 0E 06 F1 | 	add	objptr, #144
02218     07 37 02 FB | 	rdlong	_var07, objptr
0221c     90 0E 86 F1 | 	sub	objptr, #144
02220     02 36 66 F0 | 	shl	_var07, #2
02224     26 37 02 FD | 	qmul	_var07, arg02
02228     18 38 62 FD | 	getqx	_var08
0222c     07 3B 02 FB | 	rdlong	_var09, objptr
02230     1C 3B 02 F1 | 	add	_var09, _var08
02234     25 3B 02 F1 | 	add	_var09, arg01
02238                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02238     1D 4F 42 FC | 	wrbyte	arg03, _var09
0223c                 | LR__0033
0223c                 | _hng030rm_spin2_putpixel8_ret
0223c     2D 00 64 FD | 	ret
02240                 | 
02240                 | ' 
02240                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02240                 | ' 
02240                 | ' pub setbordercolor(r,g,b) | color
02240                 | _hng030rm_spin2_setbordercolor
02240     18 4A 66 F0 | 	shl	arg01, #24
02244     10 4C 66 F0 | 	shl	arg02, #16
02248     26 4B 02 F1 | 	add	arg01, arg02
0224c     08 4E 66 F0 | 	shl	arg03, #8
02250     27 4B 02 F1 | 	add	arg01, arg03
02254                 | ' 
02254                 | ' color:=r<<24+g<<16+b<<8
02254                 | ' bordercolor:=color
02254     2C 0E 06 F1 | 	add	objptr, #44
02258     07 4B 62 FC | 	wrlong	arg01, objptr
0225c     2C 0E 86 F1 | 	sub	objptr, #44
02260                 | _hng030rm_spin2_setbordercolor_ret
02260     2D 00 64 FD | 	ret
02264                 | 
02264                 | ' 
02264                 | ' 
02264                 | ' '*************************************************************************
02264                 | ' '                                                                        *
02264                 | ' '  Text functions                                                        *
02264                 | ' '                                                                        *
02264                 | ' '*************************************************************************
02264                 | ' 
02264                 | ' ''---------- Clear the screen, set its foreground/background color
02264                 | ' 
02264                 | ' pub cls(fc,bc)   :c
02264                 | _hng030rm_spin2_cls
02264     07 5A 05 F6 | 	mov	COUNT_, #7
02268     B0 00 A0 FD | 	call	#pushregs_
0226c     25 55 02 F6 | 	mov	local01, arg01
02270     26 57 02 F6 | 	mov	local02, arg02
02274                 | ' 
02274                 | ' if (graphmode<512)
02274     C4 0E 06 F1 | 	add	objptr, #196
02278     07 59 02 FB | 	rdlong	local03, objptr
0227c     C4 0E 86 F1 | 	sub	objptr, #196
02280     01 00 00 FF 
02284     00 58 5E F2 | 	cmps	local03, ##512 wcz
02288     34 00 90 3D |  if_ae	jmp	#LR__0034
0228c     2A 5B 02 F6 | 	mov	local04, local01
02290     18 5A 66 F0 | 	shl	local04, #24
02294     2B 5D 02 F6 | 	mov	local05, local02
02298     10 5C 66 F0 | 	shl	local05, #16
0229c     2E 5B 02 F1 | 	add	local04, local05
022a0     20 5A 06 F1 | 	add	local04, #32
022a4                 | '   c:=fc<<24+bc<<16+$20
022a4                 | '   longfill(buf_ptr,c,buflen)
022a4     07 4B 02 FB | 	rdlong	arg01, objptr
022a8     30 0E 06 F1 | 	add	objptr, #48
022ac     07 4F 02 FB | 	rdlong	arg03, objptr
022b0     30 0E 86 F1 | 	sub	objptr, #48
022b4     2D 4D 02 F6 | 	mov	arg02, local04
022b8     A8 00 A0 FD | 	call	#\builtin_longfill_
022bc                 | ' else
022bc     AC 00 90 FD | 	jmp	#LR__0040
022c0                 | LR__0034
022c0                 | '   if (graphmode & 48) ==48
022c0     C4 0E 06 F1 | 	add	objptr, #196
022c4     07 59 02 FB | 	rdlong	local03, objptr
022c8     C4 0E 86 F1 | 	sub	objptr, #196
022cc     30 58 06 F5 | 	and	local03, #48
022d0     30 58 0E F2 | 	cmp	local03, #48 wz
022d4                 | '     c:=bc
022d4     2B 5B 02 A6 |  if_e	mov	local04, local02
022d8     74 00 90 AD |  if_e	jmp	#LR__0039
022dc                 | '   elseif (graphmode & 48) ==32
022dc     C4 0E 06 F1 | 	add	objptr, #196
022e0     07 59 02 FB | 	rdlong	local03, objptr
022e4     C4 0E 86 F1 | 	sub	objptr, #196
022e8     30 58 06 F5 | 	and	local03, #48
022ec     20 58 0E F2 | 	cmp	local03, #32 wz
022f0     10 00 90 5D |  if_ne	jmp	#LR__0035
022f4     2B 5B 02 F6 | 	mov	local04, local02
022f8     04 5A 66 F0 | 	shl	local04, #4
022fc     2B 5B 02 F1 | 	add	local04, local02
02300                 | '     c:=bc<<4+bc
02300     4C 00 90 FD | 	jmp	#LR__0038
02304                 | LR__0035
02304                 | '   elseif (graphmode & 48) ==16
02304     C4 0E 06 F1 | 	add	objptr, #196
02308     07 59 02 FB | 	rdlong	local03, objptr
0230c     C4 0E 86 F1 | 	sub	objptr, #196
02310     30 58 06 F5 | 	and	local03, #48
02314     10 58 0E F2 | 	cmp	local03, #16 wz
02318     28 00 90 5D |  if_ne	jmp	#LR__0036
0231c     2B 5B 02 F6 | 	mov	local04, local02
02320     06 5A 66 F0 | 	shl	local04, #6
02324     2B 5F 02 F6 | 	mov	local06, local02
02328     04 5E 66 F0 | 	shl	local06, #4
0232c     2F 5B 02 F1 | 	add	local04, local06
02330     2B 61 02 F6 | 	mov	local07, local02
02334     02 60 66 F0 | 	shl	local07, #2
02338     30 5B 02 F1 | 	add	local04, local07
0233c     2B 5B 02 F1 | 	add	local04, local02
02340                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02340                 | '   else
02340     0C 00 90 FD | 	jmp	#LR__0037
02344                 | LR__0036
02344                 | '     if bc==1
02344     01 56 0E F2 | 	cmp	local02, #1 wz
02348                 | '       c:=255
02348     FF 5A 06 A6 |  if_e	mov	local04, #255
0234c                 | '     else
0234c                 | '       c:=0
0234c     00 5A 06 56 |  if_ne	mov	local04, #0
02350                 | LR__0037
02350                 | LR__0038
02350                 | LR__0039
02350     30 0E 06 F1 | 	add	objptr, #48
02354     07 4F 02 FB | 	rdlong	arg03, objptr
02358     30 0E 86 F1 | 	sub	objptr, #48
0235c     02 4E 66 F0 | 	shl	arg03, #2
02360                 | '   bytefill(buf_ptr,c,buflen*4)
02360     07 4B 02 FB | 	rdlong	arg01, objptr
02364     2D 4D 02 F6 | 	mov	arg02, local04
02368     A0 00 A0 FD | 	call	#\builtin_bytefill_
0236c                 | LR__0040
0236c                 | ' setwritecolors(fc,bc)
0236c                 | ' 
0236c                 | ' 
0236c                 | ' write_color:=ff
0236c     38 0E 06 F1 | 	add	objptr, #56
02370     07 55 62 FC | 	wrlong	local01, objptr
02374                 | ' write_background:=bb
02374     04 0E 06 F1 | 	add	objptr, #4
02378     07 57 62 FC | 	wrlong	local02, objptr
0237c                 | ' cursor_x:=0
0237c     08 0E 86 F1 | 	sub	objptr, #8
02380     07 01 48 FC | 	wrbyte	#0, objptr
02384                 | ' cursor_y:=0
02384     01 0E 06 F1 | 	add	objptr, #1
02388     07 01 48 FC | 	wrbyte	#0, objptr
0238c     35 0E 86 F1 | 	sub	objptr, #53
02390     2D 25 02 F6 | 	mov	result1, local04
02394     AF F0 03 F6 | 	mov	ptra, fp
02398     BF 00 A0 FD | 	call	#popregs_
0239c                 | _hng030rm_spin2_cls_ret
0239c     2D 00 64 FD | 	ret
023a0                 | 
023a0                 | ' 
023a0                 | ' ''---------- Output a char at the cursor position, move the cursor
023a0                 | ' 
023a0                 | ' pub putchar(achar) | c,x,y
023a0                 | _hng030rm_spin2_putchar
023a0     12 5A 05 F6 | 	mov	COUNT_, #18
023a4     B0 00 A0 FD | 	call	#pushregs_
023a8     25 55 02 F6 | 	mov	local01, arg01
023ac                 | ' 
023ac                 | ' if achar==10
023ac     0A 54 0E F2 | 	cmp	local01, #10 wz
023b0     58 00 90 5D |  if_ne	jmp	#LR__0041
023b4                 | '   crlf()
023b4                 | ' 
023b4                 | ' cursor_x:=0
023b4     34 0E 06 F1 | 	add	objptr, #52
023b8     07 01 48 FC | 	wrbyte	#0, objptr
023bc                 | ' cursor_y+=1
023bc     01 0E 06 F1 | 	add	objptr, #1
023c0     07 57 C2 FA | 	rdbyte	local02, objptr
023c4     01 56 06 F1 | 	add	local02, #1
023c8     07 57 42 FC | 	wrbyte	local02, objptr
023cc                 | ' if cursor_y>lines-1
023cc     5F 0E 06 F1 | 	add	objptr, #95
023d0     07 57 02 FB | 	rdlong	local02, objptr
023d4     01 56 86 F1 | 	sub	local02, #1
023d8     5F 0E 86 F1 | 	sub	objptr, #95
023dc     07 59 C2 FA | 	rdbyte	local03, objptr
023e0     35 0E 86 F1 | 	sub	objptr, #53
023e4     2B 59 5A F2 | 	cmps	local03, local02 wcz
023e8     38 01 90 ED |  if_be	jmp	#LR__0044
023ec                 | '   scrollup()
023ec     40 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
023f0     94 0E 06 F1 | 	add	objptr, #148
023f4     07 5B 02 FB | 	rdlong	local04, objptr
023f8     01 5A 86 F1 | 	sub	local04, #1
023fc                 | '   cursor_y:=lines-1
023fc     5F 0E 86 F1 | 	sub	objptr, #95
02400     07 5B 42 FC | 	wrbyte	local04, objptr
02404     35 0E 86 F1 | 	sub	objptr, #53
02408                 | ' else  
02408     18 01 90 FD | 	jmp	#LR__0044
0240c                 | LR__0041
0240c                 | '   x:=cursor_x
0240c     34 0E 06 F1 | 	add	objptr, #52
02410     07 5D C2 FA | 	rdbyte	local05, objptr
02414                 | '   y:=cursor_y
02414     01 0E 06 F1 | 	add	objptr, #1
02418     07 5F C2 FA | 	rdbyte	local06, objptr
0241c     03 0E 06 F1 | 	add	objptr, #3
02420     07 61 02 FB | 	rdlong	local07, objptr
02424     18 60 66 F0 | 	shl	local07, #24
02428     04 0E 06 F1 | 	add	objptr, #4
0242c     07 63 02 FB | 	rdlong	local08, objptr
02430     10 62 66 F0 | 	shl	local08, #16
02434     31 61 02 F1 | 	add	local07, local08
02438                 | '   c:=write_color<<24+write_background<<16
02438     54 0E 06 F1 | 	add	objptr, #84
0243c     07 65 02 FB | 	rdlong	local09, objptr
02440     90 0E 86 F1 | 	sub	objptr, #144
02444     2F 65 02 FD | 	qmul	local09, local06
02448     18 66 62 FD | 	getqx	local10
0244c     2E 67 02 F1 | 	add	local10, local05
02450     02 66 66 F0 | 	shl	local10, #2
02454     07 69 02 FB | 	rdlong	local11, objptr
02458     33 69 02 F1 | 	add	local11, local10
0245c     34 6B 02 FB | 	rdlong	local12, local11
02460     7F 00 00 FF 
02464     FF 6B 06 F5 | 	and	local12, ##65535
02468     30 6B 42 F5 | 	or	local12, local07
0246c                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
0246c     34 6B 62 FC | 	wrlong	local12, local11
02470     90 0E 06 F1 | 	add	objptr, #144
02474     07 65 02 FB | 	rdlong	local09, objptr
02478     90 0E 86 F1 | 	sub	objptr, #144
0247c     2F 65 02 FD | 	qmul	local09, local06
02480     18 6C 62 FD | 	getqx	local13
02484     2E 6D 02 F1 | 	add	local13, local05
02488     02 6C 66 F0 | 	shl	local13, #2
0248c     07 6F 02 FB | 	rdlong	local14, objptr
02490     36 6F 02 F1 | 	add	local14, local13
02494     37 71 02 FB | 	rdlong	local15, local14
02498     FF 70 26 F5 | 	andn	local15, #255
0249c     FF 54 06 F5 | 	and	local01, #255
024a0     2A 71 42 F5 | 	or	local15, local01
024a4                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
024a4     37 71 62 FC | 	wrlong	local15, local14
024a8                 | '   cursor_x+=1
024a8     34 0E 06 F1 | 	add	objptr, #52
024ac     07 73 C2 FA | 	rdbyte	local16, objptr
024b0     01 72 06 F1 | 	add	local16, #1
024b4     07 73 42 FC | 	wrbyte	local16, objptr
024b8                 | '   if cursor_x==cpl
024b8     07 73 C2 FA | 	rdbyte	local16, objptr
024bc     5C 0E 06 F1 | 	add	objptr, #92
024c0     07 75 02 FB | 	rdlong	local17, objptr
024c4     90 0E 86 F1 | 	sub	objptr, #144
024c8     3A 73 0A F2 | 	cmp	local16, local17 wz
024cc     54 00 90 5D |  if_ne	jmp	#LR__0043
024d0                 | '     cursor_x:=0
024d0     34 0E 06 F1 | 	add	objptr, #52
024d4     07 01 48 FC | 	wrbyte	#0, objptr
024d8                 | '     cursor_y+=1
024d8     01 0E 06 F1 | 	add	objptr, #1
024dc     07 73 C2 FA | 	rdbyte	local16, objptr
024e0     01 72 06 F1 | 	add	local16, #1
024e4     07 73 42 FC | 	wrbyte	local16, objptr
024e8                 | '     if cursor_y>lines-1
024e8     5F 0E 06 F1 | 	add	objptr, #95
024ec     07 73 02 FB | 	rdlong	local16, objptr
024f0     01 72 86 F1 | 	sub	local16, #1
024f4     5F 0E 86 F1 | 	sub	objptr, #95
024f8     07 75 C2 FA | 	rdbyte	local17, objptr
024fc     35 0E 86 F1 | 	sub	objptr, #53
02500     39 75 5A F2 | 	cmps	local17, local16 wcz
02504     1C 00 90 ED |  if_be	jmp	#LR__0042
02508                 | '       scrollup()
02508     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
0250c     94 0E 06 F1 | 	add	objptr, #148
02510     07 77 02 FB | 	rdlong	local18, objptr
02514     01 76 86 F1 | 	sub	local18, #1
02518                 | '       cursor_y:=lines-1
02518     5F 0E 86 F1 | 	sub	objptr, #95
0251c     07 77 42 FC | 	wrbyte	local18, objptr
02520     35 0E 86 F1 | 	sub	objptr, #53
02524                 | LR__0042
02524                 | LR__0043
02524                 | LR__0044
02524     AF F0 03 F6 | 	mov	ptra, fp
02528     BF 00 A0 FD | 	call	#popregs_
0252c                 | _hng030rm_spin2_putchar_ret
0252c     2D 00 64 FD | 	ret
02530                 | 
02530                 | ' 
02530                 | ' ''-----------  Scroll the screen one line up
02530                 | ' 
02530                 | ' pub scrollup() | i
02530                 | _hng030rm_spin2_scrollup
02530     0A 5A 05 F6 | 	mov	COUNT_, #10
02534     B0 00 A0 FD | 	call	#pushregs_
02538     90 0E 06 F1 | 	add	objptr, #144
0253c     07 55 02 FB | 	rdlong	local01, objptr
02540     90 0E 86 F1 | 	sub	objptr, #144
02544     02 54 66 F0 | 	shl	local01, #2
02548     07 4D 02 FB | 	rdlong	arg02, objptr
0254c     2A 4D 02 F1 | 	add	arg02, local01
02550     30 0E 06 F1 | 	add	objptr, #48
02554     07 4F 02 FB | 	rdlong	arg03, objptr
02558     60 0E 06 F1 | 	add	objptr, #96
0255c     07 57 02 FB | 	rdlong	local02, objptr
02560     90 0E 86 F1 | 	sub	objptr, #144
02564     2B 4F 82 F1 | 	sub	arg03, local02
02568                 | ' 
02568                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
02568     07 4B 02 FB | 	rdlong	arg01, objptr
0256c     64 12 B0 FD | 	call	#__system__longmove
02570                 | ' repeat i from buflen-cpl to buflen-1
02570     30 0E 06 F1 | 	add	objptr, #48
02574     07 59 02 FB | 	rdlong	local03, objptr
02578     60 0E 06 F1 | 	add	objptr, #96
0257c     07 57 02 FB | 	rdlong	local02, objptr
02580     2B 59 82 F1 | 	sub	local03, local02
02584     60 0E 86 F1 | 	sub	objptr, #96
02588     07 5B 02 FB | 	rdlong	local04, objptr
0258c     01 5A 86 F1 | 	sub	local04, #1
02590     07 5D 02 FB | 	rdlong	local05, objptr
02594     60 0E 06 F1 | 	add	objptr, #96
02598     07 5F 02 FB | 	rdlong	local06, objptr
0259c     90 0E 86 F1 | 	sub	objptr, #144
025a0     2F 5D 82 F1 | 	sub	local05, local06
025a4     2E 5B 5A F2 | 	cmps	local04, local05 wcz
025a8     01 60 06 16 |  if_a	mov	local07, #1
025ac     01 60 66 E6 |  if_be	neg	local07, #1
025b0     30 5B 02 F1 | 	add	local04, local07
025b4     78 DA 9F FE | 	loc	pa,	#(@LR__0046-@LR__0045)
025b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
025bc                 | LR__0045
025bc     2C 63 02 F6 | 	mov	local08, local03
025c0     02 62 66 F0 | 	shl	local08, #2
025c4     07 65 02 FB | 	rdlong	local09, objptr
025c8     31 65 02 F1 | 	add	local09, local08
025cc     32 67 02 FB | 	rdlong	local10, local09
025d0     80 FF 7F FF 
025d4     00 66 06 F5 | 	and	local10, ##-65536
025d8     20 66 46 F5 | 	or	local10, #32
025dc                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
025dc     32 67 62 FC | 	wrlong	local10, local09
025e0     30 59 02 F1 | 	add	local03, local07
025e4     2D 59 0A F2 | 	cmp	local03, local04 wz
025e8     D0 FF 9F 5D |  if_ne	jmp	#LR__0045
025ec                 | LR__0046
025ec     AF F0 03 F6 | 	mov	ptra, fp
025f0     BF 00 A0 FD | 	call	#popregs_
025f4                 | _hng030rm_spin2_scrollup_ret
025f4     2D 00 64 FD | 	ret
025f8                 | 
025f8                 | ' 
025f8                 | ' 
025f8                 | ' 
025f8                 | ' '*************************************************************************
025f8                 | ' '                                                                        *
025f8                 | ' '  Mode setting and driver start                                                          *
025f8                 | ' '                                                                        *
025f8                 | ' '*************************************************************************
025f8                 | ' 
025f8                 | ' ''---------  Set the graphics mode
025f8                 | ' 
025f8                 | ' 
025f8                 | ' 
025f8                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
025f8                 | _hng030rm_spin2_setmode
025f8     50 5A 05 F6 | 	mov	COUNT_, #80
025fc     B0 00 A0 FD | 	call	#pushregs_
02600     25 55 02 F6 | 	mov	local01, arg01
02604                 | ' 
02604                 | ' '' mode:tn_bb_cc_vv_hh
02604                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02604                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02604                 | ' 
02604                 | ' if mode==(512+192+48)
02604     01 00 00 FF 
02608     F0 54 0E F2 | 	cmp	local01, ##752 wz
0260c                 | '   return 'no RAM
0260c     1C 0A 90 AD |  if_e	jmp	#LR__0087
02610                 | ' 
02610                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02610     2A 57 02 F6 | 	mov	local02, local01
02614     06 56 46 F0 | 	shr	local02, #6
02618     07 56 06 F5 | 	and	local02, #7
0261c     08 56 26 F3 | 	fle	local02, #8
02620     2B 59 02 F6 | 	mov	local03, local02
02624     30 58 62 FD | 	jmprel	local03
02628                 | LR__0047
02628     20 00 90 FD | 	jmp	#LR__0048
0262c     58 00 90 FD | 	jmp	#LR__0049
02630     90 00 90 FD | 	jmp	#LR__0050
02634     C8 00 90 FD | 	jmp	#LR__0051
02638     00 01 90 FD | 	jmp	#LR__0052
0263c     38 01 90 FD | 	jmp	#LR__0053
02640     70 01 90 FD | 	jmp	#LR__0054
02644     A8 01 90 FD | 	jmp	#LR__0055
02648     E4 01 90 FD | 	jmp	#LR__0056
0264c                 | LR__0048
0264c                 | ' 
0264c                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
0264c     50 0E 06 F1 | 	add	objptr, #80
02650     07 4B 02 F6 | 	mov	arg01, objptr
02654     50 0E 86 F1 | 	sub	objptr, #80
02658     0E 00 00 FF 
0265c     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02660     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02664     2D 5D 02 F6 | 	mov	local05, local04
02668     10 5E 06 F6 | 	mov	local06, #16
0266c     2E 4D 02 F6 | 	mov	arg02, local05
02670     10 4E 06 F6 | 	mov	arg03, #16
02674     0E 00 00 FF 
02678     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
0267c     54 11 B0 FD | 	call	#__system__longmove
02680     12 61 02 F6 | 	mov	local07, result1
02684     A8 01 90 FD | 	jmp	#LR__0056
02688                 | LR__0049
02688                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02688     50 0E 06 F1 | 	add	objptr, #80
0268c     07 4B 02 F6 | 	mov	arg01, objptr
02690     50 0E 86 F1 | 	sub	objptr, #80
02694     0E 00 00 FF 
02698     98 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
0269c     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
026a0     2D 5D 02 F6 | 	mov	local05, local04
026a4     10 5E 06 F6 | 	mov	local06, #16
026a8     2E 4D 02 F6 | 	mov	arg02, local05
026ac     10 4E 06 F6 | 	mov	arg03, #16
026b0     0E 00 00 FF 
026b4     98 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
026b8     18 11 B0 FD | 	call	#__system__longmove
026bc     12 61 02 F6 | 	mov	local07, result1
026c0     6C 01 90 FD | 	jmp	#LR__0056
026c4                 | LR__0050
026c4                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
026c4     50 0E 06 F1 | 	add	objptr, #80
026c8     07 4B 02 F6 | 	mov	arg01, objptr
026cc     50 0E 86 F1 | 	sub	objptr, #80
026d0     0E 00 00 FF 
026d4     D8 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
026d8     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
026dc     2D 5D 02 F6 | 	mov	local05, local04
026e0     10 5E 06 F6 | 	mov	local06, #16
026e4     2E 4D 02 F6 | 	mov	arg02, local05
026e8     10 4E 06 F6 | 	mov	arg03, #16
026ec     0E 00 00 FF 
026f0     D8 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
026f4     DC 10 B0 FD | 	call	#__system__longmove
026f8     12 61 02 F6 | 	mov	local07, result1
026fc     30 01 90 FD | 	jmp	#LR__0056
02700                 | LR__0051
02700                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02700     50 0E 06 F1 | 	add	objptr, #80
02704     07 4B 02 F6 | 	mov	arg01, objptr
02708     50 0E 86 F1 | 	sub	objptr, #80
0270c     0E 00 00 FF 
02710     18 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02714     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02718     2D 5D 02 F6 | 	mov	local05, local04
0271c     10 5E 06 F6 | 	mov	local06, #16
02720     2E 4D 02 F6 | 	mov	arg02, local05
02724     10 4E 06 F6 | 	mov	arg03, #16
02728     0E 00 00 FF 
0272c     18 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02730     A0 10 B0 FD | 	call	#__system__longmove
02734     12 61 02 F6 | 	mov	local07, result1
02738     F4 00 90 FD | 	jmp	#LR__0056
0273c                 | LR__0052
0273c                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
0273c     50 0E 06 F1 | 	add	objptr, #80
02740     07 4B 02 F6 | 	mov	arg01, objptr
02744     50 0E 86 F1 | 	sub	objptr, #80
02748     0E 00 00 FF 
0274c     58 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02750     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02754     2D 5D 02 F6 | 	mov	local05, local04
02758     10 5E 06 F6 | 	mov	local06, #16
0275c     2E 4D 02 F6 | 	mov	arg02, local05
02760     10 4E 06 F6 | 	mov	arg03, #16
02764     0E 00 00 FF 
02768     58 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
0276c     64 10 B0 FD | 	call	#__system__longmove
02770     12 61 02 F6 | 	mov	local07, result1
02774     B8 00 90 FD | 	jmp	#LR__0056
02778                 | LR__0053
02778                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02778     50 0E 06 F1 | 	add	objptr, #80
0277c     07 4B 02 F6 | 	mov	arg01, objptr
02780     50 0E 86 F1 | 	sub	objptr, #80
02784     0E 00 00 FF 
02788     98 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
0278c     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02790     2D 5D 02 F6 | 	mov	local05, local04
02794     10 5E 06 F6 | 	mov	local06, #16
02798     2E 4D 02 F6 | 	mov	arg02, local05
0279c     10 4E 06 F6 | 	mov	arg03, #16
027a0     0E 00 00 FF 
027a4     98 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
027a8     28 10 B0 FD | 	call	#__system__longmove
027ac     12 61 02 F6 | 	mov	local07, result1
027b0     7C 00 90 FD | 	jmp	#LR__0056
027b4                 | LR__0054
027b4                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
027b4     50 0E 06 F1 | 	add	objptr, #80
027b8     07 4B 02 F6 | 	mov	arg01, objptr
027bc     50 0E 86 F1 | 	sub	objptr, #80
027c0     0E 00 00 FF 
027c4     D8 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
027c8     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
027cc     2D 5D 02 F6 | 	mov	local05, local04
027d0     10 5E 06 F6 | 	mov	local06, #16
027d4     2E 4D 02 F6 | 	mov	arg02, local05
027d8     10 4E 06 F6 | 	mov	arg03, #16
027dc     0E 00 00 FF 
027e0     D8 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
027e4     EC 0F B0 FD | 	call	#__system__longmove
027e8     12 61 02 F6 | 	mov	local07, result1
027ec     40 00 90 FD | 	jmp	#LR__0056
027f0                 | LR__0055
027f0                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
027f0     50 0E 06 F1 | 	add	objptr, #80
027f4     07 63 02 F6 | 	mov	local08, objptr
027f8     31 65 02 F6 | 	mov	local09, local08
027fc     0F 00 00 FF 
02800     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02804     0B 5B 02 F6 | 	mov	local04, ptr__hng030rm_spin2_dat__
02808     2D 5D 02 F6 | 	mov	local05, local04
0280c     10 5E 06 F6 | 	mov	local06, #16
02810     32 4B 02 F6 | 	mov	arg01, local09
02814     2E 4D 02 F6 | 	mov	arg02, local05
02818     10 4E 06 F6 | 	mov	arg03, #16
0281c     50 0E 86 F1 | 	sub	objptr, #80
02820     0F 00 00 FF 
02824     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02828     A8 0F B0 FD | 	call	#__system__longmove
0282c     12 61 02 F6 | 	mov	local07, result1
02830                 | LR__0056
02830                 | ' 
02830                 | ' ' 4-bit graphics: do nothing with timings :)
02830                 | ' if mode<512
02830     01 00 00 FF 
02834     00 54 5E F2 | 	cmps	local01, ##512 wcz
02838     20 00 90 3D |  if_ae	jmp	#LR__0057
0283c     0C 00 00 FF 
02840     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02844     0B 67 02 F6 | 	mov	local10, ptr__hng030rm_spin2_dat__
02848                 | '   palette_ptr:=@ataripalette
02848     18 0E 06 F1 | 	add	objptr, #24
0284c     07 67 62 FC | 	wrlong	local10, objptr
02850     18 0E 86 F1 | 	sub	objptr, #24
02854     0C 00 00 FF 
02858     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
0285c                 | LR__0057
0285c                 | ' 
0285c                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
0285c     2A 57 02 F6 | 	mov	local02, local01
02860     01 00 00 FF 
02864     30 56 06 F5 | 	and	local02, ##560
02868     01 00 00 FF 
0286c     30 56 0E F2 | 	cmp	local02, ##560 wz
02870     48 00 90 5D |  if_ne	jmp	#LR__0058
02874                 | '   timings[5]:=4
02874     64 0E 06 F1 | 	add	objptr, #100
02878     07 09 68 FC | 	wrlong	#4, objptr
0287c     18 0E 06 F1 | 	add	objptr, #24
02880     07 69 02 FB | 	rdlong	local11, objptr
02884     01 68 66 F0 | 	shl	local11, #1
02888                 | '   timings[11]:=timings[11]<<1
02888     07 69 62 FC | 	wrlong	local11, objptr
0288c                 | '   putpixel:=p8
0288c     6C 0E 06 F1 | 	add	objptr, #108
02890     07 57 02 FB | 	rdlong	local02, objptr
02894     10 0E 86 F1 | 	sub	objptr, #16
02898     07 57 62 FC | 	wrlong	local02, objptr
0289c     0C 00 00 FF 
028a0     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
028a4     0B 6B 02 F6 | 	mov	local12, ptr__hng030rm_spin2_dat__
028a8                 | '   palette_ptr:=@ataripalette
028a8     C0 0E 86 F1 | 	sub	objptr, #192
028ac     07 6B 62 FC | 	wrlong	local12, objptr
028b0     18 0E 86 F1 | 	sub	objptr, #24
028b4     0C 00 00 FF 
028b8     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
028bc                 | LR__0058
028bc                 | ' 
028bc                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
028bc     2A 57 02 F6 | 	mov	local02, local01
028c0     01 00 00 FF 
028c4     30 56 06 F5 | 	and	local02, ##560
028c8     01 00 00 FF 
028cc     10 56 0E F2 | 	cmp	local02, ##528 wz
028d0     48 00 90 5D |  if_ne	jmp	#LR__0059
028d4                 | '   timings[5]:=16
028d4     64 0E 06 F1 | 	add	objptr, #100
028d8     07 21 68 FC | 	wrlong	#16, objptr
028dc     18 0E 06 F1 | 	add	objptr, #24
028e0     07 6D 02 FB | 	rdlong	local13, objptr
028e4     01 6C 46 F0 | 	shr	local13, #1
028e8                 | '   timings[11]:=timings[11]>>1
028e8     07 6D 62 FC | 	wrlong	local13, objptr
028ec                 | '   putpixel:=p2
028ec     64 0E 06 F1 | 	add	objptr, #100
028f0     07 57 02 FB | 	rdlong	local02, objptr
028f4     08 0E 86 F1 | 	sub	objptr, #8
028f8     07 57 62 FC | 	wrlong	local02, objptr
028fc     0C 00 00 FF 
02900     08 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02904     0B 6F 02 F6 | 	mov	local14, ptr__hng030rm_spin2_dat__
02908                 | '   palette_ptr:=@fourcolors
02908     C0 0E 86 F1 | 	sub	objptr, #192
0290c     07 6F 62 FC | 	wrlong	local14, objptr
02910     18 0E 86 F1 | 	sub	objptr, #24
02914     0C 00 00 FF 
02918     08 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
0291c                 | LR__0059
0291c                 | ' 
0291c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
0291c     2A 57 02 F6 | 	mov	local02, local01
02920     01 00 00 FF 
02924     30 56 06 F5 | 	and	local02, ##560
02928     01 00 00 FF 
0292c     00 56 0E F2 | 	cmp	local02, ##512 wz
02930     48 00 90 5D |  if_ne	jmp	#LR__0060
02934                 | '   timings[5]:=32
02934     64 0E 06 F1 | 	add	objptr, #100
02938     07 41 68 FC | 	wrlong	#32, objptr
0293c     18 0E 06 F1 | 	add	objptr, #24
02940     07 71 02 FB | 	rdlong	local15, objptr
02944     02 70 46 F0 | 	shr	local15, #2
02948                 | '   timings[11]:=timings[11]>>2
02948     07 71 62 FC | 	wrlong	local15, objptr
0294c                 | '   putpixel:=p1
0294c     60 0E 06 F1 | 	add	objptr, #96
02950     07 57 02 FB | 	rdlong	local02, objptr
02954     04 0E 86 F1 | 	sub	objptr, #4
02958     07 57 62 FC | 	wrlong	local02, objptr
0295c     0C 00 00 FF 
02960     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02964     0B 73 02 F6 | 	mov	local16, ptr__hng030rm_spin2_dat__
02968                 | '   palette_ptr:=@twocolors
02968     C0 0E 86 F1 | 	sub	objptr, #192
0296c     07 73 62 FC | 	wrlong	local16, objptr
02970     18 0E 86 F1 | 	sub	objptr, #24
02974     0C 00 00 FF 
02978     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
0297c                 | LR__0060
0297c                 | ' 
0297c                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
0297c     2A 57 02 F6 | 	mov	local02, local01
02980     01 00 00 FF 
02984     30 56 06 F5 | 	and	local02, ##560
02988     01 00 00 FF 
0298c     20 56 0E F2 | 	cmp	local02, ##544 wz
02990     30 00 90 5D |  if_ne	jmp	#LR__0061
02994                 | '   putpixel:=p4
02994     E4 0E 06 F1 | 	add	objptr, #228
02998     07 57 02 FB | 	rdlong	local02, objptr
0299c     0C 0E 86 F1 | 	sub	objptr, #12
029a0     07 57 62 FC | 	wrlong	local02, objptr
029a4     0C 00 00 FF 
029a8     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
029ac     0B 75 02 F6 | 	mov	local17, ptr__hng030rm_spin2_dat__
029b0                 | '   palette_ptr:=@vga16
029b0     C0 0E 86 F1 | 	sub	objptr, #192
029b4     07 75 62 FC | 	wrlong	local17, objptr
029b8     18 0E 86 F1 | 	sub	objptr, #24
029bc     0C 00 00 FF 
029c0     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
029c4                 | LR__0061
029c4                 | ' 
029c4                 | ' repeat i from 0 to 4
029c4     00 76 06 F6 | 	mov	local18, #0
029c8     78 D6 9F FE | 	loc	pa,	#(@LR__0063-@LR__0062)
029cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
029d0                 | LR__0062
029d0     3B 79 02 F6 | 	mov	local19, local18
029d4     02 78 66 F0 | 	shl	local19, #2
029d8     50 0E 06 F1 | 	add	objptr, #80
029dc     07 79 02 F1 | 	add	local19, objptr
029e0     2C 0E 86 F1 | 	sub	objptr, #44
029e4     07 7B 02 FB | 	rdlong	local20, objptr
029e8     24 0E 86 F1 | 	sub	objptr, #36
029ec     11 7A 66 F0 | 	shl	local20, #17
029f0     3C 7D 02 FB | 	rdlong	local21, local19
029f4     3D 7D 02 F1 | 	add	local21, local20
029f8     3E 7F 02 F6 | 	mov	local22, local21
029fc     80 40 38 FF 
02a00     00 7E 06 F1 | 	add	local22, ##1887502336
02a04                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02a04     3C 7F 62 FC | 	wrlong	local22, local19
02a08     01 76 06 F1 | 	add	local18, #1
02a0c     05 76 5E F2 | 	cmps	local18, #5 wcz
02a10     BC FF 9F CD |  if_b	jmp	#LR__0062
02a14                 | LR__0063
02a14     24 0E 06 F1 | 	add	objptr, #36
02a18     07 81 02 FB | 	rdlong	local23, objptr
02a1c     11 80 66 F0 | 	shl	local23, #17
02a20     40 0E 06 F1 | 	add	objptr, #64
02a24     07 83 02 FB | 	rdlong	local24, objptr
02a28     40 83 02 F1 | 	add	local24, local23
02a2c                 | ' timings[5]:=timings[5]+hdmibase<<17
02a2c     07 83 62 FC | 	wrlong	local24, objptr
02a30                 | ' clkfreq:=timings[13]
02a30     20 0E 06 F1 | 	add	objptr, #32
02a34     07 57 02 FB | 	rdlong	local02, objptr
02a38     14 56 66 FC | 	wrlong	local02, #20
02a3c                 | ' hubset(timings[14])
02a3c     04 0E 06 F1 | 	add	objptr, #4
02a40     07 4B 02 FB | 	rdlong	arg01, objptr
02a44     88 0E 86 F1 | 	sub	objptr, #136
02a48     00 4A 62 FD | 	hubset	arg01
02a4c                 | ' waitms(1)
02a4c     01 4A 06 F6 | 	mov	arg01, #1
02a50     54 0F B0 FD | 	call	#__system___waitms
02a54     2A 85 02 F6 | 	mov	local25, local01
02a58     03 84 06 F5 | 	and	local25, #3
02a5c     42 87 C2 F9 | 	decod	local26, local25
02a60                 | ' 
02a60                 | ' 
02a60                 | ' xzoom:=1<<(mode & 3)
02a60     CC 0E 06 F1 | 	add	objptr, #204
02a64     07 87 62 FC | 	wrlong	local26, objptr
02a68                 | ' 
02a68                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02a68     43 63 02 F6 | 	mov	local08, local26
02a6c     CC 0E 86 F1 | 	sub	objptr, #204
02a70     08 62 0E F2 | 	cmp	local08, #8 wz
02a74     24 00 90 5D |  if_ne	jmp	#LR__0064
02a78     2A 65 02 F6 | 	mov	local09, local01
02a7c     04 64 46 F0 | 	shr	local09, #4
02a80     03 64 06 F5 | 	and	local09, #3
02a84     03 64 0E F2 | 	cmp	local09, #3 wz
02a88     10 00 90 AD |  if_e	jmp	#LR__0064
02a8c                 | '   xzoom:=4
02a8c     04 56 06 F6 | 	mov	local02, #4
02a90     CC 0E 06 F1 | 	add	objptr, #204
02a94     07 09 68 FC | 	wrlong	#4, objptr
02a98     CC 0E 86 F1 | 	sub	objptr, #204
02a9c                 | LR__0064
02a9c     2A 89 02 F6 | 	mov	local27, local01
02aa0     02 88 46 F0 | 	shr	local27, #2
02aa4     03 88 06 F5 | 	and	local27, #3
02aa8     44 8B C2 F9 | 	decod	local28, local27
02aac                 | ' 
02aac                 | ' yzoom:=1<<((mode>>2) & 3)
02aac     D0 0E 06 F1 | 	add	objptr, #208
02ab0     07 8B 62 FC | 	wrlong	local28, objptr
02ab4     04 0E 86 F1 | 	sub	objptr, #4
02ab8     07 63 02 FB | 	rdlong	local08, objptr
02abc     04 0E 06 F1 | 	add	objptr, #4
02ac0     07 5B 02 FB | 	rdlong	local04, objptr
02ac4     2D 63 02 FD | 	qmul	local08, local04
02ac8     18 8C 62 FD | 	getqx	local29
02acc                 | ' azoom:=xzoom*yzoom
02acc     04 0E 06 F1 | 	add	objptr, #4
02ad0     07 8D 62 FC | 	wrlong	local29, objptr
02ad4                 | ' 
02ad4                 | ' cpl:=timings[11]
02ad4     58 0E 86 F1 | 	sub	objptr, #88
02ad8     07 57 02 FB | 	rdlong	local02, objptr
02adc     14 0E 06 F1 | 	add	objptr, #20
02ae0     07 57 62 FC | 	wrlong	local02, objptr
02ae4     90 0E 86 F1 | 	sub	objptr, #144
02ae8                 | ' if (mode<512)
02ae8     01 00 00 FF 
02aec     00 54 5E F2 | 	cmps	local01, ##512 wcz
02af0     60 00 90 3D |  if_ae	jmp	#LR__0065
02af4     80 0E 06 F1 | 	add	objptr, #128
02af8     07 09 03 FB | 	rdlong	muldiva_, objptr
02afc     04 08 47 F0 | 	shr	muldiva_, #4
02b00     50 0E 06 F1 | 	add	objptr, #80
02b04     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b08     D0 0E 86 F1 | 	sub	objptr, #208
02b0c     CC 00 A0 FD | 	call	#unsdivide_
02b10                 | '   lines:=(timings[12]>>4)+/yzoom
02b10     94 0E 06 F1 | 	add	objptr, #148
02b14     07 0B 63 FC | 	wrlong	muldivb_, objptr
02b18                 | '   if ((timings[12]>>4)+//yzoom) <>0
02b18     14 0E 86 F1 | 	sub	objptr, #20
02b1c     07 09 03 FB | 	rdlong	muldiva_, objptr
02b20     04 08 47 F0 | 	shr	muldiva_, #4
02b24     50 0E 06 F1 | 	add	objptr, #80
02b28     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b2c     D0 0E 86 F1 | 	sub	objptr, #208
02b30     CC 00 A0 FD | 	call	#unsdivide_
02b34     00 08 0F F2 | 	cmp	muldiva_, #0 wz
02b38     AC 00 90 AD |  if_e	jmp	#LR__0068
02b3c                 | '     lines +=1
02b3c     94 0E 06 F1 | 	add	objptr, #148
02b40     07 57 02 FB | 	rdlong	local02, objptr
02b44     01 56 06 F1 | 	add	local02, #1
02b48     07 57 62 FC | 	wrlong	local02, objptr
02b4c     94 0E 86 F1 | 	sub	objptr, #148
02b50                 | ' 
02b50                 | ' else
02b50     94 00 90 FD | 	jmp	#LR__0068
02b54                 | LR__0065
02b54     80 0E 06 F1 | 	add	objptr, #128
02b58     07 09 03 FB | 	rdlong	muldiva_, objptr
02b5c     50 0E 06 F1 | 	add	objptr, #80
02b60     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b64     D0 0E 86 F1 | 	sub	objptr, #208
02b68     D0 00 A0 FD | 	call	#divide_
02b6c                 | '   lines:=timings[12]/yzoom
02b6c     94 0E 06 F1 | 	add	objptr, #148
02b70     07 0B 63 FC | 	wrlong	muldivb_, objptr
02b74                 | '   if cpl//xzoom==0
02b74     04 0E 86 F1 | 	sub	objptr, #4
02b78     07 09 03 FB | 	rdlong	muldiva_, objptr
02b7c     3C 0E 06 F1 | 	add	objptr, #60
02b80     07 0B 03 FB | 	rdlong	muldivb_, objptr
02b84     CC 0E 86 F1 | 	sub	objptr, #204
02b88     D0 00 A0 FD | 	call	#divide_
02b8c     00 08 0F F2 | 	cmp	muldiva_, #0 wz
02b90     28 00 90 5D |  if_ne	jmp	#LR__0066
02b94                 | '     cpl:=cpl/xzoom
02b94     90 0E 06 F1 | 	add	objptr, #144
02b98     07 09 03 FB | 	rdlong	muldiva_, objptr
02b9c     3C 0E 06 F1 | 	add	objptr, #60
02ba0     07 0B 03 FB | 	rdlong	muldivb_, objptr
02ba4     CC 0E 86 F1 | 	sub	objptr, #204
02ba8     D0 00 A0 FD | 	call	#divide_
02bac     90 0E 06 F1 | 	add	objptr, #144
02bb0     07 0B 63 FC | 	wrlong	muldivb_, objptr
02bb4     90 0E 86 F1 | 	sub	objptr, #144
02bb8                 | '   else
02bb8     2C 00 90 FD | 	jmp	#LR__0067
02bbc                 | LR__0066
02bbc     90 0E 06 F1 | 	add	objptr, #144
02bc0     07 09 03 FB | 	rdlong	muldiva_, objptr
02bc4     3C 0E 06 F1 | 	add	objptr, #60
02bc8     07 0B 03 FB | 	rdlong	muldivb_, objptr
02bcc     CC 0E 86 F1 | 	sub	objptr, #204
02bd0     D0 00 A0 FD | 	call	#divide_
02bd4     85 8F 02 F6 | 	mov	local30, muldivb_
02bd8     01 8E 06 F1 | 	add	local30, #1
02bdc                 | '     cpl:=cpl/xzoom+1
02bdc     90 0E 06 F1 | 	add	objptr, #144
02be0     07 8F 62 FC | 	wrlong	local30, objptr
02be4     90 0E 86 F1 | 	sub	objptr, #144
02be8                 | LR__0067
02be8                 | LR__0068
02be8     90 0E 06 F1 | 	add	objptr, #144
02bec     07 63 02 FB | 	rdlong	local08, objptr
02bf0     04 0E 06 F1 | 	add	objptr, #4
02bf4     07 5B 02 FB | 	rdlong	local04, objptr
02bf8     2D 63 02 FD | 	qmul	local08, local04
02bfc     18 90 62 FD | 	getqx	local31
02c00                 | ' 
02c00                 | ' buflen:=(cpl*lines)
02c00     64 0E 86 F1 | 	sub	objptr, #100
02c04     07 91 62 FC | 	wrlong	local31, objptr
02c08     30 0E 86 F1 | 	sub	objptr, #48
02c0c     02 90 66 F0 | 	shl	local31, #2
02c10     13 92 C6 F9 | 	decod	local32, #19
02c14     48 93 82 F1 | 	sub	local32, local31
02c18                 | ' buf_ptr:=$80000-4*buflen
02c18     07 93 62 FC | 	wrlong	local32, objptr
02c1c     50 0E 06 F1 | 	add	objptr, #80
02c20     07 95 02 F6 | 	mov	local33, objptr
02c24                 | ' mode_ptr:=@timings
02c24     3C 0E 86 F1 | 	sub	objptr, #60
02c28     07 95 62 FC | 	wrlong	local33, objptr
02c2c                 | ' graphmode:=mode
02c2c     B0 0E 06 F1 | 	add	objptr, #176
02c30     07 55 62 FC | 	wrlong	local01, objptr
02c34     C4 0E 86 F1 | 	sub	objptr, #196
02c38                 | ' makedl(mode)
02c38     2A 4B 02 F6 | 	mov	arg01, local01
02c3c                 | ' 
02c3c                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02c3c                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02c3c                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02c3c                 | ' 
02c3c                 | ' '   0 - display a up/down border line
02c3c                 | ' 
02c3c                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02c3c                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02c3c                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02c3c                 | ' '    nnnn - font line to display, 0..15
02c3c                 | ' '    llllll - character line, determines the cursor Y position
02c3c                 | ' 
02c3c                 | ' 
02c3c                 | ' if (mode &256==0)
02c3c     00 4B CE F7 | 	test	arg01, #256 wz
02c40     1C 00 90 5D |  if_ne	jmp	#LR__0069
02c44     07 97 02 FB | 	rdlong	local34, objptr
02c48     04 00 00 FF 
02c4c     00 97 86 F1 | 	sub	local34, ##2304
02c50                 | '   dl_ptr:=buf_ptr-4*576
02c50     1C 0E 06 F1 | 	add	objptr, #28
02c54     07 97 62 FC | 	wrlong	local34, objptr
02c58     1C 0E 86 F1 | 	sub	objptr, #28
02c5c                 | ' else
02c5c     18 00 90 FD | 	jmp	#LR__0070
02c60                 | LR__0069
02c60     07 99 02 FB | 	rdlong	local35, objptr
02c64     03 00 00 FF 
02c68     C0 99 86 F1 | 	sub	local35, ##1984
02c6c                 | '   dl_ptr:=buf_ptr-4*496
02c6c     1C 0E 06 F1 | 	add	objptr, #28
02c70     07 99 62 FC | 	wrlong	local35, objptr
02c74     1C 0E 86 F1 | 	sub	objptr, #28
02c78                 | LR__0070
02c78     25 9B 02 F6 | 	mov	local36, arg01
02c7c     02 9A 46 F0 | 	shr	local36, #2
02c80     03 9A 06 F5 | 	and	local36, #3
02c84                 | '  ' dl_ptr:=buf_ptr-4*540
02c84                 | ' 
02c84                 | ' vzoom:=((mode>>2) & 3)
02c84                 | ' 
02c84                 | ' 
02c84                 | ' if mode<512 '' text modes
02c84     01 00 00 FF 
02c88     00 4A 5E F2 | 	cmps	arg01, ##512 wcz
02c8c     E4 01 90 3D |  if_ae	jmp	#LR__0078
02c90                 | ' 
02c90                 | '   if timings[6]>0 'borders
02c90     68 0E 06 F1 | 	add	objptr, #104
02c94     07 9D 02 FB | 	rdlong	local37, objptr
02c98     68 0E 86 F1 | 	sub	objptr, #104
02c9c     00 9C 5E F2 | 	cmps	local37, #0 wcz
02ca0     D4 00 90 ED |  if_be	jmp	#LR__0075
02ca4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02ca4     00 9E 06 F6 | 	mov	local38, #0
02ca8     68 0E 06 F1 | 	add	objptr, #104
02cac     07 A1 02 FB | 	rdlong	local39, objptr
02cb0     68 0E 86 F1 | 	sub	objptr, #104
02cb4     01 A0 86 F1 | 	sub	local39, #1
02cb8     00 A0 5E F2 | 	cmps	local39, #0 wcz
02cbc     01 A2 06 16 |  if_a	mov	local40, #1
02cc0     01 A2 66 E6 |  if_be	neg	local40, #1
02cc4     51 A5 02 F6 | 	mov	local41, local40
02cc8     51 A1 02 F1 | 	add	local39, local40
02ccc     58 D3 9F FE | 	loc	pa,	#(@LR__0072-@LR__0071)
02cd0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02cd4                 | LR__0071
02cd4     4F A7 02 F6 | 	mov	local42, local38
02cd8     02 A6 66 F0 | 	shl	local42, #2
02cdc     1C 0E 06 F1 | 	add	objptr, #28
02ce0     07 A9 02 FB | 	rdlong	local43, objptr
02ce4     1C 0E 86 F1 | 	sub	objptr, #28
02ce8     53 A9 02 F1 | 	add	local43, local42
02cec                 | '       long[dl_ptr+4*i]:=$0
02cec     54 01 68 FC | 	wrlong	#0, local43
02cf0     52 9F 02 F1 | 	add	local38, local41
02cf4     50 9F 0A F2 | 	cmp	local38, local39 wz
02cf8     D8 FF 9F 5D |  if_ne	jmp	#LR__0071
02cfc                 | LR__0072
02cfc                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02cfc     68 0E 06 F1 | 	add	objptr, #104
02d00     07 9F 02 FB | 	rdlong	local38, objptr
02d04     18 0E 06 F1 | 	add	objptr, #24
02d08     07 A3 02 FB | 	rdlong	local40, objptr
02d0c     51 9F 02 F1 | 	add	local38, local40
02d10     0C 0E 06 F1 | 	add	objptr, #12
02d14     07 AB 02 FB | 	rdlong	local44, objptr
02d18     01 AA 86 F1 | 	sub	local44, #1
02d1c     24 0E 86 F1 | 	sub	objptr, #36
02d20     07 AD 02 FB | 	rdlong	local45, objptr
02d24     18 0E 06 F1 | 	add	objptr, #24
02d28     07 AF 02 FB | 	rdlong	local46, objptr
02d2c     80 0E 86 F1 | 	sub	objptr, #128
02d30     57 AD 02 F1 | 	add	local45, local46
02d34     56 AB 5A F2 | 	cmps	local44, local45 wcz
02d38     01 B0 06 16 |  if_a	mov	local47, #1
02d3c     01 B0 66 E6 |  if_be	neg	local47, #1
02d40     58 B3 02 F6 | 	mov	local48, local47
02d44     58 AB 02 F1 | 	add	local44, local47
02d48     DC D2 9F FE | 	loc	pa,	#(@LR__0074-@LR__0073)
02d4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d50                 | LR__0073
02d50     4F B5 02 F6 | 	mov	local49, local38
02d54     02 B4 66 F0 | 	shl	local49, #2
02d58     1C 0E 06 F1 | 	add	objptr, #28
02d5c     07 B7 02 FB | 	rdlong	local50, objptr
02d60     1C 0E 86 F1 | 	sub	objptr, #28
02d64     5A B7 02 F1 | 	add	local50, local49
02d68                 | '       long[dl_ptr+4*i]:=$0
02d68     5B 01 68 FC | 	wrlong	#0, local50
02d6c     59 9F 02 F1 | 	add	local38, local48
02d70     55 9F 0A F2 | 	cmp	local38, local44 wz
02d74     D8 FF 9F 5D |  if_ne	jmp	#LR__0073
02d78                 | LR__0074
02d78                 | LR__0075
02d78     10 B8 06 F6 | 	mov	local51, #16
02d7c     4D B9 62 F0 | 	shl	local51, local36
02d80                 | '   lpc:=16<<vzoom
02d80                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02d80     68 0E 06 F1 | 	add	objptr, #104
02d84     07 9F 02 FB | 	rdlong	local38, objptr
02d88     4F BB 02 F6 | 	mov	local52, local38
02d8c     18 0E 06 F1 | 	add	objptr, #24
02d90     07 BD 02 FB | 	rdlong	local53, objptr
02d94     5E BB 02 F1 | 	add	local52, local53
02d98     01 BA 86 F1 | 	sub	local52, #1
02d9c     18 0E 86 F1 | 	sub	objptr, #24
02da0     07 B1 02 FB | 	rdlong	local47, objptr
02da4     68 0E 86 F1 | 	sub	objptr, #104
02da8     58 BB 5A F2 | 	cmps	local52, local47 wcz
02dac     01 BE 06 16 |  if_a	mov	local54, #1
02db0     01 BE 66 E6 |  if_be	neg	local54, #1
02db4     5F C1 02 F6 | 	mov	local55, local54
02db8     5F BB 02 F1 | 	add	local52, local54
02dbc     F0 D2 9F FE | 	loc	pa,	#(@LR__0077-@LR__0076)
02dc0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dc4                 | LR__0076
02dc4     4F 09 03 F6 | 	mov	muldiva_, local38
02dc8     68 0E 06 F1 | 	add	objptr, #104
02dcc     07 C3 02 FB | 	rdlong	local56, objptr
02dd0     68 0E 86 F1 | 	sub	objptr, #104
02dd4     61 09 83 F1 | 	sub	muldiva_, local56
02dd8     5C 0B 03 F6 | 	mov	muldivb_, local51
02ddc     CC 00 A0 FD | 	call	#unsdivide_
02de0     4D 09 43 F0 | 	shr	muldiva_, local36
02de4                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02de4     84 C5 02 F6 | 	mov	local57, muldiva_
02de8     4F 09 03 F6 | 	mov	muldiva_, local38
02dec     68 0E 06 F1 | 	add	objptr, #104
02df0     07 C3 02 FB | 	rdlong	local56, objptr
02df4     68 0E 86 F1 | 	sub	objptr, #104
02df8     61 09 83 F1 | 	sub	muldiva_, local56
02dfc     5C 0B 03 F6 | 	mov	muldivb_, local51
02e00     CC 00 A0 FD | 	call	#unsdivide_
02e04     85 C7 02 F6 | 	mov	local58, muldivb_
02e08                 | '     charline:=(i-timings[6])+/lpc
02e08     90 0E 06 F1 | 	add	objptr, #144
02e0c     07 C3 02 FB | 	rdlong	local56, objptr
02e10     90 0E 86 F1 | 	sub	objptr, #144
02e14     63 C3 02 FD | 	qmul	local56, local58
02e18     18 C8 62 FD | 	getqx	local59
02e1c     02 C8 66 F0 | 	shl	local59, #2
02e20     07 CB 02 FB | 	rdlong	local60, objptr
02e24     64 CB 02 F1 | 	add	local60, local59
02e28     25 CD 02 F6 | 	mov	local61, arg01
02e2c     03 CC 06 F5 | 	and	local61, #3
02e30     66 CB 02 F1 | 	add	local60, local61
02e34                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02e34     0C CA 66 F0 | 	shl	local60, #12
02e38     08 C4 66 F0 | 	shl	local57, #8
02e3c     62 CB 02 F1 | 	add	local60, local57
02e40     02 C6 66 F0 | 	shl	local58, #2
02e44     63 CB 02 F1 | 	add	local60, local58
02e48     01 CA 06 F1 | 	add	local60, #1
02e4c     4F CF 02 F6 | 	mov	local62, local38
02e50     02 CE 66 F0 | 	shl	local62, #2
02e54     1C 0E 06 F1 | 	add	objptr, #28
02e58     07 D1 02 FB | 	rdlong	local63, objptr
02e5c     1C 0E 86 F1 | 	sub	objptr, #28
02e60     67 D1 02 F1 | 	add	local63, local62
02e64                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
02e64     68 CB 62 FC | 	wrlong	local60, local63
02e68     60 9F 02 F1 | 	add	local38, local55
02e6c     5D 9F 0A F2 | 	cmp	local38, local52 wz
02e70     50 FF 9F 5D |  if_ne	jmp	#LR__0076
02e74                 | LR__0077
02e74                 | LR__0078
02e74                 | ' 
02e74                 | ' 
02e74                 | ' 
02e74                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
02e74     01 00 00 FF 
02e78     00 4A 5E F2 | 	cmps	arg01, ##512 wcz
02e7c     AC 01 90 CD |  if_b	jmp	#LR__0086
02e80                 | ' 
02e80                 | '   if timings[6]>0 'borders
02e80     68 0E 06 F1 | 	add	objptr, #104
02e84     07 9D 02 FB | 	rdlong	local37, objptr
02e88     68 0E 86 F1 | 	sub	objptr, #104
02e8c     00 9C 5E F2 | 	cmps	local37, #0 wcz
02e90     D4 00 90 ED |  if_be	jmp	#LR__0083
02e94                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02e94     00 9E 06 F6 | 	mov	local38, #0
02e98     68 0E 06 F1 | 	add	objptr, #104
02e9c     07 D3 02 FB | 	rdlong	local64, objptr
02ea0     68 0E 86 F1 | 	sub	objptr, #104
02ea4     01 D2 86 F1 | 	sub	local64, #1
02ea8     00 D2 5E F2 | 	cmps	local64, #0 wcz
02eac     01 A2 06 16 |  if_a	mov	local40, #1
02eb0     01 A2 66 E6 |  if_be	neg	local40, #1
02eb4     51 D5 02 F6 | 	mov	local65, local40
02eb8     51 D3 02 F1 | 	add	local64, local40
02ebc     68 D1 9F FE | 	loc	pa,	#(@LR__0080-@LR__0079)
02ec0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ec4                 | LR__0079
02ec4     4F D7 02 F6 | 	mov	local66, local38
02ec8     02 D6 66 F0 | 	shl	local66, #2
02ecc     1C 0E 06 F1 | 	add	objptr, #28
02ed0     07 D9 02 FB | 	rdlong	local67, objptr
02ed4     1C 0E 86 F1 | 	sub	objptr, #28
02ed8     6B D9 02 F1 | 	add	local67, local66
02edc                 | '       long[dl_ptr+4*i]:=$0
02edc     6C 01 68 FC | 	wrlong	#0, local67
02ee0     6A 9F 02 F1 | 	add	local38, local65
02ee4     69 9F 0A F2 | 	cmp	local38, local64 wz
02ee8     D8 FF 9F 5D |  if_ne	jmp	#LR__0079
02eec                 | LR__0080
02eec                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02eec     68 0E 06 F1 | 	add	objptr, #104
02ef0     07 9F 02 FB | 	rdlong	local38, objptr
02ef4     18 0E 06 F1 | 	add	objptr, #24
02ef8     07 A3 02 FB | 	rdlong	local40, objptr
02efc     51 9F 02 F1 | 	add	local38, local40
02f00     0C 0E 06 F1 | 	add	objptr, #12
02f04     07 DB 02 FB | 	rdlong	local68, objptr
02f08     01 DA 86 F1 | 	sub	local68, #1
02f0c     24 0E 86 F1 | 	sub	objptr, #36
02f10     07 AD 02 FB | 	rdlong	local45, objptr
02f14     18 0E 06 F1 | 	add	objptr, #24
02f18     07 AF 02 FB | 	rdlong	local46, objptr
02f1c     80 0E 86 F1 | 	sub	objptr, #128
02f20     57 AD 02 F1 | 	add	local45, local46
02f24     56 DB 5A F2 | 	cmps	local68, local45 wcz
02f28     01 B0 06 16 |  if_a	mov	local47, #1
02f2c     01 B0 66 E6 |  if_be	neg	local47, #1
02f30     58 DD 02 F6 | 	mov	local69, local47
02f34     58 DB 02 F1 | 	add	local68, local47
02f38     EC D0 9F FE | 	loc	pa,	#(@LR__0082-@LR__0081)
02f3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f40                 | LR__0081
02f40     4F DF 02 F6 | 	mov	local70, local38
02f44     02 DE 66 F0 | 	shl	local70, #2
02f48     1C 0E 06 F1 | 	add	objptr, #28
02f4c     07 E1 02 FB | 	rdlong	local71, objptr
02f50     1C 0E 86 F1 | 	sub	objptr, #28
02f54     6F E1 02 F1 | 	add	local71, local70
02f58                 | '       long[dl_ptr+4*i]:=$0
02f58     70 01 68 FC | 	wrlong	#0, local71
02f5c     6E 9F 02 F1 | 	add	local38, local69
02f60     6D 9F 0A F2 | 	cmp	local38, local68 wz
02f64     D8 FF 9F 5D |  if_ne	jmp	#LR__0081
02f68                 | LR__0082
02f68                 | LR__0083
02f68                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02f68     68 0E 06 F1 | 	add	objptr, #104
02f6c     07 9F 02 FB | 	rdlong	local38, objptr
02f70     4F E3 02 F6 | 	mov	local72, local38
02f74     18 0E 06 F1 | 	add	objptr, #24
02f78     07 BD 02 FB | 	rdlong	local53, objptr
02f7c     5E E3 02 F1 | 	add	local72, local53
02f80     01 E2 86 F1 | 	sub	local72, #1
02f84     18 0E 86 F1 | 	sub	objptr, #24
02f88     07 B1 02 FB | 	rdlong	local47, objptr
02f8c     68 0E 86 F1 | 	sub	objptr, #104
02f90     58 E3 5A F2 | 	cmps	local72, local47 wcz
02f94     01 BE 06 16 |  if_a	mov	local54, #1
02f98     01 BE 66 E6 |  if_be	neg	local54, #1
02f9c     5F E5 02 F6 | 	mov	local73, local54
02fa0     5F E3 02 F1 | 	add	local72, local54
02fa4     D8 D0 9F FE | 	loc	pa,	#(@LR__0085-@LR__0084)
02fa8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02fac                 | LR__0084
02fac     4F E7 02 F6 | 	mov	local74, local38
02fb0     68 0E 06 F1 | 	add	objptr, #104
02fb4     07 C3 02 FB | 	rdlong	local56, objptr
02fb8     61 E7 82 F1 | 	sub	local74, local56
02fbc     4D E7 42 F0 | 	shr	local74, local36
02fc0     28 0E 06 F1 | 	add	objptr, #40
02fc4     07 C3 02 FB | 	rdlong	local56, objptr
02fc8     90 0E 86 F1 | 	sub	objptr, #144
02fcc     73 C3 02 FD | 	qmul	local56, local74
02fd0     18 E8 62 FD | 	getqx	local75
02fd4     02 E8 66 F0 | 	shl	local75, #2
02fd8     07 EB 02 FB | 	rdlong	local76, objptr
02fdc     74 EB 02 F1 | 	add	local76, local75
02fe0     25 ED 02 F6 | 	mov	local77, arg01
02fe4     03 EC 06 F5 | 	and	local77, #3
02fe8     76 EB 02 F1 | 	add	local76, local77
02fec                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
02fec     0C EA 66 F0 | 	shl	local76, #12
02ff0     02 EA 06 F1 | 	add	local76, #2
02ff4     25 EF 02 F6 | 	mov	local78, arg01
02ff8     30 EE 06 F5 | 	and	local78, #48
02ffc     02 EE 46 F0 | 	shr	local78, #2
03000     77 EB 02 F1 | 	add	local76, local78
03004     4F F1 02 F6 | 	mov	local79, local38
03008     02 F0 66 F0 | 	shl	local79, #2
0300c     1C 0E 06 F1 | 	add	objptr, #28
03010     07 F3 02 FB | 	rdlong	local80, objptr
03014     1C 0E 86 F1 | 	sub	objptr, #28
03018     78 F3 02 F1 | 	add	local80, local79
0301c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
0301c     79 EB 62 FC | 	wrlong	local76, local80
03020     72 9F 02 F1 | 	add	local38, local73
03024     71 9F 0A F2 | 	cmp	local38, local72 wz
03028     80 FF 9F 5D |  if_ne	jmp	#LR__0084
0302c                 | LR__0085
0302c                 | LR__0086
0302c                 | LR__0087
0302c     AF F0 03 F6 | 	mov	ptra, fp
03030     BF 00 A0 FD | 	call	#popregs_
03034                 | _hng030rm_spin2_setmode_ret
03034     2D 00 64 FD | 	ret
03038                 | 
03038                 | ' 
03038                 | ' pub serialcog()| rr, mrr, b, mb, midireport, kbmreport
03038                 | _retrocog_spin2_serialcog
03038     19 5A 05 F6 | 	mov	COUNT_, #25
0303c     B0 00 A0 FD | 	call	#pushregs_
03040                 | ' 
03040                 | ' 'start serial and midi
03040                 | ' 
03040                 | ' serial_start(rxpin, txpin, baudrate)
03040     20 4A 06 F6 | 	mov	arg01, #32
03044     21 4C 06 F6 | 	mov	arg02, #33
03048     A6 0E 00 FF 
0304c     00 4E 06 F6 | 	mov	arg03, ##1920000
03050     AC 04 B0 FD | 	call	#_retrocog_spin2_serial_start
03054                 | ' serial_start(midiin,midiout,mbaudrate)
03054     3D 00 00 FF 
03058     12 54 06 F6 | 	mov	local01, ##31250
0305c     1D 4A 06 F6 | 	mov	arg01, #29
03060     1E 4C 06 F6 | 	mov	arg02, #30
03064     3D 00 00 FF 
03068     12 4E 06 F6 | 	mov	arg03, ##31250
0306c     90 04 B0 FD | 	call	#_retrocog_spin2_serial_start
03070                 | ' 
03070                 | ' mb:=(-1)
03070     01 56 66 F6 | 	neg	local02, #1
03074                 | ' b:=(-1)
03074     01 58 66 F6 | 	neg	local03, #1
03078                 | ' 
03078                 | ' mousefront:=0
03078     00 5A 06 F6 | 	mov	local04, #0
0307c     08 0E 06 F1 | 	add	objptr, #8
03080     07 01 68 FC | 	wrlong	#0, objptr
03084                 | ' mousetail:=0
03084     04 0E 06 F1 | 	add	objptr, #4
03088     07 01 68 FC | 	wrlong	#0, objptr
0308c     0C 0E 86 F1 | 	sub	objptr, #12
03090                 | ' kbdfront:=0
03090     07 01 68 FC | 	wrlong	#0, objptr
03094                 | ' kbdtail:=0
03094     04 0E 06 F1 | 	add	objptr, #4
03098     07 01 68 FC | 	wrlong	#0, objptr
0309c                 | ' midifront:=0
0309c     0C 0E 06 F1 | 	add	objptr, #12
030a0     07 01 68 FC | 	wrlong	#0, objptr
030a4                 | ' miditail:=0
030a4     04 0E 06 F1 | 	add	objptr, #4
030a8     07 01 68 FC | 	wrlong	#0, objptr
030ac                 | ' long[$30]:=0
030ac     30 00 6C FC | 	wrlong	#0, #48
030b0                 | ' long[$34]:=0
030b0     34 00 6C FC | 	wrlong	#0, #52
030b4     14 0E 86 F1 | 	sub	objptr, #20
030b8                 | ' long[$38]:=0
030b8     38 00 6C FC | 	wrlong	#0, #56
030bc                 | ' 
030bc                 | ' repeat
030bc                 | LR__0088
030bc                 | ' 
030bc                 | '   repeat 
030bc                 | LR__0089
030bc                 | '     rr:=rxcheck(rxpin)
030bc     20 4A 06 F6 | 	mov	arg01, #32
030c0     B8 04 B0 FD | 	call	#_retrocog_spin2_rxcheck
030c4     12 5D 02 F6 | 	mov	local05, result1
030c8                 | '     mrr:=rxcheck(midiin)
030c8     1D 5A 06 F6 | 	mov	local04, #29
030cc     1D 4A 06 F6 | 	mov	arg01, #29
030d0     A8 04 B0 FD | 	call	#_retrocog_spin2_rxcheck
030d4     12 5F 02 F6 | 	mov	local06, result1
030d8     2F 61 02 F6 | 	mov	local07, local06
030dc     00 5C 5E F2 | 	cmps	local05, #0 wcz
030e0     08 00 90 3D |  if_ae	jmp	#LR__0090
030e4     00 60 5E F2 | 	cmps	local07, #0 wcz
030e8     D0 FF 9F CD |  if_b	jmp	#LR__0089
030ec                 | LR__0090
030ec                 | ' 
030ec                 | '   until rr>=0 || mrr>=0  
030ec                 | ' 
030ec                 | '   
030ec                 | ' ' midi. Must be >= $80 for a command
030ec                 | ' '$80-$8F - 3 bytes note off. note, velocity
030ec                 | ' '$90-$9F - 3 bytes note on, note, velocity
030ec                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
030ec                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
030ec                 | ' '$C0-$CF - 2 bytes program change
030ec                 | ' '$D0-$DF - 2 bytes mono aftertouch
030ec                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
030ec                 | ' '$F0-$FF - 1 byte
030ec                 | '   
030ec                 | ' 
030ec                 | '     
030ec                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
030ec     80 60 5E F2 | 	cmps	local07, #128 wcz
030f0     08 00 90 CD |  if_b	jmp	#LR__0091
030f4     BF 60 5E F2 | 	cmps	local07, #191 wcz
030f8     10 00 90 ED |  if_be	jmp	#LR__0092
030fc                 | LR__0091
030fc     E0 60 5E F2 | 	cmps	local07, #224 wcz
03100     1C 00 90 CD |  if_b	jmp	#LR__0093
03104     EF 60 5E F2 | 	cmps	local07, #239 wcz
03108     14 00 90 1D |  if_a	jmp	#LR__0093
0310c                 | LR__0092
0310c                 | '     mb:=2
0310c     02 56 06 F6 | 	mov	local02, #2
03110     30 5B 02 F6 | 	mov	local04, local07
03114     18 5A 66 F0 | 	shl	local04, #24
03118     2D 63 02 F6 | 	mov	local08, local04
0311c                 | '     midireport:=mrr<<24
0311c     31 65 02 F6 | 	mov	local09, local08
03120                 | LR__0093
03120                 | ' 
03120                 | '   if (mrr>=$C0) && (mrr<=$DF)
03120     C0 60 5E F2 | 	cmps	local07, #192 wcz
03124     1C 00 90 CD |  if_b	jmp	#LR__0094
03128     DF 60 5E F2 | 	cmps	local07, #223 wcz
0312c     14 00 90 1D |  if_a	jmp	#LR__0094
03130                 | '     mb:=1
03130     01 56 06 F6 | 	mov	local02, #1
03134     30 5B 02 F6 | 	mov	local04, local07
03138     18 5A 66 F0 | 	shl	local04, #24
0313c     2D 67 02 F6 | 	mov	local10, local04
03140                 | '     midireport:=mrr<<24
03140     33 65 02 F6 | 	mov	local09, local10
03144                 | LR__0094
03144                 | '   
03144                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
03144     F0 60 5E F2 | 	cmps	local07, #240 wcz
03148     10 00 90 CD |  if_b	jmp	#LR__0095
0314c                 | '     mb:=4
0314c     04 56 06 F6 | 	mov	local02, #4
03150     30 69 02 F6 | 	mov	local11, local07
03154     18 68 66 F0 | 	shl	local11, #24
03158                 | '     midireport:=mrr<<24  
03158     34 65 02 F6 | 	mov	local09, local11
0315c                 | LR__0095
0315c                 | '   
0315c                 | '   if (mrr<$80) && (mb>0)
0315c     80 60 5E F2 | 	cmps	local07, #128 wcz
03160     3C 00 90 3D |  if_ae	jmp	#LR__0097
03164     00 56 5E F2 | 	cmps	local02, #0 wcz
03168     34 00 90 ED |  if_be	jmp	#LR__0097
0316c                 | '     
0316c                 | '     mb--
0316c     2B 5B 02 F6 | 	mov	local04, local02
03170     2B 5F 02 F6 | 	mov	local06, local02
03174     01 5E 86 F1 | 	sub	local06, #1
03178     2F 57 02 F6 | 	mov	local02, local06
0317c                 | '     if mb<3
0317c     03 56 5E F2 | 	cmps	local02, #3 wcz
03180     1C 00 90 3D |  if_ae	jmp	#LR__0096
03184     2B 6B 02 F6 | 	mov	local12, local02
03188     03 6A 66 F0 | 	shl	local12, #3
0318c     30 6D 02 F6 | 	mov	local13, local07
03190     35 6D 62 F0 | 	shl	local13, local12
03194                 | '       midireport+=mrr<<(mb<<3)
03194     32 5B 02 F6 | 	mov	local04, local09
03198     36 5B 02 F1 | 	add	local04, local13
0319c     2D 65 02 F6 | 	mov	local09, local04
031a0                 | LR__0096
031a0                 | LR__0097
031a0                 | '   
031a0                 | '   if mb==0
031a0     00 56 0E F2 | 	cmp	local02, #0 wz
031a4     84 00 90 5D |  if_ne	jmp	#LR__0099
031a8                 | '     
031a8                 | '     if midifront<>((miditail-1) //32)
031a8     14 0E 06 F1 | 	add	objptr, #20
031ac     07 5F 02 FB | 	rdlong	local06, objptr
031b0     2F 5B 02 F6 | 	mov	local04, local06
031b4     01 5A 86 F1 | 	sub	local04, #1
031b8     2D 55 52 F6 | 	abs	local01, local04 wc
031bc     1F 54 06 F5 | 	and	local01, #31
031c0     2A 55 62 C6 |  if_b	neg	local01, local01
031c4     04 0E 86 F1 | 	sub	objptr, #4
031c8     07 6F 02 FB | 	rdlong	local14, objptr
031cc     10 0E 86 F1 | 	sub	objptr, #16
031d0     37 71 02 F6 | 	mov	local15, local14
031d4     2A 71 0A F2 | 	cmp	local15, local01 wz
031d8     4C 00 90 AD |  if_e	jmp	#LR__0098
031dc     10 0E 06 F1 | 	add	objptr, #16
031e0     07 71 02 FB | 	rdlong	local15, objptr
031e4     02 70 66 F0 | 	shl	local15, #2
031e8     01 00 00 FF 
031ec     88 0E 06 F1 | 	add	objptr, ##648
031f0     07 71 02 F1 | 	add	local15, objptr
031f4     38 73 02 F6 | 	mov	local16, local15
031f8                 | '       midibuf[midifront]:=midireport
031f8     39 65 62 FC | 	wrlong	local09, local16
031fc                 | '       midifront+=1
031fc     01 00 00 FF 
03200     88 0E 86 F1 | 	sub	objptr, ##648
03204     07 55 02 FB | 	rdlong	local01, objptr
03208     01 54 06 F1 | 	add	local01, #1
0320c     07 55 62 FC | 	wrlong	local01, objptr
03210                 | '       midifront:=midifront // 32
03210     2A 5F 02 F6 | 	mov	local06, local01
03214     2F 5B 52 F6 | 	abs	local04, local06 wc
03218     1F 5A 06 F5 | 	and	local04, #31
0321c     2D 5B 62 C6 |  if_b	neg	local04, local04
03220     07 5B 62 FC | 	wrlong	local04, objptr
03224     10 0E 86 F1 | 	sub	objptr, #16
03228                 | LR__0098
03228                 | '     mb:=(-1)
03228     01 56 66 F6 | 	neg	local02, #1
0322c                 | LR__0099
0322c                 | ' 
0322c                 | ' 'Keyboard and mouse
0322c                 | ' 
0322c                 | '   if (rr>=$80) && (rr<>$FF)
0322c     80 5C 5E F2 | 	cmps	local05, #128 wcz
03230     1C 00 90 CD |  if_b	jmp	#LR__0100
03234     FF 5C 0E F2 | 	cmp	local05, #255 wz
03238     14 00 90 AD |  if_e	jmp	#LR__0100
0323c                 | '     b:=3
0323c     03 58 06 F6 | 	mov	local03, #3
03240     2E 5B 02 F6 | 	mov	local04, local05
03244     18 5A 66 F0 | 	shl	local04, #24
03248     2D 75 02 F6 | 	mov	local17, local04
0324c                 | '     kbmreport:=rr<<24
0324c     3A 77 02 F6 | 	mov	local18, local17
03250                 | LR__0100
03250                 | '   
03250                 | '   if (rr<$80) && (b>0)
03250     80 5C 5E F2 | 	cmps	local05, #128 wcz
03254     30 00 90 3D |  if_ae	jmp	#LR__0101
03258     00 58 5E F2 | 	cmps	local03, #0 wcz
0325c     28 00 90 ED |  if_be	jmp	#LR__0101
03260                 | '     b--
03260     2C 5F 02 F6 | 	mov	local06, local03
03264     01 5E 86 F1 | 	sub	local06, #1
03268     2F 59 02 F6 | 	mov	local03, local06
0326c     2C 79 02 F6 | 	mov	local19, local03
03270     03 78 66 F0 | 	shl	local19, #3
03274     2E 7B 02 F6 | 	mov	local20, local05
03278     3C 7B 62 F0 | 	shl	local20, local19
0327c                 | '     kbmreport+=rr<<(b<<3)  
0327c     3B 5B 02 F6 | 	mov	local04, local18
03280     3D 5B 02 F1 | 	add	local04, local20
03284     2D 77 02 F6 | 	mov	local18, local04
03288                 | LR__0101
03288                 | '   
03288                 | '   if (rr==$FF)
03288     FF 5C 0E F2 | 	cmp	local05, #255 wz
0328c                 | '     b:=0   
0328c     00 58 06 A6 |  if_e	mov	local03, #0
03290                 | ' 
03290                 | '   if b==0  
03290     00 58 0E F2 | 	cmp	local03, #0 wz
03294     14 01 90 5D |  if_ne	jmp	#LR__0106
03298                 | '  
03298                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03298     00 00 40 FF 
0329c     00 76 1E F2 | 	cmp	local18, ##-2147483648 wcz
032a0     84 00 90 CD |  if_b	jmp	#LR__0103
032a4     00 80 43 FF 
032a8     00 76 1E F2 | 	cmp	local18, ##-2030043136 wcz
032ac     78 00 90 3D |  if_ae	jmp	#LR__0103
032b0                 | '       if mousefront<>((mousetail-1) //128)
032b0     0C 0E 06 F1 | 	add	objptr, #12
032b4     07 5F 02 FB | 	rdlong	local06, objptr
032b8     2F 5B 02 F6 | 	mov	local04, local06
032bc     01 5A 86 F1 | 	sub	local04, #1
032c0     2D 55 52 F6 | 	abs	local01, local04 wc
032c4     7F 54 06 F5 | 	and	local01, #127
032c8     2A 55 62 C6 |  if_b	neg	local01, local01
032cc     04 0E 86 F1 | 	sub	objptr, #4
032d0     07 6F 02 FB | 	rdlong	local14, objptr
032d4     08 0E 86 F1 | 	sub	objptr, #8
032d8     37 71 02 F6 | 	mov	local15, local14
032dc     2A 71 0A F2 | 	cmp	local15, local01 wz
032e0     44 00 90 AD |  if_e	jmp	#LR__0102
032e4     08 0E 06 F1 | 	add	objptr, #8
032e8     07 71 02 FB | 	rdlong	local15, objptr
032ec     02 70 66 F0 | 	shl	local15, #2
032f0     90 0E 06 F1 | 	add	objptr, #144
032f4     07 71 02 F1 | 	add	local15, objptr
032f8     38 7D 02 F6 | 	mov	local21, local15
032fc                 | '         mousebuf[mousefront]:=kbmreport
032fc     3E 77 62 FC | 	wrlong	local18, local21
03300                 | '         mousefront+=1
03300     90 0E 86 F1 | 	sub	objptr, #144
03304     07 55 02 FB | 	rdlong	local01, objptr
03308     01 54 06 F1 | 	add	local01, #1
0330c     07 55 62 FC | 	wrlong	local01, objptr
03310                 | '         mousefront:=mousefront // 128
03310     2A 5F 02 F6 | 	mov	local06, local01
03314     2F 5B 52 F6 | 	abs	local04, local06 wc
03318     7F 5A 06 F5 | 	and	local04, #127
0331c     2D 5B 62 C6 |  if_b	neg	local04, local04
03320     07 5B 62 FC | 	wrlong	local04, objptr
03324     08 0E 86 F1 | 	sub	objptr, #8
03328                 | LR__0102
03328                 | LR__0103
03328                 | '     b:=(-1)
03328     01 58 66 F6 | 	neg	local03, #1
0332c                 | ' 
0332c                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
0332c     00 80 43 FF 
03330     00 76 1E F2 | 	cmp	local18, ##-2030043136 wcz
03334     70 00 90 CD |  if_b	jmp	#LR__0105
03338     00 00 45 FF 
0333c     00 76 1E F2 | 	cmp	local18, ##-1979711488 wcz
03340     64 00 90 3D |  if_ae	jmp	#LR__0105
03344                 | '       if kbdfront<>((kbdtail-1) //32)
03344     04 0E 06 F1 | 	add	objptr, #4
03348     07 5F 02 FB | 	rdlong	local06, objptr
0334c     04 0E 86 F1 | 	sub	objptr, #4
03350     2F 5B 02 F6 | 	mov	local04, local06
03354     01 5A 86 F1 | 	sub	local04, #1
03358     2D 55 52 F6 | 	abs	local01, local04 wc
0335c     1F 54 06 F5 | 	and	local01, #31
03360     2A 55 62 C6 |  if_b	neg	local01, local01
03364     07 71 02 FB | 	rdlong	local15, objptr
03368     2A 71 0A F2 | 	cmp	local15, local01 wz
0336c     38 00 90 AD |  if_e	jmp	#LR__0104
03370     07 55 02 FB | 	rdlong	local01, objptr
03374     02 54 66 F0 | 	shl	local01, #2
03378     18 0E 06 F1 | 	add	objptr, #24
0337c     07 55 02 F1 | 	add	local01, objptr
03380     2A 7F 02 F6 | 	mov	local22, local01
03384                 | '         kbdbuf[kbdfront]:=kbmreport
03384     3F 77 62 FC | 	wrlong	local18, local22
03388                 | '         kbdfront+=1
03388     18 0E 86 F1 | 	sub	objptr, #24
0338c     07 5F 02 FB | 	rdlong	local06, objptr
03390     01 5E 06 F1 | 	add	local06, #1
03394     07 5F 62 FC | 	wrlong	local06, objptr
03398                 | '         kbdfront:=kbdfront // 32
03398     2F 5B 52 F6 | 	abs	local04, local06 wc
0339c     1F 5A 06 F5 | 	and	local04, #31
033a0     2D 5B 62 C6 |  if_b	neg	local04, local04
033a4     07 5B 62 FC | 	wrlong	local04, objptr
033a8                 | LR__0104
033a8                 | LR__0105
033a8                 | '     b:=(-1)
033a8     01 58 66 F6 | 	neg	local03, #1
033ac                 | LR__0106
033ac                 | ' 
033ac                 | ' 
033ac                 | '   if long[$30]==0
033ac     30 5A 0E FB | 	rdlong	local04, #48 wz
033b0     5C 00 90 5D |  if_ne	jmp	#LR__0108
033b4                 | '     if kbdfront<>kbdtail
033b4     07 5B 02 FB | 	rdlong	local04, objptr
033b8     04 0E 06 F1 | 	add	objptr, #4
033bc     07 55 02 FB | 	rdlong	local01, objptr
033c0     04 0E 86 F1 | 	sub	objptr, #4
033c4     2A 5B 0A F2 | 	cmp	local04, local01 wz
033c8     44 00 90 AD |  if_e	jmp	#LR__0107
033cc     04 0E 06 F1 | 	add	objptr, #4
033d0     07 81 02 FB | 	rdlong	local23, objptr
033d4     02 80 66 F0 | 	shl	local23, #2
033d8     14 0E 06 F1 | 	add	objptr, #20
033dc     07 81 02 F1 | 	add	local23, objptr
033e0                 | '       long[$30]:=kbdbuf[kbdtail]
033e0     40 5B 02 FB | 	rdlong	local04, local23
033e4     30 5A 66 FC | 	wrlong	local04, #48
033e8                 | '       kbdtail++
033e8     14 0E 86 F1 | 	sub	objptr, #20
033ec     07 71 02 FB | 	rdlong	local15, objptr
033f0     38 55 02 F6 | 	mov	local01, local15
033f4     01 54 06 F1 | 	add	local01, #1
033f8     07 55 62 FC | 	wrlong	local01, objptr
033fc                 | '       kbdtail:= kbdtail // 32
033fc     2A 5B 52 F6 | 	abs	local04, local01 wc
03400     1F 5A 06 F5 | 	and	local04, #31
03404     2D 5B 62 C6 |  if_b	neg	local04, local04
03408     07 5B 62 FC | 	wrlong	local04, objptr
0340c     04 0E 86 F1 | 	sub	objptr, #4
03410                 | LR__0107
03410                 | LR__0108
03410                 | '       
03410                 | '   if long[$34]==0
03410     34 5A 0E FB | 	rdlong	local04, #52 wz
03414     64 00 90 5D |  if_ne	jmp	#LR__0110
03418                 | '     if mousefront<>mousetail
03418     08 0E 06 F1 | 	add	objptr, #8
0341c     07 5B 02 FB | 	rdlong	local04, objptr
03420     04 0E 06 F1 | 	add	objptr, #4
03424     07 71 02 FB | 	rdlong	local15, objptr
03428     0C 0E 86 F1 | 	sub	objptr, #12
0342c     38 55 02 F6 | 	mov	local01, local15
03430     2A 5B 0A F2 | 	cmp	local04, local01 wz
03434     44 00 90 AD |  if_e	jmp	#LR__0109
03438     0C 0E 06 F1 | 	add	objptr, #12
0343c     07 83 02 FB | 	rdlong	local24, objptr
03440     02 82 66 F0 | 	shl	local24, #2
03444     8C 0E 06 F1 | 	add	objptr, #140
03448     07 83 02 F1 | 	add	local24, objptr
0344c                 | '       long[$34]:=mousebuf[mousetail]
0344c     41 5B 02 FB | 	rdlong	local04, local24
03450     34 5A 66 FC | 	wrlong	local04, #52
03454                 | '       mousetail++
03454     8C 0E 86 F1 | 	sub	objptr, #140
03458     07 71 02 FB | 	rdlong	local15, objptr
0345c     38 55 02 F6 | 	mov	local01, local15
03460     01 54 06 F1 | 	add	local01, #1
03464     07 55 62 FC | 	wrlong	local01, objptr
03468                 | '       mousetail:= mousetail // 128
03468     2A 5B 52 F6 | 	abs	local04, local01 wc
0346c     7F 5A 06 F5 | 	and	local04, #127
03470     2D 5B 62 C6 |  if_b	neg	local04, local04
03474     07 5B 62 FC | 	wrlong	local04, objptr
03478     0C 0E 86 F1 | 	sub	objptr, #12
0347c                 | LR__0109
0347c                 | LR__0110
0347c                 | ' 
0347c                 | '       
0347c                 | '   if long[$38]==0
0347c     38 5A 0E FB | 	rdlong	local04, #56 wz
03480     38 FC 9F 5D |  if_ne	jmp	#LR__0088
03484                 | '     if midifront<>miditail
03484     10 0E 06 F1 | 	add	objptr, #16
03488     07 5B 02 FB | 	rdlong	local04, objptr
0348c     04 0E 06 F1 | 	add	objptr, #4
03490     07 71 02 FB | 	rdlong	local15, objptr
03494     14 0E 86 F1 | 	sub	objptr, #20
03498     38 55 02 F6 | 	mov	local01, local15
0349c     2A 5B 0A F2 | 	cmp	local04, local01 wz
034a0     18 FC 9F AD |  if_e	jmp	#LR__0088
034a4     14 0E 06 F1 | 	add	objptr, #20
034a8     07 85 02 FB | 	rdlong	local25, objptr
034ac     02 84 66 F0 | 	shl	local25, #2
034b0     01 00 00 FF 
034b4     84 0E 06 F1 | 	add	objptr, ##644
034b8     07 85 02 F1 | 	add	local25, objptr
034bc                 | '       long[$38]:=midibuf[miditail]
034bc     42 5B 02 FB | 	rdlong	local04, local25
034c0     38 5A 66 FC | 	wrlong	local04, #56
034c4                 | '       miditail++
034c4     01 00 00 FF 
034c8     84 0E 86 F1 | 	sub	objptr, ##644
034cc     07 71 02 FB | 	rdlong	local15, objptr
034d0     38 55 02 F6 | 	mov	local01, local15
034d4     01 54 06 F1 | 	add	local01, #1
034d8     07 55 62 FC | 	wrlong	local01, objptr
034dc                 | '       miditail:= miditail // 32
034dc     2A 5B 52 F6 | 	abs	local04, local01 wc
034e0     1F 5A 06 F5 | 	and	local04, #31
034e4     2D 5B 62 C6 |  if_b	neg	local04, local04
034e8     07 5B 62 FC | 	wrlong	local04, objptr
034ec     14 0E 86 F1 | 	sub	objptr, #20
034f0     C8 FB 9F FD | 	jmp	#LR__0088
034f4     AF F0 03 F6 | 	mov	ptra, fp
034f8     BF 00 A0 FD | 	call	#popregs_
034fc                 | _retrocog_spin2_serialcog_ret
034fc     2D 00 64 FD | 	ret
03500                 | 
03500                 | '       
03500                 | ' 
03500                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03500                 | ' 
03500                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03500                 | _retrocog_spin2_serial_start
03500     04 5A 05 F6 | 	mov	COUNT_, #4
03504     B0 00 A0 FD | 	call	#pushregs_
03508     25 55 02 F6 | 	mov	local01, arg01
0350c     26 57 02 F6 | 	mov	local02, arg02
03510                 | ' 
03510                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03510     14 4A 06 FB | 	rdlong	arg01, #20
03514     10 4C C6 F9 | 	decod	arg02, #16
03518     26 4B 02 FD | 	qmul	arg01, arg02
0351c     19 58 62 FD | 	getqy	local03
03520     18 5A 62 FD | 	getqx	local04
03524     28 58 62 FD | 	setq	local03
03528     27 5B 12 FD | 	qdiv	local04, arg03
0352c     18 24 62 FD | 	getqx	result1
03530     12 4F 02 F6 | 	mov	arg03, result1
03534     FE FF 7F FF 
03538     00 4E 06 F5 | 	and	arg03, ##-1024
0353c                 | ' bitmode |= 7                                                  ' set bits (8)
0353c     07 4E 46 F5 | 	or	arg03, #7
03540                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03540     40 54 62 FD | 	dirl	local01
03544     08 00 80 FF 
03548     2A 7D 08 FC | 	wrpin	##4158, local01
0354c     2A 4F 12 FC | 	wxpin	arg03, local01
03550     2A 01 28 FC | 	wypin	#0, local01
03554     41 54 62 FD | 	dirh	local01
03558                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03558     40 56 62 FD | 	dirl	local02
0355c     2B F9 08 FC | 	wrpin	#124, local02
03560     2B 4F 12 FC | 	wxpin	arg03, local02
03564     2B 01 28 FC | 	wypin	#0, local02
03568     41 56 62 FD | 	dirh	local02
0356c                 | ' pinhigh(rxpin)
0356c     59 54 62 FD | 	drvh	local01
03570     AF F0 03 F6 | 	mov	ptra, fp
03574     BF 00 A0 FD | 	call	#popregs_
03578                 | _retrocog_spin2_serial_start_ret
03578     2D 00 64 FD | 	ret
0357c                 | 
0357c                 | ' 
0357c                 | ' pub rxcheck(pin) : rxbyte | check
0357c                 | _retrocog_spin2_rxcheck
0357c     04 5A 05 F6 | 	mov	COUNT_, #4
03580     B0 00 A0 FD | 	call	#pushregs_
03584     25 55 02 F6 | 	mov	local01, arg01
03588                 | ' 
03588                 | ' '' Check for serial input
03588                 | ' '' -- returns -1 if nothing available
03588                 | ' 
03588                 | '   rxbyte := -1
03588     01 56 66 F6 | 	neg	local02, #1
0358c                 | '   check := pinr(pin)
0358c     2A 4B 02 F6 | 	mov	arg01, local01
03590     20 4A CE F7 | 	test	arg01, #32 wz
03594     FF 59 02 56 |  if_ne	mov	local03, inb
03598     FE 59 02 A6 |  if_e	mov	local03, ina
0359c     25 59 42 F0 | 	shr	local03, arg01
035a0     06 4A 46 F0 | 	shr	arg01, #6
035a4     25 59 42 F7 | 	zerox	local03, arg01
035a8     2C 5B 0A F6 | 	mov	local04, local03 wz
035ac                 | '   if (check)
035ac                 | '     rxbyte := rdpin(pin) >> 24
035ac     00 56 06 56 |  if_ne	mov	local02, #0
035b0     2A 57 8A 5A |  if_ne	rdpin	local02, local01
035b4     18 56 46 50 |  if_ne	shr	local02, #24
035b8     2B 25 02 F6 | 	mov	result1, local02
035bc     AF F0 03 F6 | 	mov	ptra, fp
035c0     BF 00 A0 FD | 	call	#popregs_
035c4                 | _retrocog_spin2_rxcheck_ret
035c4     2D 00 64 FD | 	ret
035c8                 | hubexit
035c8     81 00 80 FD | 	jmp	#cogexit
035cc                 | 
035cc                 | __system___setbaud
035cc     14 08 07 FB | 	rdlong	muldiva_, #20
035d0     25 0B 03 F6 | 	mov	muldivb_, arg01
035d4     D0 00 A0 FD | 	call	#divide_
035d8     40 7C 64 FD | 	dirl	#62
035dc     40 7E 64 FD | 	dirl	#63
035e0     0A 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
035e4     10 0A 67 F0 | 	shl	muldivb_, #16
035e8     07 4C 06 F6 | 	mov	arg02, #7
035ec     85 4D 02 F1 | 	add	arg02, muldivb_
035f0     3E F8 0C FC | 	wrpin	#124, #62
035f4     3E 4C 16 FC | 	wxpin	arg02, #62
035f8     3F 7C 0C FC | 	wrpin	#62, #63
035fc     14 4C 06 F1 | 	add	arg02, #20
03600     3F 4C 16 FC | 	wxpin	arg02, #63
03604     41 7C 64 FD | 	dirh	#62
03608     41 7E 64 FD | 	dirh	#63
0360c                 | __system___setbaud_ret
0360c     2D 00 64 FD | 	ret
03610                 | 
03610                 | __system___txraw
03610     02 5A 05 F6 | 	mov	COUNT_, #2
03614     B0 00 A0 FD | 	call	#pushregs_
03618     25 55 02 F6 | 	mov	local01, arg01
0361c     0A 57 0A FB | 	rdlong	local02, ptr___system__dat__ wz
03620     0C 00 90 5D |  if_ne	jmp	#LR__0111
03624     C2 01 00 FF 
03628     00 4A 06 F6 | 	mov	arg01, ##230400
0362c     9C FF BF FD | 	call	#__system___setbaud
03630                 | LR__0111
03630     3E 54 26 FC | 	wypin	local01, #62
03634     1F 02 64 FD | 	waitx	#1
03638     CC C9 9F FE | 	loc	pa,	#(@LR__0113-@LR__0112)
0363c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03640                 | LR__0112
03640     40 7C 74 FD | 	testp	#62 wc
03644     F8 FF 9F 3D |  if_nc	jmp	#LR__0112
03648                 | LR__0113
03648     01 24 06 F6 | 	mov	result1, #1
0364c     AF F0 03 F6 | 	mov	ptra, fp
03650     BF 00 A0 FD | 	call	#popregs_
03654                 | __system___txraw_ret
03654     2D 00 64 FD | 	ret
03658                 | 
03658                 | __system___rxraw
03658     0D 5A 05 F6 | 	mov	COUNT_, #13
0365c     B0 00 A0 FD | 	call	#pushregs_
03660     25 55 02 F6 | 	mov	local01, arg01
03664     0A 57 0A FB | 	rdlong	local02, ptr___system__dat__ wz
03668     0C 00 90 5D |  if_ne	jmp	#LR__0114
0366c     C2 01 00 FF 
03670     00 4A 06 F6 | 	mov	arg01, ##230400
03674     54 FF BF FD | 	call	#__system___setbaud
03678                 | LR__0114
03678     00 54 0E F2 | 	cmp	local01, #0 wz
0367c     18 00 90 AD |  if_e	jmp	#LR__0115
03680     14 58 06 FB | 	rdlong	local03, #20
03684     0A 58 46 F0 | 	shr	local03, #10
03688     2C 55 02 FD | 	qmul	local01, local03
0368c     18 5A 62 FD | 	getqx	local04
03690     1A 5C 62 FD | 	getct	local05
03694     2D 5D 02 F1 | 	add	local05, local04
03698                 | LR__0115
03698     01 5E 66 F6 | 	neg	local06, #1
0369c     00 60 06 F6 | 	mov	local07, #0
036a0     04 14 06 F1 | 	add	ptr___system__dat__, #4
036a4     0A 63 02 FB | 	rdlong	local08, ptr___system__dat__
036a8     04 14 86 F1 | 	sub	ptr___system__dat__, #4
036ac                 | LR__0116
036ac     08 62 16 F4 | 	testb	local08, #8 wc
036b0     09 62 76 F4 | 	testbn	local08, #9 andc
036b4     0A 62 46 F0 | 	shr	local08, #10
036b8     01 60 06 C6 |  if_b	mov	local07, #1
036bc     10 00 90 CD |  if_b	jmp	#LR__0117
036c0     40 7E 6C FD | 	testp	#63 wz
036c4     01 60 06 A6 |  if_e	mov	local07, #1
036c8     3F 62 8E AA |  if_e	rdpin	local08, #63
036cc     04 62 46 A0 |  if_e	shr	local08, #4
036d0                 | LR__0117
036d0     00 56 06 F6 | 	mov	local02, #0
036d4     00 60 0E F2 | 	cmp	local07, #0 wz
036d8     01 56 66 56 |  if_ne	neg	local02, #1
036dc     00 64 06 F6 | 	mov	local09, #0
036e0     00 66 06 F6 | 	mov	local10, #0
036e4     00 54 0E F2 | 	cmp	local01, #0 wz
036e8     01 66 66 56 |  if_ne	neg	local10, #1
036ec     00 68 06 F6 | 	mov	local11, #0
036f0     00 6A 06 F6 | 	mov	local12, #0
036f4     1A 6C 62 FD | 	getct	local13
036f8     2E 6D 82 F1 | 	sub	local13, local05
036fc     00 6C 5E F2 | 	cmps	local13, #0 wcz
03700     01 6A 66 C6 |  if_b	neg	local12, #1
03704     00 6A 0E F2 | 	cmp	local12, #0 wz
03708     01 68 66 56 |  if_ne	neg	local11, #1
0370c     34 67 CA F7 | 	test	local10, local11 wz
03710     01 64 66 56 |  if_ne	neg	local09, #1
03714     32 57 4A F5 | 	or	local02, local09 wz
03718     90 FF 9F AD |  if_e	jmp	#LR__0116
0371c     00 60 0E F2 | 	cmp	local07, #0 wz
03720     31 5F 02 56 |  if_ne	mov	local06, local08
03724     FF 5E 06 55 |  if_ne	and	local06, #255
03728     04 14 06 F1 | 	add	ptr___system__dat__, #4
0372c     0A 63 62 FC | 	wrlong	local08, ptr___system__dat__
03730     04 14 86 F1 | 	sub	ptr___system__dat__, #4
03734     2F 25 02 F6 | 	mov	result1, local06
03738     AF F0 03 F6 | 	mov	ptra, fp
0373c     BF 00 A0 FD | 	call	#popregs_
03740                 | __system___rxraw_ret
03740     2D 00 64 FD | 	ret
03744                 | 
03744                 | __system____builtin_memmove
03744     25 2B 02 F6 | 	mov	_var01, arg01
03748     26 4B 5A F2 | 	cmps	arg01, arg02 wcz
0374c     50 00 90 3D |  if_ae	jmp	#LR__0125
03750     CC C8 9F FE | 	loc	pa,	#(@LR__0119-@LR__0118)
03754     93 00 A0 FD | 	call	#FCACHE_LOAD_
03758                 | LR__0118
03758     03 4E 5E F2 | 	cmps	arg03, #3 wcz
0375c     18 00 90 ED |  if_be	jmp	#LR__0120
03760     26 2D 02 FB | 	rdlong	_var02, arg02
03764     25 2D 62 FC | 	wrlong	_var02, arg01
03768     04 4A 06 F1 | 	add	arg01, #4
0376c     04 4C 06 F1 | 	add	arg02, #4
03770     04 4E 86 F1 | 	sub	arg03, #4
03774     E0 FF 9F FD | 	jmp	#LR__0118
03778                 | LR__0119
03778                 | LR__0120
03778     27 2F 0A F6 | 	mov	_var03, arg03 wz
0377c     4C 00 90 AD |  if_e	jmp	#LR__0131
03780     90 C8 9F FE | 	loc	pa,	#(@LR__0123-@LR__0121)
03784     93 00 A0 FD | 	call	#FCACHE_LOAD_
03788                 | LR__0121
03788     17 09 D8 FC | 	rep	@LR__0124, _var03
0378c                 | LR__0122
0378c     26 2D C2 FA | 	rdbyte	_var02, arg02
03790     25 2D 42 FC | 	wrbyte	_var02, arg01
03794     01 4A 06 F1 | 	add	arg01, #1
03798     01 4C 06 F1 | 	add	arg02, #1
0379c                 | LR__0123
0379c                 | LR__0124
0379c     2C 00 90 FD | 	jmp	#LR__0131
037a0                 | LR__0125
037a0     27 4B 02 F1 | 	add	arg01, arg03
037a4     27 4D 02 F1 | 	add	arg02, arg03
037a8     27 31 0A F6 | 	mov	_var04, arg03 wz
037ac     1C 00 90 AD |  if_e	jmp	#LR__0130
037b0     60 C8 9F FE | 	loc	pa,	#(@LR__0128-@LR__0126)
037b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
037b8                 | LR__0126
037b8     18 09 D8 FC | 	rep	@LR__0129, _var04
037bc                 | LR__0127
037bc     01 4A 86 F1 | 	sub	arg01, #1
037c0     01 4C 86 F1 | 	sub	arg02, #1
037c4     26 2D C2 FA | 	rdbyte	_var02, arg02
037c8     25 2D 42 FC | 	wrbyte	_var02, arg01
037cc                 | LR__0128
037cc                 | LR__0129
037cc                 | LR__0130
037cc                 | LR__0131
037cc     15 25 02 F6 | 	mov	result1, _var01
037d0                 | __system____builtin_memmove_ret
037d0     2D 00 64 FD | 	ret
037d4                 | 
037d4                 | __system__longmove
037d4     25 2B 02 F6 | 	mov	_var01, arg01
037d8     26 4B 5A F2 | 	cmps	arg01, arg02 wcz
037dc     28 00 90 3D |  if_ae	jmp	#LR__0136
037e0     27 2D 0A F6 | 	mov	_var02, arg03 wz
037e4     54 00 90 AD |  if_e	jmp	#LR__0142
037e8     28 C8 9F FE | 	loc	pa,	#(@LR__0134-@LR__0132)
037ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
037f0                 | LR__0132
037f0     16 09 D8 FC | 	rep	@LR__0135, _var02
037f4                 | LR__0133
037f4     26 2F 02 FB | 	rdlong	_var03, arg02
037f8     25 2F 62 FC | 	wrlong	_var03, arg01
037fc     04 4A 06 F1 | 	add	arg01, #4
03800     04 4C 06 F1 | 	add	arg02, #4
03804                 | LR__0134
03804                 | LR__0135
03804     34 00 90 FD | 	jmp	#LR__0142
03808                 | LR__0136
03808     27 31 02 F6 | 	mov	_var04, arg03
0380c     02 30 66 F0 | 	shl	_var04, #2
03810     18 4B 02 F1 | 	add	arg01, _var04
03814     18 4D 02 F1 | 	add	arg02, _var04
03818     27 33 0A F6 | 	mov	_var05, arg03 wz
0381c     1C 00 90 AD |  if_e	jmp	#LR__0141
03820     F0 C7 9F FE | 	loc	pa,	#(@LR__0139-@LR__0137)
03824     93 00 A0 FD | 	call	#FCACHE_LOAD_
03828                 | LR__0137
03828     19 09 D8 FC | 	rep	@LR__0140, _var05
0382c                 | LR__0138
0382c     04 4A 86 F1 | 	sub	arg01, #4
03830     04 4C 86 F1 | 	sub	arg02, #4
03834     26 2F 02 FB | 	rdlong	_var03, arg02
03838     25 2F 62 FC | 	wrlong	_var03, arg01
0383c                 | LR__0139
0383c                 | LR__0140
0383c                 | LR__0141
0383c                 | LR__0142
0383c     15 25 02 F6 | 	mov	result1, _var01
03840                 | __system__longmove_ret
03840     2D 00 64 FD | 	ret
03844                 | 
03844                 | __system____topofstack
03844     00 5A 05 F6 | 	mov	COUNT_, #0
03848     B0 00 A0 FD | 	call	#pushregs_
0384c     0C F0 07 F1 | 	add	ptra, #12
03850     04 5E 05 F1 | 	add	fp, #4
03854     AF 4A 62 FC | 	wrlong	arg01, fp
03858     AF 24 02 F6 | 	mov	result1, fp
0385c     04 5E 85 F1 | 	sub	fp, #4
03860     AF F0 03 F6 | 	mov	ptra, fp
03864     BF 00 A0 FD | 	call	#popregs_
03868                 | __system____topofstack_ret
03868     2D 00 64 FD | 	ret
0386c                 | 
0386c                 | __system___make_methodptr
0386c     04 5A 05 F6 | 	mov	COUNT_, #4
03870     B0 00 A0 FD | 	call	#pushregs_
03874     25 55 02 F6 | 	mov	local01, arg01
03878     26 57 02 F6 | 	mov	local02, arg02
0387c     08 4A 06 F6 | 	mov	arg01, #8
03880     E8 0A B0 FD | 	call	#__system___gc_alloc_managed
03884     12 59 0A F6 | 	mov	local03, result1 wz
03888     10 00 90 AD |  if_e	jmp	#LR__0143
0388c     2C 55 62 FC | 	wrlong	local01, local03
03890     2C 5B 02 F6 | 	mov	local04, local03
03894     04 5A 06 F1 | 	add	local04, #4
03898     2D 57 62 FC | 	wrlong	local02, local04
0389c                 | LR__0143
0389c     2C 25 02 F6 | 	mov	result1, local03
038a0     AF F0 03 F6 | 	mov	ptra, fp
038a4     BF 00 A0 FD | 	call	#popregs_
038a8                 | __system___make_methodptr_ret
038a8     2D 00 64 FD | 	ret
038ac                 | 
038ac                 | __system___lockmem
038ac     02 5A 05 F6 | 	mov	COUNT_, #2
038b0     B0 00 A0 FD | 	call	#pushregs_
038b4     01 24 62 FD | 	cogid	result1
038b8     12 55 02 F6 | 	mov	local01, result1
038bc     00 55 06 F1 | 	add	local01, #256
038c0                 | LR__0144
038c0     25 57 0A FB | 	rdlong	local02, arg01 wz
038c4     25 55 62 AC |  if_e	wrlong	local01, arg01
038c8     25 57 02 AB |  if_e	rdlong	local02, arg01
038cc     25 57 02 AB |  if_e	rdlong	local02, arg01
038d0     2A 57 0A F2 | 	cmp	local02, local01 wz
038d4     E8 FF 9F 5D |  if_ne	jmp	#LR__0144
038d8     AF F0 03 F6 | 	mov	ptra, fp
038dc     BF 00 A0 FD | 	call	#popregs_
038e0                 | __system___lockmem_ret
038e0     2D 00 64 FD | 	ret
038e4                 | 
038e4                 | __system___tx
038e4     02 5A 05 F6 | 	mov	COUNT_, #2
038e8     B0 00 A0 FD | 	call	#pushregs_
038ec     25 55 02 F6 | 	mov	local01, arg01
038f0     0A 54 0E F2 | 	cmp	local01, #10 wz
038f4     20 00 90 5D |  if_ne	jmp	#LR__0145
038f8     08 14 06 F1 | 	add	ptr___system__dat__, #8
038fc     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03900     08 14 86 F1 | 	sub	ptr___system__dat__, #8
03904     02 56 CE F7 | 	test	local02, #2 wz
03908     0C 00 90 AD |  if_e	jmp	#LR__0145
0390c     0D 56 06 F6 | 	mov	local02, #13
03910     0D 4A 06 F6 | 	mov	arg01, #13
03914     F8 FC BF FD | 	call	#__system___txraw
03918                 | LR__0145
03918     2A 4B 02 F6 | 	mov	arg01, local01
0391c     F0 FC BF FD | 	call	#__system___txraw
03920     AF F0 03 F6 | 	mov	ptra, fp
03924     BF 00 A0 FD | 	call	#popregs_
03928                 | __system___tx_ret
03928     2D 00 64 FD | 	ret
0392c                 | 
0392c                 | __system___rx
0392c     02 5A 05 F6 | 	mov	COUNT_, #2
03930     B0 00 A0 FD | 	call	#pushregs_
03934                 | LR__0146
03934     00 4A 06 F6 | 	mov	arg01, #0
03938     1C FD BF FD | 	call	#__system___rxraw
0393c     12 55 02 F6 | 	mov	local01, result1
03940     FF FF 7F FF 
03944     FF 55 0E F2 | 	cmp	local01, ##-1 wz
03948     E8 FF 9F AD |  if_e	jmp	#LR__0146
0394c     0D 54 0E F2 | 	cmp	local01, #13 wz
03950     14 00 90 5D |  if_ne	jmp	#LR__0147
03954     08 14 06 F1 | 	add	ptr___system__dat__, #8
03958     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
0395c     08 14 86 F1 | 	sub	ptr___system__dat__, #8
03960     02 56 CE F7 | 	test	local02, #2 wz
03964     0A 54 06 56 |  if_ne	mov	local01, #10
03968                 | LR__0147
03968     08 14 06 F1 | 	add	ptr___system__dat__, #8
0396c     0A 57 02 FB | 	rdlong	local02, ptr___system__dat__
03970     08 14 86 F1 | 	sub	ptr___system__dat__, #8
03974     01 56 CE F7 | 	test	local02, #1 wz
03978     1C 00 90 AD |  if_e	jmp	#LR__0150
0397c     7F 54 0E F2 | 	cmp	local01, #127 wz
03980     0C 00 90 5D |  if_ne	jmp	#LR__0148
03984     08 4A 06 F6 | 	mov	arg01, #8
03988     58 FF BF FD | 	call	#__system___tx
0398c     08 00 90 FD | 	jmp	#LR__0149
03990                 | LR__0148
03990     2A 4B 02 F6 | 	mov	arg01, local01
03994     4C FF BF FD | 	call	#__system___tx
03998                 | LR__0149
03998                 | LR__0150
03998     2A 25 02 F6 | 	mov	result1, local01
0399c     AF F0 03 F6 | 	mov	ptra, fp
039a0     BF 00 A0 FD | 	call	#popregs_
039a4                 | __system___rx_ret
039a4     2D 00 64 FD | 	ret
039a8                 | 
039a8                 | __system___waitms
039a8     03 5A 05 F6 | 	mov	COUNT_, #3
039ac     B0 00 A0 FD | 	call	#pushregs_
039b0     25 55 02 F6 | 	mov	local01, arg01
039b4     14 56 06 FB | 	rdlong	local02, #20
039b8     5C C6 9F FE | 	loc	pa,	#(@LR__0152-@LR__0151)
039bc     93 00 A0 FD | 	call	#FCACHE_LOAD_
039c0                 | LR__0151
039c0     01 00 00 FF 
039c4     E8 55 5E F2 | 	cmps	local01, ##1000 wcz
039c8     1F 56 62 1D |  if_a	waitx	local02
039cc     01 00 00 1F 
039d0     E8 55 86 11 |  if_a	sub	local01, ##1000
039d4     E8 FF 9F 1D |  if_a	jmp	#LR__0151
039d8                 | LR__0152
039d8     0C 14 06 F1 | 	add	ptr___system__dat__, #12
039dc     0A 59 0A FB | 	rdlong	local03, ptr___system__dat__ wz
039e0     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
039e4     20 00 90 5D |  if_ne	jmp	#LR__0153
039e8     2B 09 03 F6 | 	mov	muldiva_, local02
039ec     01 00 00 FF 
039f0     E8 0B 07 F6 | 	mov	muldivb_, ##1000
039f4     CC 00 A0 FD | 	call	#unsdivide_
039f8     85 59 02 F6 | 	mov	local03, muldivb_
039fc     0C 14 06 F1 | 	add	ptr___system__dat__, #12
03a00     0A 0B 63 FC | 	wrlong	muldivb_, ptr___system__dat__
03a04     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
03a08                 | LR__0153
03a08     00 54 5E F2 | 	cmps	local01, #0 wcz
03a0c     2C 55 02 1D |  if_a	qmul	local01, local03
03a10     18 4A 62 1D |  if_a	getqx	arg01
03a14     1F 4A 62 1D |  if_a	waitx	arg01
03a18     AF F0 03 F6 | 	mov	ptra, fp
03a1c     BF 00 A0 FD | 	call	#popregs_
03a20                 | __system___waitms_ret
03a20     2D 00 64 FD | 	ret
03a24                 | 
03a24                 | __system___basic_open
03a24     05 5A 05 F6 | 	mov	COUNT_, #5
03a28     B0 00 A0 FD | 	call	#pushregs_
03a2c     26 55 02 F6 | 	mov	local01, arg02
03a30     27 57 02 F6 | 	mov	local02, arg03
03a34     28 59 02 F6 | 	mov	local03, arg04
03a38     34 11 B0 FD | 	call	#__system____getftab
03a3c     12 5B 0A F6 | 	mov	local04, result1 wz
03a40     18 00 90 5D |  if_ne	jmp	#LR__0154
03a44     03 4B 02 F6 | 	mov	arg01, abortchain
03a48     0C 4C 06 F6 | 	mov	arg02, #12
03a4c     01 4E 06 F6 | 	mov	arg03, #1
03a50     F0 00 A0 FD | 	call	#__longjmp
03a54     01 24 66 F6 | 	neg	result1, #1
03a58     70 00 90 FD | 	jmp	#LR__0158
03a5c                 | LR__0154
03a5c     00 54 0E F2 | 	cmp	local01, #0 wz
03a60     48 00 90 AD |  if_e	jmp	#LR__0156
03a64     04 4A 06 F6 | 	mov	arg01, #4
03a68     00 09 B0 FD | 	call	#__system___gc_alloc_managed
03a6c     12 5D 0A F6 | 	mov	local05, result1 wz
03a70     18 00 90 5D |  if_ne	jmp	#LR__0155
03a74     03 4B 02 F6 | 	mov	arg01, abortchain
03a78     07 4C 06 F6 | 	mov	arg02, #7
03a7c     01 4E 06 F6 | 	mov	arg03, #1
03a80     F0 00 A0 FD | 	call	#__longjmp
03a84     01 24 66 F6 | 	neg	result1, #1
03a88     40 00 90 FD | 	jmp	#LR__0158
03a8c                 | LR__0155
03a8c     2E 55 62 FC | 	wrlong	local01, local05
03a90     08 4D 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
03a94     2E 4B 02 F6 | 	mov	arg01, local05
03a98     D0 FD BF FD | 	call	#__system___make_methodptr
03a9c     18 5A 06 F1 | 	add	local04, #24
03aa0     2D 25 62 FC | 	wrlong	result1, local04
03aa4     18 5A 86 F1 | 	sub	local04, #24
03aa8     0C 00 90 FD | 	jmp	#LR__0157
03aac                 | LR__0156
03aac     18 5A 06 F1 | 	add	local04, #24
03ab0     2D 55 62 FC | 	wrlong	local01, local04
03ab4     18 5A 86 F1 | 	sub	local04, #24
03ab8                 | LR__0157
03ab8     1C 5A 06 F1 | 	add	local04, #28
03abc     2D 57 62 FC | 	wrlong	local02, local04
03ac0     04 5A 06 F1 | 	add	local04, #4
03ac4     2D 59 62 FC | 	wrlong	local03, local04
03ac8     00 24 06 F6 | 	mov	result1, #0
03acc                 | LR__0158
03acc     AF F0 03 F6 | 	mov	ptra, fp
03ad0     BF 00 A0 FD | 	call	#popregs_
03ad4                 | __system___basic_open_ret
03ad4     2D 00 64 FD | 	ret
03ad8                 | 
03ad8                 | __system___basic_print_char
03ad8     05 5A 05 F6 | 	mov	COUNT_, #5
03adc     B0 00 A0 FD | 	call	#pushregs_
03ae0     26 55 02 F6 | 	mov	local01, arg02
03ae4     4C 12 B0 FD | 	call	#__system___gettxfunc
03ae8     12 57 0A F6 | 	mov	local02, result1 wz
03aec     00 24 06 A6 |  if_e	mov	result1, #0
03af0     24 00 90 AD |  if_e	jmp	#LR__0159
03af4     2B 59 02 FB | 	rdlong	local03, local02
03af8     04 56 06 F1 | 	add	local02, #4
03afc     2B 5B 02 FB | 	rdlong	local04, local02
03b00     2A 4B 02 F6 | 	mov	arg01, local01
03b04     07 5D 02 F6 | 	mov	local05, objptr
03b08     2C 0F 02 F6 | 	mov	objptr, local03
03b0c     2D 5A 62 FD | 	call	local04
03b10     2E 0F 02 F6 | 	mov	objptr, local05
03b14     01 24 06 F6 | 	mov	result1, #1
03b18                 | LR__0159
03b18     AF F0 03 F6 | 	mov	ptra, fp
03b1c     BF 00 A0 FD | 	call	#popregs_
03b20                 | __system___basic_print_char_ret
03b20     2D 00 64 FD | 	ret
03b24                 | 
03b24                 | __system___basic_print_string
03b24     03 5A 05 F6 | 	mov	COUNT_, #3
03b28     B0 00 A0 FD | 	call	#pushregs_
03b2c     26 55 02 F6 | 	mov	local01, arg02
03b30     27 57 02 F6 | 	mov	local02, arg03
03b34     FC 11 B0 FD | 	call	#__system___gettxfunc
03b38     12 59 0A F6 | 	mov	local03, result1 wz
03b3c     00 24 06 A6 |  if_e	mov	result1, #0
03b40     1C 00 90 AD |  if_e	jmp	#LR__0160
03b44     00 54 0E F2 | 	cmp	local01, #0 wz
03b48     00 24 06 A6 |  if_e	mov	result1, #0
03b4c     10 00 90 AD |  if_e	jmp	#LR__0160
03b50     2C 4B 02 F6 | 	mov	arg01, local03
03b54     2B 4D 02 F6 | 	mov	arg02, local02
03b58     2A 4F 02 F6 | 	mov	arg03, local01
03b5c     F8 00 B0 FD | 	call	#__system___fmtstr
03b60                 | LR__0160
03b60     AF F0 03 F6 | 	mov	ptra, fp
03b64     BF 00 A0 FD | 	call	#popregs_
03b68                 | __system___basic_print_string_ret
03b68     2D 00 64 FD | 	ret
03b6c                 | 
03b6c                 | __system___basic_print_integer
03b6c     04 5A 05 F6 | 	mov	COUNT_, #4
03b70     B0 00 A0 FD | 	call	#pushregs_
03b74     26 55 02 F6 | 	mov	local01, arg02
03b78     27 57 02 F6 | 	mov	local02, arg03
03b7c     28 59 02 F6 | 	mov	local03, arg04
03b80     B0 11 B0 FD | 	call	#__system___gettxfunc
03b84     12 5B 0A F6 | 	mov	local04, result1 wz
03b88     00 24 06 A6 |  if_e	mov	result1, #0
03b8c     14 00 90 AD |  if_e	jmp	#LR__0161
03b90     2D 4B 02 F6 | 	mov	arg01, local04
03b94     2B 4D 02 F6 | 	mov	arg02, local02
03b98     2A 4F 02 F6 | 	mov	arg03, local01
03b9c     2C 51 02 F6 | 	mov	arg04, local03
03ba0     A8 01 B0 FD | 	call	#__system___fmtnum
03ba4                 | LR__0161
03ba4     AF F0 03 F6 | 	mov	ptra, fp
03ba8     BF 00 A0 FD | 	call	#popregs_
03bac                 | __system___basic_print_integer_ret
03bac     2D 00 64 FD | 	ret
03bb0                 | 
03bb0                 | __system___basic_print_unsigned
03bb0     04 5A 05 F6 | 	mov	COUNT_, #4
03bb4     B0 00 A0 FD | 	call	#pushregs_
03bb8     26 55 02 F6 | 	mov	local01, arg02
03bbc     27 57 02 F6 | 	mov	local02, arg03
03bc0     28 59 02 F6 | 	mov	local03, arg04
03bc4     6C 11 B0 FD | 	call	#__system___gettxfunc
03bc8     12 5B 0A F6 | 	mov	local04, result1 wz
03bcc     00 24 06 A6 |  if_e	mov	result1, #0
03bd0     18 00 90 AD |  if_e	jmp	#LR__0162
03bd4     3A 56 26 F4 | 	bith	local02, #58
03bd8     2D 4B 02 F6 | 	mov	arg01, local04
03bdc     2B 4D 02 F6 | 	mov	arg02, local02
03be0     2A 4F 02 F6 | 	mov	arg03, local01
03be4     2C 51 02 F6 | 	mov	arg04, local03
03be8     60 01 B0 FD | 	call	#__system___fmtnum
03bec                 | LR__0162
03bec     AF F0 03 F6 | 	mov	ptra, fp
03bf0     BF 00 A0 FD | 	call	#popregs_
03bf4                 | __system___basic_print_unsigned_ret
03bf4     2D 00 64 FD | 	ret
03bf8                 | 
03bf8                 | __system___fmtchar
03bf8     00 5A 05 F6 | 	mov	COUNT_, #0
03bfc     B0 00 A0 FD | 	call	#pushregs_
03c00     18 F0 07 F1 | 	add	ptra, #24
03c04     04 5E 05 F1 | 	add	fp, #4
03c08     AF 4A 62 FC | 	wrlong	arg01, fp
03c0c     04 5E 05 F1 | 	add	fp, #4
03c10     AF 4C 62 FC | 	wrlong	arg02, fp
03c14     04 5E 05 F1 | 	add	fp, #4
03c18     AF 4E 62 FC | 	wrlong	arg03, fp
03c1c     04 5E 05 F1 | 	add	fp, #4
03c20     AF 4E 42 FC | 	wrbyte	arg03, fp
03c24     01 5E 05 F1 | 	add	fp, #1
03c28     AF 00 48 FC | 	wrbyte	#0, fp
03c2c     01 5E 85 F1 | 	sub	fp, #1
03c30     AF 4E 02 F6 | 	mov	arg03, fp
03c34     0C 5E 85 F1 | 	sub	fp, #12
03c38     AF 4A 02 FB | 	rdlong	arg01, fp
03c3c     04 5E 05 F1 | 	add	fp, #4
03c40     AF 4C 02 FB | 	rdlong	arg02, fp
03c44     08 5E 85 F1 | 	sub	fp, #8
03c48     0C 00 B0 FD | 	call	#__system___fmtstr
03c4c     AF F0 03 F6 | 	mov	ptra, fp
03c50     BF 00 A0 FD | 	call	#popregs_
03c54                 | __system___fmtchar_ret
03c54     2D 00 64 FD | 	ret
03c58                 | 
03c58                 | __system___fmtstr
03c58     0E 5A 05 F6 | 	mov	COUNT_, #14
03c5c     B0 00 A0 FD | 	call	#pushregs_
03c60     25 55 02 F6 | 	mov	local01, arg01
03c64     26 57 02 F6 | 	mov	local02, arg02
03c68     27 59 02 F6 | 	mov	local03, arg03
03c6c     2B 5B 02 F6 | 	mov	local04, local02
03c70     FF 5A 06 F5 | 	and	local04, #255
03c74     2C 4B 02 F6 | 	mov	arg01, local03
03c78     00 5C 06 F6 | 	mov	local05, #0
03c7c     90 C3 9F FE | 	loc	pa,	#(@LR__0164-@LR__0163)
03c80     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c84                 | LR__0163
03c84     25 5F CA FA | 	rdbyte	local06, arg01 wz
03c88     01 5C 06 51 |  if_ne	add	local05, #1
03c8c     01 4A 06 51 |  if_ne	add	arg01, #1
03c90     F0 FF 9F 5D |  if_ne	jmp	#LR__0163
03c94                 | LR__0164
03c94     2E 25 02 F6 | 	mov	result1, local05
03c98     12 61 02 F6 | 	mov	local07, result1
03c9c     00 5A 0E F2 | 	cmp	local04, #0 wz
03ca0     04 00 90 AD |  if_e	jmp	#LR__0165
03ca4     2D 61 7A F3 | 	fles	local07, local04 wcz
03ca8                 | LR__0165
03ca8     2A 4B 02 F6 | 	mov	arg01, local01
03cac     2B 4D 02 F6 | 	mov	arg02, local02
03cb0     30 4F 02 F6 | 	mov	arg03, local07
03cb4     02 50 06 F6 | 	mov	arg04, #2
03cb8     2C 0F B0 FD | 	call	#__system___fmtpad
03cbc     12 63 02 F6 | 	mov	local08, result1
03cc0     00 62 5E F2 | 	cmps	local08, #0 wcz
03cc4     31 25 02 C6 |  if_b	mov	result1, local08
03cc8     74 00 90 CD |  if_b	jmp	#LR__0168
03ccc     00 60 5E F2 | 	cmps	local07, #0 wcz
03cd0     44 00 90 ED |  if_be	jmp	#LR__0167
03cd4     30 65 02 F6 | 	mov	local09, local07
03cd8                 | LR__0166
03cd8     2A 67 02 F6 | 	mov	local10, local01
03cdc     33 69 02 FB | 	rdlong	local11, local10
03ce0     04 66 06 F1 | 	add	local10, #4
03ce4     33 6B 02 FB | 	rdlong	local12, local10
03ce8     2C 4B C2 FA | 	rdbyte	arg01, local03
03cec     07 6D 02 F6 | 	mov	local13, objptr
03cf0     34 0F 02 F6 | 	mov	objptr, local11
03cf4     01 58 06 F1 | 	add	local03, #1
03cf8     2D 6A 62 FD | 	call	local12
03cfc     36 0F 02 F6 | 	mov	objptr, local13
03d00     12 6F 02 F6 | 	mov	local14, result1
03d04     00 6E 5E F2 | 	cmps	local14, #0 wcz
03d08     37 25 02 C6 |  if_b	mov	result1, local14
03d0c     30 00 90 CD |  if_b	jmp	#LR__0168
03d10     37 63 02 F1 | 	add	local08, local14
03d14     F0 65 6E FB | 	djnz	local09, #LR__0166
03d18                 | LR__0167
03d18     2A 4B 02 F6 | 	mov	arg01, local01
03d1c     2B 4D 02 F6 | 	mov	arg02, local02
03d20     30 4F 02 F6 | 	mov	arg03, local07
03d24     01 50 06 F6 | 	mov	arg04, #1
03d28     BC 0E B0 FD | 	call	#__system___fmtpad
03d2c     12 6F 02 F6 | 	mov	local14, result1
03d30     00 6E 5E F2 | 	cmps	local14, #0 wcz
03d34     37 25 02 C6 |  if_b	mov	result1, local14
03d38     37 63 02 31 |  if_ae	add	local08, local14
03d3c     31 25 02 36 |  if_ae	mov	result1, local08
03d40                 | LR__0168
03d40     AF F0 03 F6 | 	mov	ptra, fp
03d44     BF 00 A0 FD | 	call	#popregs_
03d48                 | __system___fmtstr_ret
03d48     2D 00 64 FD | 	ret
03d4c                 | 
03d4c                 | __system___fmtnum
03d4c     07 5A 05 F6 | 	mov	COUNT_, #7
03d50     B0 00 A0 FD | 	call	#pushregs_
03d54     78 F0 07 F1 | 	add	ptra, #120
03d58     04 5E 05 F1 | 	add	fp, #4
03d5c     AF 4A 62 FC | 	wrlong	arg01, fp
03d60     04 5E 05 F1 | 	add	fp, #4
03d64     AF 4C 62 FC | 	wrlong	arg02, fp
03d68     04 5E 05 F1 | 	add	fp, #4
03d6c     AF 4E 62 FC | 	wrlong	arg03, fp
03d70     04 5E 05 F1 | 	add	fp, #4
03d74     AF 50 62 FC | 	wrlong	arg04, fp
03d78     04 5E 05 F1 | 	add	fp, #4
03d7c     AF 54 02 F6 | 	mov	local01, fp
03d80     44 5E 05 F1 | 	add	fp, #68
03d84     AF 54 62 FC | 	wrlong	local01, fp
03d88     04 5E 05 F1 | 	add	fp, #4
03d8c     AF 00 68 FC | 	wrlong	#0, fp
03d90     54 5E 85 F1 | 	sub	fp, #84
03d94     AF 54 02 FB | 	rdlong	local01, fp
03d98     10 54 46 F0 | 	shr	local01, #16
03d9c     3F 54 06 F5 | 	and	local01, #63
03da0     58 5E 05 F1 | 	add	fp, #88
03da4     AF 54 62 FC | 	wrlong	local01, fp
03da8     58 5E 85 F1 | 	sub	fp, #88
03dac     AF 54 02 FB | 	rdlong	local01, fp
03db0     FF 54 06 F5 | 	and	local01, #255
03db4     5C 5E 05 F1 | 	add	fp, #92
03db8     AF 54 62 FC | 	wrlong	local01, fp
03dbc     5C 5E 85 F1 | 	sub	fp, #92
03dc0     AF 54 02 FB | 	rdlong	local01, fp
03dc4     1A 54 46 F0 | 	shr	local01, #26
03dc8     03 54 06 F5 | 	and	local01, #3
03dcc     60 5E 05 F1 | 	add	fp, #96
03dd0     AF 54 62 FC | 	wrlong	local01, fp
03dd4     08 5E 85 F1 | 	sub	fp, #8
03dd8     AF 54 02 FB | 	rdlong	local01, fp
03ddc     60 5E 85 F1 | 	sub	fp, #96
03de0     00 54 5E F2 | 	cmps	local01, #0 wcz
03de4     14 00 90 ED |  if_be	jmp	#LR__0169
03de8     60 5E 05 F1 | 	add	fp, #96
03dec     AF 54 02 FB | 	rdlong	local01, fp
03df0     01 54 86 F1 | 	sub	local01, #1
03df4     AF 54 62 FC | 	wrlong	local01, fp
03df8     60 5E 85 F1 | 	sub	fp, #96
03dfc                 | LR__0169
03dfc     64 5E 05 F1 | 	add	fp, #100
03e00     AF 56 02 FB | 	rdlong	local02, fp
03e04     64 5E 85 F1 | 	sub	fp, #100
03e08     40 56 5E F2 | 	cmps	local02, #64 wcz
03e0c     14 00 90 1D |  if_a	jmp	#LR__0170
03e10     64 5E 05 F1 | 	add	fp, #100
03e14     AF 58 02 FB | 	rdlong	local03, fp
03e18     64 5E 85 F1 | 	sub	fp, #100
03e1c     2C 5B 0A F6 | 	mov	local04, local03 wz
03e20     0C 00 90 5D |  if_ne	jmp	#LR__0171
03e24                 | LR__0170
03e24     64 5E 05 F1 | 	add	fp, #100
03e28     AF 80 68 FC | 	wrlong	#64, fp
03e2c     64 5E 85 F1 | 	sub	fp, #100
03e30                 | LR__0171
03e30     68 5E 05 F1 | 	add	fp, #104
03e34     AF 54 02 FB | 	rdlong	local01, fp
03e38     68 5E 85 F1 | 	sub	fp, #104
03e3c     03 54 0E F2 | 	cmp	local01, #3 wz
03e40     10 00 90 5D |  if_ne	jmp	#LR__0172
03e44     68 5E 05 F1 | 	add	fp, #104
03e48     AF 00 68 FC | 	wrlong	#0, fp
03e4c     68 5E 85 F1 | 	sub	fp, #104
03e50     30 00 90 FD | 	jmp	#LR__0174
03e54                 | LR__0172
03e54     0C 5E 05 F1 | 	add	fp, #12
03e58     AF 54 02 FB | 	rdlong	local01, fp
03e5c     0C 5E 85 F1 | 	sub	fp, #12
03e60     00 54 5E F2 | 	cmps	local01, #0 wcz
03e64     1C 00 90 3D |  if_ae	jmp	#LR__0173
03e68     68 5E 05 F1 | 	add	fp, #104
03e6c     AF 08 68 FC | 	wrlong	#4, fp
03e70     5C 5E 85 F1 | 	sub	fp, #92
03e74     AF 54 02 FB | 	rdlong	local01, fp
03e78     2A 55 62 F6 | 	neg	local01, local01
03e7c     AF 54 62 FC | 	wrlong	local01, fp
03e80     0C 5E 85 F1 | 	sub	fp, #12
03e84                 | LR__0173
03e84                 | LR__0174
03e84     68 5E 05 F1 | 	add	fp, #104
03e88     AF 54 0A FB | 	rdlong	local01, fp wz
03e8c     68 5E 85 F1 | 	sub	fp, #104
03e90     EC 00 90 AD |  if_e	jmp	#LR__0181
03e94     5C 5E 05 F1 | 	add	fp, #92
03e98     AF 5A 02 FB | 	rdlong	local04, fp
03e9c     01 5A 06 F1 | 	add	local04, #1
03ea0     AF 5A 62 FC | 	wrlong	local04, fp
03ea4     04 5E 05 F1 | 	add	fp, #4
03ea8     AF 54 02 FB | 	rdlong	local01, fp
03eac     04 5E 05 F1 | 	add	fp, #4
03eb0     AF 5A 02 FB | 	rdlong	local04, fp
03eb4     64 5E 85 F1 | 	sub	fp, #100
03eb8     2D 55 0A F2 | 	cmp	local01, local04 wz
03ebc     3C 00 90 5D |  if_ne	jmp	#LR__0176
03ec0     60 5E 05 F1 | 	add	fp, #96
03ec4     AF 5A 02 FB | 	rdlong	local04, fp
03ec8     01 5A 86 F1 | 	sub	local04, #1
03ecc     AF 5A 62 FC | 	wrlong	local04, fp
03ed0     AF 54 0A FB | 	rdlong	local01, fp wz
03ed4     60 5E 85 F1 | 	sub	fp, #96
03ed8     20 00 90 5D |  if_ne	jmp	#LR__0175
03edc     04 5E 05 F1 | 	add	fp, #4
03ee0     AF 4A 02 FB | 	rdlong	arg01, fp
03ee4     04 5E 05 F1 | 	add	fp, #4
03ee8     AF 4C 02 FB | 	rdlong	arg02, fp
03eec     08 5E 85 F1 | 	sub	fp, #8
03ef0     23 4E 06 F6 | 	mov	arg03, #35
03ef4     00 FD BF FD | 	call	#__system___fmtchar
03ef8     70 01 90 FD | 	jmp	#LR__0186
03efc                 | LR__0175
03efc                 | LR__0176
03efc     68 5E 05 F1 | 	add	fp, #104
03f00     AF 54 02 FB | 	rdlong	local01, fp
03f04     68 5E 85 F1 | 	sub	fp, #104
03f08     02 54 0E F2 | 	cmp	local01, #2 wz
03f0c     20 00 90 5D |  if_ne	jmp	#LR__0177
03f10     58 5E 05 F1 | 	add	fp, #88
03f14     AF 54 02 FB | 	rdlong	local01, fp
03f18     2A 5B 02 F6 | 	mov	local04, local01
03f1c     01 5A 06 F1 | 	add	local04, #1
03f20     AF 5A 62 FC | 	wrlong	local04, fp
03f24     58 5E 85 F1 | 	sub	fp, #88
03f28     2A 41 48 FC | 	wrbyte	#32, local01
03f2c     50 00 90 FD | 	jmp	#LR__0180
03f30                 | LR__0177
03f30     68 5E 05 F1 | 	add	fp, #104
03f34     AF 54 02 FB | 	rdlong	local01, fp
03f38     68 5E 85 F1 | 	sub	fp, #104
03f3c     04 54 0E F2 | 	cmp	local01, #4 wz
03f40     20 00 90 5D |  if_ne	jmp	#LR__0178
03f44     58 5E 05 F1 | 	add	fp, #88
03f48     AF 54 02 FB | 	rdlong	local01, fp
03f4c     2A 5B 02 F6 | 	mov	local04, local01
03f50     01 5A 06 F1 | 	add	local04, #1
03f54     AF 5A 62 FC | 	wrlong	local04, fp
03f58     58 5E 85 F1 | 	sub	fp, #88
03f5c     2A 5B 48 FC | 	wrbyte	#45, local01
03f60     1C 00 90 FD | 	jmp	#LR__0179
03f64                 | LR__0178
03f64     58 5E 05 F1 | 	add	fp, #88
03f68     AF 54 02 FB | 	rdlong	local01, fp
03f6c     2A 5B 02 F6 | 	mov	local04, local01
03f70     01 5A 06 F1 | 	add	local04, #1
03f74     AF 5A 62 FC | 	wrlong	local04, fp
03f78     58 5E 85 F1 | 	sub	fp, #88
03f7c     2A 57 48 FC | 	wrbyte	#43, local01
03f80                 | LR__0179
03f80                 | LR__0180
03f80                 | LR__0181
03f80     58 5E 05 F1 | 	add	fp, #88
03f84     AF 4A 02 FB | 	rdlong	arg01, fp
03f88     4C 5E 85 F1 | 	sub	fp, #76
03f8c     AF 4C 02 FB | 	rdlong	arg02, fp
03f90     04 5E 05 F1 | 	add	fp, #4
03f94     AF 4E 02 FB | 	rdlong	arg03, fp
03f98     50 5E 05 F1 | 	add	fp, #80
03f9c     AF 50 02 FB | 	rdlong	arg04, fp
03fa0     00 5C 06 F6 | 	mov	local05, #0
03fa4     58 5E 85 F1 | 	sub	fp, #88
03fa8     AF 5E 02 FB | 	rdlong	local06, fp
03fac     08 5E 85 F1 | 	sub	fp, #8
03fb0     1D 5E 2E F4 | 	testbn	local06, #29 wz
03fb4     01 5C 06 56 |  if_ne	mov	local05, #1
03fb8     2E 53 02 F6 | 	mov	arg05, local05
03fbc     E8 0C B0 FD | 	call	#__system___uitoa
03fc0     12 61 02 F6 | 	mov	local07, result1
03fc4     5C 5E 05 F1 | 	add	fp, #92
03fc8     AF 54 02 FB | 	rdlong	local01, fp
03fcc     30 55 02 F1 | 	add	local01, local07
03fd0     AF 54 62 FC | 	wrlong	local01, fp
03fd4     08 5E 05 F1 | 	add	fp, #8
03fd8     AF 5A 02 FB | 	rdlong	local04, fp
03fdc     64 5E 85 F1 | 	sub	fp, #100
03fe0     2D 55 5A F2 | 	cmps	local01, local04 wcz
03fe4     64 00 90 ED |  if_be	jmp	#LR__0185
03fe8     54 C0 9F FE | 	loc	pa,	#(@LR__0183-@LR__0182)
03fec     93 00 A0 FD | 	call	#FCACHE_LOAD_
03ff0                 | LR__0182
03ff0     64 5E 05 F1 | 	add	fp, #100
03ff4     AF 54 02 FB | 	rdlong	local01, fp
03ff8     2A 5B 02 F6 | 	mov	local04, local01
03ffc     01 5A 86 F1 | 	sub	local04, #1
04000     AF 5A 62 FC | 	wrlong	local04, fp
04004     64 5E 85 F1 | 	sub	fp, #100
04008     00 54 5E F2 | 	cmps	local01, #0 wcz
0400c     20 00 90 ED |  if_be	jmp	#LR__0184
04010     58 5E 05 F1 | 	add	fp, #88
04014     AF 54 02 FB | 	rdlong	local01, fp
04018     2A 5B 02 F6 | 	mov	local04, local01
0401c     01 5A 06 F1 | 	add	local04, #1
04020     AF 5A 62 FC | 	wrlong	local04, fp
04024     58 5E 85 F1 | 	sub	fp, #88
04028     2A 47 48 FC | 	wrbyte	#35, local01
0402c     C0 FF 9F FD | 	jmp	#LR__0182
04030                 | LR__0183
04030                 | LR__0184
04030     58 5E 05 F1 | 	add	fp, #88
04034     AF 54 02 FB | 	rdlong	local01, fp
04038     2A 5B 02 F6 | 	mov	local04, local01
0403c     01 5A 06 F1 | 	add	local04, #1
04040     AF 5A 62 FC | 	wrlong	local04, fp
04044     58 5E 85 F1 | 	sub	fp, #88
04048     2A 01 48 FC | 	wrbyte	#0, local01
0404c                 | LR__0185
0404c     14 5E 05 F1 | 	add	fp, #20
04050     AF 4E 02 F6 | 	mov	arg03, fp
04054     10 5E 85 F1 | 	sub	fp, #16
04058     AF 4A 02 FB | 	rdlong	arg01, fp
0405c     04 5E 05 F1 | 	add	fp, #4
04060     AF 4C 02 FB | 	rdlong	arg02, fp
04064     08 5E 85 F1 | 	sub	fp, #8
04068     EC FB BF FD | 	call	#__system___fmtstr
0406c                 | LR__0186
0406c     AF F0 03 F6 | 	mov	ptra, fp
04070     BF 00 A0 FD | 	call	#popregs_
04074                 | __system___fmtnum_ret
04074     2D 00 64 FD | 	ret
04078                 | 
04078                 | __system___gc_ptrs
04078     0A 5A 05 F6 | 	mov	COUNT_, #10
0407c     B0 00 A0 FD | 	call	#pushregs_
04080     02 55 02 F6 | 	mov	local01, __heap_ptr
04084     2A 57 02 F6 | 	mov	local02, local01
04088     07 00 00 FF 
0408c     F8 57 06 F1 | 	add	local02, ##4088
04090     2A 59 0A FB | 	rdlong	local03, local01 wz
04094     74 00 90 5D |  if_ne	jmp	#LR__0187
04098     2B 5B 02 F6 | 	mov	local04, local02
0409c     2A 5B 82 F1 | 	sub	local04, local01
040a0     2A 03 58 FC | 	wrword	#1, local01
040a4     2A 5D 02 F6 | 	mov	local05, local01
040a8     02 5C 06 F1 | 	add	local05, #2
040ac     36 00 80 FF 
040b0     2E 21 59 FC | 	wrword	##27792, local05
040b4     2A 5F 02 F6 | 	mov	local06, local01
040b8     04 5E 06 F1 | 	add	local06, #4
040bc     2F 01 58 FC | 	wrword	#0, local06
040c0     2A 61 02 F6 | 	mov	local07, local01
040c4     06 60 06 F1 | 	add	local07, #6
040c8     30 03 58 FC | 	wrword	#1, local07
040cc     10 54 06 F1 | 	add	local01, #16
040d0     2D 59 52 F6 | 	abs	local03, local04 wc
040d4     04 58 46 F0 | 	shr	local03, #4
040d8     2C 59 62 C6 |  if_b	neg	local03, local03
040dc     2A 59 52 FC | 	wrword	local03, local01
040e0     2A 63 02 F6 | 	mov	local08, local01
040e4     02 62 06 F1 | 	add	local08, #2
040e8     36 00 80 FF 
040ec     31 1F 59 FC | 	wrword	##27791, local08
040f0     2A 65 02 F6 | 	mov	local09, local01
040f4     04 64 06 F1 | 	add	local09, #4
040f8     32 01 58 FC | 	wrword	#0, local09
040fc     2A 67 02 F6 | 	mov	local10, local01
04100     06 66 06 F1 | 	add	local10, #6
04104     33 01 58 FC | 	wrword	#0, local10
04108     10 54 86 F1 | 	sub	local01, #16
0410c                 | LR__0187
0410c     2B 27 02 F6 | 	mov	result2, local02
04110     2A 25 02 F6 | 	mov	result1, local01
04114     AF F0 03 F6 | 	mov	ptra, fp
04118     BF 00 A0 FD | 	call	#popregs_
0411c                 | __system___gc_ptrs_ret
0411c     2D 00 64 FD | 	ret
04120                 | 
04120                 | __system___gc_nextBlockPtr
04120     02 5A 05 F6 | 	mov	COUNT_, #2
04124     B0 00 A0 FD | 	call	#pushregs_
04128     25 55 02 F6 | 	mov	local01, arg01
0412c     2A 57 EA FA | 	rdword	local02, local01 wz
04130     10 00 90 5D |  if_ne	jmp	#LR__0188
04134     2C 00 00 FF 
04138     E4 4A 06 F6 | 	mov	arg01, ##@LR__0300
0413c     F8 01 B0 FD | 	call	#__system___gc_errmsg
04140     0C 00 90 FD | 	jmp	#LR__0189
04144                 | LR__0188
04144     04 56 66 F0 | 	shl	local02, #4
04148     2A 25 02 F6 | 	mov	result1, local01
0414c     2B 25 02 F1 | 	add	result1, local02
04150                 | LR__0189
04150     AF F0 03 F6 | 	mov	ptra, fp
04154     BF 00 A0 FD | 	call	#popregs_
04158                 | __system___gc_nextBlockPtr_ret
04158     2D 00 64 FD | 	ret
0415c                 | 
0415c                 | __system___gc_tryalloc
0415c     1B 5A 05 F6 | 	mov	COUNT_, #27
04160     B0 00 A0 FD | 	call	#pushregs_
04164     25 55 02 F6 | 	mov	local01, arg01
04168     26 57 02 F6 | 	mov	local02, arg02
0416c     08 FF BF FD | 	call	#__system___gc_ptrs
04170     12 59 02 F6 | 	mov	local03, result1
04174     13 5B 02 F6 | 	mov	local04, result2
04178     2C 5D 02 F6 | 	mov	local05, local03
0417c     00 5E 06 F6 | 	mov	local06, #0
04180     D4 BE 9F FE | 	loc	pa,	#(@LR__0191-@LR__0190)
04184     93 00 A0 FD | 	call	#FCACHE_LOAD_
04188                 | LR__0190
04188     2E 61 02 F6 | 	mov	local07, local05
0418c     06 5C 06 F1 | 	add	local05, #6
04190     2E 63 02 F6 | 	mov	local08, local05
04194     2C 65 02 F6 | 	mov	local09, local03
04198     31 67 E2 FA | 	rdword	local10, local08
0419c     32 4B 02 F6 | 	mov	arg01, local09
041a0     33 4D 0A F6 | 	mov	arg02, local10 wz
041a4     00 24 06 A6 |  if_e	mov	result1, #0
041a8     04 4C 66 50 |  if_ne	shl	arg02, #4
041ac     26 4B 02 51 |  if_ne	add	arg01, arg02
041b0     25 25 02 56 |  if_ne	mov	result1, arg01
041b4     12 69 02 F6 | 	mov	local11, result1
041b8     34 5D 0A F6 | 	mov	local05, local11 wz
041bc     2E 65 02 56 |  if_ne	mov	local09, local05
041c0     32 6B 02 56 |  if_ne	mov	local12, local09
041c4     35 5F E2 5A |  if_ne	rdword	local06, local12
041c8     00 5C 0E F2 | 	cmp	local05, #0 wz
041cc     10 00 90 AD |  if_e	jmp	#LR__0192
041d0     2D 5D 5A F2 | 	cmps	local05, local04 wcz
041d4     08 00 90 3D |  if_ae	jmp	#LR__0192
041d8     2F 55 5A F2 | 	cmps	local01, local06 wcz
041dc     A8 FF 9F 1D |  if_a	jmp	#LR__0190
041e0                 | LR__0191
041e0                 | LR__0192
041e0     00 5C 0E F2 | 	cmp	local05, #0 wz
041e4     2E 25 02 A6 |  if_e	mov	result1, local05
041e8     40 01 90 AD |  if_e	jmp	#LR__0195
041ec     2E 6D 02 F6 | 	mov	local13, local05
041f0     06 6C 06 F1 | 	add	local13, #6
041f4     36 6F E2 FA | 	rdword	local14, local13
041f8     2F 55 5A F2 | 	cmps	local01, local06 wcz
041fc     CC 00 90 3D |  if_ae	jmp	#LR__0194
04200     2E 71 02 F6 | 	mov	local15, local05
04204     38 55 52 FC | 	wrword	local01, local15
04208     2A 73 02 F6 | 	mov	local16, local01
0420c     04 72 66 F0 | 	shl	local16, #4
04210     2E 75 02 F6 | 	mov	local17, local05
04214     39 75 02 F1 | 	add	local17, local16
04218     2F 77 02 F6 | 	mov	local18, local06
0421c     2A 77 82 F1 | 	sub	local18, local01
04220     3A 79 02 F6 | 	mov	local19, local17
04224     3C 77 52 FC | 	wrword	local18, local19
04228     3A 7B 02 F6 | 	mov	local20, local17
0422c     02 7A 06 F1 | 	add	local20, #2
04230     36 00 80 FF 
04234     3D 1F 59 FC | 	wrword	##27791, local20
04238     3A 7D 02 F6 | 	mov	local21, local17
0423c     04 7C 06 F1 | 	add	local21, #4
04240     2E 4D 0A F6 | 	mov	arg02, local05 wz
04244     00 24 06 A6 |  if_e	mov	result1, #0
04248     2C 4D 82 51 |  if_ne	sub	arg02, local03
0424c     04 4C 46 50 |  if_ne	shr	arg02, #4
04250     26 25 02 56 |  if_ne	mov	result1, arg02
04254     3E 25 52 FC | 	wrword	result1, local21
04258     3A 7F 02 F6 | 	mov	local22, local17
0425c     36 65 E2 FA | 	rdword	local09, local13
04260     06 7E 06 F1 | 	add	local22, #6
04264     3F 65 52 FC | 	wrword	local09, local22
04268     3A 81 02 F6 | 	mov	local23, local17
0426c     40 4D 0A F6 | 	mov	arg02, local23 wz
04270     00 24 06 A6 |  if_e	mov	result1, #0
04274     2C 4D 82 51 |  if_ne	sub	arg02, local03
04278     04 4C 46 50 |  if_ne	shr	arg02, #4
0427c     26 25 02 56 |  if_ne	mov	result1, arg02
04280     12 6F 02 F6 | 	mov	local14, result1
04284     3A 4B 02 F6 | 	mov	arg01, local17
04288     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
0428c     12 83 0A F6 | 	mov	local24, result1 wz
04290     38 00 90 AD |  if_e	jmp	#LR__0193
04294     2D 83 5A F2 | 	cmps	local24, local04 wcz
04298     30 00 90 3D |  if_ae	jmp	#LR__0193
0429c     41 85 02 F6 | 	mov	local25, local24
042a0     04 84 06 F1 | 	add	local25, #4
042a4     2C 65 02 F6 | 	mov	local09, local03
042a8     40 67 02 F6 | 	mov	local10, local23
042ac     32 4B 02 F6 | 	mov	arg01, local09
042b0     33 4D 0A F6 | 	mov	arg02, local10 wz
042b4     00 24 06 A6 |  if_e	mov	result1, #0
042b8     25 4D 82 51 |  if_ne	sub	arg02, arg01
042bc     04 4C 46 50 |  if_ne	shr	arg02, #4
042c0     26 25 02 56 |  if_ne	mov	result1, arg02
042c4     12 69 02 F6 | 	mov	local11, result1
042c8     42 69 52 FC | 	wrword	local11, local25
042cc                 | LR__0193
042cc                 | LR__0194
042cc     06 60 06 F1 | 	add	local07, #6
042d0     30 6F 52 FC | 	wrword	local14, local07
042d4     36 00 00 FF 
042d8     80 64 06 F6 | 	mov	local09, ##27776
042dc     2B 65 42 F5 | 	or	local09, local02
042e0     2E 87 02 F6 | 	mov	local26, local05
042e4     02 86 06 F1 | 	add	local26, #2
042e8     01 24 62 FD | 	cogid	result1
042ec     12 65 42 F5 | 	or	local09, result1
042f0     43 65 52 FC | 	wrword	local09, local26
042f4     2C 89 02 F6 | 	mov	local27, local03
042f8     08 88 06 F1 | 	add	local27, #8
042fc     44 65 E2 FA | 	rdword	local09, local27
04300     36 65 52 FC | 	wrword	local09, local13
04304     2E 4D 0A F6 | 	mov	arg02, local05 wz
04308     00 24 06 A6 |  if_e	mov	result1, #0
0430c     2C 4D 82 51 |  if_ne	sub	arg02, local03
04310     04 4C 46 50 |  if_ne	shr	arg02, #4
04314     26 25 02 56 |  if_ne	mov	result1, arg02
04318     44 25 52 FC | 	wrword	result1, local27
0431c     08 5C 06 F1 | 	add	local05, #8
04320     2E 25 02 F6 | 	mov	result1, local05
04324     00 C0 31 FF 
04328     00 24 46 F5 | 	or	result1, ##1669332992
0432c                 | LR__0195
0432c     AF F0 03 F6 | 	mov	ptra, fp
04330     BF 00 A0 FD | 	call	#popregs_
04334                 | __system___gc_tryalloc_ret
04334     2D 00 64 FD | 	ret
04338                 | 
04338                 | __system___gc_errmsg
04338     02 5A 05 F6 | 	mov	COUNT_, #2
0433c     B0 00 A0 FD | 	call	#pushregs_
04340     25 55 02 F6 | 	mov	local01, arg01
04344                 | LR__0196
04344     2A 57 CA FA | 	rdbyte	local02, local01 wz
04348     01 54 06 F1 | 	add	local01, #1
0434c     0C 00 90 AD |  if_e	jmp	#LR__0197
04350     2B 4B 02 F6 | 	mov	arg01, local02
04354     8C F5 BF FD | 	call	#__system___tx
04358     E8 FF 9F FD | 	jmp	#LR__0196
0435c                 | LR__0197
0435c     00 24 06 F6 | 	mov	result1, #0
04360     AF F0 03 F6 | 	mov	ptra, fp
04364     BF 00 A0 FD | 	call	#popregs_
04368                 | __system___gc_errmsg_ret
04368     2D 00 64 FD | 	ret
0436c                 | 
0436c                 | __system___gc_alloc_managed
0436c     02 5A 05 F6 | 	mov	COUNT_, #2
04370     B0 00 A0 FD | 	call	#pushregs_
04374     25 55 02 F6 | 	mov	local01, arg01
04378     00 4C 06 F6 | 	mov	arg02, #0
0437c     30 00 B0 FD | 	call	#__system___gc_doalloc
04380     12 57 0A F6 | 	mov	local02, result1 wz
04384     18 00 90 5D |  if_ne	jmp	#LR__0198
04388     00 54 5E F2 | 	cmps	local01, #0 wcz
0438c     10 00 90 ED |  if_be	jmp	#LR__0198
04390     2C 00 00 FF 
04394     00 4B 06 F6 | 	mov	arg01, ##@LR__0301
04398     9C FF BF FD | 	call	#__system___gc_errmsg
0439c     04 00 90 FD | 	jmp	#LR__0199
043a0                 | LR__0198
043a0     2B 25 02 F6 | 	mov	result1, local02
043a4                 | LR__0199
043a4     AF F0 03 F6 | 	mov	ptra, fp
043a8     BF 00 A0 FD | 	call	#popregs_
043ac                 | __system___gc_alloc_managed_ret
043ac     2D 00 64 FD | 	ret
043b0                 | 
043b0                 | __system___gc_doalloc
043b0     07 5A 05 F6 | 	mov	COUNT_, #7
043b4     B0 00 A0 FD | 	call	#pushregs_
043b8     25 55 0A F6 | 	mov	local01, arg01 wz
043bc     26 57 02 F6 | 	mov	local02, arg02
043c0     00 24 06 A6 |  if_e	mov	result1, #0
043c4     8C 00 90 AD |  if_e	jmp	#LR__0207
043c8     17 54 06 F1 | 	add	local01, #23
043cc     0F 54 26 F5 | 	andn	local01, #15
043d0     04 54 46 F0 | 	shr	local01, #4
043d4     14 14 06 F1 | 	add	ptr___system__dat__, #20
043d8     0A 59 02 F6 | 	mov	local03, ptr___system__dat__
043dc     2C 4B 02 F6 | 	mov	arg01, local03
043e0     14 14 86 F1 | 	sub	ptr___system__dat__, #20
043e4     C4 F4 BF FD | 	call	#__system___lockmem
043e8     2A 4B 02 F6 | 	mov	arg01, local01
043ec     2B 4D 02 F6 | 	mov	arg02, local02
043f0     68 FD BF FD | 	call	#__system___gc_tryalloc
043f4     12 5B 0A F6 | 	mov	local04, result1 wz
043f8     14 00 90 5D |  if_ne	jmp	#LR__0200
043fc     10 03 B0 FD | 	call	#__system___gc_docollect
04400     2A 4B 02 F6 | 	mov	arg01, local01
04404     2B 4D 02 F6 | 	mov	arg02, local02
04408     50 FD BF FD | 	call	#__system___gc_tryalloc
0440c     12 5B 02 F6 | 	mov	local04, result1
04410                 | LR__0200
04410     2C 01 68 FC | 	wrlong	#0, local03
04414     00 5A 0E F2 | 	cmp	local04, #0 wz
04418     34 00 90 AD |  if_e	jmp	#LR__0206
0441c     04 54 66 F0 | 	shl	local01, #4
04420     08 54 86 F1 | 	sub	local01, #8
04424     2A 5D 52 F6 | 	abs	local05, local01 wc
04428     02 5C 46 F0 | 	shr	local05, #2
0442c     2E 5D 62 C6 |  if_b	neg	local05, local05
04430     2E 5F 0A F6 | 	mov	local06, local05 wz
04434     2D 61 02 F6 | 	mov	local07, local04
04438     14 00 90 AD |  if_e	jmp	#LR__0205
0443c     CC BB 9F FE | 	loc	pa,	#(@LR__0203-@LR__0201)
04440     93 00 A0 FD | 	call	#FCACHE_LOAD_
04444                 | LR__0201
04444     2F 05 D8 FC | 	rep	@LR__0204, local06
04448                 | LR__0202
04448     30 01 68 FC | 	wrlong	#0, local07
0444c     04 60 06 F1 | 	add	local07, #4
04450                 | LR__0203
04450                 | LR__0204
04450                 | LR__0205
04450                 | LR__0206
04450     2D 25 02 F6 | 	mov	result1, local04
04454                 | LR__0207
04454     AF F0 03 F6 | 	mov	ptra, fp
04458     BF 00 A0 FD | 	call	#popregs_
0445c                 | __system___gc_doalloc_ret
0445c     2D 00 64 FD | 	ret
04460                 | 
04460                 | __system___gc_isvalidptr
04460     27 2B 02 F6 | 	mov	_var01, arg03
04464     15 2D 02 F6 | 	mov	_var02, _var01
04468     00 F8 7F FF 
0446c     00 2C 06 F5 | 	and	_var02, ##-1048576
04470     00 C0 31 FF 
04474     00 2C 0E F2 | 	cmp	_var02, ##1669332992 wz
04478     00 24 06 56 |  if_ne	mov	result1, #0
0447c     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
04480     08 2A 86 F1 | 	sub	_var01, #8
04484     15 2F 02 F6 | 	mov	_var03, _var01
04488     00 F8 7F FF 
0448c     00 2E 26 F5 | 	andn	_var03, ##-1048576
04490     25 2F 5A F2 | 	cmps	_var03, arg01 wcz
04494     08 00 90 CD |  if_b	jmp	#LR__0208
04498     26 2F 5A F2 | 	cmps	_var03, arg02 wcz
0449c     08 00 90 CD |  if_b	jmp	#LR__0209
044a0                 | LR__0208
044a0     00 24 06 F6 | 	mov	result1, #0
044a4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
044a8                 | LR__0209
044a8     17 2D 02 F6 | 	mov	_var02, _var03
044ac     25 2D 62 F5 | 	xor	_var02, arg01
044b0     0F 2C 0E F5 | 	and	_var02, #15 wz
044b4     00 24 06 56 |  if_ne	mov	result1, #0
044b8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
044bc     17 31 02 F6 | 	mov	_var04, _var03
044c0     02 30 06 F1 | 	add	_var04, #2
044c4     18 2D E2 FA | 	rdword	_var02, _var04
044c8     7F 00 00 FF 
044cc     C0 2D 06 F5 | 	and	_var02, ##65472
044d0     36 00 00 FF 
044d4     80 2C 0E F2 | 	cmp	_var02, ##27776 wz
044d8     00 24 06 56 |  if_ne	mov	result1, #0
044dc     17 25 02 A6 |  if_e	mov	result1, _var03
044e0                 | __system___gc_isvalidptr_ret
044e0     2D 00 64 FD | 	ret
044e4                 | 
044e4                 | __system___gc_dofree
044e4     1A 5A 05 F6 | 	mov	COUNT_, #26
044e8     B0 00 A0 FD | 	call	#pushregs_
044ec     25 55 02 F6 | 	mov	local01, arg01
044f0     84 FB BF FD | 	call	#__system___gc_ptrs
044f4     13 57 02 F6 | 	mov	local02, result2
044f8     12 59 02 F6 | 	mov	local03, result1
044fc     2A 5B 02 F6 | 	mov	local04, local01
04500     02 5A 06 F1 | 	add	local04, #2
04504     36 00 80 FF 
04508     2D 1F 59 FC | 	wrword	##27791, local04
0450c     2A 5D 02 F6 | 	mov	local05, local01
04510     2A 4B 02 F6 | 	mov	arg01, local01
04514     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
04518     12 5F 02 F6 | 	mov	local06, result1
0451c     30 BB 9F FE | 	loc	pa,	#(@LR__0211-@LR__0210)
04520     93 00 A0 FD | 	call	#FCACHE_LOAD_
04524                 | LR__0210
04524     04 5C 06 F1 | 	add	local05, #4
04528     2E 61 02 F6 | 	mov	local07, local05
0452c     30 4D EA FA | 	rdword	arg02, local07 wz
04530     2C 4B 02 F6 | 	mov	arg01, local03
04534     00 24 06 A6 |  if_e	mov	result1, #0
04538     04 4C 66 50 |  if_ne	shl	arg02, #4
0453c     26 4B 02 51 |  if_ne	add	arg01, arg02
04540     25 25 02 56 |  if_ne	mov	result1, arg01
04544     12 5D 0A F6 | 	mov	local05, result1 wz
04548     28 00 90 AD |  if_e	jmp	#LR__0212
0454c     2E 4B 02 F6 | 	mov	arg01, local05
04550     00 62 06 F6 | 	mov	local08, #0
04554     02 4A 06 F1 | 	add	arg01, #2
04558     25 65 E2 FA | 	rdword	local09, arg01
0455c     36 00 00 FF 
04560     8F 64 0E F2 | 	cmp	local09, ##27791 wz
04564     01 62 66 A6 |  if_e	neg	local08, #1
04568     31 25 02 F6 | 	mov	result1, local08
0456c     12 67 0A F6 | 	mov	local10, result1 wz
04570     B0 FF 9F AD |  if_e	jmp	#LR__0210
04574                 | LR__0211
04574                 | LR__0212
04574     00 5C 0E F2 | 	cmp	local05, #0 wz
04578     2C 5D 02 A6 |  if_e	mov	local05, local03
0457c     2E 69 02 F6 | 	mov	local11, local05
04580     06 68 06 F1 | 	add	local11, #6
04584     2A 6B 02 F6 | 	mov	local12, local01
04588     34 6D E2 FA | 	rdword	local13, local11
0458c     06 6A 06 F1 | 	add	local12, #6
04590     35 6D 52 FC | 	wrword	local13, local12
04594     2A 4D 0A F6 | 	mov	arg02, local01 wz
04598     00 24 06 A6 |  if_e	mov	result1, #0
0459c     2C 4D 82 51 |  if_ne	sub	arg02, local03
045a0     04 4C 46 50 |  if_ne	shr	arg02, #4
045a4     26 25 02 56 |  if_ne	mov	result1, arg02
045a8     12 6F 02 F6 | 	mov	local14, result1
045ac     34 6F 52 FC | 	wrword	local14, local11
045b0     2C 5D 0A F2 | 	cmp	local05, local03 wz
045b4     74 00 90 AD |  if_e	jmp	#LR__0215
045b8     2E 4B 02 F6 | 	mov	arg01, local05
045bc     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
045c0     2A 25 0A F2 | 	cmp	result1, local01 wz
045c4     64 00 90 5D |  if_ne	jmp	#LR__0214
045c8     2E 71 02 F6 | 	mov	local15, local05
045cc     38 73 E2 FA | 	rdword	local16, local15
045d0     2A 75 02 F6 | 	mov	local17, local01
045d4     3A 67 E2 FA | 	rdword	local10, local17
045d8     33 73 02 F1 | 	add	local16, local10
045dc     38 73 52 FC | 	wrword	local16, local15
045e0     2D 01 58 FC | 	wrword	#0, local04
045e4     2A 4B 02 F6 | 	mov	arg01, local01
045e8     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
045ec     12 5F 02 F6 | 	mov	local06, result1
045f0     2B 5F 5A F2 | 	cmps	local06, local02 wcz
045f4     24 00 90 3D |  if_ae	jmp	#LR__0213
045f8     2F 77 02 F6 | 	mov	local18, local06
045fc     04 76 06 F1 | 	add	local18, #4
04600     2E 4D 0A F6 | 	mov	arg02, local05 wz
04604     00 24 06 A6 |  if_e	mov	result1, #0
04608     2C 4D 82 51 |  if_ne	sub	arg02, local03
0460c     04 4C 46 50 |  if_ne	shr	arg02, #4
04610     26 25 02 56 |  if_ne	mov	result1, arg02
04614     12 6F 02 F6 | 	mov	local14, result1
04618     3B 6F 52 FC | 	wrword	local14, local18
0461c                 | LR__0213
0461c     35 6D E2 FA | 	rdword	local13, local12
04620     34 6D 52 FC | 	wrword	local13, local11
04624     35 01 58 FC | 	wrword	#0, local12
04628     2E 55 02 F6 | 	mov	local01, local05
0462c                 | LR__0214
0462c                 | LR__0215
0462c     2A 4B 02 F6 | 	mov	arg01, local01
04630     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
04634     12 79 0A F6 | 	mov	local19, result1 wz
04638     C4 00 90 AD |  if_e	jmp	#LR__0217
0463c     2B 79 5A F2 | 	cmps	local19, local02 wcz
04640     BC 00 90 3D |  if_ae	jmp	#LR__0217
04644     3C 4B 02 F6 | 	mov	arg01, local19
04648     00 62 06 F6 | 	mov	local08, #0
0464c     02 4A 06 F1 | 	add	arg01, #2
04650     25 65 E2 FA | 	rdword	local09, arg01
04654     36 00 00 FF 
04658     8F 64 0E F2 | 	cmp	local09, ##27791 wz
0465c     01 62 66 A6 |  if_e	neg	local08, #1
04660     31 25 0A F6 | 	mov	result1, local08 wz
04664     98 00 90 AD |  if_e	jmp	#LR__0217
04668     2A 5D 02 F6 | 	mov	local05, local01
0466c     3C 55 02 F6 | 	mov	local01, local19
04670     2E 7B 02 F6 | 	mov	local20, local05
04674     3D 7D E2 FA | 	rdword	local21, local20
04678     2A 7F 02 F6 | 	mov	local22, local01
0467c     3F 67 E2 FA | 	rdword	local10, local22
04680     33 7D 02 F1 | 	add	local21, local10
04684     3D 7D 52 FC | 	wrword	local21, local20
04688     2A 81 02 F6 | 	mov	local23, local01
0468c     06 80 06 F1 | 	add	local23, #6
04690     2E 83 02 F6 | 	mov	local24, local05
04694     40 6D E2 FA | 	rdword	local13, local23
04698     06 82 06 F1 | 	add	local24, #6
0469c     41 6D 52 FC | 	wrword	local13, local24
046a0     2A 85 02 F6 | 	mov	local25, local01
046a4     02 84 06 F1 | 	add	local25, #2
046a8     42 55 59 FC | 	wrword	#170, local25
046ac     40 01 58 FC | 	wrword	#0, local23
046b0     2A 6D 02 F6 | 	mov	local13, local01
046b4     36 4B 02 F6 | 	mov	arg01, local13
046b8     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
046bc     12 67 02 F6 | 	mov	local10, result1
046c0     33 5F 0A F6 | 	mov	local06, local10 wz
046c4     38 00 90 AD |  if_e	jmp	#LR__0216
046c8     2B 5F 5A F2 | 	cmps	local06, local02 wcz
046cc     30 00 90 3D |  if_ae	jmp	#LR__0216
046d0     2F 87 02 F6 | 	mov	local26, local06
046d4     04 86 06 F1 | 	add	local26, #4
046d8     2C 6D 02 F6 | 	mov	local13, local03
046dc     2E 67 02 F6 | 	mov	local10, local05
046e0     36 4B 02 F6 | 	mov	arg01, local13
046e4     33 4D 0A F6 | 	mov	arg02, local10 wz
046e8     00 24 06 A6 |  if_e	mov	result1, #0
046ec     25 4D 82 51 |  if_ne	sub	arg02, arg01
046f0     04 4C 46 50 |  if_ne	shr	arg02, #4
046f4     26 25 02 56 |  if_ne	mov	result1, arg02
046f8     12 6F 02 F6 | 	mov	local14, result1
046fc     43 6F 52 FC | 	wrword	local14, local26
04700                 | LR__0216
04700                 | LR__0217
04700     2F 25 02 F6 | 	mov	result1, local06
04704     AF F0 03 F6 | 	mov	ptra, fp
04708     BF 00 A0 FD | 	call	#popregs_
0470c                 | __system___gc_dofree_ret
0470c     2D 00 64 FD | 	ret
04710                 | 
04710                 | __system___gc_docollect
04710     0C 5A 05 F6 | 	mov	COUNT_, #12
04714     B0 00 A0 FD | 	call	#pushregs_
04718     5C F9 BF FD | 	call	#__system___gc_ptrs
0471c     13 55 02 F6 | 	mov	local01, result2
04720     12 57 02 F6 | 	mov	local02, result1
04724     2B 4B 02 F6 | 	mov	arg01, local02
04728     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0472c     12 59 0A F6 | 	mov	local03, result1 wz
04730     01 24 62 FD | 	cogid	result1
04734     12 5B 02 F6 | 	mov	local04, result1
04738     2C 00 90 AD |  if_e	jmp	#LR__0219
0473c                 | LR__0218
0473c     2A 59 5A F2 | 	cmps	local03, local01 wcz
04740     24 00 90 3D |  if_ae	jmp	#LR__0219
04744     2C 5D 02 F6 | 	mov	local05, local03
04748     02 5C 06 F1 | 	add	local05, #2
0474c     2E 5F E2 FA | 	rdword	local06, local05
04750     20 5E 26 F5 | 	andn	local06, #32
04754     2E 5F 52 FC | 	wrword	local06, local05
04758     2C 4B 02 F6 | 	mov	arg01, local03
0475c     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04760     12 59 0A F6 | 	mov	local03, result1 wz
04764     D4 FF 9F 5D |  if_ne	jmp	#LR__0218
04768                 | LR__0219
04768     00 60 06 F6 | 	mov	local07, #0
0476c     00 4A 06 F6 | 	mov	arg01, #0
04770     D0 F0 BF FD | 	call	#__system____topofstack
04774     12 63 02 F6 | 	mov	local08, result1
04778     30 4B 02 F6 | 	mov	arg01, local07
0477c     31 4D 02 F6 | 	mov	arg02, local08
04780     A0 00 B0 FD | 	call	#__system___gc_markhub
04784     2C 01 B0 FD | 	call	#__system___gc_markcog
04788     2B 4B 02 F6 | 	mov	arg01, local02
0478c     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04790     12 65 0A F6 | 	mov	local09, result1 wz
04794     10 00 90 5D |  if_ne	jmp	#LR__0220
04798     2C 00 00 FF 
0479c     1D 4B 06 F6 | 	mov	arg01, ##@LR__0302
047a0     94 FB BF FD | 	call	#__system___gc_errmsg
047a4     70 00 90 FD | 	jmp	#LR__0226
047a8                 | LR__0220
047a8                 | LR__0221
047a8     32 59 02 F6 | 	mov	local03, local09
047ac     2C 4B 02 F6 | 	mov	arg01, local03
047b0     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
047b4     12 65 02 F6 | 	mov	local09, result1
047b8     2C 67 02 F6 | 	mov	local10, local03
047bc     02 66 06 F1 | 	add	local10, #2
047c0     33 69 E2 FA | 	rdword	local11, local10
047c4     20 68 CE F7 | 	test	local11, #32 wz
047c8     3C 00 90 5D |  if_ne	jmp	#LR__0224
047cc     34 6B 02 F6 | 	mov	local12, local11
047d0     10 6A 0E F5 | 	and	local12, #16 wz
047d4     30 00 90 5D |  if_ne	jmp	#LR__0224
047d8     34 61 02 F6 | 	mov	local07, local11
047dc     0F 60 06 F5 | 	and	local07, #15
047e0     30 69 02 F6 | 	mov	local11, local07
047e4     2D 69 0A F2 | 	cmp	local11, local04 wz
047e8     08 00 90 AD |  if_e	jmp	#LR__0222
047ec     0E 68 0E F2 | 	cmp	local11, #14 wz
047f0     14 00 90 5D |  if_ne	jmp	#LR__0223
047f4                 | LR__0222
047f4     2C 61 02 F6 | 	mov	local07, local03
047f8     30 4B 02 F6 | 	mov	arg01, local07
047fc     E4 FC BF FD | 	call	#__system___gc_dofree
04800     12 6B 02 F6 | 	mov	local12, result1
04804     35 65 02 F6 | 	mov	local09, local12
04808                 | LR__0223
04808                 | LR__0224
04808     00 64 0E F2 | 	cmp	local09, #0 wz
0480c     08 00 90 AD |  if_e	jmp	#LR__0225
04810     2A 65 5A F2 | 	cmps	local09, local01 wcz
04814     90 FF 9F CD |  if_b	jmp	#LR__0221
04818                 | LR__0225
04818                 | LR__0226
04818     AF F0 03 F6 | 	mov	ptra, fp
0481c     BF 00 A0 FD | 	call	#popregs_
04820                 | __system___gc_docollect_ret
04820     2D 00 64 FD | 	ret
04824                 | 
04824                 | __system___gc_markhub
04824     0A 5A 05 F6 | 	mov	COUNT_, #10
04828     B0 00 A0 FD | 	call	#pushregs_
0482c     25 55 02 F6 | 	mov	local01, arg01
04830     26 57 02 F6 | 	mov	local02, arg02
04834     40 F8 BF FD | 	call	#__system___gc_ptrs
04838     12 59 02 F6 | 	mov	local03, result1
0483c     13 5B 02 F6 | 	mov	local04, result2
04840                 | LR__0227
04840     2B 55 5A F2 | 	cmps	local01, local02 wcz
04844     60 00 90 3D |  if_ae	jmp	#LR__0228
04848     2A 4F 02 FB | 	rdlong	arg03, local01
0484c     04 54 06 F1 | 	add	local01, #4
04850     2C 4B 02 F6 | 	mov	arg01, local03
04854     2D 4D 02 F6 | 	mov	arg02, local04
04858     04 FC BF FD | 	call	#__system___gc_isvalidptr
0485c     12 5D 0A F6 | 	mov	local05, result1 wz
04860     DC FF 9F AD |  if_e	jmp	#LR__0227
04864     2E 4B 02 F6 | 	mov	arg01, local05
04868     00 5E 06 F6 | 	mov	local06, #0
0486c     02 4A 06 F1 | 	add	arg01, #2
04870     25 61 E2 FA | 	rdword	local07, arg01
04874     36 00 00 FF 
04878     8F 60 0E F2 | 	cmp	local07, ##27791 wz
0487c     01 5E 66 A6 |  if_e	neg	local06, #1
04880     2F 25 02 F6 | 	mov	result1, local06
04884     12 63 0A F6 | 	mov	local08, result1 wz
04888     B4 FF 9F 5D |  if_ne	jmp	#LR__0227
0488c     2E 65 02 F6 | 	mov	local09, local05
04890     02 64 06 F1 | 	add	local09, #2
04894     32 67 E2 FA | 	rdword	local10, local09
04898     0F 66 26 F5 | 	andn	local10, #15
0489c     2E 66 46 F5 | 	or	local10, #46
048a0     32 67 52 FC | 	wrword	local10, local09
048a4     98 FF 9F FD | 	jmp	#LR__0227
048a8                 | LR__0228
048a8     AF F0 03 F6 | 	mov	ptra, fp
048ac     BF 00 A0 FD | 	call	#popregs_
048b0                 | __system___gc_markhub_ret
048b0     2D 00 64 FD | 	ret
048b4                 | 
048b4                 | __system___gc_markcog
048b4     06 5A 05 F6 | 	mov	COUNT_, #6
048b8     B0 00 A0 FD | 	call	#pushregs_
048bc     B8 F7 BF FD | 	call	#__system___gc_ptrs
048c0     12 55 02 F6 | 	mov	local01, result1
048c4     13 57 02 F6 | 	mov	local02, result2
048c8     00 58 06 F6 | 	mov	local03, #0
048cc                 | LR__0229
048cc     F0 5B 06 F6 | 	mov	local04, #496
048d0     2C 5B 82 F1 | 	sub	local04, local03
048d4     F0 5B 06 F1 | 	add	local04, #496
048d8                 | 	'.live	local04
048d8     00 5A 96 F9 | 	alts	local04, #0
048dc     2D 5D 02 F6 | 	mov	local05, local04
048e0     2B 4D 02 F6 | 	mov	arg02, local02
048e4     2A 4B 02 F6 | 	mov	arg01, local01
048e8     2E 4F 02 F6 | 	mov	arg03, local05
048ec     70 FB BF FD | 	call	#__system___gc_isvalidptr
048f0     12 5D 0A F6 | 	mov	local05, result1 wz
048f4     10 00 90 AD |  if_e	jmp	#LR__0230
048f8     02 5C 06 F1 | 	add	local05, #2
048fc     2E 5F E2 FA | 	rdword	local06, local05
04900     20 5E 46 F5 | 	or	local06, #32
04904     2E 5F 52 FC | 	wrword	local06, local05
04908                 | LR__0230
04908     01 58 06 F1 | 	add	local03, #1
0490c     F0 59 5E F2 | 	cmps	local03, #496 wcz
04910     B8 FF 9F CD |  if_b	jmp	#LR__0229
04914     AF F0 03 F6 | 	mov	ptra, fp
04918     BF 00 A0 FD | 	call	#popregs_
0491c                 | __system___gc_markcog_ret
0491c     2D 00 64 FD | 	ret
04920                 | 
04920                 | __system__write
04920     03 5A 05 F6 | 	mov	COUNT_, #3
04924     B0 00 A0 FD | 	call	#pushregs_
04928     25 55 02 F6 | 	mov	local01, arg01
0492c     26 57 02 F6 | 	mov	local02, arg02
04930     27 59 02 F6 | 	mov	local03, arg03
04934     0A 54 1E F2 | 	cmp	local01, #10 wcz
04938     1C 00 90 CD |  if_b	jmp	#LR__0231
0493c     01 00 00 FF 
04940     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04944     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04948     01 00 00 FF 
0494c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04950     01 24 66 F6 | 	neg	result1, #1
04954     28 00 90 FD | 	jmp	#LR__0232
04958                 | LR__0231
04958     2A 4B 02 F6 | 	mov	arg01, local01
0495c     01 4A 66 F0 | 	shl	arg01, #1
04960     2A 4B 02 F1 | 	add	arg01, local01
04964     04 4A 66 F0 | 	shl	arg01, #4
04968     1C 14 06 F1 | 	add	ptr___system__dat__, #28
0496c     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
04970     2B 4D 02 F6 | 	mov	arg02, local02
04974     2C 4F 02 F6 | 	mov	arg03, local03
04978     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
0497c     4C 09 B0 FD | 	call	#__system___vfswrite
04980                 | LR__0232
04980     AF F0 03 F6 | 	mov	ptra, fp
04984     BF 00 A0 FD | 	call	#popregs_
04988                 | __system__write_ret
04988     2D 00 64 FD | 	ret
0498c                 | 
0498c                 | __system__read
0498c     03 5A 05 F6 | 	mov	COUNT_, #3
04990     B0 00 A0 FD | 	call	#pushregs_
04994     25 55 02 F6 | 	mov	local01, arg01
04998     26 57 02 F6 | 	mov	local02, arg02
0499c     27 59 02 F6 | 	mov	local03, arg03
049a0     0A 54 1E F2 | 	cmp	local01, #10 wcz
049a4     1C 00 90 CD |  if_b	jmp	#LR__0233
049a8     01 00 00 FF 
049ac     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
049b0     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
049b4     01 00 00 FF 
049b8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
049bc     01 24 66 F6 | 	neg	result1, #1
049c0     28 00 90 FD | 	jmp	#LR__0234
049c4                 | LR__0233
049c4     2A 4B 02 F6 | 	mov	arg01, local01
049c8     01 4A 66 F0 | 	shl	arg01, #1
049cc     2A 4B 02 F1 | 	add	arg01, local01
049d0     04 4A 66 F0 | 	shl	arg01, #4
049d4     1C 14 06 F1 | 	add	ptr___system__dat__, #28
049d8     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
049dc     2B 4D 02 F6 | 	mov	arg02, local02
049e0     2C 4F 02 F6 | 	mov	arg03, local03
049e4     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
049e8     A4 0A B0 FD | 	call	#__system___vfsread
049ec                 | LR__0234
049ec     AF F0 03 F6 | 	mov	ptra, fp
049f0     BF 00 A0 FD | 	call	#popregs_
049f4                 | __system__read_ret
049f4     2D 00 64 FD | 	ret
049f8                 | 
049f8                 | __system__close
049f8     01 5A 05 F6 | 	mov	COUNT_, #1
049fc     B0 00 A0 FD | 	call	#pushregs_
04a00     25 55 02 F6 | 	mov	local01, arg01
04a04     0A 54 1E F2 | 	cmp	local01, #10 wcz
04a08     1C 00 90 CD |  if_b	jmp	#LR__0235
04a0c     01 00 00 FF 
04a10     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04a14     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04a18     01 00 00 FF 
04a1c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04a20     01 24 66 F6 | 	neg	result1, #1
04a24     20 00 90 FD | 	jmp	#LR__0236
04a28                 | LR__0235
04a28     2A 4B 02 F6 | 	mov	arg01, local01
04a2c     01 4A 66 F0 | 	shl	arg01, #1
04a30     2A 4B 02 F1 | 	add	arg01, local01
04a34     04 4A 66 F0 | 	shl	arg01, #4
04a38     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04a3c     0A 4B 02 F1 | 	add	arg01, ptr___system__dat__
04a40     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04a44     80 03 B0 FD | 	call	#__system___closeraw
04a48                 | LR__0236
04a48     AF F0 03 F6 | 	mov	ptra, fp
04a4c     BF 00 A0 FD | 	call	#popregs_
04a50                 | __system__close_ret
04a50     2D 00 64 FD | 	ret
04a54                 | 
04a54                 | __system__lseek
04a54     09 5A 05 F6 | 	mov	COUNT_, #9
04a58     B0 00 A0 FD | 	call	#pushregs_
04a5c     25 55 02 F6 | 	mov	local01, arg01
04a60     26 57 02 F6 | 	mov	local02, arg02
04a64     27 59 02 F6 | 	mov	local03, arg03
04a68     0A 54 1E F2 | 	cmp	local01, #10 wcz
04a6c     1C 00 90 CD |  if_b	jmp	#LR__0237
04a70     01 00 00 FF 
04a74     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04a78     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04a7c     01 00 00 FF 
04a80     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04a84     01 24 66 F6 | 	neg	result1, #1
04a88     D8 00 90 FD | 	jmp	#LR__0241
04a8c                 | LR__0237
04a8c     2A 5B 02 F6 | 	mov	local04, local01
04a90     01 5A 66 F0 | 	shl	local04, #1
04a94     2A 5B 02 F1 | 	add	local04, local01
04a98     04 5A 66 F0 | 	shl	local04, #4
04a9c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04aa0     0A 5B 02 F1 | 	add	local04, ptr___system__dat__
04aa4     2C 5A 06 F1 | 	add	local04, #44
04aa8     2D 5D 0A FB | 	rdlong	local05, local04 wz
04aac     2C 5A 86 F1 | 	sub	local04, #44
04ab0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04ab4     1C 00 90 5D |  if_ne	jmp	#LR__0238
04ab8     01 00 00 FF 
04abc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04ac0     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
04ac4     01 00 00 FF 
04ac8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04acc     01 24 66 F6 | 	neg	result1, #1
04ad0     90 00 90 FD | 	jmp	#LR__0241
04ad4                 | LR__0238
04ad4     08 5A 06 F1 | 	add	local04, #8
04ad8     2D 5D 02 FB | 	rdlong	local05, local04
04adc     08 5A 86 F1 | 	sub	local04, #8
04ae0     40 5C CE F7 | 	test	local05, #64 wz
04ae4     14 00 90 AD |  if_e	jmp	#LR__0239
04ae8     08 5A 06 F1 | 	add	local04, #8
04aec     2D 5D 02 FB | 	rdlong	local05, local04
04af0     80 5C 46 F5 | 	or	local05, #128
04af4     2D 5D 62 FC | 	wrlong	local05, local04
04af8     08 5A 86 F1 | 	sub	local04, #8
04afc                 | LR__0239
04afc     2C 5A 06 F1 | 	add	local04, #44
04b00     2D 5D 02 FB | 	rdlong	local05, local04
04b04     2C 5A 86 F1 | 	sub	local04, #44
04b08     2E 5F 02 FB | 	rdlong	local06, local05
04b0c     04 5C 06 F1 | 	add	local05, #4
04b10     2E 61 02 FB | 	rdlong	local07, local05
04b14     2D 4B 02 F6 | 	mov	arg01, local04
04b18     2B 4D 02 F6 | 	mov	arg02, local02
04b1c     2C 4F 02 F6 | 	mov	arg03, local03
04b20     07 63 02 F6 | 	mov	local08, objptr
04b24     2F 0F 02 F6 | 	mov	objptr, local06
04b28     2D 60 62 FD | 	call	local07
04b2c     31 0F 02 F6 | 	mov	objptr, local08
04b30     12 65 02 F6 | 	mov	local09, result1
04b34     00 64 5E F2 | 	cmps	local09, #0 wcz
04b38     24 00 90 3D |  if_ae	jmp	#LR__0240
04b3c     32 4B 6A F6 | 	neg	arg01, local09 wz
04b40     01 00 00 FF 
04b44     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04b48     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
04b4c     01 00 00 FF 
04b50     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04b54     01 24 66 56 |  if_ne	neg	result1, #1
04b58     00 24 06 A6 |  if_e	mov	result1, #0
04b5c     04 00 90 FD | 	jmp	#LR__0241
04b60                 | LR__0240
04b60     32 25 02 F6 | 	mov	result1, local09
04b64                 | LR__0241
04b64     AF F0 03 F6 | 	mov	ptra, fp
04b68     BF 00 A0 FD | 	call	#popregs_
04b6c                 | __system__lseek_ret
04b6c     2D 00 64 FD | 	ret
04b70                 | 
04b70                 | __system____getftab
04b70     0A 4A 1E F2 | 	cmp	arg01, #10 wcz
04b74     00 24 06 36 |  if_ae	mov	result1, #0
04b78     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
04b7c     25 25 02 F6 | 	mov	result1, arg01
04b80     01 24 66 F0 | 	shl	result1, #1
04b84     25 25 02 F1 | 	add	result1, arg01
04b88     04 24 66 F0 | 	shl	result1, #4
04b8c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04b90     0A 25 02 F1 | 	add	result1, ptr___system__dat__
04b94     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04b98                 | __system____getftab_ret
04b98     2D 00 64 FD | 	ret
04b9c                 | 
04b9c                 | __system___strrev
04b9c     25 2B CA FA | 	rdbyte	_var01, arg01 wz
04ba0     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
04ba4     25 2D 02 F6 | 	mov	_var02, arg01
04ba8     60 B4 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
04bac     93 00 A0 FD | 	call	#FCACHE_LOAD_
04bb0                 | LR__0242
04bb0     16 2B CA FA | 	rdbyte	_var01, _var02 wz
04bb4     01 2C 06 51 |  if_ne	add	_var02, #1
04bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0242
04bbc                 | LR__0243
04bbc     01 2C 86 F1 | 	sub	_var02, #1
04bc0                 | LR__0244
04bc0     25 2D 5A F2 | 	cmps	_var02, arg01 wcz
04bc4     1C 00 90 ED |  if_be	jmp	#LR__0245
04bc8     25 2F C2 FA | 	rdbyte	_var03, arg01
04bcc     16 31 C2 FA | 	rdbyte	_var04, _var02
04bd0     25 31 42 FC | 	wrbyte	_var04, arg01
04bd4     16 2F 42 FC | 	wrbyte	_var03, _var02
04bd8     01 4A 06 F1 | 	add	arg01, #1
04bdc     01 2C 86 F1 | 	sub	_var02, #1
04be0     DC FF 9F FD | 	jmp	#LR__0244
04be4                 | LR__0245
04be4                 | __system___strrev_ret
04be4     2D 00 64 FD | 	ret
04be8                 | 
04be8                 | __system___fmtpad
04be8     0C 5A 05 F6 | 	mov	COUNT_, #12
04bec     B0 00 A0 FD | 	call	#pushregs_
04bf0     25 55 02 F6 | 	mov	local01, arg01
04bf4     26 57 02 F6 | 	mov	local02, arg02
04bf8     28 59 02 F6 | 	mov	local03, arg04
04bfc     2B 5B EA F8 | 	getbyte	local04, local02, #1
04c00     16 56 46 F0 | 	shr	local02, #22
04c04     03 56 0E F5 | 	and	local02, #3 wz
04c08     00 5C 06 F6 | 	mov	local05, #0
04c0c     01 56 06 A6 |  if_e	mov	local02, #1
04c10     2C 57 CA F7 | 	test	local02, local03 wz
04c14     00 24 06 A6 |  if_e	mov	result1, #0
04c18     80 00 90 AD |  if_e	jmp	#LR__0249
04c1c     27 5B 82 F1 | 	sub	local04, arg03
04c20     2D 5F 02 F6 | 	mov	local06, local04
04c24     00 5E 5E F2 | 	cmps	local06, #0 wcz
04c28     00 24 06 E6 |  if_be	mov	result1, #0
04c2c     6C 00 90 ED |  if_be	jmp	#LR__0249
04c30     03 56 0E F2 | 	cmp	local02, #3 wz
04c34     18 00 90 5D |  if_ne	jmp	#LR__0246
04c38     01 58 0E F2 | 	cmp	local03, #1 wz
04c3c     6E 60 62 FD | 	wrz	local07
04c40     30 5F 02 F1 | 	add	local06, local07
04c44     2F 5F 52 F6 | 	abs	local06, local06 wc
04c48     01 5E 46 F0 | 	shr	local06, #1
04c4c     2F 5F 62 C6 |  if_b	neg	local06, local06
04c50                 | LR__0246
04c50     00 5E 5E F2 | 	cmps	local06, #0 wcz
04c54     40 00 90 ED |  if_be	jmp	#LR__0248
04c58     2F 63 02 F6 | 	mov	local08, local06
04c5c                 | LR__0247
04c5c     2A 65 02 F6 | 	mov	local09, local01
04c60     32 61 02 FB | 	rdlong	local07, local09
04c64     04 64 06 F1 | 	add	local09, #4
04c68     32 67 02 FB | 	rdlong	local10, local09
04c6c     20 4A 06 F6 | 	mov	arg01, #32
04c70     07 69 02 F6 | 	mov	local11, objptr
04c74     30 0F 02 F6 | 	mov	objptr, local07
04c78     2D 66 62 FD | 	call	local10
04c7c     34 0F 02 F6 | 	mov	objptr, local11
04c80     12 6B 02 F6 | 	mov	local12, result1
04c84     00 6A 5E F2 | 	cmps	local12, #0 wcz
04c88     35 25 02 C6 |  if_b	mov	result1, local12
04c8c     0C 00 90 CD |  if_b	jmp	#LR__0249
04c90     35 5D 02 F1 | 	add	local05, local12
04c94     F1 63 6E FB | 	djnz	local08, #LR__0247
04c98                 | LR__0248
04c98     2E 25 02 F6 | 	mov	result1, local05
04c9c                 | LR__0249
04c9c     AF F0 03 F6 | 	mov	ptra, fp
04ca0     BF 00 A0 FD | 	call	#popregs_
04ca4                 | __system___fmtpad_ret
04ca4     2D 00 64 FD | 	ret
04ca8                 | 
04ca8                 | __system___uitoa
04ca8     09 5A 05 F6 | 	mov	COUNT_, #9
04cac     B0 00 A0 FD | 	call	#pushregs_
04cb0     25 55 02 F6 | 	mov	local01, arg01
04cb4     26 57 02 F6 | 	mov	local02, arg02
04cb8     27 59 02 F6 | 	mov	local03, arg03
04cbc     28 5B 02 F6 | 	mov	local04, arg04
04cc0     29 5D 0A F6 | 	mov	local05, arg05 wz
04cc4     2A 5F 02 F6 | 	mov	local06, local01
04cc8     00 60 06 F6 | 	mov	local07, #0
04ccc     37 62 06 56 |  if_ne	mov	local08, #55
04cd0     57 62 06 A6 |  if_e	mov	local08, #87
04cd4                 | LR__0250
04cd4     2B 09 03 F6 | 	mov	muldiva_, local02
04cd8     2C 0B 03 F6 | 	mov	muldivb_, local03
04cdc     CC 00 A0 FD | 	call	#unsdivide_
04ce0     84 65 02 F6 | 	mov	local09, muldiva_
04ce4     0A 64 1E F2 | 	cmp	local09, #10 wcz
04ce8     30 64 06 C1 |  if_b	add	local09, #48
04cec     31 65 02 31 |  if_ae	add	local09, local08
04cf0     2F 65 42 FC | 	wrbyte	local09, local06
04cf4     2B 09 03 F6 | 	mov	muldiva_, local02
04cf8     2C 0B 03 F6 | 	mov	muldivb_, local03
04cfc     01 5E 06 F1 | 	add	local06, #1
04d00     CC 00 A0 FD | 	call	#unsdivide_
04d04     85 57 0A F6 | 	mov	local02, muldivb_ wz
04d08     01 60 06 F1 | 	add	local07, #1
04d0c     C4 FF 9F 5D |  if_ne	jmp	#LR__0250
04d10     2D 61 1A F2 | 	cmp	local07, local04 wcz
04d14     BC FF 9F CD |  if_b	jmp	#LR__0250
04d18     2F 01 48 FC | 	wrbyte	#0, local06
04d1c     2A 4B 02 F6 | 	mov	arg01, local01
04d20     78 FE BF FD | 	call	#__system___strrev
04d24     30 25 02 F6 | 	mov	result1, local07
04d28     AF F0 03 F6 | 	mov	ptra, fp
04d2c     BF 00 A0 FD | 	call	#popregs_
04d30                 | __system___uitoa_ret
04d30     2D 00 64 FD | 	ret
04d34                 | 
04d34                 | __system___gettxfunc
04d34     03 5A 05 F6 | 	mov	COUNT_, #3
04d38     B0 00 A0 FD | 	call	#pushregs_
04d3c     30 FE BF FD | 	call	#__system____getftab
04d40     12 55 0A F6 | 	mov	local01, result1 wz
04d44     14 00 90 AD |  if_e	jmp	#LR__0251
04d48     08 54 06 F1 | 	add	local01, #8
04d4c     2A 57 02 FB | 	rdlong	local02, local01
04d50     08 54 86 F1 | 	sub	local01, #8
04d54     2B 59 0A F6 | 	mov	local03, local02 wz
04d58     08 00 90 5D |  if_ne	jmp	#LR__0252
04d5c                 | LR__0251
04d5c     00 24 06 F6 | 	mov	result1, #0
04d60     0C 00 90 FD | 	jmp	#LR__0253
04d64                 | LR__0252
04d64     2A 4B 02 F6 | 	mov	arg01, local01
04d68     09 4D 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
04d6c     FC EA BF FD | 	call	#__system___make_methodptr
04d70                 | LR__0253
04d70     AF F0 03 F6 | 	mov	ptra, fp
04d74     BF 00 A0 FD | 	call	#popregs_
04d78                 | __system___gettxfunc_ret
04d78     2D 00 64 FD | 	ret
04d7c                 | 
04d7c                 | __system___getiolock_0102
04d7c     03 5A 05 F6 | 	mov	COUNT_, #3
04d80     B0 00 A0 FD | 	call	#pushregs_
04d84     E8 FD BF FD | 	call	#__system____getftab
04d88     12 55 0A F6 | 	mov	local01, result1 wz
04d8c     14 00 90 AD |  if_e	jmp	#LR__0254
04d90     08 54 06 F1 | 	add	local01, #8
04d94     2A 57 02 FB | 	rdlong	local02, local01
04d98     08 54 86 F1 | 	sub	local01, #8
04d9c     2B 59 0A F6 | 	mov	local03, local02 wz
04da0     10 00 90 5D |  if_ne	jmp	#LR__0255
04da4                 | LR__0254
04da4     18 14 06 F1 | 	add	ptr___system__dat__, #24
04da8     0A 25 02 F6 | 	mov	result1, ptr___system__dat__
04dac     18 14 86 F1 | 	sub	ptr___system__dat__, #24
04db0     08 00 90 FD | 	jmp	#LR__0256
04db4                 | LR__0255
04db4     0C 54 06 F1 | 	add	local01, #12
04db8     2A 25 02 F6 | 	mov	result1, local01
04dbc                 | LR__0256
04dbc     AF F0 03 F6 | 	mov	ptra, fp
04dc0     BF 00 A0 FD | 	call	#popregs_
04dc4                 | __system___getiolock_0102_ret
04dc4     2D 00 64 FD | 	ret
04dc8                 | 
04dc8                 | __system___closeraw
04dc8     06 5A 05 F6 | 	mov	COUNT_, #6
04dcc     B0 00 A0 FD | 	call	#pushregs_
04dd0     25 55 02 F6 | 	mov	local01, arg01
04dd4     00 56 06 F6 | 	mov	local02, #0
04dd8     08 54 06 F1 | 	add	local01, #8
04ddc     2A 59 0A FB | 	rdlong	local03, local01 wz
04de0     08 54 86 F1 | 	sub	local01, #8
04de4     1C 00 90 5D |  if_ne	jmp	#LR__0257
04de8     01 00 00 FF 
04dec     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04df0     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04df4     01 00 00 FF 
04df8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04dfc     01 24 66 F6 | 	neg	result1, #1
04e00     90 00 90 FD | 	jmp	#LR__0260
04e04                 | LR__0257
04e04     28 54 06 F1 | 	add	local01, #40
04e08     2A 59 0A FB | 	rdlong	local03, local01 wz
04e0c     28 54 86 F1 | 	sub	local01, #40
04e10     2C 00 90 AD |  if_e	jmp	#LR__0258
04e14     28 54 06 F1 | 	add	local01, #40
04e18     2A 59 02 FB | 	rdlong	local03, local01
04e1c     28 54 86 F1 | 	sub	local01, #40
04e20     2C 5B 02 FB | 	rdlong	local04, local03
04e24     04 58 06 F1 | 	add	local03, #4
04e28     2C 5D 02 FB | 	rdlong	local05, local03
04e2c     2A 4B 02 F6 | 	mov	arg01, local01
04e30     07 5F 02 F6 | 	mov	local06, objptr
04e34     2D 0F 02 F6 | 	mov	objptr, local04
04e38     2D 5C 62 FD | 	call	local05
04e3c     2F 0F 02 F6 | 	mov	objptr, local06
04e40                 | LR__0258
04e40     20 54 06 F1 | 	add	local01, #32
04e44     2A 59 0A FB | 	rdlong	local03, local01 wz
04e48     20 54 86 F1 | 	sub	local01, #32
04e4c     30 00 90 AD |  if_e	jmp	#LR__0259
04e50     20 54 06 F1 | 	add	local01, #32
04e54     2A 59 02 FB | 	rdlong	local03, local01
04e58     20 54 86 F1 | 	sub	local01, #32
04e5c     2C 5B 02 FB | 	rdlong	local04, local03
04e60     04 58 06 F1 | 	add	local03, #4
04e64     2C 5D 02 FB | 	rdlong	local05, local03
04e68     2A 4B 02 F6 | 	mov	arg01, local01
04e6c     07 5F 02 F6 | 	mov	local06, objptr
04e70     2D 0F 02 F6 | 	mov	objptr, local04
04e74     2D 5C 62 FD | 	call	local05
04e78     2F 0F 02 F6 | 	mov	objptr, local06
04e7c     12 57 02 F6 | 	mov	local02, result1
04e80                 | LR__0259
04e80     2A 4B 02 F6 | 	mov	arg01, local01
04e84     00 4C 06 F6 | 	mov	arg02, #0
04e88     30 4E 06 F6 | 	mov	arg03, #48
04e8c     A0 00 A0 FD | 	call	#\builtin_bytefill_
04e90     2B 25 02 F6 | 	mov	result1, local02
04e94                 | LR__0260
04e94     AF F0 03 F6 | 	mov	ptra, fp
04e98     BF 00 A0 FD | 	call	#popregs_
04e9c                 | __system___closeraw_ret
04e9c     2D 00 64 FD | 	ret
04ea0                 | 
04ea0                 | __system____default_getc
04ea0     0C 5A 05 F6 | 	mov	COUNT_, #12
04ea4     B0 00 A0 FD | 	call	#pushregs_
04ea8     25 55 02 F6 | 	mov	local01, arg01
04eac     2A 57 02 FB | 	rdlong	local02, local01
04eb0     08 56 06 F1 | 	add	local02, #8
04eb4     2B 59 02 FB | 	rdlong	local03, local02
04eb8     08 56 86 F1 | 	sub	local02, #8
04ebc     02 58 CE F7 | 	test	local03, #2 wz
04ec0     08 00 90 AD |  if_e	jmp	#LR__0261
04ec4     2A 4B 02 F6 | 	mov	arg01, local01
04ec8     FC 01 B0 FD | 	call	#__system____default_flush
04ecc                 | LR__0261
04ecc     08 56 06 F1 | 	add	local02, #8
04ed0     2B 59 02 FB | 	rdlong	local03, local02
04ed4     01 58 46 F5 | 	or	local03, #1
04ed8     2B 59 62 FC | 	wrlong	local03, local02
04edc     08 56 86 F1 | 	sub	local02, #8
04ee0     2B 5B 0A FB | 	rdlong	local04, local02 wz
04ee4     7C 00 90 5D |  if_ne	jmp	#LR__0263
04ee8     2A 4B 02 F6 | 	mov	arg01, local01
04eec     25 5D 02 FB | 	rdlong	local05, arg01
04ef0     0C 5C 06 F1 | 	add	local05, #12
04ef4     2E 4D 02 F6 | 	mov	arg02, local05
04ef8     0C 5C 86 F1 | 	sub	local05, #12
04efc     10 4A 06 F1 | 	add	arg01, #16
04f00     25 5F 02 FB | 	rdlong	local06, arg01
04f04     10 4A 86 F1 | 	sub	arg01, #16
04f08     2F 61 02 FB | 	rdlong	local07, local06
04f0c     04 5E 06 F1 | 	add	local06, #4
04f10     2F 63 02 FB | 	rdlong	local08, local06
04f14     0A 4E C6 F9 | 	decod	arg03, #10
04f18     07 65 02 F6 | 	mov	local09, objptr
04f1c     30 0F 02 F6 | 	mov	objptr, local07
04f20     2D 62 62 FD | 	call	local08
04f24     32 0F 02 F6 | 	mov	objptr, local09
04f28     12 67 02 F6 | 	mov	local10, result1
04f2c     00 66 5E F2 | 	cmps	local10, #0 wcz
04f30     01 24 66 C6 |  if_b	neg	result1, #1
04f34     28 00 90 CD |  if_b	jmp	#LR__0262
04f38     2E 67 62 FC | 	wrlong	local10, local05
04f3c     0C 5C 06 F1 | 	add	local05, #12
04f40     2E 69 02 F6 | 	mov	local11, local05
04f44     08 5C 86 F1 | 	sub	local05, #8
04f48     2E 69 62 FC | 	wrlong	local11, local05
04f4c     04 5C 06 F1 | 	add	local05, #4
04f50     2E 5F 02 FB | 	rdlong	local06, local05
04f54     01 5E 46 F5 | 	or	local06, #1
04f58     2E 5F 62 FC | 	wrlong	local06, local05
04f5c     33 25 02 F6 | 	mov	result1, local10
04f60                 | LR__0262
04f60     12 5B 02 F6 | 	mov	local04, result1
04f64                 | LR__0263
04f64     00 5A 5E F2 | 	cmps	local04, #0 wcz
04f68     01 24 66 E6 |  if_be	neg	result1, #1
04f6c     1C 00 90 ED |  if_be	jmp	#LR__0264
04f70     01 5A 86 F1 | 	sub	local04, #1
04f74     2B 5B 62 FC | 	wrlong	local04, local02
04f78     04 56 06 F1 | 	add	local02, #4
04f7c     2B 6B 02 FB | 	rdlong	local12, local02
04f80     35 25 C2 FA | 	rdbyte	result1, local12
04f84     01 6A 06 F1 | 	add	local12, #1
04f88     2B 6B 62 FC | 	wrlong	local12, local02
04f8c                 | LR__0264
04f8c     AF F0 03 F6 | 	mov	ptra, fp
04f90     BF 00 A0 FD | 	call	#popregs_
04f94                 | __system____default_getc_ret
04f94     2D 00 64 FD | 	ret
04f98                 | 
04f98                 | __system____default_putc
04f98     06 5A 05 F6 | 	mov	COUNT_, #6
04f9c     B0 00 A0 FD | 	call	#pushregs_
04fa0     25 55 02 F6 | 	mov	local01, arg01
04fa4     26 57 02 F6 | 	mov	local02, arg02
04fa8     2B 59 02 FB | 	rdlong	local03, local02
04fac     08 58 06 F1 | 	add	local03, #8
04fb0     2C 5B 02 FB | 	rdlong	local04, local03
04fb4     08 58 86 F1 | 	sub	local03, #8
04fb8     01 5A CE F7 | 	test	local04, #1 wz
04fbc     08 00 90 AD |  if_e	jmp	#LR__0265
04fc0     2B 4B 02 F6 | 	mov	arg01, local02
04fc4     00 01 B0 FD | 	call	#__system____default_flush
04fc8                 | LR__0265
04fc8     08 58 06 F1 | 	add	local03, #8
04fcc     2C 5B 02 FB | 	rdlong	local04, local03
04fd0     02 5A 46 F5 | 	or	local04, #2
04fd4     2C 5B 62 FC | 	wrlong	local04, local03
04fd8     08 58 86 F1 | 	sub	local03, #8
04fdc     2C 5D 02 FB | 	rdlong	local05, local03
04fe0     2E 5F 02 F6 | 	mov	local06, local05
04fe4     0C 58 06 F1 | 	add	local03, #12
04fe8     2C 5F 02 F1 | 	add	local06, local03
04fec     2F 55 42 FC | 	wrbyte	local01, local06
04ff0     FF 54 06 F5 | 	and	local01, #255
04ff4     01 5C 06 F1 | 	add	local05, #1
04ff8     0C 58 86 F1 | 	sub	local03, #12
04ffc     2C 5D 62 FC | 	wrlong	local05, local03
05000     02 00 00 FF 
05004     00 5C 0E F2 | 	cmp	local05, ##1024 wz
05008     10 00 90 5D |  if_ne	jmp	#LR__0266
0500c     2B 4B 02 F6 | 	mov	arg01, local02
05010     B4 00 B0 FD | 	call	#__system____default_flush
05014     00 24 0E F2 | 	cmp	result1, #0 wz
05018     01 54 66 56 |  if_ne	neg	local01, #1
0501c                 | LR__0266
0501c     2A 25 02 F6 | 	mov	result1, local01
05020     AF F0 03 F6 | 	mov	ptra, fp
05024     BF 00 A0 FD | 	call	#popregs_
05028                 | __system____default_putc_ret
05028     2D 00 64 FD | 	ret
0502c                 | 
0502c                 | __system____default_putc_terminal
0502c     06 5A 05 F6 | 	mov	COUNT_, #6
05030     B0 00 A0 FD | 	call	#pushregs_
05034     25 55 02 F6 | 	mov	local01, arg01
05038     26 57 02 F6 | 	mov	local02, arg02
0503c     2B 59 02 FB | 	rdlong	local03, local02
05040     08 58 06 F1 | 	add	local03, #8
05044     2C 5B 02 FB | 	rdlong	local04, local03
05048     08 58 86 F1 | 	sub	local03, #8
0504c     01 5A CE F7 | 	test	local04, #1 wz
05050     08 00 90 AD |  if_e	jmp	#LR__0267
05054     2B 4B 02 F6 | 	mov	arg01, local02
05058     6C 00 B0 FD | 	call	#__system____default_flush
0505c                 | LR__0267
0505c     08 58 06 F1 | 	add	local03, #8
05060     2C 5B 02 FB | 	rdlong	local04, local03
05064     02 5A 46 F5 | 	or	local04, #2
05068     2C 5B 62 FC | 	wrlong	local04, local03
0506c     08 58 86 F1 | 	sub	local03, #8
05070     2C 5D 02 FB | 	rdlong	local05, local03
05074     2E 5F 02 F6 | 	mov	local06, local05
05078     0C 58 06 F1 | 	add	local03, #12
0507c     2C 5F 02 F1 | 	add	local06, local03
05080     2F 55 42 FC | 	wrbyte	local01, local06
05084     FF 54 06 F5 | 	and	local01, #255
05088     0C 58 86 F1 | 	sub	local03, #12
0508c     01 5C 06 F1 | 	add	local05, #1
05090     2C 5D 62 FC | 	wrlong	local05, local03
05094     0A 54 0E F2 | 	cmp	local01, #10 wz
05098     0C 00 90 AD |  if_e	jmp	#LR__0268
0509c     02 00 00 FF 
050a0     00 5C 0E F2 | 	cmp	local05, ##1024 wz
050a4     10 00 90 5D |  if_ne	jmp	#LR__0269
050a8                 | LR__0268
050a8     2B 4B 02 F6 | 	mov	arg01, local02
050ac     18 00 B0 FD | 	call	#__system____default_flush
050b0     00 24 0E F2 | 	cmp	result1, #0 wz
050b4     01 54 66 56 |  if_ne	neg	local01, #1
050b8                 | LR__0269
050b8     2A 25 02 F6 | 	mov	result1, local01
050bc     AF F0 03 F6 | 	mov	ptra, fp
050c0     BF 00 A0 FD | 	call	#popregs_
050c4                 | __system____default_putc_terminal_ret
050c4     2D 00 64 FD | 	ret
050c8                 | 
050c8                 | __system____default_flush
050c8     0F 5A 05 F6 | 	mov	COUNT_, #15
050cc     B0 00 A0 FD | 	call	#pushregs_
050d0     25 55 02 F6 | 	mov	local01, arg01
050d4     2A 57 02 FB | 	rdlong	local02, local01
050d8     2B 59 02 FB | 	rdlong	local03, local02
050dc     08 56 06 F1 | 	add	local02, #8
050e0     2B 5B 02 FB | 	rdlong	local04, local02
050e4     08 56 86 F1 | 	sub	local02, #8
050e8     02 5A CE F7 | 	test	local04, #2 wz
050ec     B8 00 90 AD |  if_e	jmp	#LR__0272
050f0     00 58 5E F2 | 	cmps	local03, #0 wcz
050f4     30 01 90 ED |  if_be	jmp	#LR__0274
050f8     08 54 06 F1 | 	add	local01, #8
050fc     2A 5B 02 FB | 	rdlong	local04, local01
05100     08 54 86 F1 | 	sub	local01, #8
05104     40 5A CE F7 | 	test	local04, #64 wz
05108     5C 00 90 AD |  if_e	jmp	#LR__0271
0510c     08 54 06 F1 | 	add	local01, #8
05110     2A 5B 02 FB | 	rdlong	local04, local01
05114     08 54 86 F1 | 	sub	local01, #8
05118     80 5A CE F7 | 	test	local04, #128 wz
0511c     48 00 90 AD |  if_e	jmp	#LR__0270
05120     2C 54 06 F1 | 	add	local01, #44
05124     2A 5B 02 FB | 	rdlong	local04, local01
05128     2C 54 86 F1 | 	sub	local01, #44
0512c     2D 5D 02 FB | 	rdlong	local05, local04
05130     04 5A 06 F1 | 	add	local04, #4
05134     2D 5F 02 FB | 	rdlong	local06, local04
05138     2A 4B 02 F6 | 	mov	arg01, local01
0513c     00 4C 06 F6 | 	mov	arg02, #0
05140     02 4E 06 F6 | 	mov	arg03, #2
05144     07 61 02 F6 | 	mov	local07, objptr
05148     2E 0F 02 F6 | 	mov	objptr, local05
0514c     2D 5E 62 FD | 	call	local06
05150     30 0F 02 F6 | 	mov	objptr, local07
05154     08 54 06 F1 | 	add	local01, #8
05158     2A 5B 02 FB | 	rdlong	local04, local01
0515c     80 5A 26 F5 | 	andn	local04, #128
05160     2A 5B 62 FC | 	wrlong	local04, local01
05164     08 54 86 F1 | 	sub	local01, #8
05168                 | LR__0270
05168                 | LR__0271
05168     0C 56 06 F1 | 	add	local02, #12
0516c     2B 4D 02 F6 | 	mov	arg02, local02
05170     0C 56 86 F1 | 	sub	local02, #12
05174     14 54 06 F1 | 	add	local01, #20
05178     2A 5B 02 FB | 	rdlong	local04, local01
0517c     14 54 86 F1 | 	sub	local01, #20
05180     2D 5D 02 FB | 	rdlong	local05, local04
05184     04 5A 06 F1 | 	add	local04, #4
05188     2D 5F 02 FB | 	rdlong	local06, local04
0518c     2A 4B 02 F6 | 	mov	arg01, local01
05190     2C 4F 02 F6 | 	mov	arg03, local03
05194     07 61 02 F6 | 	mov	local07, objptr
05198     2E 0F 02 F6 | 	mov	objptr, local05
0519c     2D 5E 62 FD | 	call	local06
051a0     30 0F 02 F6 | 	mov	objptr, local07
051a4     80 00 90 FD | 	jmp	#LR__0274
051a8                 | LR__0272
051a8     08 56 06 F1 | 	add	local02, #8
051ac     2B 5B 02 FB | 	rdlong	local04, local02
051b0     08 56 86 F1 | 	sub	local02, #8
051b4     01 5A CE F7 | 	test	local04, #1 wz
051b8     6C 00 90 AD |  if_e	jmp	#LR__0273
051bc     00 58 0E F2 | 	cmp	local03, #0 wz
051c0     64 00 90 AD |  if_e	jmp	#LR__0273
051c4     2C 54 06 F1 | 	add	local01, #44
051c8     2A 63 02 FB | 	rdlong	local08, local01
051cc     2C 54 86 F1 | 	sub	local01, #44
051d0     31 5B 02 F6 | 	mov	local04, local08
051d4     2D 5D 02 FB | 	rdlong	local05, local04
051d8     04 5A 06 F1 | 	add	local04, #4
051dc     2D 65 02 FB | 	rdlong	local09, local04
051e0     04 5A 86 F1 | 	sub	local04, #4
051e4     32 5F 02 F6 | 	mov	local06, local09
051e8     2A 67 02 F6 | 	mov	local10, local01
051ec     2C 69 02 F6 | 	mov	local11, local03
051f0     34 69 62 F6 | 	neg	local11, local11
051f4     34 6B 02 F6 | 	mov	local12, local11
051f8     01 60 06 F6 | 	mov	local07, #1
051fc     33 4B 02 F6 | 	mov	arg01, local10
05200     35 4D 02 F6 | 	mov	arg02, local12
05204     01 4E 06 F6 | 	mov	arg03, #1
05208     07 6D 02 F6 | 	mov	local13, objptr
0520c     2E 0F 02 F6 | 	mov	objptr, local05
05210     2D 5E 62 FD | 	call	local06
05214     36 0F 02 F6 | 	mov	objptr, local13
05218     12 6F 02 F6 | 	mov	local14, result1
0521c     37 71 02 F6 | 	mov	local15, local14
05220     00 70 5E F2 | 	cmps	local15, #0 wcz
05224     2C 71 02 36 |  if_ae	mov	local15, local03
05228                 | LR__0273
05228                 | LR__0274
05228     2B 01 68 FC | 	wrlong	#0, local02
0522c     04 56 06 F1 | 	add	local02, #4
05230     2B 01 68 FC | 	wrlong	#0, local02
05234     04 56 06 F1 | 	add	local02, #4
05238     2B 01 68 FC | 	wrlong	#0, local02
0523c     00 24 06 F6 | 	mov	result1, #0
05240     AF F0 03 F6 | 	mov	ptra, fp
05244     BF 00 A0 FD | 	call	#popregs_
05248                 | __system____default_flush_ret
05248     2D 00 64 FD | 	ret
0524c                 | 
0524c                 | __system___rxtxioctl_0131
0524c     02 5A 05 F6 | 	mov	COUNT_, #2
05250     B0 00 A0 FD | 	call	#pushregs_
05254     26 55 02 F6 | 	mov	local01, arg02
05258     27 57 02 F6 | 	mov	local02, arg03
0525c     00 55 0E F2 | 	cmp	local01, #256 wz
05260     0C 00 90 AD |  if_e	jmp	#LR__0275
05264     01 55 0E F2 | 	cmp	local01, #257 wz
05268     1C 00 90 AD |  if_e	jmp	#LR__0276
0526c     30 00 90 FD | 	jmp	#LR__0277
05270                 | LR__0275
05270     08 14 06 F1 | 	add	ptr___system__dat__, #8
05274     0A 25 02 FB | 	rdlong	result1, ptr___system__dat__
05278     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0527c     2B 25 62 FC | 	wrlong	result1, local02
05280     00 24 06 F6 | 	mov	result1, #0
05284     30 00 90 FD | 	jmp	#LR__0278
05288                 | LR__0276
05288     2B 4B 02 FB | 	rdlong	arg01, local02
0528c     08 14 06 F1 | 	add	ptr___system__dat__, #8
05290     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
05294     08 14 86 F1 | 	sub	ptr___system__dat__, #8
05298     00 24 06 F6 | 	mov	result1, #0
0529c     18 00 90 FD | 	jmp	#LR__0278
052a0                 | LR__0277
052a0     01 00 00 FF 
052a4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
052a8     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
052ac     01 00 00 FF 
052b0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
052b4     01 24 66 F6 | 	neg	result1, #1
052b8                 | LR__0278
052b8     AF F0 03 F6 | 	mov	ptra, fp
052bc     BF 00 A0 FD | 	call	#popregs_
052c0                 | __system___rxtxioctl_0131_ret
052c0     2D 00 64 FD | 	ret
052c4                 | 
052c4                 | __system____dummy_flush_0132
052c4     00 24 06 F6 | 	mov	result1, #0
052c8                 | __system____dummy_flush_0132_ret
052c8     2D 00 64 FD | 	ret
052cc                 | 
052cc                 | __system___vfswrite
052cc     0B 5A 05 F6 | 	mov	COUNT_, #11
052d0     B0 00 A0 FD | 	call	#pushregs_
052d4     25 55 02 F6 | 	mov	local01, arg01
052d8     26 57 02 F6 | 	mov	local02, arg02
052dc     27 59 02 F6 | 	mov	local03, arg03
052e0     2B 5B 02 F6 | 	mov	local04, local02
052e4     08 54 06 F1 | 	add	local01, #8
052e8     2A 5D 02 FB | 	rdlong	local05, local01
052ec     08 54 86 F1 | 	sub	local01, #8
052f0     02 5C CE F7 | 	test	local05, #2 wz
052f4     1C 00 90 5D |  if_ne	jmp	#LR__0279
052f8     01 00 00 FF 
052fc     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05300     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05304     01 00 00 FF 
05308     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0530c     01 24 66 F6 | 	neg	result1, #1
05310     70 01 90 FD | 	jmp	#LR__0287
05314                 | LR__0279
05314     08 54 06 F1 | 	add	local01, #8
05318     2A 5D 02 FB | 	rdlong	local05, local01
0531c     08 54 86 F1 | 	sub	local01, #8
05320     40 5C CE F7 | 	test	local05, #64 wz
05324     5C 00 90 AD |  if_e	jmp	#LR__0281
05328     08 54 06 F1 | 	add	local01, #8
0532c     2A 5D 02 FB | 	rdlong	local05, local01
05330     08 54 86 F1 | 	sub	local01, #8
05334     80 5C CE F7 | 	test	local05, #128 wz
05338     48 00 90 AD |  if_e	jmp	#LR__0280
0533c     2C 54 06 F1 | 	add	local01, #44
05340     2A 5D 02 FB | 	rdlong	local05, local01
05344     2C 54 86 F1 | 	sub	local01, #44
05348     2E 5F 02 FB | 	rdlong	local06, local05
0534c     04 5C 06 F1 | 	add	local05, #4
05350     2E 61 02 FB | 	rdlong	local07, local05
05354     2A 4B 02 F6 | 	mov	arg01, local01
05358     00 4C 06 F6 | 	mov	arg02, #0
0535c     02 4E 06 F6 | 	mov	arg03, #2
05360     07 63 02 F6 | 	mov	local08, objptr
05364     2F 0F 02 F6 | 	mov	objptr, local06
05368     2D 60 62 FD | 	call	local07
0536c     31 0F 02 F6 | 	mov	objptr, local08
05370     08 54 06 F1 | 	add	local01, #8
05374     2A 5D 02 FB | 	rdlong	local05, local01
05378     80 5C 26 F5 | 	andn	local05, #128
0537c     2A 5D 62 FC | 	wrlong	local05, local01
05380     08 54 86 F1 | 	sub	local01, #8
05384                 | LR__0280
05384                 | LR__0281
05384     14 54 06 F1 | 	add	local01, #20
05388     2A 5D 0A FB | 	rdlong	local05, local01 wz
0538c     14 54 86 F1 | 	sub	local01, #20
05390     7C 00 90 AD |  if_e	jmp	#LR__0283
05394     14 54 06 F1 | 	add	local01, #20
05398     2A 5D 02 FB | 	rdlong	local05, local01
0539c     14 54 86 F1 | 	sub	local01, #20
053a0     2E 5F 02 FB | 	rdlong	local06, local05
053a4     04 5C 06 F1 | 	add	local05, #4
053a8     2E 61 02 FB | 	rdlong	local07, local05
053ac     2B 4D 02 F6 | 	mov	arg02, local02
053b0     2C 4F 02 F6 | 	mov	arg03, local03
053b4     2A 4B 02 F6 | 	mov	arg01, local01
053b8     07 63 02 F6 | 	mov	local08, objptr
053bc     2F 0F 02 F6 | 	mov	objptr, local06
053c0     2D 60 62 FD | 	call	local07
053c4     31 0F 02 F6 | 	mov	objptr, local08
053c8     12 65 02 F6 | 	mov	local09, result1
053cc     00 64 5E F2 | 	cmps	local09, #0 wcz
053d0     34 00 90 3D |  if_ae	jmp	#LR__0282
053d4     08 54 06 F1 | 	add	local01, #8
053d8     2A 5D 02 FB | 	rdlong	local05, local01
053dc     20 5C 46 F5 | 	or	local05, #32
053e0     2A 5D 62 FC | 	wrlong	local05, local01
053e4     01 00 00 FF 
053e8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
053ec     0A 65 62 FC | 	wrlong	local09, ptr___system__dat__
053f0     01 00 00 FF 
053f4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
053f8     00 64 0E F2 | 	cmp	local09, #0 wz
053fc     01 24 66 56 |  if_ne	neg	result1, #1
05400     00 24 06 A6 |  if_e	mov	result1, #0
05404     7C 00 90 FD | 	jmp	#LR__0287
05408                 | LR__0282
05408     32 25 02 F6 | 	mov	result1, local09
0540c     74 00 90 FD | 	jmp	#LR__0287
05410                 | LR__0283
05410     18 54 06 F1 | 	add	local01, #24
05414     2A 67 0A FB | 	rdlong	local10, local01 wz
05418     18 54 86 F1 | 	sub	local01, #24
0541c     1C 00 90 5D |  if_ne	jmp	#LR__0284
05420     01 00 00 FF 
05424     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05428     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
0542c     01 00 00 FF 
05430     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05434     01 24 66 F6 | 	neg	result1, #1
05438     48 00 90 FD | 	jmp	#LR__0287
0543c                 | LR__0284
0543c     00 64 06 F6 | 	mov	local09, #0
05440                 | LR__0285
05440     00 58 1E F2 | 	cmp	local03, #0 wcz
05444     38 00 90 ED |  if_be	jmp	#LR__0286
05448     33 5D 02 F6 | 	mov	local05, local10
0544c     2E 5F 02 FB | 	rdlong	local06, local05
05450     04 5C 06 F1 | 	add	local05, #4
05454     2E 61 02 FB | 	rdlong	local07, local05
05458     2D 4B C2 FA | 	rdbyte	arg01, local04
0545c     2A 4D 02 F6 | 	mov	arg02, local01
05460     07 69 02 F6 | 	mov	local11, objptr
05464     2F 0F 02 F6 | 	mov	objptr, local06
05468     01 5A 06 F1 | 	add	local04, #1
0546c     2D 60 62 FD | 	call	local07
05470     34 0F 02 F6 | 	mov	objptr, local11
05474     12 65 02 F1 | 	add	local09, result1
05478     01 58 86 F1 | 	sub	local03, #1
0547c     C0 FF 9F FD | 	jmp	#LR__0285
05480                 | LR__0286
05480     32 25 02 F6 | 	mov	result1, local09
05484                 | LR__0287
05484     AF F0 03 F6 | 	mov	ptra, fp
05488     BF 00 A0 FD | 	call	#popregs_
0548c                 | __system___vfswrite_ret
0548c     2D 00 64 FD | 	ret
05490                 | 
05490                 | __system___vfsread
05490     0F 5A 05 F6 | 	mov	COUNT_, #15
05494     B0 00 A0 FD | 	call	#pushregs_
05498     2C F0 07 F1 | 	add	ptra, #44
0549c     04 5E 05 F1 | 	add	fp, #4
054a0     AF 4A 62 FC | 	wrlong	arg01, fp
054a4     04 5E 05 F1 | 	add	fp, #4
054a8     AF 4C 62 FC | 	wrlong	arg02, fp
054ac     04 5E 05 F1 | 	add	fp, #4
054b0     AF 4E 62 FC | 	wrlong	arg03, fp
054b4     04 5E 85 F1 | 	sub	fp, #4
054b8     AF 54 02 FB | 	rdlong	local01, fp
054bc     14 5E 05 F1 | 	add	fp, #20
054c0     AF 54 62 FC | 	wrlong	local01, fp
054c4     04 5E 05 F1 | 	add	fp, #4
054c8     AF 00 68 FC | 	wrlong	#0, fp
054cc     1C 5E 85 F1 | 	sub	fp, #28
054d0     AF 56 02 FB | 	rdlong	local02, fp
054d4     04 5E 85 F1 | 	sub	fp, #4
054d8     08 56 06 F1 | 	add	local02, #8
054dc     2B 55 02 FB | 	rdlong	local01, local02
054e0     01 54 CE F7 | 	test	local01, #1 wz
054e4     1C 00 90 5D |  if_ne	jmp	#LR__0288
054e8     01 00 00 FF 
054ec     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
054f0     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
054f4     01 00 00 FF 
054f8     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
054fc     01 24 66 F6 | 	neg	result1, #1
05500     9C 02 90 FD | 	jmp	#LR__0296
05504                 | LR__0288
05504     04 5E 05 F1 | 	add	fp, #4
05508     AF 54 02 FB | 	rdlong	local01, fp
0550c     04 5E 85 F1 | 	sub	fp, #4
05510     10 54 06 F1 | 	add	local01, #16
05514     2A 59 0A FB | 	rdlong	local03, local01 wz
05518     B4 00 90 AD |  if_e	jmp	#LR__0290
0551c     04 5E 05 F1 | 	add	fp, #4
05520     AF 5A 02 FB | 	rdlong	local04, fp
05524     10 5A 06 F1 | 	add	local04, #16
05528     2D 55 02 FB | 	rdlong	local01, local04
0552c     2A 57 02 FB | 	rdlong	local02, local01
05530     04 54 06 F1 | 	add	local01, #4
05534     2A 59 02 FB | 	rdlong	local03, local01
05538     AF 4A 02 FB | 	rdlong	arg01, fp
0553c     04 5E 05 F1 | 	add	fp, #4
05540     AF 4C 02 FB | 	rdlong	arg02, fp
05544     04 5E 05 F1 | 	add	fp, #4
05548     AF 4E 02 FB | 	rdlong	arg03, fp
0554c     0C 5E 85 F1 | 	sub	fp, #12
05550     07 5D 02 F6 | 	mov	local05, objptr
05554     2B 0F 02 F6 | 	mov	objptr, local02
05558     2D 58 62 FD | 	call	local03
0555c     2E 0F 02 F6 | 	mov	objptr, local05
05560     10 5E 05 F1 | 	add	fp, #16
05564     AF 24 62 FC | 	wrlong	result1, fp
05568     10 5E 85 F1 | 	sub	fp, #16
0556c     00 24 5E F2 | 	cmps	result1, #0 wcz
05570     4C 00 90 3D |  if_ae	jmp	#LR__0289
05574     04 5E 05 F1 | 	add	fp, #4
05578     AF 54 02 FB | 	rdlong	local01, fp
0557c     2A 5B 02 F6 | 	mov	local04, local01
05580     08 5A 06 F1 | 	add	local04, #8
05584     2D 59 02 FB | 	rdlong	local03, local04
05588     20 58 46 F5 | 	or	local03, #32
0558c     08 54 06 F1 | 	add	local01, #8
05590     2A 59 62 FC | 	wrlong	local03, local01
05594     0C 5E 05 F1 | 	add	fp, #12
05598     AF 4A 0A FB | 	rdlong	arg01, fp wz
0559c     10 5E 85 F1 | 	sub	fp, #16
055a0     01 00 00 FF 
055a4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
055a8     0A 4B 62 FC | 	wrlong	arg01, ptr___system__dat__
055ac     01 00 00 FF 
055b0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
055b4     01 24 66 56 |  if_ne	neg	result1, #1
055b8     00 24 06 A6 |  if_e	mov	result1, #0
055bc     E0 01 90 FD | 	jmp	#LR__0296
055c0                 | LR__0289
055c0     10 5E 05 F1 | 	add	fp, #16
055c4     AF 24 02 FB | 	rdlong	result1, fp
055c8     10 5E 85 F1 | 	sub	fp, #16
055cc     D0 01 90 FD | 	jmp	#LR__0296
055d0                 | LR__0290
055d0     04 5E 05 F1 | 	add	fp, #4
055d4     AF 54 02 FB | 	rdlong	local01, fp
055d8     1C 54 06 F1 | 	add	local01, #28
055dc     2A 59 02 FB | 	rdlong	local03, local01
055e0     14 5E 05 F1 | 	add	fp, #20
055e4     AF 58 62 FC | 	wrlong	local03, fp
055e8     AF 54 0A FB | 	rdlong	local01, fp wz
055ec     18 5E 85 F1 | 	sub	fp, #24
055f0     1C 00 90 5D |  if_ne	jmp	#LR__0291
055f4     01 00 00 FF 
055f8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
055fc     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05600     01 00 00 FF 
05604     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05608     01 24 66 F6 | 	neg	result1, #1
0560c     90 01 90 FD | 	jmp	#LR__0296
05610                 | LR__0291
05610     04 5E 05 F1 | 	add	fp, #4
05614     AF 54 02 FB | 	rdlong	local01, fp
05618     04 5E 85 F1 | 	sub	fp, #4
0561c     24 54 06 F1 | 	add	local01, #36
05620     2A 59 0A FB | 	rdlong	local03, local01 wz
05624     A0 00 90 AD |  if_e	jmp	#LR__0293
05628     24 5E 05 F1 | 	add	fp, #36
0562c     AF 5E 02 F6 | 	mov	local06, fp
05630     20 5E 85 F1 | 	sub	fp, #32
05634     AF 60 02 FB | 	rdlong	local07, fp
05638     30 5B 02 F6 | 	mov	local04, local07
0563c     24 5A 06 F1 | 	add	local04, #36
05640     2D 63 02 FB | 	rdlong	local08, local04
05644     31 55 02 F6 | 	mov	local01, local08
05648     2A 57 02 FB | 	rdlong	local02, local01
0564c     04 54 06 F1 | 	add	local01, #4
05650     2A 65 02 FB | 	rdlong	local09, local01
05654     32 59 02 F6 | 	mov	local03, local09
05658     30 67 02 F6 | 	mov	local10, local07
0565c     04 5E 85 F1 | 	sub	fp, #4
05660     33 69 02 F6 | 	mov	local11, local10
05664     00 6B 06 F6 | 	mov	local12, #256
05668     2F 6D 02 F6 | 	mov	local13, local06
0566c     34 4B 02 F6 | 	mov	arg01, local11
05670     00 4D 06 F6 | 	mov	arg02, #256
05674     36 4F 02 F6 | 	mov	arg03, local13
05678     07 6F 02 F6 | 	mov	local14, objptr
0567c     2B 0F 02 F6 | 	mov	objptr, local02
05680     2D 58 62 FD | 	call	local03
05684     37 0F 02 F6 | 	mov	objptr, local14
05688     12 71 02 F6 | 	mov	local15, result1
0568c     10 5E 05 F1 | 	add	fp, #16
05690     AF 70 62 FC | 	wrlong	local15, fp
05694     AF 56 0A FB | 	rdlong	local02, fp wz
05698     10 5E 85 F1 | 	sub	fp, #16
0569c     28 00 90 5D |  if_ne	jmp	#LR__0292
056a0     24 5E 05 F1 | 	add	fp, #36
056a4     AF 5A 02 FB | 	rdlong	local04, fp
056a8     24 5E 85 F1 | 	sub	fp, #36
056ac     2D 59 02 F6 | 	mov	local03, local04
056b0     02 58 0E F5 | 	and	local03, #2 wz
056b4     10 00 90 AD |  if_e	jmp	#LR__0292
056b8     01 54 06 F6 | 	mov	local01, #1
056bc     20 5E 05 F1 | 	add	fp, #32
056c0     AF 02 68 FC | 	wrlong	#1, fp
056c4     20 5E 85 F1 | 	sub	fp, #32
056c8                 | LR__0292
056c8                 | LR__0293
056c8     10 5E 05 F1 | 	add	fp, #16
056cc     AF 00 68 FC | 	wrlong	#0, fp
056d0     10 5E 85 F1 | 	sub	fp, #16
056d4                 | LR__0294
056d4     0C 5E 05 F1 | 	add	fp, #12
056d8     AF 54 02 FB | 	rdlong	local01, fp
056dc     0C 5E 85 F1 | 	sub	fp, #12
056e0     00 54 1E F2 | 	cmp	local01, #0 wcz
056e4     AC 00 90 ED |  if_be	jmp	#LR__0295
056e8     18 5E 05 F1 | 	add	fp, #24
056ec     AF 54 02 FB | 	rdlong	local01, fp
056f0     2A 57 02 FB | 	rdlong	local02, local01
056f4     04 54 06 F1 | 	add	local01, #4
056f8     2A 59 02 FB | 	rdlong	local03, local01
056fc     14 5E 85 F1 | 	sub	fp, #20
05700     AF 4A 02 FB | 	rdlong	arg01, fp
05704     04 5E 85 F1 | 	sub	fp, #4
05708     07 69 02 F6 | 	mov	local11, objptr
0570c     2B 0F 02 F6 | 	mov	objptr, local02
05710     2D 58 62 FD | 	call	local03
05714     34 0F 02 F6 | 	mov	objptr, local11
05718     12 67 02 F6 | 	mov	local10, result1
0571c     14 5E 05 F1 | 	add	fp, #20
05720     AF 66 62 FC | 	wrlong	local10, fp
05724     14 5E 85 F1 | 	sub	fp, #20
05728     00 66 5E F2 | 	cmps	local10, #0 wcz
0572c     64 00 90 CD |  if_b	jmp	#LR__0295
05730     1C 5E 05 F1 | 	add	fp, #28
05734     AF 54 02 FB | 	rdlong	local01, fp
05738     2A 59 02 F6 | 	mov	local03, local01
0573c     01 58 06 F1 | 	add	local03, #1
05740     AF 58 62 FC | 	wrlong	local03, fp
05744     08 5E 85 F1 | 	sub	fp, #8
05748     AF 60 02 FB | 	rdlong	local07, fp
0574c     2A 61 42 FC | 	wrbyte	local07, local01
05750     04 5E 85 F1 | 	sub	fp, #4
05754     AF 54 02 FB | 	rdlong	local01, fp
05758     01 54 06 F1 | 	add	local01, #1
0575c     AF 54 62 FC | 	wrlong	local01, fp
05760     04 5E 85 F1 | 	sub	fp, #4
05764     AF 54 02 FB | 	rdlong	local01, fp
05768     01 54 86 F1 | 	sub	local01, #1
0576c     AF 54 62 FC | 	wrlong	local01, fp
05770     14 5E 05 F1 | 	add	fp, #20
05774     AF 54 0A FB | 	rdlong	local01, fp wz
05778     20 5E 85 F1 | 	sub	fp, #32
0577c     54 FF 9F AD |  if_e	jmp	#LR__0294
05780     14 5E 05 F1 | 	add	fp, #20
05784     AF 58 02 FB | 	rdlong	local03, fp
05788     14 5E 85 F1 | 	sub	fp, #20
0578c     0A 58 0E F2 | 	cmp	local03, #10 wz
05790     40 FF 9F 5D |  if_ne	jmp	#LR__0294
05794                 | LR__0295
05794     10 5E 05 F1 | 	add	fp, #16
05798     AF 24 02 FB | 	rdlong	result1, fp
0579c     10 5E 85 F1 | 	sub	fp, #16
057a0                 | LR__0296
057a0     AF F0 03 F6 | 	mov	ptra, fp
057a4     BF 00 A0 FD | 	call	#popregs_
057a8                 | __system___vfsread_ret
057a8     2D 00 64 FD | 	ret
057ac                 | 
057ac                 | ' 	
057ac                 | ' 	FUNCTION pfunc(c as integer) as integer
057ac                 | ___strs_cl_pfunc
057ac                 | ' 		if (i < 16) then
057ac     04 0E 06 F1 | 	add	objptr, #4
057b0     07 2B 02 FB | 	rdlong	_var01, objptr
057b4     04 0E 86 F1 | 	sub	objptr, #4
057b8     10 2A 5E F2 | 	cmps	_var01, #16 wcz
057bc     2C 00 90 3D |  if_ae	jmp	#LR__0297
057c0     07 2D 02 FB | 	rdlong	_var02, objptr
057c4     04 0E 06 F1 | 	add	objptr, #4
057c8     07 2F 02 FB | 	rdlong	_var03, objptr
057cc     16 2F 02 F1 | 	add	_var03, _var02
057d0     17 4B 42 FC | 	wrbyte	arg01, _var03
057d4     07 2B 02 FB | 	rdlong	_var01, objptr
057d8     01 2A 06 F1 | 	add	_var01, #1
057dc     07 2B 62 FC | 	wrlong	_var01, objptr
057e0     04 0E 86 F1 | 	sub	objptr, #4
057e4                 | ' 			p(i) = c
057e4                 | ' 			i = i+1
057e4                 | ' 			return 1
057e4     01 24 06 F6 | 	mov	result1, #1
057e8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
057ec                 | LR__0297
057ec                 | ' 			return -1
057ec     01 24 66 F6 | 	neg	result1, #1
057f0                 | ___strs_cl_pfunc_ret
057f0     2D 00 64 FD | 	ret
057f4                 | 
057f4                 | __struct__s_vfs_file_t_putchar
057f4     04 5A 05 F6 | 	mov	COUNT_, #4
057f8     B0 00 A0 FD | 	call	#pushregs_
057fc     18 0E 06 F1 | 	add	objptr, #24
05800     07 55 0A FB | 	rdlong	local01, objptr wz
05804     18 0E 86 F1 | 	sub	objptr, #24
05808     00 24 06 A6 |  if_e	mov	result1, #0
0580c     3C 00 90 AD |  if_e	jmp	#LR__0298
05810     18 0E 06 F1 | 	add	objptr, #24
05814     07 55 02 FB | 	rdlong	local01, objptr
05818     18 0E 86 F1 | 	sub	objptr, #24
0581c     2A 57 02 FB | 	rdlong	local02, local01
05820     04 54 06 F1 | 	add	local01, #4
05824     2A 59 02 FB | 	rdlong	local03, local01
05828     07 4D 02 F6 | 	mov	arg02, objptr
0582c     07 5B 02 F6 | 	mov	local04, objptr
05830     2B 0F 02 F6 | 	mov	objptr, local02
05834     2D 58 62 FD | 	call	local03
05838     2D 0F 02 F6 | 	mov	objptr, local04
0583c     00 24 5E F2 | 	cmps	result1, #0 wcz
05840     00 54 06 C6 |  if_b	mov	local01, #0
05844     01 54 06 36 |  if_ae	mov	local01, #1
05848     2A 25 02 F6 | 	mov	result1, local01
0584c                 | LR__0298
0584c     AF F0 03 F6 | 	mov	ptra, fp
05850     BF 00 A0 FD | 	call	#popregs_
05854                 | __struct__s_vfs_file_t_putchar_ret
05854     2D 00 64 FD | 	ret
05858                 | 
05858                 | __struct__s_vfs_file_t_getchar
05858     04 5A 05 F6 | 	mov	COUNT_, #4
0585c     B0 00 A0 FD | 	call	#pushregs_
05860     1C 0E 06 F1 | 	add	objptr, #28
05864     07 55 0A FB | 	rdlong	local01, objptr wz
05868     1C 0E 86 F1 | 	sub	objptr, #28
0586c     01 24 66 A6 |  if_e	neg	result1, #1
05870     2C 00 90 AD |  if_e	jmp	#LR__0299
05874                 | '         return getcf(__this);
05874     1C 0E 06 F1 | 	add	objptr, #28
05878     07 55 02 FB | 	rdlong	local01, objptr
0587c     1C 0E 86 F1 | 	sub	objptr, #28
05880     2A 57 02 FB | 	rdlong	local02, local01
05884     04 54 06 F1 | 	add	local01, #4
05888     2A 59 02 FB | 	rdlong	local03, local01
0588c     07 4B 02 F6 | 	mov	arg01, objptr
05890     07 5B 02 F6 | 	mov	local04, objptr
05894     2B 0F 02 F6 | 	mov	objptr, local02
05898     2D 58 62 FD | 	call	local03
0589c     2D 0F 02 F6 | 	mov	objptr, local04
058a0                 | LR__0299
058a0     AF F0 03 F6 | 	mov	ptra, fp
058a4     BF 00 A0 FD | 	call	#popregs_
058a8                 | __struct__s_vfs_file_t_getchar_ret
058a8     2D 00 64 FD | 	ret
058ac                 | 
058ac                 | __struct___bas_wrap_sender_tx
058ac     04 5A 05 F6 | 	mov	COUNT_, #4
058b0     B0 00 A0 FD | 	call	#pushregs_
058b4     07 55 02 FB | 	rdlong	local01, objptr
058b8     2A 57 02 FB | 	rdlong	local02, local01
058bc     04 54 06 F1 | 	add	local01, #4
058c0     2A 59 02 FB | 	rdlong	local03, local01
058c4     07 5B 02 F6 | 	mov	local04, objptr
058c8     2B 0F 02 F6 | 	mov	objptr, local02
058cc     2D 58 62 FD | 	call	local03
058d0     2D 0F 02 F6 | 	mov	objptr, local04
058d4     01 24 06 F6 | 	mov	result1, #1
058d8     AF F0 03 F6 | 	mov	ptra, fp
058dc     BF 00 A0 FD | 	call	#popregs_
058e0                 | __struct___bas_wrap_sender_tx_ret
058e0     2D 00 64 FD | 	ret
058e4                 | 
058e4                 | LR__0300
058e4     20 21 21 21 
058e8     20 63 6F 72 
058ec     72 75 70 74 
058f0     65 64 20 68 
058f4     65 61 70 3F 
058f8     3F 3F 20 21 
058fc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
058ff     00          | 	byte	0
05900                 | LR__0301
05900     20 21 21 21 
05904     20 6F 75 74 
05908     20 6F 66 20 
0590c     68 65 61 70 
05910     20 6D 65 6D 
05914     6F 72 79 20 
05918     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
0591c     00          | 	byte	0
0591d                 | LR__0302
0591d     20 21 21 21 
05921     20 63 6F 72 
05925     72 75 70 74 
05929     65 64 20 68 
0592d     65 61 70 20 
05931     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
05935     00          | 	byte	0
05936                 | LR__0303
05936     42 61 73 69 
0593a     63 20 74 65 
0593e     73 74       | 	byte	"Basic test"
05940     00          | 	byte	0
05941                 | LR__0304
05941     4B 65 79 62 
05945     6F 61 72 64 
05949     20 6B 65 79 
0594d     20 72 65 6C 
05951     65 61 73 65 
05955     64 2C 20 73 
05959     63 61 6E 63 
0595d     6F 64 65 20 | 	byte	"Keyboard key released, scancode "
05961     00          | 	byte	0
05962                 | LR__0305
05962     4B 65 79 62 
05966     6F 61 72 64 
0596a     20 6B 65 79 
0596e     20 70 72 65 
05972     73 73 65 64 
05976     2C 20 20 73 
0597a     63 61 6E 63 
0597e     6F 64 65 20 | 	byte	"Keyboard key pressed,  scancode "
05982     00          | 	byte	0
05983                 | LR__0306
05983     2C 20 63 68 
05987     61 72 63 6F 
0598b     64 65 20    | 	byte	", charcode "
0598e     00          | 	byte	0
0598f                 | LR__0307
0598f     4B 65 79 62 
05993     6F 61 72 64 
05997     20 6D 6F 64 
0599b     69 66 69 65 
0599f     72 73 20 72 
059a3     65 6C 65 61 
059a7     73 65 64    | 	byte	"Keyboard modifiers released"
059aa     00          | 	byte	0
059ab                 | LR__0308
059ab     4B 65 79 62 
059af     6F 61 72 64 
059b3     20 6D 6F 64 
059b7     69 66 69 65 
059bb     72 73 20 70 
059bf     72 65 73 73 
059c3     65 64 3A 20 | 	byte	"Keyboard modifiers pressed: "
059c7     00          | 	byte	0
059c8                 | LR__0309
059c8     4D 6F 75 73 
059cc     65 20 6D 6F 
059d0     76 65 64 2C 
059d4     20 78 3D 20 | 	byte	"Mouse moved, x= "
059d8     00          | 	byte	0
059d9                 | LR__0310
059d9     20 79 3D 20 | 	byte	" y= "
059dd     00          | 	byte	0
059de                 | LR__0311
059de     4D 6F 75 73 
059e2     65 20 6D 6F 
059e6     76 65 64 2C 
059ea     20 78 3D 20 | 	byte	"Mouse moved, x= "
059ee     00          | 	byte	0
059ef                 | LR__0312
059ef     20 79 3D 20 | 	byte	" y= "
059f3     00          | 	byte	0
059f4                 | LR__0313
059f4     4D 6F 75 73 
059f8     65 77 68 65 
059fc     65 6C 3A 20 | 	byte	"Mousewheel: "
05a00     00          | 	byte	0
05a01                 | LR__0314
05a01     4D 6F 75 73 
05a05     65 20 6B 65 
05a09     79 3A 20    | 	byte	"Mouse key: "
05a0c     00          | 	byte	0
05a0d                 | LR__0315
05a0d     4D 6F 75 73 
05a11     65 20 63 6C 
05a15     69 63 6B 65 
05a19     64          | 	byte	"Mouse clicked"
05a1a     00          | 	byte	0
05a1b                 | LR__0316
05a1b     4D 6F 75 73 
05a1f     65 20 64 6F 
05a23     75 62 6C 65 
05a27     20 63 6C 69 
05a2b     63 6B 65 64 | 	byte	"Mouse double clicked"
05a2f     00          | 	byte	0
05a30                 | LR__0317
05a30     4D 69 64 69 
05a34     20 6E 6F 74 
05a38     65 20 6F 66 
05a3c     66 2C 20 63 
05a40     68 61 6E 6E 
05a44     65 6C 20    | 	byte	"Midi note off, channel "
05a47     00          | 	byte	0
05a48                 | LR__0318
05a48     2C 20 6E 6F 
05a4c     74 65 20    | 	byte	", note "
05a4f     00          | 	byte	0
05a50                 | LR__0319
05a50     4D 69 64 69 
05a54     20 6E 6F 74 
05a58     65 20 6F 6E 
05a5c     2C 20 20 63 
05a60     68 61 6E 6E 
05a64     65 6C 20    | 	byte	"Midi note on,  channel "
05a67     00          | 	byte	0
05a68                 | LR__0320
05a68     2C 20 6E 6F 
05a6c     74 65 20    | 	byte	", note "
05a6f     00          | 	byte	0
05a70                 | LR__0321
05a70     2C 20 76 65 
05a74     6C 6F 63 69 
05a78     74 79 20    | 	byte	", velocity "
05a7b     00          | 	byte	0
05a7c                 | LR__0322
05a7c     4D 69 64 69 
05a80     20 70 6F 6C 
05a84     79 20 61 66 
05a88     74 65 72 74 
05a8c     6F 75 63 68 
05a90     2C 20 63 68 
05a94     61 6E 6E 65 
05a98     6C 20       | 	byte	"Midi poly aftertouch, channel "
05a9a     00          | 	byte	0
05a9b                 | LR__0323
05a9b     20 6E 6F 74 
05a9f     65 20       | 	byte	" note "
05aa1     00          | 	byte	0
05aa2                 | LR__0324
05aa2     2C 20 76 65 
05aa6     6C 6F 63 69 
05aaa     74 79 20    | 	byte	", velocity "
05aad     00          | 	byte	0
05aae                 | LR__0325
05aae     4D 69 64 69 
05ab2     20 63 6F 6E 
05ab6     74 72 6F 6C 
05aba     20 63 68 61 
05abe     6E 67 65 2C 
05ac2     20 63 68 61 
05ac6     6E 6E 65 6C 
05aca     20          | 	byte	"Midi control change, channel "
05acb     00          | 	byte	0
05acc                 | LR__0326
05acc     20 63 6F 6E 
05ad0     74 72 6F 6C 
05ad4     6C 65 72 20 | 	byte	" controller "
05ad8     00          | 	byte	0
05ad9                 | LR__0327
05ad9     2C 20 76 61 
05add     6C 75 65 20 | 	byte	", value "
05ae1     00          | 	byte	0
05ae2                 | LR__0328
05ae2     4D 69 64 69 
05ae6     20 70 72 6F 
05aea     67 72 61 6D 
05aee     20 63 68 61 
05af2     6E 67 65 2C 
05af6     20 63 68 61 
05afa     6E 6E 65 6C 
05afe     20          | 	byte	"Midi program change, channel "
05aff     00          | 	byte	0
05b00                 | LR__0329
05b00     20 70 72 6F 
05b04     67 72 61 6D 
05b08     20          | 	byte	" program "
05b09     00          | 	byte	0
05b0a                 | LR__0330
05b0a     4D 69 64 69 
05b0e     20 6D 6F 6E 
05b12     6F 20 61 66 
05b16     74 65 72 74 
05b1a     6F 75 63 68 
05b1e     2C 20 63 68 
05b22     61 6E 6E 65 
05b26     6C 20       | 	byte	"Midi mono aftertouch, channel "
05b28     00          | 	byte	0
05b29                 | LR__0331
05b29     20 76 61 6C 
05b2d     75 65 20    | 	byte	" value "
05b30     00          | 	byte	0
05b31                 | LR__0332
05b31     4D 69 64 69 
05b35     20 70 69 74 
05b39     63 68 20 62 
05b3d     65 6E 64 2C 
05b41     20 63 68 61 
05b45     6E 6E 65 6C 
05b49     20          | 	byte	"Midi pitch bend, channel "
05b4a     00          | 	byte	0
05b4b                 | LR__0333
05b4b     20 76 61 6C 
05b4f     75 65 20    | 	byte	" value "
05b52     00          | 	byte	0
05b53                 | LR__0334
05b53     4E 6F 76 61 
05b57     74 69 6F 6E 
05b5b     20 63 6F 6E 
05b5f     74 72 6F 6C 
05b63     20 6B 65 79 
05b67     20          | 	byte	"Novation control key "
05b68     00          | 	byte	0
05b69     00 00 00    | 	alignl
05b6c                 | _hng030rm_spin2_dat_
05b6c     00 00 00 00 
05b70     00 00 00 00 
05b74     00 00 00 00 
05b78     00 00 00 00 
05b7c     00 00 00    | vga_font       file "vgafont.def"
05b7f     7E 81 A5 81 
05b83     81 BD 99 81 
05b87     81 7E 00 00 
05b8b     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
05b8f     7E FF DB FF 
05b93     FF C3 E7 FF 
05b97     FF 7E 00 00 
05b9b     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
05b9f     00 36 7F 7F 
05ba3     7F 7F 3E 1C 
05ba7     08 00 00 00 
05bab     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
05baf     00 08 1C 3E 
05bb3     7F 3E 1C 08 
05bb7     00 00 00 00 
05bbb     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
05bbf     18 3C 3C E7 
05bc3     E7 E7 18 18 
05bc7     3C 00 00 00 
05bcb     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05bcf     18 3C 7E FF 
05bd3     FF 7E 18 18 
05bd7     3C 00 00 00 
05bdb     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05bdf     00 00 00 18 
05be3     3C 3C 18 00 
05be7     00 00 00 00 
05beb     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
05bef     FF FF FF E7 
05bf3     C3 C3 E7 FF 
05bf7     FF FF FF FF 
05bfb     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05bff     00 00 3C 66 
05c03     42 42 66 3C 
05c07     00 00 00 00 
05c0b     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
05c0f     FF FF C3 99 
05c13     BD BD 99 C3 
05c17     FF FF FF FF 
05c1b     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05c1f     78 70 58 4C 
05c23     1E 33 33 33 
05c27     33 1E 00 00 
05c2b     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
05c2f     3C 66 66 66 
05c33     66 3C 18 7E 
05c37     18 18 00 00 
05c3b     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
05c3f     FC CC FC 0C 
05c43     0C 0C 0C 0E 
05c47     0F 07 00 00 
05c4b     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
05c4f     FE C6 FE C6 
05c53     C6 C6 C6 E6 
05c57     E7 67 03 00 
05c5b     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
05c5f     18 18 DB 3C 
05c63     E7 3C DB 18 
05c67     18 00 00 00 
05c6b     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
05c6f     03 07 0F 1F 
05c73     7F 1F 0F 07 
05c77     03 01 00 00 
05c7b     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
05c7f     60 70 78 7C 
05c83     7F 7C 78 70 
05c87     60 40 00 00 
05c8b     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
05c8f     18 3C 7E 18 
05c93     18 18 7E 3C 
05c97     18 00 00 00 
05c9b     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
05c9f     66 66 66 66 
05ca3     66 66 66    | 	byte	$66[7]
05ca6     00 66 66 00 
05caa     00 00 00 00 
05cae     00 FE DB DB 
05cb2     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
05cb6     D8 D8 D8 00 
05cba     00 00 00 3E 
05cbe     63 06 1C 36 
05cc2     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
05cc6     30 63 3E 00 
05cca     00 00 00 00 
05cce     00 00 00 00 
05cd2     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05cd6     7F 7F 7F 00 
05cda     00 00 00 00 
05cde     00 18 3C 7E 
05ce2     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
05ce6     3C 18 7E 00 
05cea     00 00 00 00 
05cee     00 18 3C 7E 
05cf2     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
05cf6     18 18 18 00 
05cfa     00 00 00 00 
05cfe     00 18 18 18 
05d02     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
05d06     7E 3C 18 00 
05d0a     00 00 00 00 
05d0e     00 00 00 18 
05d12     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
05d16     00 00 00 00 
05d1a     00 00 00 00 
05d1e     00 00 00    | 	byte	$00[11]
05d21     0C 06 7F 06 
05d25     0C 00 00 00 
05d29     00 00 00 00 
05d2d     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d31     00 03 03 03 
05d35     7F 00 00 00 
05d39     00 00 00 00 
05d3d     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d41     14 36 7F 36 
05d45     14 00 00 00 
05d49     00 00 00 00 
05d4d     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
05d51     1C 1C 3E 3E 
05d55     7F 7F 00 00 
05d59     00 00 00 00 
05d5d     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05d61     7F 3E 3E 1C 
05d65     1C 08 00 00 
05d69     00 00 00 00 
05d6d     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d71     00 00 00 00 
05d75     00 00 00 00 
05d79     00 00 00 00 
05d7d     00 00       | 	byte	$00[14]
05d7f     18 3C 3C 3C 
05d83     18 18 18 00 
05d87     18 18 00 00 
05d8b     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
05d8f     66 24 00 00 
05d93     00 00 00 00 
05d97     00 00 00 00 
05d9b     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05d9f     00 36 36 7F 
05da3     36 36 36 7F 
05da7     36 36 00 00 
05dab     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
05daf     3E 63 43 03 
05db3     3E 60 60 61 
05db7     63 3E 18 18 
05dbb     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
05dbf     00 00 43 63 
05dc3     30 18 0C 06 
05dc7     63 61 00 00 
05dcb     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
05dcf     1C 36 36 1C 
05dd3     6E 3B 33 33 
05dd7     33 6E 00 00 
05ddb     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
05ddf     0C 0C 0C 06 
05de3     00 00 00 00 
05de7     00 00 00 00 
05deb     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05def     30 18 0C 0C 
05df3     0C 0C 0C 0C 
05df7     18 30 00 00 
05dfb     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
05dff     0C 18 30 30 
05e03     30 30 30 30 
05e07     18 0C 00 00 
05e0b     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
05e0f     00 00 00 66 
05e13     3C FF 3C 66 
05e17     00 00 00 00 
05e1b     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
05e1f     00 00 00 18 
05e23     18 7E 18 18 
05e27     00 00 00 00 
05e2b     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
05e2f     00 00 00 00 
05e33     00 00 00 00 | 	byte	$00[8]
05e37     18 18 18 0C 
05e3b     00 00 00 00 
05e3f     00 00 00 00 
05e43     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
05e47     00 00 00 00 
05e4b     00 00 00 00 
05e4f     00 00 00 00 
05e53     00 00 00 00 | 	byte	$00[16]
05e57     18 18 00 00 
05e5b     00 00 00 00 
05e5f     00 00 40 60 
05e63     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
05e67     03 01 00 00 
05e6b     00 00 00 00 
05e6f     1C 36 63 63 
05e73     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
05e77     36 1C 00 00 
05e7b     00 00 00 00 
05e7f     18 1C 1E 18 
05e83     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
05e87     18 7E 00 00 
05e8b     00 00 00 00 
05e8f     3E 63 60 30 
05e93     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
05e97     63 7F 00 00 
05e9b     00 00 00 00 
05e9f     3E 63 60 60 
05ea3     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
05ea7     63 3E 00 00 
05eab     00 00 00 00 
05eaf     30 38 3C 36 
05eb3     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
05eb7     30 78 00 00 
05ebb     00 00 00 00 
05ebf     7F 03 03 03 
05ec3     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
05ec7     63 3E 00 00 
05ecb     00 00 00 00 
05ecf     1C 06 03 03 
05ed3     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
05ed7     63 3E 00 00 
05edb     00 00 00 00 
05edf     7F 63 60 60 
05ee3     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
05ee7     0C 0C 00 00 
05eeb     00 00 00 00 
05eef     3E 63 63 63 
05ef3     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
05ef7     63 3E 00 00 
05efb     00 00 00 00 
05eff     3E 63 63 63 
05f03     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
05f07     30 1E 00 00 
05f0b     00 00 00 00 
05f0f     00 00 00 18 
05f13     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05f17     18 18 00 00 
05f1b     00 00 00 00 
05f1f     00 00 00 18 
05f23     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05f27     18 18 0C 00 
05f2b     00 00 00 00 
05f2f     00 60 30 18 
05f33     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
05f37     30 60 00 00 
05f3b     00 00 00 00 
05f3f     00 00 00 7E 
05f43     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
05f47     00 00 00 00 
05f4b     00 00 00 00 
05f4f     00          | 	byte	$00[9]
05f50     06 0C 18 30 
05f54     60 30 18 0C 
05f58     06 00 00 00 
05f5c     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
05f60     63 63 30 18 
05f64     18 18 00 18 
05f68     18 00 00 00 
05f6c     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
05f70     3E 63 63 7B 
05f74     7B 7B 3B 03 
05f78     3E 00 00 00 
05f7c     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
05f80     1C 36 63 63 
05f84     7F 63 63 63 
05f88     63 00 00 00 
05f8c     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
05f90     66 66 66 3E 
05f94     66 66 66 66 
05f98     3F 00 00 00 
05f9c     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
05fa0     66 43 03 03 
05fa4     03 03 43 66 
05fa8     3C 00 00 00 
05fac     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
05fb0     36 66 66 66 
05fb4     66 66 66 36 
05fb8     1F 00 00 00 
05fbc     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
05fc0     66 46 16 1E 
05fc4     16 06 46 66 
05fc8     7F 00 00 00 
05fcc     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
05fd0     66 46 16 1E 
05fd4     16 06 06 06 
05fd8     0F 00 00 00 
05fdc     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
05fe0     66 43 03 03 
05fe4     7B 63 63 66 
05fe8     5C 00 00 00 
05fec     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
05ff0     63 63 63 7F 
05ff4     63 63 63 63 
05ff8     63 00 00 00 
05ffc     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
06000     18 18 18 18 
06004     18 18 18 18 | 	byte	$18[8]
06008     3C 00 00 00 
0600c     00 00 00 78 
06010     30 30 30 30 
06014     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
06018     1E 00 00 00 
0601c     00 00 00 67 
06020     66 66 36 1E 
06024     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
06028     67 00 00 00 
0602c     00 00 00 0F 
06030     06 06 06 06 
06034     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
06038     7F 00 00 00 
0603c     00 00 00 63 
06040     77 7F 7F 6B 
06044     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
06048     63 00 00 00 
0604c     00 00 00 63 
06050     67 6F 7F 7B 
06054     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
06058     63 00 00 00 
0605c     00 00 00 3E 
06060     63 63 63 63 
06064     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06068     3E 00 00 00 
0606c     00 00 00 3F 
06070     66 66 66 3E 
06074     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
06078     0F 00 00 00 
0607c     00 00 00 3E 
06080     63 63 63 63 
06084     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
06088     3E 30 70 00 
0608c     00 00 00 3F 
06090     66 66 66 3E 
06094     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
06098     67 00 00 00 
0609c     00 00 00 3E 
060a0     63 63 06 1C 
060a4     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
060a8     3E 00 00 00 
060ac     00 00 00 7E 
060b0     7E 5A 18 18 
060b4     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
060b8     3C 00 00 00 
060bc     00 00 00 63 
060c0     63 63 63 63 
060c4     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
060c8     3E 00 00 00 
060cc     00 00 00 63 
060d0     63 63 63 63 
060d4     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
060d8     08 00 00 00 
060dc     00 00 00 63 
060e0     63 63 63 6B 
060e4     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
060e8     36 00 00 00 
060ec     00 00 00 63 
060f0     63 36 3E 1C 
060f4     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
060f8     63 00 00 00 
060fc     00 00 00 66 
06100     66 66 66 3C 
06104     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
06108     3C 00 00 00 
0610c     00 00 00 7F 
06110     63 61 30 18 
06114     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
06118     7F 00 00 00 
0611c     00 00 00 3C 
06120     0C 0C 0C 0C 
06124     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
06128     3C 00 00 00 
0612c     00 00 00 00 
06130     01 03 07 0E 
06134     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
06138     40 00 00 00 
0613c     00 00 00 3C 
06140     30 30 30 30 
06144     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
06148     3C 00 00 00 
0614c     1C 36 00 00 
06150     00 00 00 00 
06154     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06158     00 00 00 00 
0615c     00 00 00 00 
06160     00 00 00 00 
06164     00 00 00 00 
06168     00          | 	byte	$00[17]
06169     FF 00 00 0C 
0616d     18 00 00 00 
06171     00 00 00 00 
06175     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06179     00 00 00 00 
0617d     00 00 00 00 
06181     00          | 	byte	$00[9]
06182     1E 30 3E 33 
06186     33 33 6E 00 
0618a     00 00 00 00 
0618e     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
06192     1E 36 66 66 
06196     66 66 3E 00 
0619a     00 00 00 00 
0619e     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
061a2     3E 63 03 03 
061a6     03 63 3E 00 
061aa     00 00 00 00 
061ae     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
061b2     3C 36 33 33 
061b6     33 33 6E 00 
061ba     00 00 00 00 
061be     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
061c2     3E 63 7F 03 
061c6     03 63 3E 00 
061ca     00 00 00 00 
061ce     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
061d2     0C 1E 0C 0C 
061d6     0C 0C 1E 00 
061da     00 00 00 00 
061de     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
061e2     6E 33 33 33 
061e6     33 33 3E 30 
061ea     33 1E 00 00 
061ee     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
061f2     36 6E 66 66 
061f6     66 66 67 00 
061fa     00 00 00 00 
061fe     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
06202     1C 18 18 18 
06206     18 18 3C 00 
0620a     00 00 00 00 
0620e     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
06212     70 60 60 60 
06216     60 60 60 66 
0621a     66 3C 00 00 
0621e     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
06222     66 36 1E 1E 
06226     36 66 67 00 
0622a     00 00 00 00 
0622e     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
06232     18 18 18 18 
06236     18 18       | 	byte	$18[6]
06238     3C 00 00 00 
0623c     00 00 00 00 
06240     00 00 37 7F 
06244     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
06248     63 00 00 00 
0624c     00 00 00 00 
06250     00 00 3B 66 
06254     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06258     66 00 00 00 
0625c     00 00 00 00 
06260     00 00 3E 63 
06264     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
06268     3E 00 00 00 
0626c     00 00 00 00 
06270     00 00 3B 66 
06274     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06278     3E 06 06 0F 
0627c     00 00 00 00 
06280     00 00 6E 33 
06284     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
06288     3E 30 30 78 
0628c     00 00 00 00 
06290     00 00 3B 6E 
06294     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
06298     0F 00 00 00 
0629c     00 00 00 00 
062a0     00 00 3E 63 
062a4     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
062a8     3E 00 00 00 
062ac     00 00 00 08 
062b0     0C 0C 3F 0C 
062b4     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
062b8     38 00 00 00 
062bc     00 00 00 00 
062c0     00 00 33 33 
062c4     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
062c8     6E 00 00 00 
062cc     00 00 00 00 
062d0     00 00 63 63 
062d4     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
062d8     1C 00 00 00 
062dc     00 00 00 00 
062e0     00 00 63 63 
062e4     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
062e8     36 00 00 00 
062ec     00 00 00 00 
062f0     00 00 63 36 
062f4     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
062f8     63 00 00 00 
062fc     00 00 00 00 
06300     00 00 63 63 
06304     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
06308     7E 60 30 1F 
0630c     00 00 00 00 
06310     00 00 7F 33 
06314     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
06318     7F 00 00 00 
0631c     00 00 00 70 
06320     18 18 18 0E 
06324     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
06328     70 00 00 00 
0632c     00 00 00 18 
06330     18 18 18 18 
06334     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
06338     18 00 00 00 
0633c     00 00 00 0E 
06340     18 18 18 70 
06344     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
06348     0E 00 00 00 
0634c     6E 3B 00 00 
06350     00 00 00 00 
06354     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06358     00 00 00 00 
0635c     00 00 00 00 
06360     00 00       | 	byte	$00[10]
06362     08 1C 36 63 
06366     63 63 7F 00 
0636a     00 00 00 00 
0636e     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
06372     03 03 03 03 
06376     43 66 3C 18 
0637a     30 1E 00 00 
0637e     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
06382     33 33 33 33 
06386     33 33       | 	byte	$33[6]
06388     6E 00 00 00 
0638c     00 00 60 30 
06390     18 00 3E 63 
06394     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
06398     3E 00 00 00 
0639c     00 00 08 1C 
063a0     36 00 1E 30 
063a4     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
063a8     6E 00 00 00 
063ac     00 00 00 00 
063b0     33 00 1E 30 
063b4     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
063b8     6E 00 00 00 
063bc     00 00 1C 36 
063c0     1C 00 33 33 
063c4     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
063c8     6E 00 00 00 
063cc     00 00 60 30 
063d0     18 00 3E 63 
063d4     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
063d8     3E 00 00 00 
063dc     00 00 00 00 
063e0     00 00 3E 63 
063e4     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
063e8     3E 18 30 1E 
063ec     00 00 00 1C 
063f0     58 78 38 18 
063f4     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
063f8     3C 00 00 00 
063fc     00 00 00 00 
06400     63 00 3E 63 
06404     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
06408     3E 00 00 00 
0640c     66 33 00 3E 
06410     63 63 63 63 
06414     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06418     3E 00 00 00 
0641c     00 00 CC 66 
06420     33 00 3E 63 
06424     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
06428     3E 00 00 00 
0642c     00 00 18 3C 
06430     66 00 1C 18 
06434     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
06438     3C 00 00 00 
0643c     30 18 00 7F 
06440     63 61 30 18 
06444     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
06448     7F 00 00 00 
0644c     00 63 00 08 
06450     1C 36 63 63 
06454     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
06458     63 00 00 00 
0645c     30 18 00 3C 
06460     66 43 03 03 
06464     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
06468     3C 00 00 00 
0646c     30 18 00 7F 
06470     66 46 16 1E 
06474     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
06478     7F 00 00 00 
0647c     0C 06 00 0F 
06480     06 06 06 06 
06484     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
06488     7F 00 00 00 
0648c     30 18 00 1C 
06490     18 18 18 18 
06494     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
06498     3C 00 00 00 
0649c     00 00 08 1C 
064a0     36 00 3E 63 
064a4     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
064a8     3E 00 00 00 
064ac     00 00 00 00 
064b0     63 00 3E 63 
064b4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
064b8     3E 00 00 00 
064bc     00 00 00 6F 
064c0     46 26 06 06 
064c4     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
064c8     7F 00 00 00 
064cc     00 00 00 6E 
064d0     4C 2C 0C 0C 
064d4     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
064d8     1E 00 00 00 
064dc     30 18 00 3E 
064e0     63 63 06 1C 
064e4     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
064e8     3E 00 00 00 
064ec     00 00 60 30 
064f0     18 00 3E 63 
064f4     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
064f8     3E 00 00 00 
064fc     00 63 00 3E 
06500     63 63 63 63 
06504     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06508     3E 00 00 00 
0650c     00 63 00 63 
06510     63 63 63 63 
06514     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
06518     3E 00 00 00 
0651c     6C 38 00 7E 
06520     7E 5A 18 18 
06524     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
06528     3C 00 00 00 
0652c     00 00 60 48 
06530     2C 0C 3F 0C 
06534     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
06538     38 00 00 00 
0653c     00 00 00 0F 
06540     26 36 1E 0E 
06544     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
06548     7F 00 00 00 
0654c     00 00 00 00 
06550     00 63 36 1C 
06554     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
06558     00 00 00 00 
0655c     00 00       | 	byte	$00[6]
0655e     36 1C 08 00 
06562     3E 63 03 03 
06566     03 63 3E 00 
0656a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0656e     30 18 0C 00 
06572     1E 30 3E 33 
06576     33 33 6E 00 
0657a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0657e     60 30 18 00 
06582     1C 18 18 18 
06586     18 18 3C 00 
0658a     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
0658e     60 30 18 00 
06592     3E 63 63 63 
06596     63 63 3E 00 
0659a     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
0659e     30 18 0C 00 
065a2     33 33 33 33 
065a6     33 33 6E 00 
065aa     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
065ae     00 08 1C 36 
065b2     63 63 7F 63 
065b6     63 63 63 18 
065ba     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
065be     00 00 00 00 
065c2     1E 30 3E 33 
065c6     33 33 6E 18 
065ca     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
065ce     00 7F 63 61 
065d2     30 18 0C 06 
065d6     43 63 7F 00 
065da     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
065de     36 1C 08 00 
065e2     7F 33 18 0C 
065e6     06 63 7F 00 
065ea     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
065ee     00 7F 66 46 
065f2     16 1E 16 06 
065f6     46 66 7F 18 
065fa     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
065fe     00 00 00 00 
06602     3E 63 7F 03 
06606     03 63 3E 18 
0660a     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
0660e     00 3C 66 03 
06612     1F 03 0F 03 
06616     03 66 3C 00 
0661a     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
0661e     60 30 18 00 
06622     7F 33 18 0C 
06626     06 63 7F 00 
0662a     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
0662e     00 3C 66 43 
06632     03 03 03 03 
06636     43 66 3C 00 
0663a     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
0663e     00 00 00 00 
06642     3E 63 06 1C 
06646     30 63 3E 18 
0664a     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0664e     00 00 00 00 
06652     00 00       | 	byte	$00[6]
06654     6C 36 1B 36 
06658     6C 00 00 00 
0665c     00 00 00 00 
06660     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06664     1B 36 6C 36 
06668     1B 00 00 00 
0666c     88 22 88 22 
06670     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
06674     88 22 88 22 
06678     88 22 88 22 
0667c     AA 55 AA 55 
06680     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
06684     AA 55 AA 55 
06688     AA 55 AA 55 
0668c     BB EE BB EE 
06690     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
06694     BB EE BB EE 
06698     BB EE BB EE 
0669c     18 18 18 18 
066a0     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
066a4     18 18 18 18 
066a8     18 18 18 18 
066ac     18 18 18 18 
066b0     18 18 18    | 	byte	$18[15]
066b3     1F 18 18 18 
066b7     18 18 18 18 
066bb     18 30 18 00 
066bf     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
066c3     63 7F 63 63 
066c7     63 63 00 00 
066cb     00 1C 36 00 
066cf     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
066d3     63 7F 63 63 
066d7     63 63 00 00 
066db     00 36 1C 00 
066df     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
066e3     1E 16 06 46 
066e7     66 7F 00 00 
066eb     00 00 00 00 
066ef     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
066f3     1C 30 60 63 
066f7     63 3E 18 30 
066fb     1E 6C 6C 6C 
066ff     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
06703     6F 6C 6C 6C 
06707     6C 6C 6C 6C 
0670b     6C 6C 6C 6C 
0670f     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06713     6C 6C 6C 6C 
06717     6C 6C 6C 6C 
0671b     6C          | 	byte	$6c[9]
0671c     00 00 00 00 
06720     00          | 	byte	$00[5]
06721     7F 60 6F 6C 
06725     6C 6C 6C 6C 
06729     6C 6C 6C 6C 
0672d     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06731     6F 60 7F 00 
06735     00 00 00 00 
06739     00 00 00 18 
0673d     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
06741     61 30 18 0C 
06745     06 43 63 7F 
06749     00 00 00 00 
0674d     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
06751     00 7F 33 18 
06755     0C 06 63 7F 
06759     00 00 00 00 
0675d     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
06761     00 00 1F 18 
06765     18 18 18 18 
06769     18 18 18 18 
0676d     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06771     18 18 F8 00 
06775     00 00 00 00 
06779     00 00 00 18 
0677d     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
06781     18 18 FF 00 
06785     00 00 00 00 
06789     00 00 00 00 
0678d     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06791     00 00 FF 18 
06795     18 18 18 18 
06799     18 18 18 18 
0679d     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
067a1     18 18 F8 18 
067a5     18 18 18 18 
067a9     18 18 18 00 
067ad     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
067b1     00 00 FF 00 
067b5     00 00 00 00 
067b9     00 00 00 18 
067bd     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
067c1     18 18 FF 18 
067c5     18 18 18 18 
067c9     18 18 18 63 
067cd     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
067d1     36 63 63 7F 
067d5     63 63 63 63 
067d9     00 00 00 00 
067dd     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
067e1     00 1E 30 3E 
067e5     33 33 33 6E 
067e9     00 00 00 6C 
067ed     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
067f1     EC 0C FC 00 
067f5     00 00 00 00 
067f9     00 00 00 00 
067fd     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06801     FC 0C EC 6C 
06805     6C 6C 6C 6C 
06809     6C 6C 6C 6C 
0680d     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06811     EF 00 FF 00 
06815     00 00 00 00 
06819     00 00 00 00 
0681d     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06821     FF 00 EF 6C 
06825     6C 6C 6C 6C 
06829     6C 6C 6C 6C 
0682d     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
06831     EC 0C EC 6C 
06835     6C 6C 6C 6C 
06839     6C 6C 6C 00 
0683d     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
06841     FF 00 FF 00 
06845     00 00 00 00 
06849     00 00 00 6C 
0684d     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
06851     EF 00 EF 6C 
06855     6C 6C 6C 6C 
06859     6C 6C 6C 00 
0685d     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
06861     63 3E 63 63 
06865     63 63 3E 63 
06869     00 00 00 00 
0686d     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
06871     30 3C 36 33 
06875     33 33 33 6E 
06879     00 00 00 00 
0687d     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
06881     66 66 6F 66 
06885     66 66 36 1F 
06889     00 00 00 36 
0688d     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
06891     66 66 66 66 
06895     66 66       | 	byte	$66[6]
06897     36 1F 00 00 
0689b     00 00 63 00 
0689f     7F 66 46 16 
068a3     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
068a7     66 7F 00 00 
068ab     00 6C 38 00 
068af     38 30 30 3C 
068b3     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
068b7     33 6E 00 00 
068bb     00 36 1C 00 
068bf     63 67 6F 7F 
068c3     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
068c7     63 63 00 00 
068cb     00 30 18 00 
068cf     3C 18 18 18 
068d3     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
068d7     18 3C 00 00 
068db     00 3C 66 00 
068df     3C 18 18 18 
068e3     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
068e7     18 3C 00 00 
068eb     00 00 00 36 
068ef     1C 08 00 3E 
068f3     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
068f7     63 3E 00 00 
068fb     00 18 18 18 
068ff     18 18 18 18 
06903     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
06907     00 00 00 00 
0690b     00 00 00 00 
0690f     00 00 00 00 | 	byte	$00[12]
06913     F8 18 18 18 
06917     18 18 18 18 
0691b     18 FF FF FF 
0691f     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
06923     FF FF FF FF 
06927     FF FF FF FF 
0692b     FF          | 	byte	$ff[9]
0692c     00 00 00 00 
06930     00 00 00    | 	byte	$00[7]
06933     FF FF FF FF 
06937     FF FF FF FF 
0693b     FF          | 	byte	$ff[9]
0693c     00 00 00 7E 
06940     7E 5A 18 18 
06944     18 18 18 18 
06948     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
0694c     1C 36 1C 63 
06950     63 63 63 63 
06954     63 63 63 63 
06958     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0695c     FF FF FF FF 
06960     FF FF FF    | 	byte	$ff[7]
06963     00 00 00 00 
06967     00 00 00 00 
0696b     00          | 	byte	$00[9]
0696c     30 18 00 3E 
06970     63 63 63 63 
06974     63 63 63 63 
06978     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0697c     00 00 00 1E 
06980     33 33 33 1B 
06984     33 63 63 63 
06988     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
0698c     1C 36 00 3E 
06990     63 63 63 63 
06994     63 63 63 63 
06998     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0699c     30 18 00 63 
069a0     67 6F 7F 7B 
069a4     73 63 63 63 
069a8     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
069ac     00 00 60 30 
069b0     18 00 3B 66 
069b4     66 66 66 66 
069b8     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
069bc     00 00 36 1C 
069c0     08 00 3B 66 
069c4     66 66 66 66 
069c8     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
069cc     36 1C 00 3E 
069d0     63 63 06 1C 
069d4     30 60 63 63 
069d8     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
069dc     00 00 36 1C 
069e0     08 00 3E 63 
069e4     06 1C 30 63 
069e8     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
069ec     30 18 00 3F 
069f0     66 66 66 3E 
069f4     36 66 66 66 
069f8     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
069fc     30 18 00 63 
06a00     63 63 63 63 
06a04     63 63 63 63 
06a08     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06a0c     00 00 60 30 
06a10     18 00 3B 6E 
06a14     66 06 06 06 
06a18     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
06a1c     66 33 00 63 
06a20     63 63 63 63 
06a24     63 63 63 63 
06a28     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06a2c     00 00 60 30 
06a30     18 00 63 63 
06a34     63 63 63 63 
06a38     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
06a3c     30 18 00 66 
06a40     66 66 66 3C 
06a44     18 18 18 18 
06a48     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
06a4c     00 00 00 08 
06a50     0C 0C 3F 0C 
06a54     0C 0C 0C 6C 
06a58     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
06a5c     30 18 00 00 
06a60     00 00 00 00 
06a64     00 00 00 00 
06a68     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06a6c     00 00 00 00 
06a70     00 00 00 00 | 	byte	$00[8]
06a74     7F 00 00 00 
06a78     00 00 00 00 
06a7c     66 33 00 00 
06a80     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
06a84     00 00 00 00 
06a88     00 00 00 00 
06a8c     00 00 00 00 
06a90     00 00 00 00 
06a94     00 00 00 00 
06a98     00          | 	byte	$00[21]
06a99     0C 06 3C 36 
06a9d     1C 00 00 00 
06aa1     00 00 00 00 
06aa5     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06aa9     00 00 00 63 
06aad     3E 00 00 00 
06ab1     00 00 00 00 
06ab5     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ab9     00 00 00 00 
06abd     3E 63 06 1C 
06ac1     36 63 63 36 
06ac5     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
06ac9     00 00 00 00 
06acd     00 00 00 00 | 	byte	$00[8]
06ad1     18 00 7E 00 
06ad5     18 00 00 00 
06ad9     00 00 00 00 
06add     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06ae1     00 00 00 00 
06ae5     00 00 00 00 | 	byte	$00[8]
06ae9     18 30 1E 00 
06aed     00 00 1C 36 
06af1     36 1C 00 00 
06af5     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
06af9     00 00 00 00 
06afd     63 00 00 00 
06b01     00 00 00 00 
06b05     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b09     00 00 00 18 
06b0d     18 00 00 00 
06b11     00 00 00 00 
06b15     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b19     00 00 00 00 
06b1d     00          | 	byte	$00[5]
06b1e     CC 66 33 00 
06b22     33 33 33 33 
06b26     33 33 6E 00 
06b2a     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
06b2e     00 3F 66 66 
06b32     66 3E 36 66 
06b36     66 66 6F 00 
06b3a     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
06b3e     36 1C 08 00 
06b42     3B 6E 66 06 
06b46     06 06 0F 00 
06b4a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
06b4e     00 00 00 7E 
06b52     7E 7E 7E 7E 
06b56     7E 7E 00 00 
06b5a     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
06b5e     00 00 00 00 
06b62     00 00 00 00 
06b66     00 00 00 00 
06b6a     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b6c     00 00 00 00 
      ...             
06b9c     00 00 00 00 
06ba0     00 00 00    | st_font        file "st4font.def"
06ba3     FF FF 00 00 
06ba7     00 00 00 00 
06bab     00 18 18 18 
06baf     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06bb3     18 18 18 18 
06bb7     18 18 18 18 
06bbb     18          | 	byte	$18[9]
06bbc     00 00 00 00 
06bc0     00 00 00    | 	byte	$00[7]
06bc3     FF FF 18 18 
06bc7     18 18 18 18 
06bcb     18 18 18 18 
06bcf     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06bd3     FF FF 00 00 
06bd7     00 00 00 00 
06bdb     00 18 18 18 
06bdf     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06be3     1F 1F 18 18 
06be7     18 18 18 18 
06beb     18 18 18 18 
06bef     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06bf3     F8 F8 18 18 
06bf7     18 18 18 18 
06bfb     18 00 00 00 
06bff     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06c03     1F 1F 18 18 
06c07     18 18 18 18 
06c0b     18 00 00 00 
06c0f     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06c13     F8 F8 18 18 
06c17     18 18 18 18 
06c1b     18 18 18 18 
06c1f     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06c23     1F 1F 00 00 
06c27     00 00 00 00 
06c2b     00 18 18 18 
06c2f     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06c33     F8 F8 00 00 
06c37     00 00 00 00 
06c3b     00 18 18 18 
06c3f     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06c43     FF FF 18 18 
06c47     18 18 18 18 
06c4b     18 00 00 18 
06c4f     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
06c53     66 7E 7E 66 
06c57     66 66 66 30 
06c5b     18 00 00 7E 
06c5f     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
06c63     3E 06 06 06 
06c67     06 7E 7E 18 
06c6b     0C 30 18 3C 
06c6f     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
06c73     06 06 06 66 
06c77     66 7E 3C 00 
06c7b     00 30 18 66 
06c7f     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
06c83     7E 7E 76 76 
06c87     66 66 66 00 
06c8b     00 30 18 7C 
06c8f     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
06c93     1C 38 70 60 
06c97     60 7E 3E 00 
06c9b     00 30 18 7E 
06c9f     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
06ca3     18 0C 0C 06 
06ca7     06 7E 7E 00 
06cab     00 18 18 00 
06caf     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
06cb3     18 18 0C 0C 
06cb7     06 7E 7E 00 
06cbb     00 30 18 3C 
06cbf     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
06cc3     66 66 66 66 
06cc7     66          | 	byte	$66[5]
06cc8     7E 3C 00 00 
06ccc     00 00 06 06 
06cd0     06 06 16 1E 
06cd4     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
06cd8     7E 7E 00 00 
06cdc     00 00 00 00 
06ce0     00 3C 7C 60 
06ce4     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
06ce8     7E 7C 30 18 
06cec     00 00 00 00 
06cf0     00 3C 7E 66 
06cf4     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
06cf8     7E 7C 18 0C 
06cfc     00 00 30 18 
06d00     00 3C 3E 06 
06d04     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
06d08     7E 7C 00 00 
06d0c     00 00 30 18 
06d10     00 3E 7E 66 
06d14     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
06d18     66 66 00 00 
06d1c     00 00 30 18 
06d20     00 7C 7E 06 
06d24     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
06d28     7E 3E 00 00 
06d2c     00 00 30 18 
06d30     00 7E 7E 30 
06d34     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06d38     7E 7E 00 00 
06d3c     00 00 18 18 
06d40     00 7E 7E 30 
06d44     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06d48     7E 7E 00 00 
06d4c     00 00 30 18 
06d50     00 3C 7E 66 
06d54     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
06d58     7E 3C 00 00 
06d5c     00 00 1C 1C 
06d60     18 18 38 3C 
06d64     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
06d68     3C 3C 00 00 
06d6c     00 00 00 00 
06d70     00 00 00 00 
06d74     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06d78     00 00 00 00 
06d7c     00 00       | 	byte	$00[6]
06d7e     18 18 18 18 
06d82     18 18 18 18 | 	byte	$18[8]
06d86     00 00 18 18 
06d8a     00 00 00 00 
06d8e     66 66 66 66 
06d92     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
06d96     00 00 00 00 
06d9a     00 00 00 00 
06d9e     00          | 	byte	$00[9]
06d9f     66 66 FF FF 
06da3     66 66 FF FF 
06da7     66 66 00 00 
06dab     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
06daf     7C 7E 06 06 
06db3     3E 7C 60 60 
06db7     7E 3E 18 18 
06dbb     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
06dbf     66 30 30 18 
06dc3     18 0C 0C 66 
06dc7     66 00 00 00 
06dcb     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
06dcf     66 66 3C 1C 
06dd3     1C FC FE 66 
06dd7     66 FE FC 00 
06ddb     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
06ddf     18 18 18 18 
06de3     00 00 00 00 
06de7     00 00 00 00 
06deb     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
06def     18 1C 0C 0C 
06df3     0C 0C 0C 0C 
06df7     1C 18 30 00 
06dfb     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
06dff     18 38 30 30 
06e03     30 30 30 30 
06e07     38 18 0C 00 
06e0b     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
06e0f     66 66 3C 3C 
06e13     FF FF 3C 3C 
06e17     66 66 00 00 
06e1b     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
06e1f     00 18 18 18 
06e23     7E 7E 18 18 
06e27     18 00 00 00 
06e2b     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06e2f     00 00 00 00 
06e33     00 00       | 	byte	$00[6]
06e35     18 18 18 18 
06e39     18          | 	byte	$18[5]
06e3a     0C 04 00 00 
06e3e     00 00 00 00 
06e42     7E 7E 00 00 
06e46     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
06e4a     00 00 00 00 
06e4e     00 00 00 00 
06e52     00 00 00 00 
06e56     00          | 	byte	$00[13]
06e57     18 18 18 00 
06e5b     00 00 00 60 
06e5f     60 60 30 30 
06e63     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
06e67     06 06 06 00 
06e6b     00 00 00 3C 
06e6f     7E 66 66 66 
06e73     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
06e77     66 7E 3C 00 
06e7b     00 00 00 18 
06e7f     18 1C 1C 18 
06e83     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
06e87     18 7E 7E 00 
06e8b     00 00 00 3C 
06e8f     7E 66 66 30 
06e93     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
06e97     0C 7E 7E 00 
06e9b     00 00 00 7E 
06e9f     7E 30 30 18 
06ea3     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
06ea7     66 7E 3C 00 
06eab     00 00 00 30 
06eaf     30 38 38 3C 
06eb3     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
06eb7     7E 30 30 00 
06ebb     00 00 00 7E 
06ebf     7E 06 06 3E 
06ec3     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
06ec7     66 7E 3C 00 
06ecb     00 00 00 38 
06ecf     3C 0E 06 06 
06ed3     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
06ed7     66 7E 3C 00 
06edb     00 00 00 7E 
06edf     7E 60 60 30 
06ee3     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
06ee7     0C 0C 0C 00 
06eeb     00 00 00 3C 
06eef     7E 66 66 3C 
06ef3     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
06ef7     66 7E 3C 00 
06efb     00 00 00 3C 
06eff     7E 66 66 7E 
06f03     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
06f07     70 3C 1C 00 
06f0b     00 00 00 00 
06f0f     00 00 18 18 
06f13     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
06f17     18 18 18 00 
06f1b     00 00 00 00 
06f1f     00 00 18 18 
06f23     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
06f27     18 18 18 0C 
06f2b     04 00 00 00 
06f2f     70 38 1C 0E 
06f33     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
06f37     70 00 00 00 
06f3b     00 00 00 00 
06f3f     00 00 7E 7E 
06f43     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
06f47     00 00 00 00 
06f4b     00 00 00 00 | 	byte	$00[8]
06f4f     0E 1C 38 70 
06f53     E0 70 38 1C 
06f57     0E 00 00 00 
06f5b     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
06f5f     7E 66 66 30 
06f63     30 18 18 18 
06f67     00 18 18 00 
06f6b     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
06f6f     7E 66 66 66 
06f73     66 36 06 66 
06f77     66 7E 3C 00 
06f7b     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
06f7f     3C 7E 66 66 
06f83     66 7E 7E 66 
06f87     66 66 66 00 
06f8b     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
06f8f     7E 66 66 7E 
06f93     3E 66 66 66 
06f97     66 7E 3E 00 
06f9b     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
06f9f     7E 66 66 06 
06fa3     06 06 06 66 
06fa7     66 7E 3C 00 
06fab     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
06faf     7E 66 66 66 
06fb3     66 66 66 66 
06fb7     66 7E 3E 00 
06fbb     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
06fbf     7E 06 06 3E 
06fc3     3E 06 06 06 
06fc7     06 7E 7E 00 
06fcb     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
06fcf     7E 06 06 3E 
06fd3     3E 06 06 06 
06fd7     06 06 06 00 
06fdb     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
06fdf     7E 06 06 76 
06fe3     76 66 66 66 
06fe7     66 7E 3C 00 
06feb     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
06fef     66 66 66 7E 
06ff3     7E 66 66 66 
06ff7     66 66 66 00 
06ffb     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
06fff     7E 18 18 18 
07003     18 18 18 18 
07007     18 7E 7E 00 
0700b     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
0700f     60 60 60 60 
07013     60 60 60    | 	byte	$60[7]
07016     66 66 7E 3C 
0701a     00 00 00 00 
0701e     66 66 36 36 
07022     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
07026     66 66 C6 C6 
0702a     00 00 00 00 
0702e     06 06 06 06 
07032     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
07036     06 06 7E 7E 
0703a     00 00 00 00 
0703e     C6 C6 EE EE 
07042     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
07046     C6 C6 C6 C6 
0704a     00 00 00 00 
0704e     66 66 66 6E 
07052     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
07056     76 66 66 66 
0705a     00 00 00 00 
0705e     3C 7E 66 66 
07062     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
07066     66 66 7E 3C 
0706a     00 00 00 00 
0706e     3E 7E 66 66 
07072     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
07076     06 06 06 06 
0707a     00 00 00 00 
0707e     3C 7E 66 66 
07082     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
07086     66 56 3E 6C 
0708a     00 00 00 00 
0708e     3E 7E 66 66 
07092     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
07096     66 66 C6 C6 
0709a     00 00 00 00 
0709e     7C 7E 06 06 
070a2     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
070a6     60 60 7E 3E 
070aa     00 00 00 00 
070ae     7E 7E 18 18 
070b2     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
070b6     18 18 18 18 
070ba     00 00 00 00 
070be     66 66 66 66 
070c2     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
070c6     66 66 7E 3C 
070ca     00 00 00 00 
070ce     66 66 66 66 
070d2     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
070d6     3C 3C 18 18 
070da     00 00 00 00 
070de     C6 C6 C6 C6 
070e2     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
070e6     FE EE C6 82 
070ea     00 00 00 00 
070ee     66 66 66 3C 
070f2     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
070f6     3C 66 66 66 
070fa     00 00 00 00 
070fe     66 66 66 66 
07102     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
07106     18 18 18 18 
0710a     00 00 00 00 
0710e     7E 7E 30 30 
07112     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
07116     06 06 7E 7E 
0711a     00 00 00 00 
0711e     3C 3C 0C 0C 
07122     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
07126     0C 0C 3C 3C 
0712a     00 00 00 00 
0712e     06 06 0C 0C 
07132     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
07136     60 60 C0 C0 
0713a     00 00 00 00 
0713e     3C 3C 30 30 
07142     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
07146     30 30 3C 3C 
0714a     00 00 00 00 
0714e     18 18 3C 3C 
07152     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
07156     00 00 00 00 
0715a     00 00 00 00 
0715e     00 00 00 00 
07162     00 00 00 00 
07166     00 00       | 	byte	$00[18]
07168     FE FE 00 00 
0716c     00 00 0C 0C 
07170     18 18 00 00 
07174     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
07178     00 00 00 00 
0717c     00 00 00 00 
07180     00          | 	byte	$00[9]
07181     3C 7C 60 7C 
07185     7E 66 66 7E 
07189     7C 00 00 00 
0718d     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
07191     3E 7E 66 66 
07195     66 66 66 7E 
07199     3E 00 00 00 
0719d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
071a1     3C 3E 06 06 
071a5     06 06 06 7E 
071a9     7C 00 00 00 
071ad     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
071b1     7C 7E 66 66 
071b5     66 66 66 7E 
071b9     7C 00 00 00 
071bd     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
071c1     3C 7E 66 66 
071c5     7E 06 06 7E 
071c9     7C 00 00 00 
071cd     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
071d1     18 7E 7E 18 
071d5     18 18 18 18 
071d9     18 00 00 00 
071dd     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
071e1     7C 7E 66 66 
071e5     66 66 7E 7C 
071e9     60 7E 3E 00 
071ed     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
071f1     3E 7E 66 66 
071f5     66 66 66 66 
071f9     66 00 00 00 
071fd     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
07201     1C 1C 18 18 
07205     18 18 18 3C 
07209     3C 00 00 00 
0720d     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
07211     30 30 30 30 
07215     30 30 30 30 
07219     30          | 	byte	$30[9]
0721a     3E 1E 00 00 
0721e     06 06 06 36 
07222     36 1E 1E 1E 
07226     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
0722a     00 00 00 00 
0722e     1C 1C 18 18 
07232     18 18 18 18 
07236     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
0723a     00 00 00 00 
0723e     00 00 00    | 	byte	$00[7]
07241     6C FE FE D6 
07245     D6 C6 C6 C6 
07249     C6 00 00 00 
0724d     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
07251     3E 7E 66 66 
07255     66 66 66 66 
07259     66 00 00 00 
0725d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
07261     3C 7E 66 66 
07265     66 66 66 7E 
07269     3C 00 00 00 
0726d     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
07271     3E 7E 66 66 
07275     66 66 66 7E 
07279     3E 06 06 00 
0727d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
07281     7C 7E 66 66 
07285     66 66 66 7E 
07289     7C 60 60 00 
0728d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
07291     3E 7E 66 06 
07295     06 06 06 06 
07299     06 00 00 00 
0729d     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
072a1     7C 7E 06 0E 
072a5     3C 70 60 7E 
072a9     3E 00 00 00 
072ad     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
072b1     7E 7E 18 18 
072b5     18 18 18 78 
072b9     70 00 00 00 
072bd     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
072c1     66 66 66 66 
072c5     66 66 66    | 	byte	$66[7]
072c8     7E 7C 00 00 
072cc     00 00 00 00 
072d0     00 66 66 66 
072d4     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
072d8     18 18 00 00 
072dc     00 00 00 00 
072e0     00 C6 C6 D6 
072e4     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
072e8     C6 82 00 00 
072ec     00 00 00 00 
072f0     00 66 66 3C 
072f4     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
072f8     66 66 00 00 
072fc     00 00 00 00 
07300     00 66 66 66 
07304     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
07308     7C 60 7E 3E 
0730c     00 00 00 00 
07310     00 7E 7E 30 
07314     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
07318     7E 7E 00 00 
0731c     00 00 30 18 
07320     18 18 18 0C 
07324     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
07328     18 30 00 00 
0732c     00 00 18 18 
07330     18 18 18 18 
07334     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
07338     18 18 00 00 
0733c     00 00 0C 18 
07340     18 18 18 30 
07344     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
07348     18 0C 00 00 
0734c     00 00 6C 7E 
07350     36 00 00 00 
07354     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
07358     00 00 00 00 
0735c     00 00 00 00 
07360     00          | 	byte	$00[9]
07361     18 18 18 18 
07365     18 18 00 00 
07369     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0736c     00 00 00 00 
07370     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
07374     00 00 00 00 
07378     00 80 80 80 
0737c     00 00 00 FF 
07380     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
07384     00 00 00 00 
07388     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
07389     80 00 00 00 
0738d     00 80 00 00 
07391     80 80 00 00 
07395     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
07399     80 00 80 00 
0739d     00 40 80 00 
073a1     AA AA AA 00 
073a5     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
073a9     FF 00 00 00 
073ad     00 FF 00 00 
073b1     FF FF 00 00 
073b5     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
073b9     FF 00 FF 00 
073bd     00 FF FF 00 
073c1     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
073c4     00 00 00 00 
073c8     00          | ataripalette   file "ataripalettep2.def"
073c9     11 11 11 00 
073cd     22 22 22 00 
073d1     33 33 33 00 
073d5     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
073d9     55 55 55 00 
073dd     66 66 66 00 
073e1     77 77 77 00 
073e5     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
073e9     99 99 99 00 
073ed     AA AA AA 00 
073f1     BB BB BB 00 
073f5     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
073f9     DD DD DD 00 
073fd     EE EE EE 00 
07401     FF FF FF 00 
07405     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
07409     00 14 40 00 
0740d     00 1E 60 00 
07411     00 28 80 00 
07415     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
07419     00 3C BF 00 
0741d     00 46 DF 00 
07421     00 50 FF 00 
07425     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
07429     39 77 FF 00 
0742d     55 8A FF 00 
07431     71 9E FF 00 
07435     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
07439     AA C5 FF 00 
0743d     C6 D8 FF 00 
07441     E3 EC FF 00 
07445     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
07449     00 00 40 00 
0744d     00 00 60 00 
07451     00 00 80 00 
07455     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
07459     00 00 BF 00 
0745d     00 00 DF 00 
07461     00 00 FF 00 
07465     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
07469     39 39 FF 00 
0746d     55 55 FF 00 
07471     71 71 FF 00 
07475     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
07479     AA AA FF 00 
0747d     C6 C6 FF 00 
07481     E3 E3 FF 00 
07485     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
07489     20 00 40 00 
0748d     30 00 60 00 
07491     40 00 80 00 
07495     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
07499     60 00 BF 00 
0749d     70 00 DF 00 
074a1     80 00 FF 00 
074a5     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
074a9     9C 39 FF 00 
074ad     AA 55 FF 00 
074b1     B8 71 FF 00 
074b5     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
074b9     D5 AA FF 00 
074bd     E3 C6 FF 00 
074c1     F1 E3 FF 00 
074c5     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
074c9     40 00 40 00 
074cd     60 00 60 00 
074d1     80 00 80 00 
074d5     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
074d9     BF 00 BF 00 
074dd     DF 00 DF 00 
074e1     FF 00 FF 00 
074e5     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
074e9     FF 39 FF 00 
074ed     FF 55 FF 00 
074f1     FF 71 FF 00 
074f5     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
074f9     FF AA FF 00 
074fd     FF C6 FF 00 
07501     FF E3 FF 00 
07505     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
07509     40 00 20 00 
0750d     60 00 30 00 
07511     80 00 40 00 
07515     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
07519     BF 00 60 00 
0751d     DF 00 70 00 
07521     FF 00 80 00 
07525     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
07529     FF 39 9C 00 
0752d     FF 55 AA 00 
07531     FF 71 B8 00 
07535     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
07539     FF AA D5 00 
0753d     FF C6 E3 00 
07541     FF E3 F1 00 
07545     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
07549     40 00 00 00 
0754d     60 00 00 00 
07551     80 00 00 00 
07555     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
07559     BF 00 00 00 
0755d     DF 00 00 00 
07561     FF 00 00 00 
07565     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
07569     FF 39 39 00 
0756d     FF 55 55 00 
07571     FF 71 71 00 
07575     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
07579     FF AA AA 00 
0757d     FF C6 C6 00 
07581     FF E3 E3 00 
07585     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
07589     40 10 00 00 
0758d     60 18 00 00 
07591     80 20 00 00 
07595     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
07599     BF 30 00 00 
0759d     DF 38 00 00 
075a1     FF 40 00 00 
075a5     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
075a9     FF 6A 39 00 
075ad     FF 80 55 00 
075b1     FF 95 71 00 
075b5     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
075b9     FF BF AA 00 
075bd     FF D5 C6 00 
075c1     FF EA E3 00 
075c5     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
075c9     40 20 00 00 
075cd     60 30 00 00 
075d1     80 40 00 00 
075d5     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
075d9     BF 60 00 00 
075dd     DF 70 00 00 
075e1     FF 80 00 00 
075e5     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
075e9     FF 9C 39 00 
075ed     FF AA 55 00 
075f1     FF B8 71 00 
075f5     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
075f9     FF D5 AA 00 
075fd     FF E3 C6 00 
07601     FF F1 E3 00 
07605     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
07609     40 30 00 00 
0760d     60 48 00 00 
07611     80 60 00 00 
07615     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
07619     BF 90 00 00 
0761d     DF A8 00 00 
07621     FF C0 00 00 
07625     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
07629     FF CE 39 00 
0762d     FF D5 55 00 
07631     FF DC 71 00 
07635     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
07639     FF EA AA 00 
0763d     FF F1 C6 00 
07641     FF F8 E3 00 
07645     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
07649     30 40 00 00 
0764d     48 60 00 00 
07651     60 80 00 00 
07655     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
07659     90 BF 00 00 
0765d     A8 DF 00 00 
07661     C0 FF 00 00 
07665     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
07669     CE FF 39 00 
0766d     D5 FF 55 00 
07671     DC FF 71 00 
07675     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
07679     EA FF AA 00 
0767d     F1 FF C6 00 
07681     F8 FF E3 00 
07685     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
07689     00 40 00 00 
0768d     00 60 00 00 
07691     00 80 00 00 
07695     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
07699     00 BF 00 00 
0769d     00 DF 00 00 
076a1     00 FF 00 00 
076a5     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
076a9     39 FF 39 00 
076ad     55 FF 55 00 
076b1     71 FF 71 00 
076b5     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
076b9     AA FF AA 00 
076bd     C6 FF C6 00 
076c1     E3 FF E3 00 
076c5     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
076c9     00 40 14 00 
076cd     00 60 1E 00 
076d1     00 80 28 00 
076d5     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
076d9     00 BF 3C 00 
076dd     00 DF 46 00 
076e1     00 FF 50 00 
076e5     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
076e9     39 FF 77 00 
076ed     55 FF 8A 00 
076f1     71 FF 9E 00 
076f5     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
076f9     AA FF C5 00 
076fd     C6 FF D8 00 
07701     E3 FF EC 00 
07705     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
07709     00 40 28 00 
0770d     00 60 3C 00 
07711     00 80 50 00 
07715     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
07719     00 BF 78 00 
0771d     00 DF 8C 00 
07721     00 FF A0 00 
07725     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
07729     39 FF B5 00 
0772d     55 FF C0 00 
07731     71 FF CA 00 
07735     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
07739     AA FF DF 00 
0773d     C6 FF EA 00 
07741     E3 FF F4 00 
07745     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
07749     00 40 40 00 
0774d     00 60 60 00 
07751     00 80 80 00 
07755     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
07759     00 BF BF 00 
0775d     00 DF DF 00 
07761     00 FF FF 00 
07765     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
07769     39 FF FF 00 
0776d     55 FF FF 00 
07771     71 FF FF 00 
07775     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
07779     AA FF FF 00 
0777d     C6 FF FF 00 
07781     E3 FF FF 00 
07785     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
07789     00 28 40 00 
0778d     00 3C 60 00 
07791     00 50 80 00 
07795     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
07799     00 78 BF 00 
0779d     00 8C DF 00 
077a1     00 A0 FF 00 
077a5     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
077a9     39 B5 FF 00 
077ad     55 C0 FF 00 
077b1     71 CA FF 00 
077b5     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
077b9     AA DF FF 00 
077bd     C6 EA FF 00 
077c1     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
077c4                 | '**********************************************************************************
077c4                 | '
077c4                 | '        Timings and colors definitions
077c4                 | '
077c4                 | '**********************************************************************************
077c4                 | 
077c4                 |    'streamer sets for text mode, to add to timings[0..5]
077c4                 | 
077c4                 | 
077c4                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
077c4     10 00 00 00 
077c8     50 00 00 00 
077cc     14 00 00 00 
077d0     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
077d4     70 00 00 00 
077d8     08 00 00 00 
077dc     30 00 00 00 
077e0     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
077e4     10 00 00 00 
077e8     10 00 00 00 
077ec     00 00 00 00 
077f0     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
077f4     E0 01 00 00 
077f8     F6 32 24 15 
077fc     FB 6C C3 01 
07800     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
07804                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
07804     12 00 00 00 
07808     30 00 00 00 
0780c     10 00 00 00 
07810     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
07814     18 00 00 00 
07818     08 00 00 00 
0781c     18 00 00 00 
07820     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
07824     20 00 00 00 
07828     18 00 00 00 
0782c     40 00 00 00 
07830     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
07834     F0 01 00 00 
07838     00 D0 12 13 
0783c     FB 0F 00 01 
07840     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
07844     10 00 00 00 
07848     40 00 00 00 
0784c     10 00 00 00 
07850     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
07854     08 00 00 00 
07858     08 00 00 00 
0785c     08 00 00 00 
07860     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
07864     40 00 00 00 
07868     20 00 00 00 
0786c     80 00 00 00 
07870     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
07874     E0 01 00 00 
07878     70 AE E9 10 
0787c     FB 8B FF 01 
07880     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
07884     10 00 00 00 
07888     50 00 00 00 
0788c     14 00 00 00 
07890     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
07894     00 00 00 00 
07898     08 00 00 00 
0789c     00 00 00 00 
078a0     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
078a4     10 00 00 00 
078a8     10 00 00 00 
078ac     C0 00 00 00 
078b0     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
078b4     40 02 00 00 
078b8     F6 32 24 15 
078bc     FB 6C C3 01 
078c0     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
078c4     50 00 00 00 
078c8     A0 00 00 00 
078cc     54 00 00 00 
078d0     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
078d4     08 00 00 00 
078d8     08 00 00 00 
078dc     08 00 00 00 
078e0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
078e4     0C 00 00 00 
078e8     08 00 00 00 
078ec     00 01 00 00 
078f0     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
078f4     E0 01 00 00 
078f8     10 06 56 15 
078fc     FB 64 C3 01 
07900     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
07904     50 00 00 00 
07908     32 00 00 00 
0790c     50 00 00 00 
07910     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
07914     08 00 00 00 
07918     08 00 00 00 
0791c     08 00 00 00 
07920     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
07924     0C 00 00 00 
07928     08 00 00 00 
0792c     40 01 00 00 
07930     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
07934     E0 01 00 00 
07938     F2 CD 33 13 
0793c     FB 53 92 01 
07940     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
07944     18 00 00 00 
07948     30 00 00 00 
0794c     18 00 00 00 
07950     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
07954     08 00 00 00 
07958     08 00 00 00 
0795c     08 00 00 00 
07960     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
07964     0C 00 00 00 
07968     08 00 00 00 
0796c     80 01 00 00 
07970     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
07974     E0 01 00 00 
07978     F4 8F 11 11 
0797c     FB 3A 55 01 
07980     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
07984     20 00 00 00 
07988     40 00 00 00 
0798c     22 00 00 00 
07990     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
07994     00 00 00 00 
07998     08 00 00 00 
0799c     00 00 00 00 
079a0     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
079a4     0C 00 00 00 
079a8     08 00 00 00 
079ac     C0 01 00 00 
079b0     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
079b4     F0 01 00 00 
079b8     F2 CD 33 13 
079bc     FB 53 92 01 
079c0     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
079c4                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
079c4     00 75 C7 97 
079c8     27 47 F6 0A 
079cc     05 79 CB 9B 
079d0     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
079d4                 | 
079d4     28 12 64 FD | hdmi            setq    #9
079d8     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
079dc                 |            '     setq2   #255
079dc                 |             '    rdlong  $100, paletteptr 
079dc     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
079e0     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
079e4     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
079e8     78 F9 02 F1 |                 add     ii,hbase
079ec     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
079f0     7B 0B 80 FF 
079f4     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
079f8                 | 
079f8     66 66 86 FF 
079fc     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
07a00                 | 
07a00                 | 
07a00                 | ''--------  frame rendering main loop  ---------------------------------------------------
07a00                 | 
07a00                 | p101
07a00     28 14 64 FD |                 setq    #10
07a04     00 DF 06 FB |                 rdlong  framebuf,  ptra
07a08     28 1E 64 FD |                 setq    #15
07a0c     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
07a10     71 99 02 FB |                 rdlong  border,borderptr
07a14                 | 
07a14     01 C4 06 F1 |                 add     frames,#1
07a18     76 F5 02 F6 |                 mov     dlptr2,dlptr
07a1c                 | 
07a1c     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
07a20     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
07a24     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
07a28     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
07a2c                 |  '' up porch
07a2c                 | 
07a2c     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
07a30     49 FF 02 F6 |                 mov     hsync1,sync_001
07a34     37 A8 46 FB |                 callpa  i_upporch ,#blank
07a38     72 01 68 FC |                 wrlong  #0,vblankptr
07a3c                 |                 
07a3c     1F EA 16 F4 |                 testb   paletteptr,#31 wc
07a40     29 FE 65 3D |          if_nc  setq2   #255
07a44     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
07a48                 | 
07a48                 | '' cursor blinking
07a48                 | 
07a48     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
07a4c     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
07a50                 | 
07a50                 | '' main screen
07a50                 | 
07a50     00 BE 06 F6 |                 mov linenum,#0
07a54     00 18 07 F6 |                 mov rcnt,#0
07a58     00 1C 07 F6 |                 mov rcnt2a,#0
07a5c                 | 
07a5c                 | 
07a5c     00 18 0F F2 | p301            cmp rcnt,#0 wz
07a60     18 00 90 AD |         if_z    jmp #p306
07a64     01 18 87 F1 |                 sub rcnt,#1
07a68     90 F7 02 F6 |                 mov dl,rdl
07a6c     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
07a70     8F F7 02 A1 |    if_z        add dl,roffset  
07a74     7B 21 03 F6 |                 mov rdl,dl
07a78     04 00 90 FD |                 jmp #p307          
07a7c                 |           
07a7c                 |                 
07a7c     7A F7 02 FB | p306            rdlong  dl,dlptr2
07a80     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
07a84     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
07a88     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
07a8c                 | 
07a8c                 | '' Special entry:
07a8c                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
07a8c                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
07a8c                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
07a8c                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
07a8c                 | '' todo: set horizontal scroll (if needed)
07a8c                 | 
07a8c     02 FA 66 F0 |                 shl framebuf2,#2
07a90     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
07a94     04 22 0F F2 |                 cmp dlc,#%100 wz
07a98                 |   
07a98                 |                 
07a98     04 F4 06 F1 |                 add dlptr2,#4
07a9c     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
07aa0     7A 21 03 FB |                  rdlong rdl,dlptr2
07aa4     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
07aa8     04 18 47 F0 |                  shr rcnt,#4
07aac                 |              
07aac     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
07ab0     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
07ab4                 |                 
07ab4     04 1E 47 F0 |                  shr roffset,#4
07ab8     0C 1E 67 F0 |                  shl roffset,#12
07abc                 |   
07abc     9C FF 9F FD |                  jmp #p301
07ac0                 |                  
07ac0                 |                  
07ac0                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
07ac0     0C FA 46 F0 |                 shr     framebuf2,#12
07ac4     02 FA 66 F0 |                 shl     framebuf2,#2
07ac8                 | 
07ac8     7B 03 E3 F8 |                 getbyte t1,dl,#0
07acc     00 02 0F F2 |                 cmp     t1,#0 wz
07ad0     34 00 90 AD |     if_z        jmp     #borderline
07ad4                 | 
07ad4     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
07ad8     50 00 90 CD |           if_c   jmp     #textline
07adc     50 02 90 3D |           if_nc  jmp     #graphline
07ae0                 | '
07ae0     01 BE 06 F1 | p302            add     linenum,#1
07ae4     04 F4 06 F1 |                 add     dlptr2,#4
07ae8     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
07aec     6C FF 9F 5D |          if_nz  jmp     #p301
07af0                 | 
07af0     72 03 68 FC | p112            wrlong  #1,vblankptr
07af4     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
07af8                 | 
07af8     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
07afc     4B FF 02 F6 |                 mov     hsync1,sync_223
07b00     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
07b04     F8 FE 9F FD |                 jmp     #p101
07b08                 | 
07b08                 | '' ---------------  END of frame rendering loop -------------------------------------------
07b08                 | 
07b08                 | 
07b08     14 00 B0 FD | borderline      call    #hsync                      ' make a border
07b0c     4C A1 C2 FC |                 xcont   m_vi,border
07b10     CC FF 9F FD |                 jmp     #p302
07b14                 | 
07b14                 | 
07b14     08 00 B0 FD | blank           call    #hsync                          'blank lines
07b18     7E A1 C2 FC |                 xcont   m_vi,hsync0
07b1c     FD ED 6F 0B |         _ret_   djnz    pa,#blank
07b20                 | 
07b20     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
07b24     7F 9D B2 FC |                 xzero   m_sn,hsync1
07b28     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
07b2c                 | 
07b2c                 | 
07b2c                 | 
07b2c                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
07b2c                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
07b2c                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
07b2c                 | 
07b2c                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
07b2c                 | 
07b2c     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
07b30                 | 
07b30     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
07b34     7B 17 5B F8 |                 getnib  zoom, dl,#3
07b38     03 16 07 F5 |                 and             zoom, #3
07b3c                 | 
07b3c                 | 
07b3c                 | 
07b3c     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
07b40     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
07b44     3F BC 06 F5 |                 and     linestart,#63
07b48     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
07b4c     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
07b50                 | 
07b50     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
07b54                 | 
07b54                 |                        ' if fontline =0, get a border color
07b54                 | 
07b54     51 03 33 F9 | p102            getword t1,m_border,#0
07b58     00 02 0F F2 |                 cmp     t1, #0 wz
07b5c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07b60                 | 
07b60     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
07b64     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
07b68     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
07b6c     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
07b70     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
07b74     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
07b78     52 BB 02 F6 |                 mov m_lut2, m_lut1
07b7c     6A BB 02 F1 |                 add m_lut2, lutt1
07b80     58 0F 03 F6 |                 mov cpl2,i_cpl
07b84                 | 
07b84     02 16 0F F2 |                cmp zoom,#2 wz
07b88     E4 00 90 AD |           if_z jmp #p420
07b8c     01 16 0F F2 |                cmp zoom,#1 wz
07b90     64 00 90 AD |           if_z jmp #p410
07b94     00 16 0F F2 |                 cmp zoom,#0 wz
07b98     04 00 90 AD |           if_z jmp #p400
07b9c     50 01 90 FD |                jmp #p430
07ba0                 | 
07ba0                 |                    '
07ba0                 |  ''---------------------------------------------------------------------------------------------------------
07ba0     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
07ba4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07ba8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07bac     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07bb0     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07bb4     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07bb8     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07bbc     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07bc0     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07bc4     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07bc8                 | 
07bc8     81 BB C2 FC |                         xcont m_lut2,t1
07bcc                 | 
07bcc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07bd0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07bd4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07bd8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07bdc     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07be0     01 C0 86 F1 |                         sub     lutaddr,#1
07be4                 | 
07be4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07be8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07bec     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07bf0                 | 
07bf0     EB 0F 6F FB |                         djnz   cpl2,#p400
07bf4     28 01 90 FD |  p401                   jmp    #p103
07bf8                 | 
07bf8                 | ''------------------------------------------------------------------------------------------------------------
07bf8                 | 
07bf8     01 0E 47 F0 |  p410                   shr cpl2,#1
07bfc                 | 
07bfc                 | ''---------------------------------------------------------------------------------------------------------
07bfc     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
07c00     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07c04     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07c08     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07c0c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07c10     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07c14     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07c18     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07c1c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07c20     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07c24                 | 
07c24                 | 
07c24     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
07c28     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
07c2c     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
07c30     03 02 07 FA |                         mul t1,#3
07c34     81 BB C2 FC |                         xcont m_lut2,t1
07c38     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07c3c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07c40     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07c44     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07c48     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07c4c     01 C0 86 F1 |                         sub     lutaddr,#1
07c50     63 06 63 FD |                         mergew t3
07c54     03 06 07 FA |                         mul t3,#3
07c58     83 BB C2 FC |                         xcont m_lut2,t3
07c5c                 | 
07c5c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07c60     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07c64                 | 
07c64     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07c68                 | 
07c68     E4 0F 6F FB |                         djnz   cpl2,#p412
07c6c     B0 00 90 FD |  p411                   jmp    #p103
07c70                 | 
07c70                 | ''------------------------------------------------------------------------------------------------------------
07c70                 | 
07c70     02 0E 47 F0 |  p420                   shr cpl2,#2
07c74                 | 
07c74                 | ''---------------------------------------------------------------------------------------
07c74     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
07c78     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07c7c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07c80     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07c84     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07c88     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07c8c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07c90     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07c94     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07c98     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07c9c                 | 
07c9c     61 02 63 FD |                         mergeb t1
07ca0     81 07 3B F9 |                         getword t3,t1,#1
07ca4     0F 02 07 FA |                         mul t1,#15
07ca8     81 BB C2 FC |                         xcont m_lut2,t1
07cac                 | 
07cac     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07cb0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07cb4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07cb8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07cbc     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07cc0     01 C0 86 F1 |                         sub     lutaddr,#1
07cc4                 | 
07cc4     81 09 EB F8 |                         getbyte t4,t1,#1        '
07cc8     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
07ccc                 | 
07ccc     0F 06 07 FA |                         mul t3,#15
07cd0     83 BB C2 FC |                         xcont m_lut2,t3
07cd4                 | 
07cd4     83 0B EB F8 |                         getbyte t5,t3,#1
07cd8     85 BB C2 FC |                         xcont m_lut2, t5
07cdc     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07ce0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07ce4                 | 
07ce4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07ce8                 | 
07ce8     E2 0F 6F FB |                         djnz   cpl2,#p422
07cec     30 00 90 FD |  p421                   jmp    #p103
07cf0                 | 
07cf0                 | '--------------------------------------------------------------------------------------------------------------
07cf0                 | 
07cf0     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
07cf4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07cf8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07cfc                 | 
07cfc     00 BA C6 FC |                         xcont m_lut2,#0
07d00                 | 
07d00     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07d04     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07d08     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07d0c     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07d10     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07d14     01 C0 86 F1 |                         sub     lutaddr,#1
07d18                 | 
07d18     F5 0F 6F FB |                         djnz   cpl2,#p430
07d1c     00 00 90 FD |  p431                   jmp    #p103
07d20                 | 
07d20                 | ''------------------------------------------------------------------------------------------------------------
07d20                 | 
07d20                 | 
07d20                 | 
07d20     51 25 33 F9 | p103            getword  mb2,m_border,#0
07d24     00 24 0F F2 |                 cmp      mb2, #0 wz
07d28     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
07d2c                 | 
07d2c     B0 FD 9F FD |                 jmp #p302
07d30                 | 
07d30                 | '' -------------------------------------- END of text line ---------------------------------
07d30                 | 
07d30                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
07d30                 | 
07d30     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
07d34                 | 
07d34                 | 
07d34     51 25 33 F9 | p202            getword mb2,m_border,#0
07d38     00 24 0F F2 |                 cmp     mb2, #0 wz
07d3c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07d40                 | 
07d40                 | '----------------------------------------- display pixels
07d40                 | 
07d40     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
07d44     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
07d48                 | 
07d48     7B 17 5B F8 |                 getnib  zoom, dl,#3
07d4c     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
07d50                 | 
07d50     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
07d54     0C BC 06 F5 |                 and     colordepth,#12
07d58                 | 
07d58     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
07d5c     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
07d60     64 00 90 AD |           if_z  jmp     #p240
07d64                 | 
07d64     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
07d68     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
07d6c     98 00 90 AD |           if_z  jmp     #p250
07d70                 | 
07d70     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
07d74     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
07d78     FC 00 90 AD |           if_z  jmp     #p260
07d7c                 | 
07d7c     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
07d80                 | 
07d80                 | '' --- 8 bit color modes
07d80                 | 
07d80     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
07d84     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07d88                 | 
07d88     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
07d8c     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
07d90                 |        
07d90                 |  '  
07d90     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
07d94     25 0C 07 A6 |                 if_z mov skippattern,#%100101
07d98                 |     
07d98                 |  
07d98     05 0C 07 56 |                 if_nz mov skippattern,#%000101
07d9c     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
07da0                 |         
07da0                 | 
07da0                 |         
07da0     7D 11 03 FB | p235               rdlong  char,framebuf2
07da4     32 0C 63 FD |                    skipf skippattern
07da8     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
07dac     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
07db0     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
07db4     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
07db8     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
07dbc     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
07dc0     F7 0F 6F FB |                    djnz    cpl2,#p235
07dc4                 | 
07dc4     20 01 90 FD |                jmp    #p203
07dc8                 |                   
07dc8                 | 
07dc8                 | 
07dc8                 | '' --- 1 bit color modes
07dc8                 | 
07dc8     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
07dcc     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07dd0                 | 
07dd0     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
07dd4     13 0C 07 A6 |        if_z   mov skippattern,#%10011
07dd8     08 0C 07 56 |        if_nz  mov skippattern,#%01000
07ddc                 | 
07ddc                 | 
07ddc     7D 11 E3 FA | p241               rdword  char,framebuf2
07de0     44 10 FF F9 |                    movbyts char,#%01000100
07de4     63 10 63 FD |                    mergew  char
07de8     32 0C 63 FD |                    skipf skippattern
07dec     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
07df0     63 10 63 FD |                    mergew  char                    ' 1 0
07df4     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
07df8     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
07dfc     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
07e00     F6 0F 6F FB |                    djnz   cpl2,#p241
07e04                 | 
07e04                 | 
07e04     E0 00 90 FD |                jmp    #p203
07e08                 | 
07e08                 | '' --- 2 bit color modes
07e08                 | 
07e08     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
07e0c     C8 00 90 AD |        if_z   jmp #p251
07e10                 | 
07e10     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
07e14     30 00 90 AD |        if_z   jmp #p252
07e18                 | 
07e18                 | 
07e18     7D 11 C3 FA | p254               rdbyte char,framebuf2
07e1c     04 0A 07 F6 |                    mov  t5,#4
07e20     02 10 67 F0 | p255               shl  char,#2
07e24     88 03 53 F8 |                    getnib  t1,char,#2
07e28     03 02 07 F5 |                    and     t1,#3
07e2c     55 02 07 FA |                    mul     t1,#$55
07e30     81 05 03 F9 |                    rolbyte  t2,t1,#0
07e34     FA 0B 6F FB |                    djnz    t5,#p255
07e38     82 BB C2 FC |                    xcont   m_lut2,t2
07e3c     01 FA 06 F1 |                    add     framebuf2,#1
07e40     F5 0F 6F FB |                    djnz    cpl2,#p254
07e44     A0 00 90 FD |                    jmp     #p203
07e48                 | 
07e48     7D 11 E3 FA | p252               rdword char,framebuf2
07e4c     08 0A 07 F6 |                    mov  t5,#8
07e50     02 10 67 F0 | p253               shl  char,#2
07e54     88 03 63 F8 |                    getnib  t1,char,#4
07e58     03 02 07 F5 |                    and     t1,#3
07e5c     05 02 07 FA |                    mul     t1,#5
07e60     81 05 83 F8 |                    rolnib  t2,t1,#0
07e64     FA 0B 6F FB |                    djnz    t5,#p253
07e68     82 BB C2 FC |                    xcont   m_lut2,t2
07e6c     02 FA 06 F1 |                    add     framebuf2,#2
07e70     F5 0F 6F FB |                    djnz    cpl2,#p252
07e74     70 00 90 FD |                    jmp     #p203
07e78                 | 
07e78                 | '' ------ 4 bit color modes
07e78                 | 
07e78     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
07e7c     58 00 90 AD |        if_z   jmp #p251
07e80                 | 
07e80     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
07e84     2C 00 90 AD |        if_z   jmp #p262
07e88                 | 
07e88                 | 
07e88     7D 11 C3 FA | p263               rdbyte char,framebuf2
07e8c     02 0A DC FC |                            rep #5,#2
07e90     88 05 8B F8 |                              rolnib t2,char,#1
07e94     88 05 8B F8 |                                  rolnib t2,char,#1
07e98     88 05 8B F8 |                              rolnib t2,char,#1
07e9c     88 05 8B F8 |                                  rolnib t2,char,#1
07ea0     04 10 67 F0 |                              shl char,#4
07ea4     82 BB C2 FC |                    xcont   m_lut2,t2
07ea8     01 FA 06 F1 |                    add     framebuf2,#1
07eac     F6 0F 6F FB |                    djnz    cpl2,#p263
07eb0     34 00 90 FD |                    jmp     #p203
07eb4                 | 
07eb4     7D 11 E3 FA | p262               rdword  char,framebuf2
07eb8     04 06 DC FC |                            rep #3,#4
07ebc     88 05 9B F8 |                              rolnib t2,char,#3
07ec0     88 05 9B F8 |                                  rolnib t2,char,#3
07ec4     04 10 67 F0 |                              shl char,#4
07ec8     82 BB C2 FC |                    xcont   m_lut2,t2
07ecc     02 FA 06 F1 |                    add     framebuf2,#2
07ed0     F8 0F 6F FB |                    djnz    cpl2,#p262
07ed4     10 00 90 FD |                    jmp     #p203
07ed8                 | 
07ed8                 | ''---------- all color modes without zoom
07ed8                 | 
07ed8     87 07 D8 FC | p251               rep  #3,cpl2
07edc     7D 11 03 FB |                    rdlong  char,framebuf2
07ee0     04 FA 06 F1 |                    add     framebuf2,#4
07ee4     88 BB C2 FC |                    xcont   m_lut2,char
07ee8                 |           
07ee8                 |  ''-----------------------------------------------------------------------------------------
07ee8                 | p203           ' getword  mb2,m_border,#0
07ee8     00 24 0F F2 |                 cmp      mb2, #0 wz
07eec     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
07ef0                 | 
07ef0     EC FB 9F FD |                 jmp #p302
07ef4                 | 
07ef4                 | '' -------------------------------------- END of graph  line ---------------------------------
07ef4                 | 
07ef4                 | '' consts and vars
07ef4                 | 
07ef4     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
07ef8     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
07efc     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
07f00     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
07f04                 | 
07f04     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
07f08                 | 
07f08                 | '------ these longs will be set by setmode function
07f08                 | 
07f08     00 00 00 00 | m_bs            long    0        'blanks before sync
07f0c     00 00 00 00 | m_sn            long    0        'sync
07f10     00 00 00 00 | m_bv            long    0        'blanks before visible
07f14     00 00 00 00 | m_vi            long    0        'visible pixels #
07f18     00 00 00 00 | m_border        long    0        'left/right borders
07f1c     00 00 00 00 | m_lut1          long    0        'characters
07f20     00 00 00 00 | i_vborder       long    0        'up/down borders
07f24     00 00 00 00 | i_upporch       long    0        'up porch lines
07f28     00 00 00 00 | i_vsync         long    0        'vsync lines
07f2c     00 00 00 00 | i_downporch     long    0        'down porch lines
07f30     00 00 00 00 | i_modenum       long    0        'mode #
07f34     00 00 00 00 | i_cpl           long    0        'chars/longs per line
07f38     00 00 00 00 | i_lines         long    0        'scanlines #
07f3c     00 00 00 00 | i_clock         long    0
07f40     00 00 00 00 | i_hubset        long    0
07f44     00 00 00 00 | i_totalvis      long    0
07f48                 | 
07f48                 | '-------------------------------------
07f48                 | 
07f48     00 00 00 00 | m_lut2          long    0
07f4c                 | 
07f4c                 | colordepth
07f4c     00 00 00 00 | linestart       long    0
07f50     00 00 00 00 | linenum         long    0
07f54     00 01 00 00 | lutaddr         long    256
07f58                 | 
07f58     0E 00 00 00 | cursorsh        long    14
07f5c     00 00 00 00 | frames          long    0
07f60     00 00 00 00 | cursorx         long    0
07f64     00 00 00 00 | cursory         long    0
07f68     00 00 00 00 | cursorpos       long    0
07f6c     00 00 00 00 | cursorpos2      long    0
07f70     00 00 00 00 | fontstart       long    0
07f74     00 00 00 00 | border2         long 0
07f78     00 00 81 70 | lutiv           long $70810000
07f7c     00 00 88 00 | lutt1           long $00880000
07f80     00 00 80 00 | lutg1           long $00800000
07f84     00 00 80 10 | lutg2           long $10800000
07f88     00 00 80 20 | lutg4           long $20800000
07f8c     00 00 80 30 | lutg8           long $30800000
07f90     00 00 00 00 | framebuf        long 0
07f94     00 00 00 00 | fontbuf         long 0
07f98     00 00 00 00 | borderptr       long 0
07f9c     00 00 00 00 | vblankptr       long 0
07fa0     00 00 00 00 | cursorptr       long 0
07fa4     00 00 00 00 | modeptr         long 0
07fa8     00 00 00 00 | paletteptr      long 0
07fac     00 00 00 00 | dlptr           long 0
07fb0                 | fontnumptr      res     1
07fb0                 | fontnumptr      res     1
07fb0                 | hbase           res     1
07fb0                 | hbase           res     1
07fb0                 | borderptr2      res     1
07fb0                 | borderptr2      res     1
07fb0                 | dlptr2 res 1
07fb0                 | dlptr2 res 1
07fb0                 | dl              res 1
07fb0                 | dl              res 1
07fb0                 | ii              res     1
07fb0                 | ii              res     1
07fb0                 | framebuf2       res     1
07fb0                 | framebuf2       res     1
07fb0                 | hsync0          res     1
07fb0                 | hsync0          res     1
07fb0                 | hsync1          res     1
07fb0                 | hsync1          res     1
07fb0                 | fontline        res     1
07fb0                 | fontline        res     1
07fb0                 | t1              res     1
07fb0                 | t1              res     1
07fb0                 | t2              res     1
07fb0                 | t2              res     1
07fb0                 | t3 res 1
07fb0                 | t3 res 1
07fb0                 | t4 res 1
07fb0                 | t4 res 1
07fb0                 | t5 res 1
07fb0                 | t5 res 1
07fb0                 | skippattern res 1
07fb0                 | skippattern res 1
07fb0                 | cpl2 res 1
07fb0                 | cpl2 res 1
07fb0                 | char            res     1
07fb0                 | char            res     1
07fb0                 | backcolor       res     1
07fb0                 | backcolor       res     1
07fb0                 | charcolor       res     1
07fb0                 | charcolor       res     1
07fb0                 | zoom res 1
07fb0                 | zoom res 1
07fb0     00 00 00 00 | rcnt long 0 'dl repeat count
07fb4     00 00 00 00 | rcnt2 long 0
07fb8     00 00 00 00 | rcnt2a long 0
07fbc     00 00 00 00 | roffset long 0
07fc0     00 00 00 00 | rdl long 0  'dl repeat line
07fc4     00 00 00 00 | dlc long 0 'dl command
07fc8     00 00 00 00 | mb2 long 0
07fcc     00 00 00 00 | aend             long 0
07fd0                 |                 fit     496                     '
07fd0                 | __system__dat_
07fd0     00 00 00 00 
07fd4     00 00 00 00 | 	byte	$00[8]
07fd8     03 00 00 00 
07fdc     00 00 00 00 
07fe0     00 00 00 00 
07fe4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
07fe8     00 00 00 00 
07fec     00 00 00 00 
07ff0     00 00 00 00 | 	byte	$00[12]
07ff4     05 00 00 00 
07ff8     00 00 00 00 
07ffc     00 00 00 00 
08000     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08004     CC 81 00 00 | 	long	@@@__system__dat_ + 508
08008     D4 81 00 00 | 	long	@@@__system__dat_ + 516
0800c     00 00 00 00 | 	byte	$00, $00, $00, $00
08010     DC 81 00 00 | 	long	@@@__system__dat_ + 524
08014     E4 81 00 00 | 	long	@@@__system__dat_ + 532
08018     00 00 00 00 
0801c     00 00 00 00 | 	byte	$00[8]
08020     01 00 00 00 
08024     06 00 00 00 
08028     00 00 00 00 
0802c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08030     00 00 00 00 | 	byte	$00, $00, $00, $00
08034     EC 81 00 00 | 	long	@@@__system__dat_ + 540
08038     F4 81 00 00 | 	long	@@@__system__dat_ + 548
0803c     00 00 00 00 | 	byte	$00, $00, $00, $00
08040     FC 81 00 00 | 	long	@@@__system__dat_ + 556
08044     04 82 00 00 | 	long	@@@__system__dat_ + 564
08048     00 00 00 00 
0804c     00 00 00 00 | 	byte	$00[8]
08050     01 00 00 00 
08054     06 00 00 00 
08058     00 00 00 00 
0805c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08060     00 00 00 00 | 	byte	$00, $00, $00, $00
08064     0C 82 00 00 | 	long	@@@__system__dat_ + 572
08068     14 82 00 00 | 	long	@@@__system__dat_ + 580
0806c     00 00 00 00 | 	byte	$00, $00, $00, $00
08070     1C 82 00 00 | 	long	@@@__system__dat_ + 588
08074     24 82 00 00 | 	long	@@@__system__dat_ + 596
08078     00 00 00 00 
      ...             
081c8     00 00 00 00 
081cc     00 00 00 00 | 	byte	$00[344]
081d0     E4 38 00 00 | 	long	@@@__system___tx
081d4     00 00 00 00 | 	byte	$00, $00, $00, $00
081d8     2C 39 00 00 | 	long	@@@__system___rx
081dc     00 00 00 00 | 	byte	$00, $00, $00, $00
081e0     4C 52 00 00 | 	long	@@@__system___rxtxioctl_0131
081e4     00 00 00 00 | 	byte	$00, $00, $00, $00
081e8     C4 52 00 00 | 	long	@@@__system____dummy_flush_0132
081ec     00 00 00 00 | 	byte	$00, $00, $00, $00
081f0     E4 38 00 00 | 	long	@@@__system___tx
081f4     00 00 00 00 | 	byte	$00, $00, $00, $00
081f8     2C 39 00 00 | 	long	@@@__system___rx
081fc     00 00 00 00 | 	byte	$00, $00, $00, $00
08200     4C 52 00 00 | 	long	@@@__system___rxtxioctl_0131
08204     00 00 00 00 | 	byte	$00, $00, $00, $00
08208     C4 52 00 00 | 	long	@@@__system____dummy_flush_0132
0820c     00 00 00 00 | 	byte	$00, $00, $00, $00
08210     E4 38 00 00 | 	long	@@@__system___tx
08214     00 00 00 00 | 	byte	$00, $00, $00, $00
08218     2C 39 00 00 | 	long	@@@__system___rx
0821c     00 00 00 00 | 	byte	$00, $00, $00, $00
08220     4C 52 00 00 | 	long	@@@__system___rxtxioctl_0131
08224     00 00 00 00 | 	byte	$00, $00, $00, $00
08228     C4 52 00 00 | 	long	@@@__system____dummy_flush_0132
0822c     00 00 00 00 | 	byte	$00, $00, $00, $00
08230                 | __heap_base
08230     00 00 00 00 
      ...             
09230     00 00 00 00 
09234     00 00 00 00 | 	long	0[1026]
09238                 | objmem
09238     00 00 00 00 | 	long	0[1]
0923c 115             | 	org	COG_BSS_START
0923c 115             | _var01
0923c 115             | 	res	1
0923c 116             | _var02
0923c 116             | 	res	1
0923c 117             | _var03
0923c 117             | 	res	1
0923c 118             | _var04
0923c 118             | 	res	1
0923c 119             | _var05
0923c 119             | 	res	1
0923c 11a             | _var06
0923c 11a             | 	res	1
0923c 11b             | _var07
0923c 11b             | 	res	1
0923c 11c             | _var08
0923c 11c             | 	res	1
0923c 11d             | _var09
0923c 11d             | 	res	1
0923c 11e             | _var10
0923c 11e             | 	res	1
0923c 11f             | _var11
0923c 11f             | 	res	1
0923c 120             | _var12
0923c 120             | 	res	1
0923c 121             | _var13
0923c 121             | 	res	1
0923c 122             | _var14
0923c 122             | 	res	1
0923c 123             | _var15
0923c 123             | 	res	1
0923c 124             | _var16
0923c 124             | 	res	1
0923c 125             | arg01
0923c 125             | 	res	1
0923c 126             | arg02
0923c 126             | 	res	1
0923c 127             | arg03
0923c 127             | 	res	1
0923c 128             | arg04
0923c 128             | 	res	1
0923c 129             | arg05
0923c 129             | 	res	1
0923c 12a             | local01
0923c 12a             | 	res	1
0923c 12b             | local02
0923c 12b             | 	res	1
0923c 12c             | local03
0923c 12c             | 	res	1
0923c 12d             | local04
0923c 12d             | 	res	1
0923c 12e             | local05
0923c 12e             | 	res	1
0923c 12f             | local06
0923c 12f             | 	res	1
0923c 130             | local07
0923c 130             | 	res	1
0923c 131             | local08
0923c 131             | 	res	1
0923c 132             | local09
0923c 132             | 	res	1
0923c 133             | local10
0923c 133             | 	res	1
0923c 134             | local11
0923c 134             | 	res	1
0923c 135             | local12
0923c 135             | 	res	1
0923c 136             | local13
0923c 136             | 	res	1
0923c 137             | local14
0923c 137             | 	res	1
0923c 138             | local15
0923c 138             | 	res	1
0923c 139             | local16
0923c 139             | 	res	1
0923c 13a             | local17
0923c 13a             | 	res	1
0923c 13b             | local18
0923c 13b             | 	res	1
0923c 13c             | local19
0923c 13c             | 	res	1
0923c 13d             | local20
0923c 13d             | 	res	1
0923c 13e             | local21
0923c 13e             | 	res	1
0923c 13f             | local22
0923c 13f             | 	res	1
0923c 140             | local23
0923c 140             | 	res	1
0923c 141             | local24
0923c 141             | 	res	1
0923c 142             | local25
0923c 142             | 	res	1
0923c 143             | local26
0923c 143             | 	res	1
0923c 144             | local27
0923c 144             | 	res	1
0923c 145             | local28
0923c 145             | 	res	1
0923c 146             | local29
0923c 146             | 	res	1
0923c 147             | local30
0923c 147             | 	res	1
0923c 148             | local31
0923c 148             | 	res	1
0923c 149             | local32
0923c 149             | 	res	1
0923c 14a             | local33
0923c 14a             | 	res	1
0923c 14b             | local34
0923c 14b             | 	res	1
0923c 14c             | local35
0923c 14c             | 	res	1
0923c 14d             | local36
0923c 14d             | 	res	1
0923c 14e             | local37
0923c 14e             | 	res	1
0923c 14f             | local38
0923c 14f             | 	res	1
0923c 150             | local39
0923c 150             | 	res	1
0923c 151             | local40
0923c 151             | 	res	1
0923c 152             | local41
0923c 152             | 	res	1
0923c 153             | local42
0923c 153             | 	res	1
0923c 154             | local43
0923c 154             | 	res	1
0923c 155             | local44
0923c 155             | 	res	1
0923c 156             | local45
0923c 156             | 	res	1
0923c 157             | local46
0923c 157             | 	res	1
0923c 158             | local47
0923c 158             | 	res	1
0923c 159             | local48
0923c 159             | 	res	1
0923c 15a             | local49
0923c 15a             | 	res	1
0923c 15b             | local50
0923c 15b             | 	res	1
0923c 15c             | local51
0923c 15c             | 	res	1
0923c 15d             | local52
0923c 15d             | 	res	1
0923c 15e             | local53
0923c 15e             | 	res	1
0923c 15f             | local54
0923c 15f             | 	res	1
0923c 160             | local55
0923c 160             | 	res	1
0923c 161             | local56
0923c 161             | 	res	1
0923c 162             | local57
0923c 162             | 	res	1
0923c 163             | local58
0923c 163             | 	res	1
0923c 164             | local59
0923c 164             | 	res	1
0923c 165             | local60
0923c 165             | 	res	1
0923c 166             | local61
0923c 166             | 	res	1
0923c 167             | local62
0923c 167             | 	res	1
0923c 168             | local63
0923c 168             | 	res	1
0923c 169             | local64
0923c 169             | 	res	1
0923c 16a             | local65
0923c 16a             | 	res	1
0923c 16b             | local66
0923c 16b             | 	res	1
0923c 16c             | local67
0923c 16c             | 	res	1
0923c 16d             | local68
0923c 16d             | 	res	1
0923c 16e             | local69
0923c 16e             | 	res	1
0923c 16f             | local70
0923c 16f             | 	res	1
0923c 170             | local71
0923c 170             | 	res	1
0923c 171             | local72
0923c 171             | 	res	1
0923c 172             | local73
0923c 172             | 	res	1
0923c 173             | local74
0923c 173             | 	res	1
0923c 174             | local75
0923c 174             | 	res	1
0923c 175             | local76
0923c 175             | 	res	1
0923c 176             | local77
0923c 176             | 	res	1
0923c 177             | local78
0923c 177             | 	res	1
0923c 178             | local79
0923c 178             | 	res	1
0923c 179             | local80
0923c 179             | 	res	1
0923c 17a             | local81
0923c 17a             | 	res	1
0923c 17b             | local82
0923c 17b             | 	res	1
0923c 17c             | local83
0923c 17c             | 	res	1
0923c 17d             | local84
0923c 17d             | 	res	1
0923c 17e             | local85
0923c 17e             | 	res	1
0923c 17f             | local86
0923c 17f             | 	res	1
0923c 180             | local87
0923c 180             | 	res	1
0923c 181             | local88
0923c 181             | 	res	1
0923c 182             | local89
0923c 182             | 	res	1
0923c 183             | local90
0923c 183             | 	res	1
0923c 184             | muldiva_
0923c 184             | 	res	1
0923c 185             | muldivb_
0923c 185             | 	res	1
0923c 186             | 	fit	480
0923c 186             | 
