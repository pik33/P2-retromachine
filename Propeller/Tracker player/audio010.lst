00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-retromachine/Propeller/Tracker player/audio010.p2asm"
00000                 | ' 
00000                 | '  _clkfreq = 319220550 ' This is 90x Amiga PAL   =3546895, change to NTSC freq if needed
00000                 | con
00000                 | 	_clkfreq = 319220550
00000                 | ' '_clkfreq = 322159050 ' This is 90x Amiga NTSC = 3579545
00000                 | ' 
00000                 | ' ' audio pins TODO: make a variable for start() instead of const
00000                 | ' 
00000                 | ' left= 14
00000                 | 	left = 14
00000                 | ' right=15
00000                 | 	right = 15
00000                 | ' 
00000                 | ' ' 4th octave frequencies, rounded to integer
00000                 | ' 
00000                 | ' c4=262
00000                 | 	c4 = 262
00000                 | ' d4=294
00000                 | 	d4 = 294
00000                 | ' e4=330
00000                 | 	e4 = 330
00000                 | ' f4=349
00000                 | 	f4 = 349
00000                 | ' g4=392
00000                 | 	g4 = 392
00000                 | ' a4=440
00000                 | 	a4 = 440
00000                 | ' h4=494
00000                 | 	h4 = 494
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 5E 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 AD F0 03 F6 | 	mov	ptra, objptr
00410 003 20 F1 07 F1 | 	add	ptra, #288
00414 004 14 EC 0F FB | 	rdlong	pa, #20 wz
00418 005 E8 01 90 5D |  if_ne	jmp	#skip_clock_set_
0041c 006 00 00 64 FD | 	hubset	#0
00420 007 96 E5 80 FF 
00424 008 00 F0 67 FD | 	hubset	##30092792
00428 009 86 01 80 FF 
0042c 00a 1F 80 66 FD | 	waitx	##200000
00430 00b 96 E5 00 FF 
00434 00c FB ED 07 F6 | 	mov	pa, ##30092795
00438 00d 00 EC 63 FD | 	hubset	pa
0043c 00e 18 EC 67 FC | 	wrlong	pa, #24
00440 00f 6C 83 89 FF 
00444 010 14 6C 6D FC | 	wrlong	##319215798, #20
00448 011 B8 01 90 FD | 	jmp	#skip_clock_set_
0044c 012 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 C4 06 A0 FD | 	call	#_start
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 60 61 FD | 	cogid	arg01
00614 084 03 60 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 5B 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 5F 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 61 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 63 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 65 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 67 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 5E 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 64 55 F0 |         shr	arg03, #1 wc
00688 0a1 B0 62 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 60 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 62 FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 64 55 F0 |         shr	arg03, #1 wc
00698 0a5 B0 62 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 60 05 C1 |  if_c   add	arg01, #2
006a0 0a7 B1 62 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 B0 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 64 0D F2 |         cmp	arg03, #0 wz
006ac 0aa B2 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 62 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | 
006b8 0ad             | objptr
006b8 0ad 3C 10 00 00 | 	long	@objmem
006bc 0ae             | ptr__dat__
006bc 0ae 58 09 00 00 | 	long	@_dat_
006c0 0af             | result1
006c0 0af 00 00 00 00 | 	long	0
006c4 0b0             | COG_BSS_START
006c4 0b0             | 	fit	480
006c4                 | 	orgh
006c4                 | hubentry
006c4                 | 
006c4                 | ' 
006c4                 | ' 
006c4                 | ' 
006c4                 | ' '--------------------------------------------------------------
006c4                 | ' '---------- Init the variables, start the cog. ----------------
006c4                 | ' '--------------------------------------------------------------
006c4                 | ' 
006c4                 | ' pub start() :cog
006c4                 | _start
006c4     03 00 00 FF 
006c8     DC 5C 05 F1 | 	add	ptr__dat__, ##1756
006cc                 | ' 
006cc                 | ' 
006cc                 | ' channel1[0]:=@null
006cc     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
006d0                 | ' channel1[1]:=0
006d0     04 5A 05 F1 | 	add	objptr, #4
006d4     AD 00 68 FC | 	wrlong	#0, objptr
006d8                 | ' channel1[2]:=0
006d8     04 5A 05 F1 | 	add	objptr, #4
006dc     AD 00 68 FC | 	wrlong	#0, objptr
006e0                 | ' channel1[3]:=2
006e0     04 5A 05 F1 | 	add	objptr, #4
006e4     AD 04 68 FC | 	wrlong	#2, objptr
006e8                 | ' channel1[4]:=0
006e8     04 5A 05 F1 | 	add	objptr, #4
006ec     AD 00 68 FC | 	wrlong	#0, objptr
006f0                 | ' channel1[5]:=8192
006f0     04 5A 05 F1 | 	add	objptr, #4
006f4     10 00 80 FF 
006f8     AD 00 68 FC | 	wrlong	##8192, objptr
006fc                 | ' channel1[6]:=101
006fc     04 5A 05 F1 | 	add	objptr, #4
00700     AD CA 68 FC | 	wrlong	#101, objptr
00704                 | ' channel1[7]:=2
00704     04 5A 05 F1 | 	add	objptr, #4
00708     AD 04 68 FC | 	wrlong	#2, objptr
0070c                 | ' 
0070c                 | ' channel2[0]:=@null
0070c     08 5A 05 F1 | 	add	objptr, #8
00710     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
00714                 | ' channel2[1]:=0
00714     04 5A 05 F1 | 	add	objptr, #4
00718     AD 00 68 FC | 	wrlong	#0, objptr
0071c                 | ' channel2[2]:=0
0071c     04 5A 05 F1 | 	add	objptr, #4
00720     AD 00 68 FC | 	wrlong	#0, objptr
00724                 | ' channel2[3]:=2
00724     04 5A 05 F1 | 	add	objptr, #4
00728     AD 04 68 FC | 	wrlong	#2, objptr
0072c                 | ' channel2[4]:=0
0072c     04 5A 05 F1 | 	add	objptr, #4
00730     AD 00 68 FC | 	wrlong	#0, objptr
00734                 | ' channel2[5]:=8192
00734     04 5A 05 F1 | 	add	objptr, #4
00738     10 00 80 FF 
0073c     AD 00 68 FC | 	wrlong	##8192, objptr
00740                 | ' channel2[6]:=103
00740     04 5A 05 F1 | 	add	objptr, #4
00744     AD CE 68 FC | 	wrlong	#103, objptr
00748                 | ' channel2[7]:=2
00748     04 5A 05 F1 | 	add	objptr, #4
0074c     AD 04 68 FC | 	wrlong	#2, objptr
00750                 | ' 
00750                 | ' channel3[0]:=@null
00750     08 5A 05 F1 | 	add	objptr, #8
00754     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
00758                 | ' channel3[1]:=0
00758     04 5A 05 F1 | 	add	objptr, #4
0075c     AD 00 68 FC | 	wrlong	#0, objptr
00760                 | ' channel3[2]:=0
00760     04 5A 05 F1 | 	add	objptr, #4
00764     AD 00 68 FC | 	wrlong	#0, objptr
00768                 | ' channel3[3]:=2
00768     04 5A 05 F1 | 	add	objptr, #4
0076c     AD 04 68 FC | 	wrlong	#2, objptr
00770                 | ' channel3[4]:=0
00770     04 5A 05 F1 | 	add	objptr, #4
00774     AD 00 68 FC | 	wrlong	#0, objptr
00778                 | ' channel3[5]:=8192
00778     04 5A 05 F1 | 	add	objptr, #4
0077c     10 00 80 FF 
00780     AD 00 68 FC | 	wrlong	##8192, objptr
00784                 | ' channel3[6]:=107
00784     04 5A 05 F1 | 	add	objptr, #4
00788     AD D6 68 FC | 	wrlong	#107, objptr
0078c                 | ' channel3[7]:=2
0078c     04 5A 05 F1 | 	add	objptr, #4
00790     AD 04 68 FC | 	wrlong	#2, objptr
00794                 | ' 
00794                 | ' channel4[0]:=@null
00794     08 5A 05 F1 | 	add	objptr, #8
00798     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
0079c                 | ' channel4[1]:=0
0079c     04 5A 05 F1 | 	add	objptr, #4
007a0     AD 00 68 FC | 	wrlong	#0, objptr
007a4                 | ' channel4[2]:=0
007a4     04 5A 05 F1 | 	add	objptr, #4
007a8     AD 00 68 FC | 	wrlong	#0, objptr
007ac                 | ' channel4[3]:=2
007ac     04 5A 05 F1 | 	add	objptr, #4
007b0     AD 04 68 FC | 	wrlong	#2, objptr
007b4                 | ' channel4[4]:=0
007b4     04 5A 05 F1 | 	add	objptr, #4
007b8     AD 00 68 FC | 	wrlong	#0, objptr
007bc                 | ' channel4[5]:=8192
007bc     04 5A 05 F1 | 	add	objptr, #4
007c0     10 00 80 FF 
007c4     AD 00 68 FC | 	wrlong	##8192, objptr
007c8                 | ' channel4[6]:=109
007c8     04 5A 05 F1 | 	add	objptr, #4
007cc     AD DA 68 FC | 	wrlong	#109, objptr
007d0                 | ' channel4[7]:=2
007d0     04 5A 05 F1 | 	add	objptr, #4
007d4     AD 04 68 FC | 	wrlong	#2, objptr
007d8                 | ' channel4[8]:=1
007d8     04 5A 05 F1 | 	add	objptr, #4
007dc     AD 02 68 FC | 	wrlong	#1, objptr
007e0                 | ' 
007e0                 | ' channel5[0]:=@null
007e0     04 5A 05 F1 | 	add	objptr, #4
007e4     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
007e8                 | ' channel5[1]:=0
007e8     04 5A 05 F1 | 	add	objptr, #4
007ec     AD 00 68 FC | 	wrlong	#0, objptr
007f0                 | ' channel5[2]:=0
007f0     04 5A 05 F1 | 	add	objptr, #4
007f4     AD 00 68 FC | 	wrlong	#0, objptr
007f8                 | ' channel5[3]:=2
007f8     04 5A 05 F1 | 	add	objptr, #4
007fc     AD 04 68 FC | 	wrlong	#2, objptr
00800                 | ' channel5[4]:=0
00800     04 5A 05 F1 | 	add	objptr, #4
00804     AD 00 68 FC | 	wrlong	#0, objptr
00808                 | ' channel5[5]:=8192
00808     04 5A 05 F1 | 	add	objptr, #4
0080c     10 00 80 FF 
00810     AD 00 68 FC | 	wrlong	##8192, objptr
00814                 | ' channel5[6]:=113
00814     04 5A 05 F1 | 	add	objptr, #4
00818     AD E2 68 FC | 	wrlong	#113, objptr
0081c                 | ' channel5[7]:=2
0081c     04 5A 05 F1 | 	add	objptr, #4
00820     AD 04 68 FC | 	wrlong	#2, objptr
00824                 | ' 
00824                 | ' channel6[0]:=@null
00824     08 5A 05 F1 | 	add	objptr, #8
00828     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
0082c                 | ' channel6[1]:=0
0082c     04 5A 05 F1 | 	add	objptr, #4
00830     AD 00 68 FC | 	wrlong	#0, objptr
00834                 | ' channel6[2]:=0
00834     04 5A 05 F1 | 	add	objptr, #4
00838     AD 00 68 FC | 	wrlong	#0, objptr
0083c                 | ' channel6[3]:=2
0083c     04 5A 05 F1 | 	add	objptr, #4
00840     AD 04 68 FC | 	wrlong	#2, objptr
00844                 | ' channel6[4]:=0
00844     04 5A 05 F1 | 	add	objptr, #4
00848     AD 00 68 FC | 	wrlong	#0, objptr
0084c                 | ' channel6[5]:=8192
0084c     04 5A 05 F1 | 	add	objptr, #4
00850     10 00 80 FF 
00854     AD 00 68 FC | 	wrlong	##8192, objptr
00858                 | ' channel6[6]:=127
00858     04 5A 05 F1 | 	add	objptr, #4
0085c     AD FE 68 FC | 	wrlong	#127, objptr
00860                 | ' channel6[7]:=2
00860     04 5A 05 F1 | 	add	objptr, #4
00864     AD 04 68 FC | 	wrlong	#2, objptr
00868                 | ' 
00868                 | ' channel7[0]:=@null
00868     08 5A 05 F1 | 	add	objptr, #8
0086c     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
00870                 | ' channel7[1]:=0
00870     04 5A 05 F1 | 	add	objptr, #4
00874     AD 00 68 FC | 	wrlong	#0, objptr
00878                 | ' channel7[2]:=0
00878     04 5A 05 F1 | 	add	objptr, #4
0087c     AD 00 68 FC | 	wrlong	#0, objptr
00880                 | ' channel7[3]:=2
00880     04 5A 05 F1 | 	add	objptr, #4
00884     AD 04 68 FC | 	wrlong	#2, objptr
00888                 | ' channel7[4]:=0
00888     04 5A 05 F1 | 	add	objptr, #4
0088c     AD 00 68 FC | 	wrlong	#0, objptr
00890                 | ' channel7[5]:=8192
00890     04 5A 05 F1 | 	add	objptr, #4
00894     10 00 80 FF 
00898     AD 00 68 FC | 	wrlong	##8192, objptr
0089c                 | ' channel7[6]:=131
0089c     04 5A 05 F1 | 	add	objptr, #4
008a0     AD 06 69 FC | 	wrlong	#131, objptr
008a4                 | ' channel7[7]:=2
008a4     04 5A 05 F1 | 	add	objptr, #4
008a8     AD 04 68 FC | 	wrlong	#2, objptr
008ac                 | ' 
008ac                 | ' channel8[0]:=@null
008ac     08 5A 05 F1 | 	add	objptr, #8
008b0     AD 5C 61 FC | 	wrlong	ptr__dat__, objptr
008b4                 | ' channel8[1]:=0
008b4     04 5A 05 F1 | 	add	objptr, #4
008b8     AD 00 68 FC | 	wrlong	#0, objptr
008bc                 | ' channel8[2]:=0
008bc     04 5A 05 F1 | 	add	objptr, #4
008c0     AD 00 68 FC | 	wrlong	#0, objptr
008c4                 | ' channel8[3]:=2
008c4     04 5A 05 F1 | 	add	objptr, #4
008c8     AD 04 68 FC | 	wrlong	#2, objptr
008cc                 | ' channel8[4]:=0
008cc     04 5A 05 F1 | 	add	objptr, #4
008d0     AD 00 68 FC | 	wrlong	#0, objptr
008d4                 | ' channel8[5]:=8192
008d4     04 5A 05 F1 | 	add	objptr, #4
008d8     10 00 80 FF 
008dc     AD 00 68 FC | 	wrlong	##8192, objptr
008e0                 | ' channel8[6]:=137
008e0     04 5A 05 F1 | 	add	objptr, #4
008e4     AD 12 69 FC | 	wrlong	#137, objptr
008e8                 | ' channel8[7]:=2
008e8     04 5A 05 F1 | 	add	objptr, #4
008ec     AD 04 68 FC | 	wrlong	#2, objptr
008f0                 | ' 
008f0                 | ' channel1[8]:=1
008f0     F8 5A 85 F1 | 	sub	objptr, #248
008f4     AD 02 68 FC | 	wrlong	#1, objptr
008f8                 | ' channel2[8]:=1
008f8     24 5A 05 F1 | 	add	objptr, #36
008fc     AD 02 68 FC | 	wrlong	#1, objptr
00900                 | ' channel3[8]:=1
00900     24 5A 05 F1 | 	add	objptr, #36
00904     AD 02 68 FC | 	wrlong	#1, objptr
00908                 | ' channel4[8]:=1
00908     24 5A 05 F1 | 	add	objptr, #36
0090c     AD 02 68 FC | 	wrlong	#1, objptr
00910                 | ' channel5[8]:=1
00910     24 5A 05 F1 | 	add	objptr, #36
00914     AD 02 68 FC | 	wrlong	#1, objptr
00918                 | ' channel6[8]:=1
00918     24 5A 05 F1 | 	add	objptr, #36
0091c     AD 02 68 FC | 	wrlong	#1, objptr
00920                 | ' channel7[8]:=1
00920     24 5A 05 F1 | 	add	objptr, #36
00924     AD 02 68 FC | 	wrlong	#1, objptr
00928                 | ' channel8[8]:=1
00928     24 5A 05 F1 | 	add	objptr, #36
0092c     AD 02 68 FC | 	wrlong	#1, objptr
00930     1C 5B 85 F1 | 	sub	objptr, #284
00934                 | ' 
00934                 | ' cog:=coginit(16,@audio,@channel1)
00934     03 00 00 FF 
00938     DC 5C 85 F1 | 	sub	ptr__dat__, ##1756
0093c     10 60 05 F6 | 	mov	arg01, #16
00940     28 5A 61 FD | 	setq	objptr
00944     AE 60 F1 FC | 	coginit	arg01, ptr__dat__ wc
00948     01 60 65 C6 |  if_b	neg	arg01, #1
0094c     B0 5E 01 F6 | 	mov	result1, arg01
00950                 | ' return cog
00950                 | _start_ret
00950     2D 00 64 FD | 	ret
00954                 | hubexit
00954     81 00 80 FD | 	jmp	#cogexit
00958                 | 	alignl
00958                 | _dat_
00958                 | 
00958                 | audio       org     0
00958                 | 
00958     0E 6C 07 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
0095c     0E B4 1C FC |             wxpin   #90,#left
00960                 | 
00960     0F 6C 07 FC |             wrpin   dac,#right
00964     0F B4 1C FC |             wxpin   #90,#right
00968                 | 
00968     41 9C 64 FD |             dirh    #left addpins 1
0096c                 | 
0096c     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
00970     2B E9 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
00974     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
00978                 |             
00978                 | '---------------------------------------------------------------------------------        
00978                 | '----------------- The main loop -------------------------------------------------
00978                 | '---------------------------------------------------------------------------------
00978                 | 
00978     28 10 64 FD | loop        setq    #8              ' Read channel regs from the hub
0097c     61 9F 06 FB |             rdlong  sstart1,ptra++
00980     28 10 64 FD |             setq    #8              ' Cannot do one big setq+rdlong as it interferes with interrupts
00984     61 B1 06 FB |             rdlong  sstart2,ptra++
00988     28 10 64 FD |             setq    #8
0098c     61 C3 06 FB |             rdlong  sstart3,ptra++
00990     28 10 64 FD |             setq    #8
00994     61 D5 06 FB |             rdlong  sstart4,ptra++
00998     28 10 64 FD |             setq    #8
0099c     61 E7 06 FB |             rdlong  sstart5,ptra++
009a0     28 10 64 FD |             setq    #8
009a4     61 F9 06 FB |             rdlong  sstart6,ptra++
009a8     28 10 64 FD |             setq    #8
009ac     61 0B 07 FB |             rdlong  sstart7,ptra++
009b0     28 10 64 FD |             setq    #8
009b4     61 1D 07 FB |             rdlong  sstart8,ptra++
009b8                 | 
009b8     20 F1 87 F1 |             sub     ptra,#9*4*8    
009bc                 |             
009bc     3B 31 13 F2 |             cmp     time1,a1FFFFFFF wc   ' Main counter overflow workaround
009c0     3B 33 13 32 |      if_nc  cmp     time2,a1FFFFFFF wc   ' before the time is written to the buffer, it is ANDed with $1FFFFFFF  
009c4     3B 35 13 32 |      if_nc  cmp     time3,a1FFFFFFF wc   ' Also, the interrupt procedure ands the counter  
009c8     3B 37 13 32 |      if_nc  cmp     time4,a1FFFFFFF wc   ' So, if the counter is >=$20000000, the compare sequence still works  
009cc     3B 39 13 32 |      if_nc  cmp     time5,a1FFFFFFF wc   ' and when all counters are >=$20000000, all of them are SUBed at the same time 
009d0     3B 3B 13 32 |      if_nc  cmp     time6,a1FFFFFFF wc   ' including time0 main counter  
009d4     3B 3D 13 32 |      if_nc  cmp     time7,a1FFFFFFF wc     
009d8     3B 3F 13 32 |      if_nc  cmp     time8,a1FFFFFFF wc   ' was 7FFFFFFF - reduced to make debugging easier 
009dc     3C 31 83 31 |      if_nc  sub     time1,a20000000
009e0     3C 33 83 31 |      if_nc  sub     time2,a20000000
009e4     3C 35 83 31 |      if_nc  sub     time3,a20000000
009e8     3C 37 83 31 |      if_nc  sub     time4,a20000000
009ec     3C 39 83 31 |      if_nc  sub     time5,a20000000
009f0     3C 3B 83 31 |      if_nc  sub     time6,a20000000
009f4     3C 3D 83 31 |      if_nc  sub     time7,a20000000
009f8     3C 3F 83 31 |      if_nc  sub     time8,a20000000
009fc     3C 2F 83 31 |      if_nc  sub     time0,a20000000
00a00                 | 
00a00                 |        
00a00                 |     
00a00     00 AE 0E F2 |             cmp     acmd1,#0 wz     ' if cmd=0, zero the phase accumulator
00a04     00 7A 06 A6 |     if_e    mov     p1,#0
00a08     00 C0 0E F2 |             cmp     acmd2,#0 wz
00a0c     00 7C 06 A6 |     if_e    mov     p2,#0
00a10     00 D2 0E F2 |             cmp     acmd3,#0 wz
00a14     00 7E 06 A6 |     if_e    mov     p3,#0
00a18     00 E4 0E F2 |             cmp     acmd4,#0 wz
00a1c     00 80 06 A6 |     if_e    mov     p4,#0
00a20     00 F6 0E F2 |             cmp     acmd5,#0 wz
00a24     00 82 06 A6 |     if_e    mov     p5,#0
00a28     00 08 0F F2 |             cmp     acmd6,#0 wz
00a2c     00 84 06 A6 |     if_e    mov     p6,#0
00a30     00 1A 0F F2 |             cmp     acmd7,#0 wz
00a34     00 86 06 A6 |     if_e    mov     p7,#0
00a38     00 2C 0F F2 |             cmp     acmd8,#0 wz
00a3c     00 88 06 A6 |     if_e    mov     p8,#0
00a40                 |           
00a40     48 8B 02 F6 |             mov     qq,tail         ' Check if the buffer is full	
00a44     02 8A 86 F1 |             sub     qq,#2
00a48     FF 8B 06 F5 |             and     qq,#511
00a4c     47 8B 1A F2 |             cmp     qq,front wcz
00a50     24 FF 9F AD |     if_e    jmp     #loop           ' If the buffer is full, do nothing               
00a54                 |       
00a54     50 42 07 F6 |             mov     cn,#p201           ' Find the channel to compute
00a58     98 45 03 F6 |             mov     ct,time1        ' with the lowest next sample time
00a5c     99 45 3B F3 |             fle     ct,time2 wcz   
00a60     67 42 07 C6 |     if_c    mov     cn,#p202 
00a64     9A 45 3B F3 |             fle     ct,time3 wcz
00a68     7E 42 07 C6 |     if_c    mov     cn,#p203     
00a6c     9B 45 3B F3 |             fle     ct,time4 wcz
00a70     95 42 07 C6 |     if_c    mov     cn,#p204
00a74     9C 45 3B F3 |             fle     ct,time5 wcz
00a78     AC 42 07 C6 |     if_c    mov     cn,#p205 
00a7c     9D 45 3B F3 |             fle     ct,time6 wcz
00a80     C3 42 07 C6 |     if_c    mov     cn,#p206
00a84     9E 45 3B F3 |             fle     ct,time7 wcz
00a88     DA 42 07 C6 |     if_c    mov     cn,#p207
00a8c     9F 45 3B F3 |             fle     ct,time8 wcz
00a90     F1 42 07 C6 |     if_c    mov     cn,#p208 
00a94                 |  
00a94     2C 42 63 FD |             jmp     cn
00a98                 |    
00a98                 | '----------------------------------------------------------------------------------
00a98                 | '------------- Compute channel samples --------------------------------------------
00a98                 | '----------------------------------------------------------------------------------
00a98                 | 	
00a98                 | ' ------------  Channel 1
00a98                 |  
00a98     98 47 03 F6 | p201        mov     dt0,time1      ' compute the delta to add to the global time
00a9c     97 47 83 F1 |             sub     dt0,time0
00aa0     55 31 03 F1 |             add     time1,freq1    ' compute the next channel time	
00aa4                 | 	        
00aa4     56 7B 02 F1 |             add     p1,askip1      ' update the phase accumulator
00aa8     52 7B 1A F2 |             cmp     p1,lend1 wcz   ' substract the loop length if over the loop end
00aac     52 7B 82 31 |     if_ge   sub     p1,lend1	        
00ab0     51 7B 02 31 |     if_ge   add     p1,lstart1       
00ab4     3D 8B 02 F6 |             mov     qq,p1          ' compute the pointer to the next sample
00ab8     4F 8B 02 F1 |             add     qq,sstart1
00abc                 |             
00abc     00 A0 0E F2 |             cmp     type1,#0 wz    ' check the sample type
00ac0     45 8D C2 5A |     if_nz   rdbyte  spl,qq         ' not zero=8 bit
00ac4     08 8C 66 50 |     if_nz   shl     spl,#8
00ac8     45 8D E2 AA |     if_z    rdword  spl,qq         ' zero=16 bit. TODO: more types? signed/unsigned, etc... 
00acc                 | 
00acc     53 8D 32 FA |             scas    spl,vol1       ' apply the volume
00ad0     00 8C 02 F6 |             mov     spl,0-0
00ad4                 | 
00ad4     54 8D 32 FA |             scas    spl,apan1      ' apply the pan
00ad8     00 4C 03 F6 |             mov     ls1,0-0
00adc     20 00 00 FF 
00ae0     00 8A 06 F6 |             mov     qq,##16384
00ae4     54 8B 82 F1 |             sub     qq,apan1
00ae8     45 8D 32 FA |             scas    spl,qq
00aec     00 4E 03 F6 |             mov     rs1,0-0
00af0                 |             
00af0     84 02 90 FD |             jmp     #p101              
00af4                 | 	    	
00af4                 | ' ------------  Channel 2
00af4                 |  
00af4     99 47 03 F6 | p202        mov     dt0,time2
00af8     97 47 83 F1 |             sub     dt0,time0
00afc     5E 33 03 F1 |             add     time2,freq2  	
00b00                 | 	        
00b00     5F 7D 02 F1 |             add     p2,askip2
00b04     5B 7D 1A F2 |             cmp     p2,lend2 wcz
00b08     5B 7D 82 31 |     if_ge   sub     p2,lend2	        
00b0c     5A 7D 02 31 |     if_ge   add     p2,lstart2       
00b10     3E 8B 02 F6 |             mov     qq,p2
00b14     58 8B 02 F1 |             add     qq,sstart2
00b18                 | 
00b18     00 B2 0E F2 |             cmp     type2,#0 wz
00b1c     45 8D C2 5A |     if_nz   rdbyte  spl,qq
00b20     08 8C 66 50 |     if_nz   shl     spl,#8
00b24     45 8D E2 AA |     if_z    rdword  spl,qq
00b28                 | 
00b28     5C 8D 32 FA |             scas    spl,vol2
00b2c     00 8C 02 F6 |             mov     spl,0-0
00b30                 |             
00b30     5D 8D 32 FA |             scas    spl,apan2
00b34     00 50 03 F6 |             mov     ls2,0-0
00b38     20 00 00 FF 
00b3c     00 8A 06 F6 |             mov     qq,##16384
00b40     5D 8B 82 F1 |             sub     qq,apan2
00b44     45 8D 32 FA |             scas    spl,qq
00b48     00 52 03 F6 |             mov     rs2,0-0
00b4c                 |             
00b4c     28 02 90 FD |             jmp     #p101
00b50                 | 
00b50                 | ' ------------  Channel 3
00b50                 |  
00b50     9A 47 03 F6 | p203        mov     dt0,time3
00b54     97 47 83 F1 |             sub     dt0,time0
00b58     67 35 03 F1 |             add     time3,freq3  	
00b5c                 | 	        
00b5c     68 7F 02 F1 |             add     p3,askip3
00b60     64 7F 1A F2 |             cmp     p3,lend3 wcz
00b64     64 7F 82 31 |     if_ge   sub     p3,lend3	        
00b68     63 7F 02 31 |     if_ge   add     p3,lstart3       
00b6c     3F 8B 02 F6 |             mov     qq,p3
00b70     61 8B 02 F1 |             add     qq,sstart3
00b74                 |             
00b74     00 C4 0E F2 |             cmp     type3,#0 wz
00b78     45 8D C2 5A |     if_nz   rdbyte  spl,qq
00b7c     08 8C 66 50 |     if_nz   shl     spl,#8
00b80     45 8D E2 AA |     if_z    rdword  spl,qq
00b84                 | 
00b84     65 8D 32 FA |             scas    spl,vol3
00b88     00 8C 02 F6 |             mov     spl,0-0
00b8c                 |     	
00b8c     66 8D 32 FA |             scas    spl,apan3
00b90     00 54 03 F6 |             mov     ls3,0-0
00b94                 |             
00b94     20 00 00 FF 
00b98     00 8A 06 F6 |             mov     qq,##16384
00b9c     66 8B 82 F1 |             sub     qq,apan3
00ba0     45 8D 32 FA |             scas    spl,qq
00ba4     00 56 03 F6 |             mov     rs3,0-0
00ba8                 | 
00ba8     CC 01 90 FD |             jmp     #p101
00bac                 |             
00bac                 | ' ------------  Channel 4
00bac                 |  
00bac     9B 47 03 F6 | p204        mov     dt0,time4
00bb0     97 47 83 F1 |             sub     dt0,time0
00bb4     70 37 03 F1 |             add     time4,freq4  	
00bb8                 | 
00bb8                 | 	        
00bb8     71 81 02 F1 |             add     p4,askip4
00bbc     6D 81 1A F2 |             cmp     p4,lend4 wcz
00bc0     6D 81 82 31 |     if_ge   sub     p4,lend4	        
00bc4     6C 81 02 31 |     if_ge   add     p4,lstart4       
00bc8     40 8B 02 F6 |             mov     qq,p4
00bcc     6A 8B 02 F1 |             add     qq,sstart4
00bd0                 |             
00bd0     00 D6 0E F2 |             cmp     type4,#0 wz
00bd4     45 8D C2 5A |     if_nz   rdbyte  spl,qq
00bd8     08 8C 66 50 |     if_nz   shl     spl,#8
00bdc     45 8D E2 AA |     if_z    rdword  spl,qq
00be0                 | 
00be0     6E 8D 32 FA |             scas    spl,vol4
00be4     00 8C 02 F6 |             mov     spl,0-0
00be8                 |     	
00be8     6F 8D 32 FA |             scas    spl,apan4
00bec     00 5A 03 F6 |             mov     ls4,0-0
00bf0                 |             
00bf0     20 00 00 FF 
00bf4     00 8A 06 F6 |             mov     qq,##16384
00bf8     6F 8B 82 F1 |             sub     qq,apan4
00bfc     45 8D 32 FA |             scas    spl,qq
00c00     00 58 03 F6 |             mov     rs4,0-0
00c04                 | 
00c04     70 01 90 FD |             jmp     #p101
00c08                 |             
00c08                 | ' ------------  Channel 5
00c08                 |  
00c08     9C 47 03 F6 | p205        mov     dt0,time5
00c0c     97 47 83 F1 |             sub     dt0,time0
00c10     79 39 03 F1 |             add     time5,freq5  	
00c14                 | 
00c14                 | 	        
00c14     7A 83 02 F1 |             add     p5,askip5
00c18     76 83 1A F2 |             cmp     p5,lend5 wcz
00c1c     76 83 82 31 |     if_ge   sub     p5,lend5	        
00c20     75 83 02 31 |     if_ge   add     p5,lstart5       
00c24     41 8B 02 F6 |             mov     qq,p5
00c28     73 8B 02 F1 |             add     qq,sstart5
00c2c                 |             
00c2c     00 E8 0E F2 |             cmp     type5,#0 wz
00c30     45 8D C2 5A |     if_nz   rdbyte  spl,qq
00c34     08 8C 66 50 |     if_nz   shl     spl,#8
00c38     45 8D E2 AA |     if_z    rdword  spl,qq
00c3c                 | 
00c3c     77 8D 32 FA |             scas    spl,vol5
00c40     00 8C 02 F6 |             mov     spl,0-0
00c44                 |     	
00c44     78 8D 32 FA |             scas    spl,apan5
00c48     00 5E 03 F6 |             mov     ls5,0-0
00c4c                 |             
00c4c     20 00 00 FF 
00c50     00 8A 06 F6 |             mov     qq,##16384
00c54     78 8B 82 F1 |             sub     qq,apan5
00c58     45 8D 32 FA |             scas    spl,qq
00c5c     00 5C 03 F6 |             mov     rs5,0-0
00c60                 | 
00c60     14 01 90 FD |             jmp     #p101
00c64                 |   
00c64                 | ' ------------  Channel 6
00c64                 |  
00c64     9D 47 03 F6 | p206        mov     dt0,time6
00c68     97 47 83 F1 |             sub     dt0,time0
00c6c     82 3B 03 F1 |             add     time6,freq6  	
00c70                 | 
00c70                 | 	        
00c70     83 85 02 F1 |             add     p6,askip6
00c74     7F 85 1A F2 |             cmp     p6,lend6 wcz
00c78     7F 85 82 31 |     if_ge   sub     p6,lend6	        
00c7c     7E 85 02 31 |     if_ge   add     p6,lstart6       
00c80     42 8B 02 F6 |             mov     qq,p6
00c84     7C 8B 02 F1 |             add     qq,sstart6
00c88                 |             
00c88     00 FA 0E F2 |             cmp     type6,#0 wz
00c8c     45 8D C2 5A |     if_nz   rdbyte  spl,qq
00c90     08 8C 66 50 |     if_nz   shl     spl,#8
00c94     45 8D E2 AA |     if_z    rdword  spl,qq
00c98                 | 
00c98     80 8D 32 FA |             scas    spl,vol6
00c9c     00 8C 02 F6 |             mov     spl,0-0
00ca0                 |     	
00ca0     81 8D 32 FA |             scas    spl,apan6
00ca4     00 62 03 F6 |             mov     ls6,0-0
00ca8                 |             
00ca8     20 00 00 FF 
00cac     00 8A 06 F6 |             mov     qq,##16384
00cb0     81 8B 82 F1 |             sub     qq,apan6
00cb4     45 8D 32 FA |             scas    spl,qq
00cb8     00 60 03 F6 |             mov     rs6,0-0
00cbc                 | 
00cbc     B8 00 90 FD |             jmp     #p101
00cc0                 |             
00cc0                 | ' ------------  Channel 7
00cc0                 |  
00cc0     9E 47 03 F6 | p207        mov     dt0,time7
00cc4     97 47 83 F1 |             sub     dt0,time0
00cc8     8B 3D 03 F1 |             add     time7,freq7  	
00ccc                 | 
00ccc                 | 	        
00ccc     8C 87 02 F1 |             add     p7,askip7
00cd0     88 87 1A F2 |             cmp     p7,lend7 wcz
00cd4     88 87 82 31 |     if_ge   sub     p7,lend7	        
00cd8     87 87 02 31 |     if_ge   add     p7,lstart7       
00cdc     43 8B 02 F6 |             mov     qq,p7
00ce0     85 8B 02 F1 |             add     qq,sstart7
00ce4                 |             
00ce4     00 0C 0F F2 |             cmp     type7,#0 wz
00ce8     45 8D C2 5A |     if_nz   rdbyte  spl,qq
00cec     08 8C 66 50 |     if_nz   shl     spl,#8
00cf0     45 8D E2 AA |     if_z    rdword  spl,qq
00cf4                 | 
00cf4     89 8D 32 FA |             scas    spl,vol7
00cf8     00 8C 02 F6 |             mov     spl,0-0
00cfc                 |     	
00cfc     8A 8D 32 FA |             scas    spl,apan7
00d00     00 66 03 F6 |             mov     ls7,0-0
00d04                 |             
00d04     20 00 00 FF 
00d08     00 8A 06 F6 |             mov     qq,##16384
00d0c     8A 8B 82 F1 |             sub     qq,apan7
00d10     45 8D 32 FA |             scas    spl,qq
00d14     00 64 03 F6 |             mov     rs7,0-0
00d18                 | 
00d18     5C 00 90 FD |             jmp     #p101     
00d1c                 |                    
00d1c                 | ' ------------  Channel 8
00d1c                 |  
00d1c     9F 47 03 F6 | p208        mov     dt0,time8
00d20     97 47 83 F1 |             sub     dt0,time0
00d24     94 3F 03 F1 |             add     time8,freq8  	
00d28                 | 
00d28                 | 	        
00d28     95 89 02 F1 |             add     p8,askip8
00d2c     91 89 1A F2 |             cmp     p8,lend8 wcz
00d30     91 89 82 31 |     if_ge   sub     p8,lend8	        
00d34     90 89 02 31 |     if_ge   add     p8,lstart8       
00d38     44 8B 02 F6 |             mov     qq,p8
00d3c     8E 8B 02 F1 |             add     qq,sstart8
00d40                 |             
00d40     00 1E 0F F2 |             cmp     type8,#0 wz
00d44     45 8D C2 5A |     if_nz   rdbyte  spl,qq
00d48     08 8C 66 50 |     if_nz   shl     spl,#8
00d4c     45 8D E2 AA |     if_z    rdword  spl,qq
00d50                 | 
00d50     92 8D 32 FA |             scas    spl,vol8
00d54     00 8C 02 F6 |             mov     spl,0-0
00d58                 |     	
00d58     93 8D 32 FA |             scas    spl,apan8
00d5c     00 6A 03 F6 |             mov     ls8,0-0
00d60                 |             
00d60     20 00 00 FF 
00d64     00 8A 06 F6 |             mov     qq,##16384
00d68     93 8B 82 F1 |             sub     qq,apan8
00d6c     45 8D 32 FA |             scas    spl,qq
00d70     00 68 03 F6 |             mov     rs8,0-0
00d74                 | 
00d74     00 00 90 FD |             jmp     #p101            
00d78                 |             
00d78                 | '------------------------ Channels end here --------------------       
00d78                 | 
00d78                 | ' Now add all channels and put the sample to the buffer    
00d78                 | 
00d78                 | 
00d78     97 41 0B F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
00d7c     02 8E 86 A1 |     if_z    sub     front,#2         ' 
00d80     FF 8F 06 A5 |     if_z    and     front,#511     
00d84                 |   
00d84     00 4A 07 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
00d88     00 48 07 F6 |             mov     ls,#0
00d8c     A7 4B 03 F1 |             add     rs,rs1
00d90     A9 4B 03 F1 |             add     rs,rs2
00d94     AB 4B 03 F1 |             add     rs,rs3
00d98     AC 4B 03 F1 |             add     rs,rs4
00d9c     AE 4B 03 F1 |             add     rs,rs5
00da0     B0 4B 03 F1 |             add     rs,rs6
00da4     B2 4B 03 F1 |             add     rs,rs7
00da8     B4 4B 03 F1 |             add     rs,rs8
00dac                 |             
00dac     A6 49 03 F1 |             add     ls,ls1
00db0     A8 49 03 F1 |             add     ls,ls2
00db4     AA 49 03 F1 |             add     ls,ls3
00db8     AD 49 03 F1 |             add     ls,ls4
00dbc     AF 49 03 F1 |             add     ls,ls5
00dc0     B1 49 03 F1 |             add     ls,ls6
00dc4     B3 49 03 F1 |             add     ls,ls7
00dc8     B5 49 03 F1 |             add     ls,ls8
00dcc                 |  		
00dcc     0F 48 E7 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
00dd0     0F 4A E7 F4 |             bitnot  rs,#15		
00dd4                 | 		
00dd4     A4 4B 2B F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
00dd8     47 4B 33 FC |             wrlut   rs,front         ' and write it to LUT
00ddc     01 8E 06 F1 |             add     front,#1         ' Write the sample time
00de0     97 8B 02 F6 |             mov     qq,time0
00de4     3B 8B 02 F5 |             and     qq,a1fffffff
00de8     47 8B 32 FC |             wrlut   qq,front
00dec     80 8A 66 FC |             wrlong  qq,#$80
00df0                 | 
00df0     01 8E 06 F1 |             add     front,#1         ' move the front pointer
00df4     FF 8F 06 F5 |             and     front,#511       ' and loop at #512
00df8     97 41 03 F6 |             mov     oldt0,time0      ' update global time
00dfc     A3 2F 03 F1 |             add     time0,dt0        
00e00     74 FB 9F FD |             jmp     #loop            'loop
00e04                 | 
00e04                 | '-------------------------------------------------------------------------
00e04                 | '------------------ This is the end of the main loop ---------------------
00e04                 | '-------------------------------------------------------------------------
00e04                 | 
00e04                 | '--------------------------------------------------------------------------
00e04                 | '------ Interrupt service -------------------------------------------------
00e04                 | '------ Output the sample, get the next one if exists ---------------------
00e04                 | '--------------------------------------------------------------------------
00e04                 | 
00e04     0E 94 26 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 90 cycles     
00e08     0F 96 26 FC |             wypin   rsample,#right       '4
00e0c                 | 										
00e0c     01 92 06 F1 |             add     counter,#1           '6     Increment the counter
00e10     3B 93 02 F5 |             and     counter,a1fffffff
00e14     4E 93 1A F2 |             cmp     counter,irqtime wcz  '8     Check if it is time for the next sample
00e18     F5 FF 3B 5B |     if_ne   reti1                        '10/12 If not, do nothing
00e1c                 | 		
00e1c     4C 97 3A F9 |           	getword rsample,lsnext,#1    '12
00e20     4C 95 32 F9 |           	getword lsample,lsnext,#0    '14
00e24     47 91 1A F2 |             cmp     tail,front wcz       '16    If the buffer is empty, do nothing 
00e28     F5 FF 3B AB |             if_e    reti1                '18/20
00e2c                 | 
00e2c     48 99 A2 FA |             rdlut   lsnext,tail          '21    else read the sample and its time from LUT
00e30     01 90 06 F1 |             add     tail, #1             '23
00e34     48 9D A2 FA |             rdlut   irqtime,tail         '26    Read the time for this sample
00e38     01 90 06 F1 |             add     tail,#1              '28    Go to the next entry
00e3c     FF 91 06 F5 |             and     tail,#511            '30
00e40     F5 FF 3B FB |             reti1                        '34 
00e44                 |             
00e44                 |          '' 3 nops left    
00e44                 |           
00e44                 | '---------------------------------------------------------------------------
00e44                 | '-------- End of interrupt -------------------------------------------------
00e44                 | '---------------------------------------------------------------------------    
00e44                 | 
00e44                 | '---------------------------------------------------------------------------
00e44                 | '------- Variables ---------------------------------------------------------
00e44                 | '---------------------------------------------------------------------------
00e44                 | 
00e44                 | ' constants
00e44                 | 
00e44     FF FF FF 1F | a1fffffff long $1fffffff
00e48     00 00 00 20 | a20000000 long $20000000
00e4c                 | 
00e4c                 | ' phase accumulators
00e4c                 | 
00e4c     00 00 00 00 | p1          long 0
00e50     00 00 00 00 | p2          long 0
00e54     00 00 00 00 | p3          long 0
00e58     00 00 00 00 | p4          long 0
00e5c     00 00 00 00 | p5          long 0
00e60     00 00 00 00 | p6          long 0
00e64     00 00 00 00 | p7          long 0
00e68     00 00 00 00 | p8          long 0
00e6c                 | 
00e6c                 | ' temporary variables 
00e6c                 | 
00e6c     00 00 00 00 | qq          long 0
00e70     00 00 00 00 | spl         long 0
00e74                 | 
00e74                 | ' circular buffer in LUT
00e74                 | 
00e74     00 00 00 00 | front       long 0
00e78     00 00 00 00 | tail        long 0
00e7c                 | 
00e7c                 | ' Interrupt ISR variables
00e7c                 | 
00e7c     00 F8 FF FF | counter     long $FFFFF800 ' this counter will overflow after 1210 seconds
00e80     00 00 00 00 | lsample     long 0
00e84     00 00 00 00 | rsample     long 0
00e88     00 00 00 00 | lsnext      long 0
00e8c     00 00 00 00 | rsnext      long 0 
00e90     00 00 00 00 | irqtime     long 0
00e94                 | 
00e94                 | ' Channel 1 registers. TODO - optimize the memory usage
00e94                 | 
00e94     00 00 00 00 | sstart1     long 0       ' Sample start pointer
00e98     00 00 00 00 | type1       long 0       ' type 0 16 bit, 1 8 bit
00e9c     00 00 00 00 | lstart1     long 0       ' Loop start
00ea0     02 00 00 00 | lend1       long 2       ' Loop end
00ea4     00 00 00 00 | vol1        long 0       ' volume, 0..16384
00ea8     00 00 00 00 | apan1       long 0       ' pan, 0..16384
00eac     65 00 00 00 | freq1       long 101     ' frequency divider
00eb0     02 00 00 00 | askip1      long 2       ' skip between samples, 1 for 8 bit, 2 for 16 bit (or more for special effects)
00eb4     00 00 00 00 | acmd1       long 0       ' command, 0 = reset the phase accumulator
00eb8                 | 
00eb8                 | ' Channel 2 registers
00eb8                 | 
00eb8     00 00 00 00 | sstart2     long 0
00ebc     00 00 00 00 | type2       long 0
00ec0     00 00 00 00 | lstart2     long 0
00ec4     02 00 00 00 | lend2       long 2        		
00ec8     00 00 00 00 | vol2        long 0
00ecc     00 00 00 00 | apan2       long 0
00ed0     67 00 00 00 | freq2       long 103
00ed4     02 00 00 00 | askip2      long 2
00ed8     00 00 00 00 | acmd2       long 0
00edc                 | 
00edc                 | ' Channel 3 registers
00edc                 | 
00edc     00 00 00 00 | sstart3     long 0
00ee0     00 00 00 00 | type3       long 0
00ee4     00 00 00 00 | lstart3     long 0
00ee8     02 00 00 00 | lend3       long 2       		'
00eec     00 00 00 00 | vol3        long 0
00ef0     00 00 00 00 | apan3       long 0
00ef4     6B 00 00 00 | freq3       long 107 '109 113 127 131 137 ...
00ef8     02 00 00 00 | askip3      long 2
00efc     00 00 00 00 | acmd3       long 0
00f00                 | 
00f00                 | ' Channel 4 registers
00f00                 | 
00f00     00 00 00 00 | sstart4     long 0
00f04     00 00 00 00 | type4       long 0
00f08     00 00 00 00 | lstart4     long 0
00f0c     02 00 00 00 | lend4       long 2       		'
00f10     00 00 00 00 | vol4        long 0
00f14     00 00 00 00 | apan4       long 0
00f18     6D 00 00 00 | freq4       long 109 '109 113 127 131 137 ...
00f1c     02 00 00 00 | askip4      long 2
00f20     00 00 00 00 | acmd4       long 0
00f24                 | 
00f24                 | ' Channel 5 registers
00f24                 | 
00f24     00 00 00 00 | sstart5     long 0
00f28     00 00 00 00 | type5       long 0
00f2c     00 00 00 00 | lstart5     long 0
00f30     02 00 00 00 | lend5       long 2       		'
00f34     00 00 00 00 | vol5        long 0
00f38     00 00 00 00 | apan5       long 0
00f3c     71 00 00 00 | freq5       long 113 '109 113 127 131 137 ...
00f40     02 00 00 00 | askip5      long 2
00f44     00 00 00 00 | acmd5       long 0
00f48                 | 
00f48                 | ' Channel 6 registers
00f48                 | 
00f48     00 00 00 00 | sstart6     long 0
00f4c     00 00 00 00 | type6       long 0
00f50     00 00 00 00 | lstart6     long 0
00f54     02 00 00 00 | lend6       long 2       		'
00f58     00 00 00 00 | vol6        long 0
00f5c     00 00 00 00 | apan6       long 0
00f60     7F 00 00 00 | freq6       long 127 '109 113 127 131 137 ...
00f64     02 00 00 00 | askip6      long 2
00f68     00 00 00 00 | acmd6       long 0
00f6c                 | 
00f6c                 | ' Channel 7 registers
00f6c                 | 
00f6c     00 00 00 00 | sstart7     long 0
00f70     00 00 00 00 | type7       long 0
00f74     00 00 00 00 | lstart7     long 0
00f78     02 00 00 00 | lend7       long 2       		'
00f7c     00 00 00 00 | vol7        long 0
00f80     00 00 00 00 | apan7       long 0
00f84     83 00 00 00 | freq7       long 131 '109 113 127 131 137 ...
00f88     02 00 00 00 | askip7      long 2
00f8c     00 00 00 00 | acmd7       long 0
00f90                 | 
00f90                 | ' Channel 8 registers
00f90                 | 
00f90     00 00 00 00 | sstart8     long 0
00f94     00 00 00 00 | type8       long 0
00f98     00 00 00 00 | lstart8     long 0
00f9c     02 00 00 00 | lend8       long 2       		'
00fa0     00 00 00 00 | vol8        long 0
00fa4     00 00 00 00 | apan8       long 0
00fa8     83 00 00 00 | freq8       long 131 '109 113 127 131 137 ...
00fac     02 00 00 00 | askip8      long 2
00fb0     00 00 00 00 | acmd8       long 0
00fb4                 | 
00fb4                 | ' Time variables
00fb4                 | 
00fb4     00 00 00 00 | time0       long 0    ' Global sample computing time
00fb8     01 00 00 00 | time1       long 1    ' Local channels time
00fbc     02 00 00 00 | time2       long 2
00fc0     03 00 00 00 | time3       long 3
00fc4     04 00 00 00 | time4       long 4
00fc8     05 00 00 00 | time5       long 5
00fcc     06 00 00 00 | time6       long 6
00fd0     07 00 00 00 | time7       long 7
00fd4     08 00 00 00 | time8       long 8
00fd8                 | 
00fd8     00 00 00 00 | oldt0       long 0    'Temporary time variables
00fdc     00 00 00 00 | cn          long 0
00fe0     00 00 00 00 | ct          long 0
00fe4     00 00 00 00 | dt0         long 0
00fe8                 | 
00fe8                 | ' Samples
00fe8                 | 
00fe8     00 00 00 00 | ls          long 0    ' Global sample variable
00fec     00 00 00 00 | rs          long 0
00ff0                 | 
00ff0     00 00 00 00 | ls1         long 0    ' Channel samples
00ff4     00 00 00 00 | rs1         long 0
00ff8     00 00 00 00 | ls2         long 0
00ffc     00 00 00 00 | rs2         long 0
01000     00 00 00 00 | ls3         long 0
01004     00 00 00 00 | rs3         long 0
01008     00 00 00 00 | rs4         long 0
0100c     00 00 00 00 | ls4         long 0
01010     00 00 00 00 | rs5         long 0
01014     00 00 00 00 | ls5         long 0
01018     00 00 00 00 | rs6         long 0
0101c     00 00 00 00 | ls6         long 0
01020     00 00 00 00 | rs7         long 0
01024     00 00 00 00 | ls7         long 0
01028     00 00 00 00 | rs8         long 0
0102c     00 00 00 00 | ls8         long 0
01030                 | 
01030     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
01034                 | 
01034     00 00 00 00 
01038     00 00 00 00 | null  			long 	0,0           ' for channel reset
0103c                 | objmem
0103c     00 00 00 00 | 	long	0[1]
01040 0b0             | 	org	COG_BSS_START
01040 0b0             | arg01
01040 0b0             | 	res	1
01040 0b1             | arg02
01040 0b1             | 	res	1
01040 0b2             | arg03
01040 0b2             | 	res	1
01040 0b3             | arg04
01040 0b3             | 	res	1
01040 0b4             | 	fit	480
01040 0b4             | 
