00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/testrpi.p2asm"
00000                 | ' 
00000                 | ' hdmi_base       = 0            'must be a multiple of 8
00000                 | con
00000                 | 	hdmi_base = 0
00000                 | ' '_clkfreq        = 354_689_500   '200x Atari 8-bit PAL,  50x Amiga PAL
00000                 | ' _clkfreq       = 357_954_500   '200x Atari 8-bit NTSC, 50x Amiga NTSC
00000                 | 	_clkfreq = 357954500
00000                 | ' rxpin           = 32
00000                 | 	rxpin = 32
00000                 | ' txpin           = 33
00000                 | 	txpin = 33
00000                 | ' baudrate        = 1920000
00000                 | 	baudrate = 1920000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 357958951
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c36cfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 C2 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DD F0 03 F6 | 	mov	ptra, objptr
00410 003 19 00 00 FF 
00414 004 84 F0 07 F1 | 	add	ptra, ##12932
00418 005 14 EC 0F FB | 	rdlong	pa, #20 wz
0041c 006 E4 01 90 5D |  if_ne	jmp	#skip_clock_set_
00420 007 00 00 64 FD | 	hubset	#0
00424 008 B6 E1 80 FF 
00428 009 00 F0 65 FD | 	hubset	##29584632
0042c 00a 86 01 80 FF 
00430 00b 1F 80 66 FD | 	waitx	##200000
00434 00c B6 E1 00 FF 
00438 00d FB EC 07 F6 | 	mov	pa, ##29584635
0043c 00e 00 EC 63 FD | 	hubset	pa
00440 00f 18 EC 67 FC | 	wrlong	pa, #24
00444 010 02 AB 8A FF 
00448 011 14 4E 6E FC | 	wrlong	##357958951, #20
0044c 012 B4 01 90 FD | 	jmp	#skip_clock_set_
00450 013 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 8C 07 A0 FD | 	call	#_start
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 CE 61 FD | 	cogid	arg01
00614 084 03 CE 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 BB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 C3 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 CF 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 D1 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 D3 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 D5 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D C2 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 D2 55 F0 |         shr	arg03, #1 wc
00688 0a1 E7 D0 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 CE 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 D0 FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 D2 55 F0 |         shr	arg03, #1 wc
00698 0a5 E7 D0 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 CE 05 C1 |  if_c   add	arg01, #2
006a0 0a7 E8 D0 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 E7 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 D2 0D F2 |         cmp	arg03, #0 wz
006ac 0aa E9 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 D0 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 D7 65 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 D7 05 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 13 25 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 26 62 FD |        getqx   muldivb_
00740 0cf 19 24 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 12 25 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 B8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 13 27 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 B8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 B8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 12 25 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 B8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 13 27 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | 
0076c 0da             | entryptr__
0076c 0da 04 04 00 00 | 	long	@entry
00770 0db             | itmp1_
00770 0db 00 00 00 00 | 	long	0
00774 0dc             | itmp2_
00774 0dc 00 00 00 00 | 	long	0
00778 0dd             | objptr
00778 0dd 20 42 00 00 | 	long	@objmem
0077c 0de             | ptr__Hn007_20210302_dat__
0077c 0de F0 23 00 00 | 	long	@_Hn007_20210302_dat_
00780 0df             | ptr___system__dat__
00780 0df 08 42 00 00 | 	long	@__system__dat_
00784 0e0             | ptr__serialcog_
00784 0e0 34 16 00 00 | 	long	@_serialcog
00788 0e1             | result1
00788 0e1 00 00 00 00 | 	long	0
0078c 0e2             | COG_BSS_START
0078c 0e2             | 	fit	480
0078c                 | 	orgh
0078c                 | hubentry
0078c                 | 
0078c                 | ' 
0078c                 | ' pub start(mode)   |iii,caps
0078c                 | _start
0078c     27 5A 05 F6 | 	mov	COUNT_, #39
00790     B0 00 A0 FD | 	call	#pushregs_
00794                 | ' 
00794                 | ' mode :=0
00794     00 D6 05 F6 | 	mov	local01, #0
00798                 | ' caps:=0
00798     00 D8 05 F6 | 	mov	local02, #0
0079c                 | ' pinl(31)
0079c     58 3E 64 FD | 	drvl	#31
007a0                 | ' waitms(100)
007a0     64 CE 05 F6 | 	mov	arg01, #100
007a4     9C 1A B0 FD | 	call	#__system___waitms
007a8                 | ' iii:=0
007a8                 | ' vgacog:=v.start(mode)
007a8     00 CE 05 F6 | 	mov	arg01, #0
007ac     01 00 00 FF 
007b0     5C BA 05 F1 | 	add	objptr, ##604
007b4     DD DA 01 F6 | 	mov	local03, objptr
007b8                 | ' 
007b8                 | ' ' mode=0 - start at PAL timings, 624 lines
007b8                 | ' ' mode=256 - start at NTSC timings, 524 lines
007b8                 | ' 
007b8                 | ' '**********************************************************************************
007b8                 | ' '
007b8                 | ' '           Starts the driver
007b8                 | ' '
007b8                 | ' '**********************************************************************************
007b8                 | ' 
007b8                 | ' ' initialize pointers
007b8                 | ' 
007b8                 | ' border_ptr:=@bordercolor
007b8     20 BA 85 F1 | 	sub	objptr, #32
007bc     DD DA 61 FC | 	wrlong	local03, objptr
007c0                 | ' font_ptr:=@st_font
007c0     04 BA 85 F1 | 	sub	objptr, #4
007c4     DD BC 61 FC | 	wrlong	ptr__Hn007_20210302_dat__, objptr
007c8     A4 BA 05 F1 | 	add	objptr, #164
007cc     DD DC 01 F6 | 	mov	local04, objptr
007d0                 | ' buf_ptr:=@buf
007d0     A8 BA 85 F1 | 	sub	objptr, #168
007d4     DD DC 61 FC | 	wrlong	local04, objptr
007d8     17 00 00 FF 
007dc     A4 BB 05 F1 | 	add	objptr, ##12196
007e0     DD DE 01 F6 | 	mov	local05, objptr
007e4                 | ' vblank_ptr:=@vblank
007e4     17 00 00 FF 
007e8     98 BB 85 F1 | 	sub	objptr, ##12184
007ec     DD DE 61 FC | 	wrlong	local05, objptr
007f0     17 00 00 FF 
007f4     7C BB 05 F1 | 	add	objptr, ##12156
007f8     DD E0 01 F6 | 	mov	local06, objptr
007fc                 | ' cursor_ptr:=@cursor_x
007fc     17 00 00 FF 
00800     78 BB 85 F1 | 	sub	objptr, ##12152
00804     DD E0 61 FC | 	wrlong	local06, objptr
00808     17 00 00 FF 
0080c     A4 BB 05 F1 | 	add	objptr, ##12196
00810     DD E2 01 F6 | 	mov	local07, objptr
00814                 | ' mode_ptr:=@timings
00814     17 00 00 FF 
00818     A0 BB 85 F1 | 	sub	objptr, ##12192
0081c     DD E2 61 FC | 	wrlong	local07, objptr
00820     0C 00 00 FF 
00824     00 BC 05 F1 | 	add	ptr__Hn007_20210302_dat__, ##6144
00828                 | ' palette_ptr:=@ataripalette
00828     04 BA 05 F1 | 	add	objptr, #4
0082c     DD BC 61 FC | 	wrlong	ptr__Hn007_20210302_dat__, objptr
00830     17 00 00 FF 
00834     C4 BB 05 F1 | 	add	objptr, ##12228
00838     DD E4 01 F6 | 	mov	local08, objptr
0083c                 | ' command_ptr:=@cmd1
0083c     17 00 00 FF 
00840     C0 BB 85 F1 | 	sub	objptr, ##12224
00844     DD E4 61 FC | 	wrlong	local08, objptr
00848     17 00 00 FF 
0084c     C8 BB 05 F1 | 	add	objptr, ##12232
00850     DD E6 01 F6 | 	mov	local09, objptr
00854                 | ' fontnum_ptr:=@fontnum
00854     17 00 00 FF 
00858     C4 BB 85 F1 | 	sub	objptr, ##12228
0085c     DD E6 61 FC | 	wrlong	local09, objptr
00860                 | ' 
00860                 | ' fontnum:=2048  ' ST type font
00860     17 00 00 FF 
00864     C4 BB 05 F1 | 	add	objptr, ##12228
00868     04 00 80 FF 
0086c     DD 00 68 FC | 	wrlong	##2048, objptr
00870                 | ' 
00870                 | ' ' initialize a cursor
00870                 | ' 
00870                 | ' cursor_x:=0
00870     5C BA 85 F1 | 	sub	objptr, #92
00874     DD 00 48 FC | 	wrbyte	#0, objptr
00878                 | ' cursor_y:=0
00878     01 BA 05 F1 | 	add	objptr, #1
0087c     DD 00 48 FC | 	wrbyte	#0, objptr
00880                 | ' cursor_sh:=14
00880     01 BA 05 F1 | 	add	objptr, #1
00884     DD 1C 48 FC | 	wrbyte	#14, objptr
00888                 | ' 
00888                 | ' ' set 16 VGA DOS like colors
00888                 | ' 
00888                 | ' colors[0] := c_black
00888     0A BA 05 F1 | 	add	objptr, #10
0088c     DD 00 48 FC | 	wrbyte	#0, objptr
00890                 | ' colors[1] := c_blue
00890     01 BA 05 F1 | 	add	objptr, #1
00894     DD EA 48 FC | 	wrbyte	#117, objptr
00898                 | ' colors[2] := c_green
00898     01 BA 05 F1 | 	add	objptr, #1
0089c     DD 8E 49 FC | 	wrbyte	#199, objptr
008a0                 | ' colors[3] := c_cyan
008a0     01 BA 05 F1 | 	add	objptr, #1
008a4     DD 2E 49 FC | 	wrbyte	#151, objptr
008a8                 | ' colors[4] := c_red
008a8     01 BA 05 F1 | 	add	objptr, #1
008ac     DD 4E 48 FC | 	wrbyte	#39, objptr
008b0                 | ' colors[5] := c_magenta
008b0     01 BA 05 F1 | 	add	objptr, #1
008b4     DD 8E 48 FC | 	wrbyte	#71, objptr
008b8                 | ' colors[6] := c_brown
008b8     01 BA 05 F1 | 	add	objptr, #1
008bc     DD EC 49 FC | 	wrbyte	#246, objptr
008c0                 | ' colors[7] := c_lightgray
008c0     01 BA 05 F1 | 	add	objptr, #1
008c4     DD 14 48 FC | 	wrbyte	#10, objptr
008c8                 | ' colors[8] := c_darkgray
008c8     01 BA 05 F1 | 	add	objptr, #1
008cc     DD 0A 48 FC | 	wrbyte	#5, objptr
008d0                 | ' colors[9] := c_lightblue
008d0     01 BA 05 F1 | 	add	objptr, #1
008d4     DD F6 48 FC | 	wrbyte	#123, objptr
008d8                 | ' colors[$A]:= c_lightgreen
008d8     01 BA 05 F1 | 	add	objptr, #1
008dc     DD 96 49 FC | 	wrbyte	#203, objptr
008e0                 | ' colors[$B]:= c_lightcyan
008e0     01 BA 05 F1 | 	add	objptr, #1
008e4     DD 36 49 FC | 	wrbyte	#155, objptr
008e8                 | ' colors[$C]:= c_lightred
008e8     01 BA 05 F1 | 	add	objptr, #1
008ec     DD 56 48 FC | 	wrbyte	#43, objptr
008f0                 | ' colors[$D]:= c_lightmagenta
008f0     01 BA 05 F1 | 	add	objptr, #1
008f4     DD 96 48 FC | 	wrbyte	#75, objptr
008f8                 | ' colors[$E]:= c_yellow
008f8     01 BA 05 F1 | 	add	objptr, #1
008fc     DD D4 49 FC | 	wrbyte	#234, objptr
00900                 | ' colors[$F]:= c_white
00900     01 BA 05 F1 | 	add	objptr, #1
00904     DD 1E 48 FC | 	wrbyte	#15, objptr
00908     17 00 00 FF 
0090c     A3 BB 85 F1 | 	sub	objptr, ##12195
00910                 | ' 
00910                 | ' ' set timings
00910                 | ' ' We can have 1140,1026 or 912 pixes per line
00910                 | ' 
00910                 | ' setmode(mode)
00910     0C 00 00 FF 
00914     00 BC 85 F1 | 	sub	ptr__Hn007_20210302_dat__, ##6144
00918     88 14 B0 FD | 	call	#_Hn007_20210302_setmode
0091c                 | ' 
0091c                 | ' 
0091c                 | ' 
0091c                 | '   {{
0091c                 | '     }}
0091c                 | ' 
0091c                 | ' cmd1:=257 ' set idle
0091c     17 00 00 FF 
00920     DC BB 05 F1 | 	add	objptr, ##12252
00924     DD 02 6A FC | 	wrlong	#257, objptr
00928     17 00 00 FF 
0092c     DC BB 85 F1 | 	sub	objptr, ##12252
00930                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
00930     0E 00 00 FF 
00934     00 BC 05 F1 | 	add	ptr__Hn007_20210302_dat__, ##7168
00938     DE D0 01 F6 | 	mov	arg02, ptr__Hn007_20210302_dat__
0093c     0E 00 00 FF 
00940     00 BC 85 F1 | 	sub	ptr__Hn007_20210302_dat__, ##7168
00944     DD D2 01 F6 | 	mov	arg03, objptr
00948     10 CE 05 F6 | 	mov	arg01, #16
0094c     28 D2 61 FD | 	setq	arg03
00950     E8 CE F1 FC | 	coginit	arg01, arg02 wc
00954     01 CE 65 C6 |  if_b	neg	arg01, #1
00958     E7 C2 01 F6 | 	mov	result1, arg01
0095c     E1 E8 01 F6 | 	mov	local10, result1
00960     24 BA 05 F1 | 	add	objptr, #36
00964     DD E8 61 FC | 	wrlong	local10, objptr
00968     24 BA 85 F1 | 	sub	objptr, #36
0096c                 | ' waitms(20)
0096c     14 CE 05 F6 | 	mov	arg01, #20
00970     D0 18 B0 FD | 	call	#__system___waitms
00974                 | ' cls(c_green,c_black)
00974     C7 CE 05 F6 | 	mov	arg01, #199
00978     00 D0 05 F6 | 	mov	arg02, #0
0097c     F8 11 B0 FD | 	call	#_Hn007_20210302_cls
00980                 | ' setwritecolors(c_green,c_black)
00980                 | ' 
00980                 | ' ''---------- Set colors for write and writeln
00980                 | ' 
00980                 | ' write_color:=ff
00980     17 00 00 FF 
00984     8C BB 05 F1 | 	add	objptr, ##12172
00988     DD 8E 69 FC | 	wrlong	#199, objptr
0098c                 | ' write_background:=bb
0098c     04 BA 05 F1 | 	add	objptr, #4
00990     DD 00 68 FC | 	wrlong	#0, objptr
00994                 | ' 
00994                 | ' return cog
00994     17 00 00 FF 
00998     6C BB 85 F1 | 	sub	objptr, ##12140
0099c     DD C2 01 FB | 	rdlong	result1, objptr
009a0     01 00 00 FF 
009a4     58 BA 85 F1 | 	sub	objptr, ##600
009a8     DD C2 61 FC | 	wrlong	result1, objptr
009ac                 | ' v.setfontnum(0)
009ac                 | ' 
009ac                 | ' fontnum:=num
009ac     19 00 00 FF 
009b0     18 BA 05 F1 | 	add	objptr, ##12824
009b4     DD 00 68 FC | 	wrlong	#0, objptr
009b8     17 00 00 FF 
009bc     E4 BB 85 F1 | 	sub	objptr, ##12260
009c0                 | ' v.cls(154,147)
009c0     9A CE 05 F6 | 	mov	arg01, #154
009c4     93 D0 05 F6 | 	mov	arg02, #147
009c8     AC 11 B0 FD | 	call	#_Hn007_20210302_cls
009cc                 | ' v.setbordercolors(0,0,0)
009cc     00 CE 05 F6 | 	mov	arg01, #0
009d0                 | ' 
009d0                 | ' ''---------- Set border color for all screen - rgb
009d0                 | ' 
009d0                 | ' color:=r<<16+g<<8+b
009d0     28 BA 05 F1 | 	add	objptr, #40
009d4     DD EA 01 F6 | 	mov	local11, objptr
009d8     28 BA 85 F1 | 	sub	objptr, #40
009dc     2C F6 9F FE | 	loc	pa,	#(@LR__0003-@LR__0001)
009e0     93 00 A0 FD | 	call	#FCACHE_LOAD_
009e4                 | LR__0001
009e4     20 04 DC FC | 	rep	@LR__0004, #32
009e8                 | LR__0002
009e8                 | '   bordercolor[i]:=color
009e8     F5 CE 61 FC | 	wrlong	arg01, local11
009ec     04 EA 05 F1 | 	add	local11, #4
009f0                 | LR__0003
009f0                 | LR__0004
009f0     01 00 00 FF 
009f4     34 BA 85 F1 | 	sub	objptr, ##564
009f8                 | ' serial_start(rxpin, txpin, baudrate)
009f8     20 CE 05 F6 | 	mov	arg01, #32
009fc     21 D0 05 F6 | 	mov	arg02, #33
00a00     A6 0E 00 FF 
00a04     00 D2 05 F6 | 	mov	arg03, ##1920000
00a08     68 0D B0 FD | 	call	#_serial_start
00a0c                 | ' midi_start(29,30)
00a0c     1D CE 05 F6 | 	mov	arg01, #29
00a10     1E D0 05 F6 | 	mov	arg02, #30
00a14     E4 0D B0 FD | 	call	#_midi_start
00a18                 | ' pinwrite(14,0)
00a18     00 D0 05 F6 | 	mov	arg02, #0
00a1c     01 D0 D5 F7 | 	test	arg02, #1 wc
00a20     5A 1C 64 FD | 	drvc	#14
00a24                 | ' pinwrite(15,0)
00a24     01 D0 D5 F7 | 	test	arg02, #1 wc
00a28     5A 1E 64 FD | 	drvc	#15
00a2c                 | ' 
00a2c                 | ' cogspin(16,serialcog(),@serialstack)
00a2c     DD EC 01 F6 | 	mov	local12, objptr
00a30     20 BB 05 F1 | 	add	objptr, #288
00a34     DD EE 01 F6 | 	mov	local13, objptr
00a38     F7 EC 61 FC | 	wrlong	local12, local13
00a3c     04 EE 05 F1 | 	add	local13, #4
00a40     F7 C0 61 FC | 	wrlong	ptr__serialcog_, local13
00a44     DA F0 01 F6 | 	mov	local14, entryptr__
00a48     DD F2 01 F6 | 	mov	local15, objptr
00a4c     F9 F4 01 F6 | 	mov	local16, local15
00a50     10 CE 05 F6 | 	mov	arg01, #16
00a54     FA D2 01 F6 | 	mov	arg03, local16
00a58     28 D2 61 FD | 	setq	arg03
00a5c     F8 CE F1 FC | 	coginit	arg01, local14 wc
00a60     01 CE 65 C6 |  if_b	neg	arg01, #1
00a64     E7 C2 01 F6 | 	mov	result1, arg01
00a68     E1 F6 01 F6 | 	mov	local17, result1
00a6c                 | ' v.setcursorshape(0)
00a6c                 | ' 
00a6c                 | ' ''---------- Define a cursor shape (0-full..15-line)
00a6c                 | ' 
00a6c                 | ' cursor_sh:=shape
00a6c     18 00 00 FF 
00a70     9E BA 05 F1 | 	add	objptr, ##12446
00a74     DD 00 48 FC | 	wrbyte	#0, objptr
00a78                 | ' v.setwritecolors(154,147)
00a78     93 D0 05 F6 | 	mov	arg02, #147
00a7c                 | ' 
00a7c                 | ' ''---------- Set colors for write and writeln
00a7c                 | ' 
00a7c                 | ' write_color:=ff
00a7c     02 BA 05 F1 | 	add	objptr, #2
00a80     DD 34 69 FC | 	wrlong	#154, objptr
00a84                 | ' write_background:=bb
00a84     04 BA 05 F1 | 	add	objptr, #4
00a88     DD 26 69 FC | 	wrlong	#147, objptr
00a8c     17 00 00 FF 
00a90     90 BB 85 F1 | 	sub	objptr, ##12176
00a94                 | ' v.writeln(string(" "))
00a94     11 00 00 FF 
00a98     C0 CE 05 F6 | 	mov	arg01, ##@LR__0144
00a9c     78 10 B0 FD | 	call	#_Hn007_20210302_writeln
00aa0                 | ' v.writeln(string("  P2 Retromachine v. 0.00"))
00aa0     11 00 00 FF 
00aa4     C2 CE 05 F6 | 	mov	arg01, ##@LR__0145
00aa8     6C 10 B0 FD | 	call	#_Hn007_20210302_writeln
00aac                 | ' v.writeln(string(" "))
00aac     11 00 00 FF 
00ab0     DC CE 05 F6 | 	mov	arg01, ##@LR__0146
00ab4     60 10 B0 FD | 	call	#_Hn007_20210302_writeln
00ab8                 | ' v.writeln(string("  Ready"))
00ab8     11 00 00 FF 
00abc     DE CE 05 F6 | 	mov	arg01, ##@LR__0147
00ac0     54 10 B0 FD | 	call	#_Hn007_20210302_writeln
00ac4                 | ' v.writeln(string(" "))
00ac4     11 00 00 FF 
00ac8     E6 CE 05 F6 | 	mov	arg01, ##@LR__0148
00acc     48 10 B0 FD | 	call	#_Hn007_20210302_writeln
00ad0                 | ' v.write(string("  "))
00ad0     11 00 00 FF 
00ad4     E8 CE 05 F6 | 	mov	arg01, ##@LR__0149
00ad8     98 0E B0 FD | 	call	#_Hn007_20210302_write
00adc     01 00 00 FF 
00ae0     34 BA 85 F1 | 	sub	objptr, ##564
00ae4                 | ' 
00ae4                 | ' iii:=fileopen(string("C:\kernel.img"))
00ae4     11 00 00 FF 
00ae8     EB CE 05 F6 | 	mov	arg01, ##@LR__0150
00aec                 | ' 
00aec                 | ' q:=strsize(filename)
00aec     E7 F8 01 F6 | 	mov	local18, arg01
00af0     00 FA 05 F6 | 	mov	local19, #0
00af4     18 F5 9F FE | 	loc	pa,	#(@LR__0006-@LR__0005)
00af8     93 00 A0 FD | 	call	#FCACHE_LOAD_
00afc                 | LR__0005
00afc     E7 FC C9 FA | 	rdbyte	local20, arg01 wz
00b00     01 FA 05 51 |  if_ne	add	local19, #1
00b04     01 CE 05 51 |  if_ne	add	arg01, #1
00b08     F0 FF 9F 5D |  if_ne	jmp	#LR__0005
00b0c                 | LR__0006
00b0c     FD C2 01 F6 | 	mov	result1, local19
00b10     E1 FE 01 F6 | 	mov	local21, result1
00b14                 | ' tx($40)
00b14     40 CE 05 F6 | 	mov	arg01, #64
00b18     6C 0D B0 FD | 	call	#_tx
00b1c                 | ' repeat i from 0 to q-1
00b1c     00 00 06 F6 | 	mov	local22, #0
00b20     FF 02 02 F6 | 	mov	local23, local21
00b24     01 02 86 F1 | 	sub	local23, #1
00b28     00 02 5E F2 | 	cmps	local23, #0 wcz
00b2c     01 04 06 16 |  if_a	mov	local24, #1
00b30     01 04 66 E6 |  if_be	neg	local24, #1
00b34     02 03 02 F1 | 	add	local23, local24
00b38                 | LR__0007
00b38     FC 06 02 F6 | 	mov	local25, local18
00b3c     00 07 02 F1 | 	add	local25, local22
00b40                 | '   tx(byte[filename+i])
00b40     03 CF C1 FA | 	rdbyte	arg01, local25
00b44     40 0D B0 FD | 	call	#_tx
00b48     02 01 02 F1 | 	add	local22, local24
00b4c     01 01 0A F2 | 	cmp	local22, local23 wz
00b50     E4 FF 9F 5D |  if_ne	jmp	#LR__0007
00b54                 | ' tx(255)
00b54     FF CE 05 F6 | 	mov	arg01, #255
00b58     2C 0D B0 FD | 	call	#_tx
00b5c                 | ' return q
00b5c     FF C2 01 F6 | 	mov	result1, local21
00b60     E1 08 02 F6 | 	mov	local26, result1
00b64     04 0B 02 F6 | 	mov	local27, local26
00b68                 | ' 
00b68                 | ' repeat
00b68                 | LR__0008
00b68                 | '  
00b68                 | '   repeat 
00b68                 | LR__0009
00b68                 | '     rr:=serialread()
00b68     A4 0B B0 FD | 	call	#_serialread
00b6c     E1 EC 01 F6 | 	mov	local12, result1
00b70     01 00 00 FF 
00b74     20 BA 05 F1 | 	add	objptr, ##544
00b78     DD EC 61 FC | 	wrlong	local12, objptr
00b7c                 | '     mrr:=mrxcheck()
00b7c                 | ' 
00b7c                 | ' '' Check for serial input
00b7c                 | ' '' -- returns -1 if nothing available
00b7c                 | ' 
00b7c                 | '   rxbyte := -1
00b7c     01 0C 66 F6 | 	neg	local28, #1
00b80                 | '   check := pinr(mrxp)
00b80     01 00 00 FF 
00b84     10 BA 85 F1 | 	sub	objptr, ##528
00b88     DD CE 01 FB | 	rdlong	arg01, objptr
00b8c     10 BA 85 F1 | 	sub	objptr, #16
00b90     90 16 B0 FD | 	call	#__system___pinread
00b94     E1 0E 0A F6 | 	mov	local29, result1 wz
00b98                 | '   if (check)
00b98     18 00 90 AD |  if_e	jmp	#LR__0010
00b9c                 | '     rxbyte := rdpin(mrxp) >> 24
00b9c     10 BA 05 F1 | 	add	objptr, #16
00ba0     DD CE 01 FB | 	rdlong	arg01, objptr
00ba4     10 BA 85 F1 | 	sub	objptr, #16
00ba8     00 0C 06 F6 | 	mov	local28, #0
00bac     E7 0C 8A FA | 	rdpin	local28, arg01
00bb0     18 0C 46 F0 | 	shr	local28, #24
00bb4                 | LR__0010
00bb4     06 C3 01 F6 | 	mov	result1, local28
00bb8     01 00 00 FF 
00bbc     24 BA 05 F1 | 	add	objptr, ##548
00bc0     DD C2 61 FC | 	wrlong	result1, objptr
00bc4     04 BA 85 F1 | 	sub	objptr, #4
00bc8     DD EE 01 FB | 	rdlong	local13, objptr
00bcc     01 00 00 FF 
00bd0     20 BA 85 F1 | 	sub	objptr, ##544
00bd4     00 EE 5D F2 | 	cmps	local13, #0 wcz
00bd8     20 00 90 3D |  if_ae	jmp	#LR__0011
00bdc     01 00 00 FF 
00be0     24 BA 05 F1 | 	add	objptr, ##548
00be4     DD F0 01 FB | 	rdlong	local14, objptr
00be8     01 00 00 FF 
00bec     24 BA 85 F1 | 	sub	objptr, ##548
00bf0     F8 08 02 F6 | 	mov	local26, local14
00bf4     00 08 5E F2 | 	cmps	local26, #0 wcz
00bf8     6C FF 9F CD |  if_b	jmp	#LR__0009
00bfc                 | LR__0011
00bfc                 | '  '   debug(udec(mrr))
00bfc                 | '   until rr>=0 || mrr>=0  
00bfc                 | '     
00bfc                 | ' '  rr:=serialblockingread()
00bfc                 | ' 
00bfc                 | ' {{
00bfc                 | ' }}   
00bfc                 | '   if mrr>=0
00bfc     01 00 00 FF 
00c00     24 BA 05 F1 | 	add	objptr, ##548
00c04     DD EC 01 FB | 	rdlong	local12, objptr
00c08     01 00 00 FF 
00c0c     24 BA 85 F1 | 	sub	objptr, ##548
00c10     00 EC 5D F2 | 	cmps	local12, #0 wcz
00c14     0C 01 90 CD |  if_b	jmp	#LR__0017
00c18                 | '     v.write(string(" Midi: "))
00c18     11 00 00 FF 
00c1c     F9 CE 05 F6 | 	mov	arg01, ##@LR__0151
00c20     01 00 00 FF 
00c24     34 BA 05 F1 | 	add	objptr, ##564
00c28     48 0D B0 FD | 	call	#_Hn007_20210302_write
00c2c                 | '     v.writeln(v.inttohex(mrr,2))
00c2c     10 BA 85 F1 | 	sub	objptr, #16
00c30     DD CE 01 FB | 	rdlong	arg01, objptr
00c34     02 08 06 F6 | 	mov	local26, #2
00c38     02 D0 05 F6 | 	mov	arg02, #2
00c3c                 | ' 
00c3c                 | ' ''----------  Convert integer to hex string with d digits, return a pointer
00c3c                 | ' 
00c3c                 | ' j:=i
00c3c                 | ' pos:=d-1
00c3c     01 10 06 F6 | 	mov	local30, #1
00c40                 | ' k:=0
00c40     17 00 00 FF 
00c44     B8 BB 05 F1 | 	add	objptr, ##12216
00c48     DD D0 01 F1 | 	add	arg02, objptr
00c4c                 | ' n_string[d]:=0
00c4c     E8 00 48 FC | 	wrbyte	#0, arg02
00c50                 | ' repeat k from 0 to d-1
00c50     00 12 06 F6 | 	mov	local31, #0
00c54     17 00 00 FF 
00c58     A8 BB 85 F1 | 	sub	objptr, ##12200
00c5c     01 FC 05 F6 | 	mov	local20, #1
00c60     01 14 06 F6 | 	mov	local32, #1
00c64     02 16 06 F6 | 	mov	local33, #2
00c68     BC F3 9F FE | 	loc	pa,	#(@LR__0013-@LR__0012)
00c6c     93 00 A0 FD | 	call	#FCACHE_LOAD_
00c70                 | LR__0012
00c70     09 19 02 F6 | 	mov	local34, local31
00c74     17 00 00 FF 
00c78     A8 BB 05 F1 | 	add	objptr, ##12200
00c7c     DD 18 02 F1 | 	add	local34, objptr
00c80                 | '   n_string[k]:=48
00c80     0C 61 48 FC | 	wrbyte	#48, local34
00c84     01 12 06 F1 | 	add	local31, #1
00c88     02 12 0E F2 | 	cmp	local31, #2 wz
00c8c     17 00 00 FF 
00c90     A8 BB 85 F1 | 	sub	objptr, ##12200
00c94     D8 FF 9F 5D |  if_ne	jmp	#LR__0012
00c98                 | LR__0013
00c98                 | ' 
00c98                 | ' if (j<>0)
00c98     00 CE 0D F2 | 	cmp	arg01, #0 wz
00c9c     5C 00 90 AD |  if_e	jmp	#LR__0016
00ca0                 | ' 
00ca0                 | '   repeat while (pos>-1)
00ca0                 | LR__0014
00ca0     FF FF 7F FF 
00ca4     FF 11 5E F2 | 	cmps	local30, ##-1 wcz
00ca8     50 00 90 ED |  if_be	jmp	#LR__0015
00cac     E7 FC 51 F6 | 	abs	local20, arg01 wc
00cb0     0F FC 05 F5 | 	and	local20, #15
00cb4     FE FC 61 C6 |  if_b	neg	local20, local20
00cb8     FE 1A 02 F6 | 	mov	local35, local20
00cbc                 | '     q:=j//16
00cbc                 | '     if (q>9)
00cbc     09 1A 5E F2 | 	cmps	local35, #9 wcz
00cc0                 | '       q:=q+7
00cc0     07 1A 06 11 |  if_a	add	local35, #7
00cc4                 | '     q:=48+q
00cc4     30 1A 06 F1 | 	add	local35, #48
00cc8     08 1D 02 F6 | 	mov	local36, local30
00ccc     17 00 00 FF 
00cd0     A8 BB 05 F1 | 	add	objptr, ##12200
00cd4     DD 1C 02 F1 | 	add	local36, objptr
00cd8                 | '     n_string[pos]:=q
00cd8     0E 1B 42 FC | 	wrbyte	local35, local36
00cdc                 | '     j:=j/16
00cdc     E7 FC 51 F6 | 	abs	local20, arg01 wc
00ce0     04 FC 45 F0 | 	shr	local20, #4
00ce4     17 00 00 FF 
00ce8     A8 BB 85 F1 | 	sub	objptr, ##12200
00cec     FE FC 61 C6 |  if_b	neg	local20, local20
00cf0     FE CE 01 F6 | 	mov	arg01, local20
00cf4                 | '     pos-=1
00cf4     01 10 86 F1 | 	sub	local30, #1
00cf8     A4 FF 9F FD | 	jmp	#LR__0014
00cfc                 | LR__0015
00cfc                 | LR__0016
00cfc     17 00 00 FF 
00d00     A8 BB 05 F1 | 	add	objptr, ##12200
00d04     DD C2 01 F6 | 	mov	result1, objptr
00d08     17 00 00 FF 
00d0c     A8 BB 85 F1 | 	sub	objptr, ##12200
00d10                 | ' 
00d10                 | ' q:=@n_string
00d10                 | ' return q
00d10     E1 F0 01 F6 | 	mov	local14, result1
00d14     F8 CE 01 F6 | 	mov	arg01, local14
00d18     FC 0D B0 FD | 	call	#_Hn007_20210302_writeln
00d1c     01 00 00 FF 
00d20     34 BA 85 F1 | 	sub	objptr, ##564
00d24                 | LR__0017
00d24                 | '     
00d24                 | '  
00d24                 | '   if rr==$31    'mousex
00d24     01 00 00 FF 
00d28     20 BA 05 F1 | 	add	objptr, ##544
00d2c     DD EC 01 FB | 	rdlong	local12, objptr
00d30     01 00 00 FF 
00d34     20 BA 85 F1 | 	sub	objptr, ##544
00d38     31 EC 0D F2 | 	cmp	local12, #49 wz
00d3c     04 01 90 5D |  if_ne	jmp	#LR__0022
00d40                 | '     mousex:=serialblockingread()
00d40                 | ' 
00d40                 | ' repeat
00d40                 | LR__0018
00d40                 | '   r:=serialread()
00d40     CC 09 B0 FD | 	call	#_serialread
00d44     E1 1E 02 F6 | 	mov	local37, result1
00d48     FF FF 7F FF 
00d4c     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
00d50     EC FF 9F AD |  if_e	jmp	#LR__0018
00d54                 | ' until r<>-1
00d54                 | ' return r
00d54     0F C3 01 F6 | 	mov	result1, local37
00d58     E1 EC 01 F6 | 	mov	local12, result1
00d5c     01 00 00 FF 
00d60     2C BA 05 F1 | 	add	objptr, ##556
00d64     DD EC 51 FC | 	wrword	local12, objptr
00d68     01 00 00 FF 
00d6c     2C BA 85 F1 | 	sub	objptr, ##556
00d70                 | '     mousex+=serialblockingread()<<8
00d70                 | ' 
00d70                 | ' repeat
00d70                 | LR__0019
00d70                 | '   r:=serialread()
00d70     9C 09 B0 FD | 	call	#_serialread
00d74     E1 1E 02 F6 | 	mov	local37, result1
00d78     FF FF 7F FF 
00d7c     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
00d80     EC FF 9F AD |  if_e	jmp	#LR__0019
00d84                 | ' until r<>-1
00d84                 | ' return r
00d84     0F C3 01 F6 | 	mov	result1, local37
00d88     E1 20 02 F6 | 	mov	local38, result1
00d8c     08 20 66 F0 | 	shl	local38, #8
00d90     01 00 00 FF 
00d94     2C BA 05 F1 | 	add	objptr, ##556
00d98     DD F0 E1 FA | 	rdword	local14, objptr
00d9c     F8 08 02 F6 | 	mov	local26, local14
00da0     10 09 02 F1 | 	add	local26, local38
00da4     DD 08 52 FC | 	wrword	local26, objptr
00da8     01 00 00 FF 
00dac     2C BA 85 F1 | 	sub	objptr, ##556
00db0                 | '     rr:=serialblockingread()
00db0                 | ' 
00db0                 | ' repeat
00db0                 | LR__0020
00db0                 | '   r:=serialread()
00db0     5C 09 B0 FD | 	call	#_serialread
00db4     E1 1E 02 F6 | 	mov	local37, result1
00db8     FF FF 7F FF 
00dbc     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
00dc0     EC FF 9F AD |  if_e	jmp	#LR__0020
00dc4                 | ' until r<>-1
00dc4                 | ' return r
00dc4     0F C3 01 F6 | 	mov	result1, local37
00dc8     01 00 00 FF 
00dcc     20 BA 05 F1 | 	add	objptr, ##544
00dd0     DD C2 61 FC | 	wrlong	result1, objptr
00dd4                 | '     if rr==255
00dd4     E1 EC 01 F6 | 	mov	local12, result1
00dd8     01 00 00 FF 
00ddc     20 BA 85 F1 | 	sub	objptr, ##544
00de0     FF EC 0D F2 | 	cmp	local12, #255 wz
00de4     5C 00 90 5D |  if_ne	jmp	#LR__0021
00de8                 | '      v.write(string("  Mouse moved, x= "))
00de8     11 00 00 FF 
00dec     01 CF 05 F6 | 	mov	arg01, ##@LR__0152
00df0     01 00 00 FF 
00df4     34 BA 05 F1 | 	add	objptr, ##564
00df8     78 0B B0 FD | 	call	#_Hn007_20210302_write
00dfc                 | '      v.write(v.inttostr(mousex))
00dfc     08 BA 85 F1 | 	sub	objptr, #8
00e00     DD CE E1 FA | 	rdword	arg01, objptr
00e04     08 BA 05 F1 | 	add	objptr, #8
00e08     48 0E B0 FD | 	call	#_Hn007_20210302_inttostr
00e0c     E1 CE 01 F6 | 	mov	arg01, result1
00e10     60 0B B0 FD | 	call	#_Hn007_20210302_write
00e14                 | '      v.write(string(", y= "))
00e14     11 00 00 FF 
00e18     14 CF 05 F6 | 	mov	arg01, ##@LR__0153
00e1c     54 0B B0 FD | 	call	#_Hn007_20210302_write
00e20                 | '      v.writeln(v.inttostr(mousey))
00e20     06 BA 85 F1 | 	sub	objptr, #6
00e24     DD CE E1 FA | 	rdword	arg01, objptr
00e28     06 BA 05 F1 | 	add	objptr, #6
00e2c     24 0E B0 FD | 	call	#_Hn007_20210302_inttostr
00e30     E1 08 02 F6 | 	mov	local26, result1
00e34     04 CF 01 F6 | 	mov	arg01, local26
00e38     DC 0C B0 FD | 	call	#_Hn007_20210302_writeln
00e3c     01 00 00 FF 
00e40     34 BA 85 F1 | 	sub	objptr, ##564
00e44                 | LR__0021
00e44                 | LR__0022
00e44                 | ' 
00e44                 | '   if rr==$32    'mousey
00e44     01 00 00 FF 
00e48     20 BA 05 F1 | 	add	objptr, ##544
00e4c     DD EC 01 FB | 	rdlong	local12, objptr
00e50     01 00 00 FF 
00e54     20 BA 85 F1 | 	sub	objptr, ##544
00e58     32 EC 0D F2 | 	cmp	local12, #50 wz
00e5c     04 01 90 5D |  if_ne	jmp	#LR__0027
00e60                 | '     mousey:=serialblockingread()
00e60                 | ' 
00e60                 | ' repeat
00e60                 | LR__0023
00e60                 | '   r:=serialread()
00e60     AC 08 B0 FD | 	call	#_serialread
00e64     E1 1E 02 F6 | 	mov	local37, result1
00e68     FF FF 7F FF 
00e6c     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
00e70     EC FF 9F AD |  if_e	jmp	#LR__0023
00e74                 | ' until r<>-1
00e74                 | ' return r
00e74     0F C3 01 F6 | 	mov	result1, local37
00e78     E1 EC 01 F6 | 	mov	local12, result1
00e7c     01 00 00 FF 
00e80     2E BA 05 F1 | 	add	objptr, ##558
00e84     DD EC 51 FC | 	wrword	local12, objptr
00e88     01 00 00 FF 
00e8c     2E BA 85 F1 | 	sub	objptr, ##558
00e90                 | '     mousey+=serialblockingread()<<8
00e90                 | ' 
00e90                 | ' repeat
00e90                 | LR__0024
00e90                 | '   r:=serialread()
00e90     7C 08 B0 FD | 	call	#_serialread
00e94     E1 1E 02 F6 | 	mov	local37, result1
00e98     FF FF 7F FF 
00e9c     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
00ea0     EC FF 9F AD |  if_e	jmp	#LR__0024
00ea4                 | ' until r<>-1
00ea4                 | ' return r
00ea4     0F C3 01 F6 | 	mov	result1, local37
00ea8     E1 22 02 F6 | 	mov	local39, result1
00eac     08 22 66 F0 | 	shl	local39, #8
00eb0     01 00 00 FF 
00eb4     2E BA 05 F1 | 	add	objptr, ##558
00eb8     DD F0 E1 FA | 	rdword	local14, objptr
00ebc     F8 08 02 F6 | 	mov	local26, local14
00ec0     11 09 02 F1 | 	add	local26, local39
00ec4     DD 08 52 FC | 	wrword	local26, objptr
00ec8     01 00 00 FF 
00ecc     2E BA 85 F1 | 	sub	objptr, ##558
00ed0                 | '     rr:=serialblockingread()
00ed0                 | ' 
00ed0                 | ' repeat
00ed0                 | LR__0025
00ed0                 | '   r:=serialread()
00ed0     3C 08 B0 FD | 	call	#_serialread
00ed4     E1 1E 02 F6 | 	mov	local37, result1
00ed8     FF FF 7F FF 
00edc     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
00ee0     EC FF 9F AD |  if_e	jmp	#LR__0025
00ee4                 | ' until r<>-1
00ee4                 | ' return r
00ee4     0F C3 01 F6 | 	mov	result1, local37
00ee8     01 00 00 FF 
00eec     20 BA 05 F1 | 	add	objptr, ##544
00ef0     DD C2 61 FC | 	wrlong	result1, objptr
00ef4                 | '     if rr==255
00ef4     E1 EC 01 F6 | 	mov	local12, result1
00ef8     01 00 00 FF 
00efc     20 BA 85 F1 | 	sub	objptr, ##544
00f00     FF EC 0D F2 | 	cmp	local12, #255 wz
00f04     5C 00 90 5D |  if_ne	jmp	#LR__0026
00f08                 | '      v.write(string("  Mouse moved, x= "))
00f08     11 00 00 FF 
00f0c     1A CF 05 F6 | 	mov	arg01, ##@LR__0154
00f10     01 00 00 FF 
00f14     34 BA 05 F1 | 	add	objptr, ##564
00f18     58 0A B0 FD | 	call	#_Hn007_20210302_write
00f1c                 | '      v.write(v.inttostr(mousex))
00f1c     08 BA 85 F1 | 	sub	objptr, #8
00f20     DD CE E1 FA | 	rdword	arg01, objptr
00f24     08 BA 05 F1 | 	add	objptr, #8
00f28     28 0D B0 FD | 	call	#_Hn007_20210302_inttostr
00f2c     E1 CE 01 F6 | 	mov	arg01, result1
00f30     40 0A B0 FD | 	call	#_Hn007_20210302_write
00f34                 | '      v.write(string(", y= "))
00f34     11 00 00 FF 
00f38     2D CF 05 F6 | 	mov	arg01, ##@LR__0155
00f3c     34 0A B0 FD | 	call	#_Hn007_20210302_write
00f40                 | '      v.writeln(v.inttostr(mousey))
00f40     06 BA 85 F1 | 	sub	objptr, #6
00f44     DD CE E1 FA | 	rdword	arg01, objptr
00f48     06 BA 05 F1 | 	add	objptr, #6
00f4c     04 0D B0 FD | 	call	#_Hn007_20210302_inttostr
00f50     E1 08 02 F6 | 	mov	local26, result1
00f54     04 CF 01 F6 | 	mov	arg01, local26
00f58     BC 0B B0 FD | 	call	#_Hn007_20210302_writeln
00f5c     01 00 00 FF 
00f60     34 BA 85 F1 | 	sub	objptr, ##564
00f64                 | LR__0026
00f64                 | LR__0027
00f64                 | ' 
00f64                 | '   if rr==$33   'mousewheel
00f64     01 00 00 FF 
00f68     20 BA 05 F1 | 	add	objptr, ##544
00f6c     DD EC 01 FB | 	rdlong	local12, objptr
00f70     01 00 00 FF 
00f74     20 BA 85 F1 | 	sub	objptr, ##544
00f78     33 EC 0D F2 | 	cmp	local12, #51 wz
00f7c     D0 00 90 5D |  if_ne	jmp	#LR__0032
00f80                 | '     mousewheel:=serialblockingread()
00f80                 | ' 
00f80                 | ' repeat
00f80                 | LR__0028
00f80                 | '   r:=serialread()
00f80     8C 07 B0 FD | 	call	#_serialread
00f84     E1 1E 02 F6 | 	mov	local37, result1
00f88     FF FF 7F FF 
00f8c     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
00f90     EC FF 9F AD |  if_e	jmp	#LR__0028
00f94                 | ' until r<>-1
00f94                 | ' return r
00f94     0F C3 01 F6 | 	mov	result1, local37
00f98     E1 EC 01 F6 | 	mov	local12, result1
00f9c     01 00 00 FF 
00fa0     2A BA 05 F1 | 	add	objptr, ##554
00fa4     DD EC 41 FC | 	wrbyte	local12, objptr
00fa8     01 00 00 FF 
00fac     2A BA 85 F1 | 	sub	objptr, ##554
00fb0                 | '     dummy:=serialblockingread()
00fb0                 | ' 
00fb0                 | ' repeat
00fb0                 | LR__0029
00fb0                 | '   r:=serialread()
00fb0     5C 07 B0 FD | 	call	#_serialread
00fb4     E1 1E 02 F6 | 	mov	local37, result1
00fb8     FF FF 7F FF 
00fbc     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
00fc0     EC FF 9F AD |  if_e	jmp	#LR__0029
00fc4                 | ' until r<>-1
00fc4                 | ' return r
00fc4     0F C3 01 F6 | 	mov	result1, local37
00fc8     E1 EC 01 F6 | 	mov	local12, result1
00fcc     01 00 00 FF 
00fd0     30 BA 05 F1 | 	add	objptr, ##560
00fd4     DD EC 41 FC | 	wrbyte	local12, objptr
00fd8     01 00 00 FF 
00fdc     30 BA 85 F1 | 	sub	objptr, ##560
00fe0                 | '     rr:=serialblockingread()
00fe0                 | ' 
00fe0                 | ' repeat
00fe0                 | LR__0030
00fe0                 | '   r:=serialread()
00fe0     2C 07 B0 FD | 	call	#_serialread
00fe4     E1 1E 02 F6 | 	mov	local37, result1
00fe8     FF FF 7F FF 
00fec     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
00ff0     EC FF 9F AD |  if_e	jmp	#LR__0030
00ff4                 | ' until r<>-1
00ff4                 | ' return r
00ff4     0F C3 01 F6 | 	mov	result1, local37
00ff8     01 00 00 FF 
00ffc     20 BA 05 F1 | 	add	objptr, ##544
01000     DD C2 61 FC | 	wrlong	result1, objptr
01004                 | '     if rr==255
01004     E1 EC 01 F6 | 	mov	local12, result1
01008     01 00 00 FF 
0100c     20 BA 85 F1 | 	sub	objptr, ##544
01010     FF EC 0D F2 | 	cmp	local12, #255 wz
01014     38 00 90 5D |  if_ne	jmp	#LR__0031
01018                 | '      v.write(string("  Mouse wheel: "))
01018     11 00 00 FF 
0101c     33 CF 05 F6 | 	mov	arg01, ##@LR__0156
01020     01 00 00 FF 
01024     34 BA 05 F1 | 	add	objptr, ##564
01028     48 09 B0 FD | 	call	#_Hn007_20210302_write
0102c                 | '      v.writeln(v.inttostr(mousewheel))
0102c     0A BA 85 F1 | 	sub	objptr, #10
01030     DD CE C1 FA | 	rdbyte	arg01, objptr
01034     0A BA 05 F1 | 	add	objptr, #10
01038     18 0C B0 FD | 	call	#_Hn007_20210302_inttostr
0103c     E1 08 02 F6 | 	mov	local26, result1
01040     04 CF 01 F6 | 	mov	arg01, local26
01044     D0 0A B0 FD | 	call	#_Hn007_20210302_writeln
01048     01 00 00 FF 
0104c     34 BA 85 F1 | 	sub	objptr, ##564
01050                 | LR__0031
01050                 | LR__0032
01050                 | ' 
01050                 | '   if rr==$34   'mousekey
01050     01 00 00 FF 
01054     20 BA 05 F1 | 	add	objptr, ##544
01058     DD EC 01 FB | 	rdlong	local12, objptr
0105c     01 00 00 FF 
01060     20 BA 85 F1 | 	sub	objptr, ##544
01064     34 EC 0D F2 | 	cmp	local12, #52 wz
01068     D0 00 90 5D |  if_ne	jmp	#LR__0037
0106c                 | '     mousekey:=serialblockingread()
0106c                 | ' 
0106c                 | ' repeat
0106c                 | LR__0033
0106c                 | '   r:=serialread()
0106c     A0 06 B0 FD | 	call	#_serialread
01070     E1 1E 02 F6 | 	mov	local37, result1
01074     FF FF 7F FF 
01078     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
0107c     EC FF 9F AD |  if_e	jmp	#LR__0033
01080                 | ' until r<>-1
01080                 | ' return r
01080     0F C3 01 F6 | 	mov	result1, local37
01084     E1 EC 01 F6 | 	mov	local12, result1
01088     01 00 00 FF 
0108c     2B BA 05 F1 | 	add	objptr, ##555
01090     DD EC 41 FC | 	wrbyte	local12, objptr
01094     01 00 00 FF 
01098     2B BA 85 F1 | 	sub	objptr, ##555
0109c                 | '     dummy:=serialblockingread()
0109c                 | ' 
0109c                 | ' repeat
0109c                 | LR__0034
0109c                 | '   r:=serialread()
0109c     70 06 B0 FD | 	call	#_serialread
010a0     E1 1E 02 F6 | 	mov	local37, result1
010a4     FF FF 7F FF 
010a8     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
010ac     EC FF 9F AD |  if_e	jmp	#LR__0034
010b0                 | ' until r<>-1
010b0                 | ' return r
010b0     0F C3 01 F6 | 	mov	result1, local37
010b4     E1 EC 01 F6 | 	mov	local12, result1
010b8     01 00 00 FF 
010bc     30 BA 05 F1 | 	add	objptr, ##560
010c0     DD EC 41 FC | 	wrbyte	local12, objptr
010c4     01 00 00 FF 
010c8     30 BA 85 F1 | 	sub	objptr, ##560
010cc                 | '     rr:=serialblockingread()
010cc                 | ' 
010cc                 | ' repeat
010cc                 | LR__0035
010cc                 | '   r:=serialread()
010cc     40 06 B0 FD | 	call	#_serialread
010d0     E1 1E 02 F6 | 	mov	local37, result1
010d4     FF FF 7F FF 
010d8     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
010dc     EC FF 9F AD |  if_e	jmp	#LR__0035
010e0                 | ' until r<>-1
010e0                 | ' return r
010e0     0F C3 01 F6 | 	mov	result1, local37
010e4     01 00 00 FF 
010e8     20 BA 05 F1 | 	add	objptr, ##544
010ec     DD C2 61 FC | 	wrlong	result1, objptr
010f0                 | '     if rr==255
010f0     E1 EC 01 F6 | 	mov	local12, result1
010f4     01 00 00 FF 
010f8     20 BA 85 F1 | 	sub	objptr, ##544
010fc     FF EC 0D F2 | 	cmp	local12, #255 wz
01100     38 00 90 5D |  if_ne	jmp	#LR__0036
01104                 | '      v.write(string("  Mouse key pressed: "))
01104     11 00 00 FF 
01108     43 CF 05 F6 | 	mov	arg01, ##@LR__0157
0110c     01 00 00 FF 
01110     34 BA 05 F1 | 	add	objptr, ##564
01114     5C 08 B0 FD | 	call	#_Hn007_20210302_write
01118                 | '      v.writeln(v.inttostr(mousekey))
01118     09 BA 85 F1 | 	sub	objptr, #9
0111c     DD CE C1 FA | 	rdbyte	arg01, objptr
01120     09 BA 05 F1 | 	add	objptr, #9
01124     2C 0B B0 FD | 	call	#_Hn007_20210302_inttostr
01128     E1 08 02 F6 | 	mov	local26, result1
0112c     04 CF 01 F6 | 	mov	arg01, local26
01130     E4 09 B0 FD | 	call	#_Hn007_20210302_writeln
01134     01 00 00 FF 
01138     34 BA 85 F1 | 	sub	objptr, ##564
0113c                 | LR__0036
0113c                 | LR__0037
0113c                 | ' 
0113c                 | '   if rr==$35   'mouseclick
0113c     01 00 00 FF 
01140     20 BA 05 F1 | 	add	objptr, ##544
01144     DD EC 01 FB | 	rdlong	local12, objptr
01148     01 00 00 FF 
0114c     20 BA 85 F1 | 	sub	objptr, ##544
01150     35 EC 0D F2 | 	cmp	local12, #53 wz
01154     B4 00 90 5D |  if_ne	jmp	#LR__0042
01158                 | '     dummy:=serialblockingread()
01158                 | ' 
01158                 | ' repeat
01158                 | LR__0038
01158                 | '   r:=serialread()
01158     B4 05 B0 FD | 	call	#_serialread
0115c     E1 1E 02 F6 | 	mov	local37, result1
01160     FF FF 7F FF 
01164     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01168     EC FF 9F AD |  if_e	jmp	#LR__0038
0116c                 | ' until r<>-1
0116c                 | ' return r
0116c     0F C3 01 F6 | 	mov	result1, local37
01170     E1 EC 01 F6 | 	mov	local12, result1
01174     01 00 00 FF 
01178     30 BA 05 F1 | 	add	objptr, ##560
0117c     DD EC 41 FC | 	wrbyte	local12, objptr
01180     01 00 00 FF 
01184     30 BA 85 F1 | 	sub	objptr, ##560
01188                 | '     dummy:=serialblockingread()
01188                 | ' 
01188                 | ' repeat
01188                 | LR__0039
01188                 | '   r:=serialread()
01188     84 05 B0 FD | 	call	#_serialread
0118c     E1 1E 02 F6 | 	mov	local37, result1
01190     FF FF 7F FF 
01194     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01198     EC FF 9F AD |  if_e	jmp	#LR__0039
0119c                 | ' until r<>-1
0119c                 | ' return r
0119c     0F C3 01 F6 | 	mov	result1, local37
011a0     E1 EC 01 F6 | 	mov	local12, result1
011a4     01 00 00 FF 
011a8     30 BA 05 F1 | 	add	objptr, ##560
011ac     DD EC 41 FC | 	wrbyte	local12, objptr
011b0     01 00 00 FF 
011b4     30 BA 85 F1 | 	sub	objptr, ##560
011b8                 | '     rr:=serialblockingread()
011b8                 | ' 
011b8                 | ' repeat
011b8                 | LR__0040
011b8                 | '   r:=serialread()
011b8     54 05 B0 FD | 	call	#_serialread
011bc     E1 1E 02 F6 | 	mov	local37, result1
011c0     FF FF 7F FF 
011c4     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
011c8     EC FF 9F AD |  if_e	jmp	#LR__0040
011cc                 | ' until r<>-1
011cc                 | ' return r
011cc     0F C3 01 F6 | 	mov	result1, local37
011d0     01 00 00 FF 
011d4     20 BA 05 F1 | 	add	objptr, ##544
011d8     DD C2 61 FC | 	wrlong	result1, objptr
011dc                 | '     if rr==255
011dc     E1 EC 01 F6 | 	mov	local12, result1
011e0     01 00 00 FF 
011e4     20 BA 85 F1 | 	sub	objptr, ##544
011e8     FF EC 0D F2 | 	cmp	local12, #255 wz
011ec     1C 00 90 5D |  if_ne	jmp	#LR__0041
011f0                 | '      v.writeln(string("  Mouse clicked"))
011f0     11 00 00 FF 
011f4     59 CF 05 F6 | 	mov	arg01, ##@LR__0158
011f8     01 00 00 FF 
011fc     34 BA 05 F1 | 	add	objptr, ##564
01200     14 09 B0 FD | 	call	#_Hn007_20210302_writeln
01204     01 00 00 FF 
01208     34 BA 85 F1 | 	sub	objptr, ##564
0120c                 | LR__0041
0120c                 | LR__0042
0120c                 | ' 
0120c                 | '   if rr==$36   'mouseclick
0120c     01 00 00 FF 
01210     20 BA 05 F1 | 	add	objptr, ##544
01214     DD EC 01 FB | 	rdlong	local12, objptr
01218     01 00 00 FF 
0121c     20 BA 85 F1 | 	sub	objptr, ##544
01220     36 EC 0D F2 | 	cmp	local12, #54 wz
01224     B4 00 90 5D |  if_ne	jmp	#LR__0047
01228                 | '     dummy:=serialblockingread()
01228                 | ' 
01228                 | ' repeat
01228                 | LR__0043
01228                 | '   r:=serialread()
01228     E4 04 B0 FD | 	call	#_serialread
0122c     E1 1E 02 F6 | 	mov	local37, result1
01230     FF FF 7F FF 
01234     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01238     EC FF 9F AD |  if_e	jmp	#LR__0043
0123c                 | ' until r<>-1
0123c                 | ' return r
0123c     0F C3 01 F6 | 	mov	result1, local37
01240     E1 EC 01 F6 | 	mov	local12, result1
01244     01 00 00 FF 
01248     30 BA 05 F1 | 	add	objptr, ##560
0124c     DD EC 41 FC | 	wrbyte	local12, objptr
01250     01 00 00 FF 
01254     30 BA 85 F1 | 	sub	objptr, ##560
01258                 | '     dummy:=serialblockingread()
01258                 | ' 
01258                 | ' repeat
01258                 | LR__0044
01258                 | '   r:=serialread()
01258     B4 04 B0 FD | 	call	#_serialread
0125c     E1 1E 02 F6 | 	mov	local37, result1
01260     FF FF 7F FF 
01264     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01268     EC FF 9F AD |  if_e	jmp	#LR__0044
0126c                 | ' until r<>-1
0126c                 | ' return r
0126c     0F C3 01 F6 | 	mov	result1, local37
01270     E1 EC 01 F6 | 	mov	local12, result1
01274     01 00 00 FF 
01278     30 BA 05 F1 | 	add	objptr, ##560
0127c     DD EC 41 FC | 	wrbyte	local12, objptr
01280     01 00 00 FF 
01284     30 BA 85 F1 | 	sub	objptr, ##560
01288                 | '     rr:=serialblockingread()
01288                 | ' 
01288                 | ' repeat
01288                 | LR__0045
01288                 | '   r:=serialread()
01288     84 04 B0 FD | 	call	#_serialread
0128c     E1 1E 02 F6 | 	mov	local37, result1
01290     FF FF 7F FF 
01294     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01298     EC FF 9F AD |  if_e	jmp	#LR__0045
0129c                 | ' until r<>-1
0129c                 | ' return r
0129c     0F C3 01 F6 | 	mov	result1, local37
012a0     01 00 00 FF 
012a4     20 BA 05 F1 | 	add	objptr, ##544
012a8     DD C2 61 FC | 	wrlong	result1, objptr
012ac                 | '     if rr==255
012ac     E1 EC 01 F6 | 	mov	local12, result1
012b0     01 00 00 FF 
012b4     20 BA 85 F1 | 	sub	objptr, ##544
012b8     FF EC 0D F2 | 	cmp	local12, #255 wz
012bc     1C 00 90 5D |  if_ne	jmp	#LR__0046
012c0                 | '      v.writeln(string("  Mouse double clicked"))
012c0     11 00 00 FF 
012c4     69 CF 05 F6 | 	mov	arg01, ##@LR__0159
012c8     01 00 00 FF 
012cc     34 BA 05 F1 | 	add	objptr, ##564
012d0     44 08 B0 FD | 	call	#_Hn007_20210302_writeln
012d4     01 00 00 FF 
012d8     34 BA 85 F1 | 	sub	objptr, ##564
012dc                 | LR__0046
012dc                 | LR__0047
012dc                 | ' 
012dc                 | '   if rr==$37   'key released
012dc     01 00 00 FF 
012e0     20 BA 05 F1 | 	add	objptr, ##544
012e4     DD EC 01 FB | 	rdlong	local12, objptr
012e8     01 00 00 FF 
012ec     20 BA 85 F1 | 	sub	objptr, ##544
012f0     37 EC 0D F2 | 	cmp	local12, #55 wz
012f4     DC 00 90 5D |  if_ne	jmp	#LR__0052
012f8                 | '     scancode:=serialblockingread()
012f8                 | ' 
012f8                 | ' repeat
012f8                 | LR__0048
012f8                 | '   r:=serialread()
012f8     14 04 B0 FD | 	call	#_serialread
012fc     E1 1E 02 F6 | 	mov	local37, result1
01300     FF FF 7F FF 
01304     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01308     EC FF 9F AD |  if_e	jmp	#LR__0048
0130c                 | ' until r<>-1
0130c                 | ' return r
0130c     0F C3 01 F6 | 	mov	result1, local37
01310     E1 EC 01 F6 | 	mov	local12, result1
01314     01 00 00 FF 
01318     29 BA 05 F1 | 	add	objptr, ##553
0131c     DD EC 41 FC | 	wrbyte	local12, objptr
01320     01 00 00 FF 
01324     29 BA 85 F1 | 	sub	objptr, ##553
01328                 | '     dummy:=serialblockingread()
01328                 | ' 
01328                 | ' repeat
01328                 | LR__0049
01328                 | '   r:=serialread()
01328     E4 03 B0 FD | 	call	#_serialread
0132c     E1 1E 02 F6 | 	mov	local37, result1
01330     FF FF 7F FF 
01334     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01338     EC FF 9F AD |  if_e	jmp	#LR__0049
0133c                 | ' until r<>-1
0133c                 | ' return r
0133c     0F C3 01 F6 | 	mov	result1, local37
01340     E1 EC 01 F6 | 	mov	local12, result1
01344     01 00 00 FF 
01348     30 BA 05 F1 | 	add	objptr, ##560
0134c     DD EC 41 FC | 	wrbyte	local12, objptr
01350     01 00 00 FF 
01354     30 BA 85 F1 | 	sub	objptr, ##560
01358                 | '     rr:=serialblockingread()
01358                 | ' 
01358                 | ' repeat
01358                 | LR__0050
01358                 | '   r:=serialread()
01358     B4 03 B0 FD | 	call	#_serialread
0135c     E1 1E 02 F6 | 	mov	local37, result1
01360     FF FF 7F FF 
01364     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01368     EC FF 9F AD |  if_e	jmp	#LR__0050
0136c                 | ' until r<>-1
0136c                 | ' return r
0136c     0F C3 01 F6 | 	mov	result1, local37
01370     01 00 00 FF 
01374     20 BA 05 F1 | 	add	objptr, ##544
01378     DD C2 61 FC | 	wrlong	result1, objptr
0137c                 | '     if rr==255
0137c     E1 EC 01 F6 | 	mov	local12, result1
01380     01 00 00 FF 
01384     20 BA 85 F1 | 	sub	objptr, ##544
01388     FF EC 0D F2 | 	cmp	local12, #255 wz
0138c     44 00 90 5D |  if_ne	jmp	#LR__0051
01390                 | '      v.write(string("  Key scancode "))
01390     11 00 00 FF 
01394     80 CF 05 F6 | 	mov	arg01, ##@LR__0160
01398     01 00 00 FF 
0139c     34 BA 05 F1 | 	add	objptr, ##564
013a0     D0 05 B0 FD | 	call	#_Hn007_20210302_write
013a4                 | '      v.write(v.inttostr(scancode))
013a4     0B BA 85 F1 | 	sub	objptr, #11
013a8     DD CE C1 FA | 	rdbyte	arg01, objptr
013ac     0B BA 05 F1 | 	add	objptr, #11
013b0     A0 08 B0 FD | 	call	#_Hn007_20210302_inttostr
013b4     E1 08 02 F6 | 	mov	local26, result1
013b8     04 CF 01 F6 | 	mov	arg01, local26
013bc     B4 05 B0 FD | 	call	#_Hn007_20210302_write
013c0                 | '      v.writeln(string(" released"))
013c0     11 00 00 FF 
013c4     90 CF 05 F6 | 	mov	arg01, ##@LR__0161
013c8     4C 07 B0 FD | 	call	#_Hn007_20210302_writeln
013cc     01 00 00 FF 
013d0     34 BA 85 F1 | 	sub	objptr, ##564
013d4                 | LR__0051
013d4                 | LR__0052
013d4                 | ' 
013d4                 | '   if rr==$38   'key pressed
013d4     01 00 00 FF 
013d8     20 BA 05 F1 | 	add	objptr, ##544
013dc     DD EC 01 FB | 	rdlong	local12, objptr
013e0     01 00 00 FF 
013e4     20 BA 85 F1 | 	sub	objptr, ##544
013e8     38 EC 0D F2 | 	cmp	local12, #56 wz
013ec     00 01 90 5D |  if_ne	jmp	#LR__0057
013f0                 | '     scancode:=serialblockingread()
013f0                 | ' 
013f0                 | ' repeat
013f0                 | LR__0053
013f0                 | '   r:=serialread()
013f0     1C 03 B0 FD | 	call	#_serialread
013f4     E1 1E 02 F6 | 	mov	local37, result1
013f8     FF FF 7F FF 
013fc     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01400     EC FF 9F AD |  if_e	jmp	#LR__0053
01404                 | ' until r<>-1
01404                 | ' return r
01404     0F C3 01 F6 | 	mov	result1, local37
01408     E1 EC 01 F6 | 	mov	local12, result1
0140c     01 00 00 FF 
01410     29 BA 05 F1 | 	add	objptr, ##553
01414     DD EC 41 FC | 	wrbyte	local12, objptr
01418     01 00 00 FF 
0141c     29 BA 85 F1 | 	sub	objptr, ##553
01420                 | '     charcode:=serialblockingread()
01420                 | ' 
01420                 | ' repeat
01420                 | LR__0054
01420                 | '   r:=serialread()
01420     EC 02 B0 FD | 	call	#_serialread
01424     E1 1E 02 F6 | 	mov	local37, result1
01428     FF FF 7F FF 
0142c     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01430     EC FF 9F AD |  if_e	jmp	#LR__0054
01434                 | ' until r<>-1
01434                 | ' return r
01434     0F C3 01 F6 | 	mov	result1, local37
01438     E1 EC 01 F6 | 	mov	local12, result1
0143c     01 00 00 FF 
01440     28 BA 05 F1 | 	add	objptr, ##552
01444     DD EC 41 FC | 	wrbyte	local12, objptr
01448     01 00 00 FF 
0144c     28 BA 85 F1 | 	sub	objptr, ##552
01450                 | '     rr:=serialblockingread()
01450                 | ' 
01450                 | ' repeat
01450                 | LR__0055
01450                 | '   r:=serialread()
01450     BC 02 B0 FD | 	call	#_serialread
01454     E1 1E 02 F6 | 	mov	local37, result1
01458     FF FF 7F FF 
0145c     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
01460     EC FF 9F AD |  if_e	jmp	#LR__0055
01464                 | ' until r<>-1
01464                 | ' return r
01464     0F C3 01 F6 | 	mov	result1, local37
01468     01 00 00 FF 
0146c     20 BA 05 F1 | 	add	objptr, ##544
01470     DD C2 61 FC | 	wrlong	result1, objptr
01474                 | '     if rr==255
01474     E1 EC 01 F6 | 	mov	local12, result1
01478     01 00 00 FF 
0147c     20 BA 85 F1 | 	sub	objptr, ##544
01480     FF EC 0D F2 | 	cmp	local12, #255 wz
01484     68 00 90 5D |  if_ne	jmp	#LR__0056
01488                 | '      v.write(string("  Key scancode "))
01488     11 00 00 FF 
0148c     9A CF 05 F6 | 	mov	arg01, ##@LR__0162
01490     01 00 00 FF 
01494     34 BA 05 F1 | 	add	objptr, ##564
01498     D8 04 B0 FD | 	call	#_Hn007_20210302_write
0149c                 | '      v.write(v.inttostr(scancode))
0149c     0B BA 85 F1 | 	sub	objptr, #11
014a0     DD CE C1 FA | 	rdbyte	arg01, objptr
014a4     0B BA 05 F1 | 	add	objptr, #11
014a8     A8 07 B0 FD | 	call	#_Hn007_20210302_inttostr
014ac     E1 CE 01 F6 | 	mov	arg01, result1
014b0     C0 04 B0 FD | 	call	#_Hn007_20210302_write
014b4                 | '      v.write(string(", charcode "))
014b4     11 00 00 FF 
014b8     AA CF 05 F6 | 	mov	arg01, ##@LR__0163
014bc     B4 04 B0 FD | 	call	#_Hn007_20210302_write
014c0                 | '      v.write(v.inttostr(charcode))
014c0     0C BA 85 F1 | 	sub	objptr, #12
014c4     DD CE C1 FA | 	rdbyte	arg01, objptr
014c8     0C BA 05 F1 | 	add	objptr, #12
014cc     84 07 B0 FD | 	call	#_Hn007_20210302_inttostr
014d0     E1 08 02 F6 | 	mov	local26, result1
014d4     04 CF 01 F6 | 	mov	arg01, local26
014d8     98 04 B0 FD | 	call	#_Hn007_20210302_write
014dc                 | '      v.writeln(string(" pressed"))
014dc     11 00 00 FF 
014e0     B6 CF 05 F6 | 	mov	arg01, ##@LR__0164
014e4     30 06 B0 FD | 	call	#_Hn007_20210302_writeln
014e8     01 00 00 FF 
014ec     34 BA 85 F1 | 	sub	objptr, ##564
014f0                 | LR__0056
014f0                 | LR__0057
014f0                 | ' 
014f0                 | '   if rr==$39   'modifier pressed
014f0     01 00 00 FF 
014f4     20 BA 05 F1 | 	add	objptr, ##544
014f8     DD EC 01 FB | 	rdlong	local12, objptr
014fc     01 00 00 FF 
01500     20 BA 85 F1 | 	sub	objptr, ##544
01504     39 EC 0D F2 | 	cmp	local12, #57 wz
01508     5C F6 9F 5D |  if_ne	jmp	#LR__0008
0150c                 | '     scancode:=serialblockingread()
0150c                 | ' 
0150c                 | ' repeat
0150c                 | LR__0058
0150c                 | '   r:=serialread()
0150c     00 02 B0 FD | 	call	#_serialread
01510     E1 1E 02 F6 | 	mov	local37, result1
01514     FF FF 7F FF 
01518     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
0151c     EC FF 9F AD |  if_e	jmp	#LR__0058
01520                 | ' until r<>-1
01520                 | ' return r
01520     0F C3 01 F6 | 	mov	result1, local37
01524     E1 EC 01 F6 | 	mov	local12, result1
01528     01 00 00 FF 
0152c     29 BA 05 F1 | 	add	objptr, ##553
01530     DD EC 41 FC | 	wrbyte	local12, objptr
01534     01 00 00 FF 
01538     29 BA 85 F1 | 	sub	objptr, ##553
0153c                 | '     dummy:=serialblockingread()
0153c                 | ' 
0153c                 | ' repeat
0153c                 | LR__0059
0153c                 | '   r:=serialread()
0153c     D0 01 B0 FD | 	call	#_serialread
01540     E1 1E 02 F6 | 	mov	local37, result1
01544     FF FF 7F FF 
01548     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
0154c     EC FF 9F AD |  if_e	jmp	#LR__0059
01550                 | ' until r<>-1
01550                 | ' return r
01550     0F C3 01 F6 | 	mov	result1, local37
01554     E1 EC 01 F6 | 	mov	local12, result1
01558     01 00 00 FF 
0155c     30 BA 05 F1 | 	add	objptr, ##560
01560     DD EC 41 FC | 	wrbyte	local12, objptr
01564     01 00 00 FF 
01568     30 BA 85 F1 | 	sub	objptr, ##560
0156c                 | '     rr:=serialblockingread()
0156c                 | ' 
0156c                 | ' repeat
0156c                 | LR__0060
0156c                 | '   r:=serialread()
0156c     A0 01 B0 FD | 	call	#_serialread
01570     E1 1E 02 F6 | 	mov	local37, result1
01574     FF FF 7F FF 
01578     FF 1F 0E F2 | 	cmp	local37, ##-1 wz
0157c     EC FF 9F AD |  if_e	jmp	#LR__0060
01580                 | ' until r<>-1
01580                 | ' return r
01580     0F C3 01 F6 | 	mov	result1, local37
01584     01 00 00 FF 
01588     20 BA 05 F1 | 	add	objptr, ##544
0158c     DD C2 61 FC | 	wrlong	result1, objptr
01590                 | '     if rr==255
01590     E1 EC 01 F6 | 	mov	local12, result1
01594     01 00 00 FF 
01598     20 BA 85 F1 | 	sub	objptr, ##544
0159c     FF EC 0D F2 | 	cmp	local12, #255 wz
015a0     C4 F5 9F 5D |  if_ne	jmp	#LR__0008
015a4                 | '       if scancode>0
015a4     01 00 00 FF 
015a8     29 BA 05 F1 | 	add	objptr, ##553
015ac     DD EC C1 FA | 	rdbyte	local12, objptr
015b0     01 00 00 FF 
015b4     29 BA 85 F1 | 	sub	objptr, ##553
015b8     00 EC 5D F2 | 	cmps	local12, #0 wcz
015bc     48 00 90 ED |  if_be	jmp	#LR__0061
015c0                 | '         v.write(string("  Key modifier "))
015c0     11 00 00 FF 
015c4     BF CF 05 F6 | 	mov	arg01, ##@LR__0165
015c8     01 00 00 FF 
015cc     34 BA 05 F1 | 	add	objptr, ##564
015d0     A0 03 B0 FD | 	call	#_Hn007_20210302_write
015d4                 | '         v.write(v.inttostr(scancode))
015d4     0B BA 85 F1 | 	sub	objptr, #11
015d8     DD CE C1 FA | 	rdbyte	arg01, objptr
015dc     0B BA 05 F1 | 	add	objptr, #11
015e0     70 06 B0 FD | 	call	#_Hn007_20210302_inttostr
015e4     E1 08 02 F6 | 	mov	local26, result1
015e8     04 CF 01 F6 | 	mov	arg01, local26
015ec     84 03 B0 FD | 	call	#_Hn007_20210302_write
015f0                 | '         v.writeln(string(" pressed"))
015f0     11 00 00 FF 
015f4     CF CF 05 F6 | 	mov	arg01, ##@LR__0166
015f8     1C 05 B0 FD | 	call	#_Hn007_20210302_writeln
015fc     01 00 00 FF 
01600     34 BA 85 F1 | 	sub	objptr, ##564
01604                 | '       else
01604     60 F5 9F FD | 	jmp	#LR__0008
01608                 | LR__0061
01608                 | '         v.writeln(string("  Modifiers released"))
01608     11 00 00 FF 
0160c     D8 CF 05 F6 | 	mov	arg01, ##@LR__0167
01610     01 00 00 FF 
01614     34 BA 05 F1 | 	add	objptr, ##564
01618     FC 04 B0 FD | 	call	#_Hn007_20210302_writeln
0161c     01 00 00 FF 
01620     34 BA 85 F1 | 	sub	objptr, ##564
01624     40 F5 9F FD | 	jmp	#LR__0008
01628     AF F0 03 F6 | 	mov	ptra, fp
0162c     BF 00 A0 FD | 	call	#popregs_
01630                 | _start_ret
01630     2D 00 64 FD | 	ret
01634                 | 
01634                 | ' 
01634                 | ' 
01634                 | ' pub serialcog()|q
01634                 | _serialcog
01634     08 5A 05 F6 | 	mov	COUNT_, #8
01638     B0 00 A0 FD | 	call	#pushregs_
0163c                 | ' 
0163c                 | ' serialfront:=0
0163c     00 D6 05 F6 | 	mov	local01, #0
01640     1C BB 05 F1 | 	add	objptr, #284
01644     DD 00 68 FC | 	wrlong	#0, objptr
01648                 | ' serialtail:=0
01648     04 BA 85 F1 | 	sub	objptr, #4
0164c     DD 00 68 FC | 	wrlong	#0, objptr
01650     18 BB 85 F1 | 	sub	objptr, #280
01654                 | ' 
01654                 | ' repeat
01654                 | LR__0062
01654                 | '   if serialfront<>((serialtail-1) //32)
01654     18 BB 05 F1 | 	add	objptr, #280
01658     DD D6 01 FB | 	rdlong	local01, objptr
0165c     01 D6 85 F1 | 	sub	local01, #1
01660     EB D8 51 F6 | 	abs	local02, local01 wc
01664     1F D8 05 F5 | 	and	local02, #31
01668     EC D8 61 C6 |  if_b	neg	local02, local02
0166c     04 BA 05 F1 | 	add	objptr, #4
01670     DD DA 01 FB | 	rdlong	local03, objptr
01674     1C BB 85 F1 | 	sub	objptr, #284
01678     EC DA 09 F2 | 	cmp	local03, local02 wz
0167c     D4 FF 9F AD |  if_e	jmp	#LR__0062
01680                 | '     q:=rxcheck()
01680                 | ' 
01680                 | ' '' Check for serial input
01680                 | ' '' -- returns -1 if nothing available
01680                 | ' 
01680                 | '   rxbyte := -1
01680     01 DC 65 F6 | 	neg	local04, #1
01684                 | '   check := pinr(rxp)
01684     08 BA 05 F1 | 	add	objptr, #8
01688     DD CE 01 FB | 	rdlong	arg01, objptr
0168c     08 BA 85 F1 | 	sub	objptr, #8
01690     90 0B B0 FD | 	call	#__system___pinread
01694     E1 DE 09 F6 | 	mov	local05, result1 wz
01698                 | '   if (check)
01698     18 00 90 AD |  if_e	jmp	#LR__0063
0169c                 | '     rxbyte := rdpin(rxp) >> 24
0169c     08 BA 05 F1 | 	add	objptr, #8
016a0     DD CE 01 FB | 	rdlong	arg01, objptr
016a4     08 BA 85 F1 | 	sub	objptr, #8
016a8     00 DC 05 F6 | 	mov	local04, #0
016ac     E7 DC 89 FA | 	rdpin	local04, arg01
016b0     18 DC 45 F0 | 	shr	local04, #24
016b4                 | LR__0063
016b4     EE C2 01 F6 | 	mov	result1, local04
016b8     E1 E0 01 F6 | 	mov	local06, result1
016bc                 | '     if q>=0
016bc     00 E0 5D F2 | 	cmps	local06, #0 wcz
016c0     90 FF 9F CD |  if_b	jmp	#LR__0062
016c4     1C BB 05 F1 | 	add	objptr, #284
016c8     DD E2 01 FB | 	rdlong	local07, objptr
016cc     02 E2 65 F0 | 	shl	local07, #2
016d0     04 BB 85 F1 | 	sub	objptr, #260
016d4     DD E2 01 F1 | 	add	local07, objptr
016d8                 | '      serialbuf[serialfront]:=q
016d8     F1 E0 61 FC | 	wrlong	local06, local07
016dc                 | '      serialfront+=1
016dc     04 BB 05 F1 | 	add	objptr, #260
016e0     DD E4 01 FB | 	rdlong	local08, objptr
016e4     01 E4 05 F1 | 	add	local08, #1
016e8     DD E4 61 FC | 	wrlong	local08, objptr
016ec                 | '      serialfront:=serialfront // 32
016ec     F2 D6 51 F6 | 	abs	local01, local08 wc
016f0     1F D6 05 F5 | 	and	local01, #31
016f4     EB D6 61 C6 |  if_b	neg	local01, local01
016f8     DD D6 61 FC | 	wrlong	local01, objptr
016fc     1C BB 85 F1 | 	sub	objptr, #284
01700     50 FF 9F FD | 	jmp	#LR__0062
01704     AF F0 03 F6 | 	mov	ptra, fp
01708     BF 00 A0 FD | 	call	#popregs_
0170c                 | _serialcog_ret
0170c     2D 00 64 FD | 	ret
01710                 | 
01710                 | ' 
01710                 | ' pub serialread():r
01710                 | _serialread
01710                 | ' 
01710                 | ' if serialfront<>serialtail
01710     1C BB 05 F1 | 	add	objptr, #284
01714     DD C4 01 FB | 	rdlong	_var01, objptr
01718     04 BA 85 F1 | 	sub	objptr, #4
0171c     DD C6 01 FB | 	rdlong	_var02, objptr
01720     18 BB 85 F1 | 	sub	objptr, #280
01724     E3 C4 09 F2 | 	cmp	_var01, _var02 wz
01728     3C 00 90 AD |  if_e	jmp	#LR__0064
0172c     18 BB 05 F1 | 	add	objptr, #280
01730     DD C8 01 FB | 	rdlong	_var03, objptr
01734     02 C8 65 F0 | 	shl	_var03, #2
01738     00 BB 85 F1 | 	sub	objptr, #256
0173c     DD C8 01 F1 | 	add	_var03, objptr
01740                 | '   r:=serialbuf[serialtail]
01740     E4 CA 01 FB | 	rdlong	_var04, _var03
01744     00 BB 05 F1 | 	add	objptr, #256
01748     DD CC 01 FB | 	rdlong	_var05, objptr
0174c     01 CC 05 F1 | 	add	_var05, #1
01750     E6 C4 51 F6 | 	abs	_var01, _var05 wc
01754     1F C4 05 F5 | 	and	_var01, #31
01758     E2 C4 61 C6 |  if_b	neg	_var01, _var01
0175c                 | '   serialtail:=(serialtail+1)//32
0175c     DD C4 61 FC | 	wrlong	_var01, objptr
01760     18 BB 85 F1 | 	sub	objptr, #280
01764                 | ' else
01764     04 00 90 FD | 	jmp	#LR__0065
01768                 | LR__0064
01768                 | '   r:=-1
01768     01 CA 65 F6 | 	neg	_var04, #1
0176c                 | LR__0065
0176c                 | ' return r
0176c     E5 C2 01 F6 | 	mov	result1, _var04
01770                 | _serialread_ret
01770     2D 00 64 FD | 	ret
01774                 | 
01774                 | ' 
01774                 | ' 
01774                 | ' 
01774                 | ' ''---------------------- Serial functions from jm_serial.spin2
01774                 | ' 
01774                 | ' pub serial_start(rxpin2, txpin2, baud) | bitmode
01774                 | _serial_start
01774     05 5A 05 F6 | 	mov	COUNT_, #5
01778     B0 00 A0 FD | 	call	#pushregs_
0177c     E7 D6 01 F6 | 	mov	local01, arg01
01780     E8 D8 01 F6 | 	mov	local02, arg02
01784                 | ' 
01784                 | ' '' Start simple serial coms on rxpin and txpin at baud
01784                 | ' 
01784                 | ' '  longmove(@rxp, @rxpin2, 2)                                     ' save pins
01784                 | ' 
01784                 | '   rxp:=rxpin2
01784     08 BA 05 F1 | 	add	objptr, #8
01788     DD D6 61 FC | 	wrlong	local01, objptr
0178c                 | '   txp:=txpin2
0178c     04 BA 05 F1 | 	add	objptr, #4
01790     DD D8 61 FC | 	wrlong	local02, objptr
01794     0C BA 85 F1 | 	sub	objptr, #12
01798                 | ' 
01798                 | '   bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
01798     14 CE 05 FB | 	rdlong	arg01, #20
0179c     10 D0 C5 F9 | 	decod	arg02, #16
017a0     E8 CE 01 FD | 	qmul	arg01, arg02
017a4     19 DA 61 FD | 	getqy	local03
017a8     18 DC 61 FD | 	getqx	local04
017ac     28 DA 61 FD | 	setq	local03
017b0     E9 DC 11 FD | 	qdiv	local04, arg03
017b4     18 C2 61 FD | 	getqx	result1
017b8     E1 DE 01 F6 | 	mov	local05, result1
017bc     FE FF 7F FF 
017c0     00 DE 05 F5 | 	and	local05, ##-1024
017c4                 | '   bitmode |= 7                                                  ' set bits (8)
017c4     07 DE 45 F5 | 	or	local05, #7
017c8                 | ' 
017c8                 | '   org
017c8     54 E8 9F FE | 	loc	pa,	#(@LR__0067-@LR__0066)
017cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
017d0                 | LR__0066
017d0 000             | 	org	0
017d0 000 50 D6 61 FD | 	fltl	local01
017d4 001 EB 7C 08 FC | 	wrpin	#62, local01
017d8 002 EB DE 11 FC | 	wxpin	local05, local01
017dc 003 58 D6 61 FD | 	drvl	local01
017e0 004 50 D8 61 FD | 	fltl	local02
017e4 005 EC F8 08 FC | 	wrpin	#124, local02
017e8 006 EC DE 11 FC | 	wxpin	local05, local02
017ec 007 58 D8 61 FD | 	drvl	local02
017f0 008             | LR__0067
017f0                 | 	orgh
017f0     AF F0 03 F6 | 	mov	ptra, fp
017f4     BF 00 A0 FD | 	call	#popregs_
017f8                 | _serial_start_ret
017f8     2D 00 64 FD | 	ret
017fc                 | 
017fc                 | ' 
017fc                 | ' pub midi_start(mrxpin2, mtxpin2) | bitmode
017fc                 | _midi_start
017fc     05 5A 05 F6 | 	mov	COUNT_, #5
01800     B0 00 A0 FD | 	call	#pushregs_
01804     E7 D6 01 F6 | 	mov	local01, arg01
01808     E8 D8 01 F6 | 	mov	local02, arg02
0180c                 | ' 
0180c                 | ' '' Start simple serial coms on rxpin and txpin at baud
0180c                 | ' 
0180c                 | ' '  longmove(@rxp, @rxpin2, 2)                                     ' save pins
0180c                 | ' 
0180c                 | '   mrxp:=mrxpin2
0180c     10 BA 05 F1 | 	add	objptr, #16
01810     DD D6 61 FC | 	wrlong	local01, objptr
01814                 | '   mtxp:=mtxpin2
01814     04 BA 05 F1 | 	add	objptr, #4
01818     DD D8 61 FC | 	wrlong	local02, objptr
0181c     14 BA 85 F1 | 	sub	objptr, #20
01820                 | ' 
01820                 | '   bitmode := muldiv64(clkfreq, $1_0000, 31250) & $FFFFFC00       ' set bit timing
01820     14 CE 05 FB | 	rdlong	arg01, #20
01824     10 D0 C5 F9 | 	decod	arg02, #16
01828     E8 CE 01 FD | 	qmul	arg01, arg02
0182c     19 DA 61 FD | 	getqy	local03
01830     18 DC 61 FD | 	getqx	local04
01834     28 DA 61 FD | 	setq	local03
01838     3D 00 00 FF 
0183c     12 DC 15 FD | 	qdiv	local04, ##31250
01840     18 C2 61 FD | 	getqx	result1
01844     E1 DE 01 F6 | 	mov	local05, result1
01848     FE FF 7F FF 
0184c     00 DE 05 F5 | 	and	local05, ##-1024
01850                 | '   bitmode |= 7                                                  ' set bits (8)
01850     07 DE 45 F5 | 	or	local05, #7
01854                 | ' 
01854                 | '   org
01854     C8 E7 9F FE | 	loc	pa,	#(@LR__0069-@LR__0068)
01858     93 00 A0 FD | 	call	#FCACHE_LOAD_
0185c                 | LR__0068
0185c 000             | 	org	0
0185c 000 50 D6 61 FD | 	fltl	local01
01860 001 EB 7C 08 FC | 	wrpin	#62, local01
01864 002 EB DE 11 FC | 	wxpin	local05, local01
01868 003 58 D6 61 FD | 	drvl	local01
0186c 004 50 D8 61 FD | 	fltl	local02
01870 005 EC F8 08 FC | 	wrpin	#124, local02
01874 006 EC DE 11 FC | 	wxpin	local05, local02
01878 007 58 D8 61 FD | 	drvl	local02
0187c 008             | LR__0069
0187c                 | 	orgh
0187c     AF F0 03 F6 | 	mov	ptra, fp
01880     BF 00 A0 FD | 	call	#popregs_
01884                 | _midi_start_ret
01884     2D 00 64 FD | 	ret
01888                 | 
01888                 | '   until (rxbyte >= 0)
01888                 | ' 
01888                 | ' 
01888                 | ' pub tx(b)
01888                 | _tx
01888     01 5A 05 F6 | 	mov	COUNT_, #1
0188c     B0 00 A0 FD | 	call	#pushregs_
01890                 | ' 
01890                 | ' '' Emit byte
01890                 | ' 
01890                 | '   wypin(txp, b)
01890     0C BA 05 F1 | 	add	objptr, #12
01894     DD D6 01 FB | 	rdlong	local01, objptr
01898     0C BA 85 F1 | 	sub	objptr, #12
0189c     E7 D0 01 F6 | 	mov	arg02, arg01
018a0     EB D0 21 FC | 	wypin	arg02, local01
018a4                 | '   txflush()
018a4                 | ' 
018a4                 | ' '' Wait until last byte has finished
018a4                 | ' 
018a4                 | '   repeat
018a4                 | LR__0070
018a4                 | '     check := pinr(txp)
018a4     0C BA 05 F1 | 	add	objptr, #12
018a8     DD CE 01 FB | 	rdlong	arg01, objptr
018ac     0C BA 85 F1 | 	sub	objptr, #12
018b0     70 09 B0 FD | 	call	#__system___pinread
018b4     00 C2 0D F2 | 	cmp	result1, #0 wz
018b8     E8 FF 9F AD |  if_e	jmp	#LR__0070
018bc     AF F0 03 F6 | 	mov	ptra, fp
018c0     BF 00 A0 FD | 	call	#popregs_
018c4                 | _tx_ret
018c4     2D 00 64 FD | 	ret
018c8                 | 
018c8                 | ' 
018c8                 | ' 
018c8                 | ' '*************************************************************************
018c8                 | ' '                                                                        *
018c8                 | ' '  Text functions                                                        *
018c8                 | ' '                                                                        *
018c8                 | ' '*************************************************************************
018c8                 | ' 
018c8                 | ' pub outtextxy(x,y,text) | iii
018c8                 | _Hn007_20210302_outtextxy
018c8     0B 5A 05 F6 | 	mov	COUNT_, #11
018cc     B0 00 A0 FD | 	call	#pushregs_
018d0     E7 D6 01 F6 | 	mov	local01, arg01
018d4                 | ' 
018d4                 | ' ''--------- Output a string at position x,y - set the colors first
018d4                 | ' 
018d4                 | ' repeat iii from 0 to strsize(text)-1
018d4     00 D8 05 F6 | 	mov	local02, #0
018d8     E9 CE 01 F6 | 	mov	arg01, arg03
018dc     00 DA 05 F6 | 	mov	local03, #0
018e0     2C E7 9F FE | 	loc	pa,	#(@LR__0072-@LR__0071)
018e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
018e8                 | LR__0071
018e8     E7 DC C9 FA | 	rdbyte	local04, arg01 wz
018ec     01 DA 05 51 |  if_ne	add	local03, #1
018f0     01 CE 05 51 |  if_ne	add	arg01, #1
018f4     F0 FF 9F 5D |  if_ne	jmp	#LR__0071
018f8                 | LR__0072
018f8     ED C2 01 F6 | 	mov	result1, local03
018fc     E1 DE 01 F6 | 	mov	local05, result1
01900     01 DE 85 F1 | 	sub	local05, #1
01904     00 DE 5D F2 | 	cmps	local05, #0 wcz
01908     01 E0 05 16 |  if_a	mov	local06, #1
0190c     01 E0 65 E6 |  if_be	neg	local06, #1
01910     F0 DE 01 F1 | 	add	local05, local06
01914     64 D0 05 FD | 	qmul	arg02, #100
01918     18 E2 61 FD | 	getqx	local07
0191c     EB E2 01 F1 | 	add	local07, local01
01920     1C E7 9F FE | 	loc	pa,	#(@LR__0074-@LR__0073)
01924     93 00 A0 FD | 	call	#FCACHE_LOAD_
01928                 | LR__0073
01928     F1 E4 01 F6 | 	mov	local08, local07
0192c     EC E4 01 F1 | 	add	local08, local02
01930     02 E4 65 F0 | 	shl	local08, #2
01934     A8 BA 05 F1 | 	add	objptr, #168
01938     DD E4 01 F1 | 	add	local08, objptr
0193c     F2 E6 01 FB | 	rdlong	local09, local08
01940     FF E6 25 F5 | 	andn	local09, #255
01944     E9 E8 01 F6 | 	mov	local10, arg03
01948     EC E8 01 F1 | 	add	local10, local02
0194c     F4 EA C1 FA | 	rdbyte	local11, local10
01950     F5 E6 41 F5 | 	or	local09, local11
01954                 | '   buf[100*y+x+iii]:=(buf[100*y+x+iii] & $FFFFFF00)  | byte[text+iii]
01954     F2 E6 61 FC | 	wrlong	local09, local08
01958     F0 D8 01 F1 | 	add	local02, local06
0195c     EF D8 09 F2 | 	cmp	local02, local05 wz
01960     A8 BA 85 F1 | 	sub	objptr, #168
01964     C0 FF 9F 5D |  if_ne	jmp	#LR__0073
01968                 | LR__0074
01968     AF F0 03 F6 | 	mov	ptra, fp
0196c     BF 00 A0 FD | 	call	#popregs_
01970                 | _Hn007_20210302_outtextxy_ret
01970     2D 00 64 FD | 	ret
01974                 | 
01974                 | ' 
01974                 | ' 
01974                 | ' 
01974                 | ' pub write(text) | iii,c,ncx,ncy
01974                 | _Hn007_20210302_write
01974     0E 5A 05 F6 | 	mov	COUNT_, #14
01978     B0 00 A0 FD | 	call	#pushregs_
0197c     E7 D6 01 F6 | 	mov	local01, arg01
01980     17 00 00 FF 
01984     8C BB 05 F1 | 	add	objptr, ##12172
01988     DD D8 01 FB | 	rdlong	local02, objptr
0198c     18 D8 65 F0 | 	shl	local02, #24
01990     04 BA 05 F1 | 	add	objptr, #4
01994     DD DA 01 FB | 	rdlong	local03, objptr
01998     10 DA 65 F0 | 	shl	local03, #16
0199c     ED D8 01 F1 | 	add	local02, local03
019a0                 | ' 
019a0                 | ' ''--------- Output a string at the cursor position x,y, move the cursor
019a0                 | ' 
019a0                 | ' c:=write_color<<24+write_background<<16
019a0                 | ' 'debug(uhex_long(write_color))
019a0                 | ' ncy:=cursor_y
019a0     07 BA 85 F1 | 	sub	objptr, #7
019a4     DD DC C1 FA | 	rdbyte	local04, objptr
019a8                 | ' ncx:=cursor_x+strsize(text)
019a8     01 BA 85 F1 | 	sub	objptr, #1
019ac     DD DE C1 FA | 	rdbyte	local05, objptr
019b0     17 00 00 FF 
019b4     88 BB 85 F1 | 	sub	objptr, ##12168
019b8     EB CE 01 F6 | 	mov	arg01, local01
019bc     00 E0 05 F6 | 	mov	local06, #0
019c0     4C E6 9F FE | 	loc	pa,	#(@LR__0076-@LR__0075)
019c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
019c8                 | LR__0075
019c8     E7 E2 C9 FA | 	rdbyte	local07, arg01 wz
019cc     01 E0 05 51 |  if_ne	add	local06, #1
019d0     01 CE 05 51 |  if_ne	add	arg01, #1
019d4     F0 FF 9F 5D |  if_ne	jmp	#LR__0075
019d8                 | LR__0076
019d8     F0 C2 01 F6 | 	mov	result1, local06
019dc     F0 DE 01 F1 | 	add	local05, local06
019e0     EF E4 01 F6 | 	mov	local08, local05
019e4     28 E6 9F FE | 	loc	pa,	#(@LR__0078-@LR__0077)
019e8     93 00 A0 FD | 	call	#FCACHE_LOAD_
019ec                 | ' repeat while ncx>99
019ec                 | LR__0077
019ec     63 E4 5D F2 | 	cmps	local08, #99 wcz
019f0                 | '   ncx-=100
019f0     64 E4 85 11 |  if_a	sub	local08, #100
019f4                 | '   ncy+=1
019f4     01 DC 05 11 |  if_a	add	local04, #1
019f8     F0 FF 9F 1D |  if_a	jmp	#LR__0077
019fc                 | LR__0078
019fc                 | ' repeat while ncy>29
019fc                 | LR__0079
019fc     1D DC 5D F2 | 	cmps	local04, #29 wcz
01a00     28 00 90 ED |  if_be	jmp	#LR__0080
01a04                 | '   ncy-=1
01a04     01 DC 85 F1 | 	sub	local04, #1
01a08                 | '   scrollup()
01a08     DC 01 B0 FD | 	call	#_Hn007_20210302_scrollup
01a0c                 | '   cursor_y-=1
01a0c     17 00 00 FF 
01a10     89 BB 05 F1 | 	add	objptr, ##12169
01a14     DD DE C1 FA | 	rdbyte	local05, objptr
01a18     01 DE 85 F1 | 	sub	local05, #1
01a1c     DD DE 41 FC | 	wrbyte	local05, objptr
01a20     17 00 00 FF 
01a24     89 BB 85 F1 | 	sub	objptr, ##12169
01a28     D0 FF 9F FD | 	jmp	#LR__0079
01a2c                 | LR__0080
01a2c                 | ' 
01a2c                 | ' repeat iii from 0 to strsize(text)-1
01a2c     00 E6 05 F6 | 	mov	local09, #0
01a30     EB CE 01 F6 | 	mov	arg01, local01
01a34     00 E0 05 F6 | 	mov	local06, #0
01a38     D4 E5 9F FE | 	loc	pa,	#(@LR__0082-@LR__0081)
01a3c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01a40                 | LR__0081
01a40     E7 E2 C9 FA | 	rdbyte	local07, arg01 wz
01a44     01 E0 05 51 |  if_ne	add	local06, #1
01a48     01 CE 05 51 |  if_ne	add	arg01, #1
01a4c     F0 FF 9F 5D |  if_ne	jmp	#LR__0081
01a50                 | LR__0082
01a50     F0 C2 01 F6 | 	mov	result1, local06
01a54     E1 E8 01 F6 | 	mov	local10, result1
01a58     01 E8 85 F1 | 	sub	local10, #1
01a5c     00 E8 5D F2 | 	cmps	local10, #0 wcz
01a60     01 EA 05 16 |  if_a	mov	local11, #1
01a64     01 EA 65 E6 |  if_be	neg	local11, #1
01a68     F5 E8 01 F1 | 	add	local10, local11
01a6c     E8 E5 9F FE | 	loc	pa,	#(@LR__0084-@LR__0083)
01a70     93 00 A0 FD | 	call	#FCACHE_LOAD_
01a74                 | LR__0083
01a74     17 00 00 FF 
01a78     89 BB 05 F1 | 	add	objptr, ##12169
01a7c     DD EC C1 FA | 	rdbyte	local12, objptr
01a80     64 EC 05 FD | 	qmul	local12, #100
01a84     18 EE 61 FD | 	getqx	local13
01a88     01 BA 85 F1 | 	sub	objptr, #1
01a8c     DD EC C1 FA | 	rdbyte	local12, objptr
01a90     F6 EE 01 F1 | 	add	local13, local12
01a94     F3 EE 01 F1 | 	add	local13, local09
01a98     02 EE 65 F0 | 	shl	local13, #2
01a9c     17 00 00 FF 
01aa0     E0 BA 85 F1 | 	sub	objptr, ##12000
01aa4     DD EE 01 F1 | 	add	local13, objptr
01aa8     F7 F0 01 FB | 	rdlong	local14, local13
01aac     7F 00 00 FF 
01ab0     FF F1 05 F5 | 	and	local14, ##65535
01ab4     EC F0 41 F5 | 	or	local14, local02
01ab8                 | ' 
01ab8                 | '   buf[100*cursor_y+cursor_x+iii]:=buf[100*cursor_y+cursor_x+iii] &$FFFF | c
01ab8     F7 F0 61 FC | 	wrlong	local14, local13
01abc     F5 E6 01 F1 | 	add	local09, local11
01ac0     F4 E6 09 F2 | 	cmp	local09, local10 wz
01ac4     A8 BA 85 F1 | 	sub	objptr, #168
01ac8     A8 FF 9F 5D |  if_ne	jmp	#LR__0083
01acc                 | LR__0084
01acc                 | ' 
01acc                 | ' outtextxy(cursor_x,cursor_y,text)
01acc     17 00 00 FF 
01ad0     88 BB 05 F1 | 	add	objptr, ##12168
01ad4     DD CE C1 FA | 	rdbyte	arg01, objptr
01ad8     01 BA 05 F1 | 	add	objptr, #1
01adc     DD D0 C1 FA | 	rdbyte	arg02, objptr
01ae0     17 00 00 FF 
01ae4     89 BB 85 F1 | 	sub	objptr, ##12169
01ae8     EB D2 01 F6 | 	mov	arg03, local01
01aec     D8 FD BF FD | 	call	#_Hn007_20210302_outtextxy
01af0                 | ' 
01af0                 | ' cursor_x:=ncx
01af0     17 00 00 FF 
01af4     88 BB 05 F1 | 	add	objptr, ##12168
01af8     DD E4 41 FC | 	wrbyte	local08, objptr
01afc                 | ' cursor_y:=ncy
01afc     01 BA 05 F1 | 	add	objptr, #1
01b00     DD DC 41 FC | 	wrbyte	local04, objptr
01b04     17 00 00 FF 
01b08     89 BB 85 F1 | 	sub	objptr, ##12169
01b0c     AF F0 03 F6 | 	mov	ptra, fp
01b10     BF 00 A0 FD | 	call	#popregs_
01b14                 | _Hn007_20210302_write_ret
01b14     2D 00 64 FD | 	ret
01b18                 | 
01b18                 | ' 
01b18                 | ' pub writeln(text)
01b18                 | _Hn007_20210302_writeln
01b18     01 5A 05 F6 | 	mov	COUNT_, #1
01b1c     B0 00 A0 FD | 	call	#pushregs_
01b20                 | ' 
01b20                 | ' '--------- Output a string at the cursor position x,y, move the cursor to the next line
01b20                 | ' 
01b20                 | ' write(text)
01b20     50 FE BF FD | 	call	#_Hn007_20210302_write
01b24                 | ' cursor_x:=0
01b24     17 00 00 FF 
01b28     88 BB 05 F1 | 	add	objptr, ##12168
01b2c     DD 00 48 FC | 	wrbyte	#0, objptr
01b30                 | ' cursor_y+=1
01b30     01 BA 05 F1 | 	add	objptr, #1
01b34     DD D6 C1 FA | 	rdbyte	local01, objptr
01b38     01 D6 05 F1 | 	add	local01, #1
01b3c     DD D6 41 FC | 	wrbyte	local01, objptr
01b40                 | ' if (cursor_y>29)
01b40     DD D6 C1 FA | 	rdbyte	local01, objptr
01b44     17 00 00 FF 
01b48     89 BB 85 F1 | 	sub	objptr, ##12169
01b4c     1D D6 5D F2 | 	cmps	local01, #29 wcz
01b50     18 00 90 ED |  if_be	jmp	#LR__0085
01b54                 | '   scrollup()
01b54     90 00 B0 FD | 	call	#_Hn007_20210302_scrollup
01b58                 | '   cursor_y:=29
01b58     17 00 00 FF 
01b5c     89 BB 05 F1 | 	add	objptr, ##12169
01b60     DD 3A 48 FC | 	wrbyte	#29, objptr
01b64     17 00 00 FF 
01b68     89 BB 85 F1 | 	sub	objptr, ##12169
01b6c                 | LR__0085
01b6c     AF F0 03 F6 | 	mov	ptra, fp
01b70     BF 00 A0 FD | 	call	#popregs_
01b74                 | _Hn007_20210302_writeln_ret
01b74     2D 00 64 FD | 	ret
01b78                 | 
01b78                 | ' 
01b78                 | ' pub cls(fc,bc)   :c
01b78                 | _Hn007_20210302_cls
01b78     04 5A 05 F6 | 	mov	COUNT_, #4
01b7c     B0 00 A0 FD | 	call	#pushregs_
01b80     E7 D6 01 F6 | 	mov	local01, arg01
01b84     E8 D8 01 F6 | 	mov	local02, arg02
01b88     EB DA 01 F6 | 	mov	local03, local01
01b8c     18 DA 65 F0 | 	shl	local03, #24
01b90     EC DC 01 F6 | 	mov	local04, local02
01b94     10 DC 65 F0 | 	shl	local04, #16
01b98     EE DA 01 F1 | 	add	local03, local04
01b9c     20 DA 05 F1 | 	add	local03, #32
01ba0                 | ' 
01ba0                 | ' ''---------- Clear the screen, set its foreground/background color
01ba0                 | ' 
01ba0                 | ' c:=fc<<24+bc<<16+$20
01ba0     A8 BA 05 F1 | 	add	objptr, #168
01ba4     DD CE 01 F6 | 	mov	arg01, objptr
01ba8     A8 BA 85 F1 | 	sub	objptr, #168
01bac                 | ' longfill(@buf,c,3000)
01bac     ED D0 01 F6 | 	mov	arg02, local03
01bb0     05 00 00 FF 
01bb4     B8 D3 05 F6 | 	mov	arg03, ##3000
01bb8     A8 00 A0 FD | 	call	#\builtin_longfill_
01bbc                 | '  setwritecolors(fc,bc)
01bbc                 | ' 
01bbc                 | ' ''---------- Set colors for write and writeln
01bbc                 | ' 
01bbc                 | ' write_color:=ff
01bbc     17 00 00 FF 
01bc0     8C BB 05 F1 | 	add	objptr, ##12172
01bc4     DD D6 61 FC | 	wrlong	local01, objptr
01bc8                 | ' write_background:=bb
01bc8     04 BA 05 F1 | 	add	objptr, #4
01bcc     DD D8 61 FC | 	wrlong	local02, objptr
01bd0     17 00 00 FF 
01bd4     90 BB 85 F1 | 	sub	objptr, ##12176
01bd8     ED C2 01 F6 | 	mov	result1, local03
01bdc     AF F0 03 F6 | 	mov	ptra, fp
01be0     BF 00 A0 FD | 	call	#popregs_
01be4                 | _Hn007_20210302_cls_ret
01be4     2D 00 64 FD | 	ret
01be8                 | 
01be8                 | ' 
01be8                 | ' pub scrollup() | i
01be8                 | _Hn007_20210302_scrollup
01be8     02 5A 05 F6 | 	mov	COUNT_, #2
01bec     B0 00 A0 FD | 	call	#pushregs_
01bf0     A8 BA 05 F1 | 	add	objptr, #168
01bf4     DD CE 01 F6 | 	mov	arg01, objptr
01bf8     A8 BA 85 F1 | 	sub	objptr, #168
01bfc     E7 D0 01 F6 | 	mov	arg02, arg01
01c00     90 D1 05 F1 | 	add	arg02, #400
01c04                 | ' 
01c04                 | ' ''-----------  Scroll the screen one line up
01c04                 | ' 
01c04                 | ' longmove(@buf,@buf+400,2900)
01c04     05 00 00 FF 
01c08     54 D3 05 F6 | 	mov	arg03, ##2900
01c0c     A4 05 B0 FD | 	call	#__system__longmove
01c10     16 00 00 FF 
01c14     F8 BB 05 F1 | 	add	objptr, ##11768
01c18     DD D6 01 F6 | 	mov	local01, objptr
01c1c     16 00 00 FF 
01c20     F8 BB 85 F1 | 	sub	objptr, ##11768
01c24     F4 E3 9F FE | 	loc	pa,	#(@LR__0088-@LR__0086)
01c28     93 00 A0 FD | 	call	#FCACHE_LOAD_
01c2c                 | LR__0086
01c2c     64 0C DC FC | 	rep	@LR__0089, #100
01c30                 | LR__0087
01c30     EB D8 01 FB | 	rdlong	local02, local01
01c34     80 FF 7F FF 
01c38     00 D8 05 F5 | 	and	local02, ##-65536
01c3c     20 D8 45 F5 | 	or	local02, #32
01c40                 | '   buf[i]:=(buf[i] & $FFFF0000) | 32
01c40     EB D8 61 FC | 	wrlong	local02, local01
01c44     04 D6 05 F1 | 	add	local01, #4
01c48                 | LR__0088
01c48                 | LR__0089
01c48     AF F0 03 F6 | 	mov	ptra, fp
01c4c     BF 00 A0 FD | 	call	#popregs_
01c50                 | _Hn007_20210302_scrollup_ret
01c50     2D 00 64 FD | 	ret
01c54                 | 
01c54                 | ' 
01c54                 | ' 
01c54                 | ' pub inttostr(i):result |q,pos,k,j
01c54                 | _Hn007_20210302_inttostr
01c54     07 5A 05 F6 | 	mov	COUNT_, #7
01c58     B0 00 A0 FD | 	call	#pushregs_
01c5c     E7 D6 01 F6 | 	mov	local01, arg01
01c60                 | ' 
01c60                 | ' ''---------- Convert a integer to dec string, return a pointer
01c60                 | ' 
01c60                 | ' j:=i
01c60     EB D8 09 F6 | 	mov	local02, local01 wz
01c64                 | ' pos:=10
01c64     0A DA 05 F6 | 	mov	local03, #10
01c68                 | ' k:=0
01c68     00 DC 05 F6 | 	mov	local04, #0
01c6c                 | ' 
01c6c                 | ' if (j==0)
01c6c     20 00 90 5D |  if_ne	jmp	#LR__0090
01c70                 | '   n_string[0]:=48
01c70     17 00 00 FF 
01c74     A8 BB 05 F1 | 	add	objptr, ##12200
01c78     DD 60 48 FC | 	wrbyte	#48, objptr
01c7c                 | '   n_string[1]:=0
01c7c     01 BA 05 F1 | 	add	objptr, #1
01c80     DD 00 48 FC | 	wrbyte	#0, objptr
01c84     17 00 00 FF 
01c88     A9 BB 85 F1 | 	sub	objptr, ##12201
01c8c                 | ' 
01c8c                 | ' else
01c8c     F4 00 90 FD | 	jmp	#LR__0097
01c90                 | LR__0090
01c90                 | '   if (j<0)
01c90     00 D8 5D F2 | 	cmps	local02, #0 wcz
01c94                 | '     j:=0-j
01c94     EC D8 61 C6 |  if_b	neg	local02, local02
01c98                 | '     k:=45
01c98     2D DC 05 C6 |  if_b	mov	local04, #45
01c9c                 | ' 
01c9c                 | '   n_string[11]:=0
01c9c     17 00 00 FF 
01ca0     B3 BB 05 F1 | 	add	objptr, ##12211
01ca4     DD 00 48 FC | 	wrbyte	#0, objptr
01ca8     17 00 00 FF 
01cac     B3 BB 85 F1 | 	sub	objptr, ##12211
01cb0     94 E3 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
01cb4     93 00 A0 FD | 	call	#FCACHE_LOAD_
01cb8                 | '   repeat while (pos>-1)
01cb8                 | LR__0091
01cb8     FF FF 7F FF 
01cbc     FF DB 5D F2 | 	cmps	local03, ##-1 wcz
01cc0     3C 00 90 ED |  if_be	jmp	#LR__0093
01cc4     EC 24 02 F6 | 	mov	muldiva_, local02
01cc8     0A 26 06 F6 | 	mov	muldivb_, #10
01ccc     D0 00 A0 FD | 	call	#divide_
01cd0     12 DF 01 F6 | 	mov	local05, muldiva_
01cd4                 | '     q:=j//10
01cd4                 | '     q:=48+q
01cd4     30 DE 05 F1 | 	add	local05, #48
01cd8     ED E0 01 F6 | 	mov	local06, local03
01cdc     17 00 00 FF 
01ce0     A8 BB 05 F1 | 	add	objptr, ##12200
01ce4     DD E0 01 F1 | 	add	local06, objptr
01ce8                 | '     n_string[pos]:=q
01ce8     F0 DE 41 FC | 	wrbyte	local05, local06
01cec                 | '     j:=j/10
01cec     13 D9 01 F6 | 	mov	local02, muldivb_
01cf0                 | '     pos-=1
01cf0     01 DA 85 F1 | 	sub	local03, #1
01cf4     17 00 00 FF 
01cf8     A8 BB 85 F1 | 	sub	objptr, ##12200
01cfc     B8 FF 9F FD | 	jmp	#LR__0091
01d00                 | LR__0092
01d00                 | LR__0093
01d00                 | '   repeat while n_string[0]==48
01d00                 | LR__0094
01d00     17 00 00 FF 
01d04     A8 BB 05 F1 | 	add	objptr, ##12200
01d08     DD E2 C1 FA | 	rdbyte	local07, objptr
01d0c     17 00 00 FF 
01d10     A8 BB 85 F1 | 	sub	objptr, ##12200
01d14     30 E2 0D F2 | 	cmp	local07, #48 wz
01d18     28 00 90 5D |  if_ne	jmp	#LR__0095
01d1c     17 00 00 FF 
01d20     A8 BB 05 F1 | 	add	objptr, ##12200
01d24     DD CE 01 F6 | 	mov	arg01, objptr
01d28     17 00 00 FF 
01d2c     A8 BB 85 F1 | 	sub	objptr, ##12200
01d30     E7 D0 01 F6 | 	mov	arg02, arg01
01d34     01 D0 05 F1 | 	add	arg02, #1
01d38                 | '     bytemove(@n_string,@n_string+1,12)
01d38     0C D2 05 F6 | 	mov	arg03, #12
01d3c     E4 03 B0 FD | 	call	#__system____builtin_memmove
01d40     BC FF 9F FD | 	jmp	#LR__0094
01d44                 | LR__0095
01d44                 | ' 
01d44                 | '   if k==45
01d44     2D DC 0D F2 | 	cmp	local04, #45 wz
01d48     38 00 90 5D |  if_ne	jmp	#LR__0096
01d4c     17 00 00 FF 
01d50     A8 BB 05 F1 | 	add	objptr, ##12200
01d54     DD D0 01 F6 | 	mov	arg02, objptr
01d58     17 00 00 FF 
01d5c     A8 BB 85 F1 | 	sub	objptr, ##12200
01d60     E8 CE 01 F6 | 	mov	arg01, arg02
01d64     01 CE 05 F1 | 	add	arg01, #1
01d68                 | '      bytemove(@n_string+1,@n_string,12)
01d68     0C D2 05 F6 | 	mov	arg03, #12
01d6c     B4 03 B0 FD | 	call	#__system____builtin_memmove
01d70                 | '      n_string[0]:=k
01d70     17 00 00 FF 
01d74     A8 BB 05 F1 | 	add	objptr, ##12200
01d78     DD DC 41 FC | 	wrbyte	local04, objptr
01d7c     17 00 00 FF 
01d80     A8 BB 85 F1 | 	sub	objptr, ##12200
01d84                 | LR__0096
01d84                 | LR__0097
01d84     17 00 00 FF 
01d88     A8 BB 05 F1 | 	add	objptr, ##12200
01d8c     DD C2 01 F6 | 	mov	result1, objptr
01d90     17 00 00 FF 
01d94     A8 BB 85 F1 | 	sub	objptr, ##12200
01d98                 | ' 
01d98                 | ' q:=@n_string
01d98                 | ' return q
01d98     AF F0 03 F6 | 	mov	ptra, fp
01d9c     BF 00 A0 FD | 	call	#popregs_
01da0                 | _Hn007_20210302_inttostr_ret
01da0     2D 00 64 FD | 	ret
01da4                 | 
01da4                 | ' 
01da4                 | ' 
01da4                 | ' pub setmode(mode)
01da4                 | _Hn007_20210302_setmode
01da4                 | ' 
01da4                 | ' if (mode==0)
01da4     00 CE 0D F2 | 	cmp	arg01, #0 wz
01da8     8C 00 90 5D |  if_ne	jmp	#LR__0100
01dac                 | ' 
01dac                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 16          'before sync
01dac     17 00 00 FF 
01db0     B4 BB 05 F1 | 	add	objptr, ##12212
01db4     80 40 B8 FF 
01db8     DD 20 68 FC | 	wrlong	##1887502352, objptr
01dbc                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 80          'sync
01dbc     04 BA 05 F1 | 	add	objptr, #4
01dc0     80 40 B8 FF 
01dc4     DD A0 68 FC | 	wrlong	##1887502416, objptr
01dc8                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 20          'before visible
01dc8     04 BA 05 F1 | 	add	objptr, #4
01dcc     80 40 B8 FF 
01dd0     DD 28 68 FC | 	wrlong	##1887502356, objptr
01dd4                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 1024        'visible 1024
01dd4     04 BA 05 F1 | 	add	objptr, #4
01dd8     82 40 B8 FF 
01ddc     DD 00 68 FC | 	wrlong	##1887503360, objptr
01de0                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 112         'immediate 112
01de0     04 BA 05 F1 | 	add	objptr, #4
01de4     80 40 B8 FF 
01de8     DD E0 68 FC | 	wrlong	##1887502448, objptr
01dec                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
01dec     04 BA 05 F1 | 	add	objptr, #4
01df0     00 44 90 FF 
01df4     DD 10 68 FC | 	wrlong	##545783816, objptr
01df8                 | '   timings[6]:= 48
01df8     04 BA 05 F1 | 	add	objptr, #4
01dfc     DD 60 68 FC | 	wrlong	#48, objptr
01e00                 | '   timings[7]:= 16
01e00     04 BA 05 F1 | 	add	objptr, #4
01e04     DD 20 68 FC | 	wrlong	#16, objptr
01e08                 | '   timings[8]:= 16
01e08     04 BA 05 F1 | 	add	objptr, #4
01e0c     DD 20 68 FC | 	wrlong	#16, objptr
01e10                 | '   timings[9]:= 16
01e10     04 BA 05 F1 | 	add	objptr, #4
01e14     DD 20 68 FC | 	wrlong	#16, objptr
01e18     17 00 00 FF 
01e1c     D8 BB 85 F1 | 	sub	objptr, ##12248
01e20                 | ' 
01e20                 | '   clkfreq:=354693878
01e20     19 92 8A FF 
01e24     14 EC 6D FC | 	wrlong	##354693878, #20
01e28                 | '   org
01e28     DC E1 9F FE | 	loc	pa,	#(@LR__0099-@LR__0098)
01e2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e30                 | LR__0098
01e30 000             | 	org	0
01e30 000 B6 E1 80 FF 
01e34 001 00 F6 65 FD | 	hubset	##29584635
01e38 002             | LR__0099
01e38                 | 	orgh
01e38                 | LR__0100
01e38                 | ' 
01e38                 | ' 
01e38                 | ' if (mode==1)   ' 1026 px per line
01e38     01 CE 0D F2 | 	cmp	arg01, #1 wz
01e3c     8C 00 90 5D |  if_ne	jmp	#LR__0103
01e40                 | ' 
01e40                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 30          'before sync
01e40     17 00 00 FF 
01e44     B4 BB 05 F1 | 	add	objptr, ##12212
01e48     80 40 B8 FF 
01e4c     DD 3C 68 FC | 	wrlong	##1887502366, objptr
01e50                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 80          'sync
01e50     04 BA 05 F1 | 	add	objptr, #4
01e54     80 40 B8 FF 
01e58     DD A0 68 FC | 	wrlong	##1887502416, objptr
01e5c                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 20          'before visible
01e5c     04 BA 05 F1 | 	add	objptr, #4
01e60     80 40 B8 FF 
01e64     DD 28 68 FC | 	wrlong	##1887502356, objptr
01e68                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 896         'visible 896
01e68     04 BA 05 F1 | 	add	objptr, #4
01e6c     81 40 B8 FF 
01e70     DD 00 6B FC | 	wrlong	##1887503232, objptr
01e74                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 48          'immediate 48
01e74     04 BA 05 F1 | 	add	objptr, #4
01e78     80 40 B8 FF 
01e7c     DD 60 68 FC | 	wrlong	##1887502384, objptr
01e80                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
01e80     04 BA 05 F1 | 	add	objptr, #4
01e84     00 44 90 FF 
01e88     DD 10 68 FC | 	wrlong	##545783816, objptr
01e8c                 | '   timings[6]:= 24
01e8c     04 BA 05 F1 | 	add	objptr, #4
01e90     DD 30 68 FC | 	wrlong	#24, objptr
01e94                 | '   timings[7]:= 32
01e94     04 BA 05 F1 | 	add	objptr, #4
01e98     DD 40 68 FC | 	wrlong	#32, objptr
01e9c                 | '   timings[8]:= 32
01e9c     04 BA 05 F1 | 	add	objptr, #4
01ea0     DD 40 68 FC | 	wrlong	#32, objptr
01ea4                 | '   timings[9]:= 32
01ea4     04 BA 05 F1 | 	add	objptr, #4
01ea8     DD 40 68 FC | 	wrlong	#32, objptr
01eac     17 00 00 FF 
01eb0     D8 BB 85 F1 | 	sub	objptr, ##12248
01eb4                 | ' 
01eb4                 | '   clkfreq:=319215686
01eb4     6C 83 89 FF 
01eb8     14 8C 6C FC | 	wrlong	##319215686, #20
01ebc                 | '   org
01ebc     48 E1 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
01ec0     93 00 A0 FD | 	call	#FCACHE_LOAD_
01ec4                 | LR__0101
01ec4 000             | 	org	0
01ec4 000 96 E5 80 FF 
01ec8 001 00 F6 67 FD | 	hubset	##30092795
01ecc 002             | LR__0102
01ecc                 | 	orgh
01ecc                 | LR__0103
01ecc                 | ' 
01ecc                 | ' 
01ecc                 | ' if (mode==2) ' 912 pixes per line     ' 283_751_600 80x PAL  - real settings: 64 908 283750000 - 0.9999944
01ecc     02 CE 0D F2 | 	cmp	arg01, #2 wz
01ed0     8C 00 90 5D |  if_ne	jmp	#LR__0106
01ed4                 | ' 
01ed4                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 16           'before sync
01ed4     17 00 00 FF 
01ed8     B4 BB 05 F1 | 	add	objptr, ##12212
01edc     80 40 B8 FF 
01ee0     DD 20 68 FC | 	wrlong	##1887502352, objptr
01ee4                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 64           'sync
01ee4     04 BA 05 F1 | 	add	objptr, #4
01ee8     80 40 B8 FF 
01eec     DD 80 68 FC | 	wrlong	##1887502400, objptr
01ef0                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 16           'before visible
01ef0     04 BA 05 F1 | 	add	objptr, #4
01ef4     80 40 B8 FF 
01ef8     DD 20 68 FC | 	wrlong	##1887502352, objptr
01efc                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816          'visible 1024
01efc     04 BA 05 F1 | 	add	objptr, #4
01f00     81 40 B8 FF 
01f04     DD 60 6A FC | 	wrlong	##1887503152, objptr
01f08                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8            'immediate 112
01f08     04 BA 05 F1 | 	add	objptr, #4
01f0c     80 40 B8 FF 
01f10     DD 10 68 FC | 	wrlong	##1887502344, objptr
01f14                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8            'imm+lut, 1 char
01f14     04 BA 05 F1 | 	add	objptr, #4
01f18     00 44 90 FF 
01f1c     DD 10 68 FC | 	wrlong	##545783816, objptr
01f20                 | '   timings[6]:= 8
01f20     04 BA 05 F1 | 	add	objptr, #4
01f24     DD 10 68 FC | 	wrlong	#8, objptr
01f28                 | '   timings[7]:= 32
01f28     04 BA 05 F1 | 	add	objptr, #4
01f2c     DD 40 68 FC | 	wrlong	#32, objptr
01f30                 | '   timings[8]:= 64
01f30     04 BA 05 F1 | 	add	objptr, #4
01f34     DD 80 68 FC | 	wrlong	#64, objptr
01f38                 | ' 
01f38                 | '   timings[9]:= 32
01f38     04 BA 05 F1 | 	add	objptr, #4
01f3c     DD 40 68 FC | 	wrlong	#32, objptr
01f40     17 00 00 FF 
01f44     D8 BB 85 F1 | 	sub	objptr, ##12248
01f48                 | ' 
01f48                 | '   clkfreq:=283750000
01f48     D7 74 88 FF 
01f4c     14 E0 6C FC | 	wrlong	##283750000, #20
01f50                 | '   org
01f50     B4 E0 9F FE | 	loc	pa,	#(@LR__0105-@LR__0104)
01f54     93 00 A0 FD | 	call	#FCACHE_LOAD_
01f58                 | LR__0104
01f58 000             | 	org	0
01f58 000 C5 FF 80 FF 
01f5c 001 00 F6 67 FD | 	hubset	##33524731
01f60 002             | LR__0105
01f60                 | 	orgh
01f60                 | LR__0106
01f60                 | ' 
01f60                 | ' if (mode==256)
01f60     00 CF 0D F2 | 	cmp	arg01, #256 wz
01f64     8C 00 90 5D |  if_ne	jmp	#LR__0109
01f68                 | ' 
01f68                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 80          'before sync
01f68     17 00 00 FF 
01f6c     B4 BB 05 F1 | 	add	objptr, ##12212
01f70     80 40 B8 FF 
01f74     DD A0 68 FC | 	wrlong	##1887502416, objptr
01f78                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 160         'sync
01f78     04 BA 05 F1 | 	add	objptr, #4
01f7c     80 40 B8 FF 
01f80     DD 40 69 FC | 	wrlong	##1887502496, objptr
01f84                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 84          'before visible
01f84     04 BA 05 F1 | 	add	objptr, #4
01f88     80 40 B8 FF 
01f8c     DD A8 68 FC | 	wrlong	##1887502420, objptr
01f90                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
01f90     04 BA 05 F1 | 	add	objptr, #4
01f94     81 40 B8 FF 
01f98     DD 60 6A FC | 	wrlong	##1887503152, objptr
01f9c                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
01f9c     04 BA 05 F1 | 	add	objptr, #4
01fa0     80 40 B8 FF 
01fa4     DD 10 68 FC | 	wrlong	##1887502344, objptr
01fa8                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
01fa8     04 BA 05 F1 | 	add	objptr, #4
01fac     00 44 90 FF 
01fb0     DD 10 68 FC | 	wrlong	##545783816, objptr
01fb4                 | '   timings[6]:= 8
01fb4     04 BA 05 F1 | 	add	objptr, #4
01fb8     DD 10 68 FC | 	wrlong	#8, objptr
01fbc                 | '   timings[7]:= 8
01fbc     04 BA 05 F1 | 	add	objptr, #4
01fc0     DD 10 68 FC | 	wrlong	#8, objptr
01fc4                 | '   timings[8]:= 12
01fc4     04 BA 05 F1 | 	add	objptr, #4
01fc8     DD 18 68 FC | 	wrlong	#12, objptr
01fcc                 | '   timings[9]:= 8
01fcc     04 BA 05 F1 | 	add	objptr, #4
01fd0     DD 10 68 FC | 	wrlong	#8, objptr
01fd4     17 00 00 FF 
01fd8     D8 BB 85 F1 | 	sub	objptr, ##12248
01fdc                 | ' 
01fdc                 | '   clkfreq:=357959184
01fdc     03 AB 8A FF 
01fe0     14 20 6C FC | 	wrlong	##357959184, #20
01fe4                 | '   org
01fe4     20 E0 9F FE | 	loc	pa,	#(@LR__0108-@LR__0107)
01fe8     93 00 A0 FD | 	call	#FCACHE_LOAD_
01fec                 | LR__0107
01fec 000             | 	org	0
01fec 000 B2 E1 80 FF 
01ff0 001 00 F6 65 FD | 	hubset	##29582587
01ff4 002             | LR__0108
01ff4                 | 	orgh
01ff4                 | LR__0109
01ff4                 | ' 
01ff4                 | ' if (mode==257)  '1026 px
01ff4     01 CF 0D F2 | 	cmp	arg01, #257 wz
01ff8     8C 00 90 5D |  if_ne	jmp	#LR__0112
01ffc                 | ' 
01ffc                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 80          'before sync
01ffc     17 00 00 FF 
02000     B4 BB 05 F1 | 	add	objptr, ##12212
02004     80 40 B8 FF 
02008     DD A0 68 FC | 	wrlong	##1887502416, objptr
0200c                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 50          'sync
0200c     04 BA 05 F1 | 	add	objptr, #4
02010     80 40 B8 FF 
02014     DD 64 68 FC | 	wrlong	##1887502386, objptr
02018                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 80          'before visible
02018     04 BA 05 F1 | 	add	objptr, #4
0201c     80 40 B8 FF 
02020     DD A0 68 FC | 	wrlong	##1887502416, objptr
02024                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
02024     04 BA 05 F1 | 	add	objptr, #4
02028     81 40 B8 FF 
0202c     DD 60 6A FC | 	wrlong	##1887503152, objptr
02030                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
02030     04 BA 05 F1 | 	add	objptr, #4
02034     80 40 B8 FF 
02038     DD 10 68 FC | 	wrlong	##1887502344, objptr
0203c                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
0203c     04 BA 05 F1 | 	add	objptr, #4
02040     00 44 90 FF 
02044     DD 10 68 FC | 	wrlong	##545783816, objptr
02048                 | '   timings[6]:= 8
02048     04 BA 05 F1 | 	add	objptr, #4
0204c     DD 10 68 FC | 	wrlong	#8, objptr
02050                 | '   timings[7]:= 8
02050     04 BA 05 F1 | 	add	objptr, #4
02054     DD 10 68 FC | 	wrlong	#8, objptr
02058                 | '   timings[8]:= 12
02058     04 BA 05 F1 | 	add	objptr, #4
0205c     DD 18 68 FC | 	wrlong	#12, objptr
02060                 | '   timings[9]:= 8
02060     04 BA 05 F1 | 	add	objptr, #4
02064     DD 10 68 FC | 	wrlong	#8, objptr
02068     17 00 00 FF 
0206c     D8 BB 85 F1 | 	sub	objptr, ##12248
02070                 | ' 
02070                 | '   clkfreq:=322162162
02070     E6 99 89 FF 
02074     14 E4 6F FC | 	wrlong	##322162162, #20
02078                 | '   org
02078     8C DF 9F FE | 	loc	pa,	#(@LR__0111-@LR__0110)
0207c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02080                 | LR__0110
02080 000             | 	org	0
02080 000 29 C9 80 FF 
02084 001 00 F6 67 FD | 	hubset	##26366971
02088 002             | LR__0111
02088                 | 	orgh
02088                 | LR__0112
02088                 | ' 
02088                 | ' if (mode==258)  '912 px
02088     02 CF 0D F2 | 	cmp	arg01, #258 wz
0208c     8C 00 90 5D |  if_ne	jmp	#LR__0115
02090                 | ' 
02090                 | '   timings[0]:= $70810000 + hdmi_base<<17 + 24          'before sync
02090     17 00 00 FF 
02094     B4 BB 05 F1 | 	add	objptr, ##12212
02098     80 40 B8 FF 
0209c     DD 30 68 FC | 	wrlong	##1887502360, objptr
020a0                 | '   timings[1]:= $70810000 + hdmi_base<<17 + 48         'sync
020a0     04 BA 05 F1 | 	add	objptr, #4
020a4     80 40 B8 FF 
020a8     DD 60 68 FC | 	wrlong	##1887502384, objptr
020ac                 | '   timings[2]:= $70810000 + hdmi_base<<17 + 24          'before visible
020ac     04 BA 05 F1 | 	add	objptr, #4
020b0     80 40 B8 FF 
020b4     DD 30 68 FC | 	wrlong	##1887502360, objptr
020b8                 | '   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
020b8     04 BA 05 F1 | 	add	objptr, #4
020bc     81 40 B8 FF 
020c0     DD 60 6A FC | 	wrlong	##1887503152, objptr
020c4                 | '   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
020c4     04 BA 05 F1 | 	add	objptr, #4
020c8     80 40 B8 FF 
020cc     DD 10 68 FC | 	wrlong	##1887502344, objptr
020d0                 | '   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
020d0     04 BA 05 F1 | 	add	objptr, #4
020d4     00 44 90 FF 
020d8     DD 10 68 FC | 	wrlong	##545783816, objptr
020dc                 | '   timings[6]:= 8
020dc     04 BA 05 F1 | 	add	objptr, #4
020e0     DD 10 68 FC | 	wrlong	#8, objptr
020e4                 | '   timings[7]:= 8
020e4     04 BA 05 F1 | 	add	objptr, #4
020e8     DD 10 68 FC | 	wrlong	#8, objptr
020ec                 | '   timings[8]:= 12
020ec     04 BA 05 F1 | 	add	objptr, #4
020f0     DD 18 68 FC | 	wrlong	#12, objptr
020f4                 | '   timings[9]:= 8
020f4     04 BA 05 F1 | 	add	objptr, #4
020f8     DD 10 68 FC | 	wrlong	#8, objptr
020fc     17 00 00 FF 
02100     D8 BB 85 F1 | 	sub	objptr, ##12248
02104                 | ' 
02104                 | '   clkfreq:=286363636
02104     C7 88 88 FF 
02108     14 E8 6F FC | 	wrlong	##286363636, #20
0210c                 | '   org
0210c     F8 DE 9F FE | 	loc	pa,	#(@LR__0114-@LR__0113)
02110     93 00 A0 FD | 	call	#FCACHE_LOAD_
02114                 | LR__0113
02114 000             | 	org	0
02114 000 9D AA 80 FF 
02118 001 00 F6 65 FD | 	hubset	##22362875
0211c 002             | LR__0114
0211c                 | 	orgh
0211c                 | LR__0115
0211c                 | _Hn007_20210302_setmode_ret
0211c     2D 00 64 FD | 	ret
02120                 | hubexit
02120     81 00 80 FD | 	jmp	#cogexit
02124                 | 
02124                 | __system____builtin_memmove
02124     E7 C4 01 F6 | 	mov	_var01, arg01
02128     E8 CE 59 F2 | 	cmps	arg01, arg02 wcz
0212c     50 00 90 3D |  if_ae	jmp	#LR__0123
02130     EC DE 9F FE | 	loc	pa,	#(@LR__0117-@LR__0116)
02134     93 00 A0 FD | 	call	#FCACHE_LOAD_
02138                 | LR__0116
02138     03 D2 5D F2 | 	cmps	arg03, #3 wcz
0213c     18 00 90 ED |  if_be	jmp	#LR__0118
02140     E8 C6 01 FB | 	rdlong	_var02, arg02
02144     E7 C6 61 FC | 	wrlong	_var02, arg01
02148     04 CE 05 F1 | 	add	arg01, #4
0214c     04 D0 05 F1 | 	add	arg02, #4
02150     04 D2 85 F1 | 	sub	arg03, #4
02154     E0 FF 9F FD | 	jmp	#LR__0116
02158                 | LR__0117
02158                 | LR__0118
02158     E9 C8 09 F6 | 	mov	_var03, arg03 wz
0215c     4C 00 90 AD |  if_e	jmp	#LR__0129
02160     B0 DE 9F FE | 	loc	pa,	#(@LR__0121-@LR__0119)
02164     93 00 A0 FD | 	call	#FCACHE_LOAD_
02168                 | LR__0119
02168     E4 08 D8 FC | 	rep	@LR__0122, _var03
0216c                 | LR__0120
0216c     E8 C6 C1 FA | 	rdbyte	_var02, arg02
02170     E7 C6 41 FC | 	wrbyte	_var02, arg01
02174     01 CE 05 F1 | 	add	arg01, #1
02178     01 D0 05 F1 | 	add	arg02, #1
0217c                 | LR__0121
0217c                 | LR__0122
0217c     2C 00 90 FD | 	jmp	#LR__0129
02180                 | LR__0123
02180     E9 CE 01 F1 | 	add	arg01, arg03
02184     E9 D0 01 F1 | 	add	arg02, arg03
02188     E9 CA 09 F6 | 	mov	_var04, arg03 wz
0218c     1C 00 90 AD |  if_e	jmp	#LR__0128
02190     80 DE 9F FE | 	loc	pa,	#(@LR__0126-@LR__0124)
02194     93 00 A0 FD | 	call	#FCACHE_LOAD_
02198                 | LR__0124
02198     E5 08 D8 FC | 	rep	@LR__0127, _var04
0219c                 | LR__0125
0219c     01 CE 85 F1 | 	sub	arg01, #1
021a0     01 D0 85 F1 | 	sub	arg02, #1
021a4     E8 C6 C1 FA | 	rdbyte	_var02, arg02
021a8     E7 C6 41 FC | 	wrbyte	_var02, arg01
021ac                 | LR__0126
021ac                 | LR__0127
021ac                 | LR__0128
021ac                 | LR__0129
021ac     E2 C2 01 F6 | 	mov	result1, _var01
021b0                 | __system____builtin_memmove_ret
021b0     2D 00 64 FD | 	ret
021b4                 | 
021b4                 | __system__longmove
021b4     E7 C4 01 F6 | 	mov	_var01, arg01
021b8     E8 CE 59 F2 | 	cmps	arg01, arg02 wcz
021bc     28 00 90 3D |  if_ae	jmp	#LR__0134
021c0     E9 C6 09 F6 | 	mov	_var02, arg03 wz
021c4     54 00 90 AD |  if_e	jmp	#LR__0140
021c8     48 DE 9F FE | 	loc	pa,	#(@LR__0132-@LR__0130)
021cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
021d0                 | LR__0130
021d0     E3 08 D8 FC | 	rep	@LR__0133, _var02
021d4                 | LR__0131
021d4     E8 C8 01 FB | 	rdlong	_var03, arg02
021d8     E7 C8 61 FC | 	wrlong	_var03, arg01
021dc     04 CE 05 F1 | 	add	arg01, #4
021e0     04 D0 05 F1 | 	add	arg02, #4
021e4                 | LR__0132
021e4                 | LR__0133
021e4     34 00 90 FD | 	jmp	#LR__0140
021e8                 | LR__0134
021e8     E9 CA 01 F6 | 	mov	_var04, arg03
021ec     02 CA 65 F0 | 	shl	_var04, #2
021f0     E5 CE 01 F1 | 	add	arg01, _var04
021f4     E5 D0 01 F1 | 	add	arg02, _var04
021f8     E9 CC 09 F6 | 	mov	_var05, arg03 wz
021fc     1C 00 90 AD |  if_e	jmp	#LR__0139
02200     10 DE 9F FE | 	loc	pa,	#(@LR__0137-@LR__0135)
02204     93 00 A0 FD | 	call	#FCACHE_LOAD_
02208                 | LR__0135
02208     E6 08 D8 FC | 	rep	@LR__0138, _var05
0220c                 | LR__0136
0220c     04 CE 85 F1 | 	sub	arg01, #4
02210     04 D0 85 F1 | 	sub	arg02, #4
02214     E8 C8 01 FB | 	rdlong	_var03, arg02
02218     E7 C8 61 FC | 	wrlong	_var03, arg01
0221c                 | LR__0137
0221c                 | LR__0138
0221c                 | LR__0139
0221c                 | LR__0140
0221c     E2 C2 01 F6 | 	mov	result1, _var01
02220                 | __system__longmove_ret
02220     2D 00 64 FD | 	ret
02224                 | 
02224                 | __system___pinread
02224     20 CE CD F7 | 	test	arg01, #32 wz
02228     FF C5 01 56 |  if_ne	mov	_var01, inb
0222c     FE C5 01 A6 |  if_e	mov	_var01, ina
02230     E2 C2 01 F6 | 	mov	result1, _var01
02234     E7 C2 41 F0 | 	shr	result1, arg01
02238     06 CE 45 F0 | 	shr	arg01, #6
0223c     E7 C2 41 F7 | 	zerox	result1, arg01
02240                 | __system___pinread_ret
02240     2D 00 64 FD | 	ret
02244                 | 
02244                 | __system___waitms
02244     03 5A 05 F6 | 	mov	COUNT_, #3
02248     B0 00 A0 FD | 	call	#pushregs_
0224c     E7 D6 01 F6 | 	mov	local01, arg01
02250     14 D8 05 FB | 	rdlong	local02, #20
02254     C0 DD 9F FE | 	loc	pa,	#(@LR__0142-@LR__0141)
02258     93 00 A0 FD | 	call	#FCACHE_LOAD_
0225c                 | LR__0141
0225c     01 00 00 FF 
02260     E8 D7 5D F2 | 	cmps	local01, ##1000 wcz
02264     1F D8 61 1D |  if_a	waitx	local02
02268     01 00 00 1F 
0226c     E8 D7 85 11 |  if_a	sub	local01, ##1000
02270     E8 FF 9F 1D |  if_a	jmp	#LR__0141
02274                 | LR__0142
02274     0C BE 05 F1 | 	add	ptr___system__dat__, #12
02278     DF DA 09 FB | 	rdlong	local03, ptr___system__dat__ wz
0227c     0C BE 85 F1 | 	sub	ptr___system__dat__, #12
02280     20 00 90 5D |  if_ne	jmp	#LR__0143
02284     EC 24 02 F6 | 	mov	muldiva_, local02
02288     01 00 00 FF 
0228c     E8 27 06 F6 | 	mov	muldivb_, ##1000
02290     CC 00 A0 FD | 	call	#unsdivide_
02294     13 DB 01 F6 | 	mov	local03, muldivb_
02298     0C BE 05 F1 | 	add	ptr___system__dat__, #12
0229c     DF 26 62 FC | 	wrlong	muldivb_, ptr___system__dat__
022a0     0C BE 85 F1 | 	sub	ptr___system__dat__, #12
022a4                 | LR__0143
022a4     00 D6 5D F2 | 	cmps	local01, #0 wcz
022a8     ED D6 01 1D |  if_a	qmul	local01, local03
022ac     18 CE 61 1D |  if_a	getqx	arg01
022b0     1F CE 61 1D |  if_a	waitx	arg01
022b4     AF F0 03 F6 | 	mov	ptra, fp
022b8     BF 00 A0 FD | 	call	#popregs_
022bc                 | __system___waitms_ret
022bc     2D 00 64 FD | 	ret
022c0                 | 
022c0                 | LR__0144
022c0     20          | 	byte	" "
022c1     00          | 	byte	0
022c2                 | LR__0145
022c2     20 20 50 32 
022c6     20 52 65 74 
022ca     72 6F 6D 61 
022ce     63 68 69 6E 
022d2     65 20 76 2E 
022d6     20 30 2E 30 
022da     30          | 	byte	"  P2 Retromachine v. 0.00"
022db     00          | 	byte	0
022dc                 | LR__0146
022dc     20          | 	byte	" "
022dd     00          | 	byte	0
022de                 | LR__0147
022de     20 20 52 65 
022e2     61 64 79    | 	byte	"  Ready"
022e5     00          | 	byte	0
022e6                 | LR__0148
022e6     20          | 	byte	" "
022e7     00          | 	byte	0
022e8                 | LR__0149
022e8     20 20       | 	byte	"  "
022ea     00          | 	byte	0
022eb                 | LR__0150
022eb     43 3A 5C 6B 
022ef     65 72 6E 65 
022f3     6C 2E 69 6D 
022f7     67          | 	byte	"C:\kernel.img"
022f8     00          | 	byte	0
022f9                 | LR__0151
022f9     20 4D 69 64 
022fd     69 3A 20    | 	byte	" Midi: "
02300     00          | 	byte	0
02301                 | LR__0152
02301     20 20 4D 6F 
02305     75 73 65 20 
02309     6D 6F 76 65 
0230d     64 2C 20 78 
02311     3D 20       | 	byte	"  Mouse moved, x= "
02313     00          | 	byte	0
02314                 | LR__0153
02314     2C 20 79 3D 
02318     20          | 	byte	", y= "
02319     00          | 	byte	0
0231a                 | LR__0154
0231a     20 20 4D 6F 
0231e     75 73 65 20 
02322     6D 6F 76 65 
02326     64 2C 20 78 
0232a     3D 20       | 	byte	"  Mouse moved, x= "
0232c     00          | 	byte	0
0232d                 | LR__0155
0232d     2C 20 79 3D 
02331     20          | 	byte	", y= "
02332     00          | 	byte	0
02333                 | LR__0156
02333     20 20 4D 6F 
02337     75 73 65 20 
0233b     77 68 65 65 
0233f     6C 3A 20    | 	byte	"  Mouse wheel: "
02342     00          | 	byte	0
02343                 | LR__0157
02343     20 20 4D 6F 
02347     75 73 65 20 
0234b     6B 65 79 20 
0234f     70 72 65 73 
02353     73 65 64 3A 
02357     20          | 	byte	"  Mouse key pressed: "
02358     00          | 	byte	0
02359                 | LR__0158
02359     20 20 4D 6F 
0235d     75 73 65 20 
02361     63 6C 69 63 
02365     6B 65 64    | 	byte	"  Mouse clicked"
02368     00          | 	byte	0
02369                 | LR__0159
02369     20 20 4D 6F 
0236d     75 73 65 20 
02371     64 6F 75 62 
02375     6C 65 20 63 
02379     6C 69 63 6B 
0237d     65 64       | 	byte	"  Mouse double clicked"
0237f     00          | 	byte	0
02380                 | LR__0160
02380     20 20 4B 65 
02384     79 20 73 63 
02388     61 6E 63 6F 
0238c     64 65 20    | 	byte	"  Key scancode "
0238f     00          | 	byte	0
02390                 | LR__0161
02390     20 72 65 6C 
02394     65 61 73 65 
02398     64          | 	byte	" released"
02399     00          | 	byte	0
0239a                 | LR__0162
0239a     20 20 4B 65 
0239e     79 20 73 63 
023a2     61 6E 63 6F 
023a6     64 65 20    | 	byte	"  Key scancode "
023a9     00          | 	byte	0
023aa                 | LR__0163
023aa     2C 20 63 68 
023ae     61 72 63 6F 
023b2     64 65 20    | 	byte	", charcode "
023b5     00          | 	byte	0
023b6                 | LR__0164
023b6     20 70 72 65 
023ba     73 73 65 64 | 	byte	" pressed"
023be     00          | 	byte	0
023bf                 | LR__0165
023bf     20 20 4B 65 
023c3     79 20 6D 6F 
023c7     64 69 66 69 
023cb     65 72 20    | 	byte	"  Key modifier "
023ce     00          | 	byte	0
023cf                 | LR__0166
023cf     20 70 72 65 
023d3     73 73 65 64 | 	byte	" pressed"
023d7     00          | 	byte	0
023d8                 | LR__0167
023d8     20 20 4D 6F 
023dc     64 69 66 69 
023e0     65 72 73 20 
023e4     72 65 6C 65 
023e8     61 73 65 64 | 	byte	"  Modifiers released"
023ec     00          | 	byte	0
023ed     00 00 00    | 	alignl
023f0                 | _Hn007_20210302_dat_
023f0                 | 
023f0     00 00 00 00 
      ...             
02420     00 00 00 00 
02424     00 00 00    | st_font                 file "st4font.def"
02427     FF FF 00 00 
0242b     00 00 00 00 
0242f     00 18 18 18 
02433     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02437     18 18 18 18 
0243b     18 18 18 18 
0243f     18          | 	byte	$18[9]
02440     00 00 00 00 
02444     00 00 00    | 	byte	$00[7]
02447     FF FF 18 18 
0244b     18 18 18 18 
0244f     18 18 18 18 
02453     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
02457     FF FF 00 00 
0245b     00 00 00 00 
0245f     00 18 18 18 
02463     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02467     1F 1F 18 18 
0246b     18 18 18 18 
0246f     18 18 18 18 
02473     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
02477     F8 F8 18 18 
0247b     18 18 18 18 
0247f     18 00 00 00 
02483     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
02487     1F 1F 18 18 
0248b     18 18 18 18 
0248f     18 00 00 00 
02493     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
02497     F8 F8 18 18 
0249b     18 18 18 18 
0249f     18 18 18 18 
024a3     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
024a7     1F 1F 00 00 
024ab     00 00 00 00 
024af     00 18 18 18 
024b3     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
024b7     F8 F8 00 00 
024bb     00 00 00 00 
024bf     00 18 18 18 
024c3     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
024c7     FF FF 18 18 
024cb     18 18 18 18 
024cf     18 00 00 18 
024d3     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
024d7     66 7E 7E 66 
024db     66 66 66 30 
024df     18 00 00 7E 
024e3     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
024e7     3E 06 06 06 
024eb     06 7E 7E 18 
024ef     0C 30 18 3C 
024f3     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
024f7     06 06 06 66 
024fb     66 7E 3C 00 
024ff     00 30 18 66 
02503     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
02507     7E 7E 76 76 
0250b     66 66 66 00 
0250f     00 30 18 7C 
02513     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
02517     1C 38 70 60 
0251b     60 7E 3E 00 
0251f     00 30 18 7E 
02523     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
02527     18 0C 0C 06 
0252b     06 7E 7E 00 
0252f     00 18 18 00 
02533     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
02537     18 18 0C 0C 
0253b     06 7E 7E 00 
0253f     00 30 18 3C 
02543     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
02547     66 66 66 66 
0254b     66          | 	byte	$66[5]
0254c     7E 3C 00 00 
02550     00 00 06 06 
02554     06 06 16 1E 
02558     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
0255c     7E 7E 00 00 
02560     00 00 00 00 
02564     00 3C 7C 60 
02568     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
0256c     7E 7C 30 18 
02570     00 00 00 00 
02574     00 3C 7E 66 
02578     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
0257c     7E 7C 18 0C 
02580     00 00 30 18 
02584     00 3C 3E 06 
02588     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
0258c     7E 7C 00 00 
02590     00 00 30 18 
02594     00 3E 7E 66 
02598     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
0259c     66 66 00 00 
025a0     00 00 30 18 
025a4     00 7C 7E 06 
025a8     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
025ac     7E 3E 00 00 
025b0     00 00 30 18 
025b4     00 7E 7E 30 
025b8     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
025bc     7E 7E 00 00 
025c0     00 00 18 18 
025c4     00 7E 7E 30 
025c8     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
025cc     7E 7E 00 00 
025d0     00 00 30 18 
025d4     00 3C 7E 66 
025d8     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
025dc     7E 3C 00 00 
025e0     00 00 1C 1C 
025e4     18 18 38 3C 
025e8     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
025ec     3C 3C 00 00 
025f0     00 00 00 00 
025f4     00 00 00 00 
025f8     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
025fc     00 00 00 00 
02600     00 00       | 	byte	$00[6]
02602     18 18 18 18 
02606     18 18 18 18 | 	byte	$18[8]
0260a     00 00 18 18 
0260e     00 00 00 00 
02612     66 66 66 66 
02616     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
0261a     00 00 00 00 
0261e     00 00 00 00 
02622     00          | 	byte	$00[9]
02623     66 66 FF FF 
02627     66 66 FF FF 
0262b     66 66 00 00 
0262f     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
02633     7C 7E 06 06 
02637     3E 7C 60 60 
0263b     7E 3E 18 18 
0263f     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
02643     66 30 30 18 
02647     18 0C 0C 66 
0264b     66 00 00 00 
0264f     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
02653     66 66 3C 1C 
02657     1C FC FE 66 
0265b     66 FE FC 00 
0265f     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
02663     18 18 18 18 
02667     00 00 00 00 
0266b     00 00 00 00 
0266f     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
02673     18 1C 0C 0C 
02677     0C 0C 0C 0C 
0267b     1C 18 30 00 
0267f     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
02683     18 38 30 30 
02687     30 30 30 30 
0268b     38 18 0C 00 
0268f     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
02693     66 66 3C 3C 
02697     FF FF 3C 3C 
0269b     66 66 00 00 
0269f     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
026a3     00 18 18 18 
026a7     7E 7E 18 18 
026ab     18 00 00 00 
026af     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
026b3     00 00 00 00 
026b7     00 00       | 	byte	$00[6]
026b9     18 18 18 18 
026bd     18          | 	byte	$18[5]
026be     0C 04 00 00 
026c2     00 00 00 00 
026c6     7E 7E 00 00 
026ca     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
026ce     00 00 00 00 
026d2     00 00 00 00 
026d6     00 00 00 00 
026da     00          | 	byte	$00[13]
026db     18 18 18 00 
026df     00 00 00 60 
026e3     60 60 30 30 
026e7     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
026eb     06 06 06 00 
026ef     00 00 00 3C 
026f3     7E 66 66 66 
026f7     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
026fb     66 7E 3C 00 
026ff     00 00 00 18 
02703     18 1C 1C 18 
02707     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
0270b     18 7E 7E 00 
0270f     00 00 00 3C 
02713     7E 66 66 30 
02717     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
0271b     0C 7E 7E 00 
0271f     00 00 00 7E 
02723     7E 30 30 18 
02727     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
0272b     66 7E 3C 00 
0272f     00 00 00 30 
02733     30 38 38 3C 
02737     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
0273b     7E 30 30 00 
0273f     00 00 00 7E 
02743     7E 06 06 3E 
02747     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
0274b     66 7E 3C 00 
0274f     00 00 00 38 
02753     3C 0E 06 06 
02757     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
0275b     66 7E 3C 00 
0275f     00 00 00 7E 
02763     7E 60 60 30 
02767     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
0276b     0C 0C 0C 00 
0276f     00 00 00 3C 
02773     7E 66 66 3C 
02777     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
0277b     66 7E 3C 00 
0277f     00 00 00 3C 
02783     7E 66 66 7E 
02787     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
0278b     70 3C 1C 00 
0278f     00 00 00 00 
02793     00 00 18 18 
02797     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
0279b     18 18 18 00 
0279f     00 00 00 00 
027a3     00 00 18 18 
027a7     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
027ab     18 18 18 0C 
027af     04 00 00 00 
027b3     70 38 1C 0E 
027b7     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
027bb     70 00 00 00 
027bf     00 00 00 00 
027c3     00 00 7E 7E 
027c7     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
027cb     00 00 00 00 
027cf     00 00 00 00 | 	byte	$00[8]
027d3     0E 1C 38 70 
027d7     E0 70 38 1C 
027db     0E 00 00 00 
027df     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
027e3     7E 66 66 30 
027e7     30 18 18 18 
027eb     00 18 18 00 
027ef     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
027f3     7E 66 66 66 
027f7     66 36 06 66 
027fb     66 7E 3C 00 
027ff     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
02803     3C 7E 66 66 
02807     66 7E 7E 66 
0280b     66 66 66 00 
0280f     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
02813     7E 66 66 7E 
02817     3E 66 66 66 
0281b     66 7E 3E 00 
0281f     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
02823     7E 66 66 06 
02827     06 06 06 66 
0282b     66 7E 3C 00 
0282f     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
02833     7E 66 66 66 
02837     66 66 66 66 
0283b     66 7E 3E 00 
0283f     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
02843     7E 06 06 3E 
02847     3E 06 06 06 
0284b     06 7E 7E 00 
0284f     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
02853     7E 06 06 3E 
02857     3E 06 06 06 
0285b     06 06 06 00 
0285f     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
02863     7E 06 06 76 
02867     76 66 66 66 
0286b     66 7E 3C 00 
0286f     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
02873     66 66 66 7E 
02877     7E 66 66 66 
0287b     66 66 66 00 
0287f     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
02883     7E 18 18 18 
02887     18 18 18 18 
0288b     18 7E 7E 00 
0288f     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
02893     60 60 60 60 
02897     60 60 60    | 	byte	$60[7]
0289a     66 66 7E 3C 
0289e     00 00 00 00 
028a2     66 66 36 36 
028a6     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
028aa     66 66 C6 C6 
028ae     00 00 00 00 
028b2     06 06 06 06 
028b6     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
028ba     06 06 7E 7E 
028be     00 00 00 00 
028c2     C6 C6 EE EE 
028c6     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
028ca     C6 C6 C6 C6 
028ce     00 00 00 00 
028d2     66 66 66 6E 
028d6     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
028da     76 66 66 66 
028de     00 00 00 00 
028e2     3C 7E 66 66 
028e6     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
028ea     66 66 7E 3C 
028ee     00 00 00 00 
028f2     3E 7E 66 66 
028f6     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
028fa     06 06 06 06 
028fe     00 00 00 00 
02902     3C 7E 66 66 
02906     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
0290a     66 56 3E 6C 
0290e     00 00 00 00 
02912     3E 7E 66 66 
02916     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
0291a     66 66 C6 C6 
0291e     00 00 00 00 
02922     7C 7E 06 06 
02926     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
0292a     60 60 7E 3E 
0292e     00 00 00 00 
02932     7E 7E 18 18 
02936     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
0293a     18 18 18 18 
0293e     00 00 00 00 
02942     66 66 66 66 
02946     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
0294a     66 66 7E 3C 
0294e     00 00 00 00 
02952     66 66 66 66 
02956     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
0295a     3C 3C 18 18 
0295e     00 00 00 00 
02962     C6 C6 C6 C6 
02966     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
0296a     FE EE C6 82 
0296e     00 00 00 00 
02972     66 66 66 3C 
02976     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
0297a     3C 66 66 66 
0297e     00 00 00 00 
02982     66 66 66 66 
02986     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
0298a     18 18 18 18 
0298e     00 00 00 00 
02992     7E 7E 30 30 
02996     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
0299a     06 06 7E 7E 
0299e     00 00 00 00 
029a2     3C 3C 0C 0C 
029a6     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
029aa     0C 0C 3C 3C 
029ae     00 00 00 00 
029b2     06 06 0C 0C 
029b6     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
029ba     60 60 C0 C0 
029be     00 00 00 00 
029c2     3C 3C 30 30 
029c6     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
029ca     30 30 3C 3C 
029ce     00 00 00 00 
029d2     18 18 3C 3C 
029d6     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
029da     00 00 00 00 
029de     00 00 00 00 
029e2     00 00 00 00 
029e6     00 00 00 00 
029ea     00 00       | 	byte	$00[18]
029ec     FE FE 00 00 
029f0     00 00 0C 0C 
029f4     18 18 00 00 
029f8     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
029fc     00 00 00 00 
02a00     00 00 00 00 
02a04     00          | 	byte	$00[9]
02a05     3C 7C 60 7C 
02a09     7E 66 66 7E 
02a0d     7C 00 00 00 
02a11     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
02a15     3E 7E 66 66 
02a19     66 66 66 7E 
02a1d     3E 00 00 00 
02a21     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
02a25     3C 3E 06 06 
02a29     06 06 06 7E 
02a2d     7C 00 00 00 
02a31     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
02a35     7C 7E 66 66 
02a39     66 66 66 7E 
02a3d     7C 00 00 00 
02a41     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
02a45     3C 7E 66 66 
02a49     7E 06 06 7E 
02a4d     7C 00 00 00 
02a51     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
02a55     18 7E 7E 18 
02a59     18 18 18 18 
02a5d     18 00 00 00 
02a61     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
02a65     7C 7E 66 66 
02a69     66 66 7E 7C 
02a6d     60 7E 3E 00 
02a71     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
02a75     3E 7E 66 66 
02a79     66 66 66 66 
02a7d     66 00 00 00 
02a81     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
02a85     1C 1C 18 18 
02a89     18 18 18 3C 
02a8d     3C 00 00 00 
02a91     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
02a95     30 30 30 30 
02a99     30 30 30 30 
02a9d     30          | 	byte	$30[9]
02a9e     3E 1E 00 00 
02aa2     06 06 06 36 
02aa6     36 1E 1E 1E 
02aaa     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
02aae     00 00 00 00 
02ab2     1C 1C 18 18 
02ab6     18 18 18 18 
02aba     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
02abe     00 00 00 00 
02ac2     00 00 00    | 	byte	$00[7]
02ac5     6C FE FE D6 
02ac9     D6 C6 C6 C6 
02acd     C6 00 00 00 
02ad1     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
02ad5     3E 7E 66 66 
02ad9     66 66 66 66 
02add     66 00 00 00 
02ae1     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
02ae5     3C 7E 66 66 
02ae9     66 66 66 7E 
02aed     3C 00 00 00 
02af1     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
02af5     3E 7E 66 66 
02af9     66 66 66 7E 
02afd     3E 06 06 00 
02b01     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
02b05     7C 7E 66 66 
02b09     66 66 66 7E 
02b0d     7C 60 60 00 
02b11     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
02b15     3E 7E 66 06 
02b19     06 06 06 06 
02b1d     06 00 00 00 
02b21     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
02b25     7C 7E 06 0E 
02b29     3C 70 60 7E 
02b2d     3E 00 00 00 
02b31     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
02b35     7E 7E 18 18 
02b39     18 18 18 78 
02b3d     70 00 00 00 
02b41     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
02b45     66 66 66 66 
02b49     66 66 66    | 	byte	$66[7]
02b4c     7E 7C 00 00 
02b50     00 00 00 00 
02b54     00 66 66 66 
02b58     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
02b5c     18 18 00 00 
02b60     00 00 00 00 
02b64     00 C6 C6 D6 
02b68     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
02b6c     C6 82 00 00 
02b70     00 00 00 00 
02b74     00 66 66 3C 
02b78     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
02b7c     66 66 00 00 
02b80     00 00 00 00 
02b84     00 66 66 66 
02b88     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
02b8c     7C 60 7E 3E 
02b90     00 00 00 00 
02b94     00 7E 7E 30 
02b98     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
02b9c     7E 7E 00 00 
02ba0     00 00 30 18 
02ba4     18 18 18 0C 
02ba8     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
02bac     18 30 00 00 
02bb0     00 00 18 18 
02bb4     18 18 18 18 
02bb8     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
02bbc     18 18 00 00 
02bc0     00 00 0C 18 
02bc4     18 18 18 30 
02bc8     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
02bcc     18 0C 00 00 
02bd0     00 00 6C 7E 
02bd4     36 00 00 00 
02bd8     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
02bdc     00 00 00 00 
02be0     00 00 00 00 
02be4     00          | 	byte	$00[9]
02be5     18 18 18 18 
02be9     18 18 00 00 
02bed     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
02bf0                 | 'vga_font                                file "st4font.def"
02bf0     00 00 00 00 
02bf4     00 00 00 00 
02bf8     00 00 00 00 
02bfc     00 00 00 00 
02c00     00 00 00    | vga_font                                file "vgafont.def"
02c03     7E 81 A5 81 
02c07     81 BD 99 81 
02c0b     81 7E 00 00 
02c0f     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
02c13     7E FF DB FF 
02c17     FF C3 E7 FF 
02c1b     FF 7E 00 00 
02c1f     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
02c23     00 36 7F 7F 
02c27     7F 7F 3E 1C 
02c2b     08 00 00 00 
02c2f     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
02c33     00 08 1C 3E 
02c37     7F 3E 1C 08 
02c3b     00 00 00 00 
02c3f     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
02c43     18 3C 3C E7 
02c47     E7 E7 18 18 
02c4b     3C 00 00 00 
02c4f     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
02c53     18 3C 7E FF 
02c57     FF 7E 18 18 
02c5b     3C 00 00 00 
02c5f     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
02c63     00 00 00 18 
02c67     3C 3C 18 00 
02c6b     00 00 00 00 
02c6f     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
02c73     FF FF FF E7 
02c77     C3 C3 E7 FF 
02c7b     FF FF FF FF 
02c7f     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
02c83     00 00 3C 66 
02c87     42 42 66 3C 
02c8b     00 00 00 00 
02c8f     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
02c93     FF FF C3 99 
02c97     BD BD 99 C3 
02c9b     FF FF FF FF 
02c9f     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
02ca3     78 70 58 4C 
02ca7     1E 33 33 33 
02cab     33 1E 00 00 
02caf     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
02cb3     3C 66 66 66 
02cb7     66 3C 18 7E 
02cbb     18 18 00 00 
02cbf     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
02cc3     FC CC FC 0C 
02cc7     0C 0C 0C 0E 
02ccb     0F 07 00 00 
02ccf     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
02cd3     FE C6 FE C6 
02cd7     C6 C6 C6 E6 
02cdb     E7 67 03 00 
02cdf     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
02ce3     18 18 DB 3C 
02ce7     E7 3C DB 18 
02ceb     18 00 00 00 
02cef     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
02cf3     03 07 0F 1F 
02cf7     7F 1F 0F 07 
02cfb     03 01 00 00 
02cff     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
02d03     60 70 78 7C 
02d07     7F 7C 78 70 
02d0b     60 40 00 00 
02d0f     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
02d13     18 3C 7E 18 
02d17     18 18 7E 3C 
02d1b     18 00 00 00 
02d1f     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
02d23     66 66 66 66 
02d27     66 66 66    | 	byte	$66[7]
02d2a     00 66 66 00 
02d2e     00 00 00 00 
02d32     00 FE DB DB 
02d36     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
02d3a     D8 D8 D8 00 
02d3e     00 00 00 3E 
02d42     63 06 1C 36 
02d46     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
02d4a     30 63 3E 00 
02d4e     00 00 00 00 
02d52     00 00 00 00 
02d56     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
02d5a     7F 7F 7F 00 
02d5e     00 00 00 00 
02d62     00 18 3C 7E 
02d66     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
02d6a     3C 18 7E 00 
02d6e     00 00 00 00 
02d72     00 18 3C 7E 
02d76     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
02d7a     18 18 18 00 
02d7e     00 00 00 00 
02d82     00 18 18 18 
02d86     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
02d8a     7E 3C 18 00 
02d8e     00 00 00 00 
02d92     00 00 00 18 
02d96     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
02d9a     00 00 00 00 
02d9e     00 00 00 00 
02da2     00 00 00    | 	byte	$00[11]
02da5     0C 06 7F 06 
02da9     0C 00 00 00 
02dad     00 00 00 00 
02db1     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
02db5     00 03 03 03 
02db9     7F 00 00 00 
02dbd     00 00 00 00 
02dc1     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
02dc5     14 36 7F 36 
02dc9     14 00 00 00 
02dcd     00 00 00 00 
02dd1     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
02dd5     1C 1C 3E 3E 
02dd9     7F 7F 00 00 
02ddd     00 00 00 00 
02de1     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
02de5     7F 3E 3E 1C 
02de9     1C 08 00 00 
02ded     00 00 00 00 
02df1     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
02df5     00 00 00 00 
02df9     00 00 00 00 
02dfd     00 00 00 00 
02e01     00 00       | 	byte	$00[14]
02e03     18 3C 3C 3C 
02e07     18 18 18 00 
02e0b     18 18 00 00 
02e0f     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
02e13     66 24 00 00 
02e17     00 00 00 00 
02e1b     00 00 00 00 
02e1f     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
02e23     00 36 36 7F 
02e27     36 36 36 7F 
02e2b     36 36 00 00 
02e2f     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
02e33     3E 63 43 03 
02e37     3E 60 60 61 
02e3b     63 3E 18 18 
02e3f     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
02e43     00 00 43 63 
02e47     30 18 0C 06 
02e4b     63 61 00 00 
02e4f     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
02e53     1C 36 36 1C 
02e57     6E 3B 33 33 
02e5b     33 6E 00 00 
02e5f     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
02e63     0C 0C 0C 06 
02e67     00 00 00 00 
02e6b     00 00 00 00 
02e6f     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
02e73     30 18 0C 0C 
02e77     0C 0C 0C 0C 
02e7b     18 30 00 00 
02e7f     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
02e83     0C 18 30 30 
02e87     30 30 30 30 
02e8b     18 0C 00 00 
02e8f     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
02e93     00 00 00 66 
02e97     3C FF 3C 66 
02e9b     00 00 00 00 
02e9f     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
02ea3     00 00 00 18 
02ea7     18 7E 18 18 
02eab     00 00 00 00 
02eaf     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
02eb3     00 00 00 00 
02eb7     00 00 00 00 | 	byte	$00[8]
02ebb     18 18 18 0C 
02ebf     00 00 00 00 
02ec3     00 00 00 00 
02ec7     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
02ecb     00 00 00 00 
02ecf     00 00 00 00 
02ed3     00 00 00 00 
02ed7     00 00 00 00 | 	byte	$00[16]
02edb     18 18 00 00 
02edf     00 00 00 00 
02ee3     00 00 40 60 
02ee7     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
02eeb     03 01 00 00 
02eef     00 00 00 00 
02ef3     1C 36 63 63 
02ef7     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
02efb     36 1C 00 00 
02eff     00 00 00 00 
02f03     18 1C 1E 18 
02f07     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
02f0b     18 7E 00 00 
02f0f     00 00 00 00 
02f13     3E 63 60 30 
02f17     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
02f1b     63 7F 00 00 
02f1f     00 00 00 00 
02f23     3E 63 60 60 
02f27     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
02f2b     63 3E 00 00 
02f2f     00 00 00 00 
02f33     30 38 3C 36 
02f37     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
02f3b     30 78 00 00 
02f3f     00 00 00 00 
02f43     7F 03 03 03 
02f47     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
02f4b     63 3E 00 00 
02f4f     00 00 00 00 
02f53     1C 06 03 03 
02f57     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
02f5b     63 3E 00 00 
02f5f     00 00 00 00 
02f63     7F 63 60 60 
02f67     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
02f6b     0C 0C 00 00 
02f6f     00 00 00 00 
02f73     3E 63 63 63 
02f77     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
02f7b     63 3E 00 00 
02f7f     00 00 00 00 
02f83     3E 63 63 63 
02f87     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
02f8b     30 1E 00 00 
02f8f     00 00 00 00 
02f93     00 00 00 18 
02f97     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
02f9b     18 18 00 00 
02f9f     00 00 00 00 
02fa3     00 00 00 18 
02fa7     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
02fab     18 18 0C 00 
02faf     00 00 00 00 
02fb3     00 60 30 18 
02fb7     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
02fbb     30 60 00 00 
02fbf     00 00 00 00 
02fc3     00 00 00 7E 
02fc7     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
02fcb     00 00 00 00 
02fcf     00 00 00 00 
02fd3     00          | 	byte	$00[9]
02fd4     06 0C 18 30 
02fd8     60 30 18 0C 
02fdc     06 00 00 00 
02fe0     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
02fe4     63 63 30 18 
02fe8     18 18 00 18 
02fec     18 00 00 00 
02ff0     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
02ff4     3E 63 63 7B 
02ff8     7B 7B 3B 03 
02ffc     3E 00 00 00 
03000     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03004     1C 36 63 63 
03008     7F 63 63 63 
0300c     63 00 00 00 
03010     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03014     66 66 66 3E 
03018     66 66 66 66 
0301c     3F 00 00 00 
03020     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03024     66 43 03 03 
03028     03 03 43 66 
0302c     3C 00 00 00 
03030     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
03034     36 66 66 66 
03038     66 66 66 36 
0303c     1F 00 00 00 
03040     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
03044     66 46 16 1E 
03048     16 06 46 66 
0304c     7F 00 00 00 
03050     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
03054     66 46 16 1E 
03058     16 06 06 06 
0305c     0F 00 00 00 
03060     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
03064     66 43 03 03 
03068     7B 63 63 66 
0306c     5C 00 00 00 
03070     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
03074     63 63 63 7F 
03078     63 63 63 63 
0307c     63 00 00 00 
03080     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
03084     18 18 18 18 
03088     18 18 18 18 | 	byte	$18[8]
0308c     3C 00 00 00 
03090     00 00 00 78 
03094     30 30 30 30 
03098     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
0309c     1E 00 00 00 
030a0     00 00 00 67 
030a4     66 66 36 1E 
030a8     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
030ac     67 00 00 00 
030b0     00 00 00 0F 
030b4     06 06 06 06 
030b8     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
030bc     7F 00 00 00 
030c0     00 00 00 63 
030c4     77 7F 7F 6B 
030c8     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
030cc     63 00 00 00 
030d0     00 00 00 63 
030d4     67 6F 7F 7B 
030d8     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
030dc     63 00 00 00 
030e0     00 00 00 3E 
030e4     63 63 63 63 
030e8     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
030ec     3E 00 00 00 
030f0     00 00 00 3F 
030f4     66 66 66 3E 
030f8     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
030fc     0F 00 00 00 
03100     00 00 00 3E 
03104     63 63 63 63 
03108     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
0310c     3E 30 70 00 
03110     00 00 00 3F 
03114     66 66 66 3E 
03118     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
0311c     67 00 00 00 
03120     00 00 00 3E 
03124     63 63 06 1C 
03128     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
0312c     3E 00 00 00 
03130     00 00 00 7E 
03134     7E 5A 18 18 
03138     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
0313c     3C 00 00 00 
03140     00 00 00 63 
03144     63 63 63 63 
03148     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
0314c     3E 00 00 00 
03150     00 00 00 63 
03154     63 63 63 63 
03158     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
0315c     08 00 00 00 
03160     00 00 00 63 
03164     63 63 63 6B 
03168     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
0316c     36 00 00 00 
03170     00 00 00 63 
03174     63 36 3E 1C 
03178     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
0317c     63 00 00 00 
03180     00 00 00 66 
03184     66 66 66 3C 
03188     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
0318c     3C 00 00 00 
03190     00 00 00 7F 
03194     63 61 30 18 
03198     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
0319c     7F 00 00 00 
031a0     00 00 00 3C 
031a4     0C 0C 0C 0C 
031a8     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
031ac     3C 00 00 00 
031b0     00 00 00 00 
031b4     01 03 07 0E 
031b8     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
031bc     40 00 00 00 
031c0     00 00 00 3C 
031c4     30 30 30 30 
031c8     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
031cc     3C 00 00 00 
031d0     1C 36 00 00 
031d4     00 00 00 00 
031d8     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
031dc     00 00 00 00 
031e0     00 00 00 00 
031e4     00 00 00 00 
031e8     00 00 00 00 
031ec     00          | 	byte	$00[17]
031ed     FF 00 00 0C 
031f1     18 00 00 00 
031f5     00 00 00 00 
031f9     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
031fd     00 00 00 00 
03201     00 00 00 00 
03205     00          | 	byte	$00[9]
03206     1E 30 3E 33 
0320a     33 33 6E 00 
0320e     00 00 00 00 
03212     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
03216     1E 36 66 66 
0321a     66 66 3E 00 
0321e     00 00 00 00 
03222     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03226     3E 63 03 03 
0322a     03 63 3E 00 
0322e     00 00 00 00 
03232     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
03236     3C 36 33 33 
0323a     33 33 6E 00 
0323e     00 00 00 00 
03242     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03246     3E 63 7F 03 
0324a     03 63 3E 00 
0324e     00 00 00 00 
03252     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
03256     0C 1E 0C 0C 
0325a     0C 0C 1E 00 
0325e     00 00 00 00 
03262     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03266     6E 33 33 33 
0326a     33 33 3E 30 
0326e     33 1E 00 00 
03272     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
03276     36 6E 66 66 
0327a     66 66 67 00 
0327e     00 00 00 00 
03282     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
03286     1C 18 18 18 
0328a     18 18 3C 00 
0328e     00 00 00 00 
03292     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
03296     70 60 60 60 
0329a     60 60 60 66 
0329e     66 3C 00 00 
032a2     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
032a6     66 36 1E 1E 
032aa     36 66 67 00 
032ae     00 00 00 00 
032b2     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
032b6     18 18 18 18 
032ba     18 18       | 	byte	$18[6]
032bc     3C 00 00 00 
032c0     00 00 00 00 
032c4     00 00 37 7F 
032c8     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
032cc     63 00 00 00 
032d0     00 00 00 00 
032d4     00 00 3B 66 
032d8     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
032dc     66 00 00 00 
032e0     00 00 00 00 
032e4     00 00 3E 63 
032e8     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
032ec     3E 00 00 00 
032f0     00 00 00 00 
032f4     00 00 3B 66 
032f8     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
032fc     3E 06 06 0F 
03300     00 00 00 00 
03304     00 00 6E 33 
03308     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
0330c     3E 30 30 78 
03310     00 00 00 00 
03314     00 00 3B 6E 
03318     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
0331c     0F 00 00 00 
03320     00 00 00 00 
03324     00 00 3E 63 
03328     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
0332c     3E 00 00 00 
03330     00 00 00 08 
03334     0C 0C 3F 0C 
03338     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
0333c     38 00 00 00 
03340     00 00 00 00 
03344     00 00 33 33 
03348     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
0334c     6E 00 00 00 
03350     00 00 00 00 
03354     00 00 63 63 
03358     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
0335c     1C 00 00 00 
03360     00 00 00 00 
03364     00 00 63 63 
03368     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
0336c     36 00 00 00 
03370     00 00 00 00 
03374     00 00 63 36 
03378     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
0337c     63 00 00 00 
03380     00 00 00 00 
03384     00 00 63 63 
03388     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
0338c     7E 60 30 1F 
03390     00 00 00 00 
03394     00 00 7F 33 
03398     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
0339c     7F 00 00 00 
033a0     00 00 00 70 
033a4     18 18 18 0E 
033a8     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
033ac     70 00 00 00 
033b0     00 00 00 18 
033b4     18 18 18 18 
033b8     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
033bc     18 00 00 00 
033c0     00 00 00 0E 
033c4     18 18 18 70 
033c8     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
033cc     0E 00 00 00 
033d0     6E 3B 00 00 
033d4     00 00 00 00 
033d8     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
033dc     00 00 00 00 
033e0     00 00 00 00 
033e4     00 00       | 	byte	$00[10]
033e6     08 1C 36 63 
033ea     63 63 7F 00 
033ee     00 00 00 00 
033f2     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
033f6     03 03 03 03 
033fa     43 66 3C 18 
033fe     30 1E 00 00 
03402     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
03406     33 33 33 33 
0340a     33 33       | 	byte	$33[6]
0340c     6E 00 00 00 
03410     00 00 60 30 
03414     18 00 3E 63 
03418     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
0341c     3E 00 00 00 
03420     00 00 08 1C 
03424     36 00 1E 30 
03428     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
0342c     6E 00 00 00 
03430     00 00 00 00 
03434     33 00 1E 30 
03438     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
0343c     6E 00 00 00 
03440     00 00 1C 36 
03444     1C 00 33 33 
03448     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
0344c     6E 00 00 00 
03450     00 00 60 30 
03454     18 00 3E 63 
03458     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
0345c     3E 00 00 00 
03460     00 00 00 00 
03464     00 00 3E 63 
03468     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
0346c     3E 18 30 1E 
03470     00 00 00 1C 
03474     58 78 38 18 
03478     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
0347c     3C 00 00 00 
03480     00 00 00 00 
03484     63 00 3E 63 
03488     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
0348c     3E 00 00 00 
03490     66 33 00 3E 
03494     63 63 63 63 
03498     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0349c     3E 00 00 00 
034a0     00 00 CC 66 
034a4     33 00 3E 63 
034a8     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
034ac     3E 00 00 00 
034b0     00 00 18 3C 
034b4     66 00 1C 18 
034b8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
034bc     3C 00 00 00 
034c0     30 18 00 7F 
034c4     63 61 30 18 
034c8     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
034cc     7F 00 00 00 
034d0     00 63 00 08 
034d4     1C 36 63 63 
034d8     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
034dc     63 00 00 00 
034e0     30 18 00 3C 
034e4     66 43 03 03 
034e8     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
034ec     3C 00 00 00 
034f0     30 18 00 7F 
034f4     66 46 16 1E 
034f8     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
034fc     7F 00 00 00 
03500     0C 06 00 0F 
03504     06 06 06 06 
03508     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
0350c     7F 00 00 00 
03510     30 18 00 1C 
03514     18 18 18 18 
03518     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
0351c     3C 00 00 00 
03520     00 00 08 1C 
03524     36 00 3E 63 
03528     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
0352c     3E 00 00 00 
03530     00 00 00 00 
03534     63 00 3E 63 
03538     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
0353c     3E 00 00 00 
03540     00 00 00 6F 
03544     46 26 06 06 
03548     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
0354c     7F 00 00 00 
03550     00 00 00 6E 
03554     4C 2C 0C 0C 
03558     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
0355c     1E 00 00 00 
03560     30 18 00 3E 
03564     63 63 06 1C 
03568     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
0356c     3E 00 00 00 
03570     00 00 60 30 
03574     18 00 3E 63 
03578     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
0357c     3E 00 00 00 
03580     00 63 00 3E 
03584     63 63 63 63 
03588     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
0358c     3E 00 00 00 
03590     00 63 00 63 
03594     63 63 63 63 
03598     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
0359c     3E 00 00 00 
035a0     6C 38 00 7E 
035a4     7E 5A 18 18 
035a8     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
035ac     3C 00 00 00 
035b0     00 00 60 48 
035b4     2C 0C 3F 0C 
035b8     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
035bc     38 00 00 00 
035c0     00 00 00 0F 
035c4     26 36 1E 0E 
035c8     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
035cc     7F 00 00 00 
035d0     00 00 00 00 
035d4     00 63 36 1C 
035d8     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
035dc     00 00 00 00 
035e0     00 00       | 	byte	$00[6]
035e2     36 1C 08 00 
035e6     3E 63 03 03 
035ea     03 63 3E 00 
035ee     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
035f2     30 18 0C 00 
035f6     1E 30 3E 33 
035fa     33 33 6E 00 
035fe     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
03602     60 30 18 00 
03606     1C 18 18 18 
0360a     18 18 3C 00 
0360e     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
03612     60 30 18 00 
03616     3E 63 63 63 
0361a     63 63 3E 00 
0361e     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
03622     30 18 0C 00 
03626     33 33 33 33 
0362a     33 33 6E 00 
0362e     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
03632     00 08 1C 36 
03636     63 63 7F 63 
0363a     63 63 63 18 
0363e     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
03642     00 00 00 00 
03646     1E 30 3E 33 
0364a     33 33 6E 18 
0364e     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
03652     00 7F 63 61 
03656     30 18 0C 06 
0365a     43 63 7F 00 
0365e     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
03662     36 1C 08 00 
03666     7F 33 18 0C 
0366a     06 63 7F 00 
0366e     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
03672     00 7F 66 46 
03676     16 1E 16 06 
0367a     46 66 7F 18 
0367e     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
03682     00 00 00 00 
03686     3E 63 7F 03 
0368a     03 63 3E 18 
0368e     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
03692     00 3C 66 03 
03696     1F 03 0F 03 
0369a     03 66 3C 00 
0369e     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
036a2     60 30 18 00 
036a6     7F 33 18 0C 
036aa     06 63 7F 00 
036ae     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
036b2     00 3C 66 43 
036b6     03 03 03 03 
036ba     43 66 3C 00 
036be     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
036c2     00 00 00 00 
036c6     3E 63 06 1C 
036ca     30 63 3E 18 
036ce     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
036d2     00 00 00 00 
036d6     00 00       | 	byte	$00[6]
036d8     6C 36 1B 36 
036dc     6C 00 00 00 
036e0     00 00 00 00 
036e4     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
036e8     1B 36 6C 36 
036ec     1B 00 00 00 
036f0     88 22 88 22 
036f4     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
036f8     88 22 88 22 
036fc     88 22 88 22 
03700     AA 55 AA 55 
03704     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
03708     AA 55 AA 55 
0370c     AA 55 AA 55 
03710     BB EE BB EE 
03714     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
03718     BB EE BB EE 
0371c     BB EE BB EE 
03720     18 18 18 18 
03724     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
03728     18 18 18 18 
0372c     18 18 18 18 
03730     18 18 18 18 
03734     18 18 18    | 	byte	$18[15]
03737     1F 18 18 18 
0373b     18 18 18 18 
0373f     18 30 18 00 
03743     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
03747     63 7F 63 63 
0374b     63 63 00 00 
0374f     00 1C 36 00 
03753     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
03757     63 7F 63 63 
0375b     63 63 00 00 
0375f     00 36 1C 00 
03763     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
03767     1E 16 06 46 
0376b     66 7F 00 00 
0376f     00 00 00 00 
03773     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
03777     1C 30 60 63 
0377b     63 3E 18 30 
0377f     1E 6C 6C 6C 
03783     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
03787     6F 6C 6C 6C 
0378b     6C 6C 6C 6C 
0378f     6C 6C 6C 6C 
03793     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
03797     6C 6C 6C 6C 
0379b     6C 6C 6C 6C 
0379f     6C          | 	byte	$6c[9]
037a0     00 00 00 00 
037a4     00          | 	byte	$00[5]
037a5     7F 60 6F 6C 
037a9     6C 6C 6C 6C 
037ad     6C 6C 6C 6C 
037b1     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
037b5     6F 60 7F 00 
037b9     00 00 00 00 
037bd     00 00 00 18 
037c1     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
037c5     61 30 18 0C 
037c9     06 43 63 7F 
037cd     00 00 00 00 
037d1     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
037d5     00 7F 33 18 
037d9     0C 06 63 7F 
037dd     00 00 00 00 
037e1     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
037e5     00 00 1F 18 
037e9     18 18 18 18 
037ed     18 18 18 18 
037f1     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
037f5     18 18 F8 00 
037f9     00 00 00 00 
037fd     00 00 00 18 
03801     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
03805     18 18 FF 00 
03809     00 00 00 00 
0380d     00 00 00 00 
03811     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03815     00 00 FF 18 
03819     18 18 18 18 
0381d     18 18 18 18 
03821     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
03825     18 18 F8 18 
03829     18 18 18 18 
0382d     18 18 18 00 
03831     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
03835     00 00 FF 00 
03839     00 00 00 00 
0383d     00 00 00 18 
03841     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
03845     18 18 FF 18 
03849     18 18 18 18 
0384d     18 18 18 63 
03851     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
03855     36 63 63 7F 
03859     63 63 63 63 
0385d     00 00 00 00 
03861     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
03865     00 1E 30 3E 
03869     33 33 33 6E 
0386d     00 00 00 6C 
03871     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
03875     EC 0C FC 00 
03879     00 00 00 00 
0387d     00 00 00 00 
03881     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03885     FC 0C EC 6C 
03889     6C 6C 6C 6C 
0388d     6C 6C 6C 6C 
03891     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
03895     EF 00 FF 00 
03899     00 00 00 00 
0389d     00 00 00 00 
038a1     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
038a5     FF 00 EF 6C 
038a9     6C 6C 6C 6C 
038ad     6C 6C 6C 6C 
038b1     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
038b5     EC 0C EC 6C 
038b9     6C 6C 6C 6C 
038bd     6C 6C 6C 00 
038c1     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
038c5     FF 00 FF 00 
038c9     00 00 00 00 
038cd     00 00 00 6C 
038d1     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
038d5     EF 00 EF 6C 
038d9     6C 6C 6C 6C 
038dd     6C 6C 6C 00 
038e1     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
038e5     63 3E 63 63 
038e9     63 63 3E 63 
038ed     00 00 00 00 
038f1     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
038f5     30 3C 36 33 
038f9     33 33 33 6E 
038fd     00 00 00 00 
03901     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
03905     66 66 6F 66 
03909     66 66 36 1F 
0390d     00 00 00 36 
03911     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
03915     66 66 66 66 
03919     66 66       | 	byte	$66[6]
0391b     36 1F 00 00 
0391f     00 00 63 00 
03923     7F 66 46 16 
03927     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
0392b     66 7F 00 00 
0392f     00 6C 38 00 
03933     38 30 30 3C 
03937     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
0393b     33 6E 00 00 
0393f     00 36 1C 00 
03943     63 67 6F 7F 
03947     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
0394b     63 63 00 00 
0394f     00 30 18 00 
03953     3C 18 18 18 
03957     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
0395b     18 3C 00 00 
0395f     00 3C 66 00 
03963     3C 18 18 18 
03967     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
0396b     18 3C 00 00 
0396f     00 00 00 36 
03973     1C 08 00 3E 
03977     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
0397b     63 3E 00 00 
0397f     00 18 18 18 
03983     18 18 18 18 
03987     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
0398b     00 00 00 00 
0398f     00 00 00 00 
03993     00 00 00 00 | 	byte	$00[12]
03997     F8 18 18 18 
0399b     18 18 18 18 
0399f     18 FF FF FF 
039a3     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
039a7     FF FF FF FF 
039ab     FF FF FF FF 
039af     FF          | 	byte	$ff[9]
039b0     00 00 00 00 
039b4     00 00 00    | 	byte	$00[7]
039b7     FF FF FF FF 
039bb     FF FF FF FF 
039bf     FF          | 	byte	$ff[9]
039c0     00 00 00 7E 
039c4     7E 5A 18 18 
039c8     18 18 18 18 
039cc     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
039d0     1C 36 1C 63 
039d4     63 63 63 63 
039d8     63 63 63 63 
039dc     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
039e0     FF FF FF FF 
039e4     FF FF FF    | 	byte	$ff[7]
039e7     00 00 00 00 
039eb     00 00 00 00 
039ef     00          | 	byte	$00[9]
039f0     30 18 00 3E 
039f4     63 63 63 63 
039f8     63 63 63 63 
039fc     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
03a00     00 00 00 1E 
03a04     33 33 33 1B 
03a08     33 63 63 63 
03a0c     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
03a10     1C 36 00 3E 
03a14     63 63 63 63 
03a18     63 63 63 63 
03a1c     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
03a20     30 18 00 63 
03a24     67 6F 7F 7B 
03a28     73 63 63 63 
03a2c     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
03a30     00 00 60 30 
03a34     18 00 3B 66 
03a38     66 66 66 66 
03a3c     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
03a40     00 00 36 1C 
03a44     08 00 3B 66 
03a48     66 66 66 66 
03a4c     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
03a50     36 1C 00 3E 
03a54     63 63 06 1C 
03a58     30 60 63 63 
03a5c     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
03a60     00 00 36 1C 
03a64     08 00 3E 63 
03a68     06 1C 30 63 
03a6c     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
03a70     30 18 00 3F 
03a74     66 66 66 3E 
03a78     36 66 66 66 
03a7c     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
03a80     30 18 00 63 
03a84     63 63 63 63 
03a88     63 63 63 63 
03a8c     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
03a90     00 00 60 30 
03a94     18 00 3B 6E 
03a98     66 06 06 06 
03a9c     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
03aa0     66 33 00 63 
03aa4     63 63 63 63 
03aa8     63 63 63 63 
03aac     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
03ab0     00 00 60 30 
03ab4     18 00 63 63 
03ab8     63 63 63 63 
03abc     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
03ac0     30 18 00 66 
03ac4     66 66 66 3C 
03ac8     18 18 18 18 
03acc     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
03ad0     00 00 00 08 
03ad4     0C 0C 3F 0C 
03ad8     0C 0C 0C 6C 
03adc     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
03ae0     30 18 00 00 
03ae4     00 00 00 00 
03ae8     00 00 00 00 
03aec     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03af0     00 00 00 00 
03af4     00 00 00 00 | 	byte	$00[8]
03af8     7F 00 00 00 
03afc     00 00 00 00 
03b00     66 33 00 00 
03b04     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
03b08     00 00 00 00 
03b0c     00 00 00 00 
03b10     00 00 00 00 
03b14     00 00 00 00 
03b18     00 00 00 00 
03b1c     00          | 	byte	$00[21]
03b1d     0C 06 3C 36 
03b21     1C 00 00 00 
03b25     00 00 00 00 
03b29     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03b2d     00 00 00 63 
03b31     3E 00 00 00 
03b35     00 00 00 00 
03b39     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03b3d     00 00 00 00 
03b41     3E 63 06 1C 
03b45     36 63 63 36 
03b49     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
03b4d     00 00 00 00 
03b51     00 00 00 00 | 	byte	$00[8]
03b55     18 00 7E 00 
03b59     18 00 00 00 
03b5d     00 00 00 00 
03b61     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03b65     00 00 00 00 
03b69     00 00 00 00 | 	byte	$00[8]
03b6d     18 30 1E 00 
03b71     00 00 1C 36 
03b75     36 1C 00 00 
03b79     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
03b7d     00 00 00 00 
03b81     63 00 00 00 
03b85     00 00 00 00 
03b89     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03b8d     00 00 00 18 
03b91     18 00 00 00 
03b95     00 00 00 00 
03b99     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03b9d     00 00 00 00 
03ba1     00          | 	byte	$00[5]
03ba2     CC 66 33 00 
03ba6     33 33 33 33 
03baa     33 33 6E 00 
03bae     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
03bb2     00 3F 66 66 
03bb6     66 3E 36 66 
03bba     66 66 6F 00 
03bbe     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
03bc2     36 1C 08 00 
03bc6     3B 6E 66 06 
03bca     06 06 0F 00 
03bce     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
03bd2     00 00 00 7E 
03bd6     7E 7E 7E 7E 
03bda     7E 7E 00 00 
03bde     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
03be2     00 00 00 00 
03be6     00 00 00 00 
03bea     00 00 00 00 
03bee     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03bf0                 | 
03bf0     00 00 00 00 
03bf4     00          | ataripalette            file "ataripalettep2.def"
03bf5     11 11 11 00 
03bf9     22 22 22 00 
03bfd     33 33 33 00 
03c01     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
03c05     55 55 55 00 
03c09     66 66 66 00 
03c0d     77 77 77 00 
03c11     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
03c15     99 99 99 00 
03c19     AA AA AA 00 
03c1d     BB BB BB 00 
03c21     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
03c25     DD DD DD 00 
03c29     EE EE EE 00 
03c2d     FF FF FF 00 
03c31     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
03c35     00 14 40 00 
03c39     00 1E 60 00 
03c3d     00 28 80 00 
03c41     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
03c45     00 3C BF 00 
03c49     00 46 DF 00 
03c4d     00 50 FF 00 
03c51     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
03c55     39 77 FF 00 
03c59     55 8A FF 00 
03c5d     71 9E FF 00 
03c61     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
03c65     AA C5 FF 00 
03c69     C6 D8 FF 00 
03c6d     E3 EC FF 00 
03c71     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
03c75     00 00 40 00 
03c79     00 00 60 00 
03c7d     00 00 80 00 
03c81     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
03c85     00 00 BF 00 
03c89     00 00 DF 00 
03c8d     00 00 FF 00 
03c91     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
03c95     39 39 FF 00 
03c99     55 55 FF 00 
03c9d     71 71 FF 00 
03ca1     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
03ca5     AA AA FF 00 
03ca9     C6 C6 FF 00 
03cad     E3 E3 FF 00 
03cb1     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
03cb5     20 00 40 00 
03cb9     30 00 60 00 
03cbd     40 00 80 00 
03cc1     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
03cc5     60 00 BF 00 
03cc9     70 00 DF 00 
03ccd     80 00 FF 00 
03cd1     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
03cd5     9C 39 FF 00 
03cd9     AA 55 FF 00 
03cdd     B8 71 FF 00 
03ce1     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
03ce5     D5 AA FF 00 
03ce9     E3 C6 FF 00 
03ced     F1 E3 FF 00 
03cf1     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
03cf5     40 00 40 00 
03cf9     60 00 60 00 
03cfd     80 00 80 00 
03d01     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
03d05     BF 00 BF 00 
03d09     DF 00 DF 00 
03d0d     FF 00 FF 00 
03d11     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
03d15     FF 39 FF 00 
03d19     FF 55 FF 00 
03d1d     FF 71 FF 00 
03d21     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
03d25     FF AA FF 00 
03d29     FF C6 FF 00 
03d2d     FF E3 FF 00 
03d31     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
03d35     40 00 20 00 
03d39     60 00 30 00 
03d3d     80 00 40 00 
03d41     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
03d45     BF 00 60 00 
03d49     DF 00 70 00 
03d4d     FF 00 80 00 
03d51     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
03d55     FF 39 9C 00 
03d59     FF 55 AA 00 
03d5d     FF 71 B8 00 
03d61     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
03d65     FF AA D5 00 
03d69     FF C6 E3 00 
03d6d     FF E3 F1 00 
03d71     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
03d75     40 00 00 00 
03d79     60 00 00 00 
03d7d     80 00 00 00 
03d81     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
03d85     BF 00 00 00 
03d89     DF 00 00 00 
03d8d     FF 00 00 00 
03d91     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
03d95     FF 39 39 00 
03d99     FF 55 55 00 
03d9d     FF 71 71 00 
03da1     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
03da5     FF AA AA 00 
03da9     FF C6 C6 00 
03dad     FF E3 E3 00 
03db1     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
03db5     40 10 00 00 
03db9     60 18 00 00 
03dbd     80 20 00 00 
03dc1     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
03dc5     BF 30 00 00 
03dc9     DF 38 00 00 
03dcd     FF 40 00 00 
03dd1     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
03dd5     FF 6A 39 00 
03dd9     FF 80 55 00 
03ddd     FF 95 71 00 
03de1     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
03de5     FF BF AA 00 
03de9     FF D5 C6 00 
03ded     FF EA E3 00 
03df1     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
03df5     40 20 00 00 
03df9     60 30 00 00 
03dfd     80 40 00 00 
03e01     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
03e05     BF 60 00 00 
03e09     DF 70 00 00 
03e0d     FF 80 00 00 
03e11     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
03e15     FF 9C 39 00 
03e19     FF AA 55 00 
03e1d     FF B8 71 00 
03e21     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
03e25     FF D5 AA 00 
03e29     FF E3 C6 00 
03e2d     FF F1 E3 00 
03e31     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
03e35     40 30 00 00 
03e39     60 48 00 00 
03e3d     80 60 00 00 
03e41     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
03e45     BF 90 00 00 
03e49     DF A8 00 00 
03e4d     FF C0 00 00 
03e51     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
03e55     FF CE 39 00 
03e59     FF D5 55 00 
03e5d     FF DC 71 00 
03e61     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
03e65     FF EA AA 00 
03e69     FF F1 C6 00 
03e6d     FF F8 E3 00 
03e71     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
03e75     30 40 00 00 
03e79     48 60 00 00 
03e7d     60 80 00 00 
03e81     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
03e85     90 BF 00 00 
03e89     A8 DF 00 00 
03e8d     C0 FF 00 00 
03e91     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
03e95     CE FF 39 00 
03e99     D5 FF 55 00 
03e9d     DC FF 71 00 
03ea1     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
03ea5     EA FF AA 00 
03ea9     F1 FF C6 00 
03ead     F8 FF E3 00 
03eb1     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
03eb5     00 40 00 00 
03eb9     00 60 00 00 
03ebd     00 80 00 00 
03ec1     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
03ec5     00 BF 00 00 
03ec9     00 DF 00 00 
03ecd     00 FF 00 00 
03ed1     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
03ed5     39 FF 39 00 
03ed9     55 FF 55 00 
03edd     71 FF 71 00 
03ee1     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
03ee5     AA FF AA 00 
03ee9     C6 FF C6 00 
03eed     E3 FF E3 00 
03ef1     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
03ef5     00 40 14 00 
03ef9     00 60 1E 00 
03efd     00 80 28 00 
03f01     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
03f05     00 BF 3C 00 
03f09     00 DF 46 00 
03f0d     00 FF 50 00 
03f11     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
03f15     39 FF 77 00 
03f19     55 FF 8A 00 
03f1d     71 FF 9E 00 
03f21     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
03f25     AA FF C5 00 
03f29     C6 FF D8 00 
03f2d     E3 FF EC 00 
03f31     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
03f35     00 40 28 00 
03f39     00 60 3C 00 
03f3d     00 80 50 00 
03f41     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
03f45     00 BF 78 00 
03f49     00 DF 8C 00 
03f4d     00 FF A0 00 
03f51     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
03f55     39 FF B5 00 
03f59     55 FF C0 00 
03f5d     71 FF CA 00 
03f61     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
03f65     AA FF DF 00 
03f69     C6 FF EA 00 
03f6d     E3 FF F4 00 
03f71     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
03f75     00 40 40 00 
03f79     00 60 60 00 
03f7d     00 80 80 00 
03f81     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
03f85     00 BF BF 00 
03f89     00 DF DF 00 
03f8d     00 FF FF 00 
03f91     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
03f95     39 FF FF 00 
03f99     55 FF FF 00 
03f9d     71 FF FF 00 
03fa1     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
03fa5     AA FF FF 00 
03fa9     C6 FF FF 00 
03fad     E3 FF FF 00 
03fb1     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
03fb5     00 28 40 00 
03fb9     00 3C 60 00 
03fbd     00 50 80 00 
03fc1     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
03fc5     00 78 BF 00 
03fc9     00 8C DF 00 
03fcd     00 A0 FF 00 
03fd1     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
03fd5     39 B5 FF 00 
03fd9     55 C0 FF 00 
03fdd     71 CA FF 00 
03fe1     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
03fe5     AA DF FF 00 
03fe9     C6 EA FF 00 
03fed     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
03ff0                 | 
03ff0     3C 00 66 FD | hdmi            setcmod #$100                           'enable HDMI mode
03ff4     58 80 67 FD |                 drvl    #7<<6 + hdmi_base               'enable HDMI pins
03ff8     7B 0B 80 FF 
03ffc     C0 01 0F FC |                 wrpin   ##%10110_1111_0111_10_00000_0, #7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
04000     66 66 86 FF 
04004     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk (25 MHz)
04008                 | 
04008     28 10 64 FD |                 setq    #8
0400c     61 0D 05 FB |                 rdlong  framebuf,  ptra++               'read pointers
04010                 | 
04010     29 FE 65 FD |                 setq2   #255
04014     8C 00 00 FB |                 rdlong  $000, paletteptr                'read palette
04018                 | 
04018                 | '' Blank lines before the frame
04018                 | 
04018     28 12 64 FD | p101            setq    #9
0401c     8B E2 00 FB |                 rdlong  m_bs,modeptr                    'read timings
04020     01 00 05 F1 |                 add     frames,#1
04024     8E 0A 01 FB |                                 rdlong  fontstart,fontnumptr
04028     87 0A 01 F1 |                                 add     fontstart,fontbuf
0402c     8A 02 01 FB |                 rdlong  cursorx, cursorptr
04030     81 04 E9 F8 |                 getbyte cursory, cursorx,#1
04034     81 FE F0 F8 |                 getbyte cursorsh,cursorx,#2
04038     FF 02 05 F5 |                 and     cursorx,#255
0403c                 | 
0403c     88 1E 01 F6 |                 mov     borderptr2,borderptr
04040     8F E0 00 FB |                 rdlong  border,borderptr2
04044     04 1E 05 F1 |                 add     borderptr2,#4
04048     08 E0 64 F0 |                 shl     border,#8
0404c                 | 
0404c     8D 2A 01 FB |                 rdlong  t1,commandptr
04050     04 1A 05 F1 |                 add     commandptr,#4
04054     8D 2C 01 FB |                 rdlong  t2,commandptr
04058     04 1A 85 F1 |                 sub     commandptr,#4
0405c     01 2B 1D F2 |                 cmp     t1,#257  wcz
04060     95 2C 31 CC |          if_lt  wrlut   t2,t1
04064     01 2B 05 F6 |                 mov     t1, #257
04068     8D 2A 61 FC |                 wrlong  t1,commandptr
0406c     6C 24 01 F6 |                 mov     hsync0,sync_000                 'vsync off
04070     6D 26 01 F6 |                 mov     hsync1,sync_001
04074     44 F0 44 FB |                 callpa  i_upporch ,#blank
04078     89 00 48 FC |                 wrbyte  #0,vblankptr
0407c                 | 
0407c                 | '' Upper border.
0407c                 | 
0407c     04 00 0D F4 |                 testb   frames,#4 wz                    'cursor blinks at framerate/16, todo: define
04080     65 02 05 A6 |          if_z   mov     cursorx,#101
04084                 | 
04084                 | 
04084     77 20 01 F6 |                 mov     ii, i_vborder
04088                 | 
04088     08 01 B0 FD | up_border       call    #hsync
0408c     70 E8 C0 FC |                 xcont   m_vi,border
04090     FD 21 6D FB |                 djnz    ii,#up_border
04094                 | 
04094                 | '' 480 active lines
04094                 | 
04094     E0 21 05 F6 |                 mov     ii,#480
04098     00 F8 04 F6 |                 mov     linenum,#0
0409c                 | 
0409c     81 08 01 F6 | line1           mov     cursorpos2,cursorx
040a0                 | 
040a0     7C 28 41 F8 |                 getnib  fontline,linenum,#0             'fontline is 0 to 15, a line in font def
040a4     86 22 01 F6 |                 mov     framebuf2,framebuf              'compute a line start in the framebuffer, which is (line div 16)*100
040a8     7C F6 00 F6 |                 mov     linestart,linenum
040ac     04 F6 44 F0 |                 shr     linestart,#4
040b0     82 F6 08 F2 |                 cmp     linestart,cursory wz
040b4     78 08 05 56 |          if_nz  mov     cursorpos2,#120
040b8     90 F7 04 FA |                 mul     linestart,#400
040bc     7B 22 01 F1 |                 add     framebuf2,linestart
040c0     D0 00 B0 FD |                 call    #hsync
040c4     00 28 0D F2 |                 cmp     fontline,#0 wz
040c8     0C 00 90 5D |          if_nz  jmp     #p102                          'if fontline >0, display it
040cc                 | 
040cc     8F E0 00 FB |                 rdlong  border,borderptr2
040d0     04 1E 05 F1 |                 add     borderptr2,#4
040d4     08 E0 64 F0 |                 shl     border,#8
040d8                 | 
040d8     70 EA C0 FC | p102            xcont   m_border,border                 'display a left border
040dc     7F 28 19 F2 |                 cmp     fontline,cursorsh wcz
040e0     65 06 05 C6 |          if_c   mov     cursorpos,#101
040e4     84 06 01 36 |         if_nc   mov     cursorpos,cursorpos2
040e8     01 06 05 F1 |                 add     cursorpos,#1
040ec     85 2C 01 F6 |                 mov     t2,fontstart
040f0     94 2C 01 F1 |                 add     t2,fontline
040f4                 | 
040f4     64 28 DC FC |                 rep     @p103,#100                      'display 100 chars
040f8                 | ''---------------------------------------------------------------------------------------
040f8     91 2E 01 FB |                         rdlong  char,framebuf2                                                      '2
040fc     97 30 F1 F8 |                         getbyte backcolor,char,#2                                                   '4
04100     97 32 F9 F8 |                         getbyte charcolor,char,#3                                                   '6
04104     97 2E E1 F8 |                         getbyte char,char, #0                                                       '8
04108     04 22 05 F1 |                         add     framebuf2,#4                                                        '10
0410c     04 2E 65 F0 |                         shl     char,#4                                                             '12
04110     96 2E 01 F1 |                         add     char,t2                                                             '14
04114     97 2A C1 FA |                         rdbyte  t1,char                                                             '16
04118     01 06 8D F1 |                         sub     cursorpos,#1 wz                                                     '18
0411c     FF 2A 65 A5 |                 if_z    xor     t1, #$FF                                                            '20
04120                 | 
04120                 | 
04120     61 2A 61 FD |                         mergeb  t1
04124     95 EC C0 FC |                         xcont   m_lut1,t1                                                           '22
04128                 | 
04128     98 2A A1 FA |                         rdlut   t1,backcolor                                                        '25
0412c     7E 2A 31 FC |                         wrlut   t1,lutaddr                                                          '28
04130     01 FC 04 F1 |                         add     lutaddr,#1                                                          '30
04134                 | 
04134     99 2A A1 FA |                         rdlut   t1,charcolor                                                        '33
04138     7E 2A 31 FC |                         wrlut   t1,lutaddr                                                          '46
0413c     01 FC 84 F1 |                         sub     lutaddr,#1                                                          '38
04140                 | 
04140     7D EC 60 F5 |                         xor     m_lut1,a00010000                                                    '40
04144     20 FC 64 F5 |                         xor     lutaddr,#32                                                         '42    .....    38 left
04148                 | 
04148                 | '' rep end ----------------------------------------------------------------------------
04148                 | 
04148                 | 
04148     70 EA C0 FC | p103            xcont   m_border,border                     'display a right border
0414c                 | 
0414c     01 F8 04 F1 |                 add     linenum, #1
04150     D2 21 6D FB |                 djnz    ii,#line1
04154                 | 
04154                 | '' end of active screen
04154     89 02 68 FC |                 wrlong  #1,vblankptr
04158     77 20 01 F6 |                 mov     ii,i_vborder                         'lower border
0415c                 | 
0415c                 | 
0415c     8F E0 00 FB |                 rdlong  border,borderptr2
04160     04 1E 05 F1 |                 add     borderptr2,#4
04164     08 E0 64 F0 |                 shl     border,#8
04168     28 00 B0 FD | down_border     call    #hsync
0416c     70 E8 C0 FC |                 xcont   m_vi,border
04170     FD 21 6D FB |                 djnz    ii,#down_border
04174     04 F4 44 FB |                 callpa  i_downporch ,#blank                  'bottom blanks
04178                 | 
04178     6E 24 01 F6 |                 mov     hsync0,sync_222                      'vsync on
0417c     6F 26 01 F6 |                 mov     hsync1,sync_223
04180     01 F2 44 FB |                 callpa  i_vsync,#blank                       'vertical sync blanks
04184     90 FE 9F FD |                 jmp     #p101                                'loop
04188                 | 
04188                 | '' Subroutines
04188                 | 
04188     08 00 B0 FD | blank           call    #hsync                          'blank lines
0418c     92 E8 C0 FC |                 xcont   m_vi,hsync0
04190     FD ED 6F 0B |         _ret_   djnz    pa,#blank
04194                 | 
04194     92 E2 C0 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
04198     93 E4 B0 FC |                 xzero   m_sn,hsync1
0419c     92 E6 C0 0C |         _ret_   xcont   m_bv,hsync0
041a0                 | 
041a0                 | '' consts and vars
041a0                 | 
041a0     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
041a4     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
041a8     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
041ac     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
041b0                 | 
041b0     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
041b4                 | 
041b4     10 00 81 70 | m_bs            long    $70810000 + hdmi_base<<17 + 16          'before sync
041b8     50 00 81 70 | m_sn            long    $70810000 + hdmi_base<<17 + 80          'sync
041bc     14 00 81 70 | m_bv            long    $70810000 + hdmi_base<<17 + 20          'before visible
041c0     00 04 81 70 | m_vi            long    $70810000 + hdmi_base<<17 + 1024        'visible 1024
041c4     70 00 81 70 | m_border        long    $70810000 + hdmi_base<<17 + 112         'immediate 112
041c8     08 00 88 20 | m_lut1          long    $20880000 + hdmi_base<<17 + 8          ' imm+lut, 1 char
041cc     30 00 00 00 | i_vborder       long    48
041d0     10 00 00 00 | i_upporch       long    16
041d4     10 00 00 00 | i_vsync         long    16
041d8     10 00 00 00 | i_downporch     long    16
041dc                 | 
041dc     00 00 00 00 | linestart       long    0
041e0     00 00 00 00 | linenum         long    0
041e4     00 00 01 00 | a00010000       long    $00010000
041e8     00 01 00 00 | lutaddr         long    256
041ec                 | 
041ec     0E 00 00 00 | cursorsh        long    14
041f0     00 00 00 00 | frames          long    0
041f4     00 00 00 00 | cursorx         long    0
041f8     00 00 00 00 | cursory         long    0
041fc     00 00 00 00 | cursorpos       long    0
04200     00 00 00 00 | cursorpos2      long    0
04204     00 00 00 00 | fontstart           long        0
04208                 | 
04208                 | framebuf        res     1
04208                 | framebuf        res     1
04208                 | fontbuf         res     1
04208                 | fontbuf         res     1
04208                 | borderptr       res     1
04208                 | borderptr       res     1
04208                 | vblankptr       res     1
04208                 | vblankptr       res     1
04208                 | cursorptr       res     1
04208                 | cursorptr       res     1
04208                 | modeptr         res     1
04208                 | modeptr         res     1
04208                 | paletteptr      res     1
04208                 | paletteptr      res     1
04208                 | commandptr      res     1
04208                 | commandptr      res     1
04208                 | fontnumptr      res     1
04208                 | fontnumptr      res     1
04208                 | borderptr2      res     1
04208                 | borderptr2      res     1
04208                 | ii              res     1
04208                 | ii              res     1
04208                 | framebuf2       res     1
04208                 | framebuf2       res     1
04208                 | hsync0          res     1
04208                 | hsync0          res     1
04208                 | hsync1          res     1
04208                 | hsync1          res     1
04208                 | fontline        res     1
04208                 | fontline        res     1
04208                 | t1              res     1
04208                 | t1              res     1
04208                 | t2              res     1
04208                 | t2              res     1
04208                 | char            res     1
04208                 | char            res     1
04208                 | backcolor       res     1
04208                 | backcolor       res     1
04208                 | charcolor       res     1
04208                 | charcolor       res     1
04208                 |                 fit     496                     '
04208                 | __system__dat_
04208     00 00 00 00 
0420c     00 00 00 00 | 	byte	$00[8]
04210     03 00 00 00 
04214     00 00 00 00 
04218     00 00 00 00 
0421c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04220                 | objmem
04220     00 00 00 00 | 	long	0[1]
04224 0e2             | 	org	COG_BSS_START
04224 0e2             | _var01
04224 0e2             | 	res	1
04224 0e3             | _var02
04224 0e3             | 	res	1
04224 0e4             | _var03
04224 0e4             | 	res	1
04224 0e5             | _var04
04224 0e5             | 	res	1
04224 0e6             | _var05
04224 0e6             | 	res	1
04224 0e7             | arg01
04224 0e7             | 	res	1
04224 0e8             | arg02
04224 0e8             | 	res	1
04224 0e9             | arg03
04224 0e9             | 	res	1
04224 0ea             | arg04
04224 0ea             | 	res	1
04224 0eb             | local01
04224 0eb             | 	res	1
04224 0ec             | local02
04224 0ec             | 	res	1
04224 0ed             | local03
04224 0ed             | 	res	1
04224 0ee             | local04
04224 0ee             | 	res	1
04224 0ef             | local05
04224 0ef             | 	res	1
04224 0f0             | local06
04224 0f0             | 	res	1
04224 0f1             | local07
04224 0f1             | 	res	1
04224 0f2             | local08
04224 0f2             | 	res	1
04224 0f3             | local09
04224 0f3             | 	res	1
04224 0f4             | local10
04224 0f4             | 	res	1
04224 0f5             | local11
04224 0f5             | 	res	1
04224 0f6             | local12
04224 0f6             | 	res	1
04224 0f7             | local13
04224 0f7             | 	res	1
04224 0f8             | local14
04224 0f8             | 	res	1
04224 0f9             | local15
04224 0f9             | 	res	1
04224 0fa             | local16
04224 0fa             | 	res	1
04224 0fb             | local17
04224 0fb             | 	res	1
04224 0fc             | local18
04224 0fc             | 	res	1
04224 0fd             | local19
04224 0fd             | 	res	1
04224 0fe             | local20
04224 0fe             | 	res	1
04224 0ff             | local21
04224 0ff             | 	res	1
04224 100             | local22
04224 100             | 	res	1
04224 101             | local23
04224 101             | 	res	1
04224 102             | local24
04224 102             | 	res	1
04224 103             | local25
04224 103             | 	res	1
04224 104             | local26
04224 104             | 	res	1
04224 105             | local27
04224 105             | 	res	1
04224 106             | local28
04224 106             | 	res	1
04224 107             | local29
04224 107             | 	res	1
04224 108             | local30
04224 108             | 	res	1
04224 109             | local31
04224 109             | 	res	1
04224 10a             | local32
04224 10a             | 	res	1
04224 10b             | local33
04224 10b             | 	res	1
04224 10c             | local34
04224 10c             | 	res	1
04224 10d             | local35
04224 10d             | 	res	1
04224 10e             | local36
04224 10e             | 	res	1
04224 10f             | local37
04224 10f             | 	res	1
04224 110             | local38
04224 110             | 	res	1
04224 111             | local39
04224 111             | 	res	1
04224 112             | muldiva_
04224 112             | 	res	1
04224 113             | muldivb_
04224 113             | 	res	1
04224 114             | 	fit	480
04224 114             | 
