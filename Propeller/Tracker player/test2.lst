00000                 | 
00000                 | #line 1 "/home/pik33/Dokumenty/GitHub/P2-retromachine/Propeller/Tracker player/test2.p2asm"
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 160000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10007fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 B2 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 D8 F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 03 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16779256
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 03 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16779259
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e B4 C4 84 FF 
00440 00f 14 00 6C FC | 	wrlong	##160000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 C8 07 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 CC 61 FD | 	cogid	arg01
00614 084 03 CC 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 A7 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 B3 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 CD 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 CF 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 D1 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 D3 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D B2 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 D0 55 F0 |         shr	arg03, #1 wc
00688 0a1 E6 CE 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 CC 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 CE FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 D0 55 F0 |         shr	arg03, #1 wc
00698 0a5 E6 CE 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 CC 05 C1 |  if_c   add	arg01, #2
006a0 0a7 E7 CE 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 E6 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 D0 0D F2 |         cmp	arg03, #0 wz
006ac 0aa E8 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 CE 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 D7 65 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F D7 05 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 16 2B 12 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 2C 62 FD |        getqx   muldivb_
00718 0c5 19 2A 62 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 15 2B 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 A4 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 16 2D 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 A4 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 A4 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd 15 2B 82 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 A4 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf 16 2D 82 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | 
00744 0d0             | __heap_ptr
00744 0d0 C0 A8 00 00 | 	long	@__heap_base
00748 0d1             | itmp1_
00748 0d1 00 00 00 00 | 	long	0
0074c 0d2             | itmp2_
0074c 0d2 00 00 00 00 | 	long	0
00750 0d3             | objptr
00750 0d3 C8 B8 00 00 | 	long	@objmem
00754 0d4             | ptr___struct__s_vfs_file_t_putchar_
00754 0d4 60 9A 00 00 | 	long	@__struct__s_vfs_file_t_putchar
00758 0d5             | ptr___system__dat__
00758 0d5 08 A2 00 00 | 	long	@__system__dat_
0075c 0d6             | ptr__dat__
0075c 0d6 10 9C 00 00 | 	long	@_dat_
00760 0d7             | ptr__ff_cc_dat__
00760 0d7 7C A0 00 00 | 	long	@_ff_cc_dat_
00764 0d8             | ptr_stackspace_
00764 0d8 CC B8 00 00 | 	long	@stackspace
00768 0d9             | result1
00768 0d9 00 00 00 00 | 	long	0
0076c 0da             | result2
0076c 0da 00 00 00 00 | 	long	0
00770 0db             | COG_BSS_START
00770 0db             | 	fit	480
00770                 | 	orgh
00770                 | hubentry
00770                 | 
00770                 | ' 
00770                 | ' function curdir$() as string
00770                 | _curdir_S
00770     02 5A 05 F6 | 	mov	COUNT_, #2
00774     B0 00 A0 FD | 	call	#pushregs_
00778     40 D6 05 F6 | 	mov	local01, #64
0077c     41 CC 05 F6 | 	mov	arg01, #65
00780     F4 88 B0 FD | 	call	#__system___gc_alloc_managed
00784     D9 CC 01 F6 | 	mov	arg01, result1
00788     EB CE 01 F6 | 	mov	arg02, local01
0078c     3C 05 B0 FD | 	call	#_getcwd
00790     D9 D8 09 F6 | 	mov	local02, result1 wz
00794                 | '   r = getcwd(buf, bufsize)
00794                 | '   if r == 0 then
00794     20 00 90 5D |  if_ne	jmp	#LR__0001
00798     02 D6 65 F0 | 	shl	local01, #2
0079c     EB CC 01 F6 | 	mov	arg01, local01
007a0     01 CC 05 F1 | 	add	arg01, #1
007a4     D0 88 B0 FD | 	call	#__system___gc_alloc_managed
007a8     D9 CC 01 F6 | 	mov	arg01, result1
007ac     EB CE 01 F6 | 	mov	arg02, local01
007b0     18 05 B0 FD | 	call	#_getcwd
007b4     D9 D8 01 F6 | 	mov	local02, result1
007b8                 | LR__0001
007b8                 | '   return r
007b8     EC B2 01 F6 | 	mov	result1, local02
007bc     AF F0 03 F6 | 	mov	ptra, fp
007c0     BA 00 A0 FD | 	call	#popregs_
007c4                 | _curdir_S_ret
007c4     2D 00 64 FD | 	ret
007c8                 | 
007c8                 | _program
007c8     03 5A 05 F6 | 	mov	COUNT_, #3
007cc     B0 00 A0 FD | 	call	#pushregs_
007d0     4D 00 00 FF 
007d4     C9 D7 05 F6 | 	mov	local01, ##@LR__0682
007d8                 | ' _vfs_open_sdcard()
007d8                 | ' {
007d8                 | '     return _vfs_open_sdcardx(61, 60, 59, 58);
007d8     3D CC 05 F6 | 	mov	arg01, #61
007dc     3C CE 05 F6 | 	mov	arg02, #60
007e0     3B D0 05 F6 | 	mov	arg03, #59
007e4     3A D2 05 F6 | 	mov	arg04, #58
007e8     24 0B B0 FD | 	call	#__vfs_open_sdcardx
007ec     D9 CE 01 F6 | 	mov	arg02, result1
007f0     EB CC 01 F6 | 	mov	arg01, local01
007f4     0C 0F B0 FD | 	call	#__mount
007f8     4D 00 00 FF 
007fc     CD CD 05 F6 | 	mov	arg01, ##@LR__0683
00800     CC 0B B0 FD | 	call	#_chdir
00804                 | ' 
00804                 | ' ' the next two lines are for testing SD
00804                 | ' mount "/sd", _vfs_open_sdcard()
00804                 | ' chdir "/sd/mod"
00804                 | ' 
00804                 | ' ' the next two lines are for testing the P9 host file system
00804                 | ' 'mount "/host", _vfs_open_host()
00804                 | ' 'chdir "/host/debug"
00804                 | ' 
00804                 | ' print "current directory is: "; curdir$()
00804     00 CC 05 F6 | 	mov	arg01, #0
00808     88 91 B0 FD | 	call	#__system___getiolock_0110
0080c     D9 CC 01 F6 | 	mov	arg01, result1
00810     18 80 B0 FD | 	call	#__system___lockmem
00814     00 B2 05 F6 | 	mov	result1, #0
00818     4D 00 00 FF 
0081c     D5 CF 05 F6 | 	mov	arg02, ##@LR__0684
00820     00 CC 05 F6 | 	mov	arg01, #0
00824     00 D0 05 F6 | 	mov	arg03, #0
00828     10 84 B0 FD | 	call	#__system___basic_print_string
0082c     40 FF BF FD | 	call	#_curdir_S
00830     D9 CE 01 F6 | 	mov	arg02, result1
00834     00 CC 05 F6 | 	mov	arg01, #0
00838     00 D0 05 F6 | 	mov	arg03, #0
0083c     FC 83 B0 FD | 	call	#__system___basic_print_string
00840     00 CC 05 F6 | 	mov	arg01, #0
00844     0A CE 05 F6 | 	mov	arg02, #10
00848     00 D0 05 F6 | 	mov	arg03, #0
0084c     A0 83 B0 FD | 	call	#__system___basic_print_char
00850     01 B2 05 F6 | 	mov	result1, #1
00854     00 CC 05 F6 | 	mov	arg01, #0
00858     38 91 B0 FD | 	call	#__system___getiolock_0110
0085c     D9 00 68 FC | 	wrlong	#0, result1
00860     00 B2 05 F6 | 	mov	result1, #0
00864                 | ' print "Listing:"
00864     00 CC 05 F6 | 	mov	arg01, #0
00868     28 91 B0 FD | 	call	#__system___getiolock_0110
0086c     D9 CC 01 F6 | 	mov	arg01, result1
00870     B8 7F B0 FD | 	call	#__system___lockmem
00874     00 B2 05 F6 | 	mov	result1, #0
00878     4D 00 00 FF 
0087c     EC CF 05 F6 | 	mov	arg02, ##@LR__0685
00880     00 CC 05 F6 | 	mov	arg01, #0
00884     00 D0 05 F6 | 	mov	arg03, #0
00888     B0 83 B0 FD | 	call	#__system___basic_print_string
0088c     00 CC 05 F6 | 	mov	arg01, #0
00890     0A CE 05 F6 | 	mov	arg02, #10
00894     00 D0 05 F6 | 	mov	arg03, #0
00898     54 83 B0 FD | 	call	#__system___basic_print_char
0089c     01 B2 05 F6 | 	mov	result1, #1
008a0     00 CC 05 F6 | 	mov	arg01, #0
008a4     EC 90 B0 FD | 	call	#__system___getiolock_0110
008a8     D9 00 68 FC | 	wrlong	#0, result1
008ac     00 B2 05 F6 | 	mov	result1, #0
008b0     4D 00 00 FF 
008b4     F5 CD 05 F6 | 	mov	arg01, ##@LR__0686
008b8     00 CE 05 F6 | 	mov	arg02, #0
008bc                 | '     return _basic_dir(pat, attrib)
008bc     00 01 B0 FD | 	call	#__basic_dir
008c0     D3 B2 61 FC | 	wrlong	result1, objptr
008c4                 | ' 
008c4                 | ' fname = dir$("*.*", 0)
008c4                 | ' while fname <> "" and fname <> nil
008c4                 | LR__0002
008c4     00 D8 05 F6 | 	mov	local02, #0
008c8     D3 CC 01 FB | 	rdlong	arg01, objptr
008cc     4D 00 00 FF 
008d0     F9 CF 05 F6 | 	mov	arg02, ##@LR__0687
008d4     90 7F B0 FD | 	call	#__system___string_cmp
008d8     00 B2 0D F2 | 	cmp	result1, #0 wz
008dc     FF FF 7F 5F 
008e0     FF D9 65 55 |  if_ne	xor	local02, ##-1
008e4     00 DA 05 F6 | 	mov	local03, #0
008e8     D3 CC 01 FB | 	rdlong	arg01, objptr
008ec     00 CE 05 F6 | 	mov	arg02, #0
008f0     74 7F B0 FD | 	call	#__system___string_cmp
008f4     00 B2 0D F2 | 	cmp	result1, #0 wz
008f8     FF FF 7F 5F 
008fc     FF DB 65 55 |  if_ne	xor	local03, ##-1
00900     ED D8 C9 F7 | 	test	local02, local03 wz
00904     60 00 90 AD |  if_e	jmp	#LR__0003
00908                 | '   print fname
00908     00 CC 05 F6 | 	mov	arg01, #0
0090c     84 90 B0 FD | 	call	#__system___getiolock_0110
00910     D9 CC 01 F6 | 	mov	arg01, result1
00914     14 7F B0 FD | 	call	#__system___lockmem
00918     00 B2 05 F6 | 	mov	result1, #0
0091c     D3 CE 01 FB | 	rdlong	arg02, objptr
00920     00 CC 05 F6 | 	mov	arg01, #0
00924     00 D0 05 F6 | 	mov	arg03, #0
00928     10 83 B0 FD | 	call	#__system___basic_print_string
0092c     00 CC 05 F6 | 	mov	arg01, #0
00930     0A CE 05 F6 | 	mov	arg02, #10
00934     00 D0 05 F6 | 	mov	arg03, #0
00938     B4 82 B0 FD | 	call	#__system___basic_print_char
0093c     01 B2 05 F6 | 	mov	result1, #1
00940     00 CC 05 F6 | 	mov	arg01, #0
00944     4C 90 B0 FD | 	call	#__system___getiolock_0110
00948     D9 00 68 FC | 	wrlong	#0, result1
0094c     00 B2 05 F6 | 	mov	result1, #0
00950     4D 00 00 FF 
00954     FA CD 05 F6 | 	mov	arg01, ##@LR__0688
00958     00 CE 05 F6 | 	mov	arg02, #0
0095c                 | '     return _basic_dir(pat, attrib)
0095c     60 00 B0 FD | 	call	#__basic_dir
00960     D3 B2 61 FC | 	wrlong	result1, objptr
00964     5C FF 9F FD | 	jmp	#LR__0002
00968                 | LR__0003
00968                 | ' print "done"
00968     00 CC 05 F6 | 	mov	arg01, #0
0096c     24 90 B0 FD | 	call	#__system___getiolock_0110
00970     D9 CC 01 F6 | 	mov	arg01, result1
00974     B4 7E B0 FD | 	call	#__system___lockmem
00978     00 B2 05 F6 | 	mov	result1, #0
0097c     4D 00 00 FF 
00980     FB CF 05 F6 | 	mov	arg02, ##@LR__0689
00984     00 CC 05 F6 | 	mov	arg01, #0
00988     00 D0 05 F6 | 	mov	arg03, #0
0098c     AC 82 B0 FD | 	call	#__system___basic_print_string
00990     00 CC 05 F6 | 	mov	arg01, #0
00994     0A CE 05 F6 | 	mov	arg02, #10
00998     00 D0 05 F6 | 	mov	arg03, #0
0099c     50 82 B0 FD | 	call	#__system___basic_print_char
009a0     01 B2 05 F6 | 	mov	result1, #1
009a4     00 CC 05 F6 | 	mov	arg01, #0
009a8     E8 8F B0 FD | 	call	#__system___getiolock_0110
009ac     D9 00 68 FC | 	wrlong	#0, result1
009b0     00 B2 05 F6 | 	mov	result1, #0
009b4     AF F0 03 F6 | 	mov	ptra, fp
009b8     BA 00 A0 FD | 	call	#popregs_
009bc                 | _program_ret
009bc     2D 00 64 FD | 	ret
009c0                 | 
009c0                 | ' '
009c0                 | ' ' directory handling functions for BASIC
009c0                 | ' '
009c0                 | ' 
009c0                 | ' declare function _basic_dir lib "libsys/basic_dir.c" (pat as string, attrib as integer) as string
009c0                 | __basic_dir
009c0     0A 5A 05 F6 | 	mov	COUNT_, #10
009c4     B0 00 A0 FD | 	call	#pushregs_
009c8     4C F0 07 F1 | 	add	ptra, #76
009cc     04 5E 05 F1 | 	add	fp, #4
009d0     AF CC 61 FC | 	wrlong	arg01, fp
009d4     04 5E 05 F1 | 	add	fp, #4
009d8     AF CE 61 FC | 	wrlong	arg02, fp
009dc     04 5E 85 F1 | 	sub	fp, #4
009e0     AF D6 09 FB | 	rdlong	local01, fp wz
009e4     04 5E 85 F1 | 	sub	fp, #4
009e8     64 00 90 AD |  if_e	jmp	#LR__0005
009ec     04 5E 05 F1 | 	add	fp, #4
009f0     AF D8 01 FB | 	rdlong	local02, fp
009f4     04 5E 85 F1 | 	sub	fp, #4
009f8     EC DA C9 FA | 	rdbyte	local03, local02 wz
009fc     50 00 90 AD |  if_e	jmp	#LR__0005
00a00     D6 D6 09 FB | 	rdlong	local01, ptr__dat__ wz
00a04     08 00 90 AD |  if_e	jmp	#LR__0004
00a08     D6 CC 01 FB | 	rdlong	arg01, ptr__dat__
00a0c     60 04 B0 FD | 	call	#_closedir
00a10                 | LR__0004
00a10     4E 00 00 FF 
00a14     00 DC 05 F6 | 	mov	local04, ##@LR__0690
00a18     EE CC 01 F6 | 	mov	arg01, local04
00a1c     5C 03 B0 FD | 	call	#_opendir
00a20     D9 DE 01 F6 | 	mov	local05, result1
00a24     D6 DE 61 FC | 	wrlong	local05, ptr__dat__
00a28     08 5E 05 F1 | 	add	fp, #8
00a2c     AF D6 01 FB | 	rdlong	local01, fp
00a30     04 AC 05 F1 | 	add	ptr__dat__, #4
00a34     D6 D6 61 FC | 	wrlong	local01, ptr__dat__
00a38     04 5E 85 F1 | 	sub	fp, #4
00a3c     AF D6 01 FB | 	rdlong	local01, fp
00a40     04 5E 85 F1 | 	sub	fp, #4
00a44     04 AC 05 F1 | 	add	ptr__dat__, #4
00a48     D6 D6 61 FC | 	wrlong	local01, ptr__dat__
00a4c     08 AC 85 F1 | 	sub	ptr__dat__, #8
00a50                 | LR__0005
00a50     D6 D6 09 FB | 	rdlong	local01, ptr__dat__ wz
00a54                 | '         return "";
00a54     4E 00 00 AF 
00a58     02 B2 05 A6 |  if_e	mov	result1, ##@LR__0691
00a5c     60 02 90 AD |  if_e	jmp	#LR__0019
00a60                 | '     }
00a60                 | '     for(;;) {
00a60                 | LR__0006
00a60     D6 CC 01 FB | 	rdlong	arg01, ptr__dat__
00a64     70 04 B0 FD | 	call	#_readdir
00a68     0C 5E 05 F1 | 	add	fp, #12
00a6c     AF B2 61 FC | 	wrlong	result1, fp
00a70     AF D6 09 FB | 	rdlong	local01, fp wz
00a74     0C 5E 85 F1 | 	sub	fp, #12
00a78     18 00 90 5D |  if_ne	jmp	#LR__0007
00a7c     D6 CC 01 FB | 	rdlong	arg01, ptr__dat__
00a80     EC 03 B0 FD | 	call	#_closedir
00a84     D6 00 68 FC | 	wrlong	#0, ptr__dat__
00a88                 | '             closedir(olddir);
00a88                 | '             olddir = 0;
00a88                 | '             return "";
00a88     4E 00 00 FF 
00a8c     04 B2 05 F6 | 	mov	result1, ##@LR__0692
00a90     2C 02 90 FD | 	jmp	#LR__0019
00a94                 | LR__0007
00a94     0C 5E 05 F1 | 	add	fp, #12
00a98     AF CC 01 FB | 	rdlong	arg01, fp
00a9c     0C 5E 85 F1 | 	sub	fp, #12
00aa0     08 AC 05 F1 | 	add	ptr__dat__, #8
00aa4     D6 CE 01 FB | 	rdlong	arg02, ptr__dat__
00aa8     08 AC 85 F1 | 	sub	ptr__dat__, #8
00aac     FC 06 B0 FD | 	call	#__pat_match
00ab0     00 B2 0D F2 | 	cmp	result1, #0 wz
00ab4     A8 FF 9F AD |  if_e	jmp	#LR__0006
00ab8     04 AC 05 F1 | 	add	ptr__dat__, #4
00abc     D6 D6 09 FB | 	rdlong	local01, ptr__dat__ wz
00ac0     04 AC 85 F1 | 	sub	ptr__dat__, #4
00ac4     84 01 90 AD |  if_e	jmp	#LR__0015
00ac8     0C 5E 05 F1 | 	add	fp, #12
00acc     AF CC 01 FB | 	rdlong	arg01, fp
00ad0     04 5E 05 F1 | 	add	fp, #4
00ad4     AF DA 01 F6 | 	mov	local03, fp
00ad8     ED E0 01 F6 | 	mov	local06, local03
00adc     F0 CE 01 F6 | 	mov	arg02, local06
00ae0     10 5E 85 F1 | 	sub	fp, #16
00ae4     68 04 B0 FD | 	call	#_stat
00ae8     D9 E2 01 F6 | 	mov	local07, result1
00aec     40 5E 05 F1 | 	add	fp, #64
00af0     AF E2 61 FC | 	wrlong	local07, fp
00af4     AF D6 09 FB | 	rdlong	local01, fp wz
00af8     40 5E 85 F1 | 	sub	fp, #64
00afc                 | ' 
00afc                 | '                 return "";
00afc     4E 00 00 5F 
00b00     06 B2 05 56 |  if_ne	mov	result1, ##@LR__0693
00b04     B8 01 90 5D |  if_ne	jmp	#LR__0019
00b08     18 5E 05 F1 | 	add	fp, #24
00b0c     AF D6 01 FB | 	rdlong	local01, fp
00b10     78 00 00 FF 
00b14     00 D6 05 F5 | 	and	local01, ##61440
00b18     2C 5E 05 F1 | 	add	fp, #44
00b1c     AF D6 61 FC | 	wrlong	local01, fp
00b20     3C 5E 85 F1 | 	sub	fp, #60
00b24     AF 00 68 FC | 	wrlong	#0, fp
00b28     3C 5E 05 F1 | 	add	fp, #60
00b2c     AF D6 01 FB | 	rdlong	local01, fp
00b30     44 5E 85 F1 | 	sub	fp, #68
00b34     08 00 00 FF 
00b38     00 D6 0D F2 | 	cmp	local01, ##4096 wz
00b3c     18 00 90 5D |  if_ne	jmp	#LR__0008
00b40     08 5E 05 F1 | 	add	fp, #8
00b44     AF D6 01 FB | 	rdlong	local01, fp
00b48     10 D6 45 F5 | 	or	local01, #16
00b4c     AF D6 61 FC | 	wrlong	local01, fp
00b50     08 5E 85 F1 | 	sub	fp, #8
00b54     68 00 90 FD | 	jmp	#LR__0011
00b58                 | LR__0008
00b58     44 5E 05 F1 | 	add	fp, #68
00b5c     AF DC 01 FB | 	rdlong	local04, fp
00b60     44 5E 85 F1 | 	sub	fp, #68
00b64     EE D6 01 F6 | 	mov	local01, local04
00b68     10 00 00 FF 
00b6c     00 D6 0D F2 | 	cmp	local01, ##8192 wz
00b70     38 00 90 AD |  if_e	jmp	#LR__0009
00b74     44 5E 05 F1 | 	add	fp, #68
00b78     AF D8 01 FB | 	rdlong	local02, fp
00b7c     44 5E 85 F1 | 	sub	fp, #68
00b80     EC DE 01 F6 | 	mov	local05, local02
00b84     18 00 00 FF 
00b88     00 DE 0D F2 | 	cmp	local05, ##12288 wz
00b8c     1C 00 90 AD |  if_e	jmp	#LR__0009
00b90     44 5E 05 F1 | 	add	fp, #68
00b94     AF E0 01 FB | 	rdlong	local06, fp
00b98     44 5E 85 F1 | 	sub	fp, #68
00b9c     F0 DA 01 F6 | 	mov	local03, local06
00ba0     20 00 00 FF 
00ba4     00 DA 0D F2 | 	cmp	local03, ##16384 wz
00ba8     14 00 90 5D |  if_ne	jmp	#LR__0010
00bac                 | LR__0009
00bac     08 5E 05 F1 | 	add	fp, #8
00bb0     AF D6 01 FB | 	rdlong	local01, fp
00bb4     04 D6 45 F5 | 	or	local01, #4
00bb8     AF D6 61 FC | 	wrlong	local01, fp
00bbc     08 5E 85 F1 | 	sub	fp, #8
00bc0                 | LR__0010
00bc0                 | LR__0011
00bc0     0C 5E 05 F1 | 	add	fp, #12
00bc4     AF DC 01 FB | 	rdlong	local04, fp
00bc8     0C 5E 85 F1 | 	sub	fp, #12
00bcc     EE D6 C1 FA | 	rdbyte	local01, local04
00bd0     2E D6 0D F2 | 	cmp	local01, #46 wz
00bd4     14 00 90 5D |  if_ne	jmp	#LR__0012
00bd8     08 5E 05 F1 | 	add	fp, #8
00bdc     AF D6 01 FB | 	rdlong	local01, fp
00be0     02 D6 45 F5 | 	or	local01, #2
00be4     AF D6 61 FC | 	wrlong	local01, fp
00be8     08 5E 85 F1 | 	sub	fp, #8
00bec                 | LR__0012
00bec     18 5E 05 F1 | 	add	fp, #24
00bf0     AF D6 01 FB | 	rdlong	local01, fp
00bf4     18 5E 85 F1 | 	sub	fp, #24
00bf8     92 D6 CD F7 | 	test	local01, #146 wz
00bfc     18 00 90 5D |  if_ne	jmp	#LR__0013
00c00     08 5E 05 F1 | 	add	fp, #8
00c04     AF D6 01 FB | 	rdlong	local01, fp
00c08     01 D6 45 F5 | 	or	local01, #1
00c0c     AF D6 61 FC | 	wrlong	local01, fp
00c10     08 5E 85 F1 | 	sub	fp, #8
00c14     14 00 90 FD | 	jmp	#LR__0014
00c18                 | LR__0013
00c18     08 5E 05 F1 | 	add	fp, #8
00c1c     AF D6 01 FB | 	rdlong	local01, fp
00c20     20 D6 45 F5 | 	or	local01, #32
00c24     AF D6 61 FC | 	wrlong	local01, fp
00c28     08 5E 85 F1 | 	sub	fp, #8
00c2c                 | LR__0014
00c2c     08 5E 05 F1 | 	add	fp, #8
00c30     AF D6 01 FB | 	rdlong	local01, fp
00c34     08 5E 85 F1 | 	sub	fp, #8
00c38     04 AC 05 F1 | 	add	ptr__dat__, #4
00c3c     D6 DE 01 FB | 	rdlong	local05, ptr__dat__
00c40     04 AC 85 F1 | 	sub	ptr__dat__, #4
00c44     EF D6 C9 F7 | 	test	local01, local05 wz
00c48                 | '                 continue;
00c48     14 FE 9F AD |  if_e	jmp	#LR__0006
00c4c                 | LR__0015
00c4c     0C 5E 05 F1 | 	add	fp, #12
00c50     AF CC 01 FB | 	rdlong	arg01, fp
00c54     0C 5E 85 F1 | 	sub	fp, #12
00c58     00 E4 05 F6 | 	mov	local08, #0
00c5c     B0 F3 9F FE | 	loc	pa,	#(@LR__0017-@LR__0016)
00c60     93 00 A0 FD | 	call	#FCACHE_LOAD_
00c64                 | LR__0016
00c64     E6 E6 C9 FA | 	rdbyte	local09, arg01 wz
00c68     01 E4 05 51 |  if_ne	add	local08, #1
00c6c     01 CC 05 51 |  if_ne	add	arg01, #1
00c70     F0 FF 9F 5D |  if_ne	jmp	#LR__0016
00c74                 | LR__0017
00c74     F2 B2 01 F6 | 	mov	result1, local08
00c78     D9 CC 01 F6 | 	mov	arg01, result1
00c7c     01 CC 05 F1 | 	add	arg01, #1
00c80     F4 83 B0 FD | 	call	#__system___gc_alloc_managed
00c84     D9 E8 01 F6 | 	mov	local10, result1
00c88     48 5E 05 F1 | 	add	fp, #72
00c8c     AF E8 61 FC | 	wrlong	local10, fp
00c90     AF D6 09 FB | 	rdlong	local01, fp wz
00c94     48 5E 85 F1 | 	sub	fp, #72
00c98     18 00 90 AD |  if_e	jmp	#LR__0018
00c9c     48 5E 05 F1 | 	add	fp, #72
00ca0     AF CC 01 FB | 	rdlong	arg01, fp
00ca4     3C 5E 85 F1 | 	sub	fp, #60
00ca8     AF CE 01 FB | 	rdlong	arg02, fp
00cac     0C 5E 85 F1 | 	sub	fp, #12
00cb0     E8 7A B0 FD | 	call	#__system____builtin_strcpy
00cb4                 | LR__0018
00cb4                 | '             __builtin_strcpy(string, ent->d_name) ;
00cb4                 | '         }
00cb4                 | '         return string;
00cb4     48 5E 05 F1 | 	add	fp, #72
00cb8     AF B2 01 FB | 	rdlong	result1, fp
00cbc     48 5E 85 F1 | 	sub	fp, #72
00cc0                 | LR__0019
00cc0     AF F0 03 F6 | 	mov	ptra, fp
00cc4     BA 00 A0 FD | 	call	#popregs_
00cc8                 | __basic_dir_ret
00cc8     2D 00 64 FD | 	ret
00ccc                 | 
00ccc                 | ' declare function getcwd lib "libc/unix/mount.c" (buf as ubyte pointer, size as integer) as ubyte pointer
00ccc                 | _getcwd
00ccc     06 5A 05 F6 | 	mov	COUNT_, #6
00cd0     B0 00 A0 FD | 	call	#pushregs_
00cd4     E6 D6 01 F6 | 	mov	local01, arg01
00cd8     E7 D8 01 F6 | 	mov	local02, arg02
00cdc     38 AC 05 F1 | 	add	ptr__dat__, #56
00ce0     D6 CC 01 F6 | 	mov	arg01, ptr__dat__
00ce4     38 AC 85 F1 | 	sub	ptr__dat__, #56
00ce8     00 DA 05 F6 | 	mov	local03, #0
00cec     20 F3 9F FE | 	loc	pa,	#(@LR__0021-@LR__0020)
00cf0     93 00 A0 FD | 	call	#FCACHE_LOAD_
00cf4                 | LR__0020
00cf4     E6 DC C9 FA | 	rdbyte	local04, arg01 wz
00cf8     01 DA 05 51 |  if_ne	add	local03, #1
00cfc     01 CC 05 51 |  if_ne	add	arg01, #1
00d00     F0 FF 9F 5D |  if_ne	jmp	#LR__0020
00d04                 | LR__0021
00d04     ED B2 01 F6 | 	mov	result1, local03
00d08     02 DE 05 F6 | 	mov	local05, #2
00d0c     D9 DE 01 F1 | 	add	local05, result1
00d10     EC DE 19 F2 | 	cmp	local05, local02 wcz
00d14     14 00 90 ED |  if_be	jmp	#LR__0022
00d18     1C AA 05 F1 | 	add	ptr___system__dat__, #28
00d1c     D5 04 68 FC | 	wrlong	#2, ptr___system__dat__
00d20     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
00d24                 | '         _seterror( 2 );
00d24                 | '         return  (0) ;
00d24     00 B2 05 F6 | 	mov	result1, #0
00d28     44 00 90 FD | 	jmp	#LR__0025
00d2c                 | LR__0022
00d2c     38 AC 05 F1 | 	add	ptr__dat__, #56
00d30     D6 E0 C1 FA | 	rdbyte	local06, ptr__dat__
00d34     38 AC 85 F1 | 	sub	ptr__dat__, #56
00d38     07 E0 45 F7 | 	zerox	local06, #7
00d3c     2F E0 0D F2 | 	cmp	local06, #47 wz
00d40     18 00 90 5D |  if_ne	jmp	#LR__0023
00d44     38 AC 05 F1 | 	add	ptr__dat__, #56
00d48     D6 CE 01 F6 | 	mov	arg02, ptr__dat__
00d4c     38 AC 85 F1 | 	sub	ptr__dat__, #56
00d50     EB CC 01 F6 | 	mov	arg01, local01
00d54     44 7A B0 FD | 	call	#__system____builtin_strcpy
00d58     10 00 90 FD | 	jmp	#LR__0024
00d5c                 | LR__0023
00d5c     4E 00 00 FF 
00d60     08 CE 05 F6 | 	mov	arg02, ##@LR__0694
00d64     EB CC 01 F6 | 	mov	arg01, local01
00d68     30 7A B0 FD | 	call	#__system____builtin_strcpy
00d6c                 | LR__0024
00d6c                 | '         __builtin_strcpy(buf, "/") ;
00d6c                 | '     }
00d6c                 | '     return buf;
00d6c     EB B2 01 F6 | 	mov	result1, local01
00d70                 | LR__0025
00d70     AF F0 03 F6 | 	mov	ptra, fp
00d74     BA 00 A0 FD | 	call	#popregs_
00d78                 | _getcwd_ret
00d78     2D 00 64 FD | 	ret
00d7c                 | 
00d7c                 | _opendir
00d7c     08 5A 05 F6 | 	mov	COUNT_, #8
00d80     B0 00 A0 FD | 	call	#pushregs_
00d84     E6 CE 01 F6 | 	mov	arg02, arg01
00d88                 | '     return tmpname;
00d88     38 AD 05 F1 | 	add	ptr__dat__, #312
00d8c     D6 B2 01 F6 | 	mov	result1, ptr__dat__
00d90     38 AD 85 F1 | 	sub	ptr__dat__, #312
00d94     D9 D6 01 F6 | 	mov	local01, result1
00d98     EB CC 01 F6 | 	mov	arg01, local01
00d9c     00 D0 05 F6 | 	mov	arg03, #0
00da0     44 07 B0 FD | 	call	#___getvfsforfile
00da4     D9 D8 09 F6 | 	mov	local02, result1 wz
00da8     14 00 90 AD |  if_e	jmp	#LR__0026
00dac     20 D8 05 F1 | 	add	local02, #32
00db0     EC DA 01 FB | 	rdlong	local03, local02
00db4     20 D8 85 F1 | 	sub	local02, #32
00db8     ED DC 09 F6 | 	mov	local04, local03 wz
00dbc     14 00 90 5D |  if_ne	jmp	#LR__0027
00dc0                 | LR__0026
00dc0     1C AA 05 F1 | 	add	ptr___system__dat__, #28
00dc4     D5 20 68 FC | 	wrlong	#16, ptr___system__dat__
00dc8     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
00dcc                 | '         _seterror( 16 );
00dcc                 | '         return 0;
00dcc     00 B2 05 F6 | 	mov	result1, #0
00dd0     90 00 90 FD | 	jmp	#LR__0030
00dd4                 | LR__0027
00dd4     50 CC 05 F6 | 	mov	arg01, #80
00dd8                 | '     return _gc_alloc(size);
00dd8     10 CE 05 F6 | 	mov	arg02, #16
00ddc     DC 82 B0 FD | 	call	#__system___gc_doalloc
00de0     D9 DE 09 F6 | 	mov	local05, result1 wz
00de4     14 00 90 5D |  if_ne	jmp	#LR__0028
00de8     1C AA 05 F1 | 	add	ptr___system__dat__, #28
00dec     D5 0E 68 FC | 	wrlong	#7, ptr___system__dat__
00df0     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
00df4                 | '         _seterror( 7 );
00df4                 | '         return 0;
00df4     00 B2 05 F6 | 	mov	result1, #0
00df8     68 00 90 FD | 	jmp	#LR__0030
00dfc                 | LR__0028
00dfc     20 D8 05 F1 | 	add	local02, #32
00e00     EC DC 01 FB | 	rdlong	local04, local02
00e04     20 D8 85 F1 | 	sub	local02, #32
00e08     EE DA 01 FB | 	rdlong	local03, local04
00e0c     04 DC 05 F1 | 	add	local04, #4
00e10     EE E0 01 FB | 	rdlong	local06, local04
00e14     EF CC 01 F6 | 	mov	arg01, local05
00e18     EB CE 01 F6 | 	mov	arg02, local01
00e1c     D3 E2 01 F6 | 	mov	local07, objptr
00e20     ED A6 01 F6 | 	mov	objptr, local03
00e24     2D E0 61 FD | 	call	local06
00e28     F1 A6 01 F6 | 	mov	objptr, local07
00e2c     D9 E4 09 F6 | 	mov	local08, result1 wz
00e30     28 00 90 AD |  if_e	jmp	#LR__0029
00e34     1C AA 05 F1 | 	add	ptr___system__dat__, #28
00e38     D5 E4 61 FC | 	wrlong	local08, ptr___system__dat__
00e3c     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
00e40     00 E4 0D F2 | 	cmp	local08, #0 wz
00e44     01 B2 65 56 |  if_ne	neg	result1, #1
00e48     00 B2 05 A6 |  if_e	mov	result1, #0
00e4c     EF CC 01 F6 | 	mov	arg01, local05
00e50                 | '     return _gc_free(ptr);
00e50     A0 83 B0 FD | 	call	#__system___gc_free
00e54                 | '         _seterror(r);
00e54                 | '         free(dir);
00e54                 | '         return 0;
00e54     00 B2 05 F6 | 	mov	result1, #0
00e58     08 00 90 FD | 	jmp	#LR__0030
00e5c                 | LR__0029
00e5c     EF D8 61 FC | 	wrlong	local02, local05
00e60                 | '     }
00e60                 | '     dir->vfs = v;
00e60                 | '     return dir;
00e60     EF B2 01 F6 | 	mov	result1, local05
00e64                 | LR__0030
00e64     AF F0 03 F6 | 	mov	ptra, fp
00e68     BA 00 A0 FD | 	call	#popregs_
00e6c                 | _opendir_ret
00e6c     2D 00 64 FD | 	ret
00e70                 | 
00e70                 | _closedir
00e70     07 5A 05 F6 | 	mov	COUNT_, #7
00e74     B0 00 A0 FD | 	call	#pushregs_
00e78     E6 D6 01 F6 | 	mov	local01, arg01
00e7c     EB D8 01 FB | 	rdlong	local02, local01
00e80     24 D8 05 F1 | 	add	local02, #36
00e84     EC DA 01 FB | 	rdlong	local03, local02
00e88     ED DC 01 FB | 	rdlong	local04, local03
00e8c     04 DA 05 F1 | 	add	local03, #4
00e90     ED DE 01 FB | 	rdlong	local05, local03
00e94     EB CC 01 F6 | 	mov	arg01, local01
00e98     D3 E0 01 F6 | 	mov	local06, objptr
00e9c     EE A6 01 F6 | 	mov	objptr, local04
00ea0     2D DE 61 FD | 	call	local05
00ea4     F0 A6 01 F6 | 	mov	objptr, local06
00ea8     D9 E2 01 F6 | 	mov	local07, result1
00eac     EB CC 01 F6 | 	mov	arg01, local01
00eb0                 | '     return _gc_free(ptr);
00eb0     40 83 B0 FD | 	call	#__system___gc_free
00eb4                 | '     r = v->closedir(dir);
00eb4                 | '     free(dir);
00eb4                 | '     return _seterror(r);
00eb4     1C AA 05 F1 | 	add	ptr___system__dat__, #28
00eb8     D5 E2 61 FC | 	wrlong	local07, ptr___system__dat__
00ebc     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
00ec0     00 E2 0D F2 | 	cmp	local07, #0 wz
00ec4     01 B2 65 56 |  if_ne	neg	result1, #1
00ec8     00 B2 05 A6 |  if_e	mov	result1, #0
00ecc     AF F0 03 F6 | 	mov	ptra, fp
00ed0     BA 00 A0 FD | 	call	#popregs_
00ed4                 | _closedir_ret
00ed4     2D 00 64 FD | 	ret
00ed8                 | 
00ed8                 | _readdir
00ed8     07 5A 05 F6 | 	mov	COUNT_, #7
00edc     B0 00 A0 FD | 	call	#pushregs_
00ee0     E6 D6 09 FB | 	rdlong	local01, arg01 wz
00ee4     08 CC 05 F1 | 	add	arg01, #8
00ee8     E6 D8 01 F6 | 	mov	local02, arg01
00eec                 | '         return 0;
00eec     08 CC 85 F1 | 	sub	arg01, #8
00ef0     00 B2 05 A6 |  if_e	mov	result1, #0
00ef4     4C 00 90 AD |  if_e	jmp	#LR__0032
00ef8     28 D6 05 F1 | 	add	local01, #40
00efc     EB DA 01 FB | 	rdlong	local03, local01
00f00     ED DC 01 FB | 	rdlong	local04, local03
00f04     04 DA 05 F1 | 	add	local03, #4
00f08     ED DE 01 FB | 	rdlong	local05, local03
00f0c     EC CE 01 F6 | 	mov	arg02, local02
00f10     D3 E0 01 F6 | 	mov	local06, objptr
00f14     EE A6 01 F6 | 	mov	objptr, local04
00f18     2D DE 61 FD | 	call	local05
00f1c     F0 A6 01 F6 | 	mov	objptr, local06
00f20     D9 E2 09 F6 | 	mov	local07, result1 wz
00f24     18 00 90 AD |  if_e	jmp	#LR__0031
00f28     00 E2 5D F2 | 	cmps	local07, #0 wcz
00f2c     1C AA 05 11 |  if_a	add	ptr___system__dat__, #28
00f30     D5 E2 61 1C |  if_a	wrlong	local07, ptr___system__dat__
00f34     1C AA 85 11 |  if_a	sub	ptr___system__dat__, #28
00f38                 | '             _seterror(r);
00f38                 | '         }
00f38                 | '         return 0;
00f38     00 B2 05 F6 | 	mov	result1, #0
00f3c     04 00 90 FD | 	jmp	#LR__0032
00f40                 | LR__0031
00f40                 | '     }
00f40                 | '     return D;
00f40     EC B2 01 F6 | 	mov	result1, local02
00f44                 | LR__0032
00f44     AF F0 03 F6 | 	mov	ptra, fp
00f48     BA 00 A0 FD | 	call	#popregs_
00f4c                 | _readdir_ret
00f4c     2D 00 64 FD | 	ret
00f50                 | 
00f50                 | _stat
00f50     09 5A 05 F6 | 	mov	COUNT_, #9
00f54     B0 00 A0 FD | 	call	#pushregs_
00f58     E6 D6 01 F6 | 	mov	local01, arg01
00f5c     E7 D8 01 F6 | 	mov	local02, arg02
00f60                 | '     return tmpname;
00f60     38 AD 05 F1 | 	add	ptr__dat__, #312
00f64     D6 B2 01 F6 | 	mov	result1, ptr__dat__
00f68     38 AD 85 F1 | 	sub	ptr__dat__, #312
00f6c     D9 DA 01 F6 | 	mov	local03, result1
00f70     ED CC 01 F6 | 	mov	arg01, local03
00f74     EB CE 01 F6 | 	mov	arg02, local01
00f78     00 D0 05 F6 | 	mov	arg03, #0
00f7c     68 05 B0 FD | 	call	#___getvfsforfile
00f80     D9 DC 09 F6 | 	mov	local04, result1 wz
00f84     14 00 90 AD |  if_e	jmp	#LR__0033
00f88     2C DC 05 F1 | 	add	local04, #44
00f8c     EE DE 01 FB | 	rdlong	local05, local04
00f90     2C DC 85 F1 | 	sub	local04, #44
00f94     EF E0 09 F6 | 	mov	local06, local05 wz
00f98     14 00 90 5D |  if_ne	jmp	#LR__0034
00f9c                 | LR__0033
00f9c                 | ' #line 19 "/home/pik33/flexprop/include/libc/unix/stat.c"
00f9c                 | '         return _seterror( 16 );
00f9c     1C AA 05 F1 | 	add	ptr___system__dat__, #28
00fa0     D5 20 68 FC | 	wrlong	#16, ptr___system__dat__
00fa4     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
00fa8     01 B2 65 F6 | 	neg	result1, #1
00fac     44 00 90 FD | 	jmp	#LR__0035
00fb0                 | LR__0034
00fb0     EC CC 01 F6 | 	mov	arg01, local02
00fb4     00 CE 05 F6 | 	mov	arg02, #0
00fb8     30 D0 05 F6 | 	mov	arg03, #48
00fbc     E6 E2 01 F6 | 	mov	local07, arg01
00fc0     A0 00 A0 FD | 	call	#\builtin_bytefill_
00fc4     F1 B2 01 F6 | 	mov	result1, local07
00fc8     2C DC 05 F1 | 	add	local04, #44
00fcc     EE E0 01 FB | 	rdlong	local06, local04
00fd0     F0 DE 01 FB | 	rdlong	local05, local06
00fd4     04 E0 05 F1 | 	add	local06, #4
00fd8     F0 E4 01 FB | 	rdlong	local08, local06
00fdc     ED CC 01 F6 | 	mov	arg01, local03
00fe0     EC CE 01 F6 | 	mov	arg02, local02
00fe4     D3 E6 01 F6 | 	mov	local09, objptr
00fe8     EF A6 01 F6 | 	mov	objptr, local05
00fec     2D E4 61 FD | 	call	local08
00ff0     F3 A6 01 F6 | 	mov	objptr, local09
00ff4                 | ' #line 29 "/home/pik33/flexprop/include/libc/unix/stat.c"
00ff4                 | '     r = v->stat(name, buf);
00ff4                 | ' #line 33 "/home/pik33/flexprop/include/libc/unix/stat.c"
00ff4                 | '     return r;
00ff4                 | LR__0035
00ff4     AF F0 03 F6 | 	mov	ptra, fp
00ff8     BA 00 A0 FD | 	call	#popregs_
00ffc                 | _stat_ret
00ffc     2D 00 64 FD | 	ret
01000                 | 
01000                 | _strncpy
01000     E6 B6 01 F6 | 	mov	_var01, arg01
01004     1C F0 9F FE | 	loc	pa,	#(@LR__0037-@LR__0036)
01008     93 00 A0 FD | 	call	#FCACHE_LOAD_
0100c                 | ' 
0100c                 | ' 	dscan = dst;
0100c                 | ' 	sscan = src;
0100c                 | ' 	count = n;
0100c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
0100c                 | LR__0036
0100c     01 D0 85 F1 | 	sub	arg03, #1
01010     00 D0 5D F2 | 	cmps	arg03, #0 wcz
01014     18 00 90 CD |  if_b	jmp	#LR__0038
01018     E7 B8 C1 FA | 	rdbyte	_var02, arg02
0101c     DB B8 41 FC | 	wrbyte	_var02, _var01
01020     01 CE 05 F1 | 	add	arg02, #1
01024     DB BA C9 FA | 	rdbyte	_var03, _var01 wz
01028                 | ' 		continue;
01028     01 B6 05 F1 | 	add	_var01, #1
0102c     DC FF 9F 5D |  if_ne	jmp	#LR__0036
01030                 | LR__0037
01030                 | LR__0038
01030     E0 EF 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
01034     93 00 A0 FD | 	call	#FCACHE_LOAD_
01038                 | ' 	while (--count >= 0)
01038                 | LR__0039
01038     01 D0 85 F1 | 	sub	arg03, #1
0103c     00 D0 5D F2 | 	cmps	arg03, #0 wcz
01040     DB 00 48 3C |  if_ae	wrbyte	#0, _var01
01044     01 B6 05 31 |  if_ae	add	_var01, #1
01048     EC FF 9F 3D |  if_ae	jmp	#LR__0039
0104c                 | LR__0040
0104c                 | ' 		*dscan++ = '\0';
0104c                 | ' 	return(dst);
0104c     E6 B2 01 F6 | 	mov	result1, arg01
01050                 | _strncpy_ret
01050     2D 00 64 FD | 	ret
01054                 | 
01054                 | _strncat
01054     E6 B6 01 F6 | 	mov	_var01, arg01
01058     E7 B8 01 F6 | 	mov	_var02, arg02
0105c     E8 BA 01 F6 | 	mov	_var03, arg03
01060     DC BC 09 F6 | 	mov	_var04, _var02 wz
01064     68 00 90 AD |  if_e	jmp	#LR__0045
01068     00 BA 1D F2 | 	cmp	_var03, #0 wcz
0106c     60 00 90 ED |  if_be	jmp	#LR__0045
01070                 | ' 	{
01070                 | ' 	    for (dscan = dst; *dscan != '\0'; dscan++)
01070     DB BE 01 F6 | 	mov	_var05, _var01
01074     D4 EF 9F FE | 	loc	pa,	#(@LR__0043-@LR__0041)
01078     93 00 A0 FD | 	call	#FCACHE_LOAD_
0107c                 | LR__0041
0107c     DF C0 C9 FA | 	rdbyte	_var06, _var05 wz
01080                 | ' 		continue;
01080     01 BE 05 51 |  if_ne	add	_var05, #1
01084     F4 FF 9F 5D |  if_ne	jmp	#LR__0041
01088     DD C2 01 F6 | 	mov	_var07, _var03
0108c                 | ' 	    count = n;
0108c                 | ' 	    while ((c = *sscan++) != '\0' && --count >= 0)
0108c                 | LR__0042
0108c     DE C4 01 F6 | 	mov	_var08, _var04
01090     DE C6 01 F6 | 	mov	_var09, _var04
01094     01 C6 05 F1 | 	add	_var09, #1
01098     E3 BC 01 F6 | 	mov	_var04, _var09
0109c     E2 C8 C1 FA | 	rdbyte	_var10, _var08
010a0     E4 C0 01 F6 | 	mov	_var06, _var10
010a4     07 C0 4D F7 | 	zerox	_var06, #7 wz
010a8     1C 00 90 AD |  if_e	jmp	#LR__0044
010ac     E1 CA 01 F6 | 	mov	_var11, _var07
010b0     01 CA 85 F1 | 	sub	_var11, #1
010b4     E5 C2 01 F6 | 	mov	_var07, _var11
010b8     00 C2 5D F2 | 	cmps	_var07, #0 wcz
010bc     DF C8 41 3C |  if_ae	wrbyte	_var10, _var05
010c0     01 BE 05 31 |  if_ae	add	_var05, #1
010c4     C4 FF 9F 3D |  if_ae	jmp	#LR__0042
010c8                 | LR__0043
010c8                 | LR__0044
010c8     00 C0 05 F6 | 	mov	_var06, #0
010cc     DF 00 48 FC | 	wrbyte	#0, _var05
010d0                 | LR__0045
010d0                 | ' 		*dscan++ = c;
010d0                 | ' 	    *dscan = '\0';
010d0                 | ' 	}
010d0                 | ' 	return(dst);
010d0     DB B2 01 F6 | 	mov	result1, _var01
010d4                 | _strncat_ret
010d4     2D 00 64 FD | 	ret
010d8                 | 
010d8                 | _strncmp
010d8     E6 B6 09 F6 | 	mov	_var01, arg01 wz
010dc     E7 B8 01 F6 | 	mov	_var02, arg02
010e0     E8 BA 01 F6 | 	mov	_var03, arg03
010e4     14 00 90 5D |  if_ne	jmp	#LR__0046
010e8                 | ' 		return scan2 ? -1 : 0;
010e8     00 B8 0D F2 | 	cmp	_var02, #0 wz
010ec     01 BC 65 56 |  if_ne	neg	_var04, #1
010f0     00 BC 05 A6 |  if_e	mov	_var04, #0
010f4     DE B2 01 F6 | 	mov	result1, _var04
010f8     8C 00 90 FD | 	jmp	#_strncmp_ret
010fc                 | LR__0046
010fc     00 B8 0D F2 | 	cmp	_var02, #0 wz
01100     01 B2 05 A6 |  if_e	mov	result1, #1
01104     80 00 90 AD |  if_e	jmp	#_strncmp_ret
01108     DD BE 01 F6 | 	mov	_var05, _var03
0110c     30 EF 9F FE | 	loc	pa,	#(@LR__0048-@LR__0047)
01110     93 00 A0 FD | 	call	#FCACHE_LOAD_
01114                 | ' 	count = n;
01114                 | ' 	do {
01114                 | LR__0047
01114     DB C0 C1 FA | 	rdbyte	_var06, _var01
01118     DC C2 01 F6 | 	mov	_var07, _var02
0111c     DC C4 01 F6 | 	mov	_var08, _var02
01120     01 C4 05 F1 | 	add	_var08, #1
01124     E2 B8 01 F6 | 	mov	_var02, _var08
01128     E1 C6 C1 FA | 	rdbyte	_var09, _var07
0112c     DF BC 01 F6 | 	mov	_var04, _var05
01130     01 BC 85 F1 | 	sub	_var04, #1
01134     DE BE 01 F6 | 	mov	_var05, _var04
01138     00 BE 5D F2 | 	cmps	_var05, #0 wcz
0113c     01 B6 05 F1 | 	add	_var01, #1
01140     10 00 90 CD |  if_b	jmp	#LR__0049
01144     00 C0 0D F2 | 	cmp	_var06, #0 wz
01148     08 00 90 AD |  if_e	jmp	#LR__0049
0114c     E3 C0 09 F2 | 	cmp	_var06, _var09 wz
01150     C0 FF 9F AD |  if_e	jmp	#LR__0047
01154                 | LR__0048
01154                 | LR__0049
01154     00 BE 5D F2 | 	cmps	_var05, #0 wcz
01158                 | ' 		return(0);
01158     00 B2 05 C6 |  if_b	mov	result1, #0
0115c     28 00 90 CD |  if_b	jmp	#_strncmp_ret
01160     E3 C0 09 F2 | 	cmp	_var06, _var09 wz
01164                 | ' 		return(0);
01164     00 B2 05 A6 |  if_e	mov	result1, #0
01168     1C 00 90 AD |  if_e	jmp	#_strncmp_ret
0116c     00 C0 0D F2 | 	cmp	_var06, #0 wz
01170                 | ' 		return(-1);
01170     01 B2 65 A6 |  if_e	neg	result1, #1
01174     10 00 90 AD |  if_e	jmp	#_strncmp_ret
01178     00 C6 0D F2 | 	cmp	_var09, #0 wz
0117c                 | ' 		return(1);
0117c     01 B2 05 A6 |  if_e	mov	result1, #1
01180                 | ' 		return(c1 - c2);
01180     E0 B2 01 56 |  if_ne	mov	result1, _var06
01184     E3 B2 81 51 |  if_ne	sub	result1, _var09
01188                 | _strncmp_ret
01188     2D 00 64 FD | 	ret
0118c                 | 
0118c                 | _getlower_0133
0118c     41 CC 5D F2 | 	cmps	arg01, #65 wcz
01190     10 00 90 CD |  if_b	jmp	#LR__0050
01194     5A CC 5D F2 | 	cmps	arg01, #90 wcz
01198                 | '         return c + ('a' - 'A');
01198     E6 B2 01 E6 |  if_be	mov	result1, arg01
0119c     20 B2 05 E1 |  if_be	add	result1, #32
011a0     04 00 90 ED |  if_be	jmp	#_getlower_0133_ret
011a4                 | LR__0050
011a4                 | '     }
011a4                 | '     return c;
011a4     E6 B2 01 F6 | 	mov	result1, arg01
011a8                 | _getlower_0133_ret
011a8     2D 00 64 FD | 	ret
011ac                 | 
011ac                 | __pat_match
011ac     0C 5A 05 F6 | 	mov	COUNT_, #12
011b0     B0 00 A0 FD | 	call	#pushregs_
011b4     E6 D6 01 F6 | 	mov	local01, arg01
011b8     E7 D8 01 F6 | 	mov	local02, arg02
011bc                 | ' 
011bc                 | '     while (*pattern && *name && *pattern != '*') {
011bc                 | LR__0051
011bc     EC DA C9 FA | 	rdbyte	local03, local02 wz
011c0     44 00 90 AD |  if_e	jmp	#LR__0052
011c4     EB DC C9 FA | 	rdbyte	local04, local01 wz
011c8     3C 00 90 AD |  if_e	jmp	#LR__0052
011cc     EC DE C1 FA | 	rdbyte	local05, local02
011d0     2A DE 0D F2 | 	cmp	local05, #42 wz
011d4     30 00 90 AD |  if_e	jmp	#LR__0052
011d8     EC CC C1 FA | 	rdbyte	arg01, local02
011dc     AC FF BF FD | 	call	#_getlower_0133
011e0     D9 E0 01 F6 | 	mov	local06, result1
011e4     EB CC C1 FA | 	rdbyte	arg01, local01
011e8     A0 FF BF FD | 	call	#_getlower_0133
011ec     D9 E2 01 F6 | 	mov	local07, result1
011f0     F0 E2 09 F2 | 	cmp	local07, local06 wz
011f4     00 B2 05 56 |  if_ne	mov	result1, #0
011f8     08 01 90 5D |  if_ne	jmp	#LR__0061
011fc     01 D6 05 F1 | 	add	local01, #1
01200     01 D8 05 F1 | 	add	local02, #1
01204     B4 FF 9F FD | 	jmp	#LR__0051
01208                 | LR__0052
01208     EC DA C1 FA | 	rdbyte	local03, local02
0120c     2A DA 0D F2 | 	cmp	local03, #42 wz
01210     D8 00 90 5D |  if_ne	jmp	#LR__0059
01214     01 D8 05 F1 | 	add	local02, #1
01218     EC DA C1 FA | 	rdbyte	local03, local02
0121c     01 D8 85 F1 | 	sub	local02, #1
01220     07 DA 45 F7 | 	zerox	local03, #7
01224     2E DA 0D F2 | 	cmp	local03, #46 wz
01228     34 00 90 5D |  if_ne	jmp	#LR__0053
0122c     02 D8 05 F1 | 	add	local02, #2
01230     EC E4 C1 FA | 	rdbyte	local08, local02
01234     02 D8 85 F1 | 	sub	local02, #2
01238     F2 DE 01 F6 | 	mov	local05, local08
0123c     07 DE 45 F7 | 	zerox	local05, #7
01240     2A DE 0D F2 | 	cmp	local05, #42 wz
01244     18 00 90 5D |  if_ne	jmp	#LR__0053
01248     03 D8 05 F1 | 	add	local02, #3
0124c     EC E6 C1 FA | 	rdbyte	local09, local02
01250     03 D8 85 F1 | 	sub	local02, #3
01254     F3 E8 09 F6 | 	mov	local10, local09 wz
01258                 | '             return 1;
01258     01 B2 05 A6 |  if_e	mov	result1, #1
0125c     A4 00 90 AD |  if_e	jmp	#LR__0061
01260                 | LR__0053
01260     01 D8 05 F1 | 	add	local02, #1
01264                 | '         }
01264                 | ' 
01264                 | '         pattern++;
01264                 | '         for (pat_len = 0; pattern[pat_len] != 0; pat_len++) ;
01264     00 EA 05 F6 | 	mov	local11, #0
01268     C0 ED 9F FE | 	loc	pa,	#(@LR__0056-@LR__0054)
0126c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01270                 | LR__0054
01270     F5 DC 01 F6 | 	mov	local04, local11
01274     EC DC 01 F1 | 	add	local04, local02
01278     EE DA C9 FA | 	rdbyte	local03, local04 wz
0127c     01 EA 05 51 |  if_ne	add	local11, #1
01280     EC FF 9F 5D |  if_ne	jmp	#LR__0054
01284                 | '         for (name_len = 0; name[name_len] != 0; name_len++) ;
01284     00 EC 05 F6 | 	mov	local12, #0
01288                 | LR__0055
01288     F6 DC 01 F6 | 	mov	local04, local12
0128c     EB DC 01 F1 | 	add	local04, local01
01290     EE DA C9 FA | 	rdbyte	local03, local04 wz
01294     01 EC 05 51 |  if_ne	add	local12, #1
01298     EC FF 9F 5D |  if_ne	jmp	#LR__0055
0129c                 | LR__0056
0129c     F5 EC 59 F2 | 	cmps	local12, local11 wcz
012a0     00 B2 05 C6 |  if_b	mov	result1, #0
012a4     5C 00 90 CD |  if_b	jmp	#LR__0061
012a8     F6 DE 01 F6 | 	mov	local05, local12
012ac     F5 DE 81 F1 | 	sub	local05, local11
012b0     EF D6 01 F1 | 	add	local01, local05
012b4                 | '         name += (name_len - pat_len);
012b4                 | '         while (pat_len > 0) {
012b4                 | LR__0057
012b4     00 EA 5D F2 | 	cmps	local11, #0 wcz
012b8     30 00 90 ED |  if_be	jmp	#LR__0058
012bc     EB CC C1 FA | 	rdbyte	arg01, local01
012c0     C8 FE BF FD | 	call	#_getlower_0133
012c4     D9 DE 01 F6 | 	mov	local05, result1
012c8     EC CC C1 FA | 	rdbyte	arg01, local02
012cc     BC FE BF FD | 	call	#_getlower_0133
012d0     D9 DE 09 F2 | 	cmp	local05, result1 wz
012d4     00 B2 05 56 |  if_ne	mov	result1, #0
012d8     28 00 90 5D |  if_ne	jmp	#LR__0061
012dc     01 D6 05 F1 | 	add	local01, #1
012e0     01 D8 05 F1 | 	add	local02, #1
012e4     01 EA 85 F1 | 	sub	local11, #1
012e8     C8 FF 9F FD | 	jmp	#LR__0057
012ec                 | LR__0058
012ec                 | LR__0059
012ec     EC DA C9 FA | 	rdbyte	local03, local02 wz
012f0     0C 00 90 5D |  if_ne	jmp	#LR__0060
012f4     EB DC C9 FA | 	rdbyte	local04, local01 wz
012f8                 | '         return 1;
012f8     01 B2 05 A6 |  if_e	mov	result1, #1
012fc     04 00 90 AD |  if_e	jmp	#LR__0061
01300                 | LR__0060
01300                 | '     }
01300                 | '     return 0;
01300     00 B2 05 F6 | 	mov	result1, #0
01304                 | LR__0061
01304     AF F0 03 F6 | 	mov	ptra, fp
01308     BA 00 A0 FD | 	call	#popregs_
0130c                 | __pat_match_ret
0130c     2D 00 64 FD | 	ret
01310                 | 
01310                 | __vfs_open_sdcardx
01310     06 5A 05 F6 | 	mov	COUNT_, #6
01314     B0 00 A0 FD | 	call	#pushregs_
01318     01 00 00 FF 
0131c     3C AC 05 F1 | 	add	ptr__dat__, ##572
01320     E6 D6 01 F6 | 	mov	local01, arg01
01324     E7 D8 01 F6 | 	mov	local02, arg02
01328     E8 DA 01 F6 | 	mov	local03, arg03
0132c     E9 D4 01 F6 | 	mov	arg05, arg04
01330     00 CC 05 F6 | 	mov	arg01, #0
01334     EB CE 01 F6 | 	mov	arg02, local01
01338     EC D0 01 F6 | 	mov	arg03, local02
0133c     ED D2 01 F6 | 	mov	arg04, local03
01340     D3 DC 01 F6 | 	mov	local04, objptr
01344     D6 A6 01 F6 | 	mov	objptr, ptr__dat__
01348     01 00 00 FF 
0134c     3C AC 85 F1 | 	sub	ptr__dat__, ##572
01350     14 0D B0 FD | 	call	#_ff_cc_disk_setpins
01354     EE A6 01 F6 | 	mov	objptr, local04
01358     D9 DE 09 F6 | 	mov	local05, result1 wz
0135c     38 00 90 5D |  if_ne	jmp	#LR__0062
01360     01 00 00 FF 
01364     3C AC 05 F1 | 	add	ptr__dat__, ##572
01368     D6 E0 01 F6 | 	mov	local06, ptr__dat__
0136c     D6 CC 01 F6 | 	mov	arg01, ptr__dat__
01370     01 00 00 FF 
01374     3C AC 85 F1 | 	sub	ptr__dat__, ##572
01378     4E 00 00 FF 
0137c     0A CE 05 F6 | 	mov	arg02, ##@LR__0695
01380     00 D0 05 F6 | 	mov	arg03, #0
01384     D3 DC 01 F6 | 	mov	local04, objptr
01388     F0 A6 01 F6 | 	mov	objptr, local06
0138c     0C 32 B0 FD | 	call	#_ff_cc_f_mount
01390     EE A6 01 F6 | 	mov	objptr, local04
01394     D9 DE 01 F6 | 	mov	local05, result1
01398                 | LR__0062
01398     00 DE 0D F2 | 	cmp	local05, #0 wz
0139c     18 00 90 AD |  if_e	jmp	#LR__0063
013a0     EF CC 69 F6 | 	neg	arg01, local05 wz
013a4     1C AA 05 F1 | 	add	ptr___system__dat__, #28
013a8     D5 CC 61 FC | 	wrlong	arg01, ptr___system__dat__
013ac     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
013b0                 | ' #line 26 "/home/pik33/flexprop/include/filesys/fatfs/fatfs_vfs.c"
013b0                 | '        _seterror(-r);
013b0                 | '        return 0;
013b0     00 B2 05 F6 | 	mov	result1, #0
013b4     0C 00 90 FD | 	jmp	#LR__0064
013b8                 | LR__0063
013b8                 | ' get_vfs()
013b8                 | ' {
013b8                 | '     return &fat_vfs;
013b8     C0 AE 05 F1 | 	add	ptr__ff_cc_dat__, #192
013bc     D7 B2 01 F6 | 	mov	result1, ptr__ff_cc_dat__
013c0     C0 AE 85 F1 | 	sub	ptr__ff_cc_dat__, #192
013c4                 | '     }
013c4                 | '     v = FFS.get_vfs();
013c4                 | ' #line 36 "/home/pik33/flexprop/include/filesys/fatfs/fatfs_vfs.c"
013c4                 | '     return v;
013c4                 | LR__0064
013c4     AF F0 03 F6 | 	mov	ptra, fp
013c8     BA 00 A0 FD | 	call	#popregs_
013cc                 | __vfs_open_sdcardx_ret
013cc     2D 00 64 FD | 	ret
013d0                 | 
013d0                 | _chdir
013d0     02 5A 05 F6 | 	mov	COUNT_, #2
013d4     B0 00 A0 FD | 	call	#pushregs_
013d8     40 F0 07 F1 | 	add	ptra, #64
013dc     04 5E 05 F1 | 	add	fp, #4
013e0     AF CC 61 FC | 	wrlong	arg01, fp
013e4     04 5E 05 F1 | 	add	fp, #4
013e8     AF CE 01 F6 | 	mov	arg02, fp
013ec     08 5E 85 F1 | 	sub	fp, #8
013f0     5C FB BF FD | 	call	#_stat
013f4     3C 5E 05 F1 | 	add	fp, #60
013f8     AF B2 61 FC | 	wrlong	result1, fp
013fc     AF D6 09 FB | 	rdlong	local01, fp wz
01400     3C 5E 85 F1 | 	sub	fp, #60
01404     10 00 90 AD |  if_e	jmp	#LR__0065
01408                 | ' #line 143 "/home/pik33/flexprop/include/libc/unix/mount.c"
01408                 | '         return r;
01408     3C 5E 05 F1 | 	add	fp, #60
0140c     AF B2 01 FB | 	rdlong	result1, fp
01410     3C 5E 85 F1 | 	sub	fp, #60
01414     C4 00 90 FD | 	jmp	#LR__0069
01418                 | LR__0065
01418     10 5E 05 F1 | 	add	fp, #16
0141c     AF D6 01 FB | 	rdlong	local01, fp
01420     10 5E 85 F1 | 	sub	fp, #16
01424     78 00 00 FF 
01428     00 D6 05 F5 | 	and	local01, ##61440
0142c     08 00 00 FF 
01430     00 D6 0D F2 | 	cmp	local01, ##4096 wz
01434     14 00 90 AD |  if_e	jmp	#LR__0066
01438                 | ' #line 149 "/home/pik33/flexprop/include/libc/unix/mount.c"
01438                 | '         return _seterror( 13 );
01438     1C AA 05 F1 | 	add	ptr___system__dat__, #28
0143c     D5 1A 68 FC | 	wrlong	#13, ptr___system__dat__
01440     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
01444     01 B2 65 F6 | 	neg	result1, #1
01448     90 00 90 FD | 	jmp	#LR__0069
0144c                 | LR__0066
0144c     04 5E 05 F1 | 	add	fp, #4
01450     AF D8 01 FB | 	rdlong	local02, fp
01454     04 5E 85 F1 | 	sub	fp, #4
01458     EC D6 C1 FA | 	rdbyte	local01, local02
0145c     2F D6 0D F2 | 	cmp	local01, #47 wz
01460     24 00 90 5D |  if_ne	jmp	#LR__0067
01464     38 AC 05 F1 | 	add	ptr__dat__, #56
01468     D6 CC 01 F6 | 	mov	arg01, ptr__dat__
0146c     38 AC 85 F1 | 	sub	ptr__dat__, #56
01470     04 5E 05 F1 | 	add	fp, #4
01474     AF CE 01 FB | 	rdlong	arg02, fp
01478     04 5E 85 F1 | 	sub	fp, #4
0147c     00 D1 05 F6 | 	mov	arg03, #256
01480     7C FB BF FD | 	call	#_strncpy
01484     50 00 90 FD | 	jmp	#LR__0068
01488                 | LR__0067
01488                 | '     return tmpname;
01488     38 AD 05 F1 | 	add	ptr__dat__, #312
0148c     D6 B2 01 F6 | 	mov	result1, ptr__dat__
01490     38 5E 05 F1 | 	add	fp, #56
01494     AF B2 61 FC | 	wrlong	result1, fp
01498     D9 CC 01 F6 | 	mov	arg01, result1
0149c     38 5E 85 F1 | 	sub	fp, #56
014a0     00 AD 85 F1 | 	sub	ptr__dat__, #256
014a4     D6 CE 01 F6 | 	mov	arg02, ptr__dat__
014a8     38 AC 85 F1 | 	sub	ptr__dat__, #56
014ac     00 D1 05 F6 | 	mov	arg03, #256
014b0     4C FB BF FD | 	call	#_strncpy
014b4     38 5E 05 F1 | 	add	fp, #56
014b8     AF CC 01 FB | 	rdlong	arg01, fp
014bc     34 5E 85 F1 | 	sub	fp, #52
014c0     AF CE 01 FB | 	rdlong	arg02, fp
014c4     04 5E 85 F1 | 	sub	fp, #4
014c8     38 AC 05 F1 | 	add	ptr__dat__, #56
014cc     D6 D0 01 F6 | 	mov	arg03, ptr__dat__
014d0     38 AC 85 F1 | 	sub	ptr__dat__, #56
014d4     10 00 B0 FD | 	call	#___getvfsforfile
014d8                 | LR__0068
014d8                 | '         tmp = __getfilebuffer();
014d8                 | '         strncpy(tmp, curdir,  (256) );
014d8                 | '         __getvfsforfile(tmp, path, curdir);
014d8                 | '     }
014d8                 | '     return 0;
014d8     00 B2 05 F6 | 	mov	result1, #0
014dc                 | LR__0069
014dc     AF F0 03 F6 | 	mov	ptra, fp
014e0     BA 00 A0 FD | 	call	#popregs_
014e4                 | _chdir_ret
014e4     2D 00 64 FD | 	ret
014e8                 | 
014e8                 | ___getvfsforfile
014e8     12 5A 05 F6 | 	mov	COUNT_, #18
014ec     B0 00 A0 FD | 	call	#pushregs_
014f0     E6 D6 01 F6 | 	mov	local01, arg01
014f4     E7 D8 01 F6 | 	mov	local02, arg02
014f8     E8 DA 01 F6 | 	mov	local03, arg03
014fc     EC DC C1 FA | 	rdbyte	local04, local02
01500     2F DC 0D F2 | 	cmp	local04, #47 wz
01504     14 00 90 5D |  if_ne	jmp	#LR__0070
01508     EB CC 01 F6 | 	mov	arg01, local01
0150c     EC CE 01 F6 | 	mov	arg02, local02
01510     00 D1 05 F6 | 	mov	arg03, #256
01514     E8 FA BF FD | 	call	#_strncpy
01518     6C 00 90 FD | 	jmp	#LR__0073
0151c                 | LR__0070
0151c     38 AC 05 F1 | 	add	ptr__dat__, #56
01520     D6 CE 01 F6 | 	mov	arg02, ptr__dat__
01524     38 AC 85 F1 | 	sub	ptr__dat__, #56
01528     EB CC 01 F6 | 	mov	arg01, local01
0152c     00 D1 05 F6 | 	mov	arg03, #256
01530     CC FA BF FD | 	call	#_strncpy
01534     D9 DE 01 F6 | 	mov	local05, result1
01538     EC DC C9 FA | 	rdbyte	local04, local02 wz
0153c     48 00 90 AD |  if_e	jmp	#LR__0072
01540     EC E0 C1 FA | 	rdbyte	local06, local02
01544     2E E0 0D F2 | 	cmp	local06, #46 wz
01548     18 00 90 5D |  if_ne	jmp	#LR__0071
0154c     01 D8 05 F1 | 	add	local02, #1
01550     EC E2 C1 FA | 	rdbyte	local07, local02
01554     01 D8 85 F1 | 	sub	local02, #1
01558     F1 E4 01 F6 | 	mov	local08, local07
0155c     07 E4 4D F7 | 	zerox	local08, #7 wz
01560     24 00 90 AD |  if_e	jmp	#LR__0072
01564                 | LR__0071
01564     4E 00 00 FF 
01568     0C CE 05 F6 | 	mov	arg02, ##@LR__0696
0156c     EB CC 01 F6 | 	mov	arg01, local01
01570     00 D1 05 F6 | 	mov	arg03, #256
01574     DC FA BF FD | 	call	#_strncat
01578     EB CC 01 F6 | 	mov	arg01, local01
0157c     EC CE 01 F6 | 	mov	arg02, local02
01580     00 D1 05 F6 | 	mov	arg03, #256
01584     CC FA BF FD | 	call	#_strncat
01588                 | LR__0072
01588                 | LR__0073
01588                 | '             strncat(name, "/",  (256) );
01588                 | '             strncat(name, orig_name,  (256) );
01588                 | '         }
01588                 | '     }
01588                 | '     for (i = 0; i <  4 ; i++) {
01588     00 E6 05 F6 | 	mov	local09, #0
0158c                 | LR__0074
0158c     04 E6 5D F2 | 	cmps	local09, #4 wcz
01590     50 01 90 3D |  if_ae	jmp	#LR__0085
01594     F3 DC 01 F6 | 	mov	local04, local09
01598     02 DC 65 F0 | 	shl	local04, #2
0159c     18 AC 05 F1 | 	add	ptr__dat__, #24
015a0     D6 DC 01 F1 | 	add	local04, ptr__dat__
015a4     EE E4 09 FB | 	rdlong	local08, local04 wz
015a8     18 AC 85 F1 | 	sub	ptr__dat__, #24
015ac     2C 01 90 AD |  if_e	jmp	#LR__0084
015b0     F3 DC 01 F6 | 	mov	local04, local09
015b4     02 DC 65 F0 | 	shl	local04, #2
015b8     18 AC 05 F1 | 	add	ptr__dat__, #24
015bc     D6 DC 01 F1 | 	add	local04, ptr__dat__
015c0     EE CC 01 FB | 	rdlong	arg01, local04
015c4     18 AC 85 F1 | 	sub	ptr__dat__, #24
015c8     00 E8 05 F6 | 	mov	local10, #0
015cc     40 EA 9F FE | 	loc	pa,	#(@LR__0076-@LR__0075)
015d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
015d4                 | LR__0075
015d4     E6 EA C9 FA | 	rdbyte	local11, arg01 wz
015d8     01 E8 05 51 |  if_ne	add	local10, #1
015dc     01 CC 05 51 |  if_ne	add	arg01, #1
015e0     F0 FF 9F 5D |  if_ne	jmp	#LR__0075
015e4                 | LR__0076
015e4     F4 B2 01 F6 | 	mov	result1, local10
015e8     D9 EC 01 F6 | 	mov	local12, result1
015ec     F6 E0 01 F6 | 	mov	local06, local12
015f0     EB E0 01 F1 | 	add	local06, local01
015f4     F0 DC C1 FA | 	rdbyte	local04, local06
015f8     2F DC 0D F2 | 	cmp	local04, #47 wz
015fc     10 00 90 AD |  if_e	jmp	#LR__0077
01600     F6 DE 01 F6 | 	mov	local05, local12
01604     EB DE 01 F1 | 	add	local05, local01
01608     EF E2 C9 FA | 	rdbyte	local07, local05 wz
0160c     CC 00 90 5D |  if_ne	jmp	#LR__0083
01610                 | LR__0077
01610     EB CC 01 F6 | 	mov	arg01, local01
01614     F3 EE 01 F6 | 	mov	local13, local09
01618     02 EE 65 F0 | 	shl	local13, #2
0161c     18 AC 05 F1 | 	add	ptr__dat__, #24
01620     D6 EE 01 F1 | 	add	local13, ptr__dat__
01624     F7 CE 01 FB | 	rdlong	arg02, local13
01628     F6 D0 01 F6 | 	mov	arg03, local12
0162c     18 AC 85 F1 | 	sub	ptr__dat__, #24
01630     A4 FA BF FD | 	call	#_strncmp
01634     D9 F0 09 F6 | 	mov	local14, result1 wz
01638     A0 00 90 5D |  if_ne	jmp	#LR__0083
0163c     F3 DC 01 F6 | 	mov	local04, local09
01640     02 DC 65 F0 | 	shl	local04, #2
01644     28 AC 05 F1 | 	add	ptr__dat__, #40
01648     D6 DC 01 F1 | 	add	local04, ptr__dat__
0164c     EE F2 01 FB | 	rdlong	local15, local04
01650                 | ' 
01650                 | '             while (name[len+1] == '.' && (name[len+2] == '/' || name[len+2] == 0)) {
01650     28 AC 85 F1 | 	sub	ptr__dat__, #40
01654     F4 E9 9F FE | 	loc	pa,	#(@LR__0080-@LR__0078)
01658     93 00 A0 FD | 	call	#FCACHE_LOAD_
0165c                 | LR__0078
0165c     F6 E4 01 F6 | 	mov	local08, local12
01660     01 E4 05 F1 | 	add	local08, #1
01664     EB E4 01 F1 | 	add	local08, local01
01668     F2 DC C1 FA | 	rdbyte	local04, local08
0166c     2E DC 0D F2 | 	cmp	local04, #46 wz
01670     34 00 90 5D |  if_ne	jmp	#LR__0081
01674     F6 F4 01 F6 | 	mov	local16, local12
01678     02 F4 05 F1 | 	add	local16, #2
0167c     EB F4 01 F1 | 	add	local16, local01
01680     FA DE C1 FA | 	rdbyte	local05, local16
01684     2F DE 0D F2 | 	cmp	local05, #47 wz
01688     14 00 90 AD |  if_e	jmp	#LR__0079
0168c     F6 F6 01 F6 | 	mov	local17, local12
01690     02 F6 05 F1 | 	add	local17, #2
01694     EB F6 01 F1 | 	add	local17, local01
01698     FB F8 C9 FA | 	rdbyte	local18, local17 wz
0169c     08 00 90 5D |  if_ne	jmp	#LR__0081
016a0                 | LR__0079
016a0     01 EC 05 F1 | 	add	local12, #1
016a4     B4 FF 9F FD | 	jmp	#LR__0078
016a8                 | LR__0080
016a8                 | LR__0081
016a8     00 DA 0D F2 | 	cmp	local03, #0 wz
016ac     10 00 90 AD |  if_e	jmp	#LR__0082
016b0     ED CC 01 F6 | 	mov	arg01, local03
016b4     EB CE 01 F6 | 	mov	arg02, local01
016b8     00 D1 05 F6 | 	mov	arg03, #256
016bc     40 F9 BF FD | 	call	#_strncpy
016c0                 | LR__0082
016c0     EB CC 01 F6 | 	mov	arg01, local01
016c4     EB CE 01 F6 | 	mov	arg02, local01
016c8     F6 CE 01 F1 | 	add	arg02, local12
016cc     01 CE 05 F1 | 	add	arg02, #1
016d0     C8 70 B0 FD | 	call	#__system____builtin_strcpy
016d4                 | '                 strncpy(full_path, name,  (256) );
016d4                 | '             }
016d4                 | '             __builtin_strcpy(name, name+len+1) ;
016d4                 | ' #line 57 "/home/pik33/flexprop/include/libc/unix/mount.c"
016d4                 | '             return v;
016d4     F9 B2 01 F6 | 	mov	result1, local15
016d8     1C 00 90 FD | 	jmp	#LR__0086
016dc                 | LR__0083
016dc                 | LR__0084
016dc     01 E6 05 F1 | 	add	local09, #1
016e0     A8 FE 9F FD | 	jmp	#LR__0074
016e4                 | LR__0085
016e4     01 00 00 FF 
016e8     44 AA 05 F1 | 	add	ptr___system__dat__, ##580
016ec     D5 B2 01 FB | 	rdlong	result1, ptr___system__dat__
016f0     01 00 00 FF 
016f4     44 AA 85 F1 | 	sub	ptr___system__dat__, ##580
016f8                 | '         }
016f8                 | '     }
016f8                 | '     v = _getrootvfs();
016f8                 | ' #line 64 "/home/pik33/flexprop/include/libc/unix/mount.c"
016f8                 | '     return v;
016f8                 | LR__0086
016f8     AF F0 03 F6 | 	mov	ptra, fp
016fc     BA 00 A0 FD | 	call	#popregs_
01700                 | ___getvfsforfile_ret
01700     2D 00 64 FD | 	ret
01704                 | 
01704                 | __mount
01704     0B 5A 05 F6 | 	mov	COUNT_, #11
01708     B0 00 A0 FD | 	call	#pushregs_
0170c     E6 D6 01 F6 | 	mov	local01, arg01
01710     E7 D8 01 F6 | 	mov	local02, arg02
01714     01 DA 65 F6 | 	neg	local03, #1
01718     EB DC C1 FA | 	rdbyte	local04, local01
0171c     2F DC 0D F2 | 	cmp	local04, #47 wz
01720     14 00 90 AD |  if_e	jmp	#LR__0087
01724                 | ' #line 79 "/home/pik33/flexprop/include/libc/unix/mount.c"
01724                 | '         return _seterror( 10 );
01724     1C AA 05 F1 | 	add	ptr___system__dat__, #28
01728     D5 14 68 FC | 	wrlong	#10, ptr___system__dat__
0172c     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
01730     01 B2 65 F6 | 	neg	result1, #1
01734     30 01 90 FD | 	jmp	#LR__0098
01738                 | LR__0087
01738                 | '     }
01738                 | '     for (i = 0; i <  4 ; i++) {
01738     00 DE 05 F6 | 	mov	local05, #0
0173c                 | LR__0088
0173c     04 DE 5D F2 | 	cmps	local05, #4 wcz
01740     B0 00 90 3D |  if_ae	jmp	#LR__0094
01744     EF DC 01 F6 | 	mov	local04, local05
01748     02 DC 65 F0 | 	shl	local04, #2
0174c     18 AC 05 F1 | 	add	ptr__dat__, #24
01750     D6 DC 01 F1 | 	add	local04, ptr__dat__
01754     EE E0 09 FB | 	rdlong	local06, local04 wz
01758     18 AC 85 F1 | 	sub	ptr__dat__, #24
0175c     0C 00 90 5D |  if_ne	jmp	#LR__0089
01760     00 DA 5D F2 | 	cmps	local03, #0 wcz
01764     EF DA 01 C6 |  if_b	mov	local03, local05
01768                 | '                 firstfree = i;
01768                 | '                 continue;
01768     80 00 90 CD |  if_b	jmp	#LR__0093
0176c                 | LR__0089
0176c     EF DC 01 F6 | 	mov	local04, local05
01770     02 DC 65 F0 | 	shl	local04, #2
01774     18 AC 05 F1 | 	add	ptr__dat__, #24
01778     D6 DC 01 F1 | 	add	local04, ptr__dat__
0177c     EE CC 01 FB | 	rdlong	arg01, local04
01780     18 AC 85 F1 | 	sub	ptr__dat__, #24
01784     00 E2 05 F6 | 	mov	local07, #0
01788     84 E8 9F FE | 	loc	pa,	#(@LR__0091-@LR__0090)
0178c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01790                 | LR__0090
01790     E6 E4 C9 FA | 	rdbyte	local08, arg01 wz
01794     01 E2 05 51 |  if_ne	add	local07, #1
01798     01 CC 05 51 |  if_ne	add	arg01, #1
0179c     F0 FF 9F 5D |  if_ne	jmp	#LR__0090
017a0                 | LR__0091
017a0     F1 B2 01 F6 | 	mov	result1, local07
017a4     D9 E6 01 F6 | 	mov	local09, result1
017a8     F3 E8 01 F6 | 	mov	local10, local09
017ac     EB E8 01 F1 | 	add	local10, local01
017b0     F4 DC C1 FA | 	rdbyte	local04, local10
017b4     2F DC 0D F2 | 	cmp	local04, #47 wz
017b8     30 00 90 5D |  if_ne	jmp	#LR__0092
017bc     EB CC 01 F6 | 	mov	arg01, local01
017c0     EF EA 01 F6 | 	mov	local11, local05
017c4     02 EA 65 F0 | 	shl	local11, #2
017c8     18 AC 05 F1 | 	add	ptr__dat__, #24
017cc     D6 EA 01 F1 | 	add	local11, ptr__dat__
017d0     F5 CE 01 FB | 	rdlong	arg02, local11
017d4     F3 D0 01 F6 | 	mov	arg03, local09
017d8     18 AC 85 F1 | 	sub	ptr__dat__, #24
017dc     F8 F8 BF FD | 	call	#_strncmp
017e0     00 B2 0D F2 | 	cmp	result1, #0 wz
017e4     EF DA 01 A6 |  if_e	mov	local03, local05
017e8                 | '             firstfree = i;
017e8                 | '             break;
017e8     08 00 90 AD |  if_e	jmp	#LR__0094
017ec                 | LR__0092
017ec                 | LR__0093
017ec     01 DE 05 F1 | 	add	local05, #1
017f0     48 FF 9F FD | 	jmp	#LR__0088
017f4                 | LR__0094
017f4     FF FF 7F FF 
017f8     FF DB 0D F2 | 	cmp	local03, ##-1 wz
017fc     14 00 90 5D |  if_ne	jmp	#LR__0095
01800                 | ' #line 98 "/home/pik33/flexprop/include/libc/unix/mount.c"
01800                 | '         return _seterror( 11 );
01800     1C AA 05 F1 | 	add	ptr___system__dat__, #28
01804     D5 16 68 FC | 	wrlong	#11, ptr___system__dat__
01808     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
0180c     01 B2 65 F6 | 	neg	result1, #1
01810     54 00 90 FD | 	jmp	#LR__0098
01814                 | LR__0095
01814     ED DE 01 F6 | 	mov	local05, local03
01818     EF DC 01 F6 | 	mov	local04, local05
0181c     02 DC 65 F0 | 	shl	local04, #2
01820     28 AC 05 F1 | 	add	ptr__dat__, #40
01824     D6 DC 01 F1 | 	add	local04, ptr__dat__
01828     EE D8 61 FC | 	wrlong	local02, local04
0182c     00 D8 0D F2 | 	cmp	local02, #0 wz
01830     28 AC 85 F1 | 	sub	ptr__dat__, #40
01834     18 00 90 5D |  if_ne	jmp	#LR__0096
01838     02 DE 65 F0 | 	shl	local05, #2
0183c     18 AC 05 F1 | 	add	ptr__dat__, #24
01840     D6 DE 01 F1 | 	add	local05, ptr__dat__
01844     EF 00 68 FC | 	wrlong	#0, local05
01848     18 AC 85 F1 | 	sub	ptr__dat__, #24
0184c     14 00 90 FD | 	jmp	#LR__0097
01850                 | LR__0096
01850     02 DE 65 F0 | 	shl	local05, #2
01854     18 AC 05 F1 | 	add	ptr__dat__, #24
01858     D6 DE 01 F1 | 	add	local05, ptr__dat__
0185c     EF D6 61 FC | 	wrlong	local01, local05
01860     18 AC 85 F1 | 	sub	ptr__dat__, #24
01864                 | LR__0097
01864                 | '         mounttab[i] = name;
01864                 | ' #line 112 "/home/pik33/flexprop/include/libc/unix/mount.c"
01864                 | '     }
01864                 | '     return 0;
01864     00 B2 05 F6 | 	mov	result1, #0
01868                 | LR__0098
01868     AF F0 03 F6 | 	mov	ptra, fp
0186c     BA 00 A0 FD | 	call	#popregs_
01870                 | __mount_ret
01870     2D 00 64 FD | 	ret
01874                 | 
01874                 | _ff_cc_disk_initialize
01874     08 5A 05 F6 | 	mov	COUNT_, #8
01878     B0 00 A0 FD | 	call	#pushregs_
0187c     30 F0 07 F1 | 	add	ptra, #48
01880     04 5E 05 F1 | 	add	fp, #4
01884     AF CC 41 FC | 	wrbyte	arg01, fp
01888     7C AF 05 F1 | 	add	ptr__ff_cc_dat__, #380
0188c     D7 D6 01 FB | 	rdlong	local01, ptr__ff_cc_dat__
01890     1C 5E 05 F1 | 	add	fp, #28
01894     AF D6 61 FC | 	wrlong	local01, fp
01898     04 AE 85 F1 | 	sub	ptr__ff_cc_dat__, #4
0189c     D7 D6 01 FB | 	rdlong	local01, ptr__ff_cc_dat__
018a0     04 5E 05 F1 | 	add	fp, #4
018a4     AF D6 61 FC | 	wrlong	local01, fp
018a8     08 AE 05 F1 | 	add	ptr__ff_cc_dat__, #8
018ac     D7 D6 01 FB | 	rdlong	local01, ptr__ff_cc_dat__
018b0     04 5E 05 F1 | 	add	fp, #4
018b4     AF D6 61 FC | 	wrlong	local01, fp
018b8     04 AE 05 F1 | 	add	ptr__ff_cc_dat__, #4
018bc     D7 D6 01 FB | 	rdlong	local01, ptr__ff_cc_dat__
018c0     84 AF 85 F1 | 	sub	ptr__ff_cc_dat__, #388
018c4     04 5E 05 F1 | 	add	fp, #4
018c8     AF D6 61 FC | 	wrlong	local01, fp
018cc     28 5E 85 F1 | 	sub	fp, #40
018d0     AF D6 C9 FA | 	rdbyte	local01, fp wz
018d4     04 5E 85 F1 | 	sub	fp, #4
018d8                 | ' #line 420 "/home/pik33/flexprop/include/filesys/fatfs/sdmm.cc"
018d8                 | '             return RES_NOTRDY;
018d8     03 B2 05 56 |  if_ne	mov	result1, #3
018dc     2C 03 90 5D |  if_ne	jmp	#LR__0112
018e0     13 00 00 FF 
018e4     10 CD 05 F6 | 	mov	arg01, ##10000
018e8     94 70 B0 FD | 	call	#__system___waitus
018ec     20 5E 05 F1 | 	add	fp, #32
018f0     AF CC 01 FB | 	rdlong	arg01, fp
018f4     41 CC 61 FD | 	dirh	arg01
018f8     59 CC 61 FD | 	drvh	arg01
018fc     1F 20 64 FD | 	waitx	#16
01900     04 5E 05 F1 | 	add	fp, #4
01904     AF CC 01 FB | 	rdlong	arg01, fp
01908     41 CC 61 FD | 	dirh	arg01
0190c     58 CC 61 FD | 	drvl	arg01
01910     1F 20 64 FD | 	waitx	#16
01914     04 5E 05 F1 | 	add	fp, #4
01918     AF CC 01 FB | 	rdlong	arg01, fp
0191c     41 CC 61 FD | 	dirh	arg01
01920     04 5E 05 F1 | 	add	fp, #4
01924     AF CC 01 FB | 	rdlong	arg01, fp
01928     50 CC 61 FD | 	fltl	arg01
0192c                 | '         }
0192c                 | ' 
0192c                 | ' 	dly_us(10000);
0192c                 | ' 	_dirh(PIN_SS) ;  (_pinh(PIN_SS), (_waitx(16)) ) ;
0192c                 | ' 	_dirh(PIN_CLK) ;  (_pinl(PIN_CLK), (_waitx(16)) ) ;
0192c                 | ' 	_dirh(PIN_DI) ;
0192c                 | ' 	_fltl(PIN_DO) ;
0192c                 | ' 
0192c                 | ' 	for (n = 100; n; n--) rcvr_mmc(buf, 1);
0192c     24 5E 85 F1 | 	sub	fp, #36
01930     AF C8 48 FC | 	wrbyte	#100, fp
01934     08 5E 85 F1 | 	sub	fp, #8
01938                 | LR__0099
01938     08 5E 05 F1 | 	add	fp, #8
0193c     AF D8 C9 FA | 	rdbyte	local02, fp wz
01940     08 5E 85 F1 | 	sub	fp, #8
01944     34 00 90 AD |  if_e	jmp	#LR__0100
01948     14 5E 05 F1 | 	add	fp, #20
0194c     AF CC 01 F6 | 	mov	arg01, fp
01950     14 5E 85 F1 | 	sub	fp, #20
01954     01 CE 05 F6 | 	mov	arg02, #1
01958     F0 64 B0 FD | 	call	#_ff_cc_rcvr_mmc_0657
0195c     08 5E 05 F1 | 	add	fp, #8
01960     AF DA C1 FA | 	rdbyte	local03, fp
01964     AF DC C1 FA | 	rdbyte	local04, fp
01968     EE DE 01 F6 | 	mov	local05, local04
0196c     01 DE 85 F1 | 	sub	local05, #1
01970     AF DE 41 FC | 	wrbyte	local05, fp
01974     08 5E 85 F1 | 	sub	fp, #8
01978     BC FF 9F FD | 	jmp	#LR__0099
0197c                 | LR__0100
0197c     0C 5E 05 F1 | 	add	fp, #12
01980     AF 00 48 FC | 	wrbyte	#0, fp
01984     0C 5E 85 F1 | 	sub	fp, #12
01988     00 CC 05 F6 | 	mov	arg01, #0
0198c     00 CE 05 F6 | 	mov	arg02, #0
01990     90 69 B0 FD | 	call	#_ff_cc_send_cmd_0678
01994     D9 D6 01 F6 | 	mov	local01, result1
01998     07 D6 45 F7 | 	zerox	local01, #7
0199c     01 D6 0D F2 | 	cmp	local01, #1 wz
019a0     20 02 90 5D |  if_ne	jmp	#LR__0111
019a4     08 CC 05 F6 | 	mov	arg01, #8
019a8     AA CF 05 F6 | 	mov	arg02, #426
019ac     74 69 B0 FD | 	call	#_ff_cc_send_cmd_0678
019b0     D9 D6 01 F6 | 	mov	local01, result1
019b4     07 D6 45 F7 | 	zerox	local01, #7
019b8     01 D6 0D F2 | 	cmp	local01, #1 wz
019bc     04 01 90 5D |  if_ne	jmp	#LR__0103
019c0     14 5E 05 F1 | 	add	fp, #20
019c4     AF CC 01 F6 | 	mov	arg01, fp
019c8     14 5E 85 F1 | 	sub	fp, #20
019cc     04 CE 05 F6 | 	mov	arg02, #4
019d0     78 64 B0 FD | 	call	#_ff_cc_rcvr_mmc_0657
019d4     16 5E 05 F1 | 	add	fp, #22
019d8     AF D6 C1 FA | 	rdbyte	local01, fp
019dc     16 5E 85 F1 | 	sub	fp, #22
019e0     07 D6 45 F7 | 	zerox	local01, #7
019e4     01 D6 0D F2 | 	cmp	local01, #1 wz
019e8     D8 01 90 5D |  if_ne	jmp	#LR__0110
019ec     17 5E 05 F1 | 	add	fp, #23
019f0     AF E0 C1 FA | 	rdbyte	local06, fp
019f4     17 5E 85 F1 | 	sub	fp, #23
019f8     07 E0 45 F7 | 	zerox	local06, #7
019fc     AA E0 0D F2 | 	cmp	local06, #170 wz
01a00     C0 01 90 5D |  if_ne	jmp	#LR__0110
01a04                 | ' 				for (tmr = 1000; tmr; tmr--) {
01a04     18 5E 05 F1 | 	add	fp, #24
01a08     01 00 80 FF 
01a0c     AF D0 6B FC | 	wrlong	##1000, fp
01a10     18 5E 85 F1 | 	sub	fp, #24
01a14                 | LR__0101
01a14     18 5E 05 F1 | 	add	fp, #24
01a18     AF E0 09 FB | 	rdlong	local06, fp wz
01a1c     18 5E 85 F1 | 	sub	fp, #24
01a20     3C 00 90 AD |  if_e	jmp	#LR__0102
01a24     A9 CC 05 F6 | 	mov	arg01, #169
01a28     1E CE C5 F9 | 	decod	arg02, #30
01a2c     F4 68 B0 FD | 	call	#_ff_cc_send_cmd_0678
01a30     D9 E2 01 F6 | 	mov	local07, result1
01a34     07 E2 4D F7 | 	zerox	local07, #7 wz
01a38     24 00 90 AD |  if_e	jmp	#LR__0102
01a3c     01 00 00 FF 
01a40     E8 CD 05 F6 | 	mov	arg01, ##1000
01a44     38 6F B0 FD | 	call	#__system___waitus
01a48     18 5E 05 F1 | 	add	fp, #24
01a4c     AF DE 01 FB | 	rdlong	local05, fp
01a50     01 DE 85 F1 | 	sub	local05, #1
01a54     AF DE 61 FC | 	wrlong	local05, fp
01a58     18 5E 85 F1 | 	sub	fp, #24
01a5c     B4 FF 9F FD | 	jmp	#LR__0101
01a60                 | LR__0102
01a60     18 5E 05 F1 | 	add	fp, #24
01a64     AF D8 01 FB | 	rdlong	local02, fp
01a68     18 5E 85 F1 | 	sub	fp, #24
01a6c     EC D6 09 F6 | 	mov	local01, local02 wz
01a70     50 01 90 AD |  if_e	jmp	#LR__0110
01a74     3A CC 05 F6 | 	mov	arg01, #58
01a78     00 CE 05 F6 | 	mov	arg02, #0
01a7c     A4 68 B0 FD | 	call	#_ff_cc_send_cmd_0678
01a80     D9 E0 01 F6 | 	mov	local06, result1
01a84     07 E0 4D F7 | 	zerox	local06, #7 wz
01a88     38 01 90 5D |  if_ne	jmp	#LR__0110
01a8c     14 5E 05 F1 | 	add	fp, #20
01a90     AF CC 01 F6 | 	mov	arg01, fp
01a94     14 5E 85 F1 | 	sub	fp, #20
01a98     04 CE 05 F6 | 	mov	arg02, #4
01a9c     AC 63 B0 FD | 	call	#_ff_cc_rcvr_mmc_0657
01aa0     14 5E 05 F1 | 	add	fp, #20
01aa4     AF D8 C1 FA | 	rdbyte	local02, fp
01aa8     40 D8 CD F7 | 	test	local02, #64 wz
01aac     0C D6 05 56 |  if_ne	mov	local01, #12
01ab0     04 D6 05 A6 |  if_e	mov	local01, #4
01ab4     08 5E 85 F1 | 	sub	fp, #8
01ab8     AF D6 41 FC | 	wrbyte	local01, fp
01abc     0C 5E 85 F1 | 	sub	fp, #12
01ac0     00 01 90 FD | 	jmp	#LR__0110
01ac4                 | LR__0103
01ac4     A9 CC 05 F6 | 	mov	arg01, #169
01ac8     00 CE 05 F6 | 	mov	arg02, #0
01acc     54 68 B0 FD | 	call	#_ff_cc_send_cmd_0678
01ad0     D9 D6 01 F6 | 	mov	local01, result1
01ad4     07 D6 45 F7 | 	zerox	local01, #7
01ad8     01 D6 1D F2 | 	cmp	local01, #1 wcz
01adc     18 00 90 1D |  if_a	jmp	#LR__0104
01ae0     0C 5E 05 F1 | 	add	fp, #12
01ae4     AF 04 48 FC | 	wrbyte	#2, fp
01ae8     04 5E 05 F1 | 	add	fp, #4
01aec     AF 52 49 FC | 	wrbyte	#169, fp
01af0     10 5E 85 F1 | 	sub	fp, #16
01af4     14 00 90 FD | 	jmp	#LR__0105
01af8                 | LR__0104
01af8     0C 5E 05 F1 | 	add	fp, #12
01afc     AF 02 48 FC | 	wrbyte	#1, fp
01b00     04 5E 05 F1 | 	add	fp, #4
01b04     AF 02 48 FC | 	wrbyte	#1, fp
01b08     10 5E 85 F1 | 	sub	fp, #16
01b0c                 | LR__0105
01b0c                 | ' 				ty =  0x01 ; cmd =  (1) ;
01b0c                 | ' 			}
01b0c                 | ' 			for (tmr = 1000; tmr; tmr--) {
01b0c     18 5E 05 F1 | 	add	fp, #24
01b10     01 00 80 FF 
01b14     AF D0 6B FC | 	wrlong	##1000, fp
01b18     18 5E 85 F1 | 	sub	fp, #24
01b1c                 | LR__0106
01b1c     18 5E 05 F1 | 	add	fp, #24
01b20     AF D8 09 FB | 	rdlong	local02, fp wz
01b24     18 5E 85 F1 | 	sub	fp, #24
01b28     54 00 90 AD |  if_e	jmp	#LR__0107
01b2c     10 5E 05 F1 | 	add	fp, #16
01b30     AF CC C1 FA | 	rdbyte	arg01, fp
01b34     10 5E 85 F1 | 	sub	fp, #16
01b38     00 DC 05 F6 | 	mov	local04, #0
01b3c     00 CE 05 F6 | 	mov	arg02, #0
01b40     E0 67 B0 FD | 	call	#_ff_cc_send_cmd_0678
01b44     D9 E4 01 F6 | 	mov	local08, result1
01b48     F2 E2 01 F6 | 	mov	local07, local08
01b4c     07 E2 4D F7 | 	zerox	local07, #7 wz
01b50     2C 00 90 AD |  if_e	jmp	#LR__0107
01b54     01 00 00 FF 
01b58     E8 CD 05 F6 | 	mov	arg01, ##1000
01b5c     20 6E B0 FD | 	call	#__system___waitus
01b60     18 5E 05 F1 | 	add	fp, #24
01b64     AF DA 01 FB | 	rdlong	local03, fp
01b68     ED DC 01 F6 | 	mov	local04, local03
01b6c     EE DE 01 F6 | 	mov	local05, local04
01b70     01 DE 85 F1 | 	sub	local05, #1
01b74     AF DE 61 FC | 	wrlong	local05, fp
01b78     18 5E 85 F1 | 	sub	fp, #24
01b7c     9C FF 9F FD | 	jmp	#LR__0106
01b80                 | LR__0107
01b80     18 5E 05 F1 | 	add	fp, #24
01b84     AF D8 01 FB | 	rdlong	local02, fp
01b88     18 5E 85 F1 | 	sub	fp, #24
01b8c     EC D6 09 F6 | 	mov	local01, local02 wz
01b90     24 00 90 AD |  if_e	jmp	#LR__0108
01b94     10 E2 05 F6 | 	mov	local07, #16
01b98     09 DA C5 F9 | 	decod	local03, #9
01b9c     10 CC 05 F6 | 	mov	arg01, #16
01ba0     09 CE C5 F9 | 	decod	arg02, #9
01ba4     7C 67 B0 FD | 	call	#_ff_cc_send_cmd_0678
01ba8     D9 DE 01 F6 | 	mov	local05, result1
01bac     EF E0 01 F6 | 	mov	local06, local05
01bb0     07 E0 4D F7 | 	zerox	local06, #7 wz
01bb4     0C 00 90 AD |  if_e	jmp	#LR__0109
01bb8                 | LR__0108
01bb8     0C 5E 05 F1 | 	add	fp, #12
01bbc     AF 00 48 FC | 	wrbyte	#0, fp
01bc0     0C 5E 85 F1 | 	sub	fp, #12
01bc4                 | LR__0109
01bc4                 | LR__0110
01bc4                 | LR__0111
01bc4     0C 5E 05 F1 | 	add	fp, #12
01bc8     AF D6 C1 FA | 	rdbyte	local01, fp
01bcc     89 AF 05 F1 | 	add	ptr__ff_cc_dat__, #393
01bd0     D7 D6 41 FC | 	wrbyte	local01, ptr__ff_cc_dat__
01bd4     AF D8 C9 FA | 	rdbyte	local02, fp wz
01bd8     00 D6 05 56 |  if_ne	mov	local01, #0
01bdc     01 D6 05 A6 |  if_e	mov	local01, #1
01be0     10 5E 05 F1 | 	add	fp, #16
01be4     AF D6 41 FC | 	wrbyte	local01, fp
01be8     AF D6 C1 FA | 	rdbyte	local01, fp
01bec     1C 5E 85 F1 | 	sub	fp, #28
01bf0     01 AE 85 F1 | 	sub	ptr__ff_cc_dat__, #1
01bf4     D7 D6 41 FC | 	wrbyte	local01, ptr__ff_cc_dat__
01bf8     88 AF 85 F1 | 	sub	ptr__ff_cc_dat__, #392
01bfc     94 64 B0 FD | 	call	#_ff_cc_deselect_0666
01c00                 | ' 
01c00                 | '                             ty = 0;
01c00                 | '                         }
01c00                 | ' 		}
01c00                 | ' 	}
01c00                 | ' #line 467 "/home/pik33/flexprop/include/filesys/fatfs/sdmm.cc"
01c00                 | ' 	CardType = ty;
01c00                 | ' 	s = ty ? 0 :  0x01 ;
01c00                 | ' 	Stat = s;
01c00                 | ' 
01c00                 | ' 	deselect();
01c00                 | ' 
01c00                 | ' 	return s;
01c00     1C 5E 05 F1 | 	add	fp, #28
01c04     AF B2 C1 FA | 	rdbyte	result1, fp
01c08     1C 5E 85 F1 | 	sub	fp, #28
01c0c                 | LR__0112
01c0c     AF F0 03 F6 | 	mov	ptra, fp
01c10     BA 00 A0 FD | 	call	#popregs_
01c14                 | _ff_cc_disk_initialize_ret
01c14     2D 00 64 FD | 	ret
01c18                 | 
01c18                 | _ff_cc_disk_read
01c18     05 5A 05 F6 | 	mov	COUNT_, #5
01c1c     B0 00 A0 FD | 	call	#pushregs_
01c20     E7 D6 01 F6 | 	mov	local01, arg02
01c24     E9 D8 01 F6 | 	mov	local02, arg04
01c28     E8 DA 01 F6 | 	mov	local03, arg03
01c2c     00 CC 0D F2 | 	cmp	arg01, #0 wz
01c30     01 B2 05 56 |  if_ne	mov	result1, #1
01c34                 | ' 
01c34                 | ' 	return Stat;
01c34     88 AF 05 A1 |  if_e	add	ptr__ff_cc_dat__, #392
01c38     D7 B2 C1 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
01c3c     88 AF 85 A1 |  if_e	sub	ptr__ff_cc_dat__, #392
01c40     D9 DC 01 F6 | 	mov	local04, result1
01c44     07 DC 45 F7 | 	zerox	local04, #7
01c48     01 DC CD F7 | 	test	local04, #1 wz
01c4c     03 B2 05 56 |  if_ne	mov	result1, #3
01c50     88 00 90 5D |  if_ne	jmp	#LR__0116
01c54     89 AF 05 F1 | 	add	ptr__ff_cc_dat__, #393
01c58     D7 DC C1 FA | 	rdbyte	local04, ptr__ff_cc_dat__
01c5c     89 AF 85 F1 | 	sub	ptr__ff_cc_dat__, #393
01c60     07 DC 45 F7 | 	zerox	local04, #7
01c64     08 DC 0D F5 | 	and	local04, #8 wz
01c68     09 DA 65 A0 |  if_e	shl	local03, #9
01c6c     01 D8 1D F2 | 	cmp	local02, #1 wcz
01c70     12 DC 05 16 |  if_a	mov	local04, #18
01c74     11 DC 05 E6 |  if_be	mov	local04, #17
01c78     EE DE 01 F6 | 	mov	local05, local04
01c7c     EF CC 01 F6 | 	mov	arg01, local05
01c80     ED CE 01 F6 | 	mov	arg02, local03
01c84     9C 66 B0 FD | 	call	#_ff_cc_send_cmd_0678
01c88     D9 DC 01 F6 | 	mov	local04, result1
01c8c     07 DC 4D F7 | 	zerox	local04, #7 wz
01c90     34 00 90 5D |  if_ne	jmp	#LR__0115
01c94                 | ' 		do {
01c94                 | LR__0113
01c94     EB CC 01 F6 | 	mov	arg01, local01
01c98     09 CE C5 F9 | 	decod	arg02, #9
01c9c     D0 64 B0 FD | 	call	#_ff_cc_rcvr_datablock_0672
01ca0     00 B2 0D F2 | 	cmp	result1, #0 wz
01ca4     01 00 00 5F 
01ca8     00 D6 05 51 |  if_ne	add	local01, ##512
01cac     F9 D9 6D 5B |  if_ne	djnz	local02, #LR__0113
01cb0     07 DE 45 F7 | 	zerox	local05, #7
01cb4     12 DE 0D F2 | 	cmp	local05, #18 wz
01cb8     0C 00 90 5D |  if_ne	jmp	#LR__0114
01cbc     0C CC 05 F6 | 	mov	arg01, #12
01cc0     00 CE 05 F6 | 	mov	arg02, #0
01cc4     5C 66 B0 FD | 	call	#_ff_cc_send_cmd_0678
01cc8                 | LR__0114
01cc8                 | LR__0115
01cc8     C8 63 B0 FD | 	call	#_ff_cc_deselect_0666
01ccc                 | ' 	}
01ccc                 | ' 	deselect();
01ccc                 | ' 
01ccc                 | ' 	return count ? RES_ERROR : RES_OK;
01ccc     00 D8 0D F2 | 	cmp	local02, #0 wz
01cd0     01 DC 05 56 |  if_ne	mov	local04, #1
01cd4     00 DC 05 A6 |  if_e	mov	local04, #0
01cd8     EE B2 01 F6 | 	mov	result1, local04
01cdc                 | LR__0116
01cdc     AF F0 03 F6 | 	mov	ptra, fp
01ce0     BA 00 A0 FD | 	call	#popregs_
01ce4                 | _ff_cc_disk_read_ret
01ce4     2D 00 64 FD | 	ret
01ce8                 | 
01ce8                 | _ff_cc_disk_write
01ce8     07 5A 05 F6 | 	mov	COUNT_, #7
01cec     B0 00 A0 FD | 	call	#pushregs_
01cf0     E6 D6 09 F6 | 	mov	local01, arg01 wz
01cf4     E7 D8 01 F6 | 	mov	local02, arg02
01cf8     E8 DA 01 F6 | 	mov	local03, arg03
01cfc     E9 DC 01 F6 | 	mov	local04, arg04
01d00     ED DE 01 F6 | 	mov	local05, local03
01d04     01 B2 05 56 |  if_ne	mov	result1, #1
01d08                 | ' 
01d08                 | ' 	return Stat;
01d08     88 AF 05 A1 |  if_e	add	ptr__ff_cc_dat__, #392
01d0c     D7 B2 C1 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
01d10     88 AF 85 A1 |  if_e	sub	ptr__ff_cc_dat__, #392
01d14     D9 E0 01 F6 | 	mov	local06, result1
01d18     07 E0 45 F7 | 	zerox	local06, #7
01d1c     01 E0 CD F7 | 	test	local06, #1 wz
01d20     03 B2 05 56 |  if_ne	mov	result1, #3
01d24     D0 00 90 5D |  if_ne	jmp	#LR__0122
01d28     89 AF 05 F1 | 	add	ptr__ff_cc_dat__, #393
01d2c     D7 E0 C1 FA | 	rdbyte	local06, ptr__ff_cc_dat__
01d30     89 AF 85 F1 | 	sub	ptr__ff_cc_dat__, #393
01d34     07 E0 45 F7 | 	zerox	local06, #7
01d38     08 E0 CD F7 | 	test	local06, #8 wz
01d3c     09 DE 65 A0 |  if_e	shl	local05, #9
01d40     01 DC 0D F2 | 	cmp	local04, #1 wz
01d44     30 00 90 5D |  if_ne	jmp	#LR__0117
01d48     EF CE 01 F6 | 	mov	arg02, local05
01d4c     18 CC 05 F6 | 	mov	arg01, #24
01d50     D0 65 B0 FD | 	call	#_ff_cc_send_cmd_0678
01d54     D9 E0 01 F6 | 	mov	local06, result1
01d58     07 E0 4D F7 | 	zerox	local06, #7 wz
01d5c     84 00 90 5D |  if_ne	jmp	#LR__0121
01d60     EC CC 01 F6 | 	mov	arg01, local02
01d64     FE CE 05 F6 | 	mov	arg02, #254
01d68     E4 64 B0 FD | 	call	#_ff_cc_xmit_datablock_0674
01d6c     D9 E2 09 F6 | 	mov	local07, result1 wz
01d70     00 DC 05 56 |  if_ne	mov	local04, #0
01d74     6C 00 90 FD | 	jmp	#LR__0121
01d78                 | LR__0117
01d78     89 AF 05 F1 | 	add	ptr__ff_cc_dat__, #393
01d7c     D7 E0 C1 FA | 	rdbyte	local06, ptr__ff_cc_dat__
01d80     89 AF 85 F1 | 	sub	ptr__ff_cc_dat__, #393
01d84     07 E0 45 F7 | 	zerox	local06, #7
01d88     06 E0 CD F7 | 	test	local06, #6 wz
01d8c     0C 00 90 AD |  if_e	jmp	#LR__0118
01d90     97 CC 05 F6 | 	mov	arg01, #151
01d94     EE CE 01 F6 | 	mov	arg02, local04
01d98     88 65 B0 FD | 	call	#_ff_cc_send_cmd_0678
01d9c                 | LR__0118
01d9c     EF CE 01 F6 | 	mov	arg02, local05
01da0     19 CC 05 F6 | 	mov	arg01, #25
01da4     7C 65 B0 FD | 	call	#_ff_cc_send_cmd_0678
01da8     D9 E0 01 F6 | 	mov	local06, result1
01dac     07 E0 4D F7 | 	zerox	local06, #7 wz
01db0     30 00 90 5D |  if_ne	jmp	#LR__0120
01db4                 | ' 			do {
01db4                 | LR__0119
01db4     EC CC 01 F6 | 	mov	arg01, local02
01db8     FC CE 05 F6 | 	mov	arg02, #252
01dbc     90 64 B0 FD | 	call	#_ff_cc_xmit_datablock_0674
01dc0     00 B2 0D F2 | 	cmp	result1, #0 wz
01dc4     01 00 00 5F 
01dc8     00 D8 05 51 |  if_ne	add	local02, ##512
01dcc     F9 DD 6D 5B |  if_ne	djnz	local04, #LR__0119
01dd0     00 CC 05 F6 | 	mov	arg01, #0
01dd4     FD CE 05 F6 | 	mov	arg02, #253
01dd8     74 64 B0 FD | 	call	#_ff_cc_xmit_datablock_0674
01ddc     00 B2 0D F2 | 	cmp	result1, #0 wz
01de0     01 DC 05 A6 |  if_e	mov	local04, #1
01de4                 | LR__0120
01de4                 | LR__0121
01de4     AC 62 B0 FD | 	call	#_ff_cc_deselect_0666
01de8                 | ' 				count = 1;
01de8                 | ' 		}
01de8                 | ' 	}
01de8                 | ' 	deselect();
01de8                 | ' 
01de8                 | ' 	return count ? RES_ERROR : RES_OK;
01de8     00 DC 0D F2 | 	cmp	local04, #0 wz
01dec     01 E0 05 56 |  if_ne	mov	local06, #1
01df0     00 E0 05 A6 |  if_e	mov	local06, #0
01df4     F0 B2 01 F6 | 	mov	result1, local06
01df8                 | LR__0122
01df8     AF F0 03 F6 | 	mov	ptra, fp
01dfc     BA 00 A0 FD | 	call	#popregs_
01e00                 | _ff_cc_disk_write_ret
01e00     2D 00 64 FD | 	ret
01e04                 | 
01e04                 | _ff_cc_disk_ioctl
01e04     07 5A 05 F6 | 	mov	COUNT_, #7
01e08     B0 00 A0 FD | 	call	#pushregs_
01e0c     30 F0 07 F1 | 	add	ptra, #48
01e10     04 5E 05 F1 | 	add	fp, #4
01e14     AF CC 41 FC | 	wrbyte	arg01, fp
01e18     04 5E 05 F1 | 	add	fp, #4
01e1c     AF CE 41 FC | 	wrbyte	arg02, fp
01e20     04 5E 05 F1 | 	add	fp, #4
01e24     AF D0 61 FC | 	wrlong	arg03, fp
01e28     08 5E 85 F1 | 	sub	fp, #8
01e2c     AF D6 C1 FA | 	rdbyte	local01, fp
01e30     04 5E 85 F1 | 	sub	fp, #4
01e34     EB D8 01 F6 | 	mov	local02, local01
01e38     EC CC 09 F6 | 	mov	arg01, local02 wz
01e3c     01 B2 05 56 |  if_ne	mov	result1, #1
01e40                 | ' 
01e40                 | ' 	return Stat;
01e40     88 AF 05 A1 |  if_e	add	ptr__ff_cc_dat__, #392
01e44     D7 B2 C1 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
01e48     88 AF 85 A1 |  if_e	sub	ptr__ff_cc_dat__, #392
01e4c     D9 DA 01 F6 | 	mov	local03, result1
01e50     ED DC 01 F6 | 	mov	local04, local03
01e54     07 DC 45 F7 | 	zerox	local04, #7
01e58     01 DC CD F7 | 	test	local04, #1 wz
01e5c     03 B2 05 56 |  if_ne	mov	result1, #3
01e60     F8 01 90 5D |  if_ne	jmp	#LR__0131
01e64     10 5E 05 F1 | 	add	fp, #16
01e68     AF 02 68 FC | 	wrlong	#1, fp
01e6c                 | ' 
01e6c                 | ' 	res = RES_ERROR;
01e6c                 | ' 	switch (ctrl) {
01e6c     08 5E 85 F1 | 	sub	fp, #8
01e70     AF DC C1 FA | 	rdbyte	local04, fp
01e74     08 5E 85 F1 | 	sub	fp, #8
01e78     EE DE 01 F6 | 	mov	local05, local04
01e7c     07 DE 45 F7 | 	zerox	local05, #7
01e80     04 DE 25 F3 | 	fle	local05, #4
01e84     30 DE 61 FD | 	jmprel	local05
01e88                 | LR__0123
01e88     10 00 90 FD | 	jmp	#LR__0124
01e8c     24 00 90 FD | 	jmp	#LR__0125
01e90     A8 01 90 FD | 	jmp	#LR__0129
01e94     88 01 90 FD | 	jmp	#LR__0128
01e98     A0 01 90 FD | 	jmp	#LR__0129
01e9c                 | LR__0124
01e9c     70 62 B0 FD | 	call	#_ff_cc_select_0669
01ea0     00 B2 0D F2 | 	cmp	result1, #0 wz
01ea4     10 5E 05 51 |  if_ne	add	fp, #16
01ea8     AF 00 68 5C |  if_ne	wrlong	#0, fp
01eac     10 5E 85 51 |  if_ne	sub	fp, #16
01eb0                 | ' 			break;
01eb0     98 01 90 FD | 	jmp	#LR__0130
01eb4                 | LR__0125
01eb4     09 CC 05 F6 | 	mov	arg01, #9
01eb8     00 CE 05 F6 | 	mov	arg02, #0
01ebc     64 64 B0 FD | 	call	#_ff_cc_send_cmd_0678
01ec0     D9 D8 01 F6 | 	mov	local02, result1
01ec4     07 D8 4D F7 | 	zerox	local02, #7 wz
01ec8     80 01 90 5D |  if_ne	jmp	#LR__0130
01ecc     18 5E 05 F1 | 	add	fp, #24
01ed0     AF CC 01 F6 | 	mov	arg01, fp
01ed4     18 5E 85 F1 | 	sub	fp, #24
01ed8     10 CE 05 F6 | 	mov	arg02, #16
01edc     90 62 B0 FD | 	call	#_ff_cc_rcvr_datablock_0672
01ee0     D9 E0 09 F6 | 	mov	local06, result1 wz
01ee4     64 01 90 AD |  if_e	jmp	#LR__0130
01ee8     18 5E 05 F1 | 	add	fp, #24
01eec     AF D8 C1 FA | 	rdbyte	local02, fp
01ef0     18 5E 85 F1 | 	sub	fp, #24
01ef4     07 D8 45 F7 | 	zerox	local02, #7
01ef8     06 D8 45 F0 | 	shr	local02, #6
01efc     01 D8 0D F2 | 	cmp	local02, #1 wz
01f00     5C 00 90 5D |  if_ne	jmp	#LR__0126
01f04     21 5E 05 F1 | 	add	fp, #33
01f08     AF D8 C1 FA | 	rdbyte	local02, fp
01f0c     01 5E 85 F1 | 	sub	fp, #1
01f10     AF DA C1 FA | 	rdbyte	local03, fp
01f14     0F DA 45 F7 | 	zerox	local03, #15
01f18     08 DA 65 F0 | 	shl	local03, #8
01f1c     ED D8 01 F1 | 	add	local02, local03
01f20     01 5E 85 F1 | 	sub	fp, #1
01f24     AF E2 C1 FA | 	rdbyte	local07, fp
01f28     3F E2 05 F5 | 	and	local07, #63
01f2c     10 E2 65 F0 | 	shl	local07, #16
01f30     F1 D8 01 F1 | 	add	local02, local07
01f34     01 D8 05 F1 | 	add	local02, #1
01f38     09 5E 05 F1 | 	add	fp, #9
01f3c     AF D8 61 FC | 	wrlong	local02, fp
01f40     1C 5E 85 F1 | 	sub	fp, #28
01f44     AF D6 01 FB | 	rdlong	local01, fp
01f48     1C 5E 05 F1 | 	add	fp, #28
01f4c     AF DA 01 FB | 	rdlong	local03, fp
01f50     28 5E 85 F1 | 	sub	fp, #40
01f54     0A DA 65 F0 | 	shl	local03, #10
01f58     EB DA 61 FC | 	wrlong	local03, local01
01f5c     B0 00 90 FD | 	jmp	#LR__0127
01f60                 | LR__0126
01f60     1D 5E 05 F1 | 	add	fp, #29
01f64     AF D8 C1 FA | 	rdbyte	local02, fp
01f68     0F D8 05 F5 | 	and	local02, #15
01f6c     05 5E 05 F1 | 	add	fp, #5
01f70     AF DA C1 FA | 	rdbyte	local03, fp
01f74     80 DA 05 F5 | 	and	local03, #128
01f78     07 DA C5 F0 | 	sar	local03, #7
01f7c     ED D8 01 F1 | 	add	local02, local03
01f80     01 5E 85 F1 | 	sub	fp, #1
01f84     AF E2 C1 FA | 	rdbyte	local07, fp
01f88     03 E2 05 F5 | 	and	local07, #3
01f8c     01 E2 65 F0 | 	shl	local07, #1
01f90     F1 D8 01 F1 | 	add	local02, local07
01f94     02 D8 05 F1 | 	add	local02, #2
01f98     0D 5E 85 F1 | 	sub	fp, #13
01f9c     AF D8 41 FC | 	wrbyte	local02, fp
01fa0     0C 5E 05 F1 | 	add	fp, #12
01fa4     AF D8 C1 FA | 	rdbyte	local02, fp
01fa8     06 D8 45 F0 | 	shr	local02, #6
01fac     01 5E 85 F1 | 	sub	fp, #1
01fb0     AF DA C1 FA | 	rdbyte	local03, fp
01fb4     0F DA 45 F7 | 	zerox	local03, #15
01fb8     02 DA 65 F0 | 	shl	local03, #2
01fbc     ED D8 01 F1 | 	add	local02, local03
01fc0     01 5E 85 F1 | 	sub	fp, #1
01fc4     AF E2 C1 FA | 	rdbyte	local07, fp
01fc8     03 E2 05 F5 | 	and	local07, #3
01fcc     0F E2 45 F7 | 	zerox	local07, #15
01fd0     0A E2 65 F0 | 	shl	local07, #10
01fd4     F1 D8 01 F1 | 	add	local02, local07
01fd8     01 D8 05 F1 | 	add	local02, #1
01fdc     0A 5E 05 F1 | 	add	fp, #10
01fe0     AF D8 61 FC | 	wrlong	local02, fp
01fe4     1C 5E 85 F1 | 	sub	fp, #28
01fe8     AF D6 01 FB | 	rdlong	local01, fp
01fec     1C 5E 05 F1 | 	add	fp, #28
01ff0     AF DA 01 FB | 	rdlong	local03, fp
01ff4     14 5E 85 F1 | 	sub	fp, #20
01ff8     AF E2 C1 FA | 	rdbyte	local07, fp
01ffc     14 5E 85 F1 | 	sub	fp, #20
02000     07 E2 45 F7 | 	zerox	local07, #7
02004     09 E2 85 F1 | 	sub	local07, #9
02008     F1 DA 61 F0 | 	shl	local03, local07
0200c     EB DA 61 FC | 	wrlong	local03, local01
02010                 | LR__0127
02010     10 5E 05 F1 | 	add	fp, #16
02014     AF 00 68 FC | 	wrlong	#0, fp
02018     10 5E 85 F1 | 	sub	fp, #16
0201c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
0201c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
0201c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
0201c                 | ' 				}
0201c                 | ' 				res = RES_OK;
0201c                 | ' 			}
0201c                 | ' 			break;
0201c     2C 00 90 FD | 	jmp	#LR__0130
02020                 | LR__0128
02020     0C 5E 05 F1 | 	add	fp, #12
02024     AF D8 01 FB | 	rdlong	local02, fp
02028     EC 00 69 FC | 	wrlong	#128, local02
0202c     04 5E 05 F1 | 	add	fp, #4
02030     AF 00 68 FC | 	wrlong	#0, fp
02034     10 5E 85 F1 | 	sub	fp, #16
02038                 | ' 			*(DWORD*)buff = 128;
02038                 | ' 			res = RES_OK;
02038                 | ' 			break;
02038     10 00 90 FD | 	jmp	#LR__0130
0203c                 | LR__0129
0203c     04 D8 05 F6 | 	mov	local02, #4
02040     10 5E 05 F1 | 	add	fp, #16
02044     AF 08 68 FC | 	wrlong	#4, fp
02048     10 5E 85 F1 | 	sub	fp, #16
0204c                 | LR__0130
0204c     44 60 B0 FD | 	call	#_ff_cc_deselect_0666
02050                 | ' 			res = RES_PARERR;
02050                 | ' 	}
02050                 | ' 
02050                 | ' 	deselect();
02050                 | ' 
02050                 | ' 	return res;
02050     10 5E 05 F1 | 	add	fp, #16
02054     AF B2 01 FB | 	rdlong	result1, fp
02058     10 5E 85 F1 | 	sub	fp, #16
0205c                 | LR__0131
0205c     AF F0 03 F6 | 	mov	ptra, fp
02060     BA 00 A0 FD | 	call	#popregs_
02064                 | _ff_cc_disk_ioctl_ret
02064     2D 00 64 FD | 	ret
02068                 | 
02068                 | _ff_cc_disk_setpins
02068     00 CC 0D F2 | 	cmp	arg01, #0 wz
0206c     01 B2 65 56 |  if_ne	neg	result1, #1
02070     28 00 90 5D |  if_ne	jmp	#_ff_cc_disk_setpins_ret
02074     78 AF 05 F1 | 	add	ptr__ff_cc_dat__, #376
02078     D7 CE 61 FC | 	wrlong	arg02, ptr__ff_cc_dat__
0207c     04 AE 05 F1 | 	add	ptr__ff_cc_dat__, #4
02080     D7 D0 61 FC | 	wrlong	arg03, ptr__ff_cc_dat__
02084     04 AE 05 F1 | 	add	ptr__ff_cc_dat__, #4
02088     D7 D2 61 FC | 	wrlong	arg04, ptr__ff_cc_dat__
0208c     04 AE 05 F1 | 	add	ptr__ff_cc_dat__, #4
02090     D7 D4 61 FC | 	wrlong	arg05, ptr__ff_cc_dat__
02094     84 AF 85 F1 | 	sub	ptr__ff_cc_dat__, #388
02098     00 B2 05 F6 | 	mov	result1, #0
0209c                 | _ff_cc_disk_setpins_ret
0209c     2D 00 64 FD | 	ret
020a0                 | 
020a0                 | _ff_cc_ld_word_0176
020a0     01 CC 05 F1 | 	add	arg01, #1
020a4     E6 B2 C1 FA | 	rdbyte	result1, arg01
020a8     01 CC 85 F1 | 	sub	arg01, #1
020ac     07 B2 45 F7 | 	zerox	result1, #7
020b0     0F B2 45 F7 | 	zerox	result1, #15
020b4     08 B2 65 F0 | 	shl	result1, #8
020b8     E6 B6 C1 FA | 	rdbyte	_var01, arg01
020bc     DB B2 41 F5 | 	or	result1, _var01
020c0                 | ' {
020c0                 | ' 	WORD rv;
020c0                 | ' 
020c0                 | ' 	rv = ptr[1];
020c0                 | ' 	rv = rv << 8 | ptr[0];
020c0                 | ' 	return rv;
020c0                 | _ff_cc_ld_word_0176_ret
020c0     2D 00 64 FD | 	ret
020c4                 | 
020c4                 | _ff_cc_ld_dword_0178
020c4     03 CC 05 F1 | 	add	arg01, #3
020c8     E6 B2 C1 FA | 	rdbyte	result1, arg01
020cc     08 B2 65 F0 | 	shl	result1, #8
020d0     01 CC 85 F1 | 	sub	arg01, #1
020d4     E6 B6 C1 FA | 	rdbyte	_var01, arg01
020d8     DB B2 41 F5 | 	or	result1, _var01
020dc     08 B2 65 F0 | 	shl	result1, #8
020e0     01 CC 85 F1 | 	sub	arg01, #1
020e4     E6 B6 C1 FA | 	rdbyte	_var01, arg01
020e8     01 CC 85 F1 | 	sub	arg01, #1
020ec     07 B6 45 F7 | 	zerox	_var01, #7
020f0     DB B2 41 F5 | 	or	result1, _var01
020f4     08 B2 65 F0 | 	shl	result1, #8
020f8     E6 B6 C1 FA | 	rdbyte	_var01, arg01
020fc     DB B2 41 F5 | 	or	result1, _var01
02100                 | ' {
02100                 | ' 	DWORD rv;
02100                 | ' 
02100                 | ' 	rv = ptr[3];
02100                 | ' 	rv = rv << 8 | ptr[2];
02100                 | ' 	rv = rv << 8 | ptr[1];
02100                 | ' 	rv = rv << 8 | ptr[0];
02100                 | ' 	return rv;
02100                 | _ff_cc_ld_dword_0178_ret
02100     2D 00 64 FD | 	ret
02104                 | 
02104                 | _ff_cc_st_word_0179
02104     E7 B6 01 F6 | 	mov	_var01, arg02
02108     0F B6 45 F7 | 	zerox	_var01, #15
0210c     E6 B6 41 FC | 	wrbyte	_var01, arg01
02110     0F CE 45 F7 | 	zerox	arg02, #15
02114     08 CE 45 F0 | 	shr	arg02, #8
02118     01 CC 05 F1 | 	add	arg01, #1
0211c     0F CE 45 F7 | 	zerox	arg02, #15
02120     E6 CE 41 FC | 	wrbyte	arg02, arg01
02124                 | _ff_cc_st_word_0179_ret
02124     2D 00 64 FD | 	ret
02128                 | 
02128                 | _ff_cc_st_dword_0180
02128     E6 CE 41 FC | 	wrbyte	arg02, arg01
0212c     08 CE 45 F0 | 	shr	arg02, #8
02130     01 CC 05 F1 | 	add	arg01, #1
02134     E6 CE 41 FC | 	wrbyte	arg02, arg01
02138     08 CE 45 F0 | 	shr	arg02, #8
0213c     01 CC 05 F1 | 	add	arg01, #1
02140     E6 CE 41 FC | 	wrbyte	arg02, arg01
02144     08 CE 45 F0 | 	shr	arg02, #8
02148     01 CC 05 F1 | 	add	arg01, #1
0214c     E6 CE 41 FC | 	wrbyte	arg02, arg01
02150                 | _ff_cc_st_dword_0180_ret
02150     2D 00 64 FD | 	ret
02154                 | 
02154                 | _ff_cc_mem_cpy_0183
02154     00 D0 0D F2 | 	cmp	arg03, #0 wz
02158     24 00 90 AD |  if_e	jmp	#LR__0136
0215c                 | ' 		do {
0215c     BC DE 9F FE | 	loc	pa,	#(@LR__0134-@LR__0132)
02160     93 00 A0 FD | 	call	#FCACHE_LOAD_
02164                 | LR__0132
02164     E8 0C D8 FC | 	rep	@LR__0135, arg03
02168                 | LR__0133
02168     E7 B6 01 F6 | 	mov	_var01, arg02
0216c     01 B6 05 F1 | 	add	_var01, #1
02170     E7 B8 C1 FA | 	rdbyte	_var02, arg02
02174     DB CE 01 F6 | 	mov	arg02, _var01
02178     E6 B8 41 FC | 	wrbyte	_var02, arg01
0217c     01 CC 05 F1 | 	add	arg01, #1
02180                 | LR__0134
02180                 | LR__0135
02180                 | LR__0136
02180                 | _ff_cc_mem_cpy_0183_ret
02180     2D 00 64 FD | 	ret
02184                 | 
02184                 | _ff_cc_mem_cmp_0189
02184     A0 DE 9F FE | 	loc	pa,	#(@LR__0138-@LR__0137)
02188     93 00 A0 FD | 	call	#FCACHE_LOAD_
0218c                 | ' 
0218c                 | ' 	do {
0218c                 | LR__0137
0218c     E6 B6 C1 FA | 	rdbyte	_var01, arg01
02190     E7 B8 C1 FA | 	rdbyte	_var02, arg02
02194     DC B6 81 F1 | 	sub	_var01, _var02
02198     01 D0 85 F1 | 	sub	arg03, #1
0219c     E8 D0 09 F6 | 	mov	arg03, arg03 wz
021a0     01 CC 05 F1 | 	add	arg01, #1
021a4     01 CE 05 F1 | 	add	arg02, #1
021a8     08 00 90 AD |  if_e	jmp	#LR__0139
021ac     00 B6 0D F2 | 	cmp	_var01, #0 wz
021b0     D8 FF 9F AD |  if_e	jmp	#LR__0137
021b4                 | LR__0138
021b4                 | LR__0139
021b4                 | ' 
021b4                 | ' 	return r;
021b4     DB B2 01 F6 | 	mov	result1, _var01
021b8                 | _ff_cc_mem_cmp_0189_ret
021b8     2D 00 64 FD | 	ret
021bc                 | 
021bc                 | _ff_cc_chk_chr_0190
021bc     58 DE 9F FE | 	loc	pa,	#(@LR__0141-@LR__0140)
021c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
021c4                 | ' {
021c4                 | ' 	while (*str && *str != chr) str++;
021c4                 | LR__0140
021c4     E6 B6 C9 FA | 	rdbyte	_var01, arg01 wz
021c8     10 00 90 AD |  if_e	jmp	#LR__0142
021cc     E6 B8 C1 FA | 	rdbyte	_var02, arg01
021d0     E7 B8 09 F2 | 	cmp	_var02, arg02 wz
021d4     01 CC 05 51 |  if_ne	add	arg01, #1
021d8     E8 FF 9F 5D |  if_ne	jmp	#LR__0140
021dc                 | LR__0141
021dc                 | LR__0142
021dc                 | ' 	return *str;
021dc     E6 B2 C1 FA | 	rdbyte	result1, arg01
021e0                 | _ff_cc_chk_chr_0190_ret
021e0     2D 00 64 FD | 	ret
021e4                 | 
021e4                 | _ff_cc_sync_window_0194
021e4     06 5A 05 F6 | 	mov	COUNT_, #6
021e8     B0 00 A0 FD | 	call	#pushregs_
021ec     E6 D6 01 F6 | 	mov	local01, arg01
021f0     00 D8 05 F6 | 	mov	local02, #0
021f4     03 D6 05 F1 | 	add	local01, #3
021f8     EB DA C9 FA | 	rdbyte	local03, local01 wz
021fc     03 D6 85 F1 | 	sub	local01, #3
02200     A8 00 90 AD |  if_e	jmp	#LR__0145
02204     01 D6 05 F1 | 	add	local01, #1
02208     EB CC C1 FA | 	rdbyte	arg01, local01
0220c     2F D6 05 F1 | 	add	local01, #47
02210     EB CE 01 F6 | 	mov	arg02, local01
02214     04 D6 85 F1 | 	sub	local01, #4
02218     EB D0 01 FB | 	rdlong	arg03, local01
0221c     2C D6 85 F1 | 	sub	local01, #44
02220     01 D2 05 F6 | 	mov	arg04, #1
02224     C0 FA BF FD | 	call	#_ff_cc_disk_write
02228     00 B2 0D F2 | 	cmp	result1, #0 wz
0222c     78 00 90 5D |  if_ne	jmp	#LR__0143
02230     03 D6 05 F1 | 	add	local01, #3
02234     EB 00 48 FC | 	wrbyte	#0, local01
02238     29 D6 05 F1 | 	add	local01, #41
0223c     EB DA 01 FB | 	rdlong	local03, local01
02240     0C D6 85 F1 | 	sub	local01, #12
02244     EB DC 01 FB | 	rdlong	local04, local01
02248     EE DA 81 F1 | 	sub	local03, local04
0224c     08 D6 85 F1 | 	sub	local01, #8
02250     EB DE 01 FB | 	rdlong	local05, local01
02254     18 D6 85 F1 | 	sub	local01, #24
02258     EF DA 19 F2 | 	cmp	local03, local05 wcz
0225c     4C 00 90 3D |  if_ae	jmp	#LR__0144
02260     02 D6 05 F1 | 	add	local01, #2
02264     EB DA C1 FA | 	rdbyte	local03, local01
02268     02 D6 85 F1 | 	sub	local01, #2
0226c     07 DA 45 F7 | 	zerox	local03, #7
02270     02 DA 0D F2 | 	cmp	local03, #2 wz
02274     34 00 90 5D |  if_ne	jmp	#LR__0144
02278     01 D6 05 F1 | 	add	local01, #1
0227c     EB CC C1 FA | 	rdbyte	arg01, local01
02280     2F D6 05 F1 | 	add	local01, #47
02284     EB CE 01 F6 | 	mov	arg02, local01
02288     04 D6 85 F1 | 	sub	local01, #4
0228c     EB D0 01 FB | 	rdlong	arg03, local01
02290     14 D6 85 F1 | 	sub	local01, #20
02294     EB E0 01 FB | 	rdlong	local06, local01
02298     F0 D0 01 F1 | 	add	arg03, local06
0229c     01 D2 05 F6 | 	mov	arg04, #1
022a0     44 FA BF FD | 	call	#_ff_cc_disk_write
022a4     04 00 90 FD | 	jmp	#LR__0144
022a8                 | LR__0143
022a8     01 D8 05 F6 | 	mov	local02, #1
022ac                 | LR__0144
022ac                 | LR__0145
022ac                 | ' 			res = FR_DISK_ERR;
022ac                 | ' 		}
022ac                 | ' 	}
022ac                 | ' 	return res;
022ac     EC B2 01 F6 | 	mov	result1, local02
022b0     AF F0 03 F6 | 	mov	ptra, fp
022b4     BA 00 A0 FD | 	call	#popregs_
022b8                 | _ff_cc_sync_window_0194_ret
022b8     2D 00 64 FD | 	ret
022bc                 | 
022bc                 | _ff_cc_move_window_0196
022bc     04 5A 05 F6 | 	mov	COUNT_, #4
022c0     B0 00 A0 FD | 	call	#pushregs_
022c4     E6 D6 01 F6 | 	mov	local01, arg01
022c8     E7 D8 01 F6 | 	mov	local02, arg02
022cc     00 DA 05 F6 | 	mov	local03, #0
022d0     2C D6 05 F1 | 	add	local01, #44
022d4     EB DC 01 FB | 	rdlong	local04, local01
022d8     2C D6 85 F1 | 	sub	local01, #44
022dc     EE D8 09 F2 | 	cmp	local02, local04 wz
022e0     44 00 90 AD |  if_e	jmp	#LR__0147
022e4     EB CC 01 F6 | 	mov	arg01, local01
022e8     F8 FE BF FD | 	call	#_ff_cc_sync_window_0194
022ec     D9 DA 09 F6 | 	mov	local03, result1 wz
022f0     34 00 90 5D |  if_ne	jmp	#LR__0146
022f4     01 D6 05 F1 | 	add	local01, #1
022f8     EB CC C1 FA | 	rdbyte	arg01, local01
022fc     2F D6 05 F1 | 	add	local01, #47
02300     EB CE 01 F6 | 	mov	arg02, local01
02304     30 D6 85 F1 | 	sub	local01, #48
02308     EC D0 01 F6 | 	mov	arg03, local02
0230c     01 D2 05 F6 | 	mov	arg04, #1
02310     04 F9 BF FD | 	call	#_ff_cc_disk_read
02314     00 B2 0D F2 | 	cmp	result1, #0 wz
02318     01 D8 65 56 |  if_ne	neg	local02, #1
0231c     01 DA 05 56 |  if_ne	mov	local03, #1
02320     2C D6 05 F1 | 	add	local01, #44
02324     EB D8 61 FC | 	wrlong	local02, local01
02328                 | LR__0146
02328                 | LR__0147
02328                 | ' 				sect = (LBA_t)0 - 1;
02328                 | ' 				res = FR_DISK_ERR;
02328                 | ' 			}
02328                 | ' 			fs->winsect = sect;
02328                 | ' 		}
02328                 | ' 	}
02328                 | ' 	return res;
02328     ED B2 01 F6 | 	mov	result1, local03
0232c     AF F0 03 F6 | 	mov	ptra, fp
02330     BA 00 A0 FD | 	call	#popregs_
02334                 | _ff_cc_move_window_0196_ret
02334     2D 00 64 FD | 	ret
02338                 | 
02338                 | _ff_cc_sync_fs_0198
02338     0A 5A 05 F6 | 	mov	COUNT_, #10
0233c     B0 00 A0 FD | 	call	#pushregs_
02340     E6 D6 01 F6 | 	mov	local01, arg01
02344     9C FE BF FD | 	call	#_ff_cc_sync_window_0194
02348     D9 D8 09 F6 | 	mov	local02, result1 wz
0234c     54 01 90 5D |  if_ne	jmp	#LR__0153
02350     EB DA C1 FA | 	rdbyte	local03, local01
02354     03 DA 0D F2 | 	cmp	local03, #3 wz
02358     2C 01 90 5D |  if_ne	jmp	#LR__0152
0235c     04 D6 05 F1 | 	add	local01, #4
02360     EB DC C1 FA | 	rdbyte	local04, local01
02364     04 D6 85 F1 | 	sub	local01, #4
02368     07 DC 45 F7 | 	zerox	local04, #7
0236c     01 DC 0D F2 | 	cmp	local04, #1 wz
02370     14 01 90 5D |  if_ne	jmp	#LR__0152
02374     30 D6 05 F1 | 	add	local01, #48
02378     EB CC 01 F6 | 	mov	arg01, local01
0237c     30 D6 85 F1 | 	sub	local01, #48
02380     00 CE 05 F6 | 	mov	arg02, #0
02384     09 D0 C5 F9 | 	decod	arg03, #9
02388                 | ' {
02388                 | ' 	BYTE *d = (BYTE*)dst;
02388                 | ' 
02388                 | ' 	do {
02388     80 DC 9F FE | 	loc	pa,	#(@LR__0150-@LR__0148)
0238c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02390                 | LR__0148
02390     E8 04 D8 FC | 	rep	@LR__0151, arg03
02394                 | LR__0149
02394     E6 CE 41 FC | 	wrbyte	arg02, arg01
02398     01 CC 05 F1 | 	add	arg01, #1
0239c                 | LR__0150
0239c                 | LR__0151
0239c     30 D6 05 F1 | 	add	local01, #48
023a0     EB CC 01 F6 | 	mov	arg01, local01
023a4     30 D6 85 F1 | 	sub	local01, #48
023a8     FE CD 05 F1 | 	add	arg01, #510
023ac     55 00 00 FF 
023b0     55 CE 05 F6 | 	mov	arg02, ##43605
023b4     4C FD BF FD | 	call	#_ff_cc_st_word_0179
023b8     30 D6 05 F1 | 	add	local01, #48
023bc     EB CC 01 F6 | 	mov	arg01, local01
023c0     30 D6 85 F1 | 	sub	local01, #48
023c4     A9 B0 20 FF 
023c8     52 CE 05 F6 | 	mov	arg02, ##1096897106
023cc     58 FD BF FD | 	call	#_ff_cc_st_dword_0180
023d0     30 D6 05 F1 | 	add	local01, #48
023d4     EB CC 01 F6 | 	mov	arg01, local01
023d8     30 D6 85 F1 | 	sub	local01, #48
023dc     E4 CD 05 F1 | 	add	arg01, #484
023e0     B9 A0 30 FF 
023e4     72 CE 05 F6 | 	mov	arg02, ##1631679090
023e8     3C FD BF FD | 	call	#_ff_cc_st_dword_0180
023ec     30 D6 05 F1 | 	add	local01, #48
023f0     EB CC 01 F6 | 	mov	arg01, local01
023f4     E8 CD 05 F1 | 	add	arg01, #488
023f8     20 D6 85 F1 | 	sub	local01, #32
023fc     EB CE 01 FB | 	rdlong	arg02, local01
02400     10 D6 85 F1 | 	sub	local01, #16
02404     20 FD BF FD | 	call	#_ff_cc_st_dword_0180
02408     30 D6 05 F1 | 	add	local01, #48
0240c     EB CC 01 F6 | 	mov	arg01, local01
02410     EC CD 05 F1 | 	add	arg01, #492
02414     24 D6 85 F1 | 	sub	local01, #36
02418     EB CE 01 FB | 	rdlong	arg02, local01
0241c     0C D6 85 F1 | 	sub	local01, #12
02420     04 FD BF FD | 	call	#_ff_cc_st_dword_0180
02424     1C D6 05 F1 | 	add	local01, #28
02428     EB DA 01 FB | 	rdlong	local03, local01
0242c     01 DA 05 F1 | 	add	local03, #1
02430     10 D6 05 F1 | 	add	local01, #16
02434     EB DA 61 FC | 	wrlong	local03, local01
02438     2B D6 85 F1 | 	sub	local01, #43
0243c     EB DC C1 FA | 	rdbyte	local04, local01
02440     2F D6 05 F1 | 	add	local01, #47
02444     EB DE 01 F6 | 	mov	local05, local01
02448     EF E0 01 F6 | 	mov	local06, local05
0244c     04 D6 85 F1 | 	sub	local01, #4
02450     EB E2 01 FB | 	rdlong	local07, local01
02454     2C D6 85 F1 | 	sub	local01, #44
02458     F1 E4 01 F6 | 	mov	local08, local07
0245c     01 E6 05 F6 | 	mov	local09, #1
02460     EE CC 01 F6 | 	mov	arg01, local04
02464     F0 CE 01 F6 | 	mov	arg02, local06
02468     F2 D0 01 F6 | 	mov	arg03, local08
0246c     01 D2 05 F6 | 	mov	arg04, #1
02470     74 F8 BF FD | 	call	#_ff_cc_disk_write
02474     D9 E8 01 F6 | 	mov	local10, result1
02478     00 DA 05 F6 | 	mov	local03, #0
0247c     04 D6 05 F1 | 	add	local01, #4
02480     EB 00 48 FC | 	wrbyte	#0, local01
02484     04 D6 85 F1 | 	sub	local01, #4
02488                 | LR__0152
02488     01 D6 05 F1 | 	add	local01, #1
0248c     EB CC C1 FA | 	rdbyte	arg01, local01
02490     00 CE 05 F6 | 	mov	arg02, #0
02494     00 D0 05 F6 | 	mov	arg03, #0
02498     68 F9 BF FD | 	call	#_ff_cc_disk_ioctl
0249c     00 B2 0D F2 | 	cmp	result1, #0 wz
024a0     01 D8 05 56 |  if_ne	mov	local02, #1
024a4                 | LR__0153
024a4                 | ' 	}
024a4                 | ' 
024a4                 | ' 	return res;
024a4     EC B2 01 F6 | 	mov	result1, local02
024a8     AF F0 03 F6 | 	mov	ptra, fp
024ac     BA 00 A0 FD | 	call	#popregs_
024b0                 | _ff_cc_sync_fs_0198_ret
024b0     2D 00 64 FD | 	ret
024b4                 | 
024b4                 | _ff_cc_clst2sect_0199
024b4     02 CE 85 F1 | 	sub	arg02, #2
024b8     14 CC 05 F1 | 	add	arg01, #20
024bc     E6 B6 01 FB | 	rdlong	_var01, arg01
024c0     14 CC 85 F1 | 	sub	arg01, #20
024c4     02 B6 85 F1 | 	sub	_var01, #2
024c8     DB CE 19 F2 | 	cmp	arg02, _var01 wcz
024cc     00 B2 05 36 |  if_ae	mov	result1, #0
024d0     1C 00 90 3D |  if_ae	jmp	#_ff_cc_clst2sect_0199_ret
024d4                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
024d4     0A CC 05 F1 | 	add	arg01, #10
024d8     E6 B8 E1 FA | 	rdword	_var02, arg01
024dc     E7 B8 01 FD | 	qmul	_var02, arg02
024e0     18 BA 61 FD | 	getqx	_var03
024e4     1E CC 05 F1 | 	add	arg01, #30
024e8     E6 B2 01 FB | 	rdlong	result1, arg01
024ec     DD B2 01 F1 | 	add	result1, _var03
024f0                 | _ff_cc_clst2sect_0199_ret
024f0     2D 00 64 FD | 	ret
024f4                 | 
024f4                 | _ff_cc_get_fat_0204
024f4     0C 5A 05 F6 | 	mov	COUNT_, #12
024f8     B0 00 A0 FD | 	call	#pushregs_
024fc     E6 D6 01 F6 | 	mov	local01, arg01
02500     E7 D8 01 F6 | 	mov	local02, arg02
02504     EB DA 01 FB | 	rdlong	local03, local01
02508     02 D8 1D F2 | 	cmp	local02, #2 wcz
0250c     18 00 90 CD |  if_b	jmp	#LR__0154
02510     14 DA 05 F1 | 	add	local03, #20
02514     ED DC 01 FB | 	rdlong	local04, local03
02518     14 DA 85 F1 | 	sub	local03, #20
0251c     EE DE 01 F6 | 	mov	local05, local04
02520     EF D8 19 F2 | 	cmp	local02, local05 wcz
02524     08 00 90 CD |  if_b	jmp	#LR__0155
02528                 | LR__0154
02528     01 E0 05 F6 | 	mov	local06, #1
0252c     7C 01 90 FD | 	jmp	#LR__0162
02530                 | LR__0155
02530     01 E0 65 F6 | 	neg	local06, #1
02534                 | ' 		val = 0xFFFFFFFF;
02534                 | ' 
02534                 | ' 		switch (fs->fs_type) {
02534     ED E2 C1 FA | 	rdbyte	local07, local03
02538     01 E2 85 F1 | 	sub	local07, #1
0253c     03 E2 25 F3 | 	fle	local07, #3
02540     30 E2 61 FD | 	jmprel	local07
02544                 | LR__0156
02544     0C 00 90 FD | 	jmp	#LR__0157
02548     BC 00 90 FD | 	jmp	#LR__0158
0254c     04 01 90 FD | 	jmp	#LR__0159
02550     54 01 90 FD | 	jmp	#LR__0160
02554                 | LR__0157
02554     EC E4 01 F6 | 	mov	local08, local02
02558     EC DC 01 F6 | 	mov	local04, local02
0255c     01 DC 45 F0 | 	shr	local04, #1
02560     EE E4 01 F1 | 	add	local08, local04
02564     ED CC 01 F6 | 	mov	arg01, local03
02568     F2 E6 01 F6 | 	mov	local09, local08
0256c     09 E6 45 F0 | 	shr	local09, #9
02570     20 DA 05 F1 | 	add	local03, #32
02574     ED CE 01 FB | 	rdlong	arg02, local03
02578     20 DA 85 F1 | 	sub	local03, #32
0257c     F3 CE 01 F1 | 	add	arg02, local09
02580     38 FD BF FD | 	call	#_ff_cc_move_window_0196
02584     00 B2 0D F2 | 	cmp	result1, #0 wz
02588     20 01 90 5D |  if_ne	jmp	#LR__0161
0258c     F2 E8 01 F6 | 	mov	local10, local08
02590     FF E9 05 F5 | 	and	local10, #511
02594     30 DA 05 F1 | 	add	local03, #48
02598     ED E8 01 F1 | 	add	local10, local03
0259c     F4 EA C1 FA | 	rdbyte	local11, local10
025a0     30 DA 85 F1 | 	sub	local03, #48
025a4     ED CC 01 F6 | 	mov	arg01, local03
025a8     01 E4 05 F1 | 	add	local08, #1
025ac     F2 E6 01 F6 | 	mov	local09, local08
025b0     09 E6 45 F0 | 	shr	local09, #9
025b4     20 DA 05 F1 | 	add	local03, #32
025b8     ED CE 01 FB | 	rdlong	arg02, local03
025bc     20 DA 85 F1 | 	sub	local03, #32
025c0     F3 CE 01 F1 | 	add	arg02, local09
025c4     F4 FC BF FD | 	call	#_ff_cc_move_window_0196
025c8     00 B2 0D F2 | 	cmp	result1, #0 wz
025cc     DC 00 90 5D |  if_ne	jmp	#LR__0161
025d0     FF E5 05 F5 | 	and	local08, #511
025d4     30 DA 05 F1 | 	add	local03, #48
025d8     ED E4 01 F1 | 	add	local08, local03
025dc     F2 DC C1 FA | 	rdbyte	local04, local08
025e0     08 DC 65 F0 | 	shl	local04, #8
025e4     EE EA 41 F5 | 	or	local11, local04
025e8     01 D8 CD F7 | 	test	local02, #1 wz
025ec     04 EA 45 50 |  if_ne	shr	local11, #4
025f0     F5 DE 01 56 |  if_ne	mov	local05, local11
025f4     07 00 00 AF 
025f8     FF EB 05 A5 |  if_e	and	local11, ##4095
025fc     F5 DE 01 A6 |  if_e	mov	local05, local11
02600     EF E0 01 F6 | 	mov	local06, local05
02604                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
02604                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
02604                 | ' 			break;
02604     A4 00 90 FD | 	jmp	#LR__0161
02608                 | LR__0158
02608     ED CC 01 F6 | 	mov	arg01, local03
0260c     EC E6 01 F6 | 	mov	local09, local02
02610     08 E6 45 F0 | 	shr	local09, #8
02614     20 DA 05 F1 | 	add	local03, #32
02618     ED CE 01 FB | 	rdlong	arg02, local03
0261c     20 DA 85 F1 | 	sub	local03, #32
02620     F3 CE 01 F1 | 	add	arg02, local09
02624     94 FC BF FD | 	call	#_ff_cc_move_window_0196
02628     00 B2 0D F2 | 	cmp	result1, #0 wz
0262c     7C 00 90 5D |  if_ne	jmp	#LR__0161
02630     30 DA 05 F1 | 	add	local03, #48
02634     01 D8 65 F0 | 	shl	local02, #1
02638     FF D9 05 F5 | 	and	local02, #511
0263c     EC DA 01 F1 | 	add	local03, local02
02640     ED CC 01 F6 | 	mov	arg01, local03
02644     58 FA BF FD | 	call	#_ff_cc_ld_word_0176
02648     0F B2 45 F7 | 	zerox	result1, #15
0264c     D9 E0 01 F6 | 	mov	local06, result1
02650                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
02650                 | ' 			break;
02650     58 00 90 FD | 	jmp	#LR__0161
02654                 | LR__0159
02654     ED CC 01 F6 | 	mov	arg01, local03
02658     EC E6 01 F6 | 	mov	local09, local02
0265c     07 E6 45 F0 | 	shr	local09, #7
02660     20 DA 05 F1 | 	add	local03, #32
02664     ED CE 01 FB | 	rdlong	arg02, local03
02668     20 DA 85 F1 | 	sub	local03, #32
0266c     F3 CE 01 F1 | 	add	arg02, local09
02670     48 FC BF FD | 	call	#_ff_cc_move_window_0196
02674     00 B2 0D F2 | 	cmp	result1, #0 wz
02678     30 00 90 5D |  if_ne	jmp	#LR__0161
0267c     30 DA 05 F1 | 	add	local03, #48
02680     ED CC 01 F6 | 	mov	arg01, local03
02684     EC EC 01 F6 | 	mov	local12, local02
02688     02 EC 65 F0 | 	shl	local12, #2
0268c     FF ED 05 F5 | 	and	local12, #511
02690     F6 CC 01 F1 | 	add	arg01, local12
02694     2C FA BF FD | 	call	#_ff_cc_ld_dword_0178
02698     D9 E0 01 F6 | 	mov	local06, result1
0269c     FF FF 07 FF 
026a0     FF E1 05 F5 | 	and	local06, ##268435455
026a4                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
026a4                 | ' 			break;
026a4     04 00 90 FD | 	jmp	#LR__0161
026a8                 | LR__0160
026a8     01 E0 05 F6 | 	mov	local06, #1
026ac                 | LR__0161
026ac                 | LR__0162
026ac                 | ' 			val = 1;
026ac                 | ' 		}
026ac                 | ' 	}
026ac                 | ' 
026ac                 | ' 	return val;
026ac     F0 B2 01 F6 | 	mov	result1, local06
026b0     AF F0 03 F6 | 	mov	ptra, fp
026b4     BA 00 A0 FD | 	call	#popregs_
026b8                 | _ff_cc_get_fat_0204_ret
026b8     2D 00 64 FD | 	ret
026bc                 | 
026bc                 | _ff_cc_put_fat_0208
026bc     10 5A 05 F6 | 	mov	COUNT_, #16
026c0     B0 00 A0 FD | 	call	#pushregs_
026c4     E6 D6 01 F6 | 	mov	local01, arg01
026c8     E7 D8 01 F6 | 	mov	local02, arg02
026cc     E8 DA 01 F6 | 	mov	local03, arg03
026d0     02 DC 05 F6 | 	mov	local04, #2
026d4     02 D8 1D F2 | 	cmp	local02, #2 wcz
026d8     D0 02 90 CD |  if_b	jmp	#LR__0172
026dc     14 D6 05 F1 | 	add	local01, #20
026e0     EB DE 01 FB | 	rdlong	local05, local01
026e4     14 D6 85 F1 | 	sub	local01, #20
026e8     EF E0 01 F6 | 	mov	local06, local05
026ec     F0 D8 19 F2 | 	cmp	local02, local06 wcz
026f0     B8 02 90 3D |  if_ae	jmp	#LR__0172
026f4                 | ' 		switch (fs->fs_type) {
026f4     EB E2 C1 FA | 	rdbyte	local07, local01
026f8     01 E2 85 F1 | 	sub	local07, #1
026fc     03 E2 25 F3 | 	fle	local07, #3
02700     30 E2 61 FD | 	jmprel	local07
02704                 | LR__0163
02704     0C 00 90 FD | 	jmp	#LR__0164
02708     54 01 90 FD | 	jmp	#LR__0169
0270c     D8 01 90 FD | 	jmp	#LR__0170
02710     98 02 90 FD | 	jmp	#LR__0171
02714                 | LR__0164
02714     EC E4 01 F6 | 	mov	local08, local02
02718     EC DE 01 F6 | 	mov	local05, local02
0271c     01 DE 45 F0 | 	shr	local05, #1
02720     EF E4 01 F1 | 	add	local08, local05
02724     EB E0 01 F6 | 	mov	local06, local01
02728     F2 E6 01 F6 | 	mov	local09, local08
0272c     09 E6 45 F0 | 	shr	local09, #9
02730     20 D6 05 F1 | 	add	local01, #32
02734     EB E8 01 FB | 	rdlong	local10, local01
02738     20 D6 85 F1 | 	sub	local01, #32
0273c     F4 DE 01 F6 | 	mov	local05, local10
02740     F3 DE 01 F1 | 	add	local05, local09
02744     EF EA 01 F6 | 	mov	local11, local05
02748     F0 CC 01 F6 | 	mov	arg01, local06
0274c     F5 CE 01 F6 | 	mov	arg02, local11
02750     68 FB BF FD | 	call	#_ff_cc_move_window_0196
02754     D9 EC 01 F6 | 	mov	local12, result1
02758     F6 DC 09 F6 | 	mov	local04, local12 wz
0275c     4C 02 90 5D |  if_ne	jmp	#LR__0171
02760     30 D6 05 F1 | 	add	local01, #48
02764     EB EE 01 F6 | 	mov	local13, local01
02768     F2 EC 01 F6 | 	mov	local12, local08
0276c     FF ED 05 F5 | 	and	local12, #511
02770     F6 EE 01 F1 | 	add	local13, local12
02774     01 D8 CD F7 | 	test	local02, #1 wz
02778     30 D6 85 F1 | 	sub	local01, #48
0277c     01 E4 05 F1 | 	add	local08, #1
02780     1C 00 90 AD |  if_e	jmp	#LR__0165
02784     F7 E0 C1 FA | 	rdbyte	local06, local13
02788     0F E0 05 F5 | 	and	local06, #15
0278c     ED E8 01 F6 | 	mov	local10, local03
02790     07 E8 45 F7 | 	zerox	local10, #7
02794     04 E8 65 F0 | 	shl	local10, #4
02798     F4 E0 41 F5 | 	or	local06, local10
0279c     04 00 90 FD | 	jmp	#LR__0166
027a0                 | LR__0165
027a0     ED E0 01 F6 | 	mov	local06, local03
027a4                 | LR__0166
027a4     F7 E0 41 FC | 	wrbyte	local06, local13
027a8     03 D6 05 F1 | 	add	local01, #3
027ac     EB 02 48 FC | 	wrbyte	#1, local01
027b0     03 D6 85 F1 | 	sub	local01, #3
027b4     EB E0 01 F6 | 	mov	local06, local01
027b8     F2 E6 01 F6 | 	mov	local09, local08
027bc     09 E6 45 F0 | 	shr	local09, #9
027c0     20 D6 05 F1 | 	add	local01, #32
027c4     EB E8 01 FB | 	rdlong	local10, local01
027c8     20 D6 85 F1 | 	sub	local01, #32
027cc     F4 DE 01 F6 | 	mov	local05, local10
027d0     F3 DE 01 F1 | 	add	local05, local09
027d4     EF EA 01 F6 | 	mov	local11, local05
027d8     F0 CC 01 F6 | 	mov	arg01, local06
027dc     F5 CE 01 F6 | 	mov	arg02, local11
027e0     D8 FA BF FD | 	call	#_ff_cc_move_window_0196
027e4     D9 EC 01 F6 | 	mov	local12, result1
027e8     F6 DC 09 F6 | 	mov	local04, local12 wz
027ec     BC 01 90 5D |  if_ne	jmp	#LR__0171
027f0     30 D6 05 F1 | 	add	local01, #48
027f4     EB EE 01 F6 | 	mov	local13, local01
027f8     F2 E6 01 F6 | 	mov	local09, local08
027fc     FF E7 05 F5 | 	and	local09, #511
02800     F3 E8 01 F6 | 	mov	local10, local09
02804     F3 EE 01 F1 | 	add	local13, local09
02808     EC DE 01 F6 | 	mov	local05, local02
0280c     01 DE 0D F5 | 	and	local05, #1 wz
02810     30 D6 85 F1 | 	sub	local01, #48
02814     10 00 90 AD |  if_e	jmp	#LR__0167
02818     ED E6 01 F6 | 	mov	local09, local03
0281c     04 E6 45 F0 | 	shr	local09, #4
02820     F3 E0 01 F6 | 	mov	local06, local09
02824     20 00 90 FD | 	jmp	#LR__0168
02828                 | LR__0167
02828     F7 E8 C1 FA | 	rdbyte	local10, local13
0282c     F0 E8 05 F5 | 	and	local10, #240
02830     ED EA 01 F6 | 	mov	local11, local03
02834     08 EA 45 F0 | 	shr	local11, #8
02838     07 EA 45 F7 | 	zerox	local11, #7
0283c     0F EA 05 F5 | 	and	local11, #15
02840     F5 E8 41 F5 | 	or	local10, local11
02844     F4 E0 01 F6 | 	mov	local06, local10
02848                 | LR__0168
02848     F7 E0 41 FC | 	wrbyte	local06, local13
0284c     01 E0 05 F6 | 	mov	local06, #1
02850     03 D6 05 F1 | 	add	local01, #3
02854     EB 02 48 FC | 	wrbyte	#1, local01
02858     03 D6 85 F1 | 	sub	local01, #3
0285c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
0285c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
0285c                 | ' 			fs->wflag = 1;
0285c                 | ' 			break;
0285c     4C 01 90 FD | 	jmp	#LR__0171
02860                 | LR__0169
02860     EB E0 01 F6 | 	mov	local06, local01
02864     EC E6 01 F6 | 	mov	local09, local02
02868     08 E6 45 F0 | 	shr	local09, #8
0286c     20 D6 05 F1 | 	add	local01, #32
02870     EB E8 01 FB | 	rdlong	local10, local01
02874     20 D6 85 F1 | 	sub	local01, #32
02878     F4 DE 01 F6 | 	mov	local05, local10
0287c     F3 DE 01 F1 | 	add	local05, local09
02880     EF EA 01 F6 | 	mov	local11, local05
02884     F0 CC 01 F6 | 	mov	arg01, local06
02888     F5 CE 01 F6 | 	mov	arg02, local11
0288c     2C FA BF FD | 	call	#_ff_cc_move_window_0196
02890     D9 EC 01 F6 | 	mov	local12, result1
02894     F6 DC 09 F6 | 	mov	local04, local12 wz
02898     10 01 90 5D |  if_ne	jmp	#LR__0171
0289c     30 D6 05 F1 | 	add	local01, #48
028a0     EB DE 01 F6 | 	mov	local05, local01
028a4     EC E6 01 F6 | 	mov	local09, local02
028a8     01 E6 65 F0 | 	shl	local09, #1
028ac     F3 E8 01 F6 | 	mov	local10, local09
028b0     FF E9 05 F5 | 	and	local10, #511
028b4     F4 EA 01 F6 | 	mov	local11, local10
028b8     EF EC 01 F6 | 	mov	local12, local05
028bc     F5 EC 01 F1 | 	add	local12, local11
028c0     ED F0 01 F6 | 	mov	local14, local03
028c4     F6 CC 01 F6 | 	mov	arg01, local12
028c8     F8 CE 01 F6 | 	mov	arg02, local14
028cc     30 D6 85 F1 | 	sub	local01, #48
028d0     30 F8 BF FD | 	call	#_ff_cc_st_word_0179
028d4     01 E0 05 F6 | 	mov	local06, #1
028d8     03 D6 05 F1 | 	add	local01, #3
028dc     EB 02 48 FC | 	wrbyte	#1, local01
028e0     03 D6 85 F1 | 	sub	local01, #3
028e4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
028e4                 | ' 			fs->wflag = 1;
028e4                 | ' 			break;
028e4     C4 00 90 FD | 	jmp	#LR__0171
028e8                 | LR__0170
028e8     EB E0 01 F6 | 	mov	local06, local01
028ec     EC E6 01 F6 | 	mov	local09, local02
028f0     07 E6 45 F0 | 	shr	local09, #7
028f4     20 D6 05 F1 | 	add	local01, #32
028f8     EB E8 01 FB | 	rdlong	local10, local01
028fc     20 D6 85 F1 | 	sub	local01, #32
02900     F4 DE 01 F6 | 	mov	local05, local10
02904     F3 DE 01 F1 | 	add	local05, local09
02908     EF EA 01 F6 | 	mov	local11, local05
0290c     F0 CC 01 F6 | 	mov	arg01, local06
02910     F5 CE 01 F6 | 	mov	arg02, local11
02914     A4 F9 BF FD | 	call	#_ff_cc_move_window_0196
02918     D9 EC 01 F6 | 	mov	local12, result1
0291c     F6 DC 09 F6 | 	mov	local04, local12 wz
02920     88 00 90 5D |  if_ne	jmp	#LR__0171
02924     FF FF 07 FF 
02928     FF DB 05 F5 | 	and	local03, ##268435455
0292c     30 D6 05 F1 | 	add	local01, #48
02930     EB F2 01 F6 | 	mov	local15, local01
02934     EC F0 01 F6 | 	mov	local14, local02
02938     02 F0 65 F0 | 	shl	local14, #2
0293c     FF F1 05 F5 | 	and	local14, #511
02940     F8 F2 01 F1 | 	add	local15, local14
02944     F9 CC 01 F6 | 	mov	arg01, local15
02948     30 D6 85 F1 | 	sub	local01, #48
0294c     74 F7 BF FD | 	call	#_ff_cc_ld_dword_0178
02950     D9 F4 01 F6 | 	mov	local16, result1
02954     FA DE 01 F6 | 	mov	local05, local16
02958     00 00 78 FF 
0295c     00 DE 05 F5 | 	and	local05, ##-268435456
02960     EF DA 41 F5 | 	or	local03, local05
02964     30 D6 05 F1 | 	add	local01, #48
02968     EB DE 01 F6 | 	mov	local05, local01
0296c     EC E6 01 F6 | 	mov	local09, local02
02970     02 E6 65 F0 | 	shl	local09, #2
02974     F3 E8 01 F6 | 	mov	local10, local09
02978     FF E9 05 F5 | 	and	local10, #511
0297c     F4 EA 01 F6 | 	mov	local11, local10
02980     EF EC 01 F6 | 	mov	local12, local05
02984     F5 EC 01 F1 | 	add	local12, local11
02988     ED F0 01 F6 | 	mov	local14, local03
0298c     F6 CC 01 F6 | 	mov	arg01, local12
02990     F8 CE 01 F6 | 	mov	arg02, local14
02994     30 D6 85 F1 | 	sub	local01, #48
02998     8C F7 BF FD | 	call	#_ff_cc_st_dword_0180
0299c     01 E0 05 F6 | 	mov	local06, #1
029a0     03 D6 05 F1 | 	add	local01, #3
029a4     EB 02 48 FC | 	wrbyte	#1, local01
029a8     03 D6 85 F1 | 	sub	local01, #3
029ac                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
029ac                 | ' 			}
029ac                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
029ac                 | ' 			fs->wflag = 1;
029ac                 | ' 			break;
029ac                 | LR__0171
029ac                 | LR__0172
029ac                 | ' 		}
029ac                 | ' 	}
029ac                 | ' 	return res;
029ac     EE B2 01 F6 | 	mov	result1, local04
029b0     AF F0 03 F6 | 	mov	ptra, fp
029b4     BA 00 A0 FD | 	call	#popregs_
029b8                 | _ff_cc_put_fat_0208_ret
029b8     2D 00 64 FD | 	ret
029bc                 | 
029bc                 | _ff_cc_remove_chain_0212
029bc     09 5A 05 F6 | 	mov	COUNT_, #9
029c0     B0 00 A0 FD | 	call	#pushregs_
029c4     E6 D6 01 F6 | 	mov	local01, arg01
029c8     E7 D8 01 F6 | 	mov	local02, arg02
029cc     E8 DA 01 F6 | 	mov	local03, arg03
029d0     EB DC 01 FB | 	rdlong	local04, local01
029d4     02 D8 1D F2 | 	cmp	local02, #2 wcz
029d8     14 00 90 CD |  if_b	jmp	#LR__0173
029dc     14 DC 05 F1 | 	add	local04, #20
029e0     EE DE 01 FB | 	rdlong	local05, local04
029e4     14 DC 85 F1 | 	sub	local04, #20
029e8     EF D8 19 F2 | 	cmp	local02, local05 wcz
029ec     08 00 90 CD |  if_b	jmp	#LR__0174
029f0                 | LR__0173
029f0     02 B2 05 F6 | 	mov	result1, #2
029f4     D0 00 90 FD | 	jmp	#LR__0179
029f8                 | LR__0174
029f8     00 DA 0D F2 | 	cmp	local03, #0 wz
029fc     1C 00 90 AD |  if_e	jmp	#LR__0175
02a00     EE CC 01 F6 | 	mov	arg01, local04
02a04     ED CE 01 F6 | 	mov	arg02, local03
02a08     01 D0 65 F6 | 	neg	arg03, #1
02a0c     AC FC BF FD | 	call	#_ff_cc_put_fat_0208
02a10     D9 E0 09 F6 | 	mov	local06, result1 wz
02a14     F0 B2 01 56 |  if_ne	mov	result1, local06
02a18     AC 00 90 5D |  if_ne	jmp	#LR__0179
02a1c                 | LR__0175
02a1c                 | ' 	}
02a1c                 | ' 
02a1c                 | ' 
02a1c                 | ' 	do {
02a1c                 | LR__0176
02a1c     EC CE 01 F6 | 	mov	arg02, local02
02a20     EB CC 01 F6 | 	mov	arg01, local01
02a24     CC FA BF FD | 	call	#_ff_cc_get_fat_0204
02a28     D9 E2 09 F6 | 	mov	local07, result1 wz
02a2c     94 00 90 AD |  if_e	jmp	#LR__0178
02a30     01 E2 0D F2 | 	cmp	local07, #1 wz
02a34     02 B2 05 A6 |  if_e	mov	result1, #2
02a38     8C 00 90 AD |  if_e	jmp	#LR__0179
02a3c     FF FF 7F FF 
02a40     FF E3 0D F2 | 	cmp	local07, ##-1 wz
02a44     01 B2 05 A6 |  if_e	mov	result1, #1
02a48     7C 00 90 AD |  if_e	jmp	#LR__0179
02a4c     EE CC 01 F6 | 	mov	arg01, local04
02a50     EC CE 01 F6 | 	mov	arg02, local02
02a54     00 D0 05 F6 | 	mov	arg03, #0
02a58     60 FC BF FD | 	call	#_ff_cc_put_fat_0208
02a5c     D9 E0 09 F6 | 	mov	local06, result1 wz
02a60     F0 B2 01 56 |  if_ne	mov	result1, local06
02a64     60 00 90 5D |  if_ne	jmp	#LR__0179
02a68     14 DC 05 F1 | 	add	local04, #20
02a6c     EE DE 01 FB | 	rdlong	local05, local04
02a70     02 DE 85 F1 | 	sub	local05, #2
02a74     04 DC 85 F1 | 	sub	local04, #4
02a78     EE E4 01 FB | 	rdlong	local08, local04
02a7c     10 DC 85 F1 | 	sub	local04, #16
02a80     EF E4 19 F2 | 	cmp	local08, local05 wcz
02a84     24 00 90 3D |  if_ae	jmp	#LR__0177
02a88     10 DC 05 F1 | 	add	local04, #16
02a8c     EE E6 01 FB | 	rdlong	local09, local04
02a90     01 E6 05 F1 | 	add	local09, #1
02a94     EE E6 61 FC | 	wrlong	local09, local04
02a98     0C DC 85 F1 | 	sub	local04, #12
02a9c     EE DE C1 FA | 	rdbyte	local05, local04
02aa0     01 DE 45 F5 | 	or	local05, #1
02aa4     EE DE 41 FC | 	wrbyte	local05, local04
02aa8     04 DC 85 F1 | 	sub	local04, #4
02aac                 | LR__0177
02aac     F1 D8 01 F6 | 	mov	local02, local07
02ab0     14 DC 05 F1 | 	add	local04, #20
02ab4     EE DE 01 FB | 	rdlong	local05, local04
02ab8     14 DC 85 F1 | 	sub	local04, #20
02abc     EF D8 19 F2 | 	cmp	local02, local05 wcz
02ac0     58 FF 9F CD |  if_b	jmp	#LR__0176
02ac4                 | LR__0178
02ac4                 | ' #line 1531 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
02ac4                 | ' 	return FR_OK;
02ac4     00 B2 05 F6 | 	mov	result1, #0
02ac8                 | LR__0179
02ac8     AF F0 03 F6 | 	mov	ptra, fp
02acc     BA 00 A0 FD | 	call	#popregs_
02ad0                 | _ff_cc_remove_chain_0212_ret
02ad0     2D 00 64 FD | 	ret
02ad4                 | 
02ad4                 | _ff_cc_create_chain_0218
02ad4     0B 5A 05 F6 | 	mov	COUNT_, #11
02ad8     B0 00 A0 FD | 	call	#pushregs_
02adc     E6 D6 01 F6 | 	mov	local01, arg01
02ae0     E7 D8 09 F6 | 	mov	local02, arg02 wz
02ae4     EB DA 01 FB | 	rdlong	local03, local01
02ae8     2C 00 90 5D |  if_ne	jmp	#LR__0181
02aec     0C DA 05 F1 | 	add	local03, #12
02af0     ED DC 09 FB | 	rdlong	local04, local03 wz
02af4     0C DA 85 F1 | 	sub	local03, #12
02af8     14 00 90 AD |  if_e	jmp	#LR__0180
02afc     14 DA 05 F1 | 	add	local03, #20
02b00     ED DE 01 FB | 	rdlong	local05, local03
02b04     14 DA 85 F1 | 	sub	local03, #20
02b08     EF DC 19 F2 | 	cmp	local04, local05 wcz
02b0c     50 00 90 CD |  if_b	jmp	#LR__0182
02b10                 | LR__0180
02b10     01 DC 05 F6 | 	mov	local04, #1
02b14     48 00 90 FD | 	jmp	#LR__0182
02b18                 | LR__0181
02b18     EB CC 01 F6 | 	mov	arg01, local01
02b1c     EC CE 01 F6 | 	mov	arg02, local02
02b20     D0 F9 BF FD | 	call	#_ff_cc_get_fat_0204
02b24     D9 E0 01 F6 | 	mov	local06, result1
02b28     02 E0 1D F2 | 	cmp	local06, #2 wcz
02b2c     01 B2 05 C6 |  if_b	mov	result1, #1
02b30     F4 01 90 CD |  if_b	jmp	#LR__0198
02b34     FF FF 7F FF 
02b38     FF E1 0D F2 | 	cmp	local06, ##-1 wz
02b3c     F0 B2 01 A6 |  if_e	mov	result1, local06
02b40     E4 01 90 AD |  if_e	jmp	#LR__0198
02b44     14 DA 05 F1 | 	add	local03, #20
02b48     ED DE 01 FB | 	rdlong	local05, local03
02b4c     14 DA 85 F1 | 	sub	local03, #20
02b50     EF E0 19 F2 | 	cmp	local06, local05 wcz
02b54     F0 B2 01 C6 |  if_b	mov	result1, local06
02b58     CC 01 90 CD |  if_b	jmp	#LR__0198
02b5c     EC DC 01 F6 | 	mov	local04, local02
02b60                 | LR__0182
02b60     10 DA 05 F1 | 	add	local03, #16
02b64     ED DE 09 FB | 	rdlong	local05, local03 wz
02b68     10 DA 85 F1 | 	sub	local03, #16
02b6c     00 B2 05 A6 |  if_e	mov	result1, #0
02b70     B4 01 90 AD |  if_e	jmp	#LR__0198
02b74     00 E2 05 F6 | 	mov	local07, #0
02b78     EC DC 09 F2 | 	cmp	local04, local02 wz
02b7c     80 00 90 5D |  if_ne	jmp	#LR__0187
02b80     EE E2 01 F6 | 	mov	local07, local04
02b84     01 E2 05 F1 | 	add	local07, #1
02b88     14 DA 05 F1 | 	add	local03, #20
02b8c     ED DE 01 FB | 	rdlong	local05, local03
02b90     14 DA 85 F1 | 	sub	local03, #20
02b94     EF E2 19 F2 | 	cmp	local07, local05 wcz
02b98     02 E2 05 36 |  if_ae	mov	local07, #2
02b9c     EB DE 01 F6 | 	mov	local05, local01
02ba0     F1 CE 01 F6 | 	mov	arg02, local07
02ba4     EF CC 01 F6 | 	mov	arg01, local05
02ba8     48 F9 BF FD | 	call	#_ff_cc_get_fat_0204
02bac     D9 E0 01 F6 | 	mov	local06, result1
02bb0     01 E0 0D F2 | 	cmp	local06, #1 wz
02bb4     0C 00 90 AD |  if_e	jmp	#LR__0183
02bb8     FF FF 7F FF 
02bbc     FF E1 0D F2 | 	cmp	local06, ##-1 wz
02bc0     08 00 90 5D |  if_ne	jmp	#LR__0184
02bc4                 | LR__0183
02bc4     F0 B2 01 F6 | 	mov	result1, local06
02bc8     5C 01 90 FD | 	jmp	#LR__0198
02bcc                 | LR__0184
02bcc     00 E0 0D F2 | 	cmp	local06, #0 wz
02bd0     2C 00 90 AD |  if_e	jmp	#LR__0186
02bd4     0C DA 05 F1 | 	add	local03, #12
02bd8     ED E0 01 FB | 	rdlong	local06, local03
02bdc     0C DA 85 F1 | 	sub	local03, #12
02be0     02 E0 1D F2 | 	cmp	local06, #2 wcz
02be4     14 00 90 CD |  if_b	jmp	#LR__0185
02be8     14 DA 05 F1 | 	add	local03, #20
02bec     ED DE 01 FB | 	rdlong	local05, local03
02bf0     14 DA 85 F1 | 	sub	local03, #20
02bf4     EF E0 19 F2 | 	cmp	local06, local05 wcz
02bf8     F0 DC 01 C6 |  if_b	mov	local04, local06
02bfc                 | LR__0185
02bfc     00 E2 05 F6 | 	mov	local07, #0
02c00                 | LR__0186
02c00                 | LR__0187
02c00     00 E2 0D F2 | 	cmp	local07, #0 wz
02c04     70 00 90 5D |  if_ne	jmp	#LR__0193
02c08     EE E2 01 F6 | 	mov	local07, local04
02c0c                 | ' 			ncl = scl;
02c0c                 | ' 			for (;;) {
02c0c                 | LR__0188
02c0c     01 E2 05 F1 | 	add	local07, #1
02c10     14 DA 05 F1 | 	add	local03, #20
02c14     ED DE 01 FB | 	rdlong	local05, local03
02c18     14 DA 85 F1 | 	sub	local03, #20
02c1c     EF E2 19 F2 | 	cmp	local07, local05 wcz
02c20     10 00 90 CD |  if_b	jmp	#LR__0189
02c24     02 E2 05 F6 | 	mov	local07, #2
02c28     EE E2 19 F2 | 	cmp	local07, local04 wcz
02c2c     00 B2 05 16 |  if_a	mov	result1, #0
02c30     F4 00 90 1D |  if_a	jmp	#LR__0198
02c34                 | LR__0189
02c34     EB DE 01 F6 | 	mov	local05, local01
02c38     F1 CE 01 F6 | 	mov	arg02, local07
02c3c     EF CC 01 F6 | 	mov	arg01, local05
02c40     B0 F8 BF FD | 	call	#_ff_cc_get_fat_0204
02c44     D9 E0 09 F6 | 	mov	local06, result1 wz
02c48     2C 00 90 AD |  if_e	jmp	#LR__0192
02c4c     01 E0 0D F2 | 	cmp	local06, #1 wz
02c50     0C 00 90 AD |  if_e	jmp	#LR__0190
02c54     FF FF 7F FF 
02c58     FF E1 0D F2 | 	cmp	local06, ##-1 wz
02c5c     08 00 90 5D |  if_ne	jmp	#LR__0191
02c60                 | LR__0190
02c60     F0 B2 01 F6 | 	mov	result1, local06
02c64     C0 00 90 FD | 	jmp	#LR__0198
02c68                 | LR__0191
02c68     EE E2 09 F2 | 	cmp	local07, local04 wz
02c6c     00 B2 05 A6 |  if_e	mov	result1, #0
02c70     B4 00 90 AD |  if_e	jmp	#LR__0198
02c74     94 FF 9F FD | 	jmp	#LR__0188
02c78                 | LR__0192
02c78                 | LR__0193
02c78     ED CC 01 F6 | 	mov	arg01, local03
02c7c     F1 CE 01 F6 | 	mov	arg02, local07
02c80     01 D0 65 F6 | 	neg	arg03, #1
02c84     34 FA BF FD | 	call	#_ff_cc_put_fat_0208
02c88     D9 E4 09 F6 | 	mov	local08, result1 wz
02c8c     2C 00 90 5D |  if_ne	jmp	#LR__0194
02c90     00 D8 0D F2 | 	cmp	local02, #0 wz
02c94     24 00 90 AD |  if_e	jmp	#LR__0194
02c98     ED DE 01 F6 | 	mov	local05, local03
02c9c     EC E6 01 F6 | 	mov	local09, local02
02ca0     F1 E8 01 F6 | 	mov	local10, local07
02ca4     EF CC 01 F6 | 	mov	arg01, local05
02ca8     F3 CE 01 F6 | 	mov	arg02, local09
02cac     F4 D0 01 F6 | 	mov	arg03, local10
02cb0     08 FA BF FD | 	call	#_ff_cc_put_fat_0208
02cb4     D9 EA 01 F6 | 	mov	local11, result1
02cb8     F5 E4 01 F6 | 	mov	local08, local11
02cbc                 | LR__0194
02cbc     00 E4 0D F2 | 	cmp	local08, #0 wz
02cc0     50 00 90 5D |  if_ne	jmp	#LR__0196
02cc4     0C DA 05 F1 | 	add	local03, #12
02cc8     ED E2 61 FC | 	wrlong	local07, local03
02ccc     08 DA 05 F1 | 	add	local03, #8
02cd0     ED DE 01 FB | 	rdlong	local05, local03
02cd4     02 DE 85 F1 | 	sub	local05, #2
02cd8     04 DA 85 F1 | 	sub	local03, #4
02cdc     ED E8 01 FB | 	rdlong	local10, local03
02ce0     10 DA 85 F1 | 	sub	local03, #16
02ce4     EF E8 19 F2 | 	cmp	local10, local05 wcz
02ce8     14 00 90 1D |  if_a	jmp	#LR__0195
02cec     10 DA 05 F1 | 	add	local03, #16
02cf0     ED E8 01 FB | 	rdlong	local10, local03
02cf4     01 E8 85 F1 | 	sub	local10, #1
02cf8     ED E8 61 FC | 	wrlong	local10, local03
02cfc     10 DA 85 F1 | 	sub	local03, #16
02d00                 | LR__0195
02d00     04 DA 05 F1 | 	add	local03, #4
02d04     ED DE C1 FA | 	rdbyte	local05, local03
02d08     01 DE 45 F5 | 	or	local05, #1
02d0c     ED DE 41 FC | 	wrbyte	local05, local03
02d10     10 00 90 FD | 	jmp	#LR__0197
02d14                 | LR__0196
02d14     01 E4 0D F2 | 	cmp	local08, #1 wz
02d18     01 DE 65 A6 |  if_e	neg	local05, #1
02d1c     01 DE 05 56 |  if_ne	mov	local05, #1
02d20     EF E2 01 F6 | 	mov	local07, local05
02d24                 | LR__0197
02d24                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
02d24                 | ' 	}
02d24                 | ' 
02d24                 | ' 	return ncl;
02d24     F1 B2 01 F6 | 	mov	result1, local07
02d28                 | LR__0198
02d28     AF F0 03 F6 | 	mov	ptra, fp
02d2c     BA 00 A0 FD | 	call	#popregs_
02d30                 | _ff_cc_create_chain_0218_ret
02d30     2D 00 64 FD | 	ret
02d34                 | 
02d34                 | _ff_cc_dir_clear_0223
02d34     07 5A 05 F6 | 	mov	COUNT_, #7
02d38     B0 00 A0 FD | 	call	#pushregs_
02d3c     E6 D6 01 F6 | 	mov	local01, arg01
02d40     E7 D8 01 F6 | 	mov	local02, arg02
02d44     EB CC 01 F6 | 	mov	arg01, local01
02d48     98 F4 BF FD | 	call	#_ff_cc_sync_window_0194
02d4c     00 B2 0D F2 | 	cmp	result1, #0 wz
02d50     01 B2 05 56 |  if_ne	mov	result1, #1
02d54     AC 00 90 5D |  if_ne	jmp	#LR__0205
02d58     EB CC 01 F6 | 	mov	arg01, local01
02d5c     EC CE 01 F6 | 	mov	arg02, local02
02d60     50 F7 BF FD | 	call	#_ff_cc_clst2sect_0199
02d64     D9 DA 01 F6 | 	mov	local03, result1
02d68     2C D6 05 F1 | 	add	local01, #44
02d6c     EB DA 61 FC | 	wrlong	local03, local01
02d70     04 D6 05 F1 | 	add	local01, #4
02d74     EB CC 01 F6 | 	mov	arg01, local01
02d78     30 D6 85 F1 | 	sub	local01, #48
02d7c     00 CE 05 F6 | 	mov	arg02, #0
02d80     09 D0 C5 F9 | 	decod	arg03, #9
02d84                 | ' {
02d84                 | ' 	BYTE *d = (BYTE*)dst;
02d84                 | ' 
02d84                 | ' 	do {
02d84     84 D2 9F FE | 	loc	pa,	#(@LR__0201-@LR__0199)
02d88     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d8c                 | LR__0199
02d8c     E8 04 D8 FC | 	rep	@LR__0202, arg03
02d90                 | LR__0200
02d90     E6 CE 41 FC | 	wrbyte	arg02, arg01
02d94     01 CC 05 F1 | 	add	arg01, #1
02d98                 | LR__0201
02d98                 | LR__0202
02d98     30 D6 05 F1 | 	add	local01, #48
02d9c     EB DC 01 F6 | 	mov	local04, local01
02da0                 | ' #line 1698 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
02da0                 | ' 	{
02da0                 | ' 		ibuf = fs->win; szb = 1;
02da0                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
02da0     00 DE 05 F6 | 	mov	local05, #0
02da4     30 D6 85 F1 | 	sub	local01, #48
02da8                 | LR__0203
02da8     0A D6 05 F1 | 	add	local01, #10
02dac     EB E0 E1 FA | 	rdword	local06, local01
02db0     0A D6 85 F1 | 	sub	local01, #10
02db4     0F E0 45 F7 | 	zerox	local06, #15
02db8     F0 DE 19 F2 | 	cmp	local05, local06 wcz
02dbc     2C 00 90 3D |  if_ae	jmp	#LR__0204
02dc0     01 D6 05 F1 | 	add	local01, #1
02dc4     EB CC C1 FA | 	rdbyte	arg01, local01
02dc8     01 D6 85 F1 | 	sub	local01, #1
02dcc     EE CE 01 F6 | 	mov	arg02, local04
02dd0     ED D0 01 F6 | 	mov	arg03, local03
02dd4     EF D0 01 F1 | 	add	arg03, local05
02dd8     01 D2 05 F6 | 	mov	arg04, #1
02ddc     08 EF BF FD | 	call	#_ff_cc_disk_write
02de0     00 B2 0D F2 | 	cmp	result1, #0 wz
02de4     01 DE 05 A1 |  if_e	add	local05, #1
02de8     BC FF 9F AD |  if_e	jmp	#LR__0203
02dec                 | LR__0204
02dec                 | ' 	}
02dec                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
02dec     0A D6 05 F1 | 	add	local01, #10
02df0     EB E2 E1 FA | 	rdword	local07, local01
02df4     F1 DE 09 F2 | 	cmp	local05, local07 wz
02df8     00 E0 05 A6 |  if_e	mov	local06, #0
02dfc     01 E0 05 56 |  if_ne	mov	local06, #1
02e00     F0 B2 01 F6 | 	mov	result1, local06
02e04                 | LR__0205
02e04     AF F0 03 F6 | 	mov	ptra, fp
02e08     BA 00 A0 FD | 	call	#popregs_
02e0c                 | _ff_cc_dir_clear_0223_ret
02e0c     2D 00 64 FD | 	ret
02e10                 | 
02e10                 | _ff_cc_dir_sdi_0227
02e10     08 5A 05 F6 | 	mov	COUNT_, #8
02e14     B0 00 A0 FD | 	call	#pushregs_
02e18     E6 D6 01 F6 | 	mov	local01, arg01
02e1c     E7 D8 01 F6 | 	mov	local02, arg02
02e20     EB DA 01 FB | 	rdlong	local03, local01
02e24     00 10 00 FF 
02e28     00 D8 1D F2 | 	cmp	local02, ##2097152 wcz
02e2c     08 00 90 3D |  if_ae	jmp	#LR__0206
02e30     1F D8 CD F7 | 	test	local02, #31 wz
02e34     08 00 90 AD |  if_e	jmp	#LR__0207
02e38                 | LR__0206
02e38                 | ' 		return FR_INT_ERR;
02e38     02 B2 05 F6 | 	mov	result1, #2
02e3c     50 01 90 FD | 	jmp	#LR__0215
02e40                 | LR__0207
02e40     10 D6 05 F1 | 	add	local01, #16
02e44     EB D8 61 FC | 	wrlong	local02, local01
02e48     08 D6 85 F1 | 	sub	local01, #8
02e4c     EB DC 09 FB | 	rdlong	local04, local01 wz
02e50     08 D6 85 F1 | 	sub	local01, #8
02e54     1C 00 90 5D |  if_ne	jmp	#LR__0208
02e58     ED DE C1 FA | 	rdbyte	local05, local03
02e5c     03 DE 1D F2 | 	cmp	local05, #3 wcz
02e60     10 00 90 CD |  if_b	jmp	#LR__0208
02e64     24 DA 05 F1 | 	add	local03, #36
02e68     ED DE 01 FB | 	rdlong	local05, local03
02e6c     24 DA 85 F1 | 	sub	local03, #36
02e70     EF DC 01 F6 | 	mov	local04, local05
02e74                 | LR__0208
02e74     00 DC 0D F2 | 	cmp	local04, #0 wz
02e78     40 00 90 5D |  if_ne	jmp	#LR__0209
02e7c     EC DE 01 F6 | 	mov	local05, local02
02e80     05 DE 45 F0 | 	shr	local05, #5
02e84     08 DA 05 F1 | 	add	local03, #8
02e88     ED E0 E1 FA | 	rdword	local06, local03
02e8c     08 DA 85 F1 | 	sub	local03, #8
02e90     0F E0 45 F7 | 	zerox	local06, #15
02e94     F0 DE 19 F2 | 	cmp	local05, local06 wcz
02e98     02 B2 05 36 |  if_ae	mov	result1, #2
02e9c     F0 00 90 3D |  if_ae	jmp	#LR__0215
02ea0     24 DA 05 F1 | 	add	local03, #36
02ea4     ED DE 01 FB | 	rdlong	local05, local03
02ea8     24 DA 85 F1 | 	sub	local03, #36
02eac     18 D6 05 F1 | 	add	local01, #24
02eb0     EB DE 61 FC | 	wrlong	local05, local01
02eb4     18 D6 85 F1 | 	sub	local01, #24
02eb8     80 00 90 FD | 	jmp	#LR__0214
02ebc                 | LR__0209
02ebc     0A DA 05 F1 | 	add	local03, #10
02ec0     ED E2 E1 FA | 	rdword	local07, local03
02ec4     0A DA 85 F1 | 	sub	local03, #10
02ec8     0F E2 45 F7 | 	zerox	local07, #15
02ecc     09 E2 65 F0 | 	shl	local07, #9
02ed0                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
02ed0                 | ' 		while (ofs >= csz) {
02ed0                 | LR__0210
02ed0     F1 D8 19 F2 | 	cmp	local02, local07 wcz
02ed4     4C 00 90 CD |  if_b	jmp	#LR__0213
02ed8     EB CC 01 F6 | 	mov	arg01, local01
02edc     EE CE 01 F6 | 	mov	arg02, local04
02ee0     10 F6 BF FD | 	call	#_ff_cc_get_fat_0204
02ee4     D9 DC 01 F6 | 	mov	local04, result1
02ee8     FF FF 7F FF 
02eec     FF DD 0D F2 | 	cmp	local04, ##-1 wz
02ef0     01 B2 05 A6 |  if_e	mov	result1, #1
02ef4     98 00 90 AD |  if_e	jmp	#LR__0215
02ef8     02 DC 1D F2 | 	cmp	local04, #2 wcz
02efc     14 00 90 CD |  if_b	jmp	#LR__0211
02f00     14 DA 05 F1 | 	add	local03, #20
02f04     ED DE 01 FB | 	rdlong	local05, local03
02f08     14 DA 85 F1 | 	sub	local03, #20
02f0c     EF DC 19 F2 | 	cmp	local04, local05 wcz
02f10     08 00 90 CD |  if_b	jmp	#LR__0212
02f14                 | LR__0211
02f14     02 B2 05 F6 | 	mov	result1, #2
02f18     74 00 90 FD | 	jmp	#LR__0215
02f1c                 | LR__0212
02f1c     F1 D8 81 F1 | 	sub	local02, local07
02f20     AC FF 9F FD | 	jmp	#LR__0210
02f24                 | LR__0213
02f24     ED CC 01 F6 | 	mov	arg01, local03
02f28     EE CE 01 F6 | 	mov	arg02, local04
02f2c     84 F5 BF FD | 	call	#_ff_cc_clst2sect_0199
02f30     18 D6 05 F1 | 	add	local01, #24
02f34     EB B2 61 FC | 	wrlong	result1, local01
02f38     18 D6 85 F1 | 	sub	local01, #24
02f3c                 | LR__0214
02f3c     14 D6 05 F1 | 	add	local01, #20
02f40     EB DC 61 FC | 	wrlong	local04, local01
02f44     04 D6 05 F1 | 	add	local01, #4
02f48     EB DE 09 FB | 	rdlong	local05, local01 wz
02f4c     18 D6 85 F1 | 	sub	local01, #24
02f50     02 B2 05 A6 |  if_e	mov	result1, #2
02f54     38 00 90 AD |  if_e	jmp	#LR__0215
02f58     EC E0 01 F6 | 	mov	local06, local02
02f5c     09 E0 45 F0 | 	shr	local06, #9
02f60     18 D6 05 F1 | 	add	local01, #24
02f64     EB DE 01 FB | 	rdlong	local05, local01
02f68     F0 DE 01 F1 | 	add	local05, local06
02f6c     EB DE 61 FC | 	wrlong	local05, local01
02f70     30 DA 05 F1 | 	add	local03, #48
02f74     ED DE 01 F6 | 	mov	local05, local03
02f78     EC E4 01 F6 | 	mov	local08, local02
02f7c     FF E5 05 F5 | 	and	local08, #511
02f80     F2 DE 01 F1 | 	add	local05, local08
02f84     04 D6 05 F1 | 	add	local01, #4
02f88     EB DE 61 FC | 	wrlong	local05, local01
02f8c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
02f8c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
02f8c                 | ' 
02f8c                 | ' 	return FR_OK;
02f8c     00 B2 05 F6 | 	mov	result1, #0
02f90                 | LR__0215
02f90     AF F0 03 F6 | 	mov	ptra, fp
02f94     BA 00 A0 FD | 	call	#popregs_
02f98                 | _ff_cc_dir_sdi_0227_ret
02f98     2D 00 64 FD | 	ret
02f9c                 | 
02f9c                 | _ff_cc_dir_next_0231
02f9c     09 5A 05 F6 | 	mov	COUNT_, #9
02fa0     B0 00 A0 FD | 	call	#pushregs_
02fa4     E6 D6 01 F6 | 	mov	local01, arg01
02fa8     E7 D8 01 F6 | 	mov	local02, arg02
02fac     EB DA 01 FB | 	rdlong	local03, local01
02fb0     10 D6 05 F1 | 	add	local01, #16
02fb4     EB DC 01 FB | 	rdlong	local04, local01
02fb8     10 D6 85 F1 | 	sub	local01, #16
02fbc     20 DC 05 F1 | 	add	local04, #32
02fc0     00 10 00 FF 
02fc4     00 DC 1D F2 | 	cmp	local04, ##2097152 wcz
02fc8     18 D6 05 31 |  if_ae	add	local01, #24
02fcc     EB 00 68 3C |  if_ae	wrlong	#0, local01
02fd0     18 D6 85 31 |  if_ae	sub	local01, #24
02fd4     18 D6 05 F1 | 	add	local01, #24
02fd8     EB DE 09 FB | 	rdlong	local05, local01 wz
02fdc     18 D6 85 F1 | 	sub	local01, #24
02fe0     04 B2 05 A6 |  if_e	mov	result1, #4
02fe4     7C 01 90 AD |  if_e	jmp	#LR__0222
02fe8     FF DD CD F7 | 	test	local04, #511 wz
02fec     4C 01 90 5D |  if_ne	jmp	#LR__0221
02ff0     18 D6 05 F1 | 	add	local01, #24
02ff4     EB E0 01 FB | 	rdlong	local06, local01
02ff8     01 E0 05 F1 | 	add	local06, #1
02ffc     EB E0 61 FC | 	wrlong	local06, local01
03000     04 D6 85 F1 | 	sub	local01, #4
03004     EB DE 09 FB | 	rdlong	local05, local01 wz
03008     14 D6 85 F1 | 	sub	local01, #20
0300c     30 00 90 5D |  if_ne	jmp	#LR__0216
03010     EE DE 01 F6 | 	mov	local05, local04
03014     05 DE 45 F0 | 	shr	local05, #5
03018     08 DA 05 F1 | 	add	local03, #8
0301c     ED E2 E1 FA | 	rdword	local07, local03
03020     08 DA 85 F1 | 	sub	local03, #8
03024     0F E2 45 F7 | 	zerox	local07, #15
03028     F1 DE 19 F2 | 	cmp	local05, local07 wcz
0302c     0C 01 90 CD |  if_b	jmp	#LR__0220
03030     18 D6 05 F1 | 	add	local01, #24
03034     EB 00 68 FC | 	wrlong	#0, local01
03038                 | ' 				dp->sect = 0; return FR_NO_FILE;
03038     04 B2 05 F6 | 	mov	result1, #4
0303c     24 01 90 FD | 	jmp	#LR__0222
03040                 | LR__0216
03040     EE DE 01 F6 | 	mov	local05, local04
03044     09 DE 45 F0 | 	shr	local05, #9
03048     0A DA 05 F1 | 	add	local03, #10
0304c     ED E2 E1 FA | 	rdword	local07, local03
03050     0A DA 85 F1 | 	sub	local03, #10
03054     0F E2 45 F7 | 	zerox	local07, #15
03058     01 E2 85 F1 | 	sub	local07, #1
0305c     F1 DE C9 F7 | 	test	local05, local07 wz
03060     D8 00 90 5D |  if_ne	jmp	#LR__0219
03064     EB CC 01 F6 | 	mov	arg01, local01
03068     14 D6 05 F1 | 	add	local01, #20
0306c     EB CE 01 FB | 	rdlong	arg02, local01
03070     14 D6 85 F1 | 	sub	local01, #20
03074     7C F4 BF FD | 	call	#_ff_cc_get_fat_0204
03078     D9 E4 01 F6 | 	mov	local08, result1
0307c     01 E4 1D F2 | 	cmp	local08, #1 wcz
03080     02 B2 05 E6 |  if_be	mov	result1, #2
03084     DC 00 90 ED |  if_be	jmp	#LR__0222
03088     FF FF 7F FF 
0308c     FF E5 0D F2 | 	cmp	local08, ##-1 wz
03090     01 B2 05 A6 |  if_e	mov	result1, #1
03094     CC 00 90 AD |  if_e	jmp	#LR__0222
03098     14 DA 05 F1 | 	add	local03, #20
0309c     ED DE 01 FB | 	rdlong	local05, local03
030a0     14 DA 85 F1 | 	sub	local03, #20
030a4     EF E4 19 F2 | 	cmp	local08, local05 wcz
030a8     6C 00 90 CD |  if_b	jmp	#LR__0218
030ac     00 D8 0D F2 | 	cmp	local02, #0 wz
030b0     10 00 90 5D |  if_ne	jmp	#LR__0217
030b4     18 D6 05 F1 | 	add	local01, #24
030b8     EB 00 68 FC | 	wrlong	#0, local01
030bc                 | ' 						dp->sect = 0; return FR_NO_FILE;
030bc     04 B2 05 F6 | 	mov	result1, #4
030c0     A0 00 90 FD | 	jmp	#LR__0222
030c4                 | LR__0217
030c4     EB CC 01 F6 | 	mov	arg01, local01
030c8     14 D6 05 F1 | 	add	local01, #20
030cc     EB CE 01 FB | 	rdlong	arg02, local01
030d0     14 D6 85 F1 | 	sub	local01, #20
030d4     FC F9 BF FD | 	call	#_ff_cc_create_chain_0218
030d8     D9 E4 09 F6 | 	mov	local08, result1 wz
030dc     07 B2 05 A6 |  if_e	mov	result1, #7
030e0     80 00 90 AD |  if_e	jmp	#LR__0222
030e4     01 E4 0D F2 | 	cmp	local08, #1 wz
030e8     02 B2 05 A6 |  if_e	mov	result1, #2
030ec     74 00 90 AD |  if_e	jmp	#LR__0222
030f0     FF FF 7F FF 
030f4     FF E5 0D F2 | 	cmp	local08, ##-1 wz
030f8     01 B2 05 A6 |  if_e	mov	result1, #1
030fc     64 00 90 AD |  if_e	jmp	#LR__0222
03100     ED CC 01 F6 | 	mov	arg01, local03
03104     F2 CE 01 F6 | 	mov	arg02, local08
03108     28 FC BF FD | 	call	#_ff_cc_dir_clear_0223
0310c     00 B2 0D F2 | 	cmp	result1, #0 wz
03110     01 B2 05 56 |  if_ne	mov	result1, #1
03114     4C 00 90 5D |  if_ne	jmp	#LR__0222
03118                 | LR__0218
03118     14 D6 05 F1 | 	add	local01, #20
0311c     EB E4 61 FC | 	wrlong	local08, local01
03120     14 D6 85 F1 | 	sub	local01, #20
03124     ED CC 01 F6 | 	mov	arg01, local03
03128     F2 CE 01 F6 | 	mov	arg02, local08
0312c     84 F3 BF FD | 	call	#_ff_cc_clst2sect_0199
03130     18 D6 05 F1 | 	add	local01, #24
03134     EB B2 61 FC | 	wrlong	result1, local01
03138     18 D6 85 F1 | 	sub	local01, #24
0313c                 | LR__0219
0313c                 | LR__0220
0313c                 | LR__0221
0313c     10 D6 05 F1 | 	add	local01, #16
03140     EB DC 61 FC | 	wrlong	local04, local01
03144     30 DA 05 F1 | 	add	local03, #48
03148     ED DE 01 F6 | 	mov	local05, local03
0314c     EE E6 01 F6 | 	mov	local09, local04
03150     FF E7 05 F5 | 	and	local09, #511
03154     F3 DE 01 F1 | 	add	local05, local09
03158     0C D6 05 F1 | 	add	local01, #12
0315c     EB DE 61 FC | 	wrlong	local05, local01
03160                 | ' #line 1802 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
03160                 | ' 				}
03160                 | ' 				dp->clust = clst;
03160                 | ' 				dp->sect = clst2sect(fs, clst);
03160                 | ' 			}
03160                 | ' 		}
03160                 | ' 	}
03160                 | ' 	dp->dptr = ofs;
03160                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
03160                 | ' 
03160                 | ' 	return FR_OK;
03160     00 B2 05 F6 | 	mov	result1, #0
03164                 | LR__0222
03164     AF F0 03 F6 | 	mov	ptra, fp
03168     BA 00 A0 FD | 	call	#popregs_
0316c                 | _ff_cc_dir_next_0231_ret
0316c     2D 00 64 FD | 	ret
03170                 | 
03170                 | _ff_cc_dir_alloc_0235
03170     0B 5A 05 F6 | 	mov	COUNT_, #11
03174     B0 00 A0 FD | 	call	#pushregs_
03178     E6 D6 01 F6 | 	mov	local01, arg01
0317c     E7 D8 01 F6 | 	mov	local02, arg02
03180     EB DA 01 FB | 	rdlong	local03, local01
03184     EB CC 01 F6 | 	mov	arg01, local01
03188     00 CE 05 F6 | 	mov	arg02, #0
0318c     80 FC BF FD | 	call	#_ff_cc_dir_sdi_0227
03190     D9 DC 09 F6 | 	mov	local04, result1 wz
03194     88 00 90 5D |  if_ne	jmp	#LR__0228
03198     00 DE 05 F6 | 	mov	local05, #0
0319c                 | ' 		n = 0;
0319c                 | ' 		do {
0319c                 | LR__0223
0319c     ED CC 01 F6 | 	mov	arg01, local03
031a0     18 D6 05 F1 | 	add	local01, #24
031a4     EB CE 01 FB | 	rdlong	arg02, local01
031a8     18 D6 85 F1 | 	sub	local01, #24
031ac     0C F1 BF FD | 	call	#_ff_cc_move_window_0196
031b0     D9 E0 01 F6 | 	mov	local06, result1
031b4     F0 DC 09 F6 | 	mov	local04, local06 wz
031b8     64 00 90 5D |  if_ne	jmp	#LR__0227
031bc     1C D6 05 F1 | 	add	local01, #28
031c0     EB E2 01 FB | 	rdlong	local07, local01
031c4     1C D6 85 F1 | 	sub	local01, #28
031c8     F1 E4 C1 FA | 	rdbyte	local08, local07
031cc     E5 E4 0D F2 | 	cmp	local08, #229 wz
031d0     18 00 90 AD |  if_e	jmp	#LR__0224
031d4     1C D6 05 F1 | 	add	local01, #28
031d8     EB E6 01 FB | 	rdlong	local09, local01
031dc     1C D6 85 F1 | 	sub	local01, #28
031e0     F3 E8 01 F6 | 	mov	local10, local09
031e4     F4 E0 C9 FA | 	rdbyte	local06, local10 wz
031e8     10 00 90 5D |  if_ne	jmp	#LR__0225
031ec                 | LR__0224
031ec     01 DE 05 F1 | 	add	local05, #1
031f0     EC DE 09 F2 | 	cmp	local05, local02 wz
031f4     28 00 90 AD |  if_e	jmp	#LR__0227
031f8     04 00 90 FD | 	jmp	#LR__0226
031fc                 | LR__0225
031fc     00 DE 05 F6 | 	mov	local05, #0
03200                 | LR__0226
03200     EB E4 01 F6 | 	mov	local08, local01
03204     01 E2 05 F6 | 	mov	local07, #1
03208     F2 CC 01 F6 | 	mov	arg01, local08
0320c     01 CE 05 F6 | 	mov	arg02, #1
03210     88 FD BF FD | 	call	#_ff_cc_dir_next_0231
03214     D9 EA 01 F6 | 	mov	local11, result1
03218     F5 DC 09 F6 | 	mov	local04, local11 wz
0321c     7C FF 9F AD |  if_e	jmp	#LR__0223
03220                 | LR__0227
03220                 | LR__0228
03220     04 DC 0D F2 | 	cmp	local04, #4 wz
03224     07 DC 05 A6 |  if_e	mov	local04, #7
03228                 | ' 	return res;
03228     EE B2 01 F6 | 	mov	result1, local04
0322c     AF F0 03 F6 | 	mov	ptra, fp
03230     BA 00 A0 FD | 	call	#popregs_
03234                 | _ff_cc_dir_alloc_0235_ret
03234     2D 00 64 FD | 	ret
03238                 | 
03238                 | _ff_cc_ld_clust_0237
03238     04 5A 05 F6 | 	mov	COUNT_, #4
0323c     B0 00 A0 FD | 	call	#pushregs_
03240     E6 D6 01 F6 | 	mov	local01, arg01
03244     E7 D8 01 F6 | 	mov	local02, arg02
03248     EC CC 01 F6 | 	mov	arg01, local02
0324c     1A CC 05 F1 | 	add	arg01, #26
03250     4C EE BF FD | 	call	#_ff_cc_ld_word_0176
03254     D9 DA 01 F6 | 	mov	local03, result1
03258     0F DA 45 F7 | 	zerox	local03, #15
0325c     EB DC C1 FA | 	rdbyte	local04, local01
03260     03 DC 0D F2 | 	cmp	local04, #3 wz
03264     18 00 90 5D |  if_ne	jmp	#LR__0229
03268     14 D8 05 F1 | 	add	local02, #20
0326c     EC CC 01 F6 | 	mov	arg01, local02
03270     2C EE BF FD | 	call	#_ff_cc_ld_word_0176
03274     0F B2 45 F7 | 	zerox	result1, #15
03278     10 B2 65 F0 | 	shl	result1, #16
0327c     D9 DA 41 F5 | 	or	local03, result1
03280                 | LR__0229
03280                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
03280                 | ' 	}
03280                 | ' 
03280                 | ' 	return cl;
03280     ED B2 01 F6 | 	mov	result1, local03
03284     AF F0 03 F6 | 	mov	ptra, fp
03288     BA 00 A0 FD | 	call	#popregs_
0328c                 | _ff_cc_ld_clust_0237_ret
0328c     2D 00 64 FD | 	ret
03290                 | 
03290                 | _ff_cc_st_clust_0238
03290     04 5A 05 F6 | 	mov	COUNT_, #4
03294     B0 00 A0 FD | 	call	#pushregs_
03298     E6 D6 01 F6 | 	mov	local01, arg01
0329c     E7 D8 01 F6 | 	mov	local02, arg02
032a0     E8 DA 01 F6 | 	mov	local03, arg03
032a4     EC CC 01 F6 | 	mov	arg01, local02
032a8     1A CC 05 F1 | 	add	arg01, #26
032ac     ED CE 01 F6 | 	mov	arg02, local03
032b0     50 EE BF FD | 	call	#_ff_cc_st_word_0179
032b4     EB DC C1 FA | 	rdbyte	local04, local01
032b8     03 DC 0D F2 | 	cmp	local04, #3 wz
032bc     14 00 90 5D |  if_ne	jmp	#LR__0230
032c0     14 D8 05 F1 | 	add	local02, #20
032c4     10 DA 45 F0 | 	shr	local03, #16
032c8     EC CC 01 F6 | 	mov	arg01, local02
032cc     ED CE 01 F6 | 	mov	arg02, local03
032d0     30 EE BF FD | 	call	#_ff_cc_st_word_0179
032d4                 | LR__0230
032d4     AF F0 03 F6 | 	mov	ptra, fp
032d8     BA 00 A0 FD | 	call	#popregs_
032dc                 | _ff_cc_st_clust_0238_ret
032dc     2D 00 64 FD | 	ret
032e0                 | 
032e0                 | _ff_cc_dir_read_0243
032e0     0B 5A 05 F6 | 	mov	COUNT_, #11
032e4     B0 00 A0 FD | 	call	#pushregs_
032e8     E6 D6 01 F6 | 	mov	local01, arg01
032ec     E7 D8 01 F6 | 	mov	local02, arg02
032f0     04 DA 05 F6 | 	mov	local03, #4
032f4     EB DC 01 FB | 	rdlong	local04, local01
032f8                 | ' )
032f8                 | ' {
032f8                 | ' 	FRESULT res = FR_NO_FILE;
032f8                 | ' 	FATFS *fs = dp->obj.fs;
032f8                 | ' 	BYTE attr, b;
032f8                 | ' #line 2376 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
032f8                 | ' 	while (dp->sect) {
032f8                 | LR__0231
032f8     18 D6 05 F1 | 	add	local01, #24
032fc     EB DE 09 FB | 	rdlong	local05, local01 wz
03300     18 D6 85 F1 | 	sub	local01, #24
03304     C0 00 90 AD |  if_e	jmp	#LR__0233
03308     EE CC 01 F6 | 	mov	arg01, local04
0330c     18 D6 05 F1 | 	add	local01, #24
03310     EB CE 01 FB | 	rdlong	arg02, local01
03314     18 D6 85 F1 | 	sub	local01, #24
03318     A0 EF BF FD | 	call	#_ff_cc_move_window_0196
0331c     D9 DA 09 F6 | 	mov	local03, result1 wz
03320     A4 00 90 5D |  if_ne	jmp	#LR__0233
03324     1C D6 05 F1 | 	add	local01, #28
03328     EB DE 01 FB | 	rdlong	local05, local01
0332c     1C D6 85 F1 | 	sub	local01, #28
03330     EF E0 C1 FA | 	rdbyte	local06, local05
03334     F0 DE 01 F6 | 	mov	local05, local06
03338     07 DE 4D F7 | 	zerox	local05, #7 wz
0333c     04 DA 05 A6 |  if_e	mov	local03, #4
03340                 | ' 			res = FR_NO_FILE; break;
03340     84 00 90 AD |  if_e	jmp	#LR__0233
03344     1C D6 05 F1 | 	add	local01, #28
03348     EB E2 01 FB | 	rdlong	local07, local01
0334c     0B E2 05 F1 | 	add	local07, #11
03350     F1 E4 C1 FA | 	rdbyte	local08, local07
03354     3F E4 05 F5 | 	and	local08, #63
03358     16 D6 85 F1 | 	sub	local01, #22
0335c     EB E4 41 FC | 	wrbyte	local08, local01
03360     06 D6 85 F1 | 	sub	local01, #6
03364     F0 DE 01 F6 | 	mov	local05, local06
03368     07 DE 45 F7 | 	zerox	local05, #7
0336c     E5 DE 0D F2 | 	cmp	local05, #229 wz
03370     40 00 90 AD |  if_e	jmp	#LR__0232
03374     F0 E2 01 F6 | 	mov	local07, local06
03378     07 E2 45 F7 | 	zerox	local07, #7
0337c     2E E2 0D F2 | 	cmp	local07, #46 wz
03380     30 00 90 AD |  if_e	jmp	#LR__0232
03384     F2 E6 01 F6 | 	mov	local09, local08
03388     07 E6 45 F7 | 	zerox	local09, #7
0338c     0F E6 0D F2 | 	cmp	local09, #15 wz
03390     20 00 90 AD |  if_e	jmp	#LR__0232
03394     00 E8 05 F6 | 	mov	local10, #0
03398     F2 EA 01 F6 | 	mov	local11, local08
0339c     07 EA 45 F7 | 	zerox	local11, #7
033a0     20 EA 25 F5 | 	andn	local11, #32
033a4     08 EA 0D F2 | 	cmp	local11, #8 wz
033a8     01 E8 05 A6 |  if_e	mov	local10, #1
033ac     EC E8 09 F2 | 	cmp	local10, local02 wz
033b0                 | ' 				break;
033b0     14 00 90 AD |  if_e	jmp	#LR__0233
033b4                 | LR__0232
033b4     EB CC 01 F6 | 	mov	arg01, local01
033b8     00 CE 05 F6 | 	mov	arg02, #0
033bc     DC FB BF FD | 	call	#_ff_cc_dir_next_0231
033c0     D9 DA 09 F6 | 	mov	local03, result1 wz
033c4     30 FF 9F AD |  if_e	jmp	#LR__0231
033c8                 | LR__0233
033c8     00 DA 0D F2 | 	cmp	local03, #0 wz
033cc     18 D6 05 51 |  if_ne	add	local01, #24
033d0     EB 00 68 5C |  if_ne	wrlong	#0, local01
033d4                 | ' 	return res;
033d4     ED B2 01 F6 | 	mov	result1, local03
033d8     AF F0 03 F6 | 	mov	ptra, fp
033dc     BA 00 A0 FD | 	call	#popregs_
033e0                 | _ff_cc_dir_read_0243_ret
033e0     2D 00 64 FD | 	ret
033e4                 | 
033e4                 | _ff_cc_dir_find_0247
033e4     0E 5A 05 F6 | 	mov	COUNT_, #14
033e8     B0 00 A0 FD | 	call	#pushregs_
033ec     E6 D6 01 F6 | 	mov	local01, arg01
033f0     EB D8 01 FB | 	rdlong	local02, local01
033f4     EB CC 01 F6 | 	mov	arg01, local01
033f8     00 CE 05 F6 | 	mov	arg02, #0
033fc     10 FA BF FD | 	call	#_ff_cc_dir_sdi_0227
03400     00 B2 0D F2 | 	cmp	result1, #0 wz
03404     D8 00 90 5D |  if_ne	jmp	#LR__0237
03408                 | ' #line 2479 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
03408                 | ' 	do {
03408                 | LR__0234
03408     EC CC 01 F6 | 	mov	arg01, local02
0340c     18 D6 05 F1 | 	add	local01, #24
03410     EB CE 01 FB | 	rdlong	arg02, local01
03414     18 D6 85 F1 | 	sub	local01, #24
03418     A0 EE BF FD | 	call	#_ff_cc_move_window_0196
0341c     D9 DA 09 F6 | 	mov	local03, result1 wz
03420     B8 00 90 5D |  if_ne	jmp	#LR__0236
03424     1C D6 05 F1 | 	add	local01, #28
03428     EB DC 01 FB | 	rdlong	local04, local01
0342c     1C D6 85 F1 | 	sub	local01, #28
03430     EE DE C1 FA | 	rdbyte	local05, local04
03434     EF DC 01 F6 | 	mov	local04, local05
03438     07 DC 4D F7 | 	zerox	local04, #7 wz
0343c     04 DA 05 A6 |  if_e	mov	local03, #4
03440     98 00 90 AD |  if_e	jmp	#LR__0236
03444     1C D6 05 F1 | 	add	local01, #28
03448     EB E0 01 FB | 	rdlong	local06, local01
0344c     0B E0 05 F1 | 	add	local06, #11
03450     F0 DC C1 FA | 	rdbyte	local04, local06
03454     3F DC 05 F5 | 	and	local04, #63
03458     16 D6 85 F1 | 	sub	local01, #22
0345c     EB DC 41 FC | 	wrbyte	local04, local01
03460     16 D6 05 F1 | 	add	local01, #22
03464     EB E0 01 FB | 	rdlong	local06, local01
03468     1C D6 85 F1 | 	sub	local01, #28
0346c     0B E0 05 F1 | 	add	local06, #11
03470     F0 E2 C1 FA | 	rdbyte	local07, local06
03474     F1 DC 01 F6 | 	mov	local04, local07
03478     07 DC 45 F7 | 	zerox	local04, #7
0347c     08 DC CD F7 | 	test	local04, #8 wz
03480     38 00 90 5D |  if_ne	jmp	#LR__0235
03484     1C D6 05 F1 | 	add	local01, #28
03488     EB E4 01 FB | 	rdlong	local08, local01
0348c     F2 E6 01 F6 | 	mov	local09, local08
03490     04 D6 05 F1 | 	add	local01, #4
03494     EB E8 01 F6 | 	mov	local10, local01
03498     F4 EA 01 F6 | 	mov	local11, local10
0349c     0B EC 05 F6 | 	mov	local12, #11
034a0     F3 CC 01 F6 | 	mov	arg01, local09
034a4     F5 CE 01 F6 | 	mov	arg02, local11
034a8     0B D0 05 F6 | 	mov	arg03, #11
034ac     20 D6 85 F1 | 	sub	local01, #32
034b0     D0 EC BF FD | 	call	#_ff_cc_mem_cmp_0189
034b4     D9 EE 09 F6 | 	mov	local13, result1 wz
034b8     20 00 90 AD |  if_e	jmp	#LR__0236
034bc                 | LR__0235
034bc     EB DC 01 F6 | 	mov	local04, local01
034c0     00 E0 05 F6 | 	mov	local06, #0
034c4     EE CC 01 F6 | 	mov	arg01, local04
034c8     00 CE 05 F6 | 	mov	arg02, #0
034cc     CC FA BF FD | 	call	#_ff_cc_dir_next_0231
034d0     D9 F0 01 F6 | 	mov	local14, result1
034d4     F8 DA 09 F6 | 	mov	local03, local14 wz
034d8     2C FF 9F AD |  if_e	jmp	#LR__0234
034dc                 | LR__0236
034dc                 | ' 
034dc                 | ' 	return res;
034dc     ED B2 01 F6 | 	mov	result1, local03
034e0                 | LR__0237
034e0     AF F0 03 F6 | 	mov	ptra, fp
034e4     BA 00 A0 FD | 	call	#popregs_
034e8                 | _ff_cc_dir_find_0247_ret
034e8     2D 00 64 FD | 	ret
034ec                 | 
034ec                 | _ff_cc_dir_register_0250
034ec     03 5A 05 F6 | 	mov	COUNT_, #3
034f0     B0 00 A0 FD | 	call	#pushregs_
034f4     E6 D6 01 F6 | 	mov	local01, arg01
034f8     EB D8 01 FB | 	rdlong	local02, local01
034fc     EB CC 01 F6 | 	mov	arg01, local01
03500     01 CE 05 F6 | 	mov	arg02, #1
03504     68 FC BF FD | 	call	#_ff_cc_dir_alloc_0235
03508     D9 DA 09 F6 | 	mov	local03, result1 wz
0350c     60 00 90 5D |  if_ne	jmp	#LR__0243
03510     18 D6 05 F1 | 	add	local01, #24
03514     EB CE 01 FB | 	rdlong	arg02, local01
03518     18 D6 85 F1 | 	sub	local01, #24
0351c     EC CC 01 F6 | 	mov	arg01, local02
03520     98 ED BF FD | 	call	#_ff_cc_move_window_0196
03524     D9 DA 09 F6 | 	mov	local03, result1 wz
03528     44 00 90 5D |  if_ne	jmp	#LR__0242
0352c     1C D6 05 F1 | 	add	local01, #28
03530     EB CC 01 FB | 	rdlong	arg01, local01
03534     1C D6 85 F1 | 	sub	local01, #28
03538     00 CE 05 F6 | 	mov	arg02, #0
0353c                 | ' {
0353c                 | ' 	BYTE *d = (BYTE*)dst;
0353c                 | ' 
0353c                 | ' 	do {
0353c     CC CA 9F FE | 	loc	pa,	#(@LR__0240-@LR__0238)
03540     93 00 A0 FD | 	call	#FCACHE_LOAD_
03544                 | LR__0238
03544     20 04 DC FC | 	rep	@LR__0241, #32
03548                 | LR__0239
03548     E6 CE 41 FC | 	wrbyte	arg02, arg01
0354c     01 CC 05 F1 | 	add	arg01, #1
03550                 | LR__0240
03550                 | LR__0241
03550     1C D6 05 F1 | 	add	local01, #28
03554     EB CC 01 FB | 	rdlong	arg01, local01
03558     04 D6 05 F1 | 	add	local01, #4
0355c     EB CE 01 F6 | 	mov	arg02, local01
03560     0B D0 05 F6 | 	mov	arg03, #11
03564     EC EB BF FD | 	call	#_ff_cc_mem_cpy_0183
03568     03 D8 05 F1 | 	add	local02, #3
0356c     EC 02 48 FC | 	wrbyte	#1, local02
03570                 | LR__0242
03570                 | LR__0243
03570                 | ' 			mem_set(dp->dir, 0,  32 );
03570                 | ' 			mem_cpy(dp->dir +  0 , dp->fn, 11);
03570                 | ' #line 2613 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
03570                 | ' 			fs->wflag = 1;
03570                 | ' 		}
03570                 | ' 	}
03570                 | ' 
03570                 | ' 	return res;
03570     ED B2 01 F6 | 	mov	result1, local03
03574     AF F0 03 F6 | 	mov	ptra, fp
03578     BA 00 A0 FD | 	call	#popregs_
0357c                 | _ff_cc_dir_register_0250_ret
0357c     2D 00 64 FD | 	ret
03580                 | 
03580                 | _ff_cc_dir_remove_0253
03580     04 5A 05 F6 | 	mov	COUNT_, #4
03584     B0 00 A0 FD | 	call	#pushregs_
03588     E6 D6 01 F6 | 	mov	local01, arg01
0358c     EB D8 01 FB | 	rdlong	local02, local01
03590     18 D6 05 F1 | 	add	local01, #24
03594     EB CE 01 FB | 	rdlong	arg02, local01
03598     18 D6 85 F1 | 	sub	local01, #24
0359c     EC CC 01 F6 | 	mov	arg01, local02
035a0     18 ED BF FD | 	call	#_ff_cc_move_window_0196
035a4     D9 DA 09 F6 | 	mov	local03, result1 wz
035a8     14 00 90 5D |  if_ne	jmp	#LR__0244
035ac     1C D6 05 F1 | 	add	local01, #28
035b0     EB DC 01 FB | 	rdlong	local04, local01
035b4     EE CA 49 FC | 	wrbyte	#229, local04
035b8     03 D8 05 F1 | 	add	local02, #3
035bc     EC 02 48 FC | 	wrbyte	#1, local02
035c0                 | LR__0244
035c0                 | ' 		dp->dir[ 0 ] =  0xE5 ;
035c0                 | ' 		fs->wflag = 1;
035c0                 | ' 	}
035c0                 | ' 
035c0                 | ' 
035c0                 | ' 	return res;
035c0     ED B2 01 F6 | 	mov	result1, local03
035c4     AF F0 03 F6 | 	mov	ptra, fp
035c8     BA 00 A0 FD | 	call	#popregs_
035cc                 | _ff_cc_dir_remove_0253_ret
035cc     2D 00 64 FD | 	ret
035d0                 | 
035d0                 | _ff_cc_get_fileinfo_0257
035d0     0B 5A 05 F6 | 	mov	COUNT_, #11
035d4     B0 00 A0 FD | 	call	#pushregs_
035d8     E6 D6 01 F6 | 	mov	local01, arg01
035dc     E7 D8 01 F6 | 	mov	local02, arg02
035e0     0C D8 05 F1 | 	add	local02, #12
035e4     EC 00 48 FC | 	wrbyte	#0, local02
035e8     0C D8 85 F1 | 	sub	local02, #12
035ec     18 D6 05 F1 | 	add	local01, #24
035f0     EB DA 01 FB | 	rdlong	local03, local01
035f4     18 D6 85 F1 | 	sub	local01, #24
035f8     ED DC 09 F6 | 	mov	local04, local03 wz
035fc     00 01 90 AD |  if_e	jmp	#LR__0248
03600     00 DE 05 F6 | 	mov	local05, #0
03604     00 E0 05 F6 | 	mov	local06, #0
03608                 | ' #line 2755 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
03608                 | ' 	si = di = 0;
03608                 | ' 	while (si < 11) {
03608                 | LR__0245
03608     0B E0 1D F2 | 	cmp	local06, #11 wcz
0360c     78 00 90 3D |  if_ae	jmp	#LR__0247
03610     1C D6 05 F1 | 	add	local01, #28
03614     EB E2 01 FB | 	rdlong	local07, local01
03618     1C D6 85 F1 | 	sub	local01, #28
0361c     F0 E4 01 F6 | 	mov	local08, local06
03620     F1 E4 01 F1 | 	add	local08, local07
03624     F2 E6 C1 FA | 	rdbyte	local09, local08
03628     F3 DC 01 F6 | 	mov	local04, local09
0362c     07 DC 45 F7 | 	zerox	local04, #7
03630     20 DC 0D F2 | 	cmp	local04, #32 wz
03634     01 E0 05 F1 | 	add	local06, #1
03638     CC FF 9F AD |  if_e	jmp	#LR__0245
0363c     F3 DC 01 F6 | 	mov	local04, local09
03640     07 DC 45 F7 | 	zerox	local04, #7
03644     05 DC 0D F2 | 	cmp	local04, #5 wz
03648     E5 E6 05 A6 |  if_e	mov	local09, #229
0364c     09 E0 0D F2 | 	cmp	local06, #9 wz
03650     18 00 90 5D |  if_ne	jmp	#LR__0246
03654     EF E8 01 F6 | 	mov	local10, local05
03658     0C D8 05 F1 | 	add	local02, #12
0365c     EC E8 01 F1 | 	add	local10, local02
03660     F4 5C 48 FC | 	wrbyte	#46, local10
03664     01 DE 05 F1 | 	add	local05, #1
03668     0C D8 85 F1 | 	sub	local02, #12
0366c                 | LR__0246
0366c     EF E8 01 F6 | 	mov	local10, local05
03670     0C D8 05 F1 | 	add	local02, #12
03674     EC E8 01 F1 | 	add	local10, local02
03678     F4 E6 41 FC | 	wrbyte	local09, local10
0367c     01 DE 05 F1 | 	add	local05, #1
03680     0C D8 85 F1 | 	sub	local02, #12
03684     80 FF 9F FD | 	jmp	#LR__0245
03688                 | LR__0247
03688     0C D8 05 F1 | 	add	local02, #12
0368c     EC DE 01 F1 | 	add	local05, local02
03690     EF 00 48 FC | 	wrbyte	#0, local05
03694     1C D6 05 F1 | 	add	local01, #28
03698     EB DC 01 FB | 	rdlong	local04, local01
0369c     0B DC 05 F1 | 	add	local04, #11
036a0     EE E8 C1 FA | 	rdbyte	local10, local04
036a4     04 D8 85 F1 | 	sub	local02, #4
036a8     EC E8 41 FC | 	wrbyte	local10, local02
036ac     08 D8 85 F1 | 	sub	local02, #8
036b0     EB CC 01 FB | 	rdlong	arg01, local01
036b4     1C D6 85 F1 | 	sub	local01, #28
036b8     1C CC 05 F1 | 	add	arg01, #28
036bc     04 EA BF FD | 	call	#_ff_cc_ld_dword_0178
036c0     EC B2 61 FC | 	wrlong	result1, local02
036c4     1C D6 05 F1 | 	add	local01, #28
036c8     EB CC 01 FB | 	rdlong	arg01, local01
036cc     1C D6 85 F1 | 	sub	local01, #28
036d0     16 CC 05 F1 | 	add	arg01, #22
036d4     C8 E9 BF FD | 	call	#_ff_cc_ld_word_0176
036d8     D9 EA 01 F6 | 	mov	local11, result1
036dc     06 D8 05 F1 | 	add	local02, #6
036e0     EC EA 51 FC | 	wrword	local11, local02
036e4     06 D8 85 F1 | 	sub	local02, #6
036e8     1C D6 05 F1 | 	add	local01, #28
036ec     EB CC 01 FB | 	rdlong	arg01, local01
036f0     18 CC 05 F1 | 	add	arg01, #24
036f4     A8 E9 BF FD | 	call	#_ff_cc_ld_word_0176
036f8     04 D8 05 F1 | 	add	local02, #4
036fc     EC B2 51 FC | 	wrword	result1, local02
03700                 | LR__0248
03700     AF F0 03 F6 | 	mov	ptra, fp
03704     BA 00 A0 FD | 	call	#popregs_
03708                 | _ff_cc_get_fileinfo_0257_ret
03708     2D 00 64 FD | 	ret
0370c                 | 
0370c                 | _ff_cc_create_name_0265
0370c     0E 5A 05 F6 | 	mov	COUNT_, #14
03710     B0 00 A0 FD | 	call	#pushregs_
03714     E6 D6 01 F6 | 	mov	local01, arg01
03718     E7 D8 01 F6 | 	mov	local02, arg02
0371c     EC DA 01 FB | 	rdlong	local03, local02
03720     20 D6 05 F1 | 	add	local01, #32
03724     EB DC 01 F6 | 	mov	local04, local01
03728     EE CC 01 F6 | 	mov	arg01, local04
0372c     20 CE 05 F6 | 	mov	arg02, #32
03730     0B D0 05 F6 | 	mov	arg03, #11
03734     20 D6 85 F1 | 	sub	local01, #32
03738                 | ' {
03738                 | ' 	BYTE *d = (BYTE*)dst;
03738                 | ' 
03738                 | ' 	do {
03738     D0 C8 9F FE | 	loc	pa,	#(@LR__0251-@LR__0249)
0373c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03740                 | LR__0249
03740     0B 04 DC FC | 	rep	@LR__0252, #11
03744                 | LR__0250
03744     E6 CE 41 FC | 	wrbyte	arg02, arg01
03748     01 CC 05 F1 | 	add	arg01, #1
0374c                 | LR__0251
0374c                 | LR__0252
0374c     00 DE 05 F6 | 	mov	local05, #0
03750     00 E0 05 F6 | 	mov	local06, #0
03754     08 E2 05 F6 | 	mov	local07, #8
03758                 | ' 
03758                 | ' 
03758                 | ' 	p = *path; sfn = dp->fn;
03758                 | ' 	mem_set(sfn, ' ', 11);
03758                 | ' 	si = i = 0; ni = 8;
03758                 | ' #line 3011 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
03758                 | ' 	for (;;) {
03758                 | LR__0253
03758     F0 E4 01 F6 | 	mov	local08, local06
0375c     ED E4 01 F1 | 	add	local08, local03
03760     F2 E6 C1 FA | 	rdbyte	local09, local08
03764     F3 E8 01 F6 | 	mov	local10, local09
03768     07 E8 45 F7 | 	zerox	local10, #7
0376c     20 E8 1D F2 | 	cmp	local10, #32 wcz
03770     01 E0 05 F1 | 	add	local06, #1
03774     A4 01 90 ED |  if_be	jmp	#LR__0267
03778     F3 E8 01 F6 | 	mov	local10, local09
0377c     07 E8 45 F7 | 	zerox	local10, #7
03780     2F E8 0D F2 | 	cmp	local10, #47 wz
03784     10 00 90 AD |  if_e	jmp	#LR__0254
03788     F3 EA 01 F6 | 	mov	local11, local09
0378c     07 EA 45 F7 | 	zerox	local11, #7
03790     5C EA 0D F2 | 	cmp	local11, #92 wz
03794     30 00 90 5D |  if_ne	jmp	#LR__0257
03798                 | LR__0254
03798                 | ' 			while (p[si] == '/' || p[si] == '\\') si++;
03798                 | LR__0255
03798     F0 EA 01 F6 | 	mov	local11, local06
0379c     ED EA 01 F1 | 	add	local11, local03
037a0     F5 E8 C1 FA | 	rdbyte	local10, local11
037a4     2F E8 0D F2 | 	cmp	local10, #47 wz
037a8     14 00 90 AD |  if_e	jmp	#LR__0256
037ac     F0 EC 01 F6 | 	mov	local12, local06
037b0     ED EC 01 F1 | 	add	local12, local03
037b4     F6 EE C1 FA | 	rdbyte	local13, local12
037b8     5C EE 0D F2 | 	cmp	local13, #92 wz
037bc     5C 01 90 5D |  if_ne	jmp	#LR__0267
037c0                 | LR__0256
037c0     01 E0 05 F1 | 	add	local06, #1
037c4     D0 FF 9F FD | 	jmp	#LR__0255
037c8                 | ' 			break;
037c8                 | LR__0257
037c8     F3 E8 01 F6 | 	mov	local10, local09
037cc     07 E8 45 F7 | 	zerox	local10, #7
037d0     2E E8 0D F2 | 	cmp	local10, #46 wz
037d4     08 00 90 AD |  if_e	jmp	#LR__0258
037d8     F1 DE 19 F2 | 	cmp	local05, local07 wcz
037dc     28 00 90 CD |  if_b	jmp	#LR__0261
037e0                 | LR__0258
037e0     0B E2 0D F2 | 	cmp	local07, #11 wz
037e4     0C 00 90 AD |  if_e	jmp	#LR__0259
037e8     07 E6 45 F7 | 	zerox	local09, #7
037ec     2E E6 0D F2 | 	cmp	local09, #46 wz
037f0     08 00 90 AD |  if_e	jmp	#LR__0260
037f4                 | LR__0259
037f4     06 B2 05 F6 | 	mov	result1, #6
037f8     60 01 90 FD | 	jmp	#LR__0268
037fc                 | LR__0260
037fc     08 DE 05 F6 | 	mov	local05, #8
03800     0B E2 05 F6 | 	mov	local07, #11
03804                 | ' 			i = 8; ni = 11;
03804                 | ' 			continue;
03804     50 FF 9F FD | 	jmp	#LR__0253
03808                 | LR__0261
03808     F3 E8 01 F6 | 	mov	local10, local09
0380c     07 E8 45 F7 | 	zerox	local10, #7
03810     80 E8 1D F2 | 	cmp	local10, #128 wcz
03814     18 00 90 CD |  if_b	jmp	#LR__0262
03818     07 E6 45 F7 | 	zerox	local09, #7
0381c     7F E6 05 F5 | 	and	local09, #127
03820     06 AE 05 F1 | 	add	ptr__ff_cc_dat__, #6
03824     D7 E6 01 F1 | 	add	local09, ptr__ff_cc_dat__
03828     F3 E6 C1 FA | 	rdbyte	local09, local09
0382c     06 AE 85 F1 | 	sub	ptr__ff_cc_dat__, #6
03830                 | LR__0262
03830     F3 CC 01 F6 | 	mov	arg01, local09
03834     07 CC 4D F7 | 	zerox	arg01, #7 wz
03838     00 B2 05 56 |  if_ne	mov	result1, #0
0383c                 | ' 
0383c                 | ' 	return 0;
0383c     00 B2 05 A6 |  if_e	mov	result1, #0
03840     00 B2 0D F2 | 	cmp	result1, #0 wz
03844     68 00 90 AD |  if_e	jmp	#LR__0265
03848     F0 E4 01 F6 | 	mov	local08, local06
0384c     ED EE 01 F6 | 	mov	local13, local03
03850     ED E4 01 F1 | 	add	local08, local03
03854     F2 F0 C1 FA | 	rdbyte	local14, local08
03858     F8 CC 01 F6 | 	mov	arg01, local14
0385c     01 E0 05 F1 | 	add	local06, #1
03860     07 CC 4D F7 | 	zerox	arg01, #7 wz
03864     00 B2 05 56 |  if_ne	mov	result1, #0
03868                 | ' 
03868                 | ' 	return 0;
03868     00 B2 05 A6 |  if_e	mov	result1, #0
0386c     D9 EA 09 F6 | 	mov	local11, result1 wz
03870     10 00 90 AD |  if_e	jmp	#LR__0263
03874     F1 E4 01 F6 | 	mov	local08, local07
03878     01 E4 85 F1 | 	sub	local08, #1
0387c     F2 DE 19 F2 | 	cmp	local05, local08 wcz
03880     08 00 90 CD |  if_b	jmp	#LR__0264
03884                 | LR__0263
03884     06 B2 05 F6 | 	mov	result1, #6
03888     D0 00 90 FD | 	jmp	#LR__0268
0388c                 | LR__0264
0388c     EF E4 01 F6 | 	mov	local08, local05
03890     EE E4 01 F1 | 	add	local08, local04
03894     F2 E6 41 FC | 	wrbyte	local09, local08
03898     01 DE 05 F1 | 	add	local05, #1
0389c     EF E4 01 F6 | 	mov	local08, local05
038a0     EE E4 01 F1 | 	add	local08, local04
038a4     F2 F0 41 FC | 	wrbyte	local14, local08
038a8     01 DE 05 F1 | 	add	local05, #1
038ac     A8 FE 9F FD | 	jmp	#LR__0253
038b0                 | LR__0265
038b0     4D 00 00 FF 
038b4     A4 CD 05 F6 | 	mov	arg01, ##@LR__0678
038b8     F3 E4 01 F6 | 	mov	local08, local09
038bc     07 E4 45 F7 | 	zerox	local08, #7
038c0     F2 EE 01 F6 | 	mov	local13, local08
038c4     F7 CE 01 F6 | 	mov	arg02, local13
038c8     F0 E8 BF FD | 	call	#_ff_cc_chk_chr_0190
038cc     D9 EC 09 F6 | 	mov	local12, result1 wz
038d0     06 B2 05 56 |  if_ne	mov	result1, #6
038d4     84 00 90 5D |  if_ne	jmp	#LR__0268
038d8     F3 E8 01 F6 | 	mov	local10, local09
038dc     07 E8 45 F7 | 	zerox	local10, #7
038e0     61 E8 1D F2 | 	cmp	local10, #97 wcz
038e4     20 00 90 CD |  if_b	jmp	#LR__0266
038e8     F3 EA 01 F6 | 	mov	local11, local09
038ec     07 EA 45 F7 | 	zerox	local11, #7
038f0     7A EA 1D F2 | 	cmp	local11, #122 wcz
038f4     10 00 90 1D |  if_a	jmp	#LR__0266
038f8     F3 E8 01 F6 | 	mov	local10, local09
038fc     07 E8 45 F7 | 	zerox	local10, #7
03900     20 E8 85 F1 | 	sub	local10, #32
03904     F4 E6 01 F6 | 	mov	local09, local10
03908                 | LR__0266
03908     EF E4 01 F6 | 	mov	local08, local05
0390c     EE E4 01 F1 | 	add	local08, local04
03910     F2 E6 41 FC | 	wrbyte	local09, local08
03914     01 DE 05 F1 | 	add	local05, #1
03918     3C FE 9F FD | 	jmp	#LR__0253
0391c                 | LR__0267
0391c     F0 DA 01 F1 | 	add	local03, local06
03920     EC DA 61 FC | 	wrlong	local03, local02
03924     00 DE 0D F2 | 	cmp	local05, #0 wz
03928     06 B2 05 A6 |  if_e	mov	result1, #6
0392c     2C 00 90 AD |  if_e	jmp	#LR__0268
03930     EE E8 C1 FA | 	rdbyte	local10, local04
03934     E5 E8 0D F2 | 	cmp	local10, #229 wz
03938     EE 0A 48 AC |  if_e	wrbyte	#5, local04
0393c     F3 EA 01 F6 | 	mov	local11, local09
03940     07 EA 45 F7 | 	zerox	local11, #7
03944     20 EA 1D F2 | 	cmp	local11, #32 wcz
03948     04 E8 05 E6 |  if_be	mov	local10, #4
0394c     00 E8 05 16 |  if_a	mov	local10, #0
03950     0B DC 05 F1 | 	add	local04, #11
03954     EE E8 41 FC | 	wrbyte	local10, local04
03958                 | ' 	sfn[ 11 ] = (c <= ' ') ?  0x04  : 0;
03958                 | ' 
03958                 | ' 	return FR_OK;
03958     00 B2 05 F6 | 	mov	result1, #0
0395c                 | LR__0268
0395c     AF F0 03 F6 | 	mov	ptra, fp
03960     BA 00 A0 FD | 	call	#popregs_
03964                 | _ff_cc_create_name_0265_ret
03964     2D 00 64 FD | 	ret
03968                 | 
03968                 | _ff_cc_follow_path_0269
03968     07 5A 05 F6 | 	mov	COUNT_, #7
0396c     B0 00 A0 FD | 	call	#pushregs_
03970     18 F0 07 F1 | 	add	ptra, #24
03974     04 5E 05 F1 | 	add	fp, #4
03978     AF CC 61 FC | 	wrlong	arg01, fp
0397c     04 5E 05 F1 | 	add	fp, #4
03980     AF CE 61 FC | 	wrlong	arg02, fp
03984     04 5E 85 F1 | 	sub	fp, #4
03988     AF D6 01 FB | 	rdlong	local01, fp
0398c     EB D8 01 FB | 	rdlong	local02, local01
03990     10 5E 05 F1 | 	add	fp, #16
03994     AF D8 61 FC | 	wrlong	local02, fp
03998     14 5E 85 F1 | 	sub	fp, #20
0399c     A8 C6 9F FE | 	loc	pa,	#(@LR__0271-@LR__0269)
039a0     93 00 A0 FD | 	call	#FCACHE_LOAD_
039a4                 | ' )
039a4                 | ' {
039a4                 | ' 	FRESULT res;
039a4                 | ' 	BYTE ns;
039a4                 | ' 	FATFS *fs = dp->obj.fs;
039a4                 | ' #line 3075 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
039a4                 | ' 	{
039a4                 | ' 		while (*path == '/' || *path == '\\') path++;
039a4                 | LR__0269
039a4     08 5E 05 F1 | 	add	fp, #8
039a8     AF DA 01 FB | 	rdlong	local03, fp
039ac     08 5E 85 F1 | 	sub	fp, #8
039b0     ED D6 C1 FA | 	rdbyte	local01, local03
039b4     2F D6 0D F2 | 	cmp	local01, #47 wz
039b8     18 00 90 AD |  if_e	jmp	#LR__0270
039bc     08 5E 05 F1 | 	add	fp, #8
039c0     AF DC 01 FB | 	rdlong	local04, fp
039c4     08 5E 85 F1 | 	sub	fp, #8
039c8     EE DE C1 FA | 	rdbyte	local05, local04
039cc     5C DE 0D F2 | 	cmp	local05, #92 wz
039d0     18 00 90 5D |  if_ne	jmp	#LR__0272
039d4                 | LR__0270
039d4     08 5E 05 F1 | 	add	fp, #8
039d8     AF D8 01 FB | 	rdlong	local02, fp
039dc     01 D8 05 F1 | 	add	local02, #1
039e0     AF D8 61 FC | 	wrlong	local02, fp
039e4     08 5E 85 F1 | 	sub	fp, #8
039e8     B8 FF 9F FD | 	jmp	#LR__0269
039ec                 | LR__0271
039ec                 | LR__0272
039ec     04 5E 05 F1 | 	add	fp, #4
039f0     AF D6 01 FB | 	rdlong	local01, fp
039f4     08 D6 05 F1 | 	add	local01, #8
039f8     EB 00 68 FC | 	wrlong	#0, local01
039fc     04 5E 05 F1 | 	add	fp, #4
03a00     AF DA 01 FB | 	rdlong	local03, fp
03a04     08 5E 85 F1 | 	sub	fp, #8
03a08     ED D6 C1 FA | 	rdbyte	local01, local03
03a0c     20 D6 1D F2 | 	cmp	local01, #32 wcz
03a10     30 00 90 3D |  if_ae	jmp	#LR__0273
03a14     04 5E 05 F1 | 	add	fp, #4
03a18     AF D6 01 FB | 	rdlong	local01, fp
03a1c     2B D6 05 F1 | 	add	local01, #43
03a20     EB 00 49 FC | 	wrbyte	#128, local01
03a24     AF CC 01 FB | 	rdlong	arg01, fp
03a28     04 5E 85 F1 | 	sub	fp, #4
03a2c     00 CE 05 F6 | 	mov	arg02, #0
03a30     DC F3 BF FD | 	call	#_ff_cc_dir_sdi_0227
03a34     0C 5E 05 F1 | 	add	fp, #12
03a38     AF B2 61 FC | 	wrlong	result1, fp
03a3c     0C 5E 85 F1 | 	sub	fp, #12
03a40     30 01 90 FD | 	jmp	#LR__0278
03a44                 | LR__0273
03a44                 | ' 		for (;;) {
03a44                 | LR__0274
03a44     04 5E 05 F1 | 	add	fp, #4
03a48     AF CC 01 FB | 	rdlong	arg01, fp
03a4c     04 5E 05 F1 | 	add	fp, #4
03a50     AF CE 01 F6 | 	mov	arg02, fp
03a54     08 5E 85 F1 | 	sub	fp, #8
03a58     B0 FC BF FD | 	call	#_ff_cc_create_name_0265
03a5c     D9 DC 01 F6 | 	mov	local04, result1
03a60     0C 5E 05 F1 | 	add	fp, #12
03a64     AF DC 61 FC | 	wrlong	local04, fp
03a68     AF D6 09 FB | 	rdlong	local01, fp wz
03a6c     0C 5E 85 F1 | 	sub	fp, #12
03a70     00 01 90 5D |  if_ne	jmp	#LR__0277
03a74     04 5E 05 F1 | 	add	fp, #4
03a78     AF CC 01 FB | 	rdlong	arg01, fp
03a7c     04 5E 85 F1 | 	sub	fp, #4
03a80     60 F9 BF FD | 	call	#_ff_cc_dir_find_0247
03a84     0C 5E 05 F1 | 	add	fp, #12
03a88     AF B2 61 FC | 	wrlong	result1, fp
03a8c     08 5E 85 F1 | 	sub	fp, #8
03a90     AF D6 01 FB | 	rdlong	local01, fp
03a94     2B D6 05 F1 | 	add	local01, #43
03a98     EB D8 C1 FA | 	rdbyte	local02, local01
03a9c     0C 5E 05 F1 | 	add	fp, #12
03aa0     AF D8 41 FC | 	wrbyte	local02, fp
03aa4     04 5E 85 F1 | 	sub	fp, #4
03aa8     AF D6 09 FB | 	rdlong	local01, fp wz
03aac     0C 5E 85 F1 | 	sub	fp, #12
03ab0     38 00 90 AD |  if_e	jmp	#LR__0275
03ab4     0C 5E 05 F1 | 	add	fp, #12
03ab8     AF D6 01 FB | 	rdlong	local01, fp
03abc     0C 5E 85 F1 | 	sub	fp, #12
03ac0     04 D6 0D F2 | 	cmp	local01, #4 wz
03ac4     AC 00 90 5D |  if_ne	jmp	#LR__0277
03ac8     10 5E 05 F1 | 	add	fp, #16
03acc     AF D6 C1 FA | 	rdbyte	local01, fp
03ad0     10 5E 85 F1 | 	sub	fp, #16
03ad4     07 D6 45 F7 | 	zerox	local01, #7
03ad8     04 D6 CD F7 | 	test	local01, #4 wz
03adc     0C 5E 05 A1 |  if_e	add	fp, #12
03ae0     AF 0A 68 AC |  if_e	wrlong	#5, fp
03ae4     0C 5E 85 A1 |  if_e	sub	fp, #12
03ae8                 | ' 					}
03ae8                 | ' 				}
03ae8                 | ' 				break;
03ae8     88 00 90 FD | 	jmp	#LR__0277
03aec                 | LR__0275
03aec     10 5E 05 F1 | 	add	fp, #16
03af0     AF D6 C1 FA | 	rdbyte	local01, fp
03af4     10 5E 85 F1 | 	sub	fp, #16
03af8     07 D6 45 F7 | 	zerox	local01, #7
03afc     04 D6 CD F7 | 	test	local01, #4 wz
03b00     70 00 90 5D |  if_ne	jmp	#LR__0277
03b04     04 5E 05 F1 | 	add	fp, #4
03b08     AF DA 01 FB | 	rdlong	local03, fp
03b0c     04 5E 85 F1 | 	sub	fp, #4
03b10     06 DA 05 F1 | 	add	local03, #6
03b14     ED D6 C1 FA | 	rdbyte	local01, local03
03b18     10 D6 CD F7 | 	test	local01, #16 wz
03b1c     10 00 90 5D |  if_ne	jmp	#LR__0276
03b20     0C 5E 05 F1 | 	add	fp, #12
03b24     AF 0A 68 FC | 	wrlong	#5, fp
03b28     0C 5E 85 F1 | 	sub	fp, #12
03b2c                 | ' 				res = FR_NO_PATH; break;
03b2c     44 00 90 FD | 	jmp	#LR__0277
03b30                 | LR__0276
03b30     04 5E 05 F1 | 	add	fp, #4
03b34     AF D6 01 FB | 	rdlong	local01, fp
03b38     10 5E 05 F1 | 	add	fp, #16
03b3c     AF CC 01 FB | 	rdlong	arg01, fp
03b40     E6 CE 01 F6 | 	mov	arg02, arg01
03b44     30 CE 05 F1 | 	add	arg02, #48
03b48     10 5E 85 F1 | 	sub	fp, #16
03b4c     AF E0 01 FB | 	rdlong	local06, fp
03b50     04 5E 85 F1 | 	sub	fp, #4
03b54     10 E0 05 F1 | 	add	local06, #16
03b58     F0 E2 01 FB | 	rdlong	local07, local06
03b5c     FF E3 05 F5 | 	and	local07, #511
03b60     F1 CE 01 F1 | 	add	arg02, local07
03b64     D0 F6 BF FD | 	call	#_ff_cc_ld_clust_0237
03b68     08 D6 05 F1 | 	add	local01, #8
03b6c     EB B2 61 FC | 	wrlong	result1, local01
03b70     D0 FE 9F FD | 	jmp	#LR__0274
03b74                 | LR__0277
03b74                 | LR__0278
03b74                 | ' 			}
03b74                 | ' #line 3131 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
03b74                 | ' 			{
03b74                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
03b74                 | ' 			}
03b74                 | ' 		}
03b74                 | ' 	}
03b74                 | ' 
03b74                 | ' 	return res;
03b74     0C 5E 05 F1 | 	add	fp, #12
03b78     AF B2 01 FB | 	rdlong	result1, fp
03b7c     0C 5E 85 F1 | 	sub	fp, #12
03b80     AF F0 03 F6 | 	mov	ptra, fp
03b84     BA 00 A0 FD | 	call	#popregs_
03b88                 | _ff_cc_follow_path_0269_ret
03b88     2D 00 64 FD | 	ret
03b8c                 | 
03b8c                 | _ff_cc_get_ldnumber_0275
03b8c     E6 B6 01 F6 | 	mov	_var01, arg01
03b90     01 B8 65 F6 | 	neg	_var02, #1
03b94     DB BA 09 FB | 	rdlong	_var03, _var01 wz
03b98     DD BC 01 F6 | 	mov	_var04, _var03
03b9c     01 B2 65 A6 |  if_e	neg	result1, #1
03ba0     8C 00 90 AD |  if_e	jmp	#_ff_cc_get_ldnumber_0275_ret
03ba4     80 C4 9F FE | 	loc	pa,	#(@LR__0280-@LR__0279)
03ba8     93 00 A0 FD | 	call	#FCACHE_LOAD_
03bac                 | ' 	do tc = *tt++; while ((UINT)tc >= ( 0  ? ' ' : '!') && tc != ':');
03bac                 | LR__0279
03bac     DE BE C1 FA | 	rdbyte	_var05, _var04
03bb0     DF C0 01 F6 | 	mov	_var06, _var05
03bb4     07 C0 45 F7 | 	zerox	_var06, #7
03bb8     21 C0 1D F2 | 	cmp	_var06, #33 wcz
03bbc     01 BC 05 F1 | 	add	_var04, #1
03bc0     10 00 90 CD |  if_b	jmp	#LR__0281
03bc4     DF C2 01 F6 | 	mov	_var07, _var05
03bc8     07 C2 45 F7 | 	zerox	_var07, #7
03bcc     3A C2 0D F2 | 	cmp	_var07, #58 wz
03bd0     D8 FF 9F 5D |  if_ne	jmp	#LR__0279
03bd4                 | LR__0280
03bd4                 | LR__0281
03bd4     DF C0 01 F6 | 	mov	_var06, _var05
03bd8     07 C0 45 F7 | 	zerox	_var06, #7
03bdc     3A C0 0D F2 | 	cmp	_var06, #58 wz
03be0     48 00 90 5D |  if_ne	jmp	#LR__0283
03be4     01 C4 05 F6 | 	mov	_var08, #1
03be8     DD C0 C1 FA | 	rdbyte	_var06, _var03
03bec     30 C0 1D F2 | 	cmp	_var06, #48 wcz
03bf0     24 00 90 CD |  if_b	jmp	#LR__0282
03bf4     DD C2 C1 FA | 	rdbyte	_var07, _var03
03bf8     39 C2 1D F2 | 	cmp	_var07, #57 wcz
03bfc     18 00 90 1D |  if_a	jmp	#LR__0282
03c00     DD C6 01 F6 | 	mov	_var09, _var03
03c04     02 C6 05 F1 | 	add	_var09, #2
03c08     DE C6 09 F2 | 	cmp	_var09, _var04 wz
03c0c     DD C0 C1 AA |  if_e	rdbyte	_var06, _var03
03c10     30 C0 85 A1 |  if_e	sub	_var06, #48
03c14     E0 C4 01 A6 |  if_e	mov	_var08, _var06
03c18                 | LR__0282
03c18     01 C4 5D F2 | 	cmps	_var08, #1 wcz
03c1c     E2 B8 01 C6 |  if_b	mov	_var02, _var08
03c20     DB BC 61 CC |  if_b	wrlong	_var04, _var01
03c24                 | ' 			vol = i;
03c24                 | ' 			*path = tt;
03c24                 | ' 		}
03c24                 | ' 		return vol;
03c24     DC B2 01 F6 | 	mov	result1, _var02
03c28     04 00 90 FD | 	jmp	#_ff_cc_get_ldnumber_0275_ret
03c2c                 | LR__0283
03c2c                 | ' 	}
03c2c                 | ' #line 3209 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
03c2c                 | ' 	vol = 0;
03c2c                 | ' 
03c2c                 | ' 	return vol;
03c2c     00 B2 05 F6 | 	mov	result1, #0
03c30                 | _ff_cc_get_ldnumber_0275_ret
03c30     2D 00 64 FD | 	ret
03c34                 | 
03c34                 | _ff_cc_check_fs_0276
03c34     08 5A 05 F6 | 	mov	COUNT_, #8
03c38     B0 00 A0 FD | 	call	#pushregs_
03c3c     E6 D6 01 F6 | 	mov	local01, arg01
03c40     E7 D8 01 F6 | 	mov	local02, arg02
03c44     03 D6 05 F1 | 	add	local01, #3
03c48     EB 00 48 FC | 	wrbyte	#0, local01
03c4c     29 D6 05 F1 | 	add	local01, #41
03c50     FF FF FF FF 
03c54     EB FE 6B FC | 	wrlong	##-1, local01
03c58     2C D6 85 F1 | 	sub	local01, #44
03c5c     EB CC 01 F6 | 	mov	arg01, local01
03c60     EC CE 01 F6 | 	mov	arg02, local02
03c64     54 E6 BF FD | 	call	#_ff_cc_move_window_0196
03c68     00 B2 0D F2 | 	cmp	result1, #0 wz
03c6c     04 B2 05 56 |  if_ne	mov	result1, #4
03c70     D8 00 90 5D |  if_ne	jmp	#LR__0286
03c74     30 D6 05 F1 | 	add	local01, #48
03c78     EB CC 01 F6 | 	mov	arg01, local01
03c7c     FE CD 05 F1 | 	add	arg01, #510
03c80     30 D6 85 F1 | 	sub	local01, #48
03c84     18 E4 BF FD | 	call	#_ff_cc_ld_word_0176
03c88     D9 DA 01 F6 | 	mov	local03, result1
03c8c     0F DA 45 F7 | 	zerox	local03, #15
03c90     55 00 00 FF 
03c94     55 DA 0D F2 | 	cmp	local03, ##43605 wz
03c98     03 B2 05 56 |  if_ne	mov	result1, #3
03c9c     AC 00 90 5D |  if_ne	jmp	#LR__0286
03ca0     30 D6 05 F1 | 	add	local01, #48
03ca4     EB DC C1 FA | 	rdbyte	local04, local01
03ca8     30 D6 85 F1 | 	sub	local01, #48
03cac     EE DA 01 F6 | 	mov	local03, local04
03cb0     07 DA 45 F7 | 	zerox	local03, #7
03cb4     E9 DA 0D F2 | 	cmp	local03, #233 wz
03cb8     38 00 90 AD |  if_e	jmp	#LR__0284
03cbc     30 D6 05 F1 | 	add	local01, #48
03cc0     EB DE C1 FA | 	rdbyte	local05, local01
03cc4     30 D6 85 F1 | 	sub	local01, #48
03cc8     EF E0 01 F6 | 	mov	local06, local05
03ccc     07 E0 45 F7 | 	zerox	local06, #7
03cd0     EB E0 0D F2 | 	cmp	local06, #235 wz
03cd4     1C 00 90 AD |  if_e	jmp	#LR__0284
03cd8     30 D6 05 F1 | 	add	local01, #48
03cdc     EB E2 C1 FA | 	rdbyte	local07, local01
03ce0     30 D6 85 F1 | 	sub	local01, #48
03ce4     F1 E4 01 F6 | 	mov	local08, local07
03ce8     07 E4 45 F7 | 	zerox	local08, #7
03cec     E8 E4 0D F2 | 	cmp	local08, #232 wz
03cf0     54 00 90 5D |  if_ne	jmp	#LR__0285
03cf4                 | LR__0284
03cf4     30 D6 05 F1 | 	add	local01, #48
03cf8     EB CC 01 F6 | 	mov	arg01, local01
03cfc     30 D6 85 F1 | 	sub	local01, #48
03d00     36 CC 05 F1 | 	add	arg01, #54
03d04     4D 00 00 FF 
03d08     BF CF 05 F6 | 	mov	arg02, ##@LR__0680
03d0c     03 D0 05 F6 | 	mov	arg03, #3
03d10     70 E4 BF FD | 	call	#_ff_cc_mem_cmp_0189
03d14     00 B2 0D F2 | 	cmp	result1, #0 wz
03d18     00 B2 05 A6 |  if_e	mov	result1, #0
03d1c     2C 00 90 AD |  if_e	jmp	#LR__0286
03d20     30 D6 05 F1 | 	add	local01, #48
03d24     EB CC 01 F6 | 	mov	arg01, local01
03d28     52 CC 05 F1 | 	add	arg01, #82
03d2c     4D 00 00 FF 
03d30     C3 CF 05 F6 | 	mov	arg02, ##@LR__0681
03d34     05 D0 05 F6 | 	mov	arg03, #5
03d38     48 E4 BF FD | 	call	#_ff_cc_mem_cmp_0189
03d3c     00 B2 0D F2 | 	cmp	result1, #0 wz
03d40     00 B2 05 A6 |  if_e	mov	result1, #0
03d44     04 00 90 AD |  if_e	jmp	#LR__0286
03d48                 | LR__0285
03d48                 | ' 	}
03d48                 | ' 	return 2;
03d48     02 B2 05 F6 | 	mov	result1, #2
03d4c                 | LR__0286
03d4c     AF F0 03 F6 | 	mov	ptra, fp
03d50     BA 00 A0 FD | 	call	#popregs_
03d54                 | _ff_cc_check_fs_0276_ret
03d54     2D 00 64 FD | 	ret
03d58                 | 
03d58                 | _ff_cc_find_volume_0280
03d58     0D 5A 05 F6 | 	mov	COUNT_, #13
03d5c     B0 00 A0 FD | 	call	#pushregs_
03d60     24 F0 07 F1 | 	add	ptra, #36
03d64     E6 D6 01 F6 | 	mov	local01, arg01
03d68     E7 D8 01 F6 | 	mov	local02, arg02
03d6c     EB DA 01 F6 | 	mov	local03, local01
03d70     ED CC 01 F6 | 	mov	arg01, local03
03d74     00 CE 05 F6 | 	mov	arg02, #0
03d78     B8 FE BF FD | 	call	#_ff_cc_check_fs_0276
03d7c     D9 DC 01 F6 | 	mov	local04, result1
03d80     02 DC 0D F2 | 	cmp	local04, #2 wz
03d84     18 00 90 AD |  if_e	jmp	#LR__0288
03d88     03 DC 1D F2 | 	cmp	local04, #3 wcz
03d8c     08 00 90 3D |  if_ae	jmp	#LR__0287
03d90     00 D8 0D F2 | 	cmp	local02, #0 wz
03d94     08 00 90 5D |  if_ne	jmp	#LR__0288
03d98                 | LR__0287
03d98     EE B2 01 F6 | 	mov	result1, local04
03d9c     F8 00 90 FD | 	jmp	#LR__0295
03da0                 | LR__0288
03da0                 | ' 	for (i = 0; i < 4; i++) {
03da0     00 DE 05 F6 | 	mov	local05, #0
03da4                 | LR__0289
03da4     04 DE 1D F2 | 	cmp	local05, #4 wcz
03da8     50 00 90 3D |  if_ae	jmp	#LR__0290
03dac     EF DA 01 F6 | 	mov	local03, local05
03db0     02 DA 65 F0 | 	shl	local03, #2
03db4     14 5E 05 F1 | 	add	fp, #20
03db8     AF DA 01 F1 | 	add	local03, fp
03dbc     30 D6 05 F1 | 	add	local01, #48
03dc0     EB E0 01 F6 | 	mov	local06, local01
03dc4     BE E1 05 F1 | 	add	local06, #446
03dc8     EF E2 01 F6 | 	mov	local07, local05
03dcc     04 E2 65 F0 | 	shl	local07, #4
03dd0     F1 E4 01 F6 | 	mov	local08, local07
03dd4     F1 E0 01 F1 | 	add	local06, local07
03dd8     08 E0 05 F1 | 	add	local06, #8
03ddc     F0 CC 01 F6 | 	mov	arg01, local06
03de0     14 5E 85 F1 | 	sub	fp, #20
03de4     30 D6 85 F1 | 	sub	local01, #48
03de8     D8 E2 BF FD | 	call	#_ff_cc_ld_dword_0178
03dec     D9 E6 01 F6 | 	mov	local09, result1
03df0     ED E6 61 FC | 	wrlong	local09, local03
03df4     01 DE 05 F1 | 	add	local05, #1
03df8     A8 FF 9F FD | 	jmp	#LR__0289
03dfc                 | LR__0290
03dfc     00 D8 0D F2 | 	cmp	local02, #0 wz
03e00     EC DA 01 56 |  if_ne	mov	local03, local02
03e04     01 DA 85 51 |  if_ne	sub	local03, #1
03e08     00 DA 05 A6 |  if_e	mov	local03, #0
03e0c     ED DE 01 F6 | 	mov	local05, local03
03e10                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
03e10                 | ' 	}
03e10                 | ' 	i = part ? part - 1 : 0;
03e10                 | ' 	do {
03e10                 | LR__0291
03e10     EF E8 01 F6 | 	mov	local10, local05
03e14     02 E8 65 F0 | 	shl	local10, #2
03e18     14 5E 05 F1 | 	add	fp, #20
03e1c     AF EA 01 F6 | 	mov	local11, fp
03e20     AF E8 01 F1 | 	add	local10, fp
03e24     F4 EC 09 FB | 	rdlong	local12, local10 wz
03e28     14 5E 85 F1 | 	sub	fp, #20
03e2c     38 00 90 AD |  if_e	jmp	#LR__0292
03e30     EB E2 01 F6 | 	mov	local07, local01
03e34     EF E4 01 F6 | 	mov	local08, local05
03e38     02 E4 65 F0 | 	shl	local08, #2
03e3c     14 5E 05 F1 | 	add	fp, #20
03e40     AF E0 01 F6 | 	mov	local06, fp
03e44     AF E4 01 F1 | 	add	local08, fp
03e48     F2 E6 01 FB | 	rdlong	local09, local08
03e4c     F1 CC 01 F6 | 	mov	arg01, local07
03e50     F3 CE 01 F6 | 	mov	arg02, local09
03e54     14 5E 85 F1 | 	sub	fp, #20
03e58     D8 FD BF FD | 	call	#_ff_cc_check_fs_0276
03e5c     D9 EE 01 F6 | 	mov	local13, result1
03e60     F7 DA 01 F6 | 	mov	local03, local13
03e64     04 00 90 FD | 	jmp	#LR__0293
03e68                 | LR__0292
03e68     03 DA 05 F6 | 	mov	local03, #3
03e6c                 | LR__0293
03e6c     ED DC 01 F6 | 	mov	local04, local03
03e70     00 D8 0D F2 | 	cmp	local02, #0 wz
03e74     1C 00 90 5D |  if_ne	jmp	#LR__0294
03e78     02 DC 1D F2 | 	cmp	local04, #2 wcz
03e7c     14 00 90 CD |  if_b	jmp	#LR__0294
03e80     EF DA 01 F6 | 	mov	local03, local05
03e84     01 DA 05 F1 | 	add	local03, #1
03e88     ED DE 01 F6 | 	mov	local05, local03
03e8c     04 DE 1D F2 | 	cmp	local05, #4 wcz
03e90     7C FF 9F CD |  if_b	jmp	#LR__0291
03e94                 | LR__0294
03e94                 | ' 	return fmt;
03e94     EE B2 01 F6 | 	mov	result1, local04
03e98                 | LR__0295
03e98     AF F0 03 F6 | 	mov	ptra, fp
03e9c     BA 00 A0 FD | 	call	#popregs_
03ea0                 | _ff_cc_find_volume_0280_ret
03ea0     2D 00 64 FD | 	ret
03ea4                 | 
03ea4                 | _ff_cc_mount_volume_0292
03ea4     1B 5A 05 F6 | 	mov	COUNT_, #27
03ea8     B0 00 A0 FD | 	call	#pushregs_
03eac     E6 D6 01 F6 | 	mov	local01, arg01
03eb0     E7 D8 01 F6 | 	mov	local02, arg02
03eb4     E8 DA 01 F6 | 	mov	local03, arg03
03eb8     EC 00 68 FC | 	wrlong	#0, local02
03ebc     EB CC 01 F6 | 	mov	arg01, local01
03ec0     C8 FC BF FD | 	call	#_ff_cc_get_ldnumber_0275
03ec4     D9 DC 01 F6 | 	mov	local04, result1
03ec8     00 DC 5D F2 | 	cmps	local04, #0 wcz
03ecc     0B B2 05 C6 |  if_b	mov	result1, #11
03ed0     04 06 90 CD |  if_b	jmp	#LR__0311
03ed4     EE DE 01 F6 | 	mov	local05, local04
03ed8     02 DE 65 F0 | 	shl	local05, #2
03edc     D7 DE 01 F1 | 	add	local05, ptr__ff_cc_dat__
03ee0     EF E0 09 FB | 	rdlong	local06, local05 wz
03ee4     0C B2 05 A6 |  if_e	mov	result1, #12
03ee8     EC 05 90 AD |  if_e	jmp	#LR__0311
03eec     EC E0 61 FC | 	wrlong	local06, local02
03ef0     07 DA 45 F7 | 	zerox	local03, #7
03ef4     FE DA 05 F5 | 	and	local03, #254
03ef8     F0 DE C9 FA | 	rdbyte	local05, local06 wz
03efc     4C 00 90 AD |  if_e	jmp	#LR__0298
03f00     01 E0 05 F1 | 	add	local06, #1
03f04     F0 CC C9 FA | 	rdbyte	arg01, local06 wz
03f08     01 E0 85 F1 | 	sub	local06, #1
03f0c     01 B2 05 56 |  if_ne	mov	result1, #1
03f10                 | ' 
03f10                 | ' 	return Stat;
03f10     88 AF 05 A1 |  if_e	add	ptr__ff_cc_dat__, #392
03f14     D7 B2 C1 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
03f18     88 AF 85 A1 |  if_e	sub	ptr__ff_cc_dat__, #392
03f1c     D9 DE 01 F6 | 	mov	local05, result1
03f20     07 DE 45 F7 | 	zerox	local05, #7
03f24     01 DE CD F7 | 	test	local05, #1 wz
03f28     20 00 90 5D |  if_ne	jmp	#LR__0297
03f2c     00 DA 0D F2 | 	cmp	local03, #0 wz
03f30     10 00 90 AD |  if_e	jmp	#LR__0296
03f34     07 B2 45 F7 | 	zerox	result1, #7
03f38     04 B2 0D F5 | 	and	result1, #4 wz
03f3c                 | ' 				return FR_WRITE_PROTECTED;
03f3c     0A B2 05 56 |  if_ne	mov	result1, #10
03f40     94 05 90 5D |  if_ne	jmp	#LR__0311
03f44                 | LR__0296
03f44                 | ' 			}
03f44                 | ' 			return FR_OK;
03f44     00 B2 05 F6 | 	mov	result1, #0
03f48     8C 05 90 FD | 	jmp	#LR__0311
03f4c                 | LR__0297
03f4c                 | LR__0298
03f4c     F0 00 48 FC | 	wrbyte	#0, local06
03f50     01 E0 05 F1 | 	add	local06, #1
03f54     F0 DC 41 FC | 	wrbyte	local04, local06
03f58     F0 CC C1 FA | 	rdbyte	arg01, local06
03f5c     01 E0 85 F1 | 	sub	local06, #1
03f60     10 D9 BF FD | 	call	#_ff_cc_disk_initialize
03f64     D9 E2 01 F6 | 	mov	local07, result1
03f68     F1 DE 01 F6 | 	mov	local05, local07
03f6c     07 DE 45 F7 | 	zerox	local05, #7
03f70     01 DE CD F7 | 	test	local05, #1 wz
03f74                 | ' 		return FR_NOT_READY;
03f74     03 B2 05 56 |  if_ne	mov	result1, #3
03f78     5C 05 90 5D |  if_ne	jmp	#LR__0311
03f7c     00 DA 0D F2 | 	cmp	local03, #0 wz
03f80     14 00 90 AD |  if_e	jmp	#LR__0299
03f84     F1 DE 01 F6 | 	mov	local05, local07
03f88     07 DE 45 F7 | 	zerox	local05, #7
03f8c     04 DE CD F7 | 	test	local05, #4 wz
03f90                 | ' 		return FR_WRITE_PROTECTED;
03f90     0A B2 05 56 |  if_ne	mov	result1, #10
03f94     40 05 90 5D |  if_ne	jmp	#LR__0311
03f98                 | LR__0299
03f98     F0 CC 01 F6 | 	mov	arg01, local06
03f9c     00 CE 05 F6 | 	mov	arg02, #0
03fa0     B4 FD BF FD | 	call	#_ff_cc_find_volume_0280
03fa4     D9 E4 01 F6 | 	mov	local08, result1
03fa8     04 E4 0D F2 | 	cmp	local08, #4 wz
03fac     01 B2 05 A6 |  if_e	mov	result1, #1
03fb0     24 05 90 AD |  if_e	jmp	#LR__0311
03fb4     02 E4 1D F2 | 	cmp	local08, #2 wcz
03fb8     0D B2 05 36 |  if_ae	mov	result1, #13
03fbc     18 05 90 3D |  if_ae	jmp	#LR__0311
03fc0     2C E0 05 F1 | 	add	local06, #44
03fc4     F0 E6 01 FB | 	rdlong	local09, local06
03fc8     04 E0 05 F1 | 	add	local06, #4
03fcc     F0 CC 01 F6 | 	mov	arg01, local06
03fd0     30 E0 85 F1 | 	sub	local06, #48
03fd4     0B CC 05 F1 | 	add	arg01, #11
03fd8     C4 E0 BF FD | 	call	#_ff_cc_ld_word_0176
03fdc     D9 DE 01 F6 | 	mov	local05, result1
03fe0     0F DE 45 F7 | 	zerox	local05, #15
03fe4     01 00 00 FF 
03fe8     00 DE 0D F2 | 	cmp	local05, ##512 wz
03fec     0D B2 05 56 |  if_ne	mov	result1, #13
03ff0     E4 04 90 5D |  if_ne	jmp	#LR__0311
03ff4     30 E0 05 F1 | 	add	local06, #48
03ff8     F0 CC 01 F6 | 	mov	arg01, local06
03ffc     30 E0 85 F1 | 	sub	local06, #48
04000     16 CC 05 F1 | 	add	arg01, #22
04004     98 E0 BF FD | 	call	#_ff_cc_ld_word_0176
04008     D9 E8 01 F6 | 	mov	local10, result1
0400c     0F E8 4D F7 | 	zerox	local10, #15 wz
04010     18 00 90 5D |  if_ne	jmp	#LR__0300
04014     30 E0 05 F1 | 	add	local06, #48
04018     F0 CC 01 F6 | 	mov	arg01, local06
0401c     30 E0 85 F1 | 	sub	local06, #48
04020     24 CC 05 F1 | 	add	arg01, #36
04024     9C E0 BF FD | 	call	#_ff_cc_ld_dword_0178
04028     D9 E8 01 F6 | 	mov	local10, result1
0402c                 | LR__0300
0402c     18 E0 05 F1 | 	add	local06, #24
04030     F0 E8 61 FC | 	wrlong	local10, local06
04034     28 E0 05 F1 | 	add	local06, #40
04038     F0 DE C1 FA | 	rdbyte	local05, local06
0403c     3E E0 85 F1 | 	sub	local06, #62
04040     F0 DE 41 FC | 	wrbyte	local05, local06
04044     F0 DE C1 FA | 	rdbyte	local05, local06
04048     02 E0 85 F1 | 	sub	local06, #2
0404c     07 DE 45 F7 | 	zerox	local05, #7
04050     01 DE 0D F2 | 	cmp	local05, #1 wz
04054     1C 00 90 AD |  if_e	jmp	#LR__0301
04058     02 E0 05 F1 | 	add	local06, #2
0405c     F0 EA C1 FA | 	rdbyte	local11, local06
04060     02 E0 85 F1 | 	sub	local06, #2
04064     07 EA 45 F7 | 	zerox	local11, #7
04068     02 EA 0D F2 | 	cmp	local11, #2 wz
0406c     0D B2 05 56 |  if_ne	mov	result1, #13
04070     64 04 90 5D |  if_ne	jmp	#LR__0311
04074                 | LR__0301
04074     02 E0 05 F1 | 	add	local06, #2
04078     F0 DE C1 FA | 	rdbyte	local05, local06
0407c     EF E8 01 FD | 	qmul	local10, local05
04080     18 E8 61 FD | 	getqx	local10
04084     3B E0 05 F1 | 	add	local06, #59
04088     F0 DE C1 FA | 	rdbyte	local05, local06
0408c     33 E0 85 F1 | 	sub	local06, #51
04090     F0 DE 51 FC | 	wrword	local05, local06
04094     F0 DE E1 FA | 	rdword	local05, local06
04098     0A E0 85 F1 | 	sub	local06, #10
0409c     0F DE 4D F7 | 	zerox	local05, #15 wz
040a0     20 00 90 AD |  if_e	jmp	#LR__0302
040a4     0A E0 05 F1 | 	add	local06, #10
040a8     F0 EA E1 FA | 	rdword	local11, local06
040ac     F0 EC E1 FA | 	rdword	local12, local06
040b0     0A E0 85 F1 | 	sub	local06, #10
040b4     0F EC 45 F7 | 	zerox	local12, #15
040b8     01 EC 85 F1 | 	sub	local12, #1
040bc     F6 EA C9 F7 | 	test	local11, local12 wz
040c0     08 00 90 AD |  if_e	jmp	#LR__0303
040c4                 | LR__0302
040c4     0D B2 05 F6 | 	mov	result1, #13
040c8     0C 04 90 FD | 	jmp	#LR__0311
040cc                 | LR__0303
040cc     30 E0 05 F1 | 	add	local06, #48
040d0     F0 CC 01 F6 | 	mov	arg01, local06
040d4     30 E0 85 F1 | 	sub	local06, #48
040d8     11 CC 05 F1 | 	add	arg01, #17
040dc     C0 DF BF FD | 	call	#_ff_cc_ld_word_0176
040e0     08 E0 05 F1 | 	add	local06, #8
040e4     F0 B2 51 FC | 	wrword	result1, local06
040e8     F0 DE E1 FA | 	rdword	local05, local06
040ec     08 E0 85 F1 | 	sub	local06, #8
040f0     0F DE 45 F7 | 	zerox	local05, #15
040f4     EF EA 51 F6 | 	abs	local11, local05 wc
040f8     0F EA 05 F5 | 	and	local11, #15
040fc     F5 EA 61 C6 |  if_b	neg	local11, local11
04100     00 EA 0D F2 | 	cmp	local11, #0 wz
04104     0D B2 05 56 |  if_ne	mov	result1, #13
04108     CC 03 90 5D |  if_ne	jmp	#LR__0311
0410c     30 E0 05 F1 | 	add	local06, #48
04110     F0 CC 01 F6 | 	mov	arg01, local06
04114     30 E0 85 F1 | 	sub	local06, #48
04118     13 CC 05 F1 | 	add	arg01, #19
0411c     80 DF BF FD | 	call	#_ff_cc_ld_word_0176
04120     D9 EE 01 F6 | 	mov	local13, result1
04124     0F EE 4D F7 | 	zerox	local13, #15 wz
04128     18 00 90 5D |  if_ne	jmp	#LR__0304
0412c     30 E0 05 F1 | 	add	local06, #48
04130     F0 CC 01 F6 | 	mov	arg01, local06
04134     30 E0 85 F1 | 	sub	local06, #48
04138     20 CC 05 F1 | 	add	arg01, #32
0413c     84 DF BF FD | 	call	#_ff_cc_ld_dword_0178
04140     D9 EE 01 F6 | 	mov	local13, result1
04144                 | LR__0304
04144     30 E0 05 F1 | 	add	local06, #48
04148     F0 CC 01 F6 | 	mov	arg01, local06
0414c     30 E0 85 F1 | 	sub	local06, #48
04150     0E CC 05 F1 | 	add	arg01, #14
04154     48 DF BF FD | 	call	#_ff_cc_ld_word_0176
04158     D9 F0 01 F6 | 	mov	local14, result1
0415c     F8 DE 01 F6 | 	mov	local05, local14
04160     0F DE 4D F7 | 	zerox	local05, #15 wz
04164     0D B2 05 A6 |  if_e	mov	result1, #13
04168     6C 03 90 AD |  if_e	jmp	#LR__0311
0416c     F8 F2 01 F6 | 	mov	local15, local14
04170     0F F2 45 F7 | 	zerox	local15, #15
04174     F4 F2 01 F1 | 	add	local15, local10
04178     08 E0 05 F1 | 	add	local06, #8
0417c     F0 F4 E1 FA | 	rdword	local16, local06
04180     08 E0 85 F1 | 	sub	local06, #8
04184     0F F4 45 F7 | 	zerox	local16, #15
04188     FA F6 51 F6 | 	abs	local17, local16 wc
0418c     04 F6 45 F0 | 	shr	local17, #4
04190     FB F6 61 C6 |  if_b	neg	local17, local17
04194     FB F2 01 F1 | 	add	local15, local17
04198     F9 EE 19 F2 | 	cmp	local13, local15 wcz
0419c     0D B2 05 C6 |  if_b	mov	result1, #13
041a0     34 03 90 CD |  if_b	jmp	#LR__0311
041a4     F7 2A 02 F6 | 	mov	muldiva_, local13
041a8     F9 2A 82 F1 | 	sub	muldiva_, local15
041ac     0A E0 05 F1 | 	add	local06, #10
041b0     F0 2C E2 FA | 	rdword	muldivb_, local06
041b4     0A E0 85 F1 | 	sub	local06, #10
041b8     0F 2C 46 F7 | 	zerox	muldivb_, #15
041bc     C2 00 A0 FD | 	call	#unsdivide_
041c0     16 F9 09 F6 | 	mov	local18, muldivb_ wz
041c4     0D B2 05 A6 |  if_e	mov	result1, #13
041c8     0C 03 90 AD |  if_e	jmp	#LR__0311
041cc     00 E4 05 F6 | 	mov	local08, #0
041d0     FF FF 07 FF 
041d4     F5 F9 1D F2 | 	cmp	local18, ##268435445 wcz
041d8     03 E4 05 E6 |  if_be	mov	local08, #3
041dc     7F 00 00 FF 
041e0     F5 F9 1D F2 | 	cmp	local18, ##65525 wcz
041e4     02 E4 05 E6 |  if_be	mov	local08, #2
041e8     07 00 00 FF 
041ec     F5 F9 1D F2 | 	cmp	local18, ##4085 wcz
041f0     01 E4 05 E6 |  if_be	mov	local08, #1
041f4     00 E4 0D F2 | 	cmp	local08, #0 wz
041f8     0D B2 05 A6 |  if_e	mov	result1, #13
041fc     D8 02 90 AD |  if_e	jmp	#LR__0311
04200     FC DE 01 F6 | 	mov	local05, local18
04204     02 DE 05 F1 | 	add	local05, #2
04208     14 E0 05 F1 | 	add	local06, #20
0420c     F0 DE 61 FC | 	wrlong	local05, local06
04210     08 E0 05 F1 | 	add	local06, #8
04214     F0 E6 61 FC | 	wrlong	local09, local06
04218     F3 DE 01 F6 | 	mov	local05, local09
0421c     F8 F4 01 F6 | 	mov	local16, local14
04220     0F F4 45 F7 | 	zerox	local16, #15
04224     FA DE 01 F1 | 	add	local05, local16
04228     04 E0 05 F1 | 	add	local06, #4
0422c     F0 DE 61 FC | 	wrlong	local05, local06
04230     F3 DE 01 F6 | 	mov	local05, local09
04234     F9 DE 01 F1 | 	add	local05, local15
04238     08 E0 05 F1 | 	add	local06, #8
0423c     F0 DE 61 FC | 	wrlong	local05, local06
04240     28 E0 85 F1 | 	sub	local06, #40
04244     03 E4 0D F2 | 	cmp	local08, #3 wz
04248     6C 00 90 5D |  if_ne	jmp	#LR__0305
0424c     30 E0 05 F1 | 	add	local06, #48
04250     F0 CC 01 F6 | 	mov	arg01, local06
04254     30 E0 85 F1 | 	sub	local06, #48
04258     2A CC 05 F1 | 	add	arg01, #42
0425c     40 DE BF FD | 	call	#_ff_cc_ld_word_0176
04260     D9 DE 01 F6 | 	mov	local05, result1
04264     0F DE 4D F7 | 	zerox	local05, #15 wz
04268     0D B2 05 56 |  if_ne	mov	result1, #13
0426c     68 02 90 5D |  if_ne	jmp	#LR__0311
04270     08 E0 05 F1 | 	add	local06, #8
04274     F0 DE E1 FA | 	rdword	local05, local06
04278     08 E0 85 F1 | 	sub	local06, #8
0427c     0F DE 4D F7 | 	zerox	local05, #15 wz
04280     0D B2 05 56 |  if_ne	mov	result1, #13
04284     50 02 90 5D |  if_ne	jmp	#LR__0311
04288     30 E0 05 F1 | 	add	local06, #48
0428c     F0 CC 01 F6 | 	mov	arg01, local06
04290     30 E0 85 F1 | 	sub	local06, #48
04294     2C CC 05 F1 | 	add	arg01, #44
04298     28 DE BF FD | 	call	#_ff_cc_ld_dword_0178
0429c     24 E0 05 F1 | 	add	local06, #36
042a0     F0 B2 61 FC | 	wrlong	result1, local06
042a4     10 E0 85 F1 | 	sub	local06, #16
042a8     F0 FA 01 FB | 	rdlong	local19, local06
042ac     14 E0 85 F1 | 	sub	local06, #20
042b0     02 FA 65 F0 | 	shl	local19, #2
042b4     74 00 90 FD | 	jmp	#LR__0308
042b8                 | LR__0305
042b8     08 E0 05 F1 | 	add	local06, #8
042bc     F0 DE E1 FA | 	rdword	local05, local06
042c0     08 E0 85 F1 | 	sub	local06, #8
042c4     0F DE 4D F7 | 	zerox	local05, #15 wz
042c8     0D B2 05 A6 |  if_e	mov	result1, #13
042cc     08 02 90 AD |  if_e	jmp	#LR__0311
042d0     20 E0 05 F1 | 	add	local06, #32
042d4     F0 DE 01 FB | 	rdlong	local05, local06
042d8     F4 DE 01 F1 | 	add	local05, local10
042dc     04 E0 05 F1 | 	add	local06, #4
042e0     F0 DE 61 FC | 	wrlong	local05, local06
042e4     24 E0 85 F1 | 	sub	local06, #36
042e8     02 E4 0D F2 | 	cmp	local08, #2 wz
042ec     14 00 90 5D |  if_ne	jmp	#LR__0306
042f0     14 E0 05 F1 | 	add	local06, #20
042f4     F0 DE 01 FB | 	rdlong	local05, local06
042f8     14 E0 85 F1 | 	sub	local06, #20
042fc     01 DE 65 F0 | 	shl	local05, #1
04300     24 00 90 FD | 	jmp	#LR__0307
04304                 | LR__0306
04304     14 E0 05 F1 | 	add	local06, #20
04308     F0 FC 01 FB | 	rdlong	local20, local06
0430c     FE DE 01 F6 | 	mov	local05, local20
04310     01 DE 65 F0 | 	shl	local05, #1
04314     FE DE 01 F1 | 	add	local05, local20
04318     01 DE 45 F0 | 	shr	local05, #1
0431c     14 E0 85 F1 | 	sub	local06, #20
04320     01 FC CD F7 | 	test	local20, #1 wz
04324     01 DE 05 51 |  if_ne	add	local05, #1
04328                 | LR__0307
04328     EF FA 01 F6 | 	mov	local19, local05
0432c                 | LR__0308
0432c     FD F4 01 F6 | 	mov	local16, local19
04330     FF F5 05 F1 | 	add	local16, #511
04334     09 F4 45 F0 | 	shr	local16, #9
04338     18 E0 05 F1 | 	add	local06, #24
0433c     F0 EA 01 FB | 	rdlong	local11, local06
04340     18 E0 85 F1 | 	sub	local06, #24
04344     FA EA 19 F2 | 	cmp	local11, local16 wcz
04348     0D B2 05 C6 |  if_b	mov	result1, #13
0434c     88 01 90 CD |  if_b	jmp	#LR__0311
04350     10 E0 05 F1 | 	add	local06, #16
04354     FF FF FF FF 
04358     F0 FE 6B FC | 	wrlong	##-1, local06
0435c     04 E0 85 F1 | 	sub	local06, #4
04360     FF FF FF FF 
04364     F0 FE 6B FC | 	wrlong	##-1, local06
04368     08 E0 85 F1 | 	sub	local06, #8
0436c     F0 00 49 FC | 	wrbyte	#128, local06
04370     04 E0 85 F1 | 	sub	local06, #4
04374     03 E4 0D F2 | 	cmp	local08, #3 wz
04378     34 01 90 5D |  if_ne	jmp	#LR__0310
0437c     30 E0 05 F1 | 	add	local06, #48
04380     F0 CC 01 F6 | 	mov	arg01, local06
04384     30 E0 85 F1 | 	sub	local06, #48
04388     30 CC 05 F1 | 	add	arg01, #48
0438c     10 DD BF FD | 	call	#_ff_cc_ld_word_0176
04390     D9 DE 01 F6 | 	mov	local05, result1
04394     0F DE 45 F7 | 	zerox	local05, #15
04398     01 DE 0D F2 | 	cmp	local05, #1 wz
0439c     10 01 90 5D |  if_ne	jmp	#LR__0310
043a0     F0 FE 01 F6 | 	mov	local21, local06
043a4     F3 00 02 F6 | 	mov	local22, local09
043a8     01 00 06 F1 | 	add	local22, #1
043ac     00 03 02 F6 | 	mov	local23, local22
043b0     FF CC 01 F6 | 	mov	arg01, local21
043b4     01 CF 01 F6 | 	mov	arg02, local23
043b8     00 DF BF FD | 	call	#_ff_cc_move_window_0196
043bc     D9 04 0A F6 | 	mov	local24, result1 wz
043c0     EC 00 90 5D |  if_ne	jmp	#LR__0310
043c4     04 E0 05 F1 | 	add	local06, #4
043c8     F0 00 48 FC | 	wrbyte	#0, local06
043cc     2C E0 05 F1 | 	add	local06, #44
043d0     F0 EA 01 F6 | 	mov	local11, local06
043d4     F5 F4 01 F6 | 	mov	local16, local11
043d8     FE F5 05 F1 | 	add	local16, #510
043dc     FA F6 01 F6 | 	mov	local17, local16
043e0     FB CC 01 F6 | 	mov	arg01, local17
043e4     30 E0 85 F1 | 	sub	local06, #48
043e8     B4 DC BF FD | 	call	#_ff_cc_ld_word_0176
043ec     D9 EC 01 F6 | 	mov	local12, result1
043f0     F6 DE 01 F6 | 	mov	local05, local12
043f4     0F DE 45 F7 | 	zerox	local05, #15
043f8     55 00 00 FF 
043fc     55 DE 0D F2 | 	cmp	local05, ##43605 wz
04400     AC 00 90 5D |  if_ne	jmp	#LR__0309
04404     30 E0 05 F1 | 	add	local06, #48
04408     F0 00 02 F6 | 	mov	local22, local06
0440c     00 FF 01 F6 | 	mov	local21, local22
04410     FF 02 02 F6 | 	mov	local23, local21
04414     01 CD 01 F6 | 	mov	arg01, local23
04418     30 E0 85 F1 | 	sub	local06, #48
0441c     A4 DC BF FD | 	call	#_ff_cc_ld_dword_0178
04420     D9 04 02 F6 | 	mov	local24, result1
04424     A9 B0 20 FF 
04428     52 04 0E F2 | 	cmp	local24, ##1096897106 wz
0442c     80 00 90 5D |  if_ne	jmp	#LR__0309
04430     30 E0 05 F1 | 	add	local06, #48
04434     F0 06 02 F6 | 	mov	local25, local06
04438     03 FD 01 F6 | 	mov	local20, local25
0443c     E4 FD 05 F1 | 	add	local20, #484
04440     FE 08 02 F6 | 	mov	local26, local20
04444     04 CD 01 F6 | 	mov	arg01, local26
04448     30 E0 85 F1 | 	sub	local06, #48
0444c     74 DC BF FD | 	call	#_ff_cc_ld_dword_0178
04450     D9 0A 02 F6 | 	mov	local27, result1
04454     B9 A0 30 FF 
04458     72 0A 0E F2 | 	cmp	local27, ##1631679090 wz
0445c     50 00 90 5D |  if_ne	jmp	#LR__0309
04460     30 E0 05 F1 | 	add	local06, #48
04464     F0 CC 01 F6 | 	mov	arg01, local06
04468     30 E0 85 F1 | 	sub	local06, #48
0446c     E8 CD 05 F1 | 	add	arg01, #488
04470     50 DC BF FD | 	call	#_ff_cc_ld_dword_0178
04474     D9 F6 01 F6 | 	mov	local17, result1
04478     10 E0 05 F1 | 	add	local06, #16
0447c     F0 F6 61 FC | 	wrlong	local17, local06
04480     20 E0 05 F1 | 	add	local06, #32
04484     F0 F4 01 F6 | 	mov	local16, local06
04488     FA DE 01 F6 | 	mov	local05, local16
0448c     EC DF 05 F1 | 	add	local05, #492
04490     EF EA 01 F6 | 	mov	local11, local05
04494     F5 CC 01 F6 | 	mov	arg01, local11
04498     30 E0 85 F1 | 	sub	local06, #48
0449c     24 DC BF FD | 	call	#_ff_cc_ld_dword_0178
044a0     D9 F6 01 F6 | 	mov	local17, result1
044a4     0C E0 05 F1 | 	add	local06, #12
044a8     F0 F6 61 FC | 	wrlong	local17, local06
044ac     0C E0 85 F1 | 	sub	local06, #12
044b0                 | LR__0309
044b0                 | LR__0310
044b0     F0 E4 41 FC | 	wrbyte	local08, local06
044b4     04 AE 05 F1 | 	add	ptr__ff_cc_dat__, #4
044b8     D7 DE E1 FA | 	rdword	local05, ptr__ff_cc_dat__
044bc     01 DE 05 F1 | 	add	local05, #1
044c0     D7 DE 51 FC | 	wrword	local05, ptr__ff_cc_dat__
044c4     D7 EA E1 FA | 	rdword	local11, ptr__ff_cc_dat__
044c8     04 AE 85 F1 | 	sub	ptr__ff_cc_dat__, #4
044cc     06 E0 05 F1 | 	add	local06, #6
044d0     F0 EA 51 FC | 	wrword	local11, local06
044d4                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
044d4                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
044d4                 | ' 			{
044d4                 | ' 
044d4                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
044d4                 | ' 
044d4                 | ' 
044d4                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
044d4                 | ' 
044d4                 | ' 			}
044d4                 | ' 		}
044d4                 | ' 
044d4                 | ' 
044d4                 | ' 	}
044d4                 | ' 
044d4                 | ' 	fs->fs_type = (BYTE)fmt;
044d4                 | ' 	fs->id = ++Fsid;
044d4                 | ' #line 3589 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
044d4                 | ' 	return FR_OK;
044d4     00 B2 05 F6 | 	mov	result1, #0
044d8                 | LR__0311
044d8     AF F0 03 F6 | 	mov	ptra, fp
044dc     BA 00 A0 FD | 	call	#popregs_
044e0                 | _ff_cc_mount_volume_0292_ret
044e0     2D 00 64 FD | 	ret
044e4                 | 
044e4                 | _ff_cc_validate_0294
044e4     0B 5A 05 F6 | 	mov	COUNT_, #11
044e8     B0 00 A0 FD | 	call	#pushregs_
044ec     E6 D6 09 F6 | 	mov	local01, arg01 wz
044f0     E7 D8 01 F6 | 	mov	local02, arg02
044f4     09 DA 05 F6 | 	mov	local03, #9
044f8     80 00 90 AD |  if_e	jmp	#LR__0312
044fc     EB DC 09 FB | 	rdlong	local04, local01 wz
04500     78 00 90 AD |  if_e	jmp	#LR__0312
04504     EB DE 01 FB | 	rdlong	local05, local01
04508     EF E0 C9 FA | 	rdbyte	local06, local05 wz
0450c     6C 00 90 AD |  if_e	jmp	#LR__0312
04510     04 D6 05 F1 | 	add	local01, #4
04514     EB E2 E1 FA | 	rdword	local07, local01
04518     04 D6 85 F1 | 	sub	local01, #4
0451c     0F E2 45 F7 | 	zerox	local07, #15
04520     EB E4 01 FB | 	rdlong	local08, local01
04524     06 E4 05 F1 | 	add	local08, #6
04528     F2 E6 E1 FA | 	rdword	local09, local08
0452c     06 E4 85 F1 | 	sub	local08, #6
04530     F3 E8 01 F6 | 	mov	local10, local09
04534     0F E8 45 F7 | 	zerox	local10, #15
04538     F4 E2 09 F2 | 	cmp	local07, local10 wz
0453c     3C 00 90 5D |  if_ne	jmp	#LR__0312
04540     EB DE 01 FB | 	rdlong	local05, local01
04544     01 DE 05 F1 | 	add	local05, #1
04548     EF E2 C1 FA | 	rdbyte	local07, local05
0454c     01 DE 85 F1 | 	sub	local05, #1
04550     F1 E0 01 F6 | 	mov	local06, local07
04554     F0 CC 09 F6 | 	mov	arg01, local06 wz
04558     01 B2 05 56 |  if_ne	mov	result1, #1
0455c                 | ' 
0455c                 | ' 	return Stat;
0455c     88 AF 05 A1 |  if_e	add	ptr__ff_cc_dat__, #392
04560     D7 B2 C1 AA |  if_e	rdbyte	result1, ptr__ff_cc_dat__
04564     88 AF 85 A1 |  if_e	sub	ptr__ff_cc_dat__, #392
04568     D9 EA 01 F6 | 	mov	local11, result1
0456c     F5 DC 01 F6 | 	mov	local04, local11
04570     07 DC 45 F7 | 	zerox	local04, #7
04574     01 DC 0D F5 | 	and	local04, #1 wz
04578     00 DA 05 A6 |  if_e	mov	local03, #0
0457c                 | LR__0312
0457c     00 DA 0D F2 | 	cmp	local03, #0 wz
04580     EB DC 01 AB |  if_e	rdlong	local04, local01
04584     00 DC 05 56 |  if_ne	mov	local04, #0
04588     EC DC 61 FC | 	wrlong	local04, local02
0458c                 | ' 			res = FR_OK;
0458c                 | ' 		}
0458c                 | ' 
0458c                 | ' 	}
0458c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
0458c                 | ' 	return res;
0458c     ED B2 01 F6 | 	mov	result1, local03
04590     AF F0 03 F6 | 	mov	ptra, fp
04594     BA 00 A0 FD | 	call	#popregs_
04598                 | _ff_cc_validate_0294_ret
04598     2D 00 64 FD | 	ret
0459c                 | 
0459c                 | _ff_cc_f_mount
0459c     02 5A 05 F6 | 	mov	COUNT_, #2
045a0     B0 00 A0 FD | 	call	#pushregs_
045a4     20 F0 07 F1 | 	add	ptra, #32
045a8     04 5E 05 F1 | 	add	fp, #4
045ac     AF CC 61 FC | 	wrlong	arg01, fp
045b0     04 5E 05 F1 | 	add	fp, #4
045b4     AF CE 61 FC | 	wrlong	arg02, fp
045b8     04 5E 05 F1 | 	add	fp, #4
045bc     AF D0 41 FC | 	wrbyte	arg03, fp
045c0     04 5E 85 F1 | 	sub	fp, #4
045c4     AF D6 01 FB | 	rdlong	local01, fp
045c8     14 5E 05 F1 | 	add	fp, #20
045cc     AF D6 61 FC | 	wrlong	local01, fp
045d0     AF CC 01 F6 | 	mov	arg01, fp
045d4     1C 5E 85 F1 | 	sub	fp, #28
045d8     B0 F5 BF FD | 	call	#_ff_cc_get_ldnumber_0275
045dc     14 5E 05 F1 | 	add	fp, #20
045e0     AF B2 61 FC | 	wrlong	result1, fp
045e4     D9 D6 01 F6 | 	mov	local01, result1
045e8     14 5E 85 F1 | 	sub	fp, #20
045ec     00 D6 5D F2 | 	cmps	local01, #0 wcz
045f0     0B B2 05 C6 |  if_b	mov	result1, #11
045f4     B4 00 90 CD |  if_b	jmp	#LR__0315
045f8     14 5E 05 F1 | 	add	fp, #20
045fc     AF D6 01 FB | 	rdlong	local01, fp
04600     02 D6 65 F0 | 	shl	local01, #2
04604     D7 D6 01 F1 | 	add	local01, ptr__ff_cc_dat__
04608     EB D8 01 FB | 	rdlong	local02, local01
0460c     04 5E 85 F1 | 	sub	fp, #4
04610     AF D8 61 FC | 	wrlong	local02, fp
04614     AF D6 09 FB | 	rdlong	local01, fp wz
04618     10 5E 85 F1 | 	sub	fp, #16
0461c     10 00 90 AD |  if_e	jmp	#LR__0313
04620     10 5E 05 F1 | 	add	fp, #16
04624     AF D6 01 FB | 	rdlong	local01, fp
04628     10 5E 85 F1 | 	sub	fp, #16
0462c     EB 00 48 FC | 	wrbyte	#0, local01
04630                 | LR__0313
04630     04 5E 05 F1 | 	add	fp, #4
04634     AF D6 09 FB | 	rdlong	local01, fp wz
04638     04 5E 85 F1 | 	sub	fp, #4
0463c     10 00 90 AD |  if_e	jmp	#LR__0314
04640     04 5E 05 F1 | 	add	fp, #4
04644     AF D6 01 FB | 	rdlong	local01, fp
04648     04 5E 85 F1 | 	sub	fp, #4
0464c     EB 00 48 FC | 	wrbyte	#0, local01
04650                 | LR__0314
04650     14 5E 05 F1 | 	add	fp, #20
04654     AF D6 01 FB | 	rdlong	local01, fp
04658     02 D6 65 F0 | 	shl	local01, #2
0465c     D7 D6 01 F1 | 	add	local01, ptr__ff_cc_dat__
04660     10 5E 85 F1 | 	sub	fp, #16
04664     AF D8 01 FB | 	rdlong	local02, fp
04668     EB D8 61 FC | 	wrlong	local02, local01
0466c     08 5E 05 F1 | 	add	fp, #8
04670     AF D6 C1 FA | 	rdbyte	local01, fp
04674     0C 5E 85 F1 | 	sub	fp, #12
04678     07 D6 4D F7 | 	zerox	local01, #7 wz
0467c     00 B2 05 A6 |  if_e	mov	result1, #0
04680     28 00 90 AD |  if_e	jmp	#LR__0315
04684     08 5E 05 F1 | 	add	fp, #8
04688     AF CC 01 F6 | 	mov	arg01, fp
0468c     04 5E 85 F1 | 	sub	fp, #4
04690     AF CE 01 F6 | 	mov	arg02, fp
04694     04 5E 85 F1 | 	sub	fp, #4
04698     00 D0 05 F6 | 	mov	arg03, #0
0469c     04 F8 BF FD | 	call	#_ff_cc_mount_volume_0292
046a0     18 5E 05 F1 | 	add	fp, #24
046a4     AF B2 61 FC | 	wrlong	result1, fp
046a8                 | ' 
046a8                 | ' 	res = mount_volume(&path, &fs, 0);
046a8                 | ' 	return res ;
046a8     18 5E 85 F1 | 	sub	fp, #24
046ac                 | LR__0315
046ac     AF F0 03 F6 | 	mov	ptra, fp
046b0     BA 00 A0 FD | 	call	#popregs_
046b4                 | _ff_cc_f_mount_ret
046b4     2D 00 64 FD | 	ret
046b8                 | 
046b8                 | _ff_cc_f_open
046b8     10 5A 05 F6 | 	mov	COUNT_, #16
046bc     B0 00 A0 FD | 	call	#pushregs_
046c0     58 F0 07 F1 | 	add	ptra, #88
046c4     04 5E 05 F1 | 	add	fp, #4
046c8     AF CC 61 FC | 	wrlong	arg01, fp
046cc     04 5E 05 F1 | 	add	fp, #4
046d0     AF CE 61 FC | 	wrlong	arg02, fp
046d4     04 5E 05 F1 | 	add	fp, #4
046d8     AF D0 41 FC | 	wrbyte	arg03, fp
046dc     08 5E 85 F1 | 	sub	fp, #8
046e0     AF D6 09 FB | 	rdlong	local01, fp wz
046e4     04 5E 85 F1 | 	sub	fp, #4
046e8     09 B2 05 A6 |  if_e	mov	result1, #9
046ec     FC 06 90 AD |  if_e	jmp	#LR__0339
046f0     0C 5E 05 F1 | 	add	fp, #12
046f4     AF D6 C1 FA | 	rdbyte	local01, fp
046f8     3F D6 05 F5 | 	and	local01, #63
046fc     AF D6 41 FC | 	wrbyte	local01, fp
04700     04 5E 85 F1 | 	sub	fp, #4
04704     AF CC 01 F6 | 	mov	arg01, fp
04708     38 5E 05 F1 | 	add	fp, #56
0470c     AF CE 01 F6 | 	mov	arg02, fp
04710     34 5E 85 F1 | 	sub	fp, #52
04714     AF D8 C1 FA | 	rdbyte	local02, fp
04718     0C 5E 85 F1 | 	sub	fp, #12
0471c     EC D0 01 F6 | 	mov	arg03, local02
04720     80 F7 BF FD | 	call	#_ff_cc_mount_volume_0292
04724     D9 DA 01 F6 | 	mov	local03, result1
04728     10 5E 05 F1 | 	add	fp, #16
0472c     AF DA 61 FC | 	wrlong	local03, fp
04730     AF D6 09 FB | 	rdlong	local01, fp wz
04734     10 5E 85 F1 | 	sub	fp, #16
04738     84 06 90 5D |  if_ne	jmp	#LR__0337
0473c     40 5E 05 F1 | 	add	fp, #64
04740     AF D6 01 FB | 	rdlong	local01, fp
04744     2C 5E 85 F1 | 	sub	fp, #44
04748     AF D6 61 FC | 	wrlong	local01, fp
0474c     AF CC 01 F6 | 	mov	arg01, fp
04750     0C 5E 85 F1 | 	sub	fp, #12
04754     AF DC 01 FB | 	rdlong	local04, fp
04758     08 5E 85 F1 | 	sub	fp, #8
0475c     EE DE 01 F6 | 	mov	local05, local04
04760     EF CE 01 F6 | 	mov	arg02, local05
04764     00 F2 BF FD | 	call	#_ff_cc_follow_path_0269
04768     D9 E0 01 F6 | 	mov	local06, result1
0476c     10 5E 05 F1 | 	add	fp, #16
04770     AF E0 61 FC | 	wrlong	local06, fp
04774     AF D6 09 FB | 	rdlong	local01, fp wz
04778     10 5E 85 F1 | 	sub	fp, #16
0477c     20 00 90 5D |  if_ne	jmp	#LR__0316
04780     3F 5E 05 F1 | 	add	fp, #63
04784     AF D6 C1 FA | 	rdbyte	local01, fp
04788     3F 5E 85 F1 | 	sub	fp, #63
0478c     07 D6 45 F7 | 	zerox	local01, #7
04790     80 D6 CD F7 | 	test	local01, #128 wz
04794     10 5E 05 51 |  if_ne	add	fp, #16
04798     AF 0C 68 5C |  if_ne	wrlong	#6, fp
0479c     10 5E 85 51 |  if_ne	sub	fp, #16
047a0                 | LR__0316
047a0     0C 5E 05 F1 | 	add	fp, #12
047a4     AF D6 C1 FA | 	rdbyte	local01, fp
047a8     0C 5E 85 F1 | 	sub	fp, #12
047ac     07 D6 45 F7 | 	zerox	local01, #7
047b0     1C D6 CD F7 | 	test	local01, #28 wz
047b4     04 02 90 AD |  if_e	jmp	#LR__0322
047b8     10 5E 05 F1 | 	add	fp, #16
047bc     AF D6 09 FB | 	rdlong	local01, fp wz
047c0     10 5E 85 F1 | 	sub	fp, #16
047c4     48 00 90 AD |  if_e	jmp	#LR__0318
047c8     10 5E 05 F1 | 	add	fp, #16
047cc     AF D6 01 FB | 	rdlong	local01, fp
047d0     10 5E 85 F1 | 	sub	fp, #16
047d4     04 D6 0D F2 | 	cmp	local01, #4 wz
047d8     1C 00 90 5D |  if_ne	jmp	#LR__0317
047dc     14 5E 05 F1 | 	add	fp, #20
047e0     AF CC 01 F6 | 	mov	arg01, fp
047e4     14 5E 85 F1 | 	sub	fp, #20
047e8     00 ED BF FD | 	call	#_ff_cc_dir_register_0250
047ec     10 5E 05 F1 | 	add	fp, #16
047f0     AF B2 61 FC | 	wrlong	result1, fp
047f4     10 5E 85 F1 | 	sub	fp, #16
047f8                 | LR__0317
047f8     0C 5E 05 F1 | 	add	fp, #12
047fc     AF D6 C1 FA | 	rdbyte	local01, fp
04800     08 D6 45 F5 | 	or	local01, #8
04804     AF D6 41 FC | 	wrbyte	local01, fp
04808     0C 5E 85 F1 | 	sub	fp, #12
0480c     48 00 90 FD | 	jmp	#LR__0321
04810                 | LR__0318
04810     1A 5E 05 F1 | 	add	fp, #26
04814     AF D6 C1 FA | 	rdbyte	local01, fp
04818     1A 5E 85 F1 | 	sub	fp, #26
0481c     07 D6 45 F7 | 	zerox	local01, #7
04820     11 D6 CD F7 | 	test	local01, #17 wz
04824     10 00 90 AD |  if_e	jmp	#LR__0319
04828     10 5E 05 F1 | 	add	fp, #16
0482c     AF 0E 68 FC | 	wrlong	#7, fp
04830     10 5E 85 F1 | 	sub	fp, #16
04834     20 00 90 FD | 	jmp	#LR__0320
04838                 | LR__0319
04838     0C 5E 05 F1 | 	add	fp, #12
0483c     AF D6 C1 FA | 	rdbyte	local01, fp
04840     0C 5E 85 F1 | 	sub	fp, #12
04844     07 D6 45 F7 | 	zerox	local01, #7
04848     04 D6 CD F7 | 	test	local01, #4 wz
0484c     10 5E 05 51 |  if_ne	add	fp, #16
04850     AF 10 68 5C |  if_ne	wrlong	#8, fp
04854     10 5E 85 51 |  if_ne	sub	fp, #16
04858                 | LR__0320
04858                 | LR__0321
04858     10 5E 05 F1 | 	add	fp, #16
0485c     AF D6 09 FB | 	rdlong	local01, fp wz
04860     10 5E 85 F1 | 	sub	fp, #16
04864     D4 01 90 5D |  if_ne	jmp	#LR__0327
04868     0C 5E 05 F1 | 	add	fp, #12
0486c     AF DE C1 FA | 	rdbyte	local05, fp
04870     0C 5E 85 F1 | 	sub	fp, #12
04874     07 DE 45 F7 | 	zerox	local05, #7
04878     08 DE CD F7 | 	test	local05, #8 wz
0487c     BC 01 90 AD |  if_e	jmp	#LR__0327
04880     40 5E 05 F1 | 	add	fp, #64
04884     AF CC 01 FB | 	rdlong	arg01, fp
04888     10 5E 85 F1 | 	sub	fp, #16
0488c     AF CE 01 FB | 	rdlong	arg02, fp
04890     30 5E 85 F1 | 	sub	fp, #48
04894     A0 E9 BF FD | 	call	#_ff_cc_ld_clust_0237
04898     D9 E0 01 F6 | 	mov	local06, result1
0489c     44 5E 05 F1 | 	add	fp, #68
048a0     AF E0 61 FC | 	wrlong	local06, fp
048a4     14 5E 85 F1 | 	sub	fp, #20
048a8     AF CC 01 FB | 	rdlong	arg01, fp
048ac     30 5E 85 F1 | 	sub	fp, #48
048b0     0E CC 05 F1 | 	add	arg01, #14
048b4     80 10 27 FF 
048b8     00 CE 05 F6 | 	mov	arg02, ##1310785536
048bc     68 D8 BF FD | 	call	#_ff_cc_st_dword_0180
048c0     30 5E 05 F1 | 	add	fp, #48
048c4     AF D6 01 FB | 	rdlong	local01, fp
048c8     0B D6 05 F1 | 	add	local01, #11
048cc     EB 40 48 FC | 	wrbyte	#32, local01
048d0     10 5E 05 F1 | 	add	fp, #16
048d4     AF CC 01 FB | 	rdlong	arg01, fp
048d8     10 5E 85 F1 | 	sub	fp, #16
048dc     AF CE 01 FB | 	rdlong	arg02, fp
048e0     30 5E 85 F1 | 	sub	fp, #48
048e4     00 D0 05 F6 | 	mov	arg03, #0
048e8     A4 E9 BF FD | 	call	#_ff_cc_st_clust_0238
048ec     30 5E 05 F1 | 	add	fp, #48
048f0     AF CC 01 FB | 	rdlong	arg01, fp
048f4     30 5E 85 F1 | 	sub	fp, #48
048f8     1C CC 05 F1 | 	add	arg01, #28
048fc     00 CE 05 F6 | 	mov	arg02, #0
04900     24 D8 BF FD | 	call	#_ff_cc_st_dword_0180
04904     40 5E 05 F1 | 	add	fp, #64
04908     AF D6 01 FB | 	rdlong	local01, fp
0490c     03 D6 05 F1 | 	add	local01, #3
04910     EB 02 48 FC | 	wrbyte	#1, local01
04914     04 5E 05 F1 | 	add	fp, #4
04918     AF E2 01 FB | 	rdlong	local07, fp
0491c     44 5E 85 F1 | 	sub	fp, #68
04920     F1 D6 09 F6 | 	mov	local01, local07 wz
04924     14 01 90 AD |  if_e	jmp	#LR__0327
04928     40 5E 05 F1 | 	add	fp, #64
0492c     AF D6 01 FB | 	rdlong	local01, fp
04930     2C D6 05 F1 | 	add	local01, #44
04934     EB DE 01 FB | 	rdlong	local05, local01
04938     10 5E 05 F1 | 	add	fp, #16
0493c     AF DE 61 FC | 	wrlong	local05, fp
04940     3C 5E 85 F1 | 	sub	fp, #60
04944     AF CC 01 F6 | 	mov	arg01, fp
04948     30 5E 05 F1 | 	add	fp, #48
0494c     AF CE 01 FB | 	rdlong	arg02, fp
04950     44 5E 85 F1 | 	sub	fp, #68
04954     00 D0 05 F6 | 	mov	arg03, #0
04958     60 E0 BF FD | 	call	#_ff_cc_remove_chain_0212
0495c     D9 E2 01 F6 | 	mov	local07, result1
04960     10 5E 05 F1 | 	add	fp, #16
04964     AF E2 61 FC | 	wrlong	local07, fp
04968     10 5E 85 F1 | 	sub	fp, #16
0496c     F1 D6 09 F6 | 	mov	local01, local07 wz
04970     C8 00 90 5D |  if_ne	jmp	#LR__0327
04974     40 5E 05 F1 | 	add	fp, #64
04978     AF CC 01 FB | 	rdlong	arg01, fp
0497c     10 5E 05 F1 | 	add	fp, #16
04980     AF CE 01 FB | 	rdlong	arg02, fp
04984     50 5E 85 F1 | 	sub	fp, #80
04988     30 D9 BF FD | 	call	#_ff_cc_move_window_0196
0498c     D9 E0 01 F6 | 	mov	local06, result1
04990     10 5E 05 F1 | 	add	fp, #16
04994     AF E0 61 FC | 	wrlong	local06, fp
04998     30 5E 05 F1 | 	add	fp, #48
0499c     AF D6 01 FB | 	rdlong	local01, fp
049a0     04 5E 05 F1 | 	add	fp, #4
049a4     AF DE 01 FB | 	rdlong	local05, fp
049a8     44 5E 85 F1 | 	sub	fp, #68
049ac     01 DE 85 F1 | 	sub	local05, #1
049b0     0C D6 05 F1 | 	add	local01, #12
049b4     EB DE 61 FC | 	wrlong	local05, local01
049b8     80 00 90 FD | 	jmp	#LR__0327
049bc                 | LR__0322
049bc     10 5E 05 F1 | 	add	fp, #16
049c0     AF D6 09 FB | 	rdlong	local01, fp wz
049c4     10 5E 85 F1 | 	sub	fp, #16
049c8     70 00 90 5D |  if_ne	jmp	#LR__0326
049cc     1A 5E 05 F1 | 	add	fp, #26
049d0     AF D6 C1 FA | 	rdbyte	local01, fp
049d4     1A 5E 85 F1 | 	sub	fp, #26
049d8     07 D6 45 F7 | 	zerox	local01, #7
049dc     10 D6 CD F7 | 	test	local01, #16 wz
049e0     10 00 90 AD |  if_e	jmp	#LR__0323
049e4     10 5E 05 F1 | 	add	fp, #16
049e8     AF 08 68 FC | 	wrlong	#4, fp
049ec     10 5E 85 F1 | 	sub	fp, #16
049f0     48 00 90 FD | 	jmp	#LR__0325
049f4                 | LR__0323
049f4     0C 5E 05 F1 | 	add	fp, #12
049f8     AF E2 C1 FA | 	rdbyte	local07, fp
049fc     0C 5E 85 F1 | 	sub	fp, #12
04a00     F1 D6 01 F6 | 	mov	local01, local07
04a04     07 D6 45 F7 | 	zerox	local01, #7
04a08     02 D6 CD F7 | 	test	local01, #2 wz
04a0c     2C 00 90 AD |  if_e	jmp	#LR__0324
04a10     1A 5E 05 F1 | 	add	fp, #26
04a14     AF DC C1 FA | 	rdbyte	local04, fp
04a18     1A 5E 85 F1 | 	sub	fp, #26
04a1c     EE DE 01 F6 | 	mov	local05, local04
04a20     07 DE 45 F7 | 	zerox	local05, #7
04a24     01 DE 0D F5 | 	and	local05, #1 wz
04a28     10 00 90 AD |  if_e	jmp	#LR__0324
04a2c     07 D6 05 F6 | 	mov	local01, #7
04a30     10 5E 05 F1 | 	add	fp, #16
04a34     AF 0E 68 FC | 	wrlong	#7, fp
04a38     10 5E 85 F1 | 	sub	fp, #16
04a3c                 | LR__0324
04a3c                 | LR__0325
04a3c                 | LR__0326
04a3c                 | LR__0327
04a3c     10 5E 05 F1 | 	add	fp, #16
04a40     AF D6 09 FB | 	rdlong	local01, fp wz
04a44     10 5E 85 F1 | 	sub	fp, #16
04a48     68 00 90 5D |  if_ne	jmp	#LR__0329
04a4c     0C 5E 05 F1 | 	add	fp, #12
04a50     AF D6 C1 FA | 	rdbyte	local01, fp
04a54     0C 5E 85 F1 | 	sub	fp, #12
04a58     07 D6 45 F7 | 	zerox	local01, #7
04a5c     08 D6 CD F7 | 	test	local01, #8 wz
04a60     14 00 90 AD |  if_e	jmp	#LR__0328
04a64     0C 5E 05 F1 | 	add	fp, #12
04a68     AF D6 C1 FA | 	rdbyte	local01, fp
04a6c     40 D6 45 F5 | 	or	local01, #64
04a70     AF D6 41 FC | 	wrbyte	local01, fp
04a74     0C 5E 85 F1 | 	sub	fp, #12
04a78                 | LR__0328
04a78     04 5E 05 F1 | 	add	fp, #4
04a7c     AF D6 01 FB | 	rdlong	local01, fp
04a80     3C 5E 05 F1 | 	add	fp, #60
04a84     AF DE 01 FB | 	rdlong	local05, fp
04a88     2C DE 05 F1 | 	add	local05, #44
04a8c     EF E0 01 FB | 	rdlong	local06, local05
04a90     20 D6 05 F1 | 	add	local01, #32
04a94     EB E0 61 FC | 	wrlong	local06, local01
04a98     3C 5E 85 F1 | 	sub	fp, #60
04a9c     AF D6 01 FB | 	rdlong	local01, fp
04aa0     2C 5E 05 F1 | 	add	fp, #44
04aa4     AF DE 01 FB | 	rdlong	local05, fp
04aa8     30 5E 85 F1 | 	sub	fp, #48
04aac     24 D6 05 F1 | 	add	local01, #36
04ab0     EB DE 61 FC | 	wrlong	local05, local01
04ab4                 | LR__0329
04ab4     10 5E 05 F1 | 	add	fp, #16
04ab8     AF D6 09 FB | 	rdlong	local01, fp wz
04abc     10 5E 85 F1 | 	sub	fp, #16
04ac0     FC 02 90 5D |  if_ne	jmp	#LR__0336
04ac4     04 5E 05 F1 | 	add	fp, #4
04ac8     AF D6 01 FB | 	rdlong	local01, fp
04acc     3C 5E 05 F1 | 	add	fp, #60
04ad0     AF CC 01 FB | 	rdlong	arg01, fp
04ad4     10 5E 85 F1 | 	sub	fp, #16
04ad8     AF CE 01 FB | 	rdlong	arg02, fp
04adc     30 5E 85 F1 | 	sub	fp, #48
04ae0     54 E7 BF FD | 	call	#_ff_cc_ld_clust_0237
04ae4     D9 DA 01 F6 | 	mov	local03, result1
04ae8     08 D6 05 F1 | 	add	local01, #8
04aec     EB DA 61 FC | 	wrlong	local03, local01
04af0     04 5E 05 F1 | 	add	fp, #4
04af4     AF D6 01 FB | 	rdlong	local01, fp
04af8     2C 5E 05 F1 | 	add	fp, #44
04afc     AF CC 01 FB | 	rdlong	arg01, fp
04b00     30 5E 85 F1 | 	sub	fp, #48
04b04     1C CC 05 F1 | 	add	arg01, #28
04b08     B8 D5 BF FD | 	call	#_ff_cc_ld_dword_0178
04b0c     0C D6 05 F1 | 	add	local01, #12
04b10     EB B2 61 FC | 	wrlong	result1, local01
04b14     04 5E 05 F1 | 	add	fp, #4
04b18     AF D6 01 FB | 	rdlong	local01, fp
04b1c     3C 5E 05 F1 | 	add	fp, #60
04b20     AF DE 01 FB | 	rdlong	local05, fp
04b24     EB DE 61 FC | 	wrlong	local05, local01
04b28     3C 5E 85 F1 | 	sub	fp, #60
04b2c     AF D6 01 FB | 	rdlong	local01, fp
04b30     3C 5E 05 F1 | 	add	fp, #60
04b34     AF DE 01 FB | 	rdlong	local05, fp
04b38     06 DE 05 F1 | 	add	local05, #6
04b3c     EF E0 E1 FA | 	rdword	local06, local05
04b40     04 D6 05 F1 | 	add	local01, #4
04b44     EB E0 51 FC | 	wrword	local06, local01
04b48     3C 5E 85 F1 | 	sub	fp, #60
04b4c     AF D6 01 FB | 	rdlong	local01, fp
04b50     08 5E 05 F1 | 	add	fp, #8
04b54     AF DE C1 FA | 	rdbyte	local05, fp
04b58     10 D6 05 F1 | 	add	local01, #16
04b5c     EB DE 41 FC | 	wrbyte	local05, local01
04b60     08 5E 85 F1 | 	sub	fp, #8
04b64     AF D6 01 FB | 	rdlong	local01, fp
04b68     11 D6 05 F1 | 	add	local01, #17
04b6c     EB 00 48 FC | 	wrbyte	#0, local01
04b70     AF D6 01 FB | 	rdlong	local01, fp
04b74     1C D6 05 F1 | 	add	local01, #28
04b78     EB 00 68 FC | 	wrlong	#0, local01
04b7c     AF D6 01 FB | 	rdlong	local01, fp
04b80     14 D6 05 F1 | 	add	local01, #20
04b84     EB 00 68 FC | 	wrlong	#0, local01
04b88     08 5E 05 F1 | 	add	fp, #8
04b8c     AF D6 C1 FA | 	rdbyte	local01, fp
04b90     0C 5E 85 F1 | 	sub	fp, #12
04b94     07 D6 45 F7 | 	zerox	local01, #7
04b98     20 D6 CD F7 | 	test	local01, #32 wz
04b9c     20 02 90 AD |  if_e	jmp	#LR__0335
04ba0     04 5E 05 F1 | 	add	fp, #4
04ba4     AF DE 01 FB | 	rdlong	local05, fp
04ba8     04 5E 85 F1 | 	sub	fp, #4
04bac     0C DE 05 F1 | 	add	local05, #12
04bb0     EF D8 01 FB | 	rdlong	local02, local05
04bb4     00 D8 1D F2 | 	cmp	local02, #0 wcz
04bb8     04 02 90 ED |  if_be	jmp	#LR__0335
04bbc     04 5E 05 F1 | 	add	fp, #4
04bc0     AF D6 01 FB | 	rdlong	local01, fp
04bc4     EB DE 01 F6 | 	mov	local05, local01
04bc8     0C DE 05 F1 | 	add	local05, #12
04bcc     EF E0 01 FB | 	rdlong	local06, local05
04bd0     14 D6 05 F1 | 	add	local01, #20
04bd4     EB E0 61 FC | 	wrlong	local06, local01
04bd8     3C 5E 05 F1 | 	add	fp, #60
04bdc     AF E2 01 FB | 	rdlong	local07, fp
04be0     0A E2 05 F1 | 	add	local07, #10
04be4     F1 E0 E1 FA | 	rdword	local06, local07
04be8     09 E0 65 F0 | 	shl	local06, #9
04bec     08 5E 05 F1 | 	add	fp, #8
04bf0     AF E0 61 FC | 	wrlong	local06, fp
04bf4     44 5E 85 F1 | 	sub	fp, #68
04bf8     AF D6 01 FB | 	rdlong	local01, fp
04bfc     08 D6 05 F1 | 	add	local01, #8
04c00     EB DE 01 FB | 	rdlong	local05, local01
04c04     48 5E 05 F1 | 	add	fp, #72
04c08     AF DE 61 FC | 	wrlong	local05, fp
04c0c                 | ' 				fp->fptr = fp->obj.objsize;
04c0c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
04c0c                 | ' 				clst = fp->obj.sclust;
04c0c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
04c0c     48 5E 85 F1 | 	sub	fp, #72
04c10     AF D6 01 FB | 	rdlong	local01, fp
04c14     0C D6 05 F1 | 	add	local01, #12
04c18     EB DE 01 FB | 	rdlong	local05, local01
04c1c     50 5E 05 F1 | 	add	fp, #80
04c20     AF DE 61 FC | 	wrlong	local05, fp
04c24     54 5E 85 F1 | 	sub	fp, #84
04c28                 | LR__0330
04c28     10 5E 05 F1 | 	add	fp, #16
04c2c     AF E0 01 FB | 	rdlong	local06, fp
04c30     10 5E 85 F1 | 	sub	fp, #16
04c34     F0 DC 09 F6 | 	mov	local04, local06 wz
04c38     B0 00 90 5D |  if_ne	jmp	#LR__0331
04c3c     54 5E 05 F1 | 	add	fp, #84
04c40     AF DA 01 FB | 	rdlong	local03, fp
04c44     ED D8 01 F6 | 	mov	local02, local03
04c48     0C 5E 85 F1 | 	sub	fp, #12
04c4c     AF E4 01 FB | 	rdlong	local08, fp
04c50     48 5E 85 F1 | 	sub	fp, #72
04c54     F2 E6 01 F6 | 	mov	local09, local08
04c58     F3 D8 19 F2 | 	cmp	local02, local09 wcz
04c5c     8C 00 90 ED |  if_be	jmp	#LR__0331
04c60     04 5E 05 F1 | 	add	fp, #4
04c64     AF CC 01 FB | 	rdlong	arg01, fp
04c68     48 5E 05 F1 | 	add	fp, #72
04c6c     AF E8 01 FB | 	rdlong	local10, fp
04c70     4C 5E 85 F1 | 	sub	fp, #76
04c74     F4 EA 01 F6 | 	mov	local11, local10
04c78     F5 CE 01 F6 | 	mov	arg02, local11
04c7c     74 D8 BF FD | 	call	#_ff_cc_get_fat_0204
04c80     D9 EC 01 F6 | 	mov	local12, result1
04c84     4C 5E 05 F1 | 	add	fp, #76
04c88     AF EC 61 FC | 	wrlong	local12, fp
04c8c     4C 5E 85 F1 | 	sub	fp, #76
04c90     01 EC 1D F2 | 	cmp	local12, #1 wcz
04c94     10 5E 05 E1 |  if_be	add	fp, #16
04c98     AF 04 68 EC |  if_be	wrlong	#2, fp
04c9c     10 5E 85 E1 |  if_be	sub	fp, #16
04ca0     4C 5E 05 F1 | 	add	fp, #76
04ca4     AF EE 01 FB | 	rdlong	local13, fp
04ca8     4C 5E 85 F1 | 	sub	fp, #76
04cac     FF FF 7F FF 
04cb0     FF EF 0D F2 | 	cmp	local13, ##-1 wz
04cb4     10 5E 05 A1 |  if_e	add	fp, #16
04cb8     AF 02 68 AC |  if_e	wrlong	#1, fp
04cbc     10 5E 85 A1 |  if_e	sub	fp, #16
04cc0     54 5E 05 F1 | 	add	fp, #84
04cc4     AF F0 01 FB | 	rdlong	local14, fp
04cc8     F8 EE 01 F6 | 	mov	local13, local14
04ccc     0C 5E 85 F1 | 	sub	fp, #12
04cd0     AF F2 01 FB | 	rdlong	local15, fp
04cd4     F9 F4 01 F6 | 	mov	local16, local15
04cd8     FA EE 81 F1 | 	sub	local13, local16
04cdc     0C 5E 05 F1 | 	add	fp, #12
04ce0     AF EE 61 FC | 	wrlong	local13, fp
04ce4     54 5E 85 F1 | 	sub	fp, #84
04ce8     3C FF 9F FD | 	jmp	#LR__0330
04cec                 | LR__0331
04cec     04 5E 05 F1 | 	add	fp, #4
04cf0     AF D6 01 FB | 	rdlong	local01, fp
04cf4     48 5E 05 F1 | 	add	fp, #72
04cf8     AF DE 01 FB | 	rdlong	local05, fp
04cfc     18 D6 05 F1 | 	add	local01, #24
04d00     EB DE 61 FC | 	wrlong	local05, local01
04d04     3C 5E 85 F1 | 	sub	fp, #60
04d08     AF E2 01 FB | 	rdlong	local07, fp
04d0c     10 5E 85 F1 | 	sub	fp, #16
04d10     F1 D6 09 F6 | 	mov	local01, local07 wz
04d14     A8 00 90 5D |  if_ne	jmp	#LR__0334
04d18     54 5E 05 F1 | 	add	fp, #84
04d1c     AF E0 01 FB | 	rdlong	local06, fp
04d20     54 5E 85 F1 | 	sub	fp, #84
04d24     F0 DC 01 F6 | 	mov	local04, local06
04d28     EE DE 01 F6 | 	mov	local05, local04
04d2c     FF DF 0D F5 | 	and	local05, #511 wz
04d30     8C 00 90 AD |  if_e	jmp	#LR__0334
04d34     40 5E 05 F1 | 	add	fp, #64
04d38     AF CC 01 FB | 	rdlong	arg01, fp
04d3c     0C 5E 05 F1 | 	add	fp, #12
04d40     AF DC 01 FB | 	rdlong	local04, fp
04d44     4C 5E 85 F1 | 	sub	fp, #76
04d48     EE DE 01 F6 | 	mov	local05, local04
04d4c     EF CE 01 F6 | 	mov	arg02, local05
04d50     60 D7 BF FD | 	call	#_ff_cc_clst2sect_0199
04d54     D9 E0 01 F6 | 	mov	local06, result1
04d58     50 5E 05 F1 | 	add	fp, #80
04d5c     AF E0 61 FC | 	wrlong	local06, fp
04d60     AF E2 09 FB | 	rdlong	local07, fp wz
04d64     50 5E 85 F1 | 	sub	fp, #80
04d68     14 00 90 5D |  if_ne	jmp	#LR__0332
04d6c     02 D6 05 F6 | 	mov	local01, #2
04d70     10 5E 05 F1 | 	add	fp, #16
04d74     AF 04 68 FC | 	wrlong	#2, fp
04d78     10 5E 85 F1 | 	sub	fp, #16
04d7c     40 00 90 FD | 	jmp	#LR__0333
04d80                 | LR__0332
04d80     04 5E 05 F1 | 	add	fp, #4
04d84     AF E2 01 FB | 	rdlong	local07, fp
04d88     F1 D6 01 F6 | 	mov	local01, local07
04d8c     4C 5E 05 F1 | 	add	fp, #76
04d90     AF DC 01 FB | 	rdlong	local04, fp
04d94     EE DE 01 F6 | 	mov	local05, local04
04d98     04 5E 05 F1 | 	add	fp, #4
04d9c     AF DA 01 FB | 	rdlong	local03, fp
04da0     54 5E 85 F1 | 	sub	fp, #84
04da4     ED D8 01 F6 | 	mov	local02, local03
04da8     EC E0 01 F6 | 	mov	local06, local02
04dac     09 E0 45 F0 | 	shr	local06, #9
04db0     F0 DE 01 F1 | 	add	local05, local06
04db4     1C D6 05 F1 | 	add	local01, #28
04db8     EB DE 61 FC | 	wrlong	local05, local01
04dbc     1C D6 85 F1 | 	sub	local01, #28
04dc0                 | LR__0333
04dc0                 | LR__0334
04dc0                 | LR__0335
04dc0                 | LR__0336
04dc0                 | LR__0337
04dc0     10 5E 05 F1 | 	add	fp, #16
04dc4     AF D6 09 FB | 	rdlong	local01, fp wz
04dc8     10 5E 85 F1 | 	sub	fp, #16
04dcc     10 00 90 AD |  if_e	jmp	#LR__0338
04dd0     04 5E 05 F1 | 	add	fp, #4
04dd4     AF D6 01 FB | 	rdlong	local01, fp
04dd8     04 5E 85 F1 | 	sub	fp, #4
04ddc     EB 00 68 FC | 	wrlong	#0, local01
04de0                 | LR__0338
04de0                 | ' 
04de0                 | ' 	return res ;
04de0     10 5E 05 F1 | 	add	fp, #16
04de4     AF B2 01 FB | 	rdlong	result1, fp
04de8     10 5E 85 F1 | 	sub	fp, #16
04dec                 | LR__0339
04dec     AF F0 03 F6 | 	mov	ptra, fp
04df0     BA 00 A0 FD | 	call	#popregs_
04df4                 | _ff_cc_f_open_ret
04df4     2D 00 64 FD | 	ret
04df8                 | 
04df8                 | _ff_cc_f_read
04df8     19 5A 05 F6 | 	mov	COUNT_, #25
04dfc     B0 00 A0 FD | 	call	#pushregs_
04e00     38 F0 07 F1 | 	add	ptra, #56
04e04     04 5E 05 F1 | 	add	fp, #4
04e08     AF CC 61 FC | 	wrlong	arg01, fp
04e0c     04 5E 05 F1 | 	add	fp, #4
04e10     AF CE 61 FC | 	wrlong	arg02, fp
04e14     04 5E 05 F1 | 	add	fp, #4
04e18     AF D0 61 FC | 	wrlong	arg03, fp
04e1c     04 5E 05 F1 | 	add	fp, #4
04e20     AF D2 61 FC | 	wrlong	arg04, fp
04e24     18 5E 05 F1 | 	add	fp, #24
04e28     AF 00 68 FC | 	wrlong	#0, fp
04e2c     20 5E 85 F1 | 	sub	fp, #32
04e30     AF D6 01 FB | 	rdlong	local01, fp
04e34     2C 5E 05 F1 | 	add	fp, #44
04e38     AF D6 61 FC | 	wrlong	local01, fp
04e3c     24 5E 85 F1 | 	sub	fp, #36
04e40     AF D6 01 FB | 	rdlong	local01, fp
04e44     EB 00 68 FC | 	wrlong	#0, local01
04e48     0C 5E 85 F1 | 	sub	fp, #12
04e4c     AF CC 01 FB | 	rdlong	arg01, fp
04e50     14 5E 05 F1 | 	add	fp, #20
04e54     AF CE 01 F6 | 	mov	arg02, fp
04e58     18 5E 85 F1 | 	sub	fp, #24
04e5c     84 F6 BF FD | 	call	#_ff_cc_validate_0294
04e60     14 5E 05 F1 | 	add	fp, #20
04e64     AF B2 61 FC | 	wrlong	result1, fp
04e68     D9 D8 01 F6 | 	mov	local02, result1
04e6c     14 5E 85 F1 | 	sub	fp, #20
04e70     EC D6 09 F6 | 	mov	local01, local02 wz
04e74     2C 00 90 5D |  if_ne	jmp	#LR__0340
04e78     04 5E 05 F1 | 	add	fp, #4
04e7c     AF DA 01 FB | 	rdlong	local03, fp
04e80     11 DA 05 F1 | 	add	local03, #17
04e84     ED DC C1 FA | 	rdbyte	local04, local03
04e88     EE DE 01 F6 | 	mov	local05, local04
04e8c     07 DE 45 F7 | 	zerox	local05, #7
04e90     10 5E 05 F1 | 	add	fp, #16
04e94     AF DE 61 FC | 	wrlong	local05, fp
04e98     14 5E 85 F1 | 	sub	fp, #20
04e9c     EF E0 09 F6 | 	mov	local06, local05 wz
04ea0     10 00 90 AD |  if_e	jmp	#LR__0341
04ea4                 | LR__0340
04ea4     14 5E 05 F1 | 	add	fp, #20
04ea8     AF B2 01 FB | 	rdlong	result1, fp
04eac     14 5E 85 F1 | 	sub	fp, #20
04eb0     84 05 90 FD | 	jmp	#LR__0359
04eb4                 | LR__0341
04eb4     04 5E 05 F1 | 	add	fp, #4
04eb8     AF D8 01 FB | 	rdlong	local02, fp
04ebc     04 5E 85 F1 | 	sub	fp, #4
04ec0     10 D8 05 F1 | 	add	local02, #16
04ec4     EC D6 C1 FA | 	rdbyte	local01, local02
04ec8     01 D6 CD F7 | 	test	local01, #1 wz
04ecc     07 B2 05 A6 |  if_e	mov	result1, #7
04ed0     64 05 90 AD |  if_e	jmp	#LR__0359
04ed4     04 5E 05 F1 | 	add	fp, #4
04ed8     AF D8 01 FB | 	rdlong	local02, fp
04edc     EC DA 01 F6 | 	mov	local03, local02
04ee0     0C D8 05 F1 | 	add	local02, #12
04ee4     EC D6 01 FB | 	rdlong	local01, local02
04ee8     14 DA 05 F1 | 	add	local03, #20
04eec     ED E0 01 FB | 	rdlong	local06, local03
04ef0     F0 D6 81 F1 | 	sub	local01, local06
04ef4     20 5E 05 F1 | 	add	fp, #32
04ef8     AF D6 61 FC | 	wrlong	local01, fp
04efc     18 5E 85 F1 | 	sub	fp, #24
04f00     AF D6 01 FB | 	rdlong	local01, fp
04f04     18 5E 05 F1 | 	add	fp, #24
04f08     AF E2 01 FB | 	rdlong	local07, fp
04f0c     24 5E 85 F1 | 	sub	fp, #36
04f10     F1 D6 19 F2 | 	cmp	local01, local07 wcz
04f14     14 00 90 ED |  if_be	jmp	#LR__0342
04f18     24 5E 05 F1 | 	add	fp, #36
04f1c     AF D6 01 FB | 	rdlong	local01, fp
04f20     18 5E 85 F1 | 	sub	fp, #24
04f24     AF D6 61 FC | 	wrlong	local01, fp
04f28     0C 5E 85 F1 | 	sub	fp, #12
04f2c                 | LR__0342
04f2c                 | ' 
04f2c                 | ' 	for ( ; btr;
04f2c                 | LR__0343
04f2c     0C 5E 05 F1 | 	add	fp, #12
04f30     AF D8 01 FB | 	rdlong	local02, fp
04f34     0C 5E 85 F1 | 	sub	fp, #12
04f38     EC D6 09 F6 | 	mov	local01, local02 wz
04f3c     F4 04 90 AD |  if_e	jmp	#LR__0358
04f40     04 5E 05 F1 | 	add	fp, #4
04f44     AF E2 01 FB | 	rdlong	local07, fp
04f48     04 5E 85 F1 | 	sub	fp, #4
04f4c     14 E2 05 F1 | 	add	local07, #20
04f50     F1 E4 01 FB | 	rdlong	local08, local07
04f54     FF E5 CD F7 | 	test	local08, #511 wz
04f58     64 03 90 5D |  if_ne	jmp	#LR__0354
04f5c     04 5E 05 F1 | 	add	fp, #4
04f60     AF DA 01 FB | 	rdlong	local03, fp
04f64     14 DA 05 F1 | 	add	local03, #20
04f68     ED E2 01 FB | 	rdlong	local07, local03
04f6c     09 E2 45 F0 | 	shr	local07, #9
04f70     14 5E 05 F1 | 	add	fp, #20
04f74     AF E6 01 FB | 	rdlong	local09, fp
04f78     F3 E8 01 F6 | 	mov	local10, local09
04f7c     0A E8 05 F1 | 	add	local10, #10
04f80     F4 EA E1 FA | 	rdword	local11, local10
04f84     F5 DE 01 F6 | 	mov	local05, local11
04f88     0F DE 45 F7 | 	zerox	local05, #15
04f8c     01 DE 85 F1 | 	sub	local05, #1
04f90     EF E2 01 F5 | 	and	local07, local05
04f94     18 5E 05 F1 | 	add	fp, #24
04f98     AF E2 61 FC | 	wrlong	local07, fp
04f9c     AF E2 09 FB | 	rdlong	local07, fp wz
04fa0     30 5E 85 F1 | 	sub	fp, #48
04fa4     E0 00 90 5D |  if_ne	jmp	#LR__0348
04fa8     04 5E 05 F1 | 	add	fp, #4
04fac     AF E2 01 FB | 	rdlong	local07, fp
04fb0     04 5E 85 F1 | 	sub	fp, #4
04fb4     14 E2 05 F1 | 	add	local07, #20
04fb8     F1 E4 09 FB | 	rdlong	local08, local07 wz
04fbc     20 00 90 5D |  if_ne	jmp	#LR__0344
04fc0     04 5E 05 F1 | 	add	fp, #4
04fc4     AF E2 01 FB | 	rdlong	local07, fp
04fc8     08 E2 05 F1 | 	add	local07, #8
04fcc     F1 E4 01 FB | 	rdlong	local08, local07
04fd0     18 5E 05 F1 | 	add	fp, #24
04fd4     AF E4 61 FC | 	wrlong	local08, fp
04fd8     1C 5E 85 F1 | 	sub	fp, #28
04fdc     28 00 90 FD | 	jmp	#LR__0345
04fe0                 | LR__0344
04fe0     04 5E 05 F1 | 	add	fp, #4
04fe4     AF CC 01 FB | 	rdlong	arg01, fp
04fe8     E6 E0 01 F6 | 	mov	local06, arg01
04fec     04 5E 85 F1 | 	sub	fp, #4
04ff0     18 E0 05 F1 | 	add	local06, #24
04ff4     F0 CE 01 FB | 	rdlong	arg02, local06
04ff8     F8 D4 BF FD | 	call	#_ff_cc_get_fat_0204
04ffc     1C 5E 05 F1 | 	add	fp, #28
05000     AF B2 61 FC | 	wrlong	result1, fp
05004     1C 5E 85 F1 | 	sub	fp, #28
05008                 | LR__0345
05008     1C 5E 05 F1 | 	add	fp, #28
0500c     AF E2 01 FB | 	rdlong	local07, fp
05010     1C 5E 85 F1 | 	sub	fp, #28
05014     02 E2 1D F2 | 	cmp	local07, #2 wcz
05018     1C 00 90 3D |  if_ae	jmp	#LR__0346
0501c     04 5E 05 F1 | 	add	fp, #4
05020     AF E2 01 FB | 	rdlong	local07, fp
05024     04 5E 85 F1 | 	sub	fp, #4
05028     11 E2 05 F1 | 	add	local07, #17
0502c     F1 04 48 FC | 	wrbyte	#2, local07
05030     02 B2 05 F6 | 	mov	result1, #2
05034     00 04 90 FD | 	jmp	#LR__0359
05038                 | LR__0346
05038     1C 5E 05 F1 | 	add	fp, #28
0503c     AF E2 01 FB | 	rdlong	local07, fp
05040     1C 5E 85 F1 | 	sub	fp, #28
05044     FF FF 7F FF 
05048     FF E3 0D F2 | 	cmp	local07, ##-1 wz
0504c     1C 00 90 5D |  if_ne	jmp	#LR__0347
05050     04 5E 05 F1 | 	add	fp, #4
05054     AF E2 01 FB | 	rdlong	local07, fp
05058     04 5E 85 F1 | 	sub	fp, #4
0505c     11 E2 05 F1 | 	add	local07, #17
05060     F1 02 48 FC | 	wrbyte	#1, local07
05064     01 B2 05 F6 | 	mov	result1, #1
05068     CC 03 90 FD | 	jmp	#LR__0359
0506c                 | LR__0347
0506c     04 5E 05 F1 | 	add	fp, #4
05070     AF E2 01 FB | 	rdlong	local07, fp
05074     18 5E 05 F1 | 	add	fp, #24
05078     AF E4 01 FB | 	rdlong	local08, fp
0507c     1C 5E 85 F1 | 	sub	fp, #28
05080     18 E2 05 F1 | 	add	local07, #24
05084     F1 E4 61 FC | 	wrlong	local08, local07
05088                 | LR__0348
05088     18 5E 05 F1 | 	add	fp, #24
0508c     AF CC 01 FB | 	rdlong	arg01, fp
05090     14 5E 85 F1 | 	sub	fp, #20
05094     AF E4 01 FB | 	rdlong	local08, fp
05098     04 5E 85 F1 | 	sub	fp, #4
0509c     18 E4 05 F1 | 	add	local08, #24
050a0     F2 CE 01 FB | 	rdlong	arg02, local08
050a4     0C D4 BF FD | 	call	#_ff_cc_clst2sect_0199
050a8     20 5E 05 F1 | 	add	fp, #32
050ac     AF B2 61 FC | 	wrlong	result1, fp
050b0     AF E2 09 FB | 	rdlong	local07, fp wz
050b4     20 5E 85 F1 | 	sub	fp, #32
050b8     1C 00 90 5D |  if_ne	jmp	#LR__0349
050bc     04 5E 05 F1 | 	add	fp, #4
050c0     AF E2 01 FB | 	rdlong	local07, fp
050c4     04 5E 85 F1 | 	sub	fp, #4
050c8     11 E2 05 F1 | 	add	local07, #17
050cc     F1 04 48 FC | 	wrbyte	#2, local07
050d0     02 B2 05 F6 | 	mov	result1, #2
050d4     60 03 90 FD | 	jmp	#LR__0359
050d8                 | LR__0349
050d8     20 5E 05 F1 | 	add	fp, #32
050dc     AF E2 01 FB | 	rdlong	local07, fp
050e0     10 5E 05 F1 | 	add	fp, #16
050e4     AF E4 01 FB | 	rdlong	local08, fp
050e8     F2 E2 01 F1 | 	add	local07, local08
050ec     10 5E 85 F1 | 	sub	fp, #16
050f0     AF E2 61 FC | 	wrlong	local07, fp
050f4     14 5E 85 F1 | 	sub	fp, #20
050f8     AF E2 01 FB | 	rdlong	local07, fp
050fc     09 E2 45 F0 | 	shr	local07, #9
05100     20 5E 05 F1 | 	add	fp, #32
05104     AF E2 61 FC | 	wrlong	local07, fp
05108     2C 5E 85 F1 | 	sub	fp, #44
0510c     00 E2 1D F2 | 	cmp	local07, #0 wcz
05110     90 01 90 ED |  if_be	jmp	#LR__0353
05114     30 5E 05 F1 | 	add	fp, #48
05118     AF E2 01 FB | 	rdlong	local07, fp
0511c     04 5E 85 F1 | 	sub	fp, #4
05120     AF E4 01 FB | 	rdlong	local08, fp
05124     F2 E2 01 F1 | 	add	local07, local08
05128     14 5E 85 F1 | 	sub	fp, #20
0512c     AF DE 01 FB | 	rdlong	local05, fp
05130     18 5E 85 F1 | 	sub	fp, #24
05134     0A DE 05 F1 | 	add	local05, #10
05138     EF E0 E1 FA | 	rdword	local06, local05
0513c     F0 E2 19 F2 | 	cmp	local07, local06 wcz
05140     28 00 90 ED |  if_be	jmp	#LR__0350
05144     18 5E 05 F1 | 	add	fp, #24
05148     AF DA 01 FB | 	rdlong	local03, fp
0514c     0A DA 05 F1 | 	add	local03, #10
05150     ED E2 E1 FA | 	rdword	local07, local03
05154     18 5E 05 F1 | 	add	fp, #24
05158     AF E0 01 FB | 	rdlong	local06, fp
0515c     F0 E2 81 F1 | 	sub	local07, local06
05160     04 5E 85 F1 | 	sub	fp, #4
05164     AF E2 61 FC | 	wrlong	local07, fp
05168     2C 5E 85 F1 | 	sub	fp, #44
0516c                 | LR__0350
0516c     18 5E 05 F1 | 	add	fp, #24
05170     AF E2 01 FB | 	rdlong	local07, fp
05174     01 E2 05 F1 | 	add	local07, #1
05178     F1 CC C1 FA | 	rdbyte	arg01, local07
0517c     1C 5E 05 F1 | 	add	fp, #28
05180     AF CE 01 FB | 	rdlong	arg02, fp
05184     14 5E 85 F1 | 	sub	fp, #20
05188     AF D0 01 FB | 	rdlong	arg03, fp
0518c     0C 5E 05 F1 | 	add	fp, #12
05190     AF D2 01 FB | 	rdlong	arg04, fp
05194     2C 5E 85 F1 | 	sub	fp, #44
05198     7C CA BF FD | 	call	#_ff_cc_disk_read
0519c     00 B2 0D F2 | 	cmp	result1, #0 wz
051a0     1C 00 90 AD |  if_e	jmp	#LR__0351
051a4     04 5E 05 F1 | 	add	fp, #4
051a8     AF E2 01 FB | 	rdlong	local07, fp
051ac     04 5E 85 F1 | 	sub	fp, #4
051b0     11 E2 05 F1 | 	add	local07, #17
051b4     F1 02 48 FC | 	wrbyte	#1, local07
051b8     01 B2 05 F6 | 	mov	result1, #1
051bc     78 02 90 FD | 	jmp	#LR__0359
051c0                 | LR__0351
051c0     18 5E 05 F1 | 	add	fp, #24
051c4     AF E2 01 FB | 	rdlong	local07, fp
051c8     18 5E 85 F1 | 	sub	fp, #24
051cc     03 E2 05 F1 | 	add	local07, #3
051d0     F1 E4 C9 FA | 	rdbyte	local08, local07 wz
051d4     B0 00 90 AD |  if_e	jmp	#LR__0352
051d8     18 5E 05 F1 | 	add	fp, #24
051dc     AF DE 01 FB | 	rdlong	local05, fp
051e0     2C DE 05 F1 | 	add	local05, #44
051e4     EF E0 01 FB | 	rdlong	local06, local05
051e8     08 5E 05 F1 | 	add	fp, #8
051ec     AF EA 01 FB | 	rdlong	local11, fp
051f0     F5 E0 81 F1 | 	sub	local06, local11
051f4     0C 5E 05 F1 | 	add	fp, #12
051f8     AF EC 01 FB | 	rdlong	local12, fp
051fc     2C 5E 85 F1 | 	sub	fp, #44
05200     F6 E0 19 F2 | 	cmp	local06, local12 wcz
05204     80 00 90 3D |  if_ae	jmp	#LR__0352
05208     34 5E 05 F1 | 	add	fp, #52
0520c     AF DA 01 FB | 	rdlong	local03, fp
05210     ED E2 01 F6 | 	mov	local07, local03
05214     1C 5E 85 F1 | 	sub	fp, #28
05218     AF E0 01 FB | 	rdlong	local06, fp
0521c     F0 DC 01 F6 | 	mov	local04, local06
05220     2C DC 05 F1 | 	add	local04, #44
05224     EE DE 01 FB | 	rdlong	local05, local04
05228     2C DC 85 F1 | 	sub	local04, #44
0522c     EF E4 01 F6 | 	mov	local08, local05
05230     08 5E 05 F1 | 	add	fp, #8
05234     AF E6 01 FB | 	rdlong	local09, fp
05238     F3 E8 01 F6 | 	mov	local10, local09
0523c     F4 E4 81 F1 | 	sub	local08, local10
05240     F2 EA 01 F6 | 	mov	local11, local08
05244     09 EA 65 F0 | 	shl	local11, #9
05248     F5 EE 01 F6 | 	mov	local13, local11
0524c     F5 E2 01 F1 | 	add	local07, local11
05250     F1 EC 01 F6 | 	mov	local12, local07
05254     08 5E 85 F1 | 	sub	fp, #8
05258     AF F0 01 FB | 	rdlong	local14, fp
0525c     18 5E 85 F1 | 	sub	fp, #24
05260     F8 F2 01 F6 | 	mov	local15, local14
05264     30 F2 05 F1 | 	add	local15, #48
05268     F9 F4 01 F6 | 	mov	local16, local15
0526c     FA F6 01 F6 | 	mov	local17, local16
05270     09 F8 C5 F9 | 	decod	local18, #9
05274     F6 CC 01 F6 | 	mov	arg01, local12
05278     FB CE 01 F6 | 	mov	arg02, local17
0527c     09 D0 C5 F9 | 	decod	arg03, #9
05280     30 F2 85 F1 | 	sub	local15, #48
05284     CC CE BF FD | 	call	#_ff_cc_mem_cpy_0183
05288                 | LR__0352
05288     2C 5E 05 F1 | 	add	fp, #44
0528c     AF E2 01 FB | 	rdlong	local07, fp
05290     09 E2 65 F0 | 	shl	local07, #9
05294     04 5E 85 F1 | 	sub	fp, #4
05298     AF E2 61 FC | 	wrlong	local07, fp
0529c     28 5E 85 F1 | 	sub	fp, #40
052a0                 | ' 					mem_cpy(rbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ), fs->win,  ((UINT) 512 ) );
052a0                 | ' 				}
052a0                 | ' #line 3949 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
052a0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
052a0                 | ' 				continue;
052a0     E8 00 90 FD | 	jmp	#LR__0357
052a4                 | LR__0353
052a4     04 5E 05 F1 | 	add	fp, #4
052a8     AF E2 01 FB | 	rdlong	local07, fp
052ac     1C 5E 05 F1 | 	add	fp, #28
052b0     AF E4 01 FB | 	rdlong	local08, fp
052b4     20 5E 85 F1 | 	sub	fp, #32
052b8     1C E2 05 F1 | 	add	local07, #28
052bc     F1 E4 61 FC | 	wrlong	local08, local07
052c0                 | LR__0354
052c0     04 5E 05 F1 | 	add	fp, #4
052c4     AF DA 01 FB | 	rdlong	local03, fp
052c8     14 DA 05 F1 | 	add	local03, #20
052cc     ED DC 01 FB | 	rdlong	local04, local03
052d0     FF DD 05 F5 | 	and	local04, #511
052d4     09 E2 C5 F9 | 	decod	local07, #9
052d8     EE E2 81 F1 | 	sub	local07, local04
052dc     24 5E 05 F1 | 	add	fp, #36
052e0     AF E2 61 FC | 	wrlong	local07, fp
052e4     1C 5E 85 F1 | 	sub	fp, #28
052e8     AF E4 01 FB | 	rdlong	local08, fp
052ec     0C 5E 85 F1 | 	sub	fp, #12
052f0     F2 E2 19 F2 | 	cmp	local07, local08 wcz
052f4     14 00 90 ED |  if_be	jmp	#LR__0355
052f8     0C 5E 05 F1 | 	add	fp, #12
052fc     AF E2 01 FB | 	rdlong	local07, fp
05300     1C 5E 05 F1 | 	add	fp, #28
05304     AF E2 61 FC | 	wrlong	local07, fp
05308     28 5E 85 F1 | 	sub	fp, #40
0530c                 | LR__0355
0530c     18 5E 05 F1 | 	add	fp, #24
05310     AF CC 01 FB | 	rdlong	arg01, fp
05314     14 5E 85 F1 | 	sub	fp, #20
05318     AF E4 01 FB | 	rdlong	local08, fp
0531c     04 5E 85 F1 | 	sub	fp, #4
05320     1C E4 05 F1 | 	add	local08, #28
05324     F2 CE 01 FB | 	rdlong	arg02, local08
05328     90 CF BF FD | 	call	#_ff_cc_move_window_0196
0532c     00 B2 0D F2 | 	cmp	result1, #0 wz
05330     1C 00 90 AD |  if_e	jmp	#LR__0356
05334     04 5E 05 F1 | 	add	fp, #4
05338     AF E2 01 FB | 	rdlong	local07, fp
0533c     04 5E 85 F1 | 	sub	fp, #4
05340     11 E2 05 F1 | 	add	local07, #17
05344     F1 02 48 FC | 	wrbyte	#1, local07
05348     01 B2 05 F6 | 	mov	result1, #1
0534c     E8 00 90 FD | 	jmp	#LR__0359
05350                 | LR__0356
05350     34 5E 05 F1 | 	add	fp, #52
05354     AF CC 01 FB | 	rdlong	arg01, fp
05358     1C 5E 85 F1 | 	sub	fp, #28
0535c     AF CE 01 FB | 	rdlong	arg02, fp
05360     30 CE 05 F1 | 	add	arg02, #48
05364     14 5E 85 F1 | 	sub	fp, #20
05368     AF E8 01 FB | 	rdlong	local10, fp
0536c     14 E8 05 F1 | 	add	local10, #20
05370     F4 F2 01 FB | 	rdlong	local15, local10
05374     FF F3 05 F5 | 	and	local15, #511
05378     F9 CE 01 F1 | 	add	arg02, local15
0537c     24 5E 05 F1 | 	add	fp, #36
05380     AF D0 01 FB | 	rdlong	arg03, fp
05384     28 5E 85 F1 | 	sub	fp, #40
05388     C8 CD BF FD | 	call	#_ff_cc_mem_cpy_0183
0538c                 | LR__0357
0538c     0C 5E 05 F1 | 	add	fp, #12
05390     AF E2 01 FB | 	rdlong	local07, fp
05394     1C 5E 05 F1 | 	add	fp, #28
05398     AF DC 01 FB | 	rdlong	local04, fp
0539c     EE E2 81 F1 | 	sub	local07, local04
053a0     1C 5E 85 F1 | 	sub	fp, #28
053a4     AF E2 61 FC | 	wrlong	local07, fp
053a8     04 5E 05 F1 | 	add	fp, #4
053ac     AF E0 01 FB | 	rdlong	local06, fp
053b0     F0 E8 01 FB | 	rdlong	local10, local06
053b4     18 5E 05 F1 | 	add	fp, #24
053b8     AF EC 01 FB | 	rdlong	local12, fp
053bc     F6 EE 01 F6 | 	mov	local13, local12
053c0     F6 E8 01 F1 | 	add	local10, local12
053c4     F0 E8 61 FC | 	wrlong	local10, local06
053c8     0C 5E 05 F1 | 	add	fp, #12
053cc     AF F0 01 FB | 	rdlong	local14, fp
053d0     F8 F2 01 F6 | 	mov	local15, local14
053d4     0C 5E 85 F1 | 	sub	fp, #12
053d8     AF F6 01 FB | 	rdlong	local17, fp
053dc     FB F4 01 F6 | 	mov	local16, local17
053e0     FB F2 01 F1 | 	add	local15, local17
053e4     0C 5E 05 F1 | 	add	fp, #12
053e8     AF F2 61 FC | 	wrlong	local15, fp
053ec     30 5E 85 F1 | 	sub	fp, #48
053f0     AF FA 01 FB | 	rdlong	local19, fp
053f4     FD F8 01 F6 | 	mov	local18, local19
053f8     FD FC 01 F6 | 	mov	local20, local19
053fc     FE FE 01 F6 | 	mov	local21, local20
05400     14 FE 05 F1 | 	add	local21, #20
05404     FF 00 02 FB | 	rdlong	local22, local21
05408     14 FE 85 F1 | 	sub	local21, #20
0540c     00 03 02 F6 | 	mov	local23, local22
05410     24 5E 05 F1 | 	add	fp, #36
05414     AF 04 02 FB | 	rdlong	local24, fp
05418     28 5E 85 F1 | 	sub	fp, #40
0541c     02 07 02 F6 | 	mov	local25, local24
05420     02 03 02 F1 | 	add	local23, local24
05424     14 F8 05 F1 | 	add	local18, #20
05428     FC 02 62 FC | 	wrlong	local23, local18
0542c     14 F8 85 F1 | 	sub	local18, #20
05430     F8 FA 9F FD | 	jmp	#LR__0343
05434                 | LR__0358
05434                 | ' 		mem_cpy(rbuff, fs->win + fp->fptr %  ((UINT) 512 ) , rcnt);
05434                 | ' #line 3973 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
05434                 | ' 	}
05434                 | ' 
05434                 | ' 	return FR_OK ;
05434     00 B2 05 F6 | 	mov	result1, #0
05438                 | LR__0359
05438     AF F0 03 F6 | 	mov	ptra, fp
0543c     BA 00 A0 FD | 	call	#popregs_
05440                 | _ff_cc_f_read_ret
05440     2D 00 64 FD | 	ret
05444                 | 
05444                 | _ff_cc_f_write
05444     2A 5A 05 F6 | 	mov	COUNT_, #42
05448     B0 00 A0 FD | 	call	#pushregs_
0544c     34 F0 07 F1 | 	add	ptra, #52
05450     04 5E 05 F1 | 	add	fp, #4
05454     AF CC 61 FC | 	wrlong	arg01, fp
05458     04 5E 05 F1 | 	add	fp, #4
0545c     AF CE 61 FC | 	wrlong	arg02, fp
05460     04 5E 05 F1 | 	add	fp, #4
05464     AF D0 61 FC | 	wrlong	arg03, fp
05468     04 5E 05 F1 | 	add	fp, #4
0546c     AF D2 61 FC | 	wrlong	arg04, fp
05470     14 5E 05 F1 | 	add	fp, #20
05474     AF 00 68 FC | 	wrlong	#0, fp
05478     1C 5E 85 F1 | 	sub	fp, #28
0547c     AF D6 01 FB | 	rdlong	local01, fp
05480     28 5E 05 F1 | 	add	fp, #40
05484     AF D6 61 FC | 	wrlong	local01, fp
05488     20 5E 85 F1 | 	sub	fp, #32
0548c     AF D6 01 FB | 	rdlong	local01, fp
05490     EB 00 68 FC | 	wrlong	#0, local01
05494     0C 5E 85 F1 | 	sub	fp, #12
05498     AF CC 01 FB | 	rdlong	arg01, fp
0549c     14 5E 05 F1 | 	add	fp, #20
054a0     AF CE 01 F6 | 	mov	arg02, fp
054a4     18 5E 85 F1 | 	sub	fp, #24
054a8     38 F0 BF FD | 	call	#_ff_cc_validate_0294
054ac     14 5E 05 F1 | 	add	fp, #20
054b0     AF B2 61 FC | 	wrlong	result1, fp
054b4     D9 D8 01 F6 | 	mov	local02, result1
054b8     14 5E 85 F1 | 	sub	fp, #20
054bc     EC D6 09 F6 | 	mov	local01, local02 wz
054c0     24 00 90 5D |  if_ne	jmp	#LR__0360
054c4     04 5E 05 F1 | 	add	fp, #4
054c8     AF DA 01 FB | 	rdlong	local03, fp
054cc     11 DA 05 F1 | 	add	local03, #17
054d0     ED DC C1 FA | 	rdbyte	local04, local03
054d4     10 5E 05 F1 | 	add	fp, #16
054d8     AF DC 61 FC | 	wrlong	local04, fp
054dc     14 5E 85 F1 | 	sub	fp, #20
054e0     EE DE 09 F6 | 	mov	local05, local04 wz
054e4     10 00 90 AD |  if_e	jmp	#LR__0361
054e8                 | LR__0360
054e8     14 5E 05 F1 | 	add	fp, #20
054ec     AF B2 01 FB | 	rdlong	result1, fp
054f0     14 5E 85 F1 | 	sub	fp, #20
054f4     6C 07 90 FD | 	jmp	#LR__0385
054f8                 | LR__0361
054f8     04 5E 05 F1 | 	add	fp, #4
054fc     AF D8 01 FB | 	rdlong	local02, fp
05500     04 5E 85 F1 | 	sub	fp, #4
05504     10 D8 05 F1 | 	add	local02, #16
05508     EC D6 C1 FA | 	rdbyte	local01, local02
0550c     02 D6 CD F7 | 	test	local01, #2 wz
05510     07 B2 05 A6 |  if_e	mov	result1, #7
05514     4C 07 90 AD |  if_e	jmp	#LR__0385
05518     04 5E 05 F1 | 	add	fp, #4
0551c     AF E0 01 FB | 	rdlong	local06, fp
05520     F0 E2 01 F6 | 	mov	local07, local06
05524     14 E2 05 F1 | 	add	local07, #20
05528     F1 DA 01 FB | 	rdlong	local03, local07
0552c     08 5E 05 F1 | 	add	fp, #8
05530     AF E4 01 FB | 	rdlong	local08, fp
05534     F2 DC 01 F6 | 	mov	local04, local08
05538     F2 DA 01 F1 | 	add	local03, local08
0553c     08 5E 85 F1 | 	sub	fp, #8
05540     AF E6 01 FB | 	rdlong	local09, fp
05544     04 5E 85 F1 | 	sub	fp, #4
05548     F3 E8 01 F6 | 	mov	local10, local09
0554c     14 E8 05 F1 | 	add	local10, #20
05550     F4 EA 01 FB | 	rdlong	local11, local10
05554     14 E8 85 F1 | 	sub	local10, #20
05558     F5 EC 01 F6 | 	mov	local12, local11
0555c     F6 DA 19 F2 | 	cmp	local03, local12 wcz
05560     24 00 90 3D |  if_ae	jmp	#LR__0362
05564     04 5E 05 F1 | 	add	fp, #4
05568     AF D8 01 FB | 	rdlong	local02, fp
0556c     01 D6 65 F6 | 	neg	local01, #1
05570     14 D8 05 F1 | 	add	local02, #20
05574     EC DA 01 FB | 	rdlong	local03, local02
05578     ED D6 81 F1 | 	sub	local01, local03
0557c     08 5E 05 F1 | 	add	fp, #8
05580     AF D6 61 FC | 	wrlong	local01, fp
05584     0C 5E 85 F1 | 	sub	fp, #12
05588                 | LR__0362
05588                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
05588                 | ' 	}
05588                 | ' 
05588                 | ' 	for ( ; btw;
05588                 | LR__0363
05588     0C 5E 05 F1 | 	add	fp, #12
0558c     AF D8 01 FB | 	rdlong	local02, fp
05590     0C 5E 85 F1 | 	sub	fp, #12
05594     EC D6 09 F6 | 	mov	local01, local02 wz
05598     A0 06 90 AD |  if_e	jmp	#LR__0384
0559c     04 5E 05 F1 | 	add	fp, #4
055a0     AF EE 01 FB | 	rdlong	local13, fp
055a4     04 5E 85 F1 | 	sub	fp, #4
055a8     14 EE 05 F1 | 	add	local13, #20
055ac     F7 E2 01 FB | 	rdlong	local07, local13
055b0     FF E3 CD F7 | 	test	local07, #511 wz
055b4     64 04 90 5D |  if_ne	jmp	#LR__0378
055b8     04 5E 05 F1 | 	add	fp, #4
055bc     AF DA 01 FB | 	rdlong	local03, fp
055c0     14 DA 05 F1 | 	add	local03, #20
055c4     ED EE 01 FB | 	rdlong	local13, local03
055c8     09 EE 45 F0 | 	shr	local13, #9
055cc     14 5E 05 F1 | 	add	fp, #20
055d0     AF E4 01 FB | 	rdlong	local08, fp
055d4     0A E4 05 F1 | 	add	local08, #10
055d8     F2 E6 E1 FA | 	rdword	local09, local08
055dc     F3 DC 01 F6 | 	mov	local04, local09
055e0     0F DC 45 F7 | 	zerox	local04, #15
055e4     01 DC 85 F1 | 	sub	local04, #1
055e8     EE EE 01 F5 | 	and	local13, local04
055ec     14 5E 05 F1 | 	add	fp, #20
055f0     AF EE 61 FC | 	wrlong	local13, fp
055f4     AF EE 09 FB | 	rdlong	local13, fp wz
055f8     2C 5E 85 F1 | 	sub	fp, #44
055fc     4C 01 90 5D |  if_ne	jmp	#LR__0369
05600     04 5E 05 F1 | 	add	fp, #4
05604     AF EE 01 FB | 	rdlong	local13, fp
05608     04 5E 85 F1 | 	sub	fp, #4
0560c     14 EE 05 F1 | 	add	local13, #20
05610     F7 E2 09 FB | 	rdlong	local07, local13 wz
05614     48 00 90 5D |  if_ne	jmp	#LR__0364
05618     04 5E 05 F1 | 	add	fp, #4
0561c     AF EE 01 FB | 	rdlong	local13, fp
05620     08 EE 05 F1 | 	add	local13, #8
05624     F7 E2 01 FB | 	rdlong	local07, local13
05628     18 5E 05 F1 | 	add	fp, #24
0562c     AF E2 61 FC | 	wrlong	local07, fp
05630     AF EE 09 FB | 	rdlong	local13, fp wz
05634     1C 5E 85 F1 | 	sub	fp, #28
05638     50 00 90 5D |  if_ne	jmp	#LR__0365
0563c     04 5E 05 F1 | 	add	fp, #4
05640     AF CC 01 FB | 	rdlong	arg01, fp
05644     04 5E 85 F1 | 	sub	fp, #4
05648     00 CE 05 F6 | 	mov	arg02, #0
0564c     84 D4 BF FD | 	call	#_ff_cc_create_chain_0218
05650     1C 5E 05 F1 | 	add	fp, #28
05654     AF B2 61 FC | 	wrlong	result1, fp
05658     1C 5E 85 F1 | 	sub	fp, #28
0565c     2C 00 90 FD | 	jmp	#LR__0365
05660                 | LR__0364
05660     04 5E 05 F1 | 	add	fp, #4
05664     AF CC 01 FB | 	rdlong	arg01, fp
05668     E6 DE 01 F6 | 	mov	local05, arg01
0566c     04 5E 85 F1 | 	sub	fp, #4
05670     18 DE 05 F1 | 	add	local05, #24
05674     EF CE 01 FB | 	rdlong	arg02, local05
05678     58 D4 BF FD | 	call	#_ff_cc_create_chain_0218
0567c     D9 E6 01 F6 | 	mov	local09, result1
05680     1C 5E 05 F1 | 	add	fp, #28
05684     AF E6 61 FC | 	wrlong	local09, fp
05688     1C 5E 85 F1 | 	sub	fp, #28
0568c                 | LR__0365
0568c     1C 5E 05 F1 | 	add	fp, #28
05690     AF EE 09 FB | 	rdlong	local13, fp wz
05694     1C 5E 85 F1 | 	sub	fp, #28
05698     A0 05 90 AD |  if_e	jmp	#LR__0384
0569c     1C 5E 05 F1 | 	add	fp, #28
056a0     AF EE 01 FB | 	rdlong	local13, fp
056a4     1C 5E 85 F1 | 	sub	fp, #28
056a8     01 EE 0D F2 | 	cmp	local13, #1 wz
056ac     1C 00 90 5D |  if_ne	jmp	#LR__0366
056b0     04 5E 05 F1 | 	add	fp, #4
056b4     AF EE 01 FB | 	rdlong	local13, fp
056b8     04 5E 85 F1 | 	sub	fp, #4
056bc     11 EE 05 F1 | 	add	local13, #17
056c0     F7 04 48 FC | 	wrbyte	#2, local13
056c4     02 B2 05 F6 | 	mov	result1, #2
056c8     98 05 90 FD | 	jmp	#LR__0385
056cc                 | LR__0366
056cc     1C 5E 05 F1 | 	add	fp, #28
056d0     AF EE 01 FB | 	rdlong	local13, fp
056d4     1C 5E 85 F1 | 	sub	fp, #28
056d8     FF FF 7F FF 
056dc     FF EF 0D F2 | 	cmp	local13, ##-1 wz
056e0     1C 00 90 5D |  if_ne	jmp	#LR__0367
056e4     04 5E 05 F1 | 	add	fp, #4
056e8     AF EE 01 FB | 	rdlong	local13, fp
056ec     04 5E 85 F1 | 	sub	fp, #4
056f0     11 EE 05 F1 | 	add	local13, #17
056f4     F7 02 48 FC | 	wrbyte	#1, local13
056f8     01 B2 05 F6 | 	mov	result1, #1
056fc     64 05 90 FD | 	jmp	#LR__0385
05700                 | LR__0367
05700     04 5E 05 F1 | 	add	fp, #4
05704     AF EE 01 FB | 	rdlong	local13, fp
05708     18 5E 05 F1 | 	add	fp, #24
0570c     AF E2 01 FB | 	rdlong	local07, fp
05710     18 EE 05 F1 | 	add	local13, #24
05714     F7 E2 61 FC | 	wrlong	local07, local13
05718     18 5E 85 F1 | 	sub	fp, #24
0571c     AF EE 01 FB | 	rdlong	local13, fp
05720     04 5E 85 F1 | 	sub	fp, #4
05724     08 EE 05 F1 | 	add	local13, #8
05728     F7 E2 09 FB | 	rdlong	local07, local13 wz
0572c     1C 00 90 5D |  if_ne	jmp	#LR__0368
05730     04 5E 05 F1 | 	add	fp, #4
05734     AF EE 01 FB | 	rdlong	local13, fp
05738     18 5E 05 F1 | 	add	fp, #24
0573c     AF E2 01 FB | 	rdlong	local07, fp
05740     1C 5E 85 F1 | 	sub	fp, #28
05744     08 EE 05 F1 | 	add	local13, #8
05748     F7 E2 61 FC | 	wrlong	local07, local13
0574c                 | LR__0368
0574c                 | LR__0369
0574c     18 5E 05 F1 | 	add	fp, #24
05750     AF EE 01 FB | 	rdlong	local13, fp
05754     14 5E 85 F1 | 	sub	fp, #20
05758     AF E2 01 FB | 	rdlong	local07, fp
0575c     04 5E 85 F1 | 	sub	fp, #4
05760     2C EE 05 F1 | 	add	local13, #44
05764     F7 DE 01 FB | 	rdlong	local05, local13
05768     1C E2 05 F1 | 	add	local07, #28
0576c     F1 E4 01 FB | 	rdlong	local08, local07
05770     F2 DE 09 F2 | 	cmp	local05, local08 wz
05774     34 00 90 5D |  if_ne	jmp	#LR__0370
05778     18 5E 05 F1 | 	add	fp, #24
0577c     AF CC 01 FB | 	rdlong	arg01, fp
05780     18 5E 85 F1 | 	sub	fp, #24
05784     5C CA BF FD | 	call	#_ff_cc_sync_window_0194
05788     00 B2 0D F2 | 	cmp	result1, #0 wz
0578c     1C 00 90 AD |  if_e	jmp	#LR__0370
05790     04 5E 05 F1 | 	add	fp, #4
05794     AF EE 01 FB | 	rdlong	local13, fp
05798     04 5E 85 F1 | 	sub	fp, #4
0579c     11 EE 05 F1 | 	add	local13, #17
057a0     F7 02 48 FC | 	wrbyte	#1, local13
057a4     01 B2 05 F6 | 	mov	result1, #1
057a8     B8 04 90 FD | 	jmp	#LR__0385
057ac                 | LR__0370
057ac     18 5E 05 F1 | 	add	fp, #24
057b0     AF CC 01 FB | 	rdlong	arg01, fp
057b4     14 5E 85 F1 | 	sub	fp, #20
057b8     AF E2 01 FB | 	rdlong	local07, fp
057bc     04 5E 85 F1 | 	sub	fp, #4
057c0     18 E2 05 F1 | 	add	local07, #24
057c4     F1 CE 01 FB | 	rdlong	arg02, local07
057c8     E8 CC BF FD | 	call	#_ff_cc_clst2sect_0199
057cc     20 5E 05 F1 | 	add	fp, #32
057d0     AF B2 61 FC | 	wrlong	result1, fp
057d4     AF EE 09 FB | 	rdlong	local13, fp wz
057d8     20 5E 85 F1 | 	sub	fp, #32
057dc     1C 00 90 5D |  if_ne	jmp	#LR__0371
057e0     04 5E 05 F1 | 	add	fp, #4
057e4     AF EE 01 FB | 	rdlong	local13, fp
057e8     04 5E 85 F1 | 	sub	fp, #4
057ec     11 EE 05 F1 | 	add	local13, #17
057f0     F7 04 48 FC | 	wrbyte	#2, local13
057f4     02 B2 05 F6 | 	mov	result1, #2
057f8     68 04 90 FD | 	jmp	#LR__0385
057fc                 | LR__0371
057fc     20 5E 05 F1 | 	add	fp, #32
05800     AF EE 01 FB | 	rdlong	local13, fp
05804     0C 5E 05 F1 | 	add	fp, #12
05808     AF E2 01 FB | 	rdlong	local07, fp
0580c     F1 EE 01 F1 | 	add	local13, local07
05810     0C 5E 85 F1 | 	sub	fp, #12
05814     AF EE 61 FC | 	wrlong	local13, fp
05818     14 5E 85 F1 | 	sub	fp, #20
0581c     AF EE 01 FB | 	rdlong	local13, fp
05820     09 EE 45 F0 | 	shr	local13, #9
05824     1C 5E 05 F1 | 	add	fp, #28
05828     AF EE 61 FC | 	wrlong	local13, fp
0582c     28 5E 85 F1 | 	sub	fp, #40
05830     00 EE 1D F2 | 	cmp	local13, #0 wcz
05834     50 01 90 ED |  if_be	jmp	#LR__0375
05838     2C 5E 05 F1 | 	add	fp, #44
0583c     AF EE 01 FB | 	rdlong	local13, fp
05840     04 5E 85 F1 | 	sub	fp, #4
05844     AF E2 01 FB | 	rdlong	local07, fp
05848     F1 EE 01 F1 | 	add	local13, local07
0584c     10 5E 85 F1 | 	sub	fp, #16
05850     AF DC 01 FB | 	rdlong	local04, fp
05854     18 5E 85 F1 | 	sub	fp, #24
05858     0A DC 05 F1 | 	add	local04, #10
0585c     EE DE E1 FA | 	rdword	local05, local04
05860     EF EE 19 F2 | 	cmp	local13, local05 wcz
05864     28 00 90 ED |  if_be	jmp	#LR__0372
05868     18 5E 05 F1 | 	add	fp, #24
0586c     AF DA 01 FB | 	rdlong	local03, fp
05870     0A DA 05 F1 | 	add	local03, #10
05874     ED EE E1 FA | 	rdword	local13, local03
05878     14 5E 05 F1 | 	add	fp, #20
0587c     AF DE 01 FB | 	rdlong	local05, fp
05880     EF EE 81 F1 | 	sub	local13, local05
05884     04 5E 85 F1 | 	sub	fp, #4
05888     AF EE 61 FC | 	wrlong	local13, fp
0588c     28 5E 85 F1 | 	sub	fp, #40
05890                 | LR__0372
05890     18 5E 05 F1 | 	add	fp, #24
05894     AF EE 01 FB | 	rdlong	local13, fp
05898     01 EE 05 F1 | 	add	local13, #1
0589c     F7 CC C1 FA | 	rdbyte	arg01, local13
058a0     18 5E 05 F1 | 	add	fp, #24
058a4     AF CE 01 FB | 	rdlong	arg02, fp
058a8     10 5E 85 F1 | 	sub	fp, #16
058ac     AF D0 01 FB | 	rdlong	arg03, fp
058b0     08 5E 05 F1 | 	add	fp, #8
058b4     AF D2 01 FB | 	rdlong	arg04, fp
058b8     28 5E 85 F1 | 	sub	fp, #40
058bc     28 C4 BF FD | 	call	#_ff_cc_disk_write
058c0     00 B2 0D F2 | 	cmp	result1, #0 wz
058c4     1C 00 90 AD |  if_e	jmp	#LR__0373
058c8     04 5E 05 F1 | 	add	fp, #4
058cc     AF EE 01 FB | 	rdlong	local13, fp
058d0     04 5E 85 F1 | 	sub	fp, #4
058d4     11 EE 05 F1 | 	add	local13, #17
058d8     F7 02 48 FC | 	wrbyte	#1, local13
058dc     01 B2 05 F6 | 	mov	result1, #1
058e0     80 03 90 FD | 	jmp	#LR__0385
058e4                 | LR__0373
058e4     18 5E 05 F1 | 	add	fp, #24
058e8     AF DA 01 FB | 	rdlong	local03, fp
058ec     2C DA 05 F1 | 	add	local03, #44
058f0     ED EE 01 FB | 	rdlong	local13, local03
058f4     08 5E 05 F1 | 	add	fp, #8
058f8     AF DE 01 FB | 	rdlong	local05, fp
058fc     EF EE 81 F1 | 	sub	local13, local05
05900     08 5E 05 F1 | 	add	fp, #8
05904     AF E4 01 FB | 	rdlong	local08, fp
05908     28 5E 85 F1 | 	sub	fp, #40
0590c     F2 EE 19 F2 | 	cmp	local13, local08 wcz
05910     58 00 90 3D |  if_ae	jmp	#LR__0374
05914     18 5E 05 F1 | 	add	fp, #24
05918     AF CC 01 FB | 	rdlong	arg01, fp
0591c     30 CC 05 F1 | 	add	arg01, #48
05920     18 5E 05 F1 | 	add	fp, #24
05924     AF CE 01 FB | 	rdlong	arg02, fp
05928     18 5E 85 F1 | 	sub	fp, #24
0592c     AF E8 01 FB | 	rdlong	local10, fp
05930     2C E8 05 F1 | 	add	local10, #44
05934     F4 F0 01 FB | 	rdlong	local14, local10
05938     08 5E 05 F1 | 	add	fp, #8
0593c     AF EA 01 FB | 	rdlong	local11, fp
05940     20 5E 85 F1 | 	sub	fp, #32
05944     F5 F0 81 F1 | 	sub	local14, local11
05948     09 F0 65 F0 | 	shl	local14, #9
0594c     F8 CE 01 F1 | 	add	arg02, local14
05950     09 D0 C5 F9 | 	decod	arg03, #9
05954     FC C7 BF FD | 	call	#_ff_cc_mem_cpy_0183
05958     18 5E 05 F1 | 	add	fp, #24
0595c     AF EE 01 FB | 	rdlong	local13, fp
05960     18 5E 85 F1 | 	sub	fp, #24
05964     03 EE 05 F1 | 	add	local13, #3
05968     F7 00 48 FC | 	wrbyte	#0, local13
0596c                 | LR__0374
0596c     28 5E 05 F1 | 	add	fp, #40
05970     AF EE 01 FB | 	rdlong	local13, fp
05974     09 EE 65 F0 | 	shl	local13, #9
05978     04 5E 85 F1 | 	sub	fp, #4
0597c     AF EE 61 FC | 	wrlong	local13, fp
05980     24 5E 85 F1 | 	sub	fp, #36
05984                 | ' 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) *  ((UINT) 512 ) ),  ((UINT) 512 ) );
05984                 | ' 					fs->wflag = 0;
05984                 | ' 				}
05984                 | ' #line 4067 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
05984                 | ' 				wcnt =  ((UINT) 512 )  * cc;
05984                 | ' 				continue;
05984     74 01 90 FD | 	jmp	#LR__0381
05988                 | LR__0375
05988     04 5E 05 F1 | 	add	fp, #4
0598c     AF EE 01 FB | 	rdlong	local13, fp
05990     F7 E2 01 F6 | 	mov	local07, local13
05994     04 5E 85 F1 | 	sub	fp, #4
05998     14 EE 05 F1 | 	add	local13, #20
0599c     F7 DE 01 FB | 	rdlong	local05, local13
059a0     0C E2 05 F1 | 	add	local07, #12
059a4     F1 E4 01 FB | 	rdlong	local08, local07
059a8     F2 DE 19 F2 | 	cmp	local05, local08 wcz
059ac     50 00 90 CD |  if_b	jmp	#LR__0377
059b0     18 5E 05 F1 | 	add	fp, #24
059b4     AF CC 01 FB | 	rdlong	arg01, fp
059b8     18 5E 85 F1 | 	sub	fp, #24
059bc     24 C8 BF FD | 	call	#_ff_cc_sync_window_0194
059c0     00 B2 0D F2 | 	cmp	result1, #0 wz
059c4     1C 00 90 AD |  if_e	jmp	#LR__0376
059c8     04 5E 05 F1 | 	add	fp, #4
059cc     AF EE 01 FB | 	rdlong	local13, fp
059d0     04 5E 85 F1 | 	sub	fp, #4
059d4     11 EE 05 F1 | 	add	local13, #17
059d8     F7 02 48 FC | 	wrbyte	#1, local13
059dc     01 B2 05 F6 | 	mov	result1, #1
059e0     80 02 90 FD | 	jmp	#LR__0385
059e4                 | LR__0376
059e4     18 5E 05 F1 | 	add	fp, #24
059e8     AF EE 01 FB | 	rdlong	local13, fp
059ec     08 5E 05 F1 | 	add	fp, #8
059f0     AF E2 01 FB | 	rdlong	local07, fp
059f4     20 5E 85 F1 | 	sub	fp, #32
059f8     2C EE 05 F1 | 	add	local13, #44
059fc     F7 E2 61 FC | 	wrlong	local07, local13
05a00                 | LR__0377
05a00     04 5E 05 F1 | 	add	fp, #4
05a04     AF EE 01 FB | 	rdlong	local13, fp
05a08     1C 5E 05 F1 | 	add	fp, #28
05a0c     AF E2 01 FB | 	rdlong	local07, fp
05a10     20 5E 85 F1 | 	sub	fp, #32
05a14     1C EE 05 F1 | 	add	local13, #28
05a18     F7 E2 61 FC | 	wrlong	local07, local13
05a1c                 | LR__0378
05a1c     04 5E 05 F1 | 	add	fp, #4
05a20     AF DA 01 FB | 	rdlong	local03, fp
05a24     14 DA 05 F1 | 	add	local03, #20
05a28     ED E0 01 FB | 	rdlong	local06, local03
05a2c     FF E1 05 F5 | 	and	local06, #511
05a30     09 EE C5 F9 | 	decod	local13, #9
05a34     F0 EE 81 F1 | 	sub	local13, local06
05a38     20 5E 05 F1 | 	add	fp, #32
05a3c     AF EE 61 FC | 	wrlong	local13, fp
05a40     18 5E 85 F1 | 	sub	fp, #24
05a44     AF E2 01 FB | 	rdlong	local07, fp
05a48     0C 5E 85 F1 | 	sub	fp, #12
05a4c     F1 EE 19 F2 | 	cmp	local13, local07 wcz
05a50     14 00 90 ED |  if_be	jmp	#LR__0379
05a54     0C 5E 05 F1 | 	add	fp, #12
05a58     AF EE 01 FB | 	rdlong	local13, fp
05a5c     18 5E 05 F1 | 	add	fp, #24
05a60     AF EE 61 FC | 	wrlong	local13, fp
05a64     24 5E 85 F1 | 	sub	fp, #36
05a68                 | LR__0379
05a68     18 5E 05 F1 | 	add	fp, #24
05a6c     AF CC 01 FB | 	rdlong	arg01, fp
05a70     14 5E 85 F1 | 	sub	fp, #20
05a74     AF E2 01 FB | 	rdlong	local07, fp
05a78     04 5E 85 F1 | 	sub	fp, #4
05a7c     1C E2 05 F1 | 	add	local07, #28
05a80     F1 CE 01 FB | 	rdlong	arg02, local07
05a84     34 C8 BF FD | 	call	#_ff_cc_move_window_0196
05a88     00 B2 0D F2 | 	cmp	result1, #0 wz
05a8c     1C 00 90 AD |  if_e	jmp	#LR__0380
05a90     04 5E 05 F1 | 	add	fp, #4
05a94     AF EE 01 FB | 	rdlong	local13, fp
05a98     04 5E 85 F1 | 	sub	fp, #4
05a9c     11 EE 05 F1 | 	add	local13, #17
05aa0     F7 02 48 FC | 	wrbyte	#1, local13
05aa4     01 B2 05 F6 | 	mov	result1, #1
05aa8     B8 01 90 FD | 	jmp	#LR__0385
05aac                 | LR__0380
05aac     18 5E 05 F1 | 	add	fp, #24
05ab0     AF CC 01 FB | 	rdlong	arg01, fp
05ab4     30 CC 05 F1 | 	add	arg01, #48
05ab8     14 5E 85 F1 | 	sub	fp, #20
05abc     AF DE 01 FB | 	rdlong	local05, fp
05ac0     14 DE 05 F1 | 	add	local05, #20
05ac4     EF EC 01 FB | 	rdlong	local12, local05
05ac8     FF ED 05 F5 | 	and	local12, #511
05acc     F6 CC 01 F1 | 	add	arg01, local12
05ad0     2C 5E 05 F1 | 	add	fp, #44
05ad4     AF CE 01 FB | 	rdlong	arg02, fp
05ad8     0C 5E 85 F1 | 	sub	fp, #12
05adc     AF D0 01 FB | 	rdlong	arg03, fp
05ae0     24 5E 85 F1 | 	sub	fp, #36
05ae4     6C C6 BF FD | 	call	#_ff_cc_mem_cpy_0183
05ae8     18 5E 05 F1 | 	add	fp, #24
05aec     AF EE 01 FB | 	rdlong	local13, fp
05af0     18 5E 85 F1 | 	sub	fp, #24
05af4     03 EE 05 F1 | 	add	local13, #3
05af8     F7 02 48 FC | 	wrbyte	#1, local13
05afc                 | LR__0381
05afc     0C 5E 05 F1 | 	add	fp, #12
05b00     AF EE 01 FB | 	rdlong	local13, fp
05b04     18 5E 05 F1 | 	add	fp, #24
05b08     AF E0 01 FB | 	rdlong	local06, fp
05b0c     F0 EE 81 F1 | 	sub	local13, local06
05b10     18 5E 85 F1 | 	sub	fp, #24
05b14     AF EE 61 FC | 	wrlong	local13, fp
05b18     04 5E 05 F1 | 	add	fp, #4
05b1c     AF DE 01 FB | 	rdlong	local05, fp
05b20     EF E8 01 F6 | 	mov	local10, local05
05b24     F4 E4 01 FB | 	rdlong	local08, local10
05b28     14 5E 05 F1 | 	add	fp, #20
05b2c     AF EA 01 FB | 	rdlong	local11, fp
05b30     F5 EC 01 F6 | 	mov	local12, local11
05b34     F5 E4 01 F1 | 	add	local08, local11
05b38     EF E4 61 FC | 	wrlong	local08, local05
05b3c     0C 5E 05 F1 | 	add	fp, #12
05b40     AF F2 01 FB | 	rdlong	local15, fp
05b44     F9 F4 01 F6 | 	mov	local16, local15
05b48     0C 5E 85 F1 | 	sub	fp, #12
05b4c     AF F6 01 FB | 	rdlong	local17, fp
05b50     FB F0 01 F6 | 	mov	local14, local17
05b54     FB F4 01 F1 | 	add	local16, local17
05b58     0C 5E 05 F1 | 	add	fp, #12
05b5c     AF F4 61 FC | 	wrlong	local16, fp
05b60     2C 5E 85 F1 | 	sub	fp, #44
05b64     AF F8 01 FB | 	rdlong	local18, fp
05b68     FC FA 01 F6 | 	mov	local19, local18
05b6c     FC FC 01 F6 | 	mov	local20, local18
05b70     FE FE 01 F6 | 	mov	local21, local20
05b74     14 FE 05 F1 | 	add	local21, #20
05b78     FF 00 02 FB | 	rdlong	local22, local21
05b7c     14 FE 85 F1 | 	sub	local21, #20
05b80     00 03 02 F6 | 	mov	local23, local22
05b84     20 5E 05 F1 | 	add	fp, #32
05b88     AF 04 02 FB | 	rdlong	local24, fp
05b8c     02 07 02 F6 | 	mov	local25, local24
05b90     02 03 02 F1 | 	add	local23, local24
05b94     14 FA 05 F1 | 	add	local19, #20
05b98     FD 02 62 FC | 	wrlong	local23, local19
05b9c     14 FA 85 F1 | 	sub	local19, #20
05ba0     20 5E 85 F1 | 	sub	fp, #32
05ba4     AF 08 02 FB | 	rdlong	local26, fp
05ba8     04 0B 02 F6 | 	mov	local27, local26
05bac     04 0D 02 F6 | 	mov	local28, local26
05bb0     06 0F 02 F6 | 	mov	local29, local28
05bb4     04 11 02 F6 | 	mov	local30, local26
05bb8     04 5E 85 F1 | 	sub	fp, #4
05bbc     08 13 02 F6 | 	mov	local31, local30
05bc0     14 0E 06 F1 | 	add	local29, #20
05bc4     07 15 02 FB | 	rdlong	local32, local29
05bc8     14 0E 86 F1 | 	sub	local29, #20
05bcc     0A 17 02 F6 | 	mov	local33, local32
05bd0     0C 12 06 F1 | 	add	local31, #12
05bd4     09 19 02 FB | 	rdlong	local34, local31
05bd8     0C 12 86 F1 | 	sub	local31, #12
05bdc     0C 1B 02 F6 | 	mov	local35, local34
05be0     0D 17 1A F2 | 	cmp	local33, local35 wcz
05be4     24 00 90 ED |  if_be	jmp	#LR__0382
05be8     04 5E 05 F1 | 	add	fp, #4
05bec     AF 1C 02 FB | 	rdlong	local36, fp
05bf0     04 5E 85 F1 | 	sub	fp, #4
05bf4     0E 1F 02 F6 | 	mov	local37, local36
05bf8     14 1E 06 F1 | 	add	local37, #20
05bfc     0F 21 02 FB | 	rdlong	local38, local37
05c00     14 1E 86 F1 | 	sub	local37, #20
05c04     10 23 02 F6 | 	mov	local39, local38
05c08     20 00 90 FD | 	jmp	#LR__0383
05c0c                 | LR__0382
05c0c     04 5E 05 F1 | 	add	fp, #4
05c10     AF 24 02 FB | 	rdlong	local40, fp
05c14     04 5E 85 F1 | 	sub	fp, #4
05c18     12 27 02 F6 | 	mov	local41, local40
05c1c     0C 26 06 F1 | 	add	local41, #12
05c20     13 29 02 FB | 	rdlong	local42, local41
05c24     0C 26 86 F1 | 	sub	local41, #12
05c28     14 23 02 F6 | 	mov	local39, local42
05c2c                 | LR__0383
05c2c     0C 0A 06 F1 | 	add	local27, #12
05c30     05 23 62 FC | 	wrlong	local39, local27
05c34     0C 0A 86 F1 | 	sub	local27, #12
05c38     4C F9 9F FD | 	jmp	#LR__0363
05c3c                 | LR__0384
05c3c     04 5E 05 F1 | 	add	fp, #4
05c40     AF D6 01 FB | 	rdlong	local01, fp
05c44     EB DA 01 F6 | 	mov	local03, local01
05c48     04 5E 85 F1 | 	sub	fp, #4
05c4c     10 DA 05 F1 | 	add	local03, #16
05c50     ED EE C1 FA | 	rdbyte	local13, local03
05c54     40 EE 45 F5 | 	or	local13, #64
05c58     10 D6 05 F1 | 	add	local01, #16
05c5c     EB EE 41 FC | 	wrbyte	local13, local01
05c60                 | ' 		mem_cpy(fs->win + fp->fptr %  ((UINT) 512 ) , wbuff, wcnt);
05c60                 | ' 		fs->wflag = 1;
05c60                 | ' #line 4094 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
05c60                 | ' 	}
05c60                 | ' 
05c60                 | ' 	fp->flag |=  0x40 ;
05c60                 | ' 
05c60                 | ' 	return FR_OK ;
05c60     00 B2 05 F6 | 	mov	result1, #0
05c64                 | LR__0385
05c64     AF F0 03 F6 | 	mov	ptra, fp
05c68     BA 00 A0 FD | 	call	#popregs_
05c6c                 | _ff_cc_f_write_ret
05c6c     2D 00 64 FD | 	ret
05c70                 | 
05c70                 | _ff_cc_f_sync
05c70     06 5A 05 F6 | 	mov	COUNT_, #6
05c74     B0 00 A0 FD | 	call	#pushregs_
05c78     18 F0 07 F1 | 	add	ptra, #24
05c7c     04 5E 05 F1 | 	add	fp, #4
05c80     AF CC 61 FC | 	wrlong	arg01, fp
05c84     08 5E 05 F1 | 	add	fp, #8
05c88     AF CE 01 F6 | 	mov	arg02, fp
05c8c     0C 5E 85 F1 | 	sub	fp, #12
05c90     50 E8 BF FD | 	call	#_ff_cc_validate_0294
05c94     D9 D6 01 F6 | 	mov	local01, result1
05c98     08 5E 05 F1 | 	add	fp, #8
05c9c     AF D6 61 FC | 	wrlong	local01, fp
05ca0     AF D8 09 FB | 	rdlong	local02, fp wz
05ca4     08 5E 85 F1 | 	sub	fp, #8
05ca8     58 01 90 5D |  if_ne	jmp	#LR__0388
05cac     04 5E 05 F1 | 	add	fp, #4
05cb0     AF DA 01 FB | 	rdlong	local03, fp
05cb4     04 5E 85 F1 | 	sub	fp, #4
05cb8     10 DA 05 F1 | 	add	local03, #16
05cbc     ED D8 C1 FA | 	rdbyte	local02, local03
05cc0     40 D8 CD F7 | 	test	local02, #64 wz
05cc4     3C 01 90 AD |  if_e	jmp	#LR__0387
05cc8     10 5E 05 F1 | 	add	fp, #16
05ccc     80 10 A7 FF 
05cd0     AF 00 68 FC | 	wrlong	##1310785536, fp
05cd4     04 5E 85 F1 | 	sub	fp, #4
05cd8     AF CC 01 FB | 	rdlong	arg01, fp
05cdc     08 5E 85 F1 | 	sub	fp, #8
05ce0     AF DC 01 FB | 	rdlong	local04, fp
05ce4     04 5E 85 F1 | 	sub	fp, #4
05ce8     20 DC 05 F1 | 	add	local04, #32
05cec     EE CE 01 FB | 	rdlong	arg02, local04
05cf0     C8 C5 BF FD | 	call	#_ff_cc_move_window_0196
05cf4     08 5E 05 F1 | 	add	fp, #8
05cf8     AF B2 61 FC | 	wrlong	result1, fp
05cfc     AF D8 09 FB | 	rdlong	local02, fp wz
05d00     08 5E 85 F1 | 	sub	fp, #8
05d04     FC 00 90 5D |  if_ne	jmp	#LR__0386
05d08     04 5E 05 F1 | 	add	fp, #4
05d0c     AF D8 01 FB | 	rdlong	local02, fp
05d10     24 D8 05 F1 | 	add	local02, #36
05d14     EC D8 01 FB | 	rdlong	local02, local02
05d18     10 5E 05 F1 | 	add	fp, #16
05d1c     AF D8 61 FC | 	wrlong	local02, fp
05d20     EC DE 01 F6 | 	mov	local05, local02
05d24     0B DE 05 F1 | 	add	local05, #11
05d28     EF DC C1 FA | 	rdbyte	local04, local05
05d2c     20 DC 45 F5 | 	or	local04, #32
05d30     0B D8 05 F1 | 	add	local02, #11
05d34     EC DC 41 FC | 	wrbyte	local04, local02
05d38     10 5E 85 F1 | 	sub	fp, #16
05d3c     AF D8 01 FB | 	rdlong	local02, fp
05d40     EC CC 01 FB | 	rdlong	arg01, local02
05d44     10 5E 05 F1 | 	add	fp, #16
05d48     AF CE 01 FB | 	rdlong	arg02, fp
05d4c     10 5E 85 F1 | 	sub	fp, #16
05d50     AF E0 01 FB | 	rdlong	local06, fp
05d54     04 5E 85 F1 | 	sub	fp, #4
05d58     08 E0 05 F1 | 	add	local06, #8
05d5c     F0 D0 01 FB | 	rdlong	arg03, local06
05d60     2C D5 BF FD | 	call	#_ff_cc_st_clust_0238
05d64     14 5E 05 F1 | 	add	fp, #20
05d68     AF CC 01 FB | 	rdlong	arg01, fp
05d6c     1C CC 05 F1 | 	add	arg01, #28
05d70     10 5E 85 F1 | 	sub	fp, #16
05d74     AF DE 01 FB | 	rdlong	local05, fp
05d78     04 5E 85 F1 | 	sub	fp, #4
05d7c     0C DE 05 F1 | 	add	local05, #12
05d80     EF CE 01 FB | 	rdlong	arg02, local05
05d84     A0 C3 BF FD | 	call	#_ff_cc_st_dword_0180
05d88     14 5E 05 F1 | 	add	fp, #20
05d8c     AF CC 01 FB | 	rdlong	arg01, fp
05d90     16 CC 05 F1 | 	add	arg01, #22
05d94     04 5E 85 F1 | 	sub	fp, #4
05d98     AF CE 01 FB | 	rdlong	arg02, fp
05d9c     10 5E 85 F1 | 	sub	fp, #16
05da0     84 C3 BF FD | 	call	#_ff_cc_st_dword_0180
05da4     14 5E 05 F1 | 	add	fp, #20
05da8     AF CC 01 FB | 	rdlong	arg01, fp
05dac     14 5E 85 F1 | 	sub	fp, #20
05db0     12 CC 05 F1 | 	add	arg01, #18
05db4     00 CE 05 F6 | 	mov	arg02, #0
05db8     48 C3 BF FD | 	call	#_ff_cc_st_word_0179
05dbc     0C 5E 05 F1 | 	add	fp, #12
05dc0     AF D8 01 FB | 	rdlong	local02, fp
05dc4     03 D8 05 F1 | 	add	local02, #3
05dc8     EC 02 48 FC | 	wrbyte	#1, local02
05dcc     AF CC 01 FB | 	rdlong	arg01, fp
05dd0     0C 5E 85 F1 | 	sub	fp, #12
05dd4     60 C5 BF FD | 	call	#_ff_cc_sync_fs_0198
05dd8     08 5E 05 F1 | 	add	fp, #8
05ddc     AF B2 61 FC | 	wrlong	result1, fp
05de0     04 5E 85 F1 | 	sub	fp, #4
05de4     AF D8 01 FB | 	rdlong	local02, fp
05de8     EC DE 01 F6 | 	mov	local05, local02
05dec     04 5E 85 F1 | 	sub	fp, #4
05df0     10 DE 05 F1 | 	add	local05, #16
05df4     EF DC C1 FA | 	rdbyte	local04, local05
05df8     BF DC 05 F5 | 	and	local04, #191
05dfc     10 D8 05 F1 | 	add	local02, #16
05e00     EC DC 41 FC | 	wrbyte	local04, local02
05e04                 | LR__0386
05e04                 | LR__0387
05e04                 | LR__0388
05e04                 | ' 					dir = fp->dir_ptr;
05e04                 | ' 					dir[ 11 ] |=  0x20 ;
05e04                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
05e04                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
05e04                 | ' 					st_dword(dir +  22 , tm);
05e04                 | ' 					st_word(dir +  18 , 0);
05e04                 | ' 					fs->wflag = 1;
05e04                 | ' 					res = sync_fs(fs);
05e04                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
05e04                 | ' 				}
05e04                 | ' 			}
05e04                 | ' 		}
05e04                 | ' 	}
05e04                 | ' 
05e04                 | ' 	return res ;
05e04     08 5E 05 F1 | 	add	fp, #8
05e08     AF B2 01 FB | 	rdlong	result1, fp
05e0c     08 5E 85 F1 | 	sub	fp, #8
05e10     AF F0 03 F6 | 	mov	ptra, fp
05e14     BA 00 A0 FD | 	call	#popregs_
05e18                 | _ff_cc_f_sync_ret
05e18     2D 00 64 FD | 	ret
05e1c                 | 
05e1c                 | _ff_cc_f_close
05e1c     02 5A 05 F6 | 	mov	COUNT_, #2
05e20     B0 00 A0 FD | 	call	#pushregs_
05e24     10 F0 07 F1 | 	add	ptra, #16
05e28     04 5E 05 F1 | 	add	fp, #4
05e2c     AF CC 61 FC | 	wrlong	arg01, fp
05e30     04 5E 85 F1 | 	sub	fp, #4
05e34     38 FE BF FD | 	call	#_ff_cc_f_sync
05e38     08 5E 05 F1 | 	add	fp, #8
05e3c     AF B2 61 FC | 	wrlong	result1, fp
05e40     AF D6 09 FB | 	rdlong	local01, fp wz
05e44     08 5E 85 F1 | 	sub	fp, #8
05e48     40 00 90 5D |  if_ne	jmp	#LR__0390
05e4c     04 5E 05 F1 | 	add	fp, #4
05e50     AF CC 01 FB | 	rdlong	arg01, fp
05e54     08 5E 05 F1 | 	add	fp, #8
05e58     AF CE 01 F6 | 	mov	arg02, fp
05e5c     0C 5E 85 F1 | 	sub	fp, #12
05e60     80 E6 BF FD | 	call	#_ff_cc_validate_0294
05e64     D9 D8 01 F6 | 	mov	local02, result1
05e68     08 5E 05 F1 | 	add	fp, #8
05e6c     AF D8 61 FC | 	wrlong	local02, fp
05e70     AF D6 09 FB | 	rdlong	local01, fp wz
05e74     08 5E 85 F1 | 	sub	fp, #8
05e78     10 00 90 5D |  if_ne	jmp	#LR__0389
05e7c     04 5E 05 F1 | 	add	fp, #4
05e80     AF D6 01 FB | 	rdlong	local01, fp
05e84     04 5E 85 F1 | 	sub	fp, #4
05e88     EB 00 68 FC | 	wrlong	#0, local01
05e8c                 | LR__0389
05e8c                 | LR__0390
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 
05e8c                 | ' 			fp->obj.fs = 0;
05e8c                 | ' #line 4212 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
05e8c                 | ' 		}
05e8c                 | ' 	}
05e8c                 | ' 	return res;
05e8c     08 5E 05 F1 | 	add	fp, #8
05e90     AF B2 01 FB | 	rdlong	result1, fp
05e94     08 5E 85 F1 | 	sub	fp, #8
05e98     AF F0 03 F6 | 	mov	ptra, fp
05e9c     BA 00 A0 FD | 	call	#popregs_
05ea0                 | _ff_cc_f_close_ret
05ea0     2D 00 64 FD | 	ret
05ea4                 | 
05ea4                 | _ff_cc_f_lseek
05ea4     0B 5A 05 F6 | 	mov	COUNT_, #11
05ea8     B0 00 A0 FD | 	call	#pushregs_
05eac     24 F0 07 F1 | 	add	ptra, #36
05eb0     04 5E 05 F1 | 	add	fp, #4
05eb4     AF CC 61 FC | 	wrlong	arg01, fp
05eb8     04 5E 05 F1 | 	add	fp, #4
05ebc     AF CE 61 FC | 	wrlong	arg02, fp
05ec0     04 5E 85 F1 | 	sub	fp, #4
05ec4     AF CC 01 FB | 	rdlong	arg01, fp
05ec8     0C 5E 05 F1 | 	add	fp, #12
05ecc     AF CE 01 F6 | 	mov	arg02, fp
05ed0     10 5E 85 F1 | 	sub	fp, #16
05ed4     0C E6 BF FD | 	call	#_ff_cc_validate_0294
05ed8     D9 D6 01 F6 | 	mov	local01, result1
05edc     0C 5E 05 F1 | 	add	fp, #12
05ee0     AF D6 61 FC | 	wrlong	local01, fp
05ee4     AF D8 09 FB | 	rdlong	local02, fp wz
05ee8     0C 5E 85 F1 | 	sub	fp, #12
05eec     1C 00 90 5D |  if_ne	jmp	#LR__0391
05ef0     04 5E 05 F1 | 	add	fp, #4
05ef4     AF DA 01 FB | 	rdlong	local03, fp
05ef8     11 DA 05 F1 | 	add	local03, #17
05efc     ED D8 C1 FA | 	rdbyte	local02, local03
05f00     08 5E 05 F1 | 	add	fp, #8
05f04     AF D8 61 FC | 	wrlong	local02, fp
05f08     0C 5E 85 F1 | 	sub	fp, #12
05f0c                 | LR__0391
05f0c     0C 5E 05 F1 | 	add	fp, #12
05f10     AF D8 09 FB | 	rdlong	local02, fp wz
05f14     0C 5E 85 F1 | 	sub	fp, #12
05f18     10 00 90 AD |  if_e	jmp	#LR__0392
05f1c     0C 5E 05 F1 | 	add	fp, #12
05f20     AF B2 01 FB | 	rdlong	result1, fp
05f24     0C 5E 85 F1 | 	sub	fp, #12
05f28     A0 05 90 FD | 	jmp	#LR__0412
05f2c                 | LR__0392
05f2c     04 5E 05 F1 | 	add	fp, #4
05f30     AF D8 01 FB | 	rdlong	local02, fp
05f34     04 5E 05 F1 | 	add	fp, #4
05f38     AF DC 01 FB | 	rdlong	local04, fp
05f3c     08 5E 85 F1 | 	sub	fp, #8
05f40     0C D8 05 F1 | 	add	local02, #12
05f44     EC DE 01 FB | 	rdlong	local05, local02
05f48     EF E0 01 F6 | 	mov	local06, local05
05f4c     F0 DC 19 F2 | 	cmp	local04, local06 wcz
05f50     50 00 90 ED |  if_be	jmp	#LR__0393
05f54     04 5E 05 F1 | 	add	fp, #4
05f58     AF E2 01 FB | 	rdlong	local07, fp
05f5c     04 5E 85 F1 | 	sub	fp, #4
05f60     F1 E4 01 F6 | 	mov	local08, local07
05f64     10 E4 05 F1 | 	add	local08, #16
05f68     F2 E6 C1 FA | 	rdbyte	local09, local08
05f6c     10 E4 85 F1 | 	sub	local08, #16
05f70     F3 D6 01 F6 | 	mov	local01, local09
05f74     07 D6 45 F7 | 	zerox	local01, #7
05f78     02 D6 0D F5 | 	and	local01, #2 wz
05f7c     24 00 90 5D |  if_ne	jmp	#LR__0393
05f80     04 5E 05 F1 | 	add	fp, #4
05f84     AF DA 01 FB | 	rdlong	local03, fp
05f88     ED D8 01 F6 | 	mov	local02, local03
05f8c     0C D8 05 F1 | 	add	local02, #12
05f90     EC E8 01 FB | 	rdlong	local10, local02
05f94     0C D8 85 F1 | 	sub	local02, #12
05f98     04 5E 05 F1 | 	add	fp, #4
05f9c     AF E8 61 FC | 	wrlong	local10, fp
05fa0     08 5E 85 F1 | 	sub	fp, #8
05fa4                 | LR__0393
05fa4     04 5E 05 F1 | 	add	fp, #4
05fa8     AF D8 01 FB | 	rdlong	local02, fp
05fac     14 D8 05 F1 | 	add	local02, #20
05fb0     EC E8 01 FB | 	rdlong	local10, local02
05fb4     1C 5E 05 F1 | 	add	fp, #28
05fb8     AF E8 61 FC | 	wrlong	local10, fp
05fbc     1C 5E 85 F1 | 	sub	fp, #28
05fc0     AF D8 01 FB | 	rdlong	local02, fp
05fc4     18 5E 05 F1 | 	add	fp, #24
05fc8     AF 00 68 FC | 	wrlong	#0, fp
05fcc     14 D8 05 F1 | 	add	local02, #20
05fd0     EC 00 68 FC | 	wrlong	#0, local02
05fd4     14 5E 85 F1 | 	sub	fp, #20
05fd8     AF D8 01 FB | 	rdlong	local02, fp
05fdc     08 5E 85 F1 | 	sub	fp, #8
05fe0     00 D8 1D F2 | 	cmp	local02, #0 wcz
05fe4     FC 03 90 ED |  if_be	jmp	#LR__0409
05fe8     10 5E 05 F1 | 	add	fp, #16
05fec     AF DA 01 FB | 	rdlong	local03, fp
05ff0     0A DA 05 F1 | 	add	local03, #10
05ff4     ED E0 E1 FA | 	rdword	local06, local03
05ff8     09 E0 65 F0 | 	shl	local06, #9
05ffc     08 5E 05 F1 | 	add	fp, #8
06000     AF E0 61 FC | 	wrlong	local06, fp
06004     08 5E 05 F1 | 	add	fp, #8
06008     AF D8 01 FB | 	rdlong	local02, fp
0600c     20 5E 85 F1 | 	sub	fp, #32
06010     00 D8 1D F2 | 	cmp	local02, #0 wcz
06014     BC 00 90 ED |  if_be	jmp	#LR__0394
06018     08 5E 05 F1 | 	add	fp, #8
0601c     AF 2A 02 FB | 	rdlong	muldiva_, fp
06020     01 2A 86 F1 | 	sub	muldiva_, #1
06024     10 5E 05 F1 | 	add	fp, #16
06028     AF 2C 02 FB | 	rdlong	muldivb_, fp
0602c     18 5E 85 F1 | 	sub	fp, #24
06030     C2 00 A0 FD | 	call	#unsdivide_
06034     16 E1 01 F6 | 	mov	local06, muldivb_
06038     20 5E 05 F1 | 	add	fp, #32
0603c     AF 2A 02 FB | 	rdlong	muldiva_, fp
06040     01 2A 86 F1 | 	sub	muldiva_, #1
06044     08 5E 85 F1 | 	sub	fp, #8
06048     AF E6 01 FB | 	rdlong	local09, fp
0604c     18 5E 85 F1 | 	sub	fp, #24
06050     F3 2C 02 F6 | 	mov	muldivb_, local09
06054     C2 00 A0 FD | 	call	#unsdivide_
06058     16 E3 01 F6 | 	mov	local07, muldivb_
0605c     F1 E0 19 F2 | 	cmp	local06, local07 wcz
06060     70 00 90 CD |  if_b	jmp	#LR__0394
06064     04 5E 05 F1 | 	add	fp, #4
06068     AF D8 01 FB | 	rdlong	local02, fp
0606c     1C 5E 05 F1 | 	add	fp, #28
06070     AF E8 01 FB | 	rdlong	local10, fp
06074     01 E8 85 F1 | 	sub	local10, #1
06078     08 5E 85 F1 | 	sub	fp, #8
0607c     AF E0 01 FB | 	rdlong	local06, fp
06080     01 E0 85 F1 | 	sub	local06, #1
06084     F0 E8 21 F5 | 	andn	local10, local06
06088     14 D8 05 F1 | 	add	local02, #20
0608c     EC E8 61 FC | 	wrlong	local10, local02
06090     10 5E 85 F1 | 	sub	fp, #16
06094     AF D8 01 FB | 	rdlong	local02, fp
06098     04 5E 85 F1 | 	sub	fp, #4
0609c     AF E8 01 FB | 	rdlong	local10, fp
060a0     14 E8 05 F1 | 	add	local10, #20
060a4     F4 E0 01 FB | 	rdlong	local06, local10
060a8     F0 D8 81 F1 | 	sub	local02, local06
060ac     04 5E 05 F1 | 	add	fp, #4
060b0     AF D8 61 FC | 	wrlong	local02, fp
060b4     04 5E 85 F1 | 	sub	fp, #4
060b8     AF D8 01 FB | 	rdlong	local02, fp
060bc     18 D8 05 F1 | 	add	local02, #24
060c0     EC E8 01 FB | 	rdlong	local10, local02
060c4     10 5E 05 F1 | 	add	fp, #16
060c8     AF E8 61 FC | 	wrlong	local10, fp
060cc     14 5E 85 F1 | 	sub	fp, #20
060d0     D4 00 90 FD | 	jmp	#LR__0398
060d4                 | LR__0394
060d4     04 5E 05 F1 | 	add	fp, #4
060d8     AF D8 01 FB | 	rdlong	local02, fp
060dc     08 D8 05 F1 | 	add	local02, #8
060e0     EC E8 01 FB | 	rdlong	local10, local02
060e4     10 5E 05 F1 | 	add	fp, #16
060e8     AF E8 61 FC | 	wrlong	local10, fp
060ec     AF D8 09 FB | 	rdlong	local02, fp wz
060f0     14 5E 85 F1 | 	sub	fp, #20
060f4     94 00 90 5D |  if_ne	jmp	#LR__0397
060f8     04 5E 05 F1 | 	add	fp, #4
060fc     AF CC 01 FB | 	rdlong	arg01, fp
06100     04 5E 85 F1 | 	sub	fp, #4
06104     00 CE 05 F6 | 	mov	arg02, #0
06108     C8 C9 BF FD | 	call	#_ff_cc_create_chain_0218
0610c     14 5E 05 F1 | 	add	fp, #20
06110     AF B2 61 FC | 	wrlong	result1, fp
06114     14 5E 85 F1 | 	sub	fp, #20
06118     01 B2 0D F2 | 	cmp	result1, #1 wz
0611c     1C 00 90 5D |  if_ne	jmp	#LR__0395
06120     04 5E 05 F1 | 	add	fp, #4
06124     AF D8 01 FB | 	rdlong	local02, fp
06128     04 5E 85 F1 | 	sub	fp, #4
0612c     11 D8 05 F1 | 	add	local02, #17
06130     EC 04 48 FC | 	wrbyte	#2, local02
06134     02 B2 05 F6 | 	mov	result1, #2
06138     90 03 90 FD | 	jmp	#LR__0412
0613c                 | LR__0395
0613c     14 5E 05 F1 | 	add	fp, #20
06140     AF D8 01 FB | 	rdlong	local02, fp
06144     14 5E 85 F1 | 	sub	fp, #20
06148     FF FF 7F FF 
0614c     FF D9 0D F2 | 	cmp	local02, ##-1 wz
06150     1C 00 90 5D |  if_ne	jmp	#LR__0396
06154     04 5E 05 F1 | 	add	fp, #4
06158     AF D8 01 FB | 	rdlong	local02, fp
0615c     04 5E 85 F1 | 	sub	fp, #4
06160     11 D8 05 F1 | 	add	local02, #17
06164     EC 02 48 FC | 	wrbyte	#1, local02
06168     01 B2 05 F6 | 	mov	result1, #1
0616c     5C 03 90 FD | 	jmp	#LR__0412
06170                 | LR__0396
06170     04 5E 05 F1 | 	add	fp, #4
06174     AF D8 01 FB | 	rdlong	local02, fp
06178     10 5E 05 F1 | 	add	fp, #16
0617c     AF E8 01 FB | 	rdlong	local10, fp
06180     14 5E 85 F1 | 	sub	fp, #20
06184     08 D8 05 F1 | 	add	local02, #8
06188     EC E8 61 FC | 	wrlong	local10, local02
0618c                 | LR__0397
0618c     04 5E 05 F1 | 	add	fp, #4
06190     AF D8 01 FB | 	rdlong	local02, fp
06194     10 5E 05 F1 | 	add	fp, #16
06198     AF E8 01 FB | 	rdlong	local10, fp
0619c     14 5E 85 F1 | 	sub	fp, #20
061a0     18 D8 05 F1 | 	add	local02, #24
061a4     EC E8 61 FC | 	wrlong	local10, local02
061a8                 | LR__0398
061a8     14 5E 05 F1 | 	add	fp, #20
061ac     AF D8 09 FB | 	rdlong	local02, fp wz
061b0     14 5E 85 F1 | 	sub	fp, #20
061b4     2C 02 90 AD |  if_e	jmp	#LR__0408
061b8                 | ' 				while (ofs > bcs) {
061b8                 | LR__0399
061b8     08 5E 05 F1 | 	add	fp, #8
061bc     AF D8 01 FB | 	rdlong	local02, fp
061c0     10 5E 05 F1 | 	add	fp, #16
061c4     AF E8 01 FB | 	rdlong	local10, fp
061c8     18 5E 85 F1 | 	sub	fp, #24
061cc     F4 D8 19 F2 | 	cmp	local02, local10 wcz
061d0     6C 01 90 ED |  if_be	jmp	#LR__0405
061d4     08 5E 05 F1 | 	add	fp, #8
061d8     AF D8 01 FB | 	rdlong	local02, fp
061dc     10 5E 05 F1 | 	add	fp, #16
061e0     AF E8 01 FB | 	rdlong	local10, fp
061e4     F4 D8 81 F1 | 	sub	local02, local10
061e8     10 5E 85 F1 | 	sub	fp, #16
061ec     AF D8 61 FC | 	wrlong	local02, fp
061f0     04 5E 85 F1 | 	sub	fp, #4
061f4     AF D8 01 FB | 	rdlong	local02, fp
061f8     EC DC 01 F6 | 	mov	local04, local02
061fc     14 DC 05 F1 | 	add	local04, #20
06200     EE DE 01 FB | 	rdlong	local05, local04
06204     EF E8 01 F6 | 	mov	local10, local05
06208     14 5E 05 F1 | 	add	fp, #20
0620c     AF E4 01 FB | 	rdlong	local08, fp
06210     F2 E8 01 F1 | 	add	local10, local08
06214     14 D8 05 F1 | 	add	local02, #20
06218     EC E8 61 FC | 	wrlong	local10, local02
0621c     14 5E 85 F1 | 	sub	fp, #20
06220     AF DA 01 FB | 	rdlong	local03, fp
06224     04 5E 85 F1 | 	sub	fp, #4
06228     10 DA 05 F1 | 	add	local03, #16
0622c     ED D8 C1 FA | 	rdbyte	local02, local03
06230     02 D8 CD F7 | 	test	local02, #2 wz
06234     3C 00 90 AD |  if_e	jmp	#LR__0400
06238     04 5E 05 F1 | 	add	fp, #4
0623c     AF CC 01 FB | 	rdlong	arg01, fp
06240     10 5E 05 F1 | 	add	fp, #16
06244     AF CE 01 FB | 	rdlong	arg02, fp
06248     14 5E 85 F1 | 	sub	fp, #20
0624c     84 C8 BF FD | 	call	#_ff_cc_create_chain_0218
06250     14 5E 05 F1 | 	add	fp, #20
06254     AF B2 61 FC | 	wrlong	result1, fp
06258     AF D8 09 FB | 	rdlong	local02, fp wz
0625c     14 5E 85 F1 | 	sub	fp, #20
06260     34 00 90 5D |  if_ne	jmp	#LR__0401
06264     08 5E 05 F1 | 	add	fp, #8
06268     AF 00 68 FC | 	wrlong	#0, fp
0626c     08 5E 85 F1 | 	sub	fp, #8
06270                 | ' 							ofs = 0; break;
06270     CC 00 90 FD | 	jmp	#LR__0405
06274                 | LR__0400
06274     04 5E 05 F1 | 	add	fp, #4
06278     AF CC 01 FB | 	rdlong	arg01, fp
0627c     10 5E 05 F1 | 	add	fp, #16
06280     AF CE 01 FB | 	rdlong	arg02, fp
06284     14 5E 85 F1 | 	sub	fp, #20
06288     68 C2 BF FD | 	call	#_ff_cc_get_fat_0204
0628c     14 5E 05 F1 | 	add	fp, #20
06290     AF B2 61 FC | 	wrlong	result1, fp
06294     14 5E 85 F1 | 	sub	fp, #20
06298                 | LR__0401
06298     14 5E 05 F1 | 	add	fp, #20
0629c     AF D8 01 FB | 	rdlong	local02, fp
062a0     14 5E 85 F1 | 	sub	fp, #20
062a4     FF FF 7F FF 
062a8     FF D9 0D F2 | 	cmp	local02, ##-1 wz
062ac     1C 00 90 5D |  if_ne	jmp	#LR__0402
062b0     04 5E 05 F1 | 	add	fp, #4
062b4     AF D8 01 FB | 	rdlong	local02, fp
062b8     04 5E 85 F1 | 	sub	fp, #4
062bc     11 D8 05 F1 | 	add	local02, #17
062c0     EC 02 48 FC | 	wrbyte	#1, local02
062c4     01 B2 05 F6 | 	mov	result1, #1
062c8     00 02 90 FD | 	jmp	#LR__0412
062cc                 | LR__0402
062cc     14 5E 05 F1 | 	add	fp, #20
062d0     AF D8 01 FB | 	rdlong	local02, fp
062d4     14 5E 85 F1 | 	sub	fp, #20
062d8     01 D8 1D F2 | 	cmp	local02, #1 wcz
062dc     24 00 90 ED |  if_be	jmp	#LR__0403
062e0     10 5E 05 F1 | 	add	fp, #16
062e4     AF E8 01 FB | 	rdlong	local10, fp
062e8     04 5E 05 F1 | 	add	fp, #4
062ec     AF E0 01 FB | 	rdlong	local06, fp
062f0     14 5E 85 F1 | 	sub	fp, #20
062f4     14 E8 05 F1 | 	add	local10, #20
062f8     F4 D6 01 FB | 	rdlong	local01, local10
062fc     EB E0 19 F2 | 	cmp	local06, local01 wcz
06300     1C 00 90 CD |  if_b	jmp	#LR__0404
06304                 | LR__0403
06304     04 5E 05 F1 | 	add	fp, #4
06308     AF D8 01 FB | 	rdlong	local02, fp
0630c     04 5E 85 F1 | 	sub	fp, #4
06310     11 D8 05 F1 | 	add	local02, #17
06314     EC 04 48 FC | 	wrbyte	#2, local02
06318     02 B2 05 F6 | 	mov	result1, #2
0631c     AC 01 90 FD | 	jmp	#LR__0412
06320                 | LR__0404
06320     04 5E 05 F1 | 	add	fp, #4
06324     AF D8 01 FB | 	rdlong	local02, fp
06328     10 5E 05 F1 | 	add	fp, #16
0632c     AF E8 01 FB | 	rdlong	local10, fp
06330     14 5E 85 F1 | 	sub	fp, #20
06334     18 D8 05 F1 | 	add	local02, #24
06338     EC E8 61 FC | 	wrlong	local10, local02
0633c     78 FE 9F FD | 	jmp	#LR__0399
06340                 | LR__0405
06340     04 5E 05 F1 | 	add	fp, #4
06344     AF D8 01 FB | 	rdlong	local02, fp
06348     EC DC 01 F6 | 	mov	local04, local02
0634c     14 DC 05 F1 | 	add	local04, #20
06350     EE E8 01 FB | 	rdlong	local10, local04
06354     04 5E 05 F1 | 	add	fp, #4
06358     AF D6 01 FB | 	rdlong	local01, fp
0635c     EB E8 01 F1 | 	add	local10, local01
06360     14 D8 05 F1 | 	add	local02, #20
06364     EC E8 61 FC | 	wrlong	local10, local02
06368     AF D8 01 FB | 	rdlong	local02, fp
0636c     08 5E 85 F1 | 	sub	fp, #8
06370     FF D9 CD F7 | 	test	local02, #511 wz
06374     6C 00 90 AD |  if_e	jmp	#LR__0407
06378     10 5E 05 F1 | 	add	fp, #16
0637c     AF CC 01 FB | 	rdlong	arg01, fp
06380     04 5E 05 F1 | 	add	fp, #4
06384     AF CE 01 FB | 	rdlong	arg02, fp
06388     14 5E 85 F1 | 	sub	fp, #20
0638c     24 C1 BF FD | 	call	#_ff_cc_clst2sect_0199
06390     1C 5E 05 F1 | 	add	fp, #28
06394     AF B2 61 FC | 	wrlong	result1, fp
06398     AF D8 09 FB | 	rdlong	local02, fp wz
0639c     1C 5E 85 F1 | 	sub	fp, #28
063a0     1C 00 90 5D |  if_ne	jmp	#LR__0406
063a4     04 5E 05 F1 | 	add	fp, #4
063a8     AF D8 01 FB | 	rdlong	local02, fp
063ac     04 5E 85 F1 | 	sub	fp, #4
063b0     11 D8 05 F1 | 	add	local02, #17
063b4     EC 04 48 FC | 	wrbyte	#2, local02
063b8     02 B2 05 F6 | 	mov	result1, #2
063bc     0C 01 90 FD | 	jmp	#LR__0412
063c0                 | LR__0406
063c0     1C 5E 05 F1 | 	add	fp, #28
063c4     AF D8 01 FB | 	rdlong	local02, fp
063c8     14 5E 85 F1 | 	sub	fp, #20
063cc     AF E8 01 FB | 	rdlong	local10, fp
063d0     09 E8 45 F0 | 	shr	local10, #9
063d4     F4 D8 01 F1 | 	add	local02, local10
063d8     14 5E 05 F1 | 	add	fp, #20
063dc     AF D8 61 FC | 	wrlong	local02, fp
063e0     1C 5E 85 F1 | 	sub	fp, #28
063e4                 | LR__0407
063e4                 | LR__0408
063e4                 | LR__0409
063e4     04 5E 05 F1 | 	add	fp, #4
063e8     AF D8 01 FB | 	rdlong	local02, fp
063ec     EC E8 01 F6 | 	mov	local10, local02
063f0     04 5E 85 F1 | 	sub	fp, #4
063f4     14 D8 05 F1 | 	add	local02, #20
063f8     EC E0 01 FB | 	rdlong	local06, local02
063fc     0C E8 05 F1 | 	add	local10, #12
06400     F4 D6 01 FB | 	rdlong	local01, local10
06404     EB E0 19 F2 | 	cmp	local06, local01 wcz
06408     3C 00 90 ED |  if_be	jmp	#LR__0410
0640c     04 5E 05 F1 | 	add	fp, #4
06410     AF D8 01 FB | 	rdlong	local02, fp
06414     EC E8 01 F6 | 	mov	local10, local02
06418     14 E8 05 F1 | 	add	local10, #20
0641c     F4 E0 01 FB | 	rdlong	local06, local10
06420     0C D8 05 F1 | 	add	local02, #12
06424     EC E0 61 FC | 	wrlong	local06, local02
06428     AF D8 01 FB | 	rdlong	local02, fp
0642c     EC DC 01 F6 | 	mov	local04, local02
06430     04 5E 85 F1 | 	sub	fp, #4
06434     10 DC 05 F1 | 	add	local04, #16
06438     EE E8 C1 FA | 	rdbyte	local10, local04
0643c     40 E8 45 F5 | 	or	local10, #64
06440     10 D8 05 F1 | 	add	local02, #16
06444     EC E8 41 FC | 	wrbyte	local10, local02
06448                 | LR__0410
06448     04 5E 05 F1 | 	add	fp, #4
0644c     AF D8 01 FB | 	rdlong	local02, fp
06450     04 5E 85 F1 | 	sub	fp, #4
06454     14 D8 05 F1 | 	add	local02, #20
06458     EC E0 01 FB | 	rdlong	local06, local02
0645c     F0 DC 01 F6 | 	mov	local04, local06
06460     FF DD CD F7 | 	test	local04, #511 wz
06464     58 00 90 AD |  if_e	jmp	#LR__0411
06468     04 5E 05 F1 | 	add	fp, #4
0646c     AF D6 01 FB | 	rdlong	local01, fp
06470     EB DE 01 F6 | 	mov	local05, local01
06474     18 5E 05 F1 | 	add	fp, #24
06478     AF E2 01 FB | 	rdlong	local07, fp
0647c     1C 5E 85 F1 | 	sub	fp, #28
06480     F1 E4 01 F6 | 	mov	local08, local07
06484     1C DE 05 F1 | 	add	local05, #28
06488     EF EA 01 FB | 	rdlong	local11, local05
0648c     1C DE 85 F1 | 	sub	local05, #28
06490     F5 E6 01 F6 | 	mov	local09, local11
06494     F3 E4 09 F2 | 	cmp	local08, local09 wz
06498     24 00 90 AD |  if_e	jmp	#LR__0411
0649c     04 5E 05 F1 | 	add	fp, #4
064a0     AF DA 01 FB | 	rdlong	local03, fp
064a4     ED D8 01 F6 | 	mov	local02, local03
064a8     18 5E 05 F1 | 	add	fp, #24
064ac     AF E8 01 FB | 	rdlong	local10, fp
064b0     1C 5E 85 F1 | 	sub	fp, #28
064b4     1C D8 05 F1 | 	add	local02, #28
064b8     EC E8 61 FC | 	wrlong	local10, local02
064bc     1C D8 85 F1 | 	sub	local02, #28
064c0                 | LR__0411
064c0                 | ' #line 4553 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
064c0                 | ' 			fp->sect = nsect;
064c0                 | ' 		}
064c0                 | ' 	}
064c0                 | ' 
064c0                 | ' 	return res ;
064c0     0C 5E 05 F1 | 	add	fp, #12
064c4     AF B2 01 FB | 	rdlong	result1, fp
064c8     0C 5E 85 F1 | 	sub	fp, #12
064cc                 | LR__0412
064cc     AF F0 03 F6 | 	mov	ptra, fp
064d0     BA 00 A0 FD | 	call	#popregs_
064d4                 | _ff_cc_f_lseek_ret
064d4     2D 00 64 FD | 	ret
064d8                 | 
064d8                 | _ff_cc_f_opendir
064d8     05 5A 05 F6 | 	mov	COUNT_, #5
064dc     B0 00 A0 FD | 	call	#pushregs_
064e0     14 F0 07 F1 | 	add	ptra, #20
064e4     04 5E 05 F1 | 	add	fp, #4
064e8     AF CC 61 FC | 	wrlong	arg01, fp
064ec     04 5E 05 F1 | 	add	fp, #4
064f0     AF CE 61 FC | 	wrlong	arg02, fp
064f4     04 5E 85 F1 | 	sub	fp, #4
064f8     AF D6 09 FB | 	rdlong	local01, fp wz
064fc     04 5E 85 F1 | 	sub	fp, #4
06500     09 B2 05 A6 |  if_e	mov	result1, #9
06504     84 01 90 AD |  if_e	jmp	#LR__0420
06508     08 5E 05 F1 | 	add	fp, #8
0650c     AF CC 01 F6 | 	mov	arg01, fp
06510     08 5E 05 F1 | 	add	fp, #8
06514     AF CE 01 F6 | 	mov	arg02, fp
06518     10 5E 85 F1 | 	sub	fp, #16
0651c     00 D0 05 F6 | 	mov	arg03, #0
06520     80 D9 BF FD | 	call	#_ff_cc_mount_volume_0292
06524     D9 D8 01 F6 | 	mov	local02, result1
06528     0C 5E 05 F1 | 	add	fp, #12
0652c     AF D8 61 FC | 	wrlong	local02, fp
06530     AF D6 09 FB | 	rdlong	local01, fp wz
06534     0C 5E 85 F1 | 	sub	fp, #12
06538     24 01 90 5D |  if_ne	jmp	#LR__0418
0653c     04 5E 05 F1 | 	add	fp, #4
06540     AF D6 01 FB | 	rdlong	local01, fp
06544     0C 5E 05 F1 | 	add	fp, #12
06548     AF DA 01 FB | 	rdlong	local03, fp
0654c     EB DA 61 FC | 	wrlong	local03, local01
06550     0C 5E 85 F1 | 	sub	fp, #12
06554     AF CC 01 FB | 	rdlong	arg01, fp
06558     04 5E 05 F1 | 	add	fp, #4
0655c     AF CE 01 FB | 	rdlong	arg02, fp
06560     08 5E 85 F1 | 	sub	fp, #8
06564     00 D4 BF FD | 	call	#_ff_cc_follow_path_0269
06568     0C 5E 05 F1 | 	add	fp, #12
0656c     AF B2 61 FC | 	wrlong	result1, fp
06570     AF D6 09 FB | 	rdlong	local01, fp wz
06574     0C 5E 85 F1 | 	sub	fp, #12
06578     C8 00 90 5D |  if_ne	jmp	#LR__0417
0657c     04 5E 05 F1 | 	add	fp, #4
06580     AF DC 01 FB | 	rdlong	local04, fp
06584     04 5E 85 F1 | 	sub	fp, #4
06588     2B DC 05 F1 | 	add	local04, #43
0658c     EE D6 C1 FA | 	rdbyte	local01, local04
06590     80 D6 CD F7 | 	test	local01, #128 wz
06594     5C 00 90 5D |  if_ne	jmp	#LR__0415
06598     04 5E 05 F1 | 	add	fp, #4
0659c     AF DC 01 FB | 	rdlong	local04, fp
065a0     04 5E 85 F1 | 	sub	fp, #4
065a4     06 DC 05 F1 | 	add	local04, #6
065a8     EE D6 C1 FA | 	rdbyte	local01, local04
065ac     10 D6 CD F7 | 	test	local01, #16 wz
065b0     34 00 90 AD |  if_e	jmp	#LR__0413
065b4     04 5E 05 F1 | 	add	fp, #4
065b8     AF D6 01 FB | 	rdlong	local01, fp
065bc     0C 5E 05 F1 | 	add	fp, #12
065c0     AF CC 01 FB | 	rdlong	arg01, fp
065c4     0C 5E 85 F1 | 	sub	fp, #12
065c8     AF DE 01 FB | 	rdlong	local05, fp
065cc     04 5E 85 F1 | 	sub	fp, #4
065d0     1C DE 05 F1 | 	add	local05, #28
065d4     EF CE 01 FB | 	rdlong	arg02, local05
065d8     5C CC BF FD | 	call	#_ff_cc_ld_clust_0237
065dc     08 D6 05 F1 | 	add	local01, #8
065e0     EB B2 61 FC | 	wrlong	result1, local01
065e4     0C 00 90 FD | 	jmp	#LR__0414
065e8                 | LR__0413
065e8     0C 5E 05 F1 | 	add	fp, #12
065ec     AF 0A 68 FC | 	wrlong	#5, fp
065f0     0C 5E 85 F1 | 	sub	fp, #12
065f4                 | LR__0414
065f4                 | LR__0415
065f4     0C 5E 05 F1 | 	add	fp, #12
065f8     AF D6 09 FB | 	rdlong	local01, fp wz
065fc     0C 5E 85 F1 | 	sub	fp, #12
06600     40 00 90 5D |  if_ne	jmp	#LR__0416
06604     04 5E 05 F1 | 	add	fp, #4
06608     AF D6 01 FB | 	rdlong	local01, fp
0660c     0C 5E 05 F1 | 	add	fp, #12
06610     AF DA 01 FB | 	rdlong	local03, fp
06614     06 DA 05 F1 | 	add	local03, #6
06618     ED DE E1 FA | 	rdword	local05, local03
0661c     04 D6 05 F1 | 	add	local01, #4
06620     EB DE 51 FC | 	wrword	local05, local01
06624     0C 5E 85 F1 | 	sub	fp, #12
06628     AF CC 01 FB | 	rdlong	arg01, fp
0662c     04 5E 85 F1 | 	sub	fp, #4
06630     00 CE 05 F6 | 	mov	arg02, #0
06634     D8 C7 BF FD | 	call	#_ff_cc_dir_sdi_0227
06638     0C 5E 05 F1 | 	add	fp, #12
0663c     AF B2 61 FC | 	wrlong	result1, fp
06640     0C 5E 85 F1 | 	sub	fp, #12
06644                 | LR__0416
06644                 | LR__0417
06644     0C 5E 05 F1 | 	add	fp, #12
06648     AF D6 01 FB | 	rdlong	local01, fp
0664c     0C 5E 85 F1 | 	sub	fp, #12
06650     04 D6 0D F2 | 	cmp	local01, #4 wz
06654     0C 5E 05 A1 |  if_e	add	fp, #12
06658     AF 0A 68 AC |  if_e	wrlong	#5, fp
0665c     0C 5E 85 A1 |  if_e	sub	fp, #12
06660                 | LR__0418
06660     0C 5E 05 F1 | 	add	fp, #12
06664     AF D6 09 FB | 	rdlong	local01, fp wz
06668     0C 5E 85 F1 | 	sub	fp, #12
0666c     10 00 90 AD |  if_e	jmp	#LR__0419
06670     04 5E 05 F1 | 	add	fp, #4
06674     AF D6 01 FB | 	rdlong	local01, fp
06678     04 5E 85 F1 | 	sub	fp, #4
0667c     EB 00 68 FC | 	wrlong	#0, local01
06680                 | LR__0419
06680                 | ' 
06680                 | ' 	return res ;
06680     0C 5E 05 F1 | 	add	fp, #12
06684     AF B2 01 FB | 	rdlong	result1, fp
06688     0C 5E 85 F1 | 	sub	fp, #12
0668c                 | LR__0420
0668c     AF F0 03 F6 | 	mov	ptra, fp
06690     BA 00 A0 FD | 	call	#popregs_
06694                 | _ff_cc_f_opendir_ret
06694     2D 00 64 FD | 	ret
06698                 | 
06698                 | _ff_cc_f_closedir
06698     02 5A 05 F6 | 	mov	COUNT_, #2
0669c     B0 00 A0 FD | 	call	#pushregs_
066a0     10 F0 07 F1 | 	add	ptra, #16
066a4     04 5E 05 F1 | 	add	fp, #4
066a8     AF CC 61 FC | 	wrlong	arg01, fp
066ac     08 5E 05 F1 | 	add	fp, #8
066b0     AF CE 01 F6 | 	mov	arg02, fp
066b4     0C 5E 85 F1 | 	sub	fp, #12
066b8     28 DE BF FD | 	call	#_ff_cc_validate_0294
066bc     D9 D6 01 F6 | 	mov	local01, result1
066c0     08 5E 05 F1 | 	add	fp, #8
066c4     AF D6 61 FC | 	wrlong	local01, fp
066c8     AF D8 09 FB | 	rdlong	local02, fp wz
066cc     08 5E 85 F1 | 	sub	fp, #8
066d0     10 00 90 5D |  if_ne	jmp	#LR__0421
066d4     04 5E 05 F1 | 	add	fp, #4
066d8     AF D8 01 FB | 	rdlong	local02, fp
066dc     04 5E 85 F1 | 	sub	fp, #4
066e0     EC 00 68 FC | 	wrlong	#0, local02
066e4                 | LR__0421
066e4                 | ' 
066e4                 | ' 
066e4                 | ' 
066e4                 | ' 
066e4                 | ' 		dp->obj.fs = 0;
066e4                 | ' #line 4652 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
066e4                 | ' 	}
066e4                 | ' 	return res;
066e4     08 5E 05 F1 | 	add	fp, #8
066e8     AF B2 01 FB | 	rdlong	result1, fp
066ec     08 5E 85 F1 | 	sub	fp, #8
066f0     AF F0 03 F6 | 	mov	ptra, fp
066f4     BA 00 A0 FD | 	call	#popregs_
066f8                 | _ff_cc_f_closedir_ret
066f8     2D 00 64 FD | 	ret
066fc                 | 
066fc                 | _ff_cc_f_readdir
066fc     02 5A 05 F6 | 	mov	COUNT_, #2
06700     B0 00 A0 FD | 	call	#pushregs_
06704     14 F0 07 F1 | 	add	ptra, #20
06708     04 5E 05 F1 | 	add	fp, #4
0670c     AF CC 61 FC | 	wrlong	arg01, fp
06710     04 5E 05 F1 | 	add	fp, #4
06714     AF CE 61 FC | 	wrlong	arg02, fp
06718     04 5E 85 F1 | 	sub	fp, #4
0671c     AF CC 01 FB | 	rdlong	arg01, fp
06720     0C 5E 05 F1 | 	add	fp, #12
06724     AF CE 01 F6 | 	mov	arg02, fp
06728     10 5E 85 F1 | 	sub	fp, #16
0672c     B4 DD BF FD | 	call	#_ff_cc_validate_0294
06730     D9 D6 01 F6 | 	mov	local01, result1
06734     0C 5E 05 F1 | 	add	fp, #12
06738     AF D6 61 FC | 	wrlong	local01, fp
0673c     AF D8 09 FB | 	rdlong	local02, fp wz
06740     0C 5E 85 F1 | 	sub	fp, #12
06744     BC 00 90 5D |  if_ne	jmp	#LR__0425
06748     08 5E 05 F1 | 	add	fp, #8
0674c     AF D8 09 FB | 	rdlong	local02, fp wz
06750     08 5E 85 F1 | 	sub	fp, #8
06754     24 00 90 5D |  if_ne	jmp	#LR__0422
06758     04 5E 05 F1 | 	add	fp, #4
0675c     AF CC 01 FB | 	rdlong	arg01, fp
06760     04 5E 85 F1 | 	sub	fp, #4
06764     00 CE 05 F6 | 	mov	arg02, #0
06768     A4 C6 BF FD | 	call	#_ff_cc_dir_sdi_0227
0676c     0C 5E 05 F1 | 	add	fp, #12
06770     AF B2 61 FC | 	wrlong	result1, fp
06774     0C 5E 85 F1 | 	sub	fp, #12
06778     88 00 90 FD | 	jmp	#LR__0424
0677c                 | LR__0422
0677c     04 5E 05 F1 | 	add	fp, #4
06780     AF CC 01 FB | 	rdlong	arg01, fp
06784     04 5E 85 F1 | 	sub	fp, #4
06788     00 CE 05 F6 | 	mov	arg02, #0
0678c     50 CB BF FD | 	call	#_ff_cc_dir_read_0243
06790     0C 5E 05 F1 | 	add	fp, #12
06794     AF B2 61 FC | 	wrlong	result1, fp
06798     0C 5E 85 F1 | 	sub	fp, #12
0679c     04 B2 0D F2 | 	cmp	result1, #4 wz
067a0     0C 5E 05 A1 |  if_e	add	fp, #12
067a4     AF 00 68 AC |  if_e	wrlong	#0, fp
067a8     0C 5E 85 A1 |  if_e	sub	fp, #12
067ac     0C 5E 05 F1 | 	add	fp, #12
067b0     AF D8 09 FB | 	rdlong	local02, fp wz
067b4     0C 5E 85 F1 | 	sub	fp, #12
067b8     48 00 90 5D |  if_ne	jmp	#LR__0423
067bc     04 5E 05 F1 | 	add	fp, #4
067c0     AF CC 01 FB | 	rdlong	arg01, fp
067c4     04 5E 05 F1 | 	add	fp, #4
067c8     AF CE 01 FB | 	rdlong	arg02, fp
067cc     08 5E 85 F1 | 	sub	fp, #8
067d0     FC CD BF FD | 	call	#_ff_cc_get_fileinfo_0257
067d4     04 5E 05 F1 | 	add	fp, #4
067d8     AF CC 01 FB | 	rdlong	arg01, fp
067dc     04 5E 85 F1 | 	sub	fp, #4
067e0     00 CE 05 F6 | 	mov	arg02, #0
067e4     B4 C7 BF FD | 	call	#_ff_cc_dir_next_0231
067e8     0C 5E 05 F1 | 	add	fp, #12
067ec     AF B2 61 FC | 	wrlong	result1, fp
067f0     0C 5E 85 F1 | 	sub	fp, #12
067f4     04 B2 0D F2 | 	cmp	result1, #4 wz
067f8     0C 5E 05 A1 |  if_e	add	fp, #12
067fc     AF 00 68 AC |  if_e	wrlong	#0, fp
06800     0C 5E 85 A1 |  if_e	sub	fp, #12
06804                 | LR__0423
06804                 | LR__0424
06804                 | LR__0425
06804                 | ' 			}
06804                 | ' 			;
06804                 | ' 		}
06804                 | ' 	}
06804                 | ' 	return res ;
06804     0C 5E 05 F1 | 	add	fp, #12
06808     AF B2 01 FB | 	rdlong	result1, fp
0680c     0C 5E 85 F1 | 	sub	fp, #12
06810     AF F0 03 F6 | 	mov	ptra, fp
06814     BA 00 A0 FD | 	call	#popregs_
06818                 | _ff_cc_f_readdir_ret
06818     2D 00 64 FD | 	ret
0681c                 | 
0681c                 | _ff_cc_f_stat
0681c     03 5A 05 F6 | 	mov	COUNT_, #3
06820     B0 00 A0 FD | 	call	#pushregs_
06824     3C F0 07 F1 | 	add	ptra, #60
06828     04 5E 05 F1 | 	add	fp, #4
0682c     AF CC 61 FC | 	wrlong	arg01, fp
06830     04 5E 05 F1 | 	add	fp, #4
06834     AF CE 61 FC | 	wrlong	arg02, fp
06838     04 5E 85 F1 | 	sub	fp, #4
0683c     AF CC 01 F6 | 	mov	arg01, fp
06840     0C 5E 05 F1 | 	add	fp, #12
06844     AF CE 01 F6 | 	mov	arg02, fp
06848     10 5E 85 F1 | 	sub	fp, #16
0684c     00 D0 05 F6 | 	mov	arg03, #0
06850     50 D6 BF FD | 	call	#_ff_cc_mount_volume_0292
06854     D9 D6 01 F6 | 	mov	local01, result1
06858     0C 5E 05 F1 | 	add	fp, #12
0685c     AF D6 61 FC | 	wrlong	local01, fp
06860     AF D8 09 FB | 	rdlong	local02, fp wz
06864     0C 5E 85 F1 | 	sub	fp, #12
06868     80 00 90 5D |  if_ne	jmp	#LR__0430
0686c     10 5E 05 F1 | 	add	fp, #16
06870     AF CC 01 F6 | 	mov	arg01, fp
06874     0C 5E 85 F1 | 	sub	fp, #12
06878     AF CE 01 FB | 	rdlong	arg02, fp
0687c     04 5E 85 F1 | 	sub	fp, #4
06880     E4 D0 BF FD | 	call	#_ff_cc_follow_path_0269
06884     D9 DA 01 F6 | 	mov	local03, result1
06888     0C 5E 05 F1 | 	add	fp, #12
0688c     AF DA 61 FC | 	wrlong	local03, fp
06890     AF D8 09 FB | 	rdlong	local02, fp wz
06894     0C 5E 85 F1 | 	sub	fp, #12
06898     50 00 90 5D |  if_ne	jmp	#LR__0429
0689c     3B 5E 05 F1 | 	add	fp, #59
068a0     AF D8 C1 FA | 	rdbyte	local02, fp
068a4     3B 5E 85 F1 | 	sub	fp, #59
068a8     07 D8 45 F7 | 	zerox	local02, #7
068ac     80 D8 CD F7 | 	test	local02, #128 wz
068b0     10 00 90 AD |  if_e	jmp	#LR__0426
068b4     0C 5E 05 F1 | 	add	fp, #12
068b8     AF 0C 68 FC | 	wrlong	#6, fp
068bc     0C 5E 85 F1 | 	sub	fp, #12
068c0     28 00 90 FD | 	jmp	#LR__0428
068c4                 | LR__0426
068c4     08 5E 05 F1 | 	add	fp, #8
068c8     AF D8 09 FB | 	rdlong	local02, fp wz
068cc     08 5E 85 F1 | 	sub	fp, #8
068d0     18 00 90 AD |  if_e	jmp	#LR__0427
068d4     10 5E 05 F1 | 	add	fp, #16
068d8     AF CC 01 F6 | 	mov	arg01, fp
068dc     08 5E 85 F1 | 	sub	fp, #8
068e0     AF CE 01 FB | 	rdlong	arg02, fp
068e4     08 5E 85 F1 | 	sub	fp, #8
068e8     E4 CC BF FD | 	call	#_ff_cc_get_fileinfo_0257
068ec                 | LR__0427
068ec                 | LR__0428
068ec                 | LR__0429
068ec                 | LR__0430
068ec                 | ' 			}
068ec                 | ' 		}
068ec                 | ' 		;
068ec                 | ' 	}
068ec                 | ' 
068ec                 | ' 	return res ;
068ec     0C 5E 05 F1 | 	add	fp, #12
068f0     AF B2 01 FB | 	rdlong	result1, fp
068f4     0C 5E 85 F1 | 	sub	fp, #12
068f8     AF F0 03 F6 | 	mov	ptra, fp
068fc     BA 00 A0 FD | 	call	#popregs_
06900                 | _ff_cc_f_stat_ret
06900     2D 00 64 FD | 	ret
06904                 | 
06904                 | _ff_cc_f_unlink
06904     06 5A 05 F6 | 	mov	COUNT_, #6
06908     B0 00 A0 FD | 	call	#pushregs_
0690c     6C F0 07 F1 | 	add	ptra, #108
06910     04 5E 05 F1 | 	add	fp, #4
06914     AF CC 61 FC | 	wrlong	arg01, fp
06918     60 5E 05 F1 | 	add	fp, #96
0691c     AF 00 68 FC | 	wrlong	#0, fp
06920     60 5E 85 F1 | 	sub	fp, #96
06924     AF CC 01 F6 | 	mov	arg01, fp
06928     64 5E 05 F1 | 	add	fp, #100
0692c     AF CE 01 F6 | 	mov	arg02, fp
06930     68 5E 85 F1 | 	sub	fp, #104
06934     02 D0 05 F6 | 	mov	arg03, #2
06938     68 D5 BF FD | 	call	#_ff_cc_mount_volume_0292
0693c     D9 D6 01 F6 | 	mov	local01, result1
06940     08 5E 05 F1 | 	add	fp, #8
06944     AF D6 61 FC | 	wrlong	local01, fp
06948     AF D8 09 FB | 	rdlong	local02, fp wz
0694c     08 5E 85 F1 | 	sub	fp, #8
06950     18 02 90 5D |  if_ne	jmp	#LR__0440
06954     68 5E 05 F1 | 	add	fp, #104
06958     AF D8 01 FB | 	rdlong	local02, fp
0695c     5C 5E 85 F1 | 	sub	fp, #92
06960     AF D8 61 FC | 	wrlong	local02, fp
06964     AF CC 01 F6 | 	mov	arg01, fp
06968     08 5E 85 F1 | 	sub	fp, #8
0696c     AF CE 01 FB | 	rdlong	arg02, fp
06970     04 5E 85 F1 | 	sub	fp, #4
06974     F0 CF BF FD | 	call	#_ff_cc_follow_path_0269
06978     D9 DA 01 F6 | 	mov	local03, result1
0697c     08 5E 05 F1 | 	add	fp, #8
06980     AF DA 61 FC | 	wrlong	local03, fp
06984     AF D8 09 FB | 	rdlong	local02, fp wz
06988     08 5E 85 F1 | 	sub	fp, #8
0698c     DC 01 90 5D |  if_ne	jmp	#LR__0439
06990     37 5E 05 F1 | 	add	fp, #55
06994     AF D8 C1 FA | 	rdbyte	local02, fp
06998     37 5E 85 F1 | 	sub	fp, #55
0699c     07 D8 45 F7 | 	zerox	local02, #7
069a0     80 D8 CD F7 | 	test	local02, #128 wz
069a4     10 00 90 AD |  if_e	jmp	#LR__0431
069a8     08 5E 05 F1 | 	add	fp, #8
069ac     AF 0C 68 FC | 	wrlong	#6, fp
069b0     08 5E 85 F1 | 	sub	fp, #8
069b4     20 00 90 FD | 	jmp	#LR__0432
069b8                 | LR__0431
069b8     12 5E 05 F1 | 	add	fp, #18
069bc     AF D8 C1 FA | 	rdbyte	local02, fp
069c0     12 5E 85 F1 | 	sub	fp, #18
069c4     07 D8 45 F7 | 	zerox	local02, #7
069c8     01 D8 CD F7 | 	test	local02, #1 wz
069cc     08 5E 05 51 |  if_ne	add	fp, #8
069d0     AF 0E 68 5C |  if_ne	wrlong	#7, fp
069d4     08 5E 85 51 |  if_ne	sub	fp, #8
069d8                 | LR__0432
069d8     08 5E 05 F1 | 	add	fp, #8
069dc     AF D8 09 FB | 	rdlong	local02, fp wz
069e0     08 5E 85 F1 | 	sub	fp, #8
069e4     D4 00 90 5D |  if_ne	jmp	#LR__0435
069e8     68 5E 05 F1 | 	add	fp, #104
069ec     AF CC 01 FB | 	rdlong	arg01, fp
069f0     40 5E 85 F1 | 	sub	fp, #64
069f4     AF CE 01 FB | 	rdlong	arg02, fp
069f8     28 5E 85 F1 | 	sub	fp, #40
069fc     38 C8 BF FD | 	call	#_ff_cc_ld_clust_0237
06a00     D9 DA 01 F6 | 	mov	local03, result1
06a04     64 5E 05 F1 | 	add	fp, #100
06a08     AF DA 61 FC | 	wrlong	local03, fp
06a0c     52 5E 85 F1 | 	sub	fp, #82
06a10     AF D8 C1 FA | 	rdbyte	local02, fp
06a14     12 5E 85 F1 | 	sub	fp, #18
06a18     07 D8 45 F7 | 	zerox	local02, #7
06a1c     10 D8 CD F7 | 	test	local02, #16 wz
06a20     98 00 90 AD |  if_e	jmp	#LR__0434
06a24     68 5E 05 F1 | 	add	fp, #104
06a28     AF D8 01 FB | 	rdlong	local02, fp
06a2c     30 5E 85 F1 | 	sub	fp, #48
06a30     AF D8 61 FC | 	wrlong	local02, fp
06a34     2C 5E 05 F1 | 	add	fp, #44
06a38     AF D8 01 FB | 	rdlong	local02, fp
06a3c     24 5E 85 F1 | 	sub	fp, #36
06a40     AF D8 61 FC | 	wrlong	local02, fp
06a44     08 5E 85 F1 | 	sub	fp, #8
06a48     AF CC 01 F6 | 	mov	arg01, fp
06a4c     38 5E 85 F1 | 	sub	fp, #56
06a50     00 CE 05 F6 | 	mov	arg02, #0
06a54     B8 C3 BF FD | 	call	#_ff_cc_dir_sdi_0227
06a58     D9 DC 01 F6 | 	mov	local04, result1
06a5c     08 5E 05 F1 | 	add	fp, #8
06a60     AF DC 61 FC | 	wrlong	local04, fp
06a64     AF D8 09 FB | 	rdlong	local02, fp wz
06a68     08 5E 85 F1 | 	sub	fp, #8
06a6c     4C 00 90 5D |  if_ne	jmp	#LR__0433
06a70     38 5E 05 F1 | 	add	fp, #56
06a74     AF CC 01 F6 | 	mov	arg01, fp
06a78     38 5E 85 F1 | 	sub	fp, #56
06a7c     00 CE 05 F6 | 	mov	arg02, #0
06a80     5C C8 BF FD | 	call	#_ff_cc_dir_read_0243
06a84     08 5E 05 F1 | 	add	fp, #8
06a88     AF B2 61 FC | 	wrlong	result1, fp
06a8c     AF D8 09 FB | 	rdlong	local02, fp wz
06a90     08 5E 85 F1 | 	sub	fp, #8
06a94     08 5E 05 A1 |  if_e	add	fp, #8
06a98     AF 0E 68 AC |  if_e	wrlong	#7, fp
06a9c     08 5E 85 A1 |  if_e	sub	fp, #8
06aa0     08 5E 05 F1 | 	add	fp, #8
06aa4     AF D8 01 FB | 	rdlong	local02, fp
06aa8     08 5E 85 F1 | 	sub	fp, #8
06aac     04 D8 0D F2 | 	cmp	local02, #4 wz
06ab0     08 5E 05 A1 |  if_e	add	fp, #8
06ab4     AF 00 68 AC |  if_e	wrlong	#0, fp
06ab8     08 5E 85 A1 |  if_e	sub	fp, #8
06abc                 | LR__0433
06abc                 | LR__0434
06abc                 | LR__0435
06abc     08 5E 05 F1 | 	add	fp, #8
06ac0     AF D8 09 FB | 	rdlong	local02, fp wz
06ac4     08 5E 85 F1 | 	sub	fp, #8
06ac8     A0 00 90 5D |  if_ne	jmp	#LR__0438
06acc     0C 5E 05 F1 | 	add	fp, #12
06ad0     AF CC 01 F6 | 	mov	arg01, fp
06ad4     0C 5E 85 F1 | 	sub	fp, #12
06ad8     A4 CA BF FD | 	call	#_ff_cc_dir_remove_0253
06adc     08 5E 05 F1 | 	add	fp, #8
06ae0     AF B2 61 FC | 	wrlong	result1, fp
06ae4     AF D8 09 FB | 	rdlong	local02, fp wz
06ae8     08 5E 85 F1 | 	sub	fp, #8
06aec     50 00 90 5D |  if_ne	jmp	#LR__0436
06af0     64 5E 05 F1 | 	add	fp, #100
06af4     AF DE 09 FB | 	rdlong	local05, fp wz
06af8     64 5E 85 F1 | 	sub	fp, #100
06afc     40 00 90 AD |  if_e	jmp	#LR__0436
06b00     0C 5E 05 F1 | 	add	fp, #12
06b04     AF D8 01 F6 | 	mov	local02, fp
06b08     EC E0 01 F6 | 	mov	local06, local02
06b0c     58 5E 05 F1 | 	add	fp, #88
06b10     AF DC 01 FB | 	rdlong	local04, fp
06b14     64 5E 85 F1 | 	sub	fp, #100
06b18     EE DE 01 F6 | 	mov	local05, local04
06b1c     00 DA 05 F6 | 	mov	local03, #0
06b20     F0 CC 01 F6 | 	mov	arg01, local06
06b24     EF CE 01 F6 | 	mov	arg02, local05
06b28     00 D0 05 F6 | 	mov	arg03, #0
06b2c     8C BE BF FD | 	call	#_ff_cc_remove_chain_0212
06b30     D9 D6 01 F6 | 	mov	local01, result1
06b34     08 5E 05 F1 | 	add	fp, #8
06b38     AF D6 61 FC | 	wrlong	local01, fp
06b3c     08 5E 85 F1 | 	sub	fp, #8
06b40                 | LR__0436
06b40     08 5E 05 F1 | 	add	fp, #8
06b44     AF D8 09 FB | 	rdlong	local02, fp wz
06b48     08 5E 85 F1 | 	sub	fp, #8
06b4c     1C 00 90 5D |  if_ne	jmp	#LR__0437
06b50     68 5E 05 F1 | 	add	fp, #104
06b54     AF CC 01 FB | 	rdlong	arg01, fp
06b58     68 5E 85 F1 | 	sub	fp, #104
06b5c     D8 B7 BF FD | 	call	#_ff_cc_sync_fs_0198
06b60     08 5E 05 F1 | 	add	fp, #8
06b64     AF B2 61 FC | 	wrlong	result1, fp
06b68     08 5E 85 F1 | 	sub	fp, #8
06b6c                 | LR__0437
06b6c                 | LR__0438
06b6c                 | LR__0439
06b6c                 | LR__0440
06b6c                 | ' 			}
06b6c                 | ' 		}
06b6c                 | ' 		;
06b6c                 | ' 	}
06b6c                 | ' 
06b6c                 | ' 	return res ;
06b6c     08 5E 05 F1 | 	add	fp, #8
06b70     AF B2 01 FB | 	rdlong	result1, fp
06b74     08 5E 85 F1 | 	sub	fp, #8
06b78     AF F0 03 F6 | 	mov	ptra, fp
06b7c     BA 00 A0 FD | 	call	#popregs_
06b80                 | _ff_cc_f_unlink_ret
06b80     2D 00 64 FD | 	ret
06b84                 | 
06b84                 | _ff_cc_f_mkdir
06b84     06 5A 05 F6 | 	mov	COUNT_, #6
06b88     B0 00 A0 FD | 	call	#pushregs_
06b8c     58 F0 07 F1 | 	add	ptra, #88
06b90     04 5E 05 F1 | 	add	fp, #4
06b94     AF CC 61 FC | 	wrlong	arg01, fp
06b98     AF CC 01 F6 | 	mov	arg01, fp
06b9c     44 5E 05 F1 | 	add	fp, #68
06ba0     AF CE 01 F6 | 	mov	arg02, fp
06ba4     48 5E 85 F1 | 	sub	fp, #72
06ba8     02 D0 05 F6 | 	mov	arg03, #2
06bac     F4 D2 BF FD | 	call	#_ff_cc_mount_volume_0292
06bb0     D9 D6 01 F6 | 	mov	local01, result1
06bb4     08 5E 05 F1 | 	add	fp, #8
06bb8     AF D6 61 FC | 	wrlong	local01, fp
06bbc     AF D8 09 FB | 	rdlong	local02, fp wz
06bc0     08 5E 85 F1 | 	sub	fp, #8
06bc4     04 03 90 5D |  if_ne	jmp	#LR__0450
06bc8     48 5E 05 F1 | 	add	fp, #72
06bcc     AF D8 01 FB | 	rdlong	local02, fp
06bd0     3C 5E 85 F1 | 	sub	fp, #60
06bd4     AF D8 61 FC | 	wrlong	local02, fp
06bd8     AF CC 01 F6 | 	mov	arg01, fp
06bdc     08 5E 85 F1 | 	sub	fp, #8
06be0     AF DA 01 FB | 	rdlong	local03, fp
06be4     04 5E 85 F1 | 	sub	fp, #4
06be8     ED CE 01 F6 | 	mov	arg02, local03
06bec     78 CD BF FD | 	call	#_ff_cc_follow_path_0269
06bf0     D9 DC 01 F6 | 	mov	local04, result1
06bf4     08 5E 05 F1 | 	add	fp, #8
06bf8     AF DC 61 FC | 	wrlong	local04, fp
06bfc     EE DE 01 F6 | 	mov	local05, local04
06c00     08 5E 85 F1 | 	sub	fp, #8
06c04     EF D8 09 F6 | 	mov	local02, local05 wz
06c08     08 5E 05 A1 |  if_e	add	fp, #8
06c0c     AF 10 68 AC |  if_e	wrlong	#8, fp
06c10     08 5E 85 A1 |  if_e	sub	fp, #8
06c14     08 5E 05 F1 | 	add	fp, #8
06c18     AF D8 01 FB | 	rdlong	local02, fp
06c1c     08 5E 85 F1 | 	sub	fp, #8
06c20     04 D8 0D F2 | 	cmp	local02, #4 wz
06c24     A4 02 90 5D |  if_ne	jmp	#LR__0449
06c28     48 5E 05 F1 | 	add	fp, #72
06c2c     AF D8 01 FB | 	rdlong	local02, fp
06c30     10 5E 85 F1 | 	sub	fp, #16
06c34     AF D8 61 FC | 	wrlong	local02, fp
06c38     AF CC 01 F6 | 	mov	arg01, fp
06c3c     38 5E 85 F1 | 	sub	fp, #56
06c40     00 CE 05 F6 | 	mov	arg02, #0
06c44     8C BE BF FD | 	call	#_ff_cc_create_chain_0218
06c48     D9 E0 01 F6 | 	mov	local06, result1
06c4c     4C 5E 05 F1 | 	add	fp, #76
06c50     AF E0 61 FC | 	wrlong	local06, fp
06c54     44 5E 85 F1 | 	sub	fp, #68
06c58     AF 00 68 FC | 	wrlong	#0, fp
06c5c     44 5E 05 F1 | 	add	fp, #68
06c60     AF D8 09 FB | 	rdlong	local02, fp wz
06c64     4C 5E 85 F1 | 	sub	fp, #76
06c68     08 5E 05 A1 |  if_e	add	fp, #8
06c6c     AF 0E 68 AC |  if_e	wrlong	#7, fp
06c70     08 5E 85 A1 |  if_e	sub	fp, #8
06c74     4C 5E 05 F1 | 	add	fp, #76
06c78     AF D8 01 FB | 	rdlong	local02, fp
06c7c     4C 5E 85 F1 | 	sub	fp, #76
06c80     01 D8 0D F2 | 	cmp	local02, #1 wz
06c84     08 5E 05 A1 |  if_e	add	fp, #8
06c88     AF 04 68 AC |  if_e	wrlong	#2, fp
06c8c     08 5E 85 A1 |  if_e	sub	fp, #8
06c90     4C 5E 05 F1 | 	add	fp, #76
06c94     AF D8 01 FB | 	rdlong	local02, fp
06c98     4C 5E 85 F1 | 	sub	fp, #76
06c9c     FF FF 7F FF 
06ca0     FF D9 0D F2 | 	cmp	local02, ##-1 wz
06ca4     08 5E 05 A1 |  if_e	add	fp, #8
06ca8     AF 02 68 AC |  if_e	wrlong	#1, fp
06cac     08 5E 85 A1 |  if_e	sub	fp, #8
06cb0     54 5E 05 F1 | 	add	fp, #84
06cb4     80 10 A7 FF 
06cb8     AF 00 68 FC | 	wrlong	##1310785536, fp
06cbc     4C 5E 85 F1 | 	sub	fp, #76
06cc0     AF D8 09 FB | 	rdlong	local02, fp wz
06cc4     08 5E 85 F1 | 	sub	fp, #8
06cc8     48 01 90 5D |  if_ne	jmp	#LR__0446
06ccc     48 5E 05 F1 | 	add	fp, #72
06cd0     AF CC 01 FB | 	rdlong	arg01, fp
06cd4     04 5E 05 F1 | 	add	fp, #4
06cd8     AF E0 01 FB | 	rdlong	local06, fp
06cdc     4C 5E 85 F1 | 	sub	fp, #76
06ce0     F0 DA 01 F6 | 	mov	local03, local06
06ce4     ED CE 01 F6 | 	mov	arg02, local03
06ce8     48 C0 BF FD | 	call	#_ff_cc_dir_clear_0223
06cec     D9 DC 01 F6 | 	mov	local04, result1
06cf0     08 5E 05 F1 | 	add	fp, #8
06cf4     AF DC 61 FC | 	wrlong	local04, fp
06cf8     EE DE 01 F6 | 	mov	local05, local04
06cfc     08 5E 85 F1 | 	sub	fp, #8
06d00     EF D8 09 F6 | 	mov	local02, local05 wz
06d04     0C 01 90 5D |  if_ne	jmp	#LR__0445
06d08     48 5E 05 F1 | 	add	fp, #72
06d0c     AF CC 01 FB | 	rdlong	arg01, fp
06d10     48 5E 85 F1 | 	sub	fp, #72
06d14     30 CC 05 F1 | 	add	arg01, #48
06d18     20 CE 05 F6 | 	mov	arg02, #32
06d1c     0B D0 05 F6 | 	mov	arg03, #11
06d20                 | ' {
06d20                 | ' 	BYTE *d = (BYTE*)dst;
06d20                 | ' 
06d20                 | ' 	do {
06d20     E8 92 9F FE | 	loc	pa,	#(@LR__0443-@LR__0441)
06d24     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d28                 | LR__0441
06d28     0B 04 DC FC | 	rep	@LR__0444, #11
06d2c                 | LR__0442
06d2c     E6 CE 41 FC | 	wrbyte	arg02, arg01
06d30     01 CC 05 F1 | 	add	arg01, #1
06d34                 | LR__0443
06d34                 | LR__0444
06d34     48 5E 05 F1 | 	add	fp, #72
06d38     AF D8 01 FB | 	rdlong	local02, fp
06d3c     30 D8 05 F1 | 	add	local02, #48
06d40     EC 5C 48 FC | 	wrbyte	#46, local02
06d44     AF D8 01 FB | 	rdlong	local02, fp
06d48     3B D8 05 F1 | 	add	local02, #59
06d4c     EC 20 48 FC | 	wrbyte	#16, local02
06d50     AF CC 01 FB | 	rdlong	arg01, fp
06d54     46 CC 05 F1 | 	add	arg01, #70
06d58     0C 5E 05 F1 | 	add	fp, #12
06d5c     AF CE 01 FB | 	rdlong	arg02, fp
06d60     54 5E 85 F1 | 	sub	fp, #84
06d64     C0 B3 BF FD | 	call	#_ff_cc_st_dword_0180
06d68     48 5E 05 F1 | 	add	fp, #72
06d6c     AF CC 01 FB | 	rdlong	arg01, fp
06d70     E6 CE 01 F6 | 	mov	arg02, arg01
06d74     30 CE 05 F1 | 	add	arg02, #48
06d78     04 5E 05 F1 | 	add	fp, #4
06d7c     AF D0 01 FB | 	rdlong	arg03, fp
06d80     4C 5E 85 F1 | 	sub	fp, #76
06d84     08 C5 BF FD | 	call	#_ff_cc_st_clust_0238
06d88     48 5E 05 F1 | 	add	fp, #72
06d8c     AF CC 01 FB | 	rdlong	arg01, fp
06d90     50 CC 05 F1 | 	add	arg01, #80
06d94     AF CE 01 FB | 	rdlong	arg02, fp
06d98     48 5E 85 F1 | 	sub	fp, #72
06d9c     30 CE 05 F1 | 	add	arg02, #48
06da0     20 D0 05 F6 | 	mov	arg03, #32
06da4     AC B3 BF FD | 	call	#_ff_cc_mem_cpy_0183
06da8     48 5E 05 F1 | 	add	fp, #72
06dac     AF D8 01 FB | 	rdlong	local02, fp
06db0     51 D8 05 F1 | 	add	local02, #81
06db4     EC 5C 48 FC | 	wrbyte	#46, local02
06db8     34 5E 85 F1 | 	sub	fp, #52
06dbc     AF D8 01 FB | 	rdlong	local02, fp
06dc0     3C 5E 05 F1 | 	add	fp, #60
06dc4     AF D8 61 FC | 	wrlong	local02, fp
06dc8     08 5E 85 F1 | 	sub	fp, #8
06dcc     AF CC 01 FB | 	rdlong	arg01, fp
06dd0     E6 CE 01 F6 | 	mov	arg02, arg01
06dd4     50 CE 05 F1 | 	add	arg02, #80
06dd8     08 5E 05 F1 | 	add	fp, #8
06ddc     AF D0 01 FB | 	rdlong	arg03, fp
06de0     50 5E 85 F1 | 	sub	fp, #80
06de4     A8 C4 BF FD | 	call	#_ff_cc_st_clust_0238
06de8     48 5E 05 F1 | 	add	fp, #72
06dec     AF D8 01 FB | 	rdlong	local02, fp
06df0     03 D8 05 F1 | 	add	local02, #3
06df4     EC 02 48 FC | 	wrbyte	#1, local02
06df8     3C 5E 85 F1 | 	sub	fp, #60
06dfc     AF CC 01 F6 | 	mov	arg01, fp
06e00     0C 5E 85 F1 | 	sub	fp, #12
06e04     E4 C6 BF FD | 	call	#_ff_cc_dir_register_0250
06e08     08 5E 05 F1 | 	add	fp, #8
06e0c     AF B2 61 FC | 	wrlong	result1, fp
06e10     08 5E 85 F1 | 	sub	fp, #8
06e14                 | LR__0445
06e14                 | LR__0446
06e14     08 5E 05 F1 | 	add	fp, #8
06e18     AF D8 09 FB | 	rdlong	local02, fp wz
06e1c     08 5E 85 F1 | 	sub	fp, #8
06e20     8C 00 90 5D |  if_ne	jmp	#LR__0447
06e24     28 5E 05 F1 | 	add	fp, #40
06e28     AF CC 01 FB | 	rdlong	arg01, fp
06e2c     16 CC 05 F1 | 	add	arg01, #22
06e30     2C 5E 05 F1 | 	add	fp, #44
06e34     AF CE 01 FB | 	rdlong	arg02, fp
06e38     54 5E 85 F1 | 	sub	fp, #84
06e3c     E8 B2 BF FD | 	call	#_ff_cc_st_dword_0180
06e40     48 5E 05 F1 | 	add	fp, #72
06e44     AF CC 01 FB | 	rdlong	arg01, fp
06e48     20 5E 85 F1 | 	sub	fp, #32
06e4c     AF CE 01 FB | 	rdlong	arg02, fp
06e50     24 5E 05 F1 | 	add	fp, #36
06e54     AF D0 01 FB | 	rdlong	arg03, fp
06e58     4C 5E 85 F1 | 	sub	fp, #76
06e5c     30 C4 BF FD | 	call	#_ff_cc_st_clust_0238
06e60     28 5E 05 F1 | 	add	fp, #40
06e64     AF D8 01 FB | 	rdlong	local02, fp
06e68     0B D8 05 F1 | 	add	local02, #11
06e6c     EC 20 48 FC | 	wrbyte	#16, local02
06e70     20 5E 05 F1 | 	add	fp, #32
06e74     AF D8 01 FB | 	rdlong	local02, fp
06e78     03 D8 05 F1 | 	add	local02, #3
06e7c     EC 02 48 FC | 	wrbyte	#1, local02
06e80     40 5E 85 F1 | 	sub	fp, #64
06e84     AF D8 09 FB | 	rdlong	local02, fp wz
06e88     08 5E 85 F1 | 	sub	fp, #8
06e8c     3C 00 90 5D |  if_ne	jmp	#LR__0448
06e90     48 5E 05 F1 | 	add	fp, #72
06e94     AF CC 01 FB | 	rdlong	arg01, fp
06e98     48 5E 85 F1 | 	sub	fp, #72
06e9c     98 B4 BF FD | 	call	#_ff_cc_sync_fs_0198
06ea0     08 5E 05 F1 | 	add	fp, #8
06ea4     AF B2 61 FC | 	wrlong	result1, fp
06ea8     08 5E 85 F1 | 	sub	fp, #8
06eac     1C 00 90 FD | 	jmp	#LR__0448
06eb0                 | LR__0447
06eb0     38 5E 05 F1 | 	add	fp, #56
06eb4     AF CC 01 F6 | 	mov	arg01, fp
06eb8     14 5E 05 F1 | 	add	fp, #20
06ebc     AF CE 01 FB | 	rdlong	arg02, fp
06ec0     4C 5E 85 F1 | 	sub	fp, #76
06ec4     00 D0 05 F6 | 	mov	arg03, #0
06ec8     F0 BA BF FD | 	call	#_ff_cc_remove_chain_0212
06ecc                 | LR__0448
06ecc                 | LR__0449
06ecc                 | LR__0450
06ecc                 | ' 				remove_chain(&sobj, dcl, 0);
06ecc                 | ' 			}
06ecc                 | ' 		}
06ecc                 | ' 		;
06ecc                 | ' 	}
06ecc                 | ' 
06ecc                 | ' 	return res ;
06ecc     08 5E 05 F1 | 	add	fp, #8
06ed0     AF B2 01 FB | 	rdlong	result1, fp
06ed4     08 5E 85 F1 | 	sub	fp, #8
06ed8     AF F0 03 F6 | 	mov	ptra, fp
06edc     BA 00 A0 FD | 	call	#popregs_
06ee0                 | _ff_cc_f_mkdir_ret
06ee0     2D 00 64 FD | 	ret
06ee4                 | 
06ee4                 | _ff_cc_f_rename
06ee4     09 5A 05 F6 | 	mov	COUNT_, #9
06ee8     B0 00 A0 FD | 	call	#pushregs_
06eec     94 F0 07 F1 | 	add	ptra, #148
06ef0     04 5E 05 F1 | 	add	fp, #4
06ef4     AF CC 61 FC | 	wrlong	arg01, fp
06ef8     04 5E 05 F1 | 	add	fp, #4
06efc     AF CE 61 FC | 	wrlong	arg02, fp
06f00     AF CC 01 F6 | 	mov	arg01, fp
06f04     08 5E 85 F1 | 	sub	fp, #8
06f08     80 CC BF FD | 	call	#_ff_cc_get_ldnumber_0275
06f0c     04 5E 05 F1 | 	add	fp, #4
06f10     AF CC 01 F6 | 	mov	arg01, fp
06f14     64 5E 05 F1 | 	add	fp, #100
06f18     AF CE 01 F6 | 	mov	arg02, fp
06f1c     68 5E 85 F1 | 	sub	fp, #104
06f20     02 D0 05 F6 | 	mov	arg03, #2
06f24     7C CF BF FD | 	call	#_ff_cc_mount_volume_0292
06f28     D9 D6 01 F6 | 	mov	local01, result1
06f2c     0C 5E 05 F1 | 	add	fp, #12
06f30     AF D6 61 FC | 	wrlong	local01, fp
06f34     AF D8 09 FB | 	rdlong	local02, fp wz
06f38     0C 5E 85 F1 | 	sub	fp, #12
06f3c     B8 03 90 5D |  if_ne	jmp	#LR__0465
06f40     68 5E 05 F1 | 	add	fp, #104
06f44     AF D8 01 FB | 	rdlong	local02, fp
06f48     58 5E 85 F1 | 	sub	fp, #88
06f4c     AF D8 61 FC | 	wrlong	local02, fp
06f50     AF CC 01 F6 | 	mov	arg01, fp
06f54     0C 5E 85 F1 | 	sub	fp, #12
06f58     AF CE 01 FB | 	rdlong	arg02, fp
06f5c     04 5E 85 F1 | 	sub	fp, #4
06f60     04 CA BF FD | 	call	#_ff_cc_follow_path_0269
06f64     D9 DA 01 F6 | 	mov	local03, result1
06f68     0C 5E 05 F1 | 	add	fp, #12
06f6c     AF DA 61 FC | 	wrlong	local03, fp
06f70     AF DC 09 FB | 	rdlong	local04, fp wz
06f74     0C 5E 85 F1 | 	sub	fp, #12
06f78     2C 00 90 5D |  if_ne	jmp	#LR__0451
06f7c     3B 5E 05 F1 | 	add	fp, #59
06f80     AF DE C1 FA | 	rdbyte	local05, fp
06f84     3B 5E 85 F1 | 	sub	fp, #59
06f88     EF E0 01 F6 | 	mov	local06, local05
06f8c     07 E0 45 F7 | 	zerox	local06, #7
06f90     A0 E0 0D F5 | 	and	local06, #160 wz
06f94     10 00 90 AD |  if_e	jmp	#LR__0451
06f98     06 D8 05 F6 | 	mov	local02, #6
06f9c     0C 5E 05 F1 | 	add	fp, #12
06fa0     AF 0C 68 FC | 	wrlong	#6, fp
06fa4     0C 5E 85 F1 | 	sub	fp, #12
06fa8                 | LR__0451
06fa8     0C 5E 05 F1 | 	add	fp, #12
06fac     AF D8 09 FB | 	rdlong	local02, fp wz
06fb0     0C 5E 85 F1 | 	sub	fp, #12
06fb4     40 03 90 5D |  if_ne	jmp	#LR__0464
06fb8     6C 5E 05 F1 | 	add	fp, #108
06fbc     AF CC 01 F6 | 	mov	arg01, fp
06fc0     40 5E 85 F1 | 	sub	fp, #64
06fc4     AF CE 01 FB | 	rdlong	arg02, fp
06fc8     2C 5E 85 F1 | 	sub	fp, #44
06fcc     20 D0 05 F6 | 	mov	arg03, #32
06fd0     80 B1 BF FD | 	call	#_ff_cc_mem_cpy_0183
06fd4     3C 5E 05 F1 | 	add	fp, #60
06fd8     AF CC 01 F6 | 	mov	arg01, fp
06fdc     2C 5E 85 F1 | 	sub	fp, #44
06fe0     AF CE 01 F6 | 	mov	arg02, fp
06fe4     10 5E 85 F1 | 	sub	fp, #16
06fe8     2C D0 05 F6 | 	mov	arg03, #44
06fec     64 B1 BF FD | 	call	#_ff_cc_mem_cpy_0183
06ff0     3C 5E 05 F1 | 	add	fp, #60
06ff4     AF CC 01 F6 | 	mov	arg01, fp
06ff8     34 5E 85 F1 | 	sub	fp, #52
06ffc     AF CE 01 FB | 	rdlong	arg02, fp
07000     08 5E 85 F1 | 	sub	fp, #8
07004     60 C9 BF FD | 	call	#_ff_cc_follow_path_0269
07008     0C 5E 05 F1 | 	add	fp, #12
0700c     AF B2 61 FC | 	wrlong	result1, fp
07010     AF D8 09 FB | 	rdlong	local02, fp wz
07014     0C 5E 85 F1 | 	sub	fp, #12
07018     4C 00 90 5D |  if_ne	jmp	#LR__0454
0701c     44 5E 05 F1 | 	add	fp, #68
07020     AF DC 01 FB | 	rdlong	local04, fp
07024     2C 5E 85 F1 | 	sub	fp, #44
07028     AF DE 01 FB | 	rdlong	local05, fp
0702c     18 5E 85 F1 | 	sub	fp, #24
07030     EF DC 09 F2 | 	cmp	local04, local05 wz
07034     20 00 90 5D |  if_ne	jmp	#LR__0452
07038     4C 5E 05 F1 | 	add	fp, #76
0703c     AF D6 01 FB | 	rdlong	local01, fp
07040     2C 5E 85 F1 | 	sub	fp, #44
07044     AF E2 01 FB | 	rdlong	local07, fp
07048     20 5E 85 F1 | 	sub	fp, #32
0704c     F1 D6 09 F2 | 	cmp	local01, local07 wz
07050     04 D8 05 A6 |  if_e	mov	local02, #4
07054     04 00 90 AD |  if_e	jmp	#LR__0453
07058                 | LR__0452
07058     08 D8 05 F6 | 	mov	local02, #8
0705c                 | LR__0453
0705c     0C 5E 05 F1 | 	add	fp, #12
07060     AF D8 61 FC | 	wrlong	local02, fp
07064     0C 5E 85 F1 | 	sub	fp, #12
07068                 | LR__0454
07068     0C 5E 05 F1 | 	add	fp, #12
0706c     AF D8 01 FB | 	rdlong	local02, fp
07070     0C 5E 85 F1 | 	sub	fp, #12
07074     04 D8 0D F2 | 	cmp	local02, #4 wz
07078     28 02 90 5D |  if_ne	jmp	#LR__0461
0707c     3C 5E 05 F1 | 	add	fp, #60
07080     AF CC 01 F6 | 	mov	arg01, fp
07084     3C 5E 85 F1 | 	sub	fp, #60
07088     60 C4 BF FD | 	call	#_ff_cc_dir_register_0250
0708c     0C 5E 05 F1 | 	add	fp, #12
07090     AF B2 61 FC | 	wrlong	result1, fp
07094     AF D8 09 FB | 	rdlong	local02, fp wz
07098     0C 5E 85 F1 | 	sub	fp, #12
0709c     04 02 90 5D |  if_ne	jmp	#LR__0460
070a0     58 5E 05 F1 | 	add	fp, #88
070a4     AF CC 01 FB | 	rdlong	arg01, fp
070a8     34 5E 05 F1 | 	add	fp, #52
070ac     AF CC 61 FC | 	wrlong	arg01, fp
070b0     0D CC 05 F1 | 	add	arg01, #13
070b4     20 5E 85 F1 | 	sub	fp, #32
070b8     AF CE 01 F6 | 	mov	arg02, fp
070bc     6C 5E 85 F1 | 	sub	fp, #108
070c0     0D CE 05 F1 | 	add	arg02, #13
070c4     13 D0 05 F6 | 	mov	arg03, #19
070c8     88 B0 BF FD | 	call	#_ff_cc_mem_cpy_0183
070cc     8C 5E 05 F1 | 	add	fp, #140
070d0     AF D8 01 FB | 	rdlong	local02, fp
070d4     15 5E 85 F1 | 	sub	fp, #21
070d8     AF E0 C1 FA | 	rdbyte	local06, fp
070dc     0B D8 05 F1 | 	add	local02, #11
070e0     EC E0 41 FC | 	wrbyte	local06, local02
070e4     15 5E 05 F1 | 	add	fp, #21
070e8     AF DC 01 FB | 	rdlong	local04, fp
070ec     8C 5E 85 F1 | 	sub	fp, #140
070f0     0B DC 05 F1 | 	add	local04, #11
070f4     EE D8 C1 FA | 	rdbyte	local02, local04
070f8     10 D8 CD F7 | 	test	local02, #16 wz
070fc     24 00 90 5D |  if_ne	jmp	#LR__0455
07100     8C 5E 05 F1 | 	add	fp, #140
07104     AF D8 01 FB | 	rdlong	local02, fp
07108     EC DE 01 F6 | 	mov	local05, local02
0710c     8C 5E 85 F1 | 	sub	fp, #140
07110     0B DE 05 F1 | 	add	local05, #11
07114     EF E0 C1 FA | 	rdbyte	local06, local05
07118     20 E0 45 F5 | 	or	local06, #32
0711c     0B D8 05 F1 | 	add	local02, #11
07120     EC E0 41 FC | 	wrbyte	local06, local02
07124                 | LR__0455
07124     68 5E 05 F1 | 	add	fp, #104
07128     AF D8 01 FB | 	rdlong	local02, fp
0712c     03 D8 05 F1 | 	add	local02, #3
07130     EC 02 48 FC | 	wrbyte	#1, local02
07134     24 5E 05 F1 | 	add	fp, #36
07138     AF DC 01 FB | 	rdlong	local04, fp
0713c     8C 5E 85 F1 | 	sub	fp, #140
07140     0B DC 05 F1 | 	add	local04, #11
07144     EE D8 C1 FA | 	rdbyte	local02, local04
07148     10 D8 CD F7 | 	test	local02, #16 wz
0714c     54 01 90 AD |  if_e	jmp	#LR__0459
07150     18 5E 05 F1 | 	add	fp, #24
07154     AF DA 01 FB | 	rdlong	local03, fp
07158     2C 5E 05 F1 | 	add	fp, #44
0715c     AF E4 01 FB | 	rdlong	local08, fp
07160     44 5E 85 F1 | 	sub	fp, #68
07164     F2 DA 09 F2 | 	cmp	local03, local08 wz
07168     38 01 90 AD |  if_e	jmp	#LR__0459
0716c     68 5E 05 F1 | 	add	fp, #104
07170     AF D8 01 FB | 	rdlong	local02, fp
07174     EC DE 01 F6 | 	mov	local05, local02
07178     EF E0 01 F6 | 	mov	local06, local05
0717c     24 5E 05 F1 | 	add	fp, #36
07180     AF D6 01 FB | 	rdlong	local01, fp
07184     8C 5E 85 F1 | 	sub	fp, #140
07188     EB DA 01 F6 | 	mov	local03, local01
0718c     F0 CC 01 F6 | 	mov	arg01, local06
07190     ED CE 01 F6 | 	mov	arg02, local03
07194     A0 C0 BF FD | 	call	#_ff_cc_ld_clust_0237
07198     D9 E4 01 F6 | 	mov	local08, result1
0719c     EC CC 01 F6 | 	mov	arg01, local02
071a0     F2 CE 01 F6 | 	mov	arg02, local08
071a4     0C B3 BF FD | 	call	#_ff_cc_clst2sect_0199
071a8     D9 E6 01 F6 | 	mov	local09, result1
071ac     90 5E 05 F1 | 	add	fp, #144
071b0     AF E6 61 FC | 	wrlong	local09, fp
071b4     AF DC 09 FB | 	rdlong	local04, fp wz
071b8     90 5E 85 F1 | 	sub	fp, #144
071bc     14 00 90 5D |  if_ne	jmp	#LR__0456
071c0     02 D8 05 F6 | 	mov	local02, #2
071c4     0C 5E 05 F1 | 	add	fp, #12
071c8     AF 04 68 FC | 	wrlong	#2, fp
071cc     0C 5E 85 F1 | 	sub	fp, #12
071d0     D0 00 90 FD | 	jmp	#LR__0458
071d4                 | LR__0456
071d4     68 5E 05 F1 | 	add	fp, #104
071d8     AF CC 01 FB | 	rdlong	arg01, fp
071dc     28 5E 05 F1 | 	add	fp, #40
071e0     AF CE 01 FB | 	rdlong	arg02, fp
071e4     90 5E 85 F1 | 	sub	fp, #144
071e8     D0 B0 BF FD | 	call	#_ff_cc_move_window_0196
071ec     D9 DA 01 F6 | 	mov	local03, result1
071f0     0C 5E 05 F1 | 	add	fp, #12
071f4     AF DA 61 FC | 	wrlong	local03, fp
071f8     5C 5E 05 F1 | 	add	fp, #92
071fc     AF E0 01 FB | 	rdlong	local06, fp
07200     F0 DE 01 F6 | 	mov	local05, local06
07204     30 DE 05 F1 | 	add	local05, #48
07208     EF D8 01 F6 | 	mov	local02, local05
0720c     20 D8 05 F1 | 	add	local02, #32
07210     24 5E 05 F1 | 	add	fp, #36
07214     AF D8 61 FC | 	wrlong	local02, fp
07218     80 5E 85 F1 | 	sub	fp, #128
0721c     AF DC 01 FB | 	rdlong	local04, fp
07220     0C 5E 85 F1 | 	sub	fp, #12
07224     EE D8 09 F6 | 	mov	local02, local04 wz
07228     78 00 90 5D |  if_ne	jmp	#LR__0457
0722c     8C 5E 05 F1 | 	add	fp, #140
07230     AF DA 01 FB | 	rdlong	local03, fp
07234     8C 5E 85 F1 | 	sub	fp, #140
07238     ED DE 01 F6 | 	mov	local05, local03
0723c     01 DE 05 F1 | 	add	local05, #1
07240     EF D6 C1 FA | 	rdbyte	local01, local05
07244     01 DE 85 F1 | 	sub	local05, #1
07248     EB E0 01 F6 | 	mov	local06, local01
0724c     07 E0 45 F7 | 	zerox	local06, #7
07250     2E E0 0D F2 | 	cmp	local06, #46 wz
07254     4C 00 90 5D |  if_ne	jmp	#LR__0457
07258     68 5E 05 F1 | 	add	fp, #104
0725c     AF CC 01 FB | 	rdlong	arg01, fp
07260     24 5E 05 F1 | 	add	fp, #36
07264     AF DE 01 FB | 	rdlong	local05, fp
07268     48 5E 85 F1 | 	sub	fp, #72
0726c     AF D6 01 FB | 	rdlong	local01, fp
07270     44 5E 85 F1 | 	sub	fp, #68
07274     EB DA 01 F6 | 	mov	local03, local01
07278     EF CE 01 F6 | 	mov	arg02, local05
0727c     ED D0 01 F6 | 	mov	arg03, local03
07280     0C C0 BF FD | 	call	#_ff_cc_st_clust_0238
07284     68 5E 05 F1 | 	add	fp, #104
07288     AF DC 01 FB | 	rdlong	local04, fp
0728c     68 5E 85 F1 | 	sub	fp, #104
07290     EE D8 01 F6 | 	mov	local02, local04
07294     01 E0 05 F6 | 	mov	local06, #1
07298     03 D8 05 F1 | 	add	local02, #3
0729c     EC 02 48 FC | 	wrbyte	#1, local02
072a0     03 D8 85 F1 | 	sub	local02, #3
072a4                 | LR__0457
072a4                 | LR__0458
072a4                 | LR__0459
072a4                 | LR__0460
072a4                 | LR__0461
072a4     0C 5E 05 F1 | 	add	fp, #12
072a8     AF D8 09 FB | 	rdlong	local02, fp wz
072ac     0C 5E 85 F1 | 	sub	fp, #12
072b0     44 00 90 5D |  if_ne	jmp	#LR__0463
072b4     10 5E 05 F1 | 	add	fp, #16
072b8     AF CC 01 F6 | 	mov	arg01, fp
072bc     10 5E 85 F1 | 	sub	fp, #16
072c0     BC C2 BF FD | 	call	#_ff_cc_dir_remove_0253
072c4     D9 E0 01 F6 | 	mov	local06, result1
072c8     0C 5E 05 F1 | 	add	fp, #12
072cc     AF E0 61 FC | 	wrlong	local06, fp
072d0     AF D8 09 FB | 	rdlong	local02, fp wz
072d4     0C 5E 85 F1 | 	sub	fp, #12
072d8     1C 00 90 5D |  if_ne	jmp	#LR__0462
072dc     68 5E 05 F1 | 	add	fp, #104
072e0     AF CC 01 FB | 	rdlong	arg01, fp
072e4     68 5E 85 F1 | 	sub	fp, #104
072e8     4C B0 BF FD | 	call	#_ff_cc_sync_fs_0198
072ec     0C 5E 05 F1 | 	add	fp, #12
072f0     AF B2 61 FC | 	wrlong	result1, fp
072f4     0C 5E 85 F1 | 	sub	fp, #12
072f8                 | LR__0462
072f8                 | LR__0463
072f8                 | LR__0464
072f8                 | LR__0465
072f8                 | ' 					res = sync_fs(fs);
072f8                 | ' 				}
072f8                 | ' 			}
072f8                 | ' 
072f8                 | ' 		}
072f8                 | ' 		;
072f8                 | ' 	}
072f8                 | ' 
072f8                 | ' 	return res ;
072f8     0C 5E 05 F1 | 	add	fp, #12
072fc     AF B2 01 FB | 	rdlong	result1, fp
07300     0C 5E 85 F1 | 	sub	fp, #12
07304     AF F0 03 F6 | 	mov	ptra, fp
07308     BA 00 A0 FD | 	call	#popregs_
0730c                 | _ff_cc_f_rename_ret
0730c     2D 00 64 FD | 	ret
07310                 | 
07310                 | _ff_cc_stat
07310     09 5A 05 F6 | 	mov	COUNT_, #9
07314     B0 00 A0 FD | 	call	#pushregs_
07318     E6 D6 01 F6 | 	mov	local01, arg01
0731c     E7 D8 01 F6 | 	mov	local02, arg02
07320     40 AB 05 F1 | 	add	ptr___system__dat__, #320
07324     D5 B2 01 F6 | 	mov	result1, ptr___system__dat__
07328     40 AB 85 F1 | 	sub	ptr___system__dat__, #320
0732c     D9 DA 01 F6 | 	mov	local03, result1
07330     ED CC 01 F6 | 	mov	arg01, local03
07334     EB CE 01 F6 | 	mov	arg02, local01
07338     00 D0 05 F6 | 	mov	arg03, #0
0733c     94 16 B0 FD | 	call	#__system____getvfsforfile
07340     D9 DC 09 F6 | 	mov	local04, result1 wz
07344     14 00 90 AD |  if_e	jmp	#LR__0466
07348     2C DC 05 F1 | 	add	local04, #44
0734c     EE DE 01 FB | 	rdlong	local05, local04
07350     2C DC 85 F1 | 	sub	local04, #44
07354     EF E0 09 F6 | 	mov	local06, local05 wz
07358     14 00 90 5D |  if_ne	jmp	#LR__0467
0735c                 | LR__0466
0735c                 | ' #line 19 "/home/pik33/flexprop/include/libc/unix/stat.c"
0735c                 | '         return _seterror( 16 );
0735c     1C AA 05 F1 | 	add	ptr___system__dat__, #28
07360     D5 20 68 FC | 	wrlong	#16, ptr___system__dat__
07364     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
07368     01 B2 65 F6 | 	neg	result1, #1
0736c     44 00 90 FD | 	jmp	#LR__0468
07370                 | LR__0467
07370     EC CC 01 F6 | 	mov	arg01, local02
07374     00 CE 05 F6 | 	mov	arg02, #0
07378     30 D0 05 F6 | 	mov	arg03, #48
0737c     E6 E2 01 F6 | 	mov	local07, arg01
07380     A0 00 A0 FD | 	call	#\builtin_bytefill_
07384     F1 B2 01 F6 | 	mov	result1, local07
07388     2C DC 05 F1 | 	add	local04, #44
0738c     EE E0 01 FB | 	rdlong	local06, local04
07390     F0 DE 01 FB | 	rdlong	local05, local06
07394     04 E0 05 F1 | 	add	local06, #4
07398     F0 E4 01 FB | 	rdlong	local08, local06
0739c     ED CC 01 F6 | 	mov	arg01, local03
073a0     EC CE 01 F6 | 	mov	arg02, local02
073a4     D3 E6 01 F6 | 	mov	local09, objptr
073a8     EF A6 01 F6 | 	mov	objptr, local05
073ac     2D E4 61 FD | 	call	local08
073b0     F3 A6 01 F6 | 	mov	objptr, local09
073b4                 | ' #line 29 "/home/pik33/flexprop/include/libc/unix/stat.c"
073b4                 | '     r = v->stat(name, buf);
073b4                 | ' #line 33 "/home/pik33/flexprop/include/libc/unix/stat.c"
073b4                 | '     return r;
073b4                 | LR__0468
073b4     AF F0 03 F6 | 	mov	ptra, fp
073b8     BA 00 A0 FD | 	call	#popregs_
073bc                 | _ff_cc_stat_ret
073bc     2D 00 64 FD | 	ret
073c0                 | 
073c0                 | _ff_cc__set_dos_error_0418
073c0     03 5A 05 F6 | 	mov	COUNT_, #3
073c4     B0 00 A0 FD | 	call	#pushregs_
073c8     E6 D6 01 F6 | 	mov	local01, arg01
073cc                 | ' #line 6871 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
073cc                 | '     switch (derr) {
073cc     EB D8 01 F6 | 	mov	local02, local01
073d0     14 D8 25 F3 | 	fle	local02, #20
073d4     30 D8 61 FD | 	jmprel	local02
073d8                 | LR__0469
073d8     50 00 90 FD | 	jmp	#LR__0470
073dc     84 00 90 FD | 	jmp	#LR__0484
073e0     80 00 90 FD | 	jmp	#LR__0485
073e4     7C 00 90 FD | 	jmp	#LR__0486
073e8     48 00 90 FD | 	jmp	#LR__0471
073ec     44 00 90 FD | 	jmp	#LR__0472
073f0     40 00 90 FD | 	jmp	#LR__0473
073f4     44 00 90 FD | 	jmp	#LR__0474
073f8     48 00 90 FD | 	jmp	#LR__0476
073fc     54 00 90 FD | 	jmp	#LR__0479
07400     38 00 90 FD | 	jmp	#LR__0475
07404     4C 00 90 FD | 	jmp	#LR__0480
07408     48 00 90 FD | 	jmp	#LR__0481
0740c     44 00 90 FD | 	jmp	#LR__0482
07410     50 00 90 FD | 	jmp	#LR__0487
07414     4C 00 90 FD | 	jmp	#LR__0487
07418     48 00 90 FD | 	jmp	#LR__0487
0741c     2C 00 90 FD | 	jmp	#LR__0477
07420     38 00 90 FD | 	jmp	#LR__0483
07424     2C 00 90 FD | 	jmp	#LR__0478
07428     38 00 90 FD | 	jmp	#LR__0487
0742c                 | LR__0470
0742c     00 DA 05 F6 | 	mov	local03, #0
07430                 | '         r = 0;
07430                 | '         break;
07430     34 00 90 FD | 	jmp	#LR__0488
07434                 | LR__0471
07434                 | LR__0472
07434                 | LR__0473
07434     04 DA 05 F6 | 	mov	local03, #4
07438                 | '         r =  4 ;
07438                 | '         break;
07438     2C 00 90 FD | 	jmp	#LR__0488
0743c                 | LR__0474
0743c                 | LR__0475
0743c     06 DA 05 F6 | 	mov	local03, #6
07440                 | '         r =  6 ;
07440                 | '         break;
07440     24 00 90 FD | 	jmp	#LR__0488
07444                 | LR__0476
07444     09 DA 05 F6 | 	mov	local03, #9
07448                 | '         r =  9 ;
07448                 | '         break;
07448     1C 00 90 FD | 	jmp	#LR__0488
0744c                 | LR__0477
0744c     07 DA 05 F6 | 	mov	local03, #7
07450                 | '         r =  7 ;
07450                 | '         break;
07450     14 00 90 FD | 	jmp	#LR__0488
07454                 | LR__0478
07454                 | LR__0479
07454                 | LR__0480
07454                 | LR__0481
07454                 | LR__0482
07454     0A DA 05 F6 | 	mov	local03, #10
07458                 | '         r =  10 ;
07458                 | '         break;
07458     0C 00 90 FD | 	jmp	#LR__0488
0745c                 | LR__0483
0745c     0B DA 05 F6 | 	mov	local03, #11
07460                 | '         r =  11 ;
07460                 | '         break;
07460     04 00 90 FD | 	jmp	#LR__0488
07464                 | LR__0484
07464                 | LR__0485
07464                 | LR__0486
07464                 | LR__0487
07464     0C DA 05 F6 | 	mov	local03, #12
07468                 | '         r =  12 ;
07468                 | '         break;
07468                 | LR__0488
07468                 | '     }
07468                 | '     return _seterror(r);
07468     1C AA 05 F1 | 	add	ptr___system__dat__, #28
0746c     D5 DA 61 FC | 	wrlong	local03, ptr___system__dat__
07470     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
07474     00 DA 0D F2 | 	cmp	local03, #0 wz
07478     01 B2 65 56 |  if_ne	neg	result1, #1
0747c     00 B2 05 A6 |  if_e	mov	result1, #0
07480     AF F0 03 F6 | 	mov	ptra, fp
07484     BA 00 A0 FD | 	call	#popregs_
07488                 | _ff_cc__set_dos_error_0418_ret
07488     2D 00 64 FD | 	ret
0748c                 | 
0748c                 | _ff_cc_v_creat_0422
0748c     04 5A 05 F6 | 	mov	COUNT_, #4
07490     B0 00 A0 FD | 	call	#pushregs_
07494     E6 D6 01 F6 | 	mov	local01, arg01
07498     E7 D8 01 F6 | 	mov	local02, arg02
0749c     02 00 00 FF 
074a0     34 CC 05 F6 | 	mov	arg01, ##1076
074a4                 | '     return _gc_alloc(size);
074a4     10 CE 05 F6 | 	mov	arg02, #16
074a8     10 1C B0 FD | 	call	#__system___gc_doalloc
074ac     D9 DA 09 F6 | 	mov	local03, result1 wz
074b0     14 00 90 5D |  if_ne	jmp	#LR__0489
074b4                 | '       return _seterror( 7 );
074b4     1C AA 05 F1 | 	add	ptr___system__dat__, #28
074b8     D5 0E 68 FC | 	wrlong	#7, ptr___system__dat__
074bc     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
074c0     01 B2 65 F6 | 	neg	result1, #1
074c4     58 00 90 FD | 	jmp	#LR__0491
074c8                 | LR__0489
074c8     ED CC 01 F6 | 	mov	arg01, local03
074cc     00 CE 05 F6 | 	mov	arg02, #0
074d0     02 00 00 FF 
074d4     34 D0 05 F6 | 	mov	arg03, ##1076
074d8     90 10 B0 FD | 	call	#_ff_cc_memset
074dc     02 00 00 FF 
074e0     0C DA 05 F1 | 	add	local03, ##1036
074e4     ED CC 01 F6 | 	mov	arg01, local03
074e8     02 00 00 FF 
074ec     0C DA 85 F1 | 	sub	local03, ##1036
074f0     EC CE 01 F6 | 	mov	arg02, local02
074f4     07 D0 05 F6 | 	mov	arg03, #7
074f8     BC D1 BF FD | 	call	#_ff_cc_f_open
074fc     D9 DC 09 F6 | 	mov	local04, result1 wz
07500     14 00 90 AD |  if_e	jmp	#LR__0490
07504     ED CC 01 F6 | 	mov	arg01, local03
07508                 | '     return _gc_free(ptr);
07508     E8 1C B0 FD | 	call	#__system___gc_free
0750c                 | '     free(f);
0750c                 | '     return _set_dos_error(r);
0750c     EE CC 01 F6 | 	mov	arg01, local04
07510     AC FE BF FD | 	call	#_ff_cc__set_dos_error_0418
07514     08 00 90 FD | 	jmp	#LR__0491
07518                 | LR__0490
07518     EB DA 61 FC | 	wrlong	local03, local01
0751c                 | '   }
0751c                 | '   fil->vfsdata = f;
0751c                 | '   return 0;
0751c     00 B2 05 F6 | 	mov	result1, #0
07520                 | LR__0491
07520     AF F0 03 F6 | 	mov	ptra, fp
07524     BA 00 A0 FD | 	call	#popregs_
07528                 | _ff_cc_v_creat_0422_ret
07528     2D 00 64 FD | 	ret
0752c                 | 
0752c                 | _ff_cc_v_close_0425
0752c     02 5A 05 F6 | 	mov	COUNT_, #2
07530     B0 00 A0 FD | 	call	#pushregs_
07534     E6 D6 01 FB | 	rdlong	local01, arg01
07538     02 00 00 FF 
0753c     0C D6 05 F1 | 	add	local01, ##1036
07540     EB CC 01 F6 | 	mov	arg01, local01
07544     02 00 00 FF 
07548     0C D6 85 F1 | 	sub	local01, ##1036
0754c     CC E8 BF FD | 	call	#_ff_cc_f_close
07550     D9 D8 01 F6 | 	mov	local02, result1
07554     EB CC 01 F6 | 	mov	arg01, local01
07558                 | '     return _gc_free(ptr);
07558     98 1C B0 FD | 	call	#__system___gc_free
0755c                 | '     FAT_FIL *f = fil->vfsdata;
0755c                 | '     r=f_close(&f->fil);
0755c                 | '     free(f);
0755c                 | '     return _set_dos_error(r);
0755c     EC CC 01 F6 | 	mov	arg01, local02
07560     5C FE BF FD | 	call	#_ff_cc__set_dos_error_0418
07564     AF F0 03 F6 | 	mov	ptra, fp
07568     BA 00 A0 FD | 	call	#popregs_
0756c                 | _ff_cc_v_close_0425_ret
0756c     2D 00 64 FD | 	ret
07570                 | 
07570                 | _ff_cc_v_opendir_0428
07570     04 5A 05 F6 | 	mov	COUNT_, #4
07574     B0 00 A0 FD | 	call	#pushregs_
07578     E6 D6 01 F6 | 	mov	local01, arg01
0757c     E7 D8 01 F6 | 	mov	local02, arg02
07580     2C CC 05 F6 | 	mov	arg01, #44
07584                 | '     return _gc_alloc(size);
07584     10 CE 05 F6 | 	mov	arg02, #16
07588     30 1B B0 FD | 	call	#__system___gc_doalloc
0758c     D9 DA 09 F6 | 	mov	local03, result1 wz
07590     14 00 90 5D |  if_ne	jmp	#LR__0492
07594                 | ' #line 6955 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
07594                 | '       return _seterror( 7 );
07594     1C AA 05 F1 | 	add	ptr___system__dat__, #28
07598     D5 0E 68 FC | 	wrlong	#7, ptr___system__dat__
0759c     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
075a0     01 B2 65 F6 | 	neg	result1, #1
075a4     34 00 90 FD | 	jmp	#LR__0494
075a8                 | LR__0492
075a8     ED CC 01 F6 | 	mov	arg01, local03
075ac     EC CE 01 F6 | 	mov	arg02, local02
075b0     24 EF BF FD | 	call	#_ff_cc_f_opendir
075b4     D9 DC 09 F6 | 	mov	local04, result1 wz
075b8     14 00 90 AD |  if_e	jmp	#LR__0493
075bc     ED CC 01 F6 | 	mov	arg01, local03
075c0                 | '     return _gc_free(ptr);
075c0     30 1C B0 FD | 	call	#__system___gc_free
075c4                 | '         free(f);
075c4                 | '         return _set_dos_error(r);
075c4     EE CC 01 F6 | 	mov	arg01, local04
075c8     F4 FD BF FD | 	call	#_ff_cc__set_dos_error_0418
075cc     0C 00 90 FD | 	jmp	#LR__0494
075d0                 | LR__0493
075d0     04 D6 05 F1 | 	add	local01, #4
075d4     EB DA 61 FC | 	wrlong	local03, local01
075d8                 | '     }
075d8                 | '     dir->vfsdata = f;
075d8                 | '     return 0;
075d8     00 B2 05 F6 | 	mov	result1, #0
075dc                 | LR__0494
075dc     AF F0 03 F6 | 	mov	ptra, fp
075e0     BA 00 A0 FD | 	call	#popregs_
075e4                 | _ff_cc_v_opendir_0428_ret
075e4     2D 00 64 FD | 	ret
075e8                 | 
075e8                 | _ff_cc_v_closedir_0431
075e8     02 5A 05 F6 | 	mov	COUNT_, #2
075ec     B0 00 A0 FD | 	call	#pushregs_
075f0     04 CC 05 F1 | 	add	arg01, #4
075f4     E6 D6 01 FB | 	rdlong	local01, arg01
075f8     EB CC 01 F6 | 	mov	arg01, local01
075fc     98 F0 BF FD | 	call	#_ff_cc_f_closedir
07600     D9 D8 01 F6 | 	mov	local02, result1
07604     EB CC 01 F6 | 	mov	arg01, local01
07608                 | '     return _gc_free(ptr);
07608     E8 1B B0 FD | 	call	#__system___gc_free
0760c     00 D8 0D F2 | 	cmp	local02, #0 wz
07610     08 00 90 AD |  if_e	jmp	#LR__0495
07614     EC CC 01 F6 | 	mov	arg01, local02
07618     A4 FD BF FD | 	call	#_ff_cc__set_dos_error_0418
0761c                 | LR__0495
0761c                 | '     return r;
0761c     EC B2 01 F6 | 	mov	result1, local02
07620     AF F0 03 F6 | 	mov	ptra, fp
07624     BA 00 A0 FD | 	call	#popregs_
07628                 | _ff_cc_v_closedir_0431_ret
07628     2D 00 64 FD | 	ret
0762c                 | 
0762c                 | _ff_cc_v_readdir_0434
0762c     02 5A 05 F6 | 	mov	COUNT_, #2
07630     B0 00 A0 FD | 	call	#pushregs_
07634     2C F0 07 F1 | 	add	ptra, #44
07638     04 5E 05 F1 | 	add	fp, #4
0763c     AF CC 61 FC | 	wrlong	arg01, fp
07640     04 5E 05 F1 | 	add	fp, #4
07644     AF CE 61 FC | 	wrlong	arg02, fp
07648     04 5E 85 F1 | 	sub	fp, #4
0764c     AF D6 01 FB | 	rdlong	local01, fp
07650     04 D6 05 F1 | 	add	local01, #4
07654     EB CC 01 FB | 	rdlong	arg01, local01
07658     08 5E 05 F1 | 	add	fp, #8
0765c     AF CE 01 F6 | 	mov	arg02, fp
07660     0C 5E 85 F1 | 	sub	fp, #12
07664     94 F0 BF FD | 	call	#_ff_cc_f_readdir
07668     D9 D8 01 F6 | 	mov	local02, result1
0766c     28 5E 05 F1 | 	add	fp, #40
07670     AF D8 61 FC | 	wrlong	local02, fp
07674     AF D6 09 FB | 	rdlong	local01, fp wz
07678     28 5E 85 F1 | 	sub	fp, #40
0767c     14 00 90 AD |  if_e	jmp	#LR__0496
07680                 | '         return _set_dos_error(r);
07680     28 5E 05 F1 | 	add	fp, #40
07684     AF CC 01 FB | 	rdlong	arg01, fp
07688     28 5E 85 F1 | 	sub	fp, #40
0768c     30 FD BF FD | 	call	#_ff_cc__set_dos_error_0418
07690     34 00 90 FD | 	jmp	#LR__0497
07694                 | LR__0496
07694     18 5E 05 F1 | 	add	fp, #24
07698     AF D6 C1 FA | 	rdbyte	local01, fp
0769c     18 5E 85 F1 | 	sub	fp, #24
076a0     07 D6 4D F7 | 	zerox	local01, #7 wz
076a4                 | '         return -1;
076a4     01 B2 65 A6 |  if_e	neg	result1, #1
076a8     1C 00 90 AD |  if_e	jmp	#LR__0497
076ac     08 5E 05 F1 | 	add	fp, #8
076b0     AF CC 01 FB | 	rdlong	arg01, fp
076b4     10 5E 05 F1 | 	add	fp, #16
076b8     AF CE 01 F6 | 	mov	arg02, fp
076bc     18 5E 85 F1 | 	sub	fp, #24
076c0     74 0E B0 FD | 	call	#_ff_cc_strcpy
076c4                 | '     }
076c4                 | ' 
076c4                 | ' 
076c4                 | ' 
076c4                 | ' 
076c4                 | '     strcpy(ent->d_name, finfo.fname);
076c4                 | ' 
076c4                 | '     return 0;
076c4     00 B2 05 F6 | 	mov	result1, #0
076c8                 | LR__0497
076c8     AF F0 03 F6 | 	mov	ptra, fp
076cc     BA 00 A0 FD | 	call	#popregs_
076d0                 | _ff_cc_v_readdir_0434_ret
076d0     2D 00 64 FD | 	ret
076d4                 | 
076d4                 | _ff_cc_unixtime_0442
076d4     E7 B6 01 F6 | 	mov	_var01, arg02
076d8     0B B6 45 F0 | 	shr	_var01, #11
076dc     1F B6 05 F5 | 	and	_var01, #31
076e0     E7 B8 01 F6 | 	mov	_var02, arg02
076e4     05 B8 45 F0 | 	shr	_var02, #5
076e8     3F B8 05 F5 | 	and	_var02, #63
076ec     1F CE 05 F5 | 	and	arg02, #31
076f0     01 CE 65 F0 | 	shl	arg02, #1
076f4     DC BA 01 F6 | 	mov	_var03, _var02
076f8     04 BA 65 F0 | 	shl	_var03, #4
076fc     DC BA 81 F1 | 	sub	_var03, _var02
07700     02 BA 65 F0 | 	shl	_var03, #2
07704     DD CE 01 F1 | 	add	arg02, _var03
07708     07 00 00 FF 
0770c     10 B6 05 FD | 	qmul	_var01, ##3600
07710     18 BC 61 FD | 	getqx	_var04
07714     DE CE 01 F1 | 	add	arg02, _var04
07718                 | ' 
07718                 | '     t = second + minute*60 + hour * 3600;
07718                 | '     return t;
07718     E7 B2 01 F6 | 	mov	result1, arg02
0771c                 | _ff_cc_unixtime_0442_ret
0771c     2D 00 64 FD | 	ret
07720                 | 
07720                 | _ff_cc_v_stat_0446
07720     08 5A 05 F6 | 	mov	COUNT_, #8
07724     B0 00 A0 FD | 	call	#pushregs_
07728     30 F0 07 F1 | 	add	ptra, #48
0772c     04 5E 05 F1 | 	add	fp, #4
07730     AF CC 61 FC | 	wrlong	arg01, fp
07734     04 5E 05 F1 | 	add	fp, #4
07738     AF CE 61 FC | 	wrlong	arg02, fp
0773c     E7 CC 01 F6 | 	mov	arg01, arg02
07740     08 5E 85 F1 | 	sub	fp, #8
07744     00 CE 05 F6 | 	mov	arg02, #0
07748     30 D0 05 F6 | 	mov	arg03, #48
0774c     1C 0E B0 FD | 	call	#_ff_cc_memset
07750     04 5E 05 F1 | 	add	fp, #4
07754     AF D6 01 FB | 	rdlong	local01, fp
07758     04 5E 85 F1 | 	sub	fp, #4
0775c     EB D8 C9 FA | 	rdbyte	local02, local01 wz
07760     30 00 90 AD |  if_e	jmp	#LR__0498
07764     04 5E 05 F1 | 	add	fp, #4
07768     AF DA 01 FB | 	rdlong	local03, fp
0776c     04 5E 85 F1 | 	sub	fp, #4
07770     ED DC C1 FA | 	rdbyte	local04, local03
07774     2E DC 0D F2 | 	cmp	local04, #46 wz
07778     30 00 90 5D |  if_ne	jmp	#LR__0499
0777c     04 5E 05 F1 | 	add	fp, #4
07780     AF DE 01 FB | 	rdlong	local05, fp
07784     04 5E 85 F1 | 	sub	fp, #4
07788     01 DE 05 F1 | 	add	local05, #1
0778c     EF E0 C9 FA | 	rdbyte	local06, local05 wz
07790     18 00 90 5D |  if_ne	jmp	#LR__0499
07794                 | LR__0498
07794     18 5E 05 F1 | 	add	fp, #24
07798     AF 20 48 FC | 	wrbyte	#16, fp
0779c     0C 5E 85 F1 | 	sub	fp, #12
077a0     AF 00 68 FC | 	wrlong	#0, fp
077a4     0C 5E 85 F1 | 	sub	fp, #12
077a8     24 00 90 FD | 	jmp	#LR__0500
077ac                 | LR__0499
077ac     04 5E 05 F1 | 	add	fp, #4
077b0     AF CC 01 FB | 	rdlong	arg01, fp
077b4     0C 5E 05 F1 | 	add	fp, #12
077b8     AF CE 01 F6 | 	mov	arg02, fp
077bc     10 5E 85 F1 | 	sub	fp, #16
077c0     58 F0 BF FD | 	call	#_ff_cc_f_stat
077c4     0C 5E 05 F1 | 	add	fp, #12
077c8     AF B2 61 FC | 	wrlong	result1, fp
077cc     0C 5E 85 F1 | 	sub	fp, #12
077d0                 | LR__0500
077d0     0C 5E 05 F1 | 	add	fp, #12
077d4     AF D8 09 FB | 	rdlong	local02, fp wz
077d8     0C 5E 85 F1 | 	sub	fp, #12
077dc     14 00 90 AD |  if_e	jmp	#LR__0501
077e0                 | '         return _set_dos_error(r);
077e0     0C 5E 05 F1 | 	add	fp, #12
077e4     AF CC 01 FB | 	rdlong	arg01, fp
077e8     0C 5E 85 F1 | 	sub	fp, #12
077ec     D0 FB BF FD | 	call	#_ff_cc__set_dos_error_0418
077f0     24 01 90 FD | 	jmp	#LR__0504
077f4                 | LR__0501
077f4     2C 5E 05 F1 | 	add	fp, #44
077f8     AF 48 6A FC | 	wrlong	#292, fp
077fc     14 5E 85 F1 | 	sub	fp, #20
07800     AF D8 C1 FA | 	rdbyte	local02, fp
07804     18 5E 85 F1 | 	sub	fp, #24
07808     07 D8 45 F7 | 	zerox	local02, #7
0780c     01 D8 CD F7 | 	test	local02, #1 wz
07810     14 00 90 AD |  if_e	jmp	#LR__0502
07814     2C 5E 05 F1 | 	add	fp, #44
07818     AF D8 01 FB | 	rdlong	local02, fp
0781c     92 D8 45 F5 | 	or	local02, #146
07820     AF D8 61 FC | 	wrlong	local02, fp
07824     2C 5E 85 F1 | 	sub	fp, #44
07828                 | LR__0502
07828     18 5E 05 F1 | 	add	fp, #24
0782c     AF D8 C1 FA | 	rdbyte	local02, fp
07830     18 5E 85 F1 | 	sub	fp, #24
07834     07 D8 45 F7 | 	zerox	local02, #7
07838     10 D8 CD F7 | 	test	local02, #16 wz
0783c     18 00 90 AD |  if_e	jmp	#LR__0503
07840     2C 5E 05 F1 | 	add	fp, #44
07844     AF D8 01 FB | 	rdlong	local02, fp
07848     08 00 00 FF 
0784c     49 D8 45 F5 | 	or	local02, ##4169
07850     AF D8 61 FC | 	wrlong	local02, fp
07854     2C 5E 85 F1 | 	sub	fp, #44
07858                 | LR__0503
07858     08 5E 05 F1 | 	add	fp, #8
0785c     AF D8 01 FB | 	rdlong	local02, fp
07860     24 5E 05 F1 | 	add	fp, #36
07864     AF E2 01 FB | 	rdlong	local07, fp
07868     08 D8 05 F1 | 	add	local02, #8
0786c     EC E2 61 FC | 	wrlong	local07, local02
07870     24 5E 85 F1 | 	sub	fp, #36
07874     AF D8 01 FB | 	rdlong	local02, fp
07878     0C D8 05 F1 | 	add	local02, #12
0787c     EC 02 68 FC | 	wrlong	#1, local02
07880     AF D8 01 FB | 	rdlong	local02, fp
07884     08 5E 05 F1 | 	add	fp, #8
07888     AF E2 01 FB | 	rdlong	local07, fp
0788c     18 D8 05 F1 | 	add	local02, #24
07890     EC E2 61 FC | 	wrlong	local07, local02
07894     08 5E 85 F1 | 	sub	fp, #8
07898     AF D8 01 FB | 	rdlong	local02, fp
0789c     1C D8 05 F1 | 	add	local02, #28
078a0     01 00 80 FF 
078a4     EC 00 68 FC | 	wrlong	##512, local02
078a8     AF D8 01 FB | 	rdlong	local02, fp
078ac     EC E2 01 F6 | 	mov	local07, local02
078b0     18 E2 05 F1 | 	add	local07, #24
078b4     F1 E4 01 FB | 	rdlong	local08, local07
078b8     F2 DA 51 F6 | 	abs	local03, local08 wc
078bc     09 DA 45 F0 | 	shr	local03, #9
078c0     ED DA 61 C6 |  if_b	neg	local03, local03
078c4     20 D8 05 F1 | 	add	local02, #32
078c8     EC DA 61 FC | 	wrlong	local03, local02
078cc     AF D8 01 FB | 	rdlong	local02, fp
078d0     EC E2 01 F6 | 	mov	local07, local02
078d4     EC DA 01 F6 | 	mov	local03, local02
078d8     0C 5E 05 F1 | 	add	fp, #12
078dc     AF CC E1 FA | 	rdword	arg01, fp
078e0     02 5E 05 F1 | 	add	fp, #2
078e4     AF CE E1 FA | 	rdword	arg02, fp
078e8     16 5E 85 F1 | 	sub	fp, #22
078ec     0F CE 45 F7 | 	zerox	arg02, #15
078f0     E0 FD BF FD | 	call	#_ff_cc_unixtime_0442
078f4     2C DA 05 F1 | 	add	local03, #44
078f8     ED B2 61 FC | 	wrlong	result1, local03
078fc     28 E2 05 F1 | 	add	local07, #40
07900     F1 B2 61 FC | 	wrlong	result1, local07
07904     24 D8 05 F1 | 	add	local02, #36
07908     EC B2 61 FC | 	wrlong	result1, local02
0790c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
0790c                 | '     }
0790c                 | '     buf->st_mode = mode;
0790c                 | '     buf->st_nlink = 1;
0790c                 | '     buf->st_size = finfo.fsize;
0790c                 | '     buf->st_blksize = 512;
0790c                 | '     buf->st_blocks = buf->st_size / 512;
0790c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
0790c                 | ' #line 7053 "/home/pik33/flexprop/include/filesys/fatfs/ff.cc"
0790c                 | '     return r;
0790c     0C 5E 05 F1 | 	add	fp, #12
07910     AF B2 01 FB | 	rdlong	result1, fp
07914     0C 5E 85 F1 | 	sub	fp, #12
07918                 | LR__0504
07918     AF F0 03 F6 | 	mov	ptra, fp
0791c     BA 00 A0 FD | 	call	#popregs_
07920                 | _ff_cc_v_stat_0446_ret
07920     2D 00 64 FD | 	ret
07924                 | 
07924                 | _ff_cc_v_read_0450
07924     04 5A 05 F6 | 	mov	COUNT_, #4
07928     B0 00 A0 FD | 	call	#pushregs_
0792c     1C F0 07 F1 | 	add	ptra, #28
07930     04 5E 05 F1 | 	add	fp, #4
07934     AF CC 61 FC | 	wrlong	arg01, fp
07938     04 5E 05 F1 | 	add	fp, #4
0793c     AF CE 61 FC | 	wrlong	arg02, fp
07940     04 5E 05 F1 | 	add	fp, #4
07944     AF D0 61 FC | 	wrlong	arg03, fp
07948     08 5E 85 F1 | 	sub	fp, #8
0794c     AF D6 01 FB | 	rdlong	local01, fp
07950     EB D8 01 FB | 	rdlong	local02, local01
07954     0C 5E 05 F1 | 	add	fp, #12
07958     AF D8 61 FC | 	wrlong	local02, fp
0795c     AF D6 09 FB | 	rdlong	local01, fp wz
07960     10 5E 85 F1 | 	sub	fp, #16
07964     14 00 90 5D |  if_ne	jmp	#LR__0505
07968                 | '         return _seterror( 5 );
07968     1C AA 05 F1 | 	add	ptr___system__dat__, #28
0796c     D5 0A 68 FC | 	wrlong	#5, ptr___system__dat__
07970     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
07974     01 B2 65 F6 | 	neg	result1, #1
07978     BC 00 90 FD | 	jmp	#LR__0508
0797c                 | LR__0505
0797c     10 5E 05 F1 | 	add	fp, #16
07980     AF CC 01 FB | 	rdlong	arg01, fp
07984     02 00 00 FF 
07988     0C CC 05 F1 | 	add	arg01, ##1036
0798c     08 5E 85 F1 | 	sub	fp, #8
07990     AF CE 01 FB | 	rdlong	arg02, fp
07994     04 5E 05 F1 | 	add	fp, #4
07998     AF D0 01 FB | 	rdlong	arg03, fp
0799c     0C 5E 05 F1 | 	add	fp, #12
079a0     AF D2 01 F6 | 	mov	arg04, fp
079a4     18 5E 85 F1 | 	sub	fp, #24
079a8     4C D4 BF FD | 	call	#_ff_cc_f_read
079ac     D9 DA 01 F6 | 	mov	local03, result1
079b0     14 5E 05 F1 | 	add	fp, #20
079b4     AF DA 61 FC | 	wrlong	local03, fp
079b8     AF D6 09 FB | 	rdlong	local01, fp wz
079bc     14 5E 85 F1 | 	sub	fp, #20
079c0     34 00 90 AD |  if_e	jmp	#LR__0506
079c4     04 5E 05 F1 | 	add	fp, #4
079c8     AF D6 01 FB | 	rdlong	local01, fp
079cc     EB DC 01 F6 | 	mov	local04, local01
079d0     08 DC 05 F1 | 	add	local04, #8
079d4     EE D8 01 FB | 	rdlong	local02, local04
079d8     20 D8 45 F5 | 	or	local02, #32
079dc     08 D6 05 F1 | 	add	local01, #8
079e0     EB D8 61 FC | 	wrlong	local02, local01
079e4                 | '         fil->state |=  (0x20) ;
079e4                 | '         return _set_dos_error(r);
079e4     10 5E 05 F1 | 	add	fp, #16
079e8     AF CC 01 FB | 	rdlong	arg01, fp
079ec     14 5E 85 F1 | 	sub	fp, #20
079f0     CC F9 BF FD | 	call	#_ff_cc__set_dos_error_0418
079f4     40 00 90 FD | 	jmp	#LR__0508
079f8                 | LR__0506
079f8     18 5E 05 F1 | 	add	fp, #24
079fc     AF D6 09 FB | 	rdlong	local01, fp wz
07a00     18 5E 85 F1 | 	sub	fp, #24
07a04     24 00 90 5D |  if_ne	jmp	#LR__0507
07a08     04 5E 05 F1 | 	add	fp, #4
07a0c     AF D6 01 FB | 	rdlong	local01, fp
07a10     EB DC 01 F6 | 	mov	local04, local01
07a14     04 5E 85 F1 | 	sub	fp, #4
07a18     08 DC 05 F1 | 	add	local04, #8
07a1c     EE D8 01 FB | 	rdlong	local02, local04
07a20     10 D8 45 F5 | 	or	local02, #16
07a24     08 D6 05 F1 | 	add	local01, #8
07a28     EB D8 61 FC | 	wrlong	local02, local01
07a2c                 | LR__0507
07a2c                 | '         fil->state |=  (0x10) ;
07a2c                 | '     }
07a2c                 | '     return x;
07a2c     18 5E 05 F1 | 	add	fp, #24
07a30     AF B2 01 FB | 	rdlong	result1, fp
07a34     18 5E 85 F1 | 	sub	fp, #24
07a38                 | LR__0508
07a38     AF F0 03 F6 | 	mov	ptra, fp
07a3c     BA 00 A0 FD | 	call	#popregs_
07a40                 | _ff_cc_v_read_0450_ret
07a40     2D 00 64 FD | 	ret
07a44                 | 
07a44                 | _ff_cc_v_write_0454
07a44     04 5A 05 F6 | 	mov	COUNT_, #4
07a48     B0 00 A0 FD | 	call	#pushregs_
07a4c     1C F0 07 F1 | 	add	ptra, #28
07a50     04 5E 05 F1 | 	add	fp, #4
07a54     AF CC 61 FC | 	wrlong	arg01, fp
07a58     04 5E 05 F1 | 	add	fp, #4
07a5c     AF CE 61 FC | 	wrlong	arg02, fp
07a60     04 5E 05 F1 | 	add	fp, #4
07a64     AF D0 61 FC | 	wrlong	arg03, fp
07a68     08 5E 85 F1 | 	sub	fp, #8
07a6c     AF D6 01 FB | 	rdlong	local01, fp
07a70     EB D8 01 FB | 	rdlong	local02, local01
07a74     0C 5E 05 F1 | 	add	fp, #12
07a78     AF D8 61 FC | 	wrlong	local02, fp
07a7c     AF D6 09 FB | 	rdlong	local01, fp wz
07a80     10 5E 85 F1 | 	sub	fp, #16
07a84     14 00 90 5D |  if_ne	jmp	#LR__0509
07a88                 | '         return _seterror( 5 );
07a88     1C AA 05 F1 | 	add	ptr___system__dat__, #28
07a8c     D5 0A 68 FC | 	wrlong	#5, ptr___system__dat__
07a90     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
07a94     01 B2 65 F6 | 	neg	result1, #1
07a98     88 00 90 FD | 	jmp	#LR__0511
07a9c                 | LR__0509
07a9c     10 5E 05 F1 | 	add	fp, #16
07aa0     AF CC 01 FB | 	rdlong	arg01, fp
07aa4     02 00 00 FF 
07aa8     0C CC 05 F1 | 	add	arg01, ##1036
07aac     08 5E 85 F1 | 	sub	fp, #8
07ab0     AF CE 01 FB | 	rdlong	arg02, fp
07ab4     04 5E 05 F1 | 	add	fp, #4
07ab8     AF D0 01 FB | 	rdlong	arg03, fp
07abc     0C 5E 05 F1 | 	add	fp, #12
07ac0     AF D2 01 F6 | 	mov	arg04, fp
07ac4     18 5E 85 F1 | 	sub	fp, #24
07ac8     78 D9 BF FD | 	call	#_ff_cc_f_write
07acc     D9 DA 01 F6 | 	mov	local03, result1
07ad0     14 5E 05 F1 | 	add	fp, #20
07ad4     AF DA 61 FC | 	wrlong	local03, fp
07ad8     AF D6 09 FB | 	rdlong	local01, fp wz
07adc     14 5E 85 F1 | 	sub	fp, #20
07ae0     34 00 90 AD |  if_e	jmp	#LR__0510
07ae4     04 5E 05 F1 | 	add	fp, #4
07ae8     AF D6 01 FB | 	rdlong	local01, fp
07aec     EB DC 01 F6 | 	mov	local04, local01
07af0     08 DC 05 F1 | 	add	local04, #8
07af4     EE D8 01 FB | 	rdlong	local02, local04
07af8     20 D8 45 F5 | 	or	local02, #32
07afc     08 D6 05 F1 | 	add	local01, #8
07b00     EB D8 61 FC | 	wrlong	local02, local01
07b04                 | '         fil->state |=  (0x20) ;
07b04                 | '         return _set_dos_error(r);
07b04     10 5E 05 F1 | 	add	fp, #16
07b08     AF CC 01 FB | 	rdlong	arg01, fp
07b0c     14 5E 85 F1 | 	sub	fp, #20
07b10     AC F8 BF FD | 	call	#_ff_cc__set_dos_error_0418
07b14     0C 00 90 FD | 	jmp	#LR__0511
07b18                 | LR__0510
07b18                 | '     }
07b18                 | '     return x;
07b18     18 5E 05 F1 | 	add	fp, #24
07b1c     AF B2 01 FB | 	rdlong	result1, fp
07b20     18 5E 85 F1 | 	sub	fp, #24
07b24                 | LR__0511
07b24     AF F0 03 F6 | 	mov	ptra, fp
07b28     BA 00 A0 FD | 	call	#popregs_
07b2c                 | _ff_cc_v_write_0454_ret
07b2c     2D 00 64 FD | 	ret
07b30                 | 
07b30                 | _ff_cc_v_lseek_0458
07b30     05 5A 05 F6 | 	mov	COUNT_, #5
07b34     B0 00 A0 FD | 	call	#pushregs_
07b38     E7 D6 01 F6 | 	mov	local01, arg02
07b3c     E8 D8 01 F6 | 	mov	local02, arg03
07b40     E6 DA 01 FB | 	rdlong	local03, arg01
07b44     02 00 00 FF 
07b48     0C DA 0D F1 | 	add	local03, ##1036 wz
07b4c     14 00 90 5D |  if_ne	jmp	#LR__0512
07b50                 | '         return _seterror( 5 );
07b50     1C AA 05 F1 | 	add	ptr___system__dat__, #28
07b54     D5 0A 68 FC | 	wrlong	#5, ptr___system__dat__
07b58     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
07b5c     01 B2 65 F6 | 	neg	result1, #1
07b60     58 00 90 FD | 	jmp	#LR__0517
07b64                 | LR__0512
07b64     00 D8 0D F2 | 	cmp	local02, #0 wz
07b68     2C 00 90 AD |  if_e	jmp	#LR__0515
07b6c     01 D8 0D F2 | 	cmp	local02, #1 wz
07b70     14 00 90 5D |  if_ne	jmp	#LR__0513
07b74     14 DA 05 F1 | 	add	local03, #20
07b78     ED DC 01 FB | 	rdlong	local04, local03
07b7c     14 DA 85 F1 | 	sub	local03, #20
07b80     EE D6 01 F1 | 	add	local01, local04
07b84     10 00 90 FD | 	jmp	#LR__0514
07b88                 | LR__0513
07b88     0C DA 05 F1 | 	add	local03, #12
07b8c     ED DC 01 FB | 	rdlong	local04, local03
07b90     0C DA 85 F1 | 	sub	local03, #12
07b94     EE D6 01 F1 | 	add	local01, local04
07b98                 | LR__0514
07b98                 | LR__0515
07b98     ED CC 01 F6 | 	mov	arg01, local03
07b9c     EB CE 01 F6 | 	mov	arg02, local01
07ba0     00 E3 BF FD | 	call	#_ff_cc_f_lseek
07ba4     D9 DE 09 F6 | 	mov	local05, result1 wz
07ba8     0C 00 90 AD |  if_e	jmp	#LR__0516
07bac                 | '         return _set_dos_error(result);
07bac     EF CC 01 F6 | 	mov	arg01, local05
07bb0     0C F8 BF FD | 	call	#_ff_cc__set_dos_error_0418
07bb4     04 00 90 FD | 	jmp	#LR__0517
07bb8                 | LR__0516
07bb8                 | '     }
07bb8                 | '     return offset;
07bb8     EB B2 01 F6 | 	mov	result1, local01
07bbc                 | LR__0517
07bbc     AF F0 03 F6 | 	mov	ptra, fp
07bc0     BA 00 A0 FD | 	call	#popregs_
07bc4                 | _ff_cc_v_lseek_0458_ret
07bc4     2D 00 64 FD | 	ret
07bc8                 | 
07bc8                 | _ff_cc_v_ioctl
07bc8                 | ' {
07bc8                 | '     return _seterror( 10 );
07bc8     1C AA 05 F1 | 	add	ptr___system__dat__, #28
07bcc     D5 14 68 FC | 	wrlong	#10, ptr___system__dat__
07bd0     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
07bd4     01 B2 65 F6 | 	neg	result1, #1
07bd8                 | _ff_cc_v_ioctl_ret
07bd8     2D 00 64 FD | 	ret
07bdc                 | 
07bdc                 | _ff_cc_v_mkdir
07bdc     A4 EF BF FD | 	call	#_ff_cc_f_mkdir
07be0     D9 CC 01 F6 | 	mov	arg01, result1
07be4                 | ' 
07be4                 | '     r = f_mkdir(name);
07be4                 | '     return _set_dos_error(r);
07be4     D8 F7 BF FD | 	call	#_ff_cc__set_dos_error_0418
07be8                 | _ff_cc_v_mkdir_ret
07be8     2D 00 64 FD | 	ret
07bec                 | 
07bec                 | _ff_cc_v_remove
07bec     14 ED BF FD | 	call	#_ff_cc_f_unlink
07bf0     D9 CC 01 F6 | 	mov	arg01, result1
07bf4                 | ' 
07bf4                 | '     r = f_unlink(name);
07bf4                 | '     return _set_dos_error(r);
07bf4     C8 F7 BF FD | 	call	#_ff_cc__set_dos_error_0418
07bf8                 | _ff_cc_v_remove_ret
07bf8     2D 00 64 FD | 	ret
07bfc                 | 
07bfc                 | _ff_cc_v_rmdir_0462
07bfc     04 ED BF FD | 	call	#_ff_cc_f_unlink
07c00     D9 CC 01 F6 | 	mov	arg01, result1
07c04                 | ' 
07c04                 | '     r = f_unlink(name);
07c04                 | '     return _set_dos_error(r);
07c04     B8 F7 BF FD | 	call	#_ff_cc__set_dos_error_0418
07c08                 | _ff_cc_v_rmdir_0462_ret
07c08     2D 00 64 FD | 	ret
07c0c                 | 
07c0c                 | _ff_cc_v_rename_0464
07c0c     D4 F2 BF FD | 	call	#_ff_cc_f_rename
07c10     D9 CC 01 F6 | 	mov	arg01, result1
07c14                 | '     return _set_dos_error(r);
07c14     A8 F7 BF FD | 	call	#_ff_cc__set_dos_error_0418
07c18                 | _ff_cc_v_rename_0464_ret
07c18     2D 00 64 FD | 	ret
07c1c                 | 
07c1c                 | _ff_cc_v_open_0468
07c1c     0A 5A 05 F6 | 	mov	COUNT_, #10
07c20     B0 00 A0 FD | 	call	#pushregs_
07c24     E6 D6 01 F6 | 	mov	local01, arg01
07c28     E7 D8 01 F6 | 	mov	local02, arg02
07c2c     E8 DA 01 F6 | 	mov	local03, arg03
07c30     02 00 00 FF 
07c34     34 CC 05 F6 | 	mov	arg01, ##1076
07c38                 | '     return _gc_alloc(size);
07c38     10 CE 05 F6 | 	mov	arg02, #16
07c3c     7C 14 B0 FD | 	call	#__system___gc_doalloc
07c40     D9 DC 09 F6 | 	mov	local04, result1 wz
07c44     14 00 90 5D |  if_ne	jmp	#LR__0518
07c48                 | '       return _seterror( 7 );
07c48     1C AA 05 F1 | 	add	ptr___system__dat__, #28
07c4c     D5 0E 68 FC | 	wrlong	#7, ptr___system__dat__
07c50     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
07c54     01 B2 65 F6 | 	neg	result1, #1
07c58     A8 00 90 FD | 	jmp	#LR__0525
07c5c                 | LR__0518
07c5c     EE DE 01 F6 | 	mov	local05, local04
07c60     00 E0 05 F6 | 	mov	local06, #0
07c64     02 00 00 FF 
07c68     34 E2 05 F6 | 	mov	local07, ##1076
07c6c     EF CC 01 F6 | 	mov	arg01, local05
07c70     00 CE 05 F6 | 	mov	arg02, #0
07c74     02 00 00 FF 
07c78     34 D0 05 F6 | 	mov	arg03, ##1076
07c7c     EC 08 B0 FD | 	call	#_ff_cc_memset
07c80                 | '   switch (flags & 3) {
07c80     ED E4 01 F6 | 	mov	local08, local03
07c84     03 E4 0D F5 | 	and	local08, #3 wz
07c88     0C 00 90 AD |  if_e	jmp	#LR__0519
07c8c     01 E4 0D F2 | 	cmp	local08, #1 wz
07c90     0C 00 90 AD |  if_e	jmp	#LR__0520
07c94     10 00 90 FD | 	jmp	#LR__0521
07c98                 | LR__0519
07c98     01 E6 05 F6 | 	mov	local09, #1
07c9c                 | '       fs_flags =  0x01 ;
07c9c                 | '       break;
07c9c     0C 00 90 FD | 	jmp	#LR__0522
07ca0                 | LR__0520
07ca0     02 E6 05 F6 | 	mov	local09, #2
07ca4                 | '       fs_flags =  0x02 ;
07ca4                 | '       break;
07ca4     04 00 90 FD | 	jmp	#LR__0522
07ca8                 | LR__0521
07ca8     03 E6 05 F6 | 	mov	local09, #3
07cac                 | '       fs_flags =  0x01  |  0x02 ;
07cac                 | '       break;
07cac                 | LR__0522
07cac     08 DA CD F7 | 	test	local03, #8 wz
07cb0     18 E6 45 55 |  if_ne	or	local09, #24
07cb4     08 00 90 5D |  if_ne	jmp	#LR__0523
07cb8     20 DA CD F7 | 	test	local03, #32 wz
07cbc     30 E6 45 55 |  if_ne	or	local09, #48
07cc0                 | LR__0523
07cc0     02 00 00 FF 
07cc4     0C DC 05 F1 | 	add	local04, ##1036
07cc8     EE CC 01 F6 | 	mov	arg01, local04
07ccc     02 00 00 FF 
07cd0     0C DC 85 F1 | 	sub	local04, ##1036
07cd4     EC CE 01 F6 | 	mov	arg02, local02
07cd8     F3 D0 01 F6 | 	mov	arg03, local09
07cdc     D8 C9 BF FD | 	call	#_ff_cc_f_open
07ce0     D9 E8 09 F6 | 	mov	local10, result1 wz
07ce4     14 00 90 AD |  if_e	jmp	#LR__0524
07ce8     EE CC 01 F6 | 	mov	arg01, local04
07cec                 | '     return _gc_free(ptr);
07cec     04 15 B0 FD | 	call	#__system___gc_free
07cf0                 | '     free(f);
07cf0                 | '     return _set_dos_error(r);
07cf0     F4 CC 01 F6 | 	mov	arg01, local10
07cf4     C8 F6 BF FD | 	call	#_ff_cc__set_dos_error_0418
07cf8     08 00 90 FD | 	jmp	#LR__0525
07cfc                 | LR__0524
07cfc     EB DC 61 FC | 	wrlong	local04, local01
07d00                 | '   }
07d00                 | '   fil->vfsdata = f;
07d00                 | '   return 0;
07d00     00 B2 05 F6 | 	mov	result1, #0
07d04                 | LR__0525
07d04     AF F0 03 F6 | 	mov	ptra, fp
07d08     BA 00 A0 FD | 	call	#popregs_
07d0c                 | _ff_cc_v_open_0468_ret
07d0c     2D 00 64 FD | 	ret
07d10                 | 
07d10                 | _ff_cc_xmit_mmc_0651
07d10     04 5A 05 F6 | 	mov	COUNT_, #4
07d14     B0 00 A0 FD | 	call	#pushregs_
07d18     78 AF 05 F1 | 	add	ptr__ff_cc_dat__, #376
07d1c     D7 D6 01 FB | 	rdlong	local01, ptr__ff_cc_dat__
07d20     08 AE 05 F1 | 	add	ptr__ff_cc_dat__, #8
07d24     D7 D8 01 FB | 	rdlong	local02, ptr__ff_cc_dat__
07d28     80 AF 85 F1 | 	sub	ptr__ff_cc_dat__, #384
07d2c     DC 83 9F FE | 	loc	pa,	#(@LR__0527-@LR__0526)
07d30     93 00 A0 FD | 	call	#FCACHE_LOAD_
07d34                 | ' 
07d34                 | ' 	do {
07d34                 | LR__0526
07d34     E6 DA C1 FA | 	rdbyte	local03, arg01
07d38     ED DC 01 F6 | 	mov	local04, local03
07d3c     07 DC 45 F7 | 	zerox	local04, #7
07d40     80 DC CD F7 | 	test	local04, #128 wz
07d44     01 CC 05 F1 | 	add	arg01, #1
07d48     5D D8 61 FD | 	drvnz	local02
07d4c     59 D6 61 FD | 	drvh	local01
07d50     1F 20 64 FD | 	waitx	#16
07d54     58 D6 61 FD | 	drvl	local01
07d58     1F 20 64 FD | 	waitx	#16
07d5c     ED DC 01 F6 | 	mov	local04, local03
07d60     07 DC 45 F7 | 	zerox	local04, #7
07d64     40 DC CD F7 | 	test	local04, #64 wz
07d68     5D D8 61 FD | 	drvnz	local02
07d6c     59 D6 61 FD | 	drvh	local01
07d70     1F 20 64 FD | 	waitx	#16
07d74     58 D6 61 FD | 	drvl	local01
07d78     1F 20 64 FD | 	waitx	#16
07d7c     ED DC 01 F6 | 	mov	local04, local03
07d80     07 DC 45 F7 | 	zerox	local04, #7
07d84     20 DC CD F7 | 	test	local04, #32 wz
07d88     5D D8 61 FD | 	drvnz	local02
07d8c     59 D6 61 FD | 	drvh	local01
07d90     1F 20 64 FD | 	waitx	#16
07d94     58 D6 61 FD | 	drvl	local01
07d98     1F 20 64 FD | 	waitx	#16
07d9c     ED DC 01 F6 | 	mov	local04, local03
07da0     07 DC 45 F7 | 	zerox	local04, #7
07da4     10 DC CD F7 | 	test	local04, #16 wz
07da8     5D D8 61 FD | 	drvnz	local02
07dac     59 D6 61 FD | 	drvh	local01
07db0     1F 20 64 FD | 	waitx	#16
07db4     58 D6 61 FD | 	drvl	local01
07db8     1F 20 64 FD | 	waitx	#16
07dbc     ED DC 01 F6 | 	mov	local04, local03
07dc0     07 DC 45 F7 | 	zerox	local04, #7
07dc4     08 DC CD F7 | 	test	local04, #8 wz
07dc8     5D D8 61 FD | 	drvnz	local02
07dcc     59 D6 61 FD | 	drvh	local01
07dd0     1F 20 64 FD | 	waitx	#16
07dd4     58 D6 61 FD | 	drvl	local01
07dd8     1F 20 64 FD | 	waitx	#16
07ddc     ED DC 01 F6 | 	mov	local04, local03
07de0     07 DC 45 F7 | 	zerox	local04, #7
07de4     04 DC CD F7 | 	test	local04, #4 wz
07de8     5D D8 61 FD | 	drvnz	local02
07dec     59 D6 61 FD | 	drvh	local01
07df0     1F 20 64 FD | 	waitx	#16
07df4     58 D6 61 FD | 	drvl	local01
07df8     1F 20 64 FD | 	waitx	#16
07dfc     ED DC 01 F6 | 	mov	local04, local03
07e00     07 DC 45 F7 | 	zerox	local04, #7
07e04     02 DC CD F7 | 	test	local04, #2 wz
07e08     5D D8 61 FD | 	drvnz	local02
07e0c     59 D6 61 FD | 	drvh	local01
07e10     1F 20 64 FD | 	waitx	#16
07e14     58 D6 61 FD | 	drvl	local01
07e18     1F 20 64 FD | 	waitx	#16
07e1c     07 DA 45 F7 | 	zerox	local03, #7
07e20     01 DA CD F7 | 	test	local03, #1 wz
07e24     5D D8 61 FD | 	drvnz	local02
07e28     59 D6 61 FD | 	drvh	local01
07e2c     1F 20 64 FD | 	waitx	#16
07e30     58 D6 61 FD | 	drvl	local01
07e34     1F 20 64 FD | 	waitx	#16
07e38     01 CE 8D F1 | 	sub	arg02, #1 wz
07e3c     F4 FE 9F 5D |  if_ne	jmp	#LR__0526
07e40                 | LR__0527
07e40     AF F0 03 F6 | 	mov	ptra, fp
07e44     BA 00 A0 FD | 	call	#popregs_
07e48                 | _ff_cc_xmit_mmc_0651_ret
07e48     2D 00 64 FD | 	ret
07e4c                 | 
07e4c                 | _ff_cc_rcvr_mmc_0657
07e4c     04 5A 05 F6 | 	mov	COUNT_, #4
07e50     B0 00 A0 FD | 	call	#pushregs_
07e54     E6 D6 01 F6 | 	mov	local01, arg01
07e58     78 AF 05 F1 | 	add	ptr__ff_cc_dat__, #376
07e5c     D7 D8 01 FB | 	rdlong	local02, ptr__ff_cc_dat__
07e60     08 AE 05 F1 | 	add	ptr__ff_cc_dat__, #8
07e64     D7 CC 01 FB | 	rdlong	arg01, ptr__ff_cc_dat__
07e68     04 AE 05 F1 | 	add	ptr__ff_cc_dat__, #4
07e6c     D7 DA 01 FB | 	rdlong	local03, ptr__ff_cc_dat__
07e70     84 AF 85 F1 | 	sub	ptr__ff_cc_dat__, #388
07e74     59 CC 61 FD | 	drvh	arg01
07e78     F0 82 9F FE | 	loc	pa,	#(@LR__0529-@LR__0528)
07e7c     93 00 A0 FD | 	call	#FCACHE_LOAD_
07e80                 | ' 
07e80                 | ' 	(_pinh(PIN_DI)) ;
07e80                 | ' 
07e80                 | ' 	do {
07e80                 | LR__0528
07e80     00 DC 05 F6 | 	mov	local04, #0
07e84     1F 10 64 FD | 	waitx	#8
07e88     40 DA 71 FD | 	testp	local03 wc
07e8c     6C B2 61 FD | 	wrc	result1
07e90     01 B2 CD F7 | 	test	result1, #1 wz
07e94     01 DC 05 56 |  if_ne	mov	local04, #1
07e98     59 D8 61 FD | 	drvh	local02
07e9c     1F 20 64 FD | 	waitx	#16
07ea0     58 D8 61 FD | 	drvl	local02
07ea4     1F 20 64 FD | 	waitx	#16
07ea8     07 DC 45 F7 | 	zerox	local04, #7
07eac     01 DC 65 F0 | 	shl	local04, #1
07eb0     1F 10 64 FD | 	waitx	#8
07eb4     40 DA 71 FD | 	testp	local03 wc
07eb8     6C B2 61 FD | 	wrc	result1
07ebc     01 B2 CD F7 | 	test	result1, #1 wz
07ec0     01 DC 05 51 |  if_ne	add	local04, #1
07ec4     59 D8 61 FD | 	drvh	local02
07ec8     1F 20 64 FD | 	waitx	#16
07ecc     58 D8 61 FD | 	drvl	local02
07ed0     1F 20 64 FD | 	waitx	#16
07ed4     07 DC 45 F7 | 	zerox	local04, #7
07ed8     01 DC 65 F0 | 	shl	local04, #1
07edc     1F 10 64 FD | 	waitx	#8
07ee0     40 DA 71 FD | 	testp	local03 wc
07ee4     6C B2 61 FD | 	wrc	result1
07ee8     01 B2 CD F7 | 	test	result1, #1 wz
07eec     01 DC 05 51 |  if_ne	add	local04, #1
07ef0     59 D8 61 FD | 	drvh	local02
07ef4     1F 20 64 FD | 	waitx	#16
07ef8     58 D8 61 FD | 	drvl	local02
07efc     1F 20 64 FD | 	waitx	#16
07f00     07 DC 45 F7 | 	zerox	local04, #7
07f04     01 DC 65 F0 | 	shl	local04, #1
07f08     1F 10 64 FD | 	waitx	#8
07f0c     40 DA 71 FD | 	testp	local03 wc
07f10     6C B2 61 FD | 	wrc	result1
07f14     01 B2 CD F7 | 	test	result1, #1 wz
07f18     01 DC 05 51 |  if_ne	add	local04, #1
07f1c     59 D8 61 FD | 	drvh	local02
07f20     1F 20 64 FD | 	waitx	#16
07f24     58 D8 61 FD | 	drvl	local02
07f28     1F 20 64 FD | 	waitx	#16
07f2c     07 DC 45 F7 | 	zerox	local04, #7
07f30     01 DC 65 F0 | 	shl	local04, #1
07f34     1F 10 64 FD | 	waitx	#8
07f38     40 DA 71 FD | 	testp	local03 wc
07f3c     6C B2 61 FD | 	wrc	result1
07f40     01 B2 CD F7 | 	test	result1, #1 wz
07f44     01 DC 05 51 |  if_ne	add	local04, #1
07f48     59 D8 61 FD | 	drvh	local02
07f4c     1F 20 64 FD | 	waitx	#16
07f50     58 D8 61 FD | 	drvl	local02
07f54     1F 20 64 FD | 	waitx	#16
07f58     07 DC 45 F7 | 	zerox	local04, #7
07f5c     01 DC 65 F0 | 	shl	local04, #1
07f60     1F 10 64 FD | 	waitx	#8
07f64     40 DA 71 FD | 	testp	local03 wc
07f68     6C B2 61 FD | 	wrc	result1
07f6c     01 B2 CD F7 | 	test	result1, #1 wz
07f70     01 DC 05 51 |  if_ne	add	local04, #1
07f74     59 D8 61 FD | 	drvh	local02
07f78     1F 20 64 FD | 	waitx	#16
07f7c     58 D8 61 FD | 	drvl	local02
07f80     1F 20 64 FD | 	waitx	#16
07f84     07 DC 45 F7 | 	zerox	local04, #7
07f88     01 DC 65 F0 | 	shl	local04, #1
07f8c     1F 10 64 FD | 	waitx	#8
07f90     40 DA 71 FD | 	testp	local03 wc
07f94     6C B2 61 FD | 	wrc	result1
07f98     01 B2 CD F7 | 	test	result1, #1 wz
07f9c     01 DC 05 51 |  if_ne	add	local04, #1
07fa0     59 D8 61 FD | 	drvh	local02
07fa4     1F 20 64 FD | 	waitx	#16
07fa8     58 D8 61 FD | 	drvl	local02
07fac     1F 20 64 FD | 	waitx	#16
07fb0     07 DC 45 F7 | 	zerox	local04, #7
07fb4     01 DC 65 F0 | 	shl	local04, #1
07fb8     1F 10 64 FD | 	waitx	#8
07fbc     40 DA 71 FD | 	testp	local03 wc
07fc0     6C B2 61 FD | 	wrc	result1
07fc4     01 B2 CD F7 | 	test	result1, #1 wz
07fc8     01 DC 05 51 |  if_ne	add	local04, #1
07fcc     59 D8 61 FD | 	drvh	local02
07fd0     1F 20 64 FD | 	waitx	#16
07fd4     58 D8 61 FD | 	drvl	local02
07fd8     1F 20 64 FD | 	waitx	#16
07fdc     EB DC 41 FC | 	wrbyte	local04, local01
07fe0     01 CE 8D F1 | 	sub	arg02, #1 wz
07fe4     01 D6 05 F1 | 	add	local01, #1
07fe8     94 FE 9F 5D |  if_ne	jmp	#LR__0528
07fec                 | LR__0529
07fec     AF F0 03 F6 | 	mov	ptra, fp
07ff0     BA 00 A0 FD | 	call	#popregs_
07ff4                 | _ff_cc_rcvr_mmc_0657_ret
07ff4     2D 00 64 FD | 	ret
07ff8                 | 
07ff8                 | _ff_cc_wait_ready_0660
07ff8     04 5A 05 F6 | 	mov	COUNT_, #4
07ffc     B0 00 A0 FD | 	call	#pushregs_
08000     0C F0 07 F1 | 	add	ptra, #12
08004                 | ' {
08004                 | ' 	BYTE d;
08004                 | ' 	UINT tmr;
08004                 | ' 
08004                 | ' 
08004                 | ' 	for (tmr = 5000; tmr; tmr--) {
08004     08 5E 05 F1 | 	add	fp, #8
08008     09 00 80 FF 
0800c     AF 10 6B FC | 	wrlong	##5000, fp
08010     08 5E 85 F1 | 	sub	fp, #8
08014                 | LR__0530
08014     08 5E 05 F1 | 	add	fp, #8
08018     AF D6 09 FB | 	rdlong	local01, fp wz
0801c     08 5E 85 F1 | 	sub	fp, #8
08020     4C 00 90 AD |  if_e	jmp	#LR__0531
08024     04 5E 05 F1 | 	add	fp, #4
08028     AF CC 01 F6 | 	mov	arg01, fp
0802c     04 5E 85 F1 | 	sub	fp, #4
08030     01 CE 05 F6 | 	mov	arg02, #1
08034     14 FE BF FD | 	call	#_ff_cc_rcvr_mmc_0657
08038     04 5E 05 F1 | 	add	fp, #4
0803c     AF D8 C1 FA | 	rdbyte	local02, fp
08040     04 5E 85 F1 | 	sub	fp, #4
08044     07 D8 45 F7 | 	zerox	local02, #7
08048     FF D8 0D F2 | 	cmp	local02, #255 wz
0804c     20 00 90 AD |  if_e	jmp	#LR__0531
08050     64 CC 05 F6 | 	mov	arg01, #100
08054     28 09 B0 FD | 	call	#__system___waitus
08058     08 5E 05 F1 | 	add	fp, #8
0805c     AF DA 01 FB | 	rdlong	local03, fp
08060     01 DA 85 F1 | 	sub	local03, #1
08064     AF DA 61 FC | 	wrlong	local03, fp
08068     08 5E 85 F1 | 	sub	fp, #8
0806c     A4 FF 9F FD | 	jmp	#LR__0530
08070                 | LR__0531
08070                 | ' 		dly_us(100);
08070                 | ' 	}
08070                 | ' 
08070                 | ' 	return tmr ? 1 : 0;
08070     08 5E 05 F1 | 	add	fp, #8
08074     AF D6 09 FB | 	rdlong	local01, fp wz
08078     08 5E 85 F1 | 	sub	fp, #8
0807c     01 DC 05 56 |  if_ne	mov	local04, #1
08080     00 DC 05 A6 |  if_e	mov	local04, #0
08084     EE B2 01 F6 | 	mov	result1, local04
08088     AF F0 03 F6 | 	mov	ptra, fp
0808c     BA 00 A0 FD | 	call	#popregs_
08090                 | _ff_cc_wait_ready_0660_ret
08090     2D 00 64 FD | 	ret
08094                 | 
08094                 | _ff_cc_deselect_0666
08094     01 5A 05 F6 | 	mov	COUNT_, #1
08098     B0 00 A0 FD | 	call	#pushregs_
0809c     14 F0 07 F1 | 	add	ptra, #20
080a0     7C AF 05 F1 | 	add	ptr__ff_cc_dat__, #380
080a4     D7 D6 01 FB | 	rdlong	local01, ptr__ff_cc_dat__
080a8     04 5E 05 F1 | 	add	fp, #4
080ac     AF D6 61 FC | 	wrlong	local01, fp
080b0     04 AE 85 F1 | 	sub	ptr__ff_cc_dat__, #4
080b4     D7 D6 01 FB | 	rdlong	local01, ptr__ff_cc_dat__
080b8     04 5E 05 F1 | 	add	fp, #4
080bc     AF D6 61 FC | 	wrlong	local01, fp
080c0     08 AE 05 F1 | 	add	ptr__ff_cc_dat__, #8
080c4     D7 D6 01 FB | 	rdlong	local01, ptr__ff_cc_dat__
080c8     04 5E 05 F1 | 	add	fp, #4
080cc     AF D6 61 FC | 	wrlong	local01, fp
080d0     04 AE 05 F1 | 	add	ptr__ff_cc_dat__, #4
080d4     D7 D6 01 FB | 	rdlong	local01, ptr__ff_cc_dat__
080d8     84 AF 85 F1 | 	sub	ptr__ff_cc_dat__, #388
080dc     04 5E 05 F1 | 	add	fp, #4
080e0     AF D6 61 FC | 	wrlong	local01, fp
080e4     0C 5E 85 F1 | 	sub	fp, #12
080e8     AF CC 01 FB | 	rdlong	arg01, fp
080ec     04 5E 85 F1 | 	sub	fp, #4
080f0     59 CC 61 FD | 	drvh	arg01
080f4     1F 20 64 FD | 	waitx	#16
080f8     AF CC 01 F6 | 	mov	arg01, fp
080fc     01 CE 05 F6 | 	mov	arg02, #1
08100     48 FD BF FD | 	call	#_ff_cc_rcvr_mmc_0657
08104     AF F0 03 F6 | 	mov	ptra, fp
08108     BA 00 A0 FD | 	call	#popregs_
0810c                 | _ff_cc_deselect_0666_ret
0810c     2D 00 64 FD | 	ret
08110                 | 
08110                 | _ff_cc_select_0669
08110     00 5A 05 F6 | 	mov	COUNT_, #0
08114     B0 00 A0 FD | 	call	#pushregs_
08118     0C F0 07 F1 | 	add	ptra, #12
0811c     7C AF 05 F1 | 	add	ptr__ff_cc_dat__, #380
08120     D7 CC 01 FB | 	rdlong	arg01, ptr__ff_cc_dat__
08124     7C AF 85 F1 | 	sub	ptr__ff_cc_dat__, #380
08128     08 5E 05 F1 | 	add	fp, #8
0812c     AF CC 61 FC | 	wrlong	arg01, fp
08130     58 CC 61 FD | 	drvl	arg01
08134     1F 20 64 FD | 	waitx	#16
08138     04 5E 85 F1 | 	sub	fp, #4
0813c     AF CC 01 F6 | 	mov	arg01, fp
08140     04 5E 85 F1 | 	sub	fp, #4
08144     01 CE 05 F6 | 	mov	arg02, #1
08148     00 FD BF FD | 	call	#_ff_cc_rcvr_mmc_0657
0814c     A8 FE BF FD | 	call	#_ff_cc_wait_ready_0660
08150     00 B2 0D F2 | 	cmp	result1, #0 wz
08154     01 B2 05 56 |  if_ne	mov	result1, #1
08158     08 00 90 5D |  if_ne	jmp	#LR__0532
0815c     34 FF BF FD | 	call	#_ff_cc_deselect_0666
08160                 | ' 
08160                 | ' 	deselect();
08160                 | ' 	return 0;
08160     00 B2 05 F6 | 	mov	result1, #0
08164                 | LR__0532
08164     AF F0 03 F6 | 	mov	ptra, fp
08168     BA 00 A0 FD | 	call	#popregs_
0816c                 | _ff_cc_select_0669_ret
0816c     2D 00 64 FD | 	ret
08170                 | 
08170                 | _ff_cc_rcvr_datablock_0672
08170     04 5A 05 F6 | 	mov	COUNT_, #4
08174     B0 00 A0 FD | 	call	#pushregs_
08178     14 F0 07 F1 | 	add	ptra, #20
0817c     04 5E 05 F1 | 	add	fp, #4
08180     AF CC 61 FC | 	wrlong	arg01, fp
08184     04 5E 05 F1 | 	add	fp, #4
08188     AF CE 61 FC | 	wrlong	arg02, fp
0818c                 | ' 	BYTE *buff,
0818c                 | ' 	UINT btr
0818c                 | ' )
0818c                 | ' {
0818c                 | ' 	BYTE d[2];
0818c                 | ' 	UINT tmr;
0818c                 | ' 
0818c                 | ' 
0818c                 | ' 	for (tmr = 1000; tmr; tmr--) {
0818c     08 5E 05 F1 | 	add	fp, #8
08190     01 00 80 FF 
08194     AF D0 6B FC | 	wrlong	##1000, fp
08198     10 5E 85 F1 | 	sub	fp, #16
0819c                 | LR__0533
0819c     10 5E 05 F1 | 	add	fp, #16
081a0     AF D6 09 FB | 	rdlong	local01, fp wz
081a4     10 5E 85 F1 | 	sub	fp, #16
081a8     4C 00 90 AD |  if_e	jmp	#LR__0534
081ac     0C 5E 05 F1 | 	add	fp, #12
081b0     AF CC 01 F6 | 	mov	arg01, fp
081b4     0C 5E 85 F1 | 	sub	fp, #12
081b8     01 CE 05 F6 | 	mov	arg02, #1
081bc     8C FC BF FD | 	call	#_ff_cc_rcvr_mmc_0657
081c0     0C 5E 05 F1 | 	add	fp, #12
081c4     AF D8 C1 FA | 	rdbyte	local02, fp
081c8     0C 5E 85 F1 | 	sub	fp, #12
081cc     07 D8 45 F7 | 	zerox	local02, #7
081d0     FF D8 0D F2 | 	cmp	local02, #255 wz
081d4     20 00 90 5D |  if_ne	jmp	#LR__0534
081d8     64 CC 05 F6 | 	mov	arg01, #100
081dc     A0 07 B0 FD | 	call	#__system___waitus
081e0     10 5E 05 F1 | 	add	fp, #16
081e4     AF DA 01 FB | 	rdlong	local03, fp
081e8     01 DA 85 F1 | 	sub	local03, #1
081ec     AF DA 61 FC | 	wrlong	local03, fp
081f0     10 5E 85 F1 | 	sub	fp, #16
081f4     A4 FF 9F FD | 	jmp	#LR__0533
081f8                 | LR__0534
081f8     0C 5E 05 F1 | 	add	fp, #12
081fc     AF DC C1 FA | 	rdbyte	local04, fp
08200     0C 5E 85 F1 | 	sub	fp, #12
08204     07 DC 45 F7 | 	zerox	local04, #7
08208     FE DC 0D F2 | 	cmp	local04, #254 wz
0820c     00 B2 05 56 |  if_ne	mov	result1, #0
08210     30 00 90 5D |  if_ne	jmp	#LR__0535
08214     04 5E 05 F1 | 	add	fp, #4
08218     AF CC 01 FB | 	rdlong	arg01, fp
0821c     04 5E 05 F1 | 	add	fp, #4
08220     AF CE 01 FB | 	rdlong	arg02, fp
08224     08 5E 85 F1 | 	sub	fp, #8
08228     20 FC BF FD | 	call	#_ff_cc_rcvr_mmc_0657
0822c     0C 5E 05 F1 | 	add	fp, #12
08230     AF CC 01 F6 | 	mov	arg01, fp
08234     0C 5E 85 F1 | 	sub	fp, #12
08238     02 CE 05 F6 | 	mov	arg02, #2
0823c     0C FC BF FD | 	call	#_ff_cc_rcvr_mmc_0657
08240                 | ' 
08240                 | ' 	rcvr_mmc(buff, btr);
08240                 | ' 	rcvr_mmc(d, 2);
08240                 | ' 
08240                 | ' 	return 1;
08240     01 B2 05 F6 | 	mov	result1, #1
08244                 | LR__0535
08244     AF F0 03 F6 | 	mov	ptra, fp
08248     BA 00 A0 FD | 	call	#popregs_
0824c                 | _ff_cc_rcvr_datablock_0672_ret
0824c     2D 00 64 FD | 	ret
08250                 | 
08250                 | _ff_cc_xmit_datablock_0674
08250     01 5A 05 F6 | 	mov	COUNT_, #1
08254     B0 00 A0 FD | 	call	#pushregs_
08258     10 F0 07 F1 | 	add	ptra, #16
0825c     04 5E 05 F1 | 	add	fp, #4
08260     AF CC 61 FC | 	wrlong	arg01, fp
08264     04 5E 05 F1 | 	add	fp, #4
08268     AF CE 41 FC | 	wrbyte	arg02, fp
0826c     08 5E 85 F1 | 	sub	fp, #8
08270     84 FD BF FD | 	call	#_ff_cc_wait_ready_0660
08274     00 B2 0D F2 | 	cmp	result1, #0 wz
08278     00 B2 05 A6 |  if_e	mov	result1, #0
0827c     98 00 90 AD |  if_e	jmp	#LR__0537
08280     08 5E 05 F1 | 	add	fp, #8
08284     AF D6 C1 FA | 	rdbyte	local01, fp
08288     04 5E 05 F1 | 	add	fp, #4
0828c     AF D6 41 FC | 	wrbyte	local01, fp
08290     AF CC 01 F6 | 	mov	arg01, fp
08294     0C 5E 85 F1 | 	sub	fp, #12
08298     01 CE 05 F6 | 	mov	arg02, #1
0829c     70 FA BF FD | 	call	#_ff_cc_xmit_mmc_0651
082a0     08 5E 05 F1 | 	add	fp, #8
082a4     AF D6 C1 FA | 	rdbyte	local01, fp
082a8     08 5E 85 F1 | 	sub	fp, #8
082ac     07 D6 45 F7 | 	zerox	local01, #7
082b0     FD D6 0D F2 | 	cmp	local01, #253 wz
082b4     5C 00 90 AD |  if_e	jmp	#LR__0536
082b8     04 5E 05 F1 | 	add	fp, #4
082bc     AF CC 01 FB | 	rdlong	arg01, fp
082c0     04 5E 85 F1 | 	sub	fp, #4
082c4     09 CE C5 F9 | 	decod	arg02, #9
082c8     44 FA BF FD | 	call	#_ff_cc_xmit_mmc_0651
082cc     0C 5E 05 F1 | 	add	fp, #12
082d0     AF CC 01 F6 | 	mov	arg01, fp
082d4     0C 5E 85 F1 | 	sub	fp, #12
082d8     02 CE 05 F6 | 	mov	arg02, #2
082dc     6C FB BF FD | 	call	#_ff_cc_rcvr_mmc_0657
082e0     0C 5E 05 F1 | 	add	fp, #12
082e4     AF CC 01 F6 | 	mov	arg01, fp
082e8     0C 5E 85 F1 | 	sub	fp, #12
082ec     01 CE 05 F6 | 	mov	arg02, #1
082f0     58 FB BF FD | 	call	#_ff_cc_rcvr_mmc_0657
082f4     0C 5E 05 F1 | 	add	fp, #12
082f8     AF D6 C1 FA | 	rdbyte	local01, fp
082fc     0C 5E 85 F1 | 	sub	fp, #12
08300     07 D6 45 F7 | 	zerox	local01, #7
08304     1F D6 05 F5 | 	and	local01, #31
08308     05 D6 0D F2 | 	cmp	local01, #5 wz
0830c                 | ' 			return 0;
0830c     00 B2 05 56 |  if_ne	mov	result1, #0
08310     04 00 90 5D |  if_ne	jmp	#LR__0537
08314                 | LR__0536
08314                 | ' 	}
08314                 | ' 
08314                 | ' 	return 1;
08314     01 B2 05 F6 | 	mov	result1, #1
08318                 | LR__0537
08318     AF F0 03 F6 | 	mov	ptra, fp
0831c     BA 00 A0 FD | 	call	#popregs_
08320                 | _ff_cc_xmit_datablock_0674_ret
08320     2D 00 64 FD | 	ret
08324                 | 
08324                 | _ff_cc_send_cmd_0678
08324     05 5A 05 F6 | 	mov	COUNT_, #5
08328     B0 00 A0 FD | 	call	#pushregs_
0832c     1C F0 07 F1 | 	add	ptra, #28
08330                 | _ff_cc_send_cmd_0678_enter
08330     04 5E 05 F1 | 	add	fp, #4
08334     AF CC 41 FC | 	wrbyte	arg01, fp
08338     04 5E 05 F1 | 	add	fp, #4
0833c     AF CE 61 FC | 	wrlong	arg02, fp
08340     04 5E 85 F1 | 	sub	fp, #4
08344     AF D6 C1 FA | 	rdbyte	local01, fp
08348     04 5E 85 F1 | 	sub	fp, #4
0834c     07 D6 45 F7 | 	zerox	local01, #7
08350     80 D6 CD F7 | 	test	local01, #128 wz
08354     4C 00 90 AD |  if_e	jmp	#LR__0539
08358     04 5E 05 F1 | 	add	fp, #4
0835c     AF D6 C1 FA | 	rdbyte	local01, fp
08360     7F D6 05 F5 | 	and	local01, #127
08364     AF D6 41 FC | 	wrbyte	local01, fp
08368     04 5E 85 F1 | 	sub	fp, #4
0836c     37 CC 05 F6 | 	mov	arg01, #55
08370     00 CE 05 F6 | 	mov	arg02, #0
08374     AC FF BF FD | 	call	#_ff_cc_send_cmd_0678
08378     0C 5E 05 F1 | 	add	fp, #12
0837c     AF B2 41 FC | 	wrbyte	result1, fp
08380     AF D6 C1 FA | 	rdbyte	local01, fp
08384     0C 5E 85 F1 | 	sub	fp, #12
08388     07 D6 45 F7 | 	zerox	local01, #7
0838c     01 D6 1D F2 | 	cmp	local01, #1 wcz
08390     10 00 90 ED |  if_be	jmp	#LR__0538
08394     0C 5E 05 F1 | 	add	fp, #12
08398     AF B2 C1 FA | 	rdbyte	result1, fp
0839c     0C 5E 85 F1 | 	sub	fp, #12
083a0     88 01 90 FD | 	jmp	#LR__0544
083a4                 | LR__0538
083a4                 | LR__0539
083a4     04 5E 05 F1 | 	add	fp, #4
083a8     AF D6 C1 FA | 	rdbyte	local01, fp
083ac     04 5E 85 F1 | 	sub	fp, #4
083b0     07 D6 45 F7 | 	zerox	local01, #7
083b4     0C D6 0D F2 | 	cmp	local01, #12 wz
083b8     14 00 90 AD |  if_e	jmp	#LR__0540
083bc     D4 FC BF FD | 	call	#_ff_cc_deselect_0666
083c0     4C FD BF FD | 	call	#_ff_cc_select_0669
083c4     00 B2 0D F2 | 	cmp	result1, #0 wz
083c8     FF B2 05 A6 |  if_e	mov	result1, #255
083cc     5C 01 90 AD |  if_e	jmp	#LR__0544
083d0                 | LR__0540
083d0     04 5E 05 F1 | 	add	fp, #4
083d4     AF D8 C1 FA | 	rdbyte	local02, fp
083d8     40 D6 05 F6 | 	mov	local01, #64
083dc     EC D6 41 F5 | 	or	local01, local02
083e0     10 5E 05 F1 | 	add	fp, #16
083e4     AF D6 41 FC | 	wrbyte	local01, fp
083e8     0C 5E 85 F1 | 	sub	fp, #12
083ec     AF D6 01 FB | 	rdlong	local01, fp
083f0     18 D6 45 F0 | 	shr	local01, #24
083f4     0D 5E 05 F1 | 	add	fp, #13
083f8     AF D6 41 FC | 	wrbyte	local01, fp
083fc     0D 5E 85 F1 | 	sub	fp, #13
08400     AF D6 01 FB | 	rdlong	local01, fp
08404     10 D6 45 F0 | 	shr	local01, #16
08408     0E 5E 05 F1 | 	add	fp, #14
0840c     AF D6 41 FC | 	wrbyte	local01, fp
08410     0E 5E 85 F1 | 	sub	fp, #14
08414     AF D6 01 FB | 	rdlong	local01, fp
08418     08 D6 45 F0 | 	shr	local01, #8
0841c     0F 5E 05 F1 | 	add	fp, #15
08420     AF D6 41 FC | 	wrbyte	local01, fp
08424     0F 5E 85 F1 | 	sub	fp, #15
08428     AF D6 01 FB | 	rdlong	local01, fp
0842c     10 5E 05 F1 | 	add	fp, #16
08430     AF D6 41 FC | 	wrbyte	local01, fp
08434     0C 5E 85 F1 | 	sub	fp, #12
08438     AF 02 48 FC | 	wrbyte	#1, fp
0843c     08 5E 85 F1 | 	sub	fp, #8
08440     AF D6 C1 FA | 	rdbyte	local01, fp
08444     04 5E 85 F1 | 	sub	fp, #4
08448     07 D6 4D F7 | 	zerox	local01, #7 wz
0844c     0C 5E 05 A1 |  if_e	add	fp, #12
08450     AF 2A 49 AC |  if_e	wrbyte	#149, fp
08454     0C 5E 85 A1 |  if_e	sub	fp, #12
08458     04 5E 05 F1 | 	add	fp, #4
0845c     AF D6 C1 FA | 	rdbyte	local01, fp
08460     04 5E 85 F1 | 	sub	fp, #4
08464     07 D6 45 F7 | 	zerox	local01, #7
08468     08 D6 0D F2 | 	cmp	local01, #8 wz
0846c     0C 5E 05 A1 |  if_e	add	fp, #12
08470     AF 0E 49 AC |  if_e	wrbyte	#135, fp
08474     0C 5E 85 A1 |  if_e	sub	fp, #12
08478     0C 5E 05 F1 | 	add	fp, #12
0847c     AF D6 C1 FA | 	rdbyte	local01, fp
08480     0D 5E 05 F1 | 	add	fp, #13
08484     AF D6 41 FC | 	wrbyte	local01, fp
08488     05 5E 85 F1 | 	sub	fp, #5
0848c     AF CC 01 F6 | 	mov	arg01, fp
08490     14 5E 85 F1 | 	sub	fp, #20
08494     06 CE 05 F6 | 	mov	arg02, #6
08498     74 F8 BF FD | 	call	#_ff_cc_xmit_mmc_0651
0849c     04 5E 05 F1 | 	add	fp, #4
084a0     AF D6 C1 FA | 	rdbyte	local01, fp
084a4     04 5E 85 F1 | 	sub	fp, #4
084a8     07 D6 45 F7 | 	zerox	local01, #7
084ac     0C D6 0D F2 | 	cmp	local01, #12 wz
084b0     14 00 90 5D |  if_ne	jmp	#LR__0541
084b4     10 5E 05 F1 | 	add	fp, #16
084b8     AF CC 01 F6 | 	mov	arg01, fp
084bc     10 5E 85 F1 | 	sub	fp, #16
084c0     01 CE 05 F6 | 	mov	arg02, #1
084c4     84 F9 BF FD | 	call	#_ff_cc_rcvr_mmc_0657
084c8                 | LR__0541
084c8     0C 5E 05 F1 | 	add	fp, #12
084cc     AF 14 48 FC | 	wrbyte	#10, fp
084d0     0C 5E 85 F1 | 	sub	fp, #12
084d4                 | ' 	n = 10;
084d4                 | ' 	do
084d4                 | LR__0542
084d4     10 5E 05 F1 | 	add	fp, #16
084d8     AF CC 01 F6 | 	mov	arg01, fp
084dc     10 5E 85 F1 | 	sub	fp, #16
084e0     01 CE 05 F6 | 	mov	arg02, #1
084e4     64 F9 BF FD | 	call	#_ff_cc_rcvr_mmc_0657
084e8     10 5E 05 F1 | 	add	fp, #16
084ec     AF D6 C1 FA | 	rdbyte	local01, fp
084f0     10 5E 85 F1 | 	sub	fp, #16
084f4     07 D6 45 F7 | 	zerox	local01, #7
084f8     80 D6 CD F7 | 	test	local01, #128 wz
084fc     20 00 90 AD |  if_e	jmp	#LR__0543
08500     0C 5E 05 F1 | 	add	fp, #12
08504     AF DA C1 FA | 	rdbyte	local03, fp
08508     01 DA 85 F1 | 	sub	local03, #1
0850c     AF DA 41 FC | 	wrbyte	local03, fp
08510     AF DC C1 FA | 	rdbyte	local04, fp
08514     0C 5E 85 F1 | 	sub	fp, #12
08518     EE DE 09 F6 | 	mov	local05, local04 wz
0851c     B4 FF 9F 5D |  if_ne	jmp	#LR__0542
08520                 | LR__0543
08520                 | ' 
08520                 | ' 	return d;
08520     10 5E 05 F1 | 	add	fp, #16
08524     AF B2 C1 FA | 	rdbyte	result1, fp
08528     10 5E 85 F1 | 	sub	fp, #16
0852c                 | LR__0544
0852c     AF F0 03 F6 | 	mov	ptra, fp
08530     BA 00 A0 FD | 	call	#popregs_
08534                 | _ff_cc_send_cmd_0678_ret
08534     2D 00 64 FD | 	ret
08538                 | 
08538                 | _ff_cc_strcpy
08538     E6 B6 01 F6 | 	mov	_var01, arg01
0853c     00 CE 0D F2 | 	cmp	arg02, #0 wz
08540     E6 B2 01 A6 |  if_e	mov	result1, arg01
08544     20 00 90 AD |  if_e	jmp	#_ff_cc_strcpy_ret
08548     C8 7A 9F FE | 	loc	pa,	#(@LR__0546-@LR__0545)
0854c     93 00 A0 FD | 	call	#FCACHE_LOAD_
08550                 | '         do {
08550                 | LR__0545
08550     E7 B8 C9 FA | 	rdbyte	_var02, arg02 wz
08554     DB B8 41 FC | 	wrbyte	_var02, _var01
08558     01 CE 05 F1 | 	add	arg02, #1
0855c     01 B6 05 F1 | 	add	_var01, #1
08560     EC FF 9F 5D |  if_ne	jmp	#LR__0545
08564                 | LR__0546
08564                 | ' 	return(dst);
08564     E6 B2 01 F6 | 	mov	result1, arg01
08568                 | _ff_cc_strcpy_ret
08568     2D 00 64 FD | 	ret
0856c                 | 
0856c                 | _ff_cc_memset
0856c     E6 B6 01 F6 | 	mov	_var01, arg01
08570     E7 B8 01 F6 | 	mov	_var02, arg02
08574     E8 BA 01 F6 | 	mov	_var03, arg03
08578     DB BC 01 F6 | 	mov	_var04, _var01
0857c     03 BE 05 F6 | 	mov	_var05, #3
08580     DB BE C9 F7 | 	test	_var05, _var01 wz
08584     70 00 90 5D |  if_ne	jmp	#LR__0550
08588     04 BA 1D F2 | 	cmp	_var03, #4 wcz
0858c     68 00 90 ED |  if_be	jmp	#LR__0550
08590     DB C0 01 F6 | 	mov	_var06, _var01
08594     FF B8 05 F5 | 	and	_var02, #255
08598     DC BE 01 F6 | 	mov	_var05, _var02
0859c     18 BE 65 F0 | 	shl	_var05, #24
085a0     DC C2 01 F6 | 	mov	_var07, _var02
085a4     10 C2 65 F0 | 	shl	_var07, #16
085a8     E1 BE 41 F5 | 	or	_var05, _var07
085ac     DC C4 01 F6 | 	mov	_var08, _var02
085b0     08 C4 65 F0 | 	shl	_var08, #8
085b4     E2 BE 41 F5 | 	or	_var05, _var08
085b8     DC BE 41 F5 | 	or	_var05, _var02
085bc     DF C6 01 F6 | 	mov	_var09, _var05
085c0     68 7A 9F FE | 	loc	pa,	#(@LR__0548-@LR__0547)
085c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
085c8                 | '     {
085c8                 | '       uint32_t lc;
085c8                 | '       uint32_t *dstl = dest_p;
085c8                 | '       c &= 0xff;
085c8                 | '       lc = (c<<24)|(c<<16)|(c<<8)|c;
085c8                 | '       while (n >= sizeof(uint32_t))
085c8                 | LR__0547
085c8     04 BA 1D F2 | 	cmp	_var03, #4 wcz
085cc     24 00 90 CD |  if_b	jmp	#LR__0549
085d0     E0 BE 01 F6 | 	mov	_var05, _var06
085d4     E0 C2 01 F6 | 	mov	_var07, _var06
085d8     04 C2 05 F1 | 	add	_var07, #4
085dc     E1 C0 01 F6 | 	mov	_var06, _var07
085e0     DF C6 61 FC | 	wrlong	_var09, _var05
085e4     DD BE 01 F6 | 	mov	_var05, _var03
085e8     04 BE 85 F1 | 	sub	_var05, #4
085ec     DF BA 01 F6 | 	mov	_var03, _var05
085f0     D4 FF 9F FD | 	jmp	#LR__0547
085f4                 | LR__0548
085f4                 | LR__0549
085f4     E0 B6 01 F6 | 	mov	_var01, _var06
085f8                 | LR__0550
085f8     1C 7A 9F FE | 	loc	pa,	#(@LR__0552-@LR__0551)
085fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
08600                 | ' 	}
08600                 | '       dest_p = dstl;
08600                 | '     }
08600                 | ' 
08600                 | '   dst = dest_p;
08600                 | '   while (n > 0) {
08600                 | LR__0551
08600     00 BA 1D F2 | 	cmp	_var03, #0 wcz
08604     10 00 90 ED |  if_be	jmp	#LR__0553
08608     DB B8 41 FC | 	wrbyte	_var02, _var01
0860c     01 BA 85 F1 | 	sub	_var03, #1
08610     01 B6 05 F1 | 	add	_var01, #1
08614     E8 FF 9F FD | 	jmp	#LR__0551
08618                 | LR__0552
08618                 | LR__0553
08618                 | '     *dst++ = c;
08618                 | '     --n;
08618                 | '   }
08618                 | ' 
08618                 | '   return orig_dest;
08618     DE B2 01 F6 | 	mov	result1, _var04
0861c                 | _ff_cc_memset_ret
0861c     2D 00 64 FD | 	ret
08620                 | hubexit
08620     81 00 80 FD | 	jmp	#cogexit
08624                 | 
08624                 | __system___setbaud
08624     14 2A 06 FB | 	rdlong	muldiva_, #20
08628     E6 2C 02 F6 | 	mov	muldivb_, arg01
0862c     C6 00 A0 FD | 	call	#divide_
08630     40 7C 64 FD | 	dirl	#62
08634     40 7E 64 FD | 	dirl	#63
08638     D5 2C 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0863c     10 2C 66 F0 | 	shl	muldivb_, #16
08640     07 CE 05 F6 | 	mov	arg02, #7
08644     16 CF 01 F1 | 	add	arg02, muldivb_
08648     3E F8 0C FC | 	wrpin	#124, #62
0864c     3E CE 15 FC | 	wxpin	arg02, #62
08650     3F 7C 0C FC | 	wrpin	#62, #63
08654     14 CE 05 F1 | 	add	arg02, #20
08658     3F CE 15 FC | 	wxpin	arg02, #63
0865c     41 7C 64 FD | 	dirh	#62
08660     41 7E 64 FD | 	dirh	#63
08664                 | __system___setbaud_ret
08664     2D 00 64 FD | 	ret
08668                 | 
08668                 | __system___txraw
08668     02 5A 05 F6 | 	mov	COUNT_, #2
0866c     B0 00 A0 FD | 	call	#pushregs_
08670     E6 D6 01 F6 | 	mov	local01, arg01
08674     D5 D8 09 FB | 	rdlong	local02, ptr___system__dat__ wz
08678     0C 00 90 5D |  if_ne	jmp	#LR__0554
0867c     C2 01 00 FF 
08680     00 CC 05 F6 | 	mov	arg01, ##230400
08684     9C FF BF FD | 	call	#__system___setbaud
08688                 | LR__0554
08688     3E D6 25 FC | 	wypin	local01, #62
0868c     1F 02 64 FD | 	waitx	#1
08690     74 79 9F FE | 	loc	pa,	#(@LR__0556-@LR__0555)
08694     93 00 A0 FD | 	call	#FCACHE_LOAD_
08698                 | LR__0555
08698     40 7C 74 FD | 	testp	#62 wc
0869c     F8 FF 9F 3D |  if_nc	jmp	#LR__0555
086a0                 | LR__0556
086a0     01 B2 05 F6 | 	mov	result1, #1
086a4     AF F0 03 F6 | 	mov	ptra, fp
086a8     BA 00 A0 FD | 	call	#popregs_
086ac                 | __system___txraw_ret
086ac     2D 00 64 FD | 	ret
086b0                 | 
086b0                 | __system___rxraw
086b0     0B 5A 05 F6 | 	mov	COUNT_, #11
086b4     B0 00 A0 FD | 	call	#pushregs_
086b8     E6 D6 01 F6 | 	mov	local01, arg01
086bc     D5 D8 09 FB | 	rdlong	local02, ptr___system__dat__ wz
086c0     0C 00 90 5D |  if_ne	jmp	#LR__0557
086c4     C2 01 00 FF 
086c8     00 CC 05 F6 | 	mov	arg01, ##230400
086cc     54 FF BF FD | 	call	#__system___setbaud
086d0                 | LR__0557
086d0     00 D6 0D F2 | 	cmp	local01, #0 wz
086d4     18 00 90 AD |  if_e	jmp	#LR__0558
086d8     1A DA 61 FD | 	getct	local03
086dc     14 DC 05 FB | 	rdlong	local04, #20
086e0     0A DC 45 F0 | 	shr	local04, #10
086e4     EE D6 01 FD | 	qmul	local01, local04
086e8     18 DE 61 FD | 	getqx	local05
086ec     EF DA 01 F1 | 	add	local03, local05
086f0                 | LR__0558
086f0     01 E0 65 F6 | 	neg	local06, #1
086f4     00 E2 05 F6 | 	mov	local07, #0
086f8     04 AA 05 F1 | 	add	ptr___system__dat__, #4
086fc     D5 E4 01 FB | 	rdlong	local08, ptr___system__dat__
08700     04 AA 85 F1 | 	sub	ptr___system__dat__, #4
08704                 | LR__0559
08704     08 E4 15 F4 | 	testb	local08, #8 wc
08708     09 E4 75 F4 | 	testbn	local08, #9 andc
0870c     0A E4 45 F0 | 	shr	local08, #10
08710     01 E2 05 C6 |  if_b	mov	local07, #1
08714     10 00 90 CD |  if_b	jmp	#LR__0560
08718     40 7E 6C FD | 	testp	#63 wz
0871c     01 E2 05 A6 |  if_e	mov	local07, #1
08720     3F E4 8D AA |  if_e	rdpin	local08, #63
08724     04 E4 45 A0 |  if_e	shr	local08, #4
08728                 | LR__0560
08728     00 D8 05 F6 | 	mov	local02, #0
0872c     00 E2 0D F2 | 	cmp	local07, #0 wz
08730     01 D8 65 56 |  if_ne	neg	local02, #1
08734     00 E6 05 F6 | 	mov	local09, #0
08738     00 DC 05 F6 | 	mov	local04, #0
0873c     00 D6 0D F2 | 	cmp	local01, #0 wz
08740     01 DC 65 56 |  if_ne	neg	local04, #1
08744     00 DE 05 F6 | 	mov	local05, #0
08748     00 E8 05 F6 | 	mov	local10, #0
0874c     1A EA 61 FD | 	getct	local11
08750     ED EA 81 F1 | 	sub	local11, local03
08754     00 EA 5D F2 | 	cmps	local11, #0 wcz
08758     01 E8 65 C6 |  if_b	neg	local10, #1
0875c     00 E8 0D F2 | 	cmp	local10, #0 wz
08760     01 DE 65 56 |  if_ne	neg	local05, #1
08764     EF DC C9 F7 | 	test	local04, local05 wz
08768     01 E6 65 56 |  if_ne	neg	local09, #1
0876c     F3 D8 49 F5 | 	or	local02, local09 wz
08770     90 FF 9F AD |  if_e	jmp	#LR__0559
08774     00 E2 0D F2 | 	cmp	local07, #0 wz
08778     F2 E0 01 56 |  if_ne	mov	local06, local08
0877c     FF E0 05 55 |  if_ne	and	local06, #255
08780     04 AA 05 F1 | 	add	ptr___system__dat__, #4
08784     D5 E4 61 FC | 	wrlong	local08, ptr___system__dat__
08788     04 AA 85 F1 | 	sub	ptr___system__dat__, #4
0878c     F0 B2 01 F6 | 	mov	result1, local06
08790     AF F0 03 F6 | 	mov	ptra, fp
08794     BA 00 A0 FD | 	call	#popregs_
08798                 | __system___rxraw_ret
08798     2D 00 64 FD | 	ret
0879c                 | 
0879c                 | __system____builtin_strcpy
0879c     E6 B6 01 F6 | 	mov	_var01, arg01
087a0     70 78 9F FE | 	loc	pa,	#(@LR__0562-@LR__0561)
087a4     93 00 A0 FD | 	call	#FCACHE_LOAD_
087a8                 | LR__0561
087a8     E7 B8 C9 FA | 	rdbyte	_var02, arg02 wz
087ac     E6 B8 41 FC | 	wrbyte	_var02, arg01
087b0     01 CE 05 F1 | 	add	arg02, #1
087b4     01 CC 05 F1 | 	add	arg01, #1
087b8     EC FF 9F 5D |  if_ne	jmp	#LR__0561
087bc                 | LR__0562
087bc     DB B2 01 F6 | 	mov	result1, _var01
087c0                 | __system____builtin_strcpy_ret
087c0     2D 00 64 FD | 	ret
087c4                 | 
087c4                 | __system____topofstack
087c4     00 5A 05 F6 | 	mov	COUNT_, #0
087c8     B0 00 A0 FD | 	call	#pushregs_
087cc     08 F0 07 F1 | 	add	ptra, #8
087d0     04 5E 05 F1 | 	add	fp, #4
087d4     AF CC 61 FC | 	wrlong	arg01, fp
087d8     AF B2 01 F6 | 	mov	result1, fp
087dc     04 5E 85 F1 | 	sub	fp, #4
087e0     AF F0 03 F6 | 	mov	ptra, fp
087e4     BA 00 A0 FD | 	call	#popregs_
087e8                 | __system____topofstack_ret
087e8     2D 00 64 FD | 	ret
087ec                 | 
087ec                 | __system___make_methodptr
087ec     04 5A 05 F6 | 	mov	COUNT_, #4
087f0     B0 00 A0 FD | 	call	#pushregs_
087f4     E6 D6 01 F6 | 	mov	local01, arg01
087f8     E7 D8 01 F6 | 	mov	local02, arg02
087fc     08 CC 05 F6 | 	mov	arg01, #8
08800     74 08 B0 FD | 	call	#__system___gc_alloc_managed
08804     D9 DA 09 F6 | 	mov	local03, result1 wz
08808     10 00 90 AD |  if_e	jmp	#LR__0563
0880c     ED D6 61 FC | 	wrlong	local01, local03
08810     ED DC 01 F6 | 	mov	local04, local03
08814     04 DC 05 F1 | 	add	local04, #4
08818     EE D8 61 FC | 	wrlong	local02, local04
0881c                 | LR__0563
0881c     ED B2 01 F6 | 	mov	result1, local03
08820     AF F0 03 F6 | 	mov	ptra, fp
08824     BA 00 A0 FD | 	call	#popregs_
08828                 | __system___make_methodptr_ret
08828     2D 00 64 FD | 	ret
0882c                 | 
0882c                 | __system___lockmem
0882c     02 5A 05 F6 | 	mov	COUNT_, #2
08830     B0 00 A0 FD | 	call	#pushregs_
08834     00 B2 05 F6 | 	mov	result1, #0
08838     01 B2 61 FD | 	cogid	result1
0883c     D9 D6 01 F6 | 	mov	local01, result1
08840     00 D7 05 F1 | 	add	local01, #256
08844                 | LR__0564
08844     E6 D8 09 FB | 	rdlong	local02, arg01 wz
08848     E6 D6 61 AC |  if_e	wrlong	local01, arg01
0884c     E6 D8 01 AB |  if_e	rdlong	local02, arg01
08850     E6 D8 01 AB |  if_e	rdlong	local02, arg01
08854     EB D8 09 F2 | 	cmp	local02, local01 wz
08858     E8 FF 9F 5D |  if_ne	jmp	#LR__0564
0885c     AF F0 03 F6 | 	mov	ptra, fp
08860     BA 00 A0 FD | 	call	#popregs_
08864                 | __system___lockmem_ret
08864     2D 00 64 FD | 	ret
08868                 | 
08868                 | __system___string_cmp
08868     E6 B6 01 F6 | 	mov	_var01, arg01
0886c     E7 B8 01 F6 | 	mov	_var02, arg02
08870     C8 77 9F FE | 	loc	pa,	#(@LR__0566-@LR__0565)
08874     93 00 A0 FD | 	call	#FCACHE_LOAD_
08878                 | LR__0565
08878     DB BA C1 FA | 	rdbyte	_var03, _var01
0887c     DC BC 01 F6 | 	mov	_var04, _var02
08880     DC BE 01 F6 | 	mov	_var05, _var02
08884     01 BE 05 F1 | 	add	_var05, #1
08888     DF B8 01 F6 | 	mov	_var02, _var05
0888c     DE C0 C1 FA | 	rdbyte	_var06, _var04
08890     DD BC 01 F6 | 	mov	_var04, _var03
08894     E0 BC 81 F1 | 	sub	_var04, _var06
08898     DE C2 09 F6 | 	mov	_var07, _var04 wz
0889c     01 B6 05 F1 | 	add	_var01, #1
088a0     10 00 90 5D |  if_ne	jmp	#LR__0567
088a4     00 BA 0D F2 | 	cmp	_var03, #0 wz
088a8     08 00 90 AD |  if_e	jmp	#LR__0567
088ac     00 C0 0D F2 | 	cmp	_var06, #0 wz
088b0     C4 FF 9F 5D |  if_ne	jmp	#LR__0565
088b4                 | LR__0566
088b4                 | LR__0567
088b4     E1 B2 01 F6 | 	mov	result1, _var07
088b8                 | __system___string_cmp_ret
088b8     2D 00 64 FD | 	ret
088bc                 | 
088bc                 | __system___tx
088bc     02 5A 05 F6 | 	mov	COUNT_, #2
088c0     B0 00 A0 FD | 	call	#pushregs_
088c4     E6 D6 01 F6 | 	mov	local01, arg01
088c8     0A D6 0D F2 | 	cmp	local01, #10 wz
088cc     20 00 90 5D |  if_ne	jmp	#LR__0568
088d0     08 AA 05 F1 | 	add	ptr___system__dat__, #8
088d4     D5 D8 01 FB | 	rdlong	local02, ptr___system__dat__
088d8     08 AA 85 F1 | 	sub	ptr___system__dat__, #8
088dc     02 D8 CD F7 | 	test	local02, #2 wz
088e0     0C 00 90 AD |  if_e	jmp	#LR__0568
088e4     0D D8 05 F6 | 	mov	local02, #13
088e8     0D CC 05 F6 | 	mov	arg01, #13
088ec     78 FD BF FD | 	call	#__system___txraw
088f0                 | LR__0568
088f0     EB CC 01 F6 | 	mov	arg01, local01
088f4     70 FD BF FD | 	call	#__system___txraw
088f8     AF F0 03 F6 | 	mov	ptra, fp
088fc     BA 00 A0 FD | 	call	#popregs_
08900                 | __system___tx_ret
08900     2D 00 64 FD | 	ret
08904                 | 
08904                 | __system___rx
08904     02 5A 05 F6 | 	mov	COUNT_, #2
08908     B0 00 A0 FD | 	call	#pushregs_
0890c                 | LR__0569
0890c     00 CC 05 F6 | 	mov	arg01, #0
08910     9C FD BF FD | 	call	#__system___rxraw
08914     D9 D6 01 F6 | 	mov	local01, result1
08918     FF FF 7F FF 
0891c     FF D7 0D F2 | 	cmp	local01, ##-1 wz
08920     E8 FF 9F AD |  if_e	jmp	#LR__0569
08924     0D D6 0D F2 | 	cmp	local01, #13 wz
08928     14 00 90 5D |  if_ne	jmp	#LR__0570
0892c     08 AA 05 F1 | 	add	ptr___system__dat__, #8
08930     D5 D8 01 FB | 	rdlong	local02, ptr___system__dat__
08934     08 AA 85 F1 | 	sub	ptr___system__dat__, #8
08938     02 D8 CD F7 | 	test	local02, #2 wz
0893c     0A D6 05 56 |  if_ne	mov	local01, #10
08940                 | LR__0570
08940     08 AA 05 F1 | 	add	ptr___system__dat__, #8
08944     D5 D8 01 FB | 	rdlong	local02, ptr___system__dat__
08948     08 AA 85 F1 | 	sub	ptr___system__dat__, #8
0894c     01 D8 CD F7 | 	test	local02, #1 wz
08950     1C 00 90 AD |  if_e	jmp	#LR__0573
08954     7F D6 0D F2 | 	cmp	local01, #127 wz
08958     0C 00 90 5D |  if_ne	jmp	#LR__0571
0895c     08 CC 05 F6 | 	mov	arg01, #8
08960     58 FF BF FD | 	call	#__system___tx
08964     08 00 90 FD | 	jmp	#LR__0572
08968                 | LR__0571
08968     EB CC 01 F6 | 	mov	arg01, local01
0896c     4C FF BF FD | 	call	#__system___tx
08970                 | LR__0572
08970                 | LR__0573
08970     EB B2 01 F6 | 	mov	result1, local01
08974     AF F0 03 F6 | 	mov	ptra, fp
08978     BA 00 A0 FD | 	call	#popregs_
0897c                 | __system___rx_ret
0897c     2D 00 64 FD | 	ret
08980                 | 
08980                 | __system___waitus
08980     02 5A 05 F6 | 	mov	COUNT_, #2
08984     B0 00 A0 FD | 	call	#pushregs_
08988     E6 D6 01 F6 | 	mov	local01, arg01
0898c     10 AA 05 F1 | 	add	ptr___system__dat__, #16
08990     D5 D8 09 FB | 	rdlong	local02, ptr___system__dat__ wz
08994     10 AA 85 F1 | 	sub	ptr___system__dat__, #16
08998     20 00 90 5D |  if_ne	jmp	#LR__0574
0899c     14 2A 06 FB | 	rdlong	muldiva_, #20
089a0     A1 07 00 FF 
089a4     40 2C 06 F6 | 	mov	muldivb_, ##1000000
089a8     C2 00 A0 FD | 	call	#unsdivide_
089ac     16 D9 01 F6 | 	mov	local02, muldivb_
089b0     10 AA 05 F1 | 	add	ptr___system__dat__, #16
089b4     D5 2C 62 FC | 	wrlong	muldivb_, ptr___system__dat__
089b8     10 AA 85 F1 | 	sub	ptr___system__dat__, #16
089bc                 | LR__0574
089bc     EC D6 01 FD | 	qmul	local01, local02
089c0     18 CC 61 FD | 	getqx	arg01
089c4     1F CC 61 FD | 	waitx	arg01
089c8     AF F0 03 F6 | 	mov	ptra, fp
089cc     BA 00 A0 FD | 	call	#popregs_
089d0                 | __system___waitus_ret
089d0     2D 00 64 FD | 	ret
089d4                 | 
089d4                 | __system____getvfsforfile
089d4     12 5A 05 F6 | 	mov	COUNT_, #18
089d8     B0 00 A0 FD | 	call	#pushregs_
089dc     E6 D6 01 F6 | 	mov	local01, arg01
089e0     E7 D8 01 F6 | 	mov	local02, arg02
089e4     E8 DA 01 F6 | 	mov	local03, arg03
089e8     EC DC C1 FA | 	rdbyte	local04, local02
089ec     2F DC 0D F2 | 	cmp	local04, #47 wz
089f0     14 00 90 5D |  if_ne	jmp	#LR__0575
089f4     EB CC 01 F6 | 	mov	arg01, local01
089f8     EC CE 01 F6 | 	mov	arg02, local02
089fc     00 D1 05 F6 | 	mov	arg03, #256
08a00     00 0D B0 FD | 	call	#__system__strncpy
08a04     6C 00 90 FD | 	jmp	#LR__0578
08a08                 | LR__0575
08a08     40 AA 05 F1 | 	add	ptr___system__dat__, #64
08a0c     D5 CE 01 F6 | 	mov	arg02, ptr___system__dat__
08a10     40 AA 85 F1 | 	sub	ptr___system__dat__, #64
08a14     EB CC 01 F6 | 	mov	arg01, local01
08a18     00 D1 05 F6 | 	mov	arg03, #256
08a1c     E4 0C B0 FD | 	call	#__system__strncpy
08a20     D9 DE 01 F6 | 	mov	local05, result1
08a24     EC DC C9 FA | 	rdbyte	local04, local02 wz
08a28     48 00 90 AD |  if_e	jmp	#LR__0577
08a2c     EC E0 C1 FA | 	rdbyte	local06, local02
08a30     2E E0 0D F2 | 	cmp	local06, #46 wz
08a34     18 00 90 5D |  if_ne	jmp	#LR__0576
08a38     01 D8 05 F1 | 	add	local02, #1
08a3c     EC E2 C1 FA | 	rdbyte	local07, local02
08a40     01 D8 85 F1 | 	sub	local02, #1
08a44     F1 E4 01 F6 | 	mov	local08, local07
08a48     07 E4 4D F7 | 	zerox	local08, #7 wz
08a4c     24 00 90 AD |  if_e	jmp	#LR__0577
08a50                 | LR__0576
08a50     4D 00 00 FF 
08a54     50 CF 05 F6 | 	mov	arg02, ##@LR__0674
08a58     EB CC 01 F6 | 	mov	arg01, local01
08a5c     00 D1 05 F6 | 	mov	arg03, #256
08a60     EC 0C B0 FD | 	call	#__system__strncat
08a64     EB CC 01 F6 | 	mov	arg01, local01
08a68     EC CE 01 F6 | 	mov	arg02, local02
08a6c     00 D1 05 F6 | 	mov	arg03, #256
08a70     DC 0C B0 FD | 	call	#__system__strncat
08a74                 | LR__0577
08a74                 | LR__0578
08a74     00 E6 05 F6 | 	mov	local09, #0
08a78                 | LR__0579
08a78     04 E6 5D F2 | 	cmps	local09, #4 wcz
08a7c     50 01 90 3D |  if_ae	jmp	#LR__0590
08a80     F3 DC 01 F6 | 	mov	local04, local09
08a84     02 DC 65 F0 | 	shl	local04, #2
08a88     20 AA 05 F1 | 	add	ptr___system__dat__, #32
08a8c     D5 DC 01 F1 | 	add	local04, ptr___system__dat__
08a90     EE E4 09 FB | 	rdlong	local08, local04 wz
08a94     20 AA 85 F1 | 	sub	ptr___system__dat__, #32
08a98     2C 01 90 AD |  if_e	jmp	#LR__0589
08a9c     F3 DC 01 F6 | 	mov	local04, local09
08aa0     02 DC 65 F0 | 	shl	local04, #2
08aa4     20 AA 05 F1 | 	add	ptr___system__dat__, #32
08aa8     D5 DC 01 F1 | 	add	local04, ptr___system__dat__
08aac     EE CC 01 FB | 	rdlong	arg01, local04
08ab0     20 AA 85 F1 | 	sub	ptr___system__dat__, #32
08ab4     00 E8 05 F6 | 	mov	local10, #0
08ab8     54 75 9F FE | 	loc	pa,	#(@LR__0581-@LR__0580)
08abc     93 00 A0 FD | 	call	#FCACHE_LOAD_
08ac0                 | LR__0580
08ac0     E6 EA C9 FA | 	rdbyte	local11, arg01 wz
08ac4     01 E8 05 51 |  if_ne	add	local10, #1
08ac8     01 CC 05 51 |  if_ne	add	arg01, #1
08acc     F0 FF 9F 5D |  if_ne	jmp	#LR__0580
08ad0                 | LR__0581
08ad0     F4 B2 01 F6 | 	mov	result1, local10
08ad4     D9 EC 01 F6 | 	mov	local12, result1
08ad8     F6 E0 01 F6 | 	mov	local06, local12
08adc     EB E0 01 F1 | 	add	local06, local01
08ae0     F0 DC C1 FA | 	rdbyte	local04, local06
08ae4     2F DC 0D F2 | 	cmp	local04, #47 wz
08ae8     10 00 90 AD |  if_e	jmp	#LR__0582
08aec     F6 DE 01 F6 | 	mov	local05, local12
08af0     EB DE 01 F1 | 	add	local05, local01
08af4     EF E2 C9 FA | 	rdbyte	local07, local05 wz
08af8     CC 00 90 5D |  if_ne	jmp	#LR__0588
08afc                 | LR__0582
08afc     EB CC 01 F6 | 	mov	arg01, local01
08b00     F3 EE 01 F6 | 	mov	local13, local09
08b04     02 EE 65 F0 | 	shl	local13, #2
08b08     20 AA 05 F1 | 	add	ptr___system__dat__, #32
08b0c     D5 EE 01 F1 | 	add	local13, ptr___system__dat__
08b10     F7 CE 01 FB | 	rdlong	arg02, local13
08b14     F6 D0 01 F6 | 	mov	arg03, local12
08b18     20 AA 85 F1 | 	sub	ptr___system__dat__, #32
08b1c     B4 0C B0 FD | 	call	#__system__strncmp
08b20     D9 F0 09 F6 | 	mov	local14, result1 wz
08b24     A0 00 90 5D |  if_ne	jmp	#LR__0588
08b28     F3 DC 01 F6 | 	mov	local04, local09
08b2c     02 DC 65 F0 | 	shl	local04, #2
08b30     30 AA 05 F1 | 	add	ptr___system__dat__, #48
08b34     D5 DC 01 F1 | 	add	local04, ptr___system__dat__
08b38     EE F2 01 FB | 	rdlong	local15, local04
08b3c     30 AA 85 F1 | 	sub	ptr___system__dat__, #48
08b40     08 75 9F FE | 	loc	pa,	#(@LR__0585-@LR__0583)
08b44     93 00 A0 FD | 	call	#FCACHE_LOAD_
08b48                 | LR__0583
08b48     F6 E4 01 F6 | 	mov	local08, local12
08b4c     01 E4 05 F1 | 	add	local08, #1
08b50     EB E4 01 F1 | 	add	local08, local01
08b54     F2 DC C1 FA | 	rdbyte	local04, local08
08b58     2E DC 0D F2 | 	cmp	local04, #46 wz
08b5c     34 00 90 5D |  if_ne	jmp	#LR__0586
08b60     F6 F4 01 F6 | 	mov	local16, local12
08b64     02 F4 05 F1 | 	add	local16, #2
08b68     EB F4 01 F1 | 	add	local16, local01
08b6c     FA DE C1 FA | 	rdbyte	local05, local16
08b70     2F DE 0D F2 | 	cmp	local05, #47 wz
08b74     14 00 90 AD |  if_e	jmp	#LR__0584
08b78     F6 F6 01 F6 | 	mov	local17, local12
08b7c     02 F6 05 F1 | 	add	local17, #2
08b80     EB F6 01 F1 | 	add	local17, local01
08b84     FB F8 C9 FA | 	rdbyte	local18, local17 wz
08b88     08 00 90 5D |  if_ne	jmp	#LR__0586
08b8c                 | LR__0584
08b8c     01 EC 05 F1 | 	add	local12, #1
08b90     B4 FF 9F FD | 	jmp	#LR__0583
08b94                 | LR__0585
08b94                 | LR__0586
08b94     00 DA 0D F2 | 	cmp	local03, #0 wz
08b98     10 00 90 AD |  if_e	jmp	#LR__0587
08b9c     ED CC 01 F6 | 	mov	arg01, local03
08ba0     EB CE 01 F6 | 	mov	arg02, local01
08ba4     00 D1 05 F6 | 	mov	arg03, #256
08ba8     58 0B B0 FD | 	call	#__system__strncpy
08bac                 | LR__0587
08bac     EB CC 01 F6 | 	mov	arg01, local01
08bb0     EB CE 01 F6 | 	mov	arg02, local01
08bb4     F6 CE 01 F1 | 	add	arg02, local12
08bb8     01 CE 05 F1 | 	add	arg02, #1
08bbc     DC FB BF FD | 	call	#__system____builtin_strcpy
08bc0     F9 B2 01 F6 | 	mov	result1, local15
08bc4     1C 00 90 FD | 	jmp	#LR__0591
08bc8                 | LR__0588
08bc8                 | LR__0589
08bc8     01 E6 05 F1 | 	add	local09, #1
08bcc     A8 FE 9F FD | 	jmp	#LR__0579
08bd0                 | LR__0590
08bd0     01 00 00 FF 
08bd4     44 AA 05 F1 | 	add	ptr___system__dat__, ##580
08bd8     D5 B2 01 FB | 	rdlong	result1, ptr___system__dat__
08bdc     01 00 00 FF 
08be0     44 AA 85 F1 | 	sub	ptr___system__dat__, ##580
08be4                 | LR__0591
08be4     AF F0 03 F6 | 	mov	ptra, fp
08be8     BA 00 A0 FD | 	call	#popregs_
08bec                 | __system____getvfsforfile_ret
08bec     2D 00 64 FD | 	ret
08bf0                 | 
08bf0                 | __system___basic_print_char
08bf0     05 5A 05 F6 | 	mov	COUNT_, #5
08bf4     B0 00 A0 FD | 	call	#pushregs_
08bf8     E7 D6 01 F6 | 	mov	local01, arg02
08bfc     4C 0D B0 FD | 	call	#__system___gettxfunc
08c00     D9 D8 09 F6 | 	mov	local02, result1 wz
08c04     00 B2 05 A6 |  if_e	mov	result1, #0
08c08     24 00 90 AD |  if_e	jmp	#LR__0592
08c0c     EC DA 01 FB | 	rdlong	local03, local02
08c10     04 D8 05 F1 | 	add	local02, #4
08c14     EC DC 01 FB | 	rdlong	local04, local02
08c18     EB CC 01 F6 | 	mov	arg01, local01
08c1c     D3 DE 01 F6 | 	mov	local05, objptr
08c20     ED A6 01 F6 | 	mov	objptr, local03
08c24     2D DC 61 FD | 	call	local04
08c28     EF A6 01 F6 | 	mov	objptr, local05
08c2c     01 B2 05 F6 | 	mov	result1, #1
08c30                 | LR__0592
08c30     AF F0 03 F6 | 	mov	ptra, fp
08c34     BA 00 A0 FD | 	call	#popregs_
08c38                 | __system___basic_print_char_ret
08c38     2D 00 64 FD | 	ret
08c3c                 | 
08c3c                 | __system___basic_print_string
08c3c     03 5A 05 F6 | 	mov	COUNT_, #3
08c40     B0 00 A0 FD | 	call	#pushregs_
08c44     E7 D6 01 F6 | 	mov	local01, arg02
08c48     E8 D8 01 F6 | 	mov	local02, arg03
08c4c     FC 0C B0 FD | 	call	#__system___gettxfunc
08c50     D9 DA 09 F6 | 	mov	local03, result1 wz
08c54     00 B2 05 A6 |  if_e	mov	result1, #0
08c58     1C 00 90 AD |  if_e	jmp	#LR__0593
08c5c     00 D6 0D F2 | 	cmp	local01, #0 wz
08c60     00 B2 05 A6 |  if_e	mov	result1, #0
08c64     10 00 90 AD |  if_e	jmp	#LR__0593
08c68     ED CC 01 F6 | 	mov	arg01, local03
08c6c     EC CE 01 F6 | 	mov	arg02, local02
08c70     EB D0 01 F6 | 	mov	arg03, local01
08c74     0C 00 B0 FD | 	call	#__system___fmtstr
08c78                 | LR__0593
08c78     AF F0 03 F6 | 	mov	ptra, fp
08c7c     BA 00 A0 FD | 	call	#popregs_
08c80                 | __system___basic_print_string_ret
08c80     2D 00 64 FD | 	ret
08c84                 | 
08c84                 | __system___fmtstr
08c84     0E 5A 05 F6 | 	mov	COUNT_, #14
08c88     B0 00 A0 FD | 	call	#pushregs_
08c8c     E6 D6 01 F6 | 	mov	local01, arg01
08c90     E7 D8 01 F6 | 	mov	local02, arg02
08c94     E8 DA 01 F6 | 	mov	local03, arg03
08c98     EC DC 01 F6 | 	mov	local04, local02
08c9c     FF DC 05 F5 | 	and	local04, #255
08ca0     ED CC 01 F6 | 	mov	arg01, local03
08ca4     00 DE 05 F6 | 	mov	local05, #0
08ca8     64 73 9F FE | 	loc	pa,	#(@LR__0595-@LR__0594)
08cac     93 00 A0 FD | 	call	#FCACHE_LOAD_
08cb0                 | LR__0594
08cb0     E6 E0 C9 FA | 	rdbyte	local06, arg01 wz
08cb4     01 DE 05 51 |  if_ne	add	local05, #1
08cb8     01 CC 05 51 |  if_ne	add	arg01, #1
08cbc     F0 FF 9F 5D |  if_ne	jmp	#LR__0594
08cc0                 | LR__0595
08cc0     EF B2 01 F6 | 	mov	result1, local05
08cc4     D9 E2 01 F6 | 	mov	local07, result1
08cc8     00 DC 0D F2 | 	cmp	local04, #0 wz
08ccc     04 00 90 AD |  if_e	jmp	#LR__0596
08cd0     EE E2 79 F3 | 	fles	local07, local04 wcz
08cd4                 | LR__0596
08cd4     EB CC 01 F6 | 	mov	arg01, local01
08cd8     EC CE 01 F6 | 	mov	arg02, local02
08cdc     F1 D0 01 F6 | 	mov	arg03, local07
08ce0     02 D2 05 F6 | 	mov	arg04, #2
08ce4     A0 0B B0 FD | 	call	#__system___fmtpad
08ce8     D9 E4 01 F6 | 	mov	local08, result1
08cec     00 E4 5D F2 | 	cmps	local08, #0 wcz
08cf0     F2 B2 01 C6 |  if_b	mov	result1, local08
08cf4     78 00 90 CD |  if_b	jmp	#LR__0599
08cf8     00 E6 05 F6 | 	mov	local09, #0
08cfc                 | LR__0597
08cfc     F1 E6 59 F2 | 	cmps	local09, local07 wcz
08d00     44 00 90 3D |  if_ae	jmp	#LR__0598
08d04     EB E8 01 F6 | 	mov	local10, local01
08d08     F4 EA 01 FB | 	rdlong	local11, local10
08d0c     04 E8 05 F1 | 	add	local10, #4
08d10     F4 EC 01 FB | 	rdlong	local12, local10
08d14     ED CC C1 FA | 	rdbyte	arg01, local03
08d18     D3 EE 01 F6 | 	mov	local13, objptr
08d1c     F5 A6 01 F6 | 	mov	objptr, local11
08d20     01 DA 05 F1 | 	add	local03, #1
08d24     2D EC 61 FD | 	call	local12
08d28     F7 A6 01 F6 | 	mov	objptr, local13
08d2c     D9 F0 01 F6 | 	mov	local14, result1
08d30     00 F0 5D F2 | 	cmps	local14, #0 wcz
08d34     F8 B2 01 C6 |  if_b	mov	result1, local14
08d38     34 00 90 CD |  if_b	jmp	#LR__0599
08d3c     F8 E4 01 F1 | 	add	local08, local14
08d40     01 E6 05 F1 | 	add	local09, #1
08d44     B4 FF 9F FD | 	jmp	#LR__0597
08d48                 | LR__0598
08d48     EB CC 01 F6 | 	mov	arg01, local01
08d4c     EC CE 01 F6 | 	mov	arg02, local02
08d50     F1 D0 01 F6 | 	mov	arg03, local07
08d54     01 D2 05 F6 | 	mov	arg04, #1
08d58     2C 0B B0 FD | 	call	#__system___fmtpad
08d5c     D9 F0 01 F6 | 	mov	local14, result1
08d60     00 F0 5D F2 | 	cmps	local14, #0 wcz
08d64     F8 B2 01 C6 |  if_b	mov	result1, local14
08d68     F8 E4 01 31 |  if_ae	add	local08, local14
08d6c     F2 B2 01 36 |  if_ae	mov	result1, local08
08d70                 | LR__0599
08d70     AF F0 03 F6 | 	mov	ptra, fp
08d74     BA 00 A0 FD | 	call	#popregs_
08d78                 | __system___fmtstr_ret
08d78     2D 00 64 FD | 	ret
08d7c                 | 
08d7c                 | __system___gc_ptrs
08d7c     04 5A 05 F6 | 	mov	COUNT_, #4
08d80     B0 00 A0 FD | 	call	#pushregs_
08d84     D0 D6 01 F6 | 	mov	local01, __heap_ptr
08d88     EB D8 01 F6 | 	mov	local02, local01
08d8c     07 00 00 FF 
08d90     F8 D9 05 F1 | 	add	local02, ##4088
08d94     EB DA 09 FB | 	rdlong	local03, local01 wz
08d98     74 00 90 5D |  if_ne	jmp	#LR__0600
08d9c     EC DC 01 F6 | 	mov	local04, local02
08da0     EB DC 81 F1 | 	sub	local04, local01
08da4     EB 02 58 FC | 	wrword	#1, local01
08da8     EB DA 01 F6 | 	mov	local03, local01
08dac     02 DA 05 F1 | 	add	local03, #2
08db0     36 00 80 FF 
08db4     ED 20 59 FC | 	wrword	##27792, local03
08db8     EB DA 01 F6 | 	mov	local03, local01
08dbc     04 DA 05 F1 | 	add	local03, #4
08dc0     ED 00 58 FC | 	wrword	#0, local03
08dc4     EB DA 01 F6 | 	mov	local03, local01
08dc8     06 DA 05 F1 | 	add	local03, #6
08dcc     ED 02 58 FC | 	wrword	#1, local03
08dd0     10 D6 05 F1 | 	add	local01, #16
08dd4     EE DA 51 F6 | 	abs	local03, local04 wc
08dd8     04 DA 45 F0 | 	shr	local03, #4
08ddc     ED DA 61 C6 |  if_b	neg	local03, local03
08de0     EB DA 51 FC | 	wrword	local03, local01
08de4     EB DA 01 F6 | 	mov	local03, local01
08de8     02 DA 05 F1 | 	add	local03, #2
08dec     36 00 80 FF 
08df0     ED 1E 59 FC | 	wrword	##27791, local03
08df4     EB DA 01 F6 | 	mov	local03, local01
08df8     04 DA 05 F1 | 	add	local03, #4
08dfc     ED 00 58 FC | 	wrword	#0, local03
08e00     EB DA 01 F6 | 	mov	local03, local01
08e04     06 DA 05 F1 | 	add	local03, #6
08e08     ED 00 58 FC | 	wrword	#0, local03
08e0c     10 D6 85 F1 | 	sub	local01, #16
08e10                 | LR__0600
08e10     EC B4 01 F6 | 	mov	result2, local02
08e14     EB B2 01 F6 | 	mov	result1, local01
08e18     AF F0 03 F6 | 	mov	ptra, fp
08e1c     BA 00 A0 FD | 	call	#popregs_
08e20                 | __system___gc_ptrs_ret
08e20     2D 00 64 FD | 	ret
08e24                 | 
08e24                 | __system___gc_nextBlockPtr
08e24     02 5A 05 F6 | 	mov	COUNT_, #2
08e28     B0 00 A0 FD | 	call	#pushregs_
08e2c     E6 D6 01 F6 | 	mov	local01, arg01
08e30     EB D8 E9 FA | 	rdword	local02, local01 wz
08e34     10 00 90 5D |  if_ne	jmp	#LR__0601
08e38     4D 00 00 FF 
08e3c     52 CD 05 F6 | 	mov	arg01, ##@LR__0675
08e40     00 02 B0 FD | 	call	#__system___gc_errmsg
08e44     0C 00 90 FD | 	jmp	#LR__0602
08e48                 | LR__0601
08e48     EB B2 01 F6 | 	mov	result1, local01
08e4c     04 D8 65 F0 | 	shl	local02, #4
08e50     EC B2 01 F1 | 	add	result1, local02
08e54                 | LR__0602
08e54     AF F0 03 F6 | 	mov	ptra, fp
08e58     BA 00 A0 FD | 	call	#popregs_
08e5c                 | __system___gc_nextBlockPtr_ret
08e5c     2D 00 64 FD | 	ret
08e60                 | 
08e60                 | __system___gc_tryalloc
08e60     0E 5A 05 F6 | 	mov	COUNT_, #14
08e64     B0 00 A0 FD | 	call	#pushregs_
08e68     E6 D6 01 F6 | 	mov	local01, arg01
08e6c     E7 D8 01 F6 | 	mov	local02, arg02
08e70     08 FF BF FD | 	call	#__system___gc_ptrs
08e74     D9 DA 01 F6 | 	mov	local03, result1
08e78     DA DC 01 F6 | 	mov	local04, result2
08e7c     ED DE 01 F6 | 	mov	local05, local03
08e80     00 E0 05 F6 | 	mov	local06, #0
08e84     CC 71 9F FE | 	loc	pa,	#(@LR__0604-@LR__0603)
08e88     93 00 A0 FD | 	call	#FCACHE_LOAD_
08e8c                 | LR__0603
08e8c     EF E2 01 F6 | 	mov	local07, local05
08e90     ED E4 01 F6 | 	mov	local08, local03
08e94     EF E6 01 F6 | 	mov	local09, local05
08e98     06 E6 05 F1 | 	add	local09, #6
08e9c     F3 E8 E1 FA | 	rdword	local10, local09
08ea0     F2 CC 01 F6 | 	mov	arg01, local08
08ea4     F4 CE 09 F6 | 	mov	arg02, local10 wz
08ea8     00 B2 05 A6 |  if_e	mov	result1, #0
08eac     04 CE 65 50 |  if_ne	shl	arg02, #4
08eb0     E7 CC 01 51 |  if_ne	add	arg01, arg02
08eb4     E6 B2 01 56 |  if_ne	mov	result1, arg01
08eb8     D9 EA 01 F6 | 	mov	local11, result1
08ebc     F5 DE 09 F6 | 	mov	local05, local11 wz
08ec0     EF E4 01 56 |  if_ne	mov	local08, local05
08ec4     F2 E0 E1 5A |  if_ne	rdword	local06, local08
08ec8     00 DE 0D F2 | 	cmp	local05, #0 wz
08ecc     10 00 90 AD |  if_e	jmp	#LR__0605
08ed0     EE DE 59 F2 | 	cmps	local05, local04 wcz
08ed4     08 00 90 3D |  if_ae	jmp	#LR__0605
08ed8     F0 D6 59 F2 | 	cmps	local01, local06 wcz
08edc     AC FF 9F 1D |  if_a	jmp	#LR__0603
08ee0                 | LR__0604
08ee0                 | LR__0605
08ee0     00 DE 0D F2 | 	cmp	local05, #0 wz
08ee4     EF B2 01 A6 |  if_e	mov	result1, local05
08ee8     4C 01 90 AD |  if_e	jmp	#LR__0608
08eec     EF E4 01 F6 | 	mov	local08, local05
08ef0     06 E4 05 F1 | 	add	local08, #6
08ef4     F2 EC E1 FA | 	rdword	local12, local08
08ef8     F0 D6 59 F2 | 	cmps	local01, local06 wcz
08efc     C8 00 90 3D |  if_ae	jmp	#LR__0607
08f00     EF D6 51 FC | 	wrword	local01, local05
08f04     EF CC 01 F6 | 	mov	arg01, local05
08f08     EB E6 01 F6 | 	mov	local09, local01
08f0c     04 E6 65 F0 | 	shl	local09, #4
08f10     F3 CC 01 F1 | 	add	arg01, local09
08f14     F0 E4 01 F6 | 	mov	local08, local06
08f18     EB E4 81 F1 | 	sub	local08, local01
08f1c     E6 E4 51 FC | 	wrword	local08, arg01
08f20     E6 E4 01 F6 | 	mov	local08, arg01
08f24     02 E4 05 F1 | 	add	local08, #2
08f28     36 00 80 FF 
08f2c     F2 1E 59 FC | 	wrword	##27791, local08
08f30     EF CE 09 F6 | 	mov	arg02, local05 wz
08f34     00 B2 05 A6 |  if_e	mov	result1, #0
08f38     ED CE 81 51 |  if_ne	sub	arg02, local03
08f3c     04 CE 45 50 |  if_ne	shr	arg02, #4
08f40     E7 B2 01 56 |  if_ne	mov	result1, arg02
08f44     E6 EA 01 F6 | 	mov	local11, arg01
08f48     04 EA 05 F1 | 	add	local11, #4
08f4c     F5 B2 51 FC | 	wrword	result1, local11
08f50     EF E4 01 F6 | 	mov	local08, local05
08f54     06 E4 05 F1 | 	add	local08, #6
08f58     E6 E6 01 F6 | 	mov	local09, arg01
08f5c     F2 E8 E1 FA | 	rdword	local10, local08
08f60     06 E6 05 F1 | 	add	local09, #6
08f64     F3 E8 51 FC | 	wrword	local10, local09
08f68     E6 EE 01 F6 | 	mov	local13, arg01
08f6c     F7 CE 09 F6 | 	mov	arg02, local13 wz
08f70     00 B2 05 A6 |  if_e	mov	result1, #0
08f74     ED CE 81 51 |  if_ne	sub	arg02, local03
08f78     04 CE 45 50 |  if_ne	shr	arg02, #4
08f7c     E7 B2 01 56 |  if_ne	mov	result1, arg02
08f80     D9 EC 01 F6 | 	mov	local12, result1
08f84     9C FE BF FD | 	call	#__system___gc_nextBlockPtr
08f88     D9 F0 09 F6 | 	mov	local14, result1 wz
08f8c     38 00 90 AD |  if_e	jmp	#LR__0606
08f90     EE F0 59 F2 | 	cmps	local14, local04 wcz
08f94     30 00 90 3D |  if_ae	jmp	#LR__0606
08f98     ED E4 01 F6 | 	mov	local08, local03
08f9c     F7 E6 01 F6 | 	mov	local09, local13
08fa0     F2 CC 01 F6 | 	mov	arg01, local08
08fa4     F3 CE 09 F6 | 	mov	arg02, local09 wz
08fa8     00 B2 05 A6 |  if_e	mov	result1, #0
08fac     E6 CE 81 51 |  if_ne	sub	arg02, arg01
08fb0     04 CE 45 50 |  if_ne	shr	arg02, #4
08fb4     E7 B2 01 56 |  if_ne	mov	result1, arg02
08fb8     D9 E8 01 F6 | 	mov	local10, result1
08fbc     F8 EA 01 F6 | 	mov	local11, local14
08fc0     04 EA 05 F1 | 	add	local11, #4
08fc4     F5 E8 51 FC | 	wrword	local10, local11
08fc8                 | LR__0606
08fc8                 | LR__0607
08fc8     06 E2 05 F1 | 	add	local07, #6
08fcc     F1 EC 51 FC | 	wrword	local12, local07
08fd0     36 00 00 FF 
08fd4     80 E4 05 F6 | 	mov	local08, ##27776
08fd8     EC E4 41 F5 | 	or	local08, local02
08fdc     00 B2 05 F6 | 	mov	result1, #0
08fe0     01 B2 61 FD | 	cogid	result1
08fe4     D9 E4 41 F5 | 	or	local08, result1
08fe8     EF E8 01 F6 | 	mov	local10, local05
08fec     02 E8 05 F1 | 	add	local10, #2
08ff0     F4 E4 51 FC | 	wrword	local08, local10
08ff4     ED E4 01 F6 | 	mov	local08, local03
08ff8     08 E4 05 F1 | 	add	local08, #8
08ffc     EF E6 01 F6 | 	mov	local09, local05
09000     F2 E8 E1 FA | 	rdword	local10, local08
09004     06 E6 05 F1 | 	add	local09, #6
09008     F3 E8 51 FC | 	wrword	local10, local09
0900c     EF CE 09 F6 | 	mov	arg02, local05 wz
09010     00 B2 05 A6 |  if_e	mov	result1, #0
09014     ED CE 81 51 |  if_ne	sub	arg02, local03
09018     04 CE 45 50 |  if_ne	shr	arg02, #4
0901c     E7 B2 01 56 |  if_ne	mov	result1, arg02
09020     08 DA 05 F1 | 	add	local03, #8
09024     ED B2 51 FC | 	wrword	result1, local03
09028     EF B2 01 F6 | 	mov	result1, local05
0902c     08 B2 05 F1 | 	add	result1, #8
09030     00 C0 31 FF 
09034     00 B2 45 F5 | 	or	result1, ##1669332992
09038                 | LR__0608
09038     AF F0 03 F6 | 	mov	ptra, fp
0903c     BA 00 A0 FD | 	call	#popregs_
09040                 | __system___gc_tryalloc_ret
09040     2D 00 64 FD | 	ret
09044                 | 
09044                 | __system___gc_errmsg
09044     02 5A 05 F6 | 	mov	COUNT_, #2
09048     B0 00 A0 FD | 	call	#pushregs_
0904c     E6 D6 01 F6 | 	mov	local01, arg01
09050                 | LR__0609
09050     EB D8 C9 FA | 	rdbyte	local02, local01 wz
09054     01 D6 05 F1 | 	add	local01, #1
09058     0C 00 90 AD |  if_e	jmp	#LR__0610
0905c     EC CC 01 F6 | 	mov	arg01, local02
09060     58 F8 BF FD | 	call	#__system___tx
09064     E8 FF 9F FD | 	jmp	#LR__0609
09068                 | LR__0610
09068     00 B2 05 F6 | 	mov	result1, #0
0906c     AF F0 03 F6 | 	mov	ptra, fp
09070     BA 00 A0 FD | 	call	#popregs_
09074                 | __system___gc_errmsg_ret
09074     2D 00 64 FD | 	ret
09078                 | 
09078                 | __system___gc_alloc_managed
09078     02 5A 05 F6 | 	mov	COUNT_, #2
0907c     B0 00 A0 FD | 	call	#pushregs_
09080     E6 D6 01 F6 | 	mov	local01, arg01
09084     00 CE 05 F6 | 	mov	arg02, #0
09088     30 00 B0 FD | 	call	#__system___gc_doalloc
0908c     D9 D8 09 F6 | 	mov	local02, result1 wz
09090     18 00 90 5D |  if_ne	jmp	#LR__0611
09094     00 D6 5D F2 | 	cmps	local01, #0 wcz
09098     10 00 90 ED |  if_be	jmp	#LR__0611
0909c     4D 00 00 FF 
090a0     6E CD 05 F6 | 	mov	arg01, ##@LR__0676
090a4     9C FF BF FD | 	call	#__system___gc_errmsg
090a8     04 00 90 FD | 	jmp	#LR__0612
090ac                 | LR__0611
090ac     EC B2 01 F6 | 	mov	result1, local02
090b0                 | LR__0612
090b0     AF F0 03 F6 | 	mov	ptra, fp
090b4     BA 00 A0 FD | 	call	#popregs_
090b8                 | __system___gc_alloc_managed_ret
090b8     2D 00 64 FD | 	ret
090bc                 | 
090bc                 | __system___gc_doalloc
090bc     06 5A 05 F6 | 	mov	COUNT_, #6
090c0     B0 00 A0 FD | 	call	#pushregs_
090c4     E6 D6 09 F6 | 	mov	local01, arg01 wz
090c8     E7 D8 01 F6 | 	mov	local02, arg02
090cc     00 B2 05 A6 |  if_e	mov	result1, #0
090d0     94 00 90 AD |  if_e	jmp	#LR__0620
090d4     17 D6 05 F1 | 	add	local01, #23
090d8     0F D6 25 F5 | 	andn	local01, #15
090dc     04 D6 45 F0 | 	shr	local01, #4
090e0     14 AA 05 F1 | 	add	ptr___system__dat__, #20
090e4     D5 CC 01 F6 | 	mov	arg01, ptr___system__dat__
090e8     14 AA 85 F1 | 	sub	ptr___system__dat__, #20
090ec     3C F7 BF FD | 	call	#__system___lockmem
090f0     EB CC 01 F6 | 	mov	arg01, local01
090f4     EC CE 01 F6 | 	mov	arg02, local02
090f8     64 FD BF FD | 	call	#__system___gc_tryalloc
090fc     D9 DA 09 F6 | 	mov	local03, result1 wz
09100     14 00 90 5D |  if_ne	jmp	#LR__0613
09104     8C 03 B0 FD | 	call	#__system___gc_docollect
09108     EB CC 01 F6 | 	mov	arg01, local01
0910c     EC CE 01 F6 | 	mov	arg02, local02
09110     4C FD BF FD | 	call	#__system___gc_tryalloc
09114     D9 DA 01 F6 | 	mov	local03, result1
09118                 | LR__0613
09118     14 AA 05 F1 | 	add	ptr___system__dat__, #20
0911c     D5 CC 01 F6 | 	mov	arg01, ptr___system__dat__
09120     14 AA 85 F1 | 	sub	ptr___system__dat__, #20
09124     E6 00 68 FC | 	wrlong	#0, arg01
09128     00 DA 0D F2 | 	cmp	local03, #0 wz
0912c     34 00 90 AD |  if_e	jmp	#LR__0619
09130     04 D6 65 F0 | 	shl	local01, #4
09134     08 D6 85 F1 | 	sub	local01, #8
09138     EB DC 51 F6 | 	abs	local04, local01 wc
0913c     02 DC 45 F0 | 	shr	local04, #2
09140     EE DC 61 C6 |  if_b	neg	local04, local04
09144     EE DE 09 F6 | 	mov	local05, local04 wz
09148     ED E0 01 F6 | 	mov	local06, local03
0914c     14 00 90 AD |  if_e	jmp	#LR__0618
09150     B8 6E 9F FE | 	loc	pa,	#(@LR__0616-@LR__0614)
09154     93 00 A0 FD | 	call	#FCACHE_LOAD_
09158                 | LR__0614
09158     EF 04 D8 FC | 	rep	@LR__0617, local05
0915c                 | LR__0615
0915c     F0 00 68 FC | 	wrlong	#0, local06
09160     04 E0 05 F1 | 	add	local06, #4
09164                 | LR__0616
09164                 | LR__0617
09164                 | LR__0618
09164                 | LR__0619
09164     ED B2 01 F6 | 	mov	result1, local03
09168                 | LR__0620
09168     AF F0 03 F6 | 	mov	ptra, fp
0916c     BA 00 A0 FD | 	call	#popregs_
09170                 | __system___gc_doalloc_ret
09170     2D 00 64 FD | 	ret
09174                 | 
09174                 | __system___gc_isvalidptr
09174     E8 B6 01 F6 | 	mov	_var01, arg03
09178     DB B8 01 F6 | 	mov	_var02, _var01
0917c     00 F8 7F FF 
09180     00 B8 05 F5 | 	and	_var02, ##-1048576
09184     00 C0 31 FF 
09188     00 B8 0D F2 | 	cmp	_var02, ##1669332992 wz
0918c     00 B2 05 56 |  if_ne	mov	result1, #0
09190     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
09194     08 B6 85 F1 | 	sub	_var01, #8
09198     00 F8 7F FF 
0919c     00 B6 25 F5 | 	andn	_var01, ##-1048576
091a0     E6 B6 59 F2 | 	cmps	_var01, arg01 wcz
091a4     08 00 90 CD |  if_b	jmp	#LR__0621
091a8     E7 B6 59 F2 | 	cmps	_var01, arg02 wcz
091ac     08 00 90 CD |  if_b	jmp	#LR__0622
091b0                 | LR__0621
091b0     00 B2 05 F6 | 	mov	result1, #0
091b4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
091b8                 | LR__0622
091b8     DB B8 01 F6 | 	mov	_var02, _var01
091bc     E6 B8 61 F5 | 	xor	_var02, arg01
091c0     0F B8 0D F5 | 	and	_var02, #15 wz
091c4     00 B2 05 56 |  if_ne	mov	result1, #0
091c8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
091cc     DB B8 01 F6 | 	mov	_var02, _var01
091d0     02 B8 05 F1 | 	add	_var02, #2
091d4     DC B8 E1 FA | 	rdword	_var02, _var02
091d8     7F 00 00 FF 
091dc     C0 B9 05 F5 | 	and	_var02, ##65472
091e0     36 00 00 FF 
091e4     80 B8 0D F2 | 	cmp	_var02, ##27776 wz
091e8     00 B2 05 56 |  if_ne	mov	result1, #0
091ec     DB B2 01 A6 |  if_e	mov	result1, _var01
091f0                 | __system___gc_isvalidptr_ret
091f0     2D 00 64 FD | 	ret
091f4                 | 
091f4                 | __system___gc_free
091f4     01 5A 05 F6 | 	mov	COUNT_, #1
091f8     B0 00 A0 FD | 	call	#pushregs_
091fc     E6 D6 01 F6 | 	mov	local01, arg01
09200     78 FB BF FD | 	call	#__system___gc_ptrs
09204     D9 CC 01 F6 | 	mov	arg01, result1
09208     DA CE 01 F6 | 	mov	arg02, result2
0920c     EB D0 01 F6 | 	mov	arg03, local01
09210     60 FF BF FD | 	call	#__system___gc_isvalidptr
09214     D9 D6 09 F6 | 	mov	local01, result1 wz
09218     28 00 90 AD |  if_e	jmp	#LR__0623
0921c     14 AA 05 F1 | 	add	ptr___system__dat__, #20
09220     D5 CC 01 F6 | 	mov	arg01, ptr___system__dat__
09224     14 AA 85 F1 | 	sub	ptr___system__dat__, #20
09228     00 F6 BF FD | 	call	#__system___lockmem
0922c     EB CC 01 F6 | 	mov	arg01, local01
09230     1C 00 B0 FD | 	call	#__system___gc_dofree
09234     14 AA 05 F1 | 	add	ptr___system__dat__, #20
09238     D5 CC 01 F6 | 	mov	arg01, ptr___system__dat__
0923c     14 AA 85 F1 | 	sub	ptr___system__dat__, #20
09240     E6 00 68 FC | 	wrlong	#0, arg01
09244                 | LR__0623
09244     AF F0 03 F6 | 	mov	ptra, fp
09248     BA 00 A0 FD | 	call	#popregs_
0924c                 | __system___gc_free_ret
0924c     2D 00 64 FD | 	ret
09250                 | 
09250                 | __system___gc_dofree
09250     0D 5A 05 F6 | 	mov	COUNT_, #13
09254     B0 00 A0 FD | 	call	#pushregs_
09258     E6 D6 01 F6 | 	mov	local01, arg01
0925c     1C FB BF FD | 	call	#__system___gc_ptrs
09260     D9 D8 01 F6 | 	mov	local02, result1
09264     DA DA 01 F6 | 	mov	local03, result2
09268     EB DC 01 F6 | 	mov	local04, local01
0926c     02 DC 05 F1 | 	add	local04, #2
09270     36 00 80 FF 
09274     EE 1E 59 FC | 	wrword	##27791, local04
09278     EB DE 01 F6 | 	mov	local05, local01
0927c     EB CC 01 F6 | 	mov	arg01, local01
09280     A0 FB BF FD | 	call	#__system___gc_nextBlockPtr
09284     D9 E0 01 F6 | 	mov	local06, result1
09288     C0 6D 9F FE | 	loc	pa,	#(@LR__0625-@LR__0624)
0928c     93 00 A0 FD | 	call	#FCACHE_LOAD_
09290                 | LR__0624
09290     04 DE 05 F1 | 	add	local05, #4
09294     EF CE E9 FA | 	rdword	arg02, local05 wz
09298     EC CC 01 F6 | 	mov	arg01, local02
0929c     00 B2 05 A6 |  if_e	mov	result1, #0
092a0     04 CE 65 50 |  if_ne	shl	arg02, #4
092a4     E7 CC 01 51 |  if_ne	add	arg01, arg02
092a8     E6 B2 01 56 |  if_ne	mov	result1, arg01
092ac     D9 DE 09 F6 | 	mov	local05, result1 wz
092b0     28 00 90 AD |  if_e	jmp	#LR__0626
092b4     EF CC 01 F6 | 	mov	arg01, local05
092b8     00 E2 05 F6 | 	mov	local07, #0
092bc     02 CC 05 F1 | 	add	arg01, #2
092c0     E6 E4 E1 FA | 	rdword	local08, arg01
092c4     36 00 00 FF 
092c8     8F E4 0D F2 | 	cmp	local08, ##27791 wz
092cc     01 E2 65 A6 |  if_e	neg	local07, #1
092d0     F1 B2 01 F6 | 	mov	result1, local07
092d4     D9 E6 09 F6 | 	mov	local09, result1 wz
092d8     B4 FF 9F AD |  if_e	jmp	#LR__0624
092dc                 | LR__0625
092dc                 | LR__0626
092dc     00 DE 0D F2 | 	cmp	local05, #0 wz
092e0     EC DE 01 A6 |  if_e	mov	local05, local02
092e4     EF DC 01 F6 | 	mov	local04, local05
092e8     06 DC 05 F1 | 	add	local04, #6
092ec     EB E6 01 F6 | 	mov	local09, local01
092f0     EE E8 E1 FA | 	rdword	local10, local04
092f4     06 E6 05 F1 | 	add	local09, #6
092f8     F3 E8 51 FC | 	wrword	local10, local09
092fc     EB CE 09 F6 | 	mov	arg02, local01 wz
09300     00 B2 05 A6 |  if_e	mov	result1, #0
09304     EC CE 81 51 |  if_ne	sub	arg02, local02
09308     04 CE 45 50 |  if_ne	shr	arg02, #4
0930c     E7 B2 01 56 |  if_ne	mov	result1, arg02
09310     D9 E8 01 F6 | 	mov	local10, result1
09314     EF EA 01 F6 | 	mov	local11, local05
09318     06 EA 05 F1 | 	add	local11, #6
0931c     F5 E8 51 FC | 	wrword	local10, local11
09320     EC DE 09 F2 | 	cmp	local05, local02 wz
09324     84 00 90 AD |  if_e	jmp	#LR__0629
09328     EF CC 01 F6 | 	mov	arg01, local05
0932c     F4 FA BF FD | 	call	#__system___gc_nextBlockPtr
09330     EB B2 09 F2 | 	cmp	result1, local01 wz
09334     74 00 90 5D |  if_ne	jmp	#LR__0628
09338     EF DC E1 FA | 	rdword	local04, local05
0933c     EB EA E1 FA | 	rdword	local11, local01
09340     F5 DC 01 F1 | 	add	local04, local11
09344     EF DC 51 FC | 	wrword	local04, local05
09348     EB DC 01 F6 | 	mov	local04, local01
0934c     02 DC 05 F1 | 	add	local04, #2
09350     EE 00 58 FC | 	wrword	#0, local04
09354     EB CC 01 F6 | 	mov	arg01, local01
09358     C8 FA BF FD | 	call	#__system___gc_nextBlockPtr
0935c     D9 E0 01 F6 | 	mov	local06, result1
09360     ED E0 59 F2 | 	cmps	local06, local03 wcz
09364     20 00 90 3D |  if_ae	jmp	#LR__0627
09368     EF CE 09 F6 | 	mov	arg02, local05 wz
0936c     00 B2 05 A6 |  if_e	mov	result1, #0
09370     EC CE 81 51 |  if_ne	sub	arg02, local02
09374     04 CE 45 50 |  if_ne	shr	arg02, #4
09378     E7 B2 01 56 |  if_ne	mov	result1, arg02
0937c     F0 EA 01 F6 | 	mov	local11, local06
09380     04 EA 05 F1 | 	add	local11, #4
09384     F5 B2 51 FC | 	wrword	result1, local11
09388                 | LR__0627
09388     EB DC 01 F6 | 	mov	local04, local01
0938c     06 DC 05 F1 | 	add	local04, #6
09390     EF E6 01 F6 | 	mov	local09, local05
09394     EE E8 E1 FA | 	rdword	local10, local04
09398     06 E6 05 F1 | 	add	local09, #6
0939c     F3 E8 51 FC | 	wrword	local10, local09
093a0     06 D6 05 F1 | 	add	local01, #6
093a4     EB 00 58 FC | 	wrword	#0, local01
093a8     EF D6 01 F6 | 	mov	local01, local05
093ac                 | LR__0628
093ac                 | LR__0629
093ac     EB CC 01 F6 | 	mov	arg01, local01
093b0     70 FA BF FD | 	call	#__system___gc_nextBlockPtr
093b4     D9 EC 09 F6 | 	mov	local12, result1 wz
093b8     C8 00 90 AD |  if_e	jmp	#LR__0631
093bc     ED EC 59 F2 | 	cmps	local12, local03 wcz
093c0     C0 00 90 3D |  if_ae	jmp	#LR__0631
093c4     F6 CC 01 F6 | 	mov	arg01, local12
093c8     00 E2 05 F6 | 	mov	local07, #0
093cc     02 CC 05 F1 | 	add	arg01, #2
093d0     E6 E4 E1 FA | 	rdword	local08, arg01
093d4     36 00 00 FF 
093d8     8F E4 0D F2 | 	cmp	local08, ##27791 wz
093dc     01 E2 65 A6 |  if_e	neg	local07, #1
093e0     F1 B2 09 F6 | 	mov	result1, local07 wz
093e4     9C 00 90 AD |  if_e	jmp	#LR__0631
093e8     EB DE 01 F6 | 	mov	local05, local01
093ec     EF DC E1 FA | 	rdword	local04, local05
093f0     F6 D6 01 F6 | 	mov	local01, local12
093f4     EB EA E1 FA | 	rdword	local11, local01
093f8     F5 DC 01 F1 | 	add	local04, local11
093fc     EF EE 01 F6 | 	mov	local13, local05
09400     F7 DC 51 FC | 	wrword	local04, local13
09404     EB DC 01 F6 | 	mov	local04, local01
09408     06 DC 05 F1 | 	add	local04, #6
0940c     EF E6 01 F6 | 	mov	local09, local05
09410     EE E8 E1 FA | 	rdword	local10, local04
09414     06 E6 05 F1 | 	add	local09, #6
09418     F3 E8 51 FC | 	wrword	local10, local09
0941c     EB DC 01 F6 | 	mov	local04, local01
09420     02 DC 05 F1 | 	add	local04, #2
09424     EE 54 59 FC | 	wrword	#170, local04
09428     EB DC 01 F6 | 	mov	local04, local01
0942c     06 DC 05 F1 | 	add	local04, #6
09430     EE 00 58 FC | 	wrword	#0, local04
09434     EB DC 01 F6 | 	mov	local04, local01
09438     EE CC 01 F6 | 	mov	arg01, local04
0943c     E4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
09440     D9 E6 01 F6 | 	mov	local09, result1
09444     F3 E0 09 F6 | 	mov	local06, local09 wz
09448     38 00 90 AD |  if_e	jmp	#LR__0630
0944c     ED E0 59 F2 | 	cmps	local06, local03 wcz
09450     30 00 90 3D |  if_ae	jmp	#LR__0630
09454     EC DC 01 F6 | 	mov	local04, local02
09458     EF E6 01 F6 | 	mov	local09, local05
0945c     EE CC 01 F6 | 	mov	arg01, local04
09460     F3 CE 09 F6 | 	mov	arg02, local09 wz
09464     00 B2 05 A6 |  if_e	mov	result1, #0
09468     E6 CE 81 51 |  if_ne	sub	arg02, arg01
0946c     04 CE 45 50 |  if_ne	shr	arg02, #4
09470     E7 B2 01 56 |  if_ne	mov	result1, arg02
09474     D9 E8 01 F6 | 	mov	local10, result1
09478     F0 EA 01 F6 | 	mov	local11, local06
0947c     04 EA 05 F1 | 	add	local11, #4
09480     F5 E8 51 FC | 	wrword	local10, local11
09484                 | LR__0630
09484                 | LR__0631
09484     F0 B2 01 F6 | 	mov	result1, local06
09488     AF F0 03 F6 | 	mov	ptra, fp
0948c     BA 00 A0 FD | 	call	#popregs_
09490                 | __system___gc_dofree_ret
09490     2D 00 64 FD | 	ret
09494                 | 
09494                 | __system___gc_docollect
09494     09 5A 05 F6 | 	mov	COUNT_, #9
09498     B0 00 A0 FD | 	call	#pushregs_
0949c     DC F8 BF FD | 	call	#__system___gc_ptrs
094a0     DA D6 01 F6 | 	mov	local01, result2
094a4     D9 D8 01 F6 | 	mov	local02, result1
094a8     EC CC 01 F6 | 	mov	arg01, local02
094ac     74 F9 BF FD | 	call	#__system___gc_nextBlockPtr
094b0     D9 DA 09 F6 | 	mov	local03, result1 wz
094b4     00 B2 05 F6 | 	mov	result1, #0
094b8     01 B2 61 FD | 	cogid	result1
094bc     D9 DC 01 F6 | 	mov	local04, result1
094c0     34 00 90 AD |  if_e	jmp	#LR__0633
094c4                 | LR__0632
094c4     EB DA 59 F2 | 	cmps	local03, local01 wcz
094c8     2C 00 90 3D |  if_ae	jmp	#LR__0633
094cc     ED DE 01 F6 | 	mov	local05, local03
094d0     02 DE 05 F1 | 	add	local05, #2
094d4     EF E0 E1 FA | 	rdword	local06, local05
094d8     20 E0 25 F5 | 	andn	local06, #32
094dc     ED E2 01 F6 | 	mov	local07, local03
094e0     02 E2 05 F1 | 	add	local07, #2
094e4     F1 E0 51 FC | 	wrword	local06, local07
094e8     ED CC 01 F6 | 	mov	arg01, local03
094ec     34 F9 BF FD | 	call	#__system___gc_nextBlockPtr
094f0     D9 DA 09 F6 | 	mov	local03, result1 wz
094f4     CC FF 9F 5D |  if_ne	jmp	#LR__0632
094f8                 | LR__0633
094f8     00 E0 05 F6 | 	mov	local06, #0
094fc     00 CC 05 F6 | 	mov	arg01, #0
09500     C0 F2 BF FD | 	call	#__system____topofstack
09504     D9 E2 01 F6 | 	mov	local07, result1
09508     F0 CC 01 F6 | 	mov	arg01, local06
0950c     F1 CE 01 F6 | 	mov	arg02, local07
09510     A0 00 B0 FD | 	call	#__system___gc_markhub
09514     34 01 B0 FD | 	call	#__system___gc_markcog
09518     EC CC 01 F6 | 	mov	arg01, local02
0951c     04 F9 BF FD | 	call	#__system___gc_nextBlockPtr
09520     D9 E4 09 F6 | 	mov	local08, result1 wz
09524     10 00 90 5D |  if_ne	jmp	#LR__0634
09528     4D 00 00 FF 
0952c     8B CD 05 F6 | 	mov	arg01, ##@LR__0677
09530     10 FB BF FD | 	call	#__system___gc_errmsg
09534     70 00 90 FD | 	jmp	#LR__0640
09538                 | LR__0634
09538                 | LR__0635
09538     F2 DA 01 F6 | 	mov	local03, local08
0953c     ED CC 01 F6 | 	mov	arg01, local03
09540     E0 F8 BF FD | 	call	#__system___gc_nextBlockPtr
09544     D9 E4 01 F6 | 	mov	local08, result1
09548     ED E0 01 F6 | 	mov	local06, local03
0954c     02 E0 05 F1 | 	add	local06, #2
09550     F0 E6 E1 FA | 	rdword	local09, local06
09554     20 E6 CD F7 | 	test	local09, #32 wz
09558     3C 00 90 5D |  if_ne	jmp	#LR__0638
0955c     F3 DE 01 F6 | 	mov	local05, local09
09560     10 DE 0D F5 | 	and	local05, #16 wz
09564     30 00 90 5D |  if_ne	jmp	#LR__0638
09568     F3 E0 01 F6 | 	mov	local06, local09
0956c     0F E0 05 F5 | 	and	local06, #15
09570     F0 E6 01 F6 | 	mov	local09, local06
09574     EE E6 09 F2 | 	cmp	local09, local04 wz
09578     08 00 90 AD |  if_e	jmp	#LR__0636
0957c     0E E6 0D F2 | 	cmp	local09, #14 wz
09580     14 00 90 5D |  if_ne	jmp	#LR__0637
09584                 | LR__0636
09584     ED E0 01 F6 | 	mov	local06, local03
09588     F0 CC 01 F6 | 	mov	arg01, local06
0958c     C0 FC BF FD | 	call	#__system___gc_dofree
09590     D9 DE 01 F6 | 	mov	local05, result1
09594     EF E4 01 F6 | 	mov	local08, local05
09598                 | LR__0637
09598                 | LR__0638
09598     00 E4 0D F2 | 	cmp	local08, #0 wz
0959c     08 00 90 AD |  if_e	jmp	#LR__0639
095a0     EB E4 59 F2 | 	cmps	local08, local01 wcz
095a4     90 FF 9F CD |  if_b	jmp	#LR__0635
095a8                 | LR__0639
095a8                 | LR__0640
095a8     AF F0 03 F6 | 	mov	ptra, fp
095ac     BA 00 A0 FD | 	call	#popregs_
095b0                 | __system___gc_docollect_ret
095b0     2D 00 64 FD | 	ret
095b4                 | 
095b4                 | __system___gc_markhub
095b4     0A 5A 05 F6 | 	mov	COUNT_, #10
095b8     B0 00 A0 FD | 	call	#pushregs_
095bc     E6 D6 01 F6 | 	mov	local01, arg01
095c0     E7 D8 01 F6 | 	mov	local02, arg02
095c4     B4 F7 BF FD | 	call	#__system___gc_ptrs
095c8     D9 DA 01 F6 | 	mov	local03, result1
095cc     DA DC 01 F6 | 	mov	local04, result2
095d0                 | LR__0641
095d0     EC D6 59 F2 | 	cmps	local01, local02 wcz
095d4     68 00 90 3D |  if_ae	jmp	#LR__0642
095d8     EB D0 01 FB | 	rdlong	arg03, local01
095dc     04 D6 05 F1 | 	add	local01, #4
095e0     ED CC 01 F6 | 	mov	arg01, local03
095e4     EE CE 01 F6 | 	mov	arg02, local04
095e8     88 FB BF FD | 	call	#__system___gc_isvalidptr
095ec     D9 DE 09 F6 | 	mov	local05, result1 wz
095f0     DC FF 9F AD |  if_e	jmp	#LR__0641
095f4     EF CC 01 F6 | 	mov	arg01, local05
095f8     00 E0 05 F6 | 	mov	local06, #0
095fc     02 CC 05 F1 | 	add	arg01, #2
09600     E6 E2 E1 FA | 	rdword	local07, arg01
09604     36 00 00 FF 
09608     8F E2 0D F2 | 	cmp	local07, ##27791 wz
0960c     01 E0 65 A6 |  if_e	neg	local06, #1
09610     F0 B2 01 F6 | 	mov	result1, local06
09614     D9 E4 09 F6 | 	mov	local08, result1 wz
09618     B4 FF 9F 5D |  if_ne	jmp	#LR__0641
0961c     EF E6 01 F6 | 	mov	local09, local05
09620     02 E6 05 F1 | 	add	local09, #2
09624     F3 E8 E1 FA | 	rdword	local10, local09
09628     0F E8 25 F5 | 	andn	local10, #15
0962c     2E E8 45 F5 | 	or	local10, #46
09630     EF E6 01 F6 | 	mov	local09, local05
09634     02 E6 05 F1 | 	add	local09, #2
09638     F3 E8 51 FC | 	wrword	local10, local09
0963c     90 FF 9F FD | 	jmp	#LR__0641
09640                 | LR__0642
09640     AF F0 03 F6 | 	mov	ptra, fp
09644     BA 00 A0 FD | 	call	#popregs_
09648                 | __system___gc_markhub_ret
09648     2D 00 64 FD | 	ret
0964c                 | 
0964c                 | __system___gc_markcog
0964c     06 5A 05 F6 | 	mov	COUNT_, #6
09650     B0 00 A0 FD | 	call	#pushregs_
09654     24 F7 BF FD | 	call	#__system___gc_ptrs
09658     D9 D6 01 F6 | 	mov	local01, result1
0965c     DA D8 01 F6 | 	mov	local02, result2
09660     00 DA 05 F6 | 	mov	local03, #0
09664                 | LR__0643
09664     F0 DD 05 F6 | 	mov	local04, #496
09668     ED DC 81 F1 | 	sub	local04, local03
0966c     F0 DD 05 F1 | 	add	local04, #496
09670                 | 	'.live	local04
09670     00 DC 95 F9 | 	alts	local04, #0
09674     EE DE 01 F6 | 	mov	local05, local04
09678     EB CC 01 F6 | 	mov	arg01, local01
0967c     EC CE 01 F6 | 	mov	arg02, local02
09680     EF D0 01 F6 | 	mov	arg03, local05
09684     EC FA BF FD | 	call	#__system___gc_isvalidptr
09688     D9 DE 09 F6 | 	mov	local05, result1 wz
0968c     18 00 90 AD |  if_e	jmp	#LR__0644
09690     EF E0 01 F6 | 	mov	local06, local05
09694     02 E0 05 F1 | 	add	local06, #2
09698     F0 DC E1 FA | 	rdword	local04, local06
0969c     20 DC 45 F5 | 	or	local04, #32
096a0     02 DE 05 F1 | 	add	local05, #2
096a4     EF DC 51 FC | 	wrword	local04, local05
096a8                 | LR__0644
096a8     01 DA 05 F1 | 	add	local03, #1
096ac     F0 DB 5D F2 | 	cmps	local03, #496 wcz
096b0     B0 FF 9F CD |  if_b	jmp	#LR__0643
096b4     AF F0 03 F6 | 	mov	ptra, fp
096b8     BA 00 A0 FD | 	call	#popregs_
096bc                 | __system___gc_markcog_ret
096bc     2D 00 64 FD | 	ret
096c0                 | 
096c0                 | __system____default_getc
096c0                 | __system____default_getc_ret
096c0     2D 00 64 FD | 	ret
096c4                 | 
096c4                 | __system____default_putc
096c4                 | __system____default_putc_ret
096c4     2D 00 64 FD | 	ret
096c8                 | 
096c8                 | __system____default_putc_terminal
096c8                 | __system____default_putc_terminal_ret
096c8     2D 00 64 FD | 	ret
096cc                 | 
096cc                 | __system____default_flush
096cc                 | __system____default_flush_ret
096cc     2D 00 64 FD | 	ret
096d0                 | 
096d0                 | __system____getftab
096d0     0A CC 1D F2 | 	cmp	arg01, #10 wcz
096d4     00 B2 05 36 |  if_ae	mov	result1, #0
096d8     24 00 90 3D |  if_ae	jmp	#__system____getftab_ret
096dc     E6 B2 01 F6 | 	mov	result1, arg01
096e0     01 B2 65 F0 | 	shl	result1, #1
096e4     E6 B2 01 F1 | 	add	result1, arg01
096e8     04 B2 65 F0 | 	shl	result1, #4
096ec     02 00 00 FF 
096f0     78 AA 05 F1 | 	add	ptr___system__dat__, ##1144
096f4     D5 B2 01 F1 | 	add	result1, ptr___system__dat__
096f8     02 00 00 FF 
096fc     78 AA 85 F1 | 	sub	ptr___system__dat__, ##1144
09700                 | __system____getftab_ret
09700     2D 00 64 FD | 	ret
09704                 | 
09704                 | __system__strncpy
09704     E6 B6 01 F6 | 	mov	_var01, arg01
09708                 | LR__0645
09708     01 D0 85 F1 | 	sub	arg03, #1
0970c     00 D0 5D F2 | 	cmps	arg03, #0 wcz
09710     18 00 90 CD |  if_b	jmp	#LR__0646
09714     E7 B8 C1 FA | 	rdbyte	_var02, arg02
09718     DB B8 41 FC | 	wrbyte	_var02, _var01
0971c     01 CE 05 F1 | 	add	arg02, #1
09720     DB BA C9 FA | 	rdbyte	_var03, _var01 wz
09724     01 B6 05 F1 | 	add	_var01, #1
09728     DC FF 9F 5D |  if_ne	jmp	#LR__0645
0972c                 | LR__0646
0972c     E4 68 9F FE | 	loc	pa,	#(@LR__0648-@LR__0647)
09730     93 00 A0 FD | 	call	#FCACHE_LOAD_
09734                 | LR__0647
09734     01 D0 85 F1 | 	sub	arg03, #1
09738     00 D0 5D F2 | 	cmps	arg03, #0 wcz
0973c     DB 00 48 3C |  if_ae	wrbyte	#0, _var01
09740     01 B6 05 31 |  if_ae	add	_var01, #1
09744     EC FF 9F 3D |  if_ae	jmp	#LR__0647
09748                 | LR__0648
09748     E6 B2 01 F6 | 	mov	result1, arg01
0974c                 | __system__strncpy_ret
0974c     2D 00 64 FD | 	ret
09750                 | 
09750                 | __system__strncat
09750     E6 B6 01 F6 | 	mov	_var01, arg01
09754     E7 B8 01 F6 | 	mov	_var02, arg02
09758     E8 BA 01 F6 | 	mov	_var03, arg03
0975c     DC BC 09 F6 | 	mov	_var04, _var02 wz
09760     68 00 90 AD |  if_e	jmp	#LR__0653
09764     00 BA 1D F2 | 	cmp	_var03, #0 wcz
09768     60 00 90 ED |  if_be	jmp	#LR__0653
0976c     DB BE 01 F6 | 	mov	_var05, _var01
09770     D8 68 9F FE | 	loc	pa,	#(@LR__0651-@LR__0649)
09774     93 00 A0 FD | 	call	#FCACHE_LOAD_
09778                 | LR__0649
09778     DF C0 C9 FA | 	rdbyte	_var06, _var05 wz
0977c     01 BE 05 51 |  if_ne	add	_var05, #1
09780     F4 FF 9F 5D |  if_ne	jmp	#LR__0649
09784     DD C2 01 F6 | 	mov	_var07, _var03
09788                 | LR__0650
09788     DE C4 01 F6 | 	mov	_var08, _var04
0978c     DE C6 01 F6 | 	mov	_var09, _var04
09790     01 C6 05 F1 | 	add	_var09, #1
09794     E3 BC 01 F6 | 	mov	_var04, _var09
09798     E2 C8 C1 FA | 	rdbyte	_var10, _var08
0979c     E4 C0 01 F6 | 	mov	_var06, _var10
097a0     07 C0 4D F7 | 	zerox	_var06, #7 wz
097a4     1C 00 90 AD |  if_e	jmp	#LR__0652
097a8     E1 CA 01 F6 | 	mov	_var11, _var07
097ac     01 CA 85 F1 | 	sub	_var11, #1
097b0     E5 C2 01 F6 | 	mov	_var07, _var11
097b4     00 C2 5D F2 | 	cmps	_var07, #0 wcz
097b8     DF C8 41 3C |  if_ae	wrbyte	_var10, _var05
097bc     01 BE 05 31 |  if_ae	add	_var05, #1
097c0     C4 FF 9F 3D |  if_ae	jmp	#LR__0650
097c4                 | LR__0651
097c4                 | LR__0652
097c4     00 C0 05 F6 | 	mov	_var06, #0
097c8     DF 00 48 FC | 	wrbyte	#0, _var05
097cc                 | LR__0653
097cc     DB B2 01 F6 | 	mov	result1, _var01
097d0                 | __system__strncat_ret
097d0     2D 00 64 FD | 	ret
097d4                 | 
097d4                 | __system__strncmp
097d4     E6 B6 09 F6 | 	mov	_var01, arg01 wz
097d8     E7 B8 01 F6 | 	mov	_var02, arg02
097dc     E8 BA 01 F6 | 	mov	_var03, arg03
097e0     14 00 90 5D |  if_ne	jmp	#LR__0654
097e4     00 B8 0D F2 | 	cmp	_var02, #0 wz
097e8     01 BC 65 56 |  if_ne	neg	_var04, #1
097ec     00 BC 05 A6 |  if_e	mov	_var04, #0
097f0     DE B2 01 F6 | 	mov	result1, _var04
097f4     8C 00 90 FD | 	jmp	#__system__strncmp_ret
097f8                 | LR__0654
097f8     00 B8 0D F2 | 	cmp	_var02, #0 wz
097fc     01 B2 05 A6 |  if_e	mov	result1, #1
09800     80 00 90 AD |  if_e	jmp	#__system__strncmp_ret
09804     DD BE 01 F6 | 	mov	_var05, _var03
09808     34 68 9F FE | 	loc	pa,	#(@LR__0656-@LR__0655)
0980c     93 00 A0 FD | 	call	#FCACHE_LOAD_
09810                 | LR__0655
09810     DB C0 C1 FA | 	rdbyte	_var06, _var01
09814     DC C2 01 F6 | 	mov	_var07, _var02
09818     DC C4 01 F6 | 	mov	_var08, _var02
0981c     01 C4 05 F1 | 	add	_var08, #1
09820     E2 B8 01 F6 | 	mov	_var02, _var08
09824     E1 C6 C1 FA | 	rdbyte	_var09, _var07
09828     DF BC 01 F6 | 	mov	_var04, _var05
0982c     01 BC 85 F1 | 	sub	_var04, #1
09830     DE BE 01 F6 | 	mov	_var05, _var04
09834     00 BE 5D F2 | 	cmps	_var05, #0 wcz
09838     01 B6 05 F1 | 	add	_var01, #1
0983c     10 00 90 CD |  if_b	jmp	#LR__0657
09840     00 C0 0D F2 | 	cmp	_var06, #0 wz
09844     08 00 90 AD |  if_e	jmp	#LR__0657
09848     E3 C0 09 F2 | 	cmp	_var06, _var09 wz
0984c     C0 FF 9F AD |  if_e	jmp	#LR__0655
09850                 | LR__0656
09850                 | LR__0657
09850     00 BE 5D F2 | 	cmps	_var05, #0 wcz
09854     00 B2 05 C6 |  if_b	mov	result1, #0
09858     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
0985c     E3 C0 09 F2 | 	cmp	_var06, _var09 wz
09860     00 B2 05 A6 |  if_e	mov	result1, #0
09864     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
09868     00 C0 0D F2 | 	cmp	_var06, #0 wz
0986c     01 B2 65 A6 |  if_e	neg	result1, #1
09870     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
09874     00 C6 0D F2 | 	cmp	_var09, #0 wz
09878     01 B2 05 A6 |  if_e	mov	result1, #1
0987c     E0 B2 01 56 |  if_ne	mov	result1, _var06
09880     E3 B2 81 51 |  if_ne	sub	result1, _var09
09884                 | __system__strncmp_ret
09884     2D 00 64 FD | 	ret
09888                 | 
09888                 | __system___fmtpad
09888     0C 5A 05 F6 | 	mov	COUNT_, #12
0988c     B0 00 A0 FD | 	call	#pushregs_
09890     E6 D6 01 F6 | 	mov	local01, arg01
09894     E7 D8 01 F6 | 	mov	local02, arg02
09898     E9 DA 01 F6 | 	mov	local03, arg04
0989c     EC DC E9 F8 | 	getbyte	local04, local02, #1
098a0     16 D8 45 F0 | 	shr	local02, #22
098a4     03 D8 0D F5 | 	and	local02, #3 wz
098a8     00 DE 05 F6 | 	mov	local05, #0
098ac     01 D8 05 A6 |  if_e	mov	local02, #1
098b0     ED D8 C9 F7 | 	test	local02, local03 wz
098b4     00 B2 05 A6 |  if_e	mov	result1, #0
098b8     84 00 90 AD |  if_e	jmp	#LR__0661
098bc     E8 DC 81 F1 | 	sub	local04, arg03
098c0     EE E0 01 F6 | 	mov	local06, local04
098c4     00 E0 5D F2 | 	cmps	local06, #0 wcz
098c8     00 B2 05 E6 |  if_be	mov	result1, #0
098cc     70 00 90 ED |  if_be	jmp	#LR__0661
098d0     03 D8 0D F2 | 	cmp	local02, #3 wz
098d4     18 00 90 5D |  if_ne	jmp	#LR__0658
098d8     01 DA 0D F2 | 	cmp	local03, #1 wz
098dc     6E E2 61 FD | 	wrz	local07
098e0     F1 E0 01 F1 | 	add	local06, local07
098e4     F0 E0 51 F6 | 	abs	local06, local06 wc
098e8     01 E0 45 F0 | 	shr	local06, #1
098ec     F0 E0 61 C6 |  if_b	neg	local06, local06
098f0                 | LR__0658
098f0     00 E4 05 F6 | 	mov	local08, #0
098f4                 | LR__0659
098f4     F0 E4 59 F2 | 	cmps	local08, local06 wcz
098f8     40 00 90 3D |  if_ae	jmp	#LR__0660
098fc     EB E6 01 F6 | 	mov	local09, local01
09900     F3 E2 01 FB | 	rdlong	local07, local09
09904     04 E6 05 F1 | 	add	local09, #4
09908     F3 E8 01 FB | 	rdlong	local10, local09
0990c     20 CC 05 F6 | 	mov	arg01, #32
09910     D3 EA 01 F6 | 	mov	local11, objptr
09914     F1 A6 01 F6 | 	mov	objptr, local07
09918     2D E8 61 FD | 	call	local10
0991c     F5 A6 01 F6 | 	mov	objptr, local11
09920     D9 EC 01 F6 | 	mov	local12, result1
09924     00 EC 5D F2 | 	cmps	local12, #0 wcz
09928     F6 B2 01 C6 |  if_b	mov	result1, local12
0992c     10 00 90 CD |  if_b	jmp	#LR__0661
09930     F6 DE 01 F1 | 	add	local05, local12
09934     01 E4 05 F1 | 	add	local08, #1
09938     B8 FF 9F FD | 	jmp	#LR__0659
0993c                 | LR__0660
0993c     EF B2 01 F6 | 	mov	result1, local05
09940                 | LR__0661
09940     AF F0 03 F6 | 	mov	ptra, fp
09944     BA 00 A0 FD | 	call	#popregs_
09948                 | __system___fmtpad_ret
09948     2D 00 64 FD | 	ret
0994c                 | 
0994c                 | __system___gettxfunc
0994c     03 5A 05 F6 | 	mov	COUNT_, #3
09950     B0 00 A0 FD | 	call	#pushregs_
09954     78 FD BF FD | 	call	#__system____getftab
09958     D9 D6 09 F6 | 	mov	local01, result1 wz
0995c     14 00 90 AD |  if_e	jmp	#LR__0662
09960     08 D6 05 F1 | 	add	local01, #8
09964     EB D8 01 FB | 	rdlong	local02, local01
09968     08 D6 85 F1 | 	sub	local01, #8
0996c     EC DA 09 F6 | 	mov	local03, local02 wz
09970     08 00 90 5D |  if_ne	jmp	#LR__0663
09974                 | LR__0662
09974     00 B2 05 F6 | 	mov	result1, #0
09978     0C 00 90 FD | 	jmp	#LR__0664
0997c                 | LR__0663
0997c     EB CC 01 F6 | 	mov	arg01, local01
09980     D4 CE 01 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
09984     64 EE BF FD | 	call	#__system___make_methodptr
09988                 | LR__0664
09988     AF F0 03 F6 | 	mov	ptra, fp
0998c     BA 00 A0 FD | 	call	#popregs_
09990                 | __system___gettxfunc_ret
09990     2D 00 64 FD | 	ret
09994                 | 
09994                 | __system___getiolock_0110
09994     03 5A 05 F6 | 	mov	COUNT_, #3
09998     B0 00 A0 FD | 	call	#pushregs_
0999c     30 FD BF FD | 	call	#__system____getftab
099a0     D9 D6 09 F6 | 	mov	local01, result1 wz
099a4     14 00 90 AD |  if_e	jmp	#LR__0665
099a8     08 D6 05 F1 | 	add	local01, #8
099ac     EB D8 01 FB | 	rdlong	local02, local01
099b0     08 D6 85 F1 | 	sub	local01, #8
099b4     EC DA 09 F6 | 	mov	local03, local02 wz
099b8     18 00 90 5D |  if_ne	jmp	#LR__0666
099bc                 | LR__0665
099bc     01 00 00 FF 
099c0     40 AA 05 F1 | 	add	ptr___system__dat__, ##576
099c4     D5 B2 01 F6 | 	mov	result1, ptr___system__dat__
099c8     01 00 00 FF 
099cc     40 AA 85 F1 | 	sub	ptr___system__dat__, ##576
099d0     08 00 90 FD | 	jmp	#LR__0667
099d4                 | LR__0666
099d4     0C D6 05 F1 | 	add	local01, #12
099d8     EB B2 01 F6 | 	mov	result1, local01
099dc                 | LR__0667
099dc     AF F0 03 F6 | 	mov	ptra, fp
099e0     BA 00 A0 FD | 	call	#popregs_
099e4                 | __system___getiolock_0110_ret
099e4     2D 00 64 FD | 	ret
099e8                 | 
099e8                 | __system___rxtxioctl_0537
099e8     02 5A 05 F6 | 	mov	COUNT_, #2
099ec     B0 00 A0 FD | 	call	#pushregs_
099f0     E7 D6 01 F6 | 	mov	local01, arg02
099f4     E8 D8 01 F6 | 	mov	local02, arg03
099f8     00 D7 0D F2 | 	cmp	local01, #256 wz
099fc     0C 00 90 AD |  if_e	jmp	#LR__0668
09a00     01 D7 0D F2 | 	cmp	local01, #257 wz
09a04     1C 00 90 AD |  if_e	jmp	#LR__0669
09a08     30 00 90 FD | 	jmp	#LR__0670
09a0c                 | LR__0668
09a0c     08 AA 05 F1 | 	add	ptr___system__dat__, #8
09a10     D5 B2 01 FB | 	rdlong	result1, ptr___system__dat__
09a14     08 AA 85 F1 | 	sub	ptr___system__dat__, #8
09a18     EC B2 61 FC | 	wrlong	result1, local02
09a1c     00 B2 05 F6 | 	mov	result1, #0
09a20     28 00 90 FD | 	jmp	#LR__0671
09a24                 | LR__0669
09a24     EC CC 01 FB | 	rdlong	arg01, local02
09a28     08 AA 05 F1 | 	add	ptr___system__dat__, #8
09a2c     D5 CC 61 FC | 	wrlong	arg01, ptr___system__dat__
09a30     08 AA 85 F1 | 	sub	ptr___system__dat__, #8
09a34     00 B2 05 F6 | 	mov	result1, #0
09a38     10 00 90 FD | 	jmp	#LR__0671
09a3c                 | LR__0670
09a3c     1C AA 05 F1 | 	add	ptr___system__dat__, #28
09a40     D5 14 68 FC | 	wrlong	#10, ptr___system__dat__
09a44     1C AA 85 F1 | 	sub	ptr___system__dat__, #28
09a48     01 B2 65 F6 | 	neg	result1, #1
09a4c                 | LR__0671
09a4c     AF F0 03 F6 | 	mov	ptra, fp
09a50     BA 00 A0 FD | 	call	#popregs_
09a54                 | __system___rxtxioctl_0537_ret
09a54     2D 00 64 FD | 	ret
09a58                 | 
09a58                 | __system____dummy_flush_0538
09a58     00 B2 05 F6 | 	mov	result1, #0
09a5c                 | __system____dummy_flush_0538_ret
09a5c     2D 00 64 FD | 	ret
09a60                 | 
09a60                 | __struct__s_vfs_file_t_putchar
09a60     04 5A 05 F6 | 	mov	COUNT_, #4
09a64     B0 00 A0 FD | 	call	#pushregs_
09a68     18 A6 05 F1 | 	add	objptr, #24
09a6c     D3 D6 09 FB | 	rdlong	local01, objptr wz
09a70     18 A6 85 F1 | 	sub	objptr, #24
09a74     00 B2 05 A6 |  if_e	mov	result1, #0
09a78     3C 00 90 AD |  if_e	jmp	#LR__0672
09a7c     18 A6 05 F1 | 	add	objptr, #24
09a80     D3 D6 01 FB | 	rdlong	local01, objptr
09a84     18 A6 85 F1 | 	sub	objptr, #24
09a88     EB D8 01 FB | 	rdlong	local02, local01
09a8c     04 D6 05 F1 | 	add	local01, #4
09a90     EB DA 01 FB | 	rdlong	local03, local01
09a94     D3 CE 01 F6 | 	mov	arg02, objptr
09a98     D3 DC 01 F6 | 	mov	local04, objptr
09a9c     EC A6 01 F6 | 	mov	objptr, local02
09aa0     2D DA 61 FD | 	call	local03
09aa4     EE A6 01 F6 | 	mov	objptr, local04
09aa8     00 B2 5D F2 | 	cmps	result1, #0 wcz
09aac     00 D6 05 C6 |  if_b	mov	local01, #0
09ab0     01 D6 05 36 |  if_ae	mov	local01, #1
09ab4     EB B2 01 F6 | 	mov	result1, local01
09ab8                 | LR__0672
09ab8     AF F0 03 F6 | 	mov	ptra, fp
09abc     BA 00 A0 FD | 	call	#popregs_
09ac0                 | __struct__s_vfs_file_t_putchar_ret
09ac0     2D 00 64 FD | 	ret
09ac4                 | 
09ac4                 | __struct__s_vfs_file_t_getchar
09ac4     04 5A 05 F6 | 	mov	COUNT_, #4
09ac8     B0 00 A0 FD | 	call	#pushregs_
09acc     1C A6 05 F1 | 	add	objptr, #28
09ad0     D3 D6 09 FB | 	rdlong	local01, objptr wz
09ad4     1C A6 85 F1 | 	sub	objptr, #28
09ad8     01 B2 65 A6 |  if_e	neg	result1, #1
09adc     2C 00 90 AD |  if_e	jmp	#LR__0673
09ae0                 | '         return getcf(__this);
09ae0     1C A6 05 F1 | 	add	objptr, #28
09ae4     D3 D6 01 FB | 	rdlong	local01, objptr
09ae8     1C A6 85 F1 | 	sub	objptr, #28
09aec     EB D8 01 FB | 	rdlong	local02, local01
09af0     04 D6 05 F1 | 	add	local01, #4
09af4     EB DA 01 FB | 	rdlong	local03, local01
09af8     D3 CC 01 F6 | 	mov	arg01, objptr
09afc     D3 DC 01 F6 | 	mov	local04, objptr
09b00     EC A6 01 F6 | 	mov	objptr, local02
09b04     2D DA 61 FD | 	call	local03
09b08     EE A6 01 F6 | 	mov	objptr, local04
09b0c                 | LR__0673
09b0c     AF F0 03 F6 | 	mov	ptra, fp
09b10     BA 00 A0 FD | 	call	#popregs_
09b14                 | __struct__s_vfs_file_t_getchar_ret
09b14     2D 00 64 FD | 	ret
09b18                 | 
09b18                 | __struct___bas_wrap_sender_tx
09b18     04 5A 05 F6 | 	mov	COUNT_, #4
09b1c     B0 00 A0 FD | 	call	#pushregs_
09b20     D3 D6 01 FB | 	rdlong	local01, objptr
09b24     EB D8 01 FB | 	rdlong	local02, local01
09b28     04 D6 05 F1 | 	add	local01, #4
09b2c     EB DA 01 FB | 	rdlong	local03, local01
09b30     D3 DC 01 F6 | 	mov	local04, objptr
09b34     EC A6 01 F6 | 	mov	objptr, local02
09b38     2D DA 61 FD | 	call	local03
09b3c     EE A6 01 F6 | 	mov	objptr, local04
09b40     01 B2 05 F6 | 	mov	result1, #1
09b44     AF F0 03 F6 | 	mov	ptra, fp
09b48     BA 00 A0 FD | 	call	#popregs_
09b4c                 | __struct___bas_wrap_sender_tx_ret
09b4c     2D 00 64 FD | 	ret
09b50                 | 
09b50                 | LR__0674
09b50     2F          | 	byte	"/"
09b51     00          | 	byte	0
09b52                 | LR__0675
09b52     20 21 21 21 
09b56     20 63 6F 72 
09b5a     72 75 70 74 
09b5e     65 64 20 68 
09b62     65 61 70 3F 
09b66     3F 3F 20 21 
09b6a     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
09b6d     00          | 	byte	0
09b6e                 | LR__0676
09b6e     20 21 21 21 
09b72     20 6F 75 74 
09b76     20 6F 66 20 
09b7a     68 65 61 70 
09b7e     20 6D 65 6D 
09b82     6F 72 79 20 
09b86     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
09b8a     00          | 	byte	0
09b8b                 | LR__0677
09b8b     20 21 21 21 
09b8f     20 63 6F 72 
09b93     72 75 70 74 
09b97     65 64 20 68 
09b9b     65 61 70 20 
09b9f     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
09ba3     00          | 	byte	0
09ba4                 | LR__0678
09ba4     22 2A 2B 2C 
09ba8     3A 3B 3C 3D 
09bac     3E 3F 5B 5D 
09bb0     7C 7F       | 	byte	34,"*+,:;<=>?[]|",127
09bb2     00          | 	byte	0
09bb3                 | LR__0679
09bb3     EB 76 90 45 
09bb7     58 46 41 54 
09bbb     20 20 20    | 	byte	-21,"v",-112,"EXFAT   "
09bbe     00          | 	byte	0
09bbf                 | LR__0680
09bbf     46 41 54    | 	byte	"FAT"
09bc2     00          | 	byte	0
09bc3                 | LR__0681
09bc3     46 41 54 33 
09bc7     32          | 	byte	"FAT32"
09bc8     00          | 	byte	0
09bc9                 | LR__0682
09bc9     2F 73 64    | 	byte	"/sd"
09bcc     00          | 	byte	0
09bcd                 | LR__0683
09bcd     2F 73 64 2F 
09bd1     6D 6F 64    | 	byte	"/sd/mod"
09bd4     00          | 	byte	0
09bd5                 | LR__0684
09bd5     63 75 72 72 
09bd9     65 6E 74 20 
09bdd     64 69 72 65 
09be1     63 74 6F 72 
09be5     79 20 69 73 
09be9     3A 20       | 	byte	"current directory is: "
09beb     00          | 	byte	0
09bec                 | LR__0685
09bec     4C 69 73 74 
09bf0     69 6E 67 3A | 	byte	"Listing:"
09bf4     00          | 	byte	0
09bf5                 | LR__0686
09bf5     2A 2E 2A    | 	byte	"*.*"
09bf8     00          | 	byte	0
09bf9                 | LR__0687
09bf9                 | 	byte	
09bf9     00          | 	byte	0
09bfa                 | LR__0688
09bfa                 | 	byte	
09bfa     00          | 	byte	0
09bfb                 | LR__0689
09bfb     64 6F 6E 65 | 	byte	"done"
09bff     00          | 	byte	0
09c00                 | LR__0690
09c00     2E          | 	byte	"."
09c01     00          | 	byte	0
09c02                 | LR__0691
09c02     00          | 	byte	0
09c03     00          | 	byte	0
09c04                 | LR__0692
09c04     00          | 	byte	0
09c05     00          | 	byte	0
09c06                 | LR__0693
09c06     00          | 	byte	0
09c07     00          | 	byte	0
09c08                 | LR__0694
09c08     2F          | 	byte	"/"
09c09     00          | 	byte	0
09c0a                 | LR__0695
09c0a     00          | 	byte	0
09c0b     00          | 	byte	0
09c0c                 | LR__0696
09c0c     2F          | 	byte	"/"
09c0d     00          | 	byte	0
09c0e     00 00       | 	alignl
09c10                 | _dat_
09c10     00 00 00 00 
09c14     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
09c18     1C 9C 00 00 | 	long	@@@_dat_ + 12
09c1c     00 00 00 00 
      ...             
0a074     00 00 00 00 
0a078     00 00 00 00 | 	byte	$00[1120]
0a07c                 | 	alignl
0a07c                 | _ff_cc_dat_
0a07c     00 00 00 00 
0a080     00 00       | 	byte	$00[6]
0a082     43 55 45 41 
0a086     41 41 41 43 
0a08a     45 45 45 49 
0a08e     49 49 41 41 | 	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
0a092     45 92 92 4F 
0a096     4F 4F 55 55 
0a09a     59 4F 55 4F 
0a09e     9C 4F 9E 9F | 	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
0a0a2     41 49 4F 55 
0a0a6     A5 A5 A6 A7 
0a0aa     A8 A9 AA AB 
0a0ae     AC AD AE AF | 	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
0a0b2     B0 B1 B2 B3 
0a0b6     B4 41 41 41 
0a0ba     B8 B9 BA BB 
0a0be     BC BD BE BF | 	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
0a0c2     C0 C1 C2 C3 
0a0c6     C4 C5 41 41 
0a0ca     C8 C9 CA CB 
0a0ce     CC CD CE CF | 	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
0a0d2     D1 D1 45 45 
0a0d6     45 49 49 49 
0a0da     49 D9 DA DB 
0a0de     DC DD 49 DF | 	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
0a0e2     4F E1 4F 4F 
0a0e6     4F 4F E6 E8 
0a0ea     E8 55 55 55 
0a0ee     59 59 EE EF | 	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
0a0f2     F0 F1 F2 F3 
0a0f6     F4 F5 F6 F7 
0a0fa     F8 F9 FA FB 
0a0fe     FC FD FE FF | 	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
0a102     01 00 04 00 
0a106     10 00 40 00 
0a10a     00 01 00 02 
0a10e     00 00 01 00 | 	byte	$01, $00, $04, $00, $10, $00, $40, $00, $00, $01, $00, $02, $00, $00, $01, $00
0a112     02 00 04 00 
0a116     08 00 10 00 
0a11a     20 00 00 00 
0a11e     00 00 07 00 | 	byte	$02, $00, $04, $00, $08, $00, $10, $00, $20, $00, $00, $00, $00, $00, $07, $00
0a122     00 00 00 00 
0a126     00 00 00 00 
0a12a     00 00 00 00 
0a12e     00 00 00 00 
0a132     00 00 00 00 
0a136     00 00 00 00 
0a13a     00 00       | 	byte	$00[26]
0a13c     7C A1 00 00 | 	long	@@@_ff_cc_dat_ + 256
0a140     84 A1 00 00 | 	long	@@@_ff_cc_dat_ + 264
0a144     8C A1 00 00 | 	long	@@@_ff_cc_dat_ + 272
0a148     94 A1 00 00 | 	long	@@@_ff_cc_dat_ + 280
0a14c     9C A1 00 00 | 	long	@@@_ff_cc_dat_ + 288
0a150     A4 A1 00 00 | 	long	@@@_ff_cc_dat_ + 296
0a154     AC A1 00 00 | 	long	@@@_ff_cc_dat_ + 304
0a158     00 00 00 00 | 	byte	$00, $00, $00, $00
0a15c     B4 A1 00 00 | 	long	@@@_ff_cc_dat_ + 312
0a160     BC A1 00 00 | 	long	@@@_ff_cc_dat_ + 320
0a164     C4 A1 00 00 | 	long	@@@_ff_cc_dat_ + 328
0a168     CC A1 00 00 | 	long	@@@_ff_cc_dat_ + 336
0a16c     D4 A1 00 00 | 	long	@@@_ff_cc_dat_ + 344
0a170     DC A1 00 00 | 	long	@@@_ff_cc_dat_ + 352
0a174     E4 A1 00 00 | 	long	@@@_ff_cc_dat_ + 360
0a178     EC A1 00 00 | 	long	@@@_ff_cc_dat_ + 368
0a17c     00 00 00 00 | 	byte	$00, $00, $00, $00
0a180     1C 7C 00 00 | 	long	@@@_ff_cc_v_open_0468
0a184     00 00 00 00 | 	byte	$00, $00, $00, $00
0a188     8C 74 00 00 | 	long	@@@_ff_cc_v_creat_0422
0a18c     00 00 00 00 | 	byte	$00, $00, $00, $00
0a190     2C 75 00 00 | 	long	@@@_ff_cc_v_close_0425
0a194     00 00 00 00 | 	byte	$00, $00, $00, $00
0a198     24 79 00 00 | 	long	@@@_ff_cc_v_read_0450
0a19c     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1a0     44 7A 00 00 | 	long	@@@_ff_cc_v_write_0454
0a1a4     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1a8     30 7B 00 00 | 	long	@@@_ff_cc_v_lseek_0458
0a1ac     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1b0     C8 7B 00 00 | 	long	@@@_ff_cc_v_ioctl
0a1b4     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1b8     70 75 00 00 | 	long	@@@_ff_cc_v_opendir_0428
0a1bc     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1c0     E8 75 00 00 | 	long	@@@_ff_cc_v_closedir_0431
0a1c4     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1c8     2C 76 00 00 | 	long	@@@_ff_cc_v_readdir_0434
0a1cc     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1d0     20 77 00 00 | 	long	@@@_ff_cc_v_stat_0446
0a1d4     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1d8     DC 7B 00 00 | 	long	@@@_ff_cc_v_mkdir
0a1dc     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1e0     FC 7B 00 00 | 	long	@@@_ff_cc_v_rmdir_0462
0a1e4     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1e8     EC 7B 00 00 | 	long	@@@_ff_cc_v_remove
0a1ec     00 00 00 00 | 	byte	$00, $00, $00, $00
0a1f0     0C 7C 00 00 | 	long	@@@_ff_cc_v_rename_0464
0a1f4     00 00 00 00 
0a1f8     00 00 00 00 
0a1fc     00 00 00 00 
0a200     00 00 00 00 | 	byte	$00[16]
0a204     01 00 00 00 | 	byte	$01, $00, $00, $00
0a208                 | 	alignl
0a208                 | __system__dat_
0a208     00 00 00 00 
0a20c     00 00 00 00 | 	byte	$00[8]
0a210     03 00 00 00 
0a214     00 00 00 00 
0a218     00 00 00 00 
0a21c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a220     00 00 00 00 
      ...             
0a680     00 00 00 00 
0a684     00 00 00 00 | 	byte	$00[1128]
0a688     05 00 00 00 
0a68c     00 00 00 00 
0a690     00 00 00 00 
0a694     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a698     60 A8 00 00 | 	long	@@@__system__dat_ + 1624
0a69c     68 A8 00 00 | 	long	@@@__system__dat_ + 1632
0a6a0     00 00 00 00 | 	byte	$00, $00, $00, $00
0a6a4     70 A8 00 00 | 	long	@@@__system__dat_ + 1640
0a6a8     78 A8 00 00 | 	long	@@@__system__dat_ + 1648
0a6ac     00 00 00 00 
0a6b0     00 00 00 00 | 	byte	$00[8]
0a6b4     01 00 00 00 
0a6b8     06 00 00 00 
0a6bc     00 00 00 00 
0a6c0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6c4     00 00 00 00 | 	byte	$00, $00, $00, $00
0a6c8     80 A8 00 00 | 	long	@@@__system__dat_ + 1656
0a6cc     88 A8 00 00 | 	long	@@@__system__dat_ + 1664
0a6d0     00 00 00 00 | 	byte	$00, $00, $00, $00
0a6d4     90 A8 00 00 | 	long	@@@__system__dat_ + 1672
0a6d8     98 A8 00 00 | 	long	@@@__system__dat_ + 1680
0a6dc     00 00 00 00 
0a6e0     00 00 00 00 | 	byte	$00[8]
0a6e4     01 00 00 00 
0a6e8     06 00 00 00 
0a6ec     00 00 00 00 
0a6f0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6f4     00 00 00 00 | 	byte	$00, $00, $00, $00
0a6f8     A0 A8 00 00 | 	long	@@@__system__dat_ + 1688
0a6fc     A8 A8 00 00 | 	long	@@@__system__dat_ + 1696
0a700     00 00 00 00 | 	byte	$00, $00, $00, $00
0a704     B0 A8 00 00 | 	long	@@@__system__dat_ + 1704
0a708     B8 A8 00 00 | 	long	@@@__system__dat_ + 1712
0a70c     00 00 00 00 
      ...             
0a85c     00 00 00 00 
0a860     00 00 00 00 | 	byte	$00[344]
0a864     BC 88 00 00 | 	long	@@@__system___tx
0a868     00 00 00 00 | 	byte	$00, $00, $00, $00
0a86c     04 89 00 00 | 	long	@@@__system___rx
0a870     00 00 00 00 | 	byte	$00, $00, $00, $00
0a874     E8 99 00 00 | 	long	@@@__system___rxtxioctl_0537
0a878     00 00 00 00 | 	byte	$00, $00, $00, $00
0a87c     58 9A 00 00 | 	long	@@@__system____dummy_flush_0538
0a880     00 00 00 00 | 	byte	$00, $00, $00, $00
0a884     BC 88 00 00 | 	long	@@@__system___tx
0a888     00 00 00 00 | 	byte	$00, $00, $00, $00
0a88c     04 89 00 00 | 	long	@@@__system___rx
0a890     00 00 00 00 | 	byte	$00, $00, $00, $00
0a894     E8 99 00 00 | 	long	@@@__system___rxtxioctl_0537
0a898     00 00 00 00 | 	byte	$00, $00, $00, $00
0a89c     58 9A 00 00 | 	long	@@@__system____dummy_flush_0538
0a8a0     00 00 00 00 | 	byte	$00, $00, $00, $00
0a8a4     BC 88 00 00 | 	long	@@@__system___tx
0a8a8     00 00 00 00 | 	byte	$00, $00, $00, $00
0a8ac     04 89 00 00 | 	long	@@@__system___rx
0a8b0     00 00 00 00 | 	byte	$00, $00, $00, $00
0a8b4     E8 99 00 00 | 	long	@@@__system___rxtxioctl_0537
0a8b8     00 00 00 00 | 	byte	$00, $00, $00, $00
0a8bc     58 9A 00 00 | 	long	@@@__system____dummy_flush_0538
0a8c0                 | __heap_base
0a8c0     00 00 00 00 
      ...             
0b8c0     00 00 00 00 
0b8c4     00 00 00 00 | 	long	0[1026]
0b8c8                 | objmem
0b8c8     00 00 00 00 | 	long	0[1]
0b8cc                 | stackspace
0b8cc     00 00 00 00 | 	long	0[1]
0b8d0 0db             | 	org	COG_BSS_START
0b8d0 0db             | _var01
0b8d0 0db             | 	res	1
0b8d0 0dc             | _var02
0b8d0 0dc             | 	res	1
0b8d0 0dd             | _var03
0b8d0 0dd             | 	res	1
0b8d0 0de             | _var04
0b8d0 0de             | 	res	1
0b8d0 0df             | _var05
0b8d0 0df             | 	res	1
0b8d0 0e0             | _var06
0b8d0 0e0             | 	res	1
0b8d0 0e1             | _var07
0b8d0 0e1             | 	res	1
0b8d0 0e2             | _var08
0b8d0 0e2             | 	res	1
0b8d0 0e3             | _var09
0b8d0 0e3             | 	res	1
0b8d0 0e4             | _var10
0b8d0 0e4             | 	res	1
0b8d0 0e5             | _var11
0b8d0 0e5             | 	res	1
0b8d0 0e6             | arg01
0b8d0 0e6             | 	res	1
0b8d0 0e7             | arg02
0b8d0 0e7             | 	res	1
0b8d0 0e8             | arg03
0b8d0 0e8             | 	res	1
0b8d0 0e9             | arg04
0b8d0 0e9             | 	res	1
0b8d0 0ea             | arg05
0b8d0 0ea             | 	res	1
0b8d0 0eb             | local01
0b8d0 0eb             | 	res	1
0b8d0 0ec             | local02
0b8d0 0ec             | 	res	1
0b8d0 0ed             | local03
0b8d0 0ed             | 	res	1
0b8d0 0ee             | local04
0b8d0 0ee             | 	res	1
0b8d0 0ef             | local05
0b8d0 0ef             | 	res	1
0b8d0 0f0             | local06
0b8d0 0f0             | 	res	1
0b8d0 0f1             | local07
0b8d0 0f1             | 	res	1
0b8d0 0f2             | local08
0b8d0 0f2             | 	res	1
0b8d0 0f3             | local09
0b8d0 0f3             | 	res	1
0b8d0 0f4             | local10
0b8d0 0f4             | 	res	1
0b8d0 0f5             | local11
0b8d0 0f5             | 	res	1
0b8d0 0f6             | local12
0b8d0 0f6             | 	res	1
0b8d0 0f7             | local13
0b8d0 0f7             | 	res	1
0b8d0 0f8             | local14
0b8d0 0f8             | 	res	1
0b8d0 0f9             | local15
0b8d0 0f9             | 	res	1
0b8d0 0fa             | local16
0b8d0 0fa             | 	res	1
0b8d0 0fb             | local17
0b8d0 0fb             | 	res	1
0b8d0 0fc             | local18
0b8d0 0fc             | 	res	1
0b8d0 0fd             | local19
0b8d0 0fd             | 	res	1
0b8d0 0fe             | local20
0b8d0 0fe             | 	res	1
0b8d0 0ff             | local21
0b8d0 0ff             | 	res	1
0b8d0 100             | local22
0b8d0 100             | 	res	1
0b8d0 101             | local23
0b8d0 101             | 	res	1
0b8d0 102             | local24
0b8d0 102             | 	res	1
0b8d0 103             | local25
0b8d0 103             | 	res	1
0b8d0 104             | local26
0b8d0 104             | 	res	1
0b8d0 105             | local27
0b8d0 105             | 	res	1
0b8d0 106             | local28
0b8d0 106             | 	res	1
0b8d0 107             | local29
0b8d0 107             | 	res	1
0b8d0 108             | local30
0b8d0 108             | 	res	1
0b8d0 109             | local31
0b8d0 109             | 	res	1
0b8d0 10a             | local32
0b8d0 10a             | 	res	1
0b8d0 10b             | local33
0b8d0 10b             | 	res	1
0b8d0 10c             | local34
0b8d0 10c             | 	res	1
0b8d0 10d             | local35
0b8d0 10d             | 	res	1
0b8d0 10e             | local36
0b8d0 10e             | 	res	1
0b8d0 10f             | local37
0b8d0 10f             | 	res	1
0b8d0 110             | local38
0b8d0 110             | 	res	1
0b8d0 111             | local39
0b8d0 111             | 	res	1
0b8d0 112             | local40
0b8d0 112             | 	res	1
0b8d0 113             | local41
0b8d0 113             | 	res	1
0b8d0 114             | local42
0b8d0 114             | 	res	1
0b8d0 115             | muldiva_
0b8d0 115             | 	res	1
0b8d0 116             | muldivb_
0b8d0 116             | 	res	1
0b8d0 117             | 	fit	480
0b8d0 117             | 
