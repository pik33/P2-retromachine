00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/hng030rm.p2asm"
00000                 | ' 
00000                 | ' 
00000                 | ' hdmi_base       = 0            'must be a multiple of 8
00000                 | con
00000                 | 	hdmi_base = 0
00000                 | ' _clkfreq        = 320_000_000    'start safe, hubset will do the rest. The clock will be changed to:
00000                 | 	_clkfreq = 320000000
00000                 | ' 
00000                 | ' ' 354_689_500   200x Atari 8-bit PAL,  50x Amiga PAL  - real settings: 49,869-> 354_693_878  - 1.0000123 - mode 0 and 192
00000                 | ' ' 357_954_500   200x Atari 8-bit NTSC, 50x Amiga NTSC - real settings: 49,877-> 357_959_184  - 1.0000131 - mode 256
00000                 | ' 
00000                 | ' ' 319_220_550   180x PAL  - real settings: 51,814-> 319_215_686 - 0.9999848 - mode 64
00000                 | ' ' 322_159_050   180x NTSC - real settings: 37,596-> 322_162_162 - 1.0000097 - mode 320 and 448
00000                 | ' 
00000                 | ' ' 283_751_600   160x PAL  - real settings: 64,908-> 283_750_000 - 0.9999944 - mode 128
00000                 | ' ' 286_363_600   160x NTSC - real settings: 22,315-> 286_363_636 - 1.0000001 - mode 384
00000                 | ' 
00000                 | ' ''--------- VGA DOS color definition constants
00000                 | ' 
00000                 | ' c_black         =    0
00000                 | 	c_black = 0
00000                 | ' c_blue          =  117
00000                 | 	c_blue = 117
00000                 | ' c_green         =  199
00000                 | 	c_green = 199
00000                 | ' c_cyan          =  149
00000                 | 	c_cyan = 149
00000                 | ' c_red           =   39
00000                 | 	c_red = 39
00000                 | ' c_magenta       =   71
00000                 | 	c_magenta = 71
00000                 | ' c_brown         =  246
00000                 | 	c_brown = 246
00000                 | ' c_lightgray     =   10
00000                 | 	c_lightgray = 10
00000                 | ' c_darkgray      =    5
00000                 | 	c_darkgray = 5
00000                 | ' c_lightblue     =  121
00000                 | 	c_lightblue = 121
00000                 | ' c_lightgreen    =  203
00000                 | 	c_lightgreen = 203
00000                 | ' c_lightcyan     =  155
00000                 | 	c_lightcyan = 155
00000                 | ' c_lightred      =   43
00000                 | 	c_lightred = 43
00000                 | ' c_lightmagenta  =   75
00000                 | 	c_lightmagenta = 75
00000                 | ' c_yellow        =  234
00000                 | 	c_yellow = 234
00000                 | ' c_white         =   15
00000                 | 	c_white = 15
00000                 | ' 
00000                 | ' timingsxxt      =  $70810000
00000                 | 	timingsxxt = 1887502336
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 C8 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DD F0 03 F6 | 	mov	ptra, objptr
00410 003 EC F0 07 F1 | 	add	ptra, #236
00414 004 14 EC 0F FB | 	rdlong	pa, #20 wz
00418 005 E8 01 90 5D |  if_ne	jmp	#skip_clock_set_
0041c 006 00 00 64 FD | 	hubset	#0
00420 007 07 80 80 FF 
00424 008 00 F0 67 FD | 	hubset	##16781304
00428 009 86 01 80 FF 
0042c 00a 1F 80 66 FD | 	waitx	##200000
00430 00b 07 80 00 FF 
00434 00c FB ED 07 F6 | 	mov	pa, ##16781307
00438 00d 00 EC 63 FD | 	hubset	pa
0043c 00e 18 EC 67 FC | 	wrlong	pa, #24
00440 00f 68 89 89 FF 
00444 010 14 00 6C FC | 	wrlong	##320000000, #20
00448 011 B8 01 90 FD | 	jmp	#skip_clock_set_
0044c 012 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 9C 07 A0 FD | 	call	#_dummy
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 2A 62 FD | 	cogid	arg01
00614 084 03 2A 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 BB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 C9 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 2B 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 2D 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 2F 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 31 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D C8 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 2E 56 F0 |         shr	arg03, #1 wc
00688 0a1 15 2D 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 2A 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 2C FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 2E 56 F0 |         shr	arg03, #1 wc
00698 0a5 15 2D 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 2A 06 C1 |  if_c   add	arg01, #2
006a0 0a7 16 2D 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 15 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 2E 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 17 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 2C 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 35 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 35 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 3C 77 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 78 62 FD |        getqx   muldivb_
00740 0cf 19 76 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 3B 77 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 B8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 3C 79 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 B8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 B8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 3B 77 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 B8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 3C 79 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | 
0076c 0da             | __heap_ptr
0076c 0da B8 5A 00 00 | 	long	@__heap_base
00770 0db             | itmp1_
00770 0db 00 00 00 00 | 	long	0
00774 0dc             | itmp2_
00774 0dc 00 00 00 00 | 	long	0
00778 0dd             | objptr
00778 0dd C0 6A 00 00 | 	long	@objmem
0077c 0de             | ptr___system__dat__
0077c 0de A0 5A 00 00 | 	long	@__system__dat_
00780 0df             | ptr__dat__
00780 0df 3C 36 00 00 | 	long	@_dat_
00784 0e0             | ptr__putpixel1_
00784 0e0 5C 19 00 00 | 	long	@_putpixel1
00788 0e1             | ptr__putpixel2_
00788 0e1 44 1A 00 00 | 	long	@_putpixel2
0078c 0e2             | ptr__putpixel4_
0078c 0e2 1C 1B 00 00 | 	long	@_putpixel4
00790 0e3             | ptr__putpixel8_
00790 0e3 F4 1B 00 00 | 	long	@_putpixel8
00794 0e4             | result1
00794 0e4 00 00 00 00 | 	long	0
00798 0e5             | result2
00798 0e5 00 00 00 00 | 	long	0
0079c 0e6             | COG_BSS_START
0079c 0e6             | 	fit	480
0079c                 | 	orgh
0079c                 | hubentry
0079c                 | 
0079c                 | ' 
0079c                 | ' 
0079c                 | ' ''--------- timings
0079c                 | ' ' 0  m_bs        - before sync,             16      80
0079c                 | ' ' 1  m_sn        - sync                     80     160
0079c                 | ' ' 2  m_bv        - before visible           20      84
0079c                 | ' ' 3  m_vi        - visible                1024     816
0079c                 | ' ' 4  m_border    - left and right borders  112       8
0079c                 | ' ' 5  m_lut1      - pixels per char           8       8
0079c                 | ' ' 6  i_vborder   - up and down border       48       8
0079c                 | ' ' 7  i_upporch   - up non visible           16       8
0079c                 | ' ' 8  i_vsync     - vsync                    16      12
0079c                 | ' ' 9  i_downporch - down non visible         16       8
0079c                 | ' '10  mode #
0079c                 | ' '11  cpl         - character per line
0079c                 | ' '12  scanlines #
0079c                 | ' '13  clock
0079c                 | ' '14  hubset value for clock settings
0079c                 | ' 
0079c                 | ' 
0079c                 | ' '*************************************************************************
0079c                 | ' '                                                                        *
0079c                 | ' '  A dummy start function if someone runs this driver alone              *
0079c                 | ' '                                                                        *
0079c                 | ' '*************************************************************************
0079c                 | ' 
0079c                 | ' pub dummy()|i,x,y,ntsc,bbb,ccc,zzx,zzy,amode,x1,x2,y1,y2,r
0079c                 | _dummy
0079c     19 5A 05 F6 | 	mov	COUNT_, #25
007a0     B0 00 A0 FD | 	call	#pushregs_
007a4                 | ' '' this is not a main program.
007a4                 | ' 
007a4                 | ' start(512+64+48,hdmi_base)
007a4     2C BA 05 F1 | 	add	objptr, #44
007a8     DD 34 02 F6 | 	mov	local01, objptr
007ac                 | ' 
007ac                 | ' ' initialize pointers and variables
007ac                 | ' 
007ac                 | ' border_ptr:=@bordercolor
007ac     24 BA 85 F1 | 	sub	objptr, #36
007b0     DD 34 62 FC | 	wrlong	local01, objptr
007b4     08 00 00 FF 
007b8     00 BE 05 F1 | 	add	ptr__dat__, ##4096
007bc                 | ' font_ptr:=@st_font
007bc     04 BA 85 F1 | 	sub	objptr, #4
007c0     DD BE 61 FC | 	wrlong	ptr__dat__, objptr
007c4                 | ' hdmibase:=base
007c4     20 BA 05 F1 | 	add	objptr, #32
007c8     DD 00 68 FC | 	wrlong	#0, objptr
007cc     24 BA 85 F1 | 	sub	objptr, #36
007d0     E0 2C 02 F6 | 	mov	arg02, ptr__putpixel1_
007d4                 | ' p1:=@putpixel1
007d4     DD 2A 02 F6 | 	mov	arg01, objptr
007d8     08 00 00 FF 
007dc     00 BE 85 F1 | 	sub	ptr__dat__, ##4096
007e0     54 23 B0 FD | 	call	#__system___make_methodptr
007e4     E4 36 02 F6 | 	mov	local02, result1
007e8     DC BA 05 F1 | 	add	objptr, #220
007ec     DD 36 62 FC | 	wrlong	local02, objptr
007f0     DC BA 85 F1 | 	sub	objptr, #220
007f4     E1 2C 02 F6 | 	mov	arg02, ptr__putpixel2_
007f8                 | ' p2:=@putpixel2
007f8     DD 2A 02 F6 | 	mov	arg01, objptr
007fc     38 23 B0 FD | 	call	#__system___make_methodptr
00800     E4 36 02 F6 | 	mov	local02, result1
00804     E0 BA 05 F1 | 	add	objptr, #224
00808     DD 36 62 FC | 	wrlong	local02, objptr
0080c     E0 BA 85 F1 | 	sub	objptr, #224
00810     E2 2C 02 F6 | 	mov	arg02, ptr__putpixel4_
00814                 | ' p4:=@putpixel4
00814     DD 2A 02 F6 | 	mov	arg01, objptr
00818     1C 23 B0 FD | 	call	#__system___make_methodptr
0081c     E4 36 02 F6 | 	mov	local02, result1
00820     E4 BA 05 F1 | 	add	objptr, #228
00824     DD 36 62 FC | 	wrlong	local02, objptr
00828     E4 BA 85 F1 | 	sub	objptr, #228
0082c     E3 2C 02 F6 | 	mov	arg02, ptr__putpixel8_
00830                 | ' p8:=@putpixel8
00830     DD 2A 02 F6 | 	mov	arg01, objptr
00834     00 23 B0 FD | 	call	#__system___make_methodptr
00838     E4 36 02 F6 | 	mov	local02, result1
0083c     E8 BA 05 F1 | 	add	objptr, #232
00840     DD 36 62 FC | 	wrlong	local02, objptr
00844     E8 BA 85 F1 | 	sub	objptr, #232
00848                 | ' 
00848                 | ' 
00848                 | ' ' the mode has to be set here to enable computing the buffer length
00848                 | ' 
00848                 | ' setmode(mode)
00848     01 00 00 FF 
0084c     70 2A 06 F6 | 	mov	arg01, ##624
00850     E4 16 B0 FD | 	call	#_setmode
00854     40 BA 05 F1 | 	add	objptr, #64
00858     DD 38 02 F6 | 	mov	local03, objptr
0085c                 | ' 
0085c                 | ' vblank_ptr:=@vblank
0085c     34 BA 85 F1 | 	sub	objptr, #52
00860     DD 38 62 FC | 	wrlong	local03, objptr
00864     28 BA 05 F1 | 	add	objptr, #40
00868     DD 3A 02 F6 | 	mov	local04, objptr
0086c                 | ' cursor_ptr:=@cursor_x
0086c     24 BA 85 F1 | 	sub	objptr, #36
00870     DD 3A 62 FC | 	wrlong	local04, objptr
00874     88 BA 05 F1 | 	add	objptr, #136
00878     DD 3C 02 F6 | 	mov	local05, objptr
0087c                 | ' 
0087c                 | ' fontnum_ptr:=@fontnum
0087c     78 BA 85 F1 | 	sub	objptr, #120
00880     DD 3C 62 FC | 	wrlong	local05, objptr
00884                 | ' 
00884                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
00884     78 BA 05 F1 | 	add	objptr, #120
00888     DD 00 68 FC | 	wrlong	#0, objptr
0088c     1C BA 05 F1 | 	add	objptr, #28
00890     DD 2A 02 F6 | 	mov	arg01, objptr
00894     B4 BA 85 F1 | 	sub	objptr, #180
00898     0F 00 00 FF 
0089c     58 BE 05 F1 | 	add	ptr__dat__, ##7768
008a0     DF 2C 02 F6 | 	mov	arg02, ptr__dat__
008a4     0F 00 00 FF 
008a8     58 BE 85 F1 | 	sub	ptr__dat__, ##7768
008ac                 | ' bytemove(@colors,@vgacolors,16)
008ac     10 2E 06 F6 | 	mov	arg03, #16
008b0     5C 21 B0 FD | 	call	#__system____builtin_memmove
008b4                 | ' 
008b4                 | ' ' initialize a cursor
008b4                 | ' 
008b4                 | ' cursor_x:=0
008b4     34 BA 05 F1 | 	add	objptr, #52
008b8     DD 00 48 FC | 	wrbyte	#0, objptr
008bc                 | ' cursor_y:=0
008bc     01 BA 05 F1 | 	add	objptr, #1
008c0     DD 00 48 FC | 	wrbyte	#0, objptr
008c4                 | ' cursor_sh:=14
008c4     01 BA 05 F1 | 	add	objptr, #1
008c8     DD 1C 48 FC | 	wrbyte	#14, objptr
008cc     36 BA 85 F1 | 	sub	objptr, #54
008d0                 | ' 
008d0                 | ' 
008d0                 | ' ' start the cog
008d0                 | ' 
008d0                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
008d0     0F 00 00 FF 
008d4     68 BE 05 F1 | 	add	ptr__dat__, ##7784
008d8     DF 2C 02 F6 | 	mov	arg02, ptr__dat__
008dc     0F 00 00 FF 
008e0     68 BE 85 F1 | 	sub	ptr__dat__, ##7784
008e4     DD 2E 02 F6 | 	mov	arg03, objptr
008e8     10 2A 06 F6 | 	mov	arg01, #16
008ec     28 2E 62 FD | 	setq	arg03
008f0     16 2B F2 FC | 	coginit	arg01, arg02 wc
008f4     01 2A 66 C6 |  if_b	neg	arg01, #1
008f8     15 C9 01 F6 | 	mov	result1, arg01
008fc     E4 3E 02 F6 | 	mov	local06, result1
00900     28 BA 05 F1 | 	add	objptr, #40
00904     DD 3E 62 FC | 	wrlong	local06, objptr
00908     28 BA 85 F1 | 	sub	objptr, #40
0090c                 | ' waitms(20)
0090c     14 2A 06 F6 | 	mov	arg01, #20
00910     E4 22 B0 FD | 	call	#__system___waitms
00914                 | ' 
00914                 | ' ' clear the screen and set the colors to green on black
00914                 | ' 
00914                 | ' cls(c_green,c_black)
00914     C7 2A 06 F6 | 	mov	arg01, #199
00918     00 2C 06 F6 | 	mov	arg02, #0
0091c     CC 13 B0 FD | 	call	#_cls
00920                 | ' setbordercolor(0,0,128)
00920     0F 2E C6 F9 | 	decod	arg03, #15
00924                 | ' 
00924                 | ' color:=r<<24+g<<16+b<<8
00924                 | ' bordercolor:=color
00924     2C BA 05 F1 | 	add	objptr, #44
00928     40 00 80 FF 
0092c     DD 00 68 FC | 	wrlong	##32768, objptr
00930                 | ' setwritecolors(c_green,c_black)
00930                 | ' 
00930                 | ' 
00930                 | ' write_color:=ff
00930     0C BA 05 F1 | 	add	objptr, #12
00934     DD 8E 69 FC | 	wrlong	#199, objptr
00938                 | ' write_background:=bb
00938     04 BA 05 F1 | 	add	objptr, #4
0093c     DD 00 68 FC | 	wrlong	#0, objptr
00940                 | ' 
00940                 | ' return cog
00940     14 BA 85 F1 | 	sub	objptr, #20
00944     DD C8 01 FB | 	rdlong	result1, objptr
00948     28 BA 85 F1 | 	sub	objptr, #40
0094c                 | ' 'start(512+256+64+32,hdmi_base)
0094c                 | ' 
0094c                 | ' cls(15,1)
0094c     0F 2A 06 F6 | 	mov	arg01, #15
00950     01 2C 06 F6 | 	mov	arg02, #1
00954     94 13 B0 FD | 	call	#_cls
00958                 | ' setfontfamily(0)
00958                 | ' 
00958                 | ' font_family:=afontnum
00958     C8 BA 05 F1 | 	add	objptr, #200
0095c     DD 00 68 FC | 	wrlong	#0, objptr
00960     C8 BA 85 F1 | 	sub	objptr, #200
00964                 | ' waitvbl(100)
00964     64 2A 06 F6 | 	mov	arg01, #100
00968     0C 13 B0 FD | 	call	#_waitvbl
0096c                 | ' outtextxycg(0,0,inttostr(long[0]),11,1)
0096c     00 40 06 F6 | 	mov	local07, #0
00970     00 42 06 F6 | 	mov	local08, #0
00974     00 2A 06 FB | 	rdlong	arg01, #0
00978     AC 14 B0 FD | 	call	#_inttostr
0097c     E4 2E 02 F6 | 	mov	arg03, result1
00980     20 2B 02 F6 | 	mov	arg01, local07
00984     21 2D 02 F6 | 	mov	arg02, local08
00988     0B 30 06 F6 | 	mov	arg04, #11
0098c     01 32 06 F6 | 	mov	arg05, #1
00990     28 0F B0 FD | 	call	#_outtextxycg
00994                 | ' waitvbl(300)
00994     2C 2B 06 F6 | 	mov	arg01, #300
00998     DC 12 B0 FD | 	call	#_waitvbl
0099c                 | ' 'maketestdl(512+48)
0099c                 | ' waitvbl(1200)
0099c     02 00 00 FF 
009a0     B0 2A 06 F6 | 	mov	arg01, ##1200
009a4     D0 12 B0 FD | 	call	#_waitvbl
009a8                 | ' repeat i from 0 to 10000
009a8     13 00 00 FF 
009ac     11 45 06 F6 | 	mov	local09, ##10001
009b0                 | LR__0001
009b0                 | '   ccc:=getrnd()&255
009b0     1B 46 62 FD | 	getrnd	local10
009b4     FF 46 06 F5 | 	and	local10, #255
009b8                 | '   x1:=getrnd()+//896
009b8     1B C8 61 FD | 	getrnd	result1
009bc     E4 76 02 F6 | 	mov	muldiva_, result1
009c0     01 00 00 FF 
009c4     80 79 06 F6 | 	mov	muldivb_, ##896
009c8     CC 00 A0 FD | 	call	#unsdivide_
009cc     3B 49 02 F6 | 	mov	local11, muldiva_
009d0                 | '   x2:=getrnd()+//896
009d0     1B C8 61 FD | 	getrnd	result1
009d4     E4 76 02 F6 | 	mov	muldiva_, result1
009d8     01 00 00 FF 
009dc     80 79 06 F6 | 	mov	muldivb_, ##896
009e0     CC 00 A0 FD | 	call	#unsdivide_
009e4     3B 4B 02 F6 | 	mov	local12, muldiva_
009e8                 | '   y1:=getrnd()+//496
009e8     1B C8 61 FD | 	getrnd	result1
009ec     E4 76 02 F6 | 	mov	muldiva_, result1
009f0     F0 79 06 F6 | 	mov	muldivb_, #496
009f4     CC 00 A0 FD | 	call	#unsdivide_
009f8     3B 4D 02 F6 | 	mov	local13, muldiva_
009fc                 | '   y2:=getrnd()+//496
009fc     1B C8 61 FD | 	getrnd	result1
00a00     E4 76 02 F6 | 	mov	muldiva_, result1
00a04     F0 79 06 F6 | 	mov	muldivb_, #496
00a08     CC 00 A0 FD | 	call	#unsdivide_
00a0c                 | ' 
00a0c                 | ' 
00a0c                 | '   line(x1,y1,x2,y2,ccc)
00a0c     24 2B 02 F6 | 	mov	arg01, local11
00a10     26 2D 02 F6 | 	mov	arg02, local13
00a14     25 2F 02 F6 | 	mov	arg03, local12
00a18     23 33 02 F6 | 	mov	arg05, local10
00a1c     3B 31 02 F6 | 	mov	arg04, muldiva_
00a20     F4 0B B0 FD | 	call	#_line
00a24     E2 45 6E FB | 	djnz	local09, #LR__0001
00a28                 | ' 
00a28                 | ' repeat i from 0 to 1000
00a28     01 00 00 FF 
00a2c     E9 45 06 F6 | 	mov	local09, ##1001
00a30                 | LR__0002
00a30                 | ' 
00a30                 | '   x1:=getrnd()+//896
00a30     1B C8 61 FD | 	getrnd	result1
00a34     E4 76 02 F6 | 	mov	muldiva_, result1
00a38     01 00 00 FF 
00a3c     80 79 06 F6 | 	mov	muldivb_, ##896
00a40     CC 00 A0 FD | 	call	#unsdivide_
00a44     3B 49 02 F6 | 	mov	local11, muldiva_
00a48                 | '   y1:=getrnd()+//496
00a48     1B C8 61 FD | 	getrnd	result1
00a4c     E4 76 02 F6 | 	mov	muldiva_, result1
00a50     F0 79 06 F6 | 	mov	muldivb_, #496
00a54     CC 00 A0 FD | 	call	#unsdivide_
00a58     3B 4D 02 F6 | 	mov	local13, muldiva_
00a5c                 | '   r:=getrnd()+//100
00a5c     1B C8 61 FD | 	getrnd	result1
00a60     E4 76 02 F6 | 	mov	muldiva_, result1
00a64     64 78 06 F6 | 	mov	muldivb_, #100
00a68     CC 00 A0 FD | 	call	#unsdivide_
00a6c                 | '   ccc:=getrnd()&255
00a6c     1B C8 61 FD | 	getrnd	result1
00a70     E4 30 02 F6 | 	mov	arg04, result1
00a74     FF 30 06 F5 | 	and	arg04, #255
00a78                 | '   fcircle(x1,y1,r,ccc)   
00a78     24 2B 02 F6 | 	mov	arg01, local11
00a7c     26 2D 02 F6 | 	mov	arg02, local13
00a80     3B 2F 02 F6 | 	mov	arg03, muldiva_
00a84     5C 08 B0 FD | 	call	#_fcircle
00a88     E9 45 6E FB | 	djnz	local09, #LR__0002
00a8c                 | ' 
00a8c                 | ' repeat i from 0 to 10000
00a8c     13 00 00 FF 
00a90     11 45 06 F6 | 	mov	local09, ##10001
00a94                 | LR__0003
00a94                 | '   ccc:=getrnd()&255
00a94     1B 46 62 FD | 	getrnd	local10
00a98     FF 46 06 F5 | 	and	local10, #255
00a9c                 | '   x1:=getrnd()+//896
00a9c     1B C8 61 FD | 	getrnd	result1
00aa0     E4 76 02 F6 | 	mov	muldiva_, result1
00aa4     01 00 00 FF 
00aa8     80 79 06 F6 | 	mov	muldivb_, ##896
00aac     CC 00 A0 FD | 	call	#unsdivide_
00ab0     3B 49 02 F6 | 	mov	local11, muldiva_
00ab4                 | '   x2:=getrnd()+//896
00ab4     1B C8 61 FD | 	getrnd	result1
00ab8     E4 76 02 F6 | 	mov	muldiva_, result1
00abc     01 00 00 FF 
00ac0     80 79 06 F6 | 	mov	muldivb_, ##896
00ac4     CC 00 A0 FD | 	call	#unsdivide_
00ac8     3B 4B 02 F6 | 	mov	local12, muldiva_
00acc                 | '   y1:=getrnd()+//496
00acc     1B C8 61 FD | 	getrnd	result1
00ad0     E4 76 02 F6 | 	mov	muldiva_, result1
00ad4     F0 79 06 F6 | 	mov	muldivb_, #496
00ad8     CC 00 A0 FD | 	call	#unsdivide_
00adc     3B 4D 02 F6 | 	mov	local13, muldiva_
00ae0                 | '   y2:=getrnd()+//496
00ae0     1B C8 61 FD | 	getrnd	result1
00ae4     E4 76 02 F6 | 	mov	muldiva_, result1
00ae8     F0 79 06 F6 | 	mov	muldivb_, #496
00aec     CC 00 A0 FD | 	call	#unsdivide_
00af0                 | ' 
00af0                 | ' 
00af0                 | '   frame(x1,y1,x2,y2,ccc)
00af0     24 4F 02 F6 | 	mov	local14, local11
00af4     26 51 02 F6 | 	mov	local15, local13
00af8     25 53 02 F6 | 	mov	local16, local12
00afc     3B 55 02 F6 | 	mov	local17, muldiva_
00b00     23 57 02 F6 | 	mov	local18, local10
00b04                 | ' 
00b04                 | ' line(x1,y1,x2,y1,c)
00b04     27 2B 02 F6 | 	mov	arg01, local14
00b08     28 2D 02 F6 | 	mov	arg02, local15
00b0c     29 2F 02 F6 | 	mov	arg03, local16
00b10     28 31 02 F6 | 	mov	arg04, local15
00b14     2B 33 02 F6 | 	mov	arg05, local18
00b18     FC 0A B0 FD | 	call	#_line
00b1c                 | ' line(x1,y2,x2,y2,c)
00b1c     27 2B 02 F6 | 	mov	arg01, local14
00b20     2A 2D 02 F6 | 	mov	arg02, local17
00b24     29 2F 02 F6 | 	mov	arg03, local16
00b28     2A 31 02 F6 | 	mov	arg04, local17
00b2c     2B 33 02 F6 | 	mov	arg05, local18
00b30     E4 0A B0 FD | 	call	#_line
00b34                 | ' line(x1,y1,x1,y2,c)
00b34     27 2B 02 F6 | 	mov	arg01, local14
00b38     28 2D 02 F6 | 	mov	arg02, local15
00b3c     27 2F 02 F6 | 	mov	arg03, local14
00b40     2A 31 02 F6 | 	mov	arg04, local17
00b44     2B 33 02 F6 | 	mov	arg05, local18
00b48     CC 0A B0 FD | 	call	#_line
00b4c                 | ' line(x2,y1,x2,y2,c)
00b4c     29 2B 02 F6 | 	mov	arg01, local16
00b50     28 2D 02 F6 | 	mov	arg02, local15
00b54     29 2F 02 F6 | 	mov	arg03, local16
00b58     2A 31 02 F6 | 	mov	arg04, local17
00b5c     2B 33 02 F6 | 	mov	arg05, local18
00b60     B4 0A B0 FD | 	call	#_line
00b64     CB 45 6E FB | 	djnz	local09, #LR__0003
00b68                 | '   
00b68                 | ' repeat i from 0 to 10000
00b68     13 00 00 FF 
00b6c     11 45 06 F6 | 	mov	local09, ##10001
00b70                 | LR__0004
00b70                 | ' 
00b70                 | '   x1:=getrnd()+//896
00b70     1B C8 61 FD | 	getrnd	result1
00b74     E4 76 02 F6 | 	mov	muldiva_, result1
00b78     01 00 00 FF 
00b7c     80 79 06 F6 | 	mov	muldivb_, ##896
00b80     CC 00 A0 FD | 	call	#unsdivide_
00b84     3B 49 02 F6 | 	mov	local11, muldiva_
00b88                 | '   y1:=getrnd()+//496
00b88     1B C8 61 FD | 	getrnd	result1
00b8c     E4 76 02 F6 | 	mov	muldiva_, result1
00b90     F0 79 06 F6 | 	mov	muldivb_, #496
00b94     CC 00 A0 FD | 	call	#unsdivide_
00b98     3B 4D 02 F6 | 	mov	local13, muldiva_
00b9c                 | '   r:=getrnd()+//100
00b9c     1B C8 61 FD | 	getrnd	result1
00ba0     E4 76 02 F6 | 	mov	muldiva_, result1
00ba4     64 78 06 F6 | 	mov	muldivb_, #100
00ba8     CC 00 A0 FD | 	call	#unsdivide_
00bac                 | '   ccc:=getrnd()&255
00bac     1B C8 61 FD | 	getrnd	result1
00bb0     E4 30 02 F6 | 	mov	arg04, result1
00bb4     FF 30 06 F5 | 	and	arg04, #255
00bb8                 | '   circle(x1,y1,r,ccc) 
00bb8     24 2B 02 F6 | 	mov	arg01, local11
00bbc     26 2D 02 F6 | 	mov	arg02, local13
00bc0     3B 2F 02 F6 | 	mov	arg03, muldiva_
00bc4     38 08 B0 FD | 	call	#_circle
00bc8     E9 45 6E FB | 	djnz	local09, #LR__0004
00bcc                 | '   
00bcc                 | ' repeat i from 0 to 1000
00bcc     01 00 00 FF 
00bd0     E9 45 06 F6 | 	mov	local09, ##1001
00bd4                 | LR__0005
00bd4                 | '   ccc:=getrnd()&255
00bd4     1B 46 62 FD | 	getrnd	local10
00bd8     FF 46 06 F5 | 	and	local10, #255
00bdc                 | '   x1:=getrnd()+//896
00bdc     1B C8 61 FD | 	getrnd	result1
00be0     E4 76 02 F6 | 	mov	muldiva_, result1
00be4     01 00 00 FF 
00be8     80 79 06 F6 | 	mov	muldivb_, ##896
00bec     CC 00 A0 FD | 	call	#unsdivide_
00bf0     3B 49 02 F6 | 	mov	local11, muldiva_
00bf4                 | '   x2:=getrnd()+//100
00bf4     1B C8 61 FD | 	getrnd	result1
00bf8     E4 76 02 F6 | 	mov	muldiva_, result1
00bfc     64 78 06 F6 | 	mov	muldivb_, #100
00c00     CC 00 A0 FD | 	call	#unsdivide_
00c04     3B 4B 02 F6 | 	mov	local12, muldiva_
00c08                 | '   y1:=getrnd()+//496
00c08     1B C8 61 FD | 	getrnd	result1
00c0c     E4 76 02 F6 | 	mov	muldiva_, result1
00c10     F0 79 06 F6 | 	mov	muldivb_, #496
00c14     CC 00 A0 FD | 	call	#unsdivide_
00c18     3B 4D 02 F6 | 	mov	local13, muldiva_
00c1c                 | '   y2:=getrnd()+//100
00c1c     1B C8 61 FD | 	getrnd	result1
00c20     E4 76 02 F6 | 	mov	muldiva_, result1
00c24     64 78 06 F6 | 	mov	muldivb_, #100
00c28     CC 00 A0 FD | 	call	#unsdivide_
00c2c     24 59 02 F6 | 	mov	local19, local11
00c30     25 59 02 F1 | 	add	local19, local12
00c34     26 5B 02 F6 | 	mov	local20, local13
00c38     3B 5B 02 F1 | 	add	local20, muldiva_
00c3c                 | ' 
00c3c                 | ' 
00c3c                 | '   box(x1,y1,x1+x2,y1+y2,ccc)  
00c3c     24 5D 02 F6 | 	mov	local21, local11
00c40     26 5F 02 F6 | 	mov	local22, local13
00c44     23 61 02 F6 | 	mov	local23, local10
00c48                 | ' 
00c48                 | ' repeat yy from y1 to y2
00c48     2F 5B 5A F2 | 	cmps	local20, local22 wcz
00c4c     01 62 06 16 |  if_a	mov	local24, #1
00c50     01 62 66 E6 |  if_be	neg	local24, #1
00c54     31 5B 02 F1 | 	add	local20, local24
00c58                 | LR__0006
00c58                 | '   line(x1,yy,x2,yy,c)
00c58     2E 2B 02 F6 | 	mov	arg01, local21
00c5c     2C 2F 02 F6 | 	mov	arg03, local19
00c60     30 33 02 F6 | 	mov	arg05, local23
00c64     2F 2D 02 F6 | 	mov	arg02, local22
00c68     2F 31 02 F6 | 	mov	arg04, local22
00c6c     A8 09 B0 FD | 	call	#_line
00c70     31 5F 02 F1 | 	add	local22, local24
00c74     2D 5F 0A F2 | 	cmp	local22, local20 wz
00c78     DC FF 9F 5D |  if_ne	jmp	#LR__0006
00c7c     D5 45 6E FB | 	djnz	local09, #LR__0005
00c80                 | '       
00c80                 | '   
00c80                 | ' {
00c80                 | ' }
00c80                 | ' setfontfamily(4)
00c80                 | ' 
00c80                 | ' font_family:=afontnum
00c80     C8 BA 05 F1 | 	add	objptr, #200
00c84     DD 08 68 FC | 	wrlong	#4, objptr
00c88     C8 BA 85 F1 | 	sub	objptr, #200
00c8c                 | ' repeat amode from 512 to 1023
00c8c     09 64 C6 F9 | 	decod	local25, #9
00c90                 | LR__0007
00c90                 | '   setmode(amode)
00c90     32 2B 02 F6 | 	mov	arg01, local25
00c94     A0 12 B0 FD | 	call	#_setmode
00c98     32 47 02 F6 | 	mov	local10, local25
00c9c     04 46 46 F0 | 	shr	local10, #4
00ca0     03 46 0E F5 | 	and	local10, #3 wz
00ca4                 | '   ccc:=((amode>>4)&3)
00ca4                 | '   if (ccc==0)
00ca4     80 01 90 5D |  if_ne	jmp	#LR__0008
00ca8                 | '     cls(0,1)
00ca8     00 2A 06 F6 | 	mov	arg01, #0
00cac     01 2C 06 F6 | 	mov	arg02, #1
00cb0     38 10 B0 FD | 	call	#_cls
00cb4                 | '     outtextxycg(0,0,string("mode"),0,1)
00cb4     1A 00 00 FF 
00cb8     C2 2F 06 F6 | 	mov	arg03, ##@LR__0191
00cbc     00 2A 06 F6 | 	mov	arg01, #0
00cc0     00 2C 06 F6 | 	mov	arg02, #0
00cc4     00 30 06 F6 | 	mov	arg04, #0
00cc8     01 32 06 F6 | 	mov	arg05, #1
00ccc     EC 0B B0 FD | 	call	#_outtextxycg
00cd0                 | '     outtextxycg(0,16,string("cpl"),0,1)
00cd0     1A 00 00 FF 
00cd4     C7 2F 06 F6 | 	mov	arg03, ##@LR__0192
00cd8     00 2A 06 F6 | 	mov	arg01, #0
00cdc     10 2C 06 F6 | 	mov	arg02, #16
00ce0     00 30 06 F6 | 	mov	arg04, #0
00ce4     01 32 06 F6 | 	mov	arg05, #1
00ce8     D0 0B B0 FD | 	call	#_outtextxycg
00cec                 | '     outtextxycg(0,32,string("bufptr"),0,1)
00cec     1A 00 00 FF 
00cf0     CB 2F 06 F6 | 	mov	arg03, ##@LR__0193
00cf4     00 2A 06 F6 | 	mov	arg01, #0
00cf8     20 2C 06 F6 | 	mov	arg02, #32
00cfc     00 30 06 F6 | 	mov	arg04, #0
00d00     01 32 06 F6 | 	mov	arg05, #1
00d04     B4 0B B0 FD | 	call	#_outtextxycg
00d08                 | '     outtextxycg(0,48,string("buflen"),0,1)
00d08     1A 00 00 FF 
00d0c     D2 2F 06 F6 | 	mov	arg03, ##@LR__0194
00d10     00 2A 06 F6 | 	mov	arg01, #0
00d14     30 2C 06 F6 | 	mov	arg02, #48
00d18     00 30 06 F6 | 	mov	arg04, #0
00d1c     01 32 06 F6 | 	mov	arg05, #1
00d20     98 0B B0 FD | 	call	#_outtextxycg
00d24                 | '     outtextxycg(0,64,string("lines"),0,1)
00d24     1A 00 00 FF 
00d28     D9 2F 06 F6 | 	mov	arg03, ##@LR__0195
00d2c     00 2A 06 F6 | 	mov	arg01, #0
00d30     40 2C 06 F6 | 	mov	arg02, #64
00d34     00 30 06 F6 | 	mov	arg04, #0
00d38     01 32 06 F6 | 	mov	arg05, #1
00d3c     7C 0B B0 FD | 	call	#_outtextxycg
00d40                 | '     outtextxycg(64,0,inttostr(amode),0,1)
00d40     40 40 06 F6 | 	mov	local07, #64
00d44     00 42 06 F6 | 	mov	local08, #0
00d48     32 2B 02 F6 | 	mov	arg01, local25
00d4c     D8 10 B0 FD | 	call	#_inttostr
00d50     E4 2E 02 F6 | 	mov	arg03, result1
00d54     20 2B 02 F6 | 	mov	arg01, local07
00d58     21 2D 02 F6 | 	mov	arg02, local08
00d5c     00 30 06 F6 | 	mov	arg04, #0
00d60     01 32 06 F6 | 	mov	arg05, #1
00d64     54 0B B0 FD | 	call	#_outtextxycg
00d68                 | '     outtextxycg(64,16,inttostr(cpl),0,1)
00d68     40 40 06 F6 | 	mov	local07, #64
00d6c     10 42 06 F6 | 	mov	local08, #16
00d70     90 BA 05 F1 | 	add	objptr, #144
00d74     DD 2A 02 FB | 	rdlong	arg01, objptr
00d78     90 BA 85 F1 | 	sub	objptr, #144
00d7c     A8 10 B0 FD | 	call	#_inttostr
00d80     E4 2E 02 F6 | 	mov	arg03, result1
00d84     20 2B 02 F6 | 	mov	arg01, local07
00d88     21 2D 02 F6 | 	mov	arg02, local08
00d8c     00 30 06 F6 | 	mov	arg04, #0
00d90     01 32 06 F6 | 	mov	arg05, #1
00d94     24 0B B0 FD | 	call	#_outtextxycg
00d98                 | '     outtextxycg(64,32,inttostr(buf_ptr),0,1)
00d98     40 40 06 F6 | 	mov	local07, #64
00d9c     20 42 06 F6 | 	mov	local08, #32
00da0     DD 2A 02 FB | 	rdlong	arg01, objptr
00da4     80 10 B0 FD | 	call	#_inttostr
00da8     E4 2E 02 F6 | 	mov	arg03, result1
00dac     20 2B 02 F6 | 	mov	arg01, local07
00db0     21 2D 02 F6 | 	mov	arg02, local08
00db4     00 30 06 F6 | 	mov	arg04, #0
00db8     01 32 06 F6 | 	mov	arg05, #1
00dbc     FC 0A B0 FD | 	call	#_outtextxycg
00dc0     30 BA 05 F1 | 	add	objptr, #48
00dc4     DD 2A 02 FB | 	rdlong	arg01, objptr
00dc8     30 BA 85 F1 | 	sub	objptr, #48
00dcc     02 2A 66 F0 | 	shl	arg01, #2
00dd0                 | '     outtextxycg(64,48,inttostr(buflen*4),0,1)
00dd0     40 40 06 F6 | 	mov	local07, #64
00dd4     30 42 06 F6 | 	mov	local08, #48
00dd8     4C 10 B0 FD | 	call	#_inttostr
00ddc     E4 2E 02 F6 | 	mov	arg03, result1
00de0     20 2B 02 F6 | 	mov	arg01, local07
00de4     21 2D 02 F6 | 	mov	arg02, local08
00de8     00 30 06 F6 | 	mov	arg04, #0
00dec     01 32 06 F6 | 	mov	arg05, #1
00df0     C8 0A B0 FD | 	call	#_outtextxycg
00df4                 | '     outtextxycg(64,64,inttostr(lines),0,1)
00df4     40 40 06 F6 | 	mov	local07, #64
00df8     40 42 06 F6 | 	mov	local08, #64
00dfc     94 BA 05 F1 | 	add	objptr, #148
00e00     DD 2A 02 FB | 	rdlong	arg01, objptr
00e04     94 BA 85 F1 | 	sub	objptr, #148
00e08     1C 10 B0 FD | 	call	#_inttostr
00e0c     E4 2E 02 F6 | 	mov	arg03, result1
00e10     20 2B 02 F6 | 	mov	arg01, local07
00e14     21 2D 02 F6 | 	mov	arg02, local08
00e18     00 30 06 F6 | 	mov	arg04, #0
00e1c     01 32 06 F6 | 	mov	arg05, #1
00e20     98 0A B0 FD | 	call	#_outtextxycg
00e24     94 04 90 FD | 	jmp	#LR__0014
00e28                 | LR__0008
00e28                 | '   elseif (ccc==1)
00e28     01 46 0E F2 | 	cmp	local10, #1 wz
00e2c     80 01 90 5D |  if_ne	jmp	#LR__0009
00e30                 | '     cls(0,0)
00e30     00 2A 06 F6 | 	mov	arg01, #0
00e34     00 2C 06 F6 | 	mov	arg02, #0
00e38     B0 0E B0 FD | 	call	#_cls
00e3c                 | '     outtextxycg(0,0,string("mode"),3,0)
00e3c     1A 00 00 FF 
00e40     DF 2F 06 F6 | 	mov	arg03, ##@LR__0196
00e44     00 2A 06 F6 | 	mov	arg01, #0
00e48     00 2C 06 F6 | 	mov	arg02, #0
00e4c     03 30 06 F6 | 	mov	arg04, #3
00e50     00 32 06 F6 | 	mov	arg05, #0
00e54     64 0A B0 FD | 	call	#_outtextxycg
00e58                 | '     outtextxycg(0,16,string("cpl"),3,0)'
00e58     1A 00 00 FF 
00e5c     E4 2F 06 F6 | 	mov	arg03, ##@LR__0197
00e60     00 2A 06 F6 | 	mov	arg01, #0
00e64     10 2C 06 F6 | 	mov	arg02, #16
00e68     03 30 06 F6 | 	mov	arg04, #3
00e6c     00 32 06 F6 | 	mov	arg05, #0
00e70     48 0A B0 FD | 	call	#_outtextxycg
00e74                 | '     outtextxycg(0,32,string("buf_ptr"),3,0)
00e74     1A 00 00 FF 
00e78     E8 2F 06 F6 | 	mov	arg03, ##@LR__0198
00e7c     00 2A 06 F6 | 	mov	arg01, #0
00e80     20 2C 06 F6 | 	mov	arg02, #32
00e84     03 30 06 F6 | 	mov	arg04, #3
00e88     00 32 06 F6 | 	mov	arg05, #0
00e8c     2C 0A B0 FD | 	call	#_outtextxycg
00e90                 | '     outtextxycg(0,48,string("buflen"),3,0)
00e90     1A 00 00 FF 
00e94     F0 2F 06 F6 | 	mov	arg03, ##@LR__0199
00e98     00 2A 06 F6 | 	mov	arg01, #0
00e9c     30 2C 06 F6 | 	mov	arg02, #48
00ea0     03 30 06 F6 | 	mov	arg04, #3
00ea4     00 32 06 F6 | 	mov	arg05, #0
00ea8     10 0A B0 FD | 	call	#_outtextxycg
00eac                 | '     outtextxycg(0,64,string("lines"),3,0)
00eac     1A 00 00 FF 
00eb0     F7 2F 06 F6 | 	mov	arg03, ##@LR__0200
00eb4     00 2A 06 F6 | 	mov	arg01, #0
00eb8     40 2C 06 F6 | 	mov	arg02, #64
00ebc     03 30 06 F6 | 	mov	arg04, #3
00ec0     00 32 06 F6 | 	mov	arg05, #0
00ec4     F4 09 B0 FD | 	call	#_outtextxycg
00ec8                 | '     outtextxycg(64,0,inttostr(amode),2,0)
00ec8     40 40 06 F6 | 	mov	local07, #64
00ecc     00 42 06 F6 | 	mov	local08, #0
00ed0     32 2B 02 F6 | 	mov	arg01, local25
00ed4     50 0F B0 FD | 	call	#_inttostr
00ed8     E4 2E 02 F6 | 	mov	arg03, result1
00edc     20 2B 02 F6 | 	mov	arg01, local07
00ee0     21 2D 02 F6 | 	mov	arg02, local08
00ee4     02 30 06 F6 | 	mov	arg04, #2
00ee8     00 32 06 F6 | 	mov	arg05, #0
00eec     CC 09 B0 FD | 	call	#_outtextxycg
00ef0                 | '     outtextxycg(64,16,inttostr(cpl),2,0)
00ef0     40 40 06 F6 | 	mov	local07, #64
00ef4     10 42 06 F6 | 	mov	local08, #16
00ef8     90 BA 05 F1 | 	add	objptr, #144
00efc     DD 2A 02 FB | 	rdlong	arg01, objptr
00f00     90 BA 85 F1 | 	sub	objptr, #144
00f04     20 0F B0 FD | 	call	#_inttostr
00f08     E4 2E 02 F6 | 	mov	arg03, result1
00f0c     20 2B 02 F6 | 	mov	arg01, local07
00f10     21 2D 02 F6 | 	mov	arg02, local08
00f14     02 30 06 F6 | 	mov	arg04, #2
00f18     00 32 06 F6 | 	mov	arg05, #0
00f1c     9C 09 B0 FD | 	call	#_outtextxycg
00f20                 | '     outtextxycg(64,32,inttostr(buf_ptr),2,0)
00f20     40 40 06 F6 | 	mov	local07, #64
00f24     20 42 06 F6 | 	mov	local08, #32
00f28     DD 2A 02 FB | 	rdlong	arg01, objptr
00f2c     F8 0E B0 FD | 	call	#_inttostr
00f30     E4 2E 02 F6 | 	mov	arg03, result1
00f34     20 2B 02 F6 | 	mov	arg01, local07
00f38     21 2D 02 F6 | 	mov	arg02, local08
00f3c     02 30 06 F6 | 	mov	arg04, #2
00f40     00 32 06 F6 | 	mov	arg05, #0
00f44     74 09 B0 FD | 	call	#_outtextxycg
00f48     30 BA 05 F1 | 	add	objptr, #48
00f4c     DD 2A 02 FB | 	rdlong	arg01, objptr
00f50     30 BA 85 F1 | 	sub	objptr, #48
00f54     02 2A 66 F0 | 	shl	arg01, #2
00f58                 | '     outtextxycg(64,48,inttostr(buflen*4),2,0)
00f58     40 40 06 F6 | 	mov	local07, #64
00f5c     30 42 06 F6 | 	mov	local08, #48
00f60     C4 0E B0 FD | 	call	#_inttostr
00f64     E4 2E 02 F6 | 	mov	arg03, result1
00f68     20 2B 02 F6 | 	mov	arg01, local07
00f6c     21 2D 02 F6 | 	mov	arg02, local08
00f70     02 30 06 F6 | 	mov	arg04, #2
00f74     00 32 06 F6 | 	mov	arg05, #0
00f78     40 09 B0 FD | 	call	#_outtextxycg
00f7c                 | '     outtextxycg(64,64,inttostr(lines),2,0)
00f7c     40 40 06 F6 | 	mov	local07, #64
00f80     40 42 06 F6 | 	mov	local08, #64
00f84     94 BA 05 F1 | 	add	objptr, #148
00f88     DD 2A 02 FB | 	rdlong	arg01, objptr
00f8c     94 BA 85 F1 | 	sub	objptr, #148
00f90     94 0E B0 FD | 	call	#_inttostr
00f94     E4 2E 02 F6 | 	mov	arg03, result1
00f98     20 2B 02 F6 | 	mov	arg01, local07
00f9c     21 2D 02 F6 | 	mov	arg02, local08
00fa0     02 30 06 F6 | 	mov	arg04, #2
00fa4     00 32 06 F6 | 	mov	arg05, #0
00fa8     10 09 B0 FD | 	call	#_outtextxycg
00fac     0C 03 90 FD | 	jmp	#LR__0013
00fb0                 | LR__0009
00fb0                 | '   elseif (ccc==2)
00fb0     02 46 0E F2 | 	cmp	local10, #2 wz
00fb4     80 01 90 5D |  if_ne	jmp	#LR__0010
00fb8                 | '     cls(0,0)
00fb8     00 2A 06 F6 | 	mov	arg01, #0
00fbc     00 2C 06 F6 | 	mov	arg02, #0
00fc0     28 0D B0 FD | 	call	#_cls
00fc4                 | '     outtextxycg(0,0,string("mode"),9,0)
00fc4     1A 00 00 FF 
00fc8     FD 2F 06 F6 | 	mov	arg03, ##@LR__0201
00fcc     00 2A 06 F6 | 	mov	arg01, #0
00fd0     00 2C 06 F6 | 	mov	arg02, #0
00fd4     09 30 06 F6 | 	mov	arg04, #9
00fd8     00 32 06 F6 | 	mov	arg05, #0
00fdc     DC 08 B0 FD | 	call	#_outtextxycg
00fe0                 | '     outtextxycg(0,16,string("cpl"),9,0)'
00fe0     1B 00 00 FF 
00fe4     02 2E 06 F6 | 	mov	arg03, ##@LR__0202
00fe8     00 2A 06 F6 | 	mov	arg01, #0
00fec     10 2C 06 F6 | 	mov	arg02, #16
00ff0     09 30 06 F6 | 	mov	arg04, #9
00ff4     00 32 06 F6 | 	mov	arg05, #0
00ff8     C0 08 B0 FD | 	call	#_outtextxycg
00ffc                 | '     outtextxycg(0,32,string("buf_ptr"),9,0)
00ffc     1B 00 00 FF 
01000     06 2E 06 F6 | 	mov	arg03, ##@LR__0203
01004     00 2A 06 F6 | 	mov	arg01, #0
01008     20 2C 06 F6 | 	mov	arg02, #32
0100c     09 30 06 F6 | 	mov	arg04, #9
01010     00 32 06 F6 | 	mov	arg05, #0
01014     A4 08 B0 FD | 	call	#_outtextxycg
01018                 | '     outtextxycg(0,48,string("buflen"),9,0)
01018     1B 00 00 FF 
0101c     0E 2E 06 F6 | 	mov	arg03, ##@LR__0204
01020     00 2A 06 F6 | 	mov	arg01, #0
01024     30 2C 06 F6 | 	mov	arg02, #48
01028     09 30 06 F6 | 	mov	arg04, #9
0102c     00 32 06 F6 | 	mov	arg05, #0
01030     88 08 B0 FD | 	call	#_outtextxycg
01034                 | '     outtextxycg(0,64,string("lines"),9,0)
01034     1B 00 00 FF 
01038     15 2E 06 F6 | 	mov	arg03, ##@LR__0205
0103c     00 2A 06 F6 | 	mov	arg01, #0
01040     40 2C 06 F6 | 	mov	arg02, #64
01044     09 30 06 F6 | 	mov	arg04, #9
01048     00 32 06 F6 | 	mov	arg05, #0
0104c     6C 08 B0 FD | 	call	#_outtextxycg
01050                 | '     outtextxycg(64,0,inttostr(amode),4,0)
01050     40 40 06 F6 | 	mov	local07, #64
01054     00 42 06 F6 | 	mov	local08, #0
01058     32 2B 02 F6 | 	mov	arg01, local25
0105c     C8 0D B0 FD | 	call	#_inttostr
01060     E4 2E 02 F6 | 	mov	arg03, result1
01064     20 2B 02 F6 | 	mov	arg01, local07
01068     21 2D 02 F6 | 	mov	arg02, local08
0106c     04 30 06 F6 | 	mov	arg04, #4
01070     00 32 06 F6 | 	mov	arg05, #0
01074     44 08 B0 FD | 	call	#_outtextxycg
01078                 | '     outtextxycg(64,16,inttostr(cpl),4,0)
01078     40 40 06 F6 | 	mov	local07, #64
0107c     10 42 06 F6 | 	mov	local08, #16
01080     90 BA 05 F1 | 	add	objptr, #144
01084     DD 2A 02 FB | 	rdlong	arg01, objptr
01088     90 BA 85 F1 | 	sub	objptr, #144
0108c     98 0D B0 FD | 	call	#_inttostr
01090     E4 2E 02 F6 | 	mov	arg03, result1
01094     20 2B 02 F6 | 	mov	arg01, local07
01098     21 2D 02 F6 | 	mov	arg02, local08
0109c     04 30 06 F6 | 	mov	arg04, #4
010a0     00 32 06 F6 | 	mov	arg05, #0
010a4     14 08 B0 FD | 	call	#_outtextxycg
010a8                 | '     outtextxycg(64,32,inttostr(buf_ptr),4,0)
010a8     40 40 06 F6 | 	mov	local07, #64
010ac     20 42 06 F6 | 	mov	local08, #32
010b0     DD 2A 02 FB | 	rdlong	arg01, objptr
010b4     70 0D B0 FD | 	call	#_inttostr
010b8     E4 2E 02 F6 | 	mov	arg03, result1
010bc     20 2B 02 F6 | 	mov	arg01, local07
010c0     21 2D 02 F6 | 	mov	arg02, local08
010c4     04 30 06 F6 | 	mov	arg04, #4
010c8     00 32 06 F6 | 	mov	arg05, #0
010cc     EC 07 B0 FD | 	call	#_outtextxycg
010d0     30 BA 05 F1 | 	add	objptr, #48
010d4     DD 2A 02 FB | 	rdlong	arg01, objptr
010d8     30 BA 85 F1 | 	sub	objptr, #48
010dc     02 2A 66 F0 | 	shl	arg01, #2
010e0                 | '     outtextxycg(64,48,inttostr(buflen*4),4,0)
010e0     40 40 06 F6 | 	mov	local07, #64
010e4     30 42 06 F6 | 	mov	local08, #48
010e8     3C 0D B0 FD | 	call	#_inttostr
010ec     E4 2E 02 F6 | 	mov	arg03, result1
010f0     20 2B 02 F6 | 	mov	arg01, local07
010f4     21 2D 02 F6 | 	mov	arg02, local08
010f8     04 30 06 F6 | 	mov	arg04, #4
010fc     00 32 06 F6 | 	mov	arg05, #0
01100     B8 07 B0 FD | 	call	#_outtextxycg
01104                 | '     outtextxycg(64,64,inttostr(lines),4,0)
01104     40 40 06 F6 | 	mov	local07, #64
01108     40 42 06 F6 | 	mov	local08, #64
0110c     94 BA 05 F1 | 	add	objptr, #148
01110     DD 2A 02 FB | 	rdlong	arg01, objptr
01114     94 BA 85 F1 | 	sub	objptr, #148
01118     0C 0D B0 FD | 	call	#_inttostr
0111c     E4 2E 02 F6 | 	mov	arg03, result1
01120     20 2B 02 F6 | 	mov	arg01, local07
01124     21 2D 02 F6 | 	mov	arg02, local08
01128     04 30 06 F6 | 	mov	arg04, #4
0112c     00 32 06 F6 | 	mov	arg05, #0
01130     88 07 B0 FD | 	call	#_outtextxycg
01134     84 01 90 FD | 	jmp	#LR__0012
01138                 | LR__0010
01138                 | '   elseif (ccc==3)
01138     03 46 0E F2 | 	cmp	local10, #3 wz
0113c     7C 01 90 5D |  if_ne	jmp	#LR__0011
01140                 | '     cls(0,0)
01140     00 2A 06 F6 | 	mov	arg01, #0
01144     00 2C 06 F6 | 	mov	arg02, #0
01148     A0 0B B0 FD | 	call	#_cls
0114c                 | '     outtextxycg(0,0,string("mode"),120,0)
0114c     1B 00 00 FF 
01150     1B 2E 06 F6 | 	mov	arg03, ##@LR__0206
01154     00 2A 06 F6 | 	mov	arg01, #0
01158     00 2C 06 F6 | 	mov	arg02, #0
0115c     78 30 06 F6 | 	mov	arg04, #120
01160     00 32 06 F6 | 	mov	arg05, #0
01164     54 07 B0 FD | 	call	#_outtextxycg
01168                 | '     outtextxycg(0,16,string("cpl"),120,0)'
01168     1B 00 00 FF 
0116c     20 2E 06 F6 | 	mov	arg03, ##@LR__0207
01170     00 2A 06 F6 | 	mov	arg01, #0
01174     10 2C 06 F6 | 	mov	arg02, #16
01178     78 30 06 F6 | 	mov	arg04, #120
0117c     00 32 06 F6 | 	mov	arg05, #0
01180     38 07 B0 FD | 	call	#_outtextxycg
01184                 | '     outtextxycg(0,32,string("buf_ptr"),120,0)
01184     1B 00 00 FF 
01188     24 2E 06 F6 | 	mov	arg03, ##@LR__0208
0118c     00 2A 06 F6 | 	mov	arg01, #0
01190     20 2C 06 F6 | 	mov	arg02, #32
01194     78 30 06 F6 | 	mov	arg04, #120
01198     00 32 06 F6 | 	mov	arg05, #0
0119c     1C 07 B0 FD | 	call	#_outtextxycg
011a0                 | '     outtextxycg(0,48,string("buflen"),120,0)
011a0     1B 00 00 FF 
011a4     2C 2E 06 F6 | 	mov	arg03, ##@LR__0209
011a8     00 2A 06 F6 | 	mov	arg01, #0
011ac     30 2C 06 F6 | 	mov	arg02, #48
011b0     78 30 06 F6 | 	mov	arg04, #120
011b4     00 32 06 F6 | 	mov	arg05, #0
011b8     00 07 B0 FD | 	call	#_outtextxycg
011bc                 | '     outtextxycg(0,64,string("lines"),120,0)
011bc     1B 00 00 FF 
011c0     33 2E 06 F6 | 	mov	arg03, ##@LR__0210
011c4     00 2A 06 F6 | 	mov	arg01, #0
011c8     40 2C 06 F6 | 	mov	arg02, #64
011cc     78 30 06 F6 | 	mov	arg04, #120
011d0     00 32 06 F6 | 	mov	arg05, #0
011d4     E4 06 B0 FD | 	call	#_outtextxycg
011d8                 | '     outtextxycg(64,0,inttostr(amode),40,0)
011d8     40 40 06 F6 | 	mov	local07, #64
011dc     00 42 06 F6 | 	mov	local08, #0
011e0     32 2B 02 F6 | 	mov	arg01, local25
011e4     40 0C B0 FD | 	call	#_inttostr
011e8     E4 2E 02 F6 | 	mov	arg03, result1
011ec     20 2B 02 F6 | 	mov	arg01, local07
011f0     21 2D 02 F6 | 	mov	arg02, local08
011f4     28 30 06 F6 | 	mov	arg04, #40
011f8     00 32 06 F6 | 	mov	arg05, #0
011fc     BC 06 B0 FD | 	call	#_outtextxycg
01200                 | '     outtextxycg(64,16,inttostr(cpl),40,0)
01200     40 40 06 F6 | 	mov	local07, #64
01204     10 42 06 F6 | 	mov	local08, #16
01208     90 BA 05 F1 | 	add	objptr, #144
0120c     DD 2A 02 FB | 	rdlong	arg01, objptr
01210     90 BA 85 F1 | 	sub	objptr, #144
01214     10 0C B0 FD | 	call	#_inttostr
01218     E4 2E 02 F6 | 	mov	arg03, result1
0121c     20 2B 02 F6 | 	mov	arg01, local07
01220     21 2D 02 F6 | 	mov	arg02, local08
01224     28 30 06 F6 | 	mov	arg04, #40
01228     00 32 06 F6 | 	mov	arg05, #0
0122c     8C 06 B0 FD | 	call	#_outtextxycg
01230                 | '     outtextxycg(64,32,inttostr(buf_ptr),40,0)
01230     40 40 06 F6 | 	mov	local07, #64
01234     20 42 06 F6 | 	mov	local08, #32
01238     DD 2A 02 FB | 	rdlong	arg01, objptr
0123c     E8 0B B0 FD | 	call	#_inttostr
01240     E4 2E 02 F6 | 	mov	arg03, result1
01244     20 2B 02 F6 | 	mov	arg01, local07
01248     21 2D 02 F6 | 	mov	arg02, local08
0124c     28 30 06 F6 | 	mov	arg04, #40
01250     00 32 06 F6 | 	mov	arg05, #0
01254     64 06 B0 FD | 	call	#_outtextxycg
01258     30 BA 05 F1 | 	add	objptr, #48
0125c     DD 2A 02 FB | 	rdlong	arg01, objptr
01260     30 BA 85 F1 | 	sub	objptr, #48
01264     02 2A 66 F0 | 	shl	arg01, #2
01268                 | '     outtextxycg(64,48,inttostr(buflen*4),40,0)
01268     40 40 06 F6 | 	mov	local07, #64
0126c     30 42 06 F6 | 	mov	local08, #48
01270     B4 0B B0 FD | 	call	#_inttostr
01274     E4 2E 02 F6 | 	mov	arg03, result1
01278     20 2B 02 F6 | 	mov	arg01, local07
0127c     21 2D 02 F6 | 	mov	arg02, local08
01280     28 30 06 F6 | 	mov	arg04, #40
01284     00 32 06 F6 | 	mov	arg05, #0
01288     30 06 B0 FD | 	call	#_outtextxycg
0128c                 | '     outtextxycg(64,64,inttostr(lines),40,0)
0128c     40 40 06 F6 | 	mov	local07, #64
01290     40 42 06 F6 | 	mov	local08, #64
01294     94 BA 05 F1 | 	add	objptr, #148
01298     DD 2A 02 FB | 	rdlong	arg01, objptr
0129c     94 BA 85 F1 | 	sub	objptr, #148
012a0     84 0B B0 FD | 	call	#_inttostr
012a4     E4 2E 02 F6 | 	mov	arg03, result1
012a8     20 2B 02 F6 | 	mov	arg01, local07
012ac     21 2D 02 F6 | 	mov	arg02, local08
012b0     28 30 06 F6 | 	mov	arg04, #40
012b4     00 32 06 F6 | 	mov	arg05, #0
012b8     00 06 B0 FD | 	call	#_outtextxycg
012bc                 | LR__0011
012bc                 | LR__0012
012bc                 | LR__0013
012bc                 | LR__0014
012bc                 | '   waitvbl(300)
012bc     2C 2B 06 F6 | 	mov	arg01, #300
012c0     B4 09 B0 FD | 	call	#_waitvbl
012c4     01 64 06 F1 | 	add	local25, #1
012c8     02 00 00 FF 
012cc     00 64 5E F2 | 	cmps	local25, ##1024 wcz
012d0     BC F9 9F CD |  if_b	jmp	#LR__0007
012d4                 | ' 
012d4                 | ' repeat
012d4                 | LR__0015
012d4     FC FF 9F FD | 	jmp	#LR__0015
012d8     AF F0 03 F6 | 	mov	ptra, fp
012dc     BF 00 A0 FD | 	call	#popregs_
012e0                 | _dummy_ret
012e0     2D 00 64 FD | 	ret
012e4                 | 
012e4                 | ' 
012e4                 | ' '------------------------------
012e4                 | ' 
012e4                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
012e4                 | _fcircle
012e4     0D 5A 05 F6 | 	mov	COUNT_, #13
012e8     B0 00 A0 FD | 	call	#pushregs_
012ec     15 35 02 F6 | 	mov	local01, arg01
012f0     16 37 02 F6 | 	mov	local02, arg02
012f4     17 39 02 F6 | 	mov	local03, arg03
012f8     18 3B 02 F6 | 	mov	local04, arg04
012fc     1C 3D 02 F6 | 	mov	local05, local03
01300     02 3C 66 F0 | 	shl	local05, #2
01304     05 3E 06 F6 | 	mov	local06, #5
01308     1E 3F 82 F1 | 	sub	local06, local05
0130c                 | ' 
0130c                 | ' d:=5-4*r
0130c                 | ' x:=0
0130c     00 40 06 F6 | 	mov	local07, #0
01310                 | ' y:=r
01310     FF FF 7F FF 
01314     FE 39 06 FD | 	qmul	local03, ##-2
01318     18 42 62 FD | 	getqx	local08
0131c     05 42 06 F1 | 	add	local08, #5
01320     02 42 66 F0 | 	shl	local08, #2
01324                 | ' da:=(-2*r+5)*4
01324                 | ' db:=3*4
01324     0C 44 06 F6 | 	mov	local09, #12
01328                 | ' repeat while (x<=y) 
01328                 | LR__0016
01328     1C 41 5A F2 | 	cmps	local07, local03 wcz
0132c     C4 00 90 1D |  if_a	jmp	#LR__0018
01330     1A 47 02 F6 | 	mov	local10, local01
01334     20 47 82 F1 | 	sub	local10, local07
01338     1B 31 02 F6 | 	mov	arg04, local02
0133c     1C 31 82 F1 | 	sub	arg04, local03
01340     1A 49 02 F6 | 	mov	local11, local01
01344     20 49 02 F1 | 	add	local11, local07
01348                 | '   line(x0-x,y0-y,x0+x,y0-y,c)
01348     23 2B 02 F6 | 	mov	arg01, local10
0134c     18 2D 02 F6 | 	mov	arg02, arg04
01350     24 2F 02 F6 | 	mov	arg03, local11
01354     1D 33 02 F6 | 	mov	arg05, local04
01358     BC 02 B0 FD | 	call	#_line
0135c     1B 31 02 F6 | 	mov	arg04, local02
01360     1C 31 02 F1 | 	add	arg04, local03
01364                 | '   line(x0-x,y0+y,x0+x,y0+y,c)
01364     23 2B 02 F6 | 	mov	arg01, local10
01368     18 2D 02 F6 | 	mov	arg02, arg04
0136c     24 2F 02 F6 | 	mov	arg03, local11
01370     1D 33 02 F6 | 	mov	arg05, local04
01374     A0 02 B0 FD | 	call	#_line
01378     1A 4B 02 F6 | 	mov	local12, local01
0137c     1C 4B 82 F1 | 	sub	local12, local03
01380     1B 31 02 F6 | 	mov	arg04, local02
01384     20 31 82 F1 | 	sub	arg04, local07
01388     1A 4D 02 F6 | 	mov	local13, local01
0138c     1C 4D 02 F1 | 	add	local13, local03
01390                 | '   line(x0-y,y0-x,x0+y,y0-x,c)
01390     25 2B 02 F6 | 	mov	arg01, local12
01394     18 2D 02 F6 | 	mov	arg02, arg04
01398     26 2F 02 F6 | 	mov	arg03, local13
0139c     1D 33 02 F6 | 	mov	arg05, local04
013a0     74 02 B0 FD | 	call	#_line
013a4     1B 31 02 F6 | 	mov	arg04, local02
013a8     20 31 02 F1 | 	add	arg04, local07
013ac                 | '   line(x0-y,y0+x,x0+y,y0+x,c)
013ac     25 2B 02 F6 | 	mov	arg01, local12
013b0     18 2D 02 F6 | 	mov	arg02, arg04
013b4     26 2F 02 F6 | 	mov	arg03, local13
013b8     1D 33 02 F6 | 	mov	arg05, local04
013bc     58 02 B0 FD | 	call	#_line
013c0                 | '   if d>0 
013c0     00 3E 5E F2 | 	cmps	local06, #0 wcz
013c4     18 00 90 ED |  if_be	jmp	#LR__0017
013c8                 | '     d+=da
013c8     21 3F 02 F1 | 	add	local06, local08
013cc                 | '     y-=1
013cc     01 38 86 F1 | 	sub	local03, #1
013d0                 | '     x+=1
013d0     01 40 06 F1 | 	add	local07, #1
013d4                 | '     da+=4*4
013d4     10 42 06 F1 | 	add	local08, #16
013d8                 | '     db+=2*4
013d8     08 44 06 F1 | 	add	local09, #8
013dc                 | '   else
013dc     48 FF 9F FD | 	jmp	#LR__0016
013e0                 | LR__0017
013e0                 | '     d+=db
013e0     22 3F 02 F1 | 	add	local06, local09
013e4                 | '     x+=1
013e4     01 40 06 F1 | 	add	local07, #1
013e8                 | '     da+=2*4
013e8     08 42 06 F1 | 	add	local08, #8
013ec                 | '     db+=2*4
013ec     08 44 06 F1 | 	add	local09, #8
013f0     34 FF 9F FD | 	jmp	#LR__0016
013f4                 | LR__0018
013f4     AF F0 03 F6 | 	mov	ptra, fp
013f8     BF 00 A0 FD | 	call	#popregs_
013fc                 | _fcircle_ret
013fc     2D 00 64 FD | 	ret
01400                 | 
01400                 | '  
01400                 | '  
01400                 | '  
01400                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
01400                 | _circle
01400     15 5A 05 F6 | 	mov	COUNT_, #21
01404     B0 00 A0 FD | 	call	#pushregs_
01408     15 35 02 F6 | 	mov	local01, arg01
0140c     16 37 02 F6 | 	mov	local02, arg02
01410     17 39 02 F6 | 	mov	local03, arg03
01414     18 3B 02 F6 | 	mov	local04, arg04
01418     1C 3D 02 F6 | 	mov	local05, local03
0141c     02 3C 66 F0 | 	shl	local05, #2
01420     05 3E 06 F6 | 	mov	local06, #5
01424     1E 3F 82 F1 | 	sub	local06, local05
01428                 | ' 
01428                 | '  
01428                 | ' d:=5-4*r
01428                 | ' x:=0
01428     00 40 06 F6 | 	mov	local07, #0
0142c                 | ' y:=r
0142c     FF FF 7F FF 
01430     FE 39 06 FD | 	qmul	local03, ##-2
01434     18 42 62 FD | 	getqx	local08
01438     05 42 06 F1 | 	add	local08, #5
0143c     02 42 66 F0 | 	shl	local08, #2
01440                 | ' da:=(-2*r+5)*4
01440                 | ' db:=3*4
01440     0C 44 06 F6 | 	mov	local09, #12
01444                 | ' repeat while (x<=y) 
01444                 | LR__0019
01444     1C 41 5A F2 | 	cmps	local07, local03 wcz
01448     C0 01 90 1D |  if_a	jmp	#LR__0021
0144c     1A 47 02 F6 | 	mov	local10, local01
01450     20 47 82 F1 | 	sub	local10, local07
01454     1B 49 02 F6 | 	mov	local11, local02
01458     1C 49 82 F1 | 	sub	local11, local03
0145c                 | '   putpixel(x0-x,y0-y,c)
0145c     D8 BA 05 F1 | 	add	objptr, #216
01460     DD 4A 02 FB | 	rdlong	local12, objptr
01464     D8 BA 85 F1 | 	sub	objptr, #216
01468     25 4D 02 FB | 	rdlong	local13, local12
0146c     04 4A 06 F1 | 	add	local12, #4
01470     25 4F 02 FB | 	rdlong	local14, local12
01474     23 2B 02 F6 | 	mov	arg01, local10
01478     24 2D 02 F6 | 	mov	arg02, local11
0147c     1D 2F 02 F6 | 	mov	arg03, local04
01480     DD 50 02 F6 | 	mov	local15, objptr
01484     26 BB 01 F6 | 	mov	objptr, local13
01488     2D 4E 62 FD | 	call	local14
0148c     1B 53 02 F6 | 	mov	local16, local02
01490     1C 53 02 F1 | 	add	local16, local03
01494                 | '   putpixel(x0-x,y0+y,c)
01494     D8 50 06 F1 | 	add	local15, #216
01498     28 4B 02 FB | 	rdlong	local12, local15
0149c     D8 50 86 F1 | 	sub	local15, #216
014a0     25 BB 01 FB | 	rdlong	objptr, local12
014a4     04 4A 06 F1 | 	add	local12, #4
014a8     25 4F 02 FB | 	rdlong	local14, local12
014ac     23 2B 02 F6 | 	mov	arg01, local10
014b0     29 2D 02 F6 | 	mov	arg02, local16
014b4     1D 2F 02 F6 | 	mov	arg03, local04
014b8     2D 4E 62 FD | 	call	local14
014bc     1A 55 02 F6 | 	mov	local17, local01
014c0     20 55 02 F1 | 	add	local17, local07
014c4                 | '   putpixel(x0+x,y0-y,c)
014c4     D8 50 06 F1 | 	add	local15, #216
014c8     28 4B 02 FB | 	rdlong	local12, local15
014cc     D8 50 86 F1 | 	sub	local15, #216
014d0     25 BB 01 FB | 	rdlong	objptr, local12
014d4     04 4A 06 F1 | 	add	local12, #4
014d8     25 4F 02 FB | 	rdlong	local14, local12
014dc     2A 2B 02 F6 | 	mov	arg01, local17
014e0     24 2D 02 F6 | 	mov	arg02, local11
014e4     1D 2F 02 F6 | 	mov	arg03, local04
014e8     2D 4E 62 FD | 	call	local14
014ec                 | '   putpixel(x0+x,y0+y,c)
014ec     D8 50 06 F1 | 	add	local15, #216
014f0     28 4B 02 FB | 	rdlong	local12, local15
014f4     D8 50 86 F1 | 	sub	local15, #216
014f8     25 BB 01 FB | 	rdlong	objptr, local12
014fc     04 4A 06 F1 | 	add	local12, #4
01500     25 4F 02 FB | 	rdlong	local14, local12
01504     2A 2B 02 F6 | 	mov	arg01, local17
01508     29 2D 02 F6 | 	mov	arg02, local16
0150c     1D 2F 02 F6 | 	mov	arg03, local04
01510     2D 4E 62 FD | 	call	local14
01514     1A 57 02 F6 | 	mov	local18, local01
01518     1C 57 82 F1 | 	sub	local18, local03
0151c     1B 59 02 F6 | 	mov	local19, local02
01520     20 59 82 F1 | 	sub	local19, local07
01524                 | '   putpixel(x0-y,y0-x,c)
01524     D8 50 06 F1 | 	add	local15, #216
01528     28 4B 02 FB | 	rdlong	local12, local15
0152c     D8 50 86 F1 | 	sub	local15, #216
01530     25 BB 01 FB | 	rdlong	objptr, local12
01534     04 4A 06 F1 | 	add	local12, #4
01538     25 4F 02 FB | 	rdlong	local14, local12
0153c     2B 2B 02 F6 | 	mov	arg01, local18
01540     2C 2D 02 F6 | 	mov	arg02, local19
01544     1D 2F 02 F6 | 	mov	arg03, local04
01548     2D 4E 62 FD | 	call	local14
0154c     1B 5B 02 F6 | 	mov	local20, local02
01550     20 5B 02 F1 | 	add	local20, local07
01554                 | '   putpixel(x0-y,y0+x,c)
01554     D8 50 06 F1 | 	add	local15, #216
01558     28 4B 02 FB | 	rdlong	local12, local15
0155c     D8 50 86 F1 | 	sub	local15, #216
01560     25 BB 01 FB | 	rdlong	objptr, local12
01564     04 4A 06 F1 | 	add	local12, #4
01568     25 4F 02 FB | 	rdlong	local14, local12
0156c     2B 2B 02 F6 | 	mov	arg01, local18
01570     2D 2D 02 F6 | 	mov	arg02, local20
01574     1D 2F 02 F6 | 	mov	arg03, local04
01578     2D 4E 62 FD | 	call	local14
0157c     1A 5D 02 F6 | 	mov	local21, local01
01580     1C 5D 02 F1 | 	add	local21, local03
01584                 | '   putpixel(x0+y,y0-x,c)
01584     D8 50 06 F1 | 	add	local15, #216
01588     28 4B 02 FB | 	rdlong	local12, local15
0158c     D8 50 86 F1 | 	sub	local15, #216
01590     25 BB 01 FB | 	rdlong	objptr, local12
01594     04 4A 06 F1 | 	add	local12, #4
01598     25 4F 02 FB | 	rdlong	local14, local12
0159c     2E 2B 02 F6 | 	mov	arg01, local21
015a0     2C 2D 02 F6 | 	mov	arg02, local19
015a4     1D 2F 02 F6 | 	mov	arg03, local04
015a8     2D 4E 62 FD | 	call	local14
015ac                 | '   putpixel(x0+y,y0+x,c)
015ac     D8 50 06 F1 | 	add	local15, #216
015b0     28 4B 02 FB | 	rdlong	local12, local15
015b4     D8 50 86 F1 | 	sub	local15, #216
015b8     25 BB 01 FB | 	rdlong	objptr, local12
015bc     04 4A 06 F1 | 	add	local12, #4
015c0     25 4F 02 FB | 	rdlong	local14, local12
015c4     2E 2B 02 F6 | 	mov	arg01, local21
015c8     2D 2D 02 F6 | 	mov	arg02, local20
015cc     1D 2F 02 F6 | 	mov	arg03, local04
015d0     2D 4E 62 FD | 	call	local14
015d4     28 BB 01 F6 | 	mov	objptr, local15
015d8                 | '   if d>0 
015d8     00 3E 5E F2 | 	cmps	local06, #0 wcz
015dc     18 00 90 ED |  if_be	jmp	#LR__0020
015e0                 | '     d+=da
015e0     21 3F 02 F1 | 	add	local06, local08
015e4                 | '     y-=1
015e4     01 38 86 F1 | 	sub	local03, #1
015e8                 | '     x+=1
015e8     01 40 06 F1 | 	add	local07, #1
015ec                 | '     da+=4*4
015ec     10 42 06 F1 | 	add	local08, #16
015f0                 | '     db+=2*4
015f0     08 44 06 F1 | 	add	local09, #8
015f4                 | '   else
015f4     4C FE 9F FD | 	jmp	#LR__0019
015f8                 | LR__0020
015f8                 | '     d+=db
015f8     22 3F 02 F1 | 	add	local06, local09
015fc                 | '     x+=1
015fc     01 40 06 F1 | 	add	local07, #1
01600                 | '     da+=2*4
01600     08 42 06 F1 | 	add	local08, #8
01604                 | '     db+=2*4
01604     08 44 06 F1 | 	add	local09, #8
01608     38 FE 9F FD | 	jmp	#LR__0019
0160c                 | LR__0021
0160c     AF F0 03 F6 | 	mov	ptra, fp
01610     BF 00 A0 FD | 	call	#popregs_
01614                 | _circle_ret
01614     2D 00 64 FD | 	ret
01618                 | 
01618                 | ' 
01618                 | ' 
01618                 | ' pub line(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y
01618                 | _line
01618     12 5A 05 F6 | 	mov	COUNT_, #18
0161c     B0 00 A0 FD | 	call	#pushregs_
01620     15 35 02 F6 | 	mov	local01, arg01
01624     16 37 02 F6 | 	mov	local02, arg02
01628     17 39 02 F6 | 	mov	local03, arg03
0162c     18 3B 02 F6 | 	mov	local04, arg04
01630     19 3D 02 F6 | 	mov	local05, arg05
01634                 | ' 
01634                 | ' 
01634                 | ' x:=x1
01634     1A 3F 02 F6 | 	mov	local06, local01
01638                 | ' y:=y1
01638     1B 41 02 F6 | 	mov	local07, local02
0163c                 | ' 
0163c                 | ' if (x1<x2) 
0163c     1C 35 5A F2 | 	cmps	local01, local03 wcz
01640     10 00 90 3D |  if_ae	jmp	#LR__0022
01644                 | '   xi:=1
01644     01 42 06 F6 | 	mov	local08, #1
01648     1C 45 02 F6 | 	mov	local09, local03
0164c     1A 45 82 F1 | 	sub	local09, local01
01650                 | '   dx:=x2-x1
01650                 | ' else
01650     0C 00 90 FD | 	jmp	#LR__0023
01654                 | LR__0022
01654                 | '   xi:=-1
01654     01 42 66 F6 | 	neg	local08, #1
01658     1C 35 82 F1 | 	sub	local01, local03
0165c                 | '   dx:=x1-x2
0165c     1A 45 02 F6 | 	mov	local09, local01
01660                 | LR__0023
01660                 | '   
01660                 | ' if (y1<y2) 
01660     1D 37 5A F2 | 	cmps	local02, local04 wcz
01664     10 00 90 3D |  if_ae	jmp	#LR__0024
01668                 | '   yi:=1
01668     01 46 06 F6 | 	mov	local10, #1
0166c     1D 49 02 F6 | 	mov	local11, local04
01670     1B 49 82 F1 | 	sub	local11, local02
01674                 | '   dy:=y2-y1
01674                 | ' else
01674     0C 00 90 FD | 	jmp	#LR__0025
01678                 | LR__0024
01678                 | '   yi:=-1
01678     01 46 66 F6 | 	neg	local10, #1
0167c     1D 37 82 F1 | 	sub	local02, local04
01680                 | '   dy:=y1-y2
01680     1B 49 02 F6 | 	mov	local11, local02
01684                 | LR__0025
01684                 | ' 
01684                 | ' putpixel(x,y,c)
01684     D8 BA 05 F1 | 	add	objptr, #216
01688     DD 4A 02 FB | 	rdlong	local12, objptr
0168c     D8 BA 85 F1 | 	sub	objptr, #216
01690     25 4D 02 FB | 	rdlong	local13, local12
01694     04 4A 06 F1 | 	add	local12, #4
01698     25 4F 02 FB | 	rdlong	local14, local12
0169c     1F 2B 02 F6 | 	mov	arg01, local06
016a0     20 2D 02 F6 | 	mov	arg02, local07
016a4     1E 2F 02 F6 | 	mov	arg03, local05
016a8     DD 50 02 F6 | 	mov	local15, objptr
016ac     26 BB 01 F6 | 	mov	objptr, local13
016b0     2D 4E 62 FD | 	call	local14
016b4     28 BB 01 F6 | 	mov	objptr, local15
016b8                 | ' 
016b8                 | ' if (dx>dy)
016b8     24 45 5A F2 | 	cmps	local09, local11 wcz
016bc     7C 00 90 ED |  if_be	jmp	#LR__0029
016c0     24 53 02 F6 | 	mov	local16, local11
016c4     22 53 82 F1 | 	sub	local16, local09
016c8     01 52 66 F0 | 	shl	local16, #1
016cc                 | '   ai:=(dy-dx)*2
016cc     01 48 66 F0 | 	shl	local11, #1
016d0     24 55 02 F6 | 	mov	local17, local11
016d4                 | '   bi:=dy*2
016d4     2A 57 02 F6 | 	mov	local18, local17
016d8     22 57 82 F1 | 	sub	local18, local09
016dc                 | '   d:= bi-dx
016dc                 | '   repeat while (x<>x2) 
016dc                 | LR__0026
016dc     1C 3F 0A F2 | 	cmp	local06, local03 wz
016e0     D4 00 90 AD |  if_e	jmp	#LR__0034
016e4                 | '     if (d>=0) 
016e4     00 56 5E F2 | 	cmps	local18, #0 wcz
016e8     10 00 90 CD |  if_b	jmp	#LR__0027
016ec                 | '       x+=xi
016ec     21 3F 02 F1 | 	add	local06, local08
016f0                 | '       y+=yi
016f0     23 41 02 F1 | 	add	local07, local10
016f4                 | '       d+=ai
016f4     29 57 02 F1 | 	add	local18, local16
016f8                 | '     else
016f8     08 00 90 FD | 	jmp	#LR__0028
016fc                 | LR__0027
016fc                 | '       d+=bi
016fc     2A 57 02 F1 | 	add	local18, local17
01700                 | '       x+=xi
01700     21 3F 02 F1 | 	add	local06, local08
01704                 | LR__0028
01704                 | '     putpixel(x,y,c)
01704     D8 BA 05 F1 | 	add	objptr, #216
01708     DD 4A 02 FB | 	rdlong	local12, objptr
0170c     D8 BA 85 F1 | 	sub	objptr, #216
01710     25 4D 02 FB | 	rdlong	local13, local12
01714     04 4A 06 F1 | 	add	local12, #4
01718     25 4F 02 FB | 	rdlong	local14, local12
0171c     1F 2B 02 F6 | 	mov	arg01, local06
01720     20 2D 02 F6 | 	mov	arg02, local07
01724     1E 2F 02 F6 | 	mov	arg03, local05
01728     DD 50 02 F6 | 	mov	local15, objptr
0172c     26 BB 01 F6 | 	mov	objptr, local13
01730     2D 4E 62 FD | 	call	local14
01734     28 BB 01 F6 | 	mov	objptr, local15
01738     A0 FF 9F FD | 	jmp	#LR__0026
0173c                 | ' else
0173c                 | LR__0029
0173c     22 53 02 F6 | 	mov	local16, local09
01740     24 53 82 F1 | 	sub	local16, local11
01744     01 52 66 F0 | 	shl	local16, #1
01748                 | '   ai:=(dx-dy)*2
01748     01 44 66 F0 | 	shl	local09, #1
0174c     22 55 02 F6 | 	mov	local17, local09
01750                 | '   bi:=dx*2
01750     2A 57 02 F6 | 	mov	local18, local17
01754     24 57 82 F1 | 	sub	local18, local11
01758                 | '   d:=bi-dy
01758                 | '   repeat while (y<>y2)
01758                 | LR__0030
01758     1D 41 0A F2 | 	cmp	local07, local04 wz
0175c     58 00 90 AD |  if_e	jmp	#LR__0033
01760                 | '     if (d>=0)
01760     00 56 5E F2 | 	cmps	local18, #0 wcz
01764     10 00 90 CD |  if_b	jmp	#LR__0031
01768                 | '       x+=xi
01768     21 3F 02 F1 | 	add	local06, local08
0176c                 | '       y+=yi
0176c     23 41 02 F1 | 	add	local07, local10
01770                 | '       d+=ai
01770     29 57 02 F1 | 	add	local18, local16
01774                 | '     else
01774     08 00 90 FD | 	jmp	#LR__0032
01778                 | LR__0031
01778                 | '       d+=bi
01778     2A 57 02 F1 | 	add	local18, local17
0177c                 | '       y+=yi
0177c     23 41 02 F1 | 	add	local07, local10
01780                 | LR__0032
01780                 | '     putpixel(x, y,c)
01780     D8 BA 05 F1 | 	add	objptr, #216
01784     DD 4A 02 FB | 	rdlong	local12, objptr
01788     D8 BA 85 F1 | 	sub	objptr, #216
0178c     25 4D 02 FB | 	rdlong	local13, local12
01790     04 4A 06 F1 | 	add	local12, #4
01794     25 4F 02 FB | 	rdlong	local14, local12
01798     1F 2B 02 F6 | 	mov	arg01, local06
0179c     20 2D 02 F6 | 	mov	arg02, local07
017a0     1E 2F 02 F6 | 	mov	arg03, local05
017a4     DD 50 02 F6 | 	mov	local15, objptr
017a8     26 BB 01 F6 | 	mov	objptr, local13
017ac     2D 4E 62 FD | 	call	local14
017b0     28 BB 01 F6 | 	mov	objptr, local15
017b4     A0 FF 9F FD | 	jmp	#LR__0030
017b8                 | LR__0033
017b8                 | LR__0034
017b8     AF F0 03 F6 | 	mov	ptra, fp
017bc     BF 00 A0 FD | 	call	#popregs_
017c0                 | _line_ret
017c0     2D 00 64 FD | 	ret
017c4                 | 
017c4                 | ' 
017c4                 | ' pub putcharxycg(x,y,achar,f,b) |xx, yy,bb
017c4                 | _putcharxycg
017c4     0E 5A 05 F6 | 	mov	COUNT_, #14
017c8     B0 00 A0 FD | 	call	#pushregs_
017cc     15 35 02 F6 | 	mov	local01, arg01
017d0     16 37 02 F6 | 	mov	local02, arg02
017d4     17 39 02 F6 | 	mov	local03, arg03
017d8     18 3B 02 F6 | 	mov	local04, arg04
017dc     19 3D 02 F6 | 	mov	local05, arg05
017e0     04 38 66 F0 | 	shl	local03, #4
017e4     00 3E 06 F6 | 	mov	local06, #0
017e8                 | LR__0035
017e8     DF 40 02 F6 | 	mov	local07, ptr__dat__
017ec     C8 BA 05 F1 | 	add	objptr, #200
017f0     DD 42 02 FB | 	rdlong	local08, objptr
017f4     C8 BA 85 F1 | 	sub	objptr, #200
017f8     0A 42 66 F0 | 	shl	local08, #10
017fc     21 41 02 F1 | 	add	local07, local08
01800     1C 41 02 F1 | 	add	local07, local03
01804     1F 41 02 F1 | 	add	local07, local06
01808                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
01808     20 45 C2 FA | 	rdbyte	local09, local07
0180c                 | '   repeat xx from 0 to 7
0180c     00 46 06 F6 | 	mov	local10, #0
01810                 | LR__0036
01810                 | '     if (bb&(1<<xx))<>0
01810     23 49 C2 F9 | 	decod	local11, local10
01814     24 45 CA F7 | 	test	local09, local11 wz
01818     40 00 90 AD |  if_e	jmp	#LR__0037
0181c     23 2B 02 F6 | 	mov	arg01, local10
01820     1A 2B 02 F1 | 	add	arg01, local01
01824     1F 2D 02 F6 | 	mov	arg02, local06
01828     1B 2D 02 F1 | 	add	arg02, local02
0182c                 | '       putpixel(xx+x,yy+y,f)
0182c     D8 BA 05 F1 | 	add	objptr, #216
01830     DD 4A 02 FB | 	rdlong	local12, objptr
01834     D8 BA 85 F1 | 	sub	objptr, #216
01838     25 49 02 FB | 	rdlong	local11, local12
0183c     04 4A 06 F1 | 	add	local12, #4
01840     25 4D 02 FB | 	rdlong	local13, local12
01844     1D 2F 02 F6 | 	mov	arg03, local04
01848     DD 4E 02 F6 | 	mov	local14, objptr
0184c     24 BB 01 F6 | 	mov	objptr, local11
01850     2D 4C 62 FD | 	call	local13
01854     27 BB 01 F6 | 	mov	objptr, local14
01858                 | '     else
01858     3C 00 90 FD | 	jmp	#LR__0038
0185c                 | LR__0037
0185c     23 2B 02 F6 | 	mov	arg01, local10
01860     1A 2B 02 F1 | 	add	arg01, local01
01864     1F 2D 02 F6 | 	mov	arg02, local06
01868     1B 2D 02 F1 | 	add	arg02, local02
0186c                 | '       putpixel(xx+x,yy+y,b)
0186c     D8 BA 05 F1 | 	add	objptr, #216
01870     DD 4A 02 FB | 	rdlong	local12, objptr
01874     D8 BA 85 F1 | 	sub	objptr, #216
01878     25 49 02 FB | 	rdlong	local11, local12
0187c     04 4A 06 F1 | 	add	local12, #4
01880     25 4D 02 FB | 	rdlong	local13, local12
01884     1E 2F 02 F6 | 	mov	arg03, local05
01888     DD 4E 02 F6 | 	mov	local14, objptr
0188c     24 BB 01 F6 | 	mov	objptr, local11
01890     2D 4C 62 FD | 	call	local13
01894     27 BB 01 F6 | 	mov	objptr, local14
01898                 | LR__0038
01898     01 46 06 F1 | 	add	local10, #1
0189c     08 46 5E F2 | 	cmps	local10, #8 wcz
018a0     6C FF 9F CD |  if_b	jmp	#LR__0036
018a4     01 3E 06 F1 | 	add	local06, #1
018a8     10 3E 5E F2 | 	cmps	local06, #16 wcz
018ac     38 FF 9F CD |  if_b	jmp	#LR__0035
018b0     AF F0 03 F6 | 	mov	ptra, fp
018b4     BF 00 A0 FD | 	call	#popregs_
018b8                 | _putcharxycg_ret
018b8     2D 00 64 FD | 	ret
018bc                 | 
018bc                 | ' 
018bc                 | ' pub outtextxycg(x,y,text,f,b) | iii,c
018bc                 | _outtextxycg
018bc     0C 5A 05 F6 | 	mov	COUNT_, #12
018c0     B0 00 A0 FD | 	call	#pushregs_
018c4     15 35 02 F6 | 	mov	local01, arg01
018c8     16 37 02 F6 | 	mov	local02, arg02
018cc     17 39 02 F6 | 	mov	local03, arg03
018d0     18 3B 02 F6 | 	mov	local04, arg04
018d4     19 3D 02 F6 | 	mov	local05, arg05
018d8                 | ' 
018d8                 | ' repeat iii from 0 to strsize(text)-1
018d8     00 3E 06 F6 | 	mov	local06, #0
018dc     1C 2B 02 F6 | 	mov	arg01, local03
018e0     00 40 06 F6 | 	mov	local07, #0
018e4     28 E7 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
018e8     93 00 A0 FD | 	call	#FCACHE_LOAD_
018ec                 | LR__0039
018ec     15 43 CA FA | 	rdbyte	local08, arg01 wz
018f0     01 40 06 51 |  if_ne	add	local07, #1
018f4     01 2A 06 51 |  if_ne	add	arg01, #1
018f8     F0 FF 9F 5D |  if_ne	jmp	#LR__0039
018fc                 | LR__0040
018fc     20 C9 01 F6 | 	mov	result1, local07
01900     E4 44 02 F6 | 	mov	local09, result1
01904     01 44 86 F1 | 	sub	local09, #1
01908     00 44 5E F2 | 	cmps	local09, #0 wcz
0190c     01 46 06 16 |  if_a	mov	local10, #1
01910     01 46 66 E6 |  if_be	neg	local10, #1
01914     23 45 02 F1 | 	add	local09, local10
01918                 | LR__0041
01918     1F 49 02 F6 | 	mov	local11, local06
0191c     03 48 66 F0 | 	shl	local11, #3
01920     1A 2B 02 F6 | 	mov	arg01, local01
01924     24 2B 02 F1 | 	add	arg01, local11
01928     1C 4B 02 F6 | 	mov	local12, local03
0192c     1F 4B 02 F1 | 	add	local12, local06
01930                 | '   putcharxycg(x+8*iii,y,byte[text+iii],f,b)
01930     1B 2D 02 F6 | 	mov	arg02, local02
01934     25 2F C2 FA | 	rdbyte	arg03, local12
01938     1D 31 02 F6 | 	mov	arg04, local04
0193c     1E 33 02 F6 | 	mov	arg05, local05
01940     80 FE BF FD | 	call	#_putcharxycg
01944     23 3F 02 F1 | 	add	local06, local10
01948     22 3F 0A F2 | 	cmp	local06, local09 wz
0194c     C8 FF 9F 5D |  if_ne	jmp	#LR__0041
01950     AF F0 03 F6 | 	mov	ptra, fp
01954     BF 00 A0 FD | 	call	#popregs_
01958                 | _outtextxycg_ret
01958     2D 00 64 FD | 	ret
0195c                 | 
0195c                 | ' 
0195c                 | ' 
0195c                 | ' ''---------- putpixel - put a pixel on the screen
0195c                 | ' 
0195c                 | ' pub putpixel1(x,y,c) |byte b
0195c                 | _putpixel1
0195c                 | ' 
0195c                 | ' 
0195c                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
0195c     00 CC 05 F6 | 	mov	_var01, #0
01960     00 2A 5E F2 | 	cmps	arg01, #0 wcz
01964     01 CC 65 36 |  if_ae	neg	_var01, #1
01968     00 CE 05 F6 | 	mov	_var02, #0
0196c     90 BA 05 F1 | 	add	objptr, #144
01970     DD D0 01 FB | 	rdlong	_var03, objptr
01974     05 D0 65 F0 | 	shl	_var03, #5
01978     E8 2A 5A F2 | 	cmps	arg01, _var03 wcz
0197c     01 CE 65 C6 |  if_b	neg	_var02, #1
01980     E7 CC 01 F5 | 	and	_var01, _var02
01984     00 D2 05 F6 | 	mov	_var04, #0
01988     00 2C 5E F2 | 	cmps	arg02, #0 wcz
0198c     01 D2 65 36 |  if_ae	neg	_var04, #1
01990     E9 CC 01 F5 | 	and	_var01, _var04
01994     00 D4 05 F6 | 	mov	_var05, #0
01998     04 BA 05 F1 | 	add	objptr, #4
0199c     DD D6 01 FB | 	rdlong	_var06, objptr
019a0     94 BA 85 F1 | 	sub	objptr, #148
019a4     EB 2C 5A F2 | 	cmps	arg02, _var06 wcz
019a8     01 D4 65 C6 |  if_b	neg	_var05, #1
019ac     EA CC C9 F7 | 	test	_var01, _var05 wz
019b0     8C 00 90 AD |  if_e	jmp	#LR__0044
019b4     90 BA 05 F1 | 	add	objptr, #144
019b8     DD D8 01 FB | 	rdlong	_var07, objptr
019bc     90 BA 85 F1 | 	sub	objptr, #144
019c0     02 D8 65 F0 | 	shl	_var07, #2
019c4     16 D9 01 FD | 	qmul	_var07, arg02
019c8     18 DA 61 FD | 	getqx	_var08
019cc     DD DC 01 FB | 	rdlong	_var09, objptr
019d0     ED DC 01 F1 | 	add	_var09, _var08
019d4     15 DF 01 F6 | 	mov	_var10, arg01
019d8     03 DE 45 F0 | 	shr	_var10, #3
019dc     EF DC 01 F1 | 	add	_var09, _var10
019e0                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
019e0     EE E0 C1 FA | 	rdbyte	_var11, _var09
019e4                 | '     if (c==0)
019e4     00 2E 0E F2 | 	cmp	arg03, #0 wz
019e8     18 00 90 5D |  if_ne	jmp	#LR__0042
019ec     15 CD 51 F6 | 	abs	_var01, arg01 wc
019f0     07 CC 05 F5 | 	and	_var01, #7
019f4     E6 CC 61 C6 |  if_b	neg	_var01, _var01
019f8     E6 E2 C1 F9 | 	decod	_var12, _var01
019fc                 | '       b:=b & !(1<<(x//8))
019fc     F1 E0 21 F5 | 	andn	_var11, _var12
01a00                 | '     else
01a00     14 00 90 FD | 	jmp	#LR__0043
01a04                 | LR__0042
01a04     15 CD 51 F6 | 	abs	_var01, arg01 wc
01a08     07 CC 05 F5 | 	and	_var01, #7
01a0c     E6 CC 61 C6 |  if_b	neg	_var01, _var01
01a10     E6 E4 C1 F9 | 	decod	_var13, _var01
01a14                 | '       b:=b |(1<<(x//8))
01a14     F2 E0 41 F5 | 	or	_var11, _var13
01a18                 | LR__0043
01a18     90 BA 05 F1 | 	add	objptr, #144
01a1c     DD E6 01 FB | 	rdlong	_var14, objptr
01a20     90 BA 85 F1 | 	sub	objptr, #144
01a24     02 E6 65 F0 | 	shl	_var14, #2
01a28     16 E7 01 FD | 	qmul	_var14, arg02
01a2c     18 E8 61 FD | 	getqx	_var15
01a30     DD EA 01 FB | 	rdlong	_var16, objptr
01a34     F4 EA 01 F1 | 	add	_var16, _var15
01a38     EF EA 01 F1 | 	add	_var16, _var10
01a3c                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01a3c     F5 E0 41 FC | 	wrbyte	_var11, _var16
01a40                 | LR__0044
01a40                 | _putpixel1_ret
01a40     2D 00 64 FD | 	ret
01a44                 | 
01a44                 | ' 
01a44                 | ' 
01a44                 | ' pub putpixel2(x,y,c) |byte b
01a44                 | _putpixel2
01a44                 | ' 
01a44                 | ' 
01a44                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01a44     00 CC 05 F6 | 	mov	_var01, #0
01a48     00 2A 5E F2 | 	cmps	arg01, #0 wcz
01a4c     01 CC 65 36 |  if_ae	neg	_var01, #1
01a50     00 CE 05 F6 | 	mov	_var02, #0
01a54     90 BA 05 F1 | 	add	objptr, #144
01a58     DD D0 01 FB | 	rdlong	_var03, objptr
01a5c     04 D0 65 F0 | 	shl	_var03, #4
01a60     E8 2A 5A F2 | 	cmps	arg01, _var03 wcz
01a64     01 CE 65 C6 |  if_b	neg	_var02, #1
01a68     E7 CC 01 F5 | 	and	_var01, _var02
01a6c     00 D2 05 F6 | 	mov	_var04, #0
01a70     00 2C 5E F2 | 	cmps	arg02, #0 wcz
01a74     01 D2 65 36 |  if_ae	neg	_var04, #1
01a78     E9 CC 01 F5 | 	and	_var01, _var04
01a7c     00 D4 05 F6 | 	mov	_var05, #0
01a80     04 BA 05 F1 | 	add	objptr, #4
01a84     DD D6 01 FB | 	rdlong	_var06, objptr
01a88     94 BA 85 F1 | 	sub	objptr, #148
01a8c     EB 2C 5A F2 | 	cmps	arg02, _var06 wcz
01a90     01 D4 65 C6 |  if_b	neg	_var05, #1
01a94     EA CC C9 F7 | 	test	_var01, _var05 wz
01a98     7C 00 90 AD |  if_e	jmp	#LR__0045
01a9c     90 BA 05 F1 | 	add	objptr, #144
01aa0     DD D8 01 FB | 	rdlong	_var07, objptr
01aa4     90 BA 85 F1 | 	sub	objptr, #144
01aa8     02 D8 65 F0 | 	shl	_var07, #2
01aac     16 D9 01 FD | 	qmul	_var07, arg02
01ab0     18 DA 61 FD | 	getqx	_var08
01ab4     DD DC 01 FB | 	rdlong	_var09, objptr
01ab8     ED DC 01 F1 | 	add	_var09, _var08
01abc     15 DF 01 F6 | 	mov	_var10, arg01
01ac0     02 DE 45 F0 | 	shr	_var10, #2
01ac4     EF DC 01 F1 | 	add	_var09, _var10
01ac8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01ac8     EE E0 C1 FA | 	rdbyte	_var11, _var09
01acc     15 CD 51 F6 | 	abs	_var01, arg01 wc
01ad0     03 CC 05 F5 | 	and	_var01, #3
01ad4     E6 CC 61 C6 |  if_b	neg	_var01, _var01
01ad8     01 CC 65 F0 | 	shl	_var01, #1
01adc     03 E2 05 F6 | 	mov	_var12, #3
01ae0     E6 E2 61 F0 | 	shl	_var12, _var01
01ae4                 | '     b:=b & !(%11<<((x//4)<<1))
01ae4     F1 E0 21 F5 | 	andn	_var11, _var12
01ae8     E6 2E 62 F0 | 	shl	arg03, _var01
01aec                 | '     b:=b |(c<<((x//4)<<1))
01aec     17 E1 41 F5 | 	or	_var11, arg03
01af0     90 BA 05 F1 | 	add	objptr, #144
01af4     DD E4 01 FB | 	rdlong	_var13, objptr
01af8     90 BA 85 F1 | 	sub	objptr, #144
01afc     02 E4 65 F0 | 	shl	_var13, #2
01b00     16 E5 01 FD | 	qmul	_var13, arg02
01b04     18 E6 61 FD | 	getqx	_var14
01b08     DD E8 01 FB | 	rdlong	_var15, objptr
01b0c     F3 E8 01 F1 | 	add	_var15, _var14
01b10     EF E8 01 F1 | 	add	_var15, _var10
01b14                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
01b14     F4 E0 41 FC | 	wrbyte	_var11, _var15
01b18                 | LR__0045
01b18                 | _putpixel2_ret
01b18     2D 00 64 FD | 	ret
01b1c                 | 
01b1c                 | ' 
01b1c                 | ' 
01b1c                 | ' pub putpixel4(x,y,c) |byte b
01b1c                 | _putpixel4
01b1c                 | ' 
01b1c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01b1c     00 CC 05 F6 | 	mov	_var01, #0
01b20     00 2A 5E F2 | 	cmps	arg01, #0 wcz
01b24     01 CC 65 36 |  if_ae	neg	_var01, #1
01b28     00 CE 05 F6 | 	mov	_var02, #0
01b2c     90 BA 05 F1 | 	add	objptr, #144
01b30     DD D0 01 FB | 	rdlong	_var03, objptr
01b34     04 D0 65 F0 | 	shl	_var03, #4
01b38     E8 2A 5A F2 | 	cmps	arg01, _var03 wcz
01b3c     01 CE 65 C6 |  if_b	neg	_var02, #1
01b40     E7 CC 01 F5 | 	and	_var01, _var02
01b44     00 D2 05 F6 | 	mov	_var04, #0
01b48     00 2C 5E F2 | 	cmps	arg02, #0 wcz
01b4c     01 D2 65 36 |  if_ae	neg	_var04, #1
01b50     E9 CC 01 F5 | 	and	_var01, _var04
01b54     00 D4 05 F6 | 	mov	_var05, #0
01b58     04 BA 05 F1 | 	add	objptr, #4
01b5c     DD D6 01 FB | 	rdlong	_var06, objptr
01b60     94 BA 85 F1 | 	sub	objptr, #148
01b64     EB 2C 5A F2 | 	cmps	arg02, _var06 wcz
01b68     01 D4 65 C6 |  if_b	neg	_var05, #1
01b6c     EA CC C9 F7 | 	test	_var01, _var05 wz
01b70     7C 00 90 AD |  if_e	jmp	#LR__0046
01b74     90 BA 05 F1 | 	add	objptr, #144
01b78     DD D8 01 FB | 	rdlong	_var07, objptr
01b7c     90 BA 85 F1 | 	sub	objptr, #144
01b80     02 D8 65 F0 | 	shl	_var07, #2
01b84     16 D9 01 FD | 	qmul	_var07, arg02
01b88     18 DA 61 FD | 	getqx	_var08
01b8c     DD DC 01 FB | 	rdlong	_var09, objptr
01b90     ED DC 01 F1 | 	add	_var09, _var08
01b94     15 DF 01 F6 | 	mov	_var10, arg01
01b98     01 DE 45 F0 | 	shr	_var10, #1
01b9c     EF DC 01 F1 | 	add	_var09, _var10
01ba0                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01ba0     EE E0 C1 FA | 	rdbyte	_var11, _var09
01ba4     15 CD 51 F6 | 	abs	_var01, arg01 wc
01ba8     01 CC 05 F5 | 	and	_var01, #1
01bac     E6 CC 61 C6 |  if_b	neg	_var01, _var01
01bb0     02 CC 65 F0 | 	shl	_var01, #2
01bb4     0F E2 05 F6 | 	mov	_var12, #15
01bb8     E6 E2 61 F0 | 	shl	_var12, _var01
01bbc                 | '     b:=b & !(%1111<<((x//2)<<2))
01bbc     F1 E0 21 F5 | 	andn	_var11, _var12
01bc0     E6 2E 62 F0 | 	shl	arg03, _var01
01bc4                 | '     b:=b |(c<<((x//2)<<2))
01bc4     17 E1 41 F5 | 	or	_var11, arg03
01bc8     90 BA 05 F1 | 	add	objptr, #144
01bcc     DD E4 01 FB | 	rdlong	_var13, objptr
01bd0     90 BA 85 F1 | 	sub	objptr, #144
01bd4     02 E4 65 F0 | 	shl	_var13, #2
01bd8     16 E5 01 FD | 	qmul	_var13, arg02
01bdc     18 E6 61 FD | 	getqx	_var14
01be0     DD E8 01 FB | 	rdlong	_var15, objptr
01be4     F3 E8 01 F1 | 	add	_var15, _var14
01be8     EF E8 01 F1 | 	add	_var15, _var10
01bec                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01bec     F4 E0 41 FC | 	wrbyte	_var11, _var15
01bf0                 | LR__0046
01bf0                 | _putpixel4_ret
01bf0     2D 00 64 FD | 	ret
01bf4                 | 
01bf4                 | ' 
01bf4                 | ' 
01bf4                 | ' pub putpixel8(x,y,c)
01bf4                 | _putpixel8
01bf4                 | ' 
01bf4                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01bf4     00 CC 05 F6 | 	mov	_var01, #0
01bf8     00 2A 5E F2 | 	cmps	arg01, #0 wcz
01bfc     01 CC 65 36 |  if_ae	neg	_var01, #1
01c00     00 CE 05 F6 | 	mov	_var02, #0
01c04     90 BA 05 F1 | 	add	objptr, #144
01c08     DD D0 01 FB | 	rdlong	_var03, objptr
01c0c     02 D0 65 F0 | 	shl	_var03, #2
01c10     E8 2A 5A F2 | 	cmps	arg01, _var03 wcz
01c14     01 CE 65 C6 |  if_b	neg	_var02, #1
01c18     E7 CC 01 F5 | 	and	_var01, _var02
01c1c     00 D2 05 F6 | 	mov	_var04, #0
01c20     00 2C 5E F2 | 	cmps	arg02, #0 wcz
01c24     01 D2 65 36 |  if_ae	neg	_var04, #1
01c28     E9 CC 01 F5 | 	and	_var01, _var04
01c2c     00 D4 05 F6 | 	mov	_var05, #0
01c30     04 BA 05 F1 | 	add	objptr, #4
01c34     DD D6 01 FB | 	rdlong	_var06, objptr
01c38     94 BA 85 F1 | 	sub	objptr, #148
01c3c     EB 2C 5A F2 | 	cmps	arg02, _var06 wcz
01c40     01 D4 65 C6 |  if_b	neg	_var05, #1
01c44     EA CC C9 F7 | 	test	_var01, _var05 wz
01c48     28 00 90 AD |  if_e	jmp	#LR__0047
01c4c     90 BA 05 F1 | 	add	objptr, #144
01c50     DD D8 01 FB | 	rdlong	_var07, objptr
01c54     90 BA 85 F1 | 	sub	objptr, #144
01c58     02 D8 65 F0 | 	shl	_var07, #2
01c5c     16 D9 01 FD | 	qmul	_var07, arg02
01c60     18 DA 61 FD | 	getqx	_var08
01c64     DD DC 01 FB | 	rdlong	_var09, objptr
01c68     ED DC 01 F1 | 	add	_var09, _var08
01c6c     15 DD 01 F1 | 	add	_var09, arg01
01c70                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01c70     EE 2E 42 FC | 	wrbyte	arg03, _var09
01c74                 | LR__0047
01c74                 | _putpixel8_ret
01c74     2D 00 64 FD | 	ret
01c78                 | 
01c78                 | ' 
01c78                 | ' '*************************************************************************
01c78                 | ' '                                                                        *
01c78                 | ' '  VBlank functions                                                      *
01c78                 | ' '                                                                        *
01c78                 | ' '*************************************************************************
01c78                 | ' 
01c78                 | ' pub waitvbl(amount) | i
01c78                 | _waitvbl
01c78     04 5A 05 F6 | 	mov	COUNT_, #4
01c7c     B0 00 A0 FD | 	call	#pushregs_
01c80     15 35 02 F6 | 	mov	local01, arg01
01c84                 | ' 
01c84                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01c84                 | ' 
01c84                 | ' repeat i from 1 to amount
01c84     01 36 06 F6 | 	mov	local02, #1
01c88     01 34 5E F2 | 	cmps	local01, #1 wcz
01c8c     01 38 06 16 |  if_a	mov	local03, #1
01c90     01 38 66 E6 |  if_be	neg	local03, #1
01c94     1C 35 02 F1 | 	add	local01, local03
01c98                 | LR__0048
01c98                 | '   repeat until vblank==0
01c98                 | LR__0049
01c98     40 BA 05 F1 | 	add	objptr, #64
01c9c     DD 3A 0A FB | 	rdlong	local04, objptr wz
01ca0     40 BA 85 F1 | 	sub	objptr, #64
01ca4     0C 00 90 AD |  if_e	jmp	#LR__0050
01ca8                 | '     waitus(100)
01ca8     64 2A 06 F6 | 	mov	arg01, #100
01cac     C4 0F B0 FD | 	call	#__system___waitus
01cb0     E4 FF 9F FD | 	jmp	#LR__0049
01cb4                 | LR__0050
01cb4                 | '   repeat until vblank==1
01cb4                 | LR__0051
01cb4     40 BA 05 F1 | 	add	objptr, #64
01cb8     DD 3A 02 FB | 	rdlong	local04, objptr
01cbc     40 BA 85 F1 | 	sub	objptr, #64
01cc0     01 3A 0E F2 | 	cmp	local04, #1 wz
01cc4     0C 00 90 AD |  if_e	jmp	#LR__0052
01cc8                 | '     waitus(100)
01cc8     64 2A 06 F6 | 	mov	arg01, #100
01ccc     A4 0F B0 FD | 	call	#__system___waitus
01cd0     E0 FF 9F FD | 	jmp	#LR__0051
01cd4                 | LR__0052
01cd4     1C 37 02 F1 | 	add	local02, local03
01cd8     1A 37 0A F2 | 	cmp	local02, local01 wz
01cdc     B8 FF 9F 5D |  if_ne	jmp	#LR__0048
01ce0     AF F0 03 F6 | 	mov	ptra, fp
01ce4     BF 00 A0 FD | 	call	#popregs_
01ce8                 | _waitvbl_ret
01ce8     2D 00 64 FD | 	ret
01cec                 | 
01cec                 | ' 
01cec                 | ' 
01cec                 | ' '*************************************************************************
01cec                 | ' '                                                                        *
01cec                 | ' '  Text functions                                                        *
01cec                 | ' '                                                                        *
01cec                 | ' '*************************************************************************
01cec                 | ' 
01cec                 | ' ''---------- Clear the screen, set its foreground/background color
01cec                 | ' 
01cec                 | ' pub cls(fc,bc)   :c
01cec                 | _cls
01cec     07 5A 05 F6 | 	mov	COUNT_, #7
01cf0     B0 00 A0 FD | 	call	#pushregs_
01cf4     15 35 02 F6 | 	mov	local01, arg01
01cf8     16 37 02 F6 | 	mov	local02, arg02
01cfc                 | ' 
01cfc                 | ' if (graphmode<512)
01cfc     C4 BA 05 F1 | 	add	objptr, #196
01d00     DD 38 02 FB | 	rdlong	local03, objptr
01d04     C4 BA 85 F1 | 	sub	objptr, #196
01d08     01 00 00 FF 
01d0c     00 38 5E F2 | 	cmps	local03, ##512 wcz
01d10     34 00 90 3D |  if_ae	jmp	#LR__0053
01d14     1A 3B 02 F6 | 	mov	local04, local01
01d18     18 3A 66 F0 | 	shl	local04, #24
01d1c     1B 3D 02 F6 | 	mov	local05, local02
01d20     10 3C 66 F0 | 	shl	local05, #16
01d24     1E 3B 02 F1 | 	add	local04, local05
01d28     20 3A 06 F1 | 	add	local04, #32
01d2c                 | '   c:=fc<<24+bc<<16+$20
01d2c                 | '   longfill(buf_ptr,c,buflen)
01d2c     DD 2A 02 FB | 	rdlong	arg01, objptr
01d30     30 BA 05 F1 | 	add	objptr, #48
01d34     DD 2E 02 FB | 	rdlong	arg03, objptr
01d38     30 BA 85 F1 | 	sub	objptr, #48
01d3c     1D 2D 02 F6 | 	mov	arg02, local04
01d40     A8 00 A0 FD | 	call	#\builtin_longfill_
01d44                 | ' else
01d44     AC 00 90 FD | 	jmp	#LR__0059
01d48                 | LR__0053
01d48                 | '   if (graphmode & 48) ==48
01d48     C4 BA 05 F1 | 	add	objptr, #196
01d4c     DD 38 02 FB | 	rdlong	local03, objptr
01d50     C4 BA 85 F1 | 	sub	objptr, #196
01d54     30 38 06 F5 | 	and	local03, #48
01d58     30 38 0E F2 | 	cmp	local03, #48 wz
01d5c                 | '     c:=bc
01d5c     1B 3B 02 A6 |  if_e	mov	local04, local02
01d60     74 00 90 AD |  if_e	jmp	#LR__0058
01d64                 | '   elseif (graphmode & 48) ==32
01d64     C4 BA 05 F1 | 	add	objptr, #196
01d68     DD 38 02 FB | 	rdlong	local03, objptr
01d6c     C4 BA 85 F1 | 	sub	objptr, #196
01d70     30 38 06 F5 | 	and	local03, #48
01d74     20 38 0E F2 | 	cmp	local03, #32 wz
01d78     10 00 90 5D |  if_ne	jmp	#LR__0054
01d7c     1B 3B 02 F6 | 	mov	local04, local02
01d80     04 3A 66 F0 | 	shl	local04, #4
01d84     1B 3B 02 F1 | 	add	local04, local02
01d88                 | '     c:=bc<<4+bc
01d88     4C 00 90 FD | 	jmp	#LR__0057
01d8c                 | LR__0054
01d8c                 | '   elseif (graphmode & 48) ==16
01d8c     C4 BA 05 F1 | 	add	objptr, #196
01d90     DD 38 02 FB | 	rdlong	local03, objptr
01d94     C4 BA 85 F1 | 	sub	objptr, #196
01d98     30 38 06 F5 | 	and	local03, #48
01d9c     10 38 0E F2 | 	cmp	local03, #16 wz
01da0     28 00 90 5D |  if_ne	jmp	#LR__0055
01da4     1B 3B 02 F6 | 	mov	local04, local02
01da8     06 3A 66 F0 | 	shl	local04, #6
01dac     1B 3F 02 F6 | 	mov	local06, local02
01db0     04 3E 66 F0 | 	shl	local06, #4
01db4     1F 3B 02 F1 | 	add	local04, local06
01db8     1B 41 02 F6 | 	mov	local07, local02
01dbc     02 40 66 F0 | 	shl	local07, #2
01dc0     20 3B 02 F1 | 	add	local04, local07
01dc4     1B 3B 02 F1 | 	add	local04, local02
01dc8                 | '     c:=bc<<6+bc<<4+bc<<2+bc
01dc8                 | '   else
01dc8     0C 00 90 FD | 	jmp	#LR__0056
01dcc                 | LR__0055
01dcc                 | '     if bc==1
01dcc     01 36 0E F2 | 	cmp	local02, #1 wz
01dd0                 | '       c:=255
01dd0     FF 3A 06 A6 |  if_e	mov	local04, #255
01dd4                 | '     else
01dd4                 | '       c:=0
01dd4     00 3A 06 56 |  if_ne	mov	local04, #0
01dd8                 | LR__0056
01dd8                 | LR__0057
01dd8                 | LR__0058
01dd8     30 BA 05 F1 | 	add	objptr, #48
01ddc     DD 2E 02 FB | 	rdlong	arg03, objptr
01de0     30 BA 85 F1 | 	sub	objptr, #48
01de4     02 2E 66 F0 | 	shl	arg03, #2
01de8                 | '   bytefill(buf_ptr,c,buflen*4)
01de8     DD 2A 02 FB | 	rdlong	arg01, objptr
01dec     1D 2D 02 F6 | 	mov	arg02, local04
01df0     A0 00 A0 FD | 	call	#\builtin_bytefill_
01df4                 | LR__0059
01df4                 | ' setwritecolors(fc,bc)
01df4                 | ' 
01df4                 | ' 
01df4                 | ' write_color:=ff
01df4     38 BA 05 F1 | 	add	objptr, #56
01df8     DD 34 62 FC | 	wrlong	local01, objptr
01dfc                 | ' write_background:=bb
01dfc     04 BA 05 F1 | 	add	objptr, #4
01e00     DD 36 62 FC | 	wrlong	local02, objptr
01e04                 | ' cursor_x:=0
01e04     08 BA 85 F1 | 	sub	objptr, #8
01e08     DD 00 48 FC | 	wrbyte	#0, objptr
01e0c                 | ' cursor_y:=0
01e0c     01 BA 05 F1 | 	add	objptr, #1
01e10     DD 00 48 FC | 	wrbyte	#0, objptr
01e14     35 BA 85 F1 | 	sub	objptr, #53
01e18     1D C9 01 F6 | 	mov	result1, local04
01e1c     AF F0 03 F6 | 	mov	ptra, fp
01e20     BF 00 A0 FD | 	call	#popregs_
01e24                 | _cls_ret
01e24     2D 00 64 FD | 	ret
01e28                 | 
01e28                 | ' 
01e28                 | ' 
01e28                 | ' '*************************************************************************
01e28                 | ' '                                                                        *
01e28                 | ' '  Conversions                                                           *
01e28                 | ' '                                                                        *
01e28                 | ' '*************************************************************************
01e28                 | ' 
01e28                 | ' ''---------- Convert a integer to dec string, return a pointer
01e28                 | ' 
01e28                 | ' pub inttostr(i):result |q,pos,k,j
01e28                 | _inttostr
01e28     07 5A 05 F6 | 	mov	COUNT_, #7
01e2c     B0 00 A0 FD | 	call	#pushregs_
01e30     15 35 02 F6 | 	mov	local01, arg01
01e34                 | ' 
01e34                 | ' j:=i
01e34     1A 37 0A F6 | 	mov	local02, local01 wz
01e38                 | ' pos:=10
01e38     0A 38 06 F6 | 	mov	local03, #10
01e3c                 | ' k:=0
01e3c     00 3A 06 F6 | 	mov	local04, #0
01e40                 | ' 
01e40                 | ' if (j==0)
01e40     18 00 90 5D |  if_ne	jmp	#LR__0060
01e44                 | '   n_string[0]:=48
01e44     44 BA 05 F1 | 	add	objptr, #68
01e48     DD 60 48 FC | 	wrbyte	#48, objptr
01e4c                 | '   n_string[1]:=0
01e4c     01 BA 05 F1 | 	add	objptr, #1
01e50     DD 00 48 FC | 	wrbyte	#0, objptr
01e54     45 BA 85 F1 | 	sub	objptr, #69
01e58                 | ' 
01e58                 | ' else
01e58     C4 00 90 FD | 	jmp	#LR__0067
01e5c                 | LR__0060
01e5c                 | '   if (j<0)
01e5c     00 36 5E F2 | 	cmps	local02, #0 wcz
01e60                 | '     j:=0-j
01e60     1B 37 62 C6 |  if_b	neg	local02, local02
01e64                 | '     k:=45
01e64     2D 3A 06 C6 |  if_b	mov	local04, #45
01e68                 | ' 
01e68                 | '   n_string[11]:=0
01e68     4F BA 05 F1 | 	add	objptr, #79
01e6c     DD 00 48 FC | 	wrbyte	#0, objptr
01e70     4F BA 85 F1 | 	sub	objptr, #79
01e74     C8 E1 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
01e78     93 00 A0 FD | 	call	#FCACHE_LOAD_
01e7c                 | '   repeat while (pos>-1)
01e7c                 | LR__0061
01e7c     FF FF 7F FF 
01e80     FF 39 5E F2 | 	cmps	local03, ##-1 wcz
01e84     34 00 90 ED |  if_be	jmp	#LR__0063
01e88     1B 77 02 F6 | 	mov	muldiva_, local02
01e8c     0A 78 06 F6 | 	mov	muldivb_, #10
01e90     D0 00 A0 FD | 	call	#divide_
01e94     3B 3D 02 F6 | 	mov	local05, muldiva_
01e98                 | '     q:=j//10
01e98                 | '     q:=48+q
01e98     30 3C 06 F1 | 	add	local05, #48
01e9c     1C 3F 02 F6 | 	mov	local06, local03
01ea0     44 BA 05 F1 | 	add	objptr, #68
01ea4     DD 3E 02 F1 | 	add	local06, objptr
01ea8                 | '     n_string[pos]:=q
01ea8     1F 3D 42 FC | 	wrbyte	local05, local06
01eac                 | '     j:=j/10
01eac     3C 37 02 F6 | 	mov	local02, muldivb_
01eb0                 | '     pos-=1
01eb0     01 38 86 F1 | 	sub	local03, #1
01eb4     44 BA 85 F1 | 	sub	objptr, #68
01eb8     C0 FF 9F FD | 	jmp	#LR__0061
01ebc                 | LR__0062
01ebc                 | LR__0063
01ebc                 | '   repeat while n_string[0]==48
01ebc                 | LR__0064
01ebc     44 BA 05 F1 | 	add	objptr, #68
01ec0     DD 40 C2 FA | 	rdbyte	local07, objptr
01ec4     44 BA 85 F1 | 	sub	objptr, #68
01ec8     30 40 0E F2 | 	cmp	local07, #48 wz
01ecc     20 00 90 5D |  if_ne	jmp	#LR__0065
01ed0     44 BA 05 F1 | 	add	objptr, #68
01ed4     DD 2A 02 F6 | 	mov	arg01, objptr
01ed8     44 BA 85 F1 | 	sub	objptr, #68
01edc     15 2D 02 F6 | 	mov	arg02, arg01
01ee0     01 2C 06 F1 | 	add	arg02, #1
01ee4                 | '     bytemove(@n_string,@n_string+1,12)
01ee4     0C 2E 06 F6 | 	mov	arg03, #12
01ee8     24 0B B0 FD | 	call	#__system____builtin_memmove
01eec     CC FF 9F FD | 	jmp	#LR__0064
01ef0                 | LR__0065
01ef0                 | ' 
01ef0                 | '   if k==45
01ef0     2D 3A 0E F2 | 	cmp	local04, #45 wz
01ef4     28 00 90 5D |  if_ne	jmp	#LR__0066
01ef8     44 BA 05 F1 | 	add	objptr, #68
01efc     DD 2C 02 F6 | 	mov	arg02, objptr
01f00     44 BA 85 F1 | 	sub	objptr, #68
01f04     16 2B 02 F6 | 	mov	arg01, arg02
01f08     01 2A 06 F1 | 	add	arg01, #1
01f0c                 | '      bytemove(@n_string+1,@n_string,12)
01f0c     0C 2E 06 F6 | 	mov	arg03, #12
01f10     FC 0A B0 FD | 	call	#__system____builtin_memmove
01f14                 | '      n_string[0]:=k
01f14     44 BA 05 F1 | 	add	objptr, #68
01f18     DD 3A 42 FC | 	wrbyte	local04, objptr
01f1c     44 BA 85 F1 | 	sub	objptr, #68
01f20                 | LR__0066
01f20                 | LR__0067
01f20     44 BA 05 F1 | 	add	objptr, #68
01f24     DD C8 01 F6 | 	mov	result1, objptr
01f28     44 BA 85 F1 | 	sub	objptr, #68
01f2c                 | ' 
01f2c                 | ' q:=@n_string
01f2c                 | ' return q
01f2c     AF F0 03 F6 | 	mov	ptra, fp
01f30     BF 00 A0 FD | 	call	#popregs_
01f34                 | _inttostr_ret
01f34     2D 00 64 FD | 	ret
01f38                 | 
01f38                 | ' 
01f38                 | ' 
01f38                 | ' 
01f38                 | ' '*************************************************************************
01f38                 | ' '                                                                        *
01f38                 | ' '  Mode setting and driver start                                                          *
01f38                 | ' '                                                                        *
01f38                 | ' '*************************************************************************
01f38                 | ' 
01f38                 | ' ''---------  Set the graphics mode
01f38                 | ' 
01f38                 | ' 
01f38                 | ' 
01f38                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
01f38                 | _setmode
01f38     21 5A 05 F6 | 	mov	COUNT_, #33
01f3c     B0 00 A0 FD | 	call	#pushregs_
01f40     15 35 02 F6 | 	mov	local01, arg01
01f44                 | ' 
01f44                 | ' '' mode:tn_bb_cc_vv_hh
01f44                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
01f44                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
01f44                 | ' 
01f44                 | ' if mode==(512+192+48)
01f44     01 00 00 FF 
01f48     F0 34 0E F2 | 	cmp	local01, ##752 wz
01f4c                 | '   return 'no RAM
01f4c     30 06 90 AD |  if_e	jmp	#LR__0090
01f50                 | ' 
01f50                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
01f50     1A 37 02 F6 | 	mov	local02, local01
01f54     06 36 46 F0 | 	shr	local02, #6
01f58     07 36 06 F5 | 	and	local02, #7
01f5c     08 36 26 F3 | 	fle	local02, #8
01f60     1B 39 02 F6 | 	mov	local03, local02
01f64     30 38 62 FD | 	jmprel	local03
01f68                 | LR__0068
01f68     20 00 90 FD | 	jmp	#LR__0069
01f6c     58 00 90 FD | 	jmp	#LR__0070
01f70     90 00 90 FD | 	jmp	#LR__0071
01f74     C8 00 90 FD | 	jmp	#LR__0072
01f78     00 01 90 FD | 	jmp	#LR__0073
01f7c     38 01 90 FD | 	jmp	#LR__0074
01f80     70 01 90 FD | 	jmp	#LR__0075
01f84     A8 01 90 FD | 	jmp	#LR__0076
01f88     E4 01 90 FD | 	jmp	#LR__0077
01f8c                 | LR__0069
01f8c                 | ' 
01f8c                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
01f8c     50 BA 05 F1 | 	add	objptr, #80
01f90     DD 2A 02 F6 | 	mov	arg01, objptr
01f94     50 BA 85 F1 | 	sub	objptr, #80
01f98     0E 00 00 FF 
01f9c     58 BE 05 F1 | 	add	ptr__dat__, ##7256
01fa0     DF 3A 02 F6 | 	mov	local04, ptr__dat__
01fa4     1D 3D 02 F6 | 	mov	local05, local04
01fa8     10 3E 06 F6 | 	mov	local06, #16
01fac     1E 2D 02 F6 | 	mov	arg02, local05
01fb0     10 2E 06 F6 | 	mov	arg03, #16
01fb4     0E 00 00 FF 
01fb8     58 BE 85 F1 | 	sub	ptr__dat__, ##7256
01fbc     E0 0A B0 FD | 	call	#__system__longmove
01fc0     E4 40 02 F6 | 	mov	local07, result1
01fc4     A8 01 90 FD | 	jmp	#LR__0077
01fc8                 | LR__0070
01fc8                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
01fc8     50 BA 05 F1 | 	add	objptr, #80
01fcc     DD 2A 02 F6 | 	mov	arg01, objptr
01fd0     50 BA 85 F1 | 	sub	objptr, #80
01fd4     0E 00 00 FF 
01fd8     98 BE 05 F1 | 	add	ptr__dat__, ##7320
01fdc     DF 3A 02 F6 | 	mov	local04, ptr__dat__
01fe0     1D 3D 02 F6 | 	mov	local05, local04
01fe4     10 3E 06 F6 | 	mov	local06, #16
01fe8     1E 2D 02 F6 | 	mov	arg02, local05
01fec     10 2E 06 F6 | 	mov	arg03, #16
01ff0     0E 00 00 FF 
01ff4     98 BE 85 F1 | 	sub	ptr__dat__, ##7320
01ff8     A4 0A B0 FD | 	call	#__system__longmove
01ffc     E4 40 02 F6 | 	mov	local07, result1
02000     6C 01 90 FD | 	jmp	#LR__0077
02004                 | LR__0071
02004                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02004     50 BA 05 F1 | 	add	objptr, #80
02008     DD 2A 02 F6 | 	mov	arg01, objptr
0200c     50 BA 85 F1 | 	sub	objptr, #80
02010     0E 00 00 FF 
02014     D8 BE 05 F1 | 	add	ptr__dat__, ##7384
02018     DF 3A 02 F6 | 	mov	local04, ptr__dat__
0201c     1D 3D 02 F6 | 	mov	local05, local04
02020     10 3E 06 F6 | 	mov	local06, #16
02024     1E 2D 02 F6 | 	mov	arg02, local05
02028     10 2E 06 F6 | 	mov	arg03, #16
0202c     0E 00 00 FF 
02030     D8 BE 85 F1 | 	sub	ptr__dat__, ##7384
02034     68 0A B0 FD | 	call	#__system__longmove
02038     E4 40 02 F6 | 	mov	local07, result1
0203c     30 01 90 FD | 	jmp	#LR__0077
02040                 | LR__0072
02040                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02040     50 BA 05 F1 | 	add	objptr, #80
02044     DD 2A 02 F6 | 	mov	arg01, objptr
02048     50 BA 85 F1 | 	sub	objptr, #80
0204c     0E 00 00 FF 
02050     18 BF 05 F1 | 	add	ptr__dat__, ##7448
02054     DF 3A 02 F6 | 	mov	local04, ptr__dat__
02058     1D 3D 02 F6 | 	mov	local05, local04
0205c     10 3E 06 F6 | 	mov	local06, #16
02060     1E 2D 02 F6 | 	mov	arg02, local05
02064     10 2E 06 F6 | 	mov	arg03, #16
02068     0E 00 00 FF 
0206c     18 BF 85 F1 | 	sub	ptr__dat__, ##7448
02070     2C 0A B0 FD | 	call	#__system__longmove
02074     E4 40 02 F6 | 	mov	local07, result1
02078     F4 00 90 FD | 	jmp	#LR__0077
0207c                 | LR__0073
0207c                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
0207c     50 BA 05 F1 | 	add	objptr, #80
02080     DD 2A 02 F6 | 	mov	arg01, objptr
02084     50 BA 85 F1 | 	sub	objptr, #80
02088     0E 00 00 FF 
0208c     58 BF 05 F1 | 	add	ptr__dat__, ##7512
02090     DF 3A 02 F6 | 	mov	local04, ptr__dat__
02094     1D 3D 02 F6 | 	mov	local05, local04
02098     10 3E 06 F6 | 	mov	local06, #16
0209c     1E 2D 02 F6 | 	mov	arg02, local05
020a0     10 2E 06 F6 | 	mov	arg03, #16
020a4     0E 00 00 FF 
020a8     58 BF 85 F1 | 	sub	ptr__dat__, ##7512
020ac     F0 09 B0 FD | 	call	#__system__longmove
020b0     E4 40 02 F6 | 	mov	local07, result1
020b4     B8 00 90 FD | 	jmp	#LR__0077
020b8                 | LR__0074
020b8                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
020b8     50 BA 05 F1 | 	add	objptr, #80
020bc     DD 2A 02 F6 | 	mov	arg01, objptr
020c0     50 BA 85 F1 | 	sub	objptr, #80
020c4     0E 00 00 FF 
020c8     98 BF 05 F1 | 	add	ptr__dat__, ##7576
020cc     DF 3A 02 F6 | 	mov	local04, ptr__dat__
020d0     1D 3D 02 F6 | 	mov	local05, local04
020d4     10 3E 06 F6 | 	mov	local06, #16
020d8     1E 2D 02 F6 | 	mov	arg02, local05
020dc     10 2E 06 F6 | 	mov	arg03, #16
020e0     0E 00 00 FF 
020e4     98 BF 85 F1 | 	sub	ptr__dat__, ##7576
020e8     B4 09 B0 FD | 	call	#__system__longmove
020ec     E4 40 02 F6 | 	mov	local07, result1
020f0     7C 00 90 FD | 	jmp	#LR__0077
020f4                 | LR__0075
020f4                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
020f4     50 BA 05 F1 | 	add	objptr, #80
020f8     DD 2A 02 F6 | 	mov	arg01, objptr
020fc     50 BA 85 F1 | 	sub	objptr, #80
02100     0E 00 00 FF 
02104     D8 BF 05 F1 | 	add	ptr__dat__, ##7640
02108     DF 3A 02 F6 | 	mov	local04, ptr__dat__
0210c     1D 3D 02 F6 | 	mov	local05, local04
02110     10 3E 06 F6 | 	mov	local06, #16
02114     1E 2D 02 F6 | 	mov	arg02, local05
02118     10 2E 06 F6 | 	mov	arg03, #16
0211c     0E 00 00 FF 
02120     D8 BF 85 F1 | 	sub	ptr__dat__, ##7640
02124     78 09 B0 FD | 	call	#__system__longmove
02128     E4 40 02 F6 | 	mov	local07, result1
0212c     40 00 90 FD | 	jmp	#LR__0077
02130                 | LR__0076
02130                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02130     50 BA 05 F1 | 	add	objptr, #80
02134     DD 42 02 F6 | 	mov	local08, objptr
02138     21 45 02 F6 | 	mov	local09, local08
0213c     0F 00 00 FF 
02140     18 BE 05 F1 | 	add	ptr__dat__, ##7704
02144     DF 3A 02 F6 | 	mov	local04, ptr__dat__
02148     1D 3D 02 F6 | 	mov	local05, local04
0214c     10 3E 06 F6 | 	mov	local06, #16
02150     22 2B 02 F6 | 	mov	arg01, local09
02154     1E 2D 02 F6 | 	mov	arg02, local05
02158     10 2E 06 F6 | 	mov	arg03, #16
0215c     50 BA 85 F1 | 	sub	objptr, #80
02160     0F 00 00 FF 
02164     18 BE 85 F1 | 	sub	ptr__dat__, ##7704
02168     34 09 B0 FD | 	call	#__system__longmove
0216c     E4 40 02 F6 | 	mov	local07, result1
02170                 | LR__0077
02170                 | ' 
02170                 | ' ' 4-bit graphics: do nothing with timings :)
02170                 | ' if mode<512
02170     01 00 00 FF 
02174     00 34 5E F2 | 	cmps	local01, ##512 wcz
02178     20 00 90 3D |  if_ae	jmp	#LR__0078
0217c     0C 00 00 FF 
02180     58 BE 05 F1 | 	add	ptr__dat__, ##6232
02184     DF 46 02 F6 | 	mov	local10, ptr__dat__
02188                 | '   palette_ptr:=@ataripalette
02188     18 BA 05 F1 | 	add	objptr, #24
0218c     DD 46 62 FC | 	wrlong	local10, objptr
02190     18 BA 85 F1 | 	sub	objptr, #24
02194     0C 00 00 FF 
02198     58 BE 85 F1 | 	sub	ptr__dat__, ##6232
0219c                 | LR__0078
0219c                 | ' 
0219c                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
0219c     1A 37 02 F6 | 	mov	local02, local01
021a0     01 00 00 FF 
021a4     30 36 06 F5 | 	and	local02, ##560
021a8     01 00 00 FF 
021ac     30 36 0E F2 | 	cmp	local02, ##560 wz
021b0     48 00 90 5D |  if_ne	jmp	#LR__0079
021b4                 | '   timings[5]:=4
021b4     64 BA 05 F1 | 	add	objptr, #100
021b8     DD 08 68 FC | 	wrlong	#4, objptr
021bc     18 BA 05 F1 | 	add	objptr, #24
021c0     DD 48 02 FB | 	rdlong	local11, objptr
021c4     01 48 66 F0 | 	shl	local11, #1
021c8                 | '   timings[11]:=timings[11]<<1
021c8     DD 48 62 FC | 	wrlong	local11, objptr
021cc                 | '   putpixel:=p8
021cc     6C BA 05 F1 | 	add	objptr, #108
021d0     DD 36 02 FB | 	rdlong	local02, objptr
021d4     10 BA 85 F1 | 	sub	objptr, #16
021d8     DD 36 62 FC | 	wrlong	local02, objptr
021dc     0C 00 00 FF 
021e0     58 BE 05 F1 | 	add	ptr__dat__, ##6232
021e4     DF 4A 02 F6 | 	mov	local12, ptr__dat__
021e8                 | '   palette_ptr:=@ataripalette
021e8     C0 BA 85 F1 | 	sub	objptr, #192
021ec     DD 4A 62 FC | 	wrlong	local12, objptr
021f0     18 BA 85 F1 | 	sub	objptr, #24
021f4     0C 00 00 FF 
021f8     58 BE 85 F1 | 	sub	ptr__dat__, ##6232
021fc                 | LR__0079
021fc                 | ' 
021fc                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
021fc     1A 37 02 F6 | 	mov	local02, local01
02200     01 00 00 FF 
02204     30 36 06 F5 | 	and	local02, ##560
02208     01 00 00 FF 
0220c     10 36 0E F2 | 	cmp	local02, ##528 wz
02210     48 00 90 5D |  if_ne	jmp	#LR__0080
02214                 | '   timings[5]:=16
02214     64 BA 05 F1 | 	add	objptr, #100
02218     DD 20 68 FC | 	wrlong	#16, objptr
0221c     18 BA 05 F1 | 	add	objptr, #24
02220     DD 4C 02 FB | 	rdlong	local13, objptr
02224     01 4C 46 F0 | 	shr	local13, #1
02228                 | '   timings[11]:=timings[11]>>1
02228     DD 4C 62 FC | 	wrlong	local13, objptr
0222c                 | '   putpixel:=p2
0222c     64 BA 05 F1 | 	add	objptr, #100
02230     DD 36 02 FB | 	rdlong	local02, objptr
02234     08 BA 85 F1 | 	sub	objptr, #8
02238     DD 36 62 FC | 	wrlong	local02, objptr
0223c     0C 00 00 FF 
02240     08 BE 05 F1 | 	add	ptr__dat__, ##6152
02244     DF 4E 02 F6 | 	mov	local14, ptr__dat__
02248                 | '   palette_ptr:=@fourcolors
02248     C0 BA 85 F1 | 	sub	objptr, #192
0224c     DD 4E 62 FC | 	wrlong	local14, objptr
02250     18 BA 85 F1 | 	sub	objptr, #24
02254     0C 00 00 FF 
02258     08 BE 85 F1 | 	sub	ptr__dat__, ##6152
0225c                 | LR__0080
0225c                 | ' 
0225c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
0225c     1A 37 02 F6 | 	mov	local02, local01
02260     01 00 00 FF 
02264     30 36 06 F5 | 	and	local02, ##560
02268     01 00 00 FF 
0226c     00 36 0E F2 | 	cmp	local02, ##512 wz
02270     48 00 90 5D |  if_ne	jmp	#LR__0081
02274                 | '   timings[5]:=32
02274     64 BA 05 F1 | 	add	objptr, #100
02278     DD 40 68 FC | 	wrlong	#32, objptr
0227c     18 BA 05 F1 | 	add	objptr, #24
02280     DD 50 02 FB | 	rdlong	local15, objptr
02284     02 50 46 F0 | 	shr	local15, #2
02288                 | '   timings[11]:=timings[11]>>2
02288     DD 50 62 FC | 	wrlong	local15, objptr
0228c                 | '   putpixel:=p1
0228c     60 BA 05 F1 | 	add	objptr, #96
02290     DD 36 02 FB | 	rdlong	local02, objptr
02294     04 BA 85 F1 | 	sub	objptr, #4
02298     DD 36 62 FC | 	wrlong	local02, objptr
0229c     0C 00 00 FF 
022a0     00 BE 05 F1 | 	add	ptr__dat__, ##6144
022a4     DF 52 02 F6 | 	mov	local16, ptr__dat__
022a8                 | '   palette_ptr:=@twocolors
022a8     C0 BA 85 F1 | 	sub	objptr, #192
022ac     DD 52 62 FC | 	wrlong	local16, objptr
022b0     18 BA 85 F1 | 	sub	objptr, #24
022b4     0C 00 00 FF 
022b8     00 BE 85 F1 | 	sub	ptr__dat__, ##6144
022bc                 | LR__0081
022bc                 | ' 
022bc                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
022bc     1A 37 02 F6 | 	mov	local02, local01
022c0     01 00 00 FF 
022c4     30 36 06 F5 | 	and	local02, ##560
022c8     01 00 00 FF 
022cc     20 36 0E F2 | 	cmp	local02, ##544 wz
022d0     30 00 90 5D |  if_ne	jmp	#LR__0082
022d4                 | '   putpixel:=p4
022d4     E4 BA 05 F1 | 	add	objptr, #228
022d8     DD 36 02 FB | 	rdlong	local02, objptr
022dc     0C BA 85 F1 | 	sub	objptr, #12
022e0     DD 36 62 FC | 	wrlong	local02, objptr
022e4     0C 00 00 FF 
022e8     18 BE 05 F1 | 	add	ptr__dat__, ##6168
022ec     DF 54 02 F6 | 	mov	local17, ptr__dat__
022f0                 | '   palette_ptr:=@vga16
022f0     C0 BA 85 F1 | 	sub	objptr, #192
022f4     DD 54 62 FC | 	wrlong	local17, objptr
022f8     18 BA 85 F1 | 	sub	objptr, #24
022fc     0C 00 00 FF 
02300     18 BE 85 F1 | 	sub	ptr__dat__, ##6168
02304                 | LR__0082
02304                 | ' 
02304                 | ' repeat i from 0 to 4
02304     00 56 06 F6 | 	mov	local18, #0
02308     38 DD 9F FE | 	loc	pa,	#(@LR__0084-@LR__0083)
0230c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02310                 | LR__0083
02310     2B 59 02 F6 | 	mov	local19, local18
02314     02 58 66 F0 | 	shl	local19, #2
02318     50 BA 05 F1 | 	add	objptr, #80
0231c     DD 58 02 F1 | 	add	local19, objptr
02320     2C BA 85 F1 | 	sub	objptr, #44
02324     DD 5A 02 FB | 	rdlong	local20, objptr
02328     24 BA 85 F1 | 	sub	objptr, #36
0232c     11 5A 66 F0 | 	shl	local20, #17
02330     2C 5D 02 FB | 	rdlong	local21, local19
02334     2D 5D 02 F1 | 	add	local21, local20
02338     2E 5F 02 F6 | 	mov	local22, local21
0233c     80 40 38 FF 
02340     00 5E 06 F1 | 	add	local22, ##1887502336
02344                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02344     2C 5F 62 FC | 	wrlong	local22, local19
02348     01 56 06 F1 | 	add	local18, #1
0234c     05 56 5E F2 | 	cmps	local18, #5 wcz
02350     BC FF 9F CD |  if_b	jmp	#LR__0083
02354                 | LR__0084
02354     24 BA 05 F1 | 	add	objptr, #36
02358     DD 60 02 FB | 	rdlong	local23, objptr
0235c     11 60 66 F0 | 	shl	local23, #17
02360     40 BA 05 F1 | 	add	objptr, #64
02364     DD 62 02 FB | 	rdlong	local24, objptr
02368     30 63 02 F1 | 	add	local24, local23
0236c                 | ' timings[5]:=timings[5]+hdmibase<<17
0236c     DD 62 62 FC | 	wrlong	local24, objptr
02370                 | ' clkfreq:=timings[13]
02370     20 BA 05 F1 | 	add	objptr, #32
02374     DD 36 02 FB | 	rdlong	local02, objptr
02378     14 36 66 FC | 	wrlong	local02, #20
0237c                 | ' hubset(timings[14])
0237c     04 BA 05 F1 | 	add	objptr, #4
02380     DD 2A 02 FB | 	rdlong	arg01, objptr
02384     88 BA 85 F1 | 	sub	objptr, #136
02388     00 2A 62 FD | 	hubset	arg01
0238c                 | ' waitms(1)
0238c     01 2A 06 F6 | 	mov	arg01, #1
02390     64 08 B0 FD | 	call	#__system___waitms
02394     1A 65 02 F6 | 	mov	local25, local01
02398     03 64 06 F5 | 	and	local25, #3
0239c     32 67 C2 F9 | 	decod	local26, local25
023a0                 | ' 
023a0                 | ' 
023a0                 | ' xzoom:=1<<(mode & 3)
023a0     CC BA 05 F1 | 	add	objptr, #204
023a4     DD 66 62 FC | 	wrlong	local26, objptr
023a8                 | ' 
023a8                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
023a8     33 43 02 F6 | 	mov	local08, local26
023ac     CC BA 85 F1 | 	sub	objptr, #204
023b0     08 42 0E F2 | 	cmp	local08, #8 wz
023b4     24 00 90 5D |  if_ne	jmp	#LR__0085
023b8     1A 45 02 F6 | 	mov	local09, local01
023bc     04 44 46 F0 | 	shr	local09, #4
023c0     03 44 06 F5 | 	and	local09, #3
023c4     03 44 0E F2 | 	cmp	local09, #3 wz
023c8     10 00 90 AD |  if_e	jmp	#LR__0085
023cc                 | '   xzoom:=4
023cc     04 36 06 F6 | 	mov	local02, #4
023d0     CC BA 05 F1 | 	add	objptr, #204
023d4     DD 08 68 FC | 	wrlong	#4, objptr
023d8     CC BA 85 F1 | 	sub	objptr, #204
023dc                 | LR__0085
023dc     1A 69 02 F6 | 	mov	local27, local01
023e0     02 68 46 F0 | 	shr	local27, #2
023e4     03 68 06 F5 | 	and	local27, #3
023e8     34 6B C2 F9 | 	decod	local28, local27
023ec                 | ' 
023ec                 | ' yzoom:=1<<((mode>>2) & 3)
023ec     D0 BA 05 F1 | 	add	objptr, #208
023f0     DD 6A 62 FC | 	wrlong	local28, objptr
023f4     04 BA 85 F1 | 	sub	objptr, #4
023f8     DD 42 02 FB | 	rdlong	local08, objptr
023fc     04 BA 05 F1 | 	add	objptr, #4
02400     DD 3A 02 FB | 	rdlong	local04, objptr
02404     1D 43 02 FD | 	qmul	local08, local04
02408     18 6C 62 FD | 	getqx	local29
0240c                 | ' azoom:=xzoom*yzoom
0240c     04 BA 05 F1 | 	add	objptr, #4
02410     DD 6C 62 FC | 	wrlong	local29, objptr
02414                 | ' 
02414                 | ' cpl:=timings[11]
02414     58 BA 85 F1 | 	sub	objptr, #88
02418     DD 36 02 FB | 	rdlong	local02, objptr
0241c     14 BA 05 F1 | 	add	objptr, #20
02420     DD 36 62 FC | 	wrlong	local02, objptr
02424     90 BA 85 F1 | 	sub	objptr, #144
02428                 | ' if (mode<512)
02428     01 00 00 FF 
0242c     00 34 5E F2 | 	cmps	local01, ##512 wcz
02430     60 00 90 3D |  if_ae	jmp	#LR__0086
02434     80 BA 05 F1 | 	add	objptr, #128
02438     DD 76 02 FB | 	rdlong	muldiva_, objptr
0243c     04 76 46 F0 | 	shr	muldiva_, #4
02440     50 BA 05 F1 | 	add	objptr, #80
02444     DD 78 02 FB | 	rdlong	muldivb_, objptr
02448     D0 BA 85 F1 | 	sub	objptr, #208
0244c     CC 00 A0 FD | 	call	#unsdivide_
02450                 | '   lines:=(timings[12]>>4)+/yzoom
02450     94 BA 05 F1 | 	add	objptr, #148
02454     DD 78 62 FC | 	wrlong	muldivb_, objptr
02458                 | '   if ((timings[12]>>4)+//yzoom) <>0
02458     14 BA 85 F1 | 	sub	objptr, #20
0245c     DD 76 02 FB | 	rdlong	muldiva_, objptr
02460     04 76 46 F0 | 	shr	muldiva_, #4
02464     50 BA 05 F1 | 	add	objptr, #80
02468     DD 78 02 FB | 	rdlong	muldivb_, objptr
0246c     D0 BA 85 F1 | 	sub	objptr, #208
02470     CC 00 A0 FD | 	call	#unsdivide_
02474     00 76 0E F2 | 	cmp	muldiva_, #0 wz
02478     AC 00 90 AD |  if_e	jmp	#LR__0089
0247c                 | '     lines +=1
0247c     94 BA 05 F1 | 	add	objptr, #148
02480     DD 36 02 FB | 	rdlong	local02, objptr
02484     01 36 06 F1 | 	add	local02, #1
02488     DD 36 62 FC | 	wrlong	local02, objptr
0248c     94 BA 85 F1 | 	sub	objptr, #148
02490                 | ' 
02490                 | ' else
02490     94 00 90 FD | 	jmp	#LR__0089
02494                 | LR__0086
02494     80 BA 05 F1 | 	add	objptr, #128
02498     DD 76 02 FB | 	rdlong	muldiva_, objptr
0249c     50 BA 05 F1 | 	add	objptr, #80
024a0     DD 78 02 FB | 	rdlong	muldivb_, objptr
024a4     D0 BA 85 F1 | 	sub	objptr, #208
024a8     D0 00 A0 FD | 	call	#divide_
024ac                 | '   lines:=timings[12]/yzoom
024ac     94 BA 05 F1 | 	add	objptr, #148
024b0     DD 78 62 FC | 	wrlong	muldivb_, objptr
024b4                 | '   if cpl//xzoom==0
024b4     04 BA 85 F1 | 	sub	objptr, #4
024b8     DD 76 02 FB | 	rdlong	muldiva_, objptr
024bc     3C BA 05 F1 | 	add	objptr, #60
024c0     DD 78 02 FB | 	rdlong	muldivb_, objptr
024c4     CC BA 85 F1 | 	sub	objptr, #204
024c8     D0 00 A0 FD | 	call	#divide_
024cc     00 76 0E F2 | 	cmp	muldiva_, #0 wz
024d0     28 00 90 5D |  if_ne	jmp	#LR__0087
024d4                 | '     cpl:=cpl/xzoom
024d4     90 BA 05 F1 | 	add	objptr, #144
024d8     DD 76 02 FB | 	rdlong	muldiva_, objptr
024dc     3C BA 05 F1 | 	add	objptr, #60
024e0     DD 78 02 FB | 	rdlong	muldivb_, objptr
024e4     CC BA 85 F1 | 	sub	objptr, #204
024e8     D0 00 A0 FD | 	call	#divide_
024ec     90 BA 05 F1 | 	add	objptr, #144
024f0     DD 78 62 FC | 	wrlong	muldivb_, objptr
024f4     90 BA 85 F1 | 	sub	objptr, #144
024f8                 | '   else
024f8     2C 00 90 FD | 	jmp	#LR__0088
024fc                 | LR__0087
024fc     90 BA 05 F1 | 	add	objptr, #144
02500     DD 76 02 FB | 	rdlong	muldiva_, objptr
02504     3C BA 05 F1 | 	add	objptr, #60
02508     DD 78 02 FB | 	rdlong	muldivb_, objptr
0250c     CC BA 85 F1 | 	sub	objptr, #204
02510     D0 00 A0 FD | 	call	#divide_
02514     3C 6F 02 F6 | 	mov	local30, muldivb_
02518     01 6E 06 F1 | 	add	local30, #1
0251c                 | '     cpl:=cpl/xzoom+1
0251c     90 BA 05 F1 | 	add	objptr, #144
02520     DD 6E 62 FC | 	wrlong	local30, objptr
02524     90 BA 85 F1 | 	sub	objptr, #144
02528                 | LR__0088
02528                 | LR__0089
02528     90 BA 05 F1 | 	add	objptr, #144
0252c     DD 42 02 FB | 	rdlong	local08, objptr
02530     04 BA 05 F1 | 	add	objptr, #4
02534     DD 3A 02 FB | 	rdlong	local04, objptr
02538     1D 43 02 FD | 	qmul	local08, local04
0253c     18 70 62 FD | 	getqx	local31
02540                 | ' 
02540                 | ' buflen:=(cpl*lines)
02540     64 BA 85 F1 | 	sub	objptr, #100
02544     DD 70 62 FC | 	wrlong	local31, objptr
02548     30 BA 85 F1 | 	sub	objptr, #48
0254c     02 70 66 F0 | 	shl	local31, #2
02550     13 72 C6 F9 | 	decod	local32, #19
02554     38 73 82 F1 | 	sub	local32, local31
02558                 | ' buf_ptr:=$80000-4*buflen
02558     DD 72 62 FC | 	wrlong	local32, objptr
0255c     50 BA 05 F1 | 	add	objptr, #80
02560     DD 74 02 F6 | 	mov	local33, objptr
02564                 | ' mode_ptr:=@timings
02564     3C BA 85 F1 | 	sub	objptr, #60
02568     DD 74 62 FC | 	wrlong	local33, objptr
0256c                 | ' graphmode:=mode
0256c     B0 BA 05 F1 | 	add	objptr, #176
02570     DD 34 62 FC | 	wrlong	local01, objptr
02574     C4 BA 85 F1 | 	sub	objptr, #196
02578                 | ' makedl(mode)
02578     1A 2B 02 F6 | 	mov	arg01, local01
0257c     0C 00 B0 FD | 	call	#_makedl
02580                 | LR__0090
02580     AF F0 03 F6 | 	mov	ptra, fp
02584     BF 00 A0 FD | 	call	#popregs_
02588                 | _setmode_ret
02588     2D 00 64 FD | 	ret
0258c                 | 
0258c                 | ' 
0258c                 | ' 
0258c                 | ' 
0258c                 | ' 
0258c                 | ' '---------- Make a display list
0258c                 | ' 
0258c                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
0258c                 | _makedl
0258c                 | ' 
0258c                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
0258c                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
0258c                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
0258c                 | ' 
0258c                 | ' '   0 - display a up/down border line
0258c                 | ' 
0258c                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
0258c                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
0258c                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
0258c                 | ' '    nnnn - font line to display, 0..15
0258c                 | ' '    llllll - character line, determines the cursor Y position
0258c                 | ' 
0258c                 | ' 
0258c                 | ' if (mode &256==0)
0258c     00 2B CE F7 | 	test	arg01, #256 wz
02590     1C 00 90 5D |  if_ne	jmp	#LR__0091
02594     DD CC 01 FB | 	rdlong	_var01, objptr
02598     04 00 00 FF 
0259c     00 CD 85 F1 | 	sub	_var01, ##2304
025a0                 | '   dl_ptr:=buf_ptr-4*576
025a0     1C BA 05 F1 | 	add	objptr, #28
025a4     DD CC 61 FC | 	wrlong	_var01, objptr
025a8     1C BA 85 F1 | 	sub	objptr, #28
025ac                 | ' else
025ac     18 00 90 FD | 	jmp	#LR__0092
025b0                 | LR__0091
025b0     DD CE 01 FB | 	rdlong	_var02, objptr
025b4     03 00 00 FF 
025b8     C0 CF 85 F1 | 	sub	_var02, ##1984
025bc                 | '   dl_ptr:=buf_ptr-4*496
025bc     1C BA 05 F1 | 	add	objptr, #28
025c0     DD CE 61 FC | 	wrlong	_var02, objptr
025c4     1C BA 85 F1 | 	sub	objptr, #28
025c8                 | LR__0092
025c8     15 D1 01 F6 | 	mov	_var03, arg01
025cc     02 D0 45 F0 | 	shr	_var03, #2
025d0     03 D0 05 F5 | 	and	_var03, #3
025d4                 | '  ' dl_ptr:=buf_ptr-4*540
025d4                 | ' 
025d4                 | ' vzoom:=((mode>>2) & 3)
025d4                 | ' 
025d4                 | ' 
025d4                 | ' if mode<512 '' text modes
025d4     01 00 00 FF 
025d8     00 2A 5E F2 | 	cmps	arg01, ##512 wcz
025dc     E4 01 90 3D |  if_ae	jmp	#LR__0100
025e0                 | ' 
025e0                 | '   if timings[6]>0 'borders
025e0     68 BA 05 F1 | 	add	objptr, #104
025e4     DD D2 01 FB | 	rdlong	_var04, objptr
025e8     68 BA 85 F1 | 	sub	objptr, #104
025ec     00 D2 5D F2 | 	cmps	_var04, #0 wcz
025f0     D4 00 90 ED |  if_be	jmp	#LR__0097
025f4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
025f4     00 D4 05 F6 | 	mov	_var05, #0
025f8     68 BA 05 F1 | 	add	objptr, #104
025fc     DD D6 01 FB | 	rdlong	_var06, objptr
02600     68 BA 85 F1 | 	sub	objptr, #104
02604     01 D6 85 F1 | 	sub	_var06, #1
02608     00 D6 5D F2 | 	cmps	_var06, #0 wcz
0260c     01 D8 05 16 |  if_a	mov	_var07, #1
02610     01 D8 65 E6 |  if_be	neg	_var07, #1
02614     EC DA 01 F6 | 	mov	_var08, _var07
02618     EC D6 01 F1 | 	add	_var06, _var07
0261c     08 DA 9F FE | 	loc	pa,	#(@LR__0094-@LR__0093)
02620     93 00 A0 FD | 	call	#FCACHE_LOAD_
02624                 | LR__0093
02624     EA DC 01 F6 | 	mov	_var09, _var05
02628     02 DC 65 F0 | 	shl	_var09, #2
0262c     1C BA 05 F1 | 	add	objptr, #28
02630     DD DE 01 FB | 	rdlong	_var10, objptr
02634     1C BA 85 F1 | 	sub	objptr, #28
02638     EE DE 01 F1 | 	add	_var10, _var09
0263c                 | '       long[dl_ptr+4*i]:=$0
0263c     EF 00 68 FC | 	wrlong	#0, _var10
02640     ED D4 01 F1 | 	add	_var05, _var08
02644     EB D4 09 F2 | 	cmp	_var05, _var06 wz
02648     D8 FF 9F 5D |  if_ne	jmp	#LR__0093
0264c                 | LR__0094
0264c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
0264c     68 BA 05 F1 | 	add	objptr, #104
02650     DD D4 01 FB | 	rdlong	_var05, objptr
02654     18 BA 05 F1 | 	add	objptr, #24
02658     DD D8 01 FB | 	rdlong	_var07, objptr
0265c     EC D4 01 F1 | 	add	_var05, _var07
02660     0C BA 05 F1 | 	add	objptr, #12
02664     DD E0 01 FB | 	rdlong	_var11, objptr
02668     01 E0 85 F1 | 	sub	_var11, #1
0266c     24 BA 85 F1 | 	sub	objptr, #36
02670     DD E2 01 FB | 	rdlong	_var12, objptr
02674     18 BA 05 F1 | 	add	objptr, #24
02678     DD E4 01 FB | 	rdlong	_var13, objptr
0267c     80 BA 85 F1 | 	sub	objptr, #128
02680     F2 E2 01 F1 | 	add	_var12, _var13
02684     F1 E0 59 F2 | 	cmps	_var11, _var12 wcz
02688     01 E6 05 16 |  if_a	mov	_var14, #1
0268c     01 E6 65 E6 |  if_be	neg	_var14, #1
02690     F3 E8 01 F6 | 	mov	_var15, _var14
02694     F3 E0 01 F1 | 	add	_var11, _var14
02698     8C D9 9F FE | 	loc	pa,	#(@LR__0096-@LR__0095)
0269c     93 00 A0 FD | 	call	#FCACHE_LOAD_
026a0                 | LR__0095
026a0     EA EA 01 F6 | 	mov	_var16, _var05
026a4     02 EA 65 F0 | 	shl	_var16, #2
026a8     1C BA 05 F1 | 	add	objptr, #28
026ac     DD EC 01 FB | 	rdlong	_var17, objptr
026b0     1C BA 85 F1 | 	sub	objptr, #28
026b4     F5 EC 01 F1 | 	add	_var17, _var16
026b8                 | '       long[dl_ptr+4*i]:=$0
026b8     F6 00 68 FC | 	wrlong	#0, _var17
026bc     F4 D4 01 F1 | 	add	_var05, _var15
026c0     F0 D4 09 F2 | 	cmp	_var05, _var11 wz
026c4     D8 FF 9F 5D |  if_ne	jmp	#LR__0095
026c8                 | LR__0096
026c8                 | LR__0097
026c8     10 EE 05 F6 | 	mov	_var18, #16
026cc     E8 EE 61 F0 | 	shl	_var18, _var03
026d0                 | '   lpc:=16<<vzoom
026d0                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
026d0     68 BA 05 F1 | 	add	objptr, #104
026d4     DD D4 01 FB | 	rdlong	_var05, objptr
026d8     EA F0 01 F6 | 	mov	_var19, _var05
026dc     18 BA 05 F1 | 	add	objptr, #24
026e0     DD F2 01 FB | 	rdlong	_var20, objptr
026e4     F9 F0 01 F1 | 	add	_var19, _var20
026e8     01 F0 85 F1 | 	sub	_var19, #1
026ec     18 BA 85 F1 | 	sub	objptr, #24
026f0     DD E6 01 FB | 	rdlong	_var14, objptr
026f4     68 BA 85 F1 | 	sub	objptr, #104
026f8     F3 F0 59 F2 | 	cmps	_var19, _var14 wcz
026fc     01 F4 05 16 |  if_a	mov	_var21, #1
02700     01 F4 65 E6 |  if_be	neg	_var21, #1
02704     FA F6 01 F6 | 	mov	_var22, _var21
02708     FA F0 01 F1 | 	add	_var19, _var21
0270c     A0 D9 9F FE | 	loc	pa,	#(@LR__0099-@LR__0098)
02710     93 00 A0 FD | 	call	#FCACHE_LOAD_
02714                 | LR__0098
02714     EA 76 02 F6 | 	mov	muldiva_, _var05
02718     68 BA 05 F1 | 	add	objptr, #104
0271c     DD F8 01 FB | 	rdlong	_var23, objptr
02720     68 BA 85 F1 | 	sub	objptr, #104
02724     FC 76 82 F1 | 	sub	muldiva_, _var23
02728     F7 78 02 F6 | 	mov	muldivb_, _var18
0272c     CC 00 A0 FD | 	call	#unsdivide_
02730     E8 76 42 F0 | 	shr	muldiva_, _var03
02734                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02734     3B FB 01 F6 | 	mov	_var24, muldiva_
02738     EA 76 02 F6 | 	mov	muldiva_, _var05
0273c     68 BA 05 F1 | 	add	objptr, #104
02740     DD F8 01 FB | 	rdlong	_var23, objptr
02744     68 BA 85 F1 | 	sub	objptr, #104
02748     FC 76 82 F1 | 	sub	muldiva_, _var23
0274c     F7 78 02 F6 | 	mov	muldivb_, _var18
02750     CC 00 A0 FD | 	call	#unsdivide_
02754     3C FD 01 F6 | 	mov	_var25, muldivb_
02758                 | '     charline:=(i-timings[6])+/lpc
02758     90 BA 05 F1 | 	add	objptr, #144
0275c     DD F8 01 FB | 	rdlong	_var23, objptr
02760     90 BA 85 F1 | 	sub	objptr, #144
02764     FE F8 01 FD | 	qmul	_var23, _var25
02768     18 FE 61 FD | 	getqx	_var26
0276c     02 FE 65 F0 | 	shl	_var26, #2
02770     DD 00 02 FB | 	rdlong	_var27, objptr
02774     FF 00 02 F1 | 	add	_var27, _var26
02778     15 03 02 F6 | 	mov	_var28, arg01
0277c     03 02 06 F5 | 	and	_var28, #3
02780     01 01 02 F1 | 	add	_var27, _var28
02784                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02784     0C 00 66 F0 | 	shl	_var27, #12
02788     08 FA 65 F0 | 	shl	_var24, #8
0278c     FD 00 02 F1 | 	add	_var27, _var24
02790     02 FC 65 F0 | 	shl	_var25, #2
02794     FE 00 02 F1 | 	add	_var27, _var25
02798     01 00 06 F1 | 	add	_var27, #1
0279c     EA 04 02 F6 | 	mov	_var29, _var05
027a0     02 04 66 F0 | 	shl	_var29, #2
027a4     1C BA 05 F1 | 	add	objptr, #28
027a8     DD 06 02 FB | 	rdlong	_var30, objptr
027ac     1C BA 85 F1 | 	sub	objptr, #28
027b0     02 07 02 F1 | 	add	_var30, _var29
027b4                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
027b4     03 01 62 FC | 	wrlong	_var27, _var30
027b8     FB D4 01 F1 | 	add	_var05, _var22
027bc     F8 D4 09 F2 | 	cmp	_var05, _var19 wz
027c0     50 FF 9F 5D |  if_ne	jmp	#LR__0098
027c4                 | LR__0099
027c4                 | LR__0100
027c4                 | ' 
027c4                 | ' 
027c4                 | ' 
027c4                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
027c4     01 00 00 FF 
027c8     00 2A 5E F2 | 	cmps	arg01, ##512 wcz
027cc     AC 01 90 CD |  if_b	jmp	#LR__0108
027d0                 | ' 
027d0                 | '   if timings[6]>0 'borders
027d0     68 BA 05 F1 | 	add	objptr, #104
027d4     DD D2 01 FB | 	rdlong	_var04, objptr
027d8     68 BA 85 F1 | 	sub	objptr, #104
027dc     00 D2 5D F2 | 	cmps	_var04, #0 wcz
027e0     D4 00 90 ED |  if_be	jmp	#LR__0105
027e4                 | '     repeat i from 0 to timings[6]-1 '0 to -1
027e4     00 D4 05 F6 | 	mov	_var05, #0
027e8     68 BA 05 F1 | 	add	objptr, #104
027ec     DD 08 02 FB | 	rdlong	_var31, objptr
027f0     68 BA 85 F1 | 	sub	objptr, #104
027f4     01 08 86 F1 | 	sub	_var31, #1
027f8     00 08 5E F2 | 	cmps	_var31, #0 wcz
027fc     01 D8 05 16 |  if_a	mov	_var07, #1
02800     01 D8 65 E6 |  if_be	neg	_var07, #1
02804     EC 0A 02 F6 | 	mov	_var32, _var07
02808     EC 08 02 F1 | 	add	_var31, _var07
0280c     18 D8 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
02810     93 00 A0 FD | 	call	#FCACHE_LOAD_
02814                 | LR__0101
02814     EA 0C 02 F6 | 	mov	_var33, _var05
02818     02 0C 66 F0 | 	shl	_var33, #2
0281c     1C BA 05 F1 | 	add	objptr, #28
02820     DD 0E 02 FB | 	rdlong	_var34, objptr
02824     1C BA 85 F1 | 	sub	objptr, #28
02828     06 0F 02 F1 | 	add	_var34, _var33
0282c                 | '       long[dl_ptr+4*i]:=$0
0282c     07 01 68 FC | 	wrlong	#0, _var34
02830     05 D5 01 F1 | 	add	_var05, _var32
02834     04 D5 09 F2 | 	cmp	_var05, _var31 wz
02838     D8 FF 9F 5D |  if_ne	jmp	#LR__0101
0283c                 | LR__0102
0283c                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
0283c     68 BA 05 F1 | 	add	objptr, #104
02840     DD D4 01 FB | 	rdlong	_var05, objptr
02844     18 BA 05 F1 | 	add	objptr, #24
02848     DD D8 01 FB | 	rdlong	_var07, objptr
0284c     EC D4 01 F1 | 	add	_var05, _var07
02850     0C BA 05 F1 | 	add	objptr, #12
02854     DD 10 02 FB | 	rdlong	_var35, objptr
02858     01 10 86 F1 | 	sub	_var35, #1
0285c     24 BA 85 F1 | 	sub	objptr, #36
02860     DD E2 01 FB | 	rdlong	_var12, objptr
02864     18 BA 05 F1 | 	add	objptr, #24
02868     DD E4 01 FB | 	rdlong	_var13, objptr
0286c     80 BA 85 F1 | 	sub	objptr, #128
02870     F2 E2 01 F1 | 	add	_var12, _var13
02874     F1 10 5A F2 | 	cmps	_var35, _var12 wcz
02878     01 E6 05 16 |  if_a	mov	_var14, #1
0287c     01 E6 65 E6 |  if_be	neg	_var14, #1
02880     F3 12 02 F6 | 	mov	_var36, _var14
02884     F3 10 02 F1 | 	add	_var35, _var14
02888     9C D7 9F FE | 	loc	pa,	#(@LR__0104-@LR__0103)
0288c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02890                 | LR__0103
02890     EA 14 02 F6 | 	mov	_var37, _var05
02894     02 14 66 F0 | 	shl	_var37, #2
02898     1C BA 05 F1 | 	add	objptr, #28
0289c     DD 16 02 FB | 	rdlong	_var38, objptr
028a0     1C BA 85 F1 | 	sub	objptr, #28
028a4     0A 17 02 F1 | 	add	_var38, _var37
028a8                 | '       long[dl_ptr+4*i]:=$0
028a8     0B 01 68 FC | 	wrlong	#0, _var38
028ac     09 D5 01 F1 | 	add	_var05, _var36
028b0     08 D5 09 F2 | 	cmp	_var05, _var35 wz
028b4     D8 FF 9F 5D |  if_ne	jmp	#LR__0103
028b8                 | LR__0104
028b8                 | LR__0105
028b8                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
028b8     68 BA 05 F1 | 	add	objptr, #104
028bc     DD D4 01 FB | 	rdlong	_var05, objptr
028c0     EA 18 02 F6 | 	mov	_var39, _var05
028c4     18 BA 05 F1 | 	add	objptr, #24
028c8     DD F2 01 FB | 	rdlong	_var20, objptr
028cc     F9 18 02 F1 | 	add	_var39, _var20
028d0     01 18 86 F1 | 	sub	_var39, #1
028d4     18 BA 85 F1 | 	sub	objptr, #24
028d8     DD E6 01 FB | 	rdlong	_var14, objptr
028dc     68 BA 85 F1 | 	sub	objptr, #104
028e0     F3 18 5A F2 | 	cmps	_var39, _var14 wcz
028e4     01 F4 05 16 |  if_a	mov	_var21, #1
028e8     01 F4 65 E6 |  if_be	neg	_var21, #1
028ec     FA 1A 02 F6 | 	mov	_var40, _var21
028f0     FA 18 02 F1 | 	add	_var39, _var21
028f4     88 D7 9F FE | 	loc	pa,	#(@LR__0107-@LR__0106)
028f8     93 00 A0 FD | 	call	#FCACHE_LOAD_
028fc                 | LR__0106
028fc     EA 1C 02 F6 | 	mov	_var41, _var05
02900     68 BA 05 F1 | 	add	objptr, #104
02904     DD F8 01 FB | 	rdlong	_var23, objptr
02908     FC 1C 82 F1 | 	sub	_var41, _var23
0290c     E8 1C 42 F0 | 	shr	_var41, _var03
02910     28 BA 05 F1 | 	add	objptr, #40
02914     DD F8 01 FB | 	rdlong	_var23, objptr
02918     90 BA 85 F1 | 	sub	objptr, #144
0291c     0E F9 01 FD | 	qmul	_var23, _var41
02920     18 1E 62 FD | 	getqx	_var42
02924     02 1E 66 F0 | 	shl	_var42, #2
02928     DD 20 02 FB | 	rdlong	_var43, objptr
0292c     0F 21 02 F1 | 	add	_var43, _var42
02930     15 23 02 F6 | 	mov	_var44, arg01
02934     03 22 06 F5 | 	and	_var44, #3
02938     11 21 02 F1 | 	add	_var43, _var44
0293c                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
0293c     0C 20 66 F0 | 	shl	_var43, #12
02940     02 20 06 F1 | 	add	_var43, #2
02944     15 25 02 F6 | 	mov	_var45, arg01
02948     30 24 06 F5 | 	and	_var45, #48
0294c     02 24 46 F0 | 	shr	_var45, #2
02950     12 21 02 F1 | 	add	_var43, _var45
02954     EA 26 02 F6 | 	mov	_var46, _var05
02958     02 26 66 F0 | 	shl	_var46, #2
0295c     1C BA 05 F1 | 	add	objptr, #28
02960     DD 28 02 FB | 	rdlong	_var47, objptr
02964     1C BA 85 F1 | 	sub	objptr, #28
02968     13 29 02 F1 | 	add	_var47, _var46
0296c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
0296c     14 21 62 FC | 	wrlong	_var43, _var47
02970     0D D5 01 F1 | 	add	_var05, _var40
02974     0C D5 09 F2 | 	cmp	_var05, _var39 wz
02978     80 FF 9F 5D |  if_ne	jmp	#LR__0106
0297c                 | LR__0107
0297c                 | LR__0108
0297c                 | _makedl_ret
0297c     2D 00 64 FD | 	ret
02980                 | hubexit
02980     81 00 80 FD | 	jmp	#cogexit
02984                 | 
02984                 | __system___setbaud
02984     14 76 06 FB | 	rdlong	muldiva_, #20
02988     15 79 02 F6 | 	mov	muldivb_, arg01
0298c     D0 00 A0 FD | 	call	#divide_
02990     40 7C 64 FD | 	dirl	#62
02994     40 7E 64 FD | 	dirl	#63
02998     DE 78 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0299c     10 78 66 F0 | 	shl	muldivb_, #16
029a0     07 2C 06 F6 | 	mov	arg02, #7
029a4     3C 2D 02 F1 | 	add	arg02, muldivb_
029a8     3E F8 0C FC | 	wrpin	#124, #62
029ac     3E 2C 16 FC | 	wxpin	arg02, #62
029b0     3F 7C 0C FC | 	wrpin	#62, #63
029b4     14 2C 06 F1 | 	add	arg02, #20
029b8     3F 2C 16 FC | 	wxpin	arg02, #63
029bc     41 7C 64 FD | 	dirh	#62
029c0     41 7E 64 FD | 	dirh	#63
029c4                 | __system___setbaud_ret
029c4     2D 00 64 FD | 	ret
029c8                 | 
029c8                 | __system___txraw
029c8     02 5A 05 F6 | 	mov	COUNT_, #2
029cc     B0 00 A0 FD | 	call	#pushregs_
029d0     15 35 02 F6 | 	mov	local01, arg01
029d4     DE 36 0A FB | 	rdlong	local02, ptr___system__dat__ wz
029d8     0C 00 90 5D |  if_ne	jmp	#LR__0109
029dc     C2 01 00 FF 
029e0     00 2A 06 F6 | 	mov	arg01, ##230400
029e4     9C FF BF FD | 	call	#__system___setbaud
029e8                 | LR__0109
029e8     3E 34 26 FC | 	wypin	local01, #62
029ec     1F 02 64 FD | 	waitx	#1
029f0     14 D6 9F FE | 	loc	pa,	#(@LR__0111-@LR__0110)
029f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
029f8                 | LR__0110
029f8     40 7C 74 FD | 	testp	#62 wc
029fc     F8 FF 9F 3D |  if_nc	jmp	#LR__0110
02a00                 | LR__0111
02a00     01 C8 05 F6 | 	mov	result1, #1
02a04     AF F0 03 F6 | 	mov	ptra, fp
02a08     BF 00 A0 FD | 	call	#popregs_
02a0c                 | __system___txraw_ret
02a0c     2D 00 64 FD | 	ret
02a10                 | 
02a10                 | __system____builtin_memmove
02a10     15 CD 01 F6 | 	mov	_var01, arg01
02a14     16 2B 5A F2 | 	cmps	arg01, arg02 wcz
02a18     50 00 90 3D |  if_ae	jmp	#LR__0119
02a1c     00 D6 9F FE | 	loc	pa,	#(@LR__0113-@LR__0112)
02a20     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a24                 | LR__0112
02a24     03 2E 5E F2 | 	cmps	arg03, #3 wcz
02a28     18 00 90 ED |  if_be	jmp	#LR__0114
02a2c     16 CF 01 FB | 	rdlong	_var02, arg02
02a30     15 CF 61 FC | 	wrlong	_var02, arg01
02a34     04 2A 06 F1 | 	add	arg01, #4
02a38     04 2C 06 F1 | 	add	arg02, #4
02a3c     04 2E 86 F1 | 	sub	arg03, #4
02a40     E0 FF 9F FD | 	jmp	#LR__0112
02a44                 | LR__0113
02a44                 | LR__0114
02a44     17 D1 09 F6 | 	mov	_var03, arg03 wz
02a48     4C 00 90 AD |  if_e	jmp	#LR__0125
02a4c     C4 D5 9F FE | 	loc	pa,	#(@LR__0117-@LR__0115)
02a50     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a54                 | LR__0115
02a54     E8 08 D8 FC | 	rep	@LR__0118, _var03
02a58                 | LR__0116
02a58     16 CF C1 FA | 	rdbyte	_var02, arg02
02a5c     15 CF 41 FC | 	wrbyte	_var02, arg01
02a60     01 2A 06 F1 | 	add	arg01, #1
02a64     01 2C 06 F1 | 	add	arg02, #1
02a68                 | LR__0117
02a68                 | LR__0118
02a68     2C 00 90 FD | 	jmp	#LR__0125
02a6c                 | LR__0119
02a6c     17 2B 02 F1 | 	add	arg01, arg03
02a70     17 2D 02 F1 | 	add	arg02, arg03
02a74     17 D3 09 F6 | 	mov	_var04, arg03 wz
02a78     1C 00 90 AD |  if_e	jmp	#LR__0124
02a7c     94 D5 9F FE | 	loc	pa,	#(@LR__0122-@LR__0120)
02a80     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a84                 | LR__0120
02a84     E9 08 D8 FC | 	rep	@LR__0123, _var04
02a88                 | LR__0121
02a88     01 2A 86 F1 | 	sub	arg01, #1
02a8c     01 2C 86 F1 | 	sub	arg02, #1
02a90     16 CF C1 FA | 	rdbyte	_var02, arg02
02a94     15 CF 41 FC | 	wrbyte	_var02, arg01
02a98                 | LR__0122
02a98                 | LR__0123
02a98                 | LR__0124
02a98                 | LR__0125
02a98     E6 C8 01 F6 | 	mov	result1, _var01
02a9c                 | __system____builtin_memmove_ret
02a9c     2D 00 64 FD | 	ret
02aa0                 | 
02aa0                 | __system__longmove
02aa0     15 CD 01 F6 | 	mov	_var01, arg01
02aa4     16 2B 5A F2 | 	cmps	arg01, arg02 wcz
02aa8     28 00 90 3D |  if_ae	jmp	#LR__0130
02aac     17 CF 09 F6 | 	mov	_var02, arg03 wz
02ab0     54 00 90 AD |  if_e	jmp	#LR__0136
02ab4     5C D5 9F FE | 	loc	pa,	#(@LR__0128-@LR__0126)
02ab8     93 00 A0 FD | 	call	#FCACHE_LOAD_
02abc                 | LR__0126
02abc     E7 08 D8 FC | 	rep	@LR__0129, _var02
02ac0                 | LR__0127
02ac0     16 D1 01 FB | 	rdlong	_var03, arg02
02ac4     15 D1 61 FC | 	wrlong	_var03, arg01
02ac8     04 2A 06 F1 | 	add	arg01, #4
02acc     04 2C 06 F1 | 	add	arg02, #4
02ad0                 | LR__0128
02ad0                 | LR__0129
02ad0     34 00 90 FD | 	jmp	#LR__0136
02ad4                 | LR__0130
02ad4     17 D3 01 F6 | 	mov	_var04, arg03
02ad8     02 D2 65 F0 | 	shl	_var04, #2
02adc     E9 2A 02 F1 | 	add	arg01, _var04
02ae0     E9 2C 02 F1 | 	add	arg02, _var04
02ae4     17 D5 09 F6 | 	mov	_var05, arg03 wz
02ae8     1C 00 90 AD |  if_e	jmp	#LR__0135
02aec     24 D5 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
02af0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02af4                 | LR__0131
02af4     EA 08 D8 FC | 	rep	@LR__0134, _var05
02af8                 | LR__0132
02af8     04 2A 86 F1 | 	sub	arg01, #4
02afc     04 2C 86 F1 | 	sub	arg02, #4
02b00     16 D1 01 FB | 	rdlong	_var03, arg02
02b04     15 D1 61 FC | 	wrlong	_var03, arg01
02b08                 | LR__0133
02b08                 | LR__0134
02b08                 | LR__0135
02b08                 | LR__0136
02b08     E6 C8 01 F6 | 	mov	result1, _var01
02b0c                 | __system__longmove_ret
02b0c     2D 00 64 FD | 	ret
02b10                 | 
02b10                 | __system____topofstack
02b10     00 5A 05 F6 | 	mov	COUNT_, #0
02b14     B0 00 A0 FD | 	call	#pushregs_
02b18     0C F0 07 F1 | 	add	ptra, #12
02b1c     04 5E 05 F1 | 	add	fp, #4
02b20     AF 2A 62 FC | 	wrlong	arg01, fp
02b24     AF C8 01 F6 | 	mov	result1, fp
02b28     04 5E 85 F1 | 	sub	fp, #4
02b2c     AF F0 03 F6 | 	mov	ptra, fp
02b30     BF 00 A0 FD | 	call	#popregs_
02b34                 | __system____topofstack_ret
02b34     2D 00 64 FD | 	ret
02b38                 | 
02b38                 | __system___make_methodptr
02b38     04 5A 05 F6 | 	mov	COUNT_, #4
02b3c     B0 00 A0 FD | 	call	#pushregs_
02b40     15 35 02 F6 | 	mov	local01, arg01
02b44     16 37 02 F6 | 	mov	local02, arg02
02b48     08 2A 06 F6 | 	mov	arg01, #8
02b4c     6C 04 B0 FD | 	call	#__system___gc_alloc_managed
02b50     E4 38 0A F6 | 	mov	local03, result1 wz
02b54     10 00 90 AD |  if_e	jmp	#LR__0137
02b58     1C 35 62 FC | 	wrlong	local01, local03
02b5c     1C 3B 02 F6 | 	mov	local04, local03
02b60     04 3A 06 F1 | 	add	local04, #4
02b64     1D 37 62 FC | 	wrlong	local02, local04
02b68                 | LR__0137
02b68     1C C9 01 F6 | 	mov	result1, local03
02b6c     AF F0 03 F6 | 	mov	ptra, fp
02b70     BF 00 A0 FD | 	call	#popregs_
02b74                 | __system___make_methodptr_ret
02b74     2D 00 64 FD | 	ret
02b78                 | 
02b78                 | __system___lockmem
02b78     02 5A 05 F6 | 	mov	COUNT_, #2
02b7c     B0 00 A0 FD | 	call	#pushregs_
02b80     01 C8 61 FD | 	cogid	result1
02b84     E4 34 02 F6 | 	mov	local01, result1
02b88     00 35 06 F1 | 	add	local01, #256
02b8c                 | LR__0138
02b8c     15 37 0A FB | 	rdlong	local02, arg01 wz
02b90     15 35 62 AC |  if_e	wrlong	local01, arg01
02b94     15 37 02 AB |  if_e	rdlong	local02, arg01
02b98     15 37 02 AB |  if_e	rdlong	local02, arg01
02b9c     1A 37 0A F2 | 	cmp	local02, local01 wz
02ba0     E8 FF 9F 5D |  if_ne	jmp	#LR__0138
02ba4     AF F0 03 F6 | 	mov	ptra, fp
02ba8     BF 00 A0 FD | 	call	#popregs_
02bac                 | __system___lockmem_ret
02bac     2D 00 64 FD | 	ret
02bb0                 | 
02bb0                 | __system___tx
02bb0     02 5A 05 F6 | 	mov	COUNT_, #2
02bb4     B0 00 A0 FD | 	call	#pushregs_
02bb8     15 35 02 F6 | 	mov	local01, arg01
02bbc     0A 34 0E F2 | 	cmp	local01, #10 wz
02bc0     20 00 90 5D |  if_ne	jmp	#LR__0139
02bc4     08 BC 05 F1 | 	add	ptr___system__dat__, #8
02bc8     DE 36 02 FB | 	rdlong	local02, ptr___system__dat__
02bcc     08 BC 85 F1 | 	sub	ptr___system__dat__, #8
02bd0     02 36 CE F7 | 	test	local02, #2 wz
02bd4     0C 00 90 AD |  if_e	jmp	#LR__0139
02bd8     0D 36 06 F6 | 	mov	local02, #13
02bdc     0D 2A 06 F6 | 	mov	arg01, #13
02be0     E4 FD BF FD | 	call	#__system___txraw
02be4                 | LR__0139
02be4     1A 2B 02 F6 | 	mov	arg01, local01
02be8     DC FD BF FD | 	call	#__system___txraw
02bec     AF F0 03 F6 | 	mov	ptra, fp
02bf0     BF 00 A0 FD | 	call	#popregs_
02bf4                 | __system___tx_ret
02bf4     2D 00 64 FD | 	ret
02bf8                 | 
02bf8                 | __system___waitms
02bf8     03 5A 05 F6 | 	mov	COUNT_, #3
02bfc     B0 00 A0 FD | 	call	#pushregs_
02c00     15 35 02 F6 | 	mov	local01, arg01
02c04     14 36 06 FB | 	rdlong	local02, #20
02c08     0C D4 9F FE | 	loc	pa,	#(@LR__0141-@LR__0140)
02c0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02c10                 | LR__0140
02c10     01 00 00 FF 
02c14     E8 35 5E F2 | 	cmps	local01, ##1000 wcz
02c18     1F 36 62 1D |  if_a	waitx	local02
02c1c     01 00 00 1F 
02c20     E8 35 86 11 |  if_a	sub	local01, ##1000
02c24     E8 FF 9F 1D |  if_a	jmp	#LR__0140
02c28                 | LR__0141
02c28     0C BC 05 F1 | 	add	ptr___system__dat__, #12
02c2c     DE 38 0A FB | 	rdlong	local03, ptr___system__dat__ wz
02c30     0C BC 85 F1 | 	sub	ptr___system__dat__, #12
02c34     20 00 90 5D |  if_ne	jmp	#LR__0142
02c38     1B 77 02 F6 | 	mov	muldiva_, local02
02c3c     01 00 00 FF 
02c40     E8 79 06 F6 | 	mov	muldivb_, ##1000
02c44     CC 00 A0 FD | 	call	#unsdivide_
02c48     3C 39 02 F6 | 	mov	local03, muldivb_
02c4c     0C BC 05 F1 | 	add	ptr___system__dat__, #12
02c50     DE 78 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02c54     0C BC 85 F1 | 	sub	ptr___system__dat__, #12
02c58                 | LR__0142
02c58     00 34 5E F2 | 	cmps	local01, #0 wcz
02c5c     1C 35 02 1D |  if_a	qmul	local01, local03
02c60     18 2A 62 1D |  if_a	getqx	arg01
02c64     1F 2A 62 1D |  if_a	waitx	arg01
02c68     AF F0 03 F6 | 	mov	ptra, fp
02c6c     BF 00 A0 FD | 	call	#popregs_
02c70                 | __system___waitms_ret
02c70     2D 00 64 FD | 	ret
02c74                 | 
02c74                 | __system___waitus
02c74     02 5A 05 F6 | 	mov	COUNT_, #2
02c78     B0 00 A0 FD | 	call	#pushregs_
02c7c     15 35 02 F6 | 	mov	local01, arg01
02c80     10 BC 05 F1 | 	add	ptr___system__dat__, #16
02c84     DE 36 0A FB | 	rdlong	local02, ptr___system__dat__ wz
02c88     10 BC 85 F1 | 	sub	ptr___system__dat__, #16
02c8c     20 00 90 5D |  if_ne	jmp	#LR__0143
02c90     14 76 06 FB | 	rdlong	muldiva_, #20
02c94     A1 07 00 FF 
02c98     40 78 06 F6 | 	mov	muldivb_, ##1000000
02c9c     CC 00 A0 FD | 	call	#unsdivide_
02ca0     3C 37 02 F6 | 	mov	local02, muldivb_
02ca4     10 BC 05 F1 | 	add	ptr___system__dat__, #16
02ca8     DE 78 62 FC | 	wrlong	muldivb_, ptr___system__dat__
02cac     10 BC 85 F1 | 	sub	ptr___system__dat__, #16
02cb0                 | LR__0143
02cb0     1B 35 02 FD | 	qmul	local01, local02
02cb4     18 2A 62 FD | 	getqx	arg01
02cb8     1F 2A 62 FD | 	waitx	arg01
02cbc     AF F0 03 F6 | 	mov	ptra, fp
02cc0     BF 00 A0 FD | 	call	#popregs_
02cc4                 | __system___waitus_ret
02cc4     2D 00 64 FD | 	ret
02cc8                 | 
02cc8                 | __system___gc_ptrs
02cc8     0A 5A 05 F6 | 	mov	COUNT_, #10
02ccc     B0 00 A0 FD | 	call	#pushregs_
02cd0     DA 34 02 F6 | 	mov	local01, __heap_ptr
02cd4     1A 37 02 F6 | 	mov	local02, local01
02cd8     07 00 00 FF 
02cdc     F8 37 06 F1 | 	add	local02, ##4088
02ce0     1A 39 0A FB | 	rdlong	local03, local01 wz
02ce4     74 00 90 5D |  if_ne	jmp	#LR__0144
02ce8     1B 3B 02 F6 | 	mov	local04, local02
02cec     1A 3B 82 F1 | 	sub	local04, local01
02cf0     1A 03 58 FC | 	wrword	#1, local01
02cf4     1A 3D 02 F6 | 	mov	local05, local01
02cf8     02 3C 06 F1 | 	add	local05, #2
02cfc     36 00 80 FF 
02d00     1E 21 59 FC | 	wrword	##27792, local05
02d04     1A 3F 02 F6 | 	mov	local06, local01
02d08     04 3E 06 F1 | 	add	local06, #4
02d0c     1F 01 58 FC | 	wrword	#0, local06
02d10     1A 41 02 F6 | 	mov	local07, local01
02d14     06 40 06 F1 | 	add	local07, #6
02d18     20 03 58 FC | 	wrword	#1, local07
02d1c     10 34 06 F1 | 	add	local01, #16
02d20     1D 39 52 F6 | 	abs	local03, local04 wc
02d24     04 38 46 F0 | 	shr	local03, #4
02d28     1C 39 62 C6 |  if_b	neg	local03, local03
02d2c     1A 39 52 FC | 	wrword	local03, local01
02d30     1A 43 02 F6 | 	mov	local08, local01
02d34     02 42 06 F1 | 	add	local08, #2
02d38     36 00 80 FF 
02d3c     21 1F 59 FC | 	wrword	##27791, local08
02d40     1A 45 02 F6 | 	mov	local09, local01
02d44     04 44 06 F1 | 	add	local09, #4
02d48     22 01 58 FC | 	wrword	#0, local09
02d4c     1A 47 02 F6 | 	mov	local10, local01
02d50     06 46 06 F1 | 	add	local10, #6
02d54     23 01 58 FC | 	wrword	#0, local10
02d58     10 34 86 F1 | 	sub	local01, #16
02d5c                 | LR__0144
02d5c     1B CB 01 F6 | 	mov	result2, local02
02d60     1A C9 01 F6 | 	mov	result1, local01
02d64     AF F0 03 F6 | 	mov	ptra, fp
02d68     BF 00 A0 FD | 	call	#popregs_
02d6c                 | __system___gc_ptrs_ret
02d6c     2D 00 64 FD | 	ret
02d70                 | 
02d70                 | __system___gc_nextBlockPtr
02d70     02 5A 05 F6 | 	mov	COUNT_, #2
02d74     B0 00 A0 FD | 	call	#pushregs_
02d78     15 35 02 F6 | 	mov	local01, arg01
02d7c     1A 37 EA FA | 	rdword	local02, local01 wz
02d80     10 00 90 5D |  if_ne	jmp	#LR__0145
02d84     1A 00 00 FF 
02d88     70 2B 06 F6 | 	mov	arg01, ##@LR__0188
02d8c     F8 01 B0 FD | 	call	#__system___gc_errmsg
02d90     0C 00 90 FD | 	jmp	#LR__0146
02d94                 | LR__0145
02d94     04 36 66 F0 | 	shl	local02, #4
02d98     1A C9 01 F6 | 	mov	result1, local01
02d9c     1B C9 01 F1 | 	add	result1, local02
02da0                 | LR__0146
02da0     AF F0 03 F6 | 	mov	ptra, fp
02da4     BF 00 A0 FD | 	call	#popregs_
02da8                 | __system___gc_nextBlockPtr_ret
02da8     2D 00 64 FD | 	ret
02dac                 | 
02dac                 | __system___gc_tryalloc
02dac     1B 5A 05 F6 | 	mov	COUNT_, #27
02db0     B0 00 A0 FD | 	call	#pushregs_
02db4     15 35 02 F6 | 	mov	local01, arg01
02db8     16 37 02 F6 | 	mov	local02, arg02
02dbc     08 FF BF FD | 	call	#__system___gc_ptrs
02dc0     E4 38 02 F6 | 	mov	local03, result1
02dc4     E5 3A 02 F6 | 	mov	local04, result2
02dc8     1C 3D 02 F6 | 	mov	local05, local03
02dcc     00 3E 06 F6 | 	mov	local06, #0
02dd0     84 D2 9F FE | 	loc	pa,	#(@LR__0148-@LR__0147)
02dd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02dd8                 | LR__0147
02dd8     1E 41 02 F6 | 	mov	local07, local05
02ddc     06 3C 06 F1 | 	add	local05, #6
02de0     1E 43 02 F6 | 	mov	local08, local05
02de4     1C 45 02 F6 | 	mov	local09, local03
02de8     21 47 E2 FA | 	rdword	local10, local08
02dec     22 2B 02 F6 | 	mov	arg01, local09
02df0     23 2D 0A F6 | 	mov	arg02, local10 wz
02df4     00 C8 05 A6 |  if_e	mov	result1, #0
02df8     04 2C 66 50 |  if_ne	shl	arg02, #4
02dfc     16 2B 02 51 |  if_ne	add	arg01, arg02
02e00     15 C9 01 56 |  if_ne	mov	result1, arg01
02e04     E4 48 02 F6 | 	mov	local11, result1
02e08     24 3D 0A F6 | 	mov	local05, local11 wz
02e0c     1E 45 02 56 |  if_ne	mov	local09, local05
02e10     22 4B 02 56 |  if_ne	mov	local12, local09
02e14     25 3F E2 5A |  if_ne	rdword	local06, local12
02e18     00 3C 0E F2 | 	cmp	local05, #0 wz
02e1c     10 00 90 AD |  if_e	jmp	#LR__0149
02e20     1D 3D 5A F2 | 	cmps	local05, local04 wcz
02e24     08 00 90 3D |  if_ae	jmp	#LR__0149
02e28     1F 35 5A F2 | 	cmps	local01, local06 wcz
02e2c     A8 FF 9F 1D |  if_a	jmp	#LR__0147
02e30                 | LR__0148
02e30                 | LR__0149
02e30     00 3C 0E F2 | 	cmp	local05, #0 wz
02e34     1E C9 01 A6 |  if_e	mov	result1, local05
02e38     40 01 90 AD |  if_e	jmp	#LR__0152
02e3c     1E 4D 02 F6 | 	mov	local13, local05
02e40     06 4C 06 F1 | 	add	local13, #6
02e44     26 4F E2 FA | 	rdword	local14, local13
02e48     1F 35 5A F2 | 	cmps	local01, local06 wcz
02e4c     CC 00 90 3D |  if_ae	jmp	#LR__0151
02e50     1E 51 02 F6 | 	mov	local15, local05
02e54     28 35 52 FC | 	wrword	local01, local15
02e58     1A 53 02 F6 | 	mov	local16, local01
02e5c     04 52 66 F0 | 	shl	local16, #4
02e60     1E 55 02 F6 | 	mov	local17, local05
02e64     29 55 02 F1 | 	add	local17, local16
02e68     1F 57 02 F6 | 	mov	local18, local06
02e6c     1A 57 82 F1 | 	sub	local18, local01
02e70     2A 59 02 F6 | 	mov	local19, local17
02e74     2C 57 52 FC | 	wrword	local18, local19
02e78     2A 5B 02 F6 | 	mov	local20, local17
02e7c     02 5A 06 F1 | 	add	local20, #2
02e80     36 00 80 FF 
02e84     2D 1F 59 FC | 	wrword	##27791, local20
02e88     2A 5D 02 F6 | 	mov	local21, local17
02e8c     04 5C 06 F1 | 	add	local21, #4
02e90     1E 2D 0A F6 | 	mov	arg02, local05 wz
02e94     00 C8 05 A6 |  if_e	mov	result1, #0
02e98     1C 2D 82 51 |  if_ne	sub	arg02, local03
02e9c     04 2C 46 50 |  if_ne	shr	arg02, #4
02ea0     16 C9 01 56 |  if_ne	mov	result1, arg02
02ea4     2E C9 51 FC | 	wrword	result1, local21
02ea8     2A 5F 02 F6 | 	mov	local22, local17
02eac     26 45 E2 FA | 	rdword	local09, local13
02eb0     06 5E 06 F1 | 	add	local22, #6
02eb4     2F 45 52 FC | 	wrword	local09, local22
02eb8     2A 61 02 F6 | 	mov	local23, local17
02ebc     30 2D 0A F6 | 	mov	arg02, local23 wz
02ec0     00 C8 05 A6 |  if_e	mov	result1, #0
02ec4     1C 2D 82 51 |  if_ne	sub	arg02, local03
02ec8     04 2C 46 50 |  if_ne	shr	arg02, #4
02ecc     16 C9 01 56 |  if_ne	mov	result1, arg02
02ed0     E4 4E 02 F6 | 	mov	local14, result1
02ed4     2A 2B 02 F6 | 	mov	arg01, local17
02ed8     94 FE BF FD | 	call	#__system___gc_nextBlockPtr
02edc     E4 62 0A F6 | 	mov	local24, result1 wz
02ee0     38 00 90 AD |  if_e	jmp	#LR__0150
02ee4     1D 63 5A F2 | 	cmps	local24, local04 wcz
02ee8     30 00 90 3D |  if_ae	jmp	#LR__0150
02eec     31 65 02 F6 | 	mov	local25, local24
02ef0     04 64 06 F1 | 	add	local25, #4
02ef4     1C 45 02 F6 | 	mov	local09, local03
02ef8     30 47 02 F6 | 	mov	local10, local23
02efc     22 2B 02 F6 | 	mov	arg01, local09
02f00     23 2D 0A F6 | 	mov	arg02, local10 wz
02f04     00 C8 05 A6 |  if_e	mov	result1, #0
02f08     15 2D 82 51 |  if_ne	sub	arg02, arg01
02f0c     04 2C 46 50 |  if_ne	shr	arg02, #4
02f10     16 C9 01 56 |  if_ne	mov	result1, arg02
02f14     E4 48 02 F6 | 	mov	local11, result1
02f18     32 49 52 FC | 	wrword	local11, local25
02f1c                 | LR__0150
02f1c                 | LR__0151
02f1c     06 40 06 F1 | 	add	local07, #6
02f20     20 4F 52 FC | 	wrword	local14, local07
02f24     36 00 00 FF 
02f28     80 44 06 F6 | 	mov	local09, ##27776
02f2c     1B 45 42 F5 | 	or	local09, local02
02f30     1E 67 02 F6 | 	mov	local26, local05
02f34     02 66 06 F1 | 	add	local26, #2
02f38     01 C8 61 FD | 	cogid	result1
02f3c     E4 44 42 F5 | 	or	local09, result1
02f40     33 45 52 FC | 	wrword	local09, local26
02f44     1C 69 02 F6 | 	mov	local27, local03
02f48     08 68 06 F1 | 	add	local27, #8
02f4c     34 45 E2 FA | 	rdword	local09, local27
02f50     26 45 52 FC | 	wrword	local09, local13
02f54     1E 2D 0A F6 | 	mov	arg02, local05 wz
02f58     00 C8 05 A6 |  if_e	mov	result1, #0
02f5c     1C 2D 82 51 |  if_ne	sub	arg02, local03
02f60     04 2C 46 50 |  if_ne	shr	arg02, #4
02f64     16 C9 01 56 |  if_ne	mov	result1, arg02
02f68     34 C9 51 FC | 	wrword	result1, local27
02f6c     08 3C 06 F1 | 	add	local05, #8
02f70     1E C9 01 F6 | 	mov	result1, local05
02f74     00 C0 31 FF 
02f78     00 C8 45 F5 | 	or	result1, ##1669332992
02f7c                 | LR__0152
02f7c     AF F0 03 F6 | 	mov	ptra, fp
02f80     BF 00 A0 FD | 	call	#popregs_
02f84                 | __system___gc_tryalloc_ret
02f84     2D 00 64 FD | 	ret
02f88                 | 
02f88                 | __system___gc_errmsg
02f88     02 5A 05 F6 | 	mov	COUNT_, #2
02f8c     B0 00 A0 FD | 	call	#pushregs_
02f90     15 35 02 F6 | 	mov	local01, arg01
02f94                 | LR__0153
02f94     1A 37 CA FA | 	rdbyte	local02, local01 wz
02f98     01 34 06 F1 | 	add	local01, #1
02f9c     0C 00 90 AD |  if_e	jmp	#LR__0154
02fa0     1B 2B 02 F6 | 	mov	arg01, local02
02fa4     08 FC BF FD | 	call	#__system___tx
02fa8     E8 FF 9F FD | 	jmp	#LR__0153
02fac                 | LR__0154
02fac     00 C8 05 F6 | 	mov	result1, #0
02fb0     AF F0 03 F6 | 	mov	ptra, fp
02fb4     BF 00 A0 FD | 	call	#popregs_
02fb8                 | __system___gc_errmsg_ret
02fb8     2D 00 64 FD | 	ret
02fbc                 | 
02fbc                 | __system___gc_alloc_managed
02fbc     02 5A 05 F6 | 	mov	COUNT_, #2
02fc0     B0 00 A0 FD | 	call	#pushregs_
02fc4     15 35 02 F6 | 	mov	local01, arg01
02fc8     00 2C 06 F6 | 	mov	arg02, #0
02fcc     30 00 B0 FD | 	call	#__system___gc_doalloc
02fd0     E4 36 0A F6 | 	mov	local02, result1 wz
02fd4     18 00 90 5D |  if_ne	jmp	#LR__0155
02fd8     00 34 5E F2 | 	cmps	local01, #0 wcz
02fdc     10 00 90 ED |  if_be	jmp	#LR__0155
02fe0     1A 00 00 FF 
02fe4     8C 2B 06 F6 | 	mov	arg01, ##@LR__0189
02fe8     9C FF BF FD | 	call	#__system___gc_errmsg
02fec     04 00 90 FD | 	jmp	#LR__0156
02ff0                 | LR__0155
02ff0     1B C9 01 F6 | 	mov	result1, local02
02ff4                 | LR__0156
02ff4     AF F0 03 F6 | 	mov	ptra, fp
02ff8     BF 00 A0 FD | 	call	#popregs_
02ffc                 | __system___gc_alloc_managed_ret
02ffc     2D 00 64 FD | 	ret
03000                 | 
03000                 | __system___gc_doalloc
03000     07 5A 05 F6 | 	mov	COUNT_, #7
03004     B0 00 A0 FD | 	call	#pushregs_
03008     15 35 0A F6 | 	mov	local01, arg01 wz
0300c     16 37 02 F6 | 	mov	local02, arg02
03010     00 C8 05 A6 |  if_e	mov	result1, #0
03014     8C 00 90 AD |  if_e	jmp	#LR__0164
03018     17 34 06 F1 | 	add	local01, #23
0301c     0F 34 26 F5 | 	andn	local01, #15
03020     04 34 46 F0 | 	shr	local01, #4
03024     14 BC 05 F1 | 	add	ptr___system__dat__, #20
03028     DE 38 02 F6 | 	mov	local03, ptr___system__dat__
0302c     1C 2B 02 F6 | 	mov	arg01, local03
03030     14 BC 85 F1 | 	sub	ptr___system__dat__, #20
03034     40 FB BF FD | 	call	#__system___lockmem
03038     1A 2B 02 F6 | 	mov	arg01, local01
0303c     1B 2D 02 F6 | 	mov	arg02, local02
03040     68 FD BF FD | 	call	#__system___gc_tryalloc
03044     E4 3A 0A F6 | 	mov	local04, result1 wz
03048     14 00 90 5D |  if_ne	jmp	#LR__0157
0304c     10 03 B0 FD | 	call	#__system___gc_docollect
03050     1A 2B 02 F6 | 	mov	arg01, local01
03054     1B 2D 02 F6 | 	mov	arg02, local02
03058     50 FD BF FD | 	call	#__system___gc_tryalloc
0305c     E4 3A 02 F6 | 	mov	local04, result1
03060                 | LR__0157
03060     1C 01 68 FC | 	wrlong	#0, local03
03064     00 3A 0E F2 | 	cmp	local04, #0 wz
03068     34 00 90 AD |  if_e	jmp	#LR__0163
0306c     04 34 66 F0 | 	shl	local01, #4
03070     08 34 86 F1 | 	sub	local01, #8
03074     1A 3D 52 F6 | 	abs	local05, local01 wc
03078     02 3C 46 F0 | 	shr	local05, #2
0307c     1E 3D 62 C6 |  if_b	neg	local05, local05
03080     1E 3F 0A F6 | 	mov	local06, local05 wz
03084     1D 41 02 F6 | 	mov	local07, local04
03088     14 00 90 AD |  if_e	jmp	#LR__0162
0308c     7C CF 9F FE | 	loc	pa,	#(@LR__0160-@LR__0158)
03090     93 00 A0 FD | 	call	#FCACHE_LOAD_
03094                 | LR__0158
03094     1F 05 D8 FC | 	rep	@LR__0161, local06
03098                 | LR__0159
03098     20 01 68 FC | 	wrlong	#0, local07
0309c     04 40 06 F1 | 	add	local07, #4
030a0                 | LR__0160
030a0                 | LR__0161
030a0                 | LR__0162
030a0                 | LR__0163
030a0     1D C9 01 F6 | 	mov	result1, local04
030a4                 | LR__0164
030a4     AF F0 03 F6 | 	mov	ptra, fp
030a8     BF 00 A0 FD | 	call	#popregs_
030ac                 | __system___gc_doalloc_ret
030ac     2D 00 64 FD | 	ret
030b0                 | 
030b0                 | __system___gc_isvalidptr
030b0     17 CD 01 F6 | 	mov	_var01, arg03
030b4     E6 CE 01 F6 | 	mov	_var02, _var01
030b8     00 F8 7F FF 
030bc     00 CE 05 F5 | 	and	_var02, ##-1048576
030c0     00 C0 31 FF 
030c4     00 CE 0D F2 | 	cmp	_var02, ##1669332992 wz
030c8     00 C8 05 56 |  if_ne	mov	result1, #0
030cc     60 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
030d0     08 CC 85 F1 | 	sub	_var01, #8
030d4     E6 D0 01 F6 | 	mov	_var03, _var01
030d8     00 F8 7F FF 
030dc     00 D0 25 F5 | 	andn	_var03, ##-1048576
030e0     15 D1 59 F2 | 	cmps	_var03, arg01 wcz
030e4     08 00 90 CD |  if_b	jmp	#LR__0165
030e8     16 D1 59 F2 | 	cmps	_var03, arg02 wcz
030ec     08 00 90 CD |  if_b	jmp	#LR__0166
030f0                 | LR__0165
030f0     00 C8 05 F6 | 	mov	result1, #0
030f4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
030f8                 | LR__0166
030f8     E8 CE 01 F6 | 	mov	_var02, _var03
030fc     15 CF 61 F5 | 	xor	_var02, arg01
03100     0F CE 0D F5 | 	and	_var02, #15 wz
03104     00 C8 05 56 |  if_ne	mov	result1, #0
03108     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
0310c     E8 D2 01 F6 | 	mov	_var04, _var03
03110     02 D2 05 F1 | 	add	_var04, #2
03114     E9 CE E1 FA | 	rdword	_var02, _var04
03118     7F 00 00 FF 
0311c     C0 CF 05 F5 | 	and	_var02, ##65472
03120     36 00 00 FF 
03124     80 CE 0D F2 | 	cmp	_var02, ##27776 wz
03128     00 C8 05 56 |  if_ne	mov	result1, #0
0312c     E8 C8 01 A6 |  if_e	mov	result1, _var03
03130                 | __system___gc_isvalidptr_ret
03130     2D 00 64 FD | 	ret
03134                 | 
03134                 | __system___gc_dofree
03134     1A 5A 05 F6 | 	mov	COUNT_, #26
03138     B0 00 A0 FD | 	call	#pushregs_
0313c     15 35 02 F6 | 	mov	local01, arg01
03140     84 FB BF FD | 	call	#__system___gc_ptrs
03144     E5 36 02 F6 | 	mov	local02, result2
03148     E4 38 02 F6 | 	mov	local03, result1
0314c     1A 3B 02 F6 | 	mov	local04, local01
03150     02 3A 06 F1 | 	add	local04, #2
03154     36 00 80 FF 
03158     1D 1F 59 FC | 	wrword	##27791, local04
0315c     1A 3D 02 F6 | 	mov	local05, local01
03160     1A 2B 02 F6 | 	mov	arg01, local01
03164     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
03168     E4 3E 02 F6 | 	mov	local06, result1
0316c     E0 CE 9F FE | 	loc	pa,	#(@LR__0168-@LR__0167)
03170     93 00 A0 FD | 	call	#FCACHE_LOAD_
03174                 | LR__0167
03174     04 3C 06 F1 | 	add	local05, #4
03178     1E 41 02 F6 | 	mov	local07, local05
0317c     20 2D EA FA | 	rdword	arg02, local07 wz
03180     1C 2B 02 F6 | 	mov	arg01, local03
03184     00 C8 05 A6 |  if_e	mov	result1, #0
03188     04 2C 66 50 |  if_ne	shl	arg02, #4
0318c     16 2B 02 51 |  if_ne	add	arg01, arg02
03190     15 C9 01 56 |  if_ne	mov	result1, arg01
03194     E4 3C 0A F6 | 	mov	local05, result1 wz
03198     28 00 90 AD |  if_e	jmp	#LR__0169
0319c     1E 2B 02 F6 | 	mov	arg01, local05
031a0     00 42 06 F6 | 	mov	local08, #0
031a4     02 2A 06 F1 | 	add	arg01, #2
031a8     15 45 E2 FA | 	rdword	local09, arg01
031ac     36 00 00 FF 
031b0     8F 44 0E F2 | 	cmp	local09, ##27791 wz
031b4     01 42 66 A6 |  if_e	neg	local08, #1
031b8     21 C9 01 F6 | 	mov	result1, local08
031bc     E4 46 0A F6 | 	mov	local10, result1 wz
031c0     B0 FF 9F AD |  if_e	jmp	#LR__0167
031c4                 | LR__0168
031c4                 | LR__0169
031c4     00 3C 0E F2 | 	cmp	local05, #0 wz
031c8     1C 3D 02 A6 |  if_e	mov	local05, local03
031cc     1E 49 02 F6 | 	mov	local11, local05
031d0     06 48 06 F1 | 	add	local11, #6
031d4     1A 4B 02 F6 | 	mov	local12, local01
031d8     24 4D E2 FA | 	rdword	local13, local11
031dc     06 4A 06 F1 | 	add	local12, #6
031e0     25 4D 52 FC | 	wrword	local13, local12
031e4     1A 2D 0A F6 | 	mov	arg02, local01 wz
031e8     00 C8 05 A6 |  if_e	mov	result1, #0
031ec     1C 2D 82 51 |  if_ne	sub	arg02, local03
031f0     04 2C 46 50 |  if_ne	shr	arg02, #4
031f4     16 C9 01 56 |  if_ne	mov	result1, arg02
031f8     E4 4E 02 F6 | 	mov	local14, result1
031fc     24 4F 52 FC | 	wrword	local14, local11
03200     1C 3D 0A F2 | 	cmp	local05, local03 wz
03204     74 00 90 AD |  if_e	jmp	#LR__0172
03208     1E 2B 02 F6 | 	mov	arg01, local05
0320c     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
03210     1A C9 09 F2 | 	cmp	result1, local01 wz
03214     64 00 90 5D |  if_ne	jmp	#LR__0171
03218     1E 51 02 F6 | 	mov	local15, local05
0321c     28 53 E2 FA | 	rdword	local16, local15
03220     1A 55 02 F6 | 	mov	local17, local01
03224     2A 47 E2 FA | 	rdword	local10, local17
03228     23 53 02 F1 | 	add	local16, local10
0322c     28 53 52 FC | 	wrword	local16, local15
03230     1D 01 58 FC | 	wrword	#0, local04
03234     1A 2B 02 F6 | 	mov	arg01, local01
03238     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
0323c     E4 3E 02 F6 | 	mov	local06, result1
03240     1B 3F 5A F2 | 	cmps	local06, local02 wcz
03244     24 00 90 3D |  if_ae	jmp	#LR__0170
03248     1F 57 02 F6 | 	mov	local18, local06
0324c     04 56 06 F1 | 	add	local18, #4
03250     1E 2D 0A F6 | 	mov	arg02, local05 wz
03254     00 C8 05 A6 |  if_e	mov	result1, #0
03258     1C 2D 82 51 |  if_ne	sub	arg02, local03
0325c     04 2C 46 50 |  if_ne	shr	arg02, #4
03260     16 C9 01 56 |  if_ne	mov	result1, arg02
03264     E4 4E 02 F6 | 	mov	local14, result1
03268     2B 4F 52 FC | 	wrword	local14, local18
0326c                 | LR__0170
0326c     25 4D E2 FA | 	rdword	local13, local12
03270     24 4D 52 FC | 	wrword	local13, local11
03274     25 01 58 FC | 	wrword	#0, local12
03278     1E 35 02 F6 | 	mov	local01, local05
0327c                 | LR__0171
0327c                 | LR__0172
0327c     1A 2B 02 F6 | 	mov	arg01, local01
03280     EC FA BF FD | 	call	#__system___gc_nextBlockPtr
03284     E4 58 0A F6 | 	mov	local19, result1 wz
03288     C4 00 90 AD |  if_e	jmp	#LR__0174
0328c     1B 59 5A F2 | 	cmps	local19, local02 wcz
03290     BC 00 90 3D |  if_ae	jmp	#LR__0174
03294     2C 2B 02 F6 | 	mov	arg01, local19
03298     00 42 06 F6 | 	mov	local08, #0
0329c     02 2A 06 F1 | 	add	arg01, #2
032a0     15 45 E2 FA | 	rdword	local09, arg01
032a4     36 00 00 FF 
032a8     8F 44 0E F2 | 	cmp	local09, ##27791 wz
032ac     01 42 66 A6 |  if_e	neg	local08, #1
032b0     21 C9 09 F6 | 	mov	result1, local08 wz
032b4     98 00 90 AD |  if_e	jmp	#LR__0174
032b8     1A 3D 02 F6 | 	mov	local05, local01
032bc     2C 35 02 F6 | 	mov	local01, local19
032c0     1E 5B 02 F6 | 	mov	local20, local05
032c4     2D 5D E2 FA | 	rdword	local21, local20
032c8     1A 5F 02 F6 | 	mov	local22, local01
032cc     2F 47 E2 FA | 	rdword	local10, local22
032d0     23 5D 02 F1 | 	add	local21, local10
032d4     2D 5D 52 FC | 	wrword	local21, local20
032d8     1A 61 02 F6 | 	mov	local23, local01
032dc     06 60 06 F1 | 	add	local23, #6
032e0     1E 63 02 F6 | 	mov	local24, local05
032e4     30 4D E2 FA | 	rdword	local13, local23
032e8     06 62 06 F1 | 	add	local24, #6
032ec     31 4D 52 FC | 	wrword	local13, local24
032f0     1A 65 02 F6 | 	mov	local25, local01
032f4     02 64 06 F1 | 	add	local25, #2
032f8     32 55 59 FC | 	wrword	#170, local25
032fc     30 01 58 FC | 	wrword	#0, local23
03300     1A 4D 02 F6 | 	mov	local13, local01
03304     26 2B 02 F6 | 	mov	arg01, local13
03308     64 FA BF FD | 	call	#__system___gc_nextBlockPtr
0330c     E4 46 02 F6 | 	mov	local10, result1
03310     23 3F 0A F6 | 	mov	local06, local10 wz
03314     38 00 90 AD |  if_e	jmp	#LR__0173
03318     1B 3F 5A F2 | 	cmps	local06, local02 wcz
0331c     30 00 90 3D |  if_ae	jmp	#LR__0173
03320     1F 67 02 F6 | 	mov	local26, local06
03324     04 66 06 F1 | 	add	local26, #4
03328     1C 4D 02 F6 | 	mov	local13, local03
0332c     1E 47 02 F6 | 	mov	local10, local05
03330     26 2B 02 F6 | 	mov	arg01, local13
03334     23 2D 0A F6 | 	mov	arg02, local10 wz
03338     00 C8 05 A6 |  if_e	mov	result1, #0
0333c     15 2D 82 51 |  if_ne	sub	arg02, arg01
03340     04 2C 46 50 |  if_ne	shr	arg02, #4
03344     16 C9 01 56 |  if_ne	mov	result1, arg02
03348     E4 4E 02 F6 | 	mov	local14, result1
0334c     33 4F 52 FC | 	wrword	local14, local26
03350                 | LR__0173
03350                 | LR__0174
03350     1F C9 01 F6 | 	mov	result1, local06
03354     AF F0 03 F6 | 	mov	ptra, fp
03358     BF 00 A0 FD | 	call	#popregs_
0335c                 | __system___gc_dofree_ret
0335c     2D 00 64 FD | 	ret
03360                 | 
03360                 | __system___gc_docollect
03360     0C 5A 05 F6 | 	mov	COUNT_, #12
03364     B0 00 A0 FD | 	call	#pushregs_
03368     5C F9 BF FD | 	call	#__system___gc_ptrs
0336c     E5 34 02 F6 | 	mov	local01, result2
03370     E4 36 02 F6 | 	mov	local02, result1
03374     1B 2B 02 F6 | 	mov	arg01, local02
03378     F4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0337c     E4 38 0A F6 | 	mov	local03, result1 wz
03380     01 C8 61 FD | 	cogid	result1
03384     E4 3A 02 F6 | 	mov	local04, result1
03388     2C 00 90 AD |  if_e	jmp	#LR__0176
0338c                 | LR__0175
0338c     1A 39 5A F2 | 	cmps	local03, local01 wcz
03390     24 00 90 3D |  if_ae	jmp	#LR__0176
03394     1C 3D 02 F6 | 	mov	local05, local03
03398     02 3C 06 F1 | 	add	local05, #2
0339c     1E 3F E2 FA | 	rdword	local06, local05
033a0     20 3E 26 F5 | 	andn	local06, #32
033a4     1E 3F 52 FC | 	wrword	local06, local05
033a8     1C 2B 02 F6 | 	mov	arg01, local03
033ac     C0 F9 BF FD | 	call	#__system___gc_nextBlockPtr
033b0     E4 38 0A F6 | 	mov	local03, result1 wz
033b4     D4 FF 9F 5D |  if_ne	jmp	#LR__0175
033b8                 | LR__0176
033b8     00 40 06 F6 | 	mov	local07, #0
033bc     00 2A 06 F6 | 	mov	arg01, #0
033c0     4C F7 BF FD | 	call	#__system____topofstack
033c4     E4 42 02 F6 | 	mov	local08, result1
033c8     20 2B 02 F6 | 	mov	arg01, local07
033cc     21 2D 02 F6 | 	mov	arg02, local08
033d0     A0 00 B0 FD | 	call	#__system___gc_markhub
033d4     2C 01 B0 FD | 	call	#__system___gc_markcog
033d8     1B 2B 02 F6 | 	mov	arg01, local02
033dc     90 F9 BF FD | 	call	#__system___gc_nextBlockPtr
033e0     E4 44 0A F6 | 	mov	local09, result1 wz
033e4     10 00 90 5D |  if_ne	jmp	#LR__0177
033e8     1A 00 00 FF 
033ec     A9 2B 06 F6 | 	mov	arg01, ##@LR__0190
033f0     94 FB BF FD | 	call	#__system___gc_errmsg
033f4     70 00 90 FD | 	jmp	#LR__0183
033f8                 | LR__0177
033f8                 | LR__0178
033f8     22 39 02 F6 | 	mov	local03, local09
033fc     1C 2B 02 F6 | 	mov	arg01, local03
03400     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
03404     E4 44 02 F6 | 	mov	local09, result1
03408     1C 47 02 F6 | 	mov	local10, local03
0340c     02 46 06 F1 | 	add	local10, #2
03410     23 49 E2 FA | 	rdword	local11, local10
03414     20 48 CE F7 | 	test	local11, #32 wz
03418     3C 00 90 5D |  if_ne	jmp	#LR__0181
0341c     24 4B 02 F6 | 	mov	local12, local11
03420     10 4A 0E F5 | 	and	local12, #16 wz
03424     30 00 90 5D |  if_ne	jmp	#LR__0181
03428     24 41 02 F6 | 	mov	local07, local11
0342c     0F 40 06 F5 | 	and	local07, #15
03430     20 49 02 F6 | 	mov	local11, local07
03434     1D 49 0A F2 | 	cmp	local11, local04 wz
03438     08 00 90 AD |  if_e	jmp	#LR__0179
0343c     0E 48 0E F2 | 	cmp	local11, #14 wz
03440     14 00 90 5D |  if_ne	jmp	#LR__0180
03444                 | LR__0179
03444     1C 41 02 F6 | 	mov	local07, local03
03448     20 2B 02 F6 | 	mov	arg01, local07
0344c     E4 FC BF FD | 	call	#__system___gc_dofree
03450     E4 4A 02 F6 | 	mov	local12, result1
03454     25 45 02 F6 | 	mov	local09, local12
03458                 | LR__0180
03458                 | LR__0181
03458     00 44 0E F2 | 	cmp	local09, #0 wz
0345c     08 00 90 AD |  if_e	jmp	#LR__0182
03460     1A 45 5A F2 | 	cmps	local09, local01 wcz
03464     90 FF 9F CD |  if_b	jmp	#LR__0178
03468                 | LR__0182
03468                 | LR__0183
03468     AF F0 03 F6 | 	mov	ptra, fp
0346c     BF 00 A0 FD | 	call	#popregs_
03470                 | __system___gc_docollect_ret
03470     2D 00 64 FD | 	ret
03474                 | 
03474                 | __system___gc_markhub
03474     0A 5A 05 F6 | 	mov	COUNT_, #10
03478     B0 00 A0 FD | 	call	#pushregs_
0347c     15 35 02 F6 | 	mov	local01, arg01
03480     16 37 02 F6 | 	mov	local02, arg02
03484     40 F8 BF FD | 	call	#__system___gc_ptrs
03488     E4 38 02 F6 | 	mov	local03, result1
0348c     E5 3A 02 F6 | 	mov	local04, result2
03490                 | LR__0184
03490     1B 35 5A F2 | 	cmps	local01, local02 wcz
03494     60 00 90 3D |  if_ae	jmp	#LR__0185
03498     1A 2F 02 FB | 	rdlong	arg03, local01
0349c     04 34 06 F1 | 	add	local01, #4
034a0     1C 2B 02 F6 | 	mov	arg01, local03
034a4     1D 2D 02 F6 | 	mov	arg02, local04
034a8     04 FC BF FD | 	call	#__system___gc_isvalidptr
034ac     E4 3C 0A F6 | 	mov	local05, result1 wz
034b0     DC FF 9F AD |  if_e	jmp	#LR__0184
034b4     1E 2B 02 F6 | 	mov	arg01, local05
034b8     00 3E 06 F6 | 	mov	local06, #0
034bc     02 2A 06 F1 | 	add	arg01, #2
034c0     15 41 E2 FA | 	rdword	local07, arg01
034c4     36 00 00 FF 
034c8     8F 40 0E F2 | 	cmp	local07, ##27791 wz
034cc     01 3E 66 A6 |  if_e	neg	local06, #1
034d0     1F C9 01 F6 | 	mov	result1, local06
034d4     E4 42 0A F6 | 	mov	local08, result1 wz
034d8     B4 FF 9F 5D |  if_ne	jmp	#LR__0184
034dc     1E 45 02 F6 | 	mov	local09, local05
034e0     02 44 06 F1 | 	add	local09, #2
034e4     22 47 E2 FA | 	rdword	local10, local09
034e8     0F 46 26 F5 | 	andn	local10, #15
034ec     2E 46 46 F5 | 	or	local10, #46
034f0     22 47 52 FC | 	wrword	local10, local09
034f4     98 FF 9F FD | 	jmp	#LR__0184
034f8                 | LR__0185
034f8     AF F0 03 F6 | 	mov	ptra, fp
034fc     BF 00 A0 FD | 	call	#popregs_
03500                 | __system___gc_markhub_ret
03500     2D 00 64 FD | 	ret
03504                 | 
03504                 | __system___gc_markcog
03504     06 5A 05 F6 | 	mov	COUNT_, #6
03508     B0 00 A0 FD | 	call	#pushregs_
0350c     B8 F7 BF FD | 	call	#__system___gc_ptrs
03510     E4 34 02 F6 | 	mov	local01, result1
03514     E5 36 02 F6 | 	mov	local02, result2
03518     00 38 06 F6 | 	mov	local03, #0
0351c                 | LR__0186
0351c     F0 3B 06 F6 | 	mov	local04, #496
03520     1C 3B 82 F1 | 	sub	local04, local03
03524     F0 3B 06 F1 | 	add	local04, #496
03528                 | 	'.live	local04
03528     00 3A 96 F9 | 	alts	local04, #0
0352c     1D 3D 02 F6 | 	mov	local05, local04
03530     1B 2D 02 F6 | 	mov	arg02, local02
03534     1A 2B 02 F6 | 	mov	arg01, local01
03538     1E 2F 02 F6 | 	mov	arg03, local05
0353c     70 FB BF FD | 	call	#__system___gc_isvalidptr
03540     E4 3C 0A F6 | 	mov	local05, result1 wz
03544     10 00 90 AD |  if_e	jmp	#LR__0187
03548     02 3C 06 F1 | 	add	local05, #2
0354c     1E 3F E2 FA | 	rdword	local06, local05
03550     20 3E 46 F5 | 	or	local06, #32
03554     1E 3F 52 FC | 	wrword	local06, local05
03558                 | LR__0187
03558     01 38 06 F1 | 	add	local03, #1
0355c     F0 39 5E F2 | 	cmps	local03, #496 wcz
03560     B8 FF 9F CD |  if_b	jmp	#LR__0186
03564     AF F0 03 F6 | 	mov	ptra, fp
03568     BF 00 A0 FD | 	call	#popregs_
0356c                 | __system___gc_markcog_ret
0356c     2D 00 64 FD | 	ret
03570                 | 
03570                 | LR__0188
03570     20 21 21 21 
03574     20 63 6F 72 
03578     72 75 70 74 
0357c     65 64 20 68 
03580     65 61 70 3F 
03584     3F 3F 20 21 
03588     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
0358b     00          | 	byte	0
0358c                 | LR__0189
0358c     20 21 21 21 
03590     20 6F 75 74 
03594     20 6F 66 20 
03598     68 65 61 70 
0359c     20 6D 65 6D 
035a0     6F 72 79 20 
035a4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
035a8     00          | 	byte	0
035a9                 | LR__0190
035a9     20 21 21 21 
035ad     20 63 6F 72 
035b1     72 75 70 74 
035b5     65 64 20 68 
035b9     65 61 70 20 
035bd     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
035c1     00          | 	byte	0
035c2                 | LR__0191
035c2     6D 6F 64 65 | 	byte	"mode"
035c6     00          | 	byte	0
035c7                 | LR__0192
035c7     63 70 6C    | 	byte	"cpl"
035ca     00          | 	byte	0
035cb                 | LR__0193
035cb     62 75 66 70 
035cf     74 72       | 	byte	"bufptr"
035d1     00          | 	byte	0
035d2                 | LR__0194
035d2     62 75 66 6C 
035d6     65 6E       | 	byte	"buflen"
035d8     00          | 	byte	0
035d9                 | LR__0195
035d9     6C 69 6E 65 
035dd     73          | 	byte	"lines"
035de     00          | 	byte	0
035df                 | LR__0196
035df     6D 6F 64 65 | 	byte	"mode"
035e3     00          | 	byte	0
035e4                 | LR__0197
035e4     63 70 6C    | 	byte	"cpl"
035e7     00          | 	byte	0
035e8                 | LR__0198
035e8     62 75 66 5F 
035ec     70 74 72    | 	byte	"buf_ptr"
035ef     00          | 	byte	0
035f0                 | LR__0199
035f0     62 75 66 6C 
035f4     65 6E       | 	byte	"buflen"
035f6     00          | 	byte	0
035f7                 | LR__0200
035f7     6C 69 6E 65 
035fb     73          | 	byte	"lines"
035fc     00          | 	byte	0
035fd                 | LR__0201
035fd     6D 6F 64 65 | 	byte	"mode"
03601     00          | 	byte	0
03602                 | LR__0202
03602     63 70 6C    | 	byte	"cpl"
03605     00          | 	byte	0
03606                 | LR__0203
03606     62 75 66 5F 
0360a     70 74 72    | 	byte	"buf_ptr"
0360d     00          | 	byte	0
0360e                 | LR__0204
0360e     62 75 66 6C 
03612     65 6E       | 	byte	"buflen"
03614     00          | 	byte	0
03615                 | LR__0205
03615     6C 69 6E 65 
03619     73          | 	byte	"lines"
0361a     00          | 	byte	0
0361b                 | LR__0206
0361b     6D 6F 64 65 | 	byte	"mode"
0361f     00          | 	byte	0
03620                 | LR__0207
03620     63 70 6C    | 	byte	"cpl"
03623     00          | 	byte	0
03624                 | LR__0208
03624     62 75 66 5F 
03628     70 74 72    | 	byte	"buf_ptr"
0362b     00          | 	byte	0
0362c                 | LR__0209
0362c     62 75 66 6C 
03630     65 6E       | 	byte	"buflen"
03632     00          | 	byte	0
03633                 | LR__0210
03633     6C 69 6E 65 
03637     73          | 	byte	"lines"
03638     00          | 	byte	0
03639     00 00 00    | 	alignl
0363c                 | _dat_
0363c     00 00 00 00 
03640     00 00 00 00 
03644     00 00 00 00 
03648     00 00 00 00 
0364c     00 00 00    | vga_font       file "vgafont.def"
0364f     7E 81 A5 81 
03653     81 BD 99 81 
03657     81 7E 00 00 
0365b     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
0365f     7E FF DB FF 
03663     FF C3 E7 FF 
03667     FF 7E 00 00 
0366b     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
0366f     00 36 7F 7F 
03673     7F 7F 3E 1C 
03677     08 00 00 00 
0367b     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
0367f     00 08 1C 3E 
03683     7F 3E 1C 08 
03687     00 00 00 00 
0368b     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
0368f     18 3C 3C E7 
03693     E7 E7 18 18 
03697     3C 00 00 00 
0369b     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0369f     18 3C 7E FF 
036a3     FF 7E 18 18 
036a7     3C 00 00 00 
036ab     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
036af     00 00 00 18 
036b3     3C 3C 18 00 
036b7     00 00 00 00 
036bb     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
036bf     FF FF FF E7 
036c3     C3 C3 E7 FF 
036c7     FF FF FF FF 
036cb     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
036cf     00 00 3C 66 
036d3     42 42 66 3C 
036d7     00 00 00 00 
036db     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
036df     FF FF C3 99 
036e3     BD BD 99 C3 
036e7     FF FF FF FF 
036eb     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
036ef     78 70 58 4C 
036f3     1E 33 33 33 
036f7     33 1E 00 00 
036fb     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
036ff     3C 66 66 66 
03703     66 3C 18 7E 
03707     18 18 00 00 
0370b     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
0370f     FC CC FC 0C 
03713     0C 0C 0C 0E 
03717     0F 07 00 00 
0371b     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
0371f     FE C6 FE C6 
03723     C6 C6 C6 E6 
03727     E7 67 03 00 
0372b     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
0372f     18 18 DB 3C 
03733     E7 3C DB 18 
03737     18 00 00 00 
0373b     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
0373f     03 07 0F 1F 
03743     7F 1F 0F 07 
03747     03 01 00 00 
0374b     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
0374f     60 70 78 7C 
03753     7F 7C 78 70 
03757     60 40 00 00 
0375b     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
0375f     18 3C 7E 18 
03763     18 18 7E 3C 
03767     18 00 00 00 
0376b     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
0376f     66 66 66 66 
03773     66 66 66    | 	byte	$66[7]
03776     00 66 66 00 
0377a     00 00 00 00 
0377e     00 FE DB DB 
03782     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
03786     D8 D8 D8 00 
0378a     00 00 00 3E 
0378e     63 06 1C 36 
03792     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
03796     30 63 3E 00 
0379a     00 00 00 00 
0379e     00 00 00 00 
037a2     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
037a6     7F 7F 7F 00 
037aa     00 00 00 00 
037ae     00 18 3C 7E 
037b2     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
037b6     3C 18 7E 00 
037ba     00 00 00 00 
037be     00 18 3C 7E 
037c2     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
037c6     18 18 18 00 
037ca     00 00 00 00 
037ce     00 18 18 18 
037d2     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
037d6     7E 3C 18 00 
037da     00 00 00 00 
037de     00 00 00 18 
037e2     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
037e6     00 00 00 00 
037ea     00 00 00 00 
037ee     00 00 00    | 	byte	$00[11]
037f1     0C 06 7F 06 
037f5     0C 00 00 00 
037f9     00 00 00 00 
037fd     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03801     00 03 03 03 
03805     7F 00 00 00 
03809     00 00 00 00 
0380d     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03811     14 36 7F 36 
03815     14 00 00 00 
03819     00 00 00 00 
0381d     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
03821     1C 1C 3E 3E 
03825     7F 7F 00 00 
03829     00 00 00 00 
0382d     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
03831     7F 3E 3E 1C 
03835     1C 08 00 00 
03839     00 00 00 00 
0383d     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03841     00 00 00 00 
03845     00 00 00 00 
03849     00 00 00 00 
0384d     00 00       | 	byte	$00[14]
0384f     18 3C 3C 3C 
03853     18 18 18 00 
03857     18 18 00 00 
0385b     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
0385f     66 24 00 00 
03863     00 00 00 00 
03867     00 00 00 00 
0386b     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0386f     00 36 36 7F 
03873     36 36 36 7F 
03877     36 36 00 00 
0387b     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
0387f     3E 63 43 03 
03883     3E 60 60 61 
03887     63 3E 18 18 
0388b     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
0388f     00 00 43 63 
03893     30 18 0C 06 
03897     63 61 00 00 
0389b     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
0389f     1C 36 36 1C 
038a3     6E 3B 33 33 
038a7     33 6E 00 00 
038ab     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
038af     0C 0C 0C 06 
038b3     00 00 00 00 
038b7     00 00 00 00 
038bb     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
038bf     30 18 0C 0C 
038c3     0C 0C 0C 0C 
038c7     18 30 00 00 
038cb     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
038cf     0C 18 30 30 
038d3     30 30 30 30 
038d7     18 0C 00 00 
038db     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
038df     00 00 00 66 
038e3     3C FF 3C 66 
038e7     00 00 00 00 
038eb     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
038ef     00 00 00 18 
038f3     18 7E 18 18 
038f7     00 00 00 00 
038fb     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
038ff     00 00 00 00 
03903     00 00 00 00 | 	byte	$00[8]
03907     18 18 18 0C 
0390b     00 00 00 00 
0390f     00 00 00 00 
03913     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
03917     00 00 00 00 
0391b     00 00 00 00 
0391f     00 00 00 00 
03923     00 00 00 00 | 	byte	$00[16]
03927     18 18 00 00 
0392b     00 00 00 00 
0392f     00 00 40 60 
03933     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
03937     03 01 00 00 
0393b     00 00 00 00 
0393f     1C 36 63 63 
03943     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
03947     36 1C 00 00 
0394b     00 00 00 00 
0394f     18 1C 1E 18 
03953     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
03957     18 7E 00 00 
0395b     00 00 00 00 
0395f     3E 63 60 30 
03963     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
03967     63 7F 00 00 
0396b     00 00 00 00 
0396f     3E 63 60 60 
03973     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
03977     63 3E 00 00 
0397b     00 00 00 00 
0397f     30 38 3C 36 
03983     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
03987     30 78 00 00 
0398b     00 00 00 00 
0398f     7F 03 03 03 
03993     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
03997     63 3E 00 00 
0399b     00 00 00 00 
0399f     1C 06 03 03 
039a3     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
039a7     63 3E 00 00 
039ab     00 00 00 00 
039af     7F 63 60 60 
039b3     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
039b7     0C 0C 00 00 
039bb     00 00 00 00 
039bf     3E 63 63 63 
039c3     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
039c7     63 3E 00 00 
039cb     00 00 00 00 
039cf     3E 63 63 63 
039d3     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
039d7     30 1E 00 00 
039db     00 00 00 00 
039df     00 00 00 18 
039e3     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
039e7     18 18 00 00 
039eb     00 00 00 00 
039ef     00 00 00 18 
039f3     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
039f7     18 18 0C 00 
039fb     00 00 00 00 
039ff     00 60 30 18 
03a03     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
03a07     30 60 00 00 
03a0b     00 00 00 00 
03a0f     00 00 00 7E 
03a13     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
03a17     00 00 00 00 
03a1b     00 00 00 00 
03a1f     00          | 	byte	$00[9]
03a20     06 0C 18 30 
03a24     60 30 18 0C 
03a28     06 00 00 00 
03a2c     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
03a30     63 63 30 18 
03a34     18 18 00 18 
03a38     18 00 00 00 
03a3c     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
03a40     3E 63 63 7B 
03a44     7B 7B 3B 03 
03a48     3E 00 00 00 
03a4c     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
03a50     1C 36 63 63 
03a54     7F 63 63 63 
03a58     63 00 00 00 
03a5c     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
03a60     66 66 66 3E 
03a64     66 66 66 66 
03a68     3F 00 00 00 
03a6c     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
03a70     66 43 03 03 
03a74     03 03 43 66 
03a78     3C 00 00 00 
03a7c     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
03a80     36 66 66 66 
03a84     66 66 66 36 
03a88     1F 00 00 00 
03a8c     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
03a90     66 46 16 1E 
03a94     16 06 46 66 
03a98     7F 00 00 00 
03a9c     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
03aa0     66 46 16 1E 
03aa4     16 06 06 06 
03aa8     0F 00 00 00 
03aac     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
03ab0     66 43 03 03 
03ab4     7B 63 63 66 
03ab8     5C 00 00 00 
03abc     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
03ac0     63 63 63 7F 
03ac4     63 63 63 63 
03ac8     63 00 00 00 
03acc     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
03ad0     18 18 18 18 
03ad4     18 18 18 18 | 	byte	$18[8]
03ad8     3C 00 00 00 
03adc     00 00 00 78 
03ae0     30 30 30 30 
03ae4     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
03ae8     1E 00 00 00 
03aec     00 00 00 67 
03af0     66 66 36 1E 
03af4     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
03af8     67 00 00 00 
03afc     00 00 00 0F 
03b00     06 06 06 06 
03b04     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
03b08     7F 00 00 00 
03b0c     00 00 00 63 
03b10     77 7F 7F 6B 
03b14     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
03b18     63 00 00 00 
03b1c     00 00 00 63 
03b20     67 6F 7F 7B 
03b24     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
03b28     63 00 00 00 
03b2c     00 00 00 3E 
03b30     63 63 63 63 
03b34     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03b38     3E 00 00 00 
03b3c     00 00 00 3F 
03b40     66 66 66 3E 
03b44     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
03b48     0F 00 00 00 
03b4c     00 00 00 3E 
03b50     63 63 63 63 
03b54     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
03b58     3E 30 70 00 
03b5c     00 00 00 3F 
03b60     66 66 66 3E 
03b64     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
03b68     67 00 00 00 
03b6c     00 00 00 3E 
03b70     63 63 06 1C 
03b74     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
03b78     3E 00 00 00 
03b7c     00 00 00 7E 
03b80     7E 5A 18 18 
03b84     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
03b88     3C 00 00 00 
03b8c     00 00 00 63 
03b90     63 63 63 63 
03b94     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
03b98     3E 00 00 00 
03b9c     00 00 00 63 
03ba0     63 63 63 63 
03ba4     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
03ba8     08 00 00 00 
03bac     00 00 00 63 
03bb0     63 63 63 6B 
03bb4     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
03bb8     36 00 00 00 
03bbc     00 00 00 63 
03bc0     63 36 3E 1C 
03bc4     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
03bc8     63 00 00 00 
03bcc     00 00 00 66 
03bd0     66 66 66 3C 
03bd4     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
03bd8     3C 00 00 00 
03bdc     00 00 00 7F 
03be0     63 61 30 18 
03be4     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
03be8     7F 00 00 00 
03bec     00 00 00 3C 
03bf0     0C 0C 0C 0C 
03bf4     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
03bf8     3C 00 00 00 
03bfc     00 00 00 00 
03c00     01 03 07 0E 
03c04     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
03c08     40 00 00 00 
03c0c     00 00 00 3C 
03c10     30 30 30 30 
03c14     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
03c18     3C 00 00 00 
03c1c     1C 36 00 00 
03c20     00 00 00 00 
03c24     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c28     00 00 00 00 
03c2c     00 00 00 00 
03c30     00 00 00 00 
03c34     00 00 00 00 
03c38     00          | 	byte	$00[17]
03c39     FF 00 00 0C 
03c3d     18 00 00 00 
03c41     00 00 00 00 
03c45     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c49     00 00 00 00 
03c4d     00 00 00 00 
03c51     00          | 	byte	$00[9]
03c52     1E 30 3E 33 
03c56     33 33 6E 00 
03c5a     00 00 00 00 
03c5e     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
03c62     1E 36 66 66 
03c66     66 66 3E 00 
03c6a     00 00 00 00 
03c6e     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c72     3E 63 03 03 
03c76     03 63 3E 00 
03c7a     00 00 00 00 
03c7e     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
03c82     3C 36 33 33 
03c86     33 33 6E 00 
03c8a     00 00 00 00 
03c8e     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03c92     3E 63 7F 03 
03c96     03 63 3E 00 
03c9a     00 00 00 00 
03c9e     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
03ca2     0C 1E 0C 0C 
03ca6     0C 0C 1E 00 
03caa     00 00 00 00 
03cae     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
03cb2     6E 33 33 33 
03cb6     33 33 3E 30 
03cba     33 1E 00 00 
03cbe     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
03cc2     36 6E 66 66 
03cc6     66 66 67 00 
03cca     00 00 00 00 
03cce     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
03cd2     1C 18 18 18 
03cd6     18 18 3C 00 
03cda     00 00 00 00 
03cde     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
03ce2     70 60 60 60 
03ce6     60 60 60 66 
03cea     66 3C 00 00 
03cee     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
03cf2     66 36 1E 1E 
03cf6     36 66 67 00 
03cfa     00 00 00 00 
03cfe     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
03d02     18 18 18 18 
03d06     18 18       | 	byte	$18[6]
03d08     3C 00 00 00 
03d0c     00 00 00 00 
03d10     00 00 37 7F 
03d14     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
03d18     63 00 00 00 
03d1c     00 00 00 00 
03d20     00 00 3B 66 
03d24     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03d28     66 00 00 00 
03d2c     00 00 00 00 
03d30     00 00 3E 63 
03d34     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
03d38     3E 00 00 00 
03d3c     00 00 00 00 
03d40     00 00 3B 66 
03d44     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
03d48     3E 06 06 0F 
03d4c     00 00 00 00 
03d50     00 00 6E 33 
03d54     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
03d58     3E 30 30 78 
03d5c     00 00 00 00 
03d60     00 00 3B 6E 
03d64     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
03d68     0F 00 00 00 
03d6c     00 00 00 00 
03d70     00 00 3E 63 
03d74     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
03d78     3E 00 00 00 
03d7c     00 00 00 08 
03d80     0C 0C 3F 0C 
03d84     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
03d88     38 00 00 00 
03d8c     00 00 00 00 
03d90     00 00 33 33 
03d94     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
03d98     6E 00 00 00 
03d9c     00 00 00 00 
03da0     00 00 63 63 
03da4     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
03da8     1C 00 00 00 
03dac     00 00 00 00 
03db0     00 00 63 63 
03db4     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
03db8     36 00 00 00 
03dbc     00 00 00 00 
03dc0     00 00 63 36 
03dc4     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
03dc8     63 00 00 00 
03dcc     00 00 00 00 
03dd0     00 00 63 63 
03dd4     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
03dd8     7E 60 30 1F 
03ddc     00 00 00 00 
03de0     00 00 7F 33 
03de4     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
03de8     7F 00 00 00 
03dec     00 00 00 70 
03df0     18 18 18 0E 
03df4     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
03df8     70 00 00 00 
03dfc     00 00 00 18 
03e00     18 18 18 18 
03e04     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
03e08     18 00 00 00 
03e0c     00 00 00 0E 
03e10     18 18 18 70 
03e14     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
03e18     0E 00 00 00 
03e1c     6E 3B 00 00 
03e20     00 00 00 00 
03e24     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
03e28     00 00 00 00 
03e2c     00 00 00 00 
03e30     00 00       | 	byte	$00[10]
03e32     08 1C 36 63 
03e36     63 63 7F 00 
03e3a     00 00 00 00 
03e3e     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
03e42     03 03 03 03 
03e46     43 66 3C 18 
03e4a     30 1E 00 00 
03e4e     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
03e52     33 33 33 33 
03e56     33 33       | 	byte	$33[6]
03e58     6E 00 00 00 
03e5c     00 00 60 30 
03e60     18 00 3E 63 
03e64     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
03e68     3E 00 00 00 
03e6c     00 00 08 1C 
03e70     36 00 1E 30 
03e74     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
03e78     6E 00 00 00 
03e7c     00 00 00 00 
03e80     33 00 1E 30 
03e84     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
03e88     6E 00 00 00 
03e8c     00 00 1C 36 
03e90     1C 00 33 33 
03e94     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
03e98     6E 00 00 00 
03e9c     00 00 60 30 
03ea0     18 00 3E 63 
03ea4     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
03ea8     3E 00 00 00 
03eac     00 00 00 00 
03eb0     00 00 3E 63 
03eb4     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
03eb8     3E 18 30 1E 
03ebc     00 00 00 1C 
03ec0     58 78 38 18 
03ec4     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
03ec8     3C 00 00 00 
03ecc     00 00 00 00 
03ed0     63 00 3E 63 
03ed4     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
03ed8     3E 00 00 00 
03edc     66 33 00 3E 
03ee0     63 63 63 63 
03ee4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03ee8     3E 00 00 00 
03eec     00 00 CC 66 
03ef0     33 00 3E 63 
03ef4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
03ef8     3E 00 00 00 
03efc     00 00 18 3C 
03f00     66 00 1C 18 
03f04     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
03f08     3C 00 00 00 
03f0c     30 18 00 7F 
03f10     63 61 30 18 
03f14     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
03f18     7F 00 00 00 
03f1c     00 63 00 08 
03f20     1C 36 63 63 
03f24     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
03f28     63 00 00 00 
03f2c     30 18 00 3C 
03f30     66 43 03 03 
03f34     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
03f38     3C 00 00 00 
03f3c     30 18 00 7F 
03f40     66 46 16 1E 
03f44     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
03f48     7F 00 00 00 
03f4c     0C 06 00 0F 
03f50     06 06 06 06 
03f54     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
03f58     7F 00 00 00 
03f5c     30 18 00 1C 
03f60     18 18 18 18 
03f64     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
03f68     3C 00 00 00 
03f6c     00 00 08 1C 
03f70     36 00 3E 63 
03f74     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
03f78     3E 00 00 00 
03f7c     00 00 00 00 
03f80     63 00 3E 63 
03f84     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
03f88     3E 00 00 00 
03f8c     00 00 00 6F 
03f90     46 26 06 06 
03f94     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
03f98     7F 00 00 00 
03f9c     00 00 00 6E 
03fa0     4C 2C 0C 0C 
03fa4     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
03fa8     1E 00 00 00 
03fac     30 18 00 3E 
03fb0     63 63 06 1C 
03fb4     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
03fb8     3E 00 00 00 
03fbc     00 00 60 30 
03fc0     18 00 3E 63 
03fc4     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
03fc8     3E 00 00 00 
03fcc     00 63 00 3E 
03fd0     63 63 63 63 
03fd4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
03fd8     3E 00 00 00 
03fdc     00 63 00 63 
03fe0     63 63 63 63 
03fe4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
03fe8     3E 00 00 00 
03fec     6C 38 00 7E 
03ff0     7E 5A 18 18 
03ff4     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
03ff8     3C 00 00 00 
03ffc     00 00 60 48 
04000     2C 0C 3F 0C 
04004     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
04008     38 00 00 00 
0400c     00 00 00 0F 
04010     26 36 1E 0E 
04014     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
04018     7F 00 00 00 
0401c     00 00 00 00 
04020     00 63 36 1C 
04024     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
04028     00 00 00 00 
0402c     00 00       | 	byte	$00[6]
0402e     36 1C 08 00 
04032     3E 63 03 03 
04036     03 63 3E 00 
0403a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0403e     30 18 0C 00 
04042     1E 30 3E 33 
04046     33 33 6E 00 
0404a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0404e     60 30 18 00 
04052     1C 18 18 18 
04056     18 18 3C 00 
0405a     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
0405e     60 30 18 00 
04062     3E 63 63 63 
04066     63 63 3E 00 
0406a     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
0406e     30 18 0C 00 
04072     33 33 33 33 
04076     33 33 6E 00 
0407a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0407e     00 08 1C 36 
04082     63 63 7F 63 
04086     63 63 63 18 
0408a     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
0408e     00 00 00 00 
04092     1E 30 3E 33 
04096     33 33 6E 18 
0409a     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
0409e     00 7F 63 61 
040a2     30 18 0C 06 
040a6     43 63 7F 00 
040aa     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
040ae     36 1C 08 00 
040b2     7F 33 18 0C 
040b6     06 63 7F 00 
040ba     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
040be     00 7F 66 46 
040c2     16 1E 16 06 
040c6     46 66 7F 18 
040ca     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
040ce     00 00 00 00 
040d2     3E 63 7F 03 
040d6     03 63 3E 18 
040da     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
040de     00 3C 66 03 
040e2     1F 03 0F 03 
040e6     03 66 3C 00 
040ea     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
040ee     60 30 18 00 
040f2     7F 33 18 0C 
040f6     06 63 7F 00 
040fa     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
040fe     00 3C 66 43 
04102     03 03 03 03 
04106     43 66 3C 00 
0410a     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
0410e     00 00 00 00 
04112     3E 63 06 1C 
04116     30 63 3E 18 
0411a     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0411e     00 00 00 00 
04122     00 00       | 	byte	$00[6]
04124     6C 36 1B 36 
04128     6C 00 00 00 
0412c     00 00 00 00 
04130     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04134     1B 36 6C 36 
04138     1B 00 00 00 
0413c     88 22 88 22 
04140     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
04144     88 22 88 22 
04148     88 22 88 22 
0414c     AA 55 AA 55 
04150     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
04154     AA 55 AA 55 
04158     AA 55 AA 55 
0415c     BB EE BB EE 
04160     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
04164     BB EE BB EE 
04168     BB EE BB EE 
0416c     18 18 18 18 
04170     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
04174     18 18 18 18 
04178     18 18 18 18 
0417c     18 18 18 18 
04180     18 18 18    | 	byte	$18[15]
04183     1F 18 18 18 
04187     18 18 18 18 
0418b     18 30 18 00 
0418f     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
04193     63 7F 63 63 
04197     63 63 00 00 
0419b     00 1C 36 00 
0419f     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
041a3     63 7F 63 63 
041a7     63 63 00 00 
041ab     00 36 1C 00 
041af     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
041b3     1E 16 06 46 
041b7     66 7F 00 00 
041bb     00 00 00 00 
041bf     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
041c3     1C 30 60 63 
041c7     63 3E 18 30 
041cb     1E 6C 6C 6C 
041cf     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
041d3     6F 6C 6C 6C 
041d7     6C 6C 6C 6C 
041db     6C 6C 6C 6C 
041df     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
041e3     6C 6C 6C 6C 
041e7     6C 6C 6C 6C 
041eb     6C          | 	byte	$6c[9]
041ec     00 00 00 00 
041f0     00          | 	byte	$00[5]
041f1     7F 60 6F 6C 
041f5     6C 6C 6C 6C 
041f9     6C 6C 6C 6C 
041fd     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04201     6F 60 7F 00 
04205     00 00 00 00 
04209     00 00 00 18 
0420d     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
04211     61 30 18 0C 
04215     06 43 63 7F 
04219     00 00 00 00 
0421d     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
04221     00 7F 33 18 
04225     0C 06 63 7F 
04229     00 00 00 00 
0422d     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
04231     00 00 1F 18 
04235     18 18 18 18 
04239     18 18 18 18 
0423d     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04241     18 18 F8 00 
04245     00 00 00 00 
04249     00 00 00 18 
0424d     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04251     18 18 FF 00 
04255     00 00 00 00 
04259     00 00 00 00 
0425d     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04261     00 00 FF 18 
04265     18 18 18 18 
04269     18 18 18 18 
0426d     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04271     18 18 F8 18 
04275     18 18 18 18 
04279     18 18 18 00 
0427d     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04281     00 00 FF 00 
04285     00 00 00 00 
04289     00 00 00 18 
0428d     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
04291     18 18 FF 18 
04295     18 18 18 18 
04299     18 18 18 63 
0429d     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
042a1     36 63 63 7F 
042a5     63 63 63 63 
042a9     00 00 00 00 
042ad     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
042b1     00 1E 30 3E 
042b5     33 33 33 6E 
042b9     00 00 00 6C 
042bd     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
042c1     EC 0C FC 00 
042c5     00 00 00 00 
042c9     00 00 00 00 
042cd     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
042d1     FC 0C EC 6C 
042d5     6C 6C 6C 6C 
042d9     6C 6C 6C 6C 
042dd     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
042e1     EF 00 FF 00 
042e5     00 00 00 00 
042e9     00 00 00 00 
042ed     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
042f1     FF 00 EF 6C 
042f5     6C 6C 6C 6C 
042f9     6C 6C 6C 6C 
042fd     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
04301     EC 0C EC 6C 
04305     6C 6C 6C 6C 
04309     6C 6C 6C 00 
0430d     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04311     FF 00 FF 00 
04315     00 00 00 00 
04319     00 00 00 6C 
0431d     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
04321     EF 00 EF 6C 
04325     6C 6C 6C 6C 
04329     6C 6C 6C 00 
0432d     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
04331     63 3E 63 63 
04335     63 63 3E 63 
04339     00 00 00 00 
0433d     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
04341     30 3C 36 33 
04345     33 33 33 6E 
04349     00 00 00 00 
0434d     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
04351     66 66 6F 66 
04355     66 66 36 1F 
04359     00 00 00 36 
0435d     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
04361     66 66 66 66 
04365     66 66       | 	byte	$66[6]
04367     36 1F 00 00 
0436b     00 00 63 00 
0436f     7F 66 46 16 
04373     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
04377     66 7F 00 00 
0437b     00 6C 38 00 
0437f     38 30 30 3C 
04383     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
04387     33 6E 00 00 
0438b     00 36 1C 00 
0438f     63 67 6F 7F 
04393     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
04397     63 63 00 00 
0439b     00 30 18 00 
0439f     3C 18 18 18 
043a3     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
043a7     18 3C 00 00 
043ab     00 3C 66 00 
043af     3C 18 18 18 
043b3     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
043b7     18 3C 00 00 
043bb     00 00 00 36 
043bf     1C 08 00 3E 
043c3     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
043c7     63 3E 00 00 
043cb     00 18 18 18 
043cf     18 18 18 18 
043d3     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
043d7     00 00 00 00 
043db     00 00 00 00 
043df     00 00 00 00 | 	byte	$00[12]
043e3     F8 18 18 18 
043e7     18 18 18 18 
043eb     18 FF FF FF 
043ef     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
043f3     FF FF FF FF 
043f7     FF FF FF FF 
043fb     FF          | 	byte	$ff[9]
043fc     00 00 00 00 
04400     00 00 00    | 	byte	$00[7]
04403     FF FF FF FF 
04407     FF FF FF FF 
0440b     FF          | 	byte	$ff[9]
0440c     00 00 00 7E 
04410     7E 5A 18 18 
04414     18 18 18 18 
04418     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
0441c     1C 36 1C 63 
04420     63 63 63 63 
04424     63 63 63 63 
04428     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0442c     FF FF FF FF 
04430     FF FF FF    | 	byte	$ff[7]
04433     00 00 00 00 
04437     00 00 00 00 
0443b     00          | 	byte	$00[9]
0443c     30 18 00 3E 
04440     63 63 63 63 
04444     63 63 63 63 
04448     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0444c     00 00 00 1E 
04450     33 33 33 1B 
04454     33 63 63 63 
04458     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
0445c     1C 36 00 3E 
04460     63 63 63 63 
04464     63 63 63 63 
04468     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0446c     30 18 00 63 
04470     67 6F 7F 7B 
04474     73 63 63 63 
04478     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
0447c     00 00 60 30 
04480     18 00 3B 66 
04484     66 66 66 66 
04488     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
0448c     00 00 36 1C 
04490     08 00 3B 66 
04494     66 66 66 66 
04498     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
0449c     36 1C 00 3E 
044a0     63 63 06 1C 
044a4     30 60 63 63 
044a8     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
044ac     00 00 36 1C 
044b0     08 00 3E 63 
044b4     06 1C 30 63 
044b8     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
044bc     30 18 00 3F 
044c0     66 66 66 3E 
044c4     36 66 66 66 
044c8     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
044cc     30 18 00 63 
044d0     63 63 63 63 
044d4     63 63 63 63 
044d8     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
044dc     00 00 60 30 
044e0     18 00 3B 6E 
044e4     66 06 06 06 
044e8     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
044ec     66 33 00 63 
044f0     63 63 63 63 
044f4     63 63 63 63 
044f8     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
044fc     00 00 60 30 
04500     18 00 63 63 
04504     63 63 63 63 
04508     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
0450c     30 18 00 66 
04510     66 66 66 3C 
04514     18 18 18 18 
04518     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
0451c     00 00 00 08 
04520     0C 0C 3F 0C 
04524     0C 0C 0C 6C 
04528     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
0452c     30 18 00 00 
04530     00 00 00 00 
04534     00 00 00 00 
04538     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0453c     00 00 00 00 
04540     00 00 00 00 | 	byte	$00[8]
04544     7F 00 00 00 
04548     00 00 00 00 
0454c     66 33 00 00 
04550     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
04554     00 00 00 00 
04558     00 00 00 00 
0455c     00 00 00 00 
04560     00 00 00 00 
04564     00 00 00 00 
04568     00          | 	byte	$00[21]
04569     0C 06 3C 36 
0456d     1C 00 00 00 
04571     00 00 00 00 
04575     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04579     00 00 00 63 
0457d     3E 00 00 00 
04581     00 00 00 00 
04585     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04589     00 00 00 00 
0458d     3E 63 06 1C 
04591     36 63 63 36 
04595     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
04599     00 00 00 00 
0459d     00 00 00 00 | 	byte	$00[8]
045a1     18 00 7E 00 
045a5     18 00 00 00 
045a9     00 00 00 00 
045ad     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
045b1     00 00 00 00 
045b5     00 00 00 00 | 	byte	$00[8]
045b9     18 30 1E 00 
045bd     00 00 1C 36 
045c1     36 1C 00 00 
045c5     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
045c9     00 00 00 00 
045cd     63 00 00 00 
045d1     00 00 00 00 
045d5     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
045d9     00 00 00 18 
045dd     18 00 00 00 
045e1     00 00 00 00 
045e5     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
045e9     00 00 00 00 
045ed     00          | 	byte	$00[5]
045ee     CC 66 33 00 
045f2     33 33 33 33 
045f6     33 33 6E 00 
045fa     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
045fe     00 3F 66 66 
04602     66 3E 36 66 
04606     66 66 6F 00 
0460a     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
0460e     36 1C 08 00 
04612     3B 6E 66 06 
04616     06 06 0F 00 
0461a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
0461e     00 00 00 7E 
04622     7E 7E 7E 7E 
04626     7E 7E 00 00 
0462a     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
0462e     00 00 00 00 
04632     00 00 00 00 
04636     00 00 00 00 
0463a     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0463c     00 00 00 00 
      ...             
0466c     00 00 00 00 
04670     00 00 00    | st_font        file "st4font.def"
04673     FF FF 00 00 
04677     00 00 00 00 
0467b     00 18 18 18 
0467f     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04683     18 18 18 18 
04687     18 18 18 18 
0468b     18          | 	byte	$18[9]
0468c     00 00 00 00 
04690     00 00 00    | 	byte	$00[7]
04693     FF FF 18 18 
04697     18 18 18 18 
0469b     18 18 18 18 
0469f     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
046a3     FF FF 00 00 
046a7     00 00 00 00 
046ab     00 18 18 18 
046af     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
046b3     1F 1F 18 18 
046b7     18 18 18 18 
046bb     18 18 18 18 
046bf     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
046c3     F8 F8 18 18 
046c7     18 18 18 18 
046cb     18 00 00 00 
046cf     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
046d3     1F 1F 18 18 
046d7     18 18 18 18 
046db     18 00 00 00 
046df     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
046e3     F8 F8 18 18 
046e7     18 18 18 18 
046eb     18 18 18 18 
046ef     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
046f3     1F 1F 00 00 
046f7     00 00 00 00 
046fb     00 18 18 18 
046ff     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04703     F8 F8 00 00 
04707     00 00 00 00 
0470b     00 18 18 18 
0470f     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
04713     FF FF 18 18 
04717     18 18 18 18 
0471b     18 00 00 18 
0471f     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
04723     66 7E 7E 66 
04727     66 66 66 30 
0472b     18 00 00 7E 
0472f     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
04733     3E 06 06 06 
04737     06 7E 7E 18 
0473b     0C 30 18 3C 
0473f     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
04743     06 06 06 66 
04747     66 7E 3C 00 
0474b     00 30 18 66 
0474f     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
04753     7E 7E 76 76 
04757     66 66 66 00 
0475b     00 30 18 7C 
0475f     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
04763     1C 38 70 60 
04767     60 7E 3E 00 
0476b     00 30 18 7E 
0476f     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
04773     18 0C 0C 06 
04777     06 7E 7E 00 
0477b     00 18 18 00 
0477f     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
04783     18 18 0C 0C 
04787     06 7E 7E 00 
0478b     00 30 18 3C 
0478f     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
04793     66 66 66 66 
04797     66          | 	byte	$66[5]
04798     7E 3C 00 00 
0479c     00 00 06 06 
047a0     06 06 16 1E 
047a4     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
047a8     7E 7E 00 00 
047ac     00 00 00 00 
047b0     00 3C 7C 60 
047b4     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
047b8     7E 7C 30 18 
047bc     00 00 00 00 
047c0     00 3C 7E 66 
047c4     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
047c8     7E 7C 18 0C 
047cc     00 00 30 18 
047d0     00 3C 3E 06 
047d4     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
047d8     7E 7C 00 00 
047dc     00 00 30 18 
047e0     00 3E 7E 66 
047e4     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
047e8     66 66 00 00 
047ec     00 00 30 18 
047f0     00 7C 7E 06 
047f4     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
047f8     7E 3E 00 00 
047fc     00 00 30 18 
04800     00 7E 7E 30 
04804     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04808     7E 7E 00 00 
0480c     00 00 18 18 
04810     00 7E 7E 30 
04814     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04818     7E 7E 00 00 
0481c     00 00 30 18 
04820     00 3C 7E 66 
04824     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
04828     7E 3C 00 00 
0482c     00 00 1C 1C 
04830     18 18 38 3C 
04834     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
04838     3C 3C 00 00 
0483c     00 00 00 00 
04840     00 00 00 00 
04844     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
04848     00 00 00 00 
0484c     00 00       | 	byte	$00[6]
0484e     18 18 18 18 
04852     18 18 18 18 | 	byte	$18[8]
04856     00 00 18 18 
0485a     00 00 00 00 
0485e     66 66 66 66 
04862     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
04866     00 00 00 00 
0486a     00 00 00 00 
0486e     00          | 	byte	$00[9]
0486f     66 66 FF FF 
04873     66 66 FF FF 
04877     66 66 00 00 
0487b     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
0487f     7C 7E 06 06 
04883     3E 7C 60 60 
04887     7E 3E 18 18 
0488b     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
0488f     66 30 30 18 
04893     18 0C 0C 66 
04897     66 00 00 00 
0489b     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
0489f     66 66 3C 1C 
048a3     1C FC FE 66 
048a7     66 FE FC 00 
048ab     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
048af     18 18 18 18 
048b3     00 00 00 00 
048b7     00 00 00 00 
048bb     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
048bf     18 1C 0C 0C 
048c3     0C 0C 0C 0C 
048c7     1C 18 30 00 
048cb     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
048cf     18 38 30 30 
048d3     30 30 30 30 
048d7     38 18 0C 00 
048db     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
048df     66 66 3C 3C 
048e3     FF FF 3C 3C 
048e7     66 66 00 00 
048eb     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
048ef     00 18 18 18 
048f3     7E 7E 18 18 
048f7     18 00 00 00 
048fb     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
048ff     00 00 00 00 
04903     00 00       | 	byte	$00[6]
04905     18 18 18 18 
04909     18          | 	byte	$18[5]
0490a     0C 04 00 00 
0490e     00 00 00 00 
04912     7E 7E 00 00 
04916     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
0491a     00 00 00 00 
0491e     00 00 00 00 
04922     00 00 00 00 
04926     00          | 	byte	$00[13]
04927     18 18 18 00 
0492b     00 00 00 60 
0492f     60 60 30 30 
04933     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
04937     06 06 06 00 
0493b     00 00 00 3C 
0493f     7E 66 66 66 
04943     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
04947     66 7E 3C 00 
0494b     00 00 00 18 
0494f     18 1C 1C 18 
04953     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
04957     18 7E 7E 00 
0495b     00 00 00 3C 
0495f     7E 66 66 30 
04963     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
04967     0C 7E 7E 00 
0496b     00 00 00 7E 
0496f     7E 30 30 18 
04973     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
04977     66 7E 3C 00 
0497b     00 00 00 30 
0497f     30 38 38 3C 
04983     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
04987     7E 30 30 00 
0498b     00 00 00 7E 
0498f     7E 06 06 3E 
04993     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
04997     66 7E 3C 00 
0499b     00 00 00 38 
0499f     3C 0E 06 06 
049a3     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
049a7     66 7E 3C 00 
049ab     00 00 00 7E 
049af     7E 60 60 30 
049b3     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
049b7     0C 0C 0C 00 
049bb     00 00 00 3C 
049bf     7E 66 66 3C 
049c3     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
049c7     66 7E 3C 00 
049cb     00 00 00 3C 
049cf     7E 66 66 7E 
049d3     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
049d7     70 3C 1C 00 
049db     00 00 00 00 
049df     00 00 18 18 
049e3     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
049e7     18 18 18 00 
049eb     00 00 00 00 
049ef     00 00 18 18 
049f3     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
049f7     18 18 18 0C 
049fb     04 00 00 00 
049ff     70 38 1C 0E 
04a03     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
04a07     70 00 00 00 
04a0b     00 00 00 00 
04a0f     00 00 7E 7E 
04a13     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
04a17     00 00 00 00 
04a1b     00 00 00 00 | 	byte	$00[8]
04a1f     0E 1C 38 70 
04a23     E0 70 38 1C 
04a27     0E 00 00 00 
04a2b     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
04a2f     7E 66 66 30 
04a33     30 18 18 18 
04a37     00 18 18 00 
04a3b     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
04a3f     7E 66 66 66 
04a43     66 36 06 66 
04a47     66 7E 3C 00 
04a4b     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
04a4f     3C 7E 66 66 
04a53     66 7E 7E 66 
04a57     66 66 66 00 
04a5b     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
04a5f     7E 66 66 7E 
04a63     3E 66 66 66 
04a67     66 7E 3E 00 
04a6b     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
04a6f     7E 66 66 06 
04a73     06 06 06 66 
04a77     66 7E 3C 00 
04a7b     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
04a7f     7E 66 66 66 
04a83     66 66 66 66 
04a87     66 7E 3E 00 
04a8b     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
04a8f     7E 06 06 3E 
04a93     3E 06 06 06 
04a97     06 7E 7E 00 
04a9b     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
04a9f     7E 06 06 3E 
04aa3     3E 06 06 06 
04aa7     06 06 06 00 
04aab     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
04aaf     7E 06 06 76 
04ab3     76 66 66 66 
04ab7     66 7E 3C 00 
04abb     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
04abf     66 66 66 7E 
04ac3     7E 66 66 66 
04ac7     66 66 66 00 
04acb     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
04acf     7E 18 18 18 
04ad3     18 18 18 18 
04ad7     18 7E 7E 00 
04adb     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
04adf     60 60 60 60 
04ae3     60 60 60    | 	byte	$60[7]
04ae6     66 66 7E 3C 
04aea     00 00 00 00 
04aee     66 66 36 36 
04af2     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
04af6     66 66 C6 C6 
04afa     00 00 00 00 
04afe     06 06 06 06 
04b02     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
04b06     06 06 7E 7E 
04b0a     00 00 00 00 
04b0e     C6 C6 EE EE 
04b12     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
04b16     C6 C6 C6 C6 
04b1a     00 00 00 00 
04b1e     66 66 66 6E 
04b22     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
04b26     76 66 66 66 
04b2a     00 00 00 00 
04b2e     3C 7E 66 66 
04b32     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04b36     66 66 7E 3C 
04b3a     00 00 00 00 
04b3e     3E 7E 66 66 
04b42     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
04b46     06 06 06 06 
04b4a     00 00 00 00 
04b4e     3C 7E 66 66 
04b52     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
04b56     66 56 3E 6C 
04b5a     00 00 00 00 
04b5e     3E 7E 66 66 
04b62     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
04b66     66 66 C6 C6 
04b6a     00 00 00 00 
04b6e     7C 7E 06 06 
04b72     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
04b76     60 60 7E 3E 
04b7a     00 00 00 00 
04b7e     7E 7E 18 18 
04b82     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
04b86     18 18 18 18 
04b8a     00 00 00 00 
04b8e     66 66 66 66 
04b92     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04b96     66 66 7E 3C 
04b9a     00 00 00 00 
04b9e     66 66 66 66 
04ba2     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
04ba6     3C 3C 18 18 
04baa     00 00 00 00 
04bae     C6 C6 C6 C6 
04bb2     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
04bb6     FE EE C6 82 
04bba     00 00 00 00 
04bbe     66 66 66 3C 
04bc2     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
04bc6     3C 66 66 66 
04bca     00 00 00 00 
04bce     66 66 66 66 
04bd2     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
04bd6     18 18 18 18 
04bda     00 00 00 00 
04bde     7E 7E 30 30 
04be2     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
04be6     06 06 7E 7E 
04bea     00 00 00 00 
04bee     3C 3C 0C 0C 
04bf2     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
04bf6     0C 0C 3C 3C 
04bfa     00 00 00 00 
04bfe     06 06 0C 0C 
04c02     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
04c06     60 60 C0 C0 
04c0a     00 00 00 00 
04c0e     3C 3C 30 30 
04c12     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
04c16     30 30 3C 3C 
04c1a     00 00 00 00 
04c1e     18 18 3C 3C 
04c22     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
04c26     00 00 00 00 
04c2a     00 00 00 00 
04c2e     00 00 00 00 
04c32     00 00 00 00 
04c36     00 00       | 	byte	$00[18]
04c38     FE FE 00 00 
04c3c     00 00 0C 0C 
04c40     18 18 00 00 
04c44     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
04c48     00 00 00 00 
04c4c     00 00 00 00 
04c50     00          | 	byte	$00[9]
04c51     3C 7C 60 7C 
04c55     7E 66 66 7E 
04c59     7C 00 00 00 
04c5d     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
04c61     3E 7E 66 66 
04c65     66 66 66 7E 
04c69     3E 00 00 00 
04c6d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
04c71     3C 3E 06 06 
04c75     06 06 06 7E 
04c79     7C 00 00 00 
04c7d     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
04c81     7C 7E 66 66 
04c85     66 66 66 7E 
04c89     7C 00 00 00 
04c8d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
04c91     3C 7E 66 66 
04c95     7E 06 06 7E 
04c99     7C 00 00 00 
04c9d     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
04ca1     18 7E 7E 18 
04ca5     18 18 18 18 
04ca9     18 00 00 00 
04cad     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
04cb1     7C 7E 66 66 
04cb5     66 66 7E 7C 
04cb9     60 7E 3E 00 
04cbd     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
04cc1     3E 7E 66 66 
04cc5     66 66 66 66 
04cc9     66 00 00 00 
04ccd     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
04cd1     1C 1C 18 18 
04cd5     18 18 18 3C 
04cd9     3C 00 00 00 
04cdd     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
04ce1     30 30 30 30 
04ce5     30 30 30 30 
04ce9     30          | 	byte	$30[9]
04cea     3E 1E 00 00 
04cee     06 06 06 36 
04cf2     36 1E 1E 1E 
04cf6     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
04cfa     00 00 00 00 
04cfe     1C 1C 18 18 
04d02     18 18 18 18 
04d06     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
04d0a     00 00 00 00 
04d0e     00 00 00    | 	byte	$00[7]
04d11     6C FE FE D6 
04d15     D6 C6 C6 C6 
04d19     C6 00 00 00 
04d1d     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
04d21     3E 7E 66 66 
04d25     66 66 66 66 
04d29     66 00 00 00 
04d2d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
04d31     3C 7E 66 66 
04d35     66 66 66 7E 
04d39     3C 00 00 00 
04d3d     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
04d41     3E 7E 66 66 
04d45     66 66 66 7E 
04d49     3E 06 06 00 
04d4d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
04d51     7C 7E 66 66 
04d55     66 66 66 7E 
04d59     7C 60 60 00 
04d5d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
04d61     3E 7E 66 06 
04d65     06 06 06 06 
04d69     06 00 00 00 
04d6d     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
04d71     7C 7E 06 0E 
04d75     3C 70 60 7E 
04d79     3E 00 00 00 
04d7d     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
04d81     7E 7E 18 18 
04d85     18 18 18 78 
04d89     70 00 00 00 
04d8d     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
04d91     66 66 66 66 
04d95     66 66 66    | 	byte	$66[7]
04d98     7E 7C 00 00 
04d9c     00 00 00 00 
04da0     00 66 66 66 
04da4     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
04da8     18 18 00 00 
04dac     00 00 00 00 
04db0     00 C6 C6 D6 
04db4     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
04db8     C6 82 00 00 
04dbc     00 00 00 00 
04dc0     00 66 66 3C 
04dc4     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
04dc8     66 66 00 00 
04dcc     00 00 00 00 
04dd0     00 66 66 66 
04dd4     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
04dd8     7C 60 7E 3E 
04ddc     00 00 00 00 
04de0     00 7E 7E 30 
04de4     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
04de8     7E 7E 00 00 
04dec     00 00 30 18 
04df0     18 18 18 0C 
04df4     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
04df8     18 30 00 00 
04dfc     00 00 18 18 
04e00     18 18 18 18 
04e04     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
04e08     18 18 00 00 
04e0c     00 00 0C 18 
04e10     18 18 18 30 
04e14     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
04e18     18 0C 00 00 
04e1c     00 00 6C 7E 
04e20     36 00 00 00 
04e24     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
04e28     00 00 00 00 
04e2c     00 00 00 00 
04e30     00          | 	byte	$00[9]
04e31     18 18 18 18 
04e35     18 18 00 00 
04e39     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
04e3c     00 00 00 00 
04e40     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
04e44     00 00 00 00 
04e48     00 80 80 80 
04e4c     00 00 00 FF 
04e50     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
04e54     00 00 00 00 
04e58     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
04e59     80 00 00 00 
04e5d     00 80 00 00 
04e61     80 80 00 00 
04e65     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
04e69     80 00 80 00 
04e6d     00 40 80 00 
04e71     AA AA AA 00 
04e75     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
04e79     FF 00 00 00 
04e7d     00 FF 00 00 
04e81     FF FF 00 00 
04e85     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
04e89     FF 00 FF 00 
04e8d     00 FF FF 00 
04e91     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
04e94     00 00 00 00 
04e98     00          | ataripalette   file "ataripalettep2.def"
04e99     11 11 11 00 
04e9d     22 22 22 00 
04ea1     33 33 33 00 
04ea5     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
04ea9     55 55 55 00 
04ead     66 66 66 00 
04eb1     77 77 77 00 
04eb5     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
04eb9     99 99 99 00 
04ebd     AA AA AA 00 
04ec1     BB BB BB 00 
04ec5     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
04ec9     DD DD DD 00 
04ecd     EE EE EE 00 
04ed1     FF FF FF 00 
04ed5     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
04ed9     00 14 40 00 
04edd     00 1E 60 00 
04ee1     00 28 80 00 
04ee5     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
04ee9     00 3C BF 00 
04eed     00 46 DF 00 
04ef1     00 50 FF 00 
04ef5     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
04ef9     39 77 FF 00 
04efd     55 8A FF 00 
04f01     71 9E FF 00 
04f05     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
04f09     AA C5 FF 00 
04f0d     C6 D8 FF 00 
04f11     E3 EC FF 00 
04f15     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
04f19     00 00 40 00 
04f1d     00 00 60 00 
04f21     00 00 80 00 
04f25     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
04f29     00 00 BF 00 
04f2d     00 00 DF 00 
04f31     00 00 FF 00 
04f35     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
04f39     39 39 FF 00 
04f3d     55 55 FF 00 
04f41     71 71 FF 00 
04f45     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
04f49     AA AA FF 00 
04f4d     C6 C6 FF 00 
04f51     E3 E3 FF 00 
04f55     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
04f59     20 00 40 00 
04f5d     30 00 60 00 
04f61     40 00 80 00 
04f65     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
04f69     60 00 BF 00 
04f6d     70 00 DF 00 
04f71     80 00 FF 00 
04f75     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
04f79     9C 39 FF 00 
04f7d     AA 55 FF 00 
04f81     B8 71 FF 00 
04f85     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
04f89     D5 AA FF 00 
04f8d     E3 C6 FF 00 
04f91     F1 E3 FF 00 
04f95     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
04f99     40 00 40 00 
04f9d     60 00 60 00 
04fa1     80 00 80 00 
04fa5     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
04fa9     BF 00 BF 00 
04fad     DF 00 DF 00 
04fb1     FF 00 FF 00 
04fb5     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
04fb9     FF 39 FF 00 
04fbd     FF 55 FF 00 
04fc1     FF 71 FF 00 
04fc5     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
04fc9     FF AA FF 00 
04fcd     FF C6 FF 00 
04fd1     FF E3 FF 00 
04fd5     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
04fd9     40 00 20 00 
04fdd     60 00 30 00 
04fe1     80 00 40 00 
04fe5     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
04fe9     BF 00 60 00 
04fed     DF 00 70 00 
04ff1     FF 00 80 00 
04ff5     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
04ff9     FF 39 9C 00 
04ffd     FF 55 AA 00 
05001     FF 71 B8 00 
05005     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
05009     FF AA D5 00 
0500d     FF C6 E3 00 
05011     FF E3 F1 00 
05015     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
05019     40 00 00 00 
0501d     60 00 00 00 
05021     80 00 00 00 
05025     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
05029     BF 00 00 00 
0502d     DF 00 00 00 
05031     FF 00 00 00 
05035     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
05039     FF 39 39 00 
0503d     FF 55 55 00 
05041     FF 71 71 00 
05045     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
05049     FF AA AA 00 
0504d     FF C6 C6 00 
05051     FF E3 E3 00 
05055     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
05059     40 10 00 00 
0505d     60 18 00 00 
05061     80 20 00 00 
05065     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
05069     BF 30 00 00 
0506d     DF 38 00 00 
05071     FF 40 00 00 
05075     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
05079     FF 6A 39 00 
0507d     FF 80 55 00 
05081     FF 95 71 00 
05085     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
05089     FF BF AA 00 
0508d     FF D5 C6 00 
05091     FF EA E3 00 
05095     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
05099     40 20 00 00 
0509d     60 30 00 00 
050a1     80 40 00 00 
050a5     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
050a9     BF 60 00 00 
050ad     DF 70 00 00 
050b1     FF 80 00 00 
050b5     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
050b9     FF 9C 39 00 
050bd     FF AA 55 00 
050c1     FF B8 71 00 
050c5     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
050c9     FF D5 AA 00 
050cd     FF E3 C6 00 
050d1     FF F1 E3 00 
050d5     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
050d9     40 30 00 00 
050dd     60 48 00 00 
050e1     80 60 00 00 
050e5     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
050e9     BF 90 00 00 
050ed     DF A8 00 00 
050f1     FF C0 00 00 
050f5     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
050f9     FF CE 39 00 
050fd     FF D5 55 00 
05101     FF DC 71 00 
05105     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
05109     FF EA AA 00 
0510d     FF F1 C6 00 
05111     FF F8 E3 00 
05115     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
05119     30 40 00 00 
0511d     48 60 00 00 
05121     60 80 00 00 
05125     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
05129     90 BF 00 00 
0512d     A8 DF 00 00 
05131     C0 FF 00 00 
05135     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
05139     CE FF 39 00 
0513d     D5 FF 55 00 
05141     DC FF 71 00 
05145     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
05149     EA FF AA 00 
0514d     F1 FF C6 00 
05151     F8 FF E3 00 
05155     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
05159     00 40 00 00 
0515d     00 60 00 00 
05161     00 80 00 00 
05165     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
05169     00 BF 00 00 
0516d     00 DF 00 00 
05171     00 FF 00 00 
05175     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
05179     39 FF 39 00 
0517d     55 FF 55 00 
05181     71 FF 71 00 
05185     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
05189     AA FF AA 00 
0518d     C6 FF C6 00 
05191     E3 FF E3 00 
05195     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
05199     00 40 14 00 
0519d     00 60 1E 00 
051a1     00 80 28 00 
051a5     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
051a9     00 BF 3C 00 
051ad     00 DF 46 00 
051b1     00 FF 50 00 
051b5     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
051b9     39 FF 77 00 
051bd     55 FF 8A 00 
051c1     71 FF 9E 00 
051c5     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
051c9     AA FF C5 00 
051cd     C6 FF D8 00 
051d1     E3 FF EC 00 
051d5     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
051d9     00 40 28 00 
051dd     00 60 3C 00 
051e1     00 80 50 00 
051e5     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
051e9     00 BF 78 00 
051ed     00 DF 8C 00 
051f1     00 FF A0 00 
051f5     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
051f9     39 FF B5 00 
051fd     55 FF C0 00 
05201     71 FF CA 00 
05205     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
05209     AA FF DF 00 
0520d     C6 FF EA 00 
05211     E3 FF F4 00 
05215     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
05219     00 40 40 00 
0521d     00 60 60 00 
05221     00 80 80 00 
05225     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
05229     00 BF BF 00 
0522d     00 DF DF 00 
05231     00 FF FF 00 
05235     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
05239     39 FF FF 00 
0523d     55 FF FF 00 
05241     71 FF FF 00 
05245     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
05249     AA FF FF 00 
0524d     C6 FF FF 00 
05251     E3 FF FF 00 
05255     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
05259     00 28 40 00 
0525d     00 3C 60 00 
05261     00 50 80 00 
05265     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
05269     00 78 BF 00 
0526d     00 8C DF 00 
05271     00 A0 FF 00 
05275     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
05279     39 B5 FF 00 
0527d     55 C0 FF 00 
05281     71 CA FF 00 
05285     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
05289     AA DF FF 00 
0528d     C6 EA FF 00 
05291     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
05294                 | '**********************************************************************************
05294                 | '
05294                 | '        Timings and colors definitions
05294                 | '
05294                 | '**********************************************************************************
05294                 | 
05294                 |    'streamer sets for text mode, to add to timings[0..5]
05294                 | 
05294                 | 
05294                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
05294     10 00 00 00 
05298     50 00 00 00 
0529c     14 00 00 00 
052a0     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
052a4     70 00 00 00 
052a8     08 00 00 00 
052ac     30 00 00 00 
052b0     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
052b4     10 00 00 00 
052b8     10 00 00 00 
052bc     00 00 00 00 
052c0     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
052c4     E0 01 00 00 
052c8     F6 32 24 15 
052cc     FB 6C C3 01 
052d0     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
052d4                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
052d4     12 00 00 00 
052d8     30 00 00 00 
052dc     10 00 00 00 
052e0     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
052e4     18 00 00 00 
052e8     08 00 00 00 
052ec     18 00 00 00 
052f0     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
052f4     20 00 00 00 
052f8     18 00 00 00 
052fc     40 00 00 00 
05300     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
05304     F0 01 00 00 
05308     00 D0 12 13 
0530c     FB 0F 00 01 
05310     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
05314     10 00 00 00 
05318     40 00 00 00 
0531c     10 00 00 00 
05320     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
05324     08 00 00 00 
05328     08 00 00 00 
0532c     08 00 00 00 
05330     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
05334     40 00 00 00 
05338     20 00 00 00 
0533c     80 00 00 00 
05340     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
05344     E0 01 00 00 
05348     70 AE E9 10 
0534c     FB 8B FF 01 
05350     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
05354     10 00 00 00 
05358     50 00 00 00 
0535c     14 00 00 00 
05360     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
05364     00 00 00 00 
05368     08 00 00 00 
0536c     00 00 00 00 
05370     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
05374     10 00 00 00 
05378     10 00 00 00 
0537c     C0 00 00 00 
05380     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
05384     40 02 00 00 
05388     F6 32 24 15 
0538c     FB 6C C3 01 
05390     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
05394     50 00 00 00 
05398     A0 00 00 00 
0539c     54 00 00 00 
053a0     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
053a4     08 00 00 00 
053a8     08 00 00 00 
053ac     08 00 00 00 
053b0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
053b4     0C 00 00 00 
053b8     08 00 00 00 
053bc     00 01 00 00 
053c0     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
053c4     E0 01 00 00 
053c8     10 06 56 15 
053cc     FB 64 C3 01 
053d0     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
053d4     50 00 00 00 
053d8     32 00 00 00 
053dc     50 00 00 00 
053e0     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
053e4     08 00 00 00 
053e8     08 00 00 00 
053ec     08 00 00 00 
053f0     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
053f4     0C 00 00 00 
053f8     08 00 00 00 
053fc     40 01 00 00 
05400     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
05404     E0 01 00 00 
05408     F2 CD 33 13 
0540c     FB 53 92 01 
05410     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05414     18 00 00 00 
05418     30 00 00 00 
0541c     18 00 00 00 
05420     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
05424     08 00 00 00 
05428     08 00 00 00 
0542c     08 00 00 00 
05430     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
05434     0C 00 00 00 
05438     08 00 00 00 
0543c     80 01 00 00 
05440     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
05444     E0 01 00 00 
05448     F4 8F 11 11 
0544c     FB 3A 55 01 
05450     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
05454     20 00 00 00 
05458     40 00 00 00 
0545c     22 00 00 00 
05460     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
05464     00 00 00 00 
05468     08 00 00 00 
0546c     00 00 00 00 
05470     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
05474     0C 00 00 00 
05478     08 00 00 00 
0547c     C0 01 00 00 
05480     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
05484     F0 01 00 00 
05488     F2 CD 33 13 
0548c     FB 53 92 01 
05490     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
05494                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
05494     00 75 C7 97 
05498     27 47 F6 0A 
0549c     05 79 CB 9B 
054a0     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
054a4                 | 
054a4     28 12 64 FD | hdmi            setq    #9
054a8     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
054ac                 |            '     setq2   #255
054ac                 |             '    rdlong  $100, paletteptr 
054ac     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
054b0     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
054b4     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
054b8     78 F9 02 F1 |                 add     ii,hbase
054bc     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
054c0     7B 0B 80 FF 
054c4     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
054c8                 | 
054c8     66 66 86 FF 
054cc     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
054d0                 | 
054d0                 | 
054d0                 | ''--------  frame rendering main loop  ---------------------------------------------------
054d0                 | 
054d0                 | p101
054d0     28 14 64 FD |                 setq    #10
054d4     00 DF 06 FB |                 rdlong  framebuf,  ptra
054d8     28 1E 64 FD |                 setq    #15
054dc     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
054e0     71 99 02 FB |                 rdlong  border,borderptr
054e4                 | 
054e4     01 C4 06 F1 |                 add     frames,#1
054e8     76 F5 02 F6 |                 mov     dlptr2,dlptr
054ec                 | 
054ec     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
054f0     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
054f4     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
054f8     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
054fc                 |  '' up porch
054fc                 | 
054fc     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
05500     49 FF 02 F6 |                 mov     hsync1,sync_001
05504     37 A8 46 FB |                 callpa  i_upporch ,#blank
05508     72 01 68 FC |                 wrlong  #0,vblankptr
0550c                 |                 
0550c     1F EA 16 F4 |                 testb   paletteptr,#31 wc
05510     29 FE 65 3D |          if_nc  setq2   #255
05514     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
05518                 | 
05518                 | '' cursor blinking
05518                 | 
05518     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
0551c     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
05520                 | 
05520                 | '' main screen
05520                 | 
05520     00 BE 06 F6 |                 mov linenum,#0
05524     00 18 07 F6 |                 mov rcnt,#0
05528     00 1C 07 F6 |                 mov rcnt2a,#0
0552c                 | 
0552c                 | 
0552c     00 18 0F F2 | p301            cmp rcnt,#0 wz
05530     18 00 90 AD |         if_z    jmp #p306
05534     01 18 87 F1 |                 sub rcnt,#1
05538     90 F7 02 F6 |                 mov dl,rdl
0553c     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
05540     8F F7 02 A1 |    if_z        add dl,roffset  
05544     7B 21 03 F6 |                 mov rdl,dl
05548     04 00 90 FD |                 jmp #p307          
0554c                 |           
0554c                 |                 
0554c     7A F7 02 FB | p306            rdlong  dl,dlptr2
05550     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
05554     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
05558     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
0555c                 | 
0555c                 | '' Special entry:
0555c                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
0555c                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
0555c                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
0555c                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
0555c                 | '' todo: set horizontal scroll (if needed)
0555c                 | 
0555c     02 FA 66 F0 |                 shl framebuf2,#2
05560     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
05564     04 22 0F F2 |                 cmp dlc,#%100 wz
05568                 |   
05568                 |                 
05568     04 F4 06 F1 |                 add dlptr2,#4
0556c     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
05570     7A 21 03 FB |                  rdlong rdl,dlptr2
05574     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
05578     04 18 47 F0 |                  shr rcnt,#4
0557c                 |              
0557c     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
05580     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
05584                 |                 
05584     04 1E 47 F0 |                  shr roffset,#4
05588     0C 1E 67 F0 |                  shl roffset,#12
0558c                 |   
0558c     9C FF 9F FD |                  jmp #p301
05590                 |                  
05590                 |                  
05590                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
05590     0C FA 46 F0 |                 shr     framebuf2,#12
05594     02 FA 66 F0 |                 shl     framebuf2,#2
05598                 | 
05598     7B 03 E3 F8 |                 getbyte t1,dl,#0
0559c     00 02 0F F2 |                 cmp     t1,#0 wz
055a0     34 00 90 AD |     if_z        jmp     #borderline
055a4                 | 
055a4     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
055a8     50 00 90 CD |           if_c   jmp     #textline
055ac     50 02 90 3D |           if_nc  jmp     #graphline
055b0                 | '
055b0     01 BE 06 F1 | p302            add     linenum,#1
055b4     04 F4 06 F1 |                 add     dlptr2,#4
055b8     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
055bc     6C FF 9F 5D |          if_nz  jmp     #p301
055c0                 | 
055c0     72 03 68 FC | p112            wrlong  #1,vblankptr
055c4     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
055c8                 | 
055c8     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
055cc     4B FF 02 F6 |                 mov     hsync1,sync_223
055d0     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
055d4     F8 FE 9F FD |                 jmp     #p101
055d8                 | 
055d8                 | '' ---------------  END of frame rendering loop -------------------------------------------
055d8                 | 
055d8                 | 
055d8     14 00 B0 FD | borderline      call    #hsync                      ' make a border
055dc     4C A1 C2 FC |                 xcont   m_vi,border
055e0     CC FF 9F FD |                 jmp     #p302
055e4                 | 
055e4                 | 
055e4     08 00 B0 FD | blank           call    #hsync                          'blank lines
055e8     7E A1 C2 FC |                 xcont   m_vi,hsync0
055ec     FD ED 6F 0B |         _ret_   djnz    pa,#blank
055f0                 | 
055f0     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
055f4     7F 9D B2 FC |                 xzero   m_sn,hsync1
055f8     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
055fc                 | 
055fc                 | 
055fc                 | 
055fc                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
055fc                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
055fc                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
055fc                 | 
055fc                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
055fc                 | 
055fc     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
05600                 | 
05600     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
05604     7B 17 5B F8 |                 getnib  zoom, dl,#3
05608     03 16 07 F5 |                 and             zoom, #3
0560c                 | 
0560c                 | 
0560c                 | 
0560c     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
05610     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
05614     3F BC 06 F5 |                 and     linestart,#63
05618     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
0561c     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
05620                 | 
05620     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
05624                 | 
05624                 |                        ' if fontline =0, get a border color
05624                 | 
05624     51 03 33 F9 | p102            getword t1,m_border,#0
05628     00 02 0F F2 |                 cmp     t1, #0 wz
0562c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05630                 | 
05630     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
05634     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
05638     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
0563c     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
05640     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
05644     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
05648     52 BB 02 F6 |                 mov m_lut2, m_lut1
0564c     6A BB 02 F1 |                 add m_lut2, lutt1
05650     58 0F 03 F6 |                 mov cpl2,i_cpl
05654                 | 
05654     02 16 0F F2 |                cmp zoom,#2 wz
05658     E4 00 90 AD |           if_z jmp #p420
0565c     01 16 0F F2 |                cmp zoom,#1 wz
05660     64 00 90 AD |           if_z jmp #p410
05664     00 16 0F F2 |                 cmp zoom,#0 wz
05668     04 00 90 AD |           if_z jmp #p400
0566c     50 01 90 FD |                jmp #p430
05670                 | 
05670                 |                    '
05670                 |  ''---------------------------------------------------------------------------------------------------------
05670     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
05674     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
05678     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
0567c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05680     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05684     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
05688     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
0568c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05690     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05694     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
05698                 | 
05698     81 BB C2 FC |                         xcont m_lut2,t1
0569c                 | 
0569c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
056a0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
056a4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
056a8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
056ac     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
056b0     01 C0 86 F1 |                         sub     lutaddr,#1
056b4                 | 
056b4     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
056b8     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
056bc     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
056c0                 | 
056c0     EB 0F 6F FB |                         djnz   cpl2,#p400
056c4     28 01 90 FD |  p401                   jmp    #p103
056c8                 | 
056c8                 | ''------------------------------------------------------------------------------------------------------------
056c8                 | 
056c8     01 0E 47 F0 |  p410                   shr cpl2,#1
056cc                 | 
056cc                 | ''---------------------------------------------------------------------------------------------------------
056cc     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
056d0     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
056d4     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
056d8     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
056dc     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
056e0     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
056e4     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
056e8     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
056ec     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
056f0     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
056f4                 | 
056f4                 | 
056f4     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
056f8     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
056fc     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
05700     03 02 07 FA |                         mul t1,#3
05704     81 BB C2 FC |                         xcont m_lut2,t1
05708     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
0570c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05710     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05714     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
05718     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
0571c     01 C0 86 F1 |                         sub     lutaddr,#1
05720     63 06 63 FD |                         mergew t3
05724     03 06 07 FA |                         mul t3,#3
05728     83 BB C2 FC |                         xcont m_lut2,t3
0572c                 | 
0572c     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
05730     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
05734                 | 
05734     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
05738                 | 
05738     E4 0F 6F FB |                         djnz   cpl2,#p412
0573c     B0 00 90 FD |  p411                   jmp    #p103
05740                 | 
05740                 | ''------------------------------------------------------------------------------------------------------------
05740                 | 
05740     02 0E 47 F0 |  p420                   shr cpl2,#2
05744                 | 
05744                 | ''---------------------------------------------------------------------------------------
05744     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
05748     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
0574c     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
05750     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
05754     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
05758     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
0575c     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
05760     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
05764     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
05768     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
0576c                 | 
0576c     61 02 63 FD |                         mergeb t1
05770     81 07 3B F9 |                         getword t3,t1,#1
05774     0F 02 07 FA |                         mul t1,#15
05778     81 BB C2 FC |                         xcont m_lut2,t1
0577c                 | 
0577c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
05780     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
05784     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
05788     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
0578c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
05790     01 C0 86 F1 |                         sub     lutaddr,#1
05794                 | 
05794     81 09 EB F8 |                         getbyte t4,t1,#1        '
05798     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
0579c                 | 
0579c     0F 06 07 FA |                         mul t3,#15
057a0     83 BB C2 FC |                         xcont m_lut2,t3
057a4                 | 
057a4     83 0B EB F8 |                         getbyte t5,t3,#1
057a8     85 BB C2 FC |                         xcont m_lut2, t5
057ac     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
057b0     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
057b4                 | 
057b4     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
057b8                 | 
057b8     E2 0F 6F FB |                         djnz   cpl2,#p422
057bc     30 00 90 FD |  p421                   jmp    #p103
057c0                 | 
057c0                 | '--------------------------------------------------------------------------------------------------------------
057c0                 | 
057c0     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
057c4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
057c8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
057cc                 | 
057cc     00 BA C6 FC |                         xcont m_lut2,#0
057d0                 | 
057d0     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
057d4     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
057d8     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
057dc     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
057e0     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
057e4     01 C0 86 F1 |                         sub     lutaddr,#1
057e8                 | 
057e8     F5 0F 6F FB |                         djnz   cpl2,#p430
057ec     00 00 90 FD |  p431                   jmp    #p103
057f0                 | 
057f0                 | ''------------------------------------------------------------------------------------------------------------
057f0                 | 
057f0                 | 
057f0                 | 
057f0     51 25 33 F9 | p103            getword  mb2,m_border,#0
057f4     00 24 0F F2 |                 cmp      mb2, #0 wz
057f8     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
057fc                 | 
057fc     B0 FD 9F FD |                 jmp #p302
05800                 | 
05800                 | '' -------------------------------------- END of text line ---------------------------------
05800                 | 
05800                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
05800                 | 
05800     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
05804                 | 
05804                 | 
05804     51 25 33 F9 | p202            getword mb2,m_border,#0
05808     00 24 0F F2 |                 cmp     mb2, #0 wz
0580c     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
05810                 | 
05810                 | '----------------------------------------- display pixels
05810                 | 
05810     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
05814     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
05818                 | 
05818     7B 17 5B F8 |                 getnib  zoom, dl,#3
0581c     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
05820                 | 
05820     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
05824     0C BC 06 F5 |                 and     colordepth,#12
05828                 | 
05828     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
0582c     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
05830     64 00 90 AD |           if_z  jmp     #p240
05834                 | 
05834     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
05838     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
0583c     98 00 90 AD |           if_z  jmp     #p250
05840                 | 
05840     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
05844     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
05848     FC 00 90 AD |           if_z  jmp     #p260
0584c                 | 
0584c     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
05850                 | 
05850                 | '' --- 8 bit color modes
05850                 | 
05850     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
05854     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
05858                 | 
05858     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
0585c     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
05860                 |        
05860                 |  '  
05860     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
05864     25 0C 07 A6 |                 if_z mov skippattern,#%100101
05868                 |     
05868                 |  
05868     05 0C 07 56 |                 if_nz mov skippattern,#%000101
0586c     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
05870                 |         
05870                 | 
05870                 |         
05870     7D 11 03 FB | p235               rdlong  char,framebuf2
05874     32 0C 63 FD |                    skipf skippattern
05878     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
0587c     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
05880     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
05884     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
05888     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
0588c     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
05890     F7 0F 6F FB |                    djnz    cpl2,#p235
05894                 | 
05894     20 01 90 FD |                jmp    #p203
05898                 |                   
05898                 | 
05898                 | 
05898                 | '' --- 1 bit color modes
05898                 | 
05898     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
0589c     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
058a0                 | 
058a0     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
058a4     13 0C 07 A6 |        if_z   mov skippattern,#%10011
058a8     08 0C 07 56 |        if_nz  mov skippattern,#%01000
058ac                 | 
058ac                 | 
058ac     7D 11 E3 FA | p241               rdword  char,framebuf2
058b0     44 10 FF F9 |                    movbyts char,#%01000100
058b4     63 10 63 FD |                    mergew  char
058b8     32 0C 63 FD |                    skipf skippattern
058bc     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
058c0     63 10 63 FD |                    mergew  char                    ' 1 0
058c4     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
058c8     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
058cc     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
058d0     F6 0F 6F FB |                    djnz   cpl2,#p241
058d4                 | 
058d4                 | 
058d4     E0 00 90 FD |                jmp    #p203
058d8                 | 
058d8                 | '' --- 2 bit color modes
058d8                 | 
058d8     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
058dc     C8 00 90 AD |        if_z   jmp #p251
058e0                 | 
058e0     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
058e4     30 00 90 AD |        if_z   jmp #p252
058e8                 | 
058e8                 | 
058e8     7D 11 C3 FA | p254               rdbyte char,framebuf2
058ec     04 0A 07 F6 |                    mov  t5,#4
058f0     02 10 67 F0 | p255               shl  char,#2
058f4     88 03 53 F8 |                    getnib  t1,char,#2
058f8     03 02 07 F5 |                    and     t1,#3
058fc     55 02 07 FA |                    mul     t1,#$55
05900     81 05 03 F9 |                    rolbyte  t2,t1,#0
05904     FA 0B 6F FB |                    djnz    t5,#p255
05908     82 BB C2 FC |                    xcont   m_lut2,t2
0590c     01 FA 06 F1 |                    add     framebuf2,#1
05910     F5 0F 6F FB |                    djnz    cpl2,#p254
05914     A0 00 90 FD |                    jmp     #p203
05918                 | 
05918     7D 11 E3 FA | p252               rdword char,framebuf2
0591c     08 0A 07 F6 |                    mov  t5,#8
05920     02 10 67 F0 | p253               shl  char,#2
05924     88 03 63 F8 |                    getnib  t1,char,#4
05928     03 02 07 F5 |                    and     t1,#3
0592c     05 02 07 FA |                    mul     t1,#5
05930     81 05 83 F8 |                    rolnib  t2,t1,#0
05934     FA 0B 6F FB |                    djnz    t5,#p253
05938     82 BB C2 FC |                    xcont   m_lut2,t2
0593c     02 FA 06 F1 |                    add     framebuf2,#2
05940     F5 0F 6F FB |                    djnz    cpl2,#p252
05944     70 00 90 FD |                    jmp     #p203
05948                 | 
05948                 | '' ------ 4 bit color modes
05948                 | 
05948     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
0594c     58 00 90 AD |        if_z   jmp #p251
05950                 | 
05950     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
05954     2C 00 90 AD |        if_z   jmp #p262
05958                 | 
05958                 | 
05958     7D 11 C3 FA | p263               rdbyte char,framebuf2
0595c     02 0A DC FC |                            rep #5,#2
05960     88 05 8B F8 |                              rolnib t2,char,#1
05964     88 05 8B F8 |                                  rolnib t2,char,#1
05968     88 05 8B F8 |                              rolnib t2,char,#1
0596c     88 05 8B F8 |                                  rolnib t2,char,#1
05970     04 10 67 F0 |                              shl char,#4
05974     82 BB C2 FC |                    xcont   m_lut2,t2
05978     01 FA 06 F1 |                    add     framebuf2,#1
0597c     F6 0F 6F FB |                    djnz    cpl2,#p263
05980     34 00 90 FD |                    jmp     #p203
05984                 | 
05984     7D 11 E3 FA | p262               rdword  char,framebuf2
05988     04 06 DC FC |                            rep #3,#4
0598c     88 05 9B F8 |                              rolnib t2,char,#3
05990     88 05 9B F8 |                                  rolnib t2,char,#3
05994     04 10 67 F0 |                              shl char,#4
05998     82 BB C2 FC |                    xcont   m_lut2,t2
0599c     02 FA 06 F1 |                    add     framebuf2,#2
059a0     F8 0F 6F FB |                    djnz    cpl2,#p262
059a4     10 00 90 FD |                    jmp     #p203
059a8                 | 
059a8                 | ''---------- all color modes without zoom
059a8                 | 
059a8     87 07 D8 FC | p251               rep  #3,cpl2
059ac     7D 11 03 FB |                    rdlong  char,framebuf2
059b0     04 FA 06 F1 |                    add     framebuf2,#4
059b4     88 BB C2 FC |                    xcont   m_lut2,char
059b8                 |           
059b8                 |  ''-----------------------------------------------------------------------------------------
059b8                 | p203           ' getword  mb2,m_border,#0
059b8     00 24 0F F2 |                 cmp      mb2, #0 wz
059bc     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
059c0                 | 
059c0     EC FB 9F FD |                 jmp #p302
059c4                 | 
059c4                 | '' -------------------------------------- END of graph  line ---------------------------------
059c4                 | 
059c4                 | '' consts and vars
059c4                 | 
059c4     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
059c8     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
059cc     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
059d0     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
059d4                 | 
059d4     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
059d8                 | 
059d8                 | '------ these longs will be set by setmode function
059d8                 | 
059d8     00 00 00 00 | m_bs            long    0        'blanks before sync
059dc     00 00 00 00 | m_sn            long    0        'sync
059e0     00 00 00 00 | m_bv            long    0        'blanks before visible
059e4     00 00 00 00 | m_vi            long    0        'visible pixels #
059e8     00 00 00 00 | m_border        long    0        'left/right borders
059ec     00 00 00 00 | m_lut1          long    0        'characters
059f0     00 00 00 00 | i_vborder       long    0        'up/down borders
059f4     00 00 00 00 | i_upporch       long    0        'up porch lines
059f8     00 00 00 00 | i_vsync         long    0        'vsync lines
059fc     00 00 00 00 | i_downporch     long    0        'down porch lines
05a00     00 00 00 00 | i_modenum       long    0        'mode #
05a04     00 00 00 00 | i_cpl           long    0        'chars/longs per line
05a08     00 00 00 00 | i_lines         long    0        'scanlines #
05a0c     00 00 00 00 | i_clock         long    0
05a10     00 00 00 00 | i_hubset        long    0
05a14     00 00 00 00 | i_totalvis      long    0
05a18                 | 
05a18                 | '-------------------------------------
05a18                 | 
05a18     00 00 00 00 | m_lut2          long    0
05a1c                 | 
05a1c                 | colordepth
05a1c     00 00 00 00 | linestart       long    0
05a20     00 00 00 00 | linenum         long    0
05a24     00 01 00 00 | lutaddr         long    256
05a28                 | 
05a28     0E 00 00 00 | cursorsh        long    14
05a2c     00 00 00 00 | frames          long    0
05a30     00 00 00 00 | cursorx         long    0
05a34     00 00 00 00 | cursory         long    0
05a38     00 00 00 00 | cursorpos       long    0
05a3c     00 00 00 00 | cursorpos2      long    0
05a40     00 00 00 00 | fontstart       long    0
05a44     00 00 00 00 | border2         long 0
05a48     00 00 81 70 | lutiv           long $70810000
05a4c     00 00 88 00 | lutt1           long $00880000
05a50     00 00 80 00 | lutg1           long $00800000
05a54     00 00 80 10 | lutg2           long $10800000
05a58     00 00 80 20 | lutg4           long $20800000
05a5c     00 00 80 30 | lutg8           long $30800000
05a60     00 00 00 00 | framebuf        long 0
05a64     00 00 00 00 | fontbuf         long 0
05a68     00 00 00 00 | borderptr       long 0
05a6c     00 00 00 00 | vblankptr       long 0
05a70     00 00 00 00 | cursorptr       long 0
05a74     00 00 00 00 | modeptr         long 0
05a78     00 00 00 00 | paletteptr      long 0
05a7c     00 00 00 00 | dlptr           long 0
05a80                 | fontnumptr      res     1
05a80                 | fontnumptr      res     1
05a80                 | hbase           res     1
05a80                 | hbase           res     1
05a80                 | borderptr2      res     1
05a80                 | borderptr2      res     1
05a80                 | dlptr2 res 1
05a80                 | dlptr2 res 1
05a80                 | dl              res 1
05a80                 | dl              res 1
05a80                 | ii              res     1
05a80                 | ii              res     1
05a80                 | framebuf2       res     1
05a80                 | framebuf2       res     1
05a80                 | hsync0          res     1
05a80                 | hsync0          res     1
05a80                 | hsync1          res     1
05a80                 | hsync1          res     1
05a80                 | fontline        res     1
05a80                 | fontline        res     1
05a80                 | t1              res     1
05a80                 | t1              res     1
05a80                 | t2              res     1
05a80                 | t2              res     1
05a80                 | t3 res 1
05a80                 | t3 res 1
05a80                 | t4 res 1
05a80                 | t4 res 1
05a80                 | t5 res 1
05a80                 | t5 res 1
05a80                 | skippattern res 1
05a80                 | skippattern res 1
05a80                 | cpl2 res 1
05a80                 | cpl2 res 1
05a80                 | char            res     1
05a80                 | char            res     1
05a80                 | backcolor       res     1
05a80                 | backcolor       res     1
05a80                 | charcolor       res     1
05a80                 | charcolor       res     1
05a80                 | zoom res 1
05a80                 | zoom res 1
05a80     00 00 00 00 | rcnt long 0 'dl repeat count
05a84     00 00 00 00 | rcnt2 long 0
05a88     00 00 00 00 | rcnt2a long 0
05a8c     00 00 00 00 | roffset long 0
05a90     00 00 00 00 | rdl long 0  'dl repeat line
05a94     00 00 00 00 | dlc long 0 'dl command
05a98     00 00 00 00 | mb2 long 0
05a9c     00 00 00 00 | aend             long 0
05aa0                 |                 fit     496                     '
05aa0                 | __system__dat_
05aa0     00 00 00 00 
05aa4     00 00 00 00 | 	byte	$00[8]
05aa8     03 00 00 00 
05aac     00 00 00 00 
05ab0     00 00 00 00 
05ab4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05ab8                 | __heap_base
05ab8     00 00 00 00 
      ...             
06ab8     00 00 00 00 
06abc     00 00 00 00 | 	long	0[1026]
06ac0                 | objmem
06ac0     00 00 00 00 | 	long	0[1]
06ac4 0e6             | 	org	COG_BSS_START
06ac4 0e6             | _var01
06ac4 0e6             | 	res	1
06ac4 0e7             | _var02
06ac4 0e7             | 	res	1
06ac4 0e8             | _var03
06ac4 0e8             | 	res	1
06ac4 0e9             | _var04
06ac4 0e9             | 	res	1
06ac4 0ea             | _var05
06ac4 0ea             | 	res	1
06ac4 0eb             | _var06
06ac4 0eb             | 	res	1
06ac4 0ec             | _var07
06ac4 0ec             | 	res	1
06ac4 0ed             | _var08
06ac4 0ed             | 	res	1
06ac4 0ee             | _var09
06ac4 0ee             | 	res	1
06ac4 0ef             | _var10
06ac4 0ef             | 	res	1
06ac4 0f0             | _var11
06ac4 0f0             | 	res	1
06ac4 0f1             | _var12
06ac4 0f1             | 	res	1
06ac4 0f2             | _var13
06ac4 0f2             | 	res	1
06ac4 0f3             | _var14
06ac4 0f3             | 	res	1
06ac4 0f4             | _var15
06ac4 0f4             | 	res	1
06ac4 0f5             | _var16
06ac4 0f5             | 	res	1
06ac4 0f6             | _var17
06ac4 0f6             | 	res	1
06ac4 0f7             | _var18
06ac4 0f7             | 	res	1
06ac4 0f8             | _var19
06ac4 0f8             | 	res	1
06ac4 0f9             | _var20
06ac4 0f9             | 	res	1
06ac4 0fa             | _var21
06ac4 0fa             | 	res	1
06ac4 0fb             | _var22
06ac4 0fb             | 	res	1
06ac4 0fc             | _var23
06ac4 0fc             | 	res	1
06ac4 0fd             | _var24
06ac4 0fd             | 	res	1
06ac4 0fe             | _var25
06ac4 0fe             | 	res	1
06ac4 0ff             | _var26
06ac4 0ff             | 	res	1
06ac4 100             | _var27
06ac4 100             | 	res	1
06ac4 101             | _var28
06ac4 101             | 	res	1
06ac4 102             | _var29
06ac4 102             | 	res	1
06ac4 103             | _var30
06ac4 103             | 	res	1
06ac4 104             | _var31
06ac4 104             | 	res	1
06ac4 105             | _var32
06ac4 105             | 	res	1
06ac4 106             | _var33
06ac4 106             | 	res	1
06ac4 107             | _var34
06ac4 107             | 	res	1
06ac4 108             | _var35
06ac4 108             | 	res	1
06ac4 109             | _var36
06ac4 109             | 	res	1
06ac4 10a             | _var37
06ac4 10a             | 	res	1
06ac4 10b             | _var38
06ac4 10b             | 	res	1
06ac4 10c             | _var39
06ac4 10c             | 	res	1
06ac4 10d             | _var40
06ac4 10d             | 	res	1
06ac4 10e             | _var41
06ac4 10e             | 	res	1
06ac4 10f             | _var42
06ac4 10f             | 	res	1
06ac4 110             | _var43
06ac4 110             | 	res	1
06ac4 111             | _var44
06ac4 111             | 	res	1
06ac4 112             | _var45
06ac4 112             | 	res	1
06ac4 113             | _var46
06ac4 113             | 	res	1
06ac4 114             | _var47
06ac4 114             | 	res	1
06ac4 115             | arg01
06ac4 115             | 	res	1
06ac4 116             | arg02
06ac4 116             | 	res	1
06ac4 117             | arg03
06ac4 117             | 	res	1
06ac4 118             | arg04
06ac4 118             | 	res	1
06ac4 119             | arg05
06ac4 119             | 	res	1
06ac4 11a             | local01
06ac4 11a             | 	res	1
06ac4 11b             | local02
06ac4 11b             | 	res	1
06ac4 11c             | local03
06ac4 11c             | 	res	1
06ac4 11d             | local04
06ac4 11d             | 	res	1
06ac4 11e             | local05
06ac4 11e             | 	res	1
06ac4 11f             | local06
06ac4 11f             | 	res	1
06ac4 120             | local07
06ac4 120             | 	res	1
06ac4 121             | local08
06ac4 121             | 	res	1
06ac4 122             | local09
06ac4 122             | 	res	1
06ac4 123             | local10
06ac4 123             | 	res	1
06ac4 124             | local11
06ac4 124             | 	res	1
06ac4 125             | local12
06ac4 125             | 	res	1
06ac4 126             | local13
06ac4 126             | 	res	1
06ac4 127             | local14
06ac4 127             | 	res	1
06ac4 128             | local15
06ac4 128             | 	res	1
06ac4 129             | local16
06ac4 129             | 	res	1
06ac4 12a             | local17
06ac4 12a             | 	res	1
06ac4 12b             | local18
06ac4 12b             | 	res	1
06ac4 12c             | local19
06ac4 12c             | 	res	1
06ac4 12d             | local20
06ac4 12d             | 	res	1
06ac4 12e             | local21
06ac4 12e             | 	res	1
06ac4 12f             | local22
06ac4 12f             | 	res	1
06ac4 130             | local23
06ac4 130             | 	res	1
06ac4 131             | local24
06ac4 131             | 	res	1
06ac4 132             | local25
06ac4 132             | 	res	1
06ac4 133             | local26
06ac4 133             | 	res	1
06ac4 134             | local27
06ac4 134             | 	res	1
06ac4 135             | local28
06ac4 135             | 	res	1
06ac4 136             | local29
06ac4 136             | 	res	1
06ac4 137             | local30
06ac4 137             | 	res	1
06ac4 138             | local31
06ac4 138             | 	res	1
06ac4 139             | local32
06ac4 139             | 	res	1
06ac4 13a             | local33
06ac4 13a             | 	res	1
06ac4 13b             | muldiva_
06ac4 13b             | 	res	1
06ac4 13c             | muldivb_
06ac4 13c             | 	res	1
06ac4 13d             | 	fit	480
06ac4 13d             | 
