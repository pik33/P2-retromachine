00000                 | 
00000                 | #line 1 "/home/pik33/P2-Retromachine/Propeller/Tracker player/player3.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 18 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 0B F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 B0 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5E 62 FD | 	cogid	arg01
00614 084 03 5E 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 FB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 19 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5F 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 61 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 63 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 65 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 18 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 62 56 F0 |         shr	arg03, #1 wc
00688 0a1 2F 61 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5E 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 60 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 62 56 F0 |         shr	arg03, #1 wc
00698 0a5 2F 61 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5E 06 C1 |  if_c   add	arg01, #2
006a0 0a7 30 61 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2F 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 62 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 31 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 60 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 6D 66 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F 6D 06 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 4D 99 12 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 9A 62 FD |        getqx   muldivb_
00718 0c5 19 98 62 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 4C 99 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 F8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 4D 9B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 F8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 F8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd 4C 99 82 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 F8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf 4D 9B 82 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | __pc long 0
00744 0d0 00 00 00 00 
00748 0d1             | __setjmp
00748 0d1 2B A0 61 FD |     pop __pc
0074c 0d2 00 18 06 F6 |     mov result1, #0
00750 0d3 00 1A 06 F6 |     mov result2, #0
00754 0d4 2F F3 01 F6 |     mov abortchain, arg01
00758 0d5 2F 5F 61 FC |     wrlong fp, arg01
0075c 0d6 04 5E 06 F1 |     add arg01, #4
00760 0d7 2F F1 63 FC |     wrlong ptra, arg01
00764 0d8 04 5E 06 F1 |     add arg01, #4
00768 0d9 2F FB 61 FC |     wrlong objptr, arg01
0076c 0da 04 5E 06 F1 |     add arg01, #4
00770 0db 2F A1 61 FC |     wrlong __pc, arg01
00774 0dc 2C A0 61 FD |     jmp __pc
00778 0dd             | __unwind_pc long 0
00778 0dd 00 00 00 00 
0077c 0de             | __unwind_stack
0077c 0de 2B BA 61 FD |    pop  __unwind_pc
00780 0df             | __unwind_loop
00780 0df 30 5F 0A F2 |    cmp  arg01, arg02 wz
00784 0e0 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00788 0e1 2F F1 03 F6 |    mov   ptra, arg01
0078c 0e2 5C FF BF FD |    call  #popregs_
00790 0e3 AF 5E 02 F6 |    mov   arg01, fp
00794 0e4 E8 FF 9F FD |    jmp   #__unwind_loop
00798 0e5             | __unwind_stack_ret
00798 0e5 2C BA 61 FD |    jmp  __unwind_pc
0079c 0e6             | __longjmp
0079c 0e6 2B A0 61 FD |     pop __pc
007a0 0e7 00 5E 0E F2 |     cmp    arg01, #0 wz
007a4 0e8 30 00 90 AD |  if_z jmp #nocatch
007a8 0e9 30 19 02 F6 |     mov result1, arg02
007ac 0ea 01 1A 06 F6 |     mov result2, #1
007b0 0eb 2F 61 02 FB |     rdlong arg02, arg01
007b4 0ec 04 5E 06 F1 |     add arg01, #4
007b8 0ed 2F F1 03 FB |     rdlong ptra, arg01
007bc 0ee 04 5E 06 F1 |     add arg01, #4
007c0 0ef 2F FB 01 FB |     rdlong objptr, arg01
007c4 0f0 04 5E 06 F1 |     add arg01, #4
007c8 0f1 2F A1 01 FB |     rdlong __pc, arg01
007cc 0f2 AF 5E 02 F6 |     mov arg01, fp
007d0 0f3 A8 FF BF FD |     call #__unwind_stack
007d4 0f4             | __longjmp_ret
007d4 0f4 2C A0 61 FD |     jmp  __pc
007d8 0f5             | nocatch
007d8 0f5 00 62 0E F2 |     cmp arg03, #0 wz
007dc 0f6 28 FE 9F AD |  if_z jmp #cogexit
007e0 0f7 F0 FF 9F FD |     jmp #__longjmp_ret
007e4 0f8             | 
007e4 0f8             | __heap_ptr
007e4 0f8 E4 C0 01 00 | 	long	@__heap_base
007e8 0f9             | abortchain
007e8 0f9 00 00 00 00 | 	long	0
007ec 0fa             | entryptr__
007ec 0fa 04 04 00 00 | 	long	@entry
007f0 0fb             | itmp1_
007f0 0fb 00 00 00 00 | 	long	0
007f4 0fc             | itmp2_
007f4 0fc 00 00 00 00 | 	long	0
007f8 0fd             | objptr
007f8 0fd EC D0 01 00 | 	long	@objmem
007fc 0fe             | ptr___struct___bas_wrap_sender_tx_
007fc 0fe 88 84 00 00 | 	long	@__struct___bas_wrap_sender_tx
00800 0ff             | ptr___struct__s_vfs_file_t_putchar_
00800 0ff D0 83 00 00 | 	long	@__struct__s_vfs_file_t_putchar
00804 100             | ptr___system__dat__
00804 100 80 BE 01 00 | 	long	@__system__dat_
00808 101             | ptr__audio019_spin2_dat__
00808 101 70 B3 01 00 | 	long	@_audio019_spin2_dat_
0080c 102             | ptr__dat__
0080c 102 AC 85 00 00 | 	long	@_dat_
00810 103             | ptr__hng030rm_spin2_dat__
00810 103 E8 7D 01 00 | 	long	@_hng030rm_spin2_dat_
00814 104             | ptr__hng030rm_spin2_putchar_
00814 104 EC 23 00 00 | 	long	@_hng030rm_spin2_putchar
00818 105             | ptr__hng030rm_spin2_putpixel1_
00818 105 F8 1D 00 00 | 	long	@_hng030rm_spin2_putpixel1
0081c 106             | ptr__hng030rm_spin2_putpixel2_
0081c 106 E4 1E 00 00 | 	long	@_hng030rm_spin2_putpixel2
00820 107             | ptr__hng030rm_spin2_putpixel4_
00820 107 D0 1F 00 00 | 	long	@_hng030rm_spin2_putpixel4
00824 108             | ptr__hng030rm_spin2_putpixel8_
00824 108 BC 20 00 00 | 	long	@_hng030rm_spin2_putpixel8
00828 109             | ptr__retrocog_spin2_serialcog_
00828 109 2C 35 00 00 | 	long	@_retrocog_spin2_serialcog
0082c 10a             | ptr__trackerplayer_spin2_dat__
0082c 10a 4C A2 01 00 | 	long	@_trackerplayer_spin2_dat_
00830 10b             | ptr_stackspace_
00830 10b 94 E2 01 00 | 	long	@stackspace
00834 10c             | result1
00834 10c 00 00 00 00 | 	long	0
00838 10d             | result2
00838 10d 00 00 00 00 | 	long	0
0083c 10e             | result3
0083c 10e 00 00 00 00 | 	long	0
00840 10f             | COG_BSS_START
00840 10f             | 	fit	480
00840                 | 	orgh
00840                 | hubentry
00840                 | 
00840                 | ' 
00840                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00840                 | _startvideo
00840     F0 2A B0 FD | 	call	#_hng030rm_spin2_start
00844     00 5E 06 F6 | 	mov	arg01, #0
00848     00 60 06 F6 | 	mov	arg02, #0
0084c     00 62 06 F6 | 	mov	arg03, #0
00850     60 19 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00854                 | ' v030.start(mode,pin)
00854                 | ' v030.setbordercolor(0,0,0)
00854                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00854     FD 5E 02 F6 | 	mov	arg01, objptr
00858     04 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
0085c     9C 59 B0 FD | 	call	#__system___make_methodptr
00860     00 1C 06 F6 | 	mov	result3, #0
00864     00 1A 06 F6 | 	mov	result2, #0
00868     0C 61 02 F6 | 	mov	arg02, result1
0086c     00 62 06 F6 | 	mov	arg03, #0
00870     00 64 06 F6 | 	mov	arg04, #0
00874     00 5E 06 F6 | 	mov	arg01, #0
00878     5C 5C B0 FD | 	call	#__system___basic_open
0087c     00 18 06 F6 | 	mov	result1, #0
00880                 | _startvideo_ret
00880     2D 00 64 FD | 	ret
00884                 | 
00884                 | ' 
00884                 | ' function addr(byref v as any)
00884                 | _addr
00884     00 5A 05 F6 | 	mov	COUNT_, #0
00888     B0 00 A0 FD | 	call	#pushregs_
0088c     08 F0 07 F1 | 	add	ptra, #8
00890     04 5E 05 F1 | 	add	fp, #4
00894     AF 5E 62 FC | 	wrlong	arg01, fp
00898                 | ' 
00898                 | ' return(cast(ulong,@v))
00898     2F 19 02 F6 | 	mov	result1, arg01
0089c     04 5E 85 F1 | 	sub	fp, #4
008a0     AF F0 03 F6 | 	mov	ptra, fp
008a4     BA 00 A0 FD | 	call	#popregs_
008a8                 | _addr_ret
008a8     2D 00 64 FD | 	ret
008ac                 | 
008ac                 | ' 
008ac                 | ' '0 - samplestart   - a pointer to the sample start
008ac                 | ' '1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
008ac                 | ' '2 - loopstart     - loop start
008ac                 | ' '3 - loopend       - loop end, has to be >=loopstart+2
008ac                 | ' '4 - volume        - sample volume, 16384=1
008ac                 | ' '5 - pan           - 0..16384
008ac                 | ' '6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
008ac                 | ' '7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
008ac                 | ' '8 - cmd 
008ac                 | ' 
008ac                 | ' 
008ac                 | ' sub test 
008ac                 | _test
008ac     01 5A 05 F6 | 	mov	COUNT_, #1
008b0     B0 00 A0 FD | 	call	#pushregs_
008b4     1D 60 06 F6 | 	mov	arg02, #29
008b8                 | ' 
008b8                 | ' ''---------- Set the (x,y) position of cursor
008b8                 | ' 
008b8                 | ' cursor_x:=x
008b8     34 FA 05 F1 | 	add	objptr, #52
008bc     FD 0A 48 FC | 	wrbyte	#5, objptr
008c0                 | ' cursor_y:=y
008c0     01 FA 05 F1 | 	add	objptr, #1
008c4     FD 3A 48 FC | 	wrbyte	#29, objptr
008c8     07 00 00 FF 
008cc     42 FA 05 F1 | 	add	objptr, ##3650
008d0     FD 6C C2 FA | 	rdbyte	local01, objptr
008d4     02 6C 66 F0 | 	shl	local01, #2
008d8     01 00 00 FF 
008dc     65 FA 05 F1 | 	add	objptr, ##613
008e0     FD 6C 02 F1 | 	add	local01, objptr
008e4     36 5F 02 FB | 	rdlong	arg01, local01
008e8     08 00 00 FF 
008ec     DC FA 85 F1 | 	sub	objptr, ##4316
008f0     84 1C B0 FD | 	call	#_hng030rm_spin2_write
008f4     08 00 00 FF 
008f8     68 FB 05 F1 | 	add	objptr, ##4456
008fc     FD 5E 02 FB | 	rdlong	arg01, objptr
00900     08 00 00 FF 
00904     68 FB 85 F1 | 	sub	objptr, ##4456
00908     6C 1C B0 FD | 	call	#_hng030rm_spin2_write
0090c                 | ' 
0090c                 | ' ''---------- Set the (x,y) position of cursor
0090c                 | ' 
0090c                 | ' cursor_x:=x
0090c     34 FA 05 F1 | 	add	objptr, #52
00910     FD 02 48 FC | 	wrbyte	#1, objptr
00914                 | ' cursor_y:=y
00914     01 FA 05 F1 | 	add	objptr, #1
00918     FD 3A 48 FC | 	wrbyte	#29, objptr
0091c     07 00 00 FF 
00920     6A FA 05 F1 | 	add	objptr, ##3690
00924     FD 5E 02 FB | 	rdlong	arg01, objptr
00928     10 FA 05 F1 | 	add	objptr, #16
0092c     FD 6C 02 FB | 	rdlong	local01, objptr
00930     07 00 00 FF 
00934     AF FA 85 F1 | 	sub	objptr, ##3759
00938     36 5F 02 F1 | 	add	arg01, local01
0093c     03 60 06 F6 | 	mov	arg02, #3
00940     5C 1F B0 FD | 	call	#_hng030rm_spin2_inttostr2
00944     0C 5F 02 F6 | 	mov	arg01, result1
00948     2C 1C B0 FD | 	call	#_hng030rm_spin2_write
0094c     1D 60 06 F6 | 	mov	arg02, #29
00950                 | ' 
00950                 | ' ''---------- Set the (x,y) position of cursor
00950                 | ' 
00950                 | ' cursor_x:=x
00950     34 FA 05 F1 | 	add	objptr, #52
00954     FD 40 48 FC | 	wrbyte	#32, objptr
00958                 | ' cursor_y:=y
00958     01 FA 05 F1 | 	add	objptr, #1
0095c     FD 3A 48 FC | 	wrbyte	#29, objptr
00960     07 00 00 FF 
00964     43 FA 05 F1 | 	add	objptr, ##3651
00968     FD 6C C2 FA | 	rdbyte	local01, objptr
0096c     02 6C 66 F0 | 	shl	local01, #2
00970     01 00 00 FF 
00974     64 FA 05 F1 | 	add	objptr, ##612
00978     FD 6C 02 F1 | 	add	local01, objptr
0097c     36 5F 02 FB | 	rdlong	arg01, local01
00980     08 00 00 FF 
00984     DC FA 85 F1 | 	sub	objptr, ##4316
00988     EC 1B B0 FD | 	call	#_hng030rm_spin2_write
0098c     08 00 00 FF 
00990     68 FB 05 F1 | 	add	objptr, ##4456
00994     FD 5E 02 FB | 	rdlong	arg01, objptr
00998     08 00 00 FF 
0099c     68 FB 85 F1 | 	sub	objptr, ##4456
009a0     D4 1B B0 FD | 	call	#_hng030rm_spin2_write
009a4                 | ' 
009a4                 | ' ''---------- Set the (x,y) position of cursor
009a4                 | ' 
009a4                 | ' cursor_x:=x
009a4     34 FA 05 F1 | 	add	objptr, #52
009a8     FD 38 48 FC | 	wrbyte	#28, objptr
009ac                 | ' cursor_y:=y
009ac     01 FA 05 F1 | 	add	objptr, #1
009b0     FD 3A 48 FC | 	wrbyte	#29, objptr
009b4     07 00 00 FF 
009b8     6E FA 05 F1 | 	add	objptr, ##3694
009bc     FD 5E 02 FB | 	rdlong	arg01, objptr
009c0     10 FA 05 F1 | 	add	objptr, #16
009c4     FD 6C 02 FB | 	rdlong	local01, objptr
009c8     07 00 00 FF 
009cc     B3 FA 85 F1 | 	sub	objptr, ##3763
009d0     36 5F 02 F1 | 	add	arg01, local01
009d4     03 60 06 F6 | 	mov	arg02, #3
009d8     C4 1E B0 FD | 	call	#_hng030rm_spin2_inttostr2
009dc     0C 5F 02 F6 | 	mov	arg01, result1
009e0     94 1B B0 FD | 	call	#_hng030rm_spin2_write
009e4     1D 60 06 F6 | 	mov	arg02, #29
009e8                 | ' 
009e8                 | ' ''---------- Set the (x,y) position of cursor
009e8                 | ' 
009e8                 | ' cursor_x:=x
009e8     34 FA 05 F1 | 	add	objptr, #52
009ec     FD 78 48 FC | 	wrbyte	#60, objptr
009f0                 | ' cursor_y:=y
009f0     01 FA 05 F1 | 	add	objptr, #1
009f4     FD 3A 48 FC | 	wrbyte	#29, objptr
009f8     07 00 00 FF 
009fc     44 FA 05 F1 | 	add	objptr, ##3652
00a00     FD 6C C2 FA | 	rdbyte	local01, objptr
00a04     02 6C 66 F0 | 	shl	local01, #2
00a08     01 00 00 FF 
00a0c     63 FA 05 F1 | 	add	objptr, ##611
00a10     FD 6C 02 F1 | 	add	local01, objptr
00a14     36 5F 02 FB | 	rdlong	arg01, local01
00a18     08 00 00 FF 
00a1c     DC FA 85 F1 | 	sub	objptr, ##4316
00a20     54 1B B0 FD | 	call	#_hng030rm_spin2_write
00a24     08 00 00 FF 
00a28     68 FB 05 F1 | 	add	objptr, ##4456
00a2c     FD 5E 02 FB | 	rdlong	arg01, objptr
00a30     08 00 00 FF 
00a34     68 FB 85 F1 | 	sub	objptr, ##4456
00a38     3C 1B B0 FD | 	call	#_hng030rm_spin2_write
00a3c                 | ' 
00a3c                 | ' ''---------- Set the (x,y) position of cursor
00a3c                 | ' 
00a3c                 | ' cursor_x:=x
00a3c     34 FA 05 F1 | 	add	objptr, #52
00a40     FD 70 48 FC | 	wrbyte	#56, objptr
00a44                 | ' cursor_y:=y
00a44     01 FA 05 F1 | 	add	objptr, #1
00a48     FD 3A 48 FC | 	wrbyte	#29, objptr
00a4c     07 00 00 FF 
00a50     72 FA 05 F1 | 	add	objptr, ##3698
00a54     FD 5E 02 FB | 	rdlong	arg01, objptr
00a58     10 FA 05 F1 | 	add	objptr, #16
00a5c     FD 6C 02 FB | 	rdlong	local01, objptr
00a60     07 00 00 FF 
00a64     B7 FA 85 F1 | 	sub	objptr, ##3767
00a68     36 5F 02 F1 | 	add	arg01, local01
00a6c     03 60 06 F6 | 	mov	arg02, #3
00a70     2C 1E B0 FD | 	call	#_hng030rm_spin2_inttostr2
00a74     0C 5F 02 F6 | 	mov	arg01, result1
00a78     FC 1A B0 FD | 	call	#_hng030rm_spin2_write
00a7c                 | ' 
00a7c                 | ' ''---------- Set the (x,y) position of cursor
00a7c                 | ' 
00a7c                 | ' cursor_x:=x
00a7c     34 FA 05 F1 | 	add	objptr, #52
00a80     FD A8 48 FC | 	wrbyte	#84, objptr
00a84                 | ' cursor_y:=y
00a84     01 FA 05 F1 | 	add	objptr, #1
00a88     FD 3A 48 FC | 	wrbyte	#29, objptr
00a8c     07 00 00 FF 
00a90     76 FA 05 F1 | 	add	objptr, ##3702
00a94     FD 5E 02 FB | 	rdlong	arg01, objptr
00a98     10 FA 05 F1 | 	add	objptr, #16
00a9c     FD 6C 02 FB | 	rdlong	local01, objptr
00aa0     07 00 00 FF 
00aa4     BB FA 85 F1 | 	sub	objptr, ##3771
00aa8     36 5F 02 F1 | 	add	arg01, local01
00aac     03 60 06 F6 | 	mov	arg02, #3
00ab0     EC 1D B0 FD | 	call	#_hng030rm_spin2_inttostr2
00ab4     0C 5F 02 F6 | 	mov	arg01, result1
00ab8     BC 1A B0 FD | 	call	#_hng030rm_spin2_write
00abc     1D 60 06 F6 | 	mov	arg02, #29
00ac0                 | ' 
00ac0                 | ' ''---------- Set the (x,y) position of cursor
00ac0                 | ' 
00ac0                 | ' cursor_x:=x
00ac0     34 FA 05 F1 | 	add	objptr, #52
00ac4     FD B0 48 FC | 	wrbyte	#88, objptr
00ac8                 | ' cursor_y:=y
00ac8     01 FA 05 F1 | 	add	objptr, #1
00acc     FD 3A 48 FC | 	wrbyte	#29, objptr
00ad0     07 00 00 FF 
00ad4     45 FA 05 F1 | 	add	objptr, ##3653
00ad8     FD 6C C2 FA | 	rdbyte	local01, objptr
00adc     02 6C 66 F0 | 	shl	local01, #2
00ae0     01 00 00 FF 
00ae4     62 FA 05 F1 | 	add	objptr, ##610
00ae8     FD 6C 02 F1 | 	add	local01, objptr
00aec     36 5F 02 FB | 	rdlong	arg01, local01
00af0     08 00 00 FF 
00af4     DC FA 85 F1 | 	sub	objptr, ##4316
00af8     7C 1A B0 FD | 	call	#_hng030rm_spin2_write
00afc     08 00 00 FF 
00b00     68 FB 05 F1 | 	add	objptr, ##4456
00b04     FD 5E 02 FB | 	rdlong	arg01, objptr
00b08     08 00 00 FF 
00b0c     68 FB 85 F1 | 	sub	objptr, ##4456
00b10     64 1A B0 FD | 	call	#_hng030rm_spin2_write
00b14     AF F0 03 F6 | 	mov	ptra, fp
00b18     BA 00 A0 FD | 	call	#popregs_
00b1c                 | _test_ret
00b1c     2D 00 64 FD | 	ret
00b20                 | 
00b20                 | ' 
00b20                 | ' 
00b20                 | ' sub getinfo(ma,num)
00b20                 | _getinfo
00b20     0B 5A 05 F6 | 	mov	COUNT_, #11
00b24     B0 00 A0 FD | 	call	#pushregs_
00b28     2F 6D 02 F6 | 	mov	local01, arg01
00b2c     30 6F 02 F6 | 	mov	local02, arg02
00b30     04 60 06 F6 | 	mov	arg02, #4
00b34                 | ' 
00b34                 | ' ''---------- Set the (x,y) position of cursor
00b34                 | ' 
00b34                 | ' cursor_x:=x
00b34     34 FA 05 F1 | 	add	objptr, #52
00b38     FD 02 48 FC | 	wrbyte	#1, objptr
00b3c                 | ' cursor_y:=y
00b3c     01 FA 05 F1 | 	add	objptr, #1
00b40     FD 08 48 FC | 	wrbyte	#4, objptr
00b44     35 FA 85 F1 | 	sub	objptr, #53
00b48                 | ' 'v030. setwritecolors(170,147):
00b48                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00b48     00 5E 06 F6 | 	mov	arg01, #0
00b4c     4C 6E B0 FD | 	call	#__system___getiolock_0150
00b50     0C 5F 02 F6 | 	mov	arg01, result1
00b54     E4 56 B0 FD | 	call	#__system___lockmem
00b58     00 18 06 F6 | 	mov	result1, #0
00b5c     42 00 00 FF 
00b60     16 61 06 F6 | 	mov	arg02, ##@LR__0458
00b64     00 5E 06 F6 | 	mov	arg01, #0
00b68     00 62 06 F6 | 	mov	arg03, #0
00b6c     88 5A B0 FD | 	call	#__system___basic_print_string
00b70     00 5E 06 F6 | 	mov	arg01, #0
00b74     0A 60 06 F6 | 	mov	arg02, #10
00b78     00 62 06 F6 | 	mov	arg03, #0
00b7c     2C 5A B0 FD | 	call	#__system___basic_print_char
00b80     01 18 06 F6 | 	mov	result1, #1
00b84     00 5E 06 F6 | 	mov	arg01, #0
00b88     10 6E B0 FD | 	call	#__system___getiolock_0150
00b8c     0C 01 68 FC | 	wrlong	#0, result1
00b90     00 18 06 F6 | 	mov	result1, #0
00b94                 | ' ': v030. setwritecolors(154,147)
00b94                 | ' for i=0 to 31: sn$(i)="S"+decuns$(i,2)+space$(19) :next i
00b94     00 70 06 F6 | 	mov	local03, #0
00b98                 | LR__0001
00b98     38 73 02 F6 | 	mov	local04, local03
00b9c     02 72 66 F0 | 	shl	local04, #2
00ba0     08 00 00 FF 
00ba4     DC FA 05 F1 | 	add	objptr, ##4316
00ba8     FD 72 02 F1 | 	add	local04, objptr
00bac     42 00 00 FF 
00bb0     7F 75 06 F6 | 	mov	local05, ##@LR__0459
00bb4     38 5F 02 F6 | 	mov	arg01, local03
00bb8     02 60 06 F6 | 	mov	arg02, #2
00bbc     08 00 00 FF 
00bc0     DC FA 85 F1 | 	sub	objptr, ##4316
00bc4     0A 62 06 F6 | 	mov	arg03, #10
00bc8     78 5F B0 FD | 	call	#__system__Number_S
00bcc     0C 61 02 F6 | 	mov	arg02, result1
00bd0     3A 5F 02 F6 | 	mov	arg01, local05
00bd4     A0 56 B0 FD | 	call	#__system___string_concat
00bd8     0C 75 02 F6 | 	mov	local05, result1
00bdc     13 5E 06 F6 | 	mov	arg01, #19
00be0     42 00 00 FF 
00be4     C0 60 06 F6 | 	mov	arg02, ##@LR__0452
00be8     24 60 B0 FD | 	call	#__system__String_S
00bec     0C 61 02 F6 | 	mov	arg02, result1
00bf0     3A 5F 02 F6 | 	mov	arg01, local05
00bf4     80 56 B0 FD | 	call	#__system___string_concat
00bf8     39 19 62 FC | 	wrlong	result1, local04
00bfc     01 70 06 F1 | 	add	local03, #1
00c00     20 70 5E F2 | 	cmps	local03, #32 wcz
00c04     90 FF 9F CD |  if_b	jmp	#LR__0001
00c08                 | ' for i=1 to num
00c08     01 70 06 F6 | 	mov	local03, #1
00c0c     01 6E 06 F1 | 	add	local02, #1
00c10                 | LR__0002
00c10     37 71 5A F2 | 	cmps	local03, local02 wcz
00c14     54 08 90 3D |  if_ae	jmp	#LR__0007
00c18                 | '   for j=0 to 21
00c18     00 76 06 F6 | 	mov	local06, #0
00c1c                 | LR__0003
00c1c     38 5F 02 F6 | 	mov	arg01, local03
00c20     02 5E 66 F0 | 	shl	arg01, #2
00c24     08 00 00 FF 
00c28     DC FA 05 F1 | 	add	objptr, ##4316
00c2c     FD 5E 02 F1 | 	add	arg01, objptr
00c30     08 00 00 FF 
00c34     DC FA 85 F1 | 	sub	objptr, ##4316
00c38     48 FC BF FD | 	call	#_addr
00c3c                 | ' asm
00c3c     0C 79 02 FB | 	rdlong	local07, result1
00c40                 | ' return r
00c40     08 00 00 FF 
00c44     8C FB 05 F1 | 	add	objptr, ##4492
00c48     FD 78 62 FC | 	wrlong	local07, objptr
00c4c     36 5F 02 F6 | 	mov	arg01, local01
00c50     14 5E 06 F1 | 	add	arg01, #20
00c54     38 75 02 F6 | 	mov	local05, local03
00c58     01 74 86 F1 | 	sub	local05, #1
00c5c     3A 7B 02 F6 | 	mov	local08, local05
00c60     04 7A 66 F0 | 	shl	local08, #4
00c64     3A 7B 82 F1 | 	sub	local08, local05
00c68     01 7A 66 F0 | 	shl	local08, #1
00c6c     3D 5F 02 F1 | 	add	arg01, local08
00c70     3B 5F 02 F1 | 	add	arg01, local06
00c74                 | ' asm
00c74     2F 19 C2 FA | 	rdbyte	result1, arg01
00c78                 | ' return r
00c78     0C 79 02 F6 | 	mov	local07, result1
00c7c     07 78 46 F7 | 	zerox	local07, #7
00c80     04 FA 05 F1 | 	add	objptr, #4
00c84     FD 78 62 FC | 	wrlong	local07, objptr
00c88                 | '     a=lpeek(addr(sn$(i)))
00c88                 | '     b=(peek(ma+20+30*(i-1)+j))
00c88                 | '     if b>=32 then poke a+j,b
00c88     08 00 00 FF 
00c8c     90 FB 85 F1 | 	sub	objptr, ##4496
00c90     20 78 5E F2 | 	cmps	local07, #32 wcz
00c94     24 00 90 CD |  if_b	jmp	#LR__0004
00c98     08 00 00 FF 
00c9c     8C FB 05 F1 | 	add	objptr, ##4492
00ca0     FD 5E 02 FB | 	rdlong	arg01, objptr
00ca4     3B 5F 02 F1 | 	add	arg01, local06
00ca8     04 FA 05 F1 | 	add	objptr, #4
00cac     FD 60 02 FB | 	rdlong	arg02, objptr
00cb0     08 00 00 FF 
00cb4     90 FB 85 F1 | 	sub	objptr, ##4496
00cb8                 | ' asm
00cb8     2F 61 42 FC | 	wrbyte	arg02, arg01
00cbc                 | LR__0004
00cbc     01 76 06 F1 | 	add	local06, #1
00cc0     16 76 5E F2 | 	cmps	local06, #22 wcz
00cc4     54 FF 9F CD |  if_b	jmp	#LR__0003
00cc8     36 5F 02 F6 | 	mov	arg01, local01
00ccc     14 5E 06 F1 | 	add	arg01, #20
00cd0     38 7B 02 F6 | 	mov	local08, local03
00cd4     01 7A 86 F1 | 	sub	local08, #1
00cd8     3D 7D 02 F6 | 	mov	local09, local08
00cdc     04 7C 66 F0 | 	shl	local09, #4
00ce0     3D 7D 82 F1 | 	sub	local09, local08
00ce4     01 7C 66 F0 | 	shl	local09, #1
00ce8     3E 5F 02 F1 | 	add	arg01, local09
00cec     16 5E 06 F1 | 	add	arg01, #22
00cf0                 | ' asm
00cf0     2F 75 C2 FA | 	rdbyte	local05, arg01
00cf4                 | ' return r
00cf4     07 74 46 F7 | 	zerox	local05, #7
00cf8     08 74 66 F0 | 	shl	local05, #8
00cfc     36 5F 02 F6 | 	mov	arg01, local01
00d00     14 5E 06 F1 | 	add	arg01, #20
00d04     38 7F 02 F6 | 	mov	local10, local03
00d08     01 7E 86 F1 | 	sub	local10, #1
00d0c     3F 81 02 F6 | 	mov	local11, local10
00d10     04 80 66 F0 | 	shl	local11, #4
00d14     3F 81 82 F1 | 	sub	local11, local10
00d18     01 80 66 F0 | 	shl	local11, #1
00d1c     40 5F 02 F1 | 	add	arg01, local11
00d20     17 5E 06 F1 | 	add	arg01, #23
00d24                 | ' asm
00d24     2F 7B C2 FA | 	rdbyte	local08, arg01
00d28                 | ' return r
00d28     07 7A 46 F7 | 	zerox	local08, #7
00d2c     3D 75 02 F1 | 	add	local05, local08
00d30     01 74 66 F0 | 	shl	local05, #1
00d34     08 00 00 FF 
00d38     94 FB 05 F1 | 	add	objptr, ##4500
00d3c     FD 74 62 FC | 	wrlong	local05, objptr
00d40     36 5F 02 F6 | 	mov	arg01, local01
00d44     14 5E 06 F1 | 	add	arg01, #20
00d48     38 7B 02 F6 | 	mov	local08, local03
00d4c     01 7A 86 F1 | 	sub	local08, #1
00d50     3D 7D 02 F6 | 	mov	local09, local08
00d54     04 7C 66 F0 | 	shl	local09, #4
00d58     3D 7D 82 F1 | 	sub	local09, local08
00d5c     01 7C 66 F0 | 	shl	local09, #1
00d60     3E 5F 02 F1 | 	add	arg01, local09
00d64     1A 5E 06 F1 | 	add	arg01, #26
00d68                 | ' asm
00d68     2F 75 C2 FA | 	rdbyte	local05, arg01
00d6c                 | ' return r
00d6c     07 74 46 F7 | 	zerox	local05, #7
00d70     08 74 66 F0 | 	shl	local05, #8
00d74     36 5F 02 F6 | 	mov	arg01, local01
00d78     14 5E 06 F1 | 	add	arg01, #20
00d7c     38 7F 02 F6 | 	mov	local10, local03
00d80     01 7E 86 F1 | 	sub	local10, #1
00d84     3F 81 02 F6 | 	mov	local11, local10
00d88     04 80 66 F0 | 	shl	local11, #4
00d8c     3F 81 82 F1 | 	sub	local11, local10
00d90     01 80 66 F0 | 	shl	local11, #1
00d94     40 5F 02 F1 | 	add	arg01, local11
00d98     1B 5E 06 F1 | 	add	arg01, #27
00d9c                 | ' asm
00d9c     2F 7B C2 FA | 	rdbyte	local08, arg01
00da0                 | ' return r
00da0     07 7A 46 F7 | 	zerox	local08, #7
00da4     3D 75 02 F1 | 	add	local05, local08
00da8     01 74 66 F0 | 	shl	local05, #1
00dac     04 FA 05 F1 | 	add	objptr, #4
00db0     FD 74 62 FC | 	wrlong	local05, objptr
00db4     36 5F 02 F6 | 	mov	arg01, local01
00db8     14 5E 06 F1 | 	add	arg01, #20
00dbc     38 7B 02 F6 | 	mov	local08, local03
00dc0     01 7A 86 F1 | 	sub	local08, #1
00dc4     3D 7D 02 F6 | 	mov	local09, local08
00dc8     04 7C 66 F0 | 	shl	local09, #4
00dcc     3D 7D 82 F1 | 	sub	local09, local08
00dd0     01 7C 66 F0 | 	shl	local09, #1
00dd4     3E 5F 02 F1 | 	add	arg01, local09
00dd8     1C 5E 06 F1 | 	add	arg01, #28
00ddc                 | ' asm
00ddc     2F 75 C2 FA | 	rdbyte	local05, arg01
00de0                 | ' return r
00de0     07 74 46 F7 | 	zerox	local05, #7
00de4     08 74 66 F0 | 	shl	local05, #8
00de8     36 5F 02 F6 | 	mov	arg01, local01
00dec     14 5E 06 F1 | 	add	arg01, #20
00df0     38 7F 02 F6 | 	mov	local10, local03
00df4     01 7E 86 F1 | 	sub	local10, #1
00df8     3F 81 02 F6 | 	mov	local11, local10
00dfc     04 80 66 F0 | 	shl	local11, #4
00e00     3F 81 82 F1 | 	sub	local11, local10
00e04     01 80 66 F0 | 	shl	local11, #1
00e08     40 5F 02 F1 | 	add	arg01, local11
00e0c     1D 5E 06 F1 | 	add	arg01, #29
00e10                 | ' asm
00e10     2F 7B C2 FA | 	rdbyte	local08, arg01
00e14                 | ' return r
00e14     07 7A 46 F7 | 	zerox	local08, #7
00e18     3D 75 02 F1 | 	add	local05, local08
00e1c     01 74 66 F0 | 	shl	local05, #1
00e20     04 FA 05 F1 | 	add	objptr, #4
00e24     FD 74 62 FC | 	wrlong	local05, objptr
00e28     36 5F 02 F6 | 	mov	arg01, local01
00e2c     14 5E 06 F1 | 	add	arg01, #20
00e30     38 75 02 F6 | 	mov	local05, local03
00e34     01 74 86 F1 | 	sub	local05, #1
00e38     3A 7B 02 F6 | 	mov	local08, local05
00e3c     04 7A 66 F0 | 	shl	local08, #4
00e40     3A 7B 82 F1 | 	sub	local08, local05
00e44     01 7A 66 F0 | 	shl	local08, #1
00e48     3D 5F 02 F1 | 	add	arg01, local08
00e4c     18 5E 06 F1 | 	add	arg01, #24
00e50                 | ' asm
00e50     2F 79 C2 FA | 	rdbyte	local07, arg01
00e54                 | ' return r
00e54     07 78 46 F7 | 	zerox	local07, #7
00e58     04 FA 05 F1 | 	add	objptr, #4
00e5c     FD 78 62 FC | 	wrlong	local07, objptr
00e60     36 5F 02 F6 | 	mov	arg01, local01
00e64     14 5E 06 F1 | 	add	arg01, #20
00e68     38 75 02 F6 | 	mov	local05, local03
00e6c     01 74 86 F1 | 	sub	local05, #1
00e70     3A 7B 02 F6 | 	mov	local08, local05
00e74     04 7A 66 F0 | 	shl	local08, #4
00e78     3A 7B 82 F1 | 	sub	local08, local05
00e7c     01 7A 66 F0 | 	shl	local08, #1
00e80     3D 5F 02 F1 | 	add	arg01, local08
00e84     19 5E 06 F1 | 	add	arg01, #25
00e88                 | ' asm
00e88     2F 19 C2 FA | 	rdbyte	result1, arg01
00e8c                 | ' return r
00e8c     0C 79 02 F6 | 	mov	local07, result1
00e90     07 78 46 F7 | 	zerox	local07, #7
00e94     04 FA 05 F1 | 	add	objptr, #4
00e98     FD 78 62 FC | 	wrlong	local07, objptr
00e9c     08 00 00 FF 
00ea0     A4 FB 85 F1 | 	sub	objptr, ##4516
00ea4                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ea4                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ea4                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ea4                 | ' ft=peek(ma+20+30*(i-1)+24)
00ea4                 | ' vl=peek(ma+20+30*(i-1)+25)
00ea4                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ea4     10 70 5E F2 | 	cmps	local03, #16 wcz
00ea8     D8 02 90 3D |  if_ae	jmp	#LR__0005
00eac     05 60 06 F6 | 	mov	arg02, #5
00eb0     38 61 02 F1 | 	add	arg02, local03
00eb4                 | ' 
00eb4                 | ' ''---------- Set the (x,y) position of cursor
00eb4                 | ' 
00eb4                 | ' cursor_x:=x
00eb4     34 FA 05 F1 | 	add	objptr, #52
00eb8     FD 02 48 FC | 	wrbyte	#1, objptr
00ebc                 | ' cursor_y:=y
00ebc     01 FA 05 F1 | 	add	objptr, #1
00ec0     FD 60 42 FC | 	wrbyte	arg02, objptr
00ec4     35 FA 85 F1 | 	sub	objptr, #53
00ec8     00 5E 06 F6 | 	mov	arg01, #0
00ecc     CC 6A B0 FD | 	call	#__system___getiolock_0150
00ed0     0C 5F 02 F6 | 	mov	arg01, result1
00ed4     64 53 B0 FD | 	call	#__system___lockmem
00ed8     00 18 06 F6 | 	mov	result1, #0
00edc     38 7D 02 F6 | 	mov	local09, local03
00ee0     02 7C 66 F0 | 	shl	local09, #2
00ee4     08 00 00 FF 
00ee8     DC FA 05 F1 | 	add	objptr, ##4316
00eec     FD 7C 02 F1 | 	add	local09, objptr
00ef0     3E 61 02 FB | 	rdlong	arg02, local09
00ef4     00 5E 06 F6 | 	mov	arg01, #0
00ef8     00 62 06 F6 | 	mov	arg03, #0
00efc     08 00 00 FF 
00f00     DC FA 85 F1 | 	sub	objptr, ##4316
00f04     F0 56 B0 FD | 	call	#__system___basic_print_string
00f08     00 5E 06 F6 | 	mov	arg01, #0
00f0c     0A 60 06 F6 | 	mov	arg02, #10
00f10     00 62 06 F6 | 	mov	arg03, #0
00f14     94 56 B0 FD | 	call	#__system___basic_print_char
00f18     01 18 06 F6 | 	mov	result1, #1
00f1c     00 5E 06 F6 | 	mov	arg01, #0
00f20     78 6A B0 FD | 	call	#__system___getiolock_0150
00f24     0C 01 68 FC | 	wrlong	#0, result1
00f28     00 18 06 F6 | 	mov	result1, #0
00f2c     05 60 06 F6 | 	mov	arg02, #5
00f30     38 61 02 F1 | 	add	arg02, local03
00f34                 | ' 
00f34                 | ' ''---------- Set the (x,y) position of cursor
00f34                 | ' 
00f34                 | ' cursor_x:=x
00f34     34 FA 05 F1 | 	add	objptr, #52
00f38     FD 30 48 FC | 	wrbyte	#24, objptr
00f3c                 | ' cursor_y:=y
00f3c     01 FA 05 F1 | 	add	objptr, #1
00f40     FD 60 42 FC | 	wrbyte	arg02, objptr
00f44     35 FA 85 F1 | 	sub	objptr, #53
00f48     00 5E 06 F6 | 	mov	arg01, #0
00f4c     4C 6A B0 FD | 	call	#__system___getiolock_0150
00f50     0C 5F 02 F6 | 	mov	arg01, result1
00f54     E4 52 B0 FD | 	call	#__system___lockmem
00f58     00 18 06 F6 | 	mov	result1, #0
00f5c     08 00 00 FF 
00f60     94 FB 05 F1 | 	add	objptr, ##4500
00f64     FD 60 02 FB | 	rdlong	arg02, objptr
00f68     08 00 00 FF 
00f6c     94 FB 85 F1 | 	sub	objptr, ##4500
00f70     00 5E 06 F6 | 	mov	arg01, #0
00f74     00 62 06 F6 | 	mov	arg03, #0
00f78     0A 64 06 F6 | 	mov	arg04, #10
00f7c     C0 56 B0 FD | 	call	#__system___basic_print_integer
00f80     00 5E 06 F6 | 	mov	arg01, #0
00f84     0A 60 06 F6 | 	mov	arg02, #10
00f88     00 62 06 F6 | 	mov	arg03, #0
00f8c     1C 56 B0 FD | 	call	#__system___basic_print_char
00f90     01 18 06 F6 | 	mov	result1, #1
00f94     00 5E 06 F6 | 	mov	arg01, #0
00f98     00 6A B0 FD | 	call	#__system___getiolock_0150
00f9c     0C 01 68 FC | 	wrlong	#0, result1
00fa0     00 18 06 F6 | 	mov	result1, #0
00fa4     05 60 06 F6 | 	mov	arg02, #5
00fa8     38 61 02 F1 | 	add	arg02, local03
00fac                 | ' 
00fac                 | ' ''---------- Set the (x,y) position of cursor
00fac                 | ' 
00fac                 | ' cursor_x:=x
00fac     34 FA 05 F1 | 	add	objptr, #52
00fb0     FD 3E 48 FC | 	wrbyte	#31, objptr
00fb4                 | ' cursor_y:=y
00fb4     01 FA 05 F1 | 	add	objptr, #1
00fb8     FD 60 42 FC | 	wrbyte	arg02, objptr
00fbc     35 FA 85 F1 | 	sub	objptr, #53
00fc0     00 5E 06 F6 | 	mov	arg01, #0
00fc4     D4 69 B0 FD | 	call	#__system___getiolock_0150
00fc8     0C 5F 02 F6 | 	mov	arg01, result1
00fcc     6C 52 B0 FD | 	call	#__system___lockmem
00fd0     00 18 06 F6 | 	mov	result1, #0
00fd4     08 00 00 FF 
00fd8     A0 FB 05 F1 | 	add	objptr, ##4512
00fdc     FD 60 02 FB | 	rdlong	arg02, objptr
00fe0     08 00 00 FF 
00fe4     A0 FB 85 F1 | 	sub	objptr, ##4512
00fe8     00 5E 06 F6 | 	mov	arg01, #0
00fec     00 62 06 F6 | 	mov	arg03, #0
00ff0     0A 64 06 F6 | 	mov	arg04, #10
00ff4     48 56 B0 FD | 	call	#__system___basic_print_integer
00ff8     00 5E 06 F6 | 	mov	arg01, #0
00ffc     0A 60 06 F6 | 	mov	arg02, #10
01000     00 62 06 F6 | 	mov	arg03, #0
01004     A4 55 B0 FD | 	call	#__system___basic_print_char
01008     01 18 06 F6 | 	mov	result1, #1
0100c     00 5E 06 F6 | 	mov	arg01, #0
01010     88 69 B0 FD | 	call	#__system___getiolock_0150
01014     0C 01 68 FC | 	wrlong	#0, result1
01018     00 18 06 F6 | 	mov	result1, #0
0101c     05 60 06 F6 | 	mov	arg02, #5
01020     38 61 02 F1 | 	add	arg02, local03
01024                 | ' 
01024                 | ' ''---------- Set the (x,y) position of cursor
01024                 | ' 
01024                 | ' cursor_x:=x
01024     34 FA 05 F1 | 	add	objptr, #52
01028     FD 44 48 FC | 	wrbyte	#34, objptr
0102c                 | ' cursor_y:=y
0102c     01 FA 05 F1 | 	add	objptr, #1
01030     FD 60 42 FC | 	wrbyte	arg02, objptr
01034     35 FA 85 F1 | 	sub	objptr, #53
01038     00 5E 06 F6 | 	mov	arg01, #0
0103c     5C 69 B0 FD | 	call	#__system___getiolock_0150
01040     0C 5F 02 F6 | 	mov	arg01, result1
01044     F4 51 B0 FD | 	call	#__system___lockmem
01048     00 18 06 F6 | 	mov	result1, #0
0104c     08 00 00 FF 
01050     A4 FB 05 F1 | 	add	objptr, ##4516
01054     FD 60 02 FB | 	rdlong	arg02, objptr
01058     08 00 00 FF 
0105c     A4 FB 85 F1 | 	sub	objptr, ##4516
01060     00 5E 06 F6 | 	mov	arg01, #0
01064     00 62 06 F6 | 	mov	arg03, #0
01068     0A 64 06 F6 | 	mov	arg04, #10
0106c     D0 55 B0 FD | 	call	#__system___basic_print_integer
01070     00 5E 06 F6 | 	mov	arg01, #0
01074     0A 60 06 F6 | 	mov	arg02, #10
01078     00 62 06 F6 | 	mov	arg03, #0
0107c     2C 55 B0 FD | 	call	#__system___basic_print_char
01080     01 18 06 F6 | 	mov	result1, #1
01084     00 5E 06 F6 | 	mov	arg01, #0
01088     10 69 B0 FD | 	call	#__system___getiolock_0150
0108c     0C 01 68 FC | 	wrlong	#0, result1
01090     00 18 06 F6 | 	mov	result1, #0
01094     05 60 06 F6 | 	mov	arg02, #5
01098     38 61 02 F1 | 	add	arg02, local03
0109c                 | ' 
0109c                 | ' ''---------- Set the (x,y) position of cursor
0109c                 | ' 
0109c                 | ' cursor_x:=x
0109c     34 FA 05 F1 | 	add	objptr, #52
010a0     FD 4A 48 FC | 	wrbyte	#37, objptr
010a4                 | ' cursor_y:=y
010a4     01 FA 05 F1 | 	add	objptr, #1
010a8     FD 60 42 FC | 	wrbyte	arg02, objptr
010ac     35 FA 85 F1 | 	sub	objptr, #53
010b0     00 5E 06 F6 | 	mov	arg01, #0
010b4     E4 68 B0 FD | 	call	#__system___getiolock_0150
010b8     0C 5F 02 F6 | 	mov	arg01, result1
010bc     7C 51 B0 FD | 	call	#__system___lockmem
010c0     00 18 06 F6 | 	mov	result1, #0
010c4     08 00 00 FF 
010c8     98 FB 05 F1 | 	add	objptr, ##4504
010cc     FD 60 02 FB | 	rdlong	arg02, objptr
010d0     08 00 00 FF 
010d4     98 FB 85 F1 | 	sub	objptr, ##4504
010d8     00 5E 06 F6 | 	mov	arg01, #0
010dc     00 62 06 F6 | 	mov	arg03, #0
010e0     0A 64 06 F6 | 	mov	arg04, #10
010e4     58 55 B0 FD | 	call	#__system___basic_print_integer
010e8     00 5E 06 F6 | 	mov	arg01, #0
010ec     0A 60 06 F6 | 	mov	arg02, #10
010f0     00 62 06 F6 | 	mov	arg03, #0
010f4     B4 54 B0 FD | 	call	#__system___basic_print_char
010f8     01 18 06 F6 | 	mov	result1, #1
010fc     00 5E 06 F6 | 	mov	arg01, #0
01100     98 68 B0 FD | 	call	#__system___getiolock_0150
01104     0C 01 68 FC | 	wrlong	#0, result1
01108     00 18 06 F6 | 	mov	result1, #0
0110c     05 60 06 F6 | 	mov	arg02, #5
01110     38 61 02 F1 | 	add	arg02, local03
01114                 | ' 
01114                 | ' ''---------- Set the (x,y) position of cursor
01114                 | ' 
01114                 | ' cursor_x:=x
01114     34 FA 05 F1 | 	add	objptr, #52
01118     FD 56 48 FC | 	wrbyte	#43, objptr
0111c                 | ' cursor_y:=y
0111c     01 FA 05 F1 | 	add	objptr, #1
01120     FD 60 42 FC | 	wrbyte	arg02, objptr
01124     35 FA 85 F1 | 	sub	objptr, #53
01128     00 5E 06 F6 | 	mov	arg01, #0
0112c     6C 68 B0 FD | 	call	#__system___getiolock_0150
01130     0C 5F 02 F6 | 	mov	arg01, result1
01134     04 51 B0 FD | 	call	#__system___lockmem
01138     00 18 06 F6 | 	mov	result1, #0
0113c     08 00 00 FF 
01140     9C FB 05 F1 | 	add	objptr, ##4508
01144     FD 60 02 FB | 	rdlong	arg02, objptr
01148     08 00 00 FF 
0114c     9C FB 85 F1 | 	sub	objptr, ##4508
01150     00 5E 06 F6 | 	mov	arg01, #0
01154     00 62 06 F6 | 	mov	arg03, #0
01158     0A 64 06 F6 | 	mov	arg04, #10
0115c     E0 54 B0 FD | 	call	#__system___basic_print_integer
01160     00 5E 06 F6 | 	mov	arg01, #0
01164     0A 60 06 F6 | 	mov	arg02, #10
01168     00 62 06 F6 | 	mov	arg03, #0
0116c     3C 54 B0 FD | 	call	#__system___basic_print_char
01170     01 18 06 F6 | 	mov	result1, #1
01174     00 5E 06 F6 | 	mov	arg01, #0
01178     20 68 B0 FD | 	call	#__system___getiolock_0150
0117c     0C 01 68 FC | 	wrlong	#0, result1
01180     00 18 06 F6 | 	mov	result1, #0
01184                 | LR__0005
01184                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
01184     10 70 5E F2 | 	cmps	local03, #16 wcz
01188     D8 02 90 CD |  if_b	jmp	#LR__0006
0118c     38 61 02 F6 | 	mov	arg02, local03
01190     0B 60 86 F1 | 	sub	arg02, #11
01194                 | ' 
01194                 | ' ''---------- Set the (x,y) position of cursor
01194                 | ' 
01194                 | ' cursor_x:=x
01194     34 FA 05 F1 | 	add	objptr, #52
01198     FD 72 48 FC | 	wrbyte	#57, objptr
0119c                 | ' cursor_y:=y
0119c     01 FA 05 F1 | 	add	objptr, #1
011a0     FD 60 42 FC | 	wrbyte	arg02, objptr
011a4     35 FA 85 F1 | 	sub	objptr, #53
011a8     00 5E 06 F6 | 	mov	arg01, #0
011ac     EC 67 B0 FD | 	call	#__system___getiolock_0150
011b0     0C 5F 02 F6 | 	mov	arg01, result1
011b4     84 50 B0 FD | 	call	#__system___lockmem
011b8     00 18 06 F6 | 	mov	result1, #0
011bc     38 7D 02 F6 | 	mov	local09, local03
011c0     02 7C 66 F0 | 	shl	local09, #2
011c4     08 00 00 FF 
011c8     DC FA 05 F1 | 	add	objptr, ##4316
011cc     FD 7C 02 F1 | 	add	local09, objptr
011d0     3E 61 02 FB | 	rdlong	arg02, local09
011d4     00 5E 06 F6 | 	mov	arg01, #0
011d8     00 62 06 F6 | 	mov	arg03, #0
011dc     08 00 00 FF 
011e0     DC FA 85 F1 | 	sub	objptr, ##4316
011e4     10 54 B0 FD | 	call	#__system___basic_print_string
011e8     00 5E 06 F6 | 	mov	arg01, #0
011ec     0A 60 06 F6 | 	mov	arg02, #10
011f0     00 62 06 F6 | 	mov	arg03, #0
011f4     B4 53 B0 FD | 	call	#__system___basic_print_char
011f8     01 18 06 F6 | 	mov	result1, #1
011fc     00 5E 06 F6 | 	mov	arg01, #0
01200     98 67 B0 FD | 	call	#__system___getiolock_0150
01204     0C 01 68 FC | 	wrlong	#0, result1
01208     00 18 06 F6 | 	mov	result1, #0
0120c     38 61 02 F6 | 	mov	arg02, local03
01210     0B 60 86 F1 | 	sub	arg02, #11
01214                 | ' 
01214                 | ' ''---------- Set the (x,y) position of cursor
01214                 | ' 
01214                 | ' cursor_x:=x
01214     34 FA 05 F1 | 	add	objptr, #52
01218     FD A0 48 FC | 	wrbyte	#80, objptr
0121c                 | ' cursor_y:=y
0121c     01 FA 05 F1 | 	add	objptr, #1
01220     FD 60 42 FC | 	wrbyte	arg02, objptr
01224     35 FA 85 F1 | 	sub	objptr, #53
01228     00 5E 06 F6 | 	mov	arg01, #0
0122c     6C 67 B0 FD | 	call	#__system___getiolock_0150
01230     0C 5F 02 F6 | 	mov	arg01, result1
01234     04 50 B0 FD | 	call	#__system___lockmem
01238     00 18 06 F6 | 	mov	result1, #0
0123c     08 00 00 FF 
01240     94 FB 05 F1 | 	add	objptr, ##4500
01244     FD 60 02 FB | 	rdlong	arg02, objptr
01248     08 00 00 FF 
0124c     94 FB 85 F1 | 	sub	objptr, ##4500
01250     00 5E 06 F6 | 	mov	arg01, #0
01254     00 62 06 F6 | 	mov	arg03, #0
01258     0A 64 06 F6 | 	mov	arg04, #10
0125c     E0 53 B0 FD | 	call	#__system___basic_print_integer
01260     00 5E 06 F6 | 	mov	arg01, #0
01264     0A 60 06 F6 | 	mov	arg02, #10
01268     00 62 06 F6 | 	mov	arg03, #0
0126c     3C 53 B0 FD | 	call	#__system___basic_print_char
01270     01 18 06 F6 | 	mov	result1, #1
01274     00 5E 06 F6 | 	mov	arg01, #0
01278     20 67 B0 FD | 	call	#__system___getiolock_0150
0127c     0C 01 68 FC | 	wrlong	#0, result1
01280     00 18 06 F6 | 	mov	result1, #0
01284     38 61 02 F6 | 	mov	arg02, local03
01288     0B 60 86 F1 | 	sub	arg02, #11
0128c                 | ' 
0128c                 | ' ''---------- Set the (x,y) position of cursor
0128c                 | ' 
0128c                 | ' cursor_x:=x
0128c     34 FA 05 F1 | 	add	objptr, #52
01290     FD AE 48 FC | 	wrbyte	#87, objptr
01294                 | ' cursor_y:=y
01294     01 FA 05 F1 | 	add	objptr, #1
01298     FD 60 42 FC | 	wrbyte	arg02, objptr
0129c     35 FA 85 F1 | 	sub	objptr, #53
012a0     00 5E 06 F6 | 	mov	arg01, #0
012a4     F4 66 B0 FD | 	call	#__system___getiolock_0150
012a8     0C 5F 02 F6 | 	mov	arg01, result1
012ac     8C 4F B0 FD | 	call	#__system___lockmem
012b0     00 18 06 F6 | 	mov	result1, #0
012b4     08 00 00 FF 
012b8     A0 FB 05 F1 | 	add	objptr, ##4512
012bc     FD 60 02 FB | 	rdlong	arg02, objptr
012c0     08 00 00 FF 
012c4     A0 FB 85 F1 | 	sub	objptr, ##4512
012c8     00 5E 06 F6 | 	mov	arg01, #0
012cc     00 62 06 F6 | 	mov	arg03, #0
012d0     0A 64 06 F6 | 	mov	arg04, #10
012d4     68 53 B0 FD | 	call	#__system___basic_print_integer
012d8     00 5E 06 F6 | 	mov	arg01, #0
012dc     0A 60 06 F6 | 	mov	arg02, #10
012e0     00 62 06 F6 | 	mov	arg03, #0
012e4     C4 52 B0 FD | 	call	#__system___basic_print_char
012e8     01 18 06 F6 | 	mov	result1, #1
012ec     00 5E 06 F6 | 	mov	arg01, #0
012f0     A8 66 B0 FD | 	call	#__system___getiolock_0150
012f4     0C 01 68 FC | 	wrlong	#0, result1
012f8     00 18 06 F6 | 	mov	result1, #0
012fc     38 61 02 F6 | 	mov	arg02, local03
01300     0B 60 86 F1 | 	sub	arg02, #11
01304                 | ' 
01304                 | ' ''---------- Set the (x,y) position of cursor
01304                 | ' 
01304                 | ' cursor_x:=x
01304     34 FA 05 F1 | 	add	objptr, #52
01308     FD B4 48 FC | 	wrbyte	#90, objptr
0130c                 | ' cursor_y:=y
0130c     01 FA 05 F1 | 	add	objptr, #1
01310     FD 60 42 FC | 	wrbyte	arg02, objptr
01314     35 FA 85 F1 | 	sub	objptr, #53
01318     00 5E 06 F6 | 	mov	arg01, #0
0131c     7C 66 B0 FD | 	call	#__system___getiolock_0150
01320     0C 5F 02 F6 | 	mov	arg01, result1
01324     14 4F B0 FD | 	call	#__system___lockmem
01328     00 18 06 F6 | 	mov	result1, #0
0132c     08 00 00 FF 
01330     A4 FB 05 F1 | 	add	objptr, ##4516
01334     FD 60 02 FB | 	rdlong	arg02, objptr
01338     08 00 00 FF 
0133c     A4 FB 85 F1 | 	sub	objptr, ##4516
01340     00 5E 06 F6 | 	mov	arg01, #0
01344     00 62 06 F6 | 	mov	arg03, #0
01348     0A 64 06 F6 | 	mov	arg04, #10
0134c     F0 52 B0 FD | 	call	#__system___basic_print_integer
01350     00 5E 06 F6 | 	mov	arg01, #0
01354     0A 60 06 F6 | 	mov	arg02, #10
01358     00 62 06 F6 | 	mov	arg03, #0
0135c     4C 52 B0 FD | 	call	#__system___basic_print_char
01360     01 18 06 F6 | 	mov	result1, #1
01364     00 5E 06 F6 | 	mov	arg01, #0
01368     30 66 B0 FD | 	call	#__system___getiolock_0150
0136c     0C 01 68 FC | 	wrlong	#0, result1
01370     00 18 06 F6 | 	mov	result1, #0
01374     38 61 02 F6 | 	mov	arg02, local03
01378     0B 60 86 F1 | 	sub	arg02, #11
0137c                 | ' 
0137c                 | ' ''---------- Set the (x,y) position of cursor
0137c                 | ' 
0137c                 | ' cursor_x:=x
0137c     34 FA 05 F1 | 	add	objptr, #52
01380     FD BA 48 FC | 	wrbyte	#93, objptr
01384                 | ' cursor_y:=y
01384     01 FA 05 F1 | 	add	objptr, #1
01388     FD 60 42 FC | 	wrbyte	arg02, objptr
0138c     35 FA 85 F1 | 	sub	objptr, #53
01390     00 5E 06 F6 | 	mov	arg01, #0
01394     04 66 B0 FD | 	call	#__system___getiolock_0150
01398     0C 5F 02 F6 | 	mov	arg01, result1
0139c     9C 4E B0 FD | 	call	#__system___lockmem
013a0     00 18 06 F6 | 	mov	result1, #0
013a4     08 00 00 FF 
013a8     98 FB 05 F1 | 	add	objptr, ##4504
013ac     FD 60 02 FB | 	rdlong	arg02, objptr
013b0     08 00 00 FF 
013b4     98 FB 85 F1 | 	sub	objptr, ##4504
013b8     00 5E 06 F6 | 	mov	arg01, #0
013bc     00 62 06 F6 | 	mov	arg03, #0
013c0     0A 64 06 F6 | 	mov	arg04, #10
013c4     78 52 B0 FD | 	call	#__system___basic_print_integer
013c8     00 5E 06 F6 | 	mov	arg01, #0
013cc     0A 60 06 F6 | 	mov	arg02, #10
013d0     00 62 06 F6 | 	mov	arg03, #0
013d4     D4 51 B0 FD | 	call	#__system___basic_print_char
013d8     01 18 06 F6 | 	mov	result1, #1
013dc     00 5E 06 F6 | 	mov	arg01, #0
013e0     B8 65 B0 FD | 	call	#__system___getiolock_0150
013e4     0C 01 68 FC | 	wrlong	#0, result1
013e8     00 18 06 F6 | 	mov	result1, #0
013ec     38 61 02 F6 | 	mov	arg02, local03
013f0     0B 60 86 F1 | 	sub	arg02, #11
013f4                 | ' 
013f4                 | ' ''---------- Set the (x,y) position of cursor
013f4                 | ' 
013f4                 | ' cursor_x:=x
013f4     34 FA 05 F1 | 	add	objptr, #52
013f8     FD C6 48 FC | 	wrbyte	#99, objptr
013fc                 | ' cursor_y:=y
013fc     01 FA 05 F1 | 	add	objptr, #1
01400     FD 60 42 FC | 	wrbyte	arg02, objptr
01404     35 FA 85 F1 | 	sub	objptr, #53
01408     00 5E 06 F6 | 	mov	arg01, #0
0140c     8C 65 B0 FD | 	call	#__system___getiolock_0150
01410     0C 5F 02 F6 | 	mov	arg01, result1
01414     24 4E B0 FD | 	call	#__system___lockmem
01418     00 18 06 F6 | 	mov	result1, #0
0141c     08 00 00 FF 
01420     9C FB 05 F1 | 	add	objptr, ##4508
01424     FD 60 02 FB | 	rdlong	arg02, objptr
01428     08 00 00 FF 
0142c     9C FB 85 F1 | 	sub	objptr, ##4508
01430     00 5E 06 F6 | 	mov	arg01, #0
01434     00 62 06 F6 | 	mov	arg03, #0
01438     0A 64 06 F6 | 	mov	arg04, #10
0143c     00 52 B0 FD | 	call	#__system___basic_print_integer
01440     00 5E 06 F6 | 	mov	arg01, #0
01444     0A 60 06 F6 | 	mov	arg02, #10
01448     00 62 06 F6 | 	mov	arg03, #0
0144c     5C 51 B0 FD | 	call	#__system___basic_print_char
01450     01 18 06 F6 | 	mov	result1, #1
01454     00 5E 06 F6 | 	mov	arg01, #0
01458     40 65 B0 FD | 	call	#__system___getiolock_0150
0145c     0C 01 68 FC | 	wrlong	#0, result1
01460     00 18 06 F6 | 	mov	result1, #0
01464                 | LR__0006
01464     01 70 06 F1 | 	add	local03, #1
01468     A4 F7 9F FD | 	jmp	#LR__0002
0146c                 | LR__0007
0146c                 | ' print
0146c     00 5E 06 F6 | 	mov	arg01, #0
01470     28 65 B0 FD | 	call	#__system___getiolock_0150
01474     0C 5F 02 F6 | 	mov	arg01, result1
01478     C0 4D B0 FD | 	call	#__system___lockmem
0147c     00 18 06 F6 | 	mov	result1, #0
01480     00 5E 06 F6 | 	mov	arg01, #0
01484     0A 60 06 F6 | 	mov	arg02, #10
01488     00 62 06 F6 | 	mov	arg03, #0
0148c     1C 51 B0 FD | 	call	#__system___basic_print_char
01490     01 18 06 F6 | 	mov	result1, #1
01494     00 5E 06 F6 | 	mov	arg01, #0
01498     00 65 B0 FD | 	call	#__system___getiolock_0150
0149c     0C 01 68 FC | 	wrlong	#0, result1
014a0     00 18 06 F6 | 	mov	result1, #0
014a4     AF F0 03 F6 | 	mov	ptra, fp
014a8     BA 00 A0 FD | 	call	#popregs_
014ac                 | _getinfo_ret
014ac     2D 00 64 FD | 	ret
014b0                 | 
014b0                 | _program
014b0     09 5A 05 F6 | 	mov	COUNT_, #9
014b4     B0 00 A0 FD | 	call	#pushregs_
014b8     EC FA 05 F1 | 	add	objptr, #236
014bc     1C 20 B0 FD | 	call	#_retrocog_spin2_start
014c0     02 00 00 FF 
014c4     40 FA 05 F1 | 	add	objptr, ##1088
014c8     FD 18 62 FC | 	wrlong	result1, objptr
014cc                 | ' c=rm.start()
014cc                 | ' return c
014cc     02 00 00 FF 
014d0     2C FB 85 F1 | 	sub	objptr, ##1324
014d4     40 5E 06 F6 | 	mov	arg01, #64
014d8     00 60 06 F6 | 	mov	arg02, #0
014dc     60 F3 BF FD | 	call	#_startvideo
014e0     9A 5E 06 F6 | 	mov	arg01, #154
014e4     93 60 06 F6 | 	mov	arg02, #147
014e8     EC 0C B0 FD | 	call	#_hng030rm_spin2_cls
014ec     1C FA 05 F1 | 	add	objptr, #28
014f0     FD 6C 02 FB | 	rdlong	local01, objptr
014f4     06 00 00 FF 
014f8     88 FB 05 F1 | 	add	objptr, ##3464
014fc     FD 6C 62 FC | 	wrlong	local01, objptr
01500     06 00 00 FF 
01504     A4 FB 85 F1 | 	sub	objptr, ##3492
01508                 | ' dltest=v030.dl_ptr
01508                 | ' for i=0 to 539 : dlcopy(i)=lpeek(dltest+4*i):next i 
01508     00 6E 06 F6 | 	mov	local02, #0
0150c     3C EB 9F FE | 	loc	pa,	#(@LR__0009-@LR__0008)
01510     93 00 A0 FD | 	call	#FCACHE_LOAD_
01514                 | LR__0008
01514     37 71 02 F6 | 	mov	local03, local02
01518     02 70 66 F0 | 	shl	local03, #2
0151c     02 00 00 FF 
01520     30 FB 05 F1 | 	add	objptr, ##1328
01524     FD 70 02 F1 | 	add	local03, objptr
01528     04 00 00 FF 
0152c     74 FA 05 F1 | 	add	objptr, ##2164
01530     FD 5E 02 FB | 	rdlong	arg01, objptr
01534     06 00 00 FF 
01538     A4 FB 85 F1 | 	sub	objptr, ##3492
0153c     37 73 02 F6 | 	mov	local04, local02
01540     02 72 66 F0 | 	shl	local04, #2
01544     39 5F 02 F1 | 	add	arg01, local04
01548                 | ' asm
01548     2F 19 02 FB | 	rdlong	result1, arg01
0154c                 | ' return r
0154c     38 19 62 FC | 	wrlong	result1, local03
01550     01 6E 06 F1 | 	add	local02, #1
01554     01 00 00 FF 
01558     1C 6E 5E F2 | 	cmps	local02, ##540 wcz
0155c     B4 FF 9F CD |  if_b	jmp	#LR__0008
01560                 | LR__0009
01560     06 00 00 FF 
01564     A8 FB 05 F1 | 	add	objptr, ##3496
01568     FD 00 69 FC | 	wrlong	#128, objptr
0156c     04 FA 05 F1 | 	add	objptr, #4
01570     FD 7A 68 FC | 	wrlong	#61, objptr
01574     04 FA 05 F1 | 	add	objptr, #4
01578     FD 78 68 FC | 	wrlong	#60, objptr
0157c     04 FA 05 F1 | 	add	objptr, #4
01580     FD 76 68 FC | 	wrlong	#59, objptr
01584     04 FA 05 F1 | 	add	objptr, #4
01588     FD 74 68 FC | 	wrlong	#58, objptr
0158c     04 FA 05 F1 | 	add	objptr, #4
01590     FD 06 68 FC | 	wrlong	#3, objptr
01594     42 00 00 FF 
01598     81 6D 06 F6 | 	mov	local01, ##@LR__0460
0159c     01 00 00 FF 
015a0     AC FB 05 F1 | 	add	objptr, ##940
015a4     FD 6C 62 FC | 	wrlong	local01, objptr
015a8     42 00 00 FF 
015ac     98 6D 06 F6 | 	mov	local01, ##@LR__0461
015b0     04 FA 05 F1 | 	add	objptr, #4
015b4     FD 6C 62 FC | 	wrlong	local01, objptr
015b8     08 00 00 FF 
015bc     6C FB 85 F1 | 	sub	objptr, ##4460
015c0                 | ' 
015c0                 | ' emptystr$="                      "
015c0                 | ' ss$=""
015c0                 | ' for i=1 to 31 : ss$=ss$+chr$(i) :next i
015c0     01 6E 06 F6 | 	mov	local02, #1
015c4                 | LR__0010
015c4     08 00 00 FF 
015c8     6C FB 05 F1 | 	add	objptr, ##4460
015cc     FD 6C 02 FB | 	rdlong	local01, objptr
015d0     08 00 00 FF 
015d4     6C FB 85 F1 | 	sub	objptr, ##4460
015d8     37 5F 02 F6 | 	mov	arg01, local02
015dc     28 55 B0 FD | 	call	#__system__Chr_S
015e0     0C 61 02 F6 | 	mov	arg02, result1
015e4     36 5F 02 F6 | 	mov	arg01, local01
015e8     8C 4C B0 FD | 	call	#__system___string_concat
015ec     0C 6D 02 F6 | 	mov	local01, result1
015f0     08 00 00 FF 
015f4     6C FB 05 F1 | 	add	objptr, ##4460
015f8     FD 6C 62 FC | 	wrlong	local01, objptr
015fc     08 00 00 FF 
01600     6C FB 85 F1 | 	sub	objptr, ##4460
01604     01 6E 06 F1 | 	add	local02, #1
01608     20 6E 1E F2 | 	cmp	local02, #32 wcz
0160c     B4 FF 9F CD |  if_b	jmp	#LR__0010
01610     02 5F 02 F6 | 	mov	arg01, ptr__dat__
01614     6C F2 BF FD | 	call	#_addr
01618     08 00 00 FF 
0161c     70 FB 05 F1 | 	add	objptr, ##4464
01620     FD 18 62 FC | 	wrlong	result1, objptr
01624     0C 5F 02 F6 | 	mov	arg01, result1
01628     00 60 06 F6 | 	mov	arg02, #0
0162c     01 00 00 FF 
01630     B0 FB 85 F1 | 	sub	objptr, ##944
01634     84 25 B0 FD | 	call	#_trackerplayer_spin2_initModule
01638     01 60 06 F6 | 	mov	arg02, #1
0163c                 | ' 
0163c                 | ' ''---------- Set the (x,y) position of cursor
0163c                 | ' 
0163c                 | ' cursor_x:=x
0163c     06 00 00 FF 
01640     8C FB 85 F1 | 	sub	objptr, ##3468
01644     FD 02 48 FC | 	wrbyte	#1, objptr
01648                 | ' cursor_y:=y
01648     01 FA 05 F1 | 	add	objptr, #1
0164c     FD 02 48 FC | 	wrbyte	#1, objptr
01650                 | ' 
01650                 | ' 
01650                 | ' ma=addr(module)
01650                 | ' tracker.initmodule(ma,0)
01650                 | ' 
01650                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
01650     08 00 00 FF 
01654     3B FB 05 F1 | 	add	objptr, ##4411
01658     FD 6E 02 FB | 	rdlong	local02, objptr
0165c     37 75 02 F6 | 	mov	local05, local02
01660     08 00 00 FF 
01664     70 FB 85 F1 | 	sub	objptr, ##4464
01668     14 74 06 F1 | 	add	local05, #20
0166c                 | LR__0011
0166c     3A 6F 5A F2 | 	cmps	local02, local05 wcz
01670     40 00 90 3D |  if_ae	jmp	#LR__0012
01674     00 5E 06 F6 | 	mov	arg01, #0
01678     20 63 B0 FD | 	call	#__system___getiolock_0150
0167c     0C 5F 02 F6 | 	mov	arg01, result1
01680     B8 4B B0 FD | 	call	#__system___lockmem
01684                 | ' asm
01684     37 19 C2 FA | 	rdbyte	result1, local02
01688                 | ' return r
01688     0C 61 02 F6 | 	mov	arg02, result1
0168c     07 60 46 F7 | 	zerox	arg02, #7
01690     00 5E 06 F6 | 	mov	arg01, #0
01694     00 62 06 F6 | 	mov	arg03, #0
01698     10 4F B0 FD | 	call	#__system___basic_print_char
0169c     00 5E 06 F6 | 	mov	arg01, #0
016a0     F8 62 B0 FD | 	call	#__system___getiolock_0150
016a4     0C 01 68 FC | 	wrlong	#0, result1
016a8     00 18 06 F6 | 	mov	result1, #0
016ac     01 6E 06 F1 | 	add	local02, #1
016b0     B8 FF 9F FD | 	jmp	#LR__0011
016b4                 | LR__0012
016b4     08 00 00 FF 
016b8     74 FB 05 F1 | 	add	objptr, ##4468
016bc     FD 1E 68 FC | 	wrlong	#15, objptr
016c0                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
016c0     00 6C 06 F6 | 	mov	local01, #0
016c4     04 FA 85 F1 | 	sub	objptr, #4
016c8     FD 5E 02 FB | 	rdlong	arg01, objptr
016cc     02 00 00 FF 
016d0     38 5E 06 F1 | 	add	arg01, ##1080
016d4                 | ' asm
016d4     2F 71 C2 FA | 	rdbyte	local03, arg01
016d8                 | ' return r
016d8     07 70 46 F7 | 	zerox	local03, #7
016dc     4D 70 0E F2 | 	cmp	local03, #77 wz
016e0     01 6C 66 A6 |  if_e	neg	local01, #1
016e4     00 76 06 F6 | 	mov	local06, #0
016e8     FD 5E 02 FB | 	rdlong	arg01, objptr
016ec     08 00 00 FF 
016f0     70 FB 85 F1 | 	sub	objptr, ##4464
016f4     02 00 00 FF 
016f8     3A 5E 06 F1 | 	add	arg01, ##1082
016fc                 | ' asm
016fc     2F 19 C2 FA | 	rdbyte	result1, arg01
01700                 | ' return r
01700     0C 79 02 F6 | 	mov	local07, result1
01704     07 78 46 F7 | 	zerox	local07, #7
01708     4B 78 0E F2 | 	cmp	local07, #75 wz
0170c     01 76 66 A6 |  if_e	neg	local06, #1
01710     3B 6D CA F7 | 	test	local01, local06 wz
01714     08 00 00 5F 
01718     74 FB 05 51 |  if_ne	add	objptr, ##4468
0171c     FD 3E 68 5C |  if_ne	wrlong	#31, objptr
01720     08 00 00 5F 
01724     74 FB 85 51 |  if_ne	sub	objptr, ##4468
01728     02 60 06 F6 | 	mov	arg02, #2
0172c                 | ' 
0172c                 | ' ''---------- Set the (x,y) position of cursor
0172c                 | ' 
0172c                 | ' cursor_x:=x
0172c     34 FA 05 F1 | 	add	objptr, #52
01730     FD 02 48 FC | 	wrbyte	#1, objptr
01734                 | ' cursor_y:=y
01734     01 FA 05 F1 | 	add	objptr, #1
01738     FD 04 48 FC | 	wrbyte	#2, objptr
0173c     35 FA 85 F1 | 	sub	objptr, #53
01740                 | ' position 1,2 : print samples;" ";"samples module"
01740     00 5E 06 F6 | 	mov	arg01, #0
01744     54 62 B0 FD | 	call	#__system___getiolock_0150
01748     0C 5F 02 F6 | 	mov	arg01, result1
0174c     EC 4A B0 FD | 	call	#__system___lockmem
01750     00 18 06 F6 | 	mov	result1, #0
01754     08 00 00 FF 
01758     74 FB 05 F1 | 	add	objptr, ##4468
0175c     FD 60 02 FB | 	rdlong	arg02, objptr
01760     08 00 00 FF 
01764     74 FB 85 F1 | 	sub	objptr, ##4468
01768     00 5E 06 F6 | 	mov	arg01, #0
0176c     00 62 06 F6 | 	mov	arg03, #0
01770     0A 64 06 F6 | 	mov	arg04, #10
01774     C8 4E B0 FD | 	call	#__system___basic_print_integer
01778     42 00 00 FF 
0177c     99 61 06 F6 | 	mov	arg02, ##@LR__0462
01780     00 5E 06 F6 | 	mov	arg01, #0
01784     00 62 06 F6 | 	mov	arg03, #0
01788     6C 4E B0 FD | 	call	#__system___basic_print_string
0178c     42 00 00 FF 
01790     9B 61 06 F6 | 	mov	arg02, ##@LR__0463
01794     00 5E 06 F6 | 	mov	arg01, #0
01798     00 62 06 F6 | 	mov	arg03, #0
0179c     58 4E B0 FD | 	call	#__system___basic_print_string
017a0     00 5E 06 F6 | 	mov	arg01, #0
017a4     0A 60 06 F6 | 	mov	arg02, #10
017a8     00 62 06 F6 | 	mov	arg03, #0
017ac     FC 4D B0 FD | 	call	#__system___basic_print_char
017b0     01 18 06 F6 | 	mov	result1, #1
017b4     00 5E 06 F6 | 	mov	arg01, #0
017b8     E0 61 B0 FD | 	call	#__system___getiolock_0150
017bc     0C 01 68 FC | 	wrlong	#0, result1
017c0     00 18 06 F6 | 	mov	result1, #0
017c4     08 00 00 FF 
017c8     70 FB 05 F1 | 	add	objptr, ##4464
017cc     FD 5E 02 FB | 	rdlong	arg01, objptr
017d0     04 FA 05 F1 | 	add	objptr, #4
017d4     FD 60 02 FB | 	rdlong	arg02, objptr
017d8     08 00 00 FF 
017dc     74 FB 85 F1 | 	sub	objptr, ##4468
017e0     3C F3 BF FD | 	call	#_getinfo
017e4     07 00 00 FF 
017e8     BC FB 05 F1 | 	add	objptr, ##4028
017ec     00 46 B0 FD | 	call	#_audio019_spin2_start
017f0     0D 71 02 F6 | 	mov	local03, result2
017f4     A4 FB 05 F1 | 	add	objptr, #420
017f8     FD 18 62 FC | 	wrlong	result1, objptr
017fc     04 FA 05 F1 | 	add	objptr, #4
01800     FD 70 62 FC | 	wrlong	local03, objptr
01804     14 FA 05 F1 | 	add	objptr, #20
01808     FD 00 68 FC | 	wrlong	#0, objptr
0180c     04 FA 05 F1 | 	add	objptr, #4
01810     FD 00 68 FC | 	wrlong	#0, objptr
01814     04 FA 05 F1 | 	add	objptr, #4
01818     FD 00 68 FC | 	wrlong	#0, objptr
0181c     04 FA 05 F1 | 	add	objptr, #4
01820     FD 00 68 FC | 	wrlong	#0, objptr
01824     08 00 00 FF 
01828     84 FB 85 F1 | 	sub	objptr, ##4484
0182c                 | ' getinfo(ma,samples)
0182c                 | ' 
0182c                 | ' cog,base=paula.start()
0182c                 | ' 
0182c                 | ' old1=0 : old2=0 :old3=0 : old4=0
0182c                 | ' 
0182c                 | ' 
0182c                 | ' 
0182c                 | ' 'position 0,26 : v030.writeln(ss$)
0182c                 | ' 'print"123456789012345678901234567890"
0182c                 | ' do
0182c                 | LR__0013
0182c     01 5E 06 F6 | 	mov	arg01, #1
01830     0C 09 B0 FD | 	call	#_hng030rm_spin2_waitvbl
01834     06 00 00 FF 
01838     C0 FB 05 F1 | 	add	objptr, ##3520
0183c     5C 2A B0 FD | 	call	#_trackerplayer_spin2_tick
01840     06 00 00 FF 
01844     C0 FB 85 F1 | 	sub	objptr, ##3520
01848     1B 18 62 FD | 	getrnd	result1
0184c     0C 99 02 F6 | 	mov	muldiva_, result1
01850     01 00 00 FF 
01854     1C 9A 06 F6 | 	mov	muldivb_, ##540
01858     C2 00 A0 FD | 	call	#unsdivide_
0185c     08 00 00 FF 
01860     88 FB 05 F1 | 	add	objptr, ##4488
01864     FD 98 62 FC | 	wrlong	muldiva_, objptr
01868                 | '     
01868                 | ' '    dlentry=lpeek(dltest) : for i=0 to 539:   rr=(2*i) mod 540+(2*i)/ 540 : lpoke dltest+4*i, dlcopy(rr) :next i 
01868                 | '      
01868                 | '     if tracker.trigger(0)<>old1 then 
01868     D2 FB 85 F1 | 	sub	objptr, #466
0186c     FD 6C C2 FA | 	rdbyte	local01, objptr
01870     C2 FB 05 F1 | 	add	objptr, #450
01874     FD 7A 02 FB | 	rdlong	local08, objptr
01878     08 00 00 FF 
0187c     78 FB 85 F1 | 	sub	objptr, ##4472
01880     3D 6D 0A F2 | 	cmp	local01, local08 wz
01884     8C 00 90 AD |  if_e	jmp	#LR__0014
01888     07 00 00 FF 
0188c     B6 FB 05 F1 | 	add	objptr, ##4022
01890     FD 6C C2 FA | 	rdbyte	local01, objptr
01894     C2 FB 05 F1 | 	add	objptr, #450
01898     FD 6C 62 FC | 	wrlong	local01, objptr
0189c     14 FA 85 F1 | 	sub	objptr, #20
018a0     FD 5E 02 FB | 	rdlong	arg01, objptr
018a4     08 5E 06 F1 | 	add	arg01, #8
018a8     01 00 00 FF 
018ac     FD FA 85 F1 | 	sub	objptr, ##765
018b0     FD 60 02 FB | 	rdlong	arg02, objptr
018b4     1E 60 26 F4 | 	bith	arg02, #30
018b8                 | ' asm
018b8     2F 61 62 FC | 	wrlong	arg02, arg01
018bc     01 00 00 FF 
018c0     FD FA 05 F1 | 	add	objptr, ##765
018c4     FD 5E 02 FB | 	rdlong	arg01, objptr
018c8     0C 5E 06 F1 | 	add	arg01, #12
018cc     01 00 00 FF 
018d0     E9 FA 85 F1 | 	sub	objptr, ##745
018d4     FD 60 E2 FA | 	rdword	arg02, objptr
018d8     08 FA 05 F1 | 	add	objptr, #8
018dc     FD 78 02 FB | 	rdlong	local07, objptr
018e0     3C 61 82 F1 | 	sub	arg02, local07
018e4                 | ' asm
018e4     2F 61 62 FC | 	wrlong	arg02, arg01
018e8     01 00 00 FF 
018ec     E1 FA 05 F1 | 	add	objptr, ##737
018f0     FD 5E 02 FB | 	rdlong	arg01, objptr
018f4     10 5E 06 F1 | 	add	arg01, #16
018f8     01 00 00 FF 
018fc     E9 FA 85 F1 | 	sub	objptr, ##745
01900     FD 60 E2 FA | 	rdword	arg02, objptr
01904     07 00 00 FF 
01908     7B FA 85 F1 | 	sub	objptr, ##3707
0190c     0F 60 46 F7 | 	zerox	arg02, #15
01910                 | ' asm
01910     2F 61 62 FC | 	wrlong	arg02, arg01
01914                 | LR__0014
01914     08 00 00 FF 
01918     64 FB 05 F1 | 	add	objptr, ##4452
0191c     FD 5E 02 FB | 	rdlong	arg01, objptr
01920     14 5E 06 F1 | 	add	arg01, #20
01924     01 00 00 FF 
01928     A5 FA 85 F1 | 	sub	objptr, ##677
0192c     FD 7A 02 FB | 	rdlong	local08, objptr
01930     10 FA 05 F1 | 	add	objptr, #16
01934     FD 78 02 FB | 	rdlong	local07, objptr
01938     3C 7B 02 F1 | 	add	local08, local07
0193c     27 FB 85 F1 | 	sub	objptr, #295
01940     FD 7C 02 FB | 	rdlong	local09, objptr
01944     3E 7B 02 FD | 	qmul	local08, local09
01948     18 60 62 FD | 	getqx	arg02
0194c                 | ' asm
0194c     2F 61 52 FC | 	wrword	arg02, arg01
01950     01 00 00 FF 
01954     BC FB 05 F1 | 	add	objptr, ##956
01958     FD 5E 02 FB | 	rdlong	arg01, objptr
0195c     16 5E 06 F1 | 	add	arg01, #22
01960                 | ' asm
01960     0C 00 80 FF 
01964     2F 01 58 FC | 	wrword	##6144, arg01
01968     FD 5E 02 FB | 	rdlong	arg01, objptr
0196c     18 5E 06 F1 | 	add	arg01, #24
01970     01 00 00 FF 
01974     C5 FA 85 F1 | 	sub	objptr, ##709
01978     FD 60 02 FB | 	rdlong	arg02, objptr
0197c     10 FA 05 F1 | 	add	objptr, #16
01980     FD 78 02 FB | 	rdlong	local07, objptr
01984     3C 61 02 F1 | 	add	arg02, local07
01988                 | ' asm
01988     2F 61 52 FC | 	wrword	arg02, arg01
0198c     01 00 00 FF 
01990     B5 FA 05 F1 | 	add	objptr, ##693
01994     FD 5E 02 FB | 	rdlong	arg01, objptr
01998     1A 5E 06 F1 | 	add	arg01, #26
0199c                 | ' asm
0199c     2F 03 58 FC | 	wrword	#1, arg01
019a0                 | '   
019a0                 | '   
019a0                 | '     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
019a0                 | '     dpoke base+22, 8192-2048
019a0                 | '     dpoke base+24, tracker.currPeriod(0)+tracker.deltaperiod(0)
019a0                 | '     dpoke base+26, 1
019a0                 | ' 
019a0                 | '  
019a0                 | '     if tracker.trigger(1) <> old2  then
019a0     AD FB 85 F1 | 	sub	objptr, #429
019a4     FD 6C C2 FA | 	rdbyte	local01, objptr
019a8     C5 FB 05 F1 | 	add	objptr, #453
019ac     FD 7A 02 FB | 	rdlong	local08, objptr
019b0     08 00 00 FF 
019b4     7C FB 85 F1 | 	sub	objptr, ##4476
019b8     3D 6D 0A F2 | 	cmp	local01, local08 wz
019bc     9C 00 90 AD |  if_e	jmp	#LR__0015
019c0     07 00 00 FF 
019c4     B7 FB 05 F1 | 	add	objptr, ##4023
019c8     FD 6C C2 FA | 	rdbyte	local01, objptr
019cc     C5 FB 05 F1 | 	add	objptr, #453
019d0     FD 6C 62 FC | 	wrlong	local01, objptr
019d4     18 FA 85 F1 | 	sub	objptr, #24
019d8     FD 5E 02 FB | 	rdlong	arg01, objptr
019dc     28 5E 06 F1 | 	add	arg01, #40
019e0     01 00 00 FF 
019e4     F9 FA 85 F1 | 	sub	objptr, ##761
019e8     FD 60 02 FB | 	rdlong	arg02, objptr
019ec     1E 60 26 F4 | 	bith	arg02, #30
019f0                 | ' asm
019f0     2F 61 62 FC | 	wrlong	arg02, arg01
019f4     20 5E 06 F6 | 	mov	arg01, #32
019f8     01 00 00 FF 
019fc     F9 FA 05 F1 | 	add	objptr, ##761
01a00     FD 7A 02 FB | 	rdlong	local08, objptr
01a04     3D 5F 02 F1 | 	add	arg01, local08
01a08     0C 5E 06 F1 | 	add	arg01, #12
01a0c     01 00 00 FF 
01a10     E7 FA 85 F1 | 	sub	objptr, ##743
01a14     FD 60 E2 FA | 	rdword	arg02, objptr
01a18     0A FA 05 F1 | 	add	objptr, #10
01a1c     FD 78 02 FB | 	rdlong	local07, objptr
01a20     3C 61 82 F1 | 	sub	arg02, local07
01a24                 | ' asm
01a24     2F 61 62 FC | 	wrlong	arg02, arg01
01a28     20 5E 06 F6 | 	mov	arg01, #32
01a2c     01 00 00 FF 
01a30     DD FA 05 F1 | 	add	objptr, ##733
01a34     FD 7A 02 FB | 	rdlong	local08, objptr
01a38     3D 5F 02 F1 | 	add	arg01, local08
01a3c     10 5E 06 F1 | 	add	arg01, #16
01a40     01 00 00 FF 
01a44     E7 FA 85 F1 | 	sub	objptr, ##743
01a48     FD 60 E2 FA | 	rdword	arg02, objptr
01a4c     07 00 00 FF 
01a50     7D FA 85 F1 | 	sub	objptr, ##3709
01a54     0F 60 46 F7 | 	zerox	arg02, #15
01a58                 | ' asm
01a58     2F 61 62 FC | 	wrlong	arg02, arg01
01a5c                 | LR__0015
01a5c     20 5E 06 F6 | 	mov	arg01, #32
01a60     08 00 00 FF 
01a64     64 FB 05 F1 | 	add	objptr, ##4452
01a68     FD 7A 02 FB | 	rdlong	local08, objptr
01a6c     3D 5F 02 F1 | 	add	arg01, local08
01a70     14 5E 06 F1 | 	add	arg01, #20
01a74     01 00 00 FF 
01a78     A1 FA 85 F1 | 	sub	objptr, ##673
01a7c     FD 7A 02 FB | 	rdlong	local08, objptr
01a80     10 FA 05 F1 | 	add	objptr, #16
01a84     FD 78 02 FB | 	rdlong	local07, objptr
01a88     3C 7B 02 F1 | 	add	local08, local07
01a8c     2B FB 85 F1 | 	sub	objptr, #299
01a90     FD 7C 02 FB | 	rdlong	local09, objptr
01a94     3E 7B 02 FD | 	qmul	local08, local09
01a98     18 60 62 FD | 	getqx	arg02
01a9c                 | ' asm
01a9c     2F 61 52 FC | 	wrword	arg02, arg01
01aa0     20 5E 06 F6 | 	mov	arg01, #32
01aa4     01 00 00 FF 
01aa8     BC FB 05 F1 | 	add	objptr, ##956
01aac     FD 7A 02 FB | 	rdlong	local08, objptr
01ab0     3D 5F 02 F1 | 	add	arg01, local08
01ab4     16 5E 06 F1 | 	add	arg01, #22
01ab8                 | ' asm
01ab8     14 00 80 FF 
01abc     2F 01 58 FC | 	wrword	##10240, arg01
01ac0     20 5E 06 F6 | 	mov	arg01, #32
01ac4     FD 7A 02 FB | 	rdlong	local08, objptr
01ac8     3D 5F 02 F1 | 	add	arg01, local08
01acc     18 5E 06 F1 | 	add	arg01, #24
01ad0     01 00 00 FF 
01ad4     C1 FA 85 F1 | 	sub	objptr, ##705
01ad8     FD 60 02 FB | 	rdlong	arg02, objptr
01adc     10 FA 05 F1 | 	add	objptr, #16
01ae0     FD 78 02 FB | 	rdlong	local07, objptr
01ae4     3C 61 02 F1 | 	add	arg02, local07
01ae8                 | ' asm
01ae8     2F 61 52 FC | 	wrword	arg02, arg01
01aec     20 5E 06 F6 | 	mov	arg01, #32
01af0     01 00 00 FF 
01af4     B1 FA 05 F1 | 	add	objptr, ##689
01af8     FD 7A 02 FB | 	rdlong	local08, objptr
01afc     3D 5F 02 F1 | 	add	arg01, local08
01b00     1A 5E 06 F1 | 	add	arg01, #26
01b04                 | ' asm
01b04     2F 03 58 FC | 	wrword	#1, arg01
01b08                 | '       
01b08                 | '     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
01b08                 | '     dpoke 32+base+22, 8192+2048
01b08                 | '     dpoke 32+base+24, tracker.currPeriod(1)+tracker.deltaperiod(1)
01b08                 | '     dpoke 32+base+26, 1
01b08                 | ' 
01b08                 | '    if tracker.trigger(2) <> old3  then
01b08     AC FB 85 F1 | 	sub	objptr, #428
01b0c     FD 6C C2 FA | 	rdbyte	local01, objptr
01b10     C8 FB 05 F1 | 	add	objptr, #456
01b14     FD 7A 02 FB | 	rdlong	local08, objptr
01b18     08 00 00 FF 
01b1c     80 FB 85 F1 | 	sub	objptr, ##4480
01b20     3D 6D 0A F2 | 	cmp	local01, local08 wz
01b24     9C 00 90 AD |  if_e	jmp	#LR__0016
01b28     07 00 00 FF 
01b2c     B8 FB 05 F1 | 	add	objptr, ##4024
01b30     FD 6C C2 FA | 	rdbyte	local01, objptr
01b34     C8 FB 05 F1 | 	add	objptr, #456
01b38     FD 6C 62 FC | 	wrlong	local01, objptr
01b3c     1C FA 85 F1 | 	sub	objptr, #28
01b40     FD 5E 02 FB | 	rdlong	arg01, objptr
01b44     48 5E 06 F1 | 	add	arg01, #72
01b48     01 00 00 FF 
01b4c     F5 FA 85 F1 | 	sub	objptr, ##757
01b50     FD 60 02 FB | 	rdlong	arg02, objptr
01b54     1E 60 26 F4 | 	bith	arg02, #30
01b58                 | ' asm
01b58     2F 61 62 FC | 	wrlong	arg02, arg01
01b5c     40 5E 06 F6 | 	mov	arg01, #64
01b60     01 00 00 FF 
01b64     F5 FA 05 F1 | 	add	objptr, ##757
01b68     FD 7A 02 FB | 	rdlong	local08, objptr
01b6c     3D 5F 02 F1 | 	add	arg01, local08
01b70     0C 5E 06 F1 | 	add	arg01, #12
01b74     01 00 00 FF 
01b78     E5 FA 85 F1 | 	sub	objptr, ##741
01b7c     FD 60 E2 FA | 	rdword	arg02, objptr
01b80     0C FA 05 F1 | 	add	objptr, #12
01b84     FD 78 02 FB | 	rdlong	local07, objptr
01b88     3C 61 82 F1 | 	sub	arg02, local07
01b8c                 | ' asm
01b8c     2F 61 62 FC | 	wrlong	arg02, arg01
01b90     40 5E 06 F6 | 	mov	arg01, #64
01b94     01 00 00 FF 
01b98     D9 FA 05 F1 | 	add	objptr, ##729
01b9c     FD 7A 02 FB | 	rdlong	local08, objptr
01ba0     3D 5F 02 F1 | 	add	arg01, local08
01ba4     10 5E 06 F1 | 	add	arg01, #16
01ba8     01 00 00 FF 
01bac     E5 FA 85 F1 | 	sub	objptr, ##741
01bb0     FD 60 E2 FA | 	rdword	arg02, objptr
01bb4     07 00 00 FF 
01bb8     7F FA 85 F1 | 	sub	objptr, ##3711
01bbc     0F 60 46 F7 | 	zerox	arg02, #15
01bc0                 | ' asm
01bc0     2F 61 62 FC | 	wrlong	arg02, arg01
01bc4                 | LR__0016
01bc4     40 5E 06 F6 | 	mov	arg01, #64
01bc8     08 00 00 FF 
01bcc     64 FB 05 F1 | 	add	objptr, ##4452
01bd0     FD 7A 02 FB | 	rdlong	local08, objptr
01bd4     3D 5F 02 F1 | 	add	arg01, local08
01bd8     14 5E 06 F1 | 	add	arg01, #20
01bdc     01 00 00 FF 
01be0     9D FA 85 F1 | 	sub	objptr, ##669
01be4     FD 7A 02 FB | 	rdlong	local08, objptr
01be8     10 FA 05 F1 | 	add	objptr, #16
01bec     FD 78 02 FB | 	rdlong	local07, objptr
01bf0     3C 7B 02 F1 | 	add	local08, local07
01bf4     2F FB 85 F1 | 	sub	objptr, #303
01bf8     FD 7C 02 FB | 	rdlong	local09, objptr
01bfc     3E 7B 02 FD | 	qmul	local08, local09
01c00     18 60 62 FD | 	getqx	arg02
01c04                 | ' asm
01c04     2F 61 52 FC | 	wrword	arg02, arg01
01c08     40 5E 06 F6 | 	mov	arg01, #64
01c0c     01 00 00 FF 
01c10     BC FB 05 F1 | 	add	objptr, ##956
01c14     FD 7A 02 FB | 	rdlong	local08, objptr
01c18     3D 5F 02 F1 | 	add	arg01, local08
01c1c     16 5E 06 F1 | 	add	arg01, #22
01c20                 | ' asm
01c20     14 00 80 FF 
01c24     2F 01 58 FC | 	wrword	##10240, arg01
01c28     40 5E 06 F6 | 	mov	arg01, #64
01c2c     FD 7A 02 FB | 	rdlong	local08, objptr
01c30     3D 5F 02 F1 | 	add	arg01, local08
01c34     18 5E 06 F1 | 	add	arg01, #24
01c38     01 00 00 FF 
01c3c     BD FA 85 F1 | 	sub	objptr, ##701
01c40     FD 60 02 FB | 	rdlong	arg02, objptr
01c44     10 FA 05 F1 | 	add	objptr, #16
01c48     FD 78 02 FB | 	rdlong	local07, objptr
01c4c     3C 61 02 F1 | 	add	arg02, local07
01c50                 | ' asm
01c50     2F 61 52 FC | 	wrword	arg02, arg01
01c54     40 5E 06 F6 | 	mov	arg01, #64
01c58     01 00 00 FF 
01c5c     AD FA 05 F1 | 	add	objptr, ##685
01c60     FD 7A 02 FB | 	rdlong	local08, objptr
01c64     3D 5F 02 F1 | 	add	arg01, local08
01c68     1A 5E 06 F1 | 	add	arg01, #26
01c6c                 | ' asm
01c6c     2F 03 58 FC | 	wrword	#1, arg01
01c70                 | '     
01c70                 | '     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
01c70                 | '     dpoke 64+base+22, 8192+2048
01c70                 | '     dpoke 64+base+24, tracker.currPeriod(2)+tracker.deltaperiod(2)
01c70                 | '     dpoke 64+base+26, 1
01c70                 | ' 
01c70                 | '     if tracker.trigger(3) <> old4 then
01c70     AB FB 85 F1 | 	sub	objptr, #427
01c74     FD 6C C2 FA | 	rdbyte	local01, objptr
01c78     CB FB 05 F1 | 	add	objptr, #459
01c7c     FD 7A 02 FB | 	rdlong	local08, objptr
01c80     08 00 00 FF 
01c84     84 FB 85 F1 | 	sub	objptr, ##4484
01c88     3D 6D 0A F2 | 	cmp	local01, local08 wz
01c8c     9C 00 90 AD |  if_e	jmp	#LR__0017
01c90     07 00 00 FF 
01c94     B9 FB 05 F1 | 	add	objptr, ##4025
01c98     FD 6C C2 FA | 	rdbyte	local01, objptr
01c9c     CB FB 05 F1 | 	add	objptr, #459
01ca0     FD 6C 62 FC | 	wrlong	local01, objptr
01ca4     20 FA 85 F1 | 	sub	objptr, #32
01ca8     FD 5E 02 FB | 	rdlong	arg01, objptr
01cac     68 5E 06 F1 | 	add	arg01, #104
01cb0     01 00 00 FF 
01cb4     F1 FA 85 F1 | 	sub	objptr, ##753
01cb8     FD 60 02 FB | 	rdlong	arg02, objptr
01cbc     1E 60 26 F4 | 	bith	arg02, #30
01cc0                 | ' asm
01cc0     2F 61 62 FC | 	wrlong	arg02, arg01
01cc4     60 5E 06 F6 | 	mov	arg01, #96
01cc8     01 00 00 FF 
01ccc     F1 FA 05 F1 | 	add	objptr, ##753
01cd0     FD 7A 02 FB | 	rdlong	local08, objptr
01cd4     3D 5F 02 F1 | 	add	arg01, local08
01cd8     0C 5E 06 F1 | 	add	arg01, #12
01cdc     01 00 00 FF 
01ce0     E3 FA 85 F1 | 	sub	objptr, ##739
01ce4     FD 60 E2 FA | 	rdword	arg02, objptr
01ce8     0E FA 05 F1 | 	add	objptr, #14
01cec     FD 78 02 FB | 	rdlong	local07, objptr
01cf0     3C 61 82 F1 | 	sub	arg02, local07
01cf4                 | ' asm
01cf4     2F 61 62 FC | 	wrlong	arg02, arg01
01cf8     60 5E 06 F6 | 	mov	arg01, #96
01cfc     01 00 00 FF 
01d00     D5 FA 05 F1 | 	add	objptr, ##725
01d04     FD 7A 02 FB | 	rdlong	local08, objptr
01d08     3D 5F 02 F1 | 	add	arg01, local08
01d0c     10 5E 06 F1 | 	add	arg01, #16
01d10     01 00 00 FF 
01d14     E3 FA 85 F1 | 	sub	objptr, ##739
01d18     FD 60 E2 FA | 	rdword	arg02, objptr
01d1c     07 00 00 FF 
01d20     81 FA 85 F1 | 	sub	objptr, ##3713
01d24     0F 60 46 F7 | 	zerox	arg02, #15
01d28                 | ' asm
01d28     2F 61 62 FC | 	wrlong	arg02, arg01
01d2c                 | LR__0017
01d2c     60 5E 06 F6 | 	mov	arg01, #96
01d30     08 00 00 FF 
01d34     64 FB 05 F1 | 	add	objptr, ##4452
01d38     FD 7A 02 FB | 	rdlong	local08, objptr
01d3c     3D 5F 02 F1 | 	add	arg01, local08
01d40     14 5E 06 F1 | 	add	arg01, #20
01d44     01 00 00 FF 
01d48     99 FA 85 F1 | 	sub	objptr, ##665
01d4c     FD 7A 02 FB | 	rdlong	local08, objptr
01d50     10 FA 05 F1 | 	add	objptr, #16
01d54     FD 78 02 FB | 	rdlong	local07, objptr
01d58     3C 7B 02 F1 | 	add	local08, local07
01d5c     33 FB 85 F1 | 	sub	objptr, #307
01d60     FD 7C 02 FB | 	rdlong	local09, objptr
01d64     3E 7B 02 FD | 	qmul	local08, local09
01d68     18 60 62 FD | 	getqx	arg02
01d6c                 | ' asm
01d6c     2F 61 52 FC | 	wrword	arg02, arg01
01d70     60 5E 06 F6 | 	mov	arg01, #96
01d74     01 00 00 FF 
01d78     BC FB 05 F1 | 	add	objptr, ##956
01d7c     FD 7A 02 FB | 	rdlong	local08, objptr
01d80     3D 5F 02 F1 | 	add	arg01, local08
01d84     16 5E 06 F1 | 	add	arg01, #22
01d88                 | ' asm
01d88     0C 00 80 FF 
01d8c     2F 01 58 FC | 	wrword	##6144, arg01
01d90     60 5E 06 F6 | 	mov	arg01, #96
01d94     FD 7A 02 FB | 	rdlong	local08, objptr
01d98     3D 5F 02 F1 | 	add	arg01, local08
01d9c     18 5E 06 F1 | 	add	arg01, #24
01da0     01 00 00 FF 
01da4     B9 FA 85 F1 | 	sub	objptr, ##697
01da8     FD 60 02 FB | 	rdlong	arg02, objptr
01dac     10 FA 05 F1 | 	add	objptr, #16
01db0     FD 78 02 FB | 	rdlong	local07, objptr
01db4     3C 61 02 F1 | 	add	arg02, local07
01db8                 | ' asm
01db8     2F 61 52 FC | 	wrword	arg02, arg01
01dbc     60 5E 06 F6 | 	mov	arg01, #96
01dc0     01 00 00 FF 
01dc4     A9 FA 05 F1 | 	add	objptr, ##681
01dc8     FD 7A 02 FB | 	rdlong	local08, objptr
01dcc     08 00 00 FF 
01dd0     64 FB 85 F1 | 	sub	objptr, ##4452
01dd4     3D 5F 02 F1 | 	add	arg01, local08
01dd8     1A 5E 06 F1 | 	add	arg01, #26
01ddc     01 60 06 F6 | 	mov	arg02, #1
01de0                 | ' asm
01de0     2F 03 58 FC | 	wrword	#1, arg01
01de4     C4 EA BF FD | 	call	#_test
01de8     40 FA 9F FD | 	jmp	#LR__0013
01dec     AF F0 03 F6 | 	mov	ptra, fp
01df0     BA 00 A0 FD | 	call	#popregs_
01df4                 | _program_ret
01df4     2D 00 64 FD | 	ret
01df8                 | 
01df8                 | ' 
01df8                 | ' 
01df8                 | ' ''---------- putpixel - put a pixel on the screen
01df8                 | ' 
01df8                 | ' pub putpixel1(x,y,c) |byte b
01df8                 | _hng030rm_spin2_putpixel1
01df8                 | ' 
01df8                 | ' 
01df8                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01df8     00 1E 06 F6 | 	mov	_var01, #0
01dfc     00 5E 5E F2 | 	cmps	arg01, #0 wcz
01e00     01 1E 66 36 |  if_ae	neg	_var01, #1
01e04     00 20 06 F6 | 	mov	_var02, #0
01e08     90 FA 05 F1 | 	add	objptr, #144
01e0c     FD 22 02 FB | 	rdlong	_var03, objptr
01e10     05 22 66 F0 | 	shl	_var03, #5
01e14     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
01e18     01 20 66 C6 |  if_b	neg	_var02, #1
01e1c     10 1F 02 F5 | 	and	_var01, _var02
01e20     00 24 06 F6 | 	mov	_var04, #0
01e24     00 60 5E F2 | 	cmps	arg02, #0 wcz
01e28     01 24 66 36 |  if_ae	neg	_var04, #1
01e2c     12 1F 02 F5 | 	and	_var01, _var04
01e30     00 26 06 F6 | 	mov	_var05, #0
01e34     04 FA 05 F1 | 	add	objptr, #4
01e38     FD 28 02 FB | 	rdlong	_var06, objptr
01e3c     94 FA 85 F1 | 	sub	objptr, #148
01e40     14 61 5A F2 | 	cmps	arg02, _var06 wcz
01e44     01 26 66 C6 |  if_b	neg	_var05, #1
01e48     13 1F CA F7 | 	test	_var01, _var05 wz
01e4c     90 00 90 AD |  if_e	jmp	#LR__0020
01e50                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01e50     FD 1E 02 FB | 	rdlong	_var01, objptr
01e54     90 FA 05 F1 | 	add	objptr, #144
01e58     FD 20 02 FB | 	rdlong	_var02, objptr
01e5c     90 FA 85 F1 | 	sub	objptr, #144
01e60     02 20 66 F0 | 	shl	_var02, #2
01e64     30 21 02 FD | 	qmul	_var02, arg02
01e68     18 2A 62 FD | 	getqx	_var07
01e6c     15 1F 02 F1 | 	add	_var01, _var07
01e70     2F 25 02 F6 | 	mov	_var04, arg01
01e74     03 24 46 F0 | 	shr	_var04, #3
01e78     12 1F 02 F1 | 	add	_var01, _var04
01e7c     0F 2D C2 FA | 	rdbyte	_var08, _var01
01e80                 | '     if (c==0)
01e80     00 62 0E F2 | 	cmp	arg03, #0 wz
01e84     18 00 90 5D |  if_ne	jmp	#LR__0018
01e88                 | '       b:=b & !(1<<(x//8))
01e88     2F 23 52 F6 | 	abs	_var03, arg01 wc
01e8c     07 22 06 F5 | 	and	_var03, #7
01e90     11 23 62 C6 |  if_b	neg	_var03, _var03
01e94     11 21 C2 F9 | 	decod	_var02, _var03
01e98     10 2D 22 F5 | 	andn	_var08, _var02
01e9c                 | '     else
01e9c     14 00 90 FD | 	jmp	#LR__0019
01ea0                 | LR__0018
01ea0                 | '       b:=b |(1<<(x//8))
01ea0     2F 23 52 F6 | 	abs	_var03, arg01 wc
01ea4     07 22 06 F5 | 	and	_var03, #7
01ea8     11 23 62 C6 |  if_b	neg	_var03, _var03
01eac     11 21 C2 F9 | 	decod	_var02, _var03
01eb0     10 2D 42 F5 | 	or	_var08, _var02
01eb4                 | LR__0019
01eb4                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01eb4     FD 1E 02 FB | 	rdlong	_var01, objptr
01eb8     90 FA 05 F1 | 	add	objptr, #144
01ebc     FD 20 02 FB | 	rdlong	_var02, objptr
01ec0     90 FA 85 F1 | 	sub	objptr, #144
01ec4     02 20 66 F0 | 	shl	_var02, #2
01ec8     30 21 02 FD | 	qmul	_var02, arg02
01ecc     18 2A 62 FD | 	getqx	_var07
01ed0     15 1F 02 F1 | 	add	_var01, _var07
01ed4     03 5E 46 F0 | 	shr	arg01, #3
01ed8     2F 1F 02 F1 | 	add	_var01, arg01
01edc     0F 2D 42 FC | 	wrbyte	_var08, _var01
01ee0                 | LR__0020
01ee0                 | _hng030rm_spin2_putpixel1_ret
01ee0     2D 00 64 FD | 	ret
01ee4                 | 
01ee4                 | ' 
01ee4                 | ' 
01ee4                 | ' pub putpixel2(x,y,c) |byte b
01ee4                 | _hng030rm_spin2_putpixel2
01ee4                 | ' 
01ee4                 | ' 
01ee4                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01ee4     00 1E 06 F6 | 	mov	_var01, #0
01ee8     00 5E 5E F2 | 	cmps	arg01, #0 wcz
01eec     01 1E 66 36 |  if_ae	neg	_var01, #1
01ef0     00 20 06 F6 | 	mov	_var02, #0
01ef4     90 FA 05 F1 | 	add	objptr, #144
01ef8     FD 22 02 FB | 	rdlong	_var03, objptr
01efc     04 22 66 F0 | 	shl	_var03, #4
01f00     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
01f04     01 20 66 C6 |  if_b	neg	_var02, #1
01f08     10 1F 02 F5 | 	and	_var01, _var02
01f0c     00 24 06 F6 | 	mov	_var04, #0
01f10     00 60 5E F2 | 	cmps	arg02, #0 wcz
01f14     01 24 66 36 |  if_ae	neg	_var04, #1
01f18     12 1F 02 F5 | 	and	_var01, _var04
01f1c     00 26 06 F6 | 	mov	_var05, #0
01f20     04 FA 05 F1 | 	add	objptr, #4
01f24     FD 28 02 FB | 	rdlong	_var06, objptr
01f28     94 FA 85 F1 | 	sub	objptr, #148
01f2c     14 61 5A F2 | 	cmps	arg02, _var06 wcz
01f30     01 26 66 C6 |  if_b	neg	_var05, #1
01f34     13 1F CA F7 | 	test	_var01, _var05 wz
01f38     90 00 90 AD |  if_e	jmp	#LR__0021
01f3c                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01f3c     FD 1E 02 FB | 	rdlong	_var01, objptr
01f40     90 FA 05 F1 | 	add	objptr, #144
01f44     FD 20 02 FB | 	rdlong	_var02, objptr
01f48     90 FA 85 F1 | 	sub	objptr, #144
01f4c     02 20 66 F0 | 	shl	_var02, #2
01f50     30 21 02 FD | 	qmul	_var02, arg02
01f54     18 2A 62 FD | 	getqx	_var07
01f58     15 1F 02 F1 | 	add	_var01, _var07
01f5c     2F 25 02 F6 | 	mov	_var04, arg01
01f60     02 24 46 F0 | 	shr	_var04, #2
01f64     12 1F 02 F1 | 	add	_var01, _var04
01f68     0F 2D C2 FA | 	rdbyte	_var08, _var01
01f6c                 | '     b:=b & !(%11<<((x//4)<<1))
01f6c     2F 23 52 F6 | 	abs	_var03, arg01 wc
01f70     03 22 06 F5 | 	and	_var03, #3
01f74     11 23 62 C6 |  if_b	neg	_var03, _var03
01f78     01 22 66 F0 | 	shl	_var03, #1
01f7c     03 20 06 F6 | 	mov	_var02, #3
01f80     11 21 62 F0 | 	shl	_var02, _var03
01f84     10 2D 22 F5 | 	andn	_var08, _var02
01f88                 | '     b:=b |(c<<((x//4)<<1))
01f88     2F 23 52 F6 | 	abs	_var03, arg01 wc
01f8c     03 22 06 F5 | 	and	_var03, #3
01f90     11 23 62 C6 |  if_b	neg	_var03, _var03
01f94     01 22 66 F0 | 	shl	_var03, #1
01f98     11 63 62 F0 | 	shl	arg03, _var03
01f9c     31 2D 42 F5 | 	or	_var08, arg03
01fa0                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
01fa0     FD 1E 02 FB | 	rdlong	_var01, objptr
01fa4     90 FA 05 F1 | 	add	objptr, #144
01fa8     FD 20 02 FB | 	rdlong	_var02, objptr
01fac     90 FA 85 F1 | 	sub	objptr, #144
01fb0     02 20 66 F0 | 	shl	_var02, #2
01fb4     30 21 02 FD | 	qmul	_var02, arg02
01fb8     18 2A 62 FD | 	getqx	_var07
01fbc     15 1F 02 F1 | 	add	_var01, _var07
01fc0     02 5E 46 F0 | 	shr	arg01, #2
01fc4     2F 1F 02 F1 | 	add	_var01, arg01
01fc8     0F 2D 42 FC | 	wrbyte	_var08, _var01
01fcc                 | LR__0021
01fcc                 | _hng030rm_spin2_putpixel2_ret
01fcc     2D 00 64 FD | 	ret
01fd0                 | 
01fd0                 | ' 
01fd0                 | ' 
01fd0                 | ' pub putpixel4(x,y,c) |byte b
01fd0                 | _hng030rm_spin2_putpixel4
01fd0                 | ' 
01fd0                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01fd0     00 1E 06 F6 | 	mov	_var01, #0
01fd4     00 5E 5E F2 | 	cmps	arg01, #0 wcz
01fd8     01 1E 66 36 |  if_ae	neg	_var01, #1
01fdc     00 20 06 F6 | 	mov	_var02, #0
01fe0     90 FA 05 F1 | 	add	objptr, #144
01fe4     FD 22 02 FB | 	rdlong	_var03, objptr
01fe8     04 22 66 F0 | 	shl	_var03, #4
01fec     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
01ff0     01 20 66 C6 |  if_b	neg	_var02, #1
01ff4     10 1F 02 F5 | 	and	_var01, _var02
01ff8     00 24 06 F6 | 	mov	_var04, #0
01ffc     00 60 5E F2 | 	cmps	arg02, #0 wcz
02000     01 24 66 36 |  if_ae	neg	_var04, #1
02004     12 1F 02 F5 | 	and	_var01, _var04
02008     00 26 06 F6 | 	mov	_var05, #0
0200c     04 FA 05 F1 | 	add	objptr, #4
02010     FD 28 02 FB | 	rdlong	_var06, objptr
02014     94 FA 85 F1 | 	sub	objptr, #148
02018     14 61 5A F2 | 	cmps	arg02, _var06 wcz
0201c     01 26 66 C6 |  if_b	neg	_var05, #1
02020     13 1F CA F7 | 	test	_var01, _var05 wz
02024     90 00 90 AD |  if_e	jmp	#LR__0022
02028                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02028     FD 1E 02 FB | 	rdlong	_var01, objptr
0202c     90 FA 05 F1 | 	add	objptr, #144
02030     FD 20 02 FB | 	rdlong	_var02, objptr
02034     90 FA 85 F1 | 	sub	objptr, #144
02038     02 20 66 F0 | 	shl	_var02, #2
0203c     30 21 02 FD | 	qmul	_var02, arg02
02040     18 2A 62 FD | 	getqx	_var07
02044     15 1F 02 F1 | 	add	_var01, _var07
02048     2F 25 02 F6 | 	mov	_var04, arg01
0204c     01 24 46 F0 | 	shr	_var04, #1
02050     12 1F 02 F1 | 	add	_var01, _var04
02054     0F 2D C2 FA | 	rdbyte	_var08, _var01
02058                 | '     b:=b & !(%1111<<((x//2)<<2))
02058     2F 23 52 F6 | 	abs	_var03, arg01 wc
0205c     01 22 06 F5 | 	and	_var03, #1
02060     11 23 62 C6 |  if_b	neg	_var03, _var03
02064     02 22 66 F0 | 	shl	_var03, #2
02068     0F 20 06 F6 | 	mov	_var02, #15
0206c     11 21 62 F0 | 	shl	_var02, _var03
02070     10 2D 22 F5 | 	andn	_var08, _var02
02074                 | '     b:=b |(c<<((x//2)<<2))
02074     2F 23 52 F6 | 	abs	_var03, arg01 wc
02078     01 22 06 F5 | 	and	_var03, #1
0207c     11 23 62 C6 |  if_b	neg	_var03, _var03
02080     02 22 66 F0 | 	shl	_var03, #2
02084     11 63 62 F0 | 	shl	arg03, _var03
02088     31 2D 42 F5 | 	or	_var08, arg03
0208c                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
0208c     FD 1E 02 FB | 	rdlong	_var01, objptr
02090     90 FA 05 F1 | 	add	objptr, #144
02094     FD 20 02 FB | 	rdlong	_var02, objptr
02098     90 FA 85 F1 | 	sub	objptr, #144
0209c     02 20 66 F0 | 	shl	_var02, #2
020a0     30 21 02 FD | 	qmul	_var02, arg02
020a4     18 2A 62 FD | 	getqx	_var07
020a8     15 1F 02 F1 | 	add	_var01, _var07
020ac     01 5E 46 F0 | 	shr	arg01, #1
020b0     2F 1F 02 F1 | 	add	_var01, arg01
020b4     0F 2D 42 FC | 	wrbyte	_var08, _var01
020b8                 | LR__0022
020b8                 | _hng030rm_spin2_putpixel4_ret
020b8     2D 00 64 FD | 	ret
020bc                 | 
020bc                 | ' 
020bc                 | ' 
020bc                 | ' pub putpixel8(x,y,c)
020bc                 | _hng030rm_spin2_putpixel8
020bc                 | ' 
020bc                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
020bc     00 1E 06 F6 | 	mov	_var01, #0
020c0     00 5E 5E F2 | 	cmps	arg01, #0 wcz
020c4     01 1E 66 36 |  if_ae	neg	_var01, #1
020c8     00 20 06 F6 | 	mov	_var02, #0
020cc     90 FA 05 F1 | 	add	objptr, #144
020d0     FD 22 02 FB | 	rdlong	_var03, objptr
020d4     02 22 66 F0 | 	shl	_var03, #2
020d8     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
020dc     01 20 66 C6 |  if_b	neg	_var02, #1
020e0     10 1F 02 F5 | 	and	_var01, _var02
020e4     00 24 06 F6 | 	mov	_var04, #0
020e8     00 60 5E F2 | 	cmps	arg02, #0 wcz
020ec     01 24 66 36 |  if_ae	neg	_var04, #1
020f0     12 1F 02 F5 | 	and	_var01, _var04
020f4     00 26 06 F6 | 	mov	_var05, #0
020f8     04 FA 05 F1 | 	add	objptr, #4
020fc     FD 28 02 FB | 	rdlong	_var06, objptr
02100     94 FA 85 F1 | 	sub	objptr, #148
02104     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02108     01 26 66 C6 |  if_b	neg	_var05, #1
0210c     13 1F CA F7 | 	test	_var01, _var05 wz
02110     28 00 90 AD |  if_e	jmp	#LR__0023
02114                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02114     FD 1E 02 FB | 	rdlong	_var01, objptr
02118     90 FA 05 F1 | 	add	objptr, #144
0211c     FD 20 02 FB | 	rdlong	_var02, objptr
02120     90 FA 85 F1 | 	sub	objptr, #144
02124     02 20 66 F0 | 	shl	_var02, #2
02128     30 21 02 FD | 	qmul	_var02, arg02
0212c     18 2A 62 FD | 	getqx	_var07
02130     15 1F 02 F1 | 	add	_var01, _var07
02134     2F 1F 02 F1 | 	add	_var01, arg01
02138     0F 63 42 FC | 	wrbyte	arg03, _var01
0213c                 | LR__0023
0213c                 | _hng030rm_spin2_putpixel8_ret
0213c     2D 00 64 FD | 	ret
02140                 | 
02140                 | ' 
02140                 | ' '*************************************************************************
02140                 | ' '                                                                        *
02140                 | ' '  VBlank functions                                                      *
02140                 | ' '                                                                        *
02140                 | ' '*************************************************************************
02140                 | ' 
02140                 | ' pub waitvbl(amount) | i
02140                 | _hng030rm_spin2_waitvbl
02140     04 5A 05 F6 | 	mov	COUNT_, #4
02144     B0 00 A0 FD | 	call	#pushregs_
02148     2F 6D 02 F6 | 	mov	local01, arg01
0214c                 | ' 
0214c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
0214c                 | ' 
0214c                 | ' repeat i from 1 to amount
0214c     01 6E 06 F6 | 	mov	local02, #1
02150     01 6C 5E F2 | 	cmps	local01, #1 wcz
02154     01 70 06 16 |  if_a	mov	local03, #1
02158     01 70 66 E6 |  if_be	neg	local03, #1
0215c     38 6D 02 F1 | 	add	local01, local03
02160                 | LR__0024
02160                 | '   repeat until vblank==0
02160                 | LR__0025
02160     40 FA 05 F1 | 	add	objptr, #64
02164     FD 72 0A FB | 	rdlong	local04, objptr wz
02168     40 FA 85 F1 | 	sub	objptr, #64
0216c     0C 00 90 AD |  if_e	jmp	#LR__0026
02170                 | '     waitus(100)
02170     64 5E 06 F6 | 	mov	arg01, #100
02174     0C 43 B0 FD | 	call	#__system___waitus
02178     E4 FF 9F FD | 	jmp	#LR__0025
0217c                 | LR__0026
0217c                 | '   repeat until vblank==1
0217c                 | LR__0027
0217c     40 FA 05 F1 | 	add	objptr, #64
02180     FD 72 02 FB | 	rdlong	local04, objptr
02184     40 FA 85 F1 | 	sub	objptr, #64
02188     01 72 0E F2 | 	cmp	local04, #1 wz
0218c     0C 00 90 AD |  if_e	jmp	#LR__0028
02190                 | '     waitus(100)
02190     64 5E 06 F6 | 	mov	arg01, #100
02194     EC 42 B0 FD | 	call	#__system___waitus
02198     E0 FF 9F FD | 	jmp	#LR__0027
0219c                 | LR__0028
0219c     38 6F 02 F1 | 	add	local02, local03
021a0     36 6F 0A F2 | 	cmp	local02, local01 wz
021a4     B8 FF 9F 5D |  if_ne	jmp	#LR__0024
021a8     AF F0 03 F6 | 	mov	ptra, fp
021ac     BA 00 A0 FD | 	call	#popregs_
021b0                 | _hng030rm_spin2_waitvbl_ret
021b0     2D 00 64 FD | 	ret
021b4                 | 
021b4                 | ' 
021b4                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
021b4                 | ' 
021b4                 | ' pub setbordercolor(r,g,b) | color
021b4                 | _hng030rm_spin2_setbordercolor
021b4                 | ' 
021b4                 | ' color:=r<<24+g<<16+b<<8
021b4     18 5E 66 F0 | 	shl	arg01, #24
021b8     10 60 66 F0 | 	shl	arg02, #16
021bc     30 5F 02 F1 | 	add	arg01, arg02
021c0     08 62 66 F0 | 	shl	arg03, #8
021c4     31 5F 02 F1 | 	add	arg01, arg03
021c8                 | ' bordercolor:=color
021c8     2C FA 05 F1 | 	add	objptr, #44
021cc     FD 5E 62 FC | 	wrlong	arg01, objptr
021d0     2C FA 85 F1 | 	sub	objptr, #44
021d4                 | _hng030rm_spin2_setbordercolor_ret
021d4     2D 00 64 FD | 	ret
021d8                 | 
021d8                 | ' 
021d8                 | ' 
021d8                 | ' '*************************************************************************
021d8                 | ' '                                                                        *
021d8                 | ' '  Text functions                                                        *
021d8                 | ' '                                                                        *
021d8                 | ' '*************************************************************************
021d8                 | ' 
021d8                 | ' ''---------- Clear the screen, set its foreground/background color
021d8                 | ' 
021d8                 | ' pub cls(fc,bc)   :c
021d8                 | _hng030rm_spin2_cls
021d8     06 5A 05 F6 | 	mov	COUNT_, #6
021dc     B0 00 A0 FD | 	call	#pushregs_
021e0     2F 6D 02 F6 | 	mov	local01, arg01
021e4     30 6F 02 F6 | 	mov	local02, arg02
021e8                 | ' 
021e8                 | ' if (graphmode<512)
021e8     C4 FA 05 F1 | 	add	objptr, #196
021ec     FD 70 02 FB | 	rdlong	local03, objptr
021f0     C4 FA 85 F1 | 	sub	objptr, #196
021f4     01 00 00 FF 
021f8     00 70 5E F2 | 	cmps	local03, ##512 wcz
021fc     34 00 90 3D |  if_ae	jmp	#LR__0029
02200                 | '   c:=fc<<24+bc<<16+$20
02200     36 73 02 F6 | 	mov	local04, local01
02204     18 72 66 F0 | 	shl	local04, #24
02208     37 75 02 F6 | 	mov	local05, local02
0220c     10 74 66 F0 | 	shl	local05, #16
02210     3A 73 02 F1 | 	add	local04, local05
02214     20 72 06 F1 | 	add	local04, #32
02218                 | '   longfill(buf_ptr,c,buflen)
02218     FD 5E 02 FB | 	rdlong	arg01, objptr
0221c     30 FA 05 F1 | 	add	objptr, #48
02220     FD 62 02 FB | 	rdlong	arg03, objptr
02224     30 FA 85 F1 | 	sub	objptr, #48
02228     39 61 02 F6 | 	mov	arg02, local04
0222c     A8 00 A0 FD | 	call	#\builtin_longfill_
02230                 | ' else
02230     AC 00 90 FD | 	jmp	#LR__0035
02234                 | LR__0029
02234                 | '   if (graphmode & 48) ==48
02234     C4 FA 05 F1 | 	add	objptr, #196
02238     FD 70 02 FB | 	rdlong	local03, objptr
0223c     C4 FA 85 F1 | 	sub	objptr, #196
02240     30 70 06 F5 | 	and	local03, #48
02244     30 70 0E F2 | 	cmp	local03, #48 wz
02248                 | '     c:=bc
02248     37 73 02 A6 |  if_e	mov	local04, local02
0224c     74 00 90 AD |  if_e	jmp	#LR__0034
02250                 | '   elseif (graphmode & 48) ==32
02250     C4 FA 05 F1 | 	add	objptr, #196
02254     FD 70 02 FB | 	rdlong	local03, objptr
02258     C4 FA 85 F1 | 	sub	objptr, #196
0225c     30 70 06 F5 | 	and	local03, #48
02260     20 70 0E F2 | 	cmp	local03, #32 wz
02264     10 00 90 5D |  if_ne	jmp	#LR__0030
02268                 | '     c:=bc<<4+bc
02268     37 73 02 F6 | 	mov	local04, local02
0226c     04 72 66 F0 | 	shl	local04, #4
02270     37 73 02 F1 | 	add	local04, local02
02274     4C 00 90 FD | 	jmp	#LR__0033
02278                 | LR__0030
02278                 | '   elseif (graphmode & 48) ==16
02278     C4 FA 05 F1 | 	add	objptr, #196
0227c     FD 70 02 FB | 	rdlong	local03, objptr
02280     C4 FA 85 F1 | 	sub	objptr, #196
02284     30 70 06 F5 | 	and	local03, #48
02288     10 70 0E F2 | 	cmp	local03, #16 wz
0228c     28 00 90 5D |  if_ne	jmp	#LR__0031
02290                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02290     37 73 02 F6 | 	mov	local04, local02
02294     06 72 66 F0 | 	shl	local04, #6
02298     37 75 02 F6 | 	mov	local05, local02
0229c     04 74 66 F0 | 	shl	local05, #4
022a0     3A 73 02 F1 | 	add	local04, local05
022a4     37 77 02 F6 | 	mov	local06, local02
022a8     02 76 66 F0 | 	shl	local06, #2
022ac     3B 73 02 F1 | 	add	local04, local06
022b0     37 73 02 F1 | 	add	local04, local02
022b4                 | '   else
022b4     0C 00 90 FD | 	jmp	#LR__0032
022b8                 | LR__0031
022b8                 | '     if bc==1
022b8     01 6E 0E F2 | 	cmp	local02, #1 wz
022bc                 | '       c:=255
022bc     FF 72 06 A6 |  if_e	mov	local04, #255
022c0                 | '     else
022c0                 | '       c:=0
022c0     00 72 06 56 |  if_ne	mov	local04, #0
022c4                 | LR__0032
022c4                 | LR__0033
022c4                 | LR__0034
022c4                 | '   bytefill(buf_ptr,c,buflen*4)
022c4     FD 5E 02 FB | 	rdlong	arg01, objptr
022c8     30 FA 05 F1 | 	add	objptr, #48
022cc     FD 62 02 FB | 	rdlong	arg03, objptr
022d0     30 FA 85 F1 | 	sub	objptr, #48
022d4     02 62 66 F0 | 	shl	arg03, #2
022d8     39 61 02 F6 | 	mov	arg02, local04
022dc     A0 00 A0 FD | 	call	#\builtin_bytefill_
022e0                 | LR__0035
022e0                 | ' setwritecolors(fc,bc)
022e0                 | ' 
022e0                 | ' 
022e0                 | ' write_color:=ff
022e0     38 FA 05 F1 | 	add	objptr, #56
022e4     FD 6C 62 FC | 	wrlong	local01, objptr
022e8                 | ' write_background:=bb
022e8     04 FA 05 F1 | 	add	objptr, #4
022ec     FD 6E 62 FC | 	wrlong	local02, objptr
022f0                 | ' cursor_x:=0
022f0     08 FA 85 F1 | 	sub	objptr, #8
022f4     FD 00 48 FC | 	wrbyte	#0, objptr
022f8                 | ' cursor_y:=0
022f8     01 FA 05 F1 | 	add	objptr, #1
022fc     FD 00 48 FC | 	wrbyte	#0, objptr
02300     35 FA 85 F1 | 	sub	objptr, #53
02304     39 19 02 F6 | 	mov	result1, local04
02308     AF F0 03 F6 | 	mov	ptra, fp
0230c     BA 00 A0 FD | 	call	#popregs_
02310                 | _hng030rm_spin2_cls_ret
02310     2D 00 64 FD | 	ret
02314                 | 
02314                 | ' 
02314                 | ' ''--------- Output a string at position x,y without changing colors
02314                 | ' 
02314                 | ' pub outtextxy(x,y,text) | iii
02314                 | _hng030rm_spin2_outtextxy
02314     0F 5A 05 F6 | 	mov	COUNT_, #15
02318     B0 00 A0 FD | 	call	#pushregs_
0231c     2F 6D 02 F6 | 	mov	local01, arg01
02320                 | ' 
02320                 | ' repeat iii from 0 to strsize(text)-1
02320     00 6E 06 F6 | 	mov	local02, #0
02324     31 5F 02 F6 | 	mov	arg01, arg03
02328     00 70 06 F6 | 	mov	local03, #0
0232c     E0 DC 9F FE | 	loc	pa,	#(@LR__0037-@LR__0036)
02330     93 00 A0 FD | 	call	#FCACHE_LOAD_
02334                 | LR__0036
02334     2F 73 CA FA | 	rdbyte	local04, arg01 wz
02338     01 70 06 51 |  if_ne	add	local03, #1
0233c     01 5E 06 51 |  if_ne	add	arg01, #1
02340     F0 FF 9F 5D |  if_ne	jmp	#LR__0036
02344                 | LR__0037
02344     38 19 02 F6 | 	mov	result1, local03
02348     0C 75 02 F6 | 	mov	local05, result1
0234c     01 74 86 F1 | 	sub	local05, #1
02350     00 74 5E F2 | 	cmps	local05, #0 wcz
02354     01 76 06 16 |  if_a	mov	local06, #1
02358     01 76 66 E6 |  if_be	neg	local06, #1
0235c     3B 75 02 F1 | 	add	local05, local06
02360     14 DD 9F FE | 	loc	pa,	#(@LR__0039-@LR__0038)
02364     93 00 A0 FD | 	call	#FCACHE_LOAD_
02368                 | LR__0038
02368                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02368     FD 78 02 FB | 	rdlong	local07, objptr
0236c     90 FA 05 F1 | 	add	objptr, #144
02370     FD 7A 02 FB | 	rdlong	local08, objptr
02374     90 FA 85 F1 | 	sub	objptr, #144
02378     30 7B 02 FD | 	qmul	local08, arg02
0237c     18 7C 62 FD | 	getqx	local09
02380     36 7D 02 F1 | 	add	local09, local01
02384     37 7D 02 F1 | 	add	local09, local02
02388     02 7C 66 F0 | 	shl	local09, #2
0238c     3E 79 02 F1 | 	add	local07, local09
02390     3C 7F 02 FB | 	rdlong	local10, local07
02394     FF 7E 26 F5 | 	andn	local10, #255
02398     31 81 02 F6 | 	mov	local11, arg03
0239c     37 81 02 F1 | 	add	local11, local02
023a0     40 83 C2 FA | 	rdbyte	local12, local11
023a4     41 7F 42 F5 | 	or	local10, local12
023a8     FD 84 02 FB | 	rdlong	local13, objptr
023ac     90 FA 05 F1 | 	add	objptr, #144
023b0     FD 86 02 FB | 	rdlong	local14, objptr
023b4     90 FA 85 F1 | 	sub	objptr, #144
023b8     30 87 02 FD | 	qmul	local14, arg02
023bc     18 88 62 FD | 	getqx	local15
023c0     36 89 02 F1 | 	add	local15, local01
023c4     37 89 02 F1 | 	add	local15, local02
023c8     02 88 66 F0 | 	shl	local15, #2
023cc     44 85 02 F1 | 	add	local13, local15
023d0     42 7F 62 FC | 	wrlong	local10, local13
023d4     3B 6F 02 F1 | 	add	local02, local06
023d8     3A 6F 0A F2 | 	cmp	local02, local05 wz
023dc     88 FF 9F 5D |  if_ne	jmp	#LR__0038
023e0                 | LR__0039
023e0     AF F0 03 F6 | 	mov	ptra, fp
023e4     BA 00 A0 FD | 	call	#popregs_
023e8                 | _hng030rm_spin2_outtextxy_ret
023e8     2D 00 64 FD | 	ret
023ec                 | 
023ec                 | ' 
023ec                 | ' ''---------- Output a char at the cursor position, move the cursor
023ec                 | ' 
023ec                 | ' pub putchar(achar) | c,x,y
023ec                 | _hng030rm_spin2_putchar
023ec     0F 5A 05 F6 | 	mov	COUNT_, #15
023f0     B0 00 A0 FD | 	call	#pushregs_
023f4     2F 6D 02 F6 | 	mov	local01, arg01
023f8                 | ' 
023f8                 | ' if achar==10
023f8     0A 6C 0E F2 | 	cmp	local01, #10 wz
023fc     08 00 90 5D |  if_ne	jmp	#LR__0040
02400                 | '   crlf()
02400     34 04 B0 FD | 	call	#_hng030rm_spin2_crlf
02404                 | ' else  
02404     64 01 90 FD | 	jmp	#LR__0043
02408                 | LR__0040
02408                 | '   x:=cursor_x
02408     34 FA 05 F1 | 	add	objptr, #52
0240c     FD 6E C2 FA | 	rdbyte	local02, objptr
02410                 | '   y:=cursor_y
02410     01 FA 05 F1 | 	add	objptr, #1
02414     FD 70 C2 FA | 	rdbyte	local03, objptr
02418                 | '   c:=write_color<<24+write_background<<16
02418     03 FA 05 F1 | 	add	objptr, #3
0241c     FD 72 02 FB | 	rdlong	local04, objptr
02420     18 72 66 F0 | 	shl	local04, #24
02424     04 FA 05 F1 | 	add	objptr, #4
02428     FD 74 02 FB | 	rdlong	local05, objptr
0242c     3C FA 85 F1 | 	sub	objptr, #60
02430     10 74 66 F0 | 	shl	local05, #16
02434     3A 73 02 F1 | 	add	local04, local05
02438                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02438     FD 76 02 FB | 	rdlong	local06, objptr
0243c     90 FA 05 F1 | 	add	objptr, #144
02440     FD 78 02 FB | 	rdlong	local07, objptr
02444     90 FA 85 F1 | 	sub	objptr, #144
02448     38 79 02 FD | 	qmul	local07, local03
0244c     18 7A 62 FD | 	getqx	local08
02450     37 7B 02 F1 | 	add	local08, local02
02454     02 7A 66 F0 | 	shl	local08, #2
02458     3D 77 02 F1 | 	add	local06, local08
0245c     3B 7D 02 FB | 	rdlong	local09, local06
02460     7F 00 00 FF 
02464     FF 7D 06 F5 | 	and	local09, ##65535
02468     39 7D 42 F5 | 	or	local09, local04
0246c     FD 7E 02 FB | 	rdlong	local10, objptr
02470     90 FA 05 F1 | 	add	objptr, #144
02474     FD 80 02 FB | 	rdlong	local11, objptr
02478     90 FA 85 F1 | 	sub	objptr, #144
0247c     38 81 02 FD | 	qmul	local11, local03
02480     18 82 62 FD | 	getqx	local12
02484     37 83 02 F1 | 	add	local12, local02
02488     02 82 66 F0 | 	shl	local12, #2
0248c     41 7F 02 F1 | 	add	local10, local12
02490     3F 7D 62 FC | 	wrlong	local09, local10
02494                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
02494     FD 76 02 FB | 	rdlong	local06, objptr
02498     90 FA 05 F1 | 	add	objptr, #144
0249c     FD 78 02 FB | 	rdlong	local07, objptr
024a0     90 FA 85 F1 | 	sub	objptr, #144
024a4     38 79 02 FD | 	qmul	local07, local03
024a8     18 7A 62 FD | 	getqx	local08
024ac     37 7B 02 F1 | 	add	local08, local02
024b0     02 7A 66 F0 | 	shl	local08, #2
024b4     3D 77 02 F1 | 	add	local06, local08
024b8     3B 7D 02 FB | 	rdlong	local09, local06
024bc     FF 7C 26 F5 | 	andn	local09, #255
024c0     36 7F 02 F6 | 	mov	local10, local01
024c4     FF 7E 06 F5 | 	and	local10, #255
024c8     3F 7D 42 F5 | 	or	local09, local10
024cc     FD 84 02 FB | 	rdlong	local13, objptr
024d0     90 FA 05 F1 | 	add	objptr, #144
024d4     FD 86 02 FB | 	rdlong	local14, objptr
024d8     38 87 02 FD | 	qmul	local14, local03
024dc     18 88 62 FD | 	getqx	local15
024e0     37 89 02 F1 | 	add	local15, local02
024e4     02 88 66 F0 | 	shl	local15, #2
024e8     44 85 02 F1 | 	add	local13, local15
024ec     42 7D 62 FC | 	wrlong	local09, local13
024f0                 | '   cursor_x+=1
024f0     5C FA 85 F1 | 	sub	objptr, #92
024f4     FD 7C C2 FA | 	rdbyte	local09, objptr
024f8     01 7C 06 F1 | 	add	local09, #1
024fc     FD 7C 42 FC | 	wrbyte	local09, objptr
02500                 | '   if cursor_x==cpl
02500     FD 7C C2 FA | 	rdbyte	local09, objptr
02504     5C FA 05 F1 | 	add	objptr, #92
02508     FD 74 02 FB | 	rdlong	local05, objptr
0250c     90 FA 85 F1 | 	sub	objptr, #144
02510     3A 7D 0A F2 | 	cmp	local09, local05 wz
02514     54 00 90 5D |  if_ne	jmp	#LR__0042
02518                 | '     cursor_x:=0
02518     34 FA 05 F1 | 	add	objptr, #52
0251c     FD 00 48 FC | 	wrbyte	#0, objptr
02520                 | '     cursor_y+=1
02520     01 FA 05 F1 | 	add	objptr, #1
02524     FD 7C C2 FA | 	rdbyte	local09, objptr
02528     01 7C 06 F1 | 	add	local09, #1
0252c     FD 7C 42 FC | 	wrbyte	local09, objptr
02530                 | '     if cursor_y>lines-1
02530     5F FA 05 F1 | 	add	objptr, #95
02534     FD 7C 02 FB | 	rdlong	local09, objptr
02538     01 7C 86 F1 | 	sub	local09, #1
0253c     5F FA 85 F1 | 	sub	objptr, #95
02540     FD 74 C2 FA | 	rdbyte	local05, objptr
02544     35 FA 85 F1 | 	sub	objptr, #53
02548     3E 75 5A F2 | 	cmps	local05, local09 wcz
0254c     1C 00 90 ED |  if_be	jmp	#LR__0041
02550                 | '       scrollup()
02550     10 02 B0 FD | 	call	#_hng030rm_spin2_scrollup
02554                 | '       cursor_y:=lines-1
02554     94 FA 05 F1 | 	add	objptr, #148
02558     FD 7C 02 FB | 	rdlong	local09, objptr
0255c     01 7C 86 F1 | 	sub	local09, #1
02560     5F FA 85 F1 | 	sub	objptr, #95
02564     FD 7C 42 FC | 	wrbyte	local09, objptr
02568     35 FA 85 F1 | 	sub	objptr, #53
0256c                 | LR__0041
0256c                 | LR__0042
0256c                 | LR__0043
0256c     AF F0 03 F6 | 	mov	ptra, fp
02570     BA 00 A0 FD | 	call	#popregs_
02574                 | _hng030rm_spin2_putchar_ret
02574     2D 00 64 FD | 	ret
02578                 | 
02578                 | ' 
02578                 | ' ''--------- Output a string at the cursor position, move the cursor
02578                 | ' 
02578                 | ' pub write(text) | iii,c,ncx,ncy
02578                 | _hng030rm_spin2_write
02578     16 5A 05 F6 | 	mov	COUNT_, #22
0257c     B0 00 A0 FD | 	call	#pushregs_
02580     2F 6D 02 F6 | 	mov	local01, arg01
02584                 | ' 
02584                 | ' c:=write_color<<24+write_background<<16
02584     38 FA 05 F1 | 	add	objptr, #56
02588     FD 6E 02 FB | 	rdlong	local02, objptr
0258c     18 6E 66 F0 | 	shl	local02, #24
02590     04 FA 05 F1 | 	add	objptr, #4
02594     FD 70 02 FB | 	rdlong	local03, objptr
02598     10 70 66 F0 | 	shl	local03, #16
0259c     38 6F 02 F1 | 	add	local02, local03
025a0                 | ' 'debug(uhex_long(write_color))
025a0                 | ' ncy:=cursor_y
025a0     07 FA 85 F1 | 	sub	objptr, #7
025a4     FD 72 C2 FA | 	rdbyte	local04, objptr
025a8                 | ' ncx:=cursor_x+strsize(text)
025a8     01 FA 85 F1 | 	sub	objptr, #1
025ac     FD 74 C2 FA | 	rdbyte	local05, objptr
025b0     34 FA 85 F1 | 	sub	objptr, #52
025b4     36 5F 02 F6 | 	mov	arg01, local01
025b8     00 76 06 F6 | 	mov	local06, #0
025bc     50 DA 9F FE | 	loc	pa,	#(@LR__0045-@LR__0044)
025c0     93 00 A0 FD | 	call	#FCACHE_LOAD_
025c4                 | LR__0044
025c4     2F 79 CA FA | 	rdbyte	local07, arg01 wz
025c8     01 76 06 51 |  if_ne	add	local06, #1
025cc     01 5E 06 51 |  if_ne	add	arg01, #1
025d0     F0 FF 9F 5D |  if_ne	jmp	#LR__0044
025d4                 | LR__0045
025d4     3B 19 02 F6 | 	mov	result1, local06
025d8     3B 75 02 F1 | 	add	local05, local06
025dc     3A 7B 02 F6 | 	mov	local08, local05
025e0     4C DA 9F FE | 	loc	pa,	#(@LR__0047-@LR__0046)
025e4     93 00 A0 FD | 	call	#FCACHE_LOAD_
025e8                 | ' repeat while ncx>cpl-1
025e8                 | LR__0046
025e8     90 FA 05 F1 | 	add	objptr, #144
025ec     FD 74 02 FB | 	rdlong	local05, objptr
025f0     90 FA 85 F1 | 	sub	objptr, #144
025f4     01 74 86 F1 | 	sub	local05, #1
025f8     3A 7B 5A F2 | 	cmps	local08, local05 wcz
025fc     18 00 90 ED |  if_be	jmp	#LR__0048
02600                 | '   ncx-=cpl
02600     90 FA 05 F1 | 	add	objptr, #144
02604     FD 7C 02 FB | 	rdlong	local09, objptr
02608     90 FA 85 F1 | 	sub	objptr, #144
0260c     3E 7B 82 F1 | 	sub	local08, local09
02610                 | '   ncy+=1
02610     01 72 06 F1 | 	add	local04, #1
02614     D0 FF 9F FD | 	jmp	#LR__0046
02618                 | LR__0047
02618                 | LR__0048
02618                 | ' repeat while ncy>lines-1
02618                 | LR__0049
02618     94 FA 05 F1 | 	add	objptr, #148
0261c     FD 74 02 FB | 	rdlong	local05, objptr
02620     94 FA 85 F1 | 	sub	objptr, #148
02624     01 74 86 F1 | 	sub	local05, #1
02628     3A 73 5A F2 | 	cmps	local04, local05 wcz
0262c     20 00 90 ED |  if_be	jmp	#LR__0050
02630                 | '   ncy-=1
02630     01 72 86 F1 | 	sub	local04, #1
02634                 | '   scrollup()
02634     2C 01 B0 FD | 	call	#_hng030rm_spin2_scrollup
02638                 | '   cursor_y-=1
02638     35 FA 05 F1 | 	add	objptr, #53
0263c     FD 74 C2 FA | 	rdbyte	local05, objptr
02640     01 74 86 F1 | 	sub	local05, #1
02644     FD 74 42 FC | 	wrbyte	local05, objptr
02648     35 FA 85 F1 | 	sub	objptr, #53
0264c     C8 FF 9F FD | 	jmp	#LR__0049
02650                 | LR__0050
02650                 | ' 
02650                 | ' repeat iii from 0 to strsize(text)-1
02650     00 7E 06 F6 | 	mov	local10, #0
02654     36 5F 02 F6 | 	mov	arg01, local01
02658     00 76 06 F6 | 	mov	local06, #0
0265c     B0 D9 9F FE | 	loc	pa,	#(@LR__0052-@LR__0051)
02660     93 00 A0 FD | 	call	#FCACHE_LOAD_
02664                 | LR__0051
02664     2F 79 CA FA | 	rdbyte	local07, arg01 wz
02668     01 76 06 51 |  if_ne	add	local06, #1
0266c     01 5E 06 51 |  if_ne	add	arg01, #1
02670     F0 FF 9F 5D |  if_ne	jmp	#LR__0051
02674                 | LR__0052
02674     3B 19 02 F6 | 	mov	result1, local06
02678     0C 81 02 F6 | 	mov	local11, result1
0267c     01 80 86 F1 | 	sub	local11, #1
02680     00 80 5E F2 | 	cmps	local11, #0 wcz
02684     01 70 06 16 |  if_a	mov	local03, #1
02688     01 70 66 E6 |  if_be	neg	local03, #1
0268c     38 81 02 F1 | 	add	local11, local03
02690     FC D9 9F FE | 	loc	pa,	#(@LR__0054-@LR__0053)
02694     93 00 A0 FD | 	call	#FCACHE_LOAD_
02698                 | LR__0053
02698                 | ' 
02698                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
02698     FD 82 02 FB | 	rdlong	local12, objptr
0269c     90 FA 05 F1 | 	add	objptr, #144
026a0     FD 84 02 FB | 	rdlong	local13, objptr
026a4     5B FA 85 F1 | 	sub	objptr, #91
026a8     FD 86 C2 FA | 	rdbyte	local14, objptr
026ac     43 85 02 FD | 	qmul	local13, local14
026b0     18 88 62 FD | 	getqx	local15
026b4     01 FA 85 F1 | 	sub	objptr, #1
026b8     FD 8A C2 FA | 	rdbyte	local16, objptr
026bc     34 FA 85 F1 | 	sub	objptr, #52
026c0     45 89 02 F1 | 	add	local15, local16
026c4     3F 89 02 F1 | 	add	local15, local10
026c8     02 88 66 F0 | 	shl	local15, #2
026cc     44 83 02 F1 | 	add	local12, local15
026d0     41 8D 02 FB | 	rdlong	local17, local12
026d4     7F 00 00 FF 
026d8     FF 8D 06 F5 | 	and	local17, ##65535
026dc     37 8D 42 F5 | 	or	local17, local02
026e0     FD 8E 02 FB | 	rdlong	local18, objptr
026e4     90 FA 05 F1 | 	add	objptr, #144
026e8     FD 90 02 FB | 	rdlong	local19, objptr
026ec     5B FA 85 F1 | 	sub	objptr, #91
026f0     FD 92 C2 FA | 	rdbyte	local20, objptr
026f4     49 91 02 FD | 	qmul	local19, local20
026f8     18 94 62 FD | 	getqx	local21
026fc     01 FA 85 F1 | 	sub	objptr, #1
02700     FD 96 C2 FA | 	rdbyte	local22, objptr
02704     34 FA 85 F1 | 	sub	objptr, #52
02708     4B 95 02 F1 | 	add	local21, local22
0270c     3F 95 02 F1 | 	add	local21, local10
02710     02 94 66 F0 | 	shl	local21, #2
02714     4A 8F 02 F1 | 	add	local18, local21
02718     47 8D 62 FC | 	wrlong	local17, local18
0271c     38 7F 02 F1 | 	add	local10, local03
02720     40 7F 0A F2 | 	cmp	local10, local11 wz
02724     70 FF 9F 5D |  if_ne	jmp	#LR__0053
02728                 | LR__0054
02728                 | ' 
02728                 | ' outtextxy(cursor_x,cursor_y,text)
02728     34 FA 05 F1 | 	add	objptr, #52
0272c     FD 5E C2 FA | 	rdbyte	arg01, objptr
02730     01 FA 05 F1 | 	add	objptr, #1
02734     FD 60 C2 FA | 	rdbyte	arg02, objptr
02738     35 FA 85 F1 | 	sub	objptr, #53
0273c     36 63 02 F6 | 	mov	arg03, local01
02740     D0 FB BF FD | 	call	#_hng030rm_spin2_outtextxy
02744                 | ' 
02744                 | ' cursor_x:=ncx
02744     34 FA 05 F1 | 	add	objptr, #52
02748     FD 7A 42 FC | 	wrbyte	local08, objptr
0274c                 | ' cursor_y:=ncy
0274c     01 FA 05 F1 | 	add	objptr, #1
02750     FD 72 42 FC | 	wrbyte	local04, objptr
02754     35 FA 85 F1 | 	sub	objptr, #53
02758     AF F0 03 F6 | 	mov	ptra, fp
0275c     BA 00 A0 FD | 	call	#popregs_
02760                 | _hng030rm_spin2_write_ret
02760     2D 00 64 FD | 	ret
02764                 | 
02764                 | ' 
02764                 | ' ''-----------  Scroll the screen one line up
02764                 | ' 
02764                 | ' pub scrollup() | i
02764                 | _hng030rm_spin2_scrollup
02764     0D 5A 05 F6 | 	mov	COUNT_, #13
02768     B0 00 A0 FD | 	call	#pushregs_
0276c                 | ' 
0276c                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
0276c     FD 5E 02 FB | 	rdlong	arg01, objptr
02770     2F 61 02 F6 | 	mov	arg02, arg01
02774     90 FA 05 F1 | 	add	objptr, #144
02778     FD 6C 02 FB | 	rdlong	local01, objptr
0277c     02 6C 66 F0 | 	shl	local01, #2
02780     36 61 02 F1 | 	add	arg02, local01
02784     60 FA 85 F1 | 	sub	objptr, #96
02788     FD 62 02 FB | 	rdlong	arg03, objptr
0278c     60 FA 05 F1 | 	add	objptr, #96
02790     FD 6E 02 FB | 	rdlong	local02, objptr
02794     90 FA 85 F1 | 	sub	objptr, #144
02798     37 63 82 F1 | 	sub	arg03, local02
0279c     BC 39 B0 FD | 	call	#__system__longmove
027a0                 | ' repeat i from buflen-cpl to buflen-1
027a0     30 FA 05 F1 | 	add	objptr, #48
027a4     FD 70 02 FB | 	rdlong	local03, objptr
027a8     60 FA 05 F1 | 	add	objptr, #96
027ac     FD 72 02 FB | 	rdlong	local04, objptr
027b0     39 71 82 F1 | 	sub	local03, local04
027b4     60 FA 85 F1 | 	sub	objptr, #96
027b8     FD 74 02 FB | 	rdlong	local05, objptr
027bc     01 74 86 F1 | 	sub	local05, #1
027c0     FD 76 02 FB | 	rdlong	local06, objptr
027c4     60 FA 05 F1 | 	add	objptr, #96
027c8     FD 78 02 FB | 	rdlong	local07, objptr
027cc     90 FA 85 F1 | 	sub	objptr, #144
027d0     3C 77 82 F1 | 	sub	local06, local07
027d4     3B 75 5A F2 | 	cmps	local05, local06 wcz
027d8     01 7A 06 16 |  if_a	mov	local08, #1
027dc     01 7A 66 E6 |  if_be	neg	local08, #1
027e0     3D 75 02 F1 | 	add	local05, local08
027e4     58 D8 9F FE | 	loc	pa,	#(@LR__0056-@LR__0055)
027e8     93 00 A0 FD | 	call	#FCACHE_LOAD_
027ec                 | LR__0055
027ec                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
027ec     FD 7C 02 FB | 	rdlong	local09, objptr
027f0     38 7F 02 F6 | 	mov	local10, local03
027f4     02 7E 66 F0 | 	shl	local10, #2
027f8     3F 7D 02 F1 | 	add	local09, local10
027fc     3E 81 02 FB | 	rdlong	local11, local09
02800     80 FF 7F FF 
02804     00 80 06 F5 | 	and	local11, ##-65536
02808     20 80 46 F5 | 	or	local11, #32
0280c     FD 82 02 FB | 	rdlong	local12, objptr
02810     38 85 02 F6 | 	mov	local13, local03
02814     02 84 66 F0 | 	shl	local13, #2
02818     42 83 02 F1 | 	add	local12, local13
0281c     41 81 62 FC | 	wrlong	local11, local12
02820     3D 71 02 F1 | 	add	local03, local08
02824     3A 71 0A F2 | 	cmp	local03, local05 wz
02828     C0 FF 9F 5D |  if_ne	jmp	#LR__0055
0282c                 | LR__0056
0282c     AF F0 03 F6 | 	mov	ptra, fp
02830     BA 00 A0 FD | 	call	#popregs_
02834                 | _hng030rm_spin2_scrollup_ret
02834     2D 00 64 FD | 	ret
02838                 | 
02838                 | ' 
02838                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
02838                 | ' 
02838                 | ' pub crlf()
02838                 | _hng030rm_spin2_crlf
02838     02 5A 05 F6 | 	mov	COUNT_, #2
0283c     B0 00 A0 FD | 	call	#pushregs_
02840                 | ' 
02840                 | ' cursor_x:=0
02840     34 FA 05 F1 | 	add	objptr, #52
02844     FD 00 48 FC | 	wrbyte	#0, objptr
02848                 | ' cursor_y+=1
02848     01 FA 05 F1 | 	add	objptr, #1
0284c     FD 6C C2 FA | 	rdbyte	local01, objptr
02850     01 6C 06 F1 | 	add	local01, #1
02854     FD 6C 42 FC | 	wrbyte	local01, objptr
02858                 | ' if cursor_y>lines-1
02858     5F FA 05 F1 | 	add	objptr, #95
0285c     FD 6C 02 FB | 	rdlong	local01, objptr
02860     01 6C 86 F1 | 	sub	local01, #1
02864     5F FA 85 F1 | 	sub	objptr, #95
02868     FD 6E C2 FA | 	rdbyte	local02, objptr
0286c     35 FA 85 F1 | 	sub	objptr, #53
02870     36 6F 5A F2 | 	cmps	local02, local01 wcz
02874     1C 00 90 ED |  if_be	jmp	#LR__0057
02878                 | '   scrollup()
02878     E8 FE BF FD | 	call	#_hng030rm_spin2_scrollup
0287c                 | '   cursor_y:=lines-1
0287c     94 FA 05 F1 | 	add	objptr, #148
02880     FD 6C 02 FB | 	rdlong	local01, objptr
02884     01 6C 86 F1 | 	sub	local01, #1
02888     5F FA 85 F1 | 	sub	objptr, #95
0288c     FD 6C 42 FC | 	wrbyte	local01, objptr
02890     35 FA 85 F1 | 	sub	objptr, #53
02894                 | LR__0057
02894     AF F0 03 F6 | 	mov	ptra, fp
02898     BA 00 A0 FD | 	call	#popregs_
0289c                 | _hng030rm_spin2_crlf_ret
0289c     2D 00 64 FD | 	ret
028a0                 | 
028a0                 | ' 
028a0                 | ' 
028a0                 | ' 
028a0                 | ' pub inttostr2(i,d):result |q,pos,k,j
028a0                 | _hng030rm_spin2_inttostr2
028a0                 | ' 
028a0                 | ' j:=i
028a0                 | ' pos:=d-1
028a0     30 1F 02 F6 | 	mov	_var01, arg02
028a4     01 1E 86 F1 | 	sub	_var01, #1
028a8                 | ' k:=0
028a8                 | ' 
028a8                 | ' n_string[d]:=0
028a8     30 21 02 F6 | 	mov	_var02, arg02
028ac     44 FA 05 F1 | 	add	objptr, #68
028b0     FD 22 02 F6 | 	mov	_var03, objptr
028b4     FD 20 02 F1 | 	add	_var02, objptr
028b8     10 01 48 FC | 	wrbyte	#0, _var02
028bc                 | ' repeat k from 0 to d-1
028bc     00 24 06 F6 | 	mov	_var04, #0
028c0     01 60 86 F1 | 	sub	arg02, #1
028c4     30 27 02 F6 | 	mov	_var05, arg02
028c8     00 26 5E F2 | 	cmps	_var05, #0 wcz
028cc     44 FA 85 F1 | 	sub	objptr, #68
028d0     01 22 06 16 |  if_a	mov	_var03, #1
028d4     01 22 66 E6 |  if_be	neg	_var03, #1
028d8     11 27 02 F1 | 	add	_var05, _var03
028dc     40 D7 9F FE | 	loc	pa,	#(@LR__0059-@LR__0058)
028e0     93 00 A0 FD | 	call	#FCACHE_LOAD_
028e4                 | LR__0058
028e4                 | '   n_string[k]:=48
028e4     12 29 02 F6 | 	mov	_var06, _var04
028e8     44 FA 05 F1 | 	add	objptr, #68
028ec     FD 28 02 F1 | 	add	_var06, objptr
028f0     14 61 48 FC | 	wrbyte	#48, _var06
028f4     11 25 02 F1 | 	add	_var04, _var03
028f8     13 25 0A F2 | 	cmp	_var04, _var05 wz
028fc     44 FA 85 F1 | 	sub	objptr, #68
02900     E0 FF 9F 5D |  if_ne	jmp	#LR__0058
02904                 | LR__0059
02904                 | ' 
02904                 | ' if (j<>0)
02904     00 5E 0E F2 | 	cmp	arg01, #0 wz
02908     40 00 90 AD |  if_e	jmp	#LR__0062
0290c                 | ' 
0290c                 | '   repeat while (pos>-1)
0290c                 | LR__0060
0290c     FF FF 7F FF 
02910     FF 1F 5E F2 | 	cmps	_var01, ##-1 wcz
02914     34 00 90 ED |  if_be	jmp	#LR__0061
02918                 | '     q:=j+//10
02918     2F 99 02 F6 | 	mov	muldiva_, arg01
0291c     0A 9A 06 F6 | 	mov	muldivb_, #10
02920     C2 00 A0 FD | 	call	#unsdivide_
02924                 | '     q:=48+q
02924     30 2A 06 F6 | 	mov	_var07, #48
02928     4C 2B 02 F1 | 	add	_var07, muldiva_
0292c                 | '     n_string[pos]:=q
0292c     0F 61 02 F6 | 	mov	arg02, _var01
02930     44 FA 05 F1 | 	add	objptr, #68
02934     FD 60 02 F1 | 	add	arg02, objptr
02938     30 2B 42 FC | 	wrbyte	_var07, arg02
0293c                 | '     j:=j+/10
0293c     4D 5F 02 F6 | 	mov	arg01, muldivb_
02940                 | '     pos-=1
02940     01 1E 86 F1 | 	sub	_var01, #1
02944     44 FA 85 F1 | 	sub	objptr, #68
02948     C0 FF 9F FD | 	jmp	#LR__0060
0294c                 | LR__0061
0294c                 | LR__0062
0294c                 | ' 
0294c                 | ' 
0294c                 | ' q:=@n_string
0294c     44 FA 05 F1 | 	add	objptr, #68
02950     FD 18 02 F6 | 	mov	result1, objptr
02954     44 FA 85 F1 | 	sub	objptr, #68
02958                 | ' return q
02958                 | _hng030rm_spin2_inttostr2_ret
02958     2D 00 64 FD | 	ret
0295c                 | 
0295c                 | ' 
0295c                 | ' 
0295c                 | ' 
0295c                 | ' '*************************************************************************
0295c                 | ' '                                                                        *
0295c                 | ' '  Mode setting and driver start                                                          *
0295c                 | ' '                                                                        *
0295c                 | ' '*************************************************************************
0295c                 | ' 
0295c                 | ' ''---------  Set the graphics mode
0295c                 | ' 
0295c                 | ' 
0295c                 | ' 
0295c                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
0295c                 | _hng030rm_spin2_setmode
0295c     0A 5A 05 F6 | 	mov	COUNT_, #10
02960     B0 00 A0 FD | 	call	#pushregs_
02964     2F 6D 02 F6 | 	mov	local01, arg01
02968                 | ' 
02968                 | ' '' mode:tn_bb_cc_vv_hh
02968                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
02968                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
02968                 | ' 
02968                 | ' if mode==(512+192+48)
02968     01 00 00 FF 
0296c     F0 6C 0E F2 | 	cmp	local01, ##752 wz
02970                 | '   return 'no RAM
02970     C0 05 90 AD |  if_e	jmp	#LR__0085
02974                 | ' 
02974                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02974     36 6F 02 F6 | 	mov	local02, local01
02978     06 6E 46 F0 | 	shr	local02, #6
0297c     07 6E 06 F5 | 	and	local02, #7
02980     08 6E 26 F3 | 	fle	local02, #8
02984     37 71 02 F6 | 	mov	local03, local02
02988     30 70 62 FD | 	jmprel	local03
0298c                 | LR__0063
0298c     20 00 90 FD | 	jmp	#LR__0064
02990     48 00 90 FD | 	jmp	#LR__0065
02994     70 00 90 FD | 	jmp	#LR__0066
02998     98 00 90 FD | 	jmp	#LR__0067
0299c     C0 00 90 FD | 	jmp	#LR__0068
029a0     E8 00 90 FD | 	jmp	#LR__0069
029a4     10 01 90 FD | 	jmp	#LR__0070
029a8     38 01 90 FD | 	jmp	#LR__0071
029ac     68 01 90 FD | 	jmp	#LR__0072
029b0                 | LR__0064
029b0                 | ' 
029b0                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
029b0     50 FA 05 F1 | 	add	objptr, #80
029b4     FD 5E 02 F6 | 	mov	arg01, objptr
029b8     50 FA 85 F1 | 	sub	objptr, #80
029bc     0E 00 00 FF 
029c0     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
029c4     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
029c8     0E 00 00 FF 
029cc     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
029d0     10 62 06 F6 | 	mov	arg03, #16
029d4     84 37 B0 FD | 	call	#__system__longmove
029d8     3C 01 90 FD | 	jmp	#LR__0072
029dc                 | LR__0065
029dc                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
029dc     50 FA 05 F1 | 	add	objptr, #80
029e0     FD 5E 02 F6 | 	mov	arg01, objptr
029e4     50 FA 85 F1 | 	sub	objptr, #80
029e8     0E 00 00 FF 
029ec     98 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
029f0     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
029f4     0E 00 00 FF 
029f8     98 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
029fc     10 62 06 F6 | 	mov	arg03, #16
02a00     58 37 B0 FD | 	call	#__system__longmove
02a04     10 01 90 FD | 	jmp	#LR__0072
02a08                 | LR__0066
02a08                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
02a08     50 FA 05 F1 | 	add	objptr, #80
02a0c     FD 5E 02 F6 | 	mov	arg01, objptr
02a10     50 FA 85 F1 | 	sub	objptr, #80
02a14     0E 00 00 FF 
02a18     D8 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
02a1c     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02a20     0E 00 00 FF 
02a24     D8 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
02a28     10 62 06 F6 | 	mov	arg03, #16
02a2c     2C 37 B0 FD | 	call	#__system__longmove
02a30     E4 00 90 FD | 	jmp	#LR__0072
02a34                 | LR__0067
02a34                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
02a34     50 FA 05 F1 | 	add	objptr, #80
02a38     FD 5E 02 F6 | 	mov	arg01, objptr
02a3c     50 FA 85 F1 | 	sub	objptr, #80
02a40     0E 00 00 FF 
02a44     18 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
02a48     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02a4c     0E 00 00 FF 
02a50     18 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
02a54     10 62 06 F6 | 	mov	arg03, #16
02a58     00 37 B0 FD | 	call	#__system__longmove
02a5c     B8 00 90 FD | 	jmp	#LR__0072
02a60                 | LR__0068
02a60                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02a60     50 FA 05 F1 | 	add	objptr, #80
02a64     FD 5E 02 F6 | 	mov	arg01, objptr
02a68     50 FA 85 F1 | 	sub	objptr, #80
02a6c     0E 00 00 FF 
02a70     58 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02a74     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02a78     0E 00 00 FF 
02a7c     58 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02a80     10 62 06 F6 | 	mov	arg03, #16
02a84     D4 36 B0 FD | 	call	#__system__longmove
02a88     8C 00 90 FD | 	jmp	#LR__0072
02a8c                 | LR__0069
02a8c                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02a8c     50 FA 05 F1 | 	add	objptr, #80
02a90     FD 5E 02 F6 | 	mov	arg01, objptr
02a94     50 FA 85 F1 | 	sub	objptr, #80
02a98     0E 00 00 FF 
02a9c     98 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02aa0     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02aa4     0E 00 00 FF 
02aa8     98 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02aac     10 62 06 F6 | 	mov	arg03, #16
02ab0     A8 36 B0 FD | 	call	#__system__longmove
02ab4     60 00 90 FD | 	jmp	#LR__0072
02ab8                 | LR__0070
02ab8                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
02ab8     50 FA 05 F1 | 	add	objptr, #80
02abc     FD 5E 02 F6 | 	mov	arg01, objptr
02ac0     50 FA 85 F1 | 	sub	objptr, #80
02ac4     0E 00 00 FF 
02ac8     D8 07 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02acc     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02ad0     0E 00 00 FF 
02ad4     D8 07 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
02ad8     10 62 06 F6 | 	mov	arg03, #16
02adc     7C 36 B0 FD | 	call	#__system__longmove
02ae0     34 00 90 FD | 	jmp	#LR__0072
02ae4                 | LR__0071
02ae4                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02ae4     50 FA 05 F1 | 	add	objptr, #80
02ae8     FD 72 02 F6 | 	mov	local04, objptr
02aec     0F 00 00 FF 
02af0     18 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
02af4     03 75 02 F6 | 	mov	local05, ptr__hng030rm_spin2_dat__
02af8     10 76 06 F6 | 	mov	local06, #16
02afc     39 5F 02 F6 | 	mov	arg01, local04
02b00     3A 61 02 F6 | 	mov	arg02, local05
02b04     10 62 06 F6 | 	mov	arg03, #16
02b08     50 FA 85 F1 | 	sub	objptr, #80
02b0c     0F 00 00 FF 
02b10     18 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
02b14     44 36 B0 FD | 	call	#__system__longmove
02b18                 | LR__0072
02b18                 | ' 
02b18                 | ' ' 4-bit graphics: do nothing with timings :)
02b18                 | ' if mode<512
02b18     01 00 00 FF 
02b1c     00 6C 5E F2 | 	cmps	local01, ##512 wcz
02b20     1C 00 90 3D |  if_ae	jmp	#LR__0073
02b24                 | '   palette_ptr:=@ataripalette
02b24     0C 00 00 FF 
02b28     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02b2c     18 FA 05 F1 | 	add	objptr, #24
02b30     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02b34     18 FA 85 F1 | 	sub	objptr, #24
02b38     0C 00 00 FF 
02b3c     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02b40                 | LR__0073
02b40                 | ' 
02b40                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
02b40     36 6F 02 F6 | 	mov	local02, local01
02b44     01 00 00 FF 
02b48     30 6E 06 F5 | 	and	local02, ##560
02b4c     01 00 00 FF 
02b50     30 6E 0E F2 | 	cmp	local02, ##560 wz
02b54     44 00 90 5D |  if_ne	jmp	#LR__0074
02b58                 | '   timings[5]:=4
02b58     64 FA 05 F1 | 	add	objptr, #100
02b5c     FD 08 68 FC | 	wrlong	#4, objptr
02b60                 | '   timings[11]:=timings[11]<<1
02b60     18 FA 05 F1 | 	add	objptr, #24
02b64     FD 6E 02 FB | 	rdlong	local02, objptr
02b68     01 6E 66 F0 | 	shl	local02, #1
02b6c     FD 6E 62 FC | 	wrlong	local02, objptr
02b70                 | '   putpixel:=p8
02b70     6C FA 05 F1 | 	add	objptr, #108
02b74     FD 6E 02 FB | 	rdlong	local02, objptr
02b78     10 FA 85 F1 | 	sub	objptr, #16
02b7c     FD 6E 62 FC | 	wrlong	local02, objptr
02b80                 | '   palette_ptr:=@ataripalette
02b80     0C 00 00 FF 
02b84     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02b88     C0 FA 85 F1 | 	sub	objptr, #192
02b8c     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02b90     18 FA 85 F1 | 	sub	objptr, #24
02b94     0C 00 00 FF 
02b98     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02b9c                 | LR__0074
02b9c                 | ' 
02b9c                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02b9c     36 6F 02 F6 | 	mov	local02, local01
02ba0     01 00 00 FF 
02ba4     30 6E 06 F5 | 	and	local02, ##560
02ba8     01 00 00 FF 
02bac     10 6E 0E F2 | 	cmp	local02, ##528 wz
02bb0     44 00 90 5D |  if_ne	jmp	#LR__0075
02bb4                 | '   timings[5]:=16
02bb4     64 FA 05 F1 | 	add	objptr, #100
02bb8     FD 20 68 FC | 	wrlong	#16, objptr
02bbc                 | '   timings[11]:=timings[11]>>1
02bbc     18 FA 05 F1 | 	add	objptr, #24
02bc0     FD 6E 02 FB | 	rdlong	local02, objptr
02bc4     01 6E 46 F0 | 	shr	local02, #1
02bc8     FD 6E 62 FC | 	wrlong	local02, objptr
02bcc                 | '   putpixel:=p2
02bcc     64 FA 05 F1 | 	add	objptr, #100
02bd0     FD 6E 02 FB | 	rdlong	local02, objptr
02bd4     08 FA 85 F1 | 	sub	objptr, #8
02bd8     FD 6E 62 FC | 	wrlong	local02, objptr
02bdc                 | '   palette_ptr:=@fourcolors
02bdc     0C 00 00 FF 
02be0     08 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02be4     C0 FA 85 F1 | 	sub	objptr, #192
02be8     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02bec     18 FA 85 F1 | 	sub	objptr, #24
02bf0     0C 00 00 FF 
02bf4     08 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
02bf8                 | LR__0075
02bf8                 | ' 
02bf8                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
02bf8     36 6F 02 F6 | 	mov	local02, local01
02bfc     01 00 00 FF 
02c00     30 6E 06 F5 | 	and	local02, ##560
02c04     01 00 00 FF 
02c08     00 6E 0E F2 | 	cmp	local02, ##512 wz
02c0c     44 00 90 5D |  if_ne	jmp	#LR__0076
02c10                 | '   timings[5]:=32
02c10     64 FA 05 F1 | 	add	objptr, #100
02c14     FD 40 68 FC | 	wrlong	#32, objptr
02c18                 | '   timings[11]:=timings[11]>>2
02c18     18 FA 05 F1 | 	add	objptr, #24
02c1c     FD 6E 02 FB | 	rdlong	local02, objptr
02c20     02 6E 46 F0 | 	shr	local02, #2
02c24     FD 6E 62 FC | 	wrlong	local02, objptr
02c28                 | '   putpixel:=p1
02c28     60 FA 05 F1 | 	add	objptr, #96
02c2c     FD 6E 02 FB | 	rdlong	local02, objptr
02c30     04 FA 85 F1 | 	sub	objptr, #4
02c34     FD 6E 62 FC | 	wrlong	local02, objptr
02c38                 | '   palette_ptr:=@twocolors
02c38     0C 00 00 FF 
02c3c     00 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
02c40     C0 FA 85 F1 | 	sub	objptr, #192
02c44     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c48     18 FA 85 F1 | 	sub	objptr, #24
02c4c     0C 00 00 FF 
02c50     00 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02c54                 | LR__0076
02c54                 | ' 
02c54                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02c54     36 6F 02 F6 | 	mov	local02, local01
02c58     01 00 00 FF 
02c5c     30 6E 06 F5 | 	and	local02, ##560
02c60     01 00 00 FF 
02c64     20 6E 0E F2 | 	cmp	local02, ##544 wz
02c68     2C 00 90 5D |  if_ne	jmp	#LR__0077
02c6c                 | '   putpixel:=p4
02c6c     E4 FA 05 F1 | 	add	objptr, #228
02c70     FD 6E 02 FB | 	rdlong	local02, objptr
02c74     0C FA 85 F1 | 	sub	objptr, #12
02c78     FD 6E 62 FC | 	wrlong	local02, objptr
02c7c                 | '   palette_ptr:=@vga16
02c7c     0C 00 00 FF 
02c80     18 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02c84     C0 FA 85 F1 | 	sub	objptr, #192
02c88     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02c8c     18 FA 85 F1 | 	sub	objptr, #24
02c90     0C 00 00 FF 
02c94     18 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02c98                 | LR__0077
02c98                 | ' 
02c98                 | ' repeat i from 0 to 4
02c98     00 78 06 F6 | 	mov	local07, #0
02c9c     BC D3 9F FE | 	loc	pa,	#(@LR__0079-@LR__0078)
02ca0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02ca4                 | LR__0078
02ca4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02ca4     3C 73 02 F6 | 	mov	local04, local07
02ca8     02 72 66 F0 | 	shl	local04, #2
02cac     50 FA 05 F1 | 	add	objptr, #80
02cb0     FD 74 02 F6 | 	mov	local05, objptr
02cb4     FD 72 02 F1 | 	add	local04, objptr
02cb8     2C FA 85 F1 | 	sub	objptr, #44
02cbc     FD 7A 02 FB | 	rdlong	local08, objptr
02cc0     3D 77 02 F6 | 	mov	local06, local08
02cc4     11 76 66 F0 | 	shl	local06, #17
02cc8     39 6F 02 FB | 	rdlong	local02, local04
02ccc     3B 6F 02 F1 | 	add	local02, local06
02cd0     80 40 38 FF 
02cd4     00 6E 06 F1 | 	add	local02, ##1887502336
02cd8     3C 7D 02 F6 | 	mov	local09, local07
02cdc     02 7C 66 F0 | 	shl	local09, #2
02ce0     2C FA 05 F1 | 	add	objptr, #44
02ce4     FD 7E 02 F6 | 	mov	local10, objptr
02ce8     FD 7C 02 F1 | 	add	local09, objptr
02cec     3E 6F 62 FC | 	wrlong	local02, local09
02cf0     01 78 06 F1 | 	add	local07, #1
02cf4     05 78 5E F2 | 	cmps	local07, #5 wcz
02cf8     50 FA 85 F1 | 	sub	objptr, #80
02cfc     A4 FF 9F CD |  if_b	jmp	#LR__0078
02d00                 | LR__0079
02d00                 | ' timings[5]:=timings[5]+hdmibase<<17
02d00     24 FA 05 F1 | 	add	objptr, #36
02d04     FD 72 02 FB | 	rdlong	local04, objptr
02d08     11 72 66 F0 | 	shl	local04, #17
02d0c     40 FA 05 F1 | 	add	objptr, #64
02d10     FD 76 02 FB | 	rdlong	local06, objptr
02d14     3B 6F 02 F6 | 	mov	local02, local06
02d18     39 6F 02 F1 | 	add	local02, local04
02d1c     FD 6E 62 FC | 	wrlong	local02, objptr
02d20                 | ' clkfreq:=timings[13]
02d20     20 FA 05 F1 | 	add	objptr, #32
02d24     FD 6E 02 FB | 	rdlong	local02, objptr
02d28     14 6E 66 FC | 	wrlong	local02, #20
02d2c                 | ' hubset(timings[14])
02d2c     04 FA 05 F1 | 	add	objptr, #4
02d30     FD 5E 02 FB | 	rdlong	arg01, objptr
02d34     88 FA 85 F1 | 	sub	objptr, #136
02d38     00 5E 62 FD | 	hubset	arg01
02d3c                 | ' waitms(1)
02d3c     01 5E 06 F6 | 	mov	arg01, #1
02d40     C4 36 B0 FD | 	call	#__system___waitms
02d44                 | ' 
02d44                 | ' 
02d44                 | ' xzoom:=1<<(mode & 3)
02d44     36 73 02 F6 | 	mov	local04, local01
02d48     03 72 06 F5 | 	and	local04, #3
02d4c     39 6F C2 F9 | 	decod	local02, local04
02d50     CC FA 05 F1 | 	add	objptr, #204
02d54     FD 6E 62 FC | 	wrlong	local02, objptr
02d58                 | ' 
02d58                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02d58     37 73 02 F6 | 	mov	local04, local02
02d5c     CC FA 85 F1 | 	sub	objptr, #204
02d60     08 72 0E F2 | 	cmp	local04, #8 wz
02d64     24 00 90 5D |  if_ne	jmp	#LR__0080
02d68     36 75 02 F6 | 	mov	local05, local01
02d6c     04 74 46 F0 | 	shr	local05, #4
02d70     03 74 06 F5 | 	and	local05, #3
02d74     03 74 0E F2 | 	cmp	local05, #3 wz
02d78     10 00 90 AD |  if_e	jmp	#LR__0080
02d7c                 | '   xzoom:=4
02d7c     04 6E 06 F6 | 	mov	local02, #4
02d80     CC FA 05 F1 | 	add	objptr, #204
02d84     FD 08 68 FC | 	wrlong	#4, objptr
02d88     CC FA 85 F1 | 	sub	objptr, #204
02d8c                 | LR__0080
02d8c                 | ' 
02d8c                 | ' yzoom:=1<<((mode>>2) & 3)
02d8c     36 73 02 F6 | 	mov	local04, local01
02d90     02 72 46 F0 | 	shr	local04, #2
02d94     03 72 06 F5 | 	and	local04, #3
02d98     39 6F C2 F9 | 	decod	local02, local04
02d9c     D0 FA 05 F1 | 	add	objptr, #208
02da0     FD 6E 62 FC | 	wrlong	local02, objptr
02da4                 | ' azoom:=xzoom*yzoom
02da4     04 FA 85 F1 | 	sub	objptr, #4
02da8     FD 72 02 FB | 	rdlong	local04, objptr
02dac     04 FA 05 F1 | 	add	objptr, #4
02db0     FD 76 02 FB | 	rdlong	local06, objptr
02db4     3B 73 02 FD | 	qmul	local04, local06
02db8     18 6E 62 FD | 	getqx	local02
02dbc     04 FA 05 F1 | 	add	objptr, #4
02dc0     FD 6E 62 FC | 	wrlong	local02, objptr
02dc4                 | ' 
02dc4                 | ' cpl:=timings[11]
02dc4     58 FA 85 F1 | 	sub	objptr, #88
02dc8     FD 6E 02 FB | 	rdlong	local02, objptr
02dcc     14 FA 05 F1 | 	add	objptr, #20
02dd0     FD 6E 62 FC | 	wrlong	local02, objptr
02dd4     90 FA 85 F1 | 	sub	objptr, #144
02dd8                 | ' if (mode<512)
02dd8     01 00 00 FF 
02ddc     00 6C 5E F2 | 	cmps	local01, ##512 wcz
02de0     60 00 90 3D |  if_ae	jmp	#LR__0081
02de4                 | '   lines:=(timings[12]>>4)+/yzoom
02de4     80 FA 05 F1 | 	add	objptr, #128
02de8     FD 98 02 FB | 	rdlong	muldiva_, objptr
02dec     04 98 46 F0 | 	shr	muldiva_, #4
02df0     50 FA 05 F1 | 	add	objptr, #80
02df4     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02df8     D0 FA 85 F1 | 	sub	objptr, #208
02dfc     C2 00 A0 FD | 	call	#unsdivide_
02e00     94 FA 05 F1 | 	add	objptr, #148
02e04     FD 9A 62 FC | 	wrlong	muldivb_, objptr
02e08                 | '   if ((timings[12]>>4)+//yzoom) <>0
02e08     14 FA 85 F1 | 	sub	objptr, #20
02e0c     FD 98 02 FB | 	rdlong	muldiva_, objptr
02e10     04 98 46 F0 | 	shr	muldiva_, #4
02e14     50 FA 05 F1 | 	add	objptr, #80
02e18     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02e1c     D0 FA 85 F1 | 	sub	objptr, #208
02e20     C2 00 A0 FD | 	call	#unsdivide_
02e24     00 98 0E F2 | 	cmp	muldiva_, #0 wz
02e28     AC 00 90 AD |  if_e	jmp	#LR__0084
02e2c                 | '     lines +=1
02e2c     94 FA 05 F1 | 	add	objptr, #148
02e30     FD 6E 02 FB | 	rdlong	local02, objptr
02e34     01 6E 06 F1 | 	add	local02, #1
02e38     FD 6E 62 FC | 	wrlong	local02, objptr
02e3c     94 FA 85 F1 | 	sub	objptr, #148
02e40                 | ' 
02e40                 | ' else
02e40     94 00 90 FD | 	jmp	#LR__0084
02e44                 | LR__0081
02e44                 | '   lines:=timings[12]/yzoom
02e44     80 FA 05 F1 | 	add	objptr, #128
02e48     FD 98 02 FB | 	rdlong	muldiva_, objptr
02e4c     50 FA 05 F1 | 	add	objptr, #80
02e50     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02e54     D0 FA 85 F1 | 	sub	objptr, #208
02e58     C6 00 A0 FD | 	call	#divide_
02e5c     94 FA 05 F1 | 	add	objptr, #148
02e60     FD 9A 62 FC | 	wrlong	muldivb_, objptr
02e64                 | '   if cpl//xzoom==0
02e64     04 FA 85 F1 | 	sub	objptr, #4
02e68     FD 98 02 FB | 	rdlong	muldiva_, objptr
02e6c     3C FA 05 F1 | 	add	objptr, #60
02e70     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02e74     CC FA 85 F1 | 	sub	objptr, #204
02e78     C6 00 A0 FD | 	call	#divide_
02e7c     00 98 0E F2 | 	cmp	muldiva_, #0 wz
02e80     28 00 90 5D |  if_ne	jmp	#LR__0082
02e84                 | '     cpl:=cpl/xzoom
02e84     90 FA 05 F1 | 	add	objptr, #144
02e88     FD 98 02 FB | 	rdlong	muldiva_, objptr
02e8c     3C FA 05 F1 | 	add	objptr, #60
02e90     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02e94     CC FA 85 F1 | 	sub	objptr, #204
02e98     C6 00 A0 FD | 	call	#divide_
02e9c     90 FA 05 F1 | 	add	objptr, #144
02ea0     FD 9A 62 FC | 	wrlong	muldivb_, objptr
02ea4     90 FA 85 F1 | 	sub	objptr, #144
02ea8                 | '   else
02ea8     2C 00 90 FD | 	jmp	#LR__0083
02eac                 | LR__0082
02eac                 | '     cpl:=cpl/xzoom+1
02eac     90 FA 05 F1 | 	add	objptr, #144
02eb0     FD 98 02 FB | 	rdlong	muldiva_, objptr
02eb4     3C FA 05 F1 | 	add	objptr, #60
02eb8     FD 9A 02 FB | 	rdlong	muldivb_, objptr
02ebc     CC FA 85 F1 | 	sub	objptr, #204
02ec0     C6 00 A0 FD | 	call	#divide_
02ec4     4D 6F 02 F6 | 	mov	local02, muldivb_
02ec8     01 6E 06 F1 | 	add	local02, #1
02ecc     90 FA 05 F1 | 	add	objptr, #144
02ed0     FD 6E 62 FC | 	wrlong	local02, objptr
02ed4     90 FA 85 F1 | 	sub	objptr, #144
02ed8                 | LR__0083
02ed8                 | LR__0084
02ed8                 | ' 
02ed8                 | ' buflen:=(cpl*lines)
02ed8     90 FA 05 F1 | 	add	objptr, #144
02edc     FD 72 02 FB | 	rdlong	local04, objptr
02ee0     04 FA 05 F1 | 	add	objptr, #4
02ee4     FD 76 02 FB | 	rdlong	local06, objptr
02ee8     3B 73 02 FD | 	qmul	local04, local06
02eec     18 6E 62 FD | 	getqx	local02
02ef0     64 FA 85 F1 | 	sub	objptr, #100
02ef4     FD 6E 62 FC | 	wrlong	local02, objptr
02ef8                 | ' buf_ptr:=$80000-4*buflen
02ef8     37 73 02 F6 | 	mov	local04, local02
02efc     30 FA 85 F1 | 	sub	objptr, #48
02f00     02 72 66 F0 | 	shl	local04, #2
02f04     13 6E C6 F9 | 	decod	local02, #19
02f08     39 6F 82 F1 | 	sub	local02, local04
02f0c     FD 6E 62 FC | 	wrlong	local02, objptr
02f10                 | ' mode_ptr:=@timings
02f10     50 FA 05 F1 | 	add	objptr, #80
02f14     FD 6E 02 F6 | 	mov	local02, objptr
02f18     3C FA 85 F1 | 	sub	objptr, #60
02f1c     FD 6E 62 FC | 	wrlong	local02, objptr
02f20                 | ' graphmode:=mode
02f20     B0 FA 05 F1 | 	add	objptr, #176
02f24     FD 6C 62 FC | 	wrlong	local01, objptr
02f28     C4 FA 85 F1 | 	sub	objptr, #196
02f2c                 | ' makedl(mode)
02f2c     36 5F 02 F6 | 	mov	arg01, local01
02f30     0C 00 B0 FD | 	call	#_hng030rm_spin2_makedl
02f34                 | LR__0085
02f34     AF F0 03 F6 | 	mov	ptra, fp
02f38     BA 00 A0 FD | 	call	#popregs_
02f3c                 | _hng030rm_spin2_setmode_ret
02f3c     2D 00 64 FD | 	ret
02f40                 | 
02f40                 | ' 
02f40                 | ' 
02f40                 | ' 
02f40                 | ' 
02f40                 | ' '---------- Make a display list
02f40                 | ' 
02f40                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
02f40                 | _hng030rm_spin2_makedl
02f40                 | ' 
02f40                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
02f40                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
02f40                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
02f40                 | ' 
02f40                 | ' '   0 - display a up/down border line
02f40                 | ' 
02f40                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
02f40                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
02f40                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
02f40                 | ' '    nnnn - font line to display, 0..15
02f40                 | ' '    llllll - character line, determines the cursor Y position
02f40                 | ' 
02f40                 | ' 
02f40                 | ' if (mode &256==0)
02f40     00 5F CE F7 | 	test	arg01, #256 wz
02f44     1C 00 90 5D |  if_ne	jmp	#LR__0086
02f48                 | '   dl_ptr:=buf_ptr-4*576
02f48     FD 1E 02 FB | 	rdlong	_var01, objptr
02f4c     04 00 00 FF 
02f50     00 1F 86 F1 | 	sub	_var01, ##2304
02f54     1C FA 05 F1 | 	add	objptr, #28
02f58     FD 1E 62 FC | 	wrlong	_var01, objptr
02f5c     1C FA 85 F1 | 	sub	objptr, #28
02f60                 | ' else
02f60     18 00 90 FD | 	jmp	#LR__0087
02f64                 | LR__0086
02f64                 | '   dl_ptr:=buf_ptr-4*496
02f64     FD 1E 02 FB | 	rdlong	_var01, objptr
02f68     03 00 00 FF 
02f6c     C0 1F 86 F1 | 	sub	_var01, ##1984
02f70     1C FA 05 F1 | 	add	objptr, #28
02f74     FD 1E 62 FC | 	wrlong	_var01, objptr
02f78     1C FA 85 F1 | 	sub	objptr, #28
02f7c                 | LR__0087
02f7c                 | '  ' dl_ptr:=buf_ptr-4*540
02f7c                 | ' 
02f7c                 | ' vzoom:=((mode>>2) & 3)
02f7c     2F 21 02 F6 | 	mov	_var02, arg01
02f80     02 20 46 F0 | 	shr	_var02, #2
02f84     03 20 06 F5 | 	and	_var02, #3
02f88                 | ' 
02f88                 | ' 
02f88                 | ' if mode<512 '' text modes
02f88     01 00 00 FF 
02f8c     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
02f90     E8 01 90 3D |  if_ae	jmp	#LR__0095
02f94                 | ' 
02f94                 | '   if timings[6]>0 'borders
02f94     68 FA 05 F1 | 	add	objptr, #104
02f98     FD 1E 02 FB | 	rdlong	_var01, objptr
02f9c     68 FA 85 F1 | 	sub	objptr, #104
02fa0     00 1E 5E F2 | 	cmps	_var01, #0 wcz
02fa4     D4 00 90 ED |  if_be	jmp	#LR__0092
02fa8                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02fa8     00 22 06 F6 | 	mov	_var03, #0
02fac     68 FA 05 F1 | 	add	objptr, #104
02fb0     FD 24 02 FB | 	rdlong	_var04, objptr
02fb4     68 FA 85 F1 | 	sub	objptr, #104
02fb8     01 24 86 F1 | 	sub	_var04, #1
02fbc     00 24 5E F2 | 	cmps	_var04, #0 wcz
02fc0     01 26 06 16 |  if_a	mov	_var05, #1
02fc4     01 26 66 E6 |  if_be	neg	_var05, #1
02fc8     13 29 02 F6 | 	mov	_var06, _var05
02fcc     13 25 02 F1 | 	add	_var04, _var05
02fd0     54 D0 9F FE | 	loc	pa,	#(@LR__0089-@LR__0088)
02fd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
02fd8                 | LR__0088
02fd8                 | '       long[dl_ptr+4*i]:=$0
02fd8     1C FA 05 F1 | 	add	objptr, #28
02fdc     FD 2A 02 FB | 	rdlong	_var07, objptr
02fe0     1C FA 85 F1 | 	sub	objptr, #28
02fe4     11 2D 02 F6 | 	mov	_var08, _var03
02fe8     02 2C 66 F0 | 	shl	_var08, #2
02fec     16 2B 02 F1 | 	add	_var07, _var08
02ff0     15 01 68 FC | 	wrlong	#0, _var07
02ff4     14 23 02 F1 | 	add	_var03, _var06
02ff8     12 23 0A F2 | 	cmp	_var03, _var04 wz
02ffc     D8 FF 9F 5D |  if_ne	jmp	#LR__0088
03000                 | LR__0089
03000                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03000     68 FA 05 F1 | 	add	objptr, #104
03004     FD 22 02 FB | 	rdlong	_var03, objptr
03008     18 FA 05 F1 | 	add	objptr, #24
0300c     FD 26 02 FB | 	rdlong	_var05, objptr
03010     13 23 02 F1 | 	add	_var03, _var05
03014     0C FA 05 F1 | 	add	objptr, #12
03018     FD 2E 02 FB | 	rdlong	_var09, objptr
0301c     01 2E 86 F1 | 	sub	_var09, #1
03020     24 FA 85 F1 | 	sub	objptr, #36
03024     FD 30 02 FB | 	rdlong	_var10, objptr
03028     18 FA 05 F1 | 	add	objptr, #24
0302c     FD 32 02 FB | 	rdlong	_var11, objptr
03030     80 FA 85 F1 | 	sub	objptr, #128
03034     19 31 02 F1 | 	add	_var10, _var11
03038     18 2F 5A F2 | 	cmps	_var09, _var10 wcz
0303c     01 2C 06 16 |  if_a	mov	_var08, #1
03040     01 2C 66 E6 |  if_be	neg	_var08, #1
03044     16 35 02 F6 | 	mov	_var12, _var08
03048     16 2F 02 F1 | 	add	_var09, _var08
0304c     D8 CF 9F FE | 	loc	pa,	#(@LR__0091-@LR__0090)
03050     93 00 A0 FD | 	call	#FCACHE_LOAD_
03054                 | LR__0090
03054                 | '       long[dl_ptr+4*i]:=$0
03054     1C FA 05 F1 | 	add	objptr, #28
03058     FD 36 02 FB | 	rdlong	_var13, objptr
0305c     1C FA 85 F1 | 	sub	objptr, #28
03060     11 39 02 F6 | 	mov	_var14, _var03
03064     02 38 66 F0 | 	shl	_var14, #2
03068     1C 37 02 F1 | 	add	_var13, _var14
0306c     1B 01 68 FC | 	wrlong	#0, _var13
03070     1A 23 02 F1 | 	add	_var03, _var12
03074     17 23 0A F2 | 	cmp	_var03, _var09 wz
03078     D8 FF 9F 5D |  if_ne	jmp	#LR__0090
0307c                 | LR__0091
0307c                 | LR__0092
0307c                 | '   lpc:=16<<vzoom
0307c     10 3A 06 F6 | 	mov	_var15, #16
03080     10 3B 62 F0 | 	shl	_var15, _var02
03084                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03084     68 FA 05 F1 | 	add	objptr, #104
03088     FD 22 02 FB | 	rdlong	_var03, objptr
0308c     11 3D 02 F6 | 	mov	_var16, _var03
03090     18 FA 05 F1 | 	add	objptr, #24
03094     FD 3E 02 FB | 	rdlong	_var17, objptr
03098     1F 3D 02 F1 | 	add	_var16, _var17
0309c     01 3C 86 F1 | 	sub	_var16, #1
030a0     18 FA 85 F1 | 	sub	objptr, #24
030a4     FD 2C 02 FB | 	rdlong	_var08, objptr
030a8     68 FA 85 F1 | 	sub	objptr, #104
030ac     16 3D 5A F2 | 	cmps	_var16, _var08 wcz
030b0     01 40 06 16 |  if_a	mov	_var18, #1
030b4     01 40 66 E6 |  if_be	neg	_var18, #1
030b8     20 43 02 F6 | 	mov	_var19, _var18
030bc     20 3D 02 F1 | 	add	_var16, _var18
030c0     F0 CF 9F FE | 	loc	pa,	#(@LR__0094-@LR__0093)
030c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
030c8                 | LR__0093
030c8                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
030c8     11 99 02 F6 | 	mov	muldiva_, _var03
030cc     68 FA 05 F1 | 	add	objptr, #104
030d0     FD 44 02 FB | 	rdlong	_var20, objptr
030d4     68 FA 85 F1 | 	sub	objptr, #104
030d8     22 99 82 F1 | 	sub	muldiva_, _var20
030dc     1D 9B 02 F6 | 	mov	muldivb_, _var15
030e0     C2 00 A0 FD | 	call	#unsdivide_
030e4     10 99 42 F0 | 	shr	muldiva_, _var02
030e8     4C 47 02 F6 | 	mov	_var21, muldiva_
030ec                 | '     charline:=(i-timings[6])+/lpc
030ec     11 99 02 F6 | 	mov	muldiva_, _var03
030f0     68 FA 05 F1 | 	add	objptr, #104
030f4     FD 48 02 FB | 	rdlong	_var22, objptr
030f8     68 FA 85 F1 | 	sub	objptr, #104
030fc     24 99 82 F1 | 	sub	muldiva_, _var22
03100     1D 9B 02 F6 | 	mov	muldivb_, _var15
03104     C2 00 A0 FD | 	call	#unsdivide_
03108     4D 4B 02 F6 | 	mov	_var23, muldivb_
0310c                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
0310c     FD 32 02 FB | 	rdlong	_var11, objptr
03110     90 FA 05 F1 | 	add	objptr, #144
03114     FD 44 02 FB | 	rdlong	_var20, objptr
03118     25 45 02 FD | 	qmul	_var20, _var23
0311c     18 4C 62 FD | 	getqx	_var24
03120     02 4C 66 F0 | 	shl	_var24, #2
03124     26 33 02 F1 | 	add	_var11, _var24
03128     2F 39 02 F6 | 	mov	_var14, arg01
0312c     03 38 06 F5 | 	and	_var14, #3
03130     1C 33 02 F1 | 	add	_var11, _var14
03134                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03134     0C 32 66 F0 | 	shl	_var11, #12
03138     23 49 02 F6 | 	mov	_var22, _var21
0313c     08 48 66 F0 | 	shl	_var22, #8
03140     24 33 02 F1 | 	add	_var11, _var22
03144     25 45 02 F6 | 	mov	_var20, _var23
03148     02 44 66 F0 | 	shl	_var20, #2
0314c     22 33 02 F1 | 	add	_var11, _var20
03150     01 32 06 F1 | 	add	_var11, #1
03154     74 FA 85 F1 | 	sub	objptr, #116
03158     FD 36 02 FB | 	rdlong	_var13, objptr
0315c     1C FA 85 F1 | 	sub	objptr, #28
03160     11 39 02 F6 | 	mov	_var14, _var03
03164     02 38 66 F0 | 	shl	_var14, #2
03168     1C 37 02 F1 | 	add	_var13, _var14
0316c     1B 33 62 FC | 	wrlong	_var11, _var13
03170     21 23 02 F1 | 	add	_var03, _var19
03174     1E 23 0A F2 | 	cmp	_var03, _var16 wz
03178     4C FF 9F 5D |  if_ne	jmp	#LR__0093
0317c                 | LR__0094
0317c                 | LR__0095
0317c                 | ' 
0317c                 | ' 
0317c                 | ' 
0317c                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
0317c     01 00 00 FF 
03180     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03184     A8 01 90 CD |  if_b	jmp	#LR__0103
03188                 | ' 
03188                 | '   if timings[6]>0 'borders
03188     68 FA 05 F1 | 	add	objptr, #104
0318c     FD 1E 02 FB | 	rdlong	_var01, objptr
03190     68 FA 85 F1 | 	sub	objptr, #104
03194     00 1E 5E F2 | 	cmps	_var01, #0 wcz
03198     D4 00 90 ED |  if_be	jmp	#LR__0100
0319c                 | '     repeat i from 0 to timings[6]-1 '0 to -1
0319c     00 22 06 F6 | 	mov	_var03, #0
031a0     68 FA 05 F1 | 	add	objptr, #104
031a4     FD 4E 02 FB | 	rdlong	_var25, objptr
031a8     68 FA 85 F1 | 	sub	objptr, #104
031ac     01 4E 86 F1 | 	sub	_var25, #1
031b0     00 4E 5E F2 | 	cmps	_var25, #0 wcz
031b4     01 26 06 16 |  if_a	mov	_var05, #1
031b8     01 26 66 E6 |  if_be	neg	_var05, #1
031bc     13 51 02 F6 | 	mov	_var26, _var05
031c0     13 4F 02 F1 | 	add	_var25, _var05
031c4     60 CE 9F FE | 	loc	pa,	#(@LR__0097-@LR__0096)
031c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
031cc                 | LR__0096
031cc                 | '       long[dl_ptr+4*i]:=$0
031cc     1C FA 05 F1 | 	add	objptr, #28
031d0     FD 2A 02 FB | 	rdlong	_var07, objptr
031d4     1C FA 85 F1 | 	sub	objptr, #28
031d8     11 2D 02 F6 | 	mov	_var08, _var03
031dc     02 2C 66 F0 | 	shl	_var08, #2
031e0     16 2B 02 F1 | 	add	_var07, _var08
031e4     15 01 68 FC | 	wrlong	#0, _var07
031e8     28 23 02 F1 | 	add	_var03, _var26
031ec     27 23 0A F2 | 	cmp	_var03, _var25 wz
031f0     D8 FF 9F 5D |  if_ne	jmp	#LR__0096
031f4                 | LR__0097
031f4                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
031f4     68 FA 05 F1 | 	add	objptr, #104
031f8     FD 22 02 FB | 	rdlong	_var03, objptr
031fc     18 FA 05 F1 | 	add	objptr, #24
03200     FD 26 02 FB | 	rdlong	_var05, objptr
03204     13 23 02 F1 | 	add	_var03, _var05
03208     0C FA 05 F1 | 	add	objptr, #12
0320c     FD 52 02 FB | 	rdlong	_var27, objptr
03210     01 52 86 F1 | 	sub	_var27, #1
03214     24 FA 85 F1 | 	sub	objptr, #36
03218     FD 30 02 FB | 	rdlong	_var10, objptr
0321c     18 FA 05 F1 | 	add	objptr, #24
03220     FD 32 02 FB | 	rdlong	_var11, objptr
03224     80 FA 85 F1 | 	sub	objptr, #128
03228     19 31 02 F1 | 	add	_var10, _var11
0322c     18 53 5A F2 | 	cmps	_var27, _var10 wcz
03230     01 2C 06 16 |  if_a	mov	_var08, #1
03234     01 2C 66 E6 |  if_be	neg	_var08, #1
03238     16 55 02 F6 | 	mov	_var28, _var08
0323c     16 53 02 F1 | 	add	_var27, _var08
03240     E4 CD 9F FE | 	loc	pa,	#(@LR__0099-@LR__0098)
03244     93 00 A0 FD | 	call	#FCACHE_LOAD_
03248                 | LR__0098
03248                 | '       long[dl_ptr+4*i]:=$0
03248     1C FA 05 F1 | 	add	objptr, #28
0324c     FD 36 02 FB | 	rdlong	_var13, objptr
03250     1C FA 85 F1 | 	sub	objptr, #28
03254     11 39 02 F6 | 	mov	_var14, _var03
03258     02 38 66 F0 | 	shl	_var14, #2
0325c     1C 37 02 F1 | 	add	_var13, _var14
03260     1B 01 68 FC | 	wrlong	#0, _var13
03264     2A 23 02 F1 | 	add	_var03, _var28
03268     29 23 0A F2 | 	cmp	_var03, _var27 wz
0326c     D8 FF 9F 5D |  if_ne	jmp	#LR__0098
03270                 | LR__0099
03270                 | LR__0100
03270                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03270     68 FA 05 F1 | 	add	objptr, #104
03274     FD 22 02 FB | 	rdlong	_var03, objptr
03278     11 57 02 F6 | 	mov	_var29, _var03
0327c     18 FA 05 F1 | 	add	objptr, #24
03280     FD 3E 02 FB | 	rdlong	_var17, objptr
03284     1F 57 02 F1 | 	add	_var29, _var17
03288     01 56 86 F1 | 	sub	_var29, #1
0328c     18 FA 85 F1 | 	sub	objptr, #24
03290     FD 2C 02 FB | 	rdlong	_var08, objptr
03294     68 FA 85 F1 | 	sub	objptr, #104
03298     16 57 5A F2 | 	cmps	_var29, _var08 wcz
0329c     01 40 06 16 |  if_a	mov	_var18, #1
032a0     01 40 66 E6 |  if_be	neg	_var18, #1
032a4     20 59 02 F6 | 	mov	_var30, _var18
032a8     20 57 02 F1 | 	add	_var29, _var18
032ac     CC CD 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
032b0     93 00 A0 FD | 	call	#FCACHE_LOAD_
032b4                 | LR__0101
032b4                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
032b4     FD 32 02 FB | 	rdlong	_var11, objptr
032b8     11 49 02 F6 | 	mov	_var22, _var03
032bc     68 FA 05 F1 | 	add	objptr, #104
032c0     FD 44 02 FB | 	rdlong	_var20, objptr
032c4     22 49 82 F1 | 	sub	_var22, _var20
032c8     10 49 42 F0 | 	shr	_var22, _var02
032cc     28 FA 05 F1 | 	add	objptr, #40
032d0     FD 38 02 FB | 	rdlong	_var14, objptr
032d4     24 39 02 FD | 	qmul	_var14, _var22
032d8     18 5A 62 FD | 	getqx	_var31
032dc     02 5A 66 F0 | 	shl	_var31, #2
032e0     2D 33 02 F1 | 	add	_var11, _var31
032e4     2F 5D 02 F6 | 	mov	_var32, arg01
032e8     03 5C 06 F5 | 	and	_var32, #3
032ec     2E 33 02 F1 | 	add	_var11, _var32
032f0                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
032f0     0C 32 66 F0 | 	shl	_var11, #12
032f4     02 32 06 F1 | 	add	_var11, #2
032f8     2F 49 02 F6 | 	mov	_var22, arg01
032fc     30 48 06 F5 | 	and	_var22, #48
03300     02 48 46 F0 | 	shr	_var22, #2
03304     24 33 02 F1 | 	add	_var11, _var22
03308     74 FA 85 F1 | 	sub	objptr, #116
0330c     FD 44 02 FB | 	rdlong	_var20, objptr
03310     1C FA 85 F1 | 	sub	objptr, #28
03314     11 4D 02 F6 | 	mov	_var24, _var03
03318     02 4C 66 F0 | 	shl	_var24, #2
0331c     26 45 02 F1 | 	add	_var20, _var24
03320     22 33 62 FC | 	wrlong	_var11, _var20
03324     2C 23 02 F1 | 	add	_var03, _var30
03328     2B 23 0A F2 | 	cmp	_var03, _var29 wz
0332c     84 FF 9F 5D |  if_ne	jmp	#LR__0101
03330                 | LR__0102
03330                 | LR__0103
03330                 | _hng030rm_spin2_makedl_ret
03330     2D 00 64 FD | 	ret
03334                 | 
03334                 | '       
03334                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
03334                 | ' 
03334                 | ' pub start(mode,base):result
03334                 | _hng030rm_spin2_start
03334     02 5A 05 F6 | 	mov	COUNT_, #2
03338     B0 00 A0 FD | 	call	#pushregs_
0333c     2F 6D 02 F6 | 	mov	local01, arg01
03340                 | ' 
03340                 | ' ' initialize pointers and variables
03340                 | ' 
03340                 | ' border_ptr:=@bordercolor
03340     2C FA 05 F1 | 	add	objptr, #44
03344     FD 6E 02 F6 | 	mov	local02, objptr
03348     24 FA 85 F1 | 	sub	objptr, #36
0334c     FD 6E 62 FC | 	wrlong	local02, objptr
03350                 | ' font_ptr:=@st_font
03350     08 00 00 FF 
03354     00 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
03358     04 FA 85 F1 | 	sub	objptr, #4
0335c     FD 06 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
03360                 | ' hdmibase:=base
03360     20 FA 05 F1 | 	add	objptr, #32
03364     FD 60 62 FC | 	wrlong	arg02, objptr
03368     24 FA 85 F1 | 	sub	objptr, #36
0336c                 | ' p1:=@putpixel1
0336c     FD 5E 02 F6 | 	mov	arg01, objptr
03370     05 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
03374     08 00 00 FF 
03378     00 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
0337c     7C 2E B0 FD | 	call	#__system___make_methodptr
03380     DC FA 05 F1 | 	add	objptr, #220
03384     FD 18 62 FC | 	wrlong	result1, objptr
03388     DC FA 85 F1 | 	sub	objptr, #220
0338c                 | ' p2:=@putpixel2
0338c     FD 5E 02 F6 | 	mov	arg01, objptr
03390     06 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
03394     64 2E B0 FD | 	call	#__system___make_methodptr
03398     E0 FA 05 F1 | 	add	objptr, #224
0339c     FD 18 62 FC | 	wrlong	result1, objptr
033a0     E0 FA 85 F1 | 	sub	objptr, #224
033a4                 | ' p4:=@putpixel4
033a4     FD 5E 02 F6 | 	mov	arg01, objptr
033a8     07 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
033ac     4C 2E B0 FD | 	call	#__system___make_methodptr
033b0     E4 FA 05 F1 | 	add	objptr, #228
033b4     FD 18 62 FC | 	wrlong	result1, objptr
033b8     E4 FA 85 F1 | 	sub	objptr, #228
033bc                 | ' p8:=@putpixel8
033bc     FD 5E 02 F6 | 	mov	arg01, objptr
033c0     08 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
033c4     34 2E B0 FD | 	call	#__system___make_methodptr
033c8     E8 FA 05 F1 | 	add	objptr, #232
033cc     FD 18 62 FC | 	wrlong	result1, objptr
033d0     E8 FA 85 F1 | 	sub	objptr, #232
033d4                 | ' 
033d4                 | ' 
033d4                 | ' ' the mode has to be set here to enable computing the buffer length
033d4                 | ' 
033d4                 | ' setmode(mode)
033d4     36 5F 02 F6 | 	mov	arg01, local01
033d8     80 F5 BF FD | 	call	#_hng030rm_spin2_setmode
033dc                 | ' 
033dc                 | ' vblank_ptr:=@vblank
033dc     40 FA 05 F1 | 	add	objptr, #64
033e0     FD 6E 02 F6 | 	mov	local02, objptr
033e4     34 FA 85 F1 | 	sub	objptr, #52
033e8     FD 6E 62 FC | 	wrlong	local02, objptr
033ec                 | ' cursor_ptr:=@cursor_x
033ec     28 FA 05 F1 | 	add	objptr, #40
033f0     FD 6E 02 F6 | 	mov	local02, objptr
033f4     24 FA 85 F1 | 	sub	objptr, #36
033f8     FD 6E 62 FC | 	wrlong	local02, objptr
033fc                 | ' 
033fc                 | ' fontnum_ptr:=@fontnum
033fc     88 FA 05 F1 | 	add	objptr, #136
03400     FD 6E 02 F6 | 	mov	local02, objptr
03404     78 FA 85 F1 | 	sub	objptr, #120
03408     FD 6E 62 FC | 	wrlong	local02, objptr
0340c                 | ' 
0340c                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
0340c     78 FA 05 F1 | 	add	objptr, #120
03410     FD 00 68 FC | 	wrlong	#0, objptr
03414                 | ' bytemove(@colors,@vgacolors,16)
03414     1C FA 05 F1 | 	add	objptr, #28
03418     FD 5E 02 F6 | 	mov	arg01, objptr
0341c     B4 FA 85 F1 | 	sub	objptr, #180
03420     0F 00 00 FF 
03424     58 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
03428     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
0342c     0F 00 00 FF 
03430     58 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
03434     10 62 06 F6 | 	mov	arg03, #16
03438     90 2C B0 FD | 	call	#__system____builtin_memmove
0343c                 | ' 
0343c                 | ' ' initialize a cursor
0343c                 | ' 
0343c                 | ' cursor_x:=0
0343c     34 FA 05 F1 | 	add	objptr, #52
03440     FD 00 48 FC | 	wrbyte	#0, objptr
03444                 | ' cursor_y:=0
03444     01 FA 05 F1 | 	add	objptr, #1
03448     FD 00 48 FC | 	wrbyte	#0, objptr
0344c                 | ' cursor_sh:=14
0344c     01 FA 05 F1 | 	add	objptr, #1
03450     FD 1C 48 FC | 	wrbyte	#14, objptr
03454     36 FA 85 F1 | 	sub	objptr, #54
03458                 | ' 
03458                 | ' 
03458                 | ' ' start the cog
03458                 | ' 
03458                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
03458     0F 00 00 FF 
0345c     68 06 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
03460     03 61 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
03464     0F 00 00 FF 
03468     68 06 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
0346c     FD 62 02 F6 | 	mov	arg03, objptr
03470     10 5E 06 F6 | 	mov	arg01, #16
03474     28 62 62 FD | 	setq	arg03
03478     30 5F F2 FC | 	coginit	arg01, arg02 wc
0347c     01 5E 66 C6 |  if_b	neg	arg01, #1
03480     2F 19 02 F6 | 	mov	result1, arg01
03484     28 FA 05 F1 | 	add	objptr, #40
03488     FD 18 62 FC | 	wrlong	result1, objptr
0348c     28 FA 85 F1 | 	sub	objptr, #40
03490                 | ' waitms(20)
03490     14 5E 06 F6 | 	mov	arg01, #20
03494     70 2F B0 FD | 	call	#__system___waitms
03498                 | ' 
03498                 | ' ' clear the screen and set the colors to green on black
03498                 | ' 
03498                 | ' cls(c_green,c_black)
03498     C7 5E 06 F6 | 	mov	arg01, #199
0349c     00 60 06 F6 | 	mov	arg02, #0
034a0     34 ED BF FD | 	call	#_hng030rm_spin2_cls
034a4                 | ' setbordercolor(0,0,128)
034a4     00 5E 06 F6 | 	mov	arg01, #0
034a8     00 60 06 F6 | 	mov	arg02, #0
034ac     80 62 06 F6 | 	mov	arg03, #128
034b0     00 ED BF FD | 	call	#_hng030rm_spin2_setbordercolor
034b4                 | ' setwritecolors(c_green,c_black)
034b4                 | ' 
034b4                 | ' 
034b4                 | ' write_color:=ff
034b4     38 FA 05 F1 | 	add	objptr, #56
034b8     FD 8E 69 FC | 	wrlong	#199, objptr
034bc                 | ' write_background:=bb
034bc     04 FA 05 F1 | 	add	objptr, #4
034c0     FD 00 68 FC | 	wrlong	#0, objptr
034c4                 | ' 
034c4                 | ' return cog
034c4     14 FA 85 F1 | 	sub	objptr, #20
034c8     FD 18 02 FB | 	rdlong	result1, objptr
034cc     28 FA 85 F1 | 	sub	objptr, #40
034d0     AF F0 03 F6 | 	mov	ptra, fp
034d4     BA 00 A0 FD | 	call	#popregs_
034d8                 | _hng030rm_spin2_start_ret
034d8     2D 00 64 FD | 	ret
034dc                 | 
034dc                 | ' 'this is the object and not a program
034dc                 | ' 
034dc                 | ' pub start() :cog
034dc                 | _retrocog_spin2_start
034dc     02 5A 05 F6 | 	mov	COUNT_, #2
034e0     B0 00 A0 FD | 	call	#pushregs_
034e4                 | ' 
034e4                 | ' cog:=cogspin(16,serialcog(),@serialstack)
034e4     FD 6C 02 F6 | 	mov	local01, objptr
034e8     01 00 00 FF 
034ec     40 FB 05 F1 | 	add	objptr, ##832
034f0     FD 6E 02 F6 | 	mov	local02, objptr
034f4     37 6D 62 FC | 	wrlong	local01, local02
034f8     04 6E 06 F1 | 	add	local02, #4
034fc     37 13 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
03500     FD 62 02 F6 | 	mov	arg03, objptr
03504     01 00 00 FF 
03508     40 FB 85 F1 | 	sub	objptr, ##832
0350c     10 5E 06 F6 | 	mov	arg01, #16
03510     28 62 62 FD | 	setq	arg03
03514     FA 5E F2 FC | 	coginit	arg01, entryptr__ wc
03518     01 5E 66 C6 |  if_b	neg	arg01, #1
0351c     2F 19 02 F6 | 	mov	result1, arg01
03520                 | ' return cog
03520     AF F0 03 F6 | 	mov	ptra, fp
03524     BA 00 A0 FD | 	call	#popregs_
03528                 | _retrocog_spin2_start_ret
03528     2D 00 64 FD | 	ret
0352c                 | 
0352c                 | ' 
0352c                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
0352c                 | _retrocog_spin2_serialcog
0352c     0C 5A 05 F6 | 	mov	COUNT_, #12
03530     B0 00 A0 FD | 	call	#pushregs_
03534                 | ' 
03534                 | ' 'start serial and midi
03534                 | ' 
03534                 | ' serial_start(rxpin, txpin, baudrate)
03534     20 5E 06 F6 | 	mov	arg01, #32
03538     21 60 06 F6 | 	mov	arg02, #33
0353c     A6 0E 00 FF 
03540     00 62 06 F6 | 	mov	arg03, ##1920000
03544     C0 05 B0 FD | 	call	#_retrocog_spin2_serial_start
03548                 | ' serial_start(midiin,midiout,mbaudrate)
03548     1D 5E 06 F6 | 	mov	arg01, #29
0354c     1E 60 06 F6 | 	mov	arg02, #30
03550     3D 00 00 FF 
03554     12 62 06 F6 | 	mov	arg03, ##31250
03558     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0355c                 | ' serial_start(srxpin,stxpin,sbaudrate)
0355c     3E 6C 06 F6 | 	mov	local01, #62
03560     42 0F 00 FF 
03564     80 6E 06 F6 | 	mov	local02, ##2000000
03568     3F 5E 06 F6 | 	mov	arg01, #63
0356c     3E 60 06 F6 | 	mov	arg02, #62
03570     42 0F 00 FF 
03574     80 62 06 F6 | 	mov	arg03, ##2000000
03578     8C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0357c                 | ' 
0357c                 | ' mb:=(-1)
0357c     01 70 66 F6 | 	neg	local03, #1
03580                 | ' b:=(-1)
03580     01 72 66 F6 | 	neg	local04, #1
03584                 | ' 
03584                 | ' mousefront:=0
03584     00 74 06 F6 | 	mov	local05, #0
03588     08 FA 05 F1 | 	add	objptr, #8
0358c     FD 00 68 FC | 	wrlong	#0, objptr
03590                 | ' mousetail:=0
03590     04 FA 05 F1 | 	add	objptr, #4
03594     FD 00 68 FC | 	wrlong	#0, objptr
03598     0C FA 85 F1 | 	sub	objptr, #12
0359c                 | ' kbdfront:=0
0359c     FD 00 68 FC | 	wrlong	#0, objptr
035a0                 | ' kbdtail:=0
035a0     04 FA 05 F1 | 	add	objptr, #4
035a4     FD 00 68 FC | 	wrlong	#0, objptr
035a8                 | ' midifront:=0
035a8     0C FA 05 F1 | 	add	objptr, #12
035ac     FD 00 68 FC | 	wrlong	#0, objptr
035b0                 | ' miditail:=0
035b0     04 FA 05 F1 | 	add	objptr, #4
035b4     FD 00 68 FC | 	wrlong	#0, objptr
035b8                 | ' serialfront:=0
035b8     04 FA 05 F1 | 	add	objptr, #4
035bc     FD 00 68 FC | 	wrlong	#0, objptr
035c0                 | ' serialtail:=0
035c0     04 FA 05 F1 | 	add	objptr, #4
035c4     FD 00 68 FC | 	wrlong	#0, objptr
035c8                 | ' long[$30]:=0
035c8     30 00 6C FC | 	wrlong	#0, #48
035cc                 | ' long[$34]:=0
035cc     34 00 6C FC | 	wrlong	#0, #52
035d0                 | ' long[$38]:=0
035d0     38 00 6C FC | 	wrlong	#0, #56
035d4     1C FA 85 F1 | 	sub	objptr, #28
035d8                 | ' long[$3C]:=0
035d8     3C 00 6C FC | 	wrlong	#0, #60
035dc                 | ' 
035dc                 | ' repeat
035dc                 | LR__0104
035dc                 | ' 
035dc                 | ' '  repeat 
035dc                 | '   rr:=rxcheck(rxpin)
035dc     20 5E 06 F6 | 	mov	arg01, #32
035e0     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
035e4     0C 77 02 F6 | 	mov	local06, result1
035e8                 | '   mrr:=rxcheck(midiin)
035e8     1D 5E 06 F6 | 	mov	arg01, #29
035ec     94 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
035f0     0C 79 02 F6 | 	mov	local07, result1
035f4                 | '   srr:=rxcheck(srxpin)
035f4     3F 5E 06 F6 | 	mov	arg01, #63
035f8     88 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
035fc     0C 75 02 F6 | 	mov	local05, result1
03600     3A 7B 02 F6 | 	mov	local08, local05
03604                 | ' 
03604                 | ' '  until rr>=0 || mrr>=0  || srr>=0
03604                 | ' 
03604                 | '   
03604                 | ' ' midi. Must be >= $80 for a command
03604                 | ' '$80-$8F - 3 bytes note off. note, velocity
03604                 | ' '$90-$9F - 3 bytes note on, note, velocity
03604                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
03604                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
03604                 | ' '$C0-$CF - 2 bytes program change
03604                 | ' '$D0-$DF - 2 bytes mono aftertouch
03604                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
03604                 | ' '$F0-$FF - 1 byte
03604                 | '   
03604                 | '   if srr>=0
03604     00 7A 5E F2 | 	cmps	local08, #0 wcz
03608     78 00 90 CD |  if_b	jmp	#LR__0106
0360c                 | '   
0360c                 | '     if serialfront<>((serialtail-1) //32)
0360c     1C FA 05 F1 | 	add	objptr, #28
03610     FD 6C 02 FB | 	rdlong	local01, objptr
03614     36 75 02 F6 | 	mov	local05, local01
03618     01 74 86 F1 | 	sub	local05, #1
0361c     3A 6F 52 F6 | 	abs	local02, local05 wc
03620     1F 6E 06 F5 | 	and	local02, #31
03624     37 6F 62 C6 |  if_b	neg	local02, local02
03628     04 FA 85 F1 | 	sub	objptr, #4
0362c     FD 7C 02 FB | 	rdlong	local09, objptr
03630     18 FA 85 F1 | 	sub	objptr, #24
03634     3E 7F 02 F6 | 	mov	local10, local09
03638     37 7F 0A F2 | 	cmp	local10, local02 wz
0363c     44 00 90 AD |  if_e	jmp	#LR__0105
03640                 | '       serialbuf[serialfront]:=srr
03640     18 FA 05 F1 | 	add	objptr, #24
03644     FD 74 02 FB | 	rdlong	local05, objptr
03648     01 00 00 FF 
0364c     08 FB 05 F1 | 	add	objptr, ##776
03650     FD 74 02 F1 | 	add	local05, objptr
03654     3A 7B 42 FC | 	wrbyte	local08, local05
03658                 | '       serialfront+=1
03658     01 00 00 FF 
0365c     08 FB 85 F1 | 	sub	objptr, ##776
03660     FD 6E 02 FB | 	rdlong	local02, objptr
03664     01 6E 06 F1 | 	add	local02, #1
03668     FD 6E 62 FC | 	wrlong	local02, objptr
0366c                 | '       serialfront:=serialfront // 32
0366c     37 6D 02 F6 | 	mov	local01, local02
03670     36 75 52 F6 | 	abs	local05, local01 wc
03674     1F 74 06 F5 | 	and	local05, #31
03678     3A 75 62 C6 |  if_b	neg	local05, local05
0367c     FD 74 62 FC | 	wrlong	local05, objptr
03680     18 FA 85 F1 | 	sub	objptr, #24
03684                 | LR__0105
03684                 | LR__0106
03684                 | '     
03684                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
03684     80 78 5E F2 | 	cmps	local07, #128 wcz
03688     08 00 90 CD |  if_b	jmp	#LR__0107
0368c     BF 78 5E F2 | 	cmps	local07, #191 wcz
03690     10 00 90 ED |  if_be	jmp	#LR__0108
03694                 | LR__0107
03694     E0 78 5E F2 | 	cmps	local07, #224 wcz
03698     18 00 90 CD |  if_b	jmp	#LR__0109
0369c     EF 78 5E F2 | 	cmps	local07, #239 wcz
036a0     10 00 90 1D |  if_a	jmp	#LR__0109
036a4                 | LR__0108
036a4                 | '     mb:=2
036a4     02 70 06 F6 | 	mov	local03, #2
036a8                 | '     midireport:=mrr<<24
036a8     3C 75 02 F6 | 	mov	local05, local07
036ac     18 74 66 F0 | 	shl	local05, #24
036b0     3A 81 02 F6 | 	mov	local11, local05
036b4                 | LR__0109
036b4                 | ' 
036b4                 | '   if (mrr>=$C0) && (mrr<=$DF)
036b4     C0 78 5E F2 | 	cmps	local07, #192 wcz
036b8     18 00 90 CD |  if_b	jmp	#LR__0110
036bc     DF 78 5E F2 | 	cmps	local07, #223 wcz
036c0     10 00 90 1D |  if_a	jmp	#LR__0110
036c4                 | '     mb:=1
036c4     01 70 06 F6 | 	mov	local03, #1
036c8                 | '     midireport:=mrr<<24
036c8     3C 75 02 F6 | 	mov	local05, local07
036cc     18 74 66 F0 | 	shl	local05, #24
036d0     3A 81 02 F6 | 	mov	local11, local05
036d4                 | LR__0110
036d4                 | '   
036d4                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
036d4     F0 78 5E F2 | 	cmps	local07, #240 wcz
036d8                 | '     mb:=4
036d8     04 70 06 36 |  if_ae	mov	local03, #4
036dc                 | '     midireport:=mrr<<24  
036dc     3C 81 02 36 |  if_ae	mov	local11, local07
036e0     18 80 66 30 |  if_ae	shl	local11, #24
036e4                 | '   
036e4                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
036e4     80 78 5E F2 | 	cmps	local07, #128 wcz
036e8     44 00 90 3D |  if_ae	jmp	#LR__0112
036ec     00 70 5E F2 | 	cmps	local03, #0 wcz
036f0     3C 00 90 ED |  if_be	jmp	#LR__0112
036f4     00 78 5E F2 | 	cmps	local07, #0 wcz
036f8     34 00 90 CD |  if_b	jmp	#LR__0112
036fc                 | '     
036fc                 | '     mb--
036fc     38 75 02 F6 | 	mov	local05, local03
03700     38 6D 02 F6 | 	mov	local01, local03
03704     01 6C 86 F1 | 	sub	local01, #1
03708     36 71 02 F6 | 	mov	local03, local01
0370c                 | '     if mb<3
0370c     03 70 5E F2 | 	cmps	local03, #3 wcz
03710     1C 00 90 3D |  if_ae	jmp	#LR__0111
03714                 | '       midireport+=mrr<<(mb<<3)
03714     40 75 02 F6 | 	mov	local05, local11
03718     3C 6D 02 F6 | 	mov	local01, local07
0371c     38 6F 02 F6 | 	mov	local02, local03
03720     03 6E 66 F0 | 	shl	local02, #3
03724     37 6D 62 F0 | 	shl	local01, local02
03728     36 75 02 F1 | 	add	local05, local01
0372c     3A 81 02 F6 | 	mov	local11, local05
03730                 | LR__0111
03730                 | LR__0112
03730                 | '   
03730                 | '   if mb==0
03730     00 70 0E F2 | 	cmp	local03, #0 wz
03734     80 00 90 5D |  if_ne	jmp	#LR__0114
03738                 | '     
03738                 | '     if midifront<>((miditail-1) //32)
03738     14 FA 05 F1 | 	add	objptr, #20
0373c     FD 6C 02 FB | 	rdlong	local01, objptr
03740     36 75 02 F6 | 	mov	local05, local01
03744     01 74 86 F1 | 	sub	local05, #1
03748     3A 6F 52 F6 | 	abs	local02, local05 wc
0374c     1F 6E 06 F5 | 	and	local02, #31
03750     37 6F 62 C6 |  if_b	neg	local02, local02
03754     04 FA 85 F1 | 	sub	objptr, #4
03758     FD 7C 02 FB | 	rdlong	local09, objptr
0375c     10 FA 85 F1 | 	sub	objptr, #16
03760     3E 7F 02 F6 | 	mov	local10, local09
03764     37 7F 0A F2 | 	cmp	local10, local02 wz
03768     48 00 90 AD |  if_e	jmp	#LR__0113
0376c                 | '       midibuf[midifront]:=midireport
0376c     10 FA 05 F1 | 	add	objptr, #16
03770     FD 74 02 FB | 	rdlong	local05, objptr
03774     02 74 66 F0 | 	shl	local05, #2
03778     01 00 00 FF 
0377c     90 FA 05 F1 | 	add	objptr, ##656
03780     FD 74 02 F1 | 	add	local05, objptr
03784     3A 81 62 FC | 	wrlong	local11, local05
03788                 | '       midifront+=1
03788     01 00 00 FF 
0378c     90 FA 85 F1 | 	sub	objptr, ##656
03790     FD 6E 02 FB | 	rdlong	local02, objptr
03794     01 6E 06 F1 | 	add	local02, #1
03798     FD 6E 62 FC | 	wrlong	local02, objptr
0379c                 | '       midifront:=midifront // 32
0379c     37 6D 02 F6 | 	mov	local01, local02
037a0     36 75 52 F6 | 	abs	local05, local01 wc
037a4     1F 74 06 F5 | 	and	local05, #31
037a8     3A 75 62 C6 |  if_b	neg	local05, local05
037ac     FD 74 62 FC | 	wrlong	local05, objptr
037b0     10 FA 85 F1 | 	sub	objptr, #16
037b4                 | LR__0113
037b4                 | '     mb:=(-1)
037b4     01 70 66 F6 | 	neg	local03, #1
037b8                 | LR__0114
037b8                 | ' 
037b8                 | ' 'Keyboard and mouse
037b8                 | ' 
037b8                 | '   if (rr>=$80) && (rr<>$FF)
037b8     80 76 5E F2 | 	cmps	local06, #128 wcz
037bc     18 00 90 CD |  if_b	jmp	#LR__0115
037c0     FF 76 0E F2 | 	cmp	local06, #255 wz
037c4     10 00 90 AD |  if_e	jmp	#LR__0115
037c8                 | '     b:=3
037c8     03 72 06 F6 | 	mov	local04, #3
037cc                 | '     kbmreport:=rr<<24
037cc     3B 75 02 F6 | 	mov	local05, local06
037d0     18 74 66 F0 | 	shl	local05, #24
037d4     3A 83 02 F6 | 	mov	local12, local05
037d8                 | LR__0115
037d8                 | '   
037d8                 | '   if (rr<$80) && (b>0) && (rr>=0)
037d8     80 76 5E F2 | 	cmps	local06, #128 wcz
037dc     30 00 90 3D |  if_ae	jmp	#LR__0116
037e0     00 72 5E F2 | 	cmps	local04, #0 wcz
037e4     28 00 90 ED |  if_be	jmp	#LR__0116
037e8     00 76 5E F2 | 	cmps	local06, #0 wcz
037ec     20 00 90 CD |  if_b	jmp	#LR__0116
037f0                 | '     b--
037f0     01 72 86 F1 | 	sub	local04, #1
037f4                 | '     kbmreport+=rr<<(b<<3)  
037f4     41 75 02 F6 | 	mov	local05, local12
037f8     3B 6D 02 F6 | 	mov	local01, local06
037fc     39 6F 02 F6 | 	mov	local02, local04
03800     03 6E 66 F0 | 	shl	local02, #3
03804     37 6D 62 F0 | 	shl	local01, local02
03808     36 75 02 F1 | 	add	local05, local01
0380c     3A 83 02 F6 | 	mov	local12, local05
03810                 | LR__0116
03810                 | '   
03810                 | '   if (rr==$FF)
03810     FF 76 0E F2 | 	cmp	local06, #255 wz
03814                 | '     b:=0   
03814     00 72 06 A6 |  if_e	mov	local04, #0
03818                 | ' 
03818                 | '   if b==0  
03818     00 72 0E F2 | 	cmp	local04, #0 wz
0381c     0C 01 90 5D |  if_ne	jmp	#LR__0121
03820                 | '  
03820                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
03820     00 00 40 FF 
03824     00 82 1E F2 | 	cmp	local12, ##-2147483648 wcz
03828     80 00 90 CD |  if_b	jmp	#LR__0118
0382c     00 80 43 FF 
03830     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
03834     74 00 90 3D |  if_ae	jmp	#LR__0118
03838                 | '       if mousefront<>((mousetail-1) //128)
03838     0C FA 05 F1 | 	add	objptr, #12
0383c     FD 6C 02 FB | 	rdlong	local01, objptr
03840     36 75 02 F6 | 	mov	local05, local01
03844     01 74 86 F1 | 	sub	local05, #1
03848     3A 6F 52 F6 | 	abs	local02, local05 wc
0384c     7F 6E 06 F5 | 	and	local02, #127
03850     37 6F 62 C6 |  if_b	neg	local02, local02
03854     04 FA 85 F1 | 	sub	objptr, #4
03858     FD 7C 02 FB | 	rdlong	local09, objptr
0385c     08 FA 85 F1 | 	sub	objptr, #8
03860     3E 7F 02 F6 | 	mov	local10, local09
03864     37 7F 0A F2 | 	cmp	local10, local02 wz
03868     40 00 90 AD |  if_e	jmp	#LR__0117
0386c                 | '         mousebuf[mousefront]:=kbmreport
0386c     08 FA 05 F1 | 	add	objptr, #8
03870     FD 74 02 FB | 	rdlong	local05, objptr
03874     02 74 66 F0 | 	shl	local05, #2
03878     98 FA 05 F1 | 	add	objptr, #152
0387c     FD 74 02 F1 | 	add	local05, objptr
03880     3A 83 62 FC | 	wrlong	local12, local05
03884                 | '         mousefront+=1
03884     98 FA 85 F1 | 	sub	objptr, #152
03888     FD 6E 02 FB | 	rdlong	local02, objptr
0388c     01 6E 06 F1 | 	add	local02, #1
03890     FD 6E 62 FC | 	wrlong	local02, objptr
03894                 | '         mousefront:=mousefront // 128
03894     37 6D 02 F6 | 	mov	local01, local02
03898     36 75 52 F6 | 	abs	local05, local01 wc
0389c     7F 74 06 F5 | 	and	local05, #127
038a0     3A 75 62 C6 |  if_b	neg	local05, local05
038a4     FD 74 62 FC | 	wrlong	local05, objptr
038a8     08 FA 85 F1 | 	sub	objptr, #8
038ac                 | LR__0117
038ac                 | LR__0118
038ac                 | '     b:=(-1)
038ac     01 72 66 F6 | 	neg	local04, #1
038b0                 | ' 
038b0                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
038b0     00 80 43 FF 
038b4     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
038b8     6C 00 90 CD |  if_b	jmp	#LR__0120
038bc     00 00 45 FF 
038c0     00 82 1E F2 | 	cmp	local12, ##-1979711488 wcz
038c4     60 00 90 3D |  if_ae	jmp	#LR__0120
038c8                 | '       if kbdfront<>((kbdtail-1) //32)
038c8     04 FA 05 F1 | 	add	objptr, #4
038cc     FD 6C 02 FB | 	rdlong	local01, objptr
038d0     04 FA 85 F1 | 	sub	objptr, #4
038d4     36 75 02 F6 | 	mov	local05, local01
038d8     01 74 86 F1 | 	sub	local05, #1
038dc     3A 6F 52 F6 | 	abs	local02, local05 wc
038e0     1F 6E 06 F5 | 	and	local02, #31
038e4     37 6F 62 C6 |  if_b	neg	local02, local02
038e8     FD 7E 02 FB | 	rdlong	local10, objptr
038ec     37 7F 0A F2 | 	cmp	local10, local02 wz
038f0     34 00 90 AD |  if_e	jmp	#LR__0119
038f4                 | '         kbdbuf[kbdfront]:=kbmreport
038f4     FD 74 02 FB | 	rdlong	local05, objptr
038f8     02 74 66 F0 | 	shl	local05, #2
038fc     20 FA 05 F1 | 	add	objptr, #32
03900     FD 74 02 F1 | 	add	local05, objptr
03904     3A 83 62 FC | 	wrlong	local12, local05
03908                 | '         kbdfront+=1
03908     20 FA 85 F1 | 	sub	objptr, #32
0390c     FD 6C 02 FB | 	rdlong	local01, objptr
03910     01 6C 06 F1 | 	add	local01, #1
03914     FD 6C 62 FC | 	wrlong	local01, objptr
03918                 | '         kbdfront:=kbdfront // 32
03918     36 75 52 F6 | 	abs	local05, local01 wc
0391c     1F 74 06 F5 | 	and	local05, #31
03920     3A 75 62 C6 |  if_b	neg	local05, local05
03924     FD 74 62 FC | 	wrlong	local05, objptr
03928                 | LR__0119
03928                 | LR__0120
03928                 | '     b:=(-1)
03928     01 72 66 F6 | 	neg	local04, #1
0392c                 | LR__0121
0392c                 | ' 
0392c                 | ' 
0392c                 | '   if long[$30]==0
0392c     30 74 0E FB | 	rdlong	local05, #48 wz
03930     64 00 90 5D |  if_ne	jmp	#LR__0123
03934                 | '     if kbdfront<>kbdtail
03934     FD 74 02 FB | 	rdlong	local05, objptr
03938     04 FA 05 F1 | 	add	objptr, #4
0393c     FD 6E 02 FB | 	rdlong	local02, objptr
03940     04 FA 85 F1 | 	sub	objptr, #4
03944     37 6D 02 F6 | 	mov	local01, local02
03948     36 75 0A F2 | 	cmp	local05, local01 wz
0394c     48 00 90 AD |  if_e	jmp	#LR__0122
03950                 | '       long[$30]:=kbdbuf[kbdtail]
03950     04 FA 05 F1 | 	add	objptr, #4
03954     FD 74 02 FB | 	rdlong	local05, objptr
03958     02 74 66 F0 | 	shl	local05, #2
0395c     1C FA 05 F1 | 	add	objptr, #28
03960     FD 74 02 F1 | 	add	local05, objptr
03964     3A 7F 02 FB | 	rdlong	local10, local05
03968     30 7E 66 FC | 	wrlong	local10, #48
0396c                 | '       kbdtail++
0396c     1C FA 85 F1 | 	sub	objptr, #28
03970     FD 7E 02 FB | 	rdlong	local10, objptr
03974     3F 6F 02 F6 | 	mov	local02, local10
03978     01 6E 06 F1 | 	add	local02, #1
0397c     FD 6E 62 FC | 	wrlong	local02, objptr
03980                 | '       kbdtail:= kbdtail // 32
03980     37 6D 02 F6 | 	mov	local01, local02
03984     36 75 52 F6 | 	abs	local05, local01 wc
03988     1F 74 06 F5 | 	and	local05, #31
0398c     3A 75 62 C6 |  if_b	neg	local05, local05
03990     FD 74 62 FC | 	wrlong	local05, objptr
03994     04 FA 85 F1 | 	sub	objptr, #4
03998                 | LR__0122
03998                 | LR__0123
03998                 | '       
03998                 | '   if long[$34]==0
03998     34 74 0E FB | 	rdlong	local05, #52 wz
0399c     68 00 90 5D |  if_ne	jmp	#LR__0125
039a0                 | '     if mousefront<>mousetail
039a0     08 FA 05 F1 | 	add	objptr, #8
039a4     FD 6C 02 FB | 	rdlong	local01, objptr
039a8     04 FA 05 F1 | 	add	objptr, #4
039ac     FD 7E 02 FB | 	rdlong	local10, objptr
039b0     0C FA 85 F1 | 	sub	objptr, #12
039b4     3F 6F 02 F6 | 	mov	local02, local10
039b8     37 6D 0A F2 | 	cmp	local01, local02 wz
039bc     48 00 90 AD |  if_e	jmp	#LR__0124
039c0                 | '       long[$34]:=mousebuf[mousetail]
039c0     0C FA 05 F1 | 	add	objptr, #12
039c4     FD 74 02 FB | 	rdlong	local05, objptr
039c8     02 74 66 F0 | 	shl	local05, #2
039cc     94 FA 05 F1 | 	add	objptr, #148
039d0     FD 74 02 F1 | 	add	local05, objptr
039d4     3A 7F 02 FB | 	rdlong	local10, local05
039d8     34 7E 66 FC | 	wrlong	local10, #52
039dc                 | '       mousetail++
039dc     94 FA 85 F1 | 	sub	objptr, #148
039e0     FD 7E 02 FB | 	rdlong	local10, objptr
039e4     3F 6F 02 F6 | 	mov	local02, local10
039e8     01 6E 06 F1 | 	add	local02, #1
039ec     FD 6E 62 FC | 	wrlong	local02, objptr
039f0                 | '       mousetail:= mousetail // 128
039f0     37 6D 02 F6 | 	mov	local01, local02
039f4     36 75 52 F6 | 	abs	local05, local01 wc
039f8     7F 74 06 F5 | 	and	local05, #127
039fc     3A 75 62 C6 |  if_b	neg	local05, local05
03a00     FD 74 62 FC | 	wrlong	local05, objptr
03a04     0C FA 85 F1 | 	sub	objptr, #12
03a08                 | LR__0124
03a08                 | LR__0125
03a08                 | ' 
03a08                 | '       
03a08                 | '   if long[$38]==0
03a08     38 74 0E FB | 	rdlong	local05, #56 wz
03a0c     70 00 90 5D |  if_ne	jmp	#LR__0127
03a10                 | '     if midifront<>miditail
03a10     10 FA 05 F1 | 	add	objptr, #16
03a14     FD 6C 02 FB | 	rdlong	local01, objptr
03a18     04 FA 05 F1 | 	add	objptr, #4
03a1c     FD 7E 02 FB | 	rdlong	local10, objptr
03a20     14 FA 85 F1 | 	sub	objptr, #20
03a24     3F 6F 02 F6 | 	mov	local02, local10
03a28     37 6D 0A F2 | 	cmp	local01, local02 wz
03a2c     50 00 90 AD |  if_e	jmp	#LR__0126
03a30                 | '       long[$38]:=midibuf[miditail]
03a30     14 FA 05 F1 | 	add	objptr, #20
03a34     FD 74 02 FB | 	rdlong	local05, objptr
03a38     02 74 66 F0 | 	shl	local05, #2
03a3c     01 00 00 FF 
03a40     8C FA 05 F1 | 	add	objptr, ##652
03a44     FD 74 02 F1 | 	add	local05, objptr
03a48     3A 7F 02 FB | 	rdlong	local10, local05
03a4c     38 7E 66 FC | 	wrlong	local10, #56
03a50                 | '       miditail++
03a50     01 00 00 FF 
03a54     8C FA 85 F1 | 	sub	objptr, ##652
03a58     FD 7E 02 FB | 	rdlong	local10, objptr
03a5c     3F 6F 02 F6 | 	mov	local02, local10
03a60     01 6E 06 F1 | 	add	local02, #1
03a64     FD 6E 62 FC | 	wrlong	local02, objptr
03a68                 | '       miditail:= miditail // 32
03a68     37 6D 02 F6 | 	mov	local01, local02
03a6c     36 75 52 F6 | 	abs	local05, local01 wc
03a70     1F 74 06 F5 | 	and	local05, #31
03a74     3A 75 62 C6 |  if_b	neg	local05, local05
03a78     FD 74 62 FC | 	wrlong	local05, objptr
03a7c     14 FA 85 F1 | 	sub	objptr, #20
03a80                 | LR__0126
03a80                 | LR__0127
03a80                 | '       
03a80                 | '   if long[$3c]==0
03a80     3C 74 0E FB | 	rdlong	local05, #60 wz
03a84     54 FB 9F 5D |  if_ne	jmp	#LR__0104
03a88                 | '     if serialfront<>serialtail
03a88     18 FA 05 F1 | 	add	objptr, #24
03a8c     FD 6C 02 FB | 	rdlong	local01, objptr
03a90     04 FA 05 F1 | 	add	objptr, #4
03a94     FD 7E 02 FB | 	rdlong	local10, objptr
03a98     1C FA 85 F1 | 	sub	objptr, #28
03a9c     3F 6F 02 F6 | 	mov	local02, local10
03aa0     37 6D 0A F2 | 	cmp	local01, local02 wz
03aa4     34 FB 9F AD |  if_e	jmp	#LR__0104
03aa8                 | '       byte[$3c]:=255
03aa8     3C FE 4D FC | 	wrbyte	#255, #60
03aac                 | '       byte[$3D]:=serialbuf[serialtail]
03aac     1C FA 05 F1 | 	add	objptr, #28
03ab0     FD 74 02 FB | 	rdlong	local05, objptr
03ab4     01 00 00 FF 
03ab8     04 FB 05 F1 | 	add	objptr, ##772
03abc     FD 74 02 F1 | 	add	local05, objptr
03ac0     3A 7F C2 FA | 	rdbyte	local10, local05
03ac4     3D 7E 46 FC | 	wrbyte	local10, #61
03ac8                 | '       serialtail++
03ac8     01 00 00 FF 
03acc     04 FB 85 F1 | 	sub	objptr, ##772
03ad0     FD 7E 02 FB | 	rdlong	local10, objptr
03ad4     3F 6F 02 F6 | 	mov	local02, local10
03ad8     01 6E 06 F1 | 	add	local02, #1
03adc     FD 6E 62 FC | 	wrlong	local02, objptr
03ae0                 | '       serialtail:= serialtail // 32
03ae0     37 6D 02 F6 | 	mov	local01, local02
03ae4     36 75 52 F6 | 	abs	local05, local01 wc
03ae8     1F 74 06 F5 | 	and	local05, #31
03aec     3A 75 62 C6 |  if_b	neg	local05, local05
03af0     FD 74 62 FC | 	wrlong	local05, objptr
03af4     1C FA 85 F1 | 	sub	objptr, #28
03af8     E0 FA 9F FD | 	jmp	#LR__0104
03afc     AF F0 03 F6 | 	mov	ptra, fp
03b00     BA 00 A0 FD | 	call	#popregs_
03b04                 | _retrocog_spin2_serialcog_ret
03b04     2D 00 64 FD | 	ret
03b08                 | 
03b08                 | '       
03b08                 | ' 
03b08                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
03b08                 | ' 
03b08                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
03b08                 | _retrocog_spin2_serial_start
03b08     04 5A 05 F6 | 	mov	COUNT_, #4
03b0c     B0 00 A0 FD | 	call	#pushregs_
03b10     2F 6D 02 F6 | 	mov	local01, arg01
03b14     30 6F 02 F6 | 	mov	local02, arg02
03b18                 | ' 
03b18                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
03b18     14 5E 06 FB | 	rdlong	arg01, #20
03b1c     10 60 C6 F9 | 	decod	arg02, #16
03b20     30 5F 02 FD | 	qmul	arg01, arg02
03b24     19 70 62 FD | 	getqy	local03
03b28     18 72 62 FD | 	getqx	local04
03b2c     28 70 62 FD | 	setq	local03
03b30     31 73 12 FD | 	qdiv	local04, arg03
03b34     18 18 62 FD | 	getqx	result1
03b38     0C 63 02 F6 | 	mov	arg03, result1
03b3c     FE FF 7F FF 
03b40     00 62 06 F5 | 	and	arg03, ##-1024
03b44                 | ' bitmode |= 7                                                  ' set bits (8)
03b44     07 62 46 F5 | 	or	arg03, #7
03b48                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
03b48     40 6C 62 FD | 	dirl	local01
03b4c     08 00 80 FF 
03b50     36 7D 08 FC | 	wrpin	##4158, local01
03b54     36 63 12 FC | 	wxpin	arg03, local01
03b58     36 01 28 FC | 	wypin	#0, local01
03b5c     41 6C 62 FD | 	dirh	local01
03b60                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
03b60     40 6E 62 FD | 	dirl	local02
03b64     37 F9 08 FC | 	wrpin	#124, local02
03b68     37 63 12 FC | 	wxpin	arg03, local02
03b6c     37 01 28 FC | 	wypin	#0, local02
03b70     41 6E 62 FD | 	dirh	local02
03b74                 | ' pinhigh(rxpin)
03b74     59 6C 62 FD | 	drvh	local01
03b78     AF F0 03 F6 | 	mov	ptra, fp
03b7c     BA 00 A0 FD | 	call	#popregs_
03b80                 | _retrocog_spin2_serial_start_ret
03b80     2D 00 64 FD | 	ret
03b84                 | 
03b84                 | ' 
03b84                 | ' pub rxcheck(pin) : rxbyte | check
03b84                 | _retrocog_spin2_rxcheck
03b84     03 5A 05 F6 | 	mov	COUNT_, #3
03b88     B0 00 A0 FD | 	call	#pushregs_
03b8c     2F 6D 02 F6 | 	mov	local01, arg01
03b90                 | ' 
03b90                 | ' '' Check for serial input
03b90                 | ' '' -- returns -1 if nothing available
03b90                 | ' 
03b90                 | '   rxbyte := -1
03b90     01 6E 66 F6 | 	neg	local02, #1
03b94                 | '   check := pinr(pin)
03b94     36 5F 02 F6 | 	mov	arg01, local01
03b98     4C 28 B0 FD | 	call	#__system___pinread
03b9c     0C 71 0A F6 | 	mov	local03, result1 wz
03ba0                 | '   if (check)
03ba0                 | '     rxbyte := rdpin(pin) >> 24
03ba0     00 6E 06 56 |  if_ne	mov	local02, #0
03ba4     36 6F 8A 5A |  if_ne	rdpin	local02, local01
03ba8     18 6E 46 50 |  if_ne	shr	local02, #24
03bac     37 19 02 F6 | 	mov	result1, local02
03bb0     AF F0 03 F6 | 	mov	ptra, fp
03bb4     BA 00 A0 FD | 	call	#popregs_
03bb8                 | _retrocog_spin2_rxcheck_ret
03bb8     2D 00 64 FD | 	ret
03bbc                 | 
03bbc                 | _trackerplayer_spin2_initModule
03bbc     0B 5A 05 F6 | 	mov	COUNT_, #11
03bc0     B0 00 A0 FD | 	call	#pushregs_
03bc4     30 F0 07 F1 | 	add	ptra, #48
03bc8     AF 5E 62 FC | 	wrlong	arg01, fp
03bcc     04 5E 05 F1 | 	add	fp, #4
03bd0     AF 60 62 FC | 	wrlong	arg02, fp
03bd4     04 5E 85 F1 | 	sub	fp, #4
03bd8                 | ' 
03bd8                 | '   ' Set some data pointers
03bd8                 | '   magicFour      := hubPtr + 1080
03bd8     AF 6C 02 FB | 	rdlong	local01, fp
03bdc     02 00 00 FF 
03be0     38 6C 06 F1 | 	add	local01, ##1080
03be4     9D FA 05 F1 | 	add	objptr, #157
03be8     FD 6C 62 FC | 	wrlong	local01, objptr
03bec                 | '   nameStr        := hubPtr
03bec     AF 6C 02 FB | 	rdlong	local01, fp
03bf0     97 FA 85 F1 | 	sub	objptr, #151
03bf4     FD 6C 62 FC | 	wrlong	local01, objptr
03bf8                 | '   samplesInfoLut := hubPtr + 20
03bf8     AF 6C 02 FB | 	rdlong	local01, fp
03bfc     14 6C 06 F1 | 	add	local01, #20
03c00     04 FA 05 F1 | 	add	objptr, #4
03c04     FD 6C 62 FC | 	wrlong	local01, objptr
03c08                 | ' 
03c08                 | '   ' Is this a 31 sample module?
03c08                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
03c08     93 FA 05 F1 | 	add	objptr, #147
03c0c     FD 6C 02 FB | 	rdlong	local01, objptr
03c10     9D FA 85 F1 | 	sub	objptr, #157
03c14     36 6F C2 FA | 	rdbyte	local02, local01
03c18     4D 6E 0E F2 | 	cmp	local02, #77 wz
03c1c     4C 01 90 5D |  if_ne	jmp	#LR__0131
03c20     9D FA 05 F1 | 	add	objptr, #157
03c24     FD 70 02 FB | 	rdlong	local03, objptr
03c28     9D FA 85 F1 | 	sub	objptr, #157
03c2c     02 70 06 F1 | 	add	local03, #2
03c30     38 73 C2 FA | 	rdbyte	local04, local03
03c34     4B 72 0E F2 | 	cmp	local04, #75 wz
03c38     30 01 90 5D |  if_ne	jmp	#LR__0131
03c3c                 | '     songLength          := byte[hubPtr + 950]
03c3c     AF 6C 02 FB | 	rdlong	local01, fp
03c40     01 00 00 FF 
03c44     B6 6D 06 F1 | 	add	local01, ##950
03c48     36 75 C2 FA | 	rdbyte	local05, local01
03c4c     9A FA 05 F1 | 	add	objptr, #154
03c50     FD 74 42 FC | 	wrbyte	local05, objptr
03c54                 | '     unknown1            := byte[hubPtr + 951]
03c54     AF 6C 02 FB | 	rdlong	local01, fp
03c58     01 00 00 FF 
03c5c     B7 6D 06 F1 | 	add	local01, ##951
03c60     36 75 C2 FA | 	rdbyte	local05, local01
03c64     02 FA 05 F1 | 	add	objptr, #2
03c68     FD 74 42 FC | 	wrbyte	local05, objptr
03c6c                 | '     songPositionsLut    :=      hubPtr + 952
03c6c     AF 6C 02 FB | 	rdlong	local01, fp
03c70     01 00 00 FF 
03c74     B8 6D 06 F1 | 	add	local01, ##952
03c78     06 FA 85 F1 | 	sub	objptr, #6
03c7c     FD 6C 62 FC | 	wrlong	local01, objptr
03c80                 | '     patternsData        :=      hubPtr + 1084
03c80     AF 6C 02 FB | 	rdlong	local01, fp
03c84     02 00 00 FF 
03c88     3C 6C 06 F1 | 	add	local01, ##1084
03c8c     04 FA 85 F1 | 	sub	objptr, #4
03c90     FD 6C 62 FC | 	wrlong	local01, objptr
03c94                 | '     numberOfInstruments := 31
03c94     14 FA 05 F1 | 	add	objptr, #20
03c98     FD 3E 48 FC | 	wrbyte	#31, objptr
03c9c                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03c9c     0B FA 85 F1 | 	sub	objptr, #11
03ca0     FD 00 48 FC | 	wrbyte	#0, objptr
03ca4     9B FA 85 F1 | 	sub	objptr, #155
03ca8                 | '     repeat i from 952 to 1079
03ca8     08 5E 05 F1 | 	add	fp, #8
03cac     01 00 80 FF 
03cb0     AF 70 6B FC | 	wrlong	##952, fp
03cb4     08 5E 85 F1 | 	sub	fp, #8
03cb8     B4 C3 9F FE | 	loc	pa,	#(@LR__0130-@LR__0128)
03cbc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03cc0                 | LR__0128
03cc0                 | '       if byte[hubPtr][i] > numberOfPatterns
03cc0     AF 76 02 FB | 	rdlong	local06, fp
03cc4     08 5E 05 F1 | 	add	fp, #8
03cc8     AF 6E 02 FB | 	rdlong	local02, fp
03ccc     08 5E 85 F1 | 	sub	fp, #8
03cd0     3B 6F 02 F1 | 	add	local02, local06
03cd4     37 73 C2 FA | 	rdbyte	local04, local02
03cd8     9B FA 05 F1 | 	add	objptr, #155
03cdc     FD 78 C2 FA | 	rdbyte	local07, objptr
03ce0     9B FA 85 F1 | 	sub	objptr, #155
03ce4     3C 73 5A F2 | 	cmps	local04, local07 wcz
03ce8     24 00 90 ED |  if_be	jmp	#LR__0129
03cec                 | '         numberOfPatterns := byte[hubPtr][i]
03cec     AF 76 02 FB | 	rdlong	local06, fp
03cf0     08 5E 05 F1 | 	add	fp, #8
03cf4     AF 6E 02 FB | 	rdlong	local02, fp
03cf8     08 5E 85 F1 | 	sub	fp, #8
03cfc     3B 6F 02 F1 | 	add	local02, local06
03d00     37 73 C2 FA | 	rdbyte	local04, local02
03d04     9B FA 05 F1 | 	add	objptr, #155
03d08     FD 72 42 FC | 	wrbyte	local04, objptr
03d0c     9B FA 85 F1 | 	sub	objptr, #155
03d10                 | LR__0129
03d10     08 5E 05 F1 | 	add	fp, #8
03d14     AF 74 02 FB | 	rdlong	local05, fp
03d18     01 74 06 F1 | 	add	local05, #1
03d1c     AF 74 62 FC | 	wrlong	local05, fp
03d20     08 5E 85 F1 | 	sub	fp, #8
03d24     02 00 00 FF 
03d28     38 74 1E F2 | 	cmp	local05, ##1080 wcz
03d2c     90 FF 9F CD |  if_b	jmp	#LR__0128
03d30                 | LR__0130
03d30                 | '     numberOfPatterns++
03d30     9B FA 05 F1 | 	add	objptr, #155
03d34     FD 74 C2 FA | 	rdbyte	local05, objptr
03d38     FD 6E C2 FA | 	rdbyte	local02, objptr
03d3c     01 6E 06 F1 | 	add	local02, #1
03d40     FD 6E 42 FC | 	wrbyte	local02, objptr
03d44                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03d44     09 FA 85 F1 | 	sub	objptr, #9
03d48     FD 6C 02 FB | 	rdlong	local01, objptr
03d4c     09 FA 05 F1 | 	add	objptr, #9
03d50     FD 6E C2 FA | 	rdbyte	local02, objptr
03d54     0A 6E 66 F0 | 	shl	local02, #10
03d58     37 6D 02 F1 | 	add	local01, local02
03d5c     8D FA 85 F1 | 	sub	objptr, #141
03d60     FD 6C 62 FC | 	wrlong	local01, objptr
03d64     0E FA 85 F1 | 	sub	objptr, #14
03d68                 | ' 
03d68                 | '   ' This must be an oldschool 15 sample soundtracker module
03d68                 | '   else
03d68     1C 01 90 FD | 	jmp	#LR__0135
03d6c                 | LR__0131
03d6c                 | '     songLength          := byte[hubPtr + 470]
03d6c     AF 6C 02 FB | 	rdlong	local01, fp
03d70     D6 6D 06 F1 | 	add	local01, #470
03d74     36 75 C2 FA | 	rdbyte	local05, local01
03d78     9A FA 05 F1 | 	add	objptr, #154
03d7c     FD 74 42 FC | 	wrbyte	local05, objptr
03d80                 | '     unknown1            := byte[hubPtr + 471]
03d80     AF 6C 02 FB | 	rdlong	local01, fp
03d84     D7 6D 06 F1 | 	add	local01, #471
03d88     36 75 C2 FA | 	rdbyte	local05, local01
03d8c     02 FA 05 F1 | 	add	objptr, #2
03d90     FD 74 42 FC | 	wrbyte	local05, objptr
03d94                 | '     songPositionsLut    :=      hubPtr + 472
03d94     AF 6C 02 FB | 	rdlong	local01, fp
03d98     D8 6D 06 F1 | 	add	local01, #472
03d9c     06 FA 85 F1 | 	sub	objptr, #6
03da0     FD 6C 62 FC | 	wrlong	local01, objptr
03da4                 | '     patternsData        :=      hubPtr + 600
03da4     AF 6C 02 FB | 	rdlong	local01, fp
03da8     01 00 00 FF 
03dac     58 6C 06 F1 | 	add	local01, ##600
03db0     04 FA 85 F1 | 	sub	objptr, #4
03db4     FD 6C 62 FC | 	wrlong	local01, objptr
03db8                 | '     numberOfInstruments := 15
03db8     14 FA 05 F1 | 	add	objptr, #20
03dbc     FD 1E 48 FC | 	wrbyte	#15, objptr
03dc0                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
03dc0     0B FA 85 F1 | 	sub	objptr, #11
03dc4     FD 00 48 FC | 	wrbyte	#0, objptr
03dc8     9B FA 85 F1 | 	sub	objptr, #155
03dcc                 | '     repeat i from 472 to 599
03dcc     08 5E 05 F1 | 	add	fp, #8
03dd0     AF B0 6B FC | 	wrlong	#472, fp
03dd4     08 5E 85 F1 | 	sub	fp, #8
03dd8     94 C2 9F FE | 	loc	pa,	#(@LR__0134-@LR__0132)
03ddc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03de0                 | LR__0132
03de0                 | '       if byte[hubPtr][i] > numberOfPatterns
03de0     AF 76 02 FB | 	rdlong	local06, fp
03de4     08 5E 05 F1 | 	add	fp, #8
03de8     AF 6E 02 FB | 	rdlong	local02, fp
03dec     08 5E 85 F1 | 	sub	fp, #8
03df0     3B 6F 02 F1 | 	add	local02, local06
03df4     37 73 C2 FA | 	rdbyte	local04, local02
03df8     9B FA 05 F1 | 	add	objptr, #155
03dfc     FD 78 C2 FA | 	rdbyte	local07, objptr
03e00     9B FA 85 F1 | 	sub	objptr, #155
03e04     3C 73 5A F2 | 	cmps	local04, local07 wcz
03e08     24 00 90 ED |  if_be	jmp	#LR__0133
03e0c                 | '         numberOfPatterns := byte[hubPtr][i]
03e0c     AF 76 02 FB | 	rdlong	local06, fp
03e10     08 5E 05 F1 | 	add	fp, #8
03e14     AF 6E 02 FB | 	rdlong	local02, fp
03e18     08 5E 85 F1 | 	sub	fp, #8
03e1c     3B 6F 02 F1 | 	add	local02, local06
03e20     37 73 C2 FA | 	rdbyte	local04, local02
03e24     9B FA 05 F1 | 	add	objptr, #155
03e28     FD 72 42 FC | 	wrbyte	local04, objptr
03e2c     9B FA 85 F1 | 	sub	objptr, #155
03e30                 | LR__0133
03e30     08 5E 05 F1 | 	add	fp, #8
03e34     AF 74 02 FB | 	rdlong	local05, fp
03e38     01 74 06 F1 | 	add	local05, #1
03e3c     AF 74 62 FC | 	wrlong	local05, fp
03e40     08 5E 85 F1 | 	sub	fp, #8
03e44     01 00 00 FF 
03e48     58 74 1E F2 | 	cmp	local05, ##600 wcz
03e4c     90 FF 9F CD |  if_b	jmp	#LR__0132
03e50                 | LR__0134
03e50                 | '     numberOfPatterns++
03e50     9B FA 05 F1 | 	add	objptr, #155
03e54     FD 74 C2 FA | 	rdbyte	local05, objptr
03e58     FD 6E C2 FA | 	rdbyte	local02, objptr
03e5c     01 6E 06 F1 | 	add	local02, #1
03e60     FD 6E 42 FC | 	wrbyte	local02, objptr
03e64                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
03e64     09 FA 85 F1 | 	sub	objptr, #9
03e68     FD 6C 02 FB | 	rdlong	local01, objptr
03e6c     09 FA 05 F1 | 	add	objptr, #9
03e70     FD 6E C2 FA | 	rdbyte	local02, objptr
03e74     0A 6E 66 F0 | 	shl	local02, #10
03e78     37 6D 02 F1 | 	add	local01, local02
03e7c     8D FA 85 F1 | 	sub	objptr, #141
03e80     FD 6C 62 FC | 	wrlong	local01, objptr
03e84     0E FA 85 F1 | 	sub	objptr, #14
03e88                 | LR__0135
03e88                 | ' 
03e88                 | '   ' Iterate through all samples and fill in the sample pointer LUT
03e88                 | '   tmpPtr := sampleDataPtr
03e88     0E FA 05 F1 | 	add	objptr, #14
03e8c     FD 6C 02 FB | 	rdlong	local01, objptr
03e90     0C 5E 05 F1 | 	add	fp, #12
03e94     AF 6C 62 FC | 	wrlong	local01, fp
03e98                 | '   repeat i from 1 to numberOfInstruments
03e98     04 5E 85 F1 | 	sub	fp, #4
03e9c     AF 02 68 FC | 	wrlong	#1, fp
03ea0     08 5E 85 F1 | 	sub	fp, #8
03ea4     98 FA 05 F1 | 	add	objptr, #152
03ea8     FD 6E C2 FA | 	rdbyte	local02, objptr
03eac     01 6E 5E F2 | 	cmps	local02, #1 wcz
03eb0     01 74 06 16 |  if_a	mov	local05, #1
03eb4     01 74 66 E6 |  if_be	neg	local05, #1
03eb8     3A 7B 02 F6 | 	mov	local08, local05
03ebc     FD 7C C2 FA | 	rdbyte	local09, objptr
03ec0     A6 FA 85 F1 | 	sub	objptr, #166
03ec4     3D 7D 02 F1 | 	add	local09, local08
03ec8                 | LR__0136
03ec8                 | '     samplesPtrLut[i-1] := tmpPtr
03ec8     08 5E 05 F1 | 	add	fp, #8
03ecc     AF 7E 02 FB | 	rdlong	local10, fp
03ed0     01 7E 86 F1 | 	sub	local10, #1
03ed4     02 7E 66 F0 | 	shl	local10, #2
03ed8     12 FA 05 F1 | 	add	objptr, #18
03edc     FD 7E 02 F1 | 	add	local10, objptr
03ee0     04 5E 05 F1 | 	add	fp, #4
03ee4     AF 80 02 FB | 	rdlong	local11, fp
03ee8     3F 81 62 FC | 	wrlong	local11, local10
03eec                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
03eec     04 5E 85 F1 | 	sub	fp, #4
03ef0     AF 5E 02 FB | 	rdlong	arg01, fp
03ef4     1C 5E 05 F1 | 	add	fp, #28
03ef8     AF 60 02 F6 | 	mov	arg02, fp
03efc     14 5E 85 F1 | 	sub	fp, #20
03f00     AF 62 02 F6 | 	mov	arg03, fp
03f04     04 5E 05 F1 | 	add	fp, #4
03f08     AF 64 02 F6 | 	mov	arg04, fp
03f0c     04 5E 05 F1 | 	add	fp, #4
03f10     AF 66 02 F6 | 	mov	arg05, fp
03f14     04 5E 05 F1 | 	add	fp, #4
03f18     AF 68 02 F6 | 	mov	arg06, fp
03f1c     04 5E 05 F1 | 	add	fp, #4
03f20     AF 6A 02 F6 | 	mov	arg07, fp
03f24     20 5E 85 F1 | 	sub	fp, #32
03f28     12 FA 85 F1 | 	sub	objptr, #18
03f2c     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
03f30                 | '     tmpPtr += samLength
03f30     0C 5E 05 F1 | 	add	fp, #12
03f34     AF 78 02 FB | 	rdlong	local07, fp
03f38     04 5E 05 F1 | 	add	fp, #4
03f3c     AF 7E 02 FB | 	rdlong	local10, fp
03f40     3F 79 02 F1 | 	add	local07, local10
03f44     04 5E 85 F1 | 	sub	fp, #4
03f48     AF 78 62 FC | 	wrlong	local07, fp
03f4c     04 5E 85 F1 | 	sub	fp, #4
03f50     AF 78 02 FB | 	rdlong	local07, fp
03f54     3D 79 02 F1 | 	add	local07, local08
03f58     AF 78 62 FC | 	wrlong	local07, fp
03f5c     08 5E 85 F1 | 	sub	fp, #8
03f60     3E 79 0A F2 | 	cmp	local07, local09 wz
03f64     60 FF 9F 5D |  if_ne	jmp	#LR__0136
03f68                 | ' 
03f68                 | '   ' Below this point, all play routine variables are resest to their default values
03f68                 | '   tickCounter                 := 0
03f68     A1 FA 05 F1 | 	add	objptr, #161
03f6c     FD 00 48 FC | 	wrbyte	#0, objptr
03f70                 | '   patternRow                  := 0
03f70     01 FA 05 F1 | 	add	objptr, #1
03f74     FD 00 48 FC | 	wrbyte	#0, objptr
03f78                 | '   songPosition                := startPattern
03f78     04 5E 05 F1 | 	add	fp, #4
03f7c     AF 6C 02 FB | 	rdlong	local01, fp
03f80     04 5E 85 F1 | 	sub	fp, #4
03f84     01 FA 05 F1 | 	add	objptr, #1
03f88     FD 6C 42 FC | 	wrbyte	local01, objptr
03f8c                 | '   currentSongSpeed            := 6
03f8c     01 FA 05 F1 | 	add	objptr, #1
03f90     FD 0C 48 FC | 	wrbyte	#6, objptr
03f94                 | '   patternDelay                := 0
03f94     01 FA 05 F1 | 	add	objptr, #1
03f98     FD 00 48 FC | 	wrbyte	#0, objptr
03f9c                 | '   ticksPerMinute              := 50 * 60
03f9c     02 FB 05 F1 | 	add	objptr, #258
03fa0     05 00 80 FF 
03fa4     FD 70 6B FC | 	wrlong	##3000, objptr
03fa8     A7 FB 85 F1 | 	sub	objptr, #423
03fac                 | '   cyclesToWait                := systemClock / 50
03fac     FD 98 02 FB | 	rdlong	muldiva_, objptr
03fb0     32 9A 06 F6 | 	mov	muldivb_, #50
03fb4     C6 00 A0 FD | 	call	#divide_
03fb8     AB FB 05 F1 | 	add	objptr, #427
03fbc     FD 9A 62 FC | 	wrlong	muldivb_, objptr
03fc0                 | '   sampleNumber_memory         := 0
03fc0     35 FA 05 F1 | 	add	objptr, #53
03fc4     FD 00 48 FC | 	wrbyte	#0, objptr
03fc8                 | '   lpFilter                    := 0
03fc8     25 FA 85 F1 | 	sub	objptr, #37
03fcc     FD 00 48 FC | 	wrbyte	#0, objptr
03fd0                 | '   cmdD_memoryX                := 0
03fd0     29 FA 05 F1 | 	add	objptr, #41
03fd4     FD 00 48 FC | 	wrbyte	#0, objptr
03fd8                 | '   cmdD_memoryY                := 0
03fd8     01 FA 05 F1 | 	add	objptr, #1
03fdc     FD 00 48 FC | 	wrbyte	#0, objptr
03fe0                 | '   cmdD_updatePosition         := false
03fe0     01 FA 05 F1 | 	add	objptr, #1
03fe4     FD 00 48 FC | 	wrbyte	#0, objptr
03fe8                 | '   cmdB_memoryZ                := 0
03fe8     01 FA 05 F1 | 	add	objptr, #1
03fec     FD 00 48 FC | 	wrbyte	#0, objptr
03ff0                 | '   cmdB_updatePosition         := false
03ff0     01 FA 05 F1 | 	add	objptr, #1
03ff4     FD 00 48 FC | 	wrbyte	#0, objptr
03ff8                 | '   cmdE6_updatePositionCommon  := false
03ff8     0D FA 05 F1 | 	add	objptr, #13
03ffc     FD 00 48 FC | 	wrbyte	#0, objptr
04000     F5 FB 85 F1 | 	sub	objptr, #501
04004                 | ' 
04004                 | '   repeat i from 0 to LAST_CHANNEL
04004     08 5E 05 F1 | 	add	fp, #8
04008     AF 00 68 FC | 	wrlong	#0, fp
0400c     08 5E 85 F1 | 	sub	fp, #8
04010                 | LR__0137
04010                 | ' 
04010                 | '     currRepeatPoint[i]        := 0
04010     08 5E 05 F1 | 	add	fp, #8
04014     AF 70 02 FB | 	rdlong	local03, fp
04018     01 70 66 F0 | 	shl	local03, #1
0401c     D7 FA 05 F1 | 	add	objptr, #215
04020     FD 70 02 F1 | 	add	local03, objptr
04024     38 01 58 FC | 	wrword	#0, local03
04028                 | '     currSampleLength[i]       := 4
04028     AF 70 02 FB | 	rdlong	local03, fp
0402c     01 70 66 F0 | 	shl	local03, #1
04030     1C FA 85 F1 | 	sub	objptr, #28
04034     FD 70 02 F1 | 	add	local03, objptr
04038     38 09 58 FC | 	wrword	#4, local03
0403c                 | '     currSamplePtr[i]          := @null
0403c     AF 6E 02 FB | 	rdlong	local02, fp
04040     02 6E 66 F0 | 	shl	local02, #2
04044     14 FA 85 F1 | 	sub	objptr, #20
04048     FD 6E 02 F1 | 	add	local02, objptr
0404c     37 15 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
04050                 | '     currSampleNr[i]           := 0
04050     AF 74 02 FB | 	rdlong	local05, fp
04054     10 FA 05 F1 | 	add	objptr, #16
04058     FD 74 02 F1 | 	add	local05, objptr
0405c     3A 01 48 FC | 	wrbyte	#0, local05
04060                 | '     currRepeatLength[i]       := 1
04060     AF 74 02 FB | 	rdlong	local05, fp
04064     02 74 66 F0 | 	shl	local05, #2
04068     0C FA 05 F1 | 	add	objptr, #12
0406c     FD 74 02 F1 | 	add	local05, objptr
04070     3A 03 68 FC | 	wrlong	#1, local05
04074                 | '     currPeriod[i]             := 400
04074     AF 74 02 FB | 	rdlong	local05, fp
04078     02 74 66 F0 | 	shl	local05, #2
0407c     1C FA 05 F1 | 	add	objptr, #28
04080     FD 74 02 F1 | 	add	local05, objptr
04084     3A 21 6B FC | 	wrlong	#400, local05
04088                 | '     lastSetPeriod[i]          := 400
04088     AF 74 02 FB | 	rdlong	local05, fp
0408c     02 74 66 F0 | 	shl	local05, #2
04090     48 FA 05 F1 | 	add	objptr, #72
04094     FD 74 02 F1 | 	add	local05, objptr
04098     3A 21 6B FC | 	wrlong	#400, local05
0409c                 | '     lastSetSamplePtr[i]       := 0
0409c     AF 74 02 FB | 	rdlong	local05, fp
040a0     02 74 66 F0 | 	shl	local05, #2
040a4     10 FA 05 F1 | 	add	objptr, #16
040a8     FD 74 02 F1 | 	add	local05, objptr
040ac     3A 01 68 FC | 	wrlong	#0, local05
040b0                 | '     lastSetSampleNr[i]        := 0
040b0     AF 74 02 FB | 	rdlong	local05, fp
040b4     02 74 66 F0 | 	shl	local05, #2
040b8     10 FA 05 F1 | 	add	objptr, #16
040bc     FD 74 02 F1 | 	add	local05, objptr
040c0     3A 01 68 FC | 	wrlong	#0, local05
040c4                 | '     lastSetSampleLength[i]    := 0
040c4     AF 74 02 FB | 	rdlong	local05, fp
040c8     02 74 66 F0 | 	shl	local05, #2
040cc     10 FA 05 F1 | 	add	objptr, #16
040d0     FD 74 02 F1 | 	add	local05, objptr
040d4     3A 01 68 FC | 	wrlong	#0, local05
040d8                 | '     lastSetRepeatLength[i]    := 0
040d8     AF 74 02 FB | 	rdlong	local05, fp
040dc     02 74 66 F0 | 	shl	local05, #2
040e0     10 FA 05 F1 | 	add	objptr, #16
040e4     FD 74 02 F1 | 	add	local05, objptr
040e8     3A 01 68 FC | 	wrlong	#0, local05
040ec                 | '     lastSetRepeatPoint[i]     := 0
040ec     AF 74 02 FB | 	rdlong	local05, fp
040f0     02 74 66 F0 | 	shl	local05, #2
040f4     10 FA 05 F1 | 	add	objptr, #16
040f8     FD 74 02 F1 | 	add	local05, objptr
040fc     3A 01 68 FC | 	wrlong	#0, local05
04100                 | '     currVolume[i]             := 0
04100     AF 74 02 FB | 	rdlong	local05, fp
04104     02 74 66 F0 | 	shl	local05, #2
04108     78 FA 85 F1 | 	sub	objptr, #120
0410c     FD 74 02 F1 | 	add	local05, objptr
04110     3A 01 68 FC | 	wrlong	#0, local05
04114                 | '     currPanning[i]            := 0
04114     AF 70 02 FB | 	rdlong	local03, fp
04118     01 70 66 F0 | 	shl	local03, #1
0411c     20 FA 05 F1 | 	add	objptr, #32
04120     FD 70 02 F1 | 	add	local03, objptr
04124     38 01 58 FC | 	wrword	#0, local03
04128                 | '     cmd3_memoryZ[i]           := 0
04128     AF 74 02 FB | 	rdlong	local05, fp
0412c     A9 FA 05 F1 | 	add	objptr, #169
04130     FD 74 02 F1 | 	add	local05, objptr
04134     3A 01 48 FC | 	wrbyte	#0, local05
04138                 | '     cmd4_memoryY[i]           := 0
04138     AF 74 02 FB | 	rdlong	local05, fp
0413c     04 FA 05 F1 | 	add	objptr, #4
04140     FD 74 02 F1 | 	add	local05, objptr
04144     3A 01 48 FC | 	wrbyte	#0, local05
04148                 | '     cmd4_memoryX[i]           := 0
04148     AF 74 02 FB | 	rdlong	local05, fp
0414c     04 FA 05 F1 | 	add	objptr, #4
04150     FD 74 02 F1 | 	add	local05, objptr
04154     3A 01 48 FC | 	wrbyte	#0, local05
04158                 | '     cmd7_memoryY[i]           := 0
04158     AF 74 02 FB | 	rdlong	local05, fp
0415c     04 FA 05 F1 | 	add	objptr, #4
04160     FD 74 02 F1 | 	add	local05, objptr
04164     3A 01 48 FC | 	wrbyte	#0, local05
04168                 | '     cmd7_memoryX[i]           := 0
04168     AF 74 02 FB | 	rdlong	local05, fp
0416c     04 FA 05 F1 | 	add	objptr, #4
04170     FD 74 02 F1 | 	add	local05, objptr
04174     3A 01 48 FC | 	wrbyte	#0, local05
04178                 | '     cmd9_memoryZ[i]           := 0
04178     AF 74 02 FB | 	rdlong	local05, fp
0417c     04 FA 05 F1 | 	add	objptr, #4
04180     FD 74 02 F1 | 	add	local05, objptr
04184     3A 01 48 FC | 	wrbyte	#0, local05
04188                 | '     cmdE6_memory[i]           := 0
04188     AF 74 02 FB | 	rdlong	local05, fp
0418c     0D FA 05 F1 | 	add	objptr, #13
04190     FD 74 02 F1 | 	add	local05, objptr
04194     3A 01 48 FC | 	wrbyte	#0, local05
04198                 | '     cmdE6_counter[i]          := 0
04198     AF 74 02 FB | 	rdlong	local05, fp
0419c     04 FA 05 F1 | 	add	objptr, #4
041a0     FD 74 02 F1 | 	add	local05, objptr
041a4     3A 01 48 FC | 	wrbyte	#0, local05
041a8                 | '     cmdE6_updatePosition[i]   := false
041a8     AF 74 02 FB | 	rdlong	local05, fp
041ac     04 FA 05 F1 | 	add	objptr, #4
041b0     FD 74 02 F1 | 	add	local05, objptr
041b4     3A 01 48 FC | 	wrbyte	#0, local05
041b8                 | '     sampleNumber_memory[i]    := 0
041b8     AF 74 02 FB | 	rdlong	local05, fp
041bc     11 FA 85 F1 | 	sub	objptr, #17
041c0     FD 74 02 F1 | 	add	local05, objptr
041c4     3A 01 48 FC | 	wrbyte	#0, local05
041c8                 | '     vibratoPos[i]             := 0
041c8     AF 74 02 FB | 	rdlong	local05, fp
041cc     59 FA 85 F1 | 	sub	objptr, #89
041d0     FD 74 02 F1 | 	add	local05, objptr
041d4     3A 01 48 FC | 	wrbyte	#0, local05
041d8                 | '     portamentoPeriodMemory[i] := 0
041d8     AF 74 02 FB | 	rdlong	local05, fp
041dc     02 74 66 F0 | 	shl	local05, #2
041e0     10 FA 05 F1 | 	add	objptr, #16
041e4     FD 74 02 F1 | 	add	local05, objptr
041e8     3A 01 68 FC | 	wrlong	#0, local05
041ec                 | '     portaGlissando[i]         := 0
041ec     AF 74 02 FB | 	rdlong	local05, fp
041f0     25 FA 05 F1 | 	add	objptr, #37
041f4     FD 74 02 F1 | 	add	local05, objptr
041f8     3A 01 48 FC | 	wrbyte	#0, local05
041fc                 | '     vibratoType[i]            := 0
041fc     AF 74 02 FB | 	rdlong	local05, fp
04200     04 FA 05 F1 | 	add	objptr, #4
04204     FD 74 02 F1 | 	add	local05, objptr
04208     3A 01 48 FC | 	wrbyte	#0, local05
0420c                 | '     tremoloType[i]            := 0
0420c     AF 74 02 FB | 	rdlong	local05, fp
04210     04 FA 05 F1 | 	add	objptr, #4
04214     FD 74 02 F1 | 	add	local05, objptr
04218     3A 01 48 FC | 	wrbyte	#0, local05
0421c                 | '     tremoloPos[i]             := 0
0421c     AF 74 02 FB | 	rdlong	local05, fp
04220     39 FA 85 F1 | 	sub	objptr, #57
04224     FD 74 02 F1 | 	add	local05, objptr
04228     3A 01 48 FC | 	wrbyte	#0, local05
0422c                 | '     deltaVolume[i]            := 0
0422c     AF 74 02 FB | 	rdlong	local05, fp
04230     02 74 66 F0 | 	shl	local05, #2
04234     7C FA 85 F1 | 	sub	objptr, #124
04238     FD 74 02 F1 | 	add	local05, objptr
0423c     3A 01 68 FC | 	wrlong	#0, local05
04240                 | '     deltaPeriod[i]            := 0
04240     AF 74 02 FB | 	rdlong	local05, fp
04244     02 74 66 F0 | 	shl	local05, #2
04248     20 FA 85 F1 | 	sub	objptr, #32
0424c     FD 74 02 F1 | 	add	local05, objptr
04250     3A 01 68 FC | 	wrlong	#0, local05
04254                 | '     resetTremolo[i]           := 0
04254     AF 74 02 FB | 	rdlong	local05, fp
04258     A0 FA 05 F1 | 	add	objptr, #160
0425c     FD 74 02 F1 | 	add	local05, objptr
04260     3A 01 48 FC | 	wrbyte	#0, local05
04264                 | '     resetVibrato[i]           := 0
04264     AF 74 02 FB | 	rdlong	local05, fp
04268     04 FA 05 F1 | 	add	objptr, #4
0426c     FD 74 02 F1 | 	add	local05, objptr
04270     3A 01 48 FC | 	wrbyte	#0, local05
04274     AF 74 02 FB | 	rdlong	local05, fp
04278     01 74 06 F1 | 	add	local05, #1
0427c     AF 74 62 FC | 	wrlong	local05, fp
04280     08 5E 85 F1 | 	sub	fp, #8
04284     04 74 5E F2 | 	cmps	local05, #4 wcz
04288     93 FB 85 F1 | 	sub	objptr, #403
0428c     80 FD 9F CD |  if_b	jmp	#LR__0137
04290     AF F0 03 F6 | 	mov	ptra, fp
04294     BA 00 A0 FD | 	call	#popregs_
04298                 | _trackerplayer_spin2_initModule_ret
04298     2D 00 64 FD | 	ret
0429c                 | 
0429c                 | ' 
0429c                 | ' 
0429c                 | ' ' This routine needs to be ticked X number of times per second
0429c                 | ' ' in order to advance the tracker play routine
0429c                 | ' '
0429c                 | ' PUB tick() | channel, sampleNumber, period, effect, i
0429c                 | _trackerplayer_spin2_tick
0429c     05 5A 05 F6 | 	mov	COUNT_, #5
042a0     B0 00 A0 FD | 	call	#pushregs_
042a4     14 F0 07 F1 | 	add	ptra, #20
042a8                 | ' 
042a8                 | '   if currentSongSpeed == 0
042a8     A4 FA 05 F1 | 	add	objptr, #164
042ac     FD 6C CA FA | 	rdbyte	local01, objptr wz
042b0     A4 FA 85 F1 | 	sub	objptr, #164
042b4                 | '     return
042b4     88 02 90 AD |  if_e	jmp	#LR__0149
042b8                 | ' 
042b8                 | '   ' Iterate over the channels and process everything
042b8                 | '   repeat channel from 0 to LAST_CHANNEL
042b8     AF 00 68 FC | 	wrlong	#0, fp
042bc                 | LR__0138
042bc                 | ' 
042bc                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
042bc     AF 5E 02 FB | 	rdlong	arg01, fp
042c0     A3 FA 05 F1 | 	add	objptr, #163
042c4     FD 60 C2 FA | 	rdbyte	arg02, objptr
042c8     01 FA 85 F1 | 	sub	objptr, #1
042cc     FD 62 C2 FA | 	rdbyte	arg03, objptr
042d0     A2 FA 85 F1 | 	sub	objptr, #162
042d4     04 5E 05 F1 | 	add	fp, #4
042d8     AF 64 02 F6 | 	mov	arg04, fp
042dc     04 5E 05 F1 | 	add	fp, #4
042e0     AF 66 02 F6 | 	mov	arg05, fp
042e4     04 5E 05 F1 | 	add	fp, #4
042e8     AF 68 02 F6 | 	mov	arg06, fp
042ec     0C 5E 85 F1 | 	sub	fp, #12
042f0     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
042f4                 | '     processChannel(channel, sampleNumber, period, effect)
042f4     AF 5E 02 FB | 	rdlong	arg01, fp
042f8     04 5E 05 F1 | 	add	fp, #4
042fc     AF 60 02 FB | 	rdlong	arg02, fp
04300     04 5E 05 F1 | 	add	fp, #4
04304     AF 62 02 FB | 	rdlong	arg03, fp
04308     04 5E 05 F1 | 	add	fp, #4
0430c     AF 64 02 FB | 	rdlong	arg04, fp
04310     0C 5E 85 F1 | 	sub	fp, #12
04314     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04318     AF 6E 02 FB | 	rdlong	local02, fp
0431c     01 6E 06 F1 | 	add	local02, #1
04320     AF 6E 62 FC | 	wrlong	local02, fp
04324     04 6E 5E F2 | 	cmps	local02, #4 wcz
04328     90 FF 9F CD |  if_b	jmp	#LR__0138
0432c                 | ' 
0432c                 | '   ' Incrementation the main counter that drives the whole play routine
0432c                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
0432c     A1 FA 05 F1 | 	add	objptr, #161
04330     FD 6C C2 FA | 	rdbyte	local01, objptr
04334     01 6C 06 F1 | 	add	local01, #1
04338     FD 6C 42 FC | 	wrbyte	local01, objptr
0433c     03 FA 05 F1 | 	add	objptr, #3
04340     FD 70 C2 FA | 	rdbyte	local03, objptr
04344     01 FA 05 F1 | 	add	objptr, #1
04348     FD 72 C2 FA | 	rdbyte	local04, objptr
0434c     39 71 02 F1 | 	add	local03, local04
04350     04 FA 85 F1 | 	sub	objptr, #4
04354     FD 74 C2 FA | 	rdbyte	local05, objptr
04358     A1 FA 85 F1 | 	sub	objptr, #161
0435c     38 75 5A F2 | 	cmps	local05, local03 wcz
04360                 | '     tickCounter := 0
04360     A1 FA 05 31 |  if_ae	add	objptr, #161
04364     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
04368     A1 FA 85 31 |  if_ae	sub	objptr, #161
0436c                 | ' 
0436c                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
0436c                 | '   if tickCounter == 0
0436c     A1 FA 05 F1 | 	add	objptr, #161
04370     FD 6C CA FA | 	rdbyte	local01, objptr wz
04374     A1 FA 85 F1 | 	sub	objptr, #161
04378     C4 01 90 5D |  if_ne	jmp	#LR__0148
0437c                 | ' 
0437c                 | '     ' Handle the "pattern repeat" command, "E6"
0437c                 | '     if cmdE6_updatePositionCommon
0437c     F5 FB 05 F1 | 	add	objptr, #501
04380     FD 6C CA FA | 	rdbyte	local01, objptr wz
04384     F5 FB 85 F1 | 	sub	objptr, #501
04388     8C 00 90 AD |  if_e	jmp	#LR__0142
0438c                 | '       repeat i from 0 to LAST_CHANNEL
0438c     10 5E 05 F1 | 	add	fp, #16
04390     AF 00 68 FC | 	wrlong	#0, fp
04394     10 5E 85 F1 | 	sub	fp, #16
04398     D8 BC 9F FE | 	loc	pa,	#(@LR__0141-@LR__0139)
0439c     93 00 A0 FD | 	call	#FCACHE_LOAD_
043a0                 | LR__0139
043a0                 | '         if cmdE6_updatePosition[i]
043a0     10 5E 05 F1 | 	add	fp, #16
043a4     AF 6E 02 FB | 	rdlong	local02, fp
043a8     10 5E 85 F1 | 	sub	fp, #16
043ac     F1 FB 05 F1 | 	add	objptr, #497
043b0     FD 6E 02 F1 | 	add	local02, objptr
043b4     37 73 CA FA | 	rdbyte	local04, local02 wz
043b8     F1 FB 85 F1 | 	sub	objptr, #497
043bc     24 00 90 AD |  if_e	jmp	#LR__0140
043c0                 | '           patternRow := cmdE6_memory[i]
043c0     10 5E 05 F1 | 	add	fp, #16
043c4     AF 6E 02 FB | 	rdlong	local02, fp
043c8     10 5E 85 F1 | 	sub	fp, #16
043cc     E9 FB 05 F1 | 	add	objptr, #489
043d0     FD 6E 02 F1 | 	add	local02, objptr
043d4     37 73 C2 FA | 	rdbyte	local04, local02
043d8     47 FB 85 F1 | 	sub	objptr, #327
043dc     FD 72 42 FC | 	wrbyte	local04, objptr
043e0     A2 FA 85 F1 | 	sub	objptr, #162
043e4                 | LR__0140
043e4                 | '         cmdE6_updatePosition[i] := false
043e4     10 5E 05 F1 | 	add	fp, #16
043e8     AF 6E 02 FB | 	rdlong	local02, fp
043ec     F1 FB 05 F1 | 	add	objptr, #497
043f0     FD 6E 02 F1 | 	add	local02, objptr
043f4     37 01 48 FC | 	wrbyte	#0, local02
043f8     AF 6E 02 FB | 	rdlong	local02, fp
043fc     01 6E 06 F1 | 	add	local02, #1
04400     AF 6E 62 FC | 	wrlong	local02, fp
04404     10 5E 85 F1 | 	sub	fp, #16
04408     04 6E 5E F2 | 	cmps	local02, #4 wcz
0440c     F1 FB 85 F1 | 	sub	objptr, #497
04410     8C FF 9F CD |  if_b	jmp	#LR__0139
04414                 | LR__0141
04414     CC 00 90 FD | 	jmp	#LR__0146
04418                 | LR__0142
04418                 | ' 
04418                 | '     ' Handle the "skip to next pattern with offset command", "D"
04418                 | '     elseif cmdD_updatePosition
04418     E6 FB 05 F1 | 	add	objptr, #486
0441c     FD 6C CA FA | 	rdbyte	local01, objptr wz
04420     E6 FB 85 F1 | 	sub	objptr, #486
04424     64 00 90 AD |  if_e	jmp	#LR__0143
04428                 | '       if ++songPosition >= songLength
04428     A3 FA 05 F1 | 	add	objptr, #163
0442c     FD 6C C2 FA | 	rdbyte	local01, objptr
04430     01 6C 06 F1 | 	add	local01, #1
04434     FD 6C 42 FC | 	wrbyte	local01, objptr
04438     FD 70 C2 FA | 	rdbyte	local03, objptr
0443c     09 FA 85 F1 | 	sub	objptr, #9
04440     FD 72 C2 FA | 	rdbyte	local04, objptr
04444     9A FA 85 F1 | 	sub	objptr, #154
04448     39 71 5A F2 | 	cmps	local03, local04 wcz
0444c                 | '         songPosition := 0
0444c     A3 FA 05 31 |  if_ae	add	objptr, #163
04450     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
04454     A3 FA 85 31 |  if_ae	sub	objptr, #163
04458                 | ' 
04458                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
04458     E4 FB 05 F1 | 	add	objptr, #484
0445c     FD 70 C2 FA | 	rdbyte	local03, objptr
04460     38 6D 02 F6 | 	mov	local01, local03
04464     02 6C 66 F0 | 	shl	local01, #2
04468     38 6D 02 F1 | 	add	local01, local03
0446c     01 6C 66 F0 | 	shl	local01, #1
04470     01 FA 05 F1 | 	add	objptr, #1
04474     FD 72 C2 FA | 	rdbyte	local04, objptr
04478     39 6D 02 F1 | 	add	local01, local04
0447c     43 FB 85 F1 | 	sub	objptr, #323
04480     FD 6C 42 FC | 	wrbyte	local01, objptr
04484     A2 FA 85 F1 | 	sub	objptr, #162
04488                 | ' 
04488                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
04488                 | '     else
04488     58 00 90 FD | 	jmp	#LR__0145
0448c                 | LR__0143
0448c                 | '       if ++patternRow >= PATTERN_LENGTH
0448c     A2 FA 05 F1 | 	add	objptr, #162
04490     FD 6C C2 FA | 	rdbyte	local01, objptr
04494     01 6C 06 F1 | 	add	local01, #1
04498     FD 6C 42 FC | 	wrbyte	local01, objptr
0449c     FD 70 C2 FA | 	rdbyte	local03, objptr
044a0     A2 FA 85 F1 | 	sub	objptr, #162
044a4     40 70 5E F2 | 	cmps	local03, #64 wcz
044a8     38 00 90 CD |  if_b	jmp	#LR__0144
044ac                 | '         patternRow := 0
044ac     A2 FA 05 F1 | 	add	objptr, #162
044b0     FD 00 48 FC | 	wrbyte	#0, objptr
044b4                 | ' 
044b4                 | '         if ++songPosition >= songLength
044b4     01 FA 05 F1 | 	add	objptr, #1
044b8     FD 6C C2 FA | 	rdbyte	local01, objptr
044bc     01 6C 06 F1 | 	add	local01, #1
044c0     FD 6C 42 FC | 	wrbyte	local01, objptr
044c4     FD 70 C2 FA | 	rdbyte	local03, objptr
044c8     09 FA 85 F1 | 	sub	objptr, #9
044cc     FD 72 C2 FA | 	rdbyte	local04, objptr
044d0     9A FA 85 F1 | 	sub	objptr, #154
044d4     39 71 5A F2 | 	cmps	local03, local04 wcz
044d8                 | '           songPosition := 0
044d8     A3 FA 05 31 |  if_ae	add	objptr, #163
044dc     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
044e0     A3 FA 85 31 |  if_ae	sub	objptr, #163
044e4                 | LR__0144
044e4                 | LR__0145
044e4                 | LR__0146
044e4                 | ' 
044e4                 | '     ' Handle "jump to song position" command, "B"
044e4                 | '     if cmdB_updatePosition
044e4     E8 FB 05 F1 | 	add	objptr, #488
044e8     FD 6C CA FA | 	rdbyte	local01, objptr wz
044ec     E8 FB 85 F1 | 	sub	objptr, #488
044f0     28 00 90 AD |  if_e	jmp	#LR__0147
044f4                 | ' 
044f4                 | '       songPosition := cmdB_memoryZ
044f4     E7 FB 05 F1 | 	add	objptr, #487
044f8     FD 6C C2 FA | 	rdbyte	local01, objptr
044fc     44 FB 85 F1 | 	sub	objptr, #324
04500     FD 6C 42 FC | 	wrbyte	local01, objptr
04504                 | ' 
04504                 | '       ifnot cmdD_updatePosition
04504     43 FB 05 F1 | 	add	objptr, #323
04508     FD 6C CA FA | 	rdbyte	local01, objptr wz
0450c     E6 FB 85 F1 | 	sub	objptr, #486
04510                 | '         patternRow := 0
04510     A2 FA 05 A1 |  if_e	add	objptr, #162
04514     FD 00 48 AC |  if_e	wrbyte	#0, objptr
04518     A2 FA 85 A1 |  if_e	sub	objptr, #162
0451c                 | LR__0147
0451c                 | ' 
0451c                 | '     ' We need to be sure that all positioning commands are reset for the next tick
0451c                 | '     cmdE6_updatePositionCommon := false
0451c     F5 FB 05 F1 | 	add	objptr, #501
04520     FD 00 48 FC | 	wrbyte	#0, objptr
04524                 | '     cmdB_updatePosition := false
04524     0D FA 85 F1 | 	sub	objptr, #13
04528     FD 00 48 FC | 	wrbyte	#0, objptr
0452c                 | '     cmdD_updatePosition := false
0452c     02 FA 85 F1 | 	sub	objptr, #2
04530     FD 00 48 FC | 	wrbyte	#0, objptr
04534                 | '     patternDelay := 0
04534     41 FB 85 F1 | 	sub	objptr, #321
04538     FD 00 48 FC | 	wrbyte	#0, objptr
0453c     A5 FA 85 F1 | 	sub	objptr, #165
04540                 | LR__0148
04540                 | LR__0149
04540     AF F0 03 F6 | 	mov	ptra, fp
04544     BA 00 A0 FD | 	call	#popregs_
04548                 | _trackerplayer_spin2_tick_ret
04548     2D 00 64 FD | 	ret
0454c                 | 
0454c                 | ' 
0454c                 | ' 
0454c                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
0454c                 | _trackerplayer_spin2_amigaPeriodToNote
0454c                 | ' 
0454c                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
0454c     00 1E 06 F6 | 	mov	_var01, #0
04550     F8 BA 9F FE | 	loc	pa,	#(@LR__0151-@LR__0150)
04554     93 00 A0 FD | 	call	#FCACHE_LOAD_
04558                 | LR__0150
04558                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
04558     06 00 00 FF 
0455c     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
04560     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
04564     30 23 02 F6 | 	mov	_var03, arg02
04568     03 22 66 F0 | 	shl	_var03, #3
0456c     30 23 02 F1 | 	add	_var03, arg02
04570     03 22 66 F0 | 	shl	_var03, #3
04574     11 21 02 F1 | 	add	_var02, _var03
04578     0F 25 02 F6 | 	mov	_var04, _var01
0457c     01 24 66 F0 | 	shl	_var04, #1
04580     10 25 02 F1 | 	add	_var04, _var02
04584     12 27 E2 FA | 	rdword	_var05, _var04
04588     2F 27 5A F2 | 	cmps	_var05, arg01 wcz
0458c                 | '       quit
0458c     06 00 00 FF 
04590     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04594     0C 00 90 ED |  if_be	jmp	#LR__0152
04598     01 1E 06 F1 | 	add	_var01, #1
0459c     24 1E 5E F2 | 	cmps	_var01, #36 wcz
045a0     B4 FF 9F CD |  if_b	jmp	#LR__0150
045a4                 | LR__0151
045a4                 | LR__0152
045a4                 | ' 
045a4                 | '   return i
045a4     0F 19 02 F6 | 	mov	result1, _var01
045a8                 | _trackerplayer_spin2_amigaPeriodToNote_ret
045a8     2D 00 64 FD | 	ret
045ac                 | 
045ac                 | ' 
045ac                 | ' 
045ac                 | ' PRI retunePeriod(period, fTune) | noteNumber
045ac                 | _trackerplayer_spin2_retunePeriod
045ac     06 5A 05 F6 | 	mov	COUNT_, #6
045b0     B0 00 A0 FD | 	call	#pushregs_
045b4     2F 6D 02 F6 | 	mov	local01, arg01
045b8     30 6F 02 F6 | 	mov	local02, arg02
045bc                 | ' 
045bc                 | '   if period > 0 and fTune < 16
045bc     00 6C 5E F2 | 	cmps	local01, #0 wcz
045c0     50 00 90 ED |  if_be	jmp	#LR__0153
045c4     10 6E 5E F2 | 	cmps	local02, #16 wcz
045c8     48 00 90 3D |  if_ae	jmp	#LR__0153
045cc                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
045cc     36 5F E2 FA | 	rdword	arg01, local01
045d0     00 60 06 F6 | 	mov	arg02, #0
045d4     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
045d8     0C 71 02 F6 | 	mov	local03, result1
045dc                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
045dc     06 00 00 FF 
045e0     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
045e4     0A 73 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
045e8     37 75 02 F6 | 	mov	local05, local02
045ec     03 74 66 F0 | 	shl	local05, #3
045f0     37 75 02 F1 | 	add	local05, local02
045f4     03 74 66 F0 | 	shl	local05, #3
045f8     3A 73 02 F1 | 	add	local04, local05
045fc     01 70 66 F0 | 	shl	local03, #1
04600     39 71 02 F1 | 	add	local03, local04
04604     38 77 E2 FA | 	rdword	local06, local03
04608     36 77 52 FC | 	wrword	local06, local01
0460c     06 00 00 FF 
04610     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
04614                 | LR__0153
04614     AF F0 03 F6 | 	mov	ptra, fp
04618     BA 00 A0 FD | 	call	#popregs_
0461c                 | _trackerplayer_spin2_retunePeriod_ret
0461c     2D 00 64 FD | 	ret
04620                 | 
04620                 | ' 
04620                 | ' 
04620                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
04620                 | _trackerplayer_spin2_getSampleInfo
04620     2F 1F 0A F6 | 	mov	_var01, arg01 wz
04624                 | ' 
04624                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
04624     08 00 90 AD |  if_e	jmp	#LR__0154
04628     1F 1E 5E F2 | 	cmps	_var01, #31 wcz
0462c     08 00 90 ED |  if_be	jmp	#LR__0155
04630                 | LR__0154
04630                 | '     long[samplePtr] := 0
04630     30 01 68 FC | 	wrlong	#0, arg02
04634                 | '     return
04634     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
04638                 | LR__0155
04638                 | ' 
04638                 | '   sampleNumber--
04638     01 1E 86 F1 | 	sub	_var01, #1
0463c                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
0463c     0A FA 05 F1 | 	add	objptr, #10
04640     FD 20 02 FB | 	rdlong	_var02, objptr
04644     0F 23 02 F6 | 	mov	_var03, _var01
04648     04 22 66 F0 | 	shl	_var03, #4
0464c     0F 23 82 F1 | 	sub	_var03, _var01
04650     01 22 66 F0 | 	shl	_var03, #1
04654     11 21 02 F1 | 	add	_var02, _var03
04658                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
04658     10 25 02 F6 | 	mov	_var04, _var02
0465c     16 24 06 F1 | 	add	_var04, #22
04660     12 27 C2 FA | 	rdbyte	_var05, _var04
04664     08 26 66 F0 | 	shl	_var05, #8
04668     10 23 02 F6 | 	mov	_var03, _var02
0466c     17 22 06 F1 | 	add	_var03, #23
04670     11 29 C2 FA | 	rdbyte	_var06, _var03
04674     14 27 42 F5 | 	or	_var05, _var06
04678     01 26 66 F0 | 	shl	_var05, #1
0467c     31 27 62 FC | 	wrlong	_var05, arg03
04680                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
04680     10 27 02 F6 | 	mov	_var05, _var02
04684     18 26 06 F1 | 	add	_var05, #24
04688     13 25 C2 FA | 	rdbyte	_var04, _var05
0468c     32 25 62 FC | 	wrlong	_var04, arg04
04690                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
04690     10 27 02 F6 | 	mov	_var05, _var02
04694     19 26 06 F1 | 	add	_var05, #25
04698     13 25 C2 FA | 	rdbyte	_var04, _var05
0469c     33 25 62 FC | 	wrlong	_var04, arg05
046a0                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
046a0     10 25 02 F6 | 	mov	_var04, _var02
046a4     1A 24 06 F1 | 	add	_var04, #26
046a8     12 27 C2 FA | 	rdbyte	_var05, _var04
046ac     08 26 66 F0 | 	shl	_var05, #8
046b0     10 23 02 F6 | 	mov	_var03, _var02
046b4     1B 22 06 F1 | 	add	_var03, #27
046b8     11 29 C2 FA | 	rdbyte	_var06, _var03
046bc     14 27 42 F5 | 	or	_var05, _var06
046c0     01 26 66 F0 | 	shl	_var05, #1
046c4     34 27 62 FC | 	wrlong	_var05, arg06
046c8                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
046c8     10 25 02 F6 | 	mov	_var04, _var02
046cc     1C 24 06 F1 | 	add	_var04, #28
046d0     12 27 C2 FA | 	rdbyte	_var05, _var04
046d4     08 26 66 F0 | 	shl	_var05, #8
046d8     1D 20 06 F1 | 	add	_var02, #29
046dc     10 29 C2 FA | 	rdbyte	_var06, _var02
046e0     14 27 42 F5 | 	or	_var05, _var06
046e4     01 26 66 F0 | 	shl	_var05, #1
046e8     35 27 62 FC | 	wrlong	_var05, arg07
046ec                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
046ec     02 1E 66 F0 | 	shl	_var01, #2
046f0     08 FA 05 F1 | 	add	objptr, #8
046f4     FD 1E 02 F1 | 	add	_var01, objptr
046f8     0F 23 02 FB | 	rdlong	_var03, _var01
046fc     30 23 62 FC | 	wrlong	_var03, arg02
04700                 | ' 
04700                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
04700     35 27 02 FB | 	rdlong	_var05, arg07
04704     02 26 0E F2 | 	cmp	_var05, #2 wz
04708     12 FA 85 F1 | 	sub	objptr, #18
0470c     08 00 90 5D |  if_ne	jmp	#LR__0156
04710     34 25 0A FB | 	rdlong	_var04, arg06 wz
04714                 | '     long[repeatLength] := 1
04714     35 03 68 AC |  if_e	wrlong	#1, arg07
04718                 | LR__0156
04718                 | _trackerplayer_spin2_getSampleInfo_ret
04718     2D 00 64 FD | 	ret
0471c                 | 
0471c                 | ' 
0471c                 | ' 
0471c                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
0471c                 | _trackerplayer_spin2_getNoteData
0471c                 | ' 
0471c                 | '   ' Get the note data for a specific channel/song position/pattern row
0471c                 | '   patternNumber := byte[songPositionsLut][position & 127]
0471c     96 FA 05 F1 | 	add	objptr, #150
04720     FD 1E 02 FB | 	rdlong	_var01, objptr
04724     7F 60 06 F5 | 	and	arg02, #127
04728     0F 61 02 F1 | 	add	arg02, _var01
0472c     30 21 C2 FA | 	rdbyte	_var02, arg02
04730                 | '   patternPtr    := patternsData + (patternNumber << 10)
04730     04 FA 85 F1 | 	sub	objptr, #4
04734     FD 22 02 FB | 	rdlong	_var03, objptr
04738     92 FA 85 F1 | 	sub	objptr, #146
0473c     0A 20 66 F0 | 	shl	_var02, #10
04740     10 23 02 F1 | 	add	_var03, _var02
04744                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
04744     3F 62 06 F5 | 	and	arg03, #63
04748     04 62 66 F0 | 	shl	arg03, #4
0474c     31 23 02 F1 | 	add	_var03, arg03
04750     03 5E 06 F5 | 	and	arg01, #3
04754     02 5E 66 F0 | 	shl	arg01, #2
04758     2F 23 02 F1 | 	add	_var03, arg01
0475c                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
0475c     11 25 C2 FA | 	rdbyte	_var04, _var03
04760     18 24 66 F0 | 	shl	_var04, #24
04764     01 22 06 F1 | 	add	_var03, #1
04768     11 27 C2 FA | 	rdbyte	_var05, _var03
0476c     10 26 66 F0 | 	shl	_var05, #16
04770     13 25 42 F5 | 	or	_var04, _var05
04774     01 22 06 F1 | 	add	_var03, #1
04778     11 29 C2 FA | 	rdbyte	_var06, _var03
0477c     08 28 66 F0 | 	shl	_var06, #8
04780     14 25 42 F5 | 	or	_var04, _var06
04784     01 22 06 F1 | 	add	_var03, #1
04788     11 2B C2 FA | 	rdbyte	_var07, _var03
0478c     15 25 42 F5 | 	or	_var04, _var07
04790                 | ' 
04790                 | '   ' Extract the different sub parts from the data
04790                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
04790     12 2D 02 F6 | 	mov	_var08, _var04
04794     0C 2C 46 F0 | 	shr	_var08, #12
04798     0F 2C 06 F5 | 	and	_var08, #15
0479c     12 27 02 F6 | 	mov	_var05, _var04
047a0     18 26 46 F0 | 	shr	_var05, #24
047a4     F0 26 06 F5 | 	and	_var05, #240
047a8     13 2D 42 F5 | 	or	_var08, _var05
047ac     32 2D 62 FC | 	wrlong	_var08, arg04
047b0                 | '   long[period]       :=  (data >> 16) & $FFF
047b0     12 2D 02 F6 | 	mov	_var08, _var04
047b4     10 2C 46 F0 | 	shr	_var08, #16
047b8     07 00 00 FF 
047bc     FF 2D 06 F5 | 	and	_var08, ##4095
047c0     33 2D 62 FC | 	wrlong	_var08, arg05
047c4                 | '   long[effect]       :=   data & $FFF
047c4     07 00 00 FF 
047c8     FF 25 06 F5 | 	and	_var04, ##4095
047cc     34 25 62 FC | 	wrlong	_var04, arg06
047d0                 | _trackerplayer_spin2_getNoteData_ret
047d0     2D 00 64 FD | 	ret
047d4                 | 
047d4                 | ' 
047d4                 | ' 
047d4                 | ' PRI triggerNote(channel)
047d4                 | _trackerplayer_spin2_triggerNote
047d4                 | ' 
047d4                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
047d4     2F 1F 02 F6 | 	mov	_var01, arg01
047d8     02 1E 66 F0 | 	shl	_var01, #2
047dc     47 FB 05 F1 | 	add	objptr, #327
047e0     FD 1E 02 F1 | 	add	_var01, objptr
047e4     2F 21 02 F6 | 	mov	_var02, arg01
047e8     90 FA 85 F1 | 	sub	objptr, #144
047ec     0F 23 02 FB | 	rdlong	_var03, _var01
047f0     FD 20 02 F1 | 	add	_var02, objptr
047f4     10 23 42 FC | 	wrbyte	_var03, _var02
047f8                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
047f8     2F 1F 02 F6 | 	mov	_var01, arg01
047fc     02 1E 66 F0 | 	shl	_var01, #2
04800     80 FA 05 F1 | 	add	objptr, #128
04804     FD 1E 02 F1 | 	add	_var01, objptr
04808     2F 21 02 F6 | 	mov	_var02, arg01
0480c     02 20 66 F0 | 	shl	_var02, #2
04810     90 FA 85 F1 | 	sub	objptr, #144
04814     0F 23 02 FB | 	rdlong	_var03, _var01
04818     FD 20 02 F1 | 	add	_var02, objptr
0481c     10 23 62 FC | 	wrlong	_var03, _var02
04820                 | '   currPeriod[channel]       := lastSetPeriod[channel]
04820     2F 1F 02 F6 | 	mov	_var01, arg01
04824     02 1E 66 F0 | 	shl	_var01, #2
04828     80 FA 05 F1 | 	add	objptr, #128
0482c     FD 1E 02 F1 | 	add	_var01, objptr
04830     2F 21 02 F6 | 	mov	_var02, arg01
04834     02 20 66 F0 | 	shl	_var02, #2
04838     48 FA 85 F1 | 	sub	objptr, #72
0483c     0F 23 02 FB | 	rdlong	_var03, _var01
04840     FD 20 02 F1 | 	add	_var02, objptr
04844     10 23 62 FC | 	wrlong	_var03, _var02
04848                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
04848     2F 1F 02 F6 | 	mov	_var01, arg01
0484c     02 1E 66 F0 | 	shl	_var01, #2
04850     78 FA 05 F1 | 	add	objptr, #120
04854     FD 1E 02 F1 | 	add	_var01, objptr
04858     2F 25 02 F6 | 	mov	_var04, arg01
0485c     01 24 66 F0 | 	shl	_var04, #1
04860     9C FA 85 F1 | 	sub	objptr, #156
04864     0F 27 02 FB | 	rdlong	_var05, _var01
04868     FD 24 02 F1 | 	add	_var04, objptr
0486c     12 27 52 FC | 	wrword	_var05, _var04
04870                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
04870     2F 1F 02 F6 | 	mov	_var01, arg01
04874     02 1E 66 F0 | 	shl	_var01, #2
04878     AC FA 05 F1 | 	add	objptr, #172
0487c     FD 1E 02 F1 | 	add	_var01, objptr
04880     2F 21 02 F6 | 	mov	_var02, arg01
04884     02 20 66 F0 | 	shl	_var02, #2
04888     A4 FA 85 F1 | 	sub	objptr, #164
0488c     0F 23 02 FB | 	rdlong	_var03, _var01
04890     FD 20 02 F1 | 	add	_var02, objptr
04894     10 23 62 FC | 	wrlong	_var03, _var02
04898                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
04898     2F 1F 02 F6 | 	mov	_var01, arg01
0489c     02 1E 66 F0 | 	shl	_var01, #2
048a0     B4 FA 05 F1 | 	add	objptr, #180
048a4     FD 1E 02 F1 | 	add	_var01, objptr
048a8     2F 25 02 F6 | 	mov	_var04, arg01
048ac     01 24 66 F0 | 	shl	_var04, #1
048b0     A0 FA 85 F1 | 	sub	objptr, #160
048b4     0F 27 02 FB | 	rdlong	_var05, _var01
048b8     FD 24 02 F1 | 	add	_var04, objptr
048bc     12 27 52 FC | 	wrword	_var05, _var04
048c0                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
048c0     2F 29 02 F6 | 	mov	_var06, arg01
048c4     1F FB 05 F1 | 	add	objptr, #287
048c8     FD 28 02 F1 | 	add	_var06, objptr
048cc     14 1F C2 FA | 	rdbyte	_var01, _var06
048d0     01 1E 06 F1 | 	add	_var01, #1
048d4     FD 5E 02 F1 | 	add	arg01, objptr
048d8     2F 1F 42 FC | 	wrbyte	_var01, arg01
048dc     F6 FB 85 F1 | 	sub	objptr, #502
048e0                 | _trackerplayer_spin2_triggerNote_ret
048e0     2D 00 64 FD | 	ret
048e4                 | 
048e4                 | ' 
048e4                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
048e4                 | _trackerplayer_spin2_processChannel
048e4     08 5A 05 F6 | 	mov	COUNT_, #8
048e8     B0 00 A0 FD | 	call	#pushregs_
048ec     24 F0 07 F1 | 	add	ptra, #36
048f0     AF 5E 62 FC | 	wrlong	arg01, fp
048f4     04 5E 05 F1 | 	add	fp, #4
048f8     AF 60 62 FC | 	wrlong	arg02, fp
048fc     04 5E 05 F1 | 	add	fp, #4
04900     AF 62 62 FC | 	wrlong	arg03, fp
04904     04 5E 05 F1 | 	add	fp, #4
04908     AF 64 62 FC | 	wrlong	arg04, fp
0490c     0C 5E 85 F1 | 	sub	fp, #12
04910                 | ' 
04910                 | '   channel := channel & 3
04910     AF 6C 02 FB | 	rdlong	local01, fp
04914     03 6C 06 F5 | 	and	local01, #3
04918     AF 6C 62 FC | 	wrlong	local01, fp
0491c                 | '   cmd     := (effect >> 8) & $F
0491c     0C 5E 05 F1 | 	add	fp, #12
04920     AF 6C 02 FB | 	rdlong	local01, fp
04924     08 6C 46 F0 | 	shr	local01, #8
04928     0F 6C 06 F5 | 	and	local01, #15
0492c     BA FB 05 F1 | 	add	objptr, #442
04930     FD 6C 42 FC | 	wrbyte	local01, objptr
04934                 | '   x       := (effect >> 4) & $F
04934     AF 6C 02 FB | 	rdlong	local01, fp
04938     04 6C 46 F0 | 	shr	local01, #4
0493c     0F 6C 06 F5 | 	and	local01, #15
04940     03 FA 85 F1 | 	sub	objptr, #3
04944     FD 6C 42 FC | 	wrbyte	local01, objptr
04948                 | '   y       := (effect     ) & $F
04948     AF 6C 02 FB | 	rdlong	local01, fp
0494c     0F 6C 06 F5 | 	and	local01, #15
04950     01 FA 05 F1 | 	add	objptr, #1
04954     FD 6C 42 FC | 	wrbyte	local01, objptr
04958                 | '   z       := (effect     ) & $FF
04958     AF 6C 02 FB | 	rdlong	local01, fp
0495c     0C 5E 85 F1 | 	sub	fp, #12
04960     FF 6C 06 F5 | 	and	local01, #255
04964     01 FA 05 F1 | 	add	objptr, #1
04968     FD 6C 42 FC | 	wrbyte	local01, objptr
0496c                 | ' 
0496c                 | '   ' Handle everything that executes on "tick zero"
0496c                 | '   if tickCounter == 0
0496c     18 FB 85 F1 | 	sub	objptr, #280
04970     FD 6C CA FA | 	rdbyte	local01, objptr wz
04974     A1 FA 85 F1 | 	sub	objptr, #161
04978     DC 03 90 5D |  if_ne	jmp	#LR__0167
0497c                 | ' 
0497c                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
0497c                 | '     deltaPeriod[channel] := 0
0497c     AF 6C 02 FB | 	rdlong	local01, fp
04980     02 6C 66 F0 | 	shl	local01, #2
04984     EF FA 05 F1 | 	add	objptr, #239
04988     FD 6C 02 F1 | 	add	local01, objptr
0498c     36 01 68 FC | 	wrlong	#0, local01
04990                 | '     deltaVolume[channel] := 0
04990     AF 6C 02 FB | 	rdlong	local01, fp
04994     02 6C 66 F0 | 	shl	local01, #2
04998     20 FA 05 F1 | 	add	objptr, #32
0499c     FD 6C 02 F1 | 	add	local01, objptr
049a0     36 01 68 FC | 	wrlong	#0, local01
049a4                 | ' 
049a4                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
049a4                 | '     if sampleNumber > 0
049a4     04 5E 05 F1 | 	add	fp, #4
049a8     AF 6C 02 FB | 	rdlong	local01, fp
049ac     04 5E 85 F1 | 	sub	fp, #4
049b0     00 6C 5E F2 | 	cmps	local01, #0 wcz
049b4     0F FB 85 F1 | 	sub	objptr, #271
049b8     20 00 90 ED |  if_be	jmp	#LR__0157
049bc                 | '       sampleNumber_memory[channel] := sampleNumber
049bc     AF 6C 02 FB | 	rdlong	local01, fp
049c0     E0 FB 05 F1 | 	add	objptr, #480
049c4     FD 6C 02 F1 | 	add	local01, objptr
049c8     04 5E 05 F1 | 	add	fp, #4
049cc     AF 6E 02 FB | 	rdlong	local02, fp
049d0     04 5E 85 F1 | 	sub	fp, #4
049d4     36 6F 42 FC | 	wrbyte	local02, local01
049d8     E0 FB 85 F1 | 	sub	objptr, #480
049dc                 | LR__0157
049dc                 | ' 
049dc                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
049dc                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
049dc     AF 70 02 FB | 	rdlong	local03, fp
049e0     E0 FB 05 F1 | 	add	objptr, #480
049e4     FD 70 02 F1 | 	add	local03, objptr
049e8     38 5F C2 FA | 	rdbyte	arg01, local03
049ec     20 5E 05 F1 | 	add	fp, #32
049f0     AF 60 02 F6 | 	mov	arg02, fp
049f4     10 5E 85 F1 | 	sub	fp, #16
049f8     AF 62 02 F6 | 	mov	arg03, fp
049fc     31 FA 85 F1 | 	sub	objptr, #49
04a00     FD 64 02 F6 | 	mov	arg04, objptr
04a04     AF FB 85 F1 | 	sub	objptr, #431
04a08     04 5E 05 F1 | 	add	fp, #4
04a0c     AF 66 02 F6 | 	mov	arg05, fp
04a10     04 5E 05 F1 | 	add	fp, #4
04a14     AF 68 02 F6 | 	mov	arg06, fp
04a18     04 5E 05 F1 | 	add	fp, #4
04a1c     AF 72 02 F6 | 	mov	local04, fp
04a20     39 75 02 F6 | 	mov	local05, local04
04a24     3A 6B 02 F6 | 	mov	arg07, local05
04a28     1C 5E 85 F1 | 	sub	fp, #28
04a2c     F0 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
04a30                 | ' 
04a30                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
04a30                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
04a30                 | '     if sampleNumber > 0
04a30     04 5E 05 F1 | 	add	fp, #4
04a34     AF 6C 02 FB | 	rdlong	local01, fp
04a38     04 5E 85 F1 | 	sub	fp, #4
04a3c     00 6C 5E F2 | 	cmps	local01, #0 wcz
04a40     24 00 90 ED |  if_be	jmp	#LR__0158
04a44                 | '       currVolume[channel] := volume
04a44     AF 6C 02 FB | 	rdlong	local01, fp
04a48     02 6C 66 F0 | 	shl	local01, #2
04a4c     FF FA 05 F1 | 	add	objptr, #255
04a50     FD 6C 02 F1 | 	add	local01, objptr
04a54     14 5E 05 F1 | 	add	fp, #20
04a58     AF 6E 02 FB | 	rdlong	local02, fp
04a5c     14 5E 85 F1 | 	sub	fp, #20
04a60     36 6F 62 FC | 	wrlong	local02, local01
04a64     FF FA 85 F1 | 	sub	objptr, #255
04a68                 | LR__0158
04a68                 | ' 
04a68                 | '     ' Handle all commands that executes on "zero tick"
04a68                 | '     sampleOffset := 0
04a68     B3 FB 05 F1 | 	add	objptr, #435
04a6c     FD 00 68 FC | 	wrlong	#0, objptr
04a70     B3 FB 85 F1 | 	sub	objptr, #435
04a74                 | '     handleZeroTickCommands(channel)
04a74     AF 5E 02 FB | 	rdlong	arg01, fp
04a78     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
04a7c                 | ' 
04a7c                 | '     ' Prepare sample data for triggering (now or later)
04a7c                 | '     if period > 0
04a7c     08 5E 05 F1 | 	add	fp, #8
04a80     AF 6C 02 FB | 	rdlong	local01, fp
04a84     08 5E 85 F1 | 	sub	fp, #8
04a88     00 6C 5E F2 | 	cmps	local01, #0 wcz
04a8c     D0 02 90 ED |  if_be	jmp	#LR__0168
04a90                 | ' 
04a90                 | '       retunePeriod(@period, fineTune)
04a90     08 5E 05 F1 | 	add	fp, #8
04a94     AF 5E 02 F6 | 	mov	arg01, fp
04a98     08 5E 85 F1 | 	sub	fp, #8
04a9c     AF FB 05 F1 | 	add	objptr, #431
04aa0     FD 60 02 FB | 	rdlong	arg02, objptr
04aa4     AF FB 85 F1 | 	sub	objptr, #431
04aa8     00 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
04aac                 | '       currFineTune[channel]        := fineTune
04aac     AF 6C 02 FB | 	rdlong	local01, fp
04ab0     D3 FA 05 F1 | 	add	objptr, #211
04ab4     FD 6C 02 F1 | 	add	local01, objptr
04ab8     DC FA 05 F1 | 	add	objptr, #220
04abc     FD 6E 02 FB | 	rdlong	local02, objptr
04ac0     36 6F 42 FC | 	wrbyte	local02, local01
04ac4                 | '       lastSetPeriod[channel]       := period
04ac4     AF 6C 02 FB | 	rdlong	local01, fp
04ac8     02 6C 66 F0 | 	shl	local01, #2
04acc     88 FA 85 F1 | 	sub	objptr, #136
04ad0     FD 6C 02 F1 | 	add	local01, objptr
04ad4     08 5E 05 F1 | 	add	fp, #8
04ad8     AF 6E 02 FB | 	rdlong	local02, fp
04adc     36 6F 62 FC | 	wrlong	local02, local01
04ae0     08 5E 85 F1 | 	sub	fp, #8
04ae4                 | '       lastSetRepeatLength[channel] := repeatLength
04ae4     AF 6C 02 FB | 	rdlong	local01, fp
04ae8     02 6C 66 F0 | 	shl	local01, #2
04aec     40 FA 05 F1 | 	add	objptr, #64
04af0     FD 6C 02 F1 | 	add	local01, objptr
04af4     1C 5E 05 F1 | 	add	fp, #28
04af8     AF 6E 02 FB | 	rdlong	local02, fp
04afc     36 6F 62 FC | 	wrlong	local02, local01
04b00     1C 5E 85 F1 | 	sub	fp, #28
04b04                 | '       lastSetRepeatPoint[channel]  := repeatPoint
04b04     AF 6C 02 FB | 	rdlong	local01, fp
04b08     02 6C 66 F0 | 	shl	local01, #2
04b0c     10 FA 05 F1 | 	add	objptr, #16
04b10     FD 6C 02 F1 | 	add	local01, objptr
04b14     18 5E 05 F1 | 	add	fp, #24
04b18     AF 6E 02 FB | 	rdlong	local02, fp
04b1c     36 6F 62 FC | 	wrlong	local02, local01
04b20                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
04b20     08 5E 05 F1 | 	add	fp, #8
04b24     AF 6C 02 FB | 	rdlong	local01, fp
04b28     20 5E 85 F1 | 	sub	fp, #32
04b2c     3C FA 05 F1 | 	add	objptr, #60
04b30     FD 6E 02 FB | 	rdlong	local02, objptr
04b34     37 6D 02 F1 | 	add	local01, local02
04b38     AF 76 02 FB | 	rdlong	local06, fp
04b3c     02 76 66 F0 | 	shl	local06, #2
04b40     7C FA 85 F1 | 	sub	objptr, #124
04b44     FD 78 02 F6 | 	mov	local07, objptr
04b48     FD 76 02 F1 | 	add	local06, objptr
04b4c     3B 6D 62 FC | 	wrlong	local01, local06
04b50                 | '       lastSetSampleNr[channel]     := sampleNumber
04b50     AF 6C 02 FB | 	rdlong	local01, fp
04b54     02 6C 66 F0 | 	shl	local01, #2
04b58     10 FA 05 F1 | 	add	objptr, #16
04b5c     FD 6C 02 F1 | 	add	local01, objptr
04b60     04 5E 05 F1 | 	add	fp, #4
04b64     AF 6E 02 FB | 	rdlong	local02, fp
04b68     36 6F 62 FC | 	wrlong	local02, local01
04b6c                 | ' 
04b6c                 | '       ' This calculates the correct sample length in all situations
04b6c                 | '       if repeatLength > 2
04b6c     18 5E 05 F1 | 	add	fp, #24
04b70     AF 6C 02 FB | 	rdlong	local01, fp
04b74     1C 5E 85 F1 | 	sub	fp, #28
04b78     02 6C 5E F2 | 	cmps	local01, #2 wcz
04b7c     47 FB 85 F1 | 	sub	objptr, #327
04b80     20 00 90 ED |  if_be	jmp	#LR__0159
04b84                 | '         sampleLength := repeatPoint + repeatLength
04b84     18 5E 05 F1 | 	add	fp, #24
04b88     AF 6C 02 FB | 	rdlong	local01, fp
04b8c     04 5E 05 F1 | 	add	fp, #4
04b90     AF 6E 02 FB | 	rdlong	local02, fp
04b94     37 6D 02 F1 | 	add	local01, local02
04b98     0C 5E 85 F1 | 	sub	fp, #12
04b9c     AF 6C 62 FC | 	wrlong	local01, fp
04ba0     10 5E 85 F1 | 	sub	fp, #16
04ba4                 | LR__0159
04ba4                 | ' 
04ba4                 | '       if sampleLength - sampleOffset < 1
04ba4     10 5E 05 F1 | 	add	fp, #16
04ba8     AF 6C 02 FB | 	rdlong	local01, fp
04bac     10 5E 85 F1 | 	sub	fp, #16
04bb0     B3 FB 05 F1 | 	add	objptr, #435
04bb4     FD 6E 02 FB | 	rdlong	local02, objptr
04bb8     B3 FB 85 F1 | 	sub	objptr, #435
04bbc     37 6D 82 F1 | 	sub	local01, local02
04bc0     01 6C 5E F2 | 	cmps	local01, #1 wcz
04bc4     1C 00 90 3D |  if_ae	jmp	#LR__0160
04bc8                 | '         lastSetSampleLength[channel] := 1
04bc8     AF 6C 02 FB | 	rdlong	local01, fp
04bcc     02 6C 66 F0 | 	shl	local01, #2
04bd0     57 FB 05 F1 | 	add	objptr, #343
04bd4     FD 6C 02 F1 | 	add	local01, objptr
04bd8     36 03 68 FC | 	wrlong	#1, local01
04bdc                 | '       else
04bdc     57 FB 85 F1 | 	sub	objptr, #343
04be0     34 00 90 FD | 	jmp	#LR__0161
04be4                 | LR__0160
04be4                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
04be4     10 5E 05 F1 | 	add	fp, #16
04be8     AF 6C 02 FB | 	rdlong	local01, fp
04bec     10 5E 85 F1 | 	sub	fp, #16
04bf0     B3 FB 05 F1 | 	add	objptr, #435
04bf4     FD 6E 02 FB | 	rdlong	local02, objptr
04bf8     37 6D 82 F1 | 	sub	local01, local02
04bfc     AF 76 02 FB | 	rdlong	local06, fp
04c00     02 76 66 F0 | 	shl	local06, #2
04c04     5C FA 85 F1 | 	sub	objptr, #92
04c08     FD 78 02 F6 | 	mov	local07, objptr
04c0c     FD 76 02 F1 | 	add	local06, objptr
04c10     3B 6D 62 FC | 	wrlong	local01, local06
04c14     57 FB 85 F1 | 	sub	objptr, #343
04c18                 | LR__0161
04c18                 | ' 
04c18                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
04c18                 | '       if sampleOffset > sampleLength
04c18     B3 FB 05 F1 | 	add	objptr, #435
04c1c     FD 6C 02 FB | 	rdlong	local01, objptr
04c20     B3 FB 85 F1 | 	sub	objptr, #435
04c24     10 5E 05 F1 | 	add	fp, #16
04c28     AF 6E 02 FB | 	rdlong	local02, fp
04c2c     10 5E 85 F1 | 	sub	fp, #16
04c30     37 6D 5A F2 | 	cmps	local01, local02 wcz
04c34     54 00 90 ED |  if_be	jmp	#LR__0162
04c38                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
04c38     20 5E 05 F1 | 	add	fp, #32
04c3c     AF 6C 02 FB | 	rdlong	local01, fp
04c40     08 5E 85 F1 | 	sub	fp, #8
04c44     AF 6E 02 FB | 	rdlong	local02, fp
04c48     18 5E 85 F1 | 	sub	fp, #24
04c4c     37 6D 02 F1 | 	add	local01, local02
04c50     AF 76 02 FB | 	rdlong	local06, fp
04c54     02 76 66 F0 | 	shl	local06, #2
04c58     37 FB 05 F1 | 	add	objptr, #311
04c5c     FD 78 02 F6 | 	mov	local07, objptr
04c60     FD 76 02 F1 | 	add	local06, objptr
04c64     3B 6D 62 FC | 	wrlong	local01, local06
04c68                 | '         lastSetSampleLength[channel] := repeatLength
04c68     AF 6C 02 FB | 	rdlong	local01, fp
04c6c     02 6C 66 F0 | 	shl	local01, #2
04c70     20 FA 05 F1 | 	add	objptr, #32
04c74     FD 6C 02 F1 | 	add	local01, objptr
04c78     1C 5E 05 F1 | 	add	fp, #28
04c7c     AF 6E 02 FB | 	rdlong	local02, fp
04c80     1C 5E 85 F1 | 	sub	fp, #28
04c84     36 6F 62 FC | 	wrlong	local02, local01
04c88     57 FB 85 F1 | 	sub	objptr, #343
04c8c                 | LR__0162
04c8c                 | ' 
04c8c                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
04c8c                 | '       ifnot cmd == $3 || cmd == $5
04c8c     BA FB 05 F1 | 	add	objptr, #442
04c90     FD 6C C2 FA | 	rdbyte	local01, objptr
04c94     BA FB 85 F1 | 	sub	objptr, #442
04c98     03 6C 0E F2 | 	cmp	local01, #3 wz
04c9c     54 00 90 AD |  if_e	jmp	#LR__0165
04ca0     BA FB 05 F1 | 	add	objptr, #442
04ca4     FD 7A C2 FA | 	rdbyte	local08, objptr
04ca8     BA FB 85 F1 | 	sub	objptr, #442
04cac     3D 6F 02 F6 | 	mov	local02, local08
04cb0     05 6E 0E F2 | 	cmp	local02, #5 wz
04cb4     3C 00 90 AD |  if_e	jmp	#LR__0165
04cb8                 | '         ifnot cmd == $E && x == $D
04cb8     BA FB 05 F1 | 	add	objptr, #442
04cbc     FD 70 C2 FA | 	rdbyte	local03, objptr
04cc0     BA FB 85 F1 | 	sub	objptr, #442
04cc4     38 6D 02 F6 | 	mov	local01, local03
04cc8     0E 6C 0E F2 | 	cmp	local01, #14 wz
04ccc     18 00 90 5D |  if_ne	jmp	#LR__0163
04cd0     B7 FB 05 F1 | 	add	objptr, #439
04cd4     FD 7A C2 FA | 	rdbyte	local08, objptr
04cd8     B7 FB 85 F1 | 	sub	objptr, #439
04cdc     3D 6F 02 F6 | 	mov	local02, local08
04ce0     0D 6E 0E F2 | 	cmp	local02, #13 wz
04ce4     0C 00 90 AD |  if_e	jmp	#LR__0164
04ce8                 | LR__0163
04ce8                 | '           triggerNote(channel)
04ce8     AF 6C 02 FB | 	rdlong	local01, fp
04cec     36 5F 02 F6 | 	mov	arg01, local01
04cf0     E0 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
04cf4                 | LR__0164
04cf4                 | LR__0165
04cf4                 | ' 
04cf4                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
04cf4                 | '       if resetTremolo[channel] > 0
04cf4     AF 6C 02 FB | 	rdlong	local01, fp
04cf8     8F FB 05 F1 | 	add	objptr, #399
04cfc     FD 6C 02 F1 | 	add	local01, objptr
04d00     36 6F C2 FA | 	rdbyte	local02, local01
04d04     00 6E 5E F2 | 	cmps	local02, #0 wcz
04d08     8F FB 85 F1 | 	sub	objptr, #399
04d0c     14 00 90 ED |  if_be	jmp	#LR__0166
04d10                 | '         tremoloPos[channel] := 0
04d10     AF 6C 02 FB | 	rdlong	local01, fp
04d14     8B FB 05 F1 | 	add	objptr, #395
04d18     FD 6C 02 F1 | 	add	local01, objptr
04d1c     36 01 48 FC | 	wrbyte	#0, local01
04d20     8B FB 85 F1 | 	sub	objptr, #395
04d24                 | LR__0166
04d24                 | ' 
04d24                 | '       if resetVibrato[channel] > 0
04d24     AF 6C 02 FB | 	rdlong	local01, fp
04d28     93 FB 05 F1 | 	add	objptr, #403
04d2c     FD 6C 02 F1 | 	add	local01, objptr
04d30     36 6F C2 FA | 	rdbyte	local02, local01
04d34     00 6E 5E F2 | 	cmps	local02, #0 wcz
04d38     93 FB 85 F1 | 	sub	objptr, #403
04d3c     20 00 90 ED |  if_be	jmp	#LR__0168
04d40                 | '         vibratoPos[channel] := 0
04d40     AF 6C 02 FB | 	rdlong	local01, fp
04d44     87 FB 05 F1 | 	add	objptr, #391
04d48     FD 6C 02 F1 | 	add	local01, objptr
04d4c     36 01 48 FC | 	wrbyte	#0, local01
04d50     87 FB 85 F1 | 	sub	objptr, #391
04d54                 | ' 
04d54                 | '   else
04d54     08 00 90 FD | 	jmp	#LR__0168
04d58                 | LR__0167
04d58                 | '     ' Handle commands that executes on all "non zero ticks"
04d58                 | '     handleNonZeroTickCommands(channel)
04d58     AF 5E 02 FB | 	rdlong	arg01, fp
04d5c     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
04d60                 | LR__0168
04d60                 | ' 
04d60                 | '   ' Handle commands that executes on every tick
04d60                 | '   handleEveryTickCommands(channel)
04d60     AF 5E 02 FB | 	rdlong	arg01, fp
04d64     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
04d68                 | ' 
04d68                 | '   ' Handle boundaries that should be kept
04d68                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
04d68     AF 70 02 FB | 	rdlong	local03, fp
04d6c     02 70 66 F0 | 	shl	local03, #2
04d70     DF FA 05 F1 | 	add	objptr, #223
04d74     FD 70 02 F1 | 	add	local03, objptr
04d78     38 6D 02 FB | 	rdlong	local01, local03
04d7c     01 00 00 FF 
04d80     58 6D 66 F3 | 	fles	local01, ##856
04d84     AF 7A 02 FB | 	rdlong	local08, fp
04d88     02 7A 66 F0 | 	shl	local08, #2
04d8c     FD 7A 02 F1 | 	add	local08, objptr
04d90     3D 6D 62 FC | 	wrlong	local01, local08
04d94                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
04d94     AF 70 02 FB | 	rdlong	local03, fp
04d98     02 70 66 F0 | 	shl	local03, #2
04d9c     FD 70 02 F1 | 	add	local03, objptr
04da0     38 6D 02 FB | 	rdlong	local01, local03
04da4     71 6C 46 F3 | 	fges	local01, #113
04da8     AF 7A 02 FB | 	rdlong	local08, fp
04dac     02 7A 66 F0 | 	shl	local08, #2
04db0     FD 7A 02 F1 | 	add	local08, objptr
04db4     3D 6D 62 FC | 	wrlong	local01, local08
04db8                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
04db8     AF 70 02 FB | 	rdlong	local03, fp
04dbc     02 70 66 F0 | 	shl	local03, #2
04dc0     20 FA 05 F1 | 	add	objptr, #32
04dc4     FD 70 02 F1 | 	add	local03, objptr
04dc8     38 6D 02 FB | 	rdlong	local01, local03
04dcc     40 6C 66 F3 | 	fles	local01, #64
04dd0     AF 7A 02 FB | 	rdlong	local08, fp
04dd4     02 7A 66 F0 | 	shl	local08, #2
04dd8     FD 7A 02 F1 | 	add	local08, objptr
04ddc     3D 6D 62 FC | 	wrlong	local01, local08
04de0                 | '   currVolume[channel] #>= MINIMUM_VOLUME
04de0     AF 70 02 FB | 	rdlong	local03, fp
04de4     02 70 66 F0 | 	shl	local03, #2
04de8     FD 70 02 F1 | 	add	local03, objptr
04dec     38 6D 02 FB | 	rdlong	local01, local03
04df0     00 6C 46 F3 | 	fges	local01, #0
04df4     AF 7A 02 FB | 	rdlong	local08, fp
04df8     02 7A 66 F0 | 	shl	local08, #2
04dfc     FD 7A 02 F1 | 	add	local08, objptr
04e00     3D 6D 62 FC | 	wrlong	local01, local08
04e04     FF FA 85 F1 | 	sub	objptr, #255
04e08     AF F0 03 F6 | 	mov	ptra, fp
04e0c     BA 00 A0 FD | 	call	#popregs_
04e10                 | _trackerplayer_spin2_processChannel_ret
04e10     2D 00 64 FD | 	ret
04e14                 | 
04e14                 | ' 
04e14                 | ' 
04e14                 | ' ' Handle all commands that executes on tick zero
04e14                 | ' '
04e14                 | ' PRI handleZeroTickCommands(channel)
04e14                 | _trackerplayer_spin2_handleZeroTickCommands
04e14     2F 1F 02 F6 | 	mov	_var01, arg01
04e18                 | ' 
04e18                 | '   CASE_FAST cmd
04e18     BA FB 05 F1 | 	add	objptr, #442
04e1c     FD 20 C2 FA | 	rdbyte	_var02, objptr
04e20     BA FB 85 F1 | 	sub	objptr, #442
04e24     10 23 02 F6 | 	mov	_var03, _var02
04e28     09 22 86 F1 | 	sub	_var03, #9
04e2c     07 22 26 F3 | 	fle	_var03, #7
04e30     11 25 02 F6 | 	mov	_var04, _var03
04e34     30 24 62 FD | 	jmprel	_var04
04e38                 | LR__0169
04e38     1C 00 90 FD | 	jmp	#LR__0170
04e3c     30 04 90 FD | 	jmp	#LR__0193
04e40     64 00 90 FD | 	jmp	#LR__0172
04e44     84 00 90 FD | 	jmp	#LR__0173
04e48     A0 00 90 FD | 	jmp	#LR__0174
04e4c     D0 00 90 FD | 	jmp	#LR__0175
04e50     9C 03 90 FD | 	jmp	#LR__0190
04e54     18 04 90 FD | 	jmp	#LR__0193
04e58                 | LR__0170
04e58                 | ' 
04e58                 | '     $9:                          ' Set sample offset
04e58                 | '       if z > 0
04e58     B9 FB 05 F1 | 	add	objptr, #441
04e5c     FD 26 C2 FA | 	rdbyte	_var05, objptr
04e60     B9 FB 85 F1 | 	sub	objptr, #441
04e64     00 26 5E F2 | 	cmps	_var05, #0 wcz
04e68     1C 00 90 ED |  if_be	jmp	#LR__0171
04e6c                 | '         cmd9_memoryZ[channel] := z
04e6c     0F 27 02 F6 | 	mov	_var05, _var01
04e70     DC FB 05 F1 | 	add	objptr, #476
04e74     FD 26 02 F1 | 	add	_var05, objptr
04e78     23 FA 85 F1 | 	sub	objptr, #35
04e7c     FD 28 C2 FA | 	rdbyte	_var06, objptr
04e80     B9 FB 85 F1 | 	sub	objptr, #441
04e84     13 29 42 FC | 	wrbyte	_var06, _var05
04e88                 | LR__0171
04e88                 | ' 
04e88                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
04e88     DC FB 05 F1 | 	add	objptr, #476
04e8c     FD 1E 02 F1 | 	add	_var01, objptr
04e90     0F 27 C2 FA | 	rdbyte	_var05, _var01
04e94     08 26 66 F0 | 	shl	_var05, #8
04e98     29 FA 85 F1 | 	sub	objptr, #41
04e9c     FD 26 62 FC | 	wrlong	_var05, objptr
04ea0     B3 FB 85 F1 | 	sub	objptr, #435
04ea4     C8 03 90 FD | 	jmp	#LR__0193
04ea8                 | LR__0172
04ea8                 | ' 
04ea8                 | '     $B:                          ' Jump position
04ea8                 | '       cmdB_memoryZ := z
04ea8     B9 FB 05 F1 | 	add	objptr, #441
04eac     FD 26 C2 FA | 	rdbyte	_var05, objptr
04eb0     2E FA 05 F1 | 	add	objptr, #46
04eb4     FD 26 42 FC | 	wrbyte	_var05, objptr
04eb8                 | '       cmdB_updatePosition := true
04eb8     01 FA 05 F1 | 	add	objptr, #1
04ebc     FF FF FF FF 
04ec0     FD FE 4B FC | 	wrbyte	##-1, objptr
04ec4     E8 FB 85 F1 | 	sub	objptr, #488
04ec8     A4 03 90 FD | 	jmp	#LR__0193
04ecc                 | LR__0173
04ecc                 | ' 
04ecc                 | '     $C:                          ' Set volume
04ecc                 | '       currVolume[channel] := z
04ecc     02 1E 66 F0 | 	shl	_var01, #2
04ed0     FF FA 05 F1 | 	add	objptr, #255
04ed4     FD 1E 02 F1 | 	add	_var01, objptr
04ed8     BA FA 05 F1 | 	add	objptr, #186
04edc     FD 28 C2 FA | 	rdbyte	_var06, objptr
04ee0     B9 FB 85 F1 | 	sub	objptr, #441
04ee4     0F 29 62 FC | 	wrlong	_var06, _var01
04ee8     84 03 90 FD | 	jmp	#LR__0193
04eec                 | LR__0174
04eec                 | ' 
04eec                 | '     $D:                          ' Pattern break
04eec                 | '       cmdD_memoryX := x
04eec     B7 FB 05 F1 | 	add	objptr, #439
04ef0     FD 26 C2 FA | 	rdbyte	_var05, objptr
04ef4     2D FA 05 F1 | 	add	objptr, #45
04ef8     FD 26 42 FC | 	wrbyte	_var05, objptr
04efc                 | '       cmdD_memoryY := y
04efc     2C FA 85 F1 | 	sub	objptr, #44
04f00     FD 26 C2 FA | 	rdbyte	_var05, objptr
04f04     2D FA 05 F1 | 	add	objptr, #45
04f08     FD 26 42 FC | 	wrbyte	_var05, objptr
04f0c                 | '       cmdD_updatePosition := true
04f0c     01 FA 05 F1 | 	add	objptr, #1
04f10     FF FF FF FF 
04f14     FD FE 4B FC | 	wrbyte	##-1, objptr
04f18     E6 FB 85 F1 | 	sub	objptr, #486
04f1c     50 03 90 FD | 	jmp	#LR__0193
04f20                 | LR__0175
04f20                 | ' 
04f20                 | '     $E:                          ' Handle "E commands" that execute on tick zero
04f20                 | ' 
04f20                 | '       CASE_FAST x
04f20     B7 FB 05 F1 | 	add	objptr, #439
04f24     FD 2A C2 FA | 	rdbyte	_var07, objptr
04f28     B7 FB 85 F1 | 	sub	objptr, #439
04f2c     15 27 02 F6 | 	mov	_var05, _var07
04f30     0F 26 26 F3 | 	fle	_var05, #15
04f34     13 2D 02 F6 | 	mov	_var08, _var05
04f38     30 2C 62 FD | 	jmprel	_var08
04f3c                 | LR__0176
04f3c     3C 00 90 FD | 	jmp	#LR__0177
04f40     58 00 90 FD | 	jmp	#LR__0178
04f44     8C 00 90 FD | 	jmp	#LR__0179
04f48     C0 00 90 FD | 	jmp	#LR__0180
04f4c     DC 00 90 FD | 	jmp	#LR__0181
04f50     14 01 90 FD | 	jmp	#LR__0182
04f54     28 01 90 FD | 	jmp	#LR__0183
04f58     C0 01 90 FD | 	jmp	#LR__0186
04f5c     10 03 90 FD | 	jmp	#LR__0193
04f60     0C 03 90 FD | 	jmp	#LR__0193
04f64     F0 01 90 FD | 	jmp	#LR__0187
04f68     24 02 90 FD | 	jmp	#LR__0188
04f6c     00 03 90 FD | 	jmp	#LR__0193
04f70     FC 02 90 FD | 	jmp	#LR__0193
04f74     50 02 90 FD | 	jmp	#LR__0189
04f78     F4 02 90 FD | 	jmp	#LR__0193
04f7c                 | LR__0177
04f7c                 | ' 
04f7c                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
04f7c     B8 FB 05 F1 | 	add	objptr, #440
04f80     FD 28 C2 FA | 	rdbyte	_var06, objptr
04f84     14 29 22 F6 | 	not	_var06, _var06
04f88     01 28 06 F5 | 	and	_var06, #1
04f8c     03 FA 05 F1 | 	add	objptr, #3
04f90     FD 28 42 FC | 	wrbyte	_var06, objptr
04f94     BB FB 85 F1 | 	sub	objptr, #443
04f98     D4 02 90 FD | 	jmp	#LR__0193
04f9c                 | LR__0178
04f9c                 | ' 
04f9c                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
04f9c     0F 2F 02 F6 | 	mov	_var09, _var01
04fa0     02 2E 66 F0 | 	shl	_var09, #2
04fa4     DF FA 05 F1 | 	add	objptr, #223
04fa8     FD 2E 02 F1 | 	add	_var09, objptr
04fac     17 29 02 FB | 	rdlong	_var06, _var09
04fb0     D9 FA 05 F1 | 	add	objptr, #217
04fb4     FD 30 C2 FA | 	rdbyte	_var10, objptr
04fb8     18 29 82 F1 | 	sub	_var06, _var10
04fbc     02 1E 66 F0 | 	shl	_var01, #2
04fc0     D9 FA 85 F1 | 	sub	objptr, #217
04fc4     FD 1E 02 F1 | 	add	_var01, objptr
04fc8     0F 29 62 FC | 	wrlong	_var06, _var01
04fcc     DF FA 85 F1 | 	sub	objptr, #223
04fd0     9C 02 90 FD | 	jmp	#LR__0193
04fd4                 | LR__0179
04fd4                 | ' 
04fd4                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
04fd4     0F 2F 02 F6 | 	mov	_var09, _var01
04fd8     02 2E 66 F0 | 	shl	_var09, #2
04fdc     DF FA 05 F1 | 	add	objptr, #223
04fe0     FD 2E 02 F1 | 	add	_var09, objptr
04fe4     17 29 02 FB | 	rdlong	_var06, _var09
04fe8     D9 FA 05 F1 | 	add	objptr, #217
04fec     FD 30 C2 FA | 	rdbyte	_var10, objptr
04ff0     18 29 02 F1 | 	add	_var06, _var10
04ff4     02 1E 66 F0 | 	shl	_var01, #2
04ff8     D9 FA 85 F1 | 	sub	objptr, #217
04ffc     FD 1E 02 F1 | 	add	_var01, objptr
05000     0F 29 62 FC | 	wrlong	_var06, _var01
05004     DF FA 85 F1 | 	sub	objptr, #223
05008     64 02 90 FD | 	jmp	#LR__0193
0500c                 | LR__0180
0500c                 | ' 
0500c                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
0500c     B8 FB 05 F1 | 	add	objptr, #440
05010     FD 28 C2 FA | 	rdbyte	_var06, objptr
05014     01 28 06 F5 | 	and	_var06, #1
05018     04 FA 05 F1 | 	add	objptr, #4
0501c     FD 1E 02 F1 | 	add	_var01, objptr
05020     0F 29 42 FC | 	wrbyte	_var06, _var01
05024     BC FB 85 F1 | 	sub	objptr, #444
05028     44 02 90 FD | 	jmp	#LR__0193
0502c                 | LR__0181
0502c                 | ' 
0502c                 | '         $4:                                      ' Set vibrato waveform type
0502c                 | '           vibratoType[channel]  := y & 3
0502c     B8 FB 05 F1 | 	add	objptr, #440
05030     FD 28 C2 FA | 	rdbyte	_var06, objptr
05034     03 28 06 F5 | 	and	_var06, #3
05038     0F 33 02 F6 | 	mov	_var11, _var01
0503c     08 FA 05 F1 | 	add	objptr, #8
05040     FD 32 02 F1 | 	add	_var11, objptr
05044     19 29 42 FC | 	wrbyte	_var06, _var11
05048                 | '           resetVibrato[channel] := y & 4
05048     08 FA 85 F1 | 	sub	objptr, #8
0504c     FD 28 C2 FA | 	rdbyte	_var06, objptr
05050     04 28 06 F5 | 	and	_var06, #4
05054     25 FA 85 F1 | 	sub	objptr, #37
05058     FD 1E 02 F1 | 	add	_var01, objptr
0505c     0F 29 42 FC | 	wrbyte	_var06, _var01
05060     93 FB 85 F1 | 	sub	objptr, #403
05064     08 02 90 FD | 	jmp	#LR__0193
05068                 | LR__0182
05068                 | ' 
05068                 | '         $5: fineTune := y                        ' Set finetune
05068     B8 FB 05 F1 | 	add	objptr, #440
0506c     FD 28 C2 FA | 	rdbyte	_var06, objptr
05070     09 FA 85 F1 | 	sub	objptr, #9
05074     FD 28 62 FC | 	wrlong	_var06, objptr
05078     AF FB 85 F1 | 	sub	objptr, #431
0507c     F0 01 90 FD | 	jmp	#LR__0193
05080                 | LR__0183
05080                 | ' 
05080                 | '         $6:                                      ' Pattern looping
05080                 | '           if y == 0
05080     B8 FB 05 F1 | 	add	objptr, #440
05084     FD 28 CA FA | 	rdbyte	_var06, objptr wz
05088     B8 FB 85 F1 | 	sub	objptr, #440
0508c     1C 00 90 5D |  if_ne	jmp	#LR__0184
05090                 | '             cmdE6_memory[channel] := patternRow
05090     E9 FB 05 F1 | 	add	objptr, #489
05094     FD 1E 02 F1 | 	add	_var01, objptr
05098     47 FB 85 F1 | 	sub	objptr, #327
0509c     FD 32 C2 FA | 	rdbyte	_var11, objptr
050a0     A2 FA 85 F1 | 	sub	objptr, #162
050a4     0F 33 42 FC | 	wrbyte	_var11, _var01
050a8                 | '           else
050a8     C4 01 90 FD | 	jmp	#LR__0193
050ac                 | LR__0184
050ac                 | '             if ++cmdE6_counter[channel] <= y
050ac     0F 2F 02 F6 | 	mov	_var09, _var01
050b0     ED FB 05 F1 | 	add	objptr, #493
050b4     FD 2E 02 F1 | 	add	_var09, objptr
050b8     17 29 C2 FA | 	rdbyte	_var06, _var09
050bc     01 28 06 F1 | 	add	_var06, #1
050c0     0F 31 02 F6 | 	mov	_var10, _var01
050c4     FD 30 02 F1 | 	add	_var10, objptr
050c8     18 29 42 FC | 	wrbyte	_var06, _var10
050cc     18 35 C2 FA | 	rdbyte	_var12, _var10
050d0     35 FA 85 F1 | 	sub	objptr, #53
050d4     FD 36 C2 FA | 	rdbyte	_var13, objptr
050d8     B8 FB 85 F1 | 	sub	objptr, #440
050dc     1B 35 5A F2 | 	cmps	_var12, _var13 wcz
050e0     24 00 90 1D |  if_a	jmp	#LR__0185
050e4                 | '               cmdE6_updatePosition[channel] := true
050e4     F1 FB 05 F1 | 	add	objptr, #497
050e8     FD 1E 02 F1 | 	add	_var01, objptr
050ec     FF FF FF FF 
050f0     0F FF 4B FC | 	wrbyte	##-1, _var01
050f4                 | '               cmdE6_updatePositionCommon    := true
050f4     04 FA 05 F1 | 	add	objptr, #4
050f8     FF FF FF FF 
050fc     FD FE 4B FC | 	wrbyte	##-1, objptr
05100     F5 FB 85 F1 | 	sub	objptr, #501
05104                 | '             else
05104     68 01 90 FD | 	jmp	#LR__0193
05108                 | LR__0185
05108                 | '               cmdE6_counter[channel] := 0
05108     ED FB 05 F1 | 	add	objptr, #493
0510c     FD 1E 02 F1 | 	add	_var01, objptr
05110     0F 01 48 FC | 	wrbyte	#0, _var01
05114     ED FB 85 F1 | 	sub	objptr, #493
05118     54 01 90 FD | 	jmp	#LR__0193
0511c                 | LR__0186
0511c                 | ' 
0511c                 | '         $7:                                      ' Set tremolo waveform type
0511c                 | '           tremoloType[channel] := y & 3
0511c     B8 FB 05 F1 | 	add	objptr, #440
05120     FD 28 C2 FA | 	rdbyte	_var06, objptr
05124     03 28 06 F5 | 	and	_var06, #3
05128     0F 33 02 F6 | 	mov	_var11, _var01
0512c     0C FA 05 F1 | 	add	objptr, #12
05130     FD 32 02 F1 | 	add	_var11, objptr
05134     19 29 42 FC | 	wrbyte	_var06, _var11
05138                 | '           resetTremolo[channel] := y & 4
05138     0C FA 85 F1 | 	sub	objptr, #12
0513c     FD 28 C2 FA | 	rdbyte	_var06, objptr
05140     04 28 06 F5 | 	and	_var06, #4
05144     29 FA 85 F1 | 	sub	objptr, #41
05148     FD 1E 02 F1 | 	add	_var01, objptr
0514c     0F 29 42 FC | 	wrbyte	_var06, _var01
05150     8F FB 85 F1 | 	sub	objptr, #399
05154     18 01 90 FD | 	jmp	#LR__0193
05158                 | LR__0187
05158                 | ' 
05158                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
05158     0F 2F 02 F6 | 	mov	_var09, _var01
0515c     02 2E 66 F0 | 	shl	_var09, #2
05160     FF FA 05 F1 | 	add	objptr, #255
05164     FD 2E 02 F1 | 	add	_var09, objptr
05168     17 29 02 FB | 	rdlong	_var06, _var09
0516c     B9 FA 05 F1 | 	add	objptr, #185
05170     FD 30 C2 FA | 	rdbyte	_var10, objptr
05174     18 29 02 F1 | 	add	_var06, _var10
05178     02 1E 66 F0 | 	shl	_var01, #2
0517c     B9 FA 85 F1 | 	sub	objptr, #185
05180     FD 1E 02 F1 | 	add	_var01, objptr
05184     0F 29 62 FC | 	wrlong	_var06, _var01
05188     FF FA 85 F1 | 	sub	objptr, #255
0518c     E0 00 90 FD | 	jmp	#LR__0193
05190                 | LR__0188
05190                 | ' 
05190                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
05190     0F 2F 02 F6 | 	mov	_var09, _var01
05194     02 2E 66 F0 | 	shl	_var09, #2
05198     FF FA 05 F1 | 	add	objptr, #255
0519c     FD 2E 02 F1 | 	add	_var09, objptr
051a0     17 29 02 FB | 	rdlong	_var06, _var09
051a4     B9 FA 05 F1 | 	add	objptr, #185
051a8     FD 30 C2 FA | 	rdbyte	_var10, objptr
051ac     18 29 82 F1 | 	sub	_var06, _var10
051b0     02 1E 66 F0 | 	shl	_var01, #2
051b4     B9 FA 85 F1 | 	sub	objptr, #185
051b8     FD 1E 02 F1 | 	add	_var01, objptr
051bc     0F 29 62 FC | 	wrlong	_var06, _var01
051c0     FF FA 85 F1 | 	sub	objptr, #255
051c4     A8 00 90 FD | 	jmp	#LR__0193
051c8                 | LR__0189
051c8                 | ' 
051c8                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
051c8     B8 FB 05 F1 | 	add	objptr, #440
051cc     FD 2E C2 FA | 	rdbyte	_var09, objptr
051d0     14 FB 85 F1 | 	sub	objptr, #276
051d4     FD 30 C2 FA | 	rdbyte	_var10, objptr
051d8     18 2F 02 FD | 	qmul	_var09, _var10
051dc     18 28 62 FD | 	getqx	_var06
051e0     01 FA 05 F1 | 	add	objptr, #1
051e4     FD 28 42 FC | 	wrbyte	_var06, objptr
051e8     A5 FA 85 F1 | 	sub	objptr, #165
051ec     80 00 90 FD | 	jmp	#LR__0193
051f0                 | LR__0190
051f0                 | ' 
051f0                 | '     $F:                          ' Set speed
051f0                 | '       if z < 32
051f0     B9 FB 05 F1 | 	add	objptr, #441
051f4     FD 26 C2 FA | 	rdbyte	_var05, objptr
051f8     B9 FB 85 F1 | 	sub	objptr, #441
051fc     20 26 5E F2 | 	cmps	_var05, #32 wcz
05200     18 00 90 3D |  if_ae	jmp	#LR__0191
05204                 | '         currentSongSpeed := z
05204     B9 FB 05 F1 | 	add	objptr, #441
05208     FD 26 C2 FA | 	rdbyte	_var05, objptr
0520c     15 FB 85 F1 | 	sub	objptr, #277
05210     FD 26 42 FC | 	wrbyte	_var05, objptr
05214     A4 FA 85 F1 | 	sub	objptr, #164
05218                 | '       else
05218     54 00 90 FD | 	jmp	#LR__0192
0521c                 | LR__0191
0521c                 | '         ticksPerMinute := z * 24
0521c     B9 FB 05 F1 | 	add	objptr, #441
05220     FD 2A C2 FA | 	rdbyte	_var07, objptr
05224     15 27 02 F6 | 	mov	_var05, _var07
05228     01 26 66 F0 | 	shl	_var05, #1
0522c     15 27 02 F1 | 	add	_var05, _var07
05230     03 26 66 F0 | 	shl	_var05, #3
05234     12 FA 85 F1 | 	sub	objptr, #18
05238     FD 26 62 FC | 	wrlong	_var05, objptr
0523c     A7 FB 85 F1 | 	sub	objptr, #423
05240                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05240     FD 98 02 FB | 	rdlong	muldiva_, objptr
05244     A7 FB 05 F1 | 	add	objptr, #423
05248     FD 9A 02 FB | 	rdlong	muldivb_, objptr
0524c     A7 FB 85 F1 | 	sub	objptr, #423
05250     C6 00 A0 FD | 	call	#divide_
05254     4D 29 02 F6 | 	mov	_var06, muldivb_
05258     04 28 66 F0 | 	shl	_var06, #4
0525c     4D 29 82 F1 | 	sub	_var06, muldivb_
05260     02 28 66 F0 | 	shl	_var06, #2
05264     AB FB 05 F1 | 	add	objptr, #427
05268     FD 28 62 FC | 	wrlong	_var06, objptr
0526c     AB FB 85 F1 | 	sub	objptr, #427
05270                 | LR__0192
05270                 | LR__0193
05270                 | _trackerplayer_spin2_handleZeroTickCommands_ret
05270     2D 00 64 FD | 	ret
05274                 | 
05274                 | ' 
05274                 | ' 
05274                 | ' ' Handle all commands that executes on "non zero ticks"
05274                 | ' '
05274                 | ' PRI handleNonZeroTickCommands(channel)
05274                 | _trackerplayer_spin2_handleNonZeroTickCommands
05274     0A 5A 05 F6 | 	mov	COUNT_, #10
05278     B0 00 A0 FD | 	call	#pushregs_
0527c     2F 6D 02 F6 | 	mov	local01, arg01
05280                 | ' 
05280                 | '   CASE_FAST cmd
05280     BA FB 05 F1 | 	add	objptr, #442
05284     FD 6E C2 FA | 	rdbyte	local02, objptr
05288     BA FB 85 F1 | 	sub	objptr, #442
0528c     37 71 02 F6 | 	mov	local03, local02
05290     01 70 86 F1 | 	sub	local03, #1
05294     0E 70 26 F3 | 	fle	local03, #14
05298     38 73 02 F6 | 	mov	local04, local03
0529c     30 72 62 FD | 	jmprel	local04
052a0                 | LR__0194
052a0     38 00 90 FD | 	jmp	#LR__0195
052a4     A0 00 90 FD | 	jmp	#LR__0196
052a8     D4 00 90 FD | 	jmp	#LR__0197
052ac     1C 02 90 FD | 	jmp	#LR__0207
052b0     20 01 90 FD | 	jmp	#LR__0199
052b4     48 01 90 FD | 	jmp	#LR__0200
052b8     50 01 90 FD | 	jmp	#LR__0201
052bc     0C 02 90 FD | 	jmp	#LR__0207
052c0     08 02 90 FD | 	jmp	#LR__0207
052c4     B0 01 90 FD | 	jmp	#LR__0204
052c8     00 02 90 FD | 	jmp	#LR__0207
052cc     FC 01 90 FD | 	jmp	#LR__0207
052d0     F8 01 90 FD | 	jmp	#LR__0207
052d4     AC 01 90 FD | 	jmp	#LR__0205
052d8     F0 01 90 FD | 	jmp	#LR__0207
052dc                 | LR__0195
052dc                 | ' 
052dc                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
052dc     36 75 02 F6 | 	mov	local05, local01
052e0     02 74 66 F0 | 	shl	local05, #2
052e4     DF FA 05 F1 | 	add	objptr, #223
052e8     FD 74 02 F1 | 	add	local05, objptr
052ec     3A 77 02 FB | 	rdlong	local06, local05
052f0     DA FA 05 F1 | 	add	objptr, #218
052f4     FD 78 C2 FA | 	rdbyte	local07, objptr
052f8     3C 77 82 F1 | 	sub	local06, local07
052fc     36 7B 02 F6 | 	mov	local08, local01
05300     02 7A 66 F0 | 	shl	local08, #2
05304     DA FA 85 F1 | 	sub	objptr, #218
05308     FD 7A 02 F1 | 	add	local08, objptr
0530c     3D 77 62 FC | 	wrlong	local06, local08
05310                 | ' 
05310                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05310                 | '       if currPeriod[channel] < 0
05310     36 77 02 F6 | 	mov	local06, local01
05314     02 76 66 F0 | 	shl	local06, #2
05318     FD 76 02 F1 | 	add	local06, objptr
0531c     3B 7D 02 FB | 	rdlong	local09, local06
05320     00 7C 5E F2 | 	cmps	local09, #0 wcz
05324     DF FA 85 F1 | 	sub	objptr, #223
05328     A0 01 90 3D |  if_ae	jmp	#LR__0207
0532c                 | '         currPeriod[channel] := MAXIMUM_PERIOD
0532c     02 6C 66 F0 | 	shl	local01, #2
05330     DF FA 05 F1 | 	add	objptr, #223
05334     FD 6C 02 F1 | 	add	local01, objptr
05338     01 00 80 FF 
0533c     36 B1 6A FC | 	wrlong	##856, local01
05340     DF FA 85 F1 | 	sub	objptr, #223
05344     84 01 90 FD | 	jmp	#LR__0207
05348                 | LR__0196
05348                 | ' 
05348                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05348     36 75 02 F6 | 	mov	local05, local01
0534c     02 74 66 F0 | 	shl	local05, #2
05350     DF FA 05 F1 | 	add	objptr, #223
05354     FD 74 02 F1 | 	add	local05, objptr
05358     3A 77 02 FB | 	rdlong	local06, local05
0535c     DA FA 05 F1 | 	add	objptr, #218
05360     FD 78 C2 FA | 	rdbyte	local07, objptr
05364     3C 77 02 F1 | 	add	local06, local07
05368     02 6C 66 F0 | 	shl	local01, #2
0536c     DA FA 85 F1 | 	sub	objptr, #218
05370     FD 6C 02 F1 | 	add	local01, objptr
05374     36 77 62 FC | 	wrlong	local06, local01
05378     DF FA 85 F1 | 	sub	objptr, #223
0537c     4C 01 90 FD | 	jmp	#LR__0207
05380                 | LR__0197
05380                 | ' 
05380                 | '     $3:                                 ' Slide to note (portamento)
05380                 | '       if z > 0
05380     B9 FB 05 F1 | 	add	objptr, #441
05384     FD 76 C2 FA | 	rdbyte	local06, objptr
05388     B9 FB 85 F1 | 	sub	objptr, #441
0538c     00 76 5E F2 | 	cmps	local06, #0 wcz
05390     1C 00 90 ED |  if_be	jmp	#LR__0198
05394                 | '         cmd3_memoryZ[channel] := z
05394     36 77 02 F6 | 	mov	local06, local01
05398     C8 FB 05 F1 | 	add	objptr, #456
0539c     FD 76 02 F1 | 	add	local06, objptr
053a0     0F FA 85 F1 | 	sub	objptr, #15
053a4     FD 7C C2 FA | 	rdbyte	local09, objptr
053a8     B9 FB 85 F1 | 	sub	objptr, #441
053ac     3B 7D 42 FC | 	wrbyte	local09, local06
053b0                 | LR__0198
053b0                 | ' 
053b0                 | '       doPortamento(channel, lastSetPeriod[channel])
053b0     36 7D 02 F6 | 	mov	local09, local01
053b4     02 7C 66 F0 | 	shl	local09, #2
053b8     27 FB 05 F1 | 	add	objptr, #295
053bc     FD 7C 02 F1 | 	add	local09, objptr
053c0     3E 61 02 FB | 	rdlong	arg02, local09
053c4     36 5F 02 F6 | 	mov	arg01, local01
053c8     27 FB 85 F1 | 	sub	objptr, #295
053cc     5C 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
053d0     F8 00 90 FD | 	jmp	#LR__0207
053d4                 | LR__0199
053d4                 | ' 
053d4                 | '     $5:                                 ' Volume slide + portamento
053d4                 | '       doVolumeSlide(channel)
053d4     36 5F 02 F6 | 	mov	arg01, local01
053d8     7C 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
053dc                 | '       doPortamento(channel, lastSetPeriod[channel])
053dc     36 7D 02 F6 | 	mov	local09, local01
053e0     02 7C 66 F0 | 	shl	local09, #2
053e4     27 FB 05 F1 | 	add	objptr, #295
053e8     FD 7C 02 F1 | 	add	local09, objptr
053ec     3E 61 02 FB | 	rdlong	arg02, local09
053f0     36 5F 02 F6 | 	mov	arg01, local01
053f4     27 FB 85 F1 | 	sub	objptr, #295
053f8     30 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
053fc     CC 00 90 FD | 	jmp	#LR__0207
05400                 | LR__0200
05400                 | ' 
05400                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
05400     36 5F 02 F6 | 	mov	arg01, local01
05404     50 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05408     C0 00 90 FD | 	jmp	#LR__0207
0540c                 | LR__0201
0540c                 | ' 
0540c                 | '     $7:                                 ' Tremolo
0540c                 | '       if x > 0
0540c     B7 FB 05 F1 | 	add	objptr, #439
05410     FD 76 C2 FA | 	rdbyte	local06, objptr
05414     B7 FB 85 F1 | 	sub	objptr, #439
05418     00 76 5E F2 | 	cmps	local06, #0 wcz
0541c     1C 00 90 ED |  if_be	jmp	#LR__0202
05420                 | '         cmd7_memoryX[channel] := x
05420     36 77 02 F6 | 	mov	local06, local01
05424     D8 FB 05 F1 | 	add	objptr, #472
05428     FD 76 02 F1 | 	add	local06, objptr
0542c     21 FA 85 F1 | 	sub	objptr, #33
05430     FD 7C C2 FA | 	rdbyte	local09, objptr
05434     B7 FB 85 F1 | 	sub	objptr, #439
05438     3B 7D 42 FC | 	wrbyte	local09, local06
0543c                 | LR__0202
0543c                 | '       if y > 0
0543c     B8 FB 05 F1 | 	add	objptr, #440
05440     FD 76 C2 FA | 	rdbyte	local06, objptr
05444     B8 FB 85 F1 | 	sub	objptr, #440
05448     00 76 5E F2 | 	cmps	local06, #0 wcz
0544c     1C 00 90 ED |  if_be	jmp	#LR__0203
05450                 | '         cmd7_memoryY[channel] := y
05450     36 77 02 F6 | 	mov	local06, local01
05454     D4 FB 05 F1 | 	add	objptr, #468
05458     FD 76 02 F1 | 	add	local06, objptr
0545c     1C FA 85 F1 | 	sub	objptr, #28
05460     FD 7C C2 FA | 	rdbyte	local09, objptr
05464     B8 FB 85 F1 | 	sub	objptr, #440
05468     3B 7D 42 FC | 	wrbyte	local09, local06
0546c                 | LR__0203
0546c                 | ' 
0546c                 | '       doTremolo(channel)
0546c     36 5F 02 F6 | 	mov	arg01, local01
05470     F0 03 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
05474     54 00 90 FD | 	jmp	#LR__0207
05478                 | LR__0204
05478                 | ' 
05478                 | '     $A: doVolumeSlide(channel)          ' Volume slide
05478     36 5F 02 F6 | 	mov	arg01, local01
0547c     D8 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
05480     48 00 90 FD | 	jmp	#LR__0207
05484                 | LR__0205
05484                 | ' 
05484                 | '     $E:                                 ' Retrig every Y ticks
05484                 | '       if (x == $9) && ((tickcounter // y) == 0)
05484     B7 FB 05 F1 | 	add	objptr, #439
05488     FD 74 C2 FA | 	rdbyte	local05, objptr
0548c     B7 FB 85 F1 | 	sub	objptr, #439
05490     09 74 0E F2 | 	cmp	local05, #9 wz
05494     34 00 90 5D |  if_ne	jmp	#LR__0206
05498     A1 FA 05 F1 | 	add	objptr, #161
0549c     FD 78 C2 FA | 	rdbyte	local07, objptr
054a0     3C 99 02 F6 | 	mov	muldiva_, local07
054a4     17 FB 05 F1 | 	add	objptr, #279
054a8     FD 7E C2 FA | 	rdbyte	local10, objptr
054ac     B8 FB 85 F1 | 	sub	objptr, #440
054b0     3F 9B 02 F6 | 	mov	muldivb_, local10
054b4     C6 00 A0 FD | 	call	#divide_
054b8     4C 7D 0A F6 | 	mov	local09, muldiva_ wz
054bc     0C 00 90 5D |  if_ne	jmp	#LR__0206
054c0                 | '         triggerNote(channel)
054c0     36 77 02 F6 | 	mov	local06, local01
054c4     3B 5F 02 F6 | 	mov	arg01, local06
054c8     08 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
054cc                 | LR__0206
054cc                 | LR__0207
054cc     AF F0 03 F6 | 	mov	ptra, fp
054d0     BA 00 A0 FD | 	call	#popregs_
054d4                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
054d4     2D 00 64 FD | 	ret
054d8                 | 
054d8                 | ' 
054d8                 | ' 
054d8                 | ' ' Handle all commands that executes on every tick
054d8                 | ' '
054d8                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
054d8                 | _trackerplayer_spin2_handleEveryTickCommands
054d8     0F 5A 05 F6 | 	mov	COUNT_, #15
054dc     B0 00 A0 FD | 	call	#pushregs_
054e0     2F 6D 02 F6 | 	mov	local01, arg01
054e4                 | ' 
054e4                 | '   CASE_FAST cmd
054e4     BA FB 05 F1 | 	add	objptr, #442
054e8     FD 6E C2 FA | 	rdbyte	local02, objptr
054ec     BA FB 85 F1 | 	sub	objptr, #442
054f0     37 71 02 F6 | 	mov	local03, local02
054f4     0F 70 26 F3 | 	fle	local03, #15
054f8     38 73 02 F6 | 	mov	local04, local03
054fc     30 72 62 FD | 	jmprel	local04
05500                 | LR__0208
05500     3C 00 90 FD | 	jmp	#LR__0209
05504     50 03 90 FD | 	jmp	#LR__0223
05508     4C 03 90 FD | 	jmp	#LR__0223
0550c     48 03 90 FD | 	jmp	#LR__0223
05510     D0 01 90 FD | 	jmp	#LR__0212
05514     40 03 90 FD | 	jmp	#LR__0223
05518     34 02 90 FD | 	jmp	#LR__0215
0551c     38 03 90 FD | 	jmp	#LR__0223
05520     34 03 90 FD | 	jmp	#LR__0223
05524     30 03 90 FD | 	jmp	#LR__0223
05528     2C 03 90 FD | 	jmp	#LR__0223
0552c     28 03 90 FD | 	jmp	#LR__0223
05530     24 03 90 FD | 	jmp	#LR__0223
05534     20 03 90 FD | 	jmp	#LR__0223
05538     20 02 90 FD | 	jmp	#LR__0216
0553c     18 03 90 FD | 	jmp	#LR__0223
05540                 | LR__0209
05540                 | ' 
05540                 | '     $0:                                 ' Arpeggio
05540                 | '       arpCounter := tickCounter // 3
05540     A1 FA 05 F1 | 	add	objptr, #161
05544     FD 98 C2 FA | 	rdbyte	muldiva_, objptr
05548     A1 FA 85 F1 | 	sub	objptr, #161
0554c     03 9A 06 F6 | 	mov	muldivb_, #3
05550     C6 00 A0 FD | 	call	#divide_
05554     4C 75 02 F6 | 	mov	local05, muldiva_
05558                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
05558     36 77 02 F6 | 	mov	local06, local01
0555c     02 76 66 F0 | 	shl	local06, #2
05560     DF FA 05 F1 | 	add	objptr, #223
05564     FD 76 02 F1 | 	add	local06, objptr
05568     3B 5F 02 FB | 	rdlong	arg01, local06
0556c     36 79 02 F6 | 	mov	local07, local01
05570     0C FA 85 F1 | 	sub	objptr, #12
05574     FD 78 02 F1 | 	add	local07, objptr
05578     3C 61 C2 FA | 	rdbyte	arg02, local07
0557c     D3 FA 85 F1 | 	sub	objptr, #211
05580     C8 EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
05584     0C 7B 02 F6 | 	mov	local08, result1
05588     3D 7D 02 F6 | 	mov	local09, local08
0558c     24 7A 5E F2 | 	cmps	local08, #36 wcz
05590     C4 02 90 3D |  if_ae	jmp	#LR__0223
05594                 | '         if arpCounter == 1 and x > 0
05594     01 74 0E F2 | 	cmp	local05, #1 wz
05598     80 00 90 5D |  if_ne	jmp	#LR__0210
0559c     B7 FB 05 F1 | 	add	objptr, #439
055a0     FD 7E C2 FA | 	rdbyte	local10, objptr
055a4     B7 FB 85 F1 | 	sub	objptr, #439
055a8     00 7E 5E F2 | 	cmps	local10, #0 wcz
055ac     6C 00 90 ED |  if_be	jmp	#LR__0210
055b0                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
055b0     3E 5F 02 F6 | 	mov	arg01, local09
055b4     B7 FB 05 F1 | 	add	objptr, #439
055b8     FD 80 C2 FA | 	rdbyte	local11, objptr
055bc     40 5F 02 F1 | 	add	arg01, local11
055c0                 | ' 
055c0                 | '   return word[@periodTable][noteNumber]
055c0     06 00 00 FF 
055c4     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
055c8     01 5E 66 F0 | 	shl	arg01, #1
055cc     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
055d0     2F 19 E2 FA | 	rdword	result1, arg01
055d4     06 00 00 FF 
055d8     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
055dc     0C 77 02 F6 | 	mov	local06, result1
055e0     36 79 02 F6 | 	mov	local07, local01
055e4     02 78 66 F0 | 	shl	local07, #2
055e8     D8 FA 85 F1 | 	sub	objptr, #216
055ec     FD 80 02 F6 | 	mov	local11, objptr
055f0     FD 78 02 F1 | 	add	local07, objptr
055f4     3B 7F 02 F6 | 	mov	local10, local06
055f8     3C 83 02 FB | 	rdlong	local12, local07
055fc     41 7F 82 F1 | 	sub	local10, local12
05600     36 85 02 F6 | 	mov	local13, local01
05604     02 84 66 F0 | 	shl	local13, #2
05608     10 FA 05 F1 | 	add	objptr, #16
0560c     FD 86 02 F6 | 	mov	local14, objptr
05610     FD 84 02 F1 | 	add	local13, objptr
05614     42 7F 62 FC | 	wrlong	local10, local13
05618     EF FA 85 F1 | 	sub	objptr, #239
0561c                 | LR__0210
0561c                 | '         if arpCounter == 2 and y > 0
0561c     02 74 0E F2 | 	cmp	local05, #2 wz
05620     80 00 90 5D |  if_ne	jmp	#LR__0211
05624     B8 FB 05 F1 | 	add	objptr, #440
05628     FD 7E C2 FA | 	rdbyte	local10, objptr
0562c     B8 FB 85 F1 | 	sub	objptr, #440
05630     00 7E 5E F2 | 	cmps	local10, #0 wcz
05634     6C 00 90 ED |  if_be	jmp	#LR__0211
05638                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
05638     3E 5F 02 F6 | 	mov	arg01, local09
0563c     B8 FB 05 F1 | 	add	objptr, #440
05640     FD 80 C2 FA | 	rdbyte	local11, objptr
05644     40 5F 02 F1 | 	add	arg01, local11
05648                 | ' 
05648                 | '   return word[@periodTable][noteNumber]
05648     06 00 00 FF 
0564c     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05650     01 5E 66 F0 | 	shl	arg01, #1
05654     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
05658     2F 19 E2 FA | 	rdword	result1, arg01
0565c     06 00 00 FF 
05660     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05664     0C 77 02 F6 | 	mov	local06, result1
05668     36 79 02 F6 | 	mov	local07, local01
0566c     02 78 66 F0 | 	shl	local07, #2
05670     D9 FA 85 F1 | 	sub	objptr, #217
05674     FD 80 02 F6 | 	mov	local11, objptr
05678     FD 78 02 F1 | 	add	local07, objptr
0567c     3B 7F 02 F6 | 	mov	local10, local06
05680     3C 83 02 FB | 	rdlong	local12, local07
05684     41 7F 82 F1 | 	sub	local10, local12
05688     36 85 02 F6 | 	mov	local13, local01
0568c     02 84 66 F0 | 	shl	local13, #2
05690     10 FA 05 F1 | 	add	objptr, #16
05694     FD 86 02 F6 | 	mov	local14, objptr
05698     FD 84 02 F1 | 	add	local13, objptr
0569c     42 7F 62 FC | 	wrlong	local10, local13
056a0     EF FA 85 F1 | 	sub	objptr, #239
056a4                 | LR__0211
056a4                 | '         if arpCounter == 0 and (x + y) > 0
056a4     00 74 0E F2 | 	cmp	local05, #0 wz
056a8     AC 01 90 5D |  if_ne	jmp	#LR__0223
056ac     B7 FB 05 F1 | 	add	objptr, #439
056b0     FD 7E C2 FA | 	rdbyte	local10, objptr
056b4     01 FA 05 F1 | 	add	objptr, #1
056b8     FD 80 C2 FA | 	rdbyte	local11, objptr
056bc     B8 FB 85 F1 | 	sub	objptr, #440
056c0     40 7F 02 F1 | 	add	local10, local11
056c4     00 7E 5E F2 | 	cmps	local10, #0 wcz
056c8     8C 01 90 ED |  if_be	jmp	#LR__0223
056cc                 | '           deltaPeriod[channel] := 0
056cc     02 6C 66 F0 | 	shl	local01, #2
056d0     EF FA 05 F1 | 	add	objptr, #239
056d4     FD 6C 02 F1 | 	add	local01, objptr
056d8     36 01 68 FC | 	wrlong	#0, local01
056dc     EF FA 85 F1 | 	sub	objptr, #239
056e0     74 01 90 FD | 	jmp	#LR__0223
056e4                 | LR__0212
056e4                 | ' 
056e4                 | '     $4:                                 ' Vibrato
056e4                 | '       if x > 0
056e4     B7 FB 05 F1 | 	add	objptr, #439
056e8     FD 7E C2 FA | 	rdbyte	local10, objptr
056ec     B7 FB 85 F1 | 	sub	objptr, #439
056f0     00 7E 5E F2 | 	cmps	local10, #0 wcz
056f4     1C 00 90 ED |  if_be	jmp	#LR__0213
056f8                 | '         cmd4_memoryX[channel] := x
056f8     36 7F 02 F6 | 	mov	local10, local01
056fc     D0 FB 05 F1 | 	add	objptr, #464
05700     FD 7E 02 F1 | 	add	local10, objptr
05704     19 FA 85 F1 | 	sub	objptr, #25
05708     FD 78 C2 FA | 	rdbyte	local07, objptr
0570c     B7 FB 85 F1 | 	sub	objptr, #439
05710     3F 79 42 FC | 	wrbyte	local07, local10
05714                 | LR__0213
05714                 | '       if y > 0
05714     B8 FB 05 F1 | 	add	objptr, #440
05718     FD 7E C2 FA | 	rdbyte	local10, objptr
0571c     B8 FB 85 F1 | 	sub	objptr, #440
05720     00 7E 5E F2 | 	cmps	local10, #0 wcz
05724     1C 00 90 ED |  if_be	jmp	#LR__0214
05728                 | '         cmd4_memoryY[channel] := y
05728     36 7F 02 F6 | 	mov	local10, local01
0572c     CC FB 05 F1 | 	add	objptr, #460
05730     FD 7E 02 F1 | 	add	local10, objptr
05734     14 FA 85 F1 | 	sub	objptr, #20
05738     FD 78 C2 FA | 	rdbyte	local07, objptr
0573c     B8 FB 85 F1 | 	sub	objptr, #440
05740     3F 79 42 FC | 	wrbyte	local07, local10
05744                 | LR__0214
05744                 | ' 
05744                 | '       doVibrato(channel)
05744     36 5F 02 F6 | 	mov	arg01, local01
05748     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
0574c     08 01 90 FD | 	jmp	#LR__0223
05750                 | LR__0215
05750                 | ' 
05750                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
05750     36 5F 02 F6 | 	mov	arg01, local01
05754     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
05758     FC 00 90 FD | 	jmp	#LR__0223
0575c                 | LR__0216
0575c                 | ' 
0575c                 | '     $E:
0575c                 | '       if x == $C                        ' Cut note after Y ticks
0575c     B7 FB 05 F1 | 	add	objptr, #439
05760     FD 7E C2 FA | 	rdbyte	local10, objptr
05764     B7 FB 85 F1 | 	sub	objptr, #439
05768     0C 7E 0E F2 | 	cmp	local10, #12 wz
0576c     34 00 90 5D |  if_ne	jmp	#LR__0217
05770                 | '         if tickcounter == y
05770     A1 FA 05 F1 | 	add	objptr, #161
05774     FD 7E C2 FA | 	rdbyte	local10, objptr
05778     17 FB 05 F1 | 	add	objptr, #279
0577c     FD 78 C2 FA | 	rdbyte	local07, objptr
05780     B8 FB 85 F1 | 	sub	objptr, #440
05784     3C 7F 0A F2 | 	cmp	local10, local07 wz
05788     CC 00 90 5D |  if_ne	jmp	#LR__0222
0578c                 | '           currVolume[channel] := 0
0578c     02 6C 66 F0 | 	shl	local01, #2
05790     FF FA 05 F1 | 	add	objptr, #255
05794     FD 6C 02 F1 | 	add	local01, objptr
05798     36 01 68 FC | 	wrlong	#0, local01
0579c     FF FA 85 F1 | 	sub	objptr, #255
057a0     B4 00 90 FD | 	jmp	#LR__0222
057a4                 | LR__0217
057a4                 | ' 
057a4                 | '       elseif x == $D                    ' Delay note Y ticks
057a4     B7 FB 05 F1 | 	add	objptr, #439
057a8     FD 7E C2 FA | 	rdbyte	local10, objptr
057ac     B7 FB 85 F1 | 	sub	objptr, #439
057b0     0D 7E 0E F2 | 	cmp	local10, #13 wz
057b4     A0 00 90 5D |  if_ne	jmp	#LR__0221
057b8                 | '         if tickcounter == y
057b8     A1 FA 05 F1 | 	add	objptr, #161
057bc     FD 7E C2 FA | 	rdbyte	local10, objptr
057c0     17 FB 05 F1 | 	add	objptr, #279
057c4     FD 78 C2 FA | 	rdbyte	local07, objptr
057c8     B8 FB 85 F1 | 	sub	objptr, #440
057cc     3C 7F 0A F2 | 	cmp	local10, local07 wz
057d0     0C 00 90 5D |  if_ne	jmp	#LR__0218
057d4                 | '           triggerNote(channel)
057d4     36 5F 02 F6 | 	mov	arg01, local01
057d8     F8 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
057dc     78 00 90 FD | 	jmp	#LR__0220
057e0                 | LR__0218
057e0                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
057e0                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
057e0     B8 FB 05 F1 | 	add	objptr, #440
057e4     FD 7E C2 FA | 	rdbyte	local10, objptr
057e8     14 FB 85 F1 | 	sub	objptr, #276
057ec     FD 78 C2 FA | 	rdbyte	local07, objptr
057f0     A4 FA 85 F1 | 	sub	objptr, #164
057f4     3C 7F 5A F2 | 	cmps	local10, local07 wcz
057f8     5C 00 90 CD |  if_b	jmp	#LR__0219
057fc     A4 FA 05 F1 | 	add	objptr, #164
05800     FD 84 C2 FA | 	rdbyte	local13, objptr
05804     42 83 02 F6 | 	mov	local12, local13
05808     01 82 86 F1 | 	sub	local12, #1
0580c     03 FA 85 F1 | 	sub	objptr, #3
05810     FD 88 C2 FA | 	rdbyte	local15, objptr
05814     A1 FA 85 F1 | 	sub	objptr, #161
05818     44 87 02 F6 | 	mov	local14, local15
0581c     41 87 0A F2 | 	cmp	local14, local12 wz
05820     34 00 90 5D |  if_ne	jmp	#LR__0219
05824                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
05824     36 7F 02 F6 | 	mov	local10, local01
05828     02 7E 66 F0 | 	shl	local10, #2
0582c     27 FB 05 F1 | 	add	objptr, #295
05830     FD 76 02 F6 | 	mov	local06, objptr
05834     FD 7E 02 F1 | 	add	local10, objptr
05838     36 79 02 F6 | 	mov	local07, local01
0583c     02 78 66 F0 | 	shl	local07, #2
05840     48 FA 85 F1 | 	sub	objptr, #72
05844     FD 80 02 F6 | 	mov	local11, objptr
05848     3F 83 02 FB | 	rdlong	local12, local10
0584c     40 79 02 F1 | 	add	local07, local11
05850     3C 83 62 FC | 	wrlong	local12, local07
05854     DF FA 85 F1 | 	sub	objptr, #223
05858                 | LR__0219
05858                 | LR__0220
05858                 | LR__0221
05858                 | LR__0222
05858                 | LR__0223
05858     AF F0 03 F6 | 	mov	ptra, fp
0585c     BA 00 A0 FD | 	call	#popregs_
05860                 | _trackerplayer_spin2_handleEveryTickCommands_ret
05860     2D 00 64 FD | 	ret
05864                 | 
05864                 | ' 
05864                 | ' 
05864                 | ' PRI doTremolo(channel) | depth, sineWave, speed
05864                 | _trackerplayer_spin2_doTremolo
05864     2F 1F 02 F6 | 	mov	_var01, arg01
05868                 | ' 
05868                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
05868     05 00 00 FF 
0586c     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
05870     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
05874     0F 23 02 F6 | 	mov	_var03, _var01
05878     8B FB 05 F1 | 	add	objptr, #395
0587c     FD 22 02 F1 | 	add	_var03, objptr
05880     11 25 C2 FA | 	rdbyte	_var04, _var03
05884     02 24 66 F0 | 	shl	_var04, #2
05888     10 25 02 F1 | 	add	_var04, _var02
0588c     12 27 02 FB | 	rdlong	_var05, _var04
05890                 | '   depth    := cmd7_memoryY[channel]
05890     0F 29 02 F6 | 	mov	_var06, _var01
05894     49 FA 05 F1 | 	add	objptr, #73
05898     FD 28 02 F1 | 	add	_var06, objptr
0589c     14 2B C2 FA | 	rdbyte	_var07, _var06
058a0                 | '   speed    := cmd7_memoryX[channel]
058a0     0F 29 02 F6 | 	mov	_var06, _var01
058a4     04 FA 05 F1 | 	add	objptr, #4
058a8     FD 28 02 F1 | 	add	_var06, objptr
058ac     14 2D C2 FA | 	rdbyte	_var08, _var06
058b0                 | ' 
058b0                 | '   CASE_FAST vibratoType[channel]
058b0     0F 23 02 F6 | 	mov	_var03, _var01
058b4     18 FA 85 F1 | 	sub	objptr, #24
058b8     FD 2E 02 F6 | 	mov	_var09, objptr
058bc     FD 22 02 F1 | 	add	_var03, objptr
058c0     11 29 C2 FA | 	rdbyte	_var06, _var03
058c4     03 28 26 F3 | 	fle	_var06, #3
058c8     14 31 02 F6 | 	mov	_var10, _var06
058cc     05 00 00 FF 
058d0     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
058d4     C0 FB 85 F1 | 	sub	objptr, #448
058d8     30 30 62 FD | 	jmprel	_var10
058dc                 | LR__0224
058dc     0C 00 90 FD | 	jmp	#LR__0225
058e0     30 00 90 FD | 	jmp	#LR__0226
058e4     6C 00 90 FD | 	jmp	#LR__0227
058e8     B4 00 90 FD | 	jmp	#LR__0228
058ec                 | LR__0225
058ec                 | ' 
058ec                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
058ec     13 2B 02 FD | 	qmul	_var07, _var05
058f0     18 24 62 FD | 	getqx	_var04
058f4     06 24 C6 F0 | 	sar	_var04, #6
058f8     0F 33 02 F6 | 	mov	_var11, _var01
058fc     02 32 66 F0 | 	shl	_var11, #2
05900     0F FB 05 F1 | 	add	objptr, #271
05904     FD 32 02 F1 | 	add	_var11, objptr
05908     19 25 62 FC | 	wrlong	_var04, _var11
0590c     0F FB 85 F1 | 	sub	objptr, #271
05910     8C 00 90 FD | 	jmp	#LR__0228
05914                 | LR__0226
05914                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
05914     0F 33 02 F6 | 	mov	_var11, _var01
05918     8B FB 05 F1 | 	add	objptr, #395
0591c     FD 32 02 F1 | 	add	_var11, objptr
05920     19 21 C2 FA | 	rdbyte	_var02, _var11
05924     03 20 66 F0 | 	shl	_var02, #3
05928     10 2B 02 FD | 	qmul	_var07, _var02
0592c     18 24 62 FD | 	getqx	_var04
05930     00 25 86 F1 | 	sub	_var04, #256
05934     06 24 C6 F0 | 	sar	_var04, #6
05938     0F 35 02 F6 | 	mov	_var12, _var01
0593c     02 34 66 F0 | 	shl	_var12, #2
05940     7C FA 85 F1 | 	sub	objptr, #124
05944     FD 34 02 F1 | 	add	_var12, objptr
05948     1A 25 62 FC | 	wrlong	_var04, _var12
0594c     0F FB 85 F1 | 	sub	objptr, #271
05950     4C 00 90 FD | 	jmp	#LR__0228
05954                 | LR__0227
05954                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
05954     0F 33 02 F6 | 	mov	_var11, _var01
05958     8B FB 05 F1 | 	add	objptr, #395
0595c     FD 36 02 F6 | 	mov	_var13, objptr
05960     FD 32 02 F1 | 	add	_var11, objptr
05964     19 21 C2 FA | 	rdbyte	_var02, _var11
05968     20 20 06 F5 | 	and	_var02, #32
0596c     04 20 66 F0 | 	shl	_var02, #4
05970     10 2B 02 FD | 	qmul	_var07, _var02
05974     18 38 62 FD | 	getqx	_var14
05978     1C 25 02 F6 | 	mov	_var04, _var14
0597c     00 25 86 F1 | 	sub	_var04, #256
05980     06 24 C6 F0 | 	sar	_var04, #6
05984     0F 35 02 F6 | 	mov	_var12, _var01
05988     02 34 66 F0 | 	shl	_var12, #2
0598c     7C FA 85 F1 | 	sub	objptr, #124
05990     FD 3A 02 F6 | 	mov	_var15, objptr
05994     FD 34 02 F1 | 	add	_var12, objptr
05998     1A 25 62 FC | 	wrlong	_var04, _var12
0599c     0F FB 85 F1 | 	sub	objptr, #271
059a0                 | LR__0228
059a0                 | ' 
059a0                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
059a0     0F 23 02 F6 | 	mov	_var03, _var01
059a4     8B FB 05 F1 | 	add	objptr, #395
059a8     FD 22 02 F1 | 	add	_var03, objptr
059ac     11 29 C2 FA | 	rdbyte	_var06, _var03
059b0     16 29 02 F1 | 	add	_var06, _var08
059b4     3F 28 06 F5 | 	and	_var06, #63
059b8     FD 1E 02 F1 | 	add	_var01, objptr
059bc     0F 29 42 FC | 	wrbyte	_var06, _var01
059c0     8B FB 85 F1 | 	sub	objptr, #395
059c4                 | _trackerplayer_spin2_doTremolo_ret
059c4     2D 00 64 FD | 	ret
059c8                 | 
059c8                 | ' 
059c8                 | ' 
059c8                 | ' PRI doVibrato(channel) | depth, sineWave, speed
059c8                 | _trackerplayer_spin2_doVibrato
059c8     2F 1F 02 F6 | 	mov	_var01, arg01
059cc                 | ' 
059cc                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
059cc     05 00 00 FF 
059d0     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
059d4     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
059d8     0F 23 02 F6 | 	mov	_var03, _var01
059dc     87 FB 05 F1 | 	add	objptr, #391
059e0     FD 22 02 F1 | 	add	_var03, objptr
059e4     11 25 C2 FA | 	rdbyte	_var04, _var03
059e8     02 24 66 F0 | 	shl	_var04, #2
059ec     10 25 02 F1 | 	add	_var04, _var02
059f0     12 27 02 FB | 	rdlong	_var05, _var04
059f4                 | '   depth    := cmd4_memoryY[channel]
059f4     0F 29 02 F6 | 	mov	_var06, _var01
059f8     45 FA 05 F1 | 	add	objptr, #69
059fc     FD 28 02 F1 | 	add	_var06, objptr
05a00     14 2B C2 FA | 	rdbyte	_var07, _var06
05a04                 | '   speed    := cmd4_memoryX[channel]
05a04     0F 29 02 F6 | 	mov	_var06, _var01
05a08     04 FA 05 F1 | 	add	objptr, #4
05a0c     FD 28 02 F1 | 	add	_var06, objptr
05a10     14 2D C2 FA | 	rdbyte	_var08, _var06
05a14                 | ' 
05a14                 | '   CASE_FAST vibratoType[channel]
05a14     0F 23 02 F6 | 	mov	_var03, _var01
05a18     10 FA 85 F1 | 	sub	objptr, #16
05a1c     FD 2E 02 F6 | 	mov	_var09, objptr
05a20     FD 22 02 F1 | 	add	_var03, objptr
05a24     11 29 C2 FA | 	rdbyte	_var06, _var03
05a28     03 28 26 F3 | 	fle	_var06, #3
05a2c     14 31 02 F6 | 	mov	_var10, _var06
05a30     05 00 00 FF 
05a34     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
05a38     C0 FB 85 F1 | 	sub	objptr, #448
05a3c     30 30 62 FD | 	jmprel	_var10
05a40                 | LR__0229
05a40     0C 00 90 FD | 	jmp	#LR__0230
05a44     30 00 90 FD | 	jmp	#LR__0231
05a48     6C 00 90 FD | 	jmp	#LR__0232
05a4c     B4 00 90 FD | 	jmp	#LR__0233
05a50                 | LR__0230
05a50                 | ' 
05a50                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
05a50     13 2B 02 FD | 	qmul	_var07, _var05
05a54     18 24 62 FD | 	getqx	_var04
05a58     07 24 C6 F0 | 	sar	_var04, #7
05a5c     0F 33 02 F6 | 	mov	_var11, _var01
05a60     02 32 66 F0 | 	shl	_var11, #2
05a64     EF FA 05 F1 | 	add	objptr, #239
05a68     FD 32 02 F1 | 	add	_var11, objptr
05a6c     19 25 62 FC | 	wrlong	_var04, _var11
05a70     EF FA 85 F1 | 	sub	objptr, #239
05a74     8C 00 90 FD | 	jmp	#LR__0233
05a78                 | LR__0231
05a78                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
05a78     0F 33 02 F6 | 	mov	_var11, _var01
05a7c     87 FB 05 F1 | 	add	objptr, #391
05a80     FD 32 02 F1 | 	add	_var11, objptr
05a84     19 21 C2 FA | 	rdbyte	_var02, _var11
05a88     03 20 66 F0 | 	shl	_var02, #3
05a8c     10 2B 02 FD | 	qmul	_var07, _var02
05a90     18 24 62 FD | 	getqx	_var04
05a94     00 25 86 F1 | 	sub	_var04, #256
05a98     07 24 C6 F0 | 	sar	_var04, #7
05a9c     0F 35 02 F6 | 	mov	_var12, _var01
05aa0     02 34 66 F0 | 	shl	_var12, #2
05aa4     98 FA 85 F1 | 	sub	objptr, #152
05aa8     FD 34 02 F1 | 	add	_var12, objptr
05aac     1A 25 62 FC | 	wrlong	_var04, _var12
05ab0     EF FA 85 F1 | 	sub	objptr, #239
05ab4     4C 00 90 FD | 	jmp	#LR__0233
05ab8                 | LR__0232
05ab8                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
05ab8     0F 33 02 F6 | 	mov	_var11, _var01
05abc     87 FB 05 F1 | 	add	objptr, #391
05ac0     FD 36 02 F6 | 	mov	_var13, objptr
05ac4     FD 32 02 F1 | 	add	_var11, objptr
05ac8     19 21 C2 FA | 	rdbyte	_var02, _var11
05acc     20 20 06 F5 | 	and	_var02, #32
05ad0     04 20 66 F0 | 	shl	_var02, #4
05ad4     10 2B 02 FD | 	qmul	_var07, _var02
05ad8     18 38 62 FD | 	getqx	_var14
05adc     1C 25 02 F6 | 	mov	_var04, _var14
05ae0     00 25 86 F1 | 	sub	_var04, #256
05ae4     07 24 C6 F0 | 	sar	_var04, #7
05ae8     0F 35 02 F6 | 	mov	_var12, _var01
05aec     02 34 66 F0 | 	shl	_var12, #2
05af0     98 FA 85 F1 | 	sub	objptr, #152
05af4     FD 3A 02 F6 | 	mov	_var15, objptr
05af8     FD 34 02 F1 | 	add	_var12, objptr
05afc     1A 25 62 FC | 	wrlong	_var04, _var12
05b00     EF FA 85 F1 | 	sub	objptr, #239
05b04                 | LR__0233
05b04                 | ' 
05b04                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
05b04     0F 23 02 F6 | 	mov	_var03, _var01
05b08     87 FB 05 F1 | 	add	objptr, #391
05b0c     FD 22 02 F1 | 	add	_var03, objptr
05b10     11 29 C2 FA | 	rdbyte	_var06, _var03
05b14     16 29 02 F1 | 	add	_var06, _var08
05b18     3F 28 06 F5 | 	and	_var06, #63
05b1c     FD 1E 02 F1 | 	add	_var01, objptr
05b20     0F 29 42 FC | 	wrbyte	_var06, _var01
05b24     87 FB 85 F1 | 	sub	objptr, #391
05b28                 | _trackerplayer_spin2_doVibrato_ret
05b28     2D 00 64 FD | 	ret
05b2c                 | 
05b2c                 | ' 
05b2c                 | ' 
05b2c                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
05b2c                 | _trackerplayer_spin2_doPortamento
05b2c                 | ' 
05b2c                 | '   if period == currPeriod[channel]
05b2c     2F 1F 02 F6 | 	mov	_var01, arg01
05b30     02 1E 66 F0 | 	shl	_var01, #2
05b34     DF FA 05 F1 | 	add	objptr, #223
05b38     FD 20 02 F6 | 	mov	_var02, objptr
05b3c     FD 1E 02 F1 | 	add	_var01, objptr
05b40     0F 23 02 FB | 	rdlong	_var03, _var01
05b44     11 61 0A F2 | 	cmp	arg02, _var03 wz
05b48                 | '     return
05b48     DF FA 85 F1 | 	sub	objptr, #223
05b4c     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
05b50                 | ' 
05b50                 | '   if period > 0
05b50     00 60 5E F2 | 	cmps	arg02, #0 wcz
05b54     1C 00 90 ED |  if_be	jmp	#LR__0234
05b58                 | '     portamentoPeriodMemory[channel] := period
05b58     2F 1F 02 F6 | 	mov	_var01, arg01
05b5c     02 1E 66 F0 | 	shl	_var01, #2
05b60     97 FB 05 F1 | 	add	objptr, #407
05b64     FD 1E 02 F1 | 	add	_var01, objptr
05b68     0F 61 62 FC | 	wrlong	arg02, _var01
05b6c                 | '   else
05b6c     97 FB 85 F1 | 	sub	objptr, #407
05b70     18 00 90 FD | 	jmp	#LR__0235
05b74                 | LR__0234
05b74                 | '     period := portamentoPeriodMemory[channel]
05b74     2F 1F 02 F6 | 	mov	_var01, arg01
05b78     02 1E 66 F0 | 	shl	_var01, #2
05b7c     97 FB 05 F1 | 	add	objptr, #407
05b80     FD 1E 02 F1 | 	add	_var01, objptr
05b84     0F 61 02 FB | 	rdlong	arg02, _var01
05b88     97 FB 85 F1 | 	sub	objptr, #407
05b8c                 | LR__0235
05b8c                 | ' 
05b8c                 | '   if period > currPeriod[channel]
05b8c     2F 1F 02 F6 | 	mov	_var01, arg01
05b90     02 1E 66 F0 | 	shl	_var01, #2
05b94     DF FA 05 F1 | 	add	objptr, #223
05b98     FD 1E 02 F1 | 	add	_var01, objptr
05b9c     0F 23 02 FB | 	rdlong	_var03, _var01
05ba0     11 61 5A F2 | 	cmps	arg02, _var03 wcz
05ba4     DF FA 85 F1 | 	sub	objptr, #223
05ba8     68 00 90 ED |  if_be	jmp	#LR__0236
05bac                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
05bac     2F 21 02 F6 | 	mov	_var02, arg01
05bb0     02 20 66 F0 | 	shl	_var02, #2
05bb4     DF FA 05 F1 | 	add	objptr, #223
05bb8     FD 20 02 F1 | 	add	_var02, objptr
05bbc     2F 25 02 F6 | 	mov	_var04, arg01
05bc0     E9 FA 05 F1 | 	add	objptr, #233
05bc4     10 1F 02 FB | 	rdlong	_var01, _var02
05bc8     FD 24 02 F1 | 	add	_var04, objptr
05bcc     12 27 C2 FA | 	rdbyte	_var05, _var04
05bd0     13 1F 02 F1 | 	add	_var01, _var05
05bd4     2F 29 02 F6 | 	mov	_var06, arg01
05bd8     02 28 66 F0 | 	shl	_var06, #2
05bdc     E9 FA 85 F1 | 	sub	objptr, #233
05be0     FD 28 02 F1 | 	add	_var06, objptr
05be4     14 1F 62 FC | 	wrlong	_var01, _var06
05be8                 | '     currPeriod[channel] <#= period
05be8     2F 21 02 F6 | 	mov	_var02, arg01
05bec     02 20 66 F0 | 	shl	_var02, #2
05bf0     FD 20 02 F1 | 	add	_var02, objptr
05bf4     10 1F 02 FB | 	rdlong	_var01, _var02
05bf8     30 1F 62 F3 | 	fles	_var01, arg02
05bfc     2F 25 02 F6 | 	mov	_var04, arg01
05c00     02 24 66 F0 | 	shl	_var04, #2
05c04     FD 24 02 F1 | 	add	_var04, objptr
05c08     12 1F 62 FC | 	wrlong	_var01, _var04
05c0c     DF FA 85 F1 | 	sub	objptr, #223
05c10     84 00 90 FD | 	jmp	#LR__0238
05c14                 | LR__0236
05c14                 | ' 
05c14                 | '   elseif period < currPeriod[channel]
05c14     2F 1F 02 F6 | 	mov	_var01, arg01
05c18     02 1E 66 F0 | 	shl	_var01, #2
05c1c     DF FA 05 F1 | 	add	objptr, #223
05c20     FD 1E 02 F1 | 	add	_var01, objptr
05c24     0F 23 02 FB | 	rdlong	_var03, _var01
05c28     11 61 5A F2 | 	cmps	arg02, _var03 wcz
05c2c     DF FA 85 F1 | 	sub	objptr, #223
05c30     64 00 90 3D |  if_ae	jmp	#LR__0237
05c34                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
05c34     2F 21 02 F6 | 	mov	_var02, arg01
05c38     02 20 66 F0 | 	shl	_var02, #2
05c3c     DF FA 05 F1 | 	add	objptr, #223
05c40     FD 20 02 F1 | 	add	_var02, objptr
05c44     2F 25 02 F6 | 	mov	_var04, arg01
05c48     E9 FA 05 F1 | 	add	objptr, #233
05c4c     10 1F 02 FB | 	rdlong	_var01, _var02
05c50     FD 24 02 F1 | 	add	_var04, objptr
05c54     12 27 C2 FA | 	rdbyte	_var05, _var04
05c58     13 1F 82 F1 | 	sub	_var01, _var05
05c5c     2F 29 02 F6 | 	mov	_var06, arg01
05c60     02 28 66 F0 | 	shl	_var06, #2
05c64     E9 FA 85 F1 | 	sub	objptr, #233
05c68     FD 28 02 F1 | 	add	_var06, objptr
05c6c     14 1F 62 FC | 	wrlong	_var01, _var06
05c70                 | '     currPeriod[channel] #>= period
05c70     2F 21 02 F6 | 	mov	_var02, arg01
05c74     02 20 66 F0 | 	shl	_var02, #2
05c78     FD 20 02 F1 | 	add	_var02, objptr
05c7c     10 1F 02 FB | 	rdlong	_var01, _var02
05c80     30 1F 42 F3 | 	fges	_var01, arg02
05c84     2F 25 02 F6 | 	mov	_var04, arg01
05c88     02 24 66 F0 | 	shl	_var04, #2
05c8c     FD 24 02 F1 | 	add	_var04, objptr
05c90     12 1F 62 FC | 	wrlong	_var01, _var04
05c94     DF FA 85 F1 | 	sub	objptr, #223
05c98                 | LR__0237
05c98                 | LR__0238
05c98                 | ' 
05c98                 | '   ' Handle glissando if activated
05c98                 | '   if portaGlissando[channel] > 0
05c98     2F 1F 02 F6 | 	mov	_var01, arg01
05c9c     BC FB 05 F1 | 	add	objptr, #444
05ca0     FD 1E 02 F1 | 	add	_var01, objptr
05ca4     0F 23 C2 FA | 	rdbyte	_var03, _var01
05ca8     00 22 5E F2 | 	cmps	_var03, #0 wcz
05cac     BC FB 85 F1 | 	sub	objptr, #444
05cb0     A0 00 90 ED |  if_be	jmp	#LR__0241
05cb4                 | ' 
05cb4                 | '     tempPeriod := currPeriod[channel]
05cb4     2F 1F 02 F6 | 	mov	_var01, arg01
05cb8     02 1E 66 F0 | 	shl	_var01, #2
05cbc     DF FA 05 F1 | 	add	objptr, #223
05cc0     FD 1E 02 F1 | 	add	_var01, objptr
05cc4     0F 2B 02 FB | 	rdlong	_var07, _var01
05cc8                 | ' 
05cc8                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
05cc8     00 2C 06 F6 | 	mov	_var08, #0
05ccc     DF FA 85 F1 | 	sub	objptr, #223
05cd0     90 A3 9F FE | 	loc	pa,	#(@LR__0240-@LR__0239)
05cd4     93 00 A0 FD | 	call	#FCACHE_LOAD_
05cd8                 | LR__0239
05cd8                 | ' 
05cd8                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
05cd8     06 00 00 FF 
05cdc     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05ce0     0A 2F 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
05ce4     2F 23 02 F6 | 	mov	_var03, arg01
05ce8     D3 FA 05 F1 | 	add	objptr, #211
05cec     FD 22 02 F1 | 	add	_var03, objptr
05cf0     11 27 C2 FA | 	rdbyte	_var05, _var03
05cf4     13 31 02 F6 | 	mov	_var10, _var05
05cf8     03 30 66 F0 | 	shl	_var10, #3
05cfc     13 31 02 F1 | 	add	_var10, _var05
05d00     03 30 66 F0 | 	shl	_var10, #3
05d04     18 2F 02 F1 | 	add	_var09, _var10
05d08     16 33 02 F6 | 	mov	_var11, _var08
05d0c     01 32 66 F0 | 	shl	_var11, #1
05d10     17 33 02 F1 | 	add	_var11, _var09
05d14     19 35 E2 FA | 	rdword	_var12, _var11
05d18                 | '       if tempPeriod >= periodStep
05d18     1A 2B 5A F2 | 	cmps	_var07, _var12 wcz
05d1c                 | '         i += 1000
05d1c     06 00 00 FF 
05d20     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05d24     D3 FA 85 F1 | 	sub	objptr, #211
05d28     01 00 00 3F 
05d2c     E8 2D 06 31 |  if_ae	add	_var08, ##1000
05d30     01 2C 06 F1 | 	add	_var08, #1
05d34     24 2C 5E F2 | 	cmps	_var08, #36 wcz
05d38     9C FF 9F CD |  if_b	jmp	#LR__0239
05d3c                 | LR__0240
05d3c                 | ' 
05d3c                 | '     deltaPeriod[channel] := periodStep - tempPeriod
05d3c     15 35 82 F1 | 	sub	_var12, _var07
05d40     02 5E 66 F0 | 	shl	arg01, #2
05d44     EF FA 05 F1 | 	add	objptr, #239
05d48     FD 5E 02 F1 | 	add	arg01, objptr
05d4c     2F 35 62 FC | 	wrlong	_var12, arg01
05d50     EF FA 85 F1 | 	sub	objptr, #239
05d54                 | LR__0241
05d54                 | _trackerplayer_spin2_doPortamento_ret
05d54     2D 00 64 FD | 	ret
05d58                 | 
05d58                 | ' 
05d58                 | ' 
05d58                 | ' PRI doVolumeSlide(channel)
05d58                 | _trackerplayer_spin2_doVolumeSlide
05d58                 | ' 
05d58                 | '   if x > 0
05d58     B7 FB 05 F1 | 	add	objptr, #439
05d5c     FD 1E C2 FA | 	rdbyte	_var01, objptr
05d60     B7 FB 85 F1 | 	sub	objptr, #439
05d64     00 1E 5E F2 | 	cmps	_var01, #0 wcz
05d68     38 00 90 ED |  if_be	jmp	#LR__0242
05d6c                 | '     currVolume[channel] += x
05d6c     2F 21 02 F6 | 	mov	_var02, arg01
05d70     02 20 66 F0 | 	shl	_var02, #2
05d74     FF FA 05 F1 | 	add	objptr, #255
05d78     FD 20 02 F1 | 	add	_var02, objptr
05d7c     10 1F 02 FB | 	rdlong	_var01, _var02
05d80     B8 FA 05 F1 | 	add	objptr, #184
05d84     FD 22 C2 FA | 	rdbyte	_var03, objptr
05d88     11 1F 02 F1 | 	add	_var01, _var03
05d8c     2F 25 02 F6 | 	mov	_var04, arg01
05d90     02 24 66 F0 | 	shl	_var04, #2
05d94     B8 FA 85 F1 | 	sub	objptr, #184
05d98     FD 24 02 F1 | 	add	_var04, objptr
05d9c     12 1F 62 FC | 	wrlong	_var01, _var04
05da0     FF FA 85 F1 | 	sub	objptr, #255
05da4                 | LR__0242
05da4                 | '   if y > 0
05da4     B8 FB 05 F1 | 	add	objptr, #440
05da8     FD 1E C2 FA | 	rdbyte	_var01, objptr
05dac     B8 FB 85 F1 | 	sub	objptr, #440
05db0     00 1E 5E F2 | 	cmps	_var01, #0 wcz
05db4     34 00 90 ED |  if_be	jmp	#LR__0243
05db8                 | '     currVolume[channel] -= y
05db8     2F 21 02 F6 | 	mov	_var02, arg01
05dbc     02 20 66 F0 | 	shl	_var02, #2
05dc0     FF FA 05 F1 | 	add	objptr, #255
05dc4     FD 20 02 F1 | 	add	_var02, objptr
05dc8     10 1F 02 FB | 	rdlong	_var01, _var02
05dcc     B9 FA 05 F1 | 	add	objptr, #185
05dd0     FD 22 C2 FA | 	rdbyte	_var03, objptr
05dd4     11 1F 82 F1 | 	sub	_var01, _var03
05dd8     02 5E 66 F0 | 	shl	arg01, #2
05ddc     B9 FA 85 F1 | 	sub	objptr, #185
05de0     FD 5E 02 F1 | 	add	arg01, objptr
05de4     2F 1F 62 FC | 	wrlong	_var01, arg01
05de8     FF FA 85 F1 | 	sub	objptr, #255
05dec                 | LR__0243
05dec                 | _trackerplayer_spin2_doVolumeSlide_ret
05dec     2D 00 64 FD | 	ret
05df0                 | 
05df0                 | ' 
05df0                 | ' 
05df0                 | ' '--------------------------------------------------------------
05df0                 | ' '---------- Init the variables, start the cog. ----------------
05df0                 | ' '--------------------------------------------------------------
05df0                 | ' 
05df0                 | ' pub start() :cog,base | iii
05df0                 | _audio019_spin2_start
05df0     07 5A 05 F6 | 	mov	COUNT_, #7
05df4     B0 00 A0 FD | 	call	#pushregs_
05df8                 | ' 
05df8                 | ' base:=@channel1[0]
05df8     FD 6C 02 F6 | 	mov	local01, objptr
05dfc                 | ' 
05dfc                 | ' repeat iii from 0 to 7
05dfc     00 6E 06 F6 | 	mov	local02, #0
05e00     08 A3 9F FE | 	loc	pa,	#(@LR__0245-@LR__0244)
05e04     93 00 A0 FD | 	call	#FCACHE_LOAD_
05e08                 | LR__0244
05e08                 | '   long [base+32*iii]:=0
05e08     36 71 02 F6 | 	mov	local03, local01
05e0c     37 73 02 F6 | 	mov	local04, local02
05e10     05 72 66 F0 | 	shl	local04, #5
05e14     39 71 02 F1 | 	add	local03, local04
05e18     38 01 68 FC | 	wrlong	#0, local03
05e1c                 | '   long [base+32*iii+4]:=0
05e1c     36 71 02 F6 | 	mov	local03, local01
05e20     37 73 02 F6 | 	mov	local04, local02
05e24     05 72 66 F0 | 	shl	local04, #5
05e28     39 71 02 F1 | 	add	local03, local04
05e2c     04 70 06 F1 | 	add	local03, #4
05e30     38 01 68 FC | 	wrlong	#0, local03
05e34                 | '   long[base+32*iii+12]:=0
05e34     36 71 02 F6 | 	mov	local03, local01
05e38     37 73 02 F6 | 	mov	local04, local02
05e3c     05 72 66 F0 | 	shl	local04, #5
05e40     39 71 02 F1 | 	add	local03, local04
05e44     0C 70 06 F1 | 	add	local03, #12
05e48     38 01 68 FC | 	wrlong	#0, local03
05e4c                 | '   long[base+32*iii+16]:=2 
05e4c     36 71 02 F6 | 	mov	local03, local01
05e50     37 73 02 F6 | 	mov	local04, local02
05e54     05 72 66 F0 | 	shl	local04, #5
05e58     39 71 02 F1 | 	add	local03, local04
05e5c     10 70 06 F1 | 	add	local03, #16
05e60     38 05 68 FC | 	wrlong	#2, local03
05e64                 | '   word[base+32*iii+20]:=0
05e64     36 71 02 F6 | 	mov	local03, local01
05e68     37 73 02 F6 | 	mov	local04, local02
05e6c     05 72 66 F0 | 	shl	local04, #5
05e70     39 71 02 F1 | 	add	local03, local04
05e74     14 70 06 F1 | 	add	local03, #20
05e78     38 01 58 FC | 	wrword	#0, local03
05e7c                 | '   word[base+32*iii+22]:=8192
05e7c     36 71 02 F6 | 	mov	local03, local01
05e80     37 73 02 F6 | 	mov	local04, local02
05e84     05 72 66 F0 | 	shl	local04, #5
05e88     39 71 02 F1 | 	add	local03, local04
05e8c     16 70 06 F1 | 	add	local03, #22
05e90     10 00 80 FF 
05e94     38 01 58 FC | 	wrword	##8192, local03
05e98                 | '   word[base+32*iii+24]:=100+2*iii
05e98     37 73 02 F6 | 	mov	local04, local02
05e9c     01 72 66 F0 | 	shl	local04, #1
05ea0     64 70 06 F6 | 	mov	local03, #100
05ea4     39 71 02 F1 | 	add	local03, local04
05ea8     36 75 02 F6 | 	mov	local05, local01
05eac     37 77 02 F6 | 	mov	local06, local02
05eb0     05 76 66 F0 | 	shl	local06, #5
05eb4     3B 75 02 F1 | 	add	local05, local06
05eb8     18 74 06 F1 | 	add	local05, #24
05ebc     3A 71 52 FC | 	wrword	local03, local05
05ec0                 | '   word[base+32*iii+26]:=2
05ec0     36 71 02 F6 | 	mov	local03, local01
05ec4     37 73 02 F6 | 	mov	local04, local02
05ec8     05 72 66 F0 | 	shl	local04, #5
05ecc     39 71 02 F1 | 	add	local03, local04
05ed0     1A 70 06 F1 | 	add	local03, #26
05ed4     38 05 58 FC | 	wrword	#2, local03
05ed8                 | '   long [base+32*iii+8]:=@null | $C0000000
05ed8     01 00 00 FF 
05edc     F8 02 06 F1 | 	add	ptr__audio019_spin2_dat__, ##760
05ee0     01 71 02 F6 | 	mov	local03, ptr__audio019_spin2_dat__
05ee4     3E 70 26 F4 | 	bith	local03, #62
05ee8     36 75 02 F6 | 	mov	local05, local01
05eec     37 77 02 F6 | 	mov	local06, local02
05ef0     05 76 66 F0 | 	shl	local06, #5
05ef4     3B 75 02 F1 | 	add	local05, local06
05ef8     08 74 06 F1 | 	add	local05, #8
05efc     3A 71 62 FC | 	wrlong	local03, local05
05f00     01 6E 06 F1 | 	add	local02, #1
05f04     08 6E 5E F2 | 	cmps	local02, #8 wcz
05f08     01 00 00 FF 
05f0c     F8 02 86 F1 | 	sub	ptr__audio019_spin2_dat__, ##760
05f10     F4 FE 9F CD |  if_b	jmp	#LR__0244
05f14                 | LR__0245
05f14                 | '   
05f14                 | ' cog:=coginit(16,@audio,@channel1)
05f14     01 61 02 F6 | 	mov	arg02, ptr__audio019_spin2_dat__
05f18     FD 62 02 F6 | 	mov	arg03, objptr
05f1c     10 5E 06 F6 | 	mov	arg01, #16
05f20     28 62 62 FD | 	setq	arg03
05f24     30 5F F2 FC | 	coginit	arg01, arg02 wc
05f28     01 5E 66 C6 |  if_b	neg	arg01, #1
05f2c     2F 19 02 F6 | 	mov	result1, arg01
05f30     0C 79 02 F6 | 	mov	local07, result1
05f34                 | ' waitms(100)
05f34     64 5E 06 F6 | 	mov	arg01, #100
05f38     CC 04 B0 FD | 	call	#__system___waitms
05f3c                 | ' return cog,base
05f3c     36 1B 02 F6 | 	mov	result2, local01
05f40     3C 19 02 F6 | 	mov	result1, local07
05f44     AF F0 03 F6 | 	mov	ptra, fp
05f48     BA 00 A0 FD | 	call	#popregs_
05f4c                 | _audio019_spin2_start_ret
05f4c     2D 00 64 FD | 	ret
05f50                 | hubexit
05f50     81 00 80 FD | 	jmp	#cogexit
05f54                 | 
05f54                 | __system___setbaud
05f54     14 98 06 FB | 	rdlong	muldiva_, #20
05f58     2F 9B 02 F6 | 	mov	muldivb_, arg01
05f5c     C6 00 A0 FD | 	call	#divide_
05f60     40 7C 64 FD | 	dirl	#62
05f64     40 7E 64 FD | 	dirl	#63
05f68     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
05f6c     10 9A 66 F0 | 	shl	muldivb_, #16
05f70     07 60 06 F6 | 	mov	arg02, #7
05f74     4D 61 02 F1 | 	add	arg02, muldivb_
05f78     3E F8 0C FC | 	wrpin	#124, #62
05f7c     3E 60 16 FC | 	wxpin	arg02, #62
05f80     3F 7C 0C FC | 	wrpin	#62, #63
05f84     14 60 06 F1 | 	add	arg02, #20
05f88     3F 60 16 FC | 	wxpin	arg02, #63
05f8c     41 7C 64 FD | 	dirh	#62
05f90     41 7E 64 FD | 	dirh	#63
05f94                 | __system___setbaud_ret
05f94     2D 00 64 FD | 	ret
05f98                 | 
05f98                 | __system___txraw
05f98     02 5A 05 F6 | 	mov	COUNT_, #2
05f9c     B0 00 A0 FD | 	call	#pushregs_
05fa0     2F 6D 02 F6 | 	mov	local01, arg01
05fa4     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05fa8     0C 00 90 5D |  if_ne	jmp	#LR__0246
05fac     C2 01 00 FF 
05fb0     00 5E 06 F6 | 	mov	arg01, ##230400
05fb4     9C FF BF FD | 	call	#__system___setbaud
05fb8                 | LR__0246
05fb8     3E 6C 26 FC | 	wypin	local01, #62
05fbc     1F 02 64 FD | 	waitx	#1
05fc0     44 A0 9F FE | 	loc	pa,	#(@LR__0248-@LR__0247)
05fc4     93 00 A0 FD | 	call	#FCACHE_LOAD_
05fc8                 | LR__0247
05fc8     40 7C 74 FD | 	testp	#62 wc
05fcc     F8 FF 9F 3D |  if_nc	jmp	#LR__0247
05fd0                 | LR__0248
05fd0     01 18 06 F6 | 	mov	result1, #1
05fd4     AF F0 03 F6 | 	mov	ptra, fp
05fd8     BA 00 A0 FD | 	call	#popregs_
05fdc                 | __system___txraw_ret
05fdc     2D 00 64 FD | 	ret
05fe0                 | 
05fe0                 | __system___rxraw
05fe0     0B 5A 05 F6 | 	mov	COUNT_, #11
05fe4     B0 00 A0 FD | 	call	#pushregs_
05fe8     2F 6D 02 F6 | 	mov	local01, arg01
05fec     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
05ff0     0C 00 90 5D |  if_ne	jmp	#LR__0249
05ff4     C2 01 00 FF 
05ff8     00 5E 06 F6 | 	mov	arg01, ##230400
05ffc     54 FF BF FD | 	call	#__system___setbaud
06000                 | LR__0249
06000     00 6C 0E F2 | 	cmp	local01, #0 wz
06004     18 00 90 AD |  if_e	jmp	#LR__0250
06008     1A 70 62 FD | 	getct	local03
0600c     14 72 06 FB | 	rdlong	local04, #20
06010     0A 72 46 F0 | 	shr	local04, #10
06014     39 6D 02 FD | 	qmul	local01, local04
06018     18 74 62 FD | 	getqx	local05
0601c     3A 71 02 F1 | 	add	local03, local05
06020                 | LR__0250
06020     01 76 66 F6 | 	neg	local06, #1
06024     00 78 06 F6 | 	mov	local07, #0
06028     04 00 06 F1 | 	add	ptr___system__dat__, #4
0602c     00 7B 02 FB | 	rdlong	local08, ptr___system__dat__
06030     04 00 86 F1 | 	sub	ptr___system__dat__, #4
06034                 | LR__0251
06034     08 7A 16 F4 | 	testb	local08, #8 wc
06038     09 7A 76 F4 | 	testbn	local08, #9 andc
0603c     0A 7A 46 F0 | 	shr	local08, #10
06040     01 78 06 C6 |  if_b	mov	local07, #1
06044     10 00 90 CD |  if_b	jmp	#LR__0252
06048     40 7E 6C FD | 	testp	#63 wz
0604c     01 78 06 A6 |  if_e	mov	local07, #1
06050     3F 7A 8E AA |  if_e	rdpin	local08, #63
06054     04 7A 46 A0 |  if_e	shr	local08, #4
06058                 | LR__0252
06058     00 6E 06 F6 | 	mov	local02, #0
0605c     00 78 0E F2 | 	cmp	local07, #0 wz
06060     01 6E 66 56 |  if_ne	neg	local02, #1
06064     00 7C 06 F6 | 	mov	local09, #0
06068     00 72 06 F6 | 	mov	local04, #0
0606c     00 6C 0E F2 | 	cmp	local01, #0 wz
06070     01 72 66 56 |  if_ne	neg	local04, #1
06074     00 74 06 F6 | 	mov	local05, #0
06078     00 7E 06 F6 | 	mov	local10, #0
0607c     1A 80 62 FD | 	getct	local11
06080     38 81 82 F1 | 	sub	local11, local03
06084     00 80 5E F2 | 	cmps	local11, #0 wcz
06088     01 7E 66 C6 |  if_b	neg	local10, #1
0608c     00 7E 0E F2 | 	cmp	local10, #0 wz
06090     01 74 66 56 |  if_ne	neg	local05, #1
06094     3A 73 CA F7 | 	test	local04, local05 wz
06098     01 7C 66 56 |  if_ne	neg	local09, #1
0609c     3E 6F 4A F5 | 	or	local02, local09 wz
060a0     90 FF 9F AD |  if_e	jmp	#LR__0251
060a4     00 78 0E F2 | 	cmp	local07, #0 wz
060a8     3D 77 02 56 |  if_ne	mov	local06, local08
060ac     FF 76 06 55 |  if_ne	and	local06, #255
060b0     04 00 06 F1 | 	add	ptr___system__dat__, #4
060b4     00 7B 62 FC | 	wrlong	local08, ptr___system__dat__
060b8     04 00 86 F1 | 	sub	ptr___system__dat__, #4
060bc     3B 19 02 F6 | 	mov	result1, local06
060c0     AF F0 03 F6 | 	mov	ptra, fp
060c4     BA 00 A0 FD | 	call	#popregs_
060c8                 | __system___rxraw_ret
060c8     2D 00 64 FD | 	ret
060cc                 | 
060cc                 | __system____builtin_memmove
060cc     2F 1F 02 F6 | 	mov	_var01, arg01
060d0     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
060d4     50 00 90 3D |  if_ae	jmp	#LR__0260
060d8     44 9F 9F FE | 	loc	pa,	#(@LR__0254-@LR__0253)
060dc     93 00 A0 FD | 	call	#FCACHE_LOAD_
060e0                 | LR__0253
060e0     03 62 5E F2 | 	cmps	arg03, #3 wcz
060e4     18 00 90 ED |  if_be	jmp	#LR__0255
060e8     30 21 02 FB | 	rdlong	_var02, arg02
060ec     2F 21 62 FC | 	wrlong	_var02, arg01
060f0     04 5E 06 F1 | 	add	arg01, #4
060f4     04 60 06 F1 | 	add	arg02, #4
060f8     04 62 86 F1 | 	sub	arg03, #4
060fc     E0 FF 9F FD | 	jmp	#LR__0253
06100                 | LR__0254
06100                 | LR__0255
06100     31 23 0A F6 | 	mov	_var03, arg03 wz
06104     4C 00 90 AD |  if_e	jmp	#LR__0266
06108     08 9F 9F FE | 	loc	pa,	#(@LR__0258-@LR__0256)
0610c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06110                 | LR__0256
06110     11 09 D8 FC | 	rep	@LR__0259, _var03
06114                 | LR__0257
06114     30 21 C2 FA | 	rdbyte	_var02, arg02
06118     2F 21 42 FC | 	wrbyte	_var02, arg01
0611c     01 5E 06 F1 | 	add	arg01, #1
06120     01 60 06 F1 | 	add	arg02, #1
06124                 | LR__0258
06124                 | LR__0259
06124     2C 00 90 FD | 	jmp	#LR__0266
06128                 | LR__0260
06128     31 5F 02 F1 | 	add	arg01, arg03
0612c     31 61 02 F1 | 	add	arg02, arg03
06130     31 25 0A F6 | 	mov	_var04, arg03 wz
06134     1C 00 90 AD |  if_e	jmp	#LR__0265
06138     D8 9E 9F FE | 	loc	pa,	#(@LR__0263-@LR__0261)
0613c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06140                 | LR__0261
06140     12 09 D8 FC | 	rep	@LR__0264, _var04
06144                 | LR__0262
06144     01 5E 86 F1 | 	sub	arg01, #1
06148     01 60 86 F1 | 	sub	arg02, #1
0614c     30 21 C2 FA | 	rdbyte	_var02, arg02
06150     2F 21 42 FC | 	wrbyte	_var02, arg01
06154                 | LR__0263
06154                 | LR__0264
06154                 | LR__0265
06154                 | LR__0266
06154     0F 19 02 F6 | 	mov	result1, _var01
06158                 | __system____builtin_memmove_ret
06158     2D 00 64 FD | 	ret
0615c                 | 
0615c                 | __system__longmove
0615c     2F 1F 02 F6 | 	mov	_var01, arg01
06160     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
06164     28 00 90 3D |  if_ae	jmp	#LR__0271
06168     31 21 0A F6 | 	mov	_var02, arg03 wz
0616c     5C 00 90 AD |  if_e	jmp	#LR__0277
06170     A0 9E 9F FE | 	loc	pa,	#(@LR__0269-@LR__0267)
06174     93 00 A0 FD | 	call	#FCACHE_LOAD_
06178                 | LR__0267
06178     10 09 D8 FC | 	rep	@LR__0270, _var02
0617c                 | LR__0268
0617c     30 23 02 FB | 	rdlong	_var03, arg02
06180     2F 23 62 FC | 	wrlong	_var03, arg01
06184     04 5E 06 F1 | 	add	arg01, #4
06188     04 60 06 F1 | 	add	arg02, #4
0618c                 | LR__0269
0618c                 | LR__0270
0618c     3C 00 90 FD | 	jmp	#LR__0277
06190                 | LR__0271
06190     31 25 02 F6 | 	mov	_var04, arg03
06194     02 24 66 F0 | 	shl	_var04, #2
06198     12 5F 02 F1 | 	add	arg01, _var04
0619c     31 25 02 F6 | 	mov	_var04, arg03
061a0     02 24 66 F0 | 	shl	_var04, #2
061a4     12 61 02 F1 | 	add	arg02, _var04
061a8     31 27 0A F6 | 	mov	_var05, arg03 wz
061ac     1C 00 90 AD |  if_e	jmp	#LR__0276
061b0     60 9E 9F FE | 	loc	pa,	#(@LR__0274-@LR__0272)
061b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
061b8                 | LR__0272
061b8     13 09 D8 FC | 	rep	@LR__0275, _var05
061bc                 | LR__0273
061bc     04 5E 86 F1 | 	sub	arg01, #4
061c0     04 60 86 F1 | 	sub	arg02, #4
061c4     30 23 02 FB | 	rdlong	_var03, arg02
061c8     2F 23 62 FC | 	wrlong	_var03, arg01
061cc                 | LR__0274
061cc                 | LR__0275
061cc                 | LR__0276
061cc                 | LR__0277
061cc     0F 19 02 F6 | 	mov	result1, _var01
061d0                 | __system__longmove_ret
061d0     2D 00 64 FD | 	ret
061d4                 | 
061d4                 | __system____topofstack
061d4     00 5A 05 F6 | 	mov	COUNT_, #0
061d8     B0 00 A0 FD | 	call	#pushregs_
061dc     08 F0 07 F1 | 	add	ptra, #8
061e0     04 5E 05 F1 | 	add	fp, #4
061e4     AF 5E 62 FC | 	wrlong	arg01, fp
061e8     AF 18 02 F6 | 	mov	result1, fp
061ec     04 5E 85 F1 | 	sub	fp, #4
061f0     AF F0 03 F6 | 	mov	ptra, fp
061f4     BA 00 A0 FD | 	call	#popregs_
061f8                 | __system____topofstack_ret
061f8     2D 00 64 FD | 	ret
061fc                 | 
061fc                 | __system___make_methodptr
061fc     04 5A 05 F6 | 	mov	COUNT_, #4
06200     B0 00 A0 FD | 	call	#pushregs_
06204     2F 6D 02 F6 | 	mov	local01, arg01
06208     30 6F 02 F6 | 	mov	local02, arg02
0620c     08 5E 06 F6 | 	mov	arg01, #8
06210     84 0D B0 FD | 	call	#__system___gc_alloc_managed
06214     0C 71 0A F6 | 	mov	local03, result1 wz
06218     10 00 90 AD |  if_e	jmp	#LR__0278
0621c     38 6D 62 FC | 	wrlong	local01, local03
06220     38 73 02 F6 | 	mov	local04, local03
06224     04 72 06 F1 | 	add	local04, #4
06228     39 6F 62 FC | 	wrlong	local02, local04
0622c                 | LR__0278
0622c     38 19 02 F6 | 	mov	result1, local03
06230     AF F0 03 F6 | 	mov	ptra, fp
06234     BA 00 A0 FD | 	call	#popregs_
06238                 | __system___make_methodptr_ret
06238     2D 00 64 FD | 	ret
0623c                 | 
0623c                 | __system___lockmem
0623c     02 5A 05 F6 | 	mov	COUNT_, #2
06240     B0 00 A0 FD | 	call	#pushregs_
06244     00 18 06 F6 | 	mov	result1, #0
06248     01 18 62 FD | 	cogid	result1
0624c     0C 6D 02 F6 | 	mov	local01, result1
06250     00 6D 06 F1 | 	add	local01, #256
06254                 | LR__0279
06254     2F 6F 0A FB | 	rdlong	local02, arg01 wz
06258     2F 6D 62 AC |  if_e	wrlong	local01, arg01
0625c     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06260     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06264     36 6F 0A F2 | 	cmp	local02, local01 wz
06268     E8 FF 9F 5D |  if_ne	jmp	#LR__0279
0626c     AF F0 03 F6 | 	mov	ptra, fp
06270     BA 00 A0 FD | 	call	#popregs_
06274                 | __system___lockmem_ret
06274     2D 00 64 FD | 	ret
06278                 | 
06278                 | __system___string_concat
06278     07 5A 05 F6 | 	mov	COUNT_, #7
0627c     B0 00 A0 FD | 	call	#pushregs_
06280     2F 6D 02 F6 | 	mov	local01, arg01
06284     30 6F 02 F6 | 	mov	local02, arg02
06288     36 5F 02 F6 | 	mov	arg01, local01
0628c     00 70 06 F6 | 	mov	local03, #0
06290     7C 9D 9F FE | 	loc	pa,	#(@LR__0281-@LR__0280)
06294     93 00 A0 FD | 	call	#FCACHE_LOAD_
06298                 | LR__0280
06298     2F 73 CA FA | 	rdbyte	local04, arg01 wz
0629c     01 70 06 51 |  if_ne	add	local03, #1
062a0     01 5E 06 51 |  if_ne	add	arg01, #1
062a4     F0 FF 9F 5D |  if_ne	jmp	#LR__0280
062a8                 | LR__0281
062a8     38 75 02 F6 | 	mov	local05, local03
062ac     37 5F 02 F6 | 	mov	arg01, local02
062b0     00 70 06 F6 | 	mov	local03, #0
062b4     58 9D 9F FE | 	loc	pa,	#(@LR__0283-@LR__0282)
062b8     93 00 A0 FD | 	call	#FCACHE_LOAD_
062bc                 | LR__0282
062bc     2F 73 CA FA | 	rdbyte	local04, arg01 wz
062c0     01 70 06 51 |  if_ne	add	local03, #1
062c4     01 5E 06 51 |  if_ne	add	arg01, #1
062c8     F0 FF 9F 5D |  if_ne	jmp	#LR__0282
062cc                 | LR__0283
062cc     38 19 02 F6 | 	mov	result1, local03
062d0     0C 77 02 F6 | 	mov	local06, result1
062d4     3A 5F 02 F6 | 	mov	arg01, local05
062d8     3B 5F 02 F1 | 	add	arg01, local06
062dc     01 5E 06 F1 | 	add	arg01, #1
062e0     B4 0C B0 FD | 	call	#__system___gc_alloc_managed
062e4     0C 79 0A F6 | 	mov	local07, result1 wz
062e8     28 00 90 AD |  if_e	jmp	#LR__0284
062ec     3C 5F 02 F6 | 	mov	arg01, local07
062f0     36 61 02 F6 | 	mov	arg02, local01
062f4     3A 63 02 F6 | 	mov	arg03, local05
062f8     D0 FD BF FD | 	call	#__system____builtin_memmove
062fc     3C 5F 02 F6 | 	mov	arg01, local07
06300     3A 5F 02 F1 | 	add	arg01, local05
06304     01 76 06 F1 | 	add	local06, #1
06308     37 61 02 F6 | 	mov	arg02, local02
0630c     3B 63 02 F6 | 	mov	arg03, local06
06310     B8 FD BF FD | 	call	#__system____builtin_memmove
06314                 | LR__0284
06314     3C 19 02 F6 | 	mov	result1, local07
06318     AF F0 03 F6 | 	mov	ptra, fp
0631c     BA 00 A0 FD | 	call	#popregs_
06320                 | __system___string_concat_ret
06320     2D 00 64 FD | 	ret
06324                 | 
06324                 | __system___tx
06324     03 5A 05 F6 | 	mov	COUNT_, #3
06328     B0 00 A0 FD | 	call	#pushregs_
0632c     2F 6D 02 F6 | 	mov	local01, arg01
06330     0A 6C 0E F2 | 	cmp	local01, #10 wz
06334     20 00 90 5D |  if_ne	jmp	#LR__0285
06338     08 00 06 F1 | 	add	ptr___system__dat__, #8
0633c     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06340     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06344     37 71 02 F6 | 	mov	local03, local02
06348     02 70 0E F5 | 	and	local03, #2 wz
0634c     08 00 90 AD |  if_e	jmp	#LR__0285
06350     0D 5E 06 F6 | 	mov	arg01, #13
06354     40 FC BF FD | 	call	#__system___txraw
06358                 | LR__0285
06358     36 5F 02 F6 | 	mov	arg01, local01
0635c     38 FC BF FD | 	call	#__system___txraw
06360     AF F0 03 F6 | 	mov	ptra, fp
06364     BA 00 A0 FD | 	call	#popregs_
06368                 | __system___tx_ret
06368     2D 00 64 FD | 	ret
0636c                 | 
0636c                 | __system___rx
0636c     02 5A 05 F6 | 	mov	COUNT_, #2
06370     B0 00 A0 FD | 	call	#pushregs_
06374                 | LR__0286
06374     00 5E 06 F6 | 	mov	arg01, #0
06378     64 FC BF FD | 	call	#__system___rxraw
0637c     0C 6D 02 F6 | 	mov	local01, result1
06380     FF FF 7F FF 
06384     FF 6D 0E F2 | 	cmp	local01, ##-1 wz
06388     E8 FF 9F AD |  if_e	jmp	#LR__0286
0638c     0D 6C 0E F2 | 	cmp	local01, #13 wz
06390     14 00 90 5D |  if_ne	jmp	#LR__0287
06394     08 00 06 F1 | 	add	ptr___system__dat__, #8
06398     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
0639c     08 00 86 F1 | 	sub	ptr___system__dat__, #8
063a0     02 6E CE F7 | 	test	local02, #2 wz
063a4     0A 6C 06 56 |  if_ne	mov	local01, #10
063a8                 | LR__0287
063a8     08 00 06 F1 | 	add	ptr___system__dat__, #8
063ac     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
063b0     08 00 86 F1 | 	sub	ptr___system__dat__, #8
063b4     01 6E CE F7 | 	test	local02, #1 wz
063b8     1C 00 90 AD |  if_e	jmp	#LR__0290
063bc     7F 6C 0E F2 | 	cmp	local01, #127 wz
063c0     0C 00 90 5D |  if_ne	jmp	#LR__0288
063c4     08 5E 06 F6 | 	mov	arg01, #8
063c8     58 FF BF FD | 	call	#__system___tx
063cc     08 00 90 FD | 	jmp	#LR__0289
063d0                 | LR__0288
063d0     36 5F 02 F6 | 	mov	arg01, local01
063d4     4C FF BF FD | 	call	#__system___tx
063d8                 | LR__0289
063d8                 | LR__0290
063d8     36 19 02 F6 | 	mov	result1, local01
063dc     AF F0 03 F6 | 	mov	ptra, fp
063e0     BA 00 A0 FD | 	call	#popregs_
063e4                 | __system___rx_ret
063e4     2D 00 64 FD | 	ret
063e8                 | 
063e8                 | __system___pinread
063e8     20 5E CE F7 | 	test	arg01, #32 wz
063ec     FF 1F 02 56 |  if_ne	mov	_var01, inb
063f0     FE 1F 02 A6 |  if_e	mov	_var01, ina
063f4     2F 1F 42 F0 | 	shr	_var01, arg01
063f8     06 5E 46 F0 | 	shr	arg01, #6
063fc     2F 1F 42 F7 | 	zerox	_var01, arg01
06400     0F 19 02 F6 | 	mov	result1, _var01
06404                 | __system___pinread_ret
06404     2D 00 64 FD | 	ret
06408                 | 
06408                 | __system___waitms
06408     03 5A 05 F6 | 	mov	COUNT_, #3
0640c     B0 00 A0 FD | 	call	#pushregs_
06410     2F 6D 02 F6 | 	mov	local01, arg01
06414     14 6E 06 FB | 	rdlong	local02, #20
06418     FC 9B 9F FE | 	loc	pa,	#(@LR__0292-@LR__0291)
0641c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06420                 | LR__0291
06420     01 00 00 FF 
06424     E8 6D 5E F2 | 	cmps	local01, ##1000 wcz
06428     1F 6E 62 1D |  if_a	waitx	local02
0642c     01 00 00 1F 
06430     E8 6D 86 11 |  if_a	sub	local01, ##1000
06434     E8 FF 9F 1D |  if_a	jmp	#LR__0291
06438                 | LR__0292
06438     0C 00 06 F1 | 	add	ptr___system__dat__, #12
0643c     00 71 0A FB | 	rdlong	local03, ptr___system__dat__ wz
06440     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
06444     20 00 90 5D |  if_ne	jmp	#LR__0293
06448     37 99 02 F6 | 	mov	muldiva_, local02
0644c     01 00 00 FF 
06450     E8 9B 06 F6 | 	mov	muldivb_, ##1000
06454     C2 00 A0 FD | 	call	#unsdivide_
06458     4D 71 02 F6 | 	mov	local03, muldivb_
0645c     0C 00 06 F1 | 	add	ptr___system__dat__, #12
06460     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06464     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
06468                 | LR__0293
06468     00 6C 5E F2 | 	cmps	local01, #0 wcz
0646c     38 6D 02 1D |  if_a	qmul	local01, local03
06470     18 5E 62 1D |  if_a	getqx	arg01
06474     1F 5E 62 1D |  if_a	waitx	arg01
06478     AF F0 03 F6 | 	mov	ptra, fp
0647c     BA 00 A0 FD | 	call	#popregs_
06480                 | __system___waitms_ret
06480     2D 00 64 FD | 	ret
06484                 | 
06484                 | __system___waitus
06484     02 5A 05 F6 | 	mov	COUNT_, #2
06488     B0 00 A0 FD | 	call	#pushregs_
0648c     2F 6D 02 F6 | 	mov	local01, arg01
06490     10 00 06 F1 | 	add	ptr___system__dat__, #16
06494     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06498     10 00 86 F1 | 	sub	ptr___system__dat__, #16
0649c     20 00 90 5D |  if_ne	jmp	#LR__0294
064a0     14 98 06 FB | 	rdlong	muldiva_, #20
064a4     A1 07 00 FF 
064a8     40 9A 06 F6 | 	mov	muldivb_, ##1000000
064ac     C2 00 A0 FD | 	call	#unsdivide_
064b0     4D 6F 02 F6 | 	mov	local02, muldivb_
064b4     10 00 06 F1 | 	add	ptr___system__dat__, #16
064b8     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
064bc     10 00 86 F1 | 	sub	ptr___system__dat__, #16
064c0                 | LR__0294
064c0     37 6D 02 FD | 	qmul	local01, local02
064c4     18 5E 62 FD | 	getqx	arg01
064c8     1F 5E 62 FD | 	waitx	arg01
064cc     AF F0 03 F6 | 	mov	ptra, fp
064d0     BA 00 A0 FD | 	call	#popregs_
064d4                 | __system___waitus_ret
064d4     2D 00 64 FD | 	ret
064d8                 | 
064d8                 | __system___basic_open
064d8     06 5A 05 F6 | 	mov	COUNT_, #6
064dc     B0 00 A0 FD | 	call	#pushregs_
064e0     30 6D 02 F6 | 	mov	local01, arg02
064e4     31 6F 02 F6 | 	mov	local02, arg03
064e8     32 71 02 F6 | 	mov	local03, arg04
064ec     9C 12 B0 FD | 	call	#__system____getftab
064f0     0C 73 0A F6 | 	mov	local04, result1 wz
064f4     18 00 90 5D |  if_ne	jmp	#LR__0295
064f8     F9 5E 02 F6 | 	mov	arg01, abortchain
064fc     0C 60 06 F6 | 	mov	arg02, #12
06500     01 62 06 F6 | 	mov	arg03, #1
06504     E6 00 A0 FD | 	call	#__longjmp
06508     01 18 66 F6 | 	neg	result1, #1
0650c     90 00 90 FD | 	jmp	#LR__0300
06510                 | LR__0295
06510     08 72 06 F1 | 	add	local04, #8
06514     39 75 0A FB | 	rdlong	local05, local04 wz
06518     08 72 86 F1 | 	sub	local04, #8
0651c     08 00 90 AD |  if_e	jmp	#LR__0296
06520     39 5F 02 F6 | 	mov	arg01, local04
06524     C0 14 B0 FD | 	call	#__system___closeraw
06528                 | LR__0296
06528     00 6C 0E F2 | 	cmp	local01, #0 wz
0652c     48 00 90 AD |  if_e	jmp	#LR__0298
06530     04 5E 06 F6 | 	mov	arg01, #4
06534     60 0A B0 FD | 	call	#__system___gc_alloc_managed
06538     0C 77 0A F6 | 	mov	local06, result1 wz
0653c     18 00 90 5D |  if_ne	jmp	#LR__0297
06540     F9 5E 02 F6 | 	mov	arg01, abortchain
06544     07 60 06 F6 | 	mov	arg02, #7
06548     01 62 06 F6 | 	mov	arg03, #1
0654c     E6 00 A0 FD | 	call	#__longjmp
06550     01 18 66 F6 | 	neg	result1, #1
06554     48 00 90 FD | 	jmp	#LR__0300
06558                 | LR__0297
06558     3B 6D 62 FC | 	wrlong	local01, local06
0655c     FE 60 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
06560     3B 5F 02 F6 | 	mov	arg01, local06
06564     94 FC BF FD | 	call	#__system___make_methodptr
06568     18 72 06 F1 | 	add	local04, #24
0656c     39 19 62 FC | 	wrlong	result1, local04
06570     18 72 86 F1 | 	sub	local04, #24
06574     0C 00 90 FD | 	jmp	#LR__0299
06578                 | LR__0298
06578     18 72 06 F1 | 	add	local04, #24
0657c     39 6D 62 FC | 	wrlong	local01, local04
06580     18 72 86 F1 | 	sub	local04, #24
06584                 | LR__0299
06584     08 72 06 F1 | 	add	local04, #8
06588     39 0F 68 FC | 	wrlong	#7, local04
0658c     14 72 06 F1 | 	add	local04, #20
06590     39 6F 62 FC | 	wrlong	local02, local04
06594     04 72 06 F1 | 	add	local04, #4
06598     39 71 62 FC | 	wrlong	local03, local04
0659c     00 18 06 F6 | 	mov	result1, #0
065a0                 | LR__0300
065a0     AF F0 03 F6 | 	mov	ptra, fp
065a4     BA 00 A0 FD | 	call	#popregs_
065a8                 | __system___basic_open_ret
065a8     2D 00 64 FD | 	ret
065ac                 | 
065ac                 | __system___basic_print_char
065ac     05 5A 05 F6 | 	mov	COUNT_, #5
065b0     B0 00 A0 FD | 	call	#pushregs_
065b4     30 6D 02 F6 | 	mov	local01, arg02
065b8     98 13 B0 FD | 	call	#__system___gettxfunc
065bc     0C 6F 0A F6 | 	mov	local02, result1 wz
065c0     00 18 06 A6 |  if_e	mov	result1, #0
065c4     24 00 90 AD |  if_e	jmp	#LR__0301
065c8     37 71 02 FB | 	rdlong	local03, local02
065cc     04 6E 06 F1 | 	add	local02, #4
065d0     37 73 02 FB | 	rdlong	local04, local02
065d4     36 5F 02 F6 | 	mov	arg01, local01
065d8     FD 74 02 F6 | 	mov	local05, objptr
065dc     38 FB 01 F6 | 	mov	objptr, local03
065e0     2D 72 62 FD | 	call	local04
065e4     3A FB 01 F6 | 	mov	objptr, local05
065e8     01 18 06 F6 | 	mov	result1, #1
065ec                 | LR__0301
065ec     AF F0 03 F6 | 	mov	ptra, fp
065f0     BA 00 A0 FD | 	call	#popregs_
065f4                 | __system___basic_print_char_ret
065f4     2D 00 64 FD | 	ret
065f8                 | 
065f8                 | __system___basic_print_string
065f8     03 5A 05 F6 | 	mov	COUNT_, #3
065fc     B0 00 A0 FD | 	call	#pushregs_
06600     30 6D 02 F6 | 	mov	local01, arg02
06604     31 6F 02 F6 | 	mov	local02, arg03
06608     48 13 B0 FD | 	call	#__system___gettxfunc
0660c     0C 71 0A F6 | 	mov	local03, result1 wz
06610     00 18 06 A6 |  if_e	mov	result1, #0
06614     1C 00 90 AD |  if_e	jmp	#LR__0302
06618     00 6C 0E F2 | 	cmp	local01, #0 wz
0661c     00 18 06 A6 |  if_e	mov	result1, #0
06620     10 00 90 AD |  if_e	jmp	#LR__0302
06624     37 61 02 F6 | 	mov	arg02, local02
06628     36 63 02 F6 | 	mov	arg03, local01
0662c     38 5F 02 F6 | 	mov	arg01, local03
06630     B0 00 B0 FD | 	call	#__system___fmtstr
06634                 | LR__0302
06634     AF F0 03 F6 | 	mov	ptra, fp
06638     BA 00 A0 FD | 	call	#popregs_
0663c                 | __system___basic_print_string_ret
0663c     2D 00 64 FD | 	ret
06640                 | 
06640                 | __system___basic_print_integer
06640     04 5A 05 F6 | 	mov	COUNT_, #4
06644     B0 00 A0 FD | 	call	#pushregs_
06648     30 6D 02 F6 | 	mov	local01, arg02
0664c     31 6F 02 F6 | 	mov	local02, arg03
06650     32 71 02 F6 | 	mov	local03, arg04
06654     FC 12 B0 FD | 	call	#__system___gettxfunc
06658     0C 73 0A F6 | 	mov	local04, result1 wz
0665c     00 18 06 A6 |  if_e	mov	result1, #0
06660     14 00 90 AD |  if_e	jmp	#LR__0303
06664     37 61 02 F6 | 	mov	arg02, local02
06668     36 63 02 F6 | 	mov	arg03, local01
0666c     38 65 02 F6 | 	mov	arg04, local03
06670     39 5F 02 F6 | 	mov	arg01, local04
06674     64 01 B0 FD | 	call	#__system___fmtnum
06678                 | LR__0303
06678     AF F0 03 F6 | 	mov	ptra, fp
0667c     BA 00 A0 FD | 	call	#popregs_
06680                 | __system___basic_print_integer_ret
06680     2D 00 64 FD | 	ret
06684                 | 
06684                 | __system___fmtchar
06684     00 5A 05 F6 | 	mov	COUNT_, #0
06688     B0 00 A0 FD | 	call	#pushregs_
0668c     14 F0 07 F1 | 	add	ptra, #20
06690     04 5E 05 F1 | 	add	fp, #4
06694     AF 5E 62 FC | 	wrlong	arg01, fp
06698     04 5E 05 F1 | 	add	fp, #4
0669c     AF 60 62 FC | 	wrlong	arg02, fp
066a0     04 5E 05 F1 | 	add	fp, #4
066a4     AF 62 62 FC | 	wrlong	arg03, fp
066a8     04 5E 05 F1 | 	add	fp, #4
066ac     AF 62 42 FC | 	wrbyte	arg03, fp
066b0     01 5E 05 F1 | 	add	fp, #1
066b4     AF 00 48 FC | 	wrbyte	#0, fp
066b8     0D 5E 85 F1 | 	sub	fp, #13
066bc     AF 5E 02 FB | 	rdlong	arg01, fp
066c0     04 5E 05 F1 | 	add	fp, #4
066c4     AF 60 02 FB | 	rdlong	arg02, fp
066c8     08 5E 05 F1 | 	add	fp, #8
066cc     AF 62 02 F6 | 	mov	arg03, fp
066d0     10 5E 85 F1 | 	sub	fp, #16
066d4     0C 00 B0 FD | 	call	#__system___fmtstr
066d8     AF F0 03 F6 | 	mov	ptra, fp
066dc     BA 00 A0 FD | 	call	#popregs_
066e0                 | __system___fmtchar_ret
066e0     2D 00 64 FD | 	ret
066e4                 | 
066e4                 | __system___fmtstr
066e4     0E 5A 05 F6 | 	mov	COUNT_, #14
066e8     B0 00 A0 FD | 	call	#pushregs_
066ec     2F 6D 02 F6 | 	mov	local01, arg01
066f0     30 6F 02 F6 | 	mov	local02, arg02
066f4     31 71 02 F6 | 	mov	local03, arg03
066f8     37 73 02 F6 | 	mov	local04, local02
066fc     FF 72 06 F5 | 	and	local04, #255
06700     38 5F 02 F6 | 	mov	arg01, local03
06704     00 74 06 F6 | 	mov	local05, #0
06708     04 99 9F FE | 	loc	pa,	#(@LR__0305-@LR__0304)
0670c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06710                 | LR__0304
06710     2F 77 CA FA | 	rdbyte	local06, arg01 wz
06714     01 74 06 51 |  if_ne	add	local05, #1
06718     01 5E 06 51 |  if_ne	add	arg01, #1
0671c     F0 FF 9F 5D |  if_ne	jmp	#LR__0304
06720                 | LR__0305
06720     3A 19 02 F6 | 	mov	result1, local05
06724     0C 79 02 F6 | 	mov	local07, result1
06728     00 72 0E F2 | 	cmp	local04, #0 wz
0672c     04 00 90 AD |  if_e	jmp	#LR__0306
06730     39 79 7A F3 | 	fles	local07, local04 wcz
06734                 | LR__0306
06734     37 61 02 F6 | 	mov	arg02, local02
06738     3C 63 02 F6 | 	mov	arg03, local07
0673c     36 5F 02 F6 | 	mov	arg01, local01
06740     02 64 06 F6 | 	mov	arg04, #2
06744     BC 10 B0 FD | 	call	#__system___fmtpad
06748     0C 7B 02 F6 | 	mov	local08, result1
0674c     00 7A 5E F2 | 	cmps	local08, #0 wcz
06750     3D 19 02 C6 |  if_b	mov	result1, local08
06754     78 00 90 CD |  if_b	jmp	#LR__0309
06758     00 7C 06 F6 | 	mov	local09, #0
0675c                 | LR__0307
0675c     3C 7D 5A F2 | 	cmps	local09, local07 wcz
06760     44 00 90 3D |  if_ae	jmp	#LR__0308
06764     36 7F 02 F6 | 	mov	local10, local01
06768     3F 81 02 FB | 	rdlong	local11, local10
0676c     04 7E 06 F1 | 	add	local10, #4
06770     3F 83 02 FB | 	rdlong	local12, local10
06774     38 5F C2 FA | 	rdbyte	arg01, local03
06778     FD 84 02 F6 | 	mov	local13, objptr
0677c     40 FB 01 F6 | 	mov	objptr, local11
06780     01 70 06 F1 | 	add	local03, #1
06784     2D 82 62 FD | 	call	local12
06788     42 FB 01 F6 | 	mov	objptr, local13
0678c     0C 87 02 F6 | 	mov	local14, result1
06790     00 86 5E F2 | 	cmps	local14, #0 wcz
06794     43 19 02 C6 |  if_b	mov	result1, local14
06798     34 00 90 CD |  if_b	jmp	#LR__0309
0679c     43 7B 02 F1 | 	add	local08, local14
067a0     01 7C 06 F1 | 	add	local09, #1
067a4     B4 FF 9F FD | 	jmp	#LR__0307
067a8                 | LR__0308
067a8     37 61 02 F6 | 	mov	arg02, local02
067ac     3C 63 02 F6 | 	mov	arg03, local07
067b0     36 5F 02 F6 | 	mov	arg01, local01
067b4     01 64 06 F6 | 	mov	arg04, #1
067b8     48 10 B0 FD | 	call	#__system___fmtpad
067bc     0C 87 02 F6 | 	mov	local14, result1
067c0     00 86 5E F2 | 	cmps	local14, #0 wcz
067c4     43 19 02 C6 |  if_b	mov	result1, local14
067c8     43 7B 02 31 |  if_ae	add	local08, local14
067cc     3D 19 02 36 |  if_ae	mov	result1, local08
067d0                 | LR__0309
067d0     AF F0 03 F6 | 	mov	ptra, fp
067d4     BA 00 A0 FD | 	call	#popregs_
067d8                 | __system___fmtstr_ret
067d8     2D 00 64 FD | 	ret
067dc                 | 
067dc                 | __system___fmtnum
067dc     06 5A 05 F6 | 	mov	COUNT_, #6
067e0     B0 00 A0 FD | 	call	#pushregs_
067e4     70 F0 07 F1 | 	add	ptra, #112
067e8     04 5E 05 F1 | 	add	fp, #4
067ec     AF 5E 62 FC | 	wrlong	arg01, fp
067f0     04 5E 05 F1 | 	add	fp, #4
067f4     AF 60 62 FC | 	wrlong	arg02, fp
067f8     04 5E 05 F1 | 	add	fp, #4
067fc     AF 62 62 FC | 	wrlong	arg03, fp
06800     04 5E 05 F1 | 	add	fp, #4
06804     AF 64 62 FC | 	wrlong	arg04, fp
06808     04 5E 05 F1 | 	add	fp, #4
0680c     AF 6C 02 F6 | 	mov	local01, fp
06810     44 5E 05 F1 | 	add	fp, #68
06814     AF 6C 62 FC | 	wrlong	local01, fp
06818     04 5E 05 F1 | 	add	fp, #4
0681c     AF 00 68 FC | 	wrlong	#0, fp
06820     54 5E 85 F1 | 	sub	fp, #84
06824     AF 6C 02 FB | 	rdlong	local01, fp
06828     10 6C 46 F0 | 	shr	local01, #16
0682c     3F 6C 06 F5 | 	and	local01, #63
06830     58 5E 05 F1 | 	add	fp, #88
06834     AF 6C 62 FC | 	wrlong	local01, fp
06838     58 5E 85 F1 | 	sub	fp, #88
0683c     AF 6C 02 FB | 	rdlong	local01, fp
06840     FF 6C 06 F5 | 	and	local01, #255
06844     5C 5E 05 F1 | 	add	fp, #92
06848     AF 6C 62 FC | 	wrlong	local01, fp
0684c     5C 5E 85 F1 | 	sub	fp, #92
06850     AF 6C 02 FB | 	rdlong	local01, fp
06854     1A 6C 46 F0 | 	shr	local01, #26
06858     03 6C 06 F5 | 	and	local01, #3
0685c     60 5E 05 F1 | 	add	fp, #96
06860     AF 6C 62 FC | 	wrlong	local01, fp
06864     08 5E 85 F1 | 	sub	fp, #8
06868     AF 6C 02 FB | 	rdlong	local01, fp
0686c     60 5E 85 F1 | 	sub	fp, #96
06870     00 6C 5E F2 | 	cmps	local01, #0 wcz
06874     14 00 90 ED |  if_be	jmp	#LR__0310
06878     60 5E 05 F1 | 	add	fp, #96
0687c     AF 6C 02 FB | 	rdlong	local01, fp
06880     01 6C 86 F1 | 	sub	local01, #1
06884     AF 6C 62 FC | 	wrlong	local01, fp
06888     60 5E 85 F1 | 	sub	fp, #96
0688c                 | LR__0310
0688c     64 5E 05 F1 | 	add	fp, #100
06890     AF 6C 02 FB | 	rdlong	local01, fp
06894     64 5E 85 F1 | 	sub	fp, #100
06898     40 6C 5E F2 | 	cmps	local01, #64 wcz
0689c     14 00 90 1D |  if_a	jmp	#LR__0311
068a0     64 5E 05 F1 | 	add	fp, #100
068a4     AF 6E 02 FB | 	rdlong	local02, fp
068a8     64 5E 85 F1 | 	sub	fp, #100
068ac     37 71 0A F6 | 	mov	local03, local02 wz
068b0     0C 00 90 5D |  if_ne	jmp	#LR__0312
068b4                 | LR__0311
068b4     64 5E 05 F1 | 	add	fp, #100
068b8     AF 80 68 FC | 	wrlong	#64, fp
068bc     64 5E 85 F1 | 	sub	fp, #100
068c0                 | LR__0312
068c0     68 5E 05 F1 | 	add	fp, #104
068c4     AF 6C 02 FB | 	rdlong	local01, fp
068c8     68 5E 85 F1 | 	sub	fp, #104
068cc     03 6C 0E F2 | 	cmp	local01, #3 wz
068d0     10 00 90 5D |  if_ne	jmp	#LR__0313
068d4     68 5E 05 F1 | 	add	fp, #104
068d8     AF 00 68 FC | 	wrlong	#0, fp
068dc     68 5E 85 F1 | 	sub	fp, #104
068e0     30 00 90 FD | 	jmp	#LR__0315
068e4                 | LR__0313
068e4     0C 5E 05 F1 | 	add	fp, #12
068e8     AF 6C 02 FB | 	rdlong	local01, fp
068ec     0C 5E 85 F1 | 	sub	fp, #12
068f0     00 6C 5E F2 | 	cmps	local01, #0 wcz
068f4     1C 00 90 3D |  if_ae	jmp	#LR__0314
068f8     68 5E 05 F1 | 	add	fp, #104
068fc     AF 08 68 FC | 	wrlong	#4, fp
06900     5C 5E 85 F1 | 	sub	fp, #92
06904     AF 6C 02 FB | 	rdlong	local01, fp
06908     36 6D 62 F6 | 	neg	local01, local01
0690c     AF 6C 62 FC | 	wrlong	local01, fp
06910     0C 5E 85 F1 | 	sub	fp, #12
06914                 | LR__0314
06914                 | LR__0315
06914     68 5E 05 F1 | 	add	fp, #104
06918     AF 6C 0A FB | 	rdlong	local01, fp wz
0691c     68 5E 85 F1 | 	sub	fp, #104
06920     EC 00 90 AD |  if_e	jmp	#LR__0322
06924     5C 5E 05 F1 | 	add	fp, #92
06928     AF 70 02 FB | 	rdlong	local03, fp
0692c     01 70 06 F1 | 	add	local03, #1
06930     AF 70 62 FC | 	wrlong	local03, fp
06934     04 5E 05 F1 | 	add	fp, #4
06938     AF 6C 02 FB | 	rdlong	local01, fp
0693c     04 5E 05 F1 | 	add	fp, #4
06940     AF 70 02 FB | 	rdlong	local03, fp
06944     64 5E 85 F1 | 	sub	fp, #100
06948     38 6D 0A F2 | 	cmp	local01, local03 wz
0694c     3C 00 90 5D |  if_ne	jmp	#LR__0317
06950     60 5E 05 F1 | 	add	fp, #96
06954     AF 70 02 FB | 	rdlong	local03, fp
06958     01 70 86 F1 | 	sub	local03, #1
0695c     AF 70 62 FC | 	wrlong	local03, fp
06960     AF 6C 0A FB | 	rdlong	local01, fp wz
06964     60 5E 85 F1 | 	sub	fp, #96
06968     20 00 90 5D |  if_ne	jmp	#LR__0316
0696c     04 5E 05 F1 | 	add	fp, #4
06970     AF 5E 02 FB | 	rdlong	arg01, fp
06974     04 5E 05 F1 | 	add	fp, #4
06978     AF 60 02 FB | 	rdlong	arg02, fp
0697c     08 5E 85 F1 | 	sub	fp, #8
06980     23 62 06 F6 | 	mov	arg03, #35
06984     FC FC BF FD | 	call	#__system___fmtchar
06988     70 01 90 FD | 	jmp	#LR__0327
0698c                 | LR__0316
0698c                 | LR__0317
0698c     68 5E 05 F1 | 	add	fp, #104
06990     AF 6C 02 FB | 	rdlong	local01, fp
06994     68 5E 85 F1 | 	sub	fp, #104
06998     02 6C 0E F2 | 	cmp	local01, #2 wz
0699c     20 00 90 5D |  if_ne	jmp	#LR__0318
069a0     58 5E 05 F1 | 	add	fp, #88
069a4     AF 6C 02 FB | 	rdlong	local01, fp
069a8     36 71 02 F6 | 	mov	local03, local01
069ac     01 70 06 F1 | 	add	local03, #1
069b0     AF 70 62 FC | 	wrlong	local03, fp
069b4     58 5E 85 F1 | 	sub	fp, #88
069b8     36 41 48 FC | 	wrbyte	#32, local01
069bc     50 00 90 FD | 	jmp	#LR__0321
069c0                 | LR__0318
069c0     68 5E 05 F1 | 	add	fp, #104
069c4     AF 6C 02 FB | 	rdlong	local01, fp
069c8     68 5E 85 F1 | 	sub	fp, #104
069cc     04 6C 0E F2 | 	cmp	local01, #4 wz
069d0     20 00 90 5D |  if_ne	jmp	#LR__0319
069d4     58 5E 05 F1 | 	add	fp, #88
069d8     AF 6C 02 FB | 	rdlong	local01, fp
069dc     36 71 02 F6 | 	mov	local03, local01
069e0     01 70 06 F1 | 	add	local03, #1
069e4     AF 70 62 FC | 	wrlong	local03, fp
069e8     58 5E 85 F1 | 	sub	fp, #88
069ec     36 5B 48 FC | 	wrbyte	#45, local01
069f0     1C 00 90 FD | 	jmp	#LR__0320
069f4                 | LR__0319
069f4     58 5E 05 F1 | 	add	fp, #88
069f8     AF 6C 02 FB | 	rdlong	local01, fp
069fc     36 71 02 F6 | 	mov	local03, local01
06a00     01 70 06 F1 | 	add	local03, #1
06a04     AF 70 62 FC | 	wrlong	local03, fp
06a08     58 5E 85 F1 | 	sub	fp, #88
06a0c     36 57 48 FC | 	wrbyte	#43, local01
06a10                 | LR__0320
06a10                 | LR__0321
06a10                 | LR__0322
06a10     58 5E 05 F1 | 	add	fp, #88
06a14     AF 5E 02 FB | 	rdlong	arg01, fp
06a18     4C 5E 85 F1 | 	sub	fp, #76
06a1c     AF 60 02 FB | 	rdlong	arg02, fp
06a20     04 5E 05 F1 | 	add	fp, #4
06a24     AF 62 02 FB | 	rdlong	arg03, fp
06a28     50 5E 05 F1 | 	add	fp, #80
06a2c     AF 64 02 FB | 	rdlong	arg04, fp
06a30     00 72 06 F6 | 	mov	local04, #0
06a34     58 5E 85 F1 | 	sub	fp, #88
06a38     AF 74 02 FB | 	rdlong	local05, fp
06a3c     08 5E 85 F1 | 	sub	fp, #8
06a40     1D 74 2E F4 | 	testbn	local05, #29 wz
06a44     01 72 06 56 |  if_ne	mov	local04, #1
06a48     39 67 02 F6 | 	mov	arg05, local04
06a4c     78 0E B0 FD | 	call	#__system___uitoa
06a50     0C 77 02 F6 | 	mov	local06, result1
06a54     5C 5E 05 F1 | 	add	fp, #92
06a58     AF 6C 02 FB | 	rdlong	local01, fp
06a5c     3B 6D 02 F1 | 	add	local01, local06
06a60     AF 6C 62 FC | 	wrlong	local01, fp
06a64     08 5E 05 F1 | 	add	fp, #8
06a68     AF 70 02 FB | 	rdlong	local03, fp
06a6c     64 5E 85 F1 | 	sub	fp, #100
06a70     38 6D 5A F2 | 	cmps	local01, local03 wcz
06a74     64 00 90 ED |  if_be	jmp	#LR__0326
06a78     C4 95 9F FE | 	loc	pa,	#(@LR__0324-@LR__0323)
06a7c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06a80                 | LR__0323
06a80     64 5E 05 F1 | 	add	fp, #100
06a84     AF 6C 02 FB | 	rdlong	local01, fp
06a88     36 71 02 F6 | 	mov	local03, local01
06a8c     01 70 86 F1 | 	sub	local03, #1
06a90     AF 70 62 FC | 	wrlong	local03, fp
06a94     64 5E 85 F1 | 	sub	fp, #100
06a98     00 6C 5E F2 | 	cmps	local01, #0 wcz
06a9c     20 00 90 ED |  if_be	jmp	#LR__0325
06aa0     58 5E 05 F1 | 	add	fp, #88
06aa4     AF 6C 02 FB | 	rdlong	local01, fp
06aa8     36 71 02 F6 | 	mov	local03, local01
06aac     01 70 06 F1 | 	add	local03, #1
06ab0     AF 70 62 FC | 	wrlong	local03, fp
06ab4     58 5E 85 F1 | 	sub	fp, #88
06ab8     36 47 48 FC | 	wrbyte	#35, local01
06abc     C0 FF 9F FD | 	jmp	#LR__0323
06ac0                 | LR__0324
06ac0                 | LR__0325
06ac0     58 5E 05 F1 | 	add	fp, #88
06ac4     AF 6C 02 FB | 	rdlong	local01, fp
06ac8     36 71 02 F6 | 	mov	local03, local01
06acc     01 70 06 F1 | 	add	local03, #1
06ad0     AF 70 62 FC | 	wrlong	local03, fp
06ad4     58 5E 85 F1 | 	sub	fp, #88
06ad8     36 01 48 FC | 	wrbyte	#0, local01
06adc                 | LR__0326
06adc     04 5E 05 F1 | 	add	fp, #4
06ae0     AF 5E 02 FB | 	rdlong	arg01, fp
06ae4     04 5E 05 F1 | 	add	fp, #4
06ae8     AF 60 02 FB | 	rdlong	arg02, fp
06aec     0C 5E 05 F1 | 	add	fp, #12
06af0     AF 62 02 F6 | 	mov	arg03, fp
06af4     14 5E 85 F1 | 	sub	fp, #20
06af8     E8 FB BF FD | 	call	#__system___fmtstr
06afc                 | LR__0327
06afc     AF F0 03 F6 | 	mov	ptra, fp
06b00     BA 00 A0 FD | 	call	#popregs_
06b04                 | __system___fmtnum_ret
06b04     2D 00 64 FD | 	ret
06b08                 | 
06b08                 | __system__Chr_S
06b08     02 5A 05 F6 | 	mov	COUNT_, #2
06b0c     B0 00 A0 FD | 	call	#pushregs_
06b10     2F 6D 02 F6 | 	mov	local01, arg01
06b14     03 5E 06 F6 | 	mov	arg01, #3
06b18     7C 04 B0 FD | 	call	#__system___gc_alloc_managed
06b1c     0C 6F 0A F6 | 	mov	local02, result1 wz
06b20     10 00 90 AD |  if_e	jmp	#LR__0328
06b24     37 6D 42 FC | 	wrbyte	local01, local02
06b28     01 6E 06 F1 | 	add	local02, #1
06b2c     37 01 48 FC | 	wrbyte	#0, local02
06b30     01 6E 86 F1 | 	sub	local02, #1
06b34                 | LR__0328
06b34     37 19 02 F6 | 	mov	result1, local02
06b38     AF F0 03 F6 | 	mov	ptra, fp
06b3c     BA 00 A0 FD | 	call	#popregs_
06b40                 | __system__Chr_S_ret
06b40     2D 00 64 FD | 	ret
06b44                 | 
06b44                 | __system__Number_S
06b44     09 5A 05 F6 | 	mov	COUNT_, #9
06b48     B0 00 A0 FD | 	call	#pushregs_
06b4c     2F 6D 02 F6 | 	mov	local01, arg01
06b50     30 6F 0A F6 | 	mov	local02, arg02 wz
06b54     31 71 02 F6 | 	mov	local03, arg03
06b58     40 00 90 5D |  if_ne	jmp	#LR__0331
06b5c     01 6E 06 F6 | 	mov	local02, #1
06b60     38 73 02 F6 | 	mov	local04, local03
06b64     01 74 06 F6 | 	mov	local05, #1
06b68                 | LR__0329
06b68     00 76 06 F6 | 	mov	local06, #0
06b6c     36 73 1A F2 | 	cmp	local04, local01 wcz
06b70     01 76 66 E6 |  if_be	neg	local06, #1
06b74     00 78 06 F6 | 	mov	local07, #0
06b78     39 75 1A F2 | 	cmp	local05, local04 wcz
06b7c     01 78 66 C6 |  if_b	neg	local07, #1
06b80     3C 77 CA F7 | 	test	local06, local07 wz
06b84     14 00 90 AD |  if_e	jmp	#LR__0330
06b88     39 75 02 F6 | 	mov	local05, local04
06b8c     38 73 02 FD | 	qmul	local04, local03
06b90     18 72 62 FD | 	getqx	local04
06b94     01 6E 06 F1 | 	add	local02, #1
06b98     CC FF 9F FD | 	jmp	#LR__0329
06b9c                 | LR__0330
06b9c                 | LR__0331
06b9c     20 6E 3E F3 | 	fle	local02, #32 wcz
06ba0     37 5F 02 F6 | 	mov	arg01, local02
06ba4     02 5E 06 F1 | 	add	arg01, #2
06ba8     EC 03 B0 FD | 	call	#__system___gc_alloc_managed
06bac     0C 7B 02 F6 | 	mov	local08, result1
06bb0     37 79 02 F6 | 	mov	local07, local02
06bb4     3D 79 02 F1 | 	add	local07, local08
06bb8     3C 01 48 FC | 	wrbyte	#0, local07
06bbc     7C 94 9F FE | 	loc	pa,	#(@LR__0333-@LR__0332)
06bc0     93 00 A0 FD | 	call	#FCACHE_LOAD_
06bc4                 | LR__0332
06bc4     00 6E 1E F2 | 	cmp	local02, #0 wcz
06bc8     34 00 90 ED |  if_be	jmp	#LR__0334
06bcc     01 6E 86 F1 | 	sub	local02, #1
06bd0     36 99 02 F6 | 	mov	muldiva_, local01
06bd4     38 9B 02 F6 | 	mov	muldivb_, local03
06bd8     C2 00 A0 FD | 	call	#unsdivide_
06bdc     4C 7D 02 F6 | 	mov	local09, muldiva_
06be0     4D 6D 02 F6 | 	mov	local01, muldivb_
06be4     0A 7C 1E F2 | 	cmp	local09, #10 wcz
06be8     30 7C 06 C1 |  if_b	add	local09, #48
06bec     37 7C 06 31 |  if_ae	add	local09, #55
06bf0     37 79 02 F6 | 	mov	local07, local02
06bf4     3D 79 02 F1 | 	add	local07, local08
06bf8     3C 7D 42 FC | 	wrbyte	local09, local07
06bfc     C4 FF 9F FD | 	jmp	#LR__0332
06c00                 | LR__0333
06c00                 | LR__0334
06c00     3D 19 02 F6 | 	mov	result1, local08
06c04     AF F0 03 F6 | 	mov	ptra, fp
06c08     BA 00 A0 FD | 	call	#popregs_
06c0c                 | __system__Number_S_ret
06c0c     2D 00 64 FD | 	ret
06c10                 | 
06c10                 | __system__String_S
06c10     05 5A 05 F6 | 	mov	COUNT_, #5
06c14     B0 00 A0 FD | 	call	#pushregs_
06c18     2F 6D 02 F6 | 	mov	local01, arg01
06c1c     30 6F 02 F6 | 	mov	local02, arg02
06c20     37 5F 02 F6 | 	mov	arg01, local02
06c24     00 70 06 F6 | 	mov	local03, #0
06c28     E4 93 9F FE | 	loc	pa,	#(@LR__0336-@LR__0335)
06c2c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c30                 | LR__0335
06c30     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06c34     01 70 06 51 |  if_ne	add	local03, #1
06c38     01 5E 06 51 |  if_ne	add	arg01, #1
06c3c     F0 FF 9F 5D |  if_ne	jmp	#LR__0335
06c40                 | LR__0336
06c40     38 19 0A F6 | 	mov	result1, local03 wz
06c44     42 00 00 AF 
06c48     C2 18 06 A6 |  if_e	mov	result1, ##@LR__0453
06c4c     4C 00 90 AD |  if_e	jmp	#LR__0338
06c50     00 6C 5E F2 | 	cmps	local01, #0 wcz
06c54     42 00 00 EF 
06c58     C3 18 06 E6 |  if_be	mov	result1, ##@LR__0454
06c5c     3C 00 90 ED |  if_be	jmp	#LR__0338
06c60     36 5F 02 F6 | 	mov	arg01, local01
06c64     02 5E 06 F1 | 	add	arg01, #2
06c68     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
06c6c     0C 75 0A F6 | 	mov	local05, result1 wz
06c70     24 00 90 AD |  if_e	jmp	#LR__0337
06c74     37 61 C2 FA | 	rdbyte	arg02, local02
06c78     3A 5F 02 F6 | 	mov	arg01, local05
06c7c     36 63 02 F6 | 	mov	arg03, local01
06c80     A0 00 A0 FD | 	call	#\builtin_bytefill_
06c84     01 6C 06 F1 | 	add	local01, #1
06c88     3A 6D 02 F1 | 	add	local01, local05
06c8c     36 01 48 FC | 	wrbyte	#0, local01
06c90     3A 19 02 F6 | 	mov	result1, local05
06c94     04 00 90 FD | 	jmp	#LR__0338
06c98                 | LR__0337
06c98     3A 19 02 F6 | 	mov	result1, local05
06c9c                 | LR__0338
06c9c     AF F0 03 F6 | 	mov	ptra, fp
06ca0     BA 00 A0 FD | 	call	#popregs_
06ca4                 | __system__String_S_ret
06ca4     2D 00 64 FD | 	ret
06ca8                 | 
06ca8                 | __system___gc_ptrs
06ca8     04 5A 05 F6 | 	mov	COUNT_, #4
06cac     B0 00 A0 FD | 	call	#pushregs_
06cb0     F8 6C 02 F6 | 	mov	local01, __heap_ptr
06cb4     36 6F 02 F6 | 	mov	local02, local01
06cb8     07 00 00 FF 
06cbc     F8 6F 06 F1 | 	add	local02, ##4088
06cc0     36 71 0A FB | 	rdlong	local03, local01 wz
06cc4     74 00 90 5D |  if_ne	jmp	#LR__0339
06cc8     37 73 02 F6 | 	mov	local04, local02
06ccc     36 73 82 F1 | 	sub	local04, local01
06cd0     36 03 58 FC | 	wrword	#1, local01
06cd4     36 71 02 F6 | 	mov	local03, local01
06cd8     02 70 06 F1 | 	add	local03, #2
06cdc     36 00 80 FF 
06ce0     38 21 59 FC | 	wrword	##27792, local03
06ce4     36 71 02 F6 | 	mov	local03, local01
06ce8     04 70 06 F1 | 	add	local03, #4
06cec     38 01 58 FC | 	wrword	#0, local03
06cf0     36 71 02 F6 | 	mov	local03, local01
06cf4     06 70 06 F1 | 	add	local03, #6
06cf8     38 03 58 FC | 	wrword	#1, local03
06cfc     10 6C 06 F1 | 	add	local01, #16
06d00     39 71 52 F6 | 	abs	local03, local04 wc
06d04     04 70 46 F0 | 	shr	local03, #4
06d08     38 71 62 C6 |  if_b	neg	local03, local03
06d0c     36 71 52 FC | 	wrword	local03, local01
06d10     36 71 02 F6 | 	mov	local03, local01
06d14     02 70 06 F1 | 	add	local03, #2
06d18     36 00 80 FF 
06d1c     38 1F 59 FC | 	wrword	##27791, local03
06d20     36 71 02 F6 | 	mov	local03, local01
06d24     04 70 06 F1 | 	add	local03, #4
06d28     38 01 58 FC | 	wrword	#0, local03
06d2c     36 71 02 F6 | 	mov	local03, local01
06d30     06 70 06 F1 | 	add	local03, #6
06d34     38 01 58 FC | 	wrword	#0, local03
06d38     10 6C 86 F1 | 	sub	local01, #16
06d3c                 | LR__0339
06d3c     37 1B 02 F6 | 	mov	result2, local02
06d40     36 19 02 F6 | 	mov	result1, local01
06d44     AF F0 03 F6 | 	mov	ptra, fp
06d48     BA 00 A0 FD | 	call	#popregs_
06d4c                 | __system___gc_ptrs_ret
06d4c     2D 00 64 FD | 	ret
06d50                 | 
06d50                 | __system___gc_nextBlockPtr
06d50     02 5A 05 F6 | 	mov	COUNT_, #2
06d54     B0 00 A0 FD | 	call	#pushregs_
06d58     2F 6D 02 F6 | 	mov	local01, arg01
06d5c     36 6F EA FA | 	rdword	local02, local01 wz
06d60     10 00 90 5D |  if_ne	jmp	#LR__0340
06d64     42 00 00 FF 
06d68     C4 5E 06 F6 | 	mov	arg01, ##@LR__0455
06d6c     F4 01 B0 FD | 	call	#__system___gc_errmsg
06d70     0C 00 90 FD | 	jmp	#LR__0341
06d74                 | LR__0340
06d74     36 19 02 F6 | 	mov	result1, local01
06d78     04 6E 66 F0 | 	shl	local02, #4
06d7c     37 19 02 F1 | 	add	result1, local02
06d80                 | LR__0341
06d80     AF F0 03 F6 | 	mov	ptra, fp
06d84     BA 00 A0 FD | 	call	#popregs_
06d88                 | __system___gc_nextBlockPtr_ret
06d88     2D 00 64 FD | 	ret
06d8c                 | 
06d8c                 | __system___gc_tryalloc
06d8c     0D 5A 05 F6 | 	mov	COUNT_, #13
06d90     B0 00 A0 FD | 	call	#pushregs_
06d94     2F 6D 02 F6 | 	mov	local01, arg01
06d98     30 6F 02 F6 | 	mov	local02, arg02
06d9c     08 FF BF FD | 	call	#__system___gc_ptrs
06da0     0C 71 02 F6 | 	mov	local03, result1
06da4     0D 73 02 F6 | 	mov	local04, result2
06da8     38 75 02 F6 | 	mov	local05, local03
06dac     00 76 06 F6 | 	mov	local06, #0
06db0     9C 92 9F FE | 	loc	pa,	#(@LR__0343-@LR__0342)
06db4     93 00 A0 FD | 	call	#FCACHE_LOAD_
06db8                 | LR__0342
06db8     3A 79 02 F6 | 	mov	local07, local05
06dbc     3A 7B 02 F6 | 	mov	local08, local05
06dc0     06 7A 06 F1 | 	add	local08, #6
06dc4     3D 7D E2 FA | 	rdword	local09, local08
06dc8     38 5F 02 F6 | 	mov	arg01, local03
06dcc     3E 61 0A F6 | 	mov	arg02, local09 wz
06dd0     00 18 06 A6 |  if_e	mov	result1, #0
06dd4     04 60 66 50 |  if_ne	shl	arg02, #4
06dd8     30 5F 02 51 |  if_ne	add	arg01, arg02
06ddc     2F 19 02 56 |  if_ne	mov	result1, arg01
06de0     0C 7F 02 F6 | 	mov	local10, result1
06de4     3F 75 0A F6 | 	mov	local05, local10 wz
06de8     3A 7F 02 56 |  if_ne	mov	local10, local05
06dec     3F 77 E2 5A |  if_ne	rdword	local06, local10
06df0     00 74 0E F2 | 	cmp	local05, #0 wz
06df4     10 00 90 AD |  if_e	jmp	#LR__0344
06df8     39 75 5A F2 | 	cmps	local05, local04 wcz
06dfc     08 00 90 3D |  if_ae	jmp	#LR__0344
06e00     3B 6D 5A F2 | 	cmps	local01, local06 wcz
06e04     B0 FF 9F 1D |  if_a	jmp	#LR__0342
06e08                 | LR__0343
06e08                 | LR__0344
06e08     00 74 0E F2 | 	cmp	local05, #0 wz
06e0c     3A 19 02 A6 |  if_e	mov	result1, local05
06e10     44 01 90 AD |  if_e	jmp	#LR__0347
06e14     3A 7F 02 F6 | 	mov	local10, local05
06e18     06 7E 06 F1 | 	add	local10, #6
06e1c     3F 81 E2 FA | 	rdword	local11, local10
06e20     3B 6D 5A F2 | 	cmps	local01, local06 wcz
06e24     C0 00 90 3D |  if_ae	jmp	#LR__0346
06e28     3A 6D 52 FC | 	wrword	local01, local05
06e2c     3A 5F 02 F6 | 	mov	arg01, local05
06e30     36 7D 02 F6 | 	mov	local09, local01
06e34     04 7C 66 F0 | 	shl	local09, #4
06e38     3E 5F 02 F1 | 	add	arg01, local09
06e3c     3B 7F 02 F6 | 	mov	local10, local06
06e40     36 7F 82 F1 | 	sub	local10, local01
06e44     2F 7F 52 FC | 	wrword	local10, arg01
06e48     2F 7F 02 F6 | 	mov	local10, arg01
06e4c     02 7E 06 F1 | 	add	local10, #2
06e50     36 00 80 FF 
06e54     3F 1F 59 FC | 	wrword	##27791, local10
06e58     3A 61 0A F6 | 	mov	arg02, local05 wz
06e5c     00 18 06 A6 |  if_e	mov	result1, #0
06e60     38 61 82 51 |  if_ne	sub	arg02, local03
06e64     04 60 46 50 |  if_ne	shr	arg02, #4
06e68     30 19 02 56 |  if_ne	mov	result1, arg02
06e6c     2F 7D 02 F6 | 	mov	local09, arg01
06e70     04 7C 06 F1 | 	add	local09, #4
06e74     3E 19 52 FC | 	wrword	result1, local09
06e78     3A 7F 02 F6 | 	mov	local10, local05
06e7c     06 7E 06 F1 | 	add	local10, #6
06e80     2F 7D 02 F6 | 	mov	local09, arg01
06e84     3F 7B E2 FA | 	rdword	local08, local10
06e88     06 7C 06 F1 | 	add	local09, #6
06e8c     3E 7B 52 FC | 	wrword	local08, local09
06e90     2F 83 02 F6 | 	mov	local12, arg01
06e94     41 61 0A F6 | 	mov	arg02, local12 wz
06e98     00 18 06 A6 |  if_e	mov	result1, #0
06e9c     38 61 82 51 |  if_ne	sub	arg02, local03
06ea0     04 60 46 50 |  if_ne	shr	arg02, #4
06ea4     30 19 02 56 |  if_ne	mov	result1, arg02
06ea8     0C 81 02 F6 | 	mov	local11, result1
06eac     A0 FE BF FD | 	call	#__system___gc_nextBlockPtr
06eb0     0C 85 0A F6 | 	mov	local13, result1 wz
06eb4     30 00 90 AD |  if_e	jmp	#LR__0345
06eb8     39 85 5A F2 | 	cmps	local13, local04 wcz
06ebc     28 00 90 3D |  if_ae	jmp	#LR__0345
06ec0     38 5F 02 F6 | 	mov	arg01, local03
06ec4     41 61 0A F6 | 	mov	arg02, local12 wz
06ec8     00 18 06 A6 |  if_e	mov	result1, #0
06ecc     2F 61 82 51 |  if_ne	sub	arg02, arg01
06ed0     04 60 46 50 |  if_ne	shr	arg02, #4
06ed4     30 19 02 56 |  if_ne	mov	result1, arg02
06ed8     0C 7F 02 F6 | 	mov	local10, result1
06edc     42 7D 02 F6 | 	mov	local09, local13
06ee0     04 7C 06 F1 | 	add	local09, #4
06ee4     3E 7F 52 FC | 	wrword	local10, local09
06ee8                 | LR__0345
06ee8                 | LR__0346
06ee8     06 78 06 F1 | 	add	local07, #6
06eec     3C 81 52 FC | 	wrword	local11, local07
06ef0     36 00 00 FF 
06ef4     80 7E 06 F6 | 	mov	local10, ##27776
06ef8     37 7F 42 F5 | 	or	local10, local02
06efc     00 18 06 F6 | 	mov	result1, #0
06f00     01 18 62 FD | 	cogid	result1
06f04     0C 7F 42 F5 | 	or	local10, result1
06f08     3A 7B 02 F6 | 	mov	local08, local05
06f0c     02 7A 06 F1 | 	add	local08, #2
06f10     3D 7F 52 FC | 	wrword	local10, local08
06f14     38 7F 02 F6 | 	mov	local10, local03
06f18     08 7E 06 F1 | 	add	local10, #8
06f1c     3A 7D 02 F6 | 	mov	local09, local05
06f20     3F 7B E2 FA | 	rdword	local08, local10
06f24     06 7C 06 F1 | 	add	local09, #6
06f28     3E 7B 52 FC | 	wrword	local08, local09
06f2c     3A 61 0A F6 | 	mov	arg02, local05 wz
06f30     00 18 06 A6 |  if_e	mov	result1, #0
06f34     38 61 82 51 |  if_ne	sub	arg02, local03
06f38     04 60 46 50 |  if_ne	shr	arg02, #4
06f3c     30 19 02 56 |  if_ne	mov	result1, arg02
06f40     08 70 06 F1 | 	add	local03, #8
06f44     38 19 52 FC | 	wrword	result1, local03
06f48     3A 19 02 F6 | 	mov	result1, local05
06f4c     08 18 06 F1 | 	add	result1, #8
06f50     00 C0 31 FF 
06f54     00 18 46 F5 | 	or	result1, ##1669332992
06f58                 | LR__0347
06f58     AF F0 03 F6 | 	mov	ptra, fp
06f5c     BA 00 A0 FD | 	call	#popregs_
06f60                 | __system___gc_tryalloc_ret
06f60     2D 00 64 FD | 	ret
06f64                 | 
06f64                 | __system___gc_errmsg
06f64     02 5A 05 F6 | 	mov	COUNT_, #2
06f68     B0 00 A0 FD | 	call	#pushregs_
06f6c     2F 6D 02 F6 | 	mov	local01, arg01
06f70                 | LR__0348
06f70     36 6F CA FA | 	rdbyte	local02, local01 wz
06f74     01 6C 06 F1 | 	add	local01, #1
06f78     0C 00 90 AD |  if_e	jmp	#LR__0349
06f7c     37 5F 02 F6 | 	mov	arg01, local02
06f80     A0 F3 BF FD | 	call	#__system___tx
06f84     E8 FF 9F FD | 	jmp	#LR__0348
06f88                 | LR__0349
06f88     00 18 06 F6 | 	mov	result1, #0
06f8c     AF F0 03 F6 | 	mov	ptra, fp
06f90     BA 00 A0 FD | 	call	#popregs_
06f94                 | __system___gc_errmsg_ret
06f94     2D 00 64 FD | 	ret
06f98                 | 
06f98                 | __system___gc_alloc_managed
06f98     02 5A 05 F6 | 	mov	COUNT_, #2
06f9c     B0 00 A0 FD | 	call	#pushregs_
06fa0     2F 6D 02 F6 | 	mov	local01, arg01
06fa4     00 60 06 F6 | 	mov	arg02, #0
06fa8     30 00 B0 FD | 	call	#__system___gc_doalloc
06fac     0C 6F 0A F6 | 	mov	local02, result1 wz
06fb0     18 00 90 5D |  if_ne	jmp	#LR__0350
06fb4     00 6C 5E F2 | 	cmps	local01, #0 wcz
06fb8     10 00 90 ED |  if_be	jmp	#LR__0350
06fbc     42 00 00 FF 
06fc0     E0 5E 06 F6 | 	mov	arg01, ##@LR__0456
06fc4     9C FF BF FD | 	call	#__system___gc_errmsg
06fc8     04 00 90 FD | 	jmp	#LR__0351
06fcc                 | LR__0350
06fcc     37 19 02 F6 | 	mov	result1, local02
06fd0                 | LR__0351
06fd0     AF F0 03 F6 | 	mov	ptra, fp
06fd4     BA 00 A0 FD | 	call	#popregs_
06fd8                 | __system___gc_alloc_managed_ret
06fd8     2D 00 64 FD | 	ret
06fdc                 | 
06fdc                 | __system___gc_doalloc
06fdc     06 5A 05 F6 | 	mov	COUNT_, #6
06fe0     B0 00 A0 FD | 	call	#pushregs_
06fe4     2F 6D 0A F6 | 	mov	local01, arg01 wz
06fe8     30 6F 02 F6 | 	mov	local02, arg02
06fec     00 18 06 A6 |  if_e	mov	result1, #0
06ff0     94 00 90 AD |  if_e	jmp	#LR__0359
06ff4     17 6C 06 F1 | 	add	local01, #23
06ff8     0F 6C 26 F5 | 	andn	local01, #15
06ffc     04 6C 46 F0 | 	shr	local01, #4
07000     14 00 06 F1 | 	add	ptr___system__dat__, #20
07004     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07008     14 00 86 F1 | 	sub	ptr___system__dat__, #20
0700c     2C F2 BF FD | 	call	#__system___lockmem
07010     36 5F 02 F6 | 	mov	arg01, local01
07014     37 61 02 F6 | 	mov	arg02, local02
07018     70 FD BF FD | 	call	#__system___gc_tryalloc
0701c     0C 71 0A F6 | 	mov	local03, result1 wz
07020     14 00 90 5D |  if_ne	jmp	#LR__0352
07024     24 03 B0 FD | 	call	#__system___gc_docollect
07028     36 5F 02 F6 | 	mov	arg01, local01
0702c     37 61 02 F6 | 	mov	arg02, local02
07030     58 FD BF FD | 	call	#__system___gc_tryalloc
07034     0C 71 02 F6 | 	mov	local03, result1
07038                 | LR__0352
07038     14 00 06 F1 | 	add	ptr___system__dat__, #20
0703c     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07040     14 00 86 F1 | 	sub	ptr___system__dat__, #20
07044     2F 01 68 FC | 	wrlong	#0, arg01
07048     00 70 0E F2 | 	cmp	local03, #0 wz
0704c     34 00 90 AD |  if_e	jmp	#LR__0358
07050     04 6C 66 F0 | 	shl	local01, #4
07054     08 6C 86 F1 | 	sub	local01, #8
07058     36 73 52 F6 | 	abs	local04, local01 wc
0705c     02 72 46 F0 | 	shr	local04, #2
07060     39 73 62 C6 |  if_b	neg	local04, local04
07064     39 75 0A F6 | 	mov	local05, local04 wz
07068     38 77 02 F6 | 	mov	local06, local03
0706c     14 00 90 AD |  if_e	jmp	#LR__0357
07070     98 8F 9F FE | 	loc	pa,	#(@LR__0355-@LR__0353)
07074     93 00 A0 FD | 	call	#FCACHE_LOAD_
07078                 | LR__0353
07078     3A 05 D8 FC | 	rep	@LR__0356, local05
0707c                 | LR__0354
0707c     3B 01 68 FC | 	wrlong	#0, local06
07080     04 76 06 F1 | 	add	local06, #4
07084                 | LR__0355
07084                 | LR__0356
07084                 | LR__0357
07084                 | LR__0358
07084     38 19 02 F6 | 	mov	result1, local03
07088                 | LR__0359
07088     AF F0 03 F6 | 	mov	ptra, fp
0708c     BA 00 A0 FD | 	call	#popregs_
07090                 | __system___gc_doalloc_ret
07090     2D 00 64 FD | 	ret
07094                 | 
07094                 | __system___gc_isvalidptr
07094     31 1F 02 F6 | 	mov	_var01, arg03
07098     0F 21 02 F6 | 	mov	_var02, _var01
0709c     00 F8 7F FF 
070a0     00 20 06 F5 | 	and	_var02, ##-1048576
070a4     00 C0 31 FF 
070a8     00 20 0E F2 | 	cmp	_var02, ##1669332992 wz
070ac     00 18 06 56 |  if_ne	mov	result1, #0
070b0     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
070b4     08 1E 86 F1 | 	sub	_var01, #8
070b8     00 F8 7F FF 
070bc     00 1E 26 F5 | 	andn	_var01, ##-1048576
070c0     2F 1F 5A F2 | 	cmps	_var01, arg01 wcz
070c4     08 00 90 CD |  if_b	jmp	#LR__0360
070c8     30 1F 5A F2 | 	cmps	_var01, arg02 wcz
070cc     08 00 90 CD |  if_b	jmp	#LR__0361
070d0                 | LR__0360
070d0     00 18 06 F6 | 	mov	result1, #0
070d4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
070d8                 | LR__0361
070d8     0F 21 02 F6 | 	mov	_var02, _var01
070dc     2F 21 62 F5 | 	xor	_var02, arg01
070e0     0F 20 0E F5 | 	and	_var02, #15 wz
070e4     00 18 06 56 |  if_ne	mov	result1, #0
070e8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
070ec     0F 21 02 F6 | 	mov	_var02, _var01
070f0     02 20 06 F1 | 	add	_var02, #2
070f4     10 21 E2 FA | 	rdword	_var02, _var02
070f8     7F 00 00 FF 
070fc     C0 21 06 F5 | 	and	_var02, ##65472
07100     36 00 00 FF 
07104     80 20 0E F2 | 	cmp	_var02, ##27776 wz
07108     00 18 06 56 |  if_ne	mov	result1, #0
0710c     0F 19 02 A6 |  if_e	mov	result1, _var01
07110                 | __system___gc_isvalidptr_ret
07110     2D 00 64 FD | 	ret
07114                 | 
07114                 | __system___gc_dofree
07114     0D 5A 05 F6 | 	mov	COUNT_, #13
07118     B0 00 A0 FD | 	call	#pushregs_
0711c     2F 6D 02 F6 | 	mov	local01, arg01
07120     84 FB BF FD | 	call	#__system___gc_ptrs
07124     0C 6F 02 F6 | 	mov	local02, result1
07128     0D 71 02 F6 | 	mov	local03, result2
0712c     36 73 02 F6 | 	mov	local04, local01
07130     02 72 06 F1 | 	add	local04, #2
07134     36 00 80 FF 
07138     39 1F 59 FC | 	wrword	##27791, local04
0713c     36 75 02 F6 | 	mov	local05, local01
07140     36 5F 02 F6 | 	mov	arg01, local01
07144     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
07148     0C 77 02 F6 | 	mov	local06, result1
0714c     FC 8E 9F FE | 	loc	pa,	#(@LR__0363-@LR__0362)
07150     93 00 A0 FD | 	call	#FCACHE_LOAD_
07154                 | LR__0362
07154     04 74 06 F1 | 	add	local05, #4
07158     3A 61 EA FA | 	rdword	arg02, local05 wz
0715c     37 5F 02 F6 | 	mov	arg01, local02
07160     00 18 06 A6 |  if_e	mov	result1, #0
07164     04 60 66 50 |  if_ne	shl	arg02, #4
07168     30 5F 02 51 |  if_ne	add	arg01, arg02
0716c     2F 19 02 56 |  if_ne	mov	result1, arg01
07170     0C 75 0A F6 | 	mov	local05, result1 wz
07174     28 00 90 AD |  if_e	jmp	#LR__0364
07178     3A 5F 02 F6 | 	mov	arg01, local05
0717c     00 78 06 F6 | 	mov	local07, #0
07180     02 5E 06 F1 | 	add	arg01, #2
07184     2F 7B E2 FA | 	rdword	local08, arg01
07188     36 00 00 FF 
0718c     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07190     01 78 66 A6 |  if_e	neg	local07, #1
07194     3C 19 02 F6 | 	mov	result1, local07
07198     0C 73 0A F6 | 	mov	local04, result1 wz
0719c     B4 FF 9F AD |  if_e	jmp	#LR__0362
071a0                 | LR__0363
071a0                 | LR__0364
071a0     00 74 0E F2 | 	cmp	local05, #0 wz
071a4     37 75 02 A6 |  if_e	mov	local05, local02
071a8     3A 73 02 F6 | 	mov	local04, local05
071ac     06 72 06 F1 | 	add	local04, #6
071b0     36 7D 02 F6 | 	mov	local09, local01
071b4     39 7F E2 FA | 	rdword	local10, local04
071b8     06 7C 06 F1 | 	add	local09, #6
071bc     3E 7F 52 FC | 	wrword	local10, local09
071c0     36 61 0A F6 | 	mov	arg02, local01 wz
071c4     00 18 06 A6 |  if_e	mov	result1, #0
071c8     37 61 82 51 |  if_ne	sub	arg02, local02
071cc     04 60 46 50 |  if_ne	shr	arg02, #4
071d0     30 19 02 56 |  if_ne	mov	result1, arg02
071d4     3A 7D 02 F6 | 	mov	local09, local05
071d8     06 7C 06 F1 | 	add	local09, #6
071dc     3E 19 52 FC | 	wrword	result1, local09
071e0     37 75 0A F2 | 	cmp	local05, local02 wz
071e4     84 00 90 AD |  if_e	jmp	#LR__0367
071e8     3A 5F 02 F6 | 	mov	arg01, local05
071ec     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
071f0     36 19 0A F2 | 	cmp	result1, local01 wz
071f4     74 00 90 5D |  if_ne	jmp	#LR__0366
071f8     3A 73 E2 FA | 	rdword	local04, local05
071fc     36 81 E2 FA | 	rdword	local11, local01
07200     40 73 02 F1 | 	add	local04, local11
07204     3A 73 52 FC | 	wrword	local04, local05
07208     36 73 02 F6 | 	mov	local04, local01
0720c     02 72 06 F1 | 	add	local04, #2
07210     39 01 58 FC | 	wrword	#0, local04
07214     36 5F 02 F6 | 	mov	arg01, local01
07218     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
0721c     0C 77 02 F6 | 	mov	local06, result1
07220     38 77 5A F2 | 	cmps	local06, local03 wcz
07224     20 00 90 3D |  if_ae	jmp	#LR__0365
07228     3A 61 0A F6 | 	mov	arg02, local05 wz
0722c     00 18 06 A6 |  if_e	mov	result1, #0
07230     37 61 82 51 |  if_ne	sub	arg02, local02
07234     04 60 46 50 |  if_ne	shr	arg02, #4
07238     30 19 02 56 |  if_ne	mov	result1, arg02
0723c     3B 7D 02 F6 | 	mov	local09, local06
07240     04 7C 06 F1 | 	add	local09, #4
07244     3E 19 52 FC | 	wrword	result1, local09
07248                 | LR__0365
07248     36 73 02 F6 | 	mov	local04, local01
0724c     06 72 06 F1 | 	add	local04, #6
07250     3A 7D 02 F6 | 	mov	local09, local05
07254     39 7F E2 FA | 	rdword	local10, local04
07258     06 7C 06 F1 | 	add	local09, #6
0725c     3E 7F 52 FC | 	wrword	local10, local09
07260     06 6C 06 F1 | 	add	local01, #6
07264     36 01 58 FC | 	wrword	#0, local01
07268     3A 6D 02 F6 | 	mov	local01, local05
0726c                 | LR__0366
0726c                 | LR__0367
0726c     36 5F 02 F6 | 	mov	arg01, local01
07270     DC FA BF FD | 	call	#__system___gc_nextBlockPtr
07274     0C 83 0A F6 | 	mov	local12, result1 wz
07278     C0 00 90 AD |  if_e	jmp	#LR__0369
0727c     38 83 5A F2 | 	cmps	local12, local03 wcz
07280     B8 00 90 3D |  if_ae	jmp	#LR__0369
07284     41 5F 02 F6 | 	mov	arg01, local12
07288     00 78 06 F6 | 	mov	local07, #0
0728c     02 5E 06 F1 | 	add	arg01, #2
07290     2F 7B E2 FA | 	rdword	local08, arg01
07294     36 00 00 FF 
07298     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
0729c     01 78 66 A6 |  if_e	neg	local07, #1
072a0     3C 19 0A F6 | 	mov	result1, local07 wz
072a4     94 00 90 AD |  if_e	jmp	#LR__0369
072a8     36 75 02 F6 | 	mov	local05, local01
072ac     3A 73 E2 FA | 	rdword	local04, local05
072b0     41 6D 02 F6 | 	mov	local01, local12
072b4     36 81 E2 FA | 	rdword	local11, local01
072b8     40 73 02 F1 | 	add	local04, local11
072bc     3A 85 02 F6 | 	mov	local13, local05
072c0     42 73 52 FC | 	wrword	local04, local13
072c4     36 73 02 F6 | 	mov	local04, local01
072c8     06 72 06 F1 | 	add	local04, #6
072cc     3A 7D 02 F6 | 	mov	local09, local05
072d0     39 7F E2 FA | 	rdword	local10, local04
072d4     06 7C 06 F1 | 	add	local09, #6
072d8     3E 7F 52 FC | 	wrword	local10, local09
072dc     36 73 02 F6 | 	mov	local04, local01
072e0     02 72 06 F1 | 	add	local04, #2
072e4     39 55 59 FC | 	wrword	#170, local04
072e8     36 73 02 F6 | 	mov	local04, local01
072ec     06 72 06 F1 | 	add	local04, #6
072f0     00 7C 06 F6 | 	mov	local09, #0
072f4     39 01 58 FC | 	wrword	#0, local04
072f8     36 5F 02 F6 | 	mov	arg01, local01
072fc     50 FA BF FD | 	call	#__system___gc_nextBlockPtr
07300     0C 73 02 F6 | 	mov	local04, result1
07304     39 77 0A F6 | 	mov	local06, local04 wz
07308     30 00 90 AD |  if_e	jmp	#LR__0368
0730c     38 77 5A F2 | 	cmps	local06, local03 wcz
07310     28 00 90 3D |  if_ae	jmp	#LR__0368
07314     37 5F 02 F6 | 	mov	arg01, local02
07318     3A 61 0A F6 | 	mov	arg02, local05 wz
0731c     00 18 06 A6 |  if_e	mov	result1, #0
07320     2F 61 82 51 |  if_ne	sub	arg02, arg01
07324     04 60 46 50 |  if_ne	shr	arg02, #4
07328     30 19 02 56 |  if_ne	mov	result1, arg02
0732c     0C 73 02 F6 | 	mov	local04, result1
07330     3B 7D 02 F6 | 	mov	local09, local06
07334     04 7C 06 F1 | 	add	local09, #4
07338     3E 73 52 FC | 	wrword	local04, local09
0733c                 | LR__0368
0733c                 | LR__0369
0733c     3B 19 02 F6 | 	mov	result1, local06
07340     AF F0 03 F6 | 	mov	ptra, fp
07344     BA 00 A0 FD | 	call	#popregs_
07348                 | __system___gc_dofree_ret
07348     2D 00 64 FD | 	ret
0734c                 | 
0734c                 | __system___gc_docollect
0734c     09 5A 05 F6 | 	mov	COUNT_, #9
07350     B0 00 A0 FD | 	call	#pushregs_
07354     50 F9 BF FD | 	call	#__system___gc_ptrs
07358     0D 6D 02 F6 | 	mov	local01, result2
0735c     0C 6F 02 F6 | 	mov	local02, result1
07360     37 5F 02 F6 | 	mov	arg01, local02
07364     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07368     0C 71 0A F6 | 	mov	local03, result1 wz
0736c     00 18 06 F6 | 	mov	result1, #0
07370     01 18 62 FD | 	cogid	result1
07374     0C 73 02 F6 | 	mov	local04, result1
07378     34 00 90 AD |  if_e	jmp	#LR__0371
0737c                 | LR__0370
0737c     36 71 5A F2 | 	cmps	local03, local01 wcz
07380     2C 00 90 3D |  if_ae	jmp	#LR__0371
07384     38 75 02 F6 | 	mov	local05, local03
07388     02 74 06 F1 | 	add	local05, #2
0738c     3A 77 E2 FA | 	rdword	local06, local05
07390     20 76 26 F5 | 	andn	local06, #32
07394     38 79 02 F6 | 	mov	local07, local03
07398     02 78 06 F1 | 	add	local07, #2
0739c     3C 77 52 FC | 	wrword	local06, local07
073a0     38 5F 02 F6 | 	mov	arg01, local03
073a4     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
073a8     0C 71 0A F6 | 	mov	local03, result1 wz
073ac     CC FF 9F 5D |  if_ne	jmp	#LR__0370
073b0                 | LR__0371
073b0     00 76 06 F6 | 	mov	local06, #0
073b4     00 5E 06 F6 | 	mov	arg01, #0
073b8     18 EE BF FD | 	call	#__system____topofstack
073bc     0C 61 02 F6 | 	mov	arg02, result1
073c0     3B 5F 02 F6 | 	mov	arg01, local06
073c4     9C 00 B0 FD | 	call	#__system___gc_markhub
073c8     2C 01 B0 FD | 	call	#__system___gc_markcog
073cc     37 5F 02 F6 | 	mov	arg01, local02
073d0     7C F9 BF FD | 	call	#__system___gc_nextBlockPtr
073d4     0C 7B 0A F6 | 	mov	local08, result1 wz
073d8     10 00 90 5D |  if_ne	jmp	#LR__0372
073dc     42 00 00 FF 
073e0     FD 5E 06 F6 | 	mov	arg01, ##@LR__0457
073e4     7C FB BF FD | 	call	#__system___gc_errmsg
073e8     6C 00 90 FD | 	jmp	#LR__0378
073ec                 | LR__0372
073ec                 | LR__0373
073ec     3D 71 02 F6 | 	mov	local03, local08
073f0     38 5F 02 F6 | 	mov	arg01, local03
073f4     58 F9 BF FD | 	call	#__system___gc_nextBlockPtr
073f8     0C 7B 02 F6 | 	mov	local08, result1
073fc     38 77 02 F6 | 	mov	local06, local03
07400     02 76 06 F1 | 	add	local06, #2
07404     3B 7D E2 FA | 	rdword	local09, local06
07408     20 7C CE F7 | 	test	local09, #32 wz
0740c     38 00 90 5D |  if_ne	jmp	#LR__0376
07410     3E 75 02 F6 | 	mov	local05, local09
07414     10 74 0E F5 | 	and	local05, #16 wz
07418     2C 00 90 5D |  if_ne	jmp	#LR__0376
0741c     3E 77 02 F6 | 	mov	local06, local09
07420     0F 76 06 F5 | 	and	local06, #15
07424     3B 7D 02 F6 | 	mov	local09, local06
07428     39 7D 0A F2 | 	cmp	local09, local04 wz
0742c     08 00 90 AD |  if_e	jmp	#LR__0374
07430     0E 7C 0E F2 | 	cmp	local09, #14 wz
07434     10 00 90 5D |  if_ne	jmp	#LR__0375
07438                 | LR__0374
07438     38 5F 02 F6 | 	mov	arg01, local03
0743c     D4 FC BF FD | 	call	#__system___gc_dofree
07440     0C 77 02 F6 | 	mov	local06, result1
07444     3B 7B 02 F6 | 	mov	local08, local06
07448                 | LR__0375
07448                 | LR__0376
07448     00 7A 0E F2 | 	cmp	local08, #0 wz
0744c     08 00 90 AD |  if_e	jmp	#LR__0377
07450     36 7B 5A F2 | 	cmps	local08, local01 wcz
07454     94 FF 9F CD |  if_b	jmp	#LR__0373
07458                 | LR__0377
07458                 | LR__0378
07458     AF F0 03 F6 | 	mov	ptra, fp
0745c     BA 00 A0 FD | 	call	#popregs_
07460                 | __system___gc_docollect_ret
07460     2D 00 64 FD | 	ret
07464                 | 
07464                 | __system___gc_markhub
07464     09 5A 05 F6 | 	mov	COUNT_, #9
07468     B0 00 A0 FD | 	call	#pushregs_
0746c     2F 6D 02 F6 | 	mov	local01, arg01
07470     30 6F 02 F6 | 	mov	local02, arg02
07474     30 F8 BF FD | 	call	#__system___gc_ptrs
07478     0C 71 02 F6 | 	mov	local03, result1
0747c     0D 73 02 F6 | 	mov	local04, result2
07480                 | LR__0379
07480     37 6D 5A F2 | 	cmps	local01, local02 wcz
07484     64 00 90 3D |  if_ae	jmp	#LR__0380
07488     36 63 02 FB | 	rdlong	arg03, local01
0748c     04 6C 06 F1 | 	add	local01, #4
07490     39 61 02 F6 | 	mov	arg02, local04
07494     38 5F 02 F6 | 	mov	arg01, local03
07498     F8 FB BF FD | 	call	#__system___gc_isvalidptr
0749c     0C 75 0A F6 | 	mov	local05, result1 wz
074a0     DC FF 9F AD |  if_e	jmp	#LR__0379
074a4     3A 5F 02 F6 | 	mov	arg01, local05
074a8     00 76 06 F6 | 	mov	local06, #0
074ac     02 5E 06 F1 | 	add	arg01, #2
074b0     2F 79 E2 FA | 	rdword	local07, arg01
074b4     36 00 00 FF 
074b8     8F 78 0E F2 | 	cmp	local07, ##27791 wz
074bc     01 76 66 A6 |  if_e	neg	local06, #1
074c0     3B 19 0A F6 | 	mov	result1, local06 wz
074c4     B8 FF 9F 5D |  if_ne	jmp	#LR__0379
074c8     3A 7B 02 F6 | 	mov	local08, local05
074cc     02 7A 06 F1 | 	add	local08, #2
074d0     3D 7D E2 FA | 	rdword	local09, local08
074d4     0F 7C 26 F5 | 	andn	local09, #15
074d8     2E 7C 46 F5 | 	or	local09, #46
074dc     3A 7B 02 F6 | 	mov	local08, local05
074e0     02 7A 06 F1 | 	add	local08, #2
074e4     3D 7D 52 FC | 	wrword	local09, local08
074e8     94 FF 9F FD | 	jmp	#LR__0379
074ec                 | LR__0380
074ec     AF F0 03 F6 | 	mov	ptra, fp
074f0     BA 00 A0 FD | 	call	#popregs_
074f4                 | __system___gc_markhub_ret
074f4     2D 00 64 FD | 	ret
074f8                 | 
074f8                 | __system___gc_markcog
074f8     06 5A 05 F6 | 	mov	COUNT_, #6
074fc     B0 00 A0 FD | 	call	#pushregs_
07500     A4 F7 BF FD | 	call	#__system___gc_ptrs
07504     0C 6D 02 F6 | 	mov	local01, result1
07508     0D 6F 02 F6 | 	mov	local02, result2
0750c     00 70 06 F6 | 	mov	local03, #0
07510                 | LR__0381
07510     F0 73 06 F6 | 	mov	local04, #496
07514     38 73 82 F1 | 	sub	local04, local03
07518     F0 73 06 F1 | 	add	local04, #496
0751c                 | 	'.live	local04
0751c     00 72 96 F9 | 	alts	local04, #0
07520     39 75 02 F6 | 	mov	local05, local04
07524     36 5F 02 F6 | 	mov	arg01, local01
07528     37 61 02 F6 | 	mov	arg02, local02
0752c     3A 63 02 F6 | 	mov	arg03, local05
07530     60 FB BF FD | 	call	#__system___gc_isvalidptr
07534     0C 75 0A F6 | 	mov	local05, result1 wz
07538     18 00 90 AD |  if_e	jmp	#LR__0382
0753c     3A 77 02 F6 | 	mov	local06, local05
07540     02 76 06 F1 | 	add	local06, #2
07544     3B 73 E2 FA | 	rdword	local04, local06
07548     20 72 46 F5 | 	or	local04, #32
0754c     02 74 06 F1 | 	add	local05, #2
07550     3A 73 52 FC | 	wrword	local04, local05
07554                 | LR__0382
07554     01 70 06 F1 | 	add	local03, #1
07558     F0 71 5E F2 | 	cmps	local03, #496 wcz
0755c     B0 FF 9F CD |  if_b	jmp	#LR__0381
07560     AF F0 03 F6 | 	mov	ptra, fp
07564     BA 00 A0 FD | 	call	#popregs_
07568                 | __system___gc_markcog_ret
07568     2D 00 64 FD | 	ret
0756c                 | 
0756c                 | __system__write
0756c     03 5A 05 F6 | 	mov	COUNT_, #3
07570     B0 00 A0 FD | 	call	#pushregs_
07574     2F 6D 02 F6 | 	mov	local01, arg01
07578     30 6F 02 F6 | 	mov	local02, arg02
0757c     31 71 02 F6 | 	mov	local03, arg03
07580     0A 6C 1E F2 | 	cmp	local01, #10 wcz
07584     14 00 90 CD |  if_b	jmp	#LR__0383
07588     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0758c     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07590     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07594     01 18 66 F6 | 	neg	result1, #1
07598     28 00 90 FD | 	jmp	#LR__0384
0759c                 | LR__0383
0759c     36 5F 02 F6 | 	mov	arg01, local01
075a0     01 5E 66 F0 | 	shl	arg01, #1
075a4     36 5F 02 F1 | 	add	arg01, local01
075a8     04 5E 66 F0 | 	shl	arg01, #4
075ac     24 00 06 F1 | 	add	ptr___system__dat__, #36
075b0     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
075b4     37 61 02 F6 | 	mov	arg02, local02
075b8     38 63 02 F6 | 	mov	arg03, local03
075bc     24 00 86 F1 | 	sub	ptr___system__dat__, #36
075c0     9C 08 B0 FD | 	call	#__system___vfswrite
075c4                 | LR__0384
075c4     AF F0 03 F6 | 	mov	ptra, fp
075c8     BA 00 A0 FD | 	call	#popregs_
075cc                 | __system__write_ret
075cc     2D 00 64 FD | 	ret
075d0                 | 
075d0                 | __system__read
075d0     03 5A 05 F6 | 	mov	COUNT_, #3
075d4     B0 00 A0 FD | 	call	#pushregs_
075d8     2F 6D 02 F6 | 	mov	local01, arg01
075dc     30 6F 02 F6 | 	mov	local02, arg02
075e0     31 71 02 F6 | 	mov	local03, arg03
075e4     0A 6C 1E F2 | 	cmp	local01, #10 wcz
075e8     14 00 90 CD |  if_b	jmp	#LR__0385
075ec     1C 00 06 F1 | 	add	ptr___system__dat__, #28
075f0     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
075f4     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
075f8     01 18 66 F6 | 	neg	result1, #1
075fc     28 00 90 FD | 	jmp	#LR__0386
07600                 | LR__0385
07600     36 5F 02 F6 | 	mov	arg01, local01
07604     01 5E 66 F0 | 	shl	arg01, #1
07608     36 5F 02 F1 | 	add	arg01, local01
0760c     04 5E 66 F0 | 	shl	arg01, #4
07610     24 00 06 F1 | 	add	ptr___system__dat__, #36
07614     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
07618     37 61 02 F6 | 	mov	arg02, local02
0761c     38 63 02 F6 | 	mov	arg03, local03
07620     24 00 86 F1 | 	sub	ptr___system__dat__, #36
07624     E4 09 B0 FD | 	call	#__system___vfsread
07628                 | LR__0386
07628     AF F0 03 F6 | 	mov	ptra, fp
0762c     BA 00 A0 FD | 	call	#popregs_
07630                 | __system__read_ret
07630     2D 00 64 FD | 	ret
07634                 | 
07634                 | __system__close
07634     01 5A 05 F6 | 	mov	COUNT_, #1
07638     B0 00 A0 FD | 	call	#pushregs_
0763c     2F 6D 02 F6 | 	mov	local01, arg01
07640     0A 6C 1E F2 | 	cmp	local01, #10 wcz
07644     14 00 90 CD |  if_b	jmp	#LR__0387
07648     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0764c     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07650     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07654     01 18 66 F6 | 	neg	result1, #1
07658     20 00 90 FD | 	jmp	#LR__0388
0765c                 | LR__0387
0765c     36 5F 02 F6 | 	mov	arg01, local01
07660     01 5E 66 F0 | 	shl	arg01, #1
07664     36 5F 02 F1 | 	add	arg01, local01
07668     04 5E 66 F0 | 	shl	arg01, #4
0766c     24 00 06 F1 | 	add	ptr___system__dat__, #36
07670     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
07674     24 00 86 F1 | 	sub	ptr___system__dat__, #36
07678     6C 03 B0 FD | 	call	#__system___closeraw
0767c                 | LR__0388
0767c     AF F0 03 F6 | 	mov	ptra, fp
07680     BA 00 A0 FD | 	call	#popregs_
07684                 | __system__close_ret
07684     2D 00 64 FD | 	ret
07688                 | 
07688                 | __system__lseek
07688     09 5A 05 F6 | 	mov	COUNT_, #9
0768c     B0 00 A0 FD | 	call	#pushregs_
07690     2F 6D 02 F6 | 	mov	local01, arg01
07694     30 6F 02 F6 | 	mov	local02, arg02
07698     31 71 02 F6 | 	mov	local03, arg03
0769c     0A 6C 1E F2 | 	cmp	local01, #10 wcz
076a0     14 00 90 CD |  if_b	jmp	#LR__0389
076a4     1C 00 06 F1 | 	add	ptr___system__dat__, #28
076a8     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
076ac     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
076b0     01 18 66 F6 | 	neg	result1, #1
076b4     C8 00 90 FD | 	jmp	#LR__0393
076b8                 | LR__0389
076b8     36 73 02 F6 | 	mov	local04, local01
076bc     01 72 66 F0 | 	shl	local04, #1
076c0     36 73 02 F1 | 	add	local04, local01
076c4     04 72 66 F0 | 	shl	local04, #4
076c8     24 00 06 F1 | 	add	ptr___system__dat__, #36
076cc     00 73 02 F1 | 	add	local04, ptr___system__dat__
076d0     2C 72 06 F1 | 	add	local04, #44
076d4     39 75 0A FB | 	rdlong	local05, local04 wz
076d8     2C 72 86 F1 | 	sub	local04, #44
076dc     24 00 86 F1 | 	sub	ptr___system__dat__, #36
076e0     14 00 90 5D |  if_ne	jmp	#LR__0390
076e4     1C 00 06 F1 | 	add	ptr___system__dat__, #28
076e8     00 21 68 FC | 	wrlong	#16, ptr___system__dat__
076ec     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
076f0     01 18 66 F6 | 	neg	result1, #1
076f4     88 00 90 FD | 	jmp	#LR__0393
076f8                 | LR__0390
076f8     08 72 06 F1 | 	add	local04, #8
076fc     39 75 02 FB | 	rdlong	local05, local04
07700     08 72 86 F1 | 	sub	local04, #8
07704     40 74 CE F7 | 	test	local05, #64 wz
07708     14 00 90 AD |  if_e	jmp	#LR__0391
0770c     08 72 06 F1 | 	add	local04, #8
07710     39 75 02 FB | 	rdlong	local05, local04
07714     80 74 46 F5 | 	or	local05, #128
07718     39 75 62 FC | 	wrlong	local05, local04
0771c     08 72 86 F1 | 	sub	local04, #8
07720                 | LR__0391
07720     2C 72 06 F1 | 	add	local04, #44
07724     39 75 02 FB | 	rdlong	local05, local04
07728     2C 72 86 F1 | 	sub	local04, #44
0772c     3A 77 02 FB | 	rdlong	local06, local05
07730     04 74 06 F1 | 	add	local05, #4
07734     3A 79 02 FB | 	rdlong	local07, local05
07738     39 5F 02 F6 | 	mov	arg01, local04
0773c     37 61 02 F6 | 	mov	arg02, local02
07740     38 63 02 F6 | 	mov	arg03, local03
07744     FD 7A 02 F6 | 	mov	local08, objptr
07748     3B FB 01 F6 | 	mov	objptr, local06
0774c     2D 78 62 FD | 	call	local07
07750     3D FB 01 F6 | 	mov	objptr, local08
07754     0C 7D 02 F6 | 	mov	local09, result1
07758     00 7C 5E F2 | 	cmps	local09, #0 wcz
0775c     1C 00 90 3D |  if_ae	jmp	#LR__0392
07760     3E 5F 6A F6 | 	neg	arg01, local09 wz
07764     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07768     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
0776c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07770     01 18 66 56 |  if_ne	neg	result1, #1
07774     00 18 06 A6 |  if_e	mov	result1, #0
07778     04 00 90 FD | 	jmp	#LR__0393
0777c                 | LR__0392
0777c     3E 19 02 F6 | 	mov	result1, local09
07780                 | LR__0393
07780     AF F0 03 F6 | 	mov	ptra, fp
07784     BA 00 A0 FD | 	call	#popregs_
07788                 | __system__lseek_ret
07788     2D 00 64 FD | 	ret
0778c                 | 
0778c                 | __system____getftab
0778c     0A 5E 1E F2 | 	cmp	arg01, #10 wcz
07790     00 18 06 36 |  if_ae	mov	result1, #0
07794     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
07798     2F 19 02 F6 | 	mov	result1, arg01
0779c     01 18 66 F0 | 	shl	result1, #1
077a0     2F 19 02 F1 | 	add	result1, arg01
077a4     04 18 66 F0 | 	shl	result1, #4
077a8     24 00 06 F1 | 	add	ptr___system__dat__, #36
077ac     00 19 02 F1 | 	add	result1, ptr___system__dat__
077b0     24 00 86 F1 | 	sub	ptr___system__dat__, #36
077b4                 | __system____getftab_ret
077b4     2D 00 64 FD | 	ret
077b8                 | 
077b8                 | __system___strrev
077b8     2F 1F CA FA | 	rdbyte	_var01, arg01 wz
077bc     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
077c0     2F 21 02 F6 | 	mov	_var02, arg01
077c4     44 88 9F FE | 	loc	pa,	#(@LR__0395-@LR__0394)
077c8     93 00 A0 FD | 	call	#FCACHE_LOAD_
077cc                 | LR__0394
077cc     10 1F CA FA | 	rdbyte	_var01, _var02 wz
077d0     01 20 06 51 |  if_ne	add	_var02, #1
077d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0394
077d8                 | LR__0395
077d8     01 20 86 F1 | 	sub	_var02, #1
077dc                 | LR__0396
077dc     2F 21 5A F2 | 	cmps	_var02, arg01 wcz
077e0     1C 00 90 ED |  if_be	jmp	#LR__0397
077e4     2F 23 C2 FA | 	rdbyte	_var03, arg01
077e8     10 25 C2 FA | 	rdbyte	_var04, _var02
077ec     2F 25 42 FC | 	wrbyte	_var04, arg01
077f0     10 23 42 FC | 	wrbyte	_var03, _var02
077f4     01 5E 06 F1 | 	add	arg01, #1
077f8     01 20 86 F1 | 	sub	_var02, #1
077fc     DC FF 9F FD | 	jmp	#LR__0396
07800                 | LR__0397
07800                 | __system___strrev_ret
07800     2D 00 64 FD | 	ret
07804                 | 
07804                 | __system___fmtpad
07804     0C 5A 05 F6 | 	mov	COUNT_, #12
07808     B0 00 A0 FD | 	call	#pushregs_
0780c     2F 6D 02 F6 | 	mov	local01, arg01
07810     30 6F 02 F6 | 	mov	local02, arg02
07814     32 71 02 F6 | 	mov	local03, arg04
07818     37 73 EA F8 | 	getbyte	local04, local02, #1
0781c     16 6E 46 F0 | 	shr	local02, #22
07820     03 6E 0E F5 | 	and	local02, #3 wz
07824     00 74 06 F6 | 	mov	local05, #0
07828     01 6E 06 A6 |  if_e	mov	local02, #1
0782c     38 6F CA F7 | 	test	local02, local03 wz
07830     00 18 06 A6 |  if_e	mov	result1, #0
07834     84 00 90 AD |  if_e	jmp	#LR__0401
07838     31 73 82 F1 | 	sub	local04, arg03
0783c     39 77 02 F6 | 	mov	local06, local04
07840     00 76 5E F2 | 	cmps	local06, #0 wcz
07844     00 18 06 E6 |  if_be	mov	result1, #0
07848     70 00 90 ED |  if_be	jmp	#LR__0401
0784c     03 6E 0E F2 | 	cmp	local02, #3 wz
07850     18 00 90 5D |  if_ne	jmp	#LR__0398
07854     01 70 0E F2 | 	cmp	local03, #1 wz
07858     6E 78 62 FD | 	wrz	local07
0785c     3C 77 02 F1 | 	add	local06, local07
07860     3B 77 52 F6 | 	abs	local06, local06 wc
07864     01 76 46 F0 | 	shr	local06, #1
07868     3B 77 62 C6 |  if_b	neg	local06, local06
0786c                 | LR__0398
0786c     00 7A 06 F6 | 	mov	local08, #0
07870                 | LR__0399
07870     3B 7B 5A F2 | 	cmps	local08, local06 wcz
07874     40 00 90 3D |  if_ae	jmp	#LR__0400
07878     36 7D 02 F6 | 	mov	local09, local01
0787c     3E 79 02 FB | 	rdlong	local07, local09
07880     04 7C 06 F1 | 	add	local09, #4
07884     3E 7F 02 FB | 	rdlong	local10, local09
07888     20 5E 06 F6 | 	mov	arg01, #32
0788c     FD 80 02 F6 | 	mov	local11, objptr
07890     3C FB 01 F6 | 	mov	objptr, local07
07894     2D 7E 62 FD | 	call	local10
07898     40 FB 01 F6 | 	mov	objptr, local11
0789c     0C 83 02 F6 | 	mov	local12, result1
078a0     00 82 5E F2 | 	cmps	local12, #0 wcz
078a4     41 19 02 C6 |  if_b	mov	result1, local12
078a8     10 00 90 CD |  if_b	jmp	#LR__0401
078ac     41 75 02 F1 | 	add	local05, local12
078b0     01 7A 06 F1 | 	add	local08, #1
078b4     B8 FF 9F FD | 	jmp	#LR__0399
078b8                 | LR__0400
078b8     3A 19 02 F6 | 	mov	result1, local05
078bc                 | LR__0401
078bc     AF F0 03 F6 | 	mov	ptra, fp
078c0     BA 00 A0 FD | 	call	#popregs_
078c4                 | __system___fmtpad_ret
078c4     2D 00 64 FD | 	ret
078c8                 | 
078c8                 | __system___uitoa
078c8     09 5A 05 F6 | 	mov	COUNT_, #9
078cc     B0 00 A0 FD | 	call	#pushregs_
078d0     2F 6D 02 F6 | 	mov	local01, arg01
078d4     30 6F 02 F6 | 	mov	local02, arg02
078d8     31 71 02 F6 | 	mov	local03, arg03
078dc     32 73 02 F6 | 	mov	local04, arg04
078e0     33 75 0A F6 | 	mov	local05, arg05 wz
078e4     36 77 02 F6 | 	mov	local06, local01
078e8     00 78 06 F6 | 	mov	local07, #0
078ec     37 7A 06 56 |  if_ne	mov	local08, #55
078f0     57 7A 06 A6 |  if_e	mov	local08, #87
078f4                 | LR__0402
078f4     37 99 02 F6 | 	mov	muldiva_, local02
078f8     38 9B 02 F6 | 	mov	muldivb_, local03
078fc     C2 00 A0 FD | 	call	#unsdivide_
07900     4C 7D 02 F6 | 	mov	local09, muldiva_
07904     0A 7C 1E F2 | 	cmp	local09, #10 wcz
07908     30 7C 06 C1 |  if_b	add	local09, #48
0790c     3D 7D 02 31 |  if_ae	add	local09, local08
07910     3B 7D 42 FC | 	wrbyte	local09, local06
07914     37 99 02 F6 | 	mov	muldiva_, local02
07918     38 9B 02 F6 | 	mov	muldivb_, local03
0791c     01 76 06 F1 | 	add	local06, #1
07920     C2 00 A0 FD | 	call	#unsdivide_
07924     4D 6F 0A F6 | 	mov	local02, muldivb_ wz
07928     01 78 06 F1 | 	add	local07, #1
0792c     C4 FF 9F 5D |  if_ne	jmp	#LR__0402
07930     39 79 1A F2 | 	cmp	local07, local04 wcz
07934     BC FF 9F CD |  if_b	jmp	#LR__0402
07938     3B 01 48 FC | 	wrbyte	#0, local06
0793c     36 5F 02 F6 | 	mov	arg01, local01
07940     74 FE BF FD | 	call	#__system___strrev
07944     3C 19 02 F6 | 	mov	result1, local07
07948     AF F0 03 F6 | 	mov	ptra, fp
0794c     BA 00 A0 FD | 	call	#popregs_
07950                 | __system___uitoa_ret
07950     2D 00 64 FD | 	ret
07954                 | 
07954                 | __system___gettxfunc
07954     03 5A 05 F6 | 	mov	COUNT_, #3
07958     B0 00 A0 FD | 	call	#pushregs_
0795c     2C FE BF FD | 	call	#__system____getftab
07960     0C 6D 0A F6 | 	mov	local01, result1 wz
07964     14 00 90 AD |  if_e	jmp	#LR__0403
07968     08 6C 06 F1 | 	add	local01, #8
0796c     36 6F 02 FB | 	rdlong	local02, local01
07970     08 6C 86 F1 | 	sub	local01, #8
07974     37 71 0A F6 | 	mov	local03, local02 wz
07978     08 00 90 5D |  if_ne	jmp	#LR__0404
0797c                 | LR__0403
0797c     00 18 06 F6 | 	mov	result1, #0
07980     0C 00 90 FD | 	jmp	#LR__0405
07984                 | LR__0404
07984     FF 60 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
07988     36 5F 02 F6 | 	mov	arg01, local01
0798c     6C E8 BF FD | 	call	#__system___make_methodptr
07990                 | LR__0405
07990     AF F0 03 F6 | 	mov	ptra, fp
07994     BA 00 A0 FD | 	call	#popregs_
07998                 | __system___gettxfunc_ret
07998     2D 00 64 FD | 	ret
0799c                 | 
0799c                 | __system___getiolock_0150
0799c     03 5A 05 F6 | 	mov	COUNT_, #3
079a0     B0 00 A0 FD | 	call	#pushregs_
079a4     E4 FD BF FD | 	call	#__system____getftab
079a8     0C 6D 0A F6 | 	mov	local01, result1 wz
079ac     14 00 90 AD |  if_e	jmp	#LR__0406
079b0     08 6C 06 F1 | 	add	local01, #8
079b4     36 6F 02 FB | 	rdlong	local02, local01
079b8     08 6C 86 F1 | 	sub	local01, #8
079bc     37 71 0A F6 | 	mov	local03, local02 wz
079c0     10 00 90 5D |  if_ne	jmp	#LR__0407
079c4                 | LR__0406
079c4     20 00 06 F1 | 	add	ptr___system__dat__, #32
079c8     00 19 02 F6 | 	mov	result1, ptr___system__dat__
079cc     20 00 86 F1 | 	sub	ptr___system__dat__, #32
079d0     08 00 90 FD | 	jmp	#LR__0408
079d4                 | LR__0407
079d4     0C 6C 06 F1 | 	add	local01, #12
079d8     36 19 02 F6 | 	mov	result1, local01
079dc                 | LR__0408
079dc     AF F0 03 F6 | 	mov	ptra, fp
079e0     BA 00 A0 FD | 	call	#popregs_
079e4                 | __system___getiolock_0150_ret
079e4     2D 00 64 FD | 	ret
079e8                 | 
079e8                 | __system___closeraw
079e8     06 5A 05 F6 | 	mov	COUNT_, #6
079ec     B0 00 A0 FD | 	call	#pushregs_
079f0     2F 6D 02 F6 | 	mov	local01, arg01
079f4     00 6E 06 F6 | 	mov	local02, #0
079f8     08 6C 06 F1 | 	add	local01, #8
079fc     36 71 0A FB | 	rdlong	local03, local01 wz
07a00     08 6C 86 F1 | 	sub	local01, #8
07a04     14 00 90 5D |  if_ne	jmp	#LR__0409
07a08     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07a0c     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
07a10     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07a14     01 18 66 F6 | 	neg	result1, #1
07a18     90 00 90 FD | 	jmp	#LR__0412
07a1c                 | LR__0409
07a1c     28 6C 06 F1 | 	add	local01, #40
07a20     36 71 0A FB | 	rdlong	local03, local01 wz
07a24     28 6C 86 F1 | 	sub	local01, #40
07a28     2C 00 90 AD |  if_e	jmp	#LR__0410
07a2c     28 6C 06 F1 | 	add	local01, #40
07a30     36 71 02 FB | 	rdlong	local03, local01
07a34     28 6C 86 F1 | 	sub	local01, #40
07a38     38 73 02 FB | 	rdlong	local04, local03
07a3c     04 70 06 F1 | 	add	local03, #4
07a40     38 75 02 FB | 	rdlong	local05, local03
07a44     36 5F 02 F6 | 	mov	arg01, local01
07a48     FD 76 02 F6 | 	mov	local06, objptr
07a4c     39 FB 01 F6 | 	mov	objptr, local04
07a50     2D 74 62 FD | 	call	local05
07a54     3B FB 01 F6 | 	mov	objptr, local06
07a58                 | LR__0410
07a58     20 6C 06 F1 | 	add	local01, #32
07a5c     36 71 0A FB | 	rdlong	local03, local01 wz
07a60     20 6C 86 F1 | 	sub	local01, #32
07a64     30 00 90 AD |  if_e	jmp	#LR__0411
07a68     20 6C 06 F1 | 	add	local01, #32
07a6c     36 71 02 FB | 	rdlong	local03, local01
07a70     20 6C 86 F1 | 	sub	local01, #32
07a74     38 73 02 FB | 	rdlong	local04, local03
07a78     04 70 06 F1 | 	add	local03, #4
07a7c     38 75 02 FB | 	rdlong	local05, local03
07a80     36 5F 02 F6 | 	mov	arg01, local01
07a84     FD 76 02 F6 | 	mov	local06, objptr
07a88     39 FB 01 F6 | 	mov	objptr, local04
07a8c     2D 74 62 FD | 	call	local05
07a90     3B FB 01 F6 | 	mov	objptr, local06
07a94     0C 6F 02 F6 | 	mov	local02, result1
07a98                 | LR__0411
07a98     36 5F 02 F6 | 	mov	arg01, local01
07a9c     00 60 06 F6 | 	mov	arg02, #0
07aa0     30 62 06 F6 | 	mov	arg03, #48
07aa4     A0 00 A0 FD | 	call	#\builtin_bytefill_
07aa8     37 19 02 F6 | 	mov	result1, local02
07aac                 | LR__0412
07aac     AF F0 03 F6 | 	mov	ptra, fp
07ab0     BA 00 A0 FD | 	call	#popregs_
07ab4                 | __system___closeraw_ret
07ab4     2D 00 64 FD | 	ret
07ab8                 | 
07ab8                 | __system____default_getc
07ab8     05 5A 05 F6 | 	mov	COUNT_, #5
07abc     B0 00 A0 FD | 	call	#pushregs_
07ac0     2F 6D 02 F6 | 	mov	local01, arg01
07ac4     36 6F 02 FB | 	rdlong	local02, local01
07ac8     08 6E 06 F1 | 	add	local02, #8
07acc     37 71 02 FB | 	rdlong	local03, local02
07ad0     08 6E 86 F1 | 	sub	local02, #8
07ad4     02 70 CE F7 | 	test	local03, #2 wz
07ad8     08 00 90 AD |  if_e	jmp	#LR__0413
07adc     36 5F 02 F6 | 	mov	arg01, local01
07ae0     8C 01 B0 FD | 	call	#__system____default_flush
07ae4                 | LR__0413
07ae4     08 6E 06 F1 | 	add	local02, #8
07ae8     37 71 02 FB | 	rdlong	local03, local02
07aec     01 70 46 F5 | 	or	local03, #1
07af0     37 71 62 FC | 	wrlong	local03, local02
07af4     08 6E 86 F1 | 	sub	local02, #8
07af8     37 73 0A FB | 	rdlong	local04, local02 wz
07afc     0C 00 90 5D |  if_ne	jmp	#LR__0414
07b00     36 5F 02 F6 | 	mov	arg01, local01
07b04     F8 07 B0 FD | 	call	#__system____default_filbuf
07b08     0C 73 02 F6 | 	mov	local04, result1
07b0c                 | LR__0414
07b0c     00 72 5E F2 | 	cmps	local04, #0 wcz
07b10     01 18 66 E6 |  if_be	neg	result1, #1
07b14     1C 00 90 ED |  if_be	jmp	#LR__0415
07b18     01 72 86 F1 | 	sub	local04, #1
07b1c     37 73 62 FC | 	wrlong	local04, local02
07b20     04 6E 06 F1 | 	add	local02, #4
07b24     37 75 02 FB | 	rdlong	local05, local02
07b28     3A 19 C2 FA | 	rdbyte	result1, local05
07b2c     01 74 06 F1 | 	add	local05, #1
07b30     37 75 62 FC | 	wrlong	local05, local02
07b34                 | LR__0415
07b34     AF F0 03 F6 | 	mov	ptra, fp
07b38     BA 00 A0 FD | 	call	#popregs_
07b3c                 | __system____default_getc_ret
07b3c     2D 00 64 FD | 	ret
07b40                 | 
07b40                 | __system____default_putc
07b40     06 5A 05 F6 | 	mov	COUNT_, #6
07b44     B0 00 A0 FD | 	call	#pushregs_
07b48     2F 6D 02 F6 | 	mov	local01, arg01
07b4c     30 6F 02 F6 | 	mov	local02, arg02
07b50     37 71 02 FB | 	rdlong	local03, local02
07b54     08 70 06 F1 | 	add	local03, #8
07b58     38 73 02 FB | 	rdlong	local04, local03
07b5c     08 70 86 F1 | 	sub	local03, #8
07b60     01 72 CE F7 | 	test	local04, #1 wz
07b64     08 00 90 AD |  if_e	jmp	#LR__0416
07b68     37 5F 02 F6 | 	mov	arg01, local02
07b6c     00 01 B0 FD | 	call	#__system____default_flush
07b70                 | LR__0416
07b70     08 70 06 F1 | 	add	local03, #8
07b74     38 73 02 FB | 	rdlong	local04, local03
07b78     02 72 46 F5 | 	or	local04, #2
07b7c     38 73 62 FC | 	wrlong	local04, local03
07b80     08 70 86 F1 | 	sub	local03, #8
07b84     38 75 02 FB | 	rdlong	local05, local03
07b88     3A 77 02 F6 | 	mov	local06, local05
07b8c     0C 70 06 F1 | 	add	local03, #12
07b90     38 77 02 F1 | 	add	local06, local03
07b94     3B 6D 42 FC | 	wrbyte	local01, local06
07b98     FF 6C 06 F5 | 	and	local01, #255
07b9c     01 74 06 F1 | 	add	local05, #1
07ba0     0C 70 86 F1 | 	sub	local03, #12
07ba4     38 75 62 FC | 	wrlong	local05, local03
07ba8     02 00 00 FF 
07bac     00 74 0E F2 | 	cmp	local05, ##1024 wz
07bb0     10 00 90 5D |  if_ne	jmp	#LR__0417
07bb4     37 5F 02 F6 | 	mov	arg01, local02
07bb8     B4 00 B0 FD | 	call	#__system____default_flush
07bbc     00 18 0E F2 | 	cmp	result1, #0 wz
07bc0     01 6C 66 56 |  if_ne	neg	local01, #1
07bc4                 | LR__0417
07bc4     36 19 02 F6 | 	mov	result1, local01
07bc8     AF F0 03 F6 | 	mov	ptra, fp
07bcc     BA 00 A0 FD | 	call	#popregs_
07bd0                 | __system____default_putc_ret
07bd0     2D 00 64 FD | 	ret
07bd4                 | 
07bd4                 | __system____default_putc_terminal
07bd4     06 5A 05 F6 | 	mov	COUNT_, #6
07bd8     B0 00 A0 FD | 	call	#pushregs_
07bdc     2F 6D 02 F6 | 	mov	local01, arg01
07be0     30 6F 02 F6 | 	mov	local02, arg02
07be4     37 71 02 FB | 	rdlong	local03, local02
07be8     08 70 06 F1 | 	add	local03, #8
07bec     38 73 02 FB | 	rdlong	local04, local03
07bf0     08 70 86 F1 | 	sub	local03, #8
07bf4     01 72 CE F7 | 	test	local04, #1 wz
07bf8     08 00 90 AD |  if_e	jmp	#LR__0418
07bfc     37 5F 02 F6 | 	mov	arg01, local02
07c00     6C 00 B0 FD | 	call	#__system____default_flush
07c04                 | LR__0418
07c04     08 70 06 F1 | 	add	local03, #8
07c08     38 73 02 FB | 	rdlong	local04, local03
07c0c     02 72 46 F5 | 	or	local04, #2
07c10     38 73 62 FC | 	wrlong	local04, local03
07c14     08 70 86 F1 | 	sub	local03, #8
07c18     38 75 02 FB | 	rdlong	local05, local03
07c1c     3A 77 02 F6 | 	mov	local06, local05
07c20     0C 70 06 F1 | 	add	local03, #12
07c24     38 77 02 F1 | 	add	local06, local03
07c28     3B 6D 42 FC | 	wrbyte	local01, local06
07c2c     FF 6C 06 F5 | 	and	local01, #255
07c30     0C 70 86 F1 | 	sub	local03, #12
07c34     01 74 06 F1 | 	add	local05, #1
07c38     38 75 62 FC | 	wrlong	local05, local03
07c3c     0A 6C 0E F2 | 	cmp	local01, #10 wz
07c40     0C 00 90 AD |  if_e	jmp	#LR__0419
07c44     02 00 00 FF 
07c48     00 74 0E F2 | 	cmp	local05, ##1024 wz
07c4c     10 00 90 5D |  if_ne	jmp	#LR__0420
07c50                 | LR__0419
07c50     37 5F 02 F6 | 	mov	arg01, local02
07c54     18 00 B0 FD | 	call	#__system____default_flush
07c58     00 18 0E F2 | 	cmp	result1, #0 wz
07c5c     01 6C 66 56 |  if_ne	neg	local01, #1
07c60                 | LR__0420
07c60     36 19 02 F6 | 	mov	result1, local01
07c64     AF F0 03 F6 | 	mov	ptra, fp
07c68     BA 00 A0 FD | 	call	#popregs_
07c6c                 | __system____default_putc_terminal_ret
07c6c     2D 00 64 FD | 	ret
07c70                 | 
07c70                 | __system____default_flush
07c70     0D 5A 05 F6 | 	mov	COUNT_, #13
07c74     B0 00 A0 FD | 	call	#pushregs_
07c78     2F 6D 02 F6 | 	mov	local01, arg01
07c7c     36 6F 02 FB | 	rdlong	local02, local01
07c80     37 71 02 FB | 	rdlong	local03, local02
07c84     08 6E 06 F1 | 	add	local02, #8
07c88     37 73 02 FB | 	rdlong	local04, local02
07c8c     08 6E 86 F1 | 	sub	local02, #8
07c90     02 72 CE F7 | 	test	local04, #2 wz
07c94     B8 00 90 AD |  if_e	jmp	#LR__0423
07c98     00 70 5E F2 | 	cmps	local03, #0 wcz
07c9c     24 01 90 ED |  if_be	jmp	#LR__0425
07ca0     08 6C 06 F1 | 	add	local01, #8
07ca4     36 73 02 FB | 	rdlong	local04, local01
07ca8     08 6C 86 F1 | 	sub	local01, #8
07cac     40 72 CE F7 | 	test	local04, #64 wz
07cb0     5C 00 90 AD |  if_e	jmp	#LR__0422
07cb4     08 6C 06 F1 | 	add	local01, #8
07cb8     36 73 02 FB | 	rdlong	local04, local01
07cbc     08 6C 86 F1 | 	sub	local01, #8
07cc0     80 72 CE F7 | 	test	local04, #128 wz
07cc4     48 00 90 AD |  if_e	jmp	#LR__0421
07cc8     2C 6C 06 F1 | 	add	local01, #44
07ccc     36 73 02 FB | 	rdlong	local04, local01
07cd0     2C 6C 86 F1 | 	sub	local01, #44
07cd4     39 75 02 FB | 	rdlong	local05, local04
07cd8     04 72 06 F1 | 	add	local04, #4
07cdc     39 77 02 FB | 	rdlong	local06, local04
07ce0     36 5F 02 F6 | 	mov	arg01, local01
07ce4     00 60 06 F6 | 	mov	arg02, #0
07ce8     02 62 06 F6 | 	mov	arg03, #2
07cec     FD 78 02 F6 | 	mov	local07, objptr
07cf0     3A FB 01 F6 | 	mov	objptr, local05
07cf4     2D 76 62 FD | 	call	local06
07cf8     3C FB 01 F6 | 	mov	objptr, local07
07cfc     08 6C 06 F1 | 	add	local01, #8
07d00     36 73 02 FB | 	rdlong	local04, local01
07d04     80 72 26 F5 | 	andn	local04, #128
07d08     36 73 62 FC | 	wrlong	local04, local01
07d0c     08 6C 86 F1 | 	sub	local01, #8
07d10                 | LR__0421
07d10                 | LR__0422
07d10     14 6C 06 F1 | 	add	local01, #20
07d14     36 73 02 FB | 	rdlong	local04, local01
07d18     14 6C 86 F1 | 	sub	local01, #20
07d1c     39 75 02 FB | 	rdlong	local05, local04
07d20     04 72 06 F1 | 	add	local04, #4
07d24     39 77 02 FB | 	rdlong	local06, local04
07d28     0C 6E 06 F1 | 	add	local02, #12
07d2c     37 61 02 F6 | 	mov	arg02, local02
07d30     0C 6E 86 F1 | 	sub	local02, #12
07d34     36 5F 02 F6 | 	mov	arg01, local01
07d38     38 63 02 F6 | 	mov	arg03, local03
07d3c     FD 78 02 F6 | 	mov	local07, objptr
07d40     3A FB 01 F6 | 	mov	objptr, local05
07d44     2D 76 62 FD | 	call	local06
07d48     3C FB 01 F6 | 	mov	objptr, local07
07d4c     74 00 90 FD | 	jmp	#LR__0425
07d50                 | LR__0423
07d50     08 6E 06 F1 | 	add	local02, #8
07d54     37 73 02 FB | 	rdlong	local04, local02
07d58     08 6E 86 F1 | 	sub	local02, #8
07d5c     01 72 CE F7 | 	test	local04, #1 wz
07d60     60 00 90 AD |  if_e	jmp	#LR__0424
07d64     00 70 0E F2 | 	cmp	local03, #0 wz
07d68     58 00 90 AD |  if_e	jmp	#LR__0424
07d6c     2C 6C 06 F1 | 	add	local01, #44
07d70     36 7B 02 FB | 	rdlong	local08, local01
07d74     2C 6C 86 F1 | 	sub	local01, #44
07d78     3D 73 02 F6 | 	mov	local04, local08
07d7c     39 75 02 FB | 	rdlong	local05, local04
07d80     04 72 06 F1 | 	add	local04, #4
07d84     39 7D 02 FB | 	rdlong	local09, local04
07d88     3E 77 02 F6 | 	mov	local06, local09
07d8c     36 7F 02 F6 | 	mov	local10, local01
07d90     38 81 62 F6 | 	neg	local11, local03
07d94     01 82 06 F6 | 	mov	local12, #1
07d98     3F 5F 02 F6 | 	mov	arg01, local10
07d9c     40 61 02 F6 | 	mov	arg02, local11
07da0     01 62 06 F6 | 	mov	arg03, #1
07da4     FD 78 02 F6 | 	mov	local07, objptr
07da8     3A FB 01 F6 | 	mov	objptr, local05
07dac     2D 76 62 FD | 	call	local06
07db0     3C FB 01 F6 | 	mov	objptr, local07
07db4     0C 73 02 F6 | 	mov	local04, result1
07db8     39 85 02 F6 | 	mov	local13, local04
07dbc     00 84 5E F2 | 	cmps	local13, #0 wcz
07dc0     38 85 02 36 |  if_ae	mov	local13, local03
07dc4                 | LR__0424
07dc4                 | LR__0425
07dc4     37 01 68 FC | 	wrlong	#0, local02
07dc8     04 6E 06 F1 | 	add	local02, #4
07dcc     37 01 68 FC | 	wrlong	#0, local02
07dd0     04 6E 06 F1 | 	add	local02, #4
07dd4     37 01 68 FC | 	wrlong	#0, local02
07dd8     00 18 06 F6 | 	mov	result1, #0
07ddc     AF F0 03 F6 | 	mov	ptra, fp
07de0     BA 00 A0 FD | 	call	#popregs_
07de4                 | __system____default_flush_ret
07de4     2D 00 64 FD | 	ret
07de8                 | 
07de8                 | __system___rxtxioctl_0179
07de8     02 5A 05 F6 | 	mov	COUNT_, #2
07dec     B0 00 A0 FD | 	call	#pushregs_
07df0     30 6D 02 F6 | 	mov	local01, arg02
07df4     31 6F 02 F6 | 	mov	local02, arg03
07df8     00 6D 0E F2 | 	cmp	local01, #256 wz
07dfc     0C 00 90 AD |  if_e	jmp	#LR__0426
07e00     01 6D 0E F2 | 	cmp	local01, #257 wz
07e04     1C 00 90 AD |  if_e	jmp	#LR__0427
07e08     30 00 90 FD | 	jmp	#LR__0428
07e0c                 | LR__0426
07e0c     08 00 06 F1 | 	add	ptr___system__dat__, #8
07e10     00 19 02 FB | 	rdlong	result1, ptr___system__dat__
07e14     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07e18     37 19 62 FC | 	wrlong	result1, local02
07e1c     00 18 06 F6 | 	mov	result1, #0
07e20     28 00 90 FD | 	jmp	#LR__0429
07e24                 | LR__0427
07e24     37 5F 02 FB | 	rdlong	arg01, local02
07e28     08 00 06 F1 | 	add	ptr___system__dat__, #8
07e2c     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
07e30     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07e34     00 18 06 F6 | 	mov	result1, #0
07e38     10 00 90 FD | 	jmp	#LR__0429
07e3c                 | LR__0428
07e3c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07e40     00 15 68 FC | 	wrlong	#10, ptr___system__dat__
07e44     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07e48     01 18 66 F6 | 	neg	result1, #1
07e4c                 | LR__0429
07e4c     AF F0 03 F6 | 	mov	ptra, fp
07e50     BA 00 A0 FD | 	call	#popregs_
07e54                 | __system___rxtxioctl_0179_ret
07e54     2D 00 64 FD | 	ret
07e58                 | 
07e58                 | __system____dummy_flush_0180
07e58     00 18 06 F6 | 	mov	result1, #0
07e5c                 | __system____dummy_flush_0180_ret
07e5c     2D 00 64 FD | 	ret
07e60                 | 
07e60                 | __system___vfswrite
07e60     0B 5A 05 F6 | 	mov	COUNT_, #11
07e64     B0 00 A0 FD | 	call	#pushregs_
07e68     2F 6D 02 F6 | 	mov	local01, arg01
07e6c     30 6F 02 F6 | 	mov	local02, arg02
07e70     31 71 02 F6 | 	mov	local03, arg03
07e74     37 73 02 F6 | 	mov	local04, local02
07e78     08 6C 06 F1 | 	add	local01, #8
07e7c     36 75 02 FB | 	rdlong	local05, local01
07e80     08 6C 86 F1 | 	sub	local01, #8
07e84     02 74 CE F7 | 	test	local05, #2 wz
07e88     14 00 90 5D |  if_ne	jmp	#LR__0430
07e8c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07e90     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07e94     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07e98     01 18 66 F6 | 	neg	result1, #1
07e9c     60 01 90 FD | 	jmp	#LR__0438
07ea0                 | LR__0430
07ea0     08 6C 06 F1 | 	add	local01, #8
07ea4     36 75 02 FB | 	rdlong	local05, local01
07ea8     08 6C 86 F1 | 	sub	local01, #8
07eac     40 74 CE F7 | 	test	local05, #64 wz
07eb0     5C 00 90 AD |  if_e	jmp	#LR__0432
07eb4     08 6C 06 F1 | 	add	local01, #8
07eb8     36 75 02 FB | 	rdlong	local05, local01
07ebc     08 6C 86 F1 | 	sub	local01, #8
07ec0     80 74 CE F7 | 	test	local05, #128 wz
07ec4     48 00 90 AD |  if_e	jmp	#LR__0431
07ec8     2C 6C 06 F1 | 	add	local01, #44
07ecc     36 75 02 FB | 	rdlong	local05, local01
07ed0     2C 6C 86 F1 | 	sub	local01, #44
07ed4     3A 77 02 FB | 	rdlong	local06, local05
07ed8     04 74 06 F1 | 	add	local05, #4
07edc     3A 79 02 FB | 	rdlong	local07, local05
07ee0     36 5F 02 F6 | 	mov	arg01, local01
07ee4     00 60 06 F6 | 	mov	arg02, #0
07ee8     02 62 06 F6 | 	mov	arg03, #2
07eec     FD 7A 02 F6 | 	mov	local08, objptr
07ef0     3B FB 01 F6 | 	mov	objptr, local06
07ef4     2D 78 62 FD | 	call	local07
07ef8     3D FB 01 F6 | 	mov	objptr, local08
07efc     08 6C 06 F1 | 	add	local01, #8
07f00     36 75 02 FB | 	rdlong	local05, local01
07f04     80 74 26 F5 | 	andn	local05, #128
07f08     36 75 62 FC | 	wrlong	local05, local01
07f0c     08 6C 86 F1 | 	sub	local01, #8
07f10                 | LR__0431
07f10                 | LR__0432
07f10     14 6C 06 F1 | 	add	local01, #20
07f14     36 75 0A FB | 	rdlong	local05, local01 wz
07f18     14 6C 86 F1 | 	sub	local01, #20
07f1c     74 00 90 AD |  if_e	jmp	#LR__0434
07f20     14 6C 06 F1 | 	add	local01, #20
07f24     36 75 02 FB | 	rdlong	local05, local01
07f28     14 6C 86 F1 | 	sub	local01, #20
07f2c     3A 77 02 FB | 	rdlong	local06, local05
07f30     04 74 06 F1 | 	add	local05, #4
07f34     3A 79 02 FB | 	rdlong	local07, local05
07f38     37 61 02 F6 | 	mov	arg02, local02
07f3c     38 63 02 F6 | 	mov	arg03, local03
07f40     36 5F 02 F6 | 	mov	arg01, local01
07f44     FD 7A 02 F6 | 	mov	local08, objptr
07f48     3B FB 01 F6 | 	mov	objptr, local06
07f4c     2D 78 62 FD | 	call	local07
07f50     3D FB 01 F6 | 	mov	objptr, local08
07f54     0C 7D 02 F6 | 	mov	local09, result1
07f58     00 7C 5E F2 | 	cmps	local09, #0 wcz
07f5c     2C 00 90 3D |  if_ae	jmp	#LR__0433
07f60     08 6C 06 F1 | 	add	local01, #8
07f64     36 75 02 FB | 	rdlong	local05, local01
07f68     20 74 46 F5 | 	or	local05, #32
07f6c     36 75 62 FC | 	wrlong	local05, local01
07f70     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07f74     00 7D 62 FC | 	wrlong	local09, ptr___system__dat__
07f78     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07f7c     00 7C 0E F2 | 	cmp	local09, #0 wz
07f80     01 18 66 56 |  if_ne	neg	result1, #1
07f84     00 18 06 A6 |  if_e	mov	result1, #0
07f88     74 00 90 FD | 	jmp	#LR__0438
07f8c                 | LR__0433
07f8c     3E 19 02 F6 | 	mov	result1, local09
07f90     6C 00 90 FD | 	jmp	#LR__0438
07f94                 | LR__0434
07f94     18 6C 06 F1 | 	add	local01, #24
07f98     36 7F 0A FB | 	rdlong	local10, local01 wz
07f9c     18 6C 86 F1 | 	sub	local01, #24
07fa0     14 00 90 5D |  if_ne	jmp	#LR__0435
07fa4     1C 00 06 F1 | 	add	ptr___system__dat__, #28
07fa8     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
07fac     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
07fb0     01 18 66 F6 | 	neg	result1, #1
07fb4     48 00 90 FD | 	jmp	#LR__0438
07fb8                 | LR__0435
07fb8     00 7C 06 F6 | 	mov	local09, #0
07fbc                 | LR__0436
07fbc     00 70 1E F2 | 	cmp	local03, #0 wcz
07fc0     38 00 90 ED |  if_be	jmp	#LR__0437
07fc4     3F 75 02 F6 | 	mov	local05, local10
07fc8     3A 77 02 FB | 	rdlong	local06, local05
07fcc     04 74 06 F1 | 	add	local05, #4
07fd0     3A 79 02 FB | 	rdlong	local07, local05
07fd4     39 5F C2 FA | 	rdbyte	arg01, local04
07fd8     36 61 02 F6 | 	mov	arg02, local01
07fdc     FD 80 02 F6 | 	mov	local11, objptr
07fe0     3B FB 01 F6 | 	mov	objptr, local06
07fe4     01 72 06 F1 | 	add	local04, #1
07fe8     2D 78 62 FD | 	call	local07
07fec     40 FB 01 F6 | 	mov	objptr, local11
07ff0     0C 7D 02 F1 | 	add	local09, result1
07ff4     01 70 86 F1 | 	sub	local03, #1
07ff8     C0 FF 9F FD | 	jmp	#LR__0436
07ffc                 | LR__0437
07ffc     3E 19 02 F6 | 	mov	result1, local09
08000                 | LR__0438
08000     AF F0 03 F6 | 	mov	ptra, fp
08004     BA 00 A0 FD | 	call	#popregs_
08008                 | __system___vfswrite_ret
08008     2D 00 64 FD | 	ret
0800c                 | 
0800c                 | __system___vfsread
0800c     0B 5A 05 F6 | 	mov	COUNT_, #11
08010     B0 00 A0 FD | 	call	#pushregs_
08014     28 F0 07 F1 | 	add	ptra, #40
08018     04 5E 05 F1 | 	add	fp, #4
0801c     AF 5E 62 FC | 	wrlong	arg01, fp
08020     04 5E 05 F1 | 	add	fp, #4
08024     AF 60 62 FC | 	wrlong	arg02, fp
08028     04 5E 05 F1 | 	add	fp, #4
0802c     AF 62 62 FC | 	wrlong	arg03, fp
08030     04 5E 85 F1 | 	sub	fp, #4
08034     AF 6C 02 FB | 	rdlong	local01, fp
08038     14 5E 05 F1 | 	add	fp, #20
0803c     AF 6C 62 FC | 	wrlong	local01, fp
08040     04 5E 05 F1 | 	add	fp, #4
08044     AF 00 68 FC | 	wrlong	#0, fp
08048     1C 5E 85 F1 | 	sub	fp, #28
0804c     AF 6E 02 FB | 	rdlong	local02, fp
08050     04 5E 85 F1 | 	sub	fp, #4
08054     08 6E 06 F1 | 	add	local02, #8
08058     37 6D 02 FB | 	rdlong	local01, local02
0805c     01 6C CE F7 | 	test	local01, #1 wz
08060     14 00 90 5D |  if_ne	jmp	#LR__0439
08064     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08068     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
0806c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08070     01 18 66 F6 | 	neg	result1, #1
08074     7C 02 90 FD | 	jmp	#LR__0447
08078                 | LR__0439
08078     04 5E 05 F1 | 	add	fp, #4
0807c     AF 6C 02 FB | 	rdlong	local01, fp
08080     04 5E 85 F1 | 	sub	fp, #4
08084     10 6C 06 F1 | 	add	local01, #16
08088     36 71 0A FB | 	rdlong	local03, local01 wz
0808c     AC 00 90 AD |  if_e	jmp	#LR__0441
08090     04 5E 05 F1 | 	add	fp, #4
08094     AF 72 02 FB | 	rdlong	local04, fp
08098     10 72 06 F1 | 	add	local04, #16
0809c     39 6D 02 FB | 	rdlong	local01, local04
080a0     36 6F 02 FB | 	rdlong	local02, local01
080a4     04 6C 06 F1 | 	add	local01, #4
080a8     36 71 02 FB | 	rdlong	local03, local01
080ac     AF 5E 02 FB | 	rdlong	arg01, fp
080b0     04 5E 05 F1 | 	add	fp, #4
080b4     AF 60 02 FB | 	rdlong	arg02, fp
080b8     04 5E 05 F1 | 	add	fp, #4
080bc     AF 62 02 FB | 	rdlong	arg03, fp
080c0     0C 5E 85 F1 | 	sub	fp, #12
080c4     FD 74 02 F6 | 	mov	local05, objptr
080c8     37 FB 01 F6 | 	mov	objptr, local02
080cc     2D 70 62 FD | 	call	local03
080d0     3A FB 01 F6 | 	mov	objptr, local05
080d4     10 5E 05 F1 | 	add	fp, #16
080d8     AF 18 62 FC | 	wrlong	result1, fp
080dc     10 5E 85 F1 | 	sub	fp, #16
080e0     00 18 5E F2 | 	cmps	result1, #0 wcz
080e4     44 00 90 3D |  if_ae	jmp	#LR__0440
080e8     04 5E 05 F1 | 	add	fp, #4
080ec     AF 6C 02 FB | 	rdlong	local01, fp
080f0     36 73 02 F6 | 	mov	local04, local01
080f4     08 72 06 F1 | 	add	local04, #8
080f8     39 71 02 FB | 	rdlong	local03, local04
080fc     20 70 46 F5 | 	or	local03, #32
08100     08 6C 06 F1 | 	add	local01, #8
08104     36 71 62 FC | 	wrlong	local03, local01
08108     0C 5E 05 F1 | 	add	fp, #12
0810c     AF 5E 0A FB | 	rdlong	arg01, fp wz
08110     10 5E 85 F1 | 	sub	fp, #16
08114     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08118     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
0811c     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08120     01 18 66 56 |  if_ne	neg	result1, #1
08124     00 18 06 A6 |  if_e	mov	result1, #0
08128     C8 01 90 FD | 	jmp	#LR__0447
0812c                 | LR__0440
0812c     10 5E 05 F1 | 	add	fp, #16
08130     AF 18 02 FB | 	rdlong	result1, fp
08134     10 5E 85 F1 | 	sub	fp, #16
08138     B8 01 90 FD | 	jmp	#LR__0447
0813c                 | LR__0441
0813c     04 5E 05 F1 | 	add	fp, #4
08140     AF 6C 02 FB | 	rdlong	local01, fp
08144     1C 6C 06 F1 | 	add	local01, #28
08148     36 71 02 FB | 	rdlong	local03, local01
0814c     14 5E 05 F1 | 	add	fp, #20
08150     AF 70 62 FC | 	wrlong	local03, fp
08154     AF 6C 0A FB | 	rdlong	local01, fp wz
08158     18 5E 85 F1 | 	sub	fp, #24
0815c     14 00 90 5D |  if_ne	jmp	#LR__0442
08160     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08164     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08168     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
0816c     01 18 66 F6 | 	neg	result1, #1
08170     80 01 90 FD | 	jmp	#LR__0447
08174                 | LR__0442
08174     04 5E 05 F1 | 	add	fp, #4
08178     AF 6C 02 FB | 	rdlong	local01, fp
0817c     04 5E 85 F1 | 	sub	fp, #4
08180     24 6C 06 F1 | 	add	local01, #36
08184     36 71 0A FB | 	rdlong	local03, local01 wz
08188     94 00 90 AD |  if_e	jmp	#LR__0444
0818c     04 5E 05 F1 | 	add	fp, #4
08190     AF 76 02 FB | 	rdlong	local06, fp
08194     3B 73 02 F6 | 	mov	local04, local06
08198     24 72 06 F1 | 	add	local04, #36
0819c     39 79 02 FB | 	rdlong	local07, local04
081a0     3C 6D 02 F6 | 	mov	local01, local07
081a4     36 6F 02 FB | 	rdlong	local02, local01
081a8     04 6C 06 F1 | 	add	local01, #4
081ac     36 7B 02 FB | 	rdlong	local08, local01
081b0     3D 71 02 F6 | 	mov	local03, local08
081b4     3B 7D 02 F6 | 	mov	local09, local06
081b8     00 7F 06 F6 | 	mov	local10, #256
081bc     20 5E 05 F1 | 	add	fp, #32
081c0     AF 80 02 F6 | 	mov	local11, fp
081c4     3E 5F 02 F6 | 	mov	arg01, local09
081c8     00 61 06 F6 | 	mov	arg02, #256
081cc     40 63 02 F6 | 	mov	arg03, local11
081d0     FD 74 02 F6 | 	mov	local05, objptr
081d4     37 FB 01 F6 | 	mov	objptr, local02
081d8     24 5E 85 F1 | 	sub	fp, #36
081dc     2D 70 62 FD | 	call	local03
081e0     3A FB 01 F6 | 	mov	objptr, local05
081e4     10 5E 05 F1 | 	add	fp, #16
081e8     AF 18 62 FC | 	wrlong	result1, fp
081ec     AF 6E 0A FB | 	rdlong	local02, fp wz
081f0     10 5E 85 F1 | 	sub	fp, #16
081f4     28 00 90 5D |  if_ne	jmp	#LR__0443
081f8     24 5E 05 F1 | 	add	fp, #36
081fc     AF 72 02 FB | 	rdlong	local04, fp
08200     24 5E 85 F1 | 	sub	fp, #36
08204     39 71 02 F6 | 	mov	local03, local04
08208     02 70 0E F5 | 	and	local03, #2 wz
0820c     10 00 90 AD |  if_e	jmp	#LR__0443
08210     01 6C 06 F6 | 	mov	local01, #1
08214     20 5E 05 F1 | 	add	fp, #32
08218     AF 02 68 FC | 	wrlong	#1, fp
0821c     20 5E 85 F1 | 	sub	fp, #32
08220                 | LR__0443
08220                 | LR__0444
08220     10 5E 05 F1 | 	add	fp, #16
08224     AF 00 68 FC | 	wrlong	#0, fp
08228     10 5E 85 F1 | 	sub	fp, #16
0822c                 | LR__0445
0822c     0C 5E 05 F1 | 	add	fp, #12
08230     AF 6C 02 FB | 	rdlong	local01, fp
08234     0C 5E 85 F1 | 	sub	fp, #12
08238     00 6C 1E F2 | 	cmp	local01, #0 wcz
0823c     A8 00 90 ED |  if_be	jmp	#LR__0446
08240     18 5E 05 F1 | 	add	fp, #24
08244     AF 6C 02 FB | 	rdlong	local01, fp
08248     36 6F 02 FB | 	rdlong	local02, local01
0824c     04 6C 06 F1 | 	add	local01, #4
08250     36 71 02 FB | 	rdlong	local03, local01
08254     14 5E 85 F1 | 	sub	fp, #20
08258     AF 5E 02 FB | 	rdlong	arg01, fp
0825c     04 5E 85 F1 | 	sub	fp, #4
08260     FD 7A 02 F6 | 	mov	local08, objptr
08264     37 FB 01 F6 | 	mov	objptr, local02
08268     2D 70 62 FD | 	call	local03
0826c     3D FB 01 F6 | 	mov	objptr, local08
08270     14 5E 05 F1 | 	add	fp, #20
08274     AF 18 62 FC | 	wrlong	result1, fp
08278     14 5E 85 F1 | 	sub	fp, #20
0827c     00 18 5E F2 | 	cmps	result1, #0 wcz
08280     64 00 90 CD |  if_b	jmp	#LR__0446
08284     1C 5E 05 F1 | 	add	fp, #28
08288     AF 6C 02 FB | 	rdlong	local01, fp
0828c     36 71 02 F6 | 	mov	local03, local01
08290     01 70 06 F1 | 	add	local03, #1
08294     AF 70 62 FC | 	wrlong	local03, fp
08298     08 5E 85 F1 | 	sub	fp, #8
0829c     AF 76 02 FB | 	rdlong	local06, fp
082a0     36 77 42 FC | 	wrbyte	local06, local01
082a4     04 5E 85 F1 | 	sub	fp, #4
082a8     AF 6C 02 FB | 	rdlong	local01, fp
082ac     01 6C 06 F1 | 	add	local01, #1
082b0     AF 6C 62 FC | 	wrlong	local01, fp
082b4     04 5E 85 F1 | 	sub	fp, #4
082b8     AF 6C 02 FB | 	rdlong	local01, fp
082bc     01 6C 86 F1 | 	sub	local01, #1
082c0     AF 6C 62 FC | 	wrlong	local01, fp
082c4     14 5E 05 F1 | 	add	fp, #20
082c8     AF 6C 0A FB | 	rdlong	local01, fp wz
082cc     20 5E 85 F1 | 	sub	fp, #32
082d0     58 FF 9F AD |  if_e	jmp	#LR__0445
082d4     14 5E 05 F1 | 	add	fp, #20
082d8     AF 70 02 FB | 	rdlong	local03, fp
082dc     14 5E 85 F1 | 	sub	fp, #20
082e0     0A 70 0E F2 | 	cmp	local03, #10 wz
082e4     44 FF 9F 5D |  if_ne	jmp	#LR__0445
082e8                 | LR__0446
082e8     10 5E 05 F1 | 	add	fp, #16
082ec     AF 18 02 FB | 	rdlong	result1, fp
082f0     10 5E 85 F1 | 	sub	fp, #16
082f4                 | LR__0447
082f4     AF F0 03 F6 | 	mov	ptra, fp
082f8     BA 00 A0 FD | 	call	#popregs_
082fc                 | __system___vfsread_ret
082fc     2D 00 64 FD | 	ret
08300                 | 
08300                 | __system____default_filbuf
08300     06 5A 05 F6 | 	mov	COUNT_, #6
08304     B0 00 A0 FD | 	call	#pushregs_
08308     2F 6D 02 FB | 	rdlong	local01, arg01
0830c     10 5E 06 F1 | 	add	arg01, #16
08310     2F 6F 02 FB | 	rdlong	local02, arg01
08314     10 5E 86 F1 | 	sub	arg01, #16
08318     37 71 02 FB | 	rdlong	local03, local02
0831c     04 6E 06 F1 | 	add	local02, #4
08320     37 73 02 FB | 	rdlong	local04, local02
08324     0C 6C 06 F1 | 	add	local01, #12
08328     36 61 02 F6 | 	mov	arg02, local01
0832c     0C 6C 86 F1 | 	sub	local01, #12
08330     0A 62 C6 F9 | 	decod	arg03, #10
08334     FD 74 02 F6 | 	mov	local05, objptr
08338     38 FB 01 F6 | 	mov	objptr, local03
0833c     2D 72 62 FD | 	call	local04
08340     3A FB 01 F6 | 	mov	objptr, local05
08344     0C 77 02 F6 | 	mov	local06, result1
08348     00 76 5E F2 | 	cmps	local06, #0 wcz
0834c     01 18 66 C6 |  if_b	neg	result1, #1
08350     28 00 90 CD |  if_b	jmp	#LR__0448
08354     36 77 62 FC | 	wrlong	local06, local01
08358     0C 6C 06 F1 | 	add	local01, #12
0835c     36 6F 02 F6 | 	mov	local02, local01
08360     08 6C 86 F1 | 	sub	local01, #8
08364     36 6F 62 FC | 	wrlong	local02, local01
08368     04 6C 06 F1 | 	add	local01, #4
0836c     36 6F 02 FB | 	rdlong	local02, local01
08370     01 6E 46 F5 | 	or	local02, #1
08374     36 6F 62 FC | 	wrlong	local02, local01
08378     3B 19 02 F6 | 	mov	result1, local06
0837c                 | LR__0448
0837c     AF F0 03 F6 | 	mov	ptra, fp
08380     BA 00 A0 FD | 	call	#popregs_
08384                 | __system____default_filbuf_ret
08384     2D 00 64 FD | 	ret
08388                 | 
08388                 | ' 	
08388                 | ' 	FUNCTION pfunc(c as integer) as integer
08388                 | ___strs_cl_pfunc
08388                 | ' 		if (i < 16) then
08388     04 FA 05 F1 | 	add	objptr, #4
0838c     FD 1E 02 FB | 	rdlong	_var01, objptr
08390     04 FA 85 F1 | 	sub	objptr, #4
08394     10 1E 5E F2 | 	cmps	_var01, #16 wcz
08398     2C 00 90 3D |  if_ae	jmp	#LR__0449
0839c     FD 20 02 FB | 	rdlong	_var02, objptr
083a0     04 FA 05 F1 | 	add	objptr, #4
083a4     FD 22 02 FB | 	rdlong	_var03, objptr
083a8     10 23 02 F1 | 	add	_var03, _var02
083ac     11 5F 42 FC | 	wrbyte	arg01, _var03
083b0     FD 1E 02 FB | 	rdlong	_var01, objptr
083b4     01 1E 06 F1 | 	add	_var01, #1
083b8     FD 1E 62 FC | 	wrlong	_var01, objptr
083bc     04 FA 85 F1 | 	sub	objptr, #4
083c0                 | ' 			p(i) = c
083c0                 | ' 			i = i+1
083c0                 | ' 			return 1
083c0     01 18 06 F6 | 	mov	result1, #1
083c4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
083c8                 | LR__0449
083c8                 | ' 			return -1
083c8     01 18 66 F6 | 	neg	result1, #1
083cc                 | ___strs_cl_pfunc_ret
083cc     2D 00 64 FD | 	ret
083d0                 | 
083d0                 | __struct__s_vfs_file_t_putchar
083d0     04 5A 05 F6 | 	mov	COUNT_, #4
083d4     B0 00 A0 FD | 	call	#pushregs_
083d8     18 FA 05 F1 | 	add	objptr, #24
083dc     FD 6C 0A FB | 	rdlong	local01, objptr wz
083e0     18 FA 85 F1 | 	sub	objptr, #24
083e4     00 18 06 A6 |  if_e	mov	result1, #0
083e8     3C 00 90 AD |  if_e	jmp	#LR__0450
083ec     18 FA 05 F1 | 	add	objptr, #24
083f0     FD 6C 02 FB | 	rdlong	local01, objptr
083f4     18 FA 85 F1 | 	sub	objptr, #24
083f8     36 6F 02 FB | 	rdlong	local02, local01
083fc     04 6C 06 F1 | 	add	local01, #4
08400     36 71 02 FB | 	rdlong	local03, local01
08404     FD 60 02 F6 | 	mov	arg02, objptr
08408     FD 72 02 F6 | 	mov	local04, objptr
0840c     37 FB 01 F6 | 	mov	objptr, local02
08410     2D 70 62 FD | 	call	local03
08414     39 FB 01 F6 | 	mov	objptr, local04
08418     00 18 5E F2 | 	cmps	result1, #0 wcz
0841c     00 6C 06 C6 |  if_b	mov	local01, #0
08420     01 6C 06 36 |  if_ae	mov	local01, #1
08424     36 19 02 F6 | 	mov	result1, local01
08428                 | LR__0450
08428     AF F0 03 F6 | 	mov	ptra, fp
0842c     BA 00 A0 FD | 	call	#popregs_
08430                 | __struct__s_vfs_file_t_putchar_ret
08430     2D 00 64 FD | 	ret
08434                 | 
08434                 | __struct__s_vfs_file_t_getchar
08434     04 5A 05 F6 | 	mov	COUNT_, #4
08438     B0 00 A0 FD | 	call	#pushregs_
0843c     1C FA 05 F1 | 	add	objptr, #28
08440     FD 6C 0A FB | 	rdlong	local01, objptr wz
08444     1C FA 85 F1 | 	sub	objptr, #28
08448     01 18 66 A6 |  if_e	neg	result1, #1
0844c     2C 00 90 AD |  if_e	jmp	#LR__0451
08450                 | '         return getcf(__this);
08450     1C FA 05 F1 | 	add	objptr, #28
08454     FD 6C 02 FB | 	rdlong	local01, objptr
08458     1C FA 85 F1 | 	sub	objptr, #28
0845c     36 6F 02 FB | 	rdlong	local02, local01
08460     04 6C 06 F1 | 	add	local01, #4
08464     36 71 02 FB | 	rdlong	local03, local01
08468     FD 5E 02 F6 | 	mov	arg01, objptr
0846c     FD 72 02 F6 | 	mov	local04, objptr
08470     37 FB 01 F6 | 	mov	objptr, local02
08474     2D 70 62 FD | 	call	local03
08478     39 FB 01 F6 | 	mov	objptr, local04
0847c                 | LR__0451
0847c     AF F0 03 F6 | 	mov	ptra, fp
08480     BA 00 A0 FD | 	call	#popregs_
08484                 | __struct__s_vfs_file_t_getchar_ret
08484     2D 00 64 FD | 	ret
08488                 | 
08488                 | __struct___bas_wrap_sender_tx
08488     04 5A 05 F6 | 	mov	COUNT_, #4
0848c     B0 00 A0 FD | 	call	#pushregs_
08490     FD 6C 02 FB | 	rdlong	local01, objptr
08494     36 6F 02 FB | 	rdlong	local02, local01
08498     04 6C 06 F1 | 	add	local01, #4
0849c     36 71 02 FB | 	rdlong	local03, local01
084a0     FD 72 02 F6 | 	mov	local04, objptr
084a4     37 FB 01 F6 | 	mov	objptr, local02
084a8     2D 70 62 FD | 	call	local03
084ac     39 FB 01 F6 | 	mov	objptr, local04
084b0     01 18 06 F6 | 	mov	result1, #1
084b4     AF F0 03 F6 | 	mov	ptra, fp
084b8     BA 00 A0 FD | 	call	#popregs_
084bc                 | __struct___bas_wrap_sender_tx_ret
084bc     2D 00 64 FD | 	ret
084c0                 | 
084c0                 | LR__0452
084c0     20          | 	byte	" "
084c1     00          | 	byte	0
084c2                 | LR__0453
084c2                 | 	byte	
084c2     00          | 	byte	0
084c3                 | LR__0454
084c3                 | 	byte	
084c3     00          | 	byte	0
084c4                 | LR__0455
084c4     20 21 21 21 
084c8     20 63 6F 72 
084cc     72 75 70 74 
084d0     65 64 20 68 
084d4     65 61 70 3F 
084d8     3F 3F 20 21 
084dc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
084df     00          | 	byte	0
084e0                 | LR__0456
084e0     20 21 21 21 
084e4     20 6F 75 74 
084e8     20 6F 66 20 
084ec     68 65 61 70 
084f0     20 6D 65 6D 
084f4     6F 72 79 20 
084f8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
084fc     00          | 	byte	0
084fd                 | LR__0457
084fd     20 21 21 21 
08501     20 63 6F 72 
08505     72 75 70 74 
08509     65 64 20 68 
0850d     65 61 70 20 
08511     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
08515     00          | 	byte	0
08516                 | LR__0458
08516     4E 61 6D 65 
0851a     20 20 20 20 
0851e     20 20 20 20 
08522     20 20 20 20 
08526     20 20 20 20 
0852a     20 20 20 6C 
0852e     65 6E 20 20 
08532     20 66 74 20 
08536     76 6F 6C 20 
0853a     72 65 70 20 
0853e     20 20 72 2E 
08542     6C 65 6E 20 
08546     20 20 20 20 
0854a     20 20 20 20 
0854e     4E 61 6D 65 
08552     20 20 20 20 
08556     20 20 20 20 
0855a     20 20 20 20 
0855e     20 20 20 20 
08562     20 20 20 6C 
08566     65 6E 20 20 
0856a     20 66 74 20 
0856e     76 6F 6C 20 
08572     72 65 70 20 
08576     20 20 72 2E 
0857a     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
0857e     00          | 	byte	0
0857f                 | LR__0459
0857f     53          | 	byte	"S"
08580     00          | 	byte	0
08581                 | LR__0460
08581     20 20 20 20 
08585     20 20 20 20 
08589     20 20 20 20 
0858d     20 20 20 20 
08591     20 20 20 20 
08595     20 20       | 	byte	"                      "
08597     00          | 	byte	0
08598                 | LR__0461
08598                 | 	byte	
08598     00          | 	byte	0
08599                 | LR__0462
08599     20          | 	byte	" "
0859a     00          | 	byte	0
0859b                 | LR__0463
0859b     73 61 6D 70 
0859f     6C 65 73 20 
085a3     6D 6F 64 75 
085a7     6C 65       | 	byte	"samples module"
085a9     00          | 	byte	0
085aa     00 00       | 	alignl
085ac                 | _dat_
085ac     23 23 20 62 
085b0     61 6C 6C 61 
085b4     64 61 20 23 
085b8     23 00 00 00 | module file "ballada.mod"
085bc     00 00 00 00 
085c0     78 74 64 20 
085c4     2F 20 75 6E 
085c8     69 6F 6E 20 | 	byte	$00, $00, $00, $00, $78, $74, $64, $20, $2f, $20, $75, $6e, $69, $6f, $6e, $20
085cc     28 63 69 61 
085d0     29 00 00 00 
085d4     00 00 0A ED 
085d8     00 40 0A 66 | 	byte	$28, $63, $69, $61, $29, $00, $00, $00, $00, $00, $0a, $ed, $00, $40, $0a, $66
085dc     00 87 2A 2A 
085e0     20 31 38 2E 
085e4     30 31 2E 31 
085e8     39 39 32 20 | 	byte	$00, $87, $2a, $2a, $20, $31, $38, $2e, $30, $31, $2e, $31, $39, $39, $32, $20
085ec     2A 2A 00 00 
085f0     00 00 00 00 
085f4     09 FE 00 40 
085f8     07 A3 02 5A | 	byte	$2a, $2a, $00, $00, $00, $00, $00, $00, $09, $fe, $00, $40, $07, $a3, $02, $5a
085fc     00 00 00 00 
08600     00 00 00 00 
08604     00 00 00 00 
08608     00 00 00 00 
0860c     00 00 00 00 
08610     00 00       | 	byte	$00[22]
08612     05 07 00 40 
08616     00 00 00 01 
0861a     00 00 00 00 
0861e     00 00 00 00 | 	byte	$05, $07, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
08622     00 00 00 00 
08626     00 00 00 00 
0862a     00 00 00 00 
0862e     00 00       | 	byte	$00[14]
08630     03 2A 00 40 
08634     02 C5 00 65 
08638     00 00 00 00 
0863c     00 00 00 00 | 	byte	$03, $2a, $00, $40, $02, $c5, $00, $65, $00, $00, $00, $00, $00, $00, $00, $00
08640     00 00 00 00 
08644     00 00 00 00 
08648     00 00 00 00 
0864c     00 00       | 	byte	$00[14]
0864e     0A 01 00 30 
08652     03 55 06 AC 
08656     00 00 00 00 
0865a     00 00 00 00 | 	byte	$0a, $01, $00, $30, $03, $55, $06, $ac, $00, $00, $00, $00, $00, $00, $00, $00
0865e     00 00 00 00 
08662     00 00 00 00 
08666     00 00 00 00 
0866a     00 00       | 	byte	$00[14]
0866c     09 AA 00 30 
08670     03 F4 05 B6 
08674     00 00 00 00 
08678     00 00 00 00 | 	byte	$09, $aa, $00, $30, $03, $f4, $05, $b6, $00, $00, $00, $00, $00, $00, $00, $00
0867c     00 00 00 00 
08680     00 00 00 00 
08684     00 00 00 00 
08688     00 00       | 	byte	$00[14]
0868a     01 E6 00 40 
0868e     01 97 00 4F 
08692     00 00 00 00 
08696     00 00 00 00 | 	byte	$01, $e6, $00, $40, $01, $97, $00, $4f, $00, $00, $00, $00, $00, $00, $00, $00
0869a     00 00 00 00 
0869e     00 00 00 00 
086a2     00 00 00 00 
086a6     00 00 00 00 
086aa     00 00 00 00 
086ae     00          | 	byte	$00[21]
086af     01 00 00 00 
086b3     00 00 00 00 
086b7     00 00 00 00 
086bb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
086bf     00 00 00 00 
086c3     00 00 00    | 	byte	$00[7]
086c6     08 FB 00 40 
086ca     01 EA 07 11 
086ce     00 00 00 00 
086d2     00 00 00 00 | 	byte	$08, $fb, $00, $40, $01, $ea, $07, $11, $00, $00, $00, $00, $00, $00, $00, $00
086d6     00 00 00 00 
086da     00 00 00 00 
086de     00 00 00 00 
086e2     00 00       | 	byte	$00[14]
086e4     04 5E 00 40 
086e8     00 00 00 01 
086ec     00 00 00 00 
086f0     00 00 00 00 | 	byte	$04, $5e, $00, $40, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
086f4     00 00 00 00 
086f8     00 00 00 00 
086fc     00 00 00 00 
08700     00 00       | 	byte	$00[14]
08702     08 EC 00 40 
08706     03 5C 05 90 
0870a     00 00 00 00 
0870e     00 00 00 00 | 	byte	$08, $ec, $00, $40, $03, $5c, $05, $90, $00, $00, $00, $00, $00, $00, $00, $00
08712     00 00 00 00 
08716     00 00 00 00 
0871a     00 00 00 00 
0871e     00 00 00 00 
08722     00 00 00 00 
08726     00          | 	byte	$00[21]
08727     01 00 00 00 
0872b     00 00 00 00 
0872f     00 00 00 00 
08733     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08737     00 00 00 00 
0873b     00 00 00    | 	byte	$00[7]
0873e     07 0E 00 30 
08742     00 00 00 01 
08746     00 00 00 00 
0874a     00 00 00 00 | 	byte	$07, $0e, $00, $30, $00, $00, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
0874e     00 00 00 00 
08752     00 00 00 00 
08756     00 00 00 00 
0875a     00 00 00 00 
0875e     00 00 00 00 
08762     00          | 	byte	$00[21]
08763     01 00 00 00 
08767     00 00 00 00 
0876b     00 00 00 00 
0876f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08773     00 00 00 00 
08777     00 00 00 00 
0877b     00 00 00 00 
0877f     00 00       | 	byte	$00[14]
08781     01 00 00 00 
08785     00 00 00 00 
08789     00 00 00 00 
0878d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08791     00 00 00 00 
08795     00 00 00 00 
08799     00 00 00 00 
0879d     00 00       | 	byte	$00[14]
0879f     01 00 00 00 
087a3     00 00 00 00 
087a7     00 00 00 00 
087ab     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087af     00 00 00 00 
087b3     00 00 00 00 
087b7     00 00 00 00 
087bb     00 00       | 	byte	$00[14]
087bd     01 00 00 00 
087c1     00 00 00 00 
087c5     00 00 00 00 
087c9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087cd     00 00 00 00 
087d1     00 00 00 00 
087d5     00 00 00 00 
087d9     00 00       | 	byte	$00[14]
087db     01 00 00 00 
087df     00 00 00 00 
087e3     00 00 00 00 
087e7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
087eb     00 00 00 00 
087ef     00 00 00 00 
087f3     00 00 00 00 
087f7     00 00       | 	byte	$00[14]
087f9     01 00 00 00 
087fd     00 00 00 00 
08801     00 00 00 00 
08805     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08809     00 00 00 00 
0880d     00 00 00 00 
08811     00 00 00 00 
08815     00 00       | 	byte	$00[14]
08817     01 00 00 00 
0881b     00 00 00 00 
0881f     00 00 00 00 
08823     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08827     00 00 00 00 
0882b     00 00 00 00 
0882f     00 00 00 00 
08833     00 00       | 	byte	$00[14]
08835     01 00 00 00 
08839     00 00 00 00 
0883d     00 00 00 00 
08841     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08845     00 00 00 00 
08849     00 00 00 00 
0884d     00 00 00 00 
08851     00 00       | 	byte	$00[14]
08853     01 00 00 00 
08857     00 00 00 00 
0885b     00 00 00 00 
0885f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08863     00 00 00 00 
08867     00 00 00 00 
0886b     00 00 00 00 
0886f     00 00       | 	byte	$00[14]
08871     01 00 00 00 
08875     00 00 00 00 
08879     00 00 00 00 
0887d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08881     00 00 00 00 
08885     00 00 00 00 
08889     00 00 00 00 
0888d     00 00       | 	byte	$00[14]
0888f     01 00 00 00 
08893     00 00 00 00 
08897     00 00 00 00 
0889b     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0889f     00 00 00 00 
088a3     00 00 00 00 
088a7     00 00 00 00 
088ab     00 00       | 	byte	$00[14]
088ad     01 00 00 00 
088b1     00 00 00 00 
088b5     00 00 00 00 
088b9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088bd     00 00 00 00 
088c1     00 00 00 00 
088c5     00 00 00 00 
088c9     00 00       | 	byte	$00[14]
088cb     01 00 00 00 
088cf     00 00 00 00 
088d3     00 00 00 00 
088d7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088db     00 00 00 00 
088df     00 00 00 00 
088e3     00 00 00 00 
088e7     00 00       | 	byte	$00[14]
088e9     01 00 00 00 
088ed     00 00 00 00 
088f1     00 00 00 00 
088f5     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
088f9     00 00 00 00 
088fd     00 00 00 00 
08901     00 00 00 00 
08905     00 00       | 	byte	$00[14]
08907     01 00 00 00 
0890b     00 00 00 00 
0890f     00 00 00 00 
08913     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08917     00 00 00 00 
0891b     00 00 00 00 
0891f     00 00 00 00 
08923     00 00       | 	byte	$00[14]
08925     01 00 00 00 
08929     00 00 00 00 
0892d     00 00 00 00 
08931     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08935     00 00 00 00 
08939     00 00 00 00 
0893d     00 00 00 00 
08941     00 00       | 	byte	$00[14]
08943     01 00 00 00 
08947     00 00 00 00 
0894b     00 00 00 00 
0894f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08953     00 00 00 00 
08957     00 00 00 00 
0895b     00 00 00 00 
0895f     00 00       | 	byte	$00[14]
08961     01 19 7F 00 
08965     01 02 04 03 
08969     05 06 07 03 
0896d     08 09 0A 0B | 	byte	$01, $19, $7f, $00, $01, $02, $04, $03, $05, $06, $07, $03, $08, $09, $0a, $0b
08971     0C 0D 0E 0F 
08975     0C 0D 10 11 
08979     12 14 12 13 
0897d     00 00 00 00 | 	byte	$0c, $0d, $0e, $0f, $0c, $0d, $10, $11, $12, $14, $12, $13, $00, $00, $00, $00
08981     00 00 00 00 
      ...             
089dd     00 00 00 00 
089e1     00 00 00    | 	byte	$00[99]
089e4     4D 2E 4B 2E 
089e8     01 7D 1C 10 
089ec     00 00 0F 05 
089f0     00 00 0F 73 | 	byte	$4d, $2e, $4b, $2e, $01, $7d, $1c, $10, $00, $00, $0f, $05, $00, $00, $0f, $73
089f4     00 00 0C 00 
089f8     00 00 00 00 
089fc     00 00 0C 00 
08a00     00 00 00 00 | 	byte	$00, $00, $0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00
08a04     00 00 00 00 
      ...             
08a2c     00 00 00 00 
08a30     00 00 00 00 | 	byte	$00[48]
08a34     01 7D 1C 10 
08a38     01 53 1C 18 
08a3c     00 00 00 00 
08a40     00 00 00 00 | 	byte	$01, $7d, $1c, $10, $01, $53, $1c, $18, $00, $00, $00, $00, $00, $00, $00, $00
08a44     00 00 00 00 
08a48     00 00       | 	byte	$00[6]
08a4a     0C 10 00 00 
08a4e     00 00 00 00 
08a52     00 00 01 40 
08a56     1C 20 00 00 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $01, $40, $1c, $20, $00, $00
08a5a     00 00 00 00 
08a5e     00 00 00 00 
08a62     00 00 00 00 
08a66     00 00 00    | 	byte	$00[15]
08a69     FE 1C 30 00 
08a6d     00 00 00 00 
08a71     00 00 00 00 
08a75     00 0C 18 00 | 	byte	$fe, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $18, $00
08a79     00 00 00 00 
08a7d     00 00 00 00 
08a81     00 00 00 00 
08a85     00 00 00 00 
08a89     00          | 	byte	$00[17]
08a8a     0C 20 00 00 
08a8e     00 00 00 00 
08a92     00 00 01 1D 
08a96     10 00 00 00 | 	byte	$0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $00
08a9a     00 00 00 00 
08a9e     00 00 00 00 
08aa2     00 00 00 00 
08aa6     00 00 00    | 	byte	$00[15]
08aa9     BE 10 00 00 
08aad     00 00 00 00 
08ab1     00 00 00 01 
08ab5     7D 10 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00
08ab9     00 00 00 00 
08abd     00 00 00 00 
08ac1     00 00 00 00 
08ac5     00 00 00 00 | 	byte	$00[16]
08ac9     BE 1A 06 00 
08acd     00 00 00 00 
08ad1     00 00 00 00 
08ad5     00 00 00 00 | 	byte	$be, $1a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ad9     A0 0E 93 00 
08add     00 00 00 00 
08ae1     00 00 00 00 
08ae5     00 00 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ae9     7F 10 00 00 
08aed     00 00 00 00 
08af1     00 00 00 00 
08af5     00 00 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08af9     00 00 00 00 
08afd     00 00 00 00 
08b01     00 00 00 00 | 	byte	$00[12]
08b05     BE 1C 20 00 
08b09     8F 10 00 00 
08b0d     00 00 00 00 
08b11     00 00 00 01 | 	byte	$be, $1c, $20, $00, $8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08b15     AC 1C 30 00 
08b19     00 00 00 00 
08b1d     00 00 00 00 
08b21     00 00 00 00 | 	byte	$ac, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b25     00 00 00 00 
08b29     A0 0E 93 00 
08b2d     00 00 00 00 
08b31     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b35     00 00 00 00 
08b39     A0 10 00 00 
08b3d     00 00 00 00 
08b41     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b45     00 00 00 00 
08b49     AA 10 00 00 
08b4d     00 00 00 00 
08b51     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b55     00 00 00 00 
08b59     00          | 	byte	$00[5]
08b5a     0A 06 00 00 
08b5e     00 00 00 00 
08b62     00 00 00 00 
08b66     00 00 00 BE | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08b6a     10 00 00 00 
08b6e     00 00 00 00 
08b72     00 00 01 7D 
08b76     10 00 00 00 | 	byte	$10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08b7a     00 00 00 00 
08b7e     00 00 00 00 
08b82     00 00 00 00 
08b86     00 00 00    | 	byte	$00[15]
08b89     FE 10 00 00 
08b8d     00 00 00 00 
08b91     00 00 00 00 
08b95     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08b99     00 00 00 00 
08b9d     00 00 00 00 
08ba1     00 00 00 00 
08ba5     00 00 00 00 
08ba9     00 00 00 00 
08bad     00 00 00 00 
08bb1     00 00 00 00 | 	byte	$00[28]
08bb5     BE 10 00 00 
08bb9     FE 1C 20 00 
08bbd     00 00 00 00 
08bc1     00 00 00 00 | 	byte	$be, $10, $00, $00, $fe, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bc5     00 00 00 00 
08bc9     AA 10 00 00 
08bcd     00 00 00 00 
08bd1     00 00 00 01 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08bd5     AC 10 00 00 
08bd9     00 00 00 00 
08bdd     00 00 00 00 
08be1     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08be5     00 00 00 00 
08be9     D6 10 00 00 
08bed     00 00 00 00 
08bf1     00 00 00 00 | 	byte	$00, $00, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08bf5     00 00 00 00 
      ...             
08c0d     00 00 00 00 
08c11     00 00 00 00 | 	byte	$00[32]
08c15     AA 10 00 00 
08c19     00 00 00 00 
08c1d     00 00 00 00 
08c21     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c25     00 00 00 00 
08c29     A0 10 00 00 
08c2d     00 00 00 00 
08c31     00 00 00 01 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08c35     E0 1C 30 00 
08c39     00 00 00 00 
08c3d     00 00 00 00 
08c41     00 00 00 00 | 	byte	$e0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c45     00 00 00 00 
08c49     AA 10 00 00 
08c4d     00 00 00 00 
08c51     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c55     00 00 00 00 
08c59     00 00 00 00 
08c5d     00 00 00 00 
08c61     00 00 00 00 | 	byte	$00[16]
08c65     BE 10 00 00 
08c69     AA 10 00 00 
08c6d     00 00 00 00 
08c71     00 00 00 01 | 	byte	$be, $10, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
08c75     AC 10 00 00 
08c79     00 00 00 00 
08c7d     00 00 00 00 
08c81     00 00 00 00 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08c85     00 00 00 00 
08c89     BE 14 C1 00 
08c8d     00 00 00 00 
08c91     00 00 00 01 | 	byte	$00, $00, $00, $00, $be, $14, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $01
08c95     7D 10 00 00 
08c99     00 06 02 00 
08c9d     00 00 00 00 
08ca1     00 00 00 00 | 	byte	$7d, $10, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ca5     00 0A 02 00 
08ca9     00 06 02 00 
08cad     00 00 00 00 
08cb1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cb5     00 0A 02 00 
08cb9     00 06 02 00 
08cbd     00 00 00 00 
08cc1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cc5     00 0A 02 00 
08cc9     A0 10 00 00 
08ccd     00 00 00 00 
08cd1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cd5     00 0A 02 00 
08cd9     8F 1D 01 00 
08cdd     00 00 00 00 
08ce1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $8f, $1d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ce5     00 0A 02 00 
08ce9     00 00 00 00 
08ced     00 00 00 00 
08cf1     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08cf5     00 00 00 00 
      ...             
08de5     00 00 00 00 
08de9     00          | 	byte	$00[245]
08dea     0B 01 00 00 
08dee     00 00 00 00 
08df2     00 00 00 00 
08df6     00 00 00 7F | 	byte	$0b, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08dfa     1F 05 00 BE 
08dfe     2A 02 00 00 
08e02     00 00 01 7D 
08e06     10 00 00 00 | 	byte	$1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08e0a     00 00 00 00 
08e0e     0A 02 00 00 
08e12     00 00 00 00 
08e16     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08e1a     10 00 00 00 
08e1e     0A 02 00 00 
08e22     00 00 00 00 
08e26     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08e2a     1C 20 00 00 
08e2e     0A 02 00 00 
08e32     00 00 00 00 
08e36     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08e3a     10 00 00 BE 
08e3e     0A 02 00 00 
08e42     00 00 00 00 
08e46     0A 02 00 00 | 	byte	$10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08e4a     00 00 00 00 
08e4e     0A 02 00 00 
08e52     00 00 00 00 
08e56     0A 02 00 F0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0
08e5a     40 00 00 F0 
08e5e     2A 02 00 00 
08e62     00 00 01 E0 
08e66     10 00 00 00 | 	byte	$40, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
08e6a     00 00 00 00 
08e6e     0A 02 00 00 
08e72     00 00 00 00 
08e76     00 00 00 D6 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
08e7a     4A 06 00 00 
08e7e     0A 02 00 00 
08e82     00 00 00 00 
08e86     00 00 00 F0 | 	byte	$4a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
08e8a     0E 93 00 00 
08e8e     0A 02 00 00 
08e92     00 00 00 00 
08e96     00 00 00 F0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0
08e9a     40 00 00 00 
08e9e     0A 02 00 00 
08ea2     00 00 00 00 
08ea6     0A 02 00 00 | 	byte	$40, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08eaa     00 00 00 00 
08eae     0A 02 00 00 
08eb2     00 00 00 F0 
08eb6     1A 02 00 7F | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f
08eba     10 00 00 BE 
08ebe     2A 02 00 00 
08ec2     00 00 01 7D 
08ec6     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
08eca     00 00 00 00 
08ece     0A 02 00 00 
08ed2     00 00 00 00 
08ed6     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08eda     10 00 00 00 
08ede     0A 02 00 00 
08ee2     00 00 00 00 
08ee6     00 00 00 7F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08eea     1C 20 00 00 
08eee     0A 02 00 00 
08ef2     00 00 00 00 
08ef6     00 00 00 BE | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08efa     10 00 00 BE 
08efe     00 00 00 00 
08f02     00 00 01 7D 
08f06     10 00 00 AA | 	byte	$10, $00, $00, $be, $00, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa
08f0a     1C 30 00 BE 
08f0e     0E 93 00 00 
08f12     00 00 00 00 
08f16     00 00 00 A0 | 	byte	$1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08f1a     10 00 00 D6 
08f1e     2A 02 00 00 
08f22     00 00 01 AC 
08f26     10 00 00 A0 | 	byte	$10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $a0
08f2a     1C 30 00 00 
08f2e     0A 02 00 00 
08f32     00 00 00 00 
08f36     00 00 00 AA | 	byte	$1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
08f3a     10 00 00 00 
08f3e     0A 02 00 00 
08f42     00 00 00 00 
08f46     00 00 00 BE | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
08f4a     10 00 00 D6 
08f4e     2C 20 00 00 
08f52     00 00 00 00 
08f56     00 00 00 AA | 	byte	$10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
08f5a     10 00 00 D6 
08f5e     2A 04 00 00 
08f62     00 00 00 00 
08f66     0A 02 00 00 | 	byte	$10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
08f6a     00 00 00 00 
08f6e     0A 04 00 00 
08f72     00 00 00 00 
08f76     0A 02 00 A0 | 	byte	$00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0
08f7a     10 00 00 F0 
08f7e     2A 02 00 00 
08f82     00 00 01 E0 
08f86     10 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00
08f8a     0C 20 00 00 
08f8e     0A 02 00 00 
08f92     00 00 00 00 
08f96     00 00 00 A0 | 	byte	$0c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08f9a     0E 93 00 00 
08f9e     0A 02 00 00 
08fa2     00 00 00 00 
08fa6     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
08faa     1C 20 00 00 
08fae     0A 02 00 00 
08fb2     00 00 00 F0 
08fb6     10 00 00 A0 | 	byte	$1c, $20, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0
08fba     10 00 00 F0 
08fbe     2A 02 00 00 
08fc2     00 00 00 00 
08fc6     00 00 00 00 | 	byte	$10, $00, $00, $f0, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08fca     00 00 00 00 
08fce     0A 02 00 00 
08fd2     00 00 00 00 
08fd6     00 00 00 AA | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
08fda     10 00 00 D6 
08fde     2A 01 00 00 
08fe2     00 00 01 AC 
08fe6     10 00 00 00 | 	byte	$10, $00, $00, $d6, $2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00
08fea     0C 20 00 00 
08fee     0A 01 00 00 
08ff2     00 00 00 00 
08ff6     00 00 00 AA | 	byte	$0c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
08ffa     0E 93 00 00 
08ffe     0A 01 00 00 
09002     00 00 00 00 
09006     00 00 00 A0 | 	byte	$0e, $93, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0900a     10 00 00 00 
0900e     0A 01 00 00 
09012     00 00 00 00 
09016     00 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0901a     10 00 00 00 
0901e     0A 01 00 00 
09022     00 00 01 AC 
09026     10 00 00 AA | 	byte	$10, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
0902a     1C 20 00 00 
0902e     0A 01 00 00 
09032     00 00 00 00 
09036     00 00 00 AA | 	byte	$1c, $20, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0903a     10 00 00 BE 
0903e     2A 01 00 00 
09042     00 00 01 7D 
09046     10 00 00 00 | 	byte	$10, $00, $00, $be, $2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
0904a     00 00 00 00 
0904e     0A 01 00 00 
09052     00 00 00 00 
09056     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0905a     10 00 01 7D 
0905e     2A 01 00 00 
09062     00 00 00 00 
09066     00 00 00 00 | 	byte	$10, $00, $01, $7d, $2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0906a     00 00 00 D6 
0906e     2C 38 00 00 
09072     00 00 01 AC 
09076     10 00 00 AA | 	byte	$00, $00, $00, $d6, $2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa
0907a     10 00 00 00 
0907e     0A 06 00 00 
09082     00 00 00 00 
09086     00 00 00 00 | 	byte	$10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0908a     00 00 00 D6 
0908e     0E 93 00 00 
09092     00 00 00 00 
09096     00 00 00 BE | 	byte	$00, $00, $00, $d6, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0909a     10 00 00 BE 
0909e     2C 30 00 00 
090a2     00 00 01 7D 
090a6     10 00 00 00 | 	byte	$10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00
090aa     00 00 00 00 
090ae     0A 02 00 00 
090b2     00 00 00 00 
090b6     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090ba     00 00 00 00 
090be     0A 02 00 00 
090c2     00 00 00 00 
090c6     00 00 00 00 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090ca     00 00 00 00 
090ce     0A 02 00 00 
090d2     00 00 00 00 
090d6     00 00 00 A0 | 	byte	$00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
090da     10 00 00 00 
090de     0A 02 00 00 
090e2     00 00 00 00 
090e6     00 00 00 8F | 	byte	$10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f
090ea     1D 00 00 00 
090ee     0A 02 00 00 
090f2     00 00 00 00 
090f6     00 00 00 00 | 	byte	$1d, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
090fa     00 00 00 00 
      ...             
091e2     00 00 00 00 
091e6     00 00 00    | 	byte	$00[239]
091e9     7F 1F 05 00 
091ed     BE 2A 02 00 
091f1     00 00 00 01 
091f5     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00
091f9     00 00 00 00 
091fd     00          | 	byte	$00[5]
091fe     0A 02 00 00 
09202     00 00 00 00 
09206     00 00 00 A0 
0920a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0920e     0A 02 00 00 
09212     00 00 00 00 
09216     00 00 00 7F 
0921a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0921e     0A 02 00 00 
09222     00 00 00 00 
09226     00 00 00 BE 
0922a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0922e     0A 02 00 00 
09232     00 00 00 00 
09236     0A 02 00 00 
0923a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0923e     0A 02 00 00 
09242     00 00 00 00 
09246     0A 02 00 F0 
0924a     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
0924e     2A 02 00 00 
09252     00 00 01 E0 
09256     10 00 00 00 
0925a     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
0925e     0A 02 00 00 
09262     00 00 00 00 
09266     00 00 00 D6 
0926a     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
0926e     0A 02 00 00 
09272     00 00 00 00 
09276     00 00 00 F0 
0927a     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0927e     0A 02 00 00 
09282     00 00 00 00 
09286     00 00 00 F0 
0928a     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0928e     0A 02 00 00 
09292     00 00 00 00 
09296     0A 02 00 00 
0929a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0929e     0A 02 00 00 
092a2     00 00 00 F0 
092a6     1A 02 00 7F 
092aa     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
092ae     2A 02 00 00 
092b2     00 00 01 7D 
092b6     10 00 00 00 
092ba     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
092be     0A 02 00 00 
092c2     00 00 00 00 
092c6     00 00 00 A0 
092ca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
092ce     0A 02 00 00 
092d2     00 00 00 00 
092d6     00 00 00 7F 
092da     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
092de     0A 02 00 00 
092e2     00 00 00 00 
092e6     00 00 00 BE 
092ea     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
092ee     00 00 00 00 
092f2     00 00       | 	byte	$00[6]
092f4     01 7D 10 00 
092f8     00 AA 1C 30 
092fc     00 BE 0E 93 
09300     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09304     00 00 00 00 
09308     00          | 	byte	$00[5]
09309     A0 10 00 00 
0930d     D6 2A 02 00 
09311     00 00 00 01 
09315     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $00, $00, $00, $01, $ac, $10, $00, $00
09319     A0 1C 30 00 
0931d     00 0A 02 00 
09321     00 00 00 00 
09325     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09329     AA 10 00 00 
0932d     00 0A 02 00 
09331     00 00 00 00 
09335     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09339     BE 10 00 00 
0933d     D6 2C 20 00 
09341     00 00 00 00 
09345     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09349     AA 10 00 00 
0934d     D6 2A 04 00 
09351     00 00 00 00 
09355     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09359     00 00 00 00 
0935d     00          | 	byte	$00[5]
0935e     0A 04 00 00 
09362     00 00 00 00 
09366     0A 02 00 A0 
0936a     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
0936e     2A 02 00 00 
09372     00 00 01 E0 
09376     10 00 00 00 
0937a     0C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0937e     0A 02 00 00 
09382     00 00 00 00 
09386     00 00 00 A0 
0938a     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0938e     0A 02 00 00 
09392     00 00 00 00 
09396     00 00 00 A0 
0939a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0939e     0A 02 00 00 
093a2     00 00 00 F0 
093a6     10 00 00 A0 
093aa     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
093ae     2A 02 00 00 
093b2     00 00 00 00 
093b6     00 00 00 00 
093ba     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093be     0A 02 00 00 
093c2     00 00 00 00 
093c6     00 00 00 8F 
093ca     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
093ce     2A 01 00 00 
093d2     00 00 01 AC 
093d6     10 00 00 00 
093da     0C 20 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
093de     0A 01 00 00 
093e2     00 00 00 00 
093e6     00 00 00 8F 
093ea     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
093ee     0A 01 00 00 
093f2     00 00 00 00 
093f6     00 00 00 A0 
093fa     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
093fe     0A 01 00 00 
09402     00 00 00 00 
09406     00 00 00 8F 
0940a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0940e     0A 01 00 00 
09412     00 00 01 AC 
09416     10 00 00 00 
0941a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0941e     0A 01 00 00 
09422     00 00 00 00 
09426     00 00 00 BE 
0942a     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0942e     2A 01 00 00 
09432     00 00 01 7D 
09436     10 00 00 00 
0943a     00 00 00 00 | 	byte	$2a, $01, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0943e     0A 01 00 00 
09442     00 00 00 00 
09446     00 00 00 A0 
0944a     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
0944e     2A 01 00 00 
09452     00 00 00 00 
09456     00 00 00 00 
0945a     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0945e     2C 38 00 00 
09462     00 00 01 AC 
09466     10 00 00 AA 
0946a     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
0946e     0A 06 00 00 
09472     00 00 00 00 
09476     00 00 00 00 
0947a     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0947e     0E 93 00 00 
09482     00 00 00 00 
09486     00 00 00 BE 
0948a     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0948e     2C 30 01 7D 
09492     2A 02 01 7D 
09496     10 00 00 00 
0949a     00 00 00 00 | 	byte	$2c, $30, $01, $7d, $2a, $02, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0949e     0A 02 00 00 
094a2     0A 02 00 00 
094a6     00 00 00 00 
094aa     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094ae     0A 02 00 00 
094b2     0A 02 00 00 
094b6     00 00 00 BE 
094ba     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $be, $1c, $20, $00, $00
094be     0A 02 00 00 
094c2     0A 02 00 00 
094c6     00 00 00 A0 
094ca     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
094ce     0A 02 00 00 
094d2     0A 02 00 00 
094d6     00 00 00 8F 
094da     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
094de     0A 02 00 00 
094e2     0A 02 00 00 
094e6     0D 00 00 00 
094ea     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
094ee     00 00 00 00 
      ...             
095e2     00 00 00 00 
095e6     00 00 00    | 	byte	$00[251]
095e9     7F 1F 05 00 
095ed     BE 2A 02 00 
095f1     CA 50 00 01 
095f5     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
095f9     7F 1C 30 00 
095fd     00 0A 02 00 
09601     00 00 00 00 
09605     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09609     A0 10 00 00 
0960d     00 0A 02 00 
09611     00 00 00 00 
09615     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09619     7F 1C 30 00 
0961d     00 0A 02 00 
09621     00 00 00 00 
09625     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09629     BE 10 00 00 
0962d     BE 0A 02 00 
09631     00 00 00 00 
09635     00 0A 02 00 | 	byte	$be, $10, $00, $00, $be, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09639     A0 1C 30 00 
0963d     00 0A 02 00 
09641     00 00 00 00 
09645     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09649     F0 40 00 00 
0964d     F0 2A 02 00 
09651     FE 60 00 01 
09655     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $f0, $2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
09659     00 00 00 00 
0965d     00          | 	byte	$00[5]
0965e     0A 02 00 00 
09662     00 00 00 00 
09666     00 00 00 D6 
0966a     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
0966e     0A 02 00 00 
09672     00 00 00 00 
09676     00 00 00 D6 
0967a     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $0e, $93, $00, $00
0967e     0A 02 00 00 
09682     00 00 00 00 
09686     00 00 00 F0 
0968a     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0968e     0A 02 00 00 
09692     00 00 00 00 
09696     0A 02 00 00 
0969a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0969e     0A 02 00 00 
096a2     00 00 00 F0 
096a6     1A 02 00 7F 
096aa     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
096ae     2A 02 00 CA 
096b2     50 00 01 7D 
096b6     10 00 00 00 
096ba     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
096be     0A 02 00 00 
096c2     00 00 00 00 
096c6     00 00 00 A0 
096ca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
096ce     0A 02 00 00 
096d2     00 00 00 00 
096d6     00 00 00 7F 
096da     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
096de     0A 02 00 00 
096e2     00 00 00 00 
096e6     00 00 00 BE 
096ea     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
096ee     00 00 00 00 
096f2     00 00       | 	byte	$00[6]
096f4     01 7D 10 00 
096f8     00 AA 1C 30 
096fc     00 BE 0E 93 
09700     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09704     00 00 00 00 
09708     00          | 	byte	$00[5]
09709     A0 10 00 00 
0970d     D6 2A 02 00 
09711     E2 60 00 01 
09715     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
09719     A0 1C 30 00 
0971d     00 0A 02 00 
09721     00 00 00 00 
09725     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09729     AA 10 00 00 
0972d     00 0A 02 00 
09731     00 00 00 00 
09735     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09739     BE 10 00 00 
0973d     D6 2C 20 00 
09741     00 00 00 00 
09745     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09749     AA 10 00 00 
0974d     D6 2A 04 00 
09751     00 00 00 00 
09755     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09759     00 00 00 00 
0975d     00          | 	byte	$00[5]
0975e     0A 04 00 00 
09762     00 00 00 00 
09766     0A 02 00 A0 
0976a     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
0976e     2A 02 00 FE 
09772     60 00 01 E0 
09776     10 00 00 00 
0977a     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0977e     0A 02 00 00 
09782     00 00 00 00 
09786     00 00 00 A0 
0978a     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0978e     0A 02 00 00 
09792     00 00 00 00 
09796     00 00 00 A0 
0979a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0979e     0A 02 00 00 
097a2     00 00 00 F0 
097a6     10 00 00 A0 
097aa     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
097ae     2A 02 00 00 
097b2     00 00 00 00 
097b6     00 00 00 00 
097ba     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097be     0A 02 00 00 
097c2     00 00 00 00 
097c6     00 00 00 AA 
097ca     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $d6
097ce     2A 01 00 E2 
097d2     60 00 01 AC 
097d6     10 00 00 00 
097da     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
097de     0A 01 00 00 
097e2     00 00 00 00 
097e6     00 00 00 AA 
097ea     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
097ee     0A 01 00 00 
097f2     00 00 00 00 
097f6     00 00 00 BE 
097fa     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
097fe     0A 01 00 00 
09802     00 00 00 00 
09806     00 00 00 AA 
0980a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0980e     0A 01 00 00 
09812     00 00 01 AC 
09816     10 00 00 00 
0981a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0981e     0A 01 00 00 
09822     00 00 00 00 
09826     00 00 00 BE 
0982a     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0982e     2A 01 00 CA 
09832     50 00 01 7D 
09836     10 00 00 00 
0983a     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0983e     0A 01 00 00 
09842     00 00 00 00 
09846     00 00 00 A0 
0984a     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
0984e     2A 01 00 00 
09852     00 00 00 00 
09856     00 00 00 00 
0985a     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0985e     2C 38 00 00 
09862     00 00 01 AC 
09866     10 00 00 AA 
0986a     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
0986e     0A 06 00 00 
09872     00 00 00 00 
09876     00 00 00 AA 
0987a     1E 93 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $d6
0987e     0E 93 00 00 
09882     00 00 00 00 
09886     00 00 00 BE 
0988a     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0988e     2C 30 00 00 
09892     00 00 01 7D 
09896     10 00 00 00 
0989a     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0989e     0A 02 00 00 
098a2     00 00 00 00 
098a6     00 00 00 00 
098aa     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098ae     0A 02 00 00 
098b2     00 00 00 00 
098b6     00 00 00 00 
098ba     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098be     0A 02 00 00 
098c2     00 00 00 00 
098c6     00 00 00 00 
098ca     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098ce     0A 02 00 00 
098d2     00 00 00 00 
098d6     00 00 00 00 
098da     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
098de     0A 02 00 00 
098e2     00 00 00 00 
098e6     0D 00 00 00 
098ea     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
098ee     00 00 00 00 
      ...             
099e2     00 00 00 00 
099e6     00 00 00    | 	byte	$00[251]
099e9     7F 1F 05 00 
099ed     BE 2A 02 00 
099f1     CA 5C 10 01 
099f5     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $5c, $10, $01, $7d, $10, $00, $00
099f9     00 00 00 00 
099fd     00          | 	byte	$00[5]
099fe     0A 02 00 00 
09a02     0A 10 00 00 
09a06     00 00 00 A0 
09a0a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09a0e     0A 02 00 00 
09a12     0A 10 00 00 
09a16     00 00 00 7F 
09a1a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09a1e     0A 02 00 00 
09a22     0A 10 00 00 
09a26     00 00 00 BE 
09a2a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09a2e     0A 02 00 00 
09a32     0A 10 00 00 
09a36     0A 02 00 00 
09a3a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09a3e     0A 02 00 00 
09a42     0A 10 00 00 
09a46     0A 02 00 F0 
09a4a     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
09a4e     2A 02 00 FE 
09a52     6C 20 01 E0 
09a56     10 00 00 00 
09a5a     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $6c, $20, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
09a5e     0A 02 00 00 
09a62     0A 10 00 00 
09a66     00 00 00 D6 
09a6a     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
09a6e     0A 02 00 00 
09a72     0A 10 00 00 
09a76     00 00 00 F0 
09a7a     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
09a7e     0A 02 00 00 
09a82     0A 10 00 00 
09a86     00 00 00 F0 
09a8a     40 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
09a8e     0A 02 00 00 
09a92     0A 10 00 00 
09a96     0A 02 00 00 
09a9a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
09a9e     0A 02 00 00 
09aa2     0A 10 00 F0 
09aa6     1A 02 00 7F 
09aaa     10 00 00 BE | 	byte	$0a, $02, $00, $00, $0a, $10, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
09aae     2A 02 00 CA 
09ab2     50 00 01 7D 
09ab6     10 00 00 00 
09aba     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09abe     0A 02 00 00 
09ac2     00 00 00 00 
09ac6     00 00 00 A0 
09aca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09ace     0A 02 00 00 
09ad2     00 00 00 00 
09ad6     00 00 00 7F 
09ada     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
09ade     0A 02 00 00 
09ae2     00 00 00 00 
09ae6     00 00 00 BE 
09aea     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09aee     00 00 00 00 
09af2     00 00       | 	byte	$00[6]
09af4     01 7D 10 00 
09af8     00 AA 1C 30 
09afc     00 BE 0E 93 
09b00     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
09b04     00 00 00 00 
09b08     00          | 	byte	$00[5]
09b09     A0 10 00 00 
09b0d     D6 2A 02 00 
09b11     E2 60 00 01 
09b15     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
09b19     A0 1C 30 00 
09b1d     00 0A 02 00 
09b21     00 00 00 00 
09b25     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b29     AA 10 00 00 
09b2d     00 0A 02 00 
09b31     00 00 00 00 
09b35     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b39     BE 10 00 00 
09b3d     D6 2C 20 00 
09b41     00 00 00 00 
09b45     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b49     AA 10 00 00 
09b4d     D6 2A 04 00 
09b51     00 00 00 00 
09b55     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
09b59     00 00 00 00 
09b5d     00          | 	byte	$00[5]
09b5e     0A 04 00 00 
09b62     00 00 00 00 
09b66     0A 02 00 A0 
09b6a     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
09b6e     2A 02 00 FE 
09b72     60 00 01 E0 
09b76     10 00 00 00 
09b7a     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
09b7e     0A 02 00 00 
09b82     00 00 00 00 
09b86     00 00 00 A0 
09b8a     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
09b8e     0A 02 00 00 
09b92     00 00 00 00 
09b96     00 00 00 A0 
09b9a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09b9e     0A 02 00 00 
09ba2     00 00 00 F0 
09ba6     10 00 00 A0 
09baa     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
09bae     2A 02 00 00 
09bb2     00 00 00 00 
09bb6     00 00 00 00 
09bba     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bbe     0A 02 00 00 
09bc2     00 00 00 00 
09bc6     00 00 00 8F 
09bca     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
09bce     2A 01 00 E2 
09bd2     60 00 01 AC 
09bd6     10 00 00 00 
09bda     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
09bde     0A 01 00 00 
09be2     00 00 00 00 
09be6     00 00 00 8F 
09bea     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
09bee     0A 01 00 00 
09bf2     00 00 00 00 
09bf6     00 00 00 A0 
09bfa     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09bfe     0A 01 00 00 
09c02     00 00 00 00 
09c06     00 00 00 8F 
09c0a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09c0e     0A 01 00 00 
09c12     00 00 01 AC 
09c16     10 00 00 00 
09c1a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
09c1e     0A 01 00 00 
09c22     00 00 00 00 
09c26     00 00 00 BE 
09c2a     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
09c2e     2A 01 00 CA 
09c32     50 00 01 7D 
09c36     10 00 00 00 
09c3a     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09c3e     0A 01 00 00 
09c42     00 00 00 00 
09c46     00 00 00 A0 
09c4a     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
09c4e     2A 01 00 00 
09c52     00 00 00 00 
09c56     00 00 00 00 
09c5a     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09c5e     2C 38 00 00 
09c62     00 00 01 AC 
09c66     10 00 00 8F 
09c6a     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
09c6e     0A 06 00 00 
09c72     00 00 00 00 
09c76     00 00 00 00 
09c7a     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
09c7e     0E 93 00 00 
09c82     00 00 00 00 
09c86     00 00 00 7F 
09c8a     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
09c8e     2C 30 00 00 
09c92     00 00 01 7D 
09c96     10 00 00 00 
09c9a     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
09c9e     0A 02 00 00 
09ca2     00 00 00 00 
09ca6     00 00 00 00 
09caa     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cae     0A 02 00 00 
09cb2     00 00 00 00 
09cb6     00 00 00 00 
09cba     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cbe     0A 02 00 00 
09cc2     00 00 00 00 
09cc6     00 00 00 A0 
09cca     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09cce     0A 02 00 00 
09cd2     00 00 00 00 
09cd6     00 00 00 8F 
09cda     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
09cde     0A 02 00 00 
09ce2     00 00 00 00 
09ce6     0D 00 00 00 
09cea     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
09cee     00 00 00 00 
      ...             
09de2     00 00 00 00 
09de6     00 00 00    | 	byte	$00[251]
09de9     7F 1F 05 00 
09ded     BE 2A 02 00 
09df1     CA 50 00 01 
09df5     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
09df9     00 0A 06 00 
09dfd     00 0A 02 00 
09e01     00 00 00 00 
09e05     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e09     7F 0E 93 00 
09e0d     00 0A 02 00 
09e11     00 00 00 00 
09e15     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e19     8F 1C 30 00 
09e1d     00 0A 02 00 
09e21     00 00 00 00 
09e25     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e29     BE 10 00 00 
09e2d     BE 2A 02 00 
09e31     00 00 00 00 
09e35     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e39     00 00 00 00 
09e3d     00          | 	byte	$00[5]
09e3e     0A 02 00 00 
09e42     00 00 00 00 
09e46     00 00 00 7F 
09e4a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
09e4e     0A 02 00 00 
09e52     00 00 01 40 
09e56     10 00 00 00 
09e5a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
09e5e     0A 02 00 00 
09e62     00 00 00 00 
09e66     00 00 00 F0 
09e6a     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
09e6e     2A 02 00 00 
09e72     00 00 00 00 
09e76     00 00 00 F0 
09e7a     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
09e7e     2C 20 00 00 
09e82     00 00 01 40 
09e86     1A 08 00 FE 
09e8a     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
09e8e     2A 02 00 00 
09e92     00 00 01 40 
09e96     10 00 00 FE 
09e9a     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
09e9e     0A 02 00 00 
09ea2     00 00 01 1D 
09ea6     1C 20 00 8F 
09eaa     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
09eae     2A 02 00 E2 
09eb2     60 00 01 1D 
09eb6     10 00 00 8F 
09eba     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
09ebe     0A 02 00 00 
09ec2     00 00 00 00 
09ec6     0A 06 00 A0 
09eca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
09ece     0A 02 00 00 
09ed2     00 00 01 1D 
09ed6     0E 93 00 8F 
09eda     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
09ede     0A 02 00 00 
09ee2     00 00 01 1D 
09ee6     10 00 00 AA 
09eea     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
09eee     2A 08 00 00 
09ef2     00 00 01 40 
09ef6     1A 08 00 A0 
09efa     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
09efe     2C 30 00 00 
09f02     00 00 00 00 
09f06     0A 08 00 BE 
09f0a     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
09f0e     2A 02 00 CA 
09f12     50 00 01 7D 
09f16     10 00 00 BE 
09f1a     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
09f1e     0A 02 00 00 
09f22     00 00 00 00 
09f26     00 00 00 A0 
09f2a     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
09f2e     0A 02 00 00 
09f32     00 00 00 00 
09f36     00 00 00 A0 
09f3a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
09f3e     0A 02 00 00 
09f42     00 00 00 00 
09f46     00 00 00 8F 
09f4a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09f4e     0A 02 00 00 
09f52     00 00 00 00 
09f56     00 00 00 A0 
09f5a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
09f5e     0A 02 00 00 
09f62     00 00 00 00 
09f66     00 00 00 7F 
09f6a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
09f6e     2A 02 00 00 
09f72     00 00 01 7D 
09f76     10 00 00 7F 
09f7a     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $00
09f7e     0A 02 00 00 
09f82     00 00 00 00 
09f86     00 00 00 8F 
09f8a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
09f8e     0A 02 00 00 
09f92     00 00 00 00 
09f96     00 00 00 8F 
09f9a     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
09f9e     0A 02 00 00 
09fa2     00 00 00 00 
09fa6     00 00 00 A0 
09faa     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
09fae     2A 02 00 00 
09fb2     00 00 00 00 
09fb6     00 00 00 A0 
09fba     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
09fbe     0A 02 00 00 
09fc2     00 00 00 00 
09fc6     00 00 00 F0 
09fca     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $f0
09fce     2A 02 00 FE 
09fd2     60 00 01 E0 
09fd6     10 00 00 F0 
09fda     4C 30 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
09fde     0A 02 00 00 
09fe2     00 00 00 00 
09fe6     00 00 00 7F 
09fea     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
09fee     0A 02 00 00 
09ff2     00 00 00 00 
09ff6     00 00 00 7F 
09ffa     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
09ffe     0A 02 00 00 
0a002     00 00 00 00 
0a006     00 00 00 8F 
0a00a     1A 06 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $f0
0a00e     2A 02 00 00 
0a012     00 00 00 00 
0a016     00 00 00 7F 
0a01a     0E 93 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0a01e     0A 02 00 00 
0a022     00 00 00 00 
0a026     00 00 00 7F 
0a02a     1A 01 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $be
0a02e     2A 02 00 CA 
0a032     50 00 01 7D 
0a036     10 00 00 00 
0a03a     0A 01 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $00
0a03e     0A 02 00 00 
0a042     00 00 00 00 
0a046     00 00 00 00 
0a04a     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00
0a04e     0A 02 00 00 
0a052     00 00 01 40 
0a056     10 00 00 00 
0a05a     0A 01 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $00
0a05e     0A 02 00 00 
0a062     00 00 00 00 
0a066     00 00 00 00 
0a06a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a06e     0A 02 00 00 
0a072     00 00 01 53 
0a076     19 02 00 00 
0a07a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $00, $00, $00, $00
0a07e     0A 02 00 00 
0a082     00 00 00 00 
0a086     00 00 00 7F 
0a08a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a08e     2A 02 00 00 
0a092     00 00 01 7D 
0a096     10 00 00 00 
0a09a     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a09e     0A 02 00 00 
0a0a2     00 00 00 00 
0a0a6     00 00 00 A0 
0a0aa     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a0ae     0A 02 00 00 
0a0b2     00 00 00 00 
0a0b6     00 00 00 A0 
0a0ba     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a0be     0A 02 00 00 
0a0c2     00 00 00 00 
0a0c6     00 00 00 8F 
0a0ca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a0ce     0A 02 00 00 
0a0d2     00 00 00 00 
0a0d6     00 00 00 A0 
0a0da     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0a0de     0A 02 00 00 
0a0e2     00 00 00 00 
0a0e6     0D 00 00 00 
0a0ea     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a0ee     00 00 00 00 
      ...             
0a1e2     00 00 00 00 
0a1e6     00 00 00    | 	byte	$00[251]
0a1e9     7F 1F 05 00 
0a1ed     BE 2A 02 00 
0a1f1     CA 50 00 01 
0a1f5     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a1f9     00 0A 06 00 
0a1fd     00 0A 02 00 
0a201     00 00 00 00 
0a205     00 00 00 00 | 	byte	$00, $0a, $06, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a209     7F 0E 93 00 
0a20d     00 0A 02 00 
0a211     00 00 00 00 
0a215     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a219     8F 1C 30 00 
0a21d     00 0A 02 00 
0a221     00 00 00 00 
0a225     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a229     BE 10 00 00 
0a22d     BE 2A 02 00 
0a231     00 00 00 00 
0a235     00 00 00 00 | 	byte	$be, $10, $00, $00, $be, $2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a239     00 00 00 00 
0a23d     00          | 	byte	$00[5]
0a23e     0A 02 00 00 
0a242     00 00 00 00 
0a246     00 00 00 7F 
0a24a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a24e     0A 02 00 00 
0a252     00 00 01 40 
0a256     10 00 00 00 
0a25a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0a25e     0A 02 00 00 
0a262     00 00 00 00 
0a266     00 00 00 F0 
0a26a     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $be
0a26e     2A 02 00 00 
0a272     00 00 00 00 
0a276     00 00 00 F0 
0a27a     4C 20 00 BE | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $be
0a27e     2C 20 00 00 
0a282     00 00 01 40 
0a286     1A 08 00 FE 
0a28a     40 00 00 BE | 	byte	$2c, $20, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $be
0a28e     2A 02 00 00 
0a292     00 00 01 40 
0a296     10 00 00 FE 
0a29a     4C 20 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0a29e     0A 02 00 00 
0a2a2     00 00 01 1D 
0a2a6     1C 20 00 8F 
0a2aa     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $d6
0a2ae     2A 02 00 E2 
0a2b2     60 00 01 1D 
0a2b6     10 00 00 8F 
0a2ba     1C 20 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0a2be     0A 02 00 00 
0a2c2     00 00 00 00 
0a2c6     0A 06 00 A0 
0a2ca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0a2ce     0A 02 00 00 
0a2d2     00 00 01 1D 
0a2d6     0E 93 00 8F 
0a2da     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $00
0a2de     0A 02 00 00 
0a2e2     00 00 01 1D 
0a2e6     10 00 00 AA 
0a2ea     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $d6
0a2ee     2A 08 00 00 
0a2f2     00 00 01 40 
0a2f6     1A 08 00 A0 
0a2fa     1C 20 00 D6 | 	byte	$2a, $08, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $d6
0a2fe     2C 30 00 00 
0a302     00 00 00 00 
0a306     0A 08 00 BE 
0a30a     10 00 00 BE | 	byte	$2c, $30, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $00, $be
0a30e     2A 02 00 CA 
0a312     50 00 01 7D 
0a316     10 00 00 BE 
0a31a     1C 20 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $00, $00
0a31e     0A 02 00 00 
0a322     00 00 00 00 
0a326     00 00 00 7F 
0a32a     1E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $00
0a32e     0A 02 00 00 
0a332     00 00 00 00 
0a336     00 00 00 7F 
0a33a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0a33e     0A 02 00 00 
0a342     00 00 00 00 
0a346     00 00 00 8F 
0a34a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a34e     0A 02 00 00 
0a352     00 00 00 00 
0a356     00 00 00 7F 
0a35a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a35e     0A 02 00 00 
0a362     00 00 00 00 
0a366     00 00 00 A0 
0a36a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $be
0a36e     2A 02 00 00 
0a372     00 00 01 7D 
0a376     10 00 00 A0 
0a37a     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0a37e     0A 02 00 00 
0a382     00 00 00 00 
0a386     00 00 00 AA 
0a38a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0a38e     0A 02 00 00 
0a392     00 00 00 00 
0a396     00 00 00 AA 
0a39a     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1c, $30, $00, $00
0a39e     0A 02 00 00 
0a3a2     00 00 00 00 
0a3a6     00 00 00 BE 
0a3aa     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a3ae     2A 02 00 00 
0a3b2     00 00 00 00 
0a3b6     00 00 00 BE 
0a3ba     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1c, $30, $00, $00
0a3be     0A 02 00 00 
0a3c2     00 00 00 00 
0a3c6     00 00 00 D6 
0a3ca     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $10, $00, $00, $d6
0a3ce     2A 02 00 E2 
0a3d2     60 00 01 AC 
0a3d6     10 00 00 D6 
0a3da     1C 30 00 00 | 	byte	$2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $d6, $1c, $30, $00, $00
0a3de     0A 02 00 00 
0a3e2     00 00 00 00 
0a3e6     00 00 00 FE 
0a3ea     1A 04 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $1a, $04, $00, $00
0a3ee     0A 02 00 00 
0a3f2     00 00 00 00 
0a3f6     00 00 00 FE 
0a3fa     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $fe, $0e, $93, $00, $00
0a3fe     0A 02 00 00 
0a402     00 00 00 00 
0a406     00 00 00 A0 
0a40a     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $d6
0a40e     2A 02 00 00 
0a412     00 00 01 AC 
0a416     1C 30 00 A0 
0a41a     1C 30 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $ac, $1c, $30, $00, $a0, $1c, $30, $00, $00
0a41e     0A 02 00 00 
0a422     00 00 00 00 
0a426     00 00 00 BE 
0a42a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a42e     2A 02 00 CA 
0a432     50 00 01 7D 
0a436     10 00 00 00 
0a43a     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a43e     0A 02 00 00 
0a442     00 00 00 00 
0a446     00 00 00 00 
0a44a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a44e     0A 02 00 00 
0a452     00 00 00 00 
0a456     00 00 00 00 
0a45a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a45e     0A 02 00 00 
0a462     00 00 00 00 
0a466     00 00 00 BE 
0a46a     1A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $1a, $02, $00, $00
0a46e     0A 02 00 00 
0a472     00 00 01 AC 
0a476     19 02 00 00 
0a47a     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $01, $ac, $19, $02, $00, $00, $0a, $02, $00, $00
0a47e     0A 02 00 00 
0a482     00 00 00 00 
0a486     00 00 00 00 
0a48a     0A 02 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $be
0a48e     2A 02 00 00 
0a492     00 00 01 7D 
0a496     10 00 00 00 
0a49a     0A 02 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $0a, $02, $00, $00
0a49e     0A 02 00 00 
0a4a2     00 00 00 00 
0a4a6     00 00 00 00 
0a4aa     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0a4ae     0A 02 00 00 
0a4b2     00 00 00 00 
0a4b6     00 00 00 00 
0a4ba     0A 02 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00
0a4be     0A 02 00 00 
0a4c2     00 00 00 00 
0a4c6     00 00 00 A0 
0a4ca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a4ce     0A 02 00 00 
0a4d2     00 00 00 00 
0a4d6     00 00 00 8F 
0a4da     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a4de     0A 02 00 00 
0a4e2     00 00 00 00 
0a4e6     0D 00 00 00 
0a4ea     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a4ee     00 00 00 00 
      ...             
0a5e2     00 00 00 00 
0a5e6     00 00 00    | 	byte	$00[251]
0a5e9     7F 1F 05 00 
0a5ed     BE 2A 02 00 
0a5f1     CA 50 00 01 
0a5f5     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $be, $2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a5f9     00 00 00 00 
0a5fd     00          | 	byte	$00[5]
0a5fe     0A 02 00 00 
0a602     00 00 00 00 
0a606     00 00 00 A0 
0a60a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a60e     0A 02 00 00 
0a612     00 00 00 00 
0a616     00 00 00 7F 
0a61a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a61e     0A 02 00 00 
0a622     00 00 00 00 
0a626     00 00 00 BE 
0a62a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a62e     0A 02 00 00 
0a632     00 00 00 00 
0a636     0A 02 00 00 
0a63a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a63e     0A 02 00 00 
0a642     00 00 00 00 
0a646     0A 02 00 F0 
0a64a     40 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $f0
0a64e     2A 02 00 FE 
0a652     60 00 01 E0 
0a656     10 00 00 00 
0a65a     00 00 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $00
0a65e     0A 02 00 00 
0a662     00 00 00 00 
0a666     00 00 00 D6 
0a66a     4A 06 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $00
0a66e     0A 02 00 00 
0a672     00 00 00 00 
0a676     00 00 00 F0 
0a67a     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0a67e     0A 02 00 00 
0a682     00 00 00 00 
0a686     00 00 00 F0 
0a68a     40 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0a68e     0A 02 00 00 
0a692     00 00 00 00 
0a696     0A 02 00 00 
0a69a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0a69e     0A 02 00 00 
0a6a2     00 00 00 F0 
0a6a6     1A 02 00 7F 
0a6aa     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $be
0a6ae     2A 02 00 CA 
0a6b2     50 00 01 7D 
0a6b6     10 00 00 00 
0a6ba     00 00 00 00 | 	byte	$2a, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a6be     0A 02 00 00 
0a6c2     00 00 00 00 
0a6c6     00 00 00 A0 
0a6ca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a6ce     0A 02 00 00 
0a6d2     00 00 00 00 
0a6d6     00 00 00 7F 
0a6da     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $00
0a6de     0A 02 00 00 
0a6e2     00 00 00 00 
0a6e6     00 00 00 BE 
0a6ea     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a6ee     00 00 00 00 
0a6f2     00 00       | 	byte	$00[6]
0a6f4     01 7D 10 00 
0a6f8     00 AA 1C 30 
0a6fc     00 BE 0E 93 
0a700     00 00 00 00 | 	byte	$01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00
0a704     00 00 00 00 
0a708     00          | 	byte	$00[5]
0a709     A0 10 00 00 
0a70d     D6 2A 02 00 
0a711     E2 60 00 01 
0a715     AC 10 00 00 | 	byte	$a0, $10, $00, $00, $d6, $2a, $02, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0a719     A0 1C 30 00 
0a71d     00 0A 02 00 
0a721     00 00 00 00 
0a725     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a729     AA 10 00 00 
0a72d     00 0A 02 00 
0a731     00 00 00 00 
0a735     00 00 00 00 | 	byte	$aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a739     BE 10 00 00 
0a73d     D6 2C 20 00 
0a741     00 00 00 00 
0a745     00 00 00 00 | 	byte	$be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a749     AA 10 00 00 
0a74d     D6 2A 04 00 
0a751     00 00 00 00 
0a755     00 0A 02 00 | 	byte	$aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0a759     00 00 00 00 
0a75d     00          | 	byte	$00[5]
0a75e     0A 04 00 00 
0a762     00 00 00 00 
0a766     0A 02 00 A0 
0a76a     10 00 00 F0 | 	byte	$0a, $04, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $f0
0a76e     2A 02 00 FE 
0a772     60 00 01 E0 
0a776     10 00 00 00 
0a77a     0C 20 00 00 | 	byte	$2a, $02, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0a77e     0A 02 00 00 
0a782     00 00 00 00 
0a786     00 00 00 A0 
0a78a     0E 93 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0a78e     0A 02 00 00 
0a792     00 00 00 00 
0a796     00 00 00 A0 
0a79a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a79e     0A 02 00 00 
0a7a2     00 00 00 F0 
0a7a6     10 00 00 A0 
0a7aa     10 00 00 F0 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $f0
0a7ae     2A 02 00 00 
0a7b2     00 00 00 00 
0a7b6     00 00 00 00 
0a7ba     00 00 00 00 | 	byte	$2a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7be     0A 02 00 00 
0a7c2     00 00 00 00 
0a7c6     00 00 00 8F 
0a7ca     10 00 00 D6 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $d6
0a7ce     2A 01 00 E2 
0a7d2     60 00 01 AC 
0a7d6     10 00 00 00 
0a7da     0C 20 00 00 | 	byte	$2a, $01, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $00
0a7de     0A 01 00 00 
0a7e2     00 00 00 00 
0a7e6     00 00 00 8F 
0a7ea     1E 93 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $00
0a7ee     0A 01 00 00 
0a7f2     00 00 00 00 
0a7f6     00 00 00 A0 
0a7fa     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0a7fe     0A 01 00 00 
0a802     00 00 00 00 
0a806     00 00 00 8F 
0a80a     10 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0a80e     0A 01 00 00 
0a812     00 00 01 AC 
0a816     10 00 00 00 
0a81a     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $00
0a81e     0A 01 00 00 
0a822     00 00 00 00 
0a826     00 00 00 BE 
0a82a     10 00 00 BE | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $be
0a82e     2A 01 00 CA 
0a832     50 00 01 7D 
0a836     10 00 00 00 
0a83a     00 00 00 00 | 	byte	$2a, $01, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a83e     0A 01 00 00 
0a842     00 00 00 00 
0a846     00 00 00 A0 
0a84a     10 00 01 7D | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $01, $7d
0a84e     2A 01 00 00 
0a852     00 00 00 00 
0a856     00 00 00 00 
0a85a     00 00 00 D6 | 	byte	$2a, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a85e     2C 38 00 00 
0a862     00 00 01 AC 
0a866     10 00 00 8F 
0a86a     10 00 00 00 | 	byte	$2c, $38, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $10, $00, $00, $00
0a86e     0A 06 00 00 
0a872     00 00 00 00 
0a876     00 00 00 00 
0a87a     00 00 00 D6 | 	byte	$0a, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0a87e     0E 93 00 00 
0a882     00 00 00 00 
0a886     00 00 00 7F 
0a88a     10 00 00 BE | 	byte	$0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $be
0a88e     2C 30 00 00 
0a892     00 00 01 7D 
0a896     10 00 00 00 
0a89a     00 00 00 00 | 	byte	$2c, $30, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $00
0a89e     0A 02 00 00 
0a8a2     00 00 00 00 
0a8a6     00 00 00 00 
0a8aa     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8ae     0A 02 00 00 
0a8b2     00 00 00 00 
0a8b6     00 00 00 00 
0a8ba     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8be     0A 02 00 00 
0a8c2     00 00 00 00 
0a8c6     00 00 00 A0 
0a8ca     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0a8ce     0A 02 00 00 
0a8d2     00 00 00 00 
0a8d6     00 00 00 8F 
0a8da     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0a8de     0A 02 00 00 
0a8e2     00 00 00 00 
0a8e6     0D 00 00 00 
0a8ea     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0a8ee     00 00 00 00 
      ...             
0a9e2     00 00 00 00 
0a9e6     00 00 00    | 	byte	$00[251]
0a9e9     7F 1F 05 01 
0a9ed     1D 71 08 00 
0a9f1     CA 50 00 01 
0a9f5     7D 10 00 00 | 	byte	$7f, $1f, $05, $01, $1d, $71, $08, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0a9f9     00 0A 06 01 
0a9fd     0D 73 F0 00 
0aa01     00 00 00 00 
0aa05     00 00 00 00 | 	byte	$00, $0a, $06, $01, $0d, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa09     7F 0E 93 00 
0aa0d     00 04 A1 00 
0aa11     00 00 00 00 
0aa15     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa19     8F 1C 30 00 
0aa1d     00 04 A1 00 
0aa21     00 00 00 00 
0aa25     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa29     BE 10 00 00 
0aa2d     00 04 B2 00 
0aa31     00 00 00 00 
0aa35     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa39     00 00 00 00 
0aa3d     00          | 	byte	$00[5]
0aa3e     04 B2 00 00 
0aa42     00 00 00 00 
0aa46     00 00 00 7F 
0aa4a     10 00 00 00 | 	byte	$04, $b2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $00
0aa4e     04 C2 00 00 
0aa52     00 00 01 40 
0aa56     10 00 00 00 
0aa5a     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0aa5e     04 C2 00 00 
0aa62     00 00 00 00 
0aa66     00 00 00 F0 
0aa6a     40 00 00 CA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $ca
0aa6e     70 00 00 00 
0aa72     00 00 00 00 
0aa76     00 00 00 F0 
0aa7a     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $00
0aa7e     0C 18 00 00 
0aa82     00 00 01 40 
0aa86     1A 08 00 FE 
0aa8a     40 00 00 E2 | 	byte	$0c, $18, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $e2
0aa8e     70 00 00 00 
0aa92     00 00 01 40 
0aa96     10 00 00 FE 
0aa9a     4C 20 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $00
0aa9e     0C 18 00 00 
0aaa2     00 00 01 1D 
0aaa6     1C 20 00 8F 
0aaaa     10 00 01 1D | 	byte	$0c, $18, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $01, $1d
0aaae     71 08 00 E2 
0aab2     60 00 01 1D 
0aab6     10 00 00 8F 
0aaba     1C 20 01 0D | 	byte	$71, $08, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $01, $0d
0aabe     73 F0 00 00 
0aac2     00 00 00 00 
0aac6     0A 06 00 A0 
0aaca     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0aace     04 C2 00 00 
0aad2     00 00 01 1D 
0aad6     0E 93 00 8F 
0aada     1C 20 01 0D | 	byte	$04, $c2, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $01, $0d
0aade     74 C4 00 00 
0aae2     00 00 01 1D 
0aae6     10 00 00 AA 
0aaea     10 00 01 2E | 	byte	$74, $c4, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $01, $2e
0aaee     73 F0 00 00 
0aaf2     00 00 01 40 
0aaf6     1A 08 00 A0 
0aafa     1C 20 01 0D | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $01, $0d
0aafe     7C 18 00 00 
0ab02     00 00 00 00 
0ab06     0A 08 00 BE 
0ab0a     10 00 01 1D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0ab0e     71 04 00 CA 
0ab12     50 00 01 7D 
0ab16     10 00 00 BE 
0ab1a     1C 20 01 0D | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0ab1e     73 F0 00 00 
0ab22     00 00 00 00 
0ab26     00 00 00 A0 
0ab2a     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $aa
0ab2e     74 C1 00 00 
0ab32     00 00 00 00 
0ab36     00 00 00 A0 
0ab3a     10 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0ab3e     04 C1 00 00 
0ab42     00 00 00 00 
0ab46     00 00 00 8F 
0ab4a     10 00 00 BE | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $be
0ab4e     71 04 00 00 
0ab52     00 00 00 00 
0ab56     00 00 00 A0 
0ab5a     1C 20 00 B4 | 	byte	$71, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $b4
0ab5e     73 F0 00 00 
0ab62     00 00 00 00 
0ab66     00 00 00 7F 
0ab6a     10 00 00 D6 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0ab6e     71 02 00 00 
0ab72     00 00 01 7D 
0ab76     10 00 00 7F 
0ab7a     1C 30 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $7f, $1c, $30, $00, $ca
0ab7e     73 F0 00 00 
0ab82     00 00 00 00 
0ab86     00 00 00 8F 
0ab8a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0ab8e     04 C1 00 00 
0ab92     00 00 00 00 
0ab96     00 00 00 8F 
0ab9a     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0ab9e     04 C1 00 00 
0aba2     00 00 00 00 
0aba6     00 00 00 A0 
0abaa     10 00 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0abae     70 00 00 00 
0abb2     00 00 00 00 
0abb6     00 00 00 A0 
0abba     1C 30 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $ca
0abbe     73 F0 00 00 
0abc2     00 00 00 00 
0abc6     00 00 00 F0 
0abca     40 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $e2
0abce     73 F0 00 FE 
0abd2     60 00 01 E0 
0abd6     10 00 00 F0 
0abda     4C 30 00 00 | 	byte	$73, $f0, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $f0, $4c, $30, $00, $00
0abde     04 C1 00 00 
0abe2     00 00 00 00 
0abe6     00 00 00 7F 
0abea     10 00 01 0D | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0abee     73 F0 00 00 
0abf2     00 00 00 00 
0abf6     00 00 00 7F 
0abfa     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $30, $00, $00
0abfe     04 C1 00 00 
0ac02     00 00 00 00 
0ac06     00 00 00 8F 
0ac0a     1A 06 00 E2 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1a, $06, $00, $e2
0ac0e     73 F0 00 00 
0ac12     00 00 00 00 
0ac16     00 00 00 7F 
0ac1a     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $0e, $93, $00, $00
0ac1e     04 C1 00 00 
0ac22     00 00 00 00 
0ac26     00 00 00 7F 
0ac2a     1A 01 00 D6 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1a, $01, $00, $d6
0ac2e     71 04 00 CA 
0ac32     50 00 01 7D 
0ac36     10 00 00 00 
0ac3a     0A 01 00 CA | 	byte	$71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $0a, $01, $00, $ca
0ac3e     73 F0 00 00 
0ac42     00 00 00 00 
0ac46     00 00 00 00 
0ac4a     0A 01 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $e2
0ac4e     73 F0 00 00 
0ac52     00 00 01 40 
0ac56     10 00 00 00 
0ac5a     0A 01 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $0a, $01, $00, $ca
0ac5e     7C 18 00 00 
0ac62     00 00 00 00 
0ac66     00 00 00 00 
0ac6a     0A 01 01 0D | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0a, $01, $01, $0d
0ac6e     70 00 00 00 
0ac72     00 00 01 53 
0ac76     19 02 00 00 
0ac7a     0A 01 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $01, $53, $19, $02, $00, $00, $0a, $01, $00, $e2
0ac7e     7C 18 00 00 
0ac82     00 00 00 00 
0ac86     00 00 00 7F 
0ac8a     10 00 00 D6 | 	byte	$7c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0ac8e     71 04 00 00 
0ac92     00 00 01 7D 
0ac96     10 00 00 00 
0ac9a     00 00 00 CA | 	byte	$71, $04, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0ac9e     73 F0 00 00 
0aca2     00 00 00 00 
0aca6     00 00 00 A0 
0acaa     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0acae     04 C2 00 00 
0acb2     00 00 00 00 
0acb6     00 00 00 A0 
0acba     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0acbe     06 01 00 00 
0acc2     00 00 00 00 
0acc6     00 00 00 8F 
0acca     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $00
0acce     06 01 00 00 
0acd2     00 00 00 00 
0acd6     00 00 00 A0 
0acda     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $30, $00, $00
0acde     06 01 00 00 
0ace2     00 00 00 00 
0ace6     0D 00 00 00 
0acea     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0acee     00 00 00 00 
      ...             
0ade2     00 00 00 00 
0ade6     00 00 00    | 	byte	$00[251]
0ade9     7F 1F 05 00 
0aded     B4 71 03 00 
0adf1     CA 50 00 01 
0adf5     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $b4, $71, $03, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0adf9     00 0A 06 00 
0adfd     AA 73 F0 00 
0ae01     00 00 00 00 
0ae05     00 00 00 00 | 	byte	$00, $0a, $06, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae09     7F 0E 93 00 
0ae0d     00 04 C2 00 
0ae11     00 00 00 00 
0ae15     00 00 00 00 | 	byte	$7f, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae19     8F 1C 30 00 
0ae1d     00 04 C2 00 
0ae21     00 00 00 00 
0ae25     00 00 00 00 | 	byte	$8f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae29     BE 10 00 00 
0ae2d     00 04 C2 00 
0ae31     00 00 00 00 
0ae35     00 00 00 00 | 	byte	$be, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae39     00 00 00 00 
0ae3d     00          | 	byte	$00[5]
0ae3e     04 C2 00 00 
0ae42     00 00 00 00 
0ae46     00 00 00 7F 
0ae4a     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $aa
0ae4e     74 C1 00 00 
0ae52     00 00 01 40 
0ae56     10 00 00 00 
0ae5a     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $01, $40, $10, $00, $00, $00, $00, $00, $00, $00
0ae5e     04 C2 00 00 
0ae62     00 00 00 00 
0ae66     00 00 00 F0 
0ae6a     40 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $00
0ae6e     04 C2 00 00 
0ae72     00 00 00 00 
0ae76     00 00 00 F0 
0ae7a     4C 20 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $4c, $20, $00, $b4
0ae7e     73 F0 00 00 
0ae82     00 00 01 40 
0ae86     1A 08 00 FE 
0ae8a     40 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $fe, $40, $00, $00, $aa
0ae8e     73 F0 00 00 
0ae92     00 00 01 40 
0ae96     10 00 00 FE 
0ae9a     4C 20 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $40, $10, $00, $00, $fe, $4c, $20, $00, $b4
0ae9e     73 F0 00 00 
0aea2     00 00 01 1D 
0aea6     1C 20 00 8F 
0aeaa     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $1c, $20, $00, $8f, $10, $00, $00, $ca
0aeae     73 F0 00 E2 
0aeb2     60 00 01 1D 
0aeb6     10 00 00 8F 
0aeba     1C 20 00 00 | 	byte	$73, $f0, $00, $e2, $60, $00, $01, $1d, $10, $00, $00, $8f, $1c, $20, $00, $00
0aebe     04 C1 00 00 
0aec2     00 00 00 00 
0aec6     0A 06 00 A0 
0aeca     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $06, $00, $a0, $10, $00, $00, $00
0aece     02 06 00 00 
0aed2     00 00 01 1D 
0aed6     0E 93 00 8F 
0aeda     1C 20 00 CA | 	byte	$02, $06, $00, $00, $00, $00, $01, $1d, $0e, $93, $00, $8f, $1c, $20, $00, $ca
0aede     73 F0 00 00 
0aee2     00 00 01 1D 
0aee6     10 00 00 AA 
0aeea     10 00 00 E2 | 	byte	$73, $f0, $00, $00, $00, $00, $01, $1d, $10, $00, $00, $aa, $10, $00, $00, $e2
0aeee     70 00 00 00 
0aef2     00 00 01 40 
0aef6     1A 08 00 A0 
0aefa     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $01, $40, $1a, $08, $00, $a0, $1c, $20, $00, $ca
0aefe     7C 20 00 00 
0af02     00 00 00 00 
0af06     0A 08 00 BE 
0af0a     10 00 01 1D | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $08, $00, $be, $10, $00, $01, $1d
0af0e     71 06 00 CA 
0af12     50 00 01 7D 
0af16     10 00 00 BE 
0af1a     1C 20 01 0D | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $be, $1c, $20, $01, $0d
0af1e     73 F0 00 00 
0af22     00 00 00 00 
0af26     00 00 00 7F 
0af2a     1E 93 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1e, $93, $00, $ca
0af2e     70 00 00 00 
0af32     00 00 00 00 
0af36     00 00 00 7F 
0af3a     10 00 01 0D | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $01, $0d
0af3e     7C 20 00 00 
0af42     00 00 00 00 
0af46     00 00 00 8F 
0af4a     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0af4e     70 00 00 00 
0af52     00 00 00 00 
0af56     00 00 00 7F 
0af5a     1C 20 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $ca
0af5e     7C 20 00 00 
0af62     00 00 00 00 
0af66     00 00 00 A0 
0af6a     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $aa
0af6e     70 00 00 00 
0af72     00 00 01 7D 
0af76     10 00 00 A0 
0af7a     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $a0, $1c, $30, $00, $00
0af7e     00 00 00 00 
0af82     00 00 00 00 
0af86     00 00 00    | 	byte	$00[11]
0af89     AA 10 00 00 
0af8d     B4 70 00 00 
0af91     00 00 00 00 
0af95     00 00 00 00 | 	byte	$aa, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af99     AA 1C 30 00 
0af9d     AA 7C 20 00 
0afa1     00 00 00 00 
0afa5     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afa9     BE 10 00 00 
0afad     AA 70 00 00 
0afb1     00 00 00 00 
0afb5     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afb9     BE 1C 30 00 
0afbd     B4 7C 20 00 
0afc1     00 00 00 00 
0afc5     00 00 00 00 | 	byte	$be, $1c, $30, $00, $b4, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afc9     D6 10 00 00 
0afcd     97 70 00 00 
0afd1     E2 60 00 01 
0afd5     AC 10 00 00 | 	byte	$d6, $10, $00, $00, $97, $70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00
0afd9     D6 1C 30 00 
0afdd     AA 7C 20 00 
0afe1     00 00 00 00 
0afe5     00 00 00 00 | 	byte	$d6, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afe9     FE 1A 04 00 
0afed     AA 70 00 00 
0aff1     00 00 00 00 
0aff5     00 00 00 00 | 	byte	$fe, $1a, $04, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aff9     FE 0E 93 00 
0affd     97 7C 20 00 
0b001     00 00 00 00 
0b005     00 00 00 00 | 	byte	$fe, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b009     A0 10 00 00 
0b00d     B4 70 00 00 
0b011     00 00 00 01 
0b015     AC 1C 30 00 | 	byte	$a0, $10, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $01, $ac, $1c, $30, $00
0b019     A0 1C 30 00 
0b01d     AA 7C 20 00 
0b021     00 00 00 00 
0b025     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b029     BE 10 00 00 
0b02d     AA 70 00 00 
0b031     CA 50 00 01 
0b035     7D 10 00 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b039     00 00 00 00 
0b03d     B4 73 F0 00 
0b041     00 00 00 00 
0b045     00 00 00 00 | 	byte	$00, $00, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b049     00 00 00 00 
0b04d     CA 73 F0 00 
0b051     00 00 00 00 
0b055     00 00 00 00 | 	byte	$00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b059     00 00 00 00 
0b05d     00 00 00 00 
0b061     00 00 00 00 
0b065     00 00 00 00 | 	byte	$00[16]
0b069     BE 1A 02 00 
0b06d     F0 71 0A 00 
0b071     00 0F 03 01 
0b075     AC 19 02 00 | 	byte	$be, $1a, $02, $00, $f0, $71, $0a, $00, $00, $0f, $03, $01, $ac, $19, $02, $00
0b079     00 0A 02 00 
0b07d     E2 73 F0 00 
0b081     00 0F 02 00 
0b085     00 00 00 00 | 	byte	$00, $0a, $02, $00, $e2, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b089     00 0A 02 00 
0b08d     00 0C 10 00 
0b091     00 0F 03 00 
0b095     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $0c, $10, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b099     00 0A 02 00 
0b09d     00 00 00 00 
0b0a1     00 0F 02 00 
0b0a5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b0a9     00 0A 02 00 
0b0ad     D6 71 0A 00 
0b0b1     00 0F 03 01 
0b0b5     7D 10 00 00 | 	byte	$00, $0a, $02, $00, $d6, $71, $0a, $00, $00, $0f, $03, $01, $7d, $10, $00, $00
0b0b9     00 0A 02 00 
0b0bd     CA 73 F0 00 
0b0c1     00 0F 02 00 
0b0c5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $ca, $73, $f0, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b0c9     00 0A 02 00 
0b0cd     00 04 C2 00 
0b0d1     00 0F 03 00 
0b0d5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $04, $c2, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b0d9     00 0A 02 00 
0b0dd     00 06 02 00 
0b0e1     00 0F 02 00 
0b0e5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b0e9     00 0A 02 00 
0b0ed     00 06 02 00 
0b0f1     00 0F 03 00 
0b0f5     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b0f9     00 0A 02 00 
0b0fd     00 06 02 00 
0b101     00 0F 02 00 
0b105     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b109     00 0A 02 00 
0b10d     00 06 02 00 
0b111     00 0F 03 00 
0b115     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b119     00 0A 02 00 
0b11d     00 06 02 00 
0b121     00 0F 02 00 
0b125     00 00 00 00 | 	byte	$00, $0a, $02, $00, $00, $06, $02, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b129     A0 10 00 00 
0b12d     AA 70 00 00 
0b131     00 0F 03 00 
0b135     00 00 00 00 | 	byte	$a0, $10, $00, $00, $aa, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b139     A0 1C 30 00 
0b13d     00 00 00 00 
0b141     00 0F 02 00 
0b145     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $00, $00, $00, $00
0b149     8F 10 00 00 
0b14d     97 70 00 00 
0b151     00 0F 03 00 
0b155     00 00 00 00 | 	byte	$8f, $10, $00, $00, $97, $70, $00, $00, $00, $0f, $03, $00, $00, $00, $00, $00
0b159     00 00 00 00 
0b15d     00 00 00 00 
0b161     00          | 	byte	$00[9]
0b162     0F 02 00 00 
0b166     0D 00 00 00 
0b16a     00 00 00 00 
0b16e     00 00 00 00 | 	byte	$0f, $02, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b172     00 00 00 00 
      ...             
0b1e2     00 00 00 00 
0b1e6     00 00 00    | 	byte	$00[119]
0b1e9     7F 1F 05 00 
0b1ed     8F 71 02 00 
0b1f1     CA 50 00 01 
0b1f5     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $02, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b1f9     00 00 00 00 
0b1fd     87 73 F0 00 
0b201     00 00 00 00 
0b205     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b209     A0 10 00 00 
0b20d     00 04 C1 00 
0b211     00 00 00 00 
0b215     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b219     7F 1C 20 00 
0b21d     00 04 C1 00 
0b221     00 00 00 00 
0b225     00 00 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b229     BE 10 00 00 
0b22d     00 04 C1 00 
0b231     00 00 00 00 
0b235     00 0A 02 00 | 	byte	$be, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b239     00 00 00 00 
0b23d     00          | 	byte	$00[5]
0b23e     04 C1 00 00 
0b242     00 00 00 00 
0b246     0A 02 00 F0 
0b24a     40 00 00 97 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $f0, $40, $00, $00, $97
0b24e     70 00 00 FE 
0b252     60 00 01 E0 
0b256     10 00 00 00 
0b25a     00 00 00 AA | 	byte	$70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $00, $00, $00, $aa
0b25e     73 F0 00 00 
0b262     00 00 00 00 
0b266     00 00 00 D6 
0b26a     4A 06 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6, $4a, $06, $00, $97
0b26e     73 F0 00 00 
0b272     00 00 00 00 
0b276     00 00 00 F0 
0b27a     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $0e, $93, $00, $00
0b27e     0C 10 00 00 
0b282     00 00 00 00 
0b286     00 00 00 F0 
0b28a     40 00 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $f0, $40, $00, $00, $aa
0b28e     73 F0 00 00 
0b292     00 00 00 00 
0b296     0A 02 00 00 
0b29a     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $00
0b29e     0C 10 00 00 
0b2a2     00 00 00 F0 
0b2a6     1A 02 00 7F 
0b2aa     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0b2ae     71 06 00 CA 
0b2b2     50 00 01 7D 
0b2b6     10 00 00 00 
0b2ba     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0b2be     73 F0 00 00 
0b2c2     00 00 00 00 
0b2c6     00 00 00 A0 
0b2ca     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0b2ce     70 00 00 00 
0b2d2     00 00 00 00 
0b2d6     00 00 00 7F 
0b2da     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0b2de     7C 20 00 00 
0b2e2     00 00 00 00 
0b2e6     00 00 00 BE 
0b2ea     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b2ee     70 00 00 00 
0b2f2     00 00 01 7D 
0b2f6     10 00 00 AA 
0b2fa     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0b2fe     7C 20 00 00 
0b302     00 00 00 00 
0b306     00 00 00 A0 
0b30a     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b30e     70 00 00 E2 
0b312     60 00 01 AC 
0b316     10 00 00 A0 
0b31a     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0b31e     0C 10 00 00 
0b322     00 00 00 00 
0b326     00 00 00 AA 
0b32a     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0b32e     73 F0 00 00 
0b332     00 00 00 00 
0b336     00 00 00 BE 
0b33a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0b33e     0C 10 00 00 
0b342     00 00 00 00 
0b346     00 00 00 AA 
0b34a     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0b34e     70 00 00 00 
0b352     00 00 00 00 
0b356     0A 02 00 00 
0b35a     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0b35e     7C 20 00 00 
0b362     00 00 00 00 
0b366     0A 02 00 A0 
0b36a     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0b36e     74 C1 00 FE 
0b372     60 00 01 E0 
0b376     10 00 00 00 
0b37a     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0b37e     04 C1 00 00 
0b382     00 00 00 00 
0b386     00 00 00 A0 
0b38a     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0b38e     04 C2 00 00 
0b392     00 00 00 00 
0b396     00 00 00 A0 
0b39a     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b39e     04 C2 00 00 
0b3a2     00 00 00 F0 
0b3a6     10 00 00 A0 
0b3aa     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0b3ae     73 F0 00 00 
0b3b2     00 00 00 00 
0b3b6     00 00 00 00 
0b3ba     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0b3be     70 00 00 00 
0b3c2     00 00 00 00 
0b3c6     00 00 00 8F 
0b3ca     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $a0
0b3ce     71 04 00 E2 
0b3d2     60 00 01 AC 
0b3d6     10 00 00 00 
0b3da     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0b3de     73 F0 00 00 
0b3e2     00 00 00 00 
0b3e6     00 00 00 8F 
0b3ea     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0b3ee     73 F0 00 00 
0b3f2     00 00 00 00 
0b3f6     00 00 00 A0 
0b3fa     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $97
0b3fe     7C 20 00 00 
0b402     00 00 00 00 
0b406     00 00 00 8F 
0b40a     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0b40e     70 00 00 00 
0b412     00 00 01 AC 
0b416     10 00 00 00 
0b41a     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0b41e     7C 20 00 00 
0b422     00 00 00 00 
0b426     00 00 00 BE 
0b42a     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b42e     70 00 00 CA 
0b432     50 00 01 7D 
0b436     10 00 00 00 
0b43a     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0b43e     7C 20 00 00 
0b442     00 00 00 00 
0b446     00 00 00 A0 
0b44a     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b44e     70 00 00 00 
0b452     00 00 00 00 
0b456     00 00 00 00 
0b45a     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0b45e     70 00 00 00 
0b462     00 00 01 AC 
0b466     10 00 00 8F 
0b46a     1F 03 00 F0 | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $8f, $1f, $03, $00, $f0
0b46e     71 08 00 00 
0b472     00 00 00 00 
0b476     00 00 00 00 
0b47a     0F 02 00 E2 | 	byte	$71, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $02, $00, $e2
0b47e     73 F0 00 00 
0b482     00 00 00 00 
0b486     00 00 00 00 
0b48a     0F 05 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0f, $05, $00, $00
0b48e     0C 10 00 00 
0b492     00 00 00 00 
0b496     00 00 00 7F 
0b49a     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $10, $00, $00, $d6
0b49e     71 06 00 00 
0b4a2     00 00 01 7D 
0b4a6     10 00 00 00 
0b4aa     00 00 00 CA | 	byte	$71, $06, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $ca
0b4ae     73 F0 00 00 
0b4b2     00 00 00 00 
0b4b6     00 00 00 00 
0b4ba     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4be     04 C1 00 00 
0b4c2     00 00 00 00 
0b4c6     00 00 00 00 
0b4ca     00 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4ce     06 02 00 00 
0b4d2     00 00 00 00 
0b4d6     00 00 00 A0 
0b4da     1C 20 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b4de     06 02 00 00 
0b4e2     00 00 00 00 
0b4e6     00 00 00 8F 
0b4ea     1C 30 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1c, $30, $00, $00
0b4ee     06 02 00 00 
0b4f2     00 00 00 00 
0b4f6     0D 00 00 00 
0b4fa     00 00 00 00 | 	byte	$06, $02, $00, $00, $00, $00, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0b4fe     00 00 00 00 
      ...             
0b5e2     00 00 00 00 
0b5e6     00 00 00    | 	byte	$00[235]
0b5e9     7F 1F 05 00 
0b5ed     8F 71 04 00 
0b5f1     CA 50 00 01 
0b5f5     7D 10 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $50, $00, $01, $7d, $10, $00, $00
0b5f9     7F 1C 30 00 
0b5fd     87 73 F0 00 
0b601     00 00 00 00 
0b605     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b609     A0 10 00 00 
0b60d     00 04 C1 00 
0b611     00 00 00 00 
0b615     00 00 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b619     7F 1C 30 00 
0b61d     00 04 C1 00 
0b621     00 00 00 00 
0b625     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b629     BE 10 00 00 
0b62d     AA 70 00 00 
0b631     00 00 00 00 
0b635     00 0A 02 00 | 	byte	$be, $10, $00, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b639     A0 1C 30 00 
0b63d     87 7C 20 00 
0b641     00 00 00 00 
0b645     00 0A 02 00 | 	byte	$a0, $1c, $30, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b649     F0 40 00 00 
0b64d     97 70 00 00 
0b651     FE 60 00 01 
0b655     E0 10 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $60, $00, $01, $e0, $10, $00, $00
0b659     00 00 00 00 
0b65d     AA 73 F0 00 
0b661     00 00 00 00 
0b665     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b669     D6 4A 06 00 
0b66d     97 73 F0 00 
0b671     00 00 00 00 
0b675     00 00 00 00 | 	byte	$d6, $4a, $06, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b679     D6 0E 93 00 
0b67d     00 0C 10 00 
0b681     00 00 00 00 
0b685     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b689     F0 40 00 00 
0b68d     AA 73 F0 00 
0b691     00 00 00 00 
0b695     00 0A 02 00 | 	byte	$f0, $40, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $0a, $02, $00
0b699     00 00 00 00 
0b69d     00          | 	byte	$00[5]
0b69e     0C 10 00 00 
0b6a2     00 00 00 F0 
0b6a6     1A 02 00 7F 
0b6aa     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $f0, $1a, $02, $00, $7f, $10, $00, $00, $b4
0b6ae     71 06 00 CA 
0b6b2     50 00 01 7D 
0b6b6     10 00 00 00 
0b6ba     00 00 00 AA | 	byte	$71, $06, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $aa
0b6be     73 F0 00 00 
0b6c2     00 00 00 00 
0b6c6     00 00 00 A0 
0b6ca     10 00 00 B4 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $b4
0b6ce     70 00 00 00 
0b6d2     00 00 00 00 
0b6d6     00 00 00 7F 
0b6da     1C 20 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $1c, $20, $00, $aa
0b6de     7C 20 00 00 
0b6e2     00 00 00 00 
0b6e6     00 00 00 BE 
0b6ea     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b6ee     70 00 00 00 
0b6f2     00 00 01 7D 
0b6f6     10 00 00 AA 
0b6fa     1C 30 00 B4 | 	byte	$70, $00, $00, $00, $00, $00, $01, $7d, $10, $00, $00, $aa, $1c, $30, $00, $b4
0b6fe     7C 20 00 00 
0b702     00 00 00 00 
0b706     00 00 00 A0 
0b70a     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $e2
0b70e     70 00 00 E2 
0b712     60 00 01 AC 
0b716     10 00 00 A0 
0b71a     1C 30 00 00 | 	byte	$70, $00, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $a0, $1c, $30, $00, $00
0b71e     0C 10 00 00 
0b722     00 00 00 00 
0b726     00 00 00 AA 
0b72a     10 00 00 87 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $87
0b72e     73 F0 00 00 
0b732     00 00 00 00 
0b736     00 00 00 BE 
0b73a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0b73e     0C 10 00 00 
0b742     00 00 00 00 
0b746     00 00 00 AA 
0b74a     10 00 00 97 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $97
0b74e     70 00 00 00 
0b752     00 00 00 00 
0b756     0A 02 00 00 
0b75a     00 00 00 87 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00, $87
0b75e     7C 20 00 00 
0b762     00 00 00 00 
0b766     0A 02 00 A0 
0b76a     10 00 00 AA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $a0, $10, $00, $00, $aa
0b76e     74 C1 00 FE 
0b772     60 00 01 E0 
0b776     10 00 00 00 
0b77a     0C 20 00 00 | 	byte	$74, $c1, $00, $fe, $60, $00, $01, $e0, $10, $00, $00, $00, $0c, $20, $00, $00
0b77e     04 C1 00 00 
0b782     00 00 00 00 
0b786     00 00 00 A0 
0b78a     0E 93 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0b78e     04 C2 00 00 
0b792     00 00 00 00 
0b796     00 00 00 A0 
0b79a     1C 20 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0b79e     04 C2 00 00 
0b7a2     00 00 00 F0 
0b7a6     10 00 00 A0 
0b7aa     10 00 00 B4 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $f0, $10, $00, $00, $a0, $10, $00, $00, $b4
0b7ae     73 F0 00 00 
0b7b2     00 00 00 00 
0b7b6     00 00 00 00 
0b7ba     00 00 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa
0b7be     70 00 00 00 
0b7c2     00 00 00 00 
0b7c6     00 00 00 AA 
0b7ca     10 00 00 A0 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $a0
0b7ce     71 04 00 E2 
0b7d2     60 00 01 AC 
0b7d6     10 00 00 00 
0b7da     0C 20 00 97 | 	byte	$71, $04, $00, $e2, $60, $00, $01, $ac, $10, $00, $00, $00, $0c, $20, $00, $97
0b7de     73 F0 00 00 
0b7e2     00 00 00 00 
0b7e6     00 00 00 AA 
0b7ea     1E 93 00 AA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $aa
0b7ee     73 F0 00 00 
0b7f2     00 00 00 00 
0b7f6     00 00 00 BE 
0b7fa     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0b7fe     7C 20 00 00 
0b802     00 00 00 00 
0b806     00 00 00 AA 
0b80a     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0b80e     70 00 00 00 
0b812     00 00 01 AC 
0b816     10 00 00 00 
0b81a     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $00, $00, $00, $00, $aa
0b81e     7C 20 00 00 
0b822     00 00 00 00 
0b826     00 00 00 BE 
0b82a     10 00 00 CA | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $ca
0b82e     70 00 00 CA 
0b832     50 00 01 7D 
0b836     10 00 00 00 
0b83a     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $50, $00, $01, $7d, $10, $00, $00, $00, $00, $00, $00, $b4
0b83e     7C 20 00 00 
0b842     00 00 00 00 
0b846     0F 06 00 A0 
0b84a     10 00 00 E2 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $00, $0f, $06, $00, $a0, $10, $00, $00, $e2
0b84e     70 00 00 00 
0b852     00 00 00 00 
0b856     00 00 00 00 
0b85a     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ca
0b85e     70 00 00 00 
0b862     00 00 00 00 
0b866     00 00 00 00 
0b86a     00 00 00 E2 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $e2
0b86e     74 C2 00 00 
0b872     00 00 01 AC 
0b876     10 00 00 AA 
0b87a     10 00 00 00 | 	byte	$74, $c2, $00, $00, $00, $00, $01, $ac, $10, $00, $00, $aa, $10, $00, $00, $00
0b87e     04 C2 00 00 
0b882     00 00 00 00 
0b886     0F 07 00 AA 
0b88a     1E 94 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $0f, $07, $00, $aa, $1e, $94, $00, $00
0b88e     0C 10 00 00 
0b892     00 00 00 00 
0b896     0F 08 00 BE 
0b89a     10 00 00 D6 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $0f, $08, $00, $be, $10, $00, $00, $d6
0b89e     71 02 00 00 
0b8a2     00 00 01 7D 
0b8a6     1F 0A 00 00 
0b8aa     04 A1 00 CA | 	byte	$71, $02, $00, $00, $00, $00, $01, $7d, $1f, $0a, $00, $00, $04, $a1, $00, $ca
0b8ae     73 F0 00 00 
0b8b2     00 00 00 00 
0b8b6     04 A2 00 00 
0b8ba     06 02 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $04, $a2, $00, $00, $06, $02, $00, $00
0b8be     04 C1 00 00 
0b8c2     0F 02 00 00 
0b8c6     06 02 00 00 
0b8ca     06 02 00 00 | 	byte	$04, $c1, $00, $00, $0f, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b8ce     06 02 00 00 
0b8d2     0E 60 00 00 
0b8d6     06 02 00 00 
0b8da     06 02 00 00 | 	byte	$06, $02, $00, $00, $0e, $60, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b8de     06 02 00 00 
0b8e2     0A 02 00 00 
0b8e6     06 02 00 00 
0b8ea     06 02 00 00 | 	byte	$06, $02, $00, $00, $0a, $02, $00, $00, $06, $02, $00, $00, $06, $02, $00, $00
0b8ee     06 02 00 00 
0b8f2     0E 6F 00 00 
0b8f6     06 02 00 BE 
0b8fa     3C 20 00 AA | 	byte	$06, $02, $00, $00, $0e, $6f, $00, $00, $06, $02, $00, $be, $3c, $20, $00, $aa
0b8fe     7F 05 00 00 
0b902     00 00 00 00 
0b906     06 02 00 BE 
0b90a     3C 30 00 97 | 	byte	$7f, $05, $00, $00, $00, $00, $00, $00, $06, $02, $00, $be, $3c, $30, $00, $97
0b90e     73 F0 00 00 
0b912     0D 00 00 00 
0b916     06 02 00 00 
0b91a     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $00, $06, $02, $00, $00, $00, $00, $00, $00
0b91e     00 00 00 00 
      ...             
0b9e2     00 00 00 00 
0b9e6     00 00 00    | 	byte	$00[203]
0b9e9     7F 1F 05 00 
0b9ed     8F 71 04 00 
0b9f1     CA 90 00 00 
0b9f5     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0b9f9     00 00 00 00 
0b9fd     87 73 F0 00 
0ba01     00 00 00 00 
0ba05     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba09     A0 10 00 00 
0ba0d     00 04 C2 00 
0ba11     00 00 00 00 
0ba15     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ba19     7F 1C 20 00 
0ba1d     00 04 C2 00 
0ba21     00 00 00 00 
0ba25     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ba29     BE 10 00 00 
0ba2d     97 73 F0 00 
0ba31     00 00 00 00 
0ba35     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0ba39     00 00 00 00 
0ba3d     AA 73 F0 00 
0ba41     00 00 00 00 
0ba45     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ba49     F0 40 00 00 
0ba4d     97 70 00 00 
0ba51     FE B0 00 00 
0ba55     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0ba59     00 00 00 00 
0ba5d     AA 7C 20 00 
0ba61     00 00 00 00 
0ba65     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba69     D6 4A 06 00 
0ba6d     AA 70 00 00 
0ba71     00 00 00 00 
0ba75     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $aa, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0ba79     F0 0E 93 00 
0ba7d     97 7C 20 00 
0ba81     00 00 00 00 
0ba85     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $97, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba89     F0 40 00 00 
0ba8d     B4 70 00 00 
0ba91     00 00 00 00 
0ba95     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $b4, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0ba99     00 00 00 00 
0ba9d     AA 7C 20 00 
0baa1     00 00 00 00 
0baa5     BE A0 00 00 | 	byte	$00, $00, $00, $00, $aa, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0baa9     7F 10 00 00 
0baad     CA 74 C1 00 
0bab1     CA 90 00 00 
0bab5     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $ca, $74, $c1, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bab9     00 00 00 00 
0babd     00          | 	byte	$00[5]
0babe     06 01 00 00 
0bac2     00 00 00 00 
0bac6     00 00 00 A0 
0baca     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0bace     06 01 00 00 
0bad2     00 00 00 BE 
0bad6     A0 00 00 7F 
0bada     1C 20 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0bade     06 01 00 00 
0bae2     00 00 00 BE 
0bae6     A0 00 00 BE 
0baea     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0baee     06 01 00 00 
0baf2     00 00 00 BE 
0baf6     3C 20 00 AA 
0bafa     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $1c, $30, $00, $00
0bafe     06 01 00 00 
0bb02     00 00 00 BE 
0bb06     A0 00 00 A0 
0bb0a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0bb0e     06 01 00 E2 
0bb12     B0 00 00 BE 
0bb16     D0 00 00 A0 
0bb1a     1C 30 00 00 | 	byte	$06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0bb1e     06 01 00 00 
0bb22     00 00 00 00 
0bb26     00 00 00 AA 
0bb2a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0bb2e     06 01 00 00 
0bb32     00 00 00 BE 
0bb36     A0 00 00 BE 
0bb3a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $00
0bb3e     06 01 00 00 
0bb42     00 00 00 00 
0bb46     00 00 00 AA 
0bb4a     10 00 00 B4 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $b4
0bb4e     70 00 00 00 
0bb52     00 00 00 BE 
0bb56     30 00 00 00 
0bb5a     00 00 00 CA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $ca
0bb5e     7C 20 00 00 
0bb62     00 00 00 BE 
0bb66     A0 00 00 A0 
0bb6a     10 00 00 B4 | 	byte	$7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0bb6e     71 04 00 FE 
0bb72     B0 00 00 BE 
0bb76     30 00 00 00 
0bb7a     0C 20 00 AA | 	byte	$71, $04, $00, $fe, $b0, $00, $00, $be, $30, $00, $00, $00, $0c, $20, $00, $aa
0bb7e     73 F0 00 00 
0bb82     00 00 00 00 
0bb86     00 00 00 A0 
0bb8a     0E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $0e, $93, $00, $00
0bb8e     04 C1 00 00 
0bb92     00 00 00 BE 
0bb96     A0 00 00 A0 
0bb9a     1C 20 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $1c, $20, $00, $00
0bb9e     04 C1 00 00 
0bba2     00 00 00 BE 
0bba6     A0 00 00 A0 
0bbaa     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $b4
0bbae     70 00 00 00 
0bbb2     00 00 00 BE 
0bbb6     3C 20 00 00 
0bbba     00 00 00 AA | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $aa
0bbbe     73 F0 00 00 
0bbc2     00 00 00 BE 
0bbc6     A0 00 00 8F 
0bbca     10 00 00 97 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $97
0bbce     73 F0 00 E2 
0bbd2     B0 00 00 BE 
0bbd6     D0 00 00 00 
0bbda     0C 20 00 00 | 	byte	$73, $f0, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00, $0c, $20, $00, $00
0bbde     0C 10 00 00 
0bbe2     00 00 00 00 
0bbe6     00 00 00 8F 
0bbea     1E 93 00 AA | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $1e, $93, $00, $aa
0bbee     73 F0 00 00 
0bbf2     00 00 00 BE 
0bbf6     A0 00 00 A0 
0bbfa     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0bbfe     0C 10 00 00 
0bc02     00 00 00 00 
0bc06     00 00 00 8F 
0bc0a     10 00 00 B4 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $8f, $10, $00, $00, $b4
0bc0e     74 C1 00 00 
0bc12     00 00 00 BE 
0bc16     30 00 00 00 
0bc1a     00 00 00 00 | 	byte	$74, $c1, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0bc1e     04 C1 00 00 
0bc22     00 00 00 BE 
0bc26     A0 00 00 BE 
0bc2a     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $aa
0bc2e     70 00 00 CA 
0bc32     90 00 00 BE 
0bc36     30 00 00 00 
0bc3a     00 00 00 B4 | 	byte	$70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $b4
0bc3e     73 F0 00 00 
0bc42     00 00 00 00 
0bc46     00 00 00 A0 
0bc4a     10 00 00 CA | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $ca
0bc4e     73 F0 00 00 
0bc52     00 00 00 BE 
0bc56     A0 00 00 00 
0bc5a     00 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bc5e     04 C1 00 00 
0bc62     00 00 00 BE 
0bc66     A0 00 00 8F 
0bc6a     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0bc6e     06 01 00 00 
0bc72     00 00 00 BE 
0bc76     3C 20 00 00 
0bc7a     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0bc7e     06 01 00 00 
0bc82     00 00 00 BE 
0bc86     A0 00 00 7F 
0bc8a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $00
0bc8e     06 01 00 00 
0bc92     00 00 00 BE 
0bc96     D0 00 00 00 
0bc9a     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0bc9e     04 C2 00 00 
0bca2     00 00 00 00 
0bca6     00 00 00 00 
0bcaa     00 00 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcae     06 01 00 00 
0bcb2     00 00 00 BE 
0bcb6     A0 00 00 00 
0bcba     00 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bcbe     06 01 00 00 
0bcc2     00 00 00 00 
0bcc6     00 00 00 A0 
0bcca     1C 20 00 AA | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $aa
0bcce     70 00 00 00 
0bcd2     00 00 00 BE 
0bcd6     30 00 00 8F 
0bcda     1C 30 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $97
0bcde     73 F0 00 00 
0bce2     0D 00 00 BE 
0bce6     A0 00 00 00 
0bcea     00 00 00 00 | 	byte	$73, $f0, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0bcee     00 00 00 00 
      ...             
0bde2     00 00 00 00 
0bde6     00 00 00    | 	byte	$00[251]
0bde9     7F 1F 05 00 
0bded     87 74 C2 00 
0bdf1     CA 90 00 00 
0bdf5     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $87, $74, $c2, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0bdf9     7F 1C 30 00 
0bdfd     00 04 C2 00 
0be01     00 00 00 00 
0be05     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be09     A0 10 00 00 
0be0d     00 04 C2 00 
0be11     00 00 00 00 
0be15     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0be19     7F 1C 30 00 
0be1d     00 04 C2 00 
0be21     00 00 00 00 
0be25     BE A0 00 00 | 	byte	$7f, $1c, $30, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0be29     BE 10 00 00 
0be2d     97 73 F0 00 
0be31     00 00 00 00 
0be35     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0be39     A0 1C 30 00 
0be3d     87 73 F0 00 
0be41     00 00 00 00 
0be45     BE A0 00 00 | 	byte	$a0, $1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0be49     F0 40 00 00 
0be4d     7F 70 00 00 
0be51     FE B0 00 00 
0be55     BE D0 00 00 | 	byte	$f0, $40, $00, $00, $7f, $70, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00
0be59     00 00 00 00 
0be5d     87 7C 20 00 
0be61     00 00 00 00 
0be65     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be69     D6 4A 06 00 
0be6d     87 70 00 00 
0be71     00 00 00 00 
0be75     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $87, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0be79     D6 0E 93 00 
0be7d     7F 7C 20 00 
0be81     00 00 00 00 
0be85     00 00 00 00 | 	byte	$d6, $0e, $93, $00, $7f, $7c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be89     F0 40 00 00 
0be8d     97 70 00 00 
0be91     00 00 00 00 
0be95     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $97, $70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0be99     00 00 00 00 
0be9d     87 7C 20 00 
0bea1     00 00 00 00 
0bea5     BE A0 00 00 | 	byte	$00, $00, $00, $00, $87, $7c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bea9     7F 10 00 00 
0bead     8F 71 04 00 
0beb1     CA 90 00 00 
0beb5     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $8f, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0beb9     00 00 00 00 
0bebd     87 73 F0 00 
0bec1     00 00 00 00 
0bec5     00 00 00 00 | 	byte	$00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bec9     A0 10 00 00 
0becd     00 04 C2 00 
0bed1     00 00 00 00 
0bed5     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bed9     7F 1C 20 00 
0bedd     00 06 01 00 
0bee1     00 00 00 00 
0bee5     BE A0 00 00 | 	byte	$7f, $1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bee9     BE 10 00 00 
0beed     00 06 01 00 
0bef1     00 00 00 00 
0bef5     BE 3C 20 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0bef9     AA 1C 30 00 
0befd     00 06 01 00 
0bf01     00 00 00 00 
0bf05     BE A0 00 00 | 	byte	$aa, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf09     A0 10 00 00 
0bf0d     00 06 01 00 
0bf11     E2 B0 00 00 
0bf15     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00
0bf19     A0 1C 30 00 
0bf1d     00 06 01 00 
0bf21     00 00 00 00 
0bf25     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf29     AA 10 00 00 
0bf2d     B4 71 03 00 
0bf31     00 00 00 00 
0bf35     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $b4, $71, $03, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0bf39     BE 10 00 00 
0bf3d     AA 73 F0 00 
0bf41     00 00 00 00 
0bf45     00 00 00 00 | 	byte	$be, $10, $00, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf49     AA 10 00 00 
0bf4d     B4 73 F0 00 
0bf51     00 00 00 00 
0bf55     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00
0bf59     00 00 00 00 
0bf5d     00 00 00 00 
0bf61     00 00 00 00 | 	byte	$00[12]
0bf65     BE A0 00 00 
0bf69     A0 10 00 00 
0bf6d     D6 71 06 00 
0bf71     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $71, $06, $00, $fe, $b0, $00, $00
0bf75     BE 30 00 00 
0bf79     00 0C 20 00 
0bf7d     CA 73 F0 00 
0bf81     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0bf85     00 00 00 00 
0bf89     A0 0E 93 00 
0bf8d     00 04 C2 00 
0bf91     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0bf95     BE A0 00 00 
0bf99     A0 1C 20 00 
0bf9d     00 04 C2 00 
0bfa1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0bfa5     BE A0 00 00 
0bfa9     A0 10 00 00 
0bfad     B4 73 F0 00 
0bfb1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00
0bfb5     BE 3C 20 00 
0bfb9     00 00 00 00 
0bfbd     CA 73 F0 00 
0bfc1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0bfc5     BE A0 00 00 
0bfc9     AA 10 00 00 
0bfcd     E2 74 C2 00 
0bfd1     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $e2, $b0, $00, $00
0bfd5     BE D0 00 00 
0bfd9     00 0C 20 00 
0bfdd     00 06 01 00 
0bfe1     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00
0bfe5     00 00 00 00 
0bfe9     AA 1E 93 01 
0bfed     0D 74 C2 00 
0bff1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $01, $0d, $74, $c2, $00, $00, $00, $00, $00
0bff5     BE A0 00 00 
0bff9     BE 10 00 00 
0bffd     00 0C 10 00 
0c001     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0c005     00 00 00 00 
0c009     AA 10 00 00 
0c00d     E2 74 C2 00 
0c011     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $e2, $74, $c2, $00, $00, $00, $00, $00
0c015     BE 30 00 00 
0c019     00 00 00 00 
0c01d     00 0C 10 00 
0c021     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00
0c025     BE A0 00 00 
0c029     BE 10 00 00 
0c02d     D6 71 08 00 
0c031     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $71, $08, $00, $ca, $90, $00, $00
0c035     BE 30 00 00 
0c039     00 00 00 00 
0c03d     CA 73 F0 00 
0c041     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00
0c045     00 00 00 00 
0c049     A0 10 00 00 
0c04d     00 04 C2 00 
0c051     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00
0c055     BE A0 00 00 
0c059     00 00 00 00 
0c05d     00 06 01 00 
0c061     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c065     BE A0 00 00 
0c069     AA 10 00 00 
0c06d     00 06 01 00 
0c071     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c075     BE 3C 20 00 
0c079     AA 1E 93 00 
0c07d     00 06 01 00 
0c081     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c085     BE A0 00 00 
0c089     BE 10 00 00 
0c08d     00 06 01 00 
0c091     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c095     BE D0 00 00 
0c099     00 04 A1 00 
0c09d     00 06 01 00 
0c0a1     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0a5     BE A0 00 00 
0c0a9     00 06 01 00 
0c0ad     00 06 01 00 
0c0b1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0b5     BE AC 20 00 
0c0b9     00 06 01 00 
0c0bd     00 06 01 00 
0c0c1     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0c5     BE 3C 20 00 
0c0c9     00 06 01 00 
0c0cd     00 06 01 00 
0c0d1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00
0c0d5     BE D0 00 00 
0c0d9     00 06 01 00 
0c0dd     00 06 01 00 
0c0e1     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00
0c0e5     00 00 00 00 
      ...             
0c1e1     00 00 00 00 
0c1e5     00 00 00 00 | 	byte	$00[260]
0c1e9     BE 10 00 00 
0c1ed     00 06 01 00 
0c1f1     CA 90 00 00 
0c1f5     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c1f9     00 00 00 00 
0c1fd     00          | 	byte	$00[5]
0c1fe     06 01 00 00 
0c202     00 00 00 00 
0c206     00 00 00 A0 
0c20a     1E 93 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0c20e     06 01 00 00 
0c212     00 00 00 BE 
0c216     A0 00 00 8F 
0c21a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $00
0c21e     06 01 00 00 
0c222     00 00 00 BE 
0c226     A0 00 00 A0 
0c22a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c22e     06 01 00 00 
0c232     00 00 00 BE 
0c236     3C 20 00 AA 
0c23a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0c23e     06 01 00 00 
0c242     00 00 00 BE 
0c246     A0 00 00 A0 
0c24a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0c24e     06 01 00 00 
0c252     00 00 00 BE 
0c256     D0 00 00 A0 
0c25a     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $00
0c25e     06 01 00 00 
0c262     00 00 00 00 
0c266     00 00 00 AA 
0c26a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0c26e     06 01 00 00 
0c272     00 00 00 BE 
0c276     A0 00 00 AA 
0c27a     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0c27e     06 01 00 00 
0c282     00 00 00 00 
0c286     00 00 00 BE 
0c28a     10 00 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $00
0c28e     06 01 00 00 
0c292     00 00 00 BE 
0c296     30 00 00 BE 
0c29a     1C 30 00 00 | 	byte	$06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0c29e     0C 00 00 00 
0c2a2     00 00 00 BE 
0c2a6     A0 00 00 AA 
0c2aa     10 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0c2ae     00 00 01 0D 
0c2b2     B0 00 00 BE 
0c2b6     30 00 00 00 
0c2ba     00 00 00 00 | 	byte	$00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0c2be     00 00 00 00 
0c2c2     00 00 00 00 
0c2c6     00 00 00    | 	byte	$00[11]
0c2c9     AA 1E 93 00 
0c2cd     00 00 00 00 
0c2d1     00 00 00 00 
0c2d5     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c2d9     A0 10 00 00 
0c2dd     00 00 00 00 
0c2e1     00 00 00 00 
0c2e5     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c2e9     AA 10 00 00 
0c2ed     00 00 00 00 
0c2f1     00 00 00 00 
0c2f5     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c2f9     BE 10 00 00 
0c2fd     00 00 00 00 
0c301     00 00 00 00 
0c305     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c309     AA 10 00 00 
0c30d     00 00 00 00 
0c311     00 00 00 00 
0c315     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c319     00 04 82 00 
0c31d     00 00 00 00 
0c321     00 00 00 00 
0c325     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c329     00 06 01 00 
0c32d     00 00 00 00 
0c331     00 00 00 00 
0c335     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c339     00 06 01 00 
0c33d     00 00 00 00 
0c341     00 00 00 00 
0c345     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c349     00 06 01 00 
0c34d     00 00 00 00 
0c351     00 00 00 00 
0c355     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c359     00 06 01 00 
0c35d     00 00 00 00 
0c361     00 00 00 00 
0c365     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c369     A0 10 00 00 
0c36d     00 00 00 00 
0c371     CA 90 00 00 
0c375     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c379     00 00 00 00 
0c37d     00 00 00 00 
0c381     00 00 00 00 
0c385     00 00 00 00 | 	byte	$00[16]
0c389     BE 1E 93 00 
0c38d     00 00 00 00 
0c391     00 00 00 00 
0c395     BE A0 00 00 | 	byte	$be, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c399     A0 10 00 00 
0c39d     00 00 00 00 
0c3a1     00 00 00 00 
0c3a5     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c3a9     8F 10 00 00 
0c3ad     00 00 00 00 
0c3b1     00 00 00 00 
0c3b5     BE 3C 20 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c3b9     A0 10 00 00 
0c3bd     00 00 00 00 
0c3c1     00 00 00 00 
0c3c5     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c3c9     7F 10 00 00 
0c3cd     00 00 00 00 
0c3d1     00 00 00 00 
0c3d5     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c3d9     7F 1C 30 00 
0c3dd     00 00 00 00 
0c3e1     00 00 00 00 
0c3e5     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c3e9     BE 40 00 00 
0c3ed     00 00 00 00 
0c3f1     00 00 00 00 
0c3f5     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c3f9     BE 4A 08 00 
0c3fd     00 00 00 00 
0c401     00 00 00 00 
0c405     00 00 00 00 | 	byte	$be, $4a, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c409     D6 40 00 00 
0c40d     00 00 00 00 
0c411     00 00 00 00 
0c415     BE 30 00 00 | 	byte	$d6, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c419     BE 40 00 00 
0c41d     00 00 00 00 
0c421     00 00 00 00 
0c425     BE A0 00 00 | 	byte	$be, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c429     7F 10 00 00 
0c42d     00 00 00 01 
0c431     0D B0 00 00 
0c435     BE 30 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0c439     7F 1C 30 00 
0c43d     00 00 00 00 
0c441     00 00 00 00 
0c445     00 00 00 00 | 	byte	$7f, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c449     7F 1E 93 00 
0c44d     00 00 00 00 
0c451     00 00 00 00 
0c455     BE A0 00 00 | 	byte	$7f, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c459     F0 40 00 00 
0c45d     00 00 00 00 
0c461     00 00 00 00 
0c465     BE A0 00 00 | 	byte	$f0, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c469     7F 10 00 00 
0c46d     00 00 00 00 
0c471     00 00 00 00 
0c475     BE 3C 20 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c479     8F 10 00 00 
0c47d     00 00 00 00 
0c481     00 00 00 00 
0c485     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c489     7F 10 00 00 
0c48d     00 00 00 00 
0c491     00 00 00 00 
0c495     BE D0 00 00 | 	byte	$7f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c499     00 04 81 00 
0c49d     00 00 00 00 
0c4a1     00 00 00 00 
0c4a5     00 00 00 00 | 	byte	$00, $04, $81, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4a9     00 06 01 00 
0c4ad     00 00 00 00 
0c4b1     00 00 00 00 
0c4b5     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4b9     00 06 01 00 
0c4bd     00 00 00 00 
0c4c1     00 00 00 00 
0c4c5     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4c9     00 06 01 00 
0c4cd     00 00 00 00 
0c4d1     00 00 00 00 
0c4d5     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c4d9     00 06 01 00 
0c4dd     00 0D 00 00 
0c4e1     00 00 00 00 
0c4e5     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c4e9     00 00 00 00 
      ...             
0c5e1     00 00 00 00 
0c5e5     00 00 00 00 | 	byte	$00[256]
0c5e9     BE 10 00 00 
0c5ed     00 00 00 00 
0c5f1     CA 90 00 00 
0c5f5     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c5f9     00 00 00 00 
0c5fd     00 00 00 00 
0c601     00 00 00 00 
0c605     00 00 00 00 | 	byte	$00[16]
0c609     A0 1E 93 00 
0c60d     00 00 00 00 
0c611     00 00 00 00 
0c615     BE A0 00 00 | 	byte	$a0, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c619     8F 10 00 00 
0c61d     00 00 00 00 
0c621     00 00 00 00 
0c625     BE A0 00 00 | 	byte	$8f, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c629     A0 10 00 00 
0c62d     00 00 00 00 
0c631     00 00 00 00 
0c635     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c639     AA 10 00 00 
0c63d     00 00 00 00 
0c641     00 00 00 00 
0c645     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c649     A0 10 00 00 
0c64d     00 00 00 00 
0c651     00 00 00 00 
0c655     BE D0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c659     A0 1C 30 00 
0c65d     00 00 00 00 
0c661     00 00 00 00 
0c665     00 00 00 00 | 	byte	$a0, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c669     AA 10 00 00 
0c66d     00 00 00 00 
0c671     00 00 00 00 
0c675     BE A0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c679     AA 1C 30 00 
0c67d     00 00 00 00 
0c681     00 00 00 00 
0c685     00 00 00 00 | 	byte	$aa, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c689     BE 10 00 00 
0c68d     00 00 00 00 
0c691     00 00 00 00 
0c695     BE 30 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c699     BE 1C 30 00 
0c69d     00 00 00 00 
0c6a1     00 00 00 00 
0c6a5     BE A0 00 00 | 	byte	$be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c6a9     AA 10 00 00 
0c6ad     00 00 00 01 
0c6b1     0D B0 00 00 
0c6b5     BE 30 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $01, $0d, $b0, $00, $00, $be, $30, $00, $00
0c6b9     00 00 00 00 
0c6bd     00 00 00 00 
0c6c1     00 00 00 00 
0c6c5     00 00 00 00 | 	byte	$00[16]
0c6c9     AA 1E 93 00 
0c6cd     00 00 00 00 
0c6d1     00 00 00 00 
0c6d5     BE A0 00 00 | 	byte	$aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c6d9     A0 10 00 00 
0c6dd     00 00 00 00 
0c6e1     00 00 00 00 
0c6e5     BE A0 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c6e9     AA 10 00 00 
0c6ed     00 00 00 00 
0c6f1     00 00 00 00 
0c6f5     BE 3C 20 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c6f9     BE 10 00 00 
0c6fd     00 00 00 00 
0c701     00 00 00 00 
0c705     BE A0 00 00 | 	byte	$be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c709     AA 10 00 00 
0c70d     00 00 00 00 
0c711     00 00 00 00 
0c715     BE D0 00 00 | 	byte	$aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $d0, $00, $00
0c719     00 04 82 00 
0c71d     00 00 00 00 
0c721     00 00 00 00 
0c725     00 00 00 00 | 	byte	$00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c729     00 06 01 00 
0c72d     00 00 00 00 
0c731     00 00 00 00 
0c735     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c739     00 06 01 00 
0c73d     00 00 00 00 
0c741     00 00 00 00 
0c745     00 00 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c749     00 06 01 00 
0c74d     00 00 00 00 
0c751     00 00 00 00 
0c755     BE 30 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0c759     00 06 01 00 
0c75d     00 00 00 00 
0c761     00 00 00 00 
0c765     BE A0 00 00 | 	byte	$00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c769     A0 10 00 00 
0c76d     00 00 00 00 
0c771     FE B0 00 00 
0c775     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0c779     00 0C 20 00 
0c77d     00 00 00 00 
0c781     00 00 00 00 
0c785     00 00 00 00 | 	byte	$00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c789     A0 0E 93 00 
0c78d     00 00 00 00 
0c791     00 00 00 00 
0c795     BE A0 00 00 | 	byte	$a0, $0e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c799     A0 1C 20 00 
0c79d     00 00 00 00 
0c7a1     00 00 00 00 
0c7a5     BE A0 00 00 | 	byte	$a0, $1c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0c7a9     A0 10 00 00 
0c7ad     00 00 00 00 
0c7b1     00 00 00 00 
0c7b5     BE 3C 20 00 | 	byte	$a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $3c, $20, $00
0c7b9     00 00 00 00 
0c7bd     00 00 00 00 
0c7c1     00 00 00 00 | 	byte	$00[12]
0c7c5     BE A0 00 00 
0c7c9     AA 10 00 00 
0c7cd     00 00 00 00 
0c7d1     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $e2, $b0, $00, $00
0c7d5     BE D0 00 00 
0c7d9     00 0C 20 00 
0c7dd     00 00 00 00 
0c7e1     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7e5     00 00 00 00 
0c7e9     AA 1E 93 00 
0c7ed     00 00 00 00 
0c7f1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c7f5     BE A0 00 00 
0c7f9     BE 10 00 00 
0c7fd     00 00 00 00 
0c801     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c805     00 00 00 00 
0c809     AA 10 00 00 
0c80d     00 00 00 00 
0c811     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c815     BE 30 00 00 
0c819     00 00 00 00 
0c81d     00 00 00 00 
0c821     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c825     BE A0 00 00 
0c829     BE 10 00 00 
0c82d     00 00 00 00 
0c831     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $ca, $90, $00, $00
0c835     BE 30 00 00 
0c839     00 00 00 00 
0c83d     00 00 00 00 
0c841     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c845     00 00 00 00 
0c849     A0 10 00 00 
0c84d     00 00 00 00 
0c851     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c855     BE A0 00 00 
0c859     00 00 00 00 
0c85d     00 00 00 00 
0c861     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c865     BE A0 00 00 
0c869     AA 10 00 00 
0c86d     00 00 00 00 
0c871     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c875     BE 3C 20 00 
0c879     AA 1E 93 00 
0c87d     00 00 00 00 
0c881     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1e, $93, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c885     BE A0 00 00 
0c889     BE 10 00 00 
0c88d     00 00 00 00 
0c891     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c895     BE D0 00 00 
0c899     00 04 A1 00 
0c89d     00 00 00 00 
0c8a1     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $a1, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8a5     BE A0 00 00 
0c8a9     00 06 01 00 
0c8ad     00 00 00 00 
0c8b1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8b5     BE AC 20 00 
0c8b9     00 06 01 00 
0c8bd     00 00 00 00 
0c8c1     00 00 00 00 | 	byte	$be, $ac, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c8c5     BE 3C 20 00 
0c8c9     00 06 01 00 
0c8cd     AA 70 00 00 
0c8d1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $06, $01, $00, $aa, $70, $00, $00, $00, $00, $00, $00
0c8d5     BE D0 00 00 
0c8d9     00 06 01 00 
0c8dd     97 73 F0 00 
0c8e1     00 0D 00 00 | 	byte	$be, $d0, $00, $00, $00, $06, $01, $00, $97, $73, $f0, $00, $00, $0d, $00, $00
0c8e5     00 00 00 00 
      ...             
0c9e1     00 00 00 00 
0c9e5     00 00 00 00 | 	byte	$00[260]
0c9e9     BE 10 00 00 
0c9ed     CA 70 00 00 
0c9f1     CA 90 00 00 
0c9f5     BE 30 00 00 | 	byte	$be, $10, $00, $00, $ca, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0c9f9     00 00 00 00 
0c9fd     00          | 	byte	$00[5]
0c9fe     04 C2 00 00 
0ca02     00 00 00 00 
0ca06     00 00 00 A0 
0ca0a     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0ca0e     04 C2 00 00 
0ca12     00 00 00 BE 
0ca16     A0 00 00 8F 
0ca1a     10 00 00 AA | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $aa
0ca1e     70 00 00 00 
0ca22     00 00 00 BE 
0ca26     A0 00 00 A0 
0ca2a     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0ca2e     73 F0 00 00 
0ca32     00 00 00 BE 
0ca36     3C 20 00 AA 
0ca3a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0ca3e     0C 10 00 00 
0ca42     00 00 00 BE 
0ca46     A0 00 00 A0 
0ca4a     10 00 00 8F | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $8f
0ca4e     71 04 00 00 
0ca52     00 00 00 BE 
0ca56     D0 00 00 A0 
0ca5a     1C 30 00 87 | 	byte	$71, $04, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $87
0ca5e     73 F0 00 00 
0ca62     00 00 00 00 
0ca66     00 00 00 AA 
0ca6a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0ca6e     04 C2 00 00 
0ca72     00 00 00 BE 
0ca76     A0 00 00 AA 
0ca7a     1C 30 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0ca7e     04 C2 00 00 
0ca82     00 00 00 00 
0ca86     00 00 00 BE 
0ca8a     10 00 00 97 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $97
0ca8e     70 00 00 00 
0ca92     00 00 00 BE 
0ca96     30 00 00 BE 
0ca9a     1C 30 00 00 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0ca9e     00 00 00 00 
0caa2     00 00 00    | 	byte	$00[7]
0caa5     BE A0 00 00 
0caa9     AA 10 00 00 
0caad     8F 71 03 01 
0cab1     0D B0 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $8f, $71, $03, $01, $0d, $b0, $00, $00
0cab5     BE 30 00 00 
0cab9     00 00 00 00 
0cabd     87 73 F0 00 
0cac1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $87, $73, $f0, $00, $00, $00, $00, $00
0cac5     00 00 00 00 
0cac9     AA 1E 93 00 
0cacd     00 04 C1 00 
0cad1     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00
0cad5     BE A0 00 00 
0cad9     A0 10 00 00 
0cadd     00 06 01 00 
0cae1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cae5     BE A0 00 00 
0cae9     AA 10 00 00 
0caed     00 06 01 00 
0caf1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0caf5     BE 3C 20 00 
0caf9     BE 10 00 00 
0cafd     00 06 01 00 
0cb01     00 00 00 00 | 	byte	$be, $3c, $20, $00, $be, $10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cb05     BE A0 00 00 
0cb09     AA 10 00 00 
0cb0d     00 04 A2 00 
0cb11     00 00 00 00 | 	byte	$be, $a0, $00, $00, $aa, $10, $00, $00, $00, $04, $a2, $00, $00, $00, $00, $00
0cb15     BE D0 00 00 
0cb19     00 04 82 00 
0cb1d     00 06 01 00 
0cb21     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $06, $01, $00, $00, $00, $00, $00
0cb25     00 00 00 00 
0cb29     00          | 	byte	$00[5]
0cb2a     06 01 00 00 
0cb2e     06 01 00 00 
0cb32     00 00 00 BE 
0cb36     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0cb3a     06 01 00 00 
0cb3e     06 01 00 00 
0cb42     00 00 00 00 
0cb46     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cb4a     06 01 00 00 
0cb4e     06 01 00 00 
0cb52     00 00 00 BE 
0cb56     30 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0cb5a     06 01 00 00 
0cb5e     06 01 00 00 
0cb62     00 00 00 BE 
0cb66     A0 00 00 A0 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0cb6a     10 00 00 AA 
0cb6e     70 00 00 CA 
0cb72     90 00 00 BE 
0cb76     30 00 00 00 | 	byte	$10, $00, $00, $aa, $70, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0cb7a     00 00 00 00 
0cb7e     04 C2 00 00 
0cb82     00 00 00 00 
0cb86     00 00 00 BE | 	byte	$00, $00, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0cb8a     1E 93 00 00 
0cb8e     04 C2 00 00 
0cb92     00 00 00 BE 
0cb96     A0 00 00 A0 | 	byte	$1e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0
0cb9a     10 00 00 B4 
0cb9e     73 F0 00 00 
0cba2     00 00 00 BE 
0cba6     A0 00 00 8F | 	byte	$10, $00, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f
0cbaa     10 00 00 CA 
0cbae     73 F0 00 00 
0cbb2     00 00 00 BE 
0cbb6     3C 20 00 A0 | 	byte	$10, $00, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $a0
0cbba     10 00 00 00 
0cbbe     0C 10 00 00 
0cbc2     00 00 00 BE 
0cbc6     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cbca     10 00 00 BE 
0cbce     71 06 00 00 
0cbd2     00 00 00 BE 
0cbd6     D0 00 00 7F | 	byte	$10, $00, $00, $be, $71, $06, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $7f
0cbda     1C 30 00 B4 
0cbde     73 F0 00 00 
0cbe2     00 00 00 00 
0cbe6     00 00 00 BE | 	byte	$1c, $30, $00, $b4, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0cbea     40 00 00 CA 
0cbee     70 00 00 00 
0cbf2     00 00 00 BE 
0cbf6     A0 00 00 BE | 	byte	$40, $00, $00, $ca, $70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0cbfa     4A 08 00 AA 
0cbfe     73 F0 00 00 
0cc02     00 00 00 00 
0cc06     00 00 00 D6 | 	byte	$4a, $08, $00, $aa, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0cc0a     40 00 00 97 
0cc0e     73 F0 00 00 
0cc12     00 00 00 BE 
0cc16     30 00 00 BE | 	byte	$40, $00, $00, $97, $73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be
0cc1a     40 00 00 00 
0cc1e     0C 10 00 00 
0cc22     00 00 00 BE 
0cc26     A0 00 00 7F | 	byte	$40, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cc2a     10 00 00 8F 
0cc2e     71 02 01 0D 
0cc32     B0 00 00 BE 
0cc36     30 00 00 7F | 	byte	$10, $00, $00, $8f, $71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $7f
0cc3a     1C 30 00 87 
0cc3e     73 F0 00 00 
0cc42     00 00 00 00 
0cc46     00 00 00 7F | 	byte	$1c, $30, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
0cc4a     1E 93 00 00 
0cc4e     04 C1 00 00 
0cc52     00 00 00 BE 
0cc56     A0 00 00 F0 | 	byte	$1e, $93, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0
0cc5a     40 00 00 00 
0cc5e     04 C1 00 00 
0cc62     00 00 00 BE 
0cc66     A0 00 00 7F | 	byte	$40, $00, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cc6a     10 00 00 7F 
0cc6e     73 F0 00 00 
0cc72     00 00 00 BE 
0cc76     3C 20 00 8F | 	byte	$10, $00, $00, $7f, $73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $8f
0cc7a     10 00 00 00 
0cc7e     0C 10 00 00 
0cc82     00 00 00 BE 
0cc86     A0 00 00 7F | 	byte	$10, $00, $00, $00, $0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f
0cc8a     10 00 00 8F 
0cc8e     71 03 00 00 
0cc92     00 00 00 BE 
0cc96     D0 00 00 00 | 	byte	$10, $00, $00, $8f, $71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0cc9a     04 81 00 87 
0cc9e     73 F0 00 00 
0cca2     00 00 00 00 
0cca6     00 00 00 00 | 	byte	$04, $81, $00, $87, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ccaa     06 01 00 00 
0ccae     04 C1 00 00 
0ccb2     00 00 00 BE 
0ccb6     A0 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0ccba     06 01 00 00 
0ccbe     06 01 00 00 
0ccc2     00 00 00 00 
0ccc6     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ccca     06 01 00 00 
0ccce     04 C2 00 00 
0ccd2     00 00 00 BE 
0ccd6     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0ccda     06 01 00 00 
0ccde     06 01 00 00 
0cce2     0D 00 00 BE 
0cce6     A0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00
0ccea     00 00 00 00 
      ...             
0cde2     00 00 00 00 
0cde6     00 00 00    | 	byte	$00[255]
0cde9     A0 10 00 00 
0cded     7F 74 C1 00 
0cdf1     FE B0 00 00 
0cdf5     BE 30 00 00 | 	byte	$a0, $10, $00, $00, $7f, $74, $c1, $00, $fe, $b0, $00, $00, $be, $30, $00, $00
0cdf9     00 00 00 00 
0cdfd     00          | 	byte	$00[5]
0cdfe     04 C2 00 00 
0ce02     00 00 00 00 
0ce06     00 00 00 A0 
0ce0a     1E 93 00 00 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1e, $93, $00, $00
0ce0e     04 C2 00 00 
0ce12     00 00 00 BE 
0ce16     A0 00 00 8F 
0ce1a     10 00 00 87 | 	byte	$04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $8f, $10, $00, $00, $87
0ce1e     70 00 00 00 
0ce22     00 00 00 BE 
0ce26     A0 00 00 A0 
0ce2a     10 00 00 97 | 	byte	$70, $00, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $97
0ce2e     73 F0 00 00 
0ce32     00 00 00 BE 
0ce36     3C 20 00 AA 
0ce3a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa, $10, $00, $00, $00
0ce3e     0C 10 00 00 
0ce42     00 00 00 BE 
0ce46     A0 00 00 A0 
0ce4a     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $a0
0ce4e     71 03 00 00 
0ce52     00 00 00 BE 
0ce56     D0 00 00 A0 
0ce5a     1C 30 00 97 | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $a0, $1c, $30, $00, $97
0ce5e     73 F0 00 00 
0ce62     00 00 00 00 
0ce66     00 00 00 AA 
0ce6a     10 00 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $10, $00, $00, $00
0ce6e     04 C1 00 00 
0ce72     00 00 00 BE 
0ce76     A0 00 00 AA 
0ce7a     1C 30 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $1c, $30, $00, $00
0ce7e     04 C1 00 00 
0ce82     00 00 00 00 
0ce86     00 00 00 BE 
0ce8a     10 00 00 AA | 	byte	$04, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be, $10, $00, $00, $aa
0ce8e     73 F0 00 00 
0ce92     00 00 00 BE 
0ce96     30 00 00 BE 
0ce9a     1C 30 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $be, $30, $00, $00, $be, $1c, $30, $00, $00
0ce9e     0C 10 00 00 
0cea2     00 00 00 BE 
0cea6     A0 00 00 AA 
0ceaa     10 00 00 A0 | 	byte	$0c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $a0
0ceae     71 02 01 0D 
0ceb2     B0 00 00 BE 
0ceb6     30 00 00 00 
0ceba     00 00 00 97 | 	byte	$71, $02, $01, $0d, $b0, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $97
0cebe     73 F0 00 00 
0cec2     00 00 00 00 
0cec6     00 00 00 AA 
0ceca     1E 93 00 00 | 	byte	$73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $aa, $1e, $93, $00, $00
0cece     04 C1 00 00 
0ced2     00 00 00 BE 
0ced6     A0 00 00 A0 
0ceda     10 00 00 00 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $a0, $10, $00, $00, $00
0cede     04 C1 00 00 
0cee2     00 00 00 BE 
0cee6     A0 00 00 AA 
0ceea     10 00 00 B4 | 	byte	$04, $c1, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $b4
0ceee     71 03 00 00 
0cef2     00 00 00 BE 
0cef6     3C 20 00 BE 
0cefa     10 00 00 AA | 	byte	$71, $03, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $be, $10, $00, $00, $aa
0cefe     7C 10 00 00 
0cf02     00 00 00 BE 
0cf06     A0 00 00 AA 
0cf0a     10 00 00 00 | 	byte	$7c, $10, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa, $10, $00, $00, $00
0cf0e     00 00 00 00 
0cf12     00 00 00    | 	byte	$00[7]
0cf15     BE D0 00 00 
0cf19     00 04 82 00 
0cf1d     00 00 00 00 
0cf21     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $04, $82, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf25     00 00 00 00 
0cf29     00          | 	byte	$00[5]
0cf2a     06 01 00 B4 
0cf2e     74 C2 00 00 
0cf32     00 00 00 BE 
0cf36     A0 00 00 00 | 	byte	$06, $01, $00, $b4, $74, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0cf3a     06 01 00 00 
0cf3e     04 C2 00 00 
0cf42     00 00 00 00 
0cf46     00 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf4a     06 01 00 00 
0cf4e     04 C2 00 00 
0cf52     00 00 00 BE 
0cf56     30 00 00 00 | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0cf5a     06 01 00 00 
0cf5e     04 C2 00 00 
0cf62     00 00 00 BE 
0cf66     A0 00 00 BE | 	byte	$06, $01, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0cf6a     10 00 00 D6 
0cf6e     71 04 00 CA 
0cf72     90 00 00 BE 
0cf76     30 00 00 00 | 	byte	$10, $00, $00, $d6, $71, $04, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0cf7a     0C 20 00 CA 
0cf7e     73 F0 00 00 
0cf82     00 00 00 00 
0cf86     00 00 00 BE | 	byte	$0c, $20, $00, $ca, $73, $f0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $be
0cf8a     0E 93 00 00 
0cf8e     04 C2 00 00 
0cf92     00 00 00 BE 
0cf96     A0 00 00 BE | 	byte	$0e, $93, $00, $00, $04, $c2, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0cf9a     1C 20 00 00 
0cf9e     06 01 00 00 
0cfa2     00 00 00 BE 
0cfa6     A0 00 00 BE | 	byte	$1c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0cfaa     10 00 00 00 
0cfae     06 01 00 00 
0cfb2     00 00 00 BE 
0cfb6     3C 20 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0cfba     00 00 00 00 
0cfbe     06 01 00 00 
0cfc2     00 00 00 BE 
0cfc6     A0 00 00 D6 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0cfca     10 00 00 00 
0cfce     06 01 00 E2 
0cfd2     B0 00 00 BE 
0cfd6     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $e2, $b0, $00, $00, $be, $d0, $00, $00, $00
0cfda     0C 20 00 00 
0cfde     06 01 00 00 
0cfe2     00 00 00 00 
0cfe6     00 00 00 D6 | 	byte	$0c, $20, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0cfea     1E 93 00 00 
0cfee     06 01 00 00 
0cff2     00 00 00 BE 
0cff6     A0 00 00 D6 | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $d6
0cffa     10 00 00 00 
0cffe     06 01 00 00 
0d002     00 00 00 00 
0d006     00 00 00 D6 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $d6
0d00a     10 00 00 00 
0d00e     06 01 00 00 
0d012     00 00 00 BE 
0d016     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $30, $00, $00, $00
0d01a     00 00 00 00 
0d01e     06 01 00 00 
0d022     00 00 00 BE 
0d026     A0 00 00 BE | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d02a     10 00 00 00 
0d02e     06 01 00 CA 
0d032     90 00 00 BE 
0d036     30 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00
0d03a     00 00 00 00 
0d03e     06 01 00 00 
0d042     00 00 00 00 
0d046     00 00 00 A0 | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0
0d04a     10 00 00 00 
0d04e     06 01 00 00 
0d052     00 00 00 BE 
0d056     A0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d05a     00 00 00 00 
0d05e     06 01 00 00 
0d062     00 00 00 BE 
0d066     A0 00 00 AA | 	byte	$00, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $aa
0d06a     10 00 00 00 
0d06e     06 01 00 00 
0d072     00 00 00 BE 
0d076     3C 20 00 AA | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $aa
0d07a     1E 93 00 00 
0d07e     06 01 00 00 
0d082     00 00 00 BE 
0d086     A0 00 00 BE | 	byte	$1e, $93, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be
0d08a     10 00 00 00 
0d08e     06 01 00 00 
0d092     00 00 00 BE 
0d096     D0 00 00 00 | 	byte	$10, $00, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0d09a     04 A1 00 00 
0d09e     06 01 00 00 
0d0a2     00 00 00 BE 
0d0a6     A0 00 00 00 | 	byte	$04, $a1, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00
0d0aa     06 01 00 00 
0d0ae     06 01 00 00 
0d0b2     00 00 00 BE 
0d0b6     AC 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $ac, $20, $00, $00
0d0ba     06 01 00 00 
0d0be     06 01 00 00 
0d0c2     00 00 00 BE 
0d0c6     3C 20 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00
0d0ca     06 01 00 00 
0d0ce     06 01 00 00 
0d0d2     00 00 00 BE 
0d0d6     D0 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $00, $00, $00, $be, $d0, $00, $00, $00
0d0da     06 01 00 00 
0d0de     06 01 00 00 
0d0e2     0D 00 00 00 
0d0e6     00 00 00 00 | 	byte	$06, $01, $00, $00, $06, $01, $00, $00, $0d, $00, $00, $00, $00, $00, $00, $00
0d0ea     00 00 00 00 
      ...             
0d1e2     00 00 00 00 
0d1e6     00 00 00    | 	byte	$00[255]
0d1e9     7F 1F 05 00 
0d1ed     BE 20 00 00 
0d1f1     CA 90 00 00 
0d1f5     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d1f9     00 00 00 00 
0d1fd     00          | 	byte	$00[5]
0d1fe     0A 02 00 00 
0d202     00 00 00 00 
0d206     00 00 00 A0 
0d20a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d20e     0A 02 00 00 
0d212     00 00 00 BE 
0d216     A0 00 00 7F 
0d21a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0d21e     0A 02 00 00 
0d222     00 00 00 BE 
0d226     A0 00 00 BE 
0d22a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d22e     0A 02 00 00 
0d232     00 00 00 BE 
0d236     3C 20 00 00 
0d23a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0d23e     0A 02 00 00 
0d242     00 00 00 BE 
0d246     A0 00 00 F0 
0d24a     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0d24e     20 00 00 FE 
0d252     B0 00 00 BE 
0d256     D0 00 00 00 
0d25a     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0d25e     00 00 00 00 
0d262     00 00 00 00 
0d266     00 00 00    | 	byte	$00[11]
0d269     D6 4A 06 00 
0d26d     BE 2E 93 00 
0d271     00 00 00 00 
0d275     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d279     F0 0E 93 00 
0d27d     BE 20 00 00 
0d281     00 00 00 00 
0d285     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d289     F0 40 00 00 
0d28d     D6 20 00 00 
0d291     00 00 00 00 
0d295     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d299     00 00 00 00 
0d29d     00          | 	byte	$00[5]
0d29e     0C 20 00 00 
0d2a2     00 00 00 BE 
0d2a6     A0 00 00 7F 
0d2aa     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0d2ae     20 00 00 CA 
0d2b2     90 00 00 BE 
0d2b6     30 00 00 00 
0d2ba     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0d2be     0A 02 00 00 
0d2c2     00 00 00 00 
0d2c6     00 00 00 A0 
0d2ca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d2ce     0A 02 00 00 
0d2d2     00 00 00 BE 
0d2d6     A0 00 00 7F 
0d2da     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0d2de     0A 02 00 00 
0d2e2     00 00 00 BE 
0d2e6     A0 00 00 BE 
0d2ea     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d2ee     00 00 00 00 
0d2f2     00 00 00    | 	byte	$00[7]
0d2f5     BE 3C 20 00 
0d2f9     AA 1C 30 00 
0d2fd     BE 0E 93 00 
0d301     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d305     BE A0 00 00 
0d309     A0 10 00 00 
0d30d     D6 20 00 00 
0d311     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d315     BE D0 00 00 
0d319     A0 1C 30 00 
0d31d     00 0A 02 00 
0d321     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d325     00 00 00 00 
0d329     AA 10 00 00 
0d32d     00 0A 02 00 
0d331     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d335     BE A0 00 00 
0d339     BE 10 00 00 
0d33d     D6 2C 20 00 
0d341     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0d345     00 00 00 00 
0d349     AA 10 00 00 
0d34d     D6 2A 04 00 
0d351     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0d355     BE 30 00 00 
0d359     00 00 00 00 
0d35d     00 0A 04 00 
0d361     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0d365     BE A0 00 00 
0d369     A0 10 00 00 
0d36d     F0 20 00 00 
0d371     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0d375     BE 30 00 00 
0d379     00 0C 20 00 
0d37d     00 00 00 00 
0d381     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d385     00 00 00 00 
0d389     A0 0E 93 00 
0d38d     F0 20 00 00 
0d391     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d395     BE A0 00 00 
0d399     A0 1C 20 00 
0d39d     F0 2C 30 00 
0d3a1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0d3a5     BE A0 00 00 
0d3a9     A0 10 00 00 
0d3ad     F0 20 00 00 
0d3b1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d3b5     BE 3C 20 00 
0d3b9     00 00 00 00 
0d3bd     00 00 00 00 
0d3c1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3c5     BE A0 00 00 
0d3c9     8F 10 00 00 
0d3cd     D6 20 00 00 
0d3d1     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d3d5     BE D0 00 00 
0d3d9     00 0C 20 00 
0d3dd     00 00 00 00 
0d3e1     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3e5     00 00 00 00 
0d3e9     8F 1E 93 00 
0d3ed     D6 20 00 00 
0d3f1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d3f5     BE A0 00 00 
0d3f9     A0 10 00 00 
0d3fd     BE 2C 30 00 
0d401     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d405     00 00 00 00 
0d409     8F 10 00 00 
0d40d     D6 20 00 00 
0d411     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d415     BE 30 00 00 
0d419     00 00 00 00 
0d41d     00 00 00 00 
0d421     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d425     BE A0 00 00 
0d429     BE 10 00 00 
0d42d     BE 20 00 00 
0d431     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $be, $20, $00, $00, $ca, $90, $00, $00
0d435     BE 30 00 00 
0d439     00 00 00 00 
0d43d     BE 2C 30 00 
0d441     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d445     00 00 00 00 
0d449     A0 10 00 01 
0d44d     7D 20 00 00 
0d451     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $10, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0d455     BE A0 00 00 
0d459     00 00 00 00 
0d45d     BE 2C 30 00 
0d461     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d465     BE A0 00 00 
0d469     8F 10 00 00 
0d46d     00 0A 06 00 
0d471     00 00 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $00, $0a, $06, $00, $00, $00, $00, $00
0d475     BE 3C 20 00 
0d479     00 00 00 00 
0d47d     BE 0E 93 00 
0d481     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d485     BE A0 00 00 
0d489     7F 10 00 00 
0d48d     BE 2C 30 00 
0d491     00 00 00 00 | 	byte	$be, $a0, $00, $00, $7f, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d495     BE D0 00 00 
0d499     00 00 00 00 
0d49d     00 0A 02 00 
0d4a1     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d4a5     00 00 00 00 
0d4a9     00 00 00 00 
0d4ad     00          | 	byte	$00[9]
0d4ae     0A 02 00 00 
0d4b2     00 00 00 BE 
0d4b6     A0 00 00 00 
0d4ba     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0d4be     0A 02 00 00 
0d4c2     00 00 00 00 
0d4c6     00 00 00 A0 
0d4ca     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $1c, $20, $00, $00
0d4ce     0A 02 00 00 
0d4d2     00 00 00 BE 
0d4d6     30 00 00 8F 
0d4da     1C 30 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $30, $00, $00, $8f, $1c, $30, $00, $00
0d4de     0A 02 00 00 
0d4e2     0D 00 00 BE 
0d4e6     A0 00 00 00 
0d4ea     00 00 00 00 | 	byte	$0a, $02, $00, $00, $0d, $00, $00, $be, $a0, $00, $00, $00, $00, $00, $00, $00
0d4ee     00 00 00 00 
      ...             
0d5e2     00 00 00 00 
0d5e6     00 00 00    | 	byte	$00[251]
0d5e9     7F 1F 05 00 
0d5ed     BE 20 00 00 
0d5f1     CA 90 00 00 
0d5f5     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d5f9     00 00 00 00 
0d5fd     00          | 	byte	$00[5]
0d5fe     0A 02 00 00 
0d602     00 00 00 00 
0d606     00 00 00 A0 
0d60a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d60e     0A 02 00 00 
0d612     00 00 00 BE 
0d616     A0 00 00 7F 
0d61a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0d61e     0A 02 00 00 
0d622     00 00 00 BE 
0d626     A0 00 00 BE 
0d62a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d62e     0A 02 00 00 
0d632     00 00 00 BE 
0d636     3C 20 00 00 
0d63a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0d63e     0A 02 00 00 
0d642     00 00 00 BE 
0d646     A0 00 00 F0 
0d64a     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0d64e     20 00 00 FE 
0d652     B0 00 00 BE 
0d656     D0 00 00 00 
0d65a     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0d65e     00 00 00 00 
0d662     00 00 00 00 
0d666     00 00 00    | 	byte	$00[11]
0d669     D6 4A 06 00 
0d66d     BE 2E 93 00 
0d671     00 00 00 00 
0d675     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0d679     F0 0E 93 00 
0d67d     BE 20 00 00 
0d681     00 00 00 00 
0d685     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d689     F0 40 00 00 
0d68d     D6 20 00 00 
0d691     00 00 00 00 
0d695     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0d699     00 00 00 00 
0d69d     00          | 	byte	$00[5]
0d69e     0C 20 00 00 
0d6a2     00 00 00 BE 
0d6a6     A0 00 00 7F 
0d6aa     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0d6ae     20 00 00 CA 
0d6b2     90 00 00 BE 
0d6b6     30 00 00 00 
0d6ba     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0d6be     0A 02 00 00 
0d6c2     00 00 00 00 
0d6c6     00 00 00 A0 
0d6ca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0d6ce     0A 02 00 00 
0d6d2     00 00 00 BE 
0d6d6     A0 00 00 7F 
0d6da     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0d6de     0A 02 00 00 
0d6e2     00 00 00 BE 
0d6e6     A0 00 00 BE 
0d6ea     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0d6ee     00 00 00 00 
0d6f2     00 00 00    | 	byte	$00[7]
0d6f5     BE 3C 20 00 
0d6f9     AA 1C 30 00 
0d6fd     BE 0E 93 00 
0d701     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0d705     BE A0 00 00 
0d709     A0 10 00 00 
0d70d     D6 20 00 00 
0d711     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d715     BE D0 00 00 
0d719     A0 1C 30 00 
0d71d     00 0A 02 00 
0d721     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d725     00 00 00 00 
0d729     AA 10 00 00 
0d72d     00 0A 02 00 
0d731     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0d735     BE A0 00 00 
0d739     BE 10 00 00 
0d73d     D6 2C 20 00 
0d741     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0d745     00 00 00 00 
0d749     AA 10 00 00 
0d74d     D6 2A 04 00 
0d751     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0d755     BE 30 00 00 
0d759     00 00 00 00 
0d75d     00 0A 04 00 
0d761     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0d765     BE A0 00 00 
0d769     A0 10 00 00 
0d76d     F0 20 00 00 
0d771     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0d775     BE 30 00 00 
0d779     00 0C 20 00 
0d77d     00 00 00 00 
0d781     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d785     00 00 00 00 
0d789     A0 0E 93 00 
0d78d     F0 20 00 00 
0d791     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d795     BE A0 00 00 
0d799     A0 1C 20 00 
0d79d     F0 2C 30 00 
0d7a1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0d7a5     BE A0 00 00 
0d7a9     A0 10 00 00 
0d7ad     F0 20 00 00 
0d7b1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0d7b5     BE 3C 20 00 
0d7b9     00 00 00 00 
0d7bd     00 00 00 00 
0d7c1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d7c5     BE A0 00 00 
0d7c9     8F 10 00 00 
0d7cd     D6 20 00 00 
0d7d1     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0d7d5     BE D0 00 00 
0d7d9     00 0C 20 00 
0d7dd     00 00 00 00 
0d7e1     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d7e5     00 00 00 00 
0d7e9     8F 1E 93 00 
0d7ed     D6 20 00 00 
0d7f1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d7f5     BE A0 00 00 
0d7f9     A0 10 00 00 
0d7fd     BE 2C 30 00 
0d801     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0d805     00 00 00 00 
0d809     8F 10 00 00 
0d80d     D6 20 00 00 
0d811     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0d815     BE 30 00 00 
0d819     00 00 00 00 
0d81d     00 00 00 00 
0d821     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d825     BE A0 00 00 
0d829     BE 10 00 01 
0d82d     1D 20 00 00 
0d831     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0d835     BE 30 00 00 
0d839     BE 1C 30 00 
0d83d     00 00 00 00 
0d841     00 00 00 00 | 	byte	$be, $30, $00, $00, $be, $1c, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d845     00 00 00 00 
0d849     BE 10 00 00 
0d84d     00 00 00 00 
0d851     00 0F 06 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $0f, $06, $00
0d855     BE A0 00 00 
0d859     BE 1C 30 01 
0d85d     1D 2C 30 00 
0d861     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1c, $30, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0d865     BE A0 00 00 
0d869     D6 10 00 00 
0d86d     00 00 00 00 
0d871     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d875     BE 3C 20 00 
0d879     BE 1E D4 00 
0d87d     00 00 00 00 
0d881     00 0F 07 00 | 	byte	$be, $3c, $20, $00, $be, $1e, $d4, $00, $00, $00, $00, $00, $00, $0f, $07, $00
0d885     BE A0 00 00 
0d889     BE 10 00 01 
0d88d     1D 0C 20 00 
0d891     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0d895     BE D0 00 00 
0d899     00 0A 01 00 
0d89d     00 00 00 00 
0d8a1     00 0A 01 00 | 	byte	$be, $d0, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00
0d8a5     00 00 00 00 
0d8a9     00          | 	byte	$00[5]
0d8aa     0A 01 00 00 
0d8ae     00 00 00 00 
0d8b2     0A 01 00 00 
0d8b6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d8ba     0A 01 01 1D 
0d8be     0C 10 00 00 
0d8c2     0A 01 00 00 
0d8c6     00 00 00 00 | 	byte	$0a, $01, $01, $1d, $0c, $10, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d8ca     0A 01 00 00 
0d8ce     00 00 00 00 
0d8d2     0A 01 00 00 
0d8d6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d8da     0A 01 00 00 
0d8de     00 00 00 00 
0d8e2     0A 01 00 00 
0d8e6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $00, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d8ea     0A 01 00 00 
0d8ee     0C 00 00 00 
0d8f2     0A 01 00 00 
0d8f6     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0c, $00, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d8fa     0A 01 00 00 
0d8fe     0E 60 00 00 
0d902     0A 01 00 00 
0d906     0F 02 00 00 | 	byte	$0a, $01, $00, $00, $0e, $60, $00, $00, $0a, $01, $00, $00, $0f, $02, $00, $00
0d90a     0A 01 00 00 
0d90e     0E 6F 00 00 
0d912     0A 01 00 00 
0d916     00 00 00 00 | 	byte	$0a, $01, $00, $00, $0e, $6f, $00, $00, $0a, $01, $00, $00, $00, $00, $00, $00
0d91a     0C 00 00 00 
0d91e     00 00 00 00 
0d922     0C 00 00 00 
0d926     00 00 00 00 | 	byte	$0c, $00, $00, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $00, $00, $00
0d92a     0F 1F 00 00 
0d92e     00 00 00 00 
0d932     00 00 00 00 
0d936     00 00 00 00 | 	byte	$0f, $1f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d93a     00 00 00 00 
      ...             
0d9e2     00 00 00 00 
0d9e6     00 00 00    | 	byte	$00[175]
0d9e9     7F 1F 05 00 
0d9ed     BE 20 00 00 
0d9f1     CA 90 00 00 
0d9f5     BE 30 00 00 | 	byte	$7f, $1f, $05, $00, $be, $20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00
0d9f9     00 00 00 00 
0d9fd     00          | 	byte	$00[5]
0d9fe     0A 02 00 00 
0da02     00 00 00 00 
0da06     00 00 00 A0 
0da0a     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0da0e     0A 02 00 00 
0da12     00 00 00 BE 
0da16     A0 00 00 7F 
0da1a     1C 20 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $00
0da1e     0A 02 00 00 
0da22     00 00 00 BE 
0da26     A0 00 00 BE 
0da2a     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0da2e     0A 02 00 00 
0da32     00 00 00 BE 
0da36     3C 20 00 00 
0da3a     00 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $3c, $20, $00, $00, $00, $00, $00, $00
0da3e     0A 02 00 00 
0da42     00 00 00 BE 
0da46     A0 00 00 F0 
0da4a     40 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $f0, $40, $00, $00, $be
0da4e     20 00 00 FE 
0da52     B0 00 00 BE 
0da56     D0 00 00 00 
0da5a     00 00 00 00 | 	byte	$20, $00, $00, $fe, $b0, $00, $00, $be, $d0, $00, $00, $00, $00, $00, $00, $00
0da5e     00 00 00 00 
0da62     00 00 00 00 
0da66     00 00 00    | 	byte	$00[11]
0da69     D6 4A 06 00 
0da6d     BE 2E 93 00 
0da71     00 00 00 00 
0da75     BE A0 00 00 | 	byte	$d6, $4a, $06, $00, $be, $2e, $93, $00, $00, $00, $00, $00, $be, $a0, $00, $00
0da79     F0 0E 93 00 
0da7d     BE 20 00 00 
0da81     00 00 00 00 
0da85     00 00 00 00 | 	byte	$f0, $0e, $93, $00, $be, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0da89     F0 40 00 00 
0da8d     D6 20 00 00 
0da91     00 00 00 00 
0da95     BE 30 00 00 | 	byte	$f0, $40, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00, $be, $30, $00, $00
0da99     00 00 00 00 
0da9d     00          | 	byte	$00[5]
0da9e     0C 20 00 00 
0daa2     00 00 00 BE 
0daa6     A0 00 00 7F 
0daaa     10 00 00 BE | 	byte	$0c, $20, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $10, $00, $00, $be
0daae     20 00 00 CA 
0dab2     90 00 00 BE 
0dab6     30 00 00 00 
0daba     00 00 00 00 | 	byte	$20, $00, $00, $ca, $90, $00, $00, $be, $30, $00, $00, $00, $00, $00, $00, $00
0dabe     0A 02 00 00 
0dac2     00 00 00 00 
0dac6     00 00 00 A0 
0daca     10 00 00 00 | 	byte	$0a, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $a0, $10, $00, $00, $00
0dace     0A 02 00 00 
0dad2     00 00 00 BE 
0dad6     A0 00 00 7F 
0dada     1C 20 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $7f, $1c, $20, $00, $be
0dade     0A 02 00 00 
0dae2     00 00 00 BE 
0dae6     A0 00 00 BE 
0daea     10 00 00 BE | 	byte	$0a, $02, $00, $00, $00, $00, $00, $be, $a0, $00, $00, $be, $10, $00, $00, $be
0daee     00 00 00 00 
0daf2     00 00 00    | 	byte	$00[7]
0daf5     BE 3C 20 00 
0daf9     AA 1C 30 00 
0dafd     BE 0E 93 00 
0db01     00 00 00 00 | 	byte	$be, $3c, $20, $00, $aa, $1c, $30, $00, $be, $0e, $93, $00, $00, $00, $00, $00
0db05     BE A0 00 00 
0db09     A0 10 00 00 
0db0d     D6 20 00 00 
0db11     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0db15     BE D0 00 00 
0db19     A0 1C 30 00 
0db1d     00 0A 02 00 
0db21     00 00 00 00 | 	byte	$be, $d0, $00, $00, $a0, $1c, $30, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0db25     00 00 00 00 
0db29     AA 10 00 00 
0db2d     00 0A 02 00 
0db31     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $00, $0a, $02, $00, $00, $00, $00, $00
0db35     BE A0 00 00 
0db39     BE 10 00 00 
0db3d     D6 2C 20 00 
0db41     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $00, $d6, $2c, $20, $00, $00, $00, $00, $00
0db45     00 00 00 00 
0db49     AA 10 00 00 
0db4d     D6 2A 04 00 
0db51     00 00 00 00 | 	byte	$00, $00, $00, $00, $aa, $10, $00, $00, $d6, $2a, $04, $00, $00, $00, $00, $00
0db55     BE 30 00 00 
0db59     00 00 00 00 
0db5d     00 0A 04 00 
0db61     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $0a, $04, $00, $00, $00, $00, $00
0db65     BE A0 00 00 
0db69     A0 10 00 00 
0db6d     F0 20 00 00 
0db71     FE B0 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $fe, $b0, $00, $00
0db75     BE 30 00 00 
0db79     00 0C 20 00 
0db7d     00 00 00 00 
0db81     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0db85     00 00 00 00 
0db89     A0 0E 93 00 
0db8d     F0 20 00 00 
0db91     00 00 00 00 | 	byte	$00, $00, $00, $00, $a0, $0e, $93, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0db95     BE A0 00 00 
0db99     A0 1C 20 00 
0db9d     F0 2C 30 00 
0dba1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $1c, $20, $00, $f0, $2c, $30, $00, $00, $00, $00, $00
0dba5     BE A0 00 00 
0dba9     A0 10 00 00 
0dbad     F0 20 00 00 
0dbb1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $f0, $20, $00, $00, $00, $00, $00, $00
0dbb5     BE 3C 20 00 
0dbb9     00 00 00 00 
0dbbd     00 00 00 00 
0dbc1     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dbc5     BE A0 00 00 
0dbc9     8F 10 00 00 
0dbcd     D6 20 00 00 
0dbd1     E2 B0 00 00 | 	byte	$be, $a0, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $e2, $b0, $00, $00
0dbd5     BE D0 00 00 
0dbd9     00 0C 20 00 
0dbdd     00 00 00 00 
0dbe1     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $0c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dbe5     00 00 00 00 
0dbe9     8F 1E 93 00 
0dbed     D6 20 00 00 
0dbf1     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $1e, $93, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0dbf5     BE A0 00 00 
0dbf9     A0 10 00 00 
0dbfd     BE 2C 30 00 
0dc01     00 00 00 00 | 	byte	$be, $a0, $00, $00, $a0, $10, $00, $00, $be, $2c, $30, $00, $00, $00, $00, $00
0dc05     00 00 00 00 
0dc09     8F 10 00 00 
0dc0d     D6 20 00 00 
0dc11     00 00 00 00 | 	byte	$00, $00, $00, $00, $8f, $10, $00, $00, $d6, $20, $00, $00, $00, $00, $00, $00
0dc15     BE 30 00 00 
0dc19     00 00 00 00 
0dc1d     00 00 00 00 
0dc21     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc25     BE A0 00 00 
0dc29     BE 10 00 01 
0dc2d     1D 20 00 00 
0dc31     CA 90 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $20, $00, $00, $ca, $90, $00, $00
0dc35     BE 30 00 00 
0dc39     00 00 00 00 
0dc3d     00 00 00 00 
0dc41     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc45     00 00 00 00 
0dc49     BE 10 00 00 
0dc4d     00 00 00 00 
0dc51     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc55     BE A0 00 00 
0dc59     00 00 00 01 
0dc5d     1D 2C 30 00 
0dc61     00 00 00 00 | 	byte	$be, $a0, $00, $00, $00, $00, $00, $01, $1d, $2c, $30, $00, $00, $00, $00, $00
0dc65     BE A0 00 00 
0dc69     D6 10 00 00 
0dc6d     00 00 00 00 
0dc71     00 00 00 00 | 	byte	$be, $a0, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc75     BE 3C 20 00 
0dc79     00 00 00 00 
0dc7d     00 00 00 00 
0dc81     00 00 00 00 | 	byte	$be, $3c, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dc85     BE A0 00 00 
0dc89     BE 10 00 01 
0dc8d     1D 0C 20 00 
0dc91     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $10, $00, $01, $1d, $0c, $20, $00, $00, $00, $00, $00
0dc95     BE D0 00 00 
0dc99     00 00 00 00 
0dc9d     00 00 00 00 
0dca1     00 00 00 00 | 	byte	$be, $d0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dca5     00 00 00 00 
0dca9     BE 10 00 00 
0dcad     00 00 00 00 
0dcb1     00 00 00 00 | 	byte	$00, $00, $00, $00, $be, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dcb5     BE A0 00 00 
0dcb9     BE 1E D3 01 
0dcbd     1D 0C 10 00 
0dcc1     00 00 00 00 | 	byte	$be, $a0, $00, $00, $be, $1e, $d3, $01, $1d, $0c, $10, $00, $00, $00, $00, $00
0dcc5     BE AC 20 00 
0dcc9     A0 10 00 00 
0dccd     00 00 00 00 
0dcd1     00 00 00 00 | 	byte	$be, $ac, $20, $00, $a0, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dcd5     BE 30 00 00 
0dcd9     00 00 00 00 
0dcdd     00 00 00 00 
0dce1     00 00 00 00 | 	byte	$be, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dce5     BE AD 00 00 
0dce9     00 00 00 00 
0dced     00 00 00 00 
0dcf1     00 00 00 00 | 	byte	$be, $ad, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0dcf5     00 00 00 00 
      ...             
0dde5     00 00 00 00 
0dde9     00          | 	byte	$00[245]
0ddea     08 09 06 07 
0ddee     06 08 09 08 
0ddf2     09 0C 0A 09 
0ddf6     0C 0E 0D 07 | 	byte	$08, $09, $06, $07, $06, $08, $09, $08, $09, $0c, $0a, $09, $0c, $0e, $0d, $07
0ddfa     07 07 0A 0C 
0ddfe     0A 09 0A 08 
0de02     0A 09 0A 0C 
0de06     0E 0E 0D 0E | 	byte	$07, $07, $0a, $0c, $0a, $09, $0a, $08, $0a, $09, $0a, $0c, $0e, $0e, $0d, $0e
0de0a     0D 0E 0C 0C 
0de0e     12 04 1B 08 
0de12     04 08 13 21 
0de16     FF 09 09 13 | 	byte	$0d, $0e, $0c, $0c, $12, $04, $1b, $08, $04, $08, $13, $21, $ff, $09, $09, $13
0de1a     F7 FF F1 FD 
0de1e     09 FE 08 08 
0de22     F3 FF FF 00 
0de26     13 25 13 15 | 	byte	$f7, $ff, $f1, $fd, $09, $fe, $08, $08, $f3, $ff, $ff, $00, $13, $25, $13, $15
0de2a     22 12 2B 31 
0de2e     00 F7 FF 30 
0de32     18 38 26 31 
0de36     12 4C 15 1B | 	byte	$22, $12, $2b, $31, $00, $f7, $ff, $30, $18, $38, $26, $31, $12, $4c, $15, $1b
0de3a     13 25 26 1C 
0de3e     01 1B 13 FF 
0de42     ED EC EB E0 
0de46     DB D4 C7 C6 | 	byte	$13, $25, $26, $1c, $01, $1b, $13, $ff, $ed, $ec, $eb, $e0, $db, $d4, $c7, $c6
0de4a     D0 D9 F6 E4 
0de4e     CF FF ED DE 
0de52     FF C7 C1 D9 
0de56     F6 E4 F6 F2 | 	byte	$d0, $d9, $f6, $e4, $cf, $ff, $ed, $de, $ff, $c7, $c1, $d9, $f6, $e4, $f6, $f2
0de5a     F0 F6 FF E4 
0de5e     E7 F9 DF EC 
0de62     0C 09 12 2E 
0de66     26 12 1B 36 | 	byte	$f0, $f6, $ff, $e4, $e7, $f9, $df, $ec, $0c, $09, $12, $2e, $26, $12, $1b, $36
0de6a     1C 34 3C 18 
0de6e     2E 26 1B 39 
0de72     25 4B 39 38 
0de76     4C 4B 5B 4C | 	byte	$1c, $34, $3c, $18, $2e, $26, $1b, $39, $25, $4b, $39, $38, $4c, $4b, $5b, $4c
0de7a     2B 33 48 1C 
0de7e     2E 39 2A 34 
0de82     34 32 1E 1C 
0de86     22 18 12 25 | 	byte	$2b, $33, $48, $1c, $2e, $39, $2a, $34, $34, $32, $1e, $1c, $22, $18, $12, $25
0de8a     09 25 30 00 
0de8e     E2 FA 00 CF 
0de92     EA C8 E2 FF 
0de96     F7 E5 ED E2 | 	byte	$09, $25, $30, $00, $e2, $fa, $00, $cf, $ea, $c8, $e2, $ff, $f7, $e5, $ed, $e2
0de9a     FD F6 F2 D0 
0de9e     CF E2 E4 B0 
0dea2     D9 DA C6 E0 
0dea6     D5 BC CD C9 | 	byte	$fd, $f6, $f2, $d0, $cf, $e2, $e4, $b0, $d9, $da, $c6, $e0, $d5, $bc, $cd, $c9
0deaa     CF F6 E8 F6 
0deae     20 2A 46 4C 
0deb2     26 20 2C 18 
0deb6     1A 13 16 26 | 	byte	$cf, $f6, $e8, $f6, $20, $2a, $46, $4c, $26, $20, $2c, $18, $1a, $13, $16, $26
0deba     2E 48 39 3D 
0debe     4C 36 42 4E 
0dec2     39 2A 42 46 
0dec6     39 33 2B 1C | 	byte	$2e, $48, $39, $3d, $4c, $36, $42, $4e, $39, $2a, $42, $46, $39, $33, $2b, $1c
0deca     1E 00 DA C6 
0dece     F3 EE EC F2 
0ded2     DB F1 FC 02 
0ded6     ED F6 F0 DA | 	byte	$1e, $00, $da, $c6, $f3, $ee, $ec, $f2, $db, $f1, $fc, $02, $ed, $f6, $f0, $da
0deda     DA C0 CF D5 
0dede     C9 C4 BD B8 
0dee2     C1 C0 A6 C6 
0dee6     CE C6 CD C6 | 	byte	$da, $c0, $cf, $d5, $c9, $c4, $bd, $b8, $c1, $c0, $a6, $c6, $ce, $c6, $cd, $c6
0deea     EC EE FA 09 
0deee     F9 12 33 13 
0def2     FD FD 12 20 
0def6     25 25 3A 3F | 	byte	$ec, $ee, $fa, $09, $f9, $12, $33, $13, $fd, $fd, $12, $20, $25, $25, $3a, $3f
0defa     49 4C 3E 4B 
0defe     51 39 42 56 
0df02     26 2E 3D 26 
0df06     20 2E 38 4B | 	byte	$49, $4c, $3e, $4b, $51, $39, $42, $56, $26, $2e, $3d, $26, $20, $2e, $38, $4b
0df0a     43 26 28 38 
0df0e     45 39 2C 3A 
0df12     3A 36 32 18 
0df16     00 12 0E 09 | 	byte	$43, $26, $28, $38, $45, $39, $2c, $3a, $3a, $36, $32, $18, $00, $12, $0e, $09
0df1a     00 FF 12 2C 
0df1e     20 33 43 2B 
0df22     2A 26 09 00 
0df26     FF 00 F8 12 | 	byte	$00, $ff, $12, $2c, $20, $33, $43, $2b, $2a, $26, $09, $00, $ff, $00, $f8, $12
0df2a     00 DA EC FE 
0df2e     F2 F0 F0 DA 
0df32     F6 16 0C 08 
0df36     1B 1A 18 12 | 	byte	$00, $da, $ec, $fe, $f2, $f0, $f0, $da, $f6, $16, $0c, $08, $1b, $1a, $18, $12
0df3a     13 F7 EC F0 
0df3e     EA F1 F0 E6 
0df42     F1 0D 0A 06 
0df46     14 13 20 21 | 	byte	$13, $f7, $ec, $f0, $ea, $f1, $f0, $e6, $f1, $0d, $0a, $06, $14, $13, $20, $21
0df4a     13 12 25 2D 
0df4e     21 09 ED F6 
0df52     F2 DA D4 D0 
0df56     D9 DA D2 E2 | 	byte	$13, $12, $25, $2d, $21, $09, $ed, $f6, $f2, $da, $d4, $d0, $d9, $da, $d2, $e2
0df5a     EB FD 00 ED 
0df5e     E4 EA DC CF 
0df62     D6 DA D0 CF 
0df66     C8 BD BA CF | 	byte	$eb, $fd, $00, $ed, $e4, $ea, $dc, $cf, $d6, $da, $d0, $cf, $c8, $bd, $ba, $cf
0df6a     CC B4 B2 CF 
0df6e     D6 D9 E4 DE 
0df72     FF 10 04 19 
0df76     1C 13 10 0F | 	byte	$cc, $b4, $b2, $cf, $d6, $d9, $e4, $de, $ff, $10, $04, $19, $1c, $13, $10, $0f
0df7a     0F 19 28 26 
0df7e     36 44 3E 46 
0df82     5E 58 49 4B 
0df86     52 45 39 2B | 	byte	$0f, $19, $28, $26, $36, $44, $3e, $46, $5e, $58, $49, $4b, $52, $45, $39, $2b
0df8a     20 38 40 30 
0df8e     32 26 21 2D 
0df92     28 13 16 2B 
0df96     33 30 30 1C | 	byte	$20, $38, $40, $30, $32, $26, $21, $2d, $28, $13, $16, $2b, $33, $30, $30, $1c
0df9a     10 16 13 00 
0df9e     FF 00 E1 F1 
0dfa2     06 01 0A 25 
0dfa6     30 30 26 13 | 	byte	$10, $16, $13, $00, $ff, $00, $e1, $f1, $06, $01, $0a, $25, $30, $30, $26, $13
0dfaa     0E 14 20 13 
0dfae     00 FD 02 02 
0dfb2     00 01 F9 F8 
0dfb6     FA FF 0D 13 | 	byte	$0e, $14, $20, $13, $00, $fd, $02, $02, $00, $01, $f9, $f8, $fa, $ff, $0d, $13
0dfba     1B 33 3F 4A 
0dfbe     3E 27 2E 32 
0dfc2     1F 09 FE FF 
0dfc6     12 10 09 01 | 	byte	$1b, $33, $3f, $4a, $3e, $27, $2e, $32, $1f, $09, $fe, $ff, $12, $10, $09, $01
0dfca     0D 21 1F 13 
0dfce     14 1B 2A 2B 
0dfd2     26 1F 26 13 
0dfd6     02 FA F9 ED | 	byte	$0d, $21, $1f, $13, $14, $1b, $2a, $2b, $26, $1f, $26, $13, $02, $fa, $f9, $ed
0dfda     DB D9 D0 CA 
0dfde     E1 E5 DF F1 
0dfe2     F9 F8 F6 E4 
0dfe6     E2 F4 ED D0 | 	byte	$db, $d9, $d0, $ca, $e1, $e5, $df, $f1, $f9, $f8, $f6, $e4, $e2, $f4, $ed, $d0
0dfea     C4 CD C9 C3 
0dfee     BD B4 BA C2 
0dff2     C1 BE C1 C1 
0dff6     C6 E0 E8 EC | 	byte	$c4, $cd, $c9, $c3, $bd, $b4, $ba, $c2, $c1, $be, $c1, $c1, $c6, $e0, $e8, $ec
0dffa     FF 07 02 00 
0dffe     F2 F6 06 00 
0e002     F3 FF 14 20 
0e006     26 2A 2E 46 | 	byte	$ff, $07, $02, $00, $f2, $f6, $06, $00, $f3, $ff, $14, $20, $26, $2a, $2e, $46
0e00a     58 4C 30 2C 
0e00e     2C 28 2D 26 
0e012     13 25 38 2B 
0e016     22 21 18 1B | 	byte	$58, $4c, $30, $2c, $2c, $28, $2d, $26, $13, $25, $38, $2b, $22, $21, $18, $1b
0e01a     25 24 26 26 
0e01e     26 27 26 1C 
0e022     0E 04 02 FC 
0e026     E6 D5 DE FF | 	byte	$25, $24, $26, $26, $26, $27, $26, $1c, $0e, $04, $02, $fc, $e6, $d5, $de, $ff
0e02a     18 18 1B 1C 
0e02e     12 20 1C 0E 
0e032     0D 04 F7 FD 
0e036     04 FD FC 04 | 	byte	$18, $18, $1b, $1c, $12, $20, $1c, $0e, $0d, $04, $f7, $fd, $04, $fd, $fc, $04
0e03a     04 00 FD FE 
0e03e     08 25 32 2D 
0e042     36 4B 54 56 
0e046     4C 34 2D 28 | 	byte	$04, $00, $fd, $fe, $08, $25, $32, $2d, $36, $4b, $54, $56, $4c, $34, $2d, $28
0e04a     21 13 09 12 
0e04e     18 14 1F 1E 
0e052     20 24 20 24 
0e056     26 26 21 1C | 	byte	$21, $13, $09, $12, $18, $14, $1f, $1e, $20, $24, $20, $24, $26, $26, $21, $1c
0e05a     13 14 13 00 
0e05e     F2 E4 E1 DC 
0e062     C7 C6 CF E2 
0e066     EE E4 DC EB | 	byte	$13, $14, $13, $00, $f2, $e4, $e1, $dc, $c7, $c6, $cf, $e2, $ee, $e4, $dc, $eb
0e06a     F0 ED F1 EB 
0e06e     E5 E5 E4 DA 
0e072     CD C4 C4 CF 
0e076     D0 C8 CF D5 | 	byte	$f0, $ed, $f1, $eb, $e5, $e5, $e4, $da, $cd, $c4, $c4, $cf, $d0, $c8, $cf, $d5
0e07a     D4 CF D6 EA 
0e07e     F6 07 06 06 
0e082     19 1F 10 0D 
0e086     10 12 18 13 | 	byte	$d4, $cf, $d6, $ea, $f6, $07, $06, $06, $19, $1f, $10, $0d, $10, $12, $18, $13
0e08a     04 0D 20 38 
0e08e     42 40 40 45 
0e092     44 3C 2D 21 
0e096     1E 24 2A 26 | 	byte	$04, $0d, $20, $38, $42, $40, $40, $45, $44, $3c, $2d, $21, $1e, $24, $2a, $26
0e09a     1F 20 19 16 
0e09e     25 1C 0D 19 
0e0a2     26 26 1A 13 
0e0a6     0F 1E 1F 13 | 	byte	$1f, $20, $19, $16, $25, $1c, $0d, $19, $26, $26, $1a, $13, $0f, $1e, $1f, $13
0e0aa     F7 E6 DA D4 
0e0ae     E1 ED EE F7 
0e0b2     FD FF 0F 13 
0e0b6     0A 09 02 F8 | 	byte	$f7, $e6, $da, $d4, $e1, $ed, $ee, $f7, $fd, $ff, $0f, $13, $0a, $09, $02, $f8
0e0ba     E8 E2 F3 FE 
0e0be     00 F6 E6 E4 
0e0c2     F1 FC F7 FE 
0e0c6     0D 1B 2E 38 | 	byte	$e8, $e2, $f3, $fe, $00, $f6, $e6, $e4, $f1, $fc, $f7, $fe, $0d, $1b, $2e, $38
0e0ca     42 48 46 43 
0e0ce     36 2D 26 20 
0e0d2     21 1A 1B 27 
0e0d6     26 21 2E 36 | 	byte	$42, $48, $46, $43, $36, $2d, $26, $20, $21, $1a, $1b, $27, $26, $21, $2e, $36
0e0da     3A 3A 31 2E 
0e0de     38 31 26 1B 
0e0e2     18 16 0E 00 
0e0e6     E6 DA DB E1 | 	byte	$3a, $3a, $31, $2e, $38, $31, $26, $1b, $18, $16, $0e, $00, $e6, $da, $db, $e1
0e0ea     DE DC D9 DB 
0e0ee     EC ED E4 E7 
0e0f2     F1 F0 F1 E8 
0e0f6     DA D9 DA C8 | 	byte	$de, $dc, $d9, $db, $ec, $ed, $e4, $e7, $f1, $f0, $f1, $e8, $da, $d9, $da, $c8
0e0fa     C6 CD CF CC 
0e0fe     C8 CD D6 DE 
0e102     E4 E6 F1 08 
0e106     18 13 0E 12 | 	byte	$c6, $cd, $cf, $cc, $c8, $cd, $d6, $de, $e4, $e6, $f1, $08, $18, $13, $0e, $12
0e10a     22 28 27 26 
0e10e     16 19 20 21 
0e112     20 2E 3C 44 
0e116     50 52 4C 3F | 	byte	$22, $28, $27, $26, $16, $19, $20, $21, $20, $2e, $3c, $44, $50, $52, $4c, $3f
0e11a     37 38 38 32 
0e11e     26 20 2D 30 
0e122     26 1A 19 22 
0e126     26 26 1C 18 | 	byte	$37, $38, $38, $32, $26, $20, $2d, $30, $26, $1a, $19, $22, $26, $26, $1c, $18
0e12a     18 20 2A 28 
0e12e     1E 0E 01 F7 
0e132     ED E6 E6 EB 
0e136     F1 F4 F3 FF | 	byte	$18, $20, $2a, $28, $1e, $0e, $01, $f7, $ed, $e6, $e6, $eb, $f1, $f4, $f3, $ff
0e13a     08 16 15 04 
0e13e     F4 F2 F1 F1 
0e142     EE EA E6 E6 
0e146     E7 EB E5 E1 | 	byte	$08, $16, $15, $04, $f4, $f2, $f1, $f1, $ee, $ea, $e6, $e6, $e7, $eb, $e5, $e1
0e14a     EB EC EE FD 
0e14e     0F 1E 2D 33 
0e152     32 30 26 1C 
0e156     16 18 13 09 | 	byte	$eb, $ec, $ee, $fd, $0f, $1e, $2d, $33, $32, $30, $26, $1c, $16, $18, $13, $09
0e15a     03 08 0E 18 
0e15e     1F 20 20 27 
0e162     2C 2D 26 1B 
0e166     1E 1F 18 0E | 	byte	$03, $08, $0e, $18, $1f, $20, $20, $27, $2c, $2d, $26, $1b, $1e, $1f, $18, $0e
0e16a     00 ED ED EA 
0e16e     DF DA D9 E6 
0e172     DE D8 D6 DE 
0e176     E5 EC EE ED | 	byte	$00, $ed, $ed, $ea, $df, $da, $d9, $e6, $de, $d8, $d6, $de, $e5, $ec, $ee, $ed
0e17a     F1 ED DF D8 
0e17e     D9 DB D0 C8 
0e182     CC CF D3 D5 
0e186     CE CF E0 EE | 	byte	$f1, $ed, $df, $d8, $d9, $db, $d0, $c8, $cc, $cf, $d3, $d5, $ce, $cf, $e0, $ee
0e18a     F8 FF 03 0A 
0e18e     16 1F 20 20 
0e192     22 26 2B 28 
0e196     21 1E 25 33 | 	byte	$f8, $ff, $03, $0a, $16, $1f, $20, $20, $22, $26, $2b, $28, $21, $1e, $25, $33
0e19a     46 48 46 4F 
0e19e     56 51 4C 3C 
0e1a2     34 36 34 30 
0e1a6     2C 27 24 26 | 	byte	$46, $48, $46, $4f, $56, $51, $4c, $3c, $34, $36, $34, $30, $2c, $27, $24, $26
0e1aa     30 30 27 1C 
0e1ae     18 1B 24 26 
0e1b2     22 27 27 1C 
0e1b6     0C 00 F8 FC | 	byte	$30, $30, $27, $1c, $18, $1b, $24, $26, $22, $27, $27, $1c, $0c, $00, $f8, $fc
0e1ba     F4 EB EC F1 
0e1be     FD 0D 16 10 
0e1c2     0A 0D 09 02 
0e1c6     FD F8 F8 F8 | 	byte	$f4, $eb, $ec, $f1, $fd, $0d, $16, $10, $0a, $0d, $09, $02, $fd, $f8, $f8, $f8
0e1ca     F2 F1 F3 F3 
0e1ce     ED EC F0 EE 
0e1d2     F3 FF 0D 20 
0e1d6     30 32 2D 28 | 	byte	$f2, $f1, $f3, $f3, $ed, $ec, $f0, $ee, $f3, $ff, $0d, $20, $30, $32, $2d, $28
0e1da     2A 2D 26 18 
0e1de     06 02 07 07 
0e1e2     08 09 10 1C 
0e1e6     24 1F 15 18 | 	byte	$2a, $2d, $26, $18, $06, $02, $07, $07, $08, $09, $10, $1c, $24, $1f, $15, $18
0e1ea     20 1F 15 10 
0e1ee     0A 04 FC ED 
0e1f2     DE DF DF DA 
0e1f6     D2 D2 D2 CC | 	byte	$20, $1f, $15, $10, $0a, $04, $fc, $ed, $de, $df, $df, $da, $d2, $d2, $d2, $cc
0e1fa     C4 C9 D6 DF 
0e1fe     DC D8 D9 DE 
0e202     E1 DA CD C7 
0e206     C7 C6 C4 C1 | 	byte	$c4, $c9, $d6, $df, $dc, $d8, $d9, $de, $e1, $da, $cd, $c7, $c7, $c6, $c4, $c1
0e20a     BD BC C6 CD 
0e20e     D5 DC E2 EC 
0e212     FC 02 03 07 
0e216     10 1F 26 21 | 	byte	$bd, $bc, $c6, $cd, $d5, $dc, $e2, $ec, $fc, $02, $03, $07, $10, $1f, $26, $21
0e21a     18 16 1B 21 
0e21e     27 2A 31 3D 
0e222     4B 50 51 50 
0e226     4C 49 4A 43 | 	byte	$18, $16, $1b, $21, $27, $2a, $31, $3d, $4b, $50, $51, $50, $4c, $49, $4a, $43
0e22a     39 30 2A 32 
0e22e     3A 34 30 34 
0e232     34 2D 28 2A 
0e236     31 37 39 32 | 	byte	$39, $30, $2a, $32, $3a, $34, $30, $34, $34, $2d, $28, $2a, $31, $37, $39, $32
0e23a     27 22 1F 1C 
0e23e     13 00 F4 F4 
0e242     F9 FD 03 0D 
0e246     18 19 18 15 | 	byte	$27, $22, $1f, $1c, $13, $00, $f4, $f4, $f9, $fd, $03, $0d, $18, $19, $18, $15
0e24a     14 0C 06 01 
0e24e     FD F9 F7 F7 
0e252     F9 F9 F7 F2 
0e256     E8 E6 F3 08 | 	byte	$14, $0c, $06, $01, $fd, $f9, $f7, $f7, $f9, $f9, $f7, $f2, $e8, $e6, $f3, $08
0e25a     16 20 26 27 
0e25e     33 3A 34 2B 
0e262     26 22 18 0E 
0e266     06 06 0D 19 | 	byte	$16, $20, $26, $27, $33, $3a, $34, $2b, $26, $22, $18, $0e, $06, $06, $0d, $19
0e26a     18 19 20 24 
0e26e     26 26 26 26 
0e272     24 1C 13 0A 
0e276     02 F7 ED EA | 	byte	$18, $19, $20, $24, $26, $26, $26, $26, $24, $1c, $13, $0a, $02, $f7, $ed, $ea
0e27a     EB E8 DF D3 
0e27e     D0 D3 D6 D8 
0e282     D9 DA DC E2 
0e286     E6 E7 E1 DA | 	byte	$eb, $e8, $df, $d3, $d0, $d3, $d6, $d8, $d9, $da, $dc, $e2, $e6, $e7, $e1, $da
0e28a     D6 D8 D5 CC 
0e28e     C3 C0 C4 C6 
0e292     C3 C4 CF E0 
0e296     EB ED EA EC | 	byte	$d6, $d8, $d5, $cc, $c3, $c0, $c4, $c6, $c3, $c4, $cf, $e0, $eb, $ed, $ea, $ec
0e29a     F9 03 0E 10 
0e29e     0F 13 13 0F 
0e2a2     0E 0F 0F 16 
0e2a6     24 2E 31 33 | 	byte	$f9, $03, $0e, $10, $0f, $13, $13, $0f, $0e, $0f, $0f, $16, $24, $2e, $31, $33
0e2aa     3A 44 44 3E 
0e2ae     34 2B 27 24 
0e2b2     1F 1E 22 27 
0e2b6     26 22 1C 19 | 	byte	$3a, $44, $44, $3e, $34, $2b, $27, $24, $1f, $1e, $22, $27, $26, $22, $1c, $19
0e2ba     20 2A 2B 26 
0e2be     26 28 27 27 
0e2c2     1F 15 0A 02 
0e2c6     F9 F4 F1 F9 | 	byte	$20, $2a, $2b, $26, $26, $28, $27, $27, $1f, $15, $0a, $02, $f9, $f4, $f1, $f9
0e2ca     03 0E 14 1B 
0e2ce     1F 1F 1C 18 
0e2d2     13 0A 07 00 
0e2d6     FF 06 08 00 | 	byte	$03, $0e, $14, $1b, $1f, $1f, $1c, $18, $13, $0a, $07, $00, $ff, $06, $08, $00
0e2da     F4 F0 F1 FA 
0e2de     03 0A 15 24 
0e2e2     30 34 36 3C 
0e2e6     40 43 39 2B | 	byte	$f4, $f0, $f1, $fa, $03, $0a, $15, $24, $30, $34, $36, $3c, $40, $43, $39, $2b
0e2ea     24 1E 18 18 
0e2ee     19 1C 1F 20 
0e2f2     24 2A 2E 30 
0e2f6     2D 2E 2C 27 | 	byte	$24, $1e, $18, $18, $19, $1c, $1f, $20, $24, $2a, $2e, $30, $2d, $2e, $2c, $27
0e2fa     1C 0E 04 00 
0e2fe     FD F7 EE E5 
0e302     DF DA D9 D9 
0e306     D6 D0 D2 DC | 	byte	$1c, $0e, $04, $00, $fd, $f7, $ee, $e5, $df, $da, $d9, $d9, $d6, $d0, $d2, $dc
0e30a     E1 E0 E1 E2 
0e30e     E6 E6 E0 D8 
0e312     D3 D0 CC C4 
0e316     BC BC C6 CF | 	byte	$e1, $e0, $e1, $e2, $e6, $e6, $e0, $d8, $d3, $d0, $cc, $c4, $bc, $bc, $c6, $cf
0e31a     D9 E2 E6 E7 
0e31e     EB F6 FF 01 
0e322     06 0D 16 19 
0e326     15 0F 0F 14 | 	byte	$d9, $e2, $e6, $e7, $eb, $f6, $ff, $01, $06, $0d, $16, $19, $15, $0f, $0f, $14
0e32a     18 19 1B 22 
0e32e     2E 38 43 44 
0e332     44 44 3D 30 
0e336     24 1C 21 26 | 	byte	$18, $19, $1b, $22, $2e, $38, $43, $44, $44, $44, $3d, $30, $24, $1c, $21, $26
0e33a     26 22 1C 1B 
0e33e     1E 22 26 1F 
0e342     1E 24 27 25 
0e346     26 21 1C 15 | 	byte	$26, $22, $1c, $1b, $1e, $22, $26, $1f, $1e, $24, $27, $25, $26, $21, $1c, $15
0e34a     0C 00 F4 F0 
0e34e     F0 F1 FA FF 
0e352     07 0A 10 16 
0e356     18 13 04 FC | 	byte	$0c, $00, $f4, $f0, $f0, $f1, $fa, $ff, $07, $0a, $10, $16, $18, $13, $04, $fc
0e35a     FC FD FC F7 
0e35e     F2 F0 EA E5 
0e362     E6 EA F2 FA 
0e366     03 0A 15 22 | 	byte	$fc, $fd, $fc, $f7, $f2, $f0, $ea, $e5, $e6, $ea, $f2, $fa, $03, $0a, $15, $22
0e36a     2B 33 37 34 
0e36e     2D 22 1C 1C 
0e372     18 14 12 15 
0e376     1A 1F 20 24 | 	byte	$2b, $33, $37, $34, $2d, $22, $1c, $1c, $18, $14, $12, $15, $1a, $1f, $20, $24
0e37a     27 30 34 36 
0e37e     34 27 1C 18 
0e382     13 0F 04 FA 
0e386     F6 F3 EE E7 | 	byte	$27, $30, $34, $36, $34, $27, $1c, $18, $13, $0f, $04, $fa, $f6, $f3, $ee, $e7
0e38a     E0 DE E0 E1 
0e38e     E0 DF E7 EE 
0e392     F4 F2 F0 EE 
0e396     ED EC E8 DF | 	byte	$e0, $de, $e0, $e1, $e0, $df, $e7, $ee, $f4, $f2, $f0, $ee, $ed, $ec, $e8, $df
0e39a     D3 C8 C6 CC 
0e39e     D2 D6 D9 E0 
0e3a2     EC F1 F3 F7 
0e3a6     FD 04 0D 12 | 	byte	$d3, $c8, $c6, $cc, $d2, $d6, $d9, $e0, $ec, $f1, $f3, $f7, $fd, $04, $0d, $12
0e3aa     13 13 15 19 
0e3ae     18 14 13 18 
0e3b2     1B 20 2A 33 
0e3b6     40 46 4A 43 | 	byte	$13, $13, $15, $19, $18, $14, $13, $18, $1b, $20, $2a, $33, $40, $46, $4a, $43
0e3ba     32 2B 28 28 
0e3be     26 20 19 19 
0e3c2     1B 1A 19 1A 
0e3c6     1B 19 1B 1F | 	byte	$32, $2b, $28, $28, $26, $20, $19, $19, $1b, $1a, $19, $1a, $1b, $19, $1b, $1f
0e3ca     21 21 22 21 
0e3ce     1C 15 09 00 
0e3d2     F3 F2 F2 F1 
0e3d6     F1 F7 FF 0A | 	byte	$21, $21, $22, $21, $1c, $15, $09, $00, $f3, $f2, $f2, $f1, $f1, $f7, $ff, $0a
0e3da     10 13 10 0E 
0e3de     09 04 00 00 
0e3e2     FE F9 F2 E8 
0e3e6     E7 E7 E8 EB | 	byte	$10, $13, $10, $0e, $09, $04, $00, $00, $fe, $f9, $f2, $e8, $e7, $e7, $e8, $eb
0e3ea     F2 F6 FD 02 
0e3ee     10 20 2C 30 
0e3f2     32 31 2D 26 
0e3f6     20 19 13 0F | 	byte	$f2, $f6, $fd, $02, $10, $20, $2c, $30, $32, $31, $2d, $26, $20, $19, $13, $0f
0e3fa     0E 10 14 13 
0e3fe     14 1B 27 2E 
0e402     30 2B 26 22 
0e406     20 18 09 04 | 	byte	$0e, $10, $14, $13, $14, $1b, $27, $2e, $30, $2b, $26, $22, $20, $18, $09, $04
0e40a     FE F9 F1 E7 
0e40e     E4 E1 DF DA 
0e412     D3 D0 D2 D8 
0e416     DC DF E0 E0 | 	byte	$fe, $f9, $f1, $e7, $e4, $e1, $df, $da, $d3, $d0, $d2, $d8, $dc, $df, $e0, $e0
0e41a     E5 EC EE E8 
0e41e     DC D3 CC C7 
0e422     C3 C3 C8 CF 
0e426     D8 DE E2 E7 | 	byte	$e5, $ec, $ee, $e8, $dc, $d3, $cc, $c7, $c3, $c3, $c8, $cf, $d8, $de, $e2, $e7
0e42a     F1 FA FF 04 
0e42e     09 10 16 1A 
0e432     1B 1C 1E 1E 
0e436     1C 1C 1C 25 | 	byte	$f1, $fa, $ff, $04, $09, $10, $16, $1a, $1b, $1c, $1e, $1e, $1c, $1c, $1c, $25
0e43a     33 43 4F 4F 
0e43e     4C 49 48 45 
0e442     3D 37 31 2B 
0e446     2A 2B 2B 26 | 	byte	$33, $43, $4f, $4f, $4c, $49, $48, $45, $3d, $37, $31, $2b, $2a, $2b, $2b, $26
0e44a     25 27 27 28 
0e44e     27 28 2D 32 
0e452     31 2C 26 1A 
0e456     13 0A 00 F7 | 	byte	$25, $27, $27, $28, $27, $28, $2d, $32, $31, $2c, $26, $1a, $13, $0a, $00, $f7
0e45a     F2 F2 F4 F7 
0e45e     FF 08 0F 10 
0e462     0C 09 09 04 
0e466     04 02 FD F4 | 	byte	$f2, $f2, $f4, $f7, $ff, $08, $0f, $10, $0c, $09, $09, $04, $04, $02, $fd, $f4
0e46a     ED E5 E4 E5 
0e46e     E6 E6 E6 EA 
0e472     F3 FC 08 16 
0e476     20 28 2C 30 | 	byte	$ed, $e5, $e4, $e5, $e6, $e6, $e6, $ea, $f3, $fc, $08, $16, $20, $28, $2c, $30
0e47a     2E 28 1F 18 
0e47e     16 18 13 0C 
0e482     0A 0F 18 21 
0e486     26 28 2C 2E | 	byte	$2e, $28, $1f, $18, $16, $18, $13, $0c, $0a, $0f, $18, $21, $26, $28, $2c, $2e
0e48a     2D 2B 21 1E 
0e48e     16 0E 04 FA 
0e492     F3 EE EC E8 
0e496     DF D8 D9 DA | 	byte	$2d, $2b, $21, $1e, $16, $0e, $04, $fa, $f3, $ee, $ec, $e8, $df, $d8, $d9, $da
0e49a     D9 D8 D5 D8 
0e49e     DE E2 EA EB 
0e4a2     EA EA E4 D5 
0e4a6     CC C3 C0 C1 | 	byte	$d9, $d8, $d5, $d8, $de, $e2, $ea, $eb, $ea, $ea, $e4, $d5, $cc, $c3, $c0, $c1
0e4aa     C6 C9 CE D4 
0e4ae     DB E5 E8 ED 
0e4b2     F4 FC 02 06 
0e4b6     0A 10 16 18 | 	byte	$c6, $c9, $ce, $d4, $db, $e5, $e8, $ed, $f4, $fc, $02, $06, $0a, $10, $16, $18
0e4ba     18 13 0C 0C 
0e4be     16 20 2A 34 
0e4c2     3C 3D 42 44 
0e4c6     43 3D 36 33 | 	byte	$18, $13, $0c, $0c, $16, $20, $2a, $34, $3c, $3d, $42, $44, $43, $3d, $36, $33
0e4ca     31 2B 26 21 
0e4ce     22 25 24 21 
0e4d2     1F 20 25 2B 
0e4d6     2D 30 31 30 | 	byte	$31, $2b, $26, $21, $22, $25, $24, $21, $1f, $20, $25, $2b, $2d, $30, $31, $30
0e4da     2B 26 1C 13 
0e4de     0A 01 F9 F7 
0e4e2     F9 FF 08 0F 
0e4e6     13 14 13 15 | 	byte	$2b, $26, $1c, $13, $0a, $01, $f9, $f7, $f9, $ff, $08, $0f, $13, $14, $13, $15
0e4ea     18 19 18 10 
0e4ee     09 00 FC F6 
0e4f2     F4 F3 F2 ED 
0e4f6     EE F3 FD 06 | 	byte	$18, $19, $18, $10, $09, $00, $fc, $f6, $f4, $f3, $f2, $ed, $ee, $f3, $fd, $06
0e4fa     0D 1A 25 32 
0e4fe     36 34 32 31 
0e502     30 2B 26 1A 
0e506     13 12 13 14 | 	byte	$0d, $1a, $25, $32, $36, $34, $32, $31, $30, $2b, $26, $1a, $13, $12, $13, $14
0e50a     18 20 26 2C 
0e50e     2E 2D 2C 2C 
0e512     2C 26 18 0C 
0e516     04 00 F9 F0 | 	byte	$18, $20, $26, $2c, $2e, $2d, $2c, $2c, $2c, $26, $18, $0c, $04, $00, $f9, $f0
0e51a     E5 DF DA D6 
0e51e     D5 D0 CD CD 
0e522     CD CE D0 D6 
0e526     DF E5 E7 E1 | 	byte	$e5, $df, $da, $d6, $d5, $d0, $cd, $cd, $cd, $ce, $d0, $d6, $df, $e5, $e7, $e1
0e52a     DA CE C7 C2 
0e52e     BD BB BB C1 
0e532     CA CE D2 D9 
0e536     E5 EC F0 F4 | 	byte	$da, $ce, $c7, $c2, $bd, $bb, $bb, $c1, $ca, $ce, $d2, $d9, $e5, $ec, $f0, $f4
0e53a     F8 FD 08 12 
0e53e     18 14 13 0C 
0e542     0C 13 1A 20 
0e546     27 2E 38 3F | 	byte	$f8, $fd, $08, $12, $18, $14, $13, $0c, $0c, $13, $1a, $20, $27, $2e, $38, $3f
0e54a     43 42 40 42 
0e54e     3E 39 30 2B 
0e552     28 27 26 1E 
0e556     1C 1C 1F 1F | 	byte	$43, $42, $40, $42, $3e, $39, $30, $2b, $28, $27, $26, $1e, $1c, $1c, $1f, $1f
0e55a     21 25 2A 2D 
0e55e     2E 2C 2A 26 
0e562     1B 15 09 FD 
0e566     F4 F4 F7 FA | 	byte	$21, $25, $2a, $2d, $2e, $2c, $2a, $26, $1b, $15, $09, $fd, $f4, $f4, $f7, $fa
0e56a     FF 02 06 09 
0e56e     0C 12 14 15 
0e572     13 09 01 FD 
0e576     FC F9 F3 ED | 	byte	$ff, $02, $06, $09, $0c, $12, $14, $15, $13, $09, $01, $fd, $fc, $f9, $f3, $ed
0e57a     EA EC EB EB 
0e57e     EE F8 06 12 
0e582     1E 26 2C 31 
0e586     34 36 30 2B | 	byte	$ea, $ec, $eb, $eb, $ee, $f8, $06, $12, $1e, $26, $2c, $31, $34, $36, $30, $2b
0e58a     26 21 18 14 
0e58e     15 16 20 26 
0e592     2A 2C 33 3C 
0e596     3D 3C 34 30 | 	byte	$26, $21, $18, $14, $15, $16, $20, $26, $2a, $2c, $33, $3c, $3d, $3c, $34, $30
0e59a     26 20 19 0E 
0e59e     04 00 F8 F0 
0e5a2     EA E6 E2 E1 
0e5a6     DC D5 D2 D4 | 	byte	$26, $20, $19, $0e, $04, $00, $f8, $f0, $ea, $e6, $e2, $e1, $dc, $d5, $d2, $d4
0e5aa     D9 E5 EC EC 
0e5ae     ED EB E6 DA 
0e5b2     D0 C9 C7 C8 
0e5b6     C3 C3 C9 CE | 	byte	$d9, $e5, $ec, $ec, $ed, $eb, $e6, $da, $d0, $c9, $c7, $c8, $c3, $c3, $c9, $ce
0e5ba     D4 DE E4 E8 
0e5be     EA EC F3 FE 
0e5c2     07 0A 0C 09 
0e5c6     08 09 07 07 | 	byte	$d4, $de, $e4, $e8, $ea, $ec, $f3, $fe, $07, $0a, $0c, $09, $08, $09, $07, $07
0e5ca     0A 14 1E 24 
0e5ce     27 2E 36 39 
0e5d2     3C 36 33 30 
0e5d6     2A 26 20 1C | 	byte	$0a, $14, $1e, $24, $27, $2e, $36, $39, $3c, $36, $33, $30, $2a, $26, $20, $1c
0e5da     15 14 13 12 
0e5de     0E 10 18 1A 
0e5e2     21 24 25 27 
0e5e6     27 26 1F 13 | 	byte	$15, $14, $13, $12, $0e, $10, $18, $1a, $21, $24, $25, $27, $27, $26, $1f, $13
0e5ea     07 00 F9 F7 
0e5ee     FA FC FE FF 
0e5f2     03 09 12 16 
0e5f6     19 18 14 14 | 	byte	$07, $00, $f9, $f7, $fa, $fc, $fe, $ff, $03, $09, $12, $16, $19, $18, $14, $14
0e5fa     0F 07 02 FD 
0e5fe     FA F7 F2 ED 
0e602     E8 EC F4 FD 
0e606     04 0F 16 24 | 	byte	$0f, $07, $02, $fd, $fa, $f7, $f2, $ed, $e8, $ec, $f4, $fd, $04, $0f, $16, $24
0e60a     2B 30 33 34 
0e60e     34 30 28 1E 
0e612     18 14 18 13 
0e616     13 16 1F 25 | 	byte	$2b, $30, $33, $34, $34, $30, $28, $1e, $18, $14, $18, $13, $13, $16, $1f, $25
0e61a     2D 32 36 36 
0e61e     32 30 26 1C 
0e622     14 0D 06 FD 
0e626     F0 ED E8 E7 | 	byte	$2d, $32, $36, $36, $32, $30, $26, $1c, $14, $0d, $06, $fd, $f0, $ed, $e8, $e7
0e62a     E1 DB D6 D0 
0e62e     D0 D2 D6 DC 
0e632     E7 EE F0 EA 
0e636     E4 DF DA D4 | 	byte	$e1, $db, $d6, $d0, $d0, $d2, $d6, $dc, $e7, $ee, $f0, $ea, $e4, $df, $da, $d4
0e63a     CE C9 C3 C7 
0e63e     CD D4 DC E1 
0e642     E5 E7 F0 F6 
0e646     FF 09 10 14 | 	byte	$ce, $c9, $c3, $c7, $cd, $d4, $dc, $e1, $e5, $e7, $f0, $f6, $ff, $09, $10, $14
0e64a     1A 18 13 12 
0e64e     13 14 16 1E 
0e652     22 2A 31 3C 
0e656     3F 43 43 40 | 	byte	$1a, $18, $13, $12, $13, $14, $16, $1e, $22, $2a, $31, $3c, $3f, $43, $43, $40
0e65a     3E 39 34 31 
0e65e     2C 26 21 1C 
0e662     18 13 14 19 
0e666     19 1B 1F 22 | 	byte	$3e, $39, $34, $31, $2c, $26, $21, $1c, $18, $13, $14, $19, $19, $1b, $1f, $22
0e66a     28 2A 2B 26 
0e66e     1C 13 06 00 
0e672     FC F7 F4 F3 
0e676     F2 F4 FA 01 | 	byte	$28, $2a, $2b, $26, $1c, $13, $06, $00, $fc, $f7, $f4, $f3, $f2, $f4, $fa, $01
0e67a     08 0D 0F 13 
0e67e     10 0C 07 04 
0e682     00 FC F7 EE 
0e686     EA E5 E4 E4 | 	byte	$08, $0d, $0f, $13, $10, $0c, $07, $04, $00, $fc, $f7, $ee, $ea, $e5, $e4, $e4
0e68a     E7 F0 F6 FF 
0e68e     0A 14 1E 2A 
0e692     31 32 30 27 
0e696     24 1F 1B 16 | 	byte	$e7, $f0, $f6, $ff, $0a, $14, $1e, $2a, $31, $32, $30, $27, $24, $1f, $1b, $16
0e69a     13 10 13 15 
0e69e     1E 22 28 31 
0e6a2     36 37 32 2E 
0e6a6     2A 26 1C 14 | 	byte	$13, $10, $13, $15, $1e, $22, $28, $31, $36, $37, $32, $2e, $2a, $26, $1c, $14
0e6aa     09 03 00 F7 
0e6ae     F1 EA E4 DF 
0e6b2     DA D0 CD D0 
0e6b6     D9 E4 EA EA | 	byte	$09, $03, $00, $f7, $f1, $ea, $e4, $df, $da, $d0, $cd, $d0, $d9, $e4, $ea, $ea
0e6ba     EB E8 E8 E6 
0e6be     DB D5 CE C7 
0e6c2     C6 C9 CF D3 
0e6c6     D5 DB DE E2 | 	byte	$eb, $e8, $e8, $e6, $db, $d5, $ce, $c7, $c6, $c9, $cf, $d3, $d5, $db, $de, $e2
0e6ca     EA F1 FA 03 
0e6ce     09 0F 13 0F 
0e6d2     10 12 10 10 
0e6d6     0F 14 20 2A | 	byte	$ea, $f1, $fa, $03, $09, $0f, $13, $0f, $10, $12, $10, $10, $0f, $14, $20, $2a
0e6da     2E 33 3A 3F 
0e6de     44 43 3E 3A 
0e6e2     39 37 30 28 
0e6e6     26 1C 1C 18 | 	byte	$2e, $33, $3a, $3f, $44, $43, $3e, $3a, $39, $37, $30, $28, $26, $1c, $1c, $18
0e6ea     16 19 1B 1C 
0e6ee     20 28 2E 33 
0e6f2     30 2A 24 1E 
0e6f6     18 10 07 01 | 	byte	$16, $19, $1b, $1c, $20, $28, $2e, $33, $30, $2a, $24, $1e, $18, $10, $07, $01
0e6fa     FE FA FA FA 
0e6fe     FF 06 0E 10 
0e702     16 16 15 13 
0e706     10 0E 09 04 | 	byte	$fe, $fa, $fa, $fa, $ff, $06, $0e, $10, $16, $16, $15, $13, $10, $0e, $09, $04
0e70a     01 F8 F2 ED 
0e70e     EC EB EE F1 
0e712     F4 FD 06 12 
0e716     20 2B 2E 30 | 	byte	$01, $f8, $f2, $ed, $ec, $eb, $ee, $f1, $f4, $fd, $06, $12, $20, $2b, $2e, $30
0e71a     30 30 2B 26 
0e71e     1C 18 14 13 
0e722     0E 0F 19 21 
0e726     28 2D 31 31 | 	byte	$30, $30, $2b, $26, $1c, $18, $14, $13, $0e, $0f, $19, $21, $28, $2d, $31, $31
0e72a     32 32 2D 26 
0e72e     1C 14 0C 04 
0e732     FD F4 F1 EE 
0e736     E4 DA CC C8 | 	byte	$32, $32, $2d, $26, $1c, $14, $0c, $04, $fd, $f4, $f1, $ee, $e4, $da, $cc, $c8
0e73a     C4 CA CF D4 
0e73e     D9 DB DE E1 
0e742     E0 DC D5 CC 
0e746     C3 C0 C0 C3 | 	byte	$c4, $ca, $cf, $d4, $d9, $db, $de, $e1, $e0, $dc, $d5, $cc, $c3, $c0, $c0, $c3
0e74a     C3 C8 CA CE 
0e74e     D0 D6 E0 EC 
0e752     F6 FD 02 07 
0e756     10 15 10 0D | 	byte	$c3, $c8, $ca, $ce, $d0, $d6, $e0, $ec, $f6, $fd, $02, $07, $10, $15, $10, $0d
0e75a     10 0D 12 15 
0e75e     19 22 2E 36 
0e762     3C 42 42 46 
0e766     45 40 3D 3A | 	byte	$10, $0d, $12, $15, $19, $22, $2e, $36, $3c, $42, $42, $46, $45, $40, $3d, $3a
0e76a     34 2C 26 21 
0e76e     20 1F 18 13 
0e772     16 1C 22 27 
0e776     2C 2B 2D 2C | 	byte	$34, $2c, $26, $21, $20, $1f, $18, $13, $16, $1c, $22, $27, $2c, $2b, $2d, $2c
0e77a     28 21 1C 16 
0e77e     0F 09 00 FC 
0e782     FC FF FF 06 
0e786     0E 12 15 14 | 	byte	$28, $21, $1c, $16, $0f, $09, $00, $fc, $fc, $ff, $ff, $06, $0e, $12, $15, $14
0e78a     15 15 14 13 
0e78e     0E 07 00 FA 
0e792     F3 F1 F0 ED 
0e796     E8 E7 EC F8 | 	byte	$15, $15, $14, $13, $0e, $07, $00, $fa, $f3, $f1, $f0, $ed, $e8, $e7, $ec, $f8
0e79a     FF 0A 14 1E 
0e79e     26 2D 2C 2C 
0e7a2     2B 26 21 1C 
0e7a6     13 10 0F 12 | 	byte	$ff, $0a, $14, $1e, $26, $2d, $2c, $2c, $2b, $26, $21, $1c, $13, $10, $0f, $12
0e7aa     1B 1F 28 31 
0e7ae     33 38 3D 32 
0e7b2     32 30 28 21 
0e7b6     19 13 0E 0A | 	byte	$1b, $1f, $28, $31, $33, $38, $3d, $32, $32, $30, $28, $21, $19, $13, $0e, $0a
0e7ba     07 00 ED DF 
0e7be     D6 D2 D4 D4 
0e7c2     D5 DB DF E2 
0e7c6     EA E7 E4 E0 | 	byte	$07, $00, $ed, $df, $d6, $d2, $d4, $d4, $d5, $db, $df, $e2, $ea, $e7, $e4, $e0
0e7ca     DA D2 C8 C4 
0e7ce     C3 C9 C8 C9 
0e7d2     C7 C9 CD D4 
0e7d6     D9 E0 E7 F3 | 	byte	$da, $d2, $c8, $c4, $c3, $c9, $c8, $c9, $c7, $c9, $cd, $d4, $d9, $e0, $e7, $f3
0e7da     FA 02 06 08 
0e7de     0C 0A 07 07 
0e7e2     08 08 12 16 
0e7e6     1E 27 2D 34 | 	byte	$fa, $02, $06, $08, $0c, $0a, $07, $07, $08, $08, $12, $16, $1e, $27, $2d, $34
0e7ea     36 36 37 38 
0e7ee     34 2C 27 22 
0e7f2     21 1C 13 0C 
0e7f6     08 0D 0F 12 | 	byte	$36, $36, $37, $38, $34, $2c, $27, $22, $21, $1c, $13, $0c, $08, $0d, $0f, $12
0e7fa     16 18 1E 26 
0e7fe     21 20 21 1F 
0e802     1A 15 0C 07 
0e806     03 FC FC FD | 	byte	$16, $18, $1e, $26, $21, $20, $21, $1f, $1a, $15, $0c, $07, $03, $fc, $fc, $fd
0e80a     FF 09 10 16 
0e80e     19 1B 1F 20 
0e812     22 1F 18 0F 
0e816     0F 08 06 00 | 	byte	$ff, $09, $10, $16, $19, $1b, $1f, $20, $22, $1f, $18, $0f, $0f, $08, $06, $00
0e81a     FC F9 F7 F4 
0e81e     FA FF 07 12 
0e822     1E 26 2D 32 
0e826     37 3A 39 31 | 	byte	$fc, $f9, $f7, $f4, $fa, $ff, $07, $12, $1e, $26, $2d, $32, $37, $3a, $39, $31
0e82a     26 1E 1A 13 
0e82e     14 12 15 1E 
0e832     26 2C 31 32 
0e836     36 36 32 2B | 	byte	$26, $1e, $1a, $13, $14, $12, $15, $1e, $26, $2c, $31, $32, $36, $36, $32, $2b
0e83a     21 1C 16 15 
0e83e     13 09 00 F7 
0e842     EB E1 D8 D0 
0e846     CD CD CD D2 | 	byte	$21, $1c, $16, $15, $13, $09, $00, $f7, $eb, $e1, $d8, $d0, $cd, $cd, $cd, $d2
0e84a     D8 DB E0 E7 
0e84e     E4 DC DA CE 
0e852     CD CA C7 C6 
0e856     C8 CA CC CC | 	byte	$d8, $db, $e0, $e7, $e4, $dc, $da, $ce, $cd, $ca, $c7, $c6, $c8, $ca, $cc, $cc
0e85a     CC D4 D9 E2 
0e85e     EB F3 FE 06 
0e862     0C 0D 0E 0D 
0e866     0F 0F 10 13 | 	byte	$cc, $d4, $d9, $e2, $eb, $f3, $fe, $06, $0c, $0d, $0e, $0d, $0f, $0f, $10, $13
0e86a     18 22 26 2A 
0e86e     2E 37 3C 42 
0e872     3F 39 3A 39 
0e876     34 30 26 1C | 	byte	$18, $22, $26, $2a, $2e, $37, $3c, $42, $3f, $39, $3a, $39, $34, $30, $26, $1c
0e87a     19 13 0E 0D 
0e87e     0E 13 14 15 
0e882     15 15 18 1C 
0e886     15 13 0E 09 | 	byte	$19, $13, $0e, $0d, $0e, $13, $14, $15, $15, $15, $18, $1c, $15, $13, $0e, $09
0e88a     03 FC F2 EA 
0e88e     E8 EB F1 F6 
0e892     F8 FA 01 08 
0e896     0E 10 12 0E | 	byte	$03, $fc, $f2, $ea, $e8, $eb, $f1, $f6, $f8, $fa, $01, $08, $0e, $10, $12, $0e
0e89a     0E 0A 07 06 
0e89e     00 F7 F4 F3 
0e8a2     F0 F0 F6 FF 
0e8a6     07 0D 16 1E | 	byte	$0e, $0a, $07, $06, $00, $f7, $f4, $f3, $f0, $f0, $f6, $ff, $07, $0d, $16, $1e
0e8aa     25 33 39 3E 
0e8ae     3E 39 34 2E 
0e8b2     26 1A 19 19 
0e8b6     1F 21 2A 2D | 	byte	$25, $33, $39, $3e, $3e, $39, $34, $2e, $26, $1a, $19, $19, $1f, $21, $2a, $2d
0e8ba     37 3D 40 3E 
0e8be     36 31 2C 27 
0e8c2     24 1F 1A 15 
0e8c6     09 01 F3 E8 | 	byte	$37, $3d, $40, $3e, $36, $31, $2c, $27, $24, $1f, $1a, $15, $09, $01, $f3, $e8
0e8ca     E2 DC D5 D2 
0e8ce     D0 D4 DE E2 
0e8d2     E4 E7 E7 E1 
0e8d6     DE DA D3 D0 | 	byte	$e2, $dc, $d5, $d2, $d0, $d4, $de, $e2, $e4, $e7, $e7, $e1, $de, $da, $d3, $d0
0e8da     CE CC CC C8 
0e8de     C9 CA CF CF 
0e8e2     D6 DE E7 EC 
0e8e6     F6 FD 03 0C | 	byte	$ce, $cc, $cc, $c8, $c9, $ca, $cf, $cf, $d6, $de, $e7, $ec, $f6, $fd, $03, $0c
0e8ea     0D 0C 08 09 
0e8ee     0D 10 13 15 
0e8f2     1A 24 2D 32 
0e8f6     37 39 3D 3D | 	byte	$0d, $0c, $08, $09, $0d, $10, $13, $15, $1a, $24, $2d, $32, $37, $39, $3d, $3d
0e8fa     3C 39 36 32 
0e8fe     28 20 18 13 
0e902     13 10 13 12 
0e906     12 15 18 1A | 	byte	$3c, $39, $36, $32, $28, $20, $18, $13, $13, $10, $13, $12, $12, $15, $18, $1a
0e90a     18 1B 16 18 
0e90e     13 10 09 00 
0e912     F9 F3 F2 F1 
0e916     F2 F3 F6 FD | 	byte	$18, $1b, $16, $18, $13, $10, $09, $00, $f9, $f3, $f2, $f1, $f2, $f3, $f6, $fd
0e91a     03 0A 12 13 
0e91e     15 15 13 0E 
0e922     0C 09 04 FC 
0e926     F7 F3 EE F3 | 	byte	$03, $0a, $12, $13, $15, $15, $13, $0e, $0c, $09, $04, $fc, $f7, $f3, $ee, $f3
0e92a     F4 F6 FD 03 
0e92e     0A 16 20 2A 
0e932     33 3A 3C 3C 
0e936     34 2B 26 1E | 	byte	$f4, $f6, $fd, $03, $0a, $16, $20, $2a, $33, $3a, $3c, $3c, $34, $2b, $26, $1e
0e93a     18 13 13 1A 
0e93e     1F 2A 33 39 
0e942     3A 3A 36 33 
0e946     2C 26 26 21 | 	byte	$18, $13, $13, $1a, $1f, $2a, $33, $39, $3a, $3a, $36, $33, $2c, $26, $26, $21
0e94a     1C 18 0C 02 
0e94e     00 F0 E4 D5 
0e952     D2 CC CC D0 
0e956     D8 DB E2 E5 | 	byte	$1c, $18, $0c, $02, $00, $f0, $e4, $d5, $d2, $cc, $cc, $d0, $d8, $db, $e2, $e5
0e95a     E1 E4 DC DB 
0e95e     DA D3 CD CE 
0e962     CC CC C8 C9 
0e966     CE CF D5 D9 | 	byte	$e1, $e4, $dc, $db, $da, $d3, $cd, $ce, $cc, $cc, $c8, $c9, $ce, $cf, $d5, $d9
0e96a     E6 EC F9 FF 
0e96e     07 09 08 0E 
0e972     0F 0E 10 13 
0e976     10 1A 1E 26 | 	byte	$e6, $ec, $f9, $ff, $07, $09, $08, $0e, $0f, $0e, $10, $13, $10, $1a, $1e, $26
0e97a     2E 32 36 3D 
0e97e     3F 3F 42 40 
0e982     3E 36 2B 26 
0e986     1C 19 1A 15 | 	byte	$2e, $32, $36, $3d, $3f, $3f, $42, $40, $3e, $36, $2b, $26, $1c, $19, $1a, $15
0e98a     14 18 18 1A 
0e98e     1E 1E 1F 22 
0e992     22 21 1A 14 
0e996     0E 07 04 00 | 	byte	$14, $18, $18, $1a, $1e, $1e, $1f, $22, $22, $21, $1a, $14, $0e, $07, $04, $00
0e99a     F8 F7 F7 F4 
0e99e     F7 FC FF 07 
0e9a2     0C 0D 13 13 
0e9a6     13 10 0E 07 | 	byte	$f8, $f7, $f7, $f4, $f7, $fc, $ff, $07, $0c, $0d, $13, $13, $13, $10, $0e, $07
0e9aa     00 F9 F3 EE 
0e9ae     ED EC F0 F0 
0e9b2     F4 F9 FF 07 
0e9b6     12 20 2A 31 | 	byte	$00, $f9, $f3, $ee, $ed, $ec, $f0, $f0, $f4, $f9, $ff, $07, $12, $20, $2a, $31
0e9ba     36 32 30 2C 
0e9be     26 1C 13 0F 
0e9c2     0F 16 1C 25 
0e9c6     2D 36 3C 37 | 	byte	$36, $32, $30, $2c, $26, $1c, $13, $0f, $0f, $16, $1c, $25, $2d, $36, $3c, $37
0e9ca     38 34 33 31 
0e9ce     2B 27 21 1C 
0e9d2     18 0E 01 F9 
0e9d6     F0 E2 DB D4 | 	byte	$38, $34, $33, $31, $2b, $27, $21, $1c, $18, $0e, $01, $f9, $f0, $e2, $db, $d4
0e9da     D2 D8 DA DA 
0e9de     E0 E1 E5 E2 
0e9e2     E0 DC DA D4 
0e9e6     D0 C7 C6 C6 | 	byte	$d2, $d8, $da, $da, $e0, $e1, $e5, $e2, $e0, $dc, $da, $d4, $d0, $c7, $c6, $c6
0e9ea     C4 C8 CA CF 
0e9ee     D3 D8 DE E6 
0e9f2     EC F6 FE FE 
0e9f6     FF 0A 0D 09 | 	byte	$c4, $c8, $ca, $cf, $d3, $d8, $de, $e6, $ec, $f6, $fe, $fe, $ff, $0a, $0d, $09
0e9fa     0D 0C 0F 16 
0e9fe     16 1B 25 2B 
0ea02     2E 36 3C 40 
0ea06     42 45 3D 32 | 	byte	$0d, $0c, $0f, $16, $16, $1b, $25, $2b, $2e, $36, $3c, $40, $42, $45, $3d, $32
0ea0a     2D 26 1E 18 
0ea0e     0F 0C 0C 0F 
0ea12     0E 0E 14 18 
0ea16     1B 1E 1B 1C | 	byte	$2d, $26, $1e, $18, $0f, $0c, $0c, $0f, $0e, $0e, $14, $18, $1b, $1e, $1b, $1c
0ea1a     18 13 0F 0E 
0ea1e     09 07 01 F9 
0ea22     F7 F8 FA FF 
0ea26     07 09 0F 18 | 	byte	$18, $13, $0f, $0e, $09, $07, $01, $f9, $f7, $f8, $fa, $ff, $07, $09, $0f, $18
0ea2a     1B 21 26 20 
0ea2e     1E 14 13 09 
0ea32     02 00 FE FA 
0ea36     FD FC FD FF | 	byte	$1b, $21, $26, $20, $1e, $14, $13, $09, $02, $00, $fe, $fa, $fd, $fc, $fd, $ff
0ea3a     03 0F 1B 24 
0ea3e     2E 36 36 40 
0ea42     39 32 2B 21 
0ea46     15 0F 0A 0D | 	byte	$03, $0f, $1b, $24, $2e, $36, $36, $40, $39, $32, $2b, $21, $15, $0f, $0a, $0d
0ea4a     15 20 28 2E 
0ea4e     34 39 37 36 
0ea52     31 27 26 27 
0ea56     1E 1B 1A 13 | 	byte	$15, $20, $28, $2e, $34, $39, $37, $36, $31, $27, $26, $27, $1e, $1b, $1a, $13
0ea5a     06 F9 ED E1 
0ea5e     DA CF CF C8 
0ea62     CF D6 DB DC 
0ea66     DE DE DF DA | 	byte	$06, $f9, $ed, $e1, $da, $cf, $cf, $c8, $cf, $d6, $db, $dc, $de, $de, $df, $da
0ea6a     D2 CE CA C7 
0ea6e     C1 C0 C1 C2 
0ea72     C3 CA CC D8 
0ea76     DE E5 EC F1 | 	byte	$d2, $ce, $ca, $c7, $c1, $c0, $c1, $c2, $c3, $ca, $cc, $d8, $de, $e5, $ec, $f1
0ea7a     FA 08 09 09 
0ea7e     0F 14 14 19 
0ea82     16 19 24 28 
0ea86     2C 2D 34 3F | 	byte	$fa, $08, $09, $09, $0f, $14, $14, $19, $16, $19, $24, $28, $2c, $2d, $34, $3f
0ea8a     49 4F 4C 48 
0ea8e     4C 45 39 32 
0ea92     2B 1F 1C 13 
0ea96     0A 0D 0A 0C | 	byte	$49, $4f, $4c, $48, $4c, $45, $39, $32, $2b, $1f, $1c, $13, $0a, $0d, $0a, $0c
0ea9a     10 13 14 16 
0ea9e     14 10 0C 0A 
0eaa2     09 04 00 F9 
0eaa6     F3 F1 ED EB | 	byte	$10, $13, $14, $16, $14, $10, $0c, $0a, $09, $04, $00, $f9, $f3, $f1, $ed, $eb
0eaaa     E8 E8 F1 F9 
0eaae     FC 07 12 15 
0eab2     18 19 13 0C 
0eab6     09 02 FC FD | 	byte	$e8, $e8, $f1, $f9, $fc, $07, $12, $15, $18, $19, $13, $0c, $09, $02, $fc, $fd
0eaba     FD F9 F9 F9 
0eabe     F7 FA 03 09 
0eac2     12 1B 27 31 
0eac6     38 3E 3F 3D | 	byte	$fd, $f9, $f9, $f9, $f7, $fa, $03, $09, $12, $1b, $27, $31, $38, $3e, $3f, $3d
0eaca     34 2B 1F 1A 
0eace     19 19 1C 22 
0ead2     2A 2E 38 3F 
0ead6     3E 3E 3A 37 | 	byte	$34, $2b, $1f, $1a, $19, $19, $1c, $22, $2a, $2e, $38, $3f, $3e, $3e, $3a, $37
0eada     31 2E 2B 28 
0eade     26 18 0D 04 
0eae2     F9 ED E2 DA 
0eae6     D3 D0 D2 D5 | 	byte	$31, $2e, $2b, $28, $26, $18, $0d, $04, $f9, $ed, $e2, $da, $d3, $d0, $d2, $d5
0eaea     DC DE DF E1 
0eaee     DC D9 D8 D0 
0eaf2     C8 C8 C2 BB 
0eaf6     B6 B7 BA C1 | 	byte	$dc, $de, $df, $e1, $dc, $d9, $d8, $d0, $c8, $c8, $c2, $bb, $b6, $b7, $ba, $c1
0eafa     C4 C6 CE D9 
0eafe     E2 EB F1 F8 
0eb02     FD 06 04 FF 
0eb06     06 0D 12 15 | 	byte	$c4, $c6, $ce, $d9, $e2, $eb, $f1, $f8, $fd, $06, $04, $ff, $06, $0d, $12, $15
0eb0a     13 15 1E 24 
0eb0e     2C 32 38 42 
0eb12     49 4C 4C 48 
0eb16     44 3E 36 2B | 	byte	$13, $15, $1e, $24, $2c, $32, $38, $42, $49, $4c, $4c, $48, $44, $3e, $36, $2b
0eb1a     21 1E 19 14 
0eb1e     16 1B 1A 1F 
0eb22     21 1C 1B 1E 
0eb26     1A 18 13 0E | 	byte	$21, $1e, $19, $14, $16, $1b, $1a, $1f, $21, $1c, $1b, $1e, $1a, $18, $13, $0e
0eb2a     0C 07 00 F8 
0eb2e     F4 F2 F1 ED 
0eb32     F0 F6 F9 FF 
0eb36     09 0F 18 1A | 	byte	$0c, $07, $00, $f8, $f4, $f2, $f1, $ed, $f0, $f6, $f9, $ff, $09, $0f, $18, $1a
0eb3a     15 0E 09 04 
0eb3e     00 FC F9 F7 
0eb42     F2 F7 F6 F8 
0eb46     FF 07 0E 15 | 	byte	$15, $0e, $09, $04, $00, $fc, $f9, $f7, $f2, $f7, $f6, $f8, $ff, $07, $0e, $15
0eb4a     1E 2A 37 3D 
0eb4e     3D 39 31 2D 
0eb52     26 19 19 16 
0eb56     19 1A 1F 27 | 	byte	$1e, $2a, $37, $3d, $3d, $39, $31, $2d, $26, $19, $19, $16, $19, $1a, $1f, $27
0eb5a     2E 33 37 2E 
0eb5e     30 34 32 31 
0eb62     31 26 21 1C 
0eb66     0E 04 FD F0 | 	byte	$2e, $33, $37, $2e, $30, $34, $32, $31, $31, $26, $21, $1c, $0e, $04, $fd, $f0
0eb6a     E2 DB D4 D3 
0eb6e     D4 D8 D8 DE 
0eb72     E2 E1 E0 E1 
0eb76     E1 DE DA D0 | 	byte	$e2, $db, $d4, $d3, $d4, $d8, $d8, $de, $e2, $e1, $e0, $e1, $e1, $de, $da, $d0
0eb7a     C6 C4 C2 C1 
0eb7e     C0 BE C3 C9 
0eb82     CF D5 D9 E7 
0eb86     F6 FA FA FE | 	byte	$c6, $c4, $c2, $c1, $c0, $be, $c3, $c9, $cf, $d5, $d9, $e7, $f6, $fa, $fa, $fe
0eb8a     03 09 08 0D 
0eb8e     0E 0F 15 18 
0eb92     1A 21 28 2C 
0eb96     33 3F 44 49 | 	byte	$03, $09, $08, $0d, $0e, $0f, $15, $18, $1a, $21, $28, $2c, $33, $3f, $44, $49
0eb9a     46 48 45 3F 
0eb9e     3A 32 26 1A 
0eba2     15 10 14 16 
0eba6     13 18 19 19 | 	byte	$46, $48, $45, $3f, $3a, $32, $26, $1a, $15, $10, $14, $16, $13, $18, $19, $19
0ebaa     1A 18 18 13 
0ebae     0D 09 03 00 
0ebb2     00 FA F2 EE 
0ebb6     EB E7 EA EB | 	byte	$1a, $18, $18, $13, $0d, $09, $03, $00, $00, $fa, $f2, $ee, $eb, $e7, $ea, $eb
0ebba     F1 FC 03 0E 
0ebbe     0D 12 14 13 
0ebc2     0C 0A 06 04 
0ebc6     00 F9 F4 F4 | 	byte	$f1, $fc, $03, $0e, $0d, $12, $14, $13, $0c, $0a, $06, $04, $00, $f9, $f4, $f4
0ebca     F8 F8 F9 FF 
0ebce     08 12 20 27 
0ebd2     2E 3A 3E 39 
0ebd6     32 30 2A 26 | 	byte	$f8, $f8, $f9, $ff, $08, $12, $20, $27, $2e, $3a, $3e, $39, $32, $30, $2a, $26
0ebda     20 1A 18 1A 
0ebde     24 28 2E 33 
0ebe2     36 39 3A 39 
0ebe6     38 3C 37 30 | 	byte	$20, $1a, $18, $1a, $24, $28, $2e, $33, $36, $39, $3a, $39, $38, $3c, $37, $30
0ebea     2C 28 1F 13 
0ebee     04 F7 EA E2 
0ebf2     DA D4 D3 D5 
0ebf6     D8 D8 D5 D9 | 	byte	$2c, $28, $1f, $13, $04, $f7, $ea, $e2, $da, $d4, $d3, $d5, $d8, $d8, $d5, $d9
0ebfa     DE DE DF D5 
0ebfe     CE CE C9 BD 
0ec02     BA B7 B7 B7 
0ec06     B8 BA C1 CA | 	byte	$de, $de, $df, $d5, $ce, $ce, $c9, $bd, $ba, $b7, $b7, $b7, $b8, $ba, $c1, $ca
0ec0a     D6 DE E6 EE 
0ec0e     F2 F8 FF 01 
0ec12     04 0A 0D 0E 
0ec16     14 14 18 1B | 	byte	$d6, $de, $e6, $ee, $f2, $f8, $ff, $01, $04, $0a, $0d, $0e, $14, $14, $18, $1b
0ec1a     21 2A 33 3D 
0ec1e     42 46 49 4C 
0ec22     4C 4A 40 34 
0ec26     2D 26 1C 19 | 	byte	$21, $2a, $33, $3d, $42, $46, $49, $4c, $4c, $4a, $40, $34, $2d, $26, $1c, $19
0ec2a     19 1A 1A 1A 
0ec2e     1B 1C 21 1F 
0ec32     1C 15 13 12 
0ec36     0F 0A 09 04 | 	byte	$19, $1a, $1a, $1a, $1b, $1c, $21, $1f, $1c, $15, $13, $12, $0f, $0a, $09, $04
0ec3a     01 F8 F4 EE 
0ec3e     EE F2 F4 FA 
0ec42     03 0E 10 14 
0ec46     18 15 13 0F | 	byte	$01, $f8, $f4, $ee, $ee, $f2, $f4, $fa, $03, $0e, $10, $14, $18, $15, $13, $0f
0ec4a     09 00 FD F9 
0ec4e     F3 F1 F2 F0 
0ec52     F1 F8 FA 03 
0ec56     12 20 28 30 | 	byte	$09, $00, $fd, $f9, $f3, $f1, $f2, $f0, $f1, $f8, $fa, $03, $12, $20, $28, $30
0ec5a     33 34 34 30 
0ec5e     27 21 1B 19 
0ec62     18 16 1B 21 
0ec66     25 2A 2E 34 | 	byte	$33, $34, $34, $30, $27, $21, $1b, $19, $18, $16, $1b, $21, $25, $2a, $2e, $34
0ec6a     38 3A 39 37 
0ec6e     38 37 30 2A 
0ec72     26 1C 10 01 
0ec76     F0 E6 E2 DC | 	byte	$38, $3a, $39, $37, $38, $37, $30, $2a, $26, $1c, $10, $01, $f0, $e6, $e2, $dc
0ec7a     D6 D3 D2 D5 
0ec7e     D9 DE DE DF 
0ec82     E1 DC D6 D2 
0ec86     CD C8 C7 C0 | 	byte	$d6, $d3, $d2, $d5, $d9, $de, $de, $df, $e1, $dc, $d6, $d2, $cd, $c8, $c7, $c0
0ec8a     BB BA BA BE 
0ec8e     C3 C9 D4 DE 
0ec92     E6 F1 F6 FA 
0ec96     FF 04 07 0A | 	byte	$bb, $ba, $ba, $be, $c3, $c9, $d4, $de, $e6, $f1, $f6, $fa, $ff, $04, $07, $0a
0ec9a     0E 13 13 15 
0ec9e     18 1C 21 2A 
0eca2     2B 31 3C 42 
0eca6     4A 4C 4E 4C | 	byte	$0e, $13, $13, $15, $18, $1c, $21, $2a, $2b, $31, $3c, $42, $4a, $4c, $4e, $4c
0ecaa     44 39 30 27 
0ecae     22 1F 19 14 
0ecb2     15 15 19 1A 
0ecb6     18 19 15 0F | 	byte	$44, $39, $30, $27, $22, $1f, $19, $14, $15, $15, $19, $1a, $18, $19, $15, $0f
0ecba     0C 0D 0C 0A 
0ecbe     07 00 F9 F3 
0ecc2     F2 EB E6 EB 
0ecc6     F0 F3 FA FF | 	byte	$0c, $0d, $0c, $0a, $07, $00, $f9, $f3, $f2, $eb, $e6, $eb, $f0, $f3, $fa, $ff
0ecca     08 12 14 14 
0ecce     15 13 0F 0A 
0ecd2     04 00 FD FA 
0ecd6     F9 F4 F3 F8 | 	byte	$08, $12, $14, $14, $15, $13, $0f, $0a, $04, $00, $fd, $fa, $f9, $f4, $f3, $f8
0ecda     FF 0A 14 1F 
0ecde     2A 33 38 3C 
0ece2     39 36 34 2B 
0ece6     22 22 1E 1C | 	byte	$ff, $0a, $14, $1f, $2a, $33, $38, $3c, $39, $36, $34, $2b, $22, $22, $1e, $1c
0ecea     1C 20 26 2A 
0ecee     2D 31 33 37 
0ecf2     3A 36 39 36 
0ecf6     38 39 30 26 | 	byte	$1c, $20, $26, $2a, $2d, $31, $33, $37, $3a, $36, $39, $36, $38, $39, $30, $26
0ecfa     13 04 F9 ED 
0ecfe     E0 DC DA D0 
0ed02     D2 D4 D4 DC 
0ed06     DE DF DF DA | 	byte	$13, $04, $f9, $ed, $e0, $dc, $da, $d0, $d2, $d4, $d4, $dc, $de, $df, $df, $da
0ed0a     D8 D9 D3 CC 
0ed0e     C7 C0 BD B8 
0ed12     B6 B8 BE C1 
0ed16     CE D4 DB E7 | 	byte	$d8, $d9, $d3, $cc, $c7, $c0, $bd, $b8, $b6, $b8, $be, $c1, $ce, $d4, $db, $e7
0ed1a     F1 F8 FA FF 
0ed1e     07 07 0A 0D 
0ed22     10 16 1A 1B 
0ed26     22 28 27 2E | 	byte	$f1, $f8, $fa, $ff, $07, $07, $0a, $0d, $10, $16, $1a, $1b, $22, $28, $27, $2e
0ed2a     36 3D 45 4B 
0ed2e     4C 49 45 3D 
0ed32     36 30 26 21 
0ed36     1A 19 16 18 | 	byte	$36, $3d, $45, $4b, $4c, $49, $45, $3d, $36, $30, $26, $21, $1a, $19, $16, $18
0ed3a     1A 18 18 13 
0ed3e     10 0F 0F 0C 
0ed42     0D 0A 07 03 
0ed46     00 F7 F1 ED | 	byte	$1a, $18, $18, $13, $10, $0f, $0f, $0c, $0d, $0a, $07, $03, $00, $f7, $f1, $ed
0ed4a     EC EC EC F3 
0ed4e     FA FF 09 0C 
0ed52     14 1A 19 18 
0ed56     15 0E 0E 0C | 	byte	$ec, $ec, $ec, $f3, $fa, $ff, $09, $0c, $14, $1a, $19, $18, $15, $0e, $0e, $0c
0ed5a     02 FE FA F8 
0ed5e     F8 F9 FF 07 
0ed62     0F 1A 20 2C 
0ed66     33 38 37 36 | 	byte	$02, $fe, $fa, $f8, $f8, $f9, $ff, $07, $0f, $1a, $20, $2c, $33, $38, $37, $36
0ed6a     31 2B 26 1E 
0ed6e     1A 18 19 1A 
0ed72     1B 1F 27 2B 
0ed76     2B 2C 2D 31 | 	byte	$31, $2b, $26, $1e, $1a, $18, $19, $1a, $1b, $1f, $27, $2b, $2b, $2c, $2d, $31
0ed7a     36 34 34 33 
0ed7e     2B 26 15 07 
0ed82     FC F2 E8 E0 
0ed86     D4 CF CF D4 | 	byte	$36, $34, $34, $33, $2b, $26, $15, $07, $fc, $f2, $e8, $e0, $d4, $cf, $cf, $d4
0ed8a     D8 D9 DB E0 
0ed8e     DE DC DE DA 
0ed92     D8 D4 CE C7 
0ed96     C2 BE BE BE | 	byte	$d8, $d9, $db, $e0, $de, $dc, $de, $da, $d8, $d4, $ce, $c7, $c2, $be, $be, $be
0ed9a     BE C3 CE D5 
0ed9e     DE E6 F0 F8 
0eda2     FD 01 07 0C 
0eda6     0E 10 14 19 | 	byte	$be, $c3, $ce, $d5, $de, $e6, $f0, $f8, $fd, $01, $07, $0c, $0e, $10, $14, $19
0edaa     1B 20 20 22 
0edae     27 2D 37 3E 
0edb2     46 4A 4E 4E 
0edb6     49 40 39 34 | 	byte	$1b, $20, $20, $22, $27, $2d, $37, $3e, $46, $4a, $4e, $4e, $49, $40, $39, $34
0edba     2B 26 1C 19 
0edbe     1A 1A 18 13 
0edc2     13 10 0E 0C 
0edc6     0A 0A 0A 09 | 	byte	$2b, $26, $1c, $19, $1a, $1a, $18, $13, $13, $10, $0e, $0c, $0a, $0a, $0a, $09
0edca     04 00 FA F7 
0edce     F0 E8 E4 E4 
0edd2     E6 EA EC F6 
0edd6     FF 06 0C 10 | 	byte	$04, $00, $fa, $f7, $f0, $e8, $e4, $e4, $e6, $ea, $ec, $f6, $ff, $06, $0c, $10
0edda     10 12 13 0E 
0edde     0C 07 02 01 
0ede2     FC FA F9 F8 
0ede6     FA FF 0D 16 | 	byte	$10, $12, $13, $0e, $0c, $07, $02, $01, $fc, $fa, $f9, $f8, $fa, $ff, $0d, $16
0edea     1B 25 2E 33 
0edee     3A 39 33 31 
0edf2     2D 27 21 1A 
0edf6     1A 1E 21 24 | 	byte	$1b, $25, $2e, $33, $3a, $39, $33, $31, $2d, $27, $21, $1a, $1a, $1e, $21, $24
0edfa     25 2A 2D 30 
0edfe     34 36 37 3D 
0ee02     3F 39 32 28 
0ee06     21 18 0C 00 | 	byte	$25, $2a, $2d, $30, $34, $36, $37, $3d, $3f, $39, $32, $28, $21, $18, $0c, $00
0ee0a     F0 E6 DE D5 
0ee0e     D4 D3 D3 D9 
0ee12     D9 D9 D9 DB 
0ee16     DC DA D5 D0 | 	byte	$f0, $e6, $de, $d5, $d4, $d3, $d3, $d9, $d9, $d9, $d9, $db, $dc, $da, $d5, $d0
0ee1a     CA C4 BD B8 
0ee1e     B6 B6 B6 BB 
0ee22     C1 CC D4 DB 
0ee26     E1 EB F2 FA | 	byte	$ca, $c4, $bd, $b8, $b6, $b6, $b6, $bb, $c1, $cc, $d4, $db, $e1, $eb, $f2, $fa
0ee2a     FD 02 06 0C 
0ee2e     10 12 15 18 
0ee32     19 1A 20 25 
0ee36     2E 3A 42 49 | 	byte	$fd, $02, $06, $0c, $10, $12, $15, $18, $19, $1a, $20, $25, $2e, $3a, $42, $49
0ee3a     4C 4E 50 4C 
0ee3e     40 36 32 2D 
0ee42     26 22 21 20 
0ee46     1F 1C 18 16 | 	byte	$4c, $4e, $50, $4c, $40, $36, $32, $2d, $26, $22, $21, $20, $1f, $1c, $18, $16
0ee4a     18 16 15 13 
0ee4e     10 0E 0E 09 
0ee52     02 FD FC F4 
0ee56     F0 ED EB EE | 	byte	$18, $16, $15, $13, $10, $0e, $0e, $09, $02, $fd, $fc, $f4, $f0, $ed, $eb, $ee
0ee5a     F6 FA FF 0A 
0ee5e     0F 15 18 1A 
0ee62     18 16 10 0C 
0ee66     09 03 00 F9 | 	byte	$f6, $fa, $ff, $0a, $0f, $15, $18, $1a, $18, $16, $10, $0c, $09, $03, $00, $f9
0ee6a     F8 FC FF 02 
0ee6e     07 0E 19 22 
0ee72     2A 31 33 37 
0ee76     36 33 2B 21 | 	byte	$f8, $fc, $ff, $02, $07, $0e, $19, $22, $2a, $31, $33, $37, $36, $33, $2b, $21
0ee7a     1C 19 18 14 
0ee7e     16 1B 21 24 
0ee82     22 25 28 31 
0ee86     36 39 34 33 | 	byte	$1c, $19, $18, $14, $16, $1b, $21, $24, $22, $25, $28, $31, $36, $39, $34, $33
0ee8a     31 2B 26 15 
0ee8e     09 01 F7 E8 
0ee92     DF D8 D8 D6 
0ee96     D8 D6 D9 D9 | 	byte	$31, $2b, $26, $15, $09, $01, $f7, $e8, $df, $d8, $d8, $d6, $d8, $d6, $d9, $d9
0ee9a     DE DF DF DF 
0ee9e     DB D8 D3 CC 
0eea2     C4 C0 BC B7 
0eea6     BB C0 C3 CC | 	byte	$de, $df, $df, $df, $db, $d8, $d3, $cc, $c4, $c0, $bc, $b7, $bb, $c0, $c3, $cc
0eeaa     D3 DB E2 EB 
0eeae     F1 F6 FA FF 
0eeb2     06 09 0C 12 
0eeb6     15 13 15 1B | 	byte	$d3, $db, $e2, $eb, $f1, $f6, $fa, $ff, $06, $09, $0c, $12, $15, $13, $15, $1b
0eeba     20 26 2A 30 
0eebe     3A 44 46 49 
0eec2     4C 48 40 39 
0eec6     30 28 26 24 | 	byte	$20, $26, $2a, $30, $3a, $44, $46, $49, $4c, $48, $40, $39, $30, $28, $26, $24
0eeca     1E 19 16 15 
0eece     14 14 10 0D 
0eed2     0E 0C 09 07 
0eed6     04 02 00 FA | 	byte	$1e, $19, $16, $15, $14, $14, $10, $0d, $0e, $0c, $09, $07, $04, $02, $00, $fa
0eeda     F4 EE EC E8 
0eede     E7 EB F1 F4 
0eee2     FA 03 0D 14 
0eee6     18 1A 19 19 | 	byte	$f4, $ee, $ec, $e8, $e7, $eb, $f1, $f4, $fa, $03, $0d, $14, $18, $1a, $19, $19
0eeea     19 15 0F 09 
0eeee     06 03 03 01 
0eef2     01 07 0D 16 
0eef6     1B 21 2A 33 | 	byte	$19, $15, $0f, $09, $06, $03, $03, $01, $01, $07, $0d, $16, $1b, $21, $2a, $33
0eefa     39 3C 3A 39 
0eefe     36 2D 26 1E 
0ef02     1B 1E 1F 1F 
0ef06     1A 1B 1F 26 | 	byte	$39, $3c, $3a, $39, $36, $2d, $26, $1e, $1b, $1e, $1f, $1f, $1a, $1b, $1f, $26
0ef0a     28 2C 31 34 
0ef0e     36 36 32 2E 
0ef12     2B 21 13 04 
0ef16     F8 ED E6 DF | 	byte	$28, $2c, $31, $34, $36, $36, $32, $2e, $2b, $21, $13, $04, $f8, $ed, $e6, $df
0ef1a     DB D6 D4 D5 
0ef1e     D5 D6 D9 DB 
0ef22     DA DB DB DA 
0ef26     D5 CE C7 BD | 	byte	$db, $d6, $d4, $d5, $d5, $d6, $d9, $db, $da, $db, $db, $da, $d5, $ce, $c7, $bd
0ef2a     B8 B6 B4 B5 
0ef2e     BC C3 C9 D2 
0ef32     D9 E2 EA EC 
0ef36     F1 F9 FF 03 | 	byte	$b8, $b6, $b4, $b5, $bc, $c3, $c9, $d2, $d9, $e2, $ea, $ec, $f1, $f9, $ff, $03
0ef3a     08 0D 10 12 
0ef3e     14 18 1A 1F 
0ef42     26 2D 38 42 
0ef46     49 4C 4F 49 | 	byte	$08, $0d, $10, $12, $14, $18, $1a, $1f, $26, $2d, $38, $42, $49, $4c, $4f, $49
0ef4a     44 3E 3A 34 
0ef4e     30 26 21 1F 
0ef52     19 18 16 18 
0ef56     18 15 12 10 | 	byte	$44, $3e, $3a, $34, $30, $26, $21, $1f, $19, $18, $16, $18, $18, $15, $12, $10
0ef5a     0C 0A 08 07 
0ef5e     02 FC F4 F1 
0ef62     ED EB E8 E5 
0ef66     E7 EC F6 FF | 	byte	$0c, $0a, $08, $07, $02, $fc, $f4, $f1, $ed, $eb, $e8, $e5, $e7, $ec, $f6, $ff
0ef6a     06 0D 10 1A 
0ef6e     1C 1C 16 16 
0ef72     13 0E 07 02 
0ef76     FF 01 02 03 | 	byte	$06, $0d, $10, $1a, $1c, $1c, $16, $16, $13, $0e, $07, $02, $ff, $01, $02, $03
0ef7a     06 0D 16 1E 
0ef7e     26 2D 33 39 
0ef82     3C 34 30 2A 
0ef86     28 26 26 21 | 	byte	$06, $0d, $16, $1e, $26, $2d, $33, $39, $3c, $34, $30, $2a, $28, $26, $26, $21
0ef8a     1E 19 19 18 
0ef8e     19 1E 25 2A 
0ef92     30 34 37 39 
0ef96     3A 37 31 28 | 	byte	$1e, $19, $19, $18, $19, $1e, $25, $2a, $30, $34, $37, $39, $3a, $37, $31, $28
0ef9a     1C 0E 04 F9 
0ef9e     F2 ED E6 DF 
0efa2     DB DA DB D9 
0efa6     DB DF E2 E5 | 	byte	$1c, $0e, $04, $f9, $f2, $ed, $e6, $df, $db, $da, $db, $d9, $db, $df, $e2, $e5
0efaa     E4 DF DC DA 
0efae     D0 C4 BE BA 
0efb2     B8 B5 BA BE 
0efb6     C6 CF D6 DE | 	byte	$e4, $df, $dc, $da, $d0, $c4, $be, $ba, $b8, $b5, $ba, $be, $c6, $cf, $d6, $de
0efba     E5 E7 EE F3 
0efbe     F9 FF 02 06 
0efc2     08 0A 0C 10 
0efc6     13 14 16 20 | 	byte	$e5, $e7, $ee, $f3, $f9, $ff, $02, $06, $08, $0a, $0c, $10, $13, $14, $16, $20
0efca     2C 36 3F 43 
0efce     44 46 43 3E 
0efd2     39 32 28 26 
0efd6     21 1A 18 16 | 	byte	$2c, $36, $3f, $43, $44, $46, $43, $3e, $39, $32, $28, $26, $21, $1a, $18, $16
0efda     16 18 13 0F 
0efde     0D 0F 0E 0E 
0efe2     0A 06 03 FF 
0efe6     FA F7 F1 EC | 	byte	$16, $18, $13, $0f, $0d, $0f, $0e, $0e, $0a, $06, $03, $ff, $fa, $f7, $f1, $ec
0efea     E8 EA EA EC 
0efee     F3 FA 03 0A 
0eff2     10 18 1C 20 
0eff6     20 1C 1A 13 | 	byte	$e8, $ea, $ea, $ec, $f3, $fa, $03, $0a, $10, $18, $1c, $20, $20, $1c, $1a, $13
0effa     0D 09 09 04 
0effe     04 07 09 0E 
0f002     14 1A 24 2D 
0f006     34 39 3A 39 | 	byte	$0d, $09, $09, $04, $04, $07, $09, $0e, $14, $1a, $24, $2d, $34, $39, $3a, $39
0f00a     34 31 30 28 
0f00e     26 24 1F 1A 
0f012     18 16 19 1B 
0f016     20 22 28 2C | 	byte	$34, $31, $30, $28, $26, $24, $1f, $1a, $18, $16, $19, $1b, $20, $22, $28, $2c
0f01a     33 36 38 38 
0f01e     32 27 21 15 
0f022     09 00 F4 ED 
0f026     E7 E1 DF DA | 	byte	$33, $36, $38, $38, $32, $27, $21, $15, $09, $00, $f4, $ed, $e7, $e1, $df, $da
0f02a     D9 DB DA DE 
0f02e     E2 E6 E7 E5 
0f032     E0 DF D5 CE 
0f036     C6 C1 BD BA | 	byte	$d9, $db, $da, $de, $e2, $e6, $e7, $e5, $e0, $df, $d5, $ce, $c6, $c1, $bd, $ba
0f03a     BE C2 C8 CE 
0f03e     D5 D9 E0 E6 
0f042     EE F6 FA FF 
0f046     04 08 0C 0E | 	byte	$be, $c2, $c8, $ce, $d5, $d9, $e0, $e6, $ee, $f6, $fa, $ff, $04, $08, $0c, $0e
0f04a     0F 0F 10 15 
0f04e     19 24 2C 32 
0f052     38 3F 44 44 
0f056     44 40 40 3A | 	byte	$0f, $0f, $10, $15, $19, $24, $2c, $32, $38, $3f, $44, $44, $44, $40, $40, $3a
0f05a     32 2B 24 1F 
0f05e     1C 19 16 15 
0f062     13 10 10 10 
0f066     0D 09 09 06 | 	byte	$32, $2b, $24, $1f, $1c, $19, $16, $15, $13, $10, $10, $10, $0d, $09, $09, $06
0f06a     04 00 FC F7 
0f06e     F0 E8 E4 E5 
0f072     E4 E6 ED F2 
0f076     FA FF 08 0F | 	byte	$04, $00, $fc, $f7, $f0, $e8, $e4, $e5, $e4, $e6, $ed, $f2, $fa, $ff, $08, $0f
0f07a     14 1A 19 18 
0f07e     19 13 0E 0C 
0f082     07 04 04 03 
0f086     03 03 0D 16 | 	byte	$14, $1a, $19, $18, $19, $13, $0e, $0c, $07, $04, $04, $03, $03, $03, $0d, $16
0f08a     20 27 2D 31 
0f08e     34 36 32 32 
0f092     30 30 28 26 
0f096     1F 1A 18 18 | 	byte	$20, $27, $2d, $31, $34, $36, $32, $32, $30, $30, $28, $26, $1f, $1a, $18, $18
0f09a     18 19 1B 1E 
0f09e     24 2A 31 36 
0f0a2     3A 3C 36 31 
0f0a6     28 1A 13 07 | 	byte	$18, $19, $1b, $1e, $24, $2a, $31, $36, $3a, $3c, $36, $31, $28, $1a, $13, $07
0f0aa     00 F4 ED E6 
0f0ae     E1 DE DC DC 
0f0b2     DF E0 E2 E6 
0f0b6     E7 E6 E5 E1 | 	byte	$00, $f4, $ed, $e6, $e1, $de, $dc, $dc, $df, $e0, $e2, $e6, $e7, $e6, $e5, $e1
0f0ba     DB D5 CD C7 
0f0be     C1 BE BC C1 
0f0c2     C6 C9 D0 D6 
0f0c6     DE E7 EE F3 | 	byte	$db, $d5, $cd, $c7, $c1, $be, $bc, $c1, $c6, $c9, $d0, $d6, $de, $e7, $ee, $f3
0f0ca     F6 FF 06 08 
0f0ce     09 09 0A 0C 
0f0d2     10 12 16 1E 
0f0d6     2A 31 36 3C | 	byte	$f6, $ff, $06, $08, $09, $09, $0a, $0c, $10, $12, $16, $1e, $2a, $31, $36, $3c
0f0da     3F 42 45 44 
0f0de     40 3C 39 30 
0f0e2     28 26 21 1B 
0f0e6     19 15 14 14 | 	byte	$3f, $42, $45, $44, $40, $3c, $39, $30, $28, $26, $21, $1b, $19, $15, $14, $14
0f0ea     13 13 10 0E 
0f0ee     0D 09 09 03 
0f0f2     00 FC F3 ED 
0f0f6     E8 E7 EB E8 | 	byte	$13, $13, $10, $0e, $0d, $09, $09, $03, $00, $fc, $f3, $ed, $e8, $e7, $eb, $e8
0f0fa     EB F1 F7 FE 
0f0fe     06 0C 12 16 
0f102     1A 1B 18 15 
0f106     10 10 0C 08 | 	byte	$eb, $f1, $f7, $fe, $06, $0c, $12, $16, $1a, $1b, $18, $15, $10, $10, $0c, $08
0f10a     03 03 03 03 
0f10e     08 10 1B 24 
0f112     28 2D 32 32 
0f116     32 33 31 30 | 	byte	$03, $03, $03, $03, $08, $10, $1b, $24, $28, $2d, $32, $32, $32, $33, $31, $30
0f11a     2B 26 21 1C 
0f11e     18 15 14 13 
0f122     14 19 1E 24 
0f126     2A 31 36 34 | 	byte	$2b, $26, $21, $1c, $18, $15, $14, $13, $14, $19, $1e, $24, $2a, $31, $36, $34
0f12a     30 2B 26 1A 
0f12e     13 06 00 F2 
0f132     E8 E1 DC D8 
0f136     D4 D3 D6 D8 | 	byte	$30, $2b, $26, $1a, $13, $06, $00, $f2, $e8, $e1, $dc, $d8, $d4, $d3, $d6, $d8
0f13a     DC E0 E1 E2 
0f13e     E0 DE DA D3 
0f142     CA C3 BE BC 
0f146     BB BC C0 C3 | 	byte	$dc, $e0, $e1, $e2, $e0, $de, $da, $d3, $ca, $c3, $be, $bc, $bb, $bc, $c0, $c3
0f14a     C9 CF D6 DA 
0f14e     E2 EC F3 FA 
0f152     FF 04 08 08 
0f156     08 0A 0C 0F | 	byte	$c9, $cf, $d6, $da, $e2, $ec, $f3, $fa, $ff, $04, $08, $08, $08, $0a, $0c, $0f
0f15a     15 1B 25 2A 
0f15e     31 37 3D 42 
0f162     46 45 43 3F 
0f166     3C 39 32 2C | 	byte	$15, $1b, $25, $2a, $31, $37, $3d, $42, $46, $45, $43, $3f, $3c, $39, $32, $2c
0f16a     26 20 1C 1C 
0f16e     18 18 19 18 
0f172     13 0F 10 10 
0f176     0E 09 04 00 | 	byte	$26, $20, $1c, $1c, $18, $18, $19, $18, $13, $0f, $10, $10, $0e, $09, $04, $00
0f17a     F9 F3 EE EA 
0f17e     E8 EA EB EE 
0f182     F3 FA 03 0C 
0f186     12 13 16 19 | 	byte	$f9, $f3, $ee, $ea, $e8, $ea, $eb, $ee, $f3, $fa, $03, $0c, $12, $13, $16, $19
0f18a     19 16 15 14 
0f18e     10 0C 04 03 
0f192     02 04 09 12 
0f196     18 20 26 2B | 	byte	$19, $16, $15, $14, $10, $0c, $04, $03, $02, $04, $09, $12, $18, $20, $26, $2b
0f19a     30 33 36 36 
0f19e     36 34 30 2D 
0f1a2     27 24 1F 1B 
0f1a6     18 18 15 18 | 	byte	$30, $33, $36, $36, $36, $34, $30, $2d, $27, $24, $1f, $1b, $18, $18, $15, $18
0f1aa     1F 25 2C 34 
0f1ae     38 39 39 34 
0f1b2     2E 26 1C 13 
0f1b6     09 00 F7 ED | 	byte	$1f, $25, $2c, $34, $38, $39, $39, $34, $2e, $26, $1c, $13, $09, $00, $f7, $ed
0f1ba     E5 DE DA D9 
0f1be     DA DB DE E1 
0f1c2     E5 E8 E7 E5 
0f1c6     DF DA D4 CD | 	byte	$e5, $de, $da, $d9, $da, $db, $de, $e1, $e5, $e8, $e7, $e5, $df, $da, $d4, $cd
0f1ca     C7 C2 BE BE 
0f1ce     C0 C2 C7 CD 
0f1d2     D2 D8 DE E8 
0f1d6     F0 F6 FD FF | 	byte	$c7, $c2, $be, $be, $c0, $c2, $c7, $cd, $d2, $d8, $de, $e8, $f0, $f6, $fd, $ff
0f1da     03 06 04 06 
0f1de     08 0D 10 15 
0f1e2     1A 21 2A 31 
0f1e6     37 3C 3E 3F | 	byte	$03, $06, $04, $06, $08, $0d, $10, $15, $1a, $21, $2a, $31, $37, $3c, $3e, $3f
0f1ea     3E 3C 39 36 
0f1ee     32 2B 26 20 
0f1f2     1C 1A 1A 16 
0f1f6     13 13 10 13 | 	byte	$3e, $3c, $39, $36, $32, $2b, $26, $20, $1c, $1a, $1a, $16, $13, $13, $10, $13
0f1fa     13 0F 0D 0C 
0f1fe     09 00 FC F7 
0f202     F2 F0 EC EA 
0f206     EB ED F1 F8 | 	byte	$13, $0f, $0d, $0c, $09, $00, $fc, $f7, $f2, $f0, $ec, $ea, $eb, $ed, $f1, $f8
0f20a     FF 09 0F 14 
0f20e     18 1A 1E 1B 
0f212     1B 1A 15 13 
0f216     0C 07 06 07 | 	byte	$ff, $09, $0f, $14, $18, $1a, $1e, $1b, $1b, $1a, $15, $13, $0c, $07, $06, $07
0f21a     0C 10 15 1B 
0f21e     22 2B 2D 32 
0f222     38 38 36 37 
0f226     31 2C 2A 26 | 	byte	$0c, $10, $15, $1b, $22, $2b, $2d, $32, $38, $38, $36, $37, $31, $2c, $2a, $26
0f22a     20 1A 15 13 
0f22e     10 13 19 20 
0f232     27 2D 31 32 
0f236     33 32 2D 26 | 	byte	$20, $1a, $15, $13, $10, $13, $19, $20, $27, $2d, $31, $32, $33, $32, $2d, $26
0f23a     21 18 0F 04 
0f23e     FC F0 E6 E1 
0f242     DB D6 D8 D9 
0f246     DE E2 E2 E5 | 	byte	$21, $18, $0f, $04, $fc, $f0, $e6, $e1, $db, $d6, $d8, $d9, $de, $e2, $e2, $e5
0f24a     E6 E4 DF DB 
0f24e     D5 CE CC C7 
0f252     C2 C0 C1 C1 
0f256     C3 C8 CE D4 | 	byte	$e6, $e4, $df, $db, $d5, $ce, $cc, $c7, $c2, $c0, $c1, $c1, $c3, $c8, $ce, $d4
0f25a     D9 E2 EC F3 
0f25e     F8 FC FE FF 
0f262     02 03 03 08 
0f266     0C 0F 14 1C | 	byte	$d9, $e2, $ec, $f3, $f8, $fc, $fe, $ff, $02, $03, $03, $08, $0c, $0f, $14, $1c
0f26a     22 2A 32 36 
0f26e     3A 3C 3E 3D 
0f272     3C 37 31 2B 
0f276     27 26 1E 1A | 	byte	$22, $2a, $32, $36, $3a, $3c, $3e, $3d, $3c, $37, $31, $2b, $27, $26, $1e, $1a
0f27a     16 14 14 13 
0f27e     0F 0F 12 13 
0f282     0D 09 07 02 
0f286     FC F9 F3 ED | 	byte	$16, $14, $14, $13, $0f, $0f, $12, $13, $0d, $09, $07, $02, $fc, $f9, $f3, $ed
0f28a     EA E7 E7 EC 
0f28e     F1 F6 FC 03 
0f292     0A 0D 13 16 
0f296     1B 1B 1E 19 | 	byte	$ea, $e7, $e7, $ec, $f1, $f6, $fc, $03, $0a, $0d, $13, $16, $1b, $1b, $1e, $19
0f29a     15 13 0C 0A 
0f29e     09 07 09 0E 
0f2a2     14 19 1F 26 
0f2a6     2C 31 36 39 | 	byte	$15, $13, $0c, $0a, $09, $07, $09, $0e, $14, $19, $1f, $26, $2c, $31, $36, $39
0f2aa     36 34 37 34 
0f2ae     30 2B 26 1E 
0f2b2     18 13 13 14 
0f2b6     18 1C 22 2C | 	byte	$36, $34, $37, $34, $30, $2b, $26, $1e, $18, $13, $13, $14, $18, $1c, $22, $2c
0f2ba     2E 31 33 31 
0f2be     30 2D 26 1E 
0f2c2     13 0C 02 F8 
0f2c6     ED E6 E0 DE | 	byte	$2e, $31, $33, $31, $30, $2d, $26, $1e, $13, $0c, $02, $f8, $ed, $e6, $e0, $de
0f2ca     DB DE E2 E5 
0f2ce     E7 E8 E7 E8 
0f2d2     E5 DF DA D5 
0f2d6     CF CD C9 C6 | 	byte	$db, $de, $e2, $e5, $e7, $e8, $e7, $e8, $e5, $df, $da, $d5, $cf, $cd, $c9, $c6
0f2da     C6 C8 C7 C8 
0f2de     CD D3 D9 E4 
0f2e2     EC F1 F8 FD 
0f2e6     FF 00 01 02 | 	byte	$c6, $c8, $c7, $c8, $cd, $d3, $d9, $e4, $ec, $f1, $f8, $fd, $ff, $00, $01, $02
0f2ea     03 08 0A 0E 
0f2ee     14 1B 24 27 
0f2f2     2C 32 36 3C 
0f2f6     3D 39 36 36 | 	byte	$03, $08, $0a, $0e, $14, $1b, $24, $27, $2c, $32, $36, $3c, $3d, $39, $36, $36
0f2fa     30 2B 26 20 
0f2fe     1F 1C 18 13 
0f302     12 0F 0F 0F 
0f306     0F 10 0D 09 | 	byte	$30, $2b, $26, $20, $1f, $1c, $18, $13, $12, $0f, $0f, $0f, $0f, $10, $0d, $09
0f30a     06 02 FE F8 
0f30e     F1 ED E8 E6 
0f312     E6 EA EE F3 
0f316     F9 FF 03 0C | 	byte	$06, $02, $fe, $f8, $f1, $ed, $e8, $e6, $e6, $ea, $ee, $f3, $f9, $ff, $03, $0c
0f31a     12 18 1A 1B 
0f31e     1E 1A 16 13 
0f322     0E 0D 0D 0D 
0f326     0F 13 15 18 | 	byte	$12, $18, $1a, $1b, $1e, $1a, $16, $13, $0e, $0d, $0d, $0d, $0f, $13, $15, $18
0f32a     20 26 2B 2E 
0f32e     34 36 36 37 
0f332     39 38 33 2D 
0f336     28 22 1B 14 | 	byte	$20, $26, $2b, $2e, $34, $36, $36, $37, $39, $38, $33, $2d, $28, $22, $1b, $14
0f33a     13 14 19 1E 
0f33e     21 25 2A 2E 
0f342     30 30 2D 28 
0f346     26 1F 15 0C | 	byte	$13, $14, $19, $1e, $21, $25, $2a, $2e, $30, $30, $2d, $28, $26, $1f, $15, $0c
0f34a     03 F9 F0 E6 
0f34e     DF DB D9 DA 
0f352     D9 DC E1 E5 
0f356     E5 E5 E1 DE | 	byte	$03, $f9, $f0, $e6, $df, $db, $d9, $da, $d9, $dc, $e1, $e5, $e5, $e5, $e1, $de
0f35a     DC D5 D3 CD 
0f35e     CA C9 C7 C3 
0f362     C4 C8 CE D3 
0f366     D9 E0 EA EE | 	byte	$dc, $d5, $d3, $cd, $ca, $c9, $c7, $c3, $c4, $c8, $ce, $d3, $d9, $e0, $ea, $ee
0f36a     F6 FA FF 03 
0f36e     03 06 06 04 
0f372     0C 12 14 18 
0f376     1F 24 2B 2E | 	byte	$f6, $fa, $ff, $03, $03, $06, $06, $04, $0c, $12, $14, $18, $1f, $24, $2b, $2e
0f37a     34 38 3C 3D 
0f37e     3A 39 33 2E 
0f382     2D 26 1F 1C 
0f386     19 14 13 13 | 	byte	$34, $38, $3c, $3d, $3a, $39, $33, $2e, $2d, $26, $1f, $1c, $19, $14, $13, $13
0f38a     13 13 0F 0D 
0f38e     0D 0A 07 01 
0f392     00 FA F4 F0 
0f396     E8 E5 E6 E7 | 	byte	$13, $13, $0f, $0d, $0d, $0a, $07, $01, $00, $fa, $f4, $f0, $e8, $e5, $e6, $e7
0f39a     E8 ED F3 F6 
0f39e     FD 01 0C 0F 
0f3a2     15 19 1A 19 
0f3a6     14 10 0F 0E | 	byte	$e8, $ed, $f3, $f6, $fd, $01, $0c, $0f, $15, $19, $1a, $19, $14, $10, $0f, $0e
0f3aa     0C 0A 0D 0D 
0f3ae     10 15 19 21 
0f3b2     28 2B 2D 32 
0f3b6     34 37 37 39 | 	byte	$0c, $0a, $0d, $0d, $10, $15, $19, $21, $28, $2b, $2d, $32, $34, $37, $37, $39
0f3ba     33 30 28 20 
0f3be     18 16 13 12 
0f3c2     00 00 0D 08 
0f3c6     0E 0F 0E 0E | 	byte	$33, $30, $28, $20, $18, $16, $13, $12, $00, $00, $0d, $08, $0e, $0f, $0e, $0e
0f3ca     16 18 1E 18 
0f3ce     1C 1A 1F 18 
0f3d2     12 19 14 13 
0f3d6     0E 07 06 0F | 	byte	$16, $18, $1e, $18, $1c, $1a, $1f, $18, $12, $19, $14, $13, $0e, $07, $06, $0f
0f3da     15 13 0D 14 
0f3de     1C 1E 1B 18 
0f3e2     18 1F 13 16 
0f3e6     09 06 F7 FA | 	byte	$15, $13, $0d, $14, $1c, $1e, $1b, $18, $18, $1f, $13, $16, $09, $06, $f7, $fa
0f3ea     F3 F2 EB F1 
0f3ee     EA F7 F2 F6 
0f3f2     F0 F7 F2 F7 
0f3f6     F1 EC E8 EE | 	byte	$f3, $f2, $eb, $f1, $ea, $f7, $f2, $f6, $f0, $f7, $f2, $f7, $f1, $ec, $e8, $ee
0f3fa     E8 D8 DC DF 
0f3fe     DF D3 DB E6 
0f402     E8 E4 DE EB 
0f406     FE FC FE F9 | 	byte	$e8, $d8, $dc, $df, $df, $d3, $db, $e6, $e8, $e4, $de, $eb, $fe, $fc, $fe, $f9
0f40a     F7 F7 F8 00 
0f40e     00 FE 07 01 
0f412     01 06 15 1C 
0f416     18 1B 1A 1E | 	byte	$f7, $f7, $f8, $00, $00, $fe, $07, $01, $01, $06, $15, $1c, $18, $1b, $1a, $1e
0f41a     1A 21 1E 1F 
0f41e     10 14 12 0E 
0f422     08 13 18 0C 
0f426     03 0D 0D 0C | 	byte	$1a, $21, $1e, $1f, $10, $14, $12, $0e, $08, $13, $18, $0c, $03, $0d, $0d, $0c
0f42a     09 08 0A 08 
0f42e     00 03 00 FA 
0f432     F4 FC FA F8 
0f436     FE FD F9 F2 | 	byte	$09, $08, $0a, $08, $00, $03, $00, $fa, $f4, $fc, $fa, $f8, $fe, $fd, $f9, $f2
0f43a     00 0C 0D 0D 
0f43e     0F 13 14 0E 
0f442     10 18 12 0E 
0f446     13 13 0E 13 | 	byte	$00, $0c, $0d, $0d, $0f, $13, $14, $0e, $10, $18, $12, $0e, $13, $13, $0e, $13
0f44a     19 15 0E 13 
0f44e     14 1A 14 1C 
0f452     20 22 21 26 
0f456     2B 25 18 10 | 	byte	$19, $15, $0e, $13, $14, $1a, $14, $1c, $20, $22, $21, $26, $2b, $25, $18, $10
0f45a     14 10 07 06 
0f45e     00 00 F3 1A 
0f462     F7 2A EB 2A 
0f466     13 54 09 46 | 	byte	$14, $10, $07, $06, $00, $00, $f3, $1a, $f7, $2a, $eb, $2a, $13, $54, $09, $46
0f46a     10 3E 30 2A 
0f46e     00 13 1A 0E 
0f472     F3 E6 DB FC 
0f476     00 EB CC DB | 	byte	$10, $3e, $30, $2a, $00, $13, $1a, $0e, $f3, $e6, $db, $fc, $00, $eb, $cc, $db
0f47a     CE D5 F7 D6 
0f47e     C7 C9 CE D5 
0f482     D6 C7 BB D8 
0f486     BC C2 D5 E6 | 	byte	$ce, $d5, $f7, $d6, $c7, $c9, $ce, $d5, $d6, $c7, $bb, $d8, $bc, $c2, $d5, $e6
0f48a     D0 D2 E4 D6 
0f48e     CC FC CC C7 
0f492     B5 D5 00 EB 
0f496     E8 FD 09 2A | 	byte	$d0, $d2, $e4, $d6, $cc, $fc, $cc, $c7, $b5, $d5, $00, $eb, $e8, $fd, $09, $2a
0f49a     1E 1E 2A 4A 
0f49e     3E 4A 37 48 
0f4a2     54 2A 21 37 
0f4a6     25 2A 22 38 | 	byte	$1e, $1e, $2a, $4a, $3e, $4a, $37, $48, $54, $2a, $21, $37, $25, $2a, $22, $38
0f4aa     2C 2A 0C 09 
0f4ae     25 1A FE 0E 
0f4b2     1A FC 00 09 
0f4b6     00 ED FC F2 | 	byte	$2c, $2a, $0c, $09, $25, $1a, $fe, $0e, $1a, $fc, $00, $09, $00, $ed, $fc, $f2
0f4ba     E1 EB EC DF 
0f4be     BD B0 00 EC 
0f4c2     EC E6 00 2A 
0f4c6     16 1F 1F 00 | 	byte	$e1, $eb, $ec, $df, $bd, $b0, $00, $ec, $ec, $e6, $00, $2a, $16, $1f, $1f, $00
0f4ca     10 2A 1F 0F 
0f4ce     13 2A F7 EB 
0f4d2     F7 EB 00 06 
0f4d6     09 13 09 04 | 	byte	$10, $2a, $1f, $0f, $13, $2a, $f7, $eb, $f7, $eb, $00, $06, $09, $13, $09, $04
0f4da     0E 13 09 F8 
0f4de     13 12 F7 F2 
0f4e2     F4 F7 EA FC 
0f4e6     FC D5 0E F8 | 	byte	$0e, $13, $09, $f8, $13, $12, $f7, $f2, $f4, $f7, $ea, $fc, $fc, $d5, $0e, $f8
0f4ea     E1 D8 CC 09 
0f4ee     EB EC FC 00 
0f4f2     25 1F 2A 00 
0f4f6     01 19 25 0C | 	byte	$e1, $d8, $cc, $09, $eb, $ec, $fc, $00, $25, $1f, $2a, $00, $01, $19, $25, $0c
0f4fa     F7 2A 18 F2 
0f4fe     F1 F7 FC 00 
0f502     09 06 0D 09 
0f506     F7 F7 09 E4 | 	byte	$f7, $2a, $18, $f2, $f1, $f7, $fc, $00, $09, $06, $0d, $09, $f7, $f7, $09, $e4
0f50a     DE F3 F2 E2 
0f50e     ED F1 EC F3 
0f512     00 EC F7 00 
0f516     F7 E0 D6 D5 | 	byte	$de, $f3, $f2, $e2, $ed, $f1, $ec, $f3, $00, $ec, $f7, $00, $f7, $e0, $d6, $d5
0f51a     EC E2 E0 E1 
0f51e     00 2A 2A 3F 
0f522     1F 1C 39 3F 
0f526     3F 24 3E 1A | 	byte	$ec, $e2, $e0, $e1, $00, $2a, $2a, $3f, $1f, $1c, $39, $3f, $3f, $24, $3e, $1a
0f52a     00 0E 01 00 
0f52e     FE 07 1A 0E 
0f532     00 F2 00 0E 
0f536     E4 EB 06 F2 | 	byte	$00, $0e, $01, $00, $fe, $07, $1a, $0e, $00, $f2, $00, $0e, $e4, $eb, $06, $f2
0f53a     E2 EE FF E7 
0f53e     D9 F6 C8 F0 
0f542     E4 C1 D5 B6 
0f546     D5 D2 CC E1 | 	byte	$e2, $ee, $ff, $e7, $d9, $f6, $c8, $f0, $e4, $c1, $d5, $b6, $d5, $d2, $cc, $e1
0f54a     EB 13 1A 46 
0f54e     40 2E 24 3F 
0f552     44 20 34 39 
0f556     1F 09 13 16 | 	byte	$eb, $13, $1a, $46, $40, $2e, $24, $3f, $44, $20, $34, $39, $1f, $09, $13, $16
0f55a     14 21 2A 34 
0f55e     39 32 2A 3E 
0f562     30 0D 19 2C 
0f566     18 1A 26 1F | 	byte	$14, $21, $2a, $34, $39, $32, $2a, $3e, $30, $0d, $19, $2c, $18, $1a, $26, $1f
0f56a     1A 10 1A 09 
0f56e     15 14 F8 00 
0f572     EB F7 00 F7 
0f576     EB ED 2C 19 | 	byte	$1a, $10, $1a, $09, $15, $14, $f8, $00, $eb, $f7, $00, $f7, $eb, $ed, $2c, $19
0f57a     2A 1F 09 0D 
0f57e     00 09 ED 09 
0f582     04 DB DA D6 
0f586     EC E0 E0 F2 | 	byte	$2a, $1f, $09, $0d, $00, $09, $ed, $09, $04, $db, $da, $d6, $ec, $e0, $e0, $f2
0f58a     00 FA DF C6 
0f58e     E8 D9 B0 C8 
0f592     DB D5 CF ED 
0f596     F7 E1 FC D6 | 	byte	$00, $fa, $df, $c6, $e8, $d9, $b0, $c8, $db, $d5, $cf, $ed, $f7, $e1, $fc, $d6
0f59a     F3 00 E1 E0 
0f59e     C6 D4 E0 D5 
0f5a2     D6 D6 00 1C 
0f5a6     2A 3C 3F 2A | 	byte	$f3, $00, $e1, $e0, $c6, $d4, $e0, $d5, $d6, $d6, $00, $1c, $2a, $3c, $3f, $2a
0f5aa     2D 3E 34 2A 
0f5ae     3E 34 07 12 
0f5b2     1E 13 14 1A 
0f5b6     1E 2A 28 14 | 	byte	$2d, $3e, $34, $2a, $3e, $34, $07, $12, $1e, $13, $14, $1a, $1e, $2a, $28, $14
0f5ba     00 18 00 EC 
0f5be     0E 08 00 09 
0f5c2     13 1A 00 09 
0f5c6     F3 03 14 DB | 	byte	$00, $18, $00, $ec, $0e, $08, $00, $09, $13, $1a, $00, $09, $f3, $03, $14, $db
0f5ca     EC DA E0 DE 
0f5ce     DB E8 CC 00 
0f5d2     1B 32 34 2A 
0f5d6     26 22 30 09 | 	byte	$ec, $da, $e0, $de, $db, $e8, $cc, $00, $1b, $32, $34, $2a, $26, $22, $30, $09
0f5da     06 2A 14 FC 
0f5de     F7 00 06 09 
0f5e2     0E 1C 2B 36 
0f5e6     0E 10 1F 04 | 	byte	$06, $2a, $14, $fc, $f7, $00, $06, $09, $0e, $1c, $2b, $36, $0e, $10, $1f, $04
0f5ea     FC 0D 0F FC 
0f5ee     0D 1E 09 13 
0f5f2     00 FD 13 14 
0f5f6     00 F8 EB 00 | 	byte	$fc, $0d, $0f, $fc, $0d, $1e, $09, $13, $00, $fd, $13, $14, $00, $f8, $eb, $00
0f5fa     04 F7 F2 EB 
0f5fe     1B 2A 2B 34 
0f602     1C 1A 19 14 
0f606     F7 FE 1A ED | 	byte	$04, $f7, $f2, $eb, $1b, $2a, $2b, $34, $1c, $1a, $19, $14, $f7, $fe, $1a, $ed
0f60a     D9 E8 F2 E6 
0f60e     EB F1 00 00 
0f612     00 E4 F1 ED 
0f616     C7 DC E0 E1 | 	byte	$d9, $e8, $f2, $e6, $eb, $f1, $00, $00, $00, $e4, $f1, $ed, $c7, $dc, $e0, $e1
0f61a     E0 E6 09 F7 
0f61e     04 EE E0 18 
0f622     F4 EB E1 EB 
0f626     F3 DE F3 D6 | 	byte	$e0, $e6, $09, $f7, $04, $ee, $e0, $18, $f4, $eb, $e1, $eb, $f3, $de, $f3, $d6
0f62a     EB 0E 2B 3E 
0f62e     3F 3C 32 43 
0f632     34 1A 2A 30 
0f636     14 08 0E 04 | 	byte	$eb, $0e, $2b, $3e, $3f, $3c, $32, $43, $34, $1a, $2a, $30, $14, $08, $0e, $04
0f63a     00 03 0E 08 
0f63e     19 09 FE 03 
0f642     00 E0 EB FE 
0f646     E6 EC 00 00 | 	byte	$00, $03, $0e, $08, $19, $09, $fe, $03, $00, $e0, $eb, $fe, $e6, $ec, $00, $00
0f64a     00 F2 E6 D5 
0f64e     F2 E1 E1 CC 
0f652     D0 E6 E0 F2 
0f656     CC F1 13 24 | 	byte	$00, $f2, $e6, $d5, $f2, $e1, $e1, $cc, $d0, $e6, $e0, $f2, $cc, $f1, $13, $24
0f65a     3E 34 30 2B 
0f65e     3C 2A 03 31 
0f662     30 0A 06 12 
0f666     0A 0E 0E 27 | 	byte	$3e, $34, $30, $2b, $3c, $2a, $03, $31, $30, $0a, $06, $12, $0a, $0e, $0e, $27
0f66a     2E 3E 2A 27 
0f66e     3C 14 13 13 
0f672     14 14 01 27 
0f676     0C 1A 21 F2 | 	byte	$2e, $3e, $2a, $27, $3c, $14, $13, $13, $14, $14, $01, $27, $0c, $1a, $21, $f2
0f67a     0E 14 09 F7 
0f67e     EC 00 04 0E 
0f682     00 ED 00 1C 
0f686     2A 30 30 14 | 	byte	$0e, $14, $09, $f7, $ec, $00, $04, $0e, $00, $ed, $00, $1c, $2a, $30, $30, $14
0f68a     19 18 00 FC 
0f68e     0E 00 EC E4 
0f692     E6 E0 E4 EB 
0f696     ED F7 00 EC | 	byte	$19, $18, $00, $fc, $0e, $00, $ec, $e4, $e6, $e0, $e4, $eb, $ed, $f7, $00, $ec
0f69a     E0 F2 CE C1 
0f69e     D5 D0 D6 D5 
0f6a2     EC EB EB EC 
0f6a6     D9 F7 E6 EC | 	byte	$e0, $f2, $ce, $c1, $d5, $d0, $d6, $d5, $ec, $eb, $eb, $ec, $d9, $f7, $e6, $ec
0f6aa     D9 D0 EB DE 
0f6ae     F9 DB DB 00 
0f6b2     0E 32 3C 3D 
0f6b6     2A 3C 4C 1F | 	byte	$d9, $d0, $eb, $de, $f9, $db, $db, $00, $0e, $32, $3c, $3d, $2a, $3c, $4c, $1f
0f6ba     2A 43 30 1A 
0f6be     13 0E 14 0E 
0f6c2     19 18 2A 21 
0f6c6     14 1E 14 04 | 	byte	$2a, $43, $30, $1a, $13, $0e, $14, $0e, $19, $18, $2a, $21, $14, $1e, $14, $04
0f6ca     FC 01 09 EE 
0f6ce     10 00 00 0E 
0f6d2     F2 E6 F2 F2 
0f6d6     E5 CE D5 E6 | 	byte	$fc, $01, $09, $ee, $10, $00, $00, $0e, $f2, $e6, $f2, $f2, $e5, $ce, $d5, $e6
0f6da     EB F2 DE E0 
0f6de     00 13 31 37 
0f6e2     2A 25 34 2A 
0f6e6     09 24 2C 1A | 	byte	$eb, $f2, $de, $e0, $00, $13, $31, $37, $2a, $25, $34, $2a, $09, $24, $2c, $1a
0f6ea     00 09 08 04 
0f6ee     09 1F 24 2D 
0f6f2     2C 13 30 21 
0f6f6     01 0E 0E 14 | 	byte	$00, $09, $08, $04, $09, $1f, $24, $2d, $2c, $13, $30, $21, $01, $0e, $0e, $14
0f6fa     00 09 14 09 
0f6fe     15 F2 06 03 
0f702     00 FC E1 00 
0f706     F2 09 00 E6 | 	byte	$00, $09, $14, $09, $15, $f2, $06, $03, $00, $fc, $e1, $00, $f2, $09, $00, $e6
0f70a     F7 00 19 21 
0f70e     30 1A 0A 22 
0f712     09 F3 09 09 
0f716     00 EB E8 EC | 	byte	$f7, $00, $19, $21, $30, $1a, $0a, $22, $09, $f3, $09, $09, $00, $eb, $e8, $ec
0f71a     EC F7 F6 00 
0f71e     01 00 F1 F2 
0f722     EC D2 D9 EB 
0f726     D6 E5 F7 E7 | 	byte	$ec, $f7, $f6, $00, $01, $00, $f1, $f2, $ec, $d2, $d9, $eb, $d6, $e5, $f7, $e7
0f72a     F7 00 E4 F1 
0f72e     F0 F0 EC D5 
0f732     EC EB FD EE 
0f736     D5 F7 00 21 | 	byte	$f7, $00, $e4, $f1, $f0, $f0, $ec, $d5, $ec, $eb, $fd, $ee, $d5, $f7, $00, $21
0f73a     34 34 30 34 
0f73e     48 2A 1E 38 
0f742     39 1A 14 18 
0f746     14 08 14 13 | 	byte	$34, $34, $30, $34, $48, $2a, $1e, $38, $39, $1a, $14, $18, $14, $08, $14, $13
0f74a     1B 2B 04 0F 
0f74e     18 00 00 F3 
0f752     0E FC FC 00 
0f756     F7 0E EC E4 | 	byte	$1b, $2b, $04, $0f, $18, $00, $00, $f3, $0e, $fc, $fc, $00, $f7, $0e, $ec, $e4
0f75a     EC E8 EB D6 
0f75e     D5 D9 E8 F7 
0f762     E1 DB EE 09 
0f766     19 2C 30 20 | 	byte	$ec, $e8, $eb, $d6, $d5, $d9, $e8, $f7, $e1, $db, $ee, $09, $19, $2c, $30, $20
0f76a     2A 34 0E 13 
0f76e     27 2A 0D 09 
0f772     0E 09 0E 12 
0f776     22 2A 30 22 | 	byte	$2a, $34, $0e, $13, $27, $2a, $0d, $09, $0e, $09, $0e, $12, $22, $2a, $30, $22
0f77a     26 30 0E 09 
0f77e     24 14 09 13 
0f782     18 09 1F 00 
0f786     01 06 00 09 | 	byte	$26, $30, $0e, $09, $24, $14, $09, $13, $18, $09, $1f, $00, $01, $06, $00, $09
0f78a     EC 00 FE 06 
0f78e     0D EC F7 F7 
0f792     0D 22 28 1F 
0f796     09 1E 14 ED | 	byte	$ec, $00, $fe, $06, $0d, $ec, $f7, $f7, $0d, $22, $28, $1f, $09, $1e, $14, $ed
0f79a     FA 0E 00 ED 
0f79e     E8 F7 E4 ED 
0f7a2     F3 F1 0A F3 
0f7a6     EC F7 EC E4 | 	byte	$fa, $0e, $00, $ed, $e8, $f7, $e4, $ed, $f3, $f1, $0a, $f3, $ec, $f7, $ec, $e4
0f7aa     CC E2 E1 DB 
0f7ae     EB E1 F7 00 
0f7b2     E2 E6 EC F1 
0f7b6     EC DE E0 E4 | 	byte	$cc, $e2, $e1, $db, $eb, $e1, $f7, $00, $e2, $e6, $ec, $f1, $ec, $de, $e0, $e4
0f7ba     F7 F7 DB E4 
0f7be     FC 0E 26 36 
0f7c2     2A 24 44 2A 
0f7c6     1B 2A 37 25 | 	byte	$f7, $f7, $db, $e4, $fc, $0e, $26, $36, $2a, $24, $44, $2a, $1b, $2a, $37, $25
0f7ca     14 13 14 0E 
0f7ce     04 14 13 26 
0f7d2     10 01 1F 09 
0f7d6     00 FE 0A FC | 	byte	$14, $13, $14, $0e, $04, $14, $13, $26, $10, $01, $1f, $09, $00, $fe, $0a, $fc
0f7da     F7 09 F8 12 
0f7de     00 E7 F3 E4 
0f7e2     FA DB D5 E1 
0f7e6     E4 00 EC E6 | 	byte	$f7, $09, $f8, $12, $00, $e7, $f3, $e4, $fa, $db, $d5, $e1, $e4, $00, $ec, $e6
0f7ea     EB FE 13 2A 
0f7ee     37 21 24 3F 
0f7f2     21 10 26 2A 
0f7f6     1A 09 1E 0C | 	byte	$eb, $fe, $13, $2a, $37, $21, $24, $3f, $21, $10, $26, $2a, $1a, $09, $1e, $0c
0f7fa     14 19 18 2A 
0f7fe     2A 2A 2A 2A 
0f802     25 09 13 18 
0f806     09 13 14 0C | 	byte	$14, $19, $18, $2a, $2a, $2a, $2a, $2a, $25, $09, $13, $18, $09, $13, $14, $0c
0f80a     1F 09 FE 04 
0f80e     00 09 F7 FA 
0f812     FC FE 14 FC 
0f816     F0 F7 00 13 | 	byte	$1f, $09, $fe, $04, $00, $09, $f7, $fa, $fc, $fe, $14, $fc, $f0, $f7, $00, $13
0f81a     1E 1F 09 13 
0f81e     1A 00 F4 09 
0f822     00 F7 EB F7 
0f826     F2 E6 F4 EB | 	byte	$1e, $1f, $09, $13, $1a, $00, $f4, $09, $00, $f7, $eb, $f7, $f2, $e6, $f4, $eb
0f82a     00 00 DB F7 
0f82e     ED DF CC DF 
0f832     E1 D2 EB E1 
0f836     F1 FF E6 EB | 	byte	$00, $00, $db, $f7, $ed, $df, $cc, $df, $e1, $d2, $eb, $e1, $f1, $ff, $e6, $eb
0f83a     DA F1 EC DE 
0f83e     E0 DB F7 F7 
0f842     E6 E4 EB 00 
0f846     13 2E 34 1E | 	byte	$da, $f1, $ec, $de, $e0, $db, $f7, $f7, $e6, $e4, $eb, $00, $13, $2e, $34, $1e
0f84a     3E 39 1F 1E 
0f84e     37 2B 14 22 
0f852     16 14 0E 0D 
0f856     19 1C 14 0E | 	byte	$3e, $39, $1f, $1e, $37, $2b, $14, $22, $16, $14, $0e, $0d, $19, $1c, $14, $0e
0f85a     13 13 00 FE 
0f85e     09 01 FC 09 
0f862     FD 09 0D ED 
0f866     F2 E0 F3 E6 | 	byte	$13, $13, $00, $fe, $09, $01, $fc, $09, $fd, $09, $0d, $ed, $f2, $e0, $f3, $e6
0f86a     D8 E6 DB FD 
0f86e     F9 E8 EA F1 
0f872     02 1C 34 2A 
0f876     24 3A 2A 14 | 	byte	$d8, $e6, $db, $fd, $f9, $e8, $ea, $f1, $02, $1c, $34, $2a, $24, $3a, $2a, $14
0f87a     24 25 21 0C 
0f87e     0F 15 09 1C 
0f882     0E 1B 3E 1F 
0f886     24 22 2A 0E | 	byte	$24, $25, $21, $0c, $0f, $15, $09, $1c, $0e, $1b, $3e, $1f, $24, $22, $2a, $0e
0f88a     0E 1F 09 13 
0f88e     14 0C 1E 14 
0f892     06 00 00 06 
0f896     00 F7 F2 00 | 	byte	$0e, $1f, $09, $13, $14, $0c, $1e, $14, $06, $00, $00, $06, $00, $f7, $f2, $00
0f89a     10 04 F4 F2 
0f89e     FC 00 10 25 
0f8a2     0D 10 1F 0E 
0f8a6     F3 07 09 F7 | 	byte	$10, $04, $f4, $f2, $fc, $00, $10, $25, $0d, $10, $1f, $0e, $f3, $07, $09, $f7
0f8aa     F7 F2 F9 EB 
0f8ae     EC F7 00 04 
0f8b2     ED F2 F7 EC 
0f8b6     D6 DE EE DA | 	byte	$f7, $f2, $f9, $eb, $ec, $f7, $00, $04, $ed, $f2, $f7, $ec, $d6, $de, $ee, $da
0f8ba     F0 EA E8 06 
0f8be     ED F3 E1 F2 
0f8c2     FA DF ED DE 
0f8c6     F1 FD EE E8 | 	byte	$f0, $ea, $e8, $06, $ed, $f3, $e1, $f2, $fa, $df, $ed, $de, $f1, $fd, $ee, $e8
0f8ca     E8 F3 03 24 
0f8ce     2C 1B 2E 3C 
0f8d2     2A 1E 26 34 
0f8d6     15 14 19 04 | 	byte	$e8, $f3, $03, $24, $2c, $1b, $2e, $3c, $2a, $1e, $26, $34, $15, $14, $19, $04
0f8da     14 0E 01 1C 
0f8de     14 06 03 0E 
0f8e2     04 F2 00 00 
0f8e6     FC 00 F9 00 | 	byte	$14, $0e, $01, $1c, $14, $06, $03, $0e, $04, $f2, $00, $00, $fc, $00, $f9, $00
0f8ea     04 F6 EC E0 
0f8ee     EA EC D5 D6 
0f8f2     D3 EB FC ED 
0f8f6     E1 EA FA 00 | 	byte	$04, $f6, $ec, $e0, $ea, $ec, $d5, $d6, $d3, $eb, $fc, $ed, $e1, $ea, $fa, $00
0f8fa     26 2A 1C 2E 
0f8fe     39 15 18 2A 
0f902     2A 19 0C 1F 
0f906     19 13 18 19 | 	byte	$26, $2a, $1c, $2e, $39, $15, $18, $2a, $2a, $19, $0c, $1f, $19, $13, $18, $19
0f90a     3C 2B 25 2A 
0f90e     30 2A 0E 2A 
0f912     14 1A 1C 0A 
0f916     24 14 18 00 | 	byte	$3c, $2b, $25, $2a, $30, $2a, $0e, $2a, $14, $1a, $1c, $0a, $24, $14, $18, $00
0f91a     00 13 00 00 
0f91e     FC FF 13 0D 
0f922     00 F8 FC FD 
0f926     0E 26 14 12 | 	byte	$00, $13, $00, $00, $fc, $ff, $13, $0d, $00, $f8, $fc, $fd, $0e, $26, $14, $12
0f92a     1E 14 00 FC 
0f92e     0F 00 F2 FC 
0f932     EB EE F3 E7 
0f936     F1 00 F2 E4 | 	byte	$1e, $14, $00, $fc, $0f, $00, $f2, $fc, $eb, $ee, $f3, $e7, $f1, $00, $f2, $e4
0f93a     EB ED D6 D0 
0f93e     E1 D9 E0 E1 
0f942     DB F8 ED EC 
0f946     DF E0 F2 DF | 	byte	$eb, $ed, $d6, $d0, $e1, $d9, $e0, $e1, $db, $f8, $ed, $ec, $df, $e0, $f2, $df
0f94a     E2 D8 DE F2 
0f94e     F3 E6 E0 ED 
0f952     F3 0E 2A 1C 
0f956     1E 3E 2C 1C | 	byte	$e2, $d8, $de, $f2, $f3, $e6, $e0, $ed, $f3, $0e, $2a, $1c, $1e, $3e, $2c, $1c
0f95a     24 30 2C 13 
0f95e     1A 1A 10 14 
0f962     01 1E 1E 14 
0f966     0D 16 1A 00 | 	byte	$24, $30, $2c, $13, $1a, $1a, $10, $14, $01, $1e, $1e, $14, $0d, $16, $1a, $00
0f96a     09 09 00 10 
0f96e     00 00 09 0D 
0f972     FC E6 F7 F2 
0f976     EB E2 DA EB | 	byte	$09, $09, $00, $10, $00, $00, $09, $0d, $fc, $e6, $f7, $f2, $eb, $e2, $da, $eb
0f97a     00 F8 EE ED 
0f97e     F7 FE 1E 25 
0f982     1F 2A 37 2A 
0f986     0D 2A 2A 14 | 	byte	$00, $f8, $ee, $ed, $f7, $fe, $1e, $25, $1f, $2a, $37, $2a, $0d, $2a, $2a, $14
0f98a     13 0F 10 0E 
0f98e     0E 0E 27 2C 
0f992     1F 1E 26 2A 
0f996     06 19 14 0E | 	byte	$13, $0f, $10, $0e, $0e, $0e, $27, $2c, $1f, $1e, $26, $2a, $06, $19, $14, $0e
0f99a     1A 01 18 13 
0f99e     0D 04 F3 09 
0f9a2     FE FD F7 F1 
0f9a6     00 0A 04 F2 | 	byte	$1a, $01, $18, $13, $0d, $04, $f3, $09, $fe, $fd, $f7, $f1, $00, $0a, $04, $f2
0f9aa     F7 F6 FC 1A 
0f9ae     1A 04 1C 1A 
0f9b2     09 FC 01 0E 
0f9b6     F7 F6 F7 EE | 	byte	$f7, $f6, $fc, $1a, $1a, $04, $1c, $1a, $09, $fc, $01, $0e, $f7, $f6, $f7, $ee
0f9ba     FC EC F7 00 
0f9be     01 F2 EE FE 
0f9c2     E1 DE EB E1 
0f9c6     EB EE EB F8 | 	byte	$fc, $ec, $f7, $00, $01, $f2, $ee, $fe, $e1, $de, $eb, $e1, $eb, $ee, $eb, $f8
0f9ca     FD 00 EC E8 
0f9ce     F8 F0 F2 E1 
0f9d2     E4 F7 FD F7 
0f9d6     E8 F1 EE 00 | 	byte	$fd, $00, $ec, $e8, $f8, $f0, $f2, $e1, $e4, $f7, $fd, $f7, $e8, $f1, $ee, $00
0f9da     24 21 1C 39 
0f9de     3E 1A 22 34 
0f9e2     2A 1A 14 18 
0f9e6     0C 14 01 10 | 	byte	$24, $21, $1c, $39, $3e, $1a, $22, $34, $2a, $1a, $14, $18, $0c, $14, $01, $10
0f9ea     19 14 08 03 
0f9ee     14 F9 FC 04 
0f9f2     F7 0E F3 FF 
0f9f6     01 00 FF DB | 	byte	$19, $14, $08, $03, $14, $f9, $fc, $04, $f7, $0e, $f3, $ff, $01, $00, $ff, $db
0f9fa     E6 EB E0 DB 
0f9fe     D0 D5 F0 F7 
0fa02     EC E2 F0 EB 
0fa06     06 21 14 2A | 	byte	$e6, $eb, $e0, $db, $d0, $d5, $f0, $f7, $ec, $e2, $f0, $eb, $06, $21, $14, $2a
0fa0a     2A 30 1A 13 
0fa0e     2B 1A 14 13 
0fa12     0D 13 14 13 
0fa16     22 30 2A 1F | 	byte	$2a, $30, $1a, $13, $2b, $1a, $14, $13, $0d, $13, $14, $13, $22, $30, $2a, $1f
0fa1a     2A 2C 18 1E 
0fa1e     25 13 2A 15 
0fa22     19 1F 1C 14 
0fa26     01 09 04 0A | 	byte	$2a, $2c, $18, $1e, $25, $13, $2a, $15, $19, $1f, $1c, $14, $01, $09, $04, $0a
0fa2a     01 F7 00 0E 
0fa2e     10 00 FC F7 
0fa32     FC 0E 25 08 
0fa36     14 2A 0D 00 | 	byte	$01, $f7, $00, $0e, $10, $00, $fc, $f7, $fc, $0e, $25, $08, $14, $2a, $0d, $00
0fa3a     00 09 00 F2 
0fa3e     FA ED F8 EC 
0fa42     ED FC F7 F7 
0fa46     E2 F4 E6 D3 | 	byte	$00, $09, $00, $f2, $fa, $ed, $f8, $ec, $ed, $fc, $f7, $f7, $e2, $f4, $e6, $d3
0fa4a     E0 D6 E8 E4 
0fa4e     E0 EB ED FD 
0fa52     EC DC EC E6 
0fa56     E8 DB D5 E4 | 	byte	$e0, $d6, $e8, $e4, $e0, $eb, $ed, $fd, $ec, $dc, $ec, $e6, $e8, $db, $d5, $e4
0fa5a     F3 F6 E1 E8 
0fa5e     E1 F7 13 14 
0fa62     1C 2A 34 2A 
0fa66     15 2A 2A 1F | 	byte	$f3, $f6, $e1, $e8, $e1, $f7, $13, $14, $1c, $2a, $34, $2a, $15, $2a, $2a, $1f
0fa6a     18 14 13 14 
0fa6e     09 09 1B 18 
0fa72     14 09 1A 09 
0fa76     FC 14 00 12 | 	byte	$18, $14, $13, $14, $09, $09, $1b, $18, $14, $09, $1a, $09, $fc, $14, $00, $12
0fa7a     06 01 0D 06 
0fa7e     09 F2 EB EE 
0fa82     ED F0 DC E0 
0fa86     F1 FE F7 F0 | 	byte	$06, $01, $0d, $06, $09, $f2, $eb, $ee, $ed, $f0, $dc, $e0, $f1, $fe, $f7, $f0
0fa8a     F3 F1 FA 27 
0fa8e     1E 18 34 32 
0fa92     25 13 27 27 
0fa96     14 18 0D 13 | 	byte	$f3, $f1, $fa, $27, $1e, $18, $34, $32, $25, $13, $27, $27, $14, $18, $0d, $13
0fa9a     12 0D 19 21 
0fa9e     2E 1A 24 2A 
0faa2     14 1E 14 13 
0faa6     1C 14 13 0E | 	byte	$12, $0d, $19, $21, $2e, $1a, $24, $2a, $14, $1e, $14, $13, $1c, $14, $13, $0e
0faaa     18 14 F9 00 
0faae     00 00 00 F2 
0fab2     F1 00 0D 00 
0fab6     FC EE EE 00 | 	byte	$18, $14, $f9, $00, $00, $00, $00, $f2, $f1, $00, $0d, $00, $fc, $ee, $ee, $00
0faba     0F 09 09 1C 
0fabe     1A 00 00 04 
0fac2     04 F4 F9 ED 
0fac6     F7 F3 E6 FA | 	byte	$0f, $09, $09, $1c, $1a, $00, $00, $04, $04, $f4, $f9, $ed, $f7, $f3, $e6, $fa
0faca     FC FC E8 F3 
0face     F9 D9 F0 E1 
0fad2     EB F3 E5 F6 
0fad6     F4 00 00 EB | 	byte	$fc, $fc, $e8, $f3, $f9, $d9, $f0, $e1, $eb, $f3, $e5, $f6, $f4, $00, $00, $eb
0fada     F1 ED F7 ED 
0fade     DE E8 F8 01 
0fae2     F1 F2 F6 E6 
0fae6     10 1E 15 24 | 	byte	$f1, $ed, $f7, $ed, $de, $e8, $f8, $01, $f1, $f2, $f6, $e6, $10, $1e, $15, $24
0faea     38 39 1C 24 
0faee     32 2A 1E 14 
0faf2     13 13 09 09 
0faf6     0E 18 09 06 | 	byte	$38, $39, $1c, $24, $32, $2a, $1e, $14, $13, $13, $09, $09, $0e, $18, $09, $06
0fafa     0E 09 FC 04 
0fafe     FD 00 04 FE 
0fb02     00 FE 07 EE 
0fb06     E5 E6 E0 E6 | 	byte	$0e, $09, $fc, $04, $fd, $00, $04, $fe, $00, $fe, $07, $ee, $e5, $e6, $e0, $e6
0fb0a     DB D3 DB F1 
0fb0e     F2 F2 EB E6 
0fb12     EB 09 1A 0E 
0fb16     24 37 2A 18 | 	byte	$db, $d3, $db, $f1, $f2, $f2, $eb, $e6, $eb, $09, $1a, $0e, $24, $37, $2a, $18
0fb1a     1E 2A 18 1C 
0fb1e     0E 13 1E 0D 
0fb22     19 20 32 24 
0fb26     22 39 1F 2A | 	byte	$1e, $2a, $18, $1c, $0e, $13, $1e, $0d, $19, $20, $32, $24, $22, $39, $1f, $2a
0fb2a     21 1C 2A 1F 
0fb2e     1C 1C 22 2A 
0fb32     0E 09 06 09 
0fb36     0E 00 FD 01 | 	byte	$21, $1c, $2a, $1f, $1c, $1c, $22, $2a, $0e, $09, $06, $09, $0e, $00, $fd, $01
0fb3a     1C 0E 04 07 
0fb3e     ED FE 13 14 
0fb42     0C 18 26 09 
0fb46     00 06 04 FE | 	byte	$1c, $0e, $04, $07, $ed, $fe, $13, $14, $0c, $18, $26, $09, $00, $06, $04, $fe
0fb4a     F9 F2 F3 F3 
0fb4e     E7 F0 F7 F7 
0fb52     EC EB F7 D9 
0fb56     E2 DE DB E8 | 	byte	$f9, $f2, $f3, $f3, $e7, $f0, $f7, $f7, $ec, $eb, $f7, $d9, $e2, $de, $db, $e8
0fb5a     DF EA E6 FC 
0fb5e     F7 E2 E5 E4 
0fb62     EA EC D6 D9 
0fb66     EB F2 F7 EB | 	byte	$df, $ea, $e6, $fc, $f7, $e2, $e5, $e4, $ea, $ec, $d6, $d9, $eb, $f2, $f7, $eb
0fb6a     EC E0 F7 19 
0fb6e     0D 15 2A 37 
0fb72     22 19 2D 21 
0fb76     22 16 0D 18 | 	byte	$ec, $e0, $f7, $19, $0d, $15, $2a, $37, $22, $19, $2d, $21, $22, $16, $0d, $18
0fb7a     0D 0C 08 1A 
0fb7e     18 04 13 0E 
0fb82     08 0D 01 0D 
0fb86     0E 08 09 03 | 	byte	$0d, $0c, $08, $1a, $18, $04, $13, $0e, $08, $0d, $01, $0d, $0e, $08, $09, $03
0fb8a     13 00 F4 F1 
0fb8e     EA F2 EC E4 
0fb92     D9 F7 FF F3 
0fb96     FF EC ED 00 | 	byte	$13, $00, $f4, $f1, $ea, $f2, $ec, $e4, $d9, $f7, $ff, $f3, $ff, $ec, $ed, $00
0fb9a     1A 18 19 34 
0fb9e     30 1F 19 2A 
0fba2     1E 18 14 0E 
0fba6     1A 09 0D 19 | 	byte	$1a, $18, $19, $34, $30, $1f, $19, $2a, $1e, $18, $14, $0e, $1a, $09, $0d, $19
0fbaa     24 25 13 32 
0fbae     1B 19 1F 13 
0fbb2     1E 18 18 0D 
0fbb6     10 1C 04 00 | 	byte	$24, $25, $13, $32, $1b, $19, $1f, $13, $1e, $18, $18, $0d, $10, $1c, $04, $00
0fbba     00 FF 09 FA 
0fbbe     F2 F7 01 09 
0fbc2     00 01 ED E8 
0fbc6     09 09 01 09 | 	byte	$00, $ff, $09, $fa, $f2, $f7, $01, $09, $00, $01, $ed, $e8, $09, $09, $01, $09
0fbca     1C 14 00 00 
0fbce     00 FF FC F0 
0fbd2     F3 F2 F0 E8 
0fbd6     F7 00 F2 EB | 	byte	$1c, $14, $00, $00, $00, $ff, $fc, $f0, $f3, $f2, $f0, $e8, $f7, $00, $f2, $eb
0fbda     FC E6 EB E4 
0fbde     E8 F3 EB F2 
0fbe2     F0 00 00 F2 
0fbe6     F2 F2 F7 F7 | 	byte	$fc, $e6, $eb, $e4, $e8, $f3, $eb, $f2, $f0, $00, $00, $f2, $f2, $f2, $f7, $f7
0fbea     F7 DE EB 00 
0fbee     00 00 F9 EC 
0fbf2     F7 13 1B 14 
0fbf6     2A 3D 34 1C | 	byte	$f7, $de, $eb, $00, $00, $00, $f9, $ec, $f7, $13, $1b, $14, $2a, $3d, $34, $1c
0fbfa     2C 27 22 20 
0fbfe     0D 1C 0D 04 
0fc02     04 0D 1C 00 
0fc06     0E 0E 00 04 | 	byte	$2c, $27, $22, $20, $0d, $1c, $0d, $04, $04, $0d, $1c, $00, $0e, $0e, $00, $04
0fc0a     FC 00 01 00 
0fc0e     00 F6 03 00 
0fc12     EC E8 DB EB 
0fc16     E0 DB D2 DB | 	byte	$fc, $00, $01, $00, $00, $f6, $03, $00, $ec, $e8, $db, $eb, $e0, $db, $d2, $db
0fc1a     F7 ED F8 F2 
0fc1e     DE F7 09 12 
0fc22     0C 2A 34 1F 
0fc26     19 21 1C 1A | 	byte	$f7, $ed, $f8, $f2, $de, $f7, $09, $12, $0c, $2a, $34, $1f, $19, $21, $1c, $1a
0fc2a     18 0E 14 15 
0fc2e     09 16 24 2A 
0fc32     1C 33 2A 26 
0fc36     26 1A 27 21 | 	byte	$18, $0e, $14, $15, $09, $16, $24, $2a, $1c, $33, $2a, $26, $26, $1a, $27, $21
0fc3a     21 1A 16 26 
0fc3e     18 09 09 09 
0fc42     04 10 00 F9 
0fc46     09 14 10 10 | 	byte	$21, $1a, $16, $26, $18, $09, $09, $09, $04, $10, $00, $f9, $09, $14, $10, $10
0fc4a     04 F0 00 13 
0fc4e     0A 09 1C 2A 
0fc52     04 03 04 00 
0fc56     04 F2 F7 F3 | 	byte	$04, $f0, $00, $13, $0a, $09, $1c, $2a, $04, $03, $04, $00, $04, $f2, $f7, $f3
0fc5a     EE E8 E6 00 
0fc5e     EC E6 FA E4 
0fc62     E6 DF DB E6 
0fc66     E4 ED E2 EB | 	byte	$ee, $e8, $e6, $00, $ec, $e6, $fa, $e4, $e6, $df, $db, $e6, $e4, $ed, $e2, $eb
0fc6a     F8 EE EB E1 
0fc6e     EC EB EC DE 
0fc72     D5 F4 F2 F6 
0fc76     FC EC E6 FC | 	byte	$f8, $ee, $eb, $e1, $ec, $eb, $ec, $de, $d5, $f4, $f2, $f6, $fc, $ec, $e6, $fc
0fc7a     10 06 19 31 
0fc7e     30 1C 22 2A 
0fc82     1E 25 10 14 
0fc86     15 07 04 09 | 	byte	$10, $06, $19, $31, $30, $1c, $22, $2a, $1e, $25, $10, $14, $15, $07, $04, $09
0fc8a     1F 07 09 14 
0fc8e     07 0F 00 06 
0fc92     0E 0D 0D FD 
0fc96     09 0E F8 F7 | 	byte	$1f, $07, $09, $14, $07, $0f, $00, $06, $0e, $0d, $0d, $fd, $09, $0e, $f8, $f7
0fc9a     F1 ED F7 EC 
0fc9e     E1 E0 F8 FD 
0fca2     FF 04 EC F3 
0fca6     09 18 13 1E | 	byte	$f1, $ed, $f7, $ec, $e1, $e0, $f8, $fd, $ff, $04, $ec, $f3, $09, $18, $13, $1e
0fcaa     3C 30 21 26 
0fcae     1F 24 1A 13 
0fcb2     10 14 0F 09 
0fcb6     1E 2A 14 2A | 	byte	$3c, $30, $21, $26, $1f, $24, $1a, $13, $10, $14, $0f, $09, $1e, $2a, $14, $2a
0fcba     2A 1E 21 14 
0fcbe     1E 1A 1C 14 
0fcc2     0D 13 14 0A 
0fcc6     00 00 00 06 | 	byte	$2a, $1e, $21, $14, $1e, $1a, $1c, $14, $0d, $13, $14, $0a, $00, $00, $00, $06
0fcca     00 EC FE 06 
0fcce     06 0E 04 ED 
0fcd2     F1 09 01 00 
0fcd6     0E 21 09 FF | 	byte	$00, $ec, $fe, $06, $06, $0e, $04, $ed, $f1, $09, $01, $00, $0e, $21, $09, $ff
0fcda     07 FD 06 F7 
0fcde     EE F7 ED EE 
0fce2     E4 FE F9 EB 
0fce6     F7 EC ED E6 | 	byte	$07, $fd, $06, $f7, $ee, $f7, $ed, $ee, $e4, $fe, $f9, $eb, $f7, $ec, $ed, $e6
0fcea     E0 EB EA F7 
0fcee     EB EB 00 F8 
0fcf2     F2 F1 EE F8 
0fcf6     F7 F2 E0 F1 | 	byte	$e0, $eb, $ea, $f7, $eb, $eb, $00, $f8, $f2, $f1, $ee, $f8, $f7, $f2, $e0, $f1
0fcfa     00 FD 07 F7 
0fcfe     ED F7 0E 0E 
0fd02     12 2A 37 2A 
0fd06     26 2A 24 2A | 	byte	$00, $fd, $07, $f7, $ed, $f7, $0e, $0e, $12, $2a, $37, $2a, $26, $2a, $24, $2a
0fd0a     1C 10 14 0F 
0fd0e     04 00 1A 09 
0fd12     03 0E 06 0E 
0fd16     00 FF 07 06 | 	byte	$1c, $10, $14, $0f, $04, $00, $1a, $09, $03, $0e, $06, $0e, $00, $ff, $07, $06
0fd1a     04 FC 00 04 
0fd1e     FD EC E8 E4 
0fd22     E8 ED D9 DA 
0fd26     E8 F1 F7 00 | 	byte	$04, $fc, $00, $04, $fd, $ec, $e8, $e4, $e8, $ed, $d9, $da, $e8, $f1, $f7, $00
0fd2a     EE E4 00 09 
0fd2e     0A 0E 2E 30 
0fd32     1A 22 18 22 
0fd36     1C 14 13 0E | 	byte	$ee, $e4, $00, $09, $0a, $0e, $2e, $30, $1a, $22, $18, $22, $1c, $14, $13, $0e
0fd3a     15 09 13 26 
0fd3e     1A 24 2A 24 
0fd42     2A 1A 1E 1C 
0fd46     26 21 09 1C | 	byte	$15, $09, $13, $26, $1a, $24, $2a, $24, $2a, $1a, $1e, $1c, $26, $21, $09, $1c
0fd4a     1A 14 08 00 
0fd4e     08 09 0E FC 
0fd52     FC 0C 0C 13 
0fd56     14 00 F7 07 | 	byte	$1a, $14, $08, $00, $08, $09, $0e, $fc, $fc, $0c, $0c, $13, $14, $00, $f7, $07
0fd5a     09 01 09 1C 
0fd5e     1A 04 09 03 
0fd62     04 04 F4 F8 
0fd66     F4 F7 DF F7 | 	byte	$09, $01, $09, $1c, $1a, $04, $09, $03, $04, $04, $f4, $f8, $f4, $f7, $df, $f7
0fd6a     00 EC F7 EC 
0fd6e     F2 EC DA E5 
0fd72     EA ED EC E0 
0fd76     F3 F8 EC EC | 	byte	$00, $ec, $f7, $ec, $f2, $ec, $da, $e5, $ea, $ed, $ec, $e0, $f3, $f8, $ec, $ec
0fd7a     E4 E8 F1 EC 
0fd7e     DB E0 F2 F1 
0fd82     00 FC E4 EB 
0fd86     00 0D 03 19 | 	byte	$e4, $e8, $f1, $ec, $db, $e0, $f2, $f1, $00, $fc, $e4, $eb, $00, $0d, $03, $19
0fd8a     31 2A 24 1F 
0fd8e     22 24 1A 18 
0fd92     12 10 09 FE 
0fd96     13 0D 03 0E | 	byte	$31, $2a, $24, $1f, $22, $24, $1a, $18, $12, $10, $09, $fe, $13, $0d, $03, $0e
0fd9a     08 0E 04 00 
0fd9e     01 08 13 00 
0fda2     00 03 04 F7 
0fda6     EC EB E8 F4 | 	byte	$08, $0e, $04, $00, $01, $08, $13, $00, $00, $03, $04, $f7, $ec, $eb, $e8, $f4
0fdaa     E6 DE E8 EC 
0fdae     F8 02 00 E6 
0fdb2     F7 09 0A 0C 
0fdb6     1E 37 1F 27 | 	byte	$e6, $de, $e8, $ec, $f8, $02, $00, $e6, $f7, $09, $0a, $0c, $1e, $37, $1f, $27
0fdba     22 1E 25 15 
0fdbe     19 14 1A 09 
0fdc2     09 25 1C 24 
0fdc6     25 24 2D 1A | 	byte	$22, $1e, $25, $15, $19, $14, $1a, $09, $09, $25, $1c, $24, $25, $24, $2d, $1a
0fdca     1B 1E 1E 2A 
0fdce     0E 12 1C 14 
0fdd2     09 00 FC 00 
0fdd6     07 FA F3 03 | 	byte	$1b, $1e, $1e, $2a, $0e, $12, $1c, $14, $09, $00, $fc, $00, $07, $fa, $f3, $03
0fdda     01 09 0E 04 
0fdde     F1 F7 09 00 
0fde2     FE 13 14 09 
0fde6     03 01 00 00 | 	byte	$01, $09, $0e, $04, $f1, $f7, $09, $00, $fe, $13, $14, $09, $03, $01, $00, $00
0fdea     F7 F8 F4 F9 
0fdee     E1 EB FD ED 
0fdf2     F7 F2 F1 F2 
0fdf6     EB E8 E8 F7 | 	byte	$f7, $f8, $f4, $f9, $e1, $eb, $fd, $ed, $f7, $f2, $f1, $f2, $eb, $e8, $e8, $f7
0fdfa     F2 EE F3 01 
0fdfe     FC F2 F1 EB 
0fe02     F7 F7 EC E6 
0fe06     F2 F4 FE 06 | 	byte	$f2, $ee, $f3, $01, $fc, $f2, $f1, $eb, $f7, $f7, $ec, $e6, $f2, $f4, $fe, $06
0fe0a     F2 EB FE 09 
0fe0e     04 09 34 2A 
0fe12     26 28 21 27 
0fe16     1F 19 14 13 | 	byte	$f2, $eb, $fe, $09, $04, $09, $34, $2a, $26, $28, $21, $27, $1f, $19, $14, $13
0fe1a     0E FA 09 09 
0fe1e     03 0D 00 0D 
0fe22     06 00 03 FF 
0fe26     10 01 FC 00 | 	byte	$0e, $fa, $09, $09, $03, $0d, $00, $0d, $06, $00, $03, $ff, $10, $01, $fc, $00
0fe2a     01 FC ED E7 
0fe2e     E2 F0 E8 D6 
0fe32     E4 E6 EB F7 
0fe36     00 EC E8 00 | 	byte	$01, $fc, $ed, $e7, $e2, $f0, $e8, $d6, $e4, $e6, $eb, $f7, $00, $ec, $e8, $00
0fe3a     04 01 13 2C 
0fe3e     27 20 1F 1E 
0fe42     26 18 18 13 
0fe46     1E 14 06 21 | 	byte	$04, $01, $13, $2c, $27, $20, $1f, $1e, $26, $18, $18, $13, $1e, $14, $06, $21
0fe4a     1C 22 2A 26 
0fe4e     2D 2A 25 25 
0fe52     26 2A 21 1A 
0fe56     22 21 14 0D | 	byte	$1c, $22, $2a, $26, $2d, $2a, $25, $25, $26, $2a, $21, $1a, $22, $21, $14, $0d
0fe5a     02 08 0E 09 
0fe5e     FC 04 06 07 
0fe62     18 0E 00 F8 
0fe66     07 06 F8 13 | 	byte	$02, $08, $0e, $09, $fc, $04, $06, $07, $18, $0e, $00, $f8, $07, $06, $f8, $13
0fe6a     19 0E 09 04 
0fe6e     06 04 FA F7 
0fe72     F4 FC E6 E6 
0fe76     F2 EC F3 E8 | 	byte	$19, $0e, $09, $04, $06, $04, $fa, $f7, $f4, $fc, $e6, $e6, $f2, $ec, $f3, $e8
0fe7a     ED ED E4 E8 
0fe7e     DE F0 ED E8 
0fe82     EB F8 F8 F0 
0fe86     EC E4 EB F7 | 	byte	$ed, $ed, $e4, $e8, $de, $f0, $ed, $e8, $eb, $f8, $f8, $f0, $ec, $e4, $eb, $f7
0fe8a     EC E4 EA ED 
0fe8e     F1 00 F9 E6 
0fe92     F3 00 04 00 
0fe96     24 2A 25 26 | 	byte	$ec, $e4, $ea, $ed, $f1, $00, $f9, $e6, $f3, $00, $04, $00, $24, $2a, $25, $26
0fe9a     21 2B 22 1F 
0fe9e     14 1B 1C 00 
0fea2     0C 10 06 10 
0fea6     09 0D 0E 08 | 	byte	$21, $2b, $22, $1f, $14, $1b, $1c, $00, $0c, $10, $06, $10, $09, $0d, $0e, $08
0feaa     09 06 0D 0E 
0feae     01 06 0A 04 
0feb2     FA F2 EA F1 
0feb6     F8 E1 E6 EB | 	byte	$09, $06, $0d, $0e, $01, $06, $0a, $04, $fa, $f2, $ea, $f1, $f8, $e1, $e6, $eb
0feba     E8 F7 00 F9 
0febe     E7 F7 09 00 
0fec2     09 24 2A 21 
0fec6     1F 1C 25 1C | 	byte	$e8, $f7, $00, $f9, $e7, $f7, $09, $00, $09, $24, $2a, $21, $1f, $1c, $25, $1c
0feca     15 0E 19 14 
0fece     04 13 14 1C 
0fed2     1F 20 26 1F 
0fed6     24 1A 1C 21 | 	byte	$15, $0e, $19, $14, $04, $13, $14, $1c, $1f, $20, $26, $1f, $24, $1a, $1c, $21
0feda     1A 13 18 1C 
0fede     14 0A 00 FF 
0fee2     09 09 F7 F8 
0fee6     00 FE 0E 0E | 	byte	$1a, $13, $18, $1c, $14, $0a, $00, $ff, $09, $09, $f7, $f8, $00, $fe, $0e, $0e
0feea     00 F8 FC 09 
0feee     F7 09 16 14 
0fef2     0C 01 04 04 
0fef6     01 F8 F1 00 | 	byte	$00, $f8, $fc, $09, $f7, $09, $16, $14, $0c, $01, $04, $04, $01, $f8, $f1, $00
0fefa     F2 E7 F7 ED 
0fefe     F6 F2 EE F7 
0ff02     ED F2 E6 EB 
0ff06     F7 EC F0 FC | 	byte	$f2, $e7, $f7, $ed, $f6, $f2, $ee, $f7, $ed, $f2, $e6, $eb, $f7, $ec, $f0, $fc
0ff0a     00 FC F7 EE 
0ff0e     ED FE F3 E8 
0ff12     F0 ED F4 FF 
0ff16     07 F2 ED 00 | 	byte	$00, $fc, $f7, $ee, $ed, $fe, $f3, $e8, $f0, $ed, $f4, $ff, $07, $f2, $ed, $00
0ff1a     04 00 13 2A 
0ff1e     25 27 1C 27 
0ff22     21 1F 14 0E 
0ff26     1A 04 00 06 | 	byte	$04, $00, $13, $2a, $25, $27, $1c, $27, $21, $1f, $14, $0e, $1a, $04, $00, $06
0ff2a     02 04 01 03 
0ff2e     00 03 00 FD 
0ff32     00 04 FD FC 
0ff36     06 01 FD F2 | 	byte	$02, $04, $01, $03, $00, $03, $00, $fd, $00, $04, $fd, $fc, $06, $01, $fd, $f2
0ff3a     E7 E6 F7 E8 
0ff3e     DC EB E4 F6 
0ff42     00 FC F2 F1 
0ff46     09 04 03 1E | 	byte	$e7, $e6, $f7, $e8, $dc, $eb, $e4, $f6, $00, $fc, $f2, $f1, $09, $04, $03, $1e
0ff4a     2B 2D 2A 27 
0ff4e     25 27 21 0D 
0ff52     1C 1F 09 13 
0ff56     18 1C 22 1E | 	byte	$2b, $2d, $2a, $27, $25, $27, $21, $0d, $1c, $1f, $09, $13, $18, $1c, $22, $1e
0ff5a     2A 21 2A 1F 
0ff5e     18 24 20 15 
0ff62     16 21 1F 15 
0ff66     0D 00 09 0D | 	byte	$2a, $21, $2a, $1f, $18, $24, $20, $15, $16, $21, $1f, $15, $0d, $00, $09, $0d
0ff6a     00 FD 00 00 
0ff6e     08 18 09 F9 
0ff72     00 0F 00 00 
0ff76     18 15 15 09 | 	byte	$00, $fd, $00, $00, $08, $18, $09, $f9, $00, $0f, $00, $00, $18, $15, $15, $09
0ff7a     09 06 03 00 
0ff7e     F1 FE F7 E8 
0ff82     F6 F0 F1 EE 
0ff86     EB EC EA E7 | 	byte	$09, $06, $03, $00, $f1, $fe, $f7, $e8, $f6, $f0, $f1, $ee, $eb, $ec, $ea, $e7
0ff8a     DE DB ED EC 
0ff8e     E1 EB F8 FC 
0ff92     F3 EE E0 F3 
0ff96     F8 E6 EB E2 | 	byte	$de, $db, $ed, $ec, $e1, $eb, $f8, $fc, $f3, $ee, $e0, $f3, $f8, $e6, $eb, $e2
0ff9a     E8 FC 00 F9 
0ff9e     E8 FC 07 F9 
0ffa2     00 21 24 25 
0ffa6     24 26 21 26 | 	byte	$e8, $fc, $00, $f9, $e8, $fc, $07, $f9, $00, $21, $24, $25, $24, $26, $21, $26
0ffaa     14 0E 1E 09 
0ffae     09 0C 06 0D 
0ffb2     04 0D 04 08 
0ffb6     07 00 00 09 | 	byte	$14, $0e, $1e, $09, $09, $0c, $06, $0d, $04, $0d, $04, $08, $07, $00, $00, $09
0ffba     04 F9 00 09 
0ffbe     06 FE EC EA 
0ffc2     F7 F7 E0 EC 
0ffc6     EA EA 00 02 | 	byte	$04, $f9, $00, $09, $06, $fe, $ec, $ea, $f7, $f7, $e0, $ec, $ea, $ea, $00, $02
0ffca     00 F0 09 0A 
0ffce     00 13 26 30 
0ffd2     2A 26 2A 24 
0ffd6     2A 14 13 1F | 	byte	$00, $f0, $09, $0a, $00, $13, $26, $30, $2a, $26, $2a, $24, $2a, $14, $13, $1f
0ffda     0A 12 18 13 
0ffde     1F 1A 21 1E 
0ffe2     21 21 0F 1A 
0ffe6     1E 14 0C 16 | 	byte	$0a, $12, $18, $13, $1f, $1a, $21, $1e, $21, $21, $0f, $1a, $1e, $14, $0c, $16
0ffea     1C 14 0E FC 
0ffee     FD 09 00 FE 
0fff2     F8 F7 FE 09 
0fff6     0E 00 F7 09 | 	byte	$1c, $14, $0e, $fc, $fd, $09, $00, $fe, $f8, $f7, $fe, $09, $0e, $00, $f7, $09
0fffa     01 F8 0D 10 
0fffe     0E 09 09 01 
10002     03 01 F0 00 
10006     00 F2 F7 F3 | 	byte	$01, $f8, $0d, $10, $0e, $09, $09, $01, $03, $01, $f0, $00, $00, $f2, $f7, $f3
1000a     FA F3 F3 F2 
1000e     F0 F2 EC E0 
10012     EB F3 E8 EB 
10016     F7 00 FD F7 | 	byte	$fa, $f3, $f3, $f2, $f0, $f2, $ec, $e0, $eb, $f3, $e8, $eb, $f7, $00, $fd, $f7
1001a     EA EB FF ED 
1001e     ED F2 E5 F3 
10022     00 07 F2 F7 
10026     0A 00 09 18 | 	byte	$ea, $eb, $ff, $ed, $ed, $f2, $e5, $f3, $00, $07, $f2, $f7, $0a, $00, $09, $18
1002a     26 28 20 2A 
1002e     20 26 1F 09 
10032     1E 0E 03 0A 
10036     06 0E 04 08 | 	byte	$26, $28, $20, $2a, $20, $26, $1f, $09, $1e, $0e, $03, $0a, $06, $0e, $04, $08
1003a     04 04 09 00 
1003e     FF 00 06 F9 
10042     FD 06 01 00 
10046     F0 E6 EB ED | 	byte	$04, $04, $09, $00, $ff, $00, $06, $f9, $fd, $06, $01, $00, $f0, $e6, $eb, $ed
1004a     E4 DF E1 DB 
1004e     EA FC 00 E8 
10052     F7 07 F7 06 
10056     19 24 25 21 | 	byte	$e4, $df, $e1, $db, $ea, $fc, $00, $e8, $f7, $07, $f7, $06, $19, $24, $25, $21
1005a     21 1C 26 14 
1005e     0E 1C 10 0E 
10062     15 1C 21 1C 
10066     26 25 24 2A | 	byte	$21, $1c, $26, $14, $0e, $1c, $10, $0e, $15, $1c, $21, $1c, $26, $25, $24, $2a
1006a     1C 1C 25 1F 
1006e     18 19 21 1F 
10072     1F 0E FF 12 
10076     09 00 03 00 | 	byte	$1c, $1c, $25, $1f, $18, $19, $21, $1f, $1f, $0e, $ff, $12, $09, $00, $03, $00
1007a     00 04 19 0D 
1007e     FD 09 09 00 
10082     03 0F 15 09 
10086     09 00 00 07 | 	byte	$00, $04, $19, $0d, $fd, $09, $09, $00, $03, $0f, $15, $09, $09, $00, $00, $07
1008a     EC F7 F9 E8 
1008e     F1 EC F7 F2 
10092     F0 F3 EC F0 
10096     EC E4 E4 F3 | 	byte	$ec, $f7, $f9, $e8, $f1, $ec, $f7, $f2, $f0, $f3, $ec, $f0, $ec, $e4, $e4, $f3
1009a     EA E6 F1 FC 
1009e     00 F8 EC EB 
100a2     F4 F2 E6 EE 
100a6     E2 EB F7 03 | 	byte	$ea, $e6, $f1, $fc, $00, $f8, $ec, $eb, $f4, $f2, $e6, $ee, $e2, $eb, $f7, $03
100aa     F7 F1 09 00 
100ae     FF 0E 1E 25 
100b2     21 21 1F 24 
100b6     25 0D 16 14 | 	byte	$f7, $f1, $09, $00, $ff, $0e, $1e, $25, $21, $21, $1f, $24, $25, $0d, $16, $14
100ba     04 09 08 0F 
100be     09 09 0E 06 
100c2     09 04 00 00 
100c6     08 00 FC 09 | 	byte	$04, $09, $08, $0f, $09, $09, $0e, $06, $09, $04, $00, $00, $08, $00, $fc, $09
100ca     08 09 01 EC 
100ce     F4 FA F2 EA 
100d2     E8 E7 E8 FC 
100d6     00 F7 F7 07 | 	byte	$08, $09, $01, $ec, $f4, $fa, $f2, $ea, $e8, $e7, $e8, $fc, $00, $f7, $f7, $07
100da     01 00 0E 22 
100de     20 1C 1F 14 
100e2     24 14 09 13 
100e6     09 0C 0A 13 | 	byte	$01, $00, $0e, $22, $20, $1c, $1f, $14, $24, $14, $09, $13, $09, $0c, $0a, $13
100ea     1B 19 24 22 
100ee     21 22 21 19 
100f2     21 1F 14 13 
100f6     18 21 1A 0E | 	byte	$1b, $19, $24, $22, $21, $22, $21, $19, $21, $1f, $14, $13, $18, $21, $1a, $0e
100fa     FE 07 0C 00 
100fe     00 FC FE 00 
10102     10 12 00 09 
10106     10 01 03 08 | 	byte	$fe, $07, $0c, $00, $00, $fc, $fe, $00, $10, $12, $00, $09, $10, $01, $03, $08
1010a     14 0E 0A 04 
1010e     FE 09 F9 F2 
10112     FC EE F3 EB 
10116     F8 F9 F3 F7 | 	byte	$14, $0e, $0a, $04, $fe, $09, $f9, $f2, $fc, $ee, $f3, $eb, $f8, $f9, $f3, $f7
1011a     F3 F3 F0 EC 
1011e     EA F3 F3 E4 
10122     F6 FC 00 01 
10126     F2 ED F3 F9 | 	byte	$f3, $f3, $f0, $ec, $ea, $f3, $f3, $e4, $f6, $fc, $00, $01, $f2, $ed, $f3, $f9
1012a     ED EC E8 EC 
1012e     F3 00 00 EB 
10132     00 04 FF 01 
10136     13 1C 1C 21 | 	byte	$ed, $ec, $e8, $ec, $f3, $00, $00, $eb, $00, $04, $ff, $01, $13, $1c, $1c, $21
1013a     14 19 1F 0E 
1013e     0D 09 06 01 
10142     02 04 04 04 
10146     08 03 04 04 | 	byte	$14, $19, $1f, $0e, $0d, $09, $06, $01, $02, $04, $04, $04, $08, $03, $04, $04
1014a     00 00 06 04 
1014e     FC FF 09 08 
10152     07 F2 ED F8 
10156     F2 ED E6 EA | 	byte	$00, $00, $06, $04, $fc, $ff, $09, $08, $07, $f2, $ed, $f8, $f2, $ed, $e6, $ea
1015a     E7 F7 06 F7 
1015e     F7 09 04 03 
10162     09 21 27 24 
10166     2B 1A 26 25 | 	byte	$e7, $f7, $06, $f7, $f7, $09, $04, $03, $09, $21, $27, $24, $2b, $1a, $26, $25
1016a     14 1C 0E 13 
1016e     0E 13 1C 1A 
10172     22 22 25 26 
10176     25 1C 1F 2A | 	byte	$14, $1c, $0e, $13, $0e, $13, $1c, $1a, $22, $22, $25, $26, $25, $1c, $1f, $2a
1017a     15 18 19 1C 
1017e     22 18 04 02 
10182     09 01 00 FC 
10186     FC FC 06 14 | 	byte	$15, $18, $19, $1c, $22, $18, $04, $02, $09, $01, $00, $fc, $fc, $fc, $06, $14
1018a     00 00 0D 00 
1018e     FD 00 0E 0D 
10192     0E 09 FF 06 
10196     00 F3 F9 ED | 	byte	$00, $00, $0d, $00, $fd, $00, $0e, $0d, $0e, $09, $ff, $06, $00, $f3, $f9, $ed
1019a     ED E8 ED F4 
1019e     F0 F3 EE F0 
101a2     F2 E6 E8 EB 
101a6     F2 E8 E8 F7 | 	byte	$ed, $e8, $ed, $f4, $f0, $f3, $ee, $f0, $f2, $e6, $e8, $eb, $f2, $e8, $e8, $f7
101aa     F8 04 F8 EC 
101ae     F3 F7 F2 ED 
101b2     F0 E8 EB 00 
101b6     04 F3 00 04 | 	byte	$f8, $04, $f8, $ec, $f3, $f7, $f2, $ed, $f0, $e8, $eb, $00, $04, $f3, $00, $04
101ba     02 00 0E 21 
101be     1C 2B 1F 1E 
101c2     2B 1B 19 14 
101c6     0E 0D 04 09 | 	byte	$02, $00, $0e, $21, $1c, $2b, $1f, $1e, $2b, $1b, $19, $14, $0e, $0d, $04, $09
101ca     0D 0E 0A 09 
101ce     09 10 03 00 
101d2     0D 04 FF FF 
101d6     04 09 09 00 | 	byte	$0d, $0e, $0a, $09, $09, $10, $03, $00, $0d, $04, $ff, $ff, $04, $09, $09, $00
101da     EB F7 EE EE 
101de     E7 E4 E4 E6 
101e2     FF FC EB FE 
101e6     00 FF 00 0E | 	byte	$eb, $f7, $ee, $ee, $e7, $e4, $e4, $e6, $ff, $fc, $eb, $fe, $00, $ff, $00, $0e
101ea     1C 1E 27 1A 
101ee     1E 25 12 15 
101f2     0E 0D 09 08 
101f6     13 15 1C 1C | 	byte	$1c, $1e, $27, $1a, $1e, $25, $12, $15, $0e, $0d, $09, $08, $13, $15, $1c, $1c
101fa     1F 26 1F 1F 
101fe     18 22 1B 0E 
10202     16 15 21 1F 
10206     09 03 0D 06 | 	byte	$1f, $26, $1f, $1f, $18, $22, $1b, $0e, $16, $15, $21, $1f, $09, $03, $0d, $06
1020a     00 00 FF F8 
1020e     00 16 09 00 
10212     09 0A 00 00 
10216     10 0E 13 14 | 	byte	$00, $00, $ff, $f8, $00, $16, $09, $00, $09, $0a, $00, $00, $10, $0e, $13, $14
1021a     06 0E 09 00 
1021e     FE F7 F4 F2 
10222     F1 F7 F8 FA 
10226     F9 F3 FC F4 | 	byte	$06, $0e, $09, $00, $fe, $f7, $f4, $f2, $f1, $f7, $f8, $fa, $f9, $f3, $fc, $f4
1022a     EC F1 F3 EE 
1022e     E8 F3 F8 01 
10232     01 EC F3 F3 
10236     F7 F2 EC EB | 	byte	$ec, $f1, $f3, $ee, $e8, $f3, $f8, $01, $01, $ec, $f3, $f3, $f7, $f2, $ec, $eb
1023a     E4 F4 02 EE 
1023e     F4 FF FF FC 
10242     FE 13 13 21 
10246     1C 15 25 18 | 	byte	$e4, $f4, $02, $ee, $f4, $ff, $ff, $fc, $fe, $13, $13, $21, $1c, $15, $25, $18
1024a     10 0A 06 04 
1024e     FC 00 01 08 
10252     04 04 06 07 
10256     04 FA 04 06 | 	byte	$10, $0a, $06, $04, $fc, $00, $01, $08, $04, $04, $06, $07, $04, $fa, $04, $06
1025a     FC FD 00 08 
1025e     0D 04 F1 F8 
10262     FA F2 F2 ED 
10266     E8 E4 FC 00 | 	byte	$fc, $fd, $00, $08, $0d, $04, $f1, $f8, $fa, $f2, $f2, $ed, $e8, $e4, $fc, $00
1026a     F1 F8 03 04 
1026e     00 09 1B 21 
10272     2B 25 24 2C 
10276     1F 1C 18 13 | 	byte	$f1, $f8, $03, $04, $00, $09, $1b, $21, $2b, $25, $24, $2c, $1f, $1c, $18, $13
1027a     14 0A 14 19 
1027e     1F 26 1E 27 
10282     2A 1F 1A 21 
10286     21 14 18 15 | 	byte	$14, $0a, $14, $19, $1f, $26, $1e, $27, $2a, $1f, $1a, $21, $21, $14, $18, $15
1028a     1C 22 14 08 
1028e     08 09 06 00 
10292     00 F7 F7 10 
10296     06 FF 03 06 | 	byte	$1c, $22, $14, $08, $08, $09, $06, $00, $00, $f7, $f7, $10, $06, $ff, $03, $06
1029a     01 F7 03 07 
1029e     0D 12 00 08 
102a2     04 FD F9 F2 
102a6     F1 EC EA EC | 	byte	$01, $f7, $03, $07, $0d, $12, $00, $08, $04, $fd, $f9, $f2, $f1, $ec, $ea, $ec
102aa     F3 F7 F7 F2 
102ae     F3 F7 E6 E6 
102b2     F0 EC EA ED 
102b6     F7 FC 09 F2 | 	byte	$f3, $f7, $f7, $f2, $f3, $f7, $e6, $e6, $f0, $ec, $ea, $ed, $f7, $fc, $09, $f2
102ba     F2 FA F7 F7 
102be     F1 F2 E6 EB 
102c2     03 00 F8 01 
102c6     08 01 00 13 | 	byte	$f2, $fa, $f7, $f7, $f1, $f2, $e6, $eb, $03, $00, $f8, $01, $08, $01, $00, $13
102ca     19 24 2A 1C 
102ce     2B 22 1C 1A 
102d2     14 10 04 07 
102d6     08 08 13 08 | 	byte	$19, $24, $2a, $1c, $2b, $22, $1c, $1a, $14, $10, $04, $07, $08, $08, $13, $08
102da     0A 0E 0D 00 
102de     FF 08 00 FF 
102e2     FF 01 09 09 
102e6     F7 F2 F4 F1 | 	byte	$0a, $0e, $0d, $00, $ff, $08, $00, $ff, $ff, $01, $09, $09, $f7, $f2, $f4, $f1
102ea     EC E8 E7 D6 
102ee     EB F7 EC F1 
102f2     FA 01 F8 00 
102f6     0E 13 26 1F | 	byte	$ec, $e8, $e7, $d6, $eb, $f7, $ec, $f1, $fa, $01, $f8, $00, $0e, $13, $26, $1f
102fa     1C 26 1F 1A 
102fe     18 12 0E 0C 
10302     09 13 19 21 
10306     1E 1F 2A 25 | 	byte	$1c, $26, $1f, $1a, $18, $12, $0e, $0c, $09, $13, $19, $21, $1e, $1f, $2a, $25
1030a     1A 1E 21 18 
1030e     15 19 15 26 
10312     1F 09 09 07 
10316     06 01 00 00 | 	byte	$1a, $1e, $21, $18, $15, $19, $15, $26, $1f, $09, $09, $07, $06, $01, $00, $00
1031a     ED 00 0D 00 
1031e     03 08 09 FE 
10322     02 09 0C 19 
10326     07 0A 0E 04 | 	byte	$ed, $00, $0d, $00, $03, $08, $09, $fe, $02, $09, $0c, $19, $07, $0a, $0e, $04
1032a     01 FC FE F2 
1032e     F2 F3 F0 FE 
10332     F8 F9 F7 FD 
10336     F2 E8 F1 F2 | 	byte	$01, $fc, $fe, $f2, $f2, $f3, $f0, $fe, $f8, $f9, $f7, $fd, $f2, $e8, $f1, $f2
1033a     F0 ED F7 FC 
1033e     07 00 F4 F7 
10342     F9 F2 F2 F3 
10346     EC E6 FC F9 | 	byte	$f0, $ed, $f7, $fc, $07, $00, $f4, $f7, $f9, $f2, $f2, $f3, $ec, $e6, $fc, $f9
1034a     F3 F7 00 00 
1034e     F8 06 0A 16 
10352     1F 16 21 21 
10356     1A 18 0E 0E | 	byte	$f3, $f7, $00, $00, $f8, $06, $0a, $16, $1f, $16, $21, $21, $1a, $18, $0e, $0e
1035a     08 00 01 00 
1035e     09 0C 04 09 
10362     09 01 FC 03 
10366     00 FD 00 FD | 	byte	$08, $00, $01, $00, $09, $0c, $04, $09, $09, $01, $fc, $03, $00, $fd, $00, $fd
1036a     03 0E 00 F4 
1036e     F3 F2 EE E7 
10372     EE DB E0 F8 
10376     F2 F3 F8 07 | 	byte	$03, $0e, $00, $f4, $f3, $f2, $ee, $e7, $ee, $db, $e0, $f8, $f2, $f3, $f8, $07
1037a     00 FF 0E 13 
1037e     2A 2A 21 2B 
10382     2A 25 1C 1E 
10386     18 14 13 10 | 	byte	$00, $ff, $0e, $13, $2a, $2a, $21, $2b, $2a, $25, $1c, $1e, $18, $14, $13, $10
1038a     19 21 27 20 
1038e     28 2B 21 1E 
10392     21 20 18 1B 
10396     18 22 2A 0E | 	byte	$19, $21, $27, $20, $28, $2b, $21, $1e, $21, $20, $18, $1b, $18, $22, $2a, $0e
1039a     09 09 03 00 
1039e     FE 00 F2 FC 
103a2     08 00 00 03 
103a6     07 FA FC 01 | 	byte	$09, $09, $03, $00, $fe, $00, $f2, $fc, $08, $00, $00, $03, $07, $fa, $fc, $01
103aa     03 13 09 04 
103ae     0C 01 04 FC 
103b2     FC F7 ED F2 
103b6     EA F3 F7 F7 | 	byte	$03, $13, $09, $04, $0c, $01, $04, $fc, $fc, $f7, $ed, $f2, $ea, $f3, $f7, $f7
103ba     F2 F4 F8 E8 
103be     F0 F0 EC F0 
103c2     ED F3 00 01 
103c6     F7 F2 F3 F3 | 	byte	$f2, $f4, $f8, $e8, $f0, $f0, $ec, $f0, $ed, $f3, $00, $01, $f7, $f2, $f3, $f3
103ca     EC F1 EC E2 
103ce     F7 FA F8 F3 
103d2     00 01 F8 00 
103d6     04 13 21 1C | 	byte	$ec, $f1, $ec, $e2, $f7, $fa, $f8, $f3, $00, $01, $f8, $00, $04, $13, $21, $1c
103da     1E 26 22 1A 
103de     19 14 0E 08 
103e2     04 03 06 10 
103e6     09 09 0E 0D | 	byte	$1e, $26, $22, $1a, $19, $14, $0e, $08, $04, $03, $06, $10, $09, $09, $0e, $0d
103ea     00 02 07 00 
103ee     00 00 01 10 
103f2     09 F9 F7 F4 
103f6     F2 EB F0 E2 | 	byte	$00, $02, $07, $00, $00, $00, $01, $10, $09, $f9, $f7, $f4, $f2, $eb, $f0, $e2
103fa     DB F3 F7 F2 
103fe     F3 00 00 F7 
10402     06 08 1C 21 
10406     1C 27 22 27 | 	byte	$db, $f3, $f7, $f2, $f3, $00, $00, $f7, $06, $08, $1c, $21, $1c, $27, $22, $27
1040a     1C 1C 19 0F 
1040e     13 0D 0E 18 
10412     20 1E 1E 2A 
10416     1F 1C 1E 1C | 	byte	$1c, $1c, $19, $0f, $13, $0d, $0e, $18, $20, $1e, $1e, $2a, $1f, $1c, $1e, $1c
1041a     16 15 14 19 
1041e     21 1A 09 06 
10422     09 00 00 00 
10426     F7 F7 06 07 | 	byte	$16, $15, $14, $19, $21, $1a, $09, $06, $09, $00, $00, $00, $f7, $f7, $06, $07
1042a     00 00 0D 00 
1042e     FE 00 00 15 
10432     14 08 0E 0C 
10436     09 03 00 00 | 	byte	$00, $00, $0d, $00, $fe, $00, $00, $15, $14, $08, $0e, $0c, $09, $03, $00, $00
1043a     F8 F7 F1 F2 
1043e     FC FA F8 F7 
10442     00 F3 EE F6 
10446     EE ED F0 EB | 	byte	$f8, $f7, $f1, $f2, $fc, $fa, $f8, $f7, $00, $f3, $ee, $f6, $ee, $ed, $f0, $eb
1044a     FE 03 FC F2 
1044e     F0 F3 E8 ED 
10452     EE DE EB F7 
10456     F8 F2 F8 01 | 	byte	$fe, $03, $fc, $f2, $f0, $f3, $e8, $ed, $ee, $de, $eb, $f7, $f8, $f2, $f8, $01
1045a     F7 FC FD 09 
1045e     19 18 1C 1A 
10462     21 1A 14 13 
10466     0A 09 00 00 | 	byte	$f7, $fc, $fd, $09, $19, $18, $1c, $1a, $21, $1a, $14, $13, $0a, $09, $00, $00
1046a     00 08 06 01 
1046e     09 06 00 00 
10472     04 FF FD FC 
10476     FC 03 09 FF | 	byte	$00, $08, $06, $01, $09, $06, $00, $00, $04, $ff, $fd, $fc, $fc, $03, $09, $ff
1047a     F4 F4 F2 EA 
1047e     F0 EC DB E8 
10482     F7 F4 F2 FE 
10486     04 FC 03 03 | 	byte	$f4, $f4, $f2, $ea, $f0, $ec, $db, $e8, $f7, $f4, $f2, $fe, $04, $fc, $03, $03
1048a     13 28 21 2A 
1048e     2B 2C 2A 21 
10492     25 1C 1C 15 
10496     10 19 22 27 | 	byte	$13, $28, $21, $2a, $2b, $2c, $2a, $21, $25, $1c, $1c, $15, $10, $19, $22, $27
1049a     24 2C 2B 1F 
1049e     26 25 1C 1C 
104a2     14 16 21 1B 
104a6     10 04 08 00 | 	byte	$24, $2c, $2b, $1f, $26, $25, $1c, $1c, $14, $16, $21, $1b, $10, $04, $08, $00
104aa     FA 03 F2 F1 
104ae     FC 03 FF F8 
104b2     08 00 FC FA 
104b6     FC 06 0A 09 | 	byte	$fa, $03, $f2, $f1, $fc, $03, $ff, $f8, $08, $00, $fc, $fa, $fc, $06, $0a, $09
104ba     07 0A 09 00 
104be     FF FA FA F3 
104c2     F0 E8 F4 F8 
104c6     F2 F7 F8 F7 | 	byte	$07, $0a, $09, $00, $ff, $fa, $fa, $f3, $f0, $e8, $f4, $f8, $f2, $f7, $f8, $f7
104ca     EB F2 F2 EB 
104ce     EE EC F7 00 
104d2     FD F7 F0 F3 
104d6     EC EB F3 E2 | 	byte	$eb, $f2, $f2, $eb, $ee, $ec, $f7, $00, $fd, $f7, $f0, $f3, $ec, $eb, $f3, $e2
104da     E4 F4 F9 F3 
104de     F7 04 FA FD 
104e2     00 01 1C 1B 
104e6     21 24 22 27 | 	byte	$e4, $f4, $f9, $f3, $f7, $04, $fa, $fd, $00, $01, $1c, $1b, $21, $24, $22, $27
104ea     1A 1E 14 14 
104ee     0A 04 03 09 
104f2     12 09 0C 10 
104f6     09 06 08 01 | 	byte	$1a, $1e, $14, $14, $0a, $04, $03, $09, $12, $09, $0c, $10, $09, $06, $08, $01
104fa     00 00 F9 00 
104fe     08 04 F7 F4 
10502     F6 E6 EB EC 
10506     DC DF ED F3 | 	byte	$00, $00, $f9, $00, $08, $04, $f7, $f4, $f6, $e6, $eb, $ec, $dc, $df, $ed, $f3
1050a     EC F7 00 F8 
1050e     FC FD 00 1A 
10512     1E 1E 27 27 
10516     2A 21 20 1C | 	byte	$ec, $f7, $00, $f8, $fc, $fd, $00, $1a, $1e, $1e, $27, $27, $2a, $21, $20, $1c
1051a     1A 18 0E 13 
1051e     1C 1F 1E 24 
10522     2A 1F 21 26 
10526     1C 1C 1A 10 | 	byte	$1a, $18, $0e, $13, $1c, $1f, $1e, $24, $2a, $1f, $21, $26, $1c, $1c, $1a, $10
1052a     1C 1E 1A 07 
1052e     07 04 FC 04 
10532     FC F0 FA 00 
10536     02 FA 09 01 | 	byte	$1c, $1e, $1a, $07, $07, $04, $fc, $04, $fc, $f0, $fa, $00, $02, $fa, $09, $01
1053a     00 00 F7 09 
1053e     0E 0F 0F 0F 
10542     15 0D 09 04 
10546     04 00 FC F4 | 	byte	$00, $00, $f7, $09, $0e, $0f, $0f, $0f, $15, $0d, $09, $04, $04, $00, $fc, $f4
1054a     F6 00 FC FC 
1054e     00 FD F3 FA 
10552     F7 F2 F7 F2 
10556     F3 00 03 FA | 	byte	$f6, $00, $fc, $fc, $00, $fd, $f3, $fa, $f7, $f2, $f7, $f2, $f3, $00, $03, $fa
1055a     F1 F7 EE EB 
1055e     F3 EC E2 EB 
10562     F7 F7 F1 FF 
10566     FC F8 F9 F7 | 	byte	$f1, $f7, $ee, $eb, $f3, $ec, $e2, $eb, $f7, $f7, $f1, $ff, $fc, $f8, $f9, $f7
1056a     09 13 14 1C 
1056e     1E 22 1B 1A 
10572     13 0E 0C 01 
10576     00 00 07 04 | 	byte	$09, $13, $14, $1c, $1e, $22, $1b, $1a, $13, $0e, $0c, $01, $00, $00, $07, $04
1057a     06 0D 09 00 
1057e     06 00 FE 00 
10582     F3 FE 03 06 
10586     FC F2 FA EC | 	byte	$06, $0d, $09, $00, $06, $00, $fe, $00, $f3, $fe, $03, $06, $fc, $f2, $fa, $ec
1058a     F0 F2 E6 E2 
1058e     EB F7 EE F7 
10592     00 FD 00 FC 
10596     00 13 1E 1E | 	byte	$f0, $f2, $e6, $e2, $eb, $f7, $ee, $f7, $00, $fd, $00, $fc, $00, $13, $1e, $1e
1059a     25 2D 30 2B 
1059e     25 26 20 1C 
105a2     18 10 1C 21 
105a6     1C 24 28 20 | 	byte	$25, $2d, $30, $2b, $25, $26, $20, $1c, $18, $10, $1c, $21, $1c, $24, $28, $20
105aa     20 25 1F 1C 
105ae     1A 0E 15 1C 
105b2     1B 0A 04 06 
105b6     FD 03 00 F7 | 	byte	$20, $25, $1f, $1c, $1a, $0e, $15, $1c, $1b, $0a, $04, $06, $fd, $03, $00, $f7
105ba     F7 FD 06 FA 
105be     03 06 FE 01 
105c2     F6 FD 09 09 
105c6     0E 0E 13 0E | 	byte	$f7, $fd, $06, $fa, $03, $06, $fe, $01, $f6, $fd, $09, $09, $0e, $0e, $13, $0e
105ca     0A 07 00 01 
105ce     FC F7 F1 FA 
105d2     FC F7 FD FF 
105d6     F3 F7 F9 F1 | 	byte	$0a, $07, $00, $01, $fc, $f7, $f1, $fa, $fc, $f7, $fd, $ff, $f3, $f7, $f9, $f1
105da     F7 EE ED F8 
105de     00 00 F2 F7 
105e2     F2 EB F7 F0 
105e6     E6 E6 F7 F7 | 	byte	$f7, $ee, $ed, $f8, $00, $00, $f2, $f7, $f2, $eb, $f7, $f0, $e6, $e6, $f7, $f7
105ea     F2 FE FC FC 
105ee     FC F8 00 0F 
105f2     15 1A 1E 24 
105f6     22 1C 1A 13 | 	byte	$f2, $fe, $fc, $fc, $fc, $f8, $00, $0f, $15, $1a, $1e, $24, $22, $1c, $1a, $13
105fa     0E 0D 00 00 
105fe     06 04 04 0C 
10602     0D 00 03 03 
10606     FD 00 F7 F6 | 	byte	$0e, $0d, $00, $00, $06, $04, $04, $0c, $0d, $00, $03, $03, $fd, $00, $f7, $f6
1060a     00 04 01 F3 
1060e     F8 EC EB F2 
10612     EC E4 E0 F6 
10616     F0 F1 00 F9 | 	byte	$00, $04, $01, $f3, $f8, $ec, $eb, $f2, $ec, $e4, $e0, $f6, $f0, $f1, $00, $f9
1061a     00 FC FC 09 
1061e     19 21 21 2A 
10622     2B 2C 2A 26 
10626     25 21 1B 10 | 	byte	$00, $fc, $fc, $09, $19, $21, $21, $2a, $2b, $2c, $2a, $26, $25, $21, $1b, $10
1062a     16 20 1C 1E 
1062e     28 25 1F 25 
10632     1F 1C 1C 10 
10636     10 18 1E 0E | 	byte	$16, $20, $1c, $1e, $28, $25, $1f, $25, $1f, $1c, $1c, $10, $10, $18, $1e, $0e
1063a     08 09 FD 00 
1063e     04 FC F7 F8 
10642     00 FD 00 04 
10646     FF 00 FC F4 | 	byte	$08, $09, $fd, $00, $04, $fc, $f7, $f8, $00, $fd, $00, $04, $ff, $00, $fc, $f4
1064a     00 08 0E 0D 
1064e     0F 10 09 09 
10652     01 00 FF F7 
10656     ED F3 F7 F2 | 	byte	$00, $08, $0e, $0d, $0f, $10, $09, $09, $01, $00, $ff, $f7, $ed, $f3, $f7, $f2
1065a     F7 FE F4 F1 
1065e     F7 ED F2 EE 
10662     E6 ED F8 00 
10666     F2 F3 F2 E8 | 	byte	$f7, $fe, $f4, $f1, $f7, $ed, $f2, $ee, $e6, $ed, $f8, $00, $f2, $f3, $f2, $e8
1066a     F1 F2 EC DF 
1066e     F0 F4 ED F8 
10672     F8 FC FE F7 
10676     F8 09 13 18 | 	byte	$f1, $f2, $ec, $df, $f0, $f4, $ed, $f8, $f8, $fc, $fe, $f7, $f8, $09, $13, $18
1067a     1E 21 25 21 
1067e     1E 19 14 12 
10682     06 00 06 09 
10686     04 0D 10 07 | 	byte	$1e, $21, $25, $21, $1e, $19, $14, $12, $06, $00, $06, $09, $04, $0d, $10, $07
1068a     08 09 00 02 
1068e     FD F7 FC 06 
10692     07 F9 FD F7 
10696     ED F7 F1 EC | 	byte	$08, $09, $00, $02, $fd, $f7, $fc, $06, $07, $f9, $fd, $f7, $ed, $f7, $f1, $ec
1069a     E4 F1 F2 EB 
1069e     FC F8 FE 00 
106a2     F7 00 0E 1C 
106a6     1E 25 2A 2A | 	byte	$e4, $f1, $f2, $eb, $fc, $f8, $fe, $00, $f7, $00, $0e, $1c, $1e, $25, $2a, $2a
106aa     28 26 21 20 
106ae     1B 14 10 1C 
106b2     1B 18 24 26 
106b6     1C 24 1F 1C | 	byte	$28, $26, $21, $20, $1b, $14, $10, $1c, $1b, $18, $24, $26, $1c, $24, $1f, $1c
106ba     1C 14 0E 0F 
106be     1C 14 09 0D 
106c2     00 FE 01 01 
106c6     F7 F6 00 00 | 	byte	$1c, $14, $0e, $0f, $1c, $14, $09, $0d, $00, $fe, $01, $01, $f7, $f6, $00, $00
106ca     FE 00 00 01 
106ce     00 F4 FF 08 
106d2     0D 0F 10 18 
106d6     10 0E 0D 04 | 	byte	$fe, $00, $00, $01, $00, $f4, $ff, $08, $0d, $0f, $10, $18, $10, $0e, $0d, $04
106da     02 00 F4 F6 
106de     FC F7 F7 00 
106e2     00 F7 FC F7 
106e6     F7 F9 EE ED | 	byte	$02, $00, $f4, $f6, $fc, $f7, $f7, $00, $00, $f7, $fc, $f7, $f7, $f9, $ee, $ed
106ea     F7 06 00 FA 
106ee     FD EE F6 F7 
106f2     F3 E7 E8 F8 
106f6     ED F7 F7 F7 | 	byte	$f7, $06, $00, $fa, $fd, $ee, $f6, $f7, $f3, $e7, $e8, $f8, $ed, $f7, $f7, $f7
106fa     FD F7 F7 FF 
106fe     0E 13 18 1E 
10702     21 1F 1C 18 
10706     13 0E 06 FE | 	byte	$fd, $f7, $f7, $ff, $0e, $13, $18, $1e, $21, $1f, $1c, $18, $13, $0e, $06, $fe
1070a     00 07 01 03 
1070e     0D 04 06 04 
10712     00 02 FD F3 
10716     F0 FC 04 FA | 	byte	$00, $07, $01, $03, $0d, $04, $06, $04, $00, $02, $fd, $f3, $f0, $fc, $04, $fa
1071a     F9 F7 EB EE 
1071e     F3 EE E4 EA 
10722     F0 ED F7 F7 
10726     F7 00 F8 FE | 	byte	$f9, $f7, $eb, $ee, $f3, $ee, $e4, $ea, $f0, $ed, $f7, $f7, $f7, $00, $f8, $fe
1072a     08 14 1E 21 
1072e     2E 30 2B 2A 
10732     25 24 22 1A 
10736     14 19 1F 1E | 	byte	$08, $14, $1e, $21, $2e, $30, $2b, $2a, $25, $24, $22, $1a, $14, $19, $1f, $1e
1073a     24 2E 21 27 
1073e     26 20 25 1A 
10742     14 0D 1C 1A 
10746     0E 13 04 00 | 	byte	$24, $2e, $21, $27, $26, $20, $25, $1a, $14, $0d, $1c, $1a, $0e, $13, $04, $00
1074a     01 06 00 F6 
1074e     00 00 FE 00 
10752     00 00 00 FA 
10756     F8 03 09 0D | 	byte	$01, $06, $00, $f6, $00, $00, $fe, $00, $00, $00, $00, $fa, $f8, $03, $09, $0d
1075a     12 16 14 0E 
1075e     0D 04 04 00 
10762     F7 EE F8 F7 
10766     F2 FC FC F7 | 	byte	$12, $16, $14, $0e, $0d, $04, $04, $00, $f7, $ee, $f8, $f7, $f2, $fc, $fc, $f7
1076a     F8 F2 F3 F3 
1076e     EC E6 E6 FC 
10772     FC F3 F9 EE 
10776     EC F0 F2 EC | 	byte	$f8, $f2, $f3, $f3, $ec, $e6, $e6, $fc, $fc, $f3, $f9, $ee, $ec, $f0, $f2, $ec
1077a     E4 F2 EC F0 
1077e     F8 F2 FE F7 
10782     F7 FC 06 13 
10786     13 1E 26 22 | 	byte	$e4, $f2, $ec, $f0, $f8, $f2, $fe, $f7, $f7, $fc, $06, $13, $13, $1e, $26, $22
1078a     20 1B 15 15 
1078e     0E 04 00 09 
10792     07 03 13 09 
10796     08 0A 04 06 | 	byte	$20, $1b, $15, $15, $0e, $04, $00, $09, $07, $03, $13, $09, $08, $0a, $04, $06
1079a     01 FE F2 F7 
1079e     03 00 FE FC 
107a2     F2 ED F3 F3 
107a6     E6 EB F0 ED | 	byte	$01, $fe, $f2, $f7, $03, $00, $fe, $fc, $f2, $ed, $f3, $f3, $e6, $eb, $f0, $ed
107aa     F2 F9 F7 00 
107ae     FE FA 03 0E 
107b2     1A 20 2A 30 
107b6     2E 2E 2A 25 | 	byte	$f2, $f9, $f7, $00, $fe, $fa, $03, $0e, $1a, $20, $2a, $30, $2e, $2e, $2a, $25
107ba     25 1F 14 EB 
107be     00 00 34 39 
107c2     33 37 4C 5D 
107c6     48 0C D0 AC | 	byte	$25, $1f, $14, $eb, $00, $00, $34, $39, $33, $37, $4c, $5d, $48, $0c, $d0, $ac
107ca     A5 CF 2E 57 
107ce     36 18 0F 00 
107d2     AC 87 CF 5E 
107d6     60 00 88 9F | 	byte	$a5, $cf, $2e, $57, $36, $18, $0f, $00, $ac, $87, $cf, $5e, $60, $00, $88, $9f
107da     FF 7F 60 DB 
107de     3C 0C 16 30 
107e2     A0 CF 30 E7 
107e6     5E 60 D8 D0 | 	byte	$ff, $7f, $60, $db, $3c, $0c, $16, $30, $a0, $cf, $30, $e7, $5e, $60, $d8, $d0
107ea     AB E7 D0 CF 
107ee     18 A0 9F BE 
107f2     B7 B8 B7 CF 
107f6     C4 E7 00 E7 | 	byte	$ab, $e7, $d0, $cf, $18, $a0, $9f, $be, $b7, $b8, $b7, $cf, $c4, $e7, $00, $e7
107fa     D0 FF 00 B7 
107fe     FF 30 0F 00 
10802     06 D0 CF F4 
10806     D0 B4 88 9F | 	byte	$d0, $ff, $00, $b7, $ff, $30, $0f, $00, $06, $d0, $cf, $f4, $d0, $b4, $88, $9f
1080a     AC 81 CF 00 
1080e     C7 A0 9F 06 
10812     A0 9F D0 87 
10816     A8 CA A0 FF | 	byte	$ac, $81, $cf, $00, $c7, $a0, $9f, $06, $a0, $9f, $d0, $87, $a8, $ca, $a0, $ff
1081a     18 FF E8 AC 
1081e     B7 FF 00 BD 
10822     DC CF F1 B8 
10826     FF 00 CF FF | 	byte	$18, $ff, $e8, $ac, $b7, $ff, $00, $bd, $dc, $cf, $f1, $b8, $ff, $00, $cf, $ff
1082a     18 EE D2 F3 
1082e     09 E8 EB B8 
10832     CF E8 FF 0A 
10836     3C 00 FF 30 | 	byte	$18, $ee, $d2, $f3, $09, $e8, $eb, $b8, $cf, $e8, $ff, $0a, $3c, $00, $ff, $30
1083a     10 28 34 5E 
1083e     48 2E 5E 7F 
10842     60 0A 52 30 
10846     5E 60 3A 36 | 	byte	$10, $28, $34, $5e, $48, $2e, $5e, $7f, $60, $0a, $52, $30, $5e, $60, $3a, $36
1084a     3C 2E 5E 6C 
1084e     30 46 3C 5E 
10852     60 72 30 22 
10856     52 78 3C 5E | 	byte	$3c, $2e, $5e, $6c, $30, $46, $3c, $5e, $60, $72, $30, $22, $52, $78, $3c, $5e
1085a     7F 60 46 55 
1085e     48 5E 60 7F 
10862     7F 7F 4F 7F 
10866     7F 5E 30 5E | 	byte	$7f, $60, $46, $55, $48, $5e, $60, $7f, $7f, $7f, $4f, $7f, $7f, $5e, $30, $5e
1086a     78 66 30 0A 
1086e     46 30 2E 7F 
10872     60 5E 60 5E 
10876     7F 7F 3C 5E | 	byte	$78, $66, $30, $0a, $46, $30, $2e, $7f, $60, $5e, $60, $5e, $7f, $7f, $3c, $5e
1087a     66 76 7F 7F 
1087e     6F 49 7B 30 
10882     46 60 42 46 
10886     48 52 6A 60 | 	byte	$66, $76, $7f, $7f, $6f, $49, $7b, $30, $46, $60, $42, $46, $48, $52, $6a, $60
1088a     46 46 69 48 
1088e     28 5E 3C 46 
10892     60 30 3A 3C 
10896     00 FF 2A 18 | 	byte	$46, $46, $69, $48, $28, $5e, $3c, $46, $60, $30, $3a, $3c, $00, $ff, $2a, $18
1089a     22 36 1E 37 
1089e     18 2E 18 10 
108a2     2E 48 2A 1E 
108a6     00 FF 2E 30 | 	byte	$22, $36, $1e, $37, $18, $2e, $18, $10, $2e, $48, $2a, $1e, $00, $ff, $2e, $30
108aa     00 EE A0 CF 
108ae     00 DF E7 DC 
108b2     B7 FF 0C EE 
108b6     EA DC E1 FF | 	byte	$00, $ee, $a0, $cf, $00, $df, $e7, $dc, $b7, $ff, $0c, $ee, $ea, $dc, $e1, $ff
108ba     0C FD 12 E8 
108be     FF 00 E8 BD 
108c2     E1 EE D0 AB 
108c6     B7 A0 AB 9C | 	byte	$0c, $fd, $12, $e8, $ff, $00, $e8, $bd, $e1, $ee, $d0, $ab, $b7, $a0, $ab, $9c
108ca     C3 C4 A0 B7 
108ce     E8 A0 9F B8 
108d2     BE A0 AC A0 
108d6     A9 88 9F AC | 	byte	$c3, $c4, $a0, $b7, $e8, $a0, $9f, $b8, $be, $a0, $ac, $a0, $a9, $88, $9f, $ac
108da     A0 87 C0 A3 
108de     C9 A0 9F B4 
108e2     AC 80 9F AC 
108e6     97 81 B2 88 | 	byte	$a0, $87, $c0, $a3, $c9, $a0, $9f, $b4, $ac, $80, $9f, $ac, $97, $81, $b2, $88
108ea     87 80 84 80 
108ee     84 80 80 9F 
108f2     80 80 80 80 
108f6     87 80 C7 80 | 	byte	$87, $80, $84, $80, $84, $80, $80, $9f, $80, $80, $80, $80, $87, $80, $c7, $80
108fa     93 80 99 A0 
108fe     80 80 80 80 
10902     93 80 80 80 
10906     80 81 80 80 | 	byte	$93, $80, $99, $a0, $80, $80, $80, $80, $93, $80, $80, $80, $80, $81, $80, $80
1090a     93 80 80 80 
1090e     9F 80 80 B8 
10912     80 80 A0 80 
10916     87 A0 80 81 | 	byte	$93, $80, $80, $80, $9f, $80, $80, $b8, $80, $80, $a0, $80, $87, $a0, $80, $81
1091a     80 8E 80 80 
1091e     9D 80 9F 88 
10922     88 80 99 80 
10926     90 9F 80 9D | 	byte	$80, $8e, $80, $80, $9d, $80, $9f, $88, $88, $80, $99, $80, $90, $9f, $80, $9d
1092a     81 9F 80 93 
1092e     94 82 93 A6 
10932     91 9F 91 97 
10936     9F D5 C4 C4 | 	byte	$81, $9f, $80, $93, $94, $82, $93, $a6, $91, $9f, $91, $97, $9f, $d5, $c4, $c4
1093a     BD CA 93 CF 
1093e     A0 B7 B1 AC 
10942     B1 D3 A0 CF 
10946     D0 CA CA C9 | 	byte	$bd, $ca, $93, $cf, $a0, $b7, $b1, $ac, $b1, $d3, $a0, $cf, $d0, $ca, $ca, $c9
1094a     F0 E4 DC C9 
1094e     E7 F4 D0 DB 
10952     FF 00 D2 F3 
10956     F4 FF FF 06 | 	byte	$f0, $e4, $dc, $c9, $e7, $f4, $d0, $db, $ff, $00, $d2, $f3, $f4, $ff, $ff, $06
1095a     0A 16 18 E4 
1095e     2E 18 2E 2E 
10962     18 F3 52 00 
10966     FF 25 00 F9 | 	byte	$0a, $16, $18, $e4, $2e, $18, $2e, $2e, $18, $f3, $52, $00, $ff, $25, $00, $f9
1096a     2E 1B 24 0A 
1096e     3C 28 76 30 
10972     3F 36 2A 46 
10976     48 48 46 48 | 	byte	$2e, $1b, $24, $0a, $3c, $28, $76, $30, $3f, $36, $2a, $46, $48, $48, $46, $48
1097a     24 2E 5E 60 
1097e     6A 7C 6C 48 
10982     40 46 5E 6C 
10986     48 58 7F 7F | 	byte	$24, $2e, $5e, $60, $6a, $7c, $6c, $48, $40, $46, $5e, $6c, $48, $58, $7f, $7f
1098a     48 76 6C 60 
1098e     5E 7F 60 7F 
10992     60 6A 7F 73 
10996     7F 78 78 60 | 	byte	$48, $76, $6c, $60, $5e, $7f, $60, $7f, $60, $6a, $7f, $73, $7f, $78, $78, $60
1099a     76 7F 7F 7F 
1099e     7C 7F 78 7F 
109a2     7F 7F 7F 7F 
109a6     70 7F 78 7F | 	byte	$76, $7f, $7f, $7f, $7c, $7f, $78, $7f, $7f, $7f, $7f, $7f, $70, $7f, $78, $7f
109aa     7F 7F 7F 7F 
109ae     7F 7F 7F 7F | 	byte	$7f[8]
109b2     76 7F 7E 7F 
109b6     7F 7F 7F 7F 
109ba     7F 7F 64 7F 
109be     7F 7F 7F 7F | 	byte	$76, $7f, $7e, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f
109c2     7F 7F 7F 7F 
109c6     7F 7F       | 	byte	$7f[6]
109c8     79 7F 66 64 
109cc     6D 73 7F 7F 
109d0     64 7F 60 6A 
109d4     7F 60 70 7F | 	byte	$79, $7f, $66, $64, $6d, $73, $7f, $7f, $64, $7f, $60, $6a, $7f, $60, $70, $7f
109d8     76 7F 7F 78 
109dc     58 78 60 75 
109e0     6C 46 66 48 
109e4     4F 64 58 66 | 	byte	$76, $7f, $7f, $78, $58, $78, $60, $75, $6c, $46, $66, $48, $4f, $64, $58, $66
109e8     45 51 5E 60 
109ec     3A 5E 4E 40 
109f0     5E 42 3F 3D 
109f4     40 4E 30 22 | 	byte	$45, $51, $5e, $60, $3a, $5e, $4e, $40, $5e, $42, $3f, $3d, $40, $4e, $30, $22
109f8     42 0C 28 28 
109fc     3C 30 1F 40 
10a00     48 43 42 22 
10a04     3F 18 22 30 | 	byte	$42, $0c, $28, $28, $3c, $30, $1f, $40, $48, $43, $42, $22, $3f, $18, $22, $30
10a08     0C 18 0C 04 
10a0c     24 DB 1E F3 
10a10     00 FF 0C E7 
10a14     12 FC 00 FF | 	byte	$0c, $18, $0c, $04, $24, $db, $1e, $f3, $00, $ff, $0c, $e7, $12, $fc, $00, $ff
10a18     00 F3 18 D0 
10a1c     EE F3 E8 DB 
10a20     E1 D8 E7 E2 
10a24     B8 C9 DC C3 | 	byte	$00, $f3, $18, $d0, $ee, $f3, $e8, $db, $e1, $d8, $e7, $e2, $b8, $c9, $dc, $c3
10a28     E8 BD D3 D5 
10a2c     CD DB DC C3 
10a30     CA B7 D0 C3 
10a34     BE 9F C7 AB | 	byte	$e8, $bd, $d3, $d5, $cd, $db, $dc, $c3, $ca, $b7, $d0, $c3, $be, $9f, $c7, $ab
10a38     C0 B8 88 9F 
10a3c     C1 A0 C3 D0 
10a40     88 9F B8 A0 
10a44     B2 AB A0 9F | 	byte	$c0, $b8, $88, $9f, $c1, $a0, $c3, $d0, $88, $9f, $b8, $a0, $b2, $ab, $a0, $9f
10a48     A0 80 82 80 
10a4c     93 A0 87 94 
10a50     80 87 94 80 
10a54     80 87 8D 97 | 	byte	$a0, $80, $82, $80, $93, $a0, $87, $94, $80, $87, $94, $80, $80, $87, $8d, $97
10a58     88 8D 9F 97 
10a5c     90 9C 94 80 
10a60     8B 87 80 87 
10a64     A0 80 91 87 | 	byte	$88, $8d, $9f, $97, $90, $9c, $94, $80, $8b, $87, $80, $87, $a0, $80, $91, $87
10a68     8E 9A 94 84 
10a6c     9F A6 80 88 
10a70     80 81 8D 80 
10a74     80 80 80 87 | 	byte	$8e, $9a, $94, $84, $9f, $a6, $80, $88, $80, $81, $8d, $80, $80, $80, $80, $87
10a78     82 80 8D 80 
10a7c     80 AC 80 9A 
10a80     9F 90 94 80 
10a84     87 88 80 87 | 	byte	$82, $80, $8d, $80, $80, $ac, $80, $9a, $9f, $90, $94, $80, $87, $88, $80, $87
10a88     9F 94 80 80 
10a8c     8E 80 80 80 
10a90     80 AC 8D 94 
10a94     80 80 93 94 | 	byte	$9f, $94, $80, $80, $8e, $80, $80, $80, $80, $ac, $8d, $94, $80, $80, $93, $94
10a98     9F A0 80 AC 
10a9c     87 8E 9F AC 
10aa0     94 9A 91 93 
10aa4     AC A0 93 BE | 	byte	$9f, $a0, $80, $ac, $87, $8e, $9f, $ac, $94, $9a, $91, $93, $ac, $a0, $93, $be
10aa8     A0 9C C3 AF 
10aac     A8 BB AF A3 
10ab0     AF AB B7 B8 
10ab4     AB B2 B7 C0 | 	byte	$a0, $9c, $c3, $af, $a8, $bb, $af, $a3, $af, $ab, $b7, $b8, $ab, $b2, $b7, $c0
10ab8     BE C3 D2 BE 
10abc     C3 D0 BD D9 
10ac0     DF BE C3 DC 
10ac4     CF D8 D6 CF | 	byte	$be, $c3, $d2, $be, $c3, $d0, $bd, $d9, $df, $be, $c3, $dc, $cf, $d8, $d6, $cf
10ac8     EE DF D9 E4 
10acc     E4 DE F3 EE 
10ad0     E7 00 FF 0C 
10ad4     F3 18 F3 09 | 	byte	$ee, $df, $d9, $e4, $e4, $de, $f3, $ee, $e7, $00, $ff, $0c, $f3, $18, $f3, $09
10ad8     06 07 06 FF 
10adc     18 0C FF 1C 
10ae0     15 1B 27 1F 
10ae4     1E 28 2B 18 | 	byte	$06, $07, $06, $ff, $18, $0c, $ff, $1c, $15, $1b, $27, $1f, $1e, $28, $2b, $18
10ae8     2E 48 13 2A 
10aec     2E 3C 30 3A 
10af0     48 3D 3F 40 
10af4     48 4F 3C 46 | 	byte	$2e, $48, $13, $2a, $2e, $3c, $30, $3a, $48, $3d, $3f, $40, $48, $4f, $3c, $46
10af8     5A 48 3A 5B 
10afc     5A 5E 60 52 
10b00     61 69 60 6A 
10b04     6C 52 66 64 | 	byte	$5a, $48, $3a, $5b, $5a, $5e, $60, $52, $61, $69, $60, $6a, $6c, $52, $66, $64
10b08     69 66 6A 6F 
10b0c     76 7F 7F 78 
10b10     6C 6A 78 64 
10b14     7F 7F 78 72 | 	byte	$69, $66, $6a, $6f, $76, $7f, $7f, $78, $6c, $6a, $78, $64, $7f, $7f, $78, $72
10b18     7F 7F 78 7B 
10b1c     7F 7F 7F 7F 
10b20     7F 7F 7F 7E 
10b24     7F 7F 7F 7F | 	byte	$7f, $7f, $78, $7b, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7e, $7f, $7f, $7f, $7f
10b28     7F 79 7F 7F 
10b2c     7F 7F 7F 7F 
10b30     7F 7F 7F 7F 
10b34     7F 7F 7F 7F | 	byte	$7f, $79, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
10b38     7F 7F 7F 7F 
10b3c     7F 7F 7F 7F 
10b40     7F 7F 7F 7F | 	byte	$7f[12]
10b44     7E 7F 7F 7F 
10b48     7E 7F 7F 76 
10b4c     78 76 6C 7F 
10b50     7F 70 7E 78 | 	byte	$7e, $7f, $7f, $7f, $7e, $7f, $7f, $76, $78, $76, $6c, $7f, $7f, $70, $7e, $78
10b54     6A 78 67 60 
10b58     64 64 6C 7C 
10b5c     60 5E 78 60 
10b60     64 72 60 5E | 	byte	$6a, $78, $67, $60, $64, $64, $6c, $7c, $60, $5e, $78, $60, $64, $72, $60, $5e
10b64     60 52 66 5A 
10b68     4E 4B 48 3C 
10b6c     37 46 30 2E 
10b70     4E 3F 30 37 | 	byte	$60, $52, $66, $5a, $4e, $4b, $48, $3c, $37, $46, $30, $2e, $4e, $3f, $30, $37
10b74     3F 30 2A 2D 
10b78     24 22 3A 3C 
10b7c     28 2A 12 22 
10b80     30 1C 24 1F | 	byte	$3f, $30, $2a, $2d, $24, $22, $3a, $3c, $28, $2a, $12, $22, $30, $1c, $24, $1f
10b84     1B 1E 1F 1E 
10b88     0C 00 10 00 
10b8c     FF 18 0A 06 
10b90     F4 ED F6 FD | 	byte	$1b, $1e, $1f, $1e, $0c, $00, $10, $00, $ff, $18, $0a, $06, $f4, $ed, $f6, $fd
10b94     F4 F3 EE DC 
10b98     DE E5 E7 E7 
10b9c     F9 E8 D8 E1 
10ba0     EE E2 D8 ED | 	byte	$f4, $f3, $ee, $dc, $de, $e5, $e7, $e7, $f9, $e8, $d8, $e1, $ee, $e2, $d8, $ed
10ba4     E8 D2 CA DB 
10ba8     D0 CF D0 C9 
10bac     C4 B8 B7 C9 
10bb0     CA BD C9 C7 | 	byte	$e8, $d2, $ca, $db, $d0, $cf, $d0, $c9, $c4, $b8, $b7, $c9, $ca, $bd, $c9, $c7
10bb4     BD BA B2 AE 
10bb8     A9 AF AC AF 
10bbc     A8 B7 AC 9F 
10bc0     A0 99 9F A2 | 	byte	$bd, $ba, $b2, $ae, $a9, $af, $ac, $af, $a8, $b7, $ac, $9f, $a0, $99, $9f, $a2
10bc4     9C 94 8D 94 
10bc8     9F A0 A0 94 
10bcc     93 9F 97 9C 
10bd0     9A 99 90 88 | 	byte	$9c, $94, $8d, $94, $9f, $a0, $a0, $94, $93, $9f, $97, $9c, $9a, $99, $90, $88
10bd4     87 91 80 80 
10bd8     80 80 80 87 
10bdc     88 87 80 81 
10be0     80 81 80 80 | 	byte	$87, $91, $80, $80, $80, $80, $80, $87, $88, $87, $80, $81, $80, $81, $80, $80
10be4     80 80 87 80 
10be8     80 80 81 82 
10bec     80 80 80 81 
10bf0     80 80 93 94 | 	byte	$80, $80, $87, $80, $80, $80, $81, $82, $80, $80, $80, $81, $80, $80, $93, $94
10bf4     84 87 80 80 
10bf8     87 8E 93 88 
10bfc     80 81 85 8D 
10c00     80 87 80 87 | 	byte	$84, $87, $80, $80, $87, $8e, $93, $88, $80, $81, $85, $8d, $80, $87, $80, $87
10c04     8B 8E 93 8B 
10c08     93 96 8E 93 
10c0c     9A 9F 99 97 
10c10     97 9A 90 9F | 	byte	$8b, $8e, $93, $8b, $93, $96, $8e, $93, $9a, $9f, $99, $97, $97, $9a, $90, $9f
10c14     A0 9F A8 A6 
10c18     A5 A8 A8 A8 
10c1c     A0 9F A3 AB 
10c20     A5 AF B1 AF | 	byte	$a0, $9f, $a8, $a6, $a5, $a8, $a8, $a8, $a0, $9f, $a3, $ab, $a5, $af, $b1, $af
10c24     B4 A6 B7 B8 
10c28     AB B1 B8 B1 
10c2c     B7 B8 B7 BA 
10c30     C9 C4 C3 CC | 	byte	$b4, $a6, $b7, $b8, $ab, $b1, $b8, $b1, $b7, $b8, $b7, $ba, $c9, $c4, $c3, $cc
10c34     C7 C6 CA C4 
10c38     CF C4 CF D0 
10c3c     DB D0 CF D0 
10c40     E1 D3 DB E4 | 	byte	$c7, $c6, $ca, $c4, $cf, $c4, $cf, $d0, $db, $d0, $cf, $d0, $e1, $d3, $db, $e4
10c44     DF DE DC DE 
10c48     E4 E2 F3 DC 
10c4c     E7 E8 ED E8 
10c50     F1 F1 F3 FF | 	byte	$df, $de, $dc, $de, $e4, $e2, $f3, $dc, $e7, $e8, $ed, $e8, $f1, $f1, $f3, $ff
10c54     E8 FF 00 FF 
10c58     00 FF 01 04 
10c5c     07 07 13 12 
10c60     0F 0C 0D 10 | 	byte	$e8, $ff, $00, $ff, $00, $ff, $01, $04, $07, $07, $13, $12, $0f, $0c, $0d, $10
10c64     07 16 18 18 
10c68     13 19 19 22 
10c6c     27 34 30 22 
10c70     2E 31 2E 30 | 	byte	$07, $16, $18, $18, $13, $19, $19, $22, $27, $34, $30, $22, $2e, $31, $2e, $30
10c74     36 33 37 37 
10c78     37 30 34 30 
10c7c     2E 40 36 46 
10c80     51 4B 43 43 | 	byte	$36, $33, $37, $37, $37, $30, $34, $30, $2e, $40, $36, $46, $51, $4b, $43, $43
10c84     4C 4B 4C 5B 
10c88     55 5E 60 52 
10c8c     57 4E 52 61 
10c90     60 55 5B 63 | 	byte	$4c, $4b, $4c, $5b, $55, $5e, $60, $52, $57, $4e, $52, $61, $60, $55, $5b, $63
10c94     58 5E 60 5E 
10c98     66 69 6A 6F 
10c9c     69 6A 66 67 
10ca0     69 60 64 6C | 	byte	$58, $5e, $60, $5e, $66, $69, $6a, $6f, $69, $6a, $66, $67, $69, $60, $64, $6c
10ca4     73 73 76 78 
10ca8     7C 7F 7B 79 
10cac     78 7B 6D 73 
10cb0     78 6C 76 78 | 	byte	$73, $73, $76, $78, $7c, $7f, $7b, $79, $78, $7b, $6d, $73, $78, $6c, $76, $78
10cb4     76 72 73 76 
10cb8     72 6D 67 70 
10cbc     72 7B 78 7C 
10cc0     78 78 6D 73 | 	byte	$76, $72, $73, $76, $72, $6d, $67, $70, $72, $7b, $78, $7c, $78, $78, $6d, $73
10cc4     72 75 78 6F 
10cc8     70 6F 6F 67 
10ccc     6A 79 72 67 
10cd0     69 6D 6C 67 | 	byte	$72, $75, $78, $6f, $70, $6f, $6f, $67, $6a, $79, $72, $67, $69, $6d, $6c, $67
10cd4     70 6F 67 6A 
10cd8     60 64 60 57 
10cdc     57 5E 5A 5D 
10ce0     57 5B 54 58 | 	byte	$70, $6f, $67, $6a, $60, $64, $60, $57, $57, $5e, $5a, $5d, $57, $5b, $54, $58
10ce4     54 4F 58 54 
10ce8     51 52 4F 52 
10cec     4F 4F 4F 51 
10cf0     48 46 48 48 | 	byte	$54, $4f, $58, $54, $51, $52, $4f, $52, $4f, $4f, $4f, $51, $48, $46, $48, $48
10cf4     3D 3F 3F 3C 
10cf8     3F 36 37 30 
10cfc     34 3C 36 33 
10d00     37 30 30 24 | 	byte	$3d, $3f, $3f, $3c, $3f, $36, $37, $30, $34, $3c, $36, $33, $37, $30, $30, $24
10d04     27 2B 1E 22 
10d08     1E 1E 18 0F 
10d0c     0D 0C 10 10 
10d10     12 03 06 07 | 	byte	$27, $2b, $1e, $22, $1e, $1e, $18, $0f, $0d, $0c, $10, $10, $12, $03, $06, $07
10d14     0F 06 0A 06 
10d18     0A 0A 00 F4 
10d1c     F6 F0 F3 FD 
10d20     F4 F4 EB F0 | 	byte	$0f, $06, $0a, $06, $0a, $0a, $00, $f4, $f6, $f0, $f3, $fd, $f4, $f4, $eb, $f0
10d24     EE EE EE E8 
10d28     E7 ED E8 E7 
10d2c     E5 DF E1 DE 
10d30     DF DE D5 D5 | 	byte	$ee, $ee, $ee, $e8, $e7, $ed, $e8, $e7, $e5, $df, $e1, $de, $df, $de, $d5, $d5
10d34     D8 DB D3 D8 
10d38     D0 C9 C7 C9 
10d3c     CF D0 CF CF 
10d40     CF C4 C3 C7 | 	byte	$d8, $db, $d3, $d8, $d0, $c9, $c7, $c9, $cf, $d0, $cf, $cf, $cf, $c4, $c3, $c7
10d44     BE C0 C1 C1 
10d48     C3 C1 C0 BE 
10d4c     C1 BB BE BB 
10d50     B8 B7 B7 BB | 	byte	$be, $c0, $c1, $c1, $c3, $c1, $c0, $be, $c1, $bb, $be, $bb, $b8, $b7, $b7, $bb
10d54     B8 B7 B5 AE 
10d58     B1 AF B5 AC 
10d5c     A8 AB AE B1 
10d60     AC A9 A6 A0 | 	byte	$b8, $b7, $b5, $ae, $b1, $af, $b5, $ac, $a8, $ab, $ae, $b1, $ac, $a9, $a6, $a0
10d64     9F 9D 9F A5 
10d68     A8 AC A3 A5 
10d6c     A6 A6 A2 A3 
10d70     A0 9F A8 AB | 	byte	$9f, $9d, $9f, $a5, $a8, $ac, $a3, $a5, $a6, $a6, $a2, $a3, $a0, $9f, $a8, $ab
10d74     B1 AC A6 A6 
10d78     A5 A6 A5 A8 
10d7c     A3 A8 A8 A3 
10d80     A8 A2 AB A6 | 	byte	$b1, $ac, $a6, $a6, $a5, $a6, $a5, $a8, $a3, $a8, $a8, $a3, $a8, $a2, $ab, $a6
10d84     A5 A3 9D 9F 
10d88     A9 A8 AB A0 
10d8c     9F A8 A2 AB 
10d90     A9 A9 AB AC | 	byte	$a5, $a3, $9d, $9f, $a9, $a8, $ab, $a0, $9f, $a8, $a2, $ab, $a9, $a9, $ab, $ac
10d94     B2 AE B4 AF 
10d98     B1 AE B5 AF 
10d9c     AE B7 B2 AF 
10da0     B4 B2 AB B1 | 	byte	$b2, $ae, $b4, $af, $b1, $ae, $b5, $af, $ae, $b7, $b2, $af, $b4, $b2, $ab, $b1
10da4     AF B5 B7 B2 
10da8     B4 B8 BB BD 
10dac     C6 C4 C4 C6 
10db0     C6 C4 C6 C6 | 	byte	$af, $b5, $b7, $b2, $b4, $b8, $bb, $bd, $c6, $c4, $c4, $c6, $c6, $c4, $c6, $c6
10db4     C6 C7 CC CC 
10db8     C7 C9 D0 C7 
10dbc     CF CC CD CF 
10dc0     D3 D8 E1 DF | 	byte	$c6, $c7, $cc, $cc, $c7, $c9, $d0, $c7, $cf, $cc, $cd, $cf, $d3, $d8, $e1, $df
10dc4     DE DB DC DF 
10dc8     DE DB E1 E4 
10dcc     E7 ED EA E5 
10dd0     E7 E5 EA EB | 	byte	$de, $db, $dc, $df, $de, $db, $e1, $e4, $e7, $ed, $ea, $e5, $e7, $e5, $ea, $eb
10dd4     ED EE EB EB 
10dd8     F0 F3 F7 F6 
10ddc     FC FF 00 01 
10de0     00 FA FD 01 | 	byte	$ed, $ee, $eb, $eb, $f0, $f3, $f7, $f6, $fc, $ff, $00, $01, $00, $fa, $fd, $01
10de4     01 07 06 07 
10de8     04 07 06 09 
10dec     0C 0C 0C 0D 
10df0     0F 13 18 18 | 	byte	$01, $07, $06, $07, $04, $07, $06, $09, $0c, $0c, $0c, $0d, $0f, $13, $18, $18
10df4     19 18 18 18 
10df8     10 19 18 1B 
10dfc     19 1B 18 19 
10e00     22 1F 21 24 | 	byte	$19, $18, $18, $18, $10, $19, $18, $1b, $19, $1b, $18, $19, $22, $1f, $21, $24
10e04     25 28 27 27 
10e08     2A 2E 30 30 
10e0c     30 2A 28 2E 
10e10     2B 31 2B 2B | 	byte	$25, $28, $27, $27, $2a, $2e, $30, $30, $30, $2a, $28, $2e, $2b, $31, $2b, $2b
10e14     2B 28 2A 2D 
10e18     30 30 30 33 
10e1c     36 37 36 37 
10e20     34 36 37 39 | 	byte	$2b, $28, $2a, $2d, $30, $30, $30, $33, $36, $37, $36, $37, $34, $36, $37, $39
10e24     3A 3C 36 3C 
10e28     3C 3C 3A 3C 
10e2c     39 3D 3C 3C 
10e30     3A 3A 3C 3F | 	byte	$3a, $3c, $36, $3c, $3c, $3c, $3a, $3c, $39, $3d, $3c, $3c, $3a, $3a, $3c, $3f
10e34     40 46 43 40 
10e38     3F 40 40 3F 
10e3c     42 3F 40 42 
10e40     42 40 43 46 | 	byte	$40, $46, $43, $40, $3f, $40, $40, $3f, $42, $3f, $40, $42, $42, $40, $43, $46
10e44     4C 4B 4E 4B 
10e48     49 4F 4B 4B 
10e4c     48 48 45 48 
10e50     46 48 46 48 | 	byte	$4c, $4b, $4e, $4b, $49, $4f, $4b, $4b, $48, $48, $45, $48, $46, $48, $46, $48
10e54     45 48 42 3F 
10e58     43 43 46 48 
10e5c     49 49 49 4B 
10e60     49 48 48 42 | 	byte	$45, $48, $42, $3f, $43, $43, $46, $48, $49, $49, $49, $4b, $49, $48, $48, $42
10e64     43 45 43 42 
10e68     3F 3F 3D 3F 
10e6c     45 43 43 3F 
10e70     3F 39 3A 3C | 	byte	$43, $45, $43, $42, $3f, $3f, $3d, $3f, $45, $43, $43, $3f, $3f, $39, $3a, $3c
10e74     3D 3D 40 3F 
10e78     3F 39 3A 3A 
10e7c     39 3C 3D 3C 
10e80     36 34 33 31 | 	byte	$3d, $3d, $40, $3f, $3f, $39, $3a, $3a, $39, $3c, $3d, $3c, $36, $34, $33, $31
10e84     33 33 34 36 
10e88     36 31 30 30 
10e8c     2D 2A 28 27 
10e90     24 24 24 25 | 	byte	$33, $33, $34, $36, $36, $31, $30, $30, $2d, $2a, $28, $27, $24, $24, $24, $25
10e94     28 28 24 22 
10e98     22 21 21 21 
10e9c     22 1F 1F 21 
10ea0     1F 22 22 21 | 	byte	$28, $28, $24, $22, $22, $21, $21, $21, $22, $1f, $1f, $21, $1f, $22, $22, $21
10ea4     21 1B 19 18 
10ea8     12 10 0F 0C 
10eac     0C 0D 0C 0F 
10eb0     0F 0D 0F 0C | 	byte	$21, $1b, $19, $18, $12, $10, $0f, $0c, $0c, $0d, $0c, $0f, $0f, $0d, $0f, $0c
10eb4     0C 0A 09 06 
10eb8     07 06 03 03 
10ebc     01 01 01 00 
10ec0     00 FF FC FC | 	byte	$0c, $0a, $09, $06, $07, $06, $03, $03, $01, $01, $01, $00, $00, $ff, $fc, $fc
10ec4     FA F7 F7 F7 
10ec8     F6 F4 F1 F0 
10ecc     F3 F3 F6 F1 
10ed0     EB E8 E7 E7 | 	byte	$fa, $f7, $f7, $f7, $f6, $f4, $f1, $f0, $f3, $f3, $f6, $f1, $eb, $e8, $e7, $e7
10ed4     E5 E7 E8 E7 
10ed8     E5 E4 E4 E5 
10edc     E4 E7 E5 E4 
10ee0     E2 E1 E1 DF | 	byte	$e5, $e7, $e8, $e7, $e5, $e4, $e4, $e5, $e4, $e7, $e5, $e4, $e2, $e1, $e1, $df
10ee4     DE DB DB D9 
10ee8     D9 DB D9 D6 
10eec     D8 D8 D8 D9 
10ef0     D8 DB D9 DB | 	byte	$de, $db, $db, $d9, $d9, $db, $d9, $d6, $d8, $d8, $d8, $d9, $d8, $db, $d9, $db
10ef4     DC DC DE DC 
10ef8     D9 D6 D6 D5 
10efc     D5 D5 D6 D3 
10f00     D3 D0 D0 D0 | 	byte	$dc, $dc, $de, $dc, $d9, $d6, $d6, $d5, $d5, $d5, $d6, $d3, $d3, $d0, $d0, $d0
10f04     CF D0 D2 D2 
10f08     D2 D2 D3 D2 
10f0c     D2 D2 D2 D0 
10f10     D0 CF CF CF | 	byte	$cf, $d0, $d2, $d2, $d2, $d2, $d3, $d2, $d2, $d2, $d2, $d0, $d0, $cf, $cf, $cf
10f14     D2 D3 D2 D2 
10f18     D2 D2 D3 D3 
10f1c     D3 D5 D6 D8 
10f20     D9 D6 D3 D3 | 	byte	$d2, $d3, $d2, $d2, $d2, $d2, $d3, $d3, $d3, $d5, $d6, $d8, $d9, $d6, $d3, $d3
10f24     D3 D5 D6 D6 
10f28     D5 D5 D5 D5 
10f2c     D5 D3 D5 D5 
10f30     D8 D8 D8 D6 | 	byte	$d3, $d5, $d6, $d6, $d5, $d5, $d5, $d5, $d5, $d3, $d5, $d5, $d8, $d8, $d8, $d6
10f34     D6 D6 D5 D5 
10f38     D3 D5 D6 D6 
10f3c     D6 D8 D8 D9 
10f40     D9 D6 D6 D6 | 	byte	$d6, $d6, $d5, $d5, $d3, $d5, $d6, $d6, $d6, $d8, $d8, $d9, $d9, $d6, $d6, $d6
10f44     D8 DB DE DF 
10f48     DF DF DF DF 
10f4c     DF DF E1 DF 
10f50     DF E1 E2 E5 | 	byte	$d8, $db, $de, $df, $df, $df, $df, $df, $df, $df, $e1, $df, $df, $e1, $e2, $e5
10f54     E5 E4 E4 E4 
10f58     E2 E2 DE DF 
10f5c     E1 E1 E4 E4 
10f60     E4 E4 E4 E5 | 	byte	$e5, $e4, $e4, $e4, $e2, $e2, $de, $df, $e1, $e1, $e4, $e4, $e4, $e4, $e4, $e5
10f64     E7 E8 EA EA 
10f68     EA ED EE ED 
10f6c     ED EB ED F0 
10f70     F0 F1 F1 F1 | 	byte	$e7, $e8, $ea, $ea, $ea, $ed, $ee, $ed, $ed, $eb, $ed, $f0, $f0, $f1, $f1, $f1
10f74     F1 F1 F1 F0 
10f78     EE F0 F0 F0 
10f7c     F1 F1 F1 F1 
10f80     F3 F1 F1 F3 | 	byte	$f1, $f1, $f1, $f0, $ee, $f0, $f0, $f0, $f1, $f1, $f1, $f1, $f3, $f1, $f1, $f3
10f84     F3 F4 F7 F9 
10f88     FD FF FF FF 
10f8c     FF 00 00 00 
10f90     FF FF FF FF | 	byte	$f3, $f4, $f7, $f9, $fd, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff
10f94     FD FC FA FA 
10f98     FA FC FD FD 
10f9c     FD FD FF 00 
10fa0     01 03 03 03 | 	byte	$fd, $fc, $fa, $fa, $fa, $fc, $fd, $fd, $fd, $fd, $ff, $00, $01, $03, $03, $03
10fa4     04 04 07 09 
10fa8     09 0A 0C 0C 
10fac     0A 0A 09 09 
10fb0     09 07 06 03 | 	byte	$04, $04, $07, $09, $09, $0a, $0c, $0c, $0a, $0a, $09, $09, $09, $07, $06, $03
10fb4     03 04 06 07 
10fb8     0A 0C 0C 0D 
10fbc     0D 0C 0A 0A 
10fc0     0C 0C 0D 0F | 	byte	$03, $04, $06, $07, $0a, $0c, $0c, $0d, $0d, $0c, $0a, $0a, $0c, $0c, $0d, $0f
10fc4     0F 0F 0D 0C 
10fc8     0D 0F 0D 0F 
10fcc     0F 0F 0F 10 
10fd0     10 10 0F 0F | 	byte	$0f, $0f, $0d, $0c, $0d, $0f, $0d, $0f, $0f, $0f, $0f, $10, $10, $10, $0f, $0f
10fd4     0D 0C 0D 0D 
10fd8     0D 0F 0D 0C 
10fdc     0C 0C 0C 0F 
10fe0     12 13 13 12 | 	byte	$0d, $0c, $0d, $0d, $0d, $0f, $0d, $0c, $0c, $0c, $0c, $0f, $12, $13, $13, $12
10fe4     12 12 10 10 
10fe8     10 12 13 13 
10fec     13 15 16 18 
10ff0     18 18 18 18 | 	byte	$12, $12, $10, $10, $10, $12, $13, $13, $13, $15, $16, $18, $18, $18, $18, $18
10ff4     19 19 18 13 
10ff8     13 12 10 10 
10ffc     0F 0F 0F 0F 
11000     0F 0F 0F 0F | 	byte	$19, $19, $18, $13, $13, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
11004     0D 0C 0D 0D 
11008     0F 10 12 10 
1100c     10 0F 0F 0F 
11010     0F 0F 10 10 | 	byte	$0d, $0c, $0d, $0d, $0f, $10, $12, $10, $10, $0f, $0f, $0f, $0f, $0f, $10, $10
11014     10 10 12 12 
11018     10 12 12 10 
1101c     12 12 10 0F 
11020     0D 0C 09 09 | 	byte	$10, $10, $12, $12, $10, $12, $12, $10, $12, $12, $10, $0f, $0d, $0c, $09, $09
11024     0A 0C 0D 0F 
11028     10 12 12 12 
1102c     0F 0D 0C 0A 
11030     0C 0C 0C 0C | 	byte	$0a, $0c, $0d, $0f, $10, $12, $12, $12, $0f, $0d, $0c, $0a, $0c, $0c, $0c, $0c
11034     0C 09 09 09 
11038     09 09 09 09 
1103c     09 0A 0A 0C 
11040     0C 0C 0C 0C | 	byte	$0c, $09, $09, $09, $09, $09, $09, $09, $09, $0a, $0a, $0c, $0c, $0c, $0c, $0c
11044     0D 0D 0D 0C 
11048     0C 0A 09 09 
1104c     09 09 09 09 
11050     09 09 09 09 | 	byte	$0d, $0d, $0d, $0c, $0c, $0a, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
11054     07 06 03 03 
11058     03 06 06 07 
1105c     07 06 06 06 
11060     06 06 04 03 | 	byte	$07, $06, $03, $03, $03, $06, $06, $07, $07, $06, $06, $06, $06, $06, $04, $03
11064     03 01 01 00 
11068     01 01 01 03 
1106c     03 06 09 09 
11070     09 09 06 04 | 	byte	$03, $01, $01, $00, $01, $01, $01, $03, $03, $06, $09, $09, $09, $09, $06, $04
11074     03 01 01 01 
11078     03 03 03 01 
1107c     01 01 01 00 
11080     00 01 01 01 | 	byte	$03, $01, $01, $01, $03, $03, $03, $01, $01, $01, $01, $00, $00, $01, $01, $01
11084     01 03 01 00 
11088     00 FD FD FC 
1108c     FC FC FC FA 
11090     F9 FA FC FD | 	byte	$01, $03, $01, $00, $00, $fd, $fd, $fc, $fc, $fc, $fc, $fa, $f9, $fa, $fc, $fd
11094     FF 01 03 03 
11098     04 04 04 03 
1109c     00 FD FC FC 
110a0     FC FC FD FD | 	byte	$ff, $01, $03, $03, $04, $04, $04, $03, $00, $fd, $fc, $fc, $fc, $fc, $fd, $fd
110a4     FD FD FD FC 
110a8     FC FA FA F9 
110ac     F7 F9 FA FC 
110b0     FD FD FC FC | 	byte	$fd, $fd, $fd, $fc, $fc, $fa, $fa, $f9, $f7, $f9, $fa, $fc, $fd, $fd, $fc, $fc
110b4     FA FA F9 FA 
110b8     FA FA FC FC 
110bc     FC FD FD FD 
110c0     FC FC FA FA | 	byte	$fa, $fa, $f9, $fa, $fa, $fa, $fc, $fc, $fc, $fd, $fd, $fd, $fc, $fc, $fa, $fa
110c4     F7 F6 F6 F6 
110c8     F6 F7 F9 FA 
110cc     FC FD FD FF 
110d0     FF 00 00 00 | 	byte	$f7, $f6, $f6, $f6, $f6, $f7, $f9, $fa, $fc, $fd, $fd, $ff, $ff, $00, $00, $00
110d4     FF FF 00 00 
110d8     00 00 00 FF 
110dc     FC FA FA F9 
110e0     F7 F7 F9 F7 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $ff, $fc, $fa, $fa, $f9, $f7, $f7, $f9, $f7
110e4     F7 F7 F9 F9 
110e8     F9 FA FA F9 
110ec     F9 F9 F7 F7 
110f0     F7 F7 F9 F9 | 	byte	$f7, $f7, $f9, $f9, $f9, $fa, $fa, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9
110f4     FA FA FA FA 
110f8     FA FA       | 	byte	$fa[6]
110fa     F9 F9 F7 F7 
110fe     F7 F9 F9 FA 
11102     FA FA F9 F9 
11106     F9 FA FC FC | 	byte	$f9, $f9, $f7, $f7, $f7, $f9, $f9, $fa, $fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc
1110a     FC FC FC FD 
1110e     FC FD FD FC 
11112     FC FC FD FD 
11116     FC FA F9 F7 | 	byte	$fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7
1111a     F7 F9 FA FC 
1111e     FC FC FC FC 
11122     FC FC FC FC 
11126     FA FA F9 F9 | 	byte	$f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9
1112a     F9 F9 F9 F7 
1112e     F7 F7 F7 F6 
11132     F7 F7 F7 F7 
11136     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
1113a     F7 F9 F9 F9 
1113e     F9 F9 F9 F9 
11142     F9 F9 F9 F7 
11146     F7 F7 F7 F9 | 	byte	$f7, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f9
1114a     FA FC FC FA 
1114e     FC FC FA FA 
11152     FA FA FA FA 
11156     F9 F7 F7 F7 | 	byte	$fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $f9, $f7, $f7, $f7
1115a     F7 F9 F9 F9 
1115e     F9 F7 F7 F6 
11162     F7 F9 FC 00 
11166     F7 F9 F9 FA | 	byte	$f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $fc, $00, $f7, $f9, $f9, $fa
1116a     FA FA F9 F9 
1116e     F9 FA FC FC 
11172     FC FC FC FD 
11176     FC FD FD FC | 	byte	$fa, $fa, $f9, $f9, $f9, $fa, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fd, $fd, $fc
1117a     FC FC FD FD 
1117e     FC FA F9 F7 
11182     F7 F9 FA FC 
11186     FC FC FC FC | 	byte	$fc, $fc, $fd, $fd, $fc, $fa, $f9, $f7, $f7, $f9, $fa, $fc, $fc, $fc, $fc, $fc
1118a     FC FC FC FC 
1118e     FA FA F9 F9 
11192     F9 F9 F9 F7 
11196     F7 F7 F7 F6 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f7, $f7, $f6
1119a     F7 F7 F7 F7 
1119e     F7 F7 F7 F7 
111a2     F7          | 	byte	$f7[9]
111a3     F9 F9 F9 F9 
111a7     F9 F9 F9 F9 
111ab     F9 F9       | 	byte	$f9[10]
111ad     F7 F7 F7 F7 
111b1     F9 FA FC FC 
111b5     FA FC FC FA 
111b9     FA FA FA FA | 	byte	$f7, $f7, $f7, $f7, $f9, $fa, $fc, $fc, $fa, $fc, $fc, $fa, $fa, $fa, $fa, $fa
111bd     FA F9 F7 F7 
111c1     F7 F7 F9 F9 
111c5     F9 F9 F7 F7 
111c9     F6 F7 F9 00 | 	byte	$fa, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f9, $f9, $f7, $f7, $f6, $f7, $f9, $00
111cd     00 05 05 08 
111d1     08 09 0A 0B 
111d5     06 09 09 09 
111d9     09 09 0C 0B | 	byte	$00, $05, $05, $08, $08, $09, $0a, $0b, $06, $09, $09, $09, $09, $09, $0c, $0b
111dd     0B 0A 0F 17 
111e1     04 10 FF 08 
111e5     F8 F3 08 07 
111e9     F5 FF 10 10 | 	byte	$0b, $0a, $0f, $17, $04, $10, $ff, $08, $f8, $f3, $08, $07, $f5, $ff, $10, $10
111ed     1D 24 00 FF 
111f1     14 20 0F 12 
111f5     10 20 01 10 
111f9     F0 EE E1 D0 | 	byte	$1d, $24, $00, $ff, $14, $20, $0f, $12, $10, $20, $01, $10, $f0, $ee, $e1, $d0
111fd     D8 F7 D7 F0 
11201     FF CB F7 F7 
11205     F2 FF EB E4 
11209     0A 0F 20 17 | 	byte	$d8, $f7, $d7, $f0, $ff, $cb, $f7, $f7, $f2, $ff, $eb, $e4, $0a, $0f, $20, $17
1120d     18 32 27 17 
11211     1F 30 40 4C 
11215     24 3C 27 23 
11219     2C 19 1D 0F | 	byte	$18, $32, $27, $17, $1f, $30, $40, $4c, $24, $3c, $27, $23, $2c, $19, $1d, $0f
1121d     08 28 E7 00 
11221     ED E7 F8 F0 
11225     FD F4 D7 E8 
11229     DF CF DC D5 | 	byte	$08, $28, $e7, $00, $ed, $e7, $f8, $f0, $fd, $f4, $d7, $e8, $df, $cf, $dc, $d5
1122d     D7 EC 1B 3B 
11231     20 25 16 13 
11235     27 30 40 37 
11239     30 37 30 24 | 	byte	$d7, $ec, $1b, $3b, $20, $25, $16, $13, $27, $30, $40, $37, $30, $37, $30, $24
1123d     19 E0 F5 EF 
11241     E1 FC F0 F2 
11245     E0 D7 D2 C8 
11249     CB B5 D6 D5 | 	byte	$19, $e0, $f5, $ef, $e1, $fc, $f0, $f2, $e0, $d7, $d2, $c8, $cb, $b5, $d6, $d5
1124d     EF FB FA 2B 
11251     FD 0F 1F 31 
11255     3D 34 44 37 
11259     20 33 1B 2F | 	byte	$ef, $fb, $fa, $2b, $fd, $0f, $1f, $31, $3d, $34, $44, $37, $20, $33, $1b, $2f
1125d     38 22 3A 25 
11261     31 2A 00 0C 
11265     00 0F 1B 38 
11269     23 08 FF F9 | 	byte	$38, $22, $3a, $25, $31, $2a, $00, $0c, $00, $0f, $1b, $38, $23, $08, $ff, $f9
1126d     00 EF F4 F2 
11271     F7 0A 17 14 
11275     10 EF ED F2 
11279     F3 09 11 1B | 	byte	$00, $ef, $f4, $f2, $f7, $0a, $17, $14, $10, $ef, $ed, $f2, $f3, $09, $11, $1b
1127d     10 1F 1C F0 
11281     F4 DB DF D9 
11285     EE 00 E8 E2 
11289     DD D8 D1 C5 | 	byte	$10, $1f, $1c, $f0, $f4, $db, $df, $d9, $ee, $00, $e8, $e2, $dd, $d8, $d1, $c5
1128d     D4 BF DD E8 
11291     FF 04 18 0E 
11295     0D 22 2D 34 
11299     4F 3D 45 30 | 	byte	$d4, $bf, $dd, $e8, $ff, $04, $18, $0e, $0d, $22, $2d, $34, $4f, $3d, $45, $30
1129d     1B 36 2A 1C 
112a1     22 13 2B 28 
112a5     0E 10 FF E6 
112a9     05 09 28 20 | 	byte	$1b, $36, $2a, $1c, $22, $13, $2b, $28, $0e, $10, $ff, $e6, $05, $09, $28, $20
112ad     0C 1B 00 02 
112b1     00 FA FB 0B 
112b5     17 35 34 27 
112b9     1A FE 0F 08 | 	byte	$0c, $1b, $00, $02, $00, $fa, $fb, $0b, $17, $35, $34, $27, $1a, $fe, $0f, $08
112bd     0B 1A 11 23 
112c1     20 20 02 FA 
112c5     E1 D8 E6 E4 
112c9     FA F7 E7 F0 | 	byte	$0b, $1a, $11, $23, $20, $20, $02, $fa, $e1, $d8, $e6, $e4, $fa, $f7, $e7, $f0
112cd     CE D2 C8 C5 
112d1     CB CB CF EC 
112d5     FF 02 F4 05 
112d9     F5 11 20 27 | 	byte	$ce, $d2, $c8, $c5, $cb, $cb, $cf, $ec, $ff, $02, $f4, $05, $f5, $11, $20, $27
112dd     4A 28 25 26 
112e1     10 2F 1D 14 
112e5     1F 20 20 20 
112e9     0C 02 EA E3 | 	byte	$4a, $28, $25, $26, $10, $2f, $1d, $14, $1f, $20, $20, $20, $0c, $02, $ea, $e3
112ed     14 17 0F 18 
112f1     0B F8 04 FC 
112f5     04 FD 07 2A 
112f9     2D 46 40 26 | 	byte	$14, $17, $0f, $18, $0b, $f8, $04, $fc, $04, $fd, $07, $2a, $2d, $46, $40, $26
112fd     1C 08 14 1A 
11301     1B 1B 20 1C 
11305     10 10 F4 E6 
11309     D0 D7 F1 E2 | 	byte	$1c, $08, $14, $1a, $1b, $1b, $20, $1c, $10, $10, $f4, $e6, $d0, $d7, $f1, $e2
1130d     F2 F3 E9 E8 
11311     D5 CE D8 D7 
11315     DB DD F7 05 
11319     15 0E 0E 14 | 	byte	$f2, $f3, $e9, $e8, $d5, $ce, $d8, $d7, $db, $dd, $f7, $05, $15, $0e, $0e, $14
1131d     04 1B 37 36 
11321     39 26 19 23 
11325     1A 15 1F 0B 
11329     20 16 0D 1A | 	byte	$04, $1b, $37, $36, $39, $26, $19, $23, $1a, $15, $1f, $0b, $20, $16, $0d, $1a
1132d     F8 E0 E6 F1 
11331     FD 0D 09 02 
11335     EC F5 00 EA 
11339     F3 F8 0B 27 | 	byte	$f8, $e0, $e6, $f1, $fd, $0d, $09, $02, $ec, $f5, $00, $ea, $f3, $f8, $0b, $27
1133d     37 3B 2D 20 
11341     1C 17 20 27 
11345     31 29 2F 20 
11349     14 0C EA E1 | 	byte	$37, $3b, $2d, $20, $1c, $17, $20, $27, $31, $29, $2f, $20, $14, $0c, $ea, $e1
1134d     E3 DF EF E8 
11351     F3 F3 E0 E0 
11355     CF D7 D1 DD 
11359     E8 F3 14 0C | 	byte	$e3, $df, $ef, $e8, $f3, $f3, $e0, $e0, $cf, $d7, $d1, $dd, $e8, $f3, $14, $0c
1135d     1D 21 13 1B 
11361     1B 32 43 40 
11365     2E 2F 20 26 
11369     20 15 20 18 | 	byte	$1d, $21, $13, $1b, $1b, $32, $43, $40, $2e, $2f, $20, $26, $20, $15, $20, $18
1136d     14 23 19 01 
11371     F0 EA F3 F5 
11375     07 12 F6 F3 
11379     F1 EA EB E9 | 	byte	$14, $23, $19, $01, $f0, $ea, $f3, $f5, $07, $12, $f6, $f3, $f1, $ea, $eb, $e9
1137d     EE F1 0D 26 
11381     2A 20 13 10 
11385     03 0C 1A 1B 
11389     25 20 19 14 | 	byte	$ee, $f1, $0d, $26, $2a, $20, $13, $10, $03, $0c, $1a, $1b, $25, $20, $19, $14
1138d     00 F0 E4 DF 
11391     E3 DD E9 F1 
11395     F3 E4 DF D8 
11399     D4 DA D6 E5 | 	byte	$00, $f0, $e4, $df, $e3, $dd, $e9, $f1, $f3, $e4, $df, $d8, $d4, $da, $d6, $e5
1139d     F9 03 13 1B 
113a1     1D 24 1C 1F 
113a5     3B 3B 48 40 
113a9     2C 2C 25 1E | 	byte	$f9, $03, $13, $1b, $1d, $24, $1c, $1f, $3b, $3b, $48, $40, $2c, $2c, $25, $1e
113ad     28 21 14 1E 
113b1     1D 21 0A F9 
113b5     F6 EF FD 13 
113b9     09 08 FD F9 | 	byte	$28, $21, $14, $1e, $1d, $21, $0a, $f9, $f6, $ef, $fd, $13, $09, $08, $fd, $f9
113bd     F4 F5 F0 F2 
113c1     F5 0B 28 26 
113c5     23 20 05 06 
113c9     07 0E 1E 12 | 	byte	$f4, $f5, $f0, $f2, $f5, $0b, $28, $26, $23, $20, $05, $06, $07, $0e, $1e, $12
113cd     1B 12 09 FC 
113d1     E3 E4 D9 D9 
113d5     CE DD E2 DF 
113d9     E6 D5 D0 CE | 	byte	$1b, $12, $09, $fc, $e3, $e4, $d9, $d9, $ce, $dd, $e2, $df, $e6, $d5, $d0, $ce
113dd     C8 CF DC E7 
113e1     FC 03 0E 20 
113e5     14 17 21 29 
113e9     3F 44 40 3E | 	byte	$c8, $cf, $dc, $e7, $fc, $03, $0e, $20, $14, $17, $21, $29, $3f, $44, $40, $3e
113ed     30 23 31 28 
113f1     2C 22 29 30 
113f5     21 1A 10 F6 
113f9     FA 03 14 14 | 	byte	$30, $23, $31, $28, $2c, $22, $29, $30, $21, $1a, $10, $f6, $fa, $03, $14, $14
113fd     11 05 FD F8 
11401     FA F8 EC F5 
11405     13 20 2B 2C 
11409     20 14 05 0B | 	byte	$11, $05, $fd, $f8, $fa, $f8, $ec, $f5, $13, $20, $2b, $2c, $20, $14, $05, $0b
1140d     14 1B 20 20 
11411     1E 10 02 F0 
11415     EE E4 D8 DD 
11419     DF E2 EA E6 | 	byte	$14, $1b, $20, $20, $1e, $10, $02, $f0, $ee, $e4, $d8, $dd, $df, $e2, $ea, $e6
1141d     DD DC CD CE 
11421     CD D7 EE ED 
11425     FA 0C 0D 10 
11429     0C 0D 1E 29 | 	byte	$dd, $dc, $cd, $ce, $cd, $d7, $ee, $ed, $fa, $0c, $0d, $10, $0c, $0d, $1e, $29
1142d     31 39 2C 21 
11431     1A 1D 20 18 
11435     1B 24 20 21 
11439     1A 09 FA F3 | 	byte	$31, $39, $2c, $21, $1a, $1d, $20, $18, $1b, $24, $20, $21, $1a, $09, $fa, $f3
1143d     03 11 1A 18 
11441     10 06 FF 07 
11445     F6 F3 03 12 
11449     28 2D 36 30 | 	byte	$03, $11, $1a, $18, $10, $06, $ff, $07, $f6, $f3, $03, $12, $28, $2d, $36, $30
1144d     1E 14 15 1A 
11451     1E 27 26 25 
11455     18 04 FD F1 
11459     E4 DF DD D9 | 	byte	$1e, $14, $15, $1a, $1e, $27, $26, $25, $18, $04, $fd, $f1, $e4, $df, $dd, $d9
1145d     E6 E6 EA E5 
11461     DA D4 C7 CF 
11465     DF EA EE FF 
11469     05 13 12 0D | 	byte	$e6, $e6, $ea, $e5, $da, $d4, $c7, $cf, $df, $ea, $ee, $ff, $05, $13, $12, $0d
1146d     14 17 27 38 
11471     39 33 1E 1C 
11475     20 18 19 20 
11479     19 21 20 18 | 	byte	$14, $17, $27, $38, $39, $33, $1e, $1c, $20, $18, $19, $20, $19, $21, $20, $18
1147d     0A F6 F2 FB 
11481     06 0E 14 04 
11485     FC FC F4 ED 
11489     EA F4 03 12 | 	byte	$0a, $f6, $f2, $fb, $06, $0e, $14, $04, $fc, $fc, $f4, $ed, $ea, $f4, $03, $12
1148d     24 2E 26 18 
11491     14 0F 16 1B 
11495     21 2C 2C 18 
11499     10 04 F7 F1 | 	byte	$24, $2e, $26, $18, $14, $0f, $16, $1b, $21, $2c, $2c, $18, $10, $04, $f7, $f1
1149d     E5 E5 E5 EB 
114a1     F6 F2 F0 EC 
114a5     DA CF D9 DF 
114a9     EF F5 FD 0B | 	byte	$e5, $e5, $e5, $eb, $f6, $f2, $f0, $ec, $da, $cf, $d9, $df, $ef, $f5, $fd, $0b
114ad     10 12 14 10 
114b1     17 23 36 3E 
114b5     2A 22 20 15 
114b9     17 15 17 17 | 	byte	$10, $12, $14, $10, $17, $23, $36, $3e, $2a, $22, $20, $15, $17, $15, $17, $17
114bd     1C 1D 18 08 
114c1     F5 F4 F3 FF 
114c5     0E 0E 08 00 
114c9     FE F4 EB EC | 	byte	$1c, $1d, $18, $08, $f5, $f4, $f3, $ff, $0e, $0e, $08, $00, $fe, $f4, $eb, $ec
114cd     F4 FD 0E 25 
114d1     2A 26 1B 10 
114d5     0C 11 11 21 
114d9     28 20 1B 08 | 	byte	$f4, $fd, $0e, $25, $2a, $26, $1b, $10, $0c, $11, $11, $21, $28, $20, $1b, $08
114dd     FE F3 E8 E4 
114e1     DA D9 E2 E5 
114e5     E9 F1 E2 D4 
114e9     CD D1 DE E7 | 	byte	$fe, $f3, $e8, $e4, $da, $d9, $e2, $e5, $e9, $f1, $e2, $d4, $cd, $d1, $de, $e7
114ed     F3 FF 08 13 
114f1     17 19 18 18 
114f5     2B 42 40 3C 
114f9     33 29 23 24 | 	byte	$f3, $ff, $08, $13, $17, $19, $18, $18, $2b, $42, $40, $3c, $33, $29, $23, $24
114fd     1F 21 21 26 
11501     29 20 10 00 
11505     F4 F6 FF 0D 
11509     0A 08 04 FD | 	byte	$1f, $21, $21, $26, $29, $20, $10, $00, $f4, $f6, $ff, $0d, $0a, $08, $04, $fd
1150d     F0 E8 EA EA 
11511     F5 07 1B 25 
11515     27 1A 13 10 
11519     09 14 20 25 | 	byte	$f0, $e8, $ea, $ea, $f5, $07, $1b, $25, $27, $1a, $13, $10, $09, $14, $20, $25
1151d     26 1C 13 04 
11521     F5 EF E4 DF 
11525     DF DC E3 ED 
11529     ED E8 D4 CA | 	byte	$26, $1c, $13, $04, $f5, $ef, $e4, $df, $df, $dc, $e3, $ed, $ed, $e8, $d4, $ca
1152d     CF D6 E1 EC 
11531     F6 02 09 13 
11535     14 0A 13 23 
11539     32 37 38 2D | 	byte	$cf, $d6, $e1, $ec, $f6, $02, $09, $13, $14, $0a, $13, $23, $32, $37, $38, $2d
1153d     29 20 1D 1E 
11541     1A 1F 26 29 
11545     24 18 09 FA 
11549     FA 07 10 10 | 	byte	$29, $20, $1d, $1e, $1a, $1f, $26, $29, $24, $18, $09, $fa, $fa, $07, $10, $10
1154d     14 14 08 FC 
11551     F6 F4 F1 FD 
11555     0B 1F 2D 2A 
11559     28 20 10 10 | 	byte	$14, $14, $08, $fc, $f6, $f4, $f1, $fd, $0b, $1f, $2d, $2a, $28, $20, $10, $10
1155d     14 20 27 25 
11561     25 14 04 FA 
11565     E9 E0 DC D5 
11569     D5 D8 E4 EB | 	byte	$14, $20, $27, $25, $25, $14, $04, $fa, $e9, $e0, $dc, $d5, $d5, $d8, $e4, $eb
1156d     E0 D0 C8 C6 
11571     D3 D9 E9 F2 
11575     F9 07 14 10 
11579     0A 16 21 2F | 	byte	$e0, $d0, $c8, $c6, $d3, $d9, $e9, $f2, $f9, $07, $14, $10, $0a, $16, $21, $2f
1157d     38 36 34 28 
11581     22 20 18 1A 
11585     1C 23 27 23 
11589     17 08 F6 F8 | 	byte	$38, $36, $34, $28, $22, $20, $18, $1a, $1c, $23, $27, $23, $17, $08, $f6, $f8
1158d     FF 05 0A 11 
11591     10 01 FC F5 
11595     ED EE F1 05 
11599     19 25 2C 28 | 	byte	$ff, $05, $0a, $11, $10, $01, $fc, $f5, $ed, $ee, $f1, $05, $19, $25, $2c, $28
1159d     20 14 12 1B 
115a1     23 2B 33 2C 
115a5     20 15 04 F9 
115a9     ED E7 E2 D9 | 	byte	$20, $14, $12, $1b, $23, $2b, $33, $2c, $20, $15, $04, $f9, $ed, $e7, $e2, $d9
115ad     DF EF F0 EA 
115b1     D8 D0 CD D2 
115b5     DB E8 ED F5 
115b9     06 0A 07 06 | 	byte	$df, $ef, $f0, $ea, $d8, $d0, $cd, $d2, $db, $e8, $ed, $f5, $06, $0a, $07, $06
115bd     09 19 21 2D 
115c1     32 2B 23 1B 
115c5     12 10 0C 14 
115c9     1C 1F 21 1A | 	byte	$09, $19, $21, $2d, $32, $2b, $23, $1b, $12, $10, $0c, $14, $1c, $1f, $21, $1a
115cd     06 FA FB FE 
115d1     03 0F 15 11 
115d5     0D 02 FB F4 
115d9     EC F6 04 13 | 	byte	$06, $fa, $fb, $fe, $03, $0f, $15, $11, $0d, $02, $fb, $f4, $ec, $f6, $04, $13
115dd     24 2B 2C 22 
115e1     14 14 10 1A 
115e5     26 2D 2A 20 
115e9     11 05 F2 EC | 	byte	$24, $2b, $2c, $22, $14, $14, $10, $1a, $26, $2d, $2a, $20, $11, $05, $f2, $ec
115ed     E6 DD D8 DD 
115f1     EB F2 E8 E0 
115f5     D6 CD D5 E2 
115f9     E9 F2 FF 0E | 	byte	$e6, $dd, $d8, $dd, $eb, $f2, $e8, $e0, $d6, $cd, $d5, $e2, $e9, $f2, $ff, $0e
115fd     16 10 10 13 
11601     1D 29 35 38 
11605     34 2C 25 1C 
11609     14 11 15 1A | 	byte	$16, $10, $10, $13, $1d, $29, $35, $38, $34, $2c, $25, $1c, $14, $11, $15, $1a
1160d     22 24 18 05 
11611     FC F6 F4 FB 
11615     07 0D 0E 06 
11619     00 F8 ED E8 | 	byte	$22, $24, $18, $05, $fc, $f6, $f4, $fb, $07, $0d, $0e, $06, $00, $f8, $ed, $e8
1161d     EB F7 09 19 
11621     29 28 1E 17 
11625     10 10 19 22 
11629     2D 2A 23 18 | 	byte	$eb, $f7, $09, $19, $29, $28, $1e, $17, $10, $10, $19, $22, $2d, $2a, $23, $18
1162d     08 00 F3 E8 
11631     E0 D5 DF ED 
11635     EE EC E1 D6 
11639     CF D7 DC E3 | 	byte	$08, $00, $f3, $e8, $e0, $d5, $df, $ed, $ee, $ec, $e1, $d6, $cf, $d7, $dc, $e3
1163d     ED FB 08 10 
11641     0E 0E 0D 1B 
11645     27 31 39 34 
11649     30 28 20 18 | 	byte	$ed, $fb, $08, $10, $0e, $0e, $0d, $1b, $27, $31, $39, $34, $30, $28, $20, $18
1164d     13 17 1B 27 
11651     28 1E 14 06 
11655     FE FB FF 0C 
11659     13 12 0E 08 | 	byte	$13, $17, $1b, $27, $28, $1e, $14, $06, $fe, $fb, $ff, $0c, $13, $12, $0e, $08
1165d     01 F4 EF F1 
11661     F6 05 1B 27 
11665     28 24 18 11 
11669     0C 15 22 29 | 	byte	$01, $f4, $ef, $f1, $f6, $05, $1b, $27, $28, $24, $18, $11, $0c, $15, $22, $29
1166d     2A 26 18 0A 
11671     FD F3 E8 D4 
11675     CE D7 DF E3 
11679     E5 DC CD CA | 	byte	$2a, $26, $18, $0a, $fd, $f3, $e8, $d4, $ce, $d7, $df, $e3, $e5, $dc, $cd, $ca
1167d     CD D3 D8 E5 
11681     F7 02 0E 0E 
11685     0E 0F 15 27 
11689     32 37 3A 33 | 	byte	$cd, $d3, $d8, $e5, $f7, $02, $0e, $0e, $0e, $0f, $15, $27, $32, $37, $3a, $33
1168d     2C 20 1B 14 
11691     13 1D 25 26 
11695     22 18 0D 00 
11699     FC FF 0C 12 | 	byte	$2c, $20, $1b, $14, $13, $1d, $25, $26, $22, $18, $0d, $00, $fc, $ff, $0c, $12
1169d     12 11 0C 00 
116a1     F5 F2 EC EF 
116a5     FF 11 20 25 
116a9     24 1C 10 0D | 	byte	$12, $11, $0c, $00, $f5, $f2, $ec, $ef, $ff, $11, $20, $25, $24, $1c, $10, $0d
116ad     17 22 2B 33 
116b1     2A 22 15 0C 
116b5     06 F0 DD DB 
116b9     DC E4 ED E8 | 	byte	$17, $22, $2b, $33, $2a, $22, $15, $0c, $06, $f0, $dd, $db, $dc, $e4, $ed, $e8
116bd     E0 D1 CD D1 
116c1     D0 D5 DF EB 
116c5     FB 05 0A 06 
116c9     07 0F 19 26 | 	byte	$e0, $d1, $cd, $d1, $d0, $d5, $df, $eb, $fb, $05, $0a, $06, $07, $0f, $19, $26
116cd     2D 2E 2C 21 
116d1     1C 10 07 0D 
116d5     13 19 1C 1C 
116d9     16 0A 03 FC | 	byte	$2d, $2e, $2c, $21, $1c, $10, $07, $0d, $13, $19, $1c, $1c, $16, $0a, $03, $fc
116dd     FF 0E 15 1A 
116e1     1D 14 0D 05 
116e5     FC F8 FB 06 
116e9     19 26 2E 30 | 	byte	$ff, $0e, $15, $1a, $1d, $14, $0d, $05, $fc, $f8, $fb, $06, $19, $26, $2e, $30
116ed     20 16 11 12 
116f1     20 29 2D 2A 
116f5     1C 13 10 00 
116f9     EE DE D5 D5 | 	byte	$20, $16, $11, $12, $20, $29, $2d, $2a, $1c, $13, $10, $00, $ee, $de, $d5, $d5
116fd     DE E5 E8 E0 
11701     D5 D0 D1 D4 
11705     D4 DF EE FE 
11709     0A 0C 0D 0E | 	byte	$de, $e5, $e8, $e0, $d5, $d0, $d1, $d4, $d4, $df, $ee, $fe, $0a, $0c, $0d, $0e
1170d     14 20 27 32 
11711     35 31 2C 20 
11715     15 0C 0C 11 
11719     12 14 12 0C | 	byte	$14, $20, $27, $32, $35, $31, $2c, $20, $15, $0c, $0c, $11, $12, $14, $12, $0c
1171d     03 F4 EC F3 
11721     F9 01 0C 0F 
11725     0C 06 00 F6 
11729     F2 F7 06 13 | 	byte	$03, $f4, $ec, $f3, $f9, $01, $0c, $0f, $0c, $06, $00, $f6, $f2, $f7, $06, $13
1172d     1F 30 34 2C 
11731     20 15 1A 23 
11735     2E 36 2D 25 
11739     1E 16 08 F5 | 	byte	$1f, $30, $34, $2c, $20, $15, $1a, $23, $2e, $36, $2d, $25, $1e, $16, $08, $f5
1173d     E7 DC D8 E3 
11741     E8 EB E3 DA 
11745     D6 D4 D2 D7 
11749     DD EB F7 03 | 	byte	$e7, $dc, $d8, $e3, $e8, $eb, $e3, $da, $d6, $d4, $d2, $d7, $dd, $eb, $f7, $03
1174d     0B 07 0B 10 
11751     16 26 2E 33 
11755     32 2D 22 14 
11759     10 10 0F 14 | 	byte	$0b, $07, $0b, $10, $16, $26, $2e, $33, $32, $2d, $22, $14, $10, $10, $0f, $14
1175d     14 13 10 08 
11761     FA F4 F4 F7 
11765     03 0F 12 10 
11769     0A 04 F8 F1 | 	byte	$14, $13, $10, $08, $fa, $f4, $f4, $f7, $03, $0f, $12, $10, $0a, $04, $f8, $f1
1176d     F6 FD 09 1B 
11771     2B 32 2C 20 
11775     14 10 1A 2B 
11779     31 2D 25 20 | 	byte	$f6, $fd, $09, $1b, $2b, $32, $2c, $20, $14, $10, $1a, $2b, $31, $2d, $25, $20
1177d     18 0A 00 E8 
11781     D9 D4 DE E7 
11785     E6 E2 E0 D5 
11789     D4 D1 D6 DC | 	byte	$18, $0a, $00, $e8, $d9, $d4, $de, $e7, $e6, $e2, $e0, $d5, $d4, $d1, $d6, $dc
1178d     EA FA 06 07 
11791     0D 0E 0E 19 
11795     27 2D 35 37 
11799     34 24 18 16 | 	byte	$ea, $fa, $06, $07, $0d, $0e, $0e, $19, $27, $2d, $35, $37, $34, $24, $18, $16
1179d     11 14 19 1A 
117a1     1D 16 0C 04 
117a5     F9 F8 F8 FF 
117a9     0A 10 10 0C | 	byte	$11, $14, $19, $1a, $1d, $16, $0c, $04, $f9, $f8, $f8, $ff, $0a, $10, $10, $0c
117ad     00 F5 F0 F2 
117b1     F6 FF 0F 23 
117b5     2D 28 20 10 
117b9     0D 18 26 32 | 	byte	$00, $f5, $f0, $f2, $f6, $ff, $0f, $23, $2d, $28, $20, $10, $0d, $18, $26, $32
117bd     2F 2B 24 1C 
117c1     14 01 F2 E1 
117c5     D9 E0 E5 E9 
117c9     E5 E0 D8 CF | 	byte	$2f, $2b, $24, $1c, $14, $01, $f2, $e1, $d9, $e0, $e5, $e9, $e5, $e0, $d8, $cf
117cd     CE D3 DA E3 
117d1     EF FE FF 0B 
117d5     0B 0D 13 1F 
117d9     27 32 37 33 | 	byte	$ce, $d3, $da, $e3, $ef, $fe, $ff, $0b, $0b, $0d, $13, $1f, $27, $32, $37, $33
117dd     26 19 0D 0A 
117e1     0C 11 17 17 
117e5     14 0D 08 01 
117e9     F8 FB 06 0D | 	byte	$26, $19, $0d, $0a, $0c, $11, $17, $17, $14, $0d, $08, $01, $f8, $fb, $06, $0d
117ed     17 20 19 10 
117f1     02 FE FD FD 
117f5     03 17 27 2D 
117f9     30 24 12 09 | 	byte	$17, $20, $19, $10, $02, $fe, $fd, $fd, $03, $17, $27, $2d, $30, $24, $12, $09
117fd     12 22 2C 2E 
11801     29 20 19 16 
11805     05 F0 E0 D7 
11809     D7 E1 E3 E4 | 	byte	$12, $22, $2c, $2e, $29, $20, $19, $16, $05, $f0, $e0, $d7, $d7, $e1, $e3, $e4
1180d     D9 D3 CB CB 
11811     CD D4 E3 EF 
11815     FB 08 0D 11 
11819     13 1E 25 2C | 	byte	$d9, $d3, $cb, $cb, $cd, $d4, $e3, $ef, $fb, $08, $0d, $11, $13, $1e, $25, $2c
1181d     3D 40 40 00 
11821     00 FF FF FE 
11825     FF FF 00 00 
11829     00 01 01 03 | 	byte	$3d, $40, $40, $00, $00, $ff, $ff, $fe, $ff, $ff, $00, $00, $00, $01, $01, $03
1182d     03 05 05 05 
11831     06 09 09 07 
11835     05 02 03 06 
11839     0B 11 13 10 | 	byte	$03, $05, $05, $05, $06, $09, $09, $07, $05, $02, $03, $06, $0b, $11, $13, $10
1183d     0E 06 FD F4 
11841     F3 F0 F0 F2 
11845     FA FF FF FE 
11849     FF FF FF FF | 	byte	$0e, $06, $fd, $f4, $f3, $f0, $f0, $f2, $fa, $ff, $ff, $fe, $ff, $ff, $ff, $ff
1184d     FE F6 F0 F0 
11851     EB EC E4 DE 
11855     DD D5 D4 C9 
11859     CB C9 D4 DD | 	byte	$fe, $f6, $f0, $f0, $eb, $ec, $e4, $de, $dd, $d5, $d4, $c9, $cb, $c9, $d4, $dd
1185d     E1 DD DC DD 
11861     E0 F5 07 17 
11865     19 18 16 FC 
11869     EF E2 E5 E4 | 	byte	$e1, $dd, $dc, $dd, $e0, $f5, $07, $17, $19, $18, $16, $fc, $ef, $e2, $e5, $e4
1186d     EE F9 FC FE 
11871     09 F6 F2 E1 
11875     CE C3 BE BD 
11879     C2 CC DA EC | 	byte	$ee, $f9, $fc, $fe, $09, $f6, $f2, $e1, $ce, $c3, $be, $bd, $c2, $cc, $da, $ec
1187d     FD 00 18 1E 
11881     2B 25 1B 0C 
11885     03 FF FE F4 
11889     F0 E2 E0 E6 | 	byte	$fd, $00, $18, $1e, $2b, $25, $1b, $0c, $03, $ff, $fe, $f4, $f0, $e2, $e0, $e6
1188d     F2 01 12 14 
11891     14 02 EC D1 
11895     CC CC CA CA 
11899     CB CC CF C5 | 	byte	$f2, $01, $12, $14, $14, $02, $ec, $d1, $cc, $cc, $ca, $ca, $cb, $cc, $cf, $c5
1189d     BD B7 B8 BD 
118a1     C8 D1 E3 EC 
118a5     F7 02 08 07 
118a9     07 02 F9 FD | 	byte	$bd, $b7, $b8, $bd, $c8, $d1, $e3, $ec, $f7, $02, $08, $07, $07, $02, $f9, $fd
118ad     FB FE 09 17 
118b1     2B 32 38 39 
118b5     36 35 36 34 
118b9     31 2C 19 FF | 	byte	$fb, $fe, $09, $17, $2b, $32, $38, $39, $36, $35, $36, $34, $31, $2c, $19, $ff
118bd     EC E2 D4 DC 
118c1     E0 E7 F0 F8 
118c5     01 F9 F7 F2 
118c9     EB E9 E9 EC | 	byte	$ec, $e2, $d4, $dc, $e0, $e7, $f0, $f8, $01, $f9, $f7, $f2, $eb, $e9, $e9, $ec
118cd     F1 FB FB 05 
118d1     00 F0 E2 D5 
118d5     D7 CD CE C6 
118d9     C9 CA D4 D8 | 	byte	$f1, $fb, $fb, $05, $00, $f0, $e2, $d5, $d7, $cd, $ce, $c6, $c9, $ca, $d4, $d8
118dd     D8 C7 BD B8 
118e1     BE D2 E8 FE 
118e5     04 08 07 0C 
118e9     16 24 29 2F | 	byte	$d8, $c7, $bd, $b8, $be, $d2, $e8, $fe, $04, $08, $07, $0c, $16, $24, $29, $2f
118ed     2E 29 23 0E 
118f1     FE E4 DF CB 
118f5     BA B9 B4 B8 
118f9     C3 D2 DE E7 | 	byte	$2e, $29, $23, $0e, $fe, $e4, $df, $cb, $ba, $b9, $b4, $b8, $c3, $d2, $de, $e7
118fd     ED F2 F8 01 
11901     07 07 0F 14 
11905     1B 22 21 11 
11909     0F FF 01 0B | 	byte	$ed, $f2, $f8, $01, $07, $07, $0f, $14, $1b, $22, $21, $11, $0f, $ff, $01, $0b
1190d     0F 14 12 FD 
11911     DC C9 AF 9F 
11915     9E 9E A5 B4 
11919     C0 C4 CA CA | 	byte	$0f, $14, $12, $fd, $dc, $c9, $af, $9f, $9e, $9e, $a5, $b4, $c0, $c4, $ca, $ca
1191d     D4 D9 E2 EF 
11921     F4 FB 00 06 
11925     0B 0A 09 04 
11929     00 FE F6 F5 | 	byte	$d4, $d9, $e2, $ef, $f4, $fb, $00, $06, $0b, $0a, $09, $04, $00, $fe, $f6, $f5
1192d     F3 FD 05 17 
11931     28 29 28 23 
11935     19 20 29 37 
11939     35 36 21 0F | 	byte	$f3, $fd, $05, $17, $28, $29, $28, $23, $19, $20, $29, $37, $35, $36, $21, $0f
1193d     FD 01 01 0D 
11941     1D 1D 24 16 
11945     0D FA F3 DC 
11949     C3 BA B7 BE | 	byte	$fd, $01, $01, $0d, $1d, $1d, $24, $16, $0d, $fa, $f3, $dc, $c3, $ba, $b7, $be
1194d     CD DF E8 ED 
11951     E7 EA ED ED 
11955     EE ED E3 DB 
11959     DD DC D9 D9 | 	byte	$cd, $df, $e8, $ed, $e7, $ea, $ed, $ed, $ee, $ed, $e3, $db, $dd, $dc, $d9, $d9
1195d     D7 C7 C4 C5 
11961     C7 DB E6 EA 
11965     E6 E5 E4 EB 
11969     F1 FD 0A 1C | 	byte	$d7, $c7, $c4, $c5, $c7, $db, $e6, $ea, $e6, $e5, $e4, $eb, $f1, $fd, $0a, $1c
1196d     2C 2F 2E 2D 
11971     21 09 F9 E4 
11975     DE DF E4 E6 
11979     EE EE EE EE | 	byte	$2c, $2f, $2e, $2d, $21, $09, $f9, $e4, $de, $df, $e4, $e6, $ee, $ee, $ee, $ee
1197d     E4 E4 D9 D8 
11981     D6 D4 DC F1 
11985     FC 12 1D 27 
11989     2A 29 36 3B | 	byte	$e4, $e4, $d9, $d8, $d6, $d4, $dc, $f1, $fc, $12, $1d, $27, $2a, $29, $36, $3b
1198d     37 30 08 E6 
11991     C3 B0 A0 9F 
11995     A3 AA B8 C5 
11999     BC C9 C6 C7 | 	byte	$37, $30, $08, $e6, $c3, $b0, $a0, $9f, $a3, $aa, $b8, $c5, $bc, $c9, $c6, $c7
1199d     C7 C6 C9 D4 
119a1     E3 01 15 27 
119a5     35 38 35 30 
119a9     21 1E 0B 05 | 	byte	$c7, $c6, $c9, $d4, $e3, $01, $15, $27, $35, $38, $35, $30, $21, $1e, $0b, $05
119ad     00 03 05 0A 
119b1     15 08 FD F3 
119b5     F3 F8 01 0C 
119b9     07 05 00 06 | 	byte	$00, $03, $05, $0a, $15, $08, $fd, $f3, $f3, $f8, $01, $0c, $07, $05, $00, $06
119bd     0C 24 3A 41 
119c1     4C 4A 38 2A 
119c5     17 F8 E3 CE 
119c9     BD B6 BA C5 | 	byte	$0c, $24, $3a, $41, $4c, $4a, $38, $2a, $17, $f8, $e3, $ce, $bd, $b6, $ba, $c5
119cd     D5 D0 D0 CF 
119d1     CC CB CE CB 
119d5     C4 C7 CC DF 
119d9     F0 02 10 10 | 	byte	$d5, $d0, $d0, $cf, $cc, $cb, $ce, $cb, $c4, $c7, $cc, $df, $f0, $02, $10, $10
119dd     0A 04 FF FE 
119e1     FE 01 00 EF 
119e5     EC E7 E6 E4 
119e9     E6 F2 FD 03 | 	byte	$0a, $04, $ff, $fe, $fe, $01, $00, $ef, $ec, $e7, $e6, $e4, $e6, $f2, $fd, $03
119ed     FD FD F3 ED 
119f1     E7 E2 DB E6 
119f5     F3 FC 11 19 
119f9     17 16 0C 03 | 	byte	$fd, $fd, $f3, $ed, $e7, $e2, $db, $e6, $f3, $fc, $11, $19, $17, $16, $0c, $03
119fd     FB F3 DC CC 
11a01     C4 C7 CA E1 
11a05     ED 03 08 0B 
11a09     0D 0F 14 1B | 	byte	$fb, $f3, $dc, $cc, $c4, $c7, $ca, $e1, $ed, $03, $08, $0b, $0d, $0f, $14, $1b
11a0d     18 0C FD F0 
11a11     E6 E2 E4 EE 
11a15     F2 F8 EC E7 
11a19     D6 D2 C3 B5 | 	byte	$18, $0c, $fd, $f0, $e6, $e2, $e4, $ee, $f2, $f8, $ec, $e7, $d6, $d2, $c3, $b5
11a1d     A8 9E AD BD 
11a21     D8 ED FA 0D 
11a25     15 1B 2A 27 
11a29     24 21 1A 1A | 	byte	$a8, $9e, $ad, $bd, $d8, $ed, $fa, $0d, $15, $1b, $2a, $27, $24, $21, $1a, $1a
11a2d     1A 21 23 20 
11a31     1B 12 03 F2 
11a35     F1 E8 EA E3 
11a39     E3 E4 F4 02 | 	byte	$1a, $21, $23, $20, $1b, $12, $03, $f2, $f1, $e8, $ea, $e3, $e3, $e4, $f4, $02
11a3d     1E 33 4C 53 
11a41     51 51 4A 41 
11a45     3C 1D 09 FF 
11a49     F2 F0 EE E9 | 	byte	$1e, $33, $4c, $53, $51, $51, $4a, $41, $3c, $1d, $09, $ff, $f2, $f0, $ee, $e9
11a4d     DF CF C8 BB 
11a51     BF A6 A3 9D 
11a55     94 9C A5 B5 
11a59     CB DD E9 FB | 	byte	$df, $cf, $c8, $bb, $bf, $a6, $a3, $9d, $94, $9c, $a5, $b5, $cb, $dd, $e9, $fb
11a5d     FC FE 08 0E 
11a61     18 0F 0F 08 
11a65     01 03 03 08 
11a69     09 0A 02 ED | 	byte	$fc, $fe, $08, $0e, $18, $0f, $0f, $08, $01, $03, $03, $08, $09, $0a, $02, $ed
11a6d     DD D4 C7 C2 
11a71     BC BF C9 D6 
11a75     ED FA 0D 1B 
11a79     2C 3A 3A 39 | 	byte	$dd, $d4, $c7, $c2, $bc, $bf, $c9, $d6, $ed, $fa, $0d, $1b, $2c, $3a, $3a, $39
11a7d     36 1F 0E FC 
11a81     EE EC F3 FC 
11a85     09 0B 04 F6 
11a89     F4 F2 F3 DF | 	byte	$36, $1f, $0e, $fc, $ee, $ec, $f3, $fc, $09, $0b, $04, $f6, $f4, $f2, $f3, $df
11a8d     CA B9 B7 B5 
11a91     C5 D2 EE FD 
11a95     14 08 09 09 
11a99     FE F3 E6 DA | 	byte	$ca, $b9, $b7, $b5, $c5, $d2, $ee, $fd, $14, $08, $09, $09, $fe, $f3, $e6, $da
11a9d     D7 D6 CE CF 
11aa1     DA D3 D7 E3 
11aa5     EB F3 02 04 
11aa9     06 06 07 12 | 	byte	$d7, $d6, $ce, $cf, $da, $d3, $d7, $e3, $eb, $f3, $02, $04, $06, $06, $07, $12
11aad     1F 32 47 49 
11ab1     4F 44 3C 2F 
11ab5     21 14 FE F4 
11ab9     F2 F5 01 07 | 	byte	$1f, $32, $47, $49, $4f, $44, $3c, $2f, $21, $14, $fe, $f4, $f2, $f5, $01, $07
11abd     0E 18 26 18 
11ac1     10 0A 04 FB 
11ac5     F5 F5 F3 F6 
11ac9     00 08 06 FB | 	byte	$0e, $18, $26, $18, $10, $0a, $04, $fb, $f5, $f5, $f3, $f6, $00, $08, $06, $fb
11acd     F5 EB E2 DA 
11ad1     D5 C7 C2 AA 
11ad5     A0 96 98 9B 
11ad9     AC BB CE E0 | 	byte	$f5, $eb, $e2, $da, $d5, $c7, $c2, $aa, $a0, $96, $98, $9b, $ac, $bb, $ce, $e0
11add     F0 FC 0F 1A 
11ae1     17 1E 27 2D 
11ae5     3C 3A 45 46 
11ae9     46 2D 1C 00 | 	byte	$f0, $fc, $0f, $1a, $17, $1e, $27, $2d, $3c, $3a, $45, $46, $46, $2d, $1c, $00
11aed     F6 E9 E2 DA 
11af1     D5 CA C6 CC 
11af5     CE CF D4 DA 
11af9     E1 E7 F0 F0 | 	byte	$f6, $e9, $e2, $da, $d5, $ca, $c6, $cc, $ce, $cf, $d4, $da, $e1, $e7, $f0, $f0
11afd     F2 F0 EE E9 
11b01     F7 F7 06 18 
11b05     13 1F 1C 1B 
11b09     16 0D EC CD | 	byte	$f2, $f0, $ee, $e9, $f7, $f7, $06, $18, $13, $1f, $1c, $1b, $16, $0d, $ec, $cd
11b0d     B1 9F A2 A5 
11b11     B5 D7 EE F3 
11b15     FD FD 03 11 
11b19     15 1C 1B 1B | 	byte	$b1, $9f, $a2, $a5, $b5, $d7, $ee, $f3, $fd, $fd, $03, $11, $15, $1c, $1b, $1b
11b1d     1A 17 16 09 
11b21     04 05 06 09 
11b25     0E 0F FD F4 
11b29     EA DA DC DD | 	byte	$1a, $17, $16, $09, $04, $05, $06, $09, $0e, $0f, $fd, $f4, $ea, $da, $dc, $dd
11b2d     E7 ED FD 05 
11b31     08 0A 1A 23 
11b35     21 21 1F 1C 
11b39     1C 26 2A 33 | 	byte	$e7, $ed, $fd, $05, $08, $0a, $1a, $23, $21, $21, $1f, $1c, $1c, $26, $2a, $33
11b3d     3B 33 22 07 
11b41     F2 E2 D4 CC 
11b45     CF D7 E6 FA 
11b49     08 0A 06 05 | 	byte	$3b, $33, $22, $07, $f2, $e2, $d4, $cc, $cf, $d7, $e6, $fa, $08, $0a, $06, $05
11b4d     05 0A 0B 06 
11b51     FF F3 E0 C9 
11b55     B9 BA BA CA 
11b59     D9 EA ED E9 | 	byte	$05, $0a, $0b, $06, $ff, $f3, $e0, $c9, $b9, $ba, $ba, $ca, $d9, $ea, $ed, $e9
11b5d     E6 F0 ED F4 
11b61     ED ED EE F0 
11b65     FB 00 07 17 
11b69     08 04 FE F9 | 	byte	$e6, $f0, $ed, $f4, $ed, $ed, $ee, $f0, $fb, $00, $07, $17, $08, $04, $fe, $f9
11b6d     F4 F7 F6 F7 
11b71     F9 FE FE 04 
11b75     F8 EF E6 DD 
11b79     D7 D7 D8 DB | 	byte	$f4, $f7, $f6, $f7, $f9, $fe, $fe, $04, $f8, $ef, $e6, $dd, $d7, $d7, $d8, $db
11b7d     DD E5 E5 ED 
11b81     FE 0A 1C 2E 
11b85     2A 2F 2D 2A 
11b89     22 09 F9 F0 | 	byte	$dd, $e5, $e5, $ed, $fe, $0a, $1c, $2e, $2a, $2f, $2d, $2a, $22, $09, $f9, $f0
11b8d     E8 E4 EF F7 
11b91     EB F0 E6 D4 
11b95     D2 D3 D3 D4 
11b99     DE DF E0 EC | 	byte	$e8, $e4, $ef, $f7, $eb, $f0, $e6, $d4, $d2, $d3, $d3, $d4, $de, $df, $e0, $ec
11b9d     F5 FF 02 01 
11ba1     00 03 05 07 
11ba5     07 0A 05 FE 
11ba9     FE F4 F3 E8 | 	byte	$f5, $ff, $02, $01, $00, $03, $05, $07, $07, $0a, $05, $fe, $fe, $f4, $f3, $e8
11bad     EA E9 E9 EE 
11bb1     F7 0A 1A 28 
11bb5     39 44 49 58 
11bb9     57 58 50 46 | 	byte	$ea, $e9, $e9, $ee, $f7, $0a, $1a, $28, $39, $44, $49, $58, $57, $58, $50, $46
11bbd     32 16 02 FC 
11bc1     EF F5 F5 FF 
11bc5     04 02 02 01 
11bc9     F0 E6 DB D7 | 	byte	$32, $16, $02, $fc, $ef, $f5, $f5, $ff, $04, $02, $02, $01, $f0, $e6, $db, $d7
11bcd     D2 D4 D3 D0 
11bd1     CF CC C5 C6 
11bd5     BB C3 CC D0 
11bd9     DA E2 E3 EE | 	byte	$d2, $d4, $d3, $d0, $cf, $cc, $c5, $c6, $bb, $c3, $cc, $d0, $da, $e2, $e3, $ee
11bdd     FD 00 0C 0F 
11be1     09 02 F9 F1 
11be5     EC F0 F0 F2 
11be9     FC 04 12 1F | 	byte	$fd, $00, $0c, $0f, $09, $02, $f9, $f1, $ec, $f0, $f0, $f2, $fc, $04, $12, $1f
11bed     31 32 30 2D 
11bf1     21 18 06 FD 
11bf5     F9 F4 F5 FF 
11bf9     03 02 FC F1 | 	byte	$31, $32, $30, $2d, $21, $18, $06, $fd, $f9, $f4, $f5, $ff, $03, $02, $fc, $f1
11bfd     DD D5 C8 C1 
11c01     C6 C7 CF D8 
11c05     DD EB F4 F8 
11c09     FF FE FD FB | 	byte	$dd, $d5, $c8, $c1, $c6, $c7, $cf, $d8, $dd, $eb, $f4, $f8, $ff, $fe, $fd, $fb
11c0d     F4 F2 E8 E9 
11c11     E2 DB DB DD 
11c15     ED EF F9 F6 
11c19     F5 F5 F6 00 | 	byte	$f4, $f2, $e8, $e9, $e2, $db, $db, $dd, $ed, $ef, $f9, $f6, $f5, $f5, $f6, $00
11c1d     03 0A 14 1D 
11c21     25 2A 34 35 
11c25     25 23 15 03 
11c29     00 FC FB FE | 	byte	$03, $0a, $14, $1d, $25, $2a, $34, $35, $25, $23, $15, $03, $00, $fc, $fb, $fe
11c2d     09 16 1D 1A 
11c31     18 18 1A 25 
11c35     29 2A 29 28 
11c39     17 12 02 EF | 	byte	$09, $16, $1d, $1a, $18, $18, $1a, $25, $29, $2a, $29, $28, $17, $12, $02, $ef
11c3d     EC E5 E0 E7 
11c41     E8 ED F1 F8 
11c45     FF 04 00 F8 
11c49     F2 EC EC DF | 	byte	$ec, $e5, $e0, $e7, $e8, $ed, $f1, $f8, $ff, $04, $00, $f8, $f2, $ec, $ec, $df
11c4d     D7 D3 C9 CA 
11c51     C7 C6 C9 D9 
11c55     DE F1 FE 02 
11c59     08 07 07 06 | 	byte	$d7, $d3, $c9, $ca, $c7, $c6, $c9, $d9, $de, $f1, $fe, $02, $08, $07, $07, $06
11c5d     07 0C 1B 1D 
11c61     1F 20 1B 1B 
11c65     06 EC E3 DE 
11c69     E4 EB F5 FD | 	byte	$07, $0c, $1b, $1d, $1f, $20, $1b, $1b, $06, $ec, $e3, $de, $e4, $eb, $f5, $fd
11c6d     02 00 03 05 
11c71     03 01 FE F4 
11c75     F5 F2 F0 F0 
11c79     E8 E3 DE D8 | 	byte	$02, $00, $03, $05, $03, $01, $fe, $f4, $f5, $f2, $f0, $f0, $e8, $e3, $de, $d8
11c7d     D2 D0 D3 D3 
11c81     D8 D7 E2 E3 
11c85     EE ED F4 03 
11c89     19 28 2B 2D | 	byte	$d2, $d0, $d3, $d3, $d8, $d7, $e2, $e3, $ee, $ed, $f4, $03, $19, $28, $2b, $2d
11c8d     28 17 0A F4 
11c91     E2 E0 E0 EC 
11c95     FA 08 15 13 
11c99     27 23 19 13 | 	byte	$28, $17, $0a, $f4, $e2, $e0, $e0, $ec, $fa, $08, $15, $13, $27, $23, $19, $13
11c9d     0D FF 01 FE 
11ca1     FB FA F7 F5 
11ca5     E8 E9 E6 E3 
11ca9     E3 E4 EB F1 | 	byte	$0d, $ff, $01, $fe, $fb, $fa, $f7, $f5, $e8, $e9, $e6, $e3, $e3, $e4, $eb, $f1
11cad     FB 00 06 0B 
11cb1     11 1C 31 46 
11cb5     4C 48 3D 29 
11cb9     17 F8 EA E2 | 	byte	$fb, $00, $06, $0b, $11, $1c, $31, $46, $4c, $48, $3d, $29, $17, $f8, $ea, $e2
11cbd     E4 EE FE 0F 
11cc1     18 23 21 23 
11cc5     24 10 0D 08 
11cc9     02 FE 01 00 | 	byte	$e4, $ee, $fe, $0f, $18, $23, $21, $23, $24, $10, $0d, $08, $02, $fe, $01, $00
11ccd     00 00 F0 E6 
11cd1     D8 CB C4 C0 
11cd5     C2 C7 CB CF 
11cd9     D9 D9 DE ED | 	byte	$00, $00, $f0, $e6, $d8, $cb, $c4, $c0, $c2, $c7, $cb, $cf, $d9, $d9, $de, $ed
11cdd     FC 00 07 07 
11ce1     07 F7 F4 DB 
11ce5     CB CF D7 E6 
11ce9     03 12 1D 27 | 	byte	$fc, $00, $07, $07, $07, $f7, $f4, $db, $cb, $cf, $d7, $e6, $03, $12, $1d, $27
11ced     25 20 1F 0D 
11cf1     08 01 03 06 
11cf5     10 0D 0B 00 
11cf9     F8 EA E3 D5 | 	byte	$25, $20, $1f, $0d, $08, $01, $03, $06, $10, $0d, $0b, $00, $f8, $ea, $e3, $d5
11cfd     D3 D3 D0 DA 
11d01     E3 F5 0C 02 
11d05     02 03 0B 19 
11d09     1C 18 18 06 | 	byte	$d3, $d3, $d0, $da, $e3, $f5, $0c, $02, $02, $03, $0b, $19, $1c, $18, $18, $06
11d0d     FC E0 D0 CD 
11d11     C8 CC D8 E3 
11d15     E9 F2 F8 F6 
11d19     FE FA F5 F6 | 	byte	$fc, $e0, $d0, $cd, $c8, $cc, $d8, $e3, $e9, $f2, $f8, $f6, $fe, $fa, $f5, $f6
11d1d     F9 00 09 0F 
11d21     18 18 18 16 
11d25     0C 06 01 03 
11d29     08 17 19 22 | 	byte	$f9, $00, $09, $0f, $18, $18, $18, $16, $0c, $06, $01, $03, $08, $17, $19, $22
11d2d     1B 1C 12 1E 
11d31     2D 3A 4E 56 
11d35     53 43 3C 1F 
11d39     02 F0 E6 E2 | 	byte	$1b, $1c, $12, $1e, $2d, $3a, $4e, $56, $53, $43, $3c, $1f, $02, $f0, $e6, $e2
11d3d     E0 F0 F4 03 
11d41     08 12 0D 08 
11d45     FF F7 F2 E1 
11d49     DA D5 D3 CE | 	byte	$e0, $f0, $f4, $03, $08, $12, $0d, $08, $ff, $f7, $f2, $e1, $da, $d5, $d3, $ce
11d4d     CE CB C6 C0 
11d51     BB BD C2 D1 
11d55     D5 E4 EB F3 
11d59     F2 F7 00 08 | 	byte	$ce, $cb, $c6, $c0, $bb, $bd, $c2, $d1, $d5, $e4, $eb, $f3, $f2, $f7, $00, $08
11d5d     1C 1E 27 25 
11d61     1B F7 E5 D5 
11d65     DB EC FE 15 
11d69     2E 3D 46 4B | 	byte	$1c, $1e, $27, $25, $1b, $f7, $e5, $d5, $db, $ec, $fe, $15, $2e, $3d, $46, $4b
11d6d     4A 38 2E 1E 
11d71     11 04 00 F4 
11d75     EC E8 E6 DA 
11d79     D6 C7 C2 B8 | 	byte	$4a, $38, $2e, $1e, $11, $04, $00, $f4, $ec, $e8, $e6, $da, $d6, $c7, $c2, $b8
11d7d     AA AF B1 C2 
11d81     D1 DB D3 DC 
11d85     EB EF 04 12 
11d89     17 1D 1F 0D | 	byte	$aa, $af, $b1, $c2, $d1, $db, $d3, $dc, $eb, $ef, $04, $12, $17, $1d, $1f, $0d
11d8d     03 F9 F6 F7 
11d91     F7 06 0B 14 
11d95     19 18 0E FF 
11d99     FC FB FD 04 | 	byte	$03, $f9, $f6, $f7, $f7, $06, $0b, $14, $19, $18, $0e, $ff, $fc, $fb, $fd, $04
11d9d     0A 14 18 1A 
11da1     21 1F 12 07 
11da5     02 01 FE 00 
11da9     0B 16 21 24 | 	byte	$0a, $14, $18, $1a, $21, $1f, $12, $07, $02, $01, $fe, $00, $0b, $16, $21, $24
11dad     21 20 20 2A 
11db1     29 29 1E 10 
11db5     07 EB D6 CE 
11db9     BF C1 C2 D3 | 	byte	$21, $20, $20, $2a, $29, $29, $1e, $10, $07, $eb, $d6, $ce, $bf, $c1, $c2, $d3
11dbd     E7 FE 14 2A 
11dc1     2F 2E 2E 2E 
11dc5     26 1F 16 0E 
11dc9     05 00 FA EE | 	byte	$e7, $fe, $14, $2a, $2f, $2e, $2e, $2e, $26, $1f, $16, $0e, $05, $00, $fa, $ee
11dcd     DE D5 CD CC 
11dd1     CF E0 E5 EF 
11dd5     FD 02 FC F3 
11dd9     F3 FB 00 06 | 	byte	$de, $d5, $cd, $cc, $cf, $e0, $e5, $ef, $fd, $02, $fc, $f3, $f3, $fb, $00, $06
11ddd     05 06 05 F4 
11de1     E6 E2 D7 DC 
11de5     E7 ED F7 02 
11de9     07 0E 0D 08 | 	byte	$05, $06, $05, $f4, $e6, $e2, $d7, $dc, $e7, $ed, $f7, $02, $07, $0e, $0d, $08
11ded     06 05 F9 FB 
11df1     F1 ED ED ED 
11df5     EE F3 F3 F2 
11df9     E7 D9 D7 D1 | 	byte	$06, $05, $f9, $fb, $f1, $ed, $ed, $ed, $ee, $f3, $f3, $f2, $e7, $d9, $d7, $d1
11dfd     D7 E8 F2 F6 
11e01     E8 E4 E6 00 
11e05     0F 21 36 38 
11e09     3F 32 1D 14 | 	byte	$d7, $e8, $f2, $f6, $e8, $e4, $e6, $00, $0f, $21, $36, $38, $3f, $32, $1d, $14
11e0d     04 FC FD FA 
11e11     FF 06 05 15 
11e15     0C 05 06 01 
11e19     00 FE F3 F2 | 	byte	$04, $fc, $fd, $fa, $ff, $06, $05, $15, $0c, $05, $06, $01, $00, $fe, $f3, $f2
11e1d     E0 DE DF DF 
11e21     E0 E3 E5 E3 
11e25     E6 EB F7 0E 
11e29     20 30 33 34 | 	byte	$e0, $de, $df, $df, $e0, $e3, $e5, $e3, $e6, $eb, $f7, $0e, $20, $30, $33, $34
11e2d     37 47 4B 51 
11e31     44 3E 2E 0C 
11e35     FA DE D0 C9 
11e39     D1 E2 F6 1A | 	byte	$37, $47, $4b, $51, $44, $3e, $2e, $0c, $fa, $de, $d0, $c9, $d1, $e2, $f6, $1a
11e3d     2E 43 48 3E 
11e41     34 24 1D 10 
11e45     09 01 F9 F0 
11e49     F2 EB EC EC | 	byte	$2e, $43, $48, $3e, $34, $24, $1d, $10, $09, $01, $f9, $f0, $f2, $eb, $ec, $ec
11e4d     E4 D6 D6 C4 
11e51     BB BD BE BD 
11e55     BC B9 BC CD 
11e59     DA E8 F4 F8 | 	byte	$e4, $d6, $d6, $c4, $bb, $bd, $be, $bd, $bc, $b9, $bc, $cd, $da, $e8, $f4, $f8
11e5d     FE FB F9 F6 
11e61     F9 FE 08 16 
11e65     22 2C 39 37 
11e69     35 24 15 07 | 	byte	$fe, $fb, $f9, $f6, $f9, $fe, $08, $16, $22, $2c, $39, $37, $35, $24, $15, $07
11e6d     04 02 02 05 
11e71     07 09 07 09 
11e75     07 F8 EA D8 
11e79     D1 C9 D0 DB | 	byte	$04, $02, $02, $05, $07, $09, $07, $09, $07, $f8, $ea, $d8, $d1, $c9, $d0, $db
11e7d     ED EE EE EE 
11e81     F3 FC 07 0F 
11e85     0F 0A 01 ED 
11e89     E1 D5 D7 D7 | 	byte	$ed, $ee, $ee, $ee, $f3, $fc, $07, $0f, $0f, $0a, $01, $ed, $e1, $d5, $d7, $d7
11e8d     D9 E1 EA F2 
11e91     05 0D 13 14 
11e95     16 17 1A 1C 
11e99     21 1B 1A 10 | 	byte	$d9, $e1, $ea, $f2, $05, $0d, $13, $14, $16, $17, $1a, $1c, $21, $1b, $1a, $10
11e9d     02 00 F2 E8 
11ea1     E4 E5 EA F9 
11ea5     0D 24 42 4D 
11ea9     50 50 3E 34 | 	byte	$02, $00, $f2, $e8, $e4, $e5, $ea, $f9, $0d, $24, $42, $4d, $50, $50, $3e, $34
11ead     31 2C 2D 22 
11eb1     15 02 F1 E8 
11eb5     E4 E4 E5 ED 
11eb9     F7 FF 09 0E | 	byte	$31, $2c, $2d, $22, $15, $02, $f1, $e8, $e4, $e4, $e5, $ed, $f7, $ff, $09, $0e
11ebd     0A 00 FA F9 
11ec1     F9 F7 FF F8 
11ec5     F9 FA F5 FB 
11ec9     FF FE 00 FE | 	byte	$0a, $00, $fa, $f9, $f9, $f7, $ff, $f8, $f9, $fa, $f5, $fb, $ff, $fe, $00, $fe
11ecd     F6 EC EC EC 
11ed1     E9 E4 DB CD 
11ed5     C3 BE CC E1 
11ed9     F8 0F 1B 18 | 	byte	$f6, $ec, $ec, $ec, $e9, $e4, $db, $cd, $c3, $be, $cc, $e1, $f8, $0f, $1b, $18
11edd     18 17 12 02 
11ee1     05 02 05 0F 
11ee5     1D 2A 2A 27 
11ee9     22 19 10 0F | 	byte	$18, $17, $12, $02, $05, $02, $05, $0f, $1d, $2a, $2a, $27, $22, $19, $10, $0f
11eed     FE F4 E5 CF 
11ef1     C4 B7 B4 AF 
11ef5     AF AD AD B2 
11ef9     BE D2 E4 F0 | 	byte	$fe, $f4, $e5, $cf, $c4, $b7, $b4, $af, $af, $ad, $ad, $b2, $be, $d2, $e4, $f0
11efd     FC 09 0E 15 
11f01     1F 31 3D 44 
11f05     41 27 11 07 
11f09     F1 EA E5 E5 | 	byte	$fc, $09, $0e, $15, $1f, $31, $3d, $44, $41, $27, $11, $07, $f1, $ea, $e5, $e5
11f0d     E8 FD 12 29 
11f11     33 36 35 2A 
11f15     1A 15 0E 09 
11f19     0A 07 05 05 | 	byte	$e8, $fd, $12, $29, $33, $36, $35, $2a, $1a, $15, $0e, $09, $0a, $07, $05, $05
11f1d     06 07 06 07 
11f21     06 03 01 01 
11f25     02 02 00 FD 
11f29     FA F0 F2 F3 | 	byte	$06, $07, $06, $07, $06, $03, $01, $01, $02, $02, $00, $fd, $fa, $f0, $f2, $f3
11f2d     FD 03 05 F9 
11f31     F1 F3 F6 FB 
11f35     04 0A 19 23 
11f39     2E 38 34 2C | 	byte	$fd, $03, $05, $f9, $f1, $f3, $f6, $fb, $04, $0a, $19, $23, $2e, $38, $34, $2c
11f3d     1D 0F 00 FC 
11f41     FB FD 0C 11 
11f45     1C 27 27 27 
11f49     17 0A ED DA | 	byte	$1d, $0f, $00, $fc, $fb, $fd, $0c, $11, $1c, $27, $27, $27, $17, $0a, $ed, $da
11f4d     D0 CB CC C9 
11f51     C9 D0 D0 D3 
11f55     DD E8 F8 02 
11f59     FE EE E4 D9 | 	byte	$d0, $cb, $cc, $c9, $c9, $d0, $d0, $d3, $dd, $e8, $f8, $02, $fe, $ee, $e4, $d9
11f5d     D1 D3 D8 DE 
11f61     EC F9 05 1C 
11f65     2B 2D 33 34 
11f69     2C 22 15 0B | 	byte	$d1, $d3, $d8, $de, $ec, $f9, $05, $1c, $2b, $2d, $33, $34, $2c, $22, $15, $0b
11f6d     03 FB EE E4 
11f71     E0 CF C8 C2 
11f75     BC BE C9 DB 
11f79     EE 01 0E 20 | 	byte	$03, $fb, $ee, $e4, $e0, $cf, $c8, $c2, $bc, $be, $c9, $db, $ee, $01, $0e, $20
11f7d     24 16 16 14 
11f81     1F 27 25 1B 
11f85     15 0F 0A 0D 
11f89     0D 08 04 02 | 	byte	$24, $16, $16, $14, $1f, $27, $25, $1b, $15, $0f, $0a, $0d, $0d, $08, $04, $02
11f8d     FC FE F6 F1 
11f91     E8 E4 DB D7 
11f95     DB DC E6 EE 
11f99     F2 01 0D 14 | 	byte	$fc, $fe, $f6, $f1, $e8, $e4, $db, $d7, $db, $dc, $e6, $ee, $f2, $01, $0d, $14
11f9d     1F 2C 2F 30 
11fa1     2D 2D 2E 26 
11fa5     24 1F 0C 03 
11fa9     EE E7 EF 00 | 	byte	$1f, $2c, $2f, $30, $2d, $2d, $2e, $26, $24, $1f, $0c, $03, $ee, $e7, $ef, $00
11fad     08 0C 13 14 
11fb1     1E 1F 15 17 
11fb5     0F 15 14 16 
11fb9     1B 1C 21 21 | 	byte	$08, $0c, $13, $14, $1e, $1f, $15, $17, $0f, $15, $14, $16, $1b, $1c, $21, $21
11fbd     21 1A 1A 12 
11fc1     0D 04 FE F4 
11fc5     EB E5 E0 DF 
11fc9     D2 CA BB BD | 	byte	$21, $1a, $1a, $12, $0d, $04, $fe, $f4, $eb, $e5, $e0, $df, $d2, $ca, $bb, $bd
11fcd     BF BD C2 D2 
11fd1     D5 DC DD EA 
11fd5     FE 0C 09 0A 
11fd9     02 01 F7 F1 | 	byte	$bf, $bd, $c2, $d2, $d5, $dc, $dd, $ea, $fe, $0c, $09, $0a, $02, $01, $f7, $f1
11fdd     F3 F8 F9 04 
11fe1     11 24 39 4A 
11fe5     51 50 44 23 
11fe9     09 F6 E6 DA | 	byte	$f3, $f8, $f9, $04, $11, $24, $39, $4a, $51, $50, $44, $23, $09, $f6, $e6, $da
11fed     D5 CE CE CC 
11ff1     CE DA E0 E7 
11ff5     E5 DE D7 D6 
11ff9     D7 D9 D9 DE | 	byte	$d5, $ce, $ce, $cc, $ce, $da, $e0, $e7, $e5, $de, $d7, $d6, $d7, $d9, $d9, $de
11ffd     DB E2 F3 05 
12001     07 10 18 17 
12005     22 26 28 33 
12009     2E 29 23 23 | 	byte	$db, $e2, $f3, $05, $07, $10, $18, $17, $22, $26, $28, $33, $2e, $29, $23, $23
1200d     13 0F 09 00 
12011     F3 EA E7 E9 
12015     EA F5 09 15 
12019     27 35 37 37 | 	byte	$13, $0f, $09, $00, $f3, $ea, $e7, $e9, $ea, $f5, $09, $15, $27, $35, $37, $37
1201d     37 30 27 1F 
12021     19 17 14 16 
12025     16 11 FE FA 
12029     F9 03 F0 EB | 	byte	$37, $30, $27, $1f, $19, $17, $14, $16, $16, $11, $fe, $fa, $f9, $03, $f0, $eb
1202d     E4 DA D6 D4 
12031     DE E6 EE F9 
12035     F9 FE 07 16 
12039     1D 2B 32 30 | 	byte	$e4, $da, $d6, $d4, $de, $e6, $ee, $f9, $f9, $fe, $07, $16, $1d, $2b, $32, $30
1203d     2D 32 2C 22 
12041     1E 0F 05 00 
12045     F2 E8 E4 DB 
12049     D2 C9 CA CA | 	byte	$2d, $32, $2c, $22, $1e, $0f, $05, $00, $f2, $e8, $e4, $db, $d2, $c9, $ca, $ca
1204d     DA E3 F6 FD 
12051     EF EE EE FE 
12055     FA FD FE 00 
12059     02 02 05 0F | 	byte	$da, $e3, $f6, $fd, $ef, $ee, $ee, $fe, $fa, $fd, $fe, $00, $02, $02, $05, $0f
1205d     1A 18 25 20 
12061     1B 1B 13 0E 
12065     00 EF DD D1 
12069     C8 C5 C0 C1 | 	byte	$1a, $18, $25, $20, $1b, $1b, $13, $0e, $00, $ef, $dd, $d1, $c8, $c5, $c0, $c1
1206d     C8 CD D8 E3 
12071     FB FE 0C 01 
12075     F3 EC E8 E9 
12079     E8 E5 E3 E3 | 	byte	$c8, $cd, $d8, $e3, $fb, $fe, $0c, $01, $f3, $ec, $e8, $e9, $e8, $e5, $e3, $e3
1207d     F3 07 0B 19 
12081     2B 33 3D 48 
12085     4B 3D 35 21 
12089     1A 0D FF 01 | 	byte	$f3, $07, $0b, $19, $2b, $33, $3d, $48, $4b, $3d, $35, $21, $1a, $0d, $ff, $01
1208d     00 00 02 01 
12091     00 FE 06 06 
12095     05 03 03 FC 
12099     FB F9 FE 04 | 	byte	$00, $00, $02, $01, $00, $fe, $06, $06, $05, $03, $03, $fc, $fb, $f9, $fe, $04
1209d     06 05 03 01 
120a1     02 07 0E 0D 
120a5     05 03 03 0B 
120a9     0A 09 07 00 | 	byte	$06, $05, $03, $01, $02, $07, $0e, $0d, $05, $03, $03, $0b, $0a, $09, $07, $00
120ad     FC FA F7 F9 
120b1     09 0C 0B 0D 
120b5     0D 15 24 38 
120b9     41 44 3D 2E | 	byte	$fc, $fa, $f7, $f9, $09, $0c, $0b, $0d, $0d, $15, $24, $38, $41, $44, $3d, $2e
120bd     2B 24 18 15 
120c1     0F 09 04 03 
120c5     03 00 F8 F1 
120c9     DC C5 BB B2 | 	byte	$2b, $24, $18, $15, $0f, $09, $04, $03, $03, $00, $f8, $f1, $dc, $c5, $bb, $b2
120cd     AE A5 A1 9B 
120d1     9F BA C1 D1 
120d5     E4 F6 FF 08 
120d9     16 1B 2B 34 | 	byte	$ae, $a5, $a1, $9b, $9f, $ba, $c1, $d1, $e4, $f6, $ff, $08, $16, $1b, $2b, $34
120dd     38 37 35 25 
120e1     23 15 11 F9 
120e5     E3 DE D4 D8 
120e9     D8 D7 D9 DC | 	byte	$38, $37, $35, $25, $23, $15, $11, $f9, $e3, $de, $d4, $d8, $d8, $d7, $d9, $dc
120ed     ED FC 09 10 
120f1     14 04 FF EA 
120f5     E7 E5 ED EE 
120f9     F0 F8 FE 0D | 	byte	$ed, $fc, $09, $10, $14, $04, $ff, $ea, $e7, $e5, $ed, $ee, $f0, $f8, $fe, $0d
120fd     19 1C 22 24 
12101     21 1F 15 0F 
12105     0F 05 05 F9 
12109     F4 ED EE F0 | 	byte	$19, $1c, $22, $24, $21, $1f, $15, $0f, $0f, $05, $05, $f9, $f4, $ed, $ee, $f0
1210d     F8 F9 FA F9 
12111     03 08 0F 14 
12115     13 14 12 12 
12119     12 17 26 28 | 	byte	$f8, $f9, $fa, $f9, $03, $08, $0f, $14, $13, $14, $12, $12, $12, $17, $26, $28
1211d     27 1F 19 17 
12121     17 14 13 08 
12125     FD FA F4 F3 
12129     F5 F6 F7 FC | 	byte	$27, $1f, $19, $17, $17, $14, $13, $08, $fd, $fa, $f4, $f3, $f5, $f6, $f7, $fc
1212d     05 0F 1F 29 
12131     27 28 1E 16 
12135     12 10 0F 08 
12139     01 FA FD F8 | 	byte	$05, $0f, $1f, $29, $27, $28, $1e, $16, $12, $10, $0f, $08, $01, $fa, $fd, $f8
1213d     FB FE 04 06 
12141     07 0C 0A 14 
12145     12 07 FC E4 
12149     C9 BE B4 AE | 	byte	$fb, $fe, $04, $06, $07, $0c, $0a, $14, $12, $07, $fc, $e4, $c9, $be, $b4, $ae
1214d     AD A2 A7 B7 
12151     C5 D8 F3 03 
12155     09 17 1B 25 
12159     35 34 37 3A | 	byte	$ad, $a2, $a7, $b7, $c5, $d8, $f3, $03, $09, $17, $1b, $25, $35, $34, $37, $3a
1215d     30 2C 23 1F 
12161     1A 10 0A F6 
12165     EE EB E2 E3 
12169     DB D5 D4 D4 | 	byte	$30, $2c, $23, $1f, $1a, $10, $0a, $f6, $ee, $eb, $e2, $e3, $db, $d5, $d4, $d4
1216d     D7 E2 EB EA 
12171     E5 D5 D1 CB 
12175     DB DE EF F4 
12179     FD 0C 0F 15 | 	byte	$d7, $e2, $eb, $ea, $e5, $d5, $d1, $cb, $db, $de, $ef, $f4, $fd, $0c, $0f, $15
1217d     24 23 24 23 
12181     18 17 0D 0F 
12185     0D 0F 0F 0A 
12189     09 06 03 02 | 	byte	$24, $23, $24, $23, $18, $17, $0d, $0f, $0d, $0f, $0f, $0a, $09, $06, $03, $02
1218d     05 06 03 05 
12191     07 0A 0D 14 
12195     14 1E 24 2E 
12199     3D 3F 3E 2D | 	byte	$05, $06, $03, $05, $07, $0a, $0d, $14, $14, $1e, $24, $2e, $3d, $3f, $3e, $2d
1219d     19 0B FF FA 
121a1     F1 E6 DB D7 
121a5     D2 D3 DD E8 
121a9     F5 01 09 16 | 	byte	$19, $0b, $ff, $fa, $f1, $e6, $db, $d7, $d2, $d3, $dd, $e8, $f5, $01, $09, $16
121ad     1F 2D 2F 2E 
121b1     22 19 10 07 
121b5     01 00 00 FE 
121b9     FD 03 0D 1A | 	byte	$1f, $2d, $2f, $2e, $22, $19, $10, $07, $01, $00, $00, $fe, $fd, $03, $0d, $1a
121bd     27 2B 31 2E 
121c1     23 2A 2A 1E 
121c5     0F F1 D9 BC 
121c9     B1 B1 AF B2 | 	byte	$27, $2b, $31, $2e, $23, $2a, $2a, $1e, $0f, $f1, $d9, $bc, $b1, $b1, $af, $b2
121cd     BE C2 CC CC 
121d1     DE EC F1 FB 
121d5     FA FF 00 08 
121d9     12 13 13 12 | 	byte	$be, $c2, $cc, $cc, $de, $ec, $f1, $fb, $fa, $ff, $00, $08, $12, $13, $13, $12
121dd     0A 0B 09 07 
121e1     00 FC FA F0 
121e5     EC EE E7 E9 
121e9     E2 E0 E5 E9 | 	byte	$0a, $0b, $09, $07, $00, $fc, $fa, $f0, $ec, $ee, $e7, $e9, $e2, $e0, $e5, $e9
121ed     EF F6 F3 EB 
121f1     E4 DE E0 EB 
121f5     EF FD 0E 19 
121f9     14 14 19 23 | 	byte	$ef, $f6, $f3, $eb, $e4, $de, $e0, $eb, $ef, $fd, $0e, $19, $14, $14, $19, $23
121fd     30 33 31 2E 
12201     2E 30 31 34 
12205     2A 18 0B F2 
12209     E6 E3 DA DB | 	byte	$30, $33, $31, $2e, $2e, $30, $31, $34, $2a, $18, $0b, $f2, $e6, $e3, $da, $db
1220d     DB DC E7 ED 
12211     F7 06 18 21 
12215     30 39 41 45 
12219     44 30 16 FB | 	byte	$db, $dc, $e7, $ed, $f7, $06, $18, $21, $30, $39, $41, $45, $44, $30, $16, $fb
1221d     E8 DE D1 D4 
12221     D4 D4 D3 CE 
12225     DF F5 0B 1B 
12229     2C 27 2A 3C | 	byte	$e8, $de, $d1, $d4, $d4, $d4, $d3, $ce, $df, $f5, $0b, $1b, $2c, $27, $2a, $3c
1222d     3A 39 31 22 
12231     15 0C FE 00 
12235     F9 FF 04 0D 
12239     13 18 1E 20 | 	byte	$3a, $39, $31, $22, $15, $0c, $fe, $00, $f9, $ff, $04, $0d, $13, $18, $1e, $20
1223d     21 21 20 20 
12241     1F 1C 11 FD 
12245     E3 C5 B5 B4 
12249     AE BC C4 D1 | 	byte	$21, $21, $20, $20, $1f, $1c, $11, $fd, $e3, $c5, $b5, $b4, $ae, $bc, $c4, $d1
1224d     D8 CC CE D0 
12251     DD E8 E8 ED 
12255     ED F8 FE 07 
12259     15 19 1A 1C | 	byte	$d8, $cc, $ce, $d0, $dd, $e8, $e8, $ed, $ed, $f8, $fe, $07, $15, $19, $1a, $1c
1225d     1F 14 0C 04 
12261     FF FE F4 F0 
12265     F0 F2 F3 F8 
12269     FF 04 12 15 | 	byte	$1f, $14, $0c, $04, $ff, $fe, $f4, $f0, $f0, $f2, $f3, $f8, $ff, $04, $12, $15
1226d     13 10 F9 E1 
12271     D0 BF BE CB 
12275     DB EE FE F7 
12279     FA 04 1B 28 | 	byte	$13, $10, $f9, $e1, $d0, $bf, $be, $cb, $db, $ee, $fe, $f7, $fa, $04, $1b, $28
1227d     35 38 39 36 
12281     3B 3A 37 2F 
12285     17 FD EC DB 
12289     CF C5 C7 C7 | 	byte	$35, $38, $39, $36, $3b, $3a, $37, $2f, $17, $fd, $ec, $db, $cf, $c5, $c7, $c7
1228d     CA D6 ED 03 
12291     1C 32 48 4E 
12295     5C 5E 60 50 
12299     2D 11 F4 DF | 	byte	$ca, $d6, $ed, $03, $1c, $32, $48, $4e, $5c, $5e, $60, $50, $2d, $11, $f4, $df
1229d     D3 D3 D8 E9 
122a1     EE EE ED F4 
122a5     FF 0C 11 10 
122a9     15 17 1C 22 | 	byte	$d3, $d3, $d8, $e9, $ee, $ee, $ed, $f4, $ff, $0c, $11, $10, $15, $17, $1c, $22
122ad     28 28 23 19 
122b1     18 13 09 0B 
122b5     06 07 07 06 
122b9     09 09 0A 0B | 	byte	$28, $28, $23, $19, $18, $13, $09, $0b, $06, $07, $07, $06, $09, $09, $0a, $0b
122bd     0D 0F 12 13 
122c1     09 01 ED D6 
122c5     C6 C2 C2 CC 
122c9     DA E6 F4 F6 | 	byte	$0d, $0f, $12, $13, $09, $01, $ed, $d6, $c6, $c2, $c2, $cc, $da, $e6, $f4, $f6
122cd     E0 DA D9 DC 
122d1     E6 E4 EB EA 
122d5     F2 00 11 14 
122d9     1E 1C 12 02 | 	byte	$e0, $da, $d9, $dc, $e6, $e4, $eb, $ea, $f2, $00, $11, $14, $1e, $1c, $12, $02
122dd     F4 E2 E0 DB 
122e1     DC E1 EC F9 
122e5     06 12 28 2F 
122e9     39 37 34 20 | 	byte	$f4, $e2, $e0, $db, $dc, $e1, $ec, $f9, $06, $12, $28, $2f, $39, $37, $34, $20
122ed     0A E5 CC AF 
122f1     A6 AC BC D3 
122f5     E9 EF E5 E9 
122f9     F5 05 22 30 | 	byte	$0a, $e5, $cc, $af, $a6, $ac, $bc, $d3, $e9, $ef, $e5, $e9, $f5, $05, $22, $30
122fd     37 41 44 46 
12301     52 4E 42 32 
12305     1C 0B F1 E5 
12309     D9 D0 D0 D8 | 	byte	$37, $41, $44, $46, $52, $4e, $42, $32, $1c, $0b, $f1, $e5, $d9, $d0, $d0, $d8
1230d     DE F4 05 17 
12311     1F 2A 37 37 
12315     37 37 2C 17 
12319     00 F3 EA ED | 	byte	$de, $f4, $05, $17, $1f, $2a, $37, $37, $37, $37, $2c, $17, $00, $f3, $ea, $ed
1231d     F9 01 0E 15 
12321     07 F8 F6 F7 
12325     F6 F9 00 FD 
12329     00 03 02 FC | 	byte	$f9, $01, $0e, $15, $07, $f8, $f6, $f7, $f6, $f9, $00, $fd, $00, $03, $02, $fc
1232d     FE FD FE 01 
12331     02 07 0E 0F 
12335     1A 22 1F 20 
12339     25 27 28 27 | 	byte	$fe, $fd, $fe, $01, $02, $07, $0e, $0f, $1a, $22, $1f, $20, $25, $27, $28, $27
1233d     27 1F 19 10 
12341     02 F4 E2 D0 
12345     CD C6 CA D4 
12349     E3 EC E5 E4 | 	byte	$27, $1f, $19, $10, $02, $f4, $e2, $d0, $cd, $c6, $ca, $d4, $e3, $ec, $e5, $e4
1234d     DA E7 EF FE 
12351     0A 0E 0F 12 
12355     10 0D 0B 01 
12359     F7 EA E1 D3 | 	byte	$da, $e7, $ef, $fe, $0a, $0e, $0f, $12, $10, $0d, $0b, $01, $f7, $ea, $e1, $d3
1235d     C9 CB CA CB 
12361     C9 D0 DF ED 
12365     08 1C 2B 3B 
12369     3C 3A 30 18 | 	byte	$c9, $cb, $ca, $cb, $c9, $d0, $df, $ed, $08, $1c, $2b, $3b, $3c, $3a, $30, $18
1236d     F8 DC CA C3 
12371     C5 CD DE E8 
12375     EB E8 EA F7 
12379     0A 16 1D 21 | 	byte	$f8, $dc, $ca, $c3, $c5, $cd, $de, $e8, $eb, $e8, $ea, $f7, $0a, $16, $1d, $21
1237d     20 21 24 29 
12381     29 2E 30 2E 
12385     30 2E 2D 1D 
12389     16 0B FE FC | 	byte	$20, $21, $24, $29, $29, $2e, $30, $2e, $30, $2e, $2d, $1d, $16, $0b, $fe, $fc
1238d     FB FD 03 0C 
12391     11 18 1D 17 
12395     16 FB E5 D5 
12399     CE C8 CC E1 | 	byte	$fb, $fd, $03, $0c, $11, $18, $1d, $17, $16, $fb, $e5, $d5, $ce, $c8, $cc, $e1
1239d     F6 10 24 24 
123a1     24 21 1F 26 
123a5     27 27 24 18 
123a9     0A FC EF EC | 	byte	$f6, $10, $24, $24, $24, $21, $1f, $26, $27, $27, $24, $18, $0a, $fc, $ef, $ec
123ad     E7 ED F1 F2 
123b1     F2 F5 F7 FA 
123b5     FB 05 0D 21 
123b9     2D 43 4E 52 | 	byte	$e7, $ed, $f1, $f2, $f2, $f5, $f7, $fa, $fb, $05, $0d, $21, $2d, $43, $4e, $52
123bd     53 4B 3B 28 
123c1     08 F6 DD CC 
123c5     CA C9 CC DC 
123c9     E1 DA D0 C2 | 	byte	$53, $4b, $3b, $28, $08, $f6, $dd, $cc, $ca, $c9, $cc, $dc, $e1, $da, $d0, $c2
123cd     BE C6 CC D6 
123d1     DE E6 EB F9 
123d5     02 06 03 03 
123d9     03 FC FD F8 | 	byte	$be, $c6, $cc, $d6, $de, $e6, $eb, $f9, $02, $06, $03, $03, $03, $fc, $fd, $f8
123dd     F4 E3 DA DB 
123e1     D9 E6 F4 07 
123e5     18 24 29 27 
123e9     22 13 FF F8 | 	byte	$f4, $e3, $da, $db, $d9, $e6, $f4, $07, $18, $24, $29, $27, $22, $13, $ff, $f8
123ed     EA E7 ED F4 
123f1     03 14 1D 18 
123f5     0E 08 02 05 
123f9     07 0C 0A 0D | 	byte	$ea, $e7, $ed, $f4, $03, $14, $1d, $18, $0e, $08, $02, $05, $07, $0c, $0a, $0d
123fd     0A 0A 0A 02 
12401     FC FB F6 F7 
12405     F7 F9 FE 07 
12409     06 12 1C 1A | 	byte	$0a, $0a, $0a, $02, $fc, $fb, $f6, $f7, $f7, $f9, $fe, $07, $06, $12, $1c, $1a
1240d     1C 27 28 32 
12411     2D 22 13 FD 
12415     E8 DE D0 CD 
12419     D0 DB E9 FB | 	byte	$1c, $27, $28, $32, $2d, $22, $13, $fd, $e8, $de, $d0, $cd, $d0, $db, $e9, $fb
1241d     0D 15 13 16 
12421     18 22 30 47 
12425     4E 56 51 3D 
12429     2A 17 00 FD | 	byte	$0d, $15, $13, $16, $18, $22, $30, $47, $4e, $56, $51, $3d, $2a, $17, $00, $fd
1242d     EE E4 E5 E3 
12431     E4 E9 ED EE 
12435     F3 F0 F7 F9 
12439     F9 FB FA FF | 	byte	$ee, $e4, $e5, $e3, $e4, $e9, $ed, $ee, $f3, $f0, $f7, $f9, $f9, $fb, $fa, $ff
1243d     01 0B 0F 14 
12441     12 0A 09 09 
12445     14 14 19 11 
12449     F9 E3 D2 C9 | 	byte	$01, $0b, $0f, $14, $12, $0a, $09, $09, $14, $14, $19, $11, $f9, $e3, $d2, $c9
1244d     C4 CB DA DC 
12451     DB E0 E0 DD 
12455     DF EB EF 00 
12459     04 12 19 1E | 	byte	$c4, $cb, $da, $dc, $db, $e0, $e0, $dd, $df, $eb, $ef, $00, $04, $12, $19, $1e
1245d     24 19 18 17 
12461     14 13 16 16 
12465     16 14 04 00 
12469     EF E1 CF CB | 	byte	$24, $19, $18, $17, $14, $13, $16, $16, $16, $14, $04, $00, $ef, $e1, $cf, $cb
1246d     BC B9 BA BD 
12471     CE E1 E5 EF 
12475     03 06 0B 14 
12479     1D 26 2E 2E | 	byte	$bc, $b9, $ba, $bd, $ce, $e1, $e5, $ef, $03, $06, $0b, $14, $1d, $26, $2e, $2e
1247d     23 1E 09 FE 
12481     FA F4 F5 FC 
12485     03 0C 19 1D 
12489     24 25 35 37 | 	byte	$23, $1e, $09, $fe, $fa, $f4, $f5, $fc, $03, $0c, $19, $1d, $24, $25, $35, $37
1248d     37 3F 3D 33 
12491     2B 1D 0A FE 
12495     F5 F6 F7 F7 
12499     FA 05 0D 16 | 	byte	$37, $3f, $3d, $33, $2b, $1d, $0a, $fe, $f5, $f6, $f7, $f7, $fa, $05, $0d, $16
1249d     13 0E 05 FD 
124a1     F9 FD FE 06 
124a5     05 02 FA FA 
124a9     F2 F6 F7 EC | 	byte	$13, $0e, $05, $fd, $f9, $fd, $fe, $06, $05, $02, $fa, $fa, $f2, $f6, $f7, $ec
124ad     E8 E8 E9 FD 
124b1     05 0A 0B 0B 
124b5     0B 06 00 F9 
124b9     F4 ED EE F3 | 	byte	$e8, $e8, $e9, $fd, $05, $0a, $0b, $0b, $0b, $06, $00, $f9, $f4, $ed, $ee, $f3
124bd     F7 FE 09 16 
124c1     1F 2D 34 3D 
124c5     43 41 2D 15 
124c9     05 F2 E6 E8 | 	byte	$f7, $fe, $09, $16, $1f, $2d, $34, $3d, $43, $41, $2d, $15, $05, $f2, $e6, $e8
124cd     E8 EA EF E7 
124d1     E6 DB CD C8 
124d5     BD B9 BC BA 
124d9     BA CA DC E5 | 	byte	$e8, $ea, $ef, $e7, $e6, $db, $cd, $c8, $bd, $b9, $bc, $ba, $ba, $ca, $dc, $e5
124dd     FF 0C 1E 26 
124e1     24 19 1A 12 
124e5     12 08 07 FD 
124e9     F8 F7 EB E3 | 	byte	$ff, $0c, $1e, $26, $24, $19, $1a, $12, $12, $08, $07, $fd, $f8, $f7, $eb, $e3
124ed     DE DC DB E2 
124f1     E9 E5 F0 F9 
124f5     06 1A 2B 39 
124f9     4A 46 47 3B | 	byte	$de, $dc, $db, $e2, $e9, $e5, $f0, $f9, $06, $1a, $2b, $39, $4a, $46, $47, $3b
124fd     26 18 07 05 
12501     05 06 10 18 
12505     26 2B 31 31 
12509     30 20 11 FD | 	byte	$26, $18, $07, $05, $05, $06, $10, $18, $26, $2b, $31, $31, $30, $20, $11, $fd
1250d     EA D2 C3 C0 
12511     BF BE CE E5 
12515     F7 00 06 07 
12519     12 1F 22 20 | 	byte	$ea, $d2, $c3, $c0, $bf, $be, $ce, $e5, $f7, $00, $06, $07, $12, $1f, $22, $20
1251d     1B 1A 15 0E 
12521     12 14 1C 1C 
12525     12 0E 05 00 
12529     FA FD FE 00 | 	byte	$1b, $1a, $15, $0e, $12, $14, $1c, $1c, $12, $0e, $05, $00, $fa, $fd, $fe, $00
1252d     03 0F 15 1C 
12531     22 20 21 1F 
12535     1C 15 07 04 
12539     FB F6 FA F9 | 	byte	$03, $0f, $15, $1c, $22, $20, $21, $1f, $1c, $15, $07, $04, $fb, $f6, $fa, $f9
1253d     00 06 05 07 
12541     06 01 00 F9 
12545     F4 E6 E2 DB 
12549     DD DD DB DC | 	byte	$00, $06, $05, $07, $06, $01, $00, $f9, $f4, $e6, $e2, $db, $dd, $dd, $db, $dc
1254d     DF E0 EA E3 
12551     E4 DA D6 D6 
12555     D4 CD D0 D8 
12559     DE F4 02 0E | 	byte	$df, $e0, $ea, $e3, $e4, $da, $d6, $d6, $d4, $cd, $d0, $d8, $de, $f4, $02, $0e
1255d     25 2C 37 3B 
12561     3A 37 30 1B 
12565     12 FF F9 F6 
12569     F7 F9 F9 F9 | 	byte	$25, $2c, $37, $3b, $3a, $37, $30, $1b, $12, $ff, $f9, $f6, $f7, $f9, $f9, $f9
1256d     FB FE 01 FE 
12571     FD FA FA F5 
12575     F1 F3 F2 F3 
12579     F2 ED EE EC | 	byte	$fb, $fe, $01, $fe, $fd, $fa, $fa, $f5, $f1, $f3, $f2, $f3, $f2, $ed, $ee, $ec
1257d     EA F2 FC FB 
12581     FE 08 10 1E 
12585     2C 36 3A 40 
12589     34 2C 17 00 | 	byte	$ea, $f2, $fc, $fb, $fe, $08, $10, $1e, $2c, $36, $3a, $40, $34, $2c, $17, $00
1258d     EF DC D4 D1 
12591     D7 E8 FB 12 
12595     21 31 3D 49 
12599     47 3C 2D 23 | 	byte	$ef, $dc, $d4, $d1, $d7, $e8, $fb, $12, $21, $31, $3d, $49, $47, $3c, $2d, $23
1259d     18 13 14 17 
125a1     2B 33 31 31 
125a5     27 1E 10 02 
125a9     EF DF D4 C7 | 	byte	$18, $13, $14, $17, $2b, $33, $31, $31, $27, $1e, $10, $02, $ef, $df, $d4, $c7
125ad     C2 C6 C7 D1 
125b1     DA EC F4 01 
125b5     F6 EB E7 E0 
125b9     DB E1 EC FC | 	byte	$c2, $c6, $c7, $d1, $da, $ec, $f4, $01, $f6, $eb, $e7, $e0, $db, $e1, $ec, $fc
125bd     14 1E 2B 32 
125c1     30 30 23 0A 
125c5     FB F8 EF EE 
125c9     ED EE FE 07 | 	byte	$14, $1e, $2b, $32, $30, $30, $23, $0a, $fb, $f8, $ef, $ee, $ed, $ee, $fe, $07
125cd     0B 0A 05 F4 
125d1     E6 DA D7 D7 
125d5     D9 E9 F5 0B 
125d9     1B 2C 37 35 | 	byte	$0b, $0a, $05, $f4, $e6, $da, $d7, $d7, $d9, $e9, $f5, $0b, $1b, $2c, $37, $35
125dd     36 2B 1C 09 
125e1     F9 DD C4 BD 
125e5     B8 BA CE DB 
125e9     E9 ED EA ED | 	byte	$36, $2b, $1c, $09, $f9, $dd, $c4, $bd, $b8, $ba, $ce, $db, $e9, $ed, $ea, $ed
125ed     EE E4 E0 E6 
125f1     EF F8 01 07 
125f5     15 1F 25 24 
125f9     18 10 0A 09 | 	byte	$ee, $e4, $e0, $e6, $ef, $f8, $01, $07, $15, $1f, $25, $24, $18, $10, $0a, $09
125fd     09 0E 15 24 
12601     2B 3A 3F 3F 
12605     3E 2E 25 1F 
12609     10 04 00 F7 | 	byte	$09, $0e, $15, $24, $2b, $3a, $3f, $3f, $3e, $2e, $25, $1f, $10, $04, $00, $f7
1260d     F1 EC F0 F8 
12611     04 12 14 16 
12615     14 13 10 FA 
12619     EF E8 E3 E9 | 	byte	$f1, $ec, $f0, $f8, $04, $12, $14, $16, $14, $13, $10, $fa, $ef, $e8, $e3, $e9
1261d     EA F2 F8 06 
12621     0A 0B 0B 06 
12625     02 02 00 00 
12629     01 02 03 08 | 	byte	$ea, $f2, $f8, $06, $0a, $0b, $0b, $06, $02, $02, $00, $00, $01, $02, $03, $08
1262d     07 06 05 06 
12631     09 0A 0A 0B 
12635     0A 09 04 FE 
12639     F5 F9 00 0E | 	byte	$07, $06, $05, $06, $09, $0a, $0a, $0b, $0a, $09, $04, $fe, $f5, $f9, $00, $0e
1263d     1B 28 37 3A 
12641     3F 2F 21 18 
12645     10 03 F9 E6 
12649     DE DA D9 D7 | 	byte	$1b, $28, $37, $3a, $3f, $2f, $21, $18, $10, $03, $f9, $e6, $de, $da, $d9, $d7
1264d     D2 C3 BA B4 
12651     AE B1 B6 B8 
12655     C4 D6 E8 F6 
12659     00 09 14 17 | 	byte	$d2, $c3, $ba, $b4, $ae, $b1, $b6, $b8, $c4, $d6, $e8, $f6, $00, $09, $14, $17
1265d     1C 22 23 1E 
12661     12 FE ED E9 
12665     EA F5 03 08 
12669     16 18 17 0C | 	byte	$1c, $22, $23, $1e, $12, $fe, $ed, $e9, $ea, $f5, $03, $08, $16, $18, $17, $0c
1266d     FF FC FA FA 
12671     FA F9 00 10 
12675     21 31 30 31 
12679     30 28 29 22 | 	byte	$ff, $fc, $fa, $fa, $fa, $f9, $00, $10, $21, $31, $30, $31, $30, $28, $29, $22
1267d     19 18 16 13 
12681     10 0D 03 F6 
12685     F1 E2 DE D8 
12689     D2 D0 CF CF | 	byte	$19, $18, $16, $13, $10, $0d, $03, $f6, $f1, $e2, $de, $d8, $d2, $d0, $cf, $cf
1268d     C8 CF E0 F4 
12691     05 1C 2C 3A 
12695     43 3F 2F 22 
12699     1F 16 17 16 | 	byte	$c8, $cf, $e0, $f4, $05, $1c, $2c, $3a, $43, $3f, $2f, $22, $1f, $16, $17, $16
1269d     16 1E 27 28 
126a1     25 1E 10 04 
126a5     FF FA F9 FB 
126a9     02 08 12 17 | 	byte	$16, $1e, $27, $28, $25, $1e, $10, $04, $ff, $fa, $f9, $fb, $02, $08, $12, $17
126ad     1D 1B 1A 17 
126b1     0D 00 F8 F9 
126b5     EF E1 D4 D2 
126b9     D0 DA E8 F5 | 	byte	$1d, $1b, $1a, $17, $0d, $00, $f8, $f9, $ef, $e1, $d4, $d2, $d0, $da, $e8, $f5
126bd     FF FD FE F3 
126c1     EB E2 DA DD 
126c5     DB DD E7 ED 
126c9     FE 12 19 14 | 	byte	$ff, $fd, $fe, $f3, $eb, $e2, $da, $dd, $db, $dd, $e7, $ed, $fe, $12, $19, $14
126cd     08 FD F0 EB 
126d1     EA F2 F8 01 
126d5     0C 11 18 14 
126d9     12 0A 09 0A | 	byte	$08, $fd, $f0, $eb, $ea, $f2, $f8, $01, $0c, $11, $18, $14, $12, $0a, $09, $0a
126dd     11 10 10 0D 
126e1     00 00 00 07 
126e5     0E 14 13 0E 
126e9     05 EE E7 E2 | 	byte	$11, $10, $10, $0d, $00, $00, $00, $07, $0e, $14, $13, $0e, $05, $ee, $e7, $e2
126ed     D9 DB D6 D6 
126f1     D6 D6 DE EC 
126f5     F1 F7 F5 F5 
126f9     F6 00 0B 1A | 	byte	$d9, $db, $d6, $d6, $d6, $d6, $de, $ec, $f1, $f7, $f5, $f5, $f6, $00, $0b, $1a
126fd     2C 37 41 3F 
12701     3E 2E 1B 0B 
12705     00 FC FE FE 
12709     04 02 F7 F6 | 	byte	$2c, $37, $41, $3f, $3e, $2e, $1b, $0b, $00, $fc, $fe, $fe, $04, $02, $f7, $f6
1270d     F6 FB 04 12 
12711     20 2C 38 30 
12715     2E 2D 2D 32 
12719     32 2D 23 18 | 	byte	$f6, $fb, $04, $12, $20, $2c, $38, $30, $2e, $2d, $2d, $32, $32, $2d, $23, $18
1271d     12 10 08 01 
12721     FA E9 E2 D5 
12725     D7 D8 D3 CD 
12729     D4 D6 DE DD | 	byte	$12, $10, $08, $01, $fa, $e9, $e2, $d5, $d7, $d8, $d3, $cd, $d4, $d6, $de, $dd
1272d     DF DD E5 EB 
12731     01 11 1F 27 
12735     23 19 1A 18 
12739     1D 27 2D 2E | 	byte	$df, $dd, $e5, $eb, $01, $11, $1f, $27, $23, $19, $1a, $18, $1d, $27, $2d, $2e
1273d     2E 13 02 F4 
12741     EA E7 E2 E3 
12745     E0 E3 F4 05 
12749     11 18 17 12 | 	byte	$2e, $13, $02, $f4, $ea, $e7, $e2, $e3, $e0, $e3, $f4, $05, $11, $18, $17, $12
1274d     08 00 01 00 
12751     F9 FA FA F9 
12755     FA F9 F1 E8 
12759     DF D7 DB C9 | 	byte	$08, $00, $01, $00, $f9, $fa, $fa, $f9, $fa, $f9, $f1, $e8, $df, $d7, $db, $c9
1275d     CB C1 BD BC 
12761     BD C2 D1 E8 
12765     03 12 1E 1A 
12769     18 18 18 18 | 	byte	$cb, $c1, $bd, $bc, $bd, $c2, $d1, $e8, $03, $12, $1e, $1a, $18, $18, $18, $18
1276d     1A 18 17 14 
12771     16 22 23 20 
12775     1B 11 09 0A 
12779     11 1C 27 2D | 	byte	$1a, $18, $17, $14, $16, $22, $23, $20, $1b, $11, $09, $0a, $11, $1c, $27, $2d
1277d     33 32 31 2C 
12781     1D 10 09 01 
12785     FE 01 01 F9 
12789     FA F5 F3 F2 | 	byte	$33, $32, $31, $2c, $1d, $10, $09, $01, $fe, $01, $01, $f9, $fa, $f5, $f3, $f2
1278d     F0 F7 FC 03 
12791     F8 E4 DB DC 
12795     DC E7 F0 F8 
12799     00 04 0B 20 | 	byte	$f0, $f7, $fc, $03, $f8, $e4, $db, $dc, $dc, $e7, $f0, $f8, $00, $04, $0b, $20
1279d     30 33 34 2A 
127a1     1C 10 0E 10 
127a5     10 0F 05 05 
127a9     F9 F1 E8 E3 | 	byte	$30, $33, $34, $2a, $1c, $10, $0e, $10, $10, $0f, $05, $05, $f9, $f1, $e8, $e3
127ad     E4 E6 F3 03 
127b1     17 1E 21 20 
127b5     28 25 28 38 
127b9     3A 37 2B 0D | 	byte	$e4, $e6, $f3, $03, $17, $1e, $21, $20, $28, $25, $28, $38, $3a, $37, $2b, $0d
127bd     F0 E0 D3 D3 
127c1     D3 CE CA C6 
127c5     C0 C6 C6 D1 
127c9     D7 D3 CB CA | 	byte	$f0, $e0, $d3, $d3, $d3, $ce, $ca, $c6, $c0, $c6, $c6, $d1, $d7, $d3, $cb, $ca
127cd     CC E0 F6 10 
127d1     1F 32 36 35 
127d5     30 25 1D 0F 
127d9     03 05 00 F5 | 	byte	$cc, $e0, $f6, $10, $1f, $32, $36, $35, $30, $25, $1d, $0f, $03, $05, $00, $f5
127dd     EA DF D7 D3 
127e1     DA F2 01 12 
127e5     14 0E 08 06 
127e9     07 0F 18 1D | 	byte	$ea, $df, $d7, $d3, $da, $f2, $01, $12, $14, $0e, $08, $06, $07, $0f, $18, $1d
127ed     26 21 16 22 
127f1     1B 1B 1A 10 
127f5     08 02 FE 00 
127f9     01 F7 EA E1 | 	byte	$26, $21, $16, $22, $1b, $1b, $1a, $10, $08, $02, $fe, $00, $01, $f7, $ea, $e1
127fd     D4 CA C4 C2 
12801     BB BF D1 EE 
12805     08 1D 2E 3F 
12809     40 39 35 37 | 	byte	$d4, $ca, $c4, $c2, $bb, $bf, $d1, $ee, $08, $1d, $2e, $3f, $40, $39, $35, $37
1280d     3A 45 37 27 
12811     11 01 F8 FA 
12815     FB 07 0B 09 
12819     0A 14 18 22 | 	byte	$3a, $45, $37, $27, $11, $01, $f8, $fa, $fb, $07, $0b, $09, $0a, $14, $18, $22
1281d     26 24 19 18 
12821     13 16 17 17 
12825     12 09 FC F0 
12829     E6 E2 DB DC | 	byte	$26, $24, $19, $18, $13, $16, $17, $17, $12, $09, $fc, $f0, $e6, $e2, $db, $dc
1282d     D9 DE D8 D6 
12831     D3 D4 D6 D9 
12835     E3 F0 02 12 
12839     14 13 10 0D | 	byte	$d9, $de, $d8, $d6, $d3, $d4, $d6, $d9, $e3, $f0, $02, $12, $14, $13, $10, $0d
1283d     0B 0B 0D 0D 
12841     0B 0A 07 07 
12845     07 09 07 F7 
12849     E5 DA DC E6 | 	byte	$0b, $0b, $0d, $0d, $0b, $0a, $07, $07, $07, $09, $07, $f7, $e5, $da, $dc, $e6
1284d     FB 09 1B 26 
12851     21 1F 1C 1B 
12855     18 0E 00 FE 
12859     F5 F0 E7 E6 | 	byte	$fb, $09, $1b, $26, $21, $1f, $1c, $1b, $18, $0e, $00, $fe, $f5, $f0, $e7, $e6
1285d     DB DB DD E7 
12861     EF FC EC D0 
12865     C1 B6 AD B1 
12869     C1 CF E1 F1 | 	byte	$db, $db, $dd, $e7, $ef, $fc, $ec, $d0, $c1, $b6, $ad, $b1, $c1, $cf, $e1, $f1
1286d     F9 0E 25 3F 
12871     57 5D 5B 58 
12875     50 46 46 3C 
12879     2F 25 09 EF | 	byte	$f9, $0e, $25, $3f, $57, $5d, $5b, $58, $50, $46, $46, $3c, $2f, $25, $09, $ef
1287d     DB CB C9 CC 
12881     D9 F2 03 13 
12885     24 30 33 31 
12889     31 34 3B 40 | 	byte	$db, $cb, $c9, $cc, $d9, $f2, $03, $13, $24, $30, $33, $31, $31, $34, $3b, $40
1288d     32 24 12 06 
12891     FD FA FE 04 
12895     00 F8 EF E0 
12899     CE CB CE CC | 	byte	$32, $24, $12, $06, $fd, $fa, $fe, $04, $00, $f8, $ef, $e0, $ce, $cb, $ce, $cc
1289d     CC CB CB D6 
128a1     E4 F1 03 0E 
128a5     1B 1A 1B 1B 
128a9     20 20 20 23 | 	byte	$cc, $cb, $cb, $d6, $e4, $f1, $03, $0e, $1b, $1a, $1b, $1b, $20, $20, $20, $23
128ad     1E 17 1A 15 
128b1     09 FE F9 F9 
128b5     00 0E 0B 06 
128b9     05 FB F3 F6 | 	byte	$1e, $17, $1a, $15, $09, $fe, $f9, $f9, $00, $0e, $0b, $06, $05, $fb, $f3, $f6
128bd     F6 00 04 0A 
128c1     09 04 03 06 
128c5     0E 0D 05 FE 
128c9     F8 F6 F6 F9 | 	byte	$f6, $00, $04, $0a, $09, $04, $03, $06, $0e, $0d, $05, $fe, $f8, $f6, $f6, $f9
128cd     F4 E3 D9 CE 
128d1     C3 C0 C2 BF 
128d5     C2 CD CE DF 
128d9     ED 06 13 1F | 	byte	$f4, $e3, $d9, $ce, $c3, $c0, $c2, $bf, $c2, $cd, $ce, $df, $ed, $06, $13, $1f
128dd     26 2B 34 35 
128e1     2B 17 05 F7 
128e5     E1 D6 D6 D8 
128e9     E2 F4 05 08 | 	byte	$26, $2b, $34, $35, $2b, $17, $05, $f7, $e1, $d6, $d6, $d8, $e2, $f4, $05, $08
128ed     19 2F 3F 4A 
128f1     51 4C 45 3E 
128f5     38 2E 21 18 
128f9     05 F3 E0 D5 | 	byte	$19, $2f, $3f, $4a, $51, $4c, $45, $3e, $38, $2e, $21, $18, $05, $f3, $e0, $d5
128fd     D3 D6 D9 E3 
12901     E7 DB DF E0 
12905     E3 E5 E6 EB 
12909     FA 01 04 06 | 	byte	$d3, $d6, $d9, $e3, $e7, $db, $df, $e0, $e3, $e5, $e6, $eb, $fa, $01, $04, $06
1290d     0E 15 1E 2C 
12911     3A 44 43 44 
12915     3D 2A 19 11 
12919     09 0A FE EF | 	byte	$0e, $15, $1e, $2c, $3a, $44, $43, $44, $3d, $2a, $19, $11, $09, $0a, $fe, $ef
1291d     E2 E4 E9 F3 
12921     02 0C 11 0F 
12925     08 07 0A 0B 
12929     15 19 12 0E | 	byte	$e2, $e4, $e9, $f3, $02, $0c, $11, $0f, $08, $07, $0a, $0b, $15, $19, $12, $0e
1292d     0F 14 12 12 
12931     12 0F 0F 0A 
12935     FB E5 C5 AC 
12939     9E 8D 98 A1 | 	byte	$0f, $14, $12, $12, $12, $0f, $0f, $0a, $fb, $e5, $c5, $ac, $9e, $8d, $98, $a1
1293d     AE C2 D4 DF 
12941     EB FF 17 30 
12945     41 48 46 44 
12949     43 41 3C 2D | 	byte	$ae, $c2, $d4, $df, $eb, $ff, $17, $30, $41, $48, $46, $44, $43, $41, $3c, $2d
1294d     20 09 F9 E1 
12951     D2 C7 C5 CB 
12955     D1 D7 E8 F2 
12959     05 13 17 1D | 	byte	$20, $09, $f9, $e1, $d2, $c7, $c5, $cb, $d1, $d7, $e8, $f2, $05, $13, $17, $1d
1295d     26 25 19 0C 
12961     00 EF E7 E2 
12965     E3 EB FA 06 
12969     0D 0A 02 F4 | 	byte	$26, $25, $19, $0c, $00, $ef, $e7, $e2, $e3, $eb, $fa, $06, $0d, $0a, $02, $f4
1296d     F6 F6 F7 FC 
12971     FA F7 F7 F7 
12975     FC FE FE 00 
12979     01 02 0C 15 | 	byte	$f6, $f6, $f7, $fc, $fa, $f7, $f7, $f7, $fc, $fe, $fe, $00, $01, $02, $0c, $15
1297d     22 2F 32 2C 
12981     2D 26 24 1C 
12985     15 04 00 FC 
12989     F6 F9 03 08 | 	byte	$22, $2f, $32, $2c, $2d, $26, $24, $1c, $15, $04, $00, $fc, $f6, $f9, $03, $08
1298d     0A 15 22 29 
12991     2D 32 32 22 
12995     10 04 06 06 
12999     09 0A 0A 09 | 	byte	$0a, $15, $22, $29, $2d, $32, $32, $22, $10, $04, $06, $06, $09, $0a, $0a, $09
1299d     06 05 00 F5 
129a1     DC C3 AF A5 
129a5     A1 AA BB CD 
129a9     D9 E6 FA 08 | 	byte	$06, $05, $00, $f5, $dc, $c3, $af, $a5, $a1, $aa, $bb, $cd, $d9, $e6, $fa, $08
129ad     20 31 41 49 
129b1     4F 4E 3A 2D 
129b5     1B 01 EC DC 
129b9     D0 C9 CC CF | 	byte	$20, $31, $41, $49, $4f, $4e, $3a, $2d, $1b, $01, $ec, $dc, $d0, $c9, $cc, $cf
129bd     DB E1 E7 F5 
129c1     03 17 29 3A 
129c5     3C 3A 39 37 
129c9     2B 22 15 0E | 	byte	$db, $e1, $e7, $f5, $03, $17, $29, $3a, $3c, $3a, $39, $37, $2b, $22, $15, $0e
129cd     FE F5 F0 E1 
129d1     E6 E9 E4 DB 
129d5     D2 C4 BD BE 
129d9     BD BF C2 CC | 	byte	$fe, $f5, $f0, $e1, $e6, $e9, $e4, $db, $d2, $c4, $bd, $be, $bd, $bf, $c2, $cc
129dd     C5 CD D8 DD 
129e1     DF E7 FA 0A 
129e5     22 39 4A 53 
129e9     4E 44 43 3C | 	byte	$c5, $cd, $d8, $dd, $df, $e7, $fa, $0a, $22, $39, $4a, $53, $4e, $44, $43, $3c
129ed     3A 33 2A 18 
129f1     05 FC F1 F2 
129f5     F0 EB EC EE 
129f9     F0 FC 0A 17 | 	byte	$3a, $33, $2a, $18, $05, $fc, $f1, $f2, $f0, $eb, $ec, $ee, $f0, $fc, $0a, $17
129fd     1E 1C 1B 1A 
12a01     1B 22 23 24 
12a05     24 23 0E 05 
12a09     07 FD E4 D5 | 	byte	$1e, $1c, $1b, $1a, $1b, $22, $23, $24, $24, $23, $0e, $05, $07, $fd, $e4, $d5
12a0d     CC C9 C7 CF 
12a11     DB E0 E7 E9 
12a15     F9 06 1C 32 
12a19     3C 40 42 42 | 	byte	$cc, $c9, $c7, $cf, $db, $e0, $e7, $e9, $f9, $06, $1c, $32, $3c, $40, $42, $42
12a1d     3D 39 2E 17 
12a21     05 F5 E9 E2 
12a25     DE E5 E5 E4 
12a29     E9 F2 FD 0A | 	byte	$3d, $39, $2e, $17, $05, $f5, $e9, $e2, $de, $e5, $e5, $e4, $e9, $f2, $fd, $0a
12a2d     19 1E 29 28 
12a31     14 0C FF F3 
12a35     E5 D9 D2 D4 
12a39     D9 F1 FE 08 | 	byte	$19, $1e, $29, $28, $14, $0c, $ff, $f3, $e5, $d9, $d2, $d4, $d9, $f1, $fe, $08
12a3d     0C 0D 0A FF 
12a41     00 FD F3 EB 
12a45     E3 D5 D7 DC 
12a49     E2 F0 F4 FD | 	byte	$0c, $0d, $0a, $ff, $00, $fd, $f3, $eb, $e3, $d5, $d7, $dc, $e2, $f0, $f4, $fd
12a4d     03 05 0F 15 
12a51     1B 15 11 08 
12a55     02 03 02 01 
12a59     01 FE E9 DE | 	byte	$03, $05, $0f, $15, $1b, $15, $11, $08, $02, $03, $02, $01, $01, $fe, $e9, $de
12a5d     DB DC DB DB 
12a61     E0 E7 FA 0F 
12a65     21 39 37 36 
12a69     31 34 35 3A | 	byte	$db, $dc, $db, $db, $e0, $e7, $fa, $0f, $21, $39, $37, $36, $31, $34, $35, $3a
12a6d     3A 33 2C 1D 
12a71     0A 06 FF EF 
12a75     DC C5 BB B7 
12a79     B6 BE C8 D1 | 	byte	$3a, $33, $2c, $1d, $0a, $06, $ff, $ef, $dc, $c5, $bb, $b7, $b6, $be, $c8, $d1
12a7d     E3 F5 05 18 
12a81     29 3B 47 4C 
12a85     3F 32 2B 23 
12a89     1B 0D 03 F8 | 	byte	$e3, $f5, $05, $18, $29, $3b, $47, $4c, $3f, $32, $2b, $23, $1b, $0d, $03, $f8
12a8d     EE F2 F7 FB 
12a91     FB F9 F4 FA 
12a95     0A 1E 2A 2D 
12a99     2E 27 22 21 | 	byte	$ee, $f2, $f7, $fb, $fb, $f9, $f4, $fa, $0a, $1e, $2a, $2d, $2e, $27, $22, $21
12a9d     15 0D 00 FE 
12aa1     F5 F6 F6 00 
12aa5     00 01 FE 01 
12aa9     FA F1 EC E5 | 	byte	$15, $0d, $00, $fe, $f5, $f6, $f6, $00, $00, $01, $fe, $01, $fa, $f1, $ec, $e5
12aad     E0 D7 C3 B1 
12ab1     AF B2 BF CC 
12ab5     D1 DF EB 02 
12ab9     13 2F 3D 44 | 	byte	$e0, $d7, $c3, $b1, $af, $b2, $bf, $cc, $d1, $df, $eb, $02, $13, $2f, $3d, $44
12abd     3F 3D 3E 3D 
12ac1     3D 38 29 1D 
12ac5     0A FA F3 F0 
12ac9     EE EE F0 EE | 	byte	$3f, $3d, $3e, $3d, $3d, $38, $29, $1d, $0a, $fa, $f3, $f0, $ee, $ee, $f0, $ee
12acd     EE F6 F6 F3 
12ad1     F2 F0 EB F1 
12ad5     F8 01 09 0F 
12ad9     09 FB F4 F0 | 	byte	$ee, $f6, $f6, $f3, $f2, $f0, $eb, $f1, $f8, $01, $09, $0f, $09, $fb, $f4, $f0
12add     EB E5 D6 CC 
12ae1     C4 C0 CC D9 
12ae5     DD ED F7 02 
12ae9     1C 2D 42 49 | 	byte	$eb, $e5, $d6, $cc, $c4, $c0, $cc, $d9, $dd, $ed, $f7, $02, $1c, $2d, $42, $49
12aed     46 3E 34 27 
12af1     1E 14 0C FF 
12af5     FA F1 F3 F5 
12af9     00 03 03 05 | 	byte	$46, $3e, $34, $27, $1e, $14, $0c, $ff, $fa, $f1, $f3, $f5, $00, $03, $03, $05
12afd     05 07 0F 1D 
12b01     27 2D 2D 19 
12b05     15 07 0A 07 
12b09     05 00 F7 F2 | 	byte	$05, $07, $0f, $1d, $27, $2d, $2d, $19, $15, $07, $0a, $07, $05, $00, $f7, $f2
12b0d     F6 00 03 05 
12b11     06 09 0A 11 
12b15     12 12 07 F2 
12b19     E2 D4 D2 D4 | 	byte	$f6, $00, $03, $05, $06, $09, $0a, $11, $12, $12, $07, $f2, $e2, $d4, $d2, $d4
12b1d     E4 F1 00 0C 
12b21     1A 1D 24 25 
12b25     20 1F 0F 03 
12b29     FF F9 FA F7 | 	byte	$e4, $f1, $00, $0c, $1a, $1d, $24, $25, $20, $1f, $0f, $03, $ff, $f9, $fa, $f7
12b2d     F6 EA E4 DE 
12b31     DC D7 D8 D6 
12b35     D3 D6 E1 F6 
12b39     09 1A 28 2A | 	byte	$f6, $ea, $e4, $de, $dc, $d7, $d8, $d6, $d3, $d6, $e1, $f6, $09, $1a, $28, $2a
12b3d     2A 37 44 47 
12b41     44 3D 2A 10 
12b45     02 FC FE 00 
12b49     F8 EA DE D1 | 	byte	$2a, $37, $44, $47, $44, $3d, $2a, $10, $02, $fc, $fe, $00, $f8, $ea, $de, $d1
12b4d     C4 B2 AB A7 
12b51     A9 BB CE E9 
12b55     07 19 1E 16 
12b59     14 13 10 05 | 	byte	$c4, $b2, $ab, $a7, $a9, $bb, $ce, $e9, $07, $19, $1e, $16, $14, $13, $10, $05
12b5d     01 F5 EB E7 
12b61     EA FA 0D 1E 
12b65     2A 2D 2A 2D 
12b69     30 31 2E 23 | 	byte	$01, $f5, $eb, $e7, $ea, $fa, $0d, $1e, $2a, $2d, $2a, $2d, $30, $31, $2e, $23
12b6d     15 03 FD F8 
12b71     FA FA 02 03 
12b75     08 0F 15 13 
12b79     12 0F 08 07 | 	byte	$15, $03, $fd, $f8, $fa, $fa, $02, $03, $08, $0f, $15, $13, $12, $0f, $08, $07
12b7d     07 06 06 09 
12b81     06 EF DF CF 
12b85     CE D5 DE EC 
12b89     F1 F6 FC FD | 	byte	$07, $06, $06, $09, $06, $ef, $df, $cf, $ce, $d5, $de, $ec, $f1, $f6, $fc, $fd
12b8d     07 0C 16 1E 
12b91     1F 1F 21 26 
12b95     25 23 19 11 
12b99     09 0D 0A 11 | 	byte	$07, $0c, $16, $1e, $1f, $1f, $21, $26, $25, $23, $19, $11, $09, $0d, $0a, $11
12b9d     13 16 1B 18 
12ba1     17 12 03 FE 
12ba5     F4 E6 E2 DB 
12ba9     DF EA EF EC | 	byte	$13, $16, $1b, $18, $17, $12, $03, $fe, $f4, $e6, $e2, $db, $df, $ea, $ef, $ec
12bad     E9 E6 E4 E5 
12bb1     E8 E8 E0 D4 
12bb5     D4 D6 D8 E3 
12bb9     F5 FD 0C 19 | 	byte	$e9, $e6, $e4, $e5, $e8, $e8, $e0, $d4, $d4, $d6, $d8, $e3, $f5, $fd, $0c, $19
12bbd     2B 3D 50 57 
12bc1     4E 3A 24 13 
12bc5     0F 0A 0D 0B 
12bc9     04 F6 F2 E8 | 	byte	$2b, $3d, $50, $57, $4e, $3a, $24, $13, $0f, $0a, $0d, $0b, $04, $f6, $f2, $e8
12bcd     E3 DC DF DC 
12bd1     DD E7 EF FD 
12bd5     00 FE F4 EB 
12bd9     EC EA E9 E4 | 	byte	$e3, $dc, $df, $dc, $dd, $e7, $ef, $fd, $00, $fe, $f4, $eb, $ec, $ea, $e9, $e4
12bdd     E3 D9 DC EC 
12be1     FA 0B 1C 25 
12be5     29 2F 2D 23 
12be9     1B 17 0D FA | 	byte	$e3, $d9, $dc, $ec, $fa, $0b, $1c, $25, $29, $2f, $2d, $23, $1b, $17, $0d, $fa
12bed     E8 DD DA DD 
12bf1     EF 02 13 24 
12bf5     2F 33 27 1F 
12bf9     19 0B FF 02 | 	byte	$e8, $dd, $da, $dd, $ef, $02, $13, $24, $2f, $33, $27, $1f, $19, $0b, $ff, $02
12bfd     01 06 0A 07 
12c01     FD FD FE 08 
12c05     0E 1A 16 0C 
12c09     FE F5 F6 F3 | 	byte	$01, $06, $0a, $07, $fd, $fd, $fe, $08, $0e, $1a, $16, $0c, $fe, $f5, $f6, $f3
12c0d     F6 F9 00 06 
12c11     05 07 0F 19 
12c15     1D 1C 17 16 
12c19     11 10 15 1F | 	byte	$f6, $f9, $00, $06, $05, $07, $0f, $19, $1d, $1c, $17, $16, $11, $10, $15, $1f
12c1d     1B 16 16 09 
12c21     FC 00 00 E0 
12c25     F6 F5 04 0D 
12c29     13 14 16 0C | 	byte	$1b, $16, $16, $09, $fc, $00, $00, $e0, $f6, $f5, $04, $0d, $13, $14, $16, $0c
12c2d     0E 0F 12 17 
12c31     17 0C FD F0 
12c35     EC EE F8 08 
12c39     06 0E 0F 0D | 	byte	$0e, $0f, $12, $17, $17, $0c, $fd, $f0, $ec, $ee, $f8, $08, $06, $0e, $0f, $0d
12c3d     0A 07 06 01 
12c41     01 FF FF F8 
12c45     F7 F2 E3 D9 
12c49     BC AE AB A9 | 	byte	$0a, $07, $06, $01, $01, $ff, $ff, $f8, $f7, $f2, $e3, $d9, $bc, $ae, $ab, $a9
12c4d     AB AC B8 C6 
12c51     DA ED FD 05 
12c55     12 1C 2B 39 
12c59     4B 57 59 4E | 	byte	$ab, $ac, $b8, $c6, $da, $ed, $fd, $05, $12, $1c, $2b, $39, $4b, $57, $59, $4e
12c5d     35 16 F7 EE 
12c61     E9 EA E9 DF 
12c65     D1 CE CE CE 
12c69     D5 E3 E6 FE | 	byte	$35, $16, $f7, $ee, $e9, $ea, $e9, $df, $d1, $ce, $ce, $ce, $d5, $e3, $e6, $fe
12c6d     0E 1F 20 29 
12c71     2D 27 1B 16 
12c75     0D 09 FF F9 
12c79     F7 EC E4 E9 | 	byte	$0e, $1f, $20, $29, $2d, $27, $1b, $16, $0d, $09, $ff, $f9, $f7, $ec, $e4, $e9
12c7d     DF E3 E4 EE 
12c81     F7 04 12 20 
12c85     2A 2E 2A 2D 
12c89     2A 2D 38 40 | 	byte	$df, $e3, $e4, $ee, $f7, $04, $12, $20, $2a, $2e, $2a, $2d, $2a, $2d, $38, $40
12c8d     3F 38 1A 06 
12c91     F1 E0 D7 DB 
12c95     CE D3 DA DC 
12c99     F1 FD FF F8 | 	byte	$3f, $38, $1a, $06, $f1, $e0, $d7, $db, $ce, $d3, $da, $dc, $f1, $fd, $ff, $f8
12c9d     E7 E2 D9 DD 
12ca1     D1 CD CE CB 
12ca5     D0 D7 DE ED 
12ca9     F1 F8 02 07 | 	byte	$e7, $e2, $d9, $dd, $d1, $cd, $ce, $cb, $d0, $d7, $de, $ed, $f1, $f8, $02, $07
12cad     06 0E 06 05 
12cb1     05 0A 0E 15 
12cb5     24 2E 33 38 
12cb9     34 2A 2D 2D | 	byte	$06, $0e, $06, $05, $05, $0a, $0e, $15, $24, $2e, $33, $38, $34, $2a, $2d, $2d
12cbd     2C 2A 22 21 
12cc1     10 03 F9 EA 
12cc5     E7 E2 C4 B9 
12cc9     B4 AB AD AF | 	byte	$2c, $2a, $22, $21, $10, $03, $f9, $ea, $e7, $e2, $c4, $b9, $b4, $ab, $ad, $af
12ccd     AF B1 BB C9 
12cd1     D6 EA E4 EF 
12cd5     EE FE 01 11 
12cd9     1A 20 1F 1D | 	byte	$af, $b1, $bb, $c9, $d6, $ea, $e4, $ef, $ee, $fe, $01, $11, $1a, $20, $1f, $1d
12cdd     1C 12 0D 04 
12ce1     F7 E9 D5 D3 
12ce5     C2 CC D3 DD 
12ce9     F1 04 17 2F | 	byte	$1c, $12, $0d, $04, $f7, $e9, $d5, $d3, $c2, $cc, $d3, $dd, $f1, $04, $17, $2f
12ced     41 5D 69 6E 
12cf1     62 4A 3A 1F 
12cf5     07 F9 E8 DF 
12cf9     E0 DD D8 E9 | 	byte	$41, $5d, $69, $6e, $62, $4a, $3a, $1f, $07, $f9, $e8, $df, $e0, $dd, $d8, $e9
12cfd     E4 EB ED F2 
12d01     F6 FA 01 08 
12d05     07 07 0C 10 
12d09     19 1D 22 1C | 	byte	$e4, $eb, $ed, $f2, $f6, $fa, $01, $08, $07, $07, $0c, $10, $19, $1d, $22, $1c
12d0d     15 0C FF F5 
12d11     F2 DA CF D3 
12d15     C9 D1 E5 F6 
12d19     0C 14 12 07 | 	byte	$15, $0c, $ff, $f5, $f2, $da, $cf, $d3, $c9, $d1, $e5, $f6, $0c, $14, $12, $07
12d1d     07 05 07 0C 
12d21     10 0F 0E FE 
12d25     F9 F2 E1 DE 
12d29     D8 D9 E1 E0 | 	byte	$07, $05, $07, $0c, $10, $0f, $0e, $fe, $f9, $f2, $e1, $de, $d8, $d9, $e1, $e0
12d2d     E7 F2 00 08 
12d31     1B 2B 2D 32 
12d35     38 36 1F 0C 
12d39     FB ED E1 DC | 	byte	$e7, $f2, $00, $08, $1b, $2b, $2d, $32, $38, $36, $1f, $0c, $fb, $ed, $e1, $dc
12d3d     D5 DC E2 F0 
12d41     F4 FF 09 06 
12d45     F2 D7 C7 B5 
12d49     B4 BB BC CE | 	byte	$d5, $dc, $e2, $f0, $f4, $ff, $09, $06, $f2, $d7, $c7, $b5, $b4, $bb, $bc, $ce
12d4d     E0 E7 FB 12 
12d51     19 31 32 34 
12d55     2C 26 18 11 
12d59     04 FB FE F6 | 	byte	$e0, $e7, $fb, $12, $19, $31, $32, $34, $2c, $26, $18, $11, $04, $fb, $fe, $f6
12d5d     03 FE FF FE 
12d61     F6 EF DC D4 
12d65     CF C5 CC DB 
12d69     E2 EF FD 0A | 	byte	$03, $fe, $ff, $fe, $f6, $ef, $dc, $d4, $cf, $c5, $cc, $db, $e2, $ef, $fd, $0a
12d6d     20 2D 2F 21 
12d71     21 16 1A 1A 
12d75     17 14 0C F6 
12d79     EF E7 E2 E1 | 	byte	$20, $2d, $2f, $21, $21, $16, $1a, $1a, $17, $14, $0c, $f6, $ef, $e7, $e2, $e1
12d7d     E3 E4 EF EE 
12d81     FB 08 15 2E 
12d85     48 58 63 60 
12d89     5D 4B 2B 17 | 	byte	$e3, $e4, $ef, $ee, $fb, $08, $15, $2e, $48, $58, $63, $60, $5d, $4b, $2b, $17
12d8d     FB E7 E1 C5 
12d91     C5 C3 CB DB 
12d95     EE FA 0B 12 
12d99     05 F7 E4 C9 | 	byte	$fb, $e7, $e1, $c5, $c5, $c3, $cb, $db, $ee, $fa, $0b, $12, $05, $f7, $e4, $c9
12d9d     BB B9 B9 BC 
12da1     BF C7 D1 DE 
12da5     E8 F5 FF 03 
12da9     00 EE E4 DE | 	byte	$bb, $b9, $b9, $bc, $bf, $c7, $d1, $de, $e8, $f5, $ff, $03, $00, $ee, $e4, $de
12dad     E0 F0 04 1E 
12db1     36 4E 67 6D 
12db5     75 6E 64 4C 
12db9     36 16 F3 E1 | 	byte	$e0, $f0, $04, $1e, $36, $4e, $67, $6d, $75, $6e, $64, $4c, $36, $16, $f3, $e1
12dbd     D0 CD C8 D1 
12dc1     DF E4 E9 D6 
12dc5     D1 CA CA CA 
12dc9     CC CF D0 DA | 	byte	$d0, $cd, $c8, $d1, $df, $e4, $e9, $d6, $d1, $ca, $ca, $ca, $cc, $cf, $d0, $da
12dcd     E3 DC E8 ED 
12dd1     EE F3 F0 E3 
12dd5     E4 E4 EB F2 
12dd9     FC 09 12 0A | 	byte	$e3, $dc, $e8, $ed, $ee, $f3, $f0, $e3, $e4, $e4, $eb, $f2, $fc, $09, $12, $0a
12ddd     09 FE F8 E9 
12de1     DC D2 CD CB 
12de5     D5 DA F8 0E 
12de9     27 46 5D 69 | 	byte	$09, $fe, $f8, $e9, $dc, $d2, $cd, $cb, $d5, $da, $f8, $0e, $27, $46, $5d, $69
12ded     6C 52 43 28 
12df1     19 12 0D 0D 
12df5     01 FD FE F9 
12df9     FA F2 F2 ED | 	byte	$6c, $52, $43, $28, $19, $12, $0d, $0d, $01, $fd, $fe, $f9, $fa, $f2, $f2, $ed
12dfd     E3 D4 C8 B5 
12e01     B6 C5 D8 EF 
12e05     06 17 23 31 
12e09     38 40 34 2C | 	byte	$e3, $d4, $c8, $b5, $b6, $c5, $d8, $ef, $06, $17, $23, $31, $38, $40, $34, $2c
12e0d     1D 01 EE D7 
12e11     D2 D3 D6 E8 
12e15     03 17 1E 1D 
12e19     16 0D 05 05 | 	byte	$1d, $01, $ee, $d7, $d2, $d3, $d6, $e8, $03, $17, $1e, $1d, $16, $0d, $05, $05
12e1d     FE F9 F4 EA 
12e21     E4 DE DC D7 
12e25     D8 DB D6 CA 
12e29     C1 C2 CD E5 | 	byte	$fe, $f9, $f4, $ea, $e4, $de, $dc, $d7, $d8, $db, $d6, $ca, $c1, $c2, $cd, $e5
12e2d     F7 11 20 37 
12e31     37 39 3E 38 
12e35     31 1C 09 ED 
12e39     D0 BD B7 B9 | 	byte	$f7, $11, $20, $37, $37, $39, $3e, $38, $31, $1c, $09, $ed, $d0, $bd, $b7, $b9
12e3d     C4 D6 DF F4 
12e41     F7 EC DE D4 
12e45     CC CB D0 DB 
12e49     EB FF 11 1F | 	byte	$c4, $d6, $df, $f4, $f7, $ec, $de, $d4, $cc, $cb, $d0, $db, $eb, $ff, $11, $1f
12e4d     32 36 3B 3A 
12e51     30 1B 0A F4 
12e55     EE E1 DF EC 
12e59     E9 EA EC EA | 	byte	$32, $36, $3b, $3a, $30, $1b, $0a, $f4, $ee, $e1, $df, $ec, $e9, $ea, $ec, $ea
12e5d     EF FB FA F2 
12e61     E8 DA C1 A7 
12e65     A3 A4 B4 C7 
12e69     E1 FC 15 1A | 	byte	$ef, $fb, $fa, $f2, $e8, $da, $c1, $a7, $a3, $a4, $b4, $c7, $e1, $fc, $15, $1a
12e6d     1D 1D 25 2B 
12e71     31 3B 37 37 
12e75     30 27 1A 07 
12e79     00 F3 F1 F0 | 	byte	$1d, $1d, $25, $2b, $31, $3b, $37, $37, $30, $27, $1a, $07, $00, $f3, $f1, $f0
12e7d     E0 DE DD E8 
12e81     F5 11 1F 2A 
12e85     33 32 32 35 
12e89     34 2F 16 05 | 	byte	$e0, $de, $dd, $e8, $f5, $11, $1f, $2a, $33, $32, $32, $35, $34, $2f, $16, $05
12e8d     EA D9 D6 D6 
12e91     E6 F3 00 13 
12e95     0E FD DC CF 
12e99     BA AF AB AF | 	byte	$ea, $d9, $d6, $d6, $e6, $f3, $00, $13, $0e, $fd, $dc, $cf, $ba, $af, $ab, $af
12e9d     B1 C1 C8 DC 
12ea1     E5 EB FA FC 
12ea5     F9 EF DD D1 
12ea9     CA CB DB F6 | 	byte	$b1, $c1, $c8, $dc, $e5, $eb, $fa, $fc, $f9, $ef, $dd, $d1, $ca, $cb, $db, $f6
12ead     07 2B 3E 54 
12eb1     60 6C 78 75 
12eb5     65 4F 20 FD 
12eb9     E1 CD C5 C0 | 	byte	$07, $2b, $3e, $54, $60, $6c, $78, $75, $65, $4f, $20, $fd, $e1, $cd, $c5, $c0
12ebd     C2 CC D0 D2 
12ec1     CF CF D0 D2 
12ec5     D7 DD DB D6 
12ec9     D6 D9 E3 E1 | 	byte	$c2, $cc, $d0, $d2, $cf, $cf, $d0, $d2, $d7, $dd, $db, $d6, $d6, $d9, $e3, $e1
12ecd     E9 EA E8 E9 
12ed1     E9 E4 E8 E0 
12ed5     E7 EE F3 02 
12ed9     FE F6 F6 F3 | 	byte	$e9, $ea, $e8, $e9, $e9, $e4, $e8, $e0, $e7, $ee, $f3, $02, $fe, $f6, $f6, $f3
12edd     F5 FC FD FD 
12ee1     EB E4 DB D7 
12ee5     E3 F0 02 14 
12ee9     2E 32 35 2F | 	byte	$f5, $fc, $fd, $fd, $eb, $e4, $db, $d7, $e3, $f0, $02, $14, $2e, $32, $35, $2f
12eed     26 25 1B 1D 
12ef1     1D 27 25 2A 
12ef5     29 24 15 0B 
12ef9     FE DC C3 B0 | 	byte	$26, $25, $1b, $1d, $1d, $27, $25, $2a, $29, $24, $15, $0b, $fe, $dc, $c3, $b0
12efd     AB A7 AB BD 
12f01     CC E2 F8 04 
12f05     0D 1D 2A 38 
12f09     3A 3A 20 0E | 	byte	$ab, $a7, $ab, $bd, $cc, $e2, $f8, $04, $0d, $1d, $2a, $38, $3a, $3a, $20, $0e
12f0d     F8 E9 EA EA 
12f11     FA 06 10 0F 
12f15     04 FF F5 F0 
12f19     EB F2 F3 FF | 	byte	$f8, $e9, $ea, $ea, $fa, $06, $10, $0f, $04, $ff, $f5, $f0, $eb, $f2, $f3, $ff
12f1d     FF 01 00 FD 
12f21     E8 DD D6 C9 
12f25     C4 C3 C3 C6 
12f29     D7 E3 F6 F7 | 	byte	$ff, $01, $00, $fd, $e8, $dd, $d6, $c9, $c4, $c3, $c3, $c6, $d7, $e3, $f6, $f7
12f2d     F9 01 01 08 
12f31     12 1C 21 1D 
12f35     04 ED D6 C9 
12f39     C5 C6 D2 DB | 	byte	$f9, $01, $01, $08, $12, $1c, $21, $1d, $04, $ed, $d6, $c9, $c5, $c6, $d2, $db
12f3d     ED F1 ED ED 
12f41     EC EA EF F1 
12f45     FC 07 0F 18 
12f49     1D 1C 1D 1C | 	byte	$ed, $f1, $ed, $ed, $ec, $ea, $ef, $f1, $fc, $07, $0f, $18, $1d, $1c, $1d, $1c
12f4d     1A 1A 10 0F 
12f51     08 F2 E6 CF 
12f55     D6 D3 D2 DD 
12f59     DD E2 EE F9 | 	byte	$1a, $1a, $10, $0f, $08, $f2, $e6, $cf, $d6, $d3, $d2, $dd, $dd, $e2, $ee, $f9
12f5d     01 F5 E1 C6 
12f61     B8 A8 A7 AB 
12f65     B7 C6 DA ED 
12f69     F1 F8 10 10 | 	byte	$01, $f5, $e1, $c6, $b8, $a8, $a7, $ab, $b7, $c6, $da, $ed, $f1, $f8, $10, $10
12f6d     1E 30 41 4D 
12f71     51 56 4F 3F 
12f75     28 18 06 EC 
12f79     E3 D6 D2 D0 | 	byte	$1e, $30, $41, $4d, $51, $56, $4f, $3f, $28, $18, $06, $ec, $e3, $d6, $d2, $d0
12f7d     DD E6 FE 0F 
12f81     20 32 39 31 
12f85     28 28 20 23 
12f89     16 06 F0 ED | 	byte	$dd, $e6, $fe, $0f, $20, $32, $39, $31, $28, $28, $20, $23, $16, $06, $f0, $ed
12f8d     E8 E9 F3 EC 
12f91     E5 D5 C2 B6 
12f95     B1 AB AF B2 
12f99     BF D3 E3 EC | 	byte	$e8, $e9, $f3, $ec, $e5, $d5, $c2, $b6, $b1, $ab, $af, $b2, $bf, $d3, $e3, $ec
12f9d     FC 00 FD FE 
12fa1     FD FB F4 F2 
12fa5     E8 E3 E5 E8 
12fa9     F3 FC 09 12 | 	byte	$fc, $00, $fd, $fe, $fd, $fb, $f4, $f2, $e8, $e3, $e5, $e8, $f3, $fc, $09, $12
12fad     1D 2A 34 42 
12fb1     58 5A 53 3D 
12fb5     1D 03 DE C5 
12fb9     B9 B7 B8 BA | 	byte	$1d, $2a, $34, $42, $58, $5a, $53, $3d, $1d, $03, $de, $c5, $b9, $b7, $b8, $ba
12fbd     B9 BE C8 D7 
12fc1     E1 DA DC E1 
12fc5     EB F1 F7 F3 
12fc9     F2 E7 E6 E5 | 	byte	$b9, $be, $c8, $d7, $e1, $da, $dc, $e1, $eb, $f1, $f7, $f3, $f2, $e7, $e6, $e5
12fcd     E5 EA EC E4 
12fd1     DB DB E0 E1 
12fd5     E9 EE F0 F2 
12fd9     F3 FB 04 03 | 	byte	$e5, $ea, $ec, $e4, $db, $db, $e0, $e1, $e9, $ee, $f0, $f2, $f3, $fb, $04, $03
12fdd     05 F9 EB E2 
12fe1     E3 E1 F5 05 
12fe5     18 28 21 26 
12fe9     1E 14 16 11 | 	byte	$05, $f9, $eb, $e2, $e3, $e1, $f5, $05, $18, $28, $21, $26, $1e, $14, $16, $11
12fed     1D 26 35 3C 
12ff1     44 3D 2A 09 
12ff5     EC D3 C5 B2 
12ff9     AF AA A8 A9 | 	byte	$1d, $26, $35, $3c, $44, $3d, $2a, $09, $ec, $d3, $c5, $b2, $af, $aa, $a8, $a9
12ffd     B9 C6 DC F3 
13001     03 0C 1B 27 
13005     3E 4B 50 40 
13009     31 24 09 04 | 	byte	$b9, $c6, $dc, $f3, $03, $0c, $1b, $27, $3e, $4b, $50, $40, $31, $24, $09, $04
1300d     FE F9 F7 EB 
13011     D7 CB CF D2 
13015     E3 EC FF 0F 
13019     1A 26 23 0E | 	byte	$fe, $f9, $f7, $eb, $d7, $cb, $cf, $d2, $e3, $ec, $ff, $0f, $1a, $26, $23, $0e
1301d     F9 E8 D1 CC 
13021     C8 CC CE D8 
13025     D4 CA CC CC 
13029     CF D9 E6 E9 | 	byte	$f9, $e8, $d1, $cc, $c8, $cc, $ce, $d8, $d4, $ca, $cc, $cc, $cf, $d9, $e6, $e9
1302d     F5 02 10 1D 
13031     21 1B 10 00 
13035     EF E6 DE E3 
13039     EA E8 DB DB | 	byte	$f5, $02, $10, $1d, $21, $1b, $10, $00, $ef, $e6, $de, $e3, $ea, $e8, $db, $db
1303d     D8 DB E2 E7 
13041     EE FC 08 16 
13045     28 30 2D 2C 
13049     29 27 25 27 | 	byte	$d8, $db, $e2, $e7, $ee, $fc, $08, $16, $28, $30, $2d, $2c, $29, $27, $25, $27
1304d     1A FD E2 CF 
13051     BF B8 BC BF 
13055     C7 D1 DA D3 
13059     D6 DD DB D1 | 	byte	$1a, $fd, $e2, $cf, $bf, $b8, $bc, $bf, $c7, $d1, $da, $d3, $d6, $dd, $db, $d1
1305d     C8 C7 B7 B9 
13061     BA C7 DB E9 
13065     EB F9 02 16 
13069     24 3C 49 58 | 	byte	$c8, $c7, $b7, $b9, $ba, $c7, $db, $e9, $eb, $f9, $02, $16, $24, $3c, $49, $58
1306d     64 66 66 5A 
13071     41 21 08 F4 
13075     E5 E2 E0 EA 
13079     E6 EB F5 02 | 	byte	$64, $66, $66, $5a, $41, $21, $08, $f4, $e5, $e2, $e0, $ea, $e6, $eb, $f5, $02
1307d     0E 1A 12 12 
13081     08 0A 0D 18 
13085     1C 11 16 0B 
13089     03 EE E0 DC | 	byte	$0e, $1a, $12, $12, $08, $0a, $0d, $18, $1c, $11, $16, $0b, $03, $ee, $e0, $dc
1308d     CB C6 A9 A8 
13091     A1 A5 AF BD 
13095     D4 E4 FB 0B 
13099     1C 20 20 16 | 	byte	$cb, $c6, $a9, $a8, $a1, $a5, $af, $bd, $d4, $e4, $fb, $0b, $1c, $20, $20, $16
1309d     12 FD FC EE 
130a1     F2 F0 DE E0 
130a5     D6 DB E6 EF 
130a9     FD 11 23 31 | 	byte	$12, $fd, $fc, $ee, $f2, $f0, $de, $e0, $d6, $db, $e6, $ef, $fd, $11, $23, $31
130ad     49 56 5A 4F 
130b1     3B 1C 03 E5 
130b5     CE C7 C2 C1 
130b9     B6 B6 B8 B6 | 	byte	$49, $56, $5a, $4f, $3b, $1c, $03, $e5, $ce, $c7, $c2, $c1, $b6, $b6, $b8, $b6
130bd     B6 B9 C4 CD 
130c1     DB ED FD 00 
130c5     FF F4 F5 ED 
130c9     F0 F2 FC FA | 	byte	$b6, $b9, $c4, $cd, $db, $ed, $fd, $00, $ff, $f4, $f5, $ed, $f0, $f2, $fc, $fa
130cd     F5 F5 EB E7 
130d1     E9 E8 E9 E9 
130d5     E2 E3 E4 F4 
130d9     FB FB FD FD | 	byte	$f5, $f5, $eb, $e7, $e9, $e8, $e9, $e9, $e2, $e3, $e4, $f4, $fb, $fb, $fd, $fd
130dd     FD FD FF 09 
130e1     0F 0F 04 FF 
130e5     FF 01 08 11 
130e9     20 32 3B 4E | 	byte	$fd, $fd, $ff, $09, $0f, $0f, $04, $ff, $ff, $01, $08, $11, $20, $32, $3b, $4e
130ed     4C 40 27 0E 
130f1     F9 E0 CD C8 
130f5     C9 C6 C5 C5 
130f9     C3 CE DC E3 | 	byte	$4c, $40, $27, $0e, $f9, $e0, $cd, $c8, $c9, $c6, $c5, $c5, $c3, $ce, $dc, $e3
130fd     F7 09 15 28 
13101     34 46 42 44 
13105     33 25 17 FC 
13109     F2 E8 DD CA | 	byte	$f7, $09, $15, $28, $34, $46, $42, $44, $33, $25, $17, $fc, $f2, $e8, $dd, $ca
1310d     BF BD C8 D7 
13111     E9 FE 0A 16 
13115     1B 22 21 1F 
13119     12 04 F7 EB | 	byte	$bf, $bd, $c8, $d7, $e9, $fe, $0a, $16, $1b, $22, $21, $1f, $12, $04, $f7, $eb
1311d     D9 DD D6 C8 
13121     C6 BC B3 AB 
13125     B3 B4 C6 D5 
13129     E3 F6 FF 19 | 	byte	$d9, $dd, $d6, $c8, $c6, $bc, $b3, $ab, $b3, $b4, $c6, $d5, $e3, $f6, $ff, $19
1312d     19 27 2A 29 
13131     1F 1A 10 07 
13135     FA EB D4 C5 
13139     C6 C6 CB D5 | 	byte	$19, $27, $2a, $29, $1f, $1a, $10, $07, $fa, $eb, $d4, $c5, $c6, $c6, $cb, $d5
1313d     E9 F9 0A 21 
13141     36 42 3F 42 
13145     35 2A 17 0B 
13149     FA EE E2 CF | 	byte	$e9, $f9, $0a, $21, $36, $42, $3f, $42, $35, $2a, $17, $0b, $fa, $ee, $e2, $cf
1314d     BE BB B0 B7 
13151     B5 B4 B6 B6 
13155     B6 C3 CB DA 
13159     DE E0 DF DD | 	byte	$be, $bb, $b0, $b7, $b5, $b4, $b6, $b6, $b6, $c3, $cb, $da, $de, $e0, $df, $dd
1315d     DC E6 E6 E8 
13161     ED F4 05 1B 
13165     2B 3B 3E 4A 
13169     46 47 4A 3F | 	byte	$dc, $e6, $e6, $e8, $ed, $f4, $05, $1b, $2b, $3b, $3e, $4a, $46, $47, $4a, $3f
1316d     31 2A 1C 10 
13171     07 02 06 09 
13175     11 13 0E FF 
13179     FF F4 F5 FA | 	byte	$31, $2a, $1c, $10, $07, $02, $06, $09, $11, $13, $0e, $ff, $ff, $f4, $f5, $fa
1317d     00 04 03 0D 
13181     0D 15 0E 05 
13185     FB EB D8 C5 
13189     BC A4 9C 96 | 	byte	$00, $04, $03, $0d, $0d, $15, $0e, $05, $fb, $eb, $d8, $c5, $bc, $a4, $9c, $96
1318d     9A A6 BA CF 
13191     DC F7 06 1B 
13195     2D 38 36 36 
13199     25 13 FE EE | 	byte	$9a, $a6, $ba, $cf, $dc, $f7, $06, $1b, $2d, $38, $36, $36, $25, $13, $fe, $ee
1319d     E7 E2 E5 E4 
131a1     E5 E6 E6 EE 
131a5     FD 0F 21 2D 
131a9     2C 2A 23 1E | 	byte	$e7, $e2, $e5, $e4, $e5, $e6, $e6, $ee, $fd, $0f, $21, $2d, $2c, $2a, $23, $1e
131ad     1F 15 0D FD 
131b1     F0 E2 DE C0 
131b5     B0 A4 A2 A4 
131b9     A7 B3 C5 D7 | 	byte	$1f, $15, $0d, $fd, $f0, $e2, $de, $c0, $b0, $a4, $a2, $a4, $a7, $b3, $c5, $d7
131bd     E8 F4 02 0B 
131c1     0E 0E 0F 0D 
131c5     0F 0D 08 07 
131c9     09 FD ED D6 | 	byte	$e8, $f4, $02, $0b, $0e, $0e, $0f, $0d, $0f, $0d, $08, $07, $09, $fd, $ed, $d6
131cd     C5 BC B9 BF 
131d1     CE D5 E2 E7 
131d5     EE FD 0A 14 
131d9     1C 1C 12 07 | 	byte	$c5, $bc, $b9, $bf, $ce, $d5, $e2, $e7, $ee, $fd, $0a, $14, $1c, $1c, $12, $07
131dd     0A F8 F5 F7 
131e1     01 07 17 21 
131e5     2F 2A 2A 27 
131e9     1D 14 07 02 | 	byte	$0a, $f8, $f5, $f7, $01, $07, $17, $21, $2f, $2a, $2a, $27, $1d, $14, $07, $02
131ed     F4 EF E8 DE 
131f1     E0 E0 EB E8 
131f5     E9 E6 E6 F0 
131f9     FE 11 2D 32 | 	byte	$f4, $ef, $e8, $de, $e0, $e0, $eb, $e8, $e9, $e6, $e6, $f0, $fe, $11, $2d, $32
131fd     35 27 1F 16 
13201     17 17 12 0E 
13205     FD EF E2 CF 
13209     CB CC D9 E2 | 	byte	$35, $27, $1f, $16, $17, $17, $12, $0e, $fd, $ef, $e2, $cf, $cb, $cc, $d9, $e2
1320d     F0 F4 03 07 
13211     11 12 14 12 
13215     13 09 05 ED 
13219     DB CA BA BE | 	byte	$f0, $f4, $03, $07, $11, $12, $14, $12, $13, $09, $05, $ed, $db, $ca, $ba, $be
1321d     BC B9 BA B9 
13221     B6 B9 CA D6 
13225     F3 FC 09 0E 
13229     18 26 30 3E | 	byte	$bc, $b9, $ba, $b9, $b6, $b9, $ca, $d6, $f3, $fc, $09, $0e, $18, $26, $30, $3e
1322d     42 34 1F 03 
13231     E5 C7 B3 B1 
13235     B4 BF D3 E5 
13239     FF 13 28 38 | 	byte	$42, $34, $1f, $03, $e5, $c7, $b3, $b1, $b4, $bf, $d3, $e5, $ff, $13, $28, $38
1323d     4A 43 42 3D 
13241     32 2C 1D 0B 
13245     FB F8 F1 E7 
13249     D8 B8 A3 94 | 	byte	$4a, $43, $42, $3d, $32, $2c, $1d, $0b, $fb, $f8, $f1, $e7, $d8, $b8, $a3, $94
1324d     91 93 A0 A5 
13251     B3 B1 B9 C5 
13255     DC E9 F6 FB 
13259     FA FA F2 F3 | 	byte	$91, $93, $a0, $a5, $b3, $b1, $b9, $c5, $dc, $e9, $f6, $fb, $fa, $fa, $f2, $f3
1325d     F3 04 12 1F 
13261     29 28 2A 2D 
13265     32 36 36 31 
13269     37 34 34 34 | 	byte	$f3, $04, $12, $1f, $29, $28, $2a, $2d, $32, $36, $36, $31, $37, $34, $34, $34
1326d     28 29 28 28 
13271     1D 1C 0C FB 
13275     E9 DD DF EF 
13279     FD 09 10 FD | 	byte	$28, $29, $28, $28, $1d, $1c, $0c, $fb, $e9, $dd, $df, $ef, $fd, $09, $10, $fd
1327d     F4 EF F2 F5 
13281     FA F7 E5 D6 
13285     BD AD A6 A9 
13289     AE C1 CD E4 | 	byte	$f4, $ef, $f2, $f5, $fa, $f7, $e5, $d6, $bd, $ad, $a6, $a9, $ae, $c1, $cd, $e4
1328d     FD 13 24 39 
13291     37 35 2A 1A 
13295     09 FB EF E3 
13299     E0 E1 E4 F0 | 	byte	$fd, $13, $24, $39, $37, $35, $2a, $1a, $09, $fb, $ef, $e3, $e0, $e1, $e4, $f0
1329d     F0 ED E8 E9 
132a1     EE 01 00 11 
132a5     15 0E 08 0A 
132a9     0F 1E 2B 2E | 	byte	$f0, $ed, $e8, $e9, $ee, $01, $00, $11, $15, $0e, $08, $0a, $0f, $1e, $2b, $2e
132ad     1E 01 E6 B9 
132b1     AA 9B 9A 9B 
132b5     9E B3 BF D8 
132b9     ED 06 06 0B | 	byte	$1e, $01, $e6, $b9, $aa, $9b, $9a, $9b, $9e, $b3, $bf, $d8, $ed, $06, $06, $0b
132bd     10 15 24 2E 
132c1     31 2B 22 19 
132c5     02 F8 E4 C9 
132c9     BB AF B1 BE | 	byte	$10, $15, $24, $2e, $31, $2b, $22, $19, $02, $f8, $e4, $c9, $bb, $af, $b1, $be
132cd     CD E4 EF EC 
132d1     E7 F3 00 11 
132d5     1D 1A 1C 12 
132d9     02 E9 E4 EB | 	byte	$cd, $e4, $ef, $ec, $e7, $f3, $00, $11, $1d, $1a, $1c, $12, $02, $e9, $e4, $eb
132dd     F2 06 0F 0D 
132e1     10 13 13 13 
132e5     0E 0A 06 05 
132e9     07 0C 15 16 | 	byte	$f2, $06, $0f, $0d, $10, $13, $13, $13, $0e, $0a, $06, $05, $07, $0c, $15, $16
132ed     14 0F 0F 0E 
132f1     0E 0D 01 FD 
132f5     F8 FF FE FF 
132f9     02 F7 EA F0 | 	byte	$14, $0f, $0f, $0e, $0e, $0d, $01, $fd, $f8, $ff, $fe, $ff, $02, $f7, $ea, $f0
132fd     F7 0B 1E 26 
13301     21 11 FF E7 
13305     DA DF DF E1 
13309     EE FC 00 0C | 	byte	$f7, $0b, $1e, $26, $21, $11, $ff, $e7, $da, $df, $df, $e1, $ee, $fc, $00, $0c
1330d     16 1C 1A 1C 
13311     15 FF F7 EF 
13315     E0 DB CC C8 
13319     C1 C1 C1 BF | 	byte	$16, $1c, $1a, $1c, $15, $ff, $f7, $ef, $e0, $db, $cc, $c8, $c1, $c1, $c1, $bf
1331d     BF BE BE C6 
13321     CD E8 F5 02 
13325     04 0A 19 2B 
13329     2D 2E 29 16 | 	byte	$bf, $be, $be, $c6, $cd, $e8, $f5, $02, $04, $0a, $19, $2b, $2d, $2e, $29, $16
1332d     FC E7 D7 D6 
13331     DD DF EA F2 
13335     F8 0D 1B 2D 
13339     29 2E 26 28 | 	byte	$fc, $e7, $d7, $d6, $dd, $df, $ea, $f2, $f8, $0d, $1b, $2d, $29, $2e, $26, $28
1333d     23 21 21 11 
13341     0D 08 FE E7 
13345     D7 C7 B5 A3 
13349     9A 96 9A AF | 	byte	$23, $21, $21, $11, $0d, $08, $fe, $e7, $d7, $c7, $b5, $a3, $9a, $96, $9a, $af
1334d     B7 BD BD C4 
13351     CE DE F1 03 
13355     11 13 14 02 
13359     FF F8 FA F7 | 	byte	$b7, $bd, $bd, $c4, $ce, $de, $f1, $03, $11, $13, $14, $02, $ff, $f8, $fa, $f7
1335d     F5 FA 00 0E 
13361     1B 2D 31 42 
13365     3F 41 43 44 
13369     50 4F 4E 44 | 	byte	$f5, $fa, $00, $0e, $1b, $2d, $31, $42, $3f, $41, $43, $44, $50, $4f, $4e, $44
1336d     3E 2E 27 13 
13371     02 F2 EA E5 
13375     E5 E8 E8 E0 
13379     DB CC CA D5 | 	byte	$3e, $2e, $27, $13, $02, $f2, $ea, $e5, $e5, $e8, $e8, $e0, $db, $cc, $ca, $d5
1337d     DE EC EF EE 
13381     EE D7 D0 CB 
13385     CE D8 E7 F3 
13389     04 12 1E 22 | 	byte	$de, $ec, $ef, $ee, $ee, $d7, $d0, $cb, $ce, $d8, $e7, $f3, $04, $12, $1e, $22
1338d     20 16 0D 04 
13391     00 00 07 0E 
13395     0E 15 14 0D 
13399     03 FB F5 E7 | 	byte	$20, $16, $0d, $04, $00, $00, $07, $0e, $0e, $15, $14, $0d, $03, $fb, $f5, $e7
1339d     DE DB DF E4 
133a1     EA EC E7 E6 
133a5     EB F7 0B 12 
133a9     15 13 09 EA | 	byte	$de, $db, $df, $e4, $ea, $ec, $e7, $e6, $eb, $f7, $0b, $12, $15, $13, $09, $ea
133ad     D1 C8 BC B9 
133b1     BA BD C9 D7 
133b5     EA F3 FD 03 
133b9     0C 1B 1E 2C | 	byte	$d1, $c8, $bc, $b9, $ba, $bd, $c9, $d7, $ea, $f3, $fd, $03, $0c, $1b, $1e, $2c
133bd     2F 23 1E 0B 
133c1     FF F2 E5 DE 
133c5     DD D8 D9 DB 
133c9     E5 E9 F2 F1 | 	byte	$2f, $23, $1e, $0b, $ff, $f2, $e5, $de, $dd, $d8, $d9, $db, $e5, $e9, $f2, $f1
133cd     F0 EE E7 EE 
133d1     F8 05 0A 11 
133d5     17 FB F9 F4 
133d9     FB F5 F6 F3 | 	byte	$f0, $ee, $e7, $ee, $f8, $05, $0a, $11, $17, $fb, $f9, $f4, $fb, $f5, $f6, $f3
133dd     F3 F2 F3 F2 
133e1     F3 F6 FE 0C 
133e5     15 29 3E 40 
133e9     47 4D 4C 45 | 	byte	$f3, $f2, $f3, $f2, $f3, $f6, $fe, $0c, $15, $29, $3e, $40, $47, $4d, $4c, $45
133ed     40 31 1F 05 
133f1     F1 D7 CC C4 
133f5     CB D4 D8 DD 
133f9     EB F9 0B 1E | 	byte	$40, $31, $1f, $05, $f1, $d7, $cc, $c4, $cb, $d4, $d8, $dd, $eb, $f9, $0b, $1e
133fd     20 21 21 0A 
13401     FE F4 F6 F9 
13405     FB FB FE FE 
13409     00 03 06 FF | 	byte	$20, $21, $21, $0a, $fe, $f4, $f6, $f9, $fb, $fb, $fe, $fe, $00, $03, $06, $ff
1340d     FF F8 F7 F5 
13411     F5 F0 EC ED 
13415     E5 E8 E8 E8 
13419     E8 E0 DB D2 | 	byte	$ff, $f8, $f7, $f5, $f5, $f0, $ec, $ed, $e5, $e8, $e8, $e8, $e8, $e0, $db, $d2
1341d     D4 D6 DE E4 
13421     E1 E3 DE DF 
13425     E7 F6 03 16 
13429     1F 1C 1C 1C | 	byte	$d4, $d6, $de, $e4, $e1, $e3, $de, $df, $e7, $f6, $03, $16, $1f, $1c, $1c, $1c
1342d     1D 20 1B 12 
13431     09 FE F9 F0 
13435     F8 F5 F6 00 
13439     FE 0E 10 15 | 	byte	$1d, $20, $1b, $12, $09, $fe, $f9, $f0, $f8, $f5, $f6, $00, $fe, $0e, $10, $15
1343d     16 0B 0A FF 
13441     F7 EA E1 D4 
13445     C8 BA B5 AF 
13449     BB C3 C8 D1 | 	byte	$16, $0b, $0a, $ff, $f7, $ea, $e1, $d4, $c8, $ba, $b5, $af, $bb, $c3, $c8, $d1
1344d     CF D4 DE ED 
13451     F4 09 0A FF 
13455     F4 E7 EA ED 
13459     F8 FE 07 07 | 	byte	$cf, $d4, $de, $ed, $f4, $09, $0a, $ff, $f4, $e7, $ea, $ed, $f8, $fe, $07, $07
1345d     17 1C 2A 2D 
13461     3C 43 42 4E 
13465     4B 50 59 58 
13469     58 57 4F 41 | 	byte	$17, $1c, $2a, $2d, $3c, $43, $42, $4e, $4b, $50, $59, $58, $58, $57, $4f, $41
1346d     33 25 12 F3 
13471     DA C7 BF B9 
13475     AF AF B0 AB 
13479     B7 C6 D3 EE | 	byte	$33, $25, $12, $f3, $da, $c7, $bf, $b9, $af, $af, $b0, $ab, $b7, $c6, $d3, $ee
1347d     F9 FB F7 F5 
13481     FF 03 11 18 
13485     16 11 02 FE 
13489     FD F8 FA FF | 	byte	$f9, $fb, $f7, $f5, $ff, $03, $11, $18, $16, $11, $02, $fe, $fd, $f8, $fa, $ff
1348d     04 0D 1A 1E 
13491     2C 2F 2C 2C 
13495     1F 11 04 FC 
13499     EE E1 D7 CD | 	byte	$04, $0d, $1a, $1e, $2c, $2f, $2c, $2c, $1f, $11, $04, $fc, $ee, $e1, $d7, $cd
1349d     C9 C9 C6 CD 
134a1     D3 D2 D3 DE 
134a5     ED FF 08 0E 
134a9     00 FD FD FA | 	byte	$c9, $c9, $c6, $cd, $d3, $d2, $d3, $de, $ed, $ff, $08, $0e, $00, $fd, $fd, $fa
134ad     FF 04 05 FB 
134b1     F1 EB E4 DF 
134b5     E3 E5 ED F2 
134b9     F3 FB F9 00 | 	byte	$ff, $04, $05, $fb, $f1, $eb, $e4, $df, $e3, $e5, $ed, $f2, $f3, $fb, $f9, $00
134bd     00 02 01 08 
134c1     09 0E 18 13 
134c5     12 07 FF F4 
134c9     EA E4 DF DA | 	byte	$00, $02, $01, $08, $09, $0e, $18, $13, $12, $07, $ff, $f4, $ea, $e4, $df, $da
134cd     D9 D8 E3 F3 
134d1     F8 01 F9 E9 
134d5     E4 E5 EA F5 
134d9     F6 F9 F9 EF | 	byte	$d9, $d8, $e3, $f3, $f8, $01, $f9, $e9, $e4, $e5, $ea, $f5, $f6, $f9, $f9, $ef
134dd     F2 F3 FF 12 
134e1     24 35 41 4F 
134e5     59 5D 5E 5E 
134e9     56 4C 3C 2A | 	byte	$f2, $f3, $ff, $12, $24, $35, $41, $4f, $59, $5d, $5e, $5e, $56, $4c, $3c, $2a
134ed     19 11 F8 E6 
134f1     D3 C8 BF C3 
134f5     C6 CD DC E8 
134f9     F4 00 00 07 | 	byte	$19, $11, $f8, $e6, $d3, $c8, $bf, $c3, $c6, $cd, $dc, $e8, $f4, $00, $00, $07
134fd     FE F9 F2 F5 
13501     00 08 10 14 
13505     0E 08 FA F6 
13509     F6 F7 FF 00 | 	byte	$fe, $f9, $f2, $f5, $00, $08, $10, $14, $0e, $08, $fa, $f6, $f6, $f7, $ff, $00
1350d     03 0B 0A 0D 
13511     0F 10 0D 03 
13515     FF FE F4 F0 
13519     E2 D4 C2 B6 | 	byte	$03, $0b, $0a, $0d, $0f, $10, $0d, $03, $ff, $fe, $f4, $f0, $e2, $d4, $c2, $b6
1351d     AF AB B2 BE 
13521     CD D9 E6 FF 
13525     14 30 32 37 
13529     39 3B 43 43 | 	byte	$af, $ab, $b2, $be, $cd, $d9, $e6, $ff, $14, $30, $32, $37, $39, $3b, $43, $43
1352d     38 29 12 FE 
13531     E9 DC D2 CD 
13535     CF D9 E7 EB 
13539     E9 EE F4 F3 | 	byte	$38, $29, $12, $fe, $e9, $dc, $d2, $cd, $cf, $d9, $e7, $eb, $e9, $ee, $f4, $f3
1353d     FB FB F9 FB 
13541     FD FE FD F8 
13545     E9 E5 DE DC 
13549     D7 D8 D7 D2 | 	byte	$fb, $fb, $f9, $fb, $fd, $fe, $fd, $f8, $e9, $e5, $de, $dc, $d7, $d8, $d7, $d2
1354d     D4 D4 DF EC 
13551     EF E9 E8 EA 
13555     EC F7 00 0B 
13559     0F 15 16 21 | 	byte	$d4, $d4, $df, $ec, $ef, $e9, $e8, $ea, $ec, $f7, $00, $0b, $0f, $15, $16, $21
1355d     21 31 36 35 
13561     40 44 49 4F 
13565     54 5A 58 57 
13569     52 46 2F 25 | 	byte	$21, $31, $36, $35, $40, $44, $49, $4f, $54, $5a, $58, $57, $52, $46, $2f, $25
1356d     12 01 E9 D2 
13571     C2 B1 AA AC 
13575     B3 BA CA D1 
13579     DF F2 FB FA | 	byte	$12, $01, $e9, $d2, $c2, $b1, $aa, $ac, $b3, $ba, $ca, $d1, $df, $f2, $fb, $fa
1357d     F2 F2 F3 F2 
13581     F7 00 03 08 
13585     0E 0E 13 13 
13589     14 14 16 18 | 	byte	$f2, $f2, $f3, $f2, $f7, $00, $03, $08, $0e, $0e, $13, $13, $14, $14, $16, $18
1358d     1B 26 33 30 
13591     31 20 11 04 
13595     F8 F4 EA E1 
13599     D4 C6 B9 B4 | 	byte	$1b, $26, $33, $30, $31, $20, $11, $04, $f8, $f4, $ea, $e1, $d4, $c6, $b9, $b4
1359d     A4 A1 AA B4 
135a1     C6 D8 EF 06 
135a5     1D 22 25 25 
135a9     28 25 1A 1B | 	byte	$a4, $a1, $aa, $b4, $c6, $d8, $ef, $06, $1d, $22, $25, $25, $28, $25, $1a, $1b
135ad     16 0B FE FA 
135b1     E5 DA D1 CD 
135b5     CF D7 E3 E7 
135b9     F0 F8 00 FF | 	byte	$16, $0b, $fe, $fa, $e5, $da, $d1, $cd, $cf, $d7, $e3, $e7, $f0, $f8, $00, $ff
135bd     FF 06 05 10 
135c1     19 1E 1D 0D 
135c5     FF EE E6 E0 
135c9     DA DB DC DB | 	byte	$ff, $06, $05, $10, $19, $1e, $1d, $0d, $ff, $ee, $e6, $e0, $da, $db, $dc, $db
135cd     E2 F0 F2 E2 
135d1     DB D5 D6 D1 
135d5     DD E2 F0 04 
135d9     0D 1B 28 2B | 	byte	$e2, $f0, $f2, $e2, $db, $d5, $d6, $d1, $dd, $e2, $f0, $04, $0d, $1b, $28, $2b
135dd     31 2E 36 34 
135e1     35 3A 3B 40 
135e5     47 40 42 3D 
135e9     36 31 30 23 | 	byte	$31, $2e, $36, $34, $35, $3a, $3b, $40, $47, $40, $42, $3d, $36, $31, $30, $23
135ed     15 FC E3 D3 
135f1     BC B7 BC C7 
135f5     D7 E3 E1 E4 
135f9     F6 F8 F5 F6 | 	byte	$15, $fc, $e3, $d3, $bc, $b7, $bc, $c7, $d7, $e3, $e1, $e4, $f6, $f8, $f5, $f6
135fd     F3 EB ED EE 
13601     ED EC ED F8 
13605     05 11 18 1E 
13609     20 20 23 24 | 	byte	$f3, $eb, $ed, $ee, $ed, $ec, $ed, $f8, $05, $11, $18, $1e, $20, $20, $23, $24
1360d     25 27 25 15 
13611     08 FC EF E3 
13615     DE DC D5 CC 
13619     C3 C2 B7 B8 | 	byte	$25, $27, $25, $15, $08, $fc, $ef, $e3, $de, $dc, $d5, $cc, $c3, $c2, $b7, $b8
1361d     C0 CE DC E6 
13621     F5 FA 0F 20 
13625     1F 29 2D 21 
13629     18 06 04 FE | 	byte	$c0, $ce, $dc, $e6, $f5, $fa, $0f, $20, $1f, $29, $2d, $21, $18, $06, $04, $fe
1362d     04 08 07 06 
13631     FF F9 F0 DC 
13635     D4 CC CC D1 
13639     E2 E7 F6 00 | 	byte	$04, $08, $07, $06, $ff, $f9, $f0, $dc, $d4, $cc, $cc, $d1, $e2, $e7, $f6, $00
1363d     06 0C 15 14 
13641     14 08 F8 E6 
13645     D5 CD CA CE 
13649     D0 DB E1 EB | 	byte	$06, $0c, $15, $14, $14, $08, $f8, $e6, $d5, $cd, $ca, $ce, $d0, $db, $e1, $eb
1364d     FA 04 01 FE 
13651     EE E1 D3 C7 
13655     C5 D1 E5 00 
13659     1A 32 37 3C | 	byte	$fa, $04, $01, $fe, $ee, $e1, $d3, $c7, $c5, $d1, $e5, $00, $1a, $32, $37, $3c
1365d     3B 3D 3F 47 
13661     4C 51 51 53 
13665     50 3E 28 19 
13669     0D 0A 0B 06 | 	byte	$3b, $3d, $3f, $47, $4c, $51, $51, $53, $50, $3e, $28, $19, $0d, $0a, $0b, $06
1366d     FF F3 E8 DA 
13671     D8 DC E1 E7 
13675     E8 E3 E6 E8 
13679     E9 E8 E0 E1 | 	byte	$ff, $f3, $e8, $da, $d8, $dc, $e1, $e7, $e8, $e3, $e6, $e8, $e9, $e8, $e0, $e1
1367d     DA D8 DD E7 
13681     FE 0E 25 2B 
13685     29 28 1E 15 
13689     11 10 0E 18 | 	byte	$da, $d8, $dd, $e7, $fe, $0e, $25, $2b, $29, $28, $1e, $15, $11, $10, $0e, $18
1368d     14 0D 08 FC 
13691     FD F3 F5 F2 
13695     ED E9 E2 C4 
13699     AC 99 94 A1 | 	byte	$14, $0d, $08, $fc, $fd, $f3, $f5, $f2, $ed, $e9, $e2, $c4, $ac, $99, $94, $a1
1369d     B3 D5 EF 09 
136a1     21 3C 40 3F 
136a5     35 1E FF E3 
136a9     D9 D1 D8 E3 | 	byte	$b3, $d5, $ef, $09, $21, $3c, $40, $3f, $35, $1e, $ff, $e3, $d9, $d1, $d8, $e3
136ad     F3 04 07 09 
136b1     10 12 10 12 
136b5     02 F8 E9 DF 
136b9     DA D5 D8 E2 | 	byte	$f3, $04, $07, $09, $10, $12, $10, $12, $02, $f8, $e9, $df, $da, $d5, $d8, $e2
136bd     F0 FD 01 0B 
136c1     07 FD F5 E6 
136c5     E4 E8 EF F8 
136c9     FC FB F0 F0 | 	byte	$f0, $fd, $01, $0b, $07, $fd, $f5, $e6, $e4, $e8, $ef, $f8, $fc, $fb, $f0, $f0
136cd     ED E5 DF DF 
136d1     D4 D3 D8 DC 
136d5     ED 03 12 23 
136d9     25 27 29 2C | 	byte	$ed, $e5, $df, $df, $d4, $d3, $d8, $dc, $ed, $03, $12, $23, $25, $27, $29, $2c
136dd     2D 30 37 37 
136e1     3F 41 41 42 
136e5     43 3E 34 2B 
136e9     19 07 FC E8 | 	byte	$2d, $30, $37, $37, $3f, $41, $41, $42, $43, $3e, $34, $2b, $19, $07, $fc, $e8
136ed     D7 C5 C1 C8 
136f1     D1 E3 F0 F7 
136f5     F6 00 06 05 
136f9     00 FE E9 D4 | 	byte	$d7, $c5, $c1, $c8, $d1, $e3, $f0, $f7, $f6, $00, $06, $05, $00, $fe, $e9, $d4
136fd     C2 B7 BF D3 
13701     EE 0C 21 37 
13705     46 4E 4B 48 
13709     38 2A 11 04 | 	byte	$c2, $b7, $bf, $d3, $ee, $0c, $21, $37, $46, $4e, $4b, $48, $38, $2a, $11, $04
1370d     F3 EB E1 E3 
13711     DE DF E1 E6 
13715     E6 E6 E8 DE 
13719     D1 D3 CE D4 | 	byte	$f3, $eb, $e1, $e3, $de, $df, $e1, $e6, $e6, $e6, $e8, $de, $d1, $d3, $ce, $d4
1371d     DA E9 F5 03 
13721     14 15 17 0D 
13725     F5 E4 CD CF 
13729     D5 ED 03 13 | 	byte	$da, $e9, $f5, $03, $14, $15, $17, $0d, $f5, $e4, $cd, $cf, $d5, $ed, $03, $13
1372d     1F 1B 11 08 
13731     00 01 FA F1 
13735     F2 F3 F5 F7 
13739     F9 F7 F7 F2 | 	byte	$1f, $1b, $11, $08, $00, $01, $fa, $f1, $f2, $f3, $f5, $f7, $f9, $f7, $f7, $f2
1373d     F0 F0 ED F0 
13741     F1 E9 DF DB 
13745     E1 EA F8 09 
13749     15 1F 2A 1D | 	byte	$f0, $f0, $ed, $f0, $f1, $e9, $df, $db, $e1, $ea, $f8, $09, $15, $1f, $2a, $1d
1374d     0D F9 D8 C1 
13751     A6 A4 AD C3 
13755     E3 FC 0A 16 
13759     22 2C 3C 49 | 	byte	$0d, $f9, $d8, $c1, $a6, $a4, $ad, $c3, $e3, $fc, $0a, $16, $22, $2c, $3c, $49
1375d     52 56 5C 56 
13761     3D 2C 1B 09 
13765     FB FE FD 07 
13769     12 18 1A 15 | 	byte	$52, $56, $5c, $56, $3d, $2c, $1b, $09, $fb, $fe, $fd, $07, $12, $18, $1a, $15
1376d     01 F4 EB EE 
13771     F3 02 06 0F 
13775     0D 05 FC F3 
13779     E3 D6 CD CF | 	byte	$01, $f4, $eb, $ee, $f3, $02, $06, $0f, $0d, $05, $fc, $f3, $e3, $d6, $cd, $cf
1377d     E0 F2 FE 12 
13781     13 10 12 0F 
13785     10 13 18 0C 
13789     0B 01 F9 F0 | 	byte	$e0, $f2, $fe, $12, $13, $10, $12, $0f, $10, $13, $18, $0c, $0b, $01, $f9, $f0
1378d     EC EE EE F1 
13791     F6 FA E7 DD 
13795     D5 C7 B9 B7 
13799     BD D0 EB 06 | 	byte	$ec, $ee, $ee, $f1, $f6, $fa, $e7, $dd, $d5, $c7, $b9, $b7, $bd, $d0, $eb, $06
1379d     23 36 42 33 
137a1     24 09 FB E0 
137a5     CD C7 C4 D0 
137a9     E0 FB 09 12 | 	byte	$23, $36, $42, $33, $24, $09, $fb, $e0, $cd, $c7, $c4, $d0, $e0, $fb, $09, $12
137ad     1F 26 3A 3E 
137b1     3D 2B 15 FB 
137b5     E5 CF C2 BA 
137b9     BC B4 BF C7 | 	byte	$1f, $26, $3a, $3e, $3d, $2b, $15, $fb, $e5, $cf, $c2, $ba, $bc, $b4, $bf, $c7
137bd     D2 E2 EF FC 
137c1     FF FF 06 07 
137c5     05 02 03 08 
137c9     0C 01 FD F8 | 	byte	$d2, $e2, $ef, $fc, $ff, $ff, $06, $07, $05, $02, $03, $08, $0c, $01, $fd, $f8
137cd     F9 F1 E8 E8 
137d1     E5 E6 EE F8 
137d5     05 0C 1B 22 
137d9     34 37 40 44 | 	byte	$f9, $f1, $e8, $e8, $e5, $e6, $ee, $f8, $05, $0c, $1b, $22, $34, $37, $40, $44
137dd     44 46 46 46 
137e1     3C 2E 1C 04 
137e5     F5 E9 DA D7 
137e9     D8 D9 D8 CE | 	byte	$44, $46, $46, $46, $3c, $2e, $1c, $04, $f5, $e9, $da, $d7, $d8, $d9, $d8, $ce
137ed     D5 E1 F0 FE 
137f1     11 1F 30 31 
137f5     26 1E FF E9 
137f9     CD C2 C0 C1 | 	byte	$d5, $e1, $f0, $fe, $11, $1f, $30, $31, $26, $1e, $ff, $e9, $cd, $c2, $c0, $c1
137fd     DB F2 08 21 
13801     2C 2E 33 34 
13805     2A 21 19 11 
13809     10 09 04 FB | 	byte	$db, $f2, $08, $21, $2c, $2e, $33, $34, $2a, $21, $19, $11, $10, $09, $04, $fb
1380d     EE E2 E0 DF 
13811     E1 EE F9 FE 
13815     F8 EE E1 DC 
13819     D6 D6 DD ED | 	byte	$ee, $e2, $e0, $df, $e1, $ee, $f9, $fe, $f8, $ee, $e1, $dc, $d6, $d6, $dd, $ed
1381d     FF FA F2 E6 
13821     E6 D4 CD C9 
13825     D4 E3 FA 0F 
13829     15 18 14 13 | 	byte	$ff, $fa, $f2, $e6, $e6, $d4, $cd, $c9, $d4, $e3, $fa, $0f, $15, $18, $14, $13
1382d     13 18 21 1D 
13831     1C 1B 18 0D 
13835     FF F3 DA C8 
13839     C5 BE CB DA | 	byte	$13, $18, $21, $1d, $1c, $1b, $18, $0d, $ff, $f3, $da, $c8, $c5, $be, $cb, $da
1383d     E8 FA F9 F9 
13841     F9 F7 FC 07 
13845     17 29 2D 29 
13849     14 FA E7 CE | 	byte	$e8, $fa, $f9, $f9, $f9, $f7, $fc, $07, $17, $29, $2d, $29, $14, $fa, $e7, $ce
1384d     C3 BB B8 BA 
13851     CA D4 F0 FF 
13855     0A 1E 30 42 
13859     54 5F 59 52 | 	byte	$c3, $bb, $b8, $ba, $ca, $d4, $f0, $ff, $0a, $1e, $30, $42, $54, $5f, $59, $52
1385d     49 3B 28 17 
13861     00 F1 EA E2 
13865     E5 EF F7 04 
13869     FF FA FE 01 | 	byte	$49, $3b, $28, $17, $00, $f1, $ea, $e2, $e5, $ef, $f7, $04, $ff, $fa, $fe, $01
1386d     0D 24 2B 31 
13871     38 34 1A 04 
13875     F8 F0 EB ED 
13879     EC EA F4 F2 | 	byte	$0d, $24, $2b, $31, $38, $34, $1a, $04, $f8, $f0, $eb, $ed, $ec, $ea, $f4, $f2
1387d     F7 F7 F0 F0 
13881     ED EA EA EF 
13885     F1 F3 F8 FA 
13889     04 05 07 06 | 	byte	$f7, $f7, $f0, $f0, $ed, $ea, $ea, $ef, $f1, $f3, $f8, $fa, $04, $05, $07, $06
1388d     F7 E9 E2 E1 
13891     DF E4 E4 E5 
13895     E5 F0 F6 00 
13899     0B 1A 1C 1B | 	byte	$f7, $e9, $e2, $e1, $df, $e4, $e4, $e5, $e5, $f0, $f6, $00, $0b, $1a, $1c, $1b
1389d     06 FA F3 E1 
138a1     E0 E0 DF E0 
138a5     EB F1 00 0C 
138a9     16 24 2B 38 | 	byte	$06, $fa, $f3, $e1, $e0, $e0, $df, $e0, $eb, $f1, $00, $0c, $16, $24, $2b, $38
138ad     3A 33 1F 0C 
138b1     FA EA D9 C6 
138b5     B4 A8 A1 A0 
138b9     AB B1 CF ED | 	byte	$3a, $33, $1f, $0c, $fa, $ea, $d9, $c6, $b4, $a8, $a1, $a0, $ab, $b1, $cf, $ed
138bd     02 14 13 13 
138c1     13 16 1B 1D 
138c5     20 1D 09 FC 
138c9     F0 EB ED EC | 	byte	$02, $14, $13, $13, $13, $16, $1b, $1d, $20, $1d, $09, $fc, $f0, $eb, $ed, $ec
138cd     EA EC EE F9 
138d1     08 0F 1F 2C 
138d5     2E 3D 3B 3D 
138d9     42 42 44 43 | 	byte	$ea, $ec, $ee, $f9, $08, $0f, $1f, $2c, $2e, $3d, $3b, $3d, $42, $42, $44, $43
138dd     3E 33 1B 01 
138e1     EC CC B9 AF 
138e5     B4 B2 B4 C5 
138e9     D1 DF FB 10 | 	byte	$3e, $33, $1b, $01, $ec, $cc, $b9, $af, $b4, $b2, $b4, $c5, $d1, $df, $fb, $10
138ed     1F 3B 51 56 
138f1     3E 24 0F 02 
138f5     F9 F1 E8 E9 
138f9     E8 ED F4 FA | 	byte	$1f, $3b, $51, $56, $3e, $24, $0f, $02, $f9, $f1, $e8, $e9, $e8, $ed, $f4, $fa
138fd     01 07 03 08 
13901     0C 10 17 17 
13905     16 1B 18 16 
13909     0C FD F0 E6 | 	byte	$01, $07, $03, $08, $0c, $10, $17, $17, $16, $1b, $18, $16, $0c, $fd, $f0, $e6
1390d     E2 E1 E4 F4 
13911     F1 F2 F2 E8 
13915     E2 E3 E4 E4 
13919     E9 E8 D4 D1 | 	byte	$e2, $e1, $e4, $f4, $f1, $f2, $f2, $e8, $e2, $e3, $e4, $e4, $e9, $e8, $d4, $d1
1391d     C3 CB CC DE 
13921     F0 02 03 0A 
13925     11 10 12 14 
13929     13 16 1D 16 | 	byte	$c3, $cb, $cc, $de, $f0, $02, $03, $0a, $11, $10, $12, $14, $13, $16, $1d, $16
1392d     16 0E 0D 0B 
13931     01 FC EE E9 
13935     D8 D3 C9 CE 
13939     D5 E4 E9 F2 | 	byte	$16, $0e, $0d, $0b, $01, $fc, $ee, $e9, $d8, $d3, $c9, $ce, $d5, $e4, $e9, $f2
1393d     F6 F6 01 0C 
13941     1A 28 2F 2A 
13945     11 F8 DF D3 
13949     CA C6 C6 C6 | 	byte	$f6, $f6, $01, $0c, $1a, $28, $2f, $2a, $11, $f8, $df, $d3, $ca, $c6, $c6, $c6
1394d     C9 DA E7 F9 
13951     09 1B 32 47 
13955     47 4D 52 51 
13959     4E 44 36 23 | 	byte	$c9, $da, $e7, $f9, $09, $1b, $32, $47, $47, $4d, $52, $51, $4e, $44, $36, $23
1395d     0E FD E5 D9 
13961     D5 CF D7 E2 
13965     EF FD 0A 17 
13969     23 2C 37 3F | 	byte	$0e, $fd, $e5, $d9, $d5, $cf, $d7, $e2, $ef, $fd, $0a, $17, $23, $2c, $37, $3f
1396d     48 43 28 16 
13971     01 F7 FA FB 
13975     FD FD F8 F1 
13979     E7 D9 D6 C7 | 	byte	$48, $43, $28, $16, $01, $f7, $fa, $fb, $fd, $fd, $f8, $f1, $e7, $d9, $d6, $c7
1397d     C2 C1 C3 D0 
13981     DB F0 F9 03 
13985     16 24 1A 18 
13989     0D 04 FC EE | 	byte	$c2, $c1, $c3, $d0, $db, $f0, $f9, $03, $16, $24, $1a, $18, $0d, $04, $fc, $ee
1398d     EC E7 E8 E8 
13991     E9 EE F0 F8 
13995     06 12 20 22 
13999     16 06 F2 E6 | 	byte	$ec, $e7, $e8, $e8, $e9, $ee, $f0, $f8, $06, $12, $20, $22, $16, $06, $f2, $e6
1399d     E9 EC F3 FA 
139a1     F9 FA 01 FF 
139a5     09 0F 18 18 
139a9     16 0C FF F7 | 	byte	$e9, $ec, $f3, $fa, $f9, $fa, $01, $ff, $09, $0f, $18, $18, $16, $0c, $ff, $f7
139ad     EC D8 CD C3 
139b1     BB BA B9 BA 
139b5     BD C7 DE F5 
139b9     F8 08 12 17 | 	byte	$ec, $d8, $cd, $c3, $bb, $ba, $b9, $ba, $bd, $c7, $de, $f5, $f8, $08, $12, $17
139bd     1C 1B 1D 1F 
139c1     20 16 FE EF 
139c5     E6 E0 EB F9 
139c9     03 0D 15 16 | 	byte	$1c, $1b, $1d, $1f, $20, $16, $fe, $ef, $e6, $e0, $eb, $f9, $03, $0d, $15, $16
139cd     1B 1B 20 24 
139d1     2A 2A 29 2A 
139d5     2C 2A 2D 2D 
139d9     26 18 06 F5 | 	byte	$1b, $1b, $20, $24, $2a, $2a, $29, $2a, $2c, $2a, $2d, $2d, $26, $18, $06, $f5
139dd     DB C6 B0 A4 
139e1     9C A3 B2 C3 
139e5     E3 00 13 23 
139e9     3A 4B 56 54 | 	byte	$db, $c6, $b0, $a4, $9c, $a3, $b2, $c3, $e3, $00, $13, $23, $3a, $4b, $56, $54
139ed     4D 3C 29 19 
139f1     11 0D 06 FD 
139f5     F8 F1 E8 E9 
139f9     EA F2 00 00 | 	byte	$4d, $3c, $29, $19, $11, $0d, $06, $fd, $f8, $f1, $e8, $e9, $ea, $f2, $00, $00
139fd     06 07 0F 0F 
13a01     12 12 10 0F 
13a05     05 FD F4 EB 
13a09     DE DC DB DC | 	byte	$06, $07, $0f, $0f, $12, $12, $10, $0f, $05, $fd, $f4, $eb, $de, $dc, $db, $dc
13a0d     DF E6 E8 E9 
13a11     DF D6 D1 D2 
13a15     DD DB DD DF 
13a19     DA DC F1 02 | 	byte	$df, $e6, $e8, $e9, $df, $d6, $d1, $d2, $dd, $db, $dd, $df, $da, $dc, $f1, $02
13a1d     10 1A 25 28 
13a21     22 19 18 17 
13a25     14 09 FE F4 
13a29     F5 F3 FB 02 | 	byte	$10, $1a, $25, $28, $22, $19, $18, $17, $14, $09, $fe, $f4, $f5, $f3, $fb, $02
13a2d     08 07 07 FF 
13a31     F8 EF E0 DB 
13a35     DB DD E2 EB 
13a39     F4 03 03 03 | 	byte	$08, $07, $07, $ff, $f8, $ef, $e0, $db, $db, $dd, $e2, $eb, $f4, $03, $03, $03
13a3d     08 0A 11 03 
13a41     F6 E4 CD BB 
13a45     BC C2 D1 E3 
13a49     EC FA 03 10 | 	byte	$08, $0a, $11, $03, $f6, $e4, $cd, $bb, $bc, $c2, $d1, $e3, $ec, $fa, $03, $10
13a4d     21 2D 3F 46 
13a51     4B 4B 48 47 
13a55     42 38 29 0E 
13a59     FE ED E1 D4 | 	byte	$21, $2d, $3f, $46, $4b, $4b, $48, $47, $42, $38, $29, $0e, $fe, $ed, $e1, $d4
13a5d     CF D5 DE EB 
13a61     F5 0A 21 36 
13a65     3B 34 34 32 
13a69     37 25 1E 16 | 	byte	$cf, $d5, $de, $eb, $f5, $0a, $21, $36, $3b, $34, $34, $32, $37, $25, $1e, $16
13a6d     07 FB FD FB 
13a71     00 FF FD EB 
13a75     D7 C5 B2 B6 
13a79     BB C5 CB DB | 	byte	$07, $fb, $fd, $fb, $00, $ff, $fd, $eb, $d7, $c5, $b2, $b6, $bb, $c5, $cb, $db
13a7d     E8 FA 0D 15 
13a81     28 24 27 24 
13a85     1A 0D FF ED 
13a89     DC D1 CE D4 | 	byte	$e8, $fa, $0d, $15, $28, $24, $27, $24, $1a, $0d, $ff, $ed, $dc, $d1, $ce, $d4
13a8d     E4 F0 02 09 
13a91     0F 19 1D 12 
13a95     0D 06 FD EF 
13a99     F2 F7 06 0B | 	byte	$e4, $f0, $02, $09, $0f, $19, $1d, $12, $0d, $06, $fd, $ef, $f2, $f7, $06, $0b
13a9d     14 14 04 00 
13aa1     FA FE 01 FA 
13aa5     F1 E1 CF CB 
13aa9     C1 C6 C9 D0 | 	byte	$14, $14, $04, $00, $fa, $fe, $01, $fa, $f1, $e1, $cf, $cb, $c1, $c6, $c9, $d0
13aad     D5 DA E1 E6 
13ab1     EB EA F7 FC 
13ab5     02 0C 1E 2A 
13ab9     2A 27 1A 11 | 	byte	$d5, $da, $e1, $e6, $eb, $ea, $f7, $fc, $02, $0c, $1e, $2a, $2a, $27, $1a, $11
13abd     08 F5 EE E9 
13ac1     E9 F3 FC 0C 
13ac5     20 2C 31 2D 
13ac9     23 15 11 13 | 	byte	$08, $f5, $ee, $e9, $e9, $f3, $fc, $0c, $20, $2c, $31, $2d, $23, $15, $11, $13
13acd     1B 1C 1F 1F 
13ad1     17 16 0E 0D 
13ad5     05 FC EE D8 
13ad9     C7 B6 AD A7 | 	byte	$1b, $1c, $1f, $1f, $17, $16, $0e, $0d, $05, $fc, $ee, $d8, $c7, $b6, $ad, $a7
13add     AD B3 C2 E2 
13ae1     08 28 39 40 
13ae5     45 50 4F 3F 
13ae9     3D 38 2E 1E | 	byte	$ad, $b3, $c2, $e2, $08, $28, $39, $40, $45, $50, $4f, $3f, $3d, $38, $2e, $1e
13aed     14 0C 0D 0F 
13af1     0D 05 FF F8 
13af5     F1 FC 02 08 
13af9     09 07 05 03 | 	byte	$14, $0c, $0d, $0f, $0d, $05, $ff, $f8, $f1, $fc, $02, $08, $09, $07, $05, $03
13afd     01 06 07 06 
13b01     06 FF F9 EF 
13b05     E2 D6 CD C3 
13b09     BD B8 BE C8 | 	byte	$01, $06, $07, $06, $06, $ff, $f9, $ef, $e2, $d6, $cd, $c3, $bd, $b8, $be, $c8
13b0d     CD D4 D4 D9 
13b11     D9 D7 DE E7 
13b15     EF FD 09 20 
13b19     30 42 49 44 | 	byte	$cd, $d4, $d4, $d9, $d9, $d7, $de, $e7, $ef, $fd, $09, $20, $30, $42, $49, $44
13b1d     33 1F 0C 05 
13b21     00 FA EB E8 
13b25     EA ED F8 03 
13b29     10 15 14 09 | 	byte	$33, $1f, $0c, $05, $00, $fa, $eb, $e8, $ea, $ed, $f8, $03, $10, $15, $14, $09
13b2d     01 F9 EA E5 
13b31     E0 DF DA DD 
13b35     EF FD 07 0B 
13b39     05 01 F0 D7 | 	byte	$01, $f9, $ea, $e5, $e0, $df, $da, $dd, $ef, $fd, $07, $0b, $05, $01, $f0, $d7
13b3d     C8 BF C2 C3 
13b41     CD DC F3 08 
13b45     1F 2E 27 28 
13b49     27 32 36 3F | 	byte	$c8, $bf, $c2, $c3, $cd, $dc, $f3, $08, $1f, $2e, $27, $28, $27, $32, $36, $3f
13b4d     3F 3A 30 1C 
13b51     10 07 FF 00 
13b55     F5 F5 F2 F2 
13b59     F7 FB 04 08 | 	byte	$3f, $3a, $30, $1c, $10, $07, $ff, $00, $f5, $f5, $f2, $f2, $f7, $fb, $04, $08
13b5d     09 10 1E 2C 
13b61     2E 35 31 29 
13b65     1D 0A 0B 0B 
13b69     0A 0A 02 03 | 	byte	$09, $10, $1e, $2c, $2e, $35, $31, $29, $1d, $0a, $0b, $0b, $0a, $0a, $02, $03
13b6d     00 F8 F1 E8 
13b71     D4 C3 B7 B9 
13b75     BE D4 E0 EF 
13b79     F2 01 0B 1A | 	byte	$00, $f8, $f1, $e8, $d4, $c3, $b7, $b9, $be, $d4, $e0, $ef, $f2, $01, $0b, $1a
13b7d     26 2F 2D 2A 
13b81     1A 0C FA EE 
13b85     E1 D5 C9 CE 
13b89     D9 F1 07 16 | 	byte	$26, $2f, $2d, $2a, $1a, $0c, $fa, $ee, $e1, $d5, $c9, $ce, $d9, $f1, $07, $16
13b8d     1F 22 0F FB 
13b91     F0 ED F1 FC 
13b95     00 06 12 20 
13b99     2A 29 1F 11 | 	byte	$1f, $22, $0f, $fb, $f0, $ed, $f1, $fc, $00, $06, $12, $20, $2a, $29, $1f, $11
13b9d     FE F3 E7 D1 
13ba1     C2 BA B2 AE 
13ba5     AF BA CA E1 
13ba9     F2 FE FD 03 | 	byte	$fe, $f3, $e7, $d1, $c2, $ba, $b2, $ae, $af, $ba, $ca, $e1, $f2, $fe, $fd, $03
13bad     0A 0F 14 0D 
13bb1     06 06 05 06 
13bb5     11 10 10 0E 
13bb9     FA ED E8 F4 | 	byte	$0a, $0f, $14, $0d, $06, $06, $05, $06, $11, $10, $10, $0e, $fa, $ed, $e8, $f4
13bbd     04 17 28 39 
13bc1     3B 40 47 43 
13bc5     37 23 17 08 
13bc9     04 03 01 FF | 	byte	$04, $17, $28, $39, $3b, $40, $47, $43, $37, $23, $17, $08, $04, $03, $01, $ff
13bcd     FD F0 E7 DE 
13bd1     D5 CD C8 C7 
13bd5     C0 C3 C5 C7 
13bd9     D7 DC ED FF | 	byte	$fd, $f0, $e7, $de, $d5, $cd, $c8, $c7, $c0, $c3, $c5, $c7, $d7, $dc, $ed, $ff
13bdd     0D 1E 38 46 
13be1     51 51 38 26 
13be5     1D 17 1E 22 
13be9     29 29 28 29 | 	byte	$0d, $1e, $38, $46, $51, $51, $38, $26, $1d, $17, $1e, $22, $29, $29, $28, $29
13bed     28 2D 29 1D 
13bf1     14 06 FF FF 
13bf5     FD F8 F7 F5 
13bf9     F3 F5 F5 FC | 	byte	$28, $2d, $29, $1d, $14, $06, $ff, $ff, $fd, $f8, $f7, $f5, $f3, $f5, $f5, $fc
13bfd     02 01 01 FA 
13c01     F0 E3 DA BD 
13c05     AD A6 A7 A9 
13c09     BB CE D9 E3 | 	byte	$02, $01, $01, $fa, $f0, $e3, $da, $bd, $ad, $a6, $a7, $a9, $bb, $ce, $d9, $e3
13c0d     DF D5 C8 D6 
13c11     EF 0E 27 3B 
13c15     43 4E 51 4E 
13c19     44 32 21 0F | 	byte	$df, $d5, $c8, $d6, $ef, $0e, $27, $3b, $43, $4e, $51, $4e, $44, $32, $21, $0f
13c1d     FD EF EC E7 
13c21     E8 E9 EA F2 
13c25     F8 01 06 0C 
13c29     0A 09 06 03 | 	byte	$fd, $ef, $ec, $e7, $e8, $e9, $ea, $f2, $f8, $01, $06, $0c, $0a, $09, $06, $03
13c2d     FD EE EB E2 
13c31     E3 E5 EA F3 
13c35     F3 E7 D3 B3 
13c39     AE B1 BE DD | 	byte	$fd, $ee, $eb, $e2, $e3, $e5, $ea, $f3, $f3, $e7, $d3, $b3, $ae, $b1, $be, $dd
13c3d     F8 11 24 3B 
13c41     3C 43 49 47 
13c45     42 32 2B 19 
13c49     17 0E 03 FE | 	byte	$f8, $11, $24, $3b, $3c, $43, $49, $47, $42, $32, $2b, $19, $17, $0e, $03, $fe
13c4d     F9 EA E5 E6 
13c51     EB F7 04 10 
13c55     19 23 28 22 
13c59     1B 16 1A 18 | 	byte	$f9, $ea, $e5, $e6, $eb, $f7, $04, $10, $19, $23, $28, $22, $1b, $16, $1a, $18
13c5d     1A 1D 25 1F 
13c61     14 FC ED EE 
13c65     F8 03 0D 0A 
13c69     05 FF FA F5 | 	byte	$1a, $1d, $25, $1f, $14, $fc, $ed, $ee, $f8, $03, $0d, $0a, $05, $ff, $fa, $f5
13c6d     F0 E9 DF D6 
13c71     D8 DB D9 E1 
13c75     EA F5 00 01 
13c79     07 09 0B 15 | 	byte	$f0, $e9, $df, $d6, $d8, $db, $d9, $e1, $ea, $f5, $00, $01, $07, $09, $0b, $15
13c7d     19 18 1B 1A 
13c81     17 06 FA F3 
13c85     EB EE F6 00 
13c89     08 07 FD E9 | 	byte	$19, $18, $1b, $1a, $17, $06, $fa, $f3, $eb, $ee, $f6, $00, $08, $07, $fd, $e9
13c8d     D4 D3 DE F2 
13c91     08 1D 2D 38 
13c95     3C 3E 3B 2B 
13c99     18 F8 DC BE | 	byte	$d4, $d3, $de, $f2, $08, $1d, $2d, $38, $3c, $3e, $3b, $2b, $18, $f8, $dc, $be
13c9d     AB A6 A2 A4 
13ca1     AC B1 BF D3 
13ca5     DE EC FA 06 
13ca9     18 23 26 20 | 	byte	$ab, $a6, $a2, $a4, $ac, $b1, $bf, $d3, $de, $ec, $fa, $06, $18, $23, $26, $20
13cad     11 07 01 FA 
13cb1     FA 04 0A 11 
13cb5     0E FA F1 F5 
13cb9     01 19 33 43 | 	byte	$11, $07, $01, $fa, $fa, $04, $0a, $11, $0e, $fa, $f1, $f5, $01, $19, $33, $43
13cbd     4E 52 51 54 
13cc1     4D 3F 31 16 
13cc5     06 F8 EE E3 
13cc9     DF DF CD BA | 	byte	$4e, $52, $51, $54, $4d, $3f, $31, $16, $06, $f8, $ee, $e3, $df, $df, $cd, $ba
13ccd     AC 9F A0 A3 
13cd1     B5 C9 E3 FC 
13cd5     10 21 1D 20 
13cd9     1F 1D 1B 1D | 	byte	$ac, $9f, $a0, $a3, $b5, $c9, $e3, $fc, $10, $21, $1d, $20, $1f, $1d, $1b, $1d
13cdd     22 29 25 0B 
13ce1     00 02 05 20 
13ce5     36 45 53 53 
13ce9     54 55 53 41 | 	byte	$22, $29, $25, $0b, $00, $02, $05, $20, $36, $45, $53, $53, $54, $55, $53, $41
13ced     2D 16 FD EC 
13cf1     E3 DF DF DF 
13cf5     E0 DF DF DF 
13cf9     E1 E9 EE F8 | 	byte	$2d, $16, $fd, $ec, $e3, $df, $df, $df, $e0, $df, $df, $df, $e1, $e9, $ee, $f8
13cfd     FC F6 F5 E5 
13d01     D3 C2 BA B7 
13d05     B6 C1 D1 E4 
13d09     E7 DB CD CB | 	byte	$fc, $f6, $f5, $e5, $d3, $c2, $ba, $b7, $b6, $c1, $d1, $e4, $e7, $db, $cd, $cb
13d0d     D1 EA 08 22 
13d11     37 48 54 5E 
13d15     61 61 55 48 
13d19     31 16 01 F4 | 	byte	$d1, $ea, $08, $22, $37, $48, $54, $5e, $61, $61, $55, $48, $31, $16, $01, $f4
13d1d     EB EC E2 D9 
13d21     D3 D2 D2 D9 
13d25     E0 F0 FC 05 
13d29     10 15 0E 08 | 	byte	$eb, $ec, $e2, $d9, $d3, $d2, $d2, $d9, $e0, $f0, $fc, $05, $10, $15, $0e, $08
13d2d     FC EE E0 CC 
13d31     C5 C9 C4 B3 
13d35     AF B0 C1 E3 
13d39     07 2E 44 52 | 	byte	$fc, $ee, $e0, $cc, $c5, $c9, $c4, $b3, $af, $b0, $c1, $e3, $07, $2e, $44, $52
13d3d     55 5A 57 54 
13d41     44 36 20 0E 
13d45     FE F8 FB FE 
13d49     FE FF F5 F0 | 	byte	$55, $5a, $57, $54, $44, $36, $20, $0e, $fe, $f8, $fb, $fe, $fe, $ff, $f5, $f0
13d4d     F1 F0 F7 03 
13d51     0B 16 23 28 
13d55     2D 2E 2C 27 
13d59     13 06 FF 00 | 	byte	$f1, $f0, $f7, $03, $0b, $16, $23, $28, $2d, $2e, $2c, $27, $13, $06, $ff, $00
13d5d     01 F2 E6 DD 
13d61     DA E1 EA F9 
13d65     03 08 0F 15 
13d69     1E 1F 24 21 | 	byte	$01, $f2, $e6, $dd, $da, $e1, $ea, $f9, $03, $08, $0f, $15, $1e, $1f, $24, $21
13d6d     0A F7 E6 D5 
13d71     CE D3 D4 DC 
13d75     DD E2 EB F8 
13d79     02 10 1E 2C | 	byte	$0a, $f7, $e6, $d5, $ce, $d3, $d4, $dc, $dd, $e2, $eb, $f8, $02, $10, $1e, $2c
13d7d     3A 3E 38 31 
13d81     22 10 FD EA 
13d85     DC D8 DC DB 
13d89     D3 CE C9 DB | 	byte	$3a, $3e, $38, $31, $22, $10, $fd, $ea, $dc, $d8, $dc, $db, $d3, $ce, $c9, $db
13d8d     ED 05 1B 32 
13d91     41 3D 44 38 
13d95     2A 1D 01 E3 
13d99     C5 B8 B0 B5 | 	byte	$ed, $05, $1b, $32, $41, $3d, $44, $38, $2a, $1d, $01, $e3, $c5, $b8, $b0, $b5
13d9d     C1 CF CC CC 
13da1     CB CB CA D5 
13da5     E4 F7 09 1B 
13da9     23 28 2D 26 | 	byte	$c1, $cf, $cc, $cc, $cb, $cb, $ca, $d5, $e4, $f7, $09, $1b, $23, $28, $2d, $26
13dad     1A 0D 09 09 
13db1     0A 0A FF F9 
13db5     F4 F6 01 16 
13db9     28 3B 4C 4F | 	byte	$1a, $0d, $09, $09, $0a, $0a, $ff, $f9, $f4, $f6, $01, $16, $28, $3b, $4c, $4f
13dbd     54 4D 41 32 
13dc1     1F 04 F1 DB 
13dc5     D1 C8 C4 C5 
13dc9     B5 B0 AA AB | 	byte	$54, $4d, $41, $32, $1f, $04, $f1, $db, $d1, $c8, $c4, $c5, $b5, $b0, $aa, $ab
13dcd     B6 CB E5 08 
13dd1     19 29 32 2D 
13dd5     2D 22 14 06 
13dd9     FD FA 00 06 | 	byte	$b6, $cb, $e5, $08, $19, $29, $32, $2d, $2d, $22, $14, $06, $fd, $fa, $00, $06
13ddd     00 00 FF 02 
13de1     13 30 46 5C 
13de5     6C 6B 65 5A 
13de9     48 36 25 0D | 	byte	$00, $00, $ff, $02, $13, $30, $46, $5c, $6c, $6b, $65, $5a, $48, $36, $25, $0d
13ded     F8 E1 D5 D1 
13df1     CA CE CB CB 
13df5     CA CC D1 D2 
13df9     D9 E2 EB EF | 	byte	$f8, $e1, $d5, $d1, $ca, $ce, $cb, $cb, $ca, $cc, $d1, $d2, $d9, $e2, $eb, $ef
13dfd     ED EA E8 E6 
13e01     E4 E4 E3 D9 
13e05     DC DD D1 C3 
13e09     BE C2 D2 EF | 	byte	$ed, $ea, $e8, $e6, $e4, $e4, $e3, $d9, $dc, $dd, $d1, $c3, $be, $c2, $d2, $ef
13e0d     12 35 53 62 
13e11     6B 66 66 69 
13e15     68 56 3D 1C 
13e19     FE E4 D3 CC | 	byte	$12, $35, $53, $62, $6b, $66, $66, $69, $68, $56, $3d, $1c, $fe, $e4, $d3, $cc
13e1d     BE B9 B8 B8 
13e21     BF C6 D5 DF 
13e25     F2 03 0B 0A 
13e29     0D 05 FC EE | 	byte	$be, $b9, $b8, $b8, $bf, $c6, $d5, $df, $f2, $03, $0b, $0a, $0d, $05, $fc, $ee
13e2d     E2 DB D6 D1 
13e31     CA CA CB D8 
13e35     EC FA 0D 25 
13e39     34 37 3E 38 | 	byte	$e2, $db, $d6, $d1, $ca, $ca, $cb, $d8, $ec, $fa, $0d, $25, $34, $37, $3e, $38
13e3d     34 35 34 2F 
13e41     26 17 03 FC 
13e45     FD FF 0B 0A 
13e49     0B 06 00 FF | 	byte	$34, $35, $34, $2f, $26, $17, $03, $fc, $fd, $ff, $0b, $0a, $0b, $06, $00, $ff
13e4d     FD FF 01 0B 
13e51     11 12 17 17 
13e55     12 07 FA F0 
13e59     EC EE E9 DA | 	byte	$fd, $ff, $01, $0b, $11, $12, $17, $17, $12, $07, $fa, $f0, $ec, $ee, $e9, $da
13e5d     CC C3 C5 CA 
13e61     DA F3 0C 20 
13e65     35 3D 42 3E 
13e69     39 2F 1B FF | 	byte	$cc, $c3, $c5, $ca, $da, $f3, $0c, $20, $35, $3d, $42, $3e, $39, $2f, $1b, $ff
13e6d     E4 D5 CC CF 
13e71     DA E2 EA EE 
13e75     F4 F6 02 10 
13e79     1E 30 37 30 | 	byte	$e4, $d5, $cc, $cf, $da, $e2, $ea, $ee, $f4, $f6, $02, $10, $1e, $30, $37, $30
13e7d     21 0E FC E9 
13e81     D7 D3 D2 D7 
13e85     DE DC D9 CE 
13e89     CE CE DE FB | 	byte	$21, $0e, $fc, $e9, $d7, $d3, $d2, $d7, $de, $dc, $d9, $ce, $ce, $ce, $de, $fb
13e8d     10 30 34 38 
13e91     36 35 32 30 
13e95     1E 03 EE DF 
13e99     D4 CA C0 BC | 	byte	$10, $30, $34, $38, $36, $35, $32, $30, $1e, $03, $ee, $df, $d4, $ca, $c0, $bc
13e9d     B5 AE AC AC 
13ea1     BC D0 EA 09 
13ea5     17 23 26 20 
13ea9     1C 1B 1C 27 | 	byte	$b5, $ae, $ac, $ac, $bc, $d0, $ea, $09, $17, $23, $26, $20, $1c, $1b, $1c, $27
13ead     30 36 36 24 
13eb1     10 FA E9 D9 
13eb5     D8 E5 F5 09 
13eb9     17 21 1C 12 | 	byte	$30, $36, $36, $24, $10, $fa, $e9, $d9, $d8, $e5, $f5, $09, $17, $21, $1c, $12
13ebd     0E 0F 0D 00 
13ec1     F0 DF D7 D6 
13ec5     DC DC DB DB 
13ec9     DC DC ED F9 | 	byte	$0e, $0f, $0d, $00, $f0, $df, $d7, $d6, $dc, $dc, $db, $db, $dc, $dc, $ed, $f9
13ecd     00 08 0E 0E 
13ed1     04 FF FF FD 
13ed5     FE 01 0C 1A 
13ed9     26 1E 12 07 | 	byte	$00, $08, $0e, $0e, $04, $ff, $ff, $fd, $fe, $01, $0c, $1a, $26, $1e, $12, $07
13edd     02 FD 03 13 
13ee1     25 36 46 48 
13ee5     46 36 29 26 
13ee9     1F 16 08 F7 | 	byte	$02, $fd, $03, $13, $25, $36, $46, $48, $46, $36, $29, $26, $1f, $16, $08, $f7
13eed     E9 DC D2 D3 
13ef1     CE CF CA CA 
13ef5     CC D8 E1 F0 
13ef9     F2 F1 E4 D6 | 	byte	$e9, $dc, $d2, $d3, $ce, $cf, $ca, $ca, $cc, $d8, $e1, $f0, $f2, $f1, $e4, $d6
13efd     CD C5 B6 B9 
13f01     BE CF E5 E7 
13f05     E9 EC F1 F1 
13f09     F8 02 17 2E | 	byte	$cd, $c5, $b6, $b9, $be, $cf, $e5, $e7, $e9, $ec, $f1, $f1, $f8, $02, $17, $2e
13f0d     3D 4B 57 55 
13f11     5A 63 62 52 
13f15     39 1D FF E3 
13f19     D3 C2 B6 AF | 	byte	$3d, $4b, $57, $55, $5a, $63, $62, $52, $39, $1d, $ff, $e3, $d3, $c2, $b6, $af
13f1d     AA A8 AB B2 
13f21     CA D5 E7 F5 
13f25     F0 EB E4 E8 
13f29     ED F8 06 18 | 	byte	$aa, $a8, $ab, $b2, $ca, $d5, $e7, $f5, $f0, $eb, $e4, $e8, $ed, $f8, $06, $18
13f2d     23 26 23 16 
13f31     FA E4 D4 CD 
13f35     D4 DF EC FF 
13f39     12 1E 25 30 | 	byte	$23, $26, $23, $16, $fa, $e4, $d4, $cd, $d4, $df, $ec, $ff, $12, $1e, $25, $30
13f3d     30 32 27 1A 
13f41     11 0D 0E 15 
13f45     12 14 12 08 
13f49     04 03 03 06 | 	byte	$30, $32, $27, $1a, $11, $0d, $0e, $15, $12, $14, $12, $08, $04, $03, $03, $06
13f4d     06 05 F3 E7 
13f51     DD D2 CE C9 
13f55     CC E0 F1 FC 
13f59     F9 FE FB F4 | 	byte	$06, $05, $f3, $e7, $dd, $d2, $ce, $c9, $cc, $e0, $f1, $fc, $f9, $fe, $fb, $f4
13f5d     ED E8 E9 F1 
13f61     00 09 0C 0A 
13f65     05 07 12 1C 
13f69     1C 1C 1B 1D | 	byte	$ed, $e8, $e9, $f1, $00, $09, $0c, $0a, $05, $07, $12, $1c, $1c, $1c, $1b, $1d
13f6d     20 20 1F 17 
13f71     0E 03 FD FB 
13f75     FE 00 00 29 
13f79     2E 37 44 3F | 	byte	$20, $20, $1f, $17, $0e, $03, $fd, $fb, $fe, $00, $00, $29, $2e, $37, $44, $3f
13f7d     37 2A 25 2A 
13f81     25 18 0F 00 
13f85     EA EF F1 E2 
13f89     FE E3 D7 E6 | 	byte	$37, $2a, $25, $2a, $25, $18, $0f, $00, $ea, $ef, $f1, $e2, $fe, $e3, $d7, $e6
13f8d     EA FE 1A 13 
13f91     00 05 16 29 
13f95     49 46 2E 31 
13f99     3C 4D 54 4D | 	byte	$ea, $fe, $1a, $13, $00, $05, $16, $29, $49, $46, $2e, $31, $3c, $4d, $54, $4d
13f9d     3D 2E 31 2E 
13fa1     25 1A 05 E8 
13fa5     E2 E6 DF EF 
13fa9     F1 CF D2 DC | 	byte	$3d, $2e, $31, $2e, $25, $1a, $05, $e8, $e2, $e6, $df, $ef, $f1, $cf, $d2, $dc
13fad     EA 00 1A 08 
13fb1     00 07 1A 37 
13fb5     4F 38 2E 37 
13fb9     44 4F 4F 46 | 	byte	$ea, $00, $1a, $08, $00, $07, $1a, $37, $4f, $38, $2e, $37, $44, $4f, $4f, $46
13fbd     35 2A 31 29 
13fc1     1D 16 00 E3 
13fc5     E3 E3 E2 F2 
13fc9     E8 CB D7 E2 | 	byte	$35, $2a, $31, $29, $1d, $16, $00, $e3, $e3, $e3, $e2, $f2, $e8, $cb, $d7, $e2
13fcd     EF 0E 13 01 
13fd1     00 0E 1E 3F 
13fd5     46 35 2E 38 
13fd9     45 4D 46 3D | 	byte	$ef, $0e, $13, $01, $00, $0e, $1e, $3f, $46, $35, $2e, $38, $45, $4d, $46, $3d
13fdd     2A 29 2A 21 
13fe1     18 0F F1 E2 
13fe5     E3 E3 EA F1 
13fe9     DF CF DB E3 | 	byte	$2a, $29, $2a, $21, $18, $0f, $f1, $e2, $e3, $e3, $ea, $f1, $df, $cf, $db, $e3
13fed     FE 16 0F 00 
13ff1     01 11 29 45 
13ff5     3D 2E 35 3C 
13ff9     49 4D 46 35 | 	byte	$fe, $16, $0f, $00, $01, $11, $29, $45, $3d, $2e, $35, $3c, $49, $4d, $46, $35
13ffd     25 2A 25 21 
14001     13 00 ED E3 
14005     E3 E2 EF EA 
14009     D2 D2 DC EA | 	byte	$25, $2a, $25, $21, $13, $00, $ed, $e3, $e3, $e2, $ef, $ea, $d2, $d2, $dc, $ea
1400d     00 11 05 00 
14011     02 16 31 46 
14015     38 31 37 44 
14019     4D 49 3F 2E | 	byte	$00, $11, $05, $00, $02, $16, $31, $46, $38, $31, $37, $44, $4d, $49, $3f, $2e
1401d     25 2A 24 18 
14021     0F 00 E8 E2 
14025     E3 E3 F1 E3 
14029     CB D2 DC EF | 	byte	$25, $2a, $24, $18, $0f, $00, $e8, $e2, $e3, $e3, $f1, $e3, $cb, $d2, $dc, $ef
1402d     08 08 00 00 
14031     08 1E 3C 46 
14035     37 37 3C 46 
14039     4F 46 3D 2A | 	byte	$08, $08, $00, $00, $08, $1e, $3c, $46, $37, $37, $3c, $46, $4f, $46, $3d, $2a
1403d     25 29 21 13 
14041     05 F1 E8 E2 
14045     E3 EA EA D6 
14049     C9 D7 E2 FE | 	byte	$25, $29, $21, $13, $05, $f1, $e8, $e2, $e3, $ea, $ea, $d6, $c9, $d7, $e2, $fe
1404d     08 05 00 00 
14051     11 29 44 3D 
14055     37 3C 44 4D 
14059     4F 46 38 25 | 	byte	$08, $05, $00, $00, $11, $29, $44, $3d, $37, $3c, $44, $4d, $4f, $46, $38, $25
1405d     29 25 1A 0F 
14061     00 F1 E3 DF 
14065     E2 EF E2 CF 
14069     C9 D7 EA 00 | 	byte	$29, $25, $1a, $0f, $00, $f1, $e3, $df, $e2, $ef, $e2, $cf, $c9, $d7, $ea, $00
1406d     05 01 00 02 
14071     1A 31 44 3C 
14075     38 3D 49 4F 
14079     4F 46 35 25 | 	byte	$05, $01, $00, $02, $1a, $31, $44, $3c, $38, $3d, $49, $4f, $4f, $46, $35, $25
1407d     2A 21 18 0F 
14081     FB EF E2 DF 
14085     E3 EA D6 C8 
14089     D2 DB EF 00 | 	byte	$2a, $21, $18, $0f, $fb, $ef, $e2, $df, $e3, $ea, $d6, $c8, $d2, $db, $ef, $00
1408d     01 00 00 0E 
14091     1E 3C 3F 3C 
14095     3D 44 4F 54 
14099     4D 3F 2E 29 | 	byte	$01, $00, $00, $0e, $1e, $3c, $3f, $3c, $3d, $44, $4f, $54, $4d, $3f, $2e, $29
1409d     2A 21 13 05 
140a1     F8 ED DF DF 
140a5     E8 E3 CF C8 
140a9     D2 DC F9 00 | 	byte	$2a, $21, $13, $05, $f8, $ed, $df, $df, $e8, $e3, $cf, $c8, $d2, $dc, $f9, $00
140ad     00 00 01 13 
140b1     2E 3F 3D 3D 
140b5     3F 49 54 54 
140b9     4D 3D 2A 2A | 	byte	$00, $00, $01, $13, $2e, $3f, $3d, $3d, $3f, $49, $54, $54, $4d, $3d, $2a, $2a
140bd     25 1D 0F 00 
140c1     F2 E8 DC DF 
140c5     E8 D7 C8 C9 
140c9     D2 EA FE 00 | 	byte	$25, $1d, $0f, $00, $f2, $e8, $dc, $df, $e8, $d7, $c8, $c9, $d2, $ea, $fe, $00
140cd     00 00 07 1D 
140d1     31 3F 3D 3F 
140d5     45 4F 54 54 
140d9     46 38 2A 2A | 	byte	$00, $00, $07, $1d, $31, $3f, $3d, $3f, $45, $4f, $54, $54, $46, $38, $2a, $2a
140dd     24 18 05 FB 
140e1     F2 DF DB E3 
140e5     E3 CB C4 CB 
140e9     D7 EF FE 00 | 	byte	$24, $18, $05, $fb, $f2, $df, $db, $e3, $e3, $cb, $c4, $cb, $d7, $ef, $fe, $00
140ed     00 00 0E 24 
140f1     3C 3D 3F 45 
140f5     49 54 58 4F 
140f9     46 35 2A 2A | 	byte	$00, $00, $0e, $24, $3c, $3d, $3f, $45, $49, $54, $58, $4f, $46, $35, $2a, $2a
140fd     21 11 01 FB 
14101     F1 DB DC E6 
14105     DF C4 C4 CF 
14109     DC F2 FE 00 | 	byte	$21, $11, $01, $fb, $f1, $db, $dc, $e6, $df, $c4, $c4, $cf, $dc, $f2, $fe, $00
1410d     00 02 16 2E 
14111     3C 3D 44 46 
14115     4F 58 5A 4F 
14119     46 2E 2E 25 | 	byte	$00, $02, $16, $2e, $3c, $3d, $44, $46, $4f, $58, $5a, $4f, $46, $2e, $2e, $25
1411d     1D 08 00 F9 
14121     E8 DB DC E3 
14125     D2 C1 C8 D2 
14129     EA F2 FE 00 | 	byte	$1d, $08, $00, $f9, $e8, $db, $dc, $e3, $d2, $c1, $c8, $d2, $ea, $f2, $fe, $00
1412d     00 07 1E 31 
14131     3C 3F 46 4D 
14135     54 5A 5A 4D 
14139     3D 2E 2E 24 | 	byte	$00, $07, $1e, $31, $3c, $3f, $46, $4d, $54, $5a, $5a, $4d, $3d, $2e, $2e, $24
1413d     18 05 FF F8 
14141     E2 D7 E2 DF 
14145     C8 C1 C9 DB 
14149     EA F2 FF 00 | 	byte	$18, $05, $ff, $f8, $e2, $d7, $e2, $df, $c8, $c1, $c9, $db, $ea, $f2, $ff, $00
1414d     01 11 29 38 
14151     3C 44 49 4F 
14155     58 5C 54 49 
14159     37 2E 2A 21 | 	byte	$01, $11, $29, $38, $3c, $44, $49, $4f, $58, $5c, $54, $49, $37, $2e, $2a, $21
1415d     0F 00 FE F1 
14161     DF D7 E3 D6 
14165     BC C1 D2 DC 
14169     EA F9 00 00 | 	byte	$0f, $00, $fe, $f1, $df, $d7, $e3, $d6, $bc, $c1, $d2, $dc, $ea, $f9, $00, $00
1416d     05 18 2E 38 
14171     3D 46 4D 54 
14175     5C 5C 54 46 
14179     35 2E 25 1D | 	byte	$05, $18, $2e, $38, $3d, $46, $4d, $54, $5c, $5c, $54, $46, $35, $2e, $25, $1d
1417d     07 00 FE EA 
14181     D7 DC DF CB 
14185     BA C8 D2 E3 
14189     EA FE 00 01 | 	byte	$07, $00, $fe, $ea, $d7, $dc, $df, $cb, $ba, $c8, $d2, $e3, $ea, $fe, $00, $01
1418d     0E 1E 31 38 
14191     3F 49 4F 58 
14195     5E 5A 4F 46 
14199     2E 2E 24 18 | 	byte	$0e, $1e, $31, $38, $3f, $49, $4f, $58, $5e, $5a, $4f, $46, $2e, $2e, $24, $18
1419d     01 00 F9 E3 
141a1     D6 DC DB C3 
141a5     B7 C9 DB E6 
141a9     EF FF 00 02 | 	byte	$01, $00, $f9, $e3, $d6, $dc, $db, $c3, $b7, $c9, $db, $e6, $ef, $ff, $00, $02
141ad     11 29 35 3C 
141b1     45 4F 54 5C 
141b5     5E 5A 4D 38 
141b9     2E 2A 21 0F | 	byte	$11, $29, $35, $3c, $45, $4f, $54, $5c, $5e, $5a, $4d, $38, $2e, $2a, $21, $0f
141bd     00 00 F1 DF 
141c1     D6 DF D2 BA 
141c5     BC D2 DC E6 
141c9     F2 00 01 07 | 	byte	$00, $00, $f1, $df, $d6, $df, $d2, $ba, $bc, $d2, $dc, $e6, $f2, $00, $01, $07
141cd     1A 2E 37 3C 
141d1     49 4F 58 5E 
141d5     5E 54 46 35 
141d9     2E 25 18 05 | 	byte	$1a, $2e, $37, $3c, $49, $4f, $58, $5e, $5e, $54, $46, $35, $2e, $25, $18, $05
141dd     00 FF ED D7 
141e1     D7 DB C8 B7 
141e5     C4 D7 DF E6 
141e9     F9 00 02 0E | 	byte	$00, $ff, $ed, $d7, $d7, $db, $c8, $b7, $c4, $d7, $df, $e6, $f9, $00, $02, $0e
141ed     1E 2E 37 3F 
141f1     4D 54 5C 60 
141f5     5E 54 46 2E 
141f9     2E 21 13 00 | 	byte	$1e, $2e, $37, $3f, $4d, $54, $5c, $60, $5e, $54, $46, $2e, $2e, $21, $13, $00
141fd     00 FB E8 D6 
14201     DC D6 BC B7 
14205     CF DB DF EA 
14209     FE 01 07 16 | 	byte	$00, $fb, $e8, $d6, $dc, $d6, $bc, $b7, $cf, $db, $df, $ea, $fe, $01, $07, $16
1420d     29 31 38 45 
14211     4F 58 5E 64 
14215     5C 4F 3D 2E 
14219     2A 21 0F 00 | 	byte	$29, $31, $38, $45, $4f, $58, $5e, $64, $5c, $4f, $3d, $2e, $2a, $21, $0f, $00
1421d     00 F2 DF D6 
14221     DB CB BA BB 
14225     D2 DB E2 EF 
14229     00 02 0E 1D | 	byte	$00, $f2, $df, $d6, $db, $cb, $ba, $bb, $d2, $db, $e2, $ef, $00, $02, $0e, $1d
1422d     2E 31 3C 49 
14231     54 5C 64 64 
14235     5A 4D 35 2E 
14239     25 18 05 00 | 	byte	$2e, $31, $3c, $49, $54, $5c, $64, $64, $5a, $4d, $35, $2e, $25, $18, $05, $00
1423d     00 F1 DB D7 
14241     D7 C3 B3 C4 
14245     D6 DB E6 F9 
14249     00 07 11 21 | 	byte	$00, $f1, $db, $d7, $d7, $c3, $b3, $c4, $d6, $db, $e6, $f9, $00, $07, $11, $21
1424d     2E 35 3F 4F 
14251     58 5E 65 5E 
14255     54 46 35 2E 
14259     21 0F 00 00 | 	byte	$2e, $35, $3f, $4f, $58, $5e, $65, $5e, $54, $46, $35, $2e, $21, $0f, $00, $00
1425d     FB E8 D6 D7 
14261     D2 BB B7 C9 
14265     D6 DC EA FE 
14269     01 08 18 25 | 	byte	$fb, $e8, $d6, $d7, $d2, $bb, $b7, $c9, $d6, $dc, $ea, $fe, $01, $08, $18, $25
1426d     2E 37 45 54 
14271     5C 64 65 5E 
14275     4F 3D 2E 2A 
14279     1D 07 00 00 | 	byte	$2e, $37, $45, $54, $5c, $64, $65, $5e, $4f, $3d, $2e, $2a, $1d, $07, $00, $00
1427d     F8 E3 D6 D6 
14281     CB BA BB D2 
14285     D7 DC EF 00 
14289     05 11 1E 2A | 	byte	$f8, $e3, $d6, $d6, $cb, $ba, $bb, $d2, $d7, $dc, $ef, $00, $05, $11, $1e, $2a
1428d     2E 3C 4D 58 
14291     5E 65 64 5A 
14295     4D 37 2E 25 
14299     13 01 01 00 | 	byte	$2e, $3c, $4d, $58, $5e, $65, $64, $5a, $4d, $37, $2e, $25, $13, $01, $01, $00
1429d     F1 DF D6 D2 
142a1     C3 B3 C4 D2 
142a5     D7 E6 F9 00 
142a9     08 16 21 2A | 	byte	$f1, $df, $d6, $d2, $c3, $b3, $c4, $d2, $d7, $e6, $f9, $00, $08, $16, $21, $2a
142ad     31 3F 4F 5A 
142b1     64 65 64 5A 
142b5     46 35 2A 21 
142b9     0F 01 00 FB | 	byte	$31, $3f, $4f, $5a, $64, $65, $64, $5a, $46, $35, $2a, $21, $0f, $01, $00, $fb
142bd     EA D7 D2 CB 
142c1     BA B7 C9 D2 
142c5     DB EA FE 02 
142c9     0F 1A 25 2E | 	byte	$ea, $d7, $d2, $cb, $ba, $b7, $c9, $d2, $db, $ea, $fe, $02, $0f, $1a, $25, $2e
142cd     37 45 54 5E 
142d1     65 66 5E 54 
142d5     3D 2E 2A 18 
142d9     05 01 00 F8 | 	byte	$37, $45, $54, $5e, $65, $66, $5e, $54, $3d, $2e, $2a, $18, $05, $01, $00, $f8
142dd     E6 D6 D2 C8 
142e1     BA BC C9 D2 
142e5     DC EF 00 07 
142e9     13 1E 29 2E | 	byte	$e6, $d6, $d2, $c8, $ba, $bc, $c9, $d2, $dc, $ef, $00, $07, $13, $1e, $29, $2e
142ed     3C 4D 58 60 
142f1     66 65 5C 4D 
142f5     37 2E 24 11 
142f9     02 01 00 F1 | 	byte	$3c, $4d, $58, $60, $66, $65, $5c, $4d, $37, $2e, $24, $11, $02, $01, $00, $f1
142fd     DF D2 CF BC 
14301     B3 C1 CB D6 
14305     E6 F9 01 0E 
14309     18 21 2A 31 | 	byte	$df, $d2, $cf, $bc, $b3, $c1, $cb, $d6, $e6, $f9, $01, $0e, $18, $21, $2a, $31
1430d     3F 54 5C 65 
14311     66 64 5A 46 
14315     35 2A 21 08 
14319     01 00 FB ED | 	byte	$3f, $54, $5c, $65, $66, $64, $5a, $46, $35, $2a, $21, $08, $01, $00, $fb, $ed
1431d     DF D2 CB BA 
14321     B7 C4 CF DB 
14325     EA FF 07 11 
14329     1A 24 2A 35 | 	byte	$df, $d2, $cb, $ba, $b7, $c4, $cf, $db, $ea, $ff, $07, $11, $1a, $24, $2a, $35
1432d     45 58 60 66 
14331     66 60 54 46 
14335     2E 25 18 05 
14339     01 00 F8 E8 | 	byte	$45, $58, $60, $66, $66, $60, $54, $46, $2e, $25, $18, $05, $01, $00, $f8, $e8
1433d     D7 CF C4 B3 
14341     BB 00 00 F9 
14345     FC FC FD FF 
14349     00 00 01 03 | 	byte	$d7, $cf, $c4, $b3, $bb, $00, $00, $f9, $fc, $fc, $fd, $ff, $00, $00, $01, $03
1434d     04 07 09 0A 
14351     0D 0D 0E 13 
14355     13 13 10 0E 
14359     10 14 1A 20 | 	byte	$04, $07, $09, $0a, $0d, $0d, $0e, $13, $13, $13, $10, $0e, $10, $14, $1a, $20
1435d     21 20 1E 16 
14361     0E 07 07 03 
14365     03 03 FD EA 
14369     D0 BC AF B1 | 	byte	$21, $20, $1e, $16, $0e, $07, $07, $03, $03, $03, $fd, $ea, $d0, $bc, $af, $b1
1436d     B1 B1 B3 AD 
14371     A7 A9 A6 A9 
14375     A2 9D 9D 9A 
14379     9A 90 94 94 | 	byte	$b1, $b1, $b3, $ad, $a7, $a9, $a6, $a9, $a2, $9d, $9d, $9a, $9a, $90, $94, $94
1437d     A0 A9 B1 AD 
14381     AF B1 B5 CC 
14385     E0 F2 F6 F6 
14389     F6 DF D3 C9 | 	byte	$a0, $a9, $b1, $ad, $af, $b1, $b5, $cc, $e0, $f2, $f6, $f6, $f6, $df, $d3, $c9
1438d     CC CF DA E6 
14391     EC F0 FC EC 
14395     EA DA CA C0 
14399     BF BF C5 D0 | 	byte	$cc, $cf, $da, $e6, $ec, $f0, $fc, $ec, $ea, $da, $ca, $c0, $bf, $bf, $c5, $d0
1439d     E0 F3 04 09 
143a1     21 2A 37 34 
143a5     2C 20 18 16 
143a9     16 0E 0D 01 | 	byte	$e0, $f3, $04, $09, $21, $2a, $37, $34, $2c, $20, $18, $16, $16, $0e, $0d, $01
143ad     01 09 16 26 
143b1     37 3B 3D 2D 
143b5     18 01 FF 00 
143b9     FF 00 01 04 | 	byte	$01, $09, $16, $26, $37, $3b, $3d, $2d, $18, $01, $ff, $00, $ff, $00, $01, $04
143bd     09 00 FC F7 
143c1     F9 FF 07 10 
143c5     24 2D 3A 44 
143c9     4B 4B 4B 41 | 	byte	$09, $00, $fc, $f7, $f9, $ff, $07, $10, $24, $2d, $3a, $44, $4b, $4b, $4b, $41
143cd     27 14 FF F2 
143d1     F6 01 14 1D 
143d5     21 21 20 20 
143d9     20 1E 1D 16 | 	byte	$27, $14, $ff, $f2, $f6, $01, $14, $1d, $21, $21, $20, $20, $20, $1e, $1d, $16
143dd     04 ED DC D3 
143e1     C5 CC D3 D9 
143e5     E2 EA F3 EC 
143e9     EC E6 E0 DF | 	byte	$04, $ed, $dc, $d3, $c5, $cc, $d3, $d9, $e2, $ea, $f3, $ec, $ec, $e6, $e0, $df
143ed     E0 E2 E8 F2 
143f1     F3 FD F9 EA 
143f5     DF D0 D4 CA 
143f9     CC C5 C9 CA | 	byte	$e0, $e2, $e8, $f2, $f3, $fd, $f9, $ea, $df, $d0, $d4, $ca, $cc, $c5, $c9, $ca
143fd     D6 DA DC CA 
14401     C3 BF C6 DA 
14405     F0 04 0D 10 
14409     10 16 20 30 | 	byte	$d6, $da, $dc, $ca, $c3, $bf, $c6, $da, $f0, $04, $0d, $10, $10, $16, $20, $30
1440d     36 3B 3D 3A 
14411     34 20 13 FC 
14415     F7 E6 D6 D6 
14419     D3 D6 E2 F2 | 	byte	$36, $3b, $3d, $3a, $34, $20, $13, $fc, $f7, $e6, $d6, $d6, $d3, $d6, $e2, $f2
1441d     FF 03 00 F6 
14421     E6 DC D3 CA 
14425     D3 DA E2 EC 
14429     EC DF DF D0 | 	byte	$ff, $03, $00, $f6, $e6, $dc, $d3, $ca, $d3, $da, $e2, $ec, $ec, $df, $df, $d0
1442d     D4 E0 E6 EC 
14431     EC DA BC AC 
14435     92 84 86 89 
14439     90 A0 AD B3 | 	byte	$d4, $e0, $e6, $ec, $ec, $da, $bc, $ac, $92, $84, $86, $89, $90, $a0, $ad, $b3
1443d     B9 BC C6 CC 
14441     D9 E6 EC F3 
14445     F9 00 04 04 
14449     07 03 00 00 | 	byte	$b9, $bc, $c6, $cc, $d9, $e6, $ec, $f3, $f9, $00, $04, $04, $07, $03, $00, $00
1444d     F9 F9 F9 03 
14451     0A 1D 2D 30 
14455     30 2C 24 2C 
14459     34 43 41 43 | 	byte	$f9, $f9, $f9, $03, $0a, $1d, $2d, $30, $30, $2c, $24, $2c, $34, $43, $41, $43
1445d     30 1E 0D 13 
14461     13 1E 2D 30 
14465     36 27 20 07 
14469     F0 C0 90 80 | 	byte	$30, $1e, $0d, $13, $13, $1e, $2d, $30, $36, $27, $20, $07, $f0, $c0, $90, $80
1446d     80 80 83 94 
14471     9D A6 A0 A6 
14475     A9 AC AD AD 
14479     A6 A0 A3 A3 | 	byte	$80, $80, $83, $94, $9d, $a6, $a0, $a6, $a9, $ac, $ad, $ad, $a6, $a0, $a3, $a3
1447d     A2 A3 A3 96 
14481     96 98 9C B1 
14485     BD C3 C0 C0 
14489     C3 CA D3 E0 | 	byte	$a2, $a3, $a3, $96, $96, $98, $9c, $b1, $bd, $c3, $c0, $c0, $c3, $ca, $d3, $e0
1448d     F0 01 10 16 
14491     16 18 0E FC 
14495     ED DA D6 DA 
14499     E0 E3 ED F0 | 	byte	$f0, $01, $10, $16, $16, $18, $0e, $fc, $ed, $da, $d6, $da, $e0, $e3, $ed, $f0
1449d     F2 F3 EC ED 
144a1     E3 E6 E6 E6 
144a5     F0 03 0E 27 
144a9     34 40 43 43 | 	byte	$f2, $f3, $ec, $ed, $e3, $e6, $e6, $e6, $f0, $03, $0e, $27, $34, $40, $43, $43
144ad     53 59 57 51 
144b1     2C 0D ED DC 
144b5     CF CF D4 DF 
144b9     EC FC F3 00 | 	byte	$53, $59, $57, $51, $2c, $0d, $ed, $dc, $cf, $cf, $d4, $df, $ec, $fc, $f3, $00
144bd     FF 00 01 01 
144c1     04 10 20 40 
144c5     54 66 74 77 
144c9     76 71 64 63 | 	byte	$ff, $00, $01, $01, $04, $10, $20, $40, $54, $66, $74, $77, $76, $71, $64, $63
144cd     4B 37 1E 0D 
144d1     FF F9 00 F6 
144d5     EA E0 E0 E6 
144d9     F0 F9 F6 F3 | 	byte	$4b, $37, $1e, $0d, $ff, $f9, $00, $f6, $ea, $e0, $e0, $e6, $f0, $f9, $f6, $f3
144dd     F0 F6 FC 10 
144e1     26 2D 3A 37 
144e5     26 18 07 EC 
144e9     D6 C3 B3 AD | 	byte	$f0, $f6, $fc, $10, $26, $2d, $3a, $37, $26, $18, $07, $ec, $d6, $c3, $b3, $ad
144ed     B1 BC CC C9 
144f1     C9 C9 C6 C6 
144f5     C9 C6 C0 C5 
144f9     CA DF F0 00 | 	byte	$b1, $bc, $cc, $c9, $c9, $c9, $c6, $c6, $c9, $c6, $c0, $c5, $ca, $df, $f0, $00
144fd     0D 0E 09 04 
14501     01 01 01 04 
14505     04 F7 F6 F2 
14509     F2 F0 F3 00 | 	byte	$0d, $0e, $09, $04, $01, $01, $01, $04, $04, $f7, $f6, $f2, $f2, $f0, $f3, $00
1450d     0A 10 0D 0D 
14511     03 00 FD F9 
14515     F3 FF 0A 14 
14519     2A 31 31 31 | 	byte	$0a, $10, $0d, $0d, $03, $00, $fd, $f9, $f3, $ff, $0a, $14, $2a, $31, $31, $31
1451d     27 20 18 04 
14521     E0 BC A0 96 
14525     90 A6 B3 CA 
14529     D3 D6 DA DF | 	byte	$27, $20, $18, $04, $e0, $bc, $a0, $96, $90, $a6, $b3, $ca, $d3, $d6, $da, $df
1452d     E3 ED ED E2 
14531     D6 CA C3 C0 
14535     C5 D0 D6 DC 
14539     D4 D0 C0 BF | 	byte	$e3, $ed, $ed, $e2, $d6, $ca, $c3, $c0, $c5, $d0, $d6, $dc, $d4, $d0, $c0, $bf
1453d     B1 A6 9A 92 
14541     A2 B3 CF E6 
14545     F3 04 0E 14 
14549     24 24 21 20 | 	byte	$b1, $a6, $9a, $92, $a2, $b3, $cf, $e6, $f3, $04, $0e, $14, $24, $24, $21, $20
1454d     1A 1A 1D 24 
14551     26 24 20 1A 
14555     0A FD FD F6 
14559     F9 F2 F3 F6 | 	byte	$1a, $1a, $1d, $24, $26, $24, $20, $1a, $0a, $fd, $fd, $f6, $f9, $f2, $f3, $f6
1455d     03 10 2D 43 
14561     5A 63 60 63 
14565     5A 53 4D 2D 
14569     10 F6 D0 B7 | 	byte	$03, $10, $2d, $43, $5a, $63, $60, $63, $5a, $53, $4d, $2d, $10, $f6, $d0, $b7
1456d     A6 9A 92 83 
14571     80 80 80 80 
14575     80 80 80 80 
14579     80 80 90 A3 | 	byte	$a6, $9a, $92, $83, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $90, $a3
1457d     B1 C5 C6 CA 
14581     D6 DF EA E2 
14585     E3 E0 DA DF 
14589     E0 E6 E8 EC | 	byte	$b1, $c5, $c6, $ca, $d6, $df, $ea, $e2, $e3, $e0, $da, $df, $e0, $e6, $e8, $ec
1458d     E6 D3 C5 BF 
14591     B3 B1 AC B1 
14595     BD CA E3 F2 
14599     04 14 26 37 | 	byte	$e6, $d3, $c5, $bf, $b3, $b1, $ac, $b1, $bd, $ca, $e3, $f2, $04, $14, $26, $37
1459d     37 3A 37 24 
145a1     14 04 FC FC 
145a5     01 0D 1A 20 
145a9     1A 0E 0D 0D | 	byte	$37, $3a, $37, $24, $14, $04, $fc, $fc, $01, $0d, $1a, $20, $1a, $0e, $0d, $0d
145ad     10 00 ED DF 
145b1     DF DF F0 FD 
145b5     18 27 40 36 
145b9     3A 3A 30 27 | 	byte	$10, $00, $ed, $df, $df, $df, $f0, $fd, $18, $27, $40, $36, $3a, $3a, $30, $27
145bd     1D 10 0E 0E 
145c1     09 0D 18 10 
145c5     16 21 2C 34 
145c9     43 47 4B 4B | 	byte	$1d, $10, $0e, $0e, $09, $0d, $18, $10, $16, $21, $2c, $34, $43, $47, $4b, $4b
145cd     49 4B 44 41 
145d1     41 37 3A 2D 
145d5     26 1A 0A 00 
145d9     EC E2 E0 E3 | 	byte	$49, $4b, $44, $41, $41, $37, $3a, $2d, $26, $1a, $0a, $00, $ec, $e2, $e0, $e3
145dd     F0 F6 FD 04 
145e1     13 04 FF FC 
145e5     F6 ED E8 E8 
145e9     E6 EA F3 FC | 	byte	$f0, $f6, $fd, $04, $13, $04, $ff, $fc, $f6, $ed, $e8, $e8, $e6, $ea, $f3, $fc
145ed     FC F2 EC E2 
145f1     DA D3 CF C0 
145f5     BD A6 9D 94 
145f9     98 9C AD BC | 	byte	$fc, $f2, $ec, $e2, $da, $d3, $cf, $c0, $bd, $a6, $9d, $94, $98, $9c, $ad, $bc
145fd     CF E2 F2 FD 
14601     10 1A 18 20 
14605     2A 31 41 40 
14609     4B 4D 4F 37 | 	byte	$cf, $e2, $f2, $fd, $10, $1a, $18, $20, $2a, $31, $41, $40, $4b, $4d, $4f, $37
1460d     27 0D 04 FC 
14611     F6 ED EA E0 
14615     DF E6 E8 EA 
14619     F0 F7 FF 03 | 	byte	$27, $0d, $04, $fc, $f6, $ed, $ea, $e0, $df, $e6, $e8, $ea, $f0, $f7, $ff, $03
1461d     0D 0E 10 0E 
14621     04 F3 ED DA 
14625     D9 E0 D9 E6 
14629     E3 E6 E2 DC | 	byte	$0d, $0e, $10, $0e, $04, $f3, $ed, $da, $d9, $e0, $d9, $e6, $e3, $e6, $e2, $dc
1462d     BD A0 86 80 
14631     80 80 92 B5 
14635     CC D4 E0 E2 
14639     E8 F7 FD 03 | 	byte	$bd, $a0, $86, $80, $80, $80, $92, $b5, $cc, $d4, $e0, $e2, $e8, $f7, $fd, $03
1463d     04 04 07 04 
14641     04 FD F9 FC 
14645     FD 01 04 09 
14649     FC F3 EA DC | 	byte	$04, $04, $07, $04, $04, $fd, $f9, $fc, $fd, $01, $04, $09, $fc, $f3, $ea, $dc
1464d     DF E2 EC F3 
14651     01 0A 0E 10 
14655     21 2A 2A 2A 
14659     2A 26 27 31 | 	byte	$df, $e2, $ec, $f3, $01, $0a, $0e, $10, $21, $2a, $2a, $2a, $2a, $26, $27, $31
1465d     37 41 49 41 
14661     31 16 03 F6 
14665     EA E2 E6 EA 
14669     EC E8 DC C9 | 	byte	$37, $41, $49, $41, $31, $16, $03, $f6, $ea, $e2, $e6, $ea, $ec, $e8, $dc, $c9
1466d     B9 B5 B5 BC 
14671     BF BC B5 AC 
14675     9C 86 80 80 
14679     80 8F 9D AF | 	byte	$b9, $b5, $b5, $bc, $bf, $bc, $b5, $ac, $9c, $86, $80, $80, $80, $8f, $9d, $af
1467d     B5 B1 B1 BD 
14681     BC C3 BF C0 
14685     C3 C6 D4 DA 
14689     E2 F3 E8 E6 | 	byte	$b5, $b1, $b1, $bd, $bc, $c3, $bf, $c0, $c3, $c6, $d4, $da, $e2, $f3, $e8, $e6
1468d     E2 DF DC E0 
14691     E2 E3 E8 F0 
14695     F2 F9 ED E8 
14699     E0 DA D6 D6 | 	byte	$e2, $df, $dc, $e0, $e2, $e3, $e8, $f0, $f2, $f9, $ed, $e8, $e0, $da, $d6, $d6
1469d     DA E0 E3 ED 
146a1     F0 F9 09 16 
146a5     2A 3D 3B 41 
146a9     41 40 3B 24 | 	byte	$da, $e0, $e3, $ed, $f0, $f9, $09, $16, $2a, $3d, $3b, $41, $41, $40, $3b, $24
146ad     14 0E 09 07 
146b1     13 1D 13 18 
146b5     10 01 01 03 
146b9     03 07 13 14 | 	byte	$14, $0e, $09, $07, $13, $1d, $13, $18, $10, $01, $01, $03, $03, $07, $13, $14
146bd     16 24 2D 37 
146c1     3B 3D 3D 41 
146c5     43 47 47 4B 
146c9     47 41 41 37 | 	byte	$16, $24, $2d, $37, $3b, $3d, $3d, $41, $43, $47, $47, $4b, $47, $41, $41, $37
146cd     31 16 03 F0 
146d1     E0 DC E3 F7 
146d5     04 13 21 2D 
146d9     31 41 41 41 | 	byte	$31, $16, $03, $f0, $e0, $dc, $e3, $f7, $04, $13, $21, $2d, $31, $41, $41, $41
146dd     3A 30 1D 03 
146e1     F2 EC E0 E6 
146e5     E6 F0 F6 F6 
146e9     F6 F3 E3 DA | 	byte	$3a, $30, $1d, $03, $f2, $ec, $e0, $e6, $e6, $f0, $f6, $f6, $f6, $f3, $e3, $da
146ed     D0 CF C9 CC 
146f1     CC C9 C9 C6 
146f5     C0 C3 B9 C0 
146f9     CA CF DA E2 | 	byte	$d0, $cf, $c9, $cc, $cc, $c9, $c9, $c6, $c0, $c3, $b9, $c0, $ca, $cf, $da, $e2
146fd     E3 F0 FF 01 
14701     0D 10 0D 07 
14705     00 F9 F6 FC 
14709     FC FF 09 10 | 	byte	$e3, $f0, $ff, $01, $0d, $10, $0d, $07, $00, $f9, $f6, $fc, $fc, $ff, $09, $10
1470d     20 2D 40 41 
14711     41 40 34 2C 
14715     1D 14 10 0D 
14719     0E 1A 20 20 | 	byte	$20, $2d, $40, $41, $41, $40, $34, $2c, $1d, $14, $10, $0d, $0e, $1a, $20, $20
1471d     1A 10 00 F9 
14721     ED E6 E2 D4 
14725     CA BF B5 B7 
14729     BD C3 CA CC | 	byte	$1a, $10, $00, $f9, $ed, $e6, $e2, $d4, $ca, $bf, $b5, $b7, $bd, $c3, $ca, $cc
1472d     CC CC C9 C9 
14731     C0 C3 BD B9 
14735     BC BF CF D3 
14739     DC DC DC DF | 	byte	$cc, $cc, $c9, $c9, $c0, $c3, $bd, $b9, $bc, $bf, $cf, $d3, $dc, $dc, $dc, $df
1473d     E0 EC F0 F9 
14741     03 0D 14 1D 
14745     26 2A 1D 1A 
14749     0E FF FD FC | 	byte	$e0, $ec, $f0, $f9, $03, $0d, $14, $1d, $26, $2a, $1d, $1a, $0e, $ff, $fd, $fc
1474d     FC FF 09 16 
14751     1E 1D 1D 1D 
14755     20 2C 30 31 
14759     31 31 21 1D | 	byte	$fc, $ff, $09, $16, $1e, $1d, $1d, $1d, $20, $2c, $30, $31, $31, $31, $21, $1d
1475d     0E FF FC F6 
14761     F2 F9 F9 FF 
14765     01 09 0A 01 
14769     EA CA AF 9D | 	byte	$0e, $ff, $fc, $f6, $f2, $f9, $f9, $ff, $01, $09, $0a, $01, $ea, $ca, $af, $9d
1476d     9C 8F 89 86 
14771     80 80 80 80 
14775     84 96 9C AF 
14779     BF C5 CA CA | 	byte	$9c, $8f, $89, $86, $80, $80, $80, $80, $84, $96, $9c, $af, $bf, $c5, $ca, $ca
1477d     CF CF D0 D6 
14781     E8 EC F0 F2 
14785     F0 F2 DF C6 
14789     BF BD C5 CF | 	byte	$cf, $cf, $d0, $d6, $e8, $ec, $f0, $f2, $f0, $f2, $df, $c6, $bf, $bd, $c5, $cf
1478d     DA E2 EA EA 
14791     ED F2 F2 F2 
14795     F2 EA EC EC 
14799     EC ED E6 E3 | 	byte	$da, $e2, $ea, $ea, $ed, $f2, $f2, $f2, $f2, $ea, $ec, $ec, $ec, $ed, $e6, $e3
1479d     E2 DF DA D9 
147a1     DF E0 E6 E8 
147a5     F3 F6 01 01 
147a9     0A 1A 31 41 | 	byte	$e2, $df, $da, $d9, $df, $e0, $e6, $e8, $f3, $f6, $01, $01, $0a, $1a, $31, $41
147ad     47 4B 47 3A 
147b1     2D 18 09 09 
147b5     0A 18 26 36 
147b9     44 43 59 57 | 	byte	$47, $4b, $47, $3a, $2d, $18, $09, $09, $0a, $18, $26, $36, $44, $43, $59, $57
147bd     4D 49 43 37 
147c1     3B 3A 37 37 
147c5     36 34 27 2A 
147c9     27 27 26 1E | 	byte	$4d, $49, $43, $37, $3b, $3a, $37, $37, $36, $34, $27, $2a, $27, $27, $26, $1e
147cd     16 07 FF F6 
147d1     F3 F7 FD 07 
147d5     1A 30 36 31 
147d9     26 13 01 E6 | 	byte	$16, $07, $ff, $f6, $f3, $f7, $fd, $07, $1a, $30, $36, $31, $26, $13, $01, $e6
147dd     D9 D0 D4 DF 
147e1     ED FF 04 10 
147e5     0E 13 13 00 
147e9     FF FC F7 F3 | 	byte	$d9, $d0, $d4, $df, $ed, $ff, $04, $10, $0e, $13, $13, $00, $ff, $fc, $f7, $f3
147ed     F6 F6 F7 F7 
147f1     EA E0 D3 C6 
147f5     C0 BD C0 C6 
147f9     CA CF DA DA | 	byte	$f6, $f6, $f7, $f7, $ea, $e0, $d3, $c6, $c0, $bd, $c0, $c6, $ca, $cf, $da, $da
147fd     E0 F2 FF 03 
14801     0A 0A 0D FF 
14805     FD E6 D9 DF 
14809     E6 F6 10 20 | 	byte	$e0, $f2, $ff, $03, $0a, $0a, $0d, $ff, $fd, $e6, $d9, $df, $e6, $f6, $10, $20
1480d     2C 36 36 31 
14811     31 20 1E 18 
14815     1A 1E 2A 27 
14819     26 1D 16 09 | 	byte	$2c, $36, $36, $31, $31, $20, $1e, $18, $1a, $1e, $2a, $27, $26, $1d, $16, $09
1481d     03 F9 F7 F9 
14821     F7 01 09 1A 
14825     2A 10 01 F2 
14829     E8 EA E8 E3 | 	byte	$03, $f9, $f7, $f9, $f7, $01, $09, $1a, $2a, $10, $01, $f2, $e8, $ea, $e8, $e3
1482d     E6 D6 CF B5 
14831     A7 A6 A2 A7 
14835     B5 C3 C9 D4 
14839     DC DC E3 E2 | 	byte	$e6, $d6, $cf, $b5, $a7, $a6, $a2, $a7, $b5, $c3, $c9, $d4, $dc, $dc, $e3, $e2
1483d     E0 E2 E6 ED 
14841     F9 FF 09 09 
14845     0A 0A 01 FF 
14849     FC FF 01 13 | 	byte	$e0, $e2, $e6, $ed, $f9, $ff, $09, $09, $0a, $0a, $01, $ff, $fc, $ff, $01, $13
1484d     14 20 18 1D 
14851     13 1E 2D 3B 
14855     51 59 57 47 
14859     41 26 0A FC | 	byte	$14, $20, $18, $1d, $13, $1e, $2d, $3b, $51, $59, $57, $47, $41, $26, $0a, $fc
1485d     F2 F0 ED FF 
14861     01 0E 14 1E 
14865     1A 14 01 E8 
14869     CA A3 8C 83 | 	byte	$f2, $f0, $ed, $ff, $01, $0e, $14, $1e, $1a, $14, $01, $e8, $ca, $a3, $8c, $83
1486d     80 80 80 80 
14871     80 80 80 80 
14875     80          | 	byte	$80[9]
14876     8C 92 A2 AC 
1487a     B3 B5 BC C6 
1487e     CF E3 E8 F2 
14882     F2 EA C9 B9 | 	byte	$8c, $92, $a2, $ac, $b3, $b5, $bc, $c6, $cf, $e3, $e8, $f2, $f2, $ea, $c9, $b9
14886     AC B3 C5 D9 
1488a     F2 0A 1A 24 
1488e     2C 2C 1D 14 
14892     07 FF F3 F2 | 	byte	$ac, $b3, $c5, $d9, $f2, $0a, $1a, $24, $2c, $2c, $1d, $14, $07, $ff, $f3, $f2
14896     E8 E2 E0 E0 
1489a     D6 D4 C6 C5 
1489e     BD B1 B9 BC 
148a2     CF DF EA E3 | 	byte	$e8, $e2, $e0, $e0, $d6, $d4, $c6, $c5, $bd, $b1, $b9, $bc, $cf, $df, $ea, $e3
148a6     F0 FF 03 18 
148aa     27 30 37 3B 
148ae     2C 21 1A 18 
148b2     1D 1D 2D 34 | 	byte	$f0, $ff, $03, $18, $27, $30, $37, $3b, $2c, $21, $1a, $18, $1d, $1d, $2d, $34
148b6     3D 43 44 3D 
148ba     30 2D 2D 31 
148be     3A 40 4B 51 
148c2     53 5A 5A 4F | 	byte	$3d, $43, $44, $3d, $30, $2d, $2d, $31, $3a, $40, $4b, $51, $53, $5a, $5a, $4f
148c6     44 41 41 40 
148ca     41 49 4B 44 
148ce     31 1D 0E 09 
148d2     13 13 13 07 | 	byte	$44, $41, $41, $40, $41, $49, $4b, $44, $31, $1d, $0e, $09, $13, $13, $13, $07
148d6     FC F3 D9 C5 
148da     BD AD AF B1 
148de     C3 D6 ED 01 
148e2     16 1D 1D 1D | 	byte	$fc, $f3, $d9, $c5, $bd, $ad, $af, $b1, $c3, $d6, $ed, $01, $16, $1d, $1d, $1d
148e6     1D 14 0E 07 
148ea     00 F9 F6 F0 
148ee     E3 D6 CC C6 
148f2     C6 C9 DA E0 | 	byte	$1d, $14, $0e, $07, $00, $f9, $f6, $f0, $e3, $d6, $cc, $c6, $c6, $c9, $da, $e0
148f6     EC F9 FF FC 
148fa     F3 F3 FC 00 
148fe     07 07 09 09 
14902     FC ED EC E2 | 	byte	$ec, $f9, $ff, $fc, $f3, $f3, $fc, $00, $07, $07, $09, $09, $fc, $ed, $ec, $e2
14906     E8 F3 F9 03 
1490a     0E 14 1D 1D 
1490e     18 18 18 0E 
14912     10 07 04 07 | 	byte	$e8, $f3, $f9, $03, $0e, $14, $1d, $1d, $18, $18, $18, $0e, $10, $07, $04, $07
14916     07 09 0E 10 
1491a     10 07 FC FC 
1491e     F7 FD 0D 18 
14922     1D 0E 0D 10 | 	byte	$07, $09, $0e, $10, $10, $07, $fc, $fc, $f7, $fd, $0d, $18, $1d, $0e, $0d, $10
14926     2A 37 41 47 
1492a     37 2C 0E F2 
1492e     E3 D3 CC D0 
14932     CF D6 DF DF | 	byte	$2a, $37, $41, $47, $37, $2c, $0e, $f2, $e3, $d3, $cc, $d0, $cf, $d6, $df, $df
14936     F2 EA E3 E6 
1493a     E3 E3 E3 DA 
1493e     DC CA CA CC 
14942     CF D0 D4 D9 | 	byte	$f2, $ea, $e3, $e6, $e3, $e3, $e3, $da, $dc, $ca, $ca, $cc, $cf, $d0, $d4, $d9
14946     D9 DC E2 F0 
1494a     04 16 27 2C 
1494e     2D 31 43 47 
14952     4D 41 3D 2D | 	byte	$d9, $dc, $e2, $f0, $04, $16, $27, $2c, $2d, $31, $43, $47, $4d, $41, $3d, $2d
14956     0E FF E6 D9 
1495a     D3 DA EC FF 
1495e     21 36 49 4F 
14962     47 3D 2D 27 | 	byte	$0e, $ff, $e6, $d9, $d3, $da, $ec, $ff, $21, $36, $49, $4f, $47, $3d, $2d, $27
14966     1A 0D F3 D6 
1496a     B7 A7 98 98 
1496e     98 92 86 89 
14972     80 80 80 80 | 	byte	$1a, $0d, $f3, $d6, $b7, $a7, $98, $98, $98, $92, $86, $89, $80, $80, $80, $80
14976     80 80 80 80 
1497a     8C 9C AC B9 
1497e     BF C5 C5 C5 
14982     C3 C6 CF DA | 	byte	$80, $80, $80, $80, $8c, $9c, $ac, $b9, $bf, $c5, $c5, $c5, $c3, $c6, $cf, $da
14986     EA F7 00 0E 
1498a     0E 0E 00 F6 
1498e     EA E8 E8 EA 
14992     F0 F3 F7 F6 | 	byte	$ea, $f7, $00, $0e, $0e, $0e, $00, $f6, $ea, $e8, $e8, $ea, $f0, $f3, $f7, $f6
14996     F9 FC ED E2 
1499a     D3 CC C9 D0 
1499e     DC F0 F3 F6 
149a2     F7 FD 07 13 | 	byte	$f9, $fc, $ed, $e2, $d3, $cc, $c9, $d0, $dc, $f0, $f3, $f6, $f7, $fd, $07, $13
149a6     1D 1E 1D 14 
149aa     03 FC F2 F6 
149ae     F6 F9 01 0A 
149b2     16 2A 34 3A | 	byte	$1d, $1e, $1d, $14, $03, $fc, $f2, $f6, $f6, $f9, $01, $0a, $16, $2a, $34, $3a
149b6     3D 40 43 47 
149ba     4B 51 4D 4B 
149be     43 37 36 2A 
149c2     21 1E 20 26 | 	byte	$3d, $40, $43, $47, $4b, $51, $4d, $4b, $43, $37, $36, $2a, $21, $1e, $20, $26
149c6     36 4B 63 7F 
149ca     7F 7F 7F 6A 
149ce     4F 37 20 16 
149d2     0A FF ED DF | 	byte	$36, $4b, $63, $7f, $7f, $7f, $7f, $6a, $4f, $37, $20, $16, $0a, $ff, $ed, $df
149d6     D4 D0 D0 D3 
149da     DA E3 EC F6 
149de     FC F7 ED E8 
149e2     E8 E8 E8 F0 | 	byte	$d4, $d0, $d0, $d3, $da, $e3, $ec, $f6, $fc, $f7, $ed, $e8, $e8, $e8, $e8, $f0
149e6     EA EC EC E8 
149ea     ED F3 F2 F6 
149ee     F3 EC E3 E3 
149f2     E3 E2 DF D6 | 	byte	$ea, $ec, $ec, $e8, $ed, $f3, $f2, $f6, $f3, $ec, $e3, $e3, $e3, $e2, $df, $d6
149f6     CA C0 BD CA 
149fa     E0 F7 0D 1A 
149fe     18 18 18 14 
14a02     07 0A 09 0D | 	byte	$ca, $c0, $bd, $ca, $e0, $f7, $0d, $1a, $18, $18, $18, $14, $07, $0a, $09, $0d
14a06     16 26 34 34 
14a0a     31 2D 26 1E 
14a0e     20 10 07 FC 
14a12     E8 DF D3 D0 | 	byte	$16, $26, $34, $34, $31, $2d, $26, $1e, $20, $10, $07, $fc, $e8, $df, $d3, $d0
14a16     CC CF CC CF 
14a1a     D4 E0 F6 04 
14a1e     13 20 2D 34 
14a22     3A 44 59 64 | 	byte	$cc, $cf, $cc, $cf, $d4, $e0, $f6, $04, $13, $20, $2d, $34, $3a, $44, $59, $64
14a26     6C 6A 51 3D 
14a2a     34 18 04 F0 
14a2e     DF D0 D6 E3 
14a32     F9 01 07 09 | 	byte	$6c, $6a, $51, $3d, $34, $18, $04, $f0, $df, $d0, $d6, $e3, $f9, $01, $07, $09
14a36     00 F3 F0 EC 
14a3a     E8 EA E8 EA 
14a3e     EA ED F0 F0 
14a42     F2 F2 F0 F0 | 	byte	$00, $f3, $f0, $ec, $e8, $ea, $e8, $ea, $ea, $ed, $f0, $f0, $f2, $f2, $f0, $f0
14a46     F2 F3 F6 F3 
14a4a     F2 F2 E8 EC 
14a4e     ED F7 FF 01 
14a52     F7 F2 F3 F7 | 	byte	$f2, $f3, $f6, $f3, $f2, $f2, $e8, $ec, $ed, $f7, $ff, $01, $f7, $f2, $f3, $f7
14a56     FD 04 0A 1A 
14a5a     24 30 3B 37 
14a5e     31 21 14 07 
14a62     03 03 04 14 | 	byte	$fd, $04, $0a, $1a, $24, $30, $3b, $37, $31, $21, $14, $07, $03, $03, $04, $14
14a66     1A 24 27 18 
14a6a     03 E0 C0 9A 
14a6e     84 80 80 80 
14a72     80 80 83 84 | 	byte	$1a, $24, $27, $18, $03, $e0, $c0, $9a, $84, $80, $80, $80, $80, $80, $83, $84
14a76     89 94 A0 B1 
14a7a     BD BC AD A6 
14a7e     9C 96 9A A0 
14a82     A7 B7 C5 D4 | 	byte	$89, $94, $a0, $b1, $bd, $bc, $ad, $a6, $9c, $96, $9a, $a0, $a7, $b7, $c5, $d4
14a86     EC FC FF 04 
14a8a     09 03 FC F2 
14a8e     EA E3 DF D4 
14a92     CC C9 BC B5 | 	byte	$ec, $fc, $ff, $04, $09, $03, $fc, $f2, $ea, $e3, $df, $d4, $cc, $c9, $bc, $b5
14a96     B1 AD B1 BD 
14a9a     D0 E6 F9 07 
14a9e     1A 20 14 16 
14aa2     16 21 2C 2C | 	byte	$b1, $ad, $b1, $bd, $d0, $e6, $f9, $07, $1a, $20, $14, $16, $16, $21, $2c, $2c
14aa6     24 20 1D 1A 
14aaa     1E 20 1D 1A 
14aae     1A 16 1A 14 
14ab2     10 09 07 00 | 	byte	$24, $20, $1d, $1a, $1e, $20, $1d, $1a, $1a, $16, $1a, $14, $10, $09, $07, $00
14ab6     FF 03 04 10 
14aba     1A 20 30 3B 
14abe     44 51 5E 63 
14ac2     64 64 64 66 | 	byte	$ff, $03, $04, $10, $1a, $20, $30, $3b, $44, $51, $5e, $63, $64, $64, $64, $66
14ac6     60 5E 5A 49 
14aca     41 2D 27 2D 
14ace     36 2D 1E 13 
14ad2     04 07 07 FF | 	byte	$60, $5e, $5a, $49, $41, $2d, $27, $2d, $36, $2d, $1e, $13, $04, $07, $07, $ff
14ad6     00 F9 00 FF 
14ada     00 04 04 0A 
14ade     0A 0A 04 04 
14ae2     FF FC F3 ED | 	byte	$00, $f9, $00, $ff, $00, $04, $04, $0a, $0a, $0a, $04, $04, $ff, $fc, $f3, $ed
14ae6     E3 DC D6 D3 
14aea     D3 C5 BF B1 
14aee     B3 B5 B3 B9 
14af2     CA CF D6 D9 | 	byte	$e3, $dc, $d6, $d3, $d3, $c5, $bf, $b1, $b3, $b5, $b3, $b9, $ca, $cf, $d6, $d9
14af6     E6 F9 04 04 
14afa     04 00 00 F7 
14afe     F2 F6 FC FD 
14b02     07 13 26 3D | 	byte	$e6, $f9, $04, $04, $04, $00, $00, $f7, $f2, $f6, $fc, $fd, $07, $13, $26, $3d
14b06     4F 57 54 4B 
14b0a     2C 14 03 F6 
14b0e     EC E8 E2 E2 
14b12     E2 E6 F2 F9 | 	byte	$4f, $57, $54, $4b, $2c, $14, $03, $f6, $ec, $e8, $e2, $e2, $e2, $e6, $f2, $f9
14b16     00 FF FC F3 
14b1a     F6 F7 F9 FC 
14b1e     00 FF 04 16 
14b22     27 2C 36 40 | 	byte	$00, $ff, $fc, $f3, $f6, $f7, $f9, $fc, $00, $ff, $04, $16, $27, $2c, $36, $40
14b26     40 4B 4F 53 
14b2a     5E 5A 54 51 
14b2e     4D 34 20 09 
14b32     F2 D6 C3 BC | 	byte	$40, $4b, $4f, $53, $5e, $5a, $54, $51, $4d, $34, $20, $09, $f2, $d6, $c3, $bc
14b36     BD BF CA E0 
14b3a     ED 00 0E 13 
14b3e     14 16 10 09 
14b42     03 00 FF FF | 	byte	$bd, $bf, $ca, $e0, $ed, $00, $0e, $13, $14, $16, $10, $09, $03, $00, $ff, $ff
14b46     01 01 FF F0 
14b4a     EC EC F7 E6 
14b4e     E2 DC D4 D0 
14b52     D0 DC E3 ED | 	byte	$01, $01, $ff, $f0, $ec, $ec, $f7, $e6, $e2, $dc, $d4, $d0, $d0, $dc, $e3, $ed
14b56     F9 F9 FF 07 
14b5a     16 1E 2C 34 
14b5e     34 30 36 30 
14b62     27 24 14 0D | 	byte	$f9, $f9, $ff, $07, $16, $1e, $2c, $34, $34, $30, $36, $30, $27, $24, $14, $0d
14b66     09 FD F3 F0 
14b6a     E2 CA AC 98 
14b6e     84 86 8C 9D 
14b72     A7 9A 9C 9D | 	byte	$09, $fd, $f3, $f0, $e2, $ca, $ac, $98, $84, $86, $8c, $9d, $a7, $9a, $9c, $9d
14b76     AD AC B1 B3 
14b7a     B7 BC BC C0 
14b7e     CC D9 D9 E6 
14b82     E3 E0 E2 DC | 	byte	$ad, $ac, $b1, $b3, $b7, $bc, $bc, $c0, $cc, $d9, $d9, $e6, $e3, $e0, $e2, $dc
14b86     D9 CC BF AF 
14b8a     A6 9D 9C 9A 
14b8e     9C A6 AC B9 
14b92     C5 DF E3 F3 | 	byte	$d9, $cc, $bf, $af, $a6, $9d, $9c, $9a, $9c, $a6, $ac, $b9, $c5, $df, $e3, $f3
14b96     EA DF D9 D6 
14b9a     DA DC DA DA 
14b9e     DC ED 01 07 
14ba2     16 2A 34 40 | 	byte	$ea, $df, $d9, $d6, $da, $dc, $da, $da, $dc, $ed, $01, $07, $16, $2a, $34, $40
14ba6     4B 51 43 3D 
14baa     2C 27 1D 10 
14bae     14 14 16 1A 
14bb2     1D 1D 1D 26 | 	byte	$4b, $51, $43, $3d, $2c, $27, $1d, $10, $14, $14, $16, $1a, $1d, $1d, $1d, $26
14bb6     27 27 27 27 
14bba     24 24 24 2A 
14bbe     31 36 36 36 
14bc2     34 36 3B 43 | 	byte	$27, $27, $27, $27, $24, $24, $24, $2a, $31, $36, $36, $36, $34, $36, $3b, $43
14bc6     44 3D 3D 40 
14bca     47 47 47 47 
14bce     41 3D 36 26 
14bd2     16 13 03 F9 | 	byte	$44, $3d, $3d, $40, $47, $47, $47, $47, $41, $3d, $36, $26, $16, $13, $03, $f9
14bd6     F7 F7 FF 0D 
14bda     20 27 2C 26 
14bde     16 14 0E 03 
14be2     00 FC F6 F2 | 	byte	$f7, $f7, $ff, $0d, $20, $27, $2c, $26, $16, $14, $0e, $03, $00, $fc, $f6, $f2
14be6     F2 F2 F0 E8 
14bea     E2 CF B7 AD 
14bee     A6 A3 9A 98 
14bf2     92 98 B3 B9 | 	byte	$f2, $f2, $f0, $e8, $e2, $cf, $b7, $ad, $a6, $a3, $9a, $98, $92, $98, $b3, $b9
14bf6     CA DF F0 F9 
14bfa     01 0E 14 24 
14bfe     2D 34 34 31 
14c02     24 24 16 13 | 	byte	$ca, $df, $f0, $f9, $01, $0e, $14, $24, $2d, $34, $34, $31, $24, $24, $16, $13
14c06     FF EC E6 DF 
14c0a     E2 E3 E3 E8 
14c0e     EA FC 0A 18 
14c12     20 24 16 13 | 	byte	$ff, $ec, $e6, $df, $e2, $e3, $e3, $e8, $ea, $fc, $0a, $18, $20, $24, $16, $13
14c16     00 FF FD 04 
14c1a     07 0A 14 1A 
14c1e     2A 37 3B 41 
14c22     44 43 41 3A | 	byte	$00, $ff, $fd, $04, $07, $0a, $14, $1a, $2a, $37, $3b, $41, $44, $43, $41, $3a
14c26     34 36 2C 2D 
14c2a     21 1E 18 1A 
14c2e     1E 26 26 21 
14c32     16 10 03 FC | 	byte	$34, $36, $2c, $2d, $21, $1e, $18, $1a, $1e, $26, $26, $21, $16, $10, $03, $fc
14c36     F2 E8 E6 E6 
14c3a     E8 E8 F0 FF 
14c3e     03 03 FF F9 
14c42     F9 FC F9 F9 | 	byte	$f2, $e8, $e6, $e6, $e8, $e8, $f0, $ff, $03, $03, $ff, $f9, $f9, $fc, $f9, $f9
14c46     F0 E8 E6 E0 
14c4a     E0 E6 E8 EA 
14c4e     F0 F9 03 13 
14c52     1E 1E 1E 16 | 	byte	$f0, $e8, $e6, $e0, $e0, $e6, $e8, $ea, $f0, $f9, $03, $13, $1e, $1e, $1e, $16
14c56     10 0D 0D 0D 
14c5a     04 00 FD FF 
14c5e     FC FF 01 07 
14c62     0A 0A 10 10 | 	byte	$10, $0d, $0d, $0d, $04, $00, $fd, $ff, $fc, $ff, $01, $07, $0a, $0a, $10, $10
14c66     1A 18 0E 04 
14c6a     F0 D4 CA B9 
14c6e     A6 90 80 80 
14c72     80 80 83 9D | 	byte	$1a, $18, $0e, $04, $f0, $d4, $ca, $b9, $a6, $90, $80, $80, $80, $80, $83, $9d
14c76     AF B7 C5 CA 
14c7a     D6 E8 E8 EC 
14c7e     F2 EA E6 E0 
14c82     DC DA D3 CF | 	byte	$af, $b7, $c5, $ca, $d6, $e8, $e8, $ec, $f2, $ea, $e6, $e0, $dc, $da, $d3, $cf
14c86     BD B5 B5 AD 
14c8a     B1 AC A7 A7 
14c8e     A9 AD BC C5 
14c92     C6 C5 B5 B5 | 	byte	$bd, $b5, $b5, $ad, $b1, $ac, $a7, $a7, $a9, $ad, $bc, $c5, $c6, $c5, $b5, $b5
14c96     AF C0 C6 D9 
14c9a     E0 EA FC FF 
14c9e     04 16 16 1A 
14ca2     1A 10 13 0A | 	byte	$af, $c0, $c6, $d9, $e0, $ea, $fc, $ff, $04, $16, $16, $1a, $1a, $10, $13, $0a
14ca6     0E 0E 13 14 
14caa     13 13 10 10 
14cae     10 16 16 16 
14cb2     1A 1E 21 27 | 	byte	$0e, $0e, $13, $14, $13, $13, $10, $10, $10, $16, $16, $16, $1a, $1e, $21, $27
14cb6     30 31 3D 44 
14cba     51 60 64 64 
14cbe     54 43 37 2D 
14cc2     2A 21 18 0E | 	byte	$30, $31, $3d, $44, $51, $60, $64, $64, $54, $43, $37, $2d, $2a, $21, $18, $0e
14cc6     0D 09 0A 16 
14cca     21 30 3B 44 
14cce     53 5D 6C 6E 
14cd2     6C 5A 43 27 | 	byte	$0d, $09, $0a, $16, $21, $30, $3b, $44, $53, $5d, $6c, $6e, $6c, $5a, $43, $27
14cd6     0D F9 F0 EC 
14cda     EA E8 ED F7 
14cde     03 0E 14 1A 
14ce2     16 0D 13 14 | 	byte	$0d, $f9, $f0, $ec, $ea, $e8, $ed, $f7, $03, $0e, $14, $1a, $16, $0d, $13, $14
14ce6     09 FC E0 C9 
14cea     AD A2 A3 A2 
14cee     A6 B1 B5 C0 
14cf2     C0 D3 E2 E8 | 	byte	$09, $fc, $e0, $c9, $ad, $a2, $a3, $a2, $a6, $b1, $b5, $c0, $c0, $d3, $e2, $e8
14cf6     F2 F2 F6 F7 
14cfa     00 09 0A 0D 
14cfe     0A 04 07 04 
14d02     04 00 FD FD | 	byte	$f2, $f2, $f6, $f7, $00, $09, $0a, $0d, $0a, $04, $07, $04, $04, $00, $fd, $fd
14d06     F3 F2 F3 ED 
14d0a     F2 EC EC F0 
14d0e     F6 FC 01 00 
14d12     FC F6 F2 F3 | 	byte	$f3, $f2, $f3, $ed, $f2, $ec, $ec, $f0, $f6, $fc, $01, $00, $fc, $f6, $f2, $f3
14d16     FF 03 10 21 
14d1a     2D 2C 2C 31 
14d1e     3B 49 4F 4D 
14d22     4B 4D 4F 51 | 	byte	$ff, $03, $10, $21, $2d, $2c, $2c, $31, $3b, $49, $4f, $4d, $4b, $4d, $4f, $51
14d26     54 4D 3B 31 
14d2a     18 0E 0D 04 
14d2e     07 07 09 14 
14d32     1D 21 26 2A | 	byte	$54, $4d, $3b, $31, $18, $0e, $0d, $04, $07, $07, $09, $14, $1d, $21, $26, $2a
14d36     21 1E 18 16 
14d3a     14 13 01 EC 
14d3e     D3 C3 BC AF 
14d42     B5 B5 B7 B7 | 	byte	$21, $1e, $18, $16, $14, $13, $01, $ec, $d3, $c3, $bc, $af, $b5, $b5, $b7, $b7
14d46     B5 C6 DF F6 
14d4a     03 16 13 16 
14d4e     27 27 27 21 
14d52     14 09 01 F7 | 	byte	$b5, $c6, $df, $f6, $03, $16, $13, $16, $27, $27, $27, $21, $14, $09, $01, $f7
14d56     FC F3 FC 00 
14d5a     09 0E 16 1D 
14d5e     1E 20 21 21 
14d62     21 21 20 14 | 	byte	$fc, $f3, $fc, $00, $09, $0e, $16, $1d, $1e, $20, $21, $21, $21, $21, $20, $14
14d66     03 EC CF C0 
14d6a     BF BC C9 D0 
14d6e     DC DF C6 B5 
14d72     A2 9C 98 92 | 	byte	$03, $ec, $cf, $c0, $bf, $bc, $c9, $d0, $dc, $df, $c6, $b5, $a2, $9c, $98, $92
14d76     96 98 A6 AC 
14d7a     B7 C5 CA CC 
14d7e     D0 D6 CC C6 
14d82     C0 BD BD B5 | 	byte	$96, $98, $a6, $ac, $b7, $c5, $ca, $cc, $d0, $d6, $cc, $c6, $c0, $bd, $bd, $b5
14d86     B3 B5 B7 BC 
14d8a     C0 CA D0 E0 
14d8e     E3 E3 E3 CF 
14d92     B9 AC 9C 9D | 	byte	$b3, $b5, $b7, $bc, $c0, $ca, $d0, $e0, $e3, $e3, $e3, $cf, $b9, $ac, $9c, $9d
14d96     AC BD D0 E2 
14d9a     DF E3 ED 04 
14d9e     14 21 27 2A 
14da2     27 30 31 30 | 	byte	$ac, $bd, $d0, $e2, $df, $e3, $ed, $04, $14, $21, $27, $2a, $27, $30, $31, $30
14da6     2A 14 FF F2 
14daa     E2 D9 D0 D4 
14dae     D6 DA E8 FF 
14db2     14 30 47 5E | 	byte	$2a, $14, $ff, $f2, $e2, $d9, $d0, $d4, $d6, $da, $e8, $ff, $14, $30, $47, $5e
14db6     66 76 77 7C 
14dba     6E 4D 34 18 
14dbe     07 FF FF 04 
14dc2     16 1D 1E 1E | 	byte	$66, $76, $77, $7c, $6e, $4d, $34, $18, $07, $ff, $ff, $04, $16, $1d, $1e, $1e
14dc6     26 31 40 44 
14dca     47 4D 4F 54 
14dce     5D 63 64 60 
14dd2     59 57 51 40 | 	byte	$26, $31, $40, $44, $47, $4d, $4f, $54, $5d, $63, $64, $60, $59, $57, $51, $40
14dd6     34 1D 0A FD 
14dda     F3 F3 F3 F6 
14dde     F6 F7 F9 FD 
14de2     FF F6 ED DA | 	byte	$34, $1d, $0a, $fd, $f3, $f3, $f3, $f6, $f6, $f7, $f9, $fd, $ff, $f6, $ed, $da
14de6     C5 B5 B1 B3 
14dea     BD CA D6 E3 
14dee     E6 D3 CC CC 
14df2     D0 DA D9 E0 | 	byte	$c5, $b5, $b1, $b3, $bd, $ca, $d6, $e3, $e6, $d3, $cc, $cc, $d0, $da, $d9, $e0
14df6     E0 E8 F6 04 
14dfa     09 14 13 09 
14dfe     FD F0 DF DF 
14e02     DA DC E2 ED | 	byte	$e0, $e8, $f6, $04, $09, $14, $13, $09, $fd, $f0, $df, $df, $da, $dc, $e2, $ed
14e06     FC 07 13 2A 
14e0a     31 3B 3B 3A 
14e0e     26 13 F2 DA 
14e12     BF B7 BD CF | 	byte	$fc, $07, $13, $2a, $31, $3b, $3b, $3a, $26, $13, $f2, $da, $bf, $b7, $bd, $cf
14e16     E6 FC 01 FC 
14e1a     FF 0A 1A 3A 
14e1e     47 4F 5A 5E 
14e22     63 6E 6A 60 | 	byte	$e6, $fc, $01, $fc, $ff, $0a, $1a, $3a, $47, $4f, $5a, $5e, $63, $6e, $6a, $60
14e26     53 3D 2D 16 
14e2a     0A 01 FC FC 
14e2e     03 09 20 31 
14e32     43 4D 57 5D | 	byte	$53, $3d, $2d, $16, $0a, $01, $fc, $fc, $03, $09, $20, $31, $43, $4d, $57, $5d
14e36     51 43 31 18 
14e3a     F7 D9 C6 BF 
14e3e     C3 D0 DA E8 
14e42     F2 E3 D9 D9 | 	byte	$51, $43, $31, $18, $f7, $d9, $c6, $bf, $c3, $d0, $da, $e8, $f2, $e3, $d9, $d9
14e46     DA DA E0 E8 
14e4a     E6 EA F0 F0 
14e4e     EC F0 ED F2 
14e52     F6 F7 FD 03 | 	byte	$da, $da, $e0, $e8, $e6, $ea, $f0, $f0, $ec, $f0, $ed, $f2, $f6, $f7, $fd, $03
14e56     04 10 1A 18 
14e5a     1A 20 21 26 
14e5e     24 24 1E 1A 
14e62     10 04 F9 E8 | 	byte	$04, $10, $1a, $18, $1a, $20, $21, $26, $24, $24, $1e, $1a, $10, $04, $f9, $e8
14e66     D9 D4 CF D3 
14e6a     DF EC F6 F0 
14e6e     F0 E6 F0 EC 
14e72     E8 E0 CF C0 | 	byte	$d9, $d4, $cf, $d3, $df, $ec, $f6, $f0, $f0, $e6, $f0, $ec, $e8, $e0, $cf, $c0
14e76     BC B7 B7 B5 
14e7a     AD A6 9A 94 
14e7e     89 80 83 84 
14e82     86 86 8F 9D | 	byte	$bc, $b7, $b7, $b5, $ad, $a6, $9a, $94, $89, $80, $83, $84, $86, $86, $8f, $9d
14e86     AD CA E0 F0 
14e8a     00 01 01 FC 
14e8e     E6 C9 AF A0 
14e92     9A 9D A7 B9 | 	byte	$ad, $ca, $e0, $f0, $00, $01, $01, $fc, $e6, $c9, $af, $a0, $9a, $9d, $a7, $b9
14e96     C5 CA C9 CC 
14e9a     DC F0 FD 04 
14e9e     0A 0A 0E 13 
14ea2     1A 1D 21 26 | 	byte	$c5, $ca, $c9, $cc, $dc, $f0, $fd, $04, $0a, $0a, $0e, $13, $1a, $1d, $21, $26
14ea6     26 2A 2A 2C 
14eaa     1E 18 10 04 
14eae     04 07 09 13 
14eb2     1D 21 2C 31 | 	byte	$26, $2a, $2a, $2c, $1e, $18, $10, $04, $04, $07, $09, $13, $1d, $21, $2c, $31
14eb6     2D 30 16 03 
14eba     F7 F2 ED F3 
14ebe     07 1D 37 4D 
14ec2     4F 4F 4F 4D | 	byte	$2d, $30, $16, $03, $f7, $f2, $ed, $f3, $07, $1d, $37, $4d, $4f, $4f, $4f, $4d
14ec6     57 59 5A 59 
14eca     4D 40 34 27 
14ece     26 21 2A 2D 
14ed2     30 31 36 36 | 	byte	$57, $59, $5a, $59, $4d, $40, $34, $27, $26, $21, $2a, $2d, $30, $31, $36, $36
14ed6     30 21 1A 0E 
14eda     14 16 2A 34 
14ede     37 3A 31 21 
14ee2     10 F3 E2 CA | 	byte	$30, $21, $1a, $0e, $14, $16, $2a, $34, $37, $3a, $31, $21, $10, $f3, $e2, $ca
14ee6     BC B9 B7 BC 
14eea     CA D0 C9 C0 
14eee     B3 AF B9 BF 
14ef2     C9 D0 DA E0 | 	byte	$bc, $b9, $b7, $bc, $ca, $d0, $c9, $c0, $b3, $af, $b9, $bf, $c9, $d0, $da, $e0
14ef6     ED F7 FC F9 
14efa     F9 FC F3 F6 
14efe     F3 F0 E0 D9 
14f02     D9 D9 E6 F3 | 	byte	$ed, $f7, $fc, $f9, $f9, $fc, $f3, $f6, $f3, $f0, $e0, $d9, $d9, $d9, $e6, $f3
14f06     04 16 24 2A 
14f0a     27 26 18 04 
14f0e     00 F6 F3 F9 
14f12     00 0E 20 2A | 	byte	$04, $16, $24, $2a, $27, $26, $18, $04, $00, $f6, $f3, $f9, $00, $0e, $20, $2a
14f16     26 1E 18 14 
14f1a     18 1D 21 20 
14f1e     26 24 24 26 
14f22     1E 1A 1A 16 | 	byte	$26, $1e, $18, $14, $18, $1d, $21, $20, $26, $24, $24, $26, $1e, $1a, $1a, $16
14f26     18 18 1D 21 
14f2a     2C 2C 3A 43 
14f2e     43 44 51 53 
14f32     5E 5A 51 41 | 	byte	$18, $18, $1d, $21, $2c, $2c, $3a, $43, $43, $44, $51, $53, $5e, $5a, $51, $41
14f36     27 0D F6 D9 
14f3a     C5 B9 B7 BF 
14f3e     CF E2 EC EC 
14f42     F0 F3 FF 0D | 	byte	$27, $0d, $f6, $d9, $c5, $b9, $b7, $bf, $cf, $e2, $ec, $ec, $f0, $f3, $ff, $0d
14f46     24 2C 36 34 
14f4a     20 10 00 EC 
14f4e     EA DC D4 D6 
14f52     D6 D9 DF E3 | 	byte	$24, $2c, $36, $34, $20, $10, $00, $ec, $ea, $dc, $d4, $d6, $d6, $d9, $df, $e3
14f56     E6 EC EA F2 
14f5a     F6 F6 F9 F9 
14f5e     FF 00 0A 0E 
14f62     14 13 0A 0A | 	byte	$e6, $ec, $ea, $f2, $f6, $f6, $f9, $f9, $ff, $00, $0a, $0e, $14, $13, $0a, $0a
14f66     0D 18 18 1E 
14f6a     16 00 EC DC 
14f6e     D4 D0 D4 DA 
14f72     CC B7 A7 98 | 	byte	$0d, $18, $18, $1e, $16, $00, $ec, $dc, $d4, $d0, $d4, $da, $cc, $b7, $a7, $98
14f76     8A 89 94 9A 
14f7a     AC B1 C0 C9 
14f7e     CF D6 CC CF 
14f82     CF CF CF D3 | 	byte	$8a, $89, $94, $9a, $ac, $b1, $c0, $c9, $cf, $d6, $cc, $cf, $cf, $cf, $cf, $d3
14f86     D4 D6 D6 C9 
14f8a     C6 B7 AC 9C 
14f8e     9A 8C 8C 8F 
14f92     94 A6 BC BF | 	byte	$d4, $d6, $d6, $c9, $c6, $b7, $ac, $9c, $9a, $8c, $8c, $8f, $94, $a6, $bc, $bf
14f96     CA E2 E6 ED 
14f9a     F7 00 0A 14 
14f9e     16 0D 0A F9 
14fa2     F2 F0 EC ED | 	byte	$ca, $e2, $e6, $ed, $f7, $00, $0a, $14, $16, $0d, $0a, $f9, $f2, $f0, $ec, $ed
14fa6     F6 FF 09 16 
14faa     1D 24 27 3A 
14fae     3D 40 49 49 
14fb2     41 3A 30 1E | 	byte	$f6, $ff, $09, $16, $1d, $24, $27, $3a, $3d, $40, $49, $49, $41, $3a, $30, $1e
14fb6     14 0D 10 13 
14fba     14 1A 26 30 
14fbe     3A 3A 36 2D 
14fc2     27 24 2A 2C | 	byte	$14, $0d, $10, $13, $14, $1a, $26, $30, $3a, $3a, $36, $2d, $27, $24, $2a, $2c
14fc6     36 36 36 2D 
14fca     30 27 2D 30 
14fce     26 24 24 27 
14fd2     3B 43 49 47 | 	byte	$36, $36, $36, $2d, $30, $27, $2d, $30, $26, $24, $24, $27, $3b, $43, $49, $47
14fd6     3D 30 18 01 
14fda     F0 E2 D9 D9 
14fde     DF E2 E8 F3 
14fe2     00 09 16 1D | 	byte	$3d, $30, $18, $01, $f0, $e2, $d9, $d9, $df, $e2, $e8, $f3, $00, $09, $16, $1d
14fe6     26 2C 2A 16 
14fea     00 F3 E2 D6 
14fee     D9 D9 DC E0 
14ff2     D9 D9 CF C0 | 	byte	$26, $2c, $2a, $16, $00, $f3, $e2, $d6, $d9, $d9, $dc, $e0, $d9, $d9, $cf, $c0
14ff6     BD B5 B1 B3 
14ffa     B3 B5 C5 D6 
14ffe     E0 F9 04 18 
15002     20 20 16 18 | 	byte	$bd, $b5, $b1, $b3, $b3, $b5, $c5, $d6, $e0, $f9, $04, $18, $20, $20, $16, $18
15006     10 13 09 09 
1500a     01 FF FF F3 
1500e     EC E8 E8 E8 
15012     F0 F7 F6 00 | 	byte	$10, $13, $09, $09, $01, $ff, $ff, $f3, $ec, $e8, $e8, $e8, $f0, $f7, $f6, $00
15016     09 16 2A 3D 
1501a     4B 5D 5A 5D 
1501e     51 40 31 21 
15022     21 21 26 30 | 	byte	$09, $16, $2a, $3d, $4b, $5d, $5a, $5d, $51, $40, $31, $21, $21, $21, $26, $30
15026     3A 47 4D 54 
1502a     54 54 47 3A 
1502e     27 14 00 F3 
15032     F2 F2 F2 00 | 	byte	$3a, $47, $4d, $54, $54, $54, $47, $3a, $27, $14, $00, $f3, $f2, $f2, $f2, $00
15036     16 21 20 16 
1503a     09 03 03 FD 
1503e     F6 F0 F0 ED 
15042     E8 ED F2 FC | 	byte	$16, $21, $20, $16, $09, $03, $03, $fd, $f6, $f0, $f0, $ed, $e8, $ed, $f2, $fc
15046     FC F3 F2 EA 
1504a     E8 E2 E8 EA 
1504e     ED F2 FD 03 
15052     0A 13 13 14 | 	byte	$fc, $f3, $f2, $ea, $e8, $e2, $e8, $ea, $ed, $f2, $fd, $03, $0a, $13, $13, $14
15056     13 10 0A 00 
1505a     FF F7 F3 F9 
1505e     F7 FF 04 04 
15062     07 07 03 03 | 	byte	$13, $10, $0a, $00, $ff, $f7, $f3, $f9, $f7, $ff, $04, $04, $07, $07, $03, $03
15066     FF F9 ED EA 
1506a     E2 E6 E6 E3 
1506e     E6 E8 E3 DF 
15072     C6 B1 96 84 | 	byte	$ff, $f9, $ed, $ea, $e2, $e6, $e6, $e3, $e6, $e8, $e3, $df, $c6, $b1, $96, $84
15076     80 80 80 80 
1507a     84 8C A3 B1 
1507e     BF D6 E0 EC 
15082     F2 F3 F2 EC | 	byte	$80, $80, $80, $80, $84, $8c, $a3, $b1, $bf, $d6, $e0, $ec, $f2, $f3, $f2, $ec
15086     D9 D3 C0 BD 
1508a     BD BF C3 C5 
1508e     C6 CA CF D4 
15092     D3 D4 D3 D4 | 	byte	$d9, $d3, $c0, $bd, $bd, $bf, $c3, $c5, $c6, $ca, $cf, $d4, $d3, $d4, $d3, $d4
15096     D3 D0 D3 D4 
1509a     D6 D9 D6 D9 
1509e     D9 D9 E2 ED 
150a2     ED F3 FF 07 | 	byte	$d3, $d0, $d3, $d4, $d6, $d9, $d6, $d9, $d9, $d9, $e2, $ed, $ed, $f3, $ff, $07
150a6     16 26 31 37 
150aa     40 36 30 1E 
150ae     09 FC EC E6 
150b2     E3 EC FD 10 | 	byte	$16, $26, $31, $37, $40, $36, $30, $1e, $09, $fc, $ec, $e6, $e3, $ec, $fd, $10
150b6     27 3A 4B 57 
150ba     64 64 5A 4F 
150be     47 3D 3A 3D 
150c2     41 54 5E 5E | 	byte	$27, $3a, $4b, $57, $64, $64, $5a, $4f, $47, $3d, $3a, $3d, $41, $54, $5e, $5e
150c6     60 59 51 43 
150ca     37 26 18 0E 
150ce     03 00 04 04 
150d2     10 18 2A 27 | 	byte	$60, $59, $51, $43, $37, $26, $18, $0e, $03, $00, $04, $04, $10, $18, $2a, $27
150d6     26 09 F0 DC 
150da     CC C5 CA D6 
150de     E6 FD 04 13 
150e2     1A 18 18 0D | 	byte	$26, $09, $f0, $dc, $cc, $c5, $ca, $d6, $e6, $fd, $04, $13, $1a, $18, $18, $0d
150e6     F6 E8 E6 DC 
150ea     DC DC DC ED 
150ee     F7 FC FC F6 
150f2     E6 DA CF CA | 	byte	$f6, $e8, $e6, $dc, $dc, $dc, $dc, $ed, $f7, $fc, $fc, $f6, $e6, $da, $cf, $ca
150f6     CC D0 E0 EC 
150fa     00 10 21 2D 
150fe     2C 2D 24 16 
15102     04 F9 DF C6 | 	byte	$cc, $d0, $e0, $ec, $00, $10, $21, $2d, $2c, $2d, $24, $16, $04, $f9, $df, $c6
15106     C0 BD C0 D4 
1510a     E2 F2 F6 F3 
1510e     F7 F9 F2 ED 
15112     F6 FF 07 10 | 	byte	$c0, $bd, $c0, $d4, $e2, $f2, $f6, $f3, $f7, $f9, $f2, $ed, $f6, $ff, $07, $10
15116     18 26 31 37 
1511a     37 2D 27 21 
1511e     21 24 2A 31 
15122     41 4B 5A 5E | 	byte	$18, $26, $31, $37, $37, $2d, $27, $21, $21, $24, $2a, $31, $41, $4b, $5a, $5e
15126     60 60 53 4B 
1512a     44 37 2D 2A 
1512e     21 1E 1A 1E 
15132     27 34 43 44 | 	byte	$60, $60, $53, $4b, $44, $37, $2d, $2a, $21, $1e, $1a, $1e, $27, $34, $43, $44
15136     49 47 41 36 
1513a     14 FD E6 D3 
1513e     CC C5 CA D0 
15142     E0 E6 E8 EA | 	byte	$49, $47, $41, $36, $14, $fd, $e6, $d3, $cc, $c5, $ca, $d0, $e0, $e6, $e8, $ea
15146     E6 E3 E6 E6 
1514a     E8 EA EC ED 
1514e     F3 F6 F6 F6 
15152     F7 FC FD FF | 	byte	$e6, $e3, $e6, $e6, $e8, $ea, $ec, $ed, $f3, $f6, $f6, $f6, $f7, $fc, $fd, $ff
15156     00 00 00 FD 
1515a     F7 F0 F6 FD 
1515e     09 16 24 34 
15162     37 3B 2D 20 | 	byte	$00, $00, $00, $fd, $f7, $f0, $f6, $fd, $09, $16, $24, $34, $37, $3b, $2d, $20
15166     18 13 04 FD 
1516a     EC E3 E2 E0 
1516e     DF D0 B5 9A 
15172     80 80 80 80 | 	byte	$18, $13, $04, $fd, $ec, $e3, $e2, $e0, $df, $d0, $b5, $9a, $80, $80, $80, $80
15176     80 80 80 94 
1517a     A2 AD B7 C5 
1517e     C9 CF D6 DA 
15182     D6 CC BC AC | 	byte	$80, $80, $80, $94, $a2, $ad, $b7, $c5, $c9, $cf, $d6, $da, $d6, $cc, $bc, $ac
15186     A9 AC B9 C9 
1518a     CF DF E2 E2 
1518e     D9 CF CC CC 
15192     CF D0 D3 DA | 	byte	$a9, $ac, $b9, $c9, $cf, $df, $e2, $e2, $d9, $cf, $cc, $cc, $cf, $d0, $d3, $da
15196     EC FF 0E 10 
1519a     13 13 0E 10 
1519e     0A 04 04 04 
151a2     04 03 03 FD | 	byte	$ec, $ff, $0e, $10, $13, $13, $0e, $10, $0a, $04, $04, $04, $04, $03, $03, $fd
151a6     F2 F0 E2 E0 
151aa     DC DA D9 DA 
151ae     DC D6 E0 F2 
151b2     04 16 30 41 | 	byte	$f2, $f0, $e2, $e0, $dc, $da, $d9, $da, $dc, $d6, $e0, $f2, $04, $16, $30, $41
151b6     51 5A 59 4B 
151ba     40 40 37 3A 
151be     3A 3B 44 4F 
151c2     51 4F 4B 40 | 	byte	$51, $5a, $59, $4b, $40, $40, $37, $3a, $3a, $3b, $44, $4f, $51, $4f, $4b, $40
151c6     34 31 2C 2D 
151ca     30 37 40 49 
151ce     51 57 57 57 
151d2     53 49 34 1E | 	byte	$34, $31, $2c, $2d, $30, $37, $40, $49, $51, $57, $57, $57, $53, $49, $34, $1e
151d6     0E F6 D9 C3 
151da     BD BC C5 D3 
151de     DF E8 E8 E8 
151e2     DF D6 CF C6 | 	byte	$0e, $f6, $d9, $c3, $bd, $bc, $c5, $d3, $df, $e8, $e8, $e8, $df, $d6, $cf, $c6
151e6     CA C9 CA D4 
151ea     DA EC FF 04 
151ee     01 F7 ED E2 
151f2     DF DF E6 ED | 	byte	$ca, $c9, $ca, $d4, $da, $ec, $ff, $04, $01, $f7, $ed, $e2, $df, $df, $e6, $ed
151f6     F6 00 04 0D 
151fa     0A 09 01 01 
151fe     03 0A 0A 0D 
15202     0A FF 00 00 | 	byte	$f6, $00, $04, $0d, $0a, $09, $01, $01, $03, $0a, $0a, $0d, $0a, $ff, $00, $00
15206     07 10 16 16 
1520a     13 0A F7 F2 
1520e     ED E6 EA E6 
15212     E6 E8 EA F2 | 	byte	$07, $10, $16, $16, $13, $0a, $f7, $f2, $ed, $e6, $ea, $e6, $e6, $e8, $ea, $f2
15216     00 04 0D 0A 
1521a     0D 0E 1A 26 
1521e     36 47 54 5E 
15222     5D 5D 4F 3D | 	byte	$00, $04, $0d, $0a, $0d, $0e, $1a, $26, $36, $47, $54, $5e, $5d, $5d, $4f, $3d
15226     30 26 21 24 
1522a     26 2C 2C 21 
1522e     21 24 2A 34 
15232     41 51 5D 68 | 	byte	$30, $26, $21, $24, $26, $2c, $2c, $21, $21, $24, $2a, $34, $41, $51, $5d, $68
15236     63 63 60 60 
1523a     60 54 41 27 
1523e     0E FD F2 E3 
15242     DA D4 C5 C0 | 	byte	$63, $63, $60, $60, $60, $54, $41, $27, $0e, $fd, $f2, $e3, $da, $d4, $c5, $c0
15246     B5 B9 BC B7 
1524a     B3 BD BF C9 
1524e     C9 CC CA D4 
15252     DC F2 01 0E | 	byte	$b5, $b9, $bc, $b7, $b3, $bd, $bf, $c9, $c9, $cc, $ca, $d4, $dc, $f2, $01, $0e
15256     18 16 0D 0E 
1525a     0E 13 1E 26 
1525e     27 27 0E 00 
15262     F3 EC E8 E3 | 	byte	$18, $16, $0d, $0e, $0e, $13, $1e, $26, $27, $27, $0e, $00, $f3, $ec, $e8, $e3
15266     E6 E3 E6 F7 
1526a     07 13 1A 18 
1526e     13 00 EA D9 
15272     C3 AC A2 9D | 	byte	$e6, $e3, $e6, $f7, $07, $13, $1a, $18, $13, $00, $ea, $d9, $c3, $ac, $a2, $9d
15276     9D A0 A2 9A 
1527a     94 8C 86 8C 
1527e     80 80 80 80 
15282     80 80 80 90 | 	byte	$9d, $a0, $a2, $9a, $94, $8c, $86, $8c, $80, $80, $80, $80, $80, $80, $80, $90
15286     A7 C3 D4 E0 
1528a     E0 DF E0 E3 
1528e     E3 E8 E8 E8 
15292     E8 EC F9 FC | 	byte	$a7, $c3, $d4, $e0, $e0, $df, $e0, $e3, $e3, $e8, $e8, $e8, $e8, $ec, $f9, $fc
15296     FC F7 F0 EA 
1529a     ED F6 00 0D 
1529e     14 1D 1E 1E 
152a2     1D 0E 04 00 | 	byte	$fc, $f7, $f0, $ea, $ed, $f6, $00, $0d, $14, $1d, $1e, $1e, $1d, $0e, $04, $00
152a6     FC FC FF 00 
152aa     FC FF FC FC 
152ae     FD FC 03 0A 
152b2     13 09 F9 F3 | 	byte	$fc, $fc, $ff, $00, $fc, $ff, $fc, $fc, $fd, $fc, $03, $0a, $13, $09, $f9, $f3
152b6     F6 F7 01 0D 
152ba     14 1E 24 2D 
152be     43 54 59 5A 
152c2     53 47 3B 3B | 	byte	$f6, $f7, $01, $0d, $14, $1e, $24, $2d, $43, $54, $59, $5a, $53, $47, $3b, $3b
152c6     40 40 41 37 
152ca     3A 2D 27 20 
152ce     1D 1E 21 30 
152d2     40 51 51 44 | 	byte	$40, $40, $41, $37, $3a, $2d, $27, $20, $1d, $1e, $21, $30, $40, $51, $51, $44
152d6     34 2C 1A 13 
152da     1D 1E 1D 10 
152de     F6 DA CA BD 
152e2     BF BF B9 B7 | 	byte	$34, $2c, $1a, $13, $1d, $1e, $1d, $10, $f6, $da, $ca, $bd, $bf, $bf, $b9, $b7
152e6     B3 AD B3 B5 
152ea     BF C6 C3 BC 
152ee     BC BD D3 E8 
152f2     00 0E 21 26 | 	byte	$b3, $ad, $b3, $b5, $bf, $c6, $c3, $bc, $bc, $bd, $d3, $e8, $00, $0e, $21, $26
152f6     26 21 18 10 
152fa     04 FC FD F9 
152fe     F0 E6 DF D6 
15302     D3 DA F2 01 | 	byte	$26, $21, $18, $10, $04, $fc, $fd, $f9, $f0, $e6, $df, $d6, $d3, $da, $f2, $01
15306     13 14 0E 0A 
1530a     0A 0D 14 1E 
1530e     26 30 2A 21 
15312     2D 27 2A 2A | 	byte	$13, $14, $0e, $0a, $0a, $0d, $14, $1e, $26, $30, $2a, $21, $2d, $27, $2a, $2a
15316     21 1A 16 13 
1531a     16 18 10 04 
1531e     FF F3 EC E6 
15322     E6 E0 E3 F7 | 	byte	$21, $1a, $16, $13, $16, $18, $10, $04, $ff, $f3, $ec, $e6, $e6, $e0, $e3, $f7
15326     13 2D 43 54 
1532a     66 68 63 5E 
1532e     63 66 71 64 
15332     57 41 34 2C | 	byte	$13, $2d, $43, $54, $66, $68, $63, $5e, $63, $66, $71, $64, $57, $41, $34, $2c
15336     2D 30 3B 41 
1533a     40 41 44 41 
1533e     3D 31 21 09 
15342     FF F2 F2 F2 | 	byte	$2d, $30, $3b, $41, $40, $41, $44, $41, $3d, $31, $21, $09, $ff, $f2, $f2, $f2
15346     F3 F0 EA DF 
1534a     D3 CA C9 C3 
1534e     C5 C5 CA C6 
15352     C5 C3 C5 C9 | 	byte	$f3, $f0, $ea, $df, $d3, $ca, $c9, $c3, $c5, $c5, $ca, $c6, $c5, $c3, $c5, $c9
15356     CC D9 E6 F7 
1535a     07 09 0A 07 
1535e     04 04 04 07 
15362     09 07 07 04 | 	byte	$cc, $d9, $e6, $f7, $07, $09, $0a, $07, $04, $04, $04, $07, $09, $07, $07, $04
15366     04 04 09 07 
1536a     F9 E8 DF E0 
1536e     EA F9 FC FC 
15372     F3 DC CC C0 | 	byte	$04, $04, $09, $07, $f9, $e8, $df, $e0, $ea, $f9, $fc, $fc, $f3, $dc, $cc, $c0
15376     BD BC B3 A7 
1537a     A6 A0 9C 94 
1537e     94 8C 8F 92 
15382     9C A7 B5 A7 | 	byte	$bd, $bc, $b3, $a7, $a6, $a0, $9c, $94, $94, $8c, $8f, $92, $9c, $a7, $b5, $a7
15386     8C 80 80 80 
1538a     80 89 96 A9 
1538e     BD C5 DC F3 
15392     0D 26 2D 2D | 	byte	$8c, $80, $80, $80, $80, $89, $96, $a9, $bd, $c5, $dc, $f3, $0d, $26, $2d, $2d
15396     2D 27 20 21 
1539a     1A 0E 07 F0 
1539e     D9 C6 B9 B9 
153a2     BD CC E6 F9 | 	byte	$2d, $27, $20, $21, $1a, $0e, $07, $f0, $d9, $c6, $b9, $b9, $bd, $cc, $e6, $f9
153a6     09 1A 27 2D 
153aa     2D 30 34 3D 
153ae     43 37 2C 1D 
153b2     13 0A 0A 10 | 	byte	$09, $1a, $27, $2d, $2d, $30, $34, $3d, $43, $37, $2c, $1d, $13, $0a, $0a, $10
153b6     18 16 0E 09 
153ba     FD ED EC F2 
153be     F2 F3 F3 F6 
153c2     00 0E 1D 2D | 	byte	$18, $16, $0e, $09, $fd, $ed, $ec, $f2, $f2, $f3, $f3, $f6, $00, $0e, $1d, $2d
153c6     3B 49 49 4B 
153ca     4D 54 54 54 
153ce     59 54 4F 54 
153d2     51 44 37 2C | 	byte	$3b, $49, $49, $4b, $4d, $54, $54, $54, $59, $54, $4f, $54, $51, $44, $37, $2c
153d6     1E 14 13 00 
153da     F3 EC E2 DC 
153de     DF DF E8 ED 
153e2     F3 F2 ED ED | 	byte	$1e, $14, $13, $00, $f3, $ec, $e2, $dc, $df, $df, $e8, $ed, $f3, $f2, $ed, $ed
153e6     F0 F9 F7 F2 
153ea     EA E6 E3 E3 
153ee     E8 E2 D3 CA 
153f2     C0 B7 B3 B7 | 	byte	$f0, $f9, $f7, $f2, $ea, $e6, $e3, $e3, $e8, $e2, $d3, $ca, $c0, $b7, $b3, $b7
153f6     B3 B7 C3 C5 
153fa     D6 E3 FD 09 
153fe     16 1E 24 2D 
15402     30 26 13 03 | 	byte	$b3, $b7, $c3, $c5, $d6, $e3, $fd, $09, $16, $1e, $24, $2d, $30, $26, $13, $03
15406     F7 E3 DA DC 
1540a     DF EA FC 0A 
1540e     0E 20 37 47 
15412     54 5D 59 53 | 	byte	$f7, $e3, $da, $dc, $df, $ea, $fc, $0a, $0e, $20, $37, $47, $54, $5d, $59, $53
15416     4D 49 40 34 
1541a     2C 1A 0A FC 
1541e     F2 F2 F6 F9 
15422     03 07 FF 01 | 	byte	$4d, $49, $40, $34, $2c, $1a, $0a, $fc, $f2, $f2, $f6, $f9, $03, $07, $ff, $01
15426     03 09 0A 0D 
1542a     13 21 2C 2D 
1542e     31 3B 43 4D 
15432     5A 6A 74 74 | 	byte	$03, $09, $0a, $0d, $13, $21, $2c, $2d, $31, $3b, $43, $4d, $5a, $6a, $74, $74
15436     76 70 5E 4F 
1543a     47 41 41 36 
1543e     26 13 0A 03 
15442     FF FF FD F7 | 	byte	$76, $70, $5e, $4f, $47, $41, $41, $36, $26, $13, $0a, $03, $ff, $ff, $fd, $f7
15446     ED E3 E2 E8 
1544a     EA F6 FC F6 
1544e     F3 F6 FC FC 
15452     FC FD FC FD | 	byte	$ed, $e3, $e2, $e8, $ea, $f6, $fc, $f6, $f3, $f6, $fc, $fc, $fc, $fd, $fc, $fd
15456     F9 EC D9 B9 
1545a     A2 96 86 92 
1545e     9C A9 BD D0 
15462     DA E8 FC 10 | 	byte	$f9, $ec, $d9, $b9, $a2, $96, $86, $92, $9c, $a9, $bd, $d0, $da, $e8, $fc, $10
15466     2C 3D 43 43 
1546a     41 40 40 3A 
1546e     2C 20 07 F2 
15472     CC AC 8F 80 | 	byte	$2c, $3d, $43, $43, $41, $40, $40, $3a, $2c, $20, $07, $f2, $cc, $ac, $8f, $80
15476     80 80 80 8C 
1547a     98 AC BC C0 
1547e     C9 D3 D3 C9 
15482     BD B3 A6 9D | 	byte	$80, $80, $80, $8c, $98, $ac, $bc, $c0, $c9, $d3, $d3, $c9, $bd, $b3, $a6, $9d
15486     9C 9D A7 B7 
1548a     C5 CF CC C6 
1548e     BC BF C0 C3 
15492     CA CA C9 CA | 	byte	$9c, $9d, $a7, $b7, $c5, $cf, $cc, $c6, $bc, $bf, $c0, $c3, $ca, $ca, $c9, $ca
15496     CC D3 D9 D9 
1549a     DF E0 E3 ED 
1549e     F9 07 14 18 
154a2     14 18 13 14 | 	byte	$cc, $d3, $d9, $d9, $df, $e0, $e3, $ed, $f9, $07, $14, $18, $14, $18, $13, $14
154a6     0D 09 FD F9 
154aa     F9 F3 F9 03 
154ae     0A 0E 1A 27 
154b2     30 36 3D 40 | 	byte	$0d, $09, $fd, $f9, $f9, $f3, $f9, $03, $0a, $0e, $1a, $27, $30, $36, $3d, $40
154b6     31 21 18 1A 
154ba     1D 20 24 26 
154be     26 26 26 21 
154c2     18 03 ED DC | 	byte	$31, $21, $18, $1a, $1d, $20, $24, $26, $26, $26, $26, $21, $18, $03, $ed, $dc
154c6     D4 D0 DA EC 
154ca     FF 0A 18 2D 
154ce     3B 54 66 77 
154d2     7F 7F 7F 74 | 	byte	$d4, $d0, $da, $ec, $ff, $0a, $18, $2d, $3b, $54, $66, $77, $7f, $7f, $7f, $74
154d6     64 4B 24 01 
154da     E2 C9 B7 B5 
154de     B7 C3 C9 D0 
154e2     DF EC FF 0E | 	byte	$64, $4b, $24, $01, $e2, $c9, $b7, $b5, $b7, $c3, $c9, $d0, $df, $ec, $ff, $0e
154e6     20 21 20 20 
154ea     1E 13 0A 00 
154ee     FC EC E3 E0 
154f2     D3 D6 DA D6 | 	byte	$20, $21, $20, $20, $1e, $13, $0a, $00, $fc, $ec, $e3, $e0, $d3, $d6, $da, $d6
154f6     CF C6 B9 B3 
154fa     B5 B3 B7 BC 
154fe     C6 BF C9 D4 
15502     DA DC E3 F9 | 	byte	$cf, $c6, $b9, $b3, $b5, $b3, $b7, $bc, $c6, $bf, $c9, $d4, $da, $dc, $e3, $f9
15506     07 20 37 49 
1550a     53 4F 47 47 
1550e     40 40 3A 31 
15512     21 10 09 00 | 	byte	$07, $20, $37, $49, $53, $4f, $47, $47, $40, $40, $3a, $31, $21, $10, $09, $00
15516     01 00 FF 00 
1551a     01 04 10 20 
1551e     2D 36 34 36 
15522     36 37 40 41 | 	byte	$01, $00, $ff, $00, $01, $04, $10, $20, $2d, $36, $34, $36, $36, $37, $40, $41
15526     43 44 44 31 
1552a     2A 2D 24 0D 
1552e     00 F9 F7 F7 
15532     FF 09 10 18 | 	byte	$43, $44, $44, $31, $2a, $2d, $24, $0d, $00, $f9, $f7, $f7, $ff, $09, $10, $18
15536     1A 2C 00 00 
1553a     FC FF 02 04 
1553e     05 07 07 09 
15542     0A 08 07 08 | 	byte	$1a, $2c, $00, $00, $fc, $ff, $02, $04, $05, $07, $07, $09, $0a, $08, $07, $08
15546     08 07 06 06 
1554a     05 04 04 04 
1554e     03 00 F4 EC 
15552     EA E5 EF 0F | 	byte	$08, $07, $06, $06, $05, $04, $04, $04, $03, $00, $f4, $ec, $ea, $e5, $ef, $0f
15556     00 BF FF 00 
1555a     CF FF E0 FF 
1555e     20 C0 FF 20 
15562     D7 FF F0 FF | 	byte	$00, $bf, $ff, $00, $cf, $ff, $e0, $ff, $20, $c0, $ff, $20, $d7, $ff, $f0, $ff
15566     10 FF 50 00 
1556a     0F 20 07 18 
1556e     10 17 10 FF 
15572     10 FF 00 EF | 	byte	$10, $ff, $50, $00, $0f, $20, $07, $18, $10, $17, $10, $ff, $10, $ff, $00, $ef
15576     28 F0 FF 10 
1557a     F3 F1 FF 00 
1557e     DF F8 F0 F3 
15582     E8 EF 10 D0 | 	byte	$28, $f0, $ff, $10, $f3, $f1, $ff, $00, $df, $f8, $f0, $f3, $e8, $ef, $10, $d0
15586     DF 10 F7 00 
1558a     DF 1B 00 DF 
1558e     20 EB FC 1F 
15592     00 FF 30 EF | 	byte	$df, $10, $f7, $00, $df, $1b, $00, $df, $20, $eb, $fc, $1f, $00, $ff, $30, $ef
15596     08 EF 0F 14 
1559a     01 FF 10 03 
1559e     17 00 FF 30 
155a2     E7 0F 28 08 | 	byte	$08, $ef, $0f, $14, $01, $ff, $10, $03, $17, $00, $ff, $30, $e7, $0f, $28, $08
155a6     00 FB 0F 00 
155aa     EF F0 EF 00 
155ae     FF 00 FF 00 
155b2     DF 00 E5 EB | 	byte	$00, $fb, $0f, $00, $ef, $f0, $ef, $00, $ff, $00, $ff, $00, $df, $00, $e5, $eb
155b6     E8 F7 00 EB 
155ba     FB 02 F0 E0 
155be     FF 10 FF 30 
155c2     FF 10 0F 00 | 	byte	$e8, $f7, $00, $eb, $fb, $02, $f0, $e0, $ff, $10, $ff, $30, $ff, $10, $0f, $00
155c6     FF 1B 08 0F 
155ca     20 FF 10 FF 
155ce     10 FF 17 20 
155d2     00 EF 1F 10 | 	byte	$ff, $1b, $08, $0f, $20, $ff, $10, $ff, $10, $ff, $17, $20, $00, $ef, $1f, $10
155d6     F3 0E 00 EB 
155da     D0 DF 06 00 
155de     E0 FF 00 DF 
155e2     00 DF F0 F9 | 	byte	$f3, $0e, $00, $eb, $d0, $df, $06, $00, $e0, $ff, $00, $df, $00, $df, $f0, $f9
155e6     F0 EF FF 20 
155ea     E1 FF 10 FF 
155ee     10 FF 00 FF 
155f2     F0 FF 20 F7 | 	byte	$f0, $ef, $ff, $20, $e1, $ff, $10, $ff, $10, $ff, $00, $ff, $f0, $ff, $20, $f7
155f6     0B 08 F7 09 
155fa     2E 00 EF 20 
155fe     F3 FF 00 EB 
15602     FF 00 EB F7 | 	byte	$0b, $08, $f7, $09, $2e, $00, $ef, $20, $f3, $ff, $00, $eb, $ff, $00, $eb, $f7
15606     0D 00 E7 FF 
1560a     10 FF 10 F7 
1560e     07 20 00 EF 
15612     0C 00 E3 F0 | 	byte	$0d, $00, $e7, $ff, $10, $ff, $10, $f7, $07, $20, $00, $ef, $0c, $00, $e3, $f0
15616     E5 EF F0 F7 
1561a     10 00 FB F8 
1561e     F5 FD 06 00 
15622     FF 18 08 0F | 	byte	$e5, $ef, $f0, $f7, $10, $00, $fb, $f8, $f5, $fd, $06, $00, $ff, $18, $08, $0f
15626     08 FF 18 08 
1562a     07 18 00 F7 
1562e     00 FF 09 12 
15632     04 07 10 FA | 	byte	$08, $ff, $18, $08, $07, $18, $00, $f7, $00, $ff, $09, $12, $04, $07, $10, $fa
15636     FF 00 FF 08 
1563a     F9 E4 E5 F7 
1563e     F4 E0 EF F0 
15642     EF F0 FF 14 | 	byte	$ff, $00, $ff, $08, $f9, $e4, $e5, $f7, $f4, $e0, $ef, $f0, $ef, $f0, $ff, $14
15646     00 FF 1F 00 
1564a     EF 20 07 00 
1564e     FE F0 FF 00 
15652     FF 08 0C 00 | 	byte	$00, $ff, $1f, $00, $ef, $20, $07, $00, $fe, $f0, $ff, $00, $ff, $08, $0c, $00
15656     FF 00 FF 00 
1565a     F7 0B 10 F0 
1565e     FF 10 FB 00 
15662     1F 10 0B 00 | 	byte	$ff, $00, $ff, $00, $f7, $0b, $10, $f0, $ff, $10, $fb, $00, $1f, $10, $0b, $00
15666     0F 10 0F 04 
1566a     E8 FF 00 DF 
1566e     FC F0 DF E4 
15672     FF 00 EF 00 | 	byte	$0f, $10, $0f, $04, $e8, $ff, $00, $df, $fc, $f0, $df, $e4, $ff, $00, $ef, $00
15676     F7 06 00 EF 
1567a     FE F4 FF 10 
1567e     FF 07 08 07 
15682     10 00 FF 08 | 	byte	$f7, $06, $00, $ef, $fe, $f4, $ff, $10, $ff, $07, $08, $07, $10, $00, $ff, $08
15686     0F E0 FF 20 
1568a     D7 1F 10 DF 
1568e     20 FF 03 1F 
15692     10 FB 00 FF | 	byte	$0f, $e0, $ff, $20, $d7, $1f, $10, $df, $20, $ff, $03, $1f, $10, $fb, $00, $ff
15696     00 EF FF F0 
1569a     EF 00 FF F1 
1569e     FF 00 FF 0F 
156a2     00 FF 00 FF | 	byte	$00, $ef, $ff, $f0, $ef, $00, $ff, $f1, $ff, $00, $ff, $0f, $00, $ff, $00, $ff
156a6     00 EF 00 F4 
156aa     EF FF F8 FF 
156ae     00 FE F7 FF 
156b2     08 0A 07 18 | 	byte	$00, $ef, $00, $f4, $ef, $ff, $f8, $ff, $00, $fe, $f7, $ff, $08, $0a, $07, $18
156b6     00 FF 10 FF 
156ba     00 06 03 17 
156be     00 F7 08 05 
156c2     00 F4 FF 00 | 	byte	$00, $ff, $10, $ff, $00, $06, $03, $17, $00, $f7, $08, $05, $00, $f4, $ff, $00
156c6     FF F0 F7 0F 
156ca     00 F7 0B 10 
156ce     F0 F7 08 FF 
156d2     F5 F4 EF F7 | 	byte	$ff, $f0, $f7, $0f, $00, $f7, $0b, $10, $f0, $f7, $08, $ff, $f5, $f4, $ef, $f7
156d6     08 F0 FF 00 
156da     F7 FF 08 E5 
156de     FF 00 EF 0F 
156e2     00 EB FF 08 | 	byte	$08, $f0, $ff, $00, $f7, $ff, $08, $e5, $ff, $00, $ef, $0f, $00, $eb, $ff, $08
156e6     FF 00 12 00 
156ea     FF 00 FF 10 
156ee     04 FF 02 0D 
156f2     04 0A 00 F1 | 	byte	$ff, $00, $12, $00, $ff, $00, $ff, $10, $04, $ff, $02, $0d, $04, $0a, $00, $f1
156f6     FF 08 FB 05 
156fa     10 08 F8 FB 
156fe     FD 0B 00 EF 
15702     FF 10 E0 EF | 	byte	$ff, $08, $fb, $05, $10, $08, $f8, $fb, $fd, $0b, $00, $ef, $ff, $10, $e0, $ef
15706     10 00 EF 0F 
1570a     00 FF 00 FF 
1570e     07 00 EF 00 
15712     FE F4 F5 FF | 	byte	$10, $00, $ef, $0f, $00, $ff, $00, $ff, $07, $00, $ef, $00, $fe, $f4, $f5, $ff
15716     00 FF 00 FF 
1571a     00 EF 17 10 
1571e     FF 10 F0 FF 
15722     10 FF 04 12 | 	byte	$00, $ff, $00, $ff, $00, $ef, $17, $10, $ff, $10, $f0, $ff, $10, $ff, $04, $12
15726     04 08 F0 FF 
1572a     00 FD F0 FF 
1572e     00 EF FF 00 
15732     FB FD F8 0F | 	byte	$04, $08, $f0, $ff, $00, $fd, $f0, $ff, $00, $ef, $ff, $00, $fb, $fd, $f8, $0f
15736     00 FF 08 F8 
1573a     EB FF 00 FB 
1573e     FB 0D 00 FF 
15742     00 FF 00 03 | 	byte	$00, $ff, $08, $f8, $eb, $ff, $00, $fb, $fb, $0d, $00, $ff, $00, $ff, $00, $03
15746     07 04 03 0A 
1574a     F0 FF 08 F7 
1574e     0F 08 FF 09 
15752     08 06 03 08 | 	byte	$07, $04, $03, $0a, $f0, $ff, $08, $f7, $0f, $08, $ff, $09, $08, $06, $03, $08
15756     00 0F 00 FF 
1575a     00 F0 FF 00 
1575e     F5 FF 00 0B 
15762     00 FB FF 04 | 	byte	$00, $0f, $00, $ff, $00, $f0, $ff, $00, $f5, $ff, $00, $0b, $00, $fb, $ff, $04
15766     F0 FF 08 F1 
1576a     FF 00 FD FB 
1576e     00 0B 00 F5 
15772     0F 00 FF F8 | 	byte	$f0, $ff, $08, $f1, $ff, $00, $fd, $fb, $00, $0b, $00, $f5, $0f, $00, $ff, $f8
15776     0A 04 F8 FF 
1577a     08 FB 07 00 
1577e     FF 08 FF 0F 
15782     08 07 04 FA | 	byte	$0a, $04, $f8, $ff, $08, $fb, $07, $00, $ff, $08, $ff, $0f, $08, $07, $04, $fa
15786     0F 00 FF 00 
1578a     FC F7 0C F2 
1578e     FF 04 04 FF 
15792     04 F3 17 00 | 	byte	$0f, $00, $ff, $00, $fc, $f7, $0c, $f2, $ff, $04, $04, $ff, $04, $f3, $17, $00
15796     FF 03 08 FC 
1579a     FA F2 FB FF 
1579e     F8 EF FF F0 
157a2     FF 00 FF 03 | 	byte	$ff, $03, $08, $fc, $fa, $f2, $fb, $ff, $f8, $ef, $ff, $f0, $ff, $00, $ff, $03
157a6     00 FB 07 02 
157aa     0F 00 0F 09 
157ae     16 00 17 08 
157b2     05 0F 00 FF | 	byte	$00, $fb, $07, $02, $0f, $00, $0f, $09, $16, $00, $17, $08, $05, $0f, $00, $ff
157b6     09 00 EF 0F 
157ba     00 EF 0B 00 
157be     FF 00 00 F7 
157c2     0B 00 FF 00 | 	byte	$09, $00, $ef, $0f, $00, $ef, $0b, $00, $ff, $00, $00, $f7, $0b, $00, $ff, $00
157c6     FE FF F8 FF 
157ca     00 F7 FF 00 
157ce     FB F9 FC FF 
157d2     00 F9 FF 00 | 	byte	$fe, $ff, $f8, $ff, $00, $f7, $ff, $00, $fb, $f9, $fc, $ff, $00, $f9, $ff, $00
157d6     FF 03 0C F2 
157da     FF 09 08 FB 
157de     15 00 FF 00 
157e2     04 FF 00 F9 | 	byte	$ff, $03, $0c, $f2, $ff, $09, $08, $fb, $15, $00, $ff, $00, $04, $ff, $00, $f9
157e6     FD 15 00 FF 
157ea     00 04 03 0A 
157ee     F4 FF 00 FF 
157f2     FA F2 F7 FC | 	byte	$fd, $15, $00, $ff, $00, $04, $03, $0a, $f4, $ff, $00, $ff, $fa, $f2, $f7, $fc
157f6     E5 FF 00 F7 
157fa     FF 00 FF 00 
157fe     FF 0E 00 FF 
15802     05 0A 00 FB | 	byte	$e5, $ff, $00, $f7, $ff, $00, $ff, $00, $ff, $0e, $00, $ff, $05, $0a, $00, $fb
15806     14 00 FF 00 
1580a     F5 0F 00 FF 
1580e     F3 FF FB 04 
15812     FF 14 F0 FF | 	byte	$14, $00, $ff, $00, $f5, $0f, $00, $ff, $f3, $ff, $fb, $04, $ff, $14, $f0, $ff
15816     00 FE F7 06 
1581a     00 FF 09 00 
1581e     07 00 ED FF 
15822     00 F6 FF 08 | 	byte	$00, $fe, $f7, $06, $00, $ff, $09, $00, $07, $00, $ed, $ff, $00, $f6, $ff, $08
15826     F6 FF 05 00 
1582a     FF 00 FD 04 
1582e     F4 F9 F7 FD 
15832     FC F1 FD FC | 	byte	$f6, $ff, $05, $00, $ff, $00, $fd, $04, $f4, $f9, $f7, $fd, $fc, $f1, $fd, $fc
15836     F7 08 F0 FD 
1583a     FF 00 F3 0B 
1583e     00 FF 07 00 
15842     0B 00 FC FF | 	byte	$f7, $08, $f0, $fd, $ff, $00, $f3, $0b, $00, $ff, $07, $00, $0b, $00, $fc, $ff
15846     08 04 FF 08 
1584a     F9 0C F7 12 
1584e     F1 0F 00 FF 
15852     02 00 06 F7 | 	byte	$08, $04, $ff, $08, $f9, $0c, $f7, $12, $f1, $0f, $00, $ff, $02, $00, $06, $f7
15856     FF 02 F8 FF 
1585a     00 FD FF 00 
1585e     FC FD 01 F8 
15862     EF 0E 00 FD | 	byte	$ff, $02, $f8, $ff, $00, $fd, $ff, $00, $fc, $fd, $01, $f8, $ef, $0e, $00, $fd
15866     F9 02 FA F7 
1586a     06 00 02 FB 
1586e     04 07 04 FB 
15872     0F 08 F8 FF | 	byte	$f9, $02, $fa, $f7, $06, $00, $02, $fb, $04, $07, $04, $fb, $0f, $08, $f8, $ff
15876     04 00 FF F8 
1587a     FF 07 00 FB 
1587e     0E F2 FF 00 
15882     FE FE F5 FF | 	byte	$04, $00, $ff, $f8, $ff, $07, $00, $fb, $0e, $f2, $ff, $00, $fe, $fe, $f5, $ff
15886     F4 FA FF 00 
1588a     FC FB 08 00 
1588e     FF 03 00 FB 
15892     FF 06 02 FD | 	byte	$f4, $fa, $ff, $00, $fc, $fb, $08, $00, $ff, $03, $00, $fb, $ff, $06, $02, $fd
15896     01 00 00 FB 
1589a     04 FD 04 00 
1589e     FB 04 FA FF 
158a2     05 00 F7 08 | 	byte	$01, $00, $00, $fb, $04, $fd, $04, $00, $fb, $04, $fa, $ff, $05, $00, $f7, $08
158a6     00 FF 03 08 
158aa     01 0A 00 08 
158ae     01 00 F7 0B 
158b2     00 FD 08 F3 | 	byte	$00, $ff, $03, $08, $01, $0a, $00, $08, $01, $00, $f7, $0b, $00, $fd, $08, $f3
158b6     FF F5 FB FD 
158ba     F8 FE FB FF 
158be     FA F9 FF 05 
158c2     00 FB 10 00 | 	byte	$ff, $f5, $fb, $fd, $f8, $fe, $fb, $ff, $fa, $f9, $ff, $05, $00, $fb, $10, $00
158c6     06 01 04 FF 
158ca     08 F8 FF 00 
158ce     F6 FF FB 02 
158d2     00 FC FB FF | 	byte	$06, $01, $04, $ff, $08, $f8, $ff, $00, $f6, $ff, $fb, $02, $00, $fc, $fb, $ff
158d6     00 EF 0D 00 
158da     F6 FF 00 FB 
158de     0A F3 08 03 
158e2     04 05 04 00 | 	byte	$00, $ef, $0d, $00, $f6, $ff, $00, $fb, $0a, $f3, $08, $03, $04, $05, $04, $00
158e6     FB FF 00 F3 
158ea     FF FA F4 F7 
158ee     FF 00 F6 F9 
158f2     FD F9 FF 02 | 	byte	$fb, $ff, $00, $f3, $ff, $fa, $f4, $f7, $ff, $00, $f6, $f9, $fd, $f9, $ff, $02
158f6     FA FF 00 FD 
158fa     08 F9 05 03 
158fe     04 00 FF 04 
15902     04 00 FF 04 | 	byte	$fa, $ff, $00, $fd, $08, $f9, $05, $03, $04, $00, $ff, $04, $04, $00, $ff, $04
15906     F3 0E FB 08 
1590a     01 03 06 06 
1590e     02 FD 04 F9 
15912     FC FD FA F8 | 	byte	$f3, $0e, $fb, $08, $01, $03, $06, $06, $02, $fd, $04, $f9, $fc, $fd, $fa, $f8
15916     FE 00 F8 FB 
1591a     04 00 F8 FF 
1591e     04 00 F9 FF 
15922     04 F7 06 F7 | 	byte	$fe, $00, $f8, $fb, $04, $00, $f8, $ff, $04, $00, $f9, $ff, $04, $f7, $06, $f7
15926     02 00 F9 FF 
1592a     01 00 FD 05 
1592e     04 04 04 00 
15932     00 FF 04 03 | 	byte	$02, $00, $f9, $ff, $01, $00, $fd, $05, $04, $04, $04, $00, $00, $ff, $04, $03
15936     02 FF 0C FB 
1593a     08 03 04 00 
1593e     FD FE F9 FA 
15942     F7 F9 FB FA | 	byte	$02, $ff, $0c, $fb, $08, $03, $04, $00, $fd, $fe, $f9, $fa, $f7, $f9, $fb, $fa
15946     F9 FF 00 F8 
1594a     FE FD 00 FE 
1594e     FB FF 00 FA 
15952     FF FF 00 FF | 	byte	$f9, $ff, $00, $f8, $fe, $fd, $00, $fe, $fb, $ff, $00, $fa, $ff, $ff, $00, $ff
15956     00 FB 04 03 
1595a     08 01 04 FF 
1595e     04 FC FF 02 
15962     FB 04 FF 04 | 	byte	$00, $fb, $04, $03, $08, $01, $04, $ff, $04, $fc, $ff, $02, $fb, $04, $ff, $04
15966     02 00 00 03 
1596a     04 00 FF 08 
1596e     00 FF 06 00 
15972     FF 02 00 04 | 	byte	$02, $00, $00, $03, $04, $00, $ff, $08, $00, $ff, $06, $00, $ff, $02, $00, $04
15976     FD FF 00 01 
1597a     00 FB 00 F5 
1597e     FD F7 F6 FA 
15982     F7 FF 01 FE | 	byte	$fd, $ff, $00, $01, $00, $fb, $00, $f5, $fd, $f7, $f6, $fa, $f7, $ff, $01, $fe
15986     04 02 04 00 
1598a     FF 03 00 FF 
1598e     08 F7 FF 02 
15992     00 03 00 FF | 	byte	$04, $02, $04, $00, $ff, $03, $00, $ff, $08, $f7, $ff, $02, $00, $03, $00, $ff
15996     00 F9 FF FE 
1599a     00 FF 01 FE 
1599e     03 00 FB 06 
159a2     FD FF 04 00 | 	byte	$00, $f9, $ff, $fe, $00, $ff, $01, $fe, $03, $00, $fb, $06, $fd, $ff, $04, $00
159a6     FF 05 01 00 
159aa     FF 00 FB FF 
159ae     FF FC FF 00 
159b2     FF 04 FB 00 | 	byte	$ff, $05, $01, $00, $ff, $00, $fb, $ff, $ff, $fc, $ff, $00, $ff, $04, $fb, $00
159b6     FD 00 FB 00 
159ba     FF 00 FB 03 
159be     03 01 06 04 
159c2     03 04 07 04 | 	byte	$fd, $00, $fb, $00, $ff, $00, $fb, $03, $03, $01, $06, $04, $03, $04, $07, $04
159c6     FB 08 01 00 
159ca     FF 00 FB FF 
159ce     00 F7 08 F7 
159d2     FC FB FB FC | 	byte	$fb, $08, $01, $00, $ff, $00, $fb, $ff, $00, $f7, $08, $f7, $fc, $fb, $fb, $fc
159d6     FB F9 FB FE 
159da     FA FD FF 01 
159de     00 FF 02 00 
159e2     FD FF 00 00 | 	byte	$fb, $f9, $fb, $fe, $fa, $fd, $ff, $01, $00, $ff, $02, $00, $fd, $ff, $00, $00
159e6     00 FF 04 FD 
159ea     05 08 00 00 
159ee     02 00 FF 00 
159f2     FF 00 FF 00 | 	byte	$00, $ff, $04, $fd, $05, $08, $00, $00, $02, $00, $ff, $00, $ff, $00, $ff, $00
159f6     FD 05 04 FD 
159fa     09 08 01 02 
159fe     03 00 FD FE 
15a02     FC FD 00 FB | 	byte	$fd, $05, $04, $fd, $09, $08, $01, $02, $03, $00, $fd, $fe, $fc, $fd, $00, $fb
15a06     FF 00 F7 FE 
15a0a     FC F5 FA FD 
15a0e     F8 FB FF FD 
15a12     00 01 01 05 | 	byte	$ff, $00, $f7, $fe, $fc, $f5, $fa, $fd, $f8, $fb, $ff, $fd, $00, $01, $01, $05
15a16     04 05 08 03 
15a1a     07 04 01 04 
15a1e     02 00 FE FC 
15a22     FD FF 00 FF | 	byte	$04, $05, $08, $03, $07, $04, $01, $04, $02, $00, $fe, $fc, $fd, $ff, $00, $ff
15a26     00 FF 00 FF 
15a2a     04 00 FF 02 
15a2e     FF 02 FF 03 
15a32     04 03 04 03 | 	byte	$00, $ff, $00, $ff, $04, $00, $ff, $02, $ff, $02, $ff, $03, $04, $03, $04, $03
15a36     02 00 00 FF 
15a3a     00 FE FC FD 
15a3e     FE FC FD FC 
15a42     F9 FF 02 00 | 	byte	$02, $00, $00, $ff, $00, $fe, $fc, $fd, $fe, $fc, $fd, $fc, $f9, $ff, $02, $00
15a46     FA FF 02 FD 
15a4a     FE 03 04 00 
15a4e     04 05 02 05 
15a52     04 03 05 02 | 	byte	$fa, $ff, $02, $fd, $fe, $03, $04, $00, $04, $05, $02, $05, $04, $03, $05, $02
15a56     01 03 01 01 
15a5a     01 FF 00 FF 
15a5e     02 FA FD 00 
15a62     FB FC FD FD | 	byte	$01, $03, $01, $01, $01, $ff, $00, $ff, $02, $fa, $fd, $00, $fb, $fc, $fd, $fd
15a66     00 FE FF 04 
15a6a     02 FF 01 02 
15a6e     00 FD FE FC 
15a72     FD FE FE FC | 	byte	$00, $fe, $ff, $04, $02, $ff, $01, $02, $00, $fd, $fe, $fc, $fd, $fe, $fe, $fc
15a76     FE 00 00 FD 
15a7a     FF 00 01 00 
15a7e     FF 02 00 FF 
15a82     02 01 02 00 | 	byte	$fe, $00, $00, $fd, $ff, $00, $01, $00, $ff, $02, $00, $ff, $02, $01, $02, $00
15a86     01 00 FF 00 
15a8a     03 00 FD FE 
15a8e     FF FD FF 00 
15a92     FD FE FF FC | 	byte	$01, $00, $ff, $00, $03, $00, $fd, $fe, $ff, $fd, $ff, $00, $fd, $fe, $ff, $fc
15a96     FF 02 FD FE 
15a9a     FE FE FE FD 
15a9e     FC FC FF 00 
15aa2     01 04 02 01 | 	byte	$ff, $02, $fd, $fe, $fe, $fe, $fe, $fd, $fc, $fc, $ff, $00, $01, $04, $02, $01
15aa6     04 02 01 00 
15aaa     FE FF FC FC 
15aae     FD FF FD FE 
15ab2     FF FE FD FF | 	byte	$04, $02, $01, $00, $fe, $ff, $fc, $fc, $fd, $ff, $fd, $fe, $ff, $fe, $fd, $ff
15ab6     01 00 00 FF 
15aba     03 01 FF 03 
15abe     02 FF 03 02 
15ac2     00 01 00 FF | 	byte	$01, $00, $00, $ff, $03, $01, $ff, $03, $02, $ff, $03, $02, $00, $01, $00, $ff
15ac6     00 00 FD 00 
15aca     FF FC FA FC 
15ace     FC FB FE FD 
15ad2     FD FF FF 00 | 	byte	$00, $00, $fd, $00, $ff, $fc, $fa, $fc, $fc, $fb, $fe, $fd, $fd, $ff, $ff, $00
15ad6     FE FF 00 03 
15ada     02 01 03 02 
15ade     01 00 01 00 
15ae2     FF FF 00 00 | 	byte	$fe, $ff, $00, $03, $02, $01, $03, $02, $01, $00, $01, $00, $ff, $ff, $00, $00
15ae6     00 00 FD FF 
15aea     00 FF 00 FF 
15aee     02 02 02 02 
15af2     04 04 02 01 | 	byte	$00, $00, $fd, $ff, $00, $ff, $00, $ff, $02, $02, $02, $02, $04, $04, $02, $01
15af6     00 FD FE FE 
15afa     FF 00 FF 02 
15afe     01 01 00 FD 
15b02     FE FE FE FC | 	byte	$00, $fd, $fe, $fe, $ff, $00, $ff, $02, $01, $01, $00, $fd, $fe, $fe, $fe, $fc
15b06     FB FD F8 FB 
15b0a     FD FD FF 00 
15b0e     03 01 03 02 
15b12     01 01 04 04 | 	byte	$fb, $fd, $f8, $fb, $fd, $fd, $ff, $00, $03, $01, $03, $02, $01, $01, $04, $04
15b16     00 FF 04 01 
15b1a     03 04 00 FF 
15b1e     00 FF 01 00 
15b22     FE FF FE FC | 	byte	$00, $ff, $04, $01, $03, $04, $00, $ff, $00, $ff, $01, $00, $fe, $ff, $fe, $fc
15b26     FD FE FF 01 
15b2a     02 00 FE FE 
15b2e     FF FE FF 00 
15b32     FC FC FF 00 | 	byte	$fd, $fe, $ff, $01, $02, $00, $fe, $fe, $ff, $fe, $ff, $00, $fc, $fc, $ff, $00
15b36     FF 01 FF FF 
15b3a     00 FE FF 01 
15b3e     01 01 01 01 
15b42     03 02 04 05 | 	byte	$ff, $01, $ff, $ff, $00, $fe, $ff, $01, $01, $01, $01, $01, $03, $02, $04, $05
15b46     04 05 06 02 
15b4a     03 02 00 00 
15b4e     00 FF 00 FE 
15b52     FF 00 FF 00 | 	byte	$04, $05, $06, $02, $03, $02, $00, $00, $00, $ff, $00, $fe, $ff, $00, $ff, $00
15b56     FF 00 FE FD 
15b5a     FE FC FA FB 
15b5e     FC FC FD FD 
15b62     FD FF FF FF | 	byte	$ff, $00, $fe, $fd, $fe, $fc, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $ff, $ff, $ff
15b66     FE FF FF 01 
15b6a     01 02 02 02 
15b6e     02 02 01 01 
15b72     00 FF 00 FF | 	byte	$fe, $ff, $ff, $01, $01, $02, $02, $02, $02, $02, $01, $01, $00, $ff, $00, $ff
15b76     00 FF 00 FE 
15b7a     FF 00 FE FF 
15b7e     FF FF FF FF 
15b82     02 04 04 03 | 	byte	$00, $ff, $00, $fe, $ff, $00, $fe, $ff, $ff, $ff, $ff, $ff, $02, $04, $04, $03
15b86     03 03 02 02 
15b8a     00 FF 00 FD 
15b8e     FD FD FC FB 
15b92     FB FB FC FD | 	byte	$03, $03, $02, $02, $00, $ff, $00, $fd, $fd, $fd, $fc, $fb, $fb, $fb, $fc, $fd
15b96     FC FD FE FF 
15b9a     00 00 02 03 
15b9e     01 03 00 FF 
15ba2     00 00 00 FF | 	byte	$fc, $fd, $fe, $ff, $00, $00, $02, $03, $01, $03, $00, $ff, $00, $00, $00, $ff
15ba6     FE FE FE FE 
15baa     FD FE FF 00 
15bae     FE FF 00 FF 
15bb2     03 05 04 02 | 	byte	$fe, $fe, $fe, $fe, $fd, $fe, $ff, $00, $fe, $ff, $00, $ff, $03, $05, $04, $02
15bb6     03 03 02 02 
15bba     02 02 01 01 
15bbe     02 00 FF 00 
15bc2     FF FF 00 FE | 	byte	$03, $03, $02, $02, $02, $02, $01, $01, $02, $00, $ff, $00, $ff, $ff, $00, $fe
15bc6     FF FE FD FD 
15bca     FC FB FB FC 
15bce     FD FF 00 FE 
15bd2     FE FF FF 00 | 	byte	$ff, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fd, $ff, $00, $fe, $fe, $ff, $ff, $00
15bd6     01 02 01 01 
15bda     01 01 02 02 
15bde     02 03 02 01 
15be2     01 01 01 00 | 	byte	$01, $02, $01, $01, $01, $01, $02, $02, $02, $03, $02, $01, $01, $01, $01, $00
15be6     00 00 FF FE 
15bea     FF 00 01 01 
15bee     02 00 01 00 
15bf2     02 00 FF 00 | 	byte	$00, $00, $ff, $fe, $ff, $00, $01, $01, $02, $00, $01, $00, $02, $00, $ff, $00
15bf6     00 FE FE FE 
15bfa     FE FD FE FD 
15bfe     FD FD FD FD 
15c02     FE FD FD FE | 	byte	$00, $fe, $fe, $fe, $fe, $fd, $fe, $fd, $fd, $fd, $fd, $fd, $fe, $fd, $fd, $fe
15c06     FE FF FF 01 
15c0a     02 02 03 02 
15c0e     03 04 02 02 
15c12     03 03 01 00 | 	byte	$fe, $ff, $ff, $01, $02, $02, $03, $02, $03, $04, $02, $02, $03, $03, $01, $00
15c16     FE FE FE FF 
15c1a     00 FF 00 00 
15c1e     FF 00 FD FD 
15c22     FC FC FD FE | 	byte	$fe, $fe, $fe, $ff, $00, $ff, $00, $00, $ff, $00, $fd, $fd, $fc, $fc, $fd, $fe
15c26     FE FF FE FE 
15c2a     FD FD FD FF 
15c2e     FE FF 00 FE 
15c32     FE FE FF 00 | 	byte	$fe, $ff, $fe, $fe, $fd, $fd, $fd, $ff, $fe, $ff, $00, $fe, $fe, $fe, $ff, $00
15c36     00 FF FE FE 
15c3a     FD FE FF FF 
15c3e     01 01 01 02 
15c42     04 04 05 06 | 	byte	$00, $ff, $fe, $fe, $fd, $fe, $ff, $ff, $01, $01, $01, $02, $04, $04, $05, $06
15c46     06 04 03 02 
15c4a     00 FF FF FF 
15c4e     FC FA FA F9 
15c52     F9 F9 F9 FB | 	byte	$06, $04, $03, $02, $00, $ff, $ff, $ff, $fc, $fa, $fa, $f9, $f9, $f9, $f9, $fb
15c56     FA FB FB FB 
15c5a     FC FC FD FE 
15c5e     FF 01 01 01 
15c62     01 02 02 01 | 	byte	$fa, $fb, $fb, $fb, $fc, $fc, $fd, $fe, $ff, $01, $01, $01, $01, $02, $02, $01
15c66     01 02 03 04 
15c6a     02 01 00 FF 
15c6e     00 00 FF FF 
15c72     00 00 00 FE | 	byte	$01, $02, $03, $04, $02, $01, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $fe
15c76     FF 00 00 00 
15c7a     00 00 00 00 
15c7e     00 FF 00 FF 
15c82     FD FC FC FB | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $00, $ff, $fd, $fc, $fc, $fb
15c86     FA FB FC FB 
15c8a     FC FC FD FD 
15c8e     FE FF FF 01 
15c92     00 FF FF FF | 	byte	$fa, $fb, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $ff, $ff, $01, $00, $ff, $ff, $ff
15c96     FF 01 02 02 
15c9a     02 04 03 02 
15c9e     02 02 02 02 
15ca2     01 00 00 00 | 	byte	$ff, $01, $02, $02, $02, $04, $03, $02, $02, $02, $02, $02, $01, $00, $00, $00
15ca6     00 00 FE FE 
15caa     FE FE FE FD 
15cae     FD FE FE FF 
15cb2     FF FF 01 00 | 	byte	$00, $00, $fe, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff, $01, $00
15cb6     00 00 00 00 
15cba     00 00 00 00 
15cbe     00          | 	byte	$00[9]
15cbf     FF FE FC FC 
15cc3     FC FC FD FE 
15cc7     FF FF 00 00 
15ccb     02 02 02 02 | 	byte	$ff, $fe, $fc, $fc, $fc, $fc, $fd, $fe, $ff, $ff, $00, $00, $02, $02, $02, $02
15ccf     01 01 01 00 
15cd3     00 00 01 01 
15cd7     01 01 00 00 
15cdb     FF FF FF FF | 	byte	$01, $01, $01, $00, $00, $00, $01, $01, $01, $01, $00, $00, $ff, $ff, $ff, $ff
15cdf     00 FF FF FF 
15ce3     FE FE FE FF 
15ce7     FF FF 01 00 
15ceb     00 00 01 02 | 	byte	$00, $ff, $ff, $ff, $fe, $fe, $fe, $ff, $ff, $ff, $01, $00, $00, $00, $01, $02
15cef     02 03 03 02 
15cf3     01 01 01 01 
15cf7     01 01 01 00 
15cfb     FF FE FF FF | 	byte	$02, $03, $03, $02, $01, $01, $01, $01, $01, $01, $01, $00, $ff, $fe, $ff, $ff
15cff     FF FF 00 00 
15d03     01 03 05 06 
15d07     06 05 05 04 
15d0b     02 01 01 01 | 	byte	$ff, $ff, $00, $00, $01, $03, $05, $06, $06, $05, $05, $04, $02, $01, $01, $01
15d0f     00 FE FE FD 
15d13     FC FC FB FA 
15d17     FA FA FB FB 
15d1b     FC FD FE FD | 	byte	$00, $fe, $fe, $fd, $fc, $fc, $fb, $fa, $fa, $fa, $fb, $fb, $fc, $fd, $fe, $fd
15d1f     FE FF 01 01 
15d23     01 02 02 01 
15d27     02 02 03 04 
15d2b     04 04 04 02 | 	byte	$fe, $ff, $01, $01, $01, $02, $02, $01, $02, $02, $03, $04, $04, $04, $04, $02
15d2f     02 01 00 01 
15d33     01 01 00 00 
15d37     00 FF FF FF 
15d3b     00 01 02 01 | 	byte	$02, $01, $00, $01, $01, $01, $00, $00, $00, $ff, $ff, $ff, $00, $01, $02, $01
15d3f     02 03 03 02 
15d43     02 00 00 FF 
15d47     FF FF FF FF 
15d4b     00 FF FF FE | 	byte	$02, $03, $03, $02, $02, $00, $00, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $fe
15d4f     FD FD FD FC 
15d53     FD FE FE FF 
15d57     FE FE FF 01 
15d5b     02 03 03 03 | 	byte	$fd, $fd, $fd, $fc, $fd, $fe, $fe, $ff, $fe, $fe, $ff, $01, $02, $03, $03, $03
15d5f     04 04 04 02 
15d63     02 02 02 01 
15d67     02 00 00 FE 
15d6b     FE FE FD FD | 	byte	$04, $04, $04, $02, $02, $02, $02, $01, $02, $00, $00, $fe, $fe, $fe, $fd, $fd
15d6f     FD FC FC FD 
15d73     FD FD FD FF 
15d77     00 00 01 02 
15d7b     02 01 01 00 | 	byte	$fd, $fc, $fc, $fd, $fd, $fd, $fd, $ff, $00, $00, $01, $02, $02, $01, $01, $00
15d7f     00 00 00 00 
15d83     00          | 	byte	$00[5]
15d84     01 00 00 FF 
15d88     FE FE FE FD 
15d8c     FE FF FF 00 
15d90     01 02 03 04 | 	byte	$01, $00, $00, $ff, $fe, $fe, $fe, $fd, $fe, $ff, $ff, $00, $01, $02, $03, $04
15d94     05 06 05 04 
15d98     04 04 02 02 
15d9c     00 00 00 FF 
15da0     FE FE FE FD | 	byte	$05, $06, $05, $04, $04, $04, $02, $02, $00, $00, $00, $ff, $fe, $fe, $fe, $fd
15da4     FD FE FE FE 
15da8     FE FE FF FF 
15dac     FE FD FD FD 
15db0     FD FE FE FF | 	byte	$fd, $fe, $fe, $fe, $fe, $fe, $ff, $ff, $fe, $fd, $fd, $fd, $fd, $fe, $fe, $ff
15db4     FF FF FF FF 
15db8     FF          | 	byte	$ff[5]
15db9     00 00 FF FF 
15dbd     FF FE FE FE 
15dc1     FE FD FD FE 
15dc5     FE FF FF FF | 	byte	$00, $00, $ff, $ff, $ff, $fe, $fe, $fe, $fe, $fd, $fd, $fe, $fe, $ff, $ff, $ff
15dc9     01 02 02 02 
15dcd     02 02 03 02 
15dd1     02 01 01 00 
15dd5     FE FD FC FC | 	byte	$01, $02, $02, $02, $02, $02, $03, $02, $02, $01, $01, $00, $fe, $fd, $fc, $fc
15dd9     FC FD FE FD 
15ddd     FE FD FD FE 
15de1     FE FE FF FE 
15de5     FF 00 00 01 | 	byte	$fc, $fd, $fe, $fd, $fe, $fd, $fd, $fe, $fe, $fe, $ff, $fe, $ff, $00, $00, $01
15de9     01 01 01 02 
15ded     03 04 03 02 
15df1     02 01 FE 00 
15df5     00 DC F2 F3 | 	byte	$01, $01, $01, $02, $03, $04, $03, $02, $02, $01, $fe, $00, $00, $dc, $f2, $f3
15df9     01 0A 10 13 
15dfd     16 0E 10 13 
15e01     16 1D 1E 14 
15e05     07 FD F9 FC | 	byte	$01, $0a, $10, $13, $16, $0e, $10, $13, $16, $1d, $1e, $14, $07, $fd, $f9, $fc
15e09     04 14 13 1D 
15e0d     1E 1D 1A 18 
15e11     16 13 13 13 
15e15     13 0A 0A 03 | 	byte	$04, $14, $13, $1d, $1e, $1d, $1a, $18, $16, $13, $13, $13, $13, $0a, $0a, $03
15e19     E8 C5 8F 80 
15e1d     80 80 80 80 
15e21     80 80 92 A7 
15e25     B7 C0 CF DA | 	byte	$e8, $c5, $8f, $80, $80, $80, $80, $80, $80, $80, $92, $a7, $b7, $c0, $cf, $da
15e29     EA FC 0A 18 
15e2d     1D 13 FD E2 
15e31     C6 BF BC BD 
15e35     BF B7 AC A9 | 	byte	$ea, $fc, $0a, $18, $1d, $13, $fd, $e2, $c6, $bf, $bc, $bd, $bf, $b7, $ac, $a9
15e39     AC AD B5 C6 
15e3d     CA E3 F6 04 
15e41     09 13 18 14 
15e45     0A 09 01 00 | 	byte	$ac, $ad, $b5, $c6, $ca, $e3, $f6, $04, $09, $13, $18, $14, $0a, $09, $01, $00
15e49     F9 F6 F6 ED 
15e4d     E6 ED E6 EC 
15e51     ED F9 03 10 
15e55     20 30 3B 41 | 	byte	$f9, $f6, $f6, $ed, $e6, $ed, $e6, $ec, $ed, $f9, $03, $10, $20, $30, $3b, $41
15e59     40 43 41 47 
15e5d     53 5D 5D 59 
15e61     3D 2A 18 09 
15e65     01 07 FD 03 | 	byte	$40, $43, $41, $47, $53, $5d, $5d, $59, $3d, $2a, $18, $09, $01, $07, $fd, $03
15e69     0A 0E 24 31 
15e6d     34 30 20 1D 
15e71     14 1A 0E 0D 
15e75     0D 0A 13 1A | 	byte	$0a, $0e, $24, $31, $34, $30, $20, $1d, $14, $1a, $0e, $0d, $0d, $0a, $13, $1a
15e79     20 30 36 3D 
15e7d     47 44 34 26 
15e81     07 F9 F2 F7 
15e85     FC 01 0E 18 | 	byte	$20, $30, $36, $3d, $47, $44, $34, $26, $07, $f9, $f2, $f7, $fc, $01, $0e, $18
15e89     1E 21 1E 14 
15e8d     18 18 18 16 
15e91     0E 0E FF F3 
15e95     EA DC DA D4 | 	byte	$1e, $21, $1e, $14, $18, $18, $18, $16, $0e, $0e, $ff, $f3, $ea, $dc, $da, $d4
15e99     B7 AD A9 A2 
15e9d     A3 A6 A7 A9 
15ea1     B3 C0 CF E3 
15ea5     DF EA EA F9 | 	byte	$b7, $ad, $a9, $a2, $a3, $a6, $a7, $a9, $b3, $c0, $cf, $e3, $df, $ea, $ea, $f9
15ea9     FD 0A 14 1A 
15ead     1A 1A 1A 10 
15eb1     0D 04 FC F0 
15eb5     DC DA CA D6 | 	byte	$fd, $0a, $14, $1a, $1a, $1a, $1a, $10, $0d, $04, $fc, $f0, $dc, $da, $ca, $d6
15eb9     DF E8 FD 0E 
15ebd     21 3A 4D 68 
15ec1     76 7C 70 5A 
15ec5     4D 34 1D 10 | 	byte	$df, $e8, $fd, $0e, $21, $3a, $4d, $68, $76, $7c, $70, $5a, $4d, $34, $1d, $10
15ec9     01 FC FD FC 
15ecd     F7 07 03 07 
15ed1     00 F6 E3 D4 
15ed5     CC CC CA CC | 	byte	$01, $fc, $fd, $fc, $f7, $07, $03, $07, $00, $f6, $e3, $d4, $cc, $cc, $ca, $cc
15ed9     D4 DA E3 EA 
15edd     F2 ED E8 E2 
15ee1     D6 CF CC B7 
15ee5     AF B5 AC B5 | 	byte	$d4, $da, $e3, $ea, $f2, $ed, $e8, $e2, $d6, $cf, $cc, $b7, $af, $b5, $ac, $b5
15ee9     CA DF F3 FD 
15eed     FD F3 F6 F6 
15ef1     F9 FF 03 03 
15ef5     03 F6 F2 ED | 	byte	$ca, $df, $f3, $fd, $fd, $f3, $f6, $f6, $f9, $ff, $03, $03, $03, $f6, $f2, $ed
15ef9     DF DC D9 DA 
15efd     E2 E3 EC F7 
15f01     03 0D 20 30 
15f05     34 3A 40 40 | 	byte	$df, $dc, $d9, $da, $e2, $e3, $ec, $f7, $03, $0d, $20, $30, $34, $3a, $40, $40
15f09     2A 18 07 FD 
15f0d     F2 ED E8 F0 
15f11     F6 01 07 10 
15f15     1A 18 04 ED | 	byte	$2a, $18, $07, $fd, $f2, $ed, $e8, $f0, $f6, $01, $07, $10, $1a, $18, $04, $ed
15f19     DF C5 B1 A0 
15f1d     89 89 92 9A 
15f21     AF C6 CF E8 
15f25     EA ED E8 E2 | 	byte	$df, $c5, $b1, $a0, $89, $89, $92, $9a, $af, $c6, $cf, $e8, $ea, $ed, $e8, $e2
15f29     D6 D0 C6 BF 
15f2d     C3 BD CA C9 
15f31     CA CC C6 C0 
15f35     AF A9 A7 A0 | 	byte	$d6, $d0, $c6, $bf, $c3, $bd, $ca, $c9, $ca, $cc, $c6, $c0, $af, $a9, $a7, $a0
15f39     A7 B7 C0 CF 
15f3d     DF ED 03 10 
15f41     14 09 0A 03 
15f45     07 0A 09 07 | 	byte	$a7, $b7, $c0, $cf, $df, $ed, $03, $10, $14, $09, $0a, $03, $07, $0a, $09, $07
15f49     01 F0 EC E6 
15f4d     E2 E2 E6 EA 
15f51     F6 F7 03 13 
15f55     20 3B 57 68 | 	byte	$01, $f0, $ec, $e6, $e2, $e2, $e6, $ea, $f6, $f7, $03, $13, $20, $3b, $57, $68
15f59     74 74 71 63 
15f5d     44 31 18 07 
15f61     03 EC EC EC 
15f65     F6 04 18 26 | 	byte	$74, $74, $71, $63, $44, $31, $18, $07, $03, $ec, $ec, $ec, $f6, $04, $18, $26
15f69     37 41 36 2A 
15f6d     18 00 F6 F3 
15f71     F6 F9 FD 04 
15f75     0E 1D 27 36 | 	byte	$37, $41, $36, $2a, $18, $00, $f6, $f3, $f6, $f9, $fd, $04, $0e, $1d, $27, $36
15f79     40 44 43 31 
15f7d     27 24 21 24 
15f81     21 26 2C 3A 
15f85     4F 54 5D 57 | 	byte	$40, $44, $43, $31, $27, $24, $21, $24, $21, $26, $2c, $3a, $4f, $54, $5d, $57
15f89     4D 36 20 01 
15f8d     E2 D0 C0 BD 
15f91     B9 C3 D0 D4 
15f95     DA C9 C3 BD | 	byte	$4d, $36, $20, $01, $e2, $d0, $c0, $bd, $b9, $c3, $d0, $d4, $da, $c9, $c3, $bd
15f99     BD BF C0 C5 
15f9d     C5 D0 D9 D3 
15fa1     E0 E3 E6 EC 
15fa5     EA DF DF E0 | 	byte	$bd, $bf, $c0, $c5, $c5, $d0, $d9, $d3, $e0, $e3, $e6, $ec, $ea, $df, $df, $e0
15fa9     E6 ED F9 04 
15fad     0E 07 07 FF 
15fb1     F9 EC E0 D9 
15fb5     D4 D3 DF E3 | 	byte	$e6, $ed, $f9, $04, $0e, $07, $07, $ff, $f9, $ec, $e0, $d9, $d4, $d3, $df, $e3
15fb9     00 14 30 4D 
15fbd     64 71 76 5E 
15fc1     51 36 27 24 
15fc5     20 20 16 13 | 	byte	$00, $14, $30, $4d, $64, $71, $76, $5e, $51, $36, $27, $24, $20, $20, $16, $13
15fc9     14 10 13 0D 
15fcd     0D 09 00 F6 
15fd1     E8 CA BC B5 
15fd5     B3 BD CA DA | 	byte	$14, $10, $13, $0d, $0d, $09, $00, $f6, $e8, $ca, $bc, $b5, $b3, $bd, $ca, $da
15fd9     E8 F7 00 07 
15fdd     FF F9 ED D4 
15fe1     C5 AF AD AF 
15fe5     B3 C6 E2 F7 | 	byte	$e8, $f7, $00, $07, $ff, $f9, $ed, $d4, $c5, $af, $ad, $af, $b3, $c6, $e2, $f7
15fe9     00 00 FD F6 
15fed     F0 F2 EC E8 
15ff1     E3 DC D9 D4 
15ff5     D3 D0 D3 D6 | 	byte	$00, $00, $fd, $f6, $f0, $f2, $ec, $e8, $e3, $dc, $d9, $d4, $d3, $d0, $d3, $d6
15ff9     D3 C9 C0 C3 
15ffd     CF E8 FC 13 
16001     21 3A 3A 3D 
16005     43 40 37 24 | 	byte	$d3, $c9, $c0, $c3, $cf, $e8, $fc, $13, $21, $3a, $3a, $3d, $43, $40, $37, $24
16009     13 FC E0 CC 
1600d     C9 CA D6 E8 
16011     F2 04 09 00 
16015     F3 EA E2 E2 | 	byte	$13, $fc, $e0, $cc, $c9, $ca, $d6, $e8, $f2, $04, $09, $00, $f3, $ea, $e2, $e2
16019     E6 F0 F6 F6 
1601d     ED E3 E8 E6 
16021     EC EC E3 D0 
16025     C0 AD A9 9D | 	byte	$e6, $f0, $f6, $f6, $ed, $e3, $e8, $e6, $ec, $ec, $e3, $d0, $c0, $ad, $a9, $9d
16029     9D AC A9 AD 
1602d     B1 B1 B7 C5 
16031     C5 BF B7 AC 
16035     96 80 80 80 | 	byte	$9d, $ac, $a9, $ad, $b1, $b1, $b7, $c5, $c5, $bf, $b7, $ac, $96, $80, $80, $80
16039     90 A3 BF DA 
1603d     F3 FC FF 00 
16041     09 10 18 24 
16045     21 24 1E 18 | 	byte	$90, $a3, $bf, $da, $f3, $fc, $ff, $00, $09, $10, $18, $24, $21, $24, $1e, $18
16049     0E FF F9 F0 
1604d     F0 F2 E2 E2 
16051     E3 F0 FF 1A 
16055     2A 36 40 41 | 	byte	$0e, $ff, $f9, $f0, $f0, $f2, $e2, $e2, $e3, $f0, $ff, $1a, $2a, $36, $40, $41
16059     43 49 49 44 
1605d     2D 20 07 FC 
16061     F9 FC 0A 18 
16065     26 3B 37 27 | 	byte	$43, $49, $49, $44, $2d, $20, $07, $fc, $f9, $fc, $0a, $18, $26, $3b, $37, $27
16069     09 00 ED E3 
1606d     E2 E8 EA FC 
16071     01 14 20 27 
16075     37 3A 37 2D | 	byte	$09, $00, $ed, $e3, $e2, $e8, $ea, $fc, $01, $14, $20, $27, $37, $3a, $37, $2d
16079     1E 13 0D 0E 
1607d     20 3B 49 63 
16081     63 63 5A 59 
16085     60 5D 4D 3A | 	byte	$1e, $13, $0d, $0e, $20, $3b, $49, $63, $63, $63, $5a, $59, $60, $5d, $4d, $3a
16089     0A EA CF BD 
1608d     B5 AF B1 BC 
16091     C0 C3 C0 C0 
16095     C0 C5 C9 D0 | 	byte	$0a, $ea, $cf, $bd, $b5, $af, $b1, $bc, $c0, $c3, $c0, $c0, $c0, $c5, $c9, $d0
16099     CF C9 CA CF 
1609d     D9 D6 DF E0 
160a1     DF E0 E0 DC 
160a5     E0 DA E0 E8 | 	byte	$cf, $c9, $ca, $cf, $d9, $d6, $df, $e0, $df, $e0, $e0, $dc, $e0, $da, $e0, $e8
160a9     ED FD FC F3 
160ad     F6 F2 F6 FD 
160b1     FD FF F0 E8 
160b5     E0 DF EA F7 | 	byte	$ed, $fd, $fc, $f3, $f6, $f2, $f6, $fd, $fd, $ff, $f0, $e8, $e0, $df, $ea, $f7
160b9     09 1A 36 3A 
160bd     3D 3A 31 31 
160c1     27 2C 2D 37 
160c5     36 3B 3D 3A | 	byte	$09, $1a, $36, $3a, $3d, $3a, $31, $31, $27, $2c, $2d, $37, $36, $3b, $3d, $3a
160c9     2C 21 16 F9 
160cd     E2 D0 CC C9 
160d1     CF DF E6 EC 
160d5     ED E8 E0 E6 | 	byte	$2c, $21, $16, $f9, $e2, $d0, $cc, $c9, $cf, $df, $e6, $ec, $ed, $e8, $e0, $e6
160d9     F0 FD 00 01 
160dd     EC DC C9 BC 
160e1     BF BF D3 E0 
160e5     EC EC E2 E0 | 	byte	$f0, $fd, $00, $01, $ec, $dc, $c9, $bc, $bf, $bf, $d3, $e0, $ec, $ec, $e2, $e0
160e9     D9 D4 D0 DA 
160ed     DC EA EC ED 
160f1     F0 ED DA D3 
160f5     CC C0 BD BF | 	byte	$d9, $d4, $d0, $da, $dc, $ea, $ec, $ed, $f0, $ed, $da, $d3, $cc, $c0, $bd, $bf
160f9     BF C3 D6 E2 
160fd     F6 F7 FC 03 
16101     03 0A 16 20 
16105     26 24 0D F7 | 	byte	$bf, $c3, $d6, $e2, $f6, $f7, $fc, $03, $03, $0a, $16, $20, $26, $24, $0d, $f7
16109     E2 D6 D4 D4 
1610d     E2 EC FD 01 
16111     FF FF FF FD 
16115     00 03 0E 18 | 	byte	$e2, $d6, $d4, $d4, $e2, $ec, $fd, $01, $ff, $ff, $ff, $fd, $00, $03, $0e, $18
16119     21 27 1E 07 
1611d     F2 DA CC CA 
16121     C0 C0 BC A7 
16125     9D 89 92 90 | 	byte	$21, $27, $1e, $07, $f2, $da, $cc, $ca, $c0, $c0, $bc, $a7, $9d, $89, $92, $90
16129     90 9C 9D A6 
1612d     B1 BF C9 BD 
16131     AC 94 89 80 
16135     80 80 8F 9D | 	byte	$90, $9c, $9d, $a6, $b1, $bf, $c9, $bd, $ac, $94, $89, $80, $80, $80, $8f, $9d
16139     B3 C6 CC D6 
1613d     F0 F2 00 13 
16141     24 31 37 40 
16145     3A 2C 18 0A | 	byte	$b3, $c6, $cc, $d6, $f0, $f2, $00, $13, $24, $31, $37, $40, $3a, $2c, $18, $0a
16149     FC E3 DF D3 
1614d     D0 D0 DF EA 
16151     01 14 26 3A 
16155     41 3B 36 37 | 	byte	$fc, $e3, $df, $d3, $d0, $d0, $df, $ea, $01, $14, $26, $3a, $41, $3b, $36, $37
16159     31 36 2C 1D 
1615d     0A 09 04 09 
16161     14 0E 09 FD 
16165     EC E2 DF DA | 	byte	$31, $36, $2c, $1d, $0a, $09, $04, $09, $14, $0e, $09, $fd, $ec, $e2, $df, $da
16169     E0 E3 F2 04 
1616d     16 20 31 37 
16171     36 37 37 37 
16175     31 30 27 24 | 	byte	$e0, $e3, $f2, $04, $16, $20, $31, $37, $36, $37, $37, $37, $31, $30, $27, $24
16179     26 2A 36 40 
1617d     4D 54 5A 57 
16181     4B 44 49 43 
16185     3B 26 07 F0 | 	byte	$26, $2a, $36, $40, $4d, $54, $5a, $57, $4b, $44, $49, $43, $3b, $26, $07, $f0
16189     CC B3 A7 A6 
1618d     A7 A9 A9 AD 
16191     B7 C6 D3 CA 
16195     CC D3 DC E2 | 	byte	$cc, $b3, $a7, $a6, $a7, $a9, $a9, $ad, $b7, $c6, $d3, $ca, $cc, $d3, $dc, $e2
16199     EA E6 E6 DA 
1619d     DA DA DA E0 
161a1     E2 DC D4 D4 
161a5     DA DC E3 EA | 	byte	$ea, $e6, $e6, $da, $da, $da, $da, $e0, $e2, $dc, $d4, $d4, $da, $dc, $e3, $ea
161a9     EC F0 F0 F9 
161ad     01 01 03 FC 
161b1     ED E6 E8 E6 
161b5     FC 09 1E 2D | 	byte	$ec, $f0, $f0, $f9, $01, $01, $03, $fc, $ed, $e6, $e8, $e6, $fc, $09, $1e, $2d
161b9     27 2D 26 1E 
161bd     21 1E 2A 34 
161c1     43 4B 54 4F 
161c5     3D 1E 03 ED | 	byte	$27, $2d, $26, $1e, $21, $1e, $2a, $34, $43, $4b, $54, $4f, $3d, $1e, $03, $ed
161c9     E0 CF CC C9 
161cd     C9 CA DC EA 
161d1     FF 14 26 2D 
161d5     34 30 34 2D | 	byte	$e0, $cf, $cc, $c9, $c9, $ca, $dc, $ea, $ff, $14, $26, $2d, $34, $30, $34, $2d
161d9     21 07 F7 ED 
161dd     D4 D3 CF CA 
161e1     CA C0 AF A6 
161e5     AC AF C3 CC | 	byte	$21, $07, $f7, $ed, $d4, $d3, $cf, $ca, $ca, $c0, $af, $a6, $ac, $af, $c3, $cc
161e9     E0 F2 FD 09 
161ed     07 F6 E3 D4 
161f1     BF BD BC BF 
161f5     C3 CF CA C3 | 	byte	$e0, $f2, $fd, $09, $07, $f6, $e3, $d4, $bf, $bd, $bc, $bf, $c3, $cf, $ca, $c3
161f9     C6 C9 CC D6 
161fd     E3 EA F6 01 
16201     10 1E 21 1E 
16205     14 04 F7 F0 | 	byte	$c6, $c9, $cc, $d6, $e3, $ea, $f6, $01, $10, $1e, $21, $1e, $14, $04, $f7, $f0
16209     EA ED F6 F6 
1620d     EA EA E8 EC 
16211     F2 F7 FF 0A 
16215     16 26 37 40 | 	byte	$ea, $ed, $f6, $f6, $ea, $ea, $e8, $ec, $f2, $f7, $ff, $0a, $16, $26, $37, $40
16219     37 27 10 F9 
1621d     E2 D9 C9 AC 
16221     94 83 80 80 
16225     80 80 83 8F | 	byte	$37, $27, $10, $f9, $e2, $d9, $c9, $ac, $94, $83, $80, $80, $80, $80, $83, $8f
16229     98 92 98 A0 
1622d     A0 96 90 92 
16231     83 86 8A 98 
16235     AD BD C0 D0 | 	byte	$98, $92, $98, $a0, $a0, $96, $90, $92, $83, $86, $8a, $98, $ad, $bd, $c0, $d0
16239     DA F0 FF 16 
1623d     26 36 43 47 
16241     49 40 27 0A 
16245     F7 E6 D9 D9 | 	byte	$da, $f0, $ff, $16, $26, $36, $43, $47, $49, $40, $27, $0a, $f7, $e6, $d9, $d9
16249     D9 E3 E2 E8 
1624d     F3 01 0E 1D 
16251     16 16 0E 13 
16255     16 24 2A 20 | 	byte	$d9, $e3, $e2, $e8, $f3, $01, $0e, $1d, $16, $16, $0e, $13, $16, $24, $2a, $20
16259     27 1E 18 07 
1625d     FC F9 EC E8 
16261     CC CF C9 CF 
16265     DA EA 00 10 | 	byte	$27, $1e, $18, $07, $fc, $f9, $ec, $e8, $cc, $cf, $c9, $cf, $da, $ea, $00, $10
16269     27 3A 4B 51 
1626d     53 49 47 34 
16271     34 27 2C 2C 
16275     1A 1E 14 1A | 	byte	$27, $3a, $4b, $51, $53, $49, $47, $34, $34, $27, $2c, $2c, $1a, $1e, $14, $1a
16279     26 30 40 54 
1627d     64 6A 71 6A 
16281     5A 40 24 04 
16285     F0 D3 BD B5 | 	byte	$26, $30, $40, $54, $64, $6a, $71, $6a, $5a, $40, $24, $04, $f0, $d3, $bd, $b5
16289     B1 AF A6 A6 
1628d     A7 A6 A6 A9 
16291     B5 BD CC DF 
16295     ED F2 F0 E6 | 	byte	$b1, $af, $a6, $a6, $a7, $a6, $a6, $a9, $b5, $bd, $cc, $df, $ed, $f2, $f0, $e6
16299     E8 E0 E3 E6 
1629d     F2 F0 EA EC 
162a1     E2 E0 E2 E2 
162a5     E3 E3 DF E0 | 	byte	$e8, $e0, $e3, $e6, $f2, $f0, $ea, $ec, $e2, $e0, $e2, $e2, $e3, $e3, $df, $e0
162a9     E2 F2 F9 F9 
162ad     FD FD FF 00 
162b1     01 0A 13 13 
162b5     09 04 07 09 | 	byte	$e2, $f2, $f9, $f9, $fd, $fd, $ff, $00, $01, $0a, $13, $13, $09, $04, $07, $09
162b9     13 1D 2C 3D 
162bd     47 5A 59 4D 
162c1     37 20 0D F7 
162c5     E6 E2 E3 E2 | 	byte	$13, $1d, $2c, $3d, $47, $5a, $59, $4d, $37, $20, $0d, $f7, $e6, $e2, $e3, $e2
162c9     E2 E3 E2 ED 
162cd     FD 03 16 2A 
162d1     36 4B 57 6A 
162d5     66 68 4F 34 | 	byte	$e2, $e3, $e2, $ed, $fd, $03, $16, $2a, $36, $4b, $57, $6a, $66, $68, $4f, $34
162d9     14 EA D0 BC 
162dd     AC 98 8F 8F 
162e1     9C AC BF D6 
162e5     E2 F0 F7 FF | 	byte	$14, $ea, $d0, $bc, $ac, $98, $8f, $8f, $9c, $ac, $bf, $d6, $e2, $f0, $f7, $ff
162e9     FF FF F6 EA 
162ed     DF D4 C5 C9 
162f1     C5 B7 B7 AF 
162f5     A7 A2 A9 AD | 	byte	$ff, $ff, $f6, $ea, $df, $d4, $c5, $c9, $c5, $b7, $b7, $af, $a7, $a2, $a9, $ad
162f9     BF CF DF F2 
162fd     FC 14 14 24 
16301     27 27 1E 1A 
16305     13 0A 00 F3 | 	byte	$bf, $cf, $df, $f2, $fc, $14, $14, $24, $27, $27, $1e, $1a, $13, $0a, $00, $f3
16309     DF CF D0 D0 
1630d     D6 E2 F6 03 
16311     14 2C 41 4D 
16315     49 4D 41 36 | 	byte	$df, $cf, $d0, $d0, $d6, $e2, $f6, $03, $14, $2c, $41, $4d, $49, $4d, $41, $36
16319     18 FC D3 B1 
1631d     94 80 80 80 
16321     80 80 80 80 
16325     80 80 80 80 | 	byte	$18, $fc, $d3, $b1, $94, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
16329     89 98 9D A2 
1632d     A2 A2 A3 AD 
16331     AF B3 B9 C3 
16335     D4 EC FD 0D | 	byte	$89, $98, $9d, $a2, $a2, $a2, $a3, $ad, $af, $b3, $b9, $c3, $d4, $ec, $fd, $0d
16339     10 1E 1D 20 
1633d     26 1D 10 0A 
16341     00 F7 F2 ED 
16345     F3 F9 01 04 | 	byte	$10, $1e, $1d, $20, $26, $1d, $10, $0a, $00, $f7, $f2, $ed, $f3, $f9, $01, $04
16349     01 F7 F7 F0 
1634d     F3 F9 00 04 
16351     07 13 13 1D 
16355     18 10 09 FD | 	byte	$01, $f7, $f7, $f0, $f3, $f9, $00, $04, $07, $13, $13, $1d, $18, $10, $09, $fd
16359     ED DC D4 BF 
1635d     B9 B7 BC C9 
16361     DF F3 00 1D 
16365     2C 41 54 60 | 	byte	$ed, $dc, $d4, $bf, $b9, $b7, $bc, $c9, $df, $f3, $00, $1d, $2c, $41, $54, $60
16369     60 63 53 43 
1636d     30 21 1D 18 
16371     1D 1D 1E 20 
16375     21 2C 3B 4D | 	byte	$60, $63, $53, $43, $30, $21, $1d, $18, $1d, $1d, $1e, $20, $21, $2c, $3b, $4d
16379     60 6C 6C 6A 
1637d     60 53 43 24 
16381     09 ED DC CF 
16385     CA AD 9D 92 | 	byte	$60, $6c, $6c, $6a, $60, $53, $43, $24, $09, $ed, $dc, $cf, $ca, $ad, $9d, $92
16389     90 94 96 A2 
1638d     B3 C5 D6 E2 
16391     F0 F9 FD FD 
16395     FF FD FF FD | 	byte	$90, $94, $96, $a2, $b3, $c5, $d6, $e2, $f0, $f9, $fd, $fd, $ff, $fd, $ff, $fd
16399     F9 F9 FC F0 
1639d     E2 CC BC B3 
163a1     B1 B7 C6 CF 
163a5     DC E2 EA F9 | 	byte	$f9, $f9, $fc, $f0, $e2, $cc, $bc, $b3, $b1, $b7, $c6, $cf, $dc, $e2, $ea, $f9
163a9     04 0E 18 18 
163ad     10 04 09 FC 
163b1     F9 FC 04 0D 
163b5     1D 26 36 31 | 	byte	$04, $0e, $18, $18, $10, $04, $09, $fc, $f9, $fc, $04, $0d, $1d, $26, $36, $31
163b9     31 30 27 20 
163bd     14 10 04 01 
163c1     FD F3 F7 F7 
163c5     01 01 03 01 | 	byte	$31, $30, $27, $20, $14, $10, $04, $01, $fd, $f3, $f7, $f7, $01, $01, $03, $01
163c9     01 0D 1A 2D 
163cd     4B 51 54 49 
163d1     41 3A 3B 3B 
163d5     37 36 26 18 | 	byte	$01, $0d, $1a, $2d, $4b, $51, $54, $49, $41, $3a, $3b, $3b, $37, $36, $26, $18
163d9     0A F3 E2 D0 
163dd     CA C3 C5 C5 
163e1     D3 D9 E3 E6 
163e5     EA EA EC E6 | 	byte	$0a, $f3, $e2, $d0, $ca, $c3, $c5, $c5, $d3, $d9, $e3, $e6, $ea, $ea, $ec, $e6
163e9     E2 CC BD AD 
163ed     A0 A6 A6 A3 
163f1     A6 A6 A6 A9 
163f5     BC C9 E6 F2 | 	byte	$e2, $cc, $bd, $ad, $a0, $a6, $a6, $a3, $a6, $a6, $a6, $a9, $bc, $c9, $e6, $f2
163f9     FD 03 0D 1D 
163fd     26 36 3B 2D 
16401     1A 01 E6 C9 
16405     B7 B5 B9 C5 | 	byte	$fd, $03, $0d, $1d, $26, $36, $3b, $2d, $1a, $01, $e6, $c9, $b7, $b5, $b9, $c5
16409     DA EC 03 18 
1640d     2D 3D 4F 49 
16411     49 43 3A 36 
16415     26 14 07 03 | 	byte	$da, $ec, $03, $18, $2d, $3d, $4f, $49, $49, $43, $3a, $36, $26, $14, $07, $03
16419     F7 DA B5 80 
1641d     80 80 80 80 
16421     80 80 80 80 
16425     80 80 94 A2 | 	byte	$f7, $da, $b5, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $94, $a2
16429     AF B7 B7 B9 
1642d     B3 B5 B7 CA 
16431     D9 E8 F3 F3 
16435     F7 FC 01 07 | 	byte	$af, $b7, $b7, $b9, $b3, $b5, $b7, $ca, $d9, $e8, $f3, $f3, $f7, $fc, $01, $07
16439     09 04 0D 0A 
1643d     0D 0E 04 09 
16441     09 0A 03 03 
16445     F7 EA D9 CF | 	byte	$09, $04, $0d, $0a, $0d, $0e, $04, $09, $09, $0a, $03, $03, $f7, $ea, $d9, $cf
16449     D4 E6 F6 01 
1644d     09 FC F3 F0 
16451     F6 F9 00 FF 
16455     F0 E3 CC BF | 	byte	$d4, $e6, $f6, $01, $09, $fc, $f3, $f0, $f6, $f9, $00, $ff, $f0, $e3, $cc, $bf
16459     B9 BF C5 DA 
1645d     E8 FF 18 2D 
16461     41 57 57 57 
16465     4D 40 30 24 | 	byte	$b9, $bf, $c5, $da, $e8, $ff, $18, $2d, $41, $57, $57, $57, $4d, $40, $30, $24
16469     1A 10 0E 10 
1646d     14 21 21 20 
16471     1E 1E 26 3A 
16475     3A 4B 51 4B | 	byte	$1a, $10, $0e, $10, $14, $21, $21, $20, $1e, $1e, $26, $3a, $3a, $4b, $51, $4b
16479     44 49 4F 5E 
1647d     6A 68 4B 1D 
16481     F0 B3 9A 89 
16485     89 89 8C A2 | 	byte	$44, $49, $4f, $5e, $6a, $68, $4b, $1d, $f0, $b3, $9a, $89, $89, $89, $8c, $a2
16489     AD C5 DA F2 
1648d     F2 F7 FD 00 
16491     0E 18 1D 16 
16495     0E 07 F3 EA | 	byte	$ad, $c5, $da, $f2, $f2, $f7, $fd, $00, $0e, $18, $1d, $16, $0e, $07, $f3, $ea
16499     D6 BD AF A3 
1649d     A7 B3 C3 DA 
164a1     E6 E3 DF EC 
164a5     F9 09 14 13 | 	byte	$d6, $bd, $af, $a3, $a7, $b3, $c3, $da, $e6, $e3, $df, $ec, $f9, $09, $14, $13
164a9     16 0D FF E8 
164ad     E3 EC F3 07 
164b1     0E 0E 13 16 
164b5     18 18 14 13 | 	byte	$16, $0d, $ff, $e8, $e3, $ec, $f3, $07, $0e, $0e, $13, $16, $18, $18, $14, $13
164b9     0E 0E 13 18 
164bd     21 24 21 20 
164c1     20 20 21 21 
164c5     18 14 10 18 | 	byte	$0e, $0e, $13, $18, $21, $24, $21, $20, $20, $20, $21, $21, $18, $14, $10, $18
164c9     18 1A 1E 14 
164cd     09 10 18 2D 
164d1     41 49 44 36 
164d5     26 10 03 09 | 	byte	$18, $1a, $1e, $14, $09, $10, $18, $2d, $41, $49, $44, $36, $26, $10, $03, $09
164d9     0A 0D 1A 27 
164dd     27 26 1E 10 
164e1     00 F6 E6 D0 
164e5     C9 C3 B7 B5 | 	byte	$0a, $0d, $1a, $27, $27, $26, $1e, $10, $00, $f6, $e6, $d0, $c9, $c3, $b7, $b5
164e9     A7 A3 A0 A2 
164ed     A2 A2 A6 A6 
164f1     A7 AF B7 D4 
164f5     E2 F0 F3 FC | 	byte	$a7, $a3, $a0, $a2, $a2, $a2, $a6, $a6, $a7, $af, $b7, $d4, $e2, $f0, $f3, $fc
164f9     09 1A 1E 20 
164fd     1D 0A F6 E2 
16501     D3 D4 DC DF 
16505     EA F3 F9 0D | 	byte	$09, $1a, $1e, $20, $1d, $0a, $f6, $e2, $d3, $d4, $dc, $df, $ea, $f3, $f9, $0d
16509     1D 2D 2A 30 
1650d     27 2C 27 26 
16511     26 16 14 0E 
16515     07 F2 E3 D4 | 	byte	$1d, $2d, $2a, $30, $27, $2c, $27, $26, $26, $16, $14, $0e, $07, $f2, $e3, $d4
16519     C3 A9 92 80 
1651d     80 80 80 80 
16521     80 80 80 8F 
16525     A2 B5 C3 C6 | 	byte	$c3, $a9, $92, $80, $80, $80, $80, $80, $80, $80, $80, $8f, $a2, $b5, $c3, $c6
16529     C9 B9 B9 B3 
1652d     B7 B5 B5 BD 
16531     C5 D3 E2 F6 
16535     FC 0A 0A 0D | 	byte	$c9, $b9, $b9, $b3, $b7, $b5, $b5, $bd, $c5, $d3, $e2, $f6, $fc, $0a, $0a, $0d
16539     10 14 21 21 
1653d     24 1A 18 0A 
16541     04 F6 E8 DA 
16545     D3 D0 D0 D6 | 	byte	$10, $14, $21, $21, $24, $1a, $18, $0a, $04, $f6, $e8, $da, $d3, $d0, $d0, $d6
16549     D9 D3 CF C3 
1654d     C3 CF DA EA 
16551     ED F0 F2 DC 
16555     D9 D4 DA E3 | 	byte	$d9, $d3, $cf, $c3, $c3, $cf, $da, $ea, $ed, $f0, $f2, $dc, $d9, $d4, $da, $e3
16559     F6 01 14 21 
1655d     30 36 36 2D 
16561     26 20 1E 20 
16565     27 30 31 3A | 	byte	$f6, $01, $14, $21, $30, $36, $36, $2d, $26, $20, $1e, $20, $27, $30, $31, $3a
16569     3B 36 2D 26 
1656d     21 16 0E 0D 
16571     13 18 20 21 
16575     20 1E 24 31 | 	byte	$3b, $36, $2d, $26, $21, $16, $0e, $0d, $13, $18, $20, $21, $20, $1e, $24, $31
16579     47 4F 53 51 
1657d     49 2C 10 00 
16581     E6 D0 BF B1 
16585     B7 C3 D4 DF | 	byte	$47, $4f, $53, $51, $49, $2c, $10, $00, $e6, $d0, $bf, $b1, $b7, $c3, $d4, $df
16589     E8 F0 F7 04 
1658d     07 14 18 0D 
16591     09 F7 ED E0 
16595     D4 CF CC C9 | 	byte	$e8, $f0, $f7, $04, $07, $14, $18, $0d, $09, $f7, $ed, $e0, $d4, $cf, $cc, $c9
16599     CA CC D6 DC 
1659d     E3 E3 E3 E3 
165a1     DC E3 ED FC 
165a5     00 07 0E F6 | 	byte	$ca, $cc, $d6, $dc, $e3, $e3, $e3, $e3, $dc, $e3, $ed, $fc, $00, $07, $0e, $f6
165a9     F3 F0 F9 F3 
165ad     F6 F3 F3 F3 
165b1     F6 F6 F7 FC 
165b5     01 0E 1A 2D | 	byte	$f3, $f0, $f9, $f3, $f6, $f3, $f3, $f3, $f6, $f6, $f7, $fc, $01, $0e, $1a, $2d
165b9     43 44 4D 54 
165bd     54 51 4B 3D 
165c1     2D 16 03 ED 
165c5     E3 DC E3 F0 | 	byte	$43, $44, $4d, $54, $54, $51, $4b, $3d, $2d, $16, $03, $ed, $e3, $dc, $e3, $f0
165c9     F3 F9 04 14 
165cd     27 3B 40 40 
165d1     41 2C 21 18 
165d5     1D 1E 21 24 | 	byte	$f3, $f9, $04, $14, $27, $3b, $40, $40, $41, $2c, $21, $18, $1d, $1e, $21, $24
165d9     27 27 2C 30 
165dd     34 2C 2D 21 
165e1     18 07 F7 E2 
165e5     CF C5 B9 BD | 	byte	$27, $27, $2c, $30, $34, $2c, $2d, $21, $18, $07, $f7, $e2, $cf, $c5, $b9, $bd
165e9     BD BF C0 BC 
165ed     B7 AF B5 B9 
165f1     C0 C9 C6 CA 
165f5     C6 C9 D3 E3 | 	byte	$bd, $bf, $c0, $bc, $b7, $af, $b5, $b9, $c0, $c9, $c6, $ca, $c6, $c9, $d3, $e3
165f9     F0 03 0D 0A 
165fd     0D 0D 10 14 
16601     10 09 01 F9 
16605     F6 ED F7 F6 | 	byte	$f0, $03, $0d, $0a, $0d, $0d, $10, $14, $10, $09, $01, $f9, $f6, $ed, $f7, $f6
16609     F7 00 FF 0E 
1660d     10 16 18 0E 
16611     0E 03 FF F3 
16615     EA DF D3 C6 | 	byte	$f7, $00, $ff, $0e, $10, $16, $18, $0e, $0e, $03, $ff, $f3, $ea, $df, $d3, $c6
16619     C0 BC C6 CA 
1661d     C0 B3 9C 8F 
16621     8A 96 9C B3 
16625     B5 AD A3 98 | 	byte	$c0, $bc, $c6, $ca, $c0, $b3, $9c, $8f, $8a, $96, $9c, $b3, $b5, $ad, $a3, $98
16629     9C A2 AD B5 
1662d     BF C0 D3 D9 
16631     E8 EC FD 03 
16635     04 10 10 16 | 	byte	$9c, $a2, $ad, $b5, $bf, $c0, $d3, $d9, $e8, $ec, $fd, $03, $04, $10, $10, $16
16639     21 21 24 26 
1663d     20 13 07 FD 
16641     ED D0 BC A9 
16645     A3 A0 98 9A | 	byte	$21, $21, $24, $26, $20, $13, $07, $fd, $ed, $d0, $bc, $a9, $a3, $a0, $98, $9a
16649     9C 9A A7 B7 
1664d     C6 E3 F0 F3 
16651     F2 F2 FD 01 
16655     10 18 18 16 | 	byte	$9c, $9a, $a7, $b7, $c6, $e3, $f0, $f3, $f2, $f2, $fd, $01, $10, $18, $18, $16
16659     09 07 07 04 
1665d     09 0E 16 20 
16661     2D 34 43 49 
16665     47 49 3D 31 | 	byte	$09, $07, $07, $04, $09, $0e, $16, $20, $2d, $34, $43, $49, $47, $49, $3d, $31
16669     27 20 14 0A 
1666d     01 FC F9 F9 
16671     F9 00 07 07 
16675     09 14 24 37 | 	byte	$27, $20, $14, $0a, $01, $fc, $f9, $f9, $f9, $00, $07, $07, $09, $14, $24, $37
16679     41 49 3B 3A 
1667d     3B 3A 40 44 
16681     44 37 20 09 
16685     F0 DA D3 D0 | 	byte	$41, $49, $3b, $3a, $3b, $3a, $40, $44, $44, $37, $20, $09, $f0, $da, $d3, $d0
16689     D9 DF DF E6 
1668d     E3 EC EC ED 
16691     ED F6 F6 FC 
16695     03 FF FF F6 | 	byte	$d9, $df, $df, $e6, $e3, $ec, $ec, $ed, $ed, $f6, $f6, $fc, $03, $ff, $ff, $f6
16699     ED E3 DA D4 
1669d     D0 CC CA CA 
166a1     D6 E6 EC F6 
166a5     F0 E0 DC DF | 	byte	$ed, $e3, $da, $d4, $d0, $cc, $ca, $ca, $d6, $e6, $ec, $f6, $f0, $e0, $dc, $df
166a9     E3 ED F2 F6 
166ad     F6 EC F0 F2 
166b1     FF 10 21 34 
166b5     41 4F 59 5E | 	byte	$e3, $ed, $f2, $f6, $f6, $ec, $f0, $f2, $ff, $10, $21, $34, $41, $4f, $59, $5e
166b9     60 60 5A 51 
166bd     43 34 24 1D 
166c1     04 F7 E6 DC 
166c5     D4 D9 DC E3 | 	byte	$60, $60, $5a, $51, $43, $34, $24, $1d, $04, $f7, $e6, $dc, $d4, $d9, $dc, $e3
166c9     F3 00 0D 18 
166cd     1A 21 1A 16 
166d1     10 14 20 2A 
166d5     31 37 31 2D | 	byte	$f3, $00, $0d, $18, $1a, $21, $1a, $16, $10, $14, $20, $2a, $31, $37, $31, $2d
166d9     20 1E 1E 20 
166dd     2A 2C 30 37 
166e1     37 3A 36 2C 
166e5     1A 00 EC DC | 	byte	$20, $1e, $1e, $20, $2a, $2c, $30, $37, $37, $3a, $36, $2c, $1a, $00, $ec, $dc
166e9     CA C3 B7 AC 
166ed     9A 92 8C 8A 
166f1     92 A0 AF BD 
166f5     CC E3 FC 14 | 	byte	$ca, $c3, $b7, $ac, $9a, $92, $8c, $8a, $92, $a0, $af, $bd, $cc, $e3, $fc, $14
166f9     18 1E 21 24 
166fd     30 30 26 18 
16701     04 F3 E0 D6 
16705     CC C9 CC D6 | 	byte	$18, $1e, $21, $24, $30, $30, $26, $18, $04, $f3, $e0, $d6, $cc, $c9, $cc, $d6
16709     E3 EA EA ED 
1670d     F6 F6 FD FD 
16711     FD FF 01 03 
16715     01 FF F2 ED | 	byte	$e3, $ea, $ea, $ed, $f6, $f6, $fd, $fd, $fd, $ff, $01, $03, $01, $ff, $f2, $ed
16719     E8 E6 E2 E3 
1671d     E2 DF D9 CA 
16721     C0 B9 A9 96 
16725     92 94 98 A3 | 	byte	$e8, $e6, $e2, $e3, $e2, $df, $d9, $ca, $c0, $b9, $a9, $96, $92, $94, $98, $a3
16729     AD B9 BF C6 
1672d     C9 D6 D6 E8 
16731     F0 F0 FC 00 
16735     04 0D 14 1D | 	byte	$ad, $b9, $bf, $c6, $c9, $d6, $d6, $e8, $f0, $f0, $fc, $00, $04, $0d, $14, $1d
16739     1A 1D 18 0E 
1673d     FD F6 E3 D6 
16741     BF AC 9D 8F 
16745     8A 8F 98 A0 | 	byte	$1a, $1d, $18, $0e, $fd, $f6, $e3, $d6, $bf, $ac, $9d, $8f, $8a, $8f, $98, $a0
16749     B1 B9 C9 DF 
1674d     E8 EA E3 E6 
16751     E8 E8 F0 F9 
16755     FF 04 0A 0D | 	byte	$b1, $b9, $c9, $df, $e8, $ea, $e3, $e6, $e8, $e8, $f0, $f9, $ff, $04, $0a, $0d
16759     14 16 1A 1D 
1675d     20 21 27 34 
16761     43 40 43 36 
16765     27 1D 13 10 | 	byte	$14, $16, $1a, $1d, $20, $21, $27, $34, $43, $40, $43, $36, $27, $1d, $13, $10
16769     09 01 F9 ED 
1676d     E2 DF D0 CF 
16771     DA E3 F7 09 
16775     20 37 4F 54 | 	byte	$09, $01, $f9, $ed, $e2, $df, $d0, $cf, $da, $e3, $f7, $09, $20, $37, $4f, $54
16779     5A 5A 5E 5D 
1677d     53 54 51 49 
16781     3B 3A 26 1A 
16785     0A FC EC E0 | 	byte	$5a, $5a, $5e, $5d, $53, $54, $51, $49, $3b, $3a, $26, $1a, $0a, $fc, $ec, $e0
16789     DC D6 DC E3 
1678d     EC EA EA F2 
16791     F0 FC 03 07 
16795     07 F9 EC DC | 	byte	$dc, $d6, $dc, $e3, $ec, $ea, $ea, $f2, $f0, $fc, $03, $07, $07, $f9, $ec, $dc
16799     D4 D0 CA CA 
1679d     CC CC D4 E2 
167a1     E3 D4 CF C9 
167a5     CA C6 D4 D9 | 	byte	$d4, $d0, $ca, $ca, $cc, $cc, $d4, $e2, $e3, $d4, $cf, $c9, $ca, $c6, $d4, $d9
167a9     E8 FC 03 13 
167ad     1E 21 2A 26 
167b1     30 2D 30 36 
167b5     37 3D 44 40 | 	byte	$e8, $fc, $03, $13, $1e, $21, $2a, $26, $30, $2d, $30, $36, $37, $3d, $44, $40
167b9     43 40 3A 36 
167bd     36 2A 1D 04 
167c1     F0 E2 CC C9 
167c5     CF DA EC F7 | 	byte	$43, $40, $3a, $36, $36, $2a, $1d, $04, $f0, $e2, $cc, $c9, $cf, $da, $ec, $f7
167c9     F7 FC 0A 0E 
167cd     0D 0E 0D 04 
167d1     09 0A 0A 0A 
167d5     0D 18 26 34 | 	byte	$f7, $fc, $0a, $0e, $0d, $0e, $0d, $04, $09, $0a, $0a, $0a, $0d, $18, $26, $34
167d9     3B 41 44 44 
167dd     49 4B 4D 51 
167e1     4F 41 36 2A 
167e5     1A 03 F3 E2 | 	byte	$3b, $41, $44, $44, $49, $4b, $4d, $51, $4f, $41, $36, $2a, $1a, $03, $f3, $e2
167e9     C9 B1 9D 98 
167ed     8C 8F 98 A7 
167f1     B7 C3 D3 DA 
167f5     F0 00 00 0A | 	byte	$c9, $b1, $9d, $98, $8c, $8f, $98, $a7, $b7, $c3, $d3, $da, $f0, $00, $00, $0a
167f9     10 07 00 F2 
167fd     F2 EC F3 F7 
16801     F9 F9 F3 F0 
16805     E8 D4 CF C9 | 	byte	$10, $07, $00, $f2, $f2, $ec, $f3, $f7, $f9, $f9, $f3, $f0, $e8, $d4, $cf, $c9
16809     C9 CF E0 E6 
1680d     F6 00 04 0A 
16811     14 14 16 0A 
16815     FD ED DC D6 | 	byte	$c9, $cf, $e0, $e6, $f6, $00, $04, $0a, $14, $14, $16, $0a, $fd, $ed, $dc, $d6
16819     D4 D9 DA E6 
1681d     EC F6 03 0D 
16821     04 F7 D4 B1 
16825     92 80 80 80 | 	byte	$d4, $d9, $da, $e6, $ec, $f6, $03, $0d, $04, $f7, $d4, $b1, $92, $80, $80, $80
16829     90 AD C6 E0 
1682d     E6 ED ED F2 
16831     F6 FD 03 09 
16835     0A 0E 0D FF | 	byte	$90, $ad, $c6, $e0, $e6, $ed, $ed, $f2, $f6, $fd, $03, $09, $0a, $0e, $0d, $ff
16839     EC DF D4 D3 
1683d     D6 D3 CC C3 
16841     BC AF AF B5 
16845     BC C3 C6 C3 | 	byte	$ec, $df, $d4, $d3, $d6, $d3, $cc, $c3, $bc, $af, $af, $b5, $bc, $c3, $c6, $c3
16849     C9 CA CF D0 
1684d     CA CC C9 C9 
16851     CF DA F3 01 
16855     1A 21 21 21 | 	byte	$c9, $ca, $cf, $d0, $ca, $cc, $c9, $c9, $cf, $da, $f3, $01, $1a, $21, $21, $21
16859     1D 14 13 13 
1685d     13 1E 1D 18 
16861     14 0A 0D 04 
16865     09 09 04 03 | 	byte	$1d, $14, $13, $13, $13, $1e, $1d, $18, $14, $0a, $0d, $04, $09, $09, $04, $03
16869     00 E3 CF BD 
1686d     BC C9 DC FF 
16871     18 31 4B 66 
16875     6C 6C 64 4F | 	byte	$00, $e3, $cf, $bd, $bc, $c9, $dc, $ff, $18, $31, $4b, $66, $6c, $6c, $64, $4f
16879     31 18 0E 09 
1687d     10 1D 2D 40 
16881     43 44 4F 51 
16885     4F 51 3A 21 | 	byte	$31, $18, $0e, $09, $10, $1d, $2d, $40, $43, $44, $4f, $51, $4f, $51, $3a, $21
16889     01 E6 D3 C5 
1688d     C5 CF DC E8 
16891     EC F6 F3 EA 
16895     E2 D3 D3 D6 | 	byte	$01, $e6, $d3, $c5, $c5, $cf, $dc, $e8, $ec, $f6, $f3, $ea, $e2, $d3, $d3, $d6
16899     DC E6 EC EA 
1689d     E0 E0 DF D6 
168a1     D0 D0 C6 C6 
168a5     CC D0 E2 F7 | 	byte	$dc, $e6, $ec, $ea, $e0, $e0, $df, $d6, $d0, $d0, $c6, $c6, $cc, $d0, $e2, $f7
168a9     04 16 18 1D 
168ad     1E 21 24 27 
168b1     2D 30 37 3B 
168b5     3B 3D 40 3B | 	byte	$04, $16, $18, $1d, $1e, $21, $24, $27, $2d, $30, $37, $3b, $3b, $3d, $40, $3b
168b9     34 2C 1A 0A 
168bd     01 F0 E0 D0 
168c1     CC D4 E0 F2 
168c5     FF 04 04 10 | 	byte	$34, $2c, $1a, $0a, $01, $f0, $e0, $d0, $cc, $d4, $e0, $f2, $ff, $04, $04, $10
168c9     16 16 13 13 
168cd     00 ED DF D4 
168d1     DC F2 0A 2A 
168d5     40 54 64 6E | 	byte	$16, $16, $13, $13, $00, $ed, $df, $d4, $dc, $f2, $0a, $2a, $40, $54, $64, $6e
168d9     6C 6A 5A 4F 
168dd     37 2C 1D 14 
168e1     0D 0E 0A 0D 
168e5     10 14 0E 03 | 	byte	$6c, $6a, $5a, $4f, $37, $2c, $1d, $14, $0d, $0e, $0a, $0d, $10, $14, $0e, $03
168e9     F7 DF C0 B5 
168ed     A7 A9 AF BF 
168f1     CC DC ED F2 
168f5     F3 EC D6 C9 | 	byte	$f7, $df, $c0, $b5, $a7, $a9, $af, $bf, $cc, $dc, $ed, $f2, $f3, $ec, $d6, $c9
168f9     B3 B7 BF D6 
168fd     ED FF 09 07 
16901     00 F9 F3 F6 
16905     F0 E8 EA EC | 	byte	$b3, $b7, $bf, $d6, $ed, $ff, $09, $07, $00, $f9, $f3, $f6, $f0, $e8, $ea, $ec
16909     F0 F3 F6 F6 
1690d     F6 F2 F2 F2 
16911     ED F2 F6 ED 
16915     E3 E0 E8 F2 | 	byte	$f0, $f3, $f6, $f6, $f6, $f2, $f2, $f2, $ed, $f2, $f6, $ed, $e3, $e0, $e8, $f2
16919     FF 0E 1A 24 
1691d     30 24 14 01 
16921     E3 CA A6 90 
16925     84 86 96 A6 | 	byte	$ff, $0e, $1a, $24, $30, $24, $14, $01, $e3, $ca, $a6, $90, $84, $86, $96, $a6
16929     B1 BF CC D9 
1692d     EA F7 00 04 
16931     0D 09 F3 E3 
16935     D6 C5 B9 BF | 	byte	$b1, $bf, $cc, $d9, $ea, $f7, $00, $04, $0d, $09, $f3, $e3, $d6, $c5, $b9, $bf
16939     BF CA D9 DF 
1693d     E2 DF CC C3 
16941     BC C0 C6 D9 
16945     DF E8 E8 E2 | 	byte	$bf, $ca, $d9, $df, $e2, $df, $cc, $c3, $bc, $c0, $c6, $d9, $df, $e8, $e8, $e2
16949     DA D4 C6 BC 
1694d     B5 B9 CA DF 
16951     EC 00 03 01 
16955     04 04 07 0D | 	byte	$da, $d4, $c6, $bc, $b5, $b9, $ca, $df, $ec, $00, $03, $01, $04, $04, $07, $0d
16959     13 09 0A 03 
1695d     FD F7 F6 F9 
16961     FC FF 04 0A 
16965     FC F3 ED E2 | 	byte	$13, $09, $0a, $03, $fd, $f7, $f6, $f9, $fc, $ff, $04, $0a, $fc, $f3, $ed, $e2
16969     D6 D6 DF F2 
1696d     0D 27 44 5A 
16971     66 59 4D 34 
16975     27 0E FF FC | 	byte	$d6, $d6, $df, $f2, $0d, $27, $44, $5a, $66, $59, $4d, $34, $27, $0e, $ff, $fc
16979     FC 04 16 31 
1697d     40 49 57 5E 
16981     74 77 77 68 
16985     53 3B 24 04 | 	byte	$fc, $04, $16, $31, $40, $49, $57, $5e, $74, $77, $77, $68, $53, $3b, $24, $04
16989     EC D3 C3 AC 
1698d     AD B3 BD CC 
16991     DA E6 EA EA 
16995     F2 F3 F2 F0 | 	byte	$ec, $d3, $c3, $ac, $ad, $b3, $bd, $cc, $da, $e6, $ea, $ea, $f2, $f3, $f2, $f0
16999     F0 F6 F9 ED 
1699d     EC E6 E8 E2 
169a1     D9 DA D6 D9 
169a5     E0 EC F9 00 | 	byte	$f0, $f6, $f9, $ed, $ec, $e6, $e8, $e2, $d9, $da, $d6, $d9, $e0, $ec, $f9, $00
169a9     0D 14 26 2A 
169ad     34 37 3A 3D 
169b1     3D 3D 36 27 
169b5     18 01 F6 EA | 	byte	$0d, $14, $26, $2a, $34, $37, $3a, $3d, $3d, $3d, $36, $27, $18, $01, $f6, $ea
169b9     DC DA DC DF 
169bd     E0 D6 DF EA 
169c1     FC 07 1A 2A 
169c5     3B 3D 34 2C | 	byte	$dc, $da, $dc, $df, $e0, $d6, $df, $ea, $fc, $07, $1a, $2a, $3b, $3d, $34, $2c
169c9     10 FD E2 DA 
169cd     D9 DA F6 0A 
169d1     21 3B 47 49 
169d5     4F 51 49 41 | 	byte	$10, $fd, $e2, $da, $d9, $da, $f6, $0a, $21, $3b, $47, $49, $4f, $51, $49, $41
169d9     3A 34 34 2D 
169dd     2A 21 16 0D 
169e1     0A 0A 0E 1D 
169e5     27 2D 27 1A | 	byte	$3a, $34, $34, $2d, $2a, $21, $16, $0d, $0a, $0a, $0e, $1d, $27, $2d, $27, $1a
169e9     04 F3 DF CC 
169ed     C6 C9 D4 CF 
169f1     C6 BD BF AF 
169f5     AC A7 B5 C5 | 	byte	$04, $f3, $df, $cc, $c6, $c9, $d4, $cf, $c6, $bd, $bf, $af, $ac, $a7, $b5, $c5
169f9     DC F2 FC FF 
169fd     FD FD FD 03 
16a01     0D 0A 0A 0A 
16a05     09 00 F6 EA | 	byte	$dc, $f2, $fc, $ff, $fd, $fd, $fd, $03, $0d, $0a, $0a, $0a, $09, $00, $f6, $ea
16a09     D3 C3 C0 BC 
16a0d     C9 D9 E8 F9 
16a11     F9 FC FC F9 
16a15     FF 09 18 2C | 	byte	$d3, $c3, $c0, $bc, $c9, $d9, $e8, $f9, $f9, $fc, $fc, $f9, $ff, $09, $18, $2c
16a19     30 2C 18 00 
16a1d     F0 D9 CC C6 
16a21     C5 C5 CA C5 
16a25     CC C6 C0 C9 | 	byte	$30, $2c, $18, $00, $f0, $d9, $cc, $c6, $c5, $c5, $ca, $c5, $cc, $c6, $c0, $c9
16a29     D6 EA FC 07 
16a2d     03 FF F7 EC 
16a31     DA CA B7 A9 
16a35     A6 A0 A3 AD | 	byte	$d6, $ea, $fc, $07, $03, $ff, $f7, $ec, $da, $ca, $b7, $a9, $a6, $a0, $a3, $ad
16a39     B7 C6 C3 C0 
16a3d     C6 CA D9 F0 
16a41     F9 00 07 04 
16a45     F0 DC D3 CC | 	byte	$b7, $c6, $c3, $c0, $c6, $ca, $d9, $f0, $f9, $00, $07, $04, $f0, $dc, $d3, $cc
16a49     CA CF CF CF 
16a4d     DA DA E2 E2 
16a51     DF E0 DF DF 
16a55     E0 E6 EA ED | 	byte	$ca, $cf, $cf, $cf, $da, $da, $e2, $e2, $df, $e0, $df, $df, $e0, $e6, $ea, $ed
16a59     F6 F9 03 04 
16a5d     09 0A FF F3 
16a61     F0 F0 F0 F6 
16a65     F7 FC FC 07 | 	byte	$f6, $f9, $03, $04, $09, $0a, $ff, $f3, $f0, $f0, $f0, $f6, $f7, $fc, $fc, $07
16a69     0E 1A 26 37 
16a6d     3B 3B 27 1E 
16a71     1A 09 09 0A 
16a75     0A 0E 1A 20 | 	byte	$0e, $1a, $26, $37, $3b, $3b, $27, $1e, $1a, $09, $09, $0a, $0a, $0e, $1a, $20
16a79     31 40 49 59 
16a7d     60 6E 71 6A 
16a81     59 47 37 2A 
16a85     18 07 F3 E0 | 	byte	$31, $40, $49, $59, $60, $6e, $71, $6a, $59, $47, $37, $2a, $18, $07, $f3, $e0
16a89     CA B7 B1 A9 
16a8d     BD D9 EC FD 
16a91     FD FD FD 00 
16a95     04 07 09 07 | 	byte	$ca, $b7, $b1, $a9, $bd, $d9, $ec, $fd, $fd, $fd, $fd, $00, $04, $07, $09, $07
16a99     F6 EA DF D9 
16a9d     DC DC DA DC 
16aa1     DF EA F9 FF 
16aa5     0E 1D 1E 2D | 	byte	$f6, $ea, $df, $d9, $dc, $dc, $da, $dc, $df, $ea, $f9, $ff, $0e, $1d, $1e, $2d
16aa9     2D 30 34 36 
16aad     3A 37 34 2A 
16ab1     13 FD EA CA 
16ab5     B9 B1 B7 B5 | 	byte	$2d, $30, $34, $36, $3a, $37, $34, $2a, $13, $fd, $ea, $ca, $b9, $b1, $b7, $b5
16ab9     B9 CA D6 E6 
16abd     00 14 24 40 
16ac1     57 5D 44 2D 
16ac5     1A 0E 07 01 | 	byte	$b9, $ca, $d6, $e6, $00, $14, $24, $40, $57, $5d, $44, $2d, $1a, $0e, $07, $01
16ac9     FC FD FD 01 
16acd     09 10 18 1E 
16ad1     1D 21 27 2C 
16ad5     34 36 36 3B | 	byte	$fc, $fd, $fd, $01, $09, $10, $18, $1e, $1d, $21, $27, $2c, $34, $36, $36, $3b
16ad9     3A 3A 30 21 
16add     16 0E 0A 0D 
16ae1     0E 20 1E 20 
16ae5     20 18 13 14 | 	byte	$3a, $3a, $30, $21, $16, $0e, $0a, $0d, $0e, $20, $1e, $20, $20, $18, $13, $14
16ae9     0E 04 FD EC 
16aed     C9 B9 A2 A3 
16af1     A3 B5 C9 DC 
16af5     E0 E8 F0 F0 | 	byte	$0e, $04, $fd, $ec, $c9, $b9, $a2, $a3, $a3, $b5, $c9, $dc, $e0, $e8, $f0, $f0
16af9     F3 F7 F7 FD 
16afd     03 FF 00 FC 
16b01     FC F9 F2 ED 
16b05     E2 DF CF CA | 	byte	$f3, $f7, $f7, $fd, $03, $ff, $00, $fc, $fc, $f9, $f2, $ed, $e2, $df, $cf, $ca
16b09     C3 C9 D0 E0 
16b0d     E6 F0 F6 F6 
16b11     00 0A 18 27 
16b15     2D 2A 13 FD | 	byte	$c3, $c9, $d0, $e0, $e6, $f0, $f6, $f6, $00, $0a, $18, $27, $2d, $2a, $13, $fd
16b19     E6 DA D3 CF 
16b1d     CF D0 D3 E3 
16b21     F0 FC FD FD 
16b25     FD 00 F3 F2 | 	byte	$e6, $da, $d3, $cf, $cf, $d0, $d3, $e3, $f0, $fc, $fd, $fd, $fd, $00, $f3, $f2
16b29     F7 F9 F7 ED 
16b2d     E2 D0 BD AF 
16b31     98 90 8C 89 
16b35     92 A0 AD BC | 	byte	$f7, $f9, $f7, $ed, $e2, $d0, $bd, $af, $98, $90, $8c, $89, $92, $a0, $ad, $bc
16b39     CA D9 E6 F2 
16b3d     FD 04 10 0D 
16b41     F6 E6 D4 CC 
16b45     D0 D4 D6 DA | 	byte	$ca, $d9, $e6, $f2, $fd, $04, $10, $0d, $f6, $e6, $d4, $cc, $d0, $d4, $d6, $da
16b49     D6 D0 CA BD 
16b4d     BD B1 AD AF 
16b51     B3 C0 CC E3 
16b55     ED F9 0D 1D | 	byte	$d6, $d0, $ca, $bd, $bd, $b1, $ad, $af, $b3, $c0, $cc, $e3, $ed, $f9, $0d, $1d
16b59     14 14 0D 04 
16b5d     00 F6 F6 F3 
16b61     F6 F7 F9 00 
16b65     03 0A 1A 27 | 	byte	$14, $14, $0d, $04, $00, $f6, $f6, $f3, $f6, $f7, $f9, $00, $03, $0a, $1a, $27
16b69     37 3B 31 24 
16b6d     13 07 0D 10 
16b71     1A 21 21 24 
16b75     2C 2C 37 40 | 	byte	$37, $3b, $31, $24, $13, $07, $0d, $10, $1a, $21, $21, $24, $2c, $2c, $37, $40
16b79     49 4B 49 41 
16b7d     36 30 26 13 
16b81     0A 01 FC FC 
16b85     FC FC F3 F0 | 	byte	$49, $4b, $49, $41, $36, $30, $26, $13, $0a, $01, $fc, $fc, $fc, $fc, $f3, $f0
16b89     F3 F9 ED F3 
16b8d     FC FF 03 03 
16b91     04 07 07 00 
16b95     EA DC D3 CC | 	byte	$f3, $f9, $ed, $f3, $fc, $ff, $03, $03, $04, $07, $07, $00, $ea, $dc, $d3, $cc
16b99     D9 E6 F0 FC 
16b9d     01 01 07 09 
16ba1     0D 13 18 18 
16ba5     18 1A 1D 1D | 	byte	$d9, $e6, $f0, $fc, $01, $01, $07, $09, $0d, $13, $18, $18, $18, $1a, $1d, $1d
16ba9     20 20 18 0D 
16bad     FD ED D6 C3 
16bb1     AD A3 9C A3 
16bb5     B3 C5 E3 01 | 	byte	$20, $20, $18, $0d, $fd, $ed, $d6, $c3, $ad, $a3, $9c, $a3, $b3, $c5, $e3, $01
16bb9     13 24 3B 4D 
16bbd     59 59 51 43 
16bc1     31 21 1D 18 
16bc5     13 0A 09 03 | 	byte	$13, $24, $3b, $4d, $59, $59, $51, $43, $31, $21, $1d, $18, $13, $0a, $09, $03
16bc9     FD FF 00 07 
16bcd     16 18 1E 20 
16bd1     2A 2A 2D 30 
16bd5     30 30 26 20 | 	byte	$fd, $ff, $00, $07, $16, $18, $1e, $20, $2a, $2a, $2d, $30, $30, $30, $26, $20
16bd9     18 10 04 04 
16bdd     04 07 0A 13 
16be1     14 16 0E 07 
16be5     03 04 10 0E | 	byte	$18, $10, $04, $04, $04, $07, $0a, $13, $14, $16, $0e, $07, $03, $04, $10, $0e
16be9     10 0E 01 F9 
16bed     FF FF FD FD 
16bf1     FF FF F9 F3 
16bf5     F3 F3 F3 EA | 	byte	$10, $0e, $01, $f9, $ff, $ff, $fd, $fd, $ff, $ff, $f9, $f3, $f3, $f3, $f3, $ea
16bf9     E0 D9 DA DA 
16bfd     E3 EC F3 F3 
16c01     F6 ED E8 E0 
16c05     D3 CF D0 D4 | 	byte	$e0, $d9, $da, $da, $e3, $ec, $f3, $f3, $f6, $ed, $e8, $e0, $d3, $cf, $d0, $d4
16c09     DA E3 ED FD 
16c0d     FD FF 03 04 
16c11     0D 00 F6 E6 
16c15     CF BF C0 C6 | 	byte	$da, $e3, $ed, $fd, $fd, $ff, $03, $04, $0d, $00, $f6, $e6, $cf, $bf, $c0, $c6
16c19     D6 E8 F2 FF 
16c1d     07 14 24 30 
16c21     3A 31 24 10 
16c25     FD F0 E6 DC | 	byte	$d6, $e8, $f2, $ff, $07, $14, $24, $30, $3a, $31, $24, $10, $fd, $f0, $e6, $dc
16c29     D0 B7 A9 9A 
16c2d     90 84 80 89 
16c31     92 A2 AD C3 
16c35     DA F2 F7 F2 | 	byte	$d0, $b7, $a9, $9a, $90, $84, $80, $89, $92, $a2, $ad, $c3, $da, $f2, $f7, $f2
16c39     F3 F3 FC EA 
16c3d     E6 E0 D3 C9 
16c41     CC CC D3 D4 
16c45     D4 C5 B3 A3 | 	byte	$f3, $f3, $fc, $ea, $e6, $e0, $d3, $c9, $cc, $cc, $d3, $d4, $d4, $c5, $b3, $a3
16c49     94 9A A0 AC 
16c4d     B3 C5 D3 E6 
16c51     FC 03 16 14 
16c55     1A 18 13 07 | 	byte	$94, $9a, $a0, $ac, $b3, $c5, $d3, $e6, $fc, $03, $16, $14, $1a, $18, $13, $07
16c59     FD ED DF D6 
16c5d     D6 DC ED FC 
16c61     0D 16 1D 2A 
16c65     2D 26 24 1E | 	byte	$fd, $ed, $df, $d6, $d6, $dc, $ed, $fc, $0d, $16, $1d, $2a, $2d, $26, $24, $1e
16c69     16 0A 0E 16 
16c6d     26 2C 37 37 
16c71     2A 27 24 27 
16c75     2C 27 20 13 | 	byte	$16, $0a, $0e, $16, $26, $2c, $37, $37, $2a, $27, $24, $27, $2c, $27, $20, $13
16c79     03 00 F9 FF 
16c7d     01 09 0E 14 
16c81     1D 21 27 27 
16c85     34 30 27 20 | 	byte	$03, $00, $f9, $ff, $01, $09, $0e, $14, $1d, $21, $27, $27, $34, $30, $27, $20
16c89     20 1D 14 0D 
16c8d     01 F9 F2 DF 
16c91     D9 D4 D4 DF 
16c95     E6 F7 09 14 | 	byte	$20, $1d, $14, $0d, $01, $f9, $f2, $df, $d9, $d4, $d4, $df, $e6, $f7, $09, $14
16c99     1A 16 0D 00 
16c9d     FF 00 07 09 
16ca1     0D 0D 07 04 
16ca5     00 00 F9 F2 | 	byte	$1a, $16, $0d, $00, $ff, $00, $07, $09, $0d, $0d, $07, $04, $00, $00, $f9, $f2
16ca9     E3 CF C0 B1 
16cad     A7 A2 A9 B1 
16cb1     C0 E0 04 24 
16cb5     36 3D 43 4F | 	byte	$e3, $cf, $c0, $b1, $a7, $a2, $a9, $b1, $c0, $e0, $04, $24, $36, $3d, $43, $4f
16cb9     4F 40 40 3B 
16cbd     34 24 1D 14 
16cc1     16 1A 18 13 
16cc5     0E 09 03 0E | 	byte	$4f, $40, $40, $3b, $34, $24, $1d, $14, $16, $1a, $18, $13, $0e, $09, $03, $0e
16cc9     14 1D 1E 1E 
16ccd     1E 1D 1D 21 
16cd1     24 24 24 1E 
16cd5     1A 13 07 FD | 	byte	$14, $1d, $1e, $1e, $1e, $1d, $1d, $21, $24, $24, $24, $1e, $1a, $13, $07, $fd
16cd9     F7 ED E8 E3 
16cdd     EA F6 FC 01 
16ce1     03 09 09 07 
16ce5     10 18 21 31 | 	byte	$f7, $ed, $e8, $e3, $ea, $f6, $fc, $01, $03, $09, $09, $07, $10, $18, $21, $31
16ce9     3D 54 64 70 
16ced     6C 59 37 16 
16cf1     F7 E6 DC D4 
16cf5     C6 C5 C9 CC | 	byte	$3d, $54, $64, $70, $6c, $59, $37, $16, $f7, $e6, $dc, $d4, $c6, $c5, $c9, $cc
16cf9     D9 E6 F3 F9 
16cfd     FC F2 EC E3 
16d01     D6 D3 CF D0 
16d05     CC D0 E2 F2 | 	byte	$d9, $e6, $f3, $f9, $fc, $f2, $ec, $e3, $d6, $d3, $cf, $d0, $cc, $d0, $e2, $f2
16d09     FD 00 FD F9 
16d0d     EA D3 C5 BD 
16d11     C0 C3 CC DC 
16d15     F3 07 1E 2D | 	byte	$fd, $00, $fd, $f9, $ea, $d3, $c5, $bd, $c0, $c3, $cc, $dc, $f3, $07, $1e, $2d
16d19     26 27 27 31 
16d1d     36 40 40 3A 
16d21     26 03 E6 CA 
16d25     B1 A7 9A 9A | 	byte	$26, $27, $27, $31, $36, $40, $40, $3a, $26, $03, $e6, $ca, $b1, $a7, $9a, $9a
16d29     98 9A A0 A6 
16d2d     B1 B5 B9 C0 
16d31     D0 E0 E3 EC 
16d35     EA E3 DA C9 | 	byte	$98, $9a, $a0, $a6, $b1, $b5, $b9, $c0, $d0, $e0, $e3, $ec, $ea, $e3, $da, $c9
16d39     CA CC CC D0 
16d3d     C9 CC CC C5 
16d41     C0 B9 A7 9A 
16d45     90 94 9A B1 | 	byte	$ca, $cc, $cc, $d0, $c9, $cc, $cc, $c5, $c0, $b9, $a7, $9a, $90, $94, $9a, $b1
16d49     BD CF D3 E3 
16d4d     F0 FF 0D 16 
16d51     16 16 09 FF 
16d55     F0 E6 DA D0 | 	byte	$bd, $cf, $d3, $e3, $f0, $ff, $0d, $16, $16, $16, $09, $ff, $f0, $e6, $da, $d0
16d59     C6 CF DA F3 
16d5d     09 1A 24 2A 
16d61     18 07 00 FF 
16d65     03 0E 14 1D | 	byte	$c6, $cf, $da, $f3, $09, $1a, $24, $2a, $18, $07, $00, $ff, $03, $0e, $14, $1d
16d69     2A 3A 44 44 
16d6d     3D 31 20 16 
16d71     0D FC ED E8 
16d75     E2 DF E2 ED | 	byte	$2a, $3a, $44, $44, $3d, $31, $20, $16, $0d, $fc, $ed, $e8, $e2, $df, $e2, $ed
16d79     FD 14 26 31 
16d7d     31 3A 41 47 
16d81     4D 47 43 43 
16d85     40 3A 36 24 | 	byte	$fd, $14, $26, $31, $31, $3a, $41, $47, $4d, $47, $43, $43, $40, $3a, $36, $24
16d89     14 03 E8 D6 
16d8d     D0 DC ED FF 
16d91     0E 1E 20 26 
16d95     2D 2A 1E 0D | 	byte	$14, $03, $e8, $d6, $d0, $dc, $ed, $ff, $0e, $1e, $20, $26, $2d, $2a, $1e, $0d
16d99     01 F3 F2 F0 
16d9d     F0 ED EC E0 
16da1     D9 D0 C6 C0 
16da5     BD BC B5 B9 | 	byte	$01, $f3, $f2, $f0, $f0, $ed, $ec, $e0, $d9, $d0, $c6, $c0, $bd, $bc, $b5, $b9
16da9     BC BF CF D4 
16dad     E6 F7 04 16 
16db1     30 40 4B 4B 
16db5     34 21 1D 16 | 	byte	$bc, $bf, $cf, $d4, $e6, $f7, $04, $16, $30, $40, $4b, $4b, $34, $21, $1d, $16
16db9     1E 21 2C 2C 
16dbd     2C 2D 2D 36 
16dc1     31 26 20 13 
16dc5     0D 0E 0D 0A | 	byte	$1e, $21, $2c, $2c, $2c, $2d, $2d, $36, $31, $26, $20, $13, $0d, $0e, $0d, $0a
16dc9     0A 09 09 0A 
16dcd     0D 14 1D 1D 
16dd1     1D 18 0E 03 
16dd5     FD E2 D4 CF | 	byte	$0a, $09, $09, $0a, $0d, $14, $1d, $1d, $1d, $18, $0e, $03, $fd, $e2, $d4, $cf
16dd9     D0 D4 E6 F9 
16ddd     03 0E 0A 03 
16de1     F9 04 1E 3D 
16de5     57 6C 74 7F | 	byte	$d0, $d4, $e6, $f9, $03, $0e, $0a, $03, $f9, $04, $1e, $3d, $57, $6c, $74, $7f
16de9     7F 7F 77 68 
16ded     57 41 26 0D 
16df1     FC E8 DA D0 
16df5     C9 CF D4 DF | 	byte	$7f, $7f, $77, $68, $57, $41, $26, $0d, $fc, $e8, $da, $d0, $c9, $cf, $d4, $df
16df9     E3 EC EC EC 
16dfd     EA EA E3 D6 
16e01     D6 CF D0 D4 
16e05     DA E3 E6 DA | 	byte	$e3, $ec, $ec, $ec, $ea, $ea, $e3, $d6, $d6, $cf, $d0, $d4, $da, $e3, $e6, $da
16e09     C9 A9 A6 A9 
16e0d     B7 D9 F2 09 
16e11     1D 34 36 3D 
16e15     43 43 3D 30 | 	byte	$c9, $a9, $a6, $a9, $b7, $d9, $f2, $09, $1d, $34, $36, $3d, $43, $43, $3d, $30
16e19     27 18 16 0E 
16e1d     03 00 FC ED 
16e21     E3 DA CC C5 
16e25     C0 BD BD C5 | 	byte	$27, $18, $16, $0e, $03, $00, $fc, $ed, $e3, $da, $cc, $c5, $c0, $bd, $bd, $c5
16e29     CA C6 C0 BD 
16e2d     C3 C3 C6 CA 
16e31     D4 D0 C6 B1 
16e35     A6 A7 B3 BF | 	byte	$ca, $c6, $c0, $bd, $c3, $c3, $c6, $ca, $d4, $d0, $c6, $b1, $a6, $a7, $b3, $bf
16e39     CA CA C6 C0 
16e3d     BF BC B9 B5 
16e41     AC A6 A9 AD 
16e45     AD B7 C3 CF | 	byte	$ca, $ca, $c6, $c0, $bf, $bc, $b9, $b5, $ac, $a6, $a9, $ad, $ad, $b7, $c3, $cf
16e49     DC DF E6 EA 
16e4d     ED F9 FF 00 
16e51     03 04 03 F6 
16e55     EC E8 E2 E6 | 	byte	$dc, $df, $e6, $ea, $ed, $f9, $ff, $00, $03, $04, $03, $f6, $ec, $e8, $e2, $e6
16e59     F0 FC 03 04 
16e5d     FF ED DA DC 
16e61     E8 FD 13 27 
16e65     3A 47 4D 51 | 	byte	$f0, $fc, $03, $04, $ff, $ed, $da, $dc, $e8, $fd, $13, $27, $3a, $47, $4d, $51
16e69     4F 41 30 13 
16e6d     FC E0 CF CC 
16e71     CA CC D6 DC 
16e75     EC 00 0A 1A | 	byte	$4f, $41, $30, $13, $fc, $e0, $cf, $cc, $ca, $cc, $d6, $dc, $ec, $00, $0a, $1a
16e79     2A 36 49 54 
16e7d     5A 54 47 3D 
16e81     3A 34 36 40 
16e85     44 4B 40 1E | 	byte	$2a, $36, $49, $54, $5a, $54, $47, $3d, $3a, $34, $36, $40, $44, $4b, $40, $1e
16e89     04 FC F7 03 
16e8d     16 26 31 36 
16e91     36 37 31 24 
16e95     16 FF F0 E2 | 	byte	$04, $fc, $f7, $03, $16, $26, $31, $36, $36, $37, $31, $24, $16, $ff, $f0, $e2
16e99     DA CF CC CC 
16e9d     BC A9 9C 90 
16ea1     90 94 A7 BC 
16ea5     D6 ED 01 10 | 	byte	$da, $cf, $cc, $cc, $bc, $a9, $9c, $90, $90, $94, $a7, $bc, $d6, $ed, $01, $10
16ea9     0E 13 10 10 
16ead     0E 13 18 20 
16eb1     1D 04 FD FF 
16eb5     01 1D 34 41 | 	byte	$0e, $13, $10, $10, $0e, $13, $18, $20, $1d, $04, $fd, $ff, $01, $1d, $34, $41
16eb9     51 53 54 57 
16ebd     57 44 31 1D 
16ec1     04 F7 F0 ED 
16ec5     F0 F0 F2 F3 | 	byte	$51, $53, $54, $57, $57, $44, $31, $1d, $04, $f7, $f0, $ed, $f0, $f0, $f2, $f3
16ec9     F3 F6 F7 00 
16ecd     04 10 14 10 
16ed1     10 03 F3 E3 
16ed5     DF DC DC E8 | 	byte	$f3, $f6, $f7, $00, $04, $10, $14, $10, $10, $03, $f3, $e3, $df, $dc, $dc, $e8
16ed9     F9 0A 0E 03 
16edd     F9 F9 FF 16 
16ee1     36 4F 64 76 
16ee5     7F 7F 7F 7F | 	byte	$f9, $0a, $0e, $03, $f9, $f9, $ff, $16, $36, $4f, $64, $76, $7f, $7f, $7f, $7f
16ee9     7F 7C 66 4D 
16eed     3A 2C 24 24 
16ef1     13 00 F0 E0 
16ef5     D0 CA C6 D0 | 	byte	$7f, $7c, $66, $4d, $3a, $2c, $24, $24, $13, $00, $f0, $e0, $d0, $ca, $c6, $d0
16ef9     D9 E0 ED F3 
16efd     ED EA E0 D4 
16f01     C9 B5 AF B5 
16f05     B1 A2 A0 A2 | 	byte	$d9, $e0, $ed, $f3, $ed, $ea, $e0, $d4, $c9, $b5, $af, $b5, $b1, $a2, $a0, $a2
16f09     B3 D6 F9 1E 
16f0d     36 43 47 4D 
16f11     4B 49 3B 2D 
16f15     18 09 FC F7 | 	byte	$b3, $d6, $f9, $1e, $36, $43, $47, $4d, $4b, $49, $3b, $2d, $18, $09, $fc, $f7
16f19     FC FD FF FF 
16f1d     F6 F2 F3 F3 
16f21     F9 01 01 FF 
16f25     FC ED E2 D6 | 	byte	$fc, $fd, $ff, $ff, $f6, $f2, $f3, $f3, $f9, $01, $01, $ff, $fc, $ed, $e2, $d6
16f29     CF C9 B7 AC 
16f2d     A6 A7 AC 9D 
16f31     94 8C 8A 94 
16f35     9D AF B9 C0 | 	byte	$cf, $c9, $b7, $ac, $a6, $a7, $ac, $9d, $94, $8c, $8a, $94, $9d, $af, $b9, $c0
16f39     C9 D0 DA DF 
16f3d     E3 E3 CF BF 
16f41     AF A0 9A A2 
16f45     A6 AD B1 B7 | 	byte	$c9, $d0, $da, $df, $e3, $e3, $cf, $bf, $af, $a0, $9a, $a2, $a6, $ad, $b1, $b7
16f49     C3 D3 DC ED 
16f4d     FC 0A 18 20 
16f51     1D 16 09 FC 
16f55     EC DA D0 CC | 	byte	$c3, $d3, $dc, $ed, $fc, $0a, $18, $20, $1d, $16, $09, $fc, $ec, $da, $d0, $cc
16f59     D4 D4 CF CC 
16f5d     C9 DC F0 07 
16f61     1E 36 47 43 
16f65     4D 43 37 2C | 	byte	$d4, $d4, $cf, $cc, $c9, $dc, $f0, $07, $1e, $36, $47, $43, $4d, $43, $37, $2c
16f69     13 F9 DF D3 
16f6d     CC D4 E2 F0 
16f71     F0 F0 F2 F2 
16f75     F3 FF 0D 21 | 	byte	$13, $f9, $df, $d3, $cc, $d4, $e2, $f0, $f0, $f0, $f2, $f2, $f3, $ff, $0d, $21
16f79     34 47 4F 57 
16f7d     5D 57 4D 41 
16f81     40 40 41 43 
16f85     3A 34 30 30 | 	byte	$34, $47, $4f, $57, $5d, $57, $4d, $41, $40, $40, $41, $43, $3a, $34, $30, $30
16f89     31 3A 3B 3D 
16f8d     40 37 37 30 
16f91     24 16 04 EC 
16f95     DA C5 BC B3 | 	byte	$31, $3a, $3b, $3d, $40, $37, $37, $30, $24, $16, $04, $ec, $da, $c5, $bc, $b3
16f99     AF B1 A2 9D 
16f9d     98 9A A6 B9 
16fa1     D3 F7 04 16 
16fa5     1E 1A 1A 10 | 	byte	$af, $b1, $a2, $9d, $98, $9a, $a6, $b9, $d3, $f7, $04, $16, $1e, $1a, $1a, $10
16fa9     04 F9 F2 F0 
16fad     F6 FC F7 F9 
16fb1     F7 FC 0A 27 
16fb5     40 54 66 66 | 	byte	$04, $f9, $f2, $f0, $f6, $fc, $f7, $f9, $f7, $fc, $0a, $27, $40, $54, $66, $66
16fb9     60 57 47 36 
16fbd     26 10 FF EA 
16fc1     DF DC D6 DC 
16fc5     DA DA DA DF | 	byte	$60, $57, $47, $36, $26, $10, $ff, $ea, $df, $dc, $d6, $dc, $da, $da, $da, $df
16fc9     E3 E6 ED 00 
16fcd     00 F4 E0 C7 
16fd1     F0 DF 5F 40 
16fd5     FF 30 D7 F2 | 	byte	$e3, $e6, $ed, $00, $00, $f4, $e0, $c7, $f0, $df, $5f, $40, $ff, $30, $d7, $f2
16fd9     1F 7F 00 DF 
16fdd     7F 20 E0 BF 
16fe1     3F 40 0B 10 
16fe5     00 F4 EA E5 | 	byte	$1f, $7f, $00, $df, $7f, $20, $e0, $bf, $3f, $40, $0b, $10, $00, $f4, $ea, $e5
16fe9     E2 DA D5 D3 
16fed     DF F9 E8 C8 
16ff1     AF CA CB D5 
16ff5     E3 F7 05 13 | 	byte	$e2, $da, $d5, $d3, $df, $f9, $e8, $c8, $af, $ca, $cb, $d5, $e3, $f7, $05, $13
16ff9     21 20 19 33 
16ffd     4B 7F 7F 60 
17001     2A 3F 40 4F 
17005     70 20 F7 04 | 	byte	$21, $20, $19, $33, $4b, $7f, $7f, $60, $2a, $3f, $40, $4f, $70, $20, $f7, $04
17009     A0 DF 00 EA 
1700d     D0 AF FF 00 
17011     80 83 DF D8 
17015     BA B0 AF BF | 	byte	$a0, $df, $00, $ea, $d0, $af, $ff, $00, $80, $83, $df, $d8, $ba, $b0, $af, $bf
17019     EF 1A 1C 08 
1701d     0B 10 03 1B 
17021     3F 70 40 28 
17025     27 57 40 2B | 	byte	$ef, $1a, $1c, $08, $0b, $10, $03, $1b, $3f, $70, $40, $28, $27, $57, $40, $2b
17029     47 34 00 CD 
1702d     EF 2A 08 C0 
17031     97 BF C0 CF 
17035     FF D0 90 BF | 	byte	$47, $34, $00, $cd, $ef, $2a, $08, $c0, $97, $bf, $c0, $cf, $ff, $d0, $90, $bf
17039     F8 C5 DF 17 
1703d     04 07 F0 D7 
17041     FF 0F 5F 7F 
17045     10 BF FF 10 | 	byte	$f8, $c5, $df, $17, $04, $07, $f0, $d7, $ff, $0f, $5f, $7f, $10, $bf, $ff, $10
17049     F0 FF 6F 60 
1704d     E0 FF 40 1F 
17051     3C 20 18 1A 
17055     08 E0 DF 09 | 	byte	$f0, $ff, $6f, $60, $e0, $ff, $40, $1f, $3c, $20, $18, $1a, $08, $e0, $df, $09
17059     00 E0 B4 C5 
1705d     B0 AF EB D8 
17061     E7 FC FA 07 
17065     11 17 25 37 | 	byte	$00, $e0, $b4, $c5, $b0, $af, $eb, $d8, $e7, $fc, $fa, $07, $11, $17, $25, $37
17069     3C 43 54 40 
1706d     10 0F 00 E7 
17071     13 00 FF 00 
17075     C0 80 80 DF | 	byte	$3c, $43, $54, $40, $10, $0f, $00, $e7, $13, $00, $ff, $00, $c0, $80, $80, $df
17079     14 00 E8 B0 
1707d     A9 B7 DB F7 
17081     16 00 E0 C0 
17085     A9 A8 95 DF | 	byte	$14, $00, $e8, $b0, $a9, $b7, $db, $f7, $16, $00, $e0, $c0, $a9, $a8, $95, $df
17089     29 35 20 E0 
1708d     D7 FF 4F 7C 
17091     5A 60 40 00 
17095     DF FF 28 1F | 	byte	$29, $35, $20, $e0, $d7, $ff, $4f, $7c, $5a, $60, $40, $00, $df, $ff, $28, $1f
17099     37 2F 28 00 
1709d     F0 D0 DF 0C 
170a1     E0 C4 CF E0 
170a5     DF FF 0E 04 | 	byte	$37, $2f, $28, $00, $f0, $d0, $df, $0c, $e0, $c4, $cf, $e0, $df, $ff, $0e, $04
170a9     E0 D7 FF 3F 
170ad     38 4B 40 2D 
170b1     34 10 0F 04 
170b5     F0 D0 BB FF | 	byte	$e0, $d7, $ff, $3f, $38, $4b, $40, $2d, $34, $10, $0f, $04, $f0, $d0, $bb, $ff
170b9     E0 80 81 BF 
170bd     A0 BF 37 00 
170c1     95 BF EF 28 
170c5     E0 F4 DF 2F | 	byte	$e0, $80, $81, $bf, $a0, $bf, $37, $00, $95, $bf, $ef, $28, $e0, $f4, $df, $2f
170c9     2B 20 FB 02 
170cd     E4 EB 1B 08 
170d1     FF 24 19 19 
170d5     35 30 13 28 | 	byte	$2b, $20, $fb, $02, $e4, $eb, $1b, $08, $ff, $24, $19, $19, $35, $30, $13, $28
170d9     F0 2F 60 A0 
170dd     FF 20 A0 B7 
170e1     DF E8 A4 AF 
170e5     BF FF 2A 20 | 	byte	$f0, $2f, $60, $a0, $ff, $20, $a0, $b7, $df, $e8, $a4, $af, $bf, $ff, $2a, $20
170e9     18 02 1F 20 
170ed     00 EF 35 10 
170f1     09 E8 B4 B7 
170f5     DF 4F 28 3F | 	byte	$18, $02, $1f, $20, $00, $ef, $35, $10, $09, $e8, $b4, $b7, $df, $4f, $28, $3f
170f9     40 DB 1F 30 
170fd     3F 7D 70 20 
17101     0F 20 F7 2F 
17105     00 BB FF 3A | 	byte	$40, $db, $1f, $30, $3f, $7d, $70, $20, $0f, $20, $f7, $2f, $00, $bb, $ff, $3a
17109     00 B7 FE D0 
1710d     EF 0F 04 1F 
17111     20 D3 F3 E0 
17115     F3 FC E8 EB | 	byte	$00, $b7, $fe, $d0, $ef, $0f, $04, $1f, $20, $d3, $f3, $e0, $f3, $fc, $e8, $eb
17119     02 FF 3B 20 
1711d     E0 C8 CF 17 
17121     14 10 08 11 
17125     00 DF E4 C8 | 	byte	$02, $ff, $3b, $20, $e0, $c8, $cf, $17, $14, $10, $08, $11, $00, $df, $e4, $c8
17129     C7 D8 A7 FF 
1712d     E0 DF 20 E0 
17131     EF 40 E0 BF 
17135     27 00 E7 FB | 	byte	$c7, $d8, $a7, $ff, $e0, $df, $20, $e0, $ef, $40, $e0, $bf, $27, $00, $e7, $fb
17139     1F 14 1F 7F 
1713d     10 FF 7F 60 
17141     2F 60 2B 47 
17145     45 40 2C 10 | 	byte	$1f, $14, $1f, $7f, $10, $ff, $7f, $60, $2f, $60, $2b, $47, $45, $40, $2c, $10
17149     F0 E0 BC AE 
1714d     C7 DF E8 C4 
17151     A0 9F F7 4F 
17155     52 72 20 8B | 	byte	$f0, $e0, $bc, $ae, $c7, $df, $e8, $c4, $a0, $9f, $f7, $4f, $52, $72, $20, $8b
17159     FF 7F 20 12 
1715d     D0 EF 30 E0 
17161     BF 3F 20 80 
17165     9F 1F 28 08 | 	byte	$ff, $7f, $20, $12, $d0, $ef, $30, $e0, $bf, $3f, $20, $80, $9f, $1f, $28, $08
17169     CC FF 10 C0 
1716d     CF 14 F0 CC 
17171     C2 CF C0 9B 
17175     D7 D8 BF 1F | 	byte	$cc, $ff, $10, $c0, $cf, $14, $f0, $cc, $c2, $cf, $c0, $9b, $d7, $d8, $bf, $1f
17179     20 D4 CB FF 
1717d     60 00 3F 60 
17181     01 00 0D 00 
17185     D4 EF 10 F3 | 	byte	$20, $d4, $cb, $ff, $60, $00, $3f, $60, $01, $00, $0d, $00, $d4, $ef, $10, $f3
17189     1F 20 0F 3F 
1718d     20 FF 10 BB 
17191     EF 17 20 E8 
17195     B0 88 80 9F | 	byte	$1f, $20, $0f, $3f, $20, $ff, $10, $bb, $ef, $17, $20, $e8, $b0, $88, $80, $9f
17199     E8 E2 E7 EC 
1719d     C8 EF 1F 6F 
171a1     50 E0 C7 17 
171a5     20 FF 27 2A | 	byte	$e8, $e2, $e7, $ec, $c8, $ef, $1f, $6f, $50, $e0, $c7, $17, $20, $ff, $27, $2a
171a9     1F 30 E4 FF 
171ad     5F 50 00 2F 
171b1     7F 40 06 00 
171b5     C8 FF 40 DF | 	byte	$1f, $30, $e4, $ff, $5f, $50, $00, $2f, $7f, $40, $06, $00, $c8, $ff, $40, $df
171b9     3F 00 9F FF 
171bd     08 0A F0 B7 
171c1     1F 00 FF 6E 
171c5     00 FF 40 F7 | 	byte	$3f, $00, $9f, $ff, $08, $0a, $f0, $b7, $1f, $00, $ff, $6e, $00, $ff, $40, $f7
171c9     2C E0 BF 14 
171cd     F0 F7 10 90 
171d1     9F 3F 40 10 
171d5     F0 DF 0F 2F | 	byte	$2c, $e0, $bf, $14, $f0, $f7, $10, $90, $9f, $3f, $40, $10, $f0, $df, $0f, $2f
171d9     2A 2F 08 DE 
171dd     D4 DF 17 3F 
171e1     00 BF FF 00 
171e5     BB FF 60 E0 | 	byte	$2a, $2f, $08, $de, $d4, $df, $17, $3f, $00, $bf, $ff, $00, $bb, $ff, $60, $e0
171e9     FF 10 F3 E0 
171ed     BF 00 80 BF 
171f1     18 D8 CC B4 
171f5     8A B7 C0 FF | 	byte	$ff, $10, $f3, $e0, $bf, $00, $80, $bf, $18, $d8, $cc, $b4, $8a, $b7, $c0, $ff
171f9     20 9F FF E0 
171fd     BF FF 30 D4 
17201     FF 50 00 EF 
17205     E0 CF 2F 30 | 	byte	$20, $9f, $ff, $e0, $bf, $ff, $30, $d4, $ff, $50, $00, $ef, $e0, $cf, $2f, $30
17209     08 F0 EB 00 
1720d     C9 2F 20 9F 
17211     3F 20 C7 FA 
17215     D0 EB 05 00 | 	byte	$08, $f0, $eb, $00, $c9, $2f, $20, $9f, $3f, $20, $c7, $fa, $d0, $eb, $05, $00
17219     B9 FF 58 00 
1721d     B7 F7 33 3B 
17221     54 10 EA EF 
17225     08 F0 17 1F | 	byte	$b9, $ff, $58, $00, $b7, $f7, $33, $3b, $54, $10, $ea, $ef, $08, $f0, $17, $1f
17229     20 0F 4F 08 
1722d     FF 30 17 3F 
17231     20 1F 40 E0 
17235     FF 00 AF 3A | 	byte	$20, $0f, $4f, $08, $ff, $30, $17, $3f, $20, $1f, $40, $e0, $ff, $00, $af, $3a
17239     00 B0 8B BF 
1723d     10 00 E9 E0 
17241     C4 D7 FF 54 
17245     30 23 10 0F | 	byte	$00, $b0, $8b, $bf, $10, $00, $e9, $e0, $c4, $d7, $ff, $54, $30, $23, $10, $0f
17249     10 00 FF 2F 
1724d     6F 68 20 FF 
17251     4F 60 13 3E 
17255     10 FF 20 00 | 	byte	$10, $00, $ff, $2f, $6f, $68, $20, $ff, $4f, $60, $13, $3e, $10, $ff, $20, $00
17259     F6 1B 28 D0 
1725d     B7 E4 C7 F7 
17261     D0 BF F9 E2 
17265     FF 24 14 00 | 	byte	$f6, $1b, $28, $d0, $b7, $e4, $c7, $f7, $d0, $bf, $f9, $e2, $ff, $24, $14, $00
17269     FF 24 20 27 
1726d     6C 20 1D 20 
17271     10 F3 1F 28 
17275     1F 2C 08 EB | 	byte	$ff, $24, $20, $27, $6c, $20, $1d, $20, $10, $f3, $1f, $28, $1f, $2c, $08, $eb
17279     EB 1F 40 E0 
1727d     EF 14 D0 A0 
17281     D7 00 C0 D7 
17285     D4 80 9F 0C | 	byte	$eb, $1f, $40, $e0, $ef, $14, $d0, $a0, $d7, $00, $c0, $d7, $d4, $80, $9f, $0c
17289     C0 DF 70 00 
1728d     B6 DF EF 1F 
17291     00 FF 30 FF 
17295     00 DD FF 0C | 	byte	$c0, $df, $70, $00, $b6, $df, $ef, $1f, $00, $ff, $30, $ff, $00, $dd, $ff, $0c
17299     FF 3F 40 D0 
1729d     FF FB 2D 00 
172a1     CF 0D E8 C0 
172a5     B9 B7 FF 50 | 	byte	$ff, $3f, $40, $d0, $ff, $fb, $2d, $00, $cf, $0d, $e8, $c0, $b9, $b7, $ff, $50
172a9     00 FF E0 D7 
172ad     FF 28 3F 20 
172b1     D5 FF 1F 10 
172b5     0F 00 DF FF | 	byte	$00, $ff, $e0, $d7, $ff, $28, $3f, $20, $d5, $ff, $1f, $10, $0f, $00, $df, $ff
172b9     E0 BF 37 E0 
172bd     EF F2 F9 0F 
172c1     14 EB 13 00 
172c5     E2 FF 20 D0 | 	byte	$e0, $bf, $37, $e0, $ef, $f2, $f9, $0f, $14, $eb, $13, $00, $e2, $ff, $20, $d0
172c9     EF 40 00 A0 
172cd     BF DA C2 DF 
172d1     0F 10 FF 37 
172d5     30 E0 EF 3B | 	byte	$ef, $40, $00, $a0, $bf, $da, $c2, $df, $0f, $10, $ff, $37, $30, $e0, $ef, $3b
172d9     35 48 10 DF 
172dd     F7 FC E8 EF 
172e1     2F 20 E8 C0 
172e5     CF 22 F0 CF | 	byte	$35, $48, $10, $df, $f7, $fc, $e8, $ef, $2f, $20, $e8, $c0, $cf, $22, $f0, $cf
172e9     F7 E8 B8 D7 
172ed     D0 C0 CF 13 
172f1     00 D1 FF F0 
172f5     BF FF 1B 55 | 	byte	$f7, $e8, $b8, $d7, $d0, $c0, $cf, $13, $00, $d1, $ff, $f0, $bf, $ff, $1b, $55
172f9     30 04 FF 27 
172fd     2F 04 0F 48 
17301     25 40 00 B3 
17305     DF 0F 38 10 | 	byte	$30, $04, $ff, $27, $2f, $04, $0f, $48, $25, $40, $00, $b3, $df, $0f, $38, $10
17309     1F 30 00 9F 
1730d     1F 20 F8 FB 
17311     0B E0 B7 D7 
17315     D1 FF 4A 42 | 	byte	$1f, $30, $00, $9f, $1f, $20, $f8, $fb, $0b, $e0, $b7, $d7, $d1, $ff, $4a, $42
17319     20 E3 1F 00 
1731d     C1 1F 74 20 
17321     F0 FF 00 1F 
17325     08 EF 4B 00 | 	byte	$20, $e3, $1f, $00, $c1, $1f, $74, $20, $f0, $ff, $00, $1f, $08, $ef, $4b, $00
17329     AF FF F7 08 
1732d     D3 FF 00 CF 
17331     FF 1F 1C 08 
17335     EF FF 1F 2A | 	byte	$af, $ff, $f7, $08, $d3, $ff, $00, $cf, $ff, $1f, $1c, $08, $ef, $ff, $1f, $2a
17339     14 00 FF 44 
1733d     F0 1F 20 EF 
17341     4D 10 E2 C0 
17345     CF FB 09 1F | 	byte	$14, $00, $ff, $44, $f0, $1f, $20, $ef, $4d, $10, $e2, $c0, $cf, $fb, $09, $1f
17349     10 E4 C8 C0 
1734d     BB CF CB DB 
17351     F7 0B 00 EF 
17355     24 C8 1F 78 | 	byte	$10, $e4, $c8, $c0, $bb, $cf, $cb, $db, $f7, $0b, $00, $ef, $24, $c8, $1f, $78
17359     1B 57 10 FF 
1735d     20 1F 20 27 
17361     30 1F 30 00 
17365     EF 04 DF 1F | 	byte	$1b, $57, $10, $ff, $20, $1f, $20, $27, $30, $1f, $30, $00, $ef, $04, $df, $1f
17369     34 E0 D7 0F 
1736d     08 1B 10 17 
17371     20 3F 40 F0 
17375     CF 17 20 E8 | 	byte	$34, $e0, $d7, $0f, $08, $1b, $10, $17, $20, $3f, $40, $f0, $cf, $17, $20, $e8
17379     C7 FF 08 00 
1737d     FF 30 00 E9 
17381     D4 FF 40 1B 
17385     5F 60 10 C8 | 	byte	$c7, $ff, $08, $00, $ff, $30, $00, $e9, $d4, $ff, $40, $1b, $5f, $60, $10, $c8
17389     DF 3F 00 08 
1738d     E8 EF E8 E7 
17391     08 D0 CF E2 
17395     CF EF D9 FF | 	byte	$df, $3f, $00, $08, $e8, $ef, $e8, $e7, $08, $d0, $cf, $e2, $cf, $ef, $d9, $ff
17399     10 D0 C2 A8 
1739d     AF F7 0B 10 
173a1     E0 B0 AF 1F 
173a5     C0 DF 10 FF | 	byte	$10, $d0, $c2, $a8, $af, $f7, $0b, $10, $e0, $b0, $af, $1f, $c0, $df, $10, $ff
173a9     34 00 FF 3F 
173ad     28 24 00 FF 
173b1     5F 40 DF F4 
173b5     E0 E7 1F 38 | 	byte	$34, $00, $ff, $3f, $28, $24, $00, $ff, $5f, $40, $df, $f4, $e0, $e7, $1f, $38
173b9     10 C8 DF 0F 
173bd     00 ED F0 FF 
173c1     00 FF E0 DF 
173c5     F9 E7 06 FF | 	byte	$10, $c8, $df, $0f, $00, $ed, $f0, $ff, $00, $ff, $e0, $df, $f9, $e7, $06, $ff
173c9     2F 44 20 CB 
173cd     FF 14 1F 50 
173d1     00 DF F4 FF 
173d5     08 DA E8 EF | 	byte	$2f, $44, $20, $cb, $ff, $14, $1f, $50, $00, $df, $f4, $ff, $08, $da, $e8, $ef
173d9     34 E0 CF F4 
173dd     DC FF 00 EB 
173e1     12 0B F0 BF 
173e5     FF 1A 2D 00 | 	byte	$34, $e0, $cf, $f4, $dc, $ff, $00, $eb, $12, $0b, $f0, $bf, $ff, $1a, $2d, $00
173e9     B7 FF 00 C7 
173ed     FF F0 DF 02 
173f1     F8 FB 02 F7 
173f5     FF 3F 20 E0 | 	byte	$b7, $ff, $00, $c7, $ff, $f0, $df, $02, $f8, $fb, $02, $f7, $ff, $3f, $20, $e0
173f9     E7 0F 20 D0 
173fd     DF 38 C0 9F 
17401     0F 00 B7 C8 
17405     CF 1F 00 DF | 	byte	$e7, $0f, $20, $d0, $df, $38, $c0, $9f, $0f, $00, $b7, $c8, $cf, $1f, $00, $df
17409     00 C1 EE E5 
1740d     0E 05 10 E8 
17411     E8 E7 3F 40 
17415     E9 FE 03 0F | 	byte	$00, $c1, $ee, $e5, $0e, $05, $10, $e8, $e8, $e7, $3f, $40, $e9, $fe, $03, $0f
17419     20 F0 FF 1E 
1741d     F0 BF FF 38 
17421     00 EF 20 08 
17425     00 EB FF 46 | 	byte	$20, $f0, $ff, $1e, $f0, $bf, $ff, $38, $00, $ef, $20, $08, $00, $eb, $ff, $46
17429     08 F7 3F 30 
1742d     F7 37 38 2F 
17431     3C 28 08 13 
17435     2D 21 4F 40 | 	byte	$08, $f7, $3f, $30, $f7, $37, $38, $2f, $3c, $28, $08, $13, $2d, $21, $4f, $40
17439     1F 20 F0 F7 
1743d     04 F0 EB FD 
17441     04 D0 D7 DB 
17445     EF FC E0 EF | 	byte	$1f, $20, $f0, $f7, $04, $f0, $eb, $fd, $04, $d0, $d7, $db, $ef, $fc, $e0, $ef
17449     00 D7 2A E8 
1744d     DF 1F 20 FF 
17451     00 DD C0 AF 
17455     1F 40 00 FA | 	byte	$00, $d7, $2a, $e8, $df, $1f, $20, $ff, $00, $dd, $c0, $af, $1f, $40, $00, $fa
17459     D0 D7 FF 29 
1745d     14 2F 64 00 
17461     BF 1F 61 40 
17465     10 1B 20 00 | 	byte	$d0, $d7, $ff, $29, $14, $2f, $64, $00, $bf, $1f, $61, $40, $10, $1b, $20, $00
17469     ED 0F 26 20 
1746d     F7 1F 40 08 
17471     DF 0F 2C 02 
17475     1F 20 14 F0 | 	byte	$ed, $0f, $26, $20, $f7, $1f, $40, $08, $df, $0f, $2c, $02, $1f, $20, $14, $f0
17479     D1 EF F7 2A 
1747d     00 FF 10 0F 
17481     20 E8 EF ED 
17485     2F 40 07 1F | 	byte	$d1, $ef, $f7, $2a, $00, $ff, $10, $0f, $20, $e8, $ef, $ed, $2f, $40, $07, $1f
17489     30 00 CF 35 
1748d     04 F9 FF 03 
17491     27 E0 BF 17 
17495     08 E7 1F 24 | 	byte	$30, $00, $cf, $35, $04, $f9, $ff, $03, $27, $e0, $bf, $17, $08, $e7, $1f, $24
17499     E8 FF 14 00 
1749d     ED FF 2C 00 
174a1     E0 EF 13 0C 
174a5     0D 00 F0 EB | 	byte	$e8, $ff, $14, $00, $ed, $ff, $2c, $00, $e0, $ef, $13, $0c, $0d, $00, $f0, $eb
174a9     F7 E0 EF F0 
174ad     EF C4 DF D0 
174b1     BF C8 D7 F4 
174b5     DA F3 E8 F7 | 	byte	$f7, $e0, $ef, $f0, $ef, $c4, $df, $d0, $bf, $c8, $d7, $f4, $da, $f3, $e8, $f7
174b9     27 30 18 F8 
174bd     FF 2F 40 08 
174c1     1B 08 CF FF 
174c5     20 F7 2A E0 | 	byte	$27, $30, $18, $f8, $ff, $2f, $40, $08, $1b, $08, $cf, $ff, $20, $f7, $2a, $e0
174c9     F7 F0 FF 1B 
174cd     2C 00 EF E0 
174d1     D7 0C EA E4 
174d5     C4 EF 15 10 | 	byte	$f7, $f0, $ff, $1b, $2c, $00, $ef, $e0, $d7, $0c, $ea, $e4, $c4, $ef, $15, $10
174d9     D0 AB FF 18 
174dd     0F 00 FF FB 
174e1     11 F0 FF 00 
174e5     F3 00 C0 DF | 	byte	$d0, $ab, $ff, $18, $0f, $00, $ff, $fb, $11, $f0, $ff, $00, $f3, $00, $c0, $df
174e9     E8 D5 E7 F8 
174ed     B0 D7 F0 CF 
174f1     0F 07 2B 10 
174f5     E0 DF 3F 40 | 	byte	$e8, $d5, $e7, $f8, $b0, $d7, $f0, $cf, $0f, $07, $2b, $10, $e0, $df, $3f, $40
174f9     08 E8 1F 60 
174fd     20 FE 02 E8 
17501     D1 F7 0C E0 
17505     CB 0F E0 AF | 	byte	$08, $e8, $1f, $60, $20, $fe, $02, $e8, $d1, $f7, $0c, $e0, $cb, $0f, $e0, $af
17509     EB E1 FB 00 
1750d     C0 DF 08 D0 
17511     EF 08 F3 0D 
17515     0C 00 07 00 | 	byte	$eb, $e1, $fb, $00, $c0, $df, $08, $d0, $ef, $08, $f3, $0d, $0c, $00, $07, $00
17519     EB 0F 08 E0 
1751d     DD EF F3 0F 
17521     00 CD DF E3 
17525     0F 20 00 EF | 	byte	$eb, $0f, $08, $e0, $dd, $ef, $f3, $0f, $00, $cd, $df, $e3, $0f, $20, $00, $ef
17529     1F 20 00 04 
1752d     E8 17 30 18 
17531     00 BF F7 FD 
17535     04 EB FF 10 | 	byte	$1f, $20, $00, $04, $e8, $17, $30, $18, $00, $bf, $f7, $fd, $04, $eb, $ff, $10
17539     17 2A 10 E8 
1753d     F7 10 E8 FF 
17541     17 00 CA DF 
17545     0C E0 F7 0F | 	byte	$17, $2a, $10, $e8, $f7, $10, $e8, $ff, $17, $00, $ca, $df, $0c, $e0, $f7, $0f
17549     1D 10 0F 2A 
1754d     20 1B 2D 30 
17551     22 22 24 04 
17555     13 04 12 04 | 	byte	$1d, $10, $0f, $2a, $20, $1b, $2d, $30, $22, $22, $24, $04, $13, $04, $12, $04
17559     EC E4 DF DD 
1755d     FF 10 FF 00 
17561     E1 FF 10 F1 
17565     2F 40 00 FF | 	byte	$ec, $e4, $df, $dd, $ff, $10, $ff, $00, $e1, $ff, $10, $f1, $2f, $40, $00, $ff
17569     10 07 10 0A 
1756d     FD 17 10 F4 
17571     D9 FF 00 FF 
17575     20 00 F7 00 | 	byte	$10, $07, $10, $0a, $fd, $17, $10, $f4, $d9, $ff, $00, $ff, $20, $00, $f7, $00
17579     FB 20 E8 E7 
1757d     1F 20 13 27 
17581     28 0C 1F 4A 
17585     20 1B 2D 10 | 	byte	$fb, $20, $e8, $e7, $1f, $20, $13, $27, $28, $0c, $1f, $4a, $20, $1b, $2d, $10
17589     1F 00 FF 20 
1758d     FE F8 FF 20 
17591     F0 DF 0F 2B 
17595     28 00 FB F8 | 	byte	$1f, $00, $ff, $20, $fe, $f8, $ff, $20, $f0, $df, $0f, $2b, $28, $00, $fb, $f8
17599     FB 00 F5 1F 
1759d     10 DF 17 00 
175a1     E7 FE F3 0F 
175a5     0C 04 F3 14 | 	byte	$fb, $00, $f5, $1f, $10, $df, $17, $00, $e7, $fe, $f3, $0f, $0c, $04, $f3, $14
175a9     05 0D 0C F4 
175ad     E7 FF 00 F7 
175b1     FC F5 F2 EA 
175b5     EF 1B 10 FF | 	byte	$05, $0d, $0c, $f4, $e7, $ff, $00, $f7, $fc, $f5, $f2, $ea, $ef, $1b, $10, $ff
175b9     14 17 33 28 
175bd     03 2F 20 1F 
175c1     2E 20 08 00 
175c5     F9 F0 E3 0B | 	byte	$14, $17, $33, $28, $03, $2f, $20, $1f, $2e, $20, $08, $00, $f9, $f0, $e3, $0b
175c9     00 17 12 1E 
175cd     E8 DB 0F 1F 
175d1     10 EF 0B 00 
175d5     EB FF 08 FB | 	byte	$00, $17, $12, $1e, $e8, $db, $0f, $1f, $10, $ef, $0b, $00, $eb, $ff, $08, $fb
175d9     1F 20 F0 DF 
175dd     17 10 F0 D3 
175e1     FF 07 04 E1 
175e5     ED 15 00 D0 | 	byte	$1f, $20, $f0, $df, $17, $10, $f0, $d3, $ff, $07, $04, $e1, $ed, $15, $00, $d0
175e9     DF FF EC FF 
175ed     20 00 F8 D7 
175f1     FF 03 17 04 
175f5     F4 EA E0 E7 | 	byte	$df, $ff, $ec, $ff, $20, $00, $f8, $d7, $ff, $03, $17, $04, $f4, $ea, $e0, $e7
175f9     04 0B 00 FB 
175fd     F0 FB E0 EF 
17601     08 00 F4 F3 
17605     05 F4 F9 F2 | 	byte	$04, $0b, $00, $fb, $f0, $fb, $e0, $ef, $08, $00, $f4, $f3, $05, $f4, $f9, $f2
17609     F7 16 00 EB 
1760d     F0 E3 EB FF 
17611     F0 C8 DB EF 
17615     0F 08 EC FF | 	byte	$f7, $16, $00, $eb, $f0, $e3, $eb, $ff, $f0, $c8, $db, $ef, $0f, $08, $ec, $ff
17619     20 E4 DC BB 
1761d     DF FA E9 E7 
17621     FB 00 E0 EB 
17625     FB F3 0B 10 | 	byte	$20, $e4, $dc, $bb, $df, $fa, $e9, $e7, $fb, $00, $e0, $eb, $fb, $f3, $0b, $10
17629     08 0F 30 00 
1762d     F8 E9 FE 0F 
17631     08 DD FB E8 
17635     C1 E7 F8 D4 | 	byte	$08, $0f, $30, $00, $f8, $e9, $fe, $0f, $08, $dd, $fb, $e8, $c1, $e7, $f8, $d4
17639     CF EF F0 C4 
1763d     CF ED FB 06 
17641     E0 DF F3 1F 
17645     10 CD EF 10 | 	byte	$cf, $ef, $f0, $c4, $cf, $ed, $fb, $06, $e0, $df, $f3, $1f, $10, $cd, $ef, $10
17649     03 F8 F7 00 
1764d     F8 FB 0F 08 
17651     F3 F2 FF 16 
17655     1A 0E 14 00 | 	byte	$03, $f8, $f7, $00, $f8, $fb, $0f, $08, $f3, $f2, $ff, $16, $1a, $0e, $14, $00
17659     E8 EB F5 FF 
1765d     16 08 F8 E4 
17661     FD E8 DB FF 
17665     00 EC F7 F0 | 	byte	$e8, $eb, $f5, $ff, $16, $08, $f8, $e4, $fd, $e8, $db, $ff, $00, $ec, $f7, $f0
17669     E3 F0 E0 D0 
1766d     F7 14 E8 F7 
17671     00 EF 11 04 
17675     FF 18 F0 E7 | 	byte	$e3, $f0, $e0, $d0, $f7, $14, $e8, $f7, $00, $ef, $11, $04, $ff, $18, $f0, $e7
17679     12 00 F2 FD 
1767d     0B 00 E8 D7 
17681     FF 10 F3 FF 
17685     07 00 FA 13 | 	byte	$12, $00, $f2, $fd, $0b, $00, $e8, $d7, $ff, $10, $f3, $ff, $07, $00, $fa, $13
17689     00 FB 12 00 
1768d     FF 14 E8 FF 
17691     08 FF 12 00 
17695     17 38 00 0B | 	byte	$00, $fb, $12, $00, $ff, $14, $e8, $ff, $08, $ff, $12, $00, $17, $38, $00, $0b
17699     22 1B 28 1D 
1769d     12 0B 04 05 
176a1     0E 00 06 07 
176a5     00 DB FF E0 | 	byte	$22, $1b, $28, $1d, $12, $0b, $04, $05, $0e, $00, $06, $07, $00, $db, $ff, $e0
176a9     EF 1C 00 F0 
176ad     D7 FF 10 F5 
176b1     FF 1A 16 04 
176b5     00 07 23 18 | 	byte	$ef, $1c, $00, $f0, $d7, $ff, $10, $f5, $ff, $1a, $16, $04, $00, $07, $23, $18
176b9     27 28 F0 F7 
176bd     2F 20 15 22 
176c1     10 00 F5 F7 
176c5     04 E8 FB 00 | 	byte	$27, $28, $f0, $f7, $2f, $20, $15, $22, $10, $00, $f5, $f7, $04, $e8, $fb, $00
176c9     D7 F7 14 E8 
176cd     DF FF 08 E8 
176d1     EF 14 E8 E7 
176d5     08 FF 04 FB | 	byte	$d7, $f7, $14, $e8, $df, $ff, $08, $e8, $ef, $14, $e8, $e7, $08, $ff, $04, $fb
176d9     15 00 EF FF 
176dd     17 12 12 1B 
176e1     20 F4 17 14 
176e5     FB 1D 14 14 | 	byte	$15, $00, $ef, $ff, $17, $12, $12, $1b, $20, $f4, $17, $14, $fb, $1d, $14, $14
176e9     2F 28 00 03 
176ed     0D 13 21 08 
176f1     FB 0E 13 18 
176f5     04 17 18 0D | 	byte	$2f, $28, $00, $03, $0d, $13, $21, $08, $fb, $0e, $13, $18, $04, $17, $18, $0d
176f9     1E 18 02 07 
176fd     14 0B 0A 0B 
17701     27 20 00 06 
17705     F2 FF 15 12 | 	byte	$1e, $18, $02, $07, $14, $0b, $0a, $0b, $27, $20, $00, $06, $f2, $ff, $15, $12
17709     00 F4 FF 20 
1770d     F0 FF 10 F7 
17711     12 F0 DF 08 
17715     EB 27 20 0D | 	byte	$00, $f4, $ff, $20, $f0, $ff, $10, $f7, $12, $f0, $df, $08, $eb, $27, $20, $0d
17719     0F 24 00 F3 
1771d     FF 07 10 00 
17721     F3 02 FF 04 
17725     F0 FF 18 EB | 	byte	$0f, $24, $00, $f3, $ff, $07, $10, $00, $f3, $02, $ff, $04, $f0, $ff, $18, $eb
17729     FD 0A F0 E7 
1772d     17 00 EF F4 
17731     D9 FF 00 E8 
17735     FF 00 D5 E0 | 	byte	$fd, $0a, $f0, $e7, $17, $00, $ef, $f4, $d9, $ff, $00, $e8, $ff, $00, $d5, $e0
17739     D3 FF F0 D7 
1773d     FF 08 F8 DA 
17741     EF 07 1E 00 
17745     D1 EF 2F 18 | 	byte	$d3, $ff, $f0, $d7, $ff, $08, $f8, $da, $ef, $07, $1e, $00, $d1, $ef, $2f, $18
17749     FB 17 10 13 
1774d     10 07 08 0E 
17751     17 08 E8 E7 
17755     0F 10 F7 07 | 	byte	$fb, $17, $10, $13, $10, $07, $08, $0e, $17, $08, $e8, $e7, $0f, $10, $f7, $07
17759     00 F3 E8 DB 
1775d     FF E4 FF 18 
17761     E8 DE DC E9 
17765     EB FF 08 E0 | 	byte	$00, $f3, $e8, $db, $ff, $e4, $ff, $18, $e8, $de, $dc, $e9, $eb, $ff, $08, $e0
17769     FF F0 DF 17 
1776d     00 F8 FB 1F 
17771     10 F0 FB 00 
17775     E7 FF 00 F3 | 	byte	$ff, $f0, $df, $17, $00, $f8, $fb, $1f, $10, $f0, $fb, $00, $e7, $ff, $00, $f3
17779     F8 EB F0 DE 
1777d     ED EC EA E8 
17781     EF EB F7 18 
17785     E8 EF 2D 10 | 	byte	$f8, $eb, $f0, $de, $ed, $ec, $ea, $e8, $ef, $eb, $f7, $18, $e8, $ef, $2d, $10
17789     13 00 FB 10 
1778d     F6 F9 FF 08 
17791     E0 D3 FF 00 
17795     DB F2 ED 0F | 	byte	$13, $00, $fb, $10, $f6, $f9, $ff, $08, $e0, $d3, $ff, $00, $db, $f2, $ed, $0f
17799     14 E0 EF 0A 
1779d     F5 FF 04 E0 
177a1     F7 0D 07 25 
177a5     00 DF 15 00 | 	byte	$14, $e0, $ef, $0a, $f5, $ff, $04, $e0, $f7, $0d, $07, $25, $00, $df, $15, $00
177a9     E7 FB 0E 0C 
177ad     0F 22 00 F7 
177b1     08 02 05 08 
177b5     03 00 F7 FA | 	byte	$e7, $fb, $0e, $0c, $0f, $22, $00, $f7, $08, $02, $05, $08, $03, $00, $f7, $fa
177b9     F7 0E F9 07 
177bd     08 FC F8 0B 
177c1     00 F3 0D 0C 
177c5     F0 E5 FB F6 | 	byte	$f7, $0e, $f9, $07, $08, $fc, $f8, $0b, $00, $f3, $0d, $0c, $f0, $e5, $fb, $f6
177c9     FC F0 D7 EB 
177cd     F7 0B F4 EF 
177d1     FE 00 EC F3 
177d5     04 03 00 EF | 	byte	$fc, $f0, $d7, $eb, $f7, $0b, $f4, $ef, $fe, $00, $ec, $f3, $04, $03, $00, $ef
177d9     02 FF F0 DB 
177dd     FF 00 F8 FB 
177e1     04 F5 0F 04 
177e5     FF F8 07 0B | 	byte	$02, $ff, $f0, $db, $ff, $00, $f8, $fb, $04, $f5, $0f, $04, $ff, $f8, $07, $0b
177e9     18 00 E8 EF 
177ed     0A 00 03 F8 
177f1     EF 0F 24 00 
177f5     EF 04 FF 1F | 	byte	$18, $00, $e8, $ef, $0a, $00, $03, $f8, $ef, $0f, $24, $00, $ef, $04, $ff, $1f
177f9     20 08 FF 0A 
177fd     F8 EB FF 20 
17801     00 EF 10 EC 
17805     EB 0F 10 00 | 	byte	$20, $08, $ff, $0a, $f8, $eb, $ff, $20, $00, $ef, $10, $ec, $eb, $0f, $10, $00
17809     E8 FF 18 02 
1780d     F4 F5 FB 12 
17811     04 F8 F0 EF 
17815     1B 04 E0 FF | 	byte	$e8, $ff, $18, $02, $f4, $f5, $fb, $12, $04, $f8, $f0, $ef, $1b, $04, $e0, $ff
17819     20 00 EF 1F 
1781d     10 FB 00 FF 
17821     10 00 FF 18 
17825     E8 EF 1F 10 | 	byte	$20, $00, $ef, $1f, $10, $fb, $00, $ff, $10, $00, $ff, $18, $e8, $ef, $1f, $10
17829     FF 09 06 0F 
1782d     20 01 0F 00 
17831     0F 04 F2 ED 
17835     FF 12 0A FB | 	byte	$ff, $09, $06, $0f, $20, $01, $0f, $00, $0f, $04, $f2, $ed, $ff, $12, $0a, $fb
17839     19 00 D7 FF 
1783d     17 1A 10 F0 
17841     D7 1F 24 00 
17845     04 05 00 07 | 	byte	$19, $00, $d7, $ff, $17, $1a, $10, $f0, $d7, $1f, $24, $00, $04, $05, $00, $07
17849     04 0F 08 FD 
1784d     0B 10 02 1B 
17851     10 0F 1C 00 
17855     0B 10 00 FB | 	byte	$04, $0f, $08, $fd, $0b, $10, $02, $1b, $10, $0f, $1c, $00, $0b, $10, $00, $fb
17859     13 10 00 0B 
1785d     10 ED FF 0B 
17861     15 00 EB FC 
17865     EF FF 02 0A | 	byte	$13, $10, $00, $0b, $10, $ed, $ff, $0b, $15, $00, $eb, $fc, $ef, $ff, $02, $0a
17869     00 FD 00 E5 
1786d     FF 00 E4 FF 
17871     10 F6 F6 FF 
17875     0A 17 20 12 | 	byte	$00, $fd, $00, $e5, $ff, $00, $e4, $ff, $10, $f6, $f6, $ff, $0a, $17, $20, $12
17879     04 0C 04 FB 
1787d     0C FB 0F 14 
17881     10 F4 F7 08 
17885     F8 EE FF 10 | 	byte	$04, $0c, $04, $fb, $0c, $fb, $0f, $14, $10, $f4, $f7, $08, $f8, $ee, $ff, $10
17889     FF 0A E8 F5 
1788d     F8 F7 F0 FF 
17891     00 F7 04 F7 
17895     F4 F7 06 00 | 	byte	$ff, $0a, $e8, $f5, $f8, $f7, $f0, $ff, $00, $f7, $04, $f7, $f4, $f7, $06, $00
17899     FB 02 0B 11 
1789d     0C 06 0B 14 
178a1     F8 FF 10 00 
178a5     FE 0F 24 04 | 	byte	$fb, $02, $0b, $11, $0c, $06, $0b, $14, $f8, $ff, $10, $00, $fe, $0f, $24, $04
178a9     FF 03 0D 04 
178ad     F6 FF FA FD 
178b1     00 E5 EF FF 
178b5     FC FF 00 D5 | 	byte	$ff, $03, $0d, $04, $f6, $ff, $fa, $fd, $00, $e5, $ef, $ff, $fc, $ff, $00, $d5
178b9     FD F0 EF FA 
178bd     01 07 16 00 
178c1     F3 FE FF 04 
178c5     F4 0F 10 E2 | 	byte	$fd, $f0, $ef, $fa, $01, $07, $16, $00, $f3, $fe, $ff, $04, $f4, $0f, $10, $e2
178c9     EF FF 00 F7 
178cd     13 18 08 0D 
178d1     08 F5 07 10 
178d5     00 FF 0F 04 | 	byte	$ef, $ff, $00, $f7, $13, $18, $08, $0d, $08, $f5, $07, $10, $00, $ff, $0f, $04
178d9     F0 FF 0C FA 
178dd     F6 FF 0C 04 
178e1     07 21 10 0A 
178e5     12 04 0B 11 | 	byte	$f0, $ff, $0c, $fa, $f6, $ff, $0c, $04, $07, $21, $10, $0a, $12, $04, $0b, $11
178e9     0C F8 FF 08 
178ed     FF 0C F0 F7 
178f1     FC FB 06 F4 
178f5     E8 E3 EC E4 | 	byte	$0c, $f8, $ff, $08, $ff, $0c, $f0, $f7, $fc, $fb, $06, $f4, $e8, $e3, $ec, $e4
178f9     FD E8 F7 00 
178fd     E5 E9 F7 F0 
17901     E7 0A 00 F0 
17905     F7 0A 00 F0 | 	byte	$fd, $e8, $f7, $00, $e5, $e9, $f7, $f0, $e7, $0a, $00, $f0, $f7, $0a, $00, $f0
17909     FF 2B 10 03 
1790d     17 08 FF 0D 
17911     10 04 EE FF 
17915     0F 14 00 FE | 	byte	$ff, $2b, $10, $03, $17, $08, $ff, $0d, $10, $04, $ee, $ff, $0f, $14, $00, $fe
17919     09 06 00 F3 
1791d     FB 0F 10 E9 
17921     F7 F0 ED F5 
17925     02 F0 F7 0A | 	byte	$09, $06, $00, $f3, $fb, $0f, $10, $e9, $f7, $f0, $ed, $f5, $02, $f0, $f7, $0a
17929     00 FC F0 F7 
1792d     15 16 08 EC 
17931     FF 04 FE FF 
17935     0B 08 F0 E9 | 	byte	$00, $fc, $f0, $f7, $15, $16, $08, $ec, $ff, $04, $fe, $ff, $0b, $08, $f0, $e9
17939     F5 F2 F3 F8 
1793d     FD 04 EB EB 
17941     FB 04 FC E8 
17945     EF 02 F0 F5 | 	byte	$f5, $f2, $f3, $f8, $fd, $04, $eb, $eb, $fb, $04, $fc, $e8, $ef, $02, $f0, $f5
17949     F0 FF 00 F7 
1794d     FA 06 02 07 
17951     02 06 0E 0E 
17955     08 06 08 00 | 	byte	$f0, $ff, $00, $f7, $fa, $06, $02, $07, $02, $06, $0e, $0e, $08, $06, $08, $00
17959     0A 08 FC FA 
1795d     FF 00 E0 F7 
17961     08 F6 FB F4 
17965     F5 00 EB FF | 	byte	$0a, $08, $fc, $fa, $ff, $00, $e0, $f7, $08, $f6, $fb, $f4, $f5, $00, $eb, $ff
17969     F8 FA FB 07 
1796d     04 EA FD 08 
17971     02 08 0D 08 
17975     FE FB 0B 2A | 	byte	$f8, $fa, $fb, $07, $04, $ea, $fd, $08, $02, $08, $0d, $08, $fe, $fb, $0b, $2a
17979     08 FF 04 0F 
1797d     18 00 0C F1 
17981     FB F4 FF 0A 
17985     F8 E6 E1 EF | 	byte	$08, $ff, $04, $0f, $18, $00, $0c, $f1, $fb, $f4, $ff, $0a, $f8, $e6, $e1, $ef
17989     F0 EF F0 D4 
1798d     E7 F2 F0 EF 
17991     F4 ED F9 F8 
17995     F2 F7 0A 08 | 	byte	$f0, $ef, $f0, $d4, $e7, $f2, $f0, $ef, $f4, $ed, $f9, $f8, $f2, $f7, $0a, $08
17999     02 FF 04 06 
1799d     02 FF 1A 10 
179a1     09 1A 12 04 
179a5     03 15 1C 07 | 	byte	$02, $ff, $04, $06, $02, $ff, $1a, $10, $09, $1a, $12, $04, $03, $15, $1c, $07
179a9     1F 00 FF 08 
179ad     01 0F 04 F9 
179b1     05 00 FB F2 
179b5     E3 FB 0C 04 | 	byte	$1f, $00, $ff, $08, $01, $0f, $04, $f9, $05, $00, $fb, $f2, $e3, $fb, $0c, $04
179b9     EA FF 10 04 
179bd     EC FF 18 15 
179c1     1A 16 10 09 
179c5     0F 10 00 ED | 	byte	$ea, $ff, $10, $04, $ec, $ff, $18, $15, $1a, $16, $10, $09, $0f, $10, $00, $ed
179c9     FF 14 00 EE 
179cd     E7 FB FE F4 
179d1     E5 FF 06 06 
179d5     F0 EF EA EF | 	byte	$ff, $14, $00, $ee, $e7, $fb, $fe, $f4, $e5, $ff, $06, $06, $f0, $ef, $ea, $ef
179d9     08 F8 0F 10 
179dd     F0 FF 00 FF 
179e1     1E 10 FF 13 
179e5     0C 17 20 0D | 	byte	$08, $f8, $0f, $10, $f0, $ff, $00, $ff, $1e, $10, $ff, $13, $0c, $17, $20, $0d
179e9     1A 00 13 10 
179ed     0C 02 02 00 
179f1     F9 0A F0 EF 
179f5     04 00 F4 F9 | 	byte	$1a, $00, $13, $10, $0c, $02, $02, $00, $f9, $0a, $f0, $ef, $04, $00, $f4, $f9
179f9     FF 00 E4 F3 
179fd     00 F7 07 13 
17a01     14 00 05 02 
17a05     0F 23 20 F2 | 	byte	$ff, $00, $e4, $f3, $00, $f7, $07, $13, $14, $00, $05, $02, $0f, $23, $20, $f2
17a09     0D 11 0D 04 
17a0d     FF 08 F8 FF 
17a11     0A 00 FB F8 
17a15     ED FF 0D 08 | 	byte	$0d, $11, $0d, $04, $ff, $08, $f8, $ff, $0a, $00, $fb, $f8, $ed, $ff, $0d, $08
17a19     0F 04 FB 06 
17a1d     00 F3 FF 0C 
17a21     00 09 F2 EF 
17a25     0D F4 EE FF | 	byte	$0f, $04, $fb, $06, $00, $f3, $ff, $0c, $00, $09, $f2, $ef, $0d, $f4, $ee, $ff
17a29     14 00 02 00 
17a2d     FD 07 12 10 
17a31     0A 0C 04 0F 
17a35     17 20 19 14 | 	byte	$14, $00, $02, $00, $fd, $07, $12, $10, $0a, $0c, $04, $0f, $17, $20, $19, $14
17a39     00 FF 0F 10 
17a3d     0C FC FF 00 
17a41     F9 FF 08 00 
17a45     E5 F5 FA F0 | 	byte	$00, $ff, $0f, $10, $0c, $fc, $ff, $00, $f9, $ff, $08, $00, $e5, $f5, $fa, $f0
17a49     DD EF F0 EF 
17a4d     08 F0 F7 F0 
17a51     EF 06 09 05 
17a55     07 08 F4 FF | 	byte	$dd, $ef, $f0, $ef, $08, $f0, $f7, $f0, $ef, $06, $09, $05, $07, $08, $f4, $ff
17a59     F8 F5 01 FF 
17a5d     14 00 ED ED 
17a61     EE F5 F4 EA 
17a65     FB 00 E1 FF | 	byte	$f8, $f5, $01, $ff, $14, $00, $ed, $ed, $ee, $f5, $f4, $ea, $fb, $00, $e1, $ff
17a69     F0 EB FC EF 
17a6d     F8 E0 FF 10 
17a71     F0 ED 0B 1C 
17a75     00 FF 14 04 | 	byte	$f0, $eb, $fc, $ef, $f8, $e0, $ff, $10, $f0, $ed, $0b, $1c, $00, $ff, $14, $04
17a79     13 18 FD 0A 
17a7d     F8 0B 10 02 
17a81     F4 F6 FB FA 
17a85     F7 FD F9 FF | 	byte	$13, $18, $fd, $0a, $f8, $0b, $10, $02, $f4, $f6, $fb, $fa, $f7, $fd, $f9, $ff
17a89     04 FA FF 04 
17a8d     F8 EF 0D 10 
17a91     04 F0 0F 08 
17a95     F3 FF F2 FF | 	byte	$04, $fa, $ff, $04, $f8, $ef, $0d, $10, $04, $f0, $0f, $08, $f3, $ff, $f2, $ff
17a99     00 FF F0 F7 
17a9d     F4 EF 17 0C 
17aa1     07 16 00 FB 
17aa5     13 08 02 FC | 	byte	$00, $ff, $f0, $f7, $f4, $ef, $17, $0c, $07, $16, $00, $fb, $13, $08, $02, $fc
17aa9     0B 18 F0 EF 
17aad     ED EF FF F2 
17ab1     F1 F6 F0 EA 
17ab5     EA E2 F7 F6 | 	byte	$0b, $18, $f0, $ef, $ed, $ef, $ff, $f2, $f1, $f6, $f0, $ea, $ea, $e2, $f7, $f6
17ab9     F1 FE E4 EF 
17abd     10 00 F3 FF 
17ac1     08 FA FD FF 
17ac5     17 10 02 05 | 	byte	$f1, $fe, $e4, $ef, $10, $00, $f3, $ff, $08, $fa, $fd, $ff, $17, $10, $02, $05
17ac9     00 F9 F0 FF 
17acd     18 00 FF 0C 
17ad1     E8 F5 F8 F7 
17ad5     F4 FB F8 F7 | 	byte	$00, $f9, $f0, $ff, $18, $00, $ff, $0c, $e8, $f5, $f8, $f7, $f4, $fb, $f8, $f7
17ad9     0E F0 F7 12 
17add     02 03 0F 18 
17ae1     FD 23 10 05 
17ae5     0C 0A 0C 02 | 	byte	$0e, $f0, $f7, $12, $02, $03, $0f, $18, $fd, $23, $10, $05, $0c, $0a, $0c, $02
17ae9     F2 FD 14 00 
17aed     F3 FD F7 F8 
17af1     EB FF F8 FB 
17af5     EC FF 08 E4 | 	byte	$f2, $fd, $14, $00, $f3, $fd, $f7, $f8, $eb, $ff, $f8, $fb, $ec, $ff, $08, $e4
17af9     FB 14 04 0F 
17afd     10 F9 17 20 
17b01     10 12 09 27 
17b05     10 FF 18 00 | 	byte	$fb, $14, $04, $0f, $10, $f9, $17, $20, $10, $12, $09, $27, $10, $ff, $18, $00
17b09     F7 05 15 08 
17b0d     E9 F2 F7 01 
17b11     F0 ED FF 04 
17b15     00 00 0D 00 | 	byte	$f7, $05, $15, $08, $e9, $f2, $f7, $01, $f0, $ed, $ff, $04, $00, $00, $0d, $00
17b19     E7 FF 10 F0 
17b1d     F5 03 F8 E9 
17b21     FF 00 ED F3 
17b25     F3 FF 13 04 | 	byte	$e7, $ff, $10, $f0, $f5, $03, $f8, $e9, $ff, $00, $ed, $f3, $f3, $ff, $13, $04
17b29     EF FF 10 00 
17b2d     07 14 00 FB 
17b31     00 07 10 00 
17b35     13 10 F0 0B | 	byte	$ef, $ff, $10, $00, $07, $14, $00, $fb, $00, $07, $10, $00, $13, $10, $f0, $0b
17b39     14 1A 00 FF 
17b3d     0D 10 F8 FE 
17b41     FE FF 08 00 
17b45     F5 07 00 FD | 	byte	$14, $1a, $00, $ff, $0d, $10, $f8, $fe, $fe, $ff, $08, $00, $f5, $07, $00, $fd
17b49     F9 0F 14 04 
17b4d     00 FF 26 08 
17b51     FF 2D 20 FC 
17b55     0A 12 08 F5 | 	byte	$f9, $0f, $14, $04, $00, $ff, $26, $08, $ff, $2d, $20, $fc, $0a, $12, $08, $f5
17b59     F8 F7 F0 EB 
17b5d     00 EA F9 E0 
17b61     D7 F3 F8 F0 
17b65     F7 FF 0A 00 | 	byte	$f8, $f7, $f0, $eb, $00, $ea, $f9, $e0, $d7, $f3, $f8, $f0, $f7, $ff, $0a, $00
17b69     FF 16 10 0D 
17b6d     14 0B 0A 01 
17b71     11 10 0D 08 
17b75     00 FE 0B 0A | 	byte	$ff, $16, $10, $0d, $14, $0b, $0a, $01, $11, $10, $0d, $08, $00, $fe, $0b, $0a
17b79     F9 FB 00 ED 
17b7d     EF F3 07 08 
17b81     02 07 08 F3 
17b85     0B 00 FF 15 | 	byte	$f9, $fb, $00, $ed, $ef, $f3, $07, $08, $02, $07, $08, $f3, $0b, $00, $ff, $15
17b89     04 FF 10 F0 
17b8d     F5 06 0A F8 
17b91     EF 0D 08 FB 
17b95     FA E7 FF 14 | 	byte	$04, $ff, $10, $f0, $f5, $06, $0a, $f8, $ef, $0d, $08, $fb, $fa, $e7, $ff, $14
17b99     03 08 F8 FF 
17b9d     04 F7 0B 14 
17ba1     08 EA F7 1C 
17ba5     00 EB FF 00 | 	byte	$03, $08, $f8, $ff, $04, $f7, $0b, $14, $08, $ea, $f7, $1c, $00, $eb, $ff, $00
17ba9     F8 F6 F7 FC 
17bad     F2 F5 F8 E0 
17bb1     DF EA E4 E0 
17bb5     EF F4 D8 D7 | 	byte	$f8, $f6, $f7, $fc, $f2, $f5, $f8, $e0, $df, $ea, $e4, $e0, $ef, $f4, $d8, $d7
17bb9     FD 08 F0 FB 
17bbd     00 03 0F 16 
17bc1     08 07 1B 20 
17bc5     08 0F 14 08 | 	byte	$fd, $08, $f0, $fb, $00, $03, $0f, $16, $08, $07, $1b, $20, $08, $0f, $14, $08
17bc9     12 04 0D 0C 
17bcd     E8 EF 04 EA 
17bd1     EF FE F8 EF 
17bd5     F9 FB FE 05 | 	byte	$12, $04, $0d, $0c, $e8, $ef, $04, $ea, $ef, $fe, $f8, $ef, $f9, $fb, $fe, $05
17bd9     04 F7 0F 00 
17bdd     FD 05 0D 13 
17be1     06 00 F1 FF 
17be5     00 FC F8 F0 | 	byte	$04, $f7, $0f, $00, $fd, $05, $0d, $13, $06, $00, $f1, $ff, $00, $fc, $f8, $f0
17be9     EF FF FC F3 
17bed     FE FC F6 FF 
17bf1     00 07 00 F9 
17bf5     F7 05 00 FD | 	byte	$ef, $ff, $fc, $f3, $fe, $fc, $f6, $ff, $00, $07, $00, $f9, $f7, $05, $00, $fd
17bf9     09 04 EE FF 
17bfd     00 FB 07 03 
17c01     00 F6 FD FA 
17c05     E8 EB FD 0D | 	byte	$09, $04, $ee, $ff, $00, $fb, $07, $03, $00, $f6, $fd, $fa, $e8, $eb, $fd, $0d
17c09     00 E9 F5 07 
17c0d     00 EF 0F 00 
17c11     FA 01 FD FF 
17c15     0D 0B 15 08 | 	byte	$00, $e9, $f5, $07, $00, $ef, $0f, $00, $fa, $01, $fd, $ff, $0d, $0b, $15, $08
17c19     0D 0D 08 00 
17c1d     F7 0B 10 F0 
17c21     E7 FC F1 FF 
17c25     04 F0 EF FF | 	byte	$0d, $0d, $08, $00, $f7, $0b, $10, $f0, $e7, $fc, $f1, $ff, $04, $f0, $ef, $ff
17c29     01 09 01 0F 
17c2d     18 07 1D 18 
17c31     08 0F 1A 14 
17c35     1F 28 08 07 | 	byte	$01, $09, $01, $0f, $18, $07, $1d, $18, $08, $0f, $1a, $14, $1f, $28, $08, $07
17c39     0C 00 F4 0F 
17c3d     04 EB FD E4 
17c41     DF F7 F8 EA 
17c45     E8 E6 F3 0D | 	byte	$0c, $00, $f4, $0f, $04, $eb, $fd, $e4, $df, $f7, $f8, $ea, $e8, $e6, $f3, $0d
17c49     FA FF F8 FF 
17c4d     0C 04 08 F0 
17c51     FF 0C 00 F6 
17c55     FF 04 FA F8 | 	byte	$fa, $ff, $f8, $ff, $0c, $04, $08, $f0, $ff, $0c, $00, $f6, $ff, $04, $fa, $f8
17c59     FC F6 F6 F7 
17c5d     05 0E 00 FB 
17c61     12 10 0C 02 
17c65     04 00 F7 FE | 	byte	$fc, $f6, $f6, $f7, $05, $0e, $00, $fb, $12, $10, $0c, $02, $04, $00, $f7, $fe
17c69     08 04 00 F2 
17c6d     FF 08 02 00 
17c71     FF 18 00 FE 
17c75     FD 04 FA FF | 	byte	$08, $04, $00, $f2, $ff, $08, $02, $00, $ff, $18, $00, $fe, $fd, $04, $fa, $ff
17c79     05 00 F0 F3 
17c7d     F6 F7 07 12 
17c81     00 E5 FF 10 
17c85     05 17 14 09 | 	byte	$05, $00, $f0, $f3, $f6, $f7, $07, $12, $00, $e5, $ff, $10, $05, $17, $14, $09
17c89     01 FA FF 00 
17c8d     FB 09 04 04 
17c91     F8 EA EB EF 
17c95     13 08 ED 0F | 	byte	$01, $fa, $ff, $00, $fb, $09, $04, $04, $f8, $ea, $eb, $ef, $13, $08, $ed, $0f
17c99     08 F2 FF 16 
17c9d     0E 0C 02 0B 
17ca1     0C 08 06 08 
17ca5     03 0B 0A F0 | 	byte	$08, $f2, $ff, $16, $0e, $0c, $02, $0b, $0c, $08, $06, $08, $03, $0b, $0a, $f0
17ca9     F9 F4 F1 F1 
17cad     FF EC E4 E2 
17cb1     EB F2 E9 EC 
17cb5     F1 FB 02 F9 | 	byte	$f9, $f4, $f1, $f1, $ff, $ec, $e4, $e2, $eb, $f2, $e9, $ec, $f1, $fb, $02, $f9
17cb9     F4 FF 1B 10 
17cbd     00 0F 18 01 
17cc1     0F 04 05 12 
17cc5     06 06 F8 FF | 	byte	$f4, $ff, $1b, $10, $00, $0f, $18, $01, $0f, $04, $05, $12, $06, $06, $f8, $ff
17cc9     00 EC F3 F8 
17ccd     EB F7 08 00 
17cd1     F7 F2 F3 02 
17cd5     F5 FF FC F8 | 	byte	$00, $ec, $f3, $f8, $eb, $f7, $08, $00, $f7, $f2, $f3, $02, $f5, $ff, $fc, $f8
17cd9     FF 06 00 FD 
17cdd     00 FF 12 08 
17ce1     F9 15 0A FA 
17ce5     FF 0B 08 F4 | 	byte	$ff, $06, $00, $fd, $00, $ff, $12, $08, $f9, $15, $0a, $fa, $ff, $0b, $08, $f4
17ce9     FF 08 E9 F3 
17ced     FA F7 F6 F2 
17cf1     F2 FD 0C F0 
17cf5     E7 FF 09 00 | 	byte	$ff, $08, $e9, $f3, $fa, $f7, $f6, $f2, $f2, $fd, $0c, $f0, $e7, $ff, $09, $00
17cf9     F6 FB FD 0B 
17cfd     08 FD F9 F7 
17d01     02 F0 F7 04 
17d05     F4 FE 00 FC | 	byte	$f6, $fb, $fd, $0b, $08, $fd, $f9, $f7, $02, $f0, $f7, $04, $f4, $fe, $00, $fc
17d09     FF 02 09 08 
17d0d     0D 10 F0 FF 
17d11     14 02 0F 10 
17d15     FA FF 08 F8 | 	byte	$ff, $02, $09, $08, $0d, $10, $f0, $ff, $14, $02, $0f, $10, $fa, $ff, $08, $f8
17d19     FF 00 F1 F6 
17d1d     EF FF 00 E8 
17d21     F7 04 ED FF 
17d25     02 02 01 0B | 	byte	$ff, $00, $f1, $f6, $ef, $ff, $00, $e8, $f7, $04, $ed, $ff, $02, $02, $01, $0b
17d29     14 02 02 09 
17d2d     0C 08 0F 10 
17d31     F4 F1 F7 0F 
17d35     08 F2 FF FD | 	byte	$14, $02, $02, $09, $0c, $08, $0f, $10, $f4, $f1, $f7, $0f, $08, $f2, $ff, $fd
17d39     F6 F6 FF 00 
17d3d     F7 09 00 F9 
17d41     FD 02 00 F6 
17d45     F7 F8 FF 14 | 	byte	$f6, $f6, $ff, $00, $f7, $09, $00, $f9, $fd, $02, $00, $f6, $f7, $f8, $ff, $14
17d49     00 FF 06 00 
17d4d     FF 11 00 FF 
17d51     0D 00 FF 15 
17d55     04 F7 00 F7 | 	byte	$00, $ff, $06, $00, $ff, $11, $00, $ff, $0d, $00, $ff, $15, $04, $f7, $00, $f7
17d59     FD FA FF 00 
17d5d     F9 FF FC 05 
17d61     08 0A 00 FF 
17d65     07 0A 00 0F | 	byte	$fd, $fa, $ff, $00, $f9, $ff, $fc, $05, $08, $0a, $00, $ff, $07, $0a, $00, $0f
17d69     0C 09 09 0C 
17d6d     04 FF 04 FB 
17d71     08 00 F8 F2 
17d75     FE F8 E9 F7 | 	byte	$0c, $09, $09, $0c, $04, $ff, $04, $fb, $08, $00, $f8, $f2, $fe, $f8, $e9, $f7
17d79     FD F0 E9 EB 
17d7d     FF 00 FB 00 
17d81     FF 0E 00 FF 
17d85     0C 00 FB 03 | 	byte	$fd, $f0, $e9, $eb, $ff, $00, $fb, $00, $ff, $0e, $00, $ff, $0c, $00, $fb, $03
17d89     08 F8 FF 00 
17d8d     EA EF 05 00 
17d91     EF FB F6 FB 
17d95     FF 09 06 0A | 	byte	$08, $f8, $ff, $00, $ea, $ef, $05, $00, $ef, $fb, $f6, $fb, $ff, $09, $06, $0a
17d99     08 07 02 FE 
17d9d     05 04 00 FB 
17da1     FC EC F5 F5 
17da5     FF 00 F6 F9 | 	byte	$08, $07, $02, $fe, $05, $04, $00, $fb, $fc, $ec, $f5, $f5, $ff, $00, $f6, $f9
17da9     F7 FF 08 FA 
17dad     F1 0B 0A 00 
17db1     FC F1 FF 00 
17db5     F5 FF 10 00 | 	byte	$f7, $ff, $08, $fa, $f1, $0b, $0a, $00, $fc, $f1, $ff, $00, $f5, $ff, $10, $00
17db9     F7 05 05 0B 
17dbd     00 FF 16 08 
17dc1     01 06 00 F8 
17dc5     F3 FD 0F 10 | 	byte	$f7, $05, $05, $0b, $00, $ff, $16, $08, $01, $06, $00, $f8, $f3, $fd, $0f, $10
17dc9     00 F7 0B 08 
17dcd     05 09 12 08 
17dd1     09 0C 05 04 
17dd5     05 0B 0D 08 | 	byte	$00, $f7, $0b, $08, $05, $09, $12, $08, $09, $0c, $05, $04, $05, $0b, $0d, $08
17dd9     05 09 00 F5 
17ddd     FB 05 F4 F5 
17de1     04 00 F4 F4 
17de5     F1 FB E2    | 	byte	$05, $09, $00, $f5, $fb, $05, $f4, $f5, $04, $00, $f4, $f4, $f1, $fb, $e2
17de8                 | 	alignl
17de8                 | _hng030rm_spin2_dat_
17de8     00 00 00 00 
17dec     00 00 00 00 
17df0     00 00 00 00 
17df4     00 00 00 00 
17df8     00 00 00    | vga_font       file "vgafont.def"
17dfb     7E 81 A5 81 
17dff     81 BD 99 81 
17e03     81 7E 00 00 
17e07     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
17e0b     7E FF DB FF 
17e0f     FF C3 E7 FF 
17e13     FF 7E 00 00 
17e17     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
17e1b     00 36 7F 7F 
17e1f     7F 7F 3E 1C 
17e23     08 00 00 00 
17e27     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
17e2b     00 08 1C 3E 
17e2f     7F 3E 1C 08 
17e33     00 00 00 00 
17e37     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
17e3b     18 3C 3C E7 
17e3f     E7 E7 18 18 
17e43     3C 00 00 00 
17e47     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
17e4b     18 3C 7E FF 
17e4f     FF 7E 18 18 
17e53     3C 00 00 00 
17e57     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
17e5b     00 00 00 18 
17e5f     3C 3C 18 00 
17e63     00 00 00 00 
17e67     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
17e6b     FF FF FF E7 
17e6f     C3 C3 E7 FF 
17e73     FF FF FF FF 
17e77     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
17e7b     00 00 3C 66 
17e7f     42 42 66 3C 
17e83     00 00 00 00 
17e87     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
17e8b     FF FF C3 99 
17e8f     BD BD 99 C3 
17e93     FF FF FF FF 
17e97     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
17e9b     78 70 58 4C 
17e9f     1E 33 33 33 
17ea3     33 1E 00 00 
17ea7     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
17eab     3C 66 66 66 
17eaf     66 3C 18 7E 
17eb3     18 18 00 00 
17eb7     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
17ebb     FC CC FC 0C 
17ebf     0C 0C 0C 0E 
17ec3     0F 07 00 00 
17ec7     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
17ecb     FE C6 FE C6 
17ecf     C6 C6 C6 E6 
17ed3     E7 67 03 00 
17ed7     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
17edb     18 18 DB 3C 
17edf     E7 3C DB 18 
17ee3     18 00 00 00 
17ee7     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
17eeb     03 07 0F 1F 
17eef     7F 1F 0F 07 
17ef3     03 01 00 00 
17ef7     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
17efb     60 70 78 7C 
17eff     7F 7C 78 70 
17f03     60 40 00 00 
17f07     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
17f0b     18 3C 7E 18 
17f0f     18 18 7E 3C 
17f13     18 00 00 00 
17f17     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
17f1b     66 66 66 66 
17f1f     66 66 66    | 	byte	$66[7]
17f22     00 66 66 00 
17f26     00 00 00 00 
17f2a     00 FE DB DB 
17f2e     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
17f32     D8 D8 D8 00 
17f36     00 00 00 3E 
17f3a     63 06 1C 36 
17f3e     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
17f42     30 63 3E 00 
17f46     00 00 00 00 
17f4a     00 00 00 00 
17f4e     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
17f52     7F 7F 7F 00 
17f56     00 00 00 00 
17f5a     00 18 3C 7E 
17f5e     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
17f62     3C 18 7E 00 
17f66     00 00 00 00 
17f6a     00 18 3C 7E 
17f6e     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
17f72     18 18 18 00 
17f76     00 00 00 00 
17f7a     00 18 18 18 
17f7e     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
17f82     7E 3C 18 00 
17f86     00 00 00 00 
17f8a     00 00 00 18 
17f8e     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
17f92     00 00 00 00 
17f96     00 00 00 00 
17f9a     00 00 00    | 	byte	$00[11]
17f9d     0C 06 7F 06 
17fa1     0C 00 00 00 
17fa5     00 00 00 00 
17fa9     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
17fad     00 03 03 03 
17fb1     7F 00 00 00 
17fb5     00 00 00 00 
17fb9     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
17fbd     14 36 7F 36 
17fc1     14 00 00 00 
17fc5     00 00 00 00 
17fc9     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
17fcd     1C 1C 3E 3E 
17fd1     7F 7F 00 00 
17fd5     00 00 00 00 
17fd9     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
17fdd     7F 3E 3E 1C 
17fe1     1C 08 00 00 
17fe5     00 00 00 00 
17fe9     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
17fed     00 00 00 00 
17ff1     00 00 00 00 
17ff5     00 00 00 00 
17ff9     00 00       | 	byte	$00[14]
17ffb     18 3C 3C 3C 
17fff     18 18 18 00 
18003     18 18 00 00 
18007     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1800b     66 24 00 00 
1800f     00 00 00 00 
18013     00 00 00 00 
18017     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1801b     00 36 36 7F 
1801f     36 36 36 7F 
18023     36 36 00 00 
18027     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1802b     3E 63 43 03 
1802f     3E 60 60 61 
18033     63 3E 18 18 
18037     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1803b     00 00 43 63 
1803f     30 18 0C 06 
18043     63 61 00 00 
18047     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1804b     1C 36 36 1C 
1804f     6E 3B 33 33 
18053     33 6E 00 00 
18057     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1805b     0C 0C 0C 06 
1805f     00 00 00 00 
18063     00 00 00 00 
18067     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1806b     30 18 0C 0C 
1806f     0C 0C 0C 0C 
18073     18 30 00 00 
18077     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1807b     0C 18 30 30 
1807f     30 30 30 30 
18083     18 0C 00 00 
18087     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1808b     00 00 00 66 
1808f     3C FF 3C 66 
18093     00 00 00 00 
18097     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
1809b     00 00 00 18 
1809f     18 7E 18 18 
180a3     00 00 00 00 
180a7     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
180ab     00 00 00 00 
180af     00 00 00 00 | 	byte	$00[8]
180b3     18 18 18 0C 
180b7     00 00 00 00 
180bb     00 00 00 00 
180bf     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
180c3     00 00 00 00 
180c7     00 00 00 00 
180cb     00 00 00 00 
180cf     00 00 00 00 | 	byte	$00[16]
180d3     18 18 00 00 
180d7     00 00 00 00 
180db     00 00 40 60 
180df     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
180e3     03 01 00 00 
180e7     00 00 00 00 
180eb     1C 36 63 63 
180ef     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
180f3     36 1C 00 00 
180f7     00 00 00 00 
180fb     18 1C 1E 18 
180ff     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
18103     18 7E 00 00 
18107     00 00 00 00 
1810b     3E 63 60 30 
1810f     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
18113     63 7F 00 00 
18117     00 00 00 00 
1811b     3E 63 60 60 
1811f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
18123     63 3E 00 00 
18127     00 00 00 00 
1812b     30 38 3C 36 
1812f     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
18133     30 78 00 00 
18137     00 00 00 00 
1813b     7F 03 03 03 
1813f     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
18143     63 3E 00 00 
18147     00 00 00 00 
1814b     1C 06 03 03 
1814f     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
18153     63 3E 00 00 
18157     00 00 00 00 
1815b     7F 63 60 60 
1815f     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
18163     0C 0C 00 00 
18167     00 00 00 00 
1816b     3E 63 63 63 
1816f     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
18173     63 3E 00 00 
18177     00 00 00 00 
1817b     3E 63 63 63 
1817f     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
18183     30 1E 00 00 
18187     00 00 00 00 
1818b     00 00 00 18 
1818f     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
18193     18 18 00 00 
18197     00 00 00 00 
1819b     00 00 00 18 
1819f     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
181a3     18 18 0C 00 
181a7     00 00 00 00 
181ab     00 60 30 18 
181af     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
181b3     30 60 00 00 
181b7     00 00 00 00 
181bb     00 00 00 7E 
181bf     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
181c3     00 00 00 00 
181c7     00 00 00 00 
181cb     00          | 	byte	$00[9]
181cc     06 0C 18 30 
181d0     60 30 18 0C 
181d4     06 00 00 00 
181d8     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
181dc     63 63 30 18 
181e0     18 18 00 18 
181e4     18 00 00 00 
181e8     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
181ec     3E 63 63 7B 
181f0     7B 7B 3B 03 
181f4     3E 00 00 00 
181f8     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
181fc     1C 36 63 63 
18200     7F 63 63 63 
18204     63 00 00 00 
18208     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
1820c     66 66 66 3E 
18210     66 66 66 66 
18214     3F 00 00 00 
18218     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
1821c     66 43 03 03 
18220     03 03 43 66 
18224     3C 00 00 00 
18228     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
1822c     36 66 66 66 
18230     66 66 66 36 
18234     1F 00 00 00 
18238     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
1823c     66 46 16 1E 
18240     16 06 46 66 
18244     7F 00 00 00 
18248     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
1824c     66 46 16 1E 
18250     16 06 06 06 
18254     0F 00 00 00 
18258     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
1825c     66 43 03 03 
18260     7B 63 63 66 
18264     5C 00 00 00 
18268     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
1826c     63 63 63 7F 
18270     63 63 63 63 
18274     63 00 00 00 
18278     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
1827c     18 18 18 18 
18280     18 18 18 18 | 	byte	$18[8]
18284     3C 00 00 00 
18288     00 00 00 78 
1828c     30 30 30 30 
18290     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
18294     1E 00 00 00 
18298     00 00 00 67 
1829c     66 66 36 1E 
182a0     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
182a4     67 00 00 00 
182a8     00 00 00 0F 
182ac     06 06 06 06 
182b0     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
182b4     7F 00 00 00 
182b8     00 00 00 63 
182bc     77 7F 7F 6B 
182c0     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
182c4     63 00 00 00 
182c8     00 00 00 63 
182cc     67 6F 7F 7B 
182d0     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
182d4     63 00 00 00 
182d8     00 00 00 3E 
182dc     63 63 63 63 
182e0     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
182e4     3E 00 00 00 
182e8     00 00 00 3F 
182ec     66 66 66 3E 
182f0     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
182f4     0F 00 00 00 
182f8     00 00 00 3E 
182fc     63 63 63 63 
18300     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
18304     3E 30 70 00 
18308     00 00 00 3F 
1830c     66 66 66 3E 
18310     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
18314     67 00 00 00 
18318     00 00 00 3E 
1831c     63 63 06 1C 
18320     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
18324     3E 00 00 00 
18328     00 00 00 7E 
1832c     7E 5A 18 18 
18330     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
18334     3C 00 00 00 
18338     00 00 00 63 
1833c     63 63 63 63 
18340     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
18344     3E 00 00 00 
18348     00 00 00 63 
1834c     63 63 63 63 
18350     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
18354     08 00 00 00 
18358     00 00 00 63 
1835c     63 63 63 6B 
18360     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
18364     36 00 00 00 
18368     00 00 00 63 
1836c     63 36 3E 1C 
18370     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
18374     63 00 00 00 
18378     00 00 00 66 
1837c     66 66 66 3C 
18380     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
18384     3C 00 00 00 
18388     00 00 00 7F 
1838c     63 61 30 18 
18390     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
18394     7F 00 00 00 
18398     00 00 00 3C 
1839c     0C 0C 0C 0C 
183a0     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
183a4     3C 00 00 00 
183a8     00 00 00 00 
183ac     01 03 07 0E 
183b0     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
183b4     40 00 00 00 
183b8     00 00 00 3C 
183bc     30 30 30 30 
183c0     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
183c4     3C 00 00 00 
183c8     1C 36 00 00 
183cc     00 00 00 00 
183d0     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
183d4     00 00 00 00 
183d8     00 00 00 00 
183dc     00 00 00 00 
183e0     00 00 00 00 
183e4     00          | 	byte	$00[17]
183e5     FF 00 00 0C 
183e9     18 00 00 00 
183ed     00 00 00 00 
183f1     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
183f5     00 00 00 00 
183f9     00 00 00 00 
183fd     00          | 	byte	$00[9]
183fe     1E 30 3E 33 
18402     33 33 6E 00 
18406     00 00 00 00 
1840a     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
1840e     1E 36 66 66 
18412     66 66 3E 00 
18416     00 00 00 00 
1841a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1841e     3E 63 03 03 
18422     03 63 3E 00 
18426     00 00 00 00 
1842a     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
1842e     3C 36 33 33 
18432     33 33 6E 00 
18436     00 00 00 00 
1843a     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1843e     3E 63 7F 03 
18442     03 63 3E 00 
18446     00 00 00 00 
1844a     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
1844e     0C 1E 0C 0C 
18452     0C 0C 1E 00 
18456     00 00 00 00 
1845a     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1845e     6E 33 33 33 
18462     33 33 3E 30 
18466     33 1E 00 00 
1846a     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
1846e     36 6E 66 66 
18472     66 66 67 00 
18476     00 00 00 00 
1847a     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
1847e     1C 18 18 18 
18482     18 18 3C 00 
18486     00 00 00 00 
1848a     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
1848e     70 60 60 60 
18492     60 60 60 66 
18496     66 3C 00 00 
1849a     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
1849e     66 36 1E 1E 
184a2     36 66 67 00 
184a6     00 00 00 00 
184aa     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
184ae     18 18 18 18 
184b2     18 18       | 	byte	$18[6]
184b4     3C 00 00 00 
184b8     00 00 00 00 
184bc     00 00 37 7F 
184c0     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
184c4     63 00 00 00 
184c8     00 00 00 00 
184cc     00 00 3B 66 
184d0     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
184d4     66 00 00 00 
184d8     00 00 00 00 
184dc     00 00 3E 63 
184e0     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
184e4     3E 00 00 00 
184e8     00 00 00 00 
184ec     00 00 3B 66 
184f0     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
184f4     3E 06 06 0F 
184f8     00 00 00 00 
184fc     00 00 6E 33 
18500     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
18504     3E 30 30 78 
18508     00 00 00 00 
1850c     00 00 3B 6E 
18510     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
18514     0F 00 00 00 
18518     00 00 00 00 
1851c     00 00 3E 63 
18520     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
18524     3E 00 00 00 
18528     00 00 00 08 
1852c     0C 0C 3F 0C 
18530     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
18534     38 00 00 00 
18538     00 00 00 00 
1853c     00 00 33 33 
18540     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
18544     6E 00 00 00 
18548     00 00 00 00 
1854c     00 00 63 63 
18550     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
18554     1C 00 00 00 
18558     00 00 00 00 
1855c     00 00 63 63 
18560     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
18564     36 00 00 00 
18568     00 00 00 00 
1856c     00 00 63 36 
18570     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
18574     63 00 00 00 
18578     00 00 00 00 
1857c     00 00 63 63 
18580     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
18584     7E 60 30 1F 
18588     00 00 00 00 
1858c     00 00 7F 33 
18590     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
18594     7F 00 00 00 
18598     00 00 00 70 
1859c     18 18 18 0E 
185a0     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
185a4     70 00 00 00 
185a8     00 00 00 18 
185ac     18 18 18 18 
185b0     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
185b4     18 00 00 00 
185b8     00 00 00 0E 
185bc     18 18 18 70 
185c0     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
185c4     0E 00 00 00 
185c8     6E 3B 00 00 
185cc     00 00 00 00 
185d0     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
185d4     00 00 00 00 
185d8     00 00 00 00 
185dc     00 00       | 	byte	$00[10]
185de     08 1C 36 63 
185e2     63 63 7F 00 
185e6     00 00 00 00 
185ea     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
185ee     03 03 03 03 
185f2     43 66 3C 18 
185f6     30 1E 00 00 
185fa     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
185fe     33 33 33 33 
18602     33 33       | 	byte	$33[6]
18604     6E 00 00 00 
18608     00 00 60 30 
1860c     18 00 3E 63 
18610     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
18614     3E 00 00 00 
18618     00 00 08 1C 
1861c     36 00 1E 30 
18620     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
18624     6E 00 00 00 
18628     00 00 00 00 
1862c     33 00 1E 30 
18630     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
18634     6E 00 00 00 
18638     00 00 1C 36 
1863c     1C 00 33 33 
18640     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
18644     6E 00 00 00 
18648     00 00 60 30 
1864c     18 00 3E 63 
18650     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
18654     3E 00 00 00 
18658     00 00 00 00 
1865c     00 00 3E 63 
18660     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
18664     3E 18 30 1E 
18668     00 00 00 1C 
1866c     58 78 38 18 
18670     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
18674     3C 00 00 00 
18678     00 00 00 00 
1867c     63 00 3E 63 
18680     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
18684     3E 00 00 00 
18688     66 33 00 3E 
1868c     63 63 63 63 
18690     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
18694     3E 00 00 00 
18698     00 00 CC 66 
1869c     33 00 3E 63 
186a0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
186a4     3E 00 00 00 
186a8     00 00 18 3C 
186ac     66 00 1C 18 
186b0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
186b4     3C 00 00 00 
186b8     30 18 00 7F 
186bc     63 61 30 18 
186c0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
186c4     7F 00 00 00 
186c8     00 63 00 08 
186cc     1C 36 63 63 
186d0     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
186d4     63 00 00 00 
186d8     30 18 00 3C 
186dc     66 43 03 03 
186e0     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
186e4     3C 00 00 00 
186e8     30 18 00 7F 
186ec     66 46 16 1E 
186f0     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
186f4     7F 00 00 00 
186f8     0C 06 00 0F 
186fc     06 06 06 06 
18700     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
18704     7F 00 00 00 
18708     30 18 00 1C 
1870c     18 18 18 18 
18710     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
18714     3C 00 00 00 
18718     00 00 08 1C 
1871c     36 00 3E 63 
18720     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
18724     3E 00 00 00 
18728     00 00 00 00 
1872c     63 00 3E 63 
18730     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
18734     3E 00 00 00 
18738     00 00 00 6F 
1873c     46 26 06 06 
18740     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
18744     7F 00 00 00 
18748     00 00 00 6E 
1874c     4C 2C 0C 0C 
18750     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
18754     1E 00 00 00 
18758     30 18 00 3E 
1875c     63 63 06 1C 
18760     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
18764     3E 00 00 00 
18768     00 00 60 30 
1876c     18 00 3E 63 
18770     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
18774     3E 00 00 00 
18778     00 63 00 3E 
1877c     63 63 63 63 
18780     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
18784     3E 00 00 00 
18788     00 63 00 63 
1878c     63 63 63 63 
18790     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
18794     3E 00 00 00 
18798     6C 38 00 7E 
1879c     7E 5A 18 18 
187a0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
187a4     3C 00 00 00 
187a8     00 00 60 48 
187ac     2C 0C 3F 0C 
187b0     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
187b4     38 00 00 00 
187b8     00 00 00 0F 
187bc     26 36 1E 0E 
187c0     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
187c4     7F 00 00 00 
187c8     00 00 00 00 
187cc     00 63 36 1C 
187d0     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
187d4     00 00 00 00 
187d8     00 00       | 	byte	$00[6]
187da     36 1C 08 00 
187de     3E 63 03 03 
187e2     03 63 3E 00 
187e6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
187ea     30 18 0C 00 
187ee     1E 30 3E 33 
187f2     33 33 6E 00 
187f6     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
187fa     60 30 18 00 
187fe     1C 18 18 18 
18802     18 18 3C 00 
18806     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1880a     60 30 18 00 
1880e     3E 63 63 63 
18812     63 63 3E 00 
18816     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1881a     30 18 0C 00 
1881e     33 33 33 33 
18822     33 33 6E 00 
18826     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1882a     00 08 1C 36 
1882e     63 63 7F 63 
18832     63 63 63 18 
18836     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1883a     00 00 00 00 
1883e     1E 30 3E 33 
18842     33 33 6E 18 
18846     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1884a     00 7F 63 61 
1884e     30 18 0C 06 
18852     43 63 7F 00 
18856     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1885a     36 1C 08 00 
1885e     7F 33 18 0C 
18862     06 63 7F 00 
18866     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1886a     00 7F 66 46 
1886e     16 1E 16 06 
18872     46 66 7F 18 
18876     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1887a     00 00 00 00 
1887e     3E 63 7F 03 
18882     03 63 3E 18 
18886     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1888a     00 3C 66 03 
1888e     1F 03 0F 03 
18892     03 66 3C 00 
18896     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
1889a     60 30 18 00 
1889e     7F 33 18 0C 
188a2     06 63 7F 00 
188a6     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
188aa     00 3C 66 43 
188ae     03 03 03 03 
188b2     43 66 3C 00 
188b6     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
188ba     00 00 00 00 
188be     3E 63 06 1C 
188c2     30 63 3E 18 
188c6     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
188ca     00 00 00 00 
188ce     00 00       | 	byte	$00[6]
188d0     6C 36 1B 36 
188d4     6C 00 00 00 
188d8     00 00 00 00 
188dc     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
188e0     1B 36 6C 36 
188e4     1B 00 00 00 
188e8     88 22 88 22 
188ec     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
188f0     88 22 88 22 
188f4     88 22 88 22 
188f8     AA 55 AA 55 
188fc     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
18900     AA 55 AA 55 
18904     AA 55 AA 55 
18908     BB EE BB EE 
1890c     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
18910     BB EE BB EE 
18914     BB EE BB EE 
18918     18 18 18 18 
1891c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
18920     18 18 18 18 
18924     18 18 18 18 
18928     18 18 18 18 
1892c     18 18 18    | 	byte	$18[15]
1892f     1F 18 18 18 
18933     18 18 18 18 
18937     18 30 18 00 
1893b     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1893f     63 7F 63 63 
18943     63 63 00 00 
18947     00 1C 36 00 
1894b     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1894f     63 7F 63 63 
18953     63 63 00 00 
18957     00 36 1C 00 
1895b     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1895f     1E 16 06 46 
18963     66 7F 00 00 
18967     00 00 00 00 
1896b     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
1896f     1C 30 60 63 
18973     63 3E 18 30 
18977     1E 6C 6C 6C 
1897b     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
1897f     6F 6C 6C 6C 
18983     6C 6C 6C 6C 
18987     6C 6C 6C 6C 
1898b     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1898f     6C 6C 6C 6C 
18993     6C 6C 6C 6C 
18997     6C          | 	byte	$6c[9]
18998     00 00 00 00 
1899c     00          | 	byte	$00[5]
1899d     7F 60 6F 6C 
189a1     6C 6C 6C 6C 
189a5     6C 6C 6C 6C 
189a9     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
189ad     6F 60 7F 00 
189b1     00 00 00 00 
189b5     00 00 00 18 
189b9     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
189bd     61 30 18 0C 
189c1     06 43 63 7F 
189c5     00 00 00 00 
189c9     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
189cd     00 7F 33 18 
189d1     0C 06 63 7F 
189d5     00 00 00 00 
189d9     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
189dd     00 00 1F 18 
189e1     18 18 18 18 
189e5     18 18 18 18 
189e9     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
189ed     18 18 F8 00 
189f1     00 00 00 00 
189f5     00 00 00 18 
189f9     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
189fd     18 18 FF 00 
18a01     00 00 00 00 
18a05     00 00 00 00 
18a09     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18a0d     00 00 FF 18 
18a11     18 18 18 18 
18a15     18 18 18 18 
18a19     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18a1d     18 18 F8 18 
18a21     18 18 18 18 
18a25     18 18 18 00 
18a29     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
18a2d     00 00 FF 00 
18a31     00 00 00 00 
18a35     00 00 00 18 
18a39     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
18a3d     18 18 FF 18 
18a41     18 18 18 18 
18a45     18 18 18 63 
18a49     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
18a4d     36 63 63 7F 
18a51     63 63 63 63 
18a55     00 00 00 00 
18a59     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
18a5d     00 1E 30 3E 
18a61     33 33 33 6E 
18a65     00 00 00 6C 
18a69     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
18a6d     EC 0C FC 00 
18a71     00 00 00 00 
18a75     00 00 00 00 
18a79     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18a7d     FC 0C EC 6C 
18a81     6C 6C 6C 6C 
18a85     6C 6C 6C 6C 
18a89     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18a8d     EF 00 FF 00 
18a91     00 00 00 00 
18a95     00 00 00 00 
18a99     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18a9d     FF 00 EF 6C 
18aa1     6C 6C 6C 6C 
18aa5     6C 6C 6C 6C 
18aa9     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
18aad     EC 0C EC 6C 
18ab1     6C 6C 6C 6C 
18ab5     6C 6C 6C 00 
18ab9     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
18abd     FF 00 FF 00 
18ac1     00 00 00 00 
18ac5     00 00 00 6C 
18ac9     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
18acd     EF 00 EF 6C 
18ad1     6C 6C 6C 6C 
18ad5     6C 6C 6C 00 
18ad9     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
18add     63 3E 63 63 
18ae1     63 63 3E 63 
18ae5     00 00 00 00 
18ae9     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
18aed     30 3C 36 33 
18af1     33 33 33 6E 
18af5     00 00 00 00 
18af9     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
18afd     66 66 6F 66 
18b01     66 66 36 1F 
18b05     00 00 00 36 
18b09     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
18b0d     66 66 66 66 
18b11     66 66       | 	byte	$66[6]
18b13     36 1F 00 00 
18b17     00 00 63 00 
18b1b     7F 66 46 16 
18b1f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
18b23     66 7F 00 00 
18b27     00 6C 38 00 
18b2b     38 30 30 3C 
18b2f     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
18b33     33 6E 00 00 
18b37     00 36 1C 00 
18b3b     63 67 6F 7F 
18b3f     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
18b43     63 63 00 00 
18b47     00 30 18 00 
18b4b     3C 18 18 18 
18b4f     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
18b53     18 3C 00 00 
18b57     00 3C 66 00 
18b5b     3C 18 18 18 
18b5f     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
18b63     18 3C 00 00 
18b67     00 00 00 36 
18b6b     1C 08 00 3E 
18b6f     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
18b73     63 3E 00 00 
18b77     00 18 18 18 
18b7b     18 18 18 18 
18b7f     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
18b83     00 00 00 00 
18b87     00 00 00 00 
18b8b     00 00 00 00 | 	byte	$00[12]
18b8f     F8 18 18 18 
18b93     18 18 18 18 
18b97     18 FF FF FF 
18b9b     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
18b9f     FF FF FF FF 
18ba3     FF FF FF FF 
18ba7     FF          | 	byte	$ff[9]
18ba8     00 00 00 00 
18bac     00 00 00    | 	byte	$00[7]
18baf     FF FF FF FF 
18bb3     FF FF FF FF 
18bb7     FF          | 	byte	$ff[9]
18bb8     00 00 00 7E 
18bbc     7E 5A 18 18 
18bc0     18 18 18 18 
18bc4     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
18bc8     1C 36 1C 63 
18bcc     63 63 63 63 
18bd0     63 63 63 63 
18bd4     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18bd8     FF FF FF FF 
18bdc     FF FF FF    | 	byte	$ff[7]
18bdf     00 00 00 00 
18be3     00 00 00 00 
18be7     00          | 	byte	$00[9]
18be8     30 18 00 3E 
18bec     63 63 63 63 
18bf0     63 63 63 63 
18bf4     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18bf8     00 00 00 1E 
18bfc     33 33 33 1B 
18c00     33 63 63 63 
18c04     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
18c08     1C 36 00 3E 
18c0c     63 63 63 63 
18c10     63 63 63 63 
18c14     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18c18     30 18 00 63 
18c1c     67 6F 7F 7B 
18c20     73 63 63 63 
18c24     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
18c28     00 00 60 30 
18c2c     18 00 3B 66 
18c30     66 66 66 66 
18c34     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
18c38     00 00 36 1C 
18c3c     08 00 3B 66 
18c40     66 66 66 66 
18c44     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
18c48     36 1C 00 3E 
18c4c     63 63 06 1C 
18c50     30 60 63 63 
18c54     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
18c58     00 00 36 1C 
18c5c     08 00 3E 63 
18c60     06 1C 30 63 
18c64     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
18c68     30 18 00 3F 
18c6c     66 66 66 3E 
18c70     36 66 66 66 
18c74     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
18c78     30 18 00 63 
18c7c     63 63 63 63 
18c80     63 63 63 63 
18c84     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18c88     00 00 60 30 
18c8c     18 00 3B 6E 
18c90     66 06 06 06 
18c94     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
18c98     66 33 00 63 
18c9c     63 63 63 63 
18ca0     63 63 63 63 
18ca4     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
18ca8     00 00 60 30 
18cac     18 00 63 63 
18cb0     63 63 63 63 
18cb4     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
18cb8     30 18 00 66 
18cbc     66 66 66 3C 
18cc0     18 18 18 18 
18cc4     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
18cc8     00 00 00 08 
18ccc     0C 0C 3F 0C 
18cd0     0C 0C 0C 6C 
18cd4     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
18cd8     30 18 00 00 
18cdc     00 00 00 00 
18ce0     00 00 00 00 
18ce4     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18ce8     00 00 00 00 
18cec     00 00 00 00 | 	byte	$00[8]
18cf0     7F 00 00 00 
18cf4     00 00 00 00 
18cf8     66 33 00 00 
18cfc     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
18d00     00 00 00 00 
18d04     00 00 00 00 
18d08     00 00 00 00 
18d0c     00 00 00 00 
18d10     00 00 00 00 
18d14     00          | 	byte	$00[21]
18d15     0C 06 3C 36 
18d19     1C 00 00 00 
18d1d     00 00 00 00 
18d21     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18d25     00 00 00 63 
18d29     3E 00 00 00 
18d2d     00 00 00 00 
18d31     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18d35     00 00 00 00 
18d39     3E 63 06 1C 
18d3d     36 63 63 36 
18d41     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
18d45     00 00 00 00 
18d49     00 00 00 00 | 	byte	$00[8]
18d4d     18 00 7E 00 
18d51     18 00 00 00 
18d55     00 00 00 00 
18d59     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18d5d     00 00 00 00 
18d61     00 00 00 00 | 	byte	$00[8]
18d65     18 30 1E 00 
18d69     00 00 1C 36 
18d6d     36 1C 00 00 
18d71     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
18d75     00 00 00 00 
18d79     63 00 00 00 
18d7d     00 00 00 00 
18d81     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18d85     00 00 00 18 
18d89     18 00 00 00 
18d8d     00 00 00 00 
18d91     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18d95     00 00 00 00 
18d99     00          | 	byte	$00[5]
18d9a     CC 66 33 00 
18d9e     33 33 33 33 
18da2     33 33 6E 00 
18da6     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
18daa     00 3F 66 66 
18dae     66 3E 36 66 
18db2     66 66 6F 00 
18db6     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
18dba     36 1C 08 00 
18dbe     3B 6E 66 06 
18dc2     06 06 0F 00 
18dc6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
18dca     00 00 00 7E 
18dce     7E 7E 7E 7E 
18dd2     7E 7E 00 00 
18dd6     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
18dda     00 00 00 00 
18dde     00 00 00 00 
18de2     00 00 00 00 
18de6     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18de8     00 00 00 00 
      ...             
18e18     00 00 00 00 
18e1c     00 00 00    | st_font        file "st4font.def"
18e1f     FF FF 00 00 
18e23     00 00 00 00 
18e27     00 18 18 18 
18e2b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18e2f     18 18 18 18 
18e33     18 18 18 18 
18e37     18          | 	byte	$18[9]
18e38     00 00 00 00 
18e3c     00 00 00    | 	byte	$00[7]
18e3f     FF FF 18 18 
18e43     18 18 18 18 
18e47     18 18 18 18 
18e4b     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18e4f     FF FF 00 00 
18e53     00 00 00 00 
18e57     00 18 18 18 
18e5b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18e5f     1F 1F 18 18 
18e63     18 18 18 18 
18e67     18 18 18 18 
18e6b     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18e6f     F8 F8 18 18 
18e73     18 18 18 18 
18e77     18 00 00 00 
18e7b     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
18e7f     1F 1F 18 18 
18e83     18 18 18 18 
18e87     18 00 00 00 
18e8b     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
18e8f     F8 F8 18 18 
18e93     18 18 18 18 
18e97     18 18 18 18 
18e9b     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
18e9f     1F 1F 00 00 
18ea3     00 00 00 00 
18ea7     00 18 18 18 
18eab     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18eaf     F8 F8 00 00 
18eb3     00 00 00 00 
18eb7     00 18 18 18 
18ebb     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
18ebf     FF FF 18 18 
18ec3     18 18 18 18 
18ec7     18 00 00 18 
18ecb     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
18ecf     66 7E 7E 66 
18ed3     66 66 66 30 
18ed7     18 00 00 7E 
18edb     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
18edf     3E 06 06 06 
18ee3     06 7E 7E 18 
18ee7     0C 30 18 3C 
18eeb     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
18eef     06 06 06 66 
18ef3     66 7E 3C 00 
18ef7     00 30 18 66 
18efb     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
18eff     7E 7E 76 76 
18f03     66 66 66 00 
18f07     00 30 18 7C 
18f0b     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
18f0f     1C 38 70 60 
18f13     60 7E 3E 00 
18f17     00 30 18 7E 
18f1b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
18f1f     18 0C 0C 06 
18f23     06 7E 7E 00 
18f27     00 18 18 00 
18f2b     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
18f2f     18 18 0C 0C 
18f33     06 7E 7E 00 
18f37     00 30 18 3C 
18f3b     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
18f3f     66 66 66 66 
18f43     66          | 	byte	$66[5]
18f44     7E 3C 00 00 
18f48     00 00 06 06 
18f4c     06 06 16 1E 
18f50     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
18f54     7E 7E 00 00 
18f58     00 00 00 00 
18f5c     00 3C 7C 60 
18f60     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
18f64     7E 7C 30 18 
18f68     00 00 00 00 
18f6c     00 3C 7E 66 
18f70     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
18f74     7E 7C 18 0C 
18f78     00 00 30 18 
18f7c     00 3C 3E 06 
18f80     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
18f84     7E 7C 00 00 
18f88     00 00 30 18 
18f8c     00 3E 7E 66 
18f90     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
18f94     66 66 00 00 
18f98     00 00 30 18 
18f9c     00 7C 7E 06 
18fa0     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
18fa4     7E 3E 00 00 
18fa8     00 00 30 18 
18fac     00 7E 7E 30 
18fb0     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
18fb4     7E 7E 00 00 
18fb8     00 00 18 18 
18fbc     00 7E 7E 30 
18fc0     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
18fc4     7E 7E 00 00 
18fc8     00 00 30 18 
18fcc     00 3C 7E 66 
18fd0     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
18fd4     7E 3C 00 00 
18fd8     00 00 1C 1C 
18fdc     18 18 38 3C 
18fe0     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
18fe4     3C 3C 00 00 
18fe8     00 00 00 00 
18fec     00 00 00 00 
18ff0     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
18ff4     00 00 00 00 
18ff8     00 00       | 	byte	$00[6]
18ffa     18 18 18 18 
18ffe     18 18 18 18 | 	byte	$18[8]
19002     00 00 18 18 
19006     00 00 00 00 
1900a     66 66 66 66 
1900e     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
19012     00 00 00 00 
19016     00 00 00 00 
1901a     00          | 	byte	$00[9]
1901b     66 66 FF FF 
1901f     66 66 FF FF 
19023     66 66 00 00 
19027     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1902b     7C 7E 06 06 
1902f     3E 7C 60 60 
19033     7E 3E 18 18 
19037     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1903b     66 30 30 18 
1903f     18 0C 0C 66 
19043     66 00 00 00 
19047     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1904b     66 66 3C 1C 
1904f     1C FC FE 66 
19053     66 FE FC 00 
19057     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1905b     18 18 18 18 
1905f     00 00 00 00 
19063     00 00 00 00 
19067     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1906b     18 1C 0C 0C 
1906f     0C 0C 0C 0C 
19073     1C 18 30 00 
19077     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1907b     18 38 30 30 
1907f     30 30 30 30 
19083     38 18 0C 00 
19087     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1908b     66 66 3C 3C 
1908f     FF FF 3C 3C 
19093     66 66 00 00 
19097     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1909b     00 18 18 18 
1909f     7E 7E 18 18 
190a3     18 00 00 00 
190a7     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
190ab     00 00 00 00 
190af     00 00       | 	byte	$00[6]
190b1     18 18 18 18 
190b5     18          | 	byte	$18[5]
190b6     0C 04 00 00 
190ba     00 00 00 00 
190be     7E 7E 00 00 
190c2     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
190c6     00 00 00 00 
190ca     00 00 00 00 
190ce     00 00 00 00 
190d2     00          | 	byte	$00[13]
190d3     18 18 18 00 
190d7     00 00 00 60 
190db     60 60 30 30 
190df     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
190e3     06 06 06 00 
190e7     00 00 00 3C 
190eb     7E 66 66 66 
190ef     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
190f3     66 7E 3C 00 
190f7     00 00 00 18 
190fb     18 1C 1C 18 
190ff     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
19103     18 7E 7E 00 
19107     00 00 00 3C 
1910b     7E 66 66 30 
1910f     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
19113     0C 7E 7E 00 
19117     00 00 00 7E 
1911b     7E 30 30 18 
1911f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
19123     66 7E 3C 00 
19127     00 00 00 30 
1912b     30 38 38 3C 
1912f     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
19133     7E 30 30 00 
19137     00 00 00 7E 
1913b     7E 06 06 3E 
1913f     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
19143     66 7E 3C 00 
19147     00 00 00 38 
1914b     3C 0E 06 06 
1914f     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
19153     66 7E 3C 00 
19157     00 00 00 7E 
1915b     7E 60 60 30 
1915f     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
19163     0C 0C 0C 00 
19167     00 00 00 3C 
1916b     7E 66 66 3C 
1916f     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
19173     66 7E 3C 00 
19177     00 00 00 3C 
1917b     7E 66 66 7E 
1917f     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
19183     70 3C 1C 00 
19187     00 00 00 00 
1918b     00 00 18 18 
1918f     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
19193     18 18 18 00 
19197     00 00 00 00 
1919b     00 00 18 18 
1919f     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
191a3     18 18 18 0C 
191a7     04 00 00 00 
191ab     70 38 1C 0E 
191af     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
191b3     70 00 00 00 
191b7     00 00 00 00 
191bb     00 00 7E 7E 
191bf     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
191c3     00 00 00 00 
191c7     00 00 00 00 | 	byte	$00[8]
191cb     0E 1C 38 70 
191cf     E0 70 38 1C 
191d3     0E 00 00 00 
191d7     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
191db     7E 66 66 30 
191df     30 18 18 18 
191e3     00 18 18 00 
191e7     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
191eb     7E 66 66 66 
191ef     66 36 06 66 
191f3     66 7E 3C 00 
191f7     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
191fb     3C 7E 66 66 
191ff     66 7E 7E 66 
19203     66 66 66 00 
19207     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1920b     7E 66 66 7E 
1920f     3E 66 66 66 
19213     66 7E 3E 00 
19217     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1921b     7E 66 66 06 
1921f     06 06 06 66 
19223     66 7E 3C 00 
19227     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1922b     7E 66 66 66 
1922f     66 66 66 66 
19233     66 7E 3E 00 
19237     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1923b     7E 06 06 3E 
1923f     3E 06 06 06 
19243     06 7E 7E 00 
19247     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1924b     7E 06 06 3E 
1924f     3E 06 06 06 
19253     06 06 06 00 
19257     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1925b     7E 06 06 76 
1925f     76 66 66 66 
19263     66 7E 3C 00 
19267     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1926b     66 66 66 7E 
1926f     7E 66 66 66 
19273     66 66 66 00 
19277     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1927b     7E 18 18 18 
1927f     18 18 18 18 
19283     18 7E 7E 00 
19287     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1928b     60 60 60 60 
1928f     60 60 60    | 	byte	$60[7]
19292     66 66 7E 3C 
19296     00 00 00 00 
1929a     66 66 36 36 
1929e     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
192a2     66 66 C6 C6 
192a6     00 00 00 00 
192aa     06 06 06 06 
192ae     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
192b2     06 06 7E 7E 
192b6     00 00 00 00 
192ba     C6 C6 EE EE 
192be     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
192c2     C6 C6 C6 C6 
192c6     00 00 00 00 
192ca     66 66 66 6E 
192ce     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
192d2     76 66 66 66 
192d6     00 00 00 00 
192da     3C 7E 66 66 
192de     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
192e2     66 66 7E 3C 
192e6     00 00 00 00 
192ea     3E 7E 66 66 
192ee     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
192f2     06 06 06 06 
192f6     00 00 00 00 
192fa     3C 7E 66 66 
192fe     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
19302     66 56 3E 6C 
19306     00 00 00 00 
1930a     3E 7E 66 66 
1930e     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
19312     66 66 C6 C6 
19316     00 00 00 00 
1931a     7C 7E 06 06 
1931e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
19322     60 60 7E 3E 
19326     00 00 00 00 
1932a     7E 7E 18 18 
1932e     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
19332     18 18 18 18 
19336     00 00 00 00 
1933a     66 66 66 66 
1933e     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
19342     66 66 7E 3C 
19346     00 00 00 00 
1934a     66 66 66 66 
1934e     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
19352     3C 3C 18 18 
19356     00 00 00 00 
1935a     C6 C6 C6 C6 
1935e     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
19362     FE EE C6 82 
19366     00 00 00 00 
1936a     66 66 66 3C 
1936e     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
19372     3C 66 66 66 
19376     00 00 00 00 
1937a     66 66 66 66 
1937e     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
19382     18 18 18 18 
19386     00 00 00 00 
1938a     7E 7E 30 30 
1938e     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
19392     06 06 7E 7E 
19396     00 00 00 00 
1939a     3C 3C 0C 0C 
1939e     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
193a2     0C 0C 3C 3C 
193a6     00 00 00 00 
193aa     06 06 0C 0C 
193ae     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
193b2     60 60 C0 C0 
193b6     00 00 00 00 
193ba     3C 3C 30 30 
193be     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
193c2     30 30 3C 3C 
193c6     00 00 00 00 
193ca     18 18 3C 3C 
193ce     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
193d2     00 00 00 00 
193d6     00 00 00 00 
193da     00 00 00 00 
193de     00 00 00 00 
193e2     00 00       | 	byte	$00[18]
193e4     FE FE 00 00 
193e8     00 00 0C 0C 
193ec     18 18 00 00 
193f0     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
193f4     00 00 00 00 
193f8     00 00 00 00 
193fc     00          | 	byte	$00[9]
193fd     3C 7C 60 7C 
19401     7E 66 66 7E 
19405     7C 00 00 00 
19409     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1940d     3E 7E 66 66 
19411     66 66 66 7E 
19415     3E 00 00 00 
19419     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1941d     3C 3E 06 06 
19421     06 06 06 7E 
19425     7C 00 00 00 
19429     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1942d     7C 7E 66 66 
19431     66 66 66 7E 
19435     7C 00 00 00 
19439     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1943d     3C 7E 66 66 
19441     7E 06 06 7E 
19445     7C 00 00 00 
19449     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1944d     18 7E 7E 18 
19451     18 18 18 18 
19455     18 00 00 00 
19459     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1945d     7C 7E 66 66 
19461     66 66 7E 7C 
19465     60 7E 3E 00 
19469     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1946d     3E 7E 66 66 
19471     66 66 66 66 
19475     66 00 00 00 
19479     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1947d     1C 1C 18 18 
19481     18 18 18 3C 
19485     3C 00 00 00 
19489     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1948d     30 30 30 30 
19491     30 30 30 30 
19495     30          | 	byte	$30[9]
19496     3E 1E 00 00 
1949a     06 06 06 36 
1949e     36 1E 1E 1E 
194a2     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
194a6     00 00 00 00 
194aa     1C 1C 18 18 
194ae     18 18 18 18 
194b2     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
194b6     00 00 00 00 
194ba     00 00 00    | 	byte	$00[7]
194bd     6C FE FE D6 
194c1     D6 C6 C6 C6 
194c5     C6 00 00 00 
194c9     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
194cd     3E 7E 66 66 
194d1     66 66 66 66 
194d5     66 00 00 00 
194d9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
194dd     3C 7E 66 66 
194e1     66 66 66 7E 
194e5     3C 00 00 00 
194e9     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
194ed     3E 7E 66 66 
194f1     66 66 66 7E 
194f5     3E 06 06 00 
194f9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
194fd     7C 7E 66 66 
19501     66 66 66 7E 
19505     7C 60 60 00 
19509     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
1950d     3E 7E 66 06 
19511     06 06 06 06 
19515     06 00 00 00 
19519     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
1951d     7C 7E 06 0E 
19521     3C 70 60 7E 
19525     3E 00 00 00 
19529     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
1952d     7E 7E 18 18 
19531     18 18 18 78 
19535     70 00 00 00 
19539     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
1953d     66 66 66 66 
19541     66 66 66    | 	byte	$66[7]
19544     7E 7C 00 00 
19548     00 00 00 00 
1954c     00 66 66 66 
19550     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
19554     18 18 00 00 
19558     00 00 00 00 
1955c     00 C6 C6 D6 
19560     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
19564     C6 82 00 00 
19568     00 00 00 00 
1956c     00 66 66 3C 
19570     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
19574     66 66 00 00 
19578     00 00 00 00 
1957c     00 66 66 66 
19580     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
19584     7C 60 7E 3E 
19588     00 00 00 00 
1958c     00 7E 7E 30 
19590     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
19594     7E 7E 00 00 
19598     00 00 30 18 
1959c     18 18 18 0C 
195a0     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
195a4     18 30 00 00 
195a8     00 00 18 18 
195ac     18 18 18 18 
195b0     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
195b4     18 18 00 00 
195b8     00 00 0C 18 
195bc     18 18 18 30 
195c0     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
195c4     18 0C 00 00 
195c8     00 00 6C 7E 
195cc     36 00 00 00 
195d0     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
195d4     00 00 00 00 
195d8     00 00 00 00 
195dc     00          | 	byte	$00[9]
195dd     18 18 18 18 
195e1     18 18 00 00 
195e5     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
195e8     00 00 00 00 
195ec     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
195f0     00 00 00 00 
195f4     00 80 80 80 
195f8     00 00 00 FF 
195fc     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
19600     00 00 00 00 
19604     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
19605     80 00 00 00 
19609     00 80 00 00 
1960d     80 80 00 00 
19611     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
19615     80 00 80 00 
19619     00 40 80 00 
1961d     AA AA AA 00 
19621     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
19625     FF 00 00 00 
19629     00 FF 00 00 
1962d     FF FF 00 00 
19631     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
19635     FF 00 FF 00 
19639     00 FF FF 00 
1963d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
19640     00 00 00 00 
19644     00          | ataripalette   file "ataripalettep2.def"
19645     11 11 11 00 
19649     22 22 22 00 
1964d     33 33 33 00 
19651     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
19655     55 55 55 00 
19659     66 66 66 00 
1965d     77 77 77 00 
19661     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
19665     99 99 99 00 
19669     AA AA AA 00 
1966d     BB BB BB 00 
19671     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
19675     DD DD DD 00 
19679     EE EE EE 00 
1967d     FF FF FF 00 
19681     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
19685     00 14 40 00 
19689     00 1E 60 00 
1968d     00 28 80 00 
19691     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
19695     00 3C BF 00 
19699     00 46 DF 00 
1969d     00 50 FF 00 
196a1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
196a5     39 77 FF 00 
196a9     55 8A FF 00 
196ad     71 9E FF 00 
196b1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
196b5     AA C5 FF 00 
196b9     C6 D8 FF 00 
196bd     E3 EC FF 00 
196c1     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
196c5     00 00 40 00 
196c9     00 00 60 00 
196cd     00 00 80 00 
196d1     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
196d5     00 00 BF 00 
196d9     00 00 DF 00 
196dd     00 00 FF 00 
196e1     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
196e5     39 39 FF 00 
196e9     55 55 FF 00 
196ed     71 71 FF 00 
196f1     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
196f5     AA AA FF 00 
196f9     C6 C6 FF 00 
196fd     E3 E3 FF 00 
19701     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
19705     20 00 40 00 
19709     30 00 60 00 
1970d     40 00 80 00 
19711     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
19715     60 00 BF 00 
19719     70 00 DF 00 
1971d     80 00 FF 00 
19721     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
19725     9C 39 FF 00 
19729     AA 55 FF 00 
1972d     B8 71 FF 00 
19731     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
19735     D5 AA FF 00 
19739     E3 C6 FF 00 
1973d     F1 E3 FF 00 
19741     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
19745     40 00 40 00 
19749     60 00 60 00 
1974d     80 00 80 00 
19751     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
19755     BF 00 BF 00 
19759     DF 00 DF 00 
1975d     FF 00 FF 00 
19761     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
19765     FF 39 FF 00 
19769     FF 55 FF 00 
1976d     FF 71 FF 00 
19771     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
19775     FF AA FF 00 
19779     FF C6 FF 00 
1977d     FF E3 FF 00 
19781     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
19785     40 00 20 00 
19789     60 00 30 00 
1978d     80 00 40 00 
19791     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
19795     BF 00 60 00 
19799     DF 00 70 00 
1979d     FF 00 80 00 
197a1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
197a5     FF 39 9C 00 
197a9     FF 55 AA 00 
197ad     FF 71 B8 00 
197b1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
197b5     FF AA D5 00 
197b9     FF C6 E3 00 
197bd     FF E3 F1 00 
197c1     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
197c5     40 00 00 00 
197c9     60 00 00 00 
197cd     80 00 00 00 
197d1     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
197d5     BF 00 00 00 
197d9     DF 00 00 00 
197dd     FF 00 00 00 
197e1     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
197e5     FF 39 39 00 
197e9     FF 55 55 00 
197ed     FF 71 71 00 
197f1     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
197f5     FF AA AA 00 
197f9     FF C6 C6 00 
197fd     FF E3 E3 00 
19801     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
19805     40 10 00 00 
19809     60 18 00 00 
1980d     80 20 00 00 
19811     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
19815     BF 30 00 00 
19819     DF 38 00 00 
1981d     FF 40 00 00 
19821     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
19825     FF 6A 39 00 
19829     FF 80 55 00 
1982d     FF 95 71 00 
19831     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
19835     FF BF AA 00 
19839     FF D5 C6 00 
1983d     FF EA E3 00 
19841     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
19845     40 20 00 00 
19849     60 30 00 00 
1984d     80 40 00 00 
19851     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
19855     BF 60 00 00 
19859     DF 70 00 00 
1985d     FF 80 00 00 
19861     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
19865     FF 9C 39 00 
19869     FF AA 55 00 
1986d     FF B8 71 00 
19871     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
19875     FF D5 AA 00 
19879     FF E3 C6 00 
1987d     FF F1 E3 00 
19881     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
19885     40 30 00 00 
19889     60 48 00 00 
1988d     80 60 00 00 
19891     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
19895     BF 90 00 00 
19899     DF A8 00 00 
1989d     FF C0 00 00 
198a1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
198a5     FF CE 39 00 
198a9     FF D5 55 00 
198ad     FF DC 71 00 
198b1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
198b5     FF EA AA 00 
198b9     FF F1 C6 00 
198bd     FF F8 E3 00 
198c1     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
198c5     30 40 00 00 
198c9     48 60 00 00 
198cd     60 80 00 00 
198d1     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
198d5     90 BF 00 00 
198d9     A8 DF 00 00 
198dd     C0 FF 00 00 
198e1     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
198e5     CE FF 39 00 
198e9     D5 FF 55 00 
198ed     DC FF 71 00 
198f1     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
198f5     EA FF AA 00 
198f9     F1 FF C6 00 
198fd     F8 FF E3 00 
19901     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
19905     00 40 00 00 
19909     00 60 00 00 
1990d     00 80 00 00 
19911     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
19915     00 BF 00 00 
19919     00 DF 00 00 
1991d     00 FF 00 00 
19921     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
19925     39 FF 39 00 
19929     55 FF 55 00 
1992d     71 FF 71 00 
19931     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
19935     AA FF AA 00 
19939     C6 FF C6 00 
1993d     E3 FF E3 00 
19941     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
19945     00 40 14 00 
19949     00 60 1E 00 
1994d     00 80 28 00 
19951     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
19955     00 BF 3C 00 
19959     00 DF 46 00 
1995d     00 FF 50 00 
19961     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
19965     39 FF 77 00 
19969     55 FF 8A 00 
1996d     71 FF 9E 00 
19971     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
19975     AA FF C5 00 
19979     C6 FF D8 00 
1997d     E3 FF EC 00 
19981     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
19985     00 40 28 00 
19989     00 60 3C 00 
1998d     00 80 50 00 
19991     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
19995     00 BF 78 00 
19999     00 DF 8C 00 
1999d     00 FF A0 00 
199a1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
199a5     39 FF B5 00 
199a9     55 FF C0 00 
199ad     71 FF CA 00 
199b1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
199b5     AA FF DF 00 
199b9     C6 FF EA 00 
199bd     E3 FF F4 00 
199c1     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
199c5     00 40 40 00 
199c9     00 60 60 00 
199cd     00 80 80 00 
199d1     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
199d5     00 BF BF 00 
199d9     00 DF DF 00 
199dd     00 FF FF 00 
199e1     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
199e5     39 FF FF 00 
199e9     55 FF FF 00 
199ed     71 FF FF 00 
199f1     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
199f5     AA FF FF 00 
199f9     C6 FF FF 00 
199fd     E3 FF FF 00 
19a01     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
19a05     00 28 40 00 
19a09     00 3C 60 00 
19a0d     00 50 80 00 
19a11     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
19a15     00 78 BF 00 
19a19     00 8C DF 00 
19a1d     00 A0 FF 00 
19a21     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
19a25     39 B5 FF 00 
19a29     55 C0 FF 00 
19a2d     71 CA FF 00 
19a31     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
19a35     AA DF FF 00 
19a39     C6 EA FF 00 
19a3d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
19a40                 | '**********************************************************************************
19a40                 | '
19a40                 | '        Timings and colors definitions
19a40                 | '
19a40                 | '**********************************************************************************
19a40                 | 
19a40                 |    'streamer sets for text mode, to add to timings[0..5]
19a40                 | ' todo for the retromachine: 768x576
19a40                 | 
19a40                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
19a40     10 00 00 00 
19a44     50 00 00 00 
19a48     14 00 00 00 
19a4c     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
19a50     70 00 00 00 
19a54     08 00 00 00 
19a58     30 00 00 00 
19a5c     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
19a60     10 00 00 00 
19a64     10 00 00 00 
19a68     00 00 00 00 
19a6c     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
19a70     E0 01 00 00 
19a74     F6 32 24 15 
19a78     FB 6C C3 01 
19a7c     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
19a80                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
19a80                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
19a80     30 00 00 00 
19a84     50 00 00 00 
19a88     34 00 00 00 
19a8c     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
19a90     20 00 00 00 
19a94     08 00 00 00 
19a98     16 00 00 00 
19a9c     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
19aa0     24 00 00 00 
19aa4     18 00 00 00 
19aa8     40 00 00 00 
19aac     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
19ab0     F0 01 00 00 
19ab4     F6 32 24 15 
19ab8     FB 6C C3 01 
19abc     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
19ac0                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
19ac0     10 00 00 00 
19ac4     40 00 00 00 
19ac8     10 00 00 00 
19acc     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
19ad0     08 00 00 00 
19ad4     08 00 00 00 
19ad8     08 00 00 00 
19adc     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
19ae0     40 00 00 00 
19ae4     20 00 00 00 
19ae8     80 00 00 00 
19aec     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
19af0     E0 01 00 00 
19af4     70 AE E9 10 
19af8     FB 8B FF 01 
19afc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
19b00     10 00 00 00 
19b04     42 00 00 00 
19b08     14 00 00 00 
19b0c     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
19b10     00 00 00 00 
19b14     08 00 00 00 
19b18     00 00 00 00 
19b1c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
19b20     10 00 00 00 
19b24     10 00 00 00 
19b28     C0 00 00 00 
19b2c     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
19b30     40 02 00 00 
19b34     F6 32 24 15 
19b38     FB 6C C3 01 
19b3c     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
19b40     50 00 00 00 
19b44     A0 00 00 00 
19b48     54 00 00 00 
19b4c     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
19b50     08 00 00 00 
19b54     08 00 00 00 
19b58     08 00 00 00 
19b5c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19b60     0C 00 00 00 
19b64     08 00 00 00 
19b68     00 01 00 00 
19b6c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
19b70     E0 01 00 00 
19b74     10 06 56 15 
19b78     FB 64 C3 01 
19b7c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
19b80     50 00 00 00 
19b84     32 00 00 00 
19b88     50 00 00 00 
19b8c     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
19b90     08 00 00 00 
19b94     08 00 00 00 
19b98     08 00 00 00 
19b9c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19ba0     0C 00 00 00 
19ba4     08 00 00 00 
19ba8     40 01 00 00 
19bac     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
19bb0     E0 01 00 00 
19bb4     F2 CD 33 13 
19bb8     FB 53 92 01 
19bbc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
19bc0     18 00 00 00 
19bc4     30 00 00 00 
19bc8     18 00 00 00 
19bcc     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
19bd0     08 00 00 00 
19bd4     08 00 00 00 
19bd8     08 00 00 00 
19bdc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
19be0     0C 00 00 00 
19be4     08 00 00 00 
19be8     80 01 00 00 
19bec     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
19bf0     E0 01 00 00 
19bf4     F4 8F 11 11 
19bf8     FB 3A 55 01 
19bfc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
19c00     20 00 00 00 
19c04     40 00 00 00 
19c08     22 00 00 00 
19c0c     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
19c10     00 00 00 00 
19c14     08 00 00 00 
19c18     00 00 00 00 
19c1c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
19c20     0C 00 00 00 
19c24     08 00 00 00 
19c28     C0 01 00 00 
19c2c     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
19c30     F0 01 00 00 
19c34     F2 CD 33 13 
19c38     FB 53 92 01 
19c3c     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
19c40                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
19c40     00 75 C7 97 
19c44     27 47 F6 0A 
19c48     05 79 CB 9B 
19c4c     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
19c50                 | 
19c50     28 12 64 FD | hdmi            setq    #9
19c54     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
19c58                 |            '     setq2   #255
19c58                 |             '    rdlong  $100, paletteptr 
19c58     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
19c5c     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
19c60     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
19c64     78 F9 02 F1 |                 add     ii,hbase
19c68     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
19c6c     7B 0B 80 FF 
19c70     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
19c74                 | 
19c74     66 66 86 FF 
19c78     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
19c7c                 | 
19c7c                 | 
19c7c                 | ''--------  frame rendering main loop  ---------------------------------------------------
19c7c                 | 
19c7c                 | p101
19c7c     28 14 64 FD |                 setq    #10
19c80     00 DF 06 FB |                 rdlong  framebuf,  ptra
19c84     28 1E 64 FD |                 setq    #15
19c88     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
19c8c     71 99 02 FB |                 rdlong  border,borderptr
19c90                 | 
19c90     01 C4 06 F1 |                 add     frames,#1
19c94     76 F5 02 F6 |                 mov     dlptr2,dlptr
19c98                 | 
19c98     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
19c9c     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
19ca0     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
19ca4     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
19ca8                 |  '' up porch
19ca8                 | 
19ca8     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
19cac     49 FF 02 F6 |                 mov     hsync1,sync_001
19cb0     37 A8 46 FB |                 callpa  i_upporch ,#blank
19cb4     72 01 68 FC |                 wrlong  #0,vblankptr
19cb8                 |                 
19cb8     1F EA 16 F4 |                 testb   paletteptr,#31 wc
19cbc     29 FE 65 3D |          if_nc  setq2   #255
19cc0     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
19cc4                 | 
19cc4                 | '' cursor blinking
19cc4                 | 
19cc4     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
19cc8     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
19ccc                 | 
19ccc                 | '' main screen
19ccc                 | 
19ccc     00 BE 06 F6 |                 mov linenum,#0
19cd0     00 18 07 F6 |                 mov rcnt,#0
19cd4     00 1C 07 F6 |                 mov rcnt2a,#0
19cd8                 | 
19cd8                 | 
19cd8     00 18 0F F2 | p301            cmp rcnt,#0 wz
19cdc     18 00 90 AD |         if_z    jmp #p306
19ce0     01 18 87 F1 |                 sub rcnt,#1
19ce4     90 F7 02 F6 |                 mov dl,rdl
19ce8     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
19cec     8F F7 02 A1 |    if_z        add dl,roffset  
19cf0     7B 21 03 F6 |                 mov rdl,dl
19cf4     04 00 90 FD |                 jmp #p307          
19cf8                 |           
19cf8                 |                 
19cf8     7A F7 02 FB | p306            rdlong  dl,dlptr2
19cfc     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
19d00     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
19d04     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
19d08                 | 
19d08                 | '' Special entry:
19d08                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
19d08                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
19d08                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
19d08                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
19d08                 | '' todo: set horizontal scroll (if needed)
19d08                 | 
19d08     02 FA 66 F0 |                 shl framebuf2,#2
19d0c     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
19d10     04 22 0F F2 |                 cmp dlc,#%100 wz
19d14                 |   
19d14                 |                 
19d14     04 F4 06 F1 |                 add dlptr2,#4
19d18     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
19d1c     7A 21 03 FB |                  rdlong rdl,dlptr2
19d20     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
19d24     04 18 47 F0 |                  shr rcnt,#4
19d28                 |              
19d28     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
19d2c     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
19d30                 |                 
19d30     04 1E 47 F0 |                  shr roffset,#4
19d34     0C 1E 67 F0 |                  shl roffset,#12
19d38                 |   
19d38     9C FF 9F FD |                  jmp #p301
19d3c                 |                  
19d3c                 |                  
19d3c                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
19d3c     0C FA 46 F0 |                 shr     framebuf2,#12
19d40     02 FA 66 F0 |                 shl     framebuf2,#2
19d44                 | 
19d44     7B 03 E3 F8 |                 getbyte t1,dl,#0
19d48     00 02 0F F2 |                 cmp     t1,#0 wz
19d4c     34 00 90 AD |     if_z        jmp     #borderline
19d50                 | 
19d50     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
19d54     50 00 90 CD |           if_c   jmp     #textline
19d58     50 02 90 3D |           if_nc  jmp     #graphline
19d5c                 | '
19d5c     01 BE 06 F1 | p302            add     linenum,#1
19d60     04 F4 06 F1 |                 add     dlptr2,#4
19d64     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
19d68     6C FF 9F 5D |          if_nz  jmp     #p301
19d6c                 | 
19d6c     72 03 68 FC | p112            wrlong  #1,vblankptr
19d70     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
19d74                 | 
19d74     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
19d78     4B FF 02 F6 |                 mov     hsync1,sync_223
19d7c     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
19d80     F8 FE 9F FD |                 jmp     #p101
19d84                 | 
19d84                 | '' ---------------  END of frame rendering loop -------------------------------------------
19d84                 | 
19d84                 | 
19d84     14 00 B0 FD | borderline      call    #hsync                      ' make a border
19d88     4C A1 C2 FC |                 xcont   m_vi,border
19d8c     CC FF 9F FD |                 jmp     #p302
19d90                 | 
19d90                 | 
19d90     08 00 B0 FD | blank           call    #hsync                          'blank lines
19d94     7E A1 C2 FC |                 xcont   m_vi,hsync0
19d98     FD ED 6F 0B |         _ret_   djnz    pa,#blank
19d9c                 | 
19d9c     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
19da0     7F 9D B2 FC |                 xzero   m_sn,hsync1
19da4     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
19da8                 | 
19da8                 | 
19da8                 | 
19da8                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
19da8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
19da8                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
19da8                 | 
19da8                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
19da8                 | 
19da8     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
19dac                 | 
19dac     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
19db0     7B 17 5B F8 |                 getnib  zoom, dl,#3
19db4     03 16 07 F5 |                 and             zoom, #3
19db8                 | 
19db8                 | 
19db8                 | 
19db8     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
19dbc     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
19dc0     3F BC 06 F5 |                 and     linestart,#63
19dc4     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
19dc8     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
19dcc                 | 
19dcc     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
19dd0                 | 
19dd0                 |                        ' if fontline =0, get a border color
19dd0                 | 
19dd0     51 03 33 F9 | p102            getword t1,m_border,#0
19dd4     00 02 0F F2 |                 cmp     t1, #0 wz
19dd8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
19ddc                 | 
19ddc     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
19de0     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
19de4     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
19de8     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
19dec     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
19df0     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
19df4     52 BB 02 F6 |                 mov m_lut2, m_lut1
19df8     6A BB 02 F1 |                 add m_lut2, lutt1
19dfc     58 0F 03 F6 |                 mov cpl2,i_cpl
19e00                 | 
19e00     02 16 0F F2 |                cmp zoom,#2 wz
19e04     E4 00 90 AD |           if_z jmp #p420
19e08     01 16 0F F2 |                cmp zoom,#1 wz
19e0c     64 00 90 AD |           if_z jmp #p410
19e10     00 16 0F F2 |                 cmp zoom,#0 wz
19e14     04 00 90 AD |           if_z jmp #p400
19e18     50 01 90 FD |                jmp #p430
19e1c                 | 
19e1c                 |                    '
19e1c                 |  ''---------------------------------------------------------------------------------------------------------
19e1c     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
19e20     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19e24     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19e28     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19e2c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19e30     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19e34     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19e38     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19e3c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19e40     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19e44                 | 
19e44     81 BB C2 FC |                         xcont m_lut2,t1
19e48                 | 
19e48     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19e4c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19e50     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19e54     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19e58     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19e5c     01 C0 86 F1 |                         sub     lutaddr,#1
19e60                 | 
19e60     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19e64     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19e68     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19e6c                 | 
19e6c     EB 0F 6F FB |                         djnz   cpl2,#p400
19e70     28 01 90 FD |  p401                   jmp    #p103
19e74                 | 
19e74                 | ''------------------------------------------------------------------------------------------------------------
19e74                 | 
19e74     01 0E 47 F0 |  p410                   shr cpl2,#1
19e78                 | 
19e78                 | ''---------------------------------------------------------------------------------------------------------
19e78     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
19e7c     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19e80     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19e84     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19e88     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19e8c     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19e90     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19e94     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19e98     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19e9c     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19ea0                 | 
19ea0                 | 
19ea0     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
19ea4     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
19ea8     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
19eac     03 02 07 FA |                         mul t1,#3
19eb0     81 BB C2 FC |                         xcont m_lut2,t1
19eb4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19eb8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19ebc     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19ec0     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19ec4     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19ec8     01 C0 86 F1 |                         sub     lutaddr,#1
19ecc     63 06 63 FD |                         mergew t3
19ed0     03 06 07 FA |                         mul t3,#3
19ed4     83 BB C2 FC |                         xcont m_lut2,t3
19ed8                 | 
19ed8     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19edc     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19ee0                 | 
19ee0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19ee4                 | 
19ee4     E4 0F 6F FB |                         djnz   cpl2,#p412
19ee8     B0 00 90 FD |  p411                   jmp    #p103
19eec                 | 
19eec                 | ''------------------------------------------------------------------------------------------------------------
19eec                 | 
19eec     02 0E 47 F0 |  p420                   shr cpl2,#2
19ef0                 | 
19ef0                 | ''---------------------------------------------------------------------------------------
19ef0     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
19ef4     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19ef8     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19efc     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
19f00     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
19f04     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
19f08     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
19f0c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
19f10     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
19f14     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
19f18                 | 
19f18     61 02 63 FD |                         mergeb t1
19f1c     81 07 3B F9 |                         getword t3,t1,#1
19f20     0F 02 07 FA |                         mul t1,#15
19f24     81 BB C2 FC |                         xcont m_lut2,t1
19f28                 | 
19f28     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19f2c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19f30     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19f34     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19f38     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19f3c     01 C0 86 F1 |                         sub     lutaddr,#1
19f40                 | 
19f40     81 09 EB F8 |                         getbyte t4,t1,#1        '
19f44     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
19f48                 | 
19f48     0F 06 07 FA |                         mul t3,#15
19f4c     83 BB C2 FC |                         xcont m_lut2,t3
19f50                 | 
19f50     83 0B EB F8 |                         getbyte t5,t3,#1
19f54     85 BB C2 FC |                         xcont m_lut2, t5
19f58     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
19f5c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
19f60                 | 
19f60     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
19f64                 | 
19f64     E2 0F 6F FB |                         djnz   cpl2,#p422
19f68     30 00 90 FD |  p421                   jmp    #p103
19f6c                 | 
19f6c                 | '--------------------------------------------------------------------------------------------------------------
19f6c                 | 
19f6c     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
19f70     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
19f74     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
19f78                 | 
19f78     00 BA C6 FC |                         xcont m_lut2,#0
19f7c                 | 
19f7c     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
19f80     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
19f84     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
19f88     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
19f8c     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
19f90     01 C0 86 F1 |                         sub     lutaddr,#1
19f94                 | 
19f94     F5 0F 6F FB |                         djnz   cpl2,#p430
19f98     00 00 90 FD |  p431                   jmp    #p103
19f9c                 | 
19f9c                 | ''------------------------------------------------------------------------------------------------------------
19f9c                 | 
19f9c                 | 
19f9c                 | 
19f9c     51 25 33 F9 | p103            getword  mb2,m_border,#0
19fa0     00 24 0F F2 |                 cmp      mb2, #0 wz
19fa4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
19fa8                 | 
19fa8     B0 FD 9F FD |                 jmp #p302
19fac                 | 
19fac                 | '' -------------------------------------- END of text line ---------------------------------
19fac                 | 
19fac                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
19fac                 | 
19fac     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
19fb0                 | 
19fb0                 | 
19fb0     51 25 33 F9 | p202            getword mb2,m_border,#0
19fb4     00 24 0F F2 |                 cmp     mb2, #0 wz
19fb8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
19fbc                 | 
19fbc                 | '----------------------------------------- display pixels
19fbc                 | 
19fbc     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
19fc0     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
19fc4                 | 
19fc4     7B 17 5B F8 |                 getnib  zoom, dl,#3
19fc8     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
19fcc                 | 
19fcc     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
19fd0     0C BC 06 F5 |                 and     colordepth,#12
19fd4                 | 
19fd4     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
19fd8     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
19fdc     64 00 90 AD |           if_z  jmp     #p240
19fe0                 | 
19fe0     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
19fe4     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
19fe8     98 00 90 AD |           if_z  jmp     #p250
19fec                 | 
19fec     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
19ff0     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
19ff4     FC 00 90 AD |           if_z  jmp     #p260
19ff8                 | 
19ff8     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
19ffc                 | 
19ffc                 | '' --- 8 bit color modes
19ffc                 | 
19ffc     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
1a000     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1a004                 | 
1a004     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
1a008     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
1a00c                 |        
1a00c                 |  '  
1a00c     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
1a010     25 0C 07 A6 |                 if_z mov skippattern,#%100101
1a014                 |     
1a014                 |  
1a014     05 0C 07 56 |                 if_nz mov skippattern,#%000101
1a018     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
1a01c                 |         
1a01c                 | 
1a01c                 |         
1a01c     7D 11 03 FB | p235               rdlong  char,framebuf2
1a020     32 0C 63 FD |                    skipf skippattern
1a024     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
1a028     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
1a02c     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
1a030     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
1a034     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
1a038     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
1a03c     F7 0F 6F FB |                    djnz    cpl2,#p235
1a040                 | 
1a040     20 01 90 FD |                jmp    #p203
1a044                 |                   
1a044                 | 
1a044                 | 
1a044                 | '' --- 1 bit color modes
1a044                 | 
1a044     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
1a048     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
1a04c                 | 
1a04c     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
1a050     13 0C 07 A6 |        if_z   mov skippattern,#%10011
1a054     08 0C 07 56 |        if_nz  mov skippattern,#%01000
1a058                 | 
1a058                 | 
1a058     7D 11 E3 FA | p241               rdword  char,framebuf2
1a05c     44 10 FF F9 |                    movbyts char,#%01000100
1a060     63 10 63 FD |                    mergew  char
1a064     32 0C 63 FD |                    skipf skippattern
1a068     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
1a06c     63 10 63 FD |                    mergew  char                    ' 1 0
1a070     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
1a074     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
1a078     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
1a07c     F6 0F 6F FB |                    djnz   cpl2,#p241
1a080                 | 
1a080                 | 
1a080     E0 00 90 FD |                jmp    #p203
1a084                 | 
1a084                 | '' --- 2 bit color modes
1a084                 | 
1a084     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
1a088     C8 00 90 AD |        if_z   jmp #p251
1a08c                 | 
1a08c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1a090     30 00 90 AD |        if_z   jmp #p252
1a094                 | 
1a094                 | 
1a094     7D 11 C3 FA | p254               rdbyte char,framebuf2
1a098     04 0A 07 F6 |                    mov  t5,#4
1a09c     02 10 67 F0 | p255               shl  char,#2
1a0a0     88 03 53 F8 |                    getnib  t1,char,#2
1a0a4     03 02 07 F5 |                    and     t1,#3
1a0a8     55 02 07 FA |                    mul     t1,#$55
1a0ac     81 05 03 F9 |                    rolbyte  t2,t1,#0
1a0b0     FA 0B 6F FB |                    djnz    t5,#p255
1a0b4     82 BB C2 FC |                    xcont   m_lut2,t2
1a0b8     01 FA 06 F1 |                    add     framebuf2,#1
1a0bc     F5 0F 6F FB |                    djnz    cpl2,#p254
1a0c0     A0 00 90 FD |                    jmp     #p203
1a0c4                 | 
1a0c4     7D 11 E3 FA | p252               rdword char,framebuf2
1a0c8     08 0A 07 F6 |                    mov  t5,#8
1a0cc     02 10 67 F0 | p253               shl  char,#2
1a0d0     88 03 63 F8 |                    getnib  t1,char,#4
1a0d4     03 02 07 F5 |                    and     t1,#3
1a0d8     05 02 07 FA |                    mul     t1,#5
1a0dc     81 05 83 F8 |                    rolnib  t2,t1,#0
1a0e0     FA 0B 6F FB |                    djnz    t5,#p253
1a0e4     82 BB C2 FC |                    xcont   m_lut2,t2
1a0e8     02 FA 06 F1 |                    add     framebuf2,#2
1a0ec     F5 0F 6F FB |                    djnz    cpl2,#p252
1a0f0     70 00 90 FD |                    jmp     #p203
1a0f4                 | 
1a0f4                 | '' ------ 4 bit color modes
1a0f4                 | 
1a0f4     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
1a0f8     58 00 90 AD |        if_z   jmp #p251
1a0fc                 | 
1a0fc     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
1a100     2C 00 90 AD |        if_z   jmp #p262
1a104                 | 
1a104                 | 
1a104     7D 11 C3 FA | p263               rdbyte char,framebuf2
1a108     02 0A DC FC |                            rep #5,#2
1a10c     88 05 8B F8 |                              rolnib t2,char,#1
1a110     88 05 8B F8 |                                  rolnib t2,char,#1
1a114     88 05 8B F8 |                              rolnib t2,char,#1
1a118     88 05 8B F8 |                                  rolnib t2,char,#1
1a11c     04 10 67 F0 |                              shl char,#4
1a120     82 BB C2 FC |                    xcont   m_lut2,t2
1a124     01 FA 06 F1 |                    add     framebuf2,#1
1a128     F6 0F 6F FB |                    djnz    cpl2,#p263
1a12c     34 00 90 FD |                    jmp     #p203
1a130                 | 
1a130     7D 11 E3 FA | p262               rdword  char,framebuf2
1a134     04 06 DC FC |                            rep #3,#4
1a138     88 05 9B F8 |                              rolnib t2,char,#3
1a13c     88 05 9B F8 |                                  rolnib t2,char,#3
1a140     04 10 67 F0 |                              shl char,#4
1a144     82 BB C2 FC |                    xcont   m_lut2,t2
1a148     02 FA 06 F1 |                    add     framebuf2,#2
1a14c     F8 0F 6F FB |                    djnz    cpl2,#p262
1a150     10 00 90 FD |                    jmp     #p203
1a154                 | 
1a154                 | ''---------- all color modes without zoom
1a154                 | 
1a154     87 07 D8 FC | p251               rep  #3,cpl2
1a158     7D 11 03 FB |                    rdlong  char,framebuf2
1a15c     04 FA 06 F1 |                    add     framebuf2,#4
1a160     88 BB C2 FC |                    xcont   m_lut2,char
1a164                 |           
1a164                 |  ''-----------------------------------------------------------------------------------------
1a164                 | p203           ' getword  mb2,m_border,#0
1a164     00 24 0F F2 |                 cmp      mb2, #0 wz
1a168     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
1a16c                 | 
1a16c     EC FB 9F FD |                 jmp #p302
1a170                 | 
1a170                 | '' -------------------------------------- END of graph  line ---------------------------------
1a170                 | 
1a170                 | '' consts and vars
1a170                 | 
1a170     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
1a174     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
1a178     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
1a17c     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
1a180                 | 
1a180     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
1a184                 | 
1a184                 | '------ these longs will be set by setmode function
1a184                 | 
1a184     00 00 00 00 | m_bs            long    0        'blanks before sync
1a188     00 00 00 00 | m_sn            long    0        'sync
1a18c     00 00 00 00 | m_bv            long    0        'blanks before visible
1a190     00 00 00 00 | m_vi            long    0        'visible pixels #
1a194     00 00 00 00 | m_border        long    0        'left/right borders
1a198     00 00 00 00 | m_lut1          long    0        'characters
1a19c     00 00 00 00 | i_vborder       long    0        'up/down borders
1a1a0     00 00 00 00 | i_upporch       long    0        'up porch lines
1a1a4     00 00 00 00 | i_vsync         long    0        'vsync lines
1a1a8     00 00 00 00 | i_downporch     long    0        'down porch lines
1a1ac     00 00 00 00 | i_modenum       long    0        'mode #
1a1b0     00 00 00 00 | i_cpl           long    0        'chars/longs per line
1a1b4     00 00 00 00 | i_lines         long    0        'scanlines #
1a1b8     00 00 00 00 | i_clock         long    0
1a1bc     00 00 00 00 | i_hubset        long    0
1a1c0     00 00 00 00 | i_totalvis      long    0
1a1c4                 | 
1a1c4                 | '-------------------------------------
1a1c4                 | 
1a1c4     00 00 00 00 | m_lut2          long    0
1a1c8                 | 
1a1c8                 | colordepth
1a1c8     00 00 00 00 | linestart       long    0
1a1cc     00 00 00 00 | linenum         long    0
1a1d0     00 01 00 00 | lutaddr         long    256
1a1d4                 | 
1a1d4     0E 00 00 00 | cursorsh        long    14
1a1d8     00 00 00 00 | frames          long    0
1a1dc     00 00 00 00 | cursorx         long    0
1a1e0     00 00 00 00 | cursory         long    0
1a1e4     00 00 00 00 | cursorpos       long    0
1a1e8     00 00 00 00 | cursorpos2      long    0
1a1ec     00 00 00 00 | fontstart       long    0
1a1f0     00 00 00 00 | border2         long 0
1a1f4     00 00 81 70 | lutiv           long $70810000
1a1f8     00 00 88 00 | lutt1           long $00880000
1a1fc     00 00 80 00 | lutg1           long $00800000
1a200     00 00 80 10 | lutg2           long $10800000
1a204     00 00 80 20 | lutg4           long $20800000
1a208     00 00 80 30 | lutg8           long $30800000
1a20c     00 00 00 00 | framebuf        long 0
1a210     00 00 00 00 | fontbuf         long 0
1a214     00 00 00 00 | borderptr       long 0
1a218     00 00 00 00 | vblankptr       long 0
1a21c     00 00 00 00 | cursorptr       long 0
1a220     00 00 00 00 | modeptr         long 0
1a224     00 00 00 00 | paletteptr      long 0
1a228     00 00 00 00 | dlptr           long 0
1a22c                 | fontnumptr      res     1
1a22c                 | fontnumptr      res     1
1a22c                 | hbase           res     1
1a22c                 | hbase           res     1
1a22c                 | borderptr2      res     1
1a22c                 | borderptr2      res     1
1a22c                 | dlptr2 res 1
1a22c                 | dlptr2 res 1
1a22c                 | dl              res 1
1a22c                 | dl              res 1
1a22c                 | ii              res     1
1a22c                 | ii              res     1
1a22c                 | framebuf2       res     1
1a22c                 | framebuf2       res     1
1a22c                 | hsync0          res     1
1a22c                 | hsync0          res     1
1a22c                 | hsync1          res     1
1a22c                 | hsync1          res     1
1a22c                 | fontline        res     1
1a22c                 | fontline        res     1
1a22c                 | t1              res     1
1a22c                 | t1              res     1
1a22c                 | t2              res     1
1a22c                 | t2              res     1
1a22c                 | t3 res 1
1a22c                 | t3 res 1
1a22c                 | t4 res 1
1a22c                 | t4 res 1
1a22c                 | t5 res 1
1a22c                 | t5 res 1
1a22c                 | skippattern res 1
1a22c                 | skippattern res 1
1a22c                 | cpl2 res 1
1a22c                 | cpl2 res 1
1a22c                 | char            res     1
1a22c                 | char            res     1
1a22c                 | backcolor       res     1
1a22c                 | backcolor       res     1
1a22c                 | charcolor       res     1
1a22c                 | charcolor       res     1
1a22c                 | zoom res 1
1a22c                 | zoom res 1
1a22c     00 00 00 00 | rcnt long 0 'dl repeat count
1a230     00 00 00 00 | rcnt2 long 0
1a234     00 00 00 00 | rcnt2a long 0
1a238     00 00 00 00 | roffset long 0
1a23c     00 00 00 00 | rdl long 0  'dl repeat line
1a240     00 00 00 00 | dlc long 0 'dl command
1a244     00 00 00 00 | mb2 long 0
1a248     00 00 00 00 | aend             long 0
1a24c                 |                 fit     496                     '
1a24c                 | _trackerplayer_spin2_dat_
1a24c                 | 
1a24c     00 00 00 00 | null             long  0
1a250     46 52 45 51 
1a254     46 52 45 51 
1a258     46 52 45 51 
1a25c     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
1a260     46 52 45 51 
1a264     46 52 45 51 
1a268     46 52 45 51 
1a26c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a270     46 52 45 51 
1a274     46 52 45 51 
1a278     46 52 45 51 
1a27c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a280     46 52 45 51 
1a284     46 52 45 51 
1a288     46 52 45 51 
1a28c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a290     46 52 45 51 
1a294     46 52 45 51 
1a298     46 52 45 51 
1a29c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2a0     46 52 45 51 
1a2a4     46 52 45 51 
1a2a8     46 52 45 51 
1a2ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2b0     46 52 45 51 
1a2b4     46 52 45 51 
1a2b8     46 52 45 51 
1a2bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2c0     46 52 45 51 
1a2c4     46 52 45 51 
1a2c8     46 52 45 51 
1a2cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2d0     46 52 45 51 
1a2d4     46 52 45 51 
1a2d8     46 52 45 51 
1a2dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2e0     46 52 45 51 
1a2e4     46 52 45 51 
1a2e8     46 52 45 51 
1a2ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a2f0     46 52 45 51 
1a2f4     46 52 45 51 
1a2f8     46 52 45 51 
1a2fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a300     46 52 45 51 
1a304     46 52 45 51 
1a308     46 52 45 51 
1a30c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a310     46 52 45 51 
1a314     46 52 45 51 
1a318     46 52 45 51 
1a31c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a320     46 52 45 51 
1a324     46 52 45 51 
1a328     46 52 45 51 
1a32c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a330     46 52 45 51 
1a334     46 52 45 51 
1a338     46 52 45 51 
1a33c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a340     46 52 45 51 
1a344     46 52 45 51 
1a348     46 52 45 51 
1a34c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a350     46 52 45 51 
1a354     46 52 45 51 
1a358     46 52 45 51 
1a35c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a360     46 52 45 51 
1a364     46 52 45 51 
1a368     46 52 45 51 
1a36c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a370     46 52 45 51 
1a374     46 52 45 51 
1a378     46 52 45 51 
1a37c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a380     46 52 45 51 
1a384     46 52 45 51 
1a388     46 52 45 51 
1a38c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a390     46 52 45 51 
1a394     46 52 45 51 
1a398     46 52 45 51 
1a39c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3a0     46 52 45 51 
1a3a4     46 52 45 51 
1a3a8     46 52 45 51 
1a3ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3b0     46 52 45 51 
1a3b4     46 52 45 51 
1a3b8     46 52 45 51 
1a3bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3c0     46 52 45 51 
1a3c4     46 52 45 51 
1a3c8     46 52 45 51 
1a3cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3d0     46 52 45 51 
1a3d4     46 52 45 51 
1a3d8     46 52 45 51 
1a3dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3e0     46 52 45 51 
1a3e4     46 52 45 51 
1a3e8     46 52 45 51 
1a3ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a3f0     46 52 45 51 
1a3f4     46 52 45 51 
1a3f8     46 52 45 51 
1a3fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a400     46 52 45 51 
1a404     46 52 45 51 
1a408     46 52 45 51 
1a40c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a410     46 52 45 51 
1a414     46 52 45 51 
1a418     46 52 45 51 
1a41c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a420     46 52 45 51 
1a424     46 52 45 51 
1a428     46 52 45 51 
1a42c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a430     46 52 45 51 
1a434     46 52 45 51 
1a438     46 52 45 51 
1a43c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a440     46 52 45 51 
1a444     46 52 45 51 
1a448     46 52 45 51 
1a44c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a450     46 52 45 51 
1a454     46 52 45 51 
1a458     46 52 45 51 
1a45c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a460     46 52 45 51 
1a464     46 52 45 51 
1a468     46 52 45 51 
1a46c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a470     46 52 45 51 
1a474     46 52 45 51 
1a478     46 52 45 51 
1a47c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a480     46 52 45 51 
1a484     46 52 45 51 
1a488     46 52 45 51 
1a48c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a490     46 52 45 51 
1a494     46 52 45 51 
1a498     46 52 45 51 
1a49c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4a0     46 52 45 51 
1a4a4     46 52 45 51 
1a4a8     46 52 45 51 
1a4ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4b0     46 52 45 51 
1a4b4     46 52 45 51 
1a4b8     46 52 45 51 
1a4bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4c0     46 52 45 51 
1a4c4     46 52 45 51 
1a4c8     46 52 45 51 
1a4cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4d0     46 52 45 51 
1a4d4     46 52 45 51 
1a4d8     46 52 45 51 
1a4dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4e0     46 52 45 51 
1a4e4     46 52 45 51 
1a4e8     46 52 45 51 
1a4ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a4f0     46 52 45 51 
1a4f4     46 52 45 51 
1a4f8     46 52 45 51 
1a4fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a500     46 52 45 51 
1a504     46 52 45 51 
1a508     46 52 45 51 
1a50c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a510     46 52 45 51 
1a514     46 52 45 51 
1a518     46 52 45 51 
1a51c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a520     46 52 45 51 
1a524     46 52 45 51 
1a528     46 52 45 51 
1a52c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a530     46 52 45 51 
1a534     46 52 45 51 
1a538     46 52 45 51 
1a53c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a540     46 52 45 51 
1a544     46 52 45 51 
1a548     46 52 45 51 
1a54c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a550     46 52 45 51 
1a554     46 52 45 51 
1a558     46 52 45 51 
1a55c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a560     46 52 45 51 
1a564     46 52 45 51 
1a568     46 52 45 51 
1a56c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a570     46 52 45 51 
1a574     46 52 45 51 
1a578     46 52 45 51 
1a57c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a580     46 52 45 51 
1a584     46 52 45 51 
1a588     46 52 45 51 
1a58c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a590     46 52 45 51 
1a594     46 52 45 51 
1a598     46 52 45 51 
1a59c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5a0     46 52 45 51 
1a5a4     46 52 45 51 
1a5a8     46 52 45 51 
1a5ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5b0     46 52 45 51 
1a5b4     46 52 45 51 
1a5b8     46 52 45 51 
1a5bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5c0     46 52 45 51 
1a5c4     46 52 45 51 
1a5c8     46 52 45 51 
1a5cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5d0     46 52 45 51 
1a5d4     46 52 45 51 
1a5d8     46 52 45 51 
1a5dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5e0     46 52 45 51 
1a5e4     46 52 45 51 
1a5e8     46 52 45 51 
1a5ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a5f0     46 52 45 51 
1a5f4     46 52 45 51 
1a5f8     46 52 45 51 
1a5fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a600     46 52 45 51 
1a604     46 52 45 51 
1a608     46 52 45 51 
1a60c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a610     46 52 45 51 
1a614     46 52 45 51 
1a618     46 52 45 51 
1a61c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a620     46 52 45 51 
1a624     46 52 45 51 
1a628     46 52 45 51 
1a62c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a630     46 52 45 51 
1a634     46 52 45 51 
1a638     46 52 45 51 
1a63c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a640     46 52 45 51 
1a644     46 52 45 51 
1a648     46 52 45 51 
1a64c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a650     46 52 45 51 
1a654     46 52 45 51 
1a658     46 52 45 51 
1a65c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a660     46 52 45 51 
1a664     46 52 45 51 
1a668     46 52 45 51 
1a66c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a670     46 52 45 51 
1a674     46 52 45 51 
1a678     46 52 45 51 
1a67c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a680     46 52 45 51 
1a684     46 52 45 51 
1a688     46 52 45 51 
1a68c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a690     46 52 45 51 
1a694     46 52 45 51 
1a698     46 52 45 51 
1a69c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6a0     46 52 45 51 
1a6a4     46 52 45 51 
1a6a8     46 52 45 51 
1a6ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6b0     46 52 45 51 
1a6b4     46 52 45 51 
1a6b8     46 52 45 51 
1a6bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6c0     46 52 45 51 
1a6c4     46 52 45 51 
1a6c8     46 52 45 51 
1a6cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6d0     46 52 45 51 
1a6d4     46 52 45 51 
1a6d8     46 52 45 51 
1a6dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6e0     46 52 45 51 
1a6e4     46 52 45 51 
1a6e8     46 52 45 51 
1a6ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a6f0     46 52 45 51 
1a6f4     46 52 45 51 
1a6f8     46 52 45 51 
1a6fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a700     46 52 45 51 
1a704     46 52 45 51 
1a708     46 52 45 51 
1a70c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a710     46 52 45 51 
1a714     46 52 45 51 
1a718     46 52 45 51 
1a71c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a720     46 52 45 51 
1a724     46 52 45 51 
1a728     46 52 45 51 
1a72c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a730     46 52 45 51 
1a734     46 52 45 51 
1a738     46 52 45 51 
1a73c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a740     46 52 45 51 
1a744     46 52 45 51 
1a748     46 52 45 51 
1a74c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a750     46 52 45 51 
1a754     46 52 45 51 
1a758     46 52 45 51 
1a75c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a760     46 52 45 51 
1a764     46 52 45 51 
1a768     46 52 45 51 
1a76c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a770     46 52 45 51 
1a774     46 52 45 51 
1a778     46 52 45 51 
1a77c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a780     46 52 45 51 
1a784     46 52 45 51 
1a788     46 52 45 51 
1a78c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a790     46 52 45 51 
1a794     46 52 45 51 
1a798     46 52 45 51 
1a79c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7a0     46 52 45 51 
1a7a4     46 52 45 51 
1a7a8     46 52 45 51 
1a7ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7b0     46 52 45 51 
1a7b4     46 52 45 51 
1a7b8     46 52 45 51 
1a7bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7c0     46 52 45 51 
1a7c4     46 52 45 51 
1a7c8     46 52 45 51 
1a7cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7d0     46 52 45 51 
1a7d4     46 52 45 51 
1a7d8     46 52 45 51 
1a7dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7e0     46 52 45 51 
1a7e4     46 52 45 51 
1a7e8     46 52 45 51 
1a7ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a7f0     46 52 45 51 
1a7f4     46 52 45 51 
1a7f8     46 52 45 51 
1a7fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a800     46 52 45 51 
1a804     46 52 45 51 
1a808     46 52 45 51 
1a80c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a810     46 52 45 51 
1a814     46 52 45 51 
1a818     46 52 45 51 
1a81c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a820     46 52 45 51 
1a824     46 52 45 51 
1a828     46 52 45 51 
1a82c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a830     46 52 45 51 
1a834     46 52 45 51 
1a838     46 52 45 51 
1a83c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a840     46 52 45 51 
1a844     46 52 45 51 
1a848     46 52 45 51 
1a84c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a850     46 52 45 51 
1a854     46 52 45 51 
1a858     46 52 45 51 
1a85c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a860     46 52 45 51 
1a864     46 52 45 51 
1a868     46 52 45 51 
1a86c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a870     46 52 45 51 
1a874     46 52 45 51 
1a878     46 52 45 51 
1a87c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a880     46 52 45 51 
1a884     46 52 45 51 
1a888     46 52 45 51 
1a88c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a890     46 52 45 51 
1a894     46 52 45 51 
1a898     46 52 45 51 
1a89c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8a0     46 52 45 51 
1a8a4     46 52 45 51 
1a8a8     46 52 45 51 
1a8ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8b0     46 52 45 51 
1a8b4     46 52 45 51 
1a8b8     46 52 45 51 
1a8bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8c0     46 52 45 51 
1a8c4     46 52 45 51 
1a8c8     46 52 45 51 
1a8cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8d0     46 52 45 51 
1a8d4     46 52 45 51 
1a8d8     46 52 45 51 
1a8dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8e0     46 52 45 51 
1a8e4     46 52 45 51 
1a8e8     46 52 45 51 
1a8ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a8f0     46 52 45 51 
1a8f4     46 52 45 51 
1a8f8     46 52 45 51 
1a8fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a900     46 52 45 51 
1a904     46 52 45 51 
1a908     46 52 45 51 
1a90c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a910     46 52 45 51 
1a914     46 52 45 51 
1a918     46 52 45 51 
1a91c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a920     46 52 45 51 
1a924     46 52 45 51 
1a928     46 52 45 51 
1a92c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a930     46 52 45 51 
1a934     46 52 45 51 
1a938     46 52 45 51 
1a93c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a940     46 52 45 51 
1a944     46 52 45 51 
1a948     46 52 45 51 
1a94c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a950     46 52 45 51 
1a954     46 52 45 51 
1a958     46 52 45 51 
1a95c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a960     46 52 45 51 
1a964     46 52 45 51 
1a968     46 52 45 51 
1a96c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a970     46 52 45 51 
1a974     46 52 45 51 
1a978     46 52 45 51 
1a97c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a980     46 52 45 51 
1a984     46 52 45 51 
1a988     46 52 45 51 
1a98c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a990     46 52 45 51 
1a994     46 52 45 51 
1a998     46 52 45 51 
1a99c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9a0     46 52 45 51 
1a9a4     46 52 45 51 
1a9a8     46 52 45 51 
1a9ac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9b0     46 52 45 51 
1a9b4     46 52 45 51 
1a9b8     46 52 45 51 
1a9bc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9c0     46 52 45 51 
1a9c4     46 52 45 51 
1a9c8     46 52 45 51 
1a9cc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9d0     46 52 45 51 
1a9d4     46 52 45 51 
1a9d8     46 52 45 51 
1a9dc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9e0     46 52 45 51 
1a9e4     46 52 45 51 
1a9e8     46 52 45 51 
1a9ec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1a9f0     46 52 45 51 
1a9f4     46 52 45 51 
1a9f8     46 52 45 51 
1a9fc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa00     46 52 45 51 
1aa04     46 52 45 51 
1aa08     46 52 45 51 
1aa0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa10     46 52 45 51 
1aa14     46 52 45 51 
1aa18     46 52 45 51 
1aa1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa20     46 52 45 51 
1aa24     46 52 45 51 
1aa28     46 52 45 51 
1aa2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa30     46 52 45 51 
1aa34     46 52 45 51 
1aa38     46 52 45 51 
1aa3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa40     46 52 45 51 
1aa44     46 52 45 51 
1aa48     46 52 45 51 
1aa4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa50     46 52 45 51 
1aa54     46 52 45 51 
1aa58     46 52 45 51 
1aa5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa60     46 52 45 51 
1aa64     46 52 45 51 
1aa68     46 52 45 51 
1aa6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa70     46 52 45 51 
1aa74     46 52 45 51 
1aa78     46 52 45 51 
1aa7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa80     46 52 45 51 
1aa84     46 52 45 51 
1aa88     46 52 45 51 
1aa8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aa90     46 52 45 51 
1aa94     46 52 45 51 
1aa98     46 52 45 51 
1aa9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aaa0     46 52 45 51 
1aaa4     46 52 45 51 
1aaa8     46 52 45 51 
1aaac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aab0     46 52 45 51 
1aab4     46 52 45 51 
1aab8     46 52 45 51 
1aabc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aac0     46 52 45 51 
1aac4     46 52 45 51 
1aac8     46 52 45 51 
1aacc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aad0     46 52 45 51 
1aad4     46 52 45 51 
1aad8     46 52 45 51 
1aadc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aae0     46 52 45 51 
1aae4     46 52 45 51 
1aae8     46 52 45 51 
1aaec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aaf0     46 52 45 51 
1aaf4     46 52 45 51 
1aaf8     46 52 45 51 
1aafc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab00     46 52 45 51 
1ab04     46 52 45 51 
1ab08     46 52 45 51 
1ab0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab10     46 52 45 51 
1ab14     46 52 45 51 
1ab18     46 52 45 51 
1ab1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab20     46 52 45 51 
1ab24     46 52 45 51 
1ab28     46 52 45 51 
1ab2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab30     46 52 45 51 
1ab34     46 52 45 51 
1ab38     46 52 45 51 
1ab3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab40     46 52 45 51 
1ab44     46 52 45 51 
1ab48     46 52 45 51 
1ab4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab50     46 52 45 51 
1ab54     46 52 45 51 
1ab58     46 52 45 51 
1ab5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab60     46 52 45 51 
1ab64     46 52 45 51 
1ab68     46 52 45 51 
1ab6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab70     46 52 45 51 
1ab74     46 52 45 51 
1ab78     46 52 45 51 
1ab7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab80     46 52 45 51 
1ab84     46 52 45 51 
1ab88     46 52 45 51 
1ab8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ab90     46 52 45 51 
1ab94     46 52 45 51 
1ab98     46 52 45 51 
1ab9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aba0     46 52 45 51 
1aba4     46 52 45 51 
1aba8     46 52 45 51 
1abac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abb0     46 52 45 51 
1abb4     46 52 45 51 
1abb8     46 52 45 51 
1abbc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abc0     46 52 45 51 
1abc4     46 52 45 51 
1abc8     46 52 45 51 
1abcc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abd0     46 52 45 51 
1abd4     46 52 45 51 
1abd8     46 52 45 51 
1abdc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abe0     46 52 45 51 
1abe4     46 52 45 51 
1abe8     46 52 45 51 
1abec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1abf0     46 52 45 51 
1abf4     46 52 45 51 
1abf8     46 52 45 51 
1abfc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac00     46 52 45 51 
1ac04     46 52 45 51 
1ac08     46 52 45 51 
1ac0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac10     46 52 45 51 
1ac14     46 52 45 51 
1ac18     46 52 45 51 
1ac1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac20     46 52 45 51 
1ac24     46 52 45 51 
1ac28     46 52 45 51 
1ac2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac30     46 52 45 51 
1ac34     46 52 45 51 
1ac38     46 52 45 51 
1ac3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac40     46 52 45 51 
1ac44     46 52 45 51 
1ac48     46 52 45 51 
1ac4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac50     46 52 45 51 
1ac54     46 52 45 51 
1ac58     46 52 45 51 
1ac5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac60     46 52 45 51 
1ac64     46 52 45 51 
1ac68     46 52 45 51 
1ac6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac70     46 52 45 51 
1ac74     46 52 45 51 
1ac78     46 52 45 51 
1ac7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac80     46 52 45 51 
1ac84     46 52 45 51 
1ac88     46 52 45 51 
1ac8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ac90     46 52 45 51 
1ac94     46 52 45 51 
1ac98     46 52 45 51 
1ac9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1aca0     46 52 45 51 
1aca4     46 52 45 51 
1aca8     46 52 45 51 
1acac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acb0     46 52 45 51 
1acb4     46 52 45 51 
1acb8     46 52 45 51 
1acbc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acc0     46 52 45 51 
1acc4     46 52 45 51 
1acc8     46 52 45 51 
1accc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acd0     46 52 45 51 
1acd4     46 52 45 51 
1acd8     46 52 45 51 
1acdc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ace0     46 52 45 51 
1ace4     46 52 45 51 
1ace8     46 52 45 51 
1acec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1acf0     46 52 45 51 
1acf4     46 52 45 51 
1acf8     46 52 45 51 
1acfc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad00     46 52 45 51 
1ad04     46 52 45 51 
1ad08     46 52 45 51 
1ad0c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad10     46 52 45 51 
1ad14     46 52 45 51 
1ad18     46 52 45 51 
1ad1c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad20     46 52 45 51 
1ad24     46 52 45 51 
1ad28     46 52 45 51 
1ad2c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad30     46 52 45 51 
1ad34     46 52 45 51 
1ad38     46 52 45 51 
1ad3c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad40     46 52 45 51 
1ad44     46 52 45 51 
1ad48     46 52 45 51 
1ad4c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad50     46 52 45 51 
1ad54     46 52 45 51 
1ad58     46 52 45 51 
1ad5c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad60     46 52 45 51 
1ad64     46 52 45 51 
1ad68     46 52 45 51 
1ad6c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad70     46 52 45 51 
1ad74     46 52 45 51 
1ad78     46 52 45 51 
1ad7c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad80     46 52 45 51 
1ad84     46 52 45 51 
1ad88     46 52 45 51 
1ad8c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ad90     46 52 45 51 
1ad94     46 52 45 51 
1ad98     46 52 45 51 
1ad9c     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ada0     46 52 45 51 
1ada4     46 52 45 51 
1ada8     46 52 45 51 
1adac     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adb0     46 52 45 51 
1adb4     46 52 45 51 
1adb8     46 52 45 51 
1adbc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adc0     46 52 45 51 
1adc4     46 52 45 51 
1adc8     46 52 45 51 
1adcc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1add0     46 52 45 51 
1add4     46 52 45 51 
1add8     46 52 45 51 
1addc     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1ade0     46 52 45 51 
1ade4     46 52 45 51 
1ade8     46 52 45 51 
1adec     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
1adf0                 | 
1adf0     00 00 00 00 
1adf4     18 00 00 00 
1adf8     31 00 00 00 
1adfc     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
1ae00     61 00 00 00 
1ae04     78 00 00 00 
1ae08     8D 00 00 00 
1ae0c     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
1ae10     B4 00 00 00 
1ae14     C5 00 00 00 
1ae18     D4 00 00 00 
1ae1c     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
1ae20     EB 00 00 00 
1ae24     F4 00 00 00 
1ae28     FA 00 00 00 
1ae2c     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
1ae30     FF 00 00 00 
1ae34     FD 00 00 00 
1ae38     FA 00 00 00 
1ae3c     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
1ae40     EB 00 00 00 
1ae44     E0 00 00 00 
1ae48     D4 00 00 00 
1ae4c     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
1ae50     B4 00 00 00 
1ae54     A1 00 00 00 
1ae58     8D 00 00 00 
1ae5c     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
1ae60     61 00 00 00 
1ae64     4A 00 00 00 
1ae68     31 00 00 00 
1ae6c     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
1ae70     00 00 00 00 
1ae74     E8 FF FF FF 
1ae78     CF FF FF FF 
1ae7c     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
1ae80     9F FF FF FF 
1ae84     88 FF FF FF 
1ae88     73 FF FF FF 
1ae8c     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
1ae90     4C FF FF FF 
1ae94     3B FF FF FF 
1ae98     2C FF FF FF 
1ae9c     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
1aea0     15 FF FF FF 
1aea4     0C FF FF FF 
1aea8     06 FF FF FF 
1aeac     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
1aeb0     01 FF FF FF 
1aeb4     03 FF FF FF 
1aeb8     06 FF FF FF 
1aebc     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
1aec0     15 FF FF FF 
1aec4     20 FF FF FF 
1aec8     2C FF FF FF 
1aecc     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
1aed0     4C FF FF FF 
1aed4     5F FF FF FF 
1aed8     73 FF FF FF 
1aedc     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
1aee0     9F FF FF FF 
1aee4     B6 FF FF FF 
1aee8     CF FF FF FF 
1aeec     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
1aef0                 | 
1aef0     58 03 28 03 
1aef4     FA 02 D0 02 
1aef8     A6 02 80 02 
1aefc     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
1af00     1A 02 FC 01 
1af04     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
1af08     AC 01 94 01 
1af0c     7D 01 68 01 
1af10     53 01 40 01 
1af14     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
1af18     0D 01 FE 00 
1af1c     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
1af20     D6 00 CA 00 
1af24     BE 00 B4 00 
1af28     AA 00 A0 00 
1af2c     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
1af30     87 00 7F 00 
1af34     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
1af38     6B 00 22 03 
1af3c     F5 02 CB 02 
1af40     A2 02 7D 02 
1af44     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
1af48     17 02 F9 01 
1af4c     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
1af50     A9 01 91 01 
1af54     7B 01 65 01 
1af58     51 01 3E 01 
1af5c     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
1af60     0C 01 FD 00 
1af64     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
1af68     D5 00 C9 00 
1af6c     BD 00 B3 00 
1af70     A9 00 9F 00 
1af74     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
1af78     86 00 7E 00 
1af7c     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
1af80     4C 03 1C 03 
1af84     F0 02 C5 02 
1af88     9E 02 78 02 
1af8c     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
1af90     14 02 F6 01 
1af94     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
1af98     A6 01 8E 01 
1af9c     78 01 63 01 
1afa0     4F 01 3C 01 
1afa4     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
1afa8     0A 01 FB 00 
1afac     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
1afb0     D3 00 C7 00 
1afb4     BC 00 B1 00 
1afb8     A7 00 9E 00 
1afbc     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
1afc0     85 00 7D 00 
1afc4     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
1afc8     46 03 17 03 
1afcc     EA 02 C0 02 
1afd0     99 02 74 02 
1afd4     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
1afd8     10 02 F2 01 
1afdc     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
1afe0     A3 01 8B 01 
1afe4     75 01 60 01 
1afe8     4C 01 3A 01 
1afec     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
1aff0     08 01 F9 00 
1aff4     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
1aff8     D1 00 C6 00 
1affc     BB 00 B0 00 
1b000     A6 00 9D 00 
1b004     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
1b008     84 00 7D 00 
1b00c     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
1b010     40 03 11 03 
1b014     E5 02 BB 02 
1b018     94 02 6F 02 
1b01c     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
1b020     0C 02 EF 01 
1b024     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
1b028     A0 01 88 01 
1b02c     72 01 5E 01 
1b030     4A 01 38 01 
1b034     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
1b038     06 01 F7 00 
1b03c     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
1b040     D0 00 C4 00 
1b044     B9 00 AF 00 
1b048     A5 00 9C 00 
1b04c     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
1b050     83 00 7C 00 
1b054     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
1b058     3A 03 0B 03 
1b05c     E0 02 B6 02 
1b060     8F 02 6B 02 
1b064     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
1b068     08 02 EB 01 
1b06c     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
1b070     9D 01 86 01 
1b074     70 01 5B 01 
1b078     48 01 35 01 
1b07c     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
1b080     04 01 F5 00 
1b084     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
1b088     CE 00 C3 00 
1b08c     B8 00 AE 00 
1b090     A4 00 9B 00 
1b094     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
1b098     82 00 7B 00 
1b09c     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
1b0a0     34 03 06 03 
1b0a4     DA 02 B1 02 
1b0a8     8B 02 66 02 
1b0ac     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
1b0b0     04 02 E7 01 
1b0b4     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
1b0b8     9A 01 83 01 
1b0bc     6D 01 59 01 
1b0c0     45 01 33 01 
1b0c4     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
1b0c8     02 01 F4 00 
1b0cc     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
1b0d0     CD 00 C1 00 
1b0d4     B7 00 AC 00 
1b0d8     A3 00 9A 00 
1b0dc     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
1b0e0     81 00 7A 00 
1b0e4     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
1b0e8     2E 03 00 03 
1b0ec     D5 02 AC 02 
1b0f0     86 02 62 02 
1b0f4     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
1b0f8     01 02 E4 01 
1b0fc     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
1b100     97 01 80 01 
1b104     6B 01 56 01 
1b108     43 01 31 01 
1b10c     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
1b110     00 01 F2 00 
1b114     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
1b118     CC 00 C0 00 
1b11c     B5 00 AB 00 
1b120     A1 00 98 00 
1b124     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
1b128     80 00 79 00 
1b12c     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
1b130     8B 03 58 03 
1b134     28 03 FA 02 
1b138     D0 02 A6 02 
1b13c     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
1b140     3A 02 1A 02 
1b144     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
1b148     C5 01 AC 01 
1b14c     94 01 7D 01 
1b150     68 01 53 01 
1b154     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
1b158     1D 01 0D 01 
1b15c     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
1b160     E2 00 D6 00 
1b164     CA 00 BE 00 
1b168     B4 00 AA 00 
1b16c     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
1b170     8F 00 87 00 
1b174     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
1b178     84 03 52 03 
1b17c     22 03 F5 02 
1b180     CB 02 A3 02 
1b184     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
1b188     37 02 17 02 
1b18c     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
1b190     C2 01 A9 01 
1b194     91 01 7B 01 
1b198     65 01 51 01 
1b19c     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
1b1a0     1C 01 0C 01 
1b1a4     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
1b1a8     E1 00 D4 00 
1b1ac     C8 00 BD 00 
1b1b0     B3 00 A9 00 
1b1b4     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
1b1b8     8E 00 86 00 
1b1bc     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
1b1c0     7E 03 4C 03 
1b1c4     1C 03 F0 02 
1b1c8     C5 02 9E 02 
1b1cc     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
1b1d0     33 02 14 02 
1b1d4     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
1b1d8     BF 01 A6 01 
1b1dc     8E 01 78 01 
1b1e0     63 01 4F 01 
1b1e4     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
1b1e8     1A 01 0A 01 
1b1ec     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
1b1f0     DF 00 D3 00 
1b1f4     C7 00 BC 00 
1b1f8     B1 00 A7 00 
1b1fc     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
1b200     8D 00 85 00 
1b204     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
1b208     77 03 46 03 
1b20c     17 03 EA 02 
1b210     C0 02 99 02 
1b214     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
1b218     2F 02 10 02 
1b21c     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
1b220     BC 01 A3 01 
1b224     8B 01 75 01 
1b228     60 01 4C 01 
1b22c     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
1b230     18 01 08 01 
1b234     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
1b238     DE 00 D1 00 
1b23c     C6 00 BB 00 
1b240     B0 00 A6 00 
1b244     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
1b248     8C 00 84 00 
1b24c     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
1b250     71 03 40 03 
1b254     11 03 E5 02 
1b258     BB 02 94 02 
1b25c     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
1b260     2B 02 0C 02 
1b264     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
1b268     B9 01 A0 01 
1b26c     88 01 72 01 
1b270     5E 01 4A 01 
1b274     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
1b278     16 01 06 01 
1b27c     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
1b280     DC 00 D0 00 
1b284     C4 00 B9 00 
1b288     AF 00 A5 00 
1b28c     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
1b290     8B 00 83 00 
1b294     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
1b298     6B 03 3A 03 
1b29c     0B 03 E0 02 
1b2a0     B6 02 8F 02 
1b2a4     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
1b2a8     27 02 08 02 
1b2ac     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
1b2b0     B5 01 9D 01 
1b2b4     86 01 70 01 
1b2b8     5B 01 48 01 
1b2bc     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
1b2c0     14 01 04 01 
1b2c4     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
1b2c8     DB 00 CE 00 
1b2cc     C3 00 B8 00 
1b2d0     AE 00 A4 00 
1b2d4     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
1b2d8     8A 00 82 00 
1b2dc     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
1b2e0     64 03 34 03 
1b2e4     06 03 DA 02 
1b2e8     B1 02 8B 02 
1b2ec     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
1b2f0     23 02 04 02 
1b2f4     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
1b2f8     B2 01 9A 01 
1b2fc     83 01 6D 01 
1b300     59 01 45 01 
1b304     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
1b308     12 01 02 01 
1b30c     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
1b310     D9 00 CD 00 
1b314     C1 00 B7 00 
1b318     AC 00 A3 00 
1b31c     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
1b320     89 00 81 00 
1b324     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
1b328     5E 03 2E 03 
1b32c     00 03 D5 02 
1b330     AC 02 86 02 
1b334     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
1b338     1F 02 01 02 
1b33c     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
1b340     AF 01 97 01 
1b344     80 01 6B 01 
1b348     56 01 43 01 
1b34c     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
1b350     10 01 00 01 
1b354     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
1b358     D8 00 CB 00 
1b35c     C0 00 B5 00 
1b360     AB 00 A1 00 
1b364     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
1b368     88 00 80 00 
1b36c     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
1b370                 | 	alignl
1b370                 | _audio019_spin2_dat_
1b370                 | 
1b370                 | audio       org     0
1b370     00 F2 07 F6 | 			mov     ptrb,#0
1b374     08 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
1b378     08 C8 1C FC |             wxpin   #100,#left
1b37c     09 7A 05 FC |             wrpin   dac,#right
1b380     09 C8 1C FC |             wxpin   #100,#right
1b384     41 90 64 FD |             dirh    #left addpins 1
1b388     20 90 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
1b38c     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
1b390     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
1b394                 |             
1b394                 | '---------------------------------------------------------------------------------        
1b394                 | '----------------- The main loop -------------------------------------------------
1b394                 | '---------------------------------------------------------------------------------
1b394                 | 
1b394     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
1b398     10 00 90 CD |       if_c  jmp     #loop1
1b39c                 |   
1b39c     09 4A 05 F6 |             mov     cn,#9
1b3a0     81 4A 8D F9 | p402        altd    cn,#a21000000
1b3a4     80 00 80 F1 |             sub     0-0,a20000000
1b3a8     FD 4B 6D FB |             djnz    cn,#p402
1b3ac                 |     
1b3ac     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
1b3b0     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
1b3b4     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
1b3b8     01 4A 05 C6 |     if_c    mov     cn,#1
1b3bc     85 4C 39 F3 |             fle     ct,time3 wcz
1b3c0     02 4A 05 C6 |     if_c    mov     cn,#2     
1b3c4     86 4C 39 F3 |             fle     ct,time4 wcz
1b3c8     03 4A 05 C6 |     if_c    mov     cn,#3
1b3cc     87 4C 39 F3 |             fle     ct,time5 wcz
1b3d0     04 4A 05 C6 |     if_c    mov     cn,#4
1b3d4     88 4C 39 F3 |             fle     ct,time6 wcz
1b3d8     05 4A 05 C6 |     if_c    mov     cn,#5
1b3dc     89 4C 39 F3 |             fle     ct,time7 wcz
1b3e0     06 4A 05 C6 |     if_c    mov     cn,#6
1b3e4     8A 4C 39 F3 |             fle     ct,time8 wcz
1b3e8     07 4A 05 C6 |     if_c    mov     cn,#7
1b3ec                 | 
1b3ec                 | 
1b3ec                 | '----------------------------------------------------------------------------------
1b3ec                 | '------------- Compute channel samples --------------------------------------------
1b3ec                 | '----------------------------------------------------------------------------------
1b3ec                 | 
1b3ec                 | 
1b3ec     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
1b3f0     05 20 65 F0 |             shl     channeladd,#5
1b3f4     90 F0 03 F1 |             add     ptra,channeladd
1b3f8                 | 
1b3f8     28 0E 64 FD |             setq    #7               
1b3fc     00 31 05 FB |             rdlong  pointer0,ptra
1b400                 |             
1b400     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
1b404     9D 44 31 F9 |     	    getword avol0,volpan0,#0
1b408     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
1b40c     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
1b410                 | 
1b410     83 4A 95 F9 |             alts    cn, #time1
1b414     00 4E 01 F6 |             mov     dt0,0-0   
1b418     82 4E 81 F1 |             sub     dt0,time0
1b41c                 | 
1b41c     83 4A 8D F9 |             altd    cn, #time1
1b420     A0 00 00 F1 |             add     0-0,afreq0  	
1b424                 | 
1b424     A1 30 01 F1 |             add     pointer0,askip0
1b428     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
1b42c     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
1b430     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
1b434     98 24 01 F6 |             mov     qq,pointer0
1b438     9A 24 01 F1 |             add     qq,sstart0
1b43c                 | 
1b43c     1F 34 0D F4 |             testb   sstart0,#31 wz
1b440                 | 
1b440     92 26 C1 5A |     if_nz   rdbyte  spl,qq
1b444     08 26 65 50 |     if_nz   shl     spl,#8
1b448     92 26 E1 AA |     if_z    rdword  spl,qq
1b44c                 | 
1b44c     A2 26 31 FA |             scas    spl,avol0
1b450     00 26 01 F6 |             mov     spl,0-0
1b454                 |  
1b454     A3 26 31 FA |             scas    spl,apan0
1b458     00 50 01 F6 |             mov     ls0,0-0
1b45c                 |  
1b45c     AD 4A 8D F9 |             altd    cn,#ls1
1b460     A8 00 00 F6 |             mov     0-0,ls0
1b464                 |              
1b464     20 00 00 FF 
1b468     00 24 05 F6 |             mov     qq,##16384
1b46c     A3 24 81 F1 |             sub     qq,apan0
1b470     92 26 31 FA |             scas    spl,qq
1b474     00 52 01 F6 |             mov     rs0, 0-0
1b478                 | 
1b478     B5 4A 8D F9 |             altd    cn,#rs1
1b47c     A9 00 00 F6 |             mov     0-0,rs0
1b480                 | 
1b480     A9 32 29 F9 |             setword sample0,rs0,#1
1b484     A8 32 21 F9 |             setword sample0,ls0,#0
1b488                 |             
1b488                 | 
1b488     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
1b48c     00 30 05 A6 |     if_z    mov    pointer0, #0  
1b490     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
1b494     28 02 64 FD | p403        setq #1
1b498                 |      
1b498     00 31 65 FC |             wrlong  pointer0,ptra
1b49c     90 F0 83 F1 |             sub     ptra, channeladd
1b4a0     00 00 90 FD |             jmp     #p101
1b4a4                 |                        
1b4a4                 |             
1b4a4                 |           
1b4a4                 |             
1b4a4                 | '------------------------ Channels end here --------------------       
1b4a4                 | 
1b4a4                 | ' Now add all channels and put the sample to the buffer    
1b4a4                 | 
1b4a4                 | 
1b4a4     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
1b4a8     01 22 85 A1 |     if_z    sub     front,#1         ' 
1b4ac     FF 23 05 A5 |     if_z    and     front,#511     
1b4b0                 |            
1b4b0                 |     
1b4b0     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
1b4b4     00 56 05 F6 |             mov     ls,#0
1b4b8     B5 58 01 F1 |             add     rs,rs1
1b4bc     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
1b4c0     B7 58 01 F1 |             add     rs,rs3
1b4c4     B8 58 01 F1 |             add     rs,rs4
1b4c8     B9 58 01 F1 |             add     rs,rs5
1b4cc     BA 58 01 F1 |             add     rs,rs6
1b4d0     BB 58 01 F1 |             add     rs,rs7
1b4d4     BC 58 01 F1 |             add     rs,rs8
1b4d8                 | 
1b4d8                 |            
1b4d8     AD 56 01 F1 |             add     ls,ls1
1b4dc     AE 56 01 F1 |             add     ls,ls2
1b4e0     AF 56 01 F1 |             add     ls,ls3
1b4e4     B0 56 01 F1 |             add     ls,ls4
1b4e8     B1 56 01 F1 |             add     ls,ls5
1b4ec     B2 56 01 F1 |             add     ls,ls6
1b4f0     B3 56 01 F1 |             add     ls,ls7
1b4f4     B4 56 01 F1 |             add     ls,ls8
1b4f8                 | 
1b4f8                 |  		
1b4f8     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
1b4fc     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
1b500                 | 		    
1b500     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
1b504     AC 16 01 F6 |             mov newsample, rs
1b508                 | 
1b508     82 48 01 F6 |             mov     oldt0,time0      ' update global time
1b50c     A7 04 01 F1 |             add     time0,dt0    
1b510                 | 
1b510                 |             
1b510                 |  
1b510                 |                                      ' now push dt0 samples to the buffer
1b510     00 4E 0D F2 |             cmp      dt0,#0 wz
1b514     94 FE 9F AD |     if_z    jmp      #loop1
1b518     A7 18 01 F6 |             mov      t1,dt0
1b51c                 |   
1b51c     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
1b520     01 1A 85 F1 |             sub     t2,#1
1b524     FF 1B 05 F5 |             and     t2,#511
1b528     91 1A 19 F2 |             cmp     t2,front wcz
1b52c     EC FF 9F AD |     if_e    jmp     #p301    
1b530                 |     
1b530     91 16 31 FC |             wrlut   newsample, front
1b534     01 22 05 F1 |             add     front,#1
1b538     FF 23 05 F5 |             and     front,#511
1b53c     F7 19 6D FB |             djnz    t1,#p301
1b540                 |             
1b540     50 FE 9F FD |             jmp     #loop            'loop
1b544                 | 
1b544                 | '-------------------------------------------------------------------------
1b544                 | '------------------ This is the end of the main loop ---------------------
1b544                 | '-------------------------------------------------------------------------
1b544                 | 
1b544                 | '--------------------------------------------------------------------------
1b544                 | '------ Interrupt service -------------------------------------------------
1b544                 | '------ Output the sample, get the next one if exists ---------------------
1b544                 | '--------------------------------------------------------------------------
1b544                 | 
1b544     08 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
1b548     09 2A 25 FC |             wypin   rsample,#right       '4
1b54c                 |            
1b54c     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
1b550     F5 FF 3B AB |     if_e    reti1                        '8/10
1b554                 | 
1b554     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
1b558     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
1b55c     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
1b560     F5 FF 3B FB |             reti1                        '17/19 
1b564                 |           
1b564                 | '---------------------------------------------------------------------------
1b564                 | '-------- End of interrupt -------------------------------------------------
1b564                 | '---------------------------------------------------------------------------    
1b564                 | 
1b564                 | 
1b564                 | '---------------------------------------------------------------------------
1b564                 | '------- Variables ---------------------------------------------------------
1b564                 | '---------------------------------------------------------------------------
1b564                 | 
1b564                 | ' constants
1b564                 | 
1b564     00 00 00 00 | hp long 0
1b568     00 00 00 00 | lp long 0
1b56c     00 00 00 00 | bp long 0
1b570     00 00 00 10 | a20000000   long $10000000
1b574     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
1b578                 | 
1b578                 | ' Time variables
1b578                 | 
1b578     00 00 00 00 | time0       long 0    ' Global sample computing time
1b57c     01 00 00 00 | time1       long 1    ' Local channels time
1b580     02 00 00 00 | time2       long 2
1b584     03 00 00 00 | time3       long 3
1b588     04 00 00 00 | time4       long 4
1b58c     05 00 00 00 | time5       long 5
1b590     06 00 00 00 | time6       long 6
1b594     07 00 00 00 | time7       long 7
1b598     08 00 00 00 | time8       long 8
1b59c                 | 
1b59c                 | 
1b59c                 | 
1b59c     00 00 00 00 | newsample long 0
1b5a0                 | '
1b5a0     00 00 00 00 | t1 long 0
1b5a4     00 00 00 00 | t2 long 0
1b5a8                 | '
1b5a8     00 00 00 00 | nrsample long 0
1b5ac     00 00 00 00 | nlsample long 0
1b5b0                 | '
1b5b0     00 00 00 00 | channeladd long 0
1b5b4                 | 
1b5b4                 | 
1b5b4     00 00 00 00 | front       long 0
1b5b8                 | 
1b5b8                 | ' temporary variables 
1b5b8                 | '
1b5b8     00 00 00 00 | qq          long 0
1b5bc     00 00 00 00 | spl         long 0
1b5c0                 | 
1b5c0                 | ' circular buffer in LUT
1b5c0                 | 
1b5c0                 | 
1b5c0                 | '
1b5c0                 | 
1b5c0                 | ' Interrupt ISR variables
1b5c0                 | 
1b5c0                 | 
1b5c0     00 00 00 00 | lsample     long 0
1b5c4     00 00 00 00 | rsample     long 0
1b5c8     00 00 00 00 | lsnext      long 0
1b5cc     00 00 00 00 | rsnext      long 0 
1b5d0                 | 
1b5d0                 | 
1b5d0     00 00 00 00 | pointer0    long 0
1b5d4     00 00 00 00 | sample0     long 0
1b5d8     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
1b5dc     00 00 00 00 | lstart0     long 0
1b5e0     00 00 00 00 | lend0       long 0
1b5e4     00 00 00 00 | volpan0     long 0
1b5e8     00 00 00 00 | freqskip0   long 0
1b5ec     00 00 00 00 | dummy0      long 0
1b5f0                 | 
1b5f0     00 00 00 00 | afreq0      long 0
1b5f4     00 00 00 00 | askip0      long 0
1b5f8     00 00 00 00 | avol0       long 0
1b5fc     00 00 00 00 | apan0       long 0
1b600                 | 
1b600     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
1b604     00 00 00 00 | cn          long 0
1b608     00 00 00 00 | ct          long 0
1b60c     00 00 00 00 | dt0         long 0
1b610                 | 
1b610                 | ' Samples
1b610     00 00 00 00 | ls0         long 0
1b614     00 00 00 00 | rs0         long 0
1b618     00 00 00 00 | channel     long 0
1b61c     00 00 00 00 | ls          long 0    ' Global sample variable
1b620     00 00 00 00 | rs          long 0
1b624                 | 
1b624     00 00 00 00 | ls1         long 0    ' Channel samples
1b628     00 00 00 00 | ls2         long 0
1b62c     00 00 00 00 | ls3         long 0
1b630     00 00 00 00 | ls4         long 0
1b634     00 00 00 00 | ls5         long 0
1b638     00 00 00 00 | ls6         long 0
1b63c     00 00 00 00 | ls7         long 0
1b640     00 00 00 00 | ls8         long 0
1b644     00 00 00 00 | rs1         long 0
1b648     00 00 00 00 | rs2         long 0
1b64c     00 00 00 00 | rs3         long 0
1b650     00 00 00 00 | rs4         long 0
1b654     00 00 00 00 | rs5         long 0
1b658     00 00 00 00 | rs6         long 0
1b65c     00 00 00 00 | rs7         long 0
1b660     00 00 00 00 | rs8         long 0
1b664                 | 
1b664     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
1b668                 | 
1b668     00 00 00 00 
1b66c     00 00 00 00 | null  			long 	0,0           ' for channel reset
1b670     73 32 00 04 
1b674     00 00 10 00 
1b678     00 00 00 00 
1b67c     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
1b680     00 00 C9 00 
1b684     92 01 5B 02 
1b688     24 03 ED 03 
1b68c     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
1b690     48 06 11 07 
1b694     D9 07 A2 08 
1b698     6A 09 33 0A 
1b69c     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
1b6a0     8C 0C 54 0D 
1b6a4     1C 0E E3 0E 
1b6a8     AB 0F 72 10 
1b6ac     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
1b6b0     C8 12 8F 13 
1b6b4     55 14 1C 15 
1b6b8     E2 15 A8 16 
1b6bc     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
1b6c0     F9 18 BE 19 
1b6c4     82 1A 47 1B 
1b6c8     0B 1C CF 1C 
1b6cc     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
1b6d0     1A 1F DD 1F 
1b6d4     9F 20 61 21 
1b6d8     23 22 E5 22 
1b6dc     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
1b6e0     28 25 E8 25 
1b6e4     A8 26 67 27 
1b6e8     26 28 E5 28 
1b6ec     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
1b6f0     1F 2B DC 2B 
1b6f4     99 2C 55 2D 
1b6f8     11 2E CC 2E 
1b6fc     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
1b700     FB 30 B5 31 
1b704     6E 32 26 33 
1b708     DF 33 96 34 
1b70c     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
1b710     BA 36 6F 37 
1b714     24 38 D9 38 
1b718     8C 39 40 3A 
1b71c     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
1b720     56 3C 07 3D 
1b724     B8 3D 68 3E 
1b728     17 3F C5 3F 
1b72c     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
1b730     CE 41 7A 42 
1b734     25 43 D0 43 
1b738     7A 44 24 45 
1b73c     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
1b740     1C 47 C3 47 
1b744     69 48 0F 49 
1b748     B4 49 58 4A 
1b74c     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
1b750     3F 4C E0 4C 
1b754     81 4D 20 4E 
1b758     BF 4E 5D 4F 
1b75c     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
1b760     33 51 CE 51 
1b764     68 52 02 53 
1b768     9B 53 32 54 
1b76c     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
1b770     F5 55 8A 56 
1b774     1D 57 B0 57 
1b778     42 58 D3 58 
1b77c     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
1b780     82 5A 0F 5B 
1b784     9C 5B 28 5C 
1b788     B3 5C 3E 5D 
1b78c     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
1b790     D7 5E 5D 5F 
1b794     E3 5F 68 60 
1b798     EB 60 6E 61 
1b79c     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
1b7a0     F1 62 70 63 
1b7a4     EE 63 6C 64 
1b7a8     E8 64 63 65 
1b7ac     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
1b7b0     CF 66 46 67 
1b7b4     BC 67 32 68 
1b7b8     A6 68 19 69 
1b7bc     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
1b7c0     6D 6A DC 6A 
1b7c4     4A 6B B7 6B 
1b7c8     23 6C 8E 6C 
1b7cc     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
1b7d0     C9 6D 30 6E 
1b7d4     96 6E FB 6E 
1b7d8     5E 6F C1 6F 
1b7dc     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
1b7e0     E2 70 40 71 
1b7e4     9D 71 F9 71 
1b7e8     54 72 AE 72 
1b7ec     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
1b7f0     B5 73 0A 74 
1b7f4     5F 74 B2 74 
1b7f8     04 75 55 75 
1b7fc     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
1b800     41 76 8D 76 
1b804     D8 76 22 77 
1b808     6B 77 B3 77 
1b80c     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
1b810     84 78 C7 78 
1b814     09 79 4A 79 
1b818     89 79 C8 79 
1b81c     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
1b820     7C 7A B6 7A 
1b824     EE 7A 26 7B 
1b828     5C 7B 91 7B 
1b82c     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
1b830     29 7C 59 7C 
1b834     88 7C B6 7C 
1b838     E3 7C 0E 7D 
1b83c     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
1b840     89 7D B0 7D 
1b844     D5 7D FA 7D 
1b848     1D 7E 3E 7E 
1b84c     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
1b850     9C 7E B9 7E 
1b854     D5 7E EF 7E 
1b858     09 7F 21 7F 
1b85c     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
1b860     61 7F 74 7F 
1b864     86 7F 97 7F 
1b868     A6 7F B4 7F 
1b86c     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
1b870     D8 7F E1 7F 
1b874     E9 7F F0 7F 
1b878     F5 7F F9 7F 
1b87c     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
1b880     FF 7F FE 7F 
1b884     FD 7F F9 7F 
1b888     F5 7F F0 7F 
1b88c     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
1b890     D8 7F CD 7F 
1b894     C1 7F B4 7F 
1b898     A6 7F 97 7F 
1b89c     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
1b8a0     61 7F 4D 7F 
1b8a4     37 7F 21 7F 
1b8a8     09 7F EF 7E 
1b8ac     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
1b8b0     9C 7E 7E 7E 
1b8b4     5F 7E 3E 7E 
1b8b8     1D 7E FA 7D 
1b8bc     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
1b8c0     89 7D 62 7D 
1b8c4     39 7D 0E 7D 
1b8c8     E3 7C B6 7C 
1b8cc     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
1b8d0     29 7C F8 7B 
1b8d4     C5 7B 91 7B 
1b8d8     5C 7B 26 7B 
1b8dc     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
1b8e0     7C 7A 41 7A 
1b8e4     05 7A C8 79 
1b8e8     89 79 4A 79 
1b8ec     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
1b8f0     84 78 3F 78 
1b8f4     FA 77 B3 77 
1b8f8     6B 77 22 77 
1b8fc     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
1b900     41 76 F3 75 
1b904     A5 75 55 75 
1b908     04 75 B2 74 
1b90c     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
1b910     B5 73 5E 73 
1b914     07 73 AE 72 
1b918     54 72 F9 71 
1b91c     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
1b920     E2 70 83 70 
1b924     22 70 C1 6F 
1b928     5E 6F FB 6E 
1b92c     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
1b930     C9 6D 61 6D 
1b934     F8 6C 8E 6C 
1b938     23 6C B7 6B 
1b93c     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
1b940     6D 6A FD 69 
1b944     8B 69 19 69 
1b948     A6 68 32 68 
1b94c     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
1b950     CF 66 56 66 
1b954     DD 65 63 65 
1b958     E8 64 6C 64 
1b95c     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
1b960     F1 62 71 62 
1b964     F0 61 6E 61 
1b968     EB 60 68 60 
1b96c     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
1b970     D7 5E 4F 5E 
1b974     C7 5D 3E 5D 
1b978     B3 5C 28 5C 
1b97c     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
1b980     82 5A F3 59 
1b984     64 59 D3 58 
1b988     42 58 B0 57 
1b98c     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
1b990     F5 55 60 55 
1b994     C9 54 32 54 
1b998     9B 53 02 53 
1b99c     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
1b9a0     33 51 97 50 
1b9a4     FB 4F 5D 4F 
1b9a8     BF 4E 20 4E 
1b9ac     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
1b9b0     3F 4C 9D 4B 
1b9b4     FB 4A 58 4A 
1b9b8     B4 49 0F 49 
1b9bc     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
1b9c0     1C 47 75 46 
1b9c4     CD 45 24 45 
1b9c8     7A 44 D0 43 
1b9cc     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
1b9d0     CE 41 21 41 
1b9d4     73 40 C5 3F 
1b9d8     17 3F 68 3E 
1b9dc     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
1b9e0     56 3C A5 3B 
1b9e4     F2 3A 40 3A 
1b9e8     8C 39 D9 38 
1b9ec     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
1b9f0     BA 36 04 36 
1b9f4     4D 35 96 34 
1b9f8     DF 33 26 33 
1b9fc     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
1ba00     FB 30 41 30 
1ba04     87 2F CC 2E 
1ba08     11 2E 55 2D 
1ba0c     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
1ba10     1F 2B 61 2A 
1ba14     A3 29 E5 28 
1ba18     26 28 67 27 
1ba1c     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
1ba20     28 25 67 24 
1ba24     A6 23 E5 22 
1ba28     23 22 61 21 
1ba2c     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
1ba30     1A 1F 57 1E 
1ba34     93 1D CF 1C 
1ba38     0B 1C 47 1B 
1ba3c     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
1ba40     F9 18 33 18 
1ba44     6E 17 A8 16 
1ba48     E2 15 1C 15 
1ba4c     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
1ba50     C8 12 01 12 
1ba54     3A 11 72 10 
1ba58     AB 0F E3 0E 
1ba5c     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
1ba60     8C 0C C4 0B 
1ba64     FB 0A 33 0A 
1ba68     6A 09 A2 08 
1ba6c     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
1ba70     48 06 7F 05 
1ba74     B6 04 ED 03 
1ba78     24 03 5B 02 
1ba7c     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
1ba80     00 00 37 FF 
1ba84     6E FE A5 FD 
1ba88     DC FC 13 FC 
1ba8c     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
1ba90     B8 F9 EF F8 
1ba94     27 F8 5E F7 
1ba98     96 F6 CD F5 
1ba9c     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
1baa0     74 F3 AC F2 
1baa4     E4 F1 1D F1 
1baa8     55 F0 8E EF 
1baac     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
1bab0     38 ED 71 EC 
1bab4     AB EB E4 EA 
1bab8     1E EA 58 E9 
1babc     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
1bac0     07 E7 42 E6 
1bac4     7E E5 B9 E4 
1bac8     F5 E3 31 E3 
1bacc     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
1bad0     E6 E0 23 E0 
1bad4     61 DF 9F DE 
1bad8     DD DD 1B DD 
1badc     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
1bae0     D8 DA 18 DA 
1bae4     58 D9 99 D8 
1bae8     DA D7 1B D7 
1baec     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
1baf0     E1 D4 24 D4 
1baf4     67 D3 AB D2 
1baf8     EF D1 34 D1 
1bafc     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
1bb00     05 CF 4B CE 
1bb04     92 CD DA CC 
1bb08     21 CC 6A CB 
1bb0c     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
1bb10     46 C9 91 C8 
1bb14     DC C7 27 C7 
1bb18     74 C6 C0 C5 
1bb1c     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
1bb20     AA C3 F9 C2 
1bb24     48 C2 98 C1 
1bb28     E9 C0 3B C0 
1bb2c     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
1bb30     32 BE 86 BD 
1bb34     DB BC 30 BC 
1bb38     86 BB DC BA 
1bb3c     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
1bb40     E4 B8 3D B8 
1bb44     97 B7 F1 B6 
1bb48     4C B6 A8 B5 
1bb4c     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
1bb50     C1 B3 20 B3 
1bb54     7F B2 E0 B1 
1bb58     41 B1 A3 B0 
1bb5c     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
1bb60     CD AE 32 AE 
1bb64     98 AD FE AC 
1bb68     65 AC CE AB 
1bb6c     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
1bb70     0B AA 76 A9 
1bb74     E3 A8 50 A8 
1bb78     BE A7 2D A7 
1bb7c     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
1bb80     7E A5 F1 A4 
1bb84     64 A4 D8 A3 
1bb88     4D A3 C2 A2 
1bb8c     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
1bb90     29 A1 A3 A0 
1bb94     1D A0 98 9F 
1bb98     15 9F 92 9E 
1bb9c     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
1bba0     0F 9D 90 9C 
1bba4     12 9C 94 9B 
1bba8     18 9B 9D 9A 
1bbac     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
1bbb0     31 99 BA 98 
1bbb4     44 98 CE 97 
1bbb8     5A 97 E7 96 
1bbbc     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
1bbc0     93 95 24 95 
1bbc4     B6 94 49 94 
1bbc8     DD 93 72 93 
1bbcc     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
1bbd0     37 92 D0 91 
1bbd4     6A 91 05 91 
1bbd8     A2 90 3F 90 
1bbdc     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
1bbe0     1E 8F C0 8E 
1bbe4     63 8E 07 8E 
1bbe8     AC 8D 52 8D 
1bbec     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
1bbf0     4B 8C F6 8B 
1bbf4     A1 8B 4E 8B 
1bbf8     FC 8A AB 8A 
1bbfc     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
1bc00     BF 89 73 89 
1bc04     28 89 DE 88 
1bc08     95 88 4D 88 
1bc0c     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
1bc10     7C 87 39 87 
1bc14     F7 86 B6 86 
1bc18     77 86 38 86 
1bc1c     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
1bc20     84 85 4A 85 
1bc24     12 85 DA 84 
1bc28     A4 84 6F 84 
1bc2c     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
1bc30     D7 83 A7 83 
1bc34     78 83 4A 83 
1bc38     1D 83 F2 82 
1bc3c     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
1bc40     77 82 50 82 
1bc44     2B 82 06 82 
1bc48     E3 81 C2 81 
1bc4c     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
1bc50     64 81 47 81 
1bc54     2B 81 11 81 
1bc58     F7 80 DF 80 
1bc5c     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
1bc60     9F 80 8C 80 
1bc64     7A 80 69 80 
1bc68     5A 80 4C 80 
1bc6c     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
1bc70     28 80 1F 80 
1bc74     17 80 10 80 
1bc78     0B 80 07 80 
1bc7c     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
1bc80     01 80 02 80 
1bc84     03 80 07 80 
1bc88     0B 80 10 80 
1bc8c     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
1bc90     28 80 33 80 
1bc94     3F 80 4C 80 
1bc98     5A 80 69 80 
1bc9c     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
1bca0     9F 80 B3 80 
1bca4     C9 80 DF 80 
1bca8     F7 80 11 81 
1bcac     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
1bcb0     64 81 82 81 
1bcb4     A1 81 C2 81 
1bcb8     E3 81 06 82 
1bcbc     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
1bcc0     77 82 9E 82 
1bcc4     C7 82 F2 82 
1bcc8     1D 83 4A 83 
1bccc     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
1bcd0     D7 83 08 84 
1bcd4     3B 84 6F 84 
1bcd8     A4 84 DA 84 
1bcdc     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
1bce0     84 85 BF 85 
1bce4     FB 85 38 86 
1bce8     77 86 B6 86 
1bcec     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
1bcf0     7C 87 C1 87 
1bcf4     06 88 4D 88 
1bcf8     95 88 DE 88 
1bcfc     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
1bd00     BF 89 0D 8A 
1bd04     5B 8A AB 8A 
1bd08     FC 8A 4E 8B 
1bd0c     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
1bd10     4B 8C A2 8C 
1bd14     F9 8C 52 8D 
1bd18     AC 8D 07 8E 
1bd1c     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
1bd20     1E 8F 7D 8F 
1bd24     DE 8F 3F 90 
1bd28     A2 90 05 91 
1bd2c     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
1bd30     37 92 9F 92 
1bd34     08 93 72 93 
1bd38     DD 93 49 94 
1bd3c     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
1bd40     93 95 03 96 
1bd44     75 96 E7 96 
1bd48     5A 97 CE 97 
1bd4c     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
1bd50     31 99 AA 99 
1bd54     23 9A 9D 9A 
1bd58     18 9B 94 9B 
1bd5c     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
1bd60     0F 9D 8F 9D 
1bd64     10 9E 92 9E 
1bd68     15 9F 98 9F 
1bd6c     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
1bd70     29 A1 B1 A1 
1bd74     39 A2 C2 A2 
1bd78     4D A3 D8 A3 
1bd7c     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
1bd80     7E A5 0D A6 
1bd84     9C A6 2D A7 
1bd88     BE A7 50 A8 
1bd8c     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
1bd90     0B AA A0 AA 
1bd94     37 AB CE AB 
1bd98     65 AC FE AC 
1bd9c     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
1bda0     CD AE 69 AF 
1bda4     05 B0 A3 B0 
1bda8     41 B1 E0 B1 
1bdac     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
1bdb0     C1 B3 63 B4 
1bdb4     05 B5 A8 B5 
1bdb8     4C B6 F1 B6 
1bdbc     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
1bdc0     E4 B8 8B B9 
1bdc4     33 BA DC BA 
1bdc8     86 BB 30 BC 
1bdcc     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
1bdd0     32 BE DF BE 
1bdd4     8D BF 3B C0 
1bdd8     E9 C0 98 C1 
1bddc     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
1bde0     AA C3 5B C4 
1bde4     0E C5 C0 C5 
1bde8     74 C6 27 C7 
1bdec     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
1bdf0     46 C9 FC C9 
1bdf4     B3 CA 6A CB 
1bdf8     21 CC DA CC 
1bdfc     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
1be00     05 CF BF CF 
1be04     79 D0 34 D1 
1be08     EF D1 AB D2 
1be0c     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
1be10     E1 D4 9F D5 
1be14     5D D6 1B D7 
1be18     DA D7 99 D8 
1be1c     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
1be20     D8 DA 99 DB 
1be24     5A DC 1B DD 
1be28     DD DD 9F DE 
1be2c     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
1be30     E6 E0 A9 E1 
1be34     6D E2 31 E3 
1be38     F5 E3 B9 E4 
1be3c     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
1be40     07 E7 CD E7 
1be44     92 E8 58 E9 
1be48     1E EA E4 EA 
1be4c     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
1be50     38 ED FF ED 
1be54     C6 EE 8E EF 
1be58     55 F0 1D F1 
1be5c     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
1be60     74 F3 3C F4 
1be64     05 F5 CD F5 
1be68     96 F6 5E F7 
1be6c     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
1be70     B8 F9 81 FA 
1be74     4A FB 13 FC 
1be78     DC FC A5 FD 
1be7c     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
1be80                 | 	alignl
1be80                 | __system__dat_
1be80     00 00 00 00 
1be84     00 00 00 00 | 	byte	$00[8]
1be88     03 00 00 00 
1be8c     00 00 00 00 
1be90     00 00 00 00 
1be94     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1be98     00 00 00 00 
1be9c     00 00 00 00 
1bea0     00 00 00 00 
1bea4     00 00 00 00 
1bea8     00 00 00 00 | 	byte	$00[20]
1beac     05 00 00 00 
1beb0     00 00 00 00 
1beb4     00 00 00 00 
1beb8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bebc     84 C0 01 00 | 	long	@@@__system__dat_ + 516
1bec0     8C C0 01 00 | 	long	@@@__system__dat_ + 524
1bec4     00 00 00 00 | 	byte	$00, $00, $00, $00
1bec8     94 C0 01 00 | 	long	@@@__system__dat_ + 532
1becc     9C C0 01 00 | 	long	@@@__system__dat_ + 540
1bed0     00 00 00 00 
1bed4     00 00 00 00 | 	byte	$00[8]
1bed8     01 00 00 00 
1bedc     06 00 00 00 
1bee0     00 00 00 00 
1bee4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bee8     00 00 00 00 | 	byte	$00, $00, $00, $00
1beec     A4 C0 01 00 | 	long	@@@__system__dat_ + 548
1bef0     AC C0 01 00 | 	long	@@@__system__dat_ + 556
1bef4     00 00 00 00 | 	byte	$00, $00, $00, $00
1bef8     B4 C0 01 00 | 	long	@@@__system__dat_ + 564
1befc     BC C0 01 00 | 	long	@@@__system__dat_ + 572
1bf00     00 00 00 00 
1bf04     00 00 00 00 | 	byte	$00[8]
1bf08     01 00 00 00 
1bf0c     06 00 00 00 
1bf10     00 00 00 00 
1bf14     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1bf18     00 00 00 00 | 	byte	$00, $00, $00, $00
1bf1c     C4 C0 01 00 | 	long	@@@__system__dat_ + 580
1bf20     CC C0 01 00 | 	long	@@@__system__dat_ + 588
1bf24     00 00 00 00 | 	byte	$00, $00, $00, $00
1bf28     D4 C0 01 00 | 	long	@@@__system__dat_ + 596
1bf2c     DC C0 01 00 | 	long	@@@__system__dat_ + 604
1bf30     00 00 00 00 
      ...             
1c080     00 00 00 00 
1c084     00 00 00 00 | 	byte	$00[344]
1c088     24 63 00 00 | 	long	@@@__system___tx
1c08c     00 00 00 00 | 	byte	$00, $00, $00, $00
1c090     6C 63 00 00 | 	long	@@@__system___rx
1c094     00 00 00 00 | 	byte	$00, $00, $00, $00
1c098     E8 7D 00 00 | 	long	@@@__system___rxtxioctl_0179
1c09c     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0a0     58 7E 00 00 | 	long	@@@__system____dummy_flush_0180
1c0a4     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0a8     24 63 00 00 | 	long	@@@__system___tx
1c0ac     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0b0     6C 63 00 00 | 	long	@@@__system___rx
1c0b4     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0b8     E8 7D 00 00 | 	long	@@@__system___rxtxioctl_0179
1c0bc     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0c0     58 7E 00 00 | 	long	@@@__system____dummy_flush_0180
1c0c4     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0c8     24 63 00 00 | 	long	@@@__system___tx
1c0cc     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0d0     6C 63 00 00 | 	long	@@@__system___rx
1c0d4     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0d8     E8 7D 00 00 | 	long	@@@__system___rxtxioctl_0179
1c0dc     00 00 00 00 | 	byte	$00, $00, $00, $00
1c0e0     58 7E 00 00 | 	long	@@@__system____dummy_flush_0180
1c0e4                 | __heap_base
1c0e4     00 00 00 00 
      ...             
1d0e4     00 00 00 00 
1d0e8     00 00 00 00 | 	long	0[1026]
1d0ec                 | objmem
1d0ec     00 00 00 00 
      ...             
1e28c     00 00 00 00 
1e290     00 00 00 00 | 	long	0[1130]
1e294                 | stackspace
1e294     00 00 00 00 | 	long	0[1]
1e298 10f             | 	org	COG_BSS_START
1e298 10f             | _var01
1e298 10f             | 	res	1
1e298 110             | _var02
1e298 110             | 	res	1
1e298 111             | _var03
1e298 111             | 	res	1
1e298 112             | _var04
1e298 112             | 	res	1
1e298 113             | _var05
1e298 113             | 	res	1
1e298 114             | _var06
1e298 114             | 	res	1
1e298 115             | _var07
1e298 115             | 	res	1
1e298 116             | _var08
1e298 116             | 	res	1
1e298 117             | _var09
1e298 117             | 	res	1
1e298 118             | _var10
1e298 118             | 	res	1
1e298 119             | _var11
1e298 119             | 	res	1
1e298 11a             | _var12
1e298 11a             | 	res	1
1e298 11b             | _var13
1e298 11b             | 	res	1
1e298 11c             | _var14
1e298 11c             | 	res	1
1e298 11d             | _var15
1e298 11d             | 	res	1
1e298 11e             | _var16
1e298 11e             | 	res	1
1e298 11f             | _var17
1e298 11f             | 	res	1
1e298 120             | _var18
1e298 120             | 	res	1
1e298 121             | _var19
1e298 121             | 	res	1
1e298 122             | _var20
1e298 122             | 	res	1
1e298 123             | _var21
1e298 123             | 	res	1
1e298 124             | _var22
1e298 124             | 	res	1
1e298 125             | _var23
1e298 125             | 	res	1
1e298 126             | _var24
1e298 126             | 	res	1
1e298 127             | _var25
1e298 127             | 	res	1
1e298 128             | _var26
1e298 128             | 	res	1
1e298 129             | _var27
1e298 129             | 	res	1
1e298 12a             | _var28
1e298 12a             | 	res	1
1e298 12b             | _var29
1e298 12b             | 	res	1
1e298 12c             | _var30
1e298 12c             | 	res	1
1e298 12d             | _var31
1e298 12d             | 	res	1
1e298 12e             | _var32
1e298 12e             | 	res	1
1e298 12f             | arg01
1e298 12f             | 	res	1
1e298 130             | arg02
1e298 130             | 	res	1
1e298 131             | arg03
1e298 131             | 	res	1
1e298 132             | arg04
1e298 132             | 	res	1
1e298 133             | arg05
1e298 133             | 	res	1
1e298 134             | arg06
1e298 134             | 	res	1
1e298 135             | arg07
1e298 135             | 	res	1
1e298 136             | local01
1e298 136             | 	res	1
1e298 137             | local02
1e298 137             | 	res	1
1e298 138             | local03
1e298 138             | 	res	1
1e298 139             | local04
1e298 139             | 	res	1
1e298 13a             | local05
1e298 13a             | 	res	1
1e298 13b             | local06
1e298 13b             | 	res	1
1e298 13c             | local07
1e298 13c             | 	res	1
1e298 13d             | local08
1e298 13d             | 	res	1
1e298 13e             | local09
1e298 13e             | 	res	1
1e298 13f             | local10
1e298 13f             | 	res	1
1e298 140             | local11
1e298 140             | 	res	1
1e298 141             | local12
1e298 141             | 	res	1
1e298 142             | local13
1e298 142             | 	res	1
1e298 143             | local14
1e298 143             | 	res	1
1e298 144             | local15
1e298 144             | 	res	1
1e298 145             | local16
1e298 145             | 	res	1
1e298 146             | local17
1e298 146             | 	res	1
1e298 147             | local18
1e298 147             | 	res	1
1e298 148             | local19
1e298 148             | 	res	1
1e298 149             | local20
1e298 149             | 	res	1
1e298 14a             | local21
1e298 14a             | 	res	1
1e298 14b             | local22
1e298 14b             | 	res	1
1e298 14c             | muldiva_
1e298 14c             | 	res	1
1e298 14d             | muldivb_
1e298 14d             | 	res	1
1e298 14e             | 	fit	480
1e298 14e             | 
