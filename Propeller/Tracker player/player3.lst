00000                 | 
00000                 | #line 1 "/home/pik33/Dokumenty/GitHub/P2-retromachine/Propeller/Tracker player/player3.p2asm"
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 18 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 0B F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 B0 14 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 5E 62 FD | 	cogid	arg01
00614 084 03 5E 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 FB 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 19 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 5F 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 61 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 63 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 65 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 18 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 62 56 F0 |         shr	arg03, #1 wc
00688 0a1 2F 61 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 5E 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 60 FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 62 56 F0 |         shr	arg03, #1 wc
00698 0a5 2F 61 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 5E 06 C1 |  if_c   add	arg01, #2
006a0 0a7 30 61 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 2F 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 62 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 31 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 60 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 6D 66 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F 6D 06 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 4D 99 12 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 9A 62 FD |        getqx   muldivb_
00718 0c5 19 98 62 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 4C 99 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 F8 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 4D 9B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 F8 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 F8 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd 4C 99 82 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 F8 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf 4D 9B 82 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | __pc long 0
00744 0d0 00 00 00 00 
00748 0d1             | __setjmp
00748 0d1 2B A0 61 FD |     pop __pc
0074c 0d2 00 18 06 F6 |     mov result1, #0
00750 0d3 00 1A 06 F6 |     mov result2, #0
00754 0d4 2F F3 01 F6 |     mov abortchain, arg01
00758 0d5 2F 5F 61 FC |     wrlong fp, arg01
0075c 0d6 04 5E 06 F1 |     add arg01, #4
00760 0d7 2F F1 63 FC |     wrlong ptra, arg01
00764 0d8 04 5E 06 F1 |     add arg01, #4
00768 0d9 2F FB 61 FC |     wrlong objptr, arg01
0076c 0da 04 5E 06 F1 |     add arg01, #4
00770 0db 2F A1 61 FC |     wrlong __pc, arg01
00774 0dc 2C A0 61 FD |     jmp __pc
00778 0dd             | __unwind_pc long 0
00778 0dd 00 00 00 00 
0077c 0de             | __unwind_stack
0077c 0de 2B BA 61 FD |    pop  __unwind_pc
00780 0df             | __unwind_loop
00780 0df 30 5F 0A F2 |    cmp  arg01, arg02 wz
00784 0e0 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00788 0e1 2F F1 03 F6 |    mov   ptra, arg01
0078c 0e2 5C FF BF FD |    call  #popregs_
00790 0e3 AF 5E 02 F6 |    mov   arg01, fp
00794 0e4 E8 FF 9F FD |    jmp   #__unwind_loop
00798 0e5             | __unwind_stack_ret
00798 0e5 2C BA 61 FD |    jmp  __unwind_pc
0079c 0e6             | __longjmp
0079c 0e6 2B A0 61 FD |     pop __pc
007a0 0e7 00 5E 0E F2 |     cmp    arg01, #0 wz
007a4 0e8 30 00 90 AD |  if_z jmp #nocatch
007a8 0e9 30 19 02 F6 |     mov result1, arg02
007ac 0ea 01 1A 06 F6 |     mov result2, #1
007b0 0eb 2F 61 02 FB |     rdlong arg02, arg01
007b4 0ec 04 5E 06 F1 |     add arg01, #4
007b8 0ed 2F F1 03 FB |     rdlong ptra, arg01
007bc 0ee 04 5E 06 F1 |     add arg01, #4
007c0 0ef 2F FB 01 FB |     rdlong objptr, arg01
007c4 0f0 04 5E 06 F1 |     add arg01, #4
007c8 0f1 2F A1 01 FB |     rdlong __pc, arg01
007cc 0f2 AF 5E 02 F6 |     mov arg01, fp
007d0 0f3 A8 FF BF FD |     call #__unwind_stack
007d4 0f4             | __longjmp_ret
007d4 0f4 2C A0 61 FD |     jmp  __pc
007d8 0f5             | nocatch
007d8 0f5 00 62 0E F2 |     cmp arg03, #0 wz
007dc 0f6 28 FE 9F AD |  if_z jmp #cogexit
007e0 0f7 F0 FF 9F FD |     jmp #__longjmp_ret
007e4 0f8             | 
007e4 0f8             | __heap_ptr
007e4 0f8 68 30 02 00 | 	long	@__heap_base
007e8 0f9             | abortchain
007e8 0f9 00 00 00 00 | 	long	0
007ec 0fa             | entryptr__
007ec 0fa 04 04 00 00 | 	long	@entry
007f0 0fb             | itmp1_
007f0 0fb 00 00 00 00 | 	long	0
007f4 0fc             | itmp2_
007f4 0fc 00 00 00 00 | 	long	0
007f8 0fd             | objptr
007f8 0fd 70 40 02 00 | 	long	@objmem
007fc 0fe             | ptr___struct___bas_wrap_sender_tx_
007fc 0fe DC 90 00 00 | 	long	@__struct___bas_wrap_sender_tx
00800 0ff             | ptr___struct__s_vfs_file_t_putchar_
00800 0ff 24 90 00 00 | 	long	@__struct__s_vfs_file_t_putchar
00804 100             | ptr___system__dat__
00804 100 04 2E 02 00 | 	long	@__system__dat_
00808 101             | ptr__audio019_spin2_dat__
00808 101 F4 22 02 00 | 	long	@_audio019_spin2_dat_
0080c 102             | ptr__dat__
0080c 102 08 92 00 00 | 	long	@_dat_
00810 103             | ptr__hng033rm_spin2_dat__
00810 103 F8 E8 01 00 | 	long	@_hng033rm_spin2_dat_
00814 104             | ptr__hng033rm_spin2_putchar_
00814 104 04 30 00 00 | 	long	@_hng033rm_spin2_putchar
00818 105             | ptr__hng033rm_spin2_putpixel1_
00818 105 EC 29 00 00 | 	long	@_hng033rm_spin2_putpixel1
0081c 106             | ptr__hng033rm_spin2_putpixel2_
0081c 106 D8 2A 00 00 | 	long	@_hng033rm_spin2_putpixel2
00820 107             | ptr__hng033rm_spin2_putpixel4_
00820 107 B8 2B 00 00 | 	long	@_hng033rm_spin2_putpixel4
00824 108             | ptr__hng033rm_spin2_putpixel8_
00824 108 A4 2C 00 00 | 	long	@_hng033rm_spin2_putpixel8
00828 109             | ptr__retrocog_spin2_serialcog_
00828 109 80 41 00 00 | 	long	@_retrocog_spin2_serialcog
0082c 10a             | ptr__trackerplayer_spin2_dat__
0082c 10a D0 11 02 00 | 	long	@_trackerplayer_spin2_dat_
00830 10b             | ptr_stackspace_
00830 10b 84 53 02 00 | 	long	@stackspace
00834 10c             | result1
00834 10c 00 00 00 00 | 	long	0
00838 10d             | result2
00838 10d 00 00 00 00 | 	long	0
0083c 10e             | result3
0083c 10e 00 00 00 00 | 	long	0
00840 10f             | COG_BSS_START
00840 10f             | 	fit	480
00840                 | 	orgh
00840                 | hubentry
00840                 | 
00840                 | ' 
00840                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
00840                 | _startvideo
00840     44 37 B0 FD | 	call	#_hng033rm_spin2_start
00844     00 5E 06 F6 | 	mov	arg01, #0
00848     00 60 06 F6 | 	mov	arg02, #0
0084c     00 62 06 F6 | 	mov	arg03, #0
00850     48 25 B0 FD | 	call	#_hng033rm_spin2_setbordercolor
00854                 | ' v030.start(mode,pin)
00854                 | ' v030.setbordercolor(0,0,0)
00854                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00854     FD 5E 02 F6 | 	mov	arg01, objptr
00858     04 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putchar_
0085c     F0 65 B0 FD | 	call	#__system___make_methodptr
00860     00 1C 06 F6 | 	mov	result3, #0
00864     00 1A 06 F6 | 	mov	result2, #0
00868     0C 61 02 F6 | 	mov	arg02, result1
0086c     00 62 06 F6 | 	mov	arg03, #0
00870     00 64 06 F6 | 	mov	arg04, #0
00874     00 5E 06 F6 | 	mov	arg01, #0
00878     B0 68 B0 FD | 	call	#__system___basic_open
0087c     00 18 06 F6 | 	mov	result1, #0
00880                 | _startvideo_ret
00880     2D 00 64 FD | 	ret
00884                 | 
00884                 | ' 
00884                 | ' function addr(byref v as any)
00884                 | _addr
00884     00 5A 05 F6 | 	mov	COUNT_, #0
00888     B0 00 A0 FD | 	call	#pushregs_
0088c     08 F0 07 F1 | 	add	ptra, #8
00890     04 5E 05 F1 | 	add	fp, #4
00894     AF 5E 62 FC | 	wrlong	arg01, fp
00898                 | ' 
00898                 | ' return(cast(ulong,@v))
00898     2F 19 02 F6 | 	mov	result1, arg01
0089c     04 5E 85 F1 | 	sub	fp, #4
008a0     AF F0 03 F6 | 	mov	ptra, fp
008a4     BA 00 A0 FD | 	call	#popregs_
008a8                 | _addr_ret
008a8     2D 00 64 FD | 	ret
008ac                 | 
008ac                 | ' 
008ac                 | ' '0 - samplestart   - a pointer to the sample start
008ac                 | ' '1 - sampletype    - 0: 16 bit, 1 8 bit, both signed
008ac                 | ' '2 - loopstart     - loop start
008ac                 | ' '3 - loopend       - loop end, has to be >=loopstart+2
008ac                 | ' '4 - volume        - sample volume, 16384=1
008ac                 | ' '5 - pan           - 0..16384
008ac                 | ' '6 - synthfreq     - the frequency divider for the channel. The channel sample rate will be 3546895 or 3579545 Hz divided by this
008ac                 | ' '7 - skip          - value to add to the phase accumulator for the next sample, 1 for 8 bit, 2 for 16 bit, more for special purposes
008ac                 | ' '8 - cmd 
008ac                 | ' 
008ac                 | ' 
008ac                 | ' sub test 
008ac                 | _test
008ac     01 5A 05 F6 | 	mov	COUNT_, #1
008b0     B0 00 A0 FD | 	call	#pushregs_
008b4     16 60 06 F6 | 	mov	arg02, #22
008b8                 | ' 
008b8                 | ' ''---------- Set the (x,y) position of cursor
008b8                 | ' 
008b8                 | ' cursor_x:=x
008b8     34 FA 05 F1 | 	add	objptr, #52
008bc     FD 0A 48 FC | 	wrbyte	#5, objptr
008c0                 | ' cursor_y:=y
008c0     01 FA 05 F1 | 	add	objptr, #1
008c4     FD 2C 48 FC | 	wrbyte	#22, objptr
008c8     07 00 00 FF 
008cc     AE FB 05 F1 | 	add	objptr, ##4014
008d0     FD 6C C2 FA | 	rdbyte	local01, objptr
008d4     02 6C 66 F0 | 	shl	local01, #2
008d8     01 00 00 FF 
008dc     65 FA 05 F1 | 	add	objptr, ##613
008e0     FD 6C 02 F1 | 	add	local01, objptr
008e4     36 5F 02 FB | 	rdlong	arg01, local01
008e8     09 00 00 FF 
008ec     48 FA 85 F1 | 	sub	objptr, ##4680
008f0     9C 28 B0 FD | 	call	#_hng033rm_spin2_write
008f4     09 00 00 FF 
008f8     D4 FA 05 F1 | 	add	objptr, ##4820
008fc     FD 5E 02 FB | 	rdlong	arg01, objptr
00900     09 00 00 FF 
00904     D4 FA 85 F1 | 	sub	objptr, ##4820
00908     84 28 B0 FD | 	call	#_hng033rm_spin2_write
0090c                 | ' 
0090c                 | ' ''---------- Set the (x,y) position of cursor
0090c                 | ' 
0090c                 | ' cursor_x:=x
0090c     34 FA 05 F1 | 	add	objptr, #52
00910     FD 02 48 FC | 	wrbyte	#1, objptr
00914                 | ' cursor_y:=y
00914     01 FA 05 F1 | 	add	objptr, #1
00918     FD 2C 48 FC | 	wrbyte	#22, objptr
0091c     07 00 00 FF 
00920     D6 FB 05 F1 | 	add	objptr, ##4054
00924     FD 5E 02 FB | 	rdlong	arg01, objptr
00928     10 FA 05 F1 | 	add	objptr, #16
0092c     FD 6C 02 FB | 	rdlong	local01, objptr
00930     08 00 00 FF 
00934     1B FA 85 F1 | 	sub	objptr, ##4123
00938     36 5F 02 F1 | 	add	arg01, local01
0093c     03 60 06 F6 | 	mov	arg02, #3
00940     74 2B B0 FD | 	call	#_hng033rm_spin2_inttostr2
00944     0C 5F 02 F6 | 	mov	arg01, result1
00948     44 28 B0 FD | 	call	#_hng033rm_spin2_write
0094c     16 60 06 F6 | 	mov	arg02, #22
00950                 | ' 
00950                 | ' ''---------- Set the (x,y) position of cursor
00950                 | ' 
00950                 | ' cursor_x:=x
00950     34 FA 05 F1 | 	add	objptr, #52
00954     FD 40 48 FC | 	wrbyte	#32, objptr
00958                 | ' cursor_y:=y
00958     01 FA 05 F1 | 	add	objptr, #1
0095c     FD 2C 48 FC | 	wrbyte	#22, objptr
00960     07 00 00 FF 
00964     AF FB 05 F1 | 	add	objptr, ##4015
00968     FD 6C C2 FA | 	rdbyte	local01, objptr
0096c     02 6C 66 F0 | 	shl	local01, #2
00970     01 00 00 FF 
00974     64 FA 05 F1 | 	add	objptr, ##612
00978     FD 6C 02 F1 | 	add	local01, objptr
0097c     36 5F 02 FB | 	rdlong	arg01, local01
00980     09 00 00 FF 
00984     48 FA 85 F1 | 	sub	objptr, ##4680
00988     04 28 B0 FD | 	call	#_hng033rm_spin2_write
0098c     09 00 00 FF 
00990     D4 FA 05 F1 | 	add	objptr, ##4820
00994     FD 5E 02 FB | 	rdlong	arg01, objptr
00998     09 00 00 FF 
0099c     D4 FA 85 F1 | 	sub	objptr, ##4820
009a0     EC 27 B0 FD | 	call	#_hng033rm_spin2_write
009a4                 | ' 
009a4                 | ' ''---------- Set the (x,y) position of cursor
009a4                 | ' 
009a4                 | ' cursor_x:=x
009a4     34 FA 05 F1 | 	add	objptr, #52
009a8     FD 38 48 FC | 	wrbyte	#28, objptr
009ac                 | ' cursor_y:=y
009ac     01 FA 05 F1 | 	add	objptr, #1
009b0     FD 2C 48 FC | 	wrbyte	#22, objptr
009b4     07 00 00 FF 
009b8     DA FB 05 F1 | 	add	objptr, ##4058
009bc     FD 5E 02 FB | 	rdlong	arg01, objptr
009c0     10 FA 05 F1 | 	add	objptr, #16
009c4     FD 6C 02 FB | 	rdlong	local01, objptr
009c8     08 00 00 FF 
009cc     1F FA 85 F1 | 	sub	objptr, ##4127
009d0     36 5F 02 F1 | 	add	arg01, local01
009d4     03 60 06 F6 | 	mov	arg02, #3
009d8     DC 2A B0 FD | 	call	#_hng033rm_spin2_inttostr2
009dc     0C 5F 02 F6 | 	mov	arg01, result1
009e0     AC 27 B0 FD | 	call	#_hng033rm_spin2_write
009e4     16 60 06 F6 | 	mov	arg02, #22
009e8                 | ' 
009e8                 | ' ''---------- Set the (x,y) position of cursor
009e8                 | ' 
009e8                 | ' cursor_x:=x
009e8     34 FA 05 F1 | 	add	objptr, #52
009ec     FD 78 48 FC | 	wrbyte	#60, objptr
009f0                 | ' cursor_y:=y
009f0     01 FA 05 F1 | 	add	objptr, #1
009f4     FD 2C 48 FC | 	wrbyte	#22, objptr
009f8     07 00 00 FF 
009fc     B0 FB 05 F1 | 	add	objptr, ##4016
00a00     FD 6C C2 FA | 	rdbyte	local01, objptr
00a04     02 6C 66 F0 | 	shl	local01, #2
00a08     01 00 00 FF 
00a0c     63 FA 05 F1 | 	add	objptr, ##611
00a10     FD 6C 02 F1 | 	add	local01, objptr
00a14     36 5F 02 FB | 	rdlong	arg01, local01
00a18     09 00 00 FF 
00a1c     48 FA 85 F1 | 	sub	objptr, ##4680
00a20     6C 27 B0 FD | 	call	#_hng033rm_spin2_write
00a24     09 00 00 FF 
00a28     D4 FA 05 F1 | 	add	objptr, ##4820
00a2c     FD 5E 02 FB | 	rdlong	arg01, objptr
00a30     09 00 00 FF 
00a34     D4 FA 85 F1 | 	sub	objptr, ##4820
00a38     54 27 B0 FD | 	call	#_hng033rm_spin2_write
00a3c                 | ' 
00a3c                 | ' ''---------- Set the (x,y) position of cursor
00a3c                 | ' 
00a3c                 | ' cursor_x:=x
00a3c     34 FA 05 F1 | 	add	objptr, #52
00a40     FD 70 48 FC | 	wrbyte	#56, objptr
00a44                 | ' cursor_y:=y
00a44     01 FA 05 F1 | 	add	objptr, #1
00a48     FD 2C 48 FC | 	wrbyte	#22, objptr
00a4c     07 00 00 FF 
00a50     DE FB 05 F1 | 	add	objptr, ##4062
00a54     FD 5E 02 FB | 	rdlong	arg01, objptr
00a58     10 FA 05 F1 | 	add	objptr, #16
00a5c     FD 6C 02 FB | 	rdlong	local01, objptr
00a60     08 00 00 FF 
00a64     23 FA 85 F1 | 	sub	objptr, ##4131
00a68     36 5F 02 F1 | 	add	arg01, local01
00a6c     03 60 06 F6 | 	mov	arg02, #3
00a70     44 2A B0 FD | 	call	#_hng033rm_spin2_inttostr2
00a74     0C 5F 02 F6 | 	mov	arg01, result1
00a78     14 27 B0 FD | 	call	#_hng033rm_spin2_write
00a7c                 | ' 
00a7c                 | ' ''---------- Set the (x,y) position of cursor
00a7c                 | ' 
00a7c                 | ' cursor_x:=x
00a7c     34 FA 05 F1 | 	add	objptr, #52
00a80     FD A8 48 FC | 	wrbyte	#84, objptr
00a84                 | ' cursor_y:=y
00a84     01 FA 05 F1 | 	add	objptr, #1
00a88     FD 2C 48 FC | 	wrbyte	#22, objptr
00a8c     07 00 00 FF 
00a90     E2 FB 05 F1 | 	add	objptr, ##4066
00a94     FD 5E 02 FB | 	rdlong	arg01, objptr
00a98     10 FA 05 F1 | 	add	objptr, #16
00a9c     FD 6C 02 FB | 	rdlong	local01, objptr
00aa0     08 00 00 FF 
00aa4     27 FA 85 F1 | 	sub	objptr, ##4135
00aa8     36 5F 02 F1 | 	add	arg01, local01
00aac     03 60 06 F6 | 	mov	arg02, #3
00ab0     04 2A B0 FD | 	call	#_hng033rm_spin2_inttostr2
00ab4     0C 5F 02 F6 | 	mov	arg01, result1
00ab8     D4 26 B0 FD | 	call	#_hng033rm_spin2_write
00abc     16 60 06 F6 | 	mov	arg02, #22
00ac0                 | ' 
00ac0                 | ' ''---------- Set the (x,y) position of cursor
00ac0                 | ' 
00ac0                 | ' cursor_x:=x
00ac0     34 FA 05 F1 | 	add	objptr, #52
00ac4     FD B0 48 FC | 	wrbyte	#88, objptr
00ac8                 | ' cursor_y:=y
00ac8     01 FA 05 F1 | 	add	objptr, #1
00acc     FD 2C 48 FC | 	wrbyte	#22, objptr
00ad0     07 00 00 FF 
00ad4     B1 FB 05 F1 | 	add	objptr, ##4017
00ad8     FD 6C C2 FA | 	rdbyte	local01, objptr
00adc     02 6C 66 F0 | 	shl	local01, #2
00ae0     01 00 00 FF 
00ae4     62 FA 05 F1 | 	add	objptr, ##610
00ae8     FD 6C 02 F1 | 	add	local01, objptr
00aec     36 5F 02 FB | 	rdlong	arg01, local01
00af0     09 00 00 FF 
00af4     48 FA 85 F1 | 	sub	objptr, ##4680
00af8     94 26 B0 FD | 	call	#_hng033rm_spin2_write
00afc     09 00 00 FF 
00b00     D4 FA 05 F1 | 	add	objptr, ##4820
00b04     FD 5E 02 FB | 	rdlong	arg01, objptr
00b08     09 00 00 FF 
00b0c     D4 FA 85 F1 | 	sub	objptr, ##4820
00b10     7C 26 B0 FD | 	call	#_hng033rm_spin2_write
00b14     AF F0 03 F6 | 	mov	ptra, fp
00b18     BA 00 A0 FD | 	call	#popregs_
00b1c                 | _test_ret
00b1c     2D 00 64 FD | 	ret
00b20                 | 
00b20                 | ' 
00b20                 | ' 
00b20                 | ' sub getinfo(ma,num)
00b20                 | _getinfo
00b20     0B 5A 05 F6 | 	mov	COUNT_, #11
00b24     B0 00 A0 FD | 	call	#pushregs_
00b28     2F 6D 02 F6 | 	mov	local01, arg01
00b2c     30 6F 02 F6 | 	mov	local02, arg02
00b30     04 60 06 F6 | 	mov	arg02, #4
00b34                 | ' 
00b34                 | ' ''---------- Set the (x,y) position of cursor
00b34                 | ' 
00b34                 | ' cursor_x:=x
00b34     34 FA 05 F1 | 	add	objptr, #52
00b38     FD 02 48 FC | 	wrbyte	#1, objptr
00b3c                 | ' cursor_y:=y
00b3c     01 FA 05 F1 | 	add	objptr, #1
00b40     FD 08 48 FC | 	wrbyte	#4, objptr
00b44     35 FA 85 F1 | 	sub	objptr, #53
00b48                 | ' 'v030. setwritecolors(170,147):
00b48                 | ' position 1,4: print "Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
00b48     00 5E 06 F6 | 	mov	arg01, #0
00b4c     A0 7A B0 FD | 	call	#__system___getiolock_0150
00b50     0C 5F 02 F6 | 	mov	arg01, result1
00b54     38 63 B0 FD | 	call	#__system___lockmem
00b58     00 18 06 F6 | 	mov	result1, #0
00b5c     48 00 00 FF 
00b60     6A 61 06 F6 | 	mov	arg02, ##@LR__0504
00b64     00 5E 06 F6 | 	mov	arg01, #0
00b68     00 62 06 F6 | 	mov	arg03, #0
00b6c     DC 66 B0 FD | 	call	#__system___basic_print_string
00b70     00 5E 06 F6 | 	mov	arg01, #0
00b74     0A 60 06 F6 | 	mov	arg02, #10
00b78     00 62 06 F6 | 	mov	arg03, #0
00b7c     80 66 B0 FD | 	call	#__system___basic_print_char
00b80     01 18 06 F6 | 	mov	result1, #1
00b84     00 5E 06 F6 | 	mov	arg01, #0
00b88     64 7A B0 FD | 	call	#__system___getiolock_0150
00b8c     0C 01 68 FC | 	wrlong	#0, result1
00b90     00 18 06 F6 | 	mov	result1, #0
00b94                 | ' ': v030. setwritecolors(154,147)
00b94                 | ' for i=0 to 31: sn$(i)="S"+decuns$(i,2)+space$(19) :next i
00b94     00 70 06 F6 | 	mov	local03, #0
00b98                 | LR__0001
00b98     38 73 02 F6 | 	mov	local04, local03
00b9c     02 72 66 F0 | 	shl	local04, #2
00ba0     09 00 00 FF 
00ba4     48 FA 05 F1 | 	add	objptr, ##4680
00ba8     FD 72 02 F1 | 	add	local04, objptr
00bac     48 00 00 FF 
00bb0     D3 75 06 F6 | 	mov	local05, ##@LR__0505
00bb4     38 5F 02 F6 | 	mov	arg01, local03
00bb8     02 60 06 F6 | 	mov	arg02, #2
00bbc     09 00 00 FF 
00bc0     48 FA 85 F1 | 	sub	objptr, ##4680
00bc4     0A 62 06 F6 | 	mov	arg03, #10
00bc8     CC 6B B0 FD | 	call	#__system__Number_S
00bcc     0C 61 02 F6 | 	mov	arg02, result1
00bd0     3A 5F 02 F6 | 	mov	arg01, local05
00bd4     F4 62 B0 FD | 	call	#__system___string_concat
00bd8     0C 75 02 F6 | 	mov	local05, result1
00bdc     13 5E 06 F6 | 	mov	arg01, #19
00be0     48 00 00 FF 
00be4     14 61 06 F6 | 	mov	arg02, ##@LR__0498
00be8     78 6C B0 FD | 	call	#__system__String_S
00bec     0C 61 02 F6 | 	mov	arg02, result1
00bf0     3A 5F 02 F6 | 	mov	arg01, local05
00bf4     D4 62 B0 FD | 	call	#__system___string_concat
00bf8     39 19 62 FC | 	wrlong	result1, local04
00bfc     01 70 06 F1 | 	add	local03, #1
00c00     20 70 5E F2 | 	cmps	local03, #32 wcz
00c04     90 FF 9F CD |  if_b	jmp	#LR__0001
00c08                 | ' for i=1 to num
00c08     01 70 06 F6 | 	mov	local03, #1
00c0c     01 6E 06 F1 | 	add	local02, #1
00c10                 | LR__0002
00c10     37 71 5A F2 | 	cmps	local03, local02 wcz
00c14     54 08 90 3D |  if_ae	jmp	#LR__0007
00c18                 | '   for j=0 to 21
00c18     00 76 06 F6 | 	mov	local06, #0
00c1c                 | LR__0003
00c1c     38 5F 02 F6 | 	mov	arg01, local03
00c20     02 5E 66 F0 | 	shl	arg01, #2
00c24     09 00 00 FF 
00c28     48 FA 05 F1 | 	add	objptr, ##4680
00c2c     FD 5E 02 F1 | 	add	arg01, objptr
00c30     09 00 00 FF 
00c34     48 FA 85 F1 | 	sub	objptr, ##4680
00c38     48 FC BF FD | 	call	#_addr
00c3c                 | ' asm
00c3c     0C 79 02 FB | 	rdlong	local07, result1
00c40                 | ' return r
00c40     09 00 00 FF 
00c44     F8 FA 05 F1 | 	add	objptr, ##4856
00c48     FD 78 62 FC | 	wrlong	local07, objptr
00c4c     36 5F 02 F6 | 	mov	arg01, local01
00c50     14 5E 06 F1 | 	add	arg01, #20
00c54     38 75 02 F6 | 	mov	local05, local03
00c58     01 74 86 F1 | 	sub	local05, #1
00c5c     3A 7B 02 F6 | 	mov	local08, local05
00c60     04 7A 66 F0 | 	shl	local08, #4
00c64     3A 7B 82 F1 | 	sub	local08, local05
00c68     01 7A 66 F0 | 	shl	local08, #1
00c6c     3D 5F 02 F1 | 	add	arg01, local08
00c70     3B 5F 02 F1 | 	add	arg01, local06
00c74                 | ' asm
00c74     2F 19 C2 FA | 	rdbyte	result1, arg01
00c78                 | ' return r
00c78     0C 79 02 F6 | 	mov	local07, result1
00c7c     07 78 46 F7 | 	zerox	local07, #7
00c80     04 FA 05 F1 | 	add	objptr, #4
00c84     FD 78 62 FC | 	wrlong	local07, objptr
00c88                 | '     a=lpeek(addr(sn$(i)))
00c88                 | '     b=(peek(ma+20+30*(i-1)+j))
00c88                 | '     if b>=32 then poke a+j,b
00c88     09 00 00 FF 
00c8c     FC FA 85 F1 | 	sub	objptr, ##4860
00c90     20 78 5E F2 | 	cmps	local07, #32 wcz
00c94     24 00 90 CD |  if_b	jmp	#LR__0004
00c98     09 00 00 FF 
00c9c     F8 FA 05 F1 | 	add	objptr, ##4856
00ca0     FD 5E 02 FB | 	rdlong	arg01, objptr
00ca4     3B 5F 02 F1 | 	add	arg01, local06
00ca8     04 FA 05 F1 | 	add	objptr, #4
00cac     FD 60 02 FB | 	rdlong	arg02, objptr
00cb0     09 00 00 FF 
00cb4     FC FA 85 F1 | 	sub	objptr, ##4860
00cb8                 | ' asm
00cb8     2F 61 42 FC | 	wrbyte	arg02, arg01
00cbc                 | LR__0004
00cbc     01 76 06 F1 | 	add	local06, #1
00cc0     16 76 5E F2 | 	cmps	local06, #22 wcz
00cc4     54 FF 9F CD |  if_b	jmp	#LR__0003
00cc8     36 5F 02 F6 | 	mov	arg01, local01
00ccc     14 5E 06 F1 | 	add	arg01, #20
00cd0     38 7B 02 F6 | 	mov	local08, local03
00cd4     01 7A 86 F1 | 	sub	local08, #1
00cd8     3D 7D 02 F6 | 	mov	local09, local08
00cdc     04 7C 66 F0 | 	shl	local09, #4
00ce0     3D 7D 82 F1 | 	sub	local09, local08
00ce4     01 7C 66 F0 | 	shl	local09, #1
00ce8     3E 5F 02 F1 | 	add	arg01, local09
00cec     16 5E 06 F1 | 	add	arg01, #22
00cf0                 | ' asm
00cf0     2F 75 C2 FA | 	rdbyte	local05, arg01
00cf4                 | ' return r
00cf4     07 74 46 F7 | 	zerox	local05, #7
00cf8     08 74 66 F0 | 	shl	local05, #8
00cfc     36 5F 02 F6 | 	mov	arg01, local01
00d00     14 5E 06 F1 | 	add	arg01, #20
00d04     38 7F 02 F6 | 	mov	local10, local03
00d08     01 7E 86 F1 | 	sub	local10, #1
00d0c     3F 81 02 F6 | 	mov	local11, local10
00d10     04 80 66 F0 | 	shl	local11, #4
00d14     3F 81 82 F1 | 	sub	local11, local10
00d18     01 80 66 F0 | 	shl	local11, #1
00d1c     40 5F 02 F1 | 	add	arg01, local11
00d20     17 5E 06 F1 | 	add	arg01, #23
00d24                 | ' asm
00d24     2F 7B C2 FA | 	rdbyte	local08, arg01
00d28                 | ' return r
00d28     07 7A 46 F7 | 	zerox	local08, #7
00d2c     3D 75 02 F1 | 	add	local05, local08
00d30     01 74 66 F0 | 	shl	local05, #1
00d34     09 00 00 FF 
00d38     00 FB 05 F1 | 	add	objptr, ##4864
00d3c     FD 74 62 FC | 	wrlong	local05, objptr
00d40     36 5F 02 F6 | 	mov	arg01, local01
00d44     14 5E 06 F1 | 	add	arg01, #20
00d48     38 7B 02 F6 | 	mov	local08, local03
00d4c     01 7A 86 F1 | 	sub	local08, #1
00d50     3D 7D 02 F6 | 	mov	local09, local08
00d54     04 7C 66 F0 | 	shl	local09, #4
00d58     3D 7D 82 F1 | 	sub	local09, local08
00d5c     01 7C 66 F0 | 	shl	local09, #1
00d60     3E 5F 02 F1 | 	add	arg01, local09
00d64     1A 5E 06 F1 | 	add	arg01, #26
00d68                 | ' asm
00d68     2F 75 C2 FA | 	rdbyte	local05, arg01
00d6c                 | ' return r
00d6c     07 74 46 F7 | 	zerox	local05, #7
00d70     08 74 66 F0 | 	shl	local05, #8
00d74     36 5F 02 F6 | 	mov	arg01, local01
00d78     14 5E 06 F1 | 	add	arg01, #20
00d7c     38 7F 02 F6 | 	mov	local10, local03
00d80     01 7E 86 F1 | 	sub	local10, #1
00d84     3F 81 02 F6 | 	mov	local11, local10
00d88     04 80 66 F0 | 	shl	local11, #4
00d8c     3F 81 82 F1 | 	sub	local11, local10
00d90     01 80 66 F0 | 	shl	local11, #1
00d94     40 5F 02 F1 | 	add	arg01, local11
00d98     1B 5E 06 F1 | 	add	arg01, #27
00d9c                 | ' asm
00d9c     2F 7B C2 FA | 	rdbyte	local08, arg01
00da0                 | ' return r
00da0     07 7A 46 F7 | 	zerox	local08, #7
00da4     3D 75 02 F1 | 	add	local05, local08
00da8     01 74 66 F0 | 	shl	local05, #1
00dac     04 FA 05 F1 | 	add	objptr, #4
00db0     FD 74 62 FC | 	wrlong	local05, objptr
00db4     36 5F 02 F6 | 	mov	arg01, local01
00db8     14 5E 06 F1 | 	add	arg01, #20
00dbc     38 7B 02 F6 | 	mov	local08, local03
00dc0     01 7A 86 F1 | 	sub	local08, #1
00dc4     3D 7D 02 F6 | 	mov	local09, local08
00dc8     04 7C 66 F0 | 	shl	local09, #4
00dcc     3D 7D 82 F1 | 	sub	local09, local08
00dd0     01 7C 66 F0 | 	shl	local09, #1
00dd4     3E 5F 02 F1 | 	add	arg01, local09
00dd8     1C 5E 06 F1 | 	add	arg01, #28
00ddc                 | ' asm
00ddc     2F 75 C2 FA | 	rdbyte	local05, arg01
00de0                 | ' return r
00de0     07 74 46 F7 | 	zerox	local05, #7
00de4     08 74 66 F0 | 	shl	local05, #8
00de8     36 5F 02 F6 | 	mov	arg01, local01
00dec     14 5E 06 F1 | 	add	arg01, #20
00df0     38 7F 02 F6 | 	mov	local10, local03
00df4     01 7E 86 F1 | 	sub	local10, #1
00df8     3F 81 02 F6 | 	mov	local11, local10
00dfc     04 80 66 F0 | 	shl	local11, #4
00e00     3F 81 82 F1 | 	sub	local11, local10
00e04     01 80 66 F0 | 	shl	local11, #1
00e08     40 5F 02 F1 | 	add	arg01, local11
00e0c     1D 5E 06 F1 | 	add	arg01, #29
00e10                 | ' asm
00e10     2F 7B C2 FA | 	rdbyte	local08, arg01
00e14                 | ' return r
00e14     07 7A 46 F7 | 	zerox	local08, #7
00e18     3D 75 02 F1 | 	add	local05, local08
00e1c     01 74 66 F0 | 	shl	local05, #1
00e20     04 FA 05 F1 | 	add	objptr, #4
00e24     FD 74 62 FC | 	wrlong	local05, objptr
00e28     36 5F 02 F6 | 	mov	arg01, local01
00e2c     14 5E 06 F1 | 	add	arg01, #20
00e30     38 75 02 F6 | 	mov	local05, local03
00e34     01 74 86 F1 | 	sub	local05, #1
00e38     3A 7B 02 F6 | 	mov	local08, local05
00e3c     04 7A 66 F0 | 	shl	local08, #4
00e40     3A 7B 82 F1 | 	sub	local08, local05
00e44     01 7A 66 F0 | 	shl	local08, #1
00e48     3D 5F 02 F1 | 	add	arg01, local08
00e4c     18 5E 06 F1 | 	add	arg01, #24
00e50                 | ' asm
00e50     2F 79 C2 FA | 	rdbyte	local07, arg01
00e54                 | ' return r
00e54     07 78 46 F7 | 	zerox	local07, #7
00e58     04 FA 05 F1 | 	add	objptr, #4
00e5c     FD 78 62 FC | 	wrlong	local07, objptr
00e60     36 5F 02 F6 | 	mov	arg01, local01
00e64     14 5E 06 F1 | 	add	arg01, #20
00e68     38 75 02 F6 | 	mov	local05, local03
00e6c     01 74 86 F1 | 	sub	local05, #1
00e70     3A 7B 02 F6 | 	mov	local08, local05
00e74     04 7A 66 F0 | 	shl	local08, #4
00e78     3A 7B 82 F1 | 	sub	local08, local05
00e7c     01 7A 66 F0 | 	shl	local08, #1
00e80     3D 5F 02 F1 | 	add	arg01, local08
00e84     19 5E 06 F1 | 	add	arg01, #25
00e88                 | ' asm
00e88     2F 19 C2 FA | 	rdbyte	result1, arg01
00e8c                 | ' return r
00e8c     0C 79 02 F6 | 	mov	local07, result1
00e90     07 78 46 F7 | 	zerox	local07, #7
00e94     04 FA 05 F1 | 	add	objptr, #4
00e98     FD 78 62 FC | 	wrlong	local07, objptr
00e9c     09 00 00 FF 
00ea0     10 FB 85 F1 | 	sub	objptr, ##4880
00ea4                 | ' sl=2*(256*peek(ma+20+30*(i-1)+22)+ peek(ma+20+30*(i-1)+23))  
00ea4                 | ' rp=2*(256*peek(ma+20+30*(i-1)+26)+ peek(ma+20+30*(i-1)+27))  
00ea4                 | ' rl=2*(256*peek(ma+20+30*(i-1)+28)+ peek(ma+20+30*(i-1)+29))  
00ea4                 | ' ft=peek(ma+20+30*(i-1)+24)
00ea4                 | ' vl=peek(ma+20+30*(i-1)+25)
00ea4                 | ' if i<16 then position 1,5+i :print sn$(i) : position 24,5+i : print sl :position 31,5+i : print ft :position 34,5+i : print vl : position 37,5+i :print rp : position 43,5+i :print rl
00ea4     10 70 5E F2 | 	cmps	local03, #16 wcz
00ea8     D8 02 90 3D |  if_ae	jmp	#LR__0005
00eac     05 60 06 F6 | 	mov	arg02, #5
00eb0     38 61 02 F1 | 	add	arg02, local03
00eb4                 | ' 
00eb4                 | ' ''---------- Set the (x,y) position of cursor
00eb4                 | ' 
00eb4                 | ' cursor_x:=x
00eb4     34 FA 05 F1 | 	add	objptr, #52
00eb8     FD 02 48 FC | 	wrbyte	#1, objptr
00ebc                 | ' cursor_y:=y
00ebc     01 FA 05 F1 | 	add	objptr, #1
00ec0     FD 60 42 FC | 	wrbyte	arg02, objptr
00ec4     35 FA 85 F1 | 	sub	objptr, #53
00ec8     00 5E 06 F6 | 	mov	arg01, #0
00ecc     20 77 B0 FD | 	call	#__system___getiolock_0150
00ed0     0C 5F 02 F6 | 	mov	arg01, result1
00ed4     B8 5F B0 FD | 	call	#__system___lockmem
00ed8     00 18 06 F6 | 	mov	result1, #0
00edc     38 7D 02 F6 | 	mov	local09, local03
00ee0     02 7C 66 F0 | 	shl	local09, #2
00ee4     09 00 00 FF 
00ee8     48 FA 05 F1 | 	add	objptr, ##4680
00eec     FD 7C 02 F1 | 	add	local09, objptr
00ef0     3E 61 02 FB | 	rdlong	arg02, local09
00ef4     00 5E 06 F6 | 	mov	arg01, #0
00ef8     00 62 06 F6 | 	mov	arg03, #0
00efc     09 00 00 FF 
00f00     48 FA 85 F1 | 	sub	objptr, ##4680
00f04     44 63 B0 FD | 	call	#__system___basic_print_string
00f08     00 5E 06 F6 | 	mov	arg01, #0
00f0c     0A 60 06 F6 | 	mov	arg02, #10
00f10     00 62 06 F6 | 	mov	arg03, #0
00f14     E8 62 B0 FD | 	call	#__system___basic_print_char
00f18     01 18 06 F6 | 	mov	result1, #1
00f1c     00 5E 06 F6 | 	mov	arg01, #0
00f20     CC 76 B0 FD | 	call	#__system___getiolock_0150
00f24     0C 01 68 FC | 	wrlong	#0, result1
00f28     00 18 06 F6 | 	mov	result1, #0
00f2c     05 60 06 F6 | 	mov	arg02, #5
00f30     38 61 02 F1 | 	add	arg02, local03
00f34                 | ' 
00f34                 | ' ''---------- Set the (x,y) position of cursor
00f34                 | ' 
00f34                 | ' cursor_x:=x
00f34     34 FA 05 F1 | 	add	objptr, #52
00f38     FD 30 48 FC | 	wrbyte	#24, objptr
00f3c                 | ' cursor_y:=y
00f3c     01 FA 05 F1 | 	add	objptr, #1
00f40     FD 60 42 FC | 	wrbyte	arg02, objptr
00f44     35 FA 85 F1 | 	sub	objptr, #53
00f48     00 5E 06 F6 | 	mov	arg01, #0
00f4c     A0 76 B0 FD | 	call	#__system___getiolock_0150
00f50     0C 5F 02 F6 | 	mov	arg01, result1
00f54     38 5F B0 FD | 	call	#__system___lockmem
00f58     00 18 06 F6 | 	mov	result1, #0
00f5c     09 00 00 FF 
00f60     00 FB 05 F1 | 	add	objptr, ##4864
00f64     FD 60 02 FB | 	rdlong	arg02, objptr
00f68     09 00 00 FF 
00f6c     00 FB 85 F1 | 	sub	objptr, ##4864
00f70     00 5E 06 F6 | 	mov	arg01, #0
00f74     00 62 06 F6 | 	mov	arg03, #0
00f78     0A 64 06 F6 | 	mov	arg04, #10
00f7c     14 63 B0 FD | 	call	#__system___basic_print_integer
00f80     00 5E 06 F6 | 	mov	arg01, #0
00f84     0A 60 06 F6 | 	mov	arg02, #10
00f88     00 62 06 F6 | 	mov	arg03, #0
00f8c     70 62 B0 FD | 	call	#__system___basic_print_char
00f90     01 18 06 F6 | 	mov	result1, #1
00f94     00 5E 06 F6 | 	mov	arg01, #0
00f98     54 76 B0 FD | 	call	#__system___getiolock_0150
00f9c     0C 01 68 FC | 	wrlong	#0, result1
00fa0     00 18 06 F6 | 	mov	result1, #0
00fa4     05 60 06 F6 | 	mov	arg02, #5
00fa8     38 61 02 F1 | 	add	arg02, local03
00fac                 | ' 
00fac                 | ' ''---------- Set the (x,y) position of cursor
00fac                 | ' 
00fac                 | ' cursor_x:=x
00fac     34 FA 05 F1 | 	add	objptr, #52
00fb0     FD 3E 48 FC | 	wrbyte	#31, objptr
00fb4                 | ' cursor_y:=y
00fb4     01 FA 05 F1 | 	add	objptr, #1
00fb8     FD 60 42 FC | 	wrbyte	arg02, objptr
00fbc     35 FA 85 F1 | 	sub	objptr, #53
00fc0     00 5E 06 F6 | 	mov	arg01, #0
00fc4     28 76 B0 FD | 	call	#__system___getiolock_0150
00fc8     0C 5F 02 F6 | 	mov	arg01, result1
00fcc     C0 5E B0 FD | 	call	#__system___lockmem
00fd0     00 18 06 F6 | 	mov	result1, #0
00fd4     09 00 00 FF 
00fd8     0C FB 05 F1 | 	add	objptr, ##4876
00fdc     FD 60 02 FB | 	rdlong	arg02, objptr
00fe0     09 00 00 FF 
00fe4     0C FB 85 F1 | 	sub	objptr, ##4876
00fe8     00 5E 06 F6 | 	mov	arg01, #0
00fec     00 62 06 F6 | 	mov	arg03, #0
00ff0     0A 64 06 F6 | 	mov	arg04, #10
00ff4     9C 62 B0 FD | 	call	#__system___basic_print_integer
00ff8     00 5E 06 F6 | 	mov	arg01, #0
00ffc     0A 60 06 F6 | 	mov	arg02, #10
01000     00 62 06 F6 | 	mov	arg03, #0
01004     F8 61 B0 FD | 	call	#__system___basic_print_char
01008     01 18 06 F6 | 	mov	result1, #1
0100c     00 5E 06 F6 | 	mov	arg01, #0
01010     DC 75 B0 FD | 	call	#__system___getiolock_0150
01014     0C 01 68 FC | 	wrlong	#0, result1
01018     00 18 06 F6 | 	mov	result1, #0
0101c     05 60 06 F6 | 	mov	arg02, #5
01020     38 61 02 F1 | 	add	arg02, local03
01024                 | ' 
01024                 | ' ''---------- Set the (x,y) position of cursor
01024                 | ' 
01024                 | ' cursor_x:=x
01024     34 FA 05 F1 | 	add	objptr, #52
01028     FD 44 48 FC | 	wrbyte	#34, objptr
0102c                 | ' cursor_y:=y
0102c     01 FA 05 F1 | 	add	objptr, #1
01030     FD 60 42 FC | 	wrbyte	arg02, objptr
01034     35 FA 85 F1 | 	sub	objptr, #53
01038     00 5E 06 F6 | 	mov	arg01, #0
0103c     B0 75 B0 FD | 	call	#__system___getiolock_0150
01040     0C 5F 02 F6 | 	mov	arg01, result1
01044     48 5E B0 FD | 	call	#__system___lockmem
01048     00 18 06 F6 | 	mov	result1, #0
0104c     09 00 00 FF 
01050     10 FB 05 F1 | 	add	objptr, ##4880
01054     FD 60 02 FB | 	rdlong	arg02, objptr
01058     09 00 00 FF 
0105c     10 FB 85 F1 | 	sub	objptr, ##4880
01060     00 5E 06 F6 | 	mov	arg01, #0
01064     00 62 06 F6 | 	mov	arg03, #0
01068     0A 64 06 F6 | 	mov	arg04, #10
0106c     24 62 B0 FD | 	call	#__system___basic_print_integer
01070     00 5E 06 F6 | 	mov	arg01, #0
01074     0A 60 06 F6 | 	mov	arg02, #10
01078     00 62 06 F6 | 	mov	arg03, #0
0107c     80 61 B0 FD | 	call	#__system___basic_print_char
01080     01 18 06 F6 | 	mov	result1, #1
01084     00 5E 06 F6 | 	mov	arg01, #0
01088     64 75 B0 FD | 	call	#__system___getiolock_0150
0108c     0C 01 68 FC | 	wrlong	#0, result1
01090     00 18 06 F6 | 	mov	result1, #0
01094     05 60 06 F6 | 	mov	arg02, #5
01098     38 61 02 F1 | 	add	arg02, local03
0109c                 | ' 
0109c                 | ' ''---------- Set the (x,y) position of cursor
0109c                 | ' 
0109c                 | ' cursor_x:=x
0109c     34 FA 05 F1 | 	add	objptr, #52
010a0     FD 4A 48 FC | 	wrbyte	#37, objptr
010a4                 | ' cursor_y:=y
010a4     01 FA 05 F1 | 	add	objptr, #1
010a8     FD 60 42 FC | 	wrbyte	arg02, objptr
010ac     35 FA 85 F1 | 	sub	objptr, #53
010b0     00 5E 06 F6 | 	mov	arg01, #0
010b4     38 75 B0 FD | 	call	#__system___getiolock_0150
010b8     0C 5F 02 F6 | 	mov	arg01, result1
010bc     D0 5D B0 FD | 	call	#__system___lockmem
010c0     00 18 06 F6 | 	mov	result1, #0
010c4     09 00 00 FF 
010c8     04 FB 05 F1 | 	add	objptr, ##4868
010cc     FD 60 02 FB | 	rdlong	arg02, objptr
010d0     09 00 00 FF 
010d4     04 FB 85 F1 | 	sub	objptr, ##4868
010d8     00 5E 06 F6 | 	mov	arg01, #0
010dc     00 62 06 F6 | 	mov	arg03, #0
010e0     0A 64 06 F6 | 	mov	arg04, #10
010e4     AC 61 B0 FD | 	call	#__system___basic_print_integer
010e8     00 5E 06 F6 | 	mov	arg01, #0
010ec     0A 60 06 F6 | 	mov	arg02, #10
010f0     00 62 06 F6 | 	mov	arg03, #0
010f4     08 61 B0 FD | 	call	#__system___basic_print_char
010f8     01 18 06 F6 | 	mov	result1, #1
010fc     00 5E 06 F6 | 	mov	arg01, #0
01100     EC 74 B0 FD | 	call	#__system___getiolock_0150
01104     0C 01 68 FC | 	wrlong	#0, result1
01108     00 18 06 F6 | 	mov	result1, #0
0110c     05 60 06 F6 | 	mov	arg02, #5
01110     38 61 02 F1 | 	add	arg02, local03
01114                 | ' 
01114                 | ' ''---------- Set the (x,y) position of cursor
01114                 | ' 
01114                 | ' cursor_x:=x
01114     34 FA 05 F1 | 	add	objptr, #52
01118     FD 56 48 FC | 	wrbyte	#43, objptr
0111c                 | ' cursor_y:=y
0111c     01 FA 05 F1 | 	add	objptr, #1
01120     FD 60 42 FC | 	wrbyte	arg02, objptr
01124     35 FA 85 F1 | 	sub	objptr, #53
01128     00 5E 06 F6 | 	mov	arg01, #0
0112c     C0 74 B0 FD | 	call	#__system___getiolock_0150
01130     0C 5F 02 F6 | 	mov	arg01, result1
01134     58 5D B0 FD | 	call	#__system___lockmem
01138     00 18 06 F6 | 	mov	result1, #0
0113c     09 00 00 FF 
01140     08 FB 05 F1 | 	add	objptr, ##4872
01144     FD 60 02 FB | 	rdlong	arg02, objptr
01148     09 00 00 FF 
0114c     08 FB 85 F1 | 	sub	objptr, ##4872
01150     00 5E 06 F6 | 	mov	arg01, #0
01154     00 62 06 F6 | 	mov	arg03, #0
01158     0A 64 06 F6 | 	mov	arg04, #10
0115c     34 61 B0 FD | 	call	#__system___basic_print_integer
01160     00 5E 06 F6 | 	mov	arg01, #0
01164     0A 60 06 F6 | 	mov	arg02, #10
01168     00 62 06 F6 | 	mov	arg03, #0
0116c     90 60 B0 FD | 	call	#__system___basic_print_char
01170     01 18 06 F6 | 	mov	result1, #1
01174     00 5E 06 F6 | 	mov	arg01, #0
01178     74 74 B0 FD | 	call	#__system___getiolock_0150
0117c     0C 01 68 FC | 	wrlong	#0, result1
01180     00 18 06 F6 | 	mov	result1, #0
01184                 | LR__0005
01184                 | ' if i>=16 then position 57,i-11 :print sn$(i) : position 80,i-11 : print sl : position 87,i-11 : print ft: position 90,i-11 : print vl :position 93,i-11 : print rp : position 99,i-11 : print rl
01184     10 70 5E F2 | 	cmps	local03, #16 wcz
01188     D8 02 90 CD |  if_b	jmp	#LR__0006
0118c     38 61 02 F6 | 	mov	arg02, local03
01190     0B 60 86 F1 | 	sub	arg02, #11
01194                 | ' 
01194                 | ' ''---------- Set the (x,y) position of cursor
01194                 | ' 
01194                 | ' cursor_x:=x
01194     34 FA 05 F1 | 	add	objptr, #52
01198     FD 72 48 FC | 	wrbyte	#57, objptr
0119c                 | ' cursor_y:=y
0119c     01 FA 05 F1 | 	add	objptr, #1
011a0     FD 60 42 FC | 	wrbyte	arg02, objptr
011a4     35 FA 85 F1 | 	sub	objptr, #53
011a8     00 5E 06 F6 | 	mov	arg01, #0
011ac     40 74 B0 FD | 	call	#__system___getiolock_0150
011b0     0C 5F 02 F6 | 	mov	arg01, result1
011b4     D8 5C B0 FD | 	call	#__system___lockmem
011b8     00 18 06 F6 | 	mov	result1, #0
011bc     38 7D 02 F6 | 	mov	local09, local03
011c0     02 7C 66 F0 | 	shl	local09, #2
011c4     09 00 00 FF 
011c8     48 FA 05 F1 | 	add	objptr, ##4680
011cc     FD 7C 02 F1 | 	add	local09, objptr
011d0     3E 61 02 FB | 	rdlong	arg02, local09
011d4     00 5E 06 F6 | 	mov	arg01, #0
011d8     00 62 06 F6 | 	mov	arg03, #0
011dc     09 00 00 FF 
011e0     48 FA 85 F1 | 	sub	objptr, ##4680
011e4     64 60 B0 FD | 	call	#__system___basic_print_string
011e8     00 5E 06 F6 | 	mov	arg01, #0
011ec     0A 60 06 F6 | 	mov	arg02, #10
011f0     00 62 06 F6 | 	mov	arg03, #0
011f4     08 60 B0 FD | 	call	#__system___basic_print_char
011f8     01 18 06 F6 | 	mov	result1, #1
011fc     00 5E 06 F6 | 	mov	arg01, #0
01200     EC 73 B0 FD | 	call	#__system___getiolock_0150
01204     0C 01 68 FC | 	wrlong	#0, result1
01208     00 18 06 F6 | 	mov	result1, #0
0120c     38 61 02 F6 | 	mov	arg02, local03
01210     0B 60 86 F1 | 	sub	arg02, #11
01214                 | ' 
01214                 | ' ''---------- Set the (x,y) position of cursor
01214                 | ' 
01214                 | ' cursor_x:=x
01214     34 FA 05 F1 | 	add	objptr, #52
01218     FD A0 48 FC | 	wrbyte	#80, objptr
0121c                 | ' cursor_y:=y
0121c     01 FA 05 F1 | 	add	objptr, #1
01220     FD 60 42 FC | 	wrbyte	arg02, objptr
01224     35 FA 85 F1 | 	sub	objptr, #53
01228     00 5E 06 F6 | 	mov	arg01, #0
0122c     C0 73 B0 FD | 	call	#__system___getiolock_0150
01230     0C 5F 02 F6 | 	mov	arg01, result1
01234     58 5C B0 FD | 	call	#__system___lockmem
01238     00 18 06 F6 | 	mov	result1, #0
0123c     09 00 00 FF 
01240     00 FB 05 F1 | 	add	objptr, ##4864
01244     FD 60 02 FB | 	rdlong	arg02, objptr
01248     09 00 00 FF 
0124c     00 FB 85 F1 | 	sub	objptr, ##4864
01250     00 5E 06 F6 | 	mov	arg01, #0
01254     00 62 06 F6 | 	mov	arg03, #0
01258     0A 64 06 F6 | 	mov	arg04, #10
0125c     34 60 B0 FD | 	call	#__system___basic_print_integer
01260     00 5E 06 F6 | 	mov	arg01, #0
01264     0A 60 06 F6 | 	mov	arg02, #10
01268     00 62 06 F6 | 	mov	arg03, #0
0126c     90 5F B0 FD | 	call	#__system___basic_print_char
01270     01 18 06 F6 | 	mov	result1, #1
01274     00 5E 06 F6 | 	mov	arg01, #0
01278     74 73 B0 FD | 	call	#__system___getiolock_0150
0127c     0C 01 68 FC | 	wrlong	#0, result1
01280     00 18 06 F6 | 	mov	result1, #0
01284     38 61 02 F6 | 	mov	arg02, local03
01288     0B 60 86 F1 | 	sub	arg02, #11
0128c                 | ' 
0128c                 | ' ''---------- Set the (x,y) position of cursor
0128c                 | ' 
0128c                 | ' cursor_x:=x
0128c     34 FA 05 F1 | 	add	objptr, #52
01290     FD AE 48 FC | 	wrbyte	#87, objptr
01294                 | ' cursor_y:=y
01294     01 FA 05 F1 | 	add	objptr, #1
01298     FD 60 42 FC | 	wrbyte	arg02, objptr
0129c     35 FA 85 F1 | 	sub	objptr, #53
012a0     00 5E 06 F6 | 	mov	arg01, #0
012a4     48 73 B0 FD | 	call	#__system___getiolock_0150
012a8     0C 5F 02 F6 | 	mov	arg01, result1
012ac     E0 5B B0 FD | 	call	#__system___lockmem
012b0     00 18 06 F6 | 	mov	result1, #0
012b4     09 00 00 FF 
012b8     0C FB 05 F1 | 	add	objptr, ##4876
012bc     FD 60 02 FB | 	rdlong	arg02, objptr
012c0     09 00 00 FF 
012c4     0C FB 85 F1 | 	sub	objptr, ##4876
012c8     00 5E 06 F6 | 	mov	arg01, #0
012cc     00 62 06 F6 | 	mov	arg03, #0
012d0     0A 64 06 F6 | 	mov	arg04, #10
012d4     BC 5F B0 FD | 	call	#__system___basic_print_integer
012d8     00 5E 06 F6 | 	mov	arg01, #0
012dc     0A 60 06 F6 | 	mov	arg02, #10
012e0     00 62 06 F6 | 	mov	arg03, #0
012e4     18 5F B0 FD | 	call	#__system___basic_print_char
012e8     01 18 06 F6 | 	mov	result1, #1
012ec     00 5E 06 F6 | 	mov	arg01, #0
012f0     FC 72 B0 FD | 	call	#__system___getiolock_0150
012f4     0C 01 68 FC | 	wrlong	#0, result1
012f8     00 18 06 F6 | 	mov	result1, #0
012fc     38 61 02 F6 | 	mov	arg02, local03
01300     0B 60 86 F1 | 	sub	arg02, #11
01304                 | ' 
01304                 | ' ''---------- Set the (x,y) position of cursor
01304                 | ' 
01304                 | ' cursor_x:=x
01304     34 FA 05 F1 | 	add	objptr, #52
01308     FD B4 48 FC | 	wrbyte	#90, objptr
0130c                 | ' cursor_y:=y
0130c     01 FA 05 F1 | 	add	objptr, #1
01310     FD 60 42 FC | 	wrbyte	arg02, objptr
01314     35 FA 85 F1 | 	sub	objptr, #53
01318     00 5E 06 F6 | 	mov	arg01, #0
0131c     D0 72 B0 FD | 	call	#__system___getiolock_0150
01320     0C 5F 02 F6 | 	mov	arg01, result1
01324     68 5B B0 FD | 	call	#__system___lockmem
01328     00 18 06 F6 | 	mov	result1, #0
0132c     09 00 00 FF 
01330     10 FB 05 F1 | 	add	objptr, ##4880
01334     FD 60 02 FB | 	rdlong	arg02, objptr
01338     09 00 00 FF 
0133c     10 FB 85 F1 | 	sub	objptr, ##4880
01340     00 5E 06 F6 | 	mov	arg01, #0
01344     00 62 06 F6 | 	mov	arg03, #0
01348     0A 64 06 F6 | 	mov	arg04, #10
0134c     44 5F B0 FD | 	call	#__system___basic_print_integer
01350     00 5E 06 F6 | 	mov	arg01, #0
01354     0A 60 06 F6 | 	mov	arg02, #10
01358     00 62 06 F6 | 	mov	arg03, #0
0135c     A0 5E B0 FD | 	call	#__system___basic_print_char
01360     01 18 06 F6 | 	mov	result1, #1
01364     00 5E 06 F6 | 	mov	arg01, #0
01368     84 72 B0 FD | 	call	#__system___getiolock_0150
0136c     0C 01 68 FC | 	wrlong	#0, result1
01370     00 18 06 F6 | 	mov	result1, #0
01374     38 61 02 F6 | 	mov	arg02, local03
01378     0B 60 86 F1 | 	sub	arg02, #11
0137c                 | ' 
0137c                 | ' ''---------- Set the (x,y) position of cursor
0137c                 | ' 
0137c                 | ' cursor_x:=x
0137c     34 FA 05 F1 | 	add	objptr, #52
01380     FD BA 48 FC | 	wrbyte	#93, objptr
01384                 | ' cursor_y:=y
01384     01 FA 05 F1 | 	add	objptr, #1
01388     FD 60 42 FC | 	wrbyte	arg02, objptr
0138c     35 FA 85 F1 | 	sub	objptr, #53
01390     00 5E 06 F6 | 	mov	arg01, #0
01394     58 72 B0 FD | 	call	#__system___getiolock_0150
01398     0C 5F 02 F6 | 	mov	arg01, result1
0139c     F0 5A B0 FD | 	call	#__system___lockmem
013a0     00 18 06 F6 | 	mov	result1, #0
013a4     09 00 00 FF 
013a8     04 FB 05 F1 | 	add	objptr, ##4868
013ac     FD 60 02 FB | 	rdlong	arg02, objptr
013b0     09 00 00 FF 
013b4     04 FB 85 F1 | 	sub	objptr, ##4868
013b8     00 5E 06 F6 | 	mov	arg01, #0
013bc     00 62 06 F6 | 	mov	arg03, #0
013c0     0A 64 06 F6 | 	mov	arg04, #10
013c4     CC 5E B0 FD | 	call	#__system___basic_print_integer
013c8     00 5E 06 F6 | 	mov	arg01, #0
013cc     0A 60 06 F6 | 	mov	arg02, #10
013d0     00 62 06 F6 | 	mov	arg03, #0
013d4     28 5E B0 FD | 	call	#__system___basic_print_char
013d8     01 18 06 F6 | 	mov	result1, #1
013dc     00 5E 06 F6 | 	mov	arg01, #0
013e0     0C 72 B0 FD | 	call	#__system___getiolock_0150
013e4     0C 01 68 FC | 	wrlong	#0, result1
013e8     00 18 06 F6 | 	mov	result1, #0
013ec     38 61 02 F6 | 	mov	arg02, local03
013f0     0B 60 86 F1 | 	sub	arg02, #11
013f4                 | ' 
013f4                 | ' ''---------- Set the (x,y) position of cursor
013f4                 | ' 
013f4                 | ' cursor_x:=x
013f4     34 FA 05 F1 | 	add	objptr, #52
013f8     FD C6 48 FC | 	wrbyte	#99, objptr
013fc                 | ' cursor_y:=y
013fc     01 FA 05 F1 | 	add	objptr, #1
01400     FD 60 42 FC | 	wrbyte	arg02, objptr
01404     35 FA 85 F1 | 	sub	objptr, #53
01408     00 5E 06 F6 | 	mov	arg01, #0
0140c     E0 71 B0 FD | 	call	#__system___getiolock_0150
01410     0C 5F 02 F6 | 	mov	arg01, result1
01414     78 5A B0 FD | 	call	#__system___lockmem
01418     00 18 06 F6 | 	mov	result1, #0
0141c     09 00 00 FF 
01420     08 FB 05 F1 | 	add	objptr, ##4872
01424     FD 60 02 FB | 	rdlong	arg02, objptr
01428     09 00 00 FF 
0142c     08 FB 85 F1 | 	sub	objptr, ##4872
01430     00 5E 06 F6 | 	mov	arg01, #0
01434     00 62 06 F6 | 	mov	arg03, #0
01438     0A 64 06 F6 | 	mov	arg04, #10
0143c     54 5E B0 FD | 	call	#__system___basic_print_integer
01440     00 5E 06 F6 | 	mov	arg01, #0
01444     0A 60 06 F6 | 	mov	arg02, #10
01448     00 62 06 F6 | 	mov	arg03, #0
0144c     B0 5D B0 FD | 	call	#__system___basic_print_char
01450     01 18 06 F6 | 	mov	result1, #1
01454     00 5E 06 F6 | 	mov	arg01, #0
01458     94 71 B0 FD | 	call	#__system___getiolock_0150
0145c     0C 01 68 FC | 	wrlong	#0, result1
01460     00 18 06 F6 | 	mov	result1, #0
01464                 | LR__0006
01464     01 70 06 F1 | 	add	local03, #1
01468     A4 F7 9F FD | 	jmp	#LR__0002
0146c                 | LR__0007
0146c                 | ' print
0146c     00 5E 06 F6 | 	mov	arg01, #0
01470     7C 71 B0 FD | 	call	#__system___getiolock_0150
01474     0C 5F 02 F6 | 	mov	arg01, result1
01478     14 5A B0 FD | 	call	#__system___lockmem
0147c     00 18 06 F6 | 	mov	result1, #0
01480     00 5E 06 F6 | 	mov	arg01, #0
01484     0A 60 06 F6 | 	mov	arg02, #10
01488     00 62 06 F6 | 	mov	arg03, #0
0148c     70 5D B0 FD | 	call	#__system___basic_print_char
01490     01 18 06 F6 | 	mov	result1, #1
01494     00 5E 06 F6 | 	mov	arg01, #0
01498     54 71 B0 FD | 	call	#__system___getiolock_0150
0149c     0C 01 68 FC | 	wrlong	#0, result1
014a0     00 18 06 F6 | 	mov	result1, #0
014a4     AF F0 03 F6 | 	mov	ptra, fp
014a8     BA 00 A0 FD | 	call	#popregs_
014ac                 | _getinfo_ret
014ac     2D 00 64 FD | 	ret
014b0                 | 
014b0                 | _program
014b0     0C 5A 05 F6 | 	mov	COUNT_, #12
014b4     B0 00 A0 FD | 	call	#pushregs_
014b8     EC FA 05 F1 | 	add	objptr, #236
014bc     70 2C B0 FD | 	call	#_retrocog_spin2_start
014c0     EC FA 85 F1 | 	sub	objptr, #236
014c4     40 5E 06 F6 | 	mov	arg01, #64
014c8     00 60 06 F6 | 	mov	arg02, #0
014cc     70 F3 BF FD | 	call	#_startvideo
014d0     1C FA 05 F1 | 	add	objptr, #28
014d4     FD 6C 02 FB | 	rdlong	local01, objptr
014d8     07 00 00 FF 
014dc     74 FA 05 F1 | 	add	objptr, ##3700
014e0     FD 6C 62 FC | 	wrlong	local01, objptr
014e4     07 00 00 FF 
014e8     78 FA 85 F1 | 	sub	objptr, ##3704
014ec     FD 6C 02 FB | 	rdlong	local01, objptr
014f0     07 00 00 FF 
014f4     7C FA 05 F1 | 	add	objptr, ##3708
014f8     FD 6C 62 FC | 	wrlong	local01, objptr
014fc     07 00 00 FF 
01500     94 FA 85 F1 | 	sub	objptr, ##3732
01504                 | ' 
01504                 | ' ' create a new screen
01504                 | ' ' 22 lines std border
01504                 | ' ' 32 lines of big title. As it is constant we fill it manually, lines 22..53
01504                 | ' ' 4 lines border lines 54..57
01504                 | ' ' 22x16=352 lines of text lines 58..409
01504                 | ' ' 6 lines of border at 410..415
01504                 | ' ' 64 lines of 4bpp oscilloscope at 416..479 ' todo: make it 2bpp. The driver has a bug: the timings[5] is not controlled by DL - TODO.
01504                 | ' ' 6 lines of border at 480..485
01504                 | ' ' 2x16=32 lines of text at 486- 517
01504                 | ' ' standard border at 518-539
01504                 | ' 
01504                 | ' ' We need 10752 bytes for text and 28672 bytes for graphics = 25088 bytes
01504                 | ' ' graphic starts at 79000
01504                 | ' ' text start at 76600
01504                 | ' 
01504                 | ' for i=0 to 539 : dlcopy(i)=lpeek(dltest+4*i):next i ' let it be here for debug
01504     00 6E 06 F6 | 	mov	local02, #0
01508     74 EB 9F FE | 	loc	pa,	#(@LR__0010-@LR__0008)
0150c     93 00 A0 FD | 	call	#FCACHE_LOAD_
01510                 | LR__0008
01510     37 71 02 F6 | 	mov	local03, local02
01514     02 70 66 F0 | 	shl	local03, #2
01518     02 00 00 FF 
0151c     2C FB 05 F1 | 	add	objptr, ##1324
01520     FD 70 02 F1 | 	add	local03, objptr
01524     04 00 00 FF 
01528     64 FB 05 F1 | 	add	objptr, ##2404
0152c     FD 5E 02 FB | 	rdlong	arg01, objptr
01530     07 00 00 FF 
01534     90 FA 85 F1 | 	sub	objptr, ##3728
01538     37 73 02 F6 | 	mov	local04, local02
0153c     02 72 66 F0 | 	shl	local04, #2
01540     39 5F 02 F1 | 	add	arg01, local04
01544                 | ' asm
01544     2F 19 02 FB | 	rdlong	result1, arg01
01548                 | ' return r
01548     38 19 62 FC | 	wrlong	result1, local03
0154c     01 6E 06 F1 | 	add	local02, #1
01550     01 00 00 FF 
01554     1C 6E 5E F2 | 	cmps	local02, ##540 wcz
01558     B4 FF 9F CD |  if_b	jmp	#LR__0008
0155c                 | ' 
0155c                 | ' ' Prepare the title
0155c                 | ' 
0155c                 | ' for i=0 to 28: title(i)=$77710000 : next i
0155c     00 6E 06 F6 | 	mov	local02, #0
01560                 | LR__0009
01560     37 71 02 F6 | 	mov	local03, local02
01564     02 70 66 F0 | 	shl	local03, #2
01568     07 00 00 FF 
0156c     98 FA 05 F1 | 	add	objptr, ##3736
01570     FD 70 02 F1 | 	add	local03, objptr
01574     80 B8 BB FF 
01578     38 01 68 FC | 	wrlong	##2003894272, local03
0157c     01 6E 06 F1 | 	add	local02, #1
01580     1D 6E 5E F2 | 	cmps	local02, #29 wcz
01584     07 00 00 FF 
01588     98 FA 85 F1 | 	sub	objptr, ##3736
0158c     D0 FF 9F CD |  if_b	jmp	#LR__0009
01590                 | LR__0010
01590     07 00 00 FF 
01594     B0 FA 05 F1 | 	add	objptr, ##3760
01598     FD 6C 02 FB | 	rdlong	local01, objptr
0159c     50 6C 06 F1 | 	add	local01, #80
015a0     FD 6C 62 FC | 	wrlong	local01, objptr
015a4     04 FA 05 F1 | 	add	objptr, #4
015a8     FD 6C 02 FB | 	rdlong	local01, objptr
015ac     72 6C 06 F1 | 	add	local01, #114
015b0     FD 6C 62 FC | 	wrlong	local01, objptr
015b4     04 FA 05 F1 | 	add	objptr, #4
015b8     FD 6C 02 FB | 	rdlong	local01, objptr
015bc     6F 6C 06 F1 | 	add	local01, #111
015c0     FD 6C 62 FC | 	wrlong	local01, objptr
015c4     04 FA 05 F1 | 	add	objptr, #4
015c8     FD 6C 02 FB | 	rdlong	local01, objptr
015cc     70 6C 06 F1 | 	add	local01, #112
015d0     FD 6C 62 FC | 	wrlong	local01, objptr
015d4     04 FA 05 F1 | 	add	objptr, #4
015d8     FD 6C 02 FB | 	rdlong	local01, objptr
015dc     32 6C 06 F1 | 	add	local01, #50
015e0     FD 6C 62 FC | 	wrlong	local01, objptr
015e4     04 FA 05 F1 | 	add	objptr, #4
015e8     FD 6C 02 FB | 	rdlong	local01, objptr
015ec     70 6C 06 F1 | 	add	local01, #112
015f0     FD 6C 62 FC | 	wrlong	local01, objptr
015f4     04 FA 05 F1 | 	add	objptr, #4
015f8     FD 6C 02 FB | 	rdlong	local01, objptr
015fc     6C 6C 06 F1 | 	add	local01, #108
01600     FD 6C 62 FC | 	wrlong	local01, objptr
01604     04 FA 05 F1 | 	add	objptr, #4
01608     FD 6C 02 FB | 	rdlong	local01, objptr
0160c     61 6C 06 F1 | 	add	local01, #97
01610     FD 6C 62 FC | 	wrlong	local01, objptr
01614     04 FA 05 F1 | 	add	objptr, #4
01618     FD 6C 02 FB | 	rdlong	local01, objptr
0161c     79 6C 06 F1 | 	add	local01, #121
01620     FD 6C 62 FC | 	wrlong	local01, objptr
01624     08 FA 05 F1 | 	add	objptr, #8
01628     FD 6C 02 FB | 	rdlong	local01, objptr
0162c     76 6C 06 F1 | 	add	local01, #118
01630     FD 6C 62 FC | 	wrlong	local01, objptr
01634     04 FA 05 F1 | 	add	objptr, #4
01638     FD 6C 02 FB | 	rdlong	local01, objptr
0163c     2E 6C 06 F1 | 	add	local01, #46
01640     FD 6C 62 FC | 	wrlong	local01, objptr
01644     04 FA 05 F1 | 	add	objptr, #4
01648     FD 6C 02 FB | 	rdlong	local01, objptr
0164c     30 6C 06 F1 | 	add	local01, #48
01650     FD 6C 62 FC | 	wrlong	local01, objptr
01654     04 FA 05 F1 | 	add	objptr, #4
01658     FD 6C 02 FB | 	rdlong	local01, objptr
0165c     2E 6C 06 F1 | 	add	local01, #46
01660     FD 6C 62 FC | 	wrlong	local01, objptr
01664     04 FA 05 F1 | 	add	objptr, #4
01668     FD 6C 02 FB | 	rdlong	local01, objptr
0166c     30 6C 06 F1 | 	add	local01, #48
01670     FD 6C 62 FC | 	wrlong	local01, objptr
01674     04 FA 05 F1 | 	add	objptr, #4
01678     FD 6C 02 FB | 	rdlong	local01, objptr
0167c     31 6C 06 F1 | 	add	local01, #49
01680     FD 6C 62 FC | 	wrlong	local01, objptr
01684     07 00 00 FF 
01688     EC FA 85 F1 | 	sub	objptr, ##3820
0168c                 | ' 
0168c                 | ' ' 22 lines of upper border
0168c                 | ' 
0168c                 | ' 
0168c                 | ' 
0168c                 | ' for i=0 to 21 : dlcopy(i)=0: next i
0168c     00 6E 06 F6 | 	mov	local02, #0
01690     98 E9 9F FE | 	loc	pa,	#(@LR__0012-@LR__0011)
01694     93 00 A0 FD | 	call	#FCACHE_LOAD_
01698                 | LR__0011
01698     37 71 02 F6 | 	mov	local03, local02
0169c     02 70 66 F0 | 	shl	local03, #2
016a0     02 00 00 FF 
016a4     2C FB 05 F1 | 	add	objptr, ##1324
016a8     FD 70 02 F1 | 	add	local03, objptr
016ac     38 01 68 FC | 	wrlong	#0, local03
016b0     01 6E 06 F1 | 	add	local02, #1
016b4     16 6E 5E F2 | 	cmps	local02, #22 wcz
016b8     02 00 00 FF 
016bc     2C FB 85 F1 | 	sub	objptr, ##1324
016c0     D4 FF 9F CD |  if_b	jmp	#LR__0011
016c4                 | LR__0012
016c4     02 00 00 FF 
016c8     84 FB 05 F1 | 	add	objptr, ##1412
016cc     02 00 80 FF 
016d0     FD 66 68 FC | 	wrlong	##1075, objptr
016d4     02 00 00 FF 
016d8     84 FB 85 F1 | 	sub	objptr, ##1412
016dc                 | ' 
016dc                 | ' dlcopy(22)= %0000_0000_0000_0000_0000_0100_0011_0011
016dc                 | ' 
016dc                 | ' ' big text titlle logo. Tell the driver via DL that it should display the text from "title" table
016dc                 | ' 
016dc                 | ' for i=0 to 15
016dc     00 6E 06 F6 | 	mov	local02, #0
016e0                 | LR__0013
016e0                 | '   for j=0 to 1
016e0     00 74 06 F6 | 	mov	local05, #0
016e4                 | LR__0014
016e4     37 71 02 F6 | 	mov	local03, local02
016e8     01 70 66 F0 | 	shl	local03, #1
016ec     17 76 06 F6 | 	mov	local06, #23
016f0     38 77 02 F1 | 	add	local06, local03
016f4     3A 77 02 F1 | 	add	local06, local05
016f8     02 76 66 F0 | 	shl	local06, #2
016fc     02 00 00 FF 
01700     2C FB 05 F1 | 	add	objptr, ##1324
01704     FD 76 02 F1 | 	add	local06, objptr
01708     04 00 00 FF 
0170c     6C FB 05 F1 | 	add	objptr, ##2412
01710     FD 5E 02 F6 | 	mov	arg01, objptr
01714     07 00 00 FF 
01718     98 FA 85 F1 | 	sub	objptr, ##3736
0171c     64 F1 BF FD | 	call	#_addr
01720     0C 79 02 F6 | 	mov	local07, result1
01724     0C 78 66 F0 | 	shl	local07, #12
01728     10 00 00 FF 
0172c     01 78 06 F1 | 	add	local07, ##8193
01730     37 73 02 F6 | 	mov	local04, local02
01734     08 72 66 F0 | 	shl	local04, #8
01738     39 79 02 F1 | 	add	local07, local04
0173c     3B 79 62 FC | 	wrlong	local07, local06
01740     01 74 06 F1 | 	add	local05, #1
01744     02 74 5E F2 | 	cmps	local05, #2 wcz
01748     98 FF 9F CD |  if_b	jmp	#LR__0014
0174c     01 6E 06 F1 | 	add	local02, #1
01750     10 6E 5E F2 | 	cmps	local02, #16 wcz
01754     88 FF 9F CD |  if_b	jmp	#LR__0013
01758     03 00 00 FF 
0175c     08 FA 05 F1 | 	add	objptr, ##1544
01760     01 00 80 FF 
01764     FD 66 6A FC | 	wrlong	##819, objptr
01768     03 00 00 FF 
0176c     08 FA 85 F1 | 	sub	objptr, ##1544
01770                 | ' 
01770                 | ' dlcopy(55)=  %0000_0000_0000_0000_0000_0011_0011_0011
01770                 | ' 
01770                 | ' ' 4 empty lines under the logo
01770                 | ' 
01770                 | ' for i=56 to 59 : dlcopy(i)= dlcopy(0) : next i 
01770     38 6E 06 F6 | 	mov	local02, #56
01774     B8 E8 9F FE | 	loc	pa,	#(@LR__0016-@LR__0015)
01778     93 00 A0 FD | 	call	#FCACHE_LOAD_
0177c                 | LR__0015
0177c     37 71 02 F6 | 	mov	local03, local02
01780     02 70 66 F0 | 	shl	local03, #2
01784     02 00 00 FF 
01788     2C FB 05 F1 | 	add	objptr, ##1324
0178c     FD 70 02 F1 | 	add	local03, objptr
01790     FD 7A 02 FB | 	rdlong	local08, objptr
01794     02 00 00 FF 
01798     2C FB 85 F1 | 	sub	objptr, ##1324
0179c     38 7B 62 FC | 	wrlong	local08, local03
017a0     01 6E 06 F1 | 	add	local02, #1
017a4     3C 6E 1E F2 | 	cmp	local02, #60 wcz
017a8     D0 FF 9F CD |  if_b	jmp	#LR__0015
017ac                 | LR__0016
017ac     07 00 00 FF 
017b0     0C FB 05 F1 | 	add	objptr, ##3852
017b4     B3 03 80 FF 
017b8     FD 00 68 FC | 	wrlong	##484864, objptr
017bc     07 00 00 FF 
017c0     0C FB 85 F1 | 	sub	objptr, ##3852
017c4                 | ' 
017c4                 | ' ' Now make 22 text lines starting at 79e00
017c4                 | ' 
017c4                 | ' address=$76600
017c4                 | ' for i=0 to 43
017c4     00 6E 06 F6 | 	mov	local02, #0
017c8     DC E9 9F FE | 	loc	pa,	#(@LR__0022-@LR__0017)
017cc     93 00 A0 FD | 	call	#FCACHE_LOAD_
017d0                 | LR__0017
017d0                 | '   for j=0 to 7
017d0     00 74 06 F6 | 	mov	local05, #0
017d4                 | LR__0018
017d4     37 71 02 F6 | 	mov	local03, local02
017d8     02 70 66 F0 | 	shl	local03, #2
017dc     37 71 02 F1 | 	add	local03, local02
017e0     01 70 66 F0 | 	shl	local03, #1
017e4     3C 76 06 F6 | 	mov	local06, #60
017e8     38 77 02 F1 | 	add	local06, local03
017ec     3A 77 02 F1 | 	add	local06, local05
017f0     02 76 66 F0 | 	shl	local06, #2
017f4     02 00 00 FF 
017f8     2C FB 05 F1 | 	add	objptr, ##1324
017fc     FD 76 02 F1 | 	add	local06, objptr
01800     04 00 00 FF 
01804     E0 FB 05 F1 | 	add	objptr, ##2528
01808     FD 78 02 FB | 	rdlong	local07, objptr
0180c     07 00 00 FF 
01810     0C FB 85 F1 | 	sub	objptr, ##3852
01814     0C 78 66 F0 | 	shl	local07, #12
01818     3A 73 02 F6 | 	mov	local04, local05
0181c     08 72 66 F0 | 	shl	local04, #8
01820     39 79 02 F1 | 	add	local07, local04
01824     37 7D 02 F6 | 	mov	local09, local02
01828     02 7C 66 F0 | 	shl	local09, #2
0182c     3E 79 02 F1 | 	add	local07, local09
01830     01 78 06 F1 | 	add	local07, #1
01834     3B 79 62 FC | 	wrlong	local07, local06
01838     01 74 06 F1 | 	add	local05, #1
0183c     08 74 5E F2 | 	cmps	local05, #8 wcz
01840     90 FF 9F CD |  if_b	jmp	#LR__0018
01844                 | '   for j=8 to 9
01844     08 74 06 F6 | 	mov	local05, #8
01848                 | LR__0019
01848     37 71 02 F6 | 	mov	local03, local02
0184c     02 70 66 F0 | 	shl	local03, #2
01850     37 71 02 F1 | 	add	local03, local02
01854     01 70 66 F0 | 	shl	local03, #1
01858     3C 76 06 F6 | 	mov	local06, #60
0185c     38 77 02 F1 | 	add	local06, local03
01860     3A 77 02 F1 | 	add	local06, local05
01864     02 76 66 F0 | 	shl	local06, #2
01868     02 00 00 FF 
0186c     2C FB 05 F1 | 	add	objptr, ##1324
01870     FD 76 02 F1 | 	add	local06, objptr
01874     04 00 00 FF 
01878     E0 FB 05 F1 | 	add	objptr, ##2528
0187c     FD 78 02 FB | 	rdlong	local07, objptr
01880     07 00 00 FF 
01884     0C FB 85 F1 | 	sub	objptr, ##3852
01888     0C 78 66 F0 | 	shl	local07, #12
0188c     18 00 00 FF 
01890     00 78 06 F1 | 	add	local07, ##12288
01894     37 73 02 F6 | 	mov	local04, local02
01898     02 72 66 F0 | 	shl	local04, #2
0189c     39 79 02 F1 | 	add	local07, local04
018a0     01 78 06 F1 | 	add	local07, #1
018a4     3B 79 62 FC | 	wrlong	local07, local06
018a8     01 74 06 F1 | 	add	local05, #1
018ac     0A 74 1E F2 | 	cmp	local05, #10 wcz
018b0     94 FF 9F CD |  if_b	jmp	#LR__0019
018b4     07 00 00 FF 
018b8     0C FB 05 F1 | 	add	objptr, ##3852
018bc     FD 6C 02 FB | 	rdlong	local01, objptr
018c0     C0 6D 06 F1 | 	add	local01, #448
018c4     FD 6C 62 FC | 	wrlong	local01, objptr
018c8     07 00 00 FF 
018cc     0C FB 85 F1 | 	sub	objptr, ##3852
018d0     01 6E 06 F1 | 	add	local02, #1
018d4     2C 6E 5E F2 | 	cmps	local02, #44 wcz
018d8     F4 FE 9F CD |  if_b	jmp	#LR__0017
018dc                 | ' 
018dc                 | ' ' and add 2 text lines at the bottpm
018dc                 | ' 
018dc                 | ' for i=0 to 3
018dc     00 6E 06 F6 | 	mov	local02, #0
018e0                 | LR__0020
018e0                 | '   for j=0 to 7
018e0     00 74 06 F6 | 	mov	local05, #0
018e4                 | LR__0021
018e4     37 71 02 F6 | 	mov	local03, local02
018e8     03 70 66 F0 | 	shl	local03, #3
018ec     E8 77 06 F6 | 	mov	local06, #488
018f0     38 77 02 F1 | 	add	local06, local03
018f4     3A 77 02 F1 | 	add	local06, local05
018f8     02 76 66 F0 | 	shl	local06, #2
018fc     02 00 00 FF 
01900     2C FB 05 F1 | 	add	objptr, ##1324
01904     FD 76 02 F1 | 	add	local06, objptr
01908     04 00 00 FF 
0190c     E0 FB 05 F1 | 	add	objptr, ##2528
01910     FD 78 02 FB | 	rdlong	local07, objptr
01914     07 00 00 FF 
01918     0C FB 85 F1 | 	sub	objptr, ##3852
0191c     0C 78 66 F0 | 	shl	local07, #12
01920     3A 73 02 F6 | 	mov	local04, local05
01924     08 72 66 F0 | 	shl	local04, #8
01928     39 79 02 F1 | 	add	local07, local04
0192c     16 7C 06 F6 | 	mov	local09, #22
01930     37 7D 02 F1 | 	add	local09, local02
01934     02 7C 66 F0 | 	shl	local09, #2
01938     3E 79 02 F1 | 	add	local07, local09
0193c     01 78 06 F1 | 	add	local07, #1
01940     3B 79 62 FC | 	wrlong	local07, local06
01944     01 74 06 F1 | 	add	local05, #1
01948     08 74 5E F2 | 	cmps	local05, #8 wcz
0194c     94 FF 9F CD |  if_b	jmp	#LR__0021
01950     07 00 00 FF 
01954     0C FB 05 F1 | 	add	objptr, ##3852
01958     FD 6C 02 FB | 	rdlong	local01, objptr
0195c     C0 6D 06 F1 | 	add	local01, #448
01960     FD 6C 62 FC | 	wrlong	local01, objptr
01964     07 00 00 FF 
01968     0C FB 85 F1 | 	sub	objptr, ##3852
0196c     01 6E 06 F1 | 	add	local02, #1
01970     04 6E 5E F2 | 	cmps	local02, #4 wcz
01974     68 FF 9F CD |  if_b	jmp	#LR__0020
01978                 | LR__0022
01978                 | ' 
01978                 | ' ' add 6 empty lines over the scope area
01978                 | ' 
01978                 | ' for i=412 to 417 : dlcopy(i)=0 : next i
01978     9C 6F 06 F6 | 	mov	local02, #412
0197c     AC E6 9F FE | 	loc	pa,	#(@LR__0024-@LR__0023)
01980     93 00 A0 FD | 	call	#FCACHE_LOAD_
01984                 | LR__0023
01984     37 71 02 F6 | 	mov	local03, local02
01988     02 70 66 F0 | 	shl	local03, #2
0198c     02 00 00 FF 
01990     2C FB 05 F1 | 	add	objptr, ##1324
01994     FD 70 02 F1 | 	add	local03, objptr
01998     38 01 68 FC | 	wrlong	#0, local03
0199c     01 6E 06 F1 | 	add	local02, #1
019a0     A2 6F 1E F2 | 	cmp	local02, #418 wcz
019a4     02 00 00 FF 
019a8     2C FB 85 F1 | 	sub	objptr, ##1324
019ac     D4 FF 9F CD |  if_b	jmp	#LR__0023
019b0                 | LR__0024
019b0     07 00 00 FF 
019b4     0C FB 05 F1 | 	add	objptr, ##3852
019b8     C8 03 80 FF 
019bc     FD 00 68 FC | 	wrlong	##495616, objptr
019c0     07 00 00 FF 
019c4     0C FB 85 F1 | 	sub	objptr, ##3852
019c8                 | ' 
019c8                 | ' ' the scope area, 4 bpp graphics
019c8                 | ' 
019c8                 | ' address=$79000   
019c8                 | ' 
019c8                 | ' for i=418 to 481: dlcopy(i)= ((address+448*(i-416)) shl 12) + %1010 : next i
019c8     A2 6F 06 F6 | 	mov	local02, #418
019cc     F4 E6 9F FE | 	loc	pa,	#(@LR__0028-@LR__0025)
019d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
019d4                 | LR__0025
019d4     37 71 02 F6 | 	mov	local03, local02
019d8     02 70 66 F0 | 	shl	local03, #2
019dc     02 00 00 FF 
019e0     2C FB 05 F1 | 	add	objptr, ##1324
019e4     FD 70 02 F1 | 	add	local03, objptr
019e8     04 00 00 FF 
019ec     E0 FB 05 F1 | 	add	objptr, ##2528
019f0     FD 7A 02 FB | 	rdlong	local08, objptr
019f4     07 00 00 FF 
019f8     0C FB 85 F1 | 	sub	objptr, ##3852
019fc     37 7F 02 F6 | 	mov	local10, local02
01a00     A0 7F 86 F1 | 	sub	local10, #416
01a04     3F 73 02 F6 | 	mov	local04, local10
01a08     03 72 66 F0 | 	shl	local04, #3
01a0c     3F 73 82 F1 | 	sub	local04, local10
01a10     06 72 66 F0 | 	shl	local04, #6
01a14     39 7B 02 F1 | 	add	local08, local04
01a18     0C 7A 66 F0 | 	shl	local08, #12
01a1c     0A 7A 06 F1 | 	add	local08, #10
01a20     38 7B 62 FC | 	wrlong	local08, local03
01a24     01 6E 06 F1 | 	add	local02, #1
01a28     E2 6F 1E F2 | 	cmp	local02, #482 wcz
01a2c     A4 FF 9F CD |  if_b	jmp	#LR__0025
01a30                 | ' 
01a30                 | ' ' add 6 empty lines under the scope area
01a30                 | ' 
01a30                 | ' for i=482 to 487 : dlcopy(i)=0 : next i
01a30     E2 6F 06 F6 | 	mov	local02, #482
01a34                 | LR__0026
01a34     37 71 02 F6 | 	mov	local03, local02
01a38     02 70 66 F0 | 	shl	local03, #2
01a3c     02 00 00 FF 
01a40     2C FB 05 F1 | 	add	objptr, ##1324
01a44     FD 70 02 F1 | 	add	local03, objptr
01a48     38 01 68 FC | 	wrlong	#0, local03
01a4c     01 6E 06 F1 | 	add	local02, #1
01a50     E8 6F 1E F2 | 	cmp	local02, #488 wcz
01a54     02 00 00 FF 
01a58     2C FB 85 F1 | 	sub	objptr, ##1324
01a5c     D4 FF 9F CD |  if_b	jmp	#LR__0026
01a60                 | ' 
01a60                 | ' ' 22 standard border lines at bottom
01a60                 | ' 
01a60                 | ' for i=520 to 541 : dlcopy(i)=0 : next i
01a60     01 00 00 FF 
01a64     08 6E 06 F6 | 	mov	local02, ##520
01a68                 | LR__0027
01a68     37 71 02 F6 | 	mov	local03, local02
01a6c     02 70 66 F0 | 	shl	local03, #2
01a70     02 00 00 FF 
01a74     2C FB 05 F1 | 	add	objptr, ##1324
01a78     FD 70 02 F1 | 	add	local03, objptr
01a7c     38 01 68 FC | 	wrlong	#0, local03
01a80     01 6E 06 F1 | 	add	local02, #1
01a84     01 00 00 FF 
01a88     1E 6E 1E F2 | 	cmp	local02, ##542 wcz
01a8c     02 00 00 FF 
01a90     2C FB 85 F1 | 	sub	objptr, ##1324
01a94     D0 FF 9F CD |  if_b	jmp	#LR__0027
01a98                 | LR__0028
01a98     02 00 00 FF 
01a9c     2C FB 05 F1 | 	add	objptr, ##1324
01aa0     FD 5E 02 F6 | 	mov	arg01, objptr
01aa4     02 00 00 FF 
01aa8     2C FB 85 F1 | 	sub	objptr, ##1324
01aac     D4 ED BF FD | 	call	#_addr
01ab0     1C FA 05 F1 | 	add	objptr, #28
01ab4     FD 18 62 FC | 	wrlong	result1, objptr
01ab8     1C FA 85 F1 | 	sub	objptr, #28
01abc     B3 03 80 FF 
01ac0     FD 00 68 FC | 	wrlong	##484864, objptr
01ac4     9A 5E 06 F6 | 	mov	arg01, #154
01ac8     93 60 06 F6 | 	mov	arg02, #147
01acc     20 13 B0 FD | 	call	#_hng033rm_spin2_cls
01ad0                 | ' 
01ad0                 | ' ' tell the driver where is the new dl and buffer
01ad0                 | ' 
01ad0                 | ' v030.dl_ptr=addr(dlcopy) 
01ad0                 | ' v030.buf_ptr=$76600
01ad0                 | ' cls
01ad0                 | ' for i=$79000 to $7FFFC step 4 : lpoke i,0 : next i
01ad0     C8 03 00 FF 
01ad4     00 6E 06 F6 | 	mov	local02, ##495616
01ad8     38 E5 9F FE | 	loc	pa,	#(@LR__0030-@LR__0029)
01adc     93 00 A0 FD | 	call	#FCACHE_LOAD_
01ae0                 | LR__0029
01ae0                 | ' asm
01ae0     37 01 68 FC | 	wrlong	#0, local02
01ae4     04 6E 06 F1 | 	add	local02, #4
01ae8     FF 03 00 FF 
01aec     FC 6F 1E F2 | 	cmp	local02, ##524284 wcz
01af0     EC FF 9F ED |  if_be	jmp	#LR__0029
01af4                 | LR__0030
01af4     E4 FA 05 F1 | 	add	objptr, #228
01af8     FD 6C 02 FB | 	rdlong	local01, objptr
01afc     0C FA 85 F1 | 	sub	objptr, #12
01b00     FD 6C 62 FC | 	wrlong	local01, objptr
01b04     D8 FA 85 F1 | 	sub	objptr, #216
01b08     00 5E 06 F6 | 	mov	arg01, #0
01b0c     00 60 06 F6 | 	mov	arg02, #0
01b10     00 62 06 F6 | 	mov	arg03, #0
01b14     00 64 06 F6 | 	mov	arg04, #0
01b18     A4 12 B0 FD | 	call	#_hng033rm_spin2_setcolor
01b1c     01 5E 06 F6 | 	mov	arg01, #1
01b20     00 60 06 F6 | 	mov	arg02, #0
01b24     00 62 06 F6 | 	mov	arg03, #0
01b28     FF 64 06 F6 | 	mov	arg04, #255
01b2c     90 12 B0 FD | 	call	#_hng033rm_spin2_setcolor
01b30     02 5E 06 F6 | 	mov	arg01, #2
01b34     00 60 06 F6 | 	mov	arg02, #0
01b38     FF 62 06 F6 | 	mov	arg03, #255
01b3c     00 64 06 F6 | 	mov	arg04, #0
01b40     7C 12 B0 FD | 	call	#_hng033rm_spin2_setcolor
01b44     03 5E 06 F6 | 	mov	arg01, #3
01b48     FF 60 06 F6 | 	mov	arg02, #255
01b4c     00 62 06 F6 | 	mov	arg03, #0
01b50     00 64 06 F6 | 	mov	arg04, #0
01b54     68 12 B0 FD | 	call	#_hng033rm_spin2_setcolor
01b58     C8 03 80 FF 
01b5c     FD 00 68 FC | 	wrlong	##495616, objptr
01b60     64 5E 06 F6 | 	mov	arg01, #100
01b64     F4 54 B0 FD | 	call	#__system___waitms
01b68     90 FA 05 F1 | 	add	objptr, #144
01b6c     FD E0 68 FC | 	wrlong	#112, objptr
01b70     04 FA 05 F1 | 	add	objptr, #4
01b74     FD 80 68 FC | 	wrlong	#64, objptr
01b78     94 FA 85 F1 | 	sub	objptr, #148
01b7c                 | ' 
01b7c                 | ' v030.putpixel=v030.p4
01b7c                 | ' 
01b7c                 | ' v030.setcolor(0,0,0,0)
01b7c                 | ' v030.setcolor(1,0,0,255)
01b7c                 | ' v030.setcolor(2,0,255,0)
01b7c                 | ' v030.setcolor(3,255,0,0)
01b7c                 | ' v030.buf_ptr=$79000
01b7c                 | ' waitms(100)
01b7c                 | ' v030.cpl=112
01b7c                 | ' v030.lines=64
01b7c                 | ' for i=0 to 100: v030.plot1(i,4,3) : next i
01b7c     00 6E 06 F6 | 	mov	local02, #0
01b80                 | LR__0031
01b80     37 5F 02 F6 | 	mov	arg01, local02
01b84     04 60 06 F6 | 	mov	arg02, #4
01b88     03 62 06 F6 | 	mov	arg03, #3
01b8c     E4 19 B0 FD | 	call	#_hng033rm_spin2_plot1
01b90     01 6E 06 F1 | 	add	local02, #1
01b94     65 6E 5E F2 | 	cmps	local02, #101 wcz
01b98     E4 FF 9F CD |  if_b	jmp	#LR__0031
01b9c     14 5E 06 F6 | 	mov	arg01, #20
01ba0     14 60 06 F6 | 	mov	arg02, #20
01ba4     0A 62 06 F6 | 	mov	arg03, #10
01ba8     01 64 06 F6 | 	mov	arg04, #1
01bac     C4 09 B0 FD | 	call	#_hng033rm_spin2_fcircle
01bb0     48 00 00 FF 
01bb4     D5 63 06 F6 | 	mov	arg03, ##@LR__0506
01bb8     0A 5E 06 F6 | 	mov	arg01, #10
01bbc     0A 60 06 F6 | 	mov	arg02, #10
01bc0     03 64 06 F6 | 	mov	arg04, #3
01bc4     00 66 06 F6 | 	mov	arg05, #0
01bc8     80 0D B0 FD | 	call	#_hng033rm_spin2_outtextxycg
01bcc                 | ' 
01bcc                 | ' 
01bcc                 | ' v030.fcircle(20,20,10,1)
01bcc                 | ' v030.outtextxycg(10,10,"Abcdef",3,0)
01bcc                 | ' for i=1 to 100 : v030.plot1(i,10,3) : next i
01bcc     01 6E 06 F6 | 	mov	local02, #1
01bd0                 | LR__0032
01bd0     37 5F 02 F6 | 	mov	arg01, local02
01bd4     0A 60 06 F6 | 	mov	arg02, #10
01bd8     03 62 06 F6 | 	mov	arg03, #3
01bdc     94 19 B0 FD | 	call	#_hng033rm_spin2_plot1
01be0     01 6E 06 F1 | 	add	local02, #1
01be4     65 6E 1E F2 | 	cmp	local02, #101 wcz
01be8     E4 FF 9F CD |  if_b	jmp	#LR__0032
01bec     00 5E 06 F6 | 	mov	arg01, #0
01bf0     20 60 06 F6 | 	mov	arg02, #32
01bf4     BF 63 06 F6 | 	mov	arg03, #447
01bf8     21 64 06 F6 | 	mov	arg04, #33
01bfc     03 66 06 F6 | 	mov	arg05, #3
01c00                 | ' line(x1,y1,x2,y2,c)
01c00     A0 0A B0 FD | 	call	#_hng033rm_spin2_line
01c04     FA 5E 06 F6 | 	mov	arg01, #250
01c08     0A 60 06 F6 | 	mov	arg02, #10
01c0c     01 62 06 F6 | 	mov	arg03, #1
01c10     60 19 B0 FD | 	call	#_hng033rm_spin2_plot1
01c14     B3 03 80 FF 
01c18     FD 00 68 FC | 	wrlong	##484864, objptr
01c1c     90 FA 05 F1 | 	add	objptr, #144
01c20     FD E0 68 FC | 	wrlong	#112, objptr
01c24                 | ' 
01c24                 | ' return long[@ataripalette+4*color]
01c24     0E 00 00 FF 
01c28     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7256
01c2c     03 81 02 F6 | 	mov	local11, ptr__hng033rm_spin2_dat__
01c30     C4 81 06 F1 | 	add	local11, #452
01c34     40 19 02 FB | 	rdlong	result1, local11
01c38     0E 00 00 FF 
01c3c     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7256
01c40     07 00 00 FF 
01c44     80 FA 05 F1 | 	add	objptr, ##3712
01c48     FD 18 62 FC | 	wrlong	result1, objptr
01c4c     0C 5F 02 F6 | 	mov	arg01, result1
01c50                 | ' 
01c50                 | ' bordercolor:=color
01c50     07 00 00 FF 
01c54     E4 FA 85 F1 | 	sub	objptr, ##3812
01c58     FD 5E 62 FC | 	wrlong	arg01, objptr
01c5c     07 00 00 FF 
01c60     E8 FA 05 F1 | 	add	objptr, ##3816
01c64     FD 00 69 FC | 	wrlong	#128, objptr
01c68     04 FA 05 F1 | 	add	objptr, #4
01c6c     FD 7A 68 FC | 	wrlong	#61, objptr
01c70     04 FA 05 F1 | 	add	objptr, #4
01c74     FD 78 68 FC | 	wrlong	#60, objptr
01c78     04 FA 05 F1 | 	add	objptr, #4
01c7c     FD 76 68 FC | 	wrlong	#59, objptr
01c80     04 FA 05 F1 | 	add	objptr, #4
01c84     FD 74 68 FC | 	wrlong	#58, objptr
01c88     04 FA 05 F1 | 	add	objptr, #4
01c8c     FD 06 68 FC | 	wrlong	#3, objptr
01c90     48 00 00 FF 
01c94     DC 6D 06 F6 | 	mov	local01, ##@LR__0507
01c98     01 00 00 FF 
01c9c     AC FB 05 F1 | 	add	objptr, ##940
01ca0     FD 6C 62 FC | 	wrlong	local01, objptr
01ca4     48 00 00 FF 
01ca8     F3 6D 06 F6 | 	mov	local01, ##@LR__0508
01cac     04 FA 05 F1 | 	add	objptr, #4
01cb0     FD 6C 62 FC | 	wrlong	local01, objptr
01cb4     09 00 00 FF 
01cb8     D8 FA 85 F1 | 	sub	objptr, ##4824
01cbc                 | ' 
01cbc                 | ' emptystr$="                      "
01cbc                 | ' ss$=""
01cbc                 | ' for i=1 to 31 : ss$=ss$+chr$(i) :next i
01cbc     01 6E 06 F6 | 	mov	local02, #1
01cc0                 | LR__0033
01cc0     09 00 00 FF 
01cc4     D8 FA 05 F1 | 	add	objptr, ##4824
01cc8     FD 6C 02 FB | 	rdlong	local01, objptr
01ccc     09 00 00 FF 
01cd0     D8 FA 85 F1 | 	sub	objptr, ##4824
01cd4     37 5F 02 F6 | 	mov	arg01, local02
01cd8     80 5A B0 FD | 	call	#__system__Chr_S
01cdc     0C 61 02 F6 | 	mov	arg02, result1
01ce0     36 5F 02 F6 | 	mov	arg01, local01
01ce4     E4 51 B0 FD | 	call	#__system___string_concat
01ce8     0C 6D 02 F6 | 	mov	local01, result1
01cec     09 00 00 FF 
01cf0     D8 FA 05 F1 | 	add	objptr, ##4824
01cf4     FD 6C 62 FC | 	wrlong	local01, objptr
01cf8     09 00 00 FF 
01cfc     D8 FA 85 F1 | 	sub	objptr, ##4824
01d00     01 6E 06 F1 | 	add	local02, #1
01d04     20 6E 1E F2 | 	cmp	local02, #32 wcz
01d08     B4 FF 9F CD |  if_b	jmp	#LR__0033
01d0c     02 5F 02 F6 | 	mov	arg01, ptr__dat__
01d10     70 EB BF FD | 	call	#_addr
01d14     09 00 00 FF 
01d18     DC FA 05 F1 | 	add	objptr, ##4828
01d1c     FD 18 62 FC | 	wrlong	result1, objptr
01d20     0C 5F 02 F6 | 	mov	arg01, result1
01d24     00 60 06 F6 | 	mov	arg02, #0
01d28     01 00 00 FF 
01d2c     B0 FB 85 F1 | 	sub	objptr, ##944
01d30     DC 2A B0 FD | 	call	#_trackerplayer_spin2_initModule
01d34     01 60 06 F6 | 	mov	arg02, #1
01d38                 | ' 
01d38                 | ' ''---------- Set the (x,y) position of cursor
01d38                 | ' 
01d38                 | ' cursor_x:=x
01d38     07 00 00 FF 
01d3c     F8 FA 85 F1 | 	sub	objptr, ##3832
01d40     FD 02 48 FC | 	wrbyte	#1, objptr
01d44                 | ' cursor_y:=y
01d44     01 FA 05 F1 | 	add	objptr, #1
01d48     FD 02 48 FC | 	wrbyte	#1, objptr
01d4c                 | ' 
01d4c                 | ' 
01d4c                 | ' ma=addr(module)
01d4c                 | ' tracker.initmodule(ma,0)
01d4c                 | ' 
01d4c                 | ' position 1,1 :for i=ma to ma+19 : print chr$(peek(i)); : next i
01d4c     09 00 00 FF 
01d50     A7 FA 05 F1 | 	add	objptr, ##4775
01d54     FD 6E 02 FB | 	rdlong	local02, objptr
01d58     37 83 02 F6 | 	mov	local12, local02
01d5c     09 00 00 FF 
01d60     DC FA 85 F1 | 	sub	objptr, ##4828
01d64     14 82 06 F1 | 	add	local12, #20
01d68                 | LR__0034
01d68     41 6F 5A F2 | 	cmps	local02, local12 wcz
01d6c     40 00 90 3D |  if_ae	jmp	#LR__0035
01d70     00 5E 06 F6 | 	mov	arg01, #0
01d74     78 68 B0 FD | 	call	#__system___getiolock_0150
01d78     0C 5F 02 F6 | 	mov	arg01, result1
01d7c     10 51 B0 FD | 	call	#__system___lockmem
01d80                 | ' asm
01d80     37 19 C2 FA | 	rdbyte	result1, local02
01d84                 | ' return r
01d84     0C 61 02 F6 | 	mov	arg02, result1
01d88     07 60 46 F7 | 	zerox	arg02, #7
01d8c     00 5E 06 F6 | 	mov	arg01, #0
01d90     00 62 06 F6 | 	mov	arg03, #0
01d94     68 54 B0 FD | 	call	#__system___basic_print_char
01d98     00 5E 06 F6 | 	mov	arg01, #0
01d9c     50 68 B0 FD | 	call	#__system___getiolock_0150
01da0     0C 01 68 FC | 	wrlong	#0, result1
01da4     00 18 06 F6 | 	mov	result1, #0
01da8     01 6E 06 F1 | 	add	local02, #1
01dac     B8 FF 9F FD | 	jmp	#LR__0034
01db0                 | LR__0035
01db0     09 00 00 FF 
01db4     E0 FA 05 F1 | 	add	objptr, ##4832
01db8     FD 1E 68 FC | 	wrlong	#15, objptr
01dbc                 | ' samples=15: if peek(ma+1080)=asc("M") and peek(ma+1082)=asc("K") then samples=31
01dbc     00 6C 06 F6 | 	mov	local01, #0
01dc0     04 FA 85 F1 | 	sub	objptr, #4
01dc4     FD 5E 02 FB | 	rdlong	arg01, objptr
01dc8     02 00 00 FF 
01dcc     38 5E 06 F1 | 	add	arg01, ##1080
01dd0                 | ' asm
01dd0     2F 71 C2 FA | 	rdbyte	local03, arg01
01dd4                 | ' return r
01dd4     07 70 46 F7 | 	zerox	local03, #7
01dd8     4D 70 0E F2 | 	cmp	local03, #77 wz
01ddc     01 6C 66 A6 |  if_e	neg	local01, #1
01de0     00 7A 06 F6 | 	mov	local08, #0
01de4     FD 5E 02 FB | 	rdlong	arg01, objptr
01de8     09 00 00 FF 
01dec     DC FA 85 F1 | 	sub	objptr, ##4828
01df0     02 00 00 FF 
01df4     3A 5E 06 F1 | 	add	arg01, ##1082
01df8                 | ' asm
01df8     2F 19 C2 FA | 	rdbyte	result1, arg01
01dfc                 | ' return r
01dfc     0C 79 02 F6 | 	mov	local07, result1
01e00     07 78 46 F7 | 	zerox	local07, #7
01e04     4B 78 0E F2 | 	cmp	local07, #75 wz
01e08     01 7A 66 A6 |  if_e	neg	local08, #1
01e0c     3D 6D CA F7 | 	test	local01, local08 wz
01e10     09 00 00 5F 
01e14     E0 FA 05 51 |  if_ne	add	objptr, ##4832
01e18     FD 3E 68 5C |  if_ne	wrlong	#31, objptr
01e1c     09 00 00 5F 
01e20     E0 FA 85 51 |  if_ne	sub	objptr, ##4832
01e24     02 60 06 F6 | 	mov	arg02, #2
01e28                 | ' 
01e28                 | ' ''---------- Set the (x,y) position of cursor
01e28                 | ' 
01e28                 | ' cursor_x:=x
01e28     34 FA 05 F1 | 	add	objptr, #52
01e2c     FD 02 48 FC | 	wrbyte	#1, objptr
01e30                 | ' cursor_y:=y
01e30     01 FA 05 F1 | 	add	objptr, #1
01e34     FD 04 48 FC | 	wrbyte	#2, objptr
01e38     35 FA 85 F1 | 	sub	objptr, #53
01e3c                 | ' position 1,2 : print samples;" ";"samples module"
01e3c     00 5E 06 F6 | 	mov	arg01, #0
01e40     AC 67 B0 FD | 	call	#__system___getiolock_0150
01e44     0C 5F 02 F6 | 	mov	arg01, result1
01e48     44 50 B0 FD | 	call	#__system___lockmem
01e4c     00 18 06 F6 | 	mov	result1, #0
01e50     09 00 00 FF 
01e54     E0 FA 05 F1 | 	add	objptr, ##4832
01e58     FD 60 02 FB | 	rdlong	arg02, objptr
01e5c     09 00 00 FF 
01e60     E0 FA 85 F1 | 	sub	objptr, ##4832
01e64     00 5E 06 F6 | 	mov	arg01, #0
01e68     00 62 06 F6 | 	mov	arg03, #0
01e6c     0A 64 06 F6 | 	mov	arg04, #10
01e70     20 54 B0 FD | 	call	#__system___basic_print_integer
01e74     48 00 00 FF 
01e78     F4 61 06 F6 | 	mov	arg02, ##@LR__0509
01e7c     00 5E 06 F6 | 	mov	arg01, #0
01e80     00 62 06 F6 | 	mov	arg03, #0
01e84     C4 53 B0 FD | 	call	#__system___basic_print_string
01e88     48 00 00 FF 
01e8c     F6 61 06 F6 | 	mov	arg02, ##@LR__0510
01e90     00 5E 06 F6 | 	mov	arg01, #0
01e94     00 62 06 F6 | 	mov	arg03, #0
01e98     B0 53 B0 FD | 	call	#__system___basic_print_string
01e9c     00 5E 06 F6 | 	mov	arg01, #0
01ea0     0A 60 06 F6 | 	mov	arg02, #10
01ea4     00 62 06 F6 | 	mov	arg03, #0
01ea8     54 53 B0 FD | 	call	#__system___basic_print_char
01eac     01 18 06 F6 | 	mov	result1, #1
01eb0     00 5E 06 F6 | 	mov	arg01, #0
01eb4     38 67 B0 FD | 	call	#__system___getiolock_0150
01eb8     0C 01 68 FC | 	wrlong	#0, result1
01ebc     00 18 06 F6 | 	mov	result1, #0
01ec0     09 00 00 FF 
01ec4     DC FA 05 F1 | 	add	objptr, ##4828
01ec8     FD 5E 02 FB | 	rdlong	arg01, objptr
01ecc     04 FA 05 F1 | 	add	objptr, #4
01ed0     FD 60 02 FB | 	rdlong	arg02, objptr
01ed4     09 00 00 FF 
01ed8     E0 FA 85 F1 | 	sub	objptr, ##4832
01edc     40 EC BF FD | 	call	#_getinfo
01ee0     08 00 00 FF 
01ee4     28 FB 05 F1 | 	add	objptr, ##4392
01ee8     58 4B B0 FD | 	call	#_audio019_spin2_start
01eec     0D 71 02 F6 | 	mov	local03, result2
01ef0     A4 FB 05 F1 | 	add	objptr, #420
01ef4     FD 18 62 FC | 	wrlong	result1, objptr
01ef8     04 FA 05 F1 | 	add	objptr, #4
01efc     FD 70 62 FC | 	wrlong	local03, objptr
01f00     14 FA 05 F1 | 	add	objptr, #20
01f04     FD 00 68 FC | 	wrlong	#0, objptr
01f08     04 FA 05 F1 | 	add	objptr, #4
01f0c     FD 00 68 FC | 	wrlong	#0, objptr
01f10     04 FA 05 F1 | 	add	objptr, #4
01f14     FD 00 68 FC | 	wrlong	#0, objptr
01f18     04 FA 05 F1 | 	add	objptr, #4
01f1c     FD 00 68 FC | 	wrlong	#0, objptr
01f20     09 00 00 FF 
01f24     F0 FA 85 F1 | 	sub	objptr, ##4848
01f28                 | ' getinfo(ma,samples)
01f28                 | ' 
01f28                 | ' cog,base=paula.start()
01f28                 | ' 
01f28                 | ' old1=0 : old2=0 :old3=0 : old4=0
01f28                 | ' 
01f28                 | ' 
01f28                 | ' 
01f28                 | ' 'position 0,26 : v030.writeln(ss$)
01f28                 | ' 'print"123456789012345678901234567890"
01f28                 | ' do
01f28                 | LR__0036
01f28     01 5E 06 F6 | 	mov	arg01, #1
01f2c     F8 0D B0 FD | 	call	#_hng033rm_spin2_waitvbl
01f30     07 00 00 FF 
01f34     2C FB 05 F1 | 	add	objptr, ##3884
01f38     B4 2F B0 FD | 	call	#_trackerplayer_spin2_tick
01f3c     07 00 00 FF 
01f40     2C FB 85 F1 | 	sub	objptr, ##3884
01f44     1B 18 62 FD | 	getrnd	result1
01f48     0C 99 02 F6 | 	mov	muldiva_, result1
01f4c     01 00 00 FF 
01f50     1C 9A 06 F6 | 	mov	muldivb_, ##540
01f54     C2 00 A0 FD | 	call	#unsdivide_
01f58     09 00 00 FF 
01f5c     F4 FA 05 F1 | 	add	objptr, ##4852
01f60     FD 98 62 FC | 	wrlong	muldiva_, objptr
01f64                 | '     
01f64                 | ' '    dlentry=lpeek(dltest) : for i=0 to 539:   rr=(2*i) mod 540+(2*i)/ 540 : lpoke dltest+4*i, dlcopy(rr) :next i 
01f64                 | '      
01f64                 | '     if tracker.trigger(0)<>old1 then 
01f64     D2 FB 85 F1 | 	sub	objptr, #466
01f68     FD 6C C2 FA | 	rdbyte	local01, objptr
01f6c     C2 FB 05 F1 | 	add	objptr, #450
01f70     FD 76 02 FB | 	rdlong	local06, objptr
01f74     09 00 00 FF 
01f78     E4 FA 85 F1 | 	sub	objptr, ##4836
01f7c     3B 6D 0A F2 | 	cmp	local01, local06 wz
01f80     8C 00 90 AD |  if_e	jmp	#LR__0037
01f84     08 00 00 FF 
01f88     22 FB 05 F1 | 	add	objptr, ##4386
01f8c     FD 6C C2 FA | 	rdbyte	local01, objptr
01f90     C2 FB 05 F1 | 	add	objptr, #450
01f94     FD 6C 62 FC | 	wrlong	local01, objptr
01f98     14 FA 85 F1 | 	sub	objptr, #20
01f9c     FD 5E 02 FB | 	rdlong	arg01, objptr
01fa0     08 5E 06 F1 | 	add	arg01, #8
01fa4     01 00 00 FF 
01fa8     FD FA 85 F1 | 	sub	objptr, ##765
01fac     FD 60 02 FB | 	rdlong	arg02, objptr
01fb0     1E 60 26 F4 | 	bith	arg02, #30
01fb4                 | ' asm
01fb4     2F 61 62 FC | 	wrlong	arg02, arg01
01fb8     01 00 00 FF 
01fbc     FD FA 05 F1 | 	add	objptr, ##765
01fc0     FD 5E 02 FB | 	rdlong	arg01, objptr
01fc4     0C 5E 06 F1 | 	add	arg01, #12
01fc8     01 00 00 FF 
01fcc     E9 FA 85 F1 | 	sub	objptr, ##745
01fd0     FD 60 E2 FA | 	rdword	arg02, objptr
01fd4     08 FA 05 F1 | 	add	objptr, #8
01fd8     FD 78 02 FB | 	rdlong	local07, objptr
01fdc     3C 61 82 F1 | 	sub	arg02, local07
01fe0                 | ' asm
01fe0     2F 61 62 FC | 	wrlong	arg02, arg01
01fe4     01 00 00 FF 
01fe8     E1 FA 05 F1 | 	add	objptr, ##737
01fec     FD 5E 02 FB | 	rdlong	arg01, objptr
01ff0     10 5E 06 F1 | 	add	arg01, #16
01ff4     01 00 00 FF 
01ff8     E9 FA 85 F1 | 	sub	objptr, ##745
01ffc     FD 60 E2 FA | 	rdword	arg02, objptr
02000     07 00 00 FF 
02004     E7 FB 85 F1 | 	sub	objptr, ##4071
02008     0F 60 46 F7 | 	zerox	arg02, #15
0200c                 | ' asm
0200c     2F 61 62 FC | 	wrlong	arg02, arg01
02010                 | LR__0037
02010     09 00 00 FF 
02014     D0 FA 05 F1 | 	add	objptr, ##4816
02018     FD 5E 02 FB | 	rdlong	arg01, objptr
0201c     14 5E 06 F1 | 	add	arg01, #20
02020     01 00 00 FF 
02024     A5 FA 85 F1 | 	sub	objptr, ##677
02028     FD 76 02 FB | 	rdlong	local06, objptr
0202c     10 FA 05 F1 | 	add	objptr, #16
02030     FD 78 02 FB | 	rdlong	local07, objptr
02034     3C 77 02 F1 | 	add	local06, local07
02038     27 FB 85 F1 | 	sub	objptr, #295
0203c     FD 7C 02 FB | 	rdlong	local09, objptr
02040     3E 77 02 FD | 	qmul	local06, local09
02044     18 60 62 FD | 	getqx	arg02
02048                 | ' asm
02048     2F 61 52 FC | 	wrword	arg02, arg01
0204c     01 00 00 FF 
02050     BC FB 05 F1 | 	add	objptr, ##956
02054     FD 5E 02 FB | 	rdlong	arg01, objptr
02058     16 5E 06 F1 | 	add	arg01, #22
0205c                 | ' asm
0205c     0C 00 80 FF 
02060     2F 01 58 FC | 	wrword	##6144, arg01
02064     FD 6C 02 FB | 	rdlong	local01, objptr
02068     18 6C 06 F1 | 	add	local01, #24
0206c     01 00 00 FF 
02070     C5 FA 85 F1 | 	sub	objptr, ##709
02074     FD 76 02 FB | 	rdlong	local06, objptr
02078     10 FA 05 F1 | 	add	objptr, #16
0207c     FD 78 02 FB | 	rdlong	local07, objptr
02080     08 00 00 FF 
02084     1B FA 85 F1 | 	sub	objptr, ##4123
02088     3C 77 02 F1 | 	add	local06, local07
0208c     3B 99 02 F6 | 	mov	muldiva_, local06
02090     02 98 66 F0 | 	shl	muldiva_, #2
02094     3B 99 02 F1 | 	add	muldiva_, local06
02098     01 98 66 F0 | 	shl	muldiva_, #1
0209c     0A 9A 06 F6 | 	mov	muldivb_, #10
020a0     C6 00 A0 FD | 	call	#divide_
020a4                 | ' asm
020a4     36 9B 52 FC | 	wrword	muldivb_, local01
020a8     09 00 00 FF 
020ac     D0 FA 05 F1 | 	add	objptr, ##4816
020b0     FD 5E 02 FB | 	rdlong	arg01, objptr
020b4     1A 5E 06 F1 | 	add	arg01, #26
020b8                 | ' asm
020b8     2F 03 58 FC | 	wrword	#1, arg01
020bc                 | '   
020bc                 | '   
020bc                 | '     dpoke base+20, (tracker.currVolume(0)+tracker.deltavolume(0))*mainvolume
020bc                 | '     dpoke base+22, 8192-2048
020bc                 | '     dpoke base+24, 10*(tracker.currPeriod(0)+tracker.deltaperiod(0))/10
020bc                 | '     dpoke base+26, 1
020bc                 | ' 
020bc                 | '  
020bc                 | '     if tracker.trigger(1) <> old2  then
020bc     AD FB 85 F1 | 	sub	objptr, #429
020c0     FD 6C C2 FA | 	rdbyte	local01, objptr
020c4     C5 FB 05 F1 | 	add	objptr, #453
020c8     FD 76 02 FB | 	rdlong	local06, objptr
020cc     09 00 00 FF 
020d0     E8 FA 85 F1 | 	sub	objptr, ##4840
020d4     3B 6D 0A F2 | 	cmp	local01, local06 wz
020d8     9C 00 90 AD |  if_e	jmp	#LR__0038
020dc     08 00 00 FF 
020e0     23 FB 05 F1 | 	add	objptr, ##4387
020e4     FD 6C C2 FA | 	rdbyte	local01, objptr
020e8     C5 FB 05 F1 | 	add	objptr, #453
020ec     FD 6C 62 FC | 	wrlong	local01, objptr
020f0     18 FA 85 F1 | 	sub	objptr, #24
020f4     FD 5E 02 FB | 	rdlong	arg01, objptr
020f8     28 5E 06 F1 | 	add	arg01, #40
020fc     01 00 00 FF 
02100     F9 FA 85 F1 | 	sub	objptr, ##761
02104     FD 60 02 FB | 	rdlong	arg02, objptr
02108     1E 60 26 F4 | 	bith	arg02, #30
0210c                 | ' asm
0210c     2F 61 62 FC | 	wrlong	arg02, arg01
02110     20 5E 06 F6 | 	mov	arg01, #32
02114     01 00 00 FF 
02118     F9 FA 05 F1 | 	add	objptr, ##761
0211c     FD 76 02 FB | 	rdlong	local06, objptr
02120     3B 5F 02 F1 | 	add	arg01, local06
02124     0C 5E 06 F1 | 	add	arg01, #12
02128     01 00 00 FF 
0212c     E7 FA 85 F1 | 	sub	objptr, ##743
02130     FD 60 E2 FA | 	rdword	arg02, objptr
02134     0A FA 05 F1 | 	add	objptr, #10
02138     FD 78 02 FB | 	rdlong	local07, objptr
0213c     3C 61 82 F1 | 	sub	arg02, local07
02140                 | ' asm
02140     2F 61 62 FC | 	wrlong	arg02, arg01
02144     20 5E 06 F6 | 	mov	arg01, #32
02148     01 00 00 FF 
0214c     DD FA 05 F1 | 	add	objptr, ##733
02150     FD 76 02 FB | 	rdlong	local06, objptr
02154     3B 5F 02 F1 | 	add	arg01, local06
02158     10 5E 06 F1 | 	add	arg01, #16
0215c     01 00 00 FF 
02160     E7 FA 85 F1 | 	sub	objptr, ##743
02164     FD 60 E2 FA | 	rdword	arg02, objptr
02168     07 00 00 FF 
0216c     E9 FB 85 F1 | 	sub	objptr, ##4073
02170     0F 60 46 F7 | 	zerox	arg02, #15
02174                 | ' asm
02174     2F 61 62 FC | 	wrlong	arg02, arg01
02178                 | LR__0038
02178     20 5E 06 F6 | 	mov	arg01, #32
0217c     09 00 00 FF 
02180     D0 FA 05 F1 | 	add	objptr, ##4816
02184     FD 76 02 FB | 	rdlong	local06, objptr
02188     3B 5F 02 F1 | 	add	arg01, local06
0218c     14 5E 06 F1 | 	add	arg01, #20
02190     01 00 00 FF 
02194     A1 FA 85 F1 | 	sub	objptr, ##673
02198     FD 76 02 FB | 	rdlong	local06, objptr
0219c     10 FA 05 F1 | 	add	objptr, #16
021a0     FD 78 02 FB | 	rdlong	local07, objptr
021a4     3C 77 02 F1 | 	add	local06, local07
021a8     2B FB 85 F1 | 	sub	objptr, #299
021ac     FD 7C 02 FB | 	rdlong	local09, objptr
021b0     3E 77 02 FD | 	qmul	local06, local09
021b4     18 60 62 FD | 	getqx	arg02
021b8                 | ' asm
021b8     2F 61 52 FC | 	wrword	arg02, arg01
021bc     20 5E 06 F6 | 	mov	arg01, #32
021c0     01 00 00 FF 
021c4     BC FB 05 F1 | 	add	objptr, ##956
021c8     FD 76 02 FB | 	rdlong	local06, objptr
021cc     3B 5F 02 F1 | 	add	arg01, local06
021d0     16 5E 06 F1 | 	add	arg01, #22
021d4                 | ' asm
021d4     14 00 80 FF 
021d8     2F 01 58 FC | 	wrword	##10240, arg01
021dc     20 6C 06 F6 | 	mov	local01, #32
021e0     FD 76 02 FB | 	rdlong	local06, objptr
021e4     3B 6D 02 F1 | 	add	local01, local06
021e8     18 6C 06 F1 | 	add	local01, #24
021ec     01 00 00 FF 
021f0     C1 FA 85 F1 | 	sub	objptr, ##705
021f4     FD 76 02 FB | 	rdlong	local06, objptr
021f8     10 FA 05 F1 | 	add	objptr, #16
021fc     FD 78 02 FB | 	rdlong	local07, objptr
02200     08 00 00 FF 
02204     1F FA 85 F1 | 	sub	objptr, ##4127
02208     3C 77 02 F1 | 	add	local06, local07
0220c     3B 99 02 F6 | 	mov	muldiva_, local06
02210     02 98 66 F0 | 	shl	muldiva_, #2
02214     3B 99 02 F1 | 	add	muldiva_, local06
02218     01 98 66 F0 | 	shl	muldiva_, #1
0221c     0A 9A 06 F6 | 	mov	muldivb_, #10
02220     C6 00 A0 FD | 	call	#divide_
02224                 | ' asm
02224     36 9B 52 FC | 	wrword	muldivb_, local01
02228     20 5E 06 F6 | 	mov	arg01, #32
0222c     09 00 00 FF 
02230     D0 FA 05 F1 | 	add	objptr, ##4816
02234     FD 76 02 FB | 	rdlong	local06, objptr
02238     3B 5F 02 F1 | 	add	arg01, local06
0223c     1A 5E 06 F1 | 	add	arg01, #26
02240                 | ' asm
02240     2F 03 58 FC | 	wrword	#1, arg01
02244                 | '       
02244                 | '     dpoke 32+base+20, (tracker.currVolume(1)+tracker.deltavolume(1))*mainvolume
02244                 | '     dpoke 32+base+22, 8192+2048
02244                 | '     dpoke 32+base+24, 10*(tracker.currPeriod(1)+tracker.deltaperiod(1))/10
02244                 | '     dpoke 32+base+26, 1
02244                 | ' 
02244                 | '    if tracker.trigger(2) <> old3  then
02244     AC FB 85 F1 | 	sub	objptr, #428
02248     FD 6C C2 FA | 	rdbyte	local01, objptr
0224c     C8 FB 05 F1 | 	add	objptr, #456
02250     FD 76 02 FB | 	rdlong	local06, objptr
02254     09 00 00 FF 
02258     EC FA 85 F1 | 	sub	objptr, ##4844
0225c     3B 6D 0A F2 | 	cmp	local01, local06 wz
02260     9C 00 90 AD |  if_e	jmp	#LR__0039
02264     08 00 00 FF 
02268     24 FB 05 F1 | 	add	objptr, ##4388
0226c     FD 6C C2 FA | 	rdbyte	local01, objptr
02270     C8 FB 05 F1 | 	add	objptr, #456
02274     FD 6C 62 FC | 	wrlong	local01, objptr
02278     1C FA 85 F1 | 	sub	objptr, #28
0227c     FD 5E 02 FB | 	rdlong	arg01, objptr
02280     48 5E 06 F1 | 	add	arg01, #72
02284     01 00 00 FF 
02288     F5 FA 85 F1 | 	sub	objptr, ##757
0228c     FD 60 02 FB | 	rdlong	arg02, objptr
02290     1E 60 26 F4 | 	bith	arg02, #30
02294                 | ' asm
02294     2F 61 62 FC | 	wrlong	arg02, arg01
02298     40 5E 06 F6 | 	mov	arg01, #64
0229c     01 00 00 FF 
022a0     F5 FA 05 F1 | 	add	objptr, ##757
022a4     FD 76 02 FB | 	rdlong	local06, objptr
022a8     3B 5F 02 F1 | 	add	arg01, local06
022ac     0C 5E 06 F1 | 	add	arg01, #12
022b0     01 00 00 FF 
022b4     E5 FA 85 F1 | 	sub	objptr, ##741
022b8     FD 60 E2 FA | 	rdword	arg02, objptr
022bc     0C FA 05 F1 | 	add	objptr, #12
022c0     FD 78 02 FB | 	rdlong	local07, objptr
022c4     3C 61 82 F1 | 	sub	arg02, local07
022c8                 | ' asm
022c8     2F 61 62 FC | 	wrlong	arg02, arg01
022cc     40 5E 06 F6 | 	mov	arg01, #64
022d0     01 00 00 FF 
022d4     D9 FA 05 F1 | 	add	objptr, ##729
022d8     FD 76 02 FB | 	rdlong	local06, objptr
022dc     3B 5F 02 F1 | 	add	arg01, local06
022e0     10 5E 06 F1 | 	add	arg01, #16
022e4     01 00 00 FF 
022e8     E5 FA 85 F1 | 	sub	objptr, ##741
022ec     FD 60 E2 FA | 	rdword	arg02, objptr
022f0     07 00 00 FF 
022f4     EB FB 85 F1 | 	sub	objptr, ##4075
022f8     0F 60 46 F7 | 	zerox	arg02, #15
022fc                 | ' asm
022fc     2F 61 62 FC | 	wrlong	arg02, arg01
02300                 | LR__0039
02300     40 5E 06 F6 | 	mov	arg01, #64
02304     09 00 00 FF 
02308     D0 FA 05 F1 | 	add	objptr, ##4816
0230c     FD 76 02 FB | 	rdlong	local06, objptr
02310     3B 5F 02 F1 | 	add	arg01, local06
02314     14 5E 06 F1 | 	add	arg01, #20
02318     01 00 00 FF 
0231c     9D FA 85 F1 | 	sub	objptr, ##669
02320     FD 76 02 FB | 	rdlong	local06, objptr
02324     10 FA 05 F1 | 	add	objptr, #16
02328     FD 78 02 FB | 	rdlong	local07, objptr
0232c     3C 77 02 F1 | 	add	local06, local07
02330     2F FB 85 F1 | 	sub	objptr, #303
02334     FD 7C 02 FB | 	rdlong	local09, objptr
02338     3E 77 02 FD | 	qmul	local06, local09
0233c     18 60 62 FD | 	getqx	arg02
02340                 | ' asm
02340     2F 61 52 FC | 	wrword	arg02, arg01
02344     40 5E 06 F6 | 	mov	arg01, #64
02348     01 00 00 FF 
0234c     BC FB 05 F1 | 	add	objptr, ##956
02350     FD 76 02 FB | 	rdlong	local06, objptr
02354     3B 5F 02 F1 | 	add	arg01, local06
02358     16 5E 06 F1 | 	add	arg01, #22
0235c                 | ' asm
0235c     14 00 80 FF 
02360     2F 01 58 FC | 	wrword	##10240, arg01
02364     40 6C 06 F6 | 	mov	local01, #64
02368     FD 76 02 FB | 	rdlong	local06, objptr
0236c     3B 6D 02 F1 | 	add	local01, local06
02370     18 6C 06 F1 | 	add	local01, #24
02374     01 00 00 FF 
02378     BD FA 85 F1 | 	sub	objptr, ##701
0237c     FD 76 02 FB | 	rdlong	local06, objptr
02380     10 FA 05 F1 | 	add	objptr, #16
02384     FD 78 02 FB | 	rdlong	local07, objptr
02388     08 00 00 FF 
0238c     23 FA 85 F1 | 	sub	objptr, ##4131
02390     3C 77 02 F1 | 	add	local06, local07
02394     3B 99 02 F6 | 	mov	muldiva_, local06
02398     02 98 66 F0 | 	shl	muldiva_, #2
0239c     3B 99 02 F1 | 	add	muldiva_, local06
023a0     01 98 66 F0 | 	shl	muldiva_, #1
023a4     0A 9A 06 F6 | 	mov	muldivb_, #10
023a8     C6 00 A0 FD | 	call	#divide_
023ac                 | ' asm
023ac     36 9B 52 FC | 	wrword	muldivb_, local01
023b0     40 5E 06 F6 | 	mov	arg01, #64
023b4     09 00 00 FF 
023b8     D0 FA 05 F1 | 	add	objptr, ##4816
023bc     FD 76 02 FB | 	rdlong	local06, objptr
023c0     3B 5F 02 F1 | 	add	arg01, local06
023c4     1A 5E 06 F1 | 	add	arg01, #26
023c8                 | ' asm
023c8     2F 03 58 FC | 	wrword	#1, arg01
023cc                 | '     
023cc                 | '     dpoke 64+base+20, (tracker.currVolume(2)+tracker.deltavolume(2))*mainvolume
023cc                 | '     dpoke 64+base+22, 8192+2048
023cc                 | '     dpoke 64+base+24, 10*(tracker.currPeriod(2)+tracker.deltaperiod(2))/10
023cc                 | '     dpoke 64+base+26, 1
023cc                 | ' 
023cc                 | '     if tracker.trigger(3) <> old4 then
023cc     AB FB 85 F1 | 	sub	objptr, #427
023d0     FD 6C C2 FA | 	rdbyte	local01, objptr
023d4     CB FB 05 F1 | 	add	objptr, #459
023d8     FD 76 02 FB | 	rdlong	local06, objptr
023dc     09 00 00 FF 
023e0     F0 FA 85 F1 | 	sub	objptr, ##4848
023e4     3B 6D 0A F2 | 	cmp	local01, local06 wz
023e8     9C 00 90 AD |  if_e	jmp	#LR__0040
023ec     08 00 00 FF 
023f0     25 FB 05 F1 | 	add	objptr, ##4389
023f4     FD 6C C2 FA | 	rdbyte	local01, objptr
023f8     CB FB 05 F1 | 	add	objptr, #459
023fc     FD 6C 62 FC | 	wrlong	local01, objptr
02400     20 FA 85 F1 | 	sub	objptr, #32
02404     FD 5E 02 FB | 	rdlong	arg01, objptr
02408     68 5E 06 F1 | 	add	arg01, #104
0240c     01 00 00 FF 
02410     F1 FA 85 F1 | 	sub	objptr, ##753
02414     FD 60 02 FB | 	rdlong	arg02, objptr
02418     1E 60 26 F4 | 	bith	arg02, #30
0241c                 | ' asm
0241c     2F 61 62 FC | 	wrlong	arg02, arg01
02420     60 5E 06 F6 | 	mov	arg01, #96
02424     01 00 00 FF 
02428     F1 FA 05 F1 | 	add	objptr, ##753
0242c     FD 76 02 FB | 	rdlong	local06, objptr
02430     3B 5F 02 F1 | 	add	arg01, local06
02434     0C 5E 06 F1 | 	add	arg01, #12
02438     01 00 00 FF 
0243c     E3 FA 85 F1 | 	sub	objptr, ##739
02440     FD 60 E2 FA | 	rdword	arg02, objptr
02444     0E FA 05 F1 | 	add	objptr, #14
02448     FD 78 02 FB | 	rdlong	local07, objptr
0244c     3C 61 82 F1 | 	sub	arg02, local07
02450                 | ' asm
02450     2F 61 62 FC | 	wrlong	arg02, arg01
02454     60 5E 06 F6 | 	mov	arg01, #96
02458     01 00 00 FF 
0245c     D5 FA 05 F1 | 	add	objptr, ##725
02460     FD 76 02 FB | 	rdlong	local06, objptr
02464     3B 5F 02 F1 | 	add	arg01, local06
02468     10 5E 06 F1 | 	add	arg01, #16
0246c     01 00 00 FF 
02470     E3 FA 85 F1 | 	sub	objptr, ##739
02474     FD 60 E2 FA | 	rdword	arg02, objptr
02478     07 00 00 FF 
0247c     ED FB 85 F1 | 	sub	objptr, ##4077
02480     0F 60 46 F7 | 	zerox	arg02, #15
02484                 | ' asm
02484     2F 61 62 FC | 	wrlong	arg02, arg01
02488                 | LR__0040
02488     60 5E 06 F6 | 	mov	arg01, #96
0248c     09 00 00 FF 
02490     D0 FA 05 F1 | 	add	objptr, ##4816
02494     FD 76 02 FB | 	rdlong	local06, objptr
02498     3B 5F 02 F1 | 	add	arg01, local06
0249c     14 5E 06 F1 | 	add	arg01, #20
024a0     01 00 00 FF 
024a4     99 FA 85 F1 | 	sub	objptr, ##665
024a8     FD 76 02 FB | 	rdlong	local06, objptr
024ac     10 FA 05 F1 | 	add	objptr, #16
024b0     FD 78 02 FB | 	rdlong	local07, objptr
024b4     3C 77 02 F1 | 	add	local06, local07
024b8     33 FB 85 F1 | 	sub	objptr, #307
024bc     FD 7C 02 FB | 	rdlong	local09, objptr
024c0     3E 77 02 FD | 	qmul	local06, local09
024c4     18 60 62 FD | 	getqx	arg02
024c8                 | ' asm
024c8     2F 61 52 FC | 	wrword	arg02, arg01
024cc     60 5E 06 F6 | 	mov	arg01, #96
024d0     01 00 00 FF 
024d4     BC FB 05 F1 | 	add	objptr, ##956
024d8     FD 76 02 FB | 	rdlong	local06, objptr
024dc     3B 5F 02 F1 | 	add	arg01, local06
024e0     16 5E 06 F1 | 	add	arg01, #22
024e4                 | ' asm
024e4     0C 00 80 FF 
024e8     2F 01 58 FC | 	wrword	##6144, arg01
024ec     60 6C 06 F6 | 	mov	local01, #96
024f0     FD 76 02 FB | 	rdlong	local06, objptr
024f4     3B 6D 02 F1 | 	add	local01, local06
024f8     18 6C 06 F1 | 	add	local01, #24
024fc     01 00 00 FF 
02500     B9 FA 85 F1 | 	sub	objptr, ##697
02504     FD 76 02 FB | 	rdlong	local06, objptr
02508     10 FA 05 F1 | 	add	objptr, #16
0250c     FD 78 02 FB | 	rdlong	local07, objptr
02510     08 00 00 FF 
02514     27 FA 85 F1 | 	sub	objptr, ##4135
02518     3C 77 02 F1 | 	add	local06, local07
0251c     3B 99 02 F6 | 	mov	muldiva_, local06
02520     02 98 66 F0 | 	shl	muldiva_, #2
02524     3B 99 02 F1 | 	add	muldiva_, local06
02528     01 98 66 F0 | 	shl	muldiva_, #1
0252c     0A 9A 06 F6 | 	mov	muldivb_, #10
02530     C6 00 A0 FD | 	call	#divide_
02534                 | ' asm
02534     36 9B 52 FC | 	wrword	muldivb_, local01
02538     60 5E 06 F6 | 	mov	arg01, #96
0253c     09 00 00 FF 
02540     D0 FA 05 F1 | 	add	objptr, ##4816
02544     FD 76 02 FB | 	rdlong	local06, objptr
02548     09 00 00 FF 
0254c     D0 FA 85 F1 | 	sub	objptr, ##4816
02550     3B 5F 02 F1 | 	add	arg01, local06
02554     1A 5E 06 F1 | 	add	arg01, #26
02558     01 60 06 F6 | 	mov	arg02, #1
0255c                 | ' asm
0255c     2F 03 58 FC | 	wrword	#1, arg01
02560     48 E3 BF FD | 	call	#_test
02564     C0 F9 9F FD | 	jmp	#LR__0036
02568     AF F0 03 F6 | 	mov	ptra, fp
0256c     BA 00 A0 FD | 	call	#popregs_
02570                 | _program_ret
02570     2D 00 64 FD | 	ret
02574                 | 
02574                 | ' 
02574                 | ' '------------------------------
02574                 | ' 
02574                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
02574                 | _hng033rm_spin2_fcircle
02574     0A 5A 05 F6 | 	mov	COUNT_, #10
02578     B0 00 A0 FD | 	call	#pushregs_
0257c     2F 6D 02 F6 | 	mov	local01, arg01
02580     30 6F 02 F6 | 	mov	local02, arg02
02584     31 71 02 F6 | 	mov	local03, arg03
02588     32 73 02 F6 | 	mov	local04, arg04
0258c                 | ' 
0258c                 | ' d:=5-4*r
0258c     38 75 02 F6 | 	mov	local05, local03
02590     02 74 66 F0 | 	shl	local05, #2
02594     05 76 06 F6 | 	mov	local06, #5
02598     3A 77 82 F1 | 	sub	local06, local05
0259c                 | ' x:=0
0259c     00 78 06 F6 | 	mov	local07, #0
025a0                 | ' y:=r
025a0     38 7B 02 F6 | 	mov	local08, local03
025a4                 | ' da:=(-2*r+5)*4
025a4     FF FF 7F FF 
025a8     FE 71 06 FD | 	qmul	local03, ##-2
025ac     18 7C 62 FD | 	getqx	local09
025b0     05 7C 06 F1 | 	add	local09, #5
025b4     02 7C 66 F0 | 	shl	local09, #2
025b8                 | ' db:=3*4
025b8     0C 7E 06 F6 | 	mov	local10, #12
025bc                 | ' repeat while (x<=y) 
025bc                 | LR__0041
025bc     3D 79 5A F2 | 	cmps	local07, local08 wcz
025c0     D4 00 90 1D |  if_a	jmp	#LR__0043
025c4                 | '   line(x0-x,y0-y,x0+x,y0-y,c)
025c4     36 5F 02 F6 | 	mov	arg01, local01
025c8     3C 5F 82 F1 | 	sub	arg01, local07
025cc     37 61 02 F6 | 	mov	arg02, local02
025d0     3D 61 82 F1 | 	sub	arg02, local08
025d4     36 63 02 F6 | 	mov	arg03, local01
025d8     3C 63 02 F1 | 	add	arg03, local07
025dc     37 65 02 F6 | 	mov	arg04, local02
025e0     3D 65 82 F1 | 	sub	arg04, local08
025e4     39 67 02 F6 | 	mov	arg05, local04
025e8     B8 00 B0 FD | 	call	#_hng033rm_spin2_line
025ec                 | '   line(x0-x,y0+y,x0+x,y0+y,c)
025ec     36 5F 02 F6 | 	mov	arg01, local01
025f0     3C 5F 82 F1 | 	sub	arg01, local07
025f4     37 61 02 F6 | 	mov	arg02, local02
025f8     3D 61 02 F1 | 	add	arg02, local08
025fc     36 63 02 F6 | 	mov	arg03, local01
02600     3C 63 02 F1 | 	add	arg03, local07
02604     37 65 02 F6 | 	mov	arg04, local02
02608     3D 65 02 F1 | 	add	arg04, local08
0260c     39 67 02 F6 | 	mov	arg05, local04
02610     90 00 B0 FD | 	call	#_hng033rm_spin2_line
02614                 | '   line(x0-y,y0-x,x0+y,y0-x,c)
02614     36 5F 02 F6 | 	mov	arg01, local01
02618     3D 5F 82 F1 | 	sub	arg01, local08
0261c     37 61 02 F6 | 	mov	arg02, local02
02620     3C 61 82 F1 | 	sub	arg02, local07
02624     36 63 02 F6 | 	mov	arg03, local01
02628     3D 63 02 F1 | 	add	arg03, local08
0262c     37 65 02 F6 | 	mov	arg04, local02
02630     3C 65 82 F1 | 	sub	arg04, local07
02634     39 67 02 F6 | 	mov	arg05, local04
02638     68 00 B0 FD | 	call	#_hng033rm_spin2_line
0263c                 | '   line(x0-y,y0+x,x0+y,y0+x,c)
0263c     36 5F 02 F6 | 	mov	arg01, local01
02640     3D 5F 82 F1 | 	sub	arg01, local08
02644     37 61 02 F6 | 	mov	arg02, local02
02648     3C 61 02 F1 | 	add	arg02, local07
0264c     36 63 02 F6 | 	mov	arg03, local01
02650     3D 63 02 F1 | 	add	arg03, local08
02654     37 65 02 F6 | 	mov	arg04, local02
02658     3C 65 02 F1 | 	add	arg04, local07
0265c     39 67 02 F6 | 	mov	arg05, local04
02660     40 00 B0 FD | 	call	#_hng033rm_spin2_line
02664                 | '   if d>0 
02664     00 76 5E F2 | 	cmps	local06, #0 wcz
02668     18 00 90 ED |  if_be	jmp	#LR__0042
0266c                 | '     d+=da
0266c     3E 77 02 F1 | 	add	local06, local09
02670                 | '     y-=1
02670     01 7A 86 F1 | 	sub	local08, #1
02674                 | '     x+=1
02674     01 78 06 F1 | 	add	local07, #1
02678                 | '     da+=4*4
02678     10 7C 06 F1 | 	add	local09, #16
0267c                 | '     db+=2*4
0267c     08 7E 06 F1 | 	add	local10, #8
02680                 | '   else
02680     38 FF 9F FD | 	jmp	#LR__0041
02684                 | LR__0042
02684                 | '     d+=db
02684     3F 77 02 F1 | 	add	local06, local10
02688                 | '     x+=1
02688     01 78 06 F1 | 	add	local07, #1
0268c                 | '     da+=2*4
0268c     08 7C 06 F1 | 	add	local09, #8
02690                 | '     db+=2*4
02690     08 7E 06 F1 | 	add	local10, #8
02694     24 FF 9F FD | 	jmp	#LR__0041
02698                 | LR__0043
02698     AF F0 03 F6 | 	mov	ptra, fp
0269c     BA 00 A0 FD | 	call	#popregs_
026a0                 | _hng033rm_spin2_fcircle_ret
026a0     2D 00 64 FD | 	ret
026a4                 | 
026a4                 | ' 
026a4                 | ' pub line(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y
026a4                 | _hng033rm_spin2_line
026a4     12 5A 05 F6 | 	mov	COUNT_, #18
026a8     B0 00 A0 FD | 	call	#pushregs_
026ac     2F 6D 02 F6 | 	mov	local01, arg01
026b0     30 6F 02 F6 | 	mov	local02, arg02
026b4     31 71 02 F6 | 	mov	local03, arg03
026b8     32 73 02 F6 | 	mov	local04, arg04
026bc     33 75 02 F6 | 	mov	local05, arg05
026c0                 | ' 
026c0                 | ' 
026c0                 | ' x:=x1
026c0     36 77 02 F6 | 	mov	local06, local01
026c4                 | ' y:=y1
026c4     37 79 02 F6 | 	mov	local07, local02
026c8                 | ' 
026c8                 | ' if (x1<x2) 
026c8     38 6D 5A F2 | 	cmps	local01, local03 wcz
026cc     10 00 90 3D |  if_ae	jmp	#LR__0044
026d0                 | '   xi:=1
026d0     01 7A 06 F6 | 	mov	local08, #1
026d4                 | '   dx:=x2-x1
026d4     38 7D 02 F6 | 	mov	local09, local03
026d8     36 7D 82 F1 | 	sub	local09, local01
026dc                 | ' else
026dc     0C 00 90 FD | 	jmp	#LR__0045
026e0                 | LR__0044
026e0                 | '   xi:=-1
026e0     01 7A 66 F6 | 	neg	local08, #1
026e4                 | '   dx:=x1-x2
026e4     38 6D 82 F1 | 	sub	local01, local03
026e8     36 7D 02 F6 | 	mov	local09, local01
026ec                 | LR__0045
026ec                 | '   
026ec                 | ' if (y1<y2) 
026ec     39 6F 5A F2 | 	cmps	local02, local04 wcz
026f0     10 00 90 3D |  if_ae	jmp	#LR__0046
026f4                 | '   yi:=1
026f4     01 7E 06 F6 | 	mov	local10, #1
026f8                 | '   dy:=y2-y1
026f8     39 81 02 F6 | 	mov	local11, local04
026fc     37 81 82 F1 | 	sub	local11, local02
02700                 | ' else
02700     0C 00 90 FD | 	jmp	#LR__0047
02704                 | LR__0046
02704                 | '   yi:=-1
02704     01 7E 66 F6 | 	neg	local10, #1
02708                 | '   dy:=y1-y2
02708     39 6F 82 F1 | 	sub	local02, local04
0270c     37 81 02 F6 | 	mov	local11, local02
02710                 | LR__0047
02710                 | ' 
02710                 | ' putpixel(x,y,c)
02710     D8 FA 05 F1 | 	add	objptr, #216
02714     FD 82 02 FB | 	rdlong	local12, objptr
02718     D8 FA 85 F1 | 	sub	objptr, #216
0271c     41 85 02 FB | 	rdlong	local13, local12
02720     04 82 06 F1 | 	add	local12, #4
02724     41 87 02 FB | 	rdlong	local14, local12
02728     3B 5F 02 F6 | 	mov	arg01, local06
0272c     3C 61 02 F6 | 	mov	arg02, local07
02730     3A 63 02 F6 | 	mov	arg03, local05
02734     FD 88 02 F6 | 	mov	local15, objptr
02738     42 FB 01 F6 | 	mov	objptr, local13
0273c     2D 86 62 FD | 	call	local14
02740     44 FB 01 F6 | 	mov	objptr, local15
02744                 | ' 
02744                 | ' if (dx>dy)
02744     40 7D 5A F2 | 	cmps	local09, local11 wcz
02748     7C 00 90 ED |  if_be	jmp	#LR__0051
0274c                 | '   ai:=(dy-dx)*2
0274c     40 8B 02 F6 | 	mov	local16, local11
02750     3E 8B 82 F1 | 	sub	local16, local09
02754     01 8A 66 F0 | 	shl	local16, #1
02758                 | '   bi:=dy*2
02758     01 80 66 F0 | 	shl	local11, #1
0275c     40 8D 02 F6 | 	mov	local17, local11
02760                 | '   d:= bi-dx
02760     46 8F 02 F6 | 	mov	local18, local17
02764     3E 8F 82 F1 | 	sub	local18, local09
02768                 | '   repeat while (x<>x2) 
02768                 | LR__0048
02768     38 77 0A F2 | 	cmp	local06, local03 wz
0276c     D4 00 90 AD |  if_e	jmp	#LR__0056
02770                 | '     if (d>=0) 
02770     00 8E 5E F2 | 	cmps	local18, #0 wcz
02774     10 00 90 CD |  if_b	jmp	#LR__0049
02778                 | '       x+=xi
02778     3D 77 02 F1 | 	add	local06, local08
0277c                 | '       y+=yi
0277c     3F 79 02 F1 | 	add	local07, local10
02780                 | '       d+=ai
02780     45 8F 02 F1 | 	add	local18, local16
02784                 | '     else
02784     08 00 90 FD | 	jmp	#LR__0050
02788                 | LR__0049
02788                 | '       d+=bi
02788     46 8F 02 F1 | 	add	local18, local17
0278c                 | '       x+=xi
0278c     3D 77 02 F1 | 	add	local06, local08
02790                 | LR__0050
02790                 | '     putpixel(x,y,c)
02790     D8 FA 05 F1 | 	add	objptr, #216
02794     FD 82 02 FB | 	rdlong	local12, objptr
02798     D8 FA 85 F1 | 	sub	objptr, #216
0279c     41 85 02 FB | 	rdlong	local13, local12
027a0     04 82 06 F1 | 	add	local12, #4
027a4     41 87 02 FB | 	rdlong	local14, local12
027a8     3B 5F 02 F6 | 	mov	arg01, local06
027ac     3C 61 02 F6 | 	mov	arg02, local07
027b0     3A 63 02 F6 | 	mov	arg03, local05
027b4     FD 88 02 F6 | 	mov	local15, objptr
027b8     42 FB 01 F6 | 	mov	objptr, local13
027bc     2D 86 62 FD | 	call	local14
027c0     44 FB 01 F6 | 	mov	objptr, local15
027c4     A0 FF 9F FD | 	jmp	#LR__0048
027c8                 | ' else
027c8                 | LR__0051
027c8                 | '   ai:=(dx-dy)*2
027c8     3E 8B 02 F6 | 	mov	local16, local09
027cc     40 8B 82 F1 | 	sub	local16, local11
027d0     01 8A 66 F0 | 	shl	local16, #1
027d4                 | '   bi:=dx*2
027d4     01 7C 66 F0 | 	shl	local09, #1
027d8     3E 8D 02 F6 | 	mov	local17, local09
027dc                 | '   d:=bi-dy
027dc     46 8F 02 F6 | 	mov	local18, local17
027e0     40 8F 82 F1 | 	sub	local18, local11
027e4                 | '   repeat while (y<>y2)
027e4                 | LR__0052
027e4     39 79 0A F2 | 	cmp	local07, local04 wz
027e8     58 00 90 AD |  if_e	jmp	#LR__0055
027ec                 | '     if (d>=0)
027ec     00 8E 5E F2 | 	cmps	local18, #0 wcz
027f0     10 00 90 CD |  if_b	jmp	#LR__0053
027f4                 | '       x+=xi
027f4     3D 77 02 F1 | 	add	local06, local08
027f8                 | '       y+=yi
027f8     3F 79 02 F1 | 	add	local07, local10
027fc                 | '       d+=ai
027fc     45 8F 02 F1 | 	add	local18, local16
02800                 | '     else
02800     08 00 90 FD | 	jmp	#LR__0054
02804                 | LR__0053
02804                 | '       d+=bi
02804     46 8F 02 F1 | 	add	local18, local17
02808                 | '       y+=yi
02808     3F 79 02 F1 | 	add	local07, local10
0280c                 | LR__0054
0280c                 | '     putpixel(x, y,c)
0280c     D8 FA 05 F1 | 	add	objptr, #216
02810     FD 82 02 FB | 	rdlong	local12, objptr
02814     D8 FA 85 F1 | 	sub	objptr, #216
02818     41 85 02 FB | 	rdlong	local13, local12
0281c     04 82 06 F1 | 	add	local12, #4
02820     41 87 02 FB | 	rdlong	local14, local12
02824     3B 5F 02 F6 | 	mov	arg01, local06
02828     3C 61 02 F6 | 	mov	arg02, local07
0282c     3A 63 02 F6 | 	mov	arg03, local05
02830     FD 88 02 F6 | 	mov	local15, objptr
02834     42 FB 01 F6 | 	mov	objptr, local13
02838     2D 86 62 FD | 	call	local14
0283c     44 FB 01 F6 | 	mov	objptr, local15
02840     A0 FF 9F FD | 	jmp	#LR__0052
02844                 | LR__0055
02844                 | LR__0056
02844     AF F0 03 F6 | 	mov	ptra, fp
02848     BA 00 A0 FD | 	call	#popregs_
0284c                 | _hng033rm_spin2_line_ret
0284c     2D 00 64 FD | 	ret
02850                 | 
02850                 | ' 
02850                 | ' pub putcharxycg(x,y,achar,f,b) |xx, yy,bb
02850                 | _hng033rm_spin2_putcharxycg
02850     0D 5A 05 F6 | 	mov	COUNT_, #13
02854     B0 00 A0 FD | 	call	#pushregs_
02858     2F 6D 02 F6 | 	mov	local01, arg01
0285c     30 6F 02 F6 | 	mov	local02, arg02
02860     31 71 02 F6 | 	mov	local03, arg03
02864     32 73 02 F6 | 	mov	local04, arg04
02868     33 75 02 F6 | 	mov	local05, arg05
0286c                 | ' 
0286c                 | ' repeat yy from 0 to 15
0286c     00 76 06 F6 | 	mov	local06, #0
02870                 | LR__0057
02870                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
02870     03 79 02 F6 | 	mov	local07, ptr__hng033rm_spin2_dat__
02874     C8 FA 05 F1 | 	add	objptr, #200
02878     FD 7A 02 FB | 	rdlong	local08, objptr
0287c     C8 FA 85 F1 | 	sub	objptr, #200
02880     0A 7A 66 F0 | 	shl	local08, #10
02884     3D 79 02 F1 | 	add	local07, local08
02888     38 7D 02 F6 | 	mov	local09, local03
0288c     04 7C 66 F0 | 	shl	local09, #4
02890     3E 79 02 F1 | 	add	local07, local09
02894     3B 79 02 F1 | 	add	local07, local06
02898     3C 7F C2 FA | 	rdbyte	local10, local07
0289c                 | '   repeat xx from 0 to 7
0289c     00 80 06 F6 | 	mov	local11, #0
028a0                 | LR__0058
028a0                 | '     if (bb&(1<<xx))<>0
028a0     40 83 C2 F9 | 	decod	local12, local11
028a4     41 7F CA F7 | 	test	local10, local12 wz
028a8     40 00 90 AD |  if_e	jmp	#LR__0059
028ac                 | '       putpixel(xx+x,yy+y,f)
028ac     D8 FA 05 F1 | 	add	objptr, #216
028b0     FD 78 02 FB | 	rdlong	local07, objptr
028b4     D8 FA 85 F1 | 	sub	objptr, #216
028b8     3C 83 02 FB | 	rdlong	local12, local07
028bc     04 78 06 F1 | 	add	local07, #4
028c0     3C 7B 02 FB | 	rdlong	local08, local07
028c4     40 5F 02 F6 | 	mov	arg01, local11
028c8     36 5F 02 F1 | 	add	arg01, local01
028cc     3B 61 02 F6 | 	mov	arg02, local06
028d0     37 61 02 F1 | 	add	arg02, local02
028d4     39 63 02 F6 | 	mov	arg03, local04
028d8     FD 84 02 F6 | 	mov	local13, objptr
028dc     41 FB 01 F6 | 	mov	objptr, local12
028e0     2D 7A 62 FD | 	call	local08
028e4     42 FB 01 F6 | 	mov	objptr, local13
028e8                 | '     else
028e8     3C 00 90 FD | 	jmp	#LR__0060
028ec                 | LR__0059
028ec                 | '       putpixel(xx+x,yy+y,b)
028ec     D8 FA 05 F1 | 	add	objptr, #216
028f0     FD 78 02 FB | 	rdlong	local07, objptr
028f4     D8 FA 85 F1 | 	sub	objptr, #216
028f8     3C 83 02 FB | 	rdlong	local12, local07
028fc     04 78 06 F1 | 	add	local07, #4
02900     3C 7B 02 FB | 	rdlong	local08, local07
02904     40 5F 02 F6 | 	mov	arg01, local11
02908     36 5F 02 F1 | 	add	arg01, local01
0290c     3B 61 02 F6 | 	mov	arg02, local06
02910     37 61 02 F1 | 	add	arg02, local02
02914     3A 63 02 F6 | 	mov	arg03, local05
02918     FD 84 02 F6 | 	mov	local13, objptr
0291c     41 FB 01 F6 | 	mov	objptr, local12
02920     2D 7A 62 FD | 	call	local08
02924     42 FB 01 F6 | 	mov	objptr, local13
02928                 | LR__0060
02928     01 80 06 F1 | 	add	local11, #1
0292c     08 80 5E F2 | 	cmps	local11, #8 wcz
02930     6C FF 9F CD |  if_b	jmp	#LR__0058
02934     01 76 06 F1 | 	add	local06, #1
02938     10 76 5E F2 | 	cmps	local06, #16 wcz
0293c     30 FF 9F CD |  if_b	jmp	#LR__0057
02940     AF F0 03 F6 | 	mov	ptra, fp
02944     BA 00 A0 FD | 	call	#popregs_
02948                 | _hng033rm_spin2_putcharxycg_ret
02948     2D 00 64 FD | 	ret
0294c                 | 
0294c                 | ' 
0294c                 | ' pub outtextxycg(x,y,text,f,b) | iii,c
0294c                 | _hng033rm_spin2_outtextxycg
0294c     0C 5A 05 F6 | 	mov	COUNT_, #12
02950     B0 00 A0 FD | 	call	#pushregs_
02954     2F 6D 02 F6 | 	mov	local01, arg01
02958     30 6F 02 F6 | 	mov	local02, arg02
0295c     31 71 02 F6 | 	mov	local03, arg03
02960     32 73 02 F6 | 	mov	local04, arg04
02964     33 75 02 F6 | 	mov	local05, arg05
02968                 | ' 
02968                 | ' repeat iii from 0 to strsize(text)-1
02968     00 76 06 F6 | 	mov	local06, #0
0296c     38 5F 02 F6 | 	mov	arg01, local03
02970     00 78 06 F6 | 	mov	local07, #0
02974     98 D6 9F FE | 	loc	pa,	#(@LR__0062-@LR__0061)
02978     93 00 A0 FD | 	call	#FCACHE_LOAD_
0297c                 | LR__0061
0297c     2F 7B CA FA | 	rdbyte	local08, arg01 wz
02980     01 78 06 51 |  if_ne	add	local07, #1
02984     01 5E 06 51 |  if_ne	add	arg01, #1
02988     F0 FF 9F 5D |  if_ne	jmp	#LR__0061
0298c                 | LR__0062
0298c     3C 19 02 F6 | 	mov	result1, local07
02990     0C 7D 02 F6 | 	mov	local09, result1
02994     01 7C 86 F1 | 	sub	local09, #1
02998     00 7C 5E F2 | 	cmps	local09, #0 wcz
0299c     01 7E 06 16 |  if_a	mov	local10, #1
029a0     01 7E 66 E6 |  if_be	neg	local10, #1
029a4     3F 7D 02 F1 | 	add	local09, local10
029a8                 | LR__0063
029a8                 | '   putcharxycg(x+8*iii,y,byte[text+iii],f,b)
029a8     36 5F 02 F6 | 	mov	arg01, local01
029ac     3B 81 02 F6 | 	mov	local11, local06
029b0     03 80 66 F0 | 	shl	local11, #3
029b4     40 5F 02 F1 | 	add	arg01, local11
029b8     37 61 02 F6 | 	mov	arg02, local02
029bc     38 83 02 F6 | 	mov	local12, local03
029c0     3B 83 02 F1 | 	add	local12, local06
029c4     41 63 C2 FA | 	rdbyte	arg03, local12
029c8     39 65 02 F6 | 	mov	arg04, local04
029cc     3A 67 02 F6 | 	mov	arg05, local05
029d0     7C FE BF FD | 	call	#_hng033rm_spin2_putcharxycg
029d4     3F 77 02 F1 | 	add	local06, local10
029d8     3E 77 0A F2 | 	cmp	local06, local09 wz
029dc     C8 FF 9F 5D |  if_ne	jmp	#LR__0063
029e0     AF F0 03 F6 | 	mov	ptra, fp
029e4     BA 00 A0 FD | 	call	#popregs_
029e8                 | _hng033rm_spin2_outtextxycg_ret
029e8     2D 00 64 FD | 	ret
029ec                 | 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' ''---------- putpixel - put a pixel on the screen
029ec                 | ' 
029ec                 | ' pub putpixel1(x,y,c) |byte b
029ec                 | _hng033rm_spin2_putpixel1
029ec                 | ' 
029ec                 | ' 
029ec                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
029ec     00 1E 06 F6 | 	mov	_var01, #0
029f0     00 5E 5E F2 | 	cmps	arg01, #0 wcz
029f4     01 1E 66 36 |  if_ae	neg	_var01, #1
029f8     00 20 06 F6 | 	mov	_var02, #0
029fc     90 FA 05 F1 | 	add	objptr, #144
02a00     FD 22 02 FB | 	rdlong	_var03, objptr
02a04     05 22 66 F0 | 	shl	_var03, #5
02a08     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02a0c     01 20 66 C6 |  if_b	neg	_var02, #1
02a10     10 1F 02 F5 | 	and	_var01, _var02
02a14     00 24 06 F6 | 	mov	_var04, #0
02a18     00 60 5E F2 | 	cmps	arg02, #0 wcz
02a1c     01 24 66 36 |  if_ae	neg	_var04, #1
02a20     12 1F 02 F5 | 	and	_var01, _var04
02a24     00 26 06 F6 | 	mov	_var05, #0
02a28     04 FA 05 F1 | 	add	objptr, #4
02a2c     FD 28 02 FB | 	rdlong	_var06, objptr
02a30     94 FA 85 F1 | 	sub	objptr, #148
02a34     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02a38     01 26 66 C6 |  if_b	neg	_var05, #1
02a3c     13 1F CA F7 | 	test	_var01, _var05 wz
02a40     90 00 90 AD |  if_e	jmp	#LR__0066
02a44                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
02a44     FD 1E 02 FB | 	rdlong	_var01, objptr
02a48     90 FA 05 F1 | 	add	objptr, #144
02a4c     FD 20 02 FB | 	rdlong	_var02, objptr
02a50     90 FA 85 F1 | 	sub	objptr, #144
02a54     02 20 66 F0 | 	shl	_var02, #2
02a58     30 21 02 FD | 	qmul	_var02, arg02
02a5c     18 2A 62 FD | 	getqx	_var07
02a60     15 1F 02 F1 | 	add	_var01, _var07
02a64     2F 25 02 F6 | 	mov	_var04, arg01
02a68     03 24 46 F0 | 	shr	_var04, #3
02a6c     12 1F 02 F1 | 	add	_var01, _var04
02a70     0F 2D C2 FA | 	rdbyte	_var08, _var01
02a74                 | '     if (c==0)
02a74     00 62 0E F2 | 	cmp	arg03, #0 wz
02a78     18 00 90 5D |  if_ne	jmp	#LR__0064
02a7c                 | '       b:=b & !(1<<(x//8))
02a7c     2F 23 52 F6 | 	abs	_var03, arg01 wc
02a80     07 22 06 F5 | 	and	_var03, #7
02a84     11 23 62 C6 |  if_b	neg	_var03, _var03
02a88     11 21 C2 F9 | 	decod	_var02, _var03
02a8c     10 2D 22 F5 | 	andn	_var08, _var02
02a90                 | '     else
02a90     14 00 90 FD | 	jmp	#LR__0065
02a94                 | LR__0064
02a94                 | '       b:=b |(1<<(x//8))
02a94     2F 23 52 F6 | 	abs	_var03, arg01 wc
02a98     07 22 06 F5 | 	and	_var03, #7
02a9c     11 23 62 C6 |  if_b	neg	_var03, _var03
02aa0     11 21 C2 F9 | 	decod	_var02, _var03
02aa4     10 2D 42 F5 | 	or	_var08, _var02
02aa8                 | LR__0065
02aa8                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
02aa8     FD 1E 02 FB | 	rdlong	_var01, objptr
02aac     90 FA 05 F1 | 	add	objptr, #144
02ab0     FD 20 02 FB | 	rdlong	_var02, objptr
02ab4     90 FA 85 F1 | 	sub	objptr, #144
02ab8     02 20 66 F0 | 	shl	_var02, #2
02abc     30 21 02 FD | 	qmul	_var02, arg02
02ac0     18 2A 62 FD | 	getqx	_var07
02ac4     15 1F 02 F1 | 	add	_var01, _var07
02ac8     03 5E 46 F0 | 	shr	arg01, #3
02acc     2F 1F 02 F1 | 	add	_var01, arg01
02ad0     0F 2D 42 FC | 	wrbyte	_var08, _var01
02ad4                 | LR__0066
02ad4                 | _hng033rm_spin2_putpixel1_ret
02ad4     2D 00 64 FD | 	ret
02ad8                 | 
02ad8                 | ' 
02ad8                 | ' 
02ad8                 | ' pub putpixel2(x,y,c) |byte b
02ad8                 | _hng033rm_spin2_putpixel2
02ad8     2F 1F 02 F6 | 	mov	_var01, arg01
02adc     30 21 02 F6 | 	mov	_var02, arg02
02ae0     31 23 02 F6 | 	mov	_var03, arg03
02ae4                 | ' 
02ae4                 | ' 
02ae4                 | ' if ((x>=0) && (x<16*cpl) && (y>=0) && (y<lines))
02ae4     00 1E 5E F2 | 	cmps	_var01, #0 wcz
02ae8     C8 00 90 CD |  if_b	jmp	#LR__0067
02aec     90 FA 05 F1 | 	add	objptr, #144
02af0     FD 24 02 FB | 	rdlong	_var04, objptr
02af4     90 FA 85 F1 | 	sub	objptr, #144
02af8     04 24 66 F0 | 	shl	_var04, #4
02afc     12 1F 5A F2 | 	cmps	_var01, _var04 wcz
02b00     B0 00 90 3D |  if_ae	jmp	#LR__0067
02b04     00 20 5E F2 | 	cmps	_var02, #0 wcz
02b08     A8 00 90 CD |  if_b	jmp	#LR__0067
02b0c     94 FA 05 F1 | 	add	objptr, #148
02b10     FD 26 02 FB | 	rdlong	_var05, objptr
02b14     94 FA 85 F1 | 	sub	objptr, #148
02b18     13 21 5A F2 | 	cmps	_var02, _var05 wcz
02b1c     94 00 90 3D |  if_ae	jmp	#LR__0067
02b20                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
02b20     FD 24 02 FB | 	rdlong	_var04, objptr
02b24     90 FA 05 F1 | 	add	objptr, #144
02b28     FD 28 02 FB | 	rdlong	_var06, objptr
02b2c     90 FA 85 F1 | 	sub	objptr, #144
02b30     02 28 66 F0 | 	shl	_var06, #2
02b34     10 29 02 FD | 	qmul	_var06, _var02
02b38     18 2A 62 FD | 	getqx	_var07
02b3c     15 25 02 F1 | 	add	_var04, _var07
02b40     0F 2D 02 F6 | 	mov	_var08, _var01
02b44     02 2C 46 F0 | 	shr	_var08, #2
02b48     16 25 02 F1 | 	add	_var04, _var08
02b4c     12 2F C2 FA | 	rdbyte	_var09, _var04
02b50                 | '     b:=b & !(%11<<((x//4)<<1))
02b50     0F 31 52 F6 | 	abs	_var10, _var01 wc
02b54     03 30 06 F5 | 	and	_var10, #3
02b58     18 31 62 C6 |  if_b	neg	_var10, _var10
02b5c     01 30 66 F0 | 	shl	_var10, #1
02b60     03 28 06 F6 | 	mov	_var06, #3
02b64     18 29 62 F0 | 	shl	_var06, _var10
02b68     14 2F 22 F5 | 	andn	_var09, _var06
02b6c                 | '     b:=b |(c<<((x//4)<<1))
02b6c     0F 31 52 F6 | 	abs	_var10, _var01 wc
02b70     03 30 06 F5 | 	and	_var10, #3
02b74     18 31 62 C6 |  if_b	neg	_var10, _var10
02b78     01 30 66 F0 | 	shl	_var10, #1
02b7c     18 23 62 F0 | 	shl	_var03, _var10
02b80     11 2F 42 F5 | 	or	_var09, _var03
02b84                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
02b84     FD 24 02 FB | 	rdlong	_var04, objptr
02b88     90 FA 05 F1 | 	add	objptr, #144
02b8c     FD 28 02 FB | 	rdlong	_var06, objptr
02b90     90 FA 85 F1 | 	sub	objptr, #144
02b94     02 28 66 F0 | 	shl	_var06, #2
02b98     10 29 02 FD | 	qmul	_var06, _var02
02b9c     18 2A 62 FD | 	getqx	_var07
02ba0     15 25 02 F1 | 	add	_var04, _var07
02ba4     0F 2D 02 F6 | 	mov	_var08, _var01
02ba8     02 2C 46 F0 | 	shr	_var08, #2
02bac     16 25 02 F1 | 	add	_var04, _var08
02bb0     12 2F 42 FC | 	wrbyte	_var09, _var04
02bb4                 | LR__0067
02bb4                 | _hng033rm_spin2_putpixel2_ret
02bb4     2D 00 64 FD | 	ret
02bb8                 | 
02bb8                 | ' 
02bb8                 | ' 
02bb8                 | ' pub putpixel4(x,y,c) |byte b
02bb8                 | _hng033rm_spin2_putpixel4
02bb8                 | ' 
02bb8                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
02bb8     00 1E 06 F6 | 	mov	_var01, #0
02bbc     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02bc0     01 1E 66 36 |  if_ae	neg	_var01, #1
02bc4     00 20 06 F6 | 	mov	_var02, #0
02bc8     90 FA 05 F1 | 	add	objptr, #144
02bcc     FD 22 02 FB | 	rdlong	_var03, objptr
02bd0     04 22 66 F0 | 	shl	_var03, #4
02bd4     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02bd8     01 20 66 C6 |  if_b	neg	_var02, #1
02bdc     10 1F 02 F5 | 	and	_var01, _var02
02be0     00 24 06 F6 | 	mov	_var04, #0
02be4     00 60 5E F2 | 	cmps	arg02, #0 wcz
02be8     01 24 66 36 |  if_ae	neg	_var04, #1
02bec     12 1F 02 F5 | 	and	_var01, _var04
02bf0     00 26 06 F6 | 	mov	_var05, #0
02bf4     04 FA 05 F1 | 	add	objptr, #4
02bf8     FD 28 02 FB | 	rdlong	_var06, objptr
02bfc     94 FA 85 F1 | 	sub	objptr, #148
02c00     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02c04     01 26 66 C6 |  if_b	neg	_var05, #1
02c08     13 1F CA F7 | 	test	_var01, _var05 wz
02c0c     90 00 90 AD |  if_e	jmp	#LR__0068
02c10                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
02c10     FD 1E 02 FB | 	rdlong	_var01, objptr
02c14     90 FA 05 F1 | 	add	objptr, #144
02c18     FD 20 02 FB | 	rdlong	_var02, objptr
02c1c     90 FA 85 F1 | 	sub	objptr, #144
02c20     02 20 66 F0 | 	shl	_var02, #2
02c24     30 21 02 FD | 	qmul	_var02, arg02
02c28     18 2A 62 FD | 	getqx	_var07
02c2c     15 1F 02 F1 | 	add	_var01, _var07
02c30     2F 25 02 F6 | 	mov	_var04, arg01
02c34     01 24 46 F0 | 	shr	_var04, #1
02c38     12 1F 02 F1 | 	add	_var01, _var04
02c3c     0F 2D C2 FA | 	rdbyte	_var08, _var01
02c40                 | '     b:=b & !(%1111<<((x//2)<<2))
02c40     2F 23 52 F6 | 	abs	_var03, arg01 wc
02c44     01 22 06 F5 | 	and	_var03, #1
02c48     11 23 62 C6 |  if_b	neg	_var03, _var03
02c4c     02 22 66 F0 | 	shl	_var03, #2
02c50     0F 20 06 F6 | 	mov	_var02, #15
02c54     11 21 62 F0 | 	shl	_var02, _var03
02c58     10 2D 22 F5 | 	andn	_var08, _var02
02c5c                 | '     b:=b |(c<<((x//2)<<2))
02c5c     2F 23 52 F6 | 	abs	_var03, arg01 wc
02c60     01 22 06 F5 | 	and	_var03, #1
02c64     11 23 62 C6 |  if_b	neg	_var03, _var03
02c68     02 22 66 F0 | 	shl	_var03, #2
02c6c     11 63 62 F0 | 	shl	arg03, _var03
02c70     31 2D 42 F5 | 	or	_var08, arg03
02c74                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
02c74     FD 1E 02 FB | 	rdlong	_var01, objptr
02c78     90 FA 05 F1 | 	add	objptr, #144
02c7c     FD 20 02 FB | 	rdlong	_var02, objptr
02c80     90 FA 85 F1 | 	sub	objptr, #144
02c84     02 20 66 F0 | 	shl	_var02, #2
02c88     30 21 02 FD | 	qmul	_var02, arg02
02c8c     18 2A 62 FD | 	getqx	_var07
02c90     15 1F 02 F1 | 	add	_var01, _var07
02c94     01 5E 46 F0 | 	shr	arg01, #1
02c98     2F 1F 02 F1 | 	add	_var01, arg01
02c9c     0F 2D 42 FC | 	wrbyte	_var08, _var01
02ca0                 | LR__0068
02ca0                 | _hng033rm_spin2_putpixel4_ret
02ca0     2D 00 64 FD | 	ret
02ca4                 | 
02ca4                 | ' 
02ca4                 | ' 
02ca4                 | ' pub putpixel8(x,y,c)
02ca4                 | _hng033rm_spin2_putpixel8
02ca4                 | ' 
02ca4                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
02ca4     00 1E 06 F6 | 	mov	_var01, #0
02ca8     00 5E 5E F2 | 	cmps	arg01, #0 wcz
02cac     01 1E 66 36 |  if_ae	neg	_var01, #1
02cb0     00 20 06 F6 | 	mov	_var02, #0
02cb4     90 FA 05 F1 | 	add	objptr, #144
02cb8     FD 22 02 FB | 	rdlong	_var03, objptr
02cbc     02 22 66 F0 | 	shl	_var03, #2
02cc0     11 5F 5A F2 | 	cmps	arg01, _var03 wcz
02cc4     01 20 66 C6 |  if_b	neg	_var02, #1
02cc8     10 1F 02 F5 | 	and	_var01, _var02
02ccc     00 24 06 F6 | 	mov	_var04, #0
02cd0     00 60 5E F2 | 	cmps	arg02, #0 wcz
02cd4     01 24 66 36 |  if_ae	neg	_var04, #1
02cd8     12 1F 02 F5 | 	and	_var01, _var04
02cdc     00 26 06 F6 | 	mov	_var05, #0
02ce0     04 FA 05 F1 | 	add	objptr, #4
02ce4     FD 28 02 FB | 	rdlong	_var06, objptr
02ce8     94 FA 85 F1 | 	sub	objptr, #148
02cec     14 61 5A F2 | 	cmps	arg02, _var06 wcz
02cf0     01 26 66 C6 |  if_b	neg	_var05, #1
02cf4     13 1F CA F7 | 	test	_var01, _var05 wz
02cf8     28 00 90 AD |  if_e	jmp	#LR__0069
02cfc                 | '     byte[buf_ptr+4*cpl*y+x]:=c
02cfc     FD 1E 02 FB | 	rdlong	_var01, objptr
02d00     90 FA 05 F1 | 	add	objptr, #144
02d04     FD 20 02 FB | 	rdlong	_var02, objptr
02d08     90 FA 85 F1 | 	sub	objptr, #144
02d0c     02 20 66 F0 | 	shl	_var02, #2
02d10     30 21 02 FD | 	qmul	_var02, arg02
02d14     18 2A 62 FD | 	getqx	_var07
02d18     15 1F 02 F1 | 	add	_var01, _var07
02d1c     2F 1F 02 F1 | 	add	_var01, arg01
02d20     0F 63 42 FC | 	wrbyte	arg03, _var01
02d24                 | LR__0069
02d24                 | _hng033rm_spin2_putpixel8_ret
02d24     2D 00 64 FD | 	ret
02d28                 | 
02d28                 | ' 
02d28                 | ' '*************************************************************************
02d28                 | ' '                                                                        *
02d28                 | ' '  VBlank functions                                                      *
02d28                 | ' '                                                                        *
02d28                 | ' '*************************************************************************
02d28                 | ' 
02d28                 | ' pub waitvbl(amount) | i
02d28                 | _hng033rm_spin2_waitvbl
02d28     04 5A 05 F6 | 	mov	COUNT_, #4
02d2c     B0 00 A0 FD | 	call	#pushregs_
02d30     2F 6D 02 F6 | 	mov	local01, arg01
02d34                 | ' 
02d34                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
02d34                 | ' 
02d34                 | ' repeat i from 1 to amount
02d34     01 6E 06 F6 | 	mov	local02, #1
02d38     01 6C 5E F2 | 	cmps	local01, #1 wcz
02d3c     01 70 06 16 |  if_a	mov	local03, #1
02d40     01 70 66 E6 |  if_be	neg	local03, #1
02d44     38 6D 02 F1 | 	add	local01, local03
02d48                 | LR__0070
02d48                 | '   repeat until vblank==0
02d48                 | LR__0071
02d48     40 FA 05 F1 | 	add	objptr, #64
02d4c     FD 72 0A FB | 	rdlong	local04, objptr wz
02d50     40 FA 85 F1 | 	sub	objptr, #64
02d54     0C 00 90 AD |  if_e	jmp	#LR__0072
02d58                 | '     waitus(100)
02d58     64 5E 06 F6 | 	mov	arg01, #100
02d5c     78 43 B0 FD | 	call	#__system___waitus
02d60     E4 FF 9F FD | 	jmp	#LR__0071
02d64                 | LR__0072
02d64                 | '   repeat until vblank==1
02d64                 | LR__0073
02d64     40 FA 05 F1 | 	add	objptr, #64
02d68     FD 72 02 FB | 	rdlong	local04, objptr
02d6c     40 FA 85 F1 | 	sub	objptr, #64
02d70     01 72 0E F2 | 	cmp	local04, #1 wz
02d74     0C 00 90 AD |  if_e	jmp	#LR__0074
02d78                 | '     waitus(100)
02d78     64 5E 06 F6 | 	mov	arg01, #100
02d7c     58 43 B0 FD | 	call	#__system___waitus
02d80     E0 FF 9F FD | 	jmp	#LR__0073
02d84                 | LR__0074
02d84     38 6F 02 F1 | 	add	local02, local03
02d88     36 6F 0A F2 | 	cmp	local02, local01 wz
02d8c     B8 FF 9F 5D |  if_ne	jmp	#LR__0070
02d90     AF F0 03 F6 | 	mov	ptra, fp
02d94     BA 00 A0 FD | 	call	#popregs_
02d98                 | _hng033rm_spin2_waitvbl_ret
02d98     2D 00 64 FD | 	ret
02d9c                 | 
02d9c                 | ' 
02d9c                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
02d9c                 | ' 
02d9c                 | ' pub setbordercolor(r,g,b) | color
02d9c                 | _hng033rm_spin2_setbordercolor
02d9c                 | ' 
02d9c                 | ' color:=r<<24+g<<16+b<<8
02d9c     18 5E 66 F0 | 	shl	arg01, #24
02da0     10 60 66 F0 | 	shl	arg02, #16
02da4     30 5F 02 F1 | 	add	arg01, arg02
02da8     08 62 66 F0 | 	shl	arg03, #8
02dac     31 5F 02 F1 | 	add	arg01, arg03
02db0                 | ' bordercolor:=color
02db0     2C FA 05 F1 | 	add	objptr, #44
02db4     FD 5E 62 FC | 	wrlong	arg01, objptr
02db8     2C FA 85 F1 | 	sub	objptr, #44
02dbc                 | _hng033rm_spin2_setbordercolor_ret
02dbc     2D 00 64 FD | 	ret
02dc0                 | 
02dc0                 | ' 
02dc0                 | ' ''---------- Set color #c in palette to r,g,b
02dc0                 | ' 
02dc0                 | ' pub setcolor(c,r,g,b)  |cc
02dc0                 | _hng033rm_spin2_setcolor
02dc0                 | ' 
02dc0                 | ' cc:=r<<24+g<<16+b<<8
02dc0     18 60 66 F0 | 	shl	arg02, #24
02dc4     10 62 66 F0 | 	shl	arg03, #16
02dc8     31 61 02 F1 | 	add	arg02, arg03
02dcc     08 64 66 F0 | 	shl	arg04, #8
02dd0     32 61 02 F1 | 	add	arg02, arg04
02dd4                 | ' long[palette_ptr+4*c]:=cc
02dd4     18 FA 05 F1 | 	add	objptr, #24
02dd8     FD 1E 02 FB | 	rdlong	_var01, objptr
02ddc     18 FA 85 F1 | 	sub	objptr, #24
02de0     02 5E 66 F0 | 	shl	arg01, #2
02de4     2F 1F 02 F1 | 	add	_var01, arg01
02de8     0F 61 62 FC | 	wrlong	arg02, _var01
02dec                 | _hng033rm_spin2_setcolor_ret
02dec     2D 00 64 FD | 	ret
02df0                 | 
02df0                 | ' 
02df0                 | ' 
02df0                 | ' '*************************************************************************
02df0                 | ' '                                                                        *
02df0                 | ' '  Text functions                                                        *
02df0                 | ' '                                                                        *
02df0                 | ' '*************************************************************************
02df0                 | ' 
02df0                 | ' ''---------- Clear the screen, set its foreground/background color
02df0                 | ' 
02df0                 | ' pub cls(fc,bc)   :c
02df0                 | _hng033rm_spin2_cls
02df0     06 5A 05 F6 | 	mov	COUNT_, #6
02df4     B0 00 A0 FD | 	call	#pushregs_
02df8     2F 6D 02 F6 | 	mov	local01, arg01
02dfc     30 6F 02 F6 | 	mov	local02, arg02
02e00                 | ' 
02e00                 | ' if (graphmode<512)
02e00     C4 FA 05 F1 | 	add	objptr, #196
02e04     FD 70 02 FB | 	rdlong	local03, objptr
02e08     C4 FA 85 F1 | 	sub	objptr, #196
02e0c     01 00 00 FF 
02e10     00 70 5E F2 | 	cmps	local03, ##512 wcz
02e14     34 00 90 3D |  if_ae	jmp	#LR__0075
02e18                 | '   c:=fc<<24+bc<<16+$20
02e18     36 73 02 F6 | 	mov	local04, local01
02e1c     18 72 66 F0 | 	shl	local04, #24
02e20     37 75 02 F6 | 	mov	local05, local02
02e24     10 74 66 F0 | 	shl	local05, #16
02e28     3A 73 02 F1 | 	add	local04, local05
02e2c     20 72 06 F1 | 	add	local04, #32
02e30                 | '   longfill(buf_ptr,c,buflen)
02e30     FD 5E 02 FB | 	rdlong	arg01, objptr
02e34     30 FA 05 F1 | 	add	objptr, #48
02e38     FD 62 02 FB | 	rdlong	arg03, objptr
02e3c     30 FA 85 F1 | 	sub	objptr, #48
02e40     39 61 02 F6 | 	mov	arg02, local04
02e44     A8 00 A0 FD | 	call	#\builtin_longfill_
02e48                 | ' else
02e48     AC 00 90 FD | 	jmp	#LR__0081
02e4c                 | LR__0075
02e4c                 | '   if (graphmode & 48) ==48
02e4c     C4 FA 05 F1 | 	add	objptr, #196
02e50     FD 70 02 FB | 	rdlong	local03, objptr
02e54     C4 FA 85 F1 | 	sub	objptr, #196
02e58     30 70 06 F5 | 	and	local03, #48
02e5c     30 70 0E F2 | 	cmp	local03, #48 wz
02e60                 | '     c:=bc
02e60     37 73 02 A6 |  if_e	mov	local04, local02
02e64     74 00 90 AD |  if_e	jmp	#LR__0080
02e68                 | '   elseif (graphmode & 48) ==32
02e68     C4 FA 05 F1 | 	add	objptr, #196
02e6c     FD 70 02 FB | 	rdlong	local03, objptr
02e70     C4 FA 85 F1 | 	sub	objptr, #196
02e74     30 70 06 F5 | 	and	local03, #48
02e78     20 70 0E F2 | 	cmp	local03, #32 wz
02e7c     10 00 90 5D |  if_ne	jmp	#LR__0076
02e80                 | '     c:=bc<<4+bc
02e80     37 73 02 F6 | 	mov	local04, local02
02e84     04 72 66 F0 | 	shl	local04, #4
02e88     37 73 02 F1 | 	add	local04, local02
02e8c     4C 00 90 FD | 	jmp	#LR__0079
02e90                 | LR__0076
02e90                 | '   elseif (graphmode & 48) ==16
02e90     C4 FA 05 F1 | 	add	objptr, #196
02e94     FD 70 02 FB | 	rdlong	local03, objptr
02e98     C4 FA 85 F1 | 	sub	objptr, #196
02e9c     30 70 06 F5 | 	and	local03, #48
02ea0     10 70 0E F2 | 	cmp	local03, #16 wz
02ea4     28 00 90 5D |  if_ne	jmp	#LR__0077
02ea8                 | '     c:=bc<<6+bc<<4+bc<<2+bc
02ea8     37 73 02 F6 | 	mov	local04, local02
02eac     06 72 66 F0 | 	shl	local04, #6
02eb0     37 75 02 F6 | 	mov	local05, local02
02eb4     04 74 66 F0 | 	shl	local05, #4
02eb8     3A 73 02 F1 | 	add	local04, local05
02ebc     37 77 02 F6 | 	mov	local06, local02
02ec0     02 76 66 F0 | 	shl	local06, #2
02ec4     3B 73 02 F1 | 	add	local04, local06
02ec8     37 73 02 F1 | 	add	local04, local02
02ecc                 | '   else
02ecc     0C 00 90 FD | 	jmp	#LR__0078
02ed0                 | LR__0077
02ed0                 | '     if bc==1
02ed0     01 6E 0E F2 | 	cmp	local02, #1 wz
02ed4                 | '       c:=255
02ed4     FF 72 06 A6 |  if_e	mov	local04, #255
02ed8                 | '     else
02ed8                 | '       c:=0
02ed8     00 72 06 56 |  if_ne	mov	local04, #0
02edc                 | LR__0078
02edc                 | LR__0079
02edc                 | LR__0080
02edc                 | '   bytefill(buf_ptr,c,buflen*4)
02edc     FD 5E 02 FB | 	rdlong	arg01, objptr
02ee0     30 FA 05 F1 | 	add	objptr, #48
02ee4     FD 62 02 FB | 	rdlong	arg03, objptr
02ee8     30 FA 85 F1 | 	sub	objptr, #48
02eec     02 62 66 F0 | 	shl	arg03, #2
02ef0     39 61 02 F6 | 	mov	arg02, local04
02ef4     A0 00 A0 FD | 	call	#\builtin_bytefill_
02ef8                 | LR__0081
02ef8                 | ' setwritecolors(fc,bc)
02ef8                 | ' 
02ef8                 | ' 
02ef8                 | ' write_color:=ff
02ef8     38 FA 05 F1 | 	add	objptr, #56
02efc     FD 6C 62 FC | 	wrlong	local01, objptr
02f00                 | ' write_background:=bb
02f00     04 FA 05 F1 | 	add	objptr, #4
02f04     FD 6E 62 FC | 	wrlong	local02, objptr
02f08                 | ' cursor_x:=0
02f08     08 FA 85 F1 | 	sub	objptr, #8
02f0c     FD 00 48 FC | 	wrbyte	#0, objptr
02f10                 | ' cursor_y:=0
02f10     01 FA 05 F1 | 	add	objptr, #1
02f14     FD 00 48 FC | 	wrbyte	#0, objptr
02f18     35 FA 85 F1 | 	sub	objptr, #53
02f1c     39 19 02 F6 | 	mov	result1, local04
02f20     AF F0 03 F6 | 	mov	ptra, fp
02f24     BA 00 A0 FD | 	call	#popregs_
02f28                 | _hng033rm_spin2_cls_ret
02f28     2D 00 64 FD | 	ret
02f2c                 | 
02f2c                 | ' 
02f2c                 | ' ''--------- Output a string at position x,y without changing colors
02f2c                 | ' 
02f2c                 | ' pub outtextxy(x,y,text) | iii
02f2c                 | _hng033rm_spin2_outtextxy
02f2c     0F 5A 05 F6 | 	mov	COUNT_, #15
02f30     B0 00 A0 FD | 	call	#pushregs_
02f34     2F 6D 02 F6 | 	mov	local01, arg01
02f38                 | ' 
02f38                 | ' repeat iii from 0 to strsize(text)-1
02f38     00 6E 06 F6 | 	mov	local02, #0
02f3c     31 5F 02 F6 | 	mov	arg01, arg03
02f40     00 70 06 F6 | 	mov	local03, #0
02f44     C8 D0 9F FE | 	loc	pa,	#(@LR__0083-@LR__0082)
02f48     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f4c                 | LR__0082
02f4c     2F 73 CA FA | 	rdbyte	local04, arg01 wz
02f50     01 70 06 51 |  if_ne	add	local03, #1
02f54     01 5E 06 51 |  if_ne	add	arg01, #1
02f58     F0 FF 9F 5D |  if_ne	jmp	#LR__0082
02f5c                 | LR__0083
02f5c     38 19 02 F6 | 	mov	result1, local03
02f60     0C 75 02 F6 | 	mov	local05, result1
02f64     01 74 86 F1 | 	sub	local05, #1
02f68     00 74 5E F2 | 	cmps	local05, #0 wcz
02f6c     01 76 06 16 |  if_a	mov	local06, #1
02f70     01 76 66 E6 |  if_be	neg	local06, #1
02f74     3B 75 02 F1 | 	add	local05, local06
02f78     FC D0 9F FE | 	loc	pa,	#(@LR__0085-@LR__0084)
02f7c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02f80                 | LR__0084
02f80                 | '   long[buf_ptr+4*(cpl*y+x+iii)]:=(long[buf_ptr+4*(cpl*y+x+iii)] & $FFFFFF00)  | byte[text+iii]
02f80     FD 78 02 FB | 	rdlong	local07, objptr
02f84     90 FA 05 F1 | 	add	objptr, #144
02f88     FD 7A 02 FB | 	rdlong	local08, objptr
02f8c     90 FA 85 F1 | 	sub	objptr, #144
02f90     30 7B 02 FD | 	qmul	local08, arg02
02f94     18 7C 62 FD | 	getqx	local09
02f98     36 7D 02 F1 | 	add	local09, local01
02f9c     37 7D 02 F1 | 	add	local09, local02
02fa0     02 7C 66 F0 | 	shl	local09, #2
02fa4     3E 79 02 F1 | 	add	local07, local09
02fa8     3C 7F 02 FB | 	rdlong	local10, local07
02fac     FF 7E 26 F5 | 	andn	local10, #255
02fb0     31 81 02 F6 | 	mov	local11, arg03
02fb4     37 81 02 F1 | 	add	local11, local02
02fb8     40 83 C2 FA | 	rdbyte	local12, local11
02fbc     41 7F 42 F5 | 	or	local10, local12
02fc0     FD 84 02 FB | 	rdlong	local13, objptr
02fc4     90 FA 05 F1 | 	add	objptr, #144
02fc8     FD 86 02 FB | 	rdlong	local14, objptr
02fcc     90 FA 85 F1 | 	sub	objptr, #144
02fd0     30 87 02 FD | 	qmul	local14, arg02
02fd4     18 88 62 FD | 	getqx	local15
02fd8     36 89 02 F1 | 	add	local15, local01
02fdc     37 89 02 F1 | 	add	local15, local02
02fe0     02 88 66 F0 | 	shl	local15, #2
02fe4     44 85 02 F1 | 	add	local13, local15
02fe8     42 7F 62 FC | 	wrlong	local10, local13
02fec     3B 6F 02 F1 | 	add	local02, local06
02ff0     3A 6F 0A F2 | 	cmp	local02, local05 wz
02ff4     88 FF 9F 5D |  if_ne	jmp	#LR__0084
02ff8                 | LR__0085
02ff8     AF F0 03 F6 | 	mov	ptra, fp
02ffc     BA 00 A0 FD | 	call	#popregs_
03000                 | _hng033rm_spin2_outtextxy_ret
03000     2D 00 64 FD | 	ret
03004                 | 
03004                 | ' 
03004                 | ' ''---------- Output a char at the cursor position, move the cursor
03004                 | ' 
03004                 | ' pub putchar(achar) | c,x,y
03004                 | _hng033rm_spin2_putchar
03004     0F 5A 05 F6 | 	mov	COUNT_, #15
03008     B0 00 A0 FD | 	call	#pushregs_
0300c     2F 6D 02 F6 | 	mov	local01, arg01
03010                 | ' 
03010                 | ' if achar==10
03010     0A 6C 0E F2 | 	cmp	local01, #10 wz
03014     08 00 90 5D |  if_ne	jmp	#LR__0086
03018                 | '   crlf()
03018     34 04 B0 FD | 	call	#_hng033rm_spin2_crlf
0301c                 | ' else  
0301c     64 01 90 FD | 	jmp	#LR__0089
03020                 | LR__0086
03020                 | '   x:=cursor_x
03020     34 FA 05 F1 | 	add	objptr, #52
03024     FD 6E C2 FA | 	rdbyte	local02, objptr
03028                 | '   y:=cursor_y
03028     01 FA 05 F1 | 	add	objptr, #1
0302c     FD 70 C2 FA | 	rdbyte	local03, objptr
03030                 | '   c:=write_color<<24+write_background<<16
03030     03 FA 05 F1 | 	add	objptr, #3
03034     FD 72 02 FB | 	rdlong	local04, objptr
03038     18 72 66 F0 | 	shl	local04, #24
0303c     04 FA 05 F1 | 	add	objptr, #4
03040     FD 74 02 FB | 	rdlong	local05, objptr
03044     3C FA 85 F1 | 	sub	objptr, #60
03048     10 74 66 F0 | 	shl	local05, #16
0304c     3A 73 02 F1 | 	add	local04, local05
03050                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
03050     FD 76 02 FB | 	rdlong	local06, objptr
03054     90 FA 05 F1 | 	add	objptr, #144
03058     FD 78 02 FB | 	rdlong	local07, objptr
0305c     90 FA 85 F1 | 	sub	objptr, #144
03060     38 79 02 FD | 	qmul	local07, local03
03064     18 7A 62 FD | 	getqx	local08
03068     37 7B 02 F1 | 	add	local08, local02
0306c     02 7A 66 F0 | 	shl	local08, #2
03070     3D 77 02 F1 | 	add	local06, local08
03074     3B 7D 02 FB | 	rdlong	local09, local06
03078     7F 00 00 FF 
0307c     FF 7D 06 F5 | 	and	local09, ##65535
03080     39 7D 42 F5 | 	or	local09, local04
03084     FD 7E 02 FB | 	rdlong	local10, objptr
03088     90 FA 05 F1 | 	add	objptr, #144
0308c     FD 80 02 FB | 	rdlong	local11, objptr
03090     90 FA 85 F1 | 	sub	objptr, #144
03094     38 81 02 FD | 	qmul	local11, local03
03098     18 82 62 FD | 	getqx	local12
0309c     37 83 02 F1 | 	add	local12, local02
030a0     02 82 66 F0 | 	shl	local12, #2
030a4     41 7F 02 F1 | 	add	local10, local12
030a8     3F 7D 62 FC | 	wrlong	local09, local10
030ac                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
030ac     FD 76 02 FB | 	rdlong	local06, objptr
030b0     90 FA 05 F1 | 	add	objptr, #144
030b4     FD 78 02 FB | 	rdlong	local07, objptr
030b8     90 FA 85 F1 | 	sub	objptr, #144
030bc     38 79 02 FD | 	qmul	local07, local03
030c0     18 7A 62 FD | 	getqx	local08
030c4     37 7B 02 F1 | 	add	local08, local02
030c8     02 7A 66 F0 | 	shl	local08, #2
030cc     3D 77 02 F1 | 	add	local06, local08
030d0     3B 7D 02 FB | 	rdlong	local09, local06
030d4     FF 7C 26 F5 | 	andn	local09, #255
030d8     36 7F 02 F6 | 	mov	local10, local01
030dc     FF 7E 06 F5 | 	and	local10, #255
030e0     3F 7D 42 F5 | 	or	local09, local10
030e4     FD 84 02 FB | 	rdlong	local13, objptr
030e8     90 FA 05 F1 | 	add	objptr, #144
030ec     FD 86 02 FB | 	rdlong	local14, objptr
030f0     38 87 02 FD | 	qmul	local14, local03
030f4     18 88 62 FD | 	getqx	local15
030f8     37 89 02 F1 | 	add	local15, local02
030fc     02 88 66 F0 | 	shl	local15, #2
03100     44 85 02 F1 | 	add	local13, local15
03104     42 7D 62 FC | 	wrlong	local09, local13
03108                 | '   cursor_x+=1
03108     5C FA 85 F1 | 	sub	objptr, #92
0310c     FD 7C C2 FA | 	rdbyte	local09, objptr
03110     01 7C 06 F1 | 	add	local09, #1
03114     FD 7C 42 FC | 	wrbyte	local09, objptr
03118                 | '   if cursor_x==cpl
03118     FD 7C C2 FA | 	rdbyte	local09, objptr
0311c     5C FA 05 F1 | 	add	objptr, #92
03120     FD 74 02 FB | 	rdlong	local05, objptr
03124     90 FA 85 F1 | 	sub	objptr, #144
03128     3A 7D 0A F2 | 	cmp	local09, local05 wz
0312c     54 00 90 5D |  if_ne	jmp	#LR__0088
03130                 | '     cursor_x:=0
03130     34 FA 05 F1 | 	add	objptr, #52
03134     FD 00 48 FC | 	wrbyte	#0, objptr
03138                 | '     cursor_y+=1
03138     01 FA 05 F1 | 	add	objptr, #1
0313c     FD 7C C2 FA | 	rdbyte	local09, objptr
03140     01 7C 06 F1 | 	add	local09, #1
03144     FD 7C 42 FC | 	wrbyte	local09, objptr
03148                 | '     if cursor_y>lines-1
03148     5F FA 05 F1 | 	add	objptr, #95
0314c     FD 7C 02 FB | 	rdlong	local09, objptr
03150     01 7C 86 F1 | 	sub	local09, #1
03154     5F FA 85 F1 | 	sub	objptr, #95
03158     FD 74 C2 FA | 	rdbyte	local05, objptr
0315c     35 FA 85 F1 | 	sub	objptr, #53
03160     3E 75 5A F2 | 	cmps	local05, local09 wcz
03164     1C 00 90 ED |  if_be	jmp	#LR__0087
03168                 | '       scrollup()
03168     10 02 B0 FD | 	call	#_hng033rm_spin2_scrollup
0316c                 | '       cursor_y:=lines-1
0316c     94 FA 05 F1 | 	add	objptr, #148
03170     FD 7C 02 FB | 	rdlong	local09, objptr
03174     01 7C 86 F1 | 	sub	local09, #1
03178     5F FA 85 F1 | 	sub	objptr, #95
0317c     FD 7C 42 FC | 	wrbyte	local09, objptr
03180     35 FA 85 F1 | 	sub	objptr, #53
03184                 | LR__0087
03184                 | LR__0088
03184                 | LR__0089
03184     AF F0 03 F6 | 	mov	ptra, fp
03188     BA 00 A0 FD | 	call	#popregs_
0318c                 | _hng033rm_spin2_putchar_ret
0318c     2D 00 64 FD | 	ret
03190                 | 
03190                 | ' 
03190                 | ' ''--------- Output a string at the cursor position, move the cursor
03190                 | ' 
03190                 | ' pub write(text) | iii,c,ncx,ncy
03190                 | _hng033rm_spin2_write
03190     16 5A 05 F6 | 	mov	COUNT_, #22
03194     B0 00 A0 FD | 	call	#pushregs_
03198     2F 6D 02 F6 | 	mov	local01, arg01
0319c                 | ' 
0319c                 | ' c:=write_color<<24+write_background<<16
0319c     38 FA 05 F1 | 	add	objptr, #56
031a0     FD 6E 02 FB | 	rdlong	local02, objptr
031a4     18 6E 66 F0 | 	shl	local02, #24
031a8     04 FA 05 F1 | 	add	objptr, #4
031ac     FD 70 02 FB | 	rdlong	local03, objptr
031b0     10 70 66 F0 | 	shl	local03, #16
031b4     38 6F 02 F1 | 	add	local02, local03
031b8                 | ' 'debug(uhex_long(write_color))
031b8                 | ' ncy:=cursor_y
031b8     07 FA 85 F1 | 	sub	objptr, #7
031bc     FD 72 C2 FA | 	rdbyte	local04, objptr
031c0                 | ' ncx:=cursor_x+strsize(text)
031c0     01 FA 85 F1 | 	sub	objptr, #1
031c4     FD 74 C2 FA | 	rdbyte	local05, objptr
031c8     34 FA 85 F1 | 	sub	objptr, #52
031cc     36 5F 02 F6 | 	mov	arg01, local01
031d0     00 76 06 F6 | 	mov	local06, #0
031d4     38 CE 9F FE | 	loc	pa,	#(@LR__0091-@LR__0090)
031d8     93 00 A0 FD | 	call	#FCACHE_LOAD_
031dc                 | LR__0090
031dc     2F 79 CA FA | 	rdbyte	local07, arg01 wz
031e0     01 76 06 51 |  if_ne	add	local06, #1
031e4     01 5E 06 51 |  if_ne	add	arg01, #1
031e8     F0 FF 9F 5D |  if_ne	jmp	#LR__0090
031ec                 | LR__0091
031ec     3B 19 02 F6 | 	mov	result1, local06
031f0     3B 75 02 F1 | 	add	local05, local06
031f4     3A 7B 02 F6 | 	mov	local08, local05
031f8     34 CE 9F FE | 	loc	pa,	#(@LR__0093-@LR__0092)
031fc     93 00 A0 FD | 	call	#FCACHE_LOAD_
03200                 | ' repeat while ncx>cpl-1
03200                 | LR__0092
03200     90 FA 05 F1 | 	add	objptr, #144
03204     FD 74 02 FB | 	rdlong	local05, objptr
03208     90 FA 85 F1 | 	sub	objptr, #144
0320c     01 74 86 F1 | 	sub	local05, #1
03210     3A 7B 5A F2 | 	cmps	local08, local05 wcz
03214     18 00 90 ED |  if_be	jmp	#LR__0094
03218                 | '   ncx-=cpl
03218     90 FA 05 F1 | 	add	objptr, #144
0321c     FD 7C 02 FB | 	rdlong	local09, objptr
03220     90 FA 85 F1 | 	sub	objptr, #144
03224     3E 7B 82 F1 | 	sub	local08, local09
03228                 | '   ncy+=1
03228     01 72 06 F1 | 	add	local04, #1
0322c     D0 FF 9F FD | 	jmp	#LR__0092
03230                 | LR__0093
03230                 | LR__0094
03230                 | ' repeat while ncy>lines-1
03230                 | LR__0095
03230     94 FA 05 F1 | 	add	objptr, #148
03234     FD 74 02 FB | 	rdlong	local05, objptr
03238     94 FA 85 F1 | 	sub	objptr, #148
0323c     01 74 86 F1 | 	sub	local05, #1
03240     3A 73 5A F2 | 	cmps	local04, local05 wcz
03244     20 00 90 ED |  if_be	jmp	#LR__0096
03248                 | '   ncy-=1
03248     01 72 86 F1 | 	sub	local04, #1
0324c                 | '   scrollup()
0324c     2C 01 B0 FD | 	call	#_hng033rm_spin2_scrollup
03250                 | '   cursor_y-=1
03250     35 FA 05 F1 | 	add	objptr, #53
03254     FD 74 C2 FA | 	rdbyte	local05, objptr
03258     01 74 86 F1 | 	sub	local05, #1
0325c     FD 74 42 FC | 	wrbyte	local05, objptr
03260     35 FA 85 F1 | 	sub	objptr, #53
03264     C8 FF 9F FD | 	jmp	#LR__0095
03268                 | LR__0096
03268                 | ' 
03268                 | ' repeat iii from 0 to strsize(text)-1
03268     00 7E 06 F6 | 	mov	local10, #0
0326c     36 5F 02 F6 | 	mov	arg01, local01
03270     00 76 06 F6 | 	mov	local06, #0
03274     98 CD 9F FE | 	loc	pa,	#(@LR__0098-@LR__0097)
03278     93 00 A0 FD | 	call	#FCACHE_LOAD_
0327c                 | LR__0097
0327c     2F 79 CA FA | 	rdbyte	local07, arg01 wz
03280     01 76 06 51 |  if_ne	add	local06, #1
03284     01 5E 06 51 |  if_ne	add	arg01, #1
03288     F0 FF 9F 5D |  if_ne	jmp	#LR__0097
0328c                 | LR__0098
0328c     3B 19 02 F6 | 	mov	result1, local06
03290     0C 81 02 F6 | 	mov	local11, result1
03294     01 80 86 F1 | 	sub	local11, #1
03298     00 80 5E F2 | 	cmps	local11, #0 wcz
0329c     01 70 06 16 |  if_a	mov	local03, #1
032a0     01 70 66 E6 |  if_be	neg	local03, #1
032a4     38 81 02 F1 | 	add	local11, local03
032a8     E4 CD 9F FE | 	loc	pa,	#(@LR__0100-@LR__0099)
032ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
032b0                 | LR__0099
032b0                 | ' 
032b0                 | '   long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)]:=long[buf_ptr+4*(cpl*cursor_y+cursor_x+iii)] &$FFFF | c
032b0     FD 82 02 FB | 	rdlong	local12, objptr
032b4     90 FA 05 F1 | 	add	objptr, #144
032b8     FD 84 02 FB | 	rdlong	local13, objptr
032bc     5B FA 85 F1 | 	sub	objptr, #91
032c0     FD 86 C2 FA | 	rdbyte	local14, objptr
032c4     43 85 02 FD | 	qmul	local13, local14
032c8     18 88 62 FD | 	getqx	local15
032cc     01 FA 85 F1 | 	sub	objptr, #1
032d0     FD 8A C2 FA | 	rdbyte	local16, objptr
032d4     34 FA 85 F1 | 	sub	objptr, #52
032d8     45 89 02 F1 | 	add	local15, local16
032dc     3F 89 02 F1 | 	add	local15, local10
032e0     02 88 66 F0 | 	shl	local15, #2
032e4     44 83 02 F1 | 	add	local12, local15
032e8     41 8D 02 FB | 	rdlong	local17, local12
032ec     7F 00 00 FF 
032f0     FF 8D 06 F5 | 	and	local17, ##65535
032f4     37 8D 42 F5 | 	or	local17, local02
032f8     FD 8E 02 FB | 	rdlong	local18, objptr
032fc     90 FA 05 F1 | 	add	objptr, #144
03300     FD 90 02 FB | 	rdlong	local19, objptr
03304     5B FA 85 F1 | 	sub	objptr, #91
03308     FD 92 C2 FA | 	rdbyte	local20, objptr
0330c     49 91 02 FD | 	qmul	local19, local20
03310     18 94 62 FD | 	getqx	local21
03314     01 FA 85 F1 | 	sub	objptr, #1
03318     FD 96 C2 FA | 	rdbyte	local22, objptr
0331c     34 FA 85 F1 | 	sub	objptr, #52
03320     4B 95 02 F1 | 	add	local21, local22
03324     3F 95 02 F1 | 	add	local21, local10
03328     02 94 66 F0 | 	shl	local21, #2
0332c     4A 8F 02 F1 | 	add	local18, local21
03330     47 8D 62 FC | 	wrlong	local17, local18
03334     38 7F 02 F1 | 	add	local10, local03
03338     40 7F 0A F2 | 	cmp	local10, local11 wz
0333c     70 FF 9F 5D |  if_ne	jmp	#LR__0099
03340                 | LR__0100
03340                 | ' 
03340                 | ' outtextxy(cursor_x,cursor_y,text)
03340     34 FA 05 F1 | 	add	objptr, #52
03344     FD 5E C2 FA | 	rdbyte	arg01, objptr
03348     01 FA 05 F1 | 	add	objptr, #1
0334c     FD 60 C2 FA | 	rdbyte	arg02, objptr
03350     35 FA 85 F1 | 	sub	objptr, #53
03354     36 63 02 F6 | 	mov	arg03, local01
03358     D0 FB BF FD | 	call	#_hng033rm_spin2_outtextxy
0335c                 | ' 
0335c                 | ' cursor_x:=ncx
0335c     34 FA 05 F1 | 	add	objptr, #52
03360     FD 7A 42 FC | 	wrbyte	local08, objptr
03364                 | ' cursor_y:=ncy
03364     01 FA 05 F1 | 	add	objptr, #1
03368     FD 72 42 FC | 	wrbyte	local04, objptr
0336c     35 FA 85 F1 | 	sub	objptr, #53
03370     AF F0 03 F6 | 	mov	ptra, fp
03374     BA 00 A0 FD | 	call	#popregs_
03378                 | _hng033rm_spin2_write_ret
03378     2D 00 64 FD | 	ret
0337c                 | 
0337c                 | ' 
0337c                 | ' ''-----------  Scroll the screen one line up
0337c                 | ' 
0337c                 | ' pub scrollup() | i
0337c                 | _hng033rm_spin2_scrollup
0337c     0D 5A 05 F6 | 	mov	COUNT_, #13
03380     B0 00 A0 FD | 	call	#pushregs_
03384                 | ' 
03384                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
03384     FD 5E 02 FB | 	rdlong	arg01, objptr
03388     2F 61 02 F6 | 	mov	arg02, arg01
0338c     90 FA 05 F1 | 	add	objptr, #144
03390     FD 6C 02 FB | 	rdlong	local01, objptr
03394     02 6C 66 F0 | 	shl	local01, #2
03398     36 61 02 F1 | 	add	arg02, local01
0339c     60 FA 85 F1 | 	sub	objptr, #96
033a0     FD 62 02 FB | 	rdlong	arg03, objptr
033a4     60 FA 05 F1 | 	add	objptr, #96
033a8     FD 6E 02 FB | 	rdlong	local02, objptr
033ac     90 FA 85 F1 | 	sub	objptr, #144
033b0     37 63 82 F1 | 	sub	arg03, local02
033b4     F8 39 B0 FD | 	call	#__system__longmove
033b8                 | ' repeat i from buflen-cpl to buflen-1
033b8     30 FA 05 F1 | 	add	objptr, #48
033bc     FD 70 02 FB | 	rdlong	local03, objptr
033c0     60 FA 05 F1 | 	add	objptr, #96
033c4     FD 72 02 FB | 	rdlong	local04, objptr
033c8     39 71 82 F1 | 	sub	local03, local04
033cc     60 FA 85 F1 | 	sub	objptr, #96
033d0     FD 74 02 FB | 	rdlong	local05, objptr
033d4     01 74 86 F1 | 	sub	local05, #1
033d8     FD 76 02 FB | 	rdlong	local06, objptr
033dc     60 FA 05 F1 | 	add	objptr, #96
033e0     FD 78 02 FB | 	rdlong	local07, objptr
033e4     90 FA 85 F1 | 	sub	objptr, #144
033e8     3C 77 82 F1 | 	sub	local06, local07
033ec     3B 75 5A F2 | 	cmps	local05, local06 wcz
033f0     01 7A 06 16 |  if_a	mov	local08, #1
033f4     01 7A 66 E6 |  if_be	neg	local08, #1
033f8     3D 75 02 F1 | 	add	local05, local08
033fc     40 CC 9F FE | 	loc	pa,	#(@LR__0102-@LR__0101)
03400     93 00 A0 FD | 	call	#FCACHE_LOAD_
03404                 | LR__0101
03404                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
03404     FD 7C 02 FB | 	rdlong	local09, objptr
03408     38 7F 02 F6 | 	mov	local10, local03
0340c     02 7E 66 F0 | 	shl	local10, #2
03410     3F 7D 02 F1 | 	add	local09, local10
03414     3E 81 02 FB | 	rdlong	local11, local09
03418     80 FF 7F FF 
0341c     00 80 06 F5 | 	and	local11, ##-65536
03420     20 80 46 F5 | 	or	local11, #32
03424     FD 82 02 FB | 	rdlong	local12, objptr
03428     38 85 02 F6 | 	mov	local13, local03
0342c     02 84 66 F0 | 	shl	local13, #2
03430     42 83 02 F1 | 	add	local12, local13
03434     41 81 62 FC | 	wrlong	local11, local12
03438     3D 71 02 F1 | 	add	local03, local08
0343c     3A 71 0A F2 | 	cmp	local03, local05 wz
03440     C0 FF 9F 5D |  if_ne	jmp	#LR__0101
03444                 | LR__0102
03444     AF F0 03 F6 | 	mov	ptra, fp
03448     BA 00 A0 FD | 	call	#popregs_
0344c                 | _hng033rm_spin2_scrollup_ret
0344c     2D 00 64 FD | 	ret
03450                 | 
03450                 | ' 
03450                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
03450                 | ' 
03450                 | ' pub crlf()
03450                 | _hng033rm_spin2_crlf
03450     02 5A 05 F6 | 	mov	COUNT_, #2
03454     B0 00 A0 FD | 	call	#pushregs_
03458                 | ' 
03458                 | ' cursor_x:=0
03458     34 FA 05 F1 | 	add	objptr, #52
0345c     FD 00 48 FC | 	wrbyte	#0, objptr
03460                 | ' cursor_y+=1
03460     01 FA 05 F1 | 	add	objptr, #1
03464     FD 6C C2 FA | 	rdbyte	local01, objptr
03468     01 6C 06 F1 | 	add	local01, #1
0346c     FD 6C 42 FC | 	wrbyte	local01, objptr
03470                 | ' if cursor_y>lines-1
03470     5F FA 05 F1 | 	add	objptr, #95
03474     FD 6C 02 FB | 	rdlong	local01, objptr
03478     01 6C 86 F1 | 	sub	local01, #1
0347c     5F FA 85 F1 | 	sub	objptr, #95
03480     FD 6E C2 FA | 	rdbyte	local02, objptr
03484     35 FA 85 F1 | 	sub	objptr, #53
03488     36 6F 5A F2 | 	cmps	local02, local01 wcz
0348c     1C 00 90 ED |  if_be	jmp	#LR__0103
03490                 | '   scrollup()
03490     E8 FE BF FD | 	call	#_hng033rm_spin2_scrollup
03494                 | '   cursor_y:=lines-1
03494     94 FA 05 F1 | 	add	objptr, #148
03498     FD 6C 02 FB | 	rdlong	local01, objptr
0349c     01 6C 86 F1 | 	sub	local01, #1
034a0     5F FA 85 F1 | 	sub	objptr, #95
034a4     FD 6C 42 FC | 	wrbyte	local01, objptr
034a8     35 FA 85 F1 | 	sub	objptr, #53
034ac                 | LR__0103
034ac     AF F0 03 F6 | 	mov	ptra, fp
034b0     BA 00 A0 FD | 	call	#popregs_
034b4                 | _hng033rm_spin2_crlf_ret
034b4     2D 00 64 FD | 	ret
034b8                 | 
034b8                 | ' 
034b8                 | ' 
034b8                 | ' 
034b8                 | ' pub inttostr2(i,d):result |q,pos,k,j
034b8                 | _hng033rm_spin2_inttostr2
034b8                 | ' 
034b8                 | ' j:=i
034b8                 | ' pos:=d-1
034b8     30 1F 02 F6 | 	mov	_var01, arg02
034bc     01 1E 86 F1 | 	sub	_var01, #1
034c0                 | ' k:=0
034c0                 | ' 
034c0                 | ' n_string[d]:=0
034c0     30 21 02 F6 | 	mov	_var02, arg02
034c4     44 FA 05 F1 | 	add	objptr, #68
034c8     FD 22 02 F6 | 	mov	_var03, objptr
034cc     FD 20 02 F1 | 	add	_var02, objptr
034d0     10 01 48 FC | 	wrbyte	#0, _var02
034d4                 | ' repeat k from 0 to d-1
034d4     00 24 06 F6 | 	mov	_var04, #0
034d8     01 60 86 F1 | 	sub	arg02, #1
034dc     30 27 02 F6 | 	mov	_var05, arg02
034e0     00 26 5E F2 | 	cmps	_var05, #0 wcz
034e4     44 FA 85 F1 | 	sub	objptr, #68
034e8     01 22 06 16 |  if_a	mov	_var03, #1
034ec     01 22 66 E6 |  if_be	neg	_var03, #1
034f0     11 27 02 F1 | 	add	_var05, _var03
034f4     28 CB 9F FE | 	loc	pa,	#(@LR__0105-@LR__0104)
034f8     93 00 A0 FD | 	call	#FCACHE_LOAD_
034fc                 | LR__0104
034fc                 | '   n_string[k]:=48
034fc     12 29 02 F6 | 	mov	_var06, _var04
03500     44 FA 05 F1 | 	add	objptr, #68
03504     FD 28 02 F1 | 	add	_var06, objptr
03508     14 61 48 FC | 	wrbyte	#48, _var06
0350c     11 25 02 F1 | 	add	_var04, _var03
03510     13 25 0A F2 | 	cmp	_var04, _var05 wz
03514     44 FA 85 F1 | 	sub	objptr, #68
03518     E0 FF 9F 5D |  if_ne	jmp	#LR__0104
0351c                 | LR__0105
0351c                 | ' 
0351c                 | ' if (j<>0)
0351c     00 5E 0E F2 | 	cmp	arg01, #0 wz
03520     40 00 90 AD |  if_e	jmp	#LR__0108
03524                 | ' 
03524                 | '   repeat while (pos>-1)
03524                 | LR__0106
03524     FF FF 7F FF 
03528     FF 1F 5E F2 | 	cmps	_var01, ##-1 wcz
0352c     34 00 90 ED |  if_be	jmp	#LR__0107
03530                 | '     q:=j+//10
03530     2F 99 02 F6 | 	mov	muldiva_, arg01
03534     0A 9A 06 F6 | 	mov	muldivb_, #10
03538     C2 00 A0 FD | 	call	#unsdivide_
0353c                 | '     q:=48+q
0353c     30 2A 06 F6 | 	mov	_var07, #48
03540     4C 2B 02 F1 | 	add	_var07, muldiva_
03544                 | '     n_string[pos]:=q
03544     0F 61 02 F6 | 	mov	arg02, _var01
03548     44 FA 05 F1 | 	add	objptr, #68
0354c     FD 60 02 F1 | 	add	arg02, objptr
03550     30 2B 42 FC | 	wrbyte	_var07, arg02
03554                 | '     j:=j+/10
03554     4D 5F 02 F6 | 	mov	arg01, muldivb_
03558                 | '     pos-=1
03558     01 1E 86 F1 | 	sub	_var01, #1
0355c     44 FA 85 F1 | 	sub	objptr, #68
03560     C0 FF 9F FD | 	jmp	#LR__0106
03564                 | LR__0107
03564                 | LR__0108
03564                 | ' 
03564                 | ' 
03564                 | ' q:=@n_string
03564     44 FA 05 F1 | 	add	objptr, #68
03568     FD 18 02 F6 | 	mov	result1, objptr
0356c     44 FA 85 F1 | 	sub	objptr, #68
03570                 | ' return q
03570                 | _hng033rm_spin2_inttostr2_ret
03570     2D 00 64 FD | 	ret
03574                 | 
03574                 | ' 
03574                 | ' pub plot1(x,y,c)
03574                 | _hng033rm_spin2_plot1
03574     04 5A 05 F6 | 	mov	COUNT_, #4
03578     B0 00 A0 FD | 	call	#pushregs_
0357c                 | ' putpixel(x,y,c)
0357c     D8 FA 05 F1 | 	add	objptr, #216
03580     FD 6C 02 FB | 	rdlong	local01, objptr
03584     D8 FA 85 F1 | 	sub	objptr, #216
03588     36 6F 02 FB | 	rdlong	local02, local01
0358c     04 6C 06 F1 | 	add	local01, #4
03590     36 71 02 FB | 	rdlong	local03, local01
03594     FD 72 02 F6 | 	mov	local04, objptr
03598     37 FB 01 F6 | 	mov	objptr, local02
0359c     2D 70 62 FD | 	call	local03
035a0     39 FB 01 F6 | 	mov	objptr, local04
035a4     AF F0 03 F6 | 	mov	ptra, fp
035a8     BA 00 A0 FD | 	call	#popregs_
035ac                 | _hng033rm_spin2_plot1_ret
035ac     2D 00 64 FD | 	ret
035b0                 | 
035b0                 | ' 
035b0                 | ' '*************************************************************************
035b0                 | ' '                                                                        *
035b0                 | ' '  Mode setting and driver start                                                          *
035b0                 | ' '                                                                        *
035b0                 | ' '*************************************************************************
035b0                 | ' 
035b0                 | ' ''---------  Set the graphics mode
035b0                 | ' 
035b0                 | ' 
035b0                 | ' 
035b0                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
035b0                 | _hng033rm_spin2_setmode
035b0     0A 5A 05 F6 | 	mov	COUNT_, #10
035b4     B0 00 A0 FD | 	call	#pushregs_
035b8     2F 6D 02 F6 | 	mov	local01, arg01
035bc                 | ' 
035bc                 | ' '' mode:tn_bb_cc_vv_hh
035bc                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
035bc                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
035bc                 | ' 
035bc                 | ' if mode==(512+192+48)
035bc     01 00 00 FF 
035c0     F0 6C 0E F2 | 	cmp	local01, ##752 wz
035c4                 | '   return 'no RAM
035c4     C0 05 90 AD |  if_e	jmp	#LR__0131
035c8                 | ' 
035c8                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
035c8     36 6F 02 F6 | 	mov	local02, local01
035cc     06 6E 46 F0 | 	shr	local02, #6
035d0     07 6E 06 F5 | 	and	local02, #7
035d4     08 6E 26 F3 | 	fle	local02, #8
035d8     37 71 02 F6 | 	mov	local03, local02
035dc     30 70 62 FD | 	jmprel	local03
035e0                 | LR__0109
035e0     20 00 90 FD | 	jmp	#LR__0110
035e4     48 00 90 FD | 	jmp	#LR__0111
035e8     70 00 90 FD | 	jmp	#LR__0112
035ec     98 00 90 FD | 	jmp	#LR__0113
035f0     C0 00 90 FD | 	jmp	#LR__0114
035f4     E8 00 90 FD | 	jmp	#LR__0115
035f8     10 01 90 FD | 	jmp	#LR__0116
035fc     38 01 90 FD | 	jmp	#LR__0117
03600     68 01 90 FD | 	jmp	#LR__0118
03604                 | LR__0110
03604                 | ' 
03604                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
03604     50 FA 05 F1 | 	add	objptr, #80
03608     FD 5E 02 F6 | 	mov	arg01, objptr
0360c     50 FA 85 F1 | 	sub	objptr, #80
03610     10 00 00 FF 
03614     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8280
03618     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
0361c     10 00 00 FF 
03620     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8280
03624     10 62 06 F6 | 	mov	arg03, #16
03628     84 37 B0 FD | 	call	#__system__longmove
0362c     3C 01 90 FD | 	jmp	#LR__0118
03630                 | LR__0111
03630                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
03630     50 FA 05 F1 | 	add	objptr, #80
03634     FD 5E 02 F6 | 	mov	arg01, objptr
03638     50 FA 85 F1 | 	sub	objptr, #80
0363c     10 00 00 FF 
03640     98 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8344
03644     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
03648     10 00 00 FF 
0364c     98 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8344
03650     10 62 06 F6 | 	mov	arg03, #16
03654     58 37 B0 FD | 	call	#__system__longmove
03658     10 01 90 FD | 	jmp	#LR__0118
0365c                 | LR__0112
0365c                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
0365c     50 FA 05 F1 | 	add	objptr, #80
03660     FD 5E 02 F6 | 	mov	arg01, objptr
03664     50 FA 85 F1 | 	sub	objptr, #80
03668     10 00 00 FF 
0366c     D8 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8408
03670     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
03674     10 00 00 FF 
03678     D8 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8408
0367c     10 62 06 F6 | 	mov	arg03, #16
03680     2C 37 B0 FD | 	call	#__system__longmove
03684     E4 00 90 FD | 	jmp	#LR__0118
03688                 | LR__0113
03688                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
03688     50 FA 05 F1 | 	add	objptr, #80
0368c     FD 5E 02 F6 | 	mov	arg01, objptr
03690     50 FA 85 F1 | 	sub	objptr, #80
03694     10 00 00 FF 
03698     18 07 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8472
0369c     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
036a0     10 00 00 FF 
036a4     18 07 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8472
036a8     10 62 06 F6 | 	mov	arg03, #16
036ac     00 37 B0 FD | 	call	#__system__longmove
036b0     B8 00 90 FD | 	jmp	#LR__0118
036b4                 | LR__0114
036b4                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
036b4     50 FA 05 F1 | 	add	objptr, #80
036b8     FD 5E 02 F6 | 	mov	arg01, objptr
036bc     50 FA 85 F1 | 	sub	objptr, #80
036c0     10 00 00 FF 
036c4     58 07 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8536
036c8     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
036cc     10 00 00 FF 
036d0     58 07 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8536
036d4     10 62 06 F6 | 	mov	arg03, #16
036d8     D4 36 B0 FD | 	call	#__system__longmove
036dc     8C 00 90 FD | 	jmp	#LR__0118
036e0                 | LR__0115
036e0                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
036e0     50 FA 05 F1 | 	add	objptr, #80
036e4     FD 5E 02 F6 | 	mov	arg01, objptr
036e8     50 FA 85 F1 | 	sub	objptr, #80
036ec     10 00 00 FF 
036f0     98 07 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8600
036f4     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
036f8     10 00 00 FF 
036fc     98 07 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8600
03700     10 62 06 F6 | 	mov	arg03, #16
03704     A8 36 B0 FD | 	call	#__system__longmove
03708     60 00 90 FD | 	jmp	#LR__0118
0370c                 | LR__0116
0370c                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
0370c     50 FA 05 F1 | 	add	objptr, #80
03710     FD 5E 02 F6 | 	mov	arg01, objptr
03714     50 FA 85 F1 | 	sub	objptr, #80
03718     10 00 00 FF 
0371c     D8 07 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8664
03720     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
03724     10 00 00 FF 
03728     D8 07 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8664
0372c     10 62 06 F6 | 	mov	arg03, #16
03730     7C 36 B0 FD | 	call	#__system__longmove
03734     34 00 90 FD | 	jmp	#LR__0118
03738                 | LR__0117
03738                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
03738     50 FA 05 F1 | 	add	objptr, #80
0373c     FD 72 02 F6 | 	mov	local04, objptr
03740     11 00 00 FF 
03744     18 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8728
03748     03 75 02 F6 | 	mov	local05, ptr__hng033rm_spin2_dat__
0374c     10 76 06 F6 | 	mov	local06, #16
03750     39 5F 02 F6 | 	mov	arg01, local04
03754     3A 61 02 F6 | 	mov	arg02, local05
03758     10 62 06 F6 | 	mov	arg03, #16
0375c     50 FA 85 F1 | 	sub	objptr, #80
03760     11 00 00 FF 
03764     18 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8728
03768     44 36 B0 FD | 	call	#__system__longmove
0376c                 | LR__0118
0376c                 | ' 
0376c                 | ' ' 4-bit graphics: do nothing with timings :)
0376c                 | ' if mode<512
0376c     01 00 00 FF 
03770     00 6C 5E F2 | 	cmps	local01, ##512 wcz
03774     1C 00 90 3D |  if_ae	jmp	#LR__0119
03778                 | '   palette_ptr:=@ataripalette
03778     0E 00 00 FF 
0377c     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7256
03780     18 FA 05 F1 | 	add	objptr, #24
03784     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
03788     18 FA 85 F1 | 	sub	objptr, #24
0378c     0E 00 00 FF 
03790     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7256
03794                 | LR__0119
03794                 | ' 
03794                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
03794     36 6F 02 F6 | 	mov	local02, local01
03798     01 00 00 FF 
0379c     30 6E 06 F5 | 	and	local02, ##560
037a0     01 00 00 FF 
037a4     30 6E 0E F2 | 	cmp	local02, ##560 wz
037a8     44 00 90 5D |  if_ne	jmp	#LR__0120
037ac                 | '   timings[5]:=4
037ac     64 FA 05 F1 | 	add	objptr, #100
037b0     FD 08 68 FC | 	wrlong	#4, objptr
037b4                 | '   timings[11]:=timings[11]<<1
037b4     18 FA 05 F1 | 	add	objptr, #24
037b8     FD 6E 02 FB | 	rdlong	local02, objptr
037bc     01 6E 66 F0 | 	shl	local02, #1
037c0     FD 6E 62 FC | 	wrlong	local02, objptr
037c4                 | '   putpixel:=p8
037c4     6C FA 05 F1 | 	add	objptr, #108
037c8     FD 6E 02 FB | 	rdlong	local02, objptr
037cc     10 FA 85 F1 | 	sub	objptr, #16
037d0     FD 6E 62 FC | 	wrlong	local02, objptr
037d4                 | '   palette_ptr:=@ataripalette
037d4     0E 00 00 FF 
037d8     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7256
037dc     C0 FA 85 F1 | 	sub	objptr, #192
037e0     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
037e4     18 FA 85 F1 | 	sub	objptr, #24
037e8     0E 00 00 FF 
037ec     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7256
037f0                 | LR__0120
037f0                 | ' 
037f0                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
037f0     36 6F 02 F6 | 	mov	local02, local01
037f4     01 00 00 FF 
037f8     30 6E 06 F5 | 	and	local02, ##560
037fc     01 00 00 FF 
03800     10 6E 0E F2 | 	cmp	local02, ##528 wz
03804     44 00 90 5D |  if_ne	jmp	#LR__0121
03808                 | '   timings[5]:=16
03808     64 FA 05 F1 | 	add	objptr, #100
0380c     FD 20 68 FC | 	wrlong	#16, objptr
03810                 | '   timings[11]:=timings[11]>>1
03810     18 FA 05 F1 | 	add	objptr, #24
03814     FD 6E 02 FB | 	rdlong	local02, objptr
03818     01 6E 46 F0 | 	shr	local02, #1
0381c     FD 6E 62 FC | 	wrlong	local02, objptr
03820                 | '   putpixel:=p2
03820     64 FA 05 F1 | 	add	objptr, #100
03824     FD 6E 02 FB | 	rdlong	local02, objptr
03828     08 FA 85 F1 | 	sub	objptr, #8
0382c     FD 6E 62 FC | 	wrlong	local02, objptr
03830                 | '   palette_ptr:=@fourcolors
03830     0E 00 00 FF 
03834     08 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7176
03838     C0 FA 85 F1 | 	sub	objptr, #192
0383c     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
03840     18 FA 85 F1 | 	sub	objptr, #24
03844     0E 00 00 FF 
03848     08 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7176
0384c                 | LR__0121
0384c                 | ' 
0384c                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
0384c     36 6F 02 F6 | 	mov	local02, local01
03850     01 00 00 FF 
03854     30 6E 06 F5 | 	and	local02, ##560
03858     01 00 00 FF 
0385c     00 6E 0E F2 | 	cmp	local02, ##512 wz
03860     44 00 90 5D |  if_ne	jmp	#LR__0122
03864                 | '   timings[5]:=32
03864     64 FA 05 F1 | 	add	objptr, #100
03868     FD 40 68 FC | 	wrlong	#32, objptr
0386c                 | '   timings[11]:=timings[11]>>2
0386c     18 FA 05 F1 | 	add	objptr, #24
03870     FD 6E 02 FB | 	rdlong	local02, objptr
03874     02 6E 46 F0 | 	shr	local02, #2
03878     FD 6E 62 FC | 	wrlong	local02, objptr
0387c                 | '   putpixel:=p1
0387c     60 FA 05 F1 | 	add	objptr, #96
03880     FD 6E 02 FB | 	rdlong	local02, objptr
03884     04 FA 85 F1 | 	sub	objptr, #4
03888     FD 6E 62 FC | 	wrlong	local02, objptr
0388c                 | '   palette_ptr:=@twocolors
0388c     0E 00 00 FF 
03890     00 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7168
03894     C0 FA 85 F1 | 	sub	objptr, #192
03898     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
0389c     18 FA 85 F1 | 	sub	objptr, #24
038a0     0E 00 00 FF 
038a4     00 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7168
038a8                 | LR__0122
038a8                 | ' 
038a8                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
038a8     36 6F 02 F6 | 	mov	local02, local01
038ac     01 00 00 FF 
038b0     30 6E 06 F5 | 	and	local02, ##560
038b4     01 00 00 FF 
038b8     20 6E 0E F2 | 	cmp	local02, ##544 wz
038bc     2C 00 90 5D |  if_ne	jmp	#LR__0123
038c0                 | '   putpixel:=p4
038c0     E4 FA 05 F1 | 	add	objptr, #228
038c4     FD 6E 02 FB | 	rdlong	local02, objptr
038c8     0C FA 85 F1 | 	sub	objptr, #12
038cc     FD 6E 62 FC | 	wrlong	local02, objptr
038d0                 | '   palette_ptr:=@vga16
038d0     0E 00 00 FF 
038d4     18 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##7192
038d8     C0 FA 85 F1 | 	sub	objptr, #192
038dc     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
038e0     18 FA 85 F1 | 	sub	objptr, #24
038e4     0E 00 00 FF 
038e8     18 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##7192
038ec                 | LR__0123
038ec                 | ' 
038ec                 | ' repeat i from 0 to 4
038ec     00 78 06 F6 | 	mov	local07, #0
038f0     68 C7 9F FE | 	loc	pa,	#(@LR__0125-@LR__0124)
038f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
038f8                 | LR__0124
038f8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
038f8     3C 73 02 F6 | 	mov	local04, local07
038fc     02 72 66 F0 | 	shl	local04, #2
03900     50 FA 05 F1 | 	add	objptr, #80
03904     FD 74 02 F6 | 	mov	local05, objptr
03908     FD 72 02 F1 | 	add	local04, objptr
0390c     2C FA 85 F1 | 	sub	objptr, #44
03910     FD 7A 02 FB | 	rdlong	local08, objptr
03914     3D 77 02 F6 | 	mov	local06, local08
03918     11 76 66 F0 | 	shl	local06, #17
0391c     39 6F 02 FB | 	rdlong	local02, local04
03920     3B 6F 02 F1 | 	add	local02, local06
03924     80 40 38 FF 
03928     00 6E 06 F1 | 	add	local02, ##1887502336
0392c     3C 7D 02 F6 | 	mov	local09, local07
03930     02 7C 66 F0 | 	shl	local09, #2
03934     2C FA 05 F1 | 	add	objptr, #44
03938     FD 7E 02 F6 | 	mov	local10, objptr
0393c     FD 7C 02 F1 | 	add	local09, objptr
03940     3E 6F 62 FC | 	wrlong	local02, local09
03944     01 78 06 F1 | 	add	local07, #1
03948     05 78 5E F2 | 	cmps	local07, #5 wcz
0394c     50 FA 85 F1 | 	sub	objptr, #80
03950     A4 FF 9F CD |  if_b	jmp	#LR__0124
03954                 | LR__0125
03954                 | ' timings[5]:=timings[5]+hdmibase<<17
03954     24 FA 05 F1 | 	add	objptr, #36
03958     FD 72 02 FB | 	rdlong	local04, objptr
0395c     11 72 66 F0 | 	shl	local04, #17
03960     40 FA 05 F1 | 	add	objptr, #64
03964     FD 76 02 FB | 	rdlong	local06, objptr
03968     3B 6F 02 F6 | 	mov	local02, local06
0396c     39 6F 02 F1 | 	add	local02, local04
03970     FD 6E 62 FC | 	wrlong	local02, objptr
03974                 | ' clkfreq:=timings[13]
03974     20 FA 05 F1 | 	add	objptr, #32
03978     FD 6E 02 FB | 	rdlong	local02, objptr
0397c     14 6E 66 FC | 	wrlong	local02, #20
03980                 | ' hubset(timings[14])
03980     04 FA 05 F1 | 	add	objptr, #4
03984     FD 5E 02 FB | 	rdlong	arg01, objptr
03988     88 FA 85 F1 | 	sub	objptr, #136
0398c     00 5E 62 FD | 	hubset	arg01
03990                 | ' waitms(1)
03990     01 5E 06 F6 | 	mov	arg01, #1
03994     C4 36 B0 FD | 	call	#__system___waitms
03998                 | ' 
03998                 | ' 
03998                 | ' xzoom:=1<<(mode & 3)
03998     36 73 02 F6 | 	mov	local04, local01
0399c     03 72 06 F5 | 	and	local04, #3
039a0     39 6F C2 F9 | 	decod	local02, local04
039a4     CC FA 05 F1 | 	add	objptr, #204
039a8     FD 6E 62 FC | 	wrlong	local02, objptr
039ac                 | ' 
039ac                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
039ac     37 73 02 F6 | 	mov	local04, local02
039b0     CC FA 85 F1 | 	sub	objptr, #204
039b4     08 72 0E F2 | 	cmp	local04, #8 wz
039b8     24 00 90 5D |  if_ne	jmp	#LR__0126
039bc     36 75 02 F6 | 	mov	local05, local01
039c0     04 74 46 F0 | 	shr	local05, #4
039c4     03 74 06 F5 | 	and	local05, #3
039c8     03 74 0E F2 | 	cmp	local05, #3 wz
039cc     10 00 90 AD |  if_e	jmp	#LR__0126
039d0                 | '   xzoom:=4
039d0     04 6E 06 F6 | 	mov	local02, #4
039d4     CC FA 05 F1 | 	add	objptr, #204
039d8     FD 08 68 FC | 	wrlong	#4, objptr
039dc     CC FA 85 F1 | 	sub	objptr, #204
039e0                 | LR__0126
039e0                 | ' 
039e0                 | ' yzoom:=1<<((mode>>2) & 3)
039e0     36 73 02 F6 | 	mov	local04, local01
039e4     02 72 46 F0 | 	shr	local04, #2
039e8     03 72 06 F5 | 	and	local04, #3
039ec     39 6F C2 F9 | 	decod	local02, local04
039f0     D0 FA 05 F1 | 	add	objptr, #208
039f4     FD 6E 62 FC | 	wrlong	local02, objptr
039f8                 | ' azoom:=xzoom*yzoom
039f8     04 FA 85 F1 | 	sub	objptr, #4
039fc     FD 72 02 FB | 	rdlong	local04, objptr
03a00     04 FA 05 F1 | 	add	objptr, #4
03a04     FD 76 02 FB | 	rdlong	local06, objptr
03a08     3B 73 02 FD | 	qmul	local04, local06
03a0c     18 6E 62 FD | 	getqx	local02
03a10     04 FA 05 F1 | 	add	objptr, #4
03a14     FD 6E 62 FC | 	wrlong	local02, objptr
03a18                 | ' 
03a18                 | ' cpl:=timings[11]
03a18     58 FA 85 F1 | 	sub	objptr, #88
03a1c     FD 6E 02 FB | 	rdlong	local02, objptr
03a20     14 FA 05 F1 | 	add	objptr, #20
03a24     FD 6E 62 FC | 	wrlong	local02, objptr
03a28     90 FA 85 F1 | 	sub	objptr, #144
03a2c                 | ' if (mode<512)
03a2c     01 00 00 FF 
03a30     00 6C 5E F2 | 	cmps	local01, ##512 wcz
03a34     60 00 90 3D |  if_ae	jmp	#LR__0127
03a38                 | '   lines:=(timings[12]>>4)+/yzoom
03a38     80 FA 05 F1 | 	add	objptr, #128
03a3c     FD 98 02 FB | 	rdlong	muldiva_, objptr
03a40     04 98 46 F0 | 	shr	muldiva_, #4
03a44     50 FA 05 F1 | 	add	objptr, #80
03a48     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03a4c     D0 FA 85 F1 | 	sub	objptr, #208
03a50     C2 00 A0 FD | 	call	#unsdivide_
03a54     94 FA 05 F1 | 	add	objptr, #148
03a58     FD 9A 62 FC | 	wrlong	muldivb_, objptr
03a5c                 | '   if ((timings[12]>>4)+//yzoom) <>0
03a5c     14 FA 85 F1 | 	sub	objptr, #20
03a60     FD 98 02 FB | 	rdlong	muldiva_, objptr
03a64     04 98 46 F0 | 	shr	muldiva_, #4
03a68     50 FA 05 F1 | 	add	objptr, #80
03a6c     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03a70     D0 FA 85 F1 | 	sub	objptr, #208
03a74     C2 00 A0 FD | 	call	#unsdivide_
03a78     00 98 0E F2 | 	cmp	muldiva_, #0 wz
03a7c     AC 00 90 AD |  if_e	jmp	#LR__0130
03a80                 | '     lines +=1
03a80     94 FA 05 F1 | 	add	objptr, #148
03a84     FD 6E 02 FB | 	rdlong	local02, objptr
03a88     01 6E 06 F1 | 	add	local02, #1
03a8c     FD 6E 62 FC | 	wrlong	local02, objptr
03a90     94 FA 85 F1 | 	sub	objptr, #148
03a94                 | ' 
03a94                 | ' else
03a94     94 00 90 FD | 	jmp	#LR__0130
03a98                 | LR__0127
03a98                 | '   lines:=timings[12]/yzoom
03a98     80 FA 05 F1 | 	add	objptr, #128
03a9c     FD 98 02 FB | 	rdlong	muldiva_, objptr
03aa0     50 FA 05 F1 | 	add	objptr, #80
03aa4     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03aa8     D0 FA 85 F1 | 	sub	objptr, #208
03aac     C6 00 A0 FD | 	call	#divide_
03ab0     94 FA 05 F1 | 	add	objptr, #148
03ab4     FD 9A 62 FC | 	wrlong	muldivb_, objptr
03ab8                 | '   if cpl//xzoom==0
03ab8     04 FA 85 F1 | 	sub	objptr, #4
03abc     FD 98 02 FB | 	rdlong	muldiva_, objptr
03ac0     3C FA 05 F1 | 	add	objptr, #60
03ac4     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03ac8     CC FA 85 F1 | 	sub	objptr, #204
03acc     C6 00 A0 FD | 	call	#divide_
03ad0     00 98 0E F2 | 	cmp	muldiva_, #0 wz
03ad4     28 00 90 5D |  if_ne	jmp	#LR__0128
03ad8                 | '     cpl:=cpl/xzoom
03ad8     90 FA 05 F1 | 	add	objptr, #144
03adc     FD 98 02 FB | 	rdlong	muldiva_, objptr
03ae0     3C FA 05 F1 | 	add	objptr, #60
03ae4     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03ae8     CC FA 85 F1 | 	sub	objptr, #204
03aec     C6 00 A0 FD | 	call	#divide_
03af0     90 FA 05 F1 | 	add	objptr, #144
03af4     FD 9A 62 FC | 	wrlong	muldivb_, objptr
03af8     90 FA 85 F1 | 	sub	objptr, #144
03afc                 | '   else
03afc     2C 00 90 FD | 	jmp	#LR__0129
03b00                 | LR__0128
03b00                 | '     cpl:=cpl/xzoom+1
03b00     90 FA 05 F1 | 	add	objptr, #144
03b04     FD 98 02 FB | 	rdlong	muldiva_, objptr
03b08     3C FA 05 F1 | 	add	objptr, #60
03b0c     FD 9A 02 FB | 	rdlong	muldivb_, objptr
03b10     CC FA 85 F1 | 	sub	objptr, #204
03b14     C6 00 A0 FD | 	call	#divide_
03b18     4D 6F 02 F6 | 	mov	local02, muldivb_
03b1c     01 6E 06 F1 | 	add	local02, #1
03b20     90 FA 05 F1 | 	add	objptr, #144
03b24     FD 6E 62 FC | 	wrlong	local02, objptr
03b28     90 FA 85 F1 | 	sub	objptr, #144
03b2c                 | LR__0129
03b2c                 | LR__0130
03b2c                 | ' 
03b2c                 | ' buflen:=(cpl*lines)
03b2c     90 FA 05 F1 | 	add	objptr, #144
03b30     FD 72 02 FB | 	rdlong	local04, objptr
03b34     04 FA 05 F1 | 	add	objptr, #4
03b38     FD 76 02 FB | 	rdlong	local06, objptr
03b3c     3B 73 02 FD | 	qmul	local04, local06
03b40     18 6E 62 FD | 	getqx	local02
03b44     64 FA 85 F1 | 	sub	objptr, #100
03b48     FD 6E 62 FC | 	wrlong	local02, objptr
03b4c                 | ' buf_ptr:=$80000-4*buflen
03b4c     37 73 02 F6 | 	mov	local04, local02
03b50     30 FA 85 F1 | 	sub	objptr, #48
03b54     02 72 66 F0 | 	shl	local04, #2
03b58     13 6E C6 F9 | 	decod	local02, #19
03b5c     39 6F 82 F1 | 	sub	local02, local04
03b60     FD 6E 62 FC | 	wrlong	local02, objptr
03b64                 | ' mode_ptr:=@timings
03b64     50 FA 05 F1 | 	add	objptr, #80
03b68     FD 6E 02 F6 | 	mov	local02, objptr
03b6c     3C FA 85 F1 | 	sub	objptr, #60
03b70     FD 6E 62 FC | 	wrlong	local02, objptr
03b74                 | ' graphmode:=mode
03b74     B0 FA 05 F1 | 	add	objptr, #176
03b78     FD 6C 62 FC | 	wrlong	local01, objptr
03b7c     C4 FA 85 F1 | 	sub	objptr, #196
03b80                 | ' makedl(mode)
03b80     36 5F 02 F6 | 	mov	arg01, local01
03b84     0C 00 B0 FD | 	call	#_hng033rm_spin2_makedl
03b88                 | LR__0131
03b88     AF F0 03 F6 | 	mov	ptra, fp
03b8c     BA 00 A0 FD | 	call	#popregs_
03b90                 | _hng033rm_spin2_setmode_ret
03b90     2D 00 64 FD | 	ret
03b94                 | 
03b94                 | ' 
03b94                 | ' 
03b94                 | ' 
03b94                 | ' 
03b94                 | ' '---------- Make a display list
03b94                 | ' 
03b94                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
03b94                 | _hng033rm_spin2_makedl
03b94                 | ' 
03b94                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
03b94                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
03b94                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
03b94                 | ' 
03b94                 | ' '   0 - display a up/down border line
03b94                 | ' 
03b94                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
03b94                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
03b94                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
03b94                 | ' '    nnnn - font line to display, 0..15
03b94                 | ' '    llllll - character line, determines the cursor Y position
03b94                 | ' 
03b94                 | ' 
03b94                 | ' if (mode &256==0)
03b94     00 5F CE F7 | 	test	arg01, #256 wz
03b98     1C 00 90 5D |  if_ne	jmp	#LR__0132
03b9c                 | '   dl_ptr:=buf_ptr-4*576
03b9c     FD 1E 02 FB | 	rdlong	_var01, objptr
03ba0     04 00 00 FF 
03ba4     00 1F 86 F1 | 	sub	_var01, ##2304
03ba8     1C FA 05 F1 | 	add	objptr, #28
03bac     FD 1E 62 FC | 	wrlong	_var01, objptr
03bb0     1C FA 85 F1 | 	sub	objptr, #28
03bb4                 | ' else
03bb4     18 00 90 FD | 	jmp	#LR__0133
03bb8                 | LR__0132
03bb8                 | '   dl_ptr:=buf_ptr-4*496
03bb8     FD 1E 02 FB | 	rdlong	_var01, objptr
03bbc     03 00 00 FF 
03bc0     C0 1F 86 F1 | 	sub	_var01, ##1984
03bc4     1C FA 05 F1 | 	add	objptr, #28
03bc8     FD 1E 62 FC | 	wrlong	_var01, objptr
03bcc     1C FA 85 F1 | 	sub	objptr, #28
03bd0                 | LR__0133
03bd0                 | '  ' dl_ptr:=buf_ptr-4*540
03bd0                 | ' 
03bd0                 | ' vzoom:=((mode>>2) & 3)
03bd0     2F 21 02 F6 | 	mov	_var02, arg01
03bd4     02 20 46 F0 | 	shr	_var02, #2
03bd8     03 20 06 F5 | 	and	_var02, #3
03bdc                 | ' 
03bdc                 | ' 
03bdc                 | ' if mode<512 '' text modes
03bdc     01 00 00 FF 
03be0     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03be4     E8 01 90 3D |  if_ae	jmp	#LR__0141
03be8                 | ' 
03be8                 | '   if timings[6]>0 'borders
03be8     68 FA 05 F1 | 	add	objptr, #104
03bec     FD 1E 02 FB | 	rdlong	_var01, objptr
03bf0     68 FA 85 F1 | 	sub	objptr, #104
03bf4     00 1E 5E F2 | 	cmps	_var01, #0 wcz
03bf8     D4 00 90 ED |  if_be	jmp	#LR__0138
03bfc                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03bfc     00 22 06 F6 | 	mov	_var03, #0
03c00     68 FA 05 F1 | 	add	objptr, #104
03c04     FD 24 02 FB | 	rdlong	_var04, objptr
03c08     68 FA 85 F1 | 	sub	objptr, #104
03c0c     01 24 86 F1 | 	sub	_var04, #1
03c10     00 24 5E F2 | 	cmps	_var04, #0 wcz
03c14     01 26 06 16 |  if_a	mov	_var05, #1
03c18     01 26 66 E6 |  if_be	neg	_var05, #1
03c1c     13 29 02 F6 | 	mov	_var06, _var05
03c20     13 25 02 F1 | 	add	_var04, _var05
03c24     00 C4 9F FE | 	loc	pa,	#(@LR__0135-@LR__0134)
03c28     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c2c                 | LR__0134
03c2c                 | '       long[dl_ptr+4*i]:=$0
03c2c     1C FA 05 F1 | 	add	objptr, #28
03c30     FD 2A 02 FB | 	rdlong	_var07, objptr
03c34     1C FA 85 F1 | 	sub	objptr, #28
03c38     11 2D 02 F6 | 	mov	_var08, _var03
03c3c     02 2C 66 F0 | 	shl	_var08, #2
03c40     16 2B 02 F1 | 	add	_var07, _var08
03c44     15 01 68 FC | 	wrlong	#0, _var07
03c48     14 23 02 F1 | 	add	_var03, _var06
03c4c     12 23 0A F2 | 	cmp	_var03, _var04 wz
03c50     D8 FF 9F 5D |  if_ne	jmp	#LR__0134
03c54                 | LR__0135
03c54                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03c54     68 FA 05 F1 | 	add	objptr, #104
03c58     FD 22 02 FB | 	rdlong	_var03, objptr
03c5c     18 FA 05 F1 | 	add	objptr, #24
03c60     FD 26 02 FB | 	rdlong	_var05, objptr
03c64     13 23 02 F1 | 	add	_var03, _var05
03c68     0C FA 05 F1 | 	add	objptr, #12
03c6c     FD 2E 02 FB | 	rdlong	_var09, objptr
03c70     01 2E 86 F1 | 	sub	_var09, #1
03c74     24 FA 85 F1 | 	sub	objptr, #36
03c78     FD 30 02 FB | 	rdlong	_var10, objptr
03c7c     18 FA 05 F1 | 	add	objptr, #24
03c80     FD 32 02 FB | 	rdlong	_var11, objptr
03c84     80 FA 85 F1 | 	sub	objptr, #128
03c88     19 31 02 F1 | 	add	_var10, _var11
03c8c     18 2F 5A F2 | 	cmps	_var09, _var10 wcz
03c90     01 2C 06 16 |  if_a	mov	_var08, #1
03c94     01 2C 66 E6 |  if_be	neg	_var08, #1
03c98     16 35 02 F6 | 	mov	_var12, _var08
03c9c     16 2F 02 F1 | 	add	_var09, _var08
03ca0     84 C3 9F FE | 	loc	pa,	#(@LR__0137-@LR__0136)
03ca4     93 00 A0 FD | 	call	#FCACHE_LOAD_
03ca8                 | LR__0136
03ca8                 | '       long[dl_ptr+4*i]:=$0
03ca8     1C FA 05 F1 | 	add	objptr, #28
03cac     FD 36 02 FB | 	rdlong	_var13, objptr
03cb0     1C FA 85 F1 | 	sub	objptr, #28
03cb4     11 39 02 F6 | 	mov	_var14, _var03
03cb8     02 38 66 F0 | 	shl	_var14, #2
03cbc     1C 37 02 F1 | 	add	_var13, _var14
03cc0     1B 01 68 FC | 	wrlong	#0, _var13
03cc4     1A 23 02 F1 | 	add	_var03, _var12
03cc8     17 23 0A F2 | 	cmp	_var03, _var09 wz
03ccc     D8 FF 9F 5D |  if_ne	jmp	#LR__0136
03cd0                 | LR__0137
03cd0                 | LR__0138
03cd0                 | '   lpc:=16<<vzoom
03cd0     10 3A 06 F6 | 	mov	_var15, #16
03cd4     10 3B 62 F0 | 	shl	_var15, _var02
03cd8                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03cd8     68 FA 05 F1 | 	add	objptr, #104
03cdc     FD 22 02 FB | 	rdlong	_var03, objptr
03ce0     11 3D 02 F6 | 	mov	_var16, _var03
03ce4     18 FA 05 F1 | 	add	objptr, #24
03ce8     FD 3E 02 FB | 	rdlong	_var17, objptr
03cec     1F 3D 02 F1 | 	add	_var16, _var17
03cf0     01 3C 86 F1 | 	sub	_var16, #1
03cf4     18 FA 85 F1 | 	sub	objptr, #24
03cf8     FD 2C 02 FB | 	rdlong	_var08, objptr
03cfc     68 FA 85 F1 | 	sub	objptr, #104
03d00     16 3D 5A F2 | 	cmps	_var16, _var08 wcz
03d04     01 40 06 16 |  if_a	mov	_var18, #1
03d08     01 40 66 E6 |  if_be	neg	_var18, #1
03d0c     20 43 02 F6 | 	mov	_var19, _var18
03d10     20 3D 02 F1 | 	add	_var16, _var18
03d14     9C C3 9F FE | 	loc	pa,	#(@LR__0140-@LR__0139)
03d18     93 00 A0 FD | 	call	#FCACHE_LOAD_
03d1c                 | LR__0139
03d1c                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
03d1c     11 99 02 F6 | 	mov	muldiva_, _var03
03d20     68 FA 05 F1 | 	add	objptr, #104
03d24     FD 44 02 FB | 	rdlong	_var20, objptr
03d28     68 FA 85 F1 | 	sub	objptr, #104
03d2c     22 99 82 F1 | 	sub	muldiva_, _var20
03d30     1D 9B 02 F6 | 	mov	muldivb_, _var15
03d34     C2 00 A0 FD | 	call	#unsdivide_
03d38     10 99 42 F0 | 	shr	muldiva_, _var02
03d3c     4C 47 02 F6 | 	mov	_var21, muldiva_
03d40                 | '     charline:=(i-timings[6])+/lpc
03d40     11 99 02 F6 | 	mov	muldiva_, _var03
03d44     68 FA 05 F1 | 	add	objptr, #104
03d48     FD 48 02 FB | 	rdlong	_var22, objptr
03d4c     68 FA 85 F1 | 	sub	objptr, #104
03d50     24 99 82 F1 | 	sub	muldiva_, _var22
03d54     1D 9B 02 F6 | 	mov	muldivb_, _var15
03d58     C2 00 A0 FD | 	call	#unsdivide_
03d5c     4D 4B 02 F6 | 	mov	_var23, muldivb_
03d60                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
03d60     FD 32 02 FB | 	rdlong	_var11, objptr
03d64     90 FA 05 F1 | 	add	objptr, #144
03d68     FD 44 02 FB | 	rdlong	_var20, objptr
03d6c     25 45 02 FD | 	qmul	_var20, _var23
03d70     18 4C 62 FD | 	getqx	_var24
03d74     02 4C 66 F0 | 	shl	_var24, #2
03d78     26 33 02 F1 | 	add	_var11, _var24
03d7c     2F 39 02 F6 | 	mov	_var14, arg01
03d80     03 38 06 F5 | 	and	_var14, #3
03d84     1C 33 02 F1 | 	add	_var11, _var14
03d88                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
03d88     0C 32 66 F0 | 	shl	_var11, #12
03d8c     23 49 02 F6 | 	mov	_var22, _var21
03d90     08 48 66 F0 | 	shl	_var22, #8
03d94     24 33 02 F1 | 	add	_var11, _var22
03d98     25 45 02 F6 | 	mov	_var20, _var23
03d9c     02 44 66 F0 | 	shl	_var20, #2
03da0     22 33 02 F1 | 	add	_var11, _var20
03da4     01 32 06 F1 | 	add	_var11, #1
03da8     74 FA 85 F1 | 	sub	objptr, #116
03dac     FD 36 02 FB | 	rdlong	_var13, objptr
03db0     1C FA 85 F1 | 	sub	objptr, #28
03db4     11 39 02 F6 | 	mov	_var14, _var03
03db8     02 38 66 F0 | 	shl	_var14, #2
03dbc     1C 37 02 F1 | 	add	_var13, _var14
03dc0     1B 33 62 FC | 	wrlong	_var11, _var13
03dc4     21 23 02 F1 | 	add	_var03, _var19
03dc8     1E 23 0A F2 | 	cmp	_var03, _var16 wz
03dcc     4C FF 9F 5D |  if_ne	jmp	#LR__0139
03dd0                 | LR__0140
03dd0                 | LR__0141
03dd0                 | ' 
03dd0                 | ' 
03dd0                 | ' 
03dd0                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
03dd0     01 00 00 FF 
03dd4     00 5E 5E F2 | 	cmps	arg01, ##512 wcz
03dd8     A8 01 90 CD |  if_b	jmp	#LR__0149
03ddc                 | ' 
03ddc                 | '   if timings[6]>0 'borders
03ddc     68 FA 05 F1 | 	add	objptr, #104
03de0     FD 1E 02 FB | 	rdlong	_var01, objptr
03de4     68 FA 85 F1 | 	sub	objptr, #104
03de8     00 1E 5E F2 | 	cmps	_var01, #0 wcz
03dec     D4 00 90 ED |  if_be	jmp	#LR__0146
03df0                 | '     repeat i from 0 to timings[6]-1 '0 to -1
03df0     00 22 06 F6 | 	mov	_var03, #0
03df4     68 FA 05 F1 | 	add	objptr, #104
03df8     FD 4E 02 FB | 	rdlong	_var25, objptr
03dfc     68 FA 85 F1 | 	sub	objptr, #104
03e00     01 4E 86 F1 | 	sub	_var25, #1
03e04     00 4E 5E F2 | 	cmps	_var25, #0 wcz
03e08     01 26 06 16 |  if_a	mov	_var05, #1
03e0c     01 26 66 E6 |  if_be	neg	_var05, #1
03e10     13 51 02 F6 | 	mov	_var26, _var05
03e14     13 4F 02 F1 | 	add	_var25, _var05
03e18     0C C2 9F FE | 	loc	pa,	#(@LR__0143-@LR__0142)
03e1c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03e20                 | LR__0142
03e20                 | '       long[dl_ptr+4*i]:=$0
03e20     1C FA 05 F1 | 	add	objptr, #28
03e24     FD 2A 02 FB | 	rdlong	_var07, objptr
03e28     1C FA 85 F1 | 	sub	objptr, #28
03e2c     11 2D 02 F6 | 	mov	_var08, _var03
03e30     02 2C 66 F0 | 	shl	_var08, #2
03e34     16 2B 02 F1 | 	add	_var07, _var08
03e38     15 01 68 FC | 	wrlong	#0, _var07
03e3c     28 23 02 F1 | 	add	_var03, _var26
03e40     27 23 0A F2 | 	cmp	_var03, _var25 wz
03e44     D8 FF 9F 5D |  if_ne	jmp	#LR__0142
03e48                 | LR__0143
03e48                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
03e48     68 FA 05 F1 | 	add	objptr, #104
03e4c     FD 22 02 FB | 	rdlong	_var03, objptr
03e50     18 FA 05 F1 | 	add	objptr, #24
03e54     FD 26 02 FB | 	rdlong	_var05, objptr
03e58     13 23 02 F1 | 	add	_var03, _var05
03e5c     0C FA 05 F1 | 	add	objptr, #12
03e60     FD 52 02 FB | 	rdlong	_var27, objptr
03e64     01 52 86 F1 | 	sub	_var27, #1
03e68     24 FA 85 F1 | 	sub	objptr, #36
03e6c     FD 30 02 FB | 	rdlong	_var10, objptr
03e70     18 FA 05 F1 | 	add	objptr, #24
03e74     FD 32 02 FB | 	rdlong	_var11, objptr
03e78     80 FA 85 F1 | 	sub	objptr, #128
03e7c     19 31 02 F1 | 	add	_var10, _var11
03e80     18 53 5A F2 | 	cmps	_var27, _var10 wcz
03e84     01 2C 06 16 |  if_a	mov	_var08, #1
03e88     01 2C 66 E6 |  if_be	neg	_var08, #1
03e8c     16 55 02 F6 | 	mov	_var28, _var08
03e90     16 53 02 F1 | 	add	_var27, _var08
03e94     90 C1 9F FE | 	loc	pa,	#(@LR__0145-@LR__0144)
03e98     93 00 A0 FD | 	call	#FCACHE_LOAD_
03e9c                 | LR__0144
03e9c                 | '       long[dl_ptr+4*i]:=$0
03e9c     1C FA 05 F1 | 	add	objptr, #28
03ea0     FD 36 02 FB | 	rdlong	_var13, objptr
03ea4     1C FA 85 F1 | 	sub	objptr, #28
03ea8     11 39 02 F6 | 	mov	_var14, _var03
03eac     02 38 66 F0 | 	shl	_var14, #2
03eb0     1C 37 02 F1 | 	add	_var13, _var14
03eb4     1B 01 68 FC | 	wrlong	#0, _var13
03eb8     2A 23 02 F1 | 	add	_var03, _var28
03ebc     29 23 0A F2 | 	cmp	_var03, _var27 wz
03ec0     D8 FF 9F 5D |  if_ne	jmp	#LR__0144
03ec4                 | LR__0145
03ec4                 | LR__0146
03ec4                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
03ec4     68 FA 05 F1 | 	add	objptr, #104
03ec8     FD 22 02 FB | 	rdlong	_var03, objptr
03ecc     11 57 02 F6 | 	mov	_var29, _var03
03ed0     18 FA 05 F1 | 	add	objptr, #24
03ed4     FD 3E 02 FB | 	rdlong	_var17, objptr
03ed8     1F 57 02 F1 | 	add	_var29, _var17
03edc     01 56 86 F1 | 	sub	_var29, #1
03ee0     18 FA 85 F1 | 	sub	objptr, #24
03ee4     FD 2C 02 FB | 	rdlong	_var08, objptr
03ee8     68 FA 85 F1 | 	sub	objptr, #104
03eec     16 57 5A F2 | 	cmps	_var29, _var08 wcz
03ef0     01 40 06 16 |  if_a	mov	_var18, #1
03ef4     01 40 66 E6 |  if_be	neg	_var18, #1
03ef8     20 59 02 F6 | 	mov	_var30, _var18
03efc     20 57 02 F1 | 	add	_var29, _var18
03f00     78 C1 9F FE | 	loc	pa,	#(@LR__0148-@LR__0147)
03f04     93 00 A0 FD | 	call	#FCACHE_LOAD_
03f08                 | LR__0147
03f08                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
03f08     FD 32 02 FB | 	rdlong	_var11, objptr
03f0c     11 49 02 F6 | 	mov	_var22, _var03
03f10     68 FA 05 F1 | 	add	objptr, #104
03f14     FD 44 02 FB | 	rdlong	_var20, objptr
03f18     22 49 82 F1 | 	sub	_var22, _var20
03f1c     10 49 42 F0 | 	shr	_var22, _var02
03f20     28 FA 05 F1 | 	add	objptr, #40
03f24     FD 38 02 FB | 	rdlong	_var14, objptr
03f28     24 39 02 FD | 	qmul	_var14, _var22
03f2c     18 5A 62 FD | 	getqx	_var31
03f30     02 5A 66 F0 | 	shl	_var31, #2
03f34     2D 33 02 F1 | 	add	_var11, _var31
03f38     2F 5D 02 F6 | 	mov	_var32, arg01
03f3c     03 5C 06 F5 | 	and	_var32, #3
03f40     2E 33 02 F1 | 	add	_var11, _var32
03f44                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
03f44     0C 32 66 F0 | 	shl	_var11, #12
03f48     02 32 06 F1 | 	add	_var11, #2
03f4c     2F 49 02 F6 | 	mov	_var22, arg01
03f50     30 48 06 F5 | 	and	_var22, #48
03f54     02 48 46 F0 | 	shr	_var22, #2
03f58     24 33 02 F1 | 	add	_var11, _var22
03f5c     74 FA 85 F1 | 	sub	objptr, #116
03f60     FD 44 02 FB | 	rdlong	_var20, objptr
03f64     1C FA 85 F1 | 	sub	objptr, #28
03f68     11 4D 02 F6 | 	mov	_var24, _var03
03f6c     02 4C 66 F0 | 	shl	_var24, #2
03f70     26 45 02 F1 | 	add	_var20, _var24
03f74     22 33 62 FC | 	wrlong	_var11, _var20
03f78     2C 23 02 F1 | 	add	_var03, _var30
03f7c     2B 23 0A F2 | 	cmp	_var03, _var29 wz
03f80     84 FF 9F 5D |  if_ne	jmp	#LR__0147
03f84                 | LR__0148
03f84                 | LR__0149
03f84                 | _hng033rm_spin2_makedl_ret
03f84     2D 00 64 FD | 	ret
03f88                 | 
03f88                 | '       
03f88                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
03f88                 | ' 
03f88                 | ' pub start(mode,base):result
03f88                 | _hng033rm_spin2_start
03f88     02 5A 05 F6 | 	mov	COUNT_, #2
03f8c     B0 00 A0 FD | 	call	#pushregs_
03f90     2F 6D 02 F6 | 	mov	local01, arg01
03f94                 | ' 
03f94                 | ' ' initialize pointers and variables
03f94                 | ' 
03f94                 | ' border_ptr:=@bordercolor
03f94     2C FA 05 F1 | 	add	objptr, #44
03f98     FD 6E 02 F6 | 	mov	local02, objptr
03f9c     24 FA 85 F1 | 	sub	objptr, #36
03fa0     FD 6E 62 FC | 	wrlong	local02, objptr
03fa4                 | ' font_ptr:=@a8_font
03fa4     0C 00 00 FF 
03fa8     00 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##6144
03fac     04 FA 85 F1 | 	sub	objptr, #4
03fb0     FD 06 62 FC | 	wrlong	ptr__hng033rm_spin2_dat__, objptr
03fb4                 | ' hdmibase:=base
03fb4     20 FA 05 F1 | 	add	objptr, #32
03fb8     FD 60 62 FC | 	wrlong	arg02, objptr
03fbc     24 FA 85 F1 | 	sub	objptr, #36
03fc0                 | ' p1:=@putpixel1
03fc0     FD 5E 02 F6 | 	mov	arg01, objptr
03fc4     05 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putpixel1_
03fc8     0C 00 00 FF 
03fcc     00 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##6144
03fd0     7C 2E B0 FD | 	call	#__system___make_methodptr
03fd4     DC FA 05 F1 | 	add	objptr, #220
03fd8     FD 18 62 FC | 	wrlong	result1, objptr
03fdc     DC FA 85 F1 | 	sub	objptr, #220
03fe0                 | ' p2:=@putpixel2
03fe0     FD 5E 02 F6 | 	mov	arg01, objptr
03fe4     06 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putpixel2_
03fe8     64 2E B0 FD | 	call	#__system___make_methodptr
03fec     E0 FA 05 F1 | 	add	objptr, #224
03ff0     FD 18 62 FC | 	wrlong	result1, objptr
03ff4     E0 FA 85 F1 | 	sub	objptr, #224
03ff8                 | ' p4:=@putpixel4
03ff8     FD 5E 02 F6 | 	mov	arg01, objptr
03ffc     07 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putpixel4_
04000     4C 2E B0 FD | 	call	#__system___make_methodptr
04004     E4 FA 05 F1 | 	add	objptr, #228
04008     FD 18 62 FC | 	wrlong	result1, objptr
0400c     E4 FA 85 F1 | 	sub	objptr, #228
04010                 | ' p8:=@putpixel8
04010     FD 5E 02 F6 | 	mov	arg01, objptr
04014     08 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_putpixel8_
04018     34 2E B0 FD | 	call	#__system___make_methodptr
0401c     E8 FA 05 F1 | 	add	objptr, #232
04020     FD 18 62 FC | 	wrlong	result1, objptr
04024     E8 FA 85 F1 | 	sub	objptr, #232
04028                 | ' 
04028                 | ' 
04028                 | ' ' the mode has to be set here to enable computing the buffer length
04028                 | ' 
04028                 | ' setmode(mode)
04028     36 5F 02 F6 | 	mov	arg01, local01
0402c     80 F5 BF FD | 	call	#_hng033rm_spin2_setmode
04030                 | ' 
04030                 | ' vblank_ptr:=@vblank
04030     40 FA 05 F1 | 	add	objptr, #64
04034     FD 6E 02 F6 | 	mov	local02, objptr
04038     34 FA 85 F1 | 	sub	objptr, #52
0403c     FD 6E 62 FC | 	wrlong	local02, objptr
04040                 | ' cursor_ptr:=@cursor_x
04040     28 FA 05 F1 | 	add	objptr, #40
04044     FD 6E 02 F6 | 	mov	local02, objptr
04048     24 FA 85 F1 | 	sub	objptr, #36
0404c     FD 6E 62 FC | 	wrlong	local02, objptr
04050                 | ' 
04050                 | ' fontnum_ptr:=@fontnum
04050     88 FA 05 F1 | 	add	objptr, #136
04054     FD 6E 02 F6 | 	mov	local02, objptr
04058     78 FA 85 F1 | 	sub	objptr, #120
0405c     FD 6E 62 FC | 	wrlong	local02, objptr
04060                 | ' 
04060                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
04060     78 FA 05 F1 | 	add	objptr, #120
04064     FD 00 68 FC | 	wrlong	#0, objptr
04068                 | ' bytemove(@colors,@vgacolors,16)
04068     1C FA 05 F1 | 	add	objptr, #28
0406c     FD 5E 02 F6 | 	mov	arg01, objptr
04070     B4 FA 85 F1 | 	sub	objptr, #180
04074     11 00 00 FF 
04078     58 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8792
0407c     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
04080     11 00 00 FF 
04084     58 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8792
04088     10 62 06 F6 | 	mov	arg03, #16
0408c     90 2C B0 FD | 	call	#__system____builtin_memmove
04090                 | ' 
04090                 | ' ' initialize a cursor
04090                 | ' 
04090                 | ' cursor_x:=0
04090     34 FA 05 F1 | 	add	objptr, #52
04094     FD 00 48 FC | 	wrbyte	#0, objptr
04098                 | ' cursor_y:=0
04098     01 FA 05 F1 | 	add	objptr, #1
0409c     FD 00 48 FC | 	wrbyte	#0, objptr
040a0                 | ' cursor_sh:=14
040a0     01 FA 05 F1 | 	add	objptr, #1
040a4     FD 1C 48 FC | 	wrbyte	#14, objptr
040a8     36 FA 85 F1 | 	sub	objptr, #54
040ac                 | ' 
040ac                 | ' 
040ac                 | ' ' start the cog
040ac                 | ' 
040ac                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
040ac     11 00 00 FF 
040b0     68 06 06 F1 | 	add	ptr__hng033rm_spin2_dat__, ##8808
040b4     03 61 02 F6 | 	mov	arg02, ptr__hng033rm_spin2_dat__
040b8     11 00 00 FF 
040bc     68 06 86 F1 | 	sub	ptr__hng033rm_spin2_dat__, ##8808
040c0     FD 62 02 F6 | 	mov	arg03, objptr
040c4     10 5E 06 F6 | 	mov	arg01, #16
040c8     28 62 62 FD | 	setq	arg03
040cc     30 5F F2 FC | 	coginit	arg01, arg02 wc
040d0     01 5E 66 C6 |  if_b	neg	arg01, #1
040d4     2F 19 02 F6 | 	mov	result1, arg01
040d8     28 FA 05 F1 | 	add	objptr, #40
040dc     FD 18 62 FC | 	wrlong	result1, objptr
040e0     28 FA 85 F1 | 	sub	objptr, #40
040e4                 | ' waitms(20)
040e4     14 5E 06 F6 | 	mov	arg01, #20
040e8     70 2F B0 FD | 	call	#__system___waitms
040ec                 | ' 
040ec                 | ' ' clear the screen and set the colors to green on black
040ec                 | ' 
040ec                 | ' cls(c_green,c_black)
040ec     C7 5E 06 F6 | 	mov	arg01, #199
040f0     00 60 06 F6 | 	mov	arg02, #0
040f4     F8 EC BF FD | 	call	#_hng033rm_spin2_cls
040f8                 | ' setbordercolor(0,0,128)
040f8     00 5E 06 F6 | 	mov	arg01, #0
040fc     00 60 06 F6 | 	mov	arg02, #0
04100     80 62 06 F6 | 	mov	arg03, #128
04104     94 EC BF FD | 	call	#_hng033rm_spin2_setbordercolor
04108                 | ' setwritecolors(c_green,c_black)
04108                 | ' 
04108                 | ' 
04108                 | ' write_color:=ff
04108     38 FA 05 F1 | 	add	objptr, #56
0410c     FD 8E 69 FC | 	wrlong	#199, objptr
04110                 | ' write_background:=bb
04110     04 FA 05 F1 | 	add	objptr, #4
04114     FD 00 68 FC | 	wrlong	#0, objptr
04118                 | ' 
04118                 | ' return cog
04118     14 FA 85 F1 | 	sub	objptr, #20
0411c     FD 18 02 FB | 	rdlong	result1, objptr
04120     28 FA 85 F1 | 	sub	objptr, #40
04124     AF F0 03 F6 | 	mov	ptra, fp
04128     BA 00 A0 FD | 	call	#popregs_
0412c                 | _hng033rm_spin2_start_ret
0412c     2D 00 64 FD | 	ret
04130                 | 
04130                 | ' 'this is the object and not a program
04130                 | ' 
04130                 | ' pub start() :cog
04130                 | _retrocog_spin2_start
04130     02 5A 05 F6 | 	mov	COUNT_, #2
04134     B0 00 A0 FD | 	call	#pushregs_
04138                 | ' 
04138                 | ' cog:=cogspin(16,serialcog(),@serialstack)
04138     FD 6C 02 F6 | 	mov	local01, objptr
0413c     01 00 00 FF 
04140     40 FB 05 F1 | 	add	objptr, ##832
04144     FD 6E 02 F6 | 	mov	local02, objptr
04148     37 6D 62 FC | 	wrlong	local01, local02
0414c     04 6E 06 F1 | 	add	local02, #4
04150     37 13 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
04154     FD 62 02 F6 | 	mov	arg03, objptr
04158     01 00 00 FF 
0415c     40 FB 85 F1 | 	sub	objptr, ##832
04160     10 5E 06 F6 | 	mov	arg01, #16
04164     28 62 62 FD | 	setq	arg03
04168     FA 5E F2 FC | 	coginit	arg01, entryptr__ wc
0416c     01 5E 66 C6 |  if_b	neg	arg01, #1
04170     2F 19 02 F6 | 	mov	result1, arg01
04174                 | ' return cog
04174     AF F0 03 F6 | 	mov	ptra, fp
04178     BA 00 A0 FD | 	call	#popregs_
0417c                 | _retrocog_spin2_start_ret
0417c     2D 00 64 FD | 	ret
04180                 | 
04180                 | ' 
04180                 | ' pub serialcog()| rr, mrr, srr, b, mb, midireport, kbmreport
04180                 | _retrocog_spin2_serialcog
04180     0C 5A 05 F6 | 	mov	COUNT_, #12
04184     B0 00 A0 FD | 	call	#pushregs_
04188                 | ' 
04188                 | ' 'start serial and midi
04188                 | ' 
04188                 | ' serial_start(rxpin, txpin, baudrate)
04188     20 5E 06 F6 | 	mov	arg01, #32
0418c     21 60 06 F6 | 	mov	arg02, #33
04190     A6 0E 00 FF 
04194     00 62 06 F6 | 	mov	arg03, ##1920000
04198     C0 05 B0 FD | 	call	#_retrocog_spin2_serial_start
0419c                 | ' serial_start(midiin,midiout,mbaudrate)
0419c     1D 5E 06 F6 | 	mov	arg01, #29
041a0     1E 60 06 F6 | 	mov	arg02, #30
041a4     3D 00 00 FF 
041a8     12 62 06 F6 | 	mov	arg03, ##31250
041ac     AC 05 B0 FD | 	call	#_retrocog_spin2_serial_start
041b0                 | ' serial_start(srxpin,stxpin,sbaudrate)
041b0     3E 6C 06 F6 | 	mov	local01, #62
041b4     42 0F 00 FF 
041b8     80 6E 06 F6 | 	mov	local02, ##2000000
041bc     3F 5E 06 F6 | 	mov	arg01, #63
041c0     3E 60 06 F6 | 	mov	arg02, #62
041c4     42 0F 00 FF 
041c8     80 62 06 F6 | 	mov	arg03, ##2000000
041cc     8C 05 B0 FD | 	call	#_retrocog_spin2_serial_start
041d0                 | ' 
041d0                 | ' mb:=(-1)
041d0     01 70 66 F6 | 	neg	local03, #1
041d4                 | ' b:=(-1)
041d4     01 72 66 F6 | 	neg	local04, #1
041d8                 | ' 
041d8                 | ' mousefront:=0
041d8     00 74 06 F6 | 	mov	local05, #0
041dc     08 FA 05 F1 | 	add	objptr, #8
041e0     FD 00 68 FC | 	wrlong	#0, objptr
041e4                 | ' mousetail:=0
041e4     04 FA 05 F1 | 	add	objptr, #4
041e8     FD 00 68 FC | 	wrlong	#0, objptr
041ec     0C FA 85 F1 | 	sub	objptr, #12
041f0                 | ' kbdfront:=0
041f0     FD 00 68 FC | 	wrlong	#0, objptr
041f4                 | ' kbdtail:=0
041f4     04 FA 05 F1 | 	add	objptr, #4
041f8     FD 00 68 FC | 	wrlong	#0, objptr
041fc                 | ' midifront:=0
041fc     0C FA 05 F1 | 	add	objptr, #12
04200     FD 00 68 FC | 	wrlong	#0, objptr
04204                 | ' miditail:=0
04204     04 FA 05 F1 | 	add	objptr, #4
04208     FD 00 68 FC | 	wrlong	#0, objptr
0420c                 | ' serialfront:=0
0420c     04 FA 05 F1 | 	add	objptr, #4
04210     FD 00 68 FC | 	wrlong	#0, objptr
04214                 | ' serialtail:=0
04214     04 FA 05 F1 | 	add	objptr, #4
04218     FD 00 68 FC | 	wrlong	#0, objptr
0421c                 | ' long[$30]:=0
0421c     30 00 6C FC | 	wrlong	#0, #48
04220                 | ' long[$34]:=0
04220     34 00 6C FC | 	wrlong	#0, #52
04224                 | ' long[$38]:=0
04224     38 00 6C FC | 	wrlong	#0, #56
04228     1C FA 85 F1 | 	sub	objptr, #28
0422c                 | ' long[$3C]:=0
0422c     3C 00 6C FC | 	wrlong	#0, #60
04230                 | ' 
04230                 | ' repeat
04230                 | LR__0150
04230                 | ' 
04230                 | ' '  repeat 
04230                 | '   rr:=rxcheck(rxpin)
04230     20 5E 06 F6 | 	mov	arg01, #32
04234     A0 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
04238     0C 77 02 F6 | 	mov	local06, result1
0423c                 | '   mrr:=rxcheck(midiin)
0423c     1D 5E 06 F6 | 	mov	arg01, #29
04240     94 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
04244     0C 79 02 F6 | 	mov	local07, result1
04248                 | '   srr:=rxcheck(srxpin)
04248     3F 5E 06 F6 | 	mov	arg01, #63
0424c     88 05 B0 FD | 	call	#_retrocog_spin2_rxcheck
04250     0C 75 02 F6 | 	mov	local05, result1
04254     3A 7B 02 F6 | 	mov	local08, local05
04258                 | ' 
04258                 | ' '  until rr>=0 || mrr>=0  || srr>=0
04258                 | ' 
04258                 | '   
04258                 | ' ' midi. Must be >= $80 for a command
04258                 | ' '$80-$8F - 3 bytes note off. note, velocity
04258                 | ' '$90-$9F - 3 bytes note on, note, velocity
04258                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
04258                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
04258                 | ' '$C0-$CF - 2 bytes program change
04258                 | ' '$D0-$DF - 2 bytes mono aftertouch
04258                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
04258                 | ' '$F0-$FF - 1 byte
04258                 | '   
04258                 | '   if srr>=0
04258     00 7A 5E F2 | 	cmps	local08, #0 wcz
0425c     78 00 90 CD |  if_b	jmp	#LR__0152
04260                 | '   
04260                 | '     if serialfront<>((serialtail-1) //32)
04260     1C FA 05 F1 | 	add	objptr, #28
04264     FD 6C 02 FB | 	rdlong	local01, objptr
04268     36 75 02 F6 | 	mov	local05, local01
0426c     01 74 86 F1 | 	sub	local05, #1
04270     3A 6F 52 F6 | 	abs	local02, local05 wc
04274     1F 6E 06 F5 | 	and	local02, #31
04278     37 6F 62 C6 |  if_b	neg	local02, local02
0427c     04 FA 85 F1 | 	sub	objptr, #4
04280     FD 7C 02 FB | 	rdlong	local09, objptr
04284     18 FA 85 F1 | 	sub	objptr, #24
04288     3E 7F 02 F6 | 	mov	local10, local09
0428c     37 7F 0A F2 | 	cmp	local10, local02 wz
04290     44 00 90 AD |  if_e	jmp	#LR__0151
04294                 | '       serialbuf[serialfront]:=srr
04294     18 FA 05 F1 | 	add	objptr, #24
04298     FD 74 02 FB | 	rdlong	local05, objptr
0429c     01 00 00 FF 
042a0     08 FB 05 F1 | 	add	objptr, ##776
042a4     FD 74 02 F1 | 	add	local05, objptr
042a8     3A 7B 42 FC | 	wrbyte	local08, local05
042ac                 | '       serialfront+=1
042ac     01 00 00 FF 
042b0     08 FB 85 F1 | 	sub	objptr, ##776
042b4     FD 6E 02 FB | 	rdlong	local02, objptr
042b8     01 6E 06 F1 | 	add	local02, #1
042bc     FD 6E 62 FC | 	wrlong	local02, objptr
042c0                 | '       serialfront:=serialfront // 32
042c0     37 6D 02 F6 | 	mov	local01, local02
042c4     36 75 52 F6 | 	abs	local05, local01 wc
042c8     1F 74 06 F5 | 	and	local05, #31
042cc     3A 75 62 C6 |  if_b	neg	local05, local05
042d0     FD 74 62 FC | 	wrlong	local05, objptr
042d4     18 FA 85 F1 | 	sub	objptr, #24
042d8                 | LR__0151
042d8                 | LR__0152
042d8                 | '     
042d8                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
042d8     80 78 5E F2 | 	cmps	local07, #128 wcz
042dc     08 00 90 CD |  if_b	jmp	#LR__0153
042e0     BF 78 5E F2 | 	cmps	local07, #191 wcz
042e4     10 00 90 ED |  if_be	jmp	#LR__0154
042e8                 | LR__0153
042e8     E0 78 5E F2 | 	cmps	local07, #224 wcz
042ec     18 00 90 CD |  if_b	jmp	#LR__0155
042f0     EF 78 5E F2 | 	cmps	local07, #239 wcz
042f4     10 00 90 1D |  if_a	jmp	#LR__0155
042f8                 | LR__0154
042f8                 | '     mb:=2
042f8     02 70 06 F6 | 	mov	local03, #2
042fc                 | '     midireport:=mrr<<24
042fc     3C 75 02 F6 | 	mov	local05, local07
04300     18 74 66 F0 | 	shl	local05, #24
04304     3A 81 02 F6 | 	mov	local11, local05
04308                 | LR__0155
04308                 | ' 
04308                 | '   if (mrr>=$C0) && (mrr<=$DF)
04308     C0 78 5E F2 | 	cmps	local07, #192 wcz
0430c     18 00 90 CD |  if_b	jmp	#LR__0156
04310     DF 78 5E F2 | 	cmps	local07, #223 wcz
04314     10 00 90 1D |  if_a	jmp	#LR__0156
04318                 | '     mb:=1
04318     01 70 06 F6 | 	mov	local03, #1
0431c                 | '     midireport:=mrr<<24
0431c     3C 75 02 F6 | 	mov	local05, local07
04320     18 74 66 F0 | 	shl	local05, #24
04324     3A 81 02 F6 | 	mov	local11, local05
04328                 | LR__0156
04328                 | '   
04328                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
04328     F0 78 5E F2 | 	cmps	local07, #240 wcz
0432c                 | '     mb:=4
0432c     04 70 06 36 |  if_ae	mov	local03, #4
04330                 | '     midireport:=mrr<<24  
04330     3C 81 02 36 |  if_ae	mov	local11, local07
04334     18 80 66 30 |  if_ae	shl	local11, #24
04338                 | '   
04338                 | '   if (mrr<$80) && (mb>0) && (mrr>=0)
04338     80 78 5E F2 | 	cmps	local07, #128 wcz
0433c     44 00 90 3D |  if_ae	jmp	#LR__0158
04340     00 70 5E F2 | 	cmps	local03, #0 wcz
04344     3C 00 90 ED |  if_be	jmp	#LR__0158
04348     00 78 5E F2 | 	cmps	local07, #0 wcz
0434c     34 00 90 CD |  if_b	jmp	#LR__0158
04350                 | '     
04350                 | '     mb--
04350     38 75 02 F6 | 	mov	local05, local03
04354     38 6D 02 F6 | 	mov	local01, local03
04358     01 6C 86 F1 | 	sub	local01, #1
0435c     36 71 02 F6 | 	mov	local03, local01
04360                 | '     if mb<3
04360     03 70 5E F2 | 	cmps	local03, #3 wcz
04364     1C 00 90 3D |  if_ae	jmp	#LR__0157
04368                 | '       midireport+=mrr<<(mb<<3)
04368     40 75 02 F6 | 	mov	local05, local11
0436c     3C 6D 02 F6 | 	mov	local01, local07
04370     38 6F 02 F6 | 	mov	local02, local03
04374     03 6E 66 F0 | 	shl	local02, #3
04378     37 6D 62 F0 | 	shl	local01, local02
0437c     36 75 02 F1 | 	add	local05, local01
04380     3A 81 02 F6 | 	mov	local11, local05
04384                 | LR__0157
04384                 | LR__0158
04384                 | '   
04384                 | '   if mb==0
04384     00 70 0E F2 | 	cmp	local03, #0 wz
04388     80 00 90 5D |  if_ne	jmp	#LR__0160
0438c                 | '     
0438c                 | '     if midifront<>((miditail-1) //32)
0438c     14 FA 05 F1 | 	add	objptr, #20
04390     FD 6C 02 FB | 	rdlong	local01, objptr
04394     36 75 02 F6 | 	mov	local05, local01
04398     01 74 86 F1 | 	sub	local05, #1
0439c     3A 6F 52 F6 | 	abs	local02, local05 wc
043a0     1F 6E 06 F5 | 	and	local02, #31
043a4     37 6F 62 C6 |  if_b	neg	local02, local02
043a8     04 FA 85 F1 | 	sub	objptr, #4
043ac     FD 7C 02 FB | 	rdlong	local09, objptr
043b0     10 FA 85 F1 | 	sub	objptr, #16
043b4     3E 7F 02 F6 | 	mov	local10, local09
043b8     37 7F 0A F2 | 	cmp	local10, local02 wz
043bc     48 00 90 AD |  if_e	jmp	#LR__0159
043c0                 | '       midibuf[midifront]:=midireport
043c0     10 FA 05 F1 | 	add	objptr, #16
043c4     FD 74 02 FB | 	rdlong	local05, objptr
043c8     02 74 66 F0 | 	shl	local05, #2
043cc     01 00 00 FF 
043d0     90 FA 05 F1 | 	add	objptr, ##656
043d4     FD 74 02 F1 | 	add	local05, objptr
043d8     3A 81 62 FC | 	wrlong	local11, local05
043dc                 | '       midifront+=1
043dc     01 00 00 FF 
043e0     90 FA 85 F1 | 	sub	objptr, ##656
043e4     FD 6E 02 FB | 	rdlong	local02, objptr
043e8     01 6E 06 F1 | 	add	local02, #1
043ec     FD 6E 62 FC | 	wrlong	local02, objptr
043f0                 | '       midifront:=midifront // 32
043f0     37 6D 02 F6 | 	mov	local01, local02
043f4     36 75 52 F6 | 	abs	local05, local01 wc
043f8     1F 74 06 F5 | 	and	local05, #31
043fc     3A 75 62 C6 |  if_b	neg	local05, local05
04400     FD 74 62 FC | 	wrlong	local05, objptr
04404     10 FA 85 F1 | 	sub	objptr, #16
04408                 | LR__0159
04408                 | '     mb:=(-1)
04408     01 70 66 F6 | 	neg	local03, #1
0440c                 | LR__0160
0440c                 | ' 
0440c                 | ' 'Keyboard and mouse
0440c                 | ' 
0440c                 | '   if (rr>=$80) && (rr<>$FF)
0440c     80 76 5E F2 | 	cmps	local06, #128 wcz
04410     18 00 90 CD |  if_b	jmp	#LR__0161
04414     FF 76 0E F2 | 	cmp	local06, #255 wz
04418     10 00 90 AD |  if_e	jmp	#LR__0161
0441c                 | '     b:=3
0441c     03 72 06 F6 | 	mov	local04, #3
04420                 | '     kbmreport:=rr<<24
04420     3B 75 02 F6 | 	mov	local05, local06
04424     18 74 66 F0 | 	shl	local05, #24
04428     3A 83 02 F6 | 	mov	local12, local05
0442c                 | LR__0161
0442c                 | '   
0442c                 | '   if (rr<$80) && (b>0) && (rr>=0)
0442c     80 76 5E F2 | 	cmps	local06, #128 wcz
04430     30 00 90 3D |  if_ae	jmp	#LR__0162
04434     00 72 5E F2 | 	cmps	local04, #0 wcz
04438     28 00 90 ED |  if_be	jmp	#LR__0162
0443c     00 76 5E F2 | 	cmps	local06, #0 wcz
04440     20 00 90 CD |  if_b	jmp	#LR__0162
04444                 | '     b--
04444     01 72 86 F1 | 	sub	local04, #1
04448                 | '     kbmreport+=rr<<(b<<3)  
04448     41 75 02 F6 | 	mov	local05, local12
0444c     3B 6D 02 F6 | 	mov	local01, local06
04450     39 6F 02 F6 | 	mov	local02, local04
04454     03 6E 66 F0 | 	shl	local02, #3
04458     37 6D 62 F0 | 	shl	local01, local02
0445c     36 75 02 F1 | 	add	local05, local01
04460     3A 83 02 F6 | 	mov	local12, local05
04464                 | LR__0162
04464                 | '   
04464                 | '   if (rr==$FF)
04464     FF 76 0E F2 | 	cmp	local06, #255 wz
04468                 | '     b:=0   
04468     00 72 06 A6 |  if_e	mov	local04, #0
0446c                 | ' 
0446c                 | '   if b==0  
0446c     00 72 0E F2 | 	cmp	local04, #0 wz
04470     0C 01 90 5D |  if_ne	jmp	#LR__0167
04474                 | '  
04474                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
04474     00 00 40 FF 
04478     00 82 1E F2 | 	cmp	local12, ##-2147483648 wcz
0447c     80 00 90 CD |  if_b	jmp	#LR__0164
04480     00 80 43 FF 
04484     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
04488     74 00 90 3D |  if_ae	jmp	#LR__0164
0448c                 | '       if mousefront<>((mousetail-1) //128)
0448c     0C FA 05 F1 | 	add	objptr, #12
04490     FD 6C 02 FB | 	rdlong	local01, objptr
04494     36 75 02 F6 | 	mov	local05, local01
04498     01 74 86 F1 | 	sub	local05, #1
0449c     3A 6F 52 F6 | 	abs	local02, local05 wc
044a0     7F 6E 06 F5 | 	and	local02, #127
044a4     37 6F 62 C6 |  if_b	neg	local02, local02
044a8     04 FA 85 F1 | 	sub	objptr, #4
044ac     FD 7C 02 FB | 	rdlong	local09, objptr
044b0     08 FA 85 F1 | 	sub	objptr, #8
044b4     3E 7F 02 F6 | 	mov	local10, local09
044b8     37 7F 0A F2 | 	cmp	local10, local02 wz
044bc     40 00 90 AD |  if_e	jmp	#LR__0163
044c0                 | '         mousebuf[mousefront]:=kbmreport
044c0     08 FA 05 F1 | 	add	objptr, #8
044c4     FD 74 02 FB | 	rdlong	local05, objptr
044c8     02 74 66 F0 | 	shl	local05, #2
044cc     98 FA 05 F1 | 	add	objptr, #152
044d0     FD 74 02 F1 | 	add	local05, objptr
044d4     3A 83 62 FC | 	wrlong	local12, local05
044d8                 | '         mousefront+=1
044d8     98 FA 85 F1 | 	sub	objptr, #152
044dc     FD 6E 02 FB | 	rdlong	local02, objptr
044e0     01 6E 06 F1 | 	add	local02, #1
044e4     FD 6E 62 FC | 	wrlong	local02, objptr
044e8                 | '         mousefront:=mousefront // 128
044e8     37 6D 02 F6 | 	mov	local01, local02
044ec     36 75 52 F6 | 	abs	local05, local01 wc
044f0     7F 74 06 F5 | 	and	local05, #127
044f4     3A 75 62 C6 |  if_b	neg	local05, local05
044f8     FD 74 62 FC | 	wrlong	local05, objptr
044fc     08 FA 85 F1 | 	sub	objptr, #8
04500                 | LR__0163
04500                 | LR__0164
04500                 | '     b:=(-1)
04500     01 72 66 F6 | 	neg	local04, #1
04504                 | ' 
04504                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
04504     00 80 43 FF 
04508     00 82 1E F2 | 	cmp	local12, ##-2030043136 wcz
0450c     6C 00 90 CD |  if_b	jmp	#LR__0166
04510     00 00 45 FF 
04514     00 82 1E F2 | 	cmp	local12, ##-1979711488 wcz
04518     60 00 90 3D |  if_ae	jmp	#LR__0166
0451c                 | '       if kbdfront<>((kbdtail-1) //32)
0451c     04 FA 05 F1 | 	add	objptr, #4
04520     FD 6C 02 FB | 	rdlong	local01, objptr
04524     04 FA 85 F1 | 	sub	objptr, #4
04528     36 75 02 F6 | 	mov	local05, local01
0452c     01 74 86 F1 | 	sub	local05, #1
04530     3A 6F 52 F6 | 	abs	local02, local05 wc
04534     1F 6E 06 F5 | 	and	local02, #31
04538     37 6F 62 C6 |  if_b	neg	local02, local02
0453c     FD 7E 02 FB | 	rdlong	local10, objptr
04540     37 7F 0A F2 | 	cmp	local10, local02 wz
04544     34 00 90 AD |  if_e	jmp	#LR__0165
04548                 | '         kbdbuf[kbdfront]:=kbmreport
04548     FD 74 02 FB | 	rdlong	local05, objptr
0454c     02 74 66 F0 | 	shl	local05, #2
04550     20 FA 05 F1 | 	add	objptr, #32
04554     FD 74 02 F1 | 	add	local05, objptr
04558     3A 83 62 FC | 	wrlong	local12, local05
0455c                 | '         kbdfront+=1
0455c     20 FA 85 F1 | 	sub	objptr, #32
04560     FD 6C 02 FB | 	rdlong	local01, objptr
04564     01 6C 06 F1 | 	add	local01, #1
04568     FD 6C 62 FC | 	wrlong	local01, objptr
0456c                 | '         kbdfront:=kbdfront // 32
0456c     36 75 52 F6 | 	abs	local05, local01 wc
04570     1F 74 06 F5 | 	and	local05, #31
04574     3A 75 62 C6 |  if_b	neg	local05, local05
04578     FD 74 62 FC | 	wrlong	local05, objptr
0457c                 | LR__0165
0457c                 | LR__0166
0457c                 | '     b:=(-1)
0457c     01 72 66 F6 | 	neg	local04, #1
04580                 | LR__0167
04580                 | ' 
04580                 | ' 
04580                 | '   if long[$30]==0
04580     30 74 0E FB | 	rdlong	local05, #48 wz
04584     64 00 90 5D |  if_ne	jmp	#LR__0169
04588                 | '     if kbdfront<>kbdtail
04588     FD 74 02 FB | 	rdlong	local05, objptr
0458c     04 FA 05 F1 | 	add	objptr, #4
04590     FD 6E 02 FB | 	rdlong	local02, objptr
04594     04 FA 85 F1 | 	sub	objptr, #4
04598     37 6D 02 F6 | 	mov	local01, local02
0459c     36 75 0A F2 | 	cmp	local05, local01 wz
045a0     48 00 90 AD |  if_e	jmp	#LR__0168
045a4                 | '       long[$30]:=kbdbuf[kbdtail]
045a4     04 FA 05 F1 | 	add	objptr, #4
045a8     FD 74 02 FB | 	rdlong	local05, objptr
045ac     02 74 66 F0 | 	shl	local05, #2
045b0     1C FA 05 F1 | 	add	objptr, #28
045b4     FD 74 02 F1 | 	add	local05, objptr
045b8     3A 7F 02 FB | 	rdlong	local10, local05
045bc     30 7E 66 FC | 	wrlong	local10, #48
045c0                 | '       kbdtail++
045c0     1C FA 85 F1 | 	sub	objptr, #28
045c4     FD 7E 02 FB | 	rdlong	local10, objptr
045c8     3F 6F 02 F6 | 	mov	local02, local10
045cc     01 6E 06 F1 | 	add	local02, #1
045d0     FD 6E 62 FC | 	wrlong	local02, objptr
045d4                 | '       kbdtail:= kbdtail // 32
045d4     37 6D 02 F6 | 	mov	local01, local02
045d8     36 75 52 F6 | 	abs	local05, local01 wc
045dc     1F 74 06 F5 | 	and	local05, #31
045e0     3A 75 62 C6 |  if_b	neg	local05, local05
045e4     FD 74 62 FC | 	wrlong	local05, objptr
045e8     04 FA 85 F1 | 	sub	objptr, #4
045ec                 | LR__0168
045ec                 | LR__0169
045ec                 | '       
045ec                 | '   if long[$34]==0
045ec     34 74 0E FB | 	rdlong	local05, #52 wz
045f0     68 00 90 5D |  if_ne	jmp	#LR__0171
045f4                 | '     if mousefront<>mousetail
045f4     08 FA 05 F1 | 	add	objptr, #8
045f8     FD 6C 02 FB | 	rdlong	local01, objptr
045fc     04 FA 05 F1 | 	add	objptr, #4
04600     FD 7E 02 FB | 	rdlong	local10, objptr
04604     0C FA 85 F1 | 	sub	objptr, #12
04608     3F 6F 02 F6 | 	mov	local02, local10
0460c     37 6D 0A F2 | 	cmp	local01, local02 wz
04610     48 00 90 AD |  if_e	jmp	#LR__0170
04614                 | '       long[$34]:=mousebuf[mousetail]
04614     0C FA 05 F1 | 	add	objptr, #12
04618     FD 74 02 FB | 	rdlong	local05, objptr
0461c     02 74 66 F0 | 	shl	local05, #2
04620     94 FA 05 F1 | 	add	objptr, #148
04624     FD 74 02 F1 | 	add	local05, objptr
04628     3A 7F 02 FB | 	rdlong	local10, local05
0462c     34 7E 66 FC | 	wrlong	local10, #52
04630                 | '       mousetail++
04630     94 FA 85 F1 | 	sub	objptr, #148
04634     FD 7E 02 FB | 	rdlong	local10, objptr
04638     3F 6F 02 F6 | 	mov	local02, local10
0463c     01 6E 06 F1 | 	add	local02, #1
04640     FD 6E 62 FC | 	wrlong	local02, objptr
04644                 | '       mousetail:= mousetail // 128
04644     37 6D 02 F6 | 	mov	local01, local02
04648     36 75 52 F6 | 	abs	local05, local01 wc
0464c     7F 74 06 F5 | 	and	local05, #127
04650     3A 75 62 C6 |  if_b	neg	local05, local05
04654     FD 74 62 FC | 	wrlong	local05, objptr
04658     0C FA 85 F1 | 	sub	objptr, #12
0465c                 | LR__0170
0465c                 | LR__0171
0465c                 | ' 
0465c                 | '       
0465c                 | '   if long[$38]==0
0465c     38 74 0E FB | 	rdlong	local05, #56 wz
04660     70 00 90 5D |  if_ne	jmp	#LR__0173
04664                 | '     if midifront<>miditail
04664     10 FA 05 F1 | 	add	objptr, #16
04668     FD 6C 02 FB | 	rdlong	local01, objptr
0466c     04 FA 05 F1 | 	add	objptr, #4
04670     FD 7E 02 FB | 	rdlong	local10, objptr
04674     14 FA 85 F1 | 	sub	objptr, #20
04678     3F 6F 02 F6 | 	mov	local02, local10
0467c     37 6D 0A F2 | 	cmp	local01, local02 wz
04680     50 00 90 AD |  if_e	jmp	#LR__0172
04684                 | '       long[$38]:=midibuf[miditail]
04684     14 FA 05 F1 | 	add	objptr, #20
04688     FD 74 02 FB | 	rdlong	local05, objptr
0468c     02 74 66 F0 | 	shl	local05, #2
04690     01 00 00 FF 
04694     8C FA 05 F1 | 	add	objptr, ##652
04698     FD 74 02 F1 | 	add	local05, objptr
0469c     3A 7F 02 FB | 	rdlong	local10, local05
046a0     38 7E 66 FC | 	wrlong	local10, #56
046a4                 | '       miditail++
046a4     01 00 00 FF 
046a8     8C FA 85 F1 | 	sub	objptr, ##652
046ac     FD 7E 02 FB | 	rdlong	local10, objptr
046b0     3F 6F 02 F6 | 	mov	local02, local10
046b4     01 6E 06 F1 | 	add	local02, #1
046b8     FD 6E 62 FC | 	wrlong	local02, objptr
046bc                 | '       miditail:= miditail // 32
046bc     37 6D 02 F6 | 	mov	local01, local02
046c0     36 75 52 F6 | 	abs	local05, local01 wc
046c4     1F 74 06 F5 | 	and	local05, #31
046c8     3A 75 62 C6 |  if_b	neg	local05, local05
046cc     FD 74 62 FC | 	wrlong	local05, objptr
046d0     14 FA 85 F1 | 	sub	objptr, #20
046d4                 | LR__0172
046d4                 | LR__0173
046d4                 | '       
046d4                 | '   if long[$3c]==0
046d4     3C 74 0E FB | 	rdlong	local05, #60 wz
046d8     54 FB 9F 5D |  if_ne	jmp	#LR__0150
046dc                 | '     if serialfront<>serialtail
046dc     18 FA 05 F1 | 	add	objptr, #24
046e0     FD 6C 02 FB | 	rdlong	local01, objptr
046e4     04 FA 05 F1 | 	add	objptr, #4
046e8     FD 7E 02 FB | 	rdlong	local10, objptr
046ec     1C FA 85 F1 | 	sub	objptr, #28
046f0     3F 6F 02 F6 | 	mov	local02, local10
046f4     37 6D 0A F2 | 	cmp	local01, local02 wz
046f8     34 FB 9F AD |  if_e	jmp	#LR__0150
046fc                 | '       byte[$3c]:=255
046fc     3C FE 4D FC | 	wrbyte	#255, #60
04700                 | '       byte[$3D]:=serialbuf[serialtail]
04700     1C FA 05 F1 | 	add	objptr, #28
04704     FD 74 02 FB | 	rdlong	local05, objptr
04708     01 00 00 FF 
0470c     04 FB 05 F1 | 	add	objptr, ##772
04710     FD 74 02 F1 | 	add	local05, objptr
04714     3A 7F C2 FA | 	rdbyte	local10, local05
04718     3D 7E 46 FC | 	wrbyte	local10, #61
0471c                 | '       serialtail++
0471c     01 00 00 FF 
04720     04 FB 85 F1 | 	sub	objptr, ##772
04724     FD 7E 02 FB | 	rdlong	local10, objptr
04728     3F 6F 02 F6 | 	mov	local02, local10
0472c     01 6E 06 F1 | 	add	local02, #1
04730     FD 6E 62 FC | 	wrlong	local02, objptr
04734                 | '       serialtail:= serialtail // 32
04734     37 6D 02 F6 | 	mov	local01, local02
04738     36 75 52 F6 | 	abs	local05, local01 wc
0473c     1F 74 06 F5 | 	and	local05, #31
04740     3A 75 62 C6 |  if_b	neg	local05, local05
04744     FD 74 62 FC | 	wrlong	local05, objptr
04748     1C FA 85 F1 | 	sub	objptr, #28
0474c     E0 FA 9F FD | 	jmp	#LR__0150
04750     AF F0 03 F6 | 	mov	ptra, fp
04754     BA 00 A0 FD | 	call	#popregs_
04758                 | _retrocog_spin2_serialcog_ret
04758     2D 00 64 FD | 	ret
0475c                 | 
0475c                 | '       
0475c                 | ' 
0475c                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
0475c                 | ' 
0475c                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
0475c                 | _retrocog_spin2_serial_start
0475c     04 5A 05 F6 | 	mov	COUNT_, #4
04760     B0 00 A0 FD | 	call	#pushregs_
04764     2F 6D 02 F6 | 	mov	local01, arg01
04768     30 6F 02 F6 | 	mov	local02, arg02
0476c                 | ' 
0476c                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
0476c     14 5E 06 FB | 	rdlong	arg01, #20
04770     10 60 C6 F9 | 	decod	arg02, #16
04774     30 5F 02 FD | 	qmul	arg01, arg02
04778     19 70 62 FD | 	getqy	local03
0477c     18 72 62 FD | 	getqx	local04
04780     28 70 62 FD | 	setq	local03
04784     31 73 12 FD | 	qdiv	local04, arg03
04788     18 18 62 FD | 	getqx	result1
0478c     0C 63 02 F6 | 	mov	arg03, result1
04790     FE FF 7F FF 
04794     00 62 06 F5 | 	and	arg03, ##-1024
04798                 | ' bitmode |= 7                                                  ' set bits (8)
04798     07 62 46 F5 | 	or	arg03, #7
0479c                 | ' pinstart(rxpin,P_HIGH_15K|P_ASYNC_RX,bitmode,0)
0479c     40 6C 62 FD | 	dirl	local01
047a0     08 00 80 FF 
047a4     36 7D 08 FC | 	wrpin	##4158, local01
047a8     36 63 12 FC | 	wxpin	arg03, local01
047ac     36 01 28 FC | 	wypin	#0, local01
047b0     41 6C 62 FD | 	dirh	local01
047b4                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
047b4     40 6E 62 FD | 	dirl	local02
047b8     37 F9 08 FC | 	wrpin	#124, local02
047bc     37 63 12 FC | 	wxpin	arg03, local02
047c0     37 01 28 FC | 	wypin	#0, local02
047c4     41 6E 62 FD | 	dirh	local02
047c8                 | ' pinhigh(rxpin)
047c8     59 6C 62 FD | 	drvh	local01
047cc     AF F0 03 F6 | 	mov	ptra, fp
047d0     BA 00 A0 FD | 	call	#popregs_
047d4                 | _retrocog_spin2_serial_start_ret
047d4     2D 00 64 FD | 	ret
047d8                 | 
047d8                 | ' 
047d8                 | ' pub rxcheck(pin) : rxbyte | check
047d8                 | _retrocog_spin2_rxcheck
047d8     03 5A 05 F6 | 	mov	COUNT_, #3
047dc     B0 00 A0 FD | 	call	#pushregs_
047e0     2F 6D 02 F6 | 	mov	local01, arg01
047e4                 | ' 
047e4                 | ' '' Check for serial input
047e4                 | ' '' -- returns -1 if nothing available
047e4                 | ' 
047e4                 | '   rxbyte := -1
047e4     01 6E 66 F6 | 	neg	local02, #1
047e8                 | '   check := pinr(pin)
047e8     36 5F 02 F6 | 	mov	arg01, local01
047ec     4C 28 B0 FD | 	call	#__system___pinread
047f0     0C 71 0A F6 | 	mov	local03, result1 wz
047f4                 | '   if (check)
047f4                 | '     rxbyte := rdpin(pin) >> 24
047f4     00 6E 06 56 |  if_ne	mov	local02, #0
047f8     36 6F 8A 5A |  if_ne	rdpin	local02, local01
047fc     18 6E 46 50 |  if_ne	shr	local02, #24
04800     37 19 02 F6 | 	mov	result1, local02
04804     AF F0 03 F6 | 	mov	ptra, fp
04808     BA 00 A0 FD | 	call	#popregs_
0480c                 | _retrocog_spin2_rxcheck_ret
0480c     2D 00 64 FD | 	ret
04810                 | 
04810                 | _trackerplayer_spin2_initModule
04810     0B 5A 05 F6 | 	mov	COUNT_, #11
04814     B0 00 A0 FD | 	call	#pushregs_
04818     30 F0 07 F1 | 	add	ptra, #48
0481c     AF 5E 62 FC | 	wrlong	arg01, fp
04820     04 5E 05 F1 | 	add	fp, #4
04824     AF 60 62 FC | 	wrlong	arg02, fp
04828     04 5E 85 F1 | 	sub	fp, #4
0482c                 | ' 
0482c                 | '   ' Set some data pointers
0482c                 | '   magicFour      := hubPtr + 1080
0482c     AF 6C 02 FB | 	rdlong	local01, fp
04830     02 00 00 FF 
04834     38 6C 06 F1 | 	add	local01, ##1080
04838     9D FA 05 F1 | 	add	objptr, #157
0483c     FD 6C 62 FC | 	wrlong	local01, objptr
04840                 | '   nameStr        := hubPtr
04840     AF 6C 02 FB | 	rdlong	local01, fp
04844     97 FA 85 F1 | 	sub	objptr, #151
04848     FD 6C 62 FC | 	wrlong	local01, objptr
0484c                 | '   samplesInfoLut := hubPtr + 20
0484c     AF 6C 02 FB | 	rdlong	local01, fp
04850     14 6C 06 F1 | 	add	local01, #20
04854     04 FA 05 F1 | 	add	objptr, #4
04858     FD 6C 62 FC | 	wrlong	local01, objptr
0485c                 | ' 
0485c                 | '   ' Is this a 31 sample module?
0485c                 | '   if byte[magicFour][0] == "M" and byte[magicFour][2] == "K"
0485c     93 FA 05 F1 | 	add	objptr, #147
04860     FD 6C 02 FB | 	rdlong	local01, objptr
04864     9D FA 85 F1 | 	sub	objptr, #157
04868     36 6F C2 FA | 	rdbyte	local02, local01
0486c     4D 6E 0E F2 | 	cmp	local02, #77 wz
04870     4C 01 90 5D |  if_ne	jmp	#LR__0177
04874     9D FA 05 F1 | 	add	objptr, #157
04878     FD 70 02 FB | 	rdlong	local03, objptr
0487c     9D FA 85 F1 | 	sub	objptr, #157
04880     02 70 06 F1 | 	add	local03, #2
04884     38 73 C2 FA | 	rdbyte	local04, local03
04888     4B 72 0E F2 | 	cmp	local04, #75 wz
0488c     30 01 90 5D |  if_ne	jmp	#LR__0177
04890                 | '     songLength          := byte[hubPtr + 950]
04890     AF 6C 02 FB | 	rdlong	local01, fp
04894     01 00 00 FF 
04898     B6 6D 06 F1 | 	add	local01, ##950
0489c     36 75 C2 FA | 	rdbyte	local05, local01
048a0     9A FA 05 F1 | 	add	objptr, #154
048a4     FD 74 42 FC | 	wrbyte	local05, objptr
048a8                 | '     unknown1            := byte[hubPtr + 951]
048a8     AF 6C 02 FB | 	rdlong	local01, fp
048ac     01 00 00 FF 
048b0     B7 6D 06 F1 | 	add	local01, ##951
048b4     36 75 C2 FA | 	rdbyte	local05, local01
048b8     02 FA 05 F1 | 	add	objptr, #2
048bc     FD 74 42 FC | 	wrbyte	local05, objptr
048c0                 | '     songPositionsLut    :=      hubPtr + 952
048c0     AF 6C 02 FB | 	rdlong	local01, fp
048c4     01 00 00 FF 
048c8     B8 6D 06 F1 | 	add	local01, ##952
048cc     06 FA 85 F1 | 	sub	objptr, #6
048d0     FD 6C 62 FC | 	wrlong	local01, objptr
048d4                 | '     patternsData        :=      hubPtr + 1084
048d4     AF 6C 02 FB | 	rdlong	local01, fp
048d8     02 00 00 FF 
048dc     3C 6C 06 F1 | 	add	local01, ##1084
048e0     04 FA 85 F1 | 	sub	objptr, #4
048e4     FD 6C 62 FC | 	wrlong	local01, objptr
048e8                 | '     numberOfInstruments := 31
048e8     14 FA 05 F1 | 	add	objptr, #20
048ec     FD 3E 48 FC | 	wrbyte	#31, objptr
048f0                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
048f0     0B FA 85 F1 | 	sub	objptr, #11
048f4     FD 00 48 FC | 	wrbyte	#0, objptr
048f8     9B FA 85 F1 | 	sub	objptr, #155
048fc                 | '     repeat i from 952 to 1079
048fc     08 5E 05 F1 | 	add	fp, #8
04900     01 00 80 FF 
04904     AF 70 6B FC | 	wrlong	##952, fp
04908     08 5E 85 F1 | 	sub	fp, #8
0490c     60 B7 9F FE | 	loc	pa,	#(@LR__0176-@LR__0174)
04910     93 00 A0 FD | 	call	#FCACHE_LOAD_
04914                 | LR__0174
04914                 | '       if byte[hubPtr][i] > numberOfPatterns
04914     AF 76 02 FB | 	rdlong	local06, fp
04918     08 5E 05 F1 | 	add	fp, #8
0491c     AF 6E 02 FB | 	rdlong	local02, fp
04920     08 5E 85 F1 | 	sub	fp, #8
04924     3B 6F 02 F1 | 	add	local02, local06
04928     37 73 C2 FA | 	rdbyte	local04, local02
0492c     9B FA 05 F1 | 	add	objptr, #155
04930     FD 78 C2 FA | 	rdbyte	local07, objptr
04934     9B FA 85 F1 | 	sub	objptr, #155
04938     3C 73 5A F2 | 	cmps	local04, local07 wcz
0493c     24 00 90 ED |  if_be	jmp	#LR__0175
04940                 | '         numberOfPatterns := byte[hubPtr][i]
04940     AF 76 02 FB | 	rdlong	local06, fp
04944     08 5E 05 F1 | 	add	fp, #8
04948     AF 6E 02 FB | 	rdlong	local02, fp
0494c     08 5E 85 F1 | 	sub	fp, #8
04950     3B 6F 02 F1 | 	add	local02, local06
04954     37 73 C2 FA | 	rdbyte	local04, local02
04958     9B FA 05 F1 | 	add	objptr, #155
0495c     FD 72 42 FC | 	wrbyte	local04, objptr
04960     9B FA 85 F1 | 	sub	objptr, #155
04964                 | LR__0175
04964     08 5E 05 F1 | 	add	fp, #8
04968     AF 74 02 FB | 	rdlong	local05, fp
0496c     01 74 06 F1 | 	add	local05, #1
04970     AF 74 62 FC | 	wrlong	local05, fp
04974     08 5E 85 F1 | 	sub	fp, #8
04978     02 00 00 FF 
0497c     38 74 1E F2 | 	cmp	local05, ##1080 wcz
04980     90 FF 9F CD |  if_b	jmp	#LR__0174
04984                 | LR__0176
04984                 | '     numberOfPatterns++
04984     9B FA 05 F1 | 	add	objptr, #155
04988     FD 74 C2 FA | 	rdbyte	local05, objptr
0498c     FD 6E C2 FA | 	rdbyte	local02, objptr
04990     01 6E 06 F1 | 	add	local02, #1
04994     FD 6E 42 FC | 	wrbyte	local02, objptr
04998                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
04998     09 FA 85 F1 | 	sub	objptr, #9
0499c     FD 6C 02 FB | 	rdlong	local01, objptr
049a0     09 FA 05 F1 | 	add	objptr, #9
049a4     FD 6E C2 FA | 	rdbyte	local02, objptr
049a8     0A 6E 66 F0 | 	shl	local02, #10
049ac     37 6D 02 F1 | 	add	local01, local02
049b0     8D FA 85 F1 | 	sub	objptr, #141
049b4     FD 6C 62 FC | 	wrlong	local01, objptr
049b8     0E FA 85 F1 | 	sub	objptr, #14
049bc                 | ' 
049bc                 | '   ' This must be an oldschool 15 sample soundtracker module
049bc                 | '   else
049bc     1C 01 90 FD | 	jmp	#LR__0181
049c0                 | LR__0177
049c0                 | '     songLength          := byte[hubPtr + 470]
049c0     AF 6C 02 FB | 	rdlong	local01, fp
049c4     D6 6D 06 F1 | 	add	local01, #470
049c8     36 75 C2 FA | 	rdbyte	local05, local01
049cc     9A FA 05 F1 | 	add	objptr, #154
049d0     FD 74 42 FC | 	wrbyte	local05, objptr
049d4                 | '     unknown1            := byte[hubPtr + 471]
049d4     AF 6C 02 FB | 	rdlong	local01, fp
049d8     D7 6D 06 F1 | 	add	local01, #471
049dc     36 75 C2 FA | 	rdbyte	local05, local01
049e0     02 FA 05 F1 | 	add	objptr, #2
049e4     FD 74 42 FC | 	wrbyte	local05, objptr
049e8                 | '     songPositionsLut    :=      hubPtr + 472
049e8     AF 6C 02 FB | 	rdlong	local01, fp
049ec     D8 6D 06 F1 | 	add	local01, #472
049f0     06 FA 85 F1 | 	sub	objptr, #6
049f4     FD 6C 62 FC | 	wrlong	local01, objptr
049f8                 | '     patternsData        :=      hubPtr + 600
049f8     AF 6C 02 FB | 	rdlong	local01, fp
049fc     01 00 00 FF 
04a00     58 6C 06 F1 | 	add	local01, ##600
04a04     04 FA 85 F1 | 	sub	objptr, #4
04a08     FD 6C 62 FC | 	wrlong	local01, objptr
04a0c                 | '     numberOfInstruments := 15
04a0c     14 FA 05 F1 | 	add	objptr, #20
04a10     FD 1E 48 FC | 	wrbyte	#15, objptr
04a14                 | '     numberOfPatterns    := 0    ' Find out how many patterns that are available
04a14     0B FA 85 F1 | 	sub	objptr, #11
04a18     FD 00 48 FC | 	wrbyte	#0, objptr
04a1c     9B FA 85 F1 | 	sub	objptr, #155
04a20                 | '     repeat i from 472 to 599
04a20     08 5E 05 F1 | 	add	fp, #8
04a24     AF B0 6B FC | 	wrlong	#472, fp
04a28     08 5E 85 F1 | 	sub	fp, #8
04a2c     40 B6 9F FE | 	loc	pa,	#(@LR__0180-@LR__0178)
04a30     93 00 A0 FD | 	call	#FCACHE_LOAD_
04a34                 | LR__0178
04a34                 | '       if byte[hubPtr][i] > numberOfPatterns
04a34     AF 76 02 FB | 	rdlong	local06, fp
04a38     08 5E 05 F1 | 	add	fp, #8
04a3c     AF 6E 02 FB | 	rdlong	local02, fp
04a40     08 5E 85 F1 | 	sub	fp, #8
04a44     3B 6F 02 F1 | 	add	local02, local06
04a48     37 73 C2 FA | 	rdbyte	local04, local02
04a4c     9B FA 05 F1 | 	add	objptr, #155
04a50     FD 78 C2 FA | 	rdbyte	local07, objptr
04a54     9B FA 85 F1 | 	sub	objptr, #155
04a58     3C 73 5A F2 | 	cmps	local04, local07 wcz
04a5c     24 00 90 ED |  if_be	jmp	#LR__0179
04a60                 | '         numberOfPatterns := byte[hubPtr][i]
04a60     AF 76 02 FB | 	rdlong	local06, fp
04a64     08 5E 05 F1 | 	add	fp, #8
04a68     AF 6E 02 FB | 	rdlong	local02, fp
04a6c     08 5E 85 F1 | 	sub	fp, #8
04a70     3B 6F 02 F1 | 	add	local02, local06
04a74     37 73 C2 FA | 	rdbyte	local04, local02
04a78     9B FA 05 F1 | 	add	objptr, #155
04a7c     FD 72 42 FC | 	wrbyte	local04, objptr
04a80     9B FA 85 F1 | 	sub	objptr, #155
04a84                 | LR__0179
04a84     08 5E 05 F1 | 	add	fp, #8
04a88     AF 74 02 FB | 	rdlong	local05, fp
04a8c     01 74 06 F1 | 	add	local05, #1
04a90     AF 74 62 FC | 	wrlong	local05, fp
04a94     08 5E 85 F1 | 	sub	fp, #8
04a98     01 00 00 FF 
04a9c     58 74 1E F2 | 	cmp	local05, ##600 wcz
04aa0     90 FF 9F CD |  if_b	jmp	#LR__0178
04aa4                 | LR__0180
04aa4                 | '     numberOfPatterns++
04aa4     9B FA 05 F1 | 	add	objptr, #155
04aa8     FD 74 C2 FA | 	rdbyte	local05, objptr
04aac     FD 6E C2 FA | 	rdbyte	local02, objptr
04ab0     01 6E 06 F1 | 	add	local02, #1
04ab4     FD 6E 42 FC | 	wrbyte	local02, objptr
04ab8                 | '     sampleDataPtr       := patternsData + (numberOfPatterns << 10)
04ab8     09 FA 85 F1 | 	sub	objptr, #9
04abc     FD 6C 02 FB | 	rdlong	local01, objptr
04ac0     09 FA 05 F1 | 	add	objptr, #9
04ac4     FD 6E C2 FA | 	rdbyte	local02, objptr
04ac8     0A 6E 66 F0 | 	shl	local02, #10
04acc     37 6D 02 F1 | 	add	local01, local02
04ad0     8D FA 85 F1 | 	sub	objptr, #141
04ad4     FD 6C 62 FC | 	wrlong	local01, objptr
04ad8     0E FA 85 F1 | 	sub	objptr, #14
04adc                 | LR__0181
04adc                 | ' 
04adc                 | '   ' Iterate through all samples and fill in the sample pointer LUT
04adc                 | '   tmpPtr := sampleDataPtr
04adc     0E FA 05 F1 | 	add	objptr, #14
04ae0     FD 6C 02 FB | 	rdlong	local01, objptr
04ae4     0C 5E 05 F1 | 	add	fp, #12
04ae8     AF 6C 62 FC | 	wrlong	local01, fp
04aec                 | '   repeat i from 1 to numberOfInstruments
04aec     04 5E 85 F1 | 	sub	fp, #4
04af0     AF 02 68 FC | 	wrlong	#1, fp
04af4     08 5E 85 F1 | 	sub	fp, #8
04af8     98 FA 05 F1 | 	add	objptr, #152
04afc     FD 6E C2 FA | 	rdbyte	local02, objptr
04b00     01 6E 5E F2 | 	cmps	local02, #1 wcz
04b04     01 74 06 16 |  if_a	mov	local05, #1
04b08     01 74 66 E6 |  if_be	neg	local05, #1
04b0c     3A 7B 02 F6 | 	mov	local08, local05
04b10     FD 7C C2 FA | 	rdbyte	local09, objptr
04b14     A6 FA 85 F1 | 	sub	objptr, #166
04b18     3D 7D 02 F1 | 	add	local09, local08
04b1c                 | LR__0182
04b1c                 | '     samplesPtrLut[i-1] := tmpPtr
04b1c     08 5E 05 F1 | 	add	fp, #8
04b20     AF 7E 02 FB | 	rdlong	local10, fp
04b24     01 7E 86 F1 | 	sub	local10, #1
04b28     02 7E 66 F0 | 	shl	local10, #2
04b2c     12 FA 05 F1 | 	add	objptr, #18
04b30     FD 7E 02 F1 | 	add	local10, objptr
04b34     04 5E 05 F1 | 	add	fp, #4
04b38     AF 80 02 FB | 	rdlong	local11, fp
04b3c     3F 81 62 FC | 	wrlong	local11, local10
04b40                 | '     getSampleInfo(i, @d5, @samLength, @d1, @d2, @d3, @d4)
04b40     04 5E 85 F1 | 	sub	fp, #4
04b44     AF 5E 02 FB | 	rdlong	arg01, fp
04b48     1C 5E 05 F1 | 	add	fp, #28
04b4c     AF 60 02 F6 | 	mov	arg02, fp
04b50     14 5E 85 F1 | 	sub	fp, #20
04b54     AF 62 02 F6 | 	mov	arg03, fp
04b58     04 5E 05 F1 | 	add	fp, #4
04b5c     AF 64 02 F6 | 	mov	arg04, fp
04b60     04 5E 05 F1 | 	add	fp, #4
04b64     AF 66 02 F6 | 	mov	arg05, fp
04b68     04 5E 05 F1 | 	add	fp, #4
04b6c     AF 68 02 F6 | 	mov	arg06, fp
04b70     04 5E 05 F1 | 	add	fp, #4
04b74     AF 6A 02 F6 | 	mov	arg07, fp
04b78     20 5E 85 F1 | 	sub	fp, #32
04b7c     12 FA 85 F1 | 	sub	objptr, #18
04b80     F0 06 B0 FD | 	call	#_trackerplayer_spin2_getSampleInfo
04b84                 | '     tmpPtr += samLength
04b84     0C 5E 05 F1 | 	add	fp, #12
04b88     AF 78 02 FB | 	rdlong	local07, fp
04b8c     04 5E 05 F1 | 	add	fp, #4
04b90     AF 7E 02 FB | 	rdlong	local10, fp
04b94     3F 79 02 F1 | 	add	local07, local10
04b98     04 5E 85 F1 | 	sub	fp, #4
04b9c     AF 78 62 FC | 	wrlong	local07, fp
04ba0     04 5E 85 F1 | 	sub	fp, #4
04ba4     AF 78 02 FB | 	rdlong	local07, fp
04ba8     3D 79 02 F1 | 	add	local07, local08
04bac     AF 78 62 FC | 	wrlong	local07, fp
04bb0     08 5E 85 F1 | 	sub	fp, #8
04bb4     3E 79 0A F2 | 	cmp	local07, local09 wz
04bb8     60 FF 9F 5D |  if_ne	jmp	#LR__0182
04bbc                 | ' 
04bbc                 | '   ' Below this point, all play routine variables are resest to their default values
04bbc                 | '   tickCounter                 := 0
04bbc     A1 FA 05 F1 | 	add	objptr, #161
04bc0     FD 00 48 FC | 	wrbyte	#0, objptr
04bc4                 | '   patternRow                  := 0
04bc4     01 FA 05 F1 | 	add	objptr, #1
04bc8     FD 00 48 FC | 	wrbyte	#0, objptr
04bcc                 | '   songPosition                := startPattern
04bcc     04 5E 05 F1 | 	add	fp, #4
04bd0     AF 6C 02 FB | 	rdlong	local01, fp
04bd4     04 5E 85 F1 | 	sub	fp, #4
04bd8     01 FA 05 F1 | 	add	objptr, #1
04bdc     FD 6C 42 FC | 	wrbyte	local01, objptr
04be0                 | '   currentSongSpeed            := 6
04be0     01 FA 05 F1 | 	add	objptr, #1
04be4     FD 0C 48 FC | 	wrbyte	#6, objptr
04be8                 | '   patternDelay                := 0
04be8     01 FA 05 F1 | 	add	objptr, #1
04bec     FD 00 48 FC | 	wrbyte	#0, objptr
04bf0                 | '   ticksPerMinute              := 50 * 60
04bf0     02 FB 05 F1 | 	add	objptr, #258
04bf4     05 00 80 FF 
04bf8     FD 70 6B FC | 	wrlong	##3000, objptr
04bfc     A7 FB 85 F1 | 	sub	objptr, #423
04c00                 | '   cyclesToWait                := systemClock / 50
04c00     FD 98 02 FB | 	rdlong	muldiva_, objptr
04c04     32 9A 06 F6 | 	mov	muldivb_, #50
04c08     C6 00 A0 FD | 	call	#divide_
04c0c     AB FB 05 F1 | 	add	objptr, #427
04c10     FD 9A 62 FC | 	wrlong	muldivb_, objptr
04c14                 | '   sampleNumber_memory         := 0
04c14     35 FA 05 F1 | 	add	objptr, #53
04c18     FD 00 48 FC | 	wrbyte	#0, objptr
04c1c                 | '   lpFilter                    := 0
04c1c     25 FA 85 F1 | 	sub	objptr, #37
04c20     FD 00 48 FC | 	wrbyte	#0, objptr
04c24                 | '   cmdD_memoryX                := 0
04c24     29 FA 05 F1 | 	add	objptr, #41
04c28     FD 00 48 FC | 	wrbyte	#0, objptr
04c2c                 | '   cmdD_memoryY                := 0
04c2c     01 FA 05 F1 | 	add	objptr, #1
04c30     FD 00 48 FC | 	wrbyte	#0, objptr
04c34                 | '   cmdD_updatePosition         := false
04c34     01 FA 05 F1 | 	add	objptr, #1
04c38     FD 00 48 FC | 	wrbyte	#0, objptr
04c3c                 | '   cmdB_memoryZ                := 0
04c3c     01 FA 05 F1 | 	add	objptr, #1
04c40     FD 00 48 FC | 	wrbyte	#0, objptr
04c44                 | '   cmdB_updatePosition         := false
04c44     01 FA 05 F1 | 	add	objptr, #1
04c48     FD 00 48 FC | 	wrbyte	#0, objptr
04c4c                 | '   cmdE6_updatePositionCommon  := false
04c4c     0D FA 05 F1 | 	add	objptr, #13
04c50     FD 00 48 FC | 	wrbyte	#0, objptr
04c54     F5 FB 85 F1 | 	sub	objptr, #501
04c58                 | ' 
04c58                 | '   repeat i from 0 to LAST_CHANNEL
04c58     08 5E 05 F1 | 	add	fp, #8
04c5c     AF 00 68 FC | 	wrlong	#0, fp
04c60     08 5E 85 F1 | 	sub	fp, #8
04c64                 | LR__0183
04c64                 | ' 
04c64                 | '     currRepeatPoint[i]        := 0
04c64     08 5E 05 F1 | 	add	fp, #8
04c68     AF 70 02 FB | 	rdlong	local03, fp
04c6c     01 70 66 F0 | 	shl	local03, #1
04c70     D7 FA 05 F1 | 	add	objptr, #215
04c74     FD 70 02 F1 | 	add	local03, objptr
04c78     38 01 58 FC | 	wrword	#0, local03
04c7c                 | '     currSampleLength[i]       := 4
04c7c     AF 70 02 FB | 	rdlong	local03, fp
04c80     01 70 66 F0 | 	shl	local03, #1
04c84     1C FA 85 F1 | 	sub	objptr, #28
04c88     FD 70 02 F1 | 	add	local03, objptr
04c8c     38 09 58 FC | 	wrword	#4, local03
04c90                 | '     currSamplePtr[i]          := @null
04c90     AF 6E 02 FB | 	rdlong	local02, fp
04c94     02 6E 66 F0 | 	shl	local02, #2
04c98     14 FA 85 F1 | 	sub	objptr, #20
04c9c     FD 6E 02 F1 | 	add	local02, objptr
04ca0     37 15 62 FC | 	wrlong	ptr__trackerplayer_spin2_dat__, local02
04ca4                 | '     currSampleNr[i]           := 0
04ca4     AF 74 02 FB | 	rdlong	local05, fp
04ca8     10 FA 05 F1 | 	add	objptr, #16
04cac     FD 74 02 F1 | 	add	local05, objptr
04cb0     3A 01 48 FC | 	wrbyte	#0, local05
04cb4                 | '     currRepeatLength[i]       := 1
04cb4     AF 74 02 FB | 	rdlong	local05, fp
04cb8     02 74 66 F0 | 	shl	local05, #2
04cbc     0C FA 05 F1 | 	add	objptr, #12
04cc0     FD 74 02 F1 | 	add	local05, objptr
04cc4     3A 03 68 FC | 	wrlong	#1, local05
04cc8                 | '     currPeriod[i]             := 400
04cc8     AF 74 02 FB | 	rdlong	local05, fp
04ccc     02 74 66 F0 | 	shl	local05, #2
04cd0     1C FA 05 F1 | 	add	objptr, #28
04cd4     FD 74 02 F1 | 	add	local05, objptr
04cd8     3A 21 6B FC | 	wrlong	#400, local05
04cdc                 | '     lastSetPeriod[i]          := 400
04cdc     AF 74 02 FB | 	rdlong	local05, fp
04ce0     02 74 66 F0 | 	shl	local05, #2
04ce4     48 FA 05 F1 | 	add	objptr, #72
04ce8     FD 74 02 F1 | 	add	local05, objptr
04cec     3A 21 6B FC | 	wrlong	#400, local05
04cf0                 | '     lastSetSamplePtr[i]       := 0
04cf0     AF 74 02 FB | 	rdlong	local05, fp
04cf4     02 74 66 F0 | 	shl	local05, #2
04cf8     10 FA 05 F1 | 	add	objptr, #16
04cfc     FD 74 02 F1 | 	add	local05, objptr
04d00     3A 01 68 FC | 	wrlong	#0, local05
04d04                 | '     lastSetSampleNr[i]        := 0
04d04     AF 74 02 FB | 	rdlong	local05, fp
04d08     02 74 66 F0 | 	shl	local05, #2
04d0c     10 FA 05 F1 | 	add	objptr, #16
04d10     FD 74 02 F1 | 	add	local05, objptr
04d14     3A 01 68 FC | 	wrlong	#0, local05
04d18                 | '     lastSetSampleLength[i]    := 0
04d18     AF 74 02 FB | 	rdlong	local05, fp
04d1c     02 74 66 F0 | 	shl	local05, #2
04d20     10 FA 05 F1 | 	add	objptr, #16
04d24     FD 74 02 F1 | 	add	local05, objptr
04d28     3A 01 68 FC | 	wrlong	#0, local05
04d2c                 | '     lastSetRepeatLength[i]    := 0
04d2c     AF 74 02 FB | 	rdlong	local05, fp
04d30     02 74 66 F0 | 	shl	local05, #2
04d34     10 FA 05 F1 | 	add	objptr, #16
04d38     FD 74 02 F1 | 	add	local05, objptr
04d3c     3A 01 68 FC | 	wrlong	#0, local05
04d40                 | '     lastSetRepeatPoint[i]     := 0
04d40     AF 74 02 FB | 	rdlong	local05, fp
04d44     02 74 66 F0 | 	shl	local05, #2
04d48     10 FA 05 F1 | 	add	objptr, #16
04d4c     FD 74 02 F1 | 	add	local05, objptr
04d50     3A 01 68 FC | 	wrlong	#0, local05
04d54                 | '     currVolume[i]             := 0
04d54     AF 74 02 FB | 	rdlong	local05, fp
04d58     02 74 66 F0 | 	shl	local05, #2
04d5c     78 FA 85 F1 | 	sub	objptr, #120
04d60     FD 74 02 F1 | 	add	local05, objptr
04d64     3A 01 68 FC | 	wrlong	#0, local05
04d68                 | '     currPanning[i]            := 0
04d68     AF 70 02 FB | 	rdlong	local03, fp
04d6c     01 70 66 F0 | 	shl	local03, #1
04d70     20 FA 05 F1 | 	add	objptr, #32
04d74     FD 70 02 F1 | 	add	local03, objptr
04d78     38 01 58 FC | 	wrword	#0, local03
04d7c                 | '     cmd3_memoryZ[i]           := 0
04d7c     AF 74 02 FB | 	rdlong	local05, fp
04d80     A9 FA 05 F1 | 	add	objptr, #169
04d84     FD 74 02 F1 | 	add	local05, objptr
04d88     3A 01 48 FC | 	wrbyte	#0, local05
04d8c                 | '     cmd4_memoryY[i]           := 0
04d8c     AF 74 02 FB | 	rdlong	local05, fp
04d90     04 FA 05 F1 | 	add	objptr, #4
04d94     FD 74 02 F1 | 	add	local05, objptr
04d98     3A 01 48 FC | 	wrbyte	#0, local05
04d9c                 | '     cmd4_memoryX[i]           := 0
04d9c     AF 74 02 FB | 	rdlong	local05, fp
04da0     04 FA 05 F1 | 	add	objptr, #4
04da4     FD 74 02 F1 | 	add	local05, objptr
04da8     3A 01 48 FC | 	wrbyte	#0, local05
04dac                 | '     cmd7_memoryY[i]           := 0
04dac     AF 74 02 FB | 	rdlong	local05, fp
04db0     04 FA 05 F1 | 	add	objptr, #4
04db4     FD 74 02 F1 | 	add	local05, objptr
04db8     3A 01 48 FC | 	wrbyte	#0, local05
04dbc                 | '     cmd7_memoryX[i]           := 0
04dbc     AF 74 02 FB | 	rdlong	local05, fp
04dc0     04 FA 05 F1 | 	add	objptr, #4
04dc4     FD 74 02 F1 | 	add	local05, objptr
04dc8     3A 01 48 FC | 	wrbyte	#0, local05
04dcc                 | '     cmd9_memoryZ[i]           := 0
04dcc     AF 74 02 FB | 	rdlong	local05, fp
04dd0     04 FA 05 F1 | 	add	objptr, #4
04dd4     FD 74 02 F1 | 	add	local05, objptr
04dd8     3A 01 48 FC | 	wrbyte	#0, local05
04ddc                 | '     cmdE6_memory[i]           := 0
04ddc     AF 74 02 FB | 	rdlong	local05, fp
04de0     0D FA 05 F1 | 	add	objptr, #13
04de4     FD 74 02 F1 | 	add	local05, objptr
04de8     3A 01 48 FC | 	wrbyte	#0, local05
04dec                 | '     cmdE6_counter[i]          := 0
04dec     AF 74 02 FB | 	rdlong	local05, fp
04df0     04 FA 05 F1 | 	add	objptr, #4
04df4     FD 74 02 F1 | 	add	local05, objptr
04df8     3A 01 48 FC | 	wrbyte	#0, local05
04dfc                 | '     cmdE6_updatePosition[i]   := false
04dfc     AF 74 02 FB | 	rdlong	local05, fp
04e00     04 FA 05 F1 | 	add	objptr, #4
04e04     FD 74 02 F1 | 	add	local05, objptr
04e08     3A 01 48 FC | 	wrbyte	#0, local05
04e0c                 | '     sampleNumber_memory[i]    := 0
04e0c     AF 74 02 FB | 	rdlong	local05, fp
04e10     11 FA 85 F1 | 	sub	objptr, #17
04e14     FD 74 02 F1 | 	add	local05, objptr
04e18     3A 01 48 FC | 	wrbyte	#0, local05
04e1c                 | '     vibratoPos[i]             := 0
04e1c     AF 74 02 FB | 	rdlong	local05, fp
04e20     59 FA 85 F1 | 	sub	objptr, #89
04e24     FD 74 02 F1 | 	add	local05, objptr
04e28     3A 01 48 FC | 	wrbyte	#0, local05
04e2c                 | '     portamentoPeriodMemory[i] := 0
04e2c     AF 74 02 FB | 	rdlong	local05, fp
04e30     02 74 66 F0 | 	shl	local05, #2
04e34     10 FA 05 F1 | 	add	objptr, #16
04e38     FD 74 02 F1 | 	add	local05, objptr
04e3c     3A 01 68 FC | 	wrlong	#0, local05
04e40                 | '     portaGlissando[i]         := 0
04e40     AF 74 02 FB | 	rdlong	local05, fp
04e44     25 FA 05 F1 | 	add	objptr, #37
04e48     FD 74 02 F1 | 	add	local05, objptr
04e4c     3A 01 48 FC | 	wrbyte	#0, local05
04e50                 | '     vibratoType[i]            := 0
04e50     AF 74 02 FB | 	rdlong	local05, fp
04e54     04 FA 05 F1 | 	add	objptr, #4
04e58     FD 74 02 F1 | 	add	local05, objptr
04e5c     3A 01 48 FC | 	wrbyte	#0, local05
04e60                 | '     tremoloType[i]            := 0
04e60     AF 74 02 FB | 	rdlong	local05, fp
04e64     04 FA 05 F1 | 	add	objptr, #4
04e68     FD 74 02 F1 | 	add	local05, objptr
04e6c     3A 01 48 FC | 	wrbyte	#0, local05
04e70                 | '     tremoloPos[i]             := 0
04e70     AF 74 02 FB | 	rdlong	local05, fp
04e74     39 FA 85 F1 | 	sub	objptr, #57
04e78     FD 74 02 F1 | 	add	local05, objptr
04e7c     3A 01 48 FC | 	wrbyte	#0, local05
04e80                 | '     deltaVolume[i]            := 0
04e80     AF 74 02 FB | 	rdlong	local05, fp
04e84     02 74 66 F0 | 	shl	local05, #2
04e88     7C FA 85 F1 | 	sub	objptr, #124
04e8c     FD 74 02 F1 | 	add	local05, objptr
04e90     3A 01 68 FC | 	wrlong	#0, local05
04e94                 | '     deltaPeriod[i]            := 0
04e94     AF 74 02 FB | 	rdlong	local05, fp
04e98     02 74 66 F0 | 	shl	local05, #2
04e9c     20 FA 85 F1 | 	sub	objptr, #32
04ea0     FD 74 02 F1 | 	add	local05, objptr
04ea4     3A 01 68 FC | 	wrlong	#0, local05
04ea8                 | '     resetTremolo[i]           := 0
04ea8     AF 74 02 FB | 	rdlong	local05, fp
04eac     A0 FA 05 F1 | 	add	objptr, #160
04eb0     FD 74 02 F1 | 	add	local05, objptr
04eb4     3A 01 48 FC | 	wrbyte	#0, local05
04eb8                 | '     resetVibrato[i]           := 0
04eb8     AF 74 02 FB | 	rdlong	local05, fp
04ebc     04 FA 05 F1 | 	add	objptr, #4
04ec0     FD 74 02 F1 | 	add	local05, objptr
04ec4     3A 01 48 FC | 	wrbyte	#0, local05
04ec8     AF 74 02 FB | 	rdlong	local05, fp
04ecc     01 74 06 F1 | 	add	local05, #1
04ed0     AF 74 62 FC | 	wrlong	local05, fp
04ed4     08 5E 85 F1 | 	sub	fp, #8
04ed8     04 74 5E F2 | 	cmps	local05, #4 wcz
04edc     93 FB 85 F1 | 	sub	objptr, #403
04ee0     80 FD 9F CD |  if_b	jmp	#LR__0183
04ee4     AF F0 03 F6 | 	mov	ptra, fp
04ee8     BA 00 A0 FD | 	call	#popregs_
04eec                 | _trackerplayer_spin2_initModule_ret
04eec     2D 00 64 FD | 	ret
04ef0                 | 
04ef0                 | ' 
04ef0                 | ' 
04ef0                 | ' ' This routine needs to be ticked X number of times per second
04ef0                 | ' ' in order to advance the tracker play routine
04ef0                 | ' '
04ef0                 | ' PUB tick() | channel, sampleNumber, period, effect, i
04ef0                 | _trackerplayer_spin2_tick
04ef0     05 5A 05 F6 | 	mov	COUNT_, #5
04ef4     B0 00 A0 FD | 	call	#pushregs_
04ef8     14 F0 07 F1 | 	add	ptra, #20
04efc                 | ' 
04efc                 | '   if currentSongSpeed == 0
04efc     A4 FA 05 F1 | 	add	objptr, #164
04f00     FD 6C CA FA | 	rdbyte	local01, objptr wz
04f04     A4 FA 85 F1 | 	sub	objptr, #164
04f08                 | '     return
04f08     88 02 90 AD |  if_e	jmp	#LR__0195
04f0c                 | ' 
04f0c                 | '   ' Iterate over the channels and process everything
04f0c                 | '   repeat channel from 0 to LAST_CHANNEL
04f0c     AF 00 68 FC | 	wrlong	#0, fp
04f10                 | LR__0184
04f10                 | ' 
04f10                 | '     getNoteData(channel, songPosition, patternRow, @sampleNumber, @period, @effect)
04f10     AF 5E 02 FB | 	rdlong	arg01, fp
04f14     A3 FA 05 F1 | 	add	objptr, #163
04f18     FD 60 C2 FA | 	rdbyte	arg02, objptr
04f1c     01 FA 85 F1 | 	sub	objptr, #1
04f20     FD 62 C2 FA | 	rdbyte	arg03, objptr
04f24     A2 FA 85 F1 | 	sub	objptr, #162
04f28     04 5E 05 F1 | 	add	fp, #4
04f2c     AF 64 02 F6 | 	mov	arg04, fp
04f30     04 5E 05 F1 | 	add	fp, #4
04f34     AF 66 02 F6 | 	mov	arg05, fp
04f38     04 5E 05 F1 | 	add	fp, #4
04f3c     AF 68 02 F6 | 	mov	arg06, fp
04f40     0C 5E 85 F1 | 	sub	fp, #12
04f44     28 04 B0 FD | 	call	#_trackerplayer_spin2_getNoteData
04f48                 | '     processChannel(channel, sampleNumber, period, effect)
04f48     AF 5E 02 FB | 	rdlong	arg01, fp
04f4c     04 5E 05 F1 | 	add	fp, #4
04f50     AF 60 02 FB | 	rdlong	arg02, fp
04f54     04 5E 05 F1 | 	add	fp, #4
04f58     AF 62 02 FB | 	rdlong	arg03, fp
04f5c     04 5E 05 F1 | 	add	fp, #4
04f60     AF 64 02 FB | 	rdlong	arg04, fp
04f64     0C 5E 85 F1 | 	sub	fp, #12
04f68     CC 05 B0 FD | 	call	#_trackerplayer_spin2_processChannel
04f6c     AF 6E 02 FB | 	rdlong	local02, fp
04f70     01 6E 06 F1 | 	add	local02, #1
04f74     AF 6E 62 FC | 	wrlong	local02, fp
04f78     04 6E 5E F2 | 	cmps	local02, #4 wcz
04f7c     90 FF 9F CD |  if_b	jmp	#LR__0184
04f80                 | ' 
04f80                 | '   ' Incrementation the main counter that drives the whole play routine
04f80                 | '   if ++tickCounter >= (currentSongSpeed + patternDelay)
04f80     A1 FA 05 F1 | 	add	objptr, #161
04f84     FD 6C C2 FA | 	rdbyte	local01, objptr
04f88     01 6C 06 F1 | 	add	local01, #1
04f8c     FD 6C 42 FC | 	wrbyte	local01, objptr
04f90     03 FA 05 F1 | 	add	objptr, #3
04f94     FD 70 C2 FA | 	rdbyte	local03, objptr
04f98     01 FA 05 F1 | 	add	objptr, #1
04f9c     FD 72 C2 FA | 	rdbyte	local04, objptr
04fa0     39 71 02 F1 | 	add	local03, local04
04fa4     04 FA 85 F1 | 	sub	objptr, #4
04fa8     FD 74 C2 FA | 	rdbyte	local05, objptr
04fac     A1 FA 85 F1 | 	sub	objptr, #161
04fb0     38 75 5A F2 | 	cmps	local05, local03 wcz
04fb4                 | '     tickCounter := 0
04fb4     A1 FA 05 31 |  if_ae	add	objptr, #161
04fb8     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
04fbc     A1 FA 85 31 |  if_ae	sub	objptr, #161
04fc0                 | ' 
04fc0                 | '   ' If the tick is zero, increment the other counters and do some song positioning handling
04fc0                 | '   if tickCounter == 0
04fc0     A1 FA 05 F1 | 	add	objptr, #161
04fc4     FD 6C CA FA | 	rdbyte	local01, objptr wz
04fc8     A1 FA 85 F1 | 	sub	objptr, #161
04fcc     C4 01 90 5D |  if_ne	jmp	#LR__0194
04fd0                 | ' 
04fd0                 | '     ' Handle the "pattern repeat" command, "E6"
04fd0                 | '     if cmdE6_updatePositionCommon
04fd0     F5 FB 05 F1 | 	add	objptr, #501
04fd4     FD 6C CA FA | 	rdbyte	local01, objptr wz
04fd8     F5 FB 85 F1 | 	sub	objptr, #501
04fdc     8C 00 90 AD |  if_e	jmp	#LR__0188
04fe0                 | '       repeat i from 0 to LAST_CHANNEL
04fe0     10 5E 05 F1 | 	add	fp, #16
04fe4     AF 00 68 FC | 	wrlong	#0, fp
04fe8     10 5E 85 F1 | 	sub	fp, #16
04fec     84 B0 9F FE | 	loc	pa,	#(@LR__0187-@LR__0185)
04ff0     93 00 A0 FD | 	call	#FCACHE_LOAD_
04ff4                 | LR__0185
04ff4                 | '         if cmdE6_updatePosition[i]
04ff4     10 5E 05 F1 | 	add	fp, #16
04ff8     AF 6E 02 FB | 	rdlong	local02, fp
04ffc     10 5E 85 F1 | 	sub	fp, #16
05000     F1 FB 05 F1 | 	add	objptr, #497
05004     FD 6E 02 F1 | 	add	local02, objptr
05008     37 73 CA FA | 	rdbyte	local04, local02 wz
0500c     F1 FB 85 F1 | 	sub	objptr, #497
05010     24 00 90 AD |  if_e	jmp	#LR__0186
05014                 | '           patternRow := cmdE6_memory[i]
05014     10 5E 05 F1 | 	add	fp, #16
05018     AF 6E 02 FB | 	rdlong	local02, fp
0501c     10 5E 85 F1 | 	sub	fp, #16
05020     E9 FB 05 F1 | 	add	objptr, #489
05024     FD 6E 02 F1 | 	add	local02, objptr
05028     37 73 C2 FA | 	rdbyte	local04, local02
0502c     47 FB 85 F1 | 	sub	objptr, #327
05030     FD 72 42 FC | 	wrbyte	local04, objptr
05034     A2 FA 85 F1 | 	sub	objptr, #162
05038                 | LR__0186
05038                 | '         cmdE6_updatePosition[i] := false
05038     10 5E 05 F1 | 	add	fp, #16
0503c     AF 6E 02 FB | 	rdlong	local02, fp
05040     F1 FB 05 F1 | 	add	objptr, #497
05044     FD 6E 02 F1 | 	add	local02, objptr
05048     37 01 48 FC | 	wrbyte	#0, local02
0504c     AF 6E 02 FB | 	rdlong	local02, fp
05050     01 6E 06 F1 | 	add	local02, #1
05054     AF 6E 62 FC | 	wrlong	local02, fp
05058     10 5E 85 F1 | 	sub	fp, #16
0505c     04 6E 5E F2 | 	cmps	local02, #4 wcz
05060     F1 FB 85 F1 | 	sub	objptr, #497
05064     8C FF 9F CD |  if_b	jmp	#LR__0185
05068                 | LR__0187
05068     CC 00 90 FD | 	jmp	#LR__0192
0506c                 | LR__0188
0506c                 | ' 
0506c                 | '     ' Handle the "skip to next pattern with offset command", "D"
0506c                 | '     elseif cmdD_updatePosition
0506c     E6 FB 05 F1 | 	add	objptr, #486
05070     FD 6C CA FA | 	rdbyte	local01, objptr wz
05074     E6 FB 85 F1 | 	sub	objptr, #486
05078     64 00 90 AD |  if_e	jmp	#LR__0189
0507c                 | '       if ++songPosition >= songLength
0507c     A3 FA 05 F1 | 	add	objptr, #163
05080     FD 6C C2 FA | 	rdbyte	local01, objptr
05084     01 6C 06 F1 | 	add	local01, #1
05088     FD 6C 42 FC | 	wrbyte	local01, objptr
0508c     FD 70 C2 FA | 	rdbyte	local03, objptr
05090     09 FA 85 F1 | 	sub	objptr, #9
05094     FD 72 C2 FA | 	rdbyte	local04, objptr
05098     9A FA 85 F1 | 	sub	objptr, #154
0509c     39 71 5A F2 | 	cmps	local03, local04 wcz
050a0                 | '         songPosition := 0
050a0     A3 FA 05 31 |  if_ae	add	objptr, #163
050a4     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
050a8     A3 FA 85 31 |  if_ae	sub	objptr, #163
050ac                 | ' 
050ac                 | '       patternRow := (cmdD_memoryX * 10) + cmdD_memoryY
050ac     E4 FB 05 F1 | 	add	objptr, #484
050b0     FD 70 C2 FA | 	rdbyte	local03, objptr
050b4     38 6D 02 F6 | 	mov	local01, local03
050b8     02 6C 66 F0 | 	shl	local01, #2
050bc     38 6D 02 F1 | 	add	local01, local03
050c0     01 6C 66 F0 | 	shl	local01, #1
050c4     01 FA 05 F1 | 	add	objptr, #1
050c8     FD 72 C2 FA | 	rdbyte	local04, objptr
050cc     39 6D 02 F1 | 	add	local01, local04
050d0     43 FB 85 F1 | 	sub	objptr, #323
050d4     FD 6C 42 FC | 	wrbyte	local01, objptr
050d8     A2 FA 85 F1 | 	sub	objptr, #162
050dc                 | ' 
050dc                 | '     ' If no "jump to row commands" are active, do a normal pattern incrementation
050dc                 | '     else
050dc     58 00 90 FD | 	jmp	#LR__0191
050e0                 | LR__0189
050e0                 | '       if ++patternRow >= PATTERN_LENGTH
050e0     A2 FA 05 F1 | 	add	objptr, #162
050e4     FD 6C C2 FA | 	rdbyte	local01, objptr
050e8     01 6C 06 F1 | 	add	local01, #1
050ec     FD 6C 42 FC | 	wrbyte	local01, objptr
050f0     FD 70 C2 FA | 	rdbyte	local03, objptr
050f4     A2 FA 85 F1 | 	sub	objptr, #162
050f8     40 70 5E F2 | 	cmps	local03, #64 wcz
050fc     38 00 90 CD |  if_b	jmp	#LR__0190
05100                 | '         patternRow := 0
05100     A2 FA 05 F1 | 	add	objptr, #162
05104     FD 00 48 FC | 	wrbyte	#0, objptr
05108                 | ' 
05108                 | '         if ++songPosition >= songLength
05108     01 FA 05 F1 | 	add	objptr, #1
0510c     FD 6C C2 FA | 	rdbyte	local01, objptr
05110     01 6C 06 F1 | 	add	local01, #1
05114     FD 6C 42 FC | 	wrbyte	local01, objptr
05118     FD 70 C2 FA | 	rdbyte	local03, objptr
0511c     09 FA 85 F1 | 	sub	objptr, #9
05120     FD 72 C2 FA | 	rdbyte	local04, objptr
05124     9A FA 85 F1 | 	sub	objptr, #154
05128     39 71 5A F2 | 	cmps	local03, local04 wcz
0512c                 | '           songPosition := 0
0512c     A3 FA 05 31 |  if_ae	add	objptr, #163
05130     FD 00 48 3C |  if_ae	wrbyte	#0, objptr
05134     A3 FA 85 31 |  if_ae	sub	objptr, #163
05138                 | LR__0190
05138                 | LR__0191
05138                 | LR__0192
05138                 | ' 
05138                 | '     ' Handle "jump to song position" command, "B"
05138                 | '     if cmdB_updatePosition
05138     E8 FB 05 F1 | 	add	objptr, #488
0513c     FD 6C CA FA | 	rdbyte	local01, objptr wz
05140     E8 FB 85 F1 | 	sub	objptr, #488
05144     28 00 90 AD |  if_e	jmp	#LR__0193
05148                 | ' 
05148                 | '       songPosition := cmdB_memoryZ
05148     E7 FB 05 F1 | 	add	objptr, #487
0514c     FD 6C C2 FA | 	rdbyte	local01, objptr
05150     44 FB 85 F1 | 	sub	objptr, #324
05154     FD 6C 42 FC | 	wrbyte	local01, objptr
05158                 | ' 
05158                 | '       ifnot cmdD_updatePosition
05158     43 FB 05 F1 | 	add	objptr, #323
0515c     FD 6C CA FA | 	rdbyte	local01, objptr wz
05160     E6 FB 85 F1 | 	sub	objptr, #486
05164                 | '         patternRow := 0
05164     A2 FA 05 A1 |  if_e	add	objptr, #162
05168     FD 00 48 AC |  if_e	wrbyte	#0, objptr
0516c     A2 FA 85 A1 |  if_e	sub	objptr, #162
05170                 | LR__0193
05170                 | ' 
05170                 | '     ' We need to be sure that all positioning commands are reset for the next tick
05170                 | '     cmdE6_updatePositionCommon := false
05170     F5 FB 05 F1 | 	add	objptr, #501
05174     FD 00 48 FC | 	wrbyte	#0, objptr
05178                 | '     cmdB_updatePosition := false
05178     0D FA 85 F1 | 	sub	objptr, #13
0517c     FD 00 48 FC | 	wrbyte	#0, objptr
05180                 | '     cmdD_updatePosition := false
05180     02 FA 85 F1 | 	sub	objptr, #2
05184     FD 00 48 FC | 	wrbyte	#0, objptr
05188                 | '     patternDelay := 0
05188     41 FB 85 F1 | 	sub	objptr, #321
0518c     FD 00 48 FC | 	wrbyte	#0, objptr
05190     A5 FA 85 F1 | 	sub	objptr, #165
05194                 | LR__0194
05194                 | LR__0195
05194     AF F0 03 F6 | 	mov	ptra, fp
05198     BA 00 A0 FD | 	call	#popregs_
0519c                 | _trackerplayer_spin2_tick_ret
0519c     2D 00 64 FD | 	ret
051a0                 | 
051a0                 | ' 
051a0                 | ' 
051a0                 | ' PRI amigaPeriodToNote(period, fTune) : r | i
051a0                 | _trackerplayer_spin2_amigaPeriodToNote
051a0                 | ' 
051a0                 | '   repeat i from 0 to LAST_POS_IN_PERIOD_TBL
051a0     00 1E 06 F6 | 	mov	_var01, #0
051a4     A4 AE 9F FE | 	loc	pa,	#(@LR__0197-@LR__0196)
051a8     93 00 A0 FD | 	call	#FCACHE_LOAD_
051ac                 | LR__0196
051ac                 | '     if (word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][i]) <= period
051ac     06 00 00 FF 
051b0     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
051b4     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
051b8     30 23 02 F6 | 	mov	_var03, arg02
051bc     03 22 66 F0 | 	shl	_var03, #3
051c0     30 23 02 F1 | 	add	_var03, arg02
051c4     03 22 66 F0 | 	shl	_var03, #3
051c8     11 21 02 F1 | 	add	_var02, _var03
051cc     0F 25 02 F6 | 	mov	_var04, _var01
051d0     01 24 66 F0 | 	shl	_var04, #1
051d4     10 25 02 F1 | 	add	_var04, _var02
051d8     12 27 E2 FA | 	rdword	_var05, _var04
051dc     2F 27 5A F2 | 	cmps	_var05, arg01 wcz
051e0                 | '       quit
051e0     06 00 00 FF 
051e4     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
051e8     0C 00 90 ED |  if_be	jmp	#LR__0198
051ec     01 1E 06 F1 | 	add	_var01, #1
051f0     24 1E 5E F2 | 	cmps	_var01, #36 wcz
051f4     B4 FF 9F CD |  if_b	jmp	#LR__0196
051f8                 | LR__0197
051f8                 | LR__0198
051f8                 | ' 
051f8                 | '   return i
051f8     0F 19 02 F6 | 	mov	result1, _var01
051fc                 | _trackerplayer_spin2_amigaPeriodToNote_ret
051fc     2D 00 64 FD | 	ret
05200                 | 
05200                 | ' 
05200                 | ' 
05200                 | ' PRI retunePeriod(period, fTune) | noteNumber
05200                 | _trackerplayer_spin2_retunePeriod
05200     06 5A 05 F6 | 	mov	COUNT_, #6
05204     B0 00 A0 FD | 	call	#pushregs_
05208     2F 6D 02 F6 | 	mov	local01, arg01
0520c     30 6F 02 F6 | 	mov	local02, arg02
05210                 | ' 
05210                 | '   if period > 0 and fTune < 16
05210     00 6C 5E F2 | 	cmps	local01, #0 wcz
05214     50 00 90 ED |  if_be	jmp	#LR__0199
05218     10 6E 5E F2 | 	cmps	local02, #16 wcz
0521c     48 00 90 3D |  if_ae	jmp	#LR__0199
05220                 | '     noteNumber := amigaPeriodToNote(word[period], 0)
05220     36 5F E2 FA | 	rdword	arg01, local01
05224     00 60 06 F6 | 	mov	arg02, #0
05228     74 FF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
0522c     0C 71 02 F6 | 	mov	local03, result1
05230                 | '     word[period] := word[@periodTable + (fTune * BYTES_IN_PERIOD_TABLE)][noteNumber]
05230     06 00 00 FF 
05234     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
05238     0A 73 02 F6 | 	mov	local04, ptr__trackerplayer_spin2_dat__
0523c     37 75 02 F6 | 	mov	local05, local02
05240     03 74 66 F0 | 	shl	local05, #3
05244     37 75 02 F1 | 	add	local05, local02
05248     03 74 66 F0 | 	shl	local05, #3
0524c     3A 73 02 F1 | 	add	local04, local05
05250     01 70 66 F0 | 	shl	local03, #1
05254     39 71 02 F1 | 	add	local03, local04
05258     38 77 E2 FA | 	rdword	local06, local03
0525c     36 77 52 FC | 	wrword	local06, local01
05260     06 00 00 FF 
05264     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
05268                 | LR__0199
05268     AF F0 03 F6 | 	mov	ptra, fp
0526c     BA 00 A0 FD | 	call	#popregs_
05270                 | _trackerplayer_spin2_retunePeriod_ret
05270     2D 00 64 FD | 	ret
05274                 | 
05274                 | ' 
05274                 | ' 
05274                 | ' pub getSampleInfo(sampleNumber, samplePtr, sampleLength, fTune, volume, repeatPoint, repeatLength) | sampleInfoPtr
05274                 | _trackerplayer_spin2_getSampleInfo
05274     2F 1F 0A F6 | 	mov	_var01, arg01 wz
05278                 | ' 
05278                 | '   if sampleNumber == 0 or sampleNumber > LAST_SAMPLE_NUMBER ' Can't go beyond sample 31
05278     08 00 90 AD |  if_e	jmp	#LR__0200
0527c     1F 1E 5E F2 | 	cmps	_var01, #31 wcz
05280     08 00 90 ED |  if_be	jmp	#LR__0201
05284                 | LR__0200
05284                 | '     long[samplePtr] := 0
05284     30 01 68 FC | 	wrlong	#0, arg02
05288                 | '     return
05288     E0 00 90 FD | 	jmp	#_trackerplayer_spin2_getSampleInfo_ret
0528c                 | LR__0201
0528c                 | ' 
0528c                 | '   sampleNumber--
0528c     01 1E 86 F1 | 	sub	_var01, #1
05290                 | '   sampleInfoPtr      := samplesInfoLut + (sampleNumber * 30)
05290     0A FA 05 F1 | 	add	objptr, #10
05294     FD 20 02 FB | 	rdlong	_var02, objptr
05298     0F 23 02 F6 | 	mov	_var03, _var01
0529c     04 22 66 F0 | 	shl	_var03, #4
052a0     0F 23 82 F1 | 	sub	_var03, _var01
052a4     01 22 66 F0 | 	shl	_var03, #1
052a8     11 21 02 F1 | 	add	_var02, _var03
052ac                 | '   long[sampleLength] := ((byte[sampleInfoPtr + 22] << 8) | byte[sampleInfoPtr + 23]) << 1
052ac     10 25 02 F6 | 	mov	_var04, _var02
052b0     16 24 06 F1 | 	add	_var04, #22
052b4     12 27 C2 FA | 	rdbyte	_var05, _var04
052b8     08 26 66 F0 | 	shl	_var05, #8
052bc     10 23 02 F6 | 	mov	_var03, _var02
052c0     17 22 06 F1 | 	add	_var03, #23
052c4     11 29 C2 FA | 	rdbyte	_var06, _var03
052c8     14 27 42 F5 | 	or	_var05, _var06
052cc     01 26 66 F0 | 	shl	_var05, #1
052d0     31 27 62 FC | 	wrlong	_var05, arg03
052d4                 | '   long[fTune]        :=   byte[sampleInfoPtr + 24]
052d4     10 27 02 F6 | 	mov	_var05, _var02
052d8     18 26 06 F1 | 	add	_var05, #24
052dc     13 25 C2 FA | 	rdbyte	_var04, _var05
052e0     32 25 62 FC | 	wrlong	_var04, arg04
052e4                 | '   long[volume]       :=   byte[sampleInfoPtr + 25]
052e4     10 27 02 F6 | 	mov	_var05, _var02
052e8     19 26 06 F1 | 	add	_var05, #25
052ec     13 25 C2 FA | 	rdbyte	_var04, _var05
052f0     33 25 62 FC | 	wrlong	_var04, arg05
052f4                 | '   long[repeatPoint]  := ((byte[sampleInfoPtr + 26] << 8) | byte[sampleInfoPtr + 27]) << 1
052f4     10 25 02 F6 | 	mov	_var04, _var02
052f8     1A 24 06 F1 | 	add	_var04, #26
052fc     12 27 C2 FA | 	rdbyte	_var05, _var04
05300     08 26 66 F0 | 	shl	_var05, #8
05304     10 23 02 F6 | 	mov	_var03, _var02
05308     1B 22 06 F1 | 	add	_var03, #27
0530c     11 29 C2 FA | 	rdbyte	_var06, _var03
05310     14 27 42 F5 | 	or	_var05, _var06
05314     01 26 66 F0 | 	shl	_var05, #1
05318     34 27 62 FC | 	wrlong	_var05, arg06
0531c                 | '   long[repeatLength] := ((byte[sampleInfoPtr + 28] << 8) | byte[sampleInfoPtr + 29]) << 1
0531c     10 25 02 F6 | 	mov	_var04, _var02
05320     1C 24 06 F1 | 	add	_var04, #28
05324     12 27 C2 FA | 	rdbyte	_var05, _var04
05328     08 26 66 F0 | 	shl	_var05, #8
0532c     1D 20 06 F1 | 	add	_var02, #29
05330     10 29 C2 FA | 	rdbyte	_var06, _var02
05334     14 27 42 F5 | 	or	_var05, _var06
05338     01 26 66 F0 | 	shl	_var05, #1
0533c     35 27 62 FC | 	wrlong	_var05, arg07
05340                 | '   long[samplePtr]    := samplesPtrLut[sampleNumber]
05340     02 1E 66 F0 | 	shl	_var01, #2
05344     08 FA 05 F1 | 	add	objptr, #8
05348     FD 1E 02 F1 | 	add	_var01, objptr
0534c     0F 23 02 FB | 	rdlong	_var03, _var01
05350     30 23 62 FC | 	wrlong	_var03, arg02
05354                 | ' 
05354                 | '   if long[repeatLength] == 2 && long[repeatPoint] == 0
05354     35 27 02 FB | 	rdlong	_var05, arg07
05358     02 26 0E F2 | 	cmp	_var05, #2 wz
0535c     12 FA 85 F1 | 	sub	objptr, #18
05360     08 00 90 5D |  if_ne	jmp	#LR__0202
05364     34 25 0A FB | 	rdlong	_var04, arg06 wz
05368                 | '     long[repeatLength] := 1
05368     35 03 68 AC |  if_e	wrlong	#1, arg07
0536c                 | LR__0202
0536c                 | _trackerplayer_spin2_getSampleInfo_ret
0536c     2D 00 64 FD | 	ret
05370                 | 
05370                 | ' 
05370                 | ' 
05370                 | ' PRI getNoteData(channel, position, row, sampleNumber, period, effect) | patternPtr, patternNumber, data, dataPtr
05370                 | _trackerplayer_spin2_getNoteData
05370                 | ' 
05370                 | '   ' Get the note data for a specific channel/song position/pattern row
05370                 | '   patternNumber := byte[songPositionsLut][position & 127]
05370     96 FA 05 F1 | 	add	objptr, #150
05374     FD 1E 02 FB | 	rdlong	_var01, objptr
05378     7F 60 06 F5 | 	and	arg02, #127
0537c     0F 61 02 F1 | 	add	arg02, _var01
05380     30 21 C2 FA | 	rdbyte	_var02, arg02
05384                 | '   patternPtr    := patternsData + (patternNumber << 10)
05384     04 FA 85 F1 | 	sub	objptr, #4
05388     FD 22 02 FB | 	rdlong	_var03, objptr
0538c     92 FA 85 F1 | 	sub	objptr, #146
05390     0A 20 66 F0 | 	shl	_var02, #10
05394     10 23 02 F1 | 	add	_var03, _var02
05398                 | '   dataPtr       := patternPtr + ((row & 63) << 4) + ((channel &3 ) << 2)
05398     3F 62 06 F5 | 	and	arg03, #63
0539c     04 62 66 F0 | 	shl	arg03, #4
053a0     31 23 02 F1 | 	add	_var03, arg03
053a4     03 5E 06 F5 | 	and	arg01, #3
053a8     02 5E 66 F0 | 	shl	arg01, #2
053ac     2F 23 02 F1 | 	add	_var03, arg01
053b0                 | '   data          := (byte[dataPtr][0] << 24) | (byte[dataPtr][1] << 16) | (byte[dataPtr][2] << 8) | byte[dataPtr][3]
053b0     11 25 C2 FA | 	rdbyte	_var04, _var03
053b4     18 24 66 F0 | 	shl	_var04, #24
053b8     01 22 06 F1 | 	add	_var03, #1
053bc     11 27 C2 FA | 	rdbyte	_var05, _var03
053c0     10 26 66 F0 | 	shl	_var05, #16
053c4     13 25 42 F5 | 	or	_var04, _var05
053c8     01 22 06 F1 | 	add	_var03, #1
053cc     11 29 C2 FA | 	rdbyte	_var06, _var03
053d0     08 28 66 F0 | 	shl	_var06, #8
053d4     14 25 42 F5 | 	or	_var04, _var06
053d8     01 22 06 F1 | 	add	_var03, #1
053dc     11 2B C2 FA | 	rdbyte	_var07, _var03
053e0     15 25 42 F5 | 	or	_var04, _var07
053e4                 | ' 
053e4                 | '   ' Extract the different sub parts from the data
053e4                 | '   long[sampleNumber] := ((data >> 12) & $F) | ((data >> 24) & $F0)
053e4     12 2D 02 F6 | 	mov	_var08, _var04
053e8     0C 2C 46 F0 | 	shr	_var08, #12
053ec     0F 2C 06 F5 | 	and	_var08, #15
053f0     12 27 02 F6 | 	mov	_var05, _var04
053f4     18 26 46 F0 | 	shr	_var05, #24
053f8     F0 26 06 F5 | 	and	_var05, #240
053fc     13 2D 42 F5 | 	or	_var08, _var05
05400     32 2D 62 FC | 	wrlong	_var08, arg04
05404                 | '   long[period]       :=  (data >> 16) & $FFF
05404     12 2D 02 F6 | 	mov	_var08, _var04
05408     10 2C 46 F0 | 	shr	_var08, #16
0540c     07 00 00 FF 
05410     FF 2D 06 F5 | 	and	_var08, ##4095
05414     33 2D 62 FC | 	wrlong	_var08, arg05
05418                 | '   long[effect]       :=   data & $FFF
05418     07 00 00 FF 
0541c     FF 25 06 F5 | 	and	_var04, ##4095
05420     34 25 62 FC | 	wrlong	_var04, arg06
05424                 | _trackerplayer_spin2_getNoteData_ret
05424     2D 00 64 FD | 	ret
05428                 | 
05428                 | ' 
05428                 | ' 
05428                 | ' PRI triggerNote(channel)
05428                 | _trackerplayer_spin2_triggerNote
05428                 | ' 
05428                 | '   currSampleNr[channel]     := lastSetSampleNr[channel]
05428     2F 1F 02 F6 | 	mov	_var01, arg01
0542c     02 1E 66 F0 | 	shl	_var01, #2
05430     47 FB 05 F1 | 	add	objptr, #327
05434     FD 1E 02 F1 | 	add	_var01, objptr
05438     2F 21 02 F6 | 	mov	_var02, arg01
0543c     90 FA 85 F1 | 	sub	objptr, #144
05440     0F 23 02 FB | 	rdlong	_var03, _var01
05444     FD 20 02 F1 | 	add	_var02, objptr
05448     10 23 42 FC | 	wrbyte	_var03, _var02
0544c                 | '   currSamplePtr[channel]    := lastSetSamplePtr[channel]              ' This triggers the actual sample playback
0544c     2F 1F 02 F6 | 	mov	_var01, arg01
05450     02 1E 66 F0 | 	shl	_var01, #2
05454     80 FA 05 F1 | 	add	objptr, #128
05458     FD 1E 02 F1 | 	add	_var01, objptr
0545c     2F 21 02 F6 | 	mov	_var02, arg01
05460     02 20 66 F0 | 	shl	_var02, #2
05464     90 FA 85 F1 | 	sub	objptr, #144
05468     0F 23 02 FB | 	rdlong	_var03, _var01
0546c     FD 20 02 F1 | 	add	_var02, objptr
05470     10 23 62 FC | 	wrlong	_var03, _var02
05474                 | '   currPeriod[channel]       := lastSetPeriod[channel]
05474     2F 1F 02 F6 | 	mov	_var01, arg01
05478     02 1E 66 F0 | 	shl	_var01, #2
0547c     80 FA 05 F1 | 	add	objptr, #128
05480     FD 1E 02 F1 | 	add	_var01, objptr
05484     2F 21 02 F6 | 	mov	_var02, arg01
05488     02 20 66 F0 | 	shl	_var02, #2
0548c     48 FA 85 F1 | 	sub	objptr, #72
05490     0F 23 02 FB | 	rdlong	_var03, _var01
05494     FD 20 02 F1 | 	add	_var02, objptr
05498     10 23 62 FC | 	wrlong	_var03, _var02
0549c                 | '   currSampleLength[channel] := lastSetSampleLength[channel]
0549c     2F 1F 02 F6 | 	mov	_var01, arg01
054a0     02 1E 66 F0 | 	shl	_var01, #2
054a4     78 FA 05 F1 | 	add	objptr, #120
054a8     FD 1E 02 F1 | 	add	_var01, objptr
054ac     2F 25 02 F6 | 	mov	_var04, arg01
054b0     01 24 66 F0 | 	shl	_var04, #1
054b4     9C FA 85 F1 | 	sub	objptr, #156
054b8     0F 27 02 FB | 	rdlong	_var05, _var01
054bc     FD 24 02 F1 | 	add	_var04, objptr
054c0     12 27 52 FC | 	wrword	_var05, _var04
054c4                 | '   currRepeatLength[channel] := lastSetRepeatLength[channel]
054c4     2F 1F 02 F6 | 	mov	_var01, arg01
054c8     02 1E 66 F0 | 	shl	_var01, #2
054cc     AC FA 05 F1 | 	add	objptr, #172
054d0     FD 1E 02 F1 | 	add	_var01, objptr
054d4     2F 21 02 F6 | 	mov	_var02, arg01
054d8     02 20 66 F0 | 	shl	_var02, #2
054dc     A4 FA 85 F1 | 	sub	objptr, #164
054e0     0F 23 02 FB | 	rdlong	_var03, _var01
054e4     FD 20 02 F1 | 	add	_var02, objptr
054e8     10 23 62 FC | 	wrlong	_var03, _var02
054ec                 | '   currRepeatPoint[channel]  := lastSetRepeatPoint[channel]
054ec     2F 1F 02 F6 | 	mov	_var01, arg01
054f0     02 1E 66 F0 | 	shl	_var01, #2
054f4     B4 FA 05 F1 | 	add	objptr, #180
054f8     FD 1E 02 F1 | 	add	_var01, objptr
054fc     2F 25 02 F6 | 	mov	_var04, arg01
05500     01 24 66 F0 | 	shl	_var04, #1
05504     A0 FA 85 F1 | 	sub	objptr, #160
05508     0F 27 02 FB | 	rdlong	_var05, _var01
0550c     FD 24 02 F1 | 	add	_var04, objptr
05510     12 27 52 FC | 	wrword	_var05, _var04
05514                 | '   trigger[channel]+=1                                                 ' @pik33 _ I have to know when the note is started
05514     2F 29 02 F6 | 	mov	_var06, arg01
05518     1F FB 05 F1 | 	add	objptr, #287
0551c     FD 28 02 F1 | 	add	_var06, objptr
05520     14 1F C2 FA | 	rdbyte	_var01, _var06
05524     01 1E 06 F1 | 	add	_var01, #1
05528     FD 5E 02 F1 | 	add	arg01, objptr
0552c     2F 1F 42 FC | 	wrbyte	_var01, arg01
05530     F6 FB 85 F1 | 	sub	objptr, #502
05534                 | _trackerplayer_spin2_triggerNote_ret
05534     2D 00 64 FD | 	ret
05538                 | 
05538                 | ' 
05538                 | ' PRI processChannel(channel, sampleNumber, period, effect) | sampleLength, volume, repeatPoint, repeatLength, samplePtr
05538                 | _trackerplayer_spin2_processChannel
05538     08 5A 05 F6 | 	mov	COUNT_, #8
0553c     B0 00 A0 FD | 	call	#pushregs_
05540     24 F0 07 F1 | 	add	ptra, #36
05544     AF 5E 62 FC | 	wrlong	arg01, fp
05548     04 5E 05 F1 | 	add	fp, #4
0554c     AF 60 62 FC | 	wrlong	arg02, fp
05550     04 5E 05 F1 | 	add	fp, #4
05554     AF 62 62 FC | 	wrlong	arg03, fp
05558     04 5E 05 F1 | 	add	fp, #4
0555c     AF 64 62 FC | 	wrlong	arg04, fp
05560     0C 5E 85 F1 | 	sub	fp, #12
05564                 | ' 
05564                 | '   channel := channel & 3
05564     AF 6C 02 FB | 	rdlong	local01, fp
05568     03 6C 06 F5 | 	and	local01, #3
0556c     AF 6C 62 FC | 	wrlong	local01, fp
05570                 | '   cmd     := (effect >> 8) & $F
05570     0C 5E 05 F1 | 	add	fp, #12
05574     AF 6C 02 FB | 	rdlong	local01, fp
05578     08 6C 46 F0 | 	shr	local01, #8
0557c     0F 6C 06 F5 | 	and	local01, #15
05580     BA FB 05 F1 | 	add	objptr, #442
05584     FD 6C 42 FC | 	wrbyte	local01, objptr
05588                 | '   x       := (effect >> 4) & $F
05588     AF 6C 02 FB | 	rdlong	local01, fp
0558c     04 6C 46 F0 | 	shr	local01, #4
05590     0F 6C 06 F5 | 	and	local01, #15
05594     03 FA 85 F1 | 	sub	objptr, #3
05598     FD 6C 42 FC | 	wrbyte	local01, objptr
0559c                 | '   y       := (effect     ) & $F
0559c     AF 6C 02 FB | 	rdlong	local01, fp
055a0     0F 6C 06 F5 | 	and	local01, #15
055a4     01 FA 05 F1 | 	add	objptr, #1
055a8     FD 6C 42 FC | 	wrbyte	local01, objptr
055ac                 | '   z       := (effect     ) & $FF
055ac     AF 6C 02 FB | 	rdlong	local01, fp
055b0     0C 5E 85 F1 | 	sub	fp, #12
055b4     FF 6C 06 F5 | 	and	local01, #255
055b8     01 FA 05 F1 | 	add	objptr, #1
055bc     FD 6C 42 FC | 	wrbyte	local01, objptr
055c0                 | ' 
055c0                 | '   ' Handle everything that executes on "tick zero"
055c0                 | '   if tickCounter == 0
055c0     18 FB 85 F1 | 	sub	objptr, #280
055c4     FD 6C CA FA | 	rdbyte	local01, objptr wz
055c8     A1 FA 85 F1 | 	sub	objptr, #161
055cc     DC 03 90 5D |  if_ne	jmp	#LR__0213
055d0                 | ' 
055d0                 | '     ' These two variables are used for vibrato/tremolo/arpeggio effects and needs to be reset at "tick zero"
055d0                 | '     deltaPeriod[channel] := 0
055d0     AF 6C 02 FB | 	rdlong	local01, fp
055d4     02 6C 66 F0 | 	shl	local01, #2
055d8     EF FA 05 F1 | 	add	objptr, #239
055dc     FD 6C 02 F1 | 	add	local01, objptr
055e0     36 01 68 FC | 	wrlong	#0, local01
055e4                 | '     deltaVolume[channel] := 0
055e4     AF 6C 02 FB | 	rdlong	local01, fp
055e8     02 6C 66 F0 | 	shl	local01, #2
055ec     20 FA 05 F1 | 	add	objptr, #32
055f0     FD 6C 02 F1 | 	add	local01, objptr
055f4     36 01 68 FC | 	wrlong	#0, local01
055f8                 | ' 
055f8                 | '     ' If the sample number is zero, the memory from "last set non zero sample number" is used
055f8                 | '     if sampleNumber > 0
055f8     04 5E 05 F1 | 	add	fp, #4
055fc     AF 6C 02 FB | 	rdlong	local01, fp
05600     04 5E 85 F1 | 	sub	fp, #4
05604     00 6C 5E F2 | 	cmps	local01, #0 wcz
05608     0F FB 85 F1 | 	sub	objptr, #271
0560c     20 00 90 ED |  if_be	jmp	#LR__0203
05610                 | '       sampleNumber_memory[channel] := sampleNumber
05610     AF 6C 02 FB | 	rdlong	local01, fp
05614     E0 FB 05 F1 | 	add	objptr, #480
05618     FD 6C 02 F1 | 	add	local01, objptr
0561c     04 5E 05 F1 | 	add	fp, #4
05620     AF 6E 02 FB | 	rdlong	local02, fp
05624     04 5E 85 F1 | 	sub	fp, #4
05628     36 6F 42 FC | 	wrbyte	local02, local01
0562c     E0 FB 85 F1 | 	sub	objptr, #480
05630                 | LR__0203
05630                 | ' 
05630                 | '     ' Get data for the sample in use by the current channel (uses the memorized sample number)
05630                 | '     getSampleInfo(sampleNumber_memory[channel], @samplePtr, @sampleLength, @fineTune, @volume, @repeatPoint, @repeatLength)
05630     AF 70 02 FB | 	rdlong	local03, fp
05634     E0 FB 05 F1 | 	add	objptr, #480
05638     FD 70 02 F1 | 	add	local03, objptr
0563c     38 5F C2 FA | 	rdbyte	arg01, local03
05640     20 5E 05 F1 | 	add	fp, #32
05644     AF 60 02 F6 | 	mov	arg02, fp
05648     10 5E 85 F1 | 	sub	fp, #16
0564c     AF 62 02 F6 | 	mov	arg03, fp
05650     31 FA 85 F1 | 	sub	objptr, #49
05654     FD 64 02 F6 | 	mov	arg04, objptr
05658     AF FB 85 F1 | 	sub	objptr, #431
0565c     04 5E 05 F1 | 	add	fp, #4
05660     AF 66 02 F6 | 	mov	arg05, fp
05664     04 5E 05 F1 | 	add	fp, #4
05668     AF 68 02 F6 | 	mov	arg06, fp
0566c     04 5E 05 F1 | 	add	fp, #4
05670     AF 72 02 F6 | 	mov	local04, fp
05674     39 75 02 F6 | 	mov	local05, local04
05678     3A 6B 02 F6 | 	mov	arg07, local05
0567c     1C 5E 85 F1 | 	sub	fp, #28
05680     F0 FB BF FD | 	call	#_trackerplayer_spin2_getSampleInfo
05684                 | ' 
05684                 | '     ' Only set volume according to the default sample configuration if the sample number is non zero,
05684                 | '     ' this allows for some tricks when used in combination with the sample number memory (commonly used in protracker modules)
05684                 | '     if sampleNumber > 0
05684     04 5E 05 F1 | 	add	fp, #4
05688     AF 6C 02 FB | 	rdlong	local01, fp
0568c     04 5E 85 F1 | 	sub	fp, #4
05690     00 6C 5E F2 | 	cmps	local01, #0 wcz
05694     24 00 90 ED |  if_be	jmp	#LR__0204
05698                 | '       currVolume[channel] := volume
05698     AF 6C 02 FB | 	rdlong	local01, fp
0569c     02 6C 66 F0 | 	shl	local01, #2
056a0     FF FA 05 F1 | 	add	objptr, #255
056a4     FD 6C 02 F1 | 	add	local01, objptr
056a8     14 5E 05 F1 | 	add	fp, #20
056ac     AF 6E 02 FB | 	rdlong	local02, fp
056b0     14 5E 85 F1 | 	sub	fp, #20
056b4     36 6F 62 FC | 	wrlong	local02, local01
056b8     FF FA 85 F1 | 	sub	objptr, #255
056bc                 | LR__0204
056bc                 | ' 
056bc                 | '     ' Handle all commands that executes on "zero tick"
056bc                 | '     sampleOffset := 0
056bc     B3 FB 05 F1 | 	add	objptr, #435
056c0     FD 00 68 FC | 	wrlong	#0, objptr
056c4     B3 FB 85 F1 | 	sub	objptr, #435
056c8                 | '     handleZeroTickCommands(channel)
056c8     AF 5E 02 FB | 	rdlong	arg01, fp
056cc     98 03 B0 FD | 	call	#_trackerplayer_spin2_handleZeroTickCommands
056d0                 | ' 
056d0                 | '     ' Prepare sample data for triggering (now or later)
056d0                 | '     if period > 0
056d0     08 5E 05 F1 | 	add	fp, #8
056d4     AF 6C 02 FB | 	rdlong	local01, fp
056d8     08 5E 85 F1 | 	sub	fp, #8
056dc     00 6C 5E F2 | 	cmps	local01, #0 wcz
056e0     D0 02 90 ED |  if_be	jmp	#LR__0214
056e4                 | ' 
056e4                 | '       retunePeriod(@period, fineTune)
056e4     08 5E 05 F1 | 	add	fp, #8
056e8     AF 5E 02 F6 | 	mov	arg01, fp
056ec     08 5E 85 F1 | 	sub	fp, #8
056f0     AF FB 05 F1 | 	add	objptr, #431
056f4     FD 60 02 FB | 	rdlong	arg02, objptr
056f8     AF FB 85 F1 | 	sub	objptr, #431
056fc     00 FB BF FD | 	call	#_trackerplayer_spin2_retunePeriod
05700                 | '       currFineTune[channel]        := fineTune
05700     AF 6C 02 FB | 	rdlong	local01, fp
05704     D3 FA 05 F1 | 	add	objptr, #211
05708     FD 6C 02 F1 | 	add	local01, objptr
0570c     DC FA 05 F1 | 	add	objptr, #220
05710     FD 6E 02 FB | 	rdlong	local02, objptr
05714     36 6F 42 FC | 	wrbyte	local02, local01
05718                 | '       lastSetPeriod[channel]       := period
05718     AF 6C 02 FB | 	rdlong	local01, fp
0571c     02 6C 66 F0 | 	shl	local01, #2
05720     88 FA 85 F1 | 	sub	objptr, #136
05724     FD 6C 02 F1 | 	add	local01, objptr
05728     08 5E 05 F1 | 	add	fp, #8
0572c     AF 6E 02 FB | 	rdlong	local02, fp
05730     36 6F 62 FC | 	wrlong	local02, local01
05734     08 5E 85 F1 | 	sub	fp, #8
05738                 | '       lastSetRepeatLength[channel] := repeatLength
05738     AF 6C 02 FB | 	rdlong	local01, fp
0573c     02 6C 66 F0 | 	shl	local01, #2
05740     40 FA 05 F1 | 	add	objptr, #64
05744     FD 6C 02 F1 | 	add	local01, objptr
05748     1C 5E 05 F1 | 	add	fp, #28
0574c     AF 6E 02 FB | 	rdlong	local02, fp
05750     36 6F 62 FC | 	wrlong	local02, local01
05754     1C 5E 85 F1 | 	sub	fp, #28
05758                 | '       lastSetRepeatPoint[channel]  := repeatPoint
05758     AF 6C 02 FB | 	rdlong	local01, fp
0575c     02 6C 66 F0 | 	shl	local01, #2
05760     10 FA 05 F1 | 	add	objptr, #16
05764     FD 6C 02 F1 | 	add	local01, objptr
05768     18 5E 05 F1 | 	add	fp, #24
0576c     AF 6E 02 FB | 	rdlong	local02, fp
05770     36 6F 62 FC | 	wrlong	local02, local01
05774                 | '       lastSetSamplePtr[channel]    := samplePtr + sampleOffset
05774     08 5E 05 F1 | 	add	fp, #8
05778     AF 6C 02 FB | 	rdlong	local01, fp
0577c     20 5E 85 F1 | 	sub	fp, #32
05780     3C FA 05 F1 | 	add	objptr, #60
05784     FD 6E 02 FB | 	rdlong	local02, objptr
05788     37 6D 02 F1 | 	add	local01, local02
0578c     AF 76 02 FB | 	rdlong	local06, fp
05790     02 76 66 F0 | 	shl	local06, #2
05794     7C FA 85 F1 | 	sub	objptr, #124
05798     FD 78 02 F6 | 	mov	local07, objptr
0579c     FD 76 02 F1 | 	add	local06, objptr
057a0     3B 6D 62 FC | 	wrlong	local01, local06
057a4                 | '       lastSetSampleNr[channel]     := sampleNumber
057a4     AF 6C 02 FB | 	rdlong	local01, fp
057a8     02 6C 66 F0 | 	shl	local01, #2
057ac     10 FA 05 F1 | 	add	objptr, #16
057b0     FD 6C 02 F1 | 	add	local01, objptr
057b4     04 5E 05 F1 | 	add	fp, #4
057b8     AF 6E 02 FB | 	rdlong	local02, fp
057bc     36 6F 62 FC | 	wrlong	local02, local01
057c0                 | ' 
057c0                 | '       ' This calculates the correct sample length in all situations
057c0                 | '       if repeatLength > 2
057c0     18 5E 05 F1 | 	add	fp, #24
057c4     AF 6C 02 FB | 	rdlong	local01, fp
057c8     1C 5E 85 F1 | 	sub	fp, #28
057cc     02 6C 5E F2 | 	cmps	local01, #2 wcz
057d0     47 FB 85 F1 | 	sub	objptr, #327
057d4     20 00 90 ED |  if_be	jmp	#LR__0205
057d8                 | '         sampleLength := repeatPoint + repeatLength
057d8     18 5E 05 F1 | 	add	fp, #24
057dc     AF 6C 02 FB | 	rdlong	local01, fp
057e0     04 5E 05 F1 | 	add	fp, #4
057e4     AF 6E 02 FB | 	rdlong	local02, fp
057e8     37 6D 02 F1 | 	add	local01, local02
057ec     0C 5E 85 F1 | 	sub	fp, #12
057f0     AF 6C 62 FC | 	wrlong	local01, fp
057f4     10 5E 85 F1 | 	sub	fp, #16
057f8                 | LR__0205
057f8                 | ' 
057f8                 | '       if sampleLength - sampleOffset < 1
057f8     10 5E 05 F1 | 	add	fp, #16
057fc     AF 6C 02 FB | 	rdlong	local01, fp
05800     10 5E 85 F1 | 	sub	fp, #16
05804     B3 FB 05 F1 | 	add	objptr, #435
05808     FD 6E 02 FB | 	rdlong	local02, objptr
0580c     B3 FB 85 F1 | 	sub	objptr, #435
05810     37 6D 82 F1 | 	sub	local01, local02
05814     01 6C 5E F2 | 	cmps	local01, #1 wcz
05818     1C 00 90 3D |  if_ae	jmp	#LR__0206
0581c                 | '         lastSetSampleLength[channel] := 1
0581c     AF 6C 02 FB | 	rdlong	local01, fp
05820     02 6C 66 F0 | 	shl	local01, #2
05824     57 FB 05 F1 | 	add	objptr, #343
05828     FD 6C 02 F1 | 	add	local01, objptr
0582c     36 03 68 FC | 	wrlong	#1, local01
05830                 | '       else
05830     57 FB 85 F1 | 	sub	objptr, #343
05834     34 00 90 FD | 	jmp	#LR__0207
05838                 | LR__0206
05838                 | '         lastSetSampleLength[channel] := sampleLength - sampleOffset
05838     10 5E 05 F1 | 	add	fp, #16
0583c     AF 6C 02 FB | 	rdlong	local01, fp
05840     10 5E 85 F1 | 	sub	fp, #16
05844     B3 FB 05 F1 | 	add	objptr, #435
05848     FD 6E 02 FB | 	rdlong	local02, objptr
0584c     37 6D 82 F1 | 	sub	local01, local02
05850     AF 76 02 FB | 	rdlong	local06, fp
05854     02 76 66 F0 | 	shl	local06, #2
05858     5C FA 85 F1 | 	sub	objptr, #92
0585c     FD 78 02 F6 | 	mov	local07, objptr
05860     FD 76 02 F1 | 	add	local06, objptr
05864     3B 6D 62 FC | 	wrlong	local01, local06
05868     57 FB 85 F1 | 	sub	objptr, #343
0586c                 | LR__0207
0586c                 | ' 
0586c                 | '       ' When the sample offset is more than the actual sample length, use the repeat data as sample ptr and length
0586c                 | '       if sampleOffset > sampleLength
0586c     B3 FB 05 F1 | 	add	objptr, #435
05870     FD 6C 02 FB | 	rdlong	local01, objptr
05874     B3 FB 85 F1 | 	sub	objptr, #435
05878     10 5E 05 F1 | 	add	fp, #16
0587c     AF 6E 02 FB | 	rdlong	local02, fp
05880     10 5E 85 F1 | 	sub	fp, #16
05884     37 6D 5A F2 | 	cmps	local01, local02 wcz
05888     54 00 90 ED |  if_be	jmp	#LR__0208
0588c                 | '         lastSetSamplePtr[channel] := samplePtr + repeatPoint
0588c     20 5E 05 F1 | 	add	fp, #32
05890     AF 6C 02 FB | 	rdlong	local01, fp
05894     08 5E 85 F1 | 	sub	fp, #8
05898     AF 6E 02 FB | 	rdlong	local02, fp
0589c     18 5E 85 F1 | 	sub	fp, #24
058a0     37 6D 02 F1 | 	add	local01, local02
058a4     AF 76 02 FB | 	rdlong	local06, fp
058a8     02 76 66 F0 | 	shl	local06, #2
058ac     37 FB 05 F1 | 	add	objptr, #311
058b0     FD 78 02 F6 | 	mov	local07, objptr
058b4     FD 76 02 F1 | 	add	local06, objptr
058b8     3B 6D 62 FC | 	wrlong	local01, local06
058bc                 | '         lastSetSampleLength[channel] := repeatLength
058bc     AF 6C 02 FB | 	rdlong	local01, fp
058c0     02 6C 66 F0 | 	shl	local01, #2
058c4     20 FA 05 F1 | 	add	objptr, #32
058c8     FD 6C 02 F1 | 	add	local01, objptr
058cc     1C 5E 05 F1 | 	add	fp, #28
058d0     AF 6E 02 FB | 	rdlong	local02, fp
058d4     1C 5E 85 F1 | 	sub	fp, #28
058d8     36 6F 62 FC | 	wrlong	local02, local01
058dc     57 FB 85 F1 | 	sub	objptr, #343
058e0                 | LR__0208
058e0                 | ' 
058e0                 | '       ' Trigger note/sample playback directly if no delay or portamento is active
058e0                 | '       ifnot cmd == $3 || cmd == $5
058e0     BA FB 05 F1 | 	add	objptr, #442
058e4     FD 6C C2 FA | 	rdbyte	local01, objptr
058e8     BA FB 85 F1 | 	sub	objptr, #442
058ec     03 6C 0E F2 | 	cmp	local01, #3 wz
058f0     54 00 90 AD |  if_e	jmp	#LR__0211
058f4     BA FB 05 F1 | 	add	objptr, #442
058f8     FD 7A C2 FA | 	rdbyte	local08, objptr
058fc     BA FB 85 F1 | 	sub	objptr, #442
05900     3D 6F 02 F6 | 	mov	local02, local08
05904     05 6E 0E F2 | 	cmp	local02, #5 wz
05908     3C 00 90 AD |  if_e	jmp	#LR__0211
0590c                 | '         ifnot cmd == $E && x == $D
0590c     BA FB 05 F1 | 	add	objptr, #442
05910     FD 70 C2 FA | 	rdbyte	local03, objptr
05914     BA FB 85 F1 | 	sub	objptr, #442
05918     38 6D 02 F6 | 	mov	local01, local03
0591c     0E 6C 0E F2 | 	cmp	local01, #14 wz
05920     18 00 90 5D |  if_ne	jmp	#LR__0209
05924     B7 FB 05 F1 | 	add	objptr, #439
05928     FD 7A C2 FA | 	rdbyte	local08, objptr
0592c     B7 FB 85 F1 | 	sub	objptr, #439
05930     3D 6F 02 F6 | 	mov	local02, local08
05934     0D 6E 0E F2 | 	cmp	local02, #13 wz
05938     0C 00 90 AD |  if_e	jmp	#LR__0210
0593c                 | LR__0209
0593c                 | '           triggerNote(channel)
0593c     AF 6C 02 FB | 	rdlong	local01, fp
05940     36 5F 02 F6 | 	mov	arg01, local01
05944     E0 FA BF FD | 	call	#_trackerplayer_spin2_triggerNote
05948                 | LR__0210
05948                 | LR__0211
05948                 | ' 
05948                 | '       ' If the "reset vibrato/tremolo function/s" is/are set, it/they get reset at "zero tick"
05948                 | '       if resetTremolo[channel] > 0
05948     AF 6C 02 FB | 	rdlong	local01, fp
0594c     8F FB 05 F1 | 	add	objptr, #399
05950     FD 6C 02 F1 | 	add	local01, objptr
05954     36 6F C2 FA | 	rdbyte	local02, local01
05958     00 6E 5E F2 | 	cmps	local02, #0 wcz
0595c     8F FB 85 F1 | 	sub	objptr, #399
05960     14 00 90 ED |  if_be	jmp	#LR__0212
05964                 | '         tremoloPos[channel] := 0
05964     AF 6C 02 FB | 	rdlong	local01, fp
05968     8B FB 05 F1 | 	add	objptr, #395
0596c     FD 6C 02 F1 | 	add	local01, objptr
05970     36 01 48 FC | 	wrbyte	#0, local01
05974     8B FB 85 F1 | 	sub	objptr, #395
05978                 | LR__0212
05978                 | ' 
05978                 | '       if resetVibrato[channel] > 0
05978     AF 6C 02 FB | 	rdlong	local01, fp
0597c     93 FB 05 F1 | 	add	objptr, #403
05980     FD 6C 02 F1 | 	add	local01, objptr
05984     36 6F C2 FA | 	rdbyte	local02, local01
05988     00 6E 5E F2 | 	cmps	local02, #0 wcz
0598c     93 FB 85 F1 | 	sub	objptr, #403
05990     20 00 90 ED |  if_be	jmp	#LR__0214
05994                 | '         vibratoPos[channel] := 0
05994     AF 6C 02 FB | 	rdlong	local01, fp
05998     87 FB 05 F1 | 	add	objptr, #391
0599c     FD 6C 02 F1 | 	add	local01, objptr
059a0     36 01 48 FC | 	wrbyte	#0, local01
059a4     87 FB 85 F1 | 	sub	objptr, #391
059a8                 | ' 
059a8                 | '   else
059a8     08 00 90 FD | 	jmp	#LR__0214
059ac                 | LR__0213
059ac                 | '     ' Handle commands that executes on all "non zero ticks"
059ac                 | '     handleNonZeroTickCommands(channel)
059ac     AF 5E 02 FB | 	rdlong	arg01, fp
059b0     14 05 B0 FD | 	call	#_trackerplayer_spin2_handleNonZeroTickCommands
059b4                 | LR__0214
059b4                 | ' 
059b4                 | '   ' Handle commands that executes on every tick
059b4                 | '   handleEveryTickCommands(channel)
059b4     AF 5E 02 FB | 	rdlong	arg01, fp
059b8     70 07 B0 FD | 	call	#_trackerplayer_spin2_handleEveryTickCommands
059bc                 | ' 
059bc                 | '   ' Handle boundaries that should be kept
059bc                 | '   currPeriod[channel] <#= MAXIMUM_PERIOD
059bc     AF 70 02 FB | 	rdlong	local03, fp
059c0     02 70 66 F0 | 	shl	local03, #2
059c4     DF FA 05 F1 | 	add	objptr, #223
059c8     FD 70 02 F1 | 	add	local03, objptr
059cc     38 6D 02 FB | 	rdlong	local01, local03
059d0     01 00 00 FF 
059d4     58 6D 66 F3 | 	fles	local01, ##856
059d8     AF 7A 02 FB | 	rdlong	local08, fp
059dc     02 7A 66 F0 | 	shl	local08, #2
059e0     FD 7A 02 F1 | 	add	local08, objptr
059e4     3D 6D 62 FC | 	wrlong	local01, local08
059e8                 | '   currPeriod[channel] #>= MINIMUM_PERIOD
059e8     AF 70 02 FB | 	rdlong	local03, fp
059ec     02 70 66 F0 | 	shl	local03, #2
059f0     FD 70 02 F1 | 	add	local03, objptr
059f4     38 6D 02 FB | 	rdlong	local01, local03
059f8     71 6C 46 F3 | 	fges	local01, #113
059fc     AF 7A 02 FB | 	rdlong	local08, fp
05a00     02 7A 66 F0 | 	shl	local08, #2
05a04     FD 7A 02 F1 | 	add	local08, objptr
05a08     3D 6D 62 FC | 	wrlong	local01, local08
05a0c                 | '   currVolume[channel] <#= MAXIMUM_VOLUME
05a0c     AF 70 02 FB | 	rdlong	local03, fp
05a10     02 70 66 F0 | 	shl	local03, #2
05a14     20 FA 05 F1 | 	add	objptr, #32
05a18     FD 70 02 F1 | 	add	local03, objptr
05a1c     38 6D 02 FB | 	rdlong	local01, local03
05a20     40 6C 66 F3 | 	fles	local01, #64
05a24     AF 7A 02 FB | 	rdlong	local08, fp
05a28     02 7A 66 F0 | 	shl	local08, #2
05a2c     FD 7A 02 F1 | 	add	local08, objptr
05a30     3D 6D 62 FC | 	wrlong	local01, local08
05a34                 | '   currVolume[channel] #>= MINIMUM_VOLUME
05a34     AF 70 02 FB | 	rdlong	local03, fp
05a38     02 70 66 F0 | 	shl	local03, #2
05a3c     FD 70 02 F1 | 	add	local03, objptr
05a40     38 6D 02 FB | 	rdlong	local01, local03
05a44     00 6C 46 F3 | 	fges	local01, #0
05a48     AF 7A 02 FB | 	rdlong	local08, fp
05a4c     02 7A 66 F0 | 	shl	local08, #2
05a50     FD 7A 02 F1 | 	add	local08, objptr
05a54     3D 6D 62 FC | 	wrlong	local01, local08
05a58     FF FA 85 F1 | 	sub	objptr, #255
05a5c     AF F0 03 F6 | 	mov	ptra, fp
05a60     BA 00 A0 FD | 	call	#popregs_
05a64                 | _trackerplayer_spin2_processChannel_ret
05a64     2D 00 64 FD | 	ret
05a68                 | 
05a68                 | ' 
05a68                 | ' 
05a68                 | ' ' Handle all commands that executes on tick zero
05a68                 | ' '
05a68                 | ' PRI handleZeroTickCommands(channel)
05a68                 | _trackerplayer_spin2_handleZeroTickCommands
05a68     2F 1F 02 F6 | 	mov	_var01, arg01
05a6c                 | ' 
05a6c                 | '   CASE_FAST cmd
05a6c     BA FB 05 F1 | 	add	objptr, #442
05a70     FD 20 C2 FA | 	rdbyte	_var02, objptr
05a74     BA FB 85 F1 | 	sub	objptr, #442
05a78     10 23 02 F6 | 	mov	_var03, _var02
05a7c     09 22 86 F1 | 	sub	_var03, #9
05a80     07 22 26 F3 | 	fle	_var03, #7
05a84     11 25 02 F6 | 	mov	_var04, _var03
05a88     30 24 62 FD | 	jmprel	_var04
05a8c                 | LR__0215
05a8c     1C 00 90 FD | 	jmp	#LR__0216
05a90     30 04 90 FD | 	jmp	#LR__0239
05a94     64 00 90 FD | 	jmp	#LR__0218
05a98     84 00 90 FD | 	jmp	#LR__0219
05a9c     A0 00 90 FD | 	jmp	#LR__0220
05aa0     D0 00 90 FD | 	jmp	#LR__0221
05aa4     9C 03 90 FD | 	jmp	#LR__0236
05aa8     18 04 90 FD | 	jmp	#LR__0239
05aac                 | LR__0216
05aac                 | ' 
05aac                 | '     $9:                          ' Set sample offset
05aac                 | '       if z > 0
05aac     B9 FB 05 F1 | 	add	objptr, #441
05ab0     FD 26 C2 FA | 	rdbyte	_var05, objptr
05ab4     B9 FB 85 F1 | 	sub	objptr, #441
05ab8     00 26 5E F2 | 	cmps	_var05, #0 wcz
05abc     1C 00 90 ED |  if_be	jmp	#LR__0217
05ac0                 | '         cmd9_memoryZ[channel] := z
05ac0     0F 27 02 F6 | 	mov	_var05, _var01
05ac4     DC FB 05 F1 | 	add	objptr, #476
05ac8     FD 26 02 F1 | 	add	_var05, objptr
05acc     23 FA 85 F1 | 	sub	objptr, #35
05ad0     FD 28 C2 FA | 	rdbyte	_var06, objptr
05ad4     B9 FB 85 F1 | 	sub	objptr, #441
05ad8     13 29 42 FC | 	wrbyte	_var06, _var05
05adc                 | LR__0217
05adc                 | ' 
05adc                 | '       sampleOffset := cmd9_memoryZ[channel] << 8
05adc     DC FB 05 F1 | 	add	objptr, #476
05ae0     FD 1E 02 F1 | 	add	_var01, objptr
05ae4     0F 27 C2 FA | 	rdbyte	_var05, _var01
05ae8     08 26 66 F0 | 	shl	_var05, #8
05aec     29 FA 85 F1 | 	sub	objptr, #41
05af0     FD 26 62 FC | 	wrlong	_var05, objptr
05af4     B3 FB 85 F1 | 	sub	objptr, #435
05af8     C8 03 90 FD | 	jmp	#LR__0239
05afc                 | LR__0218
05afc                 | ' 
05afc                 | '     $B:                          ' Jump position
05afc                 | '       cmdB_memoryZ := z
05afc     B9 FB 05 F1 | 	add	objptr, #441
05b00     FD 26 C2 FA | 	rdbyte	_var05, objptr
05b04     2E FA 05 F1 | 	add	objptr, #46
05b08     FD 26 42 FC | 	wrbyte	_var05, objptr
05b0c                 | '       cmdB_updatePosition := true
05b0c     01 FA 05 F1 | 	add	objptr, #1
05b10     FF FF FF FF 
05b14     FD FE 4B FC | 	wrbyte	##-1, objptr
05b18     E8 FB 85 F1 | 	sub	objptr, #488
05b1c     A4 03 90 FD | 	jmp	#LR__0239
05b20                 | LR__0219
05b20                 | ' 
05b20                 | '     $C:                          ' Set volume
05b20                 | '       currVolume[channel] := z
05b20     02 1E 66 F0 | 	shl	_var01, #2
05b24     FF FA 05 F1 | 	add	objptr, #255
05b28     FD 1E 02 F1 | 	add	_var01, objptr
05b2c     BA FA 05 F1 | 	add	objptr, #186
05b30     FD 28 C2 FA | 	rdbyte	_var06, objptr
05b34     B9 FB 85 F1 | 	sub	objptr, #441
05b38     0F 29 62 FC | 	wrlong	_var06, _var01
05b3c     84 03 90 FD | 	jmp	#LR__0239
05b40                 | LR__0220
05b40                 | ' 
05b40                 | '     $D:                          ' Pattern break
05b40                 | '       cmdD_memoryX := x
05b40     B7 FB 05 F1 | 	add	objptr, #439
05b44     FD 26 C2 FA | 	rdbyte	_var05, objptr
05b48     2D FA 05 F1 | 	add	objptr, #45
05b4c     FD 26 42 FC | 	wrbyte	_var05, objptr
05b50                 | '       cmdD_memoryY := y
05b50     2C FA 85 F1 | 	sub	objptr, #44
05b54     FD 26 C2 FA | 	rdbyte	_var05, objptr
05b58     2D FA 05 F1 | 	add	objptr, #45
05b5c     FD 26 42 FC | 	wrbyte	_var05, objptr
05b60                 | '       cmdD_updatePosition := true
05b60     01 FA 05 F1 | 	add	objptr, #1
05b64     FF FF FF FF 
05b68     FD FE 4B FC | 	wrbyte	##-1, objptr
05b6c     E6 FB 85 F1 | 	sub	objptr, #486
05b70     50 03 90 FD | 	jmp	#LR__0239
05b74                 | LR__0221
05b74                 | ' 
05b74                 | '     $E:                          ' Handle "E commands" that execute on tick zero
05b74                 | ' 
05b74                 | '       CASE_FAST x
05b74     B7 FB 05 F1 | 	add	objptr, #439
05b78     FD 2A C2 FA | 	rdbyte	_var07, objptr
05b7c     B7 FB 85 F1 | 	sub	objptr, #439
05b80     15 27 02 F6 | 	mov	_var05, _var07
05b84     0F 26 26 F3 | 	fle	_var05, #15
05b88     13 2D 02 F6 | 	mov	_var08, _var05
05b8c     30 2C 62 FD | 	jmprel	_var08
05b90                 | LR__0222
05b90     3C 00 90 FD | 	jmp	#LR__0223
05b94     58 00 90 FD | 	jmp	#LR__0224
05b98     8C 00 90 FD | 	jmp	#LR__0225
05b9c     C0 00 90 FD | 	jmp	#LR__0226
05ba0     DC 00 90 FD | 	jmp	#LR__0227
05ba4     14 01 90 FD | 	jmp	#LR__0228
05ba8     28 01 90 FD | 	jmp	#LR__0229
05bac     C0 01 90 FD | 	jmp	#LR__0232
05bb0     10 03 90 FD | 	jmp	#LR__0239
05bb4     0C 03 90 FD | 	jmp	#LR__0239
05bb8     F0 01 90 FD | 	jmp	#LR__0233
05bbc     24 02 90 FD | 	jmp	#LR__0234
05bc0     00 03 90 FD | 	jmp	#LR__0239
05bc4     FC 02 90 FD | 	jmp	#LR__0239
05bc8     50 02 90 FD | 	jmp	#LR__0235
05bcc     F4 02 90 FD | 	jmp	#LR__0239
05bd0                 | LR__0223
05bd0                 | ' 
05bd0                 | '         $0: lpFilter := (!y) & 1                 ' Set lowpass filter On/Off
05bd0     B8 FB 05 F1 | 	add	objptr, #440
05bd4     FD 28 C2 FA | 	rdbyte	_var06, objptr
05bd8     14 29 22 F6 | 	not	_var06, _var06
05bdc     01 28 06 F5 | 	and	_var06, #1
05be0     03 FA 05 F1 | 	add	objptr, #3
05be4     FD 28 42 FC | 	wrbyte	_var06, objptr
05be8     BB FB 85 F1 | 	sub	objptr, #443
05bec     D4 02 90 FD | 	jmp	#LR__0239
05bf0                 | LR__0224
05bf0                 | ' 
05bf0                 | '         $1: currPeriod[channel] -= y             ' Fine frequency slide up
05bf0     0F 2F 02 F6 | 	mov	_var09, _var01
05bf4     02 2E 66 F0 | 	shl	_var09, #2
05bf8     DF FA 05 F1 | 	add	objptr, #223
05bfc     FD 2E 02 F1 | 	add	_var09, objptr
05c00     17 29 02 FB | 	rdlong	_var06, _var09
05c04     D9 FA 05 F1 | 	add	objptr, #217
05c08     FD 30 C2 FA | 	rdbyte	_var10, objptr
05c0c     18 29 82 F1 | 	sub	_var06, _var10
05c10     02 1E 66 F0 | 	shl	_var01, #2
05c14     D9 FA 85 F1 | 	sub	objptr, #217
05c18     FD 1E 02 F1 | 	add	_var01, objptr
05c1c     0F 29 62 FC | 	wrlong	_var06, _var01
05c20     DF FA 85 F1 | 	sub	objptr, #223
05c24     9C 02 90 FD | 	jmp	#LR__0239
05c28                 | LR__0225
05c28                 | ' 
05c28                 | '         $2: currPeriod[channel] += y             ' Fine frequency slide down
05c28     0F 2F 02 F6 | 	mov	_var09, _var01
05c2c     02 2E 66 F0 | 	shl	_var09, #2
05c30     DF FA 05 F1 | 	add	objptr, #223
05c34     FD 2E 02 F1 | 	add	_var09, objptr
05c38     17 29 02 FB | 	rdlong	_var06, _var09
05c3c     D9 FA 05 F1 | 	add	objptr, #217
05c40     FD 30 C2 FA | 	rdbyte	_var10, objptr
05c44     18 29 02 F1 | 	add	_var06, _var10
05c48     02 1E 66 F0 | 	shl	_var01, #2
05c4c     D9 FA 85 F1 | 	sub	objptr, #217
05c50     FD 1E 02 F1 | 	add	_var01, objptr
05c54     0F 29 62 FC | 	wrlong	_var06, _var01
05c58     DF FA 85 F1 | 	sub	objptr, #223
05c5c     64 02 90 FD | 	jmp	#LR__0239
05c60                 | LR__0226
05c60                 | ' 
05c60                 | '         $3: portaGlissando[channel] := y & 1     ' Set portamento glissando On/Off
05c60     B8 FB 05 F1 | 	add	objptr, #440
05c64     FD 28 C2 FA | 	rdbyte	_var06, objptr
05c68     01 28 06 F5 | 	and	_var06, #1
05c6c     04 FA 05 F1 | 	add	objptr, #4
05c70     FD 1E 02 F1 | 	add	_var01, objptr
05c74     0F 29 42 FC | 	wrbyte	_var06, _var01
05c78     BC FB 85 F1 | 	sub	objptr, #444
05c7c     44 02 90 FD | 	jmp	#LR__0239
05c80                 | LR__0227
05c80                 | ' 
05c80                 | '         $4:                                      ' Set vibrato waveform type
05c80                 | '           vibratoType[channel]  := y & 3
05c80     B8 FB 05 F1 | 	add	objptr, #440
05c84     FD 28 C2 FA | 	rdbyte	_var06, objptr
05c88     03 28 06 F5 | 	and	_var06, #3
05c8c     0F 33 02 F6 | 	mov	_var11, _var01
05c90     08 FA 05 F1 | 	add	objptr, #8
05c94     FD 32 02 F1 | 	add	_var11, objptr
05c98     19 29 42 FC | 	wrbyte	_var06, _var11
05c9c                 | '           resetVibrato[channel] := y & 4
05c9c     08 FA 85 F1 | 	sub	objptr, #8
05ca0     FD 28 C2 FA | 	rdbyte	_var06, objptr
05ca4     04 28 06 F5 | 	and	_var06, #4
05ca8     25 FA 85 F1 | 	sub	objptr, #37
05cac     FD 1E 02 F1 | 	add	_var01, objptr
05cb0     0F 29 42 FC | 	wrbyte	_var06, _var01
05cb4     93 FB 85 F1 | 	sub	objptr, #403
05cb8     08 02 90 FD | 	jmp	#LR__0239
05cbc                 | LR__0228
05cbc                 | ' 
05cbc                 | '         $5: fineTune := y                        ' Set finetune
05cbc     B8 FB 05 F1 | 	add	objptr, #440
05cc0     FD 28 C2 FA | 	rdbyte	_var06, objptr
05cc4     09 FA 85 F1 | 	sub	objptr, #9
05cc8     FD 28 62 FC | 	wrlong	_var06, objptr
05ccc     AF FB 85 F1 | 	sub	objptr, #431
05cd0     F0 01 90 FD | 	jmp	#LR__0239
05cd4                 | LR__0229
05cd4                 | ' 
05cd4                 | '         $6:                                      ' Pattern looping
05cd4                 | '           if y == 0
05cd4     B8 FB 05 F1 | 	add	objptr, #440
05cd8     FD 28 CA FA | 	rdbyte	_var06, objptr wz
05cdc     B8 FB 85 F1 | 	sub	objptr, #440
05ce0     1C 00 90 5D |  if_ne	jmp	#LR__0230
05ce4                 | '             cmdE6_memory[channel] := patternRow
05ce4     E9 FB 05 F1 | 	add	objptr, #489
05ce8     FD 1E 02 F1 | 	add	_var01, objptr
05cec     47 FB 85 F1 | 	sub	objptr, #327
05cf0     FD 32 C2 FA | 	rdbyte	_var11, objptr
05cf4     A2 FA 85 F1 | 	sub	objptr, #162
05cf8     0F 33 42 FC | 	wrbyte	_var11, _var01
05cfc                 | '           else
05cfc     C4 01 90 FD | 	jmp	#LR__0239
05d00                 | LR__0230
05d00                 | '             if ++cmdE6_counter[channel] <= y
05d00     0F 2F 02 F6 | 	mov	_var09, _var01
05d04     ED FB 05 F1 | 	add	objptr, #493
05d08     FD 2E 02 F1 | 	add	_var09, objptr
05d0c     17 29 C2 FA | 	rdbyte	_var06, _var09
05d10     01 28 06 F1 | 	add	_var06, #1
05d14     0F 31 02 F6 | 	mov	_var10, _var01
05d18     FD 30 02 F1 | 	add	_var10, objptr
05d1c     18 29 42 FC | 	wrbyte	_var06, _var10
05d20     18 35 C2 FA | 	rdbyte	_var12, _var10
05d24     35 FA 85 F1 | 	sub	objptr, #53
05d28     FD 36 C2 FA | 	rdbyte	_var13, objptr
05d2c     B8 FB 85 F1 | 	sub	objptr, #440
05d30     1B 35 5A F2 | 	cmps	_var12, _var13 wcz
05d34     24 00 90 1D |  if_a	jmp	#LR__0231
05d38                 | '               cmdE6_updatePosition[channel] := true
05d38     F1 FB 05 F1 | 	add	objptr, #497
05d3c     FD 1E 02 F1 | 	add	_var01, objptr
05d40     FF FF FF FF 
05d44     0F FF 4B FC | 	wrbyte	##-1, _var01
05d48                 | '               cmdE6_updatePositionCommon    := true
05d48     04 FA 05 F1 | 	add	objptr, #4
05d4c     FF FF FF FF 
05d50     FD FE 4B FC | 	wrbyte	##-1, objptr
05d54     F5 FB 85 F1 | 	sub	objptr, #501
05d58                 | '             else
05d58     68 01 90 FD | 	jmp	#LR__0239
05d5c                 | LR__0231
05d5c                 | '               cmdE6_counter[channel] := 0
05d5c     ED FB 05 F1 | 	add	objptr, #493
05d60     FD 1E 02 F1 | 	add	_var01, objptr
05d64     0F 01 48 FC | 	wrbyte	#0, _var01
05d68     ED FB 85 F1 | 	sub	objptr, #493
05d6c     54 01 90 FD | 	jmp	#LR__0239
05d70                 | LR__0232
05d70                 | ' 
05d70                 | '         $7:                                      ' Set tremolo waveform type
05d70                 | '           tremoloType[channel] := y & 3
05d70     B8 FB 05 F1 | 	add	objptr, #440
05d74     FD 28 C2 FA | 	rdbyte	_var06, objptr
05d78     03 28 06 F5 | 	and	_var06, #3
05d7c     0F 33 02 F6 | 	mov	_var11, _var01
05d80     0C FA 05 F1 | 	add	objptr, #12
05d84     FD 32 02 F1 | 	add	_var11, objptr
05d88     19 29 42 FC | 	wrbyte	_var06, _var11
05d8c                 | '           resetTremolo[channel] := y & 4
05d8c     0C FA 85 F1 | 	sub	objptr, #12
05d90     FD 28 C2 FA | 	rdbyte	_var06, objptr
05d94     04 28 06 F5 | 	and	_var06, #4
05d98     29 FA 85 F1 | 	sub	objptr, #41
05d9c     FD 1E 02 F1 | 	add	_var01, objptr
05da0     0F 29 42 FC | 	wrbyte	_var06, _var01
05da4     8F FB 85 F1 | 	sub	objptr, #399
05da8     18 01 90 FD | 	jmp	#LR__0239
05dac                 | LR__0233
05dac                 | ' 
05dac                 | '         $A: currVolume[channel] += y             ' Fine volume slide up
05dac     0F 2F 02 F6 | 	mov	_var09, _var01
05db0     02 2E 66 F0 | 	shl	_var09, #2
05db4     FF FA 05 F1 | 	add	objptr, #255
05db8     FD 2E 02 F1 | 	add	_var09, objptr
05dbc     17 29 02 FB | 	rdlong	_var06, _var09
05dc0     B9 FA 05 F1 | 	add	objptr, #185
05dc4     FD 30 C2 FA | 	rdbyte	_var10, objptr
05dc8     18 29 02 F1 | 	add	_var06, _var10
05dcc     02 1E 66 F0 | 	shl	_var01, #2
05dd0     B9 FA 85 F1 | 	sub	objptr, #185
05dd4     FD 1E 02 F1 | 	add	_var01, objptr
05dd8     0F 29 62 FC | 	wrlong	_var06, _var01
05ddc     FF FA 85 F1 | 	sub	objptr, #255
05de0     E0 00 90 FD | 	jmp	#LR__0239
05de4                 | LR__0234
05de4                 | ' 
05de4                 | '         $B: currVolume[channel] -= y             ' Fine volume slide down
05de4     0F 2F 02 F6 | 	mov	_var09, _var01
05de8     02 2E 66 F0 | 	shl	_var09, #2
05dec     FF FA 05 F1 | 	add	objptr, #255
05df0     FD 2E 02 F1 | 	add	_var09, objptr
05df4     17 29 02 FB | 	rdlong	_var06, _var09
05df8     B9 FA 05 F1 | 	add	objptr, #185
05dfc     FD 30 C2 FA | 	rdbyte	_var10, objptr
05e00     18 29 82 F1 | 	sub	_var06, _var10
05e04     02 1E 66 F0 | 	shl	_var01, #2
05e08     B9 FA 85 F1 | 	sub	objptr, #185
05e0c     FD 1E 02 F1 | 	add	_var01, objptr
05e10     0F 29 62 FC | 	wrlong	_var06, _var01
05e14     FF FA 85 F1 | 	sub	objptr, #255
05e18     A8 00 90 FD | 	jmp	#LR__0239
05e1c                 | LR__0235
05e1c                 | ' 
05e1c                 | '         $E: patternDelay := y * currentSongSpeed ' Pattern delay
05e1c     B8 FB 05 F1 | 	add	objptr, #440
05e20     FD 2E C2 FA | 	rdbyte	_var09, objptr
05e24     14 FB 85 F1 | 	sub	objptr, #276
05e28     FD 30 C2 FA | 	rdbyte	_var10, objptr
05e2c     18 2F 02 FD | 	qmul	_var09, _var10
05e30     18 28 62 FD | 	getqx	_var06
05e34     01 FA 05 F1 | 	add	objptr, #1
05e38     FD 28 42 FC | 	wrbyte	_var06, objptr
05e3c     A5 FA 85 F1 | 	sub	objptr, #165
05e40     80 00 90 FD | 	jmp	#LR__0239
05e44                 | LR__0236
05e44                 | ' 
05e44                 | '     $F:                          ' Set speed
05e44                 | '       if z < 32
05e44     B9 FB 05 F1 | 	add	objptr, #441
05e48     FD 26 C2 FA | 	rdbyte	_var05, objptr
05e4c     B9 FB 85 F1 | 	sub	objptr, #441
05e50     20 26 5E F2 | 	cmps	_var05, #32 wcz
05e54     18 00 90 3D |  if_ae	jmp	#LR__0237
05e58                 | '         currentSongSpeed := z
05e58     B9 FB 05 F1 | 	add	objptr, #441
05e5c     FD 26 C2 FA | 	rdbyte	_var05, objptr
05e60     15 FB 85 F1 | 	sub	objptr, #277
05e64     FD 26 42 FC | 	wrbyte	_var05, objptr
05e68     A4 FA 85 F1 | 	sub	objptr, #164
05e6c                 | '       else
05e6c     54 00 90 FD | 	jmp	#LR__0238
05e70                 | LR__0237
05e70                 | '         ticksPerMinute := z * 24
05e70     B9 FB 05 F1 | 	add	objptr, #441
05e74     FD 2A C2 FA | 	rdbyte	_var07, objptr
05e78     15 27 02 F6 | 	mov	_var05, _var07
05e7c     01 26 66 F0 | 	shl	_var05, #1
05e80     15 27 02 F1 | 	add	_var05, _var07
05e84     03 26 66 F0 | 	shl	_var05, #3
05e88     12 FA 85 F1 | 	sub	objptr, #18
05e8c     FD 26 62 FC | 	wrlong	_var05, objptr
05e90     A7 FB 85 F1 | 	sub	objptr, #423
05e94                 | '         cyclesToWait   := (systemClock / ticksPerMinute) * 60
05e94     FD 98 02 FB | 	rdlong	muldiva_, objptr
05e98     A7 FB 05 F1 | 	add	objptr, #423
05e9c     FD 9A 02 FB | 	rdlong	muldivb_, objptr
05ea0     A7 FB 85 F1 | 	sub	objptr, #423
05ea4     C6 00 A0 FD | 	call	#divide_
05ea8     4D 29 02 F6 | 	mov	_var06, muldivb_
05eac     04 28 66 F0 | 	shl	_var06, #4
05eb0     4D 29 82 F1 | 	sub	_var06, muldivb_
05eb4     02 28 66 F0 | 	shl	_var06, #2
05eb8     AB FB 05 F1 | 	add	objptr, #427
05ebc     FD 28 62 FC | 	wrlong	_var06, objptr
05ec0     AB FB 85 F1 | 	sub	objptr, #427
05ec4                 | LR__0238
05ec4                 | LR__0239
05ec4                 | _trackerplayer_spin2_handleZeroTickCommands_ret
05ec4     2D 00 64 FD | 	ret
05ec8                 | 
05ec8                 | ' 
05ec8                 | ' 
05ec8                 | ' ' Handle all commands that executes on "non zero ticks"
05ec8                 | ' '
05ec8                 | ' PRI handleNonZeroTickCommands(channel)
05ec8                 | _trackerplayer_spin2_handleNonZeroTickCommands
05ec8     0A 5A 05 F6 | 	mov	COUNT_, #10
05ecc     B0 00 A0 FD | 	call	#pushregs_
05ed0     2F 6D 02 F6 | 	mov	local01, arg01
05ed4                 | ' 
05ed4                 | '   CASE_FAST cmd
05ed4     BA FB 05 F1 | 	add	objptr, #442
05ed8     FD 6E C2 FA | 	rdbyte	local02, objptr
05edc     BA FB 85 F1 | 	sub	objptr, #442
05ee0     37 71 02 F6 | 	mov	local03, local02
05ee4     01 70 86 F1 | 	sub	local03, #1
05ee8     0E 70 26 F3 | 	fle	local03, #14
05eec     38 73 02 F6 | 	mov	local04, local03
05ef0     30 72 62 FD | 	jmprel	local04
05ef4                 | LR__0240
05ef4     38 00 90 FD | 	jmp	#LR__0241
05ef8     A0 00 90 FD | 	jmp	#LR__0242
05efc     D4 00 90 FD | 	jmp	#LR__0243
05f00     1C 02 90 FD | 	jmp	#LR__0253
05f04     20 01 90 FD | 	jmp	#LR__0245
05f08     48 01 90 FD | 	jmp	#LR__0246
05f0c     50 01 90 FD | 	jmp	#LR__0247
05f10     0C 02 90 FD | 	jmp	#LR__0253
05f14     08 02 90 FD | 	jmp	#LR__0253
05f18     B0 01 90 FD | 	jmp	#LR__0250
05f1c     00 02 90 FD | 	jmp	#LR__0253
05f20     FC 01 90 FD | 	jmp	#LR__0253
05f24     F8 01 90 FD | 	jmp	#LR__0253
05f28     AC 01 90 FD | 	jmp	#LR__0251
05f2c     F0 01 90 FD | 	jmp	#LR__0253
05f30                 | LR__0241
05f30                 | ' 
05f30                 | '     $1: currPeriod[channel] -= z        ' Frequency slide up
05f30     36 75 02 F6 | 	mov	local05, local01
05f34     02 74 66 F0 | 	shl	local05, #2
05f38     DF FA 05 F1 | 	add	objptr, #223
05f3c     FD 74 02 F1 | 	add	local05, objptr
05f40     3A 77 02 FB | 	rdlong	local06, local05
05f44     DA FA 05 F1 | 	add	objptr, #218
05f48     FD 78 C2 FA | 	rdbyte	local07, objptr
05f4c     3C 77 82 F1 | 	sub	local06, local07
05f50     36 7B 02 F6 | 	mov	local08, local01
05f54     02 7A 66 F0 | 	shl	local08, #2
05f58     DA FA 85 F1 | 	sub	objptr, #218
05f5c     FD 7A 02 F1 | 	add	local08, objptr
05f60     3D 77 62 FC | 	wrlong	local06, local08
05f64                 | ' 
05f64                 | '        ' This simulates a bug in the original protracker play routine that is dependant on an UINT16 data type
05f64                 | '       if currPeriod[channel] < 0
05f64     36 77 02 F6 | 	mov	local06, local01
05f68     02 76 66 F0 | 	shl	local06, #2
05f6c     FD 76 02 F1 | 	add	local06, objptr
05f70     3B 7D 02 FB | 	rdlong	local09, local06
05f74     00 7C 5E F2 | 	cmps	local09, #0 wcz
05f78     DF FA 85 F1 | 	sub	objptr, #223
05f7c     A0 01 90 3D |  if_ae	jmp	#LR__0253
05f80                 | '         currPeriod[channel] := MAXIMUM_PERIOD
05f80     02 6C 66 F0 | 	shl	local01, #2
05f84     DF FA 05 F1 | 	add	objptr, #223
05f88     FD 6C 02 F1 | 	add	local01, objptr
05f8c     01 00 80 FF 
05f90     36 B1 6A FC | 	wrlong	##856, local01
05f94     DF FA 85 F1 | 	sub	objptr, #223
05f98     84 01 90 FD | 	jmp	#LR__0253
05f9c                 | LR__0242
05f9c                 | ' 
05f9c                 | '     $2: currPeriod[channel] += z        ' Frequency slide down
05f9c     36 75 02 F6 | 	mov	local05, local01
05fa0     02 74 66 F0 | 	shl	local05, #2
05fa4     DF FA 05 F1 | 	add	objptr, #223
05fa8     FD 74 02 F1 | 	add	local05, objptr
05fac     3A 77 02 FB | 	rdlong	local06, local05
05fb0     DA FA 05 F1 | 	add	objptr, #218
05fb4     FD 78 C2 FA | 	rdbyte	local07, objptr
05fb8     3C 77 02 F1 | 	add	local06, local07
05fbc     02 6C 66 F0 | 	shl	local01, #2
05fc0     DA FA 85 F1 | 	sub	objptr, #218
05fc4     FD 6C 02 F1 | 	add	local01, objptr
05fc8     36 77 62 FC | 	wrlong	local06, local01
05fcc     DF FA 85 F1 | 	sub	objptr, #223
05fd0     4C 01 90 FD | 	jmp	#LR__0253
05fd4                 | LR__0243
05fd4                 | ' 
05fd4                 | '     $3:                                 ' Slide to note (portamento)
05fd4                 | '       if z > 0
05fd4     B9 FB 05 F1 | 	add	objptr, #441
05fd8     FD 76 C2 FA | 	rdbyte	local06, objptr
05fdc     B9 FB 85 F1 | 	sub	objptr, #441
05fe0     00 76 5E F2 | 	cmps	local06, #0 wcz
05fe4     1C 00 90 ED |  if_be	jmp	#LR__0244
05fe8                 | '         cmd3_memoryZ[channel] := z
05fe8     36 77 02 F6 | 	mov	local06, local01
05fec     C8 FB 05 F1 | 	add	objptr, #456
05ff0     FD 76 02 F1 | 	add	local06, objptr
05ff4     0F FA 85 F1 | 	sub	objptr, #15
05ff8     FD 7C C2 FA | 	rdbyte	local09, objptr
05ffc     B9 FB 85 F1 | 	sub	objptr, #441
06000     3B 7D 42 FC | 	wrbyte	local09, local06
06004                 | LR__0244
06004                 | ' 
06004                 | '       doPortamento(channel, lastSetPeriod[channel])
06004     36 7D 02 F6 | 	mov	local09, local01
06008     02 7C 66 F0 | 	shl	local09, #2
0600c     27 FB 05 F1 | 	add	objptr, #295
06010     FD 7C 02 F1 | 	add	local09, objptr
06014     3E 61 02 FB | 	rdlong	arg02, local09
06018     36 5F 02 F6 | 	mov	arg01, local01
0601c     27 FB 85 F1 | 	sub	objptr, #295
06020     5C 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
06024     F8 00 90 FD | 	jmp	#LR__0253
06028                 | LR__0245
06028                 | ' 
06028                 | '     $5:                                 ' Volume slide + portamento
06028                 | '       doVolumeSlide(channel)
06028     36 5F 02 F6 | 	mov	arg01, local01
0602c     7C 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
06030                 | '       doPortamento(channel, lastSetPeriod[channel])
06030     36 7D 02 F6 | 	mov	local09, local01
06034     02 7C 66 F0 | 	shl	local09, #2
06038     27 FB 05 F1 | 	add	objptr, #295
0603c     FD 7C 02 F1 | 	add	local09, objptr
06040     3E 61 02 FB | 	rdlong	arg02, local09
06044     36 5F 02 F6 | 	mov	arg01, local01
06048     27 FB 85 F1 | 	sub	objptr, #295
0604c     30 07 B0 FD | 	call	#_trackerplayer_spin2_doPortamento
06050     CC 00 90 FD | 	jmp	#LR__0253
06054                 | LR__0246
06054                 | ' 
06054                 | '     $6: doVolumeSlide(channel)          ' Volume slide + Vibrato (note that vibrato is a)
06054     36 5F 02 F6 | 	mov	arg01, local01
06058     50 09 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
0605c     C0 00 90 FD | 	jmp	#LR__0253
06060                 | LR__0247
06060                 | ' 
06060                 | '     $7:                                 ' Tremolo
06060                 | '       if x > 0
06060     B7 FB 05 F1 | 	add	objptr, #439
06064     FD 76 C2 FA | 	rdbyte	local06, objptr
06068     B7 FB 85 F1 | 	sub	objptr, #439
0606c     00 76 5E F2 | 	cmps	local06, #0 wcz
06070     1C 00 90 ED |  if_be	jmp	#LR__0248
06074                 | '         cmd7_memoryX[channel] := x
06074     36 77 02 F6 | 	mov	local06, local01
06078     D8 FB 05 F1 | 	add	objptr, #472
0607c     FD 76 02 F1 | 	add	local06, objptr
06080     21 FA 85 F1 | 	sub	objptr, #33
06084     FD 7C C2 FA | 	rdbyte	local09, objptr
06088     B7 FB 85 F1 | 	sub	objptr, #439
0608c     3B 7D 42 FC | 	wrbyte	local09, local06
06090                 | LR__0248
06090                 | '       if y > 0
06090     B8 FB 05 F1 | 	add	objptr, #440
06094     FD 76 C2 FA | 	rdbyte	local06, objptr
06098     B8 FB 85 F1 | 	sub	objptr, #440
0609c     00 76 5E F2 | 	cmps	local06, #0 wcz
060a0     1C 00 90 ED |  if_be	jmp	#LR__0249
060a4                 | '         cmd7_memoryY[channel] := y
060a4     36 77 02 F6 | 	mov	local06, local01
060a8     D4 FB 05 F1 | 	add	objptr, #468
060ac     FD 76 02 F1 | 	add	local06, objptr
060b0     1C FA 85 F1 | 	sub	objptr, #28
060b4     FD 7C C2 FA | 	rdbyte	local09, objptr
060b8     B8 FB 85 F1 | 	sub	objptr, #440
060bc     3B 7D 42 FC | 	wrbyte	local09, local06
060c0                 | LR__0249
060c0                 | ' 
060c0                 | '       doTremolo(channel)
060c0     36 5F 02 F6 | 	mov	arg01, local01
060c4     F0 03 B0 FD | 	call	#_trackerplayer_spin2_doTremolo
060c8     54 00 90 FD | 	jmp	#LR__0253
060cc                 | LR__0250
060cc                 | ' 
060cc                 | '     $A: doVolumeSlide(channel)          ' Volume slide
060cc     36 5F 02 F6 | 	mov	arg01, local01
060d0     D8 08 B0 FD | 	call	#_trackerplayer_spin2_doVolumeSlide
060d4     48 00 90 FD | 	jmp	#LR__0253
060d8                 | LR__0251
060d8                 | ' 
060d8                 | '     $E:                                 ' Retrig every Y ticks
060d8                 | '       if (x == $9) && ((tickcounter // y) == 0)
060d8     B7 FB 05 F1 | 	add	objptr, #439
060dc     FD 74 C2 FA | 	rdbyte	local05, objptr
060e0     B7 FB 85 F1 | 	sub	objptr, #439
060e4     09 74 0E F2 | 	cmp	local05, #9 wz
060e8     34 00 90 5D |  if_ne	jmp	#LR__0252
060ec     A1 FA 05 F1 | 	add	objptr, #161
060f0     FD 78 C2 FA | 	rdbyte	local07, objptr
060f4     3C 99 02 F6 | 	mov	muldiva_, local07
060f8     17 FB 05 F1 | 	add	objptr, #279
060fc     FD 7E C2 FA | 	rdbyte	local10, objptr
06100     B8 FB 85 F1 | 	sub	objptr, #440
06104     3F 9B 02 F6 | 	mov	muldivb_, local10
06108     C6 00 A0 FD | 	call	#divide_
0610c     4C 7D 0A F6 | 	mov	local09, muldiva_ wz
06110     0C 00 90 5D |  if_ne	jmp	#LR__0252
06114                 | '         triggerNote(channel)
06114     36 77 02 F6 | 	mov	local06, local01
06118     3B 5F 02 F6 | 	mov	arg01, local06
0611c     08 F3 BF FD | 	call	#_trackerplayer_spin2_triggerNote
06120                 | LR__0252
06120                 | LR__0253
06120     AF F0 03 F6 | 	mov	ptra, fp
06124     BA 00 A0 FD | 	call	#popregs_
06128                 | _trackerplayer_spin2_handleNonZeroTickCommands_ret
06128     2D 00 64 FD | 	ret
0612c                 | 
0612c                 | ' 
0612c                 | ' 
0612c                 | ' ' Handle all commands that executes on every tick
0612c                 | ' '
0612c                 | ' PRI handleEveryTickCommands(channel) | tempNote, arpCounter
0612c                 | _trackerplayer_spin2_handleEveryTickCommands
0612c     0F 5A 05 F6 | 	mov	COUNT_, #15
06130     B0 00 A0 FD | 	call	#pushregs_
06134     2F 6D 02 F6 | 	mov	local01, arg01
06138                 | ' 
06138                 | '   CASE_FAST cmd
06138     BA FB 05 F1 | 	add	objptr, #442
0613c     FD 6E C2 FA | 	rdbyte	local02, objptr
06140     BA FB 85 F1 | 	sub	objptr, #442
06144     37 71 02 F6 | 	mov	local03, local02
06148     0F 70 26 F3 | 	fle	local03, #15
0614c     38 73 02 F6 | 	mov	local04, local03
06150     30 72 62 FD | 	jmprel	local04
06154                 | LR__0254
06154     3C 00 90 FD | 	jmp	#LR__0255
06158     50 03 90 FD | 	jmp	#LR__0269
0615c     4C 03 90 FD | 	jmp	#LR__0269
06160     48 03 90 FD | 	jmp	#LR__0269
06164     D0 01 90 FD | 	jmp	#LR__0258
06168     40 03 90 FD | 	jmp	#LR__0269
0616c     34 02 90 FD | 	jmp	#LR__0261
06170     38 03 90 FD | 	jmp	#LR__0269
06174     34 03 90 FD | 	jmp	#LR__0269
06178     30 03 90 FD | 	jmp	#LR__0269
0617c     2C 03 90 FD | 	jmp	#LR__0269
06180     28 03 90 FD | 	jmp	#LR__0269
06184     24 03 90 FD | 	jmp	#LR__0269
06188     20 03 90 FD | 	jmp	#LR__0269
0618c     20 02 90 FD | 	jmp	#LR__0262
06190     18 03 90 FD | 	jmp	#LR__0269
06194                 | LR__0255
06194                 | ' 
06194                 | '     $0:                                 ' Arpeggio
06194                 | '       arpCounter := tickCounter // 3
06194     A1 FA 05 F1 | 	add	objptr, #161
06198     FD 98 C2 FA | 	rdbyte	muldiva_, objptr
0619c     A1 FA 85 F1 | 	sub	objptr, #161
061a0     03 9A 06 F6 | 	mov	muldivb_, #3
061a4     C6 00 A0 FD | 	call	#divide_
061a8     4C 75 02 F6 | 	mov	local05, muldiva_
061ac                 | '       if (tempNote := amigaPeriodToNote(currPeriod[channel], currFineTune[channel])) < 36
061ac     36 77 02 F6 | 	mov	local06, local01
061b0     02 76 66 F0 | 	shl	local06, #2
061b4     DF FA 05 F1 | 	add	objptr, #223
061b8     FD 76 02 F1 | 	add	local06, objptr
061bc     3B 5F 02 FB | 	rdlong	arg01, local06
061c0     36 79 02 F6 | 	mov	local07, local01
061c4     0C FA 85 F1 | 	sub	objptr, #12
061c8     FD 78 02 F1 | 	add	local07, objptr
061cc     3C 61 C2 FA | 	rdbyte	arg02, local07
061d0     D3 FA 85 F1 | 	sub	objptr, #211
061d4     C8 EF BF FD | 	call	#_trackerplayer_spin2_amigaPeriodToNote
061d8     0C 7B 02 F6 | 	mov	local08, result1
061dc     3D 7D 02 F6 | 	mov	local09, local08
061e0     24 7A 5E F2 | 	cmps	local08, #36 wcz
061e4     C4 02 90 3D |  if_ae	jmp	#LR__0269
061e8                 | '         if arpCounter == 1 and x > 0
061e8     01 74 0E F2 | 	cmp	local05, #1 wz
061ec     80 00 90 5D |  if_ne	jmp	#LR__0256
061f0     B7 FB 05 F1 | 	add	objptr, #439
061f4     FD 7E C2 FA | 	rdbyte	local10, objptr
061f8     B7 FB 85 F1 | 	sub	objptr, #439
061fc     00 7E 5E F2 | 	cmps	local10, #0 wcz
06200     6C 00 90 ED |  if_be	jmp	#LR__0256
06204                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + x) - currPeriod[channel]
06204     3E 5F 02 F6 | 	mov	arg01, local09
06208     B7 FB 05 F1 | 	add	objptr, #439
0620c     FD 80 C2 FA | 	rdbyte	local11, objptr
06210     40 5F 02 F1 | 	add	arg01, local11
06214                 | ' 
06214                 | '   return word[@periodTable][noteNumber]
06214     06 00 00 FF 
06218     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
0621c     01 5E 66 F0 | 	shl	arg01, #1
06220     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
06224     2F 19 E2 FA | 	rdword	result1, arg01
06228     06 00 00 FF 
0622c     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
06230     0C 77 02 F6 | 	mov	local06, result1
06234     36 79 02 F6 | 	mov	local07, local01
06238     02 78 66 F0 | 	shl	local07, #2
0623c     D8 FA 85 F1 | 	sub	objptr, #216
06240     FD 80 02 F6 | 	mov	local11, objptr
06244     FD 78 02 F1 | 	add	local07, objptr
06248     3B 7F 02 F6 | 	mov	local10, local06
0624c     3C 83 02 FB | 	rdlong	local12, local07
06250     41 7F 82 F1 | 	sub	local10, local12
06254     36 85 02 F6 | 	mov	local13, local01
06258     02 84 66 F0 | 	shl	local13, #2
0625c     10 FA 05 F1 | 	add	objptr, #16
06260     FD 86 02 F6 | 	mov	local14, objptr
06264     FD 84 02 F1 | 	add	local13, objptr
06268     42 7F 62 FC | 	wrlong	local10, local13
0626c     EF FA 85 F1 | 	sub	objptr, #239
06270                 | LR__0256
06270                 | '         if arpCounter == 2 and y > 0
06270     02 74 0E F2 | 	cmp	local05, #2 wz
06274     80 00 90 5D |  if_ne	jmp	#LR__0257
06278     B8 FB 05 F1 | 	add	objptr, #440
0627c     FD 7E C2 FA | 	rdbyte	local10, objptr
06280     B8 FB 85 F1 | 	sub	objptr, #440
06284     00 7E 5E F2 | 	cmps	local10, #0 wcz
06288     6C 00 90 ED |  if_be	jmp	#LR__0257
0628c                 | '           deltaPeriod[channel] := noteToAmigaPeriod(tempNote + y) - currPeriod[channel]
0628c     3E 5F 02 F6 | 	mov	arg01, local09
06290     B8 FB 05 F1 | 	add	objptr, #440
06294     FD 80 C2 FA | 	rdbyte	local11, objptr
06298     40 5F 02 F1 | 	add	arg01, local11
0629c                 | ' 
0629c                 | '   return word[@periodTable][noteNumber]
0629c     06 00 00 FF 
062a0     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
062a4     01 5E 66 F0 | 	shl	arg01, #1
062a8     0A 5F 02 F1 | 	add	arg01, ptr__trackerplayer_spin2_dat__
062ac     2F 19 E2 FA | 	rdword	result1, arg01
062b0     06 00 00 FF 
062b4     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
062b8     0C 77 02 F6 | 	mov	local06, result1
062bc     36 79 02 F6 | 	mov	local07, local01
062c0     02 78 66 F0 | 	shl	local07, #2
062c4     D9 FA 85 F1 | 	sub	objptr, #217
062c8     FD 80 02 F6 | 	mov	local11, objptr
062cc     FD 78 02 F1 | 	add	local07, objptr
062d0     3B 7F 02 F6 | 	mov	local10, local06
062d4     3C 83 02 FB | 	rdlong	local12, local07
062d8     41 7F 82 F1 | 	sub	local10, local12
062dc     36 85 02 F6 | 	mov	local13, local01
062e0     02 84 66 F0 | 	shl	local13, #2
062e4     10 FA 05 F1 | 	add	objptr, #16
062e8     FD 86 02 F6 | 	mov	local14, objptr
062ec     FD 84 02 F1 | 	add	local13, objptr
062f0     42 7F 62 FC | 	wrlong	local10, local13
062f4     EF FA 85 F1 | 	sub	objptr, #239
062f8                 | LR__0257
062f8                 | '         if arpCounter == 0 and (x + y) > 0
062f8     00 74 0E F2 | 	cmp	local05, #0 wz
062fc     AC 01 90 5D |  if_ne	jmp	#LR__0269
06300     B7 FB 05 F1 | 	add	objptr, #439
06304     FD 7E C2 FA | 	rdbyte	local10, objptr
06308     01 FA 05 F1 | 	add	objptr, #1
0630c     FD 80 C2 FA | 	rdbyte	local11, objptr
06310     B8 FB 85 F1 | 	sub	objptr, #440
06314     40 7F 02 F1 | 	add	local10, local11
06318     00 7E 5E F2 | 	cmps	local10, #0 wcz
0631c     8C 01 90 ED |  if_be	jmp	#LR__0269
06320                 | '           deltaPeriod[channel] := 0
06320     02 6C 66 F0 | 	shl	local01, #2
06324     EF FA 05 F1 | 	add	objptr, #239
06328     FD 6C 02 F1 | 	add	local01, objptr
0632c     36 01 68 FC | 	wrlong	#0, local01
06330     EF FA 85 F1 | 	sub	objptr, #239
06334     74 01 90 FD | 	jmp	#LR__0269
06338                 | LR__0258
06338                 | ' 
06338                 | '     $4:                                 ' Vibrato
06338                 | '       if x > 0
06338     B7 FB 05 F1 | 	add	objptr, #439
0633c     FD 7E C2 FA | 	rdbyte	local10, objptr
06340     B7 FB 85 F1 | 	sub	objptr, #439
06344     00 7E 5E F2 | 	cmps	local10, #0 wcz
06348     1C 00 90 ED |  if_be	jmp	#LR__0259
0634c                 | '         cmd4_memoryX[channel] := x
0634c     36 7F 02 F6 | 	mov	local10, local01
06350     D0 FB 05 F1 | 	add	objptr, #464
06354     FD 7E 02 F1 | 	add	local10, objptr
06358     19 FA 85 F1 | 	sub	objptr, #25
0635c     FD 78 C2 FA | 	rdbyte	local07, objptr
06360     B7 FB 85 F1 | 	sub	objptr, #439
06364     3F 79 42 FC | 	wrbyte	local07, local10
06368                 | LR__0259
06368                 | '       if y > 0
06368     B8 FB 05 F1 | 	add	objptr, #440
0636c     FD 7E C2 FA | 	rdbyte	local10, objptr
06370     B8 FB 85 F1 | 	sub	objptr, #440
06374     00 7E 5E F2 | 	cmps	local10, #0 wcz
06378     1C 00 90 ED |  if_be	jmp	#LR__0260
0637c                 | '         cmd4_memoryY[channel] := y
0637c     36 7F 02 F6 | 	mov	local10, local01
06380     CC FB 05 F1 | 	add	objptr, #460
06384     FD 7E 02 F1 | 	add	local10, objptr
06388     14 FA 85 F1 | 	sub	objptr, #20
0638c     FD 78 C2 FA | 	rdbyte	local07, objptr
06390     B8 FB 85 F1 | 	sub	objptr, #440
06394     3F 79 42 FC | 	wrbyte	local07, local10
06398                 | LR__0260
06398                 | ' 
06398                 | '       doVibrato(channel)
06398     36 5F 02 F6 | 	mov	arg01, local01
0639c     7C 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
063a0     08 01 90 FD | 	jmp	#LR__0269
063a4                 | LR__0261
063a4                 | ' 
063a4                 | '     $6: doVibrato(channel)              ' Volume slide + Vibrato
063a4     36 5F 02 F6 | 	mov	arg01, local01
063a8     70 02 B0 FD | 	call	#_trackerplayer_spin2_doVibrato
063ac     FC 00 90 FD | 	jmp	#LR__0269
063b0                 | LR__0262
063b0                 | ' 
063b0                 | '     $E:
063b0                 | '       if x == $C                        ' Cut note after Y ticks
063b0     B7 FB 05 F1 | 	add	objptr, #439
063b4     FD 7E C2 FA | 	rdbyte	local10, objptr
063b8     B7 FB 85 F1 | 	sub	objptr, #439
063bc     0C 7E 0E F2 | 	cmp	local10, #12 wz
063c0     34 00 90 5D |  if_ne	jmp	#LR__0263
063c4                 | '         if tickcounter == y
063c4     A1 FA 05 F1 | 	add	objptr, #161
063c8     FD 7E C2 FA | 	rdbyte	local10, objptr
063cc     17 FB 05 F1 | 	add	objptr, #279
063d0     FD 78 C2 FA | 	rdbyte	local07, objptr
063d4     B8 FB 85 F1 | 	sub	objptr, #440
063d8     3C 7F 0A F2 | 	cmp	local10, local07 wz
063dc     CC 00 90 5D |  if_ne	jmp	#LR__0268
063e0                 | '           currVolume[channel] := 0
063e0     02 6C 66 F0 | 	shl	local01, #2
063e4     FF FA 05 F1 | 	add	objptr, #255
063e8     FD 6C 02 F1 | 	add	local01, objptr
063ec     36 01 68 FC | 	wrlong	#0, local01
063f0     FF FA 85 F1 | 	sub	objptr, #255
063f4     B4 00 90 FD | 	jmp	#LR__0268
063f8                 | LR__0263
063f8                 | ' 
063f8                 | '       elseif x == $D                    ' Delay note Y ticks
063f8     B7 FB 05 F1 | 	add	objptr, #439
063fc     FD 7E C2 FA | 	rdbyte	local10, objptr
06400     B7 FB 85 F1 | 	sub	objptr, #439
06404     0D 7E 0E F2 | 	cmp	local10, #13 wz
06408     A0 00 90 5D |  if_ne	jmp	#LR__0267
0640c                 | '         if tickcounter == y
0640c     A1 FA 05 F1 | 	add	objptr, #161
06410     FD 7E C2 FA | 	rdbyte	local10, objptr
06414     17 FB 05 F1 | 	add	objptr, #279
06418     FD 78 C2 FA | 	rdbyte	local07, objptr
0641c     B8 FB 85 F1 | 	sub	objptr, #440
06420     3C 7F 0A F2 | 	cmp	local10, local07 wz
06424     0C 00 90 5D |  if_ne	jmp	#LR__0264
06428                 | '           triggerNote(channel)
06428     36 5F 02 F6 | 	mov	arg01, local01
0642c     F8 EF BF FD | 	call	#_trackerplayer_spin2_triggerNote
06430     78 00 90 FD | 	jmp	#LR__0266
06434                 | LR__0264
06434                 | '         ' Do a "bugged trigger" if y >= currentSongSpeed
06434                 | '         elseif (y >= currentSongSpeed) and tickcounter == (currentSongSpeed - 1)
06434     B8 FB 05 F1 | 	add	objptr, #440
06438     FD 7E C2 FA | 	rdbyte	local10, objptr
0643c     14 FB 85 F1 | 	sub	objptr, #276
06440     FD 78 C2 FA | 	rdbyte	local07, objptr
06444     A4 FA 85 F1 | 	sub	objptr, #164
06448     3C 7F 5A F2 | 	cmps	local10, local07 wcz
0644c     5C 00 90 CD |  if_b	jmp	#LR__0265
06450     A4 FA 05 F1 | 	add	objptr, #164
06454     FD 84 C2 FA | 	rdbyte	local13, objptr
06458     42 83 02 F6 | 	mov	local12, local13
0645c     01 82 86 F1 | 	sub	local12, #1
06460     03 FA 85 F1 | 	sub	objptr, #3
06464     FD 88 C2 FA | 	rdbyte	local15, objptr
06468     A1 FA 85 F1 | 	sub	objptr, #161
0646c     44 87 02 F6 | 	mov	local14, local15
06470     41 87 0A F2 | 	cmp	local14, local12 wz
06474     34 00 90 5D |  if_ne	jmp	#LR__0265
06478                 | '           currPeriod[channel] := lastSetPeriod[channel] ' Only set period, don't trigger a sample playback
06478     36 7F 02 F6 | 	mov	local10, local01
0647c     02 7E 66 F0 | 	shl	local10, #2
06480     27 FB 05 F1 | 	add	objptr, #295
06484     FD 76 02 F6 | 	mov	local06, objptr
06488     FD 7E 02 F1 | 	add	local10, objptr
0648c     36 79 02 F6 | 	mov	local07, local01
06490     02 78 66 F0 | 	shl	local07, #2
06494     48 FA 85 F1 | 	sub	objptr, #72
06498     FD 80 02 F6 | 	mov	local11, objptr
0649c     3F 83 02 FB | 	rdlong	local12, local10
064a0     40 79 02 F1 | 	add	local07, local11
064a4     3C 83 62 FC | 	wrlong	local12, local07
064a8     DF FA 85 F1 | 	sub	objptr, #223
064ac                 | LR__0265
064ac                 | LR__0266
064ac                 | LR__0267
064ac                 | LR__0268
064ac                 | LR__0269
064ac     AF F0 03 F6 | 	mov	ptra, fp
064b0     BA 00 A0 FD | 	call	#popregs_
064b4                 | _trackerplayer_spin2_handleEveryTickCommands_ret
064b4     2D 00 64 FD | 	ret
064b8                 | 
064b8                 | ' 
064b8                 | ' 
064b8                 | ' PRI doTremolo(channel) | depth, sineWave, speed
064b8                 | _trackerplayer_spin2_doTremolo
064b8     2F 1F 02 F6 | 	mov	_var01, arg01
064bc                 | ' 
064bc                 | '   sineWave := long[@vibratoWaveform][tremoloPos[channel]]
064bc     05 00 00 FF 
064c0     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
064c4     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
064c8     0F 23 02 F6 | 	mov	_var03, _var01
064cc     8B FB 05 F1 | 	add	objptr, #395
064d0     FD 22 02 F1 | 	add	_var03, objptr
064d4     11 25 C2 FA | 	rdbyte	_var04, _var03
064d8     02 24 66 F0 | 	shl	_var04, #2
064dc     10 25 02 F1 | 	add	_var04, _var02
064e0     12 27 02 FB | 	rdlong	_var05, _var04
064e4                 | '   depth    := cmd7_memoryY[channel]
064e4     0F 29 02 F6 | 	mov	_var06, _var01
064e8     49 FA 05 F1 | 	add	objptr, #73
064ec     FD 28 02 F1 | 	add	_var06, objptr
064f0     14 2B C2 FA | 	rdbyte	_var07, _var06
064f4                 | '   speed    := cmd7_memoryX[channel]
064f4     0F 29 02 F6 | 	mov	_var06, _var01
064f8     04 FA 05 F1 | 	add	objptr, #4
064fc     FD 28 02 F1 | 	add	_var06, objptr
06500     14 2D C2 FA | 	rdbyte	_var08, _var06
06504                 | ' 
06504                 | '   CASE_FAST vibratoType[channel]
06504     0F 23 02 F6 | 	mov	_var03, _var01
06508     18 FA 85 F1 | 	sub	objptr, #24
0650c     FD 2E 02 F6 | 	mov	_var09, objptr
06510     FD 22 02 F1 | 	add	_var03, objptr
06514     11 29 C2 FA | 	rdbyte	_var06, _var03
06518     03 28 26 F3 | 	fle	_var06, #3
0651c     14 31 02 F6 | 	mov	_var10, _var06
06520     05 00 00 FF 
06524     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
06528     C0 FB 85 F1 | 	sub	objptr, #448
0652c     30 30 62 FD | 	jmprel	_var10
06530                 | LR__0270
06530     0C 00 90 FD | 	jmp	#LR__0271
06534     30 00 90 FD | 	jmp	#LR__0272
06538     6C 00 90 FD | 	jmp	#LR__0273
0653c     B4 00 90 FD | 	jmp	#LR__0274
06540                 | LR__0271
06540                 | ' 
06540                 | '     0: deltaVolume[channel] := (depth * sineWave) SAR 6                                 ' Sine wave
06540     13 2B 02 FD | 	qmul	_var07, _var05
06544     18 24 62 FD | 	getqx	_var04
06548     06 24 C6 F0 | 	sar	_var04, #6
0654c     0F 33 02 F6 | 	mov	_var11, _var01
06550     02 32 66 F0 | 	shl	_var11, #2
06554     0F FB 05 F1 | 	add	objptr, #271
06558     FD 32 02 F1 | 	add	_var11, objptr
0655c     19 25 62 FC | 	wrlong	_var04, _var11
06560     0F FB 85 F1 | 	sub	objptr, #271
06564     8C 00 90 FD | 	jmp	#LR__0274
06568                 | LR__0272
06568                 | '     1: deltaVolume[channel] := (depth * (tremoloPos[channel] << 3) - 256) SAR 6         ' Ramp down wave
06568     0F 33 02 F6 | 	mov	_var11, _var01
0656c     8B FB 05 F1 | 	add	objptr, #395
06570     FD 32 02 F1 | 	add	_var11, objptr
06574     19 21 C2 FA | 	rdbyte	_var02, _var11
06578     03 20 66 F0 | 	shl	_var02, #3
0657c     10 2B 02 FD | 	qmul	_var07, _var02
06580     18 24 62 FD | 	getqx	_var04
06584     00 25 86 F1 | 	sub	_var04, #256
06588     06 24 C6 F0 | 	sar	_var04, #6
0658c     0F 35 02 F6 | 	mov	_var12, _var01
06590     02 34 66 F0 | 	shl	_var12, #2
06594     7C FA 85 F1 | 	sub	objptr, #124
06598     FD 34 02 F1 | 	add	_var12, objptr
0659c     1A 25 62 FC | 	wrlong	_var04, _var12
065a0     0F FB 85 F1 | 	sub	objptr, #271
065a4     4C 00 90 FD | 	jmp	#LR__0274
065a8                 | LR__0273
065a8                 | '     2: deltaVolume[channel] := (depth * ((tremoloPos[channel] & 32) << 4) - 256) SAR 6  ' Square wave
065a8     0F 33 02 F6 | 	mov	_var11, _var01
065ac     8B FB 05 F1 | 	add	objptr, #395
065b0     FD 36 02 F6 | 	mov	_var13, objptr
065b4     FD 32 02 F1 | 	add	_var11, objptr
065b8     19 21 C2 FA | 	rdbyte	_var02, _var11
065bc     20 20 06 F5 | 	and	_var02, #32
065c0     04 20 66 F0 | 	shl	_var02, #4
065c4     10 2B 02 FD | 	qmul	_var07, _var02
065c8     18 38 62 FD | 	getqx	_var14
065cc     1C 25 02 F6 | 	mov	_var04, _var14
065d0     00 25 86 F1 | 	sub	_var04, #256
065d4     06 24 C6 F0 | 	sar	_var04, #6
065d8     0F 35 02 F6 | 	mov	_var12, _var01
065dc     02 34 66 F0 | 	shl	_var12, #2
065e0     7C FA 85 F1 | 	sub	objptr, #124
065e4     FD 3A 02 F6 | 	mov	_var15, objptr
065e8     FD 34 02 F1 | 	add	_var12, objptr
065ec     1A 25 62 FC | 	wrlong	_var04, _var12
065f0     0F FB 85 F1 | 	sub	objptr, #271
065f4                 | LR__0274
065f4                 | ' 
065f4                 | '   tremoloPos[channel] := (tremoloPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
065f4     0F 23 02 F6 | 	mov	_var03, _var01
065f8     8B FB 05 F1 | 	add	objptr, #395
065fc     FD 22 02 F1 | 	add	_var03, objptr
06600     11 29 C2 FA | 	rdbyte	_var06, _var03
06604     16 29 02 F1 | 	add	_var06, _var08
06608     3F 28 06 F5 | 	and	_var06, #63
0660c     FD 1E 02 F1 | 	add	_var01, objptr
06610     0F 29 42 FC | 	wrbyte	_var06, _var01
06614     8B FB 85 F1 | 	sub	objptr, #395
06618                 | _trackerplayer_spin2_doTremolo_ret
06618     2D 00 64 FD | 	ret
0661c                 | 
0661c                 | ' 
0661c                 | ' 
0661c                 | ' PRI doVibrato(channel) | depth, sineWave, speed
0661c                 | _trackerplayer_spin2_doVibrato
0661c     2F 1F 02 F6 | 	mov	_var01, arg01
06620                 | ' 
06620                 | '   sineWave := long[@vibratoWaveform][vibratoPos[channel]]
06620     05 00 00 FF 
06624     A4 15 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##2980
06628     0A 21 02 F6 | 	mov	_var02, ptr__trackerplayer_spin2_dat__
0662c     0F 23 02 F6 | 	mov	_var03, _var01
06630     87 FB 05 F1 | 	add	objptr, #391
06634     FD 22 02 F1 | 	add	_var03, objptr
06638     11 25 C2 FA | 	rdbyte	_var04, _var03
0663c     02 24 66 F0 | 	shl	_var04, #2
06640     10 25 02 F1 | 	add	_var04, _var02
06644     12 27 02 FB | 	rdlong	_var05, _var04
06648                 | '   depth    := cmd4_memoryY[channel]
06648     0F 29 02 F6 | 	mov	_var06, _var01
0664c     45 FA 05 F1 | 	add	objptr, #69
06650     FD 28 02 F1 | 	add	_var06, objptr
06654     14 2B C2 FA | 	rdbyte	_var07, _var06
06658                 | '   speed    := cmd4_memoryX[channel]
06658     0F 29 02 F6 | 	mov	_var06, _var01
0665c     04 FA 05 F1 | 	add	objptr, #4
06660     FD 28 02 F1 | 	add	_var06, objptr
06664     14 2D C2 FA | 	rdbyte	_var08, _var06
06668                 | ' 
06668                 | '   CASE_FAST vibratoType[channel]
06668     0F 23 02 F6 | 	mov	_var03, _var01
0666c     10 FA 85 F1 | 	sub	objptr, #16
06670     FD 2E 02 F6 | 	mov	_var09, objptr
06674     FD 22 02 F1 | 	add	_var03, objptr
06678     11 29 C2 FA | 	rdbyte	_var06, _var03
0667c     03 28 26 F3 | 	fle	_var06, #3
06680     14 31 02 F6 | 	mov	_var10, _var06
06684     05 00 00 FF 
06688     A4 15 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##2980
0668c     C0 FB 85 F1 | 	sub	objptr, #448
06690     30 30 62 FD | 	jmprel	_var10
06694                 | LR__0275
06694     0C 00 90 FD | 	jmp	#LR__0276
06698     30 00 90 FD | 	jmp	#LR__0277
0669c     6C 00 90 FD | 	jmp	#LR__0278
066a0     B4 00 90 FD | 	jmp	#LR__0279
066a4                 | LR__0276
066a4                 | ' 
066a4                 | '     0: deltaPeriod[channel] := (depth * sineWave) SAR 7                                 ' Sine wave
066a4     13 2B 02 FD | 	qmul	_var07, _var05
066a8     18 24 62 FD | 	getqx	_var04
066ac     07 24 C6 F0 | 	sar	_var04, #7
066b0     0F 33 02 F6 | 	mov	_var11, _var01
066b4     02 32 66 F0 | 	shl	_var11, #2
066b8     EF FA 05 F1 | 	add	objptr, #239
066bc     FD 32 02 F1 | 	add	_var11, objptr
066c0     19 25 62 FC | 	wrlong	_var04, _var11
066c4     EF FA 85 F1 | 	sub	objptr, #239
066c8     8C 00 90 FD | 	jmp	#LR__0279
066cc                 | LR__0277
066cc                 | '     1: deltaPeriod[channel] := (depth * (vibratoPos[channel] << 3) - 256) SAR 7         ' Ramp down wave
066cc     0F 33 02 F6 | 	mov	_var11, _var01
066d0     87 FB 05 F1 | 	add	objptr, #391
066d4     FD 32 02 F1 | 	add	_var11, objptr
066d8     19 21 C2 FA | 	rdbyte	_var02, _var11
066dc     03 20 66 F0 | 	shl	_var02, #3
066e0     10 2B 02 FD | 	qmul	_var07, _var02
066e4     18 24 62 FD | 	getqx	_var04
066e8     00 25 86 F1 | 	sub	_var04, #256
066ec     07 24 C6 F0 | 	sar	_var04, #7
066f0     0F 35 02 F6 | 	mov	_var12, _var01
066f4     02 34 66 F0 | 	shl	_var12, #2
066f8     98 FA 85 F1 | 	sub	objptr, #152
066fc     FD 34 02 F1 | 	add	_var12, objptr
06700     1A 25 62 FC | 	wrlong	_var04, _var12
06704     EF FA 85 F1 | 	sub	objptr, #239
06708     4C 00 90 FD | 	jmp	#LR__0279
0670c                 | LR__0278
0670c                 | '     2: deltaPeriod[channel] := (depth * ((vibratoPos[channel] & 32) << 4) - 256) SAR 7  ' Square wave
0670c     0F 33 02 F6 | 	mov	_var11, _var01
06710     87 FB 05 F1 | 	add	objptr, #391
06714     FD 36 02 F6 | 	mov	_var13, objptr
06718     FD 32 02 F1 | 	add	_var11, objptr
0671c     19 21 C2 FA | 	rdbyte	_var02, _var11
06720     20 20 06 F5 | 	and	_var02, #32
06724     04 20 66 F0 | 	shl	_var02, #4
06728     10 2B 02 FD | 	qmul	_var07, _var02
0672c     18 38 62 FD | 	getqx	_var14
06730     1C 25 02 F6 | 	mov	_var04, _var14
06734     00 25 86 F1 | 	sub	_var04, #256
06738     07 24 C6 F0 | 	sar	_var04, #7
0673c     0F 35 02 F6 | 	mov	_var12, _var01
06740     02 34 66 F0 | 	shl	_var12, #2
06744     98 FA 85 F1 | 	sub	objptr, #152
06748     FD 3A 02 F6 | 	mov	_var15, objptr
0674c     FD 34 02 F1 | 	add	_var12, objptr
06750     1A 25 62 FC | 	wrlong	_var04, _var12
06754     EF FA 85 F1 | 	sub	objptr, #239
06758                 | LR__0279
06758                 | ' 
06758                 | '   vibratoPos[channel] := (vibratoPos[channel] + speed) & VIBRATO_WAVEFORM_MASK
06758     0F 23 02 F6 | 	mov	_var03, _var01
0675c     87 FB 05 F1 | 	add	objptr, #391
06760     FD 22 02 F1 | 	add	_var03, objptr
06764     11 29 C2 FA | 	rdbyte	_var06, _var03
06768     16 29 02 F1 | 	add	_var06, _var08
0676c     3F 28 06 F5 | 	and	_var06, #63
06770     FD 1E 02 F1 | 	add	_var01, objptr
06774     0F 29 42 FC | 	wrbyte	_var06, _var01
06778     87 FB 85 F1 | 	sub	objptr, #391
0677c                 | _trackerplayer_spin2_doVibrato_ret
0677c     2D 00 64 FD | 	ret
06780                 | 
06780                 | ' 
06780                 | ' 
06780                 | ' PRI doPortamento(channel, period) | i, j, periodStep, tempPeriod
06780                 | _trackerplayer_spin2_doPortamento
06780                 | ' 
06780                 | '   if period == currPeriod[channel]
06780     2F 1F 02 F6 | 	mov	_var01, arg01
06784     02 1E 66 F0 | 	shl	_var01, #2
06788     DF FA 05 F1 | 	add	objptr, #223
0678c     FD 20 02 F6 | 	mov	_var02, objptr
06790     FD 1E 02 F1 | 	add	_var01, objptr
06794     0F 23 02 FB | 	rdlong	_var03, _var01
06798     11 61 0A F2 | 	cmp	arg02, _var03 wz
0679c                 | '     return
0679c     DF FA 85 F1 | 	sub	objptr, #223
067a0     04 02 90 AD |  if_e	jmp	#_trackerplayer_spin2_doPortamento_ret
067a4                 | ' 
067a4                 | '   if period > 0
067a4     00 60 5E F2 | 	cmps	arg02, #0 wcz
067a8     1C 00 90 ED |  if_be	jmp	#LR__0280
067ac                 | '     portamentoPeriodMemory[channel] := period
067ac     2F 1F 02 F6 | 	mov	_var01, arg01
067b0     02 1E 66 F0 | 	shl	_var01, #2
067b4     97 FB 05 F1 | 	add	objptr, #407
067b8     FD 1E 02 F1 | 	add	_var01, objptr
067bc     0F 61 62 FC | 	wrlong	arg02, _var01
067c0                 | '   else
067c0     97 FB 85 F1 | 	sub	objptr, #407
067c4     18 00 90 FD | 	jmp	#LR__0281
067c8                 | LR__0280
067c8                 | '     period := portamentoPeriodMemory[channel]
067c8     2F 1F 02 F6 | 	mov	_var01, arg01
067cc     02 1E 66 F0 | 	shl	_var01, #2
067d0     97 FB 05 F1 | 	add	objptr, #407
067d4     FD 1E 02 F1 | 	add	_var01, objptr
067d8     0F 61 02 FB | 	rdlong	arg02, _var01
067dc     97 FB 85 F1 | 	sub	objptr, #407
067e0                 | LR__0281
067e0                 | ' 
067e0                 | '   if period > currPeriod[channel]
067e0     2F 1F 02 F6 | 	mov	_var01, arg01
067e4     02 1E 66 F0 | 	shl	_var01, #2
067e8     DF FA 05 F1 | 	add	objptr, #223
067ec     FD 1E 02 F1 | 	add	_var01, objptr
067f0     0F 23 02 FB | 	rdlong	_var03, _var01
067f4     11 61 5A F2 | 	cmps	arg02, _var03 wcz
067f8     DF FA 85 F1 | 	sub	objptr, #223
067fc     68 00 90 ED |  if_be	jmp	#LR__0282
06800                 | '     currPeriod[channel] += cmd3_memoryZ[channel]
06800     2F 21 02 F6 | 	mov	_var02, arg01
06804     02 20 66 F0 | 	shl	_var02, #2
06808     DF FA 05 F1 | 	add	objptr, #223
0680c     FD 20 02 F1 | 	add	_var02, objptr
06810     2F 25 02 F6 | 	mov	_var04, arg01
06814     E9 FA 05 F1 | 	add	objptr, #233
06818     10 1F 02 FB | 	rdlong	_var01, _var02
0681c     FD 24 02 F1 | 	add	_var04, objptr
06820     12 27 C2 FA | 	rdbyte	_var05, _var04
06824     13 1F 02 F1 | 	add	_var01, _var05
06828     2F 29 02 F6 | 	mov	_var06, arg01
0682c     02 28 66 F0 | 	shl	_var06, #2
06830     E9 FA 85 F1 | 	sub	objptr, #233
06834     FD 28 02 F1 | 	add	_var06, objptr
06838     14 1F 62 FC | 	wrlong	_var01, _var06
0683c                 | '     currPeriod[channel] <#= period
0683c     2F 21 02 F6 | 	mov	_var02, arg01
06840     02 20 66 F0 | 	shl	_var02, #2
06844     FD 20 02 F1 | 	add	_var02, objptr
06848     10 1F 02 FB | 	rdlong	_var01, _var02
0684c     30 1F 62 F3 | 	fles	_var01, arg02
06850     2F 25 02 F6 | 	mov	_var04, arg01
06854     02 24 66 F0 | 	shl	_var04, #2
06858     FD 24 02 F1 | 	add	_var04, objptr
0685c     12 1F 62 FC | 	wrlong	_var01, _var04
06860     DF FA 85 F1 | 	sub	objptr, #223
06864     84 00 90 FD | 	jmp	#LR__0284
06868                 | LR__0282
06868                 | ' 
06868                 | '   elseif period < currPeriod[channel]
06868     2F 1F 02 F6 | 	mov	_var01, arg01
0686c     02 1E 66 F0 | 	shl	_var01, #2
06870     DF FA 05 F1 | 	add	objptr, #223
06874     FD 1E 02 F1 | 	add	_var01, objptr
06878     0F 23 02 FB | 	rdlong	_var03, _var01
0687c     11 61 5A F2 | 	cmps	arg02, _var03 wcz
06880     DF FA 85 F1 | 	sub	objptr, #223
06884     64 00 90 3D |  if_ae	jmp	#LR__0283
06888                 | '     currPeriod[channel] -= cmd3_memoryZ[channel]
06888     2F 21 02 F6 | 	mov	_var02, arg01
0688c     02 20 66 F0 | 	shl	_var02, #2
06890     DF FA 05 F1 | 	add	objptr, #223
06894     FD 20 02 F1 | 	add	_var02, objptr
06898     2F 25 02 F6 | 	mov	_var04, arg01
0689c     E9 FA 05 F1 | 	add	objptr, #233
068a0     10 1F 02 FB | 	rdlong	_var01, _var02
068a4     FD 24 02 F1 | 	add	_var04, objptr
068a8     12 27 C2 FA | 	rdbyte	_var05, _var04
068ac     13 1F 82 F1 | 	sub	_var01, _var05
068b0     2F 29 02 F6 | 	mov	_var06, arg01
068b4     02 28 66 F0 | 	shl	_var06, #2
068b8     E9 FA 85 F1 | 	sub	objptr, #233
068bc     FD 28 02 F1 | 	add	_var06, objptr
068c0     14 1F 62 FC | 	wrlong	_var01, _var06
068c4                 | '     currPeriod[channel] #>= period
068c4     2F 21 02 F6 | 	mov	_var02, arg01
068c8     02 20 66 F0 | 	shl	_var02, #2
068cc     FD 20 02 F1 | 	add	_var02, objptr
068d0     10 1F 02 FB | 	rdlong	_var01, _var02
068d4     30 1F 42 F3 | 	fges	_var01, arg02
068d8     2F 25 02 F6 | 	mov	_var04, arg01
068dc     02 24 66 F0 | 	shl	_var04, #2
068e0     FD 24 02 F1 | 	add	_var04, objptr
068e4     12 1F 62 FC | 	wrlong	_var01, _var04
068e8     DF FA 85 F1 | 	sub	objptr, #223
068ec                 | LR__0283
068ec                 | LR__0284
068ec                 | ' 
068ec                 | '   ' Handle glissando if activated
068ec                 | '   if portaGlissando[channel] > 0
068ec     2F 1F 02 F6 | 	mov	_var01, arg01
068f0     BC FB 05 F1 | 	add	objptr, #444
068f4     FD 1E 02 F1 | 	add	_var01, objptr
068f8     0F 23 C2 FA | 	rdbyte	_var03, _var01
068fc     00 22 5E F2 | 	cmps	_var03, #0 wcz
06900     BC FB 85 F1 | 	sub	objptr, #444
06904     A0 00 90 ED |  if_be	jmp	#LR__0287
06908                 | ' 
06908                 | '     tempPeriod := currPeriod[channel]
06908     2F 1F 02 F6 | 	mov	_var01, arg01
0690c     02 1E 66 F0 | 	shl	_var01, #2
06910     DF FA 05 F1 | 	add	objptr, #223
06914     FD 1E 02 F1 | 	add	_var01, objptr
06918     0F 2B 02 FB | 	rdlong	_var07, _var01
0691c                 | ' 
0691c                 | '     repeat i from 0 to LAST_POS_IN_PERIOD_TBL
0691c     00 2C 06 F6 | 	mov	_var08, #0
06920     DF FA 85 F1 | 	sub	objptr, #223
06924     3C 97 9F FE | 	loc	pa,	#(@LR__0286-@LR__0285)
06928     93 00 A0 FD | 	call	#FCACHE_LOAD_
0692c                 | LR__0285
0692c                 | ' 
0692c                 | '       periodStep := word[@periodTable + (currFineTune[channel] * BYTES_IN_PERIOD_TABLE)][i]
0692c     06 00 00 FF 
06930     A4 14 06 F1 | 	add	ptr__trackerplayer_spin2_dat__, ##3236
06934     0A 2F 02 F6 | 	mov	_var09, ptr__trackerplayer_spin2_dat__
06938     2F 23 02 F6 | 	mov	_var03, arg01
0693c     D3 FA 05 F1 | 	add	objptr, #211
06940     FD 22 02 F1 | 	add	_var03, objptr
06944     11 27 C2 FA | 	rdbyte	_var05, _var03
06948     13 31 02 F6 | 	mov	_var10, _var05
0694c     03 30 66 F0 | 	shl	_var10, #3
06950     13 31 02 F1 | 	add	_var10, _var05
06954     03 30 66 F0 | 	shl	_var10, #3
06958     18 2F 02 F1 | 	add	_var09, _var10
0695c     16 33 02 F6 | 	mov	_var11, _var08
06960     01 32 66 F0 | 	shl	_var11, #1
06964     17 33 02 F1 | 	add	_var11, _var09
06968     19 35 E2 FA | 	rdword	_var12, _var11
0696c                 | '       if tempPeriod >= periodStep
0696c     1A 2B 5A F2 | 	cmps	_var07, _var12 wcz
06970                 | '         i += 1000
06970     06 00 00 FF 
06974     A4 14 86 F1 | 	sub	ptr__trackerplayer_spin2_dat__, ##3236
06978     D3 FA 85 F1 | 	sub	objptr, #211
0697c     01 00 00 3F 
06980     E8 2D 06 31 |  if_ae	add	_var08, ##1000
06984     01 2C 06 F1 | 	add	_var08, #1
06988     24 2C 5E F2 | 	cmps	_var08, #36 wcz
0698c     9C FF 9F CD |  if_b	jmp	#LR__0285
06990                 | LR__0286
06990                 | ' 
06990                 | '     deltaPeriod[channel] := periodStep - tempPeriod
06990     15 35 82 F1 | 	sub	_var12, _var07
06994     02 5E 66 F0 | 	shl	arg01, #2
06998     EF FA 05 F1 | 	add	objptr, #239
0699c     FD 5E 02 F1 | 	add	arg01, objptr
069a0     2F 35 62 FC | 	wrlong	_var12, arg01
069a4     EF FA 85 F1 | 	sub	objptr, #239
069a8                 | LR__0287
069a8                 | _trackerplayer_spin2_doPortamento_ret
069a8     2D 00 64 FD | 	ret
069ac                 | 
069ac                 | ' 
069ac                 | ' 
069ac                 | ' PRI doVolumeSlide(channel)
069ac                 | _trackerplayer_spin2_doVolumeSlide
069ac                 | ' 
069ac                 | '   if x > 0
069ac     B7 FB 05 F1 | 	add	objptr, #439
069b0     FD 1E C2 FA | 	rdbyte	_var01, objptr
069b4     B7 FB 85 F1 | 	sub	objptr, #439
069b8     00 1E 5E F2 | 	cmps	_var01, #0 wcz
069bc     38 00 90 ED |  if_be	jmp	#LR__0288
069c0                 | '     currVolume[channel] += x
069c0     2F 21 02 F6 | 	mov	_var02, arg01
069c4     02 20 66 F0 | 	shl	_var02, #2
069c8     FF FA 05 F1 | 	add	objptr, #255
069cc     FD 20 02 F1 | 	add	_var02, objptr
069d0     10 1F 02 FB | 	rdlong	_var01, _var02
069d4     B8 FA 05 F1 | 	add	objptr, #184
069d8     FD 22 C2 FA | 	rdbyte	_var03, objptr
069dc     11 1F 02 F1 | 	add	_var01, _var03
069e0     2F 25 02 F6 | 	mov	_var04, arg01
069e4     02 24 66 F0 | 	shl	_var04, #2
069e8     B8 FA 85 F1 | 	sub	objptr, #184
069ec     FD 24 02 F1 | 	add	_var04, objptr
069f0     12 1F 62 FC | 	wrlong	_var01, _var04
069f4     FF FA 85 F1 | 	sub	objptr, #255
069f8                 | LR__0288
069f8                 | '   if y > 0
069f8     B8 FB 05 F1 | 	add	objptr, #440
069fc     FD 1E C2 FA | 	rdbyte	_var01, objptr
06a00     B8 FB 85 F1 | 	sub	objptr, #440
06a04     00 1E 5E F2 | 	cmps	_var01, #0 wcz
06a08     34 00 90 ED |  if_be	jmp	#LR__0289
06a0c                 | '     currVolume[channel] -= y
06a0c     2F 21 02 F6 | 	mov	_var02, arg01
06a10     02 20 66 F0 | 	shl	_var02, #2
06a14     FF FA 05 F1 | 	add	objptr, #255
06a18     FD 20 02 F1 | 	add	_var02, objptr
06a1c     10 1F 02 FB | 	rdlong	_var01, _var02
06a20     B9 FA 05 F1 | 	add	objptr, #185
06a24     FD 22 C2 FA | 	rdbyte	_var03, objptr
06a28     11 1F 82 F1 | 	sub	_var01, _var03
06a2c     02 5E 66 F0 | 	shl	arg01, #2
06a30     B9 FA 85 F1 | 	sub	objptr, #185
06a34     FD 5E 02 F1 | 	add	arg01, objptr
06a38     2F 1F 62 FC | 	wrlong	_var01, arg01
06a3c     FF FA 85 F1 | 	sub	objptr, #255
06a40                 | LR__0289
06a40                 | _trackerplayer_spin2_doVolumeSlide_ret
06a40     2D 00 64 FD | 	ret
06a44                 | 
06a44                 | ' 
06a44                 | ' 
06a44                 | ' '--------------------------------------------------------------
06a44                 | ' '---------- Init the variables, start the cog. ----------------
06a44                 | ' '--------------------------------------------------------------
06a44                 | ' 
06a44                 | ' pub start() :cog,base | iii
06a44                 | _audio019_spin2_start
06a44     07 5A 05 F6 | 	mov	COUNT_, #7
06a48     B0 00 A0 FD | 	call	#pushregs_
06a4c                 | ' 
06a4c                 | ' base:=@channel1[0]
06a4c     FD 6C 02 F6 | 	mov	local01, objptr
06a50                 | ' 
06a50                 | ' repeat iii from 0 to 7
06a50     00 6E 06 F6 | 	mov	local02, #0
06a54     B4 96 9F FE | 	loc	pa,	#(@LR__0291-@LR__0290)
06a58     93 00 A0 FD | 	call	#FCACHE_LOAD_
06a5c                 | LR__0290
06a5c                 | '   long [base+32*iii]:=0
06a5c     36 71 02 F6 | 	mov	local03, local01
06a60     37 73 02 F6 | 	mov	local04, local02
06a64     05 72 66 F0 | 	shl	local04, #5
06a68     39 71 02 F1 | 	add	local03, local04
06a6c     38 01 68 FC | 	wrlong	#0, local03
06a70                 | '   long [base+32*iii+4]:=0
06a70     36 71 02 F6 | 	mov	local03, local01
06a74     37 73 02 F6 | 	mov	local04, local02
06a78     05 72 66 F0 | 	shl	local04, #5
06a7c     39 71 02 F1 | 	add	local03, local04
06a80     04 70 06 F1 | 	add	local03, #4
06a84     38 01 68 FC | 	wrlong	#0, local03
06a88                 | '   long[base+32*iii+12]:=0
06a88     36 71 02 F6 | 	mov	local03, local01
06a8c     37 73 02 F6 | 	mov	local04, local02
06a90     05 72 66 F0 | 	shl	local04, #5
06a94     39 71 02 F1 | 	add	local03, local04
06a98     0C 70 06 F1 | 	add	local03, #12
06a9c     38 01 68 FC | 	wrlong	#0, local03
06aa0                 | '   long[base+32*iii+16]:=2 
06aa0     36 71 02 F6 | 	mov	local03, local01
06aa4     37 73 02 F6 | 	mov	local04, local02
06aa8     05 72 66 F0 | 	shl	local04, #5
06aac     39 71 02 F1 | 	add	local03, local04
06ab0     10 70 06 F1 | 	add	local03, #16
06ab4     38 05 68 FC | 	wrlong	#2, local03
06ab8                 | '   word[base+32*iii+20]:=0
06ab8     36 71 02 F6 | 	mov	local03, local01
06abc     37 73 02 F6 | 	mov	local04, local02
06ac0     05 72 66 F0 | 	shl	local04, #5
06ac4     39 71 02 F1 | 	add	local03, local04
06ac8     14 70 06 F1 | 	add	local03, #20
06acc     38 01 58 FC | 	wrword	#0, local03
06ad0                 | '   word[base+32*iii+22]:=8192
06ad0     36 71 02 F6 | 	mov	local03, local01
06ad4     37 73 02 F6 | 	mov	local04, local02
06ad8     05 72 66 F0 | 	shl	local04, #5
06adc     39 71 02 F1 | 	add	local03, local04
06ae0     16 70 06 F1 | 	add	local03, #22
06ae4     10 00 80 FF 
06ae8     38 01 58 FC | 	wrword	##8192, local03
06aec                 | '   word[base+32*iii+24]:=100+2*iii
06aec     37 73 02 F6 | 	mov	local04, local02
06af0     01 72 66 F0 | 	shl	local04, #1
06af4     64 70 06 F6 | 	mov	local03, #100
06af8     39 71 02 F1 | 	add	local03, local04
06afc     36 75 02 F6 | 	mov	local05, local01
06b00     37 77 02 F6 | 	mov	local06, local02
06b04     05 76 66 F0 | 	shl	local06, #5
06b08     3B 75 02 F1 | 	add	local05, local06
06b0c     18 74 06 F1 | 	add	local05, #24
06b10     3A 71 52 FC | 	wrword	local03, local05
06b14                 | '   word[base+32*iii+26]:=2
06b14     36 71 02 F6 | 	mov	local03, local01
06b18     37 73 02 F6 | 	mov	local04, local02
06b1c     05 72 66 F0 | 	shl	local04, #5
06b20     39 71 02 F1 | 	add	local03, local04
06b24     1A 70 06 F1 | 	add	local03, #26
06b28     38 05 58 FC | 	wrword	#2, local03
06b2c                 | '   long [base+32*iii+8]:=@null | $C0000000
06b2c     01 00 00 FF 
06b30     F8 02 06 F1 | 	add	ptr__audio019_spin2_dat__, ##760
06b34     01 71 02 F6 | 	mov	local03, ptr__audio019_spin2_dat__
06b38     3E 70 26 F4 | 	bith	local03, #62
06b3c     36 75 02 F6 | 	mov	local05, local01
06b40     37 77 02 F6 | 	mov	local06, local02
06b44     05 76 66 F0 | 	shl	local06, #5
06b48     3B 75 02 F1 | 	add	local05, local06
06b4c     08 74 06 F1 | 	add	local05, #8
06b50     3A 71 62 FC | 	wrlong	local03, local05
06b54     01 6E 06 F1 | 	add	local02, #1
06b58     08 6E 5E F2 | 	cmps	local02, #8 wcz
06b5c     01 00 00 FF 
06b60     F8 02 86 F1 | 	sub	ptr__audio019_spin2_dat__, ##760
06b64     F4 FE 9F CD |  if_b	jmp	#LR__0290
06b68                 | LR__0291
06b68                 | '   
06b68                 | ' cog:=coginit(16,@audio,@channel1)
06b68     01 61 02 F6 | 	mov	arg02, ptr__audio019_spin2_dat__
06b6c     FD 62 02 F6 | 	mov	arg03, objptr
06b70     10 5E 06 F6 | 	mov	arg01, #16
06b74     28 62 62 FD | 	setq	arg03
06b78     30 5F F2 FC | 	coginit	arg01, arg02 wc
06b7c     01 5E 66 C6 |  if_b	neg	arg01, #1
06b80     2F 19 02 F6 | 	mov	result1, arg01
06b84     0C 79 02 F6 | 	mov	local07, result1
06b88                 | ' waitms(100)
06b88     64 5E 06 F6 | 	mov	arg01, #100
06b8c     CC 04 B0 FD | 	call	#__system___waitms
06b90                 | ' return cog,base
06b90     36 1B 02 F6 | 	mov	result2, local01
06b94     3C 19 02 F6 | 	mov	result1, local07
06b98     AF F0 03 F6 | 	mov	ptra, fp
06b9c     BA 00 A0 FD | 	call	#popregs_
06ba0                 | _audio019_spin2_start_ret
06ba0     2D 00 64 FD | 	ret
06ba4                 | hubexit
06ba4     81 00 80 FD | 	jmp	#cogexit
06ba8                 | 
06ba8                 | __system___setbaud
06ba8     14 98 06 FB | 	rdlong	muldiva_, #20
06bac     2F 9B 02 F6 | 	mov	muldivb_, arg01
06bb0     C6 00 A0 FD | 	call	#divide_
06bb4     40 7C 64 FD | 	dirl	#62
06bb8     40 7E 64 FD | 	dirl	#63
06bbc     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06bc0     10 9A 66 F0 | 	shl	muldivb_, #16
06bc4     07 60 06 F6 | 	mov	arg02, #7
06bc8     4D 61 02 F1 | 	add	arg02, muldivb_
06bcc     3E F8 0C FC | 	wrpin	#124, #62
06bd0     3E 60 16 FC | 	wxpin	arg02, #62
06bd4     3F 7C 0C FC | 	wrpin	#62, #63
06bd8     14 60 06 F1 | 	add	arg02, #20
06bdc     3F 60 16 FC | 	wxpin	arg02, #63
06be0     41 7C 64 FD | 	dirh	#62
06be4     41 7E 64 FD | 	dirh	#63
06be8                 | __system___setbaud_ret
06be8     2D 00 64 FD | 	ret
06bec                 | 
06bec                 | __system___txraw
06bec     02 5A 05 F6 | 	mov	COUNT_, #2
06bf0     B0 00 A0 FD | 	call	#pushregs_
06bf4     2F 6D 02 F6 | 	mov	local01, arg01
06bf8     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06bfc     0C 00 90 5D |  if_ne	jmp	#LR__0292
06c00     08 07 00 FF 
06c04     00 5E 06 F6 | 	mov	arg01, ##921600
06c08     9C FF BF FD | 	call	#__system___setbaud
06c0c                 | LR__0292
06c0c     3E 6C 26 FC | 	wypin	local01, #62
06c10     1F 02 64 FD | 	waitx	#1
06c14     F0 93 9F FE | 	loc	pa,	#(@LR__0294-@LR__0293)
06c18     93 00 A0 FD | 	call	#FCACHE_LOAD_
06c1c                 | LR__0293
06c1c     40 7C 74 FD | 	testp	#62 wc
06c20     F8 FF 9F 3D |  if_nc	jmp	#LR__0293
06c24                 | LR__0294
06c24     01 18 06 F6 | 	mov	result1, #1
06c28     AF F0 03 F6 | 	mov	ptra, fp
06c2c     BA 00 A0 FD | 	call	#popregs_
06c30                 | __system___txraw_ret
06c30     2D 00 64 FD | 	ret
06c34                 | 
06c34                 | __system___rxraw
06c34     0B 5A 05 F6 | 	mov	COUNT_, #11
06c38     B0 00 A0 FD | 	call	#pushregs_
06c3c     2F 6D 02 F6 | 	mov	local01, arg01
06c40     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06c44     0C 00 90 5D |  if_ne	jmp	#LR__0295
06c48     08 07 00 FF 
06c4c     00 5E 06 F6 | 	mov	arg01, ##921600
06c50     54 FF BF FD | 	call	#__system___setbaud
06c54                 | LR__0295
06c54     00 6C 0E F2 | 	cmp	local01, #0 wz
06c58     18 00 90 AD |  if_e	jmp	#LR__0296
06c5c     1A 70 62 FD | 	getct	local03
06c60     14 72 06 FB | 	rdlong	local04, #20
06c64     0A 72 46 F0 | 	shr	local04, #10
06c68     39 6D 02 FD | 	qmul	local01, local04
06c6c     18 74 62 FD | 	getqx	local05
06c70     3A 71 02 F1 | 	add	local03, local05
06c74                 | LR__0296
06c74     01 76 66 F6 | 	neg	local06, #1
06c78     00 78 06 F6 | 	mov	local07, #0
06c7c     04 00 06 F1 | 	add	ptr___system__dat__, #4
06c80     00 7B 02 FB | 	rdlong	local08, ptr___system__dat__
06c84     04 00 86 F1 | 	sub	ptr___system__dat__, #4
06c88                 | LR__0297
06c88     08 7A 16 F4 | 	testb	local08, #8 wc
06c8c     09 7A 76 F4 | 	testbn	local08, #9 andc
06c90     0A 7A 46 F0 | 	shr	local08, #10
06c94     01 78 06 C6 |  if_b	mov	local07, #1
06c98     10 00 90 CD |  if_b	jmp	#LR__0298
06c9c     40 7E 6C FD | 	testp	#63 wz
06ca0     01 78 06 A6 |  if_e	mov	local07, #1
06ca4     3F 7A 8E AA |  if_e	rdpin	local08, #63
06ca8     04 7A 46 A0 |  if_e	shr	local08, #4
06cac                 | LR__0298
06cac     00 6E 06 F6 | 	mov	local02, #0
06cb0     00 78 0E F2 | 	cmp	local07, #0 wz
06cb4     01 6E 66 56 |  if_ne	neg	local02, #1
06cb8     00 7C 06 F6 | 	mov	local09, #0
06cbc     00 72 06 F6 | 	mov	local04, #0
06cc0     00 6C 0E F2 | 	cmp	local01, #0 wz
06cc4     01 72 66 56 |  if_ne	neg	local04, #1
06cc8     00 74 06 F6 | 	mov	local05, #0
06ccc     00 7E 06 F6 | 	mov	local10, #0
06cd0     1A 80 62 FD | 	getct	local11
06cd4     38 81 82 F1 | 	sub	local11, local03
06cd8     00 80 5E F2 | 	cmps	local11, #0 wcz
06cdc     01 7E 66 C6 |  if_b	neg	local10, #1
06ce0     00 7E 0E F2 | 	cmp	local10, #0 wz
06ce4     01 74 66 56 |  if_ne	neg	local05, #1
06ce8     3A 73 CA F7 | 	test	local04, local05 wz
06cec     01 7C 66 56 |  if_ne	neg	local09, #1
06cf0     3E 6F 4A F5 | 	or	local02, local09 wz
06cf4     90 FF 9F AD |  if_e	jmp	#LR__0297
06cf8     00 78 0E F2 | 	cmp	local07, #0 wz
06cfc     3D 77 02 56 |  if_ne	mov	local06, local08
06d00     FF 76 06 55 |  if_ne	and	local06, #255
06d04     04 00 06 F1 | 	add	ptr___system__dat__, #4
06d08     00 7B 62 FC | 	wrlong	local08, ptr___system__dat__
06d0c     04 00 86 F1 | 	sub	ptr___system__dat__, #4
06d10     3B 19 02 F6 | 	mov	result1, local06
06d14     AF F0 03 F6 | 	mov	ptra, fp
06d18     BA 00 A0 FD | 	call	#popregs_
06d1c                 | __system___rxraw_ret
06d1c     2D 00 64 FD | 	ret
06d20                 | 
06d20                 | __system____builtin_memmove
06d20     2F 1F 02 F6 | 	mov	_var01, arg01
06d24     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
06d28     50 00 90 3D |  if_ae	jmp	#LR__0306
06d2c     F0 92 9F FE | 	loc	pa,	#(@LR__0300-@LR__0299)
06d30     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d34                 | LR__0299
06d34     03 62 5E F2 | 	cmps	arg03, #3 wcz
06d38     18 00 90 ED |  if_be	jmp	#LR__0301
06d3c     30 21 02 FB | 	rdlong	_var02, arg02
06d40     2F 21 62 FC | 	wrlong	_var02, arg01
06d44     04 5E 06 F1 | 	add	arg01, #4
06d48     04 60 06 F1 | 	add	arg02, #4
06d4c     04 62 86 F1 | 	sub	arg03, #4
06d50     E0 FF 9F FD | 	jmp	#LR__0299
06d54                 | LR__0300
06d54                 | LR__0301
06d54     31 23 0A F6 | 	mov	_var03, arg03 wz
06d58     4C 00 90 AD |  if_e	jmp	#LR__0312
06d5c     B4 92 9F FE | 	loc	pa,	#(@LR__0304-@LR__0302)
06d60     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d64                 | LR__0302
06d64     11 09 D8 FC | 	rep	@LR__0305, _var03
06d68                 | LR__0303
06d68     30 21 C2 FA | 	rdbyte	_var02, arg02
06d6c     2F 21 42 FC | 	wrbyte	_var02, arg01
06d70     01 5E 06 F1 | 	add	arg01, #1
06d74     01 60 06 F1 | 	add	arg02, #1
06d78                 | LR__0304
06d78                 | LR__0305
06d78     2C 00 90 FD | 	jmp	#LR__0312
06d7c                 | LR__0306
06d7c     31 5F 02 F1 | 	add	arg01, arg03
06d80     31 61 02 F1 | 	add	arg02, arg03
06d84     31 25 0A F6 | 	mov	_var04, arg03 wz
06d88     1C 00 90 AD |  if_e	jmp	#LR__0311
06d8c     84 92 9F FE | 	loc	pa,	#(@LR__0309-@LR__0307)
06d90     93 00 A0 FD | 	call	#FCACHE_LOAD_
06d94                 | LR__0307
06d94     12 09 D8 FC | 	rep	@LR__0310, _var04
06d98                 | LR__0308
06d98     01 5E 86 F1 | 	sub	arg01, #1
06d9c     01 60 86 F1 | 	sub	arg02, #1
06da0     30 21 C2 FA | 	rdbyte	_var02, arg02
06da4     2F 21 42 FC | 	wrbyte	_var02, arg01
06da8                 | LR__0309
06da8                 | LR__0310
06da8                 | LR__0311
06da8                 | LR__0312
06da8     0F 19 02 F6 | 	mov	result1, _var01
06dac                 | __system____builtin_memmove_ret
06dac     2D 00 64 FD | 	ret
06db0                 | 
06db0                 | __system__longmove
06db0     2F 1F 02 F6 | 	mov	_var01, arg01
06db4     30 5F 5A F2 | 	cmps	arg01, arg02 wcz
06db8     28 00 90 3D |  if_ae	jmp	#LR__0317
06dbc     31 21 0A F6 | 	mov	_var02, arg03 wz
06dc0     5C 00 90 AD |  if_e	jmp	#LR__0323
06dc4     4C 92 9F FE | 	loc	pa,	#(@LR__0315-@LR__0313)
06dc8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06dcc                 | LR__0313
06dcc     10 09 D8 FC | 	rep	@LR__0316, _var02
06dd0                 | LR__0314
06dd0     30 23 02 FB | 	rdlong	_var03, arg02
06dd4     2F 23 62 FC | 	wrlong	_var03, arg01
06dd8     04 5E 06 F1 | 	add	arg01, #4
06ddc     04 60 06 F1 | 	add	arg02, #4
06de0                 | LR__0315
06de0                 | LR__0316
06de0     3C 00 90 FD | 	jmp	#LR__0323
06de4                 | LR__0317
06de4     31 25 02 F6 | 	mov	_var04, arg03
06de8     02 24 66 F0 | 	shl	_var04, #2
06dec     12 5F 02 F1 | 	add	arg01, _var04
06df0     31 25 02 F6 | 	mov	_var04, arg03
06df4     02 24 66 F0 | 	shl	_var04, #2
06df8     12 61 02 F1 | 	add	arg02, _var04
06dfc     31 27 0A F6 | 	mov	_var05, arg03 wz
06e00     1C 00 90 AD |  if_e	jmp	#LR__0322
06e04     0C 92 9F FE | 	loc	pa,	#(@LR__0320-@LR__0318)
06e08     93 00 A0 FD | 	call	#FCACHE_LOAD_
06e0c                 | LR__0318
06e0c     13 09 D8 FC | 	rep	@LR__0321, _var05
06e10                 | LR__0319
06e10     04 5E 86 F1 | 	sub	arg01, #4
06e14     04 60 86 F1 | 	sub	arg02, #4
06e18     30 23 02 FB | 	rdlong	_var03, arg02
06e1c     2F 23 62 FC | 	wrlong	_var03, arg01
06e20                 | LR__0320
06e20                 | LR__0321
06e20                 | LR__0322
06e20                 | LR__0323
06e20     0F 19 02 F6 | 	mov	result1, _var01
06e24                 | __system__longmove_ret
06e24     2D 00 64 FD | 	ret
06e28                 | 
06e28                 | __system____topofstack
06e28     00 5A 05 F6 | 	mov	COUNT_, #0
06e2c     B0 00 A0 FD | 	call	#pushregs_
06e30     08 F0 07 F1 | 	add	ptra, #8
06e34     04 5E 05 F1 | 	add	fp, #4
06e38     AF 5E 62 FC | 	wrlong	arg01, fp
06e3c     AF 18 02 F6 | 	mov	result1, fp
06e40     04 5E 85 F1 | 	sub	fp, #4
06e44     AF F0 03 F6 | 	mov	ptra, fp
06e48     BA 00 A0 FD | 	call	#popregs_
06e4c                 | __system____topofstack_ret
06e4c     2D 00 64 FD | 	ret
06e50                 | 
06e50                 | __system___make_methodptr
06e50     04 5A 05 F6 | 	mov	COUNT_, #4
06e54     B0 00 A0 FD | 	call	#pushregs_
06e58     2F 6D 02 F6 | 	mov	local01, arg01
06e5c     30 6F 02 F6 | 	mov	local02, arg02
06e60     08 5E 06 F6 | 	mov	arg01, #8
06e64     84 0D B0 FD | 	call	#__system___gc_alloc_managed
06e68     0C 71 0A F6 | 	mov	local03, result1 wz
06e6c     10 00 90 AD |  if_e	jmp	#LR__0324
06e70     38 6D 62 FC | 	wrlong	local01, local03
06e74     38 73 02 F6 | 	mov	local04, local03
06e78     04 72 06 F1 | 	add	local04, #4
06e7c     39 6F 62 FC | 	wrlong	local02, local04
06e80                 | LR__0324
06e80     38 19 02 F6 | 	mov	result1, local03
06e84     AF F0 03 F6 | 	mov	ptra, fp
06e88     BA 00 A0 FD | 	call	#popregs_
06e8c                 | __system___make_methodptr_ret
06e8c     2D 00 64 FD | 	ret
06e90                 | 
06e90                 | __system___lockmem
06e90     02 5A 05 F6 | 	mov	COUNT_, #2
06e94     B0 00 A0 FD | 	call	#pushregs_
06e98     00 18 06 F6 | 	mov	result1, #0
06e9c     01 18 62 FD | 	cogid	result1
06ea0     0C 6D 02 F6 | 	mov	local01, result1
06ea4     00 6D 06 F1 | 	add	local01, #256
06ea8                 | LR__0325
06ea8     2F 6F 0A FB | 	rdlong	local02, arg01 wz
06eac     2F 6D 62 AC |  if_e	wrlong	local01, arg01
06eb0     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06eb4     2F 6F 02 AB |  if_e	rdlong	local02, arg01
06eb8     36 6F 0A F2 | 	cmp	local02, local01 wz
06ebc     E8 FF 9F 5D |  if_ne	jmp	#LR__0325
06ec0     AF F0 03 F6 | 	mov	ptra, fp
06ec4     BA 00 A0 FD | 	call	#popregs_
06ec8                 | __system___lockmem_ret
06ec8     2D 00 64 FD | 	ret
06ecc                 | 
06ecc                 | __system___string_concat
06ecc     07 5A 05 F6 | 	mov	COUNT_, #7
06ed0     B0 00 A0 FD | 	call	#pushregs_
06ed4     2F 6D 02 F6 | 	mov	local01, arg01
06ed8     30 6F 02 F6 | 	mov	local02, arg02
06edc     36 5F 02 F6 | 	mov	arg01, local01
06ee0     00 70 06 F6 | 	mov	local03, #0
06ee4     28 91 9F FE | 	loc	pa,	#(@LR__0327-@LR__0326)
06ee8     93 00 A0 FD | 	call	#FCACHE_LOAD_
06eec                 | LR__0326
06eec     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06ef0     01 70 06 51 |  if_ne	add	local03, #1
06ef4     01 5E 06 51 |  if_ne	add	arg01, #1
06ef8     F0 FF 9F 5D |  if_ne	jmp	#LR__0326
06efc                 | LR__0327
06efc     38 75 02 F6 | 	mov	local05, local03
06f00     37 5F 02 F6 | 	mov	arg01, local02
06f04     00 70 06 F6 | 	mov	local03, #0
06f08     04 91 9F FE | 	loc	pa,	#(@LR__0329-@LR__0328)
06f0c     93 00 A0 FD | 	call	#FCACHE_LOAD_
06f10                 | LR__0328
06f10     2F 73 CA FA | 	rdbyte	local04, arg01 wz
06f14     01 70 06 51 |  if_ne	add	local03, #1
06f18     01 5E 06 51 |  if_ne	add	arg01, #1
06f1c     F0 FF 9F 5D |  if_ne	jmp	#LR__0328
06f20                 | LR__0329
06f20     38 19 02 F6 | 	mov	result1, local03
06f24     0C 77 02 F6 | 	mov	local06, result1
06f28     3A 5F 02 F6 | 	mov	arg01, local05
06f2c     3B 5F 02 F1 | 	add	arg01, local06
06f30     01 5E 06 F1 | 	add	arg01, #1
06f34     B4 0C B0 FD | 	call	#__system___gc_alloc_managed
06f38     0C 79 0A F6 | 	mov	local07, result1 wz
06f3c     28 00 90 AD |  if_e	jmp	#LR__0330
06f40     3C 5F 02 F6 | 	mov	arg01, local07
06f44     36 61 02 F6 | 	mov	arg02, local01
06f48     3A 63 02 F6 | 	mov	arg03, local05
06f4c     D0 FD BF FD | 	call	#__system____builtin_memmove
06f50     3C 5F 02 F6 | 	mov	arg01, local07
06f54     3A 5F 02 F1 | 	add	arg01, local05
06f58     01 76 06 F1 | 	add	local06, #1
06f5c     37 61 02 F6 | 	mov	arg02, local02
06f60     3B 63 02 F6 | 	mov	arg03, local06
06f64     B8 FD BF FD | 	call	#__system____builtin_memmove
06f68                 | LR__0330
06f68     3C 19 02 F6 | 	mov	result1, local07
06f6c     AF F0 03 F6 | 	mov	ptra, fp
06f70     BA 00 A0 FD | 	call	#popregs_
06f74                 | __system___string_concat_ret
06f74     2D 00 64 FD | 	ret
06f78                 | 
06f78                 | __system___tx
06f78     03 5A 05 F6 | 	mov	COUNT_, #3
06f7c     B0 00 A0 FD | 	call	#pushregs_
06f80     2F 6D 02 F6 | 	mov	local01, arg01
06f84     0A 6C 0E F2 | 	cmp	local01, #10 wz
06f88     20 00 90 5D |  if_ne	jmp	#LR__0331
06f8c     08 00 06 F1 | 	add	ptr___system__dat__, #8
06f90     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06f94     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06f98     37 71 02 F6 | 	mov	local03, local02
06f9c     02 70 0E F5 | 	and	local03, #2 wz
06fa0     08 00 90 AD |  if_e	jmp	#LR__0331
06fa4     0D 5E 06 F6 | 	mov	arg01, #13
06fa8     40 FC BF FD | 	call	#__system___txraw
06fac                 | LR__0331
06fac     36 5F 02 F6 | 	mov	arg01, local01
06fb0     38 FC BF FD | 	call	#__system___txraw
06fb4     AF F0 03 F6 | 	mov	ptra, fp
06fb8     BA 00 A0 FD | 	call	#popregs_
06fbc                 | __system___tx_ret
06fbc     2D 00 64 FD | 	ret
06fc0                 | 
06fc0                 | __system___rx
06fc0     02 5A 05 F6 | 	mov	COUNT_, #2
06fc4     B0 00 A0 FD | 	call	#pushregs_
06fc8                 | LR__0332
06fc8     00 5E 06 F6 | 	mov	arg01, #0
06fcc     64 FC BF FD | 	call	#__system___rxraw
06fd0     0C 6D 02 F6 | 	mov	local01, result1
06fd4     FF FF 7F FF 
06fd8     FF 6D 0E F2 | 	cmp	local01, ##-1 wz
06fdc     E8 FF 9F AD |  if_e	jmp	#LR__0332
06fe0     0D 6C 0E F2 | 	cmp	local01, #13 wz
06fe4     14 00 90 5D |  if_ne	jmp	#LR__0333
06fe8     08 00 06 F1 | 	add	ptr___system__dat__, #8
06fec     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
06ff0     08 00 86 F1 | 	sub	ptr___system__dat__, #8
06ff4     02 6E CE F7 | 	test	local02, #2 wz
06ff8     0A 6C 06 56 |  if_ne	mov	local01, #10
06ffc                 | LR__0333
06ffc     08 00 06 F1 | 	add	ptr___system__dat__, #8
07000     00 6F 02 FB | 	rdlong	local02, ptr___system__dat__
07004     08 00 86 F1 | 	sub	ptr___system__dat__, #8
07008     01 6E CE F7 | 	test	local02, #1 wz
0700c     1C 00 90 AD |  if_e	jmp	#LR__0336
07010     7F 6C 0E F2 | 	cmp	local01, #127 wz
07014     0C 00 90 5D |  if_ne	jmp	#LR__0334
07018     08 5E 06 F6 | 	mov	arg01, #8
0701c     58 FF BF FD | 	call	#__system___tx
07020     08 00 90 FD | 	jmp	#LR__0335
07024                 | LR__0334
07024     36 5F 02 F6 | 	mov	arg01, local01
07028     4C FF BF FD | 	call	#__system___tx
0702c                 | LR__0335
0702c                 | LR__0336
0702c     36 19 02 F6 | 	mov	result1, local01
07030     AF F0 03 F6 | 	mov	ptra, fp
07034     BA 00 A0 FD | 	call	#popregs_
07038                 | __system___rx_ret
07038     2D 00 64 FD | 	ret
0703c                 | 
0703c                 | __system___pinread
0703c     20 5E CE F7 | 	test	arg01, #32 wz
07040     FF 1F 02 56 |  if_ne	mov	_var01, inb
07044     FE 1F 02 A6 |  if_e	mov	_var01, ina
07048     2F 1F 42 F0 | 	shr	_var01, arg01
0704c     06 5E 46 F0 | 	shr	arg01, #6
07050     2F 1F 42 F7 | 	zerox	_var01, arg01
07054     0F 19 02 F6 | 	mov	result1, _var01
07058                 | __system___pinread_ret
07058     2D 00 64 FD | 	ret
0705c                 | 
0705c                 | __system___waitms
0705c     03 5A 05 F6 | 	mov	COUNT_, #3
07060     B0 00 A0 FD | 	call	#pushregs_
07064     2F 6D 02 F6 | 	mov	local01, arg01
07068     14 6E 06 FB | 	rdlong	local02, #20
0706c     A8 8F 9F FE | 	loc	pa,	#(@LR__0338-@LR__0337)
07070     93 00 A0 FD | 	call	#FCACHE_LOAD_
07074                 | LR__0337
07074     01 00 00 FF 
07078     E8 6D 5E F2 | 	cmps	local01, ##1000 wcz
0707c     1F 6E 62 1D |  if_a	waitx	local02
07080     01 00 00 1F 
07084     E8 6D 86 11 |  if_a	sub	local01, ##1000
07088     E8 FF 9F 1D |  if_a	jmp	#LR__0337
0708c                 | LR__0338
0708c     0C 00 06 F1 | 	add	ptr___system__dat__, #12
07090     00 71 0A FB | 	rdlong	local03, ptr___system__dat__ wz
07094     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
07098     20 00 90 5D |  if_ne	jmp	#LR__0339
0709c     37 99 02 F6 | 	mov	muldiva_, local02
070a0     01 00 00 FF 
070a4     E8 9B 06 F6 | 	mov	muldivb_, ##1000
070a8     C2 00 A0 FD | 	call	#unsdivide_
070ac     4D 71 02 F6 | 	mov	local03, muldivb_
070b0     0C 00 06 F1 | 	add	ptr___system__dat__, #12
070b4     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
070b8     0C 00 86 F1 | 	sub	ptr___system__dat__, #12
070bc                 | LR__0339
070bc     00 6C 5E F2 | 	cmps	local01, #0 wcz
070c0     38 6D 02 1D |  if_a	qmul	local01, local03
070c4     18 5E 62 1D |  if_a	getqx	arg01
070c8     1F 5E 62 1D |  if_a	waitx	arg01
070cc     AF F0 03 F6 | 	mov	ptra, fp
070d0     BA 00 A0 FD | 	call	#popregs_
070d4                 | __system___waitms_ret
070d4     2D 00 64 FD | 	ret
070d8                 | 
070d8                 | __system___waitus
070d8     02 5A 05 F6 | 	mov	COUNT_, #2
070dc     B0 00 A0 FD | 	call	#pushregs_
070e0     2F 6D 02 F6 | 	mov	local01, arg01
070e4     10 00 06 F1 | 	add	ptr___system__dat__, #16
070e8     00 6F 0A FB | 	rdlong	local02, ptr___system__dat__ wz
070ec     10 00 86 F1 | 	sub	ptr___system__dat__, #16
070f0     20 00 90 5D |  if_ne	jmp	#LR__0340
070f4     14 98 06 FB | 	rdlong	muldiva_, #20
070f8     A1 07 00 FF 
070fc     40 9A 06 F6 | 	mov	muldivb_, ##1000000
07100     C2 00 A0 FD | 	call	#unsdivide_
07104     4D 6F 02 F6 | 	mov	local02, muldivb_
07108     10 00 06 F1 | 	add	ptr___system__dat__, #16
0710c     00 9B 62 FC | 	wrlong	muldivb_, ptr___system__dat__
07110     10 00 86 F1 | 	sub	ptr___system__dat__, #16
07114                 | LR__0340
07114     37 6D 02 FD | 	qmul	local01, local02
07118     18 5E 62 FD | 	getqx	arg01
0711c     1F 5E 62 FD | 	waitx	arg01
07120     AF F0 03 F6 | 	mov	ptra, fp
07124     BA 00 A0 FD | 	call	#popregs_
07128                 | __system___waitus_ret
07128     2D 00 64 FD | 	ret
0712c                 | 
0712c                 | __system___basic_open
0712c     06 5A 05 F6 | 	mov	COUNT_, #6
07130     B0 00 A0 FD | 	call	#pushregs_
07134     30 6D 02 F6 | 	mov	local01, arg02
07138     31 6F 02 F6 | 	mov	local02, arg03
0713c     32 71 02 F6 | 	mov	local03, arg04
07140     9C 12 B0 FD | 	call	#__system____getftab
07144     0C 73 0A F6 | 	mov	local04, result1 wz
07148     18 00 90 5D |  if_ne	jmp	#LR__0341
0714c     F9 5E 02 F6 | 	mov	arg01, abortchain
07150     0C 60 06 F6 | 	mov	arg02, #12
07154     01 62 06 F6 | 	mov	arg03, #1
07158     E6 00 A0 FD | 	call	#__longjmp
0715c     01 18 66 F6 | 	neg	result1, #1
07160     90 00 90 FD | 	jmp	#LR__0346
07164                 | LR__0341
07164     08 72 06 F1 | 	add	local04, #8
07168     39 75 0A FB | 	rdlong	local05, local04 wz
0716c     08 72 86 F1 | 	sub	local04, #8
07170     08 00 90 AD |  if_e	jmp	#LR__0342
07174     39 5F 02 F6 | 	mov	arg01, local04
07178     C0 14 B0 FD | 	call	#__system___closeraw
0717c                 | LR__0342
0717c     00 6C 0E F2 | 	cmp	local01, #0 wz
07180     48 00 90 AD |  if_e	jmp	#LR__0344
07184     04 5E 06 F6 | 	mov	arg01, #4
07188     60 0A B0 FD | 	call	#__system___gc_alloc_managed
0718c     0C 77 0A F6 | 	mov	local06, result1 wz
07190     18 00 90 5D |  if_ne	jmp	#LR__0343
07194     F9 5E 02 F6 | 	mov	arg01, abortchain
07198     07 60 06 F6 | 	mov	arg02, #7
0719c     01 62 06 F6 | 	mov	arg03, #1
071a0     E6 00 A0 FD | 	call	#__longjmp
071a4     01 18 66 F6 | 	neg	result1, #1
071a8     48 00 90 FD | 	jmp	#LR__0346
071ac                 | LR__0343
071ac     3B 6D 62 FC | 	wrlong	local01, local06
071b0     FE 60 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
071b4     3B 5F 02 F6 | 	mov	arg01, local06
071b8     94 FC BF FD | 	call	#__system___make_methodptr
071bc     18 72 06 F1 | 	add	local04, #24
071c0     39 19 62 FC | 	wrlong	result1, local04
071c4     18 72 86 F1 | 	sub	local04, #24
071c8     0C 00 90 FD | 	jmp	#LR__0345
071cc                 | LR__0344
071cc     18 72 06 F1 | 	add	local04, #24
071d0     39 6D 62 FC | 	wrlong	local01, local04
071d4     18 72 86 F1 | 	sub	local04, #24
071d8                 | LR__0345
071d8     08 72 06 F1 | 	add	local04, #8
071dc     39 0F 68 FC | 	wrlong	#7, local04
071e0     14 72 06 F1 | 	add	local04, #20
071e4     39 6F 62 FC | 	wrlong	local02, local04
071e8     04 72 06 F1 | 	add	local04, #4
071ec     39 71 62 FC | 	wrlong	local03, local04
071f0     00 18 06 F6 | 	mov	result1, #0
071f4                 | LR__0346
071f4     AF F0 03 F6 | 	mov	ptra, fp
071f8     BA 00 A0 FD | 	call	#popregs_
071fc                 | __system___basic_open_ret
071fc     2D 00 64 FD | 	ret
07200                 | 
07200                 | __system___basic_print_char
07200     05 5A 05 F6 | 	mov	COUNT_, #5
07204     B0 00 A0 FD | 	call	#pushregs_
07208     30 6D 02 F6 | 	mov	local01, arg02
0720c     98 13 B0 FD | 	call	#__system___gettxfunc
07210     0C 6F 0A F6 | 	mov	local02, result1 wz
07214     00 18 06 A6 |  if_e	mov	result1, #0
07218     24 00 90 AD |  if_e	jmp	#LR__0347
0721c     37 71 02 FB | 	rdlong	local03, local02
07220     04 6E 06 F1 | 	add	local02, #4
07224     37 73 02 FB | 	rdlong	local04, local02
07228     36 5F 02 F6 | 	mov	arg01, local01
0722c     FD 74 02 F6 | 	mov	local05, objptr
07230     38 FB 01 F6 | 	mov	objptr, local03
07234     2D 72 62 FD | 	call	local04
07238     3A FB 01 F6 | 	mov	objptr, local05
0723c     01 18 06 F6 | 	mov	result1, #1
07240                 | LR__0347
07240     AF F0 03 F6 | 	mov	ptra, fp
07244     BA 00 A0 FD | 	call	#popregs_
07248                 | __system___basic_print_char_ret
07248     2D 00 64 FD | 	ret
0724c                 | 
0724c                 | __system___basic_print_string
0724c     03 5A 05 F6 | 	mov	COUNT_, #3
07250     B0 00 A0 FD | 	call	#pushregs_
07254     30 6D 02 F6 | 	mov	local01, arg02
07258     31 6F 02 F6 | 	mov	local02, arg03
0725c     48 13 B0 FD | 	call	#__system___gettxfunc
07260     0C 71 0A F6 | 	mov	local03, result1 wz
07264     00 18 06 A6 |  if_e	mov	result1, #0
07268     1C 00 90 AD |  if_e	jmp	#LR__0348
0726c     00 6C 0E F2 | 	cmp	local01, #0 wz
07270     00 18 06 A6 |  if_e	mov	result1, #0
07274     10 00 90 AD |  if_e	jmp	#LR__0348
07278     37 61 02 F6 | 	mov	arg02, local02
0727c     36 63 02 F6 | 	mov	arg03, local01
07280     38 5F 02 F6 | 	mov	arg01, local03
07284     B0 00 B0 FD | 	call	#__system___fmtstr
07288                 | LR__0348
07288     AF F0 03 F6 | 	mov	ptra, fp
0728c     BA 00 A0 FD | 	call	#popregs_
07290                 | __system___basic_print_string_ret
07290     2D 00 64 FD | 	ret
07294                 | 
07294                 | __system___basic_print_integer
07294     04 5A 05 F6 | 	mov	COUNT_, #4
07298     B0 00 A0 FD | 	call	#pushregs_
0729c     30 6D 02 F6 | 	mov	local01, arg02
072a0     31 6F 02 F6 | 	mov	local02, arg03
072a4     32 71 02 F6 | 	mov	local03, arg04
072a8     FC 12 B0 FD | 	call	#__system___gettxfunc
072ac     0C 73 0A F6 | 	mov	local04, result1 wz
072b0     00 18 06 A6 |  if_e	mov	result1, #0
072b4     14 00 90 AD |  if_e	jmp	#LR__0349
072b8     37 61 02 F6 | 	mov	arg02, local02
072bc     36 63 02 F6 | 	mov	arg03, local01
072c0     38 65 02 F6 | 	mov	arg04, local03
072c4     39 5F 02 F6 | 	mov	arg01, local04
072c8     64 01 B0 FD | 	call	#__system___fmtnum
072cc                 | LR__0349
072cc     AF F0 03 F6 | 	mov	ptra, fp
072d0     BA 00 A0 FD | 	call	#popregs_
072d4                 | __system___basic_print_integer_ret
072d4     2D 00 64 FD | 	ret
072d8                 | 
072d8                 | __system___fmtchar
072d8     00 5A 05 F6 | 	mov	COUNT_, #0
072dc     B0 00 A0 FD | 	call	#pushregs_
072e0     14 F0 07 F1 | 	add	ptra, #20
072e4     04 5E 05 F1 | 	add	fp, #4
072e8     AF 5E 62 FC | 	wrlong	arg01, fp
072ec     04 5E 05 F1 | 	add	fp, #4
072f0     AF 60 62 FC | 	wrlong	arg02, fp
072f4     04 5E 05 F1 | 	add	fp, #4
072f8     AF 62 62 FC | 	wrlong	arg03, fp
072fc     04 5E 05 F1 | 	add	fp, #4
07300     AF 62 42 FC | 	wrbyte	arg03, fp
07304     01 5E 05 F1 | 	add	fp, #1
07308     AF 00 48 FC | 	wrbyte	#0, fp
0730c     0D 5E 85 F1 | 	sub	fp, #13
07310     AF 5E 02 FB | 	rdlong	arg01, fp
07314     04 5E 05 F1 | 	add	fp, #4
07318     AF 60 02 FB | 	rdlong	arg02, fp
0731c     08 5E 05 F1 | 	add	fp, #8
07320     AF 62 02 F6 | 	mov	arg03, fp
07324     10 5E 85 F1 | 	sub	fp, #16
07328     0C 00 B0 FD | 	call	#__system___fmtstr
0732c     AF F0 03 F6 | 	mov	ptra, fp
07330     BA 00 A0 FD | 	call	#popregs_
07334                 | __system___fmtchar_ret
07334     2D 00 64 FD | 	ret
07338                 | 
07338                 | __system___fmtstr
07338     0E 5A 05 F6 | 	mov	COUNT_, #14
0733c     B0 00 A0 FD | 	call	#pushregs_
07340     2F 6D 02 F6 | 	mov	local01, arg01
07344     30 6F 02 F6 | 	mov	local02, arg02
07348     31 71 02 F6 | 	mov	local03, arg03
0734c     37 73 02 F6 | 	mov	local04, local02
07350     FF 72 06 F5 | 	and	local04, #255
07354     38 5F 02 F6 | 	mov	arg01, local03
07358     00 74 06 F6 | 	mov	local05, #0
0735c     B0 8C 9F FE | 	loc	pa,	#(@LR__0351-@LR__0350)
07360     93 00 A0 FD | 	call	#FCACHE_LOAD_
07364                 | LR__0350
07364     2F 77 CA FA | 	rdbyte	local06, arg01 wz
07368     01 74 06 51 |  if_ne	add	local05, #1
0736c     01 5E 06 51 |  if_ne	add	arg01, #1
07370     F0 FF 9F 5D |  if_ne	jmp	#LR__0350
07374                 | LR__0351
07374     3A 19 02 F6 | 	mov	result1, local05
07378     0C 79 02 F6 | 	mov	local07, result1
0737c     00 72 0E F2 | 	cmp	local04, #0 wz
07380     04 00 90 AD |  if_e	jmp	#LR__0352
07384     39 79 7A F3 | 	fles	local07, local04 wcz
07388                 | LR__0352
07388     37 61 02 F6 | 	mov	arg02, local02
0738c     3C 63 02 F6 | 	mov	arg03, local07
07390     36 5F 02 F6 | 	mov	arg01, local01
07394     02 64 06 F6 | 	mov	arg04, #2
07398     BC 10 B0 FD | 	call	#__system___fmtpad
0739c     0C 7B 02 F6 | 	mov	local08, result1
073a0     00 7A 5E F2 | 	cmps	local08, #0 wcz
073a4     3D 19 02 C6 |  if_b	mov	result1, local08
073a8     78 00 90 CD |  if_b	jmp	#LR__0355
073ac     00 7C 06 F6 | 	mov	local09, #0
073b0                 | LR__0353
073b0     3C 7D 5A F2 | 	cmps	local09, local07 wcz
073b4     44 00 90 3D |  if_ae	jmp	#LR__0354
073b8     36 7F 02 F6 | 	mov	local10, local01
073bc     3F 81 02 FB | 	rdlong	local11, local10
073c0     04 7E 06 F1 | 	add	local10, #4
073c4     3F 83 02 FB | 	rdlong	local12, local10
073c8     38 5F C2 FA | 	rdbyte	arg01, local03
073cc     FD 84 02 F6 | 	mov	local13, objptr
073d0     40 FB 01 F6 | 	mov	objptr, local11
073d4     01 70 06 F1 | 	add	local03, #1
073d8     2D 82 62 FD | 	call	local12
073dc     42 FB 01 F6 | 	mov	objptr, local13
073e0     0C 87 02 F6 | 	mov	local14, result1
073e4     00 86 5E F2 | 	cmps	local14, #0 wcz
073e8     43 19 02 C6 |  if_b	mov	result1, local14
073ec     34 00 90 CD |  if_b	jmp	#LR__0355
073f0     43 7B 02 F1 | 	add	local08, local14
073f4     01 7C 06 F1 | 	add	local09, #1
073f8     B4 FF 9F FD | 	jmp	#LR__0353
073fc                 | LR__0354
073fc     37 61 02 F6 | 	mov	arg02, local02
07400     3C 63 02 F6 | 	mov	arg03, local07
07404     36 5F 02 F6 | 	mov	arg01, local01
07408     01 64 06 F6 | 	mov	arg04, #1
0740c     48 10 B0 FD | 	call	#__system___fmtpad
07410     0C 87 02 F6 | 	mov	local14, result1
07414     00 86 5E F2 | 	cmps	local14, #0 wcz
07418     43 19 02 C6 |  if_b	mov	result1, local14
0741c     43 7B 02 31 |  if_ae	add	local08, local14
07420     3D 19 02 36 |  if_ae	mov	result1, local08
07424                 | LR__0355
07424     AF F0 03 F6 | 	mov	ptra, fp
07428     BA 00 A0 FD | 	call	#popregs_
0742c                 | __system___fmtstr_ret
0742c     2D 00 64 FD | 	ret
07430                 | 
07430                 | __system___fmtnum
07430     06 5A 05 F6 | 	mov	COUNT_, #6
07434     B0 00 A0 FD | 	call	#pushregs_
07438     70 F0 07 F1 | 	add	ptra, #112
0743c     04 5E 05 F1 | 	add	fp, #4
07440     AF 5E 62 FC | 	wrlong	arg01, fp
07444     04 5E 05 F1 | 	add	fp, #4
07448     AF 60 62 FC | 	wrlong	arg02, fp
0744c     04 5E 05 F1 | 	add	fp, #4
07450     AF 62 62 FC | 	wrlong	arg03, fp
07454     04 5E 05 F1 | 	add	fp, #4
07458     AF 64 62 FC | 	wrlong	arg04, fp
0745c     04 5E 05 F1 | 	add	fp, #4
07460     AF 6C 02 F6 | 	mov	local01, fp
07464     44 5E 05 F1 | 	add	fp, #68
07468     AF 6C 62 FC | 	wrlong	local01, fp
0746c     04 5E 05 F1 | 	add	fp, #4
07470     AF 00 68 FC | 	wrlong	#0, fp
07474     54 5E 85 F1 | 	sub	fp, #84
07478     AF 6C 02 FB | 	rdlong	local01, fp
0747c     10 6C 46 F0 | 	shr	local01, #16
07480     3F 6C 06 F5 | 	and	local01, #63
07484     58 5E 05 F1 | 	add	fp, #88
07488     AF 6C 62 FC | 	wrlong	local01, fp
0748c     58 5E 85 F1 | 	sub	fp, #88
07490     AF 6C 02 FB | 	rdlong	local01, fp
07494     FF 6C 06 F5 | 	and	local01, #255
07498     5C 5E 05 F1 | 	add	fp, #92
0749c     AF 6C 62 FC | 	wrlong	local01, fp
074a0     5C 5E 85 F1 | 	sub	fp, #92
074a4     AF 6C 02 FB | 	rdlong	local01, fp
074a8     1A 6C 46 F0 | 	shr	local01, #26
074ac     03 6C 06 F5 | 	and	local01, #3
074b0     60 5E 05 F1 | 	add	fp, #96
074b4     AF 6C 62 FC | 	wrlong	local01, fp
074b8     08 5E 85 F1 | 	sub	fp, #8
074bc     AF 6C 02 FB | 	rdlong	local01, fp
074c0     60 5E 85 F1 | 	sub	fp, #96
074c4     00 6C 5E F2 | 	cmps	local01, #0 wcz
074c8     14 00 90 ED |  if_be	jmp	#LR__0356
074cc     60 5E 05 F1 | 	add	fp, #96
074d0     AF 6C 02 FB | 	rdlong	local01, fp
074d4     01 6C 86 F1 | 	sub	local01, #1
074d8     AF 6C 62 FC | 	wrlong	local01, fp
074dc     60 5E 85 F1 | 	sub	fp, #96
074e0                 | LR__0356
074e0     64 5E 05 F1 | 	add	fp, #100
074e4     AF 6C 02 FB | 	rdlong	local01, fp
074e8     64 5E 85 F1 | 	sub	fp, #100
074ec     40 6C 5E F2 | 	cmps	local01, #64 wcz
074f0     14 00 90 1D |  if_a	jmp	#LR__0357
074f4     64 5E 05 F1 | 	add	fp, #100
074f8     AF 6E 02 FB | 	rdlong	local02, fp
074fc     64 5E 85 F1 | 	sub	fp, #100
07500     37 71 0A F6 | 	mov	local03, local02 wz
07504     0C 00 90 5D |  if_ne	jmp	#LR__0358
07508                 | LR__0357
07508     64 5E 05 F1 | 	add	fp, #100
0750c     AF 80 68 FC | 	wrlong	#64, fp
07510     64 5E 85 F1 | 	sub	fp, #100
07514                 | LR__0358
07514     68 5E 05 F1 | 	add	fp, #104
07518     AF 6C 02 FB | 	rdlong	local01, fp
0751c     68 5E 85 F1 | 	sub	fp, #104
07520     03 6C 0E F2 | 	cmp	local01, #3 wz
07524     10 00 90 5D |  if_ne	jmp	#LR__0359
07528     68 5E 05 F1 | 	add	fp, #104
0752c     AF 00 68 FC | 	wrlong	#0, fp
07530     68 5E 85 F1 | 	sub	fp, #104
07534     30 00 90 FD | 	jmp	#LR__0361
07538                 | LR__0359
07538     0C 5E 05 F1 | 	add	fp, #12
0753c     AF 6C 02 FB | 	rdlong	local01, fp
07540     0C 5E 85 F1 | 	sub	fp, #12
07544     00 6C 5E F2 | 	cmps	local01, #0 wcz
07548     1C 00 90 3D |  if_ae	jmp	#LR__0360
0754c     68 5E 05 F1 | 	add	fp, #104
07550     AF 08 68 FC | 	wrlong	#4, fp
07554     5C 5E 85 F1 | 	sub	fp, #92
07558     AF 6C 02 FB | 	rdlong	local01, fp
0755c     36 6D 62 F6 | 	neg	local01, local01
07560     AF 6C 62 FC | 	wrlong	local01, fp
07564     0C 5E 85 F1 | 	sub	fp, #12
07568                 | LR__0360
07568                 | LR__0361
07568     68 5E 05 F1 | 	add	fp, #104
0756c     AF 6C 0A FB | 	rdlong	local01, fp wz
07570     68 5E 85 F1 | 	sub	fp, #104
07574     EC 00 90 AD |  if_e	jmp	#LR__0368
07578     5C 5E 05 F1 | 	add	fp, #92
0757c     AF 70 02 FB | 	rdlong	local03, fp
07580     01 70 06 F1 | 	add	local03, #1
07584     AF 70 62 FC | 	wrlong	local03, fp
07588     04 5E 05 F1 | 	add	fp, #4
0758c     AF 6C 02 FB | 	rdlong	local01, fp
07590     04 5E 05 F1 | 	add	fp, #4
07594     AF 70 02 FB | 	rdlong	local03, fp
07598     64 5E 85 F1 | 	sub	fp, #100
0759c     38 6D 0A F2 | 	cmp	local01, local03 wz
075a0     3C 00 90 5D |  if_ne	jmp	#LR__0363
075a4     60 5E 05 F1 | 	add	fp, #96
075a8     AF 70 02 FB | 	rdlong	local03, fp
075ac     01 70 86 F1 | 	sub	local03, #1
075b0     AF 70 62 FC | 	wrlong	local03, fp
075b4     AF 6C 0A FB | 	rdlong	local01, fp wz
075b8     60 5E 85 F1 | 	sub	fp, #96
075bc     20 00 90 5D |  if_ne	jmp	#LR__0362
075c0     04 5E 05 F1 | 	add	fp, #4
075c4     AF 5E 02 FB | 	rdlong	arg01, fp
075c8     04 5E 05 F1 | 	add	fp, #4
075cc     AF 60 02 FB | 	rdlong	arg02, fp
075d0     08 5E 85 F1 | 	sub	fp, #8
075d4     23 62 06 F6 | 	mov	arg03, #35
075d8     FC FC BF FD | 	call	#__system___fmtchar
075dc     70 01 90 FD | 	jmp	#LR__0373
075e0                 | LR__0362
075e0                 | LR__0363
075e0     68 5E 05 F1 | 	add	fp, #104
075e4     AF 6C 02 FB | 	rdlong	local01, fp
075e8     68 5E 85 F1 | 	sub	fp, #104
075ec     02 6C 0E F2 | 	cmp	local01, #2 wz
075f0     20 00 90 5D |  if_ne	jmp	#LR__0364
075f4     58 5E 05 F1 | 	add	fp, #88
075f8     AF 6C 02 FB | 	rdlong	local01, fp
075fc     36 71 02 F6 | 	mov	local03, local01
07600     01 70 06 F1 | 	add	local03, #1
07604     AF 70 62 FC | 	wrlong	local03, fp
07608     58 5E 85 F1 | 	sub	fp, #88
0760c     36 41 48 FC | 	wrbyte	#32, local01
07610     50 00 90 FD | 	jmp	#LR__0367
07614                 | LR__0364
07614     68 5E 05 F1 | 	add	fp, #104
07618     AF 6C 02 FB | 	rdlong	local01, fp
0761c     68 5E 85 F1 | 	sub	fp, #104
07620     04 6C 0E F2 | 	cmp	local01, #4 wz
07624     20 00 90 5D |  if_ne	jmp	#LR__0365
07628     58 5E 05 F1 | 	add	fp, #88
0762c     AF 6C 02 FB | 	rdlong	local01, fp
07630     36 71 02 F6 | 	mov	local03, local01
07634     01 70 06 F1 | 	add	local03, #1
07638     AF 70 62 FC | 	wrlong	local03, fp
0763c     58 5E 85 F1 | 	sub	fp, #88
07640     36 5B 48 FC | 	wrbyte	#45, local01
07644     1C 00 90 FD | 	jmp	#LR__0366
07648                 | LR__0365
07648     58 5E 05 F1 | 	add	fp, #88
0764c     AF 6C 02 FB | 	rdlong	local01, fp
07650     36 71 02 F6 | 	mov	local03, local01
07654     01 70 06 F1 | 	add	local03, #1
07658     AF 70 62 FC | 	wrlong	local03, fp
0765c     58 5E 85 F1 | 	sub	fp, #88
07660     36 57 48 FC | 	wrbyte	#43, local01
07664                 | LR__0366
07664                 | LR__0367
07664                 | LR__0368
07664     58 5E 05 F1 | 	add	fp, #88
07668     AF 5E 02 FB | 	rdlong	arg01, fp
0766c     4C 5E 85 F1 | 	sub	fp, #76
07670     AF 60 02 FB | 	rdlong	arg02, fp
07674     04 5E 05 F1 | 	add	fp, #4
07678     AF 62 02 FB | 	rdlong	arg03, fp
0767c     50 5E 05 F1 | 	add	fp, #80
07680     AF 64 02 FB | 	rdlong	arg04, fp
07684     00 72 06 F6 | 	mov	local04, #0
07688     58 5E 85 F1 | 	sub	fp, #88
0768c     AF 74 02 FB | 	rdlong	local05, fp
07690     08 5E 85 F1 | 	sub	fp, #8
07694     1D 74 2E F4 | 	testbn	local05, #29 wz
07698     01 72 06 56 |  if_ne	mov	local04, #1
0769c     39 67 02 F6 | 	mov	arg05, local04
076a0     78 0E B0 FD | 	call	#__system___uitoa
076a4     0C 77 02 F6 | 	mov	local06, result1
076a8     5C 5E 05 F1 | 	add	fp, #92
076ac     AF 6C 02 FB | 	rdlong	local01, fp
076b0     3B 6D 02 F1 | 	add	local01, local06
076b4     AF 6C 62 FC | 	wrlong	local01, fp
076b8     08 5E 05 F1 | 	add	fp, #8
076bc     AF 70 02 FB | 	rdlong	local03, fp
076c0     64 5E 85 F1 | 	sub	fp, #100
076c4     38 6D 5A F2 | 	cmps	local01, local03 wcz
076c8     64 00 90 ED |  if_be	jmp	#LR__0372
076cc     70 89 9F FE | 	loc	pa,	#(@LR__0370-@LR__0369)
076d0     93 00 A0 FD | 	call	#FCACHE_LOAD_
076d4                 | LR__0369
076d4     64 5E 05 F1 | 	add	fp, #100
076d8     AF 6C 02 FB | 	rdlong	local01, fp
076dc     36 71 02 F6 | 	mov	local03, local01
076e0     01 70 86 F1 | 	sub	local03, #1
076e4     AF 70 62 FC | 	wrlong	local03, fp
076e8     64 5E 85 F1 | 	sub	fp, #100
076ec     00 6C 5E F2 | 	cmps	local01, #0 wcz
076f0     20 00 90 ED |  if_be	jmp	#LR__0371
076f4     58 5E 05 F1 | 	add	fp, #88
076f8     AF 6C 02 FB | 	rdlong	local01, fp
076fc     36 71 02 F6 | 	mov	local03, local01
07700     01 70 06 F1 | 	add	local03, #1
07704     AF 70 62 FC | 	wrlong	local03, fp
07708     58 5E 85 F1 | 	sub	fp, #88
0770c     36 47 48 FC | 	wrbyte	#35, local01
07710     C0 FF 9F FD | 	jmp	#LR__0369
07714                 | LR__0370
07714                 | LR__0371
07714     58 5E 05 F1 | 	add	fp, #88
07718     AF 6C 02 FB | 	rdlong	local01, fp
0771c     36 71 02 F6 | 	mov	local03, local01
07720     01 70 06 F1 | 	add	local03, #1
07724     AF 70 62 FC | 	wrlong	local03, fp
07728     58 5E 85 F1 | 	sub	fp, #88
0772c     36 01 48 FC | 	wrbyte	#0, local01
07730                 | LR__0372
07730     04 5E 05 F1 | 	add	fp, #4
07734     AF 5E 02 FB | 	rdlong	arg01, fp
07738     04 5E 05 F1 | 	add	fp, #4
0773c     AF 60 02 FB | 	rdlong	arg02, fp
07740     0C 5E 05 F1 | 	add	fp, #12
07744     AF 62 02 F6 | 	mov	arg03, fp
07748     14 5E 85 F1 | 	sub	fp, #20
0774c     E8 FB BF FD | 	call	#__system___fmtstr
07750                 | LR__0373
07750     AF F0 03 F6 | 	mov	ptra, fp
07754     BA 00 A0 FD | 	call	#popregs_
07758                 | __system___fmtnum_ret
07758     2D 00 64 FD | 	ret
0775c                 | 
0775c                 | __system__Chr_S
0775c     02 5A 05 F6 | 	mov	COUNT_, #2
07760     B0 00 A0 FD | 	call	#pushregs_
07764     2F 6D 02 F6 | 	mov	local01, arg01
07768     03 5E 06 F6 | 	mov	arg01, #3
0776c     7C 04 B0 FD | 	call	#__system___gc_alloc_managed
07770     0C 6F 0A F6 | 	mov	local02, result1 wz
07774     10 00 90 AD |  if_e	jmp	#LR__0374
07778     37 6D 42 FC | 	wrbyte	local01, local02
0777c     01 6E 06 F1 | 	add	local02, #1
07780     37 01 48 FC | 	wrbyte	#0, local02
07784     01 6E 86 F1 | 	sub	local02, #1
07788                 | LR__0374
07788     37 19 02 F6 | 	mov	result1, local02
0778c     AF F0 03 F6 | 	mov	ptra, fp
07790     BA 00 A0 FD | 	call	#popregs_
07794                 | __system__Chr_S_ret
07794     2D 00 64 FD | 	ret
07798                 | 
07798                 | __system__Number_S
07798     09 5A 05 F6 | 	mov	COUNT_, #9
0779c     B0 00 A0 FD | 	call	#pushregs_
077a0     2F 6D 02 F6 | 	mov	local01, arg01
077a4     30 6F 0A F6 | 	mov	local02, arg02 wz
077a8     31 71 02 F6 | 	mov	local03, arg03
077ac     40 00 90 5D |  if_ne	jmp	#LR__0377
077b0     01 6E 06 F6 | 	mov	local02, #1
077b4     38 73 02 F6 | 	mov	local04, local03
077b8     01 74 06 F6 | 	mov	local05, #1
077bc                 | LR__0375
077bc     00 76 06 F6 | 	mov	local06, #0
077c0     36 73 1A F2 | 	cmp	local04, local01 wcz
077c4     01 76 66 E6 |  if_be	neg	local06, #1
077c8     00 78 06 F6 | 	mov	local07, #0
077cc     39 75 1A F2 | 	cmp	local05, local04 wcz
077d0     01 78 66 C6 |  if_b	neg	local07, #1
077d4     3C 77 CA F7 | 	test	local06, local07 wz
077d8     14 00 90 AD |  if_e	jmp	#LR__0376
077dc     39 75 02 F6 | 	mov	local05, local04
077e0     38 73 02 FD | 	qmul	local04, local03
077e4     18 72 62 FD | 	getqx	local04
077e8     01 6E 06 F1 | 	add	local02, #1
077ec     CC FF 9F FD | 	jmp	#LR__0375
077f0                 | LR__0376
077f0                 | LR__0377
077f0     20 6E 3E F3 | 	fle	local02, #32 wcz
077f4     37 5F 02 F6 | 	mov	arg01, local02
077f8     02 5E 06 F1 | 	add	arg01, #2
077fc     EC 03 B0 FD | 	call	#__system___gc_alloc_managed
07800     0C 7B 02 F6 | 	mov	local08, result1
07804     37 79 02 F6 | 	mov	local07, local02
07808     3D 79 02 F1 | 	add	local07, local08
0780c     3C 01 48 FC | 	wrbyte	#0, local07
07810     28 88 9F FE | 	loc	pa,	#(@LR__0379-@LR__0378)
07814     93 00 A0 FD | 	call	#FCACHE_LOAD_
07818                 | LR__0378
07818     00 6E 1E F2 | 	cmp	local02, #0 wcz
0781c     34 00 90 ED |  if_be	jmp	#LR__0380
07820     01 6E 86 F1 | 	sub	local02, #1
07824     36 99 02 F6 | 	mov	muldiva_, local01
07828     38 9B 02 F6 | 	mov	muldivb_, local03
0782c     C2 00 A0 FD | 	call	#unsdivide_
07830     4C 7D 02 F6 | 	mov	local09, muldiva_
07834     4D 6D 02 F6 | 	mov	local01, muldivb_
07838     0A 7C 1E F2 | 	cmp	local09, #10 wcz
0783c     30 7C 06 C1 |  if_b	add	local09, #48
07840     37 7C 06 31 |  if_ae	add	local09, #55
07844     37 79 02 F6 | 	mov	local07, local02
07848     3D 79 02 F1 | 	add	local07, local08
0784c     3C 7D 42 FC | 	wrbyte	local09, local07
07850     C4 FF 9F FD | 	jmp	#LR__0378
07854                 | LR__0379
07854                 | LR__0380
07854     3D 19 02 F6 | 	mov	result1, local08
07858     AF F0 03 F6 | 	mov	ptra, fp
0785c     BA 00 A0 FD | 	call	#popregs_
07860                 | __system__Number_S_ret
07860     2D 00 64 FD | 	ret
07864                 | 
07864                 | __system__String_S
07864     05 5A 05 F6 | 	mov	COUNT_, #5
07868     B0 00 A0 FD | 	call	#pushregs_
0786c     2F 6D 02 F6 | 	mov	local01, arg01
07870     30 6F 02 F6 | 	mov	local02, arg02
07874     37 5F 02 F6 | 	mov	arg01, local02
07878     00 70 06 F6 | 	mov	local03, #0
0787c     90 87 9F FE | 	loc	pa,	#(@LR__0382-@LR__0381)
07880     93 00 A0 FD | 	call	#FCACHE_LOAD_
07884                 | LR__0381
07884     2F 73 CA FA | 	rdbyte	local04, arg01 wz
07888     01 70 06 51 |  if_ne	add	local03, #1
0788c     01 5E 06 51 |  if_ne	add	arg01, #1
07890     F0 FF 9F 5D |  if_ne	jmp	#LR__0381
07894                 | LR__0382
07894     38 19 0A F6 | 	mov	result1, local03 wz
07898     48 00 00 AF 
0789c     16 19 06 A6 |  if_e	mov	result1, ##@LR__0499
078a0     4C 00 90 AD |  if_e	jmp	#LR__0384
078a4     00 6C 5E F2 | 	cmps	local01, #0 wcz
078a8     48 00 00 EF 
078ac     17 19 06 E6 |  if_be	mov	result1, ##@LR__0500
078b0     3C 00 90 ED |  if_be	jmp	#LR__0384
078b4     36 5F 02 F6 | 	mov	arg01, local01
078b8     02 5E 06 F1 | 	add	arg01, #2
078bc     2C 03 B0 FD | 	call	#__system___gc_alloc_managed
078c0     0C 75 0A F6 | 	mov	local05, result1 wz
078c4     24 00 90 AD |  if_e	jmp	#LR__0383
078c8     37 61 C2 FA | 	rdbyte	arg02, local02
078cc     3A 5F 02 F6 | 	mov	arg01, local05
078d0     36 63 02 F6 | 	mov	arg03, local01
078d4     A0 00 A0 FD | 	call	#\builtin_bytefill_
078d8     01 6C 06 F1 | 	add	local01, #1
078dc     3A 6D 02 F1 | 	add	local01, local05
078e0     36 01 48 FC | 	wrbyte	#0, local01
078e4     3A 19 02 F6 | 	mov	result1, local05
078e8     04 00 90 FD | 	jmp	#LR__0384
078ec                 | LR__0383
078ec     3A 19 02 F6 | 	mov	result1, local05
078f0                 | LR__0384
078f0     AF F0 03 F6 | 	mov	ptra, fp
078f4     BA 00 A0 FD | 	call	#popregs_
078f8                 | __system__String_S_ret
078f8     2D 00 64 FD | 	ret
078fc                 | 
078fc                 | __system___gc_ptrs
078fc     04 5A 05 F6 | 	mov	COUNT_, #4
07900     B0 00 A0 FD | 	call	#pushregs_
07904     F8 6C 02 F6 | 	mov	local01, __heap_ptr
07908     36 6F 02 F6 | 	mov	local02, local01
0790c     07 00 00 FF 
07910     F8 6F 06 F1 | 	add	local02, ##4088
07914     36 71 0A FB | 	rdlong	local03, local01 wz
07918     74 00 90 5D |  if_ne	jmp	#LR__0385
0791c     37 73 02 F6 | 	mov	local04, local02
07920     36 73 82 F1 | 	sub	local04, local01
07924     36 03 58 FC | 	wrword	#1, local01
07928     36 71 02 F6 | 	mov	local03, local01
0792c     02 70 06 F1 | 	add	local03, #2
07930     36 00 80 FF 
07934     38 21 59 FC | 	wrword	##27792, local03
07938     36 71 02 F6 | 	mov	local03, local01
0793c     04 70 06 F1 | 	add	local03, #4
07940     38 01 58 FC | 	wrword	#0, local03
07944     36 71 02 F6 | 	mov	local03, local01
07948     06 70 06 F1 | 	add	local03, #6
0794c     38 03 58 FC | 	wrword	#1, local03
07950     10 6C 06 F1 | 	add	local01, #16
07954     39 71 52 F6 | 	abs	local03, local04 wc
07958     04 70 46 F0 | 	shr	local03, #4
0795c     38 71 62 C6 |  if_b	neg	local03, local03
07960     36 71 52 FC | 	wrword	local03, local01
07964     36 71 02 F6 | 	mov	local03, local01
07968     02 70 06 F1 | 	add	local03, #2
0796c     36 00 80 FF 
07970     38 1F 59 FC | 	wrword	##27791, local03
07974     36 71 02 F6 | 	mov	local03, local01
07978     04 70 06 F1 | 	add	local03, #4
0797c     38 01 58 FC | 	wrword	#0, local03
07980     36 71 02 F6 | 	mov	local03, local01
07984     06 70 06 F1 | 	add	local03, #6
07988     38 01 58 FC | 	wrword	#0, local03
0798c     10 6C 86 F1 | 	sub	local01, #16
07990                 | LR__0385
07990     37 1B 02 F6 | 	mov	result2, local02
07994     36 19 02 F6 | 	mov	result1, local01
07998     AF F0 03 F6 | 	mov	ptra, fp
0799c     BA 00 A0 FD | 	call	#popregs_
079a0                 | __system___gc_ptrs_ret
079a0     2D 00 64 FD | 	ret
079a4                 | 
079a4                 | __system___gc_nextBlockPtr
079a4     02 5A 05 F6 | 	mov	COUNT_, #2
079a8     B0 00 A0 FD | 	call	#pushregs_
079ac     2F 6D 02 F6 | 	mov	local01, arg01
079b0     36 6F EA FA | 	rdword	local02, local01 wz
079b4     10 00 90 5D |  if_ne	jmp	#LR__0386
079b8     48 00 00 FF 
079bc     18 5F 06 F6 | 	mov	arg01, ##@LR__0501
079c0     F4 01 B0 FD | 	call	#__system___gc_errmsg
079c4     0C 00 90 FD | 	jmp	#LR__0387
079c8                 | LR__0386
079c8     36 19 02 F6 | 	mov	result1, local01
079cc     04 6E 66 F0 | 	shl	local02, #4
079d0     37 19 02 F1 | 	add	result1, local02
079d4                 | LR__0387
079d4     AF F0 03 F6 | 	mov	ptra, fp
079d8     BA 00 A0 FD | 	call	#popregs_
079dc                 | __system___gc_nextBlockPtr_ret
079dc     2D 00 64 FD | 	ret
079e0                 | 
079e0                 | __system___gc_tryalloc
079e0     0D 5A 05 F6 | 	mov	COUNT_, #13
079e4     B0 00 A0 FD | 	call	#pushregs_
079e8     2F 6D 02 F6 | 	mov	local01, arg01
079ec     30 6F 02 F6 | 	mov	local02, arg02
079f0     08 FF BF FD | 	call	#__system___gc_ptrs
079f4     0C 71 02 F6 | 	mov	local03, result1
079f8     0D 73 02 F6 | 	mov	local04, result2
079fc     38 75 02 F6 | 	mov	local05, local03
07a00     00 76 06 F6 | 	mov	local06, #0
07a04     48 86 9F FE | 	loc	pa,	#(@LR__0389-@LR__0388)
07a08     93 00 A0 FD | 	call	#FCACHE_LOAD_
07a0c                 | LR__0388
07a0c     3A 79 02 F6 | 	mov	local07, local05
07a10     3A 7B 02 F6 | 	mov	local08, local05
07a14     06 7A 06 F1 | 	add	local08, #6
07a18     3D 7D E2 FA | 	rdword	local09, local08
07a1c     38 5F 02 F6 | 	mov	arg01, local03
07a20     3E 61 0A F6 | 	mov	arg02, local09 wz
07a24     00 18 06 A6 |  if_e	mov	result1, #0
07a28     04 60 66 50 |  if_ne	shl	arg02, #4
07a2c     30 5F 02 51 |  if_ne	add	arg01, arg02
07a30     2F 19 02 56 |  if_ne	mov	result1, arg01
07a34     0C 7F 02 F6 | 	mov	local10, result1
07a38     3F 75 0A F6 | 	mov	local05, local10 wz
07a3c     3A 7F 02 56 |  if_ne	mov	local10, local05
07a40     3F 77 E2 5A |  if_ne	rdword	local06, local10
07a44     00 74 0E F2 | 	cmp	local05, #0 wz
07a48     10 00 90 AD |  if_e	jmp	#LR__0390
07a4c     39 75 5A F2 | 	cmps	local05, local04 wcz
07a50     08 00 90 3D |  if_ae	jmp	#LR__0390
07a54     3B 6D 5A F2 | 	cmps	local01, local06 wcz
07a58     B0 FF 9F 1D |  if_a	jmp	#LR__0388
07a5c                 | LR__0389
07a5c                 | LR__0390
07a5c     00 74 0E F2 | 	cmp	local05, #0 wz
07a60     3A 19 02 A6 |  if_e	mov	result1, local05
07a64     44 01 90 AD |  if_e	jmp	#LR__0393
07a68     3A 7F 02 F6 | 	mov	local10, local05
07a6c     06 7E 06 F1 | 	add	local10, #6
07a70     3F 81 E2 FA | 	rdword	local11, local10
07a74     3B 6D 5A F2 | 	cmps	local01, local06 wcz
07a78     C0 00 90 3D |  if_ae	jmp	#LR__0392
07a7c     3A 6D 52 FC | 	wrword	local01, local05
07a80     3A 5F 02 F6 | 	mov	arg01, local05
07a84     36 7D 02 F6 | 	mov	local09, local01
07a88     04 7C 66 F0 | 	shl	local09, #4
07a8c     3E 5F 02 F1 | 	add	arg01, local09
07a90     3B 7F 02 F6 | 	mov	local10, local06
07a94     36 7F 82 F1 | 	sub	local10, local01
07a98     2F 7F 52 FC | 	wrword	local10, arg01
07a9c     2F 7F 02 F6 | 	mov	local10, arg01
07aa0     02 7E 06 F1 | 	add	local10, #2
07aa4     36 00 80 FF 
07aa8     3F 1F 59 FC | 	wrword	##27791, local10
07aac     3A 61 0A F6 | 	mov	arg02, local05 wz
07ab0     00 18 06 A6 |  if_e	mov	result1, #0
07ab4     38 61 82 51 |  if_ne	sub	arg02, local03
07ab8     04 60 46 50 |  if_ne	shr	arg02, #4
07abc     30 19 02 56 |  if_ne	mov	result1, arg02
07ac0     2F 7D 02 F6 | 	mov	local09, arg01
07ac4     04 7C 06 F1 | 	add	local09, #4
07ac8     3E 19 52 FC | 	wrword	result1, local09
07acc     3A 7F 02 F6 | 	mov	local10, local05
07ad0     06 7E 06 F1 | 	add	local10, #6
07ad4     2F 7D 02 F6 | 	mov	local09, arg01
07ad8     3F 7B E2 FA | 	rdword	local08, local10
07adc     06 7C 06 F1 | 	add	local09, #6
07ae0     3E 7B 52 FC | 	wrword	local08, local09
07ae4     2F 83 02 F6 | 	mov	local12, arg01
07ae8     41 61 0A F6 | 	mov	arg02, local12 wz
07aec     00 18 06 A6 |  if_e	mov	result1, #0
07af0     38 61 82 51 |  if_ne	sub	arg02, local03
07af4     04 60 46 50 |  if_ne	shr	arg02, #4
07af8     30 19 02 56 |  if_ne	mov	result1, arg02
07afc     0C 81 02 F6 | 	mov	local11, result1
07b00     A0 FE BF FD | 	call	#__system___gc_nextBlockPtr
07b04     0C 85 0A F6 | 	mov	local13, result1 wz
07b08     30 00 90 AD |  if_e	jmp	#LR__0391
07b0c     39 85 5A F2 | 	cmps	local13, local04 wcz
07b10     28 00 90 3D |  if_ae	jmp	#LR__0391
07b14     38 5F 02 F6 | 	mov	arg01, local03
07b18     41 61 0A F6 | 	mov	arg02, local12 wz
07b1c     00 18 06 A6 |  if_e	mov	result1, #0
07b20     2F 61 82 51 |  if_ne	sub	arg02, arg01
07b24     04 60 46 50 |  if_ne	shr	arg02, #4
07b28     30 19 02 56 |  if_ne	mov	result1, arg02
07b2c     0C 7F 02 F6 | 	mov	local10, result1
07b30     42 7D 02 F6 | 	mov	local09, local13
07b34     04 7C 06 F1 | 	add	local09, #4
07b38     3E 7F 52 FC | 	wrword	local10, local09
07b3c                 | LR__0391
07b3c                 | LR__0392
07b3c     06 78 06 F1 | 	add	local07, #6
07b40     3C 81 52 FC | 	wrword	local11, local07
07b44     36 00 00 FF 
07b48     80 7E 06 F6 | 	mov	local10, ##27776
07b4c     37 7F 42 F5 | 	or	local10, local02
07b50     00 18 06 F6 | 	mov	result1, #0
07b54     01 18 62 FD | 	cogid	result1
07b58     0C 7F 42 F5 | 	or	local10, result1
07b5c     3A 7B 02 F6 | 	mov	local08, local05
07b60     02 7A 06 F1 | 	add	local08, #2
07b64     3D 7F 52 FC | 	wrword	local10, local08
07b68     38 7F 02 F6 | 	mov	local10, local03
07b6c     08 7E 06 F1 | 	add	local10, #8
07b70     3A 7D 02 F6 | 	mov	local09, local05
07b74     3F 7B E2 FA | 	rdword	local08, local10
07b78     06 7C 06 F1 | 	add	local09, #6
07b7c     3E 7B 52 FC | 	wrword	local08, local09
07b80     3A 61 0A F6 | 	mov	arg02, local05 wz
07b84     00 18 06 A6 |  if_e	mov	result1, #0
07b88     38 61 82 51 |  if_ne	sub	arg02, local03
07b8c     04 60 46 50 |  if_ne	shr	arg02, #4
07b90     30 19 02 56 |  if_ne	mov	result1, arg02
07b94     08 70 06 F1 | 	add	local03, #8
07b98     38 19 52 FC | 	wrword	result1, local03
07b9c     3A 19 02 F6 | 	mov	result1, local05
07ba0     08 18 06 F1 | 	add	result1, #8
07ba4     00 C0 31 FF 
07ba8     00 18 46 F5 | 	or	result1, ##1669332992
07bac                 | LR__0393
07bac     AF F0 03 F6 | 	mov	ptra, fp
07bb0     BA 00 A0 FD | 	call	#popregs_
07bb4                 | __system___gc_tryalloc_ret
07bb4     2D 00 64 FD | 	ret
07bb8                 | 
07bb8                 | __system___gc_errmsg
07bb8     02 5A 05 F6 | 	mov	COUNT_, #2
07bbc     B0 00 A0 FD | 	call	#pushregs_
07bc0     2F 6D 02 F6 | 	mov	local01, arg01
07bc4                 | LR__0394
07bc4     36 6F CA FA | 	rdbyte	local02, local01 wz
07bc8     01 6C 06 F1 | 	add	local01, #1
07bcc     0C 00 90 AD |  if_e	jmp	#LR__0395
07bd0     37 5F 02 F6 | 	mov	arg01, local02
07bd4     A0 F3 BF FD | 	call	#__system___tx
07bd8     E8 FF 9F FD | 	jmp	#LR__0394
07bdc                 | LR__0395
07bdc     00 18 06 F6 | 	mov	result1, #0
07be0     AF F0 03 F6 | 	mov	ptra, fp
07be4     BA 00 A0 FD | 	call	#popregs_
07be8                 | __system___gc_errmsg_ret
07be8     2D 00 64 FD | 	ret
07bec                 | 
07bec                 | __system___gc_alloc_managed
07bec     02 5A 05 F6 | 	mov	COUNT_, #2
07bf0     B0 00 A0 FD | 	call	#pushregs_
07bf4     2F 6D 02 F6 | 	mov	local01, arg01
07bf8     00 60 06 F6 | 	mov	arg02, #0
07bfc     30 00 B0 FD | 	call	#__system___gc_doalloc
07c00     0C 6F 0A F6 | 	mov	local02, result1 wz
07c04     18 00 90 5D |  if_ne	jmp	#LR__0396
07c08     00 6C 5E F2 | 	cmps	local01, #0 wcz
07c0c     10 00 90 ED |  if_be	jmp	#LR__0396
07c10     48 00 00 FF 
07c14     34 5F 06 F6 | 	mov	arg01, ##@LR__0502
07c18     9C FF BF FD | 	call	#__system___gc_errmsg
07c1c     04 00 90 FD | 	jmp	#LR__0397
07c20                 | LR__0396
07c20     37 19 02 F6 | 	mov	result1, local02
07c24                 | LR__0397
07c24     AF F0 03 F6 | 	mov	ptra, fp
07c28     BA 00 A0 FD | 	call	#popregs_
07c2c                 | __system___gc_alloc_managed_ret
07c2c     2D 00 64 FD | 	ret
07c30                 | 
07c30                 | __system___gc_doalloc
07c30     06 5A 05 F6 | 	mov	COUNT_, #6
07c34     B0 00 A0 FD | 	call	#pushregs_
07c38     2F 6D 0A F6 | 	mov	local01, arg01 wz
07c3c     30 6F 02 F6 | 	mov	local02, arg02
07c40     00 18 06 A6 |  if_e	mov	result1, #0
07c44     94 00 90 AD |  if_e	jmp	#LR__0405
07c48     17 6C 06 F1 | 	add	local01, #23
07c4c     0F 6C 26 F5 | 	andn	local01, #15
07c50     04 6C 46 F0 | 	shr	local01, #4
07c54     14 00 06 F1 | 	add	ptr___system__dat__, #20
07c58     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07c5c     14 00 86 F1 | 	sub	ptr___system__dat__, #20
07c60     2C F2 BF FD | 	call	#__system___lockmem
07c64     36 5F 02 F6 | 	mov	arg01, local01
07c68     37 61 02 F6 | 	mov	arg02, local02
07c6c     70 FD BF FD | 	call	#__system___gc_tryalloc
07c70     0C 71 0A F6 | 	mov	local03, result1 wz
07c74     14 00 90 5D |  if_ne	jmp	#LR__0398
07c78     24 03 B0 FD | 	call	#__system___gc_docollect
07c7c     36 5F 02 F6 | 	mov	arg01, local01
07c80     37 61 02 F6 | 	mov	arg02, local02
07c84     58 FD BF FD | 	call	#__system___gc_tryalloc
07c88     0C 71 02 F6 | 	mov	local03, result1
07c8c                 | LR__0398
07c8c     14 00 06 F1 | 	add	ptr___system__dat__, #20
07c90     00 5F 02 F6 | 	mov	arg01, ptr___system__dat__
07c94     14 00 86 F1 | 	sub	ptr___system__dat__, #20
07c98     2F 01 68 FC | 	wrlong	#0, arg01
07c9c     00 70 0E F2 | 	cmp	local03, #0 wz
07ca0     34 00 90 AD |  if_e	jmp	#LR__0404
07ca4     04 6C 66 F0 | 	shl	local01, #4
07ca8     08 6C 86 F1 | 	sub	local01, #8
07cac     36 73 52 F6 | 	abs	local04, local01 wc
07cb0     02 72 46 F0 | 	shr	local04, #2
07cb4     39 73 62 C6 |  if_b	neg	local04, local04
07cb8     39 75 0A F6 | 	mov	local05, local04 wz
07cbc     38 77 02 F6 | 	mov	local06, local03
07cc0     14 00 90 AD |  if_e	jmp	#LR__0403
07cc4     44 83 9F FE | 	loc	pa,	#(@LR__0401-@LR__0399)
07cc8     93 00 A0 FD | 	call	#FCACHE_LOAD_
07ccc                 | LR__0399
07ccc     3A 05 D8 FC | 	rep	@LR__0402, local05
07cd0                 | LR__0400
07cd0     3B 01 68 FC | 	wrlong	#0, local06
07cd4     04 76 06 F1 | 	add	local06, #4
07cd8                 | LR__0401
07cd8                 | LR__0402
07cd8                 | LR__0403
07cd8                 | LR__0404
07cd8     38 19 02 F6 | 	mov	result1, local03
07cdc                 | LR__0405
07cdc     AF F0 03 F6 | 	mov	ptra, fp
07ce0     BA 00 A0 FD | 	call	#popregs_
07ce4                 | __system___gc_doalloc_ret
07ce4     2D 00 64 FD | 	ret
07ce8                 | 
07ce8                 | __system___gc_isvalidptr
07ce8     31 1F 02 F6 | 	mov	_var01, arg03
07cec     0F 21 02 F6 | 	mov	_var02, _var01
07cf0     00 F8 7F FF 
07cf4     00 20 06 F5 | 	and	_var02, ##-1048576
07cf8     00 C0 31 FF 
07cfc     00 20 0E F2 | 	cmp	_var02, ##1669332992 wz
07d00     00 18 06 56 |  if_ne	mov	result1, #0
07d04     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07d08     08 1E 86 F1 | 	sub	_var01, #8
07d0c     00 F8 7F FF 
07d10     00 1E 26 F5 | 	andn	_var01, ##-1048576
07d14     2F 1F 5A F2 | 	cmps	_var01, arg01 wcz
07d18     08 00 90 CD |  if_b	jmp	#LR__0406
07d1c     30 1F 5A F2 | 	cmps	_var01, arg02 wcz
07d20     08 00 90 CD |  if_b	jmp	#LR__0407
07d24                 | LR__0406
07d24     00 18 06 F6 | 	mov	result1, #0
07d28     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
07d2c                 | LR__0407
07d2c     0F 21 02 F6 | 	mov	_var02, _var01
07d30     2F 21 62 F5 | 	xor	_var02, arg01
07d34     0F 20 0E F5 | 	and	_var02, #15 wz
07d38     00 18 06 56 |  if_ne	mov	result1, #0
07d3c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
07d40     0F 21 02 F6 | 	mov	_var02, _var01
07d44     02 20 06 F1 | 	add	_var02, #2
07d48     10 21 E2 FA | 	rdword	_var02, _var02
07d4c     7F 00 00 FF 
07d50     C0 21 06 F5 | 	and	_var02, ##65472
07d54     36 00 00 FF 
07d58     80 20 0E F2 | 	cmp	_var02, ##27776 wz
07d5c     00 18 06 56 |  if_ne	mov	result1, #0
07d60     0F 19 02 A6 |  if_e	mov	result1, _var01
07d64                 | __system___gc_isvalidptr_ret
07d64     2D 00 64 FD | 	ret
07d68                 | 
07d68                 | __system___gc_dofree
07d68     0D 5A 05 F6 | 	mov	COUNT_, #13
07d6c     B0 00 A0 FD | 	call	#pushregs_
07d70     2F 6D 02 F6 | 	mov	local01, arg01
07d74     84 FB BF FD | 	call	#__system___gc_ptrs
07d78     0C 6F 02 F6 | 	mov	local02, result1
07d7c     0D 71 02 F6 | 	mov	local03, result2
07d80     36 73 02 F6 | 	mov	local04, local01
07d84     02 72 06 F1 | 	add	local04, #2
07d88     36 00 80 FF 
07d8c     39 1F 59 FC | 	wrword	##27791, local04
07d90     36 75 02 F6 | 	mov	local05, local01
07d94     36 5F 02 F6 | 	mov	arg01, local01
07d98     08 FC BF FD | 	call	#__system___gc_nextBlockPtr
07d9c     0C 77 02 F6 | 	mov	local06, result1
07da0     A8 82 9F FE | 	loc	pa,	#(@LR__0409-@LR__0408)
07da4     93 00 A0 FD | 	call	#FCACHE_LOAD_
07da8                 | LR__0408
07da8     04 74 06 F1 | 	add	local05, #4
07dac     3A 61 EA FA | 	rdword	arg02, local05 wz
07db0     37 5F 02 F6 | 	mov	arg01, local02
07db4     00 18 06 A6 |  if_e	mov	result1, #0
07db8     04 60 66 50 |  if_ne	shl	arg02, #4
07dbc     30 5F 02 51 |  if_ne	add	arg01, arg02
07dc0     2F 19 02 56 |  if_ne	mov	result1, arg01
07dc4     0C 75 0A F6 | 	mov	local05, result1 wz
07dc8     28 00 90 AD |  if_e	jmp	#LR__0410
07dcc     3A 5F 02 F6 | 	mov	arg01, local05
07dd0     00 78 06 F6 | 	mov	local07, #0
07dd4     02 5E 06 F1 | 	add	arg01, #2
07dd8     2F 7B E2 FA | 	rdword	local08, arg01
07ddc     36 00 00 FF 
07de0     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07de4     01 78 66 A6 |  if_e	neg	local07, #1
07de8     3C 19 02 F6 | 	mov	result1, local07
07dec     0C 73 0A F6 | 	mov	local04, result1 wz
07df0     B4 FF 9F AD |  if_e	jmp	#LR__0408
07df4                 | LR__0409
07df4                 | LR__0410
07df4     00 74 0E F2 | 	cmp	local05, #0 wz
07df8     37 75 02 A6 |  if_e	mov	local05, local02
07dfc     3A 73 02 F6 | 	mov	local04, local05
07e00     06 72 06 F1 | 	add	local04, #6
07e04     36 7D 02 F6 | 	mov	local09, local01
07e08     39 7F E2 FA | 	rdword	local10, local04
07e0c     06 7C 06 F1 | 	add	local09, #6
07e10     3E 7F 52 FC | 	wrword	local10, local09
07e14     36 61 0A F6 | 	mov	arg02, local01 wz
07e18     00 18 06 A6 |  if_e	mov	result1, #0
07e1c     37 61 82 51 |  if_ne	sub	arg02, local02
07e20     04 60 46 50 |  if_ne	shr	arg02, #4
07e24     30 19 02 56 |  if_ne	mov	result1, arg02
07e28     3A 7D 02 F6 | 	mov	local09, local05
07e2c     06 7C 06 F1 | 	add	local09, #6
07e30     3E 19 52 FC | 	wrword	result1, local09
07e34     37 75 0A F2 | 	cmp	local05, local02 wz
07e38     84 00 90 AD |  if_e	jmp	#LR__0413
07e3c     3A 5F 02 F6 | 	mov	arg01, local05
07e40     60 FB BF FD | 	call	#__system___gc_nextBlockPtr
07e44     36 19 0A F2 | 	cmp	result1, local01 wz
07e48     74 00 90 5D |  if_ne	jmp	#LR__0412
07e4c     3A 73 E2 FA | 	rdword	local04, local05
07e50     36 81 E2 FA | 	rdword	local11, local01
07e54     40 73 02 F1 | 	add	local04, local11
07e58     3A 73 52 FC | 	wrword	local04, local05
07e5c     36 73 02 F6 | 	mov	local04, local01
07e60     02 72 06 F1 | 	add	local04, #2
07e64     39 01 58 FC | 	wrword	#0, local04
07e68     36 5F 02 F6 | 	mov	arg01, local01
07e6c     34 FB BF FD | 	call	#__system___gc_nextBlockPtr
07e70     0C 77 02 F6 | 	mov	local06, result1
07e74     38 77 5A F2 | 	cmps	local06, local03 wcz
07e78     20 00 90 3D |  if_ae	jmp	#LR__0411
07e7c     3A 61 0A F6 | 	mov	arg02, local05 wz
07e80     00 18 06 A6 |  if_e	mov	result1, #0
07e84     37 61 82 51 |  if_ne	sub	arg02, local02
07e88     04 60 46 50 |  if_ne	shr	arg02, #4
07e8c     30 19 02 56 |  if_ne	mov	result1, arg02
07e90     3B 7D 02 F6 | 	mov	local09, local06
07e94     04 7C 06 F1 | 	add	local09, #4
07e98     3E 19 52 FC | 	wrword	result1, local09
07e9c                 | LR__0411
07e9c     36 73 02 F6 | 	mov	local04, local01
07ea0     06 72 06 F1 | 	add	local04, #6
07ea4     3A 7D 02 F6 | 	mov	local09, local05
07ea8     39 7F E2 FA | 	rdword	local10, local04
07eac     06 7C 06 F1 | 	add	local09, #6
07eb0     3E 7F 52 FC | 	wrword	local10, local09
07eb4     06 6C 06 F1 | 	add	local01, #6
07eb8     36 01 58 FC | 	wrword	#0, local01
07ebc     3A 6D 02 F6 | 	mov	local01, local05
07ec0                 | LR__0412
07ec0                 | LR__0413
07ec0     36 5F 02 F6 | 	mov	arg01, local01
07ec4     DC FA BF FD | 	call	#__system___gc_nextBlockPtr
07ec8     0C 83 0A F6 | 	mov	local12, result1 wz
07ecc     C0 00 90 AD |  if_e	jmp	#LR__0415
07ed0     38 83 5A F2 | 	cmps	local12, local03 wcz
07ed4     B8 00 90 3D |  if_ae	jmp	#LR__0415
07ed8     41 5F 02 F6 | 	mov	arg01, local12
07edc     00 78 06 F6 | 	mov	local07, #0
07ee0     02 5E 06 F1 | 	add	arg01, #2
07ee4     2F 7B E2 FA | 	rdword	local08, arg01
07ee8     36 00 00 FF 
07eec     8F 7A 0E F2 | 	cmp	local08, ##27791 wz
07ef0     01 78 66 A6 |  if_e	neg	local07, #1
07ef4     3C 19 0A F6 | 	mov	result1, local07 wz
07ef8     94 00 90 AD |  if_e	jmp	#LR__0415
07efc     36 75 02 F6 | 	mov	local05, local01
07f00     3A 73 E2 FA | 	rdword	local04, local05
07f04     41 6D 02 F6 | 	mov	local01, local12
07f08     36 81 E2 FA | 	rdword	local11, local01
07f0c     40 73 02 F1 | 	add	local04, local11
07f10     3A 85 02 F6 | 	mov	local13, local05
07f14     42 73 52 FC | 	wrword	local04, local13
07f18     36 73 02 F6 | 	mov	local04, local01
07f1c     06 72 06 F1 | 	add	local04, #6
07f20     3A 7D 02 F6 | 	mov	local09, local05
07f24     39 7F E2 FA | 	rdword	local10, local04
07f28     06 7C 06 F1 | 	add	local09, #6
07f2c     3E 7F 52 FC | 	wrword	local10, local09
07f30     36 73 02 F6 | 	mov	local04, local01
07f34     02 72 06 F1 | 	add	local04, #2
07f38     39 55 59 FC | 	wrword	#170, local04
07f3c     36 73 02 F6 | 	mov	local04, local01
07f40     06 72 06 F1 | 	add	local04, #6
07f44     00 7C 06 F6 | 	mov	local09, #0
07f48     39 01 58 FC | 	wrword	#0, local04
07f4c     36 5F 02 F6 | 	mov	arg01, local01
07f50     50 FA BF FD | 	call	#__system___gc_nextBlockPtr
07f54     0C 73 02 F6 | 	mov	local04, result1
07f58     39 77 0A F6 | 	mov	local06, local04 wz
07f5c     30 00 90 AD |  if_e	jmp	#LR__0414
07f60     38 77 5A F2 | 	cmps	local06, local03 wcz
07f64     28 00 90 3D |  if_ae	jmp	#LR__0414
07f68     37 5F 02 F6 | 	mov	arg01, local02
07f6c     3A 61 0A F6 | 	mov	arg02, local05 wz
07f70     00 18 06 A6 |  if_e	mov	result1, #0
07f74     2F 61 82 51 |  if_ne	sub	arg02, arg01
07f78     04 60 46 50 |  if_ne	shr	arg02, #4
07f7c     30 19 02 56 |  if_ne	mov	result1, arg02
07f80     0C 73 02 F6 | 	mov	local04, result1
07f84     3B 7D 02 F6 | 	mov	local09, local06
07f88     04 7C 06 F1 | 	add	local09, #4
07f8c     3E 73 52 FC | 	wrword	local04, local09
07f90                 | LR__0414
07f90                 | LR__0415
07f90     3B 19 02 F6 | 	mov	result1, local06
07f94     AF F0 03 F6 | 	mov	ptra, fp
07f98     BA 00 A0 FD | 	call	#popregs_
07f9c                 | __system___gc_dofree_ret
07f9c     2D 00 64 FD | 	ret
07fa0                 | 
07fa0                 | __system___gc_docollect
07fa0     09 5A 05 F6 | 	mov	COUNT_, #9
07fa4     B0 00 A0 FD | 	call	#pushregs_
07fa8     50 F9 BF FD | 	call	#__system___gc_ptrs
07fac     0D 6D 02 F6 | 	mov	local01, result2
07fb0     0C 6F 02 F6 | 	mov	local02, result1
07fb4     37 5F 02 F6 | 	mov	arg01, local02
07fb8     E8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07fbc     0C 71 0A F6 | 	mov	local03, result1 wz
07fc0     00 18 06 F6 | 	mov	result1, #0
07fc4     01 18 62 FD | 	cogid	result1
07fc8     0C 73 02 F6 | 	mov	local04, result1
07fcc     34 00 90 AD |  if_e	jmp	#LR__0417
07fd0                 | LR__0416
07fd0     36 71 5A F2 | 	cmps	local03, local01 wcz
07fd4     2C 00 90 3D |  if_ae	jmp	#LR__0417
07fd8     38 75 02 F6 | 	mov	local05, local03
07fdc     02 74 06 F1 | 	add	local05, #2
07fe0     3A 77 E2 FA | 	rdword	local06, local05
07fe4     20 76 26 F5 | 	andn	local06, #32
07fe8     38 79 02 F6 | 	mov	local07, local03
07fec     02 78 06 F1 | 	add	local07, #2
07ff0     3C 77 52 FC | 	wrword	local06, local07
07ff4     38 5F 02 F6 | 	mov	arg01, local03
07ff8     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
07ffc     0C 71 0A F6 | 	mov	local03, result1 wz
08000     CC FF 9F 5D |  if_ne	jmp	#LR__0416
08004                 | LR__0417
08004     00 76 06 F6 | 	mov	local06, #0
08008     00 5E 06 F6 | 	mov	arg01, #0
0800c     18 EE BF FD | 	call	#__system____topofstack
08010     0C 61 02 F6 | 	mov	arg02, result1
08014     3B 5F 02 F6 | 	mov	arg01, local06
08018     9C 00 B0 FD | 	call	#__system___gc_markhub
0801c     2C 01 B0 FD | 	call	#__system___gc_markcog
08020     37 5F 02 F6 | 	mov	arg01, local02
08024     7C F9 BF FD | 	call	#__system___gc_nextBlockPtr
08028     0C 7B 0A F6 | 	mov	local08, result1 wz
0802c     10 00 90 5D |  if_ne	jmp	#LR__0418
08030     48 00 00 FF 
08034     51 5F 06 F6 | 	mov	arg01, ##@LR__0503
08038     7C FB BF FD | 	call	#__system___gc_errmsg
0803c     6C 00 90 FD | 	jmp	#LR__0424
08040                 | LR__0418
08040                 | LR__0419
08040     3D 71 02 F6 | 	mov	local03, local08
08044     38 5F 02 F6 | 	mov	arg01, local03
08048     58 F9 BF FD | 	call	#__system___gc_nextBlockPtr
0804c     0C 7B 02 F6 | 	mov	local08, result1
08050     38 77 02 F6 | 	mov	local06, local03
08054     02 76 06 F1 | 	add	local06, #2
08058     3B 7D E2 FA | 	rdword	local09, local06
0805c     20 7C CE F7 | 	test	local09, #32 wz
08060     38 00 90 5D |  if_ne	jmp	#LR__0422
08064     3E 75 02 F6 | 	mov	local05, local09
08068     10 74 0E F5 | 	and	local05, #16 wz
0806c     2C 00 90 5D |  if_ne	jmp	#LR__0422
08070     3E 77 02 F6 | 	mov	local06, local09
08074     0F 76 06 F5 | 	and	local06, #15
08078     3B 7D 02 F6 | 	mov	local09, local06
0807c     39 7D 0A F2 | 	cmp	local09, local04 wz
08080     08 00 90 AD |  if_e	jmp	#LR__0420
08084     0E 7C 0E F2 | 	cmp	local09, #14 wz
08088     10 00 90 5D |  if_ne	jmp	#LR__0421
0808c                 | LR__0420
0808c     38 5F 02 F6 | 	mov	arg01, local03
08090     D4 FC BF FD | 	call	#__system___gc_dofree
08094     0C 77 02 F6 | 	mov	local06, result1
08098     3B 7B 02 F6 | 	mov	local08, local06
0809c                 | LR__0421
0809c                 | LR__0422
0809c     00 7A 0E F2 | 	cmp	local08, #0 wz
080a0     08 00 90 AD |  if_e	jmp	#LR__0423
080a4     36 7B 5A F2 | 	cmps	local08, local01 wcz
080a8     94 FF 9F CD |  if_b	jmp	#LR__0419
080ac                 | LR__0423
080ac                 | LR__0424
080ac     AF F0 03 F6 | 	mov	ptra, fp
080b0     BA 00 A0 FD | 	call	#popregs_
080b4                 | __system___gc_docollect_ret
080b4     2D 00 64 FD | 	ret
080b8                 | 
080b8                 | __system___gc_markhub
080b8     09 5A 05 F6 | 	mov	COUNT_, #9
080bc     B0 00 A0 FD | 	call	#pushregs_
080c0     2F 6D 02 F6 | 	mov	local01, arg01
080c4     30 6F 02 F6 | 	mov	local02, arg02
080c8     30 F8 BF FD | 	call	#__system___gc_ptrs
080cc     0C 71 02 F6 | 	mov	local03, result1
080d0     0D 73 02 F6 | 	mov	local04, result2
080d4                 | LR__0425
080d4     37 6D 5A F2 | 	cmps	local01, local02 wcz
080d8     64 00 90 3D |  if_ae	jmp	#LR__0426
080dc     36 63 02 FB | 	rdlong	arg03, local01
080e0     04 6C 06 F1 | 	add	local01, #4
080e4     39 61 02 F6 | 	mov	arg02, local04
080e8     38 5F 02 F6 | 	mov	arg01, local03
080ec     F8 FB BF FD | 	call	#__system___gc_isvalidptr
080f0     0C 75 0A F6 | 	mov	local05, result1 wz
080f4     DC FF 9F AD |  if_e	jmp	#LR__0425
080f8     3A 5F 02 F6 | 	mov	arg01, local05
080fc     00 76 06 F6 | 	mov	local06, #0
08100     02 5E 06 F1 | 	add	arg01, #2
08104     2F 79 E2 FA | 	rdword	local07, arg01
08108     36 00 00 FF 
0810c     8F 78 0E F2 | 	cmp	local07, ##27791 wz
08110     01 76 66 A6 |  if_e	neg	local06, #1
08114     3B 19 0A F6 | 	mov	result1, local06 wz
08118     B8 FF 9F 5D |  if_ne	jmp	#LR__0425
0811c     3A 7B 02 F6 | 	mov	local08, local05
08120     02 7A 06 F1 | 	add	local08, #2
08124     3D 7D E2 FA | 	rdword	local09, local08
08128     0F 7C 26 F5 | 	andn	local09, #15
0812c     2E 7C 46 F5 | 	or	local09, #46
08130     3A 7B 02 F6 | 	mov	local08, local05
08134     02 7A 06 F1 | 	add	local08, #2
08138     3D 7D 52 FC | 	wrword	local09, local08
0813c     94 FF 9F FD | 	jmp	#LR__0425
08140                 | LR__0426
08140     AF F0 03 F6 | 	mov	ptra, fp
08144     BA 00 A0 FD | 	call	#popregs_
08148                 | __system___gc_markhub_ret
08148     2D 00 64 FD | 	ret
0814c                 | 
0814c                 | __system___gc_markcog
0814c     06 5A 05 F6 | 	mov	COUNT_, #6
08150     B0 00 A0 FD | 	call	#pushregs_
08154     A4 F7 BF FD | 	call	#__system___gc_ptrs
08158     0C 6D 02 F6 | 	mov	local01, result1
0815c     0D 6F 02 F6 | 	mov	local02, result2
08160     00 70 06 F6 | 	mov	local03, #0
08164                 | LR__0427
08164     F0 73 06 F6 | 	mov	local04, #496
08168     38 73 82 F1 | 	sub	local04, local03
0816c     F0 73 06 F1 | 	add	local04, #496
08170                 | 	'.live	local04
08170     00 72 96 F9 | 	alts	local04, #0
08174     39 75 02 F6 | 	mov	local05, local04
08178     36 5F 02 F6 | 	mov	arg01, local01
0817c     37 61 02 F6 | 	mov	arg02, local02
08180     3A 63 02 F6 | 	mov	arg03, local05
08184     60 FB BF FD | 	call	#__system___gc_isvalidptr
08188     0C 75 0A F6 | 	mov	local05, result1 wz
0818c     18 00 90 AD |  if_e	jmp	#LR__0428
08190     3A 77 02 F6 | 	mov	local06, local05
08194     02 76 06 F1 | 	add	local06, #2
08198     3B 73 E2 FA | 	rdword	local04, local06
0819c     20 72 46 F5 | 	or	local04, #32
081a0     02 74 06 F1 | 	add	local05, #2
081a4     3A 73 52 FC | 	wrword	local04, local05
081a8                 | LR__0428
081a8     01 70 06 F1 | 	add	local03, #1
081ac     F0 71 5E F2 | 	cmps	local03, #496 wcz
081b0     B0 FF 9F CD |  if_b	jmp	#LR__0427
081b4     AF F0 03 F6 | 	mov	ptra, fp
081b8     BA 00 A0 FD | 	call	#popregs_
081bc                 | __system___gc_markcog_ret
081bc     2D 00 64 FD | 	ret
081c0                 | 
081c0                 | __system__write
081c0     03 5A 05 F6 | 	mov	COUNT_, #3
081c4     B0 00 A0 FD | 	call	#pushregs_
081c8     2F 6D 02 F6 | 	mov	local01, arg01
081cc     30 6F 02 F6 | 	mov	local02, arg02
081d0     31 71 02 F6 | 	mov	local03, arg03
081d4     0A 6C 1E F2 | 	cmp	local01, #10 wcz
081d8     14 00 90 CD |  if_b	jmp	#LR__0429
081dc     1C 00 06 F1 | 	add	ptr___system__dat__, #28
081e0     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
081e4     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
081e8     01 18 66 F6 | 	neg	result1, #1
081ec     28 00 90 FD | 	jmp	#LR__0430
081f0                 | LR__0429
081f0     36 5F 02 F6 | 	mov	arg01, local01
081f4     01 5E 66 F0 | 	shl	arg01, #1
081f8     36 5F 02 F1 | 	add	arg01, local01
081fc     04 5E 66 F0 | 	shl	arg01, #4
08200     24 00 06 F1 | 	add	ptr___system__dat__, #36
08204     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
08208     37 61 02 F6 | 	mov	arg02, local02
0820c     38 63 02 F6 | 	mov	arg03, local03
08210     24 00 86 F1 | 	sub	ptr___system__dat__, #36
08214     9C 08 B0 FD | 	call	#__system___vfswrite
08218                 | LR__0430
08218     AF F0 03 F6 | 	mov	ptra, fp
0821c     BA 00 A0 FD | 	call	#popregs_
08220                 | __system__write_ret
08220     2D 00 64 FD | 	ret
08224                 | 
08224                 | __system__read
08224     03 5A 05 F6 | 	mov	COUNT_, #3
08228     B0 00 A0 FD | 	call	#pushregs_
0822c     2F 6D 02 F6 | 	mov	local01, arg01
08230     30 6F 02 F6 | 	mov	local02, arg02
08234     31 71 02 F6 | 	mov	local03, arg03
08238     0A 6C 1E F2 | 	cmp	local01, #10 wcz
0823c     14 00 90 CD |  if_b	jmp	#LR__0431
08240     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08244     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
08248     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
0824c     01 18 66 F6 | 	neg	result1, #1
08250     28 00 90 FD | 	jmp	#LR__0432
08254                 | LR__0431
08254     36 5F 02 F6 | 	mov	arg01, local01
08258     01 5E 66 F0 | 	shl	arg01, #1
0825c     36 5F 02 F1 | 	add	arg01, local01
08260     04 5E 66 F0 | 	shl	arg01, #4
08264     24 00 06 F1 | 	add	ptr___system__dat__, #36
08268     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
0826c     37 61 02 F6 | 	mov	arg02, local02
08270     38 63 02 F6 | 	mov	arg03, local03
08274     24 00 86 F1 | 	sub	ptr___system__dat__, #36
08278     E4 09 B0 FD | 	call	#__system___vfsread
0827c                 | LR__0432
0827c     AF F0 03 F6 | 	mov	ptra, fp
08280     BA 00 A0 FD | 	call	#popregs_
08284                 | __system__read_ret
08284     2D 00 64 FD | 	ret
08288                 | 
08288                 | __system__close
08288     01 5A 05 F6 | 	mov	COUNT_, #1
0828c     B0 00 A0 FD | 	call	#pushregs_
08290     2F 6D 02 F6 | 	mov	local01, arg01
08294     0A 6C 1E F2 | 	cmp	local01, #10 wcz
08298     14 00 90 CD |  if_b	jmp	#LR__0433
0829c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
082a0     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
082a4     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
082a8     01 18 66 F6 | 	neg	result1, #1
082ac     20 00 90 FD | 	jmp	#LR__0434
082b0                 | LR__0433
082b0     36 5F 02 F6 | 	mov	arg01, local01
082b4     01 5E 66 F0 | 	shl	arg01, #1
082b8     36 5F 02 F1 | 	add	arg01, local01
082bc     04 5E 66 F0 | 	shl	arg01, #4
082c0     24 00 06 F1 | 	add	ptr___system__dat__, #36
082c4     00 5F 02 F1 | 	add	arg01, ptr___system__dat__
082c8     24 00 86 F1 | 	sub	ptr___system__dat__, #36
082cc     6C 03 B0 FD | 	call	#__system___closeraw
082d0                 | LR__0434
082d0     AF F0 03 F6 | 	mov	ptra, fp
082d4     BA 00 A0 FD | 	call	#popregs_
082d8                 | __system__close_ret
082d8     2D 00 64 FD | 	ret
082dc                 | 
082dc                 | __system__lseek
082dc     09 5A 05 F6 | 	mov	COUNT_, #9
082e0     B0 00 A0 FD | 	call	#pushregs_
082e4     2F 6D 02 F6 | 	mov	local01, arg01
082e8     30 6F 02 F6 | 	mov	local02, arg02
082ec     31 71 02 F6 | 	mov	local03, arg03
082f0     0A 6C 1E F2 | 	cmp	local01, #10 wcz
082f4     14 00 90 CD |  if_b	jmp	#LR__0435
082f8     1C 00 06 F1 | 	add	ptr___system__dat__, #28
082fc     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
08300     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08304     01 18 66 F6 | 	neg	result1, #1
08308     C8 00 90 FD | 	jmp	#LR__0439
0830c                 | LR__0435
0830c     36 73 02 F6 | 	mov	local04, local01
08310     01 72 66 F0 | 	shl	local04, #1
08314     36 73 02 F1 | 	add	local04, local01
08318     04 72 66 F0 | 	shl	local04, #4
0831c     24 00 06 F1 | 	add	ptr___system__dat__, #36
08320     00 73 02 F1 | 	add	local04, ptr___system__dat__
08324     2C 72 06 F1 | 	add	local04, #44
08328     39 75 0A FB | 	rdlong	local05, local04 wz
0832c     2C 72 86 F1 | 	sub	local04, #44
08330     24 00 86 F1 | 	sub	ptr___system__dat__, #36
08334     14 00 90 5D |  if_ne	jmp	#LR__0436
08338     1C 00 06 F1 | 	add	ptr___system__dat__, #28
0833c     00 21 68 FC | 	wrlong	#16, ptr___system__dat__
08340     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08344     01 18 66 F6 | 	neg	result1, #1
08348     88 00 90 FD | 	jmp	#LR__0439
0834c                 | LR__0436
0834c     08 72 06 F1 | 	add	local04, #8
08350     39 75 02 FB | 	rdlong	local05, local04
08354     08 72 86 F1 | 	sub	local04, #8
08358     40 74 CE F7 | 	test	local05, #64 wz
0835c     14 00 90 AD |  if_e	jmp	#LR__0437
08360     08 72 06 F1 | 	add	local04, #8
08364     39 75 02 FB | 	rdlong	local05, local04
08368     80 74 46 F5 | 	or	local05, #128
0836c     39 75 62 FC | 	wrlong	local05, local04
08370     08 72 86 F1 | 	sub	local04, #8
08374                 | LR__0437
08374     2C 72 06 F1 | 	add	local04, #44
08378     39 75 02 FB | 	rdlong	local05, local04
0837c     2C 72 86 F1 | 	sub	local04, #44
08380     3A 77 02 FB | 	rdlong	local06, local05
08384     04 74 06 F1 | 	add	local05, #4
08388     3A 79 02 FB | 	rdlong	local07, local05
0838c     39 5F 02 F6 | 	mov	arg01, local04
08390     37 61 02 F6 | 	mov	arg02, local02
08394     38 63 02 F6 | 	mov	arg03, local03
08398     FD 7A 02 F6 | 	mov	local08, objptr
0839c     3B FB 01 F6 | 	mov	objptr, local06
083a0     2D 78 62 FD | 	call	local07
083a4     3D FB 01 F6 | 	mov	objptr, local08
083a8     0C 7D 02 F6 | 	mov	local09, result1
083ac     00 7C 5E F2 | 	cmps	local09, #0 wcz
083b0     1C 00 90 3D |  if_ae	jmp	#LR__0438
083b4     3E 5F 6A F6 | 	neg	arg01, local09 wz
083b8     1C 00 06 F1 | 	add	ptr___system__dat__, #28
083bc     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
083c0     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
083c4     01 18 66 56 |  if_ne	neg	result1, #1
083c8     00 18 06 A6 |  if_e	mov	result1, #0
083cc     04 00 90 FD | 	jmp	#LR__0439
083d0                 | LR__0438
083d0     3E 19 02 F6 | 	mov	result1, local09
083d4                 | LR__0439
083d4     AF F0 03 F6 | 	mov	ptra, fp
083d8     BA 00 A0 FD | 	call	#popregs_
083dc                 | __system__lseek_ret
083dc     2D 00 64 FD | 	ret
083e0                 | 
083e0                 | __system____getftab
083e0     0A 5E 1E F2 | 	cmp	arg01, #10 wcz
083e4     00 18 06 36 |  if_ae	mov	result1, #0
083e8     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
083ec     2F 19 02 F6 | 	mov	result1, arg01
083f0     01 18 66 F0 | 	shl	result1, #1
083f4     2F 19 02 F1 | 	add	result1, arg01
083f8     04 18 66 F0 | 	shl	result1, #4
083fc     24 00 06 F1 | 	add	ptr___system__dat__, #36
08400     00 19 02 F1 | 	add	result1, ptr___system__dat__
08404     24 00 86 F1 | 	sub	ptr___system__dat__, #36
08408                 | __system____getftab_ret
08408     2D 00 64 FD | 	ret
0840c                 | 
0840c                 | __system___strrev
0840c     2F 1F CA FA | 	rdbyte	_var01, arg01 wz
08410     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
08414     2F 21 02 F6 | 	mov	_var02, arg01
08418     F0 7B 9F FE | 	loc	pa,	#(@LR__0441-@LR__0440)
0841c     93 00 A0 FD | 	call	#FCACHE_LOAD_
08420                 | LR__0440
08420     10 1F CA FA | 	rdbyte	_var01, _var02 wz
08424     01 20 06 51 |  if_ne	add	_var02, #1
08428     F4 FF 9F 5D |  if_ne	jmp	#LR__0440
0842c                 | LR__0441
0842c     01 20 86 F1 | 	sub	_var02, #1
08430                 | LR__0442
08430     2F 21 5A F2 | 	cmps	_var02, arg01 wcz
08434     1C 00 90 ED |  if_be	jmp	#LR__0443
08438     2F 23 C2 FA | 	rdbyte	_var03, arg01
0843c     10 25 C2 FA | 	rdbyte	_var04, _var02
08440     2F 25 42 FC | 	wrbyte	_var04, arg01
08444     10 23 42 FC | 	wrbyte	_var03, _var02
08448     01 5E 06 F1 | 	add	arg01, #1
0844c     01 20 86 F1 | 	sub	_var02, #1
08450     DC FF 9F FD | 	jmp	#LR__0442
08454                 | LR__0443
08454                 | __system___strrev_ret
08454     2D 00 64 FD | 	ret
08458                 | 
08458                 | __system___fmtpad
08458     0C 5A 05 F6 | 	mov	COUNT_, #12
0845c     B0 00 A0 FD | 	call	#pushregs_
08460     2F 6D 02 F6 | 	mov	local01, arg01
08464     30 6F 02 F6 | 	mov	local02, arg02
08468     32 71 02 F6 | 	mov	local03, arg04
0846c     37 73 EA F8 | 	getbyte	local04, local02, #1
08470     16 6E 46 F0 | 	shr	local02, #22
08474     03 6E 0E F5 | 	and	local02, #3 wz
08478     00 74 06 F6 | 	mov	local05, #0
0847c     01 6E 06 A6 |  if_e	mov	local02, #1
08480     38 6F CA F7 | 	test	local02, local03 wz
08484     00 18 06 A6 |  if_e	mov	result1, #0
08488     84 00 90 AD |  if_e	jmp	#LR__0447
0848c     31 73 82 F1 | 	sub	local04, arg03
08490     39 77 02 F6 | 	mov	local06, local04
08494     00 76 5E F2 | 	cmps	local06, #0 wcz
08498     00 18 06 E6 |  if_be	mov	result1, #0
0849c     70 00 90 ED |  if_be	jmp	#LR__0447
084a0     03 6E 0E F2 | 	cmp	local02, #3 wz
084a4     18 00 90 5D |  if_ne	jmp	#LR__0444
084a8     01 70 0E F2 | 	cmp	local03, #1 wz
084ac     6E 78 62 FD | 	wrz	local07
084b0     3C 77 02 F1 | 	add	local06, local07
084b4     3B 77 52 F6 | 	abs	local06, local06 wc
084b8     01 76 46 F0 | 	shr	local06, #1
084bc     3B 77 62 C6 |  if_b	neg	local06, local06
084c0                 | LR__0444
084c0     00 7A 06 F6 | 	mov	local08, #0
084c4                 | LR__0445
084c4     3B 7B 5A F2 | 	cmps	local08, local06 wcz
084c8     40 00 90 3D |  if_ae	jmp	#LR__0446
084cc     36 7D 02 F6 | 	mov	local09, local01
084d0     3E 79 02 FB | 	rdlong	local07, local09
084d4     04 7C 06 F1 | 	add	local09, #4
084d8     3E 7F 02 FB | 	rdlong	local10, local09
084dc     20 5E 06 F6 | 	mov	arg01, #32
084e0     FD 80 02 F6 | 	mov	local11, objptr
084e4     3C FB 01 F6 | 	mov	objptr, local07
084e8     2D 7E 62 FD | 	call	local10
084ec     40 FB 01 F6 | 	mov	objptr, local11
084f0     0C 83 02 F6 | 	mov	local12, result1
084f4     00 82 5E F2 | 	cmps	local12, #0 wcz
084f8     41 19 02 C6 |  if_b	mov	result1, local12
084fc     10 00 90 CD |  if_b	jmp	#LR__0447
08500     41 75 02 F1 | 	add	local05, local12
08504     01 7A 06 F1 | 	add	local08, #1
08508     B8 FF 9F FD | 	jmp	#LR__0445
0850c                 | LR__0446
0850c     3A 19 02 F6 | 	mov	result1, local05
08510                 | LR__0447
08510     AF F0 03 F6 | 	mov	ptra, fp
08514     BA 00 A0 FD | 	call	#popregs_
08518                 | __system___fmtpad_ret
08518     2D 00 64 FD | 	ret
0851c                 | 
0851c                 | __system___uitoa
0851c     09 5A 05 F6 | 	mov	COUNT_, #9
08520     B0 00 A0 FD | 	call	#pushregs_
08524     2F 6D 02 F6 | 	mov	local01, arg01
08528     30 6F 02 F6 | 	mov	local02, arg02
0852c     31 71 02 F6 | 	mov	local03, arg03
08530     32 73 02 F6 | 	mov	local04, arg04
08534     33 75 0A F6 | 	mov	local05, arg05 wz
08538     36 77 02 F6 | 	mov	local06, local01
0853c     00 78 06 F6 | 	mov	local07, #0
08540     37 7A 06 56 |  if_ne	mov	local08, #55
08544     57 7A 06 A6 |  if_e	mov	local08, #87
08548                 | LR__0448
08548     37 99 02 F6 | 	mov	muldiva_, local02
0854c     38 9B 02 F6 | 	mov	muldivb_, local03
08550     C2 00 A0 FD | 	call	#unsdivide_
08554     4C 7D 02 F6 | 	mov	local09, muldiva_
08558     0A 7C 1E F2 | 	cmp	local09, #10 wcz
0855c     30 7C 06 C1 |  if_b	add	local09, #48
08560     3D 7D 02 31 |  if_ae	add	local09, local08
08564     3B 7D 42 FC | 	wrbyte	local09, local06
08568     37 99 02 F6 | 	mov	muldiva_, local02
0856c     38 9B 02 F6 | 	mov	muldivb_, local03
08570     01 76 06 F1 | 	add	local06, #1
08574     C2 00 A0 FD | 	call	#unsdivide_
08578     4D 6F 0A F6 | 	mov	local02, muldivb_ wz
0857c     01 78 06 F1 | 	add	local07, #1
08580     C4 FF 9F 5D |  if_ne	jmp	#LR__0448
08584     39 79 1A F2 | 	cmp	local07, local04 wcz
08588     BC FF 9F CD |  if_b	jmp	#LR__0448
0858c     3B 01 48 FC | 	wrbyte	#0, local06
08590     36 5F 02 F6 | 	mov	arg01, local01
08594     74 FE BF FD | 	call	#__system___strrev
08598     3C 19 02 F6 | 	mov	result1, local07
0859c     AF F0 03 F6 | 	mov	ptra, fp
085a0     BA 00 A0 FD | 	call	#popregs_
085a4                 | __system___uitoa_ret
085a4     2D 00 64 FD | 	ret
085a8                 | 
085a8                 | __system___gettxfunc
085a8     03 5A 05 F6 | 	mov	COUNT_, #3
085ac     B0 00 A0 FD | 	call	#pushregs_
085b0     2C FE BF FD | 	call	#__system____getftab
085b4     0C 6D 0A F6 | 	mov	local01, result1 wz
085b8     14 00 90 AD |  if_e	jmp	#LR__0449
085bc     08 6C 06 F1 | 	add	local01, #8
085c0     36 6F 02 FB | 	rdlong	local02, local01
085c4     08 6C 86 F1 | 	sub	local01, #8
085c8     37 71 0A F6 | 	mov	local03, local02 wz
085cc     08 00 90 5D |  if_ne	jmp	#LR__0450
085d0                 | LR__0449
085d0     00 18 06 F6 | 	mov	result1, #0
085d4     0C 00 90 FD | 	jmp	#LR__0451
085d8                 | LR__0450
085d8     FF 60 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
085dc     36 5F 02 F6 | 	mov	arg01, local01
085e0     6C E8 BF FD | 	call	#__system___make_methodptr
085e4                 | LR__0451
085e4     AF F0 03 F6 | 	mov	ptra, fp
085e8     BA 00 A0 FD | 	call	#popregs_
085ec                 | __system___gettxfunc_ret
085ec     2D 00 64 FD | 	ret
085f0                 | 
085f0                 | __system___getiolock_0150
085f0     03 5A 05 F6 | 	mov	COUNT_, #3
085f4     B0 00 A0 FD | 	call	#pushregs_
085f8     E4 FD BF FD | 	call	#__system____getftab
085fc     0C 6D 0A F6 | 	mov	local01, result1 wz
08600     14 00 90 AD |  if_e	jmp	#LR__0452
08604     08 6C 06 F1 | 	add	local01, #8
08608     36 6F 02 FB | 	rdlong	local02, local01
0860c     08 6C 86 F1 | 	sub	local01, #8
08610     37 71 0A F6 | 	mov	local03, local02 wz
08614     10 00 90 5D |  if_ne	jmp	#LR__0453
08618                 | LR__0452
08618     20 00 06 F1 | 	add	ptr___system__dat__, #32
0861c     00 19 02 F6 | 	mov	result1, ptr___system__dat__
08620     20 00 86 F1 | 	sub	ptr___system__dat__, #32
08624     08 00 90 FD | 	jmp	#LR__0454
08628                 | LR__0453
08628     0C 6C 06 F1 | 	add	local01, #12
0862c     36 19 02 F6 | 	mov	result1, local01
08630                 | LR__0454
08630     AF F0 03 F6 | 	mov	ptra, fp
08634     BA 00 A0 FD | 	call	#popregs_
08638                 | __system___getiolock_0150_ret
08638     2D 00 64 FD | 	ret
0863c                 | 
0863c                 | __system___closeraw
0863c     06 5A 05 F6 | 	mov	COUNT_, #6
08640     B0 00 A0 FD | 	call	#pushregs_
08644     2F 6D 02 F6 | 	mov	local01, arg01
08648     00 6E 06 F6 | 	mov	local02, #0
0864c     08 6C 06 F1 | 	add	local01, #8
08650     36 71 0A FB | 	rdlong	local03, local01 wz
08654     08 6C 86 F1 | 	sub	local01, #8
08658     14 00 90 5D |  if_ne	jmp	#LR__0455
0865c     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08660     00 0B 68 FC | 	wrlong	#5, ptr___system__dat__
08664     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08668     01 18 66 F6 | 	neg	result1, #1
0866c     90 00 90 FD | 	jmp	#LR__0458
08670                 | LR__0455
08670     28 6C 06 F1 | 	add	local01, #40
08674     36 71 0A FB | 	rdlong	local03, local01 wz
08678     28 6C 86 F1 | 	sub	local01, #40
0867c     2C 00 90 AD |  if_e	jmp	#LR__0456
08680     28 6C 06 F1 | 	add	local01, #40
08684     36 71 02 FB | 	rdlong	local03, local01
08688     28 6C 86 F1 | 	sub	local01, #40
0868c     38 73 02 FB | 	rdlong	local04, local03
08690     04 70 06 F1 | 	add	local03, #4
08694     38 75 02 FB | 	rdlong	local05, local03
08698     36 5F 02 F6 | 	mov	arg01, local01
0869c     FD 76 02 F6 | 	mov	local06, objptr
086a0     39 FB 01 F6 | 	mov	objptr, local04
086a4     2D 74 62 FD | 	call	local05
086a8     3B FB 01 F6 | 	mov	objptr, local06
086ac                 | LR__0456
086ac     20 6C 06 F1 | 	add	local01, #32
086b0     36 71 0A FB | 	rdlong	local03, local01 wz
086b4     20 6C 86 F1 | 	sub	local01, #32
086b8     30 00 90 AD |  if_e	jmp	#LR__0457
086bc     20 6C 06 F1 | 	add	local01, #32
086c0     36 71 02 FB | 	rdlong	local03, local01
086c4     20 6C 86 F1 | 	sub	local01, #32
086c8     38 73 02 FB | 	rdlong	local04, local03
086cc     04 70 06 F1 | 	add	local03, #4
086d0     38 75 02 FB | 	rdlong	local05, local03
086d4     36 5F 02 F6 | 	mov	arg01, local01
086d8     FD 76 02 F6 | 	mov	local06, objptr
086dc     39 FB 01 F6 | 	mov	objptr, local04
086e0     2D 74 62 FD | 	call	local05
086e4     3B FB 01 F6 | 	mov	objptr, local06
086e8     0C 6F 02 F6 | 	mov	local02, result1
086ec                 | LR__0457
086ec     36 5F 02 F6 | 	mov	arg01, local01
086f0     00 60 06 F6 | 	mov	arg02, #0
086f4     30 62 06 F6 | 	mov	arg03, #48
086f8     A0 00 A0 FD | 	call	#\builtin_bytefill_
086fc     37 19 02 F6 | 	mov	result1, local02
08700                 | LR__0458
08700     AF F0 03 F6 | 	mov	ptra, fp
08704     BA 00 A0 FD | 	call	#popregs_
08708                 | __system___closeraw_ret
08708     2D 00 64 FD | 	ret
0870c                 | 
0870c                 | __system____default_getc
0870c     05 5A 05 F6 | 	mov	COUNT_, #5
08710     B0 00 A0 FD | 	call	#pushregs_
08714     2F 6D 02 F6 | 	mov	local01, arg01
08718     36 6F 02 FB | 	rdlong	local02, local01
0871c     08 6E 06 F1 | 	add	local02, #8
08720     37 71 02 FB | 	rdlong	local03, local02
08724     08 6E 86 F1 | 	sub	local02, #8
08728     02 70 CE F7 | 	test	local03, #2 wz
0872c     08 00 90 AD |  if_e	jmp	#LR__0459
08730     36 5F 02 F6 | 	mov	arg01, local01
08734     8C 01 B0 FD | 	call	#__system____default_flush
08738                 | LR__0459
08738     08 6E 06 F1 | 	add	local02, #8
0873c     37 71 02 FB | 	rdlong	local03, local02
08740     01 70 46 F5 | 	or	local03, #1
08744     37 71 62 FC | 	wrlong	local03, local02
08748     08 6E 86 F1 | 	sub	local02, #8
0874c     37 73 0A FB | 	rdlong	local04, local02 wz
08750     0C 00 90 5D |  if_ne	jmp	#LR__0460
08754     36 5F 02 F6 | 	mov	arg01, local01
08758     F8 07 B0 FD | 	call	#__system____default_filbuf
0875c     0C 73 02 F6 | 	mov	local04, result1
08760                 | LR__0460
08760     00 72 5E F2 | 	cmps	local04, #0 wcz
08764     01 18 66 E6 |  if_be	neg	result1, #1
08768     1C 00 90 ED |  if_be	jmp	#LR__0461
0876c     01 72 86 F1 | 	sub	local04, #1
08770     37 73 62 FC | 	wrlong	local04, local02
08774     04 6E 06 F1 | 	add	local02, #4
08778     37 75 02 FB | 	rdlong	local05, local02
0877c     3A 19 C2 FA | 	rdbyte	result1, local05
08780     01 74 06 F1 | 	add	local05, #1
08784     37 75 62 FC | 	wrlong	local05, local02
08788                 | LR__0461
08788     AF F0 03 F6 | 	mov	ptra, fp
0878c     BA 00 A0 FD | 	call	#popregs_
08790                 | __system____default_getc_ret
08790     2D 00 64 FD | 	ret
08794                 | 
08794                 | __system____default_putc
08794     06 5A 05 F6 | 	mov	COUNT_, #6
08798     B0 00 A0 FD | 	call	#pushregs_
0879c     2F 6D 02 F6 | 	mov	local01, arg01
087a0     30 6F 02 F6 | 	mov	local02, arg02
087a4     37 71 02 FB | 	rdlong	local03, local02
087a8     08 70 06 F1 | 	add	local03, #8
087ac     38 73 02 FB | 	rdlong	local04, local03
087b0     08 70 86 F1 | 	sub	local03, #8
087b4     01 72 CE F7 | 	test	local04, #1 wz
087b8     08 00 90 AD |  if_e	jmp	#LR__0462
087bc     37 5F 02 F6 | 	mov	arg01, local02
087c0     00 01 B0 FD | 	call	#__system____default_flush
087c4                 | LR__0462
087c4     08 70 06 F1 | 	add	local03, #8
087c8     38 73 02 FB | 	rdlong	local04, local03
087cc     02 72 46 F5 | 	or	local04, #2
087d0     38 73 62 FC | 	wrlong	local04, local03
087d4     08 70 86 F1 | 	sub	local03, #8
087d8     38 75 02 FB | 	rdlong	local05, local03
087dc     3A 77 02 F6 | 	mov	local06, local05
087e0     0C 70 06 F1 | 	add	local03, #12
087e4     38 77 02 F1 | 	add	local06, local03
087e8     3B 6D 42 FC | 	wrbyte	local01, local06
087ec     FF 6C 06 F5 | 	and	local01, #255
087f0     01 74 06 F1 | 	add	local05, #1
087f4     0C 70 86 F1 | 	sub	local03, #12
087f8     38 75 62 FC | 	wrlong	local05, local03
087fc     02 00 00 FF 
08800     00 74 0E F2 | 	cmp	local05, ##1024 wz
08804     10 00 90 5D |  if_ne	jmp	#LR__0463
08808     37 5F 02 F6 | 	mov	arg01, local02
0880c     B4 00 B0 FD | 	call	#__system____default_flush
08810     00 18 0E F2 | 	cmp	result1, #0 wz
08814     01 6C 66 56 |  if_ne	neg	local01, #1
08818                 | LR__0463
08818     36 19 02 F6 | 	mov	result1, local01
0881c     AF F0 03 F6 | 	mov	ptra, fp
08820     BA 00 A0 FD | 	call	#popregs_
08824                 | __system____default_putc_ret
08824     2D 00 64 FD | 	ret
08828                 | 
08828                 | __system____default_putc_terminal
08828     06 5A 05 F6 | 	mov	COUNT_, #6
0882c     B0 00 A0 FD | 	call	#pushregs_
08830     2F 6D 02 F6 | 	mov	local01, arg01
08834     30 6F 02 F6 | 	mov	local02, arg02
08838     37 71 02 FB | 	rdlong	local03, local02
0883c     08 70 06 F1 | 	add	local03, #8
08840     38 73 02 FB | 	rdlong	local04, local03
08844     08 70 86 F1 | 	sub	local03, #8
08848     01 72 CE F7 | 	test	local04, #1 wz
0884c     08 00 90 AD |  if_e	jmp	#LR__0464
08850     37 5F 02 F6 | 	mov	arg01, local02
08854     6C 00 B0 FD | 	call	#__system____default_flush
08858                 | LR__0464
08858     08 70 06 F1 | 	add	local03, #8
0885c     38 73 02 FB | 	rdlong	local04, local03
08860     02 72 46 F5 | 	or	local04, #2
08864     38 73 62 FC | 	wrlong	local04, local03
08868     08 70 86 F1 | 	sub	local03, #8
0886c     38 75 02 FB | 	rdlong	local05, local03
08870     3A 77 02 F6 | 	mov	local06, local05
08874     0C 70 06 F1 | 	add	local03, #12
08878     38 77 02 F1 | 	add	local06, local03
0887c     3B 6D 42 FC | 	wrbyte	local01, local06
08880     FF 6C 06 F5 | 	and	local01, #255
08884     0C 70 86 F1 | 	sub	local03, #12
08888     01 74 06 F1 | 	add	local05, #1
0888c     38 75 62 FC | 	wrlong	local05, local03
08890     0A 6C 0E F2 | 	cmp	local01, #10 wz
08894     0C 00 90 AD |  if_e	jmp	#LR__0465
08898     02 00 00 FF 
0889c     00 74 0E F2 | 	cmp	local05, ##1024 wz
088a0     10 00 90 5D |  if_ne	jmp	#LR__0466
088a4                 | LR__0465
088a4     37 5F 02 F6 | 	mov	arg01, local02
088a8     18 00 B0 FD | 	call	#__system____default_flush
088ac     00 18 0E F2 | 	cmp	result1, #0 wz
088b0     01 6C 66 56 |  if_ne	neg	local01, #1
088b4                 | LR__0466
088b4     36 19 02 F6 | 	mov	result1, local01
088b8     AF F0 03 F6 | 	mov	ptra, fp
088bc     BA 00 A0 FD | 	call	#popregs_
088c0                 | __system____default_putc_terminal_ret
088c0     2D 00 64 FD | 	ret
088c4                 | 
088c4                 | __system____default_flush
088c4     0D 5A 05 F6 | 	mov	COUNT_, #13
088c8     B0 00 A0 FD | 	call	#pushregs_
088cc     2F 6D 02 F6 | 	mov	local01, arg01
088d0     36 6F 02 FB | 	rdlong	local02, local01
088d4     37 71 02 FB | 	rdlong	local03, local02
088d8     08 6E 06 F1 | 	add	local02, #8
088dc     37 73 02 FB | 	rdlong	local04, local02
088e0     08 6E 86 F1 | 	sub	local02, #8
088e4     02 72 CE F7 | 	test	local04, #2 wz
088e8     B8 00 90 AD |  if_e	jmp	#LR__0469
088ec     00 70 5E F2 | 	cmps	local03, #0 wcz
088f0     24 01 90 ED |  if_be	jmp	#LR__0471
088f4     08 6C 06 F1 | 	add	local01, #8
088f8     36 73 02 FB | 	rdlong	local04, local01
088fc     08 6C 86 F1 | 	sub	local01, #8
08900     40 72 CE F7 | 	test	local04, #64 wz
08904     5C 00 90 AD |  if_e	jmp	#LR__0468
08908     08 6C 06 F1 | 	add	local01, #8
0890c     36 73 02 FB | 	rdlong	local04, local01
08910     08 6C 86 F1 | 	sub	local01, #8
08914     80 72 CE F7 | 	test	local04, #128 wz
08918     48 00 90 AD |  if_e	jmp	#LR__0467
0891c     2C 6C 06 F1 | 	add	local01, #44
08920     36 73 02 FB | 	rdlong	local04, local01
08924     2C 6C 86 F1 | 	sub	local01, #44
08928     39 75 02 FB | 	rdlong	local05, local04
0892c     04 72 06 F1 | 	add	local04, #4
08930     39 77 02 FB | 	rdlong	local06, local04
08934     36 5F 02 F6 | 	mov	arg01, local01
08938     00 60 06 F6 | 	mov	arg02, #0
0893c     02 62 06 F6 | 	mov	arg03, #2
08940     FD 78 02 F6 | 	mov	local07, objptr
08944     3A FB 01 F6 | 	mov	objptr, local05
08948     2D 76 62 FD | 	call	local06
0894c     3C FB 01 F6 | 	mov	objptr, local07
08950     08 6C 06 F1 | 	add	local01, #8
08954     36 73 02 FB | 	rdlong	local04, local01
08958     80 72 26 F5 | 	andn	local04, #128
0895c     36 73 62 FC | 	wrlong	local04, local01
08960     08 6C 86 F1 | 	sub	local01, #8
08964                 | LR__0467
08964                 | LR__0468
08964     14 6C 06 F1 | 	add	local01, #20
08968     36 73 02 FB | 	rdlong	local04, local01
0896c     14 6C 86 F1 | 	sub	local01, #20
08970     39 75 02 FB | 	rdlong	local05, local04
08974     04 72 06 F1 | 	add	local04, #4
08978     39 77 02 FB | 	rdlong	local06, local04
0897c     0C 6E 06 F1 | 	add	local02, #12
08980     37 61 02 F6 | 	mov	arg02, local02
08984     0C 6E 86 F1 | 	sub	local02, #12
08988     36 5F 02 F6 | 	mov	arg01, local01
0898c     38 63 02 F6 | 	mov	arg03, local03
08990     FD 78 02 F6 | 	mov	local07, objptr
08994     3A FB 01 F6 | 	mov	objptr, local05
08998     2D 76 62 FD | 	call	local06
0899c     3C FB 01 F6 | 	mov	objptr, local07
089a0     74 00 90 FD | 	jmp	#LR__0471
089a4                 | LR__0469
089a4     08 6E 06 F1 | 	add	local02, #8
089a8     37 73 02 FB | 	rdlong	local04, local02
089ac     08 6E 86 F1 | 	sub	local02, #8
089b0     01 72 CE F7 | 	test	local04, #1 wz
089b4     60 00 90 AD |  if_e	jmp	#LR__0470
089b8     00 70 0E F2 | 	cmp	local03, #0 wz
089bc     58 00 90 AD |  if_e	jmp	#LR__0470
089c0     2C 6C 06 F1 | 	add	local01, #44
089c4     36 7B 02 FB | 	rdlong	local08, local01
089c8     2C 6C 86 F1 | 	sub	local01, #44
089cc     3D 73 02 F6 | 	mov	local04, local08
089d0     39 75 02 FB | 	rdlong	local05, local04
089d4     04 72 06 F1 | 	add	local04, #4
089d8     39 7D 02 FB | 	rdlong	local09, local04
089dc     3E 77 02 F6 | 	mov	local06, local09
089e0     36 7F 02 F6 | 	mov	local10, local01
089e4     38 81 62 F6 | 	neg	local11, local03
089e8     01 82 06 F6 | 	mov	local12, #1
089ec     3F 5F 02 F6 | 	mov	arg01, local10
089f0     40 61 02 F6 | 	mov	arg02, local11
089f4     01 62 06 F6 | 	mov	arg03, #1
089f8     FD 78 02 F6 | 	mov	local07, objptr
089fc     3A FB 01 F6 | 	mov	objptr, local05
08a00     2D 76 62 FD | 	call	local06
08a04     3C FB 01 F6 | 	mov	objptr, local07
08a08     0C 73 02 F6 | 	mov	local04, result1
08a0c     39 85 02 F6 | 	mov	local13, local04
08a10     00 84 5E F2 | 	cmps	local13, #0 wcz
08a14     38 85 02 36 |  if_ae	mov	local13, local03
08a18                 | LR__0470
08a18                 | LR__0471
08a18     37 01 68 FC | 	wrlong	#0, local02
08a1c     04 6E 06 F1 | 	add	local02, #4
08a20     37 01 68 FC | 	wrlong	#0, local02
08a24     04 6E 06 F1 | 	add	local02, #4
08a28     37 01 68 FC | 	wrlong	#0, local02
08a2c     00 18 06 F6 | 	mov	result1, #0
08a30     AF F0 03 F6 | 	mov	ptra, fp
08a34     BA 00 A0 FD | 	call	#popregs_
08a38                 | __system____default_flush_ret
08a38     2D 00 64 FD | 	ret
08a3c                 | 
08a3c                 | __system___rxtxioctl_0179
08a3c     02 5A 05 F6 | 	mov	COUNT_, #2
08a40     B0 00 A0 FD | 	call	#pushregs_
08a44     30 6D 02 F6 | 	mov	local01, arg02
08a48     31 6F 02 F6 | 	mov	local02, arg03
08a4c     00 6D 0E F2 | 	cmp	local01, #256 wz
08a50     0C 00 90 AD |  if_e	jmp	#LR__0472
08a54     01 6D 0E F2 | 	cmp	local01, #257 wz
08a58     1C 00 90 AD |  if_e	jmp	#LR__0473
08a5c     30 00 90 FD | 	jmp	#LR__0474
08a60                 | LR__0472
08a60     08 00 06 F1 | 	add	ptr___system__dat__, #8
08a64     00 19 02 FB | 	rdlong	result1, ptr___system__dat__
08a68     08 00 86 F1 | 	sub	ptr___system__dat__, #8
08a6c     37 19 62 FC | 	wrlong	result1, local02
08a70     00 18 06 F6 | 	mov	result1, #0
08a74     28 00 90 FD | 	jmp	#LR__0475
08a78                 | LR__0473
08a78     37 5F 02 FB | 	rdlong	arg01, local02
08a7c     08 00 06 F1 | 	add	ptr___system__dat__, #8
08a80     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
08a84     08 00 86 F1 | 	sub	ptr___system__dat__, #8
08a88     00 18 06 F6 | 	mov	result1, #0
08a8c     10 00 90 FD | 	jmp	#LR__0475
08a90                 | LR__0474
08a90     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08a94     00 15 68 FC | 	wrlong	#10, ptr___system__dat__
08a98     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08a9c     01 18 66 F6 | 	neg	result1, #1
08aa0                 | LR__0475
08aa0     AF F0 03 F6 | 	mov	ptra, fp
08aa4     BA 00 A0 FD | 	call	#popregs_
08aa8                 | __system___rxtxioctl_0179_ret
08aa8     2D 00 64 FD | 	ret
08aac                 | 
08aac                 | __system____dummy_flush_0180
08aac     00 18 06 F6 | 	mov	result1, #0
08ab0                 | __system____dummy_flush_0180_ret
08ab0     2D 00 64 FD | 	ret
08ab4                 | 
08ab4                 | __system___vfswrite
08ab4     0B 5A 05 F6 | 	mov	COUNT_, #11
08ab8     B0 00 A0 FD | 	call	#pushregs_
08abc     2F 6D 02 F6 | 	mov	local01, arg01
08ac0     30 6F 02 F6 | 	mov	local02, arg02
08ac4     31 71 02 F6 | 	mov	local03, arg03
08ac8     37 73 02 F6 | 	mov	local04, local02
08acc     08 6C 06 F1 | 	add	local01, #8
08ad0     36 75 02 FB | 	rdlong	local05, local01
08ad4     08 6C 86 F1 | 	sub	local01, #8
08ad8     02 74 CE F7 | 	test	local05, #2 wz
08adc     14 00 90 5D |  if_ne	jmp	#LR__0476
08ae0     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08ae4     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08ae8     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08aec     01 18 66 F6 | 	neg	result1, #1
08af0     60 01 90 FD | 	jmp	#LR__0484
08af4                 | LR__0476
08af4     08 6C 06 F1 | 	add	local01, #8
08af8     36 75 02 FB | 	rdlong	local05, local01
08afc     08 6C 86 F1 | 	sub	local01, #8
08b00     40 74 CE F7 | 	test	local05, #64 wz
08b04     5C 00 90 AD |  if_e	jmp	#LR__0478
08b08     08 6C 06 F1 | 	add	local01, #8
08b0c     36 75 02 FB | 	rdlong	local05, local01
08b10     08 6C 86 F1 | 	sub	local01, #8
08b14     80 74 CE F7 | 	test	local05, #128 wz
08b18     48 00 90 AD |  if_e	jmp	#LR__0477
08b1c     2C 6C 06 F1 | 	add	local01, #44
08b20     36 75 02 FB | 	rdlong	local05, local01
08b24     2C 6C 86 F1 | 	sub	local01, #44
08b28     3A 77 02 FB | 	rdlong	local06, local05
08b2c     04 74 06 F1 | 	add	local05, #4
08b30     3A 79 02 FB | 	rdlong	local07, local05
08b34     36 5F 02 F6 | 	mov	arg01, local01
08b38     00 60 06 F6 | 	mov	arg02, #0
08b3c     02 62 06 F6 | 	mov	arg03, #2
08b40     FD 7A 02 F6 | 	mov	local08, objptr
08b44     3B FB 01 F6 | 	mov	objptr, local06
08b48     2D 78 62 FD | 	call	local07
08b4c     3D FB 01 F6 | 	mov	objptr, local08
08b50     08 6C 06 F1 | 	add	local01, #8
08b54     36 75 02 FB | 	rdlong	local05, local01
08b58     80 74 26 F5 | 	andn	local05, #128
08b5c     36 75 62 FC | 	wrlong	local05, local01
08b60     08 6C 86 F1 | 	sub	local01, #8
08b64                 | LR__0477
08b64                 | LR__0478
08b64     14 6C 06 F1 | 	add	local01, #20
08b68     36 75 0A FB | 	rdlong	local05, local01 wz
08b6c     14 6C 86 F1 | 	sub	local01, #20
08b70     74 00 90 AD |  if_e	jmp	#LR__0480
08b74     14 6C 06 F1 | 	add	local01, #20
08b78     36 75 02 FB | 	rdlong	local05, local01
08b7c     14 6C 86 F1 | 	sub	local01, #20
08b80     3A 77 02 FB | 	rdlong	local06, local05
08b84     04 74 06 F1 | 	add	local05, #4
08b88     3A 79 02 FB | 	rdlong	local07, local05
08b8c     37 61 02 F6 | 	mov	arg02, local02
08b90     38 63 02 F6 | 	mov	arg03, local03
08b94     36 5F 02 F6 | 	mov	arg01, local01
08b98     FD 7A 02 F6 | 	mov	local08, objptr
08b9c     3B FB 01 F6 | 	mov	objptr, local06
08ba0     2D 78 62 FD | 	call	local07
08ba4     3D FB 01 F6 | 	mov	objptr, local08
08ba8     0C 7D 02 F6 | 	mov	local09, result1
08bac     00 7C 5E F2 | 	cmps	local09, #0 wcz
08bb0     2C 00 90 3D |  if_ae	jmp	#LR__0479
08bb4     08 6C 06 F1 | 	add	local01, #8
08bb8     36 75 02 FB | 	rdlong	local05, local01
08bbc     20 74 46 F5 | 	or	local05, #32
08bc0     36 75 62 FC | 	wrlong	local05, local01
08bc4     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08bc8     00 7D 62 FC | 	wrlong	local09, ptr___system__dat__
08bcc     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08bd0     00 7C 0E F2 | 	cmp	local09, #0 wz
08bd4     01 18 66 56 |  if_ne	neg	result1, #1
08bd8     00 18 06 A6 |  if_e	mov	result1, #0
08bdc     74 00 90 FD | 	jmp	#LR__0484
08be0                 | LR__0479
08be0     3E 19 02 F6 | 	mov	result1, local09
08be4     6C 00 90 FD | 	jmp	#LR__0484
08be8                 | LR__0480
08be8     18 6C 06 F1 | 	add	local01, #24
08bec     36 7F 0A FB | 	rdlong	local10, local01 wz
08bf0     18 6C 86 F1 | 	sub	local01, #24
08bf4     14 00 90 5D |  if_ne	jmp	#LR__0481
08bf8     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08bfc     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08c00     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08c04     01 18 66 F6 | 	neg	result1, #1
08c08     48 00 90 FD | 	jmp	#LR__0484
08c0c                 | LR__0481
08c0c     00 7C 06 F6 | 	mov	local09, #0
08c10                 | LR__0482
08c10     00 70 1E F2 | 	cmp	local03, #0 wcz
08c14     38 00 90 ED |  if_be	jmp	#LR__0483
08c18     3F 75 02 F6 | 	mov	local05, local10
08c1c     3A 77 02 FB | 	rdlong	local06, local05
08c20     04 74 06 F1 | 	add	local05, #4
08c24     3A 79 02 FB | 	rdlong	local07, local05
08c28     39 5F C2 FA | 	rdbyte	arg01, local04
08c2c     36 61 02 F6 | 	mov	arg02, local01
08c30     FD 80 02 F6 | 	mov	local11, objptr
08c34     3B FB 01 F6 | 	mov	objptr, local06
08c38     01 72 06 F1 | 	add	local04, #1
08c3c     2D 78 62 FD | 	call	local07
08c40     40 FB 01 F6 | 	mov	objptr, local11
08c44     0C 7D 02 F1 | 	add	local09, result1
08c48     01 70 86 F1 | 	sub	local03, #1
08c4c     C0 FF 9F FD | 	jmp	#LR__0482
08c50                 | LR__0483
08c50     3E 19 02 F6 | 	mov	result1, local09
08c54                 | LR__0484
08c54     AF F0 03 F6 | 	mov	ptra, fp
08c58     BA 00 A0 FD | 	call	#popregs_
08c5c                 | __system___vfswrite_ret
08c5c     2D 00 64 FD | 	ret
08c60                 | 
08c60                 | __system___vfsread
08c60     0B 5A 05 F6 | 	mov	COUNT_, #11
08c64     B0 00 A0 FD | 	call	#pushregs_
08c68     28 F0 07 F1 | 	add	ptra, #40
08c6c     04 5E 05 F1 | 	add	fp, #4
08c70     AF 5E 62 FC | 	wrlong	arg01, fp
08c74     04 5E 05 F1 | 	add	fp, #4
08c78     AF 60 62 FC | 	wrlong	arg02, fp
08c7c     04 5E 05 F1 | 	add	fp, #4
08c80     AF 62 62 FC | 	wrlong	arg03, fp
08c84     04 5E 85 F1 | 	sub	fp, #4
08c88     AF 6C 02 FB | 	rdlong	local01, fp
08c8c     14 5E 05 F1 | 	add	fp, #20
08c90     AF 6C 62 FC | 	wrlong	local01, fp
08c94     04 5E 05 F1 | 	add	fp, #4
08c98     AF 00 68 FC | 	wrlong	#0, fp
08c9c     1C 5E 85 F1 | 	sub	fp, #28
08ca0     AF 6E 02 FB | 	rdlong	local02, fp
08ca4     04 5E 85 F1 | 	sub	fp, #4
08ca8     08 6E 06 F1 | 	add	local02, #8
08cac     37 6D 02 FB | 	rdlong	local01, local02
08cb0     01 6C CE F7 | 	test	local01, #1 wz
08cb4     14 00 90 5D |  if_ne	jmp	#LR__0485
08cb8     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08cbc     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08cc0     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08cc4     01 18 66 F6 | 	neg	result1, #1
08cc8     7C 02 90 FD | 	jmp	#LR__0493
08ccc                 | LR__0485
08ccc     04 5E 05 F1 | 	add	fp, #4
08cd0     AF 6C 02 FB | 	rdlong	local01, fp
08cd4     04 5E 85 F1 | 	sub	fp, #4
08cd8     10 6C 06 F1 | 	add	local01, #16
08cdc     36 71 0A FB | 	rdlong	local03, local01 wz
08ce0     AC 00 90 AD |  if_e	jmp	#LR__0487
08ce4     04 5E 05 F1 | 	add	fp, #4
08ce8     AF 72 02 FB | 	rdlong	local04, fp
08cec     10 72 06 F1 | 	add	local04, #16
08cf0     39 6D 02 FB | 	rdlong	local01, local04
08cf4     36 6F 02 FB | 	rdlong	local02, local01
08cf8     04 6C 06 F1 | 	add	local01, #4
08cfc     36 71 02 FB | 	rdlong	local03, local01
08d00     AF 5E 02 FB | 	rdlong	arg01, fp
08d04     04 5E 05 F1 | 	add	fp, #4
08d08     AF 60 02 FB | 	rdlong	arg02, fp
08d0c     04 5E 05 F1 | 	add	fp, #4
08d10     AF 62 02 FB | 	rdlong	arg03, fp
08d14     0C 5E 85 F1 | 	sub	fp, #12
08d18     FD 74 02 F6 | 	mov	local05, objptr
08d1c     37 FB 01 F6 | 	mov	objptr, local02
08d20     2D 70 62 FD | 	call	local03
08d24     3A FB 01 F6 | 	mov	objptr, local05
08d28     10 5E 05 F1 | 	add	fp, #16
08d2c     AF 18 62 FC | 	wrlong	result1, fp
08d30     10 5E 85 F1 | 	sub	fp, #16
08d34     00 18 5E F2 | 	cmps	result1, #0 wcz
08d38     44 00 90 3D |  if_ae	jmp	#LR__0486
08d3c     04 5E 05 F1 | 	add	fp, #4
08d40     AF 6C 02 FB | 	rdlong	local01, fp
08d44     36 73 02 F6 | 	mov	local04, local01
08d48     08 72 06 F1 | 	add	local04, #8
08d4c     39 71 02 FB | 	rdlong	local03, local04
08d50     20 70 46 F5 | 	or	local03, #32
08d54     08 6C 06 F1 | 	add	local01, #8
08d58     36 71 62 FC | 	wrlong	local03, local01
08d5c     0C 5E 05 F1 | 	add	fp, #12
08d60     AF 5E 0A FB | 	rdlong	arg01, fp wz
08d64     10 5E 85 F1 | 	sub	fp, #16
08d68     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08d6c     00 5F 62 FC | 	wrlong	arg01, ptr___system__dat__
08d70     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08d74     01 18 66 56 |  if_ne	neg	result1, #1
08d78     00 18 06 A6 |  if_e	mov	result1, #0
08d7c     C8 01 90 FD | 	jmp	#LR__0493
08d80                 | LR__0486
08d80     10 5E 05 F1 | 	add	fp, #16
08d84     AF 18 02 FB | 	rdlong	result1, fp
08d88     10 5E 85 F1 | 	sub	fp, #16
08d8c     B8 01 90 FD | 	jmp	#LR__0493
08d90                 | LR__0487
08d90     04 5E 05 F1 | 	add	fp, #4
08d94     AF 6C 02 FB | 	rdlong	local01, fp
08d98     1C 6C 06 F1 | 	add	local01, #28
08d9c     36 71 02 FB | 	rdlong	local03, local01
08da0     14 5E 05 F1 | 	add	fp, #20
08da4     AF 70 62 FC | 	wrlong	local03, fp
08da8     AF 6C 0A FB | 	rdlong	local01, fp wz
08dac     18 5E 85 F1 | 	sub	fp, #24
08db0     14 00 90 5D |  if_ne	jmp	#LR__0488
08db4     1C 00 06 F1 | 	add	ptr___system__dat__, #28
08db8     00 0D 68 FC | 	wrlong	#6, ptr___system__dat__
08dbc     1C 00 86 F1 | 	sub	ptr___system__dat__, #28
08dc0     01 18 66 F6 | 	neg	result1, #1
08dc4     80 01 90 FD | 	jmp	#LR__0493
08dc8                 | LR__0488
08dc8     04 5E 05 F1 | 	add	fp, #4
08dcc     AF 6C 02 FB | 	rdlong	local01, fp
08dd0     04 5E 85 F1 | 	sub	fp, #4
08dd4     24 6C 06 F1 | 	add	local01, #36
08dd8     36 71 0A FB | 	rdlong	local03, local01 wz
08ddc     94 00 90 AD |  if_e	jmp	#LR__0490
08de0     04 5E 05 F1 | 	add	fp, #4
08de4     AF 76 02 FB | 	rdlong	local06, fp
08de8     3B 73 02 F6 | 	mov	local04, local06
08dec     24 72 06 F1 | 	add	local04, #36
08df0     39 79 02 FB | 	rdlong	local07, local04
08df4     3C 6D 02 F6 | 	mov	local01, local07
08df8     36 6F 02 FB | 	rdlong	local02, local01
08dfc     04 6C 06 F1 | 	add	local01, #4
08e00     36 7B 02 FB | 	rdlong	local08, local01
08e04     3D 71 02 F6 | 	mov	local03, local08
08e08     3B 7D 02 F6 | 	mov	local09, local06
08e0c     00 7F 06 F6 | 	mov	local10, #256
08e10     20 5E 05 F1 | 	add	fp, #32
08e14     AF 80 02 F6 | 	mov	local11, fp
08e18     3E 5F 02 F6 | 	mov	arg01, local09
08e1c     00 61 06 F6 | 	mov	arg02, #256
08e20     40 63 02 F6 | 	mov	arg03, local11
08e24     FD 74 02 F6 | 	mov	local05, objptr
08e28     37 FB 01 F6 | 	mov	objptr, local02
08e2c     24 5E 85 F1 | 	sub	fp, #36
08e30     2D 70 62 FD | 	call	local03
08e34     3A FB 01 F6 | 	mov	objptr, local05
08e38     10 5E 05 F1 | 	add	fp, #16
08e3c     AF 18 62 FC | 	wrlong	result1, fp
08e40     AF 6E 0A FB | 	rdlong	local02, fp wz
08e44     10 5E 85 F1 | 	sub	fp, #16
08e48     28 00 90 5D |  if_ne	jmp	#LR__0489
08e4c     24 5E 05 F1 | 	add	fp, #36
08e50     AF 72 02 FB | 	rdlong	local04, fp
08e54     24 5E 85 F1 | 	sub	fp, #36
08e58     39 71 02 F6 | 	mov	local03, local04
08e5c     02 70 0E F5 | 	and	local03, #2 wz
08e60     10 00 90 AD |  if_e	jmp	#LR__0489
08e64     01 6C 06 F6 | 	mov	local01, #1
08e68     20 5E 05 F1 | 	add	fp, #32
08e6c     AF 02 68 FC | 	wrlong	#1, fp
08e70     20 5E 85 F1 | 	sub	fp, #32
08e74                 | LR__0489
08e74                 | LR__0490
08e74     10 5E 05 F1 | 	add	fp, #16
08e78     AF 00 68 FC | 	wrlong	#0, fp
08e7c     10 5E 85 F1 | 	sub	fp, #16
08e80                 | LR__0491
08e80     0C 5E 05 F1 | 	add	fp, #12
08e84     AF 6C 02 FB | 	rdlong	local01, fp
08e88     0C 5E 85 F1 | 	sub	fp, #12
08e8c     00 6C 1E F2 | 	cmp	local01, #0 wcz
08e90     A8 00 90 ED |  if_be	jmp	#LR__0492
08e94     18 5E 05 F1 | 	add	fp, #24
08e98     AF 6C 02 FB | 	rdlong	local01, fp
08e9c     36 6F 02 FB | 	rdlong	local02, local01
08ea0     04 6C 06 F1 | 	add	local01, #4
08ea4     36 71 02 FB | 	rdlong	local03, local01
08ea8     14 5E 85 F1 | 	sub	fp, #20
08eac     AF 5E 02 FB | 	rdlong	arg01, fp
08eb0     04 5E 85 F1 | 	sub	fp, #4
08eb4     FD 7A 02 F6 | 	mov	local08, objptr
08eb8     37 FB 01 F6 | 	mov	objptr, local02
08ebc     2D 70 62 FD | 	call	local03
08ec0     3D FB 01 F6 | 	mov	objptr, local08
08ec4     14 5E 05 F1 | 	add	fp, #20
08ec8     AF 18 62 FC | 	wrlong	result1, fp
08ecc     14 5E 85 F1 | 	sub	fp, #20
08ed0     00 18 5E F2 | 	cmps	result1, #0 wcz
08ed4     64 00 90 CD |  if_b	jmp	#LR__0492
08ed8     1C 5E 05 F1 | 	add	fp, #28
08edc     AF 6C 02 FB | 	rdlong	local01, fp
08ee0     36 71 02 F6 | 	mov	local03, local01
08ee4     01 70 06 F1 | 	add	local03, #1
08ee8     AF 70 62 FC | 	wrlong	local03, fp
08eec     08 5E 85 F1 | 	sub	fp, #8
08ef0     AF 76 02 FB | 	rdlong	local06, fp
08ef4     36 77 42 FC | 	wrbyte	local06, local01
08ef8     04 5E 85 F1 | 	sub	fp, #4
08efc     AF 6C 02 FB | 	rdlong	local01, fp
08f00     01 6C 06 F1 | 	add	local01, #1
08f04     AF 6C 62 FC | 	wrlong	local01, fp
08f08     04 5E 85 F1 | 	sub	fp, #4
08f0c     AF 6C 02 FB | 	rdlong	local01, fp
08f10     01 6C 86 F1 | 	sub	local01, #1
08f14     AF 6C 62 FC | 	wrlong	local01, fp
08f18     14 5E 05 F1 | 	add	fp, #20
08f1c     AF 6C 0A FB | 	rdlong	local01, fp wz
08f20     20 5E 85 F1 | 	sub	fp, #32
08f24     58 FF 9F AD |  if_e	jmp	#LR__0491
08f28     14 5E 05 F1 | 	add	fp, #20
08f2c     AF 70 02 FB | 	rdlong	local03, fp
08f30     14 5E 85 F1 | 	sub	fp, #20
08f34     0A 70 0E F2 | 	cmp	local03, #10 wz
08f38     44 FF 9F 5D |  if_ne	jmp	#LR__0491
08f3c                 | LR__0492
08f3c     10 5E 05 F1 | 	add	fp, #16
08f40     AF 18 02 FB | 	rdlong	result1, fp
08f44     10 5E 85 F1 | 	sub	fp, #16
08f48                 | LR__0493
08f48     AF F0 03 F6 | 	mov	ptra, fp
08f4c     BA 00 A0 FD | 	call	#popregs_
08f50                 | __system___vfsread_ret
08f50     2D 00 64 FD | 	ret
08f54                 | 
08f54                 | __system____default_filbuf
08f54     06 5A 05 F6 | 	mov	COUNT_, #6
08f58     B0 00 A0 FD | 	call	#pushregs_
08f5c     2F 6D 02 FB | 	rdlong	local01, arg01
08f60     10 5E 06 F1 | 	add	arg01, #16
08f64     2F 6F 02 FB | 	rdlong	local02, arg01
08f68     10 5E 86 F1 | 	sub	arg01, #16
08f6c     37 71 02 FB | 	rdlong	local03, local02
08f70     04 6E 06 F1 | 	add	local02, #4
08f74     37 73 02 FB | 	rdlong	local04, local02
08f78     0C 6C 06 F1 | 	add	local01, #12
08f7c     36 61 02 F6 | 	mov	arg02, local01
08f80     0C 6C 86 F1 | 	sub	local01, #12
08f84     0A 62 C6 F9 | 	decod	arg03, #10
08f88     FD 74 02 F6 | 	mov	local05, objptr
08f8c     38 FB 01 F6 | 	mov	objptr, local03
08f90     2D 72 62 FD | 	call	local04
08f94     3A FB 01 F6 | 	mov	objptr, local05
08f98     0C 77 02 F6 | 	mov	local06, result1
08f9c     00 76 5E F2 | 	cmps	local06, #0 wcz
08fa0     01 18 66 C6 |  if_b	neg	result1, #1
08fa4     28 00 90 CD |  if_b	jmp	#LR__0494
08fa8     36 77 62 FC | 	wrlong	local06, local01
08fac     0C 6C 06 F1 | 	add	local01, #12
08fb0     36 6F 02 F6 | 	mov	local02, local01
08fb4     08 6C 86 F1 | 	sub	local01, #8
08fb8     36 6F 62 FC | 	wrlong	local02, local01
08fbc     04 6C 06 F1 | 	add	local01, #4
08fc0     36 6F 02 FB | 	rdlong	local02, local01
08fc4     01 6E 46 F5 | 	or	local02, #1
08fc8     36 6F 62 FC | 	wrlong	local02, local01
08fcc     3B 19 02 F6 | 	mov	result1, local06
08fd0                 | LR__0494
08fd0     AF F0 03 F6 | 	mov	ptra, fp
08fd4     BA 00 A0 FD | 	call	#popregs_
08fd8                 | __system____default_filbuf_ret
08fd8     2D 00 64 FD | 	ret
08fdc                 | 
08fdc                 | ' 	
08fdc                 | ' 	FUNCTION pfunc(c as integer) as integer
08fdc                 | ___strs_cl_pfunc
08fdc                 | ' 		if (i < 16) then
08fdc     04 FA 05 F1 | 	add	objptr, #4
08fe0     FD 1E 02 FB | 	rdlong	_var01, objptr
08fe4     04 FA 85 F1 | 	sub	objptr, #4
08fe8     10 1E 5E F2 | 	cmps	_var01, #16 wcz
08fec     2C 00 90 3D |  if_ae	jmp	#LR__0495
08ff0     FD 20 02 FB | 	rdlong	_var02, objptr
08ff4     04 FA 05 F1 | 	add	objptr, #4
08ff8     FD 22 02 FB | 	rdlong	_var03, objptr
08ffc     10 23 02 F1 | 	add	_var03, _var02
09000     11 5F 42 FC | 	wrbyte	arg01, _var03
09004     FD 1E 02 FB | 	rdlong	_var01, objptr
09008     01 1E 06 F1 | 	add	_var01, #1
0900c     FD 1E 62 FC | 	wrlong	_var01, objptr
09010     04 FA 85 F1 | 	sub	objptr, #4
09014                 | ' 			p(i) = c
09014                 | ' 			i = i+1
09014                 | ' 			return 1
09014     01 18 06 F6 | 	mov	result1, #1
09018     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
0901c                 | LR__0495
0901c                 | ' 			return -1
0901c     01 18 66 F6 | 	neg	result1, #1
09020                 | ___strs_cl_pfunc_ret
09020     2D 00 64 FD | 	ret
09024                 | 
09024                 | __struct__s_vfs_file_t_putchar
09024     04 5A 05 F6 | 	mov	COUNT_, #4
09028     B0 00 A0 FD | 	call	#pushregs_
0902c     18 FA 05 F1 | 	add	objptr, #24
09030     FD 6C 0A FB | 	rdlong	local01, objptr wz
09034     18 FA 85 F1 | 	sub	objptr, #24
09038     00 18 06 A6 |  if_e	mov	result1, #0
0903c     3C 00 90 AD |  if_e	jmp	#LR__0496
09040     18 FA 05 F1 | 	add	objptr, #24
09044     FD 6C 02 FB | 	rdlong	local01, objptr
09048     18 FA 85 F1 | 	sub	objptr, #24
0904c     36 6F 02 FB | 	rdlong	local02, local01
09050     04 6C 06 F1 | 	add	local01, #4
09054     36 71 02 FB | 	rdlong	local03, local01
09058     FD 60 02 F6 | 	mov	arg02, objptr
0905c     FD 72 02 F6 | 	mov	local04, objptr
09060     37 FB 01 F6 | 	mov	objptr, local02
09064     2D 70 62 FD | 	call	local03
09068     39 FB 01 F6 | 	mov	objptr, local04
0906c     00 18 5E F2 | 	cmps	result1, #0 wcz
09070     00 6C 06 C6 |  if_b	mov	local01, #0
09074     01 6C 06 36 |  if_ae	mov	local01, #1
09078     36 19 02 F6 | 	mov	result1, local01
0907c                 | LR__0496
0907c     AF F0 03 F6 | 	mov	ptra, fp
09080     BA 00 A0 FD | 	call	#popregs_
09084                 | __struct__s_vfs_file_t_putchar_ret
09084     2D 00 64 FD | 	ret
09088                 | 
09088                 | __struct__s_vfs_file_t_getchar
09088     04 5A 05 F6 | 	mov	COUNT_, #4
0908c     B0 00 A0 FD | 	call	#pushregs_
09090     1C FA 05 F1 | 	add	objptr, #28
09094     FD 6C 0A FB | 	rdlong	local01, objptr wz
09098     1C FA 85 F1 | 	sub	objptr, #28
0909c     01 18 66 A6 |  if_e	neg	result1, #1
090a0     2C 00 90 AD |  if_e	jmp	#LR__0497
090a4                 | '         return getcf(__this);
090a4     1C FA 05 F1 | 	add	objptr, #28
090a8     FD 6C 02 FB | 	rdlong	local01, objptr
090ac     1C FA 85 F1 | 	sub	objptr, #28
090b0     36 6F 02 FB | 	rdlong	local02, local01
090b4     04 6C 06 F1 | 	add	local01, #4
090b8     36 71 02 FB | 	rdlong	local03, local01
090bc     FD 5E 02 F6 | 	mov	arg01, objptr
090c0     FD 72 02 F6 | 	mov	local04, objptr
090c4     37 FB 01 F6 | 	mov	objptr, local02
090c8     2D 70 62 FD | 	call	local03
090cc     39 FB 01 F6 | 	mov	objptr, local04
090d0                 | LR__0497
090d0     AF F0 03 F6 | 	mov	ptra, fp
090d4     BA 00 A0 FD | 	call	#popregs_
090d8                 | __struct__s_vfs_file_t_getchar_ret
090d8     2D 00 64 FD | 	ret
090dc                 | 
090dc                 | __struct___bas_wrap_sender_tx
090dc     04 5A 05 F6 | 	mov	COUNT_, #4
090e0     B0 00 A0 FD | 	call	#pushregs_
090e4     FD 6C 02 FB | 	rdlong	local01, objptr
090e8     36 6F 02 FB | 	rdlong	local02, local01
090ec     04 6C 06 F1 | 	add	local01, #4
090f0     36 71 02 FB | 	rdlong	local03, local01
090f4     FD 72 02 F6 | 	mov	local04, objptr
090f8     37 FB 01 F6 | 	mov	objptr, local02
090fc     2D 70 62 FD | 	call	local03
09100     39 FB 01 F6 | 	mov	objptr, local04
09104     01 18 06 F6 | 	mov	result1, #1
09108     AF F0 03 F6 | 	mov	ptra, fp
0910c     BA 00 A0 FD | 	call	#popregs_
09110                 | __struct___bas_wrap_sender_tx_ret
09110     2D 00 64 FD | 	ret
09114                 | 
09114                 | LR__0498
09114     20          | 	byte	" "
09115     00          | 	byte	0
09116                 | LR__0499
09116                 | 	byte	
09116     00          | 	byte	0
09117                 | LR__0500
09117                 | 	byte	
09117     00          | 	byte	0
09118                 | LR__0501
09118     20 21 21 21 
0911c     20 63 6F 72 
09120     72 75 70 74 
09124     65 64 20 68 
09128     65 61 70 3F 
0912c     3F 3F 20 21 
09130     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
09133     00          | 	byte	0
09134                 | LR__0502
09134     20 21 21 21 
09138     20 6F 75 74 
0913c     20 6F 66 20 
09140     68 65 61 70 
09144     20 6D 65 6D 
09148     6F 72 79 20 
0914c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
09150     00          | 	byte	0
09151                 | LR__0503
09151     20 21 21 21 
09155     20 63 6F 72 
09159     72 75 70 74 
0915d     65 64 20 68 
09161     65 61 70 20 
09165     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
09169     00          | 	byte	0
0916a                 | LR__0504
0916a     4E 61 6D 65 
0916e     20 20 20 20 
09172     20 20 20 20 
09176     20 20 20 20 
0917a     20 20 20 20 
0917e     20 20 20 6C 
09182     65 6E 20 20 
09186     20 66 74 20 
0918a     76 6F 6C 20 
0918e     72 65 70 20 
09192     20 20 72 2E 
09196     6C 65 6E 20 
0919a     20 20 20 20 
0919e     20 20 20 20 
091a2     4E 61 6D 65 
091a6     20 20 20 20 
091aa     20 20 20 20 
091ae     20 20 20 20 
091b2     20 20 20 20 
091b6     20 20 20 6C 
091ba     65 6E 20 20 
091be     20 66 74 20 
091c2     76 6F 6C 20 
091c6     72 65 70 20 
091ca     20 20 72 2E 
091ce     6C 65 6E 20 | 	byte	"Name                   len   ft vol rep   r.len         Name                   len   ft vol rep   r.len "
091d2     00          | 	byte	0
091d3                 | LR__0505
091d3     53          | 	byte	"S"
091d4     00          | 	byte	0
091d5                 | LR__0506
091d5     41 62 63 64 
091d9     65 66       | 	byte	"Abcdef"
091db     00          | 	byte	0
091dc                 | LR__0507
091dc     20 20 20 20 
091e0     20 20 20 20 
091e4     20 20 20 20 
091e8     20 20 20 20 
091ec     20 20 20 20 
091f0     20 20       | 	byte	"                      "
091f2     00          | 	byte	0
091f3                 | LR__0508
091f3                 | 	byte	
091f3     00          | 	byte	0
091f4                 | LR__0509
091f4     20          | 	byte	" "
091f5     00          | 	byte	0
091f6                 | LR__0510
091f6     73 61 6D 70 
091fa     6C 65 73 20 
091fe     6D 6F 64 75 
09202     6C 65       | 	byte	"samples module"
09204     00          | 	byte	0
09205     00 00 00    | 	alignl
09208                 | _dat_
09208     6A 61 72 72 
0920c     65 00 00 00 
09210     00 00 00 00 
09214     00 00 00 00 | module file "/home/pik33/mod/CDTV2.MOD"
09218     00 00 00 00 
0921c     73 6F 75 6E 
09220     64 34 00 00 
09224     00 00 00 00 | 	byte	$00, $00, $00, $00, $73, $6f, $75, $6e, $64, $34, $00, $00, $00, $00, $00, $00
09228     00 00 00 00 
0922c     00 00 00 00 
09230     00 00       | 	byte	$00[10]
09232     22 A8 00 40 
09236     00 00 00 01 
0923a     73 68 6F 72 
0923e     74 73 74 72 | 	byte	$22, $a8, $00, $40, $00, $00, $00, $01, $73, $68, $6f, $72, $74, $73, $74, $72
09242     69 6E 67 33 
09246     00 00 00 00 
0924a     00 00 00 00 
0924e     00 00 1D 8F | 	byte	$69, $6e, $67, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $1d, $8f
09252     00 40 00 00 
09256     00 01 62 61 
0925a     73 73 64 72 
0925e     75 6D 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $62, $61, $73, $73, $64, $72, $75, $6d, $00, $00
09262     00 00 00 00 
09266     00 00 00 00 
0926a     00 00 00 00 | 	byte	$00[12]
0926e     08 81 00 40 
09272     00 00 00 01 
09276     74 6F 6B 6A 
0927a     6F 64 72 75 | 	byte	$08, $81, $00, $40, $00, $00, $00, $01, $74, $6f, $6b, $6a, $6f, $64, $72, $75
0927e     6D 00 00 00 
09282     00 00 00 00 
09286     00 00 00 00 
0928a     00 00 0B 90 | 	byte	$6d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0b, $90
0928e     00 40 00 00 
09292     00 01 63 69 
09296     6E 31 00 00 
0929a     00 00 00 00 | 	byte	$00, $40, $00, $00, $00, $01, $63, $69, $6e, $31, $00, $00, $00, $00, $00, $00
0929e     00 00 00 00 
092a2     00 00 00 00 
092a6     00 00 00 00 | 	byte	$00[12]
092aa     06 62 00 40 
092ae     00 00 00 01 
092b2     42 61 73 73 
092b6     73 6F 75 6E | 	byte	$06, $62, $00, $40, $00, $00, $00, $01, $42, $61, $73, $73, $73, $6f, $75, $6e
092ba     64 00 00 00 
092be     00 00 00 00 
092c2     00 00 00 00 
092c6     00 00 05 88 | 	byte	$64, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $05, $88
092ca     00 2F 00 00 
092ce     00 01 62 61 
092d2     73 73 76 69 
092d6     6F 00 00 00 | 	byte	$00, $2f, $00, $00, $00, $01, $62, $61, $73, $73, $76, $69, $6f, $00, $00, $00
092da     00 00 00 00 
092de     00 00 00 00 
092e2     00 00 00 00 | 	byte	$00[12]
092e6     11 28 00 40 
092ea     05 84 08 00 
092ee     00 00 00 00 
092f2     00 00 00 00 | 	byte	$11, $28, $00, $40, $05, $84, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00
092f6     00 00 00 00 
092fa     00 00 00 00 
092fe     00 00 00 00 
09302     00 00 00 00 
09306     00 00 00 00 
0930a     00          | 	byte	$00[21]
0930b     01 00 00 00 
0930f     00 00 00 00 
09313     00 00 00 00 
09317     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0931b     00 00 00 00 
0931f     00 00 00 00 
09323     00 00 00 00 
09327     00 00       | 	byte	$00[14]
09329     01 00 00 00 
0932d     00 00 00 00 
09331     00 00 00 00 
09335     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09339     00 00 00 00 
0933d     00 00 00 00 
09341     00 00 00 00 
09345     00 00       | 	byte	$00[14]
09347     01 00 00 00 
0934b     00 00 00 00 
0934f     00 00 00 00 
09353     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09357     00 00 00 00 
0935b     00 00 00 00 
0935f     00 00 00 00 
09363     00 00       | 	byte	$00[14]
09365     01 00 00 00 
09369     00 00 00 00 
0936d     00 00 00 00 
09371     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09375     00 00 00 00 
09379     00 00 00 00 
0937d     00 00 00 00 
09381     00 00       | 	byte	$00[14]
09383     01 00 00 00 
09387     00 00 00 00 
0938b     00 00 00 00 
0938f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09393     00 00 00 00 
09397     00 00 00 00 
0939b     00 00 00 00 
0939f     00 00       | 	byte	$00[14]
093a1     01 00 00 00 
093a5     00 00 00 00 
093a9     00 00 00 00 
093ad     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093b1     00 00 00 00 
093b5     00 00 00 00 
093b9     00 00 00 00 
093bd     00 00       | 	byte	$00[14]
093bf     01 00 00 00 
093c3     00 00 00 00 
093c7     00 00 00 00 
093cb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093cf     00 00 00 00 
093d3     00 00 00 00 
093d7     00 00 00 00 
093db     00 00       | 	byte	$00[14]
093dd     01 00 00 00 
093e1     00 00 00 00 
093e5     00 00 00 00 
093e9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
093ed     00 00 00 00 
093f1     00 00 00 00 
093f5     00 00 00 00 
093f9     00 00       | 	byte	$00[14]
093fb     01 00 00 00 
093ff     00 00 00 00 
09403     00 00 00 00 
09407     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0940b     00 00 00 00 
0940f     00 00 00 00 
09413     00 00 00 00 
09417     00 00       | 	byte	$00[14]
09419     01 00 00 00 
0941d     00 00 00 00 
09421     00 00 00 00 
09425     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09429     00 00 00 00 
0942d     00 00 00 00 
09431     00 00 00 00 
09435     00 00       | 	byte	$00[14]
09437     01 00 00 00 
0943b     00 00 00 00 
0943f     00 00 00 00 
09443     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09447     00 00 00 00 
0944b     00 00 00 00 
0944f     00 00 00 00 
09453     00 00       | 	byte	$00[14]
09455     01 00 00 00 
09459     00 00 00 00 
0945d     00 00 00 00 
09461     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09465     00 00 00 00 
09469     00 00 00 00 
0946d     00 00 00 00 
09471     00 00       | 	byte	$00[14]
09473     01 00 00 00 
09477     00 00 00 00 
0947b     00 00 00 00 
0947f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09483     00 00 00 00 
09487     00 00 00 00 
0948b     00 00 00 00 
0948f     00 00       | 	byte	$00[14]
09491     01 00 00 00 
09495     00 00 00 00 
09499     00 00 00 00 
0949d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094a1     00 00 00 00 
094a5     00 00 00 00 
094a9     00 00 00 00 
094ad     00 00       | 	byte	$00[14]
094af     01 00 00 00 
094b3     00 00 00 00 
094b7     00 00 00 00 
094bb     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094bf     00 00 00 00 
094c3     00 00 00 00 
094c7     00 00 00 00 
094cb     00 00       | 	byte	$00[14]
094cd     01 00 00 00 
094d1     00 00 00 00 
094d5     00 00 00 00 
094d9     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094dd     00 00 00 00 
094e1     00 00 00 00 
094e5     00 00 00 00 
094e9     00 00       | 	byte	$00[14]
094eb     01 00 00 00 
094ef     00 00 00 00 
094f3     00 00 00 00 
094f7     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094fb     00 00 00 00 
094ff     00 00 00 00 
09503     00 00 00 00 
09507     00 00       | 	byte	$00[14]
09509     01 00 00 00 
0950d     00 00 00 00 
09511     00 00 00 00 
09515     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09519     00 00 00 00 
0951d     00 00 00 00 
09521     00 00 00 00 
09525     00 00       | 	byte	$00[14]
09527     01 00 00 00 
0952b     00 00 00 00 
0952f     00 00 00 00 
09533     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09537     00 00 00 00 
0953b     00 00 00 00 
0953f     00 00 00 00 
09543     00 00       | 	byte	$00[14]
09545     01 00 00 00 
09549     00 00 00 00 
0954d     00 00 00 00 
09551     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09555     00 00 00 00 
09559     00 00 00 00 
0955d     00 00 00 00 
09561     00 00       | 	byte	$00[14]
09563     01 00 00 00 
09567     00 00 00 00 
0956b     00 00 00 00 
0956f     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09573     00 00 00 00 
09577     00 00 00 00 
0957b     00 00 00 00 
0957f     00 00       | 	byte	$00[14]
09581     01 00 00 00 
09585     00 00 00 00 
09589     00 00 00 00 
0958d     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09591     00 00 00 00 
09595     00 00 00 00 
09599     00 00 00 00 
0959d     00 00       | 	byte	$00[14]
0959f     01 00 00 00 
095a3     00 00 00 00 
095a7     00 00 00 00 
095ab     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
095af     00 00 00 00 
095b3     00 00 00 00 
095b7     00 00 00 00 
095bb     00 00       | 	byte	$00[14]
095bd     01 2B 00 0E 
095c1     01 0F 0F 02 
095c5     03 04 05 06 
095c9     02 03 04 08 | 	byte	$01, $2b, $00, $0e, $01, $0f, $0f, $02, $03, $04, $05, $06, $02, $03, $04, $08
095cd     06 07 09 0A 
095d1     0B 02 03 04 
095d5     05 06 02 03 
095d9     04 08 06 07 | 	byte	$06, $07, $09, $0a, $0b, $02, $03, $04, $05, $06, $02, $03, $04, $08, $06, $07
095dd     09 0A 0B 07 
095e1     09 0A 0B 00 
095e5     00 00 00 0D 
095e9     0C 1B 00 00 | 	byte	$09, $0a, $0b, $07, $09, $0a, $0b, $00, $00, $00, $00, $0d, $0c, $1b, $00, $00
095ed     00 00 00 00 
      ...             
09639     00 00 00 00 
0963d     00 00 00    | 	byte	$00[83]
09640     4D 2E 4B 2E 
09644     00 B4 4F 04 
09648     00 00 00 00 
0964c     00 00 00 00 | 	byte	$4d, $2e, $4b, $2e, $00, $b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00
09650     02 FA 60 00 
09654     00 00 00 00 
09658     00 00 00 00 
0965c     00 00 00 00 | 	byte	$02, $fa, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09660     00 00 00 00 
09664     00          | 	byte	$00[5]
09665     B4 40 00 01 
09669     7D 60 00 00 
0966d     00 00 00 01 
09671     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
09675     00 00 00 00 
09679     00 00 00 00 
0967d     00 00 00 00 
09681     00 00 00 00 | 	byte	$00[16]
09685     B4 30 00 00 
09689     BE 60 00 00 
0968d     00 00 00 02 
09691     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09695     00 00 00 00 
09699     00 00 00 00 
0969d     00 00 00 00 
096a1     00 00 00 00 | 	byte	$00[16]
096a5     AA 50 00 00 
096a9     FE 60 00 00 
096ad     00 00 00 01 
096b1     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
096b5     00 00 00 00 
096b9     00 00 00 00 
096bd     00 00 00 00 
096c1     00 00 00 00 | 	byte	$00[16]
096c5     B4 40 00 00 
096c9     D6 60 00 00 
096cd     00 00 00 02 
096d1     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
096d5     00 00 00 00 
096d9     00 00 00 00 
096dd     00 00 00 00 
096e1     00 00 00 00 | 	byte	$00[16]
096e5     B4 30 00 00 
096e9     BE 60 00 00 
096ed     00 00 00 01 
096f1     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
096f5     00 00 00 00 
096f9     00 00 00 00 
096fd     00 00 00 00 
09701     00 00 00 00 | 	byte	$00[16]
09705     B4 30 00 01 
09709     7D 60 00 01 
0970d     AC 10 00 02 
09711     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $ac, $10, $00, $02, $fa, $60, $00, $00
09715     00 00 00 00 
09719     00 00 00 00 
0971d     00 00 00 00 
09721     00 00 00 00 | 	byte	$00[16]
09725     AA 50 00 01 
09729     7D 60 00 01 
0972d     AC 10 00 01 
09731     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $01, $ac, $10, $00, $01, $7d, $60, $00, $00
09735     00 00 00 00 
09739     00 00 00 00 
0973d     00 00 00 00 
09741     00 00 00 00 | 	byte	$00[16]
09745     B4 40 00 00 
09749     00 00 00 00 
0974d     00 00 00 02 
09751     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09755     00 00 00 00 
09759     00 00 00 00 
0975d     00 00 00 00 
09761     00 00 00 00 | 	byte	$00[16]
09765     B4 40 00 01 
09769     7D 60 00 00 
0976d     00 00 00 01 
09771     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
09775     00 00 00 00 
09779     00 00 00 00 
0977d     00 00 00 00 
09781     00 00 00 00 | 	byte	$00[16]
09785     B4 30 00 00 
09789     BE 60 00 00 
0978d     00 00 00 02 
09791     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09795     00 00 00 00 
09799     00 00 00 00 
0979d     00 00 00 00 
097a1     00 00 00 00 | 	byte	$00[16]
097a5     AA 50 00 00 
097a9     FE 60 00 00 
097ad     00 00 00 01 
097b1     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
097b5     00 00 00 00 
097b9     00 00 00 00 
097bd     00 00 00 00 
097c1     00 00 00 00 | 	byte	$00[16]
097c5     B4 40 00 00 
097c9     D6 60 00 00 
097cd     00 00 00 02 
097d1     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
097d5     00 00 00 00 
097d9     00 00 00 00 
097dd     00 00 00 00 
097e1     00 00 00 00 | 	byte	$00[16]
097e5     B4 30 00 00 
097e9     BE 60 00 00 
097ed     00 00 00 01 
097f1     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
097f5     00 00 00 00 
097f9     00 00 00 00 
097fd     00 00 00 00 
09801     00 00 00 00 | 	byte	$00[16]
09805     B4 30 00 01 
09809     7D 60 00 00 
0980d     00 00 00 02 
09811     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09815     00 00 00 00 
09819     00 00 00 00 
0981d     00 00 00 00 
09821     00 00 00 00 | 	byte	$00[16]
09825     AA 50 00 01 
09829     7D 60 00 00 
0982d     00 00 00 01 
09831     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
09835     00 00 00 00 
09839     00 00 00 00 
0983d     00 00 00 00 
09841     00 00 00 00 | 	byte	$00[16]
09845     B4 40 00 00 
09849     00 00 00 00 
0984d     00 00 00 02 
09851     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09855     00 00 00 00 
09859     00 00 00 00 
0985d     00 00 00 00 
09861     00 00 00 00 | 	byte	$00[16]
09865     B4 40 00 01 
09869     7D 60 00 00 
0986d     00 00 00 01 
09871     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
09875     00 00 00 00 
09879     00 00 00 00 
0987d     00 00 00 00 
09881     00 00 00 00 | 	byte	$00[16]
09885     B4 30 00 00 
09889     BE 60 00 00 
0988d     00 00 00 02 
09891     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09895     00 00 00 00 
09899     00 00 00 00 
0989d     00 00 00 00 
098a1     00 00 00 00 | 	byte	$00[16]
098a5     AA 50 00 00 
098a9     FE 60 00 00 
098ad     00 00 00 01 
098b1     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
098b5     00 00 00 00 
098b9     00 00 00 00 
098bd     00 00 00 00 
098c1     00 00 00 00 | 	byte	$00[16]
098c5     B4 40 00 00 
098c9     D6 60 00 00 
098cd     00 00 00 02 
098d1     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
098d5     00 00 00 00 
098d9     00 00 00 00 
098dd     00 00 00 00 
098e1     00 00 00 00 | 	byte	$00[16]
098e5     B4 30 00 00 
098e9     BE 60 00 00 
098ed     00 00 00 01 
098f1     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
098f5     00 00 00 00 
098f9     00 00 00 00 
098fd     00 00 00 00 
09901     00 00 00 00 | 	byte	$00[16]
09905     B4 30 00 01 
09909     7D 60 00 03 
0990d     58 10 00 02 
09911     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $03, $58, $10, $00, $02, $fa, $60, $00, $00
09915     00 00 00 00 
09919     00 00 00 00 
0991d     00 00 00 00 
09921     00 00 00 00 | 	byte	$00[16]
09925     AA 50 00 01 
09929     7D 60 00 00 
0992d     00 00 00 01 
09931     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
09935     00 00 00 00 
09939     00 00 00 00 
0993d     00 00 00 00 
09941     00 00 00 00 | 	byte	$00[16]
09945     B4 40 00 00 
09949     00 00 00 00 
0994d     00 00 00 02 
09951     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09955     00 00 00 00 
09959     00 00 00 00 
0995d     00 00 00 00 
09961     00 00 00 00 | 	byte	$00[16]
09965     B4 40 00 01 
09969     7D 60 00 00 
0996d     00 00 00 01 
09971     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
09975     00 00 00 00 
09979     00 00 00 00 
0997d     00 00 00 00 
09981     00 00 00 00 | 	byte	$00[16]
09985     B4 30 00 00 
09989     BE 60 00 00 
0998d     00 00 00 02 
09991     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09995     00 00 00 00 
09999     00 00 00 00 
0999d     00 00 00 00 
099a1     00 00 00 00 | 	byte	$00[16]
099a5     AA 50 00 00 
099a9     FE 60 00 00 
099ad     00 00 00 01 
099b1     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
099b5     00 00 00 00 
099b9     00 00 00 00 
099bd     00 00 00 00 
099c1     00 00 00 00 | 	byte	$00[16]
099c5     B4 40 00 00 
099c9     D6 60 00 00 
099cd     00 00 00 02 
099d1     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
099d5     00 00 00 00 
099d9     00 00 00 00 
099dd     00 00 00 00 
099e1     00 00 00 00 | 	byte	$00[16]
099e5     B4 30 00 00 
099e9     BE 60 00 00 
099ed     00 00 00 01 
099f1     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
099f5     00 00 00 00 
099f9     00 00 00 00 
099fd     00 00 00 00 
09a01     00 00 00 00 | 	byte	$00[16]
09a05     B4 30 00 01 
09a09     7D 60 00 00 
09a0d     00 00 00 02 
09a11     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
09a15     00 00 00 00 
09a19     00 00 00 00 
09a1d     00 00 00 00 
09a21     00 00 00 00 | 	byte	$00[16]
09a25     AA 50 00 01 
09a29     7D 60 00 00 
09a2d     00 00 00 01 
09a31     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
09a35     00 00 00 00 
09a39     00 00 00 00 
09a3d     00 00 00 00 
09a41     00 00 00 00 | 	byte	$00[16]
09a45     B4 4F 04 00 
09a49     00 00 00 00 
09a4d     00 00 00 00 
09a51     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a55     00 00 00 00 
09a59     00 00 00 00 
09a5d     00 00 00 00 
09a61     00 00 00 00 | 	byte	$00[16]
09a65     B4 40 00 00 
09a69     00 00 00 00 
09a6d     00 00 00 00 
09a71     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a75     00 00 00 00 
09a79     00 00 00 00 
09a7d     00 00 00 00 
09a81     00 00 00 00 | 	byte	$00[16]
09a85     B4 30 00 00 
09a89     00 00 00 00 
09a8d     00 00 00 00 
09a91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a95     00 00 00 00 
09a99     00 00 00 00 
09a9d     00 00 00 00 
09aa1     00 00 00 00 | 	byte	$00[16]
09aa5     AA 50 00 00 
09aa9     00 00 00 00 
09aad     00 00 00 00 
09ab1     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ab5     00 00 00 00 
09ab9     00 00 00 00 
09abd     00 00 00 00 
09ac1     00 00 00 00 | 	byte	$00[16]
09ac5     B4 40 00 00 
09ac9     00 00 00 00 
09acd     00 00 00 00 
09ad1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09ad5     00 00 00 00 
09ad9     00 00 00 00 
09add     00 00 00 00 
09ae1     00 00 00 00 | 	byte	$00[16]
09ae5     B4 30 00 00 
09ae9     00 00 00 00 
09aed     00 00 00 00 
09af1     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09af5     00 00 00 00 
09af9     00 00 00 00 
09afd     00 00 00 00 
09b01     00 00 00 00 | 	byte	$00[16]
09b05     B4 30 00 00 
09b09     00 00 00 00 
09b0d     00 00 00 00 
09b11     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b15     00 00 00 00 
09b19     00 00 00 00 
09b1d     00 00 00 00 
09b21     00 00 00 00 | 	byte	$00[16]
09b25     AA 50 00 00 
09b29     00 00 00 00 
09b2d     00 00 00 00 
09b31     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b35     00 00 00 00 
09b39     00 00 00 00 
09b3d     00 00 00 00 
09b41     00 00 00 00 | 	byte	$00[16]
09b45     B4 40 00 00 
09b49     00 00 00 00 
09b4d     00 00 00 00 
09b51     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b55     00 00 00 00 
09b59     00 00 00 00 
09b5d     00 00 00 00 
09b61     00 00 00 00 | 	byte	$00[16]
09b65     B4 40 00 00 
09b69     00 00 00 00 
09b6d     00 00 00 00 
09b71     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b75     00 00 00 00 
09b79     00 00 00 00 
09b7d     00 00 00 00 
09b81     00 00 00 00 | 	byte	$00[16]
09b85     B4 30 00 00 
09b89     00 00 00 00 
09b8d     00 00 00 00 
09b91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09b95     00 00 00 00 
09b99     00 00 00 00 
09b9d     00 00 00 00 
09ba1     00 00 00 00 | 	byte	$00[16]
09ba5     AA 50 00 00 
09ba9     00 00 00 00 
09bad     00 00 00 00 
09bb1     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bb5     00 00 00 00 
09bb9     00 00 00 00 
09bbd     00 00 00 00 
09bc1     00 00 00 00 | 	byte	$00[16]
09bc5     B4 40 00 00 
09bc9     00 00 00 00 
09bcd     00 00 00 00 
09bd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bd5     00 00 00 00 
09bd9     00 00 00 00 
09bdd     00 00 00 00 
09be1     00 00 00 00 | 	byte	$00[16]
09be5     B4 30 00 00 
09be9     00 00 00 00 
09bed     00 00 00 00 
09bf1     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09bf5     00 00 00 00 
09bf9     00 00 00 00 
09bfd     00 00 00 00 
09c01     00 00 00 00 | 	byte	$00[16]
09c05     B4 30 00 00 
09c09     00 00 00 00 
09c0d     00 00 00 00 
09c11     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c15     00 00 00 00 
09c19     00 00 00 00 
09c1d     00 00 00 00 
09c21     00 00 00 00 | 	byte	$00[16]
09c25     AA 50 00 00 
09c29     00 00 00 00 
09c2d     00 00 00 00 
09c31     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c35     00 00 00 00 
09c39     00 00 00 00 
09c3d     00 00 00 00 
09c41     00 00 00 00 | 	byte	$00[16]
09c45     B4 40 00 00 
09c49     00 00 00 00 
09c4d     00 00 00 00 
09c51     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c55     00 00 00 00 
09c59     00 00 00 00 
09c5d     00 00 00 00 
09c61     00 00 00 00 | 	byte	$00[16]
09c65     B4 40 00 00 
09c69     00 00 00 00 
09c6d     00 00 00 00 
09c71     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c75     00 00 00 00 
09c79     00 00 00 00 
09c7d     00 00 00 00 
09c81     00 00 00 00 | 	byte	$00[16]
09c85     B4 30 00 00 
09c89     00 00 00 00 
09c8d     00 00 00 00 
09c91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09c95     00 00 00 00 
09c99     00 00 00 00 
09c9d     00 00 00 00 
09ca1     00 00 00 00 | 	byte	$00[16]
09ca5     AA 50 00 00 
09ca9     00 00 00 00 
09cad     00 00 00 00 
09cb1     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cb5     00 00 00 00 
09cb9     00 00 00 00 
09cbd     00 00 00 00 
09cc1     00 00 00 00 | 	byte	$00[16]
09cc5     B4 40 00 00 
09cc9     00 00 00 00 
09ccd     00 00 00 00 
09cd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cd5     00 00 00 00 
09cd9     00 00 00 00 
09cdd     00 00 00 00 
09ce1     00 00 00 00 | 	byte	$00[16]
09ce5     B4 30 00 00 
09ce9     00 00 00 00 
09ced     00 00 00 00 
09cf1     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09cf5     00 00 00 00 
09cf9     00 00 00 00 
09cfd     00 00 00 00 
09d01     00 00 00 00 | 	byte	$00[16]
09d05     B4 30 00 00 
09d09     00 00 00 00 
09d0d     00 00 00 00 
09d11     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d15     00 00 00 00 
09d19     00 00 00 00 
09d1d     00 00 00 00 
09d21     00 00 00 00 | 	byte	$00[16]
09d25     AA 50 00 00 
09d29     00 00 00 00 
09d2d     00 00 00 00 
09d31     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d35     00 00 00 00 
09d39     00 00 00 00 
09d3d     00 00 00 00 
09d41     00 00 00 00 | 	byte	$00[16]
09d45     B4 40 00 00 
09d49     00 00 00 00 
09d4d     00 00 00 00 
09d51     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d55     00 00 00 00 
09d59     00 00 00 00 
09d5d     00 00 00 00 
09d61     00 00 00 00 | 	byte	$00[16]
09d65     B4 40 00 00 
09d69     00 00 00 00 
09d6d     00 00 00 00 
09d71     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d75     00 00 00 00 
09d79     00 00 00 00 
09d7d     00 00 00 00 
09d81     00 00 00 00 | 	byte	$00[16]
09d85     B4 30 00 00 
09d89     00 00 00 00 
09d8d     00 00 00 00 
09d91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09d95     00 00 00 00 
09d99     00 00 00 00 
09d9d     00 00 00 00 
09da1     00 00 00 00 | 	byte	$00[16]
09da5     AA 50 00 00 
09da9     00 00 00 00 
09dad     00 00 00 00 
09db1     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09db5     00 00 00 00 
09db9     00 00 00 00 
09dbd     00 00 00 00 
09dc1     00 00 00 00 | 	byte	$00[16]
09dc5     B4 40 00 00 
09dc9     00 00 00 00 
09dcd     00 00 00 00 
09dd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09dd5     00 00 00 00 
09dd9     00 00 00 00 
09ddd     00 00 00 00 
09de1     00 00 00 00 | 	byte	$00[16]
09de5     B4 30 00 00 
09de9     00 00 00 00 
09ded     00 00 00 00 
09df1     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09df5     00 00 00 00 
09df9     00 00 00 00 
09dfd     00 00 00 00 
09e01     00 00 00 00 | 	byte	$00[16]
09e05     B4 30 00 01 
09e09     7D 60 00 00 
09e0d     00 00 00 00 
09e11     BE 70 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $be, $70, $00, $00
09e15     00 00 00 00 
09e19     00 00 00 00 
09e1d     00 00 00 00 
09e21     00 00 00 00 | 	byte	$00[16]
09e25     AA 50 00 01 
09e29     7D 60 00 00 
09e2d     00 00 00 00 
09e31     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09e35     00 00 00 00 
09e39     00 00 00 00 
09e3d     00 00 00 00 
09e41     00 00 00 00 | 	byte	$00[16]
09e45     B4 4F 04 00 
09e49     00 00 00 01 
09e4d     40 20 00 00 
09e51     BE 70 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $01, $40, $20, $00, $00, $be, $70, $00, $00
09e55     00 00 00 00 
09e59     00 00 00 00 
09e5d     00 00 00 00 
09e61     00 00 00 00 | 	byte	$00[16]
09e65     B4 40 00 01 
09e69     7D 60 00 01 
09e6d     1D 20 00 00 
09e71     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
09e75     00 00 00 00 
09e79     00 00 00 00 
09e7d     00 00 00 00 
09e81     00 00 00 00 | 	byte	$00[16]
09e85     B4 30 00 00 
09e89     BE 60 00 00 
09e8d     FE 20 00 00 
09e91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
09e95     00 00 00 00 
09e99     00 00 00 00 
09e9d     00 00 00 00 
09ea1     00 00 00 00 | 	byte	$00[16]
09ea5     AA 50 00 01 
09ea9     7D 60 00 01 
09ead     1D 20 00 00 
09eb1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
09eb5     00 00 00 00 
09eb9     00 00 00 00 
09ebd     00 00 00 00 
09ec1     00 00 00 00 | 	byte	$00[16]
09ec5     B4 40 00 00 
09ec9     BE 60 00 01 
09ecd     40 20 00 00 
09ed1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
09ed5     00 00 00 00 
09ed9     00 00 00 00 
09edd     00 00 00 00 
09ee1     00 00 00 00 | 	byte	$00[16]
09ee5     B4 30 00 01 
09ee9     7D 60 00 00 
09eed     FE 20 00 00 
09ef1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
09ef5     00 00 00 00 
09ef9     00 00 00 00 
09efd     00 00 00 00 
09f01     00 00 00 00 | 	byte	$00[16]
09f05     B4 30 00 01 
09f09     7D 60 00 00 
09f0d     00 00 00 00 
09f11     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f15     00 00 00 00 
09f19     00 00 00 00 
09f1d     00 00 00 00 
09f21     00 00 00 00 | 	byte	$00[16]
09f25     AA 50 00 01 
09f29     7D 60 00 00 
09f2d     00 00 00 00 
09f31     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09f35     00 00 00 00 
09f39     00 00 00 00 
09f3d     00 00 00 00 
09f41     00 00 00 00 | 	byte	$00[16]
09f45     B4 40 00 00 
09f49     00 00 00 01 
09f4d     40 20 00 00 
09f51     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
09f55     00 00 00 00 
09f59     00 00 00 00 
09f5d     00 00 00 00 
09f61     00 00 00 00 | 	byte	$00[16]
09f65     B4 40 00 01 
09f69     7D 60 00 01 
09f6d     1D 20 00 00 
09f71     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
09f75     00 00 00 00 
09f79     00 00 00 00 
09f7d     00 00 00 00 
09f81     00 00 00 00 | 	byte	$00[16]
09f85     B4 30 00 00 
09f89     BE 60 00 00 
09f8d     FE 20 00 00 
09f91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
09f95     00 00 00 00 
09f99     00 00 00 00 
09f9d     00 00 00 00 
09fa1     00 00 00 00 | 	byte	$00[16]
09fa5     AA 50 00 01 
09fa9     7D 60 00 01 
09fad     1D 20 00 00 
09fb1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
09fb5     00 00 00 00 
09fb9     00 00 00 00 
09fbd     00 00 00 00 
09fc1     00 00 00 00 | 	byte	$00[16]
09fc5     B4 40 00 00 
09fc9     BE 60 00 01 
09fcd     40 20 00 00 
09fd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
09fd5     00 00 00 00 
09fd9     00 00 00 00 
09fdd     00 00 00 00 
09fe1     00 00 00 00 | 	byte	$00[16]
09fe5     B4 30 00 01 
09fe9     7D 60 00 00 
09fed     FE 20 00 00 
09ff1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
09ff5     00 00 00 00 
09ff9     00 00 00 00 
09ffd     00 00 00 00 
0a001     00 00 00 00 | 	byte	$00[16]
0a005     B4 30 00 01 
0a009     7D 60 00 00 
0a00d     00 00 00 00 
0a011     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a015     00 00 00 00 
0a019     00 00 00 00 
0a01d     00 00 00 00 
0a021     00 00 00 00 | 	byte	$00[16]
0a025     AA 50 00 01 
0a029     7D 60 00 00 
0a02d     00 00 00 00 
0a031     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a035     00 00 00 00 
0a039     00 00 00 00 
0a03d     00 00 00 00 
0a041     00 00 00 00 | 	byte	$00[16]
0a045     B4 40 00 00 
0a049     00 00 00 01 
0a04d     53 20 00 00 
0a051     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a055     00 00 00 00 
0a059     00 00 00 00 
0a05d     00 00 00 00 
0a061     00 00 00 00 | 	byte	$00[16]
0a065     B4 40 00 01 
0a069     7D 60 00 01 
0a06d     40 20 00 00 
0a071     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a075     00 00 00 00 
0a079     00 00 00 00 
0a07d     00 00 00 00 
0a081     00 00 00 00 | 	byte	$00[16]
0a085     B4 30 00 00 
0a089     FE 60 00 01 
0a08d     1D 20 00 01 
0a091     FC 70 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $01, $1d, $20, $00, $01, $fc, $70, $00, $00
0a095     00 00 00 00 
0a099     00 00 00 00 
0a09d     00 00 00 00 
0a0a1     00 00 00 00 | 	byte	$00[16]
0a0a5     AA 50 00 01 
0a0a9     FC 60 00 01 
0a0ad     40 20 00 00 
0a0b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a0b5     00 00 00 00 
0a0b9     00 00 00 00 
0a0bd     00 00 00 00 
0a0c1     00 00 00 00 | 	byte	$00[16]
0a0c5     B4 40 00 00 
0a0c9     FE 60 00 01 
0a0cd     53 20 00 00 
0a0d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a0d5     00 00 00 00 
0a0d9     00 00 00 00 
0a0dd     00 00 00 00 
0a0e1     00 00 00 00 | 	byte	$00[16]
0a0e5     B4 30 00 01 
0a0e9     FC 60 00 01 
0a0ed     1D 20 00 00 
0a0f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
0a0f5     00 00 00 00 
0a0f9     00 00 00 00 
0a0fd     00 00 00 00 
0a101     00 00 00 00 | 	byte	$00[16]
0a105     B4 30 00 01 
0a109     FC 60 00 00 
0a10d     00 00 00 00 
0a111     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a115     00 00 00 00 
0a119     00 00 00 00 
0a11d     00 00 00 00 
0a121     00 00 00 00 | 	byte	$00[16]
0a125     AA 50 00 01 
0a129     FC 60 00 00 
0a12d     00 00 00 00 
0a131     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a135     00 00 00 00 
0a139     00 00 00 00 
0a13d     00 00 00 00 
0a141     00 00 00 00 | 	byte	$00[16]
0a145     B4 40 00 00 
0a149     00 00 00 01 
0a14d     53 20 00 00 
0a151     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a155     00 00 00 00 
0a159     00 00 00 00 
0a15d     00 00 00 00 
0a161     00 00 00 00 | 	byte	$00[16]
0a165     B4 40 00 01 
0a169     FC 60 00 01 
0a16d     40 20 00 00 
0a171     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a175     00 00 00 00 
0a179     00 00 00 00 
0a17d     00 00 00 00 
0a181     00 00 00 00 | 	byte	$00[16]
0a185     B4 30 00 00 
0a189     FE 60 00 01 
0a18d     1D 20 00 00 
0a191     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
0a195     00 00 00 00 
0a199     00 00 00 00 
0a19d     00 00 00 00 
0a1a1     00 00 00 00 | 	byte	$00[16]
0a1a5     AA 50 00 01 
0a1a9     FC 60 00 01 
0a1ad     40 20 00 00 
0a1b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a1b5     00 00 00 00 
0a1b9     00 00 00 00 
0a1bd     00 00 00 00 
0a1c1     00 00 00 00 | 	byte	$00[16]
0a1c5     B4 40 00 00 
0a1c9     FE 60 00 01 
0a1cd     53 20 00 00 
0a1d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a1d5     00 00 00 00 
0a1d9     00 00 00 00 
0a1dd     00 00 00 00 
0a1e1     00 00 00 00 | 	byte	$00[16]
0a1e5     B4 30 00 01 
0a1e9     FC 60 00 01 
0a1ed     1D 20 00 00 
0a1f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
0a1f5     00 00 00 00 
0a1f9     00 00 00 00 
0a1fd     00 00 00 00 
0a201     00 00 00 00 | 	byte	$00[16]
0a205     B4 30 00 01 
0a209     FC 60 00 00 
0a20d     00 00 00 00 
0a211     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a215     00 00 00 00 
0a219     00 00 00 00 
0a21d     00 00 00 00 
0a221     00 00 00 00 | 	byte	$00[16]
0a225     AA 50 00 01 
0a229     FC 60 00 00 
0a22d     00 00 00 00 
0a231     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a235     00 00 00 00 
0a239     00 00 00 00 
0a23d     00 00 00 00 
0a241     00 00 00 00 | 	byte	$00[16]
0a245     B4 4F 04 00 
0a249     00 00 00 01 
0a24d     7D 20 00 00 
0a251     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a255     00 00 00 00 
0a259     00 00 00 00 
0a25d     00 00 00 00 
0a261     00 00 00 00 | 	byte	$00[16]
0a265     B4 40 00 01 
0a269     E0 60 00 01 
0a26d     53 20 00 00 
0a271     00 00 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a275     00 00 00 00 
0a279     00 00 00 00 
0a27d     00 00 00 00 
0a281     00 00 00 00 | 	byte	$00[16]
0a285     B4 30 00 00 
0a289     F0 60 00 01 
0a28d     40 20 00 00 
0a291     F0 70 00 00 | 	byte	$b4, $30, $00, $00, $f0, $60, $00, $01, $40, $20, $00, $00, $f0, $70, $00, $00
0a295     00 00 00 00 
0a299     00 00 00 00 
0a29d     00 00 00 00 
0a2a1     00 00 00 00 | 	byte	$00[16]
0a2a5     AA 50 00 01 
0a2a9     E0 60 00 01 
0a2ad     53 20 00 00 
0a2b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a2b5     00 00 00 00 
0a2b9     00 00 00 00 
0a2bd     00 00 00 00 
0a2c1     00 00 00 00 | 	byte	$00[16]
0a2c5     B4 40 00 00 
0a2c9     F0 60 00 01 
0a2cd     7D 20 00 00 
0a2d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a2d5     00 00 00 00 
0a2d9     00 00 00 00 
0a2dd     00 00 00 00 
0a2e1     00 00 00 00 | 	byte	$00[16]
0a2e5     B4 30 00 01 
0a2e9     E0 60 00 01 
0a2ed     40 20 00 00 
0a2f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a2f5     00 00 00 00 
0a2f9     00 00 00 00 
0a2fd     00 00 00 00 
0a301     00 00 00 00 | 	byte	$00[16]
0a305     B4 30 00 01 
0a309     E0 60 00 00 
0a30d     00 00 00 00 
0a311     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a315     00 00 00 00 
0a319     00 00 00 00 
0a31d     00 00 00 00 
0a321     00 00 00 00 | 	byte	$00[16]
0a325     AA 50 00 01 
0a329     E0 60 00 00 
0a32d     00 00 00 00 
0a331     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a335     00 00 00 00 
0a339     00 00 00 00 
0a33d     00 00 00 00 
0a341     00 00 00 00 | 	byte	$00[16]
0a345     B4 40 00 00 
0a349     00 00 00 01 
0a34d     7D 20 00 00 
0a351     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a355     00 00 00 00 
0a359     00 00 00 00 
0a35d     00 00 00 00 
0a361     00 00 00 00 | 	byte	$00[16]
0a365     B4 40 00 01 
0a369     E0 60 00 01 
0a36d     53 20 00 00 
0a371     00 00 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a375     00 00 00 00 
0a379     00 00 00 00 
0a37d     00 00 00 00 
0a381     00 00 00 00 | 	byte	$00[16]
0a385     B4 30 00 00 
0a389     F0 60 00 01 
0a38d     40 20 00 00 
0a391     00 00 00 00 | 	byte	$b4, $30, $00, $00, $f0, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a395     00 00 00 00 
0a399     00 00 00 00 
0a39d     00 00 00 00 
0a3a1     00 00 00 00 | 	byte	$00[16]
0a3a5     AA 50 00 01 
0a3a9     E0 60 00 01 
0a3ad     53 20 00 00 
0a3b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a3b5     00 00 00 00 
0a3b9     00 00 00 00 
0a3bd     00 00 00 00 
0a3c1     00 00 00 00 | 	byte	$00[16]
0a3c5     B4 40 00 00 
0a3c9     F0 60 00 01 
0a3cd     7D 20 00 00 
0a3d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a3d5     00 00 00 00 
0a3d9     00 00 00 00 
0a3dd     00 00 00 00 
0a3e1     00 00 00 00 | 	byte	$00[16]
0a3e5     B4 30 00 01 
0a3e9     E0 60 00 01 
0a3ed     40 20 00 00 
0a3f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $01, $40, $20, $00, $00, $00, $00, $00, $00
0a3f5     00 00 00 00 
0a3f9     00 00 00 00 
0a3fd     00 00 00 00 
0a401     00 00 00 00 | 	byte	$00[16]
0a405     B4 30 00 01 
0a409     E0 60 00 00 
0a40d     00 00 00 00 
0a411     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a415     00 00 00 00 
0a419     00 00 00 00 
0a41d     00 00 00 00 
0a421     00 00 00 00 | 	byte	$00[16]
0a425     AA 50 00 01 
0a429     E0 60 00 00 
0a42d     00 00 00 00 
0a431     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a435     00 00 00 00 
0a439     00 00 00 00 
0a43d     00 00 00 00 
0a441     00 00 00 00 | 	byte	$00[16]
0a445     B4 40 00 00 
0a449     00 00 00 00 
0a44d     00 00 00 00 
0a451     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a455     00 00 00 00 
0a459     00 00 00 00 
0a45d     00 00 00 00 
0a461     00 00 00 00 | 	byte	$00[16]
0a465     B4 40 00 01 
0a469     E0 60 00 00 
0a46d     00 00 00 00 
0a471     00 00 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a475     00 00 00 00 
0a479     00 00 00 00 
0a47d     00 00 00 00 
0a481     00 00 00 00 | 	byte	$00[16]
0a485     B4 30 00 01 
0a489     E0 60 00 01 
0a48d     53 20 00 00 
0a491     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a495     00 00 00 00 
0a499     00 00 00 00 
0a49d     00 00 00 00 
0a4a1     00 00 00 00 | 	byte	$00[16]
0a4a5     AA 50 00 01 
0a4a9     E0 60 00 01 
0a4ad     7D 20 00 00 
0a4b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0a4b5     00 00 00 00 
0a4b9     00 00 00 00 
0a4bd     00 00 00 00 
0a4c1     00 00 00 00 | 	byte	$00[16]
0a4c5     B4 40 00 00 
0a4c9     F0 60 00 00 
0a4cd     00 00 00 00 
0a4d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4d5     00 00 00 00 
0a4d9     00 00 00 00 
0a4dd     00 00 00 00 
0a4e1     00 00 00 00 | 	byte	$00[16]
0a4e5     B4 30 00 01 
0a4e9     E0 60 00 00 
0a4ed     00 00 00 00 
0a4f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a4f5     00 00 00 00 
0a4f9     00 00 00 00 
0a4fd     00 00 00 00 
0a501     00 00 00 00 | 	byte	$00[16]
0a505     B4 30 00 01 
0a509     AC 60 00 01 
0a50d     AC 20 00 00 
0a511     D6 70 00 00 | 	byte	$b4, $30, $00, $01, $ac, $60, $00, $01, $ac, $20, $00, $00, $d6, $70, $00, $00
0a515     00 00 00 00 
0a519     00 00 00 00 
0a51d     00 00 00 00 
0a521     00 00 00 00 | 	byte	$00[16]
0a525     AA 50 00 01 
0a529     AC 60 00 00 
0a52d     00 00 00 00 
0a531     00 00 00 00 | 	byte	$aa, $50, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a535     00 00 00 00 
0a539     00 00 00 00 
0a53d     00 00 00 00 
0a541     00 00 00 00 | 	byte	$00[16]
0a545     B4 40 00 00 
0a549     00 00 00 00 
0a54d     00 00 00 00 
0a551     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a555     00 00 00 00 
0a559     00 00 00 00 
0a55d     00 00 00 00 
0a561     00 00 00 00 | 	byte	$00[16]
0a565     B4 40 00 01 
0a569     AC 60 00 00 
0a56d     00 00 00 00 
0a571     00 00 00 00 | 	byte	$b4, $40, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a575     00 00 00 00 
0a579     00 00 00 00 
0a57d     00 00 00 00 
0a581     00 00 00 00 | 	byte	$00[16]
0a585     B4 30 00 00 
0a589     D6 60 00 00 
0a58d     00 00 00 00 
0a591     00 00 00 00 | 	byte	$b4, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a595     00 00 00 00 
0a599     00 00 00 00 
0a59d     00 00 00 00 
0a5a1     00 00 00 00 | 	byte	$00[16]
0a5a5     AA 50 00 01 
0a5a9     AC 60 00 00 
0a5ad     00 00 00 00 
0a5b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5b5     00 00 00 00 
0a5b9     00 00 00 00 
0a5bd     00 00 00 00 
0a5c1     00 00 00 00 | 	byte	$00[16]
0a5c5     B4 40 00 00 
0a5c9     D6 60 00 00 
0a5cd     00 00 00 00 
0a5d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5d5     00 00 00 00 
0a5d9     00 00 00 00 
0a5dd     00 00 00 00 
0a5e1     00 00 00 00 | 	byte	$00[16]
0a5e5     B4 30 00 01 
0a5e9     AC 60 00 00 
0a5ed     00 00 00 00 
0a5f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a5f5     00 00 00 00 
0a5f9     00 00 00 00 
0a5fd     00 00 00 00 
0a601     00 00 00 00 | 	byte	$00[16]
0a605     B4 30 00 01 
0a609     AC 60 00 01 
0a60d     E0 20 00 00 
0a611     00 00 00 00 | 	byte	$b4, $30, $00, $01, $ac, $60, $00, $01, $e0, $20, $00, $00, $00, $00, $00, $00
0a615     00 00 00 00 
0a619     00 00 00 00 
0a61d     00 00 00 00 
0a621     00 00 00 00 | 	byte	$00[16]
0a625     AA 50 00 01 
0a629     AC 60 00 00 
0a62d     00 00 00 00 
0a631     00 00 00 00 | 	byte	$aa, $50, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a635     00 00 00 00 
0a639     00 00 00 00 
0a63d     00 00 00 00 
0a641     00 00 00 00 | 	byte	$00[16]
0a645     B4 4F 04 00 
0a649     00 00 00 00 
0a64d     00 00 00 00 
0a651     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a655     00 00 00 00 
0a659     00 00 00 00 
0a65d     00 00 00 00 
0a661     00 00 00 00 | 	byte	$00[16]
0a665     B4 40 00 01 
0a669     AC 60 00 01 
0a66d     AC 20 00 00 
0a671     00 00 00 00 | 	byte	$b4, $40, $00, $01, $ac, $60, $00, $01, $ac, $20, $00, $00, $00, $00, $00, $00
0a675     00 00 00 00 
0a679     00 00 00 00 
0a67d     00 00 00 00 
0a681     00 00 00 00 | 	byte	$00[16]
0a685     B4 30 00 00 
0a689     D6 60 00 00 
0a68d     00 00 00 00 
0a691     00 00 00 00 | 	byte	$b4, $30, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a695     00 00 00 00 
0a699     00 00 00 00 
0a69d     00 00 00 00 
0a6a1     00 00 00 00 | 	byte	$00[16]
0a6a5     AA 50 00 01 
0a6a9     AC 60 00 00 
0a6ad     00 00 00 00 
0a6b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6b5     00 00 00 00 
0a6b9     00 00 00 00 
0a6bd     00 00 00 00 
0a6c1     00 00 00 00 | 	byte	$00[16]
0a6c5     B4 40 00 00 
0a6c9     D6 60 00 01 
0a6cd     E0 20 00 00 
0a6d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $01, $e0, $20, $00, $00, $00, $00, $00, $00
0a6d5     00 00 00 00 
0a6d9     00 00 00 00 
0a6dd     00 00 00 00 
0a6e1     00 00 00 00 | 	byte	$00[16]
0a6e5     B4 30 00 01 
0a6e9     AC 60 00 00 
0a6ed     00 00 00 00 
0a6f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a6f5     00 00 00 00 
0a6f9     00 00 00 00 
0a6fd     00 00 00 00 
0a701     00 00 00 00 | 	byte	$00[16]
0a705     B4 30 00 01 
0a709     FC 60 00 01 
0a70d     FC 20 00 00 
0a711     FE 70 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $fc, $20, $00, $00, $fe, $70, $00, $00
0a715     00 00 00 00 
0a719     00 00 00 00 
0a71d     00 00 00 00 
0a721     00 00 00 00 | 	byte	$00[16]
0a725     AA 50 00 01 
0a729     FC 60 00 00 
0a72d     00 00 00 00 
0a731     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a735     00 00 00 00 
0a739     00 00 00 00 
0a73d     00 00 00 00 
0a741     00 00 00 00 | 	byte	$00[16]
0a745     B4 40 00 00 
0a749     00 00 00 00 
0a74d     00 00 00 00 
0a751     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a755     00 00 00 00 
0a759     00 00 00 00 
0a75d     00 00 00 00 
0a761     00 00 00 00 | 	byte	$00[16]
0a765     B4 40 00 01 
0a769     FC 60 00 00 
0a76d     00 00 00 00 
0a771     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a775     00 00 00 00 
0a779     00 00 00 00 
0a77d     00 00 00 00 
0a781     00 00 00 00 | 	byte	$00[16]
0a785     B4 30 00 00 
0a789     FE 60 00 00 
0a78d     00 00 00 00 
0a791     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a795     00 00 00 00 
0a799     00 00 00 00 
0a79d     00 00 00 00 
0a7a1     00 00 00 00 | 	byte	$00[16]
0a7a5     AA 50 00 01 
0a7a9     FC 60 00 00 
0a7ad     00 00 00 00 
0a7b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7b5     00 00 00 00 
0a7b9     00 00 00 00 
0a7bd     00 00 00 00 
0a7c1     00 00 00 00 | 	byte	$00[16]
0a7c5     B4 40 00 00 
0a7c9     FE 60 00 00 
0a7cd     00 00 00 00 
0a7d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7d5     00 00 00 00 
0a7d9     00 00 00 00 
0a7dd     00 00 00 00 
0a7e1     00 00 00 00 | 	byte	$00[16]
0a7e5     B4 30 00 01 
0a7e9     FC 60 00 00 
0a7ed     00 00 00 00 
0a7f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a7f5     00 00 00 00 
0a7f9     00 00 00 00 
0a7fd     00 00 00 00 
0a801     00 00 00 00 | 	byte	$00[16]
0a805     B4 30 00 01 
0a809     FC 60 00 01 
0a80d     94 20 00 00 
0a811     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $94, $20, $00, $00, $00, $00, $00, $00
0a815     00 00 00 00 
0a819     00 00 00 00 
0a81d     00 00 00 00 
0a821     00 00 00 00 | 	byte	$00[16]
0a825     AA 50 00 01 
0a829     FC 60 00 00 
0a82d     00 00 00 00 
0a831     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a835     00 00 00 00 
0a839     00 00 00 00 
0a83d     00 00 00 00 
0a841     00 00 00 00 | 	byte	$00[16]
0a845     B4 40 00 00 
0a849     00 00 00 00 
0a84d     00 00 00 00 
0a851     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a855     00 00 00 00 
0a859     00 00 00 00 
0a85d     00 00 00 00 
0a861     00 00 00 00 | 	byte	$00[16]
0a865     B4 40 00 01 
0a869     FC 60 00 00 
0a86d     00 00 00 00 
0a871     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a875     00 00 00 00 
0a879     00 00 00 00 
0a87d     00 00 00 00 
0a881     00 00 00 00 | 	byte	$00[16]
0a885     B4 30 00 00 
0a889     FE 60 00 00 
0a88d     00 00 00 00 
0a891     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a895     00 00 00 00 
0a899     00 00 00 00 
0a89d     00 00 00 00 
0a8a1     00 00 00 00 | 	byte	$00[16]
0a8a5     AA 50 00 01 
0a8a9     FC 60 00 00 
0a8ad     00 00 00 00 
0a8b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8b5     00 00 00 00 
0a8b9     00 00 00 00 
0a8bd     00 00 00 00 
0a8c1     00 00 00 00 | 	byte	$00[16]
0a8c5     B4 40 00 00 
0a8c9     FE 60 00 00 
0a8cd     00 00 00 00 
0a8d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8d5     00 00 00 00 
0a8d9     00 00 00 00 
0a8dd     00 00 00 00 
0a8e1     00 00 00 00 | 	byte	$00[16]
0a8e5     B4 30 00 01 
0a8e9     FC 60 00 00 
0a8ed     00 00 00 00 
0a8f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a8f5     00 00 00 00 
0a8f9     00 00 00 00 
0a8fd     00 00 00 00 
0a901     00 00 00 00 | 	byte	$00[16]
0a905     B4 30 00 01 
0a909     FC 60 00 01 
0a90d     53 20 00 00 
0a911     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $53, $20, $00, $00, $00, $00, $00, $00
0a915     00 00 00 00 
0a919     00 00 00 00 
0a91d     00 00 00 00 
0a921     00 00 00 00 | 	byte	$00[16]
0a925     AA 50 00 01 
0a929     FC 60 00 00 
0a92d     00 00 00 00 
0a931     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a935     00 00 00 00 
0a939     00 00 00 00 
0a93d     00 00 00 00 
0a941     00 00 00 00 | 	byte	$00[16]
0a945     B4 40 00 00 
0a949     00 00 00 00 
0a94d     00 00 00 00 
0a951     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a955     00 00 00 00 
0a959     00 00 00 00 
0a95d     00 00 00 00 
0a961     00 00 00 00 | 	byte	$00[16]
0a965     B4 40 00 01 
0a969     FC 60 00 00 
0a96d     00 00 00 00 
0a971     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a975     00 00 00 00 
0a979     00 00 00 00 
0a97d     00 00 00 00 
0a981     00 00 00 00 | 	byte	$00[16]
0a985     B4 30 00 00 
0a989     FE 60 00 00 
0a98d     00 00 00 00 
0a991     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a995     00 00 00 00 
0a999     00 00 00 00 
0a99d     00 00 00 00 
0a9a1     00 00 00 00 | 	byte	$00[16]
0a9a5     AA 50 00 01 
0a9a9     FC 60 00 00 
0a9ad     00 00 00 00 
0a9b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9b5     00 00 00 00 
0a9b9     00 00 00 00 
0a9bd     00 00 00 00 
0a9c1     00 00 00 00 | 	byte	$00[16]
0a9c5     B4 40 00 00 
0a9c9     FE 60 00 00 
0a9cd     00 00 00 00 
0a9d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9d5     00 00 00 00 
0a9d9     00 00 00 00 
0a9dd     00 00 00 00 
0a9e1     00 00 00 00 | 	byte	$00[16]
0a9e5     B4 30 00 01 
0a9e9     FC 60 00 00 
0a9ed     00 00 00 00 
0a9f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a9f5     00 00 00 00 
0a9f9     00 00 00 00 
0a9fd     00 00 00 00 
0aa01     00 00 00 00 | 	byte	$00[16]
0aa05     B4 30 00 01 
0aa09     FC 60 00 01 
0aa0d     1D 20 00 00 
0aa11     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $01, $1d, $20, $00, $00, $00, $00, $00, $00
0aa15     00 00 00 00 
0aa19     00 00 00 00 
0aa1d     00 00 00 00 
0aa21     00 00 00 00 | 	byte	$00[16]
0aa25     AA 50 00 01 
0aa29     FC 60 00 00 
0aa2d     00 00 00 00 
0aa31     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa35     00 00 00 00 
0aa39     00 00 00 00 
0aa3d     00 00 00 00 
0aa41     00 00 00 00 | 	byte	$00[16]
0aa45     B4 4F 04 00 
0aa49     00 00 00 00 
0aa4d     00 00 00 00 
0aa51     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa55     00 00 00 00 
0aa59     00 00 00 00 
0aa5d     00 00 00 00 
0aa61     00 00 00 00 | 	byte	$00[16]
0aa65     B4 40 00 01 
0aa69     FC 60 00 00 
0aa6d     00 00 00 00 
0aa71     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa75     00 00 00 00 
0aa79     00 00 00 00 
0aa7d     00 00 00 00 
0aa81     00 00 00 00 | 	byte	$00[16]
0aa85     B4 30 00 00 
0aa89     FE 60 00 00 
0aa8d     00 00 00 00 
0aa91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aa95     00 00 00 00 
0aa99     00 00 00 00 
0aa9d     00 00 00 00 
0aaa1     00 00 00 00 | 	byte	$00[16]
0aaa5     AA 50 00 01 
0aaa9     FC 60 00 00 
0aaad     00 00 00 00 
0aab1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aab5     00 00 00 00 
0aab9     00 00 00 00 
0aabd     00 00 00 00 
0aac1     00 00 00 00 | 	byte	$00[16]
0aac5     B4 40 00 00 
0aac9     FE 60 00 00 
0aacd     00 00 00 00 
0aad1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aad5     00 00 00 00 
0aad9     00 00 00 00 
0aadd     00 00 00 00 
0aae1     00 00 00 00 | 	byte	$00[16]
0aae5     B4 30 00 01 
0aae9     FC 60 00 00 
0aaed     00 00 00 00 
0aaf1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aaf5     00 00 00 00 
0aaf9     00 00 00 00 
0aafd     00 00 00 00 
0ab01     00 00 00 00 | 	byte	$00[16]
0ab05     B4 30 00 01 
0ab09     FC 60 00 00 
0ab0d     FE 20 00 00 
0ab11     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
0ab15     00 00 00 00 
0ab19     00 00 00 00 
0ab1d     00 00 00 00 
0ab21     00 00 00 00 | 	byte	$00[16]
0ab25     AA 50 00 01 
0ab29     FC 60 00 00 
0ab2d     00 00 00 00 
0ab31     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab35     00 00 00 00 
0ab39     00 00 00 00 
0ab3d     00 00 00 00 
0ab41     00 00 00 00 | 	byte	$00[16]
0ab45     B4 40 00 00 
0ab49     00 00 00 00 
0ab4d     00 00 00 00 
0ab51     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab55     00 00 00 00 
0ab59     00 00 00 00 
0ab5d     00 00 00 00 
0ab61     00 00 00 00 | 	byte	$00[16]
0ab65     B4 40 00 01 
0ab69     FC 60 00 00 
0ab6d     00 00 00 00 
0ab71     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab75     00 00 00 00 
0ab79     00 00 00 00 
0ab7d     00 00 00 00 
0ab81     00 00 00 00 | 	byte	$00[16]
0ab85     B4 30 00 00 
0ab89     FE 60 00 00 
0ab8d     00 00 00 00 
0ab91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ab95     00 00 00 00 
0ab99     00 00 00 00 
0ab9d     00 00 00 00 
0aba1     00 00 00 00 | 	byte	$00[16]
0aba5     AA 50 00 01 
0aba9     FC 60 00 00 
0abad     00 00 00 00 
0abb1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abb5     00 00 00 00 
0abb9     00 00 00 00 
0abbd     00 00 00 00 
0abc1     00 00 00 00 | 	byte	$00[16]
0abc5     B4 40 00 00 
0abc9     FE 60 00 00 
0abcd     00 00 00 00 
0abd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abd5     00 00 00 00 
0abd9     00 00 00 00 
0abdd     00 00 00 00 
0abe1     00 00 00 00 | 	byte	$00[16]
0abe5     B4 30 00 01 
0abe9     FC 60 00 00 
0abed     00 00 00 00 
0abf1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0abf5     00 00 00 00 
0abf9     00 00 00 00 
0abfd     00 00 00 00 
0ac01     00 00 00 00 | 	byte	$00[16]
0ac05     B4 30 00 01 
0ac09     FC 60 00 00 
0ac0d     D6 10 00 00 
0ac11     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $d6, $10, $00, $00, $00, $00, $00, $00
0ac15     00 00 00 00 
0ac19     00 00 00 00 | 	byte	$00[8]
0ac1d     D6 10 00 00 
0ac21     00 00 00 00 
0ac25     AA 50 00 01 
0ac29     FC 60 00 00 | 	byte	$d6, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $00
0ac2d     E2 10 00 00 
0ac31     00 00 00 00 
0ac35     00 00 00 00 
0ac39     00 00 00 00 | 	byte	$e2, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac3d     E2 10 00 00 
0ac41     00 00 00 00 
0ac45     B4 40 00 00 
0ac49     00 00 00 00 | 	byte	$e2, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $00, $00, $00, $00
0ac4d     FE 10 00 00 
0ac51     00 00 00 00 
0ac55     00 00 00 00 
0ac59     00 00 00 00 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ac5d     FE 10 00 00 
0ac61     00 00 00 00 
0ac65     B4 40 00 01 
0ac69     FC 60 00 01 | 	byte	$fe, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $01, $fc, $60, $00, $01
0ac6d     1D 10 00 00 
0ac71     00 00 00 00 
0ac75     00 00 00 00 
0ac79     00 00 00 01 | 	byte	$1d, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ac7d     1D 10 00 00 
0ac81     00 00 00 00 
0ac85     B4 30 00 00 
0ac89     FE 60 00 01 | 	byte	$1d, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $00, $fe, $60, $00, $01
0ac8d     40 10 00 00 
0ac91     00 00 00 00 
0ac95     00 00 00 00 
0ac99     00 00 00 01 | 	byte	$40, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ac9d     40 10 00 00 
0aca1     00 00 00 00 
0aca5     AA 50 00 01 
0aca9     FC 60 00 01 | 	byte	$40, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $01
0acad     53 10 00 00 
0acb1     00 00 00 00 
0acb5     00 00 00 00 
0acb9     00 00 00 01 | 	byte	$53, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0acbd     53 10 00 00 
0acc1     00 00 00 00 
0acc5     B4 40 00 00 
0acc9     FE 60 00 01 | 	byte	$53, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $fe, $60, $00, $01
0accd     53 10 00 00 
0acd1     00 00 00 00 
0acd5     00 00 00 00 
0acd9     00 00 00 01 | 	byte	$53, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0acdd     7D 10 00 00 
0ace1     00 00 00 00 
0ace5     B4 30 00 01 
0ace9     FC 60 00 01 | 	byte	$7d, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $01, $fc, $60, $00, $01
0aced     7D 10 00 00 
0acf1     00 00 00 00 
0acf5     00 00 00 00 
0acf9     00 00 00 01 | 	byte	$7d, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0acfd     AC 10 00 00 
0ad01     00 00 00 00 
0ad05     B4 30 00 01 
0ad09     FC 60 00 01 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $01, $fc, $60, $00, $01
0ad0d     AC 10 00 00 
0ad11     00 00 00 00 
0ad15     00 00 00 00 
0ad19     00 00 00 01 | 	byte	$ac, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ad1d     C5 10 00 00 
0ad21     00 00 00 00 
0ad25     AA 50 00 01 
0ad29     FC 60 00 01 | 	byte	$c5, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $01
0ad2d     C5 10 00 00 
0ad31     00 00 00 00 
0ad35     00 00 00 00 
0ad39     00 00 00 01 | 	byte	$c5, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $01
0ad3d     FC 10 00 00 
0ad41     00 00 00 00 
0ad45     B4 40 00 00 
0ad49     00 00 00 01 | 	byte	$fc, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $00, $00, $00, $01
0ad4d     FC 10 00 00 
0ad51     00 00 00 00 
0ad55     00 00 00 00 
0ad59     00 00 00 02 | 	byte	$fc, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0ad5d     3A 10 00 00 
0ad61     00 00 00 00 
0ad65     B4 40 00 01 
0ad69     FC 60 00 02 | 	byte	$3a, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $01, $fc, $60, $00, $02
0ad6d     3A 10 00 00 
0ad71     00 00 00 00 
0ad75     00 00 00 00 
0ad79     00 00 00 02 | 	byte	$3a, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0ad7d     80 10 00 00 
0ad81     00 00 00 00 
0ad85     B4 30 00 00 
0ad89     FE 60 00 02 | 	byte	$80, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $00, $fe, $60, $00, $02
0ad8d     80 10 00 00 
0ad91     00 00 00 00 
0ad95     00 00 00 00 
0ad99     00 00 00 02 | 	byte	$80, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0ad9d     A6 10 00 00 
0ada1     00 00 00 00 
0ada5     AA 50 00 01 
0ada9     FC 60 00 02 | 	byte	$a6, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $02
0adad     A6 10 00 00 
0adb1     00 00 00 00 
0adb5     00 00 00 00 
0adb9     00 00 00 02 | 	byte	$a6, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0adbd     FA 10 00 00 
0adc1     00 00 00 00 
0adc5     B4 40 00 00 
0adc9     FE 60 00 02 | 	byte	$fa, $10, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $fe, $60, $00, $02
0adcd     FA 10 00 00 
0add1     00 00 00 00 
0add5     00 00 00 00 
0add9     00 00 00 02 | 	byte	$fa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02
0addd     FA 10 00 00 
0ade1     00 00 00 00 
0ade5     B4 30 00 01 
0ade9     FC 60 00 02 | 	byte	$fa, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $01, $fc, $60, $00, $02
0aded     FA 10 00 00 
0adf1     00 00 00 00 
0adf5     00 00 00 00 
0adf9     00 00 00 03 | 	byte	$fa, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03
0adfd     58 10 00 00 
0ae01     00 00 00 00 
0ae05     B4 30 00 01 
0ae09     FC 60 00 03 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $b4, $30, $00, $01, $fc, $60, $00, $03
0ae0d     58 10 00 00 
0ae11     00 00 00 00 
0ae15     00 00 00 00 
0ae19     00 00 00 03 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03
0ae1d     58 10 00 00 
0ae21     00 00 00 00 
0ae25     AA 50 00 01 
0ae29     FC 60 00 03 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $aa, $50, $00, $01, $fc, $60, $00, $03
0ae2d     58 10 00 00 
0ae31     00 00 00 00 
0ae35     00 00 00 00 
0ae39     00 00 00 03 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03
0ae3d     58 10 00 00 
0ae41     00 00 00 00 
0ae45     B4 4F 04 00 
0ae49     00 00 00 00 | 	byte	$58, $10, $00, $00, $00, $00, $00, $00, $b4, $4f, $04, $00, $00, $00, $00, $00
0ae4d     00 00 00 00 
0ae51     00 00 00 00 
0ae55     00 00 00 00 
0ae59     00 00 00 00 
0ae5d     00 00 00 00 
0ae61     00 00 00 00 | 	byte	$00[24]
0ae65     B4 40 00 01 
0ae69     FC 60 00 00 
0ae6d     00 00 00 00 
0ae71     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae75     00 00 00 00 
0ae79     00 00 00 00 
0ae7d     00 00 00 00 
0ae81     00 00 00 00 | 	byte	$00[16]
0ae85     B4 30 00 00 
0ae89     FE 60 00 00 
0ae8d     00 00 00 00 
0ae91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae95     00 00 00 00 
0ae99     00 00 00 00 
0ae9d     00 00 00 00 
0aea1     00 00 00 00 | 	byte	$00[16]
0aea5     AA 50 00 01 
0aea9     FC 60 00 00 
0aead     00 00 00 00 
0aeb1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aeb5     00 00 00 00 
0aeb9     00 00 00 00 
0aebd     00 00 00 00 
0aec1     00 00 00 00 | 	byte	$00[16]
0aec5     B4 40 00 00 
0aec9     FE 60 00 00 
0aecd     00 00 00 00 
0aed1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aed5     00 00 00 00 
0aed9     00 00 00 00 
0aedd     00 00 00 00 
0aee1     00 00 00 00 | 	byte	$00[16]
0aee5     B4 30 00 01 
0aee9     FC 60 00 00 
0aeed     00 00 00 00 
0aef1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aef5     00 00 00 00 
0aef9     00 00 00 00 
0aefd     00 00 00 00 
0af01     00 00 00 00 | 	byte	$00[16]
0af05     B4 30 00 01 
0af09     7D 60 00 01 
0af0d     7D 20 00 01 
0af11     7D 70 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $7d, $20, $00, $01, $7d, $70, $00, $00
0af15     00 00 00 00 
0af19     00 00 00 00 
0af1d     00 00 00 00 
0af21     00 00 00 00 | 	byte	$00[16]
0af25     AA 50 00 01 
0af29     7D 60 00 00 
0af2d     00 00 00 00 
0af31     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af35     00 00 00 00 
0af39     00          | 	byte	$00[5]
0af3a     0D 00 00 00 
0af3e     00 00 00 00 
0af42     00 00 00 B4 
0af46     40 00 00 00 | 	byte	$0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $00
0af4a     00 00 00 00 
0af4e     00 00 00 00 
0af52     00 00 00 00 
0af56     00 00 00 00 
0af5a     00 00 00 00 
0af5e     00 00 00 00 
0af62     00 00 00    | 	byte	$00[27]
0af65     B4 40 00 01 
0af69     FC 60 00 00 
0af6d     00 00 00 00 
0af71     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af75     00 00 00 00 
0af79     00 00 00 00 
0af7d     00 00 00 00 
0af81     00 00 00 00 | 	byte	$00[16]
0af85     B4 30 00 00 
0af89     FE 60 00 00 
0af8d     00 00 00 00 
0af91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0af95     00 00 00 00 
0af99     00 00 00 00 
0af9d     00 00 00 00 
0afa1     00 00 00 00 | 	byte	$00[16]
0afa5     AA 50 00 01 
0afa9     FC 60 00 00 
0afad     00 00 00 00 
0afb1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afb5     00 00 00 00 
0afb9     00 00 00 00 
0afbd     00 00 00 00 
0afc1     00 00 00 00 | 	byte	$00[16]
0afc5     B4 40 00 00 
0afc9     FE 60 00 00 
0afcd     00 00 00 00 
0afd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0afd5     00 00 00 00 
0afd9     00 00 00 00 
0afdd     00 00 00 00 
0afe1     00 00 00 00 | 	byte	$00[16]
0afe5     B4 30 00 01 
0afe9     FC 60 00 00 
0afed     00 00 00 00 
0aff1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aff5     00 00 00 00 
0aff9     00 00 00 00 
0affd     00 00 00 00 
0b001     00 00 00 00 | 	byte	$00[16]
0b005     B4 30 00 01 
0b009     7D 60 00 01 
0b00d     7D 20 00 00 
0b011     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $7d, $20, $00, $00, $00, $00, $00, $00
0b015     00 00 00 00 
0b019     00 00 00 00 
0b01d     00 00 00 00 
0b021     00 00 00 00 | 	byte	$00[16]
0b025     AA 50 00 01 
0b029     7D 60 00 00 
0b02d     00 00 00 00 
0b031     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b035     00 00 00 00 
0b039     00          | 	byte	$00[5]
0b03a     0D 00 00 00 
0b03e     00 00 00 00 
0b042     00 00 00 B4 
0b046     40 00 00 00 | 	byte	$0d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $b4, $40, $00, $00, $00
0b04a     00 00 00 00 
0b04e     00 00 00 00 
0b052     00 00 00 00 
0b056     00 00 00 00 
0b05a     00 00 00 00 
0b05e     00 00 00 00 
0b062     00 00 00    | 	byte	$00[27]
0b065     B4 40 00 01 
0b069     FC 60 00 00 
0b06d     00 00 00 00 
0b071     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b075     00 00 00 00 
0b079     00 00 00 00 
0b07d     00 00 00 00 
0b081     00 00 00 00 | 	byte	$00[16]
0b085     B4 30 00 00 
0b089     FE 60 00 00 
0b08d     00 00 00 00 
0b091     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b095     00 00 00 00 
0b099     00 00 00 00 
0b09d     00 00 00 00 
0b0a1     00 00 00 00 | 	byte	$00[16]
0b0a5     AA 50 00 01 
0b0a9     FC 60 00 00 
0b0ad     00 00 00 00 
0b0b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0b5     00 00 00 00 
0b0b9     00 00 00 00 
0b0bd     00 00 00 00 
0b0c1     00 00 00 00 | 	byte	$00[16]
0b0c5     B4 40 00 00 
0b0c9     FE 60 00 00 
0b0cd     00 00 00 00 
0b0d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0d5     00 00 00 00 
0b0d9     00 00 00 00 
0b0dd     00 00 00 00 
0b0e1     00 00 00 00 | 	byte	$00[16]
0b0e5     B4 30 00 01 
0b0e9     FC 60 00 00 
0b0ed     00 00 00 00 
0b0f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0f5     00 00 00 00 
0b0f9     00 00 00 00 
0b0fd     00 00 00 00 
0b101     00 00 00 00 | 	byte	$00[16]
0b105     B4 30 00 01 
0b109     FC 60 00 00 
0b10d     00 00 00 00 
0b111     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b115     00 00 00 00 
0b119     00 00 00 00 
0b11d     00 00 00 00 
0b121     00 00 00 00 | 	byte	$00[16]
0b125     AA 50 00 01 
0b129     FC 60 00 00 
0b12d     00 00 00 00 
0b131     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b135     00 00 00 00 
0b139     00 00 00 00 
0b13d     00 00 00 00 
0b141     00 00 00 00 | 	byte	$00[16]
0b145     B4 40 00 00 
0b149     00 00 00 00 
0b14d     00 00 00 00 
0b151     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b155     00 00 00 00 
0b159     00 00 00 00 
0b15d     00 00 00 00 
0b161     00 00 00 00 | 	byte	$00[16]
0b165     B4 40 00 01 
0b169     FC 60 00 00 
0b16d     00 00 00 00 
0b171     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b175     00 00 00 00 
0b179     00 00 00 00 
0b17d     00 00 00 00 
0b181     00 00 00 00 | 	byte	$00[16]
0b185     B4 30 00 00 
0b189     FE 60 00 00 
0b18d     00 00 00 00 
0b191     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b195     00 00 00 00 
0b199     00 00 00 00 
0b19d     00 00 00 00 
0b1a1     00 00 00 00 | 	byte	$00[16]
0b1a5     AA 50 00 01 
0b1a9     FC 60 00 00 
0b1ad     00 00 00 00 
0b1b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1b5     00 00 00 00 
0b1b9     00 00 00 00 
0b1bd     00 00 00 00 
0b1c1     00 00 00 00 | 	byte	$00[16]
0b1c5     B4 40 00 00 
0b1c9     FE 60 00 00 
0b1cd     00 00 00 00 
0b1d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1d5     00 00 00 00 
0b1d9     00 00 00 00 
0b1dd     00 00 00 00 
0b1e1     00 00 00 00 | 	byte	$00[16]
0b1e5     B4 30 00 01 
0b1e9     FC 60 00 00 
0b1ed     00 00 00 00 
0b1f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1f5     00 00 00 00 
0b1f9     00 00 00 00 
0b1fd     00 00 00 00 
0b201     00 00 00 00 | 	byte	$00[16]
0b205     B4 30 00 01 
0b209     FC 60 00 00 
0b20d     00 00 00 00 
0b211     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b215     00 00 00 00 
0b219     00 00 00 00 
0b21d     00 00 00 00 
0b221     00 00 00 00 | 	byte	$00[16]
0b225     AA 50 00 01 
0b229     FC 60 00 00 
0b22d     00 00 00 00 
0b231     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b235     00 00 00 00 
0b239     00 00 00 00 
0b23d     00 00 00 00 
0b241     00 00 00 00 | 	byte	$00[16]
0b245     B4 4F 04 00 
0b249     00 00 00 00 
0b24d     FE 20 00 00 
0b251     BE 20 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b255     00 00 00 00 
0b259     00 00 00 00 
0b25d     00 00 00 00 
0b261     00 00 00 00 | 	byte	$00[16]
0b265     B4 40 00 01 
0b269     7D 60 00 00 
0b26d     FE 20 00 00 
0b271     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b275     00 00 00 00 
0b279     00 00 00 00 
0b27d     00 00 00 00 
0b281     00 00 00 00 | 	byte	$00[16]
0b285     B4 30 00 00 
0b289     BE 60 00 00 
0b28d     FE 20 00 00 
0b291     BE 20 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b295     00 00 00 00 
0b299     00 00 00 00 
0b29d     00 00 00 00 
0b2a1     00 00 00 00 | 	byte	$00[16]
0b2a5     AA 50 00 01 
0b2a9     7D 60 00 00 
0b2ad     FE 20 00 00 
0b2b1     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b2b5     00 00 00 00 
0b2b9     00 00 00 00 
0b2bd     00 00 00 00 
0b2c1     00 00 00 00 | 	byte	$00[16]
0b2c5     B4 40 00 00 
0b2c9     BE 60 00 00 
0b2cd     00 00 00 00 
0b2d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2d5     00 00 00 00 
0b2d9     00 00 00 00 
0b2dd     00 00 00 00 
0b2e1     00 00 00 00 | 	byte	$00[16]
0b2e5     B4 30 00 01 
0b2e9     7D 60 00 00 
0b2ed     00 00 00 00 
0b2f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b2f5     00 00 00 00 
0b2f9     00 00 00 00 
0b2fd     00 00 00 00 
0b301     00 00 00 00 | 	byte	$00[16]
0b305     B4 30 00 01 
0b309     7D 60 00 00 
0b30d     FE 20 00 00 
0b311     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b315     00 00 00 00 
0b319     00 00 00 00 
0b31d     00 00 00 00 
0b321     00 00 00 00 | 	byte	$00[16]
0b325     AA 50 00 01 
0b329     7D 60 00 00 
0b32d     FE 20 00 00 
0b331     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b335     00 00 00 00 
0b339     00 00 00 00 
0b33d     00 00 00 00 
0b341     00 00 00 00 | 	byte	$00[16]
0b345     B4 40 00 00 
0b349     00 00 00 00 
0b34d     FE 20 00 00 
0b351     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b355     00 00 00 00 
0b359     00 00 00 00 
0b35d     00 00 00 00 
0b361     00 00 00 00 | 	byte	$00[16]
0b365     B4 40 00 01 
0b369     7D 60 00 00 
0b36d     FE 20 00 00 
0b371     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b375     00 00 00 00 
0b379     00 00 00 00 
0b37d     00 00 00 00 
0b381     00 00 00 00 | 	byte	$00[16]
0b385     B4 30 00 00 
0b389     BE 60 00 00 
0b38d     00 00 00 00 
0b391     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b395     00 00 00 00 
0b399     00 00 00 00 
0b39d     00 00 00 00 
0b3a1     00 00 00 00 | 	byte	$00[16]
0b3a5     AA 50 00 01 
0b3a9     7D 60 00 00 
0b3ad     FE 20 00 00 
0b3b1     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b3b5     00 00 00 00 
0b3b9     00 00 00 00 
0b3bd     00 00 00 00 
0b3c1     00 00 00 00 | 	byte	$00[16]
0b3c5     B4 40 00 00 
0b3c9     BE 60 00 00 
0b3cd     00 00 00 00 
0b3d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3d5     00 00 00 00 
0b3d9     00 00 00 00 
0b3dd     00 00 00 00 
0b3e1     00 00 00 00 | 	byte	$00[16]
0b3e5     B4 30 00 01 
0b3e9     7D 60 00 00 
0b3ed     00 00 00 00 
0b3f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b3f5     00 00 00 00 
0b3f9     00 00 00 00 
0b3fd     00 00 00 00 
0b401     00 00 00 00 | 	byte	$00[16]
0b405     B4 30 00 01 
0b409     7D 60 00 00 
0b40d     00 00 00 00 
0b411     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b415     00 00 00 00 
0b419     00 00 00 00 
0b41d     00 00 00 00 
0b421     00 00 00 00 | 	byte	$00[16]
0b425     AA 50 00 01 
0b429     7D 60 00 00 
0b42d     00 00 00 00 
0b431     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b435     00 00 00 00 
0b439     00 00 00 00 
0b43d     00 00 00 00 
0b441     00 00 00 00 | 	byte	$00[16]
0b445     B4 40 00 00 
0b449     00 00 00 00 
0b44d     FE 20 00 00 
0b451     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b455     00 00 00 00 
0b459     00 00 00 00 
0b45d     00 00 00 00 
0b461     00 00 00 00 | 	byte	$00[16]
0b465     B4 40 00 01 
0b469     7D 60 00 00 
0b46d     FE 20 00 00 
0b471     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b475     00 00 00 00 
0b479     00 00 00 00 
0b47d     00 00 00 00 
0b481     00 00 00 00 | 	byte	$00[16]
0b485     B4 30 00 00 
0b489     BE 60 00 00 
0b48d     FE 20 00 00 
0b491     BE 20 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b495     00 00 00 00 
0b499     00 00 00 00 
0b49d     00 00 00 00 
0b4a1     00 00 00 00 | 	byte	$00[16]
0b4a5     AA 50 00 01 
0b4a9     7D 60 00 00 
0b4ad     FE 20 00 00 
0b4b1     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b4b5     00 00 00 00 
0b4b9     00 00 00 00 
0b4bd     00 00 00 00 
0b4c1     00 00 00 00 | 	byte	$00[16]
0b4c5     B4 40 00 00 
0b4c9     BE 60 00 00 
0b4cd     00 00 00 00 
0b4d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4d5     00 00 00 00 
0b4d9     00 00 00 00 
0b4dd     00 00 00 00 
0b4e1     00 00 00 00 | 	byte	$00[16]
0b4e5     B4 30 00 01 
0b4e9     7D 60 00 00 
0b4ed     00 00 00 00 
0b4f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b4f5     00 00 00 00 
0b4f9     00 00 00 00 
0b4fd     00 00 00 00 
0b501     00 00 00 00 | 	byte	$00[16]
0b505     B4 30 00 01 
0b509     7D 60 00 00 
0b50d     FE 20 00 00 
0b511     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b515     00 00 00 00 
0b519     00 00 00 00 
0b51d     00 00 00 00 
0b521     00 00 00 00 | 	byte	$00[16]
0b525     AA 50 00 01 
0b529     7D 60 00 00 
0b52d     FE 20 00 00 
0b531     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b535     00 00 00 00 
0b539     00 00 00 00 
0b53d     00 00 00 00 
0b541     00 00 00 00 | 	byte	$00[16]
0b545     B4 40 00 00 
0b549     00 00 00 00 
0b54d     FE 20 00 00 
0b551     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b555     00 00 00 00 
0b559     00 00 00 00 
0b55d     00 00 00 00 
0b561     00 00 00 00 | 	byte	$00[16]
0b565     B4 40 00 01 
0b569     7D 60 00 00 
0b56d     FE 20 00 00 
0b571     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b575     00 00 00 00 
0b579     00 00 00 00 
0b57d     00 00 00 00 
0b581     00 00 00 00 | 	byte	$00[16]
0b585     B4 30 00 00 
0b589     BE 60 00 00 
0b58d     00 00 00 00 
0b591     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b595     00 00 00 00 
0b599     00 00 00 00 
0b59d     00 00 00 00 
0b5a1     00 00 00 00 | 	byte	$00[16]
0b5a5     AA 50 00 01 
0b5a9     7D 60 00 00 
0b5ad     FE 20 00 00 
0b5b1     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $be, $20, $00, $00
0b5b5     00 00 00 00 
0b5b9     00 00 00 00 
0b5bd     00 00 00 00 
0b5c1     00 00 00 00 | 	byte	$00[16]
0b5c5     B4 40 00 00 
0b5c9     BE 60 00 00 
0b5cd     00 00 00 00 
0b5d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b5d5     00 00 00 00 
0b5d9     00 00 00 00 
0b5dd     00 00 00 00 
0b5e1     00 00 00 00 | 	byte	$00[16]
0b5e5     B4 30 00 01 
0b5e9     7D 60 00 00 
0b5ed     FE 20 00 00 
0b5f1     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0b5f5     00 00 00 00 
0b5f9     00 00 00 00 
0b5fd     00 00 00 00 
0b601     00 00 00 00 | 	byte	$00[16]
0b605     B4 30 00 01 
0b609     FC 60 00 00 
0b60d     00 00 00 00 
0b611     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b615     00 00 00 00 
0b619     00 00 00 00 
0b61d     00 00 00 00 
0b621     00 00 00 00 | 	byte	$00[16]
0b625     AA 50 00 01 
0b629     FC 60 00 01 
0b62d     53 20 00 00 
0b631     FE 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $01, $53, $20, $00, $00, $fe, $20, $00, $00
0b635     00 00 00 00 
0b639     00 00 00 00 
0b63d     00 00 00 00 
0b641     00 00 00 00 | 	byte	$00[16]
0b645     B4 4F 04 00 
0b649     00 00 00 00 
0b64d     00 00 00 00 
0b651     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b655     00 00 00 00 
0b659     00 00 00 00 
0b65d     00 00 00 00 
0b661     00 00 00 00 | 	byte	$00[16]
0b665     B4 40 00 01 
0b669     FC 60 00 00 
0b66d     00 00 00 00 
0b671     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b675     00 00 00 00 
0b679     00 00 00 00 
0b67d     00 00 00 00 
0b681     00 00 00 00 | 	byte	$00[16]
0b685     B4 30 00 00 
0b689     FE 60 00 00 
0b68d     00 00 00 00 
0b691     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b695     00 00 00 00 
0b699     00 00 00 00 
0b69d     00 00 00 00 
0b6a1     00 00 00 00 | 	byte	$00[16]
0b6a5     AA 50 00 01 
0b6a9     FC 60 00 00 
0b6ad     00 00 00 00 
0b6b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6b5     00 00 00 00 
0b6b9     00 00 00 00 
0b6bd     00 00 00 00 
0b6c1     00 00 00 00 | 	byte	$00[16]
0b6c5     B4 40 00 00 
0b6c9     FE 60 00 00 
0b6cd     00 00 00 00 
0b6d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6d5     00 00 00 00 
0b6d9     00 00 00 00 
0b6dd     00 00 00 00 
0b6e1     00 00 00 00 | 	byte	$00[16]
0b6e5     B4 30 00 01 
0b6e9     FC 60 00 00 
0b6ed     00 00 00 00 
0b6f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b6f5     00 00 00 00 
0b6f9     00 00 00 00 
0b6fd     00 00 00 00 
0b701     00 00 00 00 | 	byte	$00[16]
0b705     B4 30 00 01 
0b709     FC 60 00 00 
0b70d     FE 20 00 00 
0b711     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $00, $00, $00, $00
0b715     00 00 00 00 
0b719     00 00 00 00 
0b71d     00 00 00 00 
0b721     00 00 00 00 | 	byte	$00[16]
0b725     AA 50 00 01 
0b729     FC 60 00 00 
0b72d     00 00 00 00 
0b731     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b735     00 00 00 00 
0b739     00 00 00 00 
0b73d     00 00 00 00 
0b741     00 00 00 00 | 	byte	$00[16]
0b745     B4 40 00 00 
0b749     00 00 00 00 
0b74d     00 00 00 00 
0b751     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b755     00 00 00 00 
0b759     00 00 00 00 
0b75d     00 00 00 00 
0b761     00 00 00 00 | 	byte	$00[16]
0b765     B4 40 00 01 
0b769     FC 60 00 00 
0b76d     00 00 00 00 
0b771     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b775     00 00 00 00 
0b779     00 00 00 00 
0b77d     00 00 00 00 
0b781     00 00 00 00 | 	byte	$00[16]
0b785     B4 30 00 00 
0b789     FE 60 00 00 
0b78d     00 00 00 00 
0b791     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b795     00 00 00 00 
0b799     00 00 00 00 
0b79d     00 00 00 00 
0b7a1     00 00 00 00 | 	byte	$00[16]
0b7a5     AA 50 00 01 
0b7a9     FC 60 00 00 
0b7ad     00 00 00 00 
0b7b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7b5     00 00 00 00 
0b7b9     00 00 00 00 
0b7bd     00 00 00 00 
0b7c1     00 00 00 00 | 	byte	$00[16]
0b7c5     B4 40 00 00 
0b7c9     FE 60 00 00 
0b7cd     00 00 00 00 
0b7d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7d5     00 00 00 00 
0b7d9     00 00 00 00 
0b7dd     00 00 00 00 
0b7e1     00 00 00 00 | 	byte	$00[16]
0b7e5     B4 30 00 01 
0b7e9     FC 60 00 00 
0b7ed     00 00 00 00 
0b7f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b7f5     00 00 00 00 
0b7f9     00 00 00 00 
0b7fd     00 00 00 00 
0b801     00 00 00 00 | 	byte	$00[16]
0b805     B4 30 00 01 
0b809     FC 60 00 00 
0b80d     CA 20 00 00 
0b811     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $ca, $20, $00, $00, $00, $00, $00, $00
0b815     00 00 00 00 
0b819     00 00 00 00 
0b81d     00 00 00 00 
0b821     00 00 00 00 | 	byte	$00[16]
0b825     AA 50 00 01 
0b829     FC 60 00 00 
0b82d     00 00 00 00 
0b831     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b835     00 00 00 00 
0b839     00 00 00 00 
0b83d     00 00 00 00 
0b841     00 00 00 00 | 	byte	$00[16]
0b845     B4 40 00 00 
0b849     00 00 00 00 
0b84d     00 00 00 00 
0b851     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b855     00 00 00 00 
0b859     00 00 00 00 
0b85d     00 00 00 00 
0b861     00 00 00 00 | 	byte	$00[16]
0b865     B4 40 00 01 
0b869     FC 60 00 00 
0b86d     00 00 00 00 
0b871     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b875     00 00 00 00 
0b879     00 00 00 00 
0b87d     00 00 00 00 
0b881     00 00 00 00 | 	byte	$00[16]
0b885     B4 30 00 00 
0b889     FE 60 00 00 
0b88d     00 00 00 00 
0b891     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b895     00 00 00 00 
0b899     00 00 00 00 
0b89d     00 00 00 00 
0b8a1     00 00 00 00 | 	byte	$00[16]
0b8a5     AA 50 00 01 
0b8a9     FC 60 00 00 
0b8ad     00 00 00 00 
0b8b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8b5     00 00 00 00 
0b8b9     00 00 00 00 
0b8bd     00 00 00 00 
0b8c1     00 00 00 00 | 	byte	$00[16]
0b8c5     B4 40 00 00 
0b8c9     FE 60 00 00 
0b8cd     00 00 00 00 
0b8d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8d5     00 00 00 00 
0b8d9     00 00 00 00 
0b8dd     00 00 00 00 
0b8e1     00 00 00 00 | 	byte	$00[16]
0b8e5     B4 30 00 01 
0b8e9     FC 60 00 00 
0b8ed     00 00 00 00 
0b8f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b8f5     00 00 00 00 
0b8f9     00 00 00 00 
0b8fd     00 00 00 00 
0b901     00 00 00 00 | 	byte	$00[16]
0b905     B4 30 00 01 
0b909     FC 60 00 00 
0b90d     AA 20 00 00 
0b911     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $aa, $20, $00, $00, $00, $00, $00, $00
0b915     00 00 00 00 
0b919     00 00 00 00 
0b91d     00 00 00 00 
0b921     00 00 00 00 | 	byte	$00[16]
0b925     AA 50 00 01 
0b929     FC 60 00 00 
0b92d     00 00 00 00 
0b931     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b935     00 00 00 00 
0b939     00 00 00 00 
0b93d     00 00 00 00 
0b941     00 00 00 00 | 	byte	$00[16]
0b945     B4 40 00 00 
0b949     00 00 00 00 
0b94d     00 00 00 00 
0b951     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b955     00 00 00 00 
0b959     00 00 00 00 
0b95d     00 00 00 00 
0b961     00 00 00 00 | 	byte	$00[16]
0b965     B4 40 00 01 
0b969     FC 60 00 00 
0b96d     00 00 00 00 
0b971     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b975     00 00 00 00 
0b979     00 00 00 00 
0b97d     00 00 00 00 
0b981     00 00 00 00 | 	byte	$00[16]
0b985     B4 30 00 00 
0b989     FE 60 00 00 
0b98d     00 00 00 00 
0b991     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b995     00 00 00 00 
0b999     00 00 00 00 
0b99d     00 00 00 00 
0b9a1     00 00 00 00 | 	byte	$00[16]
0b9a5     AA 50 00 01 
0b9a9     FC 60 00 00 
0b9ad     00 00 00 00 
0b9b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9b5     00 00 00 00 
0b9b9     00 00 00 00 
0b9bd     00 00 00 00 
0b9c1     00 00 00 00 | 	byte	$00[16]
0b9c5     B4 40 00 00 
0b9c9     FE 60 00 00 
0b9cd     00 00 00 00 
0b9d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9d5     00 00 00 00 
0b9d9     00 00 00 00 
0b9dd     00 00 00 00 
0b9e1     00 00 00 00 | 	byte	$00[16]
0b9e5     B4 30 00 01 
0b9e9     FC 60 00 00 
0b9ed     00 00 00 00 
0b9f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b9f5     00 00 00 00 
0b9f9     00 00 00 00 
0b9fd     00 00 00 00 
0ba01     00 00 00 00 | 	byte	$00[16]
0ba05     B4 30 00 01 
0ba09     FC 60 00 00 
0ba0d     00 00 00 00 
0ba11     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba15     00 00 00 00 
0ba19     00 00 00 00 
0ba1d     00 00 00 00 
0ba21     00 00 00 00 | 	byte	$00[16]
0ba25     AA 50 00 01 
0ba29     FC 60 00 00 
0ba2d     00 00 00 00 
0ba31     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ba35     00 00 00 00 
0ba39     00 00 00 00 
0ba3d     00 00 00 00 
0ba41     00 00 00 00 | 	byte	$00[16]
0ba45     B4 4F 04 00 
0ba49     00 00 00 01 
0ba4d     53 20 00 00 
0ba51     FE 20 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $01, $53, $20, $00, $00, $fe, $20, $00, $00
0ba55     00 00 00 00 
0ba59     00 00 00 00 
0ba5d     00 00 00 00 
0ba61     00 00 00 00 | 	byte	$00[16]
0ba65     B4 40 00 01 
0ba69     FC 60 00 01 
0ba6d     53 20 00 00 
0ba71     FE 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $01, $53, $20, $00, $00, $fe, $20, $00, $00
0ba75     00 00 00 00 
0ba79     00 00 00 00 
0ba7d     00 00 00 00 
0ba81     00 00 00 00 | 	byte	$00[16]
0ba85     B4 30 00 00 
0ba89     FE 60 00 00 
0ba8d     FE 20 00 00 
0ba91     CA 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0ba95     00 00 00 00 
0ba99     00 00 00 00 
0ba9d     00 00 00 00 
0baa1     00 00 00 00 | 	byte	$00[16]
0baa5     AA 50 00 01 
0baa9     FC 60 00 00 
0baad     FE 20 00 00 
0bab1     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bab5     00 00 00 00 
0bab9     00 00 00 00 
0babd     00 00 00 00 
0bac1     00 00 00 00 | 	byte	$00[16]
0bac5     B4 40 00 00 
0bac9     FE 60 00 00 
0bacd     00 00 00 00 
0bad1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bad5     00 00 00 00 
0bad9     00 00 00 00 
0badd     00 00 00 00 
0bae1     00 00 00 00 | 	byte	$00[16]
0bae5     B4 30 00 01 
0bae9     FC 60 00 00 
0baed     00 00 00 00 
0baf1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0baf5     00 00 00 00 
0baf9     00 00 00 00 
0bafd     00 00 00 00 
0bb01     00 00 00 00 | 	byte	$00[16]
0bb05     B4 30 00 01 
0bb09     FC 60 00 00 
0bb0d     FE 20 00 00 
0bb11     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bb15     00 00 00 00 
0bb19     00 00 00 00 
0bb1d     00 00 00 00 
0bb21     00 00 00 00 | 	byte	$00[16]
0bb25     AA 50 00 01 
0bb29     FC 60 00 00 
0bb2d     FE 20 00 00 
0bb31     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bb35     00 00 00 00 
0bb39     00 00 00 00 
0bb3d     00 00 00 00 
0bb41     00 00 00 00 | 	byte	$00[16]
0bb45     B4 40 00 00 
0bb49     00 00 00 00 
0bb4d     FE 20 00 00 
0bb51     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bb55     00 00 00 00 
0bb59     00 00 00 00 
0bb5d     00 00 00 00 
0bb61     00 00 00 00 | 	byte	$00[16]
0bb65     B4 40 00 01 
0bb69     FC 60 00 00 
0bb6d     FE 20 00 00 
0bb71     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bb75     00 00 00 00 
0bb79     00 00 00 00 
0bb7d     00 00 00 00 
0bb81     00 00 00 00 | 	byte	$00[16]
0bb85     B4 30 00 00 
0bb89     FE 60 00 00 
0bb8d     00 00 00 00 
0bb91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bb95     00 00 00 00 
0bb99     00 00 00 00 
0bb9d     00 00 00 00 
0bba1     00 00 00 00 | 	byte	$00[16]
0bba5     AA 50 00 01 
0bba9     FC 60 00 00 
0bbad     FE 20 00 00 
0bbb1     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bbb5     00 00 00 00 
0bbb9     00 00 00 00 
0bbbd     00 00 00 00 
0bbc1     00 00 00 00 | 	byte	$00[16]
0bbc5     B4 40 00 00 
0bbc9     FE 60 00 00 
0bbcd     00 00 00 00 
0bbd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbd5     00 00 00 00 
0bbd9     00 00 00 00 
0bbdd     00 00 00 00 
0bbe1     00 00 00 00 | 	byte	$00[16]
0bbe5     B4 30 00 01 
0bbe9     FC 60 00 00 
0bbed     00 00 00 00 
0bbf1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bbf5     00 00 00 00 
0bbf9     00 00 00 00 
0bbfd     00 00 00 00 
0bc01     00 00 00 00 | 	byte	$00[16]
0bc05     B4 30 00 01 
0bc09     FC 60 00 00 
0bc0d     00 00 00 00 
0bc11     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc15     00 00 00 00 
0bc19     00 00 00 00 
0bc1d     00 00 00 00 
0bc21     00 00 00 00 | 	byte	$00[16]
0bc25     AA 50 00 01 
0bc29     FC 60 00 00 
0bc2d     00 00 00 00 
0bc31     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bc35     00 00 00 00 
0bc39     00 00 00 00 
0bc3d     00 00 00 00 
0bc41     00 00 00 00 | 	byte	$00[16]
0bc45     B4 40 00 00 
0bc49     00 00 00 00 
0bc4d     FE 20 00 00 
0bc51     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bc55     00 00 00 00 
0bc59     00 00 00 00 
0bc5d     00 00 00 00 
0bc61     00 00 00 00 | 	byte	$00[16]
0bc65     B4 40 00 01 
0bc69     FC 60 00 00 
0bc6d     FE 20 00 00 
0bc71     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bc75     00 00 00 00 
0bc79     00 00 00 00 
0bc7d     00 00 00 00 
0bc81     00 00 00 00 | 	byte	$00[16]
0bc85     B4 30 00 00 
0bc89     FE 60 00 00 
0bc8d     FE 20 00 00 
0bc91     CA 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bc95     00 00 00 00 
0bc99     00 00 00 00 
0bc9d     00 00 00 00 
0bca1     00 00 00 00 | 	byte	$00[16]
0bca5     AA 50 00 01 
0bca9     FC 60 00 00 
0bcad     FE 20 00 00 
0bcb1     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bcb5     00 00 00 00 
0bcb9     00 00 00 00 
0bcbd     00 00 00 00 
0bcc1     00 00 00 00 | 	byte	$00[16]
0bcc5     B4 40 00 00 
0bcc9     FE 60 00 00 
0bccd     00 00 00 00 
0bcd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcd5     00 00 00 00 
0bcd9     00 00 00 00 
0bcdd     00 00 00 00 
0bce1     00 00 00 00 | 	byte	$00[16]
0bce5     B4 30 00 01 
0bce9     FC 60 00 00 
0bced     00 00 00 00 
0bcf1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bcf5     00 00 00 00 
0bcf9     00 00 00 00 
0bcfd     00 00 00 00 
0bd01     00 00 00 00 | 	byte	$00[16]
0bd05     B4 30 00 01 
0bd09     FC 60 00 00 
0bd0d     FE 20 00 00 
0bd11     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bd15     00 00 00 00 
0bd19     00 00 00 00 
0bd1d     00 00 00 00 
0bd21     00 00 00 00 | 	byte	$00[16]
0bd25     AA 50 00 01 
0bd29     FC 60 00 00 
0bd2d     FE 20 00 00 
0bd31     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bd35     00 00 00 00 
0bd39     00 00 00 00 
0bd3d     00 00 00 00 
0bd41     00 00 00 00 | 	byte	$00[16]
0bd45     B4 40 00 00 
0bd49     00 00 00 00 
0bd4d     FE 20 00 00 
0bd51     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bd55     00 00 00 00 
0bd59     00 00 00 00 
0bd5d     00 00 00 00 
0bd61     00 00 00 00 | 	byte	$00[16]
0bd65     B4 40 00 01 
0bd69     FC 60 00 00 
0bd6d     FE 20 00 00 
0bd71     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bd75     00 00 00 00 
0bd79     00 00 00 00 
0bd7d     00 00 00 00 
0bd81     00 00 00 00 | 	byte	$00[16]
0bd85     B4 30 00 00 
0bd89     FE 60 00 00 
0bd8d     00 00 00 00 
0bd91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bd95     00 00 00 00 
0bd99     00 00 00 00 
0bd9d     00 00 00 00 
0bda1     00 00 00 00 | 	byte	$00[16]
0bda5     AA 50 00 01 
0bda9     FC 60 00 00 
0bdad     FE 20 00 00 
0bdb1     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bdb5     00 00 00 00 
0bdb9     00 00 00 00 
0bdbd     00 00 00 00 
0bdc1     00 00 00 00 | 	byte	$00[16]
0bdc5     B4 40 00 00 
0bdc9     FE 60 00 00 
0bdcd     00 00 00 00 
0bdd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bdd5     00 00 00 00 
0bdd9     00 00 00 00 
0bddd     00 00 00 00 
0bde1     00 00 00 00 | 	byte	$00[16]
0bde5     B4 30 00 01 
0bde9     FC 60 00 00 
0bded     FE 20 00 00 
0bdf1     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0bdf5     00 00 00 00 
0bdf9     00 00 00 00 
0bdfd     00 00 00 00 
0be01     00 00 00 00 | 	byte	$00[16]
0be05     B4 30 00 01 
0be09     E0 60 00 00 
0be0d     F0 20 00 00 
0be11     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0be15     00 00 00 00 
0be19     00 00 00 00 
0be1d     00 00 00 00 
0be21     00 00 00 00 | 	byte	$00[16]
0be25     AA 50 00 01 
0be29     E0 60 00 00 
0be2d     00 00 00 00 
0be31     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0be35     00 00 00 00 
0be39     00 00 00 00 
0be3d     00 00 00 00 
0be41     00 00 00 00 | 	byte	$00[16]
0be45     B4 4F 04 00 
0be49     00 00 00 00 
0be4d     F0 20 00 00 
0be51     BE 20 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0be55     00 00 00 00 
0be59     00 00 00 00 
0be5d     00 00 00 00 
0be61     00 00 00 00 | 	byte	$00[16]
0be65     B4 40 00 01 
0be69     E0 60 00 00 
0be6d     F0 20 00 00 
0be71     BE 20 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0be75     00 00 00 00 
0be79     00 00 00 00 
0be7d     00 00 00 00 
0be81     00 00 00 00 | 	byte	$00[16]
0be85     B4 30 00 00 
0be89     F0 60 00 00 
0be8d     F0 20 00 00 
0be91     BE 20 00 00 | 	byte	$b4, $30, $00, $00, $f0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0be95     00 00 00 00 
0be99     00 00 00 00 
0be9d     00 00 00 00 
0bea1     00 00 00 00 | 	byte	$00[16]
0bea5     AA 50 00 01 
0bea9     E0 60 00 00 
0bead     F0 20 00 00 
0beb1     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0beb5     00 00 00 00 
0beb9     00 00 00 00 
0bebd     00 00 00 00 
0bec1     00 00 00 00 | 	byte	$00[16]
0bec5     B4 40 00 00 
0bec9     F0 60 00 00 
0becd     00 00 00 00 
0bed1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bed5     00 00 00 00 
0bed9     00 00 00 00 
0bedd     00 00 00 00 
0bee1     00 00 00 00 | 	byte	$00[16]
0bee5     B4 30 00 01 
0bee9     E0 60 00 00 
0beed     F0 20 00 00 
0bef1     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bef5     00 00 00 00 
0bef9     00 00 00 00 
0befd     00 00 00 00 
0bf01     00 00 00 00 | 	byte	$00[16]
0bf05     B4 30 00 01 
0bf09     E0 60 00 00 
0bf0d     F0 20 00 00 
0bf11     BE 20 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bf15     00 00 00 00 
0bf19     00 00 00 00 
0bf1d     00 00 00 00 
0bf21     00 00 00 00 | 	byte	$00[16]
0bf25     AA 50 00 01 
0bf29     E0 60 00 00 
0bf2d     F0 20 00 00 
0bf31     BE 20 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bf35     00 00 00 00 
0bf39     00 00 00 00 
0bf3d     00 00 00 00 
0bf41     00 00 00 00 | 	byte	$00[16]
0bf45     B4 40 00 00 
0bf49     00 00 00 00 
0bf4d     F0 20 00 00 
0bf51     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bf55     00 00 00 00 
0bf59     00 00 00 00 
0bf5d     00 00 00 00 
0bf61     00 00 00 00 | 	byte	$00[16]
0bf65     B4 40 00 01 
0bf69     E0 60 00 00 
0bf6d     00 00 00 00 
0bf71     00 00 00 00 | 	byte	$b4, $40, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bf75     00 00 00 00 
0bf79     00 00 00 00 
0bf7d     00 00 00 00 
0bf81     00 00 00 00 | 	byte	$00[16]
0bf85     B4 30 00 00 
0bf89     F0 60 00 00 
0bf8d     F0 20 00 00 
0bf91     BE 20 00 00 | 	byte	$b4, $30, $00, $00, $f0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bf95     00 00 00 00 
0bf99     00 00 00 00 
0bf9d     00 00 00 00 
0bfa1     00 00 00 00 | 	byte	$00[16]
0bfa5     AA 50 00 01 
0bfa9     E0 60 00 00 
0bfad     00 00 00 00 
0bfb1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $e0, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0bfb5     00 00 00 00 
0bfb9     00 00 00 00 
0bfbd     00 00 00 00 
0bfc1     00 00 00 00 | 	byte	$00[16]
0bfc5     B4 40 00 00 
0bfc9     F0 60 00 00 
0bfcd     F0 20 00 00 
0bfd1     BE 20 00 00 | 	byte	$b4, $40, $00, $00, $f0, $60, $00, $00, $f0, $20, $00, $00, $be, $20, $00, $00
0bfd5     00 00 00 00 
0bfd9     00 00 00 00 
0bfdd     00 00 00 00 
0bfe1     00 00 00 00 | 	byte	$00[16]
0bfe5     B4 30 00 01 
0bfe9     E0 60 00 01 
0bfed     1D 20 00 00 
0bff1     F0 20 00 00 | 	byte	$b4, $30, $00, $01, $e0, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0bff5     00 00 00 00 
0bff9     00 00 00 00 
0bffd     00 00 00 00 
0c001     00 00 00 00 | 	byte	$00[16]
0c005     B4 30 00 02 
0c009     3A 60 00 00 
0c00d     00 00 00 00 
0c011     00 00 00 00 | 	byte	$b4, $30, $00, $02, $3a, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c015     00 00 00 00 
0c019     00 00 00 00 
0c01d     00 00 00 00 
0c021     00 00 00 00 | 	byte	$00[16]
0c025     AA 50 00 02 
0c029     3A 60 00 01 
0c02d     1D 20 00 00 
0c031     F0 20 00 00 | 	byte	$aa, $50, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c035     00 00 00 00 
0c039     00 00 00 00 
0c03d     00 00 00 00 
0c041     00 00 00 00 | 	byte	$00[16]
0c045     B4 40 00 00 
0c049     00 00 00 01 
0c04d     1D 20 00 00 
0c051     F0 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c055     00 00 00 00 
0c059     00 00 00 00 
0c05d     00 00 00 00 
0c061     00 00 00 00 | 	byte	$00[16]
0c065     B4 40 00 02 
0c069     3A 60 00 01 
0c06d     1D 20 00 00 
0c071     F0 20 00 00 | 	byte	$b4, $40, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c075     00 00 00 00 
0c079     00 00 00 00 
0c07d     00 00 00 00 
0c081     00 00 00 00 | 	byte	$00[16]
0c085     B4 30 00 01 
0c089     1D 60 00 01 
0c08d     1D 20 00 00 
0c091     F0 20 00 00 | 	byte	$b4, $30, $00, $01, $1d, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c095     00 00 00 00 
0c099     00 00 00 00 
0c09d     00 00 00 00 
0c0a1     00 00 00 00 | 	byte	$00[16]
0c0a5     AA 50 00 02 
0c0a9     3A 60 00 01 
0c0ad     1D 20 00 00 
0c0b1     F0 20 00 00 | 	byte	$aa, $50, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c0b5     00 00 00 00 
0c0b9     00 00 00 00 
0c0bd     00 00 00 00 
0c0c1     00 00 00 00 | 	byte	$00[16]
0c0c5     B4 40 00 01 
0c0c9     1D 60 00 00 
0c0cd     00 00 00 00 
0c0d1     00 00 00 00 | 	byte	$b4, $40, $00, $01, $1d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0d5     00 00 00 00 
0c0d9     00 00 00 00 
0c0dd     00 00 00 00 
0c0e1     00 00 00 00 | 	byte	$00[16]
0c0e5     B4 30 00 02 
0c0e9     3A 60 00 01 
0c0ed     1D 20 00 00 
0c0f1     F0 20 00 00 | 	byte	$b4, $30, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c0f5     00 00 00 00 
0c0f9     00 00 00 00 
0c0fd     00 00 00 00 
0c101     00 00 00 00 | 	byte	$00[16]
0c105     B4 30 00 02 
0c109     3A 60 00 01 
0c10d     1D 20 00 00 
0c111     F0 20 00 00 | 	byte	$b4, $30, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c115     00 00 00 00 
0c119     00 00 00 00 
0c11d     00 00 00 00 
0c121     00 00 00 00 | 	byte	$00[16]
0c125     AA 50 00 02 
0c129     3A 60 00 01 
0c12d     1D 20 00 00 
0c131     F0 20 00 00 | 	byte	$aa, $50, $00, $02, $3a, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c135     00 00 00 00 
0c139     00 00 00 00 
0c13d     00 00 00 00 
0c141     00 00 00 00 | 	byte	$00[16]
0c145     B4 40 00 00 
0c149     00 00 00 01 
0c14d     1D 20 00 00 
0c151     F0 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c155     00 00 00 00 
0c159     00 00 00 00 
0c15d     00 00 00 00 
0c161     00 00 00 00 | 	byte	$00[16]
0c165     B4 40 00 02 
0c169     3A 60 00 00 
0c16d     00 00 00 00 
0c171     00 00 00 00 | 	byte	$b4, $40, $00, $02, $3a, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c175     00 00 00 00 
0c179     00 00 00 00 
0c17d     00 00 00 00 
0c181     00 00 00 00 | 	byte	$00[16]
0c185     B4 30 00 01 
0c189     1D 60 00 01 
0c18d     1D 20 00 00 
0c191     F0 20 00 00 | 	byte	$b4, $30, $00, $01, $1d, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c195     00 00 00 00 
0c199     00 00 00 00 
0c19d     00 00 00 00 
0c1a1     00 00 00 00 | 	byte	$00[16]
0c1a5     AA 50 00 02 
0c1a9     3A 60 00 00 
0c1ad     00 00 00 00 
0c1b1     00 00 00 00 | 	byte	$aa, $50, $00, $02, $3a, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c1b5     00 00 00 00 
0c1b9     00 00 00 00 
0c1bd     00 00 00 00 
0c1c1     00 00 00 00 | 	byte	$00[16]
0c1c5     B4 40 00 01 
0c1c9     1D 60 00 01 
0c1cd     1D 20 00 00 
0c1d1     F0 20 00 00 | 	byte	$b4, $40, $00, $01, $1d, $60, $00, $01, $1d, $20, $00, $00, $f0, $20, $00, $00
0c1d5     00 00 00 00 
0c1d9     00 00 00 00 
0c1dd     00 00 00 00 
0c1e1     00 00 00 00 | 	byte	$00[16]
0c1e5     B4 30 00 02 
0c1e9     3A 60 00 00 
0c1ed     FE 20 00 00 
0c1f1     D6 20 00 00 | 	byte	$b4, $30, $00, $02, $3a, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c1f5     00 00 00 00 
0c1f9     00 00 00 00 
0c1fd     00 00 00 00 
0c201     00 00 00 00 | 	byte	$00[16]
0c205     B4 30 00 01 
0c209     FC 60 00 00 
0c20d     00 00 00 00 
0c211     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c215     00 00 00 00 
0c219     00 00 00 00 
0c21d     00 00 00 00 
0c221     00 00 00 00 | 	byte	$00[16]
0c225     AA 50 00 01 
0c229     FC 60 00 00 
0c22d     FE 20 00 00 
0c231     D6 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c235     00 00 00 00 
0c239     00 00 00 00 
0c23d     00 00 00 00 
0c241     00 00 00 00 | 	byte	$00[16]
0c245     B4 4F 04 00 
0c249     00 00 00 00 
0c24d     FE 20 00 00 
0c251     D6 20 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c255     00 00 00 00 
0c259     00 00 00 00 
0c25d     00 00 00 00 
0c261     00 00 00 00 | 	byte	$00[16]
0c265     B4 40 00 01 
0c269     FC 60 00 00 
0c26d     FE 20 00 00 
0c271     D6 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c275     00 00 00 00 
0c279     00 00 00 00 
0c27d     00 00 00 00 
0c281     00 00 00 00 | 	byte	$00[16]
0c285     B4 30 00 00 
0c289     FE 60 00 00 
0c28d     FE 20 00 00 
0c291     D6 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c295     00 00 00 00 
0c299     00 00 00 00 
0c29d     00 00 00 00 
0c2a1     00 00 00 00 | 	byte	$00[16]
0c2a5     AA 50 00 01 
0c2a9     FC 60 00 00 
0c2ad     FE 20 00 00 
0c2b1     D6 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c2b5     00 00 00 00 
0c2b9     00 00 00 00 
0c2bd     00 00 00 00 
0c2c1     00 00 00 00 | 	byte	$00[16]
0c2c5     B4 40 00 00 
0c2c9     FE 60 00 00 
0c2cd     00 00 00 00 
0c2d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c2d5     00 00 00 00 
0c2d9     00 00 00 00 
0c2dd     00 00 00 00 
0c2e1     00 00 00 00 | 	byte	$00[16]
0c2e5     B4 30 00 01 
0c2e9     FC 60 00 00 
0c2ed     FE 20 00 00 
0c2f1     D6 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c2f5     00 00 00 00 
0c2f9     00 00 00 00 
0c2fd     00 00 00 00 
0c301     00 00 00 00 | 	byte	$00[16]
0c305     B4 30 00 01 
0c309     FC 60 00 00 
0c30d     FE 20 00 00 
0c311     D6 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c315     00 00 00 00 
0c319     00 00 00 00 
0c31d     00 00 00 00 
0c321     00 00 00 00 | 	byte	$00[16]
0c325     AA 50 00 01 
0c329     FC 60 00 00 
0c32d     FE 20 00 00 
0c331     D6 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c335     00 00 00 00 
0c339     00 00 00 00 
0c33d     00 00 00 00 
0c341     00 00 00 00 | 	byte	$00[16]
0c345     B4 40 00 00 
0c349     00 00 00 00 
0c34d     FE 20 00 00 
0c351     D6 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c355     00 00 00 00 
0c359     00 00 00 00 
0c35d     00 00 00 00 
0c361     00 00 00 00 | 	byte	$00[16]
0c365     B4 40 00 01 
0c369     FC 60 00 00 
0c36d     00 00 00 00 
0c371     00 00 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c375     00 00 00 00 
0c379     00 00 00 00 
0c37d     00 00 00 00 
0c381     00 00 00 00 | 	byte	$00[16]
0c385     B4 30 00 00 
0c389     FE 60 00 00 
0c38d     FE 20 00 00 
0c391     D6 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c395     00 00 00 00 
0c399     00 00 00 00 
0c39d     00 00 00 00 
0c3a1     00 00 00 00 | 	byte	$00[16]
0c3a5     AA 50 00 01 
0c3a9     FC 60 00 00 
0c3ad     00 00 00 00 
0c3b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c3b5     00 00 00 00 
0c3b9     00 00 00 00 
0c3bd     00 00 00 00 
0c3c1     00 00 00 00 | 	byte	$00[16]
0c3c5     B4 40 00 00 
0c3c9     FE 60 00 00 
0c3cd     FE 20 00 00 
0c3d1     D6 20 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $d6, $20, $00, $00
0c3d5     00 00 00 00 
0c3d9     00 00 00 00 
0c3dd     00 00 00 00 
0c3e1     00 00 00 00 | 	byte	$00[16]
0c3e5     B4 30 00 01 
0c3e9     FC 60 00 00 
0c3ed     FE 20 00 00 
0c3f1     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c3f5     00 00 00 00 
0c3f9     00 00 00 00 
0c3fd     00 00 00 00 
0c401     00 00 00 00 | 	byte	$00[16]
0c405     B4 30 00 01 
0c409     FC 60 00 00 
0c40d     00 00 00 00 
0c411     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c415     00 00 00 00 
0c419     00 00 00 00 
0c41d     00 00 00 00 
0c421     00 00 00 00 | 	byte	$00[16]
0c425     AA 50 00 01 
0c429     FC 60 00 00 
0c42d     FE 20 00 00 
0c431     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c435     00 00 00 00 
0c439     00 00 00 00 
0c43d     00 00 00 00 
0c441     00 00 00 00 | 	byte	$00[16]
0c445     B4 40 00 00 
0c449     00 00 00 00 
0c44d     FE 20 00 00 
0c451     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c455     00 00 00 00 
0c459     00 00 00 00 
0c45d     00 00 00 00 
0c461     00 00 00 00 | 	byte	$00[16]
0c465     B4 40 00 01 
0c469     FC 60 00 00 
0c46d     FE 20 00 00 
0c471     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c475     00 00 00 00 
0c479     00 00 00 00 
0c47d     00 00 00 00 
0c481     00 00 00 00 | 	byte	$00[16]
0c485     B4 30 00 00 
0c489     FE 60 00 00 
0c48d     FE 20 00 00 
0c491     CA 20 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c495     00 00 00 00 
0c499     00 00 00 00 
0c49d     00 00 00 00 
0c4a1     00 00 00 00 | 	byte	$00[16]
0c4a5     AA 50 00 01 
0c4a9     FC 60 00 00 
0c4ad     FE 20 00 00 
0c4b1     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c4b5     00 00 00 00 
0c4b9     00 00 00 00 
0c4bd     00 00 00 00 
0c4c1     00 00 00 00 | 	byte	$00[16]
0c4c5     B4 40 00 00 
0c4c9     FE 60 00 00 
0c4cd     00 00 00 00 
0c4d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c4d5     00 00 00 00 
0c4d9     00 00 00 00 
0c4dd     00 00 00 00 
0c4e1     00 00 00 00 | 	byte	$00[16]
0c4e5     B4 30 00 01 
0c4e9     FC 60 00 00 
0c4ed     FE 20 00 00 
0c4f1     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c4f5     00 00 00 00 
0c4f9     00 00 00 00 
0c4fd     00 00 00 00 
0c501     00 00 00 00 | 	byte	$00[16]
0c505     B4 30 00 01 
0c509     FC 60 00 00 
0c50d     FE 20 00 00 
0c511     CA 20 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c515     00 00 00 00 
0c519     00 00 00 00 
0c51d     00 00 00 00 
0c521     00 00 00 00 | 	byte	$00[16]
0c525     AA 50 00 01 
0c529     FC 60 00 00 
0c52d     FE 20 00 00 
0c531     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c535     00 00 00 00 
0c539     00 00 00 00 
0c53d     00 00 00 00 
0c541     00 00 00 00 | 	byte	$00[16]
0c545     B4 40 00 00 
0c549     00 00 00 00 
0c54d     FE 20 00 00 
0c551     CA 20 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c555     00 00 00 00 
0c559     00 00 00 00 
0c55d     00 00 00 00 
0c561     00 00 00 00 | 	byte	$00[16]
0c565     B4 40 00 01 
0c569     FC 60 00 00 
0c56d     FE 20 00 00 
0c571     CA 20 00 00 | 	byte	$b4, $40, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c575     00 00 00 00 
0c579     00 00 00 00 
0c57d     00 00 00 00 
0c581     00 00 00 00 | 	byte	$00[16]
0c585     B4 30 00 00 
0c589     FE 60 00 00 
0c58d     00 00 00 00 
0c591     00 00 00 00 | 	byte	$b4, $30, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c595     00 00 00 00 
0c599     00 00 00 00 
0c59d     00 00 00 00 
0c5a1     00 00 00 00 | 	byte	$00[16]
0c5a5     AA 50 00 01 
0c5a9     FC 60 00 00 
0c5ad     FE 20 00 00 
0c5b1     CA 20 00 00 | 	byte	$aa, $50, $00, $01, $fc, $60, $00, $00, $fe, $20, $00, $00, $ca, $20, $00, $00
0c5b5     00 00 00 00 
0c5b9     00 00 00 00 
0c5bd     00 00 00 00 
0c5c1     00 00 00 00 | 	byte	$00[16]
0c5c5     B4 40 00 00 
0c5c9     FE 60 00 00 
0c5cd     00 00 00 00 
0c5d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5d5     00 00 00 00 
0c5d9     00 00 00 00 
0c5dd     00 00 00 00 
0c5e1     00 00 00 00 | 	byte	$00[16]
0c5e5     B4 30 00 01 
0c5e9     FC 60 00 00 
0c5ed     00 00 00 00 
0c5f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $fc, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c5f5     00 00 00 00 
0c5f9     00 00 00 00 
0c5fd     00 00 00 00 
0c601     00 00 00 00 | 	byte	$00[16]
0c605     B4 30 00 01 
0c609     7D 60 00 01 
0c60d     7D 20 00 01 
0c611     7D 70 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $7d, $20, $00, $01, $7d, $70, $00, $00
0c615     00 00 00 00 
0c619     00 00 00 00 
0c61d     00 00 00 00 
0c621     00 00 00 00 | 	byte	$00[16]
0c625     AA 50 00 01 
0c629     7D 60 00 00 
0c62d     00 00 00 00 
0c631     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c635     00 00 00 00 
      ...             
0ca3d     00 00 00 00 
0ca41     00 00 00 00 | 	byte	$00[1040]
0ca45     B4 4F 04 00 
0ca49     00 00 00 00 
0ca4d     00 00 00 02 
0ca51     FA 60 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0ca55     00 00 00 00 
0ca59     00 00 00 00 
0ca5d     00 00 00 00 
0ca61     00 00 00 00 | 	byte	$00[16]
0ca65     B4 40 00 01 
0ca69     7D 60 00 00 
0ca6d     00 00 00 01 
0ca71     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0ca75     00 00 00 00 
0ca79     00 00 00 00 
0ca7d     00 00 00 00 
0ca81     00 00 00 00 | 	byte	$00[16]
0ca85     B4 30 00 00 
0ca89     BE 60 00 00 
0ca8d     00 00 00 02 
0ca91     FA 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0ca95     00 00 00 00 
0ca99     00 00 00 00 
0ca9d     00 00 00 00 
0caa1     00 00 00 00 | 	byte	$00[16]
0caa5     AA 50 00 00 
0caa9     FE 60 00 00 
0caad     00 00 00 01 
0cab1     7D 60 00 00 | 	byte	$aa, $50, $00, $00, $fe, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
0cab5     00 00 00 00 
0cab9     00 00 00 00 
0cabd     00 00 00 00 
0cac1     00 00 00 00 | 	byte	$00[16]
0cac5     B4 40 00 00 
0cac9     D6 60 00 00 
0cacd     00 00 00 02 
0cad1     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $d6, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0cad5     00 00 00 00 
0cad9     00 00 00 00 
0cadd     00 00 00 00 
0cae1     00 00 00 00 | 	byte	$00[16]
0cae5     B4 30 00 00 
0cae9     BE 60 00 00 
0caed     00 00 00 01 
0caf1     AC 60 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0caf5     00 00 00 00 
0caf9     00 00 00 00 
0cafd     00 00 00 00 
0cb01     00 00 00 00 | 	byte	$00[16]
0cb05     B4 30 00 01 
0cb09     7D 60 00 00 
0cb0d     00 00 00 02 
0cb11     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0cb15     00 00 00 00 
0cb19     00 00 00 00 
0cb1d     00 00 00 00 
0cb21     00 00 00 00 | 	byte	$00[16]
0cb25     AA 50 00 01 
0cb29     7D 60 00 00 
0cb2d     00 00 00 01 
0cb31     7D 60 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $01, $7d, $60, $00, $00
0cb35     00 00 00 00 
0cb39     00 00 00 00 
0cb3d     00 00 00 00 
0cb41     00 00 00 00 | 	byte	$00[16]
0cb45     B4 40 00 00 
0cb49     00 00 00 00 
0cb4d     00 00 00 02 
0cb51     FA 60 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $fa, $60, $00, $00
0cb55     00 00 00 00 
0cb59     00 00 00 00 
0cb5d     00 00 00 00 
0cb61     00 00 00 00 | 	byte	$00[16]
0cb65     B4 40 00 01 
0cb69     AC 60 00 00 
0cb6d     00 00 00 01 
0cb71     AC 60 00 00 | 	byte	$b4, $40, $00, $01, $ac, $60, $00, $00, $00, $00, $00, $01, $ac, $60, $00, $00
0cb75     00 00 00 00 
0cb79     00 00 00 00 
0cb7d     00 00 00 00 
0cb81     00 00 00 00 | 	byte	$00[16]
0cb85     B4 30 00 01 
0cb89     7D 60 00 01 
0cb8d     7D 20 00 02 
0cb91     FA 60 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $01, $7d, $20, $00, $02, $fa, $60, $00, $00
0cb95     00 00 00 00 
      ...             
0cbcd     00 00 00 00 
0cbd1     00 00 00    | 	byte	$00[63]
0cbd4     03 58 10 00 
0cbd8     00 00 00 00 
0cbdc     00 00 00 00 
0cbe0     00 00 00 00 | 	byte	$03, $58, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cbe4     00 00 00 00 
      ...             
0ce40     00 00 00 00 
0ce44     00          | 	byte	$00[609]
0ce45     B4 4F 04 00 
0ce49     00 00 00 00 
0ce4d     00 00 00 00 
0ce51     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ce55     00 00 00 00 
0ce59     00 00 00 00 
0ce5d     00 00 00 00 
0ce61     00 00 00 00 | 	byte	$00[16]
0ce65     B4 40 00 00 
0ce69     00 00 00 00 
0ce6d     00 00 00 00 
0ce71     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ce75     00 00 00 00 
0ce79     00 00 00 00 
0ce7d     00 00 00 00 
0ce81     00 00 00 00 | 	byte	$00[16]
0ce85     B4 30 00 00 
0ce89     00 00 00 00 
0ce8d     00 00 00 00 
0ce91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ce95     00 00 00 00 
0ce99     00 00 00 00 
0ce9d     00 00 00 00 
0cea1     00 00 00 00 | 	byte	$00[16]
0cea5     AA 50 00 00 
0cea9     00 00 00 00 
0cead     00 00 00 00 
0ceb1     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ceb5     00 00 00 00 
0ceb9     00 00 00 00 
0cebd     00 00 00 00 
0cec1     00 00 00 00 | 	byte	$00[16]
0cec5     B4 40 00 00 
0cec9     00 00 00 00 
0cecd     00 00 00 00 
0ced1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ced5     00 00 00 00 
0ced9     00 00 00 00 
0cedd     00 00 00 00 
0cee1     00 00 00 00 | 	byte	$00[16]
0cee5     B4 30 00 00 
0cee9     00 00 00 00 
0ceed     00 00 00 00 
0cef1     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cef5     00 00 00 00 
0cef9     00 00 00 00 
0cefd     00 00 00 00 
0cf01     00 00 00 00 | 	byte	$00[16]
0cf05     B4 30 00 00 
0cf09     00 00 00 00 
0cf0d     00 00 00 00 
0cf11     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf15     00 00 00 00 
0cf19     00 00 00 00 
0cf1d     00 00 00 00 
0cf21     00 00 00 00 | 	byte	$00[16]
0cf25     AA 50 00 00 
0cf29     00 00 00 00 
0cf2d     00 00 00 00 
0cf31     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf35     00 00 00 00 
0cf39     00 00 00 00 
0cf3d     00 00 00 00 
0cf41     00 00 00 00 | 	byte	$00[16]
0cf45     B4 40 00 00 
0cf49     00 00 00 00 
0cf4d     00 00 00 00 
0cf51     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf55     00 00 00 00 
0cf59     00 00 00 00 
0cf5d     00 00 00 00 
0cf61     00 00 00 00 | 	byte	$00[16]
0cf65     B4 40 00 00 
0cf69     00 00 00 00 
0cf6d     00 00 00 00 
0cf71     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf75     00 00 00 00 
0cf79     00 00 00 00 
0cf7d     00 00 00 00 
0cf81     00 00 00 00 | 	byte	$00[16]
0cf85     B4 30 00 00 
0cf89     00 00 00 00 
0cf8d     00 00 00 00 
0cf91     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cf95     00 00 00 00 
0cf99     00 00 00 00 
0cf9d     00 00 00 00 
0cfa1     00 00 00 00 | 	byte	$00[16]
0cfa5     AA 50 00 00 
0cfa9     00 00 00 00 
0cfad     00 00 00 00 
0cfb1     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cfb5     00 00 00 00 
0cfb9     00 00 00 00 
0cfbd     00 00 00 00 
0cfc1     00 00 00 00 | 	byte	$00[16]
0cfc5     B4 40 00 00 
0cfc9     00 00 00 00 
0cfcd     00 00 00 00 
0cfd1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cfd5     00 00 00 00 
0cfd9     00 00 00 00 
0cfdd     00 00 00 00 
0cfe1     00 00 00 00 | 	byte	$00[16]
0cfe5     B4 30 00 00 
0cfe9     00 00 00 00 
0cfed     00 00 00 00 
0cff1     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0cff5     00 00 00 00 
0cff9     00 00 00 00 
0cffd     00 00 00 00 
0d001     00 00 00 00 | 	byte	$00[16]
0d005     B4 30 00 00 
0d009     00 00 00 00 
0d00d     00 00 00 00 
0d011     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d015     00 00 00 00 
0d019     00 00 00 00 
0d01d     00 00 00 00 
0d021     00 00 00 00 | 	byte	$00[16]
0d025     AA 50 00 00 
0d029     00 00 00 00 
0d02d     00 00 00 00 
0d031     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d035     00 00 00 00 
0d039     00 00 00 00 
0d03d     00 00 00 00 
0d041     00 00 00 00 | 	byte	$00[16]
0d045     B4 40 00 00 
0d049     00 00 00 00 
0d04d     00 00 00 00 
0d051     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d055     00 00 00 00 
0d059     00 00 00 00 
0d05d     00 00 00 00 
0d061     00 00 00 00 | 	byte	$00[16]
0d065     B4 40 00 00 
0d069     00 00 00 00 
0d06d     00 00 00 00 
0d071     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d075     00 00 00 00 
0d079     00 00 00 00 
0d07d     00 00 00 00 
0d081     00 00 00 00 | 	byte	$00[16]
0d085     B4 30 00 00 
0d089     00 00 00 00 
0d08d     00 00 00 00 
0d091     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d095     00 00 00 00 
0d099     00 00 00 00 
0d09d     00 00 00 00 
0d0a1     00 00 00 00 | 	byte	$00[16]
0d0a5     AA 50 00 00 
0d0a9     00 00 00 00 
0d0ad     00 00 00 00 
0d0b1     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d0b5     00 00 00 00 
0d0b9     00 00 00 00 
0d0bd     00 00 00 00 
0d0c1     00 00 00 00 | 	byte	$00[16]
0d0c5     B4 40 00 00 
0d0c9     00 00 00 00 
0d0cd     00 00 00 00 
0d0d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d0d5     00 00 00 00 
0d0d9     00 00 00 00 
0d0dd     00 00 00 00 
0d0e1     00 00 00 00 | 	byte	$00[16]
0d0e5     B4 30 00 00 
0d0e9     00 00 00 00 
0d0ed     00 00 00 00 
0d0f1     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d0f5     00 00 00 00 
0d0f9     00 00 00 00 
0d0fd     00 00 00 00 
0d101     00 00 00 00 | 	byte	$00[16]
0d105     B4 30 00 00 
0d109     00 00 00 00 
0d10d     00 00 00 00 
0d111     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d115     00 00 00 00 
0d119     00 00 00 00 
0d11d     00 00 00 00 
0d121     00 00 00 00 | 	byte	$00[16]
0d125     AA 50 00 00 
0d129     00 00 00 00 
0d12d     00 00 00 00 
0d131     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d135     00 00 00 00 
0d139     00 00 00 00 
0d13d     00 00 00 00 
0d141     00 00 00 00 | 	byte	$00[16]
0d145     B4 40 00 00 
0d149     00 00 00 00 
0d14d     00 00 00 00 
0d151     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d155     00 00 00 00 
0d159     00 00 00 00 
0d15d     00 00 00 00 
0d161     00 00 00 00 | 	byte	$00[16]
0d165     B4 40 00 00 
0d169     00 00 00 00 
0d16d     00 00 00 00 
0d171     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d175     00 00 00 00 
0d179     00 00 00 00 
0d17d     00 00 00 00 
0d181     00 00 00 00 | 	byte	$00[16]
0d185     B4 30 00 00 
0d189     00 00 00 00 
0d18d     00 00 00 00 
0d191     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d195     00 00 00 00 
0d199     00 00 00 00 
0d19d     00 00 00 00 
0d1a1     00 00 00 00 | 	byte	$00[16]
0d1a5     AA 50 00 00 
0d1a9     00 00 00 00 
0d1ad     00 00 00 00 
0d1b1     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d1b5     00 00 00 00 
0d1b9     00 00 00 00 
0d1bd     00 00 00 00 
0d1c1     00 00 00 00 | 	byte	$00[16]
0d1c5     B4 40 00 00 
0d1c9     00 00 00 00 
0d1cd     00 00 00 00 
0d1d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d1d5     00 00 00 00 
0d1d9     00 00 00 00 
0d1dd     00 00 00 00 
0d1e1     00 00 00 00 | 	byte	$00[16]
0d1e5     B4 30 00 00 
0d1e9     00 00 00 00 
0d1ed     00 00 00 00 
0d1f1     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d1f5     00 00 00 00 
0d1f9     00 00 00 00 
0d1fd     00 00 00 00 
0d201     00 00 00 00 | 	byte	$00[16]
0d205     B4 30 00 00 
0d209     00 00 00 00 
0d20d     00 00 00 00 
0d211     00 00 00 00 | 	byte	$b4, $30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d215     00 00 00 00 
0d219     00 00 00 00 
0d21d     00 00 00 00 
0d221     00 00 00 00 | 	byte	$00[16]
0d225     AA 50 00 00 
0d229     00 00 00 00 
0d22d     00 00 00 00 
0d231     00 00 00 00 | 	byte	$aa, $50, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d235     00 00 00 00 
0d239     00 00 00 00 
0d23d     00 00 00 00 
0d241     00 00 00 00 | 	byte	$00[16]
0d245     B4 4F 04 00 
0d249     00 00 00 00 
0d24d     00 00 00 00 
0d251     00 00 00 00 | 	byte	$b4, $4f, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d255     00 00 00 00 
0d259     00 00 00 00 
0d25d     00 00 00 00 
0d261     00 00 00 00 | 	byte	$00[16]
0d265     B4 40 00 01 
0d269     7D 60 00 00 
0d26d     00 00 00 00 
0d271     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d275     00 00 00 00 
0d279     00 00 00 00 
0d27d     00 00 00 00 
0d281     00 00 00 00 | 	byte	$00[16]
0d285     B4 30 00 00 
0d289     BE 60 00 00 
0d28d     00 00 00 00 
0d291     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d295     00 00 00 00 
0d299     00 00 00 00 
0d29d     00 00 00 00 
0d2a1     00 00 00 00 | 	byte	$00[16]
0d2a5     AA 50 00 01 
0d2a9     7D 60 00 00 
0d2ad     00 00 00 00 
0d2b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d2b5     00 00 00 00 
0d2b9     00 00 00 00 
0d2bd     00 00 00 00 
0d2c1     00 00 00 00 | 	byte	$00[16]
0d2c5     B4 40 00 00 
0d2c9     BE 60 00 00 
0d2cd     00 00 00 00 
0d2d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d2d5     00 00 00 00 
0d2d9     00 00 00 00 
0d2dd     00 00 00 00 
0d2e1     00 00 00 00 | 	byte	$00[16]
0d2e5     B4 30 00 01 
0d2e9     7D 60 00 00 
0d2ed     00 00 00 00 
0d2f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d2f5     00 00 00 00 
0d2f9     00 00 00 00 
0d2fd     00 00 00 00 
0d301     00 00 00 00 | 	byte	$00[16]
0d305     B4 30 00 01 
0d309     7D 60 00 00 
0d30d     00 00 00 00 
0d311     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d315     00 00 00 00 
0d319     00 00 00 00 
0d31d     00 00 00 00 
0d321     00 00 00 00 | 	byte	$00[16]
0d325     AA 50 00 01 
0d329     7D 60 00 00 
0d32d     00 00 00 00 
0d331     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d335     00 00 00 00 
0d339     00 00 00 00 
0d33d     00 00 00 00 
0d341     00 00 00 00 | 	byte	$00[16]
0d345     B4 40 00 00 
0d349     00 00 00 00 
0d34d     00 00 00 00 
0d351     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d355     00 00 00 00 
0d359     00 00 00 00 
0d35d     00 00 00 00 
0d361     00 00 00 00 | 	byte	$00[16]
0d365     B4 40 00 01 
0d369     7D 60 00 00 
0d36d     00 00 00 00 
0d371     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d375     00 00 00 00 
0d379     00 00 00 00 
0d37d     00 00 00 00 
0d381     00 00 00 00 | 	byte	$00[16]
0d385     B4 30 00 00 
0d389     BE 60 00 00 
0d38d     00 00 00 00 
0d391     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d395     00 00 00 00 
0d399     00 00 00 00 
0d39d     00 00 00 00 
0d3a1     00 00 00 00 | 	byte	$00[16]
0d3a5     AA 50 00 01 
0d3a9     7D 60 00 00 
0d3ad     00 00 00 00 
0d3b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3b5     00 00 00 00 
0d3b9     00 00 00 00 
0d3bd     00 00 00 00 
0d3c1     00 00 00 00 | 	byte	$00[16]
0d3c5     B4 40 00 00 
0d3c9     BE 60 00 00 
0d3cd     00 00 00 00 
0d3d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3d5     00 00 00 00 
0d3d9     00 00 00 00 
0d3dd     00 00 00 00 
0d3e1     00 00 00 00 | 	byte	$00[16]
0d3e5     B4 30 00 01 
0d3e9     7D 60 00 00 
0d3ed     00 00 00 00 
0d3f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d3f5     00 00 00 00 
0d3f9     00 00 00 00 
0d3fd     00 00 00 00 
0d401     00 00 00 00 | 	byte	$00[16]
0d405     B4 30 00 01 
0d409     7D 60 00 00 
0d40d     00 00 00 00 
0d411     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d415     00 00 00 00 
0d419     00 00 00 00 
0d41d     00 00 00 00 
0d421     00 00 00 00 | 	byte	$00[16]
0d425     AA 50 00 01 
0d429     7D 60 00 00 
0d42d     00 00 00 00 
0d431     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d435     00 00 00 00 
0d439     00 00 00 00 
0d43d     00 00 00 00 
0d441     00 00 00 00 | 	byte	$00[16]
0d445     B4 40 00 00 
0d449     00 00 00 00 
0d44d     00 00 00 00 
0d451     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d455     00 00 00 00 
0d459     00 00 00 00 
0d45d     00 00 00 00 
0d461     00 00 00 00 | 	byte	$00[16]
0d465     B4 40 00 01 
0d469     7D 60 00 00 
0d46d     00 00 00 00 
0d471     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d475     00 00 00 00 
0d479     00 00 00 00 
0d47d     00 00 00 00 
0d481     00 00 00 00 | 	byte	$00[16]
0d485     B4 30 00 00 
0d489     BE 60 00 00 
0d48d     00 00 00 00 
0d491     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d495     00 00 00 00 
0d499     00 00 00 00 
0d49d     00 00 00 00 
0d4a1     00 00 00 00 | 	byte	$00[16]
0d4a5     AA 50 00 01 
0d4a9     7D 60 00 00 
0d4ad     00 00 00 00 
0d4b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4b5     00 00 00 00 
0d4b9     00 00 00 00 
0d4bd     00 00 00 00 
0d4c1     00 00 00 00 | 	byte	$00[16]
0d4c5     B4 40 00 00 
0d4c9     BE 60 00 00 
0d4cd     00 00 00 00 
0d4d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4d5     00 00 00 00 
0d4d9     00 00 00 00 
0d4dd     00 00 00 00 
0d4e1     00 00 00 00 | 	byte	$00[16]
0d4e5     B4 30 00 01 
0d4e9     7D 60 00 00 
0d4ed     00 00 00 00 
0d4f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d4f5     00 00 00 00 
0d4f9     00 00 00 00 
0d4fd     00 00 00 00 
0d501     00 00 00 00 | 	byte	$00[16]
0d505     B4 30 00 01 
0d509     7D 60 00 00 
0d50d     00 00 00 00 
0d511     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d515     00 00 00 00 
0d519     00 00 00 00 
0d51d     00 00 00 00 
0d521     00 00 00 00 | 	byte	$00[16]
0d525     AA 50 00 01 
0d529     7D 60 00 00 
0d52d     00 00 00 00 
0d531     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d535     00 00 00 00 
0d539     00 00 00 00 
0d53d     00 00 00 00 
0d541     00 00 00 00 | 	byte	$00[16]
0d545     B4 40 00 00 
0d549     00 00 00 00 
0d54d     00 00 00 00 
0d551     00 00 00 00 | 	byte	$b4, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d555     00 00 00 00 
0d559     00 00 00 00 
0d55d     00 00 00 00 
0d561     00 00 00 00 | 	byte	$00[16]
0d565     B4 40 00 01 
0d569     7D 60 00 00 
0d56d     00 00 00 00 
0d571     00 00 00 00 | 	byte	$b4, $40, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d575     00 00 00 00 
0d579     00 00 00 00 
0d57d     00 00 00 00 
0d581     00 00 00 00 | 	byte	$00[16]
0d585     B4 30 00 00 
0d589     BE 60 00 00 
0d58d     00 00 00 00 
0d591     00 00 00 00 | 	byte	$b4, $30, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d595     00 00 00 00 
0d599     00 00 00 00 
0d59d     00 00 00 00 
0d5a1     00 00 00 00 | 	byte	$00[16]
0d5a5     AA 50 00 01 
0d5a9     7D 60 00 00 
0d5ad     00 00 00 00 
0d5b1     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d5b5     00 00 00 00 
0d5b9     00 00 00 00 
0d5bd     00 00 00 00 
0d5c1     00 00 00 00 | 	byte	$00[16]
0d5c5     B4 40 00 00 
0d5c9     BE 60 00 00 
0d5cd     00 00 00 00 
0d5d1     00 00 00 00 | 	byte	$b4, $40, $00, $00, $be, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d5d5     00 00 00 00 
0d5d9     00 00 00 00 
0d5dd     00 00 00 00 
0d5e1     00 00 00 00 | 	byte	$00[16]
0d5e5     B4 30 00 01 
0d5e9     7D 60 00 00 
0d5ed     00 00 00 00 
0d5f1     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d5f5     00 00 00 00 
0d5f9     00 00 00 00 
0d5fd     00 00 00 00 
0d601     00 00 00 00 | 	byte	$00[16]
0d605     B4 30 00 01 
0d609     7D 60 00 00 
0d60d     00 00 00 00 
0d611     00 00 00 00 | 	byte	$b4, $30, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d615     00 00 00 00 
0d619     00 00 00 00 
0d61d     00 00 00 00 
0d621     00 00 00 00 | 	byte	$00[16]
0d625     AA 50 00 01 
0d629     7D 60 00 00 
0d62d     00 00 00 00 
0d631     00 00 00 00 | 	byte	$aa, $50, $00, $01, $7d, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0d635     00 00 00 00 
      ...             
10641     00 00 00 00 
10645     00 00 00    | 	byte	$00[12307]
10648     FB FE F0 0A 
1064c     E5 08 E8 03 
10650     E9 06 E7 06 
10654     EE FD 00 EB | 	byte	$fb, $fe, $f0, $0a, $e5, $08, $e8, $03, $e9, $06, $e7, $06, $ee, $fd, $00, $eb
10658     03 FC E7 01 
1065c     05 EE EC 0B 
10660     07 F1 E2 ED 
10664     07 0D 05 FA | 	byte	$03, $fc, $e7, $01, $05, $ee, $ec, $0b, $07, $f1, $e2, $ed, $07, $0d, $05, $fa
10668     EF E8 E4 E3 
1066c     E6 E3 E3 E1 
10670     DE DD E0 E2 
10674     E9 F9 0A 15 | 	byte	$ef, $e8, $e4, $e3, $e6, $e3, $e3, $e1, $de, $dd, $e0, $e2, $e9, $f9, $0a, $15
10678     0F F7 DE E3 
1067c     FD 16 02 DD 
10680     E9 10 06 D7 
10684     F4 1B E7 E2 | 	byte	$0f, $f7, $de, $e3, $fd, $16, $02, $dd, $e9, $10, $06, $d7, $f4, $1b, $e7, $e2
10688     1B E9 E8 1B 
1068c     D8 00 07 DB 
10690     1C D5 0F EA 
10694     FA FE EC 04 | 	byte	$1b, $e9, $e8, $1b, $d8, $00, $07, $db, $1c, $d5, $0f, $ea, $fa, $fe, $ec, $04
10698     E6 0C E8 06 
1069c     F2 F7 04 DE 
106a0     1B CE 20 DB 
106a4     02 09 D3 22 | 	byte	$e6, $0c, $e8, $06, $f2, $f7, $04, $de, $1b, $ce, $20, $db, $02, $09, $d3, $22
106a8     DC F3 1B CD 
106ac     0C 0C CB 14 
106b0     0A CC 0F 13 
106b4     CC FA 23 DD | 	byte	$dc, $f3, $1b, $cd, $0c, $0c, $cb, $14, $0a, $cc, $0f, $13, $cc, $fa, $23, $dd
106b8     DC 21 05 CB 
106bc     F7 27 F2 C9 
106c0     00 26 F5 CA 
106c4     F4 26 09 D1 | 	byte	$dc, $21, $05, $cb, $f7, $27, $f2, $c9, $00, $26, $f5, $ca, $f4, $26, $09, $d1
106c8     D7 13 24 F6 
106cc     CA E1 17 24 
106d0     F9 CD D6 07 
106d4     27 12 E1 C9 | 	byte	$d7, $13, $24, $f6, $ca, $e1, $17, $24, $f9, $cd, $d6, $07, $27, $12, $e1, $c9
106d8     E1 11 27 13 
106dc     E5 C9 D6 00 
106e0     22 23 02 DB 
106e4     C8 D8 FF 1F | 	byte	$e1, $11, $27, $13, $e5, $c9, $d6, $00, $22, $23, $02, $db, $c8, $d8, $ff, $1f
106e8     27 11 EB CF 
106ec     CA E1 04 20 
106f0     28 15 F6 D7 
106f4     C8 D0 EB 0A | 	byte	$27, $11, $eb, $cf, $ca, $e1, $04, $20, $28, $15, $f6, $d7, $c8, $d0, $eb, $0a
106f8     21 27 19 FE 
106fc     E1 CD C8 D7 
10700     F1 0D 20 27 
10704     1F 09 EF D8 | 	byte	$21, $27, $19, $fe, $e1, $cd, $c8, $d7, $f1, $0d, $20, $27, $1f, $09, $ef, $d8
10708     CA CA DA F4 
1070c     0E 22 28 1D 
10710     05 E8 D1 C8 
10714     D2 ED 0B 21 | 	byte	$ca, $ca, $da, $f4, $0e, $22, $28, $1d, $05, $e8, $d1, $c8, $d2, $ed, $0b, $21
10718     27 17 FA DB 
1071c     C9 CE E8 0A 
10720     23 26 0E EB 
10724     CF C9 E1 08 | 	byte	$27, $17, $fa, $db, $c9, $ce, $e8, $0a, $23, $26, $0e, $eb, $cf, $c9, $e1, $08
10728     23 24 06 DF 
1072c     C9 D5 FD 20 
10730     25 05 DB C8 
10734     DF 0E 26 15 | 	byte	$23, $24, $06, $df, $c9, $d5, $fd, $20, $25, $05, $db, $c8, $df, $0e, $26, $15
10738     E6 C9 DD 0C 
1073c     27 0C DB CA 
10740     F3 21 1C E8 
10744     C9 ED 1F 19 | 	byte	$e6, $c9, $dd, $0c, $27, $0c, $db, $ca, $f3, $21, $1c, $e8, $c9, $ed, $1f, $19
10748     E0 CB FE 26 
1074c     02 CC E7 20 
10750     0F D2 E1 1F 
10754     0D CE EC 24 | 	byte	$e0, $cb, $fe, $26, $02, $cc, $e7, $20, $0f, $d2, $e1, $1f, $0d, $ce, $ec, $24
10758     F9 CB 0C 1C 
1075c     D2 ED 23 E4 
10760     DC 22 EE D9 
10764     21 EA DE 23 | 	byte	$f9, $cb, $0c, $1c, $d2, $ed, $23, $e4, $dc, $22, $ee, $d9, $21, $ea, $de, $23
10768     DB F4 18 CC 
1076c     18 F2 E6 1C 
10770     CD 1D E3 02 
10774     FE E8 12 D8 | 	byte	$db, $f4, $18, $cc, $18, $f2, $e6, $1c, $cd, $1d, $e3, $02, $fe, $e8, $12, $d8
10778     1B D1 1D D1 
1077c     1C D3 18 DB 
10780     0D F1 F0 0E 
10784     DA 1D DC 05 | 	byte	$1b, $d1, $1d, $d1, $1c, $d3, $18, $db, $0d, $f1, $f0, $0e, $da, $1d, $dc, $05
10788     08 D7 15 F4 
1078c     E0 17 F6 DB 
10790     10 06 D7 F1 
10794     19 00 D8 EA | 	byte	$08, $d7, $15, $f4, $e0, $17, $f6, $db, $10, $06, $d7, $f1, $19, $00, $d8, $ea
10798     0E 14 F8 E0 
1079c     E3 FA 0A 13 
107a0     0B FC EB E4 
107a4     DF E1 E1 E0 | 	byte	$0e, $14, $f8, $e0, $e3, $fa, $0a, $13, $0b, $fc, $eb, $e4, $df, $e1, $e1, $e0
107a8     E0 E0 E1 DD 
107ac     E1 E5 F0 FC 
107b0     09 0B 08 F7 
107b4     E9 EA FE 0B | 	byte	$e0, $e0, $e1, $dd, $e1, $e5, $f0, $fc, $09, $0b, $08, $f7, $e9, $ea, $fe, $0b
107b8     FA E5 F3 0E 
107bc     FF E2 04 02 
107c0     E5 04 FA EC 
107c4     04 EF FE F8 | 	byte	$fa, $e5, $f3, $0e, $ff, $e2, $04, $02, $e5, $04, $fa, $ec, $04, $ef, $fe, $f8
107c8     F5 FD F2 FD 
107cc     F1 FC FC F0 
107d0     FE F2 FC F5 
107d4     F8 FE ED 04 | 	byte	$f5, $fd, $f2, $fd, $f1, $fc, $fc, $f0, $fe, $f2, $fc, $f5, $f8, $fe, $ed, $04
107d8     EE F7 08 EB 
107dc     F8 0B EF E9 
107e0     07 05 EC DF 
107e4     FD 0E 06 F7 | 	byte	$ee, $f7, $08, $eb, $f8, $0b, $ef, $e9, $07, $05, $ec, $df, $fd, $0e, $06, $f7
107e8     E8 E3 E9 F2 
107ec     FB 04 08 0A 
107f0     0F 0F 0F 0F 
107f4     0C 00 F7 E6 | 	byte	$e8, $e3, $e9, $f2, $fb, $04, $08, $0a, $0f, $0f, $0f, $0f, $0c, $00, $f7, $e6
107f8     DE DC E9 FE 
107fc     12 0F F2 DD 
10800     EA 0B 13 EA 
10804     DD 05 11 DF | 	byte	$de, $dc, $e9, $fe, $12, $0f, $f2, $dd, $ea, $0b, $13, $ea, $dd, $05, $11, $df
10808     E9 1B EE E2 
1080c     19 EB E9 19 
10810     D8 08 FF E2 
10814     1A D4 19 DA | 	byte	$e9, $1b, $ee, $e2, $19, $eb, $e9, $19, $d8, $08, $ff, $e2, $1a, $d4, $19, $da
10818     0E E9 05 F1 
1081c     FF EF 05 E5 
10820     13 D8 1E CF 
10824     1D DF 02 05 | 	byte	$0e, $e9, $05, $f1, $ff, $ef, $05, $e5, $13, $d8, $1e, $cf, $1d, $df, $02, $05
10828     D7 22 D7 02 
1082c     0E CE 1C F7 
10830     D7 22 EA DB 
10834     22 F0 D4 1C | 	byte	$d7, $22, $d7, $02, $0e, $ce, $1c, $f7, $d7, $22, $ea, $db, $22, $f0, $d4, $1c
10838     05 CC 07 1D 
1083c     D8 E1 20 05 
10840     CC F3 25 00 
10844     CB F2 24 06 | 	byte	$05, $cc, $07, $1d, $d8, $e1, $20, $05, $cc, $f3, $25, $00, $cb, $f2, $24, $06
10848     CF DF 19 1D 
1084c     E7 CA F4 21 
10850     16 E1 CA F1 
10854     1F 20 F0 CB | 	byte	$cf, $df, $19, $1d, $e7, $ca, $f4, $21, $16, $e1, $ca, $f1, $1f, $20, $f0, $cb
10858     D8 08 25 15 
1085c     E8 CA D8 03 
10860     23 1F FB D4 
10864     CA E5 0C 25 | 	byte	$d8, $08, $25, $15, $e8, $ca, $d8, $03, $23, $1f, $fb, $d4, $ca, $e5, $0c, $25
10868     1F 00 D8 C9 
1086c     D6 F9 1A 27 
10870     1A FB DA CA 
10874     D1 EC 0C 22 | 	byte	$1f, $00, $d8, $c9, $d6, $f9, $1a, $27, $1a, $fb, $da, $ca, $d1, $ec, $0c, $22
10878     26 14 F7 DB 
1087c     CA CD E0 FE 
10880     17 25 24 12 
10884     FA DF CE C9 | 	byte	$26, $14, $f7, $db, $ca, $cd, $e0, $fe, $17, $25, $24, $12, $fa, $df, $ce, $c9
10888     D4 EA 03 18 
1088c     24 24 18 02 
10890     EA D4 CA CB 
10894     DC F5 0D 21 | 	byte	$d4, $ea, $03, $18, $24, $24, $18, $02, $ea, $d4, $ca, $cb, $dc, $f5, $0d, $21
10898     27 1C 04 EA 
1089c     D2 C9 D1 EA 
108a0     08 1F 27 1A 
108a4     00 E1 CC CC | 	byte	$27, $1c, $04, $ea, $d2, $c9, $d1, $ea, $08, $1f, $27, $1a, $00, $e1, $cc, $cc
108a8     E3 04 1E 27 
108ac     14 F4 D4 C9 
108b0     DB FF 1E 26 
108b4     0F E9 CC CF | 	byte	$e3, $04, $1e, $27, $14, $f4, $d4, $c9, $db, $ff, $1e, $26, $0f, $e9, $cc, $cf
108b8     F0 17 26 10 
108bc     E6 CA D7 00 
108c0     22 1D F5 CF 
108c4     D3 00 23 17 | 	byte	$f0, $17, $26, $10, $e6, $ca, $d7, $00, $22, $1d, $f5, $cf, $d3, $00, $23, $17
108c8     E7 C9 E5 18 
108cc     22 F5 CC E0 
108d0     16 20 ED CA 
108d4     F1 22 0B D2 | 	byte	$e7, $c9, $e5, $18, $22, $f5, $cc, $e0, $16, $20, $ed, $ca, $f1, $22, $0b, $d2
108d8     DC 19 18 DB 
108dc     D8 17 16 D5 
108e0     E1 21 03 CC 
108e4     02 1F DA E4 | 	byte	$dc, $19, $18, $db, $d8, $17, $16, $d5, $e1, $21, $03, $cc, $02, $1f, $da, $e4
108e8     21 ED D7 1F 
108ec     F5 D5 1F EE 
108f0     DC 23 E1 F3 
108f4     1A CE 16 F2 | 	byte	$21, $ed, $d7, $1f, $f5, $d5, $1f, $ee, $dc, $23, $e1, $f3, $1a, $ce, $16, $f2
108f8     E7 1C D0 1C 
108fc     DF 04 F9 EA 
10900     0E DB 18 D5 
10904     1C D4 19 D9 | 	byte	$e7, $1c, $d0, $1c, $df, $04, $f9, $ea, $0e, $db, $18, $d5, $1c, $d4, $19, $d9
10908     13 E6 05 F7 
1090c     E9 14 D5 18 
10910     E5 F6 13 D5 
10914     0B 03 D8 0F | 	byte	$13, $e6, $05, $f7, $e9, $14, $d5, $18, $e5, $f6, $13, $d5, $0b, $03, $d8, $0f
10918     FF D5 03 15 
1091c     E3 E6 0E 0D 
10920     E3 E2 02 15 
10924     02 E3 DF EE | 	byte	$ff, $d5, $03, $15, $e3, $e6, $0e, $0d, $e3, $e2, $02, $15, $02, $e3, $df, $ee
10928     03 14 13 07 
1092c     F6 E9 E0 E0 
10930     DE E0 E1 E1 
10934     E2 E2 E3 E5 | 	byte	$03, $14, $13, $07, $f6, $e9, $e0, $e0, $de, $e0, $e1, $e1, $e2, $e2, $e3, $e5
10938     EA F6 03 0E 
1093c     0D FE EC E1 
10940     EE 0B 06 EF 
10944     E8 FF 05 EF | 	byte	$ea, $f6, $03, $0e, $0d, $fe, $ec, $e1, $ee, $0b, $06, $ef, $e8, $ff, $05, $ef
10948     EE 04 F7 EA 
1094c     07 F8 EE 08 
10950     E6 0B F0 FD 
10954     F7 F7 03 ED | 	byte	$ee, $04, $f7, $ea, $07, $f8, $ee, $08, $e6, $0b, $f0, $fd, $f7, $f7, $03, $ed
10958     05 EC FD FE 
1095c     EB 01 02 E9 
10960     F8 0A F1 E4 
10964     00 10 01 E7 | 	byte	$05, $ec, $fd, $fe, $eb, $01, $02, $e9, $f8, $0a, $f1, $e4, $00, $10, $01, $e7
10968     E4 F9 07 0B 
1096c     07 FD F2 EC 
10970     E7 E5 E1 E2 
10974     E1 E1 E0 E4 | 	byte	$e4, $f9, $07, $0b, $07, $fd, $f2, $ec, $e7, $e5, $e1, $e2, $e1, $e1, $e0, $e4
10978     E8 F1 02 0E 
1097c     12 0C F6 E0 
10980     DF F6 10 0A 
10984     E6 DE 01 16 | 	byte	$e8, $f1, $02, $0e, $12, $0c, $f6, $e0, $df, $f6, $10, $0a, $e6, $de, $01, $16
10988     EC DF 0D 0B 
1098c     D3 01 14 D8 
10990     FD 10 D5 11 
10994     F2 EA 15 D5 | 	byte	$ec, $df, $0d, $0b, $d3, $01, $14, $d8, $fd, $10, $d5, $11, $f2, $ea, $15, $d5
10998     19 DE 0A EF 
1099c     FB FE EF FF 
109a0     F1 FD F4 F4 
109a4     05 E1 19 D1 | 	byte	$19, $de, $0a, $ef, $fb, $fe, $ef, $ff, $f1, $fd, $f4, $f4, $05, $e1, $19, $d1
109a8     1F D9 08 00 
109ac     DA 21 D6 02 
109b0     0E CE 19 F9 
109b4     D4 1E F3 D5 | 	byte	$1f, $d9, $08, $00, $da, $21, $d6, $02, $0e, $ce, $19, $f9, $d4, $1e, $f3, $d5
109b8     1C FA D0 14 
109bc     0D CF F9 22 
109c0     E5 D4 15 15 
109c4     D5 DF 1D 11 | 	byte	$1c, $fa, $d0, $14, $0d, $cf, $f9, $22, $e5, $d4, $15, $15, $d5, $df, $1d, $11
109c8     D4 DC 16 1B 
109cc     E3 CD 00 24 
109d0     05 D2 D6 0A 
109d4     25 02 D3 D1 | 	byte	$d4, $dc, $16, $1b, $e3, $cd, $00, $24, $05, $d2, $d6, $0a, $25, $02, $d3, $d1
109d8     FF 23 16 E7 
109dc     CB DE 0C 25 
109e0     13 E8 CB D7 
109e4     FF 20 21 02 | 	byte	$ff, $23, $16, $e7, $cb, $de, $0c, $25, $13, $e8, $cb, $d7, $ff, $20, $21, $02
109e8     DB CA D9 FF 
109ec     1F 25 0D E9 
109f0     CF CC E3 05 
109f4     1E 25 13 F5 | 	byte	$db, $ca, $d9, $ff, $1f, $25, $0d, $e9, $cf, $cc, $e3, $05, $1e, $25, $13, $f5
109f8     D7 CA D2 EB 
109fc     08 1F 25 18 
10a00     00 E4 D0 CA 
10a04     D6 ED 07 1B | 	byte	$d7, $ca, $d2, $eb, $08, $1f, $25, $18, $00, $e4, $d0, $ca, $d6, $ed, $07, $1b
10a08     24 20 0F F7 
10a0c     DF D0 CA D2 
10a10     E4 FC 11 1F 
10a14     24 20 0F F9 | 	byte	$24, $20, $0f, $f7, $df, $d0, $ca, $d2, $e4, $fc, $11, $1f, $24, $20, $0f, $f9
10a18     E3 D1 CA CE 
10a1c     E0 F8 0F 20 
10a20     25 1C 06 ED 
10a24     D6 CA CF E2 | 	byte	$e3, $d1, $ca, $ce, $e0, $f8, $0f, $20, $25, $1c, $06, $ed, $d6, $ca, $cf, $e2
10a28     FE 17 24 21 
10a2c     0A EE D4 CA 
10a30     D5 F0 0F 23 
10a34     22 0B EA D0 | 	byte	$fe, $17, $24, $21, $0a, $ee, $d4, $ca, $d5, $f0, $0f, $23, $22, $0b, $ea, $d0
10a38     CC E1 04 1F 
10a3c     23 0A E6 CD 
10a40     D1 F3 16 25 
10a44     10 E9 CC D4 | 	byte	$cc, $e1, $04, $1f, $23, $0a, $e6, $cd, $d1, $f3, $16, $25, $10, $e9, $cc, $d4
10a48     FD 1F 1F F9 
10a4c     D1 CF F7 1E 
10a50     1D F2 CD DB 
10a54     0C 24 04 D4 | 	byte	$fd, $1f, $1f, $f9, $d1, $cf, $f7, $1e, $1d, $f2, $cd, $db, $0c, $24, $04, $d4
10a58     D4 07 24 FF 
10a5c     D0 DE 17 1C 
10a60     E4 CE 04 23 
10a64     F3 CC FF 22 | 	byte	$d4, $07, $24, $ff, $d0, $de, $17, $1c, $e4, $ce, $04, $23, $f3, $cc, $ff, $22
10a68     EC CF 0D 1A 
10a6c     D8 E4 20 FB 
10a70     CF 10 0F CE 
10a74     02 17 D0 00 | 	byte	$ec, $cf, $0d, $1a, $d8, $e4, $20, $fb, $cf, $10, $0f, $ce, $02, $17, $d0, $00
10a78     15 CF 09 07 
10a7c     D0 1B EB E8 
10a80     1C D0 16 ED 
10a84     EE 12 D3 20 | 	byte	$15, $cf, $09, $07, $d0, $1b, $eb, $e8, $1c, $d0, $16, $ed, $ee, $12, $d3, $20
10a88     D1 19 DC 0F 
10a8c     E6 07 EA 06 
10a90     E9 0A DE 17 
10a94     D6 1C D7 0C | 	byte	$d1, $19, $dc, $0f, $e6, $07, $ea, $06, $e9, $0a, $de, $17, $d6, $1c, $d7, $0c
10a98     F2 E7 19 D3 
10a9c     0C FB DC 16 
10aa0     F5 DF 15 FD 
10aa4     DB 04 11 E4 | 	byte	$f2, $e7, $19, $d3, $0c, $fb, $dc, $16, $f5, $df, $15, $fd, $db, $04, $11, $e4
10aa8     E4 0B 10 EA 
10aac     DC F4 13 11 
10ab0     F7 E0 DE EF 
10ab4     00 0E 0F 0A | 	byte	$e4, $0b, $10, $ea, $dc, $f4, $13, $11, $f7, $e0, $de, $ef, $00, $0e, $0f, $0a
10ab8     06 FE F8 F2 
10abc     EF EE F0 F2 
10ac0     F8 FF 09 0E 
10ac4     0D 07 F8 EC | 	byte	$06, $fe, $f8, $f2, $ef, $ee, $f0, $f2, $f8, $ff, $09, $0e, $0d, $07, $f8, $ec
10ac8     E4 ED 00 0A 
10acc     00 EA EA 03 
10ad0     08 EE E7 0B 
10ad4     00 E2 08 FB | 	byte	$e4, $ed, $00, $0a, $00, $ea, $ea, $03, $08, $ee, $e7, $0b, $00, $e2, $08, $fb
10ad8     E9 07 F0 F4 
10adc     05 EA FE 00 
10ae0     EA FA 07 ED 
10ae4     E8 00 0A F0 | 	byte	$e9, $07, $f0, $f4, $05, $ea, $fe, $00, $ea, $fa, $07, $ed, $e8, $00, $0a, $f0
10ae8     E1 F5 0B 09 
10aec     FE EC E4 E5 
10af0     EE F6 FE 05 
10af4     06 09 0C 0C | 	byte	$e1, $f5, $0b, $09, $fe, $ec, $e4, $e5, $ee, $f6, $fe, $05, $06, $09, $0c, $0c
10af8     0B 08 00 FB 
10afc     EE E0 DB E5 
10b00     F8 09 12 01 
10b04     E6 DD F5 12 | 	byte	$0b, $08, $00, $fb, $ee, $e0, $db, $e5, $f8, $09, $12, $01, $e6, $dd, $f5, $12
10b08     07 DD E8 11 
10b0c     02 D5 F8 18 
10b10     E1 EC 17 E2 
10b14     F1 13 D6 0C | 	byte	$07, $dd, $e8, $11, $02, $d5, $f8, $18, $e1, $ec, $17, $e2, $f1, $13, $d6, $0c
10b18     F5 E7 16 D4 
10b1c     19 DB 0C EA 
10b20     FE F3 F9 F5 
10b24     FB EF 05 E2 | 	byte	$f5, $e7, $16, $d4, $19, $db, $0c, $ea, $fe, $f3, $f9, $f5, $fb, $ef, $05, $e2
10b28     14 D4 1F D4 
10b2c     12 EF ED 17 
10b30     CF 18 F0 E1 
10b34     20 D8 FA 19 | 	byte	$14, $d4, $1f, $d4, $12, $ef, $ed, $17, $cf, $18, $f0, $e1, $20, $d8, $fa, $19
10b38     D1 02 16 D0 
10b3c     FD 1C D7 EA 
10b40     22 ED D2 12 
10b44     12 D3 E6 1F | 	byte	$d1, $02, $16, $d0, $fd, $1c, $d7, $ea, $22, $ed, $d2, $12, $12, $d3, $e6, $1f
10b48     04 CF ED 21 
10b4c     07 D1 E2 1A 
10b50     18 E1 CF FD 
10b54     23 09 D6 D2 | 	byte	$04, $cf, $ed, $21, $07, $d1, $e2, $1a, $18, $e1, $cf, $fd, $23, $09, $d6, $d2
10b58     01 23 0E E0 
10b5c     CB EE 1A 21 
10b60     FC D4 CF F3 
10b64     1A 22 05 DD | 	byte	$01, $23, $0e, $e0, $cb, $ee, $1a, $21, $fc, $d4, $cf, $f3, $1a, $22, $05, $dd
10b68     CB DE 05 20 
10b6c     20 01 DD CB 
10b70     D6 F8 18 24 
10b74     17 F8 DA CC | 	byte	$cb, $de, $05, $20, $20, $01, $dd, $cb, $d6, $f8, $18, $24, $17, $f8, $da, $cc
10b78     D5 F0 0E 21 
10b7c     22 0E F1 D8 
10b80     CB D1 E7 02 
10b84     19 23 1F 0B | 	byte	$d5, $f0, $0e, $21, $22, $0e, $f1, $d8, $cb, $d1, $e7, $02, $19, $23, $1f, $0b
10b88     F2 DB CD CD 
10b8c     DA F0 08 1A 
10b90     23 20 12 FE 
10b94     E8 D6 CD CD | 	byte	$f2, $db, $cd, $cd, $da, $f0, $08, $1a, $23, $20, $12, $fe, $e8, $d6, $cd, $cd
10b98     D8 EA FF 11 
10b9c     1E 24 1F 10 
10ba0     FC E6 D4 CC 
10ba4     CE DB F1 09 | 	byte	$d8, $ea, $ff, $11, $1e, $24, $1f, $10, $fc, $e6, $d4, $cc, $ce, $db, $f1, $09
10ba8     1C 23 20 0F 
10bac     F7 DE CF CB 
10bb0     D9 F1 0C 1E 
10bb4     24 17 FE E2 | 	byte	$1c, $23, $20, $0f, $f7, $de, $cf, $cb, $d9, $f1, $0c, $1e, $24, $17, $fe, $e2
10bb8     CF CC DF FD 
10bbc     18 23 1B 01 
10bc0     E1 CD D0 EC 
10bc4     0C 22 1F 01 | 	byte	$cf, $cc, $df, $fd, $18, $23, $1b, $01, $e1, $cd, $d0, $ec, $0c, $22, $1f, $01
10bc8     DE CC D8 FA 
10bcc     1B 22 08 E0 
10bd0     CC DB 05 21 
10bd4     1A F3 CF D4 | 	byte	$de, $cc, $d8, $fa, $1b, $22, $08, $e0, $cc, $db, $05, $21, $1a, $f3, $cf, $d4
10bd8     FF 21 16 E9 
10bdc     CC E2 13 22 
10be0     FB CF DC 0E 
10be4     21 F6 CD E8 | 	byte	$ff, $21, $16, $e9, $cc, $e2, $13, $22, $fb, $cf, $dc, $0e, $21, $f6, $cd, $e8
10be8     1C 13 DB D5 
10bec     0D 1D E6 D1 
10bf0     0A 1C E0 D7 
10bf4     17 10 D0 F2 | 	byte	$1c, $13, $db, $d5, $0d, $1d, $e6, $d1, $0a, $1c, $e0, $d7, $17, $10, $d0, $f2
10bf8     21 E9 D8 1B 
10bfc     FD CF 12 08 
10c00     CF 12 02 D1 
10c04     1A F0 E0 20 | 	byte	$21, $e9, $d8, $1b, $fd, $cf, $12, $08, $cf, $12, $02, $d1, $1a, $f0, $e0, $20
10c08     D8 FF 09 D6 
10c0c     1E D7 0A F6 
10c10     EA 10 D7 1C 
10c14     D1 1C D3 1A | 	byte	$d8, $ff, $09, $d6, $1e, $d7, $0a, $f6, $ea, $10, $d7, $1c, $d1, $1c, $d3, $1a
10c18     D5 1B D3 1D 
10c1c     D1 1A DC 0A 
10c20     F3 EB 12 D6 
10c24     15 EC EC 16 | 	byte	$d5, $1b, $d3, $1d, $d1, $1a, $dc, $0a, $f3, $eb, $12, $d6, $15, $ec, $ec, $16
10c28     DB FA 12 D8 
10c2c     FA 17 E2 E5 
10c30     14 05 DA ED 
10c34     12 08 E6 DE | 	byte	$db, $fa, $12, $d8, $fa, $17, $e2, $e5, $14, $05, $da, $ed, $12, $08, $e6, $de
10c38     F8 0F 0E F7 
10c3c     E1 DF EA FA 
10c40     07 10 13 11 
10c44     0E 08 02 01 | 	byte	$f8, $0f, $0e, $f7, $e1, $df, $ea, $fa, $07, $10, $13, $11, $0e, $08, $02, $01
10c48     02 03 04 09 
10c4c     08 0C 0A 01 
10c50     F6 EB E3 ED 
10c54     01 0E 01 E9 | 	byte	$02, $03, $04, $09, $08, $0c, $0a, $01, $f6, $eb, $e3, $ed, $01, $0e, $01, $e9
10c58     E4 FB 09 F7 
10c5c     E7 FC 05 EE 
10c60     F0 06 F3 EC 
10c64     01 FD E6 F3 | 	byte	$e4, $fb, $09, $f7, $e7, $fc, $05, $ee, $f0, $06, $f3, $ec, $01, $fd, $e6, $f3
10c68     0C FF E8 E4 
10c6c     FB 0A 09 FC 
10c70     EE E4 E5 EA 
10c74     EE F6 FB 02 | 	byte	$0c, $ff, $e8, $e4, $fb, $0a, $09, $fc, $ee, $e4, $e5, $ea, $ee, $f6, $fb, $02
10c78     04 03 02 01 
10c7c     FC EF E6 E0 
10c80     DC E5 F3 06 
10c84     10 09 F0 DD | 	byte	$04, $03, $02, $01, $fc, $ef, $e6, $e0, $dc, $e5, $f3, $06, $10, $09, $f0, $dd
10c88     EB 08 11 F0 
10c8c     DC FB 17 F1 
10c90     DC 0D 0B D7 
10c94     04 0E D8 07 | 	byte	$eb, $08, $11, $f0, $dc, $fb, $17, $f1, $dc, $0d, $0b, $d7, $04, $0e, $d8, $07
10c98     04 D9 17 E4 
10c9c     F6 07 DC 1B 
10ca0     D4 16 DD 0B 
10ca4     E7 05 EC 06 | 	byte	$04, $d9, $17, $e4, $f6, $07, $dc, $1b, $d4, $16, $dd, $0b, $e7, $05, $ec, $06
10ca8     E7 0D DB 18 
10cac     D2 1C D7 0D 
10cb0     F2 E9 17 D0 
10cb4     16 F0 E2 1F | 	byte	$e7, $0d, $db, $18, $d2, $1c, $d7, $0d, $f2, $e9, $17, $d0, $16, $f0, $e2, $1f
10cb8     D7 FC 16 D1 
10cbc     05 12 D0 02 
10cc0     16 D4 F4 20 
10cc4     E4 D9 18 09 | 	byte	$d7, $fc, $16, $d1, $05, $12, $d0, $02, $16, $d4, $f4, $20, $e4, $d9, $18, $09
10cc8     CF F3 21 F7 
10ccc     CE FD 21 F7 
10cd0     CE F2 1F 0A 
10cd4     D5 D9 0D 20 | 	byte	$cf, $f3, $21, $f7, $ce, $fd, $21, $f7, $ce, $f2, $1f, $0a, $d5, $d9, $0d, $20
10cd8     F7 CF E0 12 
10cdc     21 FC D2 D6 
10ce0     02 21 13 E8 
10ce4     CD DC 07 22 | 	byte	$f7, $cf, $e0, $12, $21, $fc, $d2, $d6, $02, $21, $13, $e8, $cd, $dc, $07, $22
10ce8     16 F0 D0 D2 
10cec     F3 17 23 10 
10cf0     EC D0 CE EA 
10cf4     0D 21 1D 03 | 	byte	$16, $f0, $d0, $d2, $f3, $17, $23, $10, $ec, $d0, $ce, $ea, $0d, $21, $1d, $03
10cf8     E3 CE D0 E6 
10cfc     05 1D 23 14 
10d00     F9 DF CE CF 
10d04     E1 FC 13 21 | 	byte	$e3, $ce, $d0, $e6, $05, $1d, $23, $14, $f9, $df, $ce, $cf, $e1, $fc, $13, $21
10d08     21 10 FA E1 
10d0c     D0 CC D6 EB 
10d10     02 16 21 21 
10d14     16 03 EE DB | 	byte	$21, $10, $fa, $e1, $d0, $cc, $d6, $eb, $02, $16, $21, $21, $16, $03, $ee, $db
10d18     D0 CC D4 E5 
10d1c     F9 0B 1A 21 
10d20     21 17 07 F5 
10d24     E2 D4 CC CE | 	byte	$d0, $cc, $d4, $e5, $f9, $0b, $1a, $21, $21, $17, $07, $f5, $e2, $d4, $cc, $ce
10d28     D9 EC 01 13 
10d2c     1F 23 1A 08 
10d30     F3 DE D0 CC 
10d34     D6 EA 02 17 | 	byte	$d9, $ec, $01, $13, $1f, $23, $1a, $08, $f3, $de, $d0, $cc, $d6, $ea, $02, $17
10d38     22 20 0F F7 
10d3c     DE CE CE DE 
10d40     FA 12 21 1F 
10d44     0A EE D5 CC | 	byte	$22, $20, $0f, $f7, $de, $ce, $ce, $de, $fa, $12, $21, $1f, $0a, $ee, $d5, $cc
10d48     D9 F6 13 22 
10d4c     1B FF DF CC 
10d50     D5 F5 14 22 
10d54     13 F1 D1 CF | 	byte	$d9, $f6, $13, $22, $1b, $ff, $df, $cc, $d5, $f5, $14, $22, $13, $f1, $d1, $cf
10d58     EC 12 23 0E 
10d5c     E7 CE DA 03 
10d60     20 15 EB CD 
10d64     DF 0C 22 05 | 	byte	$ec, $12, $23, $0e, $e7, $ce, $da, $03, $20, $15, $eb, $cd, $df, $0c, $22, $05
10d68     D8 D2 FD 21 
10d6c     0C DB D2 03 
10d70     21 FD CF E6 
10d74     1A 12 D9 D9 | 	byte	$d8, $d2, $fd, $21, $0c, $db, $d2, $03, $21, $fd, $cf, $e6, $1a, $12, $d9, $d9
10d78     13 16 D9 DC 
10d7c     18 0B D2 F0 
10d80     1F F0 D3 14 
10d84     09 CF 03 16 | 	byte	$13, $16, $d9, $dc, $18, $0b, $d2, $f0, $1f, $f0, $d3, $14, $09, $cf, $03, $16
10d88     D2 FF 17 D1 
10d8c     02 0F D0 14 
10d90     F9 DB 1E D9 
10d94     02 03 DB 1C | 	byte	$d2, $ff, $17, $d1, $02, $0f, $d0, $14, $f9, $db, $1e, $d9, $02, $03, $db, $1c
10d98     D3 13 E7 FD 
10d9c     FD E9 0B DF 
10da0     12 DB 12 DC 
10da4     0E E5 06 F5 | 	byte	$d3, $13, $e7, $fd, $fd, $e9, $0b, $df, $12, $db, $12, $dc, $0e, $e5, $06, $f5
10da8     F1 0A DB 19 
10dac     D9 09 FC DE 
10db0     19 E1 F0 17 
10db4     DE F4 15 E6 | 	byte	$f1, $0a, $db, $19, $d9, $09, $fc, $de, $19, $e1, $f0, $17, $de, $f4, $15, $e6
10db8     E7 13 00 DC 
10dbc     F6 14 FB DB 
10dc0     EA 0A 13 FA 
10dc4     DF E0 F1 06 | 	byte	$e7, $13, $00, $dc, $f6, $14, $fb, $db, $ea, $0a, $13, $fa, $df, $e0, $f1, $06
10dc8     10 0F 04 F6 
10dcc     EA E4 E0 E2 
10dd0     E3 E4 E5 E4 
10dd4     E2 E1 DF E2 | 	byte	$10, $0f, $04, $f6, $ea, $e4, $e0, $e2, $e3, $e4, $e5, $e4, $e2, $e1, $df, $e2
10dd8     E9 F7 05 0C 
10ddc     09 FD ED E5 
10de0     EE 01 08 FA 
10de4     E9 ED 01 00 | 	byte	$e9, $f7, $05, $0c, $09, $fd, $ed, $e5, $ee, $01, $08, $fa, $e9, $ed, $01, $00
10de8     E8 F0 0B 02 
10dec     EA E0 F8 0A 
10df0     09 FE ED E5 
10df4     E5 EB F1 FA | 	byte	$e8, $f0, $0b, $02, $ea, $e0, $f8, $0a, $09, $fe, $ed, $e5, $e5, $eb, $f1, $fa
10df8     00 05 04 09 
10dfc     08 08 00 FF 
10e00     FA ED E2 DD 
10e04     E5 F0 06 12 | 	byte	$00, $05, $04, $09, $08, $08, $00, $ff, $fa, $ed, $e2, $dd, $e5, $f0, $06, $12
10e08     0B EF DD E8 
10e0c     08 10 F2 DA 
10e10     FC 16 F0 D9 
10e14     09 0C DA FD | 	byte	$0b, $ef, $dd, $e8, $08, $10, $f2, $da, $fc, $16, $f0, $d9, $09, $0c, $da, $fd
10e18     10 D9 01 09 
10e1c     DA 13 EB EF 
10e20     0F D8 19 D9 
10e24     0F E8 00 F6 | 	byte	$10, $d9, $01, $09, $da, $13, $eb, $ef, $0f, $d8, $19, $d9, $0f, $e8, $00, $f6
10e28     F7 FB F5 F9 
10e2c     FC EE 08 DE 
10e30     18 D2 1A DC 
10e34     03 02 DB 1F | 	byte	$f7, $fb, $f5, $f9, $fc, $ee, $08, $de, $18, $d2, $1a, $dc, $03, $02, $db, $1f
10e38     D8 FF 0D D0 
10e3c     17 F6 D8 1D 
10e40     EE DB 1D F2 
10e44     D6 17 03 CF | 	byte	$d8, $ff, $0d, $d0, $17, $f6, $d8, $1d, $ee, $db, $1d, $f2, $d6, $17, $03, $cf
10e48     02 1B DF DE 
10e4c     1B 09 D1 ED 
10e50     1E 03 D1 EA 
10e54     1C 0D D8 D8 | 	byte	$02, $1b, $df, $de, $1b, $09, $d1, $ed, $1e, $03, $d1, $ea, $1c, $0d, $d8, $d8
10e58     0B 1F F5 CF 
10e5c     E5 16 1E F2 
10e60     CE DE 0D 21 
10e64     06 DB CE ED | 	byte	$0b, $1f, $f5, $cf, $e5, $16, $1e, $f2, $ce, $de, $0d, $21, $06, $db, $ce, $ed
10e68     15 20 05 DD 
10e6c     CD E2 09 20 
10e70     18 F7 D6 CE 
10e74     E2 06 1E 1F | 	byte	$15, $20, $05, $dd, $cd, $e2, $09, $20, $18, $f7, $d6, $ce, $e2, $06, $1e, $1f
10e78     06 E6 D0 D0 
10e7c     E6 06 1C 21 
10e80     11 F6 DB CE 
10e84     D2 E7 03 18 | 	byte	$06, $e6, $d0, $d0, $e6, $06, $1c, $21, $11, $f6, $db, $ce, $d2, $e7, $03, $18
10e88     21 1B 07 EE 
10e8c     D9 CE D0 E1 
10e90     F8 0D 1D 21 
10e94     1A 09 F4 E0 | 	byte	$21, $1b, $07, $ee, $d9, $ce, $d0, $e1, $f8, $0d, $1d, $21, $1a, $09, $f4, $e0
10e98     D2 CE D3 E1 
10e9c     F6 08 17 1F 
10ea0     20 17 08 F6 
10ea4     E5 D8 CF CF | 	byte	$d2, $ce, $d3, $e1, $f6, $08, $17, $1f, $20, $17, $08, $f6, $e5, $d8, $cf, $cf
10ea8     D5 E2 F3 06 
10eac     15 1F 22 1D 
10eb0     0F FD E9 D9 
10eb4     CF CE D7 E9 | 	byte	$d5, $e2, $f3, $06, $15, $1f, $22, $1d, $0f, $fd, $e9, $d9, $cf, $ce, $d7, $e9
10eb8     FE 11 1E 21 
10ebc     19 07 F0 DC 
10ec0     CF CD DB F2 
10ec4     0A 1C 21 18 | 	byte	$fe, $11, $1e, $21, $19, $07, $f0, $dc, $cf, $cd, $db, $f2, $0a, $1c, $21, $18
10ec8     02 E9 D4 CC 
10ecc     D8 F1 0C 1F 
10ed0     20 0E F0 D6 
10ed4     CD DA F9 16 | 	byte	$02, $e9, $d4, $cc, $d8, $f1, $0c, $1f, $20, $0e, $f0, $d6, $cd, $da, $f9, $16
10ed8     21 15 F6 D8 
10edc     CD E0 02 1D 
10ee0     1D 00 DD CD 
10ee4     E1 08 21 14 | 	byte	$21, $15, $f6, $d8, $cd, $e0, $02, $1d, $1d, $00, $dd, $cd, $e1, $08, $21, $14
10ee8     ED D0 D8 01 
10eec     1F 13 E8 CE 
10ef0     E4 12 1F FB 
10ef4     D1 DD 0D 20 | 	byte	$ed, $d0, $d8, $01, $1f, $13, $e8, $ce, $e4, $12, $1f, $fb, $d1, $dd, $0d, $20
10ef8     F7 CF E7 19 
10efc     13 DE D5 0B 
10f00     1D E8 D1 07 
10f04     1B E3 D7 12 | 	byte	$f7, $cf, $e7, $19, $13, $de, $d5, $0b, $1d, $e8, $d1, $07, $1b, $e3, $d7, $12
10f08     0F D3 EE 1F 
10f0c     EB D6 18 01 
10f10     D0 0D 09 D0 
10f14     0E 06 D1 15 | 	byte	$0f, $d3, $ee, $1f, $eb, $d6, $18, $01, $d0, $0d, $09, $d0, $0e, $06, $d1, $15
10f18     F7 DD 1E DD 
10f1c     FB 0D D4 1C 
10f20     DC FF 01 E5 
10f24     14 D6 1B D4 | 	byte	$f7, $dd, $1e, $dd, $fb, $0d, $d4, $1c, $dc, $ff, $01, $e5, $14, $d6, $1b, $d4
10f28     19 D9 15 DA 
10f2c     14 D9 18 D4 
10f30     1A D7 12 E9 
10f34     F8 06 DA 17 | 	byte	$19, $d9, $15, $da, $14, $d9, $18, $d4, $1a, $d7, $12, $e9, $f8, $06, $da, $17
10f38     E0 FA 0C D9 
10f3c     0A FE DB 0B 
10f40     03 D9 00 10 
10f44     E4 E2 0E 0D | 	byte	$e0, $fa, $0c, $d9, $0a, $fe, $db, $0b, $03, $d9, $00, $10, $e4, $e2, $0e, $0d
10f48     E3 E1 02 12 
10f4c     01 E3 DD F1 
10f50     08 0F 08 FB 
10f54     EA E0 E0 E4 | 	byte	$e3, $e1, $02, $12, $01, $e3, $dd, $f1, $08, $0f, $08, $fb, $ea, $e0, $e0, $e4
10f58     EA EF F3 F8 
10f5c     F9 FB F8 F6 
10f60     EF EB E7 E4 
10f64     E3 ED F7 05 | 	byte	$ea, $ef, $f3, $f8, $f9, $fb, $f8, $f6, $ef, $eb, $e7, $e4, $e3, $ed, $f7, $05
10f68     0B 04 F3 E5 
10f6c     E8 00 0E 01 
10f70     E6 E4 F6 07 
10f74     08 05 FB F1 | 	byte	$0b, $04, $f3, $e5, $e8, $00, $0e, $01, $e6, $e4, $f6, $07, $08, $05, $fb, $f1
10f78     E9 E4 E2 E5 
10f7c     E4 E6 E5 E3 
10f80     E1 DE DB E1 
10f84     E6 F1 FD 0B | 	byte	$e9, $e4, $e2, $e5, $e4, $e6, $e5, $e3, $e1, $de, $db, $e1, $e6, $f1, $fd, $0b
10f88     0F 06 F1 DF 
10f8c     E3 FE 11 05 
10f90     E4 E2 06 0F 
10f94     E8 E0 0D 08 | 	byte	$0f, $06, $f1, $df, $e3, $fe, $11, $05, $e4, $e2, $06, $0f, $e8, $e0, $0d, $08
10f98     DA FA 11 DC 
10f9c     F9 10 D9 09 
10fa0     FF DD 17 DB 
10fa4     07 F7 EE 0F | 	byte	$da, $fa, $11, $dc, $f9, $10, $d9, $09, $ff, $dd, $17, $db, $07, $f7, $ee, $0f
10fa8     D9 18 D4 1A 
10fac     D4 19 D4 1A 
10fb0     D5 18 DB 0B 
10fb4     EF F3 0C D7 | 	byte	$d9, $18, $d4, $1a, $d4, $19, $d4, $1a, $d5, $18, $db, $0b, $ef, $f3, $0c, $d7
10fb8     1D D7 04 02 
10fbc     D6 1C E2 EF 
10fc0     1A D5 FD 14 
10fc4     D3 FF 16 D5 | 	byte	$1d, $d7, $04, $02, $d6, $1c, $e2, $ef, $1a, $d5, $fd, $14, $d3, $ff, $16, $d5
10fc8     F5 1D E1 DF 
10fcc     1B FF CF FF 
10fd0     1F E8 D4 0B 
10fd4     1A E4 D3 07 | 	byte	$f5, $1d, $e1, $df, $1b, $ff, $cf, $ff, $1f, $e8, $d4, $0b, $1a, $e4, $d3, $07
10fd8     1E F1 CF F2 
10fdc     1D 0E DD D3 
10fe0     00 1F 09 DD 
10fe4     D0 F6 1C 18 | 	byte	$1e, $f1, $cf, $f2, $1d, $0e, $dd, $d3, $00, $1f, $09, $dd, $d0, $f6, $1c, $18
10fe8     EF D0 DB 03 
10fec     1F 15 EF D1 
10ff0     D4 F6 17 20 
10ff4     08 E5 D0 D5 | 	byte	$ef, $d0, $db, $03, $1f, $15, $ef, $d1, $d4, $f6, $17, $20, $08, $e5, $d0, $d5
10ff8     F4 12 20 15 
10ffc     F8 DA CE D9 
11000     F4 10 1F 1C 
11004     06 EB D4 CE | 	byte	$f4, $12, $20, $15, $f8, $da, $ce, $d9, $f4, $10, $1f, $1c, $06, $eb, $d4, $ce
11008     D9 F1 0A 1B 
1100c     20 15 01 E8 
11010     D6 CE D4 E4 
11014     FC 10 1D 20 | 	byte	$d9, $f1, $0a, $1b, $20, $15, $01, $e8, $d6, $ce, $d4, $e4, $fc, $10, $1d, $20
11018     18 07 F3 E0 
1101c     D2 CE D3 E1 
11020     F4 06 15 1E 
11024     1F 19 0B FB | 	byte	$18, $07, $f3, $e0, $d2, $ce, $d3, $e1, $f4, $06, $15, $1e, $1f, $19, $0b, $fb
11028     EA DB D2 CF 
1102c     D3 DD EB FC 
11030     0A 17 1F 20 
11034     1A 0D FE EB | 	byte	$ea, $db, $d2, $cf, $d3, $dd, $eb, $fc, $0a, $17, $1f, $20, $1a, $0d, $fe, $eb
11038     DB D1 CE D3 
1103c     E1 F4 06 16 
11040     1F 1F 15 03 
11044     EF DC D0 CE | 	byte	$db, $d1, $ce, $d3, $e1, $f4, $06, $16, $1f, $1f, $15, $03, $ef, $dc, $d0, $ce
11048     D9 ED 03 16 
1104c     1F 1E 0D F6 
11050     DF D0 CF DE 
11054     F7 0F 1F 1F | 	byte	$d9, $ed, $03, $16, $1f, $1e, $0d, $f6, $df, $d0, $cf, $de, $f7, $0f, $1f, $1f
11058     0B F1 D7 CE 
1105c     D8 F3 0F 1F 
11060     1A 01 E2 CF 
11064     D4 F0 10 20 | 	byte	$0b, $f1, $d7, $ce, $d8, $f3, $0f, $1f, $1a, $01, $e2, $cf, $d4, $f0, $10, $20
11068     13 F2 D5 CF 
1106c     EC 0F 1F 0E 
11070     E7 CF DC 03 
11074     1E 12 EA CF | 	byte	$13, $f2, $d5, $cf, $ec, $0f, $1f, $0e, $e7, $cf, $dc, $03, $1e, $12, $ea, $cf
11078     E1 0E 20 00 
1107c     D6 D7 04 1F 
11080     02 D6 DA 0C 
11084     1E F1 CF F4 | 	byte	$e1, $0e, $20, $00, $d6, $d7, $04, $1f, $02, $d6, $da, $0c, $1e, $f1, $cf, $f4
11088     1E 02 D2 EA 
1108c     1C 02 D0 F1 
11090     1F F3 D1 0B 
11094     14 D7 EE 1E | 	byte	$1e, $02, $d2, $ea, $1c, $02, $d0, $f1, $1f, $f3, $d1, $0b, $14, $d7, $ee, $1e
11098     E7 DD 1B F1 
1109c     D9 1A F0 DD 
110a0     1D E3 EE 18 
110a4     D3 0B FB DD | 	byte	$e7, $dd, $1b, $f1, $d9, $1a, $f0, $dd, $1d, $e3, $ee, $18, $d3, $0b, $fb, $dd
110a8     1B D5 0D F2 
110ac     F0 0A DA 18 
110b0     D4 19 D6 17 
110b4     D8 16 D8 18 | 	byte	$1b, $d5, $0d, $f2, $f0, $0a, $da, $18, $d4, $19, $d6, $17, $d8, $16, $d8, $18
110b8     D5 18 D6 13 
110bc     E2 00 FE E5 
110c0     13 D9 0A FC 
110c4     DE 15 EC E7 | 	byte	$d5, $18, $d6, $13, $e2, $00, $fe, $e5, $13, $d9, $0a, $fc, $de, $15, $ec, $e7
110c8     16 E8 E2 13 
110cc     FA D9 04 10 
110d0     EB DE 02 11 
110d4     F6 DD E9 04 | 	byte	$16, $e8, $e2, $13, $fa, $d9, $04, $10, $eb, $de, $02, $11, $f6, $dd, $e9, $04
110d8     11 03 EB DC 
110dc     E2 F2 01 0F 
110e0     0F 0D 06 FE 
110e4     F6 F2 F1 EF | 	byte	$11, $03, $eb, $dc, $e2, $f2, $01, $0f, $0f, $0d, $06, $fe, $f6, $f2, $f1, $ef
110e8     EF F4 F6 FB 
110ec     01 08 0D 0D 
110f0     07 F9 EA E2 
110f4     EB F9 08 09 | 	byte	$ef, $f4, $f6, $fb, $01, $08, $0d, $0d, $07, $f9, $ea, $e2, $eb, $f9, $08, $09
110f8     06 FB F2 EA 
110fc     E6 E4 E3 E4 
11100     E0 DF DE DD 
11104     E0 E2 EB F4 | 	byte	$06, $fb, $f2, $ea, $e6, $e4, $e3, $e4, $e0, $df, $de, $dd, $e0, $e2, $eb, $f4
11108     04 0B 0E 06 
1110c     F3 E0 E1 F5 
11110     0C 0B ED DC 
11114     FB 13 00 D9 | 	byte	$04, $0b, $0e, $06, $f3, $e0, $e1, $f5, $0c, $0b, $ed, $dc, $fb, $13, $00, $d9
11118     F3 15 F0 DE 
1111c     0F FF DA 0B 
11120     FC DD 15 E8 
11124     F0 10 D7 15 | 	byte	$f3, $15, $f0, $de, $0f, $ff, $da, $0b, $fc, $dd, $15, $e8, $f0, $10, $d7, $15
11128     E2 FE FD E9 
1112c     0D DC 14 D8 
11130     16 D8 15 DB 
11134     0F E5 03 F8 | 	byte	$e2, $fe, $fd, $e9, $0d, $dc, $14, $d8, $16, $d8, $15, $db, $0f, $e5, $03, $f8
11138     EC 10 D5 1B 
1113c     DB 00 04 D6 
11140     1B E3 EF 17 
11144     D5 01 0F D2 | 	byte	$ec, $10, $d5, $1b, $db, $00, $04, $d6, $1b, $e3, $ef, $17, $d5, $01, $0f, $d2
11148     06 0F D2 FF 
1114c     17 D9 E9 1E 
11150     F0 D3 0C 15 
11154     DA E0 17 0B | 	byte	$06, $0f, $d2, $ff, $17, $d9, $e9, $1e, $f0, $d3, $0c, $15, $da, $e0, $17, $0b
11158     D6 E2 16 11 
1115c     DD D6 08 1E 
11160     F5 D0 E6 15 
11164     19 F1 D0 E5 | 	byte	$d6, $e2, $16, $11, $dd, $d6, $08, $1e, $f5, $d0, $e6, $15, $19, $f1, $d0, $e5
11168     10 1F FF D6 
1116c     D3 F8 1A 1B 
11170     F9 D6 D2 F1 
11174     14 1F 0A E7 | 	byte	$10, $1f, $ff, $d6, $d3, $f8, $1a, $1b, $f9, $d6, $d2, $f1, $14, $1f, $0a, $e7
11178     D0 D6 F5 13 
1117c     1F 12 F4 D8 
11180     CF DD FA 14 
11184     1F 17 FF E4 | 	byte	$d0, $d6, $f5, $13, $1f, $12, $f4, $d8, $cf, $dd, $fa, $14, $1f, $17, $ff, $e4
11188     D1 D0 E1 FC 
1118c     12 1E 1D 0B 
11190     F4 DE D1 D0 
11194     DD F3 08 18 | 	byte	$d1, $d0, $e1, $fc, $12, $1e, $1d, $0b, $f4, $de, $d1, $d0, $dd, $f3, $08, $18
11198     1F 1B 0C F9 
1119c     E5 D6 CF D2 
111a0     DE F0 02 12 
111a4     1C 1F 19 0C | 	byte	$1f, $1b, $0c, $f9, $e5, $d6, $cf, $d2, $de, $f0, $02, $12, $1c, $1f, $19, $0c
111a8     FC EB DD D3 
111ac     CF D3 DD EB 
111b0     FB 09 15 1B 
111b4     1E 1B 11 04 | 	byte	$fc, $eb, $dd, $d3, $cf, $d3, $dd, $eb, $fb, $09, $15, $1b, $1e, $1b, $11, $04
111b8     F6 E7 DA D1 
111bc     CF D2 DE ED 
111c0     FE 0D 19 1F 
111c4     1D 13 04 F1 | 	byte	$f6, $e7, $da, $d1, $cf, $d2, $de, $ed, $fe, $0d, $19, $1f, $1d, $13, $04, $f1
111c8     E1 D4 CF D3 
111cc     E1 F5 09 18 
111d0     1F 1C 0E F9 
111d4     E4 D4 CF D7 | 	byte	$e1, $d4, $cf, $d3, $e1, $f5, $09, $18, $1f, $1c, $0e, $f9, $e4, $d4, $cf, $d7
111d8     E9 00 15 1F 
111dc     1B 09 F0 D8 
111e0     CF D5 EC 06 
111e4     1A 1F 0F F4 | 	byte	$e9, $00, $15, $1f, $1b, $09, $f0, $d8, $cf, $d5, $ec, $06, $1a, $1f, $0f, $f4
111e8     D8 CF DA F7 
111ec     13 1F 13 F5 
111f0     D8 CF E3 05 
111f4     1D 18 F9 D7 | 	byte	$d8, $cf, $da, $f7, $13, $1f, $13, $f5, $d8, $cf, $e3, $05, $1d, $18, $f9, $d7
111f8     D0 EB 10 1F 
111fc     07 E0 CF E7 
11200     10 1F 01 D8 
11204     D5 FC 1D 0C | 	byte	$d0, $eb, $10, $1f, $07, $e0, $cf, $e7, $10, $1f, $01, $d8, $d5, $fc, $1d, $0c
11208     DD D3 FD 1E 
1120c     05 D6 DD 10 
11210     18 E6 D2 02 
11214     1D EE D2 04 | 	byte	$dd, $d3, $fd, $1e, $05, $d6, $dd, $10, $18, $e6, $d2, $02, $1d, $ee, $d2, $04
11218     1A E4 D8 13 
1121c     0A D4 F5 1C 
11220     E5 E0 1B F2 
11224     D8 18 F9 D8 | 	byte	$1a, $e4, $d8, $13, $0a, $d4, $f5, $1c, $e5, $e0, $1b, $f2, $d8, $18, $f9, $d8
11228     19 F0 E0 1B 
1122c     DD F8 0F D3 
11230     15 EA F2 0D 
11234     D5 1A D8 0E | 	byte	$19, $f0, $e0, $1b, $dd, $f8, $0f, $d3, $15, $ea, $f2, $0d, $d5, $1a, $d8, $0e
11238     E9 FD FA ED 
1123c     04 E7 08 E7 
11240     06 EC FE F5 
11244     EF 07 DD 16 | 	byte	$e9, $fd, $fa, $ed, $04, $e7, $08, $e7, $06, $ec, $fe, $f5, $ef, $07, $dd, $16
11248     D9 0D F2 E9 
1124c     15 D9 02 04 
11250     D9 0C FF DB 
11254     08 06 DB F5 | 	byte	$d9, $0d, $f2, $e9, $15, $d9, $02, $04, $d9, $0c, $ff, $db, $08, $06, $db, $f5
11258     11 EF DF FE 
1125c     13 F6 D8 EC 
11260     0B 11 FB E1 
11264     DF F0 06 0E | 	byte	$11, $ef, $df, $fe, $13, $f6, $d8, $ec, $0b, $11, $fb, $e1, $df, $f0, $06, $0e
11268     0A 01 F2 E9 
1126c     E3 E2 E0 E3 
11270     E7 E7 E8 E4 
11274     E4 E3 E1 E1 | 	byte	$0a, $01, $f2, $e9, $e3, $e2, $e0, $e3, $e7, $e7, $e8, $e4, $e4, $e3, $e1, $e1
11278     E5 EC F5 00 
1127c     07 08 0A 0A 
11280     04 03 02 00 
11284     03 06 09 0B | 	byte	$e5, $ec, $f5, $00, $07, $08, $0a, $0a, $04, $03, $02, $00, $03, $06, $09, $0b
11288     0F 0E 0A F9 
1128c     EF E3 E1 F0 
11290     04 0E 05 E9 
11294     E0 F8 12 23 | 	byte	$0f, $0e, $0a, $f9, $ef, $e3, $e1, $f0, $04, $0e, $05, $e9, $e0, $f8, $12, $23
11298     E1 E4 0D 09 
1129c     DE F0 12 ED 
112a0     E6 12 F0 E5 
112a4     15 E4 F6 0D | 	byte	$e1, $e4, $0d, $09, $de, $f0, $12, $ed, $e6, $12, $f0, $e5, $15, $e4, $f6, $0d
112a8     D8 11 E9 F6 
112ac     07 E0 16 D7 
112b0     17 D8 15 DA 
112b4     14 D9 16 D6 | 	byte	$d8, $11, $e9, $f6, $07, $e0, $16, $d7, $17, $d8, $15, $da, $14, $d9, $16, $d6
112b8     19 D7 14 E1 
112bc     02 FD E3 18 
112c0     D3 12 F2 E5 
112c4     19 D7 02 0B | 	byte	$19, $d7, $14, $e1, $02, $fd, $e3, $18, $d3, $12, $f2, $e5, $19, $d7, $02, $0b
112c8     D2 0E 00 D3 
112cc     11 03 D2 09 
112d0     0E D4 F8 1C 
112d4     E5 DA 14 0A | 	byte	$d2, $0e, $00, $d3, $11, $03, $d2, $09, $0e, $d4, $f8, $1c, $e5, $da, $14, $0a
112d8     D5 E9 1B 03 
112dc     D3 EA 19 09 
112e0     D7 DD 0F 1A 
112e4     EF D0 ED 18 | 	byte	$d5, $e9, $1b, $03, $d3, $ea, $19, $09, $d7, $dd, $0f, $1a, $ef, $d0, $ed, $18
112e8     15 E9 D0 E9 
112ec     13 1B FA D6 
112f0     D6 FA 1A 18 
112f4     F6 D5 D3 F2 | 	byte	$15, $e9, $d0, $e9, $13, $1b, $fa, $d6, $d6, $fa, $1a, $18, $f6, $d5, $d3, $f2
112f8     13 1E 09 E8 
112fc     D1 D6 F3 11 
11300     1F 12 F6 D8 
11304     CF DB F6 10 | 	byte	$13, $1e, $09, $e8, $d1, $d6, $f3, $11, $1f, $12, $f6, $d8, $cf, $db, $f6, $10
11308     1E 18 03 E8 
1130c     D4 D0 DC F4 
11310     0C 1B 1E 11 
11314     FC E6 D5 CF | 	byte	$1e, $18, $03, $e8, $d4, $d0, $dc, $f4, $0c, $1b, $1e, $11, $fc, $e6, $d5, $cf
11318     D7 E8 FE 10 
1131c     1C 1E 14 04 
11320     F0 E0 D4 D0 
11324     D6 E3 F4 05 | 	byte	$d7, $e8, $fe, $10, $1c, $1e, $14, $04, $f0, $e0, $d4, $d0, $d6, $e3, $f4, $05
11328     13 1C 1D 18 
1132c     0B FB EC DE 
11330     D4 D0 D3 DB 
11334     E7 F6 04 10 | 	byte	$13, $1c, $1d, $18, $0b, $fb, $ec, $de, $d4, $d0, $d3, $db, $e7, $f6, $04, $10
11338     18 1C 1C 15 
1133c     0B FF F1 E3 
11340     D8 D1 CF D4 
11344     DE EC FC 0B | 	byte	$18, $1c, $1c, $15, $0b, $ff, $f1, $e3, $d8, $d1, $cf, $d4, $de, $ec, $fc, $0b
11348     16 1C 1E 17 
1134c     0A FA E9 DB 
11350     D2 D0 D6 E5 
11354     F8 09 18 1F | 	byte	$16, $1c, $1e, $17, $0a, $fa, $e9, $db, $d2, $d0, $d6, $e5, $f8, $09, $18, $1f
11358     1B 0E FC E7 
1135c     D8 D0 D3 E3 
11360     F9 0D 1B 1E 
11364     12 FE E6 D4 | 	byte	$1b, $0e, $fc, $e7, $d8, $d0, $d3, $e3, $f9, $0d, $1b, $1e, $12, $fe, $e6, $d4
11368     CF DC F3 0B 
1136c     1C 1C 0A F1 
11370     D9 CF DC F7 
11374     11 1E 13 F7 | 	byte	$cf, $dc, $f3, $0b, $1c, $1c, $0a, $f1, $d9, $cf, $dc, $f7, $11, $1e, $13, $f7
11378     DB CF DF 00 
1137c     19 1C 01 E0 
11380     CF E1 05 1C 
11384     12 EF D2 DA | 	byte	$db, $cf, $df, $00, $19, $1c, $01, $e0, $cf, $e1, $05, $1c, $12, $ef, $d2, $da
11388     00 1C 11 E8 
1138c     D0 E6 11 1B 
11390     F6 D2 E0 0F 
11394     1A F1 D1 EE | 	byte	$00, $1c, $11, $e8, $d0, $e6, $11, $1b, $f6, $d2, $e0, $0f, $1a, $f1, $d1, $ee
11398     1A 0A D9 DC 
1139c     10 14 DF DA 
113a0     10 11 DA E4 
113a4     19 FE D1 FF | 	byte	$1a, $0a, $d9, $dc, $10, $14, $df, $da, $10, $11, $da, $e4, $19, $fe, $d1, $ff
113a8     16 DB E9 1B 
113ac     E8 E0 1A EE 
113b0     DE 1A E9 E6 
113b4     1A DC FB 0D | 	byte	$16, $db, $e9, $1b, $e8, $e0, $1a, $ee, $de, $1a, $e9, $e6, $1a, $dc, $fb, $0d
113b8     D4 16 E7 F3 
113bc     0D D6 18 DB 
113c0     0B EE F8 FF 
113c4     EA 09 E2 0E | 	byte	$d4, $16, $e7, $f3, $0d, $d6, $18, $db, $0b, $ee, $f8, $ff, $ea, $09, $e2, $0e
113c8     E0 0D E3 08 
113cc     EA FE FB E9 
113d0     0E D9 15 E2 
113d4     FE 04 DC 13 | 	byte	$e0, $0d, $e3, $08, $ea, $fe, $fb, $e9, $0e, $d9, $15, $e2, $fe, $04, $dc, $13
113d8     EB EB 13 E3 
113dc     F1 13 E8 E6 
113e0     11 FC D9 01 
113e4     11 F3 DC F6 | 	byte	$eb, $eb, $13, $e3, $f1, $13, $e8, $e6, $11, $fc, $d9, $01, $11, $f3, $dc, $f6
113e8     0F 03 E6 E1 
113ec     F5 0A 0C FB 
113f0     E7 DE E3 F2 
113f4     FE 0A 0F 0E | 	byte	$0f, $03, $e6, $e1, $f5, $0a, $0c, $fb, $e7, $de, $e3, $f2, $fe, $0a, $0f, $0e
113f8     0B 07 04 FF 
113fc     FD FC FE 00 
11400     01 05 08 0B 
11404     0C 0D 0E 0E | 	byte	$0b, $07, $04, $ff, $fd, $fc, $fe, $00, $01, $05, $08, $0b, $0c, $0d, $0e, $0e
11408     0D 0A FD FB 
1140c     EF E5 E1 E3 
11410     F1 03 0E 08 
11414     F1 DF E7 02 | 	byte	$0d, $0a, $fd, $fb, $ef, $e5, $e1, $e3, $f1, $03, $0e, $08, $f1, $df, $e7, $02
11418     10 FA DC EF 
1141c     10 FE DE F4 
11420     12 F0 E1 10 
11424     F6 DE 0F F1 | 	byte	$10, $fa, $dc, $ef, $10, $fe, $de, $f4, $12, $f0, $e1, $10, $f6, $de, $0f, $f1
11428     E4 14 E0 FB 
1142c     02 DF 17 DA 
11430     0D ED FB FB 
11434     EB 07 E6 08 | 	byte	$e4, $14, $e0, $fb, $02, $df, $17, $da, $0d, $ed, $fb, $fb, $eb, $07, $e6, $08
11438     E8 07 EA FF 
1143c     F8 EE 0A DB 
11440     18 D4 11 ED 
11444     EE 12 D4 11 | 	byte	$e8, $07, $ea, $ff, $f8, $ee, $0a, $db, $18, $d4, $11, $ed, $ee, $12, $d4, $11
11448     F5 E1 19 E0 
1144c     F0 17 D9 F6 
11450     17 DA F0 1C 
11454     E3 DF 19 FD | 	byte	$f5, $e1, $19, $e0, $f0, $17, $d9, $f6, $17, $da, $f0, $1c, $e3, $df, $19, $fd
11458     D3 01 19 E4 
1145c     D9 0F 12 DD 
11460     DB 0F 15 E4 
11464     D4 01 1D FB | 	byte	$d3, $01, $19, $e4, $d9, $0f, $12, $dd, $db, $0f, $15, $e4, $d4, $01, $1d, $fb
11468     D3 E2 0E 1A 
1146c     F4 D2 E1 0C 
11470     1D 01 DA D4 
11474     F4 16 19 FA | 	byte	$d3, $e2, $0e, $1a, $f4, $d2, $e1, $0c, $1d, $01, $da, $d4, $f4, $16, $19, $fa
11478     D8 D2 EE 0F 
1147c     1D 0C EA D3 
11480     D6 F1 0F 1D 
11484     12 F7 DC D0 | 	byte	$d8, $d2, $ee, $0f, $1d, $0c, $ea, $d3, $d6, $f1, $0f, $1d, $12, $f7, $dc, $d0
11488     DC F6 10 1D 
1148c     18 02 E8 D4 
11490     D1 DE F5 0C 
11494     1A 1C 0F FB | 	byte	$dc, $f6, $10, $1d, $18, $02, $e8, $d4, $d1, $de, $f5, $0c, $1a, $1c, $0f, $fb
11498     E5 D5 D0 D9 
1149c     EA FF 10 1B 
114a0     1C 12 02 F0 
114a4     DF D4 D1 D7 | 	byte	$e5, $d5, $d0, $d9, $ea, $ff, $10, $1b, $1c, $12, $02, $f0, $df, $d4, $d1, $d7
114a8     E5 F5 05 13 
114ac     1B 1C 16 0A 
114b0     FB EC E0 D5 
114b4     D1 D3 DC E6 | 	byte	$e5, $f5, $05, $13, $1b, $1c, $16, $0a, $fb, $ec, $e0, $d5, $d1, $d3, $dc, $e6
114b8     F5 02 0E 17 
114bc     1B 1B 15 0C 
114c0     01 F5 E8 DE 
114c4     D6 D1 D2 D8 | 	byte	$f5, $02, $0e, $17, $1b, $1b, $15, $0c, $01, $f5, $e8, $de, $d6, $d1, $d2, $d8
114c8     E1 EF FD 09 
114cc     14 1B 1D 19 
114d0     0F 02 F3 E3 
114d4     D8 D1 D1 D8 | 	byte	$e1, $ef, $fd, $09, $14, $1b, $1d, $19, $0f, $02, $f3, $e3, $d8, $d1, $d1, $d8
114d8     E6 F7 07 15 
114dc     1C 1C 13 03 
114e0     F1 E1 D4 D0 
114e4     D7 E7 FC 0D | 	byte	$e6, $f7, $07, $15, $1c, $1c, $13, $03, $f1, $e1, $d4, $d0, $d7, $e7, $fc, $0d
114e8     1A 1D 12 FF 
114ec     EA D8 D0 D7 
114f0     E9 01 15 1D 
114f4     15 01 E8 D4 | 	byte	$1a, $1d, $12, $ff, $ea, $d8, $d0, $d7, $e9, $01, $15, $1d, $15, $01, $e8, $d4
114f8     D1 E1 FC 13 
114fc     1D 12 F7 DC 
11500     D0 DC F9 15 
11504     1D 09 E9 D3 | 	byte	$d1, $e1, $fc, $13, $1d, $12, $f7, $dc, $d0, $dc, $f9, $15, $1d, $09, $e9, $d3
11508     D7 F6 14 1B 
1150c     03 DF D0 E7 
11510     0D 1D 06 DF 
11514     D1 F0 16 16 | 	byte	$d7, $f6, $14, $1b, $03, $df, $d0, $e7, $0d, $1d, $06, $df, $d1, $f0, $16, $16
11518     F1 D2 E5 11 
1151c     17 EF D1 EE 
11520     18 0D DD DA 
11524     0A 17 E7 D5 | 	byte	$f1, $d2, $e5, $11, $17, $ef, $d1, $ee, $18, $0d, $dd, $da, $0a, $17, $e7, $d5
11528     06 18 E4 D8 
1152c     0E 0E D8 EC 
11530     1A F1 D6 10 
11534     05 D3 05 0C | 	byte	$06, $18, $e4, $d8, $0e, $0e, $d8, $ec, $1a, $f1, $d6, $10, $05, $d3, $05, $0c
11538     D4 03 0C D3 
1153c     0B 00 D6 17 
11540     E9 EC 13 D6 
11544     10 EE EF 0D | 	byte	$d4, $03, $0c, $d3, $0b, $00, $d6, $17, $e9, $ec, $13, $d6, $10, $ee, $ef, $0d
11548     D8 18 D9 10 
1154c     E4 02 F1 F8 
11550     FB F3 FA F5 
11554     F6 FB EB 09 | 	byte	$d8, $18, $d9, $10, $e4, $02, $f1, $f8, $fb, $f3, $fa, $f5, $f6, $fb, $eb, $09
11558     DE 13 D9 0F 
1155c     E9 F7 06 DA 
11560     11 EE E7 14 
11564     E1 F1 11 E5 | 	byte	$de, $13, $d9, $0f, $e9, $f7, $06, $da, $11, $ee, $e7, $14, $e1, $f1, $11, $e5
11568     ED 11 F3 DF 
1156c     07 0A E5 E6 
11570     0A 0A EE E0 
11574     F4 0E 0B F3 | 	byte	$ed, $11, $f3, $df, $07, $0a, $e5, $e6, $0a, $0a, $ee, $e0, $f4, $0e, $0b, $f3
11578     E0 E2 F3 05 
1157c     0D 09 FE F1 
11580     E7 E3 E2 E5 
11584     E7 EB EC ED | 	byte	$e0, $e2, $f3, $05, $0d, $09, $fe, $f1, $e7, $e3, $e2, $e5, $e7, $eb, $ec, $ed
11588     EE EF F1 F8 
1158c     01 04 09 0C 
11590     0A FF F1 E4 
11594     E2 F1 04 0E | 	byte	$ee, $ef, $f1, $f8, $01, $04, $09, $0c, $0a, $ff, $f1, $e4, $e2, $f1, $04, $0e
11598     01 E6 E0 FB 
1159c     11 00 DE E9 
115a0     11 FC DE F6 
115a4     0F E8 EA 12 | 	byte	$01, $e6, $e0, $fb, $11, $00, $de, $e9, $11, $fc, $de, $f6, $0f, $e8, $ea, $12
115a8     EB E9 13 E3 
115ac     F8 0B D9 0F 
115b0     EC F2 0A DC 
115b4     15 D8 12 DF | 	byte	$eb, $e9, $13, $e3, $f8, $0b, $d9, $0f, $ec, $f2, $0a, $dc, $15, $d8, $12, $df
115b8     0C E5 07 E7 
115bc     09 E3 0E DA 
115c0     16 D5 16 DF 
115c4     05 F8 E6 15 | 	byte	$0c, $e5, $07, $e7, $09, $e3, $0e, $da, $16, $d5, $16, $df, $05, $f8, $e6, $15
115c8     D5 0E F5 E3 
115cc     19 DC F9 0F 
115d0     D5 05 0A D3 
115d4     05 0E D4 FB | 	byte	$d5, $0e, $f5, $e3, $19, $dc, $f9, $0f, $d5, $05, $0a, $d3, $05, $0e, $d4, $fb
115d8     16 DD E6 19 
115dc     F7 D2 03 18 
115e0     E4 D9 0C 14 
115e4     E2 D8 08 18 | 	byte	$16, $dd, $e6, $19, $f7, $d2, $03, $18, $e4, $d9, $0c, $14, $e2, $d8, $08, $18
115e8     EF D1 F4 1A 
115ec     09 DD D6 FD 
115f0     1B 08 DE D3 
115f4     F4 17 16 F2 | 	byte	$ef, $d1, $f4, $1a, $09, $dd, $d6, $fd, $1b, $08, $de, $d3, $f4, $17, $16, $f2
115f8     D4 DA FD 19 
115fc     16 F6 D8 D4 
11600     EE 0E 1C 0F 
11604     F0 D6 D2 E8 | 	byte	$d4, $da, $fd, $19, $16, $f6, $d8, $d4, $ee, $0e, $1c, $0f, $f0, $d6, $d2, $e8
11608     05 19 1A 05 
1160c     E9 D6 D2 E3 
11610     FD 13 1C 15 
11614     01 E8 D7 D1 | 	byte	$05, $19, $1a, $05, $e9, $d6, $d2, $e3, $fd, $13, $1c, $15, $01, $e8, $d7, $d1
11618     DB EF 05 15 
1161c     1C 16 06 F2 
11620     DF D4 D2 DB 
11624     EB FF 0E 18 | 	byte	$db, $ef, $05, $15, $1c, $16, $06, $f2, $df, $d4, $d2, $db, $eb, $ff, $0e, $18
11628     1C 15 08 F9 
1162c     E7 DB D3 D2 
11630     D9 E5 F6 03 
11634     10 18 1B 18 | 	byte	$1c, $15, $08, $f9, $e7, $db, $d3, $d2, $d9, $e5, $f6, $03, $10, $18, $1b, $18
11638     0F 04 F7 E9 
1163c     DE D6 D3 D4 
11640     DA E4 F1 FD 
11644     07 11 17 1A | 	byte	$0f, $04, $f7, $e9, $de, $d6, $d3, $d4, $da, $e4, $f1, $fd, $07, $11, $17, $1a
11648     19 14 0C 01 
1164c     F6 EA E0 D7 
11650     D2 D1 D6 DF 
11654     EC FA 06 11 | 	byte	$19, $14, $0c, $01, $f6, $ea, $e0, $d7, $d2, $d1, $d6, $df, $ec, $fa, $06, $11
11658     19 1C 18 10 
1165c     03 F4 E5 D9 
11660     D3 D1 D8 E6 
11664     F7 06 14 1B | 	byte	$19, $1c, $18, $10, $03, $f4, $e5, $d9, $d3, $d1, $d8, $e6, $f7, $06, $14, $1b
11668     1B 12 03 F1 
1166c     DF D4 D1 D9 
11670     E9 FF 0F 1A 
11674     1B 0F FB E5 | 	byte	$1b, $12, $03, $f1, $df, $d4, $d1, $d9, $e9, $ff, $0f, $1a, $1b, $0f, $fb, $e5
11678     D6 D1 DA EF 
1167c     07 17 1C 0F 
11680     F8 DF D1 D6 
11684     EB 07 19 1A | 	byte	$d6, $d1, $da, $ef, $07, $17, $1c, $0f, $f8, $df, $d1, $d6, $eb, $07, $19, $1a
11688     05 E9 D4 D5 
1168c     EC 0A 1B 13 
11690     F6 D9 D2 E9 
11694     0C 1C 0B E8 | 	byte	$05, $e9, $d4, $d5, $ec, $0a, $1b, $13, $f6, $d9, $d2, $e9, $0c, $1c, $0b, $e8
11698     D1 DF 04 1B 
1169c     0B E5 D1 EA 
116a0     10 18 F4 D3 
116a4     E2 0D 18 F1 | 	byte	$d1, $df, $04, $1b, $0b, $e5, $d1, $ea, $10, $18, $f4, $d3, $e2, $0d, $18, $f1
116a8     D2 EE 17 0C 
116ac     DC DB 0C 15 
116b0     E4 D7 0A 13 
116b4     DF DE 13 06 | 	byte	$d2, $ee, $17, $0c, $dc, $db, $0c, $15, $e4, $d7, $0a, $13, $df, $de, $13, $06
116b8     D5 F7 18 E5 
116bc     E1 17 F7 D7 
116c0     13 FD D6 11 
116c4     F9 DA 16 EA | 	byte	$d5, $f7, $18, $e5, $e1, $17, $f7, $d7, $13, $fd, $d6, $11, $f9, $da, $16, $ea
116c8     E8 16 D9 05 
116cc     FE DE 17 D9 
116d0     09 F2 EE 0A 
116d4     DB 16 D7 16 | 	byte	$e8, $16, $d9, $05, $fe, $de, $17, $d9, $09, $f2, $ee, $0a, $db, $16, $d7, $16
116d8     D9 12 DC 11 
116dc     DC 12 DA 13 
116e0     D9 14 DF 05 
116e4     F2 EF 0F D9 | 	byte	$d9, $12, $dc, $11, $dc, $12, $da, $13, $d9, $14, $df, $05, $f2, $ef, $0f, $d9
116e8     11 EC ED 10 
116ec     DD FF 07 DC 
116f0     02 07 DD F8 
116f4     0F E9 E4 0B | 	byte	$11, $ec, $ed, $10, $dd, $ff, $07, $dc, $02, $07, $dd, $f8, $0f, $e9, $e4, $0b
116f8     06 E0 E4 09 
116fc     0D EC DE EF 
11700     08 0A F5 E5 
11704     E2 EE FF 0B | 	byte	$06, $e0, $e4, $09, $0d, $ec, $de, $ef, $08, $0a, $f5, $e5, $e2, $ee, $ff, $0b
11708     0D 02 FB F2 
1170c     E6 E1 E0 E0 
11710     E4 EB F6 05 
11714     0B 09 FE EE | 	byte	$0d, $02, $fb, $f2, $e6, $e1, $e0, $e0, $e4, $eb, $f6, $05, $0b, $09, $fe, $ee
11718     E2 E8 FC 0E 
1171c     03 E9 E0 FE 
11720     11 FE DE F3 
11724     10 F7 DD 06 | 	byte	$e2, $e8, $fc, $0e, $03, $e9, $e0, $fe, $11, $fe, $de, $f3, $10, $f7, $dd, $06
11728     08 DC FA 0C 
1172c     DD FD 05 DA 
11730     0D F2 E7 13 
11734     D8 0F E9 FB | 	byte	$08, $dc, $fa, $0c, $dd, $fd, $05, $da, $0d, $f2, $e7, $13, $d8, $0f, $e9, $fb
11738     FB E8 0A DF 
1173c     10 DC 12 DC 
11740     12 DE 0D E5 
11744     01 F6 EC 0C | 	byte	$fb, $e8, $0a, $df, $10, $dc, $12, $dc, $12, $de, $0d, $e5, $01, $f6, $ec, $0c
11748     D8 17 DB 03 
1174c     FE DC 17 DF 
11750     F7 0E D6 08 
11754     03 D5 0F FF | 	byte	$d8, $17, $db, $03, $fe, $dc, $17, $df, $f7, $0e, $d6, $08, $03, $d5, $0f, $ff
11758     D4 0C 06 D4 
1175c     FE 15 DE E5 
11760     17 FC D3 FB 
11764     19 EC D4 02 | 	byte	$d4, $0c, $06, $d4, $fe, $15, $de, $e5, $17, $fc, $d3, $fb, $19, $ec, $d4, $02
11768     19 EF D3 F8 
1176c     1A 00 D7 E0 
11770     0E 18 F2 D3 
11774     E5 0E 19 F9 | 	byte	$19, $ef, $d3, $f8, $1a, $00, $d7, $e0, $0e, $18, $f2, $d3, $e5, $0e, $19, $f9
11778     D7 DA FF 19 
1177c     10 ED D3 DC 
11780     FF 18 15 F9 
11784     DA D2 E7 06 | 	byte	$d7, $da, $ff, $19, $10, $ed, $d3, $dc, $ff, $18, $15, $f9, $da, $d2, $e7, $06
11788     1A 15 FD E0 
1178c     D2 DA F5 0E 
11790     1B 14 00 E5 
11794     D4 D3 E3 FC | 	byte	$1a, $15, $fd, $e0, $d2, $da, $f5, $0e, $1b, $14, $00, $e5, $d4, $d3, $e3, $fc
11798     10 1A 17 06 
1179c     F2 DE D3 D4 
117a0     E2 F7 09 17 
117a4     1B 14 05 F3 | 	byte	$10, $1a, $17, $06, $f2, $de, $d3, $d4, $e2, $f7, $09, $17, $1b, $14, $05, $f3
117a8     E2 D7 D2 D7 
117ac     E4 F5 05 12 
117b0     19 1A 13 07 
117b4     F9 EA DE D5 | 	byte	$e2, $d7, $d2, $d7, $e4, $f5, $05, $12, $19, $1a, $13, $07, $f9, $ea, $de, $d5
117b8     D3 D7 E0 EC 
117bc     F9 06 10 17 
117c0     19 18 11 07 
117c4     FC F0 E5 DC | 	byte	$d3, $d7, $e0, $ec, $f9, $06, $10, $17, $19, $18, $11, $07, $fc, $f0, $e5, $dc
117c8     D6 D4 D6 DB 
117cc     E3 EE F9 02 
117d0     0B 13 18 19 
117d4     18 12 08 FE | 	byte	$d6, $d4, $d6, $db, $e3, $ee, $f9, $02, $0b, $13, $18, $19, $18, $12, $08, $fe
117d8     F2 E6 DC D6 
117dc     D2 D4 DA E4 
117e0     F2 FF 0B 14 
117e4     19 1A 14 08 | 	byte	$f2, $e6, $dc, $d6, $d2, $d4, $da, $e4, $f2, $ff, $0b, $14, $19, $1a, $14, $08
117e8     FA EC DF D5 
117ec     D2 D6 E1 F0 
117f0     01 0F 19 1B 
117f4     13 05 F5 E3 | 	byte	$fa, $ec, $df, $d5, $d2, $d6, $e1, $f0, $01, $0f, $19, $1b, $13, $05, $f5, $e3
117f8     D6 D1 D8 E8 
117fc     FC 0D 19 1A 
11800     0F FB E5 D6 
11804     D2 DD F2 09 | 	byte	$d6, $d1, $d8, $e8, $fc, $0d, $19, $1a, $0f, $fb, $e5, $d6, $d2, $dd, $f2, $09
11808     18 1A 0A F2 
1180c     DB D2 DB F4 
11810     0D 1A 13 FB 
11814     DF D2 DD FA | 	byte	$18, $1a, $0a, $f2, $db, $d2, $db, $f4, $0d, $1a, $13, $fb, $df, $d2, $dd, $fa
11818     13 19 04 E4 
1181c     D3 DE FE 18 
11820     13 F4 D6 D9 
11824     FB 17 12 ED | 	byte	$13, $19, $04, $e4, $d3, $de, $fe, $18, $13, $f4, $d6, $d9, $fb, $17, $12, $ed
11828     D3 E3 0A 19 
1182c     FB D6 DF 0A 
11830     19 F3 D4 EC 
11834     15 0B DC DD | 	byte	$d3, $e3, $0a, $19, $fb, $d6, $df, $0a, $19, $f3, $d4, $ec, $15, $0b, $dc, $dd
11838     0D 12 E1 DB 
1183c     0D 0E DB E5 
11840     17 FF D3 FE 
11844     13 DC EC 18 | 	byte	$0d, $12, $e1, $db, $0d, $0e, $db, $e5, $17, $ff, $d3, $fe, $13, $dc, $ec, $18
11848     E8 E2 17 EB 
1184c     E1 17 E8 E9 
11850     16 DB FD 08 
11854     D6 15 E7 F5 | 	byte	$e8, $e2, $17, $eb, $e1, $17, $e8, $e9, $16, $db, $fd, $08, $d6, $15, $e7, $f5
11858     0A D9 16 DB 
1185c     09 EE F6 00 
11860     E6 0A DF 0F 
11864     DD 10 DD 0F | 	byte	$0a, $d9, $16, $db, $09, $ee, $f6, $00, $e6, $0a, $df, $0f, $dd, $10, $dd, $0f
11868     E2 06 EE F7 
1186c     01 E4 10 DB 
11870     0D ED F1 0C 
11874     DB 09 FD DF | 	byte	$e2, $06, $ee, $f7, $01, $e4, $10, $db, $0d, $ed, $f1, $0c, $db, $09, $fd, $df
11878     0E F3 E0 0F 
1187c     FB DD 04 09 
11880     E1 EB 0D FE 
11884     E1 EB 08 07 | 	byte	$0e, $f3, $e0, $0f, $fb, $dd, $04, $09, $e1, $eb, $0d, $fe, $e1, $eb, $08, $07
11888     ED E0 F1 08 
1188c     0D FD E7 DD 
11890     E7 FA 06 0C 
11894     09 00 F4 E8 | 	byte	$ed, $e0, $f1, $08, $0d, $fd, $e7, $dd, $e7, $fa, $06, $0c, $09, $00, $f4, $e8
11898     E1 E9 F9 0A 
1189c     09 F6 E2 E6 
118a0     01 0F F8 DD 
118a4     F2 0E FB DF | 	byte	$e1, $e9, $f9, $0a, $09, $f6, $e2, $e6, $01, $0f, $f8, $dd, $f2, $0e, $fb, $df
118a8     F7 0F EB E5 
118ac     0D F4 E0 0E 
118b0     F1 E5 12 E3 
118b4     F6 07 D9 13 | 	byte	$f7, $0f, $eb, $e5, $0d, $f4, $e0, $0e, $f1, $e5, $12, $e3, $f6, $07, $d9, $13
118b8     E3 02 FB E9 
118bc     0A DD 12 DA 
118c0     13 D9 14 D9 
118c4     15 D8 12 DF | 	byte	$e3, $02, $fb, $e9, $0a, $dd, $12, $da, $13, $d9, $14, $d9, $15, $d8, $12, $df
118c8     09 EC F6 03 
118cc     DE 16 DA 09 
118d0     F7 E2 16 DC 
118d4     FD 0B D5 0A | 	byte	$09, $ec, $f6, $03, $de, $16, $da, $09, $f7, $e2, $16, $dc, $fd, $0b, $d5, $0a
118d8     FF D7 10 FF 
118dc     D6 0D 05 D5 
118e0     01 13 DD E7 
118e4     16 FA D4 FA | 	byte	$ff, $d7, $10, $ff, $d6, $0d, $05, $d5, $01, $13, $dd, $e7, $16, $fa, $d4, $fa
118e8     18 ED D5 01 
118ec     18 F0 D3 F7 
118f0     19 01 D9 E0 
118f4     0A 18 F5 D5 | 	byte	$18, $ed, $d5, $01, $18, $f0, $d3, $f7, $19, $01, $d9, $e0, $0a, $18, $f5, $d5
118f8     E3 0B 19 FD 
118fc     D9 D8 FA 17 
11900     13 F2 D6 D9 
11904     F8 15 17 FE | 	byte	$e3, $0b, $19, $fd, $d9, $d8, $fa, $17, $13, $f2, $d6, $d9, $f8, $15, $17, $fe
11908     DF D3 E2 01 
1190c     17 17 03 E6 
11910     D4 D7 ED 07 
11914     18 18 05 ED | 	byte	$df, $d3, $e2, $01, $17, $17, $03, $e6, $d4, $d7, $ed, $07, $18, $18, $05, $ed
11918     D9 D3 DD F2 
1191c     08 17 19 0E 
11920     FA E5 D7 D3 
11924     DB ED FF 0F | 	byte	$d9, $d3, $dd, $f2, $08, $17, $19, $0e, $fa, $e5, $d7, $d3, $db, $ed, $ff, $0f
11928     19 18 0E FF 
1192c     ED DE D5 D3 
11930     DB E8 F9 07 
11934     12 18 18 11 | 	byte	$19, $18, $0e, $ff, $ed, $de, $d5, $d3, $db, $e8, $f9, $07, $12, $18, $18, $11
11938     06 F8 E9 DE 
1193c     D6 D4 D6 DF 
11940     EA F7 03 0E 
11944     15 18 18 12 | 	byte	$06, $f8, $e9, $de, $d6, $d4, $d6, $df, $ea, $f7, $03, $0e, $15, $18, $18, $12
11948     0A 00 F5 EA 
1194c     E0 D9 D6 D5 
11950     D8 DD E5 EF 
11954     FA 02 0B 12 | 	byte	$0a, $00, $f5, $ea, $e0, $d9, $d6, $d5, $d8, $dd, $e5, $ef, $fa, $02, $0b, $12
11958     17 18 17 12 
1195c     0A 00 F6 EB 
11960     E0 D9 D4 D3 
11964     D7 DE E8 F5 | 	byte	$17, $18, $17, $12, $0a, $00, $f6, $eb, $e0, $d9, $d4, $d3, $d7, $de, $e8, $f5
11968     01 0C 14 19 
1196c     18 12 09 FC 
11970     EE E1 D8 D3 
11974     D5 DD EB FB | 	byte	$01, $0c, $14, $19, $18, $12, $09, $fc, $ee, $e1, $d8, $d3, $d5, $dd, $eb, $fb
11978     08 13 19 18 
1197c     0D FF EE DE 
11980     D4 D3 DC EC 
11984     00 0F 19 18 | 	byte	$08, $13, $19, $18, $0d, $ff, $ee, $de, $d4, $d3, $dc, $ec, $00, $0f, $19, $18
11988     0C F9 E4 D7 
1198c     D3 DD F2 07 
11990     17 19 0C F6 
11994     DF D3 D8 ED | 	byte	$0c, $f9, $e4, $d7, $d3, $dd, $f2, $07, $17, $19, $0c, $f6, $df, $d3, $d8, $ed
11998     07 18 17 03 
1199c     E8 D4 D7 EE 
119a0     0A 19 0F F3 
119a4     D8 D5 EE 0D | 	byte	$07, $18, $17, $03, $e8, $d4, $d7, $ee, $0a, $19, $0f, $f3, $d8, $d5, $ee, $0d
119a8     19 05 E4 D3 
119ac     E5 08 19 04 
119b0     E0 D5 F2 14 
119b4     11 EA D4 EC | 	byte	$19, $05, $e4, $d3, $e5, $08, $19, $04, $e0, $d5, $f2, $14, $11, $ea, $d4, $ec
119b8     13 0F E6 D5 
119bc     FA 18 FE D6 
119c0     E9 14 07 D8 
119c4     E7 14 03 D6 | 	byte	$13, $0f, $e6, $d5, $fa, $18, $fe, $d6, $e9, $14, $07, $d8, $e7, $14, $03, $d6
119c8     F0 17 F0 D7 
119cc     0B 0B D7 F7 
119d0     16 DF EB 17 
119d4     E4 E9 17 E0 | 	byte	$f0, $17, $f0, $d7, $0b, $0b, $d7, $f7, $16, $df, $eb, $17, $e4, $e9, $17, $e0
119d8     F3 13 D8 04 
119dc     03 DB 15 E2 
119e0     F8 06 DA 16 
119e4     DB 0A EC F7 | 	byte	$f3, $13, $d8, $04, $03, $db, $15, $e2, $f8, $06, $da, $16, $db, $0a, $ec, $f7
119e8     FF E7 0C DF 
119ec     11 DC 11 DC 
119f0     0E E0 09 E8 
119f4     00 F6 EC 08 | 	byte	$ff, $e7, $0c, $df, $11, $dc, $11, $dc, $0e, $e0, $09, $e8, $00, $f6, $ec, $08
119f8     DE 12 E1 FF 
119fc     01 E0 12 E6 
11a00     EE 0F E1 F5 
11a04     0C E3 F2 0E | 	byte	$de, $12, $e1, $ff, $01, $e0, $12, $e6, $ee, $0f, $e1, $f5, $0c, $e3, $f2, $0e
11a08     ED E3 09 04 
11a0c     E2 EC 0C 01 
11a10     E5 E2 01 0F 
11a14     FC E5 E2 F6 | 	byte	$ed, $e3, $09, $04, $e2, $ec, $0c, $01, $e5, $e2, $01, $0f, $fc, $e5, $e2, $f6
11a18     07 0B 01 EF 
11a1c     E3 E4 F7 0A 
11a20     08 F4 E0 E9 
11a24     07 0D EE DE | 	byte	$07, $0b, $01, $ef, $e3, $e4, $f7, $0a, $08, $f4, $e0, $e9, $07, $0d, $ee, $de
11a28     02 0D EE E2 
11a2c     07 02 DD FC 
11a30     0A DF FA 0A 
11a34     DC 04 FD E0 | 	byte	$02, $0d, $ee, $e2, $07, $02, $dd, $fc, $0a, $df, $fa, $0a, $dc, $04, $fd, $e0
11a38     12 E2 01 FC 
11a3c     E3 10 DA 10 
11a40     DF 08 E7 02 
11a44     ED FF ED 02 | 	byte	$12, $e2, $01, $fc, $e3, $10, $da, $10, $df, $08, $e7, $02, $ed, $ff, $ed, $02
11a48     E8 0B DF 12 
11a4c     D8 14 DE 06 
11a50     F4 EA 11 D8 
11a54     0D F0 E7 14 | 	byte	$e8, $0b, $df, $12, $d8, $14, $de, $06, $f4, $ea, $11, $d8, $0d, $f0, $e7, $14
11a58     DA FE 09 D6 
11a5c     08 03 D6 0B 
11a60     05 D6 03 0E 
11a64     DA F0 17 ED | 	byte	$da, $fe, $09, $d6, $08, $03, $d6, $0b, $05, $d6, $03, $0e, $da, $f0, $17, $ed
11a68     D9 0A 0D DD 
11a6c     E4 13 07 D9 
11a70     E4 11 0C E1 
11a74     DA 04 18 F7 | 	byte	$d9, $0a, $0d, $dd, $e4, $13, $07, $d9, $e4, $11, $0c, $e1, $da, $04, $18, $f7
11a78     D5 E6 0E 16 
11a7c     F2 D5 E2 09 
11a80     19 01 DF D5 
11a84     EF 10 18 01 | 	byte	$d5, $e6, $0e, $16, $f2, $d5, $e2, $09, $19, $01, $df, $d5, $ef, $10, $18, $01
11a88     DF D3 E7 05 
11a8c     18 10 F5 DA 
11a90     D3 E5 01 16 
11a94     18 04 EB D7 | 	byte	$df, $d3, $e7, $05, $18, $10, $f5, $da, $d3, $e5, $01, $16, $18, $04, $eb, $d7
11a98     D5 E5 FE 11 
11a9c     19 11 FD E7 
11aa0     D7 D3 DF F2 
11aa4     06 14 19 11 | 	byte	$d5, $e5, $fe, $11, $19, $11, $fd, $e7, $d7, $d3, $df, $f2, $06, $14, $19, $11
11aa8     01 EE DE D4 
11aac     D6 DF F0 01 
11ab0     0E 17 18 10 
11ab4     03 F4 E5 DA | 	byte	$01, $ee, $de, $d4, $d6, $df, $f0, $01, $0e, $17, $18, $10, $03, $f4, $e5, $da
11ab8     D4 D6 DD E9 
11abc     F8 05 0F 16 
11ac0     18 15 0D 01 
11ac4     F5 E9 DF D8 | 	byte	$d4, $d6, $dd, $e9, $f8, $05, $0f, $16, $18, $15, $0d, $01, $f5, $e9, $df, $d8
11ac8     D5 D6 DB E4 
11acc     EF FA 03 0D 
11ad0     13 17 17 13 
11ad4     0E 06 FD F4 | 	byte	$d5, $d6, $db, $e4, $ef, $fa, $03, $0d, $13, $17, $17, $13, $0e, $06, $fd, $f4
11ad8     EA E2 DC D8 
11adc     D6 D7 DA E0 
11ae0     E8 F2 FC 05 
11ae4     0E 14 18 18 | 	byte	$ea, $e2, $dc, $d8, $d6, $d7, $da, $e0, $e8, $f2, $fc, $05, $0e, $14, $18, $18
11ae8     16 10 07 FD 
11aec     F1 E6 DD D7 
11af0     D4 D6 DC E6 
11af4     F2 FF 0A 13 | 	byte	$16, $10, $07, $fd, $f1, $e6, $dd, $d7, $d4, $d6, $dc, $e6, $f2, $ff, $0a, $13
11af8     18 18 12 08 
11afc     FA EC DF D7 
11b00     D3 D7 E2 F1 
11b04     01 0E 17 18 | 	byte	$18, $18, $12, $08, $fa, $ec, $df, $d7, $d3, $d7, $e2, $f1, $01, $0e, $17, $18
11b08     11 04 F3 E1 
11b0c     D6 D3 DA EA 
11b10     FE 0E 18 17 
11b14     0A F6 E2 D6 | 	byte	$11, $04, $f3, $e1, $d6, $d3, $da, $ea, $fe, $0e, $18, $17, $0a, $f6, $e2, $d6
11b18     D5 E3 F9 0D 
11b1c     18 14 01 E9 
11b20     D7 D4 E5 FE 
11b24     13 18 08 ED | 	byte	$d5, $e3, $f9, $0d, $18, $14, $01, $e9, $d7, $d4, $e5, $fe, $13, $18, $08, $ed
11b28     D7 D6 EC 09 
11b2c     18 0E F1 D8 
11b30     D7 F3 11 17 
11b34     FF DD D5 F0 | 	byte	$d7, $d6, $ec, $09, $18, $0e, $f1, $d8, $d7, $f3, $11, $17, $ff, $dd, $d5, $f0
11b38     11 15 F5 D7 
11b3c     DE 04 18 FE 
11b40     DA DD 05 18 
11b44     F7 D5 EB 14 | 	byte	$11, $15, $f5, $d7, $de, $04, $18, $fe, $da, $dd, $05, $18, $f7, $d5, $eb, $14
11b48     09 DD DF 0D 
11b4c     0E DF E0 0F 
11b50     09 DA EC 16 
11b54     F5 D7 08 0B | 	byte	$09, $dd, $df, $0d, $0e, $df, $e0, $0f, $09, $da, $ec, $16, $f5, $d7, $08, $0b
11b58     D8 F7 14 DE 
11b5c     ED 16 E2 EF 
11b60     14 DB FA 0B 
11b64     D8 0B F6 E3 | 	byte	$d8, $f7, $14, $de, $ed, $16, $e2, $ef, $14, $db, $fa, $0b, $d8, $0b, $f6, $e3
11b68     15 DB 06 F6 
11b6c     E8 10 D9 13 
11b70     DE 09 EB FA 
11b74     F6 F3 FC EF | 	byte	$15, $db, $06, $f6, $e8, $10, $d9, $13, $de, $09, $eb, $fa, $f6, $f3, $fc, $ef
11b78     FE F0 FB F5 
11b7c     F3 02 E5 0E 
11b80     DA 11 DE 02 
11b84     FB E4 10 E0 | 	byte	$fe, $f0, $fb, $f5, $f3, $02, $e5, $0e, $da, $11, $de, $02, $fb, $e4, $10, $e0
11b88     FE 03 DE 09 
11b8c     F9 E0 0B FA 
11b90     E0 05 04 DF 
11b94     F0 0F F5 DE | 	byte	$fe, $03, $de, $09, $f9, $e0, $0b, $fa, $e0, $05, $04, $df, $f0, $0f, $f5, $de
11b98     F8 0D F7 E1 
11b9c     EB 07 09 F3 
11ba0     E2 E8 FA 0C 
11ba4     01 EA E0 F8 | 	byte	$f8, $0d, $f7, $e1, $eb, $07, $09, $f3, $e2, $e8, $fa, $0c, $01, $ea, $e0, $f8
11ba8     0E FD E0 EE 
11bac     0D F9 DF FC 
11bb0     0B E5 EE 0F 
11bb4     EA EC 0F E3 | 	byte	$0e, $fd, $e0, $ee, $0d, $f9, $df, $fc, $0b, $e5, $ee, $0f, $ea, $ec, $0f, $e3
11bb8     F5 0B DB 09 
11bbc     F3 E9 0C DC 
11bc0     10 E3 05 F3 
11bc4     F4 FF EA 04 | 	byte	$f5, $0b, $db, $09, $f3, $e9, $0c, $dc, $10, $e3, $05, $f3, $f4, $ff, $ea, $04
11bc8     E5 08 E6 01 
11bcc     EB FD F8 EE 
11bd0     08 DD 14 DA 
11bd4     0B EE EF 0D | 	byte	$e5, $08, $e6, $01, $eb, $fd, $f8, $ee, $08, $dd, $14, $da, $0b, $ee, $ef, $0d
11bd8     D8 0E F2 E5 
11bdc     15 DF F5 0F 
11be0     D8 FF 0D D9 
11be4     FC 12 DC EF | 	byte	$d8, $0e, $f2, $e5, $15, $df, $f5, $0f, $d8, $ff, $0d, $d9, $fc, $12, $dc, $ef
11be8     16 EB DB 0F 
11bec     07 D8 EF 17 
11bf0     F8 D5 F8 18 
11bf4     F8 D6 F0 15 | 	byte	$16, $eb, $db, $0f, $07, $d8, $ef, $17, $f8, $d5, $f8, $18, $f8, $d6, $f0, $15
11bf8     05 DC DD 06 
11bfc     17 F7 D7 E3 
11c00     0A 17 FA D9 
11c04     DB FD 17 0E | 	byte	$05, $dc, $dd, $06, $17, $f7, $d7, $e3, $0a, $17, $fa, $d9, $db, $fd, $17, $0e
11c08     EC D6 DE FE 
11c0c     16 12 F6 DB 
11c10     D6 EA 08 17 
11c14     10 F8 DF D4 | 	byte	$ec, $d6, $de, $fe, $16, $12, $f6, $db, $d6, $ea, $08, $17, $10, $f8, $df, $d4
11c18     DF F9 0F 18 
11c1c     0F F9 E2 D5 
11c20     D7 E8 FF 10 
11c24     18 11 01 EC | 	byte	$df, $f9, $0f, $18, $0f, $f9, $e2, $d5, $d7, $e8, $ff, $10, $18, $11, $01, $ec
11c28     DB D4 D8 E7 
11c2c     FA 0B 16 18 
11c30     10 01 F1 E1 
11c34     D8 D4 DA E6 | 	byte	$db, $d4, $d8, $e7, $fa, $0b, $16, $18, $10, $01, $f1, $e1, $d8, $d4, $da, $e6
11c38     F6 04 0F 16 
11c3c     17 11 06 F9 
11c40     EC E0 D8 D5 
11c44     D7 DE E9 F6 | 	byte	$f6, $04, $0f, $16, $17, $11, $06, $f9, $ec, $e0, $d8, $d5, $d7, $de, $e9, $f6
11c48     01 0B 12 16 
11c4c     16 12 0A 01 
11c50     F7 EC E3 DC 
11c54     D8 D6 D8 DD | 	byte	$01, $0b, $12, $16, $16, $12, $0a, $01, $f7, $ec, $e3, $dc, $d8, $d6, $d8, $dd
11c58     E4 ED F7 FF 
11c5c     07 0E 12 15 
11c60     15 13 0E 08 
11c64     00 F8 F0 E7 | 	byte	$e4, $ed, $f7, $ff, $07, $0e, $12, $15, $15, $13, $0e, $08, $00, $f8, $f0, $e7
11c68     E0 DA D7 D5 
11c6c     D7 DC E3 ED 
11c70     F7 01 0A 11 
11c74     16 18 15 0F | 	byte	$e0, $da, $d7, $d5, $d7, $dc, $e3, $ed, $f7, $01, $0a, $11, $16, $18, $15, $0f
11c78     06 FC F0 E5 
11c7c     DC D7 D4 D7 
11c80     DF EB F8 04 
11c84     0F 16 18 13 | 	byte	$06, $fc, $f0, $e5, $dc, $d7, $d4, $d7, $df, $eb, $f8, $04, $0f, $16, $18, $13
11c88     09 FD EE E0 
11c8c     D8 D4 D9 E4 
11c90     F3 03 10 17 
11c94     16 0B FC EA | 	byte	$09, $fd, $ee, $e0, $d8, $d4, $d9, $e4, $f3, $03, $10, $17, $16, $0b, $fc, $ea
11c98     DB D4 D7 E6 
11c9c     F9 0B 16 16 
11ca0     0A F6 E1 D6 
11ca4     D6 E6 FE 10 | 	byte	$db, $d4, $d7, $e6, $f9, $0b, $16, $16, $0a, $f6, $e1, $d6, $d6, $e6, $fe, $10
11ca8     18 0E F9 E2 
11cac     D5 DB F3 0B 
11cb0     18 0E F5 DC 
11cb4     D5 E7 04 16 | 	byte	$18, $0e, $f9, $e2, $d5, $db, $f3, $0b, $18, $0e, $f5, $dc, $d5, $e7, $04, $16
11cb8     0F F3 D9 D9 
11cbc     F5 11 15 F9 
11cc0     DB D9 FA 14 
11cc4     0D E9 D4 EC | 	byte	$0f, $f3, $d9, $d9, $f5, $11, $15, $f9, $db, $d9, $fa, $14, $0d, $e9, $d4, $ec
11cc8     11 10 EB D5 
11ccc     F1 15 08 DE 
11cd0     DC 07 13 EB 
11cd4     D7 02 15 EA | 	byte	$11, $10, $eb, $d5, $f1, $15, $08, $de, $dc, $07, $13, $eb, $d7, $02, $15, $ea
11cd8     D9 06 0F E0 
11cdc     E4 13 FB D6 
11ce0     04 0C DB F5 
11ce4     13 E0 EE 14 | 	byte	$d9, $06, $0f, $e0, $e4, $13, $fb, $d6, $04, $0c, $db, $f5, $13, $e0, $ee, $14
11ce8     DF F2 11 DB 
11cec     FF 06 D8 0F 
11cf0     ED EC 11 D9 
11cf4     0D EA F5 05 | 	byte	$df, $f2, $11, $db, $ff, $06, $d8, $0f, $ed, $ec, $11, $d9, $0d, $ea, $f5, $05
11cf8     DE 12 D9 11 
11cfc     DF 0A E5 02 
11d00     EB 00 EC 03 
11d04     E5 09 E0 0F | 	byte	$de, $12, $d9, $11, $df, $0a, $e5, $02, $eb, $00, $ec, $03, $e5, $09, $e0, $0f
11d08     DC 11 E1 05 
11d0c     F5 EA 0B DC 
11d10     0A F3 E6 0F 
11d14     E3 F3 0D DE | 	byte	$dc, $11, $e1, $05, $f5, $ea, $0b, $dc, $0a, $f3, $e6, $0f, $e3, $f3, $0d, $de
11d18     F6 0C E3 EE 
11d1c     0D F0 E2 06 
11d20     07 E6 EA 08 
11d24     03 EA E0 FC | 	byte	$f6, $0c, $e3, $ee, $0d, $f0, $e2, $06, $07, $e6, $ea, $08, $03, $ea, $e0, $fc
11d28     0D FF E2 E4 
11d2c     04 0A E9 E5 
11d30     05 03 E1 F4 
11d34     0C E8 EB 0F | 	byte	$0d, $ff, $e2, $e4, $04, $0a, $e9, $e5, $05, $03, $e1, $f4, $0c, $e8, $eb, $0f
11d38     EB ED 0F E1 
11d3c     F7 07 DD 0D 
11d40     EC F4 07 DF 
11d44     10 DC 0C E6 | 	byte	$eb, $ed, $0f, $e1, $f7, $07, $dd, $0d, $ec, $f4, $07, $df, $10, $dc, $0c, $e6
11d48     01 EE FB F3 
11d4c     FB F5 FE F0 
11d50     00 E6 0B DC 
11d54     13 DA 0C E9 | 	byte	$01, $ee, $fb, $f3, $fb, $f5, $fe, $f0, $00, $e6, $0b, $dc, $13, $da, $0c, $e9
11d58     F6 06 DB 12 
11d5c     E4 F5 0B D8 
11d60     0C F8 DD 13 
11d64     F1 E2 14 EE | 	byte	$f6, $06, $db, $12, $e4, $f5, $0b, $d8, $0c, $f8, $dd, $13, $f1, $e2, $14, $ee
11d68     DF 12 F7 D8 
11d6c     09 09 DA F2 
11d70     16 EF D8 04 
11d74     12 E6 DB 07 | 	byte	$df, $12, $f7, $d8, $09, $09, $da, $f2, $16, $ef, $d8, $04, $12, $e6, $db, $07
11d78     12 E9 D7 FD 
11d7c     17 FA D7 E7 
11d80     0E 13 EE D5 
11d84     E9 0E 14 F5 | 	byte	$12, $e9, $d7, $fd, $17, $fa, $d7, $e7, $0e, $13, $ee, $d5, $e9, $0e, $14, $f5
11d88     D8 DE FF 16 
11d8c     0C EB D6 DF 
11d90     FD 14 12 F9 
11d94     DE D5 E6 02 | 	byte	$d8, $de, $ff, $16, $0c, $eb, $d6, $df, $fd, $14, $12, $f9, $de, $d5, $e6, $02
11d98     15 13 FF E4 
11d9c     D6 DA EF 06 
11da0     15 14 03 EE 
11da4     DA D5 DE F2 | 	byte	$15, $13, $ff, $e4, $d6, $da, $ef, $06, $15, $14, $03, $ee, $da, $d5, $de, $f2
11da8     06 13 17 0D 
11dac     FB E8 DA D5 
11db0     DB E9 FB 0A 
11db4     14 17 10 02 | 	byte	$06, $13, $17, $0d, $fb, $e8, $da, $d5, $db, $e9, $fb, $0a, $14, $17, $10, $02
11db8     F4 E5 DA D6 
11dbc     D8 E1 EF FE 
11dc0     09 12 16 14 
11dc4     0C 02 F7 EA | 	byte	$f4, $e5, $da, $d6, $d8, $e1, $ef, $fe, $09, $12, $16, $14, $0c, $02, $f7, $ea
11dc8     E0 D9 D6 D8 
11dcc     DF E8 F3 FE 
11dd0     07 0F 13 15 
11dd4     13 0E 06 FE | 	byte	$e0, $d9, $d6, $d8, $df, $e8, $f3, $fe, $07, $0f, $13, $15, $13, $0e, $06, $fe
11dd8     F5 EB E3 DD 
11ddc     D9 D8 D8 DD 
11de0     E2 EA F2 FB 
11de4     02 09 0F 12 | 	byte	$f5, $eb, $e3, $dd, $d9, $d8, $d8, $dd, $e2, $ea, $f2, $fb, $02, $09, $0f, $12
11de8     13 13 11 0C 
11dec     08 01 F9 F1 
11df0     E8 E1 DB D8 
11df4     D6 D7 DB E1 | 	byte	$13, $13, $11, $0c, $08, $01, $f9, $f1, $e8, $e1, $db, $d8, $d6, $d7, $db, $e1
11df8     EA F4 FF 07 
11dfc     0F 14 16 16 
11e00     11 09 00 F4 
11e04     E9 E0 D9 D6 | 	byte	$ea, $f4, $ff, $07, $0f, $14, $16, $16, $11, $09, $00, $f4, $e9, $e0, $d9, $d6
11e08     D7 DC E6 F3 
11e0c     FF 0B 13 17 
11e10     14 0D 02 F4 
11e14     E6 DB D6 D6 | 	byte	$d7, $dc, $e6, $f3, $ff, $0b, $13, $17, $14, $0d, $02, $f4, $e6, $db, $d6, $d6
11e18     DF ED FD 0B 
11e1c     14 17 10 03 
11e20     F2 E1 D7 D6 
11e24     E0 F0 03 12 | 	byte	$df, $ed, $fd, $0b, $14, $17, $10, $03, $f2, $e1, $d7, $d6, $e0, $f0, $03, $12
11e28     17 10 FE EA 
11e2c     DA D5 DF F4 
11e30     09 16 13 01 
11e34     E9 D8 D7 E9 | 	byte	$17, $10, $fe, $ea, $da, $d5, $df, $f4, $09, $16, $13, $01, $e9, $d8, $d7, $e9
11e38     03 14 14 FF 
11e3c     E3 D6 DF FB 
11e40     12 14 FD DF 
11e44     D6 EB 0A 17 | 	byte	$03, $14, $14, $ff, $e3, $d6, $df, $fb, $12, $14, $fd, $df, $d6, $eb, $0a, $17
11e48     02 E1 D6 EF 
11e4c     0E 13 F3 D7 
11e50     E3 09 15 F6 
11e54     D7 E7 0E 0E | 	byte	$02, $e1, $d6, $ef, $0e, $13, $f3, $d7, $e3, $09, $15, $f6, $d7, $e7, $0e, $0e
11e58     E6 D8 FF 16 
11e5c     F3 D6 F7 15 
11e60     F4 D7 FD 14 
11e64     E8 DD 0C 04 | 	byte	$e6, $d8, $ff, $16, $f3, $d6, $f7, $15, $f4, $d7, $fd, $14, $e8, $dd, $0c, $04
11e68     D8 F8 12 E2 
11e6c     EA 14 E8 E4 
11e70     14 E9 E7 13 
11e74     E2 F2 0E D9 | 	byte	$d8, $f8, $12, $e2, $ea, $14, $e8, $e4, $14, $e9, $e7, $13, $e2, $f2, $0e, $d9
11e78     07 F9 E0 13 
11e7c     DD 04 FA E7 
11e80     0F D9 11 E0 
11e84     07 EC FA F6 | 	byte	$07, $f9, $e0, $13, $dd, $04, $fa, $e7, $0f, $d9, $11, $e0, $07, $ec, $fa, $f6
11e88     F0 FD ED FF 
11e8c     EE FB F5 F5 
11e90     FE EA 08 DF 
11e94     10 DE 06 F4 | 	byte	$f0, $fd, $ed, $ff, $ee, $fb, $f5, $f5, $fe, $ea, $08, $df, $10, $de, $06, $f4
11e98     E9 0E DE 04 
11e9c     FB E4 0D ED 
11ea0     E9 0D EA E9 
11ea4     0D F2 E3 06 | 	byte	$e9, $0e, $de, $04, $fb, $e4, $0d, $ed, $e9, $0d, $ea, $e9, $0d, $f2, $e3, $06
11ea8     02 E1 F0 0E 
11eac     FB E0 EF 0B 
11eb0     FE E2 F0 0C 
11eb4     F6 E0 01 06 | 	byte	$02, $e1, $f0, $0e, $fb, $e0, $ef, $0b, $fe, $e2, $f0, $0c, $f6, $e0, $01, $06
11eb8     E0 F8 09 E0 
11ebc     FC 08 DC 04 
11ec0     FC E2 0F E1 
11ec4     00 FA E6 0C | 	byte	$e0, $f8, $09, $e0, $fc, $08, $dc, $04, $fc, $e2, $0f, $e1, $00, $fa, $e6, $0c
11ec8     DE 0F DF 09 
11ecc     E8 01 ED FD 
11ed0     EF FF EB 05 
11ed4     E4 0D DC 11 | 	byte	$de, $0f, $df, $09, $e8, $01, $ed, $fd, $ef, $ff, $eb, $05, $e4, $0d, $dc, $11
11ed8     DB 0C E8 F8 
11edc     05 DE 13 E0 
11ee0     FD 05 DA 0F 
11ee4     EF E4 14 E3 | 	byte	$db, $0c, $e8, $f8, $05, $de, $13, $e0, $fd, $05, $da, $0f, $ef, $e4, $14, $e3
11ee8     ED 13 E2 EE 
11eec     14 E5 E5 13 
11ef0     F4 D9 08 0A 
11ef4     DB EB 14 FB | 	byte	$ed, $13, $e2, $ee, $14, $e5, $e5, $13, $f4, $d9, $08, $0a, $db, $eb, $14, $fb
11ef8     D7 F7 15 F6 
11efc     D7 F3 14 02 
11f00     DA E3 0B 11 
11f04     EE D6 ED 10 | 	byte	$d7, $f7, $15, $f6, $d7, $f3, $14, $02, $da, $e3, $0b, $11, $ee, $d6, $ed, $10
11f08     10 EF D6 E6 
11f0c     08 16 01 E1 
11f10     D6 EF 0D 15 
11f14     02 E3 D6 E3 | 	byte	$10, $ef, $d6, $e6, $08, $16, $01, $e1, $d6, $ef, $0d, $15, $02, $e3, $d6, $e3
11f18     00 13 13 FD 
11f1c     E2 D6 DF F7 
11f20     0E 16 0D F7 
11f24     E1 D6 DB EE | 	byte	$00, $13, $13, $fd, $e2, $d6, $df, $f7, $0e, $16, $0d, $f7, $e1, $d6, $db, $ee
11f28     03 12 16 0B 
11f2c     F9 E5 D8 D7 
11f30     E0 F1 03 11 
11f34     16 11 04 F4 | 	byte	$03, $12, $16, $0b, $f9, $e5, $d8, $d7, $e0, $f1, $03, $11, $16, $11, $04, $f4
11f38     E4 DA D6 DB 
11f3c     E6 F5 03 0F 
11f40     15 14 0E 03 
11f44     F6 E8 DE D8 | 	byte	$e4, $da, $d6, $db, $e6, $f5, $03, $0f, $15, $14, $0e, $03, $f6, $e8, $de, $d8
11f48     D7 DA E3 EF 
11f4c     FB 05 0E 13 
11f50     14 12 0C 03 
11f54     FA F0 E6 DE | 	byte	$d7, $da, $e3, $ef, $fb, $05, $0e, $13, $14, $12, $0c, $03, $fa, $f0, $e6, $de
11f58     D9 D8 D8 DD 
11f5c     E3 EC F6 FE 
11f60     06 0C 10 13 
11f64     13 11 0C 07 | 	byte	$d9, $d8, $d8, $dd, $e3, $ec, $f6, $fe, $06, $0c, $10, $13, $13, $11, $0c, $07
11f68     00 F8 F1 E9 
11f6c     E3 DE DC D9 
11f70     D9 DB DE E3 
11f74     EA F2 FA 01 | 	byte	$00, $f8, $f1, $e9, $e3, $de, $dc, $d9, $d9, $db, $de, $e3, $ea, $f2, $fa, $01
11f78     07 0E 12 14 
11f7c     14 12 0D 07 
11f80     FF F7 ED E4 
11f84     DD D8 D7 D8 | 	byte	$07, $0e, $12, $14, $14, $12, $0d, $07, $ff, $f7, $ed, $e4, $dd, $d8, $d7, $d8
11f88     DC E4 EE F8 
11f8c     02 0B 12 15 
11f90     14 0F 07 FC 
11f94     F1 E5 DC D7 | 	byte	$dc, $e4, $ee, $f8, $02, $0b, $12, $15, $14, $0f, $07, $fc, $f1, $e5, $dc, $d7
11f98     D6 DC E6 F3 
11f9c     01 0D 13 16 
11fa0     11 06 F7 E8 
11fa4     DC D6 D8 E2 | 	byte	$d6, $dc, $e6, $f3, $01, $0d, $13, $16, $11, $06, $f7, $e8, $dc, $d6, $d8, $e2
11fa8     F1 02 0F 16 
11fac     12 05 F5 E3 
11fb0     D8 D6 E2 F5 
11fb4     08 14 14 07 | 	byte	$f1, $02, $0f, $16, $12, $05, $f5, $e3, $d8, $d6, $e2, $f5, $08, $14, $14, $07
11fb8     F2 DE D6 DD 
11fbc     F2 08 15 11 
11fc0     FD E4 D7 DD 
11fc4     F5 0C 16 07 | 	byte	$f2, $de, $d6, $dd, $f2, $08, $15, $11, $fd, $e4, $d7, $dd, $f5, $0c, $16, $07
11fc8     EC D8 DB F7 
11fcc     0F 13 FD DF 
11fd0     D7 F0 0E 13 
11fd4     F7 DA DD FF | 	byte	$ec, $d8, $db, $f7, $0f, $13, $fd, $df, $d7, $f0, $0e, $13, $f7, $da, $dd, $ff
11fd8     15 04 E0 DA 
11fdc     FD 15 FF DB 
11fe0     E1 0A 11 E9 
11fe4     D8 FD 14 F0 | 	byte	$15, $04, $e0, $da, $fd, $15, $ff, $db, $e1, $0a, $11, $e9, $d8, $fd, $14, $f0
11fe8     D7 FD 13 EC 
11fec     DB 09 0A DC 
11ff0     ED 14 EF DC 
11ff4     0E 01 D8 05 | 	byte	$d7, $fd, $13, $ec, $db, $09, $0a, $dc, $ed, $14, $ef, $dc, $0e, $01, $d8, $05
11ff8     04 D9 06 03 
11ffc     D9 0B F8 E0 
12000     12 E5 F3 0A 
12004     D9 0F EA F3 | 	byte	$04, $d9, $06, $03, $d9, $0b, $f8, $e0, $12, $e5, $f3, $0a, $d9, $0f, $ea, $f3
12008     07 DC 11 DC 
1200c     0A E8 FB F6 
12010     F1 FF EA 03 
12014     E8 03 EB FF | 	byte	$07, $dc, $11, $dc, $0a, $e8, $fb, $f6, $f1, $ff, $ea, $03, $e8, $03, $eb, $ff
12018     F1 F7 FB EA 
1201c     08 DF 0F DE 
12020     06 F3 EC 0A 
12024     DD 07 F6 E4 | 	byte	$f1, $f7, $fb, $ea, $08, $df, $0f, $de, $06, $f3, $ec, $0a, $dd, $07, $f6, $e4
12028     0D EB ED 0F 
1202c     E9 EC 0E EE 
12030     E4 09 FB E0 
12034     F6 0A F2 E3 | 	byte	$0d, $eb, $ed, $0f, $e9, $ec, $0e, $ee, $e4, $09, $fb, $e0, $f6, $0a, $f2, $e3
12038     06 02 E0 F9 
1203c     09 E2 F7 09 
12040     DF 00 FE DE 
12044     0D EC F1 07 | 	byte	$06, $02, $e0, $f9, $09, $e2, $f7, $09, $df, $00, $fe, $de, $0d, $ec, $f1, $07
12048     DE 0E E2 01 
1204c     F4 F2 02 E6 
12050     09 E1 0C E0 
12054     0D E0 0B E4 | 	byte	$de, $0e, $e2, $01, $f4, $f2, $02, $e6, $09, $e1, $0c, $e0, $0d, $e0, $0b, $e4
12058     04 EE F6 FE 
1205c     E6 0D DA 0F 
12060     E6 F7 05 DB 
12064     11 E7 F0 0E | 	byte	$04, $ee, $f6, $fe, $e6, $0d, $da, $0f, $e6, $f7, $05, $db, $11, $e7, $f0, $0e
12068     D9 02 03 D9 
1206c     09 FF D9 09 
12070     04 D8 02 0C 
12074     DD EF 14 EF | 	byte	$d9, $02, $03, $d9, $09, $ff, $d9, $09, $04, $d8, $02, $0c, $dd, $ef, $14, $ef
12078     DA 07 0C E0 
1207c     E2 0E 07 DE 
12080     E3 0C 0C E4 
12084     DA FF 15 F9 | 	byte	$da, $07, $0c, $e0, $e2, $0e, $07, $de, $e3, $0c, $0c, $e4, $da, $ff, $15, $f9
12088     D9 E4 08 13 
1208c     F6 D8 E1 03 
12090     14 02 E2 D6 
12094     EC 0B 15 02 | 	byte	$d9, $e4, $08, $13, $f6, $d8, $e1, $03, $14, $02, $e2, $d6, $ec, $0b, $15, $02
12098     E3 D6 E4 01 
1209c     13 0F F8 E0 
120a0     D6 E3 FD 0F 
120a4     15 07 F1 DD | 	byte	$e3, $d6, $e4, $01, $13, $0f, $f8, $e0, $d6, $e3, $fd, $0f, $15, $07, $f1, $dd
120a8     D6 E1 F7 0A 
120ac     14 12 02 EF 
120b0     DE D6 DC EB 
120b4     FF 0D 14 13 | 	byte	$d6, $e1, $f7, $0a, $14, $12, $02, $ef, $de, $d6, $dc, $eb, $ff, $0d, $14, $13
120b8     07 F8 E7 DB 
120bc     D7 DA E5 F5 
120c0     03 0E 14 13 
120c4     0C 00 F4 E6 | 	byte	$07, $f8, $e7, $db, $d7, $da, $e5, $f5, $03, $0e, $14, $13, $0c, $00, $f4, $e6
120c8     DD D8 D8 DD 
120cc     E6 F3 FF 08 
120d0     10 13 13 0F 
120d4     07 FE F3 E9 | 	byte	$dd, $d8, $d8, $dd, $e6, $f3, $ff, $08, $10, $13, $13, $0f, $07, $fe, $f3, $e9
120d8     E0 DB D8 D9 
120dc     DD E2 EA F4 
120e0     FD 04 0B 0F 
120e4     12 12 10 0C | 	byte	$e0, $db, $d8, $d9, $dd, $e2, $ea, $f4, $fd, $04, $0b, $0f, $12, $12, $10, $0c
120e8     06 FF F8 F0 
120ec     E8 E3 DE DB 
120f0     D9 DA DC E0 
120f4     E5 EB F2 F8 | 	byte	$06, $ff, $f8, $f0, $e8, $e3, $de, $db, $d9, $da, $dc, $e0, $e5, $eb, $f2, $f8
120f8     FF 05 0A 0F 
120fc     11 13 12 10 
12100     0C 06 FF F9 
12104     F0 E8 E1 DC | 	byte	$ff, $05, $0a, $0f, $11, $13, $12, $10, $0c, $06, $ff, $f9, $f0, $e8, $e1, $dc
12108     D8 D7 D9 DD 
1210c     E4 EC F6 FF 
12110     07 0E 13 14 
12114     12 0D 04 FD | 	byte	$d8, $d7, $d9, $dd, $e4, $ec, $f6, $ff, $07, $0e, $13, $14, $12, $0d, $04, $fd
12118     F1 E7 DE D8 
1211c     D7 D9 E1 EC 
12120     F9 04 0E 13 
12124     14 0F 06 F9 | 	byte	$f1, $e7, $de, $d8, $d7, $d9, $e1, $ec, $f9, $04, $0e, $13, $14, $0f, $06, $f9
12128     EB E0 D8 D7 
1212c     DD EA FA 07 
12130     12 15 0F 02 
12134     F3 E2 D8 D7 | 	byte	$eb, $e0, $d8, $d7, $dd, $ea, $fa, $07, $12, $15, $0f, $02, $f3, $e2, $d8, $d7
12138     E1 F2 04 11 
1213c     14 0C FA E6 
12140     D9 D7 E5 FC 
12144     0D 15 0B F6 | 	byte	$e1, $f2, $04, $11, $14, $0c, $fa, $e6, $d9, $d7, $e5, $fc, $0d, $15, $0b, $f6
12148     E0 D7 E0 F8 
1214c     0D 14 07 EC 
12150     D8 DA F2 0C 
12154     15 02 E5 D7 | 	byte	$e0, $d7, $e0, $f8, $0d, $14, $07, $ec, $d8, $da, $f2, $0c, $15, $02, $e5, $d7
12158     E6 05 14 04 
1215c     E4 D7 EE 0D 
12160     11 F2 D8 E7 
12164     0A 12 F2 D8 | 	byte	$e6, $05, $14, $04, $e4, $d7, $ee, $0d, $11, $f2, $d8, $e7, $0a, $12, $f2, $d8
12168     ED 10 09 E2 
1216c     DE 05 11 E9 
12170     DA 01 10 E7 
12174     DD 09 09 DD | 	byte	$ed, $10, $09, $e2, $de, $05, $11, $e9, $da, $01, $10, $e7, $dd, $09, $09, $dd
12178     EC 12 F2 DB 
1217c     0A 03 D9 FF 
12180     0A DB FC 0B 
12184     DB 00 06 D9 | 	byte	$ec, $12, $f2, $db, $0a, $03, $d9, $ff, $0a, $db, $fc, $0b, $db, $00, $06, $d9
12188     0A F8 E1 11 
1218c     E1 FC 03 DD 
12190     10 DF 02 F6 
12194     EC 07 DE 10 | 	byte	$0a, $f8, $e1, $11, $e1, $fc, $03, $dd, $10, $df, $02, $f6, $ec, $07, $de, $10
12198     DB 0F E0 0B 
1219c     E1 09 E3 09 
121a0     E2 0C DF 0D 
121a4     DE 0E E2 03 | 	byte	$db, $0f, $e0, $0b, $e1, $09, $e3, $09, $e2, $0c, $df, $0d, $de, $0e, $e2, $03
121a8     F3 EE 07 E0 
121ac     0C E9 F6 07 
121b0     DD 07 F9 E2 
121b4     0B F2 E5 0A | 	byte	$f3, $ee, $07, $e0, $0c, $e9, $f6, $07, $dd, $07, $f9, $e2, $0b, $f2, $e5, $0a
121b8     F4 E3 06 FF 
121bc     E1 FB 07 E2 
121c0     F6 09 E0 FF 
121c4     06 DE 07 F4 | 	byte	$f4, $e3, $06, $ff, $e1, $fb, $07, $e2, $f6, $09, $e0, $ff, $06, $de, $07, $f4
121c8     E9 0C DE 06 
121cc     F0 F2 05 E2 
121d0     0D DC 0E DF 
121d4     0B E0 0A E2 | 	byte	$e9, $0c, $de, $06, $f0, $f2, $05, $e2, $0d, $dc, $0e, $df, $0b, $e0, $0a, $e2
121d8     0B E0 0D DD 
121dc     0F DC 0D E4 
121e0     01 F8 EB 0C 
121e4     DA 0E EA F1 | 	byte	$0b, $e0, $0d, $dd, $0f, $dc, $0d, $e4, $01, $f8, $eb, $0c, $da, $0e, $ea, $f1
121e8     0B D9 09 F9 
121ec     E0 11 E9 E8 
121f0     12 E4 EB 12 
121f4     E7 E5 11 F4 | 	byte	$0b, $d9, $09, $f9, $e0, $11, $e9, $e8, $12, $e4, $eb, $12, $e7, $e5, $11, $f4
121f8     DA 09 07 DB 
121fc     F0 13 F3 D8 
12200     FE 12 EC DA 
12204     FE 13 F4 D8 | 	byte	$da, $09, $07, $db, $f0, $13, $f3, $d8, $fe, $12, $ec, $da, $fe, $13, $f4, $d8
12208     F2 11 04 DF 
1220c     DD 00 14 FF 
12210     DC DE FE 13 
12214     05 E6 D7 EB | 	byte	$f2, $11, $04, $df, $dd, $00, $14, $ff, $dc, $de, $fe, $13, $05, $e6, $d7, $eb
12218     09 14 02 E4 
1221c     D7 E5 02 13 
12220     0D F5 DD D8 
12224     E8 00 12 12 | 	byte	$09, $14, $02, $e4, $d7, $e5, $02, $13, $0d, $f5, $dd, $d8, $e8, $00, $12, $12
12228     01 E9 D9 D9 
1222c     EA FF 10 14 
12230     0A F7 E4 D8 
12234     D9 E5 F8 08 | 	byte	$01, $e9, $d9, $d9, $ea, $ff, $10, $14, $0a, $f7, $e4, $d8, $d9, $e5, $f8, $08
12238     12 13 09 FA 
1223c     E9 DD D8 DB 
12240     E5 F5 03 0E 
12244     13 12 0A FE | 	byte	$12, $13, $09, $fa, $e9, $dd, $d8, $db, $e5, $f5, $03, $0e, $13, $12, $0a, $fe
12248     F0 E4 DB D8 
1224c     D9 E0 EC F8 
12250     03 0C 11 13 
12254     10 09 00 F6 | 	byte	$f0, $e4, $db, $d8, $d9, $e0, $ec, $f8, $03, $0c, $11, $13, $10, $09, $00, $f6
12258     EB E3 DC D9 
1225c     D9 DD E3 EB 
12260     F4 FE 05 0B 
12264     0F 12 11 0F | 	byte	$eb, $e3, $dc, $d9, $d9, $dd, $e3, $eb, $f4, $fe, $05, $0b, $0f, $12, $11, $0f
12268     09 03 FD F5 
1226c     ED E6 E0 DD 
12270     DB DA DC DF 
12274     E3 E8 EF F6 | 	byte	$09, $03, $fd, $f5, $ed, $e6, $e0, $dd, $db, $da, $dc, $df, $e3, $e8, $ef, $f6
12278     FD 02 07 0B 
1227c     0E 10 10 0F 
12280     0D 09 04 FF 
12284     F8 F1 EC E5 | 	byte	$fd, $02, $07, $0b, $0e, $10, $10, $0f, $0d, $09, $04, $ff, $f8, $f1, $ec, $e5
12288     E0 DC D9 D8 
1228c     D9 DD E2 E9 
12290     F1 FA 01 08 
12294     0F 12 13 11 | 	byte	$e0, $dc, $d9, $d8, $d9, $dd, $e2, $e9, $f1, $fa, $01, $08, $0f, $12, $13, $11
12298     0D 08 00 F6 
1229c     EC E3 DD D8 
122a0     D8 DB E2 EB 
122a4     F6 01 0A 11 | 	byte	$0d, $08, $00, $f6, $ec, $e3, $dd, $d8, $d8, $db, $e2, $eb, $f6, $01, $0a, $11
122a8     14 12 0B 01 
122ac     F6 E9 DF D9 
122b0     D8 DD E8 F6 
122b4     03 0E 13 12 | 	byte	$14, $12, $0b, $01, $f6, $e9, $df, $d9, $d8, $dd, $e8, $f6, $03, $0e, $13, $12
122b8     09 FC EC E0 
122bc     D8 D9 E3 F5 
122c0     04 10 14 0D 
122c4     FE EA DB D7 | 	byte	$09, $fc, $ec, $e0, $d8, $d9, $e3, $f5, $04, $10, $14, $0d, $fe, $ea, $db, $d7
122c8     E0 F3 06 12 
122cc     12 03 ED DC 
122d0     D8 E6 FE 0E 
122d4     13 03 EA D9 | 	byte	$e0, $f3, $06, $12, $12, $03, $ed, $dc, $d8, $e6, $fe, $0e, $13, $03, $ea, $d9
122d8     DC F2 0B 14 
122dc     03 E8 D8 E2 
122e0     FF 13 0B EE 
122e4     D8 E3 02 13 | 	byte	$dc, $f2, $0b, $14, $03, $e8, $d8, $e2, $ff, $13, $0b, $ee, $d8, $e3, $02, $13
122e8     01 E1 DA F8 
122ec     12 05 E2 DB 
122f0     FE 13 FB DA 
122f4     E9 0E 07 E0 | 	byte	$01, $e1, $da, $f8, $12, $05, $e2, $db, $fe, $13, $fb, $da, $e9, $0e, $07, $e0
122f8     E1 0B 0A E1 
122fc     E3 0D 03 DB 
12300     F2 12 EE DD 
12304     0A 02 D9 FE | 	byte	$e1, $0b, $0a, $e1, $e3, $0d, $03, $db, $f2, $12, $ee, $dd, $0a, $02, $d9, $fe
12308     0B DC F8 0E 
1230c     DC FA 0A DA 
12310     02 02 DB 0E 
12314     EC ED 0C DC | 	byte	$0b, $dc, $f8, $0e, $dc, $fa, $0a, $da, $02, $02, $db, $0e, $ec, $ed, $0c, $dc
12318     0A F0 EF 08 
1231c     DC 10 E0 07 
12320     EB FA FA EF 
12324     03 E9 04 E6 | 	byte	$0a, $f0, $ef, $08, $dc, $10, $e0, $07, $eb, $fa, $fa, $ef, $03, $e9, $04, $e6
12328     06 E8 02 ED 
1232c     FB F3 F0 01 
12330     E3 0E DD 0A 
12334     EA F4 04 DF | 	byte	$06, $e8, $02, $ed, $fb, $f3, $f0, $01, $e3, $0e, $dd, $0a, $ea, $f4, $04, $df
12338     0B EC EF 0A 
1233c     E1 FC 04 E1 
12340     FF 02 E0 FE 
12344     00 DE 02 FE | 	byte	$0b, $ec, $ef, $0a, $e1, $fc, $04, $e1, $ff, $02, $e0, $fe, $00, $de, $02, $fe
12348     E2 0B EC F0 
1234c     08 DF 0A EA 
12350     F9 FE E6 09 
12354     E0 0F DD 0D | 	byte	$e2, $0b, $ec, $f0, $08, $df, $0a, $ea, $f9, $fe, $e6, $09, $e0, $0f, $dd, $0d
12358     DF 0C E0 0B 
1235c     E0 0D DE 0F 
12360     DD 0D E2 04 
12364     F2 EF 07 DC | 	byte	$df, $0c, $e0, $0b, $e0, $0d, $de, $0f, $dd, $0d, $e2, $04, $f2, $ef, $07, $dc
12368     0F E3 FA 03 
1236c     DC 0E EA EB 
12370     10 DE F9 0B 
12374     DB FD 09 DB | 	byte	$0f, $e3, $fa, $03, $dc, $0e, $ea, $eb, $10, $de, $f9, $0b, $db, $fd, $09, $db
12378     F9 0E E0 ED 
1237c     12 EF DD 09 
12380     06 DD EE 11 
12384     FA D9 F4 12 | 	byte	$f9, $0e, $e0, $ed, $12, $ef, $dd, $09, $06, $dd, $ee, $11, $fa, $d9, $f4, $12
12388     FA D9 EE 10 
1238c     04 DF DF 03 
12390     12 F7 D9 E5 
12394     06 13 F9 DC | 	byte	$fa, $d9, $ee, $10, $04, $df, $df, $03, $12, $f7, $d9, $e5, $06, $13, $f9, $dc
12398     DE FD 12 09 
1239c     EC D8 E2 00 
123a0     12 0C F3 DC 
123a4     D9 EE 07 13 | 	byte	$de, $fd, $12, $09, $ec, $d8, $e2, $00, $12, $0c, $f3, $dc, $d9, $ee, $07, $13
123a8     0B F4 DF D8 
123ac     E4 FB 0D 13 
123b0     09 F6 E2 D8 
123b4     DC ED FF 0F | 	byte	$0b, $f4, $df, $d8, $e4, $fb, $0d, $13, $09, $f6, $e2, $d8, $dc, $ed, $ff, $0f
123b8     13 0C FC EB 
123bc     DD D8 DD EA 
123c0     FB 08 11 13 
123c4     0C 00 F1 E3 | 	byte	$13, $0c, $fc, $eb, $dd, $d8, $dd, $ea, $fb, $08, $11, $13, $0c, $00, $f1, $e3
123c8     DB D8 DC E6 
123cc     F3 00 0A 10 
123d0     12 0F 07 FD 
123d4     F1 E6 DE D9 | 	byte	$db, $d8, $dc, $e6, $f3, $00, $0a, $10, $12, $0f, $07, $fd, $f1, $e6, $de, $d9
123d8     D9 DC E3 ED 
123dc     F8 01 09 0F 
123e0     11 11 0F 08 
123e4     01 F9 F1 E8 | 	byte	$d9, $dc, $e3, $ed, $f8, $01, $09, $0f, $11, $11, $0f, $08, $01, $f9, $f1, $e8
123e8     E1 DD DA DA 
123ec     DC E0 E7 EE 
123f0     F5 FD 03 08 
123f4     0C 0F 10 0F | 	byte	$e1, $dd, $da, $da, $dc, $e0, $e7, $ee, $f5, $fd, $03, $08, $0c, $0f, $10, $0f
123f8     0E 0A 05 00 
123fc     FB F4 EF E9 
12400     E4 E0 DE DC 
12404     DC DD DF E2 | 	byte	$0e, $0a, $05, $00, $fb, $f4, $ef, $e9, $e4, $e0, $de, $dc, $dc, $dd, $df, $e2
12408     E6 EB F1 F8 
1240c     FF 03 08 0D 
12410     10 11 11 0F 
12414     0C 06 00 F9 | 	byte	$e6, $eb, $f1, $f8, $ff, $03, $08, $0d, $10, $11, $11, $0f, $0c, $06, $00, $f9
12418     F1 E9 E2 DE 
1241c     DA D8 D9 DD 
12420     E3 EB F4 FE 
12424     06 0C 11 13 | 	byte	$f1, $e9, $e2, $de, $da, $d8, $d9, $dd, $e3, $eb, $f4, $fe, $06, $0c, $11, $13
12428     11 0C 04 FC 
1242c     F0 E6 DE D9 
12430     D8 DB E2 EE 
12434     FA 04 0E 12 | 	byte	$11, $0c, $04, $fc, $f0, $e6, $de, $d9, $d8, $db, $e2, $ee, $fa, $04, $0e, $12
12438     12 0C 02 F6 
1243c     E8 DD D8 D9 
12440     E3 F0 FE 0B 
12444     12 12 08 FA | 	byte	$12, $0c, $02, $f6, $e8, $dd, $d8, $d9, $e3, $f0, $fe, $0b, $12, $12, $08, $fa
12448     EA DD D8 DE 
1244c     EC FF 0D 13 
12450     0E FE EA DB 
12454     D8 E3 F8 0B | 	byte	$ea, $dd, $d8, $de, $ec, $ff, $0d, $13, $0e, $fe, $ea, $db, $d8, $e3, $f8, $0b
12458     13 0A F8 E1 
1245c     D8 E1 F9 0D 
12460     13 03 EA D9 
12464     DF F7 0F 10 | 	byte	$13, $0a, $f8, $e1, $d8, $e1, $f9, $0d, $13, $03, $ea, $d9, $df, $f7, $0f, $10
12468     FA E1 D8 F0 
1246c     0A 11 FA DD 
12470     DD FB 11 05 
12474     E4 D9 F7 11 | 	byte	$fa, $e1, $d8, $f0, $0a, $11, $fa, $dd, $dd, $fb, $11, $05, $e4, $d9, $f7, $11
12478     04 E1 DD 01 
1247c     12 F3 D9 F2 
12480     11 FC DB EF 
12484     10 FA D9 F8 | 	byte	$04, $e1, $dd, $01, $12, $f3, $d9, $f2, $11, $fc, $db, $ef, $10, $fa, $d9, $f8
12488     11 EC DE 0A 
1248c     03 DA F9 0F 
12490     E1 ED 11 E7 
12494     EA 10 E6 ED | 	byte	$11, $ec, $de, $0a, $03, $da, $f9, $0f, $e1, $ed, $11, $e7, $ea, $10, $e6, $ed
12498     0F E0 F7 08 
1249c     DA 09 F5 E6 
124a0     10 DC 05 F3 
124a4     EB 0A DC 0D | 	byte	$0f, $e0, $f7, $08, $da, $09, $f5, $e6, $10, $dc, $05, $f3, $eb, $0a, $dc, $0d
124a8     E0 06 EC F8 
124ac     F9 EF 00 EA 
124b0     03 E8 02 E8 
124b4     FF EF F9 F9 | 	byte	$e0, $06, $ec, $f8, $f9, $ef, $00, $ea, $03, $e8, $02, $e8, $ff, $ef, $f9, $f9
124b8     ED 04 E3 0C 
124bc     DF 06 EF F1 
124c0     05 E0 08 F0 
124c4     ED 0B E2 FB | 	byte	$ed, $04, $e3, $0c, $df, $06, $ef, $f1, $05, $e0, $08, $f0, $ed, $0b, $e2, $fb
124c8     06 E0 01 FC 
124cc     E3 0C E7 F6 
124d0     03 E1 0C E2 
124d4     01 F3 F0 02 | 	byte	$06, $e0, $01, $fc, $e3, $0c, $e7, $f6, $03, $e1, $0c, $e2, $01, $f3, $f0, $02
124d8     E5 09 E0 0E 
124dc     DD 0E DD 0E 
124e0     DE 0C DF 09 
124e4     E6 FE F5 ED | 	byte	$e5, $09, $e0, $0e, $dd, $0e, $dd, $0e, $de, $0c, $df, $09, $e6, $fe, $f5, $ed
124e8     07 DE 0F E0 
124ec     00 FF E1 10 
124f0     E1 FB 04 DB 
124f4     0A F7 E0 0E | 	byte	$07, $de, $0f, $e0, $00, $ff, $e1, $10, $e1, $fb, $04, $db, $0a, $f7, $e0, $0e
124f8     EF E2 0F F0 
124fc     E0 0D FA DA 
12500     04 08 DC EE 
12504     10 F3 DA FF | 	byte	$ef, $e2, $0f, $f0, $e0, $0d, $fa, $da, $04, $08, $dc, $ee, $10, $f3, $da, $ff
12508     0F EA DD 03 
1250c     0E EC DA FB 
12510     12 FA DA E8 
12514     0A 0E EF D9 | 	byte	$0f, $ea, $dd, $03, $0e, $ec, $da, $fb, $12, $fa, $da, $e8, $0a, $0e, $ef, $d9
12518     EB 0B 0F F3 
1251c     DA E1 FF 11 
12520     07 EA D8 E3 
12524     00 11 0C F4 | 	byte	$eb, $0b, $0f, $f3, $da, $e1, $ff, $11, $07, $ea, $d8, $e3, $00, $11, $0c, $f4
12528     DD DA EC 05 
1252c     11 0C F7 E1 
12530     D8 E1 F6 08 
12534     12 0C FB E7 | 	byte	$dd, $da, $ec, $05, $11, $0c, $f7, $e1, $d8, $e1, $f6, $08, $12, $0c, $fb, $e7
12538     DA D9 E6 F9 
1253c     09 11 11 04 
12540     F4 E4 DA D9 
12544     E1 F0 00 0B | 	byte	$da, $d9, $e6, $f9, $09, $11, $11, $04, $f4, $e4, $da, $d9, $e1, $f0, $00, $0b
12548     11 11 09 FD 
1254c     F0 E2 DB D9 
12550     DD E6 F2 FF 
12554     08 0F 11 0F | 	byte	$11, $11, $09, $fd, $f0, $e2, $db, $d9, $dd, $e6, $f2, $ff, $08, $0f, $11, $0f
12558     08 FF F5 EA 
1255c     E1 DC D9 DB 
12560     E0 E7 F1 FB 
12564     02 09 0E 10 | 	byte	$08, $ff, $f5, $ea, $e1, $dc, $d9, $db, $e0, $e7, $f1, $fb, $02, $09, $0e, $10
12568     10 0D 08 01 
1256c     F9 F2 EA E4 
12570     DF DC DB DC 
12574     DF E3 E9 EF | 	byte	$10, $0d, $08, $01, $f9, $f2, $ea, $e4, $df, $dc, $db, $dc, $df, $e3, $e9, $ef
12578     F6 FD 02 07 
1257c     0B 0E 0F 0F 
12580     0D 0A 06 01 
12584     FE F8 F2 ED | 	byte	$f6, $fd, $02, $07, $0b, $0e, $0f, $0f, $0d, $0a, $06, $01, $fe, $f8, $f2, $ed
12588     E8 E4 E1 DF 
1258c     DD DC DD DF 
12590     E2 E6 EB F1 
12594     F7 FE 03 07 | 	byte	$e8, $e4, $e1, $df, $dd, $dc, $dd, $df, $e2, $e6, $eb, $f1, $f7, $fe, $03, $07
12598     0C 0F 10 10 
1259c     0F 0C 07 01 
125a0     FB F3 EC E5 
125a4     E0 DC D9 DA | 	byte	$0c, $0f, $10, $10, $0f, $0c, $07, $01, $fb, $f3, $ec, $e5, $e0, $dc, $d9, $da
125a8     DD E2 E9 F2 
125ac     FB 03 0A 0F 
125b0     11 11 0D 07 
125b4     FF F4 E9 E1 | 	byte	$dd, $e2, $e9, $f2, $fb, $03, $0a, $0f, $11, $11, $0d, $07, $ff, $f4, $e9, $e1
125b8     DB D8 DA E0 
125bc     EA F6 01 0B 
125c0     11 12 0E 04 
125c4     F9 EB E1 DA | 	byte	$db, $d8, $da, $e0, $ea, $f6, $01, $0b, $11, $12, $0e, $04, $f9, $eb, $e1, $da
125c8     D9 E0 ED FB 
125cc     08 10 12 0A 
125d0     FD ED E0 D8 
125d4     DC E9 FB 0B | 	byte	$d9, $e0, $ed, $fb, $08, $10, $12, $0a, $fd, $ed, $e0, $d8, $dc, $e9, $fb, $0b
125d8     11 0F 01 ED 
125dc     DE D8 E1 F5 
125e0     08 12 0C F9 
125e4     E4 D8 E0 F6 | 	byte	$11, $0f, $01, $ed, $de, $d8, $e1, $f5, $08, $12, $0c, $f9, $e4, $d8, $e0, $f6
125e8     0B 12 04 ED 
125ec     DA DE F5 0D 
125f0     10 FC E2 DA 
125f4     EE 0A 11 FA | 	byte	$0b, $12, $04, $ed, $da, $de, $f5, $0d, $10, $fc, $e2, $da, $ee, $0a, $11, $fa
125f8     DE DD FA 11 
125fc     05 E4 DA F6 
12600     10 03 E2 DE 
12604     01 10 F3 D9 | 	byte	$de, $dd, $fa, $11, $05, $e4, $da, $f6, $10, $03, $e2, $de, $01, $10, $f3, $d9
12608     F4 10 FC DA 
1260c     F1 10 F8 D9 
12610     F9 11 EA DF 
12614     09 02 DB FA | 	byte	$f4, $10, $fc, $da, $f1, $10, $f8, $d9, $f9, $11, $ea, $df, $09, $02, $db, $fa
12618     0D E1 EE 10 
1261c     E7 EA 10 E6 
12620     ED 0F E0 F7 
12624     08 DC 08 F5 | 	byte	$0d, $e1, $ee, $10, $e7, $ea, $10, $e6, $ed, $0f, $e0, $f7, $08, $dc, $08, $f5
12628     E5 0F DE 03 
1262c     F7 E9 0B DD 
12630     0D E3 02 F1 
12634     F3 FE E8 04 | 	byte	$e5, $0f, $de, $03, $f7, $e9, $0b, $dd, $0d, $e3, $02, $f1, $f3, $fe, $e8, $04
12638     E4 09 E2 09 
1263c     E3 07 E7 04 
12640     EE F8 F8 EB 
12644     03 E1 0C E1 | 	byte	$e4, $09, $e2, $09, $e3, $07, $e7, $04, $ee, $f8, $f8, $eb, $03, $e1, $0c, $e1
12648     00 F6 E8 0B 
1264c     E0 02 FC E3 
12650     0B E8 F6 01 
12654     E1 0B E3 01 | 	byte	$00, $f6, $e8, $0b, $e0, $02, $fc, $e3, $0b, $e8, $f6, $01, $e1, $0b, $e3, $01
12658     F4 F0 01 E5 
1265c     0A E0 0E DE 
12660     0D DE 0D DE 
12664     0D DF 0B E4 | 	byte	$f4, $f0, $01, $e5, $0a, $e0, $0e, $de, $0d, $de, $0d, $de, $0d, $df, $0b, $e4
12668     03 EF F5 00 
1266c     E3 0E DC 08 
12670     F0 ED 0C DC 
12674     07 F7 E3 0E | 	byte	$03, $ef, $f5, $00, $e3, $0e, $dc, $08, $f0, $ed, $0c, $dc, $07, $f7, $e3, $0e
12678     E6 F0 0D DF 
1267c     F8 0C DF F6 
12680     0E E1 EC 10 
12684     EE DE 0A 02 | 	byte	$e6, $f0, $0d, $df, $f8, $0c, $df, $f6, $0e, $e1, $ec, $10, $ee, $de, $0a, $02
12688     DC F2 10 F3 
1268c     DA FB 10 EF 
12690     DA FA 11 F6 
12694     DA ED 0E 08 | 	byte	$dc, $f2, $10, $f3, $da, $fb, $10, $ef, $da, $fa, $11, $f6, $da, $ed, $0e, $08
12698     E4 DB F9 10 
1269c     04 E4 DB F4 
126a0     0E 0C F0 DB 
126a4     E2 FF 10 09 | 	byte	$e4, $db, $f9, $10, $04, $e4, $db, $f4, $0e, $0c, $f0, $db, $e2, $ff, $10, $09
126a8     EF DB DF F6 
126ac     0B 11 01 E9 
126b0     DA DE F3 07 
126b4     11 0A F8 E3 | 	byte	$ef, $db, $df, $f6, $0b, $11, $01, $e9, $da, $de, $f3, $07, $11, $0a, $f8, $e3
126b8     D9 DE EF 02 
126bc     0F 10 06 F5 
126c0     E4 DA DB E6 
126c4     F7 06 0F 11 | 	byte	$d9, $de, $ef, $02, $0f, $10, $06, $f5, $e4, $da, $db, $e6, $f7, $06, $0f, $11
126c8     09 FE EE E1 
126cc     DA DA E2 EF 
126d0     FD 07 0F 11 
126d4     0E 05 FA EE | 	byte	$09, $fe, $ee, $e1, $da, $da, $e2, $ef, $fd, $07, $0f, $11, $0e, $05, $fa, $ee
126d8     E4 DD DA DC 
126dc     E1 EB F6 00 
126e0     08 0E 10 0F 
126e4     0A 03 FD F3 | 	byte	$e4, $dd, $da, $dc, $e1, $eb, $f6, $00, $08, $0e, $10, $0f, $0a, $03, $fd, $f3
126e8     EA E3 DE DB 
126ec     DB DE E2 E9 
126f0     F0 F8 00 06 
126f4     0B 0E 0F 0E | 	byte	$ea, $e3, $de, $db, $db, $de, $e2, $e9, $f0, $f8, $00, $06, $0b, $0e, $0f, $0e
126f8     0C 08 03 FF 
126fc     F8 F1 EB E6 
12700     E1 DF DD DD 
12704     DE E0 E3 E7 | 	byte	$0c, $08, $03, $ff, $f8, $f1, $eb, $e6, $e1, $df, $dd, $dd, $de, $e0, $e3, $e7
12708     EC F2 F8 FD 
1270c     00 03 07 0A 
12710     0C 0D 0D 0C 
12714     0A 07 03 00 | 	byte	$ec, $f2, $f8, $fd, $00, $03, $07, $0a, $0c, $0d, $0d, $0c, $0a, $07, $03, $00
12718     FB F6 F0 EA 
1271c     E5 E1 DE DC 
12720     DB DC DE E0 
12724     E6 EC F2 FA | 	byte	$fb, $f6, $f0, $ea, $e5, $e1, $de, $dc, $db, $dc, $de, $e0, $e6, $ec, $f2, $fa
12728     00 06 0B 0F 
1272c     10 10 0E 09 
12730     03 FC F4 ED 
12734     E5 E0 DC D9 | 	byte	$00, $06, $0b, $0f, $10, $10, $0e, $09, $03, $fc, $f4, $ed, $e5, $e0, $dc, $d9
12738     DB E0 E7 F0 
1273c     FA 02 0A 0F 
12740     11 0F 09 00 
12744     F6 EB E2 DC | 	byte	$db, $e0, $e7, $f0, $fa, $02, $0a, $0f, $11, $0f, $09, $00, $f6, $eb, $e2, $dc
12748     D9 DC E4 F0 
1274c     FD 07 0F 11 
12750     0E 04 F8 EA 
12754     DF D9 DC E6 | 	byte	$d9, $dc, $e4, $f0, $fd, $07, $0f, $11, $0e, $04, $f8, $ea, $df, $d9, $dc, $e6
12758     F5 03 0E 11 
1275c     0B FD ED DF 
12760     D9 DF EE 00 
12764     0E 11 06 F4 | 	byte	$f5, $03, $0e, $11, $0b, $fd, $ed, $df, $d9, $df, $ee, $00, $0e, $11, $06, $f4
12768     E2 D9 E0 F3 
1276c     07 10 0B F7 
12770     E1 D9 E5 FD 
12774     0E 0E F9 E2 | 	byte	$e2, $d9, $e0, $f3, $07, $10, $0b, $f7, $e1, $d9, $e5, $fd, $0e, $0e, $f9, $e2
12778     D9 EB 06 11 
1277c     02 E6 D9 EB 
12780     07 10 F9 DD 
12784     E0 FD 10 FF | 	byte	$d9, $eb, $06, $11, $02, $e6, $d9, $eb, $07, $10, $f9, $dd, $e0, $fd, $10, $ff
12788     E0 E0 00 10 
1278c     F7 DB EB 0C 
12790     06 E1 E3 07 
12794     09 E2 E2 09 | 	byte	$e0, $e0, $00, $10, $f7, $db, $eb, $0c, $06, $e1, $e3, $07, $09, $e2, $e2, $09
12798     04 DE EC 0F 
1279c     F5 DB 02 07 
127a0     DF F2 0F E5 
127a4     EA 0F E8 E6 | 	byte	$04, $de, $ec, $0f, $f5, $db, $02, $07, $df, $f2, $0f, $e5, $ea, $0f, $e8, $e6
127a8     0E E6 ED 0D 
127ac     E0 FA 04 DC 
127b0     0A F0 EB 0C 
127b4     DD 08 EE F1 | 	byte	$0e, $e6, $ed, $0d, $e0, $fa, $04, $dc, $0a, $f0, $eb, $0c, $dd, $08, $ee, $f1
127b8     05 DF 0D DE 
127bc     09 E6 FC F1 
127c0     F6 F9 F0 FE 
127c4     ED FE EE FB | 	byte	$05, $df, $0d, $de, $09, $e6, $fc, $f1, $f6, $f9, $f0, $fe, $ed, $fe, $ee, $fb
127c8     F3 F5 FB EB 
127cc     05 E0 0B E0 
127d0     06 EC F4 02 
127d4     E2 0A E8 F9 | 	byte	$f3, $f5, $fb, $eb, $05, $e0, $0b, $e0, $06, $ec, $f4, $02, $e2, $0a, $e8, $f9
127d8     FF E5 0B DF 
127dc     08 E8 FE F3 
127e0     F4 FC EE FD 
127e4     EB 01 EA FE | 	byte	$ff, $e5, $0b, $df, $08, $e8, $fe, $f3, $f4, $fc, $ee, $fd, $eb, $01, $ea, $fe
127e8     EF F8 F8 EE 
127ec     03 E2 0D DD 
127f0     0A E7 F8 00 
127f4     DF 0E E2 FA | 	byte	$ef, $f8, $f8, $ee, $03, $e2, $0d, $dd, $0a, $e7, $f8, $00, $df, $0e, $e2, $fa
127f8     02 DD 0B F1 
127fc     E6 0F E5 EE 
12800     0E E3 EF 0F 
12804     E6 E8 0F F0 | 	byte	$02, $dd, $0b, $f1, $e6, $0f, $e5, $ee, $0e, $e3, $ef, $0f, $e6, $e8, $0f, $f0
12808     DE 08 02 DD 
1280c     F4 0F EF DC 
12810     01 0D E9 DE 
12814     01 0E ED DB | 	byte	$de, $08, $02, $dd, $f4, $0f, $ef, $dc, $01, $0d, $e9, $de, $01, $0e, $ed, $db
12818     F9 10 FC DD 
1281c     E5 06 0F F2 
12820     DB E6 06 10 
12824     F9 DF DE F9 | 	byte	$f9, $10, $fc, $dd, $e5, $06, $0f, $f2, $db, $e6, $06, $10, $f9, $df, $de, $f9
12828     0E 0B F1 DC 
1282c     DF F7 0C 10 
12830     FD E4 D9 E4 
12834     FC 0D 10 01 | 	byte	$0e, $0b, $f1, $dc, $df, $f7, $0c, $10, $fd, $e4, $d9, $e4, $fc, $0d, $10, $01
12838     EB DC DB EA 
1283c     FF 0D 10 05 
12840     F3 E2 DA DD 
12844     EB FD 0A 10 | 	byte	$eb, $dc, $db, $ea, $ff, $0d, $10, $05, $f3, $e2, $da, $dd, $eb, $fd, $0a, $10
12848     0D 01 F2 E4 
1284c     DC DB E1 EF 
12850     FE 09 0F 0F 
12854     09 00 F3 E7 | 	byte	$0d, $01, $f2, $e4, $dc, $db, $e1, $ef, $fe, $09, $0f, $0f, $09, $00, $f3, $e7
12858     DF DA DC E2 
1285c     ED F9 02 0A 
12860     0F 0F 0C 06 
12864     FE F3 E9 E2 | 	byte	$df, $da, $dc, $e2, $ed, $f9, $02, $0a, $0f, $0f, $0c, $06, $fe, $f3, $e9, $e2
12868     DE DB DC E0 
1286c     E6 EF F7 FF 
12870     05 0A 0E 0F 
12874     0E 0A 05 FF | 	byte	$de, $db, $dc, $e0, $e6, $ef, $f7, $ff, $05, $0a, $0e, $0f, $0e, $0a, $05, $ff
12878     F8 F1 EB E5 
1287c     E1 DF DD DD 
12880     DF E2 E6 EC 
12884     F2 F8 FE 01 | 	byte	$f8, $f1, $eb, $e5, $e1, $df, $dd, $dd, $df, $e2, $e6, $ec, $f2, $f8, $fe, $01
12888     06 09 0B 0C 
1288c     0C 0C 09 07 
12890     04 00 FC F8 
12894     F3 EE EA E6 | 	byte	$06, $09, $0b, $0c, $0c, $0c, $09, $07, $04, $00, $fc, $f8, $f3, $ee, $ea, $e6
12898     E3 E0 DF DE 
1289c     DE DF E1 E3 
128a0     E7 EC F0 F6 
128a4     FC 00 05 09 | 	byte	$e3, $e0, $df, $de, $de, $df, $e1, $e3, $e7, $ec, $f0, $f6, $fc, $00, $05, $09
128a8     0C 0E 0F 0E 
128ac     0C 08 04 FF 
128b0     F8 F1 EB E5 
128b4     E0 DD DB DB | 	byte	$0c, $0e, $0f, $0e, $0c, $08, $04, $ff, $f8, $f1, $eb, $e5, $e0, $dd, $db, $db
128b8     DE E2 E8 F0 
128bc     F8 00 06 0C 
128c0     0F 10 0E 09 
128c4     01 F9 F0 E7 | 	byte	$de, $e2, $e8, $f0, $f8, $00, $06, $0c, $0f, $10, $0e, $09, $01, $f9, $f0, $e7
128c8     E0 DC DA DD 
128cc     E3 EE F9 02 
128d0     0B 0F 10 0C 
128d4     02 F7 EB E0 | 	byte	$e0, $dc, $da, $dd, $e3, $ee, $f9, $02, $0b, $0f, $10, $0c, $02, $f7, $eb, $e0
128d8     DA DB E1 ED 
128dc     FB 06 0E 10 
128e0     0A FE EF E1 
128e4     DA DC E7 F8 | 	byte	$da, $db, $e1, $ed, $fb, $06, $0e, $10, $0a, $fe, $ef, $e1, $da, $dc, $e7, $f8
128e8     07 0F 0F 02 
128ec     F1 E0 D9 DF 
128f0     F0 04 0F 0D 
128f4     FE E9 DB DD | 	byte	$07, $0f, $0f, $02, $f1, $e0, $d9, $df, $f0, $04, $0f, $0d, $fe, $e9, $db, $dd
128f8     F0 05 10 08 
128fc     F3 DF DB EE 
12900     06 10 02 E9 
12904     DB E6 02 0F | 	byte	$f0, $05, $10, $08, $f3, $df, $db, $ee, $06, $10, $02, $e9, $db, $e6, $02, $0f
12908     02 E6 DA EF 
1290c     0A 0C F0 DB 
12910     E9 08 0C EE 
12914     DA F3 0E 01 | 	byte	$02, $e6, $da, $ef, $0a, $0c, $f0, $db, $e9, $08, $0c, $ee, $da, $f3, $0e, $01
12918     DF E4 07 09 
1291c     E4 E1 06 08 
12920     E3 E6 0C FE 
12924     DC F6 0F E9 | 	byte	$df, $e4, $07, $09, $e4, $e1, $06, $08, $e3, $e6, $0c, $fe, $dc, $f6, $0f, $e9
12928     E3 0C F9 DC 
1292c     05 02 DC 01 
12930     03 DC 03 FE 
12934     DD 09 F3 E5 | 	byte	$e3, $0c, $f9, $dc, $05, $02, $dc, $01, $03, $dc, $03, $fe, $dd, $09, $f3, $e5
12938     0E E3 FA 01 
1293c     DF 0D E5 FB 
12940     FD E4 0C DF 
12944     0A E5 00 F2 | 	byte	$0e, $e3, $fa, $01, $df, $0d, $e5, $fb, $fd, $e4, $0c, $df, $0a, $e5, $00, $f2
12948     F4 FC EB 02 
1294c     E8 05 E6 04 
12950     E6 01 ED FB 
12954     F5 F1 00 E5 | 	byte	$f4, $fc, $eb, $02, $e8, $05, $e6, $04, $e6, $01, $ed, $fb, $f5, $f1, $00, $e5
12958     09 E0 09 E7 
1295c     FB FB E8 07 
12960     E0 0C DF 09 
12964     E4 04 E9 02 | 	byte	$09, $e0, $09, $e7, $fb, $fb, $e8, $07, $e0, $0c, $df, $09, $e4, $04, $e9, $02
12968     E9 03 E8 05 
1296c     E3 09 E0 0D 
12970     E0 08 E7 FA 
12974     FB E6 0C DE | 	byte	$e9, $03, $e8, $05, $e3, $09, $e0, $0d, $e0, $08, $e7, $fa, $fb, $e6, $0c, $de
12978     06 F2 EA 0C 
1297c     DE 01 FD DF 
12980     0B F0 E6 0E 
12984     EA E8 0F EB | 	byte	$06, $f2, $ea, $0c, $de, $01, $fd, $df, $0b, $f0, $e6, $0e, $ea, $e8, $0f, $eb
12988     E4 0E F3 DE 
1298c     05 02 DD F4 
12990     0F EE DE 03 
12994     0A E4 E2 07 | 	byte	$e4, $0e, $f3, $de, $05, $02, $dd, $f4, $0f, $ee, $de, $03, $0a, $e4, $e2, $07
12998     09 E5 DF 02 
1299c     0E F1 DB F2 
129a0     0E 05 E5 DD 
129a4     F8 0E 04 E7 | 	byte	$09, $e5, $df, $02, $0e, $f1, $db, $f2, $0e, $05, $e5, $dd, $f8, $0e, $04, $e7
129a8     DA EF 09 0E 
129ac     F7 E0 DE F5 
129b0     0C 0F FB E3 
129b4     DA E7 00 0E | 	byte	$da, $ef, $09, $0e, $f7, $e0, $de, $f5, $0c, $0f, $fb, $e3, $da, $e7, $00, $0e
129b8     0C FA E4 DA 
129bc     E2 F6 08 10 
129c0     09 F8 E5 DB 
129c4     DD EB FE 0B | 	byte	$0c, $fa, $e4, $da, $e2, $f6, $08, $10, $09, $f8, $e5, $db, $dd, $eb, $fe, $0b
129c8     10 09 FD EC 
129cc     DF DA DF EB 
129d0     FA 07 0F 0F 
129d4     08 FD F0 E4 | 	byte	$10, $09, $fd, $ec, $df, $da, $df, $eb, $fa, $07, $0f, $0f, $08, $fd, $f0, $e4
129d8     DD DB DF E8 
129dc     F5 00 08 0E 
129e0     0F 0C 03 FA 
129e4     F0 E6 E0 DC | 	byte	$dd, $db, $df, $e8, $f5, $00, $08, $0e, $0f, $0c, $03, $fa, $f0, $e6, $e0, $dc
129e8     DC E0 E6 EE 
129ec     F8 00 06 0C 
129f0     0E 0E 0B 06 
129f4     00 F8 F1 E9 | 	byte	$dc, $e0, $e6, $ee, $f8, $00, $06, $0c, $0e, $0e, $0b, $06, $00, $f8, $f1, $e9
129f8     E4 E0 DD DD 
129fc     DF E1 E6 EB 
12a00     F2 F9 FF 03 
12a04     07 0B 0C 0C | 	byte	$e4, $e0, $dd, $dd, $df, $e1, $e6, $eb, $f2, $f9, $ff, $03, $07, $0b, $0c, $0c
12a08     0C 09 06 02 
12a0c     FE F9 F4 EF 
12a10     EA E7 E3 E1 
12a14     E0 DF E0 E0 | 	byte	$0c, $09, $06, $02, $fe, $f9, $f4, $ef, $ea, $e7, $e3, $e1, $e0, $df, $e0, $e0
12a18     E2 E5 E8 EC 
12a1c     F0 F5 F9 FE 
12a20     01 04 07 09 
12a24     0B 0C 0C 0C | 	byte	$e2, $e5, $e8, $ec, $f0, $f5, $f9, $fe, $01, $04, $07, $09, $0b, $0c, $0c, $0c
12a28     09 07 03 00 
12a2c     FC F6 F1 EC 
12a30     E7 E2 E0 DD 
12a34     DC DC DF E1 | 	byte	$09, $07, $03, $00, $fc, $f6, $f1, $ec, $e7, $e2, $e0, $dd, $dc, $dc, $df, $e1
12a38     E5 EB F2 F8 
12a3c     FF 04 09 0C 
12a40     0F 0F 0C 08 
12a44     02 FC F3 EC | 	byte	$e5, $eb, $f2, $f8, $ff, $04, $09, $0c, $0f, $0f, $0c, $08, $02, $fc, $f3, $ec
12a48     E4 DF DC DB 
12a4c     DD E2 EA F3 
12a50     FD 05 0B 0F 
12a54     0F 0C 04 FB | 	byte	$e4, $df, $dc, $db, $dd, $e2, $ea, $f3, $fd, $05, $0b, $0f, $0f, $0c, $04, $fb
12a58     F0 E6 DF DB 
12a5c     DC E2 EB F8 
12a60     03 0B 0F 0E 
12a64     05 F9 EB E0 | 	byte	$f0, $e6, $df, $db, $dc, $e2, $eb, $f8, $03, $0b, $0f, $0e, $05, $f9, $eb, $e0
12a68     DB DC E6 F5 
12a6c     03 0D 0F 08 
12a70     FB EA DF DA 
12a74     E2 F3 04 0E | 	byte	$db, $dc, $e6, $f5, $03, $0d, $0f, $08, $fb, $ea, $df, $da, $e2, $f3, $04, $0e
12a78     0D 00 EE DE 
12a7c     DB E8 FD 0C 
12a80     0F 00 EB DC 
12a84     DF F2 08 0F | 	byte	$0d, $00, $ee, $de, $db, $e8, $fd, $0c, $0f, $00, $eb, $dc, $df, $f2, $08, $0f
12a88     01 E9 DB E5 
12a8c     FE 0E 06 ED 
12a90     DC E5 02 0F 
12a94     FF E2 DE F9 | 	byte	$01, $e9, $db, $e5, $fe, $0e, $06, $ed, $dc, $e5, $02, $0f, $ff, $e2, $de, $f9
12a98     0E 02 E3 DE 
12a9c     FD 0F FB DE 
12aa0     EA 09 06 E4 
12aa4     E2 04 09 E5 | 	byte	$0e, $02, $e3, $de, $fd, $0f, $fb, $de, $ea, $09, $06, $e4, $e2, $04, $09, $e5
12aa8     E1 07 04 E0 
12aac     EC 0D F6 DC 
12ab0     00 07 E0 F2 
12ab4     0D E7 E9 0E | 	byte	$e1, $07, $04, $e0, $ec, $0d, $f6, $dc, $00, $07, $e0, $f2, $0d, $e7, $e9, $0e
12ab8     EB E8 0E E8 
12abc     EC 0D E1 F8 
12ac0     05 DE 07 F3 
12ac4     E8 0C DF 03 | 	byte	$eb, $e8, $0e, $e8, $ec, $0d, $e1, $f8, $05, $de, $07, $f3, $e8, $0c, $df, $03
12ac8     F3 EC 07 DF 
12acc     0B E3 00 EF 
12ad0     F4 00 E9 04 
12ad4     E4 08 E1 0A | 	byte	$f3, $ec, $07, $df, $0b, $e3, $00, $ef, $f4, $00, $e9, $04, $e4, $08, $e1, $0a
12ad8     E1 09 E3 06 
12adc     E6 01 EC FA 
12ae0     F9 ED 04 E1 
12ae4     0B DF 0A E2 | 	byte	$e1, $09, $e3, $06, $e6, $01, $ec, $fa, $f9, $ed, $04, $e1, $0b, $df, $0a, $e2
12ae8     06 E5 03 E7 
12aec     03 E6 05 E2 
12af0     09 DF 0C E0 
12af4     09 E7 FE F8 | 	byte	$06, $e5, $03, $e7, $03, $e6, $05, $e2, $09, $df, $0c, $e0, $09, $e7, $fe, $f8
12af8     E9 0A DF 09 
12afc     EC F0 08 DE 
12b00     05 F5 E5 0D 
12b04     E5 F0 0B E1 | 	byte	$e9, $0a, $df, $09, $ec, $f0, $08, $de, $05, $f5, $e5, $0d, $e5, $f0, $0b, $e1
12b08     F6 0B E0 F4 
12b0c     0D E3 EC 0D 
12b10     EF DF 07 03 
12b14     DE F2 0E F2 | 	byte	$f6, $0b, $e0, $f4, $0d, $e3, $ec, $0d, $ef, $df, $07, $03, $de, $f2, $0e, $f2
12b18     DD FD 0D EF 
12b1c     DC FC 0E F2 
12b20     DC F2 0D 02 
12b24     E2 E0 FD 0F | 	byte	$dd, $fd, $0d, $ef, $dc, $fc, $0e, $f2, $dc, $f2, $0d, $02, $e2, $e0, $fd, $0f
12b28     FD E0 E0 FB 
12b2c     0F 03 E7 DB 
12b30     EC 07 0F FF 
12b34     E5 DB EA 02 | 	byte	$fd, $e0, $e0, $fb, $0f, $03, $e7, $db, $ec, $07, $0f, $ff, $e5, $db, $ea, $02
12b38     0F 08 F2 DF 
12b3c     DC EC 01 0E 
12b40     0C FC E7 DC 
12b44     DF EF 00 0D | 	byte	$0f, $08, $f2, $df, $dc, $ec, $01, $0e, $0c, $fc, $e7, $dc, $df, $ef, $00, $0d
12b48     0F 03 F2 E2 
12b4c     DC DF EB FC 
12b50     07 0F 0D 03 
12b54     F5 E7 DE DB | 	byte	$0f, $03, $f2, $e2, $dc, $df, $eb, $fc, $07, $0f, $0d, $03, $f5, $e7, $de, $db
12b58     E0 EA F8 03 
12b5c     0B 0F 0C 04 
12b60     FA EE E4 DE 
12b64     DC DE E5 EE | 	byte	$e0, $ea, $f8, $03, $0b, $0f, $0c, $04, $fa, $ee, $e4, $de, $dc, $de, $e5, $ee
12b68     F9 01 09 0D 
12b6c     0E 0C 06 FF 
12b70     F7 ED E6 E0 
12b74     DE DC DF E3 | 	byte	$f9, $01, $09, $0d, $0e, $0c, $06, $ff, $f7, $ed, $e6, $e0, $de, $dc, $df, $e3
12b78     E9 F0 F8 FF 
12b7c     04 09 0C 0D 
12b80     0C 0A 06 01 
12b84     FC F5 F0 EA | 	byte	$e9, $f0, $f8, $ff, $04, $09, $0c, $0d, $0c, $0a, $06, $01, $fc, $f5, $f0, $ea
12b88     E5 E1 E0 DE 
12b8c     DF E0 E3 E6 
12b90     EB F0 F5 F9 
12b94     FE 01 04 07 | 	byte	$e5, $e1, $e0, $de, $df, $e0, $e3, $e6, $eb, $f0, $f5, $f9, $fe, $01, $04, $07
12b98     09 0A 0B 0A 
12b9c     08 07 04 00 
12ba0     FE FA F6 F2 
12ba4     EE EB E7 E5 | 	byte	$09, $0a, $0b, $0a, $08, $07, $04, $00, $fe, $fa, $f6, $f2, $ee, $eb, $e7, $e5
12ba8     E3 E0 E0 E0 
12bac     E0 E0 E2 E5 
12bb0     E8 ED F1 F7 
12bb4     FC 00 04 07 | 	byte	$e3, $e0, $e0, $e0, $e0, $e0, $e2, $e5, $e8, $ed, $f1, $f7, $fc, $00, $04, $07
12bb8     0A 0C 0D 0D 
12bbc     0C 09 05 00 
12bc0     FB F5 EF E9 
12bc4     E4 E0 DD DC | 	byte	$0a, $0c, $0d, $0d, $0c, $09, $05, $00, $fb, $f5, $ef, $e9, $e4, $e0, $dd, $dc
12bc8     DD E0 E4 EA 
12bcc     F1 F8 FF 06 
12bd0     0A 0E 0E 0C 
12bd4     08 01 F9 F1 | 	byte	$dd, $e0, $e4, $ea, $f1, $f8, $ff, $06, $0a, $0e, $0e, $0c, $08, $01, $f9, $f1
12bd8     E8 E1 DC DC 
12bdc     DE E3 EC F7 
12be0     01 07 0D 0F 
12be4     0C 04 F9 EE | 	byte	$e8, $e1, $dc, $dc, $de, $e3, $ec, $f7, $01, $07, $0d, $0f, $0c, $04, $f9, $ee
12be8     E3 DD DB E0 
12bec     E9 F6 02 0C 
12bf0     0F 0B 00 F3 
12bf4     E6 DD DB E3 | 	byte	$e3, $dd, $db, $e0, $e9, $f6, $02, $0c, $0f, $0b, $00, $f3, $e6, $dd, $db, $e3
12bf8     F2 02 0C 0F 
12bfc     06 F7 E6 DC 
12c00     DD EB FE 0B 
12c04     0E 03 F0 E1 | 	byte	$f2, $02, $0c, $0f, $06, $f7, $e6, $dc, $dd, $eb, $fe, $0b, $0e, $03, $f0, $e1
12c08     DB E8 FE 0D 
12c0c     0C FB E5 DB 
12c10     E6 FE 0D 08 
12c14     F2 DE E0 F8 | 	byte	$db, $e8, $fe, $0d, $0c, $fb, $e5, $db, $e6, $fe, $0d, $08, $f2, $de, $e0, $f8
12c18     0C 08 F0 DD 
12c1c     E6 02 0F FB 
12c20     E0 E1 FE 0F 
12c24     FA DF E6 06 | 	byte	$0c, $08, $f0, $dd, $e6, $02, $0f, $fb, $e0, $e1, $fe, $0f, $fa, $df, $e6, $06
12c28     0A EB DD FB 
12c2c     0E F2 DC F8 
12c30     0E F2 DD FC 
12c34     0B E8 E4 09 | 	byte	$0a, $eb, $dd, $fb, $0e, $f2, $dc, $f8, $0e, $f2, $dd, $fc, $0b, $e8, $e4, $09
12c38     FD DD FA 0B 
12c3c     E4 ED 0E E9 
12c40     E7 0C EB E8 
12c44     0C E9 EE 0B | 	byte	$fd, $dd, $fa, $0b, $e4, $ed, $0e, $e9, $e7, $0c, $eb, $e8, $0c, $e9, $ee, $0b
12c48     E2 FA 03 DE 
12c4c     09 EE EE 08 
12c50     DE 07 EC F3 
12c54     01 E2 0B DF | 	byte	$e2, $fa, $03, $de, $09, $ee, $ee, $08, $de, $07, $ec, $f3, $01, $e2, $0b, $df
12c58     07 E8 FF F1 
12c5c     F5 FA EE FF 
12c60     EB 01 EA FF 
12c64     ED FF F1 F4 | 	byte	$07, $e8, $ff, $f1, $f5, $fa, $ee, $ff, $eb, $01, $ea, $ff, $ed, $ff, $f1, $f4
12c68     FB EC 03 E6 
12c6c     06 E3 07 E3 
12c70     07 E4 03 E7 
12c74     01 EE F5 FA | 	byte	$fb, $ec, $03, $e6, $06, $e3, $07, $e3, $07, $e4, $03, $e7, $01, $ee, $f5, $fa
12c78     E8 08 DF 0B 
12c7c     E2 FD F7 E7 
12c80     0A E0 02 F9 
12c84     E3 0C E6 F2 | 	byte	$e8, $08, $df, $0b, $e2, $fd, $f7, $e7, $0a, $e0, $02, $f9, $e3, $0c, $e6, $f2
12c88     09 E0 FC 04 
12c8c     DD FF 05 DE 
12c90     FC 08 E1 F0 
12c94     0D EB E3 08 | 	byte	$09, $e0, $fc, $04, $dd, $ff, $05, $de, $fc, $08, $e1, $f0, $0d, $eb, $e3, $08
12c98     00 DF F2 0E 
12c9c     F2 DC FB 0E 
12ca0     F0 DC F8 0E 
12ca4     F8 DD EC 09 | 	byte	$00, $df, $f2, $0e, $f2, $dc, $fb, $0e, $f0, $dc, $f8, $0e, $f8, $dd, $ec, $09
12ca8     06 E9 DD F5 
12cac     0C 04 E7 DC 
12cb0     F2 0A 0A F2 
12cb4     DD E2 FC 0D | 	byte	$06, $e9, $dd, $f5, $0c, $04, $e7, $dc, $f2, $0a, $0a, $f2, $dd, $e2, $fc, $0d
12cb8     08 F1 DE E0 
12cbc     F4 08 0E 00 
12cc0     EA DC E0 F2 
12cc4     05 0F 08 F8 | 	byte	$08, $f1, $de, $e0, $f4, $08, $0e, $00, $ea, $dc, $e0, $f2, $05, $0f, $08, $f8
12cc8     E5 DC E0 F0 
12ccc     02 0C 0D 03 
12cd0     F4 E4 DC DE 
12cd4     E8 F7 04 0D | 	byte	$e5, $dc, $e0, $f0, $02, $0c, $0d, $03, $f4, $e4, $dc, $de, $e8, $f7, $04, $0d
12cd8     0E 06 FB EC 
12cdc     E2 DC DD E4 
12ce0     F0 FD 06 0C 
12ce4     0E 0A 02 F9 | 	byte	$0e, $06, $fb, $ec, $e2, $dc, $dd, $e4, $f0, $fd, $06, $0c, $0e, $0a, $02, $f9
12ce8     EE E5 DF DC 
12cec     DF E4 EC F5 
12cf0     FE 05 0A 0D 
12cf4     0C 09 03 FD | 	byte	$ee, $e5, $df, $dc, $df, $e4, $ec, $f5, $fe, $05, $0a, $0d, $0c, $09, $03, $fd
12cf8     F4 ED E6 E1 
12cfc     DE DE DF E3 
12d00     E8 EF F5 FB 
12d04     00 05 09 0B | 	byte	$f4, $ed, $e6, $e1, $de, $de, $df, $e3, $e8, $ef, $f5, $fb, $00, $05, $09, $0b
12d08     0C 0B 08 05 
12d0c     00 FC F7 F1 
12d10     EC E7 E4 E1 
12d14     E0 E0 E0 E1 | 	byte	$0c, $0b, $08, $05, $00, $fc, $f7, $f1, $ec, $e7, $e4, $e1, $e0, $e0, $e0, $e1
12d18     E3 E6 EA EF 
12d1c     F3 F8 FC 00 
12d20     02 05 07 08 
12d24     09 09 08 07 | 	byte	$e3, $e6, $ea, $ef, $f3, $f8, $fc, $00, $02, $05, $07, $08, $09, $09, $08, $07
12d28     06 04 01 FF 
12d2c     FC F8 F4 F1 
12d30     ED E9 E7 E4 
12d34     E1 E0 E0 DF | 	byte	$06, $04, $01, $ff, $fc, $f8, $f4, $f1, $ed, $e9, $e7, $e4, $e1, $e0, $e0, $df
12d38     E0 E1 E3 E7 
12d3c     EA EF F3 F8 
12d40     FE 01 06 08 
12d44     0B 0C 0C 0C | 	byte	$e0, $e1, $e3, $e7, $ea, $ef, $f3, $f8, $fe, $01, $06, $08, $0b, $0c, $0c, $0c
12d48     09 05 00 FC 
12d4c     F6 F0 E9 E4 
12d50     E1 DE DD DE 
12d54     E0 E5 EB F2 | 	byte	$09, $05, $00, $fc, $f6, $f0, $e9, $e4, $e1, $de, $dd, $de, $e0, $e5, $eb, $f2
12d58     FB 00 07 0B 
12d5c     0E 0D 0A 04 
12d60     FE F5 EC E5 
12d64     E0 DC DC E1 | 	byte	$fb, $00, $07, $0b, $0e, $0d, $0a, $04, $fe, $f5, $ec, $e5, $e0, $dc, $dc, $e1
12d68     E9 F3 FE 06 
12d6c     0C 0E 0C 05 
12d70     FC F0 E5 DE 
12d74     DC E0 E9 F6 | 	byte	$e9, $f3, $fe, $06, $0c, $0e, $0c, $05, $fc, $f0, $e5, $de, $dc, $e0, $e9, $f6
12d78     02 0B 0E 0A 
12d7c     FF F1 E4 DC 
12d80     DD E7 F7 04 
12d84     0D 0C 01 F1 | 	byte	$02, $0b, $0e, $0a, $ff, $f1, $e4, $dc, $dd, $e7, $f7, $04, $0d, $0c, $01, $f1
12d88     E1 DC E2 F2 
12d8c     04 0D 0A FA 
12d90     E7 DC E1 F4 
12d94     07 0E 03 ED | 	byte	$e1, $dc, $e2, $f2, $04, $0d, $0a, $fa, $e7, $dc, $e1, $f4, $07, $0e, $03, $ed
12d98     DD E0 F5 09 
12d9c     0C FA E3 DD 
12da0     F0 08 0C F7 
12da4     DF E1 FC 0D | 	byte	$dd, $e0, $f5, $09, $0c, $fa, $e3, $dd, $f0, $08, $0c, $f7, $df, $e1, $fc, $0d
12da8     01 E5 DE F9 
12dac     0D FF E1 E3 
12db0     01 0D EF DC 
12db4     F7 0D F7 DD | 	byte	$01, $e5, $de, $f9, $0d, $ff, $e1, $e3, $01, $0d, $ef, $dc, $f7, $0d, $f7, $dd
12db8     F3 0D F5 DC 
12dbc     F9 0C EB E2 
12dc0     07 00 DE F7 
12dc4     0B E5 EB 0B | 	byte	$f3, $0d, $f5, $dc, $f9, $0c, $eb, $e2, $07, $00, $de, $f7, $0b, $e5, $eb, $0b
12dc8     EC E6 0B EF 
12dcc     E5 0B EC EA 
12dd0     0B E3 F7 05 
12dd4     DE 07 F1 EA | 	byte	$ec, $e6, $0b, $ef, $e5, $0b, $ec, $ea, $0b, $e3, $f7, $05, $de, $07, $f1, $ea
12dd8     0A E0 05 F0 
12ddc     EF 04 E0 0A 
12de0     E3 03 ED F7 
12de4     FC ED 01 E6 | 	byte	$0a, $e0, $05, $f0, $ef, $04, $e0, $0a, $e3, $03, $ed, $f7, $fc, $ed, $01, $e6
12de8     06 E3 08 E2 
12dec     07 E4 06 E6 
12df0     03 E9 04 E9 
12df4     04 E6 06 E2 | 	byte	$06, $e3, $08, $e2, $07, $e4, $06, $e6, $03, $e9, $04, $e9, $04, $e6, $06, $e2
12df8     0A E0 0A E2 
12dfc     03 EE F4 01 
12e00     E2 0A E2 FF 
12e04     F8 E5 0B E3 | 	byte	$0a, $e0, $0a, $e2, $03, $ee, $f4, $01, $e2, $0a, $e2, $ff, $f8, $e5, $0b, $e3
12e08     FA 01 DE 08 
12e0c     F4 E4 0C EC 
12e10     E7 0B EB E6 
12e14     0B F1 E1 08 | 	byte	$fa, $01, $de, $08, $f4, $e4, $0c, $ec, $e7, $0b, $eb, $e6, $0b, $f1, $e1, $08
12e18     FC DE FA 0A 
12e1c     E6 E6 09 FF 
12e20     E0 F0 0C F9 
12e24     DE F0 0C FE | 	byte	$fc, $de, $fa, $0a, $e6, $e6, $09, $ff, $e0, $f0, $0c, $f9, $de, $f0, $0c, $fe
12e28     DF E7 07 08 
12e2c     EB DD F5 0C 
12e30     03 E7 DD F4 
12e34     0B 07 EE DD | 	byte	$df, $e7, $07, $08, $eb, $dd, $f5, $0c, $03, $e7, $dd, $f4, $0b, $07, $ee, $dd
12e38     E6 01 0E 01 
12e3c     EA DC E7 FE 
12e40     0D 08 F4 E1 
12e44     DD EC FF 0D | 	byte	$e6, $01, $0e, $01, $ea, $dc, $e7, $fe, $0d, $08, $f4, $e1, $dd, $ec, $ff, $0d
12e48     0A FA E7 DD 
12e4c     E0 F0 02 0C 
12e50     0C 01 F0 E2 
12e54     DC E1 EF FE | 	byte	$0a, $fa, $e7, $dd, $e0, $f0, $02, $0c, $0c, $01, $f0, $e2, $dc, $e1, $ef, $fe
12e58     09 0E 09 FF 
12e5c     F0 E4 DE DD 
12e60     E4 F0 FE 06 
12e64     0C 0D 07 FE | 	byte	$09, $0e, $09, $ff, $f0, $e4, $de, $dd, $e4, $f0, $fe, $06, $0c, $0d, $07, $fe
12e68     F3 E9 E1 DD 
12e6c     DE E3 EC F6 
12e70     FF 05 0B 0D 
12e74     0B 07 00 F8 | 	byte	$f3, $e9, $e1, $dd, $de, $e3, $ec, $f6, $ff, $05, $0b, $0d, $0b, $07, $00, $f8
12e78     EF E8 E2 DF 
12e7c     DE E0 E3 E9 
12e80     F0 F8 FF 03 
12e84     08 0A 0C 0B | 	byte	$ef, $e8, $e2, $df, $de, $e0, $e3, $e9, $f0, $f8, $ff, $03, $08, $0a, $0c, $0b
12e88     08 04 00 FA 
12e8c     F4 EF E9 E5 
12e90     E2 E0 E0 E0 
12e94     E1 E4 E7 EC | 	byte	$08, $04, $00, $fa, $f4, $ef, $e9, $e5, $e2, $e0, $e0, $e0, $e1, $e4, $e7, $ec
12e98     F0 F5 FA FF 
12e9c     01 04 07 08 
12ea0     09 09 08 07 
12ea4     04 01 FF FC | 	byte	$f0, $f5, $fa, $ff, $01, $04, $07, $08, $09, $09, $08, $07, $04, $01, $ff, $fc
12ea8     F8 F5 F1 EF 
12eac     EC E8 E6 E4 
12eb0     E3 E2 E1 E1 
12eb4     E2 E3 E5 E7 | 	byte	$f8, $f5, $f1, $ef, $ec, $e8, $e6, $e4, $e3, $e2, $e1, $e1, $e2, $e3, $e5, $e7
12eb8     EB EE F1 F6 
12ebc     F9 FE 00 03 
12ec0     06 08 09 0B 
12ec4     0B 0A 08 06 | 	byte	$eb, $ee, $f1, $f6, $f9, $fe, $00, $03, $06, $08, $09, $0b, $0b, $0a, $08, $06
12ec8     03 FF FC F6 
12ecc     F1 EC E7 E3 
12ed0     E0 DE DE DE 
12ed4     E0 E3 E7 EE | 	byte	$03, $ff, $fc, $f6, $f1, $ec, $e7, $e3, $e0, $de, $de, $de, $e0, $e3, $e7, $ee
12ed8     F4 FB 00 05 
12edc     09 0C 0C 0C 
12ee0     08 03 FD F6 
12ee4     EE E7 E2 DE | 	byte	$f4, $fb, $00, $05, $09, $0c, $0c, $0c, $08, $03, $fd, $f6, $ee, $e7, $e2, $de
12ee8     DC DE E3 EA 
12eec     F3 FD 04 09 
12ef0     0D 0C 08 00 
12ef4     F8 EC E3 DE | 	byte	$dc, $de, $e3, $ea, $f3, $fd, $04, $09, $0d, $0c, $08, $00, $f8, $ec, $e3, $de
12ef8     DC DF E7 F3 
12efc     FF 07 0D 0C 
12f00     05 FB EE E3 
12f04     DC DE E7 F6 | 	byte	$dc, $df, $e7, $f3, $ff, $07, $0d, $0c, $05, $fb, $ee, $e3, $dc, $de, $e7, $f6
12f08     03 0C 0C 04 
12f0c     F7 E8 DE DD 
12f10     E9 FA 08 0E 
12f14     06 F6 E5 DC | 	byte	$03, $0c, $0c, $04, $f7, $e8, $de, $dd, $e9, $fa, $08, $0e, $06, $f6, $e5, $dc
12f18     E2 F4 06 0E 
12f1c     04 F1 E0 DE 
12f20     EE 04 0D 02 
12f24     EC DD E4 FC | 	byte	$e2, $f4, $06, $0e, $04, $f1, $e0, $de, $ee, $04, $0d, $02, $ec, $dd, $e4, $fc
12f28     0C 06 EE DD 
12f2c     E8 02 0D FC 
12f30     E1 E1 FC 0C 
12f34     FD E1 E3 01 | 	byte	$0c, $06, $ee, $dd, $e8, $02, $0d, $fc, $e1, $e1, $fc, $0c, $fd, $e1, $e3, $01
12f38     0C F3 DD F2 
12f3c     0B FE E0 EA 
12f40     09 FF E0 EC 
12f44     0B F9 DE F8 | 	byte	$0c, $f3, $dd, $f2, $0b, $fe, $e0, $ea, $09, $ff, $e0, $ec, $0b, $f9, $de, $f8
12f48     0C EA E4 08 
12f4c     FB DE FE 05 
12f50     E0 F6 09 E3 
12f54     F4 09 E1 F7 | 	byte	$0c, $ea, $e4, $08, $fb, $de, $fe, $05, $e0, $f6, $09, $e3, $f4, $09, $e1, $f7
12f58     06 E0 00 FD 
12f5c     E0 0A EB EF 
12f60     06 E0 06 EE 
12f64     F0 04 E0 0A | 	byte	$06, $e0, $00, $fd, $e0, $0a, $eb, $ef, $06, $e0, $06, $ee, $f0, $04, $e0, $0a
12f68     E4 00 F1 F1 
12f6c     01 E6 07 E1 
12f70     09 E1 09 E2 
12f74     08 E2 07 E2 | 	byte	$e4, $00, $f1, $f1, $01, $e6, $07, $e1, $09, $e1, $09, $e2, $08, $e2, $07, $e2
12f78     08 E3 06 E7 
12f7c     00 EF F6 FC 
12f80     E8 08 E0 09 
12f84     E7 FB FC E4 | 	byte	$08, $e3, $06, $e7, $00, $ef, $f6, $fc, $e8, $08, $e0, $09, $e7, $fb, $fc, $e4
12f88     0B E4 FA FF 
12f8c     E0 09 EE EA 
12f90     0B E4 F3 09 
12f94     E1 F5 09 E2 | 	byte	$0b, $e4, $fa, $ff, $e0, $09, $ee, $ea, $0b, $e4, $f3, $09, $e1, $f5, $09, $e2
12f98     F2 0B E8 E9 
12f9c     0B F5 DF 01 
12fa0     05 E3 EB 0B 
12fa4     FA DE F2 0B | 	byte	$f2, $0b, $e8, $e9, $0b, $f5, $df, $01, $05, $e3, $eb, $0b, $fa, $de, $f2, $0b
12fa8     F7 DE F1 0B 
12fac     FC E0 E8 06 
12fb0     08 ED DD F2 
12fb4     0A 04 E9 DD | 	byte	$f7, $de, $f1, $0b, $fc, $e0, $e8, $06, $08, $ed, $dd, $f2, $0a, $04, $e9, $dd
12fb8     F1 09 09 F2 
12fbc     DF E4 FD 0B 
12fc0     06 EF DE E2 
12fc4     F8 09 0C FB | 	byte	$f1, $09, $09, $f2, $df, $e4, $fd, $0b, $06, $ef, $de, $e2, $f8, $09, $0c, $fb
12fc8     E7 DD E4 F8 
12fcc     08 0D 02 F1 
12fd0     E1 DD E6 F7 
12fd4     06 0D 07 FB | 	byte	$e7, $dd, $e4, $f8, $08, $0d, $02, $f1, $e1, $dd, $e6, $f7, $06, $0d, $07, $fb
12fd8     EB E0 DD E4 
12fdc     F2 01 0A 0C 
12fe0     08 FD F0 E4 
12fe4     DE DE E5 F0 | 	byte	$eb, $e0, $dd, $e4, $f2, $01, $0a, $0c, $08, $fd, $f0, $e4, $de, $de, $e5, $f0
12fe8     FC 06 0B 0C 
12fec     08 00 F6 EC 
12ff0     E3 DE DE E1 
12ff4     E6 F0 FA 01 | 	byte	$fc, $06, $0b, $0c, $08, $00, $f6, $ec, $e3, $de, $de, $e1, $e6, $f0, $fa, $01
12ff8     07 0B 0C 09 
12ffc     04 FE F6 EF 
13000     E7 E2 E0 DF 
13004     E0 E3 E8 EE | 	byte	$07, $0b, $0c, $09, $04, $fe, $f6, $ef, $e7, $e2, $e0, $df, $e0, $e3, $e8, $ee
13008     F5 FC 00 05 
1300c     08 0A 0A 09 
13010     06 02 FF F9 
13014     F4 EF EA E6 | 	byte	$f5, $fc, $00, $05, $08, $0a, $0a, $09, $06, $02, $ff, $f9, $f4, $ef, $ea, $e6
13018     E3 E1 E0 E0 
1301c     E1 E3 E6 E9 
13020     EE F2 F7 FB 
13024     FF 01 03 06 | 	byte	$e3, $e1, $e0, $e0, $e1, $e3, $e6, $e9, $ee, $f2, $f7, $fb, $ff, $01, $03, $06
13028     07 08 08 07 
1302c     06 04 03 00 
13030     FF FC F8 F5 
13034     F1 EF EC E9 | 	byte	$07, $08, $08, $07, $06, $04, $03, $00, $ff, $fc, $f8, $f5, $f1, $ef, $ec, $e9
13038     E7 E5 E3 E2 
1303c     E2 E2 E2 E3 
13040     E5 E7 E9 EC 
13044     F0 F3 F7 FB | 	byte	$e7, $e5, $e3, $e2, $e2, $e2, $e2, $e3, $e5, $e7, $e9, $ec, $f0, $f3, $f7, $fb
13048     FF 01 04 07 
1304c     08 0A 0A 0A 
13050     08 06 03 00 
13054     FD F8 F3 EE | 	byte	$ff, $01, $04, $07, $08, $0a, $0a, $0a, $08, $06, $03, $00, $fd, $f8, $f3, $ee
13058     E9 E5 E1 E0 
1305c     DE DF E0 E3 
13060     E7 EE F4 FB 
13064     00 05 09 0C | 	byte	$e9, $e5, $e1, $e0, $de, $df, $e0, $e3, $e7, $ee, $f4, $fb, $00, $05, $09, $0c
13068     0C 0B 07 02 
1306c     FD F5 ED E6 
13070     E1 DE DD E0 
13074     E5 ED F6 FF | 	byte	$0c, $0b, $07, $02, $fd, $f5, $ed, $e6, $e1, $de, $dd, $e0, $e5, $ed, $f6, $ff
13078     06 0B 0C 0B 
1307c     05 FD F3 E9 
13080     E1 DD DE E4 
13084     EE FA 03 0B | 	byte	$06, $0b, $0c, $0b, $05, $fd, $f3, $e9, $e1, $dd, $de, $e4, $ee, $fa, $03, $0b
13088     0C 08 FF F2 
1308c     E6 DE DD E4 
13090     F1 FF 09 0C 
13094     07 FA EB E0 | 	byte	$0c, $08, $ff, $f2, $e6, $de, $dd, $e4, $f1, $ff, $09, $0c, $07, $fa, $eb, $e0
13098     DD E6 F7 05 
1309c     0C 07 F9 E7 
130a0     DD E0 F2 04 
130a4     0C 05 F3 E1 | 	byte	$dd, $e6, $f7, $05, $0c, $07, $f9, $e7, $dd, $e0, $f2, $04, $0c, $05, $f3, $e1
130a8     DE EE 03 0C 
130ac     02 ED DE E5 
130b0     FC 0C 04 EC 
130b4     DD E8 02 0C | 	byte	$de, $ee, $03, $0c, $02, $ed, $de, $e5, $fc, $0c, $04, $ec, $dd, $e8, $02, $0c
130b8     FA E1 E2 FD 
130bc     0C FB E1 E6 
130c0     02 09 EF DE 
130c4     F6 0C F9 DE | 	byte	$fa, $e1, $e2, $fd, $0c, $fb, $e1, $e6, $02, $09, $ef, $de, $f6, $0c, $f9, $de
130c8     EE 0A FB DF 
130cc     F1 0B F4 DE 
130d0     FC 08 E6 E8 
130d4     09 F6 E0 02 | 	byte	$ee, $0a, $fb, $df, $f1, $0b, $f4, $de, $fc, $08, $e6, $e8, $09, $f6, $e0, $02
130d8     00 DF FC 05 
130dc     E1 F9 05 E1 
130e0     FC 02 E0 03 
130e4     F7 E3 09 E8 | 	byte	$00, $df, $fc, $05, $e1, $f9, $05, $e1, $fc, $02, $e0, $03, $f7, $e3, $09, $e8
130e8     F4 04 E0 07 
130ec     EB F3 01 E0 
130f0     09 E3 01 EF 
130f4     F3 FE E7 06 | 	byte	$f4, $04, $e0, $07, $eb, $f3, $01, $e0, $09, $e3, $01, $ef, $f3, $fe, $e7, $06
130f8     E1 09 E0 08 
130fc     E2 07 E4 03 
13100     EA FB F5 EE 
13104     02 E2 08 E2 | 	byte	$e1, $09, $e0, $08, $e2, $07, $e4, $03, $ea, $fb, $f5, $ee, $02, $e2, $08, $e2
13108     01 F4 EB 07 
1310c     E0 02 F4 E8 
13110     0A E4 F8 04 
13114     DF 01 FD E0 | 	byte	$01, $f4, $eb, $07, $e0, $02, $f4, $e8, $0a, $e4, $f8, $04, $df, $01, $fd, $e0
13118     05 FA E0 04 
1311c     FC DF FF 04 
13120     E2 F2 0C EE 
13124     E2 05 02 E0 | 	byte	$05, $fa, $e0, $04, $fc, $df, $ff, $04, $e2, $f2, $0c, $ee, $e2, $05, $02, $e0
13128     EE 0A FA DF 
1312c     F1 0B FB DF 
13130     EC 08 03 E6 
13134     E1 FC 0C F9 | 	byte	$ee, $0a, $fa, $df, $f1, $0b, $fb, $df, $ec, $08, $03, $e6, $e1, $fc, $0c, $f9
13138     E0 E5 00 0C 
1313c     FA E2 E0 F9 
13140     0B 05 EE DE 
13144     E5 FD 0B 06 | 	byte	$e0, $e5, $00, $0c, $fa, $e2, $e0, $f9, $0b, $05, $ee, $de, $e5, $fd, $0b, $06
13148     F2 E0 E0 F1 
1314c     05 0C 02 F1 
13150     E1 DE EB FE 
13154     0A 0B FF EE | 	byte	$f2, $e0, $e0, $f1, $05, $0c, $02, $f1, $e1, $de, $eb, $fe, $0a, $0b, $ff, $ee
13158     E1 DE E5 F5 
1315c     03 0C 0A 00 
13160     F2 E5 DE DF 
13164     E7 F5 00 08 | 	byte	$e1, $de, $e5, $f5, $03, $0c, $0a, $00, $f2, $e5, $de, $df, $e7, $f5, $00, $08
13168     0C 08 FF F3 
1316c     E9 E1 DE E0 
13170     E7 F1 FC 04 
13174     0A 0C 09 03 | 	byte	$0c, $08, $ff, $f3, $e9, $e1, $de, $e0, $e7, $f1, $fc, $04, $0a, $0c, $09, $03
13178     FC F2 E9 E3 
1317c     E0 DF E0 E6 
13180     ED F5 FD 03 
13184     07 0A 0A 08 | 	byte	$fc, $f2, $e9, $e3, $e0, $df, $e0, $e6, $ed, $f5, $fd, $03, $07, $0a, $0a, $08
13188     04 00 FA F4 
1318c     ED E8 E3 E0 
13190     E0 E0 E1 E5 
13194     E9 EF F4 FA | 	byte	$04, $00, $fa, $f4, $ed, $e8, $e3, $e0, $e0, $e0, $e1, $e5, $e9, $ef, $f4, $fa
13198     FF 02 06 07 
1319c     09 09 08 06 
131a0     03 00 FD F9 
131a4     F5 F0 ED E9 | 	byte	$ff, $02, $06, $07, $09, $09, $08, $06, $03, $00, $fd, $f9, $f5, $f0, $ed, $e9
131a8     E7 E4 E3 E2 
131ac     E2 E2 E3 E6 
131b0     E7 EA ED F0 
131b4     F3 F7 FA FD | 	byte	$e7, $e4, $e3, $e2, $e2, $e2, $e3, $e6, $e7, $ea, $ed, $f0, $f3, $f7, $fa, $fd
131b8     00 01 03 04 
131bc     05 06 06 06 
131c0     06 04 03 02 
131c4     00 FF FC F8 | 	byte	$00, $01, $03, $04, $05, $06, $06, $06, $06, $04, $03, $02, $00, $ff, $fc, $f8
131c8     F6 F2 EF EC 
131cc     E9 E6 E4 E2 
131d0     E1 E0 E0 E1 
131d4     E3 E5 E7 EB | 	byte	$f6, $f2, $ef, $ec, $e9, $e6, $e4, $e2, $e1, $e0, $e0, $e1, $e3, $e5, $e7, $eb
131d8     F0 F3 F8 FD 
131dc     00 04 07 09 
131e0     0A 0A 09 07 
131e4     04 00 FC F6 | 	byte	$f0, $f3, $f8, $fd, $00, $04, $07, $09, $0a, $0a, $09, $07, $04, $00, $fc, $f6
131e8     F0 EA E6 E2 
131ec     E0 DF DF E1 
131f0     E6 EB F2 F9 
131f4     00 05 09 0C | 	byte	$f0, $ea, $e6, $e2, $e0, $df, $df, $e1, $e6, $eb, $f2, $f9, $00, $05, $09, $0c
131f8     0B 08 03 FC 
131fc     F4 ED E5 E0 
13200     DE DF E3 EB 
13204     F4 FE 06 0A | 	byte	$0b, $08, $03, $fc, $f4, $ed, $e5, $e0, $de, $df, $e3, $eb, $f4, $fe, $06, $0a
13208     0C 08 01 F8 
1320c     EC E3 DE DF 
13210     E3 EE FB 05 
13214     0B 0B 04 F9 | 	byte	$0c, $08, $01, $f8, $ec, $e3, $de, $df, $e3, $ee, $fb, $05, $0b, $0b, $04, $f9
13218     EB E1 DE E2 
1321c     EF FE 08 0C 
13220     05 F8 E7 DE 
13224     DF ED FE 09 | 	byte	$eb, $e1, $de, $e2, $ef, $fe, $08, $0c, $05, $f8, $e7, $de, $df, $ed, $fe, $09
13228     0B FF ED E0 
1322c     E0 EF 02 0C 
13230     04 F2 E0 E0 
13234     F1 05 0B FD | 	byte	$0b, $ff, $ed, $e0, $e0, $ef, $02, $0c, $04, $f2, $e0, $e0, $f1, $05, $0b, $fd
13238     E7 DE ED 04 
1323c     0B FA E2 E1 
13240     F9 0A 02 E7 
13244     DF F6 0B 00 | 	byte	$e7, $de, $ed, $04, $0b, $fa, $e2, $e1, $f9, $0a, $02, $e7, $df, $f6, $0b, $00
13248     E4 E3 FE 0B 
1324c     F2 DF F3 0A 
13250     FB E0 F0 0A 
13254     F9 E0 F5 0B | 	byte	$e4, $e3, $fe, $0b, $f2, $df, $f3, $0a, $fb, $e0, $f0, $0a, $f9, $e0, $f5, $0b
13258     F0 E0 01 04 
1325c     E1 F0 0A ED 
13260     E5 08 F6 E1 
13264     04 FB E0 04 | 	byte	$f0, $e0, $01, $04, $e1, $f0, $0a, $ed, $e5, $08, $f6, $e1, $04, $fb, $e0, $04
13268     F8 E1 07 F2 
1326c     E7 0A E7 F3 
13270     04 E1 05 F2 
13274     ED 06 E1 04 | 	byte	$f8, $e1, $07, $f2, $e7, $0a, $e7, $f3, $04, $e1, $05, $f2, $ed, $06, $e1, $04
13278     EC F4 00 E3 
1327c     08 E2 05 E9 
13280     FD F2 F4 FC 
13284     EA 04 E2 08 | 	byte	$ec, $f4, $00, $e3, $08, $e2, $05, $e9, $fd, $f2, $f4, $fc, $ea, $04, $e2, $08
13288     E2 04 ED F3 
1328c     00 E2 07 E6 
13290     F8 FF E1 07 
13294     EB EE 08 E1 | 	byte	$e2, $04, $ed, $f3, $00, $e2, $07, $e6, $f8, $ff, $e1, $07, $eb, $ee, $08, $e1
13298     FA 02 E1 FF 
1329c     FF E0 00 00 
132a0     E0 FB 05 E2 
132a4     F1 0B ED E3 | 	byte	$fa, $02, $e1, $ff, $ff, $e0, $00, $00, $e0, $fb, $05, $e2, $f1, $0b, $ed, $e3
132a8     06 00 E0 F0 
132ac     0A F5 E0 F8 
132b0     0B F3 DF F6 
132b4     0B F9 E0 EB | 	byte	$06, $00, $e0, $f0, $0a, $f5, $e0, $f8, $0b, $f3, $df, $f6, $0b, $f9, $e0, $eb
132b8     06 06 EB DF 
132bc     F4 0A 02 E8 
132c0     DE F2 08 07 
132c4     F2 DF E5 FD | 	byte	$06, $06, $eb, $df, $f4, $0a, $02, $e8, $de, $f2, $08, $07, $f2, $df, $e5, $fd
132c8     0B 03 EF E0 
132cc     E4 F8 08 09 
132d0     FA E6 DE E6 
132d4     F8 07 0B 01 | 	byte	$0b, $03, $ef, $e0, $e4, $f8, $08, $09, $fa, $e6, $de, $e6, $f8, $07, $0b, $01
132d8     F0 E1 DE E7 
132dc     F8 05 0C 07 
132e0     FA EA E0 DF 
132e4     E6 F2 00 08 | 	byte	$f0, $e1, $de, $e7, $f8, $05, $0c, $07, $fa, $ea, $e0, $df, $e6, $f2, $00, $08
132e8     0B 06 FC EF 
132ec     E4 DF DF E6 
132f0     F0 FC 04 0A 
132f4     0B 07 FF F5 | 	byte	$0b, $06, $fc, $ef, $e4, $df, $df, $e6, $f0, $fc, $04, $0a, $0b, $07, $ff, $f5
132f8     ED E4 E0 DF 
132fc     E1 E8 F0 FA 
13300     00 06 09 0A 
13304     08 03 FE F6 | 	byte	$ed, $e4, $e0, $df, $e1, $e8, $f0, $fa, $00, $06, $09, $0a, $08, $03, $fe, $f6
13308     EF E8 E3 E0 
1330c     E0 E0 E3 E8 
13310     EE F4 FB 00 
13314     03 07 08 09 | 	byte	$ef, $e8, $e3, $e0, $e0, $e0, $e3, $e8, $ee, $f4, $fb, $00, $03, $07, $08, $09
13318     08 06 02 FF 
1331c     FA F5 F0 EC 
13320     E8 E5 E3 E1 
13324     E1 E2 E3 E6 | 	byte	$08, $06, $02, $ff, $fa, $f5, $f0, $ec, $e8, $e5, $e3, $e1, $e1, $e2, $e3, $e6
13328     E8 EC F0 F4 
1332c     F8 FC FF 01 
13330     03 05 06 07 
13334     07 06 05 03 | 	byte	$e8, $ec, $f0, $f4, $f8, $fc, $ff, $01, $03, $05, $06, $07, $07, $06, $05, $03
13338     01 FF FE FB 
1333c     F8 F5 F2 F0 
13340     ED EB E8 E7 
13344     E6 E5 E4 E4 | 	byte	$01, $ff, $fe, $fb, $f8, $f5, $f2, $f0, $ed, $eb, $e8, $e7, $e6, $e5, $e4, $e4
13348     E4 E4 E5 E6 
1334c     E8 EA EC F0 
13350     F2 F6 F8 FC 
13354     FF 01 03 05 | 	byte	$e4, $e4, $e5, $e6, $e8, $ea, $ec, $f0, $f2, $f6, $f8, $fc, $ff, $01, $03, $05
13358     07 08 08 08 
1335c     07 06 04 01 
13360     FF FB F7 F2 
13364     EE E9 E6 E3 | 	byte	$07, $08, $08, $08, $07, $06, $04, $01, $ff, $fb, $f7, $f2, $ee, $e9, $e6, $e3
13368     E1 E0 E0 E0 
1336c     E2 E5 E9 EF 
13370     F4 FA FF 03 
13374     07 09 0A 09 | 	byte	$e1, $e0, $e0, $e0, $e2, $e5, $e9, $ef, $f4, $fa, $ff, $03, $07, $09, $0a, $09
13378     07 03 FE F8 
1337c     F0 EA E4 E1 
13380     DF DF E1 E7 
13384     EE F7 FF 05 | 	byte	$07, $03, $fe, $f8, $f0, $ea, $e4, $e1, $df, $df, $e1, $e7, $ee, $f7, $ff, $05
13388     09 0B 09 05 
1338c     FE F5 EC E3 
13390     DF DF E2 EA 
13394     F4 FF 06 0B | 	byte	$09, $0b, $09, $05, $fe, $f5, $ec, $e3, $df, $df, $e2, $ea, $f4, $ff, $06, $0b
13398     0A 03 FA ED 
1339c     E4 DE E0 E8 
133a0     F4 01 09 0B 
133a4     03 F8 E9 E0 | 	byte	$0a, $03, $fa, $ed, $e4, $de, $e0, $e8, $f4, $01, $09, $0b, $03, $f8, $e9, $e0
133a8     DF E8 F8 05 
133ac     0B 06 F9 E8 
133b0     DF E1 F1 02 
133b4     0B 06 F5 E3 | 	byte	$df, $e8, $f8, $05, $0b, $06, $f9, $e8, $df, $e1, $f1, $02, $0b, $06, $f5, $e3
133b8     DF EA FE 0A 
133bc     05 F1 E1 E2 
133c0     F6 08 07 F4 
133c4     E1 E3 FA 0A | 	byte	$df, $ea, $fe, $0a, $05, $f1, $e1, $e2, $f6, $08, $07, $f4, $e1, $e3, $fa, $0a
133c8     01 E9 DF F3 
133cc     08 04 EA DF 
133d0     F5 09 FE E3 
133d4     E5 02 07 EB | 	byte	$01, $e9, $df, $f3, $08, $04, $ea, $df, $f5, $09, $fe, $e3, $e5, $02, $07, $eb
133d8     E1 FC 09 EF 
133dc     E0 FE 08 E8 
133e0     E4 05 01 E1 
133e4     F3 0A EC E5 | 	byte	$e1, $fc, $09, $ef, $e0, $fe, $08, $e8, $e4, $05, $01, $e1, $f3, $0a, $ec, $e5
133e8     07 F8 E0 01 
133ec     FF E0 FD 01 
133f0     E0 FF 00 E0 
133f4     04 F8 E4 08 | 	byte	$07, $f8, $e0, $01, $ff, $e0, $fd, $01, $e0, $ff, $00, $e0, $04, $f8, $e4, $08
133f8     EB F1 05 E1 
133fc     03 F3 EB 06 
13400     E1 04 EE F4 
13404     FF E4 08 E1 | 	byte	$eb, $f1, $05, $e1, $03, $f3, $eb, $06, $e1, $04, $ee, $f4, $ff, $e4, $08, $e1
13408     06 E6 FD F4 
1340c     EF 03 E2 07 
13410     E5 FC F9 E6 
13414     09 E4 FB FF | 	byte	$06, $e6, $fd, $f4, $ef, $03, $e2, $07, $e5, $fc, $f9, $e6, $09, $e4, $fb, $ff
13418     E1 07 F1 EA 
1341c     08 E7 F1 07 
13420     E5 F3 08 E4 
13424     F1 09 EA E9 | 	byte	$e1, $07, $f1, $ea, $08, $e7, $f1, $07, $e5, $f3, $08, $e4, $f1, $09, $ea, $e9
13428     08 F5 E0 FF 
1342c     04 E3 EC 08 
13430     FA E0 F5 0A 
13434     F4 E0 F6 0A | 	byte	$08, $f5, $e0, $ff, $04, $e3, $ec, $08, $fa, $e0, $f5, $0a, $f4, $e0, $f6, $0a
13438     F7 E0 EE 07 
1343c     02 E7 E1 FB 
13440     0B FD E3 E2 
13444     FB 0A FF E7 | 	byte	$f7, $e0, $ee, $07, $02, $e7, $e1, $fb, $0b, $fd, $e3, $e2, $fb, $0a, $ff, $e7
13448     DF F1 05 09 
1344c     F7 E3 E0 F2 
13450     05 0A FC E8 
13454     DF E6 F9 07 | 	byte	$df, $f1, $05, $09, $f7, $e3, $e0, $f2, $05, $0a, $fc, $e8, $df, $e6, $f9, $07
13458     0A FE EC E0 
1345c     E1 EE FF 09 
13460     09 FF F0 E2 
13464     DF E5 F3 FF | 	byte	$0a, $fe, $ec, $e0, $e1, $ee, $ff, $09, $09, $ff, $f0, $e2, $df, $e5, $f3, $ff
13468     08 0A 03 F8 
1346c     EA E1 DF E2 
13470     ED F9 03 09 
13474     0A 06 FE F3 | 	byte	$08, $0a, $03, $f8, $ea, $e1, $df, $e2, $ed, $f9, $03, $09, $0a, $06, $fe, $f3
13478     E8 E1 DF E0 
1347c     E6 EF F8 00 
13480     06 09 09 06 
13484     00 F9 F1 E9 | 	byte	$e8, $e1, $df, $e0, $e6, $ef, $f8, $00, $06, $09, $09, $06, $00, $f9, $f1, $e9
13488     E3 E0 E0 E1 
1348c     E6 EC F2 F8 
13490     FF 03 07 09 
13494     09 07 04 00 | 	byte	$e3, $e0, $e0, $e1, $e6, $ec, $f2, $f8, $ff, $03, $07, $09, $09, $07, $04, $00
13498     FB F5 F0 EA 
1349c     E6 E3 E1 E1 
134a0     E1 E3 E6 E9 
134a4     EE F2 F7 FC | 	byte	$fb, $f5, $f0, $ea, $e6, $e3, $e1, $e1, $e1, $e3, $e6, $e9, $ee, $f2, $f7, $fc
134a8     FF 01 04 06 
134ac     07 07 06 05 
134b0     03 00 FF FC 
134b4     F8 F5 F2 EF | 	byte	$ff, $01, $04, $06, $07, $07, $06, $05, $03, $00, $ff, $fc, $f8, $f5, $f2, $ef
134b8     EC E9 E7 E6 
134bc     E4 E4 E3 E4 
134c0     E5 E6 E7 E9 
134c4     EC EE F0 F3 | 	byte	$ec, $e9, $e7, $e6, $e4, $e4, $e3, $e4, $e5, $e6, $e7, $e9, $ec, $ee, $f0, $f3
134c8     F5 F8 FA FD 
134cc     FF 00 01 03 
134d0     04 05 06 06 
134d4     05 04 03 02 | 	byte	$f5, $f8, $fa, $fd, $ff, $00, $01, $03, $04, $05, $06, $06, $05, $04, $03, $02
134d8     00 FF FC FA 
134dc     F7 F4 F0 EE 
134e0     EA E7 E5 E3 
134e4     E2 E1 E1 E1 | 	byte	$00, $ff, $fc, $fa, $f7, $f4, $f0, $ee, $ea, $e7, $e5, $e3, $e2, $e1, $e1, $e1
134e8     E3 E5 E7 EC 
134ec     F0 F4 F8 FC 
134f0     00 03 06 08 
134f4     09 09 08 06 | 	byte	$e3, $e5, $e7, $ec, $f0, $f4, $f8, $fc, $00, $03, $06, $08, $09, $09, $08, $06
134f8     02 FF F9 F4 
134fc     EE E8 E4 E1 
13500     E0 E0 E1 E4 
13504     E9 F0 F7 FE | 	byte	$02, $ff, $f9, $f4, $ee, $e8, $e4, $e1, $e0, $e0, $e1, $e4, $e9, $f0, $f7, $fe
13508     03 07 09 09 
1350c     07 02 FC F4 
13510     EC E5 E0 DF 
13514     E0 E5 ED F7 | 	byte	$03, $07, $09, $09, $07, $02, $fc, $f4, $ec, $e5, $e0, $df, $e0, $e5, $ed, $f7
13518     FF 06 0A 0A 
1351c     05 FD F2 E8 
13520     E1 DF E1 EA 
13524     F7 01 09 0A | 	byte	$ff, $06, $0a, $0a, $05, $fd, $f2, $e8, $e1, $df, $e1, $ea, $f7, $01, $09, $0a
13528     06 FB EE E3 
1352c     DF E2 EE FC 
13530     06 0B 05 F7 
13534     E8 E0 E1 EE | 	byte	$06, $fb, $ee, $e3, $df, $e2, $ee, $fc, $06, $0b, $05, $f7, $e8, $e0, $e1, $ee
13538     FF 09 08 FC 
1353c     EB E0 E2 F3 
13540     04 0A 01 EE 
13544     E0 E4 F8 07 | 	byte	$ff, $09, $08, $fc, $eb, $e0, $e2, $f3, $04, $0a, $01, $ee, $e0, $e4, $f8, $07
13548     07 F5 E2 E1 
1354c     F6 08 05 F1 
13550     E0 E9 02 09 
13554     F6 E1 E7 01 | 	byte	$07, $f5, $e2, $e1, $f6, $08, $05, $f1, $e0, $e9, $02, $09, $f6, $e1, $e7, $01
13558     08 F3 E0 EF 
1355c     07 00 E6 E4 
13560     01 06 EA E2 
13564     00 06 E9 E4 | 	byte	$08, $f3, $e0, $ef, $07, $00, $e6, $e4, $01, $06, $ea, $e2, $00, $06, $e9, $e4
13568     04 02 E2 EF 
1356c     08 F3 E1 01 
13570     00 E1 F7 07 
13574     E4 EF 09 E8 | 	byte	$04, $02, $e2, $ef, $08, $f3, $e1, $01, $00, $e1, $f7, $07, $e4, $ef, $09, $e8
13578     ED 09 E7 F0 
1357c     07 E4 F8 03 
13580     E0 02 F6 E7 
13584     08 E5 FB FC | 	byte	$ed, $09, $e7, $f0, $07, $e4, $f8, $03, $e0, $02, $f6, $e7, $08, $e5, $fb, $fc
13588     E5 07 E4 FD 
1358c     F4 ED 03 E2 
13590     07 E5 FF F5 
13594     EA 05 E1 03 | 	byte	$e5, $07, $e4, $fd, $f4, $ed, $03, $e2, $07, $e5, $ff, $f5, $ea, $05, $e1, $03
13598     F1 EC 07 E2 
1359c     FE FD E1 06 
135a0     F2 E7 08 EC 
135a4     EA 08 EC E9 | 	byte	$f1, $ec, $07, $e2, $fe, $fd, $e1, $06, $f2, $e7, $08, $ec, $ea, $08, $ec, $e9
135a8     08 F0 E4 06 
135ac     F9 E0 FD 06 
135b0     E5 EB 08 FA 
135b4     E0 F6 09 F1 | 	byte	$08, $f0, $e4, $06, $f9, $e0, $fd, $06, $e5, $eb, $08, $fa, $e0, $f6, $09, $f1
135b8     E0 FA 09 F2 
135bc     E0 F4 09 FB 
135c0     E1 E7 03 08 
135c4     F1 E0 EE 06 | 	byte	$e0, $fa, $09, $f2, $e0, $f4, $09, $fb, $e1, $e7, $03, $08, $f1, $e0, $ee, $06
135c8     06 F0 E0 E9 
135cc     00 0A FC E5 
135d0     E0 F0 04 09 
135d4     FC E7 DF E9 | 	byte	$06, $f0, $e0, $e9, $00, $0a, $fc, $e5, $e0, $f0, $04, $09, $fc, $e7, $df, $e9
135d8     FE 08 06 F6 
135dc     E5 DF E8 F9 
135e0     06 0A 01 F1 
135e4     E3 E0 E6 F5 | 	byte	$fe, $08, $06, $f6, $e5, $df, $e8, $f9, $06, $0a, $01, $f1, $e3, $e0, $e6, $f5
135e8     02 09 08 FF 
135ec     F1 E5 E0 E1 
135f0     EB F8 02 09 
135f4     09 03 FA EE | 	byte	$02, $09, $08, $ff, $f1, $e5, $e0, $e1, $eb, $f8, $02, $09, $09, $03, $fa, $ee
135f8     E4 E0 E0 E6 
135fc     EF F8 01 07 
13600     09 08 02 FB 
13604     F2 E9 E4 E0 | 	byte	$e4, $e0, $e0, $e6, $ef, $f8, $01, $07, $09, $08, $02, $fb, $f2, $e9, $e4, $e0
13608     E0 E3 E8 F0 
1360c     F8 FF 04 07 
13610     09 08 05 00 
13614     FC F5 EF E9 | 	byte	$e0, $e3, $e8, $f0, $f8, $ff, $04, $07, $09, $08, $05, $00, $fc, $f5, $ef, $e9
13618     E5 E2 E1 E1 
1361c     E3 E7 EB F0 
13620     F6 FC 00 02 
13624     05 07 07 07 | 	byte	$e5, $e2, $e1, $e1, $e3, $e7, $eb, $f0, $f6, $fc, $00, $02, $05, $07, $07, $07
13628     06 03 00 FE 
1362c     F9 F6 F1 EE 
13630     EA E7 E5 E4 
13634     E3 E3 E3 E4 | 	byte	$06, $03, $00, $fe, $f9, $f6, $f1, $ee, $ea, $e7, $e5, $e4, $e3, $e3, $e3, $e4
13638     E6 E8 EB EE 
1363c     F1 F4 F8 FB 
13640     FE 00 01 02 
13644     03 04 04 04 | 	byte	$e6, $e8, $eb, $ee, $f1, $f4, $f8, $fb, $fe, $00, $01, $02, $03, $04, $04, $04
13648     04 03 02 01 
1364c     FF FF FC FA 
13650     F8 F6 F3 F1 
13654     F0 ED EB E9 | 	byte	$04, $03, $02, $01, $ff, $ff, $fc, $fa, $f8, $f6, $f3, $f1, $f0, $ed, $eb, $e9
13658     E7 E6 E5 E4 
1365c     E4 E4 E4 E5 
13660     E6 E7 E9 EC 
13664     EF F1 F4 F8 | 	byte	$e7, $e6, $e5, $e4, $e4, $e4, $e4, $e5, $e6, $e7, $e9, $ec, $ef, $f1, $f4, $f8
13668     FB FF 00 03 
1366c     05 06 07 07 
13670     07 07 05 03 
13674     00 FE F9 F5 | 	byte	$fb, $ff, $00, $03, $05, $06, $07, $07, $07, $07, $05, $03, $00, $fe, $f9, $f5
13678     F1 EC E8 E5 
1367c     E3 E1 E0 E1 
13680     E3 E6 EA EF 
13684     F3 F9 FF 03 | 	byte	$f1, $ec, $e8, $e5, $e3, $e1, $e0, $e1, $e3, $e6, $ea, $ef, $f3, $f9, $ff, $03
13688     06 08 09 08 
1368c     05 00 FC F5 
13690     EE E8 E3 E0 
13694     E0 E1 E6 EC | 	byte	$06, $08, $09, $08, $05, $00, $fc, $f5, $ee, $e8, $e3, $e0, $e0, $e1, $e6, $ec
13698     F4 FD 02 07 
1369c     09 08 04 FD 
136a0     F4 EB E4 E0 
136a4     E0 E4 ED F8 | 	byte	$f4, $fd, $02, $07, $09, $08, $04, $fd, $f4, $eb, $e4, $e0, $e0, $e4, $ed, $f8
136a8     01 07 09 07 
136ac     FF F3 E8 E1 
136b0     E0 E5 F0 FD 
136b4     06 0A 05 FB | 	byte	$01, $07, $09, $07, $ff, $f3, $e8, $e1, $e0, $e5, $f0, $fd, $06, $0a, $05, $fb
136b8     EC E1 E0 E7 
136bc     F6 03 09 06 
136c0     F9 E8 E0 E3 
136c4     F2 02 09 03 | 	byte	$ec, $e1, $e0, $e7, $f6, $03, $09, $06, $f9, $e8, $e0, $e3, $f2, $02, $09, $03
136c8     F2 E3 E0 EF 
136cc     01 09 00 EC 
136d0     E0 E6 FC 08 
136d4     02 ED E0 EA | 	byte	$f2, $e3, $e0, $ef, $01, $09, $00, $ec, $e0, $e6, $fc, $08, $02, $ed, $e0, $ea
136d8     01 09 F8 E3 
136dc     E4 FC 09 FA 
136e0     E3 E6 FF 08 
136e4     F0 E0 F2 08 | 	byte	$01, $09, $f8, $e3, $e4, $fc, $09, $fa, $e3, $e6, $ff, $08, $f0, $e0, $f2, $08
136e8     FC E2 EB 06 
136ec     FF E3 EB 07 
136f0     FC E1 F3 09 
136f4     EF E2 02 00 | 	byte	$fc, $e2, $eb, $06, $ff, $e3, $eb, $07, $fc, $e1, $f3, $09, $ef, $e2, $02, $00
136f8     E2 F5 08 E9 
136fc     EB 07 EF E6 
13700     07 F1 E6 07 
13704     EE E9 08 E8 | 	byte	$e2, $f5, $08, $e9, $eb, $07, $ef, $e6, $07, $f1, $e6, $07, $ee, $e9, $08, $e8
13708     F2 05 E1 FE 
1370c     F9 E5 07 E6 
13710     F9 FC E5 07 
13714     E5 FE F5 EA | 	byte	$f2, $05, $e1, $fe, $f9, $e5, $07, $e6, $f9, $fc, $e5, $07, $e5, $fe, $f5, $ea
13718     05 E1 03 F0 
1371c     EC 06 E2 FE 
13720     F9 E4 06 EF 
13724     EB 08 E8 F0 | 	byte	$05, $e1, $03, $f0, $ec, $06, $e2, $fe, $f9, $e4, $06, $ef, $eb, $08, $e8, $f0
13728     08 E6 F1 08 
1372c     E8 EC 08 F0 
13730     E4 06 FB E1 
13734     F9 07 EA E5 | 	byte	$08, $e6, $f1, $08, $e8, $ec, $08, $f0, $e4, $06, $fb, $e1, $f9, $07, $ea, $e5
13738     04 01 E3 EB 
1373c     06 FE E2 EB 
13740     06 01 E6 E5 
13744     FF 08 F1 E0 | 	byte	$04, $01, $e3, $eb, $06, $fe, $e2, $eb, $06, $01, $e6, $e5, $ff, $08, $f1, $e0
13748     EF 06 04 EC 
1374c     E0 EF 05 06 
13750     F3 E1 E6 FC 
13754     09 01 EC E0 | 	byte	$ef, $06, $04, $ec, $e0, $ef, $05, $06, $f3, $e1, $e6, $fc, $09, $01, $ec, $e0
13758     E6 FB 08 05 
1375c     F4 E3 E0 ED 
13760     00 09 06 F7 
13764     E7 E0 E5 F3 | 	byte	$e6, $fb, $08, $05, $f4, $e3, $e0, $ed, $00, $09, $06, $f7, $e7, $e0, $e5, $f3
13768     02 09 06 F9 
1376c     EC E2 E0 E8 
13770     F6 02 08 08 
13774     01 F5 E9 E1 | 	byte	$02, $09, $06, $f9, $ec, $e2, $e0, $e8, $f6, $02, $08, $08, $01, $f5, $e9, $e1
13778     E0 E4 EF FA 
1377c     03 08 08 04 
13780     FD F2 E9 E3 
13784     E0 E1 E6 EF | 	byte	$e0, $e4, $ef, $fa, $03, $08, $08, $04, $fd, $f2, $e9, $e3, $e0, $e1, $e6, $ef
13788     F8 FF 05 08 
1378c     08 06 00 FA 
13790     F2 EB E7 E2 
13794     E0 E1 E4 E9 | 	byte	$f8, $ff, $05, $08, $08, $06, $00, $fa, $f2, $eb, $e7, $e2, $e0, $e1, $e4, $e9
13798     EF F6 FC 00 
1379c     04 07 07 07 
137a0     04 01 FE F8 
137a4     F3 EE EB E7 | 	byte	$ef, $f6, $fc, $00, $04, $07, $07, $07, $04, $01, $fe, $f8, $f3, $ee, $eb, $e7
137a8     E4 E3 E2 E3 
137ac     E4 E7 EA EE 
137b0     F2 F6 FA FE 
137b4     00 02 04 05 | 	byte	$e4, $e3, $e2, $e3, $e4, $e7, $ea, $ee, $f2, $f6, $fa, $fe, $00, $02, $04, $05
137b8     06 06 04 03 
137bc     01 00 FE FB 
137c0     F8 F4 F1 F0 
137c4     EC EA E8 E7 | 	byte	$06, $06, $04, $03, $01, $00, $fe, $fb, $f8, $f4, $f1, $f0, $ec, $ea, $e8, $e7
137c8     E6 E5 E5 E5 
137cc     E6 E6 E7 E9 
137d0     EB EC EF F1 
137d4     F3 F5 F8 F9 | 	byte	$e6, $e5, $e5, $e5, $e6, $e6, $e7, $e9, $eb, $ec, $ef, $f1, $f3, $f5, $f8, $f9
137d8     FC FE FF 00 
137dc     01 02 03 03 
137e0     04 04 03 03 
137e4     02 01 00 FF | 	byte	$fc, $fe, $ff, $00, $01, $02, $03, $03, $04, $04, $03, $03, $02, $01, $00, $ff
137e8     FC FA F8 F4 
137ec     F2 F0 EC E9 
137f0     E7 E6 E4 E3 
137f4     E2 E2 E3 E4 | 	byte	$fc, $fa, $f8, $f4, $f2, $f0, $ec, $e9, $e7, $e6, $e4, $e3, $e2, $e2, $e3, $e4
137f8     E6 E8 EB EF 
137fc     F3 F7 FB FF 
13800     01 04 06 07 
13804     07 07 06 03 | 	byte	$e6, $e8, $eb, $ef, $f3, $f7, $fb, $ff, $01, $04, $06, $07, $07, $07, $06, $03
13808     00 FC F8 F2 
1380c     ED E8 E4 E2 
13810     E0 E0 E3 E6 
13814     EB F1 F8 FE | 	byte	$00, $fc, $f8, $f2, $ed, $e8, $e4, $e2, $e0, $e0, $e3, $e6, $eb, $f1, $f8, $fe
13818     03 07 08 08 
1381c     07 02 FD F5 
13820     ED E7 E2 E0 
13824     E0 E5 EC F5 | 	byte	$03, $07, $08, $08, $07, $02, $fd, $f5, $ed, $e7, $e2, $e0, $e0, $e5, $ec, $f5
13828     FE 04 08 08 
1382c     05 FF F5 EC 
13830     E4 E0 E0 E7 
13834     F2 FE 05 09 | 	byte	$fe, $04, $08, $08, $05, $ff, $f5, $ec, $e4, $e0, $e0, $e7, $f2, $fe, $05, $09
13838     07 FF F3 E7 
1383c     E0 E0 E9 F7 
13840     01 08 07 FD 
13844     EF E3 E0 E8 | 	byte	$07, $ff, $f3, $e7, $e0, $e0, $e9, $f7, $01, $08, $07, $fd, $ef, $e3, $e0, $e8
13848     F7 04 09 02 
1384c     F3 E4 E0 E9 
13850     FC 07 06 F9 
13854     E6 E0 EC 00 | 	byte	$f7, $04, $09, $02, $f3, $e4, $e0, $e9, $fc, $07, $06, $f9, $e6, $e0, $ec, $00
13858     09 00 EC E0 
1385c     E9 FF 09 FE 
13860     E8 E0 F2 06 
13864     04 ED E0 EF | 	byte	$09, $00, $ec, $e0, $e9, $ff, $09, $fe, $e8, $e0, $f2, $06, $04, $ed, $e0, $ef
13868     06 03 EA E1 
1386c     F7 08 FA E2 
13870     EB 05 00 E5 
13874     E8 03 01 E4 | 	byte	$06, $03, $ea, $e1, $f7, $08, $fa, $e2, $eb, $05, $00, $e5, $e8, $03, $01, $e4
13878     E9 06 FD E2 
1387c     F4 07 EE E3 
13880     03 FD E2 F9 
13884     05 E5 F0 07 | 	byte	$e9, $06, $fd, $e2, $f4, $07, $ee, $e3, $03, $fd, $e2, $f9, $05, $e5, $f0, $07
13888     E9 EC 07 EA 
1388c     ED 07 E7 F3 
13890     05 E3 FC FC 
13894     E3 05 ED EF | 	byte	$e9, $ec, $07, $ea, $ed, $07, $e7, $f3, $05, $e3, $fc, $fc, $e3, $05, $ed, $ef
13898     04 E2 02 F0 
1389c     EF 03 E1 04 
138a0     F0 EE 05 E3 
138a4     FD FA E3 05 | 	byte	$04, $e2, $02, $f0, $ef, $03, $e1, $04, $f0, $ee, $05, $e3, $fd, $fa, $e3, $05
138a8     F1 E8 07 ED 
138ac     EA 07 EC EA 
138b0     07 F0 E5 06 
138b4     F9 E1 FE 03 | 	byte	$f1, $e8, $07, $ed, $ea, $07, $ec, $ea, $07, $f0, $e5, $06, $f9, $e1, $fe, $03
138b8     E5 ED 07 F6 
138bc     E0 F9 08 EE 
138c0     E2 FD 07 EF 
138c4     E1 F9 08 F5 | 	byte	$e5, $ed, $07, $f6, $e0, $f9, $08, $ee, $e2, $fd, $07, $ef, $e1, $f9, $08, $f5
138c8     E1 EE 06 01 
138cc     EA E1 F6 07 
138d0     FE E8 E1 F4 
138d4     06 04 F0 E0 | 	byte	$e1, $ee, $06, $01, $ea, $e1, $f6, $07, $fe, $e8, $e1, $f4, $06, $04, $f0, $e0
138d8     E7 FE 08 01 
138dc     ED E1 E6 FA 
138e0     06 06 F8 E7 
138e4     E0 E8 FA 06 | 	byte	$e7, $fe, $08, $01, $ed, $e1, $e6, $fa, $06, $06, $f8, $e7, $e0, $e8, $fa, $06
138e8     08 FE EE E1 
138ec     E1 EC FA 05 
138f0     08 02 F5 E8 
138f4     E1 E1 EA F7 | 	byte	$08, $fe, $ee, $e1, $e1, $ec, $fa, $05, $08, $02, $f5, $e8, $e1, $e1, $ea, $f7
138f8     01 08 07 00 
138fc     F7 EB E3 E0 
13900     E3 EB F5 FF 
13904     05 08 07 01 | 	byte	$01, $08, $07, $00, $f7, $eb, $e3, $e0, $e3, $eb, $f5, $ff, $05, $08, $07, $01
13908     F9 F1 E8 E3 
1390c     E0 E2 E7 EE 
13910     F6 FE 03 07 
13914     07 07 03 FE | 	byte	$f9, $f1, $e8, $e3, $e0, $e2, $e7, $ee, $f6, $fe, $03, $07, $07, $07, $03, $fe
13918     F8 F1 EB E6 
1391c     E3 E1 E2 E4 
13920     E8 EE F3 F9 
13924     FF 01 04 06 | 	byte	$f8, $f1, $eb, $e6, $e3, $e1, $e2, $e4, $e8, $ee, $f3, $f9, $ff, $01, $04, $06
13928     07 06 04 01 
1392c     FF FA F6 F1 
13930     ED E9 E7 E4 
13934     E3 E3 E3 E5 | 	byte	$07, $06, $04, $01, $ff, $fa, $f6, $f1, $ed, $e9, $e7, $e4, $e3, $e3, $e3, $e5
13938     E7 E9 EC F0 
1393c     F3 F6 F9 FD 
13940     00 01 03 03 
13944     04 04 04 03 | 	byte	$e7, $e9, $ec, $f0, $f3, $f6, $f9, $fd, $00, $01, $03, $03, $04, $04, $04, $03
13948     01 00 FF FD 
1394c     FB F8 F6 F4 
13950     F1 F0 EE EC 
13954     EA E8 E7 E7 | 	byte	$01, $00, $ff, $fd, $fb, $f8, $f6, $f4, $f1, $f0, $ee, $ec, $ea, $e8, $e7, $e7
13958     E7 E7 E7 E7 
1395c     E7          | 	byte	$e7[5]
1395d     E8 E9 EB EC 
13961     EE F0 F1 F3 
13965     F5 F8 F9 FC 
13969     FE 00 00 01 | 	byte	$e8, $e9, $eb, $ec, $ee, $f0, $f1, $f3, $f5, $f8, $f9, $fc, $fe, $00, $00, $01
1396d     03 03 04 04 
13971     04 03 03 01 
13975     00 FF FD FB 
13979     F8 F5 F1 EF | 	byte	$03, $03, $04, $04, $04, $03, $03, $01, $00, $ff, $fd, $fb, $f8, $f5, $f1, $ef
1397d     EC E9 E7 E4 
13981     E3 E2 E2 E3 
13985     E4 E6 E8 EC 
13989     EF F3 F8 FC | 	byte	$ec, $e9, $e7, $e4, $e3, $e2, $e2, $e3, $e4, $e6, $e8, $ec, $ef, $f3, $f8, $fc
1398d     00 03 05 07 
13991     07 07 05 02 
13995     FF FB F5 F0 
13999     EA E6 E3 E1 | 	byte	$00, $03, $05, $07, $07, $07, $05, $02, $ff, $fb, $f5, $f0, $ea, $e6, $e3, $e1
1399d     E0 E2 E5 EB 
139a1     F1 F8 FE 03 
139a5     07 08 07 04 
139a9     FF F8 F0 E9 | 	byte	$e0, $e2, $e5, $eb, $f1, $f8, $fe, $03, $07, $08, $07, $04, $ff, $f8, $f0, $e9
139ad     E3 E0 E0 E4 
139b1     EB F4 FE 03 
139b5     07 08 04 FD 
139b9     F3 E9 E2 E0 | 	byte	$e3, $e0, $e0, $e4, $eb, $f4, $fe, $03, $07, $08, $04, $fd, $f3, $e9, $e2, $e0
139bd     E3 ED F8 02 
139c1     07 08 01 F7 
139c5     EA E2 E0 E7 
139c9     F4 01 07 07 | 	byte	$e3, $ed, $f8, $02, $07, $08, $01, $f7, $ea, $e2, $e0, $e7, $f4, $01, $07, $07
139cd     FD EF E3 E0 
139d1     E9 F9 05 08 
139d5     FF EF E2 E2 
139d9     F0 00 08 01 | 	byte	$fd, $ef, $e3, $e0, $e9, $f9, $05, $08, $ff, $ef, $e2, $e2, $f0, $00, $08, $01
139dd     F0 E2 E4 F5 
139e1     05 06 F6 E4 
139e5     E3 F6 07 03 
139e9     F1 E1 EA 01 | 	byte	$f0, $e2, $e4, $f5, $05, $06, $f6, $e4, $e3, $f6, $07, $03, $f1, $e1, $ea, $01
139ed     08 F5 E2 E9 
139f1     01 06 F1 E1 
139f5     F1 07 FF E5 
139f9     E7 01 03 E9 | 	byte	$08, $f5, $e2, $e9, $01, $06, $f1, $e1, $f1, $07, $ff, $e5, $e7, $01, $03, $e9
139fd     E4 00 04 E9 
13a01     E6 03 FF E4 
13a05     EF 07 F3 E3 
13a09     00 00 E3 F4 | 	byte	$e4, $00, $04, $e9, $e6, $03, $ff, $e4, $ef, $07, $f3, $e3, $00, $00, $e3, $f4
13a0d     06 E8 ED 06 
13a11     ED EA 06 EC 
13a15     EB 07 EA EF 
13a19     06 E5 F9 FF | 	byte	$06, $e8, $ed, $06, $ed, $ea, $06, $ec, $eb, $07, $ea, $ef, $06, $e5, $f9, $ff
13a1d     E2 02 F2 EC 
13a21     06 E3 FE F7 
13a25     E6 06 E8 F5 
13a29     02 E3 FE FB | 	byte	$e2, $02, $f2, $ec, $06, $e3, $fe, $f7, $e6, $06, $e8, $f5, $02, $e3, $fe, $fb
13a2d     E3 03 F6 E4 
13a31     04 F5 E3 03 
13a35     F8 E2 FE 01 
13a39     E3 F4 07 EC | 	byte	$e3, $03, $f6, $e4, $04, $f5, $e3, $03, $f8, $e2, $fe, $01, $e3, $f4, $07, $ec
13a3d     E5 03 FE E3 
13a41     F0 07 F7 E1 
13a45     F4 07 F6 E1 
13a49     F2 06 FD E4 | 	byte	$e5, $03, $fe, $e3, $f0, $07, $f7, $e1, $f4, $07, $f6, $e1, $f2, $06, $fd, $e4
13a4d     E8 02 05 EF 
13a51     E1 F0 05 03 
13a55     ED E0 EF 03 
13a59     06 F4 E2 E6 | 	byte	$e8, $02, $05, $ef, $e1, $f0, $05, $03, $ed, $e0, $ef, $03, $06, $f4, $e2, $e6
13a5d     F8 06 03 F1 
13a61     E2 E5 F6 05 
13a65     07 FA E8 E0 
13a69     E8 F9 05 07 | 	byte	$f8, $06, $03, $f1, $e2, $e5, $f6, $05, $07, $fa, $e8, $e0, $e8, $f9, $05, $07
13a6d     FE EE E2 E1 
13a71     EB FB 05 08 
13a75     01 F4 E8 E1 
13a79     E2 EC F9 02 | 	byte	$fe, $ee, $e2, $e1, $eb, $fb, $05, $08, $01, $f4, $e8, $e1, $e2, $ec, $f9, $02
13a7d     07 06 FF F4 
13a81     E9 E2 E1 E5 
13a85     EE F8 00 06 
13a89     07 05 FF F5 | 	byte	$07, $06, $ff, $f4, $e9, $e2, $e1, $e5, $ee, $f8, $00, $06, $07, $05, $ff, $f5
13a8d     ED E6 E1 E1 
13a91     E4 EB F3 FB 
13a95     01 05 07 07 
13a99     04 00 F9 F2 | 	byte	$ed, $e6, $e1, $e1, $e4, $eb, $f3, $fb, $01, $05, $07, $07, $04, $00, $f9, $f2
13a9d     EC E7 E3 E2 
13aa1     E2 E4 E8 EE 
13aa5     F3 F9 FF 01 
13aa9     04 06 06 06 | 	byte	$ec, $e7, $e3, $e2, $e2, $e4, $e8, $ee, $f3, $f9, $ff, $01, $04, $06, $06, $06
13aad     03 00 FD F9 
13ab1     F4 F0 EC E8 
13ab5     E6 E4 E3 E3 
13ab9     E4 E6 E8 EC | 	byte	$03, $00, $fd, $f9, $f4, $f0, $ec, $e8, $e6, $e4, $e3, $e3, $e4, $e6, $e8, $ec
13abd     EF F1 F5 F8 
13ac1     FC FF 00 02 
13ac5     03 04 04 03 
13ac9     03 01 00 FF | 	byte	$ef, $f1, $f5, $f8, $fc, $ff, $00, $02, $03, $04, $04, $03, $03, $01, $00, $ff
13acd     FD FB F8 F6 
13ad1     F4 F1 F0 ED 
13ad5     EB E9 E8 E7 
13ad9     E7 E7 E7 E7 | 	byte	$fd, $fb, $f8, $f6, $f4, $f1, $f0, $ed, $eb, $e9, $e8, $e7, $e7, $e7, $e7, $e7
13add     E7 E8 E9 EA 
13ae1     EC EE EF F0 
13ae5     F2 F4 F6 F8 
13ae9     F9 FC FD FF | 	byte	$e7, $e8, $e9, $ea, $ec, $ee, $ef, $f0, $f2, $f4, $f6, $f8, $f9, $fc, $fd, $ff
13aed     00 00 01 02 
13af1     03 03 03 03 
13af5     02 01 00 FF 
13af9     FF FC FA F8 | 	byte	$00, $00, $01, $02, $03, $03, $03, $03, $02, $01, $00, $ff, $ff, $fc, $fa, $f8
13afd     F6 F3 F0 EE 
13b01     EB E8 E7 E5 
13b05     E4 E3 E3 E3 
13b09     E4 E6 E8 EB | 	byte	$f6, $f3, $f0, $ee, $eb, $e8, $e7, $e5, $e4, $e3, $e3, $e3, $e4, $e6, $e8, $eb
13b0d     EE F1 F5 F9 
13b11     FD 00 03 05 
13b15     06 07 06 04 
13b19     02 FF FC F7 | 	byte	$ee, $f1, $f5, $f9, $fd, $00, $03, $05, $06, $07, $06, $04, $02, $ff, $fc, $f7
13b1d     F2 EE E9 E6 
13b21     E3 E1 E1 E3 
13b25     E7 EC F2 F8 
13b29     FE 02 06 07 | 	byte	$f2, $ee, $e9, $e6, $e3, $e1, $e1, $e3, $e7, $ec, $f2, $f8, $fe, $02, $06, $07
13b2d     07 04 00 F9 
13b31     F3 EC E6 E2 
13b35     E0 E3 E8 F0 
13b39     F8 00 05 07 | 	byte	$07, $04, $00, $f9, $f3, $ec, $e6, $e2, $e0, $e3, $e8, $f0, $f8, $00, $05, $07
13b3d     07 01 FA F0 
13b41     E7 E1 E1 E6 
13b45     EE F8 01 07 
13b49     07 01 F7 EB | 	byte	$07, $01, $fa, $f0, $e7, $e1, $e1, $e6, $ee, $f8, $01, $07, $07, $01, $f7, $eb
13b4d     E3 E1 E6 F2 
13b51     FF 07 07 00 
13b55     F2 E5 E0 E6 
13b59     F4 01 07 03 | 	byte	$e3, $e1, $e6, $f2, $ff, $07, $07, $00, $f2, $e5, $e0, $e6, $f4, $01, $07, $03
13b5d     F6 E6 E0 E9 
13b61     FA 05 06 F8 
13b65     E8 E1 EB FE 
13b69     07 00 EE E2 | 	byte	$f6, $e6, $e0, $e9, $fa, $05, $06, $f8, $e8, $e1, $eb, $fe, $07, $00, $ee, $e2
13b6d     E8 FE 07 FE 
13b71     E9 E1 F1 04 
13b75     03 EF E1 EF 
13b79     03 03 EC E1 | 	byte	$e8, $fe, $07, $fe, $e9, $e1, $f1, $04, $03, $ef, $e1, $ef, $03, $03, $ec, $e1
13b7d     F6 07 FA E4 
13b81     EB 03 01 E7 
13b85     E7 01 02 E7 
13b89     E8 04 FE E4 | 	byte	$f6, $07, $fa, $e4, $eb, $03, $01, $e7, $e7, $01, $02, $e7, $e8, $04, $fe, $e4
13b8d     F0 07 F3 E3 
13b91     FF 01 E4 F2 
13b95     07 EA EA 06 
13b99     F1 E6 05 F4 | 	byte	$f0, $07, $f3, $e3, $ff, $01, $e4, $f2, $07, $ea, $ea, $06, $f1, $e6, $05, $f4
13b9d     E6 05 F1 E8 
13ba1     06 EC EF 05 
13ba5     E5 FA FD E3 
13ba9     04 ED EF 05 | 	byte	$e6, $05, $f1, $e8, $06, $ec, $ef, $05, $e5, $fa, $fd, $e3, $04, $ed, $ef, $05
13bad     E5 FB FE E2 
13bb1     00 F9 E4 02 
13bb5     F7 E3 03 F9 
13bb9     E2 FE 01 E3 | 	byte	$e5, $fb, $fe, $e2, $00, $f9, $e4, $02, $f7, $e3, $03, $f9, $e2, $fe, $01, $e3
13bbd     F6 05 EB E8 
13bc1     04 FB E2 F5 
13bc5     07 F0 E2 FB 
13bc9     06 ED E3 FB | 	byte	$f6, $05, $eb, $e8, $04, $fb, $e2, $f5, $07, $f0, $e2, $fb, $06, $ed, $e3, $fb
13bcd     07 F1 E1 F5 
13bd1     06 FB E5 E7 
13bd5     FF 07 F4 E2 
13bd9     EA FF 07 F7 | 	byte	$07, $f1, $e1, $f5, $06, $fb, $e5, $e7, $ff, $07, $f4, $e2, $ea, $ff, $07, $f7
13bdd     E3 E6 F9 06 
13be1     01 ED E1 E9 
13be5     FC 07 02 F1 
13be9     E3 E3 F2 02 | 	byte	$e3, $e6, $f9, $06, $01, $ed, $e1, $e9, $fc, $07, $02, $f1, $e3, $e3, $f2, $02
13bed     07 00 F0 E3 
13bf1     E2 EE FD 06 
13bf5     07 FD EE E4 
13bf9     E1 E9 F6 01 | 	byte	$07, $00, $f0, $e3, $e2, $ee, $fd, $06, $07, $fd, $ee, $e4, $e1, $e9, $f6, $01
13bfd     07 06 FD F1 
13c01     E6 E1 E3 EB 
13c05     F7 FF 05 07 
13c09     03 FB F1 E8 | 	byte	$07, $06, $fd, $f1, $e6, $e1, $e3, $eb, $f7, $ff, $05, $07, $03, $fb, $f1, $e8
13c0d     E3 E1 E4 EB 
13c11     F4 FD 03 06 
13c15     07 03 FF F8 
13c19     F1 EA E5 E2 | 	byte	$e3, $e1, $e4, $eb, $f4, $fd, $03, $06, $07, $03, $ff, $f8, $f1, $ea, $e5, $e2
13c1d     E2 E4 E9 F0 
13c21     F7 FD 01 04 
13c25     06 06 04 00 
13c29     FD F8 F2 ED | 	byte	$e2, $e4, $e9, $f0, $f7, $fd, $01, $04, $06, $06, $04, $00, $fd, $f8, $f2, $ed
13c2d     E9 E6 E4 E3 
13c31     E3 E5 E7 EB 
13c35     F0 F3 F8 FC 
13c39     00 01 03 04 | 	byte	$e9, $e6, $e4, $e3, $e3, $e5, $e7, $eb, $f0, $f3, $f8, $fc, $00, $01, $03, $04
13c3d     05 04 03 01 
13c41     FF FD FA F7 
13c45     F3 F0 EE EB 
13c49     E9 E7 E6 E6 | 	byte	$05, $04, $03, $01, $ff, $fd, $fa, $f7, $f3, $f0, $ee, $eb, $e9, $e7, $e6, $e6
13c4d     E5 E6 E7 E7 
13c51     E9 EB ED EF 
13c55     F1 F4 F6 F8 
13c59     FB FD FF FF | 	byte	$e5, $e6, $e7, $e7, $e9, $eb, $ed, $ef, $f1, $f4, $f6, $f8, $fb, $fd, $ff, $ff
13c5d     00 01 01 01 
13c61     01 01 01 00 
13c65     FF FF FF FD 
13c69     FC FA F8 F7 | 	byte	$00, $01, $01, $01, $01, $01, $01, $00, $ff, $ff, $ff, $fd, $fc, $fa, $f8, $f7
13c6d     F6 F4 F2 F0 
13c71     EF ED EC EA 
13c75     E9 E8 E7 E7 
13c79     E7 E7 E7 E7 | 	byte	$f6, $f4, $f2, $f0, $ef, $ed, $ec, $ea, $e9, $e8, $e7, $e7, $e7, $e7, $e7, $e7
13c7d     E7 E8 E9 EB 
13c81     ED F0 F1 F4 
13c85     F7 F9 FC FE 
13c89     00 01 03 04 | 	byte	$e7, $e8, $e9, $eb, $ed, $f0, $f1, $f4, $f7, $f9, $fc, $fe, $00, $01, $03, $04
13c8d     04 05 05 04 
13c91     03 01 FF FE 
13c95     FA F7 F3 F0 
13c99     EC E8 E6 E4 | 	byte	$04, $05, $05, $04, $03, $01, $ff, $fe, $fa, $f7, $f3, $f0, $ec, $e8, $e6, $e4
13c9d     E3 E2 E3 E4 
13ca1     E7 EA EF F3 
13ca5     F8 FD 00 03 
13ca9     06 07 06 04 | 	byte	$e3, $e2, $e3, $e4, $e7, $ea, $ef, $f3, $f8, $fd, $00, $03, $06, $07, $06, $04
13cad     00 FD F8 F1 
13cb1     EC E7 E3 E1 
13cb5     E1 E4 E9 EF 
13cb9     F7 FE 02 06 | 	byte	$00, $fd, $f8, $f1, $ec, $e7, $e3, $e1, $e1, $e4, $e9, $ef, $f7, $fe, $02, $06
13cbd     07 05 00 FA 
13cc1     F2 EA E4 E1 
13cc5     E2 E7 EF F8 
13cc9     00 05 07 04 | 	byte	$07, $05, $00, $fa, $f2, $ea, $e4, $e1, $e2, $e7, $ef, $f8, $00, $05, $07, $04
13ccd     FD F2 E8 E3 
13cd1     E1 E7 F1 FD 
13cd5     04 07 03 F8 
13cd9     EC E4 E1 E8 | 	byte	$fd, $f2, $e8, $e3, $e1, $e7, $f1, $fd, $04, $07, $03, $f8, $ec, $e4, $e1, $e8
13cdd     F6 01 07 03 
13ce1     F8 EA E2 E4 
13ce5     F2 00 07 02 
13ce9     F4 E5 E2 EE | 	byte	$f6, $01, $07, $03, $f8, $ea, $e2, $e4, $f2, $00, $07, $02, $f4, $e5, $e2, $ee
13ced     FF 07 01 EF 
13cf1     E2 E6 F8 06 
13cf5     03 F2 E3 E8 
13cf9     FC 07 FD E8 | 	byte	$ff, $07, $01, $ef, $e2, $e6, $f8, $06, $03, $f2, $e3, $e8, $fc, $07, $fd, $e8
13cfd     E3 F5 06 00 
13d01     E9 E2 F7 06 
13d05     FB E4 E8 01 
13d09     04 EC E3 FB | 	byte	$e3, $f5, $06, $00, $e9, $e2, $f7, $06, $fb, $e4, $e8, $01, $04, $ec, $e3, $fb
13d0d     06 F0 E2 FA 
13d11     06 F0 E3 FE 
13d15     03 E7 EB 05 
13d19     F7 E2 FC 02 | 	byte	$06, $f0, $e2, $fa, $06, $f0, $e3, $fe, $03, $e7, $eb, $05, $f7, $e2, $fc, $02
13d1d     E6 F0 06 EE 
13d21     E9 05 F1 E6 
13d25     05 F2 E7 05 
13d29     EF EB 05 E9 | 	byte	$e6, $f0, $06, $ee, $e9, $05, $f1, $e6, $05, $f2, $e7, $05, $ef, $eb, $05, $e9
13d2d     F3 02 E4 FE 
13d31     FA E4 04 F1 
13d35     E8 06 ED EB 
13d39     06 EC EA 05 | 	byte	$f3, $02, $e4, $fe, $fa, $e4, $04, $f1, $e8, $06, $ed, $eb, $06, $ec, $ea, $05
13d3d     F1 E6 04 F8 
13d41     E2 FD 02 E5 
13d45     EF 06 F4 E2 
13d49     FB 05 EC E5 | 	byte	$f1, $e6, $04, $f8, $e2, $fd, $02, $e5, $ef, $06, $f4, $e2, $fb, $05, $ec, $e5
13d4d     FF 03 E9 E5 
13d51     FE 05 EE E2 
13d55     F7 07 F9 E4 
13d59     E9 00 06 F3 | 	byte	$ff, $03, $e9, $e5, $fe, $05, $ee, $e2, $f7, $07, $f9, $e4, $e9, $00, $06, $f3
13d5d     E2 EB 00 06 
13d61     F6 E4 E5 FA 
13d65     06 01 EE E2 
13d69     E8 FB 06 02 | 	byte	$e2, $eb, $00, $06, $f6, $e4, $e5, $fa, $06, $01, $ee, $e2, $e8, $fb, $06, $02
13d6d     F2 E4 E3 F0 
13d71     00 07 00 F1 
13d75     E5 E1 EB FB 
13d79     04 07 FF F1 | 	byte	$f2, $e4, $e3, $f0, $00, $07, $00, $f1, $e5, $e1, $eb, $fb, $04, $07, $ff, $f1
13d7d     E5 E1 E7 F3 
13d81     FF 06 06 00 
13d85     F4 E9 E2 E2 
13d89     E8 F2 FD 03 | 	byte	$e5, $e1, $e7, $f3, $ff, $06, $06, $00, $f4, $e9, $e2, $e2, $e8, $f2, $fd, $03
13d8d     07 05 FF F5 
13d91     EC E5 E2 E3 
13d95     E8 F0 F9 00 
13d99     04 06 05 01 | 	byte	$07, $05, $ff, $f5, $ec, $e5, $e2, $e3, $e8, $f0, $f9, $00, $04, $06, $05, $01
13d9d     FC F5 ED E8 
13da1     E4 E2 E3 E7 
13da5     EC F2 F8 FE 
13da9     01 04 06 05 | 	byte	$fc, $f5, $ed, $e8, $e4, $e2, $e3, $e7, $ec, $f2, $f8, $fe, $01, $04, $06, $05
13dad     03 00 FC F7 
13db1     F2 ED E9 E6 
13db5     E4 E3 E4 E6 
13db9     E8 EC F0 F3 | 	byte	$03, $00, $fc, $f7, $f2, $ed, $e9, $e6, $e4, $e3, $e4, $e6, $e8, $ec, $f0, $f3
13dbd     F8 FC FF 00 
13dc1     03 03 04 04 
13dc5     03 01 00 FE 
13dc9     FB F8 F5 F2 | 	byte	$f8, $fc, $ff, $00, $03, $03, $04, $04, $03, $01, $00, $fe, $fb, $f8, $f5, $f2
13dcd     F0 EC EA E8 
13dd1     E7 E6 E6 E6 
13dd5     E6 E7 E8 E9 
13dd9     EB ED F0 F1 | 	byte	$f0, $ec, $ea, $e8, $e7, $e6, $e6, $e6, $e6, $e7, $e8, $e9, $eb, $ed, $f0, $f1
13ddd     F3 F6 F8 FA 
13de1     FC FE FF FF 
13de5     00 00 01 01 
13de9     00 00 00 FF | 	byte	$f3, $f6, $f8, $fa, $fc, $fe, $ff, $ff, $00, $00, $01, $01, $00, $00, $00, $ff
13ded     FF FF FE FC 
13df1     FB F9 F8 F7 
13df5     F6 F4 F2 F0 
13df9     F0 EE EC EB | 	byte	$ff, $ff, $fe, $fc, $fb, $f9, $f8, $f7, $f6, $f4, $f2, $f0, $f0, $ee, $ec, $eb
13dfd     EA E9 E8 E7 
13e01     E7 E7 E7 E7 
13e05     E7 E8 E9 EB 
13e09     ED EF F1 F3 | 	byte	$ea, $e9, $e8, $e7, $e7, $e7, $e7, $e7, $e7, $e8, $e9, $eb, $ed, $ef, $f1, $f3
13e0d     F6 F8 FA FC 
13e11     FF 00 01 03 
13e15     04 04 04 04 
13e19     03 01 00 FF | 	byte	$f6, $f8, $fa, $fc, $ff, $00, $01, $03, $04, $04, $04, $04, $03, $01, $00, $ff
13e1d     FC F8 F5 F1 
13e21     EE EA E8 E6 
13e25     E4 E3 E3 E4 
13e29     E6 E8 EC F1 | 	byte	$fc, $f8, $f5, $f1, $ee, $ea, $e8, $e6, $e4, $e3, $e3, $e4, $e6, $e8, $ec, $f1
13e2d     F6 FA FF 01 
13e31     04 06 06 05 
13e35     02 FF FB F5 
13e39     EF EA E6 E3 | 	byte	$f6, $fa, $ff, $01, $04, $06, $06, $05, $02, $ff, $fb, $f5, $ef, $ea, $e6, $e3
13e3d     E2 E3 E7 EC 
13e41     F3 FA 00 04 
13e45     07 06 02 FD 
13e49     F7 EE E7 E3 | 	byte	$e2, $e3, $e7, $ec, $f3, $fa, $00, $04, $07, $06, $02, $fd, $f7, $ee, $e7, $e3
13e4d     E1 E5 EB F4 
13e51     FE 03 07 05 
13e55     00 F7 EC E4 
13e59     E1 E5 ED F9 | 	byte	$e1, $e5, $eb, $f4, $fe, $03, $07, $05, $00, $f7, $ec, $e4, $e1, $e5, $ed, $f9
13e5d     01 06 05 FD 
13e61     F1 E7 E1 E6 
13e65     F1 FD 05 06 
13e69     FD EF E4 E3 | 	byte	$01, $06, $05, $fd, $f1, $e7, $e1, $e6, $f1, $fd, $05, $06, $fd, $ef, $e4, $e3
13e6d     EC FC 06 05 
13e71     F9 E9 E2 E8 
13e75     F9 05 04 F6 
13e79     E6 E2 F1 01 | 	byte	$ec, $fc, $06, $05, $f9, $e9, $e2, $e8, $f9, $05, $04, $f6, $e6, $e2, $f1, $01
13e7d     06 F9 E6 E3 
13e81     F4 05 03 F1 
13e85     E3 ED 02 04 
13e89     F2 E3 EE 03 | 	byte	$06, $f9, $e6, $e3, $f4, $05, $03, $f1, $e3, $ed, $02, $04, $f2, $e3, $ee, $03
13e8d     02 EB E3 F8 
13e91     06 F7 E3 EF 
13e95     05 FB E4 EE 
13e99     04 FB E4 F2 | 	byte	$02, $eb, $e3, $f8, $06, $f7, $e3, $ef, $05, $fb, $e4, $ee, $04, $fb, $e4, $f2
13e9d     06 F3 E3 FB 
13ea1     03 E7 EC 05 
13ea5     F3 E4 FF FC 
13ea9     E3 FA 01 E4 | 	byte	$06, $f3, $e3, $fb, $03, $e7, $ec, $05, $f3, $e4, $ff, $fc, $e3, $fa, $01, $e4
13ead     F7 01 E5 F8 
13eb1     02 E4 FB FD 
13eb5     E3 00 F6 E7 
13eb9     04 F0 E9 05 | 	byte	$f7, $01, $e5, $f8, $02, $e4, $fb, $fd, $e3, $00, $f6, $e7, $04, $f0, $e9, $05
13ebd     EF E8 04 F2 
13ec1     E6 03 F7 E3 
13ec5     FD 00 E5 F1 
13ec9     06 F0 E4 FF | 	byte	$ef, $e8, $04, $f2, $e6, $03, $f7, $e3, $fd, $00, $e5, $f1, $06, $f0, $e4, $ff
13ecd     01 E7 EB 03 
13ed1     FD E5 ED 03 
13ed5     FE E6 E9 01 
13ed9     02 EC E3 F7 | 	byte	$01, $e7, $eb, $03, $fd, $e5, $ed, $03, $fe, $e6, $e9, $01, $02, $ec, $e3, $f7
13edd     06 FB E6 E6 
13ee1     FC 06 F9 E6 
13ee5     E4 F8 05 00 
13ee9     EE E2 EC FE | 	byte	$06, $fb, $e6, $e6, $fc, $06, $f9, $e6, $e4, $f8, $05, $00, $ee, $e2, $ec, $fe
13eed     06 FE EB E2 
13ef1     E9 FA 05 03 
13ef5     F6 E7 E2 EA 
13ef9     FA 04 05 FB | 	byte	$06, $fe, $eb, $e2, $e9, $fa, $05, $03, $f6, $e7, $e2, $ea, $fa, $04, $05, $fb
13efd     EE E4 E3 ED 
13f01     FA 03 06 00 
13f05     F5 E9 E3 E3 
13f09     EC F6 00 05 | 	byte	$ee, $e4, $e3, $ed, $fa, $03, $06, $00, $f5, $e9, $e3, $e3, $ec, $f6, $00, $05
13f0d     06 00 F6 EC 
13f11     E5 E2 E5 EC 
13f15     F5 FE 03 06 
13f19     04 00 F8 F0 | 	byte	$06, $00, $f6, $ec, $e5, $e2, $e5, $ec, $f5, $fe, $03, $06, $04, $00, $f8, $f0
13f1d     E9 E5 E3 E3 
13f21     E7 EE F5 FC 
13f25     01 04 06 04 
13f29     01 FE F8 F1 | 	byte	$e9, $e5, $e3, $e3, $e7, $ee, $f5, $fc, $01, $04, $06, $04, $01, $fe, $f8, $f1
13f2d     EC E7 E4 E3 
13f31     E3 E5 E8 ED 
13f35     F2 F7 FC 00 
13f39     01 03 04 04 | 	byte	$ec, $e7, $e4, $e3, $e3, $e5, $e8, $ed, $f2, $f7, $fc, $00, $01, $03, $04, $04
13f3d     03 00 FE FB 
13f41     F7 F3 F0 EC 
13f45     E9 E7 E6 E5 
13f49     E5 E6 E7 E9 | 	byte	$03, $00, $fe, $fb, $f7, $f3, $f0, $ec, $e9, $e7, $e6, $e5, $e5, $e6, $e7, $e9
13f4d     EB EE F1 F3 
13f51     F7 F9 FC FF 
13f55     00 00 01 02 
13f59     02 02 01 00 | 	byte	$eb, $ee, $f1, $f3, $f7, $f9, $fc, $ff, $00, $00, $01, $02, $02, $02, $01, $00
13f5d     FF FF FD FB 
13f61     F9 F8 F5 F3 
13f65     F1 F0 EE EC 
13f69     EB EA E9 E9 | 	byte	$ff, $ff, $fd, $fb, $f9, $f8, $f5, $f3, $f1, $f0, $ee, $ec, $eb, $ea, $e9, $e9
13f6d     E8 E8 E8 E9 
13f71     E9 E9 EB EC 
13f75     EC EE EF F0 
13f79     F1 F3 F4 F6 | 	byte	$e8, $e8, $e8, $e9, $e9, $e9, $eb, $ec, $ec, $ee, $ef, $f0, $f1, $f3, $f4, $f6
13f7d     F8 F8 FA FC 
13f81     FD FE FF 00 
13f85     00 00 01 01 
13f89     01 01 00 00 | 	byte	$f8, $f8, $fa, $fc, $fd, $fe, $ff, $00, $00, $00, $01, $01, $01, $01, $00, $00
13f8d     00 FF FE FC 
13f91     FA F9 F7 F4 
13f95     F2 F0 EE EC 
13f99     E9 E8 E7 E6 | 	byte	$00, $ff, $fe, $fc, $fa, $f9, $f7, $f4, $f2, $f0, $ee, $ec, $e9, $e8, $e7, $e6
13f9d     E5 E4 E5 E6 
13fa1     E7 E8 EB EE 
13fa5     F0 F3 F7 FA 
13fa9     FE 00 01 03 | 	byte	$e5, $e4, $e5, $e6, $e7, $e8, $eb, $ee, $f0, $f3, $f7, $fa, $fe, $00, $01, $03
13fad     04 05 04 03 
13fb1     00 FF FB F7 
13fb5     F2 EE E9 E7 
13fb9     E4 E3 E3 E4 | 	byte	$04, $05, $04, $03, $00, $ff, $fb, $f7, $f2, $ee, $e9, $e7, $e4, $e3, $e3, $e4
13fbd     E7 EC F0 F7 
13fc1     FC 00 03 06 
13fc5     06 03 00 FC 
13fc9     F4 EE E8 E4 | 	byte	$e7, $ec, $f0, $f7, $fc, $00, $03, $06, $06, $03, $00, $fc, $f4, $ee, $e8, $e4
13fcd     E2 E3 E7 ED 
13fd1     F5 FD 02 05 
13fd5     06 02 FD F4 
13fd9     EC E5 E2 E4 | 	byte	$e2, $e3, $e7, $ed, $f5, $fd, $02, $05, $06, $02, $fd, $f4, $ec, $e5, $e2, $e4
13fdd     EB F4 FD 03 
13fe1     06 03 FC F1 
13fe5     E7 E2 E4 ED 
13fe9     F8 01 06 02 | 	byte	$eb, $f4, $fd, $03, $06, $03, $fc, $f1, $e7, $e2, $e4, $ed, $f8, $01, $06, $02
13fed     F9 EC E3 E3 
13ff1     ED FA 03 06 
13ff5     FD EF E4 E3 
13ff9     EF FF 06 01 | 	byte	$f9, $ec, $e3, $e3, $ed, $fa, $03, $06, $fd, $ef, $e4, $e3, $ef, $ff, $06, $01
13ffd     F2 E4 E4 F2 
14001     01 05 FA E8 
14005     E3 EF 00 05 
14009     F7 E6 E5 F7 | 	byte	$f2, $e4, $e4, $f2, $01, $05, $fa, $e8, $e3, $ef, $00, $05, $f7, $e6, $e5, $f7
1400d     05 FE EB E3 
14011     F4 04 FF E9 
14015     E4 F9 06 F6 
14019     E4 EE 03 FF | 	byte	$05, $fe, $eb, $e3, $f4, $04, $ff, $e9, $e4, $f9, $06, $f6, $e4, $ee, $03, $ff
1401d     E7 E9 01 01 
14021     E8 E9 01 FF 
14025     E5 EE 04 F7 
14029     E3 FA 02 E9 | 	byte	$e7, $e9, $01, $01, $e8, $e9, $01, $ff, $e5, $ee, $04, $f7, $e3, $fa, $02, $e9
1402d     EC 04 F3 E5 
14031     01 FB E3 FC 
14035     FE E4 FA FF 
14039     E4 FC FF E3 | 	byte	$ec, $04, $f3, $e5, $01, $fb, $e3, $fc, $fe, $e4, $fa, $ff, $e4, $fc, $ff, $e3
1403d     FF F8 E4 00 
14041     F9 E4 00 FA 
14045     E3 FC FF E5 
14049     F5 04 EB E9 | 	byte	$ff, $f8, $e4, $00, $f9, $e4, $00, $fa, $e3, $fc, $ff, $e5, $f5, $04, $eb, $e9
1404d     03 F8 E3 F7 
14051     04 EE E4 FE 
14055     02 EA E6 FE 
14059     03 EB E4 FB | 	byte	$03, $f8, $e3, $f7, $04, $ee, $e4, $fe, $02, $ea, $e6, $fe, $03, $eb, $e4, $fb
1405d     06 F3 E3 F0 
14061     03 00 EA E3 
14065     F7 04 FF EA 
14069     E3 F3 03 02 | 	byte	$06, $f3, $e3, $f0, $03, $00, $ea, $e3, $f7, $04, $ff, $ea, $e3, $f3, $03, $02
1406d     F2 E3 E8 FA 
14071     05 00 EF E3 
14075     E7 F7 04 03 
14079     F9 E9 E2 EA | 	byte	$f2, $e3, $e8, $fa, $05, $00, $ef, $e3, $e7, $f7, $04, $03, $f9, $e9, $e2, $ea
1407d     F9 03 05 FC 
14081     EE E4 E3 ED 
14085     FA 03 06 00 
14089     F4 E8 E3 E5 | 	byte	$f9, $03, $05, $fc, $ee, $e4, $e3, $ed, $fa, $03, $06, $00, $f4, $e8, $e3, $e5
1408d     ED F8 00 05 
14091     04 FD F3 EA 
14095     E4 E3 E7 EF 
14099     F8 00 04 05 | 	byte	$ed, $f8, $00, $05, $04, $fd, $f3, $ea, $e4, $e3, $e7, $ef, $f8, $00, $04, $05
1409d     02 FC F4 ED 
140a1     E7 E3 E3 E6 
140a5     EC F3 FA 00 
140a9     03 05 04 01 | 	byte	$02, $fc, $f4, $ed, $e7, $e3, $e3, $e6, $ec, $f3, $fa, $00, $03, $05, $04, $01
140ad     FE F8 F2 EC 
140b1     E8 E5 E4 E4 
140b5     E6 E9 EE F3 
140b9     F8 FD 00 02 | 	byte	$fe, $f8, $f2, $ec, $e8, $e5, $e4, $e4, $e6, $e9, $ee, $f3, $f8, $fd, $00, $02
140bd     03 04 03 01 
140c1     FF FC F8 F4 
140c5     F0 ED EA E8 
140c9     E6 E5 E5 E6 | 	byte	$03, $04, $03, $01, $ff, $fc, $f8, $f4, $f0, $ed, $ea, $e8, $e6, $e5, $e5, $e6
140cd     E7 E9 EB EE 
140d1     F1 F4 F7 FA 
140d5     FC FF 00 01 
140d9     01 02 02 01 | 	byte	$e7, $e9, $eb, $ee, $f1, $f4, $f7, $fa, $fc, $ff, $00, $01, $01, $02, $02, $01
140dd     00 00 FF FE 
140e1     FC F9 F8 F6 
140e5     F3 F1 F0 EE 
140e9     EC EB EA E9 | 	byte	$00, $00, $ff, $fe, $fc, $f9, $f8, $f6, $f3, $f1, $f0, $ee, $ec, $eb, $ea, $e9
140ed     E9 E8 E8 E8 
140f1     E9 E9 EA EB 
140f5     EC ED EF F0 
140f9     F1 F2 F4 F5 | 	byte	$e9, $e8, $e8, $e8, $e9, $e9, $ea, $eb, $ec, $ed, $ef, $f0, $f1, $f2, $f4, $f5
140fd     F7 F8 F9 FA 
14101     FC FC FE FF 
14105     FF 00 00 00 
14109     00 00 00 00 | 	byte	$f7, $f8, $f9, $fa, $fc, $fc, $fe, $ff, $ff, $00, $00, $00, $00, $00, $00, $00
1410d     00 FF FF FE 
14111     FC FC FA F8 
14115     F7 F5 F3 F1 
14119     F0 ED EC EA | 	byte	$00, $ff, $ff, $fe, $fc, $fc, $fa, $f8, $f7, $f5, $f3, $f1, $f0, $ed, $ec, $ea
1411d     E8 E7 E6 E6 
14121     E6 E6 E6 E7 
14125     E8 EA EC EF 
14129     F1 F4 F7 FA | 	byte	$e8, $e7, $e6, $e6, $e6, $e6, $e6, $e7, $e8, $ea, $ec, $ef, $f1, $f4, $f7, $fa
1412d     FD 00 01 02 
14131     03 04 04 03 
14135     01 FF FD F9 
14139     F6 F1 EE EB | 	byte	$fd, $00, $01, $02, $03, $04, $04, $03, $01, $ff, $fd, $f9, $f6, $f1, $ee, $eb
1413d     E7 E5 E3 E3 
14141     E4 E7 EA EF 
14145     F3 F9 FE 01 
14149     04 05 05 02 | 	byte	$e7, $e5, $e3, $e3, $e4, $e7, $ea, $ef, $f3, $f9, $fe, $01, $04, $05, $05, $02
1414d     FF FB F5 EF 
14151     E9 E5 E3 E3 
14155     E6 EC F3 FA 
14159     00 04 06 03 | 	byte	$ff, $fb, $f5, $ef, $e9, $e5, $e3, $e3, $e6, $ec, $f3, $fa, $00, $04, $06, $03
1415d     FF F8 F0 E8 
14161     E4 E3 E6 ED 
14165     F7 FF 04 06 
14169     01 F9 F0 E7 | 	byte	$ff, $f8, $f0, $e8, $e4, $e3, $e6, $ed, $f7, $ff, $04, $06, $01, $f9, $f0, $e7
1416d     E3 E5 EE F9 
14171     01 06 02 F8 
14175     ED E5 E3 EB 
14179     F8 02 05 FF | 	byte	$e3, $e5, $ee, $f9, $01, $06, $02, $f8, $ed, $e5, $e3, $eb, $f8, $02, $05, $ff
1417d     F2 E6 E3 EC 
14181     FB 04 03 F8 
14185     E8 E3 EC FC 
14189     04 01 EF E4 | 	byte	$f2, $e6, $e3, $ec, $fb, $04, $03, $f8, $e8, $e3, $ec, $fc, $04, $01, $ef, $e4
1418d     E8 F9 04 FF 
14191     EE E3 EC FF 
14195     05 F7 E5 E7 
14199     FD 05 F7 E5 | 	byte	$e8, $f9, $04, $ff, $ee, $e3, $ec, $ff, $05, $f7, $e5, $e7, $fd, $05, $f7, $e5
1419d     EA FF 03 F0 
141a1     E3 F5 04 F8 
141a5     E4 EE 03 FD 
141a9     E6 EE 03 FA | 	byte	$ea, $ff, $03, $f0, $e3, $f5, $04, $f8, $e4, $ee, $03, $fd, $e6, $ee, $03, $fa
141ad     E4 F1 04 F3 
141b1     E3 FC 01 E8 
141b5     EE 03 F2 E5 
141b9     00 FB E4 FB | 	byte	$e4, $f1, $04, $f3, $e3, $fc, $01, $e8, $ee, $03, $f2, $e5, $00, $fb, $e4, $fb
141bd     FF E4 F8 00 
141c1     E4 F8 01 E5 
141c5     F9 01 E5 F7 
141c9     02 E7 F1 04 | 	byte	$ff, $e4, $f8, $00, $e4, $f8, $01, $e5, $f9, $01, $e5, $f7, $02, $e7, $f1, $04
141cd     EE E9 03 F7 
141d1     E3 F9 03 EA 
141d5     E8 01 FD E5 
141d9     ED 03 FB E5 | 	byte	$ee, $e9, $03, $f7, $e3, $f9, $03, $ea, $e8, $01, $fd, $e5, $ed, $03, $fb, $e5
141dd     EE 03 FE E6 
141e1     E8 FF 03 EF 
141e5     E3 F4 04 FE 
141e9     E9 E5 F7 04 | 	byte	$ee, $03, $fe, $e6, $e8, $ff, $03, $ef, $e3, $f4, $04, $fe, $e9, $e5, $f7, $04
141ed     FE EA E3 F2 
141f1     02 03 F3 E5 
141f5     E6 F7 03 02 
141f9     F4 E6 E5 F1 | 	byte	$fe, $ea, $e3, $f2, $02, $03, $f3, $e5, $e6, $f7, $03, $02, $f4, $e6, $e5, $f1
141fd     00 05 FE EF 
14201     E4 E5 F0 FE 
14205     05 02 F8 EA 
14209     E3 E5 F0 FC | 	byte	$00, $05, $fe, $ef, $e4, $e5, $f0, $fe, $05, $02, $f8, $ea, $e3, $e5, $f0, $fc
1420d     03 04 FF F4 
14211     E9 E4 E4 EB 
14215     F6 FF 04 04 
14219     00 F8 EE E7 | 	byte	$03, $04, $ff, $f4, $e9, $e4, $e4, $eb, $f6, $ff, $04, $04, $00, $f8, $ee, $e7
1421d     E3 E4 EA F2 
14221     FB 00 04 04 
14225     02 FD F5 EE 
14229     E8 E4 E3 E5 | 	byte	$e3, $e4, $ea, $f2, $fb, $00, $04, $04, $02, $fd, $f5, $ee, $e8, $e4, $e3, $e5
1422d     E9 F0 F6 FC 
14231     00 03 04 03 
14235     00 FE F9 F4 
14239     EF EA E7 E5 | 	byte	$e9, $f0, $f6, $fc, $00, $03, $04, $03, $00, $fe, $f9, $f4, $ef, $ea, $e7, $e5
1423d     E4 E5 E7 EB 
14241     EF F3 F8 FC 
14245     FF 01 03 03 
14249     03 02 00 FF | 	byte	$e4, $e5, $e7, $eb, $ef, $f3, $f8, $fc, $ff, $01, $03, $03, $03, $02, $00, $ff
1424d     FC F8 F5 F2 
14251     EF EC EA E8 
14255     E7 E6 E6 E7 
14259     E8 E9 EB ED | 	byte	$fc, $f8, $f5, $f2, $ef, $ec, $ea, $e8, $e7, $e6, $e6, $e7, $e8, $e9, $eb, $ed
1425d     F0 F1 F4 F7 
14261     F9 FB FD FF 
14265     00 00 00 00 
14269     00 00 00 00 | 	byte	$f0, $f1, $f4, $f7, $f9, $fb, $fd, $ff, $00, $00, $00, $00, $00, $00, $00, $00
1426d     FF FE FC FB 
14271     F9 F8 F6 F4 
14275     F3 F1 F0 EF 
14279     EE EC EC EB | 	byte	$ff, $fe, $fc, $fb, $f9, $f8, $f6, $f4, $f3, $f1, $f0, $ef, $ee, $ec, $ec, $eb
1427d     EA EA EA EA 
14281     EA EA EA    | 	byte	$ea[7]
14284     EB EC EC ED 
14288     EE EF F0 F1 
1428c     F2 F3 F4 F6 
14290     F8 F8 FA FB | 	byte	$eb, $ec, $ec, $ed, $ee, $ef, $f0, $f1, $f2, $f3, $f4, $f6, $f8, $f8, $fa, $fb
14294     FC FE FF 00 
14298     00 00 00 00 
1429c     00 00 00 00 
142a0     FF FF FE FC | 	byte	$fc, $fe, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $fe, $fc
142a4     FA F8 F6 F4 
142a8     F1 F0 EE EC 
142ac     E9 E8 E7 E6 
142b0     E5 E5 E6 E7 | 	byte	$fa, $f8, $f6, $f4, $f1, $f0, $ee, $ec, $e9, $e8, $e7, $e6, $e5, $e5, $e6, $e7
142b4     E8 E9 EC EF 
142b8     F2 F6 F9 FC 
142bc     FF 00 02 03 
142c0     04 03 02 00 | 	byte	$e8, $e9, $ec, $ef, $f2, $f6, $f9, $fc, $ff, $00, $02, $03, $04, $03, $02, $00
142c4     FF FB F7 F3 
142c8     EE EA E7 E5 
142cc     E3 E4 E6 E9 
142d0     EC F1 F7 FD | 	byte	$ff, $fb, $f7, $f3, $ee, $ea, $e7, $e5, $e3, $e4, $e6, $e9, $ec, $f1, $f7, $fd
142d4     00 03 04 04 
142d8     01 FF F8 F2 
142dc     EC E7 E4 E3 
142e0     E6 EB F2 F9 | 	byte	$00, $03, $04, $04, $01, $ff, $f8, $f2, $ec, $e7, $e4, $e3, $e6, $eb, $f2, $f9
142e4     FF 03 05 03 
142e8     FF F7 EE E7 
142ec     E3 E4 E9 F1 
142f0     FB 01 05 03 | 	byte	$ff, $03, $05, $03, $ff, $f7, $ee, $e7, $e3, $e4, $e9, $f1, $fb, $01, $05, $03
142f4     FC F2 E8 E4 
142f8     E4 EC F7 00 
142fc     05 02 F9 EC 
14300     E4 E4 ED FB | 	byte	$fc, $f2, $e8, $e4, $e4, $ec, $f7, $00, $05, $02, $f9, $ec, $e4, $e4, $ed, $fb
14304     03 04 FC EE 
14308     E4 E6 F1 FF 
1430c     05 FF F1 E5 
14310     E6 F5 02 03 | 	byte	$03, $04, $fc, $ee, $e4, $e6, $f1, $ff, $05, $ff, $f1, $e5, $e6, $f5, $02, $03
14314     F7 E8 E4 F2 
14318     01 03 F4 E5 
1431c     E7 FA 04 FC 
14320     E8 E5 F7 04 | 	byte	$f7, $e8, $e4, $f2, $01, $03, $f4, $e5, $e7, $fa, $04, $fc, $e8, $e5, $f7, $04
14324     FB E7 E8 FC 
14328     04 F3 E4 F2 
1432c     03 FC E6 EC 
14330     03 FE E7 EC | 	byte	$fb, $e7, $e8, $fc, $04, $f3, $e4, $f2, $03, $fc, $e6, $ec, $03, $fe, $e7, $ec
14334     02 FC E5 F0 
14338     03 F5 E4 FB 
1433c     02 E8 ED 03 
14340     F3 E6 FF FC | 	byte	$02, $fc, $e5, $f0, $03, $f5, $e4, $fb, $02, $e8, $ed, $03, $f3, $e6, $ff, $fc
14344     E5 FA 01 E5 
14348     F7 01 E7 F6 
1434c     02 E8 F1 04 
14350     EC EA 03 F7 | 	byte	$e5, $fa, $01, $e5, $f7, $01, $e7, $f6, $02, $e8, $f1, $04, $ec, $ea, $03, $f7
14354     E4 FB 01 E9 
14358     EB 02 F9 E5 
1435c     F4 04 F4 E4 
14360     F6 04 F4 E4 | 	byte	$e4, $fb, $01, $e9, $eb, $02, $f9, $e5, $f4, $04, $f4, $e4, $f6, $04, $f4, $e4
14364     F2 04 FA E6 
14368     EA FF 02 F1 
1436c     E4 F0 02 01 
14370     EE E3 EF 01 | 	byte	$f2, $04, $fa, $e6, $ea, $ff, $02, $f1, $e4, $f0, $02, $01, $ee, $e3, $ef, $01
14374     03 F3 E5 E8 
14378     F9 04 00 F0 
1437c     E4 E9 F8 03 
14380     02 F5 E7 E3 | 	byte	$03, $f3, $e5, $e8, $f9, $04, $00, $f0, $e4, $e9, $f8, $03, $02, $f5, $e7, $e3
14384     ED FC 04 01 
14388     F7 EA E3 E7 
1438c     F4 00 04 01 
14390     F8 ED E5 E4 | 	byte	$ed, $fc, $04, $01, $f7, $ea, $e3, $e7, $f4, $00, $04, $01, $f8, $ed, $e5, $e4
14394     EC F7 00 04 
14398     03 FC F1 E9 
1439c     E4 E4 EA F3 
143a0     FC 02 04 02 | 	byte	$ec, $f7, $00, $04, $03, $fc, $f1, $e9, $e4, $e4, $ea, $f3, $fc, $02, $04, $02
143a4     FE F7 EE E8 
143a8     E4 E4 E7 EE 
143ac     F5 FC 00 03 
143b0     04 01 FE F8 | 	byte	$fe, $f7, $ee, $e8, $e4, $e4, $e7, $ee, $f5, $fc, $00, $03, $04, $01, $fe, $f8
143b4     F2 EC E8 E5 
143b8     E4 E5 E7 EC 
143bc     F1 F7 FC 00 
143c0     01 03 03 02 | 	byte	$f2, $ec, $e8, $e5, $e4, $e5, $e7, $ec, $f1, $f7, $fc, $00, $01, $03, $03, $02
143c4     00 FE F9 F5 
143c8     F1 ED EA E8 
143cc     E6 E6 E6 E7 
143d0     E8 EB EE F1 | 	byte	$00, $fe, $f9, $f5, $f1, $ed, $ea, $e8, $e6, $e6, $e6, $e7, $e8, $eb, $ee, $f1
143d4     F5 F8 FB FE 
143d8     00 00 01 01 
143dc     01 01 00 00 
143e0     FE FC F9 F8 | 	byte	$f5, $f8, $fb, $fe, $00, $00, $01, $01, $01, $01, $00, $00, $fe, $fc, $f9, $f8
143e4     F5 F3 F0 EF 
143e8     EC EB EA E9 
143ec     E8 E8 E8 E8 
143f0     E9 E9 EB EC | 	byte	$f5, $f3, $f0, $ef, $ec, $eb, $ea, $e9, $e8, $e8, $e8, $e8, $e9, $e9, $eb, $ec
143f4     ED EF F0 F1 
143f8     F3 F5 F7 F8 
143fc     F9 FB FC FD 
14400     FE FF FF FF | 	byte	$ed, $ef, $f0, $f1, $f3, $f5, $f7, $f8, $f9, $fb, $fc, $fd, $fe, $ff, $ff, $ff
14404     00 FF 00 FF 
14408     FF FF FE FE 
1440c     FD FC FC FA 
14410     F9 F8 F8 F6 | 	byte	$00, $ff, $00, $ff, $ff, $ff, $fe, $fe, $fd, $fc, $fc, $fa, $f9, $f8, $f8, $f6
14414     F5 F4 F2 F1 
14418     F0 F0 EE ED 
1441c     EC EB EA E9 
14420     E9 E8 E8 E8 | 	byte	$f5, $f4, $f2, $f1, $f0, $f0, $ee, $ed, $ec, $eb, $ea, $e9, $e9, $e8, $e8, $e8
14424     E9 E9 EA EB 
14428     EC EE EF F0 
1442c     F2 F4 F6 F8 
14430     FB FC FF FF | 	byte	$e9, $e9, $ea, $eb, $ec, $ee, $ef, $f0, $f2, $f4, $f6, $f8, $fb, $fc, $ff, $ff
14434     00 01 02 03 
14438     02 02 01 00 
1443c     FF FC FA F8 
14440     F4 F1 EE EC | 	byte	$00, $01, $02, $03, $02, $02, $01, $00, $ff, $fc, $fa, $f8, $f4, $f1, $ee, $ec
14444     E9 E7 E6 E5 
14448     E5 E6 E7 EA 
1444c     EE F1 F6 F9 
14450     FE 00 02 03 | 	byte	$e9, $e7, $e6, $e5, $e5, $e6, $e7, $ea, $ee, $f1, $f6, $f9, $fe, $00, $02, $03
14454     04 03 00 FF 
14458     FA F4 F0 EB 
1445c     E7 E4 E4 E5 
14460     E8 EE F3 FA | 	byte	$04, $03, $00, $ff, $fa, $f4, $f0, $eb, $e7, $e4, $e4, $e5, $e8, $ee, $f3, $fa
14464     FF 03 04 04 
14468     01 FC F5 EE 
1446c     E8 E4 E4 E7 
14470     ED F5 FD 02 | 	byte	$ff, $03, $04, $04, $01, $fc, $f5, $ee, $e8, $e4, $e4, $e7, $ed, $f5, $fd, $02
14474     04 02 FE F5 
14478     EC E6 E3 E6 
1447c     EF F9 00 04 
14480     02 FB EF E7 | 	byte	$04, $02, $fe, $f5, $ec, $e6, $e3, $e6, $ef, $f9, $00, $04, $02, $fb, $ef, $e7
14484     E3 E7 F2 FF 
14488     04 02 F9 ED 
1448c     E5 E5 EF FD 
14490     03 01 F6 E9 | 	byte	$e3, $e7, $f2, $ff, $04, $02, $f9, $ed, $e5, $e5, $ef, $fd, $03, $01, $f6, $e9
14494     E3 EB FA 03 
14498     01 F4 E6 E5 
1449c     F3 01 03 F6 
144a0     E7 E5 F5 02 | 	byte	$e3, $eb, $fa, $03, $01, $f4, $e6, $e5, $f3, $01, $03, $f6, $e7, $e5, $f5, $02
144a4     01 EF E4 ED 
144a8     00 03 F3 E4 
144ac     ED 00 01 F0 
144b0     E4 F4 03 FA | 	byte	$01, $ef, $e4, $ed, $00, $03, $f3, $e4, $ed, $00, $01, $f0, $e4, $f4, $03, $fa
144b4     E6 EC 00 FF 
144b8     EA E9 FF FF 
144bc     E9 EA 00 FD 
144c0     E6 F0 03 F4 | 	byte	$e6, $ec, $00, $ff, $ea, $e9, $ff, $ff, $e9, $ea, $00, $fd, $e6, $f0, $03, $f4
144c4     E5 FC 01 E8 
144c8     EF 03 F1 E8 
144cc     01 F7 E5 FE 
144d0     FC E5 FA FF | 	byte	$e5, $fc, $01, $e8, $ef, $03, $f1, $e8, $01, $f7, $e5, $fe, $fc, $e5, $fa, $ff
144d4     E7 F3 03 ED 
144d8     E9 02 FA E5 
144dc     F6 03 EF E6 
144e0     FD 01 EA E8 | 	byte	$e7, $f3, $03, $ed, $e9, $02, $fa, $e5, $f6, $03, $ef, $e6, $fd, $01, $ea, $e8
144e4     FF 00 EA E7 
144e8     FD 02 F0 E4 
144ec     F6 03 F9 E7 
144f0     E9 FE 04 F5 | 	byte	$ff, $00, $ea, $e7, $fd, $02, $f0, $e4, $f6, $03, $f9, $e7, $e9, $fe, $04, $f5
144f4     E5 EA FD 04 
144f8     F7 E7 E6 F6 
144fc     03 00 F0 E4 
14500     E7 F8 02 01 | 	byte	$e5, $ea, $fd, $04, $f7, $e7, $e6, $f6, $03, $00, $f0, $e4, $e7, $f8, $02, $01
14504     F4 E7 E5 F0 
14508     FE 04 00 F2 
1450c     E7 E4 EC FA 
14510     03 03 FC F0 | 	byte	$f4, $e7, $e5, $f0, $fe, $04, $00, $f2, $e7, $e4, $ec, $fa, $03, $03, $fc, $f0
14514     E7 E4 EA F5 
14518     FF 03 02 FB 
1451c     F1 E8 E4 E6 
14520     ED F7 FF 03 | 	byte	$e7, $e4, $ea, $f5, $ff, $03, $02, $fb, $f1, $e8, $e4, $e6, $ed, $f7, $ff, $03
14524     03 00 F8 F1 
14528     E9 E5 E4 E8 
1452c     EF F7 FE 01 
14530     03 03 00 FA | 	byte	$03, $00, $f8, $f1, $e9, $e5, $e4, $e8, $ef, $f7, $fe, $01, $03, $03, $00, $fa
14534     F4 EE E8 E5 
14538     E4 E6 E9 EE 
1453c     F4 FA FF 01 
14540     03 03 01 FF | 	byte	$f4, $ee, $e8, $e5, $e4, $e6, $e9, $ee, $f4, $fa, $ff, $01, $03, $03, $01, $ff
14544     FC F8 F3 EE 
14548     EB E8 E6 E5 
1454c     E6 E7 E9 ED 
14550     F0 F4 F8 FB | 	byte	$fc, $f8, $f3, $ee, $eb, $e8, $e6, $e5, $e6, $e7, $e9, $ed, $f0, $f4, $f8, $fb
14554     FE 00 01 01 
14558     01 01 00 FF 
1455c     FD FA F8 F5 
14560     F2 F0 EE EC | 	byte	$fe, $00, $01, $01, $01, $01, $00, $ff, $fd, $fa, $f8, $f5, $f2, $f0, $ee, $ec
14564     EA E9 E8 E7 
14568     E7 E8 E9 EA 
1456c     EC ED EF F1 
14570     F3 F5 F7 F8 | 	byte	$ea, $e9, $e8, $e7, $e7, $e8, $e9, $ea, $ec, $ed, $ef, $f1, $f3, $f5, $f7, $f8
14574     FA FC FD FE 
14578     FF FF 00 00 
1457c     FF FF FF FF 
14580     FF FE FC FC | 	byte	$fa, $fc, $fd, $fe, $ff, $ff, $00, $00, $ff, $ff, $ff, $ff, $ff, $fe, $fc, $fc
14584     FA F9 F8 F7 
14588     F6 F4 F3 F2 
1458c     F1 F0 F0 EE 
14590     EE ED EC EC | 	byte	$fa, $f9, $f8, $f7, $f6, $f4, $f3, $f2, $f1, $f0, $f0, $ee, $ee, $ed, $ec, $ec
14594     EC EB EB EB 
14598     EB EB EB EC 
1459c     EC EC ED EE 
145a0     EF F0 F0 F1 | 	byte	$ec, $eb, $eb, $eb, $eb, $eb, $eb, $ec, $ec, $ec, $ed, $ee, $ef, $f0, $f0, $f1
145a4     F3 F4 F6 F7 
145a8     F8 FA FB FC 
145ac     FE FF FF 00 
145b0     00 00 00 00 | 	byte	$f3, $f4, $f6, $f7, $f8, $fa, $fb, $fc, $fe, $ff, $ff, $00, $00, $00, $00, $00
145b4     00 00 00 FF 
145b8     FD FC FA F8 
145bc     F6 F3 F1 EF 
145c0     EC EB E9 E7 | 	byte	$00, $00, $00, $ff, $fd, $fc, $fa, $f8, $f6, $f3, $f1, $ef, $ec, $eb, $e9, $e7
145c4     E7 E6 E6 E6 
145c8     E7 E8 EB ED 
145cc     F0 F3 F7 FB 
145d0     FE 00 01 03 | 	byte	$e7, $e6, $e6, $e6, $e7, $e8, $eb, $ed, $f0, $f3, $f7, $fb, $fe, $00, $01, $03
145d4     03 03 01 00 
145d8     FE F9 F5 F1 
145dc     ED E9 E6 E4 
145e0     E4 E6 E8 ED | 	byte	$03, $03, $01, $00, $fe, $f9, $f5, $f1, $ed, $e9, $e6, $e4, $e4, $e6, $e8, $ed
145e4     F1 F8 FD 00 
145e8     02 03 03 00 
145ec     FC F6 F0 EA 
145f0     E6 E4 E5 E9 | 	byte	$f1, $f8, $fd, $00, $02, $03, $03, $00, $fc, $f6, $f0, $ea, $e6, $e4, $e5, $e9
145f4     EF F7 FE 01 
145f8     04 02 FE F8 
145fc     EF E8 E4 E5 
14600     EA F3 FC 01 | 	byte	$ef, $f7, $fe, $01, $04, $02, $fe, $f8, $ef, $e8, $e4, $e5, $ea, $f3, $fc, $01
14604     04 01 FA F0 
14608     E7 E4 E7 F1 
1460c     FC 03 03 FE 
14610     F3 E8 E4 E9 | 	byte	$04, $01, $fa, $f0, $e7, $e4, $e7, $f1, $fc, $03, $03, $fe, $f3, $e8, $e4, $e9
14614     F5 00 04 FF 
14618     F3 E7 E4 EE 
1461c     FB 03 00 F4 
14620     E7 E6 F0 FF | 	byte	$f5, $00, $04, $ff, $f3, $e7, $e4, $ee, $fb, $03, $00, $f4, $e7, $e6, $f0, $ff
14624     03 F9 EA E4 
14628     EF 00 03 F6 
1462c     E7 E7 F8 03 
14630     FC EA E5 F6 | 	byte	$03, $f9, $ea, $e4, $ef, $00, $03, $f6, $e7, $e7, $f8, $03, $fc, $ea, $e5, $f6
14634     03 FD E9 E6 
14638     FA 03 F5 E5 
1463c     EF 02 FC E8 
14640     EA 00 FF E9 | 	byte	$03, $fd, $e9, $e6, $fa, $03, $f5, $e5, $ef, $02, $fc, $e8, $ea, $00, $ff, $e9
14644     EA 00 FE E7 
14648     EE 02 F9 E6 
1464c     F6 02 EC E9 
14650     01 F8 E5 FA | 	byte	$ea, $00, $fe, $e7, $ee, $02, $f9, $e6, $f6, $02, $ec, $e9, $01, $f8, $e5, $fa
14654     FF E7 F2 02 
14658     EC EC 03 F3 
1465c     E5 FD FF E7 
14660     EF 02 F5 E5 | 	byte	$ff, $e7, $f2, $02, $ec, $ec, $03, $f3, $e5, $fd, $ff, $e7, $ef, $02, $f5, $e5
14664     F7 02 EF E5 
14668     FA 03 F0 E5 
1466c     F8 03 F3 E5 
14670     F1 02 FD E9 | 	byte	$f7, $02, $ef, $e5, $fa, $03, $f0, $e5, $f8, $03, $f3, $e5, $f1, $02, $fd, $e9
14674     E6 FA 03 F8 
14678     E7 E8 FA 03 
1467c     FB E9 E6 F4 
14680     02 00 F1 E6 | 	byte	$e6, $fa, $03, $f8, $e7, $e8, $fa, $03, $fb, $e9, $e6, $f4, $02, $00, $f1, $e6
14684     E8 F7 02 01 
14688     F4 E7 E5 F1 
1468c     FE 03 FE F1 
14690     E6 E5 EF FC | 	byte	$e8, $f7, $02, $01, $f4, $e7, $e5, $f1, $fe, $03, $fe, $f1, $e6, $e5, $ef, $fc
14694     03 01 FA ED 
14698     E6 E5 ED F8 
1469c     00 03 00 F7 
146a0     EE E6 E4 E9 | 	byte	$03, $01, $fa, $ed, $e6, $e5, $ed, $f8, $00, $03, $00, $f7, $ee, $e6, $e4, $e9
146a4     F2 FC 01 03 
146a8     00 FC F3 EB 
146ac     E6 E4 E7 EE 
146b0     F6 FD 01 03 | 	byte	$f2, $fc, $01, $03, $00, $fc, $f3, $eb, $e6, $e4, $e7, $ee, $f6, $fd, $01, $03
146b4     02 FF F9 F3 
146b8     EC E8 E5 E5 
146bc     E7 EB F0 F7 
146c0     FC 00 02 03 | 	byte	$02, $ff, $f9, $f3, $ec, $e8, $e5, $e5, $e7, $eb, $f0, $f7, $fc, $00, $02, $03
146c4     02 00 FD F8 
146c8     F3 EF EB E8 
146cc     E6 E6 E7 E8 
146d0     EB EE F2 F6 | 	byte	$02, $00, $fd, $f8, $f3, $ef, $eb, $e8, $e6, $e6, $e7, $e8, $eb, $ee, $f2, $f6
146d4     F9 FD FF 00 
146d8     01 01 01 00 
146dc     FF FC FA F7 
146e0     F4 F1 EF ED | 	byte	$f9, $fd, $ff, $00, $01, $01, $01, $00, $ff, $fc, $fa, $f7, $f4, $f1, $ef, $ed
146e4     EB E9 E8 E7 
146e8     E7 E8 E8 E9 
146ec     EC ED EF F1 
146f0     F3 F5 F8 F9 | 	byte	$eb, $e9, $e8, $e7, $e7, $e8, $e8, $e9, $ec, $ed, $ef, $f1, $f3, $f5, $f8, $f9
146f4     FB FD FE FF 
146f8     00 FF FF 00 
146fc     00 00 FF FE 
14700     FD FC FB F9 | 	byte	$fb, $fd, $fe, $ff, $00, $ff, $ff, $00, $00, $00, $ff, $fe, $fd, $fc, $fb, $f9
14704     F8 F7 F6 F4 
14708     F3 F1 F1 F0 
1470c     EF EE ED EC 
14710     EC EC EC EB | 	byte	$f8, $f7, $f6, $f4, $f3, $f1, $f1, $f0, $ef, $ee, $ed, $ec, $ec, $ec, $ec, $eb
14714     EC EC EC EC 
14718     EC          | 	byte	$ec[5]
14719     ED ED EE EE 
1471d     EF F0 F0 F1 
14721     F2 F3 F4 F5 
14725     F6 F8 F8 F9 | 	byte	$ed, $ed, $ee, $ee, $ef, $f0, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f8, $f8, $f9
14729     FB FC FD FE 
1472d     FF FF FF FF 
14731     00 FF FF 00 
14735     FF FF FE FD | 	byte	$fb, $fc, $fd, $fe, $ff, $ff, $ff, $ff, $00, $ff, $ff, $00, $ff, $ff, $fe, $fd
14739     FC FB F9 F8 
1473d     F6 F4 F1 F0 
14741     EE EC EB E9 
14745     E8 E7 E7 E7 | 	byte	$fc, $fb, $f9, $f8, $f6, $f4, $f1, $f0, $ee, $ec, $eb, $e9, $e8, $e7, $e7, $e7
14749     E7 E7 E8 EA 
1474d     EC EF F1 F4 
14751     F7 FA FD FF 
14755     00 01 02 02 | 	byte	$e7, $e7, $e8, $ea, $ec, $ef, $f1, $f4, $f7, $fa, $fd, $ff, $00, $01, $02, $02
14759     02 00 00 FD 
1475d     F9 F6 F1 EE 
14761     EA E7 E6 E5 
14765     E6 E7 EA EF | 	byte	$02, $00, $00, $fd, $f9, $f6, $f1, $ee, $ea, $e7, $e6, $e5, $e6, $e7, $ea, $ef
14769     F3 F7 FC 00 
1476d     02 03 03 00 
14771     FD F8 F2 EC 
14775     E8 E5 E5 E7 | 	byte	$f3, $f7, $fc, $00, $02, $03, $03, $00, $fd, $f8, $f2, $ec, $e8, $e5, $e5, $e7
14779     EC F2 F9 FF 
1477d     02 03 02 FE 
14781     F7 EF E8 E5 
14785     E5 EA F1 FA | 	byte	$ec, $f2, $f9, $ff, $02, $03, $02, $fe, $f7, $ef, $e8, $e5, $e5, $ea, $f1, $fa
14789     00 03 01 FC 
1478d     F3 EA E5 E6 
14791     EB F6 FF 03 
14795     01 F9 EF E7 | 	byte	$00, $03, $01, $fc, $f3, $ea, $e5, $e6, $eb, $f6, $ff, $03, $01, $f9, $ef, $e7
14799     E5 ED F8 01 
1479d     03 FD F0 E6 
147a1     E6 EF FD 03 
147a5     00 F3 E8 E5 | 	byte	$e5, $ed, $f8, $01, $03, $fd, $f0, $e6, $e6, $ef, $fd, $03, $00, $f3, $e8, $e5
147a9     F1 FF 03 FB 
147ad     EB E4 EE FD 
147b1     03 FA E9 E6 
147b5     F3 01 00 F0 | 	byte	$f1, $ff, $03, $fb, $eb, $e4, $ee, $fd, $03, $fa, $e9, $e6, $f3, $01, $00, $f0
147b9     E5 EF 00 01 
147bd     EF E5 F2 02 
147c1     FD E9 E8 FC 
147c5     02 F1 E5 F6 | 	byte	$e5, $ef, $00, $01, $ef, $e5, $f2, $02, $fd, $e9, $e8, $fc, $02, $f1, $e5, $f6
147c9     03 F4 E6 F4 
147cd     02 F4 E5 F7 
147d1     02 EE E8 FE 
147d5     FE E8 F1 03 | 	byte	$03, $f4, $e6, $f4, $02, $f4, $e5, $f7, $02, $ee, $e8, $fe, $fe, $e8, $f1, $03
147d9     F0 E7 FF FA 
147dd     E6 F8 01 E9 
147e1     EE 02 F4 E5 
147e5     FA 01 EB E9 | 	byte	$f0, $e7, $ff, $fa, $e6, $f8, $01, $e9, $ee, $02, $f4, $e5, $fa, $01, $eb, $e9
147e9     FF FE E8 EC 
147ed     00 FE E8 EB 
147f1     FF 01 ED E6 
147f5     F9 03 F6 E6 | 	byte	$ff, $fe, $e8, $ec, $00, $fe, $e8, $eb, $ff, $01, $ed, $e6, $f9, $03, $f6, $e6
147f9     ED FF 01 F1 
147fd     E5 EE FF 01 
14801     F4 E6 E9 FB 
14805     03 FD ED E5 | 	byte	$ed, $ff, $01, $f1, $e5, $ee, $ff, $01, $f4, $e6, $e9, $fb, $03, $fd, $ed, $e5
14809     ED FD 03 FD 
1480d     EF E6 E8 F6 
14811     01 02 F9 EC 
14815     E5 E8 F4 FE | 	byte	$ed, $fd, $03, $fd, $ef, $e6, $e8, $f6, $01, $02, $f9, $ec, $e5, $e8, $f4, $fe
14819     03 00 F5 EA 
1481d     E5 E8 F2 FD 
14821     02 02 FC F2 
14825     E9 E5 E7 EE | 	byte	$03, $00, $f5, $ea, $e5, $e8, $f2, $fd, $02, $02, $fc, $f2, $e9, $e5, $e7, $ee
14829     F7 FF 03 02 
1482d     FF F7 EF E8 
14831     E5 E6 EB F2 
14835     F9 00 02 02 | 	byte	$f7, $ff, $03, $02, $ff, $f7, $ef, $e8, $e5, $e6, $eb, $f2, $f9, $00, $02, $02
14839     00 FC F5 EF 
1483d     E9 E6 E5 E7 
14841     EA EF F5 FB 
14845     FF 01 02 01 | 	byte	$00, $fc, $f5, $ef, $e9, $e6, $e5, $e7, $ea, $ef, $f5, $fb, $ff, $01, $02, $01
14849     00 FD F9 F4 
1484d     F0 EC E8 E7 
14851     E6 E7 E8 EB 
14855     EE F2 F6 F9 | 	byte	$00, $fd, $f9, $f4, $f0, $ec, $e8, $e7, $e6, $e7, $e8, $eb, $ee, $f2, $f6, $f9
14859     FD FF 00 01 
1485d     01 00 00 FF 
14861     FC F9 F7 F3 
14865     F1 EF EC EB | 	byte	$fd, $ff, $00, $01, $01, $00, $00, $ff, $fc, $f9, $f7, $f3, $f1, $ef, $ec, $eb
14869     E9 E8 E7 E8 
1486d     E8 E9 EB EC 
14871     EE F0 F2 F4 
14875     F6 F8 FA FC | 	byte	$e9, $e8, $e7, $e8, $e8, $e9, $eb, $ec, $ee, $f0, $f2, $f4, $f6, $f8, $fa, $fc
14879     FD FE FF FF 
1487d     00 FF 00 FF 
14881     FF FE FE FC 
14885     FB FA F8 F8 | 	byte	$fd, $fe, $ff, $ff, $00, $ff, $00, $ff, $ff, $fe, $fe, $fc, $fb, $fa, $f8, $f8
14889     F6 F4 F3 F2 
1488d     F1 F0 EF EE 
14891     EE ED EC EC 
14895     EC EC EC EC | 	byte	$f6, $f4, $f3, $f2, $f1, $f0, $ef, $ee, $ee, $ed, $ec, $ec, $ec, $ec, $ec, $ec
14899     EC EC EC ED 
1489d     EE EE EF F0 
148a1     F0 F0 F1 F2 
148a5     F3 F4 F5 F6 | 	byte	$ec, $ec, $ec, $ed, $ee, $ee, $ef, $f0, $f0, $f0, $f1, $f2, $f3, $f4, $f5, $f6
148a9     F7 F8 F8 F9 
148ad     FB FC FC FD 
148b1     FE FF FF FF 
148b5     FF FF FF FF | 	byte	$f7, $f8, $f8, $f9, $fb, $fc, $fc, $fd, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $ff
148b9     FF FF FE FD 
148bd     FC FB F9 F8 
148c1     F7 F5 F3 F1 
148c5     F0 EF ED EC | 	byte	$ff, $ff, $fe, $fd, $fc, $fb, $f9, $f8, $f7, $f5, $f3, $f1, $f0, $ef, $ed, $ec
148c9     EA E9 E8 E7 
148cd     E7 E7 E7 E8 
148d1     E9 EB ED F0 
148d5     F2 F4 F8 FA | 	byte	$ea, $e9, $e8, $e7, $e7, $e7, $e7, $e8, $e9, $eb, $ed, $f0, $f2, $f4, $f8, $fa
148d9     FC FF 00 01 
148dd     01 02 01 00 
148e1     FF FD FA F7 
148e5     F3 F0 EC E9 | 	byte	$fc, $ff, $00, $01, $01, $02, $01, $00, $ff, $fd, $fa, $f7, $f3, $f0, $ec, $e9
148e9     E7 E6 E6 E7 
148ed     E8 EC F0 F4 
148f1     F8 FD 00 02 
148f5     03 01 00 FC | 	byte	$e7, $e6, $e6, $e7, $e8, $ec, $f0, $f4, $f8, $fd, $00, $02, $03, $01, $00, $fc
148f9     F7 F1 EC E8 
148fd     E5 E5 E7 EB 
14901     F1 F8 FE 01 
14905     03 01 FF F8 | 	byte	$f7, $f1, $ec, $e8, $e5, $e5, $e7, $eb, $f1, $f8, $fe, $01, $03, $01, $ff, $f8
14909     F0 EA E6 E5 
1490d     E9 F0 F8 FF 
14911     03 02 FF F6 
14915     ED E7 E5 E9 | 	byte	$f0, $ea, $e6, $e5, $e9, $f0, $f8, $ff, $03, $02, $ff, $f6, $ed, $e7, $e5, $e9
14919     F2 FC 01 02 
1491d     FE F3 E9 E5 
14921     E8 F2 FE 03 
14925     00 F6 EC E5 | 	byte	$f2, $fc, $01, $02, $fe, $f3, $e9, $e5, $e8, $f2, $fe, $03, $00, $f6, $ec, $e5
14929     E8 F5 FF 03 
1492d     FB EE E6 E9 
14931     F6 01 01 F6 
14935     E8 E6 F3 00 | 	byte	$e8, $f5, $ff, $03, $fb, $ee, $e6, $e9, $f6, $01, $01, $f6, $e8, $e6, $f3, $00
14939     01 F5 E8 E8 
1493d     F8 02 FD EC 
14941     E6 F4 01 FE 
14945     EC E6 F6 02 | 	byte	$01, $f5, $e8, $e8, $f8, $02, $fd, $ec, $e6, $f4, $01, $fe, $ec, $e6, $f6, $02
14949     FA E8 EA FE 
1494d     01 EF E6 F8 
14951     02 F3 E6 F6 
14955     02 F3 E6 F8 | 	byte	$fa, $e8, $ea, $fe, $01, $ef, $e6, $f8, $02, $f3, $e6, $f6, $02, $f3, $e6, $f8
14959     02 EF E8 FE 
1495d     FE E8 F0 02 
14961     F2 E6 FE FC 
14965     E7 F4 02 F0 | 	byte	$02, $ef, $e8, $fe, $fe, $e8, $f0, $02, $f2, $e6, $fe, $fc, $e7, $f4, $02, $f0
14969     E8 FD FF E9 
1496d     ED 00 FB E7 
14971     EF 01 FA E8 
14975     ED FF FE EA | 	byte	$e8, $fd, $ff, $e9, $ed, $00, $fb, $e7, $ef, $01, $fa, $e8, $ed, $ff, $fe, $ea
14979     E8 FA 02 F4 
1497d     E6 EE FF 00 
14981     F1 E6 EF FF 
14985     01 F3 E7 EA | 	byte	$e8, $fa, $02, $f4, $e6, $ee, $ff, $00, $f1, $e6, $ef, $ff, $01, $f3, $e7, $ea
14989     FA 02 FD EE 
1498d     E5 ED FC 03 
14991     FE EF E6 E8 
14995     F5 00 02 FA | 	byte	$fa, $02, $fd, $ee, $e5, $ed, $fc, $03, $fe, $ef, $e6, $e8, $f5, $00, $02, $fa
14999     ED E6 E7 F2 
1499d     FE 02 00 F5 
149a1     EB E6 E7 F0 
149a5     FB 01 02 FE | 	byte	$ed, $e6, $e7, $f2, $fe, $02, $00, $f5, $eb, $e6, $e7, $f0, $fb, $01, $02, $fe
149a9     F4 EB E6 E7 
149ad     ED F5 FD 01 
149b1     02 FF F8 F0 
149b5     E9 E6 E6 EA | 	byte	$f4, $eb, $e6, $e7, $ed, $f5, $fd, $01, $02, $ff, $f8, $f0, $e9, $e6, $e6, $ea
149b9     F1 F8 FF 01 
149bd     02 00 FC F6 
149c1     F1 EB E7 E6 
149c5     E7 E9 EE F3 | 	byte	$f1, $f8, $ff, $01, $02, $00, $fc, $f6, $f1, $eb, $e7, $e6, $e7, $e9, $ee, $f3
149c9     F9 FE 00 01 
149cd     01 00 FE F9 
149d1     F5 F0 EC EA 
149d5     E7 E7 E7 E8 | 	byte	$f9, $fe, $00, $01, $01, $00, $fe, $f9, $f5, $f0, $ec, $ea, $e7, $e7, $e7, $e8
149d9     EA ED F0 F4 
149dd     F8 FC FE 00 
149e1     00 01 00 00 
149e5     FF FD FA F8 | 	byte	$ea, $ed, $f0, $f4, $f8, $fc, $fe, $00, $00, $01, $00, $00, $ff, $fd, $fa, $f8
149e9     F6 F3 F0 EE 
149ed     EC EA E9 E8 
149f1     E8 E8 E9 EA 
149f5     EC ED EF F1 | 	byte	$f6, $f3, $f0, $ee, $ec, $ea, $e9, $e8, $e8, $e8, $e9, $ea, $ec, $ed, $ef, $f1
149f9     F3 F5 F6 F8 
149fd     FA FC FD FE 
14a01     FF FF FF 00 
14a05     FF FF FF FE | 	byte	$f3, $f5, $f6, $f8, $fa, $fc, $fd, $fe, $ff, $ff, $ff, $00, $ff, $ff, $ff, $fe
14a09     FD FC FB F9 
14a0d     F8 F8 F6 F5 
14a11     F3 F2 F1 F0 
14a15     F0 EF EE ED | 	byte	$fd, $fc, $fb, $f9, $f8, $f8, $f6, $f5, $f3, $f2, $f1, $f0, $f0, $ef, $ee, $ed
14a19     ED EC EC EC 
14a1d     EC EC EC EC 
14a21     EC ED EE EE 
14a25     EF EF F0 F0 | 	byte	$ed, $ec, $ec, $ec, $ec, $ec, $ec, $ec, $ec, $ed, $ee, $ee, $ef, $ef, $f0, $f0
14a29     F1 F1 F2 F3 
14a2d     F4 F5 F6 F7 
14a31     F8 F8 F9 FA 
14a35     FB FC FC FD | 	byte	$f1, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f8, $f9, $fa, $fb, $fc, $fc, $fd
14a39     FE FE FF FF 
14a3d     FF FF FF FF 
14a41     FE FE FD FC 
14a45     FB FA F8 F8 | 	byte	$fe, $fe, $ff, $ff, $ff, $ff, $ff, $ff, $fe, $fe, $fd, $fc, $fb, $fa, $f8, $f8
14a49     F6 F4 F3 F1 
14a4d     F0 EE EC EB 
14a51     EA E9 E8 E7 
14a55     E7 E8 E8 E9 | 	byte	$f6, $f4, $f3, $f1, $f0, $ee, $ec, $eb, $ea, $e9, $e8, $e7, $e7, $e8, $e8, $e9
14a59     EB EC EE F0 
14a5d     F2 F5 F8 FA 
14a61     FD FF 00 01 
14a65     01 01 00 00 | 	byte	$eb, $ec, $ee, $f0, $f2, $f5, $f8, $fa, $fd, $ff, $00, $01, $01, $01, $00, $00
14a69     FF FC F9 F6 
14a6d     F2 EF EC E9 
14a71     E7 E6 E6 E7 
14a75     E9 EC F0 F5 | 	byte	$ff, $fc, $f9, $f6, $f2, $ef, $ec, $e9, $e7, $e6, $e6, $e7, $e9, $ec, $f0, $f5
14a79     F9 FE 00 01 
14a7d     02 01 FF FB 
14a81     F6 F1 EC E8 
14a85     E6 E6 E8 EC | 	byte	$f9, $fe, $00, $01, $02, $01, $ff, $fb, $f6, $f1, $ec, $e8, $e6, $e6, $e8, $ec
14a89     F2 F8 FF 01 
14a8d     02 00 FD F7 
14a91     F0 E9 E6 E6 
14a95     EA F0 F8 FF | 	byte	$f2, $f8, $ff, $01, $02, $00, $fd, $f7, $f0, $e9, $e6, $e6, $ea, $f0, $f8, $ff
14a99     02 01 FD F5 
14a9d     ED E7 E6 EA 
14aa1     F3 FC 01 01 
14aa5     FC F2 E9 E5 | 	byte	$02, $01, $fd, $f5, $ed, $e7, $e6, $ea, $f3, $fc, $01, $01, $fc, $f2, $e9, $e5
14aa9     E8 F2 FE 02 
14aad     00 F6 EB E6 
14ab1     EA F5 00 02 
14ab5     FB EE E6 E9 | 	byte	$e8, $f2, $fe, $02, $00, $f6, $eb, $e6, $ea, $f5, $00, $02, $fb, $ee, $e6, $e9
14ab9     F7 01 00 F5 
14abd     E9 E6 F3 FF 
14ac1     01 F4 E8 E8 
14ac5     F8 01 FC EC | 	byte	$f7, $01, $00, $f5, $e9, $e6, $f3, $ff, $01, $f4, $e8, $e8, $f8, $01, $fc, $ec
14ac9     E6 F3 01 FE 
14acd     ED E6 F4 01 
14ad1     FB E9 E9 FC 
14ad5     01 F2 E6 F5 | 	byte	$e6, $f3, $01, $fe, $ed, $e6, $f4, $01, $fb, $e9, $e9, $fc, $01, $f2, $e6, $f5
14ad9     02 F6 E6 F2 
14add     01 F7 E6 F3 
14ae1     02 F2 E6 FA 
14ae5     01 EC EC 00 | 	byte	$02, $f6, $e6, $f2, $01, $f7, $e6, $f3, $02, $f2, $e6, $fa, $01, $ec, $ec, $00
14ae9     F8 E7 F7 01 
14aed     ED EA FF FB 
14af1     E8 EF 01 F8 
14af5     E6 F0 00 F9 | 	byte	$f8, $e7, $f7, $01, $ed, $ea, $ff, $fb, $e8, $ef, $01, $f8, $e6, $f0, $00, $f9
14af9     E8 EE 00 FE 
14afd     EB E8 FB 02 
14b01     F4 E6 EE FF 
14b05     00 F1 E6 EF | 	byte	$e8, $ee, $00, $fe, $eb, $e8, $fb, $02, $f4, $e6, $ee, $ff, $00, $f1, $e6, $ef
14b09     FE 01 F4 E7 
14b0d     E9 F9 01 FD 
14b11     EE E6 EC FA 
14b15     02 FE F1 E7 | 	byte	$fe, $01, $f4, $e7, $e9, $f9, $01, $fd, $ee, $e6, $ec, $fa, $02, $fe, $f1, $e7
14b19     E7 F3 FF 02 
14b1d     FC F0 E7 E7 
14b21     F1 FD 01 00 
14b25     F7 ED E6 E7 | 	byte	$e7, $f3, $ff, $02, $fc, $f0, $e7, $e7, $f1, $fd, $01, $00, $f7, $ed, $e6, $e7
14b29     EF F9 00 02 
14b2d     FF F6 EC E7 
14b31     E6 EA F3 FB 
14b35     00 02 00 F9 | 	byte	$ef, $f9, $00, $02, $ff, $f6, $ec, $e7, $e6, $ea, $f3, $fb, $00, $02, $00, $f9
14b39     F1 EB E7 E6 
14b3d     E9 EF F6 FC 
14b41     00 01 01 FF 
14b45     F9 F3 ED E9 | 	byte	$f1, $eb, $e7, $e6, $e9, $ef, $f6, $fc, $00, $01, $01, $ff, $f9, $f3, $ed, $e9
14b49     E7 E7 E8 ED 
14b4d     F1 F7 FC FF 
14b51     01 01 00 FF 
14b55     FC F7 F3 F0 | 	byte	$e7, $e7, $e8, $ed, $f1, $f7, $fc, $ff, $01, $01, $00, $ff, $fc, $f7, $f3, $f0
14b59     EC E9 E7 E7 
14b5d     E7 E9 EC EF 
14b61     F2 F6 F9 FC 
14b65     FF 00 00 00 | 	byte	$ec, $e9, $e7, $e7, $e7, $e9, $ec, $ef, $f2, $f6, $f9, $fc, $ff, $00, $00, $00
14b69     00 00 FE FC 
14b6d     F9 F8 F4 F2 
14b71     F0 EE EC EA 
14b75     E9 E8 E8 E9 | 	byte	$00, $00, $fe, $fc, $f9, $f8, $f4, $f2, $f0, $ee, $ec, $ea, $e9, $e8, $e8, $e9
14b79     E9 EB EC EE 
14b7d     EF F1 F3 F4 
14b81     F7 F8 FA FB 
14b85     FC FE FF FF | 	byte	$e9, $eb, $ec, $ee, $ef, $f1, $f3, $f4, $f7, $f8, $fa, $fb, $fc, $fe, $ff, $ff
14b89     FF FF FF FF 
14b8d     FF          | 	byte	$ff[5]
14b8e     FE FD FC FB 
14b92     FA F9 00 00 
14b96     00 00 00 00 
14b9a     00 00 00 00 | 	byte	$fe, $fd, $fc, $fb, $fa, $f9, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
14b9e     00 00 00 00 
      ...             
14bba     00 00 00 00 
14bbe     00          | 	byte	$00[33]
14bbf     F4 0E 06 E6 
14bc3     04 32 EC 12 
14bc7     D6 1A E0 02 
14bcb     00 04 DC EE | 	byte	$f4, $0e, $06, $e6, $04, $32, $ec, $12, $d6, $1a, $e0, $02, $00, $04, $dc, $ee
14bcf     EC 00 C8 10 
14bd3     C0 0E 00 24 
14bd7     18 D4 3E 1A 
14bdb     E6 30 04 08 | 	byte	$ec, $00, $c8, $10, $c0, $0e, $00, $24, $18, $d4, $3e, $1a, $e6, $30, $04, $08
14bdf     F8 0E E4 DC 
14be3     F4 DC 0E 0E 
14be7     00 1A 2A D8 
14beb     C8 FE 12 C8 | 	byte	$f8, $0e, $e4, $dc, $f4, $dc, $0e, $0e, $00, $1a, $2a, $d8, $c8, $fe, $12, $c8
14bef     FA 38 04 0E 
14bf3     CE 00 04 E2 
14bf7     00 14 EC F4 
14bfb     EC 14 40 DC | 	byte	$fa, $38, $04, $0e, $ce, $00, $04, $e2, $00, $14, $ec, $f4, $ec, $14, $40, $dc
14bff     28 3E 08 F4 
14c03     00 EE E8 D0 
14c07     D8 1A 14 00 
14c0b     F4 C4 1A 0E | 	byte	$28, $3e, $08, $f4, $00, $ee, $e8, $d0, $d8, $1a, $14, $00, $f4, $c4, $1a, $0e
14c0f     10 00 D4 12 
14c13     F4 D4 CC 08 
14c17     1E 10 08 2A 
14c1b     32 02 1A F4 | 	byte	$10, $00, $d4, $12, $f4, $d4, $cc, $08, $1e, $10, $08, $2a, $32, $02, $1a, $f4
14c1f     00 02 00 C2 
14c23     E0 0E 14 0E 
14c27     0C 00 E4 F8 
14c2b     06 1C FA E6 | 	byte	$00, $02, $00, $c2, $e0, $0e, $14, $0e, $0c, $00, $e4, $f8, $06, $1c, $fa, $e6
14c2f     CE 04 00 C0 
14c33     C2 D6 08 2A 
14c37     E2 00 44 3E 
14c3b     24 38 14 0C | 	byte	$ce, $04, $00, $c0, $c2, $d6, $08, $2a, $e2, $00, $44, $3e, $24, $38, $14, $0c
14c3f     10 20 D6 EE 
14c43     F4 3E 00 00 
14c47     EC 00 B8 04 
14c4b     00 06 E0 D8 | 	byte	$10, $20, $d6, $ee, $f4, $3e, $00, $00, $ec, $00, $b8, $04, $00, $06, $e0, $d8
14c4f     C0 04 C0 BC 
14c53     98 D6 00 10 
14c57     CE 50 68 54 
14c5b     3E 40 26 2C | 	byte	$c0, $04, $c0, $bc, $98, $d6, $00, $10, $ce, $50, $68, $54, $3e, $40, $26, $2c
14c5f     1E 14 D4 FA 
14c63     0E 40 00 00 
14c67     EE E0 BC F2 
14c6b     FC F4 D4 DA | 	byte	$1e, $14, $d4, $fa, $0e, $40, $00, $00, $ee, $e0, $bc, $f2, $fc, $f4, $d4, $da
14c6f     DC 10 C8 C4 
14c73     B0 D8 02 E8 
14c77     C2 54 5C 48 
14c7b     40 42 28 2C | 	byte	$dc, $10, $c8, $c4, $b0, $d8, $02, $e8, $c2, $54, $5c, $48, $40, $42, $28, $2c
14c7f     26 FA DC F0 
14c83     1A 2A 00 EC 
14c87     F8 CE DC 00 
14c8b     FC E2 CC BE | 	byte	$26, $fa, $dc, $f0, $1a, $2a, $00, $ec, $f8, $ce, $dc, $00, $fc, $e2, $cc, $be
14c8f     FC F0 C8 CA 
14c93     C2 F8 0C E4 
14c97     00 58 56 44 
14c9b     3E 2A 2C 2A | 	byte	$fc, $f0, $c8, $ca, $c2, $f8, $0c, $e4, $00, $58, $56, $44, $3e, $2a, $2c, $2a
14c9f     18 EC E6 FE 
14ca3     36 10 F0 E2 
14ca7     E0 C2 EC 00 
14cab     FA D4 D4 C4 | 	byte	$18, $ec, $e6, $fe, $36, $10, $f0, $e2, $e0, $c2, $ec, $00, $fa, $d4, $d4, $c4
14caf     04 E0 D8 C4 
14cb3     D8 00 02 D6 
14cb7     40 56 56 3C 
14cbb     34 28 28 20 | 	byte	$04, $e0, $d8, $c4, $d8, $00, $02, $d6, $40, $56, $56, $3c, $34, $28, $28, $20
14cbf     12 D8 E4 00 
14cc3     2C 00 E6 E8 
14cc7     DA CA F4 FC 
14ccb     EC D6 D6 E6 | 	byte	$12, $d8, $e4, $00, $2c, $00, $e6, $e8, $da, $ca, $f4, $fc, $ec, $d6, $d6, $e6
14ccf     06 D4 EC C0 
14cd3     EC 00 FC DC 
14cd7     50 56 56 36 
14cdb     2C 1C 1E 0E | 	byte	$06, $d4, $ec, $c0, $ec, $00, $fc, $dc, $50, $56, $56, $36, $2c, $1c, $1e, $0e
14cdf     00 D0 EC 12 
14ce3     20 F0 F8 EC 
14ce7     D6 D8 FC F4 
14ceb     E2 D6 D6 EE | 	byte	$00, $d0, $ec, $12, $20, $f0, $f8, $ec, $d6, $d8, $fc, $f4, $e2, $d6, $d6, $ee
14cef     F4 D6 EC C8 
14cf3     FC 00 F0 1E 
14cf7     4C 56 4A 2A 
14cfb     2A 2A 1C 12 | 	byte	$f4, $d6, $ec, $c8, $fc, $00, $f0, $1e, $4c, $56, $4a, $2a, $2a, $2a, $1c, $12
14cff     E4 D6 E8 14 
14d03     10 EE E8 EC 
14d07     D6 E6 FA E8 
14d0b     E2 D6 D8 FE | 	byte	$e4, $d6, $e8, $14, $10, $ee, $e8, $ec, $d6, $e6, $fa, $e8, $e2, $d6, $d8, $fe
14d0f     08 FA E0 E2 
14d13     F8 00 E2 44 
14d17     56 50 3C 2A 
14d1b     24 1E 12 10 | 	byte	$08, $fa, $e0, $e2, $f8, $00, $e2, $44, $56, $50, $3c, $2a, $24, $1e, $12, $10
14d1f     CE D6 EE 18 
14d23     F0 E8 E0 DC 
14d27     D6 EC FA E6 
14d2b     D8 D8 EE 24 | 	byte	$ce, $d6, $ee, $18, $f0, $e8, $e0, $dc, $d6, $ec, $fa, $e6, $d8, $d8, $ee, $24
14d2f     FC 02 D4 F2 
14d33     FC FE 00 4A 
14d37     56 54 28 2A 
14d3b     1A 14 0E FA | 	byte	$fc, $02, $d4, $f2, $fc, $fe, $00, $4a, $56, $54, $28, $2a, $1a, $14, $0e, $fa
14d3f     C4 DA F8 0E 
14d43     E2 DC DA DC 
14d47     CE F8 E6 EC 
14d4b     D4 12 0C 20 | 	byte	$c4, $da, $f8, $0e, $e2, $dc, $da, $dc, $ce, $f8, $e6, $ec, $d4, $12, $0c, $20
14d4f     00 00 DC F8 
14d53     F8 F8 34 54 
14d57     4E 4C 20 20 
14d5b     18 08 04 E0 | 	byte	$00, $00, $dc, $f8, $f8, $f8, $34, $54, $4e, $4c, $20, $20, $18, $08, $04, $e0
14d5f     C2 D6 00 FA 
14d63     DC D6 D6 D6 
14d67     D0 F0 DC E8 
14d6b     08 12 28 18 | 	byte	$c2, $d6, $00, $fa, $dc, $d6, $d6, $d6, $d0, $f0, $dc, $e8, $08, $12, $28, $18
14d6f     0E F2 EC FA 
14d73     FC F4 3E 50 
14d77     4E 3C 28 1C 
14d7b     10 04 FE C0 | 	byte	$0e, $f2, $ec, $fa, $fc, $f4, $3e, $50, $4e, $3c, $28, $1c, $10, $04, $fe, $c0
14d7f     C4 CE 00 E6 
14d83     D8 CE D8 CC 
14d87     D8 E4 E6 E4 
14d8b     1E 1C 3C 14 | 	byte	$c4, $ce, $00, $e6, $d8, $ce, $d8, $cc, $d8, $e4, $e6, $e4, $1e, $1c, $3c, $14
14d8f     14 F2 FE FA 
14d93     00 1E 40 48 
14d97     4C 2A 1E 12 
14d9b     0C FE EC B4 | 	byte	$14, $f2, $fe, $fa, $00, $1e, $40, $48, $4c, $2a, $1e, $12, $0c, $fe, $ec, $b4
14d9f     BE D6 F4 DA 
14da3     D0 C2 D6 C8 
14da7     DC DA EC 08 
14dab     2C 30 42 1E | 	byte	$be, $d6, $f4, $da, $d0, $c2, $d6, $c8, $dc, $da, $ec, $08, $2c, $30, $42, $1e
14daf     18 FC 02 FC 
14db3     00 40 48 4A 
14db7     4A 1E 1C 06 
14dbb     00 F4 CE AC | 	byte	$18, $fc, $02, $fc, $00, $40, $48, $4a, $4a, $1e, $1c, $06, $00, $f4, $ce, $ac
14dbf     B4 DC E6 D0 
14dc3     C0 C0 CC C0 
14dc7     DA DC E2 2C 
14dcb     3E 4C 48 2C | 	byte	$b4, $dc, $e6, $d0, $c0, $c0, $cc, $c0, $da, $dc, $e2, $2c, $3e, $4c, $48, $2c
14dcf     20 04 02 00 
14dd3     14 3E 4E 48 
14dd7     42 1C 14 0C 
14ddb     FA E8 AC A8 | 	byte	$20, $04, $02, $00, $14, $3e, $4e, $48, $42, $1c, $14, $0c, $fa, $e8, $ac, $a8
14ddf     AA DA D4 C2 
14de3     B2 C0 C0 BC 
14de7     D6 DC D8 44 
14deb     54 62 4E 40 | 	byte	$aa, $da, $d4, $c2, $b2, $c0, $c0, $bc, $d6, $dc, $d8, $44, $54, $62, $4e, $40
14def     26 14 06 08 
14df3     4A 42 54 50 
14df7     32 24 0C 02 
14dfb     EC CE 9A 94 | 	byte	$26, $14, $06, $08, $4a, $42, $54, $50, $32, $24, $0c, $02, $ec, $ce, $9a, $94
14dff     A0 CE C4 B2 
14e03     AA BC BC BC 
14e07     D6 DA D8 56 
14e0b     60 6C 56 4C | 	byte	$a0, $ce, $c4, $b2, $aa, $bc, $bc, $bc, $d6, $da, $d8, $56, $60, $6c, $56, $4c
14e0f     24 18 0C 14 
14e13     4E 4E 4E 48 
14e17     26 1C 06 FE 
14e1b     EC C0 94 94 | 	byte	$24, $18, $0c, $14, $4e, $4e, $4e, $48, $26, $1c, $06, $fe, $ec, $c0, $94, $94
14e1f     B2 CE C4 AA 
14e23     AC BE B8 CA 
14e27     DC D8 EE 58 
14e2b     62 66 4C 42 | 	byte	$b2, $ce, $c4, $aa, $ac, $be, $b8, $ca, $dc, $d8, $ee, $58, $62, $66, $4c, $42
14e2f     20 14 08 38 
14e33     44 54 48 40 
14e37     20 14 04 FA 
14e3b     E6 B0 9A 98 | 	byte	$20, $14, $08, $38, $44, $54, $48, $40, $20, $14, $04, $fa, $e6, $b0, $9a, $98
14e3f     C0 CA BE AA 
14e43     B2 BC BC CE 
14e47     DC D6 0E 58 
14e4b     64 5C 4C 3E | 	byte	$c0, $ca, $be, $aa, $b2, $bc, $bc, $ce, $dc, $d6, $0e, $58, $64, $5c, $4c, $3e
14e4f     1C 14 0C 56 
14e53     4A 54 44 36 
14e57     1E 10 04 F4 
14e5b     DA A4 9C 9E | 	byte	$1c, $14, $0c, $56, $4a, $54, $44, $36, $1e, $10, $04, $f4, $da, $a4, $9c, $9e
14e5f     C4 C8 B4 A6 
14e63     B2 B8 C0 D6 
14e67     E0 D6 30 58 
14e6b     64 58 4A 36 | 	byte	$c4, $c8, $b4, $a6, $b2, $b8, $c0, $d6, $e0, $d6, $30, $58, $64, $58, $4a, $36
14e6f     20 0C 1E 50 
14e73     4E 4C 40 30 
14e77     1E 06 02 F4 
14e7b     CA 9C 9E A4 | 	byte	$20, $0c, $1e, $50, $4e, $4c, $40, $30, $1e, $06, $02, $f4, $ca, $9c, $9e, $a4
14e7f     CA C0 B0 A8 
14e83     B6 B2 C0 DA 
14e87     DA D6 40 5C 
14e8b     5A 50 4A 32 | 	byte	$ca, $c0, $b0, $a8, $b6, $b2, $c0, $da, $da, $d6, $40, $5c, $5a, $50, $4a, $32
14e8f     1C 10 4A 4A 
14e93     4E 44 40 2A 
14e97     14 06 02 EE 
14e9b     C0 A4 A6 AC | 	byte	$1c, $10, $4a, $4a, $4e, $44, $40, $2a, $14, $06, $02, $ee, $c0, $a4, $a6, $ac
14e9f     C8 C0 A6 A8 
14ea3     B4 B6 C0 DC 
14ea7     D4 DC 54 5C 
14eab     5A 4C 42 2A | 	byte	$c8, $c0, $a6, $a8, $b4, $b6, $c0, $dc, $d4, $dc, $54, $5c, $5a, $4c, $42, $2a
14eaf     14 14 64 4A 
14eb3     54 44 3C 28 
14eb7     14 04 FE E4 
14ebb     B4 A6 9C B8 | 	byte	$14, $14, $64, $4a, $54, $44, $3c, $28, $14, $04, $fe, $e4, $b4, $a6, $9c, $b8
14ebf     C2 BC A0 B6 
14ec3     B0 BE C2 E0 
14ec7     D0 EE 58 56 
14ecb     56 4C 42 26 | 	byte	$c2, $bc, $a0, $b6, $b0, $be, $c2, $e0, $d0, $ee, $58, $56, $56, $4c, $42, $26
14ecf     14 30 5C 4E 
14ed3     4A 40 34 20 
14ed7     08 06 FA DA 
14edb     AA A6 9E C0 | 	byte	$14, $30, $5c, $4e, $4a, $40, $34, $20, $08, $06, $fa, $da, $aa, $a6, $9e, $c0
14edf     C0 B6 A6 B6 
14ee3     B0 BE CC D6 
14ee7     D0 08 5A 56 
14eeb     54 4C 40 24 | 	byte	$c0, $b6, $a6, $b6, $b0, $be, $cc, $d6, $d0, $08, $5a, $56, $54, $4c, $40, $24
14eef     14 5A 50 4A 
14ef3     42 3C 32 1C 
14ef7     0C 02 F0 CE 
14efb     AA A6 A0 C2 | 	byte	$14, $5a, $50, $4a, $42, $3c, $32, $1c, $0c, $02, $f0, $ce, $aa, $a6, $a0, $c2
14eff     BC B0 AC BC 
14f03     B6 C0 D6 D4 
14f07     D6 28 56 50 
14f0b     50 4A 36 1E | 	byte	$bc, $b0, $ac, $bc, $b6, $c0, $d6, $d4, $d6, $28, $56, $50, $50, $4a, $36, $1e
14f0f     1E 6C 4C 48 
14f13     40 38 2A 14 
14f17     08 00 EC C4 
14f1b     AA A4 AA C2 | 	byte	$1e, $6c, $4c, $48, $40, $38, $2a, $14, $08, $00, $ec, $c4, $aa, $a4, $aa, $c2
14f1f     B6 AA B2 B2 
14f23     BC C0 D6 CE 
14f27     DA 40 56 50 
14f2b     54 48 32 1A | 	byte	$b6, $aa, $b2, $b2, $bc, $c0, $d6, $ce, $da, $40, $56, $50, $54, $48, $32, $1a
14f2f     4A 60 4A 40 
14f33     40 34 26 10 
14f37     06 00 E4 C0 
14f3b     AA A6 B0 BE | 	byte	$4a, $60, $4a, $40, $40, $34, $26, $10, $06, $00, $e4, $c0, $aa, $a6, $b0, $be
14f3f     AC A6 B8 AC 
14f43     C0 C0 D8 CE 
14f47     E4 50 50 50 
14f4b     54 44 2A 1A | 	byte	$ac, $a6, $b8, $ac, $c0, $c0, $d8, $ce, $e4, $50, $50, $50, $54, $44, $2a, $1a
14f4f     6C 5A 4C 40 
14f53     3E 32 1A 10 
14f57     02 FA DA BC 
14f5b     AA A8 B6 B4 | 	byte	$6c, $5a, $4c, $40, $3e, $32, $1a, $10, $02, $fa, $da, $bc, $aa, $a8, $b6, $b4
14f5f     AC A8 B8 B0 
14f63     C0 C2 D6 CE 
14f67     F2 4E 4E 54 
14f6b     4C 48 28 30 | 	byte	$ac, $a8, $b8, $b0, $c0, $c2, $d6, $ce, $f2, $4e, $4e, $54, $4c, $48, $28, $30
14f6f     6E 56 48 40 
14f73     3C 30 1C 10 
14f77     02 F4 D6 B4 
14f7b     AA AA B0 AC | 	byte	$6e, $56, $48, $40, $3c, $30, $1c, $10, $02, $f4, $d6, $b4, $aa, $aa, $b0, $ac
14f7f     AA AC B2 B0 
14f83     C0 CA D6 D0 
14f87     0E 4E 4A 56 
14f8b     48 42 20 62 | 	byte	$aa, $ac, $b2, $b0, $c0, $ca, $d6, $d0, $0e, $4e, $4a, $56, $48, $42, $20, $62
14f8f     6C 50 42 40 
14f93     34 2A 14 0E 
14f97     00 E8 CC B4 
14f9b     AC A8 B2 AA | 	byte	$6c, $50, $42, $40, $34, $2a, $14, $0e, $00, $e8, $cc, $b4, $ac, $a8, $b2, $aa
14f9f     AA B0 B0 B0 
14fa3     BE CA D6 D4 
14fa7     2A 4E 4A 56 
14fab     48 42 2A 7A | 	byte	$aa, $b0, $b0, $b0, $be, $ca, $d6, $d4, $2a, $4e, $4a, $56, $48, $42, $2a, $7a
14faf     66 4C 42 3E 
14fb3     2C 24 12 08 
14fb7     FE E4 CA AA 
14fbb     AA A6 B2 A6 | 	byte	$66, $4c, $42, $3e, $2c, $24, $12, $08, $fe, $e4, $ca, $aa, $aa, $a6, $b2, $a6
14fbf     AA B2 AC B2 
14fc3     C0 CE D0 D6 
14fc7     40 4C 4E 56 
14fcb     48 38 40 78 | 	byte	$aa, $b2, $ac, $b2, $c0, $ce, $d0, $d6, $40, $4c, $4e, $56, $48, $38, $40, $78
14fcf     60 4A 42 3E 
14fd3     2A 1E 12 02 
14fd7     F4 DC C4 AA 
14fdb     AA A4 AA A6 | 	byte	$60, $4a, $42, $3e, $2a, $1e, $12, $02, $f4, $dc, $c4, $aa, $aa, $a4, $aa, $a6
14fdf     AC AC AA B8 
14fe3     C0 D0 CE DC 
14fe7     40 4C 54 56 
14feb     4A 36 6C 70 | 	byte	$ac, $ac, $aa, $b8, $c0, $d0, $ce, $dc, $40, $4c, $54, $56, $4a, $36, $6c, $70
14fef     5A 44 42 38 
14ff3     24 1A 12 00 
14ff7     EE D6 BE AA 
14ffb     A8 A0 A6 AA | 	byte	$5a, $44, $42, $38, $24, $1a, $12, $00, $ee, $d6, $be, $aa, $a8, $a0, $a6, $aa
14fff     B2 AC AA C0 
15003     BC D4 CE F8 
15007     42 4C 54 4E 
1500b     48 40 7E 6C | 	byte	$b2, $ac, $aa, $c0, $bc, $d4, $ce, $f8, $42, $4c, $54, $4e, $48, $40, $7e, $6c
1500f     56 44 40 30 
15013     1E 18 10 FC 
15017     EC D4 B8 AA 
1501b     A4 9E AA AA | 	byte	$56, $44, $40, $30, $1e, $18, $10, $fc, $ec, $d4, $b8, $aa, $a4, $9e, $aa, $aa
1501f     AC AC AC C0 
15023     C2 D0 CC 0E 
15027     44 4A 56 4C 
1502b     44 60 7C 68 | 	byte	$ac, $ac, $ac, $c0, $c2, $d0, $cc, $0e, $44, $4a, $56, $4c, $44, $60, $7c, $68
1502f     50 42 3E 2A 
15033     20 14 0C F8 
15037     E4 D0 B4 AA 
1503b     9C A6 A8 B0 | 	byte	$50, $42, $3e, $2a, $20, $14, $0c, $f8, $e4, $d0, $b4, $aa, $9c, $a6, $a8, $b0
1503f     B0 B0 B0 C0 
15043     C8 CC CE 30 
15047     4A 4A 56 4E 
1504b     48 7C 74 60 | 	byte	$b0, $b0, $b0, $c0, $c8, $cc, $ce, $30, $4a, $4a, $56, $4e, $48, $7c, $74, $60
1504f     4A 40 36 26 
15053     1E 12 02 F0 
15057     E0 CA B0 A8 
1505b     9A A8 AA B4 | 	byte	$4a, $40, $36, $26, $1e, $12, $02, $f0, $e0, $ca, $b0, $a8, $9a, $a8, $aa, $b4
1505f     B0 AC B6 BE 
15063     CA C8 D6 38 
15067     4A 4E 56 48 
1506b     58 7E 72 58 | 	byte	$b0, $ac, $b6, $be, $ca, $c8, $d6, $38, $4a, $4e, $56, $48, $58, $7e, $72, $58
1506f     42 3C 34 20 
15073     20 10 FC EC 
15077     DC C8 AA A4 
1507b     9A AA AC B0 | 	byte	$42, $3c, $34, $20, $20, $10, $fc, $ec, $dc, $c8, $aa, $a4, $9a, $aa, $ac, $b0
1507f     AC AC BC BC 
15083     CC C4 E6 40 
15087     4A 4E 50 4C 
1508b     74 7C 66 50 | 	byte	$ac, $ac, $bc, $bc, $cc, $c4, $e6, $40, $4a, $4e, $50, $4c, $74, $7c, $66, $50
1508f     3E 3C 2C 24 
15093     1A 08 F8 EC 
15097     DA C0 AA A4 
1509b     9E AA B0 B0 | 	byte	$3e, $3c, $2c, $24, $1a, $08, $f8, $ec, $da, $c0, $aa, $a4, $9e, $aa, $b0, $b0
1509f     B0 AC C0 BC 
150a3     C8 C8 00 40 
150a7     48 56 4C 54 
150ab     7E 72 5C 4A | 	byte	$b0, $ac, $c0, $bc, $c8, $c8, $00, $40, $48, $56, $4c, $54, $7e, $72, $5c, $4a
150af     3E 38 2A 24 
150b3     18 08 F8 E8 
150b7     D6 BE AA 9E 
150bb     A6 A8 B2 B2 | 	byte	$3e, $38, $2a, $24, $18, $08, $f8, $e8, $d6, $be, $aa, $9e, $a6, $a8, $b2, $b2
150bf     B0 B0 BC BC 
150c3     C4 CA 1E 40 
150c7     4A 54 48 6C 
150cb     7E 6C 56 42 | 	byte	$b0, $b0, $bc, $bc, $c4, $ca, $1e, $40, $4a, $54, $48, $6c, $7e, $6c, $56, $42
150cf     3C 3C 26 24 
150d3     14 00 F2 E4 
150d7     D4 B4 AA 9A 
150db     AA AC B6 B4 | 	byte	$3c, $3c, $26, $24, $14, $00, $f2, $e4, $d4, $b4, $aa, $9a, $aa, $ac, $b6, $b4
150df     B0 B2 B6 C2 
150e3     C0 CC 36 44 
150e7     4C 50 48 7E 
150eb     78 68 50 3E | 	byte	$b0, $b2, $b6, $c2, $c0, $cc, $36, $44, $4c, $50, $48, $7e, $78, $68, $50, $3e
150ef     38 34 24 20 
150f3     10 FA F0 E2 
150f7     CC B4 AA 9E 
150fb     AA B2 B4 B6 | 	byte	$38, $34, $24, $20, $10, $fa, $f0, $e2, $cc, $b4, $aa, $9e, $aa, $b2, $b4, $b6
150ff     AC B6 B6 C8 
15103     C2 DC 3C 42 
15107     4E 4A 5A 7E 
1510b     72 60 4A 38 | 	byte	$ac, $b6, $b6, $c8, $c2, $dc, $3c, $42, $4e, $4a, $5a, $7e, $72, $60, $4a, $38
1510f     36 2A 24 1A 
15113     08 F8 EC DA 
15117     C4 B0 A6 A8 
1511b     AA B8 B6 B6 | 	byte	$36, $2a, $24, $1a, $08, $f8, $ec, $da, $c4, $b0, $a6, $a8, $aa, $b8, $b6, $b6
1511f     AC B8 BC C4 
15123     C4 00 40 42 
15127     4E 42 72 7E 
1512b     6C 56 40 36 | 	byte	$ac, $b8, $bc, $c4, $c4, $00, $40, $42, $4e, $42, $72, $7e, $6c, $56, $40, $36
1512f     36 26 1E 12 
15133     00 F4 E8 D8 
15137     C0 B0 A4 AC 
1513b     B2 B8 BC B4 | 	byte	$36, $26, $1e, $12, $00, $f4, $e8, $d8, $c0, $b0, $a4, $ac, $b2, $b8, $bc, $b4
1513f     B2 B8 C0 C4 
15143     C8 1E 42 48 
15147     4C 4A 7E 72 
1514b     62 4C 38 36 | 	byte	$b2, $b8, $c0, $c4, $c8, $1e, $42, $48, $4c, $4a, $7e, $72, $62, $4c, $38, $36
1514f     30 20 1C 12 
15153     FE F0 E6 D0 
15157     BC AC A8 B2 
1515b     B8 BE C0 B2 | 	byte	$30, $20, $1c, $12, $fe, $f0, $e6, $d0, $bc, $ac, $a8, $b2, $b8, $be, $c0, $b2
1515f     B8 BC C8 C0 
15163     CC 38 42 4A 
15167     44 60 7E 6C 
1516b     58 44 34 32 | 	byte	$b8, $bc, $c8, $c0, $cc, $38, $42, $4a, $44, $60, $7e, $6c, $58, $44, $34, $32
1516f     2A 1E 14 08 
15173     FC EE E0 C8 
15177     B8 AA AC B4 
1517b     C0 C0 C0 B4 | 	byte	$2a, $1e, $14, $08, $fc, $ee, $e0, $c8, $b8, $aa, $ac, $b4, $c0, $c0, $c0, $b4
1517f     C0 C0 C4 C2 
15183     DC 40 42 4C 
15187     44 74 78 66 
1518b     4E 3C 32 30 | 	byte	$c0, $c0, $c4, $c2, $dc, $40, $42, $4c, $44, $74, $78, $66, $4e, $3c, $32, $30
1518f     24 1C 12 02 
15193     F8 E8 D6 C0 
15197     B6 AA B6 B6 
1519b     C2 C2 C0 BC | 	byte	$24, $1c, $12, $02, $f8, $e8, $d6, $c0, $b6, $aa, $b6, $b6, $c2, $c2, $c0, $bc
1519f     BE C4 C2 CA 
151a3     00 42 44 4A 
151a7     54 7E 6E 5C 
151ab     44 36 30 2A | 	byte	$be, $c4, $c2, $ca, $00, $42, $44, $4a, $54, $7e, $6e, $5c, $44, $36, $30, $2a
151af     20 14 0E FC 
151b3     F0 E0 CE BE 
151b7     B0 AA B6 C0 
151bb     C0 C4 BE C0 | 	byte	$20, $14, $0e, $fc, $f0, $e0, $ce, $be, $b0, $aa, $b6, $c0, $c0, $c4, $be, $c0
151bf     BE CA C2 CE 
151c3     28 42 4C 48 
151c7     6C 7C 66 50 
151cb     40 34 30 26 | 	byte	$be, $ca, $c2, $ce, $28, $42, $4c, $48, $6c, $7c, $66, $50, $40, $34, $30, $26
151cf     1E 12 06 F8 
151d3     EC D6 C2 B8 
151d7     AA B4 B8 C0 
151db     C2 C4 BC BE | 	byte	$1e, $12, $06, $f8, $ec, $d6, $c2, $b8, $aa, $b4, $b8, $c0, $c2, $c4, $bc, $be
151df     C2 C8 CA D6 
151e3     40 44 4C 4C 
151e7     7E 72 62 48 
151eb     3C 34 2C 24 | 	byte	$c2, $c8, $ca, $d6, $40, $44, $4c, $4c, $7e, $72, $62, $48, $3c, $34, $2c, $24
151ef     1C 10 00 F2 
151f3     E2 D4 BE B4 
151f7     AA B8 BC C0 
151fb     C4 C0 C0 BC | 	byte	$1c, $10, $00, $f2, $e2, $d4, $be, $b4, $aa, $b8, $bc, $c0, $c4, $c0, $c0, $bc
151ff     CA C2 CC EE 
15203     48 4C 4A 60 
15207     7E 6C 58 42 
1520b     34 32 2A 26 | 	byte	$ca, $c2, $cc, $ee, $48, $4c, $4a, $60, $7e, $6c, $58, $42, $34, $32, $2a, $26
1520f     14 0C FE EC 
15213     D8 C8 BC B0 
15217     B0 B8 C0 C0 
1521b     C8 C0 C0 C0 | 	byte	$14, $0c, $fe, $ec, $d8, $c8, $bc, $b0, $b0, $b8, $c0, $c0, $c8, $c0, $c0, $c0
1521f     CE C8 D0 14 
15223     44 50 4A 74 
15227     7C 66 4E 3E 
1522b     38 30 26 20 | 	byte	$ce, $c8, $d0, $14, $44, $50, $4a, $74, $7c, $66, $4e, $3e, $38, $30, $26, $20
1522f     10 02 F4 E6 
15233     D4 BE B6 AA 
15237     B8 B8 C0 C4 
1523b     C4 C2 BE CC | 	byte	$10, $02, $f4, $e6, $d4, $be, $b6, $aa, $b8, $b8, $c0, $c4, $c4, $c2, $be, $cc
1523f     CA CE D6 38 
15243     4A 4C 56 7E 
15247     70 5C 48 3C 
1524b     36 2C 26 1A | 	byte	$ca, $ce, $d6, $38, $4a, $4c, $56, $7e, $70, $5c, $48, $3c, $36, $2c, $26, $1a
1524f     0C FE F0 DC 
15253     C8 B8 B2 AC 
15257     B6 BE C0 C8 
1525b     C2 C8 C0 D0 | 	byte	$0c, $fe, $f0, $dc, $c8, $b8, $b2, $ac, $b6, $be, $c0, $c8, $c2, $c8, $c0, $d0
1525f     CA D4 E4 48 
15263     4E 4A 6C 7E 
15267     6C 56 42 3C 
1526b     36 28 26 14 | 	byte	$ca, $d4, $e4, $48, $4e, $4a, $6c, $7e, $6c, $56, $42, $3c, $36, $28, $26, $14
1526f     04 FA E8 D6 
15273     C0 B6 AA B6 
15277     B6 BE C0 C8 
1527b     C8 C2 CA CE | 	byte	$04, $fa, $e8, $d6, $c0, $b6, $aa, $b6, $b6, $be, $c0, $c8, $c8, $c2, $ca, $ce
1527f     D0 D8 FC 4C 
15283     4E 4E 74 7A 
15287     62 4E 40 3C 
1528b     32 26 20 10 | 	byte	$d0, $d8, $fc, $4c, $4e, $4e, $74, $7a, $62, $4e, $40, $3c, $32, $26, $20, $10
1528f     00 F2 E0 CE 
15293     BE B4 AC B8 
15297     BC BC C4 C8 
1529b     CC C2 D0 CE | 	byte	$00, $f2, $e0, $ce, $be, $b4, $ac, $b8, $bc, $bc, $c4, $c8, $cc, $c2, $d0, $ce
1529f     D6 E2 14 4C 
152a3     4A 5A 7C 70 
152a7     56 48 40 3C 
152ab     2A 28 1A 0C | 	byte	$d6, $e2, $14, $4c, $4a, $5a, $7c, $70, $56, $48, $40, $3c, $2a, $28, $1a, $0c
152af     FE EE D8 C2 
152b3     B8 AC B6 B8 
152b7     C0 BE C4 CA 
152bb     C8 CC CE D6 | 	byte	$fe, $ee, $d8, $c2, $b8, $ac, $b6, $b8, $c0, $be, $c4, $ca, $c8, $cc, $ce, $d6
152bf     D8 EC 30 4E 
152c3     48 68 7C 66 
152c7     4E 42 3E 38 
152cb     2A 24 14 02 | 	byte	$d8, $ec, $30, $4e, $48, $68, $7c, $66, $4e, $42, $3e, $38, $2a, $24, $14, $02
152cf     FA E6 D0 BE 
152d3     B6 B0 BC BE 
152d7     BE C2 C8 D0 
152db     C8 D4 D0 D8 | 	byte	$fa, $e6, $d0, $be, $b6, $b0, $bc, $be, $be, $c2, $c8, $d0, $c8, $d4, $d0, $d8
152df     E2 EE 4A 48 
152e3     50 6E 74 58 
152e7     48 40 40 32 
152eb     2A 1E 10 00 | 	byte	$e2, $ee, $4a, $48, $50, $6e, $74, $58, $48, $40, $40, $32, $2a, $1e, $10, $00
152ef     F2 DC C8 BE 
152f3     B0 BC BC C0 
152f7     BE C4 CE CC 
152fb     CE CE D6 DA | 	byte	$f2, $dc, $c8, $be, $b0, $bc, $bc, $c0, $be, $c4, $ce, $cc, $ce, $ce, $d6, $da
152ff     EC F8 50 42 
15303     58 74 6C 50 
15307     42 40 40 30 
1530b     28 1C 08 FE | 	byte	$ec, $f8, $50, $42, $58, $74, $6c, $50, $42, $40, $40, $30, $28, $1c, $08, $fe
1530f     EE D4 C0 B8 
15313     B4 C0 C0 BE 
15317     C0 C4 D4 CC 
1531b     D6 CE D8 E2 | 	byte	$ee, $d4, $c0, $b8, $b4, $c0, $c0, $be, $c0, $c4, $d4, $cc, $d6, $ce, $d8, $e2
1531f     EC 0E 48 44 
15323     62 74 5C 4A 
15327     42 40 38 30 
1532b     24 14 02 FA | 	byte	$ec, $0e, $48, $44, $62, $74, $5c, $4a, $42, $40, $38, $30, $24, $14, $02, $fa
1532f     E4 CA C0 B6 
15333     C0 C0 C2 C0 
15337     C2 D0 D0 D6 
1533b     D0 D6 DA EC | 	byte	$e4, $ca, $c0, $b6, $c0, $c0, $c2, $c0, $c2, $d0, $d0, $d6, $d0, $d6, $da, $ec
1533f     F0 28 40 44 
15343     68 6C 50 42 
15347     40 40 36 2A 
1534b     1E 0E 00 F0 | 	byte	$f0, $28, $40, $44, $68, $6c, $50, $42, $40, $40, $36, $2a, $1e, $0e, $00, $f0
1534f     D8 C8 BE BE 
15353     C4 C4 C0 C4 
15357     C8 D6 D0 D6 
1535b     D0 DA E6 EC | 	byte	$d8, $c8, $be, $be, $c4, $c4, $c0, $c4, $c8, $d6, $d0, $d6, $d0, $da, $e6, $ec
1535f     F8 36 3E 4E 
15363     70 5C 48 42 
15367     40 3C 32 24 
1536b     18 06 FC E8 | 	byte	$f8, $36, $3e, $4e, $70, $5c, $48, $42, $40, $3c, $32, $24, $18, $06, $fc, $e8
1536f     D0 C4 B8 C8 
15373     C8 C4 C4 C4 
15377     D0 D4 DA D6 
1537b     D6 E4 EE F4 | 	byte	$d0, $c4, $b8, $c8, $c8, $c4, $c4, $c4, $d0, $d4, $da, $d6, $d6, $e4, $ee, $f4
1537f     F8 40 3C 5A 
15383     6C 54 42 40 
15387     40 3C 2A 1E 
1538b     10 00 F2 E0 | 	byte	$f8, $40, $3c, $5a, $6c, $54, $42, $40, $40, $3c, $2a, $1e, $10, $00, $f2, $e0
1538f     CC C0 C0 C8 
15393     CC C4 C8 C8 
15397     D6 D8 DC D6 
1539b     DA EC EE FA | 	byte	$cc, $c0, $c0, $c8, $cc, $c4, $c8, $c8, $d6, $d8, $dc, $d6, $da, $ec, $ee, $fa
1539f     F8 40 40 64 
153a3     60 4A 42 40 
153a7     3E 36 28 18 
153ab     08 FC EC D6 | 	byte	$f8, $40, $40, $64, $60, $4a, $42, $40, $3e, $36, $28, $18, $08, $fc, $ec, $d6
153af     CA BE CC CC 
153b3     CA C8 C8 D0 
153b7     D6 E2 D8 D8 
153bb     E4 F0 F4 FA | 	byte	$ca, $be, $cc, $cc, $ca, $c8, $c8, $d0, $d6, $e2, $d8, $d8, $e4, $f0, $f4, $fa
153bf     00 36 4C 68 
153c3     56 44 40 40 
153c7     3C 30 24 10 
153cb     00 F4 E2 D4 | 	byte	$00, $36, $4c, $68, $56, $44, $40, $40, $3c, $30, $24, $10, $00, $f4, $e2, $d4
153cf     C4 C4 CE D4 
153d3     CA CA CA D6 
153d7     DA E0 D8 DC 
153db     EE F0 FC F4 | 	byte	$c4, $c4, $ce, $d4, $ca, $ca, $ca, $d6, $da, $e0, $d8, $dc, $ee, $f0, $fc, $f4
153df     0E 36 58 62 
153e3     4E 42 40 3C 
153e7     38 2A 1A 0C 
153eb     FE EC DA D0 | 	byte	$0e, $36, $58, $62, $4e, $42, $40, $3c, $38, $2a, $1a, $0c, $fe, $ec, $da, $d0
153ef     C0 CC D4 D4 
153f3     CC CA D4 D6 
153f7     E4 DA DC E4 
153fb     F4 F8 FE F2 | 	byte	$c0, $cc, $d4, $d4, $cc, $ca, $d4, $d6, $e4, $da, $dc, $e4, $f4, $f8, $fe, $f2
153ff     14 40 60 56 
15403     48 42 3E 3C 
15407     30 26 12 04 
1540b     F8 E4 D8 CA | 	byte	$14, $40, $60, $56, $48, $42, $3e, $3c, $30, $26, $12, $04, $f8, $e4, $d8, $ca
1540f     C8 D0 D6 D0 
15413     CE CC D6 DA 
15417     E4 DC E0 EE 
1541b     F4 FE FA EC | 	byte	$c8, $d0, $d6, $d0, $ce, $cc, $d6, $da, $e4, $dc, $e0, $ee, $f4, $fe, $fa, $ec
1541f     28 4E 60 50 
15423     44 40 38 38 
15427     2A 1E 0E 00 
1542b     F0 DC D6 C4 | 	byte	$28, $4e, $60, $50, $44, $40, $38, $38, $2a, $1e, $0e, $00, $f0, $dc, $d6, $c4
1542f     D0 D6 D6 D4 
15433     CE D4 D6 E4 
15437     E0 E2 E6 F8 
1543b     FA FE F8 E4 | 	byte	$d0, $d6, $d6, $d4, $ce, $d4, $d6, $e4, $e0, $e2, $e6, $f8, $fa, $fe, $f8, $e4
1543f     3E 58 5A 4C 
15443     44 40 3C 32 
15447     28 18 06 FC 
1544b     E8 DA D4 CA | 	byte	$3e, $58, $5a, $4c, $44, $40, $3c, $32, $28, $18, $06, $fc, $e8, $da, $d4, $ca
1544f     D0 D8 D6 D6 
15453     CE D8 D8 E6 
15457     DC E2 EE F8 
1545b     FE FA F2 E4 | 	byte	$d0, $d8, $d6, $d6, $ce, $d8, $d8, $e6, $dc, $e2, $ee, $f8, $fe, $fa, $f2, $e4
1545f     4A 5A 56 4A 
15463     42 3C 3C 2C 
15467     20 12 02 F4 
1546b     E2 DA CE D0 | 	byte	$4a, $5a, $56, $4a, $42, $3c, $3c, $2c, $20, $12, $02, $f4, $e2, $da, $ce, $d0
1546f     D6 DA D6 D4 
15473     D6 D6 E2 E2 
15477     E2 E6 F4 FA 
1547b     FE FA E8 EE | 	byte	$d6, $da, $d6, $d4, $d6, $d6, $e2, $e2, $e2, $e6, $f4, $fa, $fe, $fa, $e8, $ee
1547f     56 5A 4E 48 
15483     40 3C 36 2A 
15487     1C 0C 00 EC 
1548b     DC D8 D0 D4 | 	byte	$56, $5a, $4e, $48, $40, $3c, $36, $2a, $1c, $0c, $00, $ec, $dc, $d8, $d0, $d4
1548f     DA D8 D8 D4 
15493     D8 D6 E6 E0 
15497     E4 EC F8 FE 
1549b     FA F8 E2 00 | 	byte	$da, $d8, $d8, $d4, $d8, $d6, $e6, $e0, $e4, $ec, $f8, $fe, $fa, $f8, $e2, $00
1549f     56 58 4C 44 
154a3     3E 3C 30 26 
154a7     14 04 FA E6 
154ab     DC D4 D6 D6 | 	byte	$56, $58, $4c, $44, $3e, $3c, $30, $26, $14, $04, $fa, $e6, $dc, $d4, $d6, $d6
154af     E0 DA D6 D6 
154b3     D8 DC E4 E2 
154b7     E6 F4 F8 00 
154bb     FA F0 E2 1E | 	byte	$e0, $da, $d6, $d6, $d8, $dc, $e4, $e2, $e6, $f4, $f8, $00, $fa, $f0, $e2, $1e
154bf     5A 56 4A 42 
154c3     3C 38 2C 20 
154c7     12 00 F2 E2 
154cb     DC D6 D6 DA | 	byte	$5a, $56, $4a, $42, $3c, $38, $2c, $20, $12, $00, $f2, $e2, $dc, $d6, $d6, $da
154cf     DC DA D6 D8 
154d3     D6 E4 E0 E4 
154d7     EC F4 FC FE 
154db     F8 E8 E8 38 | 	byte	$dc, $da, $d6, $d8, $d6, $e4, $e0, $e4, $ec, $f4, $fc, $fe, $f8, $e8, $e8, $38
154df     5A 50 48 40 
154e3     3E 32 2A 1C 
154e7     0C 00 EC E2 
154eb     DA D8 D8 E2 | 	byte	$5a, $50, $48, $40, $3e, $32, $2a, $1c, $0c, $00, $ec, $e2, $da, $d8, $d8, $e2
154ef     DC DC D6 DA 
154f3     DC E4 E2 E4 
154f7     F0 F4 00 F8 
154fb     F2 E2 F4 4E | 	byte	$dc, $dc, $d6, $da, $dc, $e4, $e2, $e4, $f0, $f4, $00, $f8, $f2, $e2, $f4, $4e
154ff     56 4E 48 3E 
15503     3E 2C 26 18 
15507     04 FA E8 E2 
1550b     D8 DC DA E2 | 	byte	$56, $4e, $48, $3e, $3e, $2c, $26, $18, $04, $fa, $e8, $e2, $d8, $dc, $da, $e2
1550f     E0 DA D8 D8 
15513     E2 E2 E4 E6 
15517     F4 F8 FE F4 
1551b     EC E6 FE 54 | 	byte	$e0, $da, $d8, $d8, $e2, $e2, $e4, $e6, $f4, $f8, $fe, $f4, $ec, $e6, $fe, $54
1551f     54 4C 44 3E 
15523     38 2C 20 12 
15527     00 F4 E6 E2 
1552b     DC E0 E0 E2 | 	byte	$54, $4c, $44, $3e, $38, $2c, $20, $12, $00, $f4, $e6, $e2, $dc, $e0, $e0, $e2
1552f     E0 DA DC D8 
15533     E4 E2 E4 EC 
15537     F2 FC FA F4 
1553b     E6 EE 02 58 | 	byte	$e0, $da, $dc, $d8, $e4, $e2, $e4, $ec, $f2, $fc, $fa, $f4, $e6, $ee, $02, $58
1553f     50 4C 40 3E 
15543     32 2A 1C 0E 
15547     00 F0 E8 E0 
1554b     E2 DC E4 E2 | 	byte	$50, $4c, $40, $3e, $32, $2a, $1c, $0e, $00, $f0, $e8, $e0, $e2, $dc, $e4, $e2
1554f     E0 DA DC E0 
15553     E4 E4 E4 F0 
15557     F2 FE F8 F0 
1555b     E6 F8 08 58 | 	byte	$e0, $da, $dc, $e0, $e4, $e4, $e4, $f0, $f2, $fe, $f8, $f0, $e6, $f8, $08, $58
1555f     50 4A 3E 3E 
15563     30 26 18 08 
15567     FE EC E8 E0 
1556b     E4 E2 E4 E2 | 	byte	$50, $4a, $3e, $3e, $30, $26, $18, $08, $fe, $ec, $e8, $e0, $e4, $e2, $e4, $e2
1556f     E0 DC DA E4 
15573     E2 E4 E6 F2 
15577     F4 FE F4 EC 
1557b     EC 00 12 56 | 	byte	$e0, $dc, $da, $e4, $e2, $e4, $e6, $f2, $f4, $fe, $f4, $ec, $ec, $00, $12, $56
1557f     4E 44 3E 38 
15583     2C 20 14 04 
15587     FA EC E8 E2 
1558b     E4 E4 E4 E4 | 	byte	$4e, $44, $3e, $38, $2c, $20, $14, $04, $fa, $ec, $e8, $e2, $e4, $e4, $e4, $e4
1558f     DC E0 DC E6 
15593     E2 E4 EC F2 
15597     FA FA F2 E8 
1559b     F4 00 14 56 | 	byte	$dc, $e0, $dc, $e6, $e2, $e4, $ec, $f2, $fa, $fa, $f2, $e8, $f4, $00, $14, $56
1559f     4E 42 3E 32 
155a3     2A 1E 10 00 
155a7     F4 EC E4 E6 
155ab     E4 E6 E4 E4 | 	byte	$4e, $42, $3e, $32, $2a, $1e, $10, $00, $f4, $ec, $e4, $e6, $e4, $e6, $e4, $e4
155af     DC E0 E0 E4 
155b3     E2 E6 F0 F2 
155b7     FC F8 F0 EC 
155bb     FE 04 14 54 | 	byte	$dc, $e0, $e0, $e4, $e2, $e6, $f0, $f2, $fc, $f8, $f0, $ec, $fe, $04, $14, $54
155bf     4C 40 3C 30 
155c3     28 1A 0C 00 
155c7     F2 EC E4 E8 
155cb     E4 E6 E6 E2 | 	byte	$4c, $40, $3c, $30, $28, $1a, $0c, $00, $f2, $ec, $e4, $e8, $e4, $e6, $e6, $e2
155cf     DC E0 E4 E4 
155d3     E4 E6 F2 F2 
155d7     FC F4 EC F2 
155db     00 08 1E 50 | 	byte	$dc, $e0, $e4, $e4, $e4, $e6, $f2, $f2, $fc, $f4, $ec, $f2, $00, $08, $1e, $50
155df     48 3E 36 2C 
155e3     24 14 06 FE 
155e7     F0 EC E4 EC 
155eb     E6 E6 E6 E0 | 	byte	$48, $3e, $36, $2c, $24, $14, $06, $fe, $f0, $ec, $e4, $ec, $e6, $e6, $e6, $e0
155ef     E2 DC E6 E2 
155f3     E6 EC F2 F8 
155f7     FC F2 EE FC 
155fb     06 06 28 4E | 	byte	$e2, $dc, $e6, $e2, $e6, $ec, $f2, $f8, $fc, $f2, $ee, $fc, $06, $06, $28, $4e
155ff     42 3C 32 2A 
15603     1E 12 04 FA 
15607     F0 EC E6 E8 
1560b     E8 E6 E6 E0 | 	byte	$42, $3c, $32, $2a, $1e, $12, $04, $fa, $f0, $ec, $e6, $e8, $e8, $e6, $e6, $e0
1560f     E2 E0 E8 E4 
15613     E6 EE F2 FA 
15617     FA F2 F2 00 
1561b     0C 04 30 4C | 	byte	$e2, $e0, $e8, $e4, $e6, $ee, $f2, $fa, $fa, $f2, $f2, $00, $0c, $04, $30, $4c
1561f     40 38 30 28 
15623     1A 10 02 F8 
15627     F0 E8 EC E6 
1562b     E8 E6 E4 E0 | 	byte	$40, $38, $30, $28, $1a, $10, $02, $f8, $f0, $e8, $ec, $e6, $e8, $e6, $e4, $e0
1562f     E2 E2 E8 E4 
15633     E8 F2 F2 FA 
15637     F4 F2 FA 08 
1563b     0C 02 38 4A | 	byte	$e2, $e2, $e8, $e4, $e8, $f2, $f2, $fa, $f4, $f2, $fa, $08, $0c, $02, $38, $4a
1563f     3E 36 2C 24 
15643     18 0C 00 F8 
15647     F0 E6 EC E6 
1564b     E8 E6 E2 E2 | 	byte	$3e, $36, $2c, $24, $18, $0c, $00, $f8, $f0, $e6, $ec, $e6, $e8, $e6, $e2, $e2
1564f     E2 E6 E6 E6 
15653     E8 F2 F2 FC 
15657     F2 F4 00 0E 
1565b     0C 00 40 48 | 	byte	$e2, $e6, $e6, $e6, $e8, $f2, $f2, $fc, $f2, $f4, $00, $0e, $0c, $00, $40, $48
1565f     3C 34 2A 20 
15663     14 08 FE F4 
15667     EE E4 EC E6 
1566b     E6 E6 E2 E4 | 	byte	$3c, $34, $2a, $20, $14, $08, $fe, $f4, $ee, $e4, $ec, $e6, $e6, $e6, $e2, $e4
1566f     E0 E8 E4 E8 
15673     EC F4 F4 FA 
15677     F4 FC 06 12 
1567b     06 00 44 42 | 	byte	$e0, $e8, $e4, $e8, $ec, $f4, $f4, $fa, $f4, $fc, $06, $12, $06, $00, $44, $42
1567f     38 30 28 1C 
15683     12 06 FC F4 
15687     EC E6 EC E8 
1568b     E6 E6 E2 E6 | 	byte	$38, $30, $28, $1c, $12, $06, $fc, $f4, $ec, $e6, $ec, $e8, $e6, $e6, $e2, $e6
1568f     E0 EC E4 E8 
15693     EC F2 F8 FA 
15697     FA 00 0E 12 
1569b     04 00 48 40 | 	byte	$e0, $ec, $e4, $e8, $ec, $f2, $f8, $fa, $fa, $00, $0e, $12, $04, $00, $48, $40
1569f     36 2C 26 18 
156a3     10 00 FA F2 
156a7     E8 E8 E8 E8 
156ab     E6 E6 E2 E6 | 	byte	$36, $2c, $26, $18, $10, $00, $fa, $f2, $e8, $e8, $e8, $e8, $e6, $e6, $e2, $e6
156af     E2 E8 E4 E8 
156b3     EE F2 FA F8 
156b7     00 04 14 10 
156bb     02 04 4A 3E | 	byte	$e2, $e8, $e4, $e8, $ee, $f2, $fa, $f8, $00, $04, $14, $10, $02, $04, $4a, $3e
156bf     34 2A 20 14 
156c3     0C 00 FA F0 
156c7     E6 EC E6 E8 
156cb     E6 E6 E4 E4 | 	byte	$34, $2a, $20, $14, $0c, $00, $fa, $f0, $e6, $ec, $e6, $e8, $e6, $e6, $e4, $e4
156cf     E6 E8 E6 E6 
156d3     F0 F4 FC FA 
156d7     04 0E 14 0C 
156db     02 04 4A 38 | 	byte	$e6, $e8, $e6, $e6, $f0, $f4, $fc, $fa, $04, $0e, $14, $0c, $02, $04, $4a, $38
156df     32 2A 1E 14 
156e3     08 00 F8 EE 
156e7     E6 EC E6 E8 
156eb     E6 E6 E6 E4 | 	byte	$32, $2a, $1e, $14, $08, $00, $f8, $ee, $e6, $ec, $e6, $e8, $e6, $e6, $e6, $e4
156ef     E6 E6 E6 E8 
156f3     F2 F2 FC 00 
156f7     0C 14 14 08 
156fb     00 0E 44 34 | 	byte	$e6, $e6, $e6, $e8, $f2, $f2, $fc, $00, $0c, $14, $14, $08, $00, $0e, $44, $34
156ff     30 28 1A 12 
15703     06 00 F4 EC 
15707     E4 EC E6 E8 
1570b     E8 E4 E6 E2 | 	byte	$30, $28, $1a, $12, $06, $00, $f4, $ec, $e4, $ec, $e6, $e8, $e8, $e4, $e6, $e2
1570f     E6 E4 E6 E8 
15713     F2 F4 FE 02 
15717     12 14 14 06 
1571b     00 14 40 32 | 	byte	$e6, $e4, $e6, $e8, $f2, $f4, $fe, $02, $12, $14, $14, $06, $00, $14, $40, $32
1571f     2C 24 18 10 
15723     04 FE F2 EC 
15727     E4 E8 E8 E8 
1572b     E8 E4 E6 E0 | 	byte	$2c, $24, $18, $10, $04, $fe, $f2, $ec, $e4, $e8, $e8, $e8, $e8, $e4, $e6, $e0
1572f     E8 E4 E6 EC 
15733     F4 F8 00 0C 
15737     18 18 12 04 
1573b     00 28 3C 30 | 	byte	$e8, $e4, $e6, $ec, $f4, $f8, $00, $0c, $18, $18, $12, $04, $00, $28, $3c, $30
1573f     2A 20 14 0E 
15743     02 FC F0 E8 
15747     E4 E8 E8 E8 
1574b     E8 E4 E6 E0 | 	byte	$2a, $20, $14, $0e, $02, $fc, $f0, $e8, $e4, $e8, $e8, $e8, $e8, $e4, $e6, $e0
1574f     E8 E4 E6 EC 
15753     F2 F8 02 14 
15757     1A 1A 10 02 
1575b     00 30 36 30 | 	byte	$e8, $e4, $e6, $ec, $f2, $f8, $02, $14, $1a, $1a, $10, $02, $00, $30, $36, $30
1575f     28 1E 14 0C 
15763     00 F8 F0 E6 
15767     E6 E8 EC E8 
1576b     E8 E4 E6 E2 | 	byte	$28, $1e, $14, $0c, $00, $f8, $f0, $e6, $e6, $e8, $ec, $e8, $e8, $e4, $e6, $e2
1576f     E8 E4 E6 EE 
15773     F2 FE 06 1A 
15777     1C 18 0C 00 
1577b     00 38 34 2C | 	byte	$e8, $e4, $e6, $ee, $f2, $fe, $06, $1a, $1c, $18, $0c, $00, $00, $38, $34, $2c
1577f     26 1C 12 08 
15783     00 F4 EE E4 
15787     E8 E8 EC E8 
1578b     E8 E6 E4 E4 | 	byte	$26, $1c, $12, $08, $00, $f4, $ee, $e4, $e8, $e8, $ec, $e8, $e8, $e6, $e4, $e4
1578f     E6 E4 E6 F0 
15793     F2 00 0E 20 
15797     1C 14 06 00 
1579b     00 40 30 2A | 	byte	$e6, $e4, $e6, $f0, $f2, $00, $0e, $20, $1c, $14, $06, $00, $00, $40, $30, $2a
1579f     24 18 10 06 
157a3     FE F2 EC E2 
157a7     EC E8 EC EC 
157ab     E8 E6 E2 E6 | 	byte	$24, $18, $10, $06, $fe, $f2, $ec, $e2, $ec, $e8, $ec, $ec, $e8, $e6, $e2, $e6
157af     E4 E6 E6 F2 
157b3     F8 04 14 24 
157b7     1A 10 02 FE 
157bb     00 3E 2C 2A | 	byte	$e4, $e6, $e6, $f2, $f8, $04, $14, $24, $1a, $10, $02, $fe, $00, $3e, $2c, $2a
157bf     20 14 0E 02 
157c3     FC F0 EC E4 
157c7     EC EC EC EC 
157cb     E6 E8 E0 E6 | 	byte	$20, $14, $0e, $02, $fc, $f0, $ec, $e4, $ec, $ec, $ec, $ec, $e6, $e8, $e0, $e6
157cf     E2 E6 EC F2 
157d3     FC 0E 1E 24 
157d7     18 0E 00 FE 
157db     04 38 2C 26 | 	byte	$e2, $e6, $ec, $f2, $fc, $0e, $1e, $24, $18, $0e, $00, $fe, $04, $38, $2c, $26
157df     1E 14 0C 00 
157e3     FA F0 E8 E6 
157e7     EC EC EC EC 
157eb     E6 E8 E0 E6 | 	byte	$1e, $14, $0c, $00, $fa, $f0, $e8, $e6, $ec, $ec, $ec, $ec, $e6, $e8, $e0, $e6
157ef     E4 E6 EC F2 
157f3     00 12 26 20 
157f7     14 08 00 FC 
157fb     14 34 2C 24 | 	byte	$e4, $e6, $ec, $f2, $00, $12, $26, $20, $14, $08, $00, $fc, $14, $34, $2c, $24
157ff     1C 10 06 00 
15803     F4 EE E4 EC 
15807     EC EE EC EC 
1580b     E6 E6 E2 E6 | 	byte	$1c, $10, $06, $00, $f4, $ee, $e4, $ec, $ec, $ee, $ec, $ec, $e6, $e6, $e2, $e6
1580f     E4 E6 EE F8 
15813     08 18 28 1C 
15817     12 04 00 FA 
1581b     28 32 2A 20 | 	byte	$e4, $e6, $ee, $f8, $08, $18, $28, $1c, $12, $04, $00, $fa, $28, $32, $2a, $20
1581f     18 10 04 FE 
15823     F0 EE E4 EC 
15827     EC EE EC EC 
1582b     E6 E2 E4 E4 | 	byte	$18, $10, $04, $fe, $f0, $ee, $e4, $ec, $ec, $ee, $ec, $ec, $e6, $e2, $e4, $e4
1582f     E6 E8 F2 FC 
15833     10 1E 28 18 
15837     0E 00 FC FA 
1583b     34 30 28 1E | 	byte	$e6, $e8, $f2, $fc, $10, $1e, $28, $18, $0e, $00, $fc, $fa, $34, $30, $28, $1e
1583f     14 0C 02 FA 
15843     F0 EC E6 EC 
15847     EE EE EC E8 
1584b     E8 E0 E6 E2 | 	byte	$14, $0c, $02, $fa, $f0, $ec, $e6, $ec, $ee, $ee, $ec, $e8, $e8, $e0, $e6, $e2
1584f     E6 EC F2 00 
15853     14 24 24 14 
15857     08 00 FA FA 
1585b     38 2C 24 1C | 	byte	$e6, $ec, $f2, $00, $14, $24, $24, $14, $08, $00, $fa, $fa, $38, $2c, $24, $1c
1585f     12 08 00 F4 
15863     EE EC E8 EC 
15867     F0 EE EC E6 
1586b     E8 E2 E6 E4 | 	byte	$12, $08, $00, $f4, $ee, $ec, $e8, $ec, $f0, $ee, $ec, $e6, $e8, $e2, $e6, $e4
1586f     E8 EE F8 0C 
15873     1A 28 1E 12 
15877     04 FE FA 00 
1587b     34 2A 20 18 | 	byte	$e8, $ee, $f8, $0c, $1a, $28, $1e, $12, $04, $fe, $fa, $00, $34, $2a, $20, $18
1587f     10 04 FE F2 
15883     EE E8 EC EE 
15887     F2 EE EC E6 
1588b     E4 E6 E4 E6 | 	byte	$10, $04, $fe, $f2, $ee, $e8, $ec, $ee, $f2, $ee, $ec, $e6, $e4, $e6, $e4, $e6
1588f     E8 F2 FC 12 
15893     20 28 1A 10 
15897     00 FC FA 0E 
1589b     32 2A 1C 14 | 	byte	$e8, $f2, $fc, $12, $20, $28, $1a, $10, $00, $fc, $fa, $0e, $32, $2a, $1c, $14
1589f     0E 02 FA F0 
158a3     EC E8 EE F0 
158a7     F0 EE EC E8 
158ab     E2 E8 E4 E6 | 	byte	$0e, $02, $fa, $f0, $ec, $e8, $ee, $f0, $f0, $ee, $ec, $e8, $e2, $e8, $e4, $e6
158af     EC F4 02 18 
158b3     28 24 18 08 
158b7     00 FA F8 1E 
158bb     30 26 1A 12 | 	byte	$ec, $f4, $02, $18, $28, $24, $18, $08, $00, $fa, $f8, $1e, $30, $26, $1a, $12
158bf     08 00 F4 EE 
158c3     EC EC F0 F2 
158c7     F0 EE E8 E8 
158cb     E4 E8 E4 E8 | 	byte	$08, $00, $f4, $ee, $ec, $ec, $f0, $f2, $f0, $ee, $e8, $e8, $e4, $e8, $e4, $e8
158cf     EE F8 0C 1E 
158d3     28 1E 14 04 
158d7     FE FA F8 30 
158db     2C 20 18 10 | 	byte	$ee, $f8, $0c, $1e, $28, $1e, $14, $04, $fe, $fa, $f8, $30, $2c, $20, $18, $10
158df     06 FE F2 EE 
158e3     E8 EE F0 F2 
158e7     F0 EC E8 E4 
158eb     E6 E6 E6 E8 | 	byte	$06, $fe, $f2, $ee, $e8, $ee, $f0, $f2, $f0, $ec, $e8, $e4, $e6, $e6, $e6, $e8
158ef     F2 FE 14 24 
158f3     28 1A 10 00 
158f7     FC F8 FC 34 
158fb     2A 1E 14 0E | 	byte	$f2, $fe, $14, $24, $28, $1a, $10, $00, $fc, $f8, $fc, $34, $2a, $1e, $14, $0e
158ff     02 FA F0 EC 
15903     EC F2 F2 F2 
15907     F0 EC EC E2 
1590b     EC E4 E8 EC | 	byte	$02, $fa, $f0, $ec, $ec, $f2, $f2, $f2, $f0, $ec, $ec, $e2, $ec, $e4, $e8, $ec
1590f     F4 04 1A 28 
15913     20 18 0C 00 
15917     FA F8 00 32 
1591b     28 1A 12 08 | 	byte	$f4, $04, $1a, $28, $20, $18, $0c, $00, $fa, $f8, $00, $32, $28, $1a, $12, $08
1591f     00 F4 EE EC 
15923     EE F2 F4 F2 
15927     F0 EC E8 E6 
1592b     EC E4 E8 F0 | 	byte	$00, $f4, $ee, $ec, $ee, $f2, $f4, $f2, $f0, $ec, $e8, $e6, $ec, $e4, $e8, $f0
1592f     FA 0E 1E 28 
15933     1A 14 02 FE 
15937     FA F8 14 2C 
1593b     24 14 10 06 | 	byte	$fa, $0e, $1e, $28, $1a, $14, $02, $fe, $fa, $f8, $14, $2c, $24, $14, $10, $06
1593f     FE F0 EE E8 
15943     F2 F4 F4 F2 
15947     EE EC E6 E8 
1594b     E8 E6 EC F2 | 	byte	$fe, $f0, $ee, $e8, $f2, $f4, $f4, $f2, $ee, $ec, $e6, $e8, $e8, $e6, $ec, $f2
1594f     00 14 26 24 
15953     18 10 00 FA 
15957     F8 F4 28 2A 
1595b     20 14 0E 02 | 	byte	$00, $14, $26, $24, $18, $10, $00, $fa, $f8, $f4, $28, $2a, $20, $14, $0e, $02
1595f     F8 F0 EC EC 
15963     F4 F8 F2 F2 
15967     EC EC E6 EC 
1596b     E6 E8 EE F8 | 	byte	$f8, $f0, $ec, $ec, $f4, $f8, $f2, $f2, $ec, $ec, $e6, $ec, $e6, $e8, $ee, $f8
1596f     08 1A 28 1E 
15973     14 08 00 FA 
15977     F8 F4 34 26 
1597b     1C 10 08 00 | 	byte	$08, $1a, $28, $1e, $14, $08, $00, $fa, $f8, $f4, $34, $26, $1c, $10, $08, $00
1597f     F2 F0 E8 F2 
15983     F8 F8 F2 F2 
15987     EC E8 E8 E8 
1598b     E8 EC F2 FC | 	byte	$f2, $f0, $e8, $f2, $f8, $f8, $f2, $f2, $ec, $e8, $e8, $e8, $e8, $ec, $f2, $fc
1598f     10 1E 26 18 
15993     12 02 FC FA 
15997     F4 00 30 24 
1599b     18 0E 06 FC | 	byte	$10, $1e, $26, $18, $12, $02, $fc, $fa, $f4, $00, $30, $24, $18, $0e, $06, $fc
1599f     F0 EE EC F4 
159a3     FA F4 F4 F0 
159a7     EE E6 EC E6 
159ab     EC EE F4 00 | 	byte	$f0, $ee, $ec, $f4, $fa, $f4, $f4, $f0, $ee, $e6, $ec, $e6, $ec, $ee, $f4, $00
159af     14 26 20 14 
159b3     0C 00 FC F8 
159b7     F2 14 2A 20 
159bb     14 0C 00 F8 | 	byte	$14, $26, $20, $14, $0c, $00, $fc, $f8, $f2, $14, $2a, $20, $14, $0c, $00, $f8
159bf     F0 EC F0 F8 
159c3     FC F4 F4 EE 
159c7     EC EC EC E8 
159cb     EC F2 F8 08 | 	byte	$f0, $ec, $f0, $f8, $fc, $f4, $f4, $ee, $ec, $ec, $ec, $e8, $ec, $f2, $f8, $08
159cf     1A 26 1A 12 
159d3     06 FE FA F8 
159d7     F2 28 28 1C 
159db     12 06 00 F2 | 	byte	$1a, $26, $1a, $12, $06, $fe, $fa, $f8, $f2, $28, $28, $1c, $12, $06, $00, $f2
159df     EE EC F4 FA 
159e3     FA F4 F2 F0 
159e7     E8 EE E8 EC 
159eb     EE F4 00 10 | 	byte	$ee, $ec, $f4, $fa, $fa, $f4, $f2, $f0, $e8, $ee, $e8, $ec, $ee, $f4, $00, $10
159ef     1E 20 18 0E 
159f3     02 FC FA F4 
159f7     F4 2C 24 18 
159fb     0E 02 FA F0 | 	byte	$1e, $20, $18, $0e, $02, $fc, $fa, $f4, $f4, $2c, $24, $18, $0e, $02, $fa, $f0
159ff     EC EE F8 FC 
15a03     F8 F8 F2 F0 
15a07     EC EC E8 EC 
15a0b     F2 F8 04 14 | 	byte	$ec, $ee, $f8, $fc, $f8, $f8, $f2, $f0, $ec, $ec, $e8, $ec, $f2, $f8, $04, $14
15a0f     20 1A 14 06 
15a13     00 FC FA F2 
15a17     00 2A 1E 14 
15a1b     08 00 F4 F0 | 	byte	$20, $1a, $14, $06, $00, $fc, $fa, $f2, $00, $2a, $1e, $14, $08, $00, $f4, $f0
15a1f     EC F4 FA FC 
15a23     FA F4 F4 EC 
15a27     EE EC EC F0 
15a2b     F4 FC 0C 1A | 	byte	$ec, $f4, $fa, $fc, $fa, $f4, $f4, $ec, $ee, $ec, $ec, $f0, $f4, $fc, $0c, $1a
15a2f     1E 18 10 02 
15a33     00 FC F8 F2 
15a37     14 26 1A 14 
15a3b     04 FC F4 EC | 	byte	$1e, $18, $10, $02, $00, $fc, $f8, $f2, $14, $26, $1a, $14, $04, $fc, $f4, $ec
15a3f     EE F4 FC FA 
15a43     FA F2 F4 EE 
15a47     EE EC EC F4 
15a4b     F8 00 0E 1C | 	byte	$ee, $f4, $fc, $fa, $fa, $f2, $f4, $ee, $ee, $ec, $ec, $f4, $f8, $00, $0e, $1c
15a4f     1A 14 06 00 
15a53     FE FA F4 F2 
15a57     24 20 18 10 
15a5b     00 F8 F2 EC | 	byte	$1a, $14, $06, $00, $fe, $fa, $f4, $f2, $24, $20, $18, $10, $00, $f8, $f2, $ec
15a5f     F4 F8 FC FC 
15a63     F8 F8 F0 F2 
15a67     EC EE F0 F8 
15a6b     FC 04 14 1A | 	byte	$f4, $f8, $fc, $fc, $f8, $f8, $f0, $f2, $ec, $ee, $f0, $f8, $fc, $04, $14, $1a
15a6f     14 10 02 00 
15a73     FE F8 F4 F0 
15a77     2A 1C 14 08 
15a7b     FE F8 F0 F0 | 	byte	$14, $10, $02, $00, $fe, $f8, $f4, $f0, $2a, $1c, $14, $08, $fe, $f8, $f0, $f0
15a7f     F4 FC FC FC 
15a83     F8 F8 F2 F2 
15a87     EE EE F8 F8 
15a8b     00 08 18 18 | 	byte	$f4, $fc, $fc, $fc, $f8, $f8, $f2, $f2, $ee, $ee, $f8, $f8, $00, $08, $18, $18
15a8f     14 08 00 00 
15a93     FE F4 F2 FC 
15a97     26 1A 12 02 
15a9b     FA F4 EE F4 | 	byte	$14, $08, $00, $00, $fe, $f4, $f2, $fc, $26, $1a, $12, $02, $fa, $f4, $ee, $f4
15a9f     F8 FC FC FA 
15aa3     FA F4 F8 F0 
15aa7     F0 F2 FA FE 
15aab     02 12 14 14 | 	byte	$f8, $fc, $fc, $fa, $fa, $f4, $f8, $f0, $f0, $f2, $fa, $fe, $02, $12, $14, $14
15aaf     0E 04 00 00 
15ab3     FA F4 F0 08 
15ab7     1E 18 0C 00 
15abb     F8 F0 F4 F8 | 	byte	$0e, $04, $00, $00, $fa, $f4, $f0, $08, $1e, $18, $0c, $00, $f8, $f0, $f4, $f8
15abf     FC FC FC FA 
15ac3     FA F8 F4 F0 
15ac7     F2 FA FA 00 
15acb     04 12 14 14 | 	byte	$fc, $fc, $fc, $fa, $fa, $f8, $f4, $f0, $f2, $fa, $fa, $00, $04, $12, $14, $14
15acf     06 02 00 00 
15ad3     FA F4 EE 1A 
15ad7     1C 14 06 FC 
15adb     F4 F2 F8 FA | 	byte	$06, $02, $00, $00, $fa, $f4, $ee, $1a, $1c, $14, $06, $fc, $f4, $f2, $f8, $fa
15adf     FC FC FC FC 
15ae3     F8 FC F2 F2 
15ae7     F8 FA FE 00 
15aeb     0C 12 14 0E | 	byte	$fc, $fc, $fc, $fc, $f8, $fc, $f2, $f2, $f8, $fa, $fe, $00, $0c, $12, $14, $0e
15aef     04 00 00 FE 
15af3     FA F0 EC 1E 
15af7     18 10 00 FA 
15afb     F0 F8 FA FC | 	byte	$04, $00, $00, $fe, $fa, $f0, $ec, $1e, $18, $10, $00, $fa, $f0, $f8, $fa, $fc
15aff     FC FC FC FA 
15b03     FC FA F4 F4 
15b07     FC FC 00 04 
15b0b     0E 12 12 06 | 	byte	$fc, $fc, $fc, $fa, $fc, $fa, $f4, $f4, $fc, $fc, $00, $04, $0e, $12, $12, $06
15b0f     00 00 00 FC 
15b13     F4 F0 EE 20 
15b17     14 08 00 F8 
15b1b     F2 FA FC FC | 	byte	$00, $00, $00, $fc, $f4, $f0, $ee, $20, $14, $08, $00, $f8, $f2, $fa, $fc, $fc
15b1f     FC FC FE FA 
15b23     FE F8 F8 FA 
15b27     FC FE 00 08 
15b2b     0E 12 0E 02 | 	byte	$fc, $fc, $fe, $fa, $fe, $f8, $f8, $fa, $fc, $fe, $00, $08, $0e, $12, $0e, $02
15b2f     00 00 00 FC 
15b33     F2 EC FC 1A 
15b37     12 02 00 F2 
15b3b     F8 FC FE FC | 	byte	$00, $00, $00, $fc, $f2, $ec, $fc, $1a, $12, $02, $00, $f2, $f8, $fc, $fe, $fc
15b3f     FC FE FC FE 
15b43     FC F8 F8 FE 
15b47     FE 00 02 0C 
15b4b     0E 10 06 00 | 	byte	$fc, $fe, $fc, $fe, $fc, $f8, $f8, $fe, $fe, $00, $02, $0c, $0e, $10, $06, $00
15b4f     00 00 FE FA 
15b53     F0 EC 08 14 
15b57     0C 00 FC F4 
15b5b     FA FE FC FC | 	byte	$00, $00, $fe, $fa, $f0, $ec, $08, $14, $0c, $00, $fc, $f4, $fa, $fe, $fc, $fc
15b5f     FA 00 FC FE 
15b63     FA FA FC FE 
15b67     00 00 06 0C 
15b6b     12 0C 04 00 | 	byte	$fa, $00, $fc, $fe, $fa, $fa, $fc, $fe, $00, $00, $06, $0c, $12, $0c, $04, $00
15b6f     00 00 00 F4 
15b73     EE E6 14 12 
15b77     06 00 F8 FA 
15b7b     FC FE FC FC | 	byte	$00, $00, $00, $f4, $ee, $e6, $14, $12, $06, $00, $f8, $fa, $fc, $fe, $fc, $fc
15b7f     FC FE FE FC 
15b83     FC FA 00 00 
15b87     00 00 08 0E 
15b8b     10 06 00 00 | 	byte	$fc, $fe, $fe, $fc, $fc, $fa, $00, $00, $00, $00, $08, $0e, $10, $06, $00, $00
15b8f     00 00 FE F4 
15b93     EC E6 18 0E 
15b97     04 00 F8 FC 
15b9b     FE FE FE FC | 	byte	$00, $00, $fe, $f4, $ec, $e6, $18, $0e, $04, $00, $f8, $fc, $fe, $fe, $fe, $fc
15b9f     00 FC 00 FC 
15ba3     FC FE 00 00 
15ba7     00 04 08 10 
15bab     0E 04 00 00 | 	byte	$00, $fc, $00, $fc, $fc, $fe, $00, $00, $00, $04, $08, $10, $0e, $04, $00, $00
15baf     00 00 FA F0 
15bb3     E8 EC 14 08 
15bb7     02 FC FC FC 
15bbb     00 FE FE FC | 	byte	$00, $00, $fa, $f0, $e8, $ec, $14, $08, $02, $fc, $fc, $fc, $00, $fe, $fe, $fc
15bbf     FE 00 FE FC 
15bc3     FC 00 00 00 
15bc7     00 06 0C 10 
15bcb     06 00 00 00 | 	byte	$fe, $00, $fe, $fc, $fc, $00, $00, $00, $00, $06, $0c, $10, $06, $00, $00, $00
15bcf     00 00 F8 EC 
15bd3     E6 F2 10 06 
15bd7     00 FC FC FE 
15bdb     00 00 FC 00 | 	byte	$00, $00, $f8, $ec, $e6, $f2, $10, $06, $00, $fc, $fc, $fe, $00, $00, $fc, $00
15bdf     FE 00 FC FE 
15be3     00 00 00 00 
15be7     02 06 10 0E 
15beb     04 00 00 00 | 	byte	$fe, $00, $fc, $fe, $00, $00, $00, $00, $02, $06, $10, $0e, $04, $00, $00, $00
15bef     00 FC F4 EC 
15bf3     E4 FE 0C 04 
15bf7     00 FE FC 00 
15bfb     00 00 FE FE | 	byte	$00, $fc, $f4, $ec, $e4, $fe, $0c, $04, $00, $fe, $fc, $00, $00, $00, $fe, $fe
15bff     00 00 FE FE 
15c03     00 00 02 00 
15c07     06 08 12 08 
15c0b     02 00 00 00 | 	byte	$00, $00, $fe, $fe, $00, $00, $02, $00, $06, $08, $12, $08, $02, $00, $00, $00
15c0f     00 FA F0 E8 
15c13     E2 04 08 04 
15c17     FE 00 FE 00 
15c1b     00 00 00 FC | 	byte	$00, $fa, $f0, $e8, $e2, $04, $08, $04, $fe, $00, $fe, $00, $00, $00, $00, $fc
15c1f     00 FE 00 00 
15c23     00 00 02 02 
15c27     06 0E 10 06 
15c2b     00 00 00 FE | 	byte	$00, $fe, $00, $00, $00, $00, $02, $02, $06, $0e, $10, $06, $00, $00, $00, $fe
15c2f     FE F8 EC E6 
15c33     E0 0E 06 02 
15c37     00 00 00 00 
15c3b     00 FE 00 FE | 	byte	$fe, $f8, $ec, $e6, $e0, $0e, $06, $02, $00, $00, $00, $00, $00, $fe, $00, $fe
15c3f     00 FC 00 00 
15c43     00 02 00 06 
15c47     08 12 0E 04 
15c4b     00 00 00 00 | 	byte	$00, $fc, $00, $00, $00, $02, $00, $06, $08, $12, $0e, $04, $00, $00, $00, $00
15c4f     FC F4 EC E4 
15c53     DC 0E 06 00 
15c57     00 00 00 00 
15c5b     00 00 00 00 | 	byte	$fc, $f4, $ec, $e4, $dc, $0e, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00
15c5f     00 FE 00 02 
15c63     00 04 02 08 
15c67     0E 12 08 00 
15c6b     00 00 00 FE | 	byte	$00, $fe, $00, $02, $00, $04, $02, $08, $0e, $12, $08, $00, $00, $00, $00, $fe
15c6f     FA F0 E8 E0 
15c73     E2 0E 04 00 
15c77     00 00 00 00 
15c7b     00 00 FE 00 | 	byte	$fa, $f0, $e8, $e0, $e2, $0e, $04, $00, $00, $00, $00, $00, $00, $00, $fe, $00
15c7f     FE 00 00 02 
15c83     04 02 06 0C 
15c87     10 12 06 00 
15c8b     00 00 00 FC | 	byte	$fe, $00, $00, $02, $04, $02, $06, $0c, $10, $12, $06, $00, $00, $00, $00, $fc
15c8f     F8 EC E6 DC 
15c93     E6 0C 02 00 
15c97     00 00 00 00 
15c9b     00 00 FE 00 | 	byte	$f8, $ec, $e6, $dc, $e6, $0c, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $00
15c9f     FE 00 02 02 
15ca3     04 04 08 0E 
15ca7     14 10 04 00 
15cab     00 00 00 FA | 	byte	$fe, $00, $02, $02, $04, $04, $08, $0e, $14, $10, $04, $00, $00, $00, $00, $fa
15caf     F4 EC E4 DA 
15cb3     EE 08 00 02 
15cb7     00 00 00 00 
15cbb     00 00 00 00 | 	byte	$f4, $ec, $e4, $da, $ee, $08, $00, $02, $00, $00, $00, $00, $00, $00, $00, $00
15cbf     00 00 06 02 
15cc3     04 04 0E 10 
15cc7     14 0C 02 00 
15ccb     00 FE FC F8 | 	byte	$00, $00, $06, $02, $04, $04, $0e, $10, $14, $0c, $02, $00, $00, $fe, $fc, $f8
15ccf     F0 E8 E0 D8 
15cd3     F8 06 00 02 
15cd7     00 00 00 00 
15cdb     00 FE 00 00 | 	byte	$f0, $e8, $e0, $d8, $f8, $06, $00, $02, $00, $00, $00, $00, $00, $fe, $00, $00
15cdf     00 02 06 04 
15ce3     04 0C 10 14 
15ce7     14 08 00 00 
15ceb     00 FE FA F8 | 	byte	$00, $02, $06, $04, $04, $0c, $10, $14, $14, $08, $00, $00, $00, $fe, $fa, $f8
15cef     EC E6 E0 D6 
15cf3     00 04 02 00 
15cf7     00 00 00 00 
15cfb     00 00 00 00 | 	byte	$ec, $e6, $e0, $d6, $00, $04, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
15cff     00 04 04 06 
15d03     04 0E 12 14 
15d07     10 06 00 00 
15d0b     FE FE F8 F2 | 	byte	$00, $04, $04, $06, $04, $0e, $12, $14, $10, $06, $00, $00, $fe, $fe, $f8, $f2
15d0f     EC E4 DA D6 
15d13     04 02 04 00 
15d17     00 00 00 00 
15d1b     00 00 00 00 | 	byte	$ec, $e4, $da, $d6, $04, $02, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00
15d1f     00 06 04 06 
15d23     08 12 14 14 
15d27     0E 04 00 00 
15d2b     FE FC F4 F0 | 	byte	$00, $06, $04, $06, $08, $12, $14, $14, $0e, $04, $00, $00, $fe, $fc, $f4, $f0
15d2f     E8 E2 DA D6 
15d33     08 02 04 00 
15d37     00 00 00 00 
15d3b     00 00 00 00 | 	byte	$e8, $e2, $da, $d6, $08, $02, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00
15d3f     00 08 04 06 
15d43     0E 14 18 14 
15d47     0C 02 00 00 
15d4b     00 FA F4 EE | 	byte	$00, $08, $04, $06, $0e, $14, $18, $14, $0c, $02, $00, $00, $00, $fa, $f4, $ee
15d4f     E6 E0 D8 D6 
15d53     08 04 02 02 
15d57     00 00 00 00 
15d5b     00 00 00 00 | 	byte	$e6, $e0, $d8, $d6, $08, $04, $02, $02, $00, $00, $00, $00, $00, $00, $00, $00
15d5f     04 06 06 08 
15d63     14 18 1A 14 
15d67     08 02 00 FE 
15d6b     FC F8 F2 EC | 	byte	$04, $06, $06, $08, $14, $18, $1a, $14, $08, $02, $00, $fe, $fc, $f8, $f2, $ec
15d6f     E4 E0 D6 DA 
15d73     06 04 02 00 
15d77     00 00 00 00 
15d7b     00 00 00 00 | 	byte	$e4, $e0, $d6, $da, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
15d7f     06 06 06 0C 
15d83     14 1A 1A 10 
15d87     06 02 00 FE 
15d8b     FC F4 F0 EC | 	byte	$06, $06, $06, $0c, $14, $1a, $1a, $10, $06, $02, $00, $fe, $fc, $f4, $f0, $ec
15d8f     E4 DC D6 DC 
15d93     06 06 02 00 
15d97     00 00 00 00 
15d9b     00 00 00 00 | 	byte	$e4, $dc, $d6, $dc, $06, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
15d9f     08 06 08 12 
15da3     1A 1C 18 0E 
15da7     04 00 00 FC 
15dab     FA F2 EE E8 | 	byte	$08, $06, $08, $12, $1a, $1c, $18, $0e, $04, $00, $00, $fc, $fa, $f2, $ee, $e8
15daf     E2 DA D6 E4 
15db3     04 06 02 00 
15db7     00 00 00 00 
15dbb     00 00 00 02 | 	byte	$e2, $da, $d6, $e4, $04, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $02
15dbf     08 06 0C 14 
15dc3     1E 1E 18 0C 
15dc7     04 00 00 FC 
15dcb     F8 F2 EC E6 | 	byte	$08, $06, $0c, $14, $1e, $1e, $18, $0c, $04, $00, $00, $fc, $f8, $f2, $ec, $e6
15dcf     E2 D8 D6 E6 
15dd3     04 04 00 00 
15dd7     00 00 00 00 
15ddb     00 00 00 04 | 	byte	$e2, $d8, $d6, $e6, $04, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04
15ddf     08 06 10 1C 
15de3     20 1E 14 0C 
15de7     02 00 FE FA 
15deb     F4 F0 EC E6 | 	byte	$08, $06, $10, $1c, $20, $1e, $14, $0c, $02, $00, $fe, $fa, $f4, $f0, $ec, $e6
15def     E0 D6 D4 EE 
15df3     04 02 00 00 
15df7     00 00 00 00 
15dfb     00 00 00 06 | 	byte	$e0, $d6, $d4, $ee, $04, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
15dff     06 0C 14 24 
15e03     24 1E 12 08 
15e07     02 00 FC FA 
15e0b     F2 EE E8 E4 | 	byte	$06, $0c, $14, $24, $24, $1e, $12, $08, $02, $00, $fc, $fa, $f2, $ee, $e8, $e4
15e0f     E0 D6 D4 F2 
15e13     06 02 00 00 
15e17     00 00 00 00 
15e1b     00 00 00 08 | 	byte	$e0, $d6, $d4, $f2, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
15e1f     06 0E 1A 26 
15e23     24 1A 10 06 
15e27     02 00 FC F8 
15e2b     F0 EC E8 E4 | 	byte	$06, $0e, $1a, $26, $24, $1a, $10, $06, $02, $00, $fc, $f8, $f0, $ec, $e8, $e4
15e2f     DA D6 D4 FC 
15e33     06 02 00 00 
15e37     00 00 00 00 
15e3b     00 00 02 08 | 	byte	$da, $d6, $d4, $fc, $06, $02, $00, $00, $00, $00, $00, $00, $00, $00, $02, $08
15e3f     06 14 1E 28 
15e43     24 18 0E 06 
15e47     00 00 FA F4 
15e4b     F0 EC E8 E4 | 	byte	$06, $14, $1e, $28, $24, $18, $0e, $06, $00, $00, $fa, $f4, $f0, $ec, $e8, $e4
15e4f     DA D4 D0 FC 
15e53     04 00 00 00 
15e57     00 00 00 00 
15e5b     00 00 02 08 | 	byte	$da, $d4, $d0, $fc, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $08
15e5f     0C 18 28 2A 
15e63     20 14 0C 04 
15e67     00 FE F8 F2 
15e6b     EE EC E8 E2 | 	byte	$0c, $18, $28, $2a, $20, $14, $0c, $04, $00, $fe, $f8, $f2, $ee, $ec, $e8, $e2
15e6f     D8 D4 D4 00 
15e73     04 00 00 00 
15e77     00 00 00 00 
15e7b     00 00 04 08 | 	byte	$d8, $d4, $d4, $00, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $08
15e7f     10 1E 2A 2A 
15e83     1E 14 0C 02 
15e87     00 FC F8 F0 
15e8b     EE EC E6 E0 | 	byte	$10, $1e, $2a, $2a, $1e, $14, $0c, $02, $00, $fc, $f8, $f0, $ee, $ec, $e6, $e0
15e8f     D6 D4 D4 02 
15e93     02 00 00 00 
15e97     00 00 00 00 
15e9b     00 00 04 0C | 	byte	$d6, $d4, $d4, $02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $0c
15e9f     14 26 2C 28 
15ea3     1C 12 08 02 
15ea7     00 FA F4 F0 
15eab     EE EC E6 E0 | 	byte	$14, $26, $2c, $28, $1c, $12, $08, $02, $00, $fa, $f4, $f0, $ee, $ec, $e6, $e0
15eaf     D6 D4 D4 04 
15eb3     02 00 00 00 
15eb7     00 00 00 00 
15ebb     00 00 06 0E | 	byte	$d6, $d4, $d4, $04, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06, $0e
15ebf     1C 2A 30 26 
15ec3     1A 10 06 00 
15ec7     00 F8 F4 EE 
15ecb     EC E8 E4 DA | 	byte	$1c, $2a, $30, $26, $1a, $10, $06, $00, $00, $f8, $f4, $ee, $ec, $e8, $e4, $da
15ecf     D6 D4 D6 06 
15ed3     00 00 00 00 
15ed7     00 00 00 00 
15edb     00 02 08 12 | 	byte	$d6, $d4, $d6, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $08, $12
15edf     24 2C 30 20 
15ee3     18 0E 04 00 
15ee7     FE F8 F2 EE 
15eeb     EC E8 E2 D8 | 	byte	$24, $2c, $30, $20, $18, $0e, $04, $00, $fe, $f8, $f2, $ee, $ec, $e8, $e2, $d8
15eef     D4 D0 D8 06 
15ef3     00 00 00 00 
15ef7     00 00 00 00 
15efb     00 02 0E 14 | 	byte	$d4, $d0, $d8, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $0e, $14
15eff     28 30 2A 1E 
15f03     14 0C 02 00 
15f07     FC F4 F0 EE 
15f0b     EC E6 E0 D6 | 	byte	$28, $30, $2a, $1e, $14, $0c, $02, $00, $fc, $f4, $f0, $ee, $ec, $e6, $e0, $d6
15f0f     D4 D0 DC 04 
15f13     00 00 00 00 
15f17     00 FE 00 00 
15f1b     00 04 12 1E | 	byte	$d4, $d0, $dc, $04, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $04, $12, $1e
15f1f     2C 32 28 1C 
15f23     12 08 02 00 
15f27     FA F4 F0 EE 
15f2b     EC E6 DC D6 | 	byte	$2c, $32, $28, $1c, $12, $08, $02, $00, $fa, $f4, $f0, $ee, $ec, $e6, $dc, $d6
15f2f     D0 D0 EE 02 
15f33     00 00 00 00 
15f37     00 00 00 00 
15f3b     00 08 14 26 | 	byte	$d0, $d0, $ee, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $14, $26
15f3f     30 32 24 1A 
15f43     10 06 00 FE 
15f47     F8 F4 EE EC 
15f4b     E8 E4 DA D6 | 	byte	$30, $32, $24, $1a, $10, $06, $00, $fe, $f8, $f4, $ee, $ec, $e8, $e4, $da, $d6
15f4f     D0 D0 F8 02 
15f53     02 00 00 00 
15f57     00 00 00 00 
15f5b     02 0E 1A 2A | 	byte	$d0, $d0, $f8, $02, $02, $00, $00, $00, $00, $00, $00, $00, $02, $0e, $1a, $2a
15f5f     32 30 20 18 
15f63     0C 04 00 FC 
15f67     F4 F2 EE EC 
15f6b     E8 E2 D8 D4 | 	byte	$32, $30, $20, $18, $0c, $04, $00, $fc, $f4, $f2, $ee, $ec, $e8, $e2, $d8, $d4
15f6f     D0 D0 00 02 
15f73     02 00 00 00 
15f77     00 00 00 00 
15f7b     02 14 20 30 | 	byte	$d0, $d0, $00, $02, $02, $00, $00, $00, $00, $00, $00, $00, $02, $14, $20, $30
15f7f     32 2A 1E 14 
15f83     08 02 00 FA 
15f87     F4 F2 EE EC 
15f8b     E6 E0 D6 D0 | 	byte	$32, $2a, $1e, $14, $08, $02, $00, $fa, $f4, $f2, $ee, $ec, $e6, $e0, $d6, $d0
15f8f     D0 D0 04 02 
15f93     00 00 00 00 
15f97     00 00 00 02 
15f9b     08 18 28 32 | 	byte	$d0, $d0, $04, $02, $00, $00, $00, $00, $00, $00, $00, $02, $08, $18, $28, $32
15f9f     32 28 1C 12 
15fa3     06 00 00 FA 
15fa7     F4 F0 EC EC 
15fab     E6 DC D6 D0 | 	byte	$32, $28, $1c, $12, $06, $00, $00, $fa, $f4, $f0, $ec, $ec, $e6, $dc, $d6, $d0
15faf     D0 D6 06 04 
15fb3     00 00 00 00 
15fb7     00 00 00 02 
15fbb     0E 1E 2C 34 | 	byte	$d0, $d6, $06, $04, $00, $00, $00, $00, $00, $00, $00, $02, $0e, $1e, $2c, $34
15fbf     30 24 18 10 
15fc3     06 00 FE F8 
15fc7     F4 EE EC E8 
15fcb     E4 DA D4 D0 | 	byte	$30, $24, $18, $10, $06, $00, $fe, $f8, $f4, $ee, $ec, $e8, $e4, $da, $d4, $d0
15fcf     D0 DC 06 02 
15fd3     00 00 00 00 
15fd7     00 00 00 04 
15fdb     14 24 34 34 | 	byte	$d0, $dc, $06, $02, $00, $00, $00, $00, $00, $00, $00, $04, $14, $24, $34, $34
15fdf     2C 1E 14 0C 
15fe3     02 00 FC F4 
15fe7     F2 EE EC E6 
15feb     E2 D8 D0 D0 | 	byte	$2c, $1e, $14, $0c, $02, $00, $fc, $f4, $f2, $ee, $ec, $e6, $e2, $d8, $d0, $d0
15fef     D0 E6 06 02 
15ff3     00 00 00 00 
15ff7     00 00 02 08 
15ffb     1A 2A 34 32 | 	byte	$d0, $e6, $06, $02, $00, $00, $00, $00, $00, $00, $02, $08, $1a, $2a, $34, $32
15fff     2A 1C 14 08 
16003     02 00 FA F4 
16007     F0 EC EC E6 
1600b     E0 D6 D0 D0 | 	byte	$2a, $1c, $14, $08, $02, $00, $fa, $f4, $f0, $ec, $ec, $e6, $e0, $d6, $d0, $d0
1600f     D4 F4 06 00 
16013     00 00 00 00 
16017     00 00 02 0E 
1601b     20 30 34 30 | 	byte	$d4, $f4, $06, $00, $00, $00, $00, $00, $00, $00, $02, $0e, $20, $30, $34, $30
1601f     24 1A 10 06 
16023     00 FE F8 F4 
16027     F0 EC E8 E4 
1602b     DC D4 D0 D0 | 	byte	$24, $1a, $10, $06, $00, $fe, $f8, $f4, $f0, $ec, $e8, $e4, $dc, $d4, $d0, $d0
1602f     D6 00 06 00 
16033     00 00 00 00 
16037     00 00 06 14 
1603b     28 34 34 2A | 	byte	$d6, $00, $06, $00, $00, $00, $00, $00, $00, $00, $06, $14, $28, $34, $34, $2a
1603f     20 18 0C 02 
16043     00 FE F4 F2 
16047     EE EC E6 E2 
1604b     D8 D4 D0 D0 | 	byte	$20, $18, $0c, $02, $00, $fe, $f4, $f2, $ee, $ec, $e6, $e2, $d8, $d4, $d0, $d0
1604f     D6 06 04 00 
16053     00 00 00 00 
16057     00 02 0C 1C 
1605b     2C 36 32 2A | 	byte	$d6, $06, $04, $00, $00, $00, $00, $00, $00, $02, $0c, $1c, $2c, $36, $32, $2a
1605f     1C 14 08 02 
16063     00 FC F4 F0 
16067     EE EC E6 E0 
1606b     D6 D0 D0 D4 | 	byte	$1c, $14, $08, $02, $00, $fc, $f4, $f0, $ee, $ec, $e6, $e0, $d6, $d0, $d0, $d4
1606f     DA 0C 02 00 
16073     00 00 00 00 
16077     00 04 12 24 
1607b     32 36 30 24 | 	byte	$da, $0c, $02, $00, $00, $00, $00, $00, $00, $04, $12, $24, $32, $36, $30, $24
1607f     1A 10 06 00 
16083     00 FA F4 F0 
16087     EC E8 E4 DC 
1608b     D6 D4 D0 D6 | 	byte	$1a, $10, $06, $00, $00, $fa, $f4, $f0, $ec, $e8, $e4, $dc, $d6, $d4, $d0, $d6
1608f     E4 0C 02 00 
16093     00 00 00 00 
16097     00 08 1A 2A 
1609b     36 34 2A 20 | 	byte	$e4, $0c, $02, $00, $00, $00, $00, $00, $00, $08, $1a, $2a, $36, $34, $2a, $20
1609f     18 0C 04 00 
160a3     FE F8 F2 EE 
160a7     EC E6 E2 DA 
160ab     D4 D4 D0 D8 | 	byte	$18, $0c, $04, $00, $fe, $f8, $f2, $ee, $ec, $e6, $e2, $da, $d4, $d4, $d0, $d8
160af     F4 06 02 00 
160b3     00 00 00 00 
160b7     02 0E 1E 30 
160bb     36 32 28 1C | 	byte	$f4, $06, $02, $00, $00, $00, $00, $00, $02, $0e, $1e, $30, $36, $32, $28, $1c
160bf     14 08 02 00 
160c3     FC F8 F0 EE 
160c7     EC E6 E0 D8 
160cb     D4 D0 D6 D8 | 	byte	$14, $08, $02, $00, $fc, $f8, $f0, $ee, $ec, $e6, $e0, $d8, $d4, $d0, $d6, $d8
160cf     00 06 00 00 
160d3     00 00 00 00 
160d7     04 14 26 34 
160db     36 2C 24 1A | 	byte	$00, $06, $00, $00, $00, $00, $00, $00, $04, $14, $26, $34, $36, $2c, $24, $1a
160df     10 06 00 00 
160e3     FA F4 F0 EC 
160e7     E8 E4 DC D6 
160eb     D4 D0 D6 DA | 	byte	$10, $06, $00, $00, $fa, $f4, $f0, $ec, $e8, $e4, $dc, $d6, $d4, $d0, $d6, $da
160ef     08 06 00 00 
160f3     00 00 00 02 
160f7     08 1A 2A 36 
160fb     34 2A 1E 18 | 	byte	$08, $06, $00, $00, $00, $00, $00, $02, $08, $1a, $2a, $36, $34, $2a, $1e, $18
160ff     0C 04 00 FE 
16103     F8 F2 EE EC 
16107     E6 E2 DA D6 
1610b     D0 D4 D8 E2 | 	byte	$0c, $04, $00, $fe, $f8, $f2, $ee, $ec, $e6, $e2, $da, $d6, $d0, $d4, $d8, $e2
1610f     0C 04 00 00 
16113     00 02 00 02 
16117     10 20 32 36 
1611b     32 26 1C 12 | 	byte	$0c, $04, $00, $00, $00, $02, $00, $02, $10, $20, $32, $36, $32, $26, $1c, $12
1611f     08 02 00 FC 
16123     F8 F0 EE EC 
16127     E4 E0 D8 D6 
1612b     D0 D6 DA EC | 	byte	$08, $02, $00, $fc, $f8, $f0, $ee, $ec, $e4, $e0, $d8, $d6, $d0, $d6, $da, $ec
1612f     08 04 00 00 
16133     02 00 02 06 
16137     18 28 36 34 
1613b     2A 20 18 0E | 	byte	$08, $04, $00, $00, $02, $00, $02, $06, $18, $28, $36, $34, $2a, $20, $18, $0e
1613f     04 02 00 FA 
16143     F4 F0 EC E8 
16147     E4 DA D6 D4 
1614b     D4 D8 DC F8 | 	byte	$04, $02, $00, $fa, $f4, $f0, $ec, $e8, $e4, $da, $d6, $d4, $d4, $d8, $dc, $f8
1614f     06 02 00 00 
16153     02 00 02 0E 
16157     1E 30 36 32 
1615b     28 1E 14 0C | 	byte	$06, $02, $00, $00, $02, $00, $02, $0e, $1e, $30, $36, $32, $28, $1e, $14, $0c
1615f     04 00 FC FA 
16163     F2 EE EC E6 
16167     E0 D8 D6 D4 
1616b     D6 D8 DC 04 | 	byte	$04, $00, $fc, $fa, $f2, $ee, $ec, $e6, $e0, $d8, $d6, $d4, $d6, $d8, $dc, $04
1616f     06 02 00 02 
16173     02 00 04 14 
16177     24 34 36 2C 
1617b     24 1A 10 06 | 	byte	$06, $02, $00, $02, $02, $00, $04, $14, $24, $34, $36, $2c, $24, $1a, $10, $06
1617f     02 00 FC F8 
16183     F0 EC E8 E4 
16187     DC D8 D6 D4 
1618b     D8 DA DC 0C | 	byte	$02, $00, $fc, $f8, $f0, $ec, $e8, $e4, $dc, $d8, $d6, $d4, $d8, $da, $dc, $0c
1618f     04 02 00 04 
16193     02 02 08 1A 
16197     2A 36 34 28 
1619b     20 14 0E 06 | 	byte	$04, $02, $00, $04, $02, $02, $08, $1a, $2a, $36, $34, $28, $20, $14, $0e, $06
1619f     02 00 FA F4 
161a3     F0 EC E8 E2 
161a7     DA D8 D6 D6 
161ab     DA DC E8 08 | 	byte	$02, $00, $fa, $f4, $f0, $ec, $e8, $e2, $da, $d8, $d6, $d6, $da, $dc, $e8, $08
161af     06 02 02 02 
161b3     02 04 12 1E 
161b7     30 36 2C 24 
161bb     1C 12 08 04 | 	byte	$06, $02, $02, $02, $02, $04, $12, $1e, $30, $36, $2c, $24, $1c, $12, $08, $04
161bf     00 FE FA F2 
161c3     EC EC E6 E0 
161c7     D8 D6 D6 D8 
161cb     DC DC F8 06 | 	byte	$00, $fe, $fa, $f2, $ec, $ec, $e6, $e0, $d8, $d6, $d6, $d8, $dc, $dc, $f8, $06
161cf     06 00 04 02 
161d3     04 08 14 28 
161d7     32 36 2A 20 
161db     18 10 08 02 | 	byte	$06, $00, $04, $02, $04, $08, $14, $28, $32, $36, $2a, $20, $18, $10, $08, $02
161df     00 FC F4 F0 
161e3     EC E8 E2 DA 
161e7     D8 D6 D8 DA 
161eb     DC DC 04 06 | 	byte	$00, $fc, $f4, $f0, $ec, $e8, $e2, $da, $d8, $d6, $d8, $da, $dc, $dc, $04, $06
161ef     04 02 02 04 
161f3     04 0E 1A 2A 
161f7     34 32 26 1E 
161fb     14 0C 06 00 | 	byte	$04, $02, $02, $04, $04, $0e, $1a, $2a, $34, $32, $26, $1e, $14, $0c, $06, $00
161ff     00 FA F2 EE 
16203     EC E6 E0 DA 
16207     D8 D8 DA DC 
1620b     DC E0 0C 08 | 	byte	$00, $fa, $f2, $ee, $ec, $e6, $e0, $da, $d8, $d8, $da, $dc, $dc, $e0, $0c, $08
1620f     04 04 02 04 
16213     08 12 24 30 
16217     34 2A 24 1A 
1621b     12 08 04 00 | 	byte	$04, $04, $02, $04, $08, $12, $24, $30, $34, $2a, $24, $1a, $12, $08, $04, $00
1621f     00 F8 F0 EC 
16223     E8 E2 DC DA 
16227     D6 DA DA DC 
1622b     DC EC 0C 06 | 	byte	$00, $f8, $f0, $ec, $e8, $e2, $dc, $da, $d6, $da, $da, $dc, $dc, $ec, $0c, $06
1622f     06 02 04 06 
16233     0E 18 28 32 
16237     30 26 1E 14 
1623b     0E 08 02 00 | 	byte	$06, $02, $04, $06, $0e, $18, $28, $32, $30, $26, $1e, $14, $0e, $08, $02, $00
1623f     FC F4 EE EC 
16243     E6 E0 DA D8 
16247     D8 DC DC DC 
1624b     DC FC 0C 06 | 	byte	$fc, $f4, $ee, $ec, $e6, $e0, $da, $d8, $d8, $dc, $dc, $dc, $dc, $fc, $0c, $06
1624f     08 02 04 08 
16253     10 1E 2A 32 
16257     2A 24 1A 14 
1625b     0E 06 00 00 | 	byte	$08, $02, $04, $08, $10, $1e, $2a, $32, $2a, $24, $1a, $14, $0e, $06, $00, $00
1625f     FA F2 EC E8 
16263     E2 DC DA D8 
16267     DC DC E0 E0 
1626b     DC 06 08 08 | 	byte	$fa, $f2, $ec, $e8, $e2, $dc, $da, $d8, $dc, $dc, $e0, $e0, $dc, $06, $08, $08
1626f     06 04 06 0E 
16273     14 24 30 30 
16277     28 20 18 10 
1627b     0C 04 00 FE | 	byte	$06, $04, $06, $0e, $14, $24, $30, $30, $28, $20, $18, $10, $0c, $04, $00, $fe
1627f     F8 F0 EC E6 
16283     E0 DA D8 DA 
16287     DC E0 E0 E0 
1628b     E0 0E 08 08 | 	byte	$f8, $f0, $ec, $e6, $e0, $da, $d8, $da, $dc, $e0, $e0, $e0, $e0, $0e, $08, $08
1628f     06 04 0C 10 
16293     1C 28 30 2A 
16297     26 1C 14 10 
1629b     08 02 00 FC | 	byte	$06, $04, $0c, $10, $1c, $28, $30, $2a, $26, $1c, $14, $10, $08, $02, $00, $fc
1629f     F4 EE E8 E4 
162a3     DC DA D8 DC 
162a7     E0 E0 E0 E0 
162ab     EC 08 0C 06 | 	byte	$f4, $ee, $e8, $e4, $dc, $da, $d8, $dc, $e0, $e0, $e0, $e0, $ec, $08, $0c, $06
162af     06 06 0E 14 
162b3     1E 2A 2C 2A 
162b7     20 18 12 0E 
162bb     06 02 00 FA | 	byte	$06, $06, $0e, $14, $1e, $2a, $2c, $2a, $20, $18, $12, $0e, $06, $02, $00, $fa
162bf     F2 EC E6 E0 
162c3     DC D8 DA E0 
162c7     E2 E0 E0 DC 
162cb     FC 08 0C 08 | 	byte	$f2, $ec, $e6, $e0, $dc, $d8, $da, $e0, $e2, $e0, $e0, $dc, $fc, $08, $0c, $08
162cf     06 08 0E 18 
162d3     26 2C 2A 26 
162d7     1C 14 12 0E 
162db     04 00 FE F8 | 	byte	$06, $08, $0e, $18, $26, $2c, $2a, $26, $1c, $14, $12, $0e, $04, $00, $fe, $f8
162df     F0 EC E4 DC 
162e3     DA D8 DC E0 
162e7     E2 E2 E0 E0 
162eb     04 0C 08 08 | 	byte	$f0, $ec, $e4, $dc, $da, $d8, $dc, $e0, $e2, $e2, $e0, $e0, $04, $0c, $08, $08
162ef     08 0C 12 1C 
162f3     2A 2C 2A 24 
162f7     1A 14 10 0C 
162fb     04 00 FC F4 | 	byte	$08, $0c, $12, $1c, $2a, $2c, $2a, $24, $1a, $14, $10, $0c, $04, $00, $fc, $f4
162ff     EE E8 E2 DC 
16303     DA DA E0 E2 
16307     E2 E2 E0 E2 
1630b     0C 0E 08 08 | 	byte	$ee, $e8, $e2, $dc, $da, $da, $e0, $e2, $e2, $e2, $e0, $e2, $0c, $0e, $08, $08
1630f     0C 0E 14 20 
16313     2A 2A 28 1E 
16317     18 14 10 06 
1631b     02 00 FA F2 | 	byte	$0c, $0e, $14, $20, $2a, $2a, $28, $1e, $18, $14, $10, $06, $02, $00, $fa, $f2
1631f     EC E6 E0 DC 
16323     D8 DC E0 E4 
16327     E4 E0 E2 E6 
1632b     0E 0C 0C 0C | 	byte	$ec, $e6, $e0, $dc, $d8, $dc, $e0, $e4, $e4, $e0, $e2, $e6, $0e, $0c, $0c, $0c
1632f     0C 10 1A 26 
16333     2A 2A 24 1C 
16337     14 12 0E 06 
1633b     00 FE F8 F0 | 	byte	$0c, $10, $1a, $26, $2a, $2a, $24, $1c, $14, $12, $0e, $06, $00, $fe, $f8, $f0
1633f     EC E4 DC DA 
16343     DA E0 E2 E4 
16347     E4 E0 E2 F2 
1634b     0C 0C 0C 0C | 	byte	$ec, $e4, $dc, $da, $da, $e0, $e2, $e4, $e4, $e0, $e2, $f2, $0c, $0c, $0c, $0c
1634f     0C 14 1E 2A 
16353     2A 28 20 1A 
16357     14 12 0C 04 
1635b     00 FC F4 EE | 	byte	$0c, $14, $1e, $2a, $2a, $28, $20, $1a, $14, $12, $0c, $04, $00, $fc, $f4, $ee
1635f     E8 E0 DC DA 
16363     DC E0 E4 E4 
16367     E4 E2 E0 00 
1636b     0C 0C 0C 0E | 	byte	$e8, $e0, $dc, $da, $dc, $e0, $e4, $e4, $e4, $e2, $e0, $00, $0c, $0c, $0c, $0e
1636f     0E 18 24 2A 
16373     2A 26 1C 18 
16377     14 10 08 02 
1637b     00 FA F2 EC | 	byte	$0e, $18, $24, $2a, $2a, $26, $1c, $18, $14, $10, $08, $02, $00, $fa, $f2, $ec
1637f     E6 E0 DA DA 
16383     E0 E2 E4 E4 
16387     E2 E2 E0 08 
1638b     0C 0C 0E 0E | 	byte	$e6, $e0, $da, $da, $e0, $e2, $e4, $e4, $e2, $e2, $e0, $08, $0c, $0c, $0e, $0e
1638f     12 1C 28 2A 
16393     2A 20 1A 14 
16397     12 0E 08 00 
1639b     FE F8 F0 EC | 	byte	$12, $1c, $28, $2a, $2a, $20, $1a, $14, $12, $0e, $08, $00, $fe, $f8, $f0, $ec
1639f     E4 DC DA DC 
163a3     E0 E4 E4 E4 
163a7     E2 E2 E4 0E 
163ab     0C 0E 10 0E | 	byte	$e4, $dc, $da, $dc, $e0, $e4, $e4, $e4, $e2, $e2, $e4, $0e, $0c, $0e, $10, $0e
163af     14 1E 2A 2A 
163b3     26 1E 18 14 
163b7     12 0C 06 00 
163bb     FC F4 EE E8 | 	byte	$14, $1e, $2a, $2a, $26, $1e, $18, $14, $12, $0c, $06, $00, $fc, $f4, $ee, $e8
163bf     E2 DC DA E0 
163c3     E2 E4 E6 E4 
163c7     E2 E0 EC 0C 
163cb     0E 0E 10 10 | 	byte	$e2, $dc, $da, $e0, $e2, $e4, $e6, $e4, $e2, $e0, $ec, $0c, $0e, $0e, $10, $10
163cf     1A 26 2A 2A 
163d3     24 1C 18 14 
163d7     10 08 02 00 
163db     FA F2 EC E6 | 	byte	$1a, $26, $2a, $2a, $24, $1c, $18, $14, $10, $08, $02, $00, $fa, $f2, $ec, $e6
163df     E0 DA DC E0 
163e3     E2 E4 E6 E4 
163e7     E4 E2 F8 0C 
163eb     0E 10 10 14 | 	byte	$e0, $da, $dc, $e0, $e2, $e4, $e6, $e4, $e4, $e2, $f8, $0c, $0e, $10, $10, $14
163ef     1C 2A 2A 28 
163f3     1E 1A 14 12 
163f7     0E 08 00 FE 
163fb     FA F0 EC E4 | 	byte	$1c, $2a, $2a, $28, $1e, $1a, $14, $12, $0e, $08, $00, $fe, $fa, $f0, $ec, $e4
163ff     E0 DA DC E0 
16403     E4 E4 E6 E4 
16407     E2 E2 00 0C 
1640b     0E 10 10 18 | 	byte	$e0, $da, $dc, $e0, $e4, $e4, $e6, $e4, $e2, $e2, $00, $0c, $0e, $10, $10, $18
1640f     24 2A 2A 26 
16413     1C 18 14 12 
16417     0C 06 00 FE 
1641b     F8 F0 E8 E2 | 	byte	$24, $2a, $2a, $26, $1c, $18, $14, $12, $0c, $06, $00, $fe, $f8, $f0, $e8, $e2
1641f     DC DA E0 E2 
16423     E4 E6 E4 E4 
16427     E2 E4 06 0E 
1642b     10 12 12 1A | 	byte	$dc, $da, $e0, $e2, $e4, $e6, $e4, $e4, $e2, $e4, $06, $0e, $10, $12, $12, $1a
1642f     28 2A 2A 24 
16433     1A 18 14 10 
16437     0C 04 00 FC 
1643b     F4 EE E6 E2 | 	byte	$28, $2a, $2a, $24, $1a, $18, $14, $10, $0c, $04, $00, $fc, $f4, $ee, $e6, $e2
1643f     DC DC E0 E4 
16443     E4 E6 E4 E4 
16447     E2 E6 0C 0E 
1644b     12 10 14 1E | 	byte	$dc, $dc, $e0, $e4, $e4, $e6, $e4, $e4, $e2, $e6, $0c, $0e, $12, $10, $14, $1e
1644f     2A 2A 28 1E 
16453     1A 14 12 0E 
16457     08 02 00 FA 
1645b     F2 EC E4 E0 | 	byte	$2a, $2a, $28, $1e, $1a, $14, $12, $0e, $08, $02, $00, $fa, $f2, $ec, $e4, $e0
1645f     DA E0 E2 E4 
16463     E4 E6 E4 E2 
16467     E4 E8 10 0E 
1646b     12 12 1A 24 | 	byte	$da, $e0, $e2, $e4, $e4, $e6, $e4, $e2, $e4, $e8, $10, $0e, $12, $12, $1a, $24
1646f     2A 2A 26 1C 
16473     18 14 12 0E 
16477     06 00 FE F8 
1647b     F0 EC E4 E0 | 	byte	$2a, $2a, $26, $1c, $18, $14, $12, $0e, $06, $00, $fe, $f8, $f0, $ec, $e4, $e0
1647f     DC E0 E2 E4 
16483     E4 E4 E4 E2 
16487     E4 EE 10 10 
1648b     12 14 1C 28 | 	byte	$dc, $e0, $e2, $e4, $e4, $e4, $e4, $e2, $e4, $ee, $10, $10, $12, $14, $1c, $28
1648f     2A 2A 24 1A 
16493     14 14 10 0C 
16497     04 00 FC F8 
1649b     F0 E8 E2 E0 | 	byte	$2a, $2a, $24, $1a, $14, $14, $10, $0c, $04, $00, $fc, $f8, $f0, $e8, $e2, $e0
1649f     DC E0 E4 E4 
164a3     E4 E4 E4 E2 
164a7     E6 F8 10 12 
164ab     12 18 20 2A | 	byte	$dc, $e0, $e4, $e4, $e4, $e4, $e4, $e2, $e6, $f8, $10, $12, $12, $18, $20, $2a
164af     2A 28 20 1A 
164b3     14 12 0E 0C 
164b7     02 00 FC F4 
164bb     EE E6 E2 DC | 	byte	$2a, $28, $20, $1a, $14, $12, $0e, $0c, $02, $00, $fc, $f4, $ee, $e6, $e2, $dc
164bf     E0 E2 E4 E4 
164c3     E4 E4 E4 E4 
164c7     E4 00 10 12 
164cb     14 1C 26 2C | 	byte	$e0, $e2, $e4, $e4, $e4, $e4, $e4, $e4, $e4, $00, $10, $12, $14, $1c, $26, $2c
164cf     2A 26 1E 18 
164d3     14 12 0E 08 
164d7     00 FE FA F2 
164db     EC E4 E2 DC | 	byte	$2a, $26, $1e, $18, $14, $12, $0e, $08, $00, $fe, $fa, $f2, $ec, $e4, $e2, $dc
164df     E0 E2 E4 E4 
164e3     E4 E4 E2 E4 
164e7     E4 04 10 14 
164eb     14 1E 2A 2C | 	byte	$e0, $e2, $e4, $e4, $e4, $e4, $e2, $e4, $e4, $04, $10, $14, $14, $1e, $2a, $2c
164ef     2A 24 1C 14 
164f3     14 10 0C 06 
164f7     00 FE FA F2 
164fb     EC E4 E2 DC | 	byte	$2a, $24, $1c, $14, $14, $10, $0c, $06, $00, $fe, $fa, $f2, $ec, $e4, $e2, $dc
164ff     E2 E2 E4 E4 
16503     E4 E4 E2 E6 
16507     E6 0C 12 14 
1650b     1A 24 2A 2C | 	byte	$e2, $e2, $e4, $e4, $e4, $e4, $e2, $e6, $e6, $0c, $12, $14, $1a, $24, $2a, $2c
1650f     28 24 1A 14 
16513     14 10 0C 02 
16517     00 FC F8 F0 
1651b     E8 E4 E0 DC | 	byte	$28, $24, $1a, $14, $14, $10, $0c, $02, $00, $fc, $f8, $f0, $e8, $e4, $e0, $dc
1651f     E2 E4 E4 E4 
16523     E4 E4 E2 E6 
16527     E6 10 12 14 
1652b     1E 28 30 2A | 	byte	$e2, $e4, $e4, $e4, $e4, $e4, $e2, $e6, $e6, $10, $12, $14, $1e, $28, $30, $2a
1652f     28 20 18 14 
16533     12 0E 08 00 
16537     00 FC F4 EE 
1653b     E6 E4 E0 E0 | 	byte	$28, $20, $18, $14, $12, $0e, $08, $00, $00, $fc, $f4, $ee, $e6, $e4, $e0, $e0
1653f     E2 E4 E4 E4 
16543     E4 E4 E4 E6 
16547     EC 12 12 14 
1654b     24 2A 30 2A | 	byte	$e2, $e4, $e4, $e4, $e4, $e4, $e4, $e6, $ec, $12, $12, $14, $24, $2a, $30, $2a
1654f     26 1C 18 14 
16553     10 0C 06 00 
16557     FE FC F4 EE 
1655b     E6 E4 DC E2 | 	byte	$26, $1c, $18, $14, $10, $0c, $06, $00, $fe, $fc, $f4, $ee, $e6, $e4, $dc, $e2
1655f     E2 E4 E2 E4 
16563     E4 E2 E4 E6 
16567     EE 12 14 1A 
1656b     28 2C 30 28 | 	byte	$e2, $e4, $e2, $e4, $e4, $e2, $e4, $e6, $ee, $12, $14, $1a, $28, $2c, $30, $28
1656f     24 1C 14 14 
16573     10 08 04 00 
16577     FE FA F2 EC 
1657b     E4 E2 DC E2 | 	byte	$24, $1c, $14, $14, $10, $08, $04, $00, $fe, $fa, $f2, $ec, $e4, $e2, $dc, $e2
1657f     E2 E4 E2 E4 
16583     E4 E2 E6 E6 
16587     F2 12 14 1E 
1658b     2A 30 2C 28 | 	byte	$e2, $e4, $e2, $e4, $e4, $e2, $e6, $e6, $f2, $12, $14, $1e, $2a, $30, $2c, $28
1658f     20 1A 14 12 
16593     0E 08 02 00 
16597     FC FA F2 EC 
1659b     E4 E2 E0 E2 | 	byte	$20, $1a, $14, $12, $0e, $08, $02, $00, $fc, $fa, $f2, $ec, $e4, $e2, $e0, $e2
1659f     E4 E4 E2 E4 
165a3     E4 E4 E6 E6 
165a7     F8 12 1A 24 
165ab     2C 32 2A 26 | 	byte	$e4, $e4, $e2, $e4, $e4, $e4, $e6, $e6, $f8, $12, $1a, $24, $2c, $32, $2a, $26
165af     20 18 14 10 
165b3     0C 06 00 00 
165b7     FC F8 F0 E8 
165bb     E4 E2 E0 E2 | 	byte	$20, $18, $14, $10, $0c, $06, $00, $00, $fc, $f8, $f0, $e8, $e4, $e2, $e0, $e2
165bf     E4 E2 E4 E4 
165c3     E4 E4 E6 E6 
165c7     00 14 1C 28 
165cb     30 32 2A 26 | 	byte	$e4, $e2, $e4, $e4, $e4, $e4, $e6, $e6, $00, $14, $1c, $28, $30, $32, $2a, $26
165cf     1E 18 14 10 
165d3     08 06 00 00 
165d7     FC F8 EE E8 
165db     E4 E0 E2 E2 | 	byte	$1e, $18, $14, $10, $08, $06, $00, $00, $fc, $f8, $ee, $e8, $e4, $e0, $e2, $e2
165df     E4 E2 E4 E2 
165e3     E4 E4 E6 E8 
165e7     00 14 20 2A 
165eb     32 30 28 24 | 	byte	$e4, $e2, $e4, $e2, $e4, $e4, $e6, $e8, $00, $14, $20, $2a, $32, $30, $28, $24
165ef     1C 14 12 0E 
165f3     08 04 00 FE 
165f7     FC F4 EE E6 
165fb     E4 E0 E2 E2 | 	byte	$1c, $14, $12, $0e, $08, $04, $00, $fe, $fc, $f4, $ee, $e6, $e4, $e0, $e2, $e2
165ff     E4 E2 E4 E2 
16603     E4 E6 E6 E8 
16607     04 1A 26 30 
1660b     32 2C 28 20 | 	byte	$e4, $e2, $e4, $e2, $e4, $e6, $e6, $e8, $04, $1a, $26, $30, $32, $2c, $28, $20
1660f     1A 14 12 0E 
16613     06 02 00 FE 
16617     FA F2 EC E6 
1661b     E4 E0 E4 E2 | 	byte	$1a, $14, $12, $0e, $06, $02, $00, $fe, $fa, $f2, $ec, $e6, $e4, $e0, $e4, $e2
1661f     E4 E2 E4 E2 
16623     E4 E6 E6 E8 
16627     0E 1E 2A 32 
1662b     32 2A 26 20 | 	byte	$e4, $e2, $e4, $e2, $e4, $e6, $e6, $e8, $0e, $1e, $2a, $32, $32, $2a, $26, $20
1662f     18 14 10 0C 
16633     06 02 00 FE 
16637     FA F2 EC E6 
1663b     E4 E2 E4 E4 | 	byte	$18, $14, $10, $0c, $06, $02, $00, $fe, $fa, $f2, $ec, $e6, $e4, $e2, $e4, $e4
1663f     E2 E2 E4 E4 
16643     E4 E6 E6 EC 
16647     14 24 2C 34 
1664b     30 2A 24 1E | 	byte	$e2, $e2, $e4, $e4, $e4, $e6, $e6, $ec, $14, $24, $2c, $34, $30, $2a, $24, $1e
1664f     18 12 0E 08 
16653     06 00 00 FE 
16657     F8 F0 EC E6 
1665b     E4 E2 E4 E4 | 	byte	$18, $12, $0e, $08, $06, $00, $00, $fe, $f8, $f0, $ec, $e6, $e4, $e2, $e4, $e4
1665f     E2 E2 E2 E4 
16663     E4 E8 E8 EC 
16667     1A 28 30 32 
1666b     30 28 24 1C | 	byte	$e2, $e2, $e2, $e4, $e4, $e8, $e8, $ec, $1a, $28, $30, $32, $30, $28, $24, $1c
1666f     14 12 0E 08 
16673     04 00 00 FC 
16677     F8 F0 E8 E6 
1667b     E4 E2 E4 E4 | 	byte	$14, $12, $0e, $08, $04, $00, $00, $fc, $f8, $f0, $e8, $e6, $e4, $e2, $e4, $e4
1667f     E2 E4 E2 E4 
16683     E6 E8 E8 EE 
16687     20 2A 32 32 
1668b     2C 26 20 1A | 	byte	$e2, $e4, $e2, $e4, $e6, $e8, $e8, $ee, $20, $2a, $32, $32, $2c, $26, $20, $1a
1668f     14 10 0C 06 
16693     04 00 00 FC 
16697     F4 EE E8 E6 
1669b     E2 E4 E4 E4 | 	byte	$14, $10, $0c, $06, $04, $00, $00, $fc, $f4, $ee, $e8, $e6, $e2, $e4, $e4, $e4
1669f     E2 E4 E2 E4 
166a3     E6 E8 E8 F4 
166a7     28 30 34 30 
166ab     2A 26 1E 18 | 	byte	$e2, $e4, $e2, $e4, $e6, $e8, $e8, $f4, $28, $30, $34, $30, $2a, $26, $1e, $18
166af     14 0E 08 06 
166b3     02 00 FE FA 
166b7     F2 EC E8 E6 
166bb     E2 E4 E4 E4 | 	byte	$14, $0e, $08, $06, $02, $00, $fe, $fa, $f2, $ec, $e8, $e6, $e2, $e4, $e4, $e4
166bf     E2 E4 E4 E4 
166c3     E6 E8 EC FC 
166c7     2A 32 34 30 
166cb     2A 24 1C 14 | 	byte	$e2, $e4, $e4, $e4, $e6, $e8, $ec, $fc, $2a, $32, $34, $30, $2a, $24, $1c, $14
166cf     12 0E 08 06 
166d3     02 00 FE FA 
166d7     F2 EC E6 E6 
166db     E4 E4 E4 E4 | 	byte	$12, $0e, $08, $06, $02, $00, $fe, $fa, $f2, $ec, $e6, $e6, $e4, $e4, $e4, $e4
166df     E2 E2 E4 E4 
166e3     E8 E8 EE 00 
166e7     30 34 32 2C 
166eb     28 20 1C 14 | 	byte	$e2, $e2, $e4, $e4, $e8, $e8, $ee, $00, $30, $34, $32, $2c, $28, $20, $1c, $14
166ef     10 0C 06 04 
166f3     00 00 FC F8 
166f7     F0 EC E6 E4 
166fb     E4 E4 E4 E2 | 	byte	$10, $0c, $06, $04, $00, $00, $fc, $f8, $f0, $ec, $e6, $e4, $e4, $e4, $e4, $e2
166ff     E4 E2 E6 E6 
16703     E8 E8 F2 0E 
16707     32 34 30 2A 
1670b     26 1E 18 14 | 	byte	$e4, $e2, $e6, $e6, $e8, $e8, $f2, $0e, $32, $34, $30, $2a, $26, $1e, $18, $14
1670f     10 0C 06 04 
16713     00 00 FC F4 
16717     EE E8 E6 E4 
1671b     E6 E4 E4 E2 | 	byte	$10, $0c, $06, $04, $00, $00, $fc, $f4, $ee, $e8, $e6, $e4, $e6, $e4, $e4, $e2
1671f     E4 E4 E6 E6 
16723     E8 EC F8 1A 
16727     34 34 2C 2A 
1672b     24 1E 14 12 | 	byte	$e4, $e4, $e6, $e6, $e8, $ec, $f8, $1a, $34, $34, $2c, $2a, $24, $1e, $14, $12
1672f     0E 08 06 04 
16733     00 FE FA F2 
16737     EC E8 E6 E4 
1673b     E6 E4 E4 E2 | 	byte	$0e, $08, $06, $04, $00, $fe, $fa, $f2, $ec, $e8, $e6, $e4, $e6, $e4, $e4, $e2
1673f     E4 E4 E6 E8 
16743     E8 EE FE 26 
16747     36 32 2C 28 
1674b     20 1C 14 10 | 	byte	$e4, $e4, $e6, $e8, $e8, $ee, $fe, $26, $36, $32, $2c, $28, $20, $1c, $14, $10
1674f     0C 08 06 02 
16753     00 FE FA F2 
16757     EC E8 E6 E6 
1675b     E6 E6 E4 E2 | 	byte	$0c, $08, $06, $02, $00, $fe, $fa, $f2, $ec, $e8, $e6, $e6, $e6, $e6, $e4, $e2
1675f     E4 E6 E6 E8 
16763     E8 F2 00 2C 
16767     36 30 2A 26 
1676b     1E 18 14 10 | 	byte	$e4, $e6, $e6, $e8, $e8, $f2, $00, $2c, $36, $30, $2a, $26, $1e, $18, $14, $10
1676f     0C 06 04 00 
16773     00 FC F8 F0 
16777     EC E8 E6 E6 
1677b     E6 E6 E4 E4 | 	byte	$0c, $06, $04, $00, $00, $fc, $f8, $f0, $ec, $e8, $e6, $e6, $e6, $e6, $e4, $e4
1677f     E4 E6 E6 E8 
16783     EC FA 06 34 
16787     34 2C 2A 24 
1678b     1C 14 12 0E | 	byte	$e4, $e6, $e6, $e8, $ec, $fa, $06, $34, $34, $2c, $2a, $24, $1c, $14, $12, $0e
1678f     08 06 04 00 
16793     FE FC F4 F0 
16797     EC E8 E6 E8 
1679b     E6 E4 E4 E4 | 	byte	$08, $06, $04, $00, $fe, $fc, $f4, $f0, $ec, $e8, $e6, $e8, $e6, $e4, $e4, $e4
1679f     E4 E6 E8 E8 
167a3     F0 00 0E 38 
167a7     32 2C 28 20 
167ab     1A 14 10 0C | 	byte	$e4, $e6, $e8, $e8, $f0, $00, $0e, $38, $32, $2c, $28, $20, $1a, $14, $10, $0c
167af     08 06 04 00 
167b3     FE FA F2 EE 
167b7     E8 E8 E6 E8 
167bb     E6 E4 E4 E4 | 	byte	$08, $06, $04, $00, $fe, $fa, $f2, $ee, $e8, $e8, $e6, $e8, $e6, $e4, $e4, $e4
167bf     E6 E6 E8 EC 
167c3     F4 02 14 38 
167c7     30 2A 26 1E 
167cb     18 12 0E 0C | 	byte	$e6, $e6, $e8, $ec, $f4, $02, $14, $38, $30, $2a, $26, $1e, $18, $12, $0e, $0c
167cf     06 06 02 00 
167d3     FC F8 F2 EC 
167d7     E8 E6 E8 E8 
167db     E6 E4 E4 E4 | 	byte	$06, $06, $02, $00, $fc, $f8, $f2, $ec, $e8, $e6, $e8, $e8, $e6, $e4, $e4, $e4
167df     E6 E8 E8 EC 
167e3     FC 06 1A 36 
167e7     2C 2A 24 1C 
167eb     14 10 0E 0C | 	byte	$e6, $e8, $e8, $ec, $fc, $06, $1a, $36, $2c, $2a, $24, $1c, $14, $10, $0e, $0c
167ef     06 04 00 00 
167f3     FC F8 F0 EC 
167f7     E8 E6 E8 E8 
167fb     E6 E4 E4 E6 | 	byte	$06, $04, $00, $00, $fc, $f8, $f0, $ec, $e8, $e6, $e8, $e8, $e6, $e4, $e4, $e6
167ff     E6 EC E8 F2 
16803     00 0C 24 34 
16807     2C 28 20 1A 
1680b     14 10 0C 08 | 	byte	$e6, $ec, $e8, $f2, $00, $0c, $24, $34, $2c, $28, $20, $1a, $14, $10, $0c, $08
1680f     06 04 00 FE 
16813     FA F4 EE EC 
16817     E8 E8 E8 E8 
1681b     E6 E4 E4 E6 | 	byte	$06, $04, $00, $fe, $fa, $f4, $ee, $ec, $e8, $e8, $e8, $e8, $e6, $e4, $e4, $e6
1681f     E8 EC EC F8 
16823     02 10 2C 32 
16827     2A 26 1E 18 
1682b     12 0E 0C 08 | 	byte	$e8, $ec, $ec, $f8, $02, $10, $2c, $32, $2a, $26, $1e, $18, $12, $0e, $0c, $08
1682f     06 02 00 FE 
16833     FA F2 EC EC 
16837     E8 EC E8 E8 
1683b     E6 E4 E4 E6 | 	byte	$06, $02, $00, $fe, $fa, $f2, $ec, $ec, $e8, $ec, $e8, $e8, $e6, $e4, $e4, $e6
1683f     EC EC EE FC 
16843     08 12 34 30 
16847     2A 20 1C 14 
1684b     10 0E 0C 06 | 	byte	$ec, $ec, $ee, $fc, $08, $12, $34, $30, $2a, $20, $1c, $14, $10, $0e, $0c, $06
1684f     04 02 00 FC 
16853     F8 F0 EC EC 
16857     E8 EC EC E6 
1685b     E6 E4 E6 E6 | 	byte	$04, $02, $00, $fc, $f8, $f0, $ec, $ec, $e8, $ec, $ec, $e6, $e6, $e4, $e6, $e6
1685f     EC EC F2 00 
16863     0E 14 34 2C 
16867     26 20 1A 14 
1686b     10 0C 08 06 | 	byte	$ec, $ec, $f2, $00, $0e, $14, $34, $2c, $26, $20, $1a, $14, $10, $0c, $08, $06
1686f     04 00 00 FA 
16873     F4 F0 EC E8 
16877     EC EC EC E6 
1687b     E6 E6 E6 E8 | 	byte	$04, $00, $00, $fa, $f4, $f0, $ec, $e8, $ec, $ec, $ec, $e6, $e6, $e6, $e6, $e8
1687f     EC EC FA 04 
16883     10 14 32 2A 
16887     24 1E 18 12 
1688b     0E 0C 08 06 | 	byte	$ec, $ec, $fa, $04, $10, $14, $32, $2a, $24, $1e, $18, $12, $0e, $0c, $08, $06
1688f     02 00 FE FA 
16893     F2 EE EC EC 
16897     EC EC E8 E6 
1689b     E6 E6 E6 EC | 	byte	$02, $00, $fe, $fa, $f2, $ee, $ec, $ec, $ec, $ec, $e8, $e6, $e6, $e6, $e6, $ec
1689f     EC F0 00 08 
168a3     12 1E 30 28 
168a7     20 1C 14 10 
168ab     0C 08 08 04 | 	byte	$ec, $f0, $00, $08, $12, $1e, $30, $28, $20, $1c, $14, $10, $0c, $08, $08, $04
168af     02 00 FC F8 
168b3     F0 EE EC EC 
168b7     EC EC E8 E6 
168bb     E6 E8 E8 EC | 	byte	$02, $00, $fc, $f8, $f0, $ee, $ec, $ec, $ec, $ec, $e8, $e6, $e6, $e8, $e8, $ec
168bf     EE F8 02 0E 
168c3     12 28 2C 24 
168c7     1E 18 12 0E 
168cb     0C 08 06 04 | 	byte	$ee, $f8, $02, $0e, $12, $28, $2c, $24, $1e, $18, $12, $0e, $0c, $08, $06, $04
168cf     00 00 FC F4 
168d3     F0 EE EC EC 
168d7     EC EC E8 E6 
168db     E6 E6 EC EC | 	byte	$00, $00, $fc, $f4, $f0, $ee, $ec, $ec, $ec, $ec, $e8, $e6, $e6, $e6, $ec, $ec
168df     F0 FC 06 10 
168e3     12 2C 2A 20 
168e7     1C 14 12 0E 
168eb     0C 08 06 02 | 	byte	$f0, $fc, $06, $10, $12, $2c, $2a, $20, $1c, $14, $12, $0e, $0c, $08, $06, $02
168ef     00 FE FA F2 
168f3     F0 EC EC EC 
168f7     EC E8 E8 E6 
168fb     E8 E8 EC EC | 	byte	$00, $fe, $fa, $f2, $f0, $ec, $ec, $ec, $ec, $e8, $e8, $e6, $e8, $e8, $ec, $ec
168ff     F4 00 0C 12 
16903     10 30 28 20 
16907     1A 14 10 0C 
1690b     08 06 04 02 | 	byte	$f4, $00, $0c, $12, $10, $30, $28, $20, $1a, $14, $10, $0c, $08, $06, $04, $02
1690f     00 FC F8 F0 
16913     EE EC EE EC 
16917     EC E8 E6 E6 
1691b     E8 EC EC EE | 	byte	$00, $fc, $f8, $f0, $ee, $ec, $ee, $ec, $ec, $e8, $e6, $e6, $e8, $ec, $ec, $ee
1691f     FA 04 0E 12 
16923     14 2A 26 1C 
16927     18 12 0E 0C 
1692b     08 06 04 00 | 	byte	$fa, $04, $0e, $12, $14, $2a, $26, $1c, $18, $12, $0e, $0c, $08, $06, $04, $00
1692f     00 FA F4 F0 
16933     EE EC EE EC 
16937     EC E8 E6 E8 
1693b     E8 EC EC F2 | 	byte	$00, $fa, $f4, $f0, $ee, $ec, $ee, $ec, $ec, $e8, $e6, $e8, $e8, $ec, $ec, $f2
1693f     00 08 10 10 
16943     1A 2A 24 1A 
16947     14 12 0E 08 
1694b     06 04 02 00 | 	byte	$00, $08, $10, $10, $1a, $2a, $24, $1a, $14, $12, $0e, $08, $06, $04, $02, $00
1694f     FE FA F2 F0 
16953     EC EE EE EC 
16957     EC E8 E8 E8 
1695b     EC EC EE F8 | 	byte	$fe, $fa, $f2, $f0, $ec, $ee, $ee, $ec, $ec, $e8, $e8, $e8, $ec, $ec, $ee, $f8
1695f     02 0C 10 0E 
16963     24 26 20 18 
16967     14 10 0C 08 
1696b     06 04 00 00 | 	byte	$02, $0c, $10, $0e, $24, $26, $20, $18, $14, $10, $0c, $08, $06, $04, $00, $00
1696f     FC F8 F2 F0 
16973     EE EE EE EC 
16977     EC E8 E8 EC 
1697b     EC EC F2 00 | 	byte	$fc, $f8, $f2, $f0, $ee, $ee, $ee, $ec, $ec, $e8, $e8, $ec, $ec, $ec, $f2, $00
1697f     04 10 10 0E 
16983     28 26 1C 14 
16987     12 10 08 08 
1698b     04 02 00 FE | 	byte	$04, $10, $10, $0e, $28, $26, $1c, $14, $12, $10, $08, $08, $04, $02, $00, $fe
1698f     FA F4 F2 EE 
16993     F0 EE EE EC 
16997     E8 E8 E8 EC 
1699b     EC EE F8 00 | 	byte	$fa, $f4, $f2, $ee, $f0, $ee, $ee, $ec, $e8, $e8, $e8, $ec, $ec, $ee, $f8, $00
1699f     0C 10 0E 0E 
169a3     2A 20 18 14 
169a7     12 0E 08 06 
169ab     04 00 00 FE | 	byte	$0c, $10, $0e, $0e, $2a, $20, $18, $14, $12, $0e, $08, $06, $04, $00, $00, $fe
169af     F8 F4 F0 F0 
169b3     F0 F0 EC EC 
169b7     E8 E8 EC EC 
169bb     EC F0 FE 04 | 	byte	$f8, $f4, $f0, $f0, $f0, $f0, $ec, $ec, $e8, $e8, $ec, $ec, $ec, $f0, $fe, $04
169bf     0E 10 0C 14 
169c3     26 1E 14 12 
169c7     10 0C 08 04 
169cb     02 00 00 FA | 	byte	$0e, $10, $0c, $14, $26, $1e, $14, $12, $10, $0c, $08, $04, $02, $00, $00, $fa
169cf     F4 F2 F0 F0 
169d3     F0 EE EC EC 
169d7     EC E8 EC EC 
169db     EE F4 00 08 | 	byte	$f4, $f2, $f0, $f0, $f0, $ee, $ec, $ec, $ec, $e8, $ec, $ec, $ee, $f4, $00, $08
169df     10 0E 08 1E 
169e3     24 1C 14 12 
169e7     0E 0C 06 04 
169eb     02 00 FE FA | 	byte	$10, $0e, $08, $1e, $24, $1c, $14, $12, $0e, $0c, $06, $04, $02, $00, $fe, $fa
169ef     F4 F2 F2 F0 
169f3     F0 EE EC EC 
169f7     E8 EC EC EC 
169fb     EE FC 02 0E | 	byte	$f4, $f2, $f2, $f0, $f0, $ee, $ec, $ec, $e8, $ec, $ec, $ec, $ee, $fc, $02, $0e
169ff     10 0C 06 26 
16a03     20 1A 14 10 
16a07     0E 08 06 02 
16a0b     00 00 FC F8 | 	byte	$10, $0c, $06, $26, $20, $1a, $14, $10, $0e, $08, $06, $02, $00, $00, $fc, $f8
16a0f     F4 F2 F2 F2 
16a13     F0 EE EC EC 
16a17     E8 EC EC EE 
16a1b     F2 00 08 0E | 	byte	$f4, $f2, $f2, $f2, $f0, $ee, $ec, $ec, $e8, $ec, $ec, $ee, $f2, $00, $08, $0e
16a1f     10 08 08 26 
16a23     1C 18 12 10 
16a27     0C 06 04 02 
16a2b     00 00 FA F8 | 	byte	$10, $08, $08, $26, $1c, $18, $12, $10, $0c, $06, $04, $02, $00, $00, $fa, $f8
16a2f     F2 F2 F2 F2 
16a33     F0 EE EC EC 
16a37     EC EC EC EE 
16a3b     F8 00 0C 10 | 	byte	$f2, $f2, $f2, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ec, $ee, $f8, $00, $0c, $10
16a3f     0C 06 12 20 
16a43     1C 18 12 0E 
16a47     0C 06 02 00 
16a4b     00 FE FA F4 | 	byte	$0c, $06, $12, $20, $1c, $18, $12, $0e, $0c, $06, $02, $00, $00, $fe, $fa, $f4
16a4f     F2 F2 F2 F0 
16a53     EE EC EC EC 
16a57     EC EC EE F2 
16a5b     FC 04 0E 10 | 	byte	$f2, $f2, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ec, $ee, $f2, $fc, $04, $0e, $10
16a5f     08 04 1C 1E 
16a63     1A 14 10 0E 
16a67     08 04 02 00 
16a6b     00 FC F8 F4 | 	byte	$08, $04, $1c, $1e, $1a, $14, $10, $0e, $08, $04, $02, $00, $00, $fc, $f8, $f4
16a6f     F4 F2 F2 F0 
16a73     EE EC EC EC 
16a77     EC EC EE F8 
16a7b     00 0C 10 0E | 	byte	$f4, $f2, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ec, $ee, $f8, $00, $0c, $10, $0e
16a7f     06 04 20 1C 
16a83     18 14 0E 0C 
16a87     06 04 00 00 
16a8b     FE FA F8 F4 | 	byte	$06, $04, $20, $1c, $18, $14, $0e, $0c, $06, $04, $00, $00, $fe, $fa, $f8, $f4
16a8f     F4 F4 F2 F0 
16a93     EE EC EC EC 
16a97     EC EC F0 FA 
16a9b     02 0E 10 0C | 	byte	$f4, $f4, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ec, $f0, $fa, $02, $0e, $10, $0c
16a9f     06 04 20 1A 
16aa3     18 12 0E 08 
16aa7     06 02 00 00 
16aab     FC FA F4 F4 | 	byte	$06, $04, $20, $1a, $18, $12, $0e, $08, $06, $02, $00, $00, $fc, $fa, $f4, $f4
16aaf     F4 F4 F2 F0 
16ab3     EC EC EC EC 
16ab7     EC EE F2 00 
16abb     06 10 10 06 | 	byte	$f4, $f4, $f2, $f0, $ec, $ec, $ec, $ec, $ec, $ee, $f2, $00, $06, $10, $10, $06
16abf     04 0E 1E 1A 
16ac3     14 10 0C 08 
16ac7     04 02 00 FE 
16acb     FC FA F4 F8 | 	byte	$04, $0e, $1e, $1a, $14, $10, $0c, $08, $04, $02, $00, $fe, $fc, $fa, $f4, $f8
16acf     F4 F4 F2 EE 
16ad3     EE EC EC EC 
16ad7     EC EE F8 00 
16adb     0C 10 0C 06 | 	byte	$f4, $f4, $f2, $ee, $ee, $ec, $ec, $ec, $ec, $ee, $f8, $00, $0c, $10, $0c, $06
16adf     02 14 1C 18 
16ae3     14 10 0C 08 
16ae7     04 00 00 FC 
16aeb     FA F8 F4 F8 | 	byte	$02, $14, $1c, $18, $14, $10, $0c, $08, $04, $00, $00, $fc, $fa, $f8, $f4, $f8
16aef     F4 F2 F0 EE 
16af3     EC EC EC EC 
16af7     EE F2 FC 04 
16afb     0E 10 08 04 | 	byte	$f4, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ee, $f2, $fc, $04, $0e, $10, $08, $04
16aff     02 1C 1C 18 
16b03     12 0E 08 06 
16b07     02 00 00 FC 
16b0b     FA F4 F8 F8 | 	byte	$02, $1c, $1c, $18, $12, $0e, $08, $06, $02, $00, $00, $fc, $fa, $f4, $f8, $f8
16b0f     F4 F2 F0 EE 
16b13     EC EC EC EC 
16b17     EE F4 00 08 
16b1b     10 0E 06 04 | 	byte	$f4, $f2, $f0, $ee, $ec, $ec, $ec, $ec, $ee, $f4, $00, $08, $10, $0e, $06, $04
16b1f     02 1E 1A 14 
16b23     12 0C 08 04 
16b27     00 00 FE FA 
16b2b     FA F8 F8 F8 | 	byte	$02, $1e, $1a, $14, $12, $0c, $08, $04, $00, $00, $fe, $fa, $fa, $f8, $f8, $f8
16b2f     F4 F2 EE EE 
16b33     EC EC EC EC 
16b37     F0 F8 00 0C 
16b3b     10 0C 06 02 | 	byte	$f4, $f2, $ee, $ee, $ec, $ec, $ec, $ec, $f0, $f8, $00, $0c, $10, $0c, $06, $02
16b3f     06 1C 18 14 
16b43     10 08 06 04 
16b47     00 00 FC FA 
16b4b     F8 F8 F8 F8 | 	byte	$06, $1c, $18, $14, $10, $08, $06, $04, $00, $00, $fc, $fa, $f8, $f8, $f8, $f8
16b4f     F4 F2 EE EC 
16b53     EC EC EC EE 
16b57     F2 FC 04 0E 
16b5b     10 08 04 00 | 	byte	$f4, $f2, $ee, $ec, $ec, $ec, $ec, $ee, $f2, $fc, $04, $0e, $10, $08, $04, $00
16b5f     12 1A 18 12 
16b63     0E 08 06 02 
16b67     00 FE FC FA 
16b6b     F8 F8 F8 F8 | 	byte	$12, $1a, $18, $12, $0e, $08, $06, $02, $00, $fe, $fc, $fa, $f8, $f8, $f8, $f8
16b6f     F4 F0 EE EC 
16b73     EC EC EC EE 
16b77     F8 00 08 10 
16b7b     0E 06 02 00 | 	byte	$f4, $f0, $ee, $ec, $ec, $ec, $ec, $ee, $f8, $00, $08, $10, $0e, $06, $02, $00
16b7f     14 1A 14 12 
16b83     0C 06 04 02 
16b87     00 FE FA FA 
16b8b     F8 F8 F8 F4 | 	byte	$14, $1a, $14, $12, $0c, $06, $04, $02, $00, $fe, $fa, $fa, $f8, $f8, $f8, $f4
16b8f     F2 F0 EE EC 
16b93     EE EC EE F0 
16b97     FA 02 0E 10 
16b9b     0C 06 02 00 | 	byte	$f2, $f0, $ee, $ec, $ee, $ec, $ee, $f0, $fa, $02, $0e, $10, $0c, $06, $02, $00
16b9f     1C 18 14 10 
16ba3     0C 06 04 00 
16ba7     00 FC FA FA 
16bab     F8 F8 F8 F4 | 	byte	$1c, $18, $14, $10, $0c, $06, $04, $00, $00, $fc, $fa, $fa, $f8, $f8, $f8, $f4
16baf     F2 F0 EE EC 
16bb3     EC EC EE F2 
16bb7     FE 06 0E 10 
16bbb     08 04 00 00 | 	byte	$f2, $f0, $ee, $ec, $ec, $ec, $ee, $f2, $fe, $06, $0e, $10, $08, $04, $00, $00
16bbf     1C 18 12 10 
16bc3     08 04 02 00 
16bc7     FE FC FA F8 
16bcb     FA FA F8 F4 | 	byte	$1c, $18, $12, $10, $08, $04, $02, $00, $fe, $fc, $fa, $f8, $fa, $fa, $f8, $f4
16bcf     F0 F0 EC EE 
16bd3     EC EE EE F8 
16bd7     00 08 10 0E 
16bdb     08 04 00 06 | 	byte	$f0, $f0, $ec, $ee, $ec, $ee, $ee, $f8, $00, $08, $10, $0e, $08, $04, $00, $06
16bdf     1A 14 12 0E 
16be3     06 04 02 00 
16be7     FE FA FA F8 
16beb     FA FA F8 F4 | 	byte	$1a, $14, $12, $0e, $06, $04, $02, $00, $fe, $fa, $fa, $f8, $fa, $fa, $f8, $f4
16bef     F0 F0 EC EE 
16bf3     EE EE F0 FC 
16bf7     02 0E 10 0C 
16bfb     06 02 00 0E | 	byte	$f0, $f0, $ec, $ee, $ee, $ee, $f0, $fc, $02, $0e, $10, $0c, $06, $02, $00, $0e
16bff     18 14 10 0C 
16c03     06 04 00 00 
16c07     FC FA FA FA 
16c0b     FA FA F4 F2 | 	byte	$18, $14, $10, $0c, $06, $04, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2
16c0f     F0 F0 EE EE 
16c13     EE EE F4 00 
16c17     06 0E 10 08 
16c1b     06 00 00 14 | 	byte	$f0, $f0, $ee, $ee, $ee, $ee, $f4, $00, $06, $0e, $10, $08, $06, $00, $00, $14
16c1f     18 14 10 08 
16c23     04 02 00 00 
16c27     FC FA FA FA 
16c2b     FA FA F4 F2 | 	byte	$18, $14, $10, $08, $04, $02, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2
16c2f     F0 EE EE EE 
16c33     EE EE F8 00 
16c37     0C 10 0E 08 
16c3b     04 00 00 18 | 	byte	$f0, $ee, $ee, $ee, $ee, $ee, $f8, $00, $0c, $10, $0e, $08, $04, $00, $00, $18
16c3f     14 12 0E 08 
16c43     04 02 00 FE 
16c47     FC FA FA FA 
16c4b     FA F8 F4 F0 | 	byte	$14, $12, $0e, $08, $04, $02, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f4, $f0
16c4f     F0 EE EE EE 
16c53     EE F2 FC 04 
16c57     0E 10 0C 06 
16c5b     02 00 00 1A | 	byte	$f0, $ee, $ee, $ee, $ee, $f2, $fc, $04, $0e, $10, $0c, $06, $02, $00, $00, $1a
16c5f     14 10 0C 06 
16c63     02 00 00 FE 
16c67     FA FA FA FA 
16c6b     FA F8 F2 F0 | 	byte	$14, $10, $0c, $06, $02, $00, $00, $fe, $fa, $fa, $fa, $fa, $fa, $f8, $f2, $f0
16c6f     F0 EE EE EE 
16c73     EE F4 00 06 
16c77     0E 0E 0C 06 
16c7b     02 00 00 18 | 	byte	$f0, $ee, $ee, $ee, $ee, $f4, $00, $06, $0e, $0e, $0c, $06, $02, $00, $00, $18
16c7f     14 10 0C 06 
16c83     02 00 00 FC 
16c87     FA FA FA FA 
16c8b     FA F4 F2 F0 | 	byte	$14, $10, $0c, $06, $02, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2, $f0
16c8f     F0 EE EE EE 
16c93     F0 FA 00 0C 
16c97     10 0E 08 04 
16c9b     00 00 06 14 | 	byte	$f0, $ee, $ee, $ee, $f0, $fa, $00, $0c, $10, $0e, $08, $04, $00, $00, $06, $14
16c9f     12 0E 08 04 
16ca3     02 00 00 FC 
16ca7     FA FA FA FA 
16cab     FA F4 F2 F0 | 	byte	$12, $0e, $08, $04, $02, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2, $f0
16caf     F0 F0 EE F0 
16cb3     F2 FE 04 0E 
16cb7     0E 0C 06 04 
16cbb     00 00 0E 14 | 	byte	$f0, $f0, $ee, $f0, $f2, $fe, $04, $0e, $0e, $0c, $06, $04, $00, $00, $0e, $14
16cbf     10 0E 08 04 
16cc3     00 00 FE FC 
16cc7     FA FA FA FA 
16ccb     F8 F4 F0 F0 | 	byte	$10, $0e, $08, $04, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f4, $f0, $f0
16ccf     F0 F0 EE F0 
16cd3     F4 00 08 10 
16cd7     0E 0C 06 02 
16cdb     00 FE 12 14 | 	byte	$f0, $f0, $ee, $f0, $f4, $00, $08, $10, $0e, $0c, $06, $02, $00, $fe, $12, $14
16cdf     10 0C 06 02 
16ce3     00 00 FE FC 
16ce7     FA FA FA FA 
16ceb     F8 F2 F0 F0 | 	byte	$10, $0c, $06, $02, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f2, $f0, $f0
16cef     F0 F0 EE F0 
16cf3     FA 02 0C 10 
16cf7     0C 08 04 02 
16cfb     00 FE 14 12 | 	byte	$f0, $f0, $ee, $f0, $fa, $02, $0c, $10, $0c, $08, $04, $02, $00, $fe, $14, $12
16cff     0E 08 06 02 
16d03     00 00 00 FA 
16d07     FA FA FA FA 
16d0b     F4 F2 F0 F0 | 	byte	$0e, $08, $06, $02, $00, $00, $00, $fa, $fa, $fa, $fa, $fa, $f4, $f2, $f0, $f0
16d0f     F0 F0 F0 F2 
16d13     FE 04 0E 0E 
16d17     0C 08 04 00 
16d1b     00 FE 14 10 | 	byte	$f0, $f0, $f0, $f2, $fe, $04, $0e, $0e, $0c, $08, $04, $00, $00, $fe, $14, $10
16d1f     0E 08 04 02 
16d23     00 00 FC FA 
16d27     FA FA FA FA 
16d2b     F4 F2 F2 F0 | 	byte	$0e, $08, $04, $02, $00, $00, $fc, $fa, $fa, $fa, $fa, $fa, $f4, $f2, $f2, $f0
16d2f     F0 F0 F0 F8 
16d33     00 08 0E 0E 
16d37     0C 06 02 00 
16d3b     FE FE 14 10 | 	byte	$f0, $f0, $f0, $f8, $00, $08, $0e, $0e, $0c, $06, $02, $00, $fe, $fe, $14, $10
16d3f     0C 06 04 00 
16d43     00 00 FC FA 
16d47     FA FA FA F8 
16d4b     F4 F2 F2 F0 | 	byte	$0c, $06, $04, $00, $00, $00, $fc, $fa, $fa, $fa, $fa, $f8, $f4, $f2, $f2, $f0
16d4f     F0 F0 F2 FA 
16d53     02 0C 10 0C 
16d57     08 06 02 00 
16d5b     FE 00 14 10 | 	byte	$f0, $f0, $f2, $fa, $02, $0c, $10, $0c, $08, $06, $02, $00, $fe, $00, $14, $10
16d5f     0C 06 02 00 
16d63     00 FE FC FA 
16d67     FA FA FA F8 
16d6b     F2 F2 F2 F0 | 	byte	$0c, $06, $02, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f2, $f2, $f2, $f0
16d6f     F0 F0 F4 FE 
16d73     06 0E 0E 0C 
16d77     08 04 00 00 
16d7b     FC 00 12 0E | 	byte	$f0, $f0, $f4, $fe, $06, $0e, $0e, $0c, $08, $04, $00, $00, $fc, $00, $12, $0e
16d7f     0C 06 02 00 
16d83     00 FE FC FA 
16d87     FA FA FA F8 
16d8b     F2 F2 F2 F0 | 	byte	$0c, $06, $02, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f8, $f2, $f2, $f2, $f0
16d8f     F2 F2 F8 00 
16d93     08 0E 0E 0C 
16d97     08 04 00 00 
16d9b     FC 04 10 0E | 	byte	$f2, $f2, $f8, $00, $08, $0e, $0e, $0c, $08, $04, $00, $00, $fc, $04, $10, $0e
16d9f     08 04 02 00 
16da3     00 FE FC FA 
16da7     FA FA F8 F4 
16dab     F2 F2 F2 F0 | 	byte	$08, $04, $02, $00, $00, $fe, $fc, $fa, $fa, $fa, $f8, $f4, $f2, $f2, $f2, $f0
16daf     F2 F2 FC 02 
16db3     0C 0E 0C 08 
16db7     06 02 00 FE 
16dbb     FA 06 10 0C | 	byte	$f2, $f2, $fc, $02, $0c, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $06, $10, $0c
16dbf     06 04 00 00 
16dc3     00 00 FC FA 
16dc7     FA FA F8 F4 
16dcb     F2 F2 F2 F2 | 	byte	$06, $04, $00, $00, $00, $00, $fc, $fa, $fa, $fa, $f8, $f4, $f2, $f2, $f2, $f2
16dcf     F2 F8 00 06 
16dd3     0E 0E 0C 08 
16dd7     04 00 00 FC 
16ddb     FA 08 0E 0C | 	byte	$f2, $f8, $00, $06, $0e, $0e, $0c, $08, $04, $00, $00, $fc, $fa, $08, $0e, $0c
16ddf     06 04 00 00 
16de3     00 FC FC FA 
16de7     FA F8 F8 F4 
16deb     F2 F2 F2 F2 | 	byte	$06, $04, $00, $00, $00, $fc, $fc, $fa, $fa, $f8, $f8, $f4, $f2, $f2, $f2, $f2
16def     F2 FA 00 08 
16df3     0E 0E 08 08 
16df7     04 00 00 FC 
16dfb     FA 0C 0E 0C | 	byte	$f2, $fa, $00, $08, $0e, $0e, $08, $08, $04, $00, $00, $fc, $fa, $0c, $0e, $0c
16dff     06 02 00 00 
16e03     FE FC FC FA 
16e07     FA FA F8 F4 
16e0b     F2 F4 F2 F2 | 	byte	$06, $02, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f2, $f4, $f2, $f2
16e0f     F4 FE 04 0C 
16e13     0E 0C 08 06 
16e17     02 00 FE FA 
16e1b     F8 0E 0E 08 | 	byte	$f4, $fe, $04, $0c, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $0e, $0e, $08
16e1f     04 02 00 00 
16e23     FE FC FC FA 
16e27     FA FA F8 F4 
16e2b     F2 F4 F2 F2 | 	byte	$04, $02, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f2, $f4, $f2, $f2
16e2f     F8 00 06 0E 
16e33     0C 0C 08 06 
16e37     02 00 FE FA 
16e3b     F8 0E 0C 06 | 	byte	$f8, $00, $06, $0e, $0c, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $0e, $0c, $06
16e3f     04 00 00 00 
16e43     FE FC FC FA 
16e47     FA F8 F4 F4 
16e4b     F4 F4 F2 F4 | 	byte	$04, $00, $00, $00, $fe, $fc, $fc, $fa, $fa, $f8, $f4, $f4, $f4, $f4, $f2, $f4
16e4f     FC 02 0C 0E 
16e53     0C 08 06 04 
16e57     00 00 FC F8 
16e5b     F8 0E 0C 06 | 	byte	$fc, $02, $0c, $0e, $0c, $08, $06, $04, $00, $00, $fc, $f8, $f8, $0e, $0c, $06
16e5f     02 00 00 00 
16e63     FE FC FA FA 
16e67     FA FA F4 F4 
16e6b     F4 F4 F2 F8 | 	byte	$02, $00, $00, $00, $fe, $fc, $fa, $fa, $fa, $fa, $f4, $f4, $f4, $f4, $f2, $f8
16e6f     00 04 0E 0E 
16e73     0C 08 06 02 
16e77     00 FE FA F8 
16e7b     F8 0E 0C 06 | 	byte	$00, $04, $0e, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $f8, $0e, $0c, $06
16e7f     02 00 00 00 
16e83     FC FC FA FA 
16e87     FA F8 F4 F4 
16e8b     F4 F4 F4 FA | 	byte	$02, $00, $00, $00, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $fa
16e8f     00 08 0E 0C 
16e93     0C 08 06 02 
16e97     00 FE FA F8 
16e9b     FA 0E 08 04 | 	byte	$00, $08, $0e, $0c, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $fa, $0e, $08, $04
16e9f     02 00 00 FE 
16ea3     FC FC FA FA 
16ea7     FA F8 F4 F4 
16eab     F8 F4 F8 FE | 	byte	$02, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f4, $f8, $f4, $f8, $fe
16eaf     04 0C 0E 0C 
16eb3     0C 06 04 00 
16eb7     00 FC F8 F8 
16ebb     FC 0E 08 04 | 	byte	$04, $0c, $0e, $0c, $0c, $06, $04, $00, $00, $fc, $f8, $f8, $fc, $0e, $08, $04
16ebf     00 00 00 FE 
16ec3     FC FC FA FA 
16ec7     FA F8 F4 F4 
16ecb     F8 F4 FA 00 | 	byte	$00, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f4, $f8, $f4, $fa, $00
16ecf     06 0E 0E 0C 
16ed3     08 06 02 00 
16ed7     FE FA F8 F4 
16edb     FE 0C 06 02 | 	byte	$06, $0e, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $f4, $fe, $0c, $06, $02
16edf     00 00 00 FE 
16ee3     FC FC FA FA 
16ee7     FA F8 F4 F8 
16eeb     F8 F8 FC 02 | 	byte	$00, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f8, $f8, $f8, $fc, $02
16eef     0C 0E 0C 0C 
16ef3     06 04 00 00 
16ef7     FE FA F8 F4 
16efb     00 0C 06 02 | 	byte	$0c, $0e, $0c, $0c, $06, $04, $00, $00, $fe, $fa, $f8, $f4, $00, $0c, $06, $02
16eff     00 00 00 FE 
16f03     FC FC FA FA 
16f07     FA F8 F4 F8 
16f0b     F4 FA 00 04 | 	byte	$00, $00, $00, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f4, $f8, $f4, $fa, $00, $04
16f0f     0E 0E 0C 08 
16f13     06 02 00 00 
16f17     FC F8 F4 F4 
16f1b     02 08 04 00 | 	byte	$0e, $0e, $0c, $08, $06, $02, $00, $00, $fc, $f8, $f4, $f4, $02, $08, $04, $00
16f1f     00 00 FE FE 
16f23     FC FC FA FA 
16f27     FA F8 F8 F8 
16f2b     F8 FC 00 08 | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $fa, $fa, $f8, $f8, $f8, $f8, $fc, $00, $08
16f2f     10 0E 0C 08 
16f33     06 02 00 FE 
16f37     FA F8 F4 F4 
16f3b     04 08 04 00 | 	byte	$10, $0e, $0c, $08, $06, $02, $00, $fe, $fa, $f8, $f4, $f4, $04, $08, $04, $00
16f3f     00 00 00 FC 
16f43     FC FC FA FA 
16f47     FA F8 F8 F8 
16f4b     FA 00 04 0C | 	byte	$00, $00, $00, $fc, $fc, $fc, $fa, $fa, $fa, $f8, $f8, $f8, $fa, $00, $04, $0c
16f4f     10 0E 0C 08 
16f53     04 00 00 FE 
16f57     FA F8 F4 F4 
16f5b     08 06 02 00 | 	byte	$10, $0e, $0c, $08, $04, $00, $00, $fe, $fa, $f8, $f4, $f4, $08, $06, $02, $00
16f5f     00 00 FE FC 
16f63     FC FC FA FA 
16f67     F8 F8 F8 F8 
16f6b     FC 00 06 0E | 	byte	$00, $00, $fe, $fc, $fc, $fc, $fa, $fa, $f8, $f8, $f8, $f8, $fc, $00, $06, $0e
16f6f     10 0C 08 06 
16f73     02 00 00 FC 
16f77     F8 F4 F4 F4 
16f7b     08 06 02 00 | 	byte	$10, $0c, $08, $06, $02, $00, $00, $fc, $f8, $f4, $f4, $f4, $08, $06, $02, $00
16f7f     00 00 FE FC 
16f83     FC FC FA FA 
16f87     FA F8 FA FA 
16f8b     FE 02 0C 10 | 	byte	$00, $00, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $f8, $fa, $fa, $fe, $02, $0c, $10
16f8f     0E 0C 08 04 
16f93     00 00 FE FA 
16f97     F8 F4 F4 F4 
16f9b     08 04 00 00 | 	byte	$0e, $0c, $08, $04, $00, $00, $fe, $fa, $f8, $f4, $f4, $f4, $08, $04, $00, $00
16f9f     00 FE FE FC 
16fa3     FC FC FA FA 
16fa7     F8 F8 F8 FC 
16fab     00 04 0E 10 | 	byte	$00, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $f8, $f8, $f8, $fc, $00, $04, $0e, $10
16faf     0E 0C 06 04 
16fb3     00 00 FC FA 
16fb7     F8 F4 F4 F8 
16fbb     08 02 00 00 | 	byte	$0e, $0c, $06, $04, $00, $00, $fc, $fa, $f8, $f4, $f4, $f8, $08, $02, $00, $00
16fbf     00 FE FC FC 
16fc3     FC FC FA FA 
16fc7     FA FA FA FE 
16fcb     00 08 10 10 | 	byte	$00, $fe, $fc, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fe, $00, $08, $10, $10
16fcf     0E 08 06 02 
16fd3     00 00 FC F8 
16fd7     F4 F4 F4 FC 
16fdb     06 02 00 00 | 	byte	$0e, $08, $06, $02, $00, $00, $fc, $f8, $f4, $f4, $f4, $fc, $06, $02, $00, $00
16fdf     00 00 FC FC 
16fe3     FC FC FA FA 
16fe7     FA FA FC 00 
16feb     04 0E 10 0E | 	byte	$00, $00, $fc, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fc, $00, $04, $0e, $10, $0e
16fef     0C 08 04 00 
16ff3     00 FE FA F8 
16ff7     F4 F4 F4 00 
16ffb     04 02 00 00 | 	byte	$0c, $08, $04, $00, $00, $fe, $fa, $f8, $f4, $f4, $f4, $00, $04, $02, $00, $00
16fff     FE FE FC FC 
17003     FC FC FC FA 
17007     FA FA FE 00 
1700b     08 0E 10 0E | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa, $fa, $fa, $fe, $00, $08, $0e, $10, $0e
1700f     0C 06 02 00 
17013     00 FC FA F8 
17017     F4 F4 F2 00 
1701b     04 00 00 00 | 	byte	$0c, $06, $02, $00, $00, $fc, $fa, $f8, $f4, $f4, $f2, $00, $04, $00, $00, $00
1701f     00 FC FE FC 
17023     FC FA FC FA 
17027     FA FC 00 04 
1702b     0C 10 10 0E | 	byte	$00, $fc, $fe, $fc, $fc, $fa, $fc, $fa, $fa, $fc, $00, $04, $0c, $10, $10, $0e
1702f     08 06 02 00 
17033     FE FC F8 F4 
17037     F4 F4 F2 04 
1703b     02 00 00 00 | 	byte	$08, $06, $02, $00, $fe, $fc, $f8, $f4, $f4, $f4, $f2, $04, $02, $00, $00, $00
1703f     FE FC FE FC 
17043     FC FC FA FC 
17047     FA FE 00 06 
1704b     0E 10 10 0C | 	byte	$fe, $fc, $fe, $fc, $fc, $fc, $fa, $fc, $fa, $fe, $00, $06, $0e, $10, $10, $0c
1704f     08 04 00 00 
17053     FE FA F8 F4 
17057     F4 F2 F2 06 
1705b     02 00 00 00 | 	byte	$08, $04, $00, $00, $fe, $fa, $f8, $f4, $f4, $f2, $f2, $06, $02, $00, $00, $00
1705f     FE FE FE FC 
17063     FC FC FC FC 
17067     FA 00 02 0C 
1706b     10 10 0E 0C | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa, $00, $02, $0c, $10, $10, $0e, $0c
1706f     06 02 00 FE 
17073     FC FA F8 F4 
17077     F4 F2 F4 06 
1707b     00 00 00 00 | 	byte	$06, $02, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f4, $06, $00, $00, $00, $00
1707f     FE FE FE FC 
17083     FC FC FC FC 
17087     FC 00 06 0E 
1708b     12 10 0E 08 | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $00, $06, $0e, $12, $10, $0e, $08
1708f     04 00 00 FE 
17093     FC FA F4 F4 
17097     F2 F2 FA 04 
1709b     00 00 00 FE | 	byte	$04, $00, $00, $fe, $fc, $fa, $f4, $f4, $f2, $f2, $fa, $04, $00, $00, $00, $fe
1709f     FE FE FE FC 
170a3     FC FC FC FC 
170a7     FE 00 08 10 
170ab     10 10 0C 08 | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fe, $00, $08, $10, $10, $10, $0c, $08
170af     02 00 00 FC 
170b3     FA FA F4 F4 
170b7     F2 F0 00 02 
170bb     00 00 00 FE | 	byte	$02, $00, $00, $fc, $fa, $fa, $f4, $f4, $f2, $f0, $00, $02, $00, $00, $00, $fe
170bf     FE 00 FC FC 
170c3     FC FC FC FE 
170c7     00 04 0E 12 
170cb     10 0E 0C 06 | 	byte	$fe, $00, $fc, $fc, $fc, $fc, $fc, $fe, $00, $04, $0e, $12, $10, $0e, $0c, $06
170cf     02 00 FE FC 
170d3     FA F8 F4 F2 
170d7     F2 F0 00 02 
170db     00 00 00 FE | 	byte	$02, $00, $fe, $fc, $fa, $f8, $f4, $f2, $f2, $f0, $00, $02, $00, $00, $00, $fe
170df     FE FE FC FC 
170e3     FC FC FC FE 
170e7     00 08 10 12 
170eb     10 0E 08 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fe, $00, $08, $10, $12, $10, $0e, $08, $04
170ef     00 00 FC FA 
170f3     FA F8 F4 F2 
170f7     F0 F0 04 00 
170fb     00 00 00 00 | 	byte	$00, $00, $fc, $fa, $fa, $f8, $f4, $f2, $f0, $f0, $04, $00, $00, $00, $00, $00
170ff     FE FE FC FC 
17103     FE FC FE 00 
17107     02 0C 12 12 
1710b     0E 0C 06 02 | 	byte	$fe, $fe, $fc, $fc, $fe, $fc, $fe, $00, $02, $0c, $12, $12, $0e, $0c, $06, $02
1710f     00 FE FC FA 
17113     FA F8 F2 F2 
17117     F0 F2 04 00 
1711b     00 00 00 FE | 	byte	$00, $fe, $fc, $fa, $fa, $f8, $f2, $f2, $f0, $f2, $04, $00, $00, $00, $00, $fe
1711f     FE FC FC FC 
17123     FE FE FE 00 
17127     06 10 12 12 
1712b     0E 08 04 00 | 	byte	$fe, $fc, $fc, $fc, $fe, $fe, $fe, $00, $06, $10, $12, $12, $0e, $08, $04, $00
1712f     00 FE FC FA 
17133     F8 F4 F2 F0 
17137     F0 F8 02 00 
1713b     00 00 00 00 | 	byte	$00, $fe, $fc, $fa, $f8, $f4, $f2, $f0, $f0, $f8, $02, $00, $00, $00, $00, $00
1713f     FE FC FC FE 
17143     FE FE 00 02 
17147     0C 12 12 10 
1714b     0C 06 02 00 | 	byte	$fe, $fc, $fc, $fe, $fe, $fe, $00, $02, $0c, $12, $12, $10, $0c, $06, $02, $00
1714f     00 FE FC FA 
17153     F8 F4 F2 F0 
17157     F0 00 00 00 
1715b     00 00 00 FE | 	byte	$00, $fe, $fc, $fa, $f8, $f4, $f2, $f0, $f0, $00, $00, $00, $00, $00, $00, $fe
1715f     FE FC FC FE 
17163     FE FE 00 04 
17167     10 12 12 0E 
1716b     08 04 02 00 | 	byte	$fe, $fc, $fc, $fe, $fe, $fe, $00, $04, $10, $12, $12, $0e, $08, $04, $02, $00
1716f     FE FC FA FA 
17173     F8 F4 F2 F0 
17177     EE 00 00 00 
1717b     00 00 00 FE | 	byte	$fe, $fc, $fa, $fa, $f8, $f4, $f2, $f0, $ee, $00, $00, $00, $00, $00, $00, $fe
1717f     FE FC FE FE 
17183     FE FE 00 08 
17187     12 14 10 0E 
1718b     06 04 00 00 | 	byte	$fe, $fc, $fe, $fe, $fe, $fe, $00, $08, $12, $14, $10, $0e, $06, $04, $00, $00
1718f     FE FC FA FA 
17193     F8 F2 F0 F0 
17197     EE 02 00 00 
1719b     00 00 00 00 | 	byte	$fe, $fc, $fa, $fa, $f8, $f2, $f0, $f0, $ee, $02, $00, $00, $00, $00, $00, $00
1719f     FC FC FE FE 
171a3     FE 00 04 0E 
171a7     12 12 10 0C 
171ab     06 02 00 FE | 	byte	$fc, $fc, $fe, $fe, $fe, $00, $04, $0e, $12, $12, $10, $0c, $06, $02, $00, $fe
171af     FE FC FA F8 
171b3     F4 F2 F0 EE 
171b7     F2 02 00 00 
171bb     00 00 00 FE | 	byte	$fe, $fc, $fa, $f8, $f4, $f2, $f0, $ee, $f2, $02, $00, $00, $00, $00, $00, $fe
171bf     FC FE FE 00 
171c3     FE 00 08 10 
171c7     14 12 0E 08 
171cb     04 00 00 FE | 	byte	$fc, $fe, $fe, $00, $fe, $00, $08, $10, $14, $12, $0e, $08, $04, $00, $00, $fe
171cf     FC FA FA F8 
171d3     F4 F2 F0 EE 
171d7     FA 00 00 00 
171db     00 00 FE FE | 	byte	$fc, $fa, $fa, $f8, $f4, $f2, $f0, $ee, $fa, $00, $00, $00, $00, $00, $fe, $fe
171df     FC FE FE 00 
171e3     00 02 0C 12 
171e7     14 10 0C 06 
171eb     04 00 00 FE | 	byte	$fc, $fe, $fe, $00, $00, $02, $0c, $12, $14, $10, $0c, $06, $04, $00, $00, $fe
171ef     FC FA F8 F8 
171f3     F2 F0 EE EE 
171f7     00 00 00 00 
171fb     00 00 FE FC | 	byte	$fc, $fa, $f8, $f8, $f2, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $fe, $fc
171ff     FC FE 00 00 
17203     00 06 0E 14 
17207     12 10 0C 06 
1720b     02 00 FE FC | 	byte	$fc, $fe, $00, $00, $00, $06, $0e, $14, $12, $10, $0c, $06, $02, $00, $fe, $fc
1720f     FA FA F8 F4 
17213     F2 F0 EE EE 
17217     02 00 00 00 
1721b     00 00 FE FC | 	byte	$fa, $fa, $f8, $f4, $f2, $f0, $ee, $ee, $02, $00, $00, $00, $00, $00, $fe, $fc
1721f     FE FE 00 00 
17223     00 0C 12 14 
17227     10 0E 08 04 
1722b     00 00 00 FC | 	byte	$fe, $fe, $00, $00, $00, $0c, $12, $14, $10, $0e, $08, $04, $00, $00, $00, $fc
1722f     FA FA F8 F4 
17233     F2 F0 EE F0 
17237     02 00 00 00 
1723b     00 FE FC FC | 	byte	$fa, $fa, $f8, $f4, $f2, $f0, $ee, $f0, $02, $00, $00, $00, $00, $fe, $fc, $fc
1723f     FC FE 00 00 
17243     04 0E 14 14 
17247     10 0C 06 02 
1724b     00 00 FE FC | 	byte	$fc, $fe, $00, $00, $04, $0e, $14, $14, $10, $0c, $06, $02, $00, $00, $fe, $fc
1724f     FA F8 F8 F4 
17253     F0 EE EC FA 
17257     00 00 00 00 
1725b     00 FE FC FE | 	byte	$fa, $f8, $f8, $f4, $f0, $ee, $ec, $fa, $00, $00, $00, $00, $00, $fe, $fc, $fe
1725f     FE 00 00 00 
17263     08 10 14 12 
17267     0E 08 06 00 
1726b     00 FE FC FA | 	byte	$fe, $00, $00, $00, $08, $10, $14, $12, $0e, $08, $06, $00, $00, $fe, $fc, $fa
1726f     FA F8 F4 F2 
17273     F0 EE EC 00 
17277     00 00 00 00 
1727b     00 FE FC FC | 	byte	$fa, $f8, $f4, $f2, $f0, $ee, $ec, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc
1727f     FE FE 00 02 
17283     0C 12 14 10 
17287     0C 08 04 00 
1728b     00 00 FC FA | 	byte	$fe, $fe, $00, $02, $0c, $12, $14, $10, $0c, $08, $04, $00, $00, $00, $fc, $fa
1728f     FA F8 F4 F2 
17293     F0 EE EE 02 
17297     00 00 00 00 
1729b     FE FE FE FE | 	byte	$fa, $f8, $f4, $f2, $f0, $ee, $ee, $02, $00, $00, $00, $00, $fe, $fe, $fe, $fe
1729f     FE 00 00 06 
172a3     10 14 12 10 
172a7     0C 06 02 00 
172ab     00 FC FA FA | 	byte	$fe, $00, $00, $06, $10, $14, $12, $10, $0c, $06, $02, $00, $00, $fc, $fa, $fa
172af     F8 F8 F4 F2 
172b3     EE EE F2 02 
172b7     00 00 00 00 
172bb     FE FE FE FE | 	byte	$f8, $f8, $f4, $f2, $ee, $ee, $f2, $02, $00, $00, $00, $00, $fe, $fe, $fe, $fe
172bf     00 00 00 08 
172c3     12 14 12 0E 
172c7     08 06 00 00 
172cb     FE FC FA FA | 	byte	$00, $00, $00, $08, $12, $14, $12, $0e, $08, $06, $00, $00, $fe, $fc, $fa, $fa
172cf     F8 F4 F2 F0 
172d3     EE EC FC 00 
172d7     00 00 00 00 
172db     FE FE FC FE | 	byte	$f8, $f4, $f2, $f0, $ee, $ec, $fc, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fe
172df     FE 00 04 0E 
172e3     14 14 10 0C 
172e7     06 04 00 00 
172eb     FE FC FA F8 | 	byte	$fe, $00, $04, $0e, $14, $14, $10, $0c, $06, $04, $00, $00, $fe, $fc, $fa, $f8
172ef     F8 F4 F2 F0 
172f3     EE EC 00 00 
172f7     00 00 00 FE 
172fb     00 FE FE FE | 	byte	$f8, $f4, $f2, $f0, $ee, $ec, $00, $00, $00, $00, $00, $fe, $00, $fe, $fe, $fe
172ff     FE 00 06 10 
17303     14 12 10 0C 
17307     06 02 00 00 
1730b     FC FA FA F8 | 	byte	$fe, $00, $06, $10, $14, $12, $10, $0c, $06, $02, $00, $00, $fc, $fa, $fa, $f8
1730f     F8 F4 F2 F0 
17313     EE EE 00 02 
17317     00 00 00 FE 
1731b     FE FE FE FE | 	byte	$f8, $f4, $f2, $f0, $ee, $ee, $00, $02, $00, $00, $00, $fe, $fe, $fe, $fe, $fe
1731f     00 02 0C 12 
17323     14 12 0E 08 
17327     04 02 00 FE 
1732b     FC FA FA F8 | 	byte	$00, $02, $0c, $12, $14, $12, $0e, $08, $04, $02, $00, $fe, $fc, $fa, $fa, $f8
1732f     F4 F4 F2 EE 
17333     EE F0 02 02 
17337     00 00 FE FE 
1733b     FE FE FE FE | 	byte	$f4, $f4, $f2, $ee, $ee, $f0, $02, $02, $00, $00, $fe, $fe, $fe, $fe, $fe, $fe
1733f     00 04 0E 14 
17343     14 10 0C 08 
17347     04 00 00 FE 
1734b     FA FA F8 F8 | 	byte	$00, $04, $0e, $14, $14, $10, $0c, $08, $04, $00, $00, $fe, $fa, $fa, $f8, $f8
1734f     F4 F2 F0 EE 
17353     EE F8 00 00 
17357     00 00 FE FE 
1735b     FE FE FE 00 | 	byte	$f4, $f2, $f0, $ee, $ee, $f8, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fe, $00
1735f     00 08 12 14 
17363     12 10 0C 06 
17367     02 00 00 FC 
1736b     FA FA F8 F8 | 	byte	$00, $08, $12, $14, $12, $10, $0c, $06, $02, $00, $00, $fc, $fa, $fa, $f8, $f8
1736f     F4 F2 F0 EE 
17373     EE FE 02 00 
17377     00 00 FE FE 
1737b     FE FE FE 00 | 	byte	$f4, $f2, $f0, $ee, $ee, $fe, $02, $00, $00, $00, $fe, $fe, $fe, $fe, $fe, $00
1737f     02 0C 12 10 
17383     0C 08 04 00 
17387     00 FC FA F8 
1738b     F8 F4 F4 F2 | 	byte	$02, $0c, $12, $10, $0c, $08, $04, $00, $00, $fc, $fa, $f8, $f8, $f4, $f4, $f2
1738f     F2 F2 F0 F0 
17393     EE F4 00 00 
17397     00 00 FE 00 
1739b     00 02 0C 12 | 	byte	$f2, $f2, $f0, $f0, $ee, $f4, $00, $00, $00, $00, $fe, $00, $00, $02, $0c, $12
1739f     14 12 12 10 
173a3     0C 06 04 00 
173a7     00 FC FA F8 
173ab     F8 F4 F4 F2 | 	byte	$14, $12, $12, $10, $0c, $06, $04, $00, $00, $fc, $fa, $f8, $f8, $f4, $f4, $f2
173af     F2 F2 F0 F0 
173b3     EE FA 00 00 
173b7     00 00 FE 00 
173bb     00 06 0E 12 | 	byte	$f2, $f2, $f0, $f0, $ee, $fa, $00, $00, $00, $00, $fe, $00, $00, $06, $0e, $12
173bf     12 12 10 0E 
173c3     0C 06 02 00 
173c7     FE FC FA F8 
173cb     F8 F4 F4 F2 | 	byte	$12, $12, $10, $0e, $0c, $06, $02, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f4, $f2
173cf     F2 F2 F0 F0 
173d3     EE FC 00 00 
173d7     00 00 00 00 
173db     02 08 10 14 | 	byte	$f2, $f2, $f0, $f0, $ee, $fc, $00, $00, $00, $00, $00, $00, $02, $08, $10, $14
173df     12 12 10 0E 
173e3     08 06 02 00 
173e7     FE FC FA F8 
173eb     F8 F4 F2 F2 | 	byte	$12, $12, $10, $0e, $08, $06, $02, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2
173ef     F2 F0 F0 EE 
173f3     EE 00 00 00 
173f7     00 00 00 00 
173fb     04 0C 12 14 | 	byte	$f2, $f0, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $00, $04, $0c, $12, $14
173ff     12 10 10 0C 
17403     08 04 00 00 
17407     FC FC FA F8 
1740b     F4 F4 F2 F2 | 	byte	$12, $10, $10, $0c, $08, $04, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2
1740f     F2 F0 F0 EE 
17413     EE 00 00 00 
17417     00 00 00 00 
1741b     06 0E 12 12 | 	byte	$f2, $f0, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $00, $06, $0e, $12, $12
1741f     12 10 10 0C 
17423     06 04 00 00 
17427     FC FA F8 F8 
1742b     F4 F4 F2 F2 | 	byte	$12, $10, $10, $0c, $06, $04, $00, $00, $fc, $fa, $f8, $f8, $f4, $f4, $f2, $f2
1742f     F2 F0 F0 EE 
17433     EE 00 00 00 
17437     00 00 00 02 
1743b     0C 10 14 12 | 	byte	$f2, $f0, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $02, $0c, $10, $14, $12
1743f     12 10 0E 08 
17443     06 02 00 FE 
17447     FC FA F8 F8 
1744b     F4 F4 F2 F2 | 	byte	$12, $10, $0e, $08, $06, $02, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f4, $f2, $f2
1744f     F2 F0 F0 EE 
17453     EE 00 00 00 
17457     00 00 00 04 
1745b     0E 12 14 12 | 	byte	$f2, $f0, $f0, $ee, $ee, $00, $00, $00, $00, $00, $00, $04, $0e, $12, $14, $12
1745f     10 10 0C 08 
17463     04 02 00 FE 
17467     FC FA F8 F8 
1746b     F4 F2 F2 F2 | 	byte	$10, $10, $0c, $08, $04, $02, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f2
1746f     F0 F0 EE EE 
17473     EE 00 00 00 
17477     00 00 00 08 
1747b     10 14 12 12 | 	byte	$f0, $f0, $ee, $ee, $ee, $00, $00, $00, $00, $00, $00, $08, $10, $14, $12, $12
1747f     10 10 0C 06 
17483     04 00 00 FC 
17487     FC FA F8 F4 
1748b     F4 F2 F2 F2 | 	byte	$10, $10, $0c, $06, $04, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2
1748f     F0 F0 EE EE 
17493     F0 00 00 00 
17497     00 00 04 0C 
1749b     12 14 12 12 | 	byte	$f0, $f0, $ee, $ee, $f0, $00, $00, $00, $00, $00, $04, $0c, $12, $14, $12, $12
1749f     10 0E 0C 06 
174a3     02 00 00 FC 
174a7     FC FA F8 F4 
174ab     F4 F2 F2 F2 | 	byte	$10, $0e, $0c, $06, $02, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2
174af     F0 F0 EE EE 
174b3     F2 00 00 00 
174b7     00 00 06 10 
174bb     12 12 12 10 | 	byte	$f0, $f0, $ee, $ee, $f2, $00, $00, $00, $00, $00, $06, $10, $12, $12, $12, $10
174bf     10 0E 08 04 
174c3     02 00 FE FC 
174c7     FA FA F8 F4 
174cb     F4 F2 F2 F2 | 	byte	$10, $0e, $08, $04, $02, $00, $fe, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f2
174cf     F0 F0 EE EE 
174d3     F2 00 00 00 
174d7     00 02 08 10 
174db     14 12 12 10 | 	byte	$f0, $f0, $ee, $ee, $f2, $00, $00, $00, $00, $02, $08, $10, $14, $12, $12, $10
174df     10 0C 06 04 
174e3     00 00 FE FC 
174e7     FA F8 F8 F4 
174eb     F2 F2 F2 F2 | 	byte	$10, $0c, $06, $04, $00, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f2, $f2
174ef     F0 EE EE EE 
174f3     F8 00 00 00 
174f7     00 04 0E 12 
174fb     14 12 12 10 | 	byte	$f0, $ee, $ee, $ee, $f8, $00, $00, $00, $00, $04, $0e, $12, $14, $12, $12, $10
174ff     0E 0C 06 02 
17503     00 00 FE FC 
17507     FA F8 F4 F4 
1750b     F2 F2 F2 F0 | 	byte	$0e, $0c, $06, $02, $00, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0
1750f     F0 EE EE EE 
17513     F8 00 00 00 
17517     00 08 10 14 
1751b     14 12 10 10 | 	byte	$f0, $ee, $ee, $ee, $f8, $00, $00, $00, $00, $08, $10, $14, $14, $12, $10, $10
1751f     0E 08 04 02 
17523     00 FE FC FC 
17527     FA F8 F4 F4 
1752b     F2 F2 F2 F0 | 	byte	$0e, $08, $04, $02, $00, $fe, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0
1752f     F0 EE EE EE 
17533     FC 00 00 00 
17537     04 0C 12 14 
1753b     12 12 10 10 | 	byte	$f0, $ee, $ee, $ee, $fc, $00, $00, $00, $04, $0c, $12, $14, $12, $12, $10, $10
1753f     0C 06 04 00 
17543     00 FE FC FC 
17547     FA F8 F4 F4 
1754b     F2 F2 F2 F0 | 	byte	$0c, $06, $04, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0
1754f     EE EE EE EE 
17553     00 00 00 00 
17557     06 0E 12 14 
1755b     12 12 10 0E | 	byte	$ee, $ee, $ee, $ee, $00, $00, $00, $00, $06, $0e, $12, $14, $12, $12, $10, $0e
1755f     0C 06 02 00 
17563     00 00 FC FA 
17567     FA F8 F4 F4 
1756b     F2 F2 F0 F0 | 	byte	$0c, $06, $02, $00, $00, $00, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0
1756f     EE EE EE F0 
17573     00 00 00 02 
17577     0C 10 14 14 
1757b     12 12 10 0E | 	byte	$ee, $ee, $ee, $f0, $00, $00, $00, $02, $0c, $10, $14, $14, $12, $12, $10, $0e
1757f     08 04 02 00 
17583     00 FE FC FA 
17587     F8 F4 F4 F2 
1758b     F2 F2 F0 F0 | 	byte	$08, $04, $02, $00, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0, $f0
1758f     EE EE EE F0 
17593     00 00 00 04 
17597     0E 12 14 12 
1759b     12 12 10 0C | 	byte	$ee, $ee, $ee, $f0, $00, $00, $00, $04, $0e, $12, $14, $12, $12, $12, $10, $0c
1759f     06 04 00 00 
175a3     00 FC FC FA 
175a7     F8 F4 F4 F2 
175ab     F2 F2 F0 EE | 	byte	$06, $04, $00, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0, $ee
175af     EE EE EE F0 
175b3     00 00 00 08 
175b7     10 14 14 12 
175bb     12 10 0E 0C | 	byte	$ee, $ee, $ee, $f0, $00, $00, $00, $08, $10, $14, $14, $12, $12, $10, $0e, $0c
175bf     06 02 00 00 
175c3     FE FC FA FA 
175c7     F8 F4 F4 F2 
175cb     F2 F0 F0 EE | 	byte	$06, $02, $00, $00, $fe, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $ee
175cf     EE EE F0 F2 
175d3     00 00 04 0C 
175d7     12 14 14 12 
175db     12 10 0E 08 | 	byte	$ee, $ee, $f0, $f2, $00, $00, $04, $0c, $12, $14, $14, $12, $12, $10, $0e, $08
175df     04 02 00 00 
175e3     00 FC FA FA 
175e7     F8 F4 F4 F2 
175eb     F2 F0 F0 EE | 	byte	$04, $02, $00, $00, $00, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $ee
175ef     EE EE F0 F8 
175f3     00 00 06 0E 
175f7     14 14 14 12 
175fb     12 0E 0C 06 | 	byte	$ee, $ee, $f0, $f8, $00, $00, $06, $0e, $14, $14, $14, $12, $12, $0e, $0c, $06
175ff     04 00 00 00 
17603     FE FC FA F8 
17607     F8 F4 F4 F2 
1760b     F2 F0 F0 F0 | 	byte	$04, $00, $00, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $f0
1760f     EE EE F0 FA 
17613     00 02 08 10 
17617     14 14 12 12 
1761b     10 0E 0C 06 | 	byte	$ee, $ee, $f0, $fa, $00, $02, $08, $10, $14, $14, $12, $12, $10, $0e, $0c, $06
1761f     02 00 00 00 
17623     FC FC FA F8 
17627     F4 F4 F2 F2 
1762b     F0 F0 F0 EE | 	byte	$02, $00, $00, $00, $fc, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $f0, $ee
1762f     EE F0 F0 00 
17633     00 04 0E 12 
17637     14 14 12 12 
1763b     10 0C 08 04 | 	byte	$ee, $f0, $f0, $00, $00, $04, $0e, $12, $14, $14, $12, $12, $10, $0c, $08, $04
1763f     02 00 00 FE 
17643     FC FA FA F8 
17647     F4 F4 F2 F2 
1764b     F0 F0 F0 EE | 	byte	$02, $00, $00, $fe, $fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $f0, $ee
1764f     EE F0 F0 00 
17653     02 08 10 14 
17657     14 14 12 10 
1765b     10 0C 08 04 | 	byte	$ee, $f0, $f0, $00, $02, $08, $10, $14, $14, $14, $12, $10, $10, $0c, $08, $04
1765f     00 00 00 FE 
17663     FC FA F8 F8 
17667     F4 F2 F2 F2 
1766b     F0 F0 F0 EE | 	byte	$00, $00, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f2, $f0, $f0, $f0, $ee
1766f     F0 F0 F2 00 
17673     04 0C 12 14 
17677     14 12 12 10 
1767b     0E 08 06 02 | 	byte	$f0, $f0, $f2, $00, $04, $0c, $12, $14, $14, $12, $12, $10, $0e, $08, $06, $02
1767f     00 00 00 FE 
17683     FC FA F8 F8 
17687     F4 F2 F2 F0 
1768b     F0 F0 F0 EE | 	byte	$00, $00, $00, $fe, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f0, $f0, $f0, $f0, $ee
1768f     F0 F0 F2 02 
17693     06 0E 14 14 
17697     14 12 12 10 
1769b     0C 08 04 02 | 	byte	$f0, $f0, $f2, $02, $06, $0e, $14, $14, $14, $12, $12, $10, $0c, $08, $04, $02
1769f     00 00 00 FE 
176a3     FC FA F8 F4 
176a7     F4 F2 F2 F0 
176ab     F0 F0 F0 F0 | 	byte	$00, $00, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f0, $f0, $f0, $f0, $f0
176af     F0 F2 F8 04 
176b3     08 10 14 14 
176b7     14 12 10 0E 
176bb     0C 06 04 00 | 	byte	$f0, $f2, $f8, $04, $08, $10, $14, $14, $14, $12, $10, $0e, $0c, $06, $04, $00
176bf     00 00 FE FC 
176c3     FA FA F8 F4 
176c7     F2 F2 F2 F0 
176cb     F0 F0 F0 F0 | 	byte	$00, $00, $fe, $fc, $fa, $fa, $f8, $f4, $f2, $f2, $f2, $f0, $f0, $f0, $f0, $f0
176cf     F0 F2 FC 06 
176d3     0C 12 14 14 
176d7     12 12 10 0C 
176db     08 06 02 00 | 	byte	$f0, $f2, $fc, $06, $0c, $12, $14, $14, $12, $12, $10, $0c, $08, $06, $02, $00
176df     00 00 00 FC 
176e3     FA F8 F8 F4 
176e7     F2 F2 F0 F0 
176eb     F0 F0 F0 F0 | 	byte	$00, $00, $00, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f0, $f0, $f0, $f0, $f0, $f0
176ef     F0 F2 00 08 
176f3     10 14 14 14 
176f7     12 10 0E 0C 
176fb     08 04 02 00 | 	byte	$f0, $f2, $00, $08, $10, $14, $14, $14, $12, $10, $0e, $0c, $08, $04, $02, $00
176ff     00 00 FE FC 
17703     FA F8 F4 F4 
17707     F2 F2 F2 F0 
1770b     F0 F0 F0 F0 | 	byte	$00, $00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f0, $f0, $f0, $f0, $f0
1770f     F2 F2 04 0C 
17713     12 14 14 14 
17717     12 10 0E 0C 
1771b     06 02 00 00 | 	byte	$f2, $f2, $04, $0c, $12, $14, $14, $14, $12, $10, $0e, $0c, $06, $02, $00, $00
1771f     00 00 FE FC 
17723     FA F8 F4 F2 
17727     F2 F2 F2 F2 
1772b     F0 F0 F0 F0 | 	byte	$00, $00, $fe, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f0, $f0, $f0, $f0
1772f     F2 F4 08 0E 
17733     14 14 14 12 
17737     12 0E 0C 08 
1773b     04 02 00 00 | 	byte	$f2, $f4, $08, $0e, $14, $14, $14, $12, $12, $0e, $0c, $08, $04, $02, $00, $00
1773f     00 00 FC FA 
17743     F8 F8 F4 F2 
17747     F2 F2 F2 F2 
1774b     F0 F0 F0 F0 | 	byte	$00, $00, $fc, $fa, $f8, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f0, $f0, $f0, $f0
1774f     F2 FA 0C 12 
17753     14 14 14 12 
17757     10 0E 0C 06 
1775b     04 02 00 00 | 	byte	$f2, $fa, $0c, $12, $14, $14, $14, $12, $10, $0e, $0c, $06, $04, $02, $00, $00
1775f     00 FE FC FA 
17763     F8 F4 F4 F2 
17767     F2 F2 F2 F2 
1776b     F0 F0 F0 F0 | 	byte	$00, $fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f0, $f0, $f0, $f0
1776f     F4 00 0E 12 
17773     14 14 14 12 
17777     0E 0C 08 06 
1777b     02 00 00 00 | 	byte	$f4, $00, $0e, $12, $14, $14, $14, $12, $0e, $0c, $08, $06, $02, $00, $00, $00
1777f     00 FE FA FA 
17783     F8 F4 F4 F2 
17787     F2 F2 F2 F0 
1778b     F0 F0 F2 F2 | 	byte	$00, $fe, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f0, $f0, $f0, $f2, $f2
1778f     F4 04 10 14 
17793     14 14 12 10 
17797     0E 0C 08 04 
1779b     02 00 00 00 | 	byte	$f4, $04, $10, $14, $14, $14, $12, $10, $0e, $0c, $08, $04, $02, $00, $00, $00
1779f     00 FC FA F8 
177a3     F8 F4 F4 F2 
177a7     F2 F2 F2 F2 
177ab     F0 F0 F2 F2 | 	byte	$00, $fc, $fa, $f8, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f0, $f0, $f2, $f2
177af     F8 0C 12 14 
177b3     14 14 12 10 
177b7     0C 08 06 04 
177bb     02 00 00 00 | 	byte	$f8, $0c, $12, $14, $14, $14, $12, $10, $0c, $08, $06, $04, $02, $00, $00, $00
177bf     FE FC FA F8 
177c3     F4 F4 F2 F2 
177c7     F2 F2 F2 F2 
177cb     F0 F2 F2 F4 | 	byte	$fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f0, $f2, $f2, $f4
177cf     FC 10 14 14 
177d3     14 14 12 0E 
177d7     0C 08 06 02 
177db     00 00 00 00 | 	byte	$fc, $10, $14, $14, $14, $14, $12, $0e, $0c, $08, $06, $02, $00, $00, $00, $00
177df     FE FC FA F8 
177e3     F4 F4 F2 F2 
177e7     F2 F2 F2 F2 
177eb     F0 F2 F2 F8 | 	byte	$fe, $fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f0, $f2, $f2, $f8
177ef     00 12 14 14 
177f3     14 12 10 0C 
177f7     08 06 04 02 
177fb     00 00 00 FE | 	byte	$00, $12, $14, $14, $14, $12, $10, $0c, $08, $06, $04, $02, $00, $00, $00, $fe
177ff     FC FA FA F8 
17803     F4 F4 F2 F2 
17807     F2 F2 F2 F2 
1780b     F2 F2 F2 F8 | 	byte	$fc, $fa, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f8
1780f     06 14 14 14 
17813     14 12 0E 0C 
17817     08 06 04 02 
1781b     00 00 00 FE | 	byte	$06, $14, $14, $14, $14, $12, $0e, $0c, $08, $06, $04, $02, $00, $00, $00, $fe
1781f     FC FA F8 F4 
17823     F4 F2 F2 F2 
17827     F2 F2 F2 F2 
1782b     F2 F2 F4 FC | 	byte	$fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fc
1782f     0E 14 14 14 
17833     12 10 0E 0C 
17837     06 04 02 00 
1783b     00 00 00 FE | 	byte	$0e, $14, $14, $14, $12, $10, $0e, $0c, $06, $04, $02, $00, $00, $00, $00, $fe
1783f     FC FA F8 F4 
17843     F4 F2 F2 F2 
17847     F2 F2 F2 F2 
1784b     F2 F2 F8 FE | 	byte	$fc, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f8, $fe
1784f     14 14 14 14 
17853     12 10 0C 08 
17857     06 04 02 00 
1785b     00 00 FE FC | 	byte	$14, $14, $14, $14, $12, $10, $0c, $08, $06, $04, $02, $00, $00, $00, $fe, $fc
1785f     FA FA F8 F4 
17863     F4 F2 F2 F2 
17867     F2 F2 F2 F2 
1786b     F2 F4 FA 00 | 	byte	$fa, $fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fa, $00
1786f     14 18 14 14 
17873     12 0E 0C 08 
17877     04 04 02 00 
1787b     00 00 00 FC | 	byte	$14, $18, $14, $14, $12, $0e, $0c, $08, $04, $04, $02, $00, $00, $00, $00, $fc
1787f     FA F8 F8 F4 
17883     F2 F2 F2 F2 
17887     F2 F2 F2 F2 
1788b     F2 F4 FC 08 | 	byte	$fa, $f8, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fc, $08
1788f     14 14 14 12 
17893     10 0E 0C 06 
17897     04 02 02 00 
1789b     00 00 FE FC | 	byte	$14, $14, $14, $12, $10, $0e, $0c, $06, $04, $02, $02, $00, $00, $00, $fe, $fc
1789f     FA F8 F4 F4 
178a3     F2 F2 F2 F2 
178a7     F2 F2 F2 F2 
178ab     F2 F8 FE 12 | 	byte	$fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f8, $fe, $12
178af     14 14 14 12 
178b3     10 0C 08 06 
178b7     04 02 00 00 
178bb     00 FE FC FA | 	byte	$14, $14, $14, $12, $10, $0c, $08, $06, $04, $02, $00, $00, $00, $fe, $fc, $fa
178bf     FA F8 F4 F4 
178c3     F2 F2 F2 F2 
178c7     F2 F2 F2 F2 
178cb     F4 FA 00 14 | 	byte	$fa, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fa, $00, $14
178cf     18 14 14 12 
178d3     0E 0C 06 04 
178d7     02 02 00 00 
178db     00 00 FC FA | 	byte	$18, $14, $14, $12, $0e, $0c, $06, $04, $02, $02, $00, $00, $00, $00, $fc, $fa
178df     F8 F8 F4 F4 
178e3     F2 F2 F2 F2 
178e7     F2 F2 F2 F2 
178eb     F8 FC 06 14 | 	byte	$f8, $f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f8, $fc, $06, $14
178ef     14 14 12 10 
178f3     0E 08 06 04 
178f7     02 00 00 00 
178fb     00 FE FC FA | 	byte	$14, $14, $12, $10, $0e, $08, $06, $04, $02, $00, $00, $00, $00, $fe, $fc, $fa
178ff     F8 F4 F4 F2 
17903     F2 F2 F2 F2 
17907     F2 F2 F2 F4 
1790b     F8 00 0E 18 | 	byte	$f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f8, $00, $0e, $18
1790f     14 14 12 10 
17913     0C 08 06 02 
17917     02 00 00 00 
1791b     00 FE FC FA | 	byte	$14, $14, $12, $10, $0c, $08, $06, $02, $02, $00, $00, $00, $00, $fe, $fc, $fa
1791f     F8 F4 F4 F2 
17923     F2 F2 F2 F2 
17927     F2 F2 F2 F4 
1792b     FC 00 14 18 | 	byte	$f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fc, $00, $14, $18
1792f     14 14 10 0E 
17933     0C 06 04 02 
17937     02 00 00 00 
1793b     00 FC FA FA | 	byte	$14, $14, $10, $0e, $0c, $06, $04, $02, $02, $00, $00, $00, $00, $fc, $fa, $fa
1793f     F8 F4 F4 F2 
17943     F2 F2 F2 F2 
17947     F2 F4 F4 F8 
1794b     FE 00 18 14 | 	byte	$f8, $f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $f8, $fe, $00, $18, $14
1794f     14 12 10 0E 
17953     08 06 04 02 
17957     00 00 00 00 
1795b     FE FC FA F8 | 	byte	$14, $12, $10, $0e, $08, $06, $04, $02, $00, $00, $00, $00, $fe, $fc, $fa, $f8
1795f     F8 F4 F2 F2 
17963     F2 F2 F2 F2 
17967     F2 F4 F4 FA 
1796b     00 06 18 14 | 	byte	$f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $fa, $00, $06, $18, $14
1796f     14 12 0E 0C 
17973     08 04 02 02 
17977     00 00 00 00 
1797b     FE FC FA F8 | 	byte	$14, $12, $0e, $0c, $08, $04, $02, $02, $00, $00, $00, $00, $fe, $fc, $fa, $f8
1797f     F8 F4 F2 F2 
17983     F2 F2 F2 F2 
17987     F2 F4 F8 FC 
1798b     00 0E 14 14 | 	byte	$f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f8, $fc, $00, $0e, $14, $14
1798f     14 12 0E 0C 
17993     06 04 02 00 
17997     00 00 00 00 
1799b     FC FC FA F8 | 	byte	$14, $12, $0e, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $fc, $fc, $fa, $f8
1799f     F8 F4 F2 F2 
179a3     F2 F2 F2 F2 
179a7     F4 F4 FA FE 
179ab     02 14 14 14 | 	byte	$f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $fa, $fe, $02, $14, $14, $14
179af     12 10 0E 08 
179b3     06 04 02 00 
179b7     00 00 00 FE 
179bb     FC FA FA F8 | 	byte	$12, $10, $0e, $08, $06, $04, $02, $00, $00, $00, $00, $fe, $fc, $fa, $fa, $f8
179bf     F4 F4 F2 F2 
179c3     F2 F2 F2 F2 
179c7     F4 F4 FC 00 
179cb     04 14 14 14 | 	byte	$f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $fc, $00, $04, $14, $14, $14
179cf     12 10 0C 08 
179d3     06 02 00 00 
179d7     00 00 00 FE 
179db     FC FA FA F8 | 	byte	$12, $10, $0c, $08, $06, $02, $00, $00, $00, $00, $00, $fe, $fc, $fa, $fa, $f8
179df     F4 F4 F2 F2 
179e3     F2 F2 F2 F2 
179e7     F4 F8 FE 00 
179eb     06 14 14 14 | 	byte	$f4, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f8, $fe, $00, $06, $14, $14, $14
179ef     12 0E 0C 08 
179f3     04 02 00 00 
179f7     00 00 00 FE 
179fb     FC FA F8 F8 | 	byte	$12, $0e, $0c, $08, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fa, $f8, $f8
179ff     F4 F2 F2 F2 
17a03     F2 F2 F2 F4 
17a07     F4 FA 00 02 
17a0b     0C 14 14 12 | 	byte	$f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f4, $fa, $00, $02, $0c, $14, $14, $12
17a0f     10 0E 08 06 
17a13     04 02 00 00 
17a17     00 00 FE FC 
17a1b     FC FA F8 F4 | 	byte	$10, $0e, $08, $06, $04, $02, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4
17a1f     F4 F2 F2 F2 
17a23     F2 F2 F2 F4 
17a27     F8 FC 00 04 
17a2b     12 14 14 12 | 	byte	$f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $f8, $fc, $00, $04, $12, $14, $14, $12
17a2f     10 0C 08 06 
17a33     02 00 00 00 
17a37     00 00 FE FC 
17a3b     FC FA F8 F4 | 	byte	$10, $0c, $08, $06, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4
17a3f     F4 F2 F2 F0 
17a43     F2 F2 F2 F4 
17a47     F8 FE 00 04 
17a4b     14 14 14 12 | 	byte	$f4, $f2, $f2, $f0, $f2, $f2, $f2, $f4, $f8, $fe, $00, $04, $14, $14, $14, $12
17a4f     0E 0C 08 04 
17a53     02 00 00 00 
17a57     00 00 FE FC 
17a5b     FC FA F8 F4 | 	byte	$0e, $0c, $08, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4
17a5f     F4 F2 F2 F2 
17a63     F2 F2 F2 F4 
17a67     FA 00 02 04 
17a6b     14 14 14 10 | 	byte	$f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4, $fa, $00, $02, $04, $14, $14, $14, $10
17a6f     0E 08 06 04 
17a73     02 00 00 00 
17a77     00 00 FE FC 
17a7b     FA FA F8 F4 | 	byte	$0e, $08, $06, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fa, $fa, $f8, $f4
17a7f     F2 F2 F0 F2 
17a83     F2 F2 F4 F8 
17a87     FC 00 04 06 
17a8b     14 14 12 10 | 	byte	$f2, $f2, $f0, $f2, $f2, $f2, $f4, $f8, $fc, $00, $04, $06, $14, $14, $12, $10
17a8f     0E 08 06 04 
17a93     00 00 00 00 
17a97     00 FE FE FC 
17a9b     FA FA F8 F4 | 	byte	$0e, $08, $06, $04, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fa, $fa, $f8, $f4
17a9f     F2 F2 F0 F2 
17aa3     F2 F2 F4 FA 
17aa7     00 00 04 08 
17aab     14 14 12 10 | 	byte	$f2, $f2, $f0, $f2, $f2, $f2, $f4, $fa, $00, $00, $04, $08, $14, $14, $12, $10
17aaf     0C 08 04 02 
17ab3     00 00 00 00 
17ab7     00 FE FC FC 
17abb     FA FA F4 F4 | 	byte	$0c, $08, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $fa, $f4, $f4
17abf     F2 F2 F0 F2 
17ac3     F2 F4 F4 FC 
17ac7     00 02 04 0E 
17acb     14 12 12 0E | 	byte	$f2, $f2, $f0, $f2, $f2, $f4, $f4, $fc, $00, $02, $04, $0e, $14, $12, $12, $0e
17acf     0C 06 04 02 
17ad3     00 00 00 00 
17ad7     00 FE FC FC 
17adb     FA F8 F4 F2 | 	byte	$0c, $06, $04, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4, $f2
17adf     F2 F2 F2 F2 
17ae3     F2          | 	byte	$f2[5]
17ae4     F4 F8 FE 00 
17ae8     04 04 10 14 
17aec     12 10 0E 08 
17af0     06 04 02 00 | 	byte	$f4, $f8, $fe, $00, $04, $04, $10, $14, $12, $10, $0e, $08, $06, $04, $02, $00
17af4     00 00 00 00 
17af8     FE FC FC FA 
17afc     F8 F4 F2 F2 
17b00     F2 F2 F2 F2 | 	byte	$00, $00, $00, $00, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f2
17b04     F4 FA 00 02 
17b08     04 04 12 12 
17b0c     12 10 0C 08 
17b10     04 02 00 00 | 	byte	$f4, $fa, $00, $02, $04, $04, $12, $12, $12, $10, $0c, $08, $04, $02, $00, $00
17b14     00 00 00 FE 
17b18     FE FC FC FA 
17b1c     F8 F4 F2 F2 
17b20     F2 F2 F2 F4 | 	byte	$00, $00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4
17b24     F4 FC 00 04 
17b28     04 04 14 12 
17b2c     12 0E 0C 06 
17b30     04 02 00 00 | 	byte	$f4, $fc, $00, $04, $04, $04, $14, $12, $12, $0e, $0c, $06, $04, $02, $00, $00
17b34     00 00 00 FE 
17b38     FE FC FA FA 
17b3c     F8 F4 F2 F2 
17b40     F2 F2 F2 F4 | 	byte	$00, $00, $00, $fe, $fe, $fc, $fa, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4
17b44     F8 FE 00 04 
17b48     04 04 14 12 
17b4c     10 0E 08 06 
17b50     04 02 00 00 | 	byte	$f8, $fe, $00, $04, $04, $04, $14, $12, $10, $0e, $08, $06, $04, $02, $00, $00
17b54     00 00 FE FE 
17b58     FC FC FA FA 
17b5c     F4 F2 F2 F2 
17b60     F2 F2 F2 F4 | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $fa, $f4, $f2, $f2, $f2, $f2, $f2, $f2, $f4
17b64     FA 00 02 04 
17b68     04 06 14 12 
17b6c     10 0C 08 04 
17b70     02 02 00 00 | 	byte	$fa, $00, $02, $04, $04, $06, $14, $12, $10, $0c, $08, $04, $02, $02, $00, $00
17b74     00 00 FE FE 
17b78     FC FC FA F8 
17b7c     F4 F2 F2 F2 
17b80     F2 F2 F4 F8 | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4, $f8
17b84     FC 00 04 04 
17b88     04 08 12 12 
17b8c     0E 0C 06 04 
17b90     02 00 00 00 | 	byte	$fc, $00, $04, $04, $04, $08, $12, $12, $0e, $0c, $06, $04, $02, $00, $00, $00
17b94     00 00 FE FE 
17b98     FC FC FA F8 
17b9c     F4 F2 F2 F2 
17ba0     F2 F2 F4 F8 | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4, $f8
17ba4     00 00 04 04 
17ba8     02 0E 12 10 
17bac     0E 0C 06 04 
17bb0     02 00 00 00 | 	byte	$00, $00, $04, $04, $02, $0e, $12, $10, $0e, $0c, $06, $04, $02, $00, $00, $00
17bb4     00 00 FE FE 
17bb8     FC FC FA F8 
17bbc     F4 F2 F2 F2 
17bc0     F2 F2 F4 FC | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f2, $f4, $fc
17bc4     00 02 04 04 
17bc8     02 0E 12 10 
17bcc     0C 08 04 02 
17bd0     02 00 00 00 | 	byte	$00, $02, $04, $04, $02, $0e, $12, $10, $0c, $08, $04, $02, $02, $00, $00, $00
17bd4     00 00 FE FE 
17bd8     FC FC FA F8 
17bdc     F4 F2 F2 F2 
17be0     F2 F4 F8 FE | 	byte	$00, $00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f4, $f8, $fe
17be4     00 04 04 02 
17be8     02 10 12 10 
17bec     0C 06 04 02 
17bf0     00 00 00 00 | 	byte	$00, $04, $04, $02, $02, $10, $12, $10, $0c, $06, $04, $02, $00, $00, $00, $00
17bf4     00 FE FE FC 
17bf8     FC FA F8 F4 
17bfc     F2 F2 F2 F2 
17c00     F4 F4 FA 00 | 	byte	$00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f2, $f4, $f4, $fa, $00
17c04     02 04 04 02 
17c08     02 12 10 0E 
17c0c     0C 06 04 02 
17c10     00 00 00 00 | 	byte	$02, $04, $04, $02, $02, $12, $10, $0e, $0c, $06, $04, $02, $00, $00, $00, $00
17c14     00 FE FE FC 
17c18     FC FA F8 F4 
17c1c     F2 F2 F2 F4 
17c20     F4 F8 FC 00 | 	byte	$00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f4, $f4, $f8, $fc, $00
17c24     04 04 04 02 
17c28     04 12 10 0E 
17c2c     08 04 04 02 
17c30     00 00 00 00 | 	byte	$04, $04, $04, $02, $04, $12, $10, $0e, $08, $04, $04, $02, $00, $00, $00, $00
17c34     00 FE FE FC 
17c38     FC FA F8 F4 
17c3c     F2 F2 F2 F4 
17c40     F4 F8 FE 00 | 	byte	$00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f2, $f4, $f4, $f8, $fe, $00
17c44     04 04 02 02 
17c48     04 12 10 0C 
17c4c     06 04 02 00 
17c50     00 00 00 00 | 	byte	$04, $04, $02, $02, $04, $12, $10, $0c, $06, $04, $02, $00, $00, $00, $00, $00
17c54     00 FE FE FC 
17c58     FC FA F8 F4 
17c5c     F2 F2 F4 F4 
17c60     F4 FA 00 02 | 	byte	$00, $fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f2, $f4, $f4, $f4, $fa, $00, $02
17c64     04 04 02 02 
17c68     04 12 0E 0C 
17c6c     06 04 02 00 
17c70     00 00 00 00 | 	byte	$04, $04, $02, $02, $04, $12, $0e, $0c, $06, $04, $02, $00, $00, $00, $00, $00
17c74     00 FE FE FC 
17c78     FA F8 F4 F2 
17c7c     F4 F4 F4 F4 
17c80     F8 FC 00 04 | 	byte	$00, $fe, $fe, $fc, $fa, $f8, $f4, $f2, $f4, $f4, $f4, $f4, $f8, $fc, $00, $04
17c84     04 04 02 02 
17c88     04 10 0E 08 
17c8c     04 04 02 00 
17c90     00 00 00 00 | 	byte	$04, $04, $02, $02, $04, $10, $0e, $08, $04, $04, $02, $00, $00, $00, $00, $00
17c94     FE FE FC FC 
17c98     FA F8 F4 F2 
17c9c     F4 F4 F4 F4 
17ca0     FA FE 00 04 | 	byte	$fe, $fe, $fc, $fc, $fa, $f8, $f4, $f2, $f4, $f4, $f4, $f4, $fa, $fe, $00, $04
17ca4     04 02 02 02 
17ca8     04 10 0C 06 
17cac     04 02 00 00 
17cb0     00 00 00 00 | 	byte	$04, $02, $02, $02, $04, $10, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $00
17cb4     FE FE FC FC 
17cb8     FA F8 F4 F4 
17cbc     F4 F4 F4 F8 
17cc0     FC 00 02 04 | 	byte	$fe, $fe, $fc, $fc, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $f8, $fc, $00, $02, $04
17cc4     04 02 02 02 
17cc8     06 0E 0C 06 
17ccc     04 02 00 00 
17cd0     00 00 00 00 | 	byte	$04, $02, $02, $02, $06, $0e, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $00
17cd4     FE FE FC FA 
17cd8     FA F8 F4 F4 
17cdc     F4 F4 F4 F8 
17ce0     FE 00 04 04 | 	byte	$fe, $fe, $fc, $fa, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $f8, $fe, $00, $04, $04
17ce4     04 02 02 02 
17ce8     08 0E 08 04 
17cec     02 02 00 00 
17cf0     00 00 00 00 | 	byte	$04, $02, $02, $02, $08, $0e, $08, $04, $02, $02, $00, $00, $00, $00, $00, $00
17cf4     FE FE FC FA 
17cf8     F8 F4 F4 F4 
17cfc     F4 F4 F8 FA 
17d00     00 02 04 04 | 	byte	$fe, $fe, $fc, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $f8, $fa, $00, $02, $04, $04
17d04     02 02 02 02 
17d08     08 0C 06 04 
17d0c     02 00 00 00 
17d10     00 00 00 00 | 	byte	$02, $02, $02, $02, $08, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00
17d14     FE FE FC FA 
17d18     F8 F4 F4 F4 
17d1c     F4 F4 F8 FC 
17d20     00 02 04 04 | 	byte	$fe, $fe, $fc, $fa, $f8, $f4, $f4, $f4, $f4, $f4, $f8, $fc, $00, $02, $04, $04
17d24     02 02 02 00 
17d28     0C 0C 06 04 
17d2c     02 00 00 00 
17d30     00 00 00 00 | 	byte	$02, $02, $02, $00, $0c, $0c, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00
17d34     FE FC FA FA 
17d38     F8 F4 F4 F8 
17d3c     F8 F8 FA FE 
17d40     00 04 04 02 | 	byte	$fe, $fc, $fa, $fa, $f8, $f4, $f4, $f8, $f8, $f8, $fa, $fe, $00, $04, $04, $02
17d44     02 02 02 00 
17d48     0C 08 06 02 
17d4c     02 00 00 00 
17d50     00 00 00 FE | 	byte	$02, $02, $02, $00, $0c, $08, $06, $02, $02, $00, $00, $00, $00, $00, $00, $fe
17d54     FE FC FA FA 
17d58     F8 F8 F4 F8 
17d5c     F8 F8 FC 00 
17d60     02 04 04 04 | 	byte	$fe, $fc, $fa, $fa, $f8, $f8, $f4, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04
17d64     02 02 00 00 
17d68     0C 08 04 02 
17d6c     00 00 00 00 
17d70     00 00 00 FE | 	byte	$02, $02, $00, $00, $0c, $08, $04, $02, $00, $00, $00, $00, $00, $00, $00, $fe
17d74     FE FC FA F8 
17d78     F8 F8 F8 F8 
17d7c     F8 F8 FE 00 
17d80     04 04 04 04 | 	byte	$fe, $fc, $fa, $f8, $f8, $f8, $f8, $f8, $f8, $f8, $fe, $00, $04, $04, $04, $04
17d84     02 02 00 00 
17d88     08 06 04 02 
17d8c     00 00 00 00 
17d90     00 00 00 FE | 	byte	$02, $02, $00, $00, $08, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00, $fe
17d94     FC FA FA F8 
17d98     F8 F8 F8 F8 
17d9c     F8 FC 00 02 
17da0     04 04 04 04 | 	byte	$fc, $fa, $fa, $f8, $f8, $f8, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04, $04
17da4     02 02 00 00 
17da8     08 06 02 02 
17dac     00 00 00 00 
17db0     00 00 00 FE | 	byte	$02, $02, $00, $00, $08, $06, $02, $02, $00, $00, $00, $00, $00, $00, $00, $fe
17db4     FC FA FA F8 
17db8     F8 F8 F8 F8 
17dbc     F8 FC 00 02 
17dc0     04 04 04 02 | 	byte	$fc, $fa, $fa, $f8, $f8, $f8, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04, $02
17dc4     02 00 00 00 
17dc8     08 04 02 02 
17dcc     00 00 00 00 
17dd0     00 00 FE 00 | 	byte	$02, $00, $00, $00, $08, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $00
17dd4     FC FA FA F8 
17dd8     F8 F8 F8 F8 
17ddc     FA FE 00 04 
17de0     04 04 04 02 | 	byte	$fc, $fa, $fa, $f8, $f8, $f8, $f8, $f8, $fa, $fe, $00, $04, $04, $04, $04, $02
17de4     02 00 00 00 
17de8     06 04 02 00 
17dec     00 00 00 00 
17df0     00 00 FE FE | 	byte	$02, $00, $00, $00, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fe
17df4     FC FA FA F8 
17df8     F8 F8 F8 F8 
17dfc     FC 00 02 04 
17e00     04 04 04 02 | 	byte	$fc, $fa, $fa, $f8, $f8, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04, $04, $02
17e04     00 00 00 00 
17e08     06 02 02 00 
17e0c     00 00 00 00 
17e10     00 FE FE FC | 	byte	$00, $00, $00, $00, $06, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc
17e14     FA FA FA F8 
17e18     F8 F8 F8 FA 
17e1c     FE 00 04 04 
17e20     04 04 04 02 | 	byte	$fa, $fa, $fa, $f8, $f8, $f8, $f8, $fa, $fe, $00, $04, $04, $04, $04, $04, $02
17e24     00 00 00 02 
17e28     04 02 02 00 
17e2c     00 00 00 00 
17e30     00 FE FE FC | 	byte	$00, $00, $00, $02, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc
17e34     FA FA FA FA 
17e38     F8 F8 F8 FC 
17e3c     00 02 04 04 
17e40     04 04 04 02 | 	byte	$fa, $fa, $fa, $fa, $f8, $f8, $f8, $fc, $00, $02, $04, $04, $04, $04, $04, $02
17e44     00 00 00 04 
17e48     04 02 02 00 
17e4c     00 00 00 00 
17e50     00 FE 00 FC | 	byte	$00, $00, $00, $04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $00, $fc
17e54     FA FA FA FA 
17e58     F8 F8 FA FE 
17e5c     00 02 04 04 
17e60     04 04 02 00 | 	byte	$fa, $fa, $fa, $fa, $f8, $f8, $fa, $fe, $00, $02, $04, $04, $04, $04, $02, $00
17e64     00 00 00 04 
17e68     02 02 00 00 
17e6c     00 00 00 00 
17e70     FE FE FC FA | 	byte	$00, $00, $00, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fa
17e74     FA FA FA FA 
17e78     F8 FA FC 00 
17e7c     00 04 04 04 
17e80     04 04 02 00 | 	byte	$fa, $fa, $fa, $fa, $f8, $fa, $fc, $00, $00, $04, $04, $04, $04, $04, $02, $00
17e84     00 00 FE 04 
17e88     02 02 00 00 
17e8c     00 00 00 00 
17e90     FE FE FC FA | 	byte	$00, $00, $fe, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fa
17e94     FA FA FA FA 
17e98     F8 FA FC 00 
17e9c     02 04 04 04 
17ea0     04 02 00 00 | 	byte	$fa, $fa, $fa, $fa, $f8, $fa, $fc, $00, $02, $04, $04, $04, $04, $02, $00, $00
17ea4     00 00 00 04 
17ea8     02 00 00 00 
17eac     00 00 00 00 
17eb0     FE FC FC FA | 	byte	$00, $00, $00, $04, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa
17eb4     FA FA FA FA 
17eb8     FA FA       | 	byte	$fa[6]
17eba     FE 00 04 04 
17ebe     04 04 04 02 
17ec2     00 00 00 FE 
17ec6     00 04 02 00 | 	byte	$fe, $00, $04, $04, $04, $04, $04, $02, $00, $00, $00, $fe, $00, $04, $02, $00
17eca     00 00 00 00 
17ece     00          | 	byte	$00[5]
17ecf     FE FE FC FC 
17ed3     FC FA FA FA 
17ed7     FA FA FC 00 
17edb     02 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fc, $00, $02, $04, $04, $04
17edf     04 04 02 00 
17ee3     00 FE 00 00 
17ee7     04 02 00 00 
17eeb     00 00 00 00 | 	byte	$04, $04, $02, $00, $00, $fe, $00, $00, $04, $02, $00, $00, $00, $00, $00, $00
17eef     FE FE FC FC 
17ef3     FA FA FA FA 
17ef7     FA FA FE 00 
17efb     02 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fa, $fe, $00, $02, $04, $04, $04
17eff     04 02 02 00 
17f03     00 FE FC 02 
17f07     02 00 00 00 
17f0b     00 00 00 FE | 	byte	$04, $02, $02, $00, $00, $fe, $fc, $02, $02, $00, $00, $00, $00, $00, $00, $fe
17f0f     FE FE FC FC 
17f13     FA FA FA FA 
17f17     FA FC 00 00 
17f1b     04 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fc, $00, $00, $04, $04, $04, $04
17f1f     04 02 00 00 
17f23     00 FE FC 04 
17f27     02 00 00 00 
17f2b     00 00 00 FE | 	byte	$04, $02, $00, $00, $00, $fe, $fc, $04, $02, $00, $00, $00, $00, $00, $00, $fe
17f2f     FE FC FC FC 
17f33     FC FA FA FA 
17f37     FA FC 00 02 
17f3b     04 04 04 04 | 	byte	$fe, $fc, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fc, $00, $02, $04, $04, $04, $04
17f3f     02 02 00 00 
17f43     00 FC FE 04 
17f47     02 00 00 00 
17f4b     00 00 FE FE | 	byte	$02, $02, $00, $00, $00, $fc, $fe, $04, $02, $00, $00, $00, $00, $00, $fe, $fe
17f4f     FE FC FC FC 
17f53     FA FA FA FA 
17f57     FA FE 00 04 
17f5b     04 04 04 04 | 	byte	$fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fa, $fe, $00, $04, $04, $04, $04, $04
17f5f     02 00 00 00 
17f63     FE FC 00 02 
17f67     02 00 00 00 
17f6b     00 00 FE FE | 	byte	$02, $00, $00, $00, $fe, $fc, $00, $02, $02, $00, $00, $00, $00, $00, $fe, $fe
17f6f     FE FC FC FC 
17f73     FA FA FA FA 
17f77     FC 00 02 04 
17f7b     06 04 04 04 | 	byte	$fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fc, $00, $02, $04, $06, $04, $04, $04
17f7f     02 00 00 FE 
17f83     FC FC 00 02 
17f87     00 00 00 00 
17f8b     00 00 FE FE | 	byte	$02, $00, $00, $fe, $fc, $fc, $00, $02, $00, $00, $00, $00, $00, $00, $fe, $fe
17f8f     FC FC FC FC 
17f93     FA FA FA FA 
17f97     FE 00 02 06 
17f9b     06 04 04 02 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fe, $00, $02, $06, $06, $04, $04, $02
17f9f     02 00 00 FE 
17fa3     FC FC 02 02 
17fa7     00 00 00 00 
17fab     00 FE FE FE | 	byte	$02, $00, $00, $fe, $fc, $fc, $02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe
17faf     FC FC FC FC 
17fb3     FA FA FA FC 
17fb7     00 00 04 06 
17fbb     04 04 04 02 | 	byte	$fc, $fc, $fc, $fc, $fa, $fa, $fa, $fc, $00, $00, $04, $06, $04, $04, $04, $02
17fbf     00 00 00 FE 
17fc3     FC FC 04 02 
17fc7     00 00 00 00 
17fcb     00 FE FE FE | 	byte	$00, $00, $00, $fe, $fc, $fc, $04, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe
17fcf     FC FC FC FC 
17fd3     FC          | 	byte	$fc[5]
17fd4     FA FA FC 00 
17fd8     02 04 06 04 
17fdc     04 04 02 00 
17fe0     00 FE FC FC | 	byte	$fa, $fa, $fc, $00, $02, $04, $06, $04, $04, $04, $02, $00, $00, $fe, $fc, $fc
17fe4     FE 02 02 00 
17fe8     00 00 00 00 
17fec     FE FE FC FC 
17ff0     FC FC FC FA | 	byte	$fe, $02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa
17ff4     FA FC FE 00 
17ff8     04 06 06 04 
17ffc     04 02 00 00 
18000     00 FE FC FC | 	byte	$fa, $fc, $fe, $00, $04, $06, $06, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc
18004     00 02 00 00 
18008     00 00 00 FE 
1800c     FE FE FC FC 
18010     FC FC FC FA | 	byte	$00, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa
18014     FC FC 00 00 
18018     04 06 04 04 
1801c     04 02 00 00 
18020     00 FE FC FC | 	byte	$fc, $fc, $00, $00, $04, $06, $04, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc
18024     00 02 00 00 
18028     00 00 00 FE 
1802c     FE FE FC FC 
18030     FC FC FC FA | 	byte	$00, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fa
18034     FC FE 00 02 
18038     06 06 04 04 
1803c     04 02 00 00 
18040     FE FC FC FC | 	byte	$fc, $fe, $00, $02, $06, $06, $04, $04, $04, $02, $00, $00, $fe, $fc, $fc, $fc
18044     02 02 00 00 
18048     00 00 00 FE 
1804c     FE FC FC FC 
18050     FC FC FC FC | 	byte	$02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc
18054     FC 00 00 04 
18058     06 06 04 04 
1805c     02 00 00 00 
18060     FE FC FC FE | 	byte	$fc, $00, $00, $04, $06, $06, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc, $fe
18064     02 02 00 00 
18068     00 00 FE FE 
1806c     FE FC FC FC 
18070     FC FC FC FC | 	byte	$02, $02, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc
18074     FC 00 02 04 
18078     06 04 04 04 
1807c     02 00 00 00 
18080     FE FC FC 00 | 	byte	$fc, $00, $02, $04, $06, $04, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc, $00
18084     02 00 00 00 
18088     00 00 FE FE 
1808c     FC FC FC FC 
18090     FC FC FC FC | 	byte	$02, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
18094     FE 00 04 06 
18098     04 04 04 02 
1809c     02 00 00 FE 
180a0     FC FC FC 00 | 	byte	$fe, $00, $04, $06, $04, $04, $04, $02, $02, $00, $00, $fe, $fc, $fc, $fc, $00
180a4     02 00 00 00 
180a8     00 00 FE FE 
180ac     FC FC FC FC 
180b0     FC FC FC FC | 	byte	$02, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc
180b4     00 00 04 06 
180b8     04 04 04 02 
180bc     00 00 00 00 
180c0     FC FC FC 02 | 	byte	$00, $00, $04, $06, $04, $04, $04, $02, $00, $00, $00, $00, $fc, $fc, $fc, $02
180c4     02 00 00 00 
180c8     00 FE FE FE 
180cc     FC FC FC FC 
180d0     FC FC FC FE | 	byte	$02, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe
180d4     00 02 06 04 
180d8     04 04 04 02 
180dc     00 00 00 FE 
180e0     FC FC FC 02 | 	byte	$00, $02, $06, $04, $04, $04, $04, $02, $00, $00, $00, $fe, $fc, $fc, $fc, $02
180e4     00 00 00 00 
180e8     00          | 	byte	$00[5]
180e9     FE FE FC FC 
180ed     FC FC FC FC 
180f1     FC FC FE 00 
180f5     04 06 04 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $04, $06, $04, $04
180f9     04 02 02 00 
180fd     00 00 FE FC 
18101     FC 00 02 00 
18105     00 00 00 00 | 	byte	$04, $02, $02, $00, $00, $00, $fe, $fc, $fc, $00, $02, $00, $00, $00, $00, $00
18109     FE FE FC FC 
1810d     FC FC FC FC 
18111     FC FE 00 02 
18115     04 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $02, $04, $04, $04, $04
18119     04 02 00 00 
1811d     00 00 FC FC 
18121     FC 00 02 00 
18125     00 00 00 00 | 	byte	$04, $02, $00, $00, $00, $00, $fc, $fc, $fc, $00, $02, $00, $00, $00, $00, $00
18129     FE FE FC FC 
1812d     FC FC FC FC 
18131     FC FE 00 02 
18135     04 04 04 04 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $02, $04, $04, $04, $04
18139     02 02 00 00 
1813d     00 00 FC FC 
18141     FC 02 00 00 
18145     00 00 00 00 | 	byte	$02, $02, $00, $00, $00, $00, $fc, $fc, $fc, $02, $00, $00, $00, $00, $00, $00
18149     FE FC FC FC 
1814d     FC FC FC FC 
18151     FC 00 00 04 
18155     06 04 04 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $00, $00, $04, $06, $04, $04, $02
18159     02 00 00 00 
1815d     00 00 FC FC 
18161     FC 02 00 00 
18165     00 00 00 FE | 	byte	$02, $00, $00, $00, $00, $00, $fc, $fc, $fc, $02, $00, $00, $00, $00, $00, $fe
18169     FE FC FC FC 
1816d     FC FC FC FC 
18171     FE 00 02 04 
18175     04 04 04 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $02, $04, $04, $04, $04, $02
18179     02 00 00 00 
1817d     00 FE FC FC 
18181     00 02 00 00 
18185     00 00 00 FE | 	byte	$02, $00, $00, $00, $00, $fe, $fc, $fc, $00, $02, $00, $00, $00, $00, $00, $fe
18189     FE FC FC FC 
1818d     FC FC FC FC 
18191     00 00 04 04 
18195     04 04 04 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $00, $00, $04, $04, $04, $04, $04, $02
18199     02 00 00 00 
1819d     00 FC FC FC 
181a1     00 00 00 00 
181a5     00 00 00 FE | 	byte	$02, $00, $00, $00, $00, $fc, $fc, $fc, $00, $00, $00, $00, $00, $00, $00, $fe
181a9     FC FC FC FC 
181ad     FC FC FC FC | 	byte	$fc[8]
181b1     00 00 04 04 
181b5     04 04 02 02 
181b9     00 00 00 00 
181bd     FE FC FC FC | 	byte	$00, $00, $04, $04, $04, $04, $02, $02, $00, $00, $00, $00, $fe, $fc, $fc, $fc
181c1     00 00 00 00 
181c5     00 00 00    | 	byte	$00[7]
181c8     FE FC FC FC 
181cc     FC FC FC FC 
181d0     FE 00 02 04 
181d4     04 04 04 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $00, $02, $04, $04, $04, $04, $02
181d8     02 00 00 00 
181dc     00 FE FC FC 
181e0     FC 02 00 00 
181e4     00 00 00 00 | 	byte	$02, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $02, $00, $00, $00, $00, $00, $00
181e8     FE FC FC FC 
181ec     FC FC FC FC 
181f0     00 00 04 04 
181f4     04 04 02 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $00, $00, $04, $04, $04, $04, $02, $02
181f8     02 00 00 00 
181fc     00 FE FC FC 
18200     FE 00 00 00 
18204     00 00 00 FE | 	byte	$02, $00, $00, $00, $00, $fe, $fc, $fc, $fe, $00, $00, $00, $00, $00, $00, $fe
18208     FC FC FC FC 
1820c     FC FC FC    | 	byte	$fc[7]
1820f     FE 00 02 04 
18213     04 04 02 02 
18217     02 02 00 00 
1821b     00 FE FC FC | 	byte	$fe, $00, $02, $04, $04, $04, $02, $02, $02, $02, $00, $00, $00, $fe, $fc, $fc
1821f     FA 00 00 00 
18223     00 00 00 00 
18227     FE FC FC FC 
1822b     FC FC FC FC | 	byte	$fa, $00, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fc
1822f     FE 00 02 06 
18233     04 04 02 02 
18237     02 00 00 00 
1823b     00 FE FC FC | 	byte	$fe, $00, $02, $06, $04, $04, $02, $02, $02, $00, $00, $00, $00, $fe, $fc, $fc
1823f     FA 00 00 00 
18243     00 00 00 00 
18247     FE FC FC FC 
1824b     FC FC FC FE | 	byte	$fa, $00, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fe
1824f     00 00 04 06 
18253     04 04 02 02 
18257     00 00 00 00 
1825b     00 FE FC FC | 	byte	$00, $00, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc
1825f     FA 00 00 00 
18263     00 00 00 00 
18267     FE FC FC FC 
1826b     FC FC FC FE | 	byte	$fa, $00, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc, $fc, $fe
1826f     00 02 04 04 
18273     04 02 02 02 
18277     00 00 00 00 
1827b     FE FE FC FA | 	byte	$00, $02, $04, $04, $04, $02, $02, $02, $00, $00, $00, $00, $fe, $fe, $fc, $fa
1827f     FC 00 00 00 
18283     00 00 00 FE 
18287     FC FC FA FC 
1828b     FC FC FC 00 | 	byte	$fc, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $fc, $fc, $fc, $fc, $00
1828f     00 04 06 04 
18293     04 02 02 00 
18297     00 00 00 00 
1829b     FE FC FC FA | 	byte	$00, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa
1829f     FC 00 00 00 
182a3     00 00 00 FE 
182a7     FC FC FA FC 
182ab     FC FC FE 00 | 	byte	$fc, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa, $fc, $fc, $fc, $fe, $00
182af     02 04 06 04 
182b3     02 02 02 00 
182b7     00 00 00 00 
182bb     FE FC FC FA | 	byte	$02, $04, $06, $04, $02, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa
182bf     00 00 00 00 
182c3     00 00 00    | 	byte	$00[7]
182c6     FE FC FC FC 
182ca     FC FC FC 00 
182ce     00 02 04 06 
182d2     04 02 02 02 | 	byte	$fe, $fc, $fc, $fc, $fc, $fc, $fc, $00, $00, $02, $04, $06, $04, $02, $02, $02
182d6     00 00 00 00 
182da     00          | 	byte	$00[5]
182db     FE FC FA FA 
182df     00 00 00 00 
182e3     00 00 FE FE 
182e7     FC FC FC FC | 	byte	$fe, $fc, $fa, $fa, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc
182eb     FC FE 00 00 
182ef     04 06 04 04 
182f3     02 02 00 00 
182f7     00 00 00 00 | 	byte	$fc, $fe, $00, $00, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $00
182fb     FE FC FA FA 
182ff     00 00 00 00 
18303     00 00 FE FC 
18307     FC FC FC FC | 	byte	$fe, $fc, $fa, $fa, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc
1830b     FC FE 00 02 
1830f     04 06 04 02 
18313     02 02 00 00 
18317     00 00 FE FE | 	byte	$fc, $fe, $00, $02, $04, $06, $04, $02, $02, $02, $00, $00, $00, $00, $fe, $fe
1831b     FC FC FA FA 
1831f     00 00 00 00 
18323     00 00 00 FC 
18327     FC FC FC FC | 	byte	$fc, $fc, $fa, $fa, $00, $00, $00, $00, $00, $00, $00, $fc, $fc, $fc, $fc, $fc
1832b     FC 00 00 04 
1832f     04 06 04 02 
18333     02 02 00 00 
18337     00 00 00 FE | 	byte	$fc, $00, $00, $04, $04, $06, $04, $02, $02, $02, $00, $00, $00, $00, $00, $fe
1833b     FC FC FA FC 
1833f     00 00 00 00 
18343     00 FE FE FC 
18347     FC FC FC FC | 	byte	$fc, $fc, $fa, $fc, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fc, $fc
1834b     FE 00 00 04 
1834f     06 04 04 02 
18353     02 00 00 00 
18357     00 00 FE FE | 	byte	$fe, $00, $00, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fe
1835b     FC FA FA FC 
1835f     00 00 00 00 
18363     00 00 FC FC 
18367     FC FC FC FE | 	byte	$fc, $fa, $fa, $fc, $00, $00, $00, $00, $00, $00, $fc, $fc, $fc, $fc, $fc, $fe
1836b     FE 00 02 06 
1836f     06 04 04 02 
18373     02 00 00 00 
18377     00 00 FE FC | 	byte	$fe, $00, $02, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc
1837b     FC FA FA FE 
1837f     00 00 00 00 
18383     00 FE FC FC 
18387     FC FC FC FE | 	byte	$fc, $fa, $fa, $fe, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fc, $fe
1838b     00 00 04 06 
1838f     06 04 02 02 
18393     02 00 00 00 
18397     00 FE FE FC | 	byte	$00, $00, $04, $06, $06, $04, $02, $02, $02, $00, $00, $00, $00, $fe, $fe, $fc
1839b     FC FA FA 00 
1839f     00 00 00 00 
183a3     00 FE FC FC 
183a7     FC FC FE FE | 	byte	$fc, $fa, $fa, $00, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fe, $fe
183ab     00 02 04 06 
183af     04 04 02 02 
183b3     00 00 00 00 
183b7     00 FE FE FC | 	byte	$00, $02, $04, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fc
183bb     FA FA FA 00 
183bf     00 00 00 00 
183c3     00 FC FC FC 
183c7     FC FC FE 00 | 	byte	$fa, $fa, $fa, $00, $00, $00, $00, $00, $00, $fc, $fc, $fc, $fc, $fc, $fe, $00
183cb     00 04 06 06 
183cf     04 04 02 02 
183d3     00 00 00 00 
183d7     00 FE FC FC | 	byte	$00, $04, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc
183db     FA FA FA 00 
183df     00 00 00 00 
183e3     FE FC FC FC 
183e7     FC FE FE 00 | 	byte	$fa, $fa, $fa, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fe, $fe, $00
183eb     02 04 06 06 
183ef     04 04 02 02 
183f3     00 00 00 00 
183f7     FE FE FC FC | 	byte	$02, $04, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $fe, $fe, $fc, $fc
183fb     FA FA FA 00 
183ff     00 00 00 00 
18403     FE FC FC FC 
18407     FC FE 00 00 | 	byte	$fa, $fa, $fa, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc, $fe, $00, $00
1840b     02 06 06 06 
1840f     04 02 02 02 
18413     00 00 00 FE 
18417     FE FC FC FC | 	byte	$02, $06, $06, $06, $04, $02, $02, $02, $00, $00, $00, $fe, $fe, $fc, $fc, $fc
1841b     FA FA FC 00 
1841f     00 00 00 00 
18423     FC FC FC FC 
18427     FE FE 00 00 | 	byte	$fa, $fa, $fc, $00, $00, $00, $00, $00, $fc, $fc, $fc, $fc, $fe, $fe, $00, $00
1842b     04 06 06 04 
1842f     04 02 02 00 
18433     00 00 00 00 
18437     FE FC FC FA | 	byte	$04, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fc, $fc, $fa
1843b     FA FA FA 00 
1843f     00 00 00 FE 
18443     FC FC FC FE 
18447     FE FE 00 02 | 	byte	$fa, $fa, $fa, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fe, $fe, $fe, $00, $02
1844b     06 06 06 04 
1844f     04 02 02 00 
18453     00 00 00 FE 
18457     FC FC FC FC | 	byte	$06, $06, $06, $04, $04, $02, $02, $00, $00, $00, $00, $fe, $fc, $fc, $fc, $fc
1845b     FC FC FE 00 
1845f     00 00 00 00 
18463     FE FE FE 00 
18467     00 00 00 02 | 	byte	$fc, $fc, $fe, $00, $00, $00, $00, $00, $fe, $fe, $fe, $00, $00, $00, $00, $02
1846b     04 04 04 02 
1846f     02 00 00 00 
18473     00 00 00 00 
18477     FE FE FE FC | 	byte	$04, $04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc
1847b     FC FC FE 00 
1847f     00 00 00 00 
18483     FE FE 00 00 
18487     00 00 00 04 | 	byte	$fc, $fc, $fe, $00, $00, $00, $00, $00, $fe, $fe, $00, $00, $00, $00, $00, $04
1848b     04 04 02 02 
1848f     02 00 00 00 
18493     00 00 00 00 
18497     FE FE FC FC | 	byte	$04, $04, $02, $02, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc
1849b     FC FC 00 00 
1849f     00 00 00 FE 
184a3     FE FE 00 00 
184a7     00 00 00 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $fe, $fe, $fe, $00, $00, $00, $00, $00, $04
184ab     04 04 02 02 
184af     02 00 00 00 
184b3     00 00 00 FE 
184b7     FE FE FE FC | 	byte	$04, $04, $02, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc
184bb     FC FC 00 00 
184bf     00 00 00 00 
184c3     FE 00 00 00 
184c7     00 00 02 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $02, $04
184cb     04 04 02 02 
184cf     00 00 00 00 
184d3     00 00 00 FE 
184d7     FE FE FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc
184db     FC FC 00 00 
184df     00 00 00 FE 
184e3     00 00 00 00 
184e7     00 00 04 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $04, $04
184eb     04 04 02 02 
184ef     00 00 00 00 
184f3     00 00 FE FE 
184f7     FE FE FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc, $fc
184fb     FC FC 00 00 
184ff     00 00 00 FE 
18503     00 00 00 00 
18507     00 02 04 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $02, $04, $04
1850b     04 04 02 02 
1850f     00 00 00 00 
18513     00 00 FE FE 
18517     FE FC FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc
1851b     FC FC 00 00 
1851f     00 00 FE 00 
18523     00 00 00 00 
18527     00 04 06 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $00, $04, $06, $04
1852b     04 04 02 02 
1852f     00 00 00 00 
18533     00 00 FE FE 
18537     FE FC FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fc, $fc, $fc
1853b     FC FC 00 00 
1853f     00 00 FE 00 
18543     00 00 00 00 
18547     02 04 06 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $fe, $00, $00, $00, $00, $00, $02, $04, $06, $04
1854b     04 04 02 02 
1854f     00 00 00 00 
18553     00 FE FE FE 
18557     FE FC FC FC | 	byte	$04, $04, $02, $02, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc, $fc, $fc
1855b     FC FC 00 00 
1855f     00 00 00 00 
18563     00 00 00 00 
18567     02 06 06 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $02, $06, $06, $04
1856b     04 04 02 00 
1856f     00 00 00 00 
18573     00 FE FE FE 
18577     FE FC FC FC | 	byte	$04, $04, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc, $fc, $fc
1857b     FC FC 00 00 
1857f     00 00 00 00 
18583     00 00 00 00 
18587     04 06 04 04 | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $06, $04, $04
1858b     04 04 02 00 
1858f     00 00 00 00 
18593     00 FE FE FE 
18597     FE FC FC FC | 	byte	$04, $04, $02, $00, $00, $00, $00, $00, $00, $fe, $fe, $fe, $fe, $fc, $fc, $fc
1859b     FC FC 00 00 
1859f     00 00 00 FE 
185a3     FE FC FC FC 
185a7     FA FA FA FA | 	byte	$fc, $fc, $00, $00, $00, $00, $00, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa
185ab     FA 00 00 02 
185af     04 04 04 04 
185b3     04 02 02 02 
185b7     02 00 00 00 | 	byte	$fa, $00, $00, $02, $04, $04, $04, $04, $04, $02, $02, $02, $02, $00, $00, $00
185bb     00 00 00 00 
185bf     FE FE FE FE 
185c3     FE FC FC FC 
185c7     FA FA FA FA | 	byte	$00, $00, $00, $00, $fe, $fe, $fe, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa
185cb     FC 00 00 02 
185cf     04 04 04 04 
185d3     02 02 02 02 
185d7     02 00 00 00 | 	byte	$fc, $00, $00, $02, $04, $04, $04, $04, $02, $02, $02, $02, $02, $00, $00, $00
185db     00 00 00 FE 
185df     FE FE FE FE 
185e3     FE FC FC FA 
185e7     FA FA FA FA | 	byte	$00, $00, $00, $fe, $fe, $fe, $fe, $fe, $fe, $fc, $fc, $fa, $fa, $fa, $fa, $fa
185eb     FE 00 00 04 
185ef     04 04 04 04 
185f3     02 02 02 02 
185f7     00 00 00 00 | 	byte	$fe, $00, $00, $04, $04, $04, $04, $04, $02, $02, $02, $02, $00, $00, $00, $00
185fb     00 00 00 FE 
185ff     FE FE FE FE 
18603     FC FC FC FA 
18607     FA FA FA FA | 	byte	$00, $00, $00, $fe, $fe, $fe, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fa
1860b     00 00 02 04 
1860f     04 04 04 02 
18613     02 02 02 00 
18617     00 00 00 00 | 	byte	$00, $00, $02, $04, $04, $04, $04, $02, $02, $02, $02, $00, $00, $00, $00, $00
1861b     00 00 00 FE 
1861f     FE FE FE FE 
18623     FC FC FC FA 
18627     FA FA FA FC | 	byte	$00, $00, $00, $fe, $fe, $fe, $fe, $fe, $fc, $fc, $fc, $fa, $fa, $fa, $fa, $fc
1862b     00 00 00 02 
1862f     02 02 02 00 
18633     00 00 00 00 
18637     00 00 00 00 | 	byte	$00, $00, $00, $02, $02, $02, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00
1863b     00 00 00 00 
1863f     00 00 00 00 | 	byte	$00[8]
18643     FE FE FC FC 
18647     FC FC FC FE 
1864b     00 00 02 02 
1864f     02 02 02 00 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fc, $fe, $00, $00, $02, $02, $02, $02, $02, $00
18653     00 00 00 00 
18657     00 00 00 00 
1865b     00 00 00 00 
1865f     00 00 00    | 	byte	$00[15]
18662     FE FE FE FC 
18666     FC FC FC FE 
1866a     FE 00 00 02 
1866e     02 02 02 00 | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fe, $fe, $00, $00, $02, $02, $02, $02, $00
18672     00 00 00 00 
18676     00 00 00 00 
1867a     00 00 00 00 
1867e     00 00 00 00 | 	byte	$00[16]
18682     FE FE FE FC 
18686     FC FC FC FE 
1868a     00 00 02 02 
1868e     02 02 02 00 | 	byte	$fe, $fe, $fe, $fc, $fc, $fc, $fc, $fe, $00, $00, $02, $02, $02, $02, $02, $00
18692     00 00 00 00 
18696     00 00 00 00 
1869a     00 00 00 00 
1869e     00 00 00 00 | 	byte	$00[16]
186a2     FE FE FC FC 
186a6     FC FC FE FE 
186aa     00 00 02 02 
186ae     02 02 02 00 | 	byte	$fe, $fe, $fc, $fc, $fc, $fc, $fe, $fe, $00, $00, $02, $02, $02, $02, $02, $00
186b2     00 00 00 00 
186b6     F5 F9 B2 80 
186ba     E0 53 6E 3E 
186be     00 A3 80 B1 | 	byte	$00, $00, $00, $00, $f5, $f9, $b2, $80, $e0, $53, $6e, $3e, $00, $a3, $80, $b1
186c2     0D 0B E9 FF 
186c6     18 E9 A3 B1 
186ca     FF 47 36 F1 
186ce     A3 B9 2C 46 | 	byte	$0d, $0b, $e9, $ff, $18, $e9, $a3, $b1, $ff, $47, $36, $f1, $a3, $b9, $2c, $46
186d2     00 C2 C9 05 
186d6     0B 0D 1C 0F 
186da     D2 A3 D0 3B 
186de     65 3E E9 A3 | 	byte	$00, $c2, $c9, $05, $0b, $0d, $1c, $0f, $d2, $a3, $d0, $3b, $65, $3e, $e9, $a3
186e2     B1 FF 4A 43 
186e6     17 E9 D8 E5 
186ea     F0 F9 14 36 
186ee     17 D2 9E E0 | 	byte	$b1, $ff, $4a, $43, $17, $e9, $d8, $e5, $f0, $f9, $14, $36, $17, $d2, $9e, $e0
186f2     2C 27 00 D6 
186f6     C6 D9 E9 DD 
186fa     D9 F0 F1 FF 
186fe     E1 F1 C1 A3 | 	byte	$2c, $27, $00, $d6, $c6, $d9, $e9, $dd, $d9, $f0, $f1, $ff, $e1, $f1, $c1, $a3
18702     E0 00 A7 A3 
18706     9A B6 F0 C2 
1870a     9E E1 CE C5 
1870e     A3 BD 97 96 | 	byte	$e0, $00, $a7, $a3, $9a, $b6, $f0, $c2, $9e, $e1, $ce, $c5, $a3, $bd, $97, $96
18712     D0 AD FF 96 
18716     BA C1 9B F7 
1871a     E1 B2 80 D0 
1871e     D0 E9 E1 8F | 	byte	$d0, $ad, $ff, $96, $ba, $c1, $9b, $f7, $e1, $b2, $80, $d0, $d0, $e9, $e1, $8f
18722     C1 B2 FB 88 
18726     B6 D0 34 5B 
1872a     00 D9 C1 00 
1872e     D0 00 82 E0 | 	byte	$c1, $b2, $fb, $88, $b6, $d0, $34, $5b, $00, $d9, $c1, $00, $d0, $00, $82, $e0
18732     D9 0D 00 F7 
18736     F1 17 B1 1F 
1873a     FF 2E 36 E8 
1873e     1F 09 00 78 | 	byte	$d9, $0d, $00, $f7, $f1, $17, $b1, $1f, $ff, $2e, $36, $e8, $1f, $09, $00, $78
18742     3B 55 3E 2C 
18746     07 65 72 1F 
1874a     7A 55 72 6D 
1874e     53 46 5B 6A | 	byte	$3b, $55, $3e, $2c, $07, $65, $72, $1f, $7a, $55, $72, $6d, $53, $46, $5b, $6a
18752     7F 7A 7F 53 
18756     5D 7F 7F 7F 
1875a     7F 7F 7C 7F 
1875e     7A 7F 7F 7A | 	byte	$7f, $7a, $7f, $53, $5d, $7f, $7f, $7f, $7f, $7f, $7c, $7f, $7a, $7f, $7f, $7a
18762     7F 7F 7F 7F 
18766     5B 71 7A 7C 
1876a     7F 7F 7F 7F 
1876e     7F 4F 7C 7A | 	byte	$7f, $7f, $7f, $7f, $5b, $71, $7a, $7c, $7f, $7f, $7f, $7f, $7f, $4f, $7c, $7a
18772     7F 7F 7C 7F 
18776     3B 5D 7F 5B 
1877a     5D 53 6D 5B 
1877e     5E 2A 17 24 | 	byte	$7f, $7f, $7c, $7f, $3b, $5d, $7f, $5b, $5d, $53, $6d, $5b, $5e, $2a, $17, $24
18782     7A 3E 27 3E 
18786     1C 1F 72 E5 
1878a     F5 17 F0 1F 
1878e     F0 C2 E0 E0 | 	byte	$7a, $3e, $27, $3e, $1c, $1f, $72, $e5, $f5, $17, $f0, $1f, $f0, $c2, $e0, $e0
18792     F7 0B B9 DC 
18796     A3 80 F0 A2 
1879a     F1 B2 80 B6 
1879e     86 BD A3 80 | 	byte	$f7, $0b, $b9, $dc, $a3, $80, $f0, $a2, $f1, $b2, $80, $b6, $86, $bd, $a3, $80
187a2     00 82 86 80 
187a6     82 80 93 80 
187aa     80 80 86 80 
187ae     80 80 80 82 | 	byte	$00, $82, $86, $80, $82, $80, $93, $80, $80, $80, $86, $80, $80, $80, $80, $82
187b2     80 80 80 80 
187b6     80 80 80 80 
187ba     80 80 80    | 	byte	$80[11]
187bd     82 80 80 80 
187c1     80 80 80 80 
187c5     80 80 80 80 
187c9     80 80 80 80 | 	byte	$82, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
187cd     84 80 80 80 
187d1     80 80 93 80 
187d5     80 80 82 80 
187d9     93 B1 82 84 | 	byte	$84, $80, $80, $80, $80, $80, $93, $80, $80, $80, $82, $80, $93, $b1, $82, $84
187dd     82 80 D8 80 
187e1     9B 9A A2 C2 
187e5     AD CE B1 AB 
187e9     B6 C5 07 E8 | 	byte	$82, $80, $d8, $80, $9b, $9a, $a2, $c2, $ad, $ce, $b1, $ab, $b6, $c5, $07, $e8
187ed     CA E0 E0 E8 
187f1     FD 1C 00 1F 
187f5     FF 1F 1F 0D 
187f9     46 2C 3E 3B | 	byte	$ca, $e0, $e0, $e8, $fd, $1c, $00, $1f, $ff, $1f, $1f, $0d, $46, $2c, $3e, $3b
187fd     3E 76 2A 3E 
18801     28 72 7F 55 
18805     7A 4E 62 7F 
18809     7E 6D 59 7F | 	byte	$3e, $76, $2a, $3e, $28, $72, $7f, $55, $7a, $4e, $62, $7f, $7e, $6d, $59, $7f
1880d     7F 7A 7E 7F 
18811     6D 7F 7F 7F 
18815     7F 7F 7F 7F 
18819     7F 7F 7F 7F | 	byte	$7f, $7a, $7e, $7f, $6d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
1881d     7F 7F 7F 7F 
      ...             
18839     7F 7F 7F 7F 
1883d     7F 7F       | 	byte	$7f[34]
1883f     7C 7F 7F 7F 
18843     7F 7F 7F 7F 
18847     7F 7F 65 7F 
1884b     61 7C 7A 7C | 	byte	$7c, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $65, $7f, $61, $7c, $7a, $7c
1884f     62 53 5D 5B 
18853     27 7F 34 1F 
18857     42 10 46 34 
1885b     00 37 09 D6 | 	byte	$62, $53, $5d, $5b, $27, $7f, $34, $1f, $42, $10, $46, $34, $00, $37, $09, $d6
1885f     1F E8 0B F1 
18863     F0 D0 F1 D0 
18867     C6 A7 E0 D2 
1886b     B1 CA 9B 82 | 	byte	$1f, $e8, $0b, $f1, $f0, $d0, $f1, $d0, $c6, $a7, $e0, $d2, $b1, $ca, $9b, $82
1886f     A7 8B BE 80 
18873     80 80 82 84 
18877     82 80 80 80 
1887b     80 80 80 80 | 	byte	$a7, $8b, $be, $80, $80, $80, $82, $84, $82, $80, $80, $80, $80, $80, $80, $80
1887f     80 80 80 80 
      ...             
188c7     80 80 80 80 
188cb     80 80 80 80 | 	byte	$80[80]
188cf     92 80 80 AF 
188d3     80 8A 9F 82 
188d7     AB B1 E4 8A 
188db     C2 C1 A9 E9 | 	byte	$92, $80, $80, $af, $80, $8a, $9f, $82, $ab, $b1, $e4, $8a, $c2, $c1, $a9, $e9
188df     F0 D6 F0 F1 
188e3     FD FB 17 1C 
188e7     17 FF 3E 1C 
188eb     34 1F 53 65 | 	byte	$f0, $d6, $f0, $f1, $fd, $fb, $17, $1c, $17, $ff, $3e, $1c, $34, $1f, $53, $65
188ef     61 3B 6D 76 
188f3     59 75 7F 7C 
188f7     7F 7C 7F 7F 
188fb     7F 7F 7F 7F | 	byte	$61, $3b, $6d, $76, $59, $75, $7f, $7c, $7f, $7c, $7f, $7f, $7f, $7f, $7f, $7f
188ff     7F 7F 7F 7F 
      ...             
1895b     7F 7F 7F 7F 
1895f     7F 7F 7F    | 	byte	$7f[99]
18962     7C 5B 7F 62 
18966     5D 5D 6A 3E 
1896a     4E 2E 4B 4E 
1896e     4B 00 1C 3B | 	byte	$7c, $5b, $7f, $62, $5d, $5d, $6a, $3e, $4e, $2e, $4b, $4e, $4b, $00, $1c, $3b
18972     17 FF 13 FF 
18976     18 FF 00 D9 
1897a     FD E1 E0 CE 
1897e     DC E8 D2 BA | 	byte	$17, $ff, $13, $ff, $18, $ff, $00, $d9, $fd, $e1, $e0, $ce, $dc, $e8, $d2, $ba
18982     D0 C2 8F B1 
18986     AB 9B 92 9B 
1898a     82 88 9A 80 
1898e     80 84 80 80 | 	byte	$d0, $c2, $8f, $b1, $ab, $9b, $92, $9b, $82, $88, $9a, $80, $80, $84, $80, $80
18992     80 80 80 80 
      ...             
189f2     80 80 80 80 
189f6     80 80       | 	byte	$80[102]
189f8     82 80 80 84 
189fc     80 A2 8A 88 
18a00     82 9B 9A 97 
18a04     9A A2 B2 9E | 	byte	$82, $80, $80, $84, $80, $a2, $8a, $88, $82, $9b, $9a, $97, $9a, $a2, $b2, $9e
18a08     BE C1 D2 AF 
18a0c     A2 D2 F0 CA 
18a10     C1 D9 D0 E1 
18a14     F5 DC F9 E1 | 	byte	$be, $c1, $d2, $af, $a2, $d2, $f0, $ca, $c1, $d9, $d0, $e1, $f5, $dc, $f9, $e1
18a18     C6 FF 0F E5 
18a1c     E0 F1 1C 13 
18a20     0D 0F 1C 1F 
18a24     34 1C 24 20 | 	byte	$c6, $ff, $0f, $e5, $e0, $f1, $1c, $13, $0d, $0f, $1c, $1f, $34, $1c, $24, $20
18a28     27 24 3E 5B 
18a2c     2E 1C 2C 7A 
18a30     3A 46 43 4E 
18a34     53 4F 5E 4A | 	byte	$27, $24, $3e, $5b, $2e, $1c, $2c, $7a, $3a, $46, $43, $4e, $53, $4f, $5e, $4a
18a38     75 51 59 7A 
18a3c     5D 55 3B 7F 
18a40     72 7C 57 71 
18a44     7E 7F 6E 7F | 	byte	$75, $51, $59, $7a, $5d, $55, $3b, $7f, $72, $7c, $57, $71, $7e, $7f, $6e, $7f
18a48     7F 7F 7F 7F 
18a4c     7A 7F 7A 7F 
18a50     7F 7F 7F 7F 
18a54     7F 7F 7F 7F | 	byte	$7f, $7f, $7f, $7f, $7a, $7f, $7a, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
18a58     7F 7F 7F 7F 
      ...             
18a90     7F 7F 7F 7F 
18a94     7F 7F 7F    | 	byte	$7f[63]
18a97     6D 7F 7F 7F 
18a9b     7F 7F 7F 7F 
18a9f     7F 76 7F 6D 
18aa3     7A 7A 7F 7F | 	byte	$6d, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $76, $7f, $6d, $7a, $7a, $7f, $7f
18aa7     75 5D 7F 7F 
18aab     72 65 62 7C 
18aaf     66 6D 6A 6E 
18ab3     5B 65 5D 6A | 	byte	$75, $5d, $7f, $7f, $72, $65, $62, $7c, $66, $6d, $6a, $6e, $5b, $65, $5d, $6a
18ab7     69 55 4B 6D 
18abb     5D 43 61 4A 
18abf     5D 53 3E 4B 
18ac3     4A 3F 27 3B | 	byte	$69, $55, $4b, $6d, $5d, $43, $61, $4a, $5d, $53, $3e, $4b, $4a, $3f, $27, $3b
18ac7     46 3B 23 34 
18acb     3A 37 3E 0D 
18acf     36 0F 1C 17 
18ad3     37 27 0B 01 | 	byte	$46, $3b, $23, $34, $3a, $37, $3e, $0d, $36, $0f, $1c, $17, $37, $27, $0b, $01
18ad7     1C 2A 09 09 
18adb     05 0B 07 07 
18adf     00 F1 14 F9 
18ae3     FF 03 00 EC | 	byte	$1c, $2a, $09, $09, $05, $0b, $07, $07, $00, $f1, $14, $f9, $ff, $03, $00, $ec
18ae7     F5 F0 FD F9 
18aeb     E5 DD F5 ED 
18aef     D2 E5 E1 CC 
18af3     E9 D6 CA C5 | 	byte	$f5, $f0, $fd, $f9, $e5, $dd, $f5, $ed, $d2, $e5, $e1, $cc, $e9, $d6, $ca, $c5
18af7     C2 CE BD B5 
18afb     CA AF B1 B2 
18aff     A2 AB A3 B1 
18b03     A3 A9 A7 93 | 	byte	$c2, $ce, $bd, $b5, $ca, $af, $b1, $b2, $a2, $ab, $a3, $b1, $a3, $a9, $a7, $93
18b07     A2 AB AB 8A 
18b0b     96 8F 92 9B 
18b0f     92 80 80 A2 
18b13     88 8A 80 80 | 	byte	$a2, $ab, $ab, $8a, $96, $8f, $92, $9b, $92, $80, $80, $a2, $88, $8a, $80, $80
18b17     80 80 80 80 
      ...             
18b6f     80 80 80 80 
18b73     80 80 80 80 | 	byte	$80[96]
18b77     82 80 80 80 
18b7b     80 80 80 80 
18b7f     80 80 82 8B 
18b83     80 86 92 93 | 	byte	$82, $80, $80, $80, $80, $80, $80, $80, $80, $80, $82, $8b, $80, $86, $92, $93
18b87     9E 9A A2 97 
18b8b     9A B1 AF B5 
18b8f     AF BA BA BE 
18b93     C5 C9 C5 C9 | 	byte	$9e, $9a, $a2, $97, $9a, $b1, $af, $b5, $af, $ba, $ba, $be, $c5, $c9, $c5, $c9
18b97     E1 C5 E8 D9 
18b9b     D4 E8 F3 F7 
18b9f     ED F0 F7 00 
18ba3     07 F9 09 10 | 	byte	$e1, $c5, $e8, $d9, $d4, $e8, $f3, $f7, $ed, $f0, $f7, $00, $07, $f9, $09, $10
18ba7     1C 0D 24 18 
18bab     24 1F 28 36 
18baf     32 30 3E 3B 
18bb3     51 4B 5D 55 | 	byte	$1c, $0d, $24, $18, $24, $1f, $28, $36, $32, $30, $3e, $3b, $51, $4b, $5d, $55
18bb7     5E 5D 57 5D 
18bbb     69 75 6A 6E 
18bbf     7A 7F 7C 7F 
18bc3     7C 7F 7F 7F | 	byte	$5e, $5d, $57, $5d, $69, $75, $6a, $6e, $7a, $7f, $7c, $7f, $7c, $7f, $7f, $7f
18bc7     7F 7F 7F 7F 
      ...             
18c1b     7F 7F 7F 7F 
18c1f     7F          | 	byte	$7f[89]
18c20     78 7F 7C 7C 
18c24     7A 7E 75 6D 
18c28     72 6A 6D 62 
18c2c     55 72 65 4A | 	byte	$78, $7f, $7c, $7c, $7a, $7e, $75, $6d, $72, $6a, $6d, $62, $55, $72, $65, $4a
18c30     51 53 4E 43 
18c34     46 4A 4A 36 
18c38     34 3A 32 30 
18c3c     28 32 1B 20 | 	byte	$51, $53, $4e, $43, $46, $4a, $4a, $36, $34, $3a, $32, $30, $28, $32, $1b, $20
18c40     18 17 14 0F 
18c44     0B 05 13 0D 
18c48     00 FD F9 F3 
18c4c     F7 F1 F9 ED | 	byte	$18, $17, $14, $0f, $0b, $05, $13, $0d, $00, $fd, $f9, $f3, $f7, $f1, $f9, $ed
18c50     E5 DD E1 E0 
18c54     D9 CC DD D9 
18c58     C2 BA C6 BD 
18c5c     BA B9 C1 B2 | 	byte	$e5, $dd, $e1, $e0, $d9, $cc, $dd, $d9, $c2, $ba, $c6, $bd, $ba, $b9, $c1, $b2
18c60     B1 B2 A5 A2 
18c64     A3 9E 9A A2 
18c68     97 8F 8E 92 
18c6c     88 8A 8A 82 | 	byte	$b1, $b2, $a5, $a2, $a3, $9e, $9a, $a2, $97, $8f, $8e, $92, $88, $8a, $8a, $82
18c70     86 80 80 80 
18c74     80 80 80 80 
18c78     80 80 80 80 
18c7c     80 80 80 80 | 	byte	$86, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
18c80     80 80 80 80 
      ...             
18cb8     80 80 80 80 
18cbc     80 80 80    | 	byte	$80[63]
18cbf     82 80 80 82 
18cc3     80 80 8F 84 
18cc7     84 82 9E 93 
18ccb     88 8A 96 96 | 	byte	$82, $80, $80, $82, $80, $80, $8f, $84, $84, $82, $9e, $93, $88, $8a, $96, $96
18ccf     9F 9B 9A A2 
18cd3     9F A9 A5 B1 
18cd7     B2 A9 A9 BE 
18cdb     BA B2 B9 C5 | 	byte	$9f, $9b, $9a, $a2, $9f, $a9, $a5, $b1, $b2, $a9, $a9, $be, $ba, $b2, $b9, $c5
18cdf     C9 CA C2 C2 
18ce3     CE CE D4 DC 
18ce7     D6 D8 DC E9 
18ceb     E8 E8 E1 E5 | 	byte	$c9, $ca, $c2, $c2, $ce, $ce, $d4, $dc, $d6, $d8, $dc, $e9, $e8, $e8, $e1, $e5
18cef     F7 00 F1 F7 
18cf3     F5 FF 00 07 
18cf7     00 05 05 0D 
18cfb     10 0F 0B 0B | 	byte	$f7, $00, $f1, $f7, $f5, $ff, $00, $07, $00, $05, $05, $0d, $10, $0f, $0b, $0b
18cff     14 23 17 10 
18d03     14 1C 1B 20 
18d07     27 2C 24 20 
18d0b     28 2C 2E 23 | 	byte	$14, $23, $17, $10, $14, $1c, $1b, $20, $27, $2c, $24, $20, $28, $2c, $2e, $23
18d0f     2E 34 3A 32 
18d13     3A 3A 30 36 
18d17     3F 42 3E 3A 
18d1b     3F 3E 3E 3B | 	byte	$2e, $34, $3a, $32, $3a, $3a, $30, $36, $3f, $42, $3e, $3a, $3f, $3e, $3e, $3b
18d1f     43 4B 4A 3B 
18d23     3B 4B 43 4B 
18d27     43 46 43 46 
18d2b     46 46 43 43 | 	byte	$43, $4b, $4a, $3b, $3b, $4b, $43, $4b, $43, $46, $43, $46, $46, $46, $43, $43
18d2f     4A 4A 4B 4A 
18d33     43 4B 46 47 
18d37     42 43 4B 4E 
18d3b     46 47 46 46 | 	byte	$4a, $4a, $4b, $4a, $43, $4b, $46, $47, $42, $43, $4b, $4e, $46, $47, $46, $46
18d3f     3F 4E 46 42 
18d43     43 42 3F 43 
18d47     3E 36 4B 3E 
18d4b     37 3A 3E 3B | 	byte	$3f, $4e, $46, $42, $43, $42, $3f, $43, $3e, $36, $4b, $3e, $37, $3a, $3e, $3b
18d4f     43 3F 36 34 
18d53     36 36 37 36 
18d57     32 2E 36 36 
18d5b     32 2E 36 32 | 	byte	$43, $3f, $36, $34, $36, $36, $37, $36, $32, $2e, $36, $36, $32, $2e, $36, $32
18d5f     32 36 30 2C 
18d63     2C 2E 2C 36 
18d67     2A 24 2A 2C 
18d6b     27 2C 32 27 | 	byte	$32, $36, $30, $2c, $2c, $2e, $2c, $36, $2a, $24, $2a, $2c, $27, $2c, $32, $27
18d6f     23 1C 27 23 
18d73     27 1F 27 1F 
18d77     1F 1C 1C 27 
18d7b     1F 17 18 1B | 	byte	$23, $1c, $27, $23, $27, $1f, $27, $1f, $1f, $1c, $1c, $27, $1f, $17, $18, $1b
18d7f     23 1C 1F 17 
18d83     17 17 17 18 
18d87     1B 13 17 18 
18d8b     14 10 0D 17 | 	byte	$23, $1c, $1f, $17, $17, $17, $17, $18, $1b, $13, $17, $18, $14, $10, $0d, $17
18d8f     1B 17 0F 0F 
18d93     0F 0B 10 14 
18d97     10 09 05 0D 
18d9b     0F 05 00 00 | 	byte	$1b, $17, $0f, $0f, $0f, $0b, $10, $14, $10, $09, $05, $0d, $0f, $05, $00, $00
18d9f     07 0D 09 07 
18da3     00 01 00 05 
18da7     05 05 FB 01 
18dab     FF 07 00 F9 | 	byte	$07, $0d, $09, $07, $00, $01, $00, $05, $05, $05, $fb, $01, $ff, $07, $00, $f9
18daf     FF 01 01 01 
18db3     F7 00 FD FF 
18db7     00 FD FD FB 
18dbb     F7 01 00 FD | 	byte	$ff, $01, $01, $01, $f7, $00, $fd, $ff, $00, $fd, $fd, $fb, $f7, $01, $00, $fd
18dbf     F9 F1 F7 F9 
18dc3     FB FB F9 F7 
18dc7     F3 F1 F9 F7 
18dcb     F3 F1 F1 F1 | 	byte	$f9, $f1, $f7, $f9, $fb, $fb, $f9, $f7, $f3, $f1, $f9, $f7, $f3, $f1, $f1, $f1
18dcf     F7 F5 F1 F1 
18dd3     ED EC F3 F1 
18dd7     F1 E9 F0 F5 
18ddb     ED E9 EC E9 | 	byte	$f7, $f5, $f1, $f1, $ed, $ec, $f3, $f1, $f1, $e9, $f0, $f5, $ed, $e9, $ec, $e9
18ddf     ED E9 E9 E4 
18de3     E8 EC E9 E9 
18de7     EC E1 E5 E4 
18deb     E5 E0 E1 E4 | 	byte	$ed, $e9, $e9, $e4, $e8, $ec, $e9, $e9, $ec, $e1, $e5, $e4, $e5, $e0, $e1, $e4
18def     E0 E9 E8 E4 
18df3     D9 D4 DD DD 
18df7     E1 E1 DD D9 
18dfb     D9 DD D9 D9 | 	byte	$e0, $e9, $e8, $e4, $d9, $d4, $dd, $dd, $e1, $e1, $dd, $d9, $d9, $dd, $d9, $d9
18dff     DD D2 D8 E0 
18e03     DC D8 D8 D4 
18e07     D9 D9 D8 D9 
18e0b     D4 D2 D8 D8 | 	byte	$dd, $d2, $d8, $e0, $dc, $d8, $d8, $d4, $d9, $d9, $d8, $d9, $d4, $d2, $d8, $d8
18e0f     D0 E0 D9 D6 
18e13     DC D4 D9 D6 
18e17     D9 D6 D9 D8 
18e1b     D8 D9 D9 DC | 	byte	$d0, $e0, $d9, $d6, $dc, $d4, $d9, $d6, $d9, $d6, $d9, $d8, $d8, $d9, $d9, $dc
18e1f     DC DD D6 DC 
18e23     D8 D6 E0 E1 
18e27     DD D9 DC E1 
18e2b     DD DD DD E4 | 	byte	$dc, $dd, $d6, $dc, $d8, $d6, $e0, $e1, $dd, $d9, $dc, $e1, $dd, $dd, $dd, $e4
18e2f     E4 E5 E1 E1 
18e33     DD E5 E8 E9 
18e37     E4 EC E9 E1 
18e3b     E1 ED E8 EC | 	byte	$e4, $e5, $e1, $e1, $dd, $e5, $e8, $e9, $e4, $ec, $e9, $e1, $e1, $ed, $e8, $ec
18e3f     E9 E5 ED EC 
18e43     EC F0 F3 ED 
18e47     EC ED F1 ED 
18e4b     EC F1 F5 F1 | 	byte	$e9, $e5, $ed, $ec, $ec, $f0, $f3, $ed, $ec, $ed, $f1, $ed, $ec, $f1, $f5, $f1
18e4f     F0 F7 F1 F7 
18e53     F9 F1 ED F3 
18e57     F5 F7 F9 F5 
18e5b     F3 F9 F7 FB | 	byte	$f0, $f7, $f1, $f7, $f9, $f1, $ed, $f3, $f5, $f7, $f9, $f5, $f3, $f9, $f7, $fb
18e5f     FD FB F9 F1 
18e63     F7 FF 00 F9 
18e67     F7 F9 FD FF 
18e6b     FD 00 F9 FB | 	byte	$fd, $fb, $f9, $f1, $f7, $ff, $00, $f9, $f7, $f9, $fd, $ff, $fd, $00, $f9, $fb
18e6f     F9 FF FF FF 
18e73     00 FF 00 FB 
18e77     F9 FF 03 FD 
18e7b     00 F7 00 00 | 	byte	$f9, $ff, $ff, $ff, $00, $ff, $00, $fb, $f9, $ff, $03, $fd, $00, $f7, $00, $00
18e7f     00 FF FF FF 
18e83     03 FD 00 00 
18e87     FF FF FF 05 
18e8b     05 00 FD FD | 	byte	$00, $ff, $ff, $ff, $03, $fd, $00, $00, $ff, $ff, $ff, $05, $05, $00, $fd, $fd
18e8f     03 FF 03 00 
18e93     01 01 01 03 
18e97     FF 00 00 03 
18e9b     01 01 FF 01 | 	byte	$03, $ff, $03, $00, $01, $01, $01, $03, $ff, $00, $00, $03, $01, $01, $ff, $01
18e9f     03 03 01 00 
18ea3     01 05 03 05 
18ea7     01 00 FF 00 
18eab     05 00 03 00 | 	byte	$03, $03, $01, $00, $01, $05, $03, $05, $01, $00, $ff, $00, $05, $00, $03, $00
18eaf     00 07 00 03 
18eb3     FB 01 0B 01 
18eb7     FD FD 01 00 
18ebb     00 05 00 FF | 	byte	$00, $07, $00, $03, $fb, $01, $0b, $01, $fd, $fd, $01, $00, $00, $05, $00, $ff
18ebf     00 FD 01 01 
18ec3     FD FD FF FF 
18ec7     FD FB 00 FF 
18ecb     FF FB 00 FF | 	byte	$00, $fd, $01, $01, $fd, $fd, $ff, $ff, $fd, $fb, $00, $ff, $ff, $fb, $00, $ff
18ecf     00 F9 F1 F7 
18ed3     FF FF F5 F3 
18ed7     F5 F7 F1 F7 
18edb     F9 F9 F5 F1 | 	byte	$00, $f9, $f1, $f7, $ff, $ff, $f5, $f3, $f5, $f7, $f1, $f7, $f9, $f9, $f5, $f1
18edf     F1 ED F3 F9 
18ee3     F5 F1 EC F0 
18ee7     F5 F1 F1 F3 
18eeb     F0 F3 F3 F1 | 	byte	$f1, $ed, $f3, $f9, $f5, $f1, $ec, $f0, $f5, $f1, $f1, $f3, $f0, $f3, $f3, $f1
18eef     F0 ED F0 F0 
18ef3     F1 F1 F0 F1 
18ef7     F0 EC EC F1 
18efb     F1 F1 EC EC | 	byte	$f0, $ed, $f0, $f0, $f1, $f1, $f0, $f1, $f0, $ec, $ec, $f1, $f1, $f1, $ec, $ec
18eff     E9 F0 EC E9 
18f03     EC EC F0 ED 
18f07     ED EC ED ED 
18f0b     E8 ED F1 ED | 	byte	$e9, $f0, $ec, $e9, $ec, $ec, $f0, $ed, $ed, $ec, $ed, $ed, $e8, $ed, $f1, $ed
18f0f     F1 F0 F1 E9 
18f13     E9 F1 F3 F3 
18f17     F1 EC F0 F1 
18f1b     F3 F3 F1 F1 | 	byte	$f1, $f0, $f1, $e9, $e9, $f1, $f3, $f3, $f1, $ec, $f0, $f1, $f3, $f3, $f1, $f1
18f1f     F3 F1 F7 F1 
18f23     F5 F1 F7 F3 
18f27     F0 F7 F3 F1 
18f2b     FB F9 F3 F1 | 	byte	$f3, $f1, $f7, $f1, $f5, $f1, $f7, $f3, $f0, $f7, $f3, $f1, $fb, $f9, $f3, $f1
18f2f     F7 F9 F7 F9 
18f33     FB F7 FD F7 
18f37     F9 FF FD FB 
18f3b     FD 00 00 FB | 	byte	$f7, $f9, $f7, $f9, $fb, $f7, $fd, $f7, $f9, $ff, $fd, $fb, $fd, $00, $00, $fb
18f3f     FF 00 00 00 
18f43     FF 01 00 FF 
18f47     00 01 FF 00 
18f4b     03 01 00 00 | 	byte	$ff, $00, $00, $00, $ff, $01, $00, $ff, $00, $01, $ff, $00, $03, $01, $00, $00
18f4f     FF 01 00 FF 
18f53     05 01 00 01 
18f57     FF 05 03 01 
18f5b     FF 00 01 01 | 	byte	$ff, $01, $00, $ff, $05, $01, $00, $01, $ff, $05, $03, $01, $ff, $00, $01, $01
18f5f     01 00 FF 05 
18f63     05 00 FF 00 
18f67     FD 00 FF FF 
18f6b     FF FF FF 01 | 	byte	$01, $00, $ff, $05, $05, $00, $ff, $00, $fd, $00, $ff, $ff, $ff, $ff, $ff, $01
18f6f     01 FD FB FF 
18f73     00 01 FD FD 
18f77     FD 00 00 FB 
18f7b     FB FF FB 00 | 	byte	$01, $fd, $fb, $ff, $00, $01, $fd, $fd, $fd, $00, $00, $fb, $fb, $ff, $fb, $00
18f7f     FD FF F9 FF 
18f83     FF F9 F9 FF 
18f87     FF FB FD FD 
18f8b     F5 F9 FD FD | 	byte	$fd, $ff, $f9, $ff, $ff, $f9, $f9, $ff, $ff, $fb, $fd, $fd, $f5, $f9, $fd, $fd
18f8f     FD FB F7 FB 
18f93     FB F9 F7 F7 
18f97     FF F5 F9 F9 
18f9b     F7 FB FB FB | 	byte	$fd, $fb, $f7, $fb, $fb, $f9, $f7, $f7, $ff, $f5, $f9, $f9, $f7, $fb, $fb, $fb
18f9f     F5 F3 F9 FD 
18fa3     FB F5 F7 F9 
18fa7     FD FD F9 F7 
18fab     F3 F7 FB FB | 	byte	$f5, $f3, $f9, $fd, $fb, $f5, $f7, $f9, $fd, $fd, $f9, $f7, $f3, $f7, $fb, $fb
18faf     F9 F3 F7 FD 
18fb3     F7 F5 F5 F7 
18fb7     FF F9 F7 F7 
18fbb     F5 F9 FB F7 | 	byte	$f9, $f3, $f7, $fd, $f7, $f5, $f5, $f7, $ff, $f9, $f7, $f7, $f5, $f9, $fb, $f7
18fbf     F9 F9 F7 F7 
18fc3     FD FD F7 F9 
18fc7     FD FB FB FB 
18fcb     FB FD F9 FB | 	byte	$f9, $f9, $f7, $f7, $fd, $fd, $f7, $f9, $fd, $fb, $fb, $fb, $fb, $fd, $f9, $fb
18fcf     F9 F7 FB 00 
18fd3     FF F9 F7 FD 
18fd7     FD FB FB FD 
18fdb     FF FD F9 F9 | 	byte	$f9, $f7, $fb, $00, $ff, $f9, $f7, $fd, $fd, $fb, $fb, $fd, $ff, $fd, $f9, $f9
18fdf     FD FF F9 FF 
18fe3     FD FB FB FB 
18fe7     FF FF FD FF 
18feb     FD F9 F9 F9 | 	byte	$fd, $ff, $f9, $ff, $fd, $fb, $fb, $fb, $ff, $ff, $fd, $ff, $fd, $f9, $f9, $f9
18fef     FD FD FF FB 
18ff3     FB F9 FF FD 
18ff7     FD F9 F9 F9 
18ffb     FF FD F9 F9 | 	byte	$fd, $fd, $ff, $fb, $fb, $f9, $ff, $fd, $fd, $f9, $f9, $f9, $ff, $fd, $f9, $f9
18fff     F9 FB FD F9 
19003     F9 FB FF FD 
19007     F5 F7 F9 FD 
1900b     FD F9 F9 F7 | 	byte	$f9, $fb, $fd, $f9, $f9, $fb, $ff, $fd, $f5, $f7, $f9, $fd, $fd, $f9, $f9, $f7
1900f     F7 F9 F9 F9 
19013     F7 F7 F7 FB 
19017     FD F7 F3 F9 
1901b     F9 F5 F9 FB | 	byte	$f7, $f9, $f9, $f9, $f7, $f7, $f7, $fb, $fd, $f7, $f3, $f9, $f9, $f5, $f9, $fb
1901f     F7 F3 F5 F5 
19023     F7 F7 F5 F5 
19027     F7 F7 F5 F3 
1902b     F1 F5 F7 F1 | 	byte	$f7, $f3, $f5, $f5, $f7, $f7, $f5, $f5, $f7, $f7, $f5, $f3, $f1, $f5, $f7, $f1
1902f     F3 F3 F3 F1 
19033     F1 F5 F7 F3 
19037     F1 F1 F3 F5 
1903b     F3 ED ED F1 | 	byte	$f3, $f3, $f3, $f1, $f1, $f5, $f7, $f3, $f1, $f1, $f3, $f5, $f3, $ed, $ed, $f1
1903f     F5 F5 F3 ED 
19043     E9 F1 F3 F5 
19047     F0 F1 F0 F0 
1904b     F1 F1 F0 F1 | 	byte	$f5, $f5, $f3, $ed, $e9, $f1, $f3, $f5, $f0, $f1, $f0, $f0, $f1, $f1, $f0, $f1
1904f     F3 F1 F1 F3 
19053     F0 F0 F3 F9 
19057     F5 F1 ED F0 
1905b     F7 F5 F5 F3 | 	byte	$f3, $f1, $f1, $f3, $f0, $f0, $f3, $f9, $f5, $f1, $ed, $f0, $f7, $f5, $f5, $f3
1905f     F1 F1 F5 F9 
19063     F5 F3 F5 F9 
19067     FD F7 F5 F5 
1906b     F7 F9 FB F9 | 	byte	$f1, $f1, $f5, $f9, $f5, $f3, $f5, $f9, $fd, $f7, $f5, $f5, $f7, $f9, $fb, $f9
1906f     F7 F9 F7 FD 
19073     00 00 F9 F7 
19077     FB FF 00 FF 
1907b     FD FF 00 FF | 	byte	$f7, $f9, $f7, $fd, $00, $00, $f9, $f7, $fb, $ff, $00, $ff, $fd, $ff, $00, $ff
1907f     FF FF 00 00 
19083     00 00 01 00 
19087     FF FF 03 01 
1908b     00 00 01 05 | 	byte	$ff, $ff, $00, $00, $00, $00, $01, $00, $ff, $ff, $03, $01, $00, $00, $01, $05
1908f     05 03 00 FF 
19093     03 05 05 05 
19097     00 03 07 09 
1909b     05 00 01 03 | 	byte	$05, $03, $00, $ff, $03, $05, $05, $05, $00, $03, $07, $09, $05, $00, $01, $03
1909f     09 07 03 03 
190a3     05 05 05 05 
190a7     01 03 01 05 
190ab     07 05 05 00 | 	byte	$09, $07, $03, $03, $05, $05, $05, $05, $01, $03, $01, $05, $07, $05, $05, $00
190af     01 01 05 05 
190b3     03 03 01 00 
190b7     03 00 FF 00 
190bb     03 00 FF 01 | 	byte	$01, $01, $05, $05, $03, $03, $01, $00, $03, $00, $ff, $00, $03, $00, $ff, $01
190bf     05 00 00 00 
190c3     00 FD FF 01 
190c7     00 FD FF FF 
190cb     01 00 FB FD | 	byte	$05, $00, $00, $00, $00, $fd, $ff, $01, $00, $fd, $ff, $ff, $01, $00, $fb, $fd
190cf     FF FB FD 00 
190d3     FF FF FD FD 
190d7     F9 FF 00 FD 
190db     F9 FB FD F9 | 	byte	$ff, $fb, $fd, $00, $ff, $ff, $fd, $fd, $f9, $ff, $00, $fd, $f9, $fb, $fd, $f9
190df     FB FF FD F9 
190e3     F9 F9 F9 F9 
190e7     F9 F9 F9 F9 
190eb     F5 F3 F7 F9 | 	byte	$fb, $ff, $fd, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f5, $f3, $f7, $f9
190ef     F5 F1 F7 FD 
190f3     F9 F1 F0 F3 
190f7     F7 F1 F1 F5 
190fb     F3 F1 ED F0 | 	byte	$f5, $f1, $f7, $fd, $f9, $f1, $f0, $f3, $f7, $f1, $f1, $f5, $f3, $f1, $ed, $f0
190ff     F1 F1 F1 F0 
19103     F1 EC E8 F0 
19107     F1 ED ED EC 
1910b     E9 F0 F0 EC | 	byte	$f1, $f1, $f1, $f0, $f1, $ec, $e8, $f0, $f1, $ed, $ed, $ec, $e9, $f0, $f0, $ec
1910f     E9 E8 E8 E8 
19113     ED ED E5 E5 
19117     E9 E8 E5 E8 
1911b     E8 E8 E8 E5 | 	byte	$e9, $e8, $e8, $e8, $ed, $ed, $e5, $e5, $e9, $e8, $e5, $e8, $e8, $e8, $e8, $e5
1911f     E4 E8 E8 E8 
19123     E8 E9 E5 E1 
19127     E1 E8 E8 E9 
1912b     E5 E5 E5 E4 | 	byte	$e4, $e8, $e8, $e8, $e8, $e9, $e5, $e1, $e1, $e8, $e8, $e9, $e5, $e5, $e5, $e4
1912f     E4 E8 E9 E5 
19133     E4 E5 E8 E8 
19137     EC E9 E8 E8 
1913b     E8 EC EC ED | 	byte	$e4, $e8, $e9, $e5, $e4, $e5, $e8, $e8, $ec, $e9, $e8, $e8, $e8, $ec, $ec, $ed
1913f     EC E9 EC EC 
19143     E9 EC ED F0 
19147     F1 F3 F3 ED 
1914b     F0 F3 F5 F3 | 	byte	$ec, $e9, $ec, $ec, $e9, $ec, $ed, $f0, $f1, $f3, $f3, $ed, $f0, $f3, $f5, $f3
1914f     F1 F7 FB F9 
19153     F5 F7 F9 FD 
19157     FB FF FB F5 
1915b     FB FF 00 FF | 	byte	$f1, $f7, $fb, $f9, $f5, $f7, $f9, $fd, $fb, $ff, $fb, $f5, $fb, $ff, $00, $ff
1915f     FD FF FF 00 
19163     00 00 03 FF 
19167     01 05 03 01 
1916b     03 05 05 05 | 	byte	$fd, $ff, $ff, $00, $00, $00, $03, $ff, $01, $05, $03, $01, $03, $05, $05, $05
1916f     05 07 0B 07 
19173     05 07 09 07 
19177     0B 0D 0F 0B 
1917b     09 0B 0B 0D | 	byte	$05, $07, $0b, $07, $05, $07, $09, $07, $0b, $0d, $0f, $0b, $09, $0b, $0b, $0d
1917f     0D 0D 0D 0D 
19183     0D 0D       | 	byte	$0d[6]
19185     0B 0B 0F 0B 
19189     0D 0B 0B 0B 
1918d     0B 0D 0B 0D 
19191     0B 0B 0D 0B | 	byte	$0b, $0b, $0f, $0b, $0d, $0b, $0b, $0b, $0b, $0d, $0b, $0d, $0b, $0b, $0d, $0b
19195     07 05 07 09 
19199     0B 07 05 07 
1919d     07 07 03 03 
191a1     05 05 01 01 | 	byte	$07, $05, $07, $09, $0b, $07, $05, $07, $07, $07, $03, $03, $05, $05, $01, $01
191a5     03 00 00 FF 
191a9     FF 01 FD FF 
191ad     FD FF FF FD 
191b1     F9 FB F9 F9 | 	byte	$03, $00, $00, $ff, $ff, $01, $fd, $ff, $fd, $ff, $ff, $fd, $f9, $fb, $f9, $f9
191b5     F9 F7 F9 F9 
191b9     F7 F3 F3 F5 
191bd     F7 F5 F3 F1 
191c1     F3 F5 F1 F3 | 	byte	$f9, $f7, $f9, $f9, $f7, $f3, $f3, $f5, $f7, $f5, $f3, $f1, $f3, $f5, $f1, $f3
191c5     F3 F1 F1 F1 
191c9     F3 F0 F0 F7 
191cd     F5 F5 ED ED 
191d1     F0 F1 F1 F1 | 	byte	$f3, $f1, $f1, $f1, $f3, $f0, $f0, $f7, $f5, $f5, $ed, $ed, $f0, $f1, $f1, $f1
191d5     F1 ED F0 F1 
191d9     F1 F0 ED F0 
191dd     F3 F3 F1 F1 
191e1     F0 F1 F7 F1 | 	byte	$f1, $ed, $f0, $f1, $f1, $f0, $ed, $f0, $f3, $f3, $f1, $f1, $f0, $f1, $f7, $f1
191e5     F1 F1 F5 F5 
191e9     F5 F3 F1 F1 
191ed     F1 F5 F9 F9 
191f1     F5 F5 F5 F7 | 	byte	$f1, $f1, $f5, $f5, $f5, $f3, $f1, $f1, $f1, $f5, $f9, $f9, $f5, $f5, $f5, $f7
191f5     F3 F9 F9 F9 
191f9     F7 F5 F9 F9 
191fd     F7 F3 F9 F9 
19201     FB F7 FB F9 | 	byte	$f3, $f9, $f9, $f9, $f7, $f5, $f9, $f9, $f7, $f3, $f9, $f9, $fb, $f7, $fb, $f9
19205     F9 F9 F5 F9 
19209     FD F9 FB F9 
1920d     F9 FD FD FD 
19211     FB F7 FB FF | 	byte	$f9, $f9, $f5, $f9, $fd, $f9, $fb, $f9, $f9, $fd, $fd, $fd, $fb, $f7, $fb, $ff
19215     00 FB F9 FB 
19219     FD F9 FD 00 
1921d     00 FD F7 FB 
19221     FD FF FF FD | 	byte	$00, $fb, $f9, $fb, $fd, $f9, $fd, $00, $00, $fd, $f7, $fb, $fd, $ff, $ff, $fd
19225     FB F9 FD FD 
19229     FB FF FF FF 
1922d     FD FD F9 F9 
19231     FB FD FB FD | 	byte	$fb, $f9, $fd, $fd, $fb, $ff, $ff, $ff, $fd, $fd, $f9, $f9, $fb, $fd, $fb, $fd
19235     FD F9 FB F9 
19239     FD FD F9 F7 
1923d     F9 F9 F9 F9 
19241     F9 F7 F7 F3 | 	byte	$fd, $f9, $fb, $f9, $fd, $fd, $f9, $f7, $f9, $f9, $f9, $f9, $f9, $f7, $f7, $f3
19245     F3 F9 F9 F7 
19249     F5 F3 F3 F3 
1924d     F5 F7 F5 F7 
19251     F7 F3 F0 F0 | 	byte	$f3, $f9, $f9, $f7, $f5, $f3, $f3, $f3, $f5, $f7, $f5, $f7, $f7, $f3, $f0, $f0
19255     F3 F9 F5 F1 
19259     ED F0 F1 F1 
1925d     F1 F1 E9 EC 
19261     F0 F3 F1 EC | 	byte	$f3, $f9, $f5, $f1, $ed, $f0, $f1, $f1, $f1, $f1, $e9, $ec, $f0, $f3, $f1, $ec
19265     E9 ED F0 ED 
19269     ED EC ED F0 
1926d     F0 EC E8 E9 
19271     F1 F3 ED E9 | 	byte	$e9, $ed, $f0, $ed, $ed, $ec, $ed, $f0, $f0, $ec, $e8, $e9, $f1, $f3, $ed, $e9
19275     E9 ED F1 F1 
19279     ED EC E9 F0 
1927d     F1 F1 F0 F0 
19281     F1 F1 F1 F0 | 	byte	$e9, $ed, $f1, $f1, $ed, $ec, $e9, $f0, $f1, $f1, $f0, $f0, $f1, $f1, $f1, $f0
19285     F0 F1 F1 F3 
19289     F3 F1 F1 F1 
1928d     F3 F7 F7 F7 
19291     F7 F3 F5 F9 | 	byte	$f0, $f1, $f1, $f3, $f3, $f1, $f1, $f1, $f3, $f7, $f7, $f7, $f7, $f3, $f5, $f9
19295     F7 F9 F9 FB 
19299     FD FB F7 F9 
1929d     FF FB F9 FB 
192a1     FD FB FF 00 | 	byte	$f7, $f9, $f9, $fb, $fd, $fb, $f7, $f9, $ff, $fb, $f9, $fb, $fd, $fb, $ff, $00
192a5     FF FD FF 00 
192a9     FF 00 FF FF 
192ad     00 00 00 FF 
192b1     03 03 00 00 | 	byte	$ff, $fd, $ff, $00, $ff, $00, $ff, $ff, $00, $00, $00, $ff, $03, $03, $00, $00
192b5     00 01 03 01 
192b9     03 01 00 01 
192bd     03 07 05 01 
192c1     FF 05 05 05 | 	byte	$00, $01, $03, $01, $03, $01, $00, $01, $03, $07, $05, $01, $ff, $05, $05, $05
192c5     03 03 01 01 
192c9     05 05 05 01 
192cd     01 00 05 09 
192d1     05 01 03 03 | 	byte	$03, $03, $01, $01, $05, $05, $05, $01, $01, $00, $05, $09, $05, $01, $03, $03
192d5     07 05 05 09 
192d9     05 05 03 05 
192dd     09 05 05 05 
192e1     05 07 05 05 | 	byte	$07, $05, $05, $09, $05, $05, $03, $05, $09, $05, $05, $05, $05, $07, $05, $05
192e5     07 05 05 05 
192e9     05 05 05 05 
192ed     03 03 01 05 
192f1     05 07 05 01 | 	byte	$07, $05, $05, $05, $05, $05, $05, $05, $03, $03, $01, $05, $05, $07, $05, $01
192f5     01 00 00 01 
192f9     07 03 00 FF 
192fd     01 03 01 00 
19301     00 00 00 00 | 	byte	$01, $00, $00, $01, $07, $03, $00, $ff, $01, $03, $01, $00, $00, $00, $00, $00
19305     00 00 FF FD 
19309     FF FF 00 FD 
1930d     FD FD FF 00 
19311     F9 F9 FD FD | 	byte	$00, $00, $ff, $fd, $ff, $ff, $00, $fd, $fd, $fd, $ff, $00, $f9, $f9, $fd, $fd
19315     FF FD F5 F7 
19319     F9 F9 FB F9 
1931d     F5 F3 F3 F9 
19321     F9 F5 F3 F0 | 	byte	$ff, $fd, $f5, $f7, $f9, $f9, $fb, $f9, $f5, $f3, $f3, $f9, $f9, $f5, $f3, $f0
19325     F1 F3 F5 F3 
19329     F0 F1 F1 F1 
1932d     F3 F1 F0 ED 
19331     F0 ED F0 EC | 	byte	$f1, $f3, $f5, $f3, $f0, $f1, $f1, $f1, $f3, $f1, $f0, $ed, $f0, $ed, $f0, $ec
19335     ED F0 F1 ED 
19339     E9 E9 E9 F0 
1933d     ED E8 E8 EC 
19341     ED E9 E8 E9 | 	byte	$ed, $f0, $f1, $ed, $e9, $e9, $e9, $f0, $ed, $e8, $e8, $ec, $ed, $e9, $e8, $e9
19345     E8 E9 E9 E8 
19349     E8 E8 E8 E8 
1934d     E8 E5 E4 E8 
19351     E9 E9 E8 E5 | 	byte	$e8, $e9, $e9, $e8, $e8, $e8, $e8, $e8, $e8, $e5, $e4, $e8, $e9, $e9, $e8, $e5
19355     E8 E8 E1 E4 
19359     E8 E9 E9 E9 
1935d     E8 E5 E8 E5 
19361     E8 E9 E8 E8 | 	byte	$e8, $e8, $e1, $e4, $e8, $e9, $e9, $e9, $e8, $e5, $e8, $e5, $e8, $e9, $e8, $e8
19365     EC E9 E9 E8 
19369     E9 ED E9 F0 
1936d     ED E9 ED ED 
19371     ED ED EC F1 | 	byte	$ec, $e9, $e9, $e8, $e9, $ed, $e9, $f0, $ed, $e9, $ed, $ed, $ed, $ed, $ec, $f1
19375     F1 F1 F1 ED 
19379     F0 F3 F3 F1 
1937d     F1 F3 F5 F7 
19381     F7 F5 F3 F9 | 	byte	$f1, $f1, $f1, $ed, $f0, $f3, $f3, $f1, $f1, $f3, $f5, $f7, $f7, $f5, $f3, $f9
19385     FB F9 F9 F9 
19389     F9 F9 FD FF 
1938d     FD FD FD FF 
19391     FF FF FF FF | 	byte	$fb, $f9, $f9, $f9, $f9, $f9, $fd, $ff, $fd, $fd, $fd, $ff, $ff, $ff, $ff, $ff
19395     FF 00 FF FF 
19399     00 00 00 00 
1939d     01 00 00 01 
193a1     00 01 01 03 | 	byte	$ff, $00, $ff, $ff, $00, $00, $00, $00, $01, $00, $00, $01, $00, $01, $01, $03
193a5     01 01 05 03 
193a9     03 01 01 01 
193ad     01 01 05 05 
193b1     03 05 05 03 | 	byte	$01, $01, $05, $03, $03, $01, $01, $01, $01, $01, $05, $05, $03, $05, $05, $03
193b5     00 00 05 07 
193b9     01 01 01 01 
193bd     01 01 05 00 
193c1     00 01 03 00 | 	byte	$00, $00, $05, $07, $01, $01, $01, $01, $01, $01, $05, $00, $00, $01, $03, $00
193c5     00 01 01 01 
193c9     01 00 00 00 
193cd     01 00 00 FF 
193d1     00 FF 00 00 | 	byte	$00, $01, $01, $01, $01, $00, $00, $00, $01, $00, $00, $ff, $00, $ff, $00, $00
193d5     00 00 00 00 
193d9     FF FF FF FF 
193dd     FD FD FF 00 
193e1     FF FF FB FD | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $fd, $fd, $ff, $00, $ff, $ff, $fb, $fd
193e5     FF FF FF FB 
193e9     FB FD FD FF 
193ed     FF FD FB FB 
193f1     FD FD FD FD | 	byte	$ff, $ff, $ff, $fb, $fb, $fd, $fd, $ff, $ff, $fd, $fb, $fb, $fd, $fd, $fd, $fd
193f5     FD FD FD F9 
193f9     F9 FD FD FD 
193fd     F9 F9 F7 F9 
19401     FD FB F9 F5 | 	byte	$fd, $fd, $fd, $f9, $f9, $fd, $fd, $fd, $f9, $f9, $f7, $f9, $fd, $fb, $f9, $f5
19405     F7 FB F9 F9 
19409     F9 F3 F9 F9 
1940d     F9 F9 F7 F9 
19411     F9 F9 F5 F3 | 	byte	$f7, $fb, $f9, $f9, $f9, $f3, $f9, $f9, $f9, $f9, $f7, $f9, $f9, $f9, $f5, $f3
19415     F7 F9 F7 F7 
19419     F5 F7 F9 F9 
1941d     F7 F3 F3 F9 
19421     F5 F5 F3 F5 | 	byte	$f7, $f9, $f7, $f7, $f5, $f7, $f9, $f9, $f7, $f3, $f3, $f9, $f5, $f5, $f3, $f5
19425     F5 F5 F7 F5 
19429     F1 F3 F7 F5 
1942d     F3 F1 F7 F1 
19431     F3 F3 F3 F9 | 	byte	$f5, $f5, $f7, $f5, $f1, $f3, $f7, $f5, $f3, $f1, $f7, $f1, $f3, $f3, $f3, $f9
19435     F7 F5 F3 F3 
19439     F7 F7 F5 F5 
1943d     F3 F3 F7 F7 
19441     F3 F1 F3 F7 | 	byte	$f7, $f5, $f3, $f3, $f7, $f7, $f5, $f5, $f3, $f3, $f7, $f7, $f3, $f1, $f3, $f7
19445     F7 F7 F1 F1 
19449     F3 F5 F5 F3 
1944d     F1 F3 F5 F7 
19451     F5 F0 F1 F3 | 	byte	$f7, $f7, $f1, $f1, $f3, $f5, $f5, $f3, $f1, $f3, $f5, $f7, $f5, $f0, $f1, $f3
19455     F7 F7 F3 F0 
19459     F3 F7 F9 F7 
1945d     F3 F3 F5 F7 
19461     F9 F7 F7 F3 | 	byte	$f7, $f7, $f3, $f0, $f3, $f7, $f9, $f7, $f3, $f3, $f5, $f7, $f9, $f7, $f7, $f3
19465     F9 F9 F9 F1 
19469     F5 F7 F9 F9 
1946d     F7 F7 F7 F7 
19471     F7 F7 F7 F7 | 	byte	$f9, $f9, $f9, $f1, $f5, $f7, $f9, $f9, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7
19475     F7 F9 F9 F5 
19479     F7 F7 F9 F9 
1947d     F5 F9 F9 F9 
19481     F3 F3 F5 F9 | 	byte	$f7, $f9, $f9, $f5, $f7, $f7, $f9, $f9, $f5, $f9, $f9, $f9, $f3, $f3, $f5, $f9
19485     F9 FB F5 F3 
19489     F7 F7 F9 F9 
1948d     F7 F9 F9 F9 
19491     F7 F7 F7 FB | 	byte	$f9, $fb, $f5, $f3, $f7, $f7, $f9, $f9, $f7, $f9, $f9, $f9, $f7, $f7, $f7, $fb
19495     FD F9 F9 F9 
19499     F9 F9 F9 F9 
1949d     F9 F9 F9 FB 
194a1     FB F9 F9 FB | 	byte	$fd, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $fb, $fb, $f9, $f9, $fb
194a5     FD FB FB F9 
194a9     FB FD F9 FD 
194ad     F9 FD FD FF 
194b1     FD FD F9 FD | 	byte	$fd, $fb, $fb, $f9, $fb, $fd, $f9, $fd, $f9, $fd, $fd, $ff, $fd, $fd, $f9, $fd
194b5     FF FD FD FF 
194b9     00 FF FD FD 
194bd     00 FF FF FF 
194c1     FF 00 00 00 | 	byte	$ff, $fd, $fd, $ff, $00, $ff, $fd, $fd, $00, $ff, $ff, $ff, $ff, $00, $00, $00
194c5     00 00 FF 00 
194c9     00 FF 00 FF 
194cd     00 00 00 01 
194d1     00 FF 01 05 | 	byte	$00, $00, $ff, $00, $00, $ff, $00, $ff, $00, $00, $00, $01, $00, $ff, $01, $05
194d5     01 00 00 01 
194d9     00 01 00 00 
194dd     01 01 01 01 
194e1     00 FF 00 01 | 	byte	$01, $00, $00, $01, $00, $01, $00, $00, $01, $01, $01, $01, $00, $ff, $00, $01
194e5     05 00 01 00 
194e9     00 00 00 00 
194ed     00 01 03 01 
194f1     00 00 FF 00 | 	byte	$05, $00, $01, $00, $00, $00, $00, $00, $00, $01, $03, $01, $00, $00, $ff, $00
194f5     01 00 00 FF 
194f9     FF FD 00 00 
194fd     00 00 FF 00 
19501     00 FD FD FF | 	byte	$01, $00, $00, $ff, $ff, $fd, $00, $00, $00, $00, $ff, $00, $00, $fd, $fd, $ff
19505     FF 00 00 FD 
19509     FB FD FF 00 
1950d     FF FF FF FF 
19511     FB FD FD FD | 	byte	$ff, $00, $00, $fd, $fb, $fd, $ff, $00, $ff, $ff, $ff, $ff, $fb, $fd, $fd, $fd
19515     FB F9 FD FD 
19519     FD F9 FB F9 
1951d     F9 FB FB F9 
19521     F5 F7 F5 F7 | 	byte	$fb, $f9, $fd, $fd, $fd, $f9, $fb, $f9, $f9, $fb, $fb, $f9, $f5, $f7, $f5, $f7
19525     F9 F9 F7 F5 
19529     F5 F3 F7 F5 
1952d     F5 F7 F7 F3 
19531     F1 F3 F5 F5 | 	byte	$f9, $f9, $f7, $f5, $f5, $f3, $f7, $f5, $f5, $f7, $f7, $f3, $f1, $f3, $f5, $f5
19535     F3 F3 F3 F3 
19539     F3          | 	byte	$f3[5]
1953a     F1 F1 F5 F1 
1953e     F1 F1 F3 F1 
19542     F0 F0 F1 F1 
19546     F1 F1 F0 F0 | 	byte	$f1, $f1, $f5, $f1, $f1, $f1, $f3, $f1, $f0, $f0, $f1, $f1, $f1, $f1, $f0, $f0
1954a     ED ED ED F0 
1954e     F1 ED EC ED 
19552     ED F0 ED ED 
19556     ED ED ED ED | 	byte	$ed, $ed, $ed, $f0, $f1, $ed, $ec, $ed, $ed, $f0, $ed, $ed, $ed, $ed, $ed, $ed
1955a     ED F0 ED ED 
1955e     EC ED ED ED 
19562     ED ED F1 ED 
19566     EC ED F0 ED | 	byte	$ed, $f0, $ed, $ed, $ec, $ed, $ed, $ed, $ed, $ed, $f1, $ed, $ec, $ed, $f0, $ed
1956a     ED EC ED F0 
1956e     ED ED ED ED 
19572     EC ED F1 ED 
19576     ED ED ED EC | 	byte	$ed, $ec, $ed, $f0, $ed, $ed, $ed, $ed, $ec, $ed, $f1, $ed, $ed, $ed, $ed, $ec
1957a     EC ED F1 F0 
1957e     ED ED F0 F1 
19582     F0 F0 F1 F0 
19586     F0 F1 F3 F1 | 	byte	$ec, $ed, $f1, $f0, $ed, $ed, $f0, $f1, $f0, $f0, $f1, $f0, $f0, $f1, $f3, $f1
1958a     F0 F1 F5 F7 
1958e     F3 F3 F1 F5 
19592     F7 F5 F3 F9 
19596     F9 F9 F9 F7 | 	byte	$f0, $f1, $f5, $f7, $f3, $f3, $f1, $f5, $f7, $f5, $f3, $f9, $f9, $f9, $f9, $f7
1959a     F7 F7 F9 FD 
1959e     FB FD F7 FB 
195a2     FD FB FB FB 
195a6     FF FF FD 00 | 	byte	$f7, $f7, $f9, $fd, $fb, $fd, $f7, $fb, $fd, $fb, $fb, $fb, $ff, $ff, $fd, $00
195aa     FD FD FF FF 
195ae     FF 00 FD FF 
195b2     FF FF 00 FF 
195b6     00 00 00 FF | 	byte	$fd, $fd, $ff, $ff, $ff, $00, $fd, $ff, $ff, $ff, $00, $ff, $00, $00, $00, $ff
195ba     01 00 00 01 
195be     01 00 00 00 
195c2     00 01 01 00 
195c6     01 01 01 00 | 	byte	$01, $00, $00, $01, $01, $00, $00, $00, $00, $01, $01, $00, $01, $01, $01, $00
195ca     00 00 01 01 
195ce     01 01 01 03 
195d2     00 01 01 03 
195d6     00 01 01 00 | 	byte	$00, $00, $01, $01, $01, $01, $01, $03, $00, $01, $01, $03, $00, $01, $01, $00
195da     01 01 01 03 
195de     01 00 01 01 
195e2     01 01 00 00 
195e6     01 01 01 00 | 	byte	$01, $01, $01, $03, $01, $00, $01, $01, $01, $01, $00, $00, $01, $01, $01, $00
195ea     01 00 00 03 
195ee     00 FF FF 00 
195f2     00 FF FF FF 
195f6     00 FF 00 FF | 	byte	$01, $00, $00, $03, $00, $ff, $ff, $00, $00, $ff, $ff, $ff, $00, $ff, $00, $ff
195fa     00 00 FF FD 
195fe     FF 00 FD FF 
19602     FF FF 00 FD 
19606     FF FD FF FB | 	byte	$00, $00, $ff, $fd, $ff, $00, $fd, $ff, $ff, $ff, $00, $fd, $ff, $fd, $ff, $fb
1960a     FD FD FD FB 
1960e     FD FD FD FD 
19612     FD FD F9 FD 
19616     FB FB FD FB | 	byte	$fd, $fd, $fd, $fb, $fd, $fd, $fd, $fd, $fd, $fd, $f9, $fd, $fb, $fb, $fd, $fb
1961a     FD FD FB FB 
1961e     F9 FB FB FD 
19622     FB FB F7 FB 
19626     FB FD FB FB | 	byte	$fd, $fd, $fb, $fb, $f9, $fb, $fb, $fd, $fb, $fb, $f7, $fb, $fb, $fd, $fb, $fb
1962a     F9 F7 F9 F9 
1962e     F9 F7 F9 FB 
19632     FB F9 F7 F9 
19636     FB F9 F9 F9 | 	byte	$f9, $f7, $f9, $f9, $f9, $f7, $f9, $fb, $fb, $f9, $f7, $f9, $fb, $f9, $f9, $f9
1963a     F9 F9 FB FB 
1963e     F9 F5 F7 F9 
19642     FB FB F7 F5 
19646     F9 F7 F9 F9 | 	byte	$f9, $f9, $fb, $fb, $f9, $f5, $f7, $f9, $fb, $fb, $f7, $f5, $f9, $f7, $f9, $f9
1964a     F5 F7 F9 F9 
1964e     F9 F7 F7 F7 
19652     F9 F9 F7 F7 
19656     F7 F9 F9 F7 | 	byte	$f5, $f7, $f9, $f9, $f9, $f7, $f7, $f7, $f9, $f9, $f7, $f7, $f7, $f9, $f9, $f7
1965a     F5 F5 F7 F9 
1965e     F9 F5 F7 F7 
19662     F7 F7 F9 F5 
19666     F7 F9 F9 F7 | 	byte	$f5, $f5, $f7, $f9, $f9, $f5, $f7, $f7, $f7, $f7, $f9, $f5, $f7, $f9, $f9, $f7
1966a     F5 F7 F9 F7 
1966e     F9 F3 F7 F7 
19672     F5 F5 F5 F7 
19676     F9 F9 F7 F5 | 	byte	$f5, $f7, $f9, $f7, $f9, $f3, $f7, $f7, $f5, $f5, $f5, $f7, $f9, $f9, $f7, $f5
1967a     F5 F7 F9 F9 
1967e     F7 F5 F7 F7 
19682     F5 F7 F5 F5 
19686     F7 F7 F5 F7 | 	byte	$f5, $f7, $f9, $f9, $f7, $f5, $f7, $f7, $f5, $f7, $f5, $f5, $f7, $f7, $f5, $f7
1968a     F3 F7 F7 F5 
1968e     F5 F5 F5 F7 
19692     F7 F7 F5 F5 
19696     F7 F7 F7 F7 | 	byte	$f3, $f7, $f7, $f5, $f5, $f5, $f5, $f7, $f7, $f7, $f5, $f5, $f7, $f7, $f7, $f7
1969a     F5 F5 F5 F7 
1969e     F5 F7 F7 F7 
196a2     F7 F3 F5 F7 
196a6     F7 F7 F7 F5 | 	byte	$f5, $f5, $f5, $f7, $f5, $f7, $f7, $f7, $f7, $f3, $f5, $f7, $f7, $f7, $f7, $f5
196aa     F5 F5 F7 F5 
196ae     F5 F7 F5 F7 
196b2     F5 F3 F5 F3 
196b6     F5 F7 F7 F5 | 	byte	$f5, $f5, $f7, $f5, $f5, $f7, $f5, $f7, $f5, $f3, $f5, $f3, $f5, $f7, $f7, $f5
196ba     F3 F3 F9 F7 
196be     F7 F5 F7 F9 
196c2     F9 F9 F5 F5 
196c6     F7 F7 F7 F7 | 	byte	$f3, $f3, $f9, $f7, $f7, $f5, $f7, $f9, $f9, $f9, $f5, $f5, $f7, $f7, $f7, $f7
196ca     F7 F5 F7 FB 
196ce     F5 F7 F9 F9 
196d2     F7 F7 F7 F7 
196d6     F9 F9 F7 F7 | 	byte	$f7, $f5, $f7, $fb, $f5, $f7, $f9, $f9, $f7, $f7, $f7, $f7, $f9, $f9, $f7, $f7
196da     F7 F9 F9 FB 
196de     F9 F9 F9 F9 
196e2     F9 F9 F9 FD 
196e6     FB FD F9 F9 | 	byte	$f7, $f9, $f9, $fb, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $fd, $fb, $fd, $f9, $f9
196ea     FD FD FB FD 
196ee     FB FD FD FD 
196f2     FF FD FB FD 
196f6     FF FF FD FD | 	byte	$fd, $fd, $fb, $fd, $fb, $fd, $fd, $fd, $ff, $fd, $fb, $fd, $ff, $ff, $fd, $fd
196fa     FB FD FF FF 
196fe     FD FD FF FD 
19702     FF FD FF FD 
19706     FD FF FF FF | 	byte	$fb, $fd, $ff, $ff, $fd, $fd, $ff, $fd, $ff, $fd, $ff, $fd, $fd, $ff, $ff, $ff
1970a     FD 00 FD FF 
1970e     FF FF 00 FF 
19712     FD FD FF FF 
19716     FF FF 00 FF | 	byte	$fd, $00, $fd, $ff, $ff, $ff, $00, $ff, $fd, $fd, $ff, $ff, $ff, $ff, $00, $ff
1971a     FD FF FF FD 
1971e     FF FF FF 00 
19722     FF FD FD FD 
19726     00 FD FF FF | 	byte	$fd, $ff, $ff, $fd, $ff, $ff, $ff, $00, $ff, $fd, $fd, $fd, $00, $fd, $ff, $ff
1972a     FF FF FF FD 
1972e     FD FD FD FF 
19732     FF FF F9 FB 
19736     FF FF FF FD | 	byte	$ff, $ff, $ff, $fd, $fd, $fd, $fd, $ff, $ff, $ff, $f9, $fb, $ff, $ff, $ff, $fd
1973a     FD FD FF FF 
1973e     FD FB FF FD 
19742     FD FF FD FD 
19746     FB FF FD FD | 	byte	$fd, $fd, $ff, $ff, $fd, $fb, $ff, $fd, $fd, $ff, $fd, $fd, $fb, $ff, $fd, $fd
1974a     FD FD FD FD 
1974e     F9 FB FD FD 
19752     FD FD FB FD 
19756     FB FD FB F9 | 	byte	$fd, $fd, $fd, $fd, $f9, $fb, $fd, $fd, $fd, $fd, $fb, $fd, $fb, $fd, $fb, $f9
1975a     FB FB FD F9 
1975e     FB FB F9 FD 
19762     FB FB F9 FB 
19766     FB FD F9 F9 | 	byte	$fb, $fb, $fd, $f9, $fb, $fb, $f9, $fd, $fb, $fb, $f9, $fb, $fb, $fd, $f9, $f9
1976a     F9 FD FB F9 
1976e     FB F9 FB FB 
19772     FB FB FB F9 
19776     F9 F9 F9 F9 | 	byte	$f9, $fd, $fb, $f9, $fb, $f9, $fb, $fb, $fb, $fb, $fb, $f9, $f9, $f9, $f9, $f9
1977a     F9 F9 F9 F9 
1977e     F9 F9 F9    | 	byte	$f9[7]
19781     F7 F7 F9 FB 
19785     F9 F7 F9 F9 
19789     F7 F9 F9 F7 
1978d     F9 FB F9 F9 | 	byte	$f7, $f7, $f9, $fb, $f9, $f7, $f9, $f9, $f7, $f9, $f9, $f7, $f9, $fb, $f9, $f9
19791     F7 F9 F9 F9 
19795     FB F9 F7 F9 
19799     F9 F9 F9 F9 
1979d     F9 FB F9 F9 | 	byte	$f7, $f9, $f9, $f9, $fb, $f9, $f7, $f9, $f9, $f9, $f9, $f9, $f9, $fb, $f9, $f9
197a1     F9 F9 F9 FB 
197a5     F9 F9 F9 F9 
197a9     F9 F9 F9 F9 
197ad     F9 FB F9 FB | 	byte	$f9, $f9, $f9, $fb, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $f9, $fb, $f9, $fb
197b1     F9 F7 FF 00 
197b5     00 00 00 F3 
197b9     ED F3 D8 FF 
197bd     FF 00 EA 28 | 	byte	$f9, $f7, $ff, $00, $00, $00, $00, $f3, $ed, $f3, $d8, $ff, $ff, $00, $ea, $28
197c1     3C AE 28 AE 
197c5     45 87 BB 80 
197c9     00 EA 3C A2 
197cd     DF A2 FF 13 | 	byte	$3c, $ae, $28, $ae, $45, $87, $bb, $80, $00, $ea, $3c, $a2, $df, $a2, $ff, $13
197d1     FF AF 80 D6 
197d5     13 7F AF CA 
197d9     EA 13 72 5A 
197dd     ED 80 FF AF | 	byte	$ff, $af, $80, $d6, $13, $7f, $af, $ca, $ea, $13, $72, $5a, $ed, $80, $ff, $af
197e1     09 0D AF FF 
197e5     7F 7F 7F 21 
197e9     16 64 7F 7F 
197ed     7F 7F 7F FF | 	byte	$09, $0d, $af, $ff, $7f, $7f, $7f, $21, $16, $64, $7f, $7f, $7f, $7f, $7f, $ff
197f1     7F DF 7F 7F 
197f5     72 28 80 80 
197f9     7F 00 49 FF 
197fd     79 C4 80 80 | 	byte	$7f, $df, $7f, $7f, $72, $28, $80, $80, $7f, $00, $49, $ff, $79, $c4, $80, $80
19801     80 80 80 80 
19805     80 80 80 80 
19809     80 80 80 80 
1980d     80 80 80 80 
19811     80 80 80 80 
19815     80          | 	byte	$80[21]
19816     49 80 87 7F 
1981a     00 FF 7F 7F 
1981e     7F 7F 67 7F 
19822     7F FF 7F 7F | 	byte	$49, $80, $87, $7f, $00, $ff, $7f, $7f, $7f, $7f, $67, $7f, $7f, $ff, $7f, $7f
19826     7F 7F 0D 7F 
1982a     21 7F 7F C4 
1982e     7F 7F 7F 28 
19832     7F 80 D6 7F | 	byte	$7f, $7f, $0d, $7f, $21, $7f, $7f, $c4, $7f, $7f, $7f, $28, $7f, $80, $d6, $7f
19836     7F 80 80 7F 
1983a     7F 80 D8 80 
1983e     72 13 80 AE 
19842     72 00 DF 21 | 	byte	$7f, $80, $80, $7f, $7f, $80, $d8, $80, $72, $13, $80, $ae, $72, $00, $df, $21
19846     7F 7F D8 7F 
1984a     FF 00 49 7F 
1984e     16 7F 21 28 
19852     AE E4 7F 7F | 	byte	$7f, $7f, $d8, $7f, $ff, $00, $49, $7f, $16, $7f, $21, $28, $ae, $e4, $7f, $7f
19856     00 FF 00 80 
1985a     AE 80 AF 80 
1985e     80 80 80 80 
19862     80 80 28 80 | 	byte	$00, $ff, $00, $80, $ae, $80, $af, $80, $80, $80, $80, $80, $80, $80, $28, $80
19866     80 80 80 80 
1986a     80 80 80 80 | 	byte	$80[8]
1986e     85 80 80 80 
19872     80 80 80 80 
19876     BB 80 80 80 
1987a     36 51 80 85 | 	byte	$85, $80, $80, $80, $80, $80, $80, $80, $bb, $80, $80, $80, $36, $51, $80, $85
1987e     80 FF 00 A6 
19882     80 80 AE EA 
19886     13 80 CF BB 
1988a     BB 49 7F 79 | 	byte	$80, $ff, $00, $a6, $80, $80, $ae, $ea, $13, $80, $cf, $bb, $bb, $49, $7f, $79
1988e     5E 7F 7F 7F 
19892     7F 64 7F 7F 
19896     7F 7F 7F 7F 
1989a     7F 7F 7F 7F | 	byte	$5e, $7f, $7f, $7f, $7f, $64, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
1989e     7F 7F 7F 7F 
198a2     7F 7F 7F 7F 
198a6     7F 7F 7F 7F 
198aa     7F          | 	byte	$7f[13]
198ab     36 7F 7F 7F 
198af     7F 3F 51 45 
198b3     01 72 79 7F 
198b7     80 00 5A 80 | 	byte	$36, $7f, $7f, $7f, $7f, $3f, $51, $45, $01, $72, $79, $7f, $80, $00, $5a, $80
198bb     FF B7 87 80 
198bf     80 FF 80 80 
198c3     80 80 C4 80 
198c7     80 80 80 80 | 	byte	$ff, $b7, $87, $80, $80, $ff, $80, $80, $80, $80, $c4, $80, $80, $80, $80, $80
198cb     80 80 80 80 
198cf     80 80 80 80 
198d3     80 80 80 80 
198d7     80 80 80 80 
198db     80 80 80    | 	byte	$80[19]
198de     A2 80 80 80 
198e2     80 9C 80 D6 
198e6     E4 AE 31 21 
198ea     AF AE 51 49 | 	byte	$a2, $80, $80, $80, $80, $9c, $80, $d6, $e4, $ae, $31, $21, $af, $ae, $51, $49
198ee     7F 28 6D EA 
198f2     7F 7F 7F 85 
198f6     7F 80 7F 7F 
198fa     7F 7F 7F 7F | 	byte	$7f, $28, $6d, $ea, $7f, $7f, $7f, $85, $7f, $80, $7f, $7f, $7f, $7f, $7f, $7f
198fe     7F 7F 7F 7F 
19902     49 7F 7F 7F 
19906     7F 7F 7F 7F 
1990a     7F 7F 49 7F | 	byte	$7f, $7f, $7f, $7f, $49, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $49, $7f
1990e     7F 36 7F 7F 
19912     64 7F 7F 7F 
19916     FF 45 5A 7F 
1991a     51 5E 49 51 | 	byte	$7f, $36, $7f, $7f, $64, $7f, $7f, $7f, $ff, $45, $5a, $7f, $51, $5e, $49, $51
1991e     FF 7F 00 36 
19922     01 7F 3C 49 
19926     51 79 FF 79 
1992a     DF 36 7F AE | 	byte	$ff, $7f, $00, $36, $01, $7f, $3c, $49, $51, $79, $ff, $79, $df, $36, $7f, $ae
1992e     5A ED 80 CF 
19932     D6 FF D8 87 
19936     80 80 9C 80 
1993a     80 80 80 80 | 	byte	$5a, $ed, $80, $cf, $d6, $ff, $d8, $87, $80, $80, $9c, $80, $80, $80, $80, $80
1993e     80 80 80 80 
      ...             
1995a     80 80 80 80 
1995e     80          | 	byte	$80[33]
1995f     EA AF 85 AF 
19963     B7 80 7F 87 
19967     C4 FF 7F 00 
1996b     D6 7F F7 7F | 	byte	$ea, $af, $85, $af, $b7, $80, $7f, $87, $c4, $ff, $7f, $00, $d6, $7f, $f7, $7f
1996f     7F 7F FF 7F 
19973     7F 7F 7F 7F 
19977     7F 7F 7F 7F 
1997b     7F 7F 7F 7F | 	byte	$7f, $7f, $ff, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
1997f     7F 7F 7F 7F 
19983     7F 7F 7F 7F 
19987     7F          | 	byte	$7f[9]
19988     49 7F 7F 7F 
1998c     7F 7F 49 7F 
19990     7F 7F 7F 3C 
19994     72 52 3C 72 | 	byte	$49, $7f, $7f, $7f, $7f, $7f, $49, $7f, $7f, $7f, $7f, $3c, $72, $52, $3c, $72
19998     00 D8 85 FF 
1999c     AF 87 85 87 
199a0     80 80 80 85 
199a4     87 80 80 80 | 	byte	$00, $d8, $85, $ff, $af, $87, $85, $87, $80, $80, $80, $85, $87, $80, $80, $80
199a8     80 80 80 80 
199ac     80 80 80 80 
199b0     80 80 80 80 
199b4     80 80 80 80 
199b8     80 80 80 80 
199bc     80 80       | 	byte	$80[22]
199be     A2 85 80 80 
199c2     93 80 A2 A2 
199c6     AF 80 80 A2 
199ca     BB D6 AF 85 | 	byte	$a2, $85, $80, $80, $93, $80, $a2, $a2, $af, $80, $80, $a2, $bb, $d6, $af, $85
199ce     A6 9C 80 FF 
199d2     28 80 21 ED 
199d6     AF EA D8 D6 
199da     CF 21 79 00 | 	byte	$a6, $9c, $80, $ff, $28, $80, $21, $ed, $af, $ea, $d8, $d6, $cf, $21, $79, $00
199de     72 51 F7 7F 
199e2     64 ED 72 7F 
199e6     7F 00 7F 7F 
199ea     79 7F 5A 7F | 	byte	$72, $51, $f7, $7f, $64, $ed, $72, $7f, $7f, $00, $7f, $7f, $79, $7f, $5a, $7f
199ee     7F 7F 7F 7F 
199f2     7F 7F 7F 7F 
199f6     7F 7F 7F 7F 
199fa     7F 7F 7F 7F 
199fe     7F          | 	byte	$7f[17]
199ff     28 7F 7F 7F 
19a03     1C 7F 7F 51 
19a07     7F 64 5A 72 
19a0b     64 1C 51 0D | 	byte	$28, $7f, $7f, $7f, $1c, $7f, $7f, $51, $7f, $64, $5a, $72, $64, $1c, $51, $0d
19a0f     00 FF FF 64 
19a13     A6 E4 49 80 
19a17     85 FF 80 A2 
19a1b     CA 80 80 80 | 	byte	$00, $ff, $ff, $64, $a6, $e4, $49, $80, $85, $ff, $80, $a2, $ca, $80, $80, $80
19a1f     80 80 80 80 
19a23     AE AF 80 80 
19a27     80 80 80 80 
19a2b     80 80 80 80 | 	byte	$80, $80, $80, $80, $ae, $af, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
19a2f     80 80 80 80 
19a33     80 80 80 80 
19a37     80 80 80 80 
19a3b     80 80 80 80 
19a3f     80 80 80 80 
19a43     80          | 	byte	$80[21]
19a44     85 80 80 80 
19a48     D8 80 AE 00 
19a4c     DF BB D6 AF 
19a50     AE 0D 5E 28 | 	byte	$85, $80, $80, $80, $d8, $80, $ae, $00, $df, $bb, $d6, $af, $ae, $0d, $5e, $28
19a54     FF 00 21 7F 
19a58     2A 7F 00 7F 
19a5c     7F 7F 5E 7F 
19a60     7F 7F 7F 7F | 	byte	$ff, $00, $21, $7f, $2a, $7f, $00, $7f, $7f, $7f, $5e, $7f, $7f, $7f, $7f, $7f
19a64     7F 7F 7F 7F 
19a68     7F 7F 7F 7F 
19a6c     7F 7F 7F 7F 
19a70     7F 7F 7F 7F 
19a74     7F          | 	byte	$7f[17]
19a75     6D 7F 7F 7F 
19a79     0D 51 21 51 
19a7d     F3 49 00 13 
19a81     F7 EA 13 D6 | 	byte	$6d, $7f, $7f, $7f, $0d, $51, $21, $51, $f3, $49, $00, $13, $f7, $ea, $13, $d6
19a85     D8 80 36 C4 
19a89     D6 00 80 FF 
19a8d     00 80 80 C4 
19a91     C4 80 80 80 | 	byte	$d8, $80, $36, $c4, $d6, $00, $80, $ff, $00, $80, $80, $c4, $c4, $80, $80, $80
19a95     80 80 80 80 
19a99     80 80 80 80 
19a9d     80 80 80 80 
19aa1     80 80 80 80 
19aa5     80          | 	byte	$80[17]
19aa6     AF 80 80 80 
19aaa     80 80 80 80 
19aae     80 80 D8 80 
19ab2     80 80 80 80 | 	byte	$af, $80, $80, $80, $80, $80, $80, $80, $80, $80, $d8, $80, $80, $80, $80, $80
19ab6     A2 AE E4 9C 
19aba     CF D8 D6 16 
19abe     8E 49 7F 13 
19ac2     2A 13 21 7F | 	byte	$a2, $ae, $e4, $9c, $cf, $d8, $d6, $16, $8e, $49, $7f, $13, $2a, $13, $21, $7f
19ac6     64 FF 7F 5E 
19aca     7F 7F 7F 64 
19ace     36 79 FF 7F 
19ad2     7F 51 21 64 | 	byte	$64, $ff, $7f, $5e, $7f, $7f, $7f, $64, $36, $79, $ff, $7f, $7f, $51, $21, $64
19ad6     72 51 7F 5A 
19ada     51 49 7F 7F 
19ade     D8 F3 72 7F 
19ae2     5E 7F 7F 3C | 	byte	$72, $51, $7f, $5a, $51, $49, $7f, $7f, $d8, $f3, $72, $7f, $5e, $7f, $7f, $3c
19ae6     72 79 7F 00 
19aea     49 7F 7F 67 
19aee     79 FF 51 7F 
19af2     79 51 FF 5E | 	byte	$72, $79, $7f, $00, $49, $7f, $7f, $67, $79, $ff, $51, $7f, $79, $51, $ff, $5e
19af6     6D F7 49 28 
19afa     72 64 D8 FF 
19afe     3C D6 A6 FF 
19b02     F3 79 AF 80 | 	byte	$6d, $f7, $49, $28, $72, $64, $d8, $ff, $3c, $d6, $a6, $ff, $f3, $79, $af, $80
19b06     D6 72 00 C4 
19b0a     80 99 D8 80 
19b0e     85 80 80 A2 
19b12     B7 87 80 80 | 	byte	$d6, $72, $00, $c4, $80, $99, $d8, $80, $85, $80, $80, $a2, $b7, $87, $80, $80
19b16     93 80 87 80 
19b1a     80 80 80 80 
19b1e     80 80 80 80 
19b22     80 80 80 80 | 	byte	$93, $80, $87, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
19b26     80 80 80 80 
19b2a     80 80       | 	byte	$80[6]
19b2c     93 80 87 80 
19b30     80 80 CA 80 
19b34     80 AE 67 AF 
19b38     80 A2 F3 00 | 	byte	$93, $80, $87, $80, $80, $80, $ca, $80, $80, $ae, $67, $af, $80, $a2, $f3, $00
19b3c     A2 00 B7 49 
19b40     79 C4 FF F7 
19b44     16 5E 7F C4 
19b48     3F 72 64 51 | 	byte	$a2, $00, $b7, $49, $79, $c4, $ff, $f7, $16, $5e, $7f, $c4, $3f, $72, $64, $51
19b4c     72 7F 7F 7F 
19b50     64 72 7F 7F 
19b54     7F 7F 7F 7F 
19b58     7F 7F 7F 7F | 	byte	$72, $7f, $7f, $7f, $64, $72, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f, $7f
19b5c     7F 7F 7F 7F 
19b60     7F 7F       | 	byte	$7f[6]
19b62     79 7F 7F 7F 
19b66     7F 7F 7F 31 
19b6a     01 52 49 6D 
19b6e     51 AE 67 31 | 	byte	$79, $7f, $7f, $7f, $7f, $7f, $7f, $31, $01, $52, $49, $6d, $51, $ae, $67, $31
19b72     00 CA 28 AF 
19b76     F3 5E 93 93 
19b7a     D6 AF AF 85 
19b7e     80 D6 AF 80 | 	byte	$00, $ca, $28, $af, $f3, $5e, $93, $93, $d6, $af, $af, $85, $80, $d6, $af, $80
19b82     80 80 80 80 
19b86     80 80       | 	byte	$80[6]
19b88     85 AF 80 80 
19b8c     80 80 85 E4 
19b90     80 80 80 80 
19b94     80 80 87 80 | 	byte	$85, $af, $80, $80, $80, $80, $85, $e4, $80, $80, $80, $80, $80, $80, $87, $80
19b98     80 99 9C 8E 
19b9c     80 80 C1 80 
19ba0     80 80 80 C1 
19ba4     AF 9C 80 80 | 	byte	$80, $99, $9c, $8e, $80, $80, $c1, $80, $80, $80, $80, $c1, $af, $9c, $80, $80
19ba8     A6 9C 99 DF 
19bac     ED AF 80 D6 
19bb0     00 D8 C1 13 
19bb4     80 FF 36 28 | 	byte	$a6, $9c, $99, $df, $ed, $af, $80, $d6, $00, $d8, $c1, $13, $80, $ff, $36, $28
19bb8     AE 3F 31 ED 
19bbc     36 52 C4 21 
19bc0     51 01 28 01 
19bc4     72 7F 5E 64 | 	byte	$ae, $3f, $31, $ed, $36, $52, $c4, $21, $51, $01, $28, $01, $72, $7f, $5e, $64
19bc8     2A 49 7F 7F 
19bcc     7F 72 7F 7F 
19bd0     5A 7F 7F 1C 
19bd4     7F 7F 7F 7F | 	byte	$2a, $49, $7f, $7f, $7f, $72, $7f, $7f, $5a, $7f, $7f, $1c, $7f, $7f, $7f, $7f
19bd8     79 51 45 5E 
19bdc     79 6D 21 7F 
19be0     79 7B 49 51 
19be4     F7 21 7F 31 | 	byte	$79, $51, $45, $5e, $79, $6d, $21, $7f, $79, $7b, $49, $51, $f7, $21, $7f, $31
19be8     51 13 21 D8 
19bec     FF 36 28 BB 
19bf0     E4 A2 16 2A 
19bf4     21 AF AE 16 | 	byte	$51, $13, $21, $d8, $ff, $36, $28, $bb, $e4, $a2, $16, $2a, $21, $af, $ae, $16
19bf8     13 80 C1 F3 
19bfc     C1 D8 D6 80 
19c00     80 80 C1 AE 
19c04     87 93 80 C4 | 	byte	$13, $80, $c1, $f3, $c1, $d8, $d6, $80, $80, $80, $c1, $ae, $87, $93, $80, $c4
19c08     80 87 80 C1 
19c0c     80 80 80 80 
19c10     85 80 80 80 
19c14     80 80 99 80 | 	byte	$80, $87, $80, $c1, $80, $80, $80, $80, $85, $80, $80, $80, $80, $80, $99, $80
19c18     80 80 AF 80 
19c1c     80 85 80 C1 
19c20     FF 80 80 A6 
19c24     80 C1 93 8E | 	byte	$80, $80, $af, $80, $80, $85, $80, $c1, $ff, $80, $80, $a6, $80, $c1, $93, $8e
19c28     80 85 D6 C1 
19c2c     AE C4 AE 13 
19c30     DF BB D6 01 
19c34     DF 49 5A D8 | 	byte	$80, $85, $d6, $c1, $ae, $c4, $ae, $13, $df, $bb, $d6, $01, $df, $49, $5a, $d8
19c38     B7 49 28 6D 
19c3c     31 FF 51 6D 
19c40     F3 49 7F 67 
19c44     6D 5E 7F 51 | 	byte	$b7, $49, $28, $6d, $31, $ff, $51, $6d, $f3, $49, $7f, $67, $6d, $5e, $7f, $51
19c48     5E 7F 7F 7F 
19c4c     7F 5E 7F 7F 
19c50     52 7F 7F 7F 
19c54     7F 49 7F 7F | 	byte	$5e, $7f, $7f, $7f, $7f, $5e, $7f, $7f, $52, $7f, $7f, $7f, $7f, $49, $7f, $7f
19c58     79 6D 5E 7F 
19c5c     79 64 36 6D 
19c60     5E 72 64 ED 
19c64     0D 3C 00 C1 | 	byte	$79, $6d, $5e, $7f, $79, $64, $36, $6d, $5e, $72, $64, $ed, $0d, $3c, $00, $c1
19c68     0D 3F C4 F3 
19c6c     ED C1 01 C4 
19c70     93 87 AF FF 
19c74     D8 CF 80 FF | 	byte	$0d, $3f, $c4, $f3, $ed, $c1, $01, $c4, $93, $87, $af, $ff, $d8, $cf, $80, $ff
19c78     A6 AE B7 80 
19c7c     80 99 A2 93 
19c80     9C 80 C4 80 
19c84     80 80 80 80 | 	byte	$a6, $ae, $b7, $80, $80, $99, $a2, $93, $9c, $80, $c4, $80, $80, $80, $80, $80
19c88     80 99 80 80 
19c8c     80 80 AE 80 
19c90     80 99 80 8E 
19c94     80 CF AE 80 | 	byte	$80, $99, $80, $80, $80, $80, $ae, $80, $80, $99, $80, $8e, $80, $cf, $ae, $80
19c98     AE 87 A6 93 
19c9c     D6 9C 93 99 
19ca0     FF AF CF B7 
19ca4     D6 D6 A6 AF | 	byte	$ae, $87, $a6, $93, $d6, $9c, $93, $99, $ff, $af, $cf, $b7, $d6, $d6, $a6, $af
19ca8     D6 00 EA D8 
19cac     EA D8 99 FF 
19cb0     5E D8 21 00 
19cb4     ED 21 21 31 | 	byte	$d6, $00, $ea, $d8, $ea, $d8, $99, $ff, $5e, $d8, $21, $00, $ed, $21, $21, $31
19cb8     49 3F 72 28 
19cbc     FF 7F 67 7F 
19cc0     51 7F 64 72 
19cc4     7B 6D 7F 7F | 	byte	$49, $3f, $72, $28, $ff, $7f, $67, $7f, $51, $7f, $64, $72, $7b, $6d, $7f, $7f
19cc8     3C 7F 7F 0D 
19ccc     52 7F 7B 79 
19cd0     45 13 21 7F 
19cd4     31 49 36 5E | 	byte	$3c, $7f, $7f, $0d, $52, $7f, $7b, $79, $45, $13, $21, $7f, $31, $49, $36, $5e
19cd8     13 FF 49 51 
19cdc     13 EA F7 0D 
19ce0     3C 21 00 D8 
19ce4     F3 F3 AF FF | 	byte	$13, $ff, $49, $51, $13, $ea, $f7, $0d, $3c, $21, $00, $d8, $f3, $f3, $af, $ff
19ce8     00 ED FF D8 
19cec     0D E4 CF B7 
19cf0     FF DF AF 8E 
19cf4     C1 09 B7 BB | 	byte	$00, $ed, $ff, $d8, $0d, $e4, $cf, $b7, $ff, $df, $af, $8e, $c1, $09, $b7, $bb
19cf8     8E 80 99 F3 
19cfc     80 80 93 AF 
19d00     AE 9C 80 80 
19d04     80 ED 80 80 | 	byte	$8e, $80, $99, $f3, $80, $80, $93, $af, $ae, $9c, $80, $80, $80, $ed, $80, $80
19d08     80 AE AF 80 
19d0c     80 80 80 80 
19d10     87 85 AF 80 
19d14     80 AE C4 80 | 	byte	$80, $ae, $af, $80, $80, $80, $80, $80, $87, $85, $af, $80, $80, $ae, $c4, $80
19d18     99 00 80 80 
19d1c     99 85 A6 93 
19d20     9C 80 FF D8 
19d24     93 B7 FF C4 | 	byte	$99, $00, $80, $80, $99, $85, $a6, $93, $9c, $80, $ff, $d8, $93, $b7, $ff, $c4
19d28     C1 EA 0D F3 
19d2c     CF 13 00 FF 
19d30     7F 51 16 67 
19d34     3C 45 49 3F | 	byte	$c1, $ea, $0d, $f3, $cf, $13, $00, $ff, $7f, $51, $16, $67, $3c, $45, $49, $3f
19d38     7F 79 49 7F 
19d3c     7F 51 5A 5E 
19d40     7F 7F 79 72 
19d44     7F 28 45 7B | 	byte	$7f, $79, $49, $7f, $7f, $51, $5a, $5e, $7f, $7f, $79, $72, $7f, $28, $45, $7b
19d48     6D 79 36 7F 
19d4c     28 49 7B 3C 
19d50     0D 31 49 67 
19d54     3C DF 0D 45 | 	byte	$6d, $79, $36, $7f, $28, $49, $7b, $3c, $0d, $31, $49, $67, $3c, $df, $0d, $45
19d58     00 FF 3C C4 
19d5c     CF 1C 1C ED 
19d60     D8 CA DF 49 
19d64     00 AE B7 13 | 	byte	$00, $ff, $3c, $c4, $cf, $1c, $1c, $ed, $d8, $ca, $df, $49, $00, $ae, $b7, $13
19d68     C4 FF 28 D8 
19d6c     AE D8 93 DF 
19d70     C4 9C C1 BB 
19d74     AF AE 87 A6 | 	byte	$c4, $ff, $28, $d8, $ae, $d8, $93, $df, $c4, $9c, $c1, $bb, $af, $ae, $87, $a6
19d78     80 8E D6 93 
19d7c     80 85 9C 80 
19d80     80 99 9C 80 
19d84     AF 80 80 85 | 	byte	$80, $8e, $d6, $93, $80, $85, $9c, $80, $80, $99, $9c, $80, $af, $80, $80, $85
19d88     C4 D8 80 80 
19d8c     AF 85 8E 99 
19d90     99 D6 E4 80 
19d94     A6 D6 AF 87 | 	byte	$c4, $d8, $80, $80, $af, $85, $8e, $99, $99, $d6, $e4, $80, $a6, $d6, $af, $87
19d98     D6 AF 99 D6 
19d9c     13 8E C1 D8 
19da0     D8 D8 0D 00 
19da4     C4 D6 13 0D | 	byte	$d6, $af, $99, $d6, $13, $8e, $c1, $d8, $d8, $d8, $0d, $00, $c4, $d6, $13, $0d
19da8     ED 09 00 FF 
19dac     72 45 00 1C 
19db0     1C 0D 1C 0D 
19db4     49 7F 01 FF | 	byte	$ed, $09, $00, $ff, $72, $45, $00, $1c, $1c, $0d, $1c, $0d, $49, $7f, $01, $ff
19db8     5E 79 28 0D 
19dbc     5A 52 31 6D 
19dc0     36 3F 67 51 
19dc4     5A 31 49 6D | 	byte	$5e, $79, $28, $0d, $5a, $52, $31, $6d, $36, $3f, $67, $51, $5a, $31, $49, $6d
19dc8     2A 7F 5A 21 
19dcc     3C 45 3C 49 
19dd0     28 16 52 49 
19dd4     0D 0D 49 51 | 	byte	$2a, $7f, $5a, $21, $3c, $45, $3c, $49, $28, $16, $52, $49, $0d, $0d, $49, $51
19dd8     21 DF EA 16 
19ddc     FF 01 00 C4 
19de0     AE 21 F7 E4 
19de4     EA 93 EA CF | 	byte	$21, $df, $ea, $16, $ff, $01, $00, $c4, $ae, $21, $f7, $e4, $ea, $93, $ea, $cf
19de8     99 D8 EA B7 
19dec     BB A6 CA 80 
19df0     99 ED CA 99 
19df4     AF 9C 80 85 | 	byte	$99, $d8, $ea, $b7, $bb, $a6, $ca, $80, $99, $ed, $ca, $99, $af, $9c, $80, $85
19df8     DF 80 85 B7 
19dfc     E4 93 80 99 
19e00     99 AF A6 93 
19e04     8E 9C 87 80 | 	byte	$df, $80, $85, $b7, $e4, $93, $80, $99, $99, $af, $a6, $93, $8e, $9c, $87, $80
19e08     99 BB 8E A6 
19e0c     80 8E C1 CA 
19e10     87 99 AF C1 
19e14     ED FF CA A2 | 	byte	$99, $bb, $8e, $a6, $80, $8e, $c1, $ca, $87, $99, $af, $c1, $ed, $ff, $ca, $a2
19e18     C1 00 AE CF 
19e1c     FF D8 D6 EA 
19e20     FF 1C ED 2A 
19e24     01 36 13 ED | 	byte	$c1, $00, $ae, $cf, $ff, $d8, $d6, $ea, $ff, $1c, $ed, $2a, $01, $36, $13, $ed
19e28     01 21 31 01 
19e2c     31 3C 13 52 
19e30     28 FF 31 45 
19e34     00 21 6D 13 | 	byte	$01, $21, $31, $01, $31, $3c, $13, $52, $28, $ff, $31, $45, $00, $21, $6d, $13
19e38     ED 0D 3F 3C 
19e3c     1C 09 16 13 
19e40     FF 64 09 D6 
19e44     FF 3C 00 0D | 	byte	$ed, $0d, $3f, $3c, $1c, $09, $16, $13, $ff, $64, $09, $d6, $ff, $3c, $00, $0d
19e48     3C FF FF 0D 
19e4c     21 51 13 FF 
19e50     16 0D 21 13 
19e54     45 21 13 E4 | 	byte	$3c, $ff, $ff, $0d, $21, $51, $13, $ff, $16, $0d, $21, $13, $45, $21, $13, $e4
19e58     09 52 3C 00 
19e5c     16 00 0D F3 
19e60     FF ED 2A ED 
19e64     D8 C1 E4 D8 | 	byte	$09, $52, $3c, $00, $16, $00, $0d, $f3, $ff, $ed, $2a, $ed, $d8, $c1, $e4, $d8
19e68     CF CF D6 AF 
19e6c     AE EA DF C1 
19e70     A6 C4 DF 93 
19e74     AE D8 CF 99 | 	byte	$cf, $cf, $d6, $af, $ae, $ea, $df, $c1, $a6, $c4, $df, $93, $ae, $d8, $cf, $99
19e78     D6 D8 A6 C1 
19e7c     C4 B7 CF 87 
19e80     99 CA C1 D6 
19e84     AF 93 AE AF | 	byte	$d6, $d8, $a6, $c1, $c4, $b7, $cf, $87, $99, $ca, $c1, $d6, $af, $93, $ae, $af
19e88     C1 80 A6 E4 
19e8c     AF 99 D8 AF 
19e90     80 D8 A6 C4 
19e94     B7 C4 D8 CF | 	byte	$c1, $80, $a6, $e4, $af, $99, $d8, $af, $80, $d8, $a6, $c4, $b7, $c4, $d8, $cf
19e98     AF D6 D6 F3 
19e9c     DF CF EA C1 
19ea0     D8 EA 00 FF 
19ea4     DF EA 09 0D | 	byte	$af, $d6, $d6, $f3, $df, $cf, $ea, $c1, $d8, $ea, $00, $ff, $df, $ea, $09, $0d
19ea8     EA F3 FF 0D 
19eac     D8 16 09 F3 
19eb0     0D FF 00 FF 
19eb4     21 ED FF 49 | 	byte	$ea, $f3, $ff, $0d, $d8, $16, $09, $f3, $0d, $ff, $00, $ff, $21, $ed, $ff, $49
19eb8     13 D8 0D 21 
19ebc     49 28 01 36 
19ec0     00 49 2A 49 
19ec4     67 28 45 28 | 	byte	$13, $d8, $0d, $21, $49, $28, $01, $36, $00, $49, $2a, $49, $67, $28, $45, $28
19ec8     36 64 51 28 
19ecc     5E 36 3C 13 
19ed0     45 51 13 16 
19ed4     1C 21 51 16 | 	byte	$36, $64, $51, $28, $5e, $36, $3c, $13, $45, $51, $13, $16, $1c, $21, $51, $16
19ed8     F3 FF 00 21 
19edc     FF 00 FF AF 
19ee0     F7 DF 00 CA 
19ee4     D8 AF D6 EA | 	byte	$f3, $ff, $00, $21, $ff, $00, $ff, $af, $f7, $df, $00, $ca, $d8, $af, $d6, $ea
19ee8     C4 C1 DF C4 
19eec     85 BB A6 80 
19ef0     D6 87 AE D6 
19ef4     B7 87 80 AE | 	byte	$c4, $c1, $df, $c4, $85, $bb, $a6, $80, $d6, $87, $ae, $d6, $b7, $87, $80, $ae
19ef8     AF 99 B7 CA 
19efc     87 CA CF 9C 
19f00     AE D8 AF 80 
19f04     CF A6 99 D6 | 	byte	$af, $99, $b7, $ca, $87, $ca, $cf, $9c, $ae, $d8, $af, $80, $cf, $a6, $99, $d6
19f08     ED AF 80 C1 
19f0c     D6 A6 C1 CF 
19f10     AF AF C1 A6 
19f14     C4 CA BB AE | 	byte	$ed, $af, $80, $c1, $d6, $a6, $c1, $cf, $af, $af, $c1, $a6, $c4, $ca, $bb, $ae
19f18     D6 00 B7 FF 
19f1c     00 FF 00 C1 
19f20     FF 09 00 2A 
19f24     00 F7 21 28 | 	byte	$d6, $00, $b7, $ff, $00, $ff, $00, $c1, $ff, $09, $00, $2a, $00, $f7, $21, $28
19f28     1C 13 16 0D 
19f2c     5E 00 16 1C 
19f30     ED 67 28 09 
19f34     21 1C 00 31 | 	byte	$1c, $13, $16, $0d, $5e, $00, $16, $1c, $ed, $67, $28, $09, $21, $1c, $00, $31
19f38     2A 13 01 36 
19f3c     13 ED 0D 5E 
19f40     1C F7 16 28 
19f44     0D 36 09 21 | 	byte	$2a, $13, $01, $36, $13, $ed, $0d, $5e, $1c, $f7, $16, $28, $0d, $36, $09, $21
19f48     45 28 13 F7 
19f4c     FF 2A 1C 49 
19f50     00 FF 0D 00 
19f54     FF 0D F3 D8 | 	byte	$45, $28, $13, $f7, $ff, $2a, $1c, $49, $00, $ff, $0d, $00, $ff, $0d, $f3, $d8
19f58     F3 D8 D8 D8 
19f5c     CF 09 00 AF 
19f60     AE D6 E4 BB 
19f64     A2 D6 E4 BB | 	byte	$f3, $d8, $d8, $d8, $cf, $09, $00, $af, $ae, $d6, $e4, $bb, $a2, $d6, $e4, $bb
19f68     C1 C1 F7 C1 
19f6c     A6 D6 E4 C1 
19f70     ED DF ED DF 
19f74     ED C4 ED FF | 	byte	$c1, $c1, $f7, $c1, $a6, $d6, $e4, $c1, $ed, $df, $ed, $df, $ed, $c4, $ed, $ff
19f78     00 D6 C4 F7 
19f7c     ED 09 CF C4 
19f80     F3 00 A6 C1 
19f84     D6 D8 D8 CA | 	byte	$00, $d6, $c4, $f7, $ed, $09, $cf, $c4, $f3, $00, $a6, $c1, $d6, $d8, $d8, $ca
19f88     E4 CF A6 C1 
19f8c     D8 CA AF C1 
19f90     D8 C4 B7 A2 
19f94     B7 DF C4 AE | 	byte	$e4, $cf, $a6, $c1, $d8, $ca, $af, $c1, $d8, $c4, $b7, $a2, $b7, $df, $c4, $ae
19f98     CF CF BB C1 
19f9c     F3 D8 B7 EA 
19fa0     EA EA CF ED 
19fa4     F3 EA F7 ED | 	byte	$cf, $cf, $bb, $c1, $f3, $d8, $b7, $ea, $ea, $ea, $cf, $ed, $f3, $ea, $f7, $ed
19fa8     F3 01 28 F3 
19fac     FF 1C 01 F7 
19fb0     16 13 FF FF 
19fb4     01 0D 1C 00 | 	byte	$f3, $01, $28, $f3, $ff, $1c, $01, $f7, $16, $13, $ff, $ff, $01, $0d, $1c, $00
19fb8     0D 1C FF 21 
19fbc     28 01 FF 1C 
19fc0     00 FF 45 00 
19fc4     EA 3C 28 F7 | 	byte	$0d, $1c, $ff, $21, $28, $01, $ff, $1c, $00, $ff, $45, $00, $ea, $3c, $28, $f7
19fc8     3C 0D 09 28 
19fcc     28 F7 0D 13 
19fd0     36 3F 00 3F 
19fd4     1C F3 36 13 | 	byte	$3c, $0d, $09, $28, $28, $f7, $0d, $13, $36, $3f, $00, $3f, $1c, $f3, $36, $13
19fd8     13 ED 1C 21 
19fdc     01 EA DF F3 
19fe0     F7 ED F3 ED 
19fe4     D6 ED B7 CA | 	byte	$13, $ed, $1c, $21, $01, $ea, $df, $f3, $f7, $ed, $f3, $ed, $d6, $ed, $b7, $ca
19fe8     ED B7 ED BB 
19fec     93 BB AF BB 
19ff0     CF CA D8 9C 
19ff4     99 CA CF CF | 	byte	$ed, $b7, $ed, $bb, $93, $bb, $af, $bb, $cf, $ca, $d8, $9c, $99, $ca, $cf, $cf
19ff8     AF 9C CA AF 
19ffc     AF CF D8 BB 
1a000     A2 D6 AF B7 
1a004     B7 AF EA ED | 	byte	$af, $9c, $ca, $af, $af, $cf, $d8, $bb, $a2, $d6, $af, $b7, $b7, $af, $ea, $ed
1a008     C4 C1 BB AE 
1a00c     CA DF D8 D8 
1a010     B7 BB D6 D8 
1a014     EA D8 C1 F7 | 	byte	$c4, $c1, $bb, $ae, $ca, $df, $d8, $d8, $b7, $bb, $d6, $d8, $ea, $d8, $c1, $f7
1a018     FF D8 C4 FF 
1a01c     FF EA 0D 00 
1a020     ED 00 FF 0D 
1a024     13 E4 FF 13 | 	byte	$ff, $d8, $c4, $ff, $ff, $ea, $0d, $00, $ed, $00, $ff, $0d, $13, $e4, $ff, $13
1a028     09 1C 01 F7 
1a02c     1C 01 21 0D 
1a030     00 21 13 01 
1a034     00 16 13 ED | 	byte	$09, $1c, $01, $f7, $1c, $01, $21, $0d, $00, $21, $13, $01, $00, $16, $13, $ed
1a038     1C 01 13 F7 
1a03c     FF 13 ED F7 
1a040     1C 00 ED ED 
1a044     09 09 F3 E4 | 	byte	$1c, $01, $13, $f7, $ff, $13, $ed, $f7, $1c, $00, $ed, $ed, $09, $09, $f3, $e4
1a048     00 EA 00 09 
1a04c     F7 F3 13 ED 
1a050     ED EA ED FF 
1a054     0D 00 13 DF | 	byte	$00, $ea, $00, $09, $f7, $f3, $13, $ed, $ed, $ea, $ed, $ff, $0d, $00, $13, $df
1a058     D8 FF 0D F7 
1a05c     EA CF EA 3C 
1a060     00 CA D6 F7 
1a064     0D 09 F7 EA | 	byte	$d8, $ff, $0d, $f7, $ea, $cf, $ea, $3c, $00, $ca, $d6, $f7, $0d, $09, $f7, $ea
1a068     EA 13 E4 D8 
1a06c     01 00 C4 D8 
1a070     0D 01 B7 ED 
1a074     EA ED DF F3 | 	byte	$ea, $13, $e4, $d8, $01, $00, $c4, $d8, $0d, $01, $b7, $ed, $ea, $ed, $df, $f3
1a078     E4 EA 09 ED 
1a07c     D6 EA D8 D8 
1a080     ED ED DF F3 
1a084     C4 D8 B7 00 | 	byte	$e4, $ea, $09, $ed, $d6, $ea, $d8, $d8, $ed, $ed, $df, $f3, $c4, $d8, $b7, $00
1a088     C1 CF CF C1 
1a08c     BB AF BB C1 
1a090     D8 87 A2 B7 
1a094     C1 AF AF CF | 	byte	$c1, $cf, $cf, $c1, $bb, $af, $bb, $c1, $d8, $87, $a2, $b7, $c1, $af, $af, $cf
1a098     C1 AF C1 D6 
1a09c     ED C1 DF CF 
1a0a0     CF D6 EA EA 
1a0a4     ED D6 21 C4 | 	byte	$c1, $af, $c1, $d6, $ed, $c1, $df, $cf, $cf, $d6, $ea, $ea, $ed, $d6, $21, $c4
1a0a8     E4 F7 ED 0D 
1a0ac     ED F7 ED EA 
1a0b0     FF 0D 00 09 
1a0b4     21 09 ED F7 | 	byte	$e4, $f7, $ed, $0d, $ed, $f7, $ed, $ea, $ff, $0d, $00, $09, $21, $09, $ed, $f7
1a0b8     09 16 00 DF 
1a0bc     09 09 16 01 
1a0c0     FF 09 0D 09 
1a0c4     09 16 2A 2A | 	byte	$09, $16, $00, $df, $09, $09, $16, $01, $ff, $09, $0d, $09, $09, $16, $2a, $2a
1a0c8     0D 13 01 09 
1a0cc     21 28 FF 0D 
1a0d0     21 1C 0D 21 
1a0d4     21 36 0D 31 | 	byte	$0d, $13, $01, $09, $21, $28, $ff, $0d, $21, $1c, $0d, $21, $21, $36, $0d, $31
1a0d8     1C 36 13 F7 
1a0dc     0D 36 28 16 
1a0e0     0D 00 F7 00 
1a0e4     EA D8 EA ED | 	byte	$1c, $36, $13, $f7, $0d, $36, $28, $16, $0d, $00, $f7, $00, $ea, $d8, $ea, $ed
1a0e8     DF E4 D6 CF 
1a0ec     CF C1 C1 B7 
1a0f0     AF CA C1 A6 
1a0f4     80 AE E4 AF | 	byte	$df, $e4, $d6, $cf, $cf, $c1, $c1, $b7, $af, $ca, $c1, $a6, $80, $ae, $e4, $af
1a0f8     BB 99 CA A6 
1a0fc     B7 AF BB 9C 
1a100     A6 CF A6 CA 
1a104     CA B7 C1 C1 | 	byte	$bb, $99, $ca, $a6, $b7, $af, $bb, $9c, $a6, $cf, $a6, $ca, $ca, $b7, $c1, $c1
1a108     B7 D8 D8 AE 
1a10c     CA E4 EA CF 
1a110     C1 D8 CA 01 
1a114     D8 C1 D6 F7 | 	byte	$b7, $d8, $d8, $ae, $ca, $e4, $ea, $cf, $c1, $d8, $ca, $01, $d8, $c1, $d6, $f7
1a118     F7 D8 DF FF 
1a11c     CF DF F7 F7 
1a120     E4 ED 09 F3 
1a124     F3 00 ED F7 | 	byte	$f7, $d8, $df, $ff, $cf, $df, $f7, $f7, $e4, $ed, $09, $f3, $f3, $00, $ed, $f7
1a128     00 09 13 F7 
1a12c     DF FF 13 EA 
1a130     FF 1C F3 21 
1a134     00 01 01 ED | 	byte	$00, $09, $13, $f7, $df, $ff, $13, $ea, $ff, $1c, $f3, $21, $00, $01, $01, $ed
1a138     0D ED 36 21 
1a13c     09 ED 1C 13 
1a140     EA F3 1C 36 
1a144     1C F7 F3 09 | 	byte	$0d, $ed, $36, $21, $09, $ed, $1c, $13, $ea, $f3, $1c, $36, $1c, $f7, $f3, $09
1a148     1C 0D 16 28 
1a14c     21 1C 21 0D 
1a150     0D 16 16 13 
1a154     01 16 28 ED | 	byte	$1c, $0d, $16, $28, $21, $1c, $21, $0d, $0d, $16, $16, $13, $01, $16, $28, $ed
1a158     01 16 13 F7 
1a15c     D8 F7 FF FF 
1a160     E4 D8 D6 EA 
1a164     00 AF BB CA | 	byte	$01, $16, $13, $f7, $d8, $f7, $ff, $ff, $e4, $d8, $d6, $ea, $00, $af, $bb, $ca
1a168     DF D8 D6 C4 
1a16c     EA C4 B7 C1 
1a170     ED CA DF D8 
1a174     CA C1 CF D8 | 	byte	$df, $d8, $d6, $c4, $ea, $c4, $b7, $c1, $ed, $ca, $df, $d8, $ca, $c1, $cf, $d8
1a178     CA F7 D8 AF 
1a17c     CF D8 C4 FF 
1a180     DF C4 BB F3 
1a184     ED DF CF AF | 	byte	$ca, $f7, $d8, $af, $cf, $d8, $c4, $ff, $df, $c4, $bb, $f3, $ed, $df, $cf, $af
1a188     D6 F3 D8 CA 
1a18c     CF C4 AF D6 
1a190     D8 C4 BB C4 
1a194     FF D8 AF D6 | 	byte	$d6, $f3, $d8, $ca, $cf, $c4, $af, $d6, $d8, $c4, $bb, $c4, $ff, $d8, $af, $d6
1a198     ED C4 CA CF 
1a19c     D6 F3 00 C1 
1a1a0     CA D8 C1 D8 
1a1a4     D6 ED D8 EA | 	byte	$ed, $c4, $ca, $cf, $d6, $f3, $00, $c1, $ca, $d8, $c1, $d8, $d6, $ed, $d8, $ea
1a1a8     ED CF F3 0D 
1a1ac     09 01 01 FF 
1a1b0     01 00 21 36 
1a1b4     36 13 2A 36 | 	byte	$ed, $cf, $f3, $0d, $09, $01, $01, $ff, $01, $00, $21, $36, $36, $13, $2a, $36
1a1b8     1C 1C 3F 45 
1a1bc     13 1C 49 3C 
1a1c0     0D 36 16 2A 
1a1c4     36 2A 2A 09 | 	byte	$1c, $1c, $3f, $45, $13, $1c, $49, $3c, $0d, $36, $16, $2a, $36, $2a, $2a, $09
1a1c8     09 36 1C 00 
1a1cc     FF 21 16 00 
1a1d0     F3 FF FF ED 
1a1d4     01 FF F7 EA | 	byte	$09, $36, $1c, $00, $ff, $21, $16, $00, $f3, $ff, $ff, $ed, $01, $ff, $f7, $ea
1a1d8     F7 E4 D6 CF 
1a1dc     F3 CF AF ED 
1a1e0     ED B7 CF DF 
1a1e4     D8 B7 E4 B7 | 	byte	$f7, $e4, $d6, $cf, $f3, $cf, $af, $ed, $ed, $b7, $cf, $df, $d8, $b7, $e4, $b7
1a1e8     AE C1 C4 BB 
1a1ec     CA BB BB A6 
1a1f0     A6 AF BB C1 
1a1f4     AE B7 A6 B7 | 	byte	$ae, $c1, $c4, $bb, $ca, $bb, $bb, $a6, $a6, $af, $bb, $c1, $ae, $b7, $a6, $b7
1a1f8     93 AE C1 C4 
1a1fc     C4 BB BB CF 
1a200     D8 BB B7 C4 
1a204     D8 DF C4 D6 | 	byte	$93, $ae, $c1, $c4, $c4, $bb, $bb, $cf, $d8, $bb, $b7, $c4, $d8, $df, $c4, $d6
1a208     EA F7 FF ED 
1a20c     E4 0D 00 DF 
1a210     1C 00 01 1C 
1a214     0D 1C 01 00 | 	byte	$ea, $f7, $ff, $ed, $e4, $0d, $00, $df, $1c, $00, $01, $1c, $0d, $1c, $01, $00
1a218     0D 2A 28 16 
1a21c     00 0D 1C 01 
1a220     09 2A 09 21 
1a224     28 00 00 16 | 	byte	$0d, $2a, $28, $16, $00, $0d, $1c, $01, $09, $2a, $09, $21, $28, $00, $00, $16
1a228     09 00 01 28 
1a22c     ED 00 01 00 
1a230     FF F3 00 F3 
1a234     09 F7 D8 EA | 	byte	$09, $00, $01, $28, $ed, $00, $01, $00, $ff, $f3, $00, $f3, $09, $f7, $d8, $ea
1a238     FF FF ED EA 
1a23c     F7 D6 F7 F7 
1a240     FF 00 D6 DF 
1a244     F7 F7 F7 E4 | 	byte	$ff, $ff, $ed, $ea, $f7, $d6, $f7, $f7, $ff, $00, $d6, $df, $f7, $f7, $f7, $e4
1a248     D8 F7 E4 EA 
1a24c     ED CF EA ED 
1a250     ED C4 D6 DF 
1a254     D8 D8 D8 D8 | 	byte	$d8, $f7, $e4, $ea, $ed, $cf, $ea, $ed, $ed, $c4, $d6, $df, $d8, $d8, $d8, $d8
1a258     D6 EA E4 D8 
1a25c     DF EA EA E4 
1a260     EA DF E4 E4 
1a264     EA E4 ED E4 | 	byte	$d6, $ea, $e4, $d8, $df, $ea, $ea, $e4, $ea, $df, $e4, $e4, $ea, $e4, $ed, $e4
1a268     CF DF 00 E4 
1a26c     F3 F3 FF 00 
1a270     CF D8 FF ED 
1a274     F7 EA F3 F7 | 	byte	$cf, $df, $00, $e4, $f3, $f3, $ff, $00, $cf, $d8, $ff, $ed, $f7, $ea, $f3, $f7
1a278     E4 F7 FF F7 
1a27c     FF E4 D6 FF 
1a280     EA FF F7 ED 
1a284     E4 E4 FF ED | 	byte	$e4, $f7, $ff, $f7, $ff, $e4, $d6, $ff, $ea, $ff, $f7, $ed, $e4, $e4, $ff, $ed
1a288     DF EA F7 ED 
1a28c     C4 ED ED D8 
1a290     EA EA ED DF 
1a294     F7 ED E4 00 | 	byte	$df, $ea, $f7, $ed, $c4, $ed, $ed, $d8, $ea, $ea, $ed, $df, $f7, $ed, $e4, $00
1a298     00 DF EA FF 
1a29c     ED ED EA FF 
1a2a0     13 F7 F3 01 
1a2a4     00 ED 09 00 | 	byte	$00, $df, $ea, $ff, $ed, $ed, $ea, $ff, $13, $f7, $f3, $01, $00, $ed, $09, $00
1a2a8     DF FF 0D 13 
1a2ac     00 F3 FF 13 
1a2b0     00 01 F3 FF 
1a2b4     0D 00 F7 00 | 	byte	$df, $ff, $0d, $13, $00, $f3, $ff, $13, $00, $01, $f3, $ff, $0d, $00, $f7, $00
1a2b8     FF FF 0D 00 
1a2bc     ED FF F7 EA 
1a2c0     ED FF F3 EA 
1a2c4     ED F7 D8 DF | 	byte	$ff, $ff, $0d, $00, $ed, $ff, $f7, $ea, $ed, $ff, $f3, $ea, $ed, $f7, $d8, $df
1a2c8     EA F3 F3 FF 
1a2cc     ED CA E4 D8 
1a2d0     ED EA E4 ED 
1a2d4     CF D6 ED D6 | 	byte	$ea, $f3, $f3, $ff, $ed, $ca, $e4, $d8, $ed, $ea, $e4, $ed, $cf, $d6, $ed, $d6
1a2d8     D8 DF EA D6 
1a2dc     D8 CF D8 DF 
1a2e0     CF DF 00 CF 
1a2e4     C1 DF D8 F3 | 	byte	$d8, $df, $ea, $d6, $d8, $cf, $d8, $df, $cf, $df, $00, $cf, $c1, $df, $d8, $f3
1a2e8     D8 CF DF ED 
1a2ec     DF DF F3 00 
1a2f0     ED EA EA EA 
1a2f4     FF D8 F3 00 | 	byte	$d8, $cf, $df, $ed, $df, $df, $f3, $00, $ed, $ea, $ea, $ea, $ff, $d8, $f3, $00
1a2f8     E4 F7 ED ED 
1a2fc     F7 E4 DF F3 
1a300     ED E4 E4 FF 
1a304     ED DF F7 ED | 	byte	$e4, $f7, $ed, $ed, $f7, $e4, $df, $f3, $ed, $e4, $e4, $ff, $ed, $df, $f7, $ed
1a308     F7 F3 01 00 
1a30c     ED 00 F7 01 
1a310     00 FF 00 00 
1a314     01 0D 00 FF | 	byte	$f7, $f3, $01, $00, $ed, $00, $f7, $01, $00, $ff, $00, $00, $01, $0d, $00, $ff
1a318     13 00 01 ED 
1a31c     F7 0D 00 F7 
1a320     F7 00 F7 FF 
1a324     16 01 ED F7 | 	byte	$13, $00, $01, $ed, $f7, $0d, $00, $f7, $f7, $00, $f7, $ff, $16, $01, $ed, $f7
1a328     00 00 FF 00 
1a32c     01 00 ED F7 
1a330     00 F7 F3 F3 
1a334     E4 DF E4 ED | 	byte	$00, $00, $ff, $00, $01, $00, $ed, $f7, $00, $f7, $f3, $f3, $e4, $df, $e4, $ed
1a338     DF ED ED E4 
1a33c     E4 D6 CF D8 
1a340     D8 D8 D8 D8 
1a344     ED DF C4 CA | 	byte	$df, $ed, $ed, $e4, $e4, $d6, $cf, $d8, $d8, $d8, $d8, $d8, $ed, $df, $c4, $ca
1a348     DF D8 DF D8 
1a34c     D8 EA D8 D6 
1a350     D8 DF ED F7 
1a354     CF CA D8 EA | 	byte	$df, $d8, $df, $d8, $d8, $ea, $d8, $d6, $d8, $df, $ed, $f7, $cf, $ca, $d8, $ea
1a358     F7 E4 ED E4 
1a35c     09 00 E4 F3 
1a360     ED ED EA 01 
1a364     ED ED E4 D8 | 	byte	$f7, $e4, $ed, $e4, $09, $00, $e4, $f3, $ed, $ed, $ea, $01, $ed, $ed, $e4, $d8
1a368     ED FF F3 E4 
1a36c     D8 EA EA DF 
1a370     DF ED ED EA 
1a374     ED D8 EA EA | 	byte	$ed, $ff, $f3, $e4, $d8, $ea, $ea, $df, $df, $ed, $ed, $ea, $ed, $d8, $ea, $ea
1a378     EA F3 ED DF 
1a37c     F3 FF FF 00 
1a380     FF ED FF FF 
1a384     00 01 16 00 | 	byte	$ea, $f3, $ed, $df, $f3, $ff, $ff, $00, $ff, $ed, $ff, $ff, $00, $01, $16, $00
1a388     FF FF 01 0D 
1a38c     01 00 00 0D 
1a390     0D 09 01 00 
1a394     16 0D 00 FF | 	byte	$ff, $ff, $01, $0d, $01, $00, $00, $0d, $0d, $09, $01, $00, $16, $0d, $00, $ff
1a398     FF 0D 01 F7 
1a39c     01 09 00 ED 
1a3a0     EA 01 FF F7 
1a3a4     00 F7 F7 ED | 	byte	$ff, $0d, $01, $f7, $01, $09, $00, $ed, $ea, $01, $ff, $f7, $00, $f7, $f7, $ed
1a3a8     ED ED EA EA 
1a3ac     EA F7 F7 DF 
1a3b0     CF E4 ED F3 
1a3b4     E4 DF D8 DF | 	byte	$ed, $ed, $ea, $ea, $ea, $f7, $f7, $df, $cf, $e4, $ed, $f3, $e4, $df, $d8, $df
1a3b8     ED E4 DF EA 
1a3bc     F3 EA D6 D8 
1a3c0     DF EA CF D6 
1a3c4     E4 DF CF CF | 	byte	$ed, $e4, $df, $ea, $f3, $ea, $d6, $d8, $df, $ea, $cf, $d6, $e4, $df, $cf, $cf
1a3c8     EA CF CA CF 
1a3cc     CF EA D8 C1 
1a3d0     CA D6 C1 D6 
1a3d4     DF CF C4 CF | 	byte	$ea, $cf, $ca, $cf, $cf, $ea, $d8, $c1, $ca, $d6, $c1, $d6, $df, $cf, $c4, $cf
1a3d8     DF E4 E4 C4 
1a3dc     D6 E4 D8 EA 
1a3e0     D6 D6 E4 FF 
1a3e4     F3 F7 ED EA | 	byte	$df, $e4, $e4, $c4, $d6, $e4, $d8, $ea, $d6, $d6, $e4, $ff, $f3, $f7, $ed, $ea
1a3e8     EA FF ED ED 
1a3ec     FF FF 01 09 
1a3f0     F7 F7 01 01 
1a3f4     F7 FF 00 00 | 	byte	$ea, $ff, $ed, $ed, $ff, $ff, $01, $09, $f7, $f7, $01, $01, $f7, $ff, $00, $00
1a3f8     00 0D 01 09 
1a3fc     00 F7 FF 0D 
1a400     00 09 F7 01 
1a404     0D 01 01 01 | 	byte	$00, $0d, $01, $09, $00, $f7, $ff, $0d, $00, $09, $f7, $01, $0d, $01, $01, $01
1a408     01 01 FF 09 
1a40c     09 01 01 00 
1a410     00 FF 01 09 
1a414     FF F7 ED F7 | 	byte	$01, $01, $ff, $09, $09, $01, $01, $00, $00, $ff, $01, $09, $ff, $f7, $ed, $f7
1a418     01 09 F7 ED 
1a41c     F3 F7 00 FF 
1a420     ED E4 ED E4 
1a424     DF ED 00 F3 | 	byte	$01, $09, $f7, $ed, $f3, $f7, $00, $ff, $ed, $e4, $ed, $e4, $df, $ed, $00, $f3
1a428     D8 D6 EA FF 
1a42c     ED D8 DF DF 
1a430     ED ED D8 D6 
1a434     DF DF ED D8 | 	byte	$d8, $d6, $ea, $ff, $ed, $d8, $df, $df, $ed, $ed, $d8, $d6, $df, $df, $ed, $d8
1a438     D6 D6 D8 CF 
1a43c     D8 CF EA EA 
1a440     D8 CF DF EA 
1a444     D8 C4 CF D6 | 	byte	$d6, $d6, $d8, $cf, $d8, $cf, $ea, $ea, $d8, $cf, $df, $ea, $d8, $c4, $cf, $d6
1a448     E4 D8 D8 D6 
1a44c     C4 D6 ED DF 
1a450     D8 D6 CA CF 
1a454     D6 D8 DF DF | 	byte	$e4, $d8, $d8, $d6, $c4, $d6, $ed, $df, $d8, $d6, $ca, $cf, $d6, $d8, $df, $df
1a458     EA E4 D8 C4 
1a45c     EA F3 D8 DF 
1a460     E4 ED DF D8 
1a464     FF 00 ED EA | 	byte	$ea, $e4, $d8, $c4, $ea, $f3, $d8, $df, $e4, $ed, $df, $d8, $ff, $00, $ed, $ea
1a468     FF F7 F7 FF 
1a46c     FF ED 00 00 
1a470     09 09 01 FF 
1a474     09 00 00 01 | 	byte	$ff, $f7, $f7, $ff, $ff, $ed, $00, $00, $09, $09, $01, $ff, $09, $00, $00, $01
1a478     0D 0D 1C 01 
1a47c     00 01 13 01 
1a480     01 13 01 09 
1a484     09 0D 01 0D | 	byte	$0d, $0d, $1c, $01, $00, $01, $13, $01, $01, $13, $01, $09, $09, $0d, $01, $0d
1a488     01 09 09 01 
1a48c     09 00 F7 00 
1a490     00 FF 01 01 
1a494     ED ED FF F7 | 	byte	$01, $09, $09, $01, $09, $00, $f7, $00, $00, $ff, $01, $01, $ed, $ed, $ff, $f7
1a498     F7 FF E4 ED 
1a49c     ED ED F3 FF 
1a4a0     E4 D8 FF F7 
1a4a4     CF D6 DF D8 | 	byte	$f7, $ff, $e4, $ed, $ed, $ed, $f3, $ff, $e4, $d8, $ff, $f7, $cf, $d6, $df, $d8
1a4a8     E4 ED E4 C1 
1a4ac     CA DF DF E4 
1a4b0     D8 DF CF CF 
1a4b4     DF CF CF EA | 	byte	$e4, $ed, $e4, $c1, $ca, $df, $df, $e4, $d8, $df, $cf, $cf, $df, $cf, $cf, $ea
1a4b8     D8 D8 CF D8 
1a4bc     D6 D8 CF C4 
1a4c0     CF D8 D6 D8 
1a4c4     E4 D6 C4 CF | 	byte	$d8, $d8, $cf, $d8, $d6, $d8, $cf, $c4, $cf, $d8, $d6, $d8, $e4, $d6, $c4, $cf
1a4c8     E4 CF D6 E4 
1a4cc     DF D8 CA D6 
1a4d0     E4 EA ED EA 
1a4d4     DF ED EA ED | 	byte	$e4, $cf, $d6, $e4, $df, $d8, $ca, $d6, $e4, $ea, $ed, $ea, $df, $ed, $ea, $ed
1a4d8     EA ED EA ED 
1a4dc     F3 FF FF F7 
1a4e0     F3 ED 00 00 
1a4e4     F7 F7 ED 00 | 	byte	$ea, $ed, $ea, $ed, $f3, $ff, $ff, $f7, $f3, $ed, $00, $00, $f7, $f7, $ed, $00
1a4e8     FF 00 FF 00 
1a4ec     F7 FF 00 00 
1a4f0     00 FF 00 F3 
1a4f4     FF 16 0D 00 | 	byte	$ff, $00, $ff, $00, $f7, $ff, $00, $00, $00, $ff, $00, $f3, $ff, $16, $0d, $00
1a4f8     FF FF FF 01 
1a4fc     0D 13 13 01 
1a500     09 0D 09 00 
1a504     09 0D FF 09 | 	byte	$ff, $ff, $ff, $01, $0d, $13, $13, $01, $09, $0d, $09, $00, $09, $0d, $ff, $09
1a508     00 FF 01 01 
1a50c     FF F7 FF FF 
1a510     F7 FF ED F3 
1a514     ED F3 DF EA | 	byte	$00, $ff, $01, $01, $ff, $f7, $ff, $ff, $f7, $ff, $ed, $f3, $ed, $f3, $df, $ea
1a518     F7 ED D8 D6 
1a51c     D8 E4 E4 D8 
1a520     CF CF D6 D8 
1a524     CF D8 D8 CA | 	byte	$f7, $ed, $d8, $d6, $d8, $e4, $e4, $d8, $cf, $cf, $d6, $d8, $cf, $d8, $d8, $ca
1a528     D8 D8 D8 C1 
1a52c     CA D8 D8 D8 
1a530     D8 D8 D8 EA 
1a534     D8 CF DF ED | 	byte	$d8, $d8, $d8, $c1, $ca, $d8, $d8, $d8, $d8, $d8, $d8, $ea, $d8, $cf, $df, $ed
1a538     D8 DF DF ED 
1a53c     ED ED DF D6 
1a540     DF E4 EA ED 
1a544     D8 D8 DF EA | 	byte	$d8, $df, $df, $ed, $ed, $ed, $df, $d6, $df, $e4, $ea, $ed, $d8, $d8, $df, $ea
1a548     ED DF EA E4 
1a54c     E4 F3 ED EA 
1a550     EA F3 EA ED 
1a554     ED F7 FF 00 | 	byte	$ed, $df, $ea, $e4, $e4, $f3, $ed, $ea, $ea, $f3, $ea, $ed, $ed, $f7, $ff, $00
1a558     FF FF 01 00 
1a55c     00 00 00 00 
1a560     13 00 FF 01 
1a564     0D 00 0D 0D | 	byte	$ff, $ff, $01, $00, $00, $00, $00, $00, $13, $00, $ff, $01, $0d, $00, $0d, $0d
1a568     01 00 F7 FF 
1a56c     00 00 09 F7 
1a570     ED FF 00 F7 
1a574     FF FF F3 ED | 	byte	$01, $00, $f7, $ff, $00, $00, $09, $f7, $ed, $ff, $00, $f7, $ff, $ff, $f3, $ed
1a578     F3 F7 EA F7 
1a57c     FF ED F3 ED 
1a580     E4 ED F7 F3 
1a584     EA F3 FF ED | 	byte	$f3, $f7, $ea, $f7, $ff, $ed, $f3, $ed, $e4, $ed, $f7, $f3, $ea, $f3, $ff, $ed
1a588     ED ED EA E4 
1a58c     FF 00 E4 EA 
1a590     EA ED F7 F7 
1a594     E4 EA F7 F3 | 	byte	$ed, $ed, $ea, $e4, $ff, $00, $e4, $ea, $ea, $ed, $f7, $f7, $e4, $ea, $f7, $f3
1a598     EA ED EA EA 
1a59c     EA ED ED ED 
1a5a0     ED F3 ED ED 
1a5a4     EA ED F3 ED | 	byte	$ea, $ed, $ea, $ea, $ea, $ed, $ed, $ed, $ed, $f3, $ed, $ed, $ea, $ed, $f3, $ed
1a5a8     EA F7 F3 F3 
1a5ac     F3 FF F3 F3 
1a5b0     FF F7 ED F3 
1a5b4     FF F7 EA FF | 	byte	$ea, $f7, $f3, $f3, $f3, $ff, $f3, $f3, $ff, $f7, $ed, $f3, $ff, $f7, $ea, $ff
1a5b8     FF ED F7 EA 
1a5bc     E4 EA ED E4 
1a5c0     ED ED EA ED 
1a5c4     ED E4 E4 EA | 	byte	$ff, $ed, $f7, $ea, $e4, $ea, $ed, $e4, $ed, $ed, $ea, $ed, $ed, $e4, $e4, $ea
1a5c8     ED EA ED ED 
1a5cc     D8 EA F3 ED 
1a5d0     F7 ED ED EA 
1a5d4     ED F3 ED F3 | 	byte	$ed, $ea, $ed, $ed, $d8, $ea, $f3, $ed, $f7, $ed, $ed, $ea, $ed, $f3, $ed, $f3
1a5d8     F3 F3 ED F3 
1a5dc     ED F7 ED ED 
1a5e0     ED F3 ED DF 
1a5e4     ED ED EA E4 | 	byte	$f3, $f3, $ed, $f3, $ed, $f7, $ed, $ed, $ed, $f3, $ed, $df, $ed, $ed, $ea, $e4
1a5e8     E4 D8 DF EA 
1a5ec     EA E4 E4 E4 
1a5f0     D8 DF E4 ED 
1a5f4     EA E4 E4 ED | 	byte	$e4, $d8, $df, $ea, $ea, $e4, $e4, $e4, $d8, $df, $e4, $ed, $ea, $e4, $e4, $ed
1a5f8     F3 EA E4 F3 
1a5fc     F7 ED FF F7 
1a600     F3 F7 FF ED 
1a604     F7 FF 00 00 | 	byte	$f3, $ea, $e4, $f3, $f7, $ed, $ff, $f7, $f3, $f7, $ff, $ed, $f7, $ff, $00, $00
1a608     00 FF FF 01 
1a60c     FF F7 F7 FF 
1a610     00 F7 F7 F3 
1a614     F7 FF FF F7 | 	byte	$00, $ff, $ff, $01, $ff, $f7, $f7, $ff, $00, $f7, $f7, $f3, $f7, $ff, $ff, $f7
1a618     F3 F7 F7 FF 
1a61c     F7 F7 F3 F7 
1a620     ED ED F3 F3 
1a624     ED ED F7 F3 | 	byte	$f3, $f7, $f7, $ff, $f7, $f7, $f3, $f7, $ed, $ed, $f3, $f3, $ed, $ed, $f7, $f3
1a628     EA ED F3 ED 
1a62c     ED E4 ED ED 
1a630     F7 EA E4 E4 
1a634     DF EA ED E4 | 	byte	$ea, $ed, $f3, $ed, $ed, $e4, $ed, $ed, $f7, $ea, $e4, $e4, $df, $ea, $ed, $e4
1a638     ED ED EA E4 
1a63c     DF F3 ED ED 
1a640     F3 EA F3 F7 
1a644     ED DF ED F3 | 	byte	$ed, $ed, $ea, $e4, $df, $f3, $ed, $ed, $f3, $ea, $f3, $f7, $ed, $df, $ed, $f3
1a648     E4 E4 ED F3 
1a64c     EA ED EA EA 
1a650     EA EA EA EA 
1a654     EA ED E4 ED | 	byte	$e4, $e4, $ed, $f3, $ea, $ed, $ea, $ea, $ea, $ea, $ea, $ea, $ea, $ed, $e4, $ed
1a658     F7 F3 EA ED 
1a65c     DF E4 EA F3 
1a660     FF FF EA ED 
1a664     FF 00 ED FF | 	byte	$f7, $f3, $ea, $ed, $df, $e4, $ea, $f3, $ff, $ff, $ea, $ed, $ff, $00, $ed, $ff
1a668     FF F7 ED FF 
1a66c     00 F7 F7 00 
1a670     00 FF F7 F7 
1a674     FF 00 F7 F7 | 	byte	$ff, $f7, $ed, $ff, $00, $f7, $f7, $00, $00, $ff, $f7, $f7, $ff, $00, $f7, $f7
1a678     FF F7 F7 F7 
1a67c     F3 F3 F3 ED 
1a680     ED ED EA ED 
1a684     ED F7 00 ED | 	byte	$ff, $f7, $f7, $f7, $f3, $f3, $f3, $ed, $ed, $ed, $ea, $ed, $ed, $f7, $00, $ed
1a688     ED F3 F3 F7 
1a68c     F7 ED ED F7 
1a690     FF ED ED FF 
1a694     F7 F7 FF FF | 	byte	$ed, $f3, $f3, $f7, $f7, $ed, $ed, $f7, $ff, $ed, $ed, $ff, $f7, $f7, $ff, $ff
1a698     F3 FF 00 ED 
1a69c     F7 00 00 00 
1a6a0     00 F7 F3 FF 
1a6a4     FF F7 F7 FF | 	byte	$f3, $ff, $00, $ed, $f7, $00, $00, $00, $00, $f7, $f3, $ff, $ff, $f7, $f7, $ff
1a6a8     FF FF FF F7 
1a6ac     FF 00 ED 00 
1a6b0     F3 F7 F7 F3 
1a6b4     ED ED F3 ED | 	byte	$ff, $ff, $ff, $f7, $ff, $00, $ed, $00, $f3, $f7, $f7, $f3, $ed, $ed, $f3, $ed
1a6b8     EA EA F7 E4 
1a6bc     E4 ED EA E4 
1a6c0     DF EA E4 DF 
1a6c4     E4 DF E4 DF | 	byte	$ea, $ea, $f7, $e4, $e4, $ed, $ea, $e4, $df, $ea, $e4, $df, $e4, $df, $e4, $df
1a6c8     D8 D6 D8 D6 
1a6cc     D8 DF D8 D8 
1a6d0     D8 DF E4 DF 
1a6d4     DF DF DF EA | 	byte	$d8, $d6, $d8, $d6, $d8, $df, $d8, $d8, $d8, $df, $e4, $df, $df, $df, $df, $ea
1a6d8     ED EA E4 E4 
1a6dc     ED EA ED F7 
1a6e0     ED EA ED F7 
1a6e4     F7 F7 ED F3 | 	byte	$ed, $ea, $e4, $e4, $ed, $ea, $ed, $f7, $ed, $ea, $ed, $f7, $f7, $f7, $ed, $f3
1a6e8     F3 FF F3 F7 
1a6ec     ED ED F7 ED 
1a6f0     EA F3 ED F7 
1a6f4     F7 ED ED ED | 	byte	$f3, $ff, $f3, $f7, $ed, $ed, $f7, $ed, $ea, $f3, $ed, $f7, $f7, $ed, $ed, $ed
1a6f8     F7 ED F7 ED 
1a6fc     ED F7 FF FF 
1a700     F3 ED ED F3 
1a704     F7 00 F7 ED | 	byte	$f7, $ed, $f7, $ed, $ed, $f7, $ff, $ff, $f3, $ed, $ed, $f3, $f7, $00, $f7, $ed
1a708     FF FF F7 F7 
1a70c     ED F7 00 FF 
1a710     00 ED F7 FF 
1a714     00 F7 F3 F7 | 	byte	$ff, $ff, $f7, $f7, $ed, $f7, $00, $ff, $00, $ed, $f7, $ff, $00, $f7, $f3, $f7
1a718     ED F3 00 00 
1a71c     F7 ED ED F3 
1a720     F7 F7 F7 ED 
1a724     ED ED F3 F3 | 	byte	$ed, $f3, $00, $00, $f7, $ed, $ed, $f3, $f7, $f7, $f7, $ed, $ed, $ed, $f3, $f3
1a728     E4 EA F7 ED 
1a72c     EA F3 F7 ED 
1a730     ED E4 DF EA 
1a734     ED ED EA E4 | 	byte	$e4, $ea, $f7, $ed, $ea, $f3, $f7, $ed, $ed, $e4, $df, $ea, $ed, $ed, $ea, $e4
1a738     ED F3 F3 F3 
1a73c     EA EA F7 F7 
1a740     ED EA ED FF 
1a744     F3 ED E4 ED | 	byte	$ed, $f3, $f3, $f3, $ea, $ea, $f7, $f7, $ed, $ea, $ed, $ff, $f3, $ed, $e4, $ed
1a748     ED ED F3 F3 
1a74c     ED ED ED E4 
1a750     ED ED EA EA 
1a754     ED ED EA ED | 	byte	$ed, $ed, $f3, $f3, $ed, $ed, $ed, $e4, $ed, $ed, $ea, $ea, $ed, $ed, $ea, $ed
1a758     EA EA ED F3 
1a75c     ED EA EA E4 
1a760     D8 ED F3 F3 
1a764     F3 ED ED F3 | 	byte	$ea, $ea, $ed, $f3, $ed, $ea, $ea, $e4, $d8, $ed, $f3, $f3, $f3, $ed, $ed, $f3
1a768     ED F3 FF FF 
1a76c     ED DF FF 00 
1a770     F7 ED F7 FF 
1a774     F3 F3 F7 F7 | 	byte	$ed, $f3, $ff, $ff, $ed, $df, $ff, $00, $f7, $ed, $f7, $ff, $f3, $f3, $f7, $f7
1a778     F3 FF F7 F7 
1a77c     ED ED FF F7 
1a780     F3 F7 FF FF 
1a784     F3 F7 ED ED | 	byte	$f3, $ff, $f7, $f7, $ed, $ed, $ff, $f7, $f3, $f7, $ff, $ff, $f3, $f7, $ed, $ed
1a788     F7 F7 F7 F3 
1a78c     F7 F3 F7 00 
1a790     00 ED F7 FF 
1a794     F7 ED F7 F7 | 	byte	$f7, $f7, $f7, $f3, $f7, $f3, $f7, $00, $00, $ed, $f7, $ff, $f7, $ed, $f7, $f7
1a798     F3 FF 00 F3 
1a79c     FF FF F7 00 
1a7a0     FF F7 FF 00 
1a7a4     F3 F3 F3 FF | 	byte	$f3, $ff, $00, $f3, $ff, $ff, $f7, $00, $ff, $f7, $ff, $00, $f3, $f3, $f3, $ff
1a7a8     00 00 F3 ED 
1a7ac     F7 00 00 F7 
1a7b0     F7 F3 F7 ED 
1a7b4     FF 00 ED ED | 	byte	$00, $00, $f3, $ed, $f7, $00, $00, $f7, $f7, $f3, $f7, $ed, $ff, $00, $ed, $ed
1a7b8     F3 ED EA F3 
1a7bc     ED E4 DF EA 
1a7c0     F3 E4 D8 E4 
1a7c4     DF D8 D8 D8 | 	byte	$f3, $ed, $ea, $f3, $ed, $e4, $df, $ea, $f3, $e4, $d8, $e4, $df, $d8, $d8, $d8
1a7c8     D6 CF D6 D6 
1a7cc     D8 DF D8 D6 
1a7d0     CF D6 D8 D8 
1a7d4     E4 D6 DF D8 | 	byte	$d6, $cf, $d6, $d6, $d8, $df, $d8, $d6, $cf, $d6, $d8, $d8, $e4, $d6, $df, $d8
1a7d8     CF D8 ED ED 
1a7dc     DF E4 ED DF 
1a7e0     DF EA F3 F3 
1a7e4     F7 F3 ED F3 | 	byte	$cf, $d8, $ed, $ed, $df, $e4, $ed, $df, $df, $ea, $f3, $f3, $f7, $f3, $ed, $f3
1a7e8     FF F7 F7 F3 
1a7ec     F3 FF 00 F7 
1a7f0     F7 F7 F7 F3 
1a7f4     FF 00 ED F7 | 	byte	$ff, $f7, $f7, $f3, $f3, $ff, $00, $f7, $f7, $f7, $f7, $f3, $ff, $00, $ed, $f7
1a7f8     FF FF FF 00 
1a7fc     F3 FF FF F7 
1a800     F7 FF FF F7 
1a804     F3 F7 00 F3 | 	byte	$ff, $ff, $ff, $00, $f3, $ff, $ff, $f7, $f7, $ff, $ff, $f7, $f3, $f7, $00, $f3
1a808     F7 F7 F7 F7 
1a80c     F3 FF FF F7 
1a810     ED ED F3 F7 
1a814     ED F3 F7 F7 | 	byte	$f7, $f7, $f7, $f7, $f3, $ff, $ff, $f7, $ed, $ed, $f3, $f7, $ed, $f3, $f7, $f7
1a818     ED F7 F3 F3 
1a81c     F3 F7 F7 F3 
1a820     F3 F7 FF FF 
1a824     FF FF 00 F3 | 	byte	$ed, $f7, $f3, $f3, $f3, $f7, $f7, $f3, $f3, $f7, $ff, $ff, $ff, $ff, $00, $f3
1a828     F3 F7 ED ED 
1a82c     F7 FF F7 ED 
1a830     ED F3 ED ED 
1a834     EA ED ED F7 | 	byte	$f3, $f7, $ed, $ed, $f7, $ff, $f7, $ed, $ed, $f3, $ed, $ed, $ea, $ed, $ed, $f7
1a838     F7 ED EA ED 
1a83c     EA ED E4 ED 
1a840     F3 ED ED EA 
1a844     ED ED EA ED | 	byte	$f7, $ed, $ea, $ed, $ea, $ed, $e4, $ed, $f3, $ed, $ed, $ea, $ed, $ed, $ea, $ed
1a848     ED E4 E4 DF 
1a84c     ED EA EA ED 
1a850     EA E4 E4 DF 
1a854     D8 E4 E4 DF | 	byte	$ed, $e4, $e4, $df, $ed, $ea, $ea, $ed, $ea, $e4, $e4, $df, $d8, $e4, $e4, $df
1a858     E4 E4 D8 D8 
1a85c     DF DF DF DF 
1a860     EA DF DF E4 
1a864     EA EA F7 ED | 	byte	$e4, $e4, $d8, $d8, $df, $df, $df, $df, $ea, $df, $df, $e4, $ea, $ea, $f7, $ed
1a868     EA ED ED F7 
1a86c     F7 F7 F7 FF 
1a870     F7 FF 00 00 
1a874     F7 00 FF F7 | 	byte	$ea, $ed, $ed, $f7, $f7, $f7, $f7, $ff, $f7, $ff, $00, $00, $f7, $00, $ff, $f7
1a878     01 00 F7 F7 
1a87c     00 00 FF FF 
1a880     00 FF 00 00 
1a884     F7 F7 FF 01 | 	byte	$01, $00, $f7, $f7, $00, $00, $ff, $ff, $00, $ff, $00, $00, $f7, $f7, $ff, $01
1a888     00 00 00 00 
1a88c     00 00       | 	byte	$00[6]
1a88e     01 00 FF 01 
1a892     01 00 00 00 
1a896     00 00 F7 FF 
1a89a     00 00 F7 F7 | 	byte	$01, $00, $ff, $01, $01, $00, $00, $00, $00, $00, $f7, $ff, $00, $00, $f7, $f7
1a89e     00 00 ED F7 
1a8a2     F7 ED ED ED 
1a8a6     ED EA EA ED 
1a8aa     EA E4 DF DF | 	byte	$00, $00, $ed, $f7, $f7, $ed, $ed, $ed, $ed, $ea, $ea, $ed, $ea, $e4, $df, $df
1a8ae     DF DF DF E4 
1a8b2     DF D8 DF D8 
1a8b6     CF D8 DF DF 
1a8ba     D8 D6 DF DF | 	byte	$df, $df, $df, $e4, $df, $d8, $df, $d8, $cf, $d8, $df, $df, $d8, $d6, $df, $df
1a8be     E4 E4 D8 D8 
1a8c2     DF DF D8 DF 
1a8c6     E4 E4 DF DF 
1a8ca     E4 DF DF DF | 	byte	$e4, $e4, $d8, $d8, $df, $df, $d8, $df, $e4, $e4, $df, $df, $e4, $df, $df, $df
1a8ce     D8 EA ED DF 
1a8d2     DF DF DF EA 
1a8d6     ED ED D8 DF 
1a8da     EA ED EA ED | 	byte	$d8, $ea, $ed, $df, $df, $df, $df, $ea, $ed, $ed, $d8, $df, $ea, $ed, $ea, $ed
1a8de     E4 E4 F3 ED 
1a8e2     F7 F3 ED ED 
1a8e6     F7 FF F7 F3 
1a8ea     F7 00 FF F7 | 	byte	$e4, $e4, $f3, $ed, $f7, $f3, $ed, $ed, $f7, $ff, $f7, $f3, $f7, $00, $ff, $f7
1a8ee     00 FF 00 FF 
1a8f2     01 00 F7 00 
1a8f6     00 00 00 00 
1a8fa     01 09 00 01 | 	byte	$00, $ff, $00, $ff, $01, $00, $f7, $00, $00, $00, $00, $00, $01, $09, $00, $01
1a8fe     01 00 00 FF 
1a902     00 FF 00 01 
1a906     FF 00 00 FF 
1a90a     F7 F7 F3 F7 | 	byte	$01, $00, $00, $ff, $00, $ff, $00, $01, $ff, $00, $00, $ff, $f7, $f7, $f3, $f7
1a90e     F3 F3 ED F7 
1a912     ED ED EA EA 
1a916     ED ED ED E4 
1a91a     EA ED EA ED | 	byte	$f3, $f3, $ed, $f7, $ed, $ed, $ea, $ea, $ed, $ed, $ed, $e4, $ea, $ed, $ea, $ed
1a91e     ED ED E4 E4 
1a922     DF E4 EA E4 
1a926     E4 EA EA D8 
1a92a     DF ED ED ED | 	byte	$ed, $ed, $e4, $e4, $df, $e4, $ea, $e4, $e4, $ea, $ea, $d8, $df, $ed, $ed, $ed
1a92e     ED D8 D8 D8 
1a932     E4 E4 D8 DF 
1a936     D8 CF D8 D8 
1a93a     D8 DF D6 D6 | 	byte	$ed, $d8, $d8, $d8, $e4, $e4, $d8, $df, $d8, $cf, $d8, $d8, $d8, $df, $d6, $d6
1a93e     D8 DF DF DF 
1a942     E4 E4 ED ED 
1a946     ED EA ED ED 
1a94a     ED ED F3 F7 | 	byte	$d8, $df, $df, $df, $e4, $e4, $ed, $ed, $ed, $ea, $ed, $ed, $ed, $ed, $f3, $f7
1a94e     F7 FF FF FF 
1a952     F7 F7 F3 F7 
1a956     00 FF FF F3 
1a95a     ED F3 F7 F7 | 	byte	$f7, $ff, $ff, $ff, $f7, $f7, $f3, $f7, $00, $ff, $ff, $f3, $ed, $f3, $f7, $f7
1a95e     F3 F7 F7 F7 
1a962     F3 ED ED FF 
1a966     FF F7 ED ED 
1a96a     ED F7 FF F7 | 	byte	$f3, $f7, $f7, $f7, $f3, $ed, $ed, $ff, $ff, $f7, $ed, $ed, $ed, $f7, $ff, $f7
1a96e     F3 F7 FF F7 
1a972     F7 ED F7 00 
1a976     00 00 F7 F3 
1a97a     FF FF 00 00 | 	byte	$f3, $f7, $ff, $f7, $f7, $ed, $f7, $00, $00, $00, $f7, $f3, $ff, $ff, $00, $00
1a97e     FF FF 00 FF 
1a982     FF F7 FF FF 
1a986     FF FF FF F7 
1a98a     F7 F7 F3 F7 | 	byte	$ff, $ff, $00, $ff, $ff, $f7, $ff, $ff, $ff, $ff, $ff, $f7, $f7, $f7, $f3, $f7
1a98e     F7 F3 F3 F7 
1a992     EA EA FF ED 
1a996     ED ED ED E4 
1a99a     EA EA EA ED | 	byte	$f7, $f3, $f3, $f7, $ea, $ea, $ff, $ed, $ed, $ed, $ed, $e4, $ea, $ea, $ea, $ed
1a99e     F3 F3 F7 E4 
1a9a2     D8 DF ED F3 
1a9a6     ED E4 EA D8 
1a9aa     EA F3 EA DF | 	byte	$f3, $f3, $f7, $e4, $d8, $df, $ed, $f3, $ed, $e4, $ea, $d8, $ea, $f3, $ea, $df
1a9ae     EA ED DF EA 
1a9b2     ED E4 D8 EA 
1a9b6     EA EA ED E4 
1a9ba     E4 E4 ED EA | 	byte	$ea, $ed, $df, $ea, $ed, $e4, $d8, $ea, $ea, $ea, $ed, $e4, $e4, $e4, $ed, $ea
1a9be     ED ED ED F7 
1a9c2     F3 ED ED F7 
1a9c6     FF F3 ED ED 
1a9ca     F7 F7 F7 ED | 	byte	$ed, $ed, $ed, $f7, $f3, $ed, $ed, $f7, $ff, $f3, $ed, $ed, $f7, $f7, $f7, $ed
1a9ce     EA F7 F7 F7 
1a9d2     ED ED ED F7 
1a9d6     FF ED F3 F7 
1a9da     F7 F7 F3 ED | 	byte	$ea, $f7, $f7, $f7, $ed, $ed, $ed, $f7, $ff, $ed, $f3, $f7, $f7, $f7, $f3, $ed
1a9de     F3 F3 F3 F7 
1a9e2     ED EA EA F7 
1a9e6     F7 F3 ED F7 
1a9ea     F7 F3 F3 F7 | 	byte	$f3, $f3, $f3, $f7, $ed, $ea, $ea, $f7, $f7, $f3, $ed, $f7, $f7, $f3, $f3, $f7
1a9ee     ED ED F7 FF 
1a9f2     F3 ED F7 FF 
1a9f6     F3 FF 00 00 
1a9fa     FF FF F7 FF | 	byte	$ed, $ed, $f7, $ff, $f3, $ed, $f7, $ff, $f3, $ff, $00, $00, $ff, $ff, $f7, $ff
1a9fe     00 00 FF 00 
1aa02     00 00 00 FF 
1aa06     FF FF FF F7 
1aa0a     00 F7 00 00 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $ff, $ff, $ff, $ff, $f7, $00, $f7, $00, $00
1aa0e     F7 F3 F7 F7 
1aa12     EA EA F7 F3 
1aa16     ED ED EA E4 
1aa1a     ED ED D8 DF | 	byte	$f7, $f3, $f7, $f7, $ea, $ea, $f7, $f3, $ed, $ed, $ea, $e4, $ed, $ed, $d8, $df
1aa1e     ED EA EA ED 
1aa22     EA E4 EA DF 
1aa26     E4 EA E4 DF 
1aa2a     EA ED E4 E4 | 	byte	$ed, $ea, $ea, $ed, $ea, $e4, $ea, $df, $e4, $ea, $e4, $df, $ea, $ed, $e4, $e4
1aa2e     E4 EA ED ED 
1aa32     E4 D8 EA F3 
1aa36     ED ED E4 D8 
1aa3a     E4 ED DF DF | 	byte	$e4, $ea, $ed, $ed, $e4, $d8, $ea, $f3, $ed, $ed, $e4, $d8, $e4, $ed, $df, $df
1aa3e     EA ED E4 E4 
1aa42     E4 DF EA ED 
1aa46     EA EA EA ED 
1aa4a     ED ED ED EA | 	byte	$ea, $ed, $e4, $e4, $e4, $df, $ea, $ed, $ea, $ea, $ea, $ed, $ed, $ed, $ed, $ea
1aa4e     ED F3 ED ED 
1aa52     ED E4 EA ED 
1aa56     F7 F7 F7 FF 
1aa5a     F3 F7 F7 F7 | 	byte	$ed, $f3, $ed, $ed, $ed, $e4, $ea, $ed, $f7, $f7, $f7, $ff, $f3, $f7, $f7, $f7
1aa5e     F3 F7 F7 F7 
1aa62     F7 FF F3 F3 
1aa66     F3 F7 F7 F7 
1aa6a     FF 00 F3 F7 | 	byte	$f3, $f7, $f7, $f7, $f7, $ff, $f3, $f3, $f3, $f7, $f7, $f7, $ff, $00, $f3, $f7
1aa6e     F3 F3 FF F7 
1aa72     F7 FF F7 F7 
1aa76     ED F7 ED F3 
1aa7a     F7 ED EA ED | 	byte	$f3, $f3, $ff, $f7, $f7, $ff, $f7, $f7, $ed, $f7, $ed, $f3, $f7, $ed, $ea, $ed
1aa7e     F3 F7 F7 F3 
1aa82     ED ED FF F7 
1aa86     F3 F7 F3 FF 
1aa8a     FF FF FF F7 | 	byte	$f3, $f7, $f7, $f3, $ed, $ed, $ff, $f7, $f3, $f7, $f3, $ff, $ff, $ff, $ff, $f7
1aa8e     FF 00 FF FF 
1aa92     F7 F3 FF F7 
1aa96     ED FF FF F3 
1aa9a     ED F7 ED EA | 	byte	$ff, $00, $ff, $ff, $f7, $f3, $ff, $f7, $ed, $ff, $ff, $f3, $ed, $f7, $ed, $ea
1aa9e     ED ED ED ED 
1aaa2     ED          | 	byte	$ed[5]
1aaa3     EA E4 EA EA 
1aaa7     ED E4 DF DF 
1aaab     E4 DF DF DF 
1aaaf     DF D8 D8 E4 | 	byte	$ea, $e4, $ea, $ea, $ed, $e4, $df, $df, $e4, $df, $df, $df, $df, $d8, $d8, $e4
1aab3     DF DF DF D8 
1aab7     DF E4 D8 DF 
1aabb     EA EA E4 DF 
1aabf     E4 DF DF EA | 	byte	$df, $df, $df, $d8, $df, $e4, $d8, $df, $ea, $ea, $e4, $df, $e4, $df, $df, $ea
1aac3     EA E4 EA ED 
1aac7     EA EA F3 F7 
1aacb     F7 EA F3 F3 
1aacf     ED F3 ED ED | 	byte	$ea, $e4, $ea, $ed, $ea, $ea, $f3, $f7, $f7, $ea, $f3, $f3, $ed, $f3, $ed, $ed
1aad3     F7 FF FF 00 
1aad7     FF F7 00 00 
1aadb     FF 00 00 00 
1aadf     00 00 00 00 | 	byte	$f7, $ff, $ff, $00, $ff, $f7, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00
1aae3     00 00 00 00 
1aae7     00 00 00 00 
1aaeb     00 00 00 00 
1aaef     00 00 00 00 
1aaf3     00          | 	byte	$00[17]
1aaf4     FF 00 00 00 
1aaf8     FF 00 00 FF 
1aafc     00 FF FF FF 
1ab00     FF F7 F7 F3 | 	byte	$ff, $00, $00, $00, $ff, $00, $00, $ff, $00, $ff, $ff, $ff, $ff, $f7, $f7, $f3
1ab04     00 FF F3 F3 
1ab08     F3 F3 FF F7 
1ab0c     F3 ED ED ED 
1ab10     ED E4 DF DF | 	byte	$00, $ff, $f3, $f3, $f3, $f3, $ff, $f7, $f3, $ed, $ed, $ed, $ed, $e4, $df, $df
1ab14     E4 E4 E4 DF 
1ab18     DF DF E4 E4 
1ab1c     DF DF DF D8 
1ab20     DF E4 E4 E4 | 	byte	$e4, $e4, $e4, $df, $df, $df, $e4, $e4, $df, $df, $df, $d8, $df, $e4, $e4, $e4
1ab24     E4 EA E4 E4 
1ab28     E4 E4 ED F7 
1ab2c     F3 F7 F3 F3 
1ab30     F7 FF 00 FF | 	byte	$e4, $ea, $e4, $e4, $e4, $e4, $ed, $f7, $f3, $f7, $f3, $f3, $f7, $ff, $00, $ff
1ab34     F7 FF FF 00 
1ab38     00 FF FF FF 
1ab3c     00 00 FF FF 
1ab40     F7 FF FF F3 | 	byte	$f7, $ff, $ff, $00, $00, $ff, $ff, $ff, $00, $00, $ff, $ff, $f7, $ff, $ff, $f3
1ab44     F7 00 FF F3 
1ab48     F3 FF FF F3 
1ab4c     F7 F7 F7 F3 
1ab50     ED F3 F3 FF | 	byte	$f7, $00, $ff, $f3, $f3, $ff, $ff, $f3, $f7, $f7, $f7, $f3, $ed, $f3, $f3, $ff
1ab54     00 FF FF F3 
1ab58     F7 FF FF FF 
1ab5c     FF FF FF 00 
1ab60     00 FF FF 00 | 	byte	$00, $ff, $ff, $f3, $f7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $ff, $ff, $00
1ab64     00 FF FF FF 
1ab68     FF FF FF FF 
1ab6c     F7 00 FF FF 
1ab70     FF F7 F7 00 | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $f7, $00, $ff, $ff, $ff, $f7, $f7, $00
1ab74     FF FF F7 F7 
1ab78     F3 F7 FF FF 
1ab7c     FF F7 F3 FF 
1ab80     F3 F7 F3 FF | 	byte	$ff, $ff, $f7, $f7, $f3, $f7, $ff, $ff, $ff, $f7, $f3, $ff, $f3, $f7, $f3, $ff
1ab84     FF FF F7 F3 
1ab88     ED F3 FF F3 
1ab8c     F7 F3 F3 ED 
1ab90     ED ED ED ED | 	byte	$ff, $ff, $f7, $f3, $ed, $f3, $ff, $f3, $f7, $f3, $f3, $ed, $ed, $ed, $ed, $ed
1ab94     EA F3 F7 F3 
1ab98     ED E4 F3 F7 
1ab9c     F3 F3 ED ED 
1aba0     F3 F7 F3 F3 | 	byte	$ea, $f3, $f7, $f3, $ed, $e4, $f3, $f7, $f3, $f3, $ed, $ed, $f3, $f7, $f3, $f3
1aba4     F3 ED E4 F3 
1aba8     F7 F3 F3 F3 
1abac     F3 F3 F3 F3 
1abb0     F3 F3 F3 F3 | 	byte	$f3, $ed, $e4, $f3, $f7, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3
1abb4     F3 F7 F3 F7 
1abb8     F3 F3 F3 F3 
1abbc     F3 F3 F3 F3 
1abc0     F3 F3 F3 F3 | 	byte	$f3, $f7, $f3, $f7, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3, $f3
1abc4     F7 F3 F3 F3 
1abc8     F3 F7 F7 F7 
1abcc     FF F7 F7 FF 
1abd0     00 FF F7 FF | 	byte	$f7, $f3, $f3, $f3, $f3, $f7, $f7, $f7, $ff, $f7, $f7, $ff, $00, $ff, $f7, $ff
1abd4     FF F7 FF 00 
1abd8     00 FF F7 FF 
1abdc     00 00 FF FF 
1abe0     00 00 FF 00 | 	byte	$ff, $f7, $ff, $00, $00, $ff, $f7, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $00
1abe4     FF 00 00 00 
1abe8     00 FF 00 00 
1abec     00 00 00 FF 
1abf0     F7 F7 FF FF | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $00, $00, $00, $ff, $f7, $f7, $ff, $ff
1abf4     FF F7 F7 F3 
1abf8     F7 F7 F3 F3 
1abfc     F3 F7 ED F3 
1ac00     ED ED ED ED | 	byte	$ff, $f7, $f7, $f3, $f7, $f7, $f3, $f3, $f3, $f7, $ed, $f3, $ed, $ed, $ed, $ed
1ac04     F3 ED ED ED 
1ac08     F3 ED ED F3 
1ac0c     F3 F3 F3 F3 
1ac10     F3 ED F3 F7 | 	byte	$f3, $ed, $ed, $ed, $f3, $ed, $ed, $f3, $f3, $f3, $f3, $f3, $f3, $ed, $f3, $f7
1ac14     F7 F7 F7 F7 
1ac18     F3 F3 F7 F7 
1ac1c     F7 F7 F3 F7 
1ac20     F7 F7 F7 F7 | 	byte	$f7, $f7, $f7, $f7, $f3, $f3, $f7, $f7, $f7, $f7, $f3, $f7, $f7, $f7, $f7, $f7
1ac24     F7 F7 F7 FF 
1ac28     FF F7 F7 FF 
1ac2c     FF 00 00 00 
1ac30     FF FF 00 00 | 	byte	$f7, $f7, $f7, $ff, $ff, $f7, $f7, $ff, $ff, $00, $00, $00, $ff, $ff, $00, $00
1ac34     00 00 FF 00 
1ac38     00 00 00 00 
1ac3c     00 00 00 FF 
1ac40     F7 FF 00 00 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $f7, $ff, $00, $00
1ac44     00 FF FF FF 
1ac48     F7 FF F7 F7 
1ac4c     FF FF FF FF 
1ac50     FF F3 F3 FF | 	byte	$00, $ff, $ff, $ff, $f7, $ff, $f7, $f7, $ff, $ff, $ff, $ff, $ff, $f3, $f3, $ff
1ac54     FF F7 F3 F3 
1ac58     F3 F7 F7 F7 
1ac5c     F3 F3 F7 F3 
1ac60     F3 F3 F3 ED | 	byte	$ff, $f7, $f3, $f3, $f3, $f7, $f7, $f7, $f3, $f3, $f7, $f3, $f3, $f3, $f3, $ed
1ac64     F3 F3 F7 F3 
1ac68     F3 F3 F3 F7 
1ac6c     F3 ED F3 F7 
1ac70     F7 F3 ED F3 | 	byte	$f3, $f3, $f7, $f3, $f3, $f3, $f3, $f7, $f3, $ed, $f3, $f7, $f7, $f3, $ed, $f3
1ac74     F7 F7 F7 F3 
1ac78     F7 F7 F7 F7 
1ac7c     F7 F7 F7 FF 
1ac80     FF FF FF F7 | 	byte	$f7, $f7, $f7, $f3, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $ff, $ff, $ff, $ff, $f7
1ac84     F7 FF 00 00 
1ac88     FF FF F7 FF 
1ac8c     00 FF 00 00 
1ac90     FF FF 00 00 | 	byte	$f7, $ff, $00, $00, $ff, $ff, $f7, $ff, $00, $ff, $00, $00, $ff, $ff, $00, $00
1ac94     00 00 00 FF 
1ac98     FF FF FF FF 
1ac9c     FF FF FF FF 
1aca0     FF F7 FF 00 | 	byte	$00, $00, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $f7, $ff, $00
1aca4     FF FF FF FF 
1aca8     F7 F7 F7 FF 
1acac     F7 F7 F7 FF 
1acb0     F7 F7 FF F7 | 	byte	$ff, $ff, $ff, $ff, $f7, $f7, $f7, $ff, $f7, $f7, $f7, $ff, $f7, $f7, $ff, $f7
1acb4     F7 FF FF FF 
1acb8     FF FF F7 FF 
1acbc     FF F7 F7 FF 
1acc0     FF FF F7 F7 | 	byte	$f7, $ff, $ff, $ff, $ff, $ff, $f7, $ff, $ff, $f7, $f7, $ff, $ff, $ff, $f7, $f7
1acc4     F7 FF F7 F7 
1acc8     F7 F7 F7 F7 
1accc     F7 F7 FF F7 
1acd0     F7 F7 F7 F7 | 	byte	$f7, $ff, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $f7, $ff, $f7, $f7, $f7, $f7, $f7
1acd4     F7 F7 F7 F7 
1acd8     F7 F7 F7    | 	byte	$f7[7]
1acdb     FF F7 F7 FF 
1acdf     F7 F7 F7 FF 
1ace3     FF FF FF FF 
1ace7     FF FF FF FF | 	byte	$ff, $f7, $f7, $ff, $f7, $f7, $f7, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1aceb     FF FF FF 00 
1acef     FF FF FF 00 
1acf3     FF FF FF FF 
1acf7     FF FF FF FF | 	byte	$ff, $ff, $ff, $00, $ff, $ff, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1acfb     FF 00 00 00 
1acff     00 00 00 00 
1ad03     00 00 00 00 
1ad07     00 00 00 00 | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ad0b     00 00 00 00 
1ad0f     00 00 00 00 
1ad13     00 00 00 00 
1ad17     00 00 00 00 
1ad1b     00 00 00 00 
1ad1f     00          | 	byte	$00[21]
1ad20     FF FF FF FF 
1ad24     00 FF FF F7 
1ad28     FF FF FF FF 
1ad2c     FF FF FF FF | 	byte	$ff, $ff, $ff, $ff, $00, $ff, $ff, $f7, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1ad30     F7 F7 F7 FF 
1ad34     FF FF F7 FF 
1ad38     FF F7 F7 FF 
1ad3c     FF FF F7 FF | 	byte	$f7, $f7, $f7, $ff, $ff, $ff, $f7, $ff, $ff, $f7, $f7, $ff, $ff, $ff, $f7, $ff
1ad40     F7 FF FF F7 
1ad44     FF FF FF F7 
1ad48     F7 FF FF FF 
1ad4c     FF FF FF FF | 	byte	$f7, $ff, $ff, $f7, $ff, $ff, $ff, $f7, $f7, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1ad50     FF FF FF FF 
1ad54     FF FF FF FF 
1ad58     FF FF FF FF 
1ad5c     FF FF FF FF 
1ad60     FF FF FF FF 
1ad64     FF          | 	byte	$ff[21]
1ad65     00 FF FF FF 
1ad69     FF FF 00 00 
1ad6d     FF FF 00 00 
1ad71     00 00 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $00, $00
1ad75     00 00 00 00 
1ad79     00          | 	byte	$00[5]
1ad7a     FF 00 00 00 
1ad7e     00 00 00 00 
1ad82     00 00 FF FF 
1ad86     00 00 00 00 | 	byte	$ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff, $00, $00, $00, $00
1ad8a     FF 00 00 00 
1ad8e     00 FF FF FF 
1ad92     00 00 00 FF 
1ad96     FF FF FF FF | 	byte	$ff, $00, $00, $00, $00, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $ff
1ad9a     FF FF FF FF 
1ad9e     FF FF FF FF 
1ada2     FF FF FF    | 	byte	$ff[11]
1ada5     00 00 FF FF 
1ada9     FF 00 00 00 
1adad     00 00 FF 00 
1adb1     FF FF FF FF | 	byte	$00, $00, $ff, $ff, $ff, $00, $00, $00, $00, $00, $ff, $00, $ff, $ff, $ff, $ff
1adb5     FF FF FF 00 
1adb9     FF FF FF 00 
1adbd     FF FF FF FF 
1adc1     FF FF FF FF | 	byte	$ff, $ff, $ff, $00, $ff, $ff, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1adc5     FF FF 00 FF 
1adc9     FF FF FF FF 
1adcd     FF FF FF FF 
1add1     FF FF FF 00 | 	byte	$ff, $ff, $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00
1add5     00 FF FF FF 
1add9     FF FF FF FF 
1addd     00 00 00 FF 
1ade1     FF FF 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $00, $00
1ade5     00 FF FF 00 
1ade9     FF FF 00 00 
1aded     FF 00 00 00 
1adf1     00 00 00 00 | 	byte	$00, $ff, $ff, $00, $ff, $ff, $00, $00, $ff, $00, $00, $00, $00, $00, $00, $00
1adf5     00 00 00 00 
      ...             
1ae29     00 00 00 00 
1ae2d     00 00 00 00 | 	byte	$00[60]
1ae31     FF FF FF FF 
1ae35     FF FF FF FF 
1ae39     FF FF FF FF 
1ae3d     FF FF FF FF | 	byte	$ff[16]
1ae41     00 FF FF FF 
1ae45     FF FF FF 00 
1ae49     FF FF 00 FF 
1ae4d     00 00 00 00 | 	byte	$00, $ff, $ff, $ff, $ff, $ff, $ff, $00, $ff, $ff, $00, $ff, $00, $00, $00, $00
1ae51     00 00 00 00 
      ...             
1aed1     00 00 00 00 
1aed5     00 00 00    | 	byte	$00[135]
1aed8     F7 08 E5 F0 
1aedc     15 D7 20 E1 
1aee0     FF 08 28 F1 
1aee4     08 DB 13 00 | 	byte	$f7, $08, $e5, $f0, $15, $d7, $20, $e1, $ff, $08, $28, $f1, $08, $db, $13, $00
1aee8     0F 00 E9 00 
1aeec     FF 21 10 E7 
1aef0     E0 EF 10 08 
1aef4     EB E4 CF FF | 	byte	$0f, $00, $e9, $00, $ff, $21, $10, $e7, $e0, $ef, $10, $08, $eb, $e4, $cf, $ff
1aef8     17 00 FF F2 
1aefc     F8 FF 00 D7 
1af00     F0 D7 10 0B 
1af04     00 00 BF 00 | 	byte	$17, $00, $ff, $f2, $f8, $ff, $00, $d7, $f0, $d7, $10, $0b, $00, $00, $bf, $00
1af08     F7 E8 1F D0 
1af0c     27 00 E3 00 
1af10     ED 1F 1B 00 
1af14     0F 00 1B DD | 	byte	$f7, $e8, $1f, $d0, $27, $00, $e3, $00, $ed, $1f, $1b, $00, $0f, $00, $1b, $dd
1af18     F8 FF 00 17 
1af1c     09 00 EB E5 
1af20     E6 2A F7 00 
1af24     FB DF 20 DF | 	byte	$f8, $ff, $00, $17, $09, $00, $eb, $e5, $e6, $2a, $f7, $00, $fb, $df, $20, $df
1af28     00 E7 0E 07 
1af2c     14 FE E4 FF 
1af30     D0 FF 01 20 
1af34     DC F3 E4 FD | 	byte	$00, $e7, $0e, $07, $14, $fe, $e4, $ff, $d0, $ff, $01, $20, $dc, $f3, $e4, $fd
1af38     F7 00 15 F8 
1af3c     D6 34 ED 18 
1af40     F3 E0 1F 08 
1af44     20 E7 08 E7 | 	byte	$f7, $00, $15, $f8, $d6, $34, $ed, $18, $f3, $e0, $1f, $08, $20, $e7, $08, $e7
1af48     E0 F7 FC 07 
1af4c     00 30 C9 0A 
1af50     BF 08 FF F1 
1af54     00 FF F1 14 | 	byte	$e0, $f7, $fc, $07, $00, $30, $c9, $0a, $bf, $08, $ff, $f1, $00, $ff, $f1, $14
1af58     E0 F9 F3 FF 
1af5c     18 11 F0 CF 
1af60     FC F8 FF C1 
1af64     30 DF 08 00 | 	byte	$e0, $f9, $f3, $ff, $18, $11, $f0, $cf, $fc, $f8, $ff, $c1, $30, $df, $08, $00
1af68     FF F0 FF FB 
1af6c     40 FF F0 E0 
1af70     FF 14 F7 1F 
1af74     00 FF 00 FC | 	byte	$ff, $f0, $ff, $fb, $40, $ff, $f0, $e0, $ff, $14, $f7, $1f, $00, $ff, $00, $fc
1af78     FF E4 FB 08 
1af7c     EB 1F A0 2C 
1af80     E7 E0 40 DF 
1af84     F0 FF 0C F7 | 	byte	$ff, $e4, $fb, $08, $eb, $1f, $a0, $2c, $e7, $e0, $40, $df, $f0, $ff, $0c, $f7
1af88     F0 F7 DB 00 
1af8c     0F 10 DF F0 
1af90     E7 0F 10 FD 
1af94     F8 CB 1B 04 | 	byte	$f0, $f7, $db, $00, $0f, $10, $df, $f0, $e7, $0f, $10, $fd, $f8, $cb, $1b, $04
1af98     0F 00 CF FF 
1af9c     2F 00 00 EF 
1afa0     D7 1F 17 20 
1afa4     F3 FA DE F7 | 	byte	$0f, $00, $cf, $ff, $2f, $00, $00, $ef, $d7, $1f, $17, $20, $f3, $fa, $de, $f7
1afa8     0B E8 EF F1 
1afac     0B 19 10 CA 
1afb0     FF EF F4 20 
1afb4     F7 00 F8 DF | 	byte	$0b, $e8, $ef, $f1, $0b, $19, $10, $ca, $ff, $ef, $f4, $20, $f7, $00, $f8, $df
1afb8     E0 20 FF 00 
1afbc     EF 08 0C 01 
1afc0     F0 FF F2 0B 
1afc4     FD 14 00 F0 | 	byte	$e0, $20, $ff, $00, $ef, $08, $0c, $01, $f0, $ff, $f2, $0b, $fd, $14, $00, $f0
1afc8     EF F7 14 FF 
1afcc     05 00 F8 DF 
1afd0     E0 1F D7 F8 
1afd4     17 E0 FF D7 | 	byte	$ef, $f7, $14, $ff, $05, $00, $f8, $df, $e0, $1f, $d7, $f8, $17, $e0, $ff, $d7
1afd8     08 EB 00 EF 
1afdc     00 1F 08 CB 
1afe0     FD 04 EF 20 
1afe4     F0 F5 FE 23 | 	byte	$08, $eb, $00, $ef, $00, $1f, $08, $cb, $fd, $04, $ef, $20, $f0, $f5, $fe, $23
1afe8     0A E2 0F 07 
1afec     00 0F 22 D7 
1aff0     08 EB F8 16 
1aff4     FB 0C E4 15 | 	byte	$0a, $e2, $0f, $07, $00, $0f, $22, $d7, $08, $eb, $f8, $16, $fb, $0c, $e4, $15
1aff8     E0 EF 0B F0 
1affc     EF EC FF F8 
1b000     E7 FA E5 EC 
1b004     FF 10 FF F8 | 	byte	$e0, $ef, $0b, $f0, $ef, $ec, $ff, $f8, $e7, $fa, $e5, $ec, $ff, $10, $ff, $f8
1b008     DC FF 00 FB 
1b00c     10 E3 F7 22 
1b010     D5 35 00 DF 
1b014     28 F3 FB 1D | 	byte	$dc, $ff, $00, $fb, $10, $e3, $f7, $22, $d5, $35, $00, $df, $28, $f3, $fb, $1d
1b018     E0 18 EF FB 
1b01c     30 EF FC 00 
1b020     D7 0E 11 E8 
1b024     00 EF 10 E7 | 	byte	$e0, $18, $ef, $fb, $30, $ef, $fc, $00, $d7, $0e, $11, $e8, $00, $ef, $10, $e7
1b028     00 0C D5 09 
1b02c     FF F8 17 D7 
1b030     08 EF 05 04 
1b034     FF 00 FF DF | 	byte	$00, $0c, $d5, $09, $ff, $f8, $17, $d7, $08, $ef, $05, $04, $ff, $00, $ff, $df
1b038     20 F7 FF 08 
1b03c     FF F0 F1 10 
1b040     FF E8 FF ED 
1b044     17 00 D0 1E | 	byte	$20, $f7, $ff, $08, $ff, $f0, $f1, $10, $ff, $e8, $ff, $ed, $17, $00, $d0, $1e
1b048     DC F5 1B 00 
1b04c     07 F0 EF F4 
1b050     18 01 D5 02 
1b054     EF 19 00 1D | 	byte	$dc, $f5, $1b, $00, $07, $f0, $ef, $f4, $18, $01, $d5, $02, $ef, $19, $00, $1d
1b058     D0 07 F7 08 
1b05c     0B F0 E7 E5 
1b060     1F F6 F8 FF 
1b064     F1 F6 06 07 | 	byte	$d0, $07, $f7, $08, $0b, $f0, $e7, $e5, $1f, $f6, $f8, $ff, $f1, $f6, $06, $07
1b068     00 F3 ED 03 
1b06c     FF 20 EB F8 
1b070     0D F9 08 10 
1b074     D7 0A FF 0C | 	byte	$00, $f3, $ed, $03, $ff, $20, $eb, $f8, $0d, $f9, $08, $10, $d7, $0a, $ff, $0c
1b078     00 E8 EF 00 
1b07c     FB 00 0C E0 
1b080     FF E9 06 DD 
1b084     FF 13 E8 05 | 	byte	$00, $e8, $ef, $00, $fb, $00, $0c, $e0, $ff, $e9, $06, $dd, $ff, $13, $e8, $05
1b088     E7 F4 EF 14 
1b08c     DF 08 FF F8 
1b090     F0 FF 04 EF 
1b094     F4 23 00 08 | 	byte	$e7, $f4, $ef, $14, $df, $08, $ff, $f8, $f0, $ff, $04, $ef, $f4, $23, $00, $08
1b098     EB 07 00 FF 
1b09c     20 FD 00 EB 
1b0a0     00 EF 1E EB 
1b0a4     02 EF 10 ED | 	byte	$eb, $07, $00, $ff, $20, $fd, $00, $eb, $00, $ef, $1e, $eb, $02, $ef, $10, $ed
1b0a8     08 F6 E7 00 
1b0ac     EF 09 00 EF 
1b0b0     F8 F4 FF F8 
1b0b4     FC E8 FF 00 | 	byte	$08, $f6, $e7, $00, $ef, $09, $00, $ef, $f8, $f4, $ff, $f8, $fc, $e8, $ff, $00
1b0b8     09 FF 00 FD 
1b0bc     EF 0A F7 00 
1b0c0     04 00 F9 EB 
1b0c4     1F E8 0F F7 | 	byte	$09, $ff, $00, $fd, $ef, $0a, $f7, $00, $04, $00, $f9, $eb, $1f, $e8, $0f, $f7
1b0c8     F7 10 E7 EE 
1b0cc     FF F0 F7 F7 
1b0d0     08 02 F7 E8 
1b0d4     EF 02 1A E9 | 	byte	$f7, $10, $e7, $ee, $ff, $f0, $f7, $f7, $08, $02, $f7, $e8, $ef, $02, $1a, $e9
1b0d8     00 05 E9 07 
1b0dc     00 FF 00 FF 
1b0e0     08 02 FA FF 
1b0e4     F9 F4 FF F6 | 	byte	$00, $05, $e9, $07, $00, $ff, $00, $ff, $08, $02, $fa, $ff, $f9, $f4, $ff, $f6
1b0e8     FE F2 FF 00 
1b0ec     E7 06 F0 FF 
1b0f0     FB 04 E0 FC 
1b0f4     0F 00 EC FF | 	byte	$fe, $f2, $ff, $00, $e7, $06, $f0, $ff, $fb, $04, $e0, $fc, $0f, $00, $ec, $ff
1b0f8     00 EF 0F 00 
1b0fc     F3 F8 F9 08 
1b100     FA 13 F0 E9 
1b104     07 08 09 F0 | 	byte	$00, $ef, $0f, $00, $f3, $f8, $f9, $08, $fa, $13, $f0, $e9, $07, $08, $09, $f0
1b108     EB 03 FC FF 
1b10c     00 F2 EF 00 
1b110     FD FF 00 FD 
1b114     EF F8 07 EC | 	byte	$eb, $03, $fc, $ff, $00, $f2, $ef, $00, $fd, $ff, $00, $fd, $ef, $f8, $07, $ec
1b118     EE 0F 00 FF 
1b11c     F0 0F F4 F3 
1b120     0B 02 ED FF 
1b124     04 F7 10 EC | 	byte	$ee, $0f, $00, $ff, $f0, $0f, $f4, $f3, $0b, $02, $ed, $ff, $04, $f7, $10, $ec
1b128     F7 FF 0A 0C 
1b12c     E5 06 F6 F0 
1b130     0F E6 00 FF 
1b134     F0 00 07 F0 | 	byte	$f7, $ff, $0a, $0c, $e5, $06, $f6, $f0, $0f, $e6, $00, $ff, $f0, $00, $07, $f0
1b138     FC F3 03 08 
1b13c     E9 F0 EF 26 
1b140     F0 FF F7 04 
1b144     04 EF 08 FD | 	byte	$fc, $f3, $03, $08, $e9, $f0, $ef, $26, $f0, $ff, $f7, $04, $04, $ef, $08, $fd
1b148     10 EB FC FF 
1b14c     14 F0 ED 16 
1b150     E8 05 F8 FB 
1b154     F2 07 00 E1 | 	byte	$10, $eb, $fc, $ff, $14, $f0, $ed, $16, $e8, $05, $f8, $fb, $f2, $07, $00, $e1
1b158     0C F7 00 F0 
1b15c     EF FF 00 EF 
1b160     FF 08 ED FF 
1b164     05 F2 FF F8 | 	byte	$0c, $f7, $00, $f0, $ef, $ff, $00, $ef, $ff, $08, $ed, $ff, $05, $f2, $ff, $f8
1b168     F8 F7 1B F0 
1b16c     FD 00 FF 03 
1b170     FB 04 0F E8 
1b174     FF 00 F7 F5 | 	byte	$f8, $f7, $1b, $f0, $fd, $00, $ff, $03, $fb, $04, $0f, $e8, $ff, $00, $f7, $f5
1b178     06 F2 FF 00 
1b17c     E7 F0 07 05 
1b180     E0 0C F3 04 
1b184     F5 E9 0F F4 | 	byte	$06, $f2, $ff, $00, $e7, $f0, $07, $05, $e0, $0c, $f3, $04, $f5, $e9, $0f, $f4
1b188     FC F5 0A FA 
1b18c     FE E4 F3 0F 
1b190     04 FE EF 0A 
1b194     F1 08 F8 FB | 	byte	$fc, $f5, $0a, $fa, $fe, $e4, $f3, $0f, $04, $fe, $ef, $0a, $f1, $08, $f8, $fb
1b198     10 FF F8 FB 
1b19c     04 FB F2 F9 
1b1a0     07 04 F1 F7 
1b1a4     F4 FF F0 EF | 	byte	$10, $ff, $f8, $fb, $04, $fb, $f2, $f9, $07, $04, $f1, $f7, $f4, $ff, $f0, $ef
1b1a8     18 F8 F0 F5 
1b1ac     03 F8 FB FF 
1b1b0     00 F3 07 08 
1b1b4     E7 08 E6 0B | 	byte	$18, $f8, $f0, $f5, $03, $f8, $fb, $ff, $00, $f3, $07, $08, $e7, $08, $e6, $0b
1b1b8     03 04 F9 EB 
1b1bc     FF 03 03 10 
1b1c0     E2 05 00 FF 
1b1c4     FA FB F9 0A | 	byte	$03, $04, $f9, $eb, $ff, $03, $03, $10, $e2, $05, $00, $ff, $fa, $fb, $f9, $0a
1b1c8     EB 1A E8 06 
1b1cc     F7 F4 FF 06 
1b1d0     00 FB E9 1B 
1b1d4     F8 ED 06 F8 | 	byte	$eb, $1a, $e8, $06, $f7, $f4, $ff, $06, $00, $fb, $e9, $1b, $f8, $ed, $06, $f8
1b1d8     0B F0 EF F8 
1b1dc     0C F8 FF F3 
1b1e0     03 00 F8 FD 
1b1e4     00 F9 E4 F7 | 	byte	$0b, $f0, $ef, $f8, $0c, $f8, $ff, $f3, $03, $00, $f8, $fd, $00, $f9, $e4, $f7
1b1e8     17 F0 00 E7 
1b1ec     03 00 0F EE 
1b1f0     FC FF F8 FA 
1b1f4     0F 10 E6 FB | 	byte	$17, $f0, $00, $e7, $03, $00, $0f, $ee, $fc, $ff, $f8, $fa, $0f, $10, $e6, $fb
1b1f8     13 08 02 E7 
1b1fc     FB F7 03 F8 
1b200     F8 F9 FC FD 
1b204     00 FF F0 FC | 	byte	$13, $08, $02, $e7, $fb, $f7, $03, $f8, $f8, $f9, $fc, $fd, $00, $ff, $f0, $fc
1b208     DB 24 05 F0 
1b20c     EF F8 0A F8 
1b210     FA F9 01 FB 
1b214     00 FB 01 F8 | 	byte	$db, $24, $05, $f0, $ef, $f8, $0a, $f8, $fa, $f9, $01, $fb, $00, $fb, $01, $f8
1b218     EF 08 17 F0 
1b21c     FF EC 07 08 
1b220     F8 F2 FF F8 
1b224     F8 FC F9 F4 | 	byte	$ef, $08, $17, $f0, $ff, $ec, $07, $08, $f8, $f2, $ff, $f8, $f8, $fc, $f9, $f4
1b228     07 F0 07 00 
1b22c     FA EA FF 00 
1b230     F4 FC EF 10 
1b234     F7 08 F0 FD | 	byte	$07, $f0, $07, $00, $fa, $ea, $ff, $00, $f4, $fc, $ef, $10, $f7, $08, $f0, $fd
1b238     FE 00 F3 FB 
1b23c     09 F4 FF FA 
1b240     FA F9 08 00 
1b244     F3 05 F4 01 | 	byte	$fe, $00, $f3, $fb, $09, $f4, $ff, $fa, $fa, $f9, $08, $00, $f3, $05, $f4, $01
1b248     EF 11 EC FF 
1b24c     F8 0B F8 F8 
1b250     E7 F7 0F FA 
1b254     00 ED 00 F7 | 	byte	$ef, $11, $ec, $ff, $f8, $0b, $f8, $f8, $e7, $f7, $0f, $fa, $00, $ed, $00, $f7
1b258     03 00 F6 07 
1b25c     EC 0F FC FA 
1b260     F0 EF 04 01 
1b264     07 F4 F9 F7 | 	byte	$03, $00, $f6, $07, $ec, $0f, $fc, $fa, $f0, $ef, $04, $01, $07, $f4, $f9, $f7
1b268     0C ED FF FC 
1b26c     EF 06 ED 05 
1b270     00 F7 00 FF 
1b274     10 F2 F3 02 | 	byte	$0c, $ed, $ff, $fc, $ef, $06, $ed, $05, $00, $f7, $00, $ff, $10, $f2, $f3, $02
1b278     F8 FF FB FC 
1b27c     07 F4 F7 08 
1b280     FE F5 F4 08 
1b284     07 00 EF FB | 	byte	$f8, $ff, $fb, $fc, $07, $f4, $f7, $08, $fe, $f5, $f4, $08, $07, $00, $ef, $fb
1b288     00 0C E8 07 
1b28c     F3 04 F9 FD 
1b290     FC F9 FA F4 
1b294     FD 0C F4 F3 | 	byte	$00, $0c, $e8, $07, $f3, $04, $f9, $fd, $fc, $f9, $fa, $f4, $fd, $0c, $f4, $f3
1b298     FF 00 F7 F8 
1b29c     F7 FF 04 F1 
1b2a0     FF FB 14 E3 
1b2a4     FF FD 0C F3 | 	byte	$ff, $00, $f7, $f8, $f7, $ff, $04, $f1, $ff, $fb, $14, $e3, $ff, $fd, $0c, $f3
1b2a8     FD F2 07 00 
1b2ac     FB 0C FE 00 
1b2b0     EC 02 09 00 
1b2b4     E9 FD 02 FC | 	byte	$fd, $f2, $07, $00, $fb, $0c, $fe, $00, $ec, $02, $09, $00, $e9, $fd, $02, $fc
1b2b8     02 F9 F8 FC 
1b2bc     05 00 F5 00 
1b2c0     EC F8 FF FC 
1b2c4     FD F2 F6 F9 | 	byte	$02, $f9, $f8, $fc, $05, $00, $f5, $00, $ec, $f8, $ff, $fc, $fd, $f2, $f6, $f9
1b2c8     FF F8 F7 F9 
1b2cc     04 F3 FF F8 
1b2d0     FF F7 03 03 
1b2d4     F8 FD 03 FC | 	byte	$ff, $f8, $f7, $f9, $04, $f3, $ff, $f8, $ff, $f7, $03, $03, $f8, $fd, $03, $fc
1b2d8     FF 03 F6 0A 
1b2dc     FD 03 00 EF 
1b2e0     08 F3 FD 0C 
1b2e4     E7 F0 FF F9 | 	byte	$ff, $03, $f6, $0a, $fd, $03, $00, $ef, $08, $f3, $fd, $0c, $e7, $f0, $ff, $f9
1b2e8     FB FF F2 F2 
1b2ec     FB 0B F8 EF 
1b2f0     F4 F7 04 FC 
1b2f4     FC F8 FB 00 | 	byte	$fb, $ff, $f2, $f2, $fb, $0b, $f8, $ef, $f4, $f7, $04, $fc, $fc, $f8, $fb, $00
1b2f8     FF 08 F6 FB 
1b2fc     00 F5 10 0A 
1b300     E6 FF FB 0B 
1b304     01 FF 00 FF | 	byte	$ff, $08, $f6, $fb, $00, $f5, $10, $0a, $e6, $ff, $fb, $0b, $01, $ff, $00, $ff
1b308     F9 03 F0 07 
1b30c     F8 EF FD 01 
1b310     FA EC F1 FF 
1b314     FD 00 F7 F4 | 	byte	$f9, $03, $f0, $07, $f8, $ef, $fd, $01, $fa, $ec, $f1, $ff, $fd, $00, $f7, $f4
1b318     FD F8 FC FD 
1b31c     00 03 FC FA 
1b320     02 F3 FF F9 
1b324     0B 00 01 FA | 	byte	$fd, $f8, $fc, $fd, $00, $03, $fc, $fa, $02, $f3, $ff, $f9, $0b, $00, $01, $fa
1b328     FD FC FC F7 
1b32c     0F 00 F7 FE 
1b330     FC FE 00 F9 
1b334     FB 02 00 F4 | 	byte	$fd, $fc, $fc, $f7, $0f, $00, $f7, $fe, $fc, $fe, $00, $f9, $fb, $02, $00, $f4
1b338     FF F7 F8 F7 
1b33c     06 FA F9 F4 
1b340     EF 02 FE 00 
1b344     F5 FC 07 F9 | 	byte	$ff, $f7, $f8, $f7, $06, $fa, $f9, $f4, $ef, $02, $fe, $00, $f5, $fc, $07, $f9
1b348     F4 F7 03 F7 
1b34c     03 FD 00 F5 
1b350     FC FF FF 00 
1b354     EF FF FC 0C | 	byte	$f4, $f7, $03, $f7, $03, $fd, $00, $f5, $fc, $ff, $ff, $00, $ef, $ff, $fc, $0c
1b358     F7 F9 00 FF 
1b35c     08 FC F8 FD 
1b360     02 FE F8 FA 
1b364     F9 00 F9 05 | 	byte	$f7, $f9, $00, $ff, $08, $fc, $f8, $fd, $02, $fe, $f8, $fa, $f9, $00, $f9, $05
1b368     F8 F3 FC FA 
1b36c     FC F3 FA FC 
1b370     FC FC 00 F0 
1b374     FF 02 F7 03 | 	byte	$f8, $f3, $fc, $fa, $fc, $f3, $fa, $fc, $fc, $fc, $00, $f0, $ff, $02, $f7, $03
1b378     00 F2 FB FB 
1b37c     02 00 FE FB 
1b380     FB 08 FA F6 
1b384     FB 01 FB 00 | 	byte	$00, $f2, $fb, $fb, $02, $00, $fe, $fb, $fb, $08, $fa, $f6, $fb, $01, $fb, $00
1b388     FB 06 F6 FF 
1b38c     FC 00 FE F8 
1b390     FF F8 FA F9 
1b394     F3 01 01 00 | 	byte	$fb, $06, $f6, $ff, $fc, $00, $fe, $f8, $ff, $f8, $fa, $f9, $f3, $01, $01, $00
1b398     F1 FD FD 00 
1b39c     F2 FD 00 FE 
1b3a0     00 FC 03 F4 
1b3a4     F9 01 FE 07 | 	byte	$f1, $fd, $fd, $00, $f2, $fd, $00, $fe, $00, $fc, $03, $f4, $f9, $01, $fe, $07
1b3a8     00 EF FF 05 
1b3ac     00 FD 02 ED 
1b3b0     00 FF 00 F7 
1b3b4     F8 F7 F8 07 | 	byte	$00, $ef, $ff, $05, $00, $fd, $02, $ed, $00, $ff, $00, $f7, $f8, $f7, $f8, $07
1b3b8     FC F4 F5 FF 
1b3bc     FA FB FA FB 
1b3c0     FB FD 00 F9 
1b3c4     F5 FF FC FF | 	byte	$fc, $f4, $f5, $ff, $fa, $fb, $fa, $fb, $fb, $fd, $00, $f9, $f5, $ff, $fc, $ff
1b3c8     01 FC F6 FD 
1b3cc     00 FC FB FA 
1b3d0     00 FD 00 FA 
1b3d4     F7 FE 03 FA | 	byte	$01, $fc, $f6, $fd, $00, $fc, $fb, $fa, $00, $fd, $00, $fa, $f7, $fe, $03, $fa
1b3d8     FE F6 FC FE 
1b3dc     FE F8 FC F6 
1b3e0     FF 00 FF F9 
1b3e4     ED 07 FE 01 | 	byte	$fe, $f6, $fc, $fe, $fe, $f8, $fc, $f6, $ff, $00, $ff, $f9, $ed, $07, $fe, $01
1b3e8     FD F0 FD 00 
1b3ec     FF F8 02 F6 
1b3f0     FF FC 00 FF 
1b3f4     FA F6 FD 07 | 	byte	$fd, $f0, $fd, $00, $ff, $f8, $02, $f6, $ff, $fc, $00, $ff, $fa, $f6, $fd, $07
1b3f8     00 F5 F7 FF 
1b3fc     FF 00 FB 00 
1b400     FE F5 FA FC 
1b404     FC FD FA FF | 	byte	$00, $f5, $f7, $ff, $ff, $00, $fb, $00, $fe, $f5, $fa, $fc, $fc, $fd, $fa, $ff
1b408     01 F8 ED 03 
1b40c     00 FC FA FD 
1b410     00 FE F8 F9 
1b414     00 FD F9 FE | 	byte	$01, $f8, $ed, $03, $00, $fc, $fa, $fd, $00, $fe, $f8, $f9, $00, $fd, $f9, $fe
1b418     FF FA F9 00 
1b41c     FF 00 00 F8 
1b420     FC 03 F8 FC 
1b424     F7 00 FE FC | 	byte	$ff, $fa, $f9, $00, $ff, $00, $00, $f8, $fc, $03, $f8, $fc, $f7, $00, $fe, $fc
1b428     00 FE F8 FB 
1b42c     F9 FE FD FC 
1b430     F6 03 00 ED 
1b434     FD FF 04 F9 | 	byte	$00, $fe, $f8, $fb, $f9, $fe, $fd, $fc, $f6, $03, $00, $ed, $fd, $ff, $04, $f9
1b438     FE 00 FA F7 
1b43c     00 F6 FF FF 
1b440     FC FE FE FC 
1b444     F9 FC 05 FC | 	byte	$fe, $00, $fa, $f7, $00, $f6, $ff, $ff, $fc, $fe, $fe, $fc, $f9, $fc, $05, $fc
1b448     FB FA F7 FE 
1b44c     FD FC FB 01 
1b450     FA FE FD F9 
1b454     FD FC FD FF | 	byte	$fb, $fa, $f7, $fe, $fd, $fc, $fb, $01, $fa, $fe, $fd, $f9, $fd, $fc, $fd, $ff
1b458     FE F7 01 FC 
1b45c     FB FC F9 FF 
1b460     FF 00 F8 FB 
1b464     00 F8 00 FA | 	byte	$fe, $f7, $01, $fc, $fb, $fc, $f9, $ff, $ff, $00, $f8, $fb, $00, $f8, $00, $fa
1b468     F4 FF 00 FE 
1b46c     F8 FC FB 03 
1b470     FC 02 F8 F9 
1b474     FC FD 05 F8 | 	byte	$f4, $ff, $00, $fe, $f8, $fc, $fb, $03, $fc, $02, $f8, $f9, $fc, $fd, $05, $f8
1b478     FC F3 03 00 
1b47c     00 F3 FB 00 
1b480     FF FD FD F8 
1b484     FB FC FD FC | 	byte	$fc, $f3, $03, $00, $00, $f3, $fb, $00, $ff, $fd, $fd, $f8, $fb, $fc, $fd, $fc
1b488     FE F7 FE 00 
1b48c     FE FC F7 F9 
1b490     FF 00 FF FC 
1b494     FB F8 FF 00 | 	byte	$fe, $f7, $fe, $00, $fe, $fc, $f7, $f9, $ff, $00, $ff, $fc, $fb, $f8, $ff, $00
1b498     FD 00 F9 FE 
1b49c     FB 00 FA FA 
1b4a0     FF FC FA FC 
1b4a4     FF FA F3 00 | 	byte	$fd, $00, $f9, $fe, $fb, $00, $fa, $fa, $ff, $fc, $fa, $fc, $ff, $fa, $f3, $00
1b4a8     FF FB F9 FB 
1b4ac     FB 01 F8 FF 
1b4b0     FC FF FA F8 
1b4b4     FF 03 FA F7 | 	byte	$ff, $fb, $f9, $fb, $fb, $01, $f8, $ff, $fc, $ff, $fa, $f8, $ff, $03, $fa, $f7
1b4b8     FF 02 FC F7 
1b4bc     00 FC 01 FC 
1b4c0     F9 00 FB FC 
1b4c4     FA 02 FA FA | 	byte	$ff, $02, $fc, $f7, $00, $fc, $01, $fc, $f9, $00, $fb, $fc, $fa, $02, $fa, $fa
1b4c8     F8 FD FF 00 
1b4cc     F4 FB FE F9 
1b4d0     02 FB F8 F9 
1b4d4     F8 03 F8 FF | 	byte	$f8, $fd, $ff, $00, $f4, $fb, $fe, $f9, $02, $fb, $f8, $f9, $f8, $03, $f8, $ff
1b4d8     F6 FC FF FE 
1b4dc     FA FB 01 FE 
1b4e0     FD FE 00 F9 
1b4e4     FA FC 03 FE | 	byte	$f6, $fc, $ff, $fe, $fa, $fb, $01, $fe, $fd, $fe, $00, $f9, $fa, $fc, $03, $fe
1b4e8     FB FA FF 00 
1b4ec     F9 F7 FF FE 
1b4f0     FA FA FB FE 
1b4f4     F8 FC FF FC | 	byte	$fb, $fa, $ff, $00, $f9, $f7, $ff, $fe, $fa, $fa, $fb, $fe, $f8, $fc, $ff, $fc
1b4f8     FE FA FE 00 
1b4fc     FC F4 FF FC 
1b500     FE FB 00 F9 
1b504     FF FE FE FC | 	byte	$fe, $fa, $fe, $00, $fc, $f4, $ff, $fc, $fe, $fb, $00, $f9, $ff, $fe, $fe, $fc
1b508     FD FE 00 FD 
1b50c     FE F8 FB FE 
1b510     FE FF FC FB 
1b514     FD FB FA FE | 	byte	$fd, $fe, $00, $fd, $fe, $f8, $fb, $fe, $fe, $ff, $fc, $fb, $fd, $fb, $fa, $fe
1b518     FE F9 FC FF 
1b51c     00 F8 FD FC 
1b520     FB FF FE FB 
1b524     00 FA F7 02 | 	byte	$fe, $f9, $fc, $ff, $00, $f8, $fd, $fc, $fb, $ff, $fe, $fb, $00, $fa, $f7, $02
1b528     FD FC FB FB 
1b52c     FB FE 00 FB 
1b530     FB FB FF FD 
1b534     00 FE F5 FD | 	byte	$fd, $fc, $fb, $fb, $fb, $fe, $00, $fb, $fb, $fb, $ff, $fd, $00, $fe, $f5, $fd
1b538     FF 00 FB FB 
1b53c     FC FA FE 00 
1b540     FC FC FD F8 
1b544     00 FC F7 F9 | 	byte	$ff, $00, $fb, $fb, $fc, $fa, $fe, $00, $fc, $fc, $fd, $f8, $00, $fc, $f7, $f9
1b548     FD FB FF FE 
1b54c     FF FA FE FB 
1b550     FE 00 F9 FE 
1b554     FC 00 FA FA | 	byte	$fd, $fb, $ff, $fe, $ff, $fa, $fe, $fb, $fe, $00, $f9, $fe, $fc, $00, $fa, $fa
1b558     FC 00 FC FB 
1b55c     FA FE FE FD 
1b560     FC FE FE FE 
1b564     FF 00 F8 FB | 	byte	$fc, $00, $fc, $fb, $fa, $fe, $fe, $fd, $fc, $fe, $fe, $fe, $ff, $00, $f8, $fb
1b568     F8 03 00 FA 
1b56c     F7 FD FE 00 
1b570     F8 FD FB F9 
1b574     FC FE FD F8 | 	byte	$f8, $03, $00, $fa, $f7, $fd, $fe, $00, $f8, $fd, $fb, $f9, $fc, $fe, $fd, $f8
1b578     F9 02 FF 00 
1b57c     F9 F8 FE FF 
1b580     FF FE FE FA 
1b584     FE FC 00 FC | 	byte	$f9, $02, $ff, $00, $f9, $f8, $fe, $ff, $ff, $fe, $fe, $fa, $fe, $fc, $00, $fc
1b588     FB F9 FF 00 
1b58c     FE FB FA FF 
1b590     FB FC FE F8 
1b594     FE F9 FC FF | 	byte	$fb, $f9, $ff, $00, $fe, $fb, $fa, $ff, $fb, $fc, $fe, $f8, $fe, $f9, $fc, $ff
1b598     FC F8 FD FE 
1b59c     FF FD FC FC 
1b5a0     FE FA FE FF 
1b5a4     FE FA F6 FE | 	byte	$fc, $f8, $fd, $fe, $ff, $fd, $fc, $fc, $fe, $fa, $fe, $ff, $fe, $fa, $f6, $fe
1b5a8     01 FC FF FC 
1b5ac     FE FE FC FD 
1b5b0     FC F9 FF FE 
1b5b4     00 00 F5 FC | 	byte	$01, $fc, $ff, $fc, $fe, $fe, $fc, $fd, $fc, $f9, $ff, $fe, $00, $00, $f5, $fc
1b5b8     FC FF FF FE 
1b5bc     FA FC FA FE 
1b5c0     FA FB FC FE 
1b5c4     FE FE FD F9 | 	byte	$fc, $ff, $ff, $fe, $fa, $fc, $fa, $fe, $fa, $fb, $fc, $fe, $fe, $fe, $fd, $f9
1b5c8     FD FB 00 FF 
1b5cc     FA FE F9 FA 
1b5d0     FF 00 FD 00 
1b5d4     FC FA FC FB | 	byte	$fd, $fb, $00, $ff, $fa, $fe, $f9, $fa, $ff, $00, $fd, $00, $fc, $fa, $fc, $fb
1b5d8     FD FB FF 00 
1b5dc     FE 00 F8 FC 
1b5e0     FC 00 FF FC 
1b5e4     FB FD FB FA | 	byte	$fd, $fb, $ff, $00, $fe, $00, $f8, $fc, $fc, $00, $ff, $fc, $fb, $fd, $fb, $fa
1b5e8     FE FD FC FB 
1b5ec     FC FA FC FC 
1b5f0     FB FB FD FE 
1b5f4     FF FC FB FD | 	byte	$fe, $fd, $fc, $fb, $fc, $fa, $fc, $fc, $fb, $fb, $fd, $fe, $ff, $fc, $fb, $fd
1b5f8     FD 01 FE FE 
1b5fc     F8 FF FE 00 
1b600     FC FD F7 FC 
1b604     00 FF FC F8 | 	byte	$fd, $01, $fe, $fe, $f8, $ff, $fe, $00, $fc, $fd, $f7, $fc, $00, $ff, $fc, $f8
1b608     FC FE FC 00 
1b60c     FC FC FF FB 
1b610     FC FE FB FC 
1b614     FC FB 01 FE | 	byte	$fc, $fe, $fc, $00, $fc, $fc, $ff, $fb, $fc, $fe, $fb, $fc, $fc, $fb, $01, $fe
1b618     FC F9 FC FA 
1b61c     FE FE FB FB 
1b620     FA FC FA 00 
1b624     FD FC FC FF | 	byte	$fc, $f9, $fc, $fa, $fe, $fe, $fb, $fb, $fa, $fc, $fa, $00, $fd, $fc, $fc, $ff
1b628     FE F8 FC FB 
1b62c     FD FF 00 F8 
1b630     F8 FF FC 00 
1b634     FE F9 FE FF | 	byte	$fe, $f8, $fc, $fb, $fd, $ff, $00, $f8, $f8, $ff, $fc, $00, $fe, $f9, $fe, $ff
1b638     FD FD FC FC 
1b63c     FD FE FF FE 
1b640     FC F9 FE FF 
1b644     FE FD F9 FE | 	byte	$fd, $fd, $fc, $fc, $fd, $fe, $ff, $fe, $fc, $f9, $fe, $ff, $fe, $fd, $f9, $fe
1b648     FC FF FA F8 
1b64c     FC FC FD F9 
1b650     FF FC FC FC 
1b654     FC F9 FE F8 | 	byte	$fc, $ff, $fa, $f8, $fc, $fc, $fd, $f9, $ff, $fc, $fc, $fc, $fc, $f9, $fe, $f8
1b658     FF FE FC F9 
1b65c     FC FF 00 FC 
1b660     FB FE FF FE 
1b664     FC FC FB FE | 	byte	$ff, $fe, $fc, $f9, $fc, $ff, $00, $fc, $fb, $fe, $ff, $fe, $fc, $fc, $fb, $fe
1b668     FE FF FF F9 
1b66c     FF FF FE FE 
1b670     FB FA FA FD 
1b674     FD FD FA FE | 	byte	$fe, $ff, $ff, $f9, $ff, $ff, $fe, $fe, $fb, $fa, $fa, $fd, $fd, $fd, $fa, $fe
1b678     FB FF FC FC 
1b67c     FC FA FF FC 
1b680     FC FC FE FD 
1b684     FA FF FD FD | 	byte	$fb, $ff, $fc, $fc, $fc, $fa, $ff, $fc, $fc, $fc, $fe, $fd, $fa, $ff, $fd, $fd
1b688     FB FC FF FF 
1b68c     FC FC FC FC 
1b690     FE F9 FC 00 
1b694     00 FC FB 00 | 	byte	$fb, $fc, $ff, $ff, $fc, $fc, $fc, $fc, $fe, $f9, $fc, $00, $00, $fc, $fb, $00
1b698     FC FB FD FC 
1b69c     FE FE FC FC 
1b6a0     FB FC FC FE 
1b6a4     00 F9 FB FE | 	byte	$fc, $fb, $fd, $fc, $fe, $fe, $fc, $fc, $fb, $fc, $fc, $fe, $00, $f9, $fb, $fe
1b6a8     FF FD FB FA 
1b6ac     FB FF FE FB 
1b6b0     FA FC FE 00 
1b6b4     FC FD FB FC | 	byte	$ff, $fd, $fb, $fa, $fb, $ff, $fe, $fb, $fa, $fc, $fe, $00, $fc, $fd, $fb, $fc
1b6b8     FE FE FC F9 
1b6bc     FF FF FE FF 
1b6c0     FC FC FE FC 
1b6c4     FD FE FE FC | 	byte	$fe, $fe, $fc, $f9, $ff, $ff, $fe, $ff, $fc, $fc, $fe, $fc, $fd, $fe, $fe, $fc
1b6c8     FC FF FA FC 
1b6cc     FE FC FD FC 
1b6d0     FC FC FC F9 
1b6d4     FC FB FC FD | 	byte	$fc, $ff, $fa, $fc, $fe, $fc, $fd, $fc, $fc, $fc, $fc, $f9, $fc, $fb, $fc, $fd
1b6d8     FB FC FC FD 
1b6dc     FA FC FE FB 
1b6e0     FE FD FD FD 
1b6e4     FE FC FE FF | 	byte	$fb, $fc, $fc, $fd, $fa, $fc, $fe, $fb, $fe, $fd, $fd, $fd, $fe, $fc, $fe, $ff
1b6e8     FF FD FC FC 
1b6ec     FC FE 00 FF 
1b6f0     FC FC FA FC 
1b6f4     FF FC FC FB | 	byte	$ff, $fd, $fc, $fc, $fc, $fe, $00, $ff, $fc, $fc, $fa, $fc, $ff, $fc, $fc, $fb
1b6f8     FF FD FC FA 
1b6fc     FA FC FF FA 
1b700     FC FB FC FD 
1b704     FE FB FE FC | 	byte	$ff, $fd, $fc, $fa, $fa, $fc, $ff, $fa, $fc, $fb, $fc, $fd, $fe, $fb, $fe, $fc
1b708     FB FD 00 FE 
1b70c     FA FF FE FD 
1b710     FF FB FE FC 
1b714     FE FB FE FF | 	byte	$fb, $fd, $00, $fe, $fa, $ff, $fe, $fd, $ff, $fb, $fe, $fc, $fe, $fb, $fe, $ff
1b718     FC FA FE FD 
1b71c     FC FE FD FB 
1b720     FC FB FC FC 
1b724     FB F9 FC FF | 	byte	$fc, $fa, $fe, $fd, $fc, $fe, $fd, $fb, $fc, $fb, $fc, $fc, $fb, $f9, $fc, $ff
1b728     FF FD FA FD 
1b72c     FC FE FD 00 
1b730     F9 FB FD FD 
1b734     FD FD F9 FE | 	byte	$ff, $fd, $fa, $fd, $fc, $fe, $fd, $00, $f9, $fb, $fd, $fd, $fd, $fd, $f9, $fe
1b738     FF 00 F9 FC 
1b73c     FB FE 00 FE 
1b740     FC FC F9 FF 
1b744     FF FC FD FC | 	byte	$ff, $00, $f9, $fc, $fb, $fe, $00, $fe, $fc, $fc, $f9, $ff, $ff, $fc, $fd, $fc
1b748     FE FF FC FC 
1b74c     FC FF FE FD 
1b750     FE FC FC FD 
1b754     FC FD FF FE | 	byte	$fe, $ff, $fc, $fc, $fc, $ff, $fe, $fd, $fe, $fc, $fc, $fd, $fc, $fd, $ff, $fe
1b758     FE FB FC FB 
1b75c     FC FC FC FA 
1b760     FB FE FA FA 
1b764     FB FF FE FD | 	byte	$fe, $fb, $fc, $fb, $fc, $fc, $fc, $fa, $fb, $fe, $fa, $fa, $fb, $ff, $fe, $fd
1b768     FC FB FB FC 
1b76c     FD FF FE FE 
1b770     FB FE FF FC 
1b774     FD FE FD FD | 	byte	$fc, $fb, $fb, $fc, $fd, $ff, $fe, $fe, $fb, $fe, $ff, $fc, $fd, $fe, $fd, $fd
1b778     FE FC FC FC 
1b77c     FE FE FD FE 
1b780     FC FE FC FC 
1b784     FF FA FD FA | 	byte	$fe, $fc, $fc, $fc, $fe, $fe, $fd, $fe, $fc, $fe, $fc, $fc, $ff, $fa, $fd, $fa
1b788     FC FD FC FA 
1b78c     FC FD FE FD 
1b790     FC FD FD FC 
1b794     FC FE 00 FD | 	byte	$fc, $fd, $fc, $fa, $fc, $fd, $fe, $fd, $fc, $fd, $fd, $fc, $fc, $fe, $00, $fd
1b798     00 FC FC FC 
1b79c     FB FF FF FC 
1b7a0     FC FB FF FB 
1b7a4     FB FC FC FE | 	byte	$00, $fc, $fc, $fc, $fb, $ff, $ff, $fc, $fc, $fb, $ff, $fb, $fb, $fc, $fc, $fe
1b7a8     FC FC FC FB 
1b7ac     FC FC FE FC 
1b7b0     FE FC FD FA 
1b7b4     F9 FB FD FF | 	byte	$fc, $fc, $fc, $fb, $fc, $fc, $fe, $fc, $fe, $fc, $fd, $fa, $f9, $fb, $fd, $ff
1b7b8     FE FC FB FC 
1b7bc     FE FF FE FE 
1b7c0     FE FC FE FD 
1b7c4     FD FC FC FE | 	byte	$fe, $fc, $fb, $fc, $fe, $ff, $fe, $fe, $fe, $fc, $fe, $fd, $fd, $fc, $fc, $fe
1b7c8     FF FC FC FC 
1b7cc     FC FC FD FC 
1b7d0     FC FE FC FC 
1b7d4     FC FC FC FE | 	byte	$ff, $fc, $fc, $fc, $fc, $fc, $fd, $fc, $fc, $fe, $fc, $fc, $fc, $fc, $fc, $fe
1b7d8     FD FC FA FE 
1b7dc     FC FC FD FC 
1b7e0     FB FD FF FE 
1b7e4     FC FC FD FE | 	byte	$fd, $fc, $fa, $fe, $fc, $fc, $fd, $fc, $fb, $fd, $ff, $fe, $fc, $fc, $fd, $fe
1b7e8     FE FD FB FE 
1b7ec     FD FD FE FC 
1b7f0     FD FD FD FE 
1b7f4     FC FC FC FD | 	byte	$fe, $fd, $fb, $fe, $fd, $fd, $fe, $fc, $fd, $fd, $fd, $fe, $fc, $fc, $fc, $fd
1b7f8     FC FD FC FB 
1b7fc     FC FC FD FD 
1b800     FE FE FC FE 
1b804     FD FC FB FD | 	byte	$fc, $fd, $fc, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $fc, $fe, $fd, $fc, $fb, $fd
1b808     FE FD FD FC 
1b80c     FC FB FE FE 
1b810     FC FD FA FC 
1b814     FA FD FC FD | 	byte	$fe, $fd, $fd, $fc, $fc, $fb, $fe, $fe, $fc, $fd, $fa, $fc, $fa, $fd, $fc, $fd
1b818     FD FC FC FD 
1b81c     FF FF FC FD 
1b820     FD FE FF FE 
1b824     FC FC FC FD | 	byte	$fd, $fc, $fc, $fd, $ff, $ff, $fc, $fd, $fd, $fe, $ff, $fe, $fc, $fc, $fc, $fd
1b828     FE FD FA FA 
1b82c     FF FE FC FD 
1b830     FA FB FD FD 
1b834     FC FC FB FC | 	byte	$fe, $fd, $fa, $fa, $ff, $fe, $fc, $fd, $fa, $fb, $fd, $fd, $fc, $fc, $fb, $fc
1b838     FE FE FC FB 
1b83c     FB FD FC FC 
1b840     FE FD FC FD 
1b844     FF FE FC FC | 	byte	$fe, $fe, $fc, $fb, $fb, $fd, $fc, $fc, $fe, $fd, $fc, $fd, $ff, $fe, $fc, $fc
1b848     FE FF FE FE 
1b84c     FD FE FC FD 
1b850     FE FE FC FB 
1b854     FC FC FC FB | 	byte	$fe, $ff, $fe, $fe, $fd, $fe, $fc, $fd, $fe, $fe, $fc, $fb, $fc, $fc, $fc, $fb
1b858     FC FA FD FC 
1b85c     FB FB FA FC 
1b860     FC FE FD FE 
1b864     FB FB FC FD | 	byte	$fc, $fa, $fd, $fc, $fb, $fb, $fa, $fc, $fc, $fe, $fd, $fe, $fb, $fb, $fc, $fd
1b868     FF FE FE FC 
1b86c     FD FF FD FC 
1b870     FD FD FE FE 
1b874     FD FC FC FD | 	byte	$ff, $fe, $fe, $fc, $fd, $ff, $fd, $fc, $fd, $fd, $fe, $fe, $fd, $fc, $fc, $fd
1b878     FE FF FE FC 
1b87c     FB FC FD FC 
1b880     FD FC FB FD 
1b884     FD FC FC FB | 	byte	$fe, $ff, $fe, $fc, $fb, $fc, $fd, $fc, $fd, $fc, $fb, $fd, $fd, $fc, $fc, $fb
1b888     FC FC FC FD 
1b88c     FD FC FD FD 
1b890     FC FC FC FD 
1b894     FE 00 FE FB | 	byte	$fc, $fc, $fc, $fd, $fd, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fe, $00, $fe, $fb
1b898     FC FC FC FE 
1b89c     FE FD FC FE 
1b8a0     FB FC FD FE 
1b8a4     FC FE FE FC | 	byte	$fc, $fc, $fc, $fe, $fe, $fd, $fc, $fe, $fb, $fc, $fd, $fe, $fc, $fe, $fe, $fc
1b8a8     FB FC FC FD 
1b8ac     FE FE FD FC 
1b8b0     FB FC FE FE 
1b8b4     FE FD FD FC | 	byte	$fb, $fc, $fc, $fd, $fe, $fe, $fd, $fc, $fb, $fc, $fe, $fe, $fe, $fd, $fd, $fc
1b8b8     FA FB FC FE 
1b8bc     FE FE FC FC 
1b8c0     FD FE FE FC 
1b8c4     FD FD FD FD | 	byte	$fa, $fb, $fc, $fe, $fe, $fe, $fc, $fc, $fd, $fe, $fe, $fc, $fd, $fd, $fd, $fd
1b8c8     FC FB FC FD 
1b8cc     FE FF FC FC 
1b8d0     FC FD FD FC 
1b8d4     FC FC FD FD | 	byte	$fc, $fb, $fc, $fd, $fe, $ff, $fc, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fd, $fd
1b8d8     FE FC FC FC 
1b8dc     FC FE FD FD 
1b8e0     FC FC FD FC 
1b8e4     FB FC FD FE | 	byte	$fe, $fc, $fc, $fc, $fc, $fe, $fd, $fd, $fc, $fc, $fd, $fc, $fb, $fc, $fd, $fe
1b8e8     FD FE FD FC 
1b8ec     FC FF FF FD 
1b8f0     FC FB FC FE 
1b8f4     FD FC FC FE | 	byte	$fd, $fe, $fd, $fc, $fc, $ff, $ff, $fd, $fc, $fb, $fc, $fe, $fd, $fc, $fc, $fe
1b8f8     FD FD FC FC 
1b8fc     FC FD FE FD 
1b900     FD FC FB FD 
1b904     FD FD FE FC | 	byte	$fd, $fd, $fc, $fc, $fc, $fd, $fe, $fd, $fd, $fc, $fb, $fd, $fd, $fd, $fe, $fc
1b908     FE FD FD FD 
1b90c     FB FC FD FD 
1b910     FC FA FB FD 
1b914     FC FE FE FC | 	byte	$fe, $fd, $fd, $fd, $fb, $fc, $fd, $fd, $fc, $fa, $fb, $fd, $fc, $fe, $fe, $fc
1b918     FD FD FE FE 
1b91c     FE FC FC FD 
1b920     FE FC FC FD 
1b924     FF FE FD FD | 	byte	$fd, $fd, $fe, $fe, $fe, $fc, $fc, $fd, $fe, $fc, $fc, $fd, $ff, $fe, $fd, $fd
1b928     FC FD FB FB 
1b92c     FC FD FC FC 
1b930     FC FC FB FC 
1b934     FE FE FC FB | 	byte	$fc, $fd, $fb, $fb, $fc, $fd, $fc, $fc, $fc, $fc, $fb, $fc, $fe, $fe, $fc, $fb
1b938     FC FC FD FC 
1b93c     FC FB FD FD 
1b940     FC FE FC FC 
1b944     FD FE FF FF | 	byte	$fc, $fc, $fd, $fc, $fc, $fb, $fd, $fd, $fc, $fe, $fc, $fc, $fd, $fe, $ff, $ff
1b948     FC FC FC FE 
1b94c     FF FC FC FE 
1b950     FF FE FB FA 
1b954     FC FE FF FC | 	byte	$fc, $fc, $fc, $fe, $ff, $fc, $fc, $fe, $ff, $fe, $fb, $fa, $fc, $fe, $ff, $fc
1b958     F9 F9 FB FD 
1b95c     FC FC FB FB 
1b960     FE FC FC FB 
1b964     FC FC FD FD | 	byte	$f9, $f9, $fb, $fd, $fc, $fc, $fb, $fb, $fe, $fc, $fc, $fb, $fc, $fc, $fd, $fd
1b968     FE FC FC FD 
1b96c     FD FF FE FF 
1b970     FD FC FC FD 
1b974     FF FD FE FE | 	byte	$fe, $fc, $fc, $fd, $fd, $ff, $fe, $ff, $fd, $fc, $fc, $fd, $ff, $fd, $fe, $fe
1b978     FE FE FC FB 
1b97c     FD FE FE FD 
1b980     FC FC FB FB 
1b984     FA FC FD FC | 	byte	$fe, $fe, $fc, $fb, $fd, $fe, $fe, $fd, $fc, $fc, $fb, $fb, $fa, $fc, $fd, $fc
1b988     FB FB FB FB 
1b98c     FB FB       | 	byte	$fb[6]
1b98e     FC FC FE FE 
1b992     FC FA FA FE 
1b996     00 FF FE FC 
1b99a     FC FF FF FC | 	byte	$fc, $fc, $fe, $fe, $fc, $fa, $fa, $fe, $00, $ff, $fe, $fc, $fc, $ff, $ff, $fc
1b99e     FC FC FE FF 
1b9a2     FE FC FD FC 
1b9a6     FE FE FE FB 
1b9aa     FC FD FC FC | 	byte	$fc, $fc, $fe, $ff, $fe, $fc, $fd, $fc, $fe, $fe, $fe, $fb, $fc, $fd, $fc, $fc
1b9ae     FC FD FC FD 
1b9b2     FB FC FC FC 
1b9b6     FC FC FC FE 
1b9ba     FB F9 FC FC | 	byte	$fc, $fd, $fc, $fd, $fb, $fc, $fc, $fc, $fc, $fc, $fc, $fe, $fb, $f9, $fc, $fc
1b9be     FD FE FE FE 
1b9c2     FC FD FE FD 
1b9c6     FE FC FD FE 
1b9ca     FD FC FE FD | 	byte	$fd, $fe, $fe, $fe, $fc, $fd, $fe, $fd, $fe, $fc, $fd, $fe, $fd, $fc, $fe, $fd
1b9ce     FE FE FF FC 
1b9d2     FC FC FB FD 
1b9d6     FE FE FC FC 
1b9da     FD FC FD FC | 	byte	$fe, $fe, $ff, $fc, $fc, $fc, $fb, $fd, $fe, $fe, $fc, $fc, $fd, $fc, $fd, $fc
1b9de     FC FC FC FC 
1b9e2     FD FA FB FC 
1b9e6     FC FD FD FD 
1b9ea     FC FB FC FC | 	byte	$fc, $fc, $fc, $fc, $fd, $fa, $fb, $fc, $fc, $fd, $fd, $fd, $fc, $fb, $fc, $fc
1b9ee     FD FF FE FC 
1b9f2     FD FE FE FE 
1b9f6     FD FE FE FE 
1b9fa     FC FE FD FD | 	byte	$fd, $ff, $fe, $fc, $fd, $fe, $fe, $fe, $fd, $fe, $fe, $fe, $fc, $fe, $fd, $fd
1b9fe     FD FE FC FD 
1ba02     FD FD FC FD 
1ba06     FC FC FD FC 
1ba0a     FC FB FB FC | 	byte	$fd, $fe, $fc, $fd, $fd, $fd, $fc, $fd, $fc, $fc, $fd, $fc, $fc, $fb, $fb, $fc
1ba0e     FE FC FB FC 
1ba12     FD FB FA FC 
1ba16     FD FE FF FC 
1ba1a     FC FC FB FE | 	byte	$fe, $fc, $fb, $fc, $fd, $fb, $fa, $fc, $fd, $fe, $ff, $fc, $fc, $fc, $fb, $fe
1ba1e     FE FD FD FE 
1ba22     FF FD FC FC 
1ba26     FE FE FD FD 
1ba2a     FD FC FC FC | 	byte	$fe, $fd, $fd, $fe, $ff, $fd, $fc, $fc, $fe, $fe, $fd, $fd, $fd, $fc, $fc, $fc
1ba2e     FC FF FE FC 
1ba32     FC FC FC FC 
1ba36     FD FD FC FC 
1ba3a     FC FC FD FC | 	byte	$fc, $ff, $fe, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fc, $fc, $fc, $fc, $fd, $fc
1ba3e     FC FE FE FE 
1ba42     FC FC FC FB 
1ba46     FE FF FF FE 
1ba4a     FD FD FE FC | 	byte	$fc, $fe, $fe, $fe, $fc, $fc, $fc, $fb, $fe, $ff, $ff, $fe, $fd, $fd, $fe, $fc
1ba4e     FE FC FD FD 
1ba52     FC FC FC FB 
1ba56     FD FD FE FC 
1ba5a     FB FB FC FC | 	byte	$fe, $fc, $fd, $fd, $fc, $fc, $fc, $fb, $fd, $fd, $fe, $fc, $fb, $fb, $fc, $fc
1ba5e     FC FC FC FD 
1ba62     FE FD FB FB 
1ba66     FD FF FE FE 
1ba6a     FC FC FC FC | 	byte	$fc, $fc, $fc, $fd, $fe, $fd, $fb, $fb, $fd, $ff, $fe, $fe, $fc, $fc, $fc, $fc
1ba6e     FC FC FD FD 
1ba72     FF FF FD FC 
1ba76     FD FF FE FD 
1ba7a     FD FD FB FC | 	byte	$fc, $fc, $fd, $fd, $ff, $ff, $fd, $fc, $fd, $ff, $fe, $fd, $fd, $fd, $fb, $fc
1ba7e     FC FC FE FF 
1ba82     FE FC FD FC 
1ba86     FB FC FE FC 
1ba8a     FC FC FC FD | 	byte	$fc, $fc, $fe, $ff, $fe, $fc, $fd, $fc, $fb, $fc, $fe, $fc, $fc, $fc, $fc, $fd
1ba8e     FD FC FC FE 
1ba92     FC FC FC FC 
1ba96     FA FC FE FC 
1ba9a     FC FC FC FE | 	byte	$fd, $fc, $fc, $fe, $fc, $fc, $fc, $fc, $fa, $fc, $fe, $fc, $fc, $fc, $fc, $fe
1ba9e     FD FC FD FE 
1baa2     FE FE FC FE 
1baa6     FC FC FE FF 
1baaa     FD FD FD FE | 	byte	$fd, $fc, $fd, $fe, $fe, $fe, $fc, $fe, $fc, $fc, $fe, $ff, $fd, $fd, $fd, $fe
1baae     FE FC FC FC 
1bab2     FD FC FC FC 
1bab6     FC FC FD FD 
1baba     FD FE FB FC | 	byte	$fe, $fc, $fc, $fc, $fd, $fc, $fc, $fc, $fc, $fc, $fd, $fd, $fd, $fe, $fb, $fc
1babe     FC FD FD FC 
1bac2     FC FC FE FC 
1bac6     FC FB FC FC 
1baca     FD FF FD FC | 	byte	$fc, $fd, $fd, $fc, $fc, $fc, $fe, $fc, $fc, $fb, $fc, $fc, $fd, $ff, $fd, $fc
1bace     FD FD FE FD 
1bad2     FD FD FE FE 
1bad6     FE FD FD FD 
1bada     FE FC FC FB | 	byte	$fd, $fd, $fe, $fd, $fd, $fd, $fe, $fe, $fe, $fd, $fd, $fd, $fe, $fc, $fc, $fb
1bade     FB FC FC FC 
1bae2     FC FC FC FC 
1bae6     FB FC FC FE 
1baea     FE FB FB FC | 	byte	$fb, $fc, $fc, $fc, $fc, $fc, $fc, $fc, $fb, $fc, $fc, $fe, $fe, $fb, $fb, $fc
1baee     FC FD FE 00 
1baf2     FC FC FE FD 
1baf6     FC FE FC FD 
1bafa     FF FE FD FC | 	byte	$fc, $fd, $fe, $00, $fc, $fc, $fe, $fd, $fc, $fe, $fc, $fd, $ff, $fe, $fd, $fc
1bafe     FD FC FE FF 
1bb02     FD FC FC FC 
1bb06     FD FE FE FC 
1bb0a     FC FE FC FB | 	byte	$fd, $fc, $fe, $ff, $fd, $fc, $fc, $fc, $fd, $fe, $fe, $fc, $fc, $fe, $fc, $fb
1bb0e     FC FC FD FC 
1bb12     FE FC FC FC 
1bb16     FC FC FE FD 
1bb1a     FD FC FC FD | 	byte	$fc, $fc, $fd, $fc, $fe, $fc, $fc, $fc, $fc, $fc, $fe, $fd, $fd, $fc, $fc, $fd
1bb1e     FB FE FC FD 
1bb22     FE FD FD FC 
1bb26     FB FB FC FE 
1bb2a     FD FE FC FC | 	byte	$fb, $fe, $fc, $fd, $fe, $fd, $fd, $fc, $fb, $fb, $fc, $fe, $fd, $fe, $fc, $fc
1bb2e     FC FD FE FE 
1bb32     FC FC FC FE 
1bb36     FE FD FC FD 
1bb3a     FD FE FD FC | 	byte	$fc, $fd, $fe, $fe, $fc, $fc, $fc, $fe, $fe, $fd, $fc, $fd, $fd, $fe, $fd, $fc
1bb3e     FB FB FE FF 
1bb42     FE FC FA FC 
1bb46     FE FD FC FC 
1bb4a     FC FC FD FD | 	byte	$fb, $fb, $fe, $ff, $fe, $fc, $fa, $fc, $fe, $fd, $fc, $fc, $fc, $fc, $fd, $fd
1bb4e     FD FC FC FD 
1bb52     FE FE FD FC 
1bb56     FC FC FC FE 
1bb5a     FE FD FA FB | 	byte	$fd, $fc, $fc, $fd, $fe, $fe, $fd, $fc, $fc, $fc, $fc, $fe, $fe, $fd, $fa, $fb
1bb5e     FE FF FE FC 
1bb62     FC FF FF FD 
1bb66     FC FB FB FD 
1bb6a     FE FE FC FB | 	byte	$fe, $ff, $fe, $fc, $fc, $ff, $ff, $fd, $fc, $fb, $fb, $fd, $fe, $fe, $fc, $fb
1bb6e     FA FC FE FE 
1bb72     FA FB FD FE 
1bb76     FC FC FC FD 
1bb7a     FE FE FE FD | 	byte	$fa, $fc, $fe, $fe, $fa, $fb, $fd, $fe, $fc, $fc, $fc, $fd, $fe, $fe, $fe, $fd
1bb7e     FC FB FE FF 
1bb82     FE FD FC FC 
1bb86     FD FC FE FB 
1bb8a     FD FE FE FD | 	byte	$fc, $fb, $fe, $ff, $fe, $fd, $fc, $fc, $fd, $fc, $fe, $fb, $fd, $fe, $fe, $fd
1bb8e     FC FC FC FC 
1bb92     FD FD FC FB 
1bb96     FB FF 00 00 
1bb9a     00 00 4C 4C | 	byte	$fc, $fc, $fc, $fc, $fd, $fd, $fc, $fb, $fb, $ff, $00, $00, $00, $00, $4c, $4c
1bb9e     42 42 7E 7E 
1bba2     66 2C 24 58 
1bba6     72 3E CE DC 
1bbaa     EE BE 9A 0E | 	byte	$42, $42, $7e, $7e, $66, $2c, $24, $58, $72, $3e, $ce, $dc, $ee, $be, $9a, $0e
1bbae     3E 00 B4 CE 
1bbb2     0E D4 80 80 
1bbb6     80 80 80 80 
1bbba     80 B4 80 80 | 	byte	$3e, $00, $b4, $ce, $0e, $d4, $80, $80, $80, $80, $80, $80, $80, $b4, $80, $80
1bbbe     80 80 80 80 
1bbc2     80 80 80 80 
1bbc6     80 80 80 80 
1bbca     80 80 80 80 
1bbce     80          | 	byte	$80[17]
1bbcf     9A B4 A8 80 
1bbd3     80 80 D4 00 
1bbd7     00 C2 80 BE 
1bbdb     4C 72 7E 7E | 	byte	$9a, $b4, $a8, $80, $80, $80, $d4, $00, $00, $c2, $80, $be, $4c, $72, $7e, $7e
1bbdf     3E DC 2C 7E 
1bbe3     7E 7E 5C 7E 
1bbe7     7E 7E 7E 7E 
1bbeb     7E 7E 7E 7E | 	byte	$3e, $dc, $2c, $7e, $7e, $7e, $5c, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e
1bbef     5C 42 5C 4C 
1bbf3     8E 80 80 80 
1bbf7     80 80 80 80 
1bbfb     80 80 80 80 | 	byte	$5c, $42, $5c, $4c, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1bbff     80 D4 B4 80 
1bc03     9A EE 66 4C 
1bc07     DC CE E4 00 
1bc0b     66 7E 7E 66 | 	byte	$80, $d4, $b4, $80, $9a, $ee, $66, $4c, $dc, $ce, $e4, $00, $66, $7e, $7e, $66
1bc0f     42 58 7E 7E 
1bc13     7E 7E 5C 5C 
1bc17     7E 7E 7E 72 
1bc1b     3E 32 32 58 | 	byte	$42, $58, $7e, $7e, $7e, $7e, $5c, $5c, $7e, $7e, $7e, $72, $3e, $32, $32, $58
1bc1f     7E 76 5C 32 
1bc23     32 5C 5C 12 
1bc27     BE C2 C2 9A 
1bc2b     B4 1C 2C F2 | 	byte	$7e, $76, $5c, $32, $32, $5c, $5c, $12, $be, $c2, $c2, $9a, $b4, $1c, $2c, $f2
1bc2f     CE E4 00 9A 
1bc33     80 80 80 80 
1bc37     80 80 80 A8 
1bc3b     80 80 8A 80 | 	byte	$ce, $e4, $00, $9a, $80, $80, $80, $80, $80, $80, $80, $a8, $80, $80, $8a, $80
1bc3f     80 80 80 80 
1bc43     80 80 80 80 
1bc47     80 80       | 	byte	$80[10]
1bc49     8A 80 80 80 
1bc4d     80 9A A4 8E 
1bc51     80 80 8A D4 
1bc55     F2 E4 A4 8A | 	byte	$8a, $80, $80, $80, $80, $9a, $a4, $8e, $80, $80, $8a, $d4, $f2, $e4, $a4, $8a
1bc59     DC 58 76 7E 
1bc5d     7E 1C EE 42 
1bc61     7E 7E 7E 5C 
1bc65     7E 7E 7E 7E | 	byte	$dc, $58, $76, $7e, $7e, $1c, $ee, $42, $7e, $7e, $7e, $5c, $7e, $7e, $7e, $7e
1bc69     7E 7E 7E 7E 
1bc6d     7E          | 	byte	$7e[5]
1bc6e     72 5C 66 24 
1bc72     80 80 80 80 
1bc76     80 80 80 80 
1bc7a     80 80 80 80 | 	byte	$72, $5c, $66, $24, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1bc7e     80 D4 B4 9A 
1bc82     BE 1C 66 2C 
1bc86     DC D4 EE 12 
1bc8a     7E 7E 7E 66 | 	byte	$80, $d4, $b4, $9a, $be, $1c, $66, $2c, $dc, $d4, $ee, $12, $7e, $7e, $7e, $66
1bc8e     58 72 7E 7E 
1bc92     7E 7E 66 72 
1bc96     7E 7E 7E 5C 
1bc9a     3E 2C 32 66 | 	byte	$58, $72, $7e, $7e, $7e, $7e, $66, $72, $7e, $7e, $7e, $5c, $3e, $2c, $32, $66
1bc9e     76 72 58 3E 
1bca2     42 58 4C 00 
1bca6     B4 B4 A8 9A 
1bcaa     D4 24 1C F2 | 	byte	$76, $72, $58, $3e, $42, $58, $4c, $00, $b4, $b4, $a8, $9a, $d4, $24, $1c, $f2
1bcae     E4 F2 EE 80 
1bcb2     80 80 80 80 
1bcb6     80 80 80 A4 
1bcba     8A 8A 80 80 | 	byte	$e4, $f2, $ee, $80, $80, $80, $80, $80, $80, $80, $80, $a4, $8a, $8a, $80, $80
1bcbe     80 80 80 80 
1bcc2     80 80 80 80 
1bcc6     80          | 	byte	$80[9]
1bcc7     8A 80 80 80 
1bccb     80 80 8E 9A 
1bccf     80 80 80 9A 
1bcd3     D4 E4 CE 9A | 	byte	$8a, $80, $80, $80, $80, $80, $8e, $9a, $80, $80, $80, $9a, $d4, $e4, $ce, $9a
1bcd7     9A F2 58 7E 
1bcdb     7E 5C 02 00 
1bcdf     58 7E 7E 7E 
1bce3     76 7E 7E 7E | 	byte	$9a, $f2, $58, $7e, $7e, $5c, $02, $00, $58, $7e, $7e, $7e, $76, $7e, $7e, $7e
1bce7     7E 7E 7E 7E 
1bceb     7E 7E 7E    | 	byte	$7e[7]
1bcee     72 5C 00 80 
1bcf2     80 80 80 80 
1bcf6     80 80 80 80 
1bcfa     80 80 80 9A | 	byte	$72, $5c, $00, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $9a
1bcfe     D4 BE B4 E4 
1bd02     32 5C 1C DC 
1bd06     DC F2 32 7E 
1bd0a     7E 7E 66 66 | 	byte	$d4, $be, $b4, $e4, $32, $5c, $1c, $dc, $dc, $f2, $32, $7e, $7e, $7e, $66, $66
1bd0e     7E 7E 7E 7E 
1bd12     7E          | 	byte	$7e[5]
1bd13     72 76 7E 7E 
1bd17     7E 58 32 32 
1bd1b     42 72 72 66 
1bd1f     4C 42 4C 4C | 	byte	$72, $76, $7e, $7e, $7e, $58, $32, $32, $42, $72, $72, $66, $4c, $42, $4c, $4c
1bd23     3E E4 B4 A8 
1bd27     9A A8 EE 1C 
1bd2b     12 F2 EE F2 
1bd2f     C2 80 80 80 | 	byte	$3e, $e4, $b4, $a8, $9a, $a8, $ee, $1c, $12, $f2, $ee, $f2, $c2, $80, $80, $80
1bd33     80 80 80 80 
1bd37     8A 9A 8E 8A 
1bd3b     80 80 80 80 
1bd3f     80 80 80 80 | 	byte	$80, $80, $80, $80, $8a, $9a, $8e, $8a, $80, $80, $80, $80, $80, $80, $80, $80
1bd43     80 80 80 80 
1bd47     80 80 80 80 
1bd4b     80          | 	byte	$80[9]
1bd4c     8A 8A 80 80 
1bd50     80 A4 D4 D4 
1bd54     BE 9A B4 0E 
1bd58     5C 76 76 42 | 	byte	$8a, $8a, $80, $80, $80, $a4, $d4, $d4, $be, $9a, $b4, $0e, $5c, $76, $76, $42
1bd5c     02 12 5C 7E 
1bd60     7E 76 7E 7E 
1bd64     7E 7E 7E 7E 
1bd68     7E 7E 7E 7E | 	byte	$02, $12, $5c, $7e, $7e, $76, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e
1bd6c     7E 76 4C D4 
1bd70     80 80 80 80 
1bd74     80 80 80 80 
1bd78     80 80 80 80 | 	byte	$7e, $76, $4c, $d4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1bd7c     A8 D4 C2 CE 
1bd80     02 42 42 0E 
1bd84     E4 EE 0E 5C 
1bd88     7E 7E 7E 72 | 	byte	$a8, $d4, $c2, $ce, $02, $42, $42, $0e, $e4, $ee, $0e, $5c, $7e, $7e, $7e, $72
1bd8c     76 7E 7E 7E 
1bd90     7E 7E 76 7E 
1bd94     7E 7E 7E 4C 
1bd98     3E 3E 58 66 | 	byte	$76, $7e, $7e, $7e, $7e, $7e, $76, $7e, $7e, $7e, $7e, $4c, $3e, $3e, $58, $66
1bd9c     66 5C 4C 42 
1bda0     4C 42 24 DC 
1bda4     B4 A4 9A BE 
1bda8     FE 12 0E F2 | 	byte	$66, $5c, $4c, $42, $4c, $42, $24, $dc, $b4, $a4, $9a, $be, $fe, $12, $0e, $f2
1bdac     F2 EE A4 80 
1bdb0     80 80 80 80 
1bdb4     80 80 8A 8E 
1bdb8     8A 80 80 80 | 	byte	$f2, $ee, $a4, $80, $80, $80, $80, $80, $80, $80, $8a, $8e, $8a, $80, $80, $80
1bdbc     80 80 80 80 
1bdc0     80 80 80 80 
1bdc4     80 80 80 80 
1bdc8     80 80 80 80 
1bdcc     80 80 80 80 | 	byte	$80[20]
1bdd0     A8 CE C2 A8 
1bdd4     A4 CE 1C 5C 
1bdd8     72 5C 2C 0E 
1bddc     2C 66 7E 7E | 	byte	$a8, $ce, $c2, $a8, $a4, $ce, $1c, $5c, $72, $5c, $2c, $0e, $2c, $66, $7e, $7e
1bde0     7E 7E 7E 7E 
1bde4     7E 7E 7E 7E 
1bde8     7E 7E 7E 7E | 	byte	$7e[12]
1bdec     72 2C B4 80 
1bdf0     80 80 80 80 
1bdf4     80 80 80 80 
1bdf8     80 80 80 B4 | 	byte	$72, $2c, $b4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $b4
1bdfc     CE CE E4 12 
1be00     42 32 02 EE 
1be04     FE 24 76 7E 
1be08     7E 7E 7E 7E | 	byte	$ce, $ce, $e4, $12, $42, $32, $02, $ee, $fe, $24, $76, $7e, $7e, $7e, $7e, $7e
1be0c     7E 7E 7E 7E 
1be10     7E 7E 7E 7E 
1be14     7E          | 	byte	$7e[9]
1be15     72 4C 3E 42 
1be19     5C 66 66 58 
1be1d     4C 4C 4C 3E 
1be21     0E D4 B4 A4 | 	byte	$72, $4c, $3e, $42, $5c, $66, $66, $58, $4c, $4c, $4c, $3e, $0e, $d4, $b4, $a4
1be25     A8 CE 00 0E 
1be29     02 F2 EE D4 
1be2d     80 80 80 80 
1be31     80 80 80 80 | 	byte	$a8, $ce, $00, $0e, $02, $f2, $ee, $d4, $80, $80, $80, $80, $80, $80, $80, $80
1be35     8A 8E 80 80 
1be39     80 80 80 80 
1be3d     80 80 80 80 
1be41     80 80 80 80 | 	byte	$8a, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1be45     80 80 80 80 
1be49     80 80 80 80 
1be4d     80          | 	byte	$80[9]
1be4e     8A B4 C2 BE 
1be52     A8 A8 DC 24 
1be56     58 66 4C 24 
1be5a     1C 3E 66 7E | 	byte	$8a, $b4, $c2, $be, $a8, $a8, $dc, $24, $58, $66, $4c, $24, $1c, $3e, $66, $7e
1be5e     7E 7E 7E 7E 
1be62     7E 7E 7E 7E 
1be66     7E 7E 7E 7E 
1be6a     7E          | 	byte	$7e[13]
1be6b     5C 0E A4 80 
1be6f     80 80 80 80 
1be73     80 80 80 80 
1be77     80 80 80 BE | 	byte	$5c, $0e, $a4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $be
1be7b     CE DC F2 24 
1be7f     3E 24 00 F2 
1be83     0E 42 7E 7E 
1be87     7E 7E 7E 7E | 	byte	$ce, $dc, $f2, $24, $3e, $24, $00, $f2, $0e, $42, $7e, $7e, $7e, $7e, $7e, $7e
1be8b     7E 7E 7E 7E 
1be8f     7E 7E 7E 7E 
1be93     7E          | 	byte	$7e[9]
1be94     66 4C 42 4C 
1be98     5C 66 5C 58 
1be9c     4C 42 42 32 
1bea0     00 CE B4 A8 | 	byte	$66, $4c, $42, $4c, $5c, $66, $5c, $58, $4c, $42, $42, $32, $00, $ce, $b4, $a8
1bea4     B4 DC 00 02 
1bea8     00 F2 E4 C2 
1beac     80 80 80 80 
1beb0     80 80 80 80 | 	byte	$b4, $dc, $00, $02, $00, $f2, $e4, $c2, $80, $80, $80, $80, $80, $80, $80, $80
1beb4     80 80 80 80 
1beb8     80 80 80 80 
1bebc     80 80 80 80 
1bec0     80 80 80 80 
1bec4     80 80 80 80 
1bec8     80 80 80 80 
1becc     80          | 	byte	$80[25]
1becd     9A B4 BE BE 
1bed1     A8 BE F2 2C 
1bed5     58 58 42 24 
1bed9     24 42 72 7E | 	byte	$9a, $b4, $be, $be, $a8, $be, $f2, $2c, $58, $58, $42, $24, $24, $42, $72, $7e
1bedd     7E 7E 7E 7E 
1bee1     7E 7E 7E 7E 
1bee5     7E 7E 7E 7E | 	byte	$7e[12]
1bee9     72 42 00 8E 
1beed     80 80 80 80 
1bef1     80 80 80 80 
1bef5     80 80 80 8A | 	byte	$72, $42, $00, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $8a
1bef9     BE CE DC 00 
1befd     24 2C 12 00 
1bf01     02 1C 58 7E 
1bf05     7E 7E 7E 7E | 	byte	$be, $ce, $dc, $00, $24, $2c, $12, $00, $02, $1c, $58, $7e, $7e, $7e, $7e, $7e
1bf09     7E 7E 7E 7E 
1bf0d     7E 7E 7E 7E 
1bf11     7E 7E       | 	byte	$7e[10]
1bf13     5C 4C 42 58 
1bf17     5C 5C 5C 4C 
1bf1b     42 42 3E 24 
1bf1f     00 CE BE B4 | 	byte	$5c, $4c, $42, $58, $5c, $5c, $5c, $4c, $42, $42, $3e, $24, $00, $ce, $be, $b4
1bf23     C2 E4 00 00 
1bf27     F2 EE DC A4 
1bf2b     80 80 80 80 
1bf2f     80 80 80 80 | 	byte	$c2, $e4, $00, $00, $f2, $ee, $dc, $a4, $80, $80, $80, $80, $80, $80, $80, $80
1bf33     80 80 80 80 
1bf37     80 80 80 80 
1bf3b     80 80 80 80 
1bf3f     80 80 80 80 
1bf43     80 80 80 80 
1bf47     80 80 80 80 | 	byte	$80[24]
1bf4b     8A 9A B4 BE 
1bf4f     B4 B4 CE 00 
1bf53     32 4C 4C 3E 
1bf57     2C 32 58 72 | 	byte	$8a, $9a, $b4, $be, $b4, $b4, $ce, $00, $32, $4c, $4c, $3e, $2c, $32, $58, $72
1bf5b     7E 7E 7E 7E 
1bf5f     7E 7E 7E 7E 
1bf63     7E 7E 7E 7E 
1bf67     7E          | 	byte	$7e[13]
1bf68     66 2C DC 8A 
1bf6c     80 80 80 80 
1bf70     80 80 80 80 
1bf74     80 80 80 8E | 	byte	$66, $2c, $dc, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $8e
1bf78     BE CE E4 02 
1bf7c     1C 1C 0E 02 
1bf80     0E 2C 66 7E 
1bf84     7E 7E 7E 7E | 	byte	$be, $ce, $e4, $02, $1c, $1c, $0e, $02, $0e, $2c, $66, $7e, $7e, $7e, $7e, $7e
1bf88     7E 7E 7E 7E 
1bf8c     7E 7E 7E 7E 
1bf90     7E          | 	byte	$7e[9]
1bf91     72 5C 4C 4C 
1bf95     58 5C 5C 58 
1bf99     4C 42 42 32 
1bf9d     1C EE CE BE | 	byte	$72, $5c, $4c, $4c, $58, $5c, $5c, $58, $4c, $42, $42, $32, $1c, $ee, $ce, $be
1bfa1     BE D4 EE 00 
1bfa5     00 EE E4 CE 
1bfa9     8E 80 80 80 
1bfad     80 80 80 80 | 	byte	$be, $d4, $ee, $00, $00, $ee, $e4, $ce, $8e, $80, $80, $80, $80, $80, $80, $80
1bfb1     80 80 80 80 
1bfb5     80 80 80 80 
1bfb9     80 80 80 80 
1bfbd     80 80 80 80 
1bfc1     80 80 80 80 
1bfc5     80 80 80 80 
1bfc9     80          | 	byte	$80[25]
1bfca     8E A4 B4 BE 
1bfce     B4 BE DC 02 
1bfd2     32 42 42 32 
1bfd6     2C 3E 5C 72 | 	byte	$8e, $a4, $b4, $be, $b4, $be, $dc, $02, $32, $42, $42, $32, $2c, $3e, $5c, $72
1bfda     7E 7E 7E 7E 
1bfde     7E 7E 7E 7E 
1bfe2     7E 7E 7E 7E | 	byte	$7e[12]
1bfe6     76 58 1C CE 
1bfea     8A 80 80 80 
1bfee     80 80 80 80 
1bff2     80 80 80 80 | 	byte	$76, $58, $1c, $ce, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1bff6     9A BE CE E4 
1bffa     02 12 12 0E 
1bffe     02 1C 3E 72 
1c002     7E 7E 7E 7E | 	byte	$9a, $be, $ce, $e4, $02, $12, $12, $0e, $02, $1c, $3e, $72, $7e, $7e, $7e, $7e
1c006     7E 7E 7E 7E 
1c00a     7E 7E 7E 7E 
1c00e     7E 7E       | 	byte	$7e[10]
1c010     72 5C 4C 4C 
1c014     58 5C 58 4C 
1c018     4C 42 3E 2C 
1c01c     0E EE D4 C2 | 	byte	$72, $5c, $4c, $4c, $58, $5c, $58, $4c, $4c, $42, $3e, $2c, $0e, $ee, $d4, $c2
1c020     CE DC EE F2 
1c024     F2 EE DC BE 
1c028     80 80 80 80 
1c02c     80 80 80 80 | 	byte	$ce, $dc, $ee, $f2, $f2, $ee, $dc, $be, $80, $80, $80, $80, $80, $80, $80, $80
1c030     80 80 80 80 
1c034     80 80 80 80 
1c038     80 80 80 80 
1c03c     80 80 80 80 
1c040     80 80 80 80 
1c044     80 80 80 80 | 	byte	$80[24]
1c048     8A 9A A8 B4 
1c04c     BE BE CE EE 
1c050     12 32 42 3E 
1c054     32 3E 4C 66 | 	byte	$8a, $9a, $a8, $b4, $be, $be, $ce, $ee, $12, $32, $42, $3e, $32, $3e, $4c, $66
1c058     76 7E 7E 7E 
1c05c     7E 7E 7E 7E 
1c060     7E 7E 7E 7E 
1c064     7E 66 3E 02 | 	byte	$76, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $66, $3e, $02
1c068     BE 80 80 80 
1c06c     80 80 80 80 
1c070     80 80 80 80 
1c074     80 9A BE CE | 	byte	$be, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $9a, $be, $ce
1c078     E4 00 0E 0E 
1c07c     02 0E 24 42 
1c080     72 7E 7E 7E 
1c084     7E 7E 7E 7E | 	byte	$e4, $00, $0e, $0e, $02, $0e, $24, $42, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e
1c088     7E 7E 7E 7E 
1c08c     7E 7E       | 	byte	$7e[6]
1c08e     76 66 5C 58 
1c092     58 58 58 58 
1c096     4C 42 42 3E 
1c09a     24 02 EE D4 | 	byte	$76, $66, $5c, $58, $58, $58, $58, $58, $4c, $42, $42, $3e, $24, $02, $ee, $d4
1c09e     CE D4 E4 EE 
1c0a2     F2 EE E4 CE 
1c0a6     A8 80 80 80 
1c0aa     80 80 80 80 | 	byte	$ce, $d4, $e4, $ee, $f2, $ee, $e4, $ce, $a8, $80, $80, $80, $80, $80, $80, $80
1c0ae     80 80 80 80 
1c0b2     80 80 80 80 
1c0b6     80 80 80 80 
1c0ba     80 80 80 80 
1c0be     80 80 80 80 
1c0c2     80 80 80 80 
1c0c6     80          | 	byte	$80[25]
1c0c7     8E 9A A8 BE 
1c0cb     BE C2 D4 F2 
1c0cf     12 32 3E 3E 
1c0d3     3E 42 58 72 | 	byte	$8e, $9a, $a8, $be, $be, $c2, $d4, $f2, $12, $32, $3e, $3e, $3e, $42, $58, $72
1c0d7     7E 7E 7E 7E 
1c0db     7E 7E 7E 7E 
1c0df     7E 7E 7E 7E | 	byte	$7e[12]
1c0e3     76 5C 2C EE 
1c0e7     B4 80 80 80 
1c0eb     80 80 80 80 
1c0ef     80 80 80 80 | 	byte	$76, $5c, $2c, $ee, $b4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c0f3     80 9A B4 CE 
1c0f7     E4 00 02 02 
1c0fb     02 12 2C 4C 
1c0ff     72 7E 7E 7E | 	byte	$80, $9a, $b4, $ce, $e4, $00, $02, $02, $02, $12, $2c, $4c, $72, $7e, $7e, $7e
1c103     7E 7E 7E 7E 
1c107     7E 7E 7E 7E 
1c10b     7E 7E       | 	byte	$7e[10]
1c10d     72 66 58 58 
1c111     58 58 58 58 
1c115     4C 42 3E 32 
1c119     1C 02 E4 D4 | 	byte	$72, $66, $58, $58, $58, $58, $58, $58, $4c, $42, $3e, $32, $1c, $02, $e4, $d4
1c11d     D4 DC E4 EE 
1c121     EE E4 DC C2 
1c125     A4 80 80 80 
1c129     80 80 80 80 | 	byte	$d4, $dc, $e4, $ee, $ee, $e4, $dc, $c2, $a4, $80, $80, $80, $80, $80, $80, $80
1c12d     80 80 80 80 
1c131     80 80 80 80 
1c135     80 80 80 80 
1c139     80 80 80 80 
1c13d     80 80 80 80 
1c141     80 80 80    | 	byte	$80[23]
1c144     8A 8A 9A A4 
1c148     B4 BE C2 CE 
1c14c     DC 00 1C 32 
1c150     3E 3E 3E 4C | 	byte	$8a, $8a, $9a, $a4, $b4, $be, $c2, $ce, $dc, $00, $1c, $32, $3e, $3e, $3e, $4c
1c154     5C 72 7E 7E 
1c158     7E 7E 7E 7E 
1c15c     7E 7E 7E 7E 
1c160     7E 7E 66 42 | 	byte	$5c, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $66, $42
1c164     1C E4 A8 80 
1c168     80 80 80 80 
1c16c     80 80 80 80 
1c170     80 80 80 9A | 	byte	$1c, $e4, $a8, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $9a
1c174     B4 CE E4 F2 
1c178     00 02 02 12 
1c17c     32 58 72 7E 
1c180     7E 7E 7E 7E | 	byte	$b4, $ce, $e4, $f2, $00, $02, $02, $12, $32, $58, $72, $7e, $7e, $7e, $7e, $7e
1c184     7E 7E 7E 7E 
1c188     7E 7E 7E    | 	byte	$7e[7]
1c18b     76 72 5C 58 
1c18f     58 58 58 58 
1c193     4C 42 42 3E 
1c197     2C 12 00 EE | 	byte	$76, $72, $5c, $58, $58, $58, $58, $58, $4c, $42, $42, $3e, $2c, $12, $00, $ee
1c19b     DC DC DC E4 
1c19f     EE EE E4 D4 
1c1a3     BE 9A 80 80 
1c1a7     80 80 80 80 | 	byte	$dc, $dc, $dc, $e4, $ee, $ee, $e4, $d4, $be, $9a, $80, $80, $80, $80, $80, $80
1c1ab     80 80 80 80 
1c1af     80 80 80 80 
1c1b3     80 80 80 80 
1c1b7     80 80 80 80 
1c1bb     80 80 80 80 
1c1bf     80 80 80    | 	byte	$80[23]
1c1c2     8A 8A 8E 9A 
1c1c6     A8 BE C2 CE 
1c1ca     D4 EE 02 24 
1c1ce     32 3E 3E 42 | 	byte	$8a, $8a, $8e, $9a, $a8, $be, $c2, $ce, $d4, $ee, $02, $24, $32, $3e, $3e, $42
1c1d2     58 66 76 7E 
1c1d6     7E 7E 7E 7E 
1c1da     7E 7E 7E 7E 
1c1de     7E 7E 76 5C | 	byte	$58, $66, $76, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $76, $5c
1c1e2     3E 02 D4 A4 
1c1e6     80 80 80 80 
1c1ea     80 80 80 80 
1c1ee     80 80 80 80 | 	byte	$3e, $02, $d4, $a4, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c1f2     9A B4 CE E4 
1c1f6     EE FE 00 0E 
1c1fa     1C 32 58 72 
1c1fe     76 7E 7E 7E | 	byte	$9a, $b4, $ce, $e4, $ee, $fe, $00, $0e, $1c, $32, $58, $72, $76, $7e, $7e, $7e
1c202     7E 7E 7E 7E 
1c206     7E 7E 7E 7E | 	byte	$7e[8]
1c20a     76 66 5C 58 
1c20e     58 58 58 58 
1c212     4C 42 3E 32 
1c216     24 12 00 EE | 	byte	$76, $66, $5c, $58, $58, $58, $58, $58, $4c, $42, $3e, $32, $24, $12, $00, $ee
1c21a     DC DC E4 E4 
1c21e     EE E4 DC CE 
1c222     B4 8E 80 80 
1c226     80 80 80 80 | 	byte	$dc, $dc, $e4, $e4, $ee, $e4, $dc, $ce, $b4, $8e, $80, $80, $80, $80, $80, $80
1c22a     80 80 80 80 
1c22e     80 80 80 80 
1c232     80 80 80 80 
1c236     80 80 80 80 
1c23a     80 80 80 80 
1c23e     80 80 80    | 	byte	$80[23]
1c241     8A 8E 9A A4 
1c245     B4 BE C2 CE 
1c249     DC F2 0E 24 
1c24d     32 3E 42 4C | 	byte	$8a, $8e, $9a, $a4, $b4, $be, $c2, $ce, $dc, $f2, $0e, $24, $32, $3e, $42, $4c
1c251     5C 72 7E 7E 
1c255     7E 7E 7E 7E 
1c259     7E 7E 7E 7E 
1c25d     7E 7E 66 4C | 	byte	$5c, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $66, $4c
1c261     24 00 C2 9A 
1c265     80 80 80 80 
1c269     80 80 80 80 
1c26d     80 80 80 80 | 	byte	$24, $00, $c2, $9a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c271     9A B4 CE DC 
1c275     EE F2 00 0E 
1c279     1C 32 58 66 
1c27d     72 76 76 7E | 	byte	$9a, $b4, $ce, $dc, $ee, $f2, $00, $0e, $1c, $32, $58, $66, $72, $76, $76, $7e
1c281     7E 7E 7E 7E 
1c285     7E 7E 7E    | 	byte	$7e[7]
1c288     76 72 66 5C 
1c28c     58 58 58 58 
1c290     4C 42 42 3E 
1c294     32 24 0E 00 | 	byte	$76, $72, $66, $5c, $58, $58, $58, $58, $4c, $42, $42, $3e, $32, $24, $0e, $00
1c298     EE E4 E4 E4 
1c29c     E4 E4 E4 D4 
1c2a0     C2 A8 8E 80 
1c2a4     80 80 80 80 | 	byte	$ee, $e4, $e4, $e4, $e4, $e4, $e4, $d4, $c2, $a8, $8e, $80, $80, $80, $80, $80
1c2a8     80 80 80 80 
1c2ac     80 80 80 80 
1c2b0     80 80 80 80 
1c2b4     80 80 80 80 
1c2b8     80 80 80 80 
1c2bc     80 80 80    | 	byte	$80[23]
1c2bf     8A 8E 8E A4 
1c2c3     A8 BE C2 CE 
1c2c7     D4 E4 00 12 
1c2cb     2C 32 3E 42 | 	byte	$8a, $8e, $8e, $a4, $a8, $be, $c2, $ce, $d4, $e4, $00, $12, $2c, $32, $3e, $42
1c2cf     58 66 72 7E 
1c2d3     7E 7E 7E 7E 
1c2d7     7E 7E 7E 7E 
1c2db     7E 7E 72 5C | 	byte	$58, $66, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $72, $5c
1c2df     3E 12 EE BE 
1c2e3     8E 80 80 80 
1c2e7     80 80 80 80 
1c2eb     80 80 80 80 | 	byte	$3e, $12, $ee, $be, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c2ef     80 9A B4 C2 
1c2f3     DC E4 F2 00 
1c2f7     0E 24 3E 58 
1c2fb     66 72 72 76 | 	byte	$80, $9a, $b4, $c2, $dc, $e4, $f2, $00, $0e, $24, $3e, $58, $66, $72, $72, $76
1c2ff     76 7E 7E 7E 
1c303     7E 76 76 76 
1c307     72 72 5C 5C 
1c30b     58 58 58 4C | 	byte	$76, $7e, $7e, $7e, $7e, $76, $76, $76, $72, $72, $5c, $5c, $58, $58, $58, $4c
1c30f     4C 42 3E 32 
1c313     2C 1C 0E 00 
1c317     EE E4 E4 E4 
1c31b     E4 E4 DC D4 | 	byte	$4c, $42, $3e, $32, $2c, $1c, $0e, $00, $ee, $e4, $e4, $e4, $e4, $e4, $dc, $d4
1c31f     C2 A8 8A 80 
1c323     80 80 80 80 
1c327     80 80 80 80 
1c32b     80 80 80 80 | 	byte	$c2, $a8, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c32f     80 80 80 80 
1c333     80 80 80 80 
1c337     80 80 80 80 
1c33b     80 80       | 	byte	$80[14]
1c33d     8A 8A 8E 9A 
1c341     A4 B4 BE C2 
1c345     D4 DC EE 02 
1c349     1C 2C 32 42 | 	byte	$8a, $8a, $8e, $9a, $a4, $b4, $be, $c2, $d4, $dc, $ee, $02, $1c, $2c, $32, $42
1c34d     4C 58 66 76 
1c351     7E 7E 7E 7E 
1c355     7E 7E 7E 7E 
1c359     7E 7E 7E 66 | 	byte	$4c, $58, $66, $76, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $66
1c35d     4C 2C 0E DC 
1c361     B4 8E 80 80 
1c365     80 80 80 80 
1c369     80 80 80 80 | 	byte	$4c, $2c, $0e, $dc, $b4, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c36d     80 80 9A A8 
1c371     C2 D4 E4 EE 
1c375     00 0E 24 3E 
1c379     4C 5C 66 72 | 	byte	$80, $80, $9a, $a8, $c2, $d4, $e4, $ee, $00, $0e, $24, $3e, $4c, $5c, $66, $72
1c37d     72 76 76 7E 
1c381     76 76 76 76 
1c385     76 72 66 5C 
1c389     58 58 58 4C | 	byte	$72, $76, $76, $7e, $76, $76, $76, $76, $76, $72, $66, $5c, $58, $58, $58, $4c
1c38d     4C 42 42 3E 
1c391     32 24 1C 02 
1c395     00 EE EE E4 
1c399     EE E4 E4 DC | 	byte	$4c, $42, $42, $3e, $32, $24, $1c, $02, $00, $ee, $ee, $e4, $ee, $e4, $e4, $dc
1c39d     CE BE A4 8A 
1c3a1     80 80 80 80 
1c3a5     80 80 80 80 
1c3a9     80 80 80 80 | 	byte	$ce, $be, $a4, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c3ad     80 80 80 80 
1c3b1     80 80 80 80 
1c3b5     80 80 80 80 
1c3b9     80 80 80    | 	byte	$80[15]
1c3bc     8A 8E 9A A4 
1c3c0     A8 BE C2 CE 
1c3c4     D4 E4 F2 0E 
1c3c8     1C 2C 3E 42 | 	byte	$8a, $8e, $9a, $a4, $a8, $be, $c2, $ce, $d4, $e4, $f2, $0e, $1c, $2c, $3e, $42
1c3cc     58 5C 72 7E 
1c3d0     7E 7E 7E 7E 
1c3d4     7E 7E 7E 7E 
1c3d8     7E 7E 72 5C | 	byte	$58, $5c, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $72, $5c
1c3dc     42 1C 00 D4 
1c3e0     A8 8A 80 80 
1c3e4     80 80 80 80 
1c3e8     80 80 80 80 | 	byte	$42, $1c, $00, $d4, $a8, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c3ec     80 80 9A A8 
1c3f0     C2 D4 E4 EE 
1c3f4     00 0E 24 32 
1c3f8     4C 58 5C 66 | 	byte	$80, $80, $9a, $a8, $c2, $d4, $e4, $ee, $00, $0e, $24, $32, $4c, $58, $5c, $66
1c3fc     72 72 76 76 
1c400     76 76 76 72 
1c404     72 72 66 5C 
1c408     58 58 4C 4C | 	byte	$72, $72, $76, $76, $76, $76, $76, $72, $72, $72, $66, $5c, $58, $58, $4c, $4c
1c40c     4C 42 3E 3E 
1c410     2C 24 12 02 
1c414     F2 EE EE EE 
1c418     EE E4 E4 D4 | 	byte	$4c, $42, $3e, $3e, $2c, $24, $12, $02, $f2, $ee, $ee, $ee, $ee, $e4, $e4, $d4
1c41c     CE B4 A4 8E 
1c420     80 80 80 80 
1c424     80 80 80 80 
1c428     80 80 80 80 | 	byte	$ce, $b4, $a4, $8e, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c42c     80 80 80 80 
1c430     80 80 80 80 
1c434     80 80 80 80 
1c438     80 80       | 	byte	$80[14]
1c43a     8A 8E 9A A4 
1c43e     A8 B4 BE CE 
1c442     D4 DC EE 00 
1c446     12 24 32 3E | 	byte	$8a, $8e, $9a, $a4, $a8, $b4, $be, $ce, $d4, $dc, $ee, $00, $12, $24, $32, $3e
1c44a     4C 58 66 72 
1c44e     7E 7E 7E 7E 
1c452     7E 7E 7E 7E 
1c456     7E 7E 76 66 | 	byte	$4c, $58, $66, $72, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $76, $66
1c45a     4C 30 0E EE 
1c45e     CE A8 8A 80 
1c462     80 80 80 80 
1c466     80 80 80 80 | 	byte	$4c, $30, $0e, $ee, $ce, $a8, $8a, $80, $80, $80, $80, $80, $80, $80, $80, $80
1c46a     80 80 84 9E 
1c46e     A8 BE CE DC 
1c472     EE 00 0A 20 
1c476     30 3A 50 54 | 	byte	$80, $80, $84, $9e, $a8, $be, $ce, $dc, $ee, $00, $0a, $20, $30, $3a, $50, $54
1c47a     54 60 6A 66 
1c47e     66 66 66 66 
1c482     66 66 5C 54 
1c486     54 50 4C 46 | 	byte	$54, $60, $6a, $66, $66, $66, $66, $66, $66, $66, $5c, $54, $54, $50, $4c, $46
1c48a     46 3A 3A 36 
1c48e     2C 24 18 0E 
1c492     00 00 F2 EE 
1c496     EE EE E4 E0 | 	byte	$46, $3a, $3a, $36, $2c, $24, $18, $0e, $00, $00, $f2, $ee, $ee, $ee, $e4, $e0
1c49a     D8 C6 BA AC 
1c49e     9A 8E 86 80 
1c4a2     80 80 86 86 
1c4a6     84 84 80 80 | 	byte	$d8, $c6, $ba, $ac, $9a, $8e, $86, $80, $80, $80, $86, $86, $84, $84, $80, $80
1c4aa     80 80 80 80 
1c4ae     80 80 80 80 | 	byte	$80[8]
1c4b2     84 84 8A 8A 
1c4b6     8A 92 9E A0 
1c4ba     A8 B4 B6 BE 
1c4be     CA CA D4 E0 | 	byte	$84, $84, $8a, $8a, $8a, $92, $9e, $a0, $a8, $b4, $b6, $be, $ca, $ca, $d4, $e0
1c4c2     E8 F2 00 0E 
1c4c6     1C 28 32 3A 
1c4ca     4A 50 5C 6A 
1c4ce     72 7E 7E 7E | 	byte	$e8, $f2, $00, $0e, $1c, $28, $32, $3a, $4a, $50, $5c, $6a, $72, $7e, $7e, $7e
1c4d2     7E 7C 76 6A 
1c4d6     62 58 46 32 
1c4da     18 00 E8 CE 
1c4de     B6 A4 8E 84 | 	byte	$7e, $7c, $76, $6a, $62, $58, $46, $32, $18, $00, $e8, $ce, $b6, $a4, $8e, $84
1c4e2     80 80 80 80 
1c4e6     80 80 80    | 	byte	$80[7]
1c4e9     84 92 9E A8 
1c4ed     BE CE D8 E4 
1c4f1     F2 FE 06 18 
1c4f5     24 30 36 3E | 	byte	$84, $92, $9e, $a8, $be, $ce, $d8, $e4, $f2, $fe, $06, $18, $24, $30, $36, $3e
1c4f9     42 4A 4A 4A 
1c4fd     50 50 50 50 
1c501     50 46 46 3E 
1c505     3A 3A 32 32 | 	byte	$42, $4a, $4a, $4a, $50, $50, $50, $50, $50, $46, $46, $3e, $3a, $3a, $32, $32
1c509     32 2C 28 28 
1c50d     20 16 12 06 
1c511     00 00 F6 F2 
1c515     F2 EA EA E8 | 	byte	$32, $2c, $28, $28, $20, $16, $12, $06, $00, $00, $f6, $f2, $f2, $ea, $ea, $e8
1c519     E4 D4 CE C2 
1c51d     B4 B0 AC A4 
1c521     A4 A4 A4 A8 
1c525     A8 A0 9E 96 | 	byte	$e4, $d4, $ce, $c2, $b4, $b0, $ac, $a4, $a4, $a4, $a4, $a8, $a8, $a0, $9e, $96
1c529     96 96 96 96 
1c52d     96          | 	byte	$96[5]
1c52e     9E A0 A4 A4 
1c532     A8 A8 B0 B0 
1c536     B6 B6 B6 BE 
1c53a     C6 CA D0 D8 | 	byte	$9e, $a0, $a4, $a4, $a8, $a8, $b0, $b0, $b6, $b6, $b6, $be, $c6, $ca, $d0, $d8
1c53e     E0 E4 EA F6 
1c542     FE 06 0E 18 
1c546     24 24 32 32 
1c54a     3A 42 4C 50 | 	byte	$e0, $e4, $ea, $f6, $fe, $06, $0e, $18, $24, $24, $32, $32, $3a, $42, $4c, $50
1c54e     5C 5C 5C 5C 
1c552     54 50 4C 42 
1c556     36 28 20 0E 
1c55a     00 EA DC C6 | 	byte	$5c, $5c, $5c, $5c, $54, $50, $4c, $42, $36, $28, $20, $0e, $00, $ea, $dc, $c6
1c55e     B6 B0 A4 A4 
1c562     9E 9E 9E 9E 
1c566     9E A0 A8 B4 
1c56a     BA C2 D0 DC | 	byte	$b6, $b0, $a4, $a4, $9e, $9e, $9e, $9e, $9e, $a0, $a8, $b4, $ba, $c2, $d0, $dc
1c56e     E4 EA F6 FE 
1c572     06 0E 18 1C 
1c576     24 2C 2C 2C 
1c57a     32 32 32 30 | 	byte	$e4, $ea, $f6, $fe, $06, $0e, $18, $1c, $24, $2c, $2c, $2c, $32, $32, $32, $30
1c57e     30 30 30 30 
1c582     2C 2C 28 24 
1c586     24 24 1C 1C 
1c58a     1C 16 12 0E | 	byte	$30, $30, $30, $30, $2c, $2c, $28, $24, $24, $24, $1c, $1c, $1c, $16, $12, $0e
1c58e     0A 02 00 00 
1c592     FA F6 F6 F2 
1c596     F2 EE E8 E4 
1c59a     DC D4 CE CA | 	byte	$0a, $02, $00, $00, $fa, $f6, $f6, $f2, $f2, $ee, $e8, $e4, $dc, $d4, $ce, $ca
1c59e     C6 C6 C6 C6 
1c5a2     C6 C6 C6    | 	byte	$c6[7]
1c5a5     C2 BE BE BA 
1c5a9     BA BA BA BE 
1c5ad     BE C2 C6 C6 
1c5b1     CA CA CA D0 | 	byte	$c2, $be, $be, $ba, $ba, $ba, $ba, $be, $be, $c2, $c6, $c6, $ca, $ca, $ca, $d0
1c5b5     D0 D0 D4 DC 
1c5b9     DC E0 E4 E8 
1c5bd     EE F2 F2 FA 
1c5c1     00 02 0A 0E | 	byte	$d0, $d0, $d4, $dc, $dc, $e0, $e4, $e8, $ee, $f2, $f2, $fa, $00, $02, $0a, $0e
1c5c5     16 16 1C 20 
1c5c9     28 28 30 32 
1c5cd     32 36 36 32 
1c5d1     30 30 2C 24 | 	byte	$16, $16, $1c, $20, $28, $28, $30, $32, $32, $36, $36, $32, $30, $30, $2c, $24
1c5d5     1C 16 0E 02 
1c5d9     FA EE E8 DC 
1c5dd     D4 CE CA CA 
1c5e1     C6 C6 C6 C6 | 	byte	$1c, $16, $0e, $02, $fa, $ee, $e8, $dc, $d4, $ce, $ca, $ca, $c6, $c6, $c6, $c6
1c5e5     C6 C6 CE D0 
1c5e9     D8 DC E4 EA 
1c5ed     EE F2 FA FE 
1c5f1     02 06 0A 12 | 	byte	$c6, $c6, $ce, $d0, $d8, $dc, $e4, $ea, $ee, $f2, $fa, $fe, $02, $06, $0a, $12
1c5f5     12 16 16 18 
1c5f9     18 18 18 18 
1c5fd     18 18 18 16 
1c601     16 16 16 12 | 	byte	$12, $16, $16, $18, $18, $18, $18, $18, $18, $18, $18, $16, $16, $16, $16, $12
1c605     12 0E 0E 0E 
1c609     0E 0A 0A 06 
1c60d     02 00 00 00 
1c611     FE FA FA FA | 	byte	$12, $0e, $0e, $0e, $0e, $0a, $0a, $06, $02, $00, $00, $00, $fe, $fa, $fa, $fa
1c615     FA F6 F2 F2 
1c619     EE EA E8 E4 
1c61d     E4 E4 E4 E4 
1c621     E4 E4 E0 E0 | 	byte	$fa, $f6, $f2, $f2, $ee, $ea, $e8, $e4, $e4, $e4, $e4, $e4, $e4, $e4, $e0, $e0
1c625     E0 E0 E0 E0 
1c629     E0 E0 E0    | 	byte	$e0[7]
1c62c     E4 E4 E4 E8 
1c630     E8 E8 E8 E8 
1c634     EA EA EE EE 
1c638     F2 F2 F6 F6 | 	byte	$e4, $e4, $e4, $e8, $e8, $e8, $e8, $e8, $ea, $ea, $ee, $ee, $f2, $f2, $f6, $f6
1c63c     F6 FA FE FE 
1c640     00 00 02 06 
1c644     06 0A 0A 0E 
1c648     0E 12 12 12 | 	byte	$f6, $fa, $fe, $fe, $00, $00, $02, $06, $06, $0a, $0a, $0e, $0e, $12, $12, $12
1c64c     12 12 12 12 
1c650     0E 0E 0E 0A 
1c654     06 06 02 00 
1c658     FE FA F6 F2 | 	byte	$12, $12, $12, $12, $0e, $0e, $0e, $0a, $06, $06, $02, $00, $fe, $fa, $f6, $f2
1c65c     F2 EE EA EA 
1c660     EA EA EA EA 
1c664     EA EA EE F2 
1c668     F2 F6 F6 FA | 	byte	$f2, $ee, $ea, $ea, $ea, $ea, $ea, $ea, $ea, $ea, $ee, $f2, $f2, $f6, $f6, $fa
1c66c     FA FA FE FE 
1c670     00 00 00 02 
1c674     02 02 02 02 
1c678     02 02 02 02 | 	byte	$fa, $fa, $fe, $fe, $00, $00, $00, $02, $02, $02, $02, $02, $02, $02, $02, $02
1c67c     02 02 02 02 
1c680     02 02       | 	byte	$02[6]
1c682     00 00 00 00 
1c686     00 00 00 00 
1c68a     00 00 00 00 
1c68e     00 00       | 	byte	$00[14]
1c690     FE FE FE FE 
1c694     FE FE FE FE 
1c698     FE FE FE FE 
1c69c     FE FE       | 	byte	$fe[14]
1c69e     00 00 00 00 
1c6a2     00 00 00 00 
1c6a6     00 00 00 00 
1c6aa     00 00       | 	byte	$00[14]
1c6ac     03 05 06 07 
1c6b0     05 02 00 00 
1c6b4     00 00 00 00 
1c6b8     00 00 00 FF | 	byte	$03, $05, $06, $07, $05, $02, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff
1c6bc     FE FC FA F9 
1c6c0     FA FC FC FD 
1c6c4     FE FF FF FD 
1c6c8     FB FA FA FD | 	byte	$fe, $fc, $fa, $f9, $fa, $fc, $fc, $fd, $fe, $ff, $ff, $fd, $fb, $fa, $fa, $fd
1c6cc     00 01 02 04 
1c6d0     05 07 07 06 
1c6d4     04 01 00 00 
1c6d8     00 00 00 00 | 	byte	$00, $01, $02, $04, $05, $07, $07, $06, $04, $01, $00, $00, $00, $00, $00, $00
1c6dc     FF FE FE 00 
1c6e0     01 02 03 03 
1c6e4     05 08 09 07 
1c6e8     05 05 03 00 | 	byte	$ff, $fe, $fe, $00, $01, $02, $03, $03, $05, $08, $09, $07, $05, $05, $03, $00
1c6ec     FF FD FE FE 
1c6f0     FE FD F9 F3 
1c6f4     F0 EF F0 F1 
1c6f8     F2 F4 F5 F6 | 	byte	$ff, $fd, $fe, $fe, $fe, $fd, $f9, $f3, $f0, $ef, $f0, $f1, $f2, $f4, $f5, $f6
1c6fc     F8 FB FE 00 
1c700     00 03 0A 0F 
1c704     12 10 0D 09 
1c708     08 0A 0D 0E | 	byte	$f8, $fb, $fe, $00, $00, $03, $0a, $0f, $12, $10, $0d, $09, $08, $0a, $0d, $0e
1c70c     0C 0B 09 04 
1c710     00 FE FC FB 
1c714     FB FA FB FE 
1c718     FF 00 00 03 | 	byte	$0c, $0b, $09, $04, $00, $fe, $fc, $fb, $fb, $fa, $fb, $fe, $ff, $00, $00, $03
1c71c     09 0E 13 14 
1c720     11 0E 0F 0F 
1c724     10 13 17 1C 
1c728     1E 20 20 1D | 	byte	$09, $0e, $13, $14, $11, $0e, $0f, $0f, $10, $13, $17, $1c, $1e, $20, $20, $1d
1c72c     1E 23 27 24 
1c730     1D 15 12 15 
1c734     18 1B 19 14 
1c738     12 11 0F 0C | 	byte	$1e, $23, $27, $24, $1d, $15, $12, $15, $18, $1b, $19, $14, $12, $11, $0f, $0c
1c73c     09 06 06 06 
1c740     08 0D 12 16 
1c744     18 16 13 0F 
1c748     0B 0B 10 14 | 	byte	$09, $06, $06, $06, $08, $0d, $12, $16, $18, $16, $13, $0f, $0b, $0b, $10, $14
1c74c     14 15 16 15 
1c750     14 14 13 15 
1c754     14 0F 08 04 
1c758     05 08 06 02 | 	byte	$14, $15, $16, $15, $14, $14, $13, $15, $14, $0f, $08, $04, $05, $08, $06, $02
1c75c     02 02 FD F4 
1c760     F0 F0 EE EB 
1c764     EA F1 F6 F4 
1c768     EF EA E4 DD | 	byte	$02, $02, $fd, $f4, $f0, $f0, $ee, $eb, $ea, $f1, $f6, $f4, $ef, $ea, $e4, $dd
1c76c     DA DE E4 E3 
1c770     DD DD E0 DF 
1c774     DF E1 E5 E3 
1c778     E3 E8 E8 E6 | 	byte	$da, $de, $e4, $e3, $dd, $dd, $e0, $df, $df, $e1, $e5, $e3, $e3, $e8, $e8, $e6
1c77c     E5 E5 ED F6 
1c780     FB 00 05 0D 
1c784     13 19 1B 1F 
1c788     22 25 27 28 | 	byte	$e5, $e5, $ed, $f6, $fb, $00, $05, $0d, $13, $19, $1b, $1f, $22, $25, $27, $28
1c78c     25 21 1E 1D 
1c790     1B 1D 1F 22 
1c794     1E 18 15 11 
1c798     08 FE FA FC | 	byte	$25, $21, $1e, $1d, $1b, $1d, $1f, $22, $1e, $18, $15, $11, $08, $fe, $fa, $fc
1c79c     02 08 0F 11 
1c7a0     11 13 15 19 
1c7a4     1E 24 2A 2B 
1c7a8     2A 2B 31 37 | 	byte	$02, $08, $0f, $11, $11, $13, $15, $19, $1e, $24, $2a, $2b, $2a, $2b, $31, $37
1c7ac     3F 44 45 3B 
1c7b0     2B 1E 19 18 
1c7b4     18 19 1A 1B 
1c7b8     19 14 0C 07 | 	byte	$3f, $44, $45, $3b, $2b, $1e, $19, $18, $18, $19, $1a, $1b, $19, $14, $0c, $07
1c7bc     03 00 FF 01 
1c7c0     05 06 07 0B 
1c7c4     0C 07 01 00 
1c7c8     02 05 05 06 | 	byte	$03, $00, $ff, $01, $05, $06, $07, $0b, $0c, $07, $01, $00, $02, $05, $05, $06
1c7cc     07 07 06 07 
1c7d0     0A 0D 0E 0D 
1c7d4     09 05 01 FE 
1c7d8     FD FC FB FA | 	byte	$07, $07, $06, $07, $0a, $0d, $0e, $0d, $09, $05, $01, $fe, $fd, $fc, $fb, $fa
1c7dc     FB FD FF 03 
1c7e0     08 09 05 04 
1c7e4     06 04 01 FD 
1c7e8     FC F8 F4 F2 | 	byte	$fb, $fd, $ff, $03, $08, $09, $05, $04, $06, $04, $01, $fd, $fc, $f8, $f4, $f2
1c7ec     F2 F0 EC EA 
1c7f0     EA E7 DE D8 
1c7f4     D7 DC E0 E3 
1c7f8     E4 E2 E1 E2 | 	byte	$f2, $f0, $ec, $ea, $ea, $e7, $de, $d8, $d7, $dc, $e0, $e3, $e4, $e2, $e1, $e2
1c7fc     E7 F2 F8 FB 
1c800     00 0B 18 1F 
1c804     23 1E 19 16 
1c808     19 20 25 24 | 	byte	$e7, $f2, $f8, $fb, $00, $0b, $18, $1f, $23, $1e, $19, $16, $19, $20, $25, $24
1c80c     21 1A 13 10 
1c810     10 10 0F 0D 
1c814     0F 15 17 13 
1c818     0B 06 05 06 | 	byte	$21, $1a, $13, $10, $10, $10, $0f, $0d, $0f, $15, $17, $13, $0b, $06, $05, $06
1c81c     03 01 FB F4 
1c820     F0 F0 F3 F7 
1c824     FC 00 03 07 
1c828     0A 0C 0B 0F | 	byte	$03, $01, $fb, $f4, $f0, $f0, $f3, $f7, $fc, $00, $03, $07, $0a, $0c, $0b, $0f
1c82c     18 20 23 22 
1c830     1F 1A 19 1A 
1c834     1C 1A 19 1B 
1c838     1A 18 16 17 | 	byte	$18, $20, $23, $22, $1f, $1a, $19, $1a, $1c, $1a, $19, $1b, $1a, $18, $16, $17
1c83c     19 1B 19 18 
1c840     1C 24 2C 32 
1c844     33 32 31 30 
1c848     32 35 37 37 | 	byte	$19, $1b, $19, $18, $1c, $24, $2c, $32, $33, $32, $31, $30, $32, $35, $37, $37
1c84c     36 35 35 36 
1c850     35 32 32 30 
1c854     2B 25 23 1F 
1c858     1B 16 11 0E | 	byte	$36, $35, $35, $36, $35, $32, $32, $30, $2b, $25, $23, $1f, $1b, $16, $11, $0e
1c85c     0C 09 04 02 
1c860     01 00 FD FC 
1c864     FE FF FD F9 
1c868     F3 ED E8 E5 | 	byte	$0c, $09, $04, $02, $01, $00, $fd, $fc, $fe, $ff, $fd, $f9, $f3, $ed, $e8, $e5
1c86c     E4 E5 E0 D6 
1c870     D0 CC C5 BC 
1c874     B6 B5 B7 BF 
1c878     C2 BE BA B7 | 	byte	$e4, $e5, $e0, $d6, $d0, $cc, $c5, $bc, $b6, $b5, $b7, $bf, $c2, $be, $ba, $b7
1c87c     B9 C2 CD D4 
1c880     D7 DC E6 EE 
1c884     F4 F9 FE FE 
1c888     01 08 11 16 | 	byte	$b9, $c2, $cd, $d4, $d7, $dc, $e6, $ee, $f4, $f9, $fe, $fe, $01, $08, $11, $16
1c88c     17 18 18 1A 
1c890     20 25 26 24 
1c894     22 1F 1C 17 
1c898     11 0D 11 17 | 	byte	$17, $18, $18, $1a, $20, $25, $26, $24, $22, $1f, $1c, $17, $11, $0d, $11, $17
1c89c     18 16 0F 07 
1c8a0     03 04 09 10 
1c8a4     19 1F 21 22 
1c8a8     22 24 28 30 | 	byte	$18, $16, $0f, $07, $03, $04, $09, $10, $19, $1f, $21, $22, $22, $24, $28, $30
1c8ac     38 3F 3F 3B 
1c8b0     37 33 2F 30 
1c8b4     2F 2D 2C 29 
1c8b8     23 1A 15 15 | 	byte	$38, $3f, $3f, $3b, $37, $33, $2f, $30, $2f, $2d, $2c, $29, $23, $1a, $15, $15
1c8bc     17 19 1B 1A 
1c8c0     16 16 18 14 
1c8c4     0E 0D 12 1D 
1c8c8     26 29 26 20 | 	byte	$17, $19, $1b, $1a, $16, $16, $18, $14, $0e, $0d, $12, $1d, $26, $29, $26, $20
1c8cc     1D 19 15 13 
1c8d0     13 13 13 11 
1c8d4     0F 0B 06 03 
1c8d8     FF FB FA FB | 	byte	$1d, $19, $15, $13, $13, $13, $13, $11, $0f, $0b, $06, $03, $ff, $fb, $fa, $fb
1c8dc     F8 F4 F3 F5 
1c8e0     F6 F5 F4 F2 
1c8e4     EF EC EA EA 
1c8e8     E6 DF DC E0 | 	byte	$f8, $f4, $f3, $f5, $f6, $f5, $f4, $f2, $ef, $ec, $ea, $ea, $e6, $df, $dc, $e0
1c8ec     DF DA D7 D7 
1c8f0     D5 CE C8 C7 
1c8f4     C9 CA CB C9 
1c8f8     C7 C9 CA CF | 	byte	$df, $da, $d7, $d7, $d5, $ce, $c8, $c7, $c9, $ca, $cb, $c9, $c7, $c9, $ca, $cf
1c8fc     DA E2 E7 EC 
1c900     F7 01 07 0C 
1c904     0E 10 10 16 
1c908     1F 28 2C 2A | 	byte	$da, $e2, $e7, $ec, $f7, $01, $07, $0c, $0e, $10, $10, $16, $1f, $28, $2c, $2a
1c90c     28 29 2D 31 
1c910     31 33 35 3B 
1c914     3C 3A 33 2B 
1c918     26 22 1E 17 | 	byte	$28, $29, $2d, $31, $31, $33, $35, $3b, $3c, $3a, $33, $2b, $26, $22, $1e, $17
1c91c     0F 05 FD F8 
1c920     F6 F7 F6 FA 
1c924     FB FB F9 F8 
1c928     FA FB 00 04 | 	byte	$0f, $05, $fd, $f8, $f6, $f7, $f6, $fa, $fb, $fb, $f9, $f8, $fa, $fb, $00, $04
1c92c     0A 0D 0E 0C 
1c930     04 00 FF FC 
1c934     F6 F2 F4 F8 
1c938     FE 03 06 08 | 	byte	$0a, $0d, $0e, $0c, $04, $00, $ff, $fc, $f6, $f2, $f4, $f8, $fe, $03, $06, $08
1c93c     0A 0C 0C 09 
1c940     06 06 08 0B 
1c944     10 17 1E 25 
1c948     2A 30 35 35 | 	byte	$0a, $0c, $0c, $09, $06, $06, $08, $0b, $10, $17, $1e, $25, $2a, $30, $35, $35
1c94c     30 2D 31 34 
1c950     31 2B 27 27 
1c954     27 27 25 25 
1c958     24 24 25 28 | 	byte	$30, $2d, $31, $34, $31, $2b, $27, $27, $27, $27, $25, $25, $24, $24, $25, $28
1c95c     28 24 20 1D 
1c960     1A 17 12 0C 
1c964     0B 0A 06 01 
1c968     01 02 00 FA | 	byte	$28, $24, $20, $1d, $1a, $17, $12, $0c, $0b, $0a, $06, $01, $01, $02, $00, $fa
1c96c     F7 F6 F1 EA 
1c970     E2 DB D7 D5 
1c974     D4 D6 DC D9 
1c978     CF C7 C2 BD | 	byte	$f7, $f6, $f1, $ea, $e2, $db, $d7, $d5, $d4, $d6, $dc, $d9, $cf, $c7, $c2, $bd
1c97c     BD C4 CC CE 
1c980     CF D4 DA DC 
1c984     D8 D3 CD CF 
1c988     D9 E6 F1 F7 | 	byte	$bd, $c4, $cc, $ce, $cf, $d4, $da, $dc, $d8, $d3, $cd, $cf, $d9, $e6, $f1, $f7
1c98c     FA FB FD 02 
1c990     07 0C 13 19 
1c994     1A 1A 17 12 
1c998     0C 0C 0D 08 | 	byte	$fa, $fb, $fd, $02, $07, $0c, $13, $19, $1a, $1a, $17, $12, $0c, $0c, $0d, $08
1c99c     FF F4 ED E7 
1c9a0     E2 E2 EC F8 
1c9a4     FF 00 01 03 
1c9a8     01 01 09 17 | 	byte	$ff, $f4, $ed, $e7, $e2, $e2, $ec, $f8, $ff, $00, $01, $03, $01, $01, $09, $17
1c9ac     24 27 22 1F 
1c9b0     20 22 24 20 
1c9b4     1C 1C 1B 19 
1c9b8     19 1E 24 29 | 	byte	$24, $27, $22, $1f, $20, $22, $24, $20, $1c, $1c, $1b, $19, $19, $1e, $24, $29
1c9bc     2B 2F 32 33 
1c9c0     32 31 2F 2E 
1c9c4     2D 2F 38 43 
1c9c8     4A 4B 4B 4D | 	byte	$2b, $2f, $32, $33, $32, $31, $2f, $2e, $2d, $2f, $38, $43, $4a, $4b, $4b, $4d
1c9cc     4D 47 42 41 
1c9d0     40 3D 38 37 
1c9d4     38 35 2D 25 
1c9d8     23 1F 16 0B | 	byte	$4d, $47, $42, $41, $40, $3d, $38, $37, $38, $35, $2d, $25, $23, $1f, $16, $0b
1c9dc     04 04 06 04 
1c9e0     FF F8 F5 F4 
1c9e4     F0 EA E4 DC 
1c9e8     D0 C9 CC CD | 	byte	$04, $04, $06, $04, $ff, $f8, $f5, $f4, $f0, $ea, $e4, $dc, $d0, $c9, $cc, $cd
1c9ec     C9 C1 BD B8 
1c9f0     B1 AA A3 A1 
1c9f4     A1 A4 A6 A4 
1c9f8     A4 A4 A3 A9 | 	byte	$c9, $c1, $bd, $b8, $b1, $aa, $a3, $a1, $a1, $a4, $a6, $a4, $a4, $a4, $a3, $a9
1c9fc     B1 B8 BF C6 
1ca00     CD CD CF D1 
1ca04     D4 D8 E0 EA 
1ca08     F4 FD 04 0B | 	byte	$b1, $b8, $bf, $c6, $cd, $cd, $cf, $d1, $d4, $d8, $e0, $ea, $f4, $fd, $04, $0b
1ca0c     12 18 1F 26 
1ca10     31 3B 44 4D 
1ca14     52 52 4E 4A 
1ca18     48 48 43 3E | 	byte	$12, $18, $1f, $26, $31, $3b, $44, $4d, $52, $52, $4e, $4a, $48, $48, $43, $3e
1ca1c     34 2A 23 1E 
1ca20     1D 1B 19 19 
1ca24     1B 1B 18 14 
1ca28     16 1E 25 2A | 	byte	$34, $2a, $23, $1e, $1d, $1b, $19, $19, $1b, $1b, $18, $14, $16, $1e, $25, $2a
1ca2c     2A 27 1F 16 
1ca30     10 0E 0C 06 
1ca34     FE F4 F1 F1 
1ca38     F5 F5 F7 00 | 	byte	$2a, $27, $1f, $16, $10, $0e, $0c, $06, $fe, $f4, $f1, $f1, $f5, $f5, $f7, $00
1ca3c     08 0D 0A 07 
1ca40     07 06 02 00 
1ca44     FF 00 01 04 
1ca48     0A 12 15 12 | 	byte	$08, $0d, $0a, $07, $07, $06, $02, $00, $ff, $00, $01, $04, $0a, $12, $15, $12
1ca4c     14 1C 20 1E 
1ca50     19 16 15 14 
1ca54     11 11 12 10 
1ca58     0E 10 14 15 | 	byte	$14, $1c, $20, $1e, $19, $16, $15, $14, $11, $11, $12, $10, $0e, $10, $14, $15
1ca5c     0E 06 01 00 
1ca60     FE F8 F2 F1 
1ca64     F2 F1 F1 F1 
1ca68     EC E6 E2 E3 | 	byte	$0e, $06, $01, $00, $fe, $f8, $f2, $f1, $f2, $f1, $f1, $f1, $ec, $e6, $e2, $e3
1ca6c     E8 E7 E2 DD 
1ca70     DC DC D9 D6 
1ca74     D8 DC DB D5 
1ca78     D2 D2 D1 D2 | 	byte	$e8, $e7, $e2, $dd, $dc, $dc, $d9, $d6, $d8, $dc, $db, $d5, $d2, $d2, $d1, $d2
1ca7c     D2 D6 D5 D2 
1ca80     D1 D1 D2 CE 
1ca84     CD CE D8 E6 
1ca88     F2 FB FF 00 | 	byte	$d2, $d6, $d5, $d2, $d1, $d1, $d2, $ce, $cd, $ce, $d8, $e6, $f2, $fb, $ff, $00
1ca8c     05 0B 12 17 
1ca90     1E 26 34 3E 
1ca94     42 40 3A 35 
1ca98     33 33 30 2A | 	byte	$05, $0b, $12, $17, $1e, $26, $34, $3e, $42, $40, $3a, $35, $33, $33, $30, $2a
1ca9c     21 19 0E 04 
1caa0     00 00 00 00 
1caa4     FD FC FB FC 
1caa8     FF 08 14 19 | 	byte	$21, $19, $0e, $04, $00, $00, $00, $00, $fd, $fc, $fb, $fc, $ff, $08, $14, $19
1caac     13 0A 03 00 
1cab0     FD F7 F2 F0 
1cab4     EE E9 E3 E4 
1cab8     E8 EB F1 FA | 	byte	$13, $0a, $03, $00, $fd, $f7, $f2, $f0, $ee, $e9, $e3, $e4, $e8, $eb, $f1, $fa
1cabc     05 0E 12 10 
1cac0     10 13 18 1E 
1cac4     20 24 29 30 
1cac8     34 38 3D 40 | 	byte	$05, $0e, $12, $10, $10, $13, $18, $1e, $20, $24, $29, $30, $34, $38, $3d, $40
1cacc     42 40 40 42 
1cad0     46 47 47 47 
1cad4     45 44 47 48 
1cad8     45 3E 37 36 | 	byte	$42, $40, $40, $42, $46, $47, $47, $47, $45, $44, $47, $48, $45, $3e, $37, $36
1cadc     37 33 26 17 
1cae0     0D 0B 09 08 
1cae4     07 04 FD F1 
1cae8     E5 DF D7 CC | 	byte	$37, $33, $26, $17, $0d, $0b, $09, $08, $07, $04, $fd, $f1, $e5, $df, $d7, $cc
1caec     C2 BD BC B8 
1caf0     B2 AF AD B0 
1caf4     AF AC A7 A0 
1caf8     9F 9F A2 A6 | 	byte	$c2, $bd, $bc, $b8, $b2, $af, $ad, $b0, $af, $ac, $a7, $a0, $9f, $9f, $a2, $a6
1cafc     A5 A6 A5 A7 
1cb00     A8 A6 A0 9A 
1cb04     9D A3 AC B8 
1cb08     C6 D3 DA DE | 	byte	$a5, $a6, $a5, $a7, $a8, $a6, $a0, $9a, $9d, $a3, $ac, $b8, $c6, $d3, $da, $de
1cb0c     E3 ED FC 09 
1cb10     15 1D 28 36 
1cb14     41 46 49 4C 
1cb18     4E 4E 4D 47 | 	byte	$e3, $ed, $fc, $09, $15, $1d, $28, $36, $41, $46, $49, $4c, $4e, $4e, $4d, $47
1cb1c     3D 38 36 35 
1cb20     33 32 36 37 
1cb24     32 27 1F 22 
1cb28     2D 38 3D 3C | 	byte	$3d, $38, $36, $35, $33, $32, $36, $37, $32, $27, $1f, $22, $2d, $38, $3d, $3c
1cb2c     37 33 2E 2C 
1cb30     28 22 1B 14 
1cb34     0C 07 02 FE 
1cb38     FB FE 04 0A | 	byte	$37, $33, $2e, $2c, $28, $22, $1b, $14, $0c, $07, $02, $fe, $fb, $fe, $04, $0a
1cb3c     0B 0E 12 16 
1cb40     19 1B 1D 1E 
1cb44     1F 1C 1B 1C 
1cb48     1E 1D 1C 1F | 	byte	$0b, $0e, $12, $16, $19, $1b, $1d, $1e, $1f, $1c, $1b, $1c, $1e, $1d, $1c, $1f
1cb4c     24 25 23 1E 
1cb50     1A 19 1D 1F 
1cb54     20 1E 1C 1A 
1cb58     17 14 10 0B | 	byte	$24, $25, $23, $1e, $1a, $19, $1d, $1f, $20, $1e, $1c, $1a, $17, $14, $10, $0b
1cb5c     05 00 FA F6 
1cb60     F2 EB E6 E4 
1cb64     E0 DC D6 CD 
1cb68     C7 C2 BF BB | 	byte	$05, $00, $fa, $f6, $f2, $eb, $e6, $e4, $e0, $dc, $d6, $cd, $c7, $c2, $bf, $bb
1cb6c     B3 AC A9 AA 
1cb70     AA A9 AA B0 
1cb74     B5 B4 AF AA 
1cb78     AA AA AF B7 | 	byte	$b3, $ac, $a9, $aa, $aa, $a9, $aa, $b0, $b5, $b4, $af, $aa, $aa, $aa, $af, $b7
1cb7c     BC BC BD C2 
1cb80     C4 C5 C6 C7 
1cb84     CC D2 DF EE 
1cb88     FA 03 0B 15 | 	byte	$bc, $bc, $bd, $c2, $c4, $c5, $c6, $c7, $cc, $d2, $df, $ee, $fa, $03, $0b, $15
1cb8c     20 29 30 38 
1cb90     43 4B 4F 4E 
1cb94     50 53 58 5D 
1cb98     60 60 5F 5D | 	byte	$20, $29, $30, $38, $43, $4b, $4f, $4e, $50, $53, $58, $5d, $60, $60, $5f, $5d
1cb9c     5A 55 51 4E 
1cba0     4A 48 42 3C 
1cba4     32 25 19 14 
1cba8     18 1F 1F 18 | 	byte	$5a, $55, $51, $4e, $4a, $48, $42, $3c, $32, $25, $19, $14, $18, $1f, $1f, $18
1cbac     0E 05 FE F8 
1cbb0     F1 E9 DE D2 
1cbb4     CB CA CF D1 
1cbb8     CF D0 D8 DD | 	byte	$0e, $05, $fe, $f8, $f1, $e9, $de, $d2, $cb, $ca, $cf, $d1, $cf, $d0, $d8, $dd
1cbbc     DE DD DC E4 
1cbc0     EC F5 00 09 
1cbc4     0C 0D 10 13 
1cbc8     15 15 15 17 | 	byte	$de, $dd, $dc, $e4, $ec, $f5, $00, $09, $0c, $0d, $10, $13, $15, $15, $15, $17
1cbcc     19 1D 21 23 
1cbd0     25 26 26 2A 
1cbd4     30 33 33 32 
1cbd8     34 3A 3F 3C | 	byte	$19, $1d, $21, $23, $25, $26, $26, $2a, $30, $33, $33, $32, $34, $3a, $3f, $3c
1cbdc     34 2A 22 1B 
1cbe0     16 14 10 0A 
1cbe4     05 03 03 00 
1cbe8     F6 EA E4 E0 | 	byte	$34, $2a, $22, $1b, $16, $14, $10, $0a, $05, $03, $03, $00, $f6, $ea, $e4, $e0
1cbec     D9 CD BF B9 
1cbf0     B9 BD BF BD 
1cbf4     BB BA B8 B6 
1cbf8     B1 AC AB A9 | 	byte	$d9, $cd, $bf, $b9, $b9, $bd, $bf, $bd, $bb, $ba, $b8, $b6, $b1, $ac, $ab, $a9
1cbfc     AA AB AA AA 
1cc00     A9 A1 97 96 
1cc04     9B A6 B1 BB 
1cc08     C7 D6 E6 F4 | 	byte	$aa, $ab, $aa, $aa, $a9, $a1, $97, $96, $9b, $a6, $b1, $bb, $c7, $d6, $e6, $f4
1cc0c     FF 09 11 18 
1cc10     1C 22 29 2D 
1cc14     2F 31 35 3D 
1cc18     48 4E 4A 40 | 	byte	$ff, $09, $11, $18, $1c, $22, $29, $2d, $2f, $31, $35, $3d, $48, $4e, $4a, $40
1cc1c     3A 3D 41 41 
1cc20     44 48 48 41 
1cc24     38 32 2F 2E 
1cc28     2D 2B 28 22 | 	byte	$3a, $3d, $41, $41, $44, $48, $48, $41, $38, $32, $2f, $2e, $2d, $2b, $28, $22
1cc2c     1E 1B 17 0E 
1cc30     06 01 FC F2 
1cc34     E9 E2 E0 E7 
1cc38     EF F4 F8 FB | 	byte	$1e, $1b, $17, $0e, $06, $01, $fc, $f2, $e9, $e2, $e0, $e7, $ef, $f4, $f8, $fb
1cc3c     FC FD FF 02 
1cc40     08 0B 11 1D 
1cc44     2B 36 3C 3C 
1cc48     3A 3C 3E 38 | 	byte	$fc, $fd, $ff, $02, $08, $0b, $11, $1d, $2b, $36, $3c, $3c, $3a, $3c, $3e, $38
1cc4c     31 2E 30 34 
1cc50     37 39 38 3A 
1cc54     3E 3E 38 32 
1cc58     31 37 3B 36 | 	byte	$31, $2e, $30, $34, $37, $39, $38, $3a, $3e, $3e, $38, $32, $31, $37, $3b, $36
1cc5c     2E 25 1C 13 
1cc60     09 00 F7 EB 
1cc64     DD D1 CC CB 
1cc68     C8 C1 B9 B2 | 	byte	$2e, $25, $1c, $13, $09, $00, $f7, $eb, $dd, $d1, $cc, $cb, $c8, $c1, $b9, $b2
1cc6c     A9 9E 93 89 
1cc70     82 81 83 89 
1cc74     8E 90 90 91 
1cc78     94 97 95 93 | 	byte	$a9, $9e, $93, $89, $82, $81, $83, $89, $8e, $90, $90, $91, $94, $97, $95, $93
1cc7c     94 96 9C 9C 
1cc80     9E 9F A2 A6 
1cc84     AC B4 BE CC 
1cc88     DA E9 F5 01 | 	byte	$94, $96, $9c, $9c, $9e, $9f, $a2, $a6, $ac, $b4, $be, $cc, $da, $e9, $f5, $01
1cc8c     12 24 33 3B 
1cc90     3F 45 4C 52 
1cc94     57 5A 5D 61 
1cc98     66 6B 6B 63 | 	byte	$12, $24, $33, $3b, $3f, $45, $4c, $52, $57, $5a, $5d, $61, $66, $6b, $6b, $63
1cc9c     5C 58 5A 5E 
1cca0     62 66 64 5D 
1cca4     54 4F 4C 46 
1cca8     3E 33 28 1F | 	byte	$5c, $58, $5a, $5e, $62, $66, $64, $5d, $54, $4f, $4c, $46, $3e, $33, $28, $1f
1ccac     1A 16 10 09 
1ccb0     02 FA F3 ED 
1ccb4     E6 DE D9 D8 
1ccb8     DD E0 DE DE | 	byte	$1a, $16, $10, $09, $02, $fa, $f3, $ed, $e6, $de, $d9, $d8, $dd, $e0, $de, $de
1ccbc     DF E2 E9 EF 
1ccc0     F4 F5 F6 F9 
1ccc4     05 14 1B 1C 
1ccc8     1D 22 25 22 | 	byte	$df, $e2, $e9, $ef, $f4, $f5, $f6, $f9, $05, $14, $1b, $1c, $1d, $22, $25, $22
1cccc     19 10 0D 11 
1ccd0     15 19 1D 21 
1ccd4     22 25 27 28 
1ccd8     26 23 23 24 | 	byte	$19, $10, $0d, $11, $15, $19, $1d, $21, $22, $25, $27, $28, $26, $23, $23, $24
1ccdc     24 24 23 1C 
1cce0     13 0A 02 FC 
1cce4     F1 E5 DC DA 
1cce8     DC D9 D0 C8 | 	byte	$24, $24, $23, $1c, $13, $0a, $02, $fc, $f1, $e5, $dc, $da, $dc, $d9, $d0, $c8
1ccec     C2 BB B3 AF 
1ccf0     AD AC A9 A6 
1ccf4     A2 A2 A6 A8 
1ccf8     AC B0 B4 B8 | 	byte	$c2, $bb, $b3, $af, $ad, $ac, $a9, $a6, $a2, $a2, $a6, $a8, $ac, $b0, $b4, $b8
1ccfc     B7 B6 B1 AF 
1cd00     B0 AF B2 B3 
1cd04     B7 BE C6 CD 
1cd08     D5 E1 F2 01 | 	byte	$b7, $b6, $b1, $af, $b0, $af, $b2, $b3, $b7, $be, $c6, $cd, $d5, $e1, $f2, $01
1cd0c     0E 1A 28 31 
1cd10     36 36 34 34 
1cd14     36 3A 3E 42 
1cd18     45 47 47 46 | 	byte	$0e, $1a, $28, $31, $36, $36, $34, $34, $36, $3a, $3e, $42, $45, $47, $47, $46
1cd1c     45 43 46 4C 
1cd20     50 4D 4A 47 
1cd24     44 3F 38 33 
1cd28     2B 21 12 09 | 	byte	$45, $43, $46, $4c, $50, $4d, $4a, $47, $44, $3f, $38, $33, $2b, $21, $12, $09
1cd2c     04 00 FA F4 
1cd30     F0 EB E5 DE 
1cd34     D7 D3 D3 D3 
1cd38     D4 D8 DF E5 | 	byte	$04, $00, $fa, $f4, $f0, $eb, $e5, $de, $d7, $d3, $d3, $d3, $d4, $d8, $df, $e5
1cd3c     E8 EF F7 00 
1cd40     06 07 09 0C 
1cd44     16 21 2F 36 
1cd48     39 3C 41 42 | 	byte	$e8, $ef, $f7, $00, $06, $07, $09, $0c, $16, $21, $2f, $36, $39, $3c, $41, $42
1cd4c     3F 3A 32 2F 
1cd50     2F 31 30 30 
1cd54     30 33 39 3E 
1cd58     40 40 3E 3B | 	byte	$3f, $3a, $32, $2f, $2f, $31, $30, $30, $30, $33, $39, $3e, $40, $40, $3e, $3b
1cd5c     38 36 34 32 
1cd60     2A 1C 0D FF 
1cd64     F2 E3 D7 CE 
1cd68     CA C9 C6 BE | 	byte	$38, $36, $34, $32, $2a, $1c, $0d, $ff, $f2, $e3, $d7, $ce, $ca, $c9, $c6, $be
1cd6c     B5 AD A6 A0 
1cd70     9B 96 91 8F 
1cd74     8E 90 92 92 
1cd78     93 97 9D A0 | 	byte	$b5, $ad, $a6, $a0, $9b, $96, $91, $8f, $8e, $90, $92, $92, $93, $97, $9d, $a0
1cd7c     9F 9B 98 97 
1cd80     99 9A 9A 9C 
1cd84     A1 A8 AF B9 
1cd88     C8 D4 E1 EF | 	byte	$9f, $9b, $98, $97, $99, $9a, $9a, $9c, $a1, $a8, $af, $b9, $c8, $d4, $e1, $ef
1cd8c     00 11 1E 28 
1cd90     2F 35 38 3A 
1cd94     3C 41 47 4B 
1cd98     4D 4F 52 57 | 	byte	$00, $11, $1e, $28, $2f, $35, $38, $3a, $3c, $41, $47, $4b, $4d, $4f, $52, $57
1cd9c     59 5A 5A 5C 
1cda0     61 64 63 61 
1cda4     61 5F 59 52 
1cda8     4B 41 37 2D | 	byte	$59, $5a, $5a, $5c, $61, $64, $63, $61, $61, $5f, $59, $52, $4b, $41, $37, $2d
1cdac     24 1B 13 0A 
1cdb0     02 00 FF FA 
1cdb4     F2 ED EB EA 
1cdb8     E8 E4 E4 E9 | 	byte	$24, $1b, $13, $0a, $02, $00, $ff, $fa, $f2, $ed, $eb, $ea, $e8, $e4, $e4, $e9
1cdbc     F2 F6 F8 00 
1cdc0     07 0B 0B 0F 
1cdc4     16 1A 1E 23 
1cdc8     27 2A 2A 2C | 	byte	$f2, $f6, $f8, $00, $07, $0b, $0b, $0f, $16, $1a, $1e, $23, $27, $2a, $2a, $2c
1cdcc     2F 30 29 1E 
1cdd0     18 16 13 0F 
1cdd4     0D 13 1D 22 
1cdd8     23 20 1E 1D | 	byte	$2f, $30, $29, $1e, $18, $16, $13, $0f, $0d, $13, $1d, $22, $23, $20, $1e, $1d
1cddc     19 18 1C 1E 
1cde0     19 0D FE ED 
1cde4     DD D0 C8 C0 
1cde8     B7 AE AA AA | 	byte	$19, $18, $1c, $1e, $19, $0d, $fe, $ed, $dd, $d0, $c8, $c0, $b7, $ae, $aa, $aa
1cdec     A8 A3 9E 9E 
1cdf0     9F 9E 9A 98 
1cdf4     9A 9D 9F A2 
1cdf8     A6 AD B4 B7 | 	byte	$a8, $a3, $9e, $9e, $9f, $9e, $9a, $98, $9a, $9d, $9f, $a2, $a6, $ad, $b4, $b7
1cdfc     B9 B9 B8 B7 
1ce00     BC C2 C7 C6 
1ce04     C6 C7 C9 CE 
1ce08     D7 E1 F3 04 | 	byte	$b9, $b9, $b8, $b7, $bc, $c2, $c7, $c6, $c6, $c7, $c9, $ce, $d7, $e1, $f3, $04
1ce0c     15 23 2C 36 
1ce10     3C 40 3F 3F 
1ce14     43 48 4C 4B 
1ce18     48 48 4A 49 | 	byte	$15, $23, $2c, $36, $3c, $40, $3f, $3f, $43, $48, $4c, $4b, $48, $48, $4a, $49
1ce1c     48 4A 4F 52 
1ce20     53 51 4F 4F 
1ce24     4F 4F 4D 45 
1ce28     36 2A 24 1E | 	byte	$48, $4a, $4f, $52, $53, $51, $4f, $4f, $4f, $4f, $4d, $45, $36, $2a, $24, $1e
1ce2c     13 08 00 F7 
1ce30     F0 EC EA EA 
1ce34     E6 E1 DD DA 
1ce38     D8 D6 D1 D2 | 	byte	$13, $08, $00, $f7, $f0, $ec, $ea, $ea, $e6, $e1, $dd, $da, $d8, $d6, $d1, $d2
1ce3c     DA E6 F2 F8 
1ce40     FB 01 06 0A 
1ce44     0D 15 1F 24 
1ce48     24 25 2A 2E | 	byte	$da, $e6, $f2, $f8, $fb, $01, $06, $0a, $0d, $15, $1f, $24, $24, $25, $2a, $2e
1ce4c     2F 2E 2E 2D 
1ce50     2A 23 1B 18 
1ce54     1B 22 29 2E 
1ce58     2F 30 31 33 | 	byte	$2f, $2e, $2e, $2d, $2a, $23, $1b, $18, $1b, $22, $29, $2e, $2f, $30, $31, $33
1ce5c     33 33 33 30 
1ce60     2C 24 19 0F 
1ce64     04 F8 EA DF 
1ce68     D8 CF C4 BA | 	byte	$33, $33, $33, $30, $2c, $24, $19, $0f, $04, $f8, $ea, $df, $d8, $cf, $c4, $ba
1ce6c     B6 B5 B3 B1 
1ce70     AA A3 A3 A7 
1ce74     A9 A8 A6 A3 
1ce78     A4 AB AE B0 | 	byte	$b6, $b5, $b3, $b1, $aa, $a3, $a3, $a7, $a9, $a8, $a6, $a3, $a4, $ab, $ae, $b0
1ce7c     A9 A5 A2 A4 
1ce80     AC AF B0 B2 
1ce84     B5 B4 B2 B3 
1ce88     B9 C3 D1 DF | 	byte	$a9, $a5, $a2, $a4, $ac, $af, $b0, $b2, $b5, $b4, $b2, $b3, $b9, $c3, $d1, $df
1ce8c     ED FC 0B 15 
1ce90     19 1C 21 27 
1ce94     2C 31 35 37 
1ce98     39 3E 3D 3B | 	byte	$ed, $fc, $0b, $15, $19, $1c, $21, $27, $2c, $31, $35, $37, $39, $3e, $3d, $3b
1ce9c     3C 42 4A 4D 
1cea0     4E 4E 50 50 
1cea4     51 4F 4A 42 
1cea8     38 30 2B 26 | 	byte	$3c, $42, $4a, $4d, $4e, $4e, $50, $50, $51, $4f, $4a, $42, $38, $30, $2b, $26
1ceac     20 1B 14 0B 
1ceb0     05 02 01 FF 
1ceb4     FC FA F7 F5 
1ceb8     F5 F4 F5 F6 | 	byte	$20, $1b, $14, $0b, $05, $02, $01, $ff, $fc, $fa, $f7, $f5, $f5, $f4, $f5, $f6
1cebc     F6 F6 F7 FD 
1cec0     04 0B 12 18 
1cec4     1D 21 25 25 
1cec8     28 2B 2E 2F | 	byte	$f6, $f6, $f7, $fd, $04, $0b, $12, $18, $1d, $21, $25, $25, $28, $2b, $2e, $2f
1cecc     32 31 2D 29 
1ced0     25 23 1F 1A 
1ced4     18 1B 1F 23 
1ced8     23 21 22 23 | 	byte	$32, $31, $2d, $29, $25, $23, $1f, $1a, $18, $1b, $1f, $23, $23, $21, $22, $23
1cedc     23 24 23 21 
1cee0     1C 13 0A FE 
1cee4     F1 E7 DE D4 
1cee8     C8 BD B3 AD | 	byte	$23, $24, $23, $21, $1c, $13, $0a, $fe, $f1, $e7, $de, $d4, $c8, $bd, $b3, $ad
1ceec     A5 9F 9E 9D 
1cef0     99 96 92 92 
1cef4     91 96 9C 9F 
1cef8     A2 A5 A9 A9 | 	byte	$a5, $9f, $9e, $9d, $99, $96, $92, $92, $91, $96, $9c, $9f, $a2, $a5, $a9, $a9
1cefc     AA A9 A4 9F 
1cf00     9F A9 B6 BE 
1cf04     C1 C5 CD D4 
1cf08     D6 DA E4 F1 | 	byte	$aa, $a9, $a4, $9f, $9f, $a9, $b6, $be, $c1, $c5, $cd, $d4, $d6, $da, $e4, $f1
1cf0c     FD 06 12 1D 
1cf10     25 2D 38 40 
1cf14     43 47 4B 4E 
1cf18     50 52 52 55 | 	byte	$fd, $06, $12, $1d, $25, $2d, $38, $40, $43, $47, $4b, $4e, $50, $52, $52, $55
1cf1c     5C 60 61 64 
1cf20     67 68 68 66 
1cf24     61 5B 54 49 
1cf28     3F 33 2B 24 | 	byte	$5c, $60, $61, $64, $67, $68, $68, $66, $61, $5b, $54, $49, $3f, $33, $2b, $24
1cf2c     1B 13 0A 05 
1cf30     01 FD F8 F4 
1cf34     F2 EF EB E7 
1cf38     E5 E3 E1 E1 | 	byte	$1b, $13, $0a, $05, $01, $fd, $f8, $f4, $f2, $ef, $eb, $e7, $e5, $e3, $e1, $e1
1cf3c     E1 E3 E3 E3 
1cf40     E5 ED F6 FC 
1cf44     00 04 06 08 
1cf48     09 0E 15 1A | 	byte	$e1, $e3, $e3, $e3, $e5, $ed, $f6, $fc, $00, $04, $06, $08, $09, $0e, $15, $1a
1cf4c     1D 1E 20 1F 
1cf50     1A 14 12 14 
1cf54     19 1B 1B 1B 
1cf58     1D 24 2B 2D | 	byte	$1d, $1e, $20, $1f, $1a, $14, $12, $14, $19, $1b, $1b, $1b, $1d, $24, $2b, $2d
1cf5c     2C 2A 2A 27 
1cf60     21 1B 14 0D 
1cf64     06 FF F4 E9 
1cf68     DC D0 C8 C4 | 	byte	$2c, $2a, $2a, $27, $21, $1b, $14, $0d, $06, $ff, $f4, $e9, $dc, $d0, $c8, $c4
1cf6c     BF BB B7 B3 
1cf70     B0 AC AA A6 
1cf74     A2 A1 A2 AA 
1cf78     B2 B9 BC BB | 	byte	$bf, $bb, $b7, $b3, $b0, $ac, $aa, $a6, $a2, $a1, $a2, $aa, $b2, $b9, $bc, $bb
1cf7c     B8 B4 B5 B9 
1cf80     BB B8 B3 B5 
1cf84     BB C1 C5 CC 
1cf88     D7 E2 E9 EC | 	byte	$b8, $b4, $b5, $b9, $bb, $b8, $b3, $b5, $bb, $c1, $c5, $cc, $d7, $e2, $e9, $ec
1cf8c     F0 F7 FE 00 
1cf90     03 07 13 21 
1cf94     2D 32 32 36 
1cf98     3F 44 44 43 | 	byte	$f0, $f7, $fe, $00, $03, $07, $13, $21, $2d, $32, $32, $36, $3f, $44, $44, $43
1cf9c     46 4C 51 51 
1cfa0     4F 4D 4F 53 
1cfa4     53 4C 41 38 
1cfa8     31 28 1D 12 | 	byte	$46, $4c, $51, $51, $4f, $4d, $4f, $53, $53, $4c, $41, $38, $31, $28, $1d, $12
1cfac     0C 06 00 F9 
1cfb0     F6 FA FC FC 
1cfb4     F8 F5 F3 F3 
1cfb8     F3 F2 F1 F2 | 	byte	$0c, $06, $00, $f9, $f6, $fa, $fc, $fc, $f8, $f5, $f3, $f3, $f3, $f2, $f1, $f2
1cfbc     F4 F6 F7 F8 
1cfc0     FA FD 00 05 
1cfc4     0E 13 13 16 
1cfc8     19 1F 25 29 | 	byte	$f4, $f6, $f7, $f8, $fa, $fd, $00, $05, $0e, $13, $13, $16, $19, $1f, $25, $29
1cfcc     2D 2E 2E 2E 
1cfd0     2F 2D 28 28 
1cfd4     2C 31 33 32 
1cfd8     30 33 38 3B | 	byte	$2d, $2e, $2e, $2e, $2f, $2d, $28, $28, $2c, $31, $33, $32, $30, $33, $38, $3b
1cfdc     3B 38 31 2A 
1cfe0     24 1F 17 0C 
1cfe4     03 FD F7 ED 
1cfe8     DE CD BF B6 | 	byte	$3b, $38, $31, $2a, $24, $1f, $17, $0c, $03, $fd, $f7, $ed, $de, $cd, $bf, $b6
1cfec     AF A9 A5 A0 
1cff0     9B 97 98 96 
1cff4     94 91 8E 8E 
1cff8     92 9A 9E A1 | 	byte	$af, $a9, $a5, $a0, $9b, $97, $98, $96, $94, $91, $8e, $8e, $92, $9a, $9e, $a1
1cffc     A3 A3 A3 A5 
1d000     AA AF B3 B3 
1d004     AF AF B7 C3 
1d008     CE D9 E3 EB | 	byte	$a3, $a3, $a3, $a5, $aa, $af, $b3, $b3, $af, $af, $b7, $c3, $ce, $d9, $e3, $eb
1d00c     F4 FB FF FE 
1d010     00 06 0F 1A 
1d014     26 2F 37 3F 
1d018     48 4D 54 5B | 	byte	$f4, $fb, $ff, $fe, $00, $06, $0f, $1a, $26, $2f, $37, $3f, $48, $4d, $54, $5b
1d01c     5F 5F 5E 61 
1d020     67 6A 68 64 
1d024     60 5B 57 50 
1d028     46 3A 31 28 | 	byte	$5f, $5f, $5e, $61, $67, $6a, $68, $64, $60, $5b, $57, $50, $46, $3a, $31, $28
1d02c     1D 13 0C 06 
1d030     01 01 05 0A 
1d034     0B 0C 0A 07 
1d038     03 01 FF FE | 	byte	$1d, $13, $0c, $06, $01, $01, $05, $0a, $0b, $0c, $0a, $07, $03, $01, $ff, $fe
1d03c     FD FA FA FE 
1d040     00 FD F9 F8 
1d044     FA FC FE FE 
1d048     FE 04 0B 0F | 	byte	$fd, $fa, $fa, $fe, $00, $fd, $f9, $f8, $fa, $fc, $fe, $fe, $fe, $04, $0b, $0f
1d04c     13 14 14 12 
1d050     10 12 15 18 
1d054     17 17 17 17 
1d058     17 1C 24 29 | 	byte	$13, $14, $14, $12, $10, $12, $15, $18, $17, $17, $17, $17, $17, $1c, $24, $29
1d05c     28 26 24 21 
1d060     1A 10 06 00 
1d064     F9 F2 E9 E2 
1d068     DC D3 CA C2 | 	byte	$28, $26, $24, $21, $1a, $10, $06, $00, $f9, $f2, $e9, $e2, $dc, $d3, $ca, $c2
1d06c     B8 B0 AD AA 
1d070     A9 A8 A5 A4 
1d074     A6 A8 A9 A7 
1d078     A9 AB AC AE | 	byte	$b8, $b0, $ad, $aa, $a9, $a8, $a5, $a4, $a6, $a8, $a9, $a7, $a9, $ab, $ac, $ae
1d07c     B4 BB BF C6 
1d080     CC CF CF CF 
1d084     D1 D1 D0 D4 
1d088     DD E7 EE F5 | 	byte	$b4, $bb, $bf, $c6, $cc, $cf, $cf, $cf, $d1, $d1, $d0, $d4, $dd, $e7, $ee, $f5
1d08c     FD 05 0B 0A 
1d090     09 0B 10 14 
1d094     16 1B 24 2D 
1d098     37 42 4C 50 | 	byte	$fd, $05, $0b, $0a, $09, $0b, $10, $14, $16, $1b, $24, $2d, $37, $42, $4c, $50
1d09c     56 59 5B 59 
1d0a0     59 5C 5E 5C 
1d0a4     52 46 3D 3A 
1d0a8     36 2D 21 16 | 	byte	$56, $59, $5b, $59, $59, $5c, $5e, $5c, $52, $46, $3d, $3a, $36, $2d, $21, $16
1d0ac     0C 03 FA F1 
1d0b0     ED EF F2 F4 
1d0b4     F8 FC 00 02 
1d0b8     02 FF FA FC | 	byte	$0c, $03, $fa, $f1, $ed, $ef, $f2, $f4, $f8, $fc, $00, $02, $02, $ff, $fa, $fc
1d0bc     FF FE FE FF 
1d0c0     01 01 00 FC 
1d0c4     FA FA F9 F7 
1d0c8     F9 FE 01 08 | 	byte	$ff, $fe, $fe, $ff, $01, $01, $00, $fc, $fa, $fa, $f9, $f7, $f9, $fe, $01, $08
1d0cc     0F 14 15 14 
1d0d0     16 19 1C 20 
1d0d4     23 27 26 24 
1d0d8     25 2B 34 39 | 	byte	$0f, $14, $15, $14, $16, $19, $1c, $20, $23, $27, $26, $24, $25, $2b, $34, $39
1d0dc     3A 39 37 35 
1d0e0     32 2B 21 15 
1d0e4     0C 03 FA F1 
1d0e8     E8 E0 DC D8 | 	byte	$3a, $39, $37, $35, $32, $2b, $21, $15, $0c, $03, $fa, $f1, $e8, $e0, $dc, $d8
1d0ec     D1 C7 BD B3 
1d0f0     AF AE AD AA 
1d0f4     A7 A6 A6 A7 
1d0f8     A7 A6 A5 A3 | 	byte	$d1, $c7, $bd, $b3, $af, $ae, $ad, $aa, $a7, $a6, $a6, $a7, $a7, $a6, $a5, $a3
1d0fc     A3 A7 AC B5 
1d100     BE C3 C3 C0 
1d104     C0 C4 CD D3 
1d108     D4 D2 D6 DD | 	byte	$a3, $a7, $ac, $b5, $be, $c3, $c3, $c0, $c0, $c4, $cd, $d3, $d4, $d2, $d6, $dd
1d10c     E1 E6 EE F4 
1d110     F9 FE 02 04 
1d114     06 09 0D 14 
1d118     1F 2D 39 42 | 	byte	$e1, $e6, $ee, $f4, $f9, $fe, $02, $04, $06, $09, $0d, $14, $1f, $2d, $39, $42
1d11c     48 4A 50 5A 
1d120     62 61 5C 58 
1d124     55 4F 45 3C 
1d128     34 2E 2A 25 | 	byte	$48, $4a, $50, $5a, $62, $61, $5c, $58, $55, $4f, $45, $3c, $34, $2e, $2a, $25
1d12c     1C 12 09 02 
1d130     FE FC FE 03 
1d134     07 09 0D 15 
1d138     1B 1A 17 18 | 	byte	$1c, $12, $09, $02, $fe, $fc, $fe, $03, $07, $09, $0d, $15, $1b, $1a, $17, $18
1d13c     18 18 1A 1C 
1d140     1C 18 14 10 
1d144     0C 0B 08 02 
1d148     FE FD 00 04 | 	byte	$18, $18, $1a, $1c, $1c, $18, $14, $10, $0c, $0b, $08, $02, $fe, $fd, $00, $04
1d14c     08 0A 0D 11 
1d150     14 14 14 16 
1d154     18 1A 1B 1C 
1d158     1C 20 24 27 | 	byte	$08, $0a, $0d, $11, $14, $14, $14, $16, $18, $1a, $1b, $1c, $1c, $20, $24, $27
1d15c     27 28 28 26 
1d160     20 18 11 08 
1d164     FF F3 E5 DA 
1d168     D4 CF CB C5 | 	byte	$27, $28, $28, $26, $20, $18, $11, $08, $ff, $f3, $e5, $da, $d4, $cf, $cb, $c5
1d16c     C0 BB B7 B2 
1d170     AC A6 A4 A3 
1d174     A2 A3 A2 A2 
1d178     A1 A3 A5 AA | 	byte	$c0, $bb, $b7, $b2, $ac, $a6, $a4, $a3, $a2, $a3, $a2, $a2, $a1, $a3, $a5, $aa
1d17c     AF B0 B1 B8 
1d180     C4 CE D0 D1 
1d184     D3 D6 DD E5 
1d188     EC EF EF EE | 	byte	$af, $b0, $b1, $b8, $c4, $ce, $d0, $d1, $d3, $d6, $dd, $e5, $ec, $ef, $ef, $ee
1d18c     EE F2 F5 F9 
1d190     00 09 11 15 
1d194     18 1B 1F 23 
1d198     29 31 39 3F | 	byte	$ee, $f2, $f5, $f9, $00, $09, $11, $15, $18, $1b, $1f, $23, $29, $31, $39, $3f
1d19c     42 49 51 5A 
1d1a0     61 65 66 5E 
1d1a4     54 49 44 3F 
1d1a8     33 28 1E 18 | 	byte	$42, $49, $51, $5a, $61, $65, $66, $5e, $54, $49, $44, $3f, $33, $28, $1e, $18
1d1ac     11 0C 02 F9 
1d1b0     F2 F3 F6 F5 
1d1b4     F4 F8 FF 04 
1d1b8     09 0D 0E 10 | 	byte	$11, $0c, $02, $f9, $f2, $f3, $f6, $f5, $f4, $f8, $ff, $04, $09, $0d, $0e, $10
1d1bc     12 13 14 14 
1d1c0     13 11 0D 08 
1d1c4     03 01 00 FC 
1d1c8     F7 F4 F3 F3 | 	byte	$12, $13, $14, $14, $13, $11, $0d, $08, $03, $01, $00, $fc, $f7, $f4, $f3, $f3
1d1cc     F7 FC 00 02 
1d1d0     07 0B 0D 0E 
1d1d4     0F 12 14 15 
1d1d8     17 1E 26 29 | 	byte	$f7, $fc, $00, $02, $07, $0b, $0d, $0e, $0f, $12, $14, $15, $17, $1e, $26, $29
1d1dc     29 29 2C 2C 
1d1e0     29 22 1A 12 
1d1e4     0C 05 FB F1 
1d1e8     E8 E0 D9 D5 | 	byte	$29, $29, $2c, $2c, $29, $22, $1a, $12, $0c, $05, $fb, $f1, $e8, $e0, $d9, $d5
1d1ec     CF C7 C0 BE 
1d1f0     BE BD BB B6 
1d1f4     B3 B3 B2 AF 
1d1f8     AB AA AC B3 | 	byte	$cf, $c7, $c0, $be, $be, $bd, $bb, $b6, $b3, $b3, $b2, $af, $ab, $aa, $ac, $b3
1d1fc     BC C2 C6 C8 
1d200     CE D5 D9 DC 
1d204     DE E0 E3 E6 
1d208     E9 EC F1 F2 | 	byte	$bc, $c2, $c6, $c8, $ce, $d5, $d9, $dc, $de, $e0, $e3, $e6, $e9, $ec, $f1, $f2
1d20c     EC E6 E6 E9 
1d210     EA EE F4 FC 
1d214     03 0A 11 16 
1d218     1E 25 27 26 | 	byte	$ec, $e6, $e6, $e9, $ea, $ee, $f4, $fc, $03, $0a, $11, $16, $1e, $25, $27, $26
1d21c     27 2E 39 46 
1d220     4D 50 4F 50 
1d224     4E 46 3A 2D 
1d228     25 21 1B 11 | 	byte	$27, $2e, $39, $46, $4d, $50, $4f, $50, $4e, $46, $3a, $2d, $25, $21, $1b, $11
1d22c     08 04 01 FE 
1d230     FA F8 F7 F7 
1d234     F9 FC 00 06 
1d238     0F 16 1B 1F | 	byte	$08, $04, $01, $fe, $fa, $f8, $f7, $f7, $f9, $fc, $00, $06, $0f, $16, $1b, $1f
1d23c     25 2A 2D 2D 
1d240     2B 28 24 21 
1d244     1D 1A 16 12 
1d248     0E 09 06 04 | 	byte	$25, $2a, $2d, $2d, $2b, $28, $24, $21, $1d, $1a, $16, $12, $0e, $09, $06, $04
1d24c     03 04 08 0F 
1d250     14 15 17 16 
1d254     16 16 16 17 
1d258     19 1A 1E 24 | 	byte	$03, $04, $08, $0f, $14, $15, $17, $16, $16, $16, $16, $17, $19, $1a, $1e, $24
1d25c     27 28 29 28 
1d260     26 20 17 0D 
1d264     03 F9 F0 E9 
1d268     E3 DC D1 C6 | 	byte	$27, $28, $29, $28, $26, $20, $17, $0d, $03, $f9, $f0, $e9, $e3, $dc, $d1, $c6
1d26c     BD B6 B0 AA 
1d270     A6 A6 A7 A8 
1d274     A6 A2 9D 98 
1d278     95 96 99 A1 | 	byte	$bd, $b6, $b0, $aa, $a6, $a6, $a7, $a8, $a6, $a2, $9d, $98, $95, $96, $99, $a1
1d27c     A9 B2 BD C6 
1d280     CC CF D4 D9 
1d284     DD E2 E6 E9 
1d288     EB EE F1 F5 | 	byte	$a9, $b2, $bd, $c6, $cc, $cf, $d4, $d9, $dd, $e2, $e6, $e9, $eb, $ee, $f1, $f5
1d28c     F6 F2 EE EC 
1d290     EC EE F2 F7 
1d294     00 0A 16 21 
1d298     2B 32 36 36 | 	byte	$f6, $f2, $ee, $ec, $ec, $ee, $f2, $f7, $00, $0a, $16, $21, $2b, $32, $36, $36
1d29c     35 37 3E 48 
1d2a0     51 57 59 55 
1d2a4     50 4F 4D 44 
1d2a8     33 27 22 20 | 	byte	$35, $37, $3e, $48, $51, $57, $59, $55, $50, $4f, $4d, $44, $33, $27, $22, $20
1d2ac     1B 14 0E 07 
1d2b0     04 03 03 01 
1d2b4     00 00 04 0A 
1d2b8     0D 12 1A 1F | 	byte	$1b, $14, $0e, $07, $04, $03, $03, $01, $00, $00, $04, $0a, $0d, $12, $1a, $1f
1d2bc     23 27 2C 30 
1d2c0     31 2E 27 1F 
1d2c4     1B 17 12 0A 
1d2c8     03 FF FD FC | 	byte	$23, $27, $2c, $30, $31, $2e, $27, $1f, $1b, $17, $12, $0a, $03, $ff, $fd, $fc
1d2cc     FA FA FC FD 
1d2d0     00 05 07 05 
1d2d4     03 04 07 08 
1d2d8     08 0A 0D 10 | 	byte	$fa, $fa, $fc, $fd, $00, $05, $07, $05, $03, $04, $07, $08, $08, $0a, $0d, $10
1d2dc     15 19 1E 1F 
1d2e0     20 1C 15 0B 
1d2e4     01 F9 F2 EC 
1d2e8     EA E7 E0 D7 | 	byte	$15, $19, $1e, $1f, $20, $1c, $15, $0b, $01, $f9, $f2, $ec, $ea, $e7, $e0, $d7
1d2ec     CD C2 B9 B3 
1d2f0     AF AC AB AD 
1d2f4     B0 B0 AE A8 
1d2f8     A3 A3 A8 B1 | 	byte	$cd, $c2, $b9, $b3, $af, $ac, $ab, $ad, $b0, $b0, $ae, $a8, $a3, $a3, $a8, $b1
1d2fc     B9 C0 C9 D2 
1d300     DD E5 E9 EB 
1d304     EE F5 FA FC 
1d308     FC FD 00 00 | 	byte	$b9, $c0, $c9, $d2, $dd, $e5, $e9, $eb, $ee, $f5, $fa, $fc, $fc, $fd, $00, $00
1d30c     00 FF FA F6 
1d310     F3 F1 EF EE 
1d314     F2 FA 04 12 
1d318     1D 26 2E 33 | 	byte	$00, $ff, $fa, $f6, $f3, $f1, $ef, $ee, $f2, $fa, $04, $12, $1d, $26, $2e, $33
1d31c     33 34 34 35 
1d320     37 3A 3D 3B 
1d324     3A 37 34 2E 
1d328     27 1F 14 0C | 	byte	$33, $34, $34, $35, $37, $3a, $3d, $3b, $3a, $37, $34, $2e, $27, $1f, $14, $0c
1d32c     07 06 04 00 
1d330     FA F4 F3 F7 
1d334     FB FD FF 04 
1d338     0B 10 12 16 | 	byte	$07, $06, $04, $00, $fa, $f4, $f3, $f7, $fb, $fd, $ff, $04, $0b, $10, $12, $16
1d33c     1E 25 2A 2B 
1d340     2E 31 31 2C 
1d344     25 20 1C 18 
1d348     12 0B 06 05 | 	byte	$1e, $25, $2a, $2b, $2e, $31, $31, $2c, $25, $20, $1c, $18, $12, $0b, $06, $05
1d34c     05 05 07 0A 
1d350     0C 0D 0F 12 
1d354     0F 0C 0F 14 
1d358     17 16 14 16 | 	byte	$05, $05, $07, $0a, $0c, $0d, $0f, $12, $0f, $0c, $0f, $14, $17, $16, $14, $16
1d35c     1A 1D 1E 24 
1d360     2A 29 24 1B 
1d364     12 08 FF F7 
1d368     F2 EF EA E1 | 	byte	$1a, $1d, $1e, $24, $2a, $29, $24, $1b, $12, $08, $ff, $f7, $f2, $ef, $ea, $e1
1d36c     DA D3 C8 BD 
1d370     B5 B1 AD A9 
1d374     A6 A5 A3 A3 
1d378     A5 A3 A0 A3 | 	byte	$da, $d3, $c8, $bd, $b5, $b1, $ad, $a9, $a6, $a5, $a3, $a3, $a5, $a3, $a0, $a3
1d37c     AA B5 C0 C7 
1d380     CA D0 DC E5 
1d384     E7 E9 EA EC 
1d388     ED EE EF F1 | 	byte	$aa, $b5, $c0, $c7, $ca, $d0, $dc, $e5, $e7, $e9, $ea, $ec, $ed, $ee, $ef, $f1
1d38c     F3 F3 F1 EE 
1d390     EC EC EB EB 
1d394     E9 EB F3 FF 
1d398     0A 15 20 2C | 	byte	$f3, $f3, $f1, $ee, $ec, $ec, $eb, $eb, $e9, $eb, $f3, $ff, $0a, $15, $20, $2c
1d39c     38 3D 3B 38 
1d3a0     38 37 33 30 
1d3a4     30 30 31 2F 
1d3a8     2A 23 21 1F | 	byte	$38, $3d, $3b, $38, $38, $37, $33, $30, $30, $30, $31, $2f, $2a, $23, $21, $1f
1d3ac     1A 12 0E 0E 
1d3b0     0E 08 00 FF 
1d3b4     03 0B 10 13 
1d3b8     17 1D 23 25 | 	byte	$1a, $12, $0e, $0e, $0e, $08, $00, $ff, $03, $0b, $10, $13, $17, $1d, $23, $25
1d3bc     27 2B 33 37 
1d3c0     36 36 39 39 
1d3c4     33 2C 25 20 
1d3c8     18 0F 08 04 | 	byte	$27, $2b, $33, $37, $36, $36, $39, $39, $33, $2c, $25, $20, $18, $0f, $08, $04
1d3cc     03 02 01 00 
1d3d0     00 01 00 00 
1d3d4     00 00 00 01 
1d3d8     05 07 04 01 | 	byte	$03, $02, $01, $00, $00, $01, $00, $00, $00, $00, $00, $01, $05, $07, $04, $01
1d3dc     03 07 07 07 
1d3e0     09 0F 10 0B 
1d3e4     03 FE F8 F0 
1d3e8     E7 E0 DE DA | 	byte	$03, $07, $07, $07, $09, $0f, $10, $0b, $03, $fe, $f8, $f0, $e7, $e0, $de, $da
1d3ec     D4 CF CB C5 
1d3f0     BA B0 AA A8 
1d3f4     A5 A0 9C A0 
1d3f8     A9 AE B3 B6 | 	byte	$d4, $cf, $cb, $c5, $ba, $b0, $aa, $a8, $a5, $a0, $9c, $a0, $a9, $ae, $b3, $b6
1d3fc     B7 B9 C3 D1 
1d400     DA DB DF EC 
1d404     F9 FE FD F9 
1d408     FA FD FD FC | 	byte	$b7, $b9, $c3, $d1, $da, $db, $df, $ec, $f9, $fe, $fd, $f9, $fa, $fd, $fd, $fc
1d40c     FB FB FC FE 
1d410     FE FB F6 F7 
1d414     FC 00 01 05 
1d418     0B 14 1F 2B | 	byte	$fb, $fb, $fc, $fe, $fe, $fb, $f6, $f7, $fc, $00, $01, $05, $0b, $14, $1f, $2b
1d41c     37 3E 43 45 
1d420     44 40 3A 35 
1d424     2D 28 23 21 
1d428     22 21 1E 1B | 	byte	$37, $3e, $43, $45, $44, $40, $3a, $35, $2d, $28, $23, $21, $22, $21, $1e, $1b
1d42c     1A 19 15 0F 
1d430     09 04 02 00 
1d434     FF FF 03 09 
1d438     0E 13 17 1A | 	byte	$1a, $19, $15, $0f, $09, $04, $02, $00, $ff, $ff, $03, $09, $0e, $13, $17, $1a
1d43c     1B 1D 22 25 
1d440     26 27 29 2A 
1d444     2A 26 21 1C 
1d448     18 10 07 00 | 	byte	$1b, $1d, $22, $25, $26, $27, $29, $2a, $2a, $26, $21, $1c, $18, $10, $07, $00
1d44c     FE FE FD FB 
1d450     FA FA FA FA 
1d454     FB FD 02 08 
1d458     09 07 07 07 | 	byte	$fe, $fe, $fd, $fb, $fa, $fa, $fa, $fa, $fb, $fd, $02, $08, $09, $07, $07, $07
1d45c     08 08 09 08 
1d460     07 07 0C 11 
1d464     10 0B 08 02 
1d468     F9 ED E4 E0 | 	byte	$08, $08, $09, $08, $07, $07, $0c, $11, $10, $0b, $08, $02, $f9, $ed, $e4, $e0
1d46c     DD D9 D5 D2 
1d470     CE C8 BE B6 
1d474     B0 AC A9 A8 
1d478     AC B3 BB C3 | 	byte	$dd, $d9, $d5, $d2, $ce, $c8, $be, $b6, $b0, $ac, $a9, $a8, $ac, $b3, $bb, $c3
1d47c     C9 CD CF D2 
1d480     D8 E2 EA EF 
1d484     F6 FD 00 00 
1d488     FF FE FB F5 | 	byte	$c9, $cd, $cf, $d2, $d8, $e2, $ea, $ef, $f6, $fd, $00, $00, $ff, $fe, $fb, $f5
1d48c     F1 F0 F0 F2 
1d490     F4 F4 F0 EB 
1d494     ED F2 F8 FD 
1d498     00 05 0D 16 | 	byte	$f1, $f0, $f0, $f2, $f4, $f4, $f0, $eb, $ed, $f2, $f8, $fd, $00, $05, $0d, $16
1d49c     20 27 2C 31 
1d4a0     36 3A 3B 38 
1d4a4     2F 24 1B 15 
1d4a8     12 11 14 17 | 	byte	$20, $27, $2c, $31, $36, $3a, $3b, $38, $2f, $24, $1b, $15, $12, $11, $14, $17
1d4ac     19 19 19 18 
1d4b0     16 12 0C 0A 
1d4b4     0B 0D 0E 0D 
1d4b8     10 16 1E 23 | 	byte	$19, $19, $19, $18, $16, $12, $0c, $0a, $0b, $0d, $0e, $0d, $10, $16, $1e, $23
1d4bc     27 29 2C 2D 
1d4c0     2E 30 31 2F 
1d4c4     2E 2C 2A 26 
1d4c8     21 1A 12 0C | 	byte	$27, $29, $2c, $2d, $2e, $30, $31, $2f, $2e, $2c, $2a, $26, $21, $1a, $12, $0c
1d4cc     09 06 03 00 
1d4d0     FD F8 F6 F6 
1d4d4     F8 FA FE 04 
1d4d8     0A 0C 08 06 | 	byte	$09, $06, $03, $00, $fd, $f8, $f6, $f6, $f8, $fa, $fe, $04, $0a, $0c, $08, $06
1d4dc     07 07 05 01 
1d4e0     00 00 FD FE 
1d4e4     02 07 05 00 
1d4e8     F7 EE E5 DC | 	byte	$07, $07, $05, $01, $00, $00, $fd, $fe, $02, $07, $05, $00, $f7, $ee, $e5, $dc
1d4ec     D3 CD C7 C5 
1d4f0     C4 C2 BC B1 
1d4f4     A9 A5 A2 A1 
1d4f8     A3 A6 AC B7 | 	byte	$d3, $cd, $c7, $c5, $c4, $c2, $bc, $b1, $a9, $a5, $a2, $a1, $a3, $a6, $ac, $b7
1d4fc     C1 CC D6 DC 
1d500     DE DF E8 F3 
1d504     FA FD 00 02 
1d508     06 07 03 FE | 	byte	$c1, $cc, $d6, $dc, $de, $df, $e8, $f3, $fa, $fd, $00, $02, $06, $07, $03, $fe
1d50c     FA F8 F8 FA 
1d510     FC FB F7 F5 
1d514     F3 F5 F8 FF 
1d518     05 0E 16 1C | 	byte	$fa, $f8, $f8, $fa, $fc, $fb, $f7, $f5, $f3, $f5, $f8, $ff, $05, $0e, $16, $1c
1d51c     20 21 25 2B 
1d520     2E 30 33 36 
1d524     35 31 27 1D 
1d528     17 11 0E 0D | 	byte	$20, $21, $25, $2b, $2e, $30, $33, $36, $35, $31, $27, $1d, $17, $11, $0e, $0d
1d52c     0F 12 13 16 
1d530     19 19 17 17 
1d534     18 17 13 11 
1d538     11 13 16 1A | 	byte	$0f, $12, $13, $16, $19, $19, $17, $17, $18, $17, $13, $11, $11, $13, $16, $1a
1d53c     1F 24 29 2C 
1d540     2D 2B 2B 2C 
1d544     2A 25 1F 1C 
1d548     19 13 0B 06 | 	byte	$1f, $24, $29, $2c, $2d, $2b, $2b, $2c, $2a, $25, $1f, $1c, $19, $13, $0b, $06
1d54c     03 00 00 FD 
1d550     F8 F2 EE EE 
1d554     F0 F3 F8 FC 
1d558     01 06 0A 0C | 	byte	$03, $00, $00, $fd, $f8, $f2, $ee, $ee, $f0, $f3, $f8, $fc, $01, $06, $0a, $0c
1d55c     0C 0B 07 02 
1d560     FF FB F9 FA 
1d564     FA FB FF 00 
1d568     FA F4 EF EB | 	byte	$0c, $0b, $07, $02, $ff, $fb, $f9, $fa, $fa, $fb, $ff, $00, $fa, $f4, $ef, $eb
1d56c     E3 D9 D0 CA 
1d570     C5 C3 C1 BE 
1d574     BB B5 B0 AF 
1d578     B1 B2 B5 BC | 	byte	$e3, $d9, $d0, $ca, $c5, $c3, $c1, $be, $bb, $b5, $b0, $af, $b1, $b2, $b5, $bc
1d57c     C6 D2 DE E8 
1d580     F0 F3 F5 FC 
1d584     03 07 09 0B 
1d588     0E 0F 0D 09 | 	byte	$c6, $d2, $de, $e8, $f0, $f3, $f5, $fc, $03, $07, $09, $0b, $0e, $0f, $0d, $09
1d58c     04 00 00 01 
1d590     03 FF FA F7 
1d594     F4 F1 F2 F9 
1d598     03 0B 10 14 | 	byte	$04, $00, $00, $01, $03, $ff, $fa, $f7, $f4, $f1, $f2, $f9, $03, $0b, $10, $14
1d59c     1A 1E 1D 1A 
1d5a0     1B 1D 1C 1C 
1d5a4     1C 1C 1C 1B 
1d5a8     17 12 0D 07 | 	byte	$1a, $1e, $1d, $1a, $1b, $1d, $1c, $1c, $1c, $1c, $1c, $1b, $17, $12, $0d, $07
1d5ac     01 00 FF 01 
1d5b0     07 0E 13 13 
1d5b4     14 17 18 15 
1d5b8     12 11 13 18 | 	byte	$01, $00, $ff, $01, $07, $0e, $13, $13, $14, $17, $18, $15, $12, $11, $13, $18
1d5bc     1E 23 27 2A 
1d5c0     2C 2F 2F 2C 
1d5c4     2C 2C 28 22 
1d5c8     1C 16 13 0F | 	byte	$1e, $23, $27, $2a, $2c, $2f, $2f, $2c, $2c, $2c, $28, $22, $1c, $16, $13, $0f
1d5cc     09 04 02 00 
1d5d0     FF FB F8 F5 
1d5d4     F6 FA FE 01 
1d5d8     05 07 09 0E | 	byte	$09, $04, $02, $00, $ff, $fb, $f8, $f5, $f6, $fa, $fe, $01, $05, $07, $09, $0e
1d5dc     14 16 10 0A 
1d5e0     05 FF FA F6 
1d5e4     F4 F2 F0 EE 
1d5e8     EE F0 EF EB | 	byte	$14, $16, $10, $0a, $05, $ff, $fa, $f6, $f4, $f2, $f0, $ee, $ee, $f0, $ef, $eb
1d5ec     E6 DF D7 CE 
1d5f0     C5 BB B3 B3 
1d5f4     B4 B7 B5 B1 
1d5f8     AF AF B5 BC | 	byte	$e6, $df, $d7, $ce, $c5, $bb, $b3, $b3, $b4, $b7, $b5, $b1, $af, $af, $b5, $bc
1d5fc     C2 C9 D3 DF 
1d600     EA F3 FA FE 
1d604     02 08 0C 0D 
1d608     0C 0B 0A 0A | 	byte	$c2, $c9, $d3, $df, $ea, $f3, $fa, $fe, $02, $08, $0c, $0d, $0c, $0b, $0a, $0a
1d60c     0A 08 06 05 
1d610     07 05 00 FA 
1d614     F6 F5 F5 F8 
1d618     FF 07 0E 12 | 	byte	$0a, $08, $06, $05, $07, $05, $00, $fa, $f6, $f5, $f5, $f8, $ff, $07, $0e, $12
1d61c     15 15 18 1A 
1d620     1C 19 15 11 
1d624     0D 0D 10 12 
1d628     14 17 19 16 | 	byte	$15, $15, $18, $1a, $1c, $19, $15, $11, $0d, $0d, $10, $12, $14, $17, $19, $16
1d62c     0E 06 01 01 
1d630     02 05 0B 13 
1d634     1A 1C 1B 1A 
1d638     1B 1D 1E 1D | 	byte	$0e, $06, $01, $01, $02, $05, $0b, $13, $1a, $1c, $1b, $1a, $1b, $1d, $1e, $1d
1d63c     1C 21 29 2C 
1d640     2D 2D 2E 31 
1d644     32 31 2E 29 
1d648     22 1A 14 10 | 	byte	$1c, $21, $29, $2c, $2d, $2d, $2e, $31, $32, $31, $2e, $29, $22, $1a, $14, $10
1d64c     0B 06 01 FD 
1d650     F9 F7 F6 F7 
1d654     F8 F7 F8 FE 
1d658     02 04 04 06 | 	byte	$0b, $06, $01, $fd, $f9, $f7, $f6, $f7, $f8, $f7, $f8, $fe, $02, $04, $04, $06
1d65c     0B 0C 0D 0C 
1d660     07 01 FC F5 
1d664     ED E6 E3 E0 
1d668     DE DE E2 E3 | 	byte	$0b, $0c, $0d, $0c, $07, $01, $fc, $f5, $ed, $e6, $e3, $e0, $de, $de, $e2, $e3
1d66c     E2 DE D6 D2 
1d670     CC C3 B9 B3 
1d674     B2 B3 B2 B3 
1d678     B4 B6 B9 C0 | 	byte	$e2, $de, $d6, $d2, $cc, $c3, $b9, $b3, $b2, $b3, $b2, $b3, $b4, $b6, $b9, $c0
1d67c     CA D2 D8 DE 
1d680     E7 F2 FD 05 
1d684     0A 0E 11 13 
1d688     14 14 11 0E | 	byte	$ca, $d2, $d8, $de, $e7, $f2, $fd, $05, $0a, $0e, $11, $13, $14, $14, $11, $0e
1d68c     0C 0D 12 13 
1d690     11 0C 07 04 
1d694     00 00 00 03 
1d698     01 00 02 0A | 	byte	$0c, $0d, $12, $13, $11, $0c, $07, $04, $00, $00, $00, $03, $01, $00, $02, $0a
1d69c     10 0F 10 13 
1d6a0     16 15 11 0E 
1d6a4     09 06 02 04 
1d6a8     08 0E 11 11 | 	byte	$10, $0f, $10, $13, $16, $15, $11, $0e, $09, $06, $02, $04, $08, $0e, $11, $11
1d6ac     11 0E 0C 0A 
1d6b0     08 07 07 0A 
1d6b4     0E 14 1A 1C 
1d6b8     1B 1B 1E 22 | 	byte	$11, $0e, $0c, $0a, $08, $07, $07, $0a, $0e, $14, $1a, $1c, $1b, $1b, $1e, $22
1d6bc     25 25 23 24 
1d6c0     29 2E 30 2E 
1d6c4     2D 2E 2E 2B 
1d6c8     25 1E 17 10 | 	byte	$25, $25, $23, $24, $29, $2e, $30, $2e, $2d, $2e, $2e, $2b, $25, $1e, $17, $10
1d6cc     0A 06 01 FE 
1d6d0     F9 F5 F4 F4 
1d6d4     F6 F9 FD 01 
1d6d8     03 04 06 0B | 	byte	$0a, $06, $01, $fe, $f9, $f5, $f4, $f4, $f6, $f9, $fd, $01, $03, $04, $06, $0b
1d6dc     0F 0D 09 09 
1d6e0     0A 08 03 FD 
1d6e4     F6 EE E8 E1 
1d6e8     DC DA DA DC | 	byte	$0f, $0d, $09, $09, $0a, $08, $03, $fd, $f6, $ee, $e8, $e1, $dc, $da, $da, $dc
1d6ec     DD DD D8 D4 
1d6f0     CF CA C6 C3 
1d6f4     BD B8 B3 B1 
1d6f8     B0 B2 BA C3 | 	byte	$dd, $dd, $d8, $d4, $cf, $ca, $c6, $c3, $bd, $b8, $b3, $b1, $b0, $b2, $ba, $c3
1d6fc     CA D2 DA E2 
1d700     E8 ED F4 FD 
1d704     05 0A 0C 0E 
1d708     11 11 11 12 | 	byte	$ca, $d2, $da, $e2, $e8, $ed, $f4, $fd, $05, $0a, $0c, $0e, $11, $11, $11, $12
1d70c     11 0E 0C 0F 
1d710     12 0E 07 02 
1d714     03 07 0A 0B 
1d718     09 08 04 01 | 	byte	$11, $0e, $0c, $0f, $12, $0e, $07, $02, $03, $07, $0a, $0b, $09, $08, $04, $01
1d71c     01 04 08 09 
1d720     0A 09 07 05 
1d724     06 06 03 00 
1d728     FF 03 07 09 | 	byte	$01, $04, $08, $09, $0a, $09, $07, $05, $06, $06, $03, $00, $ff, $03, $07, $09
1d72c     09 0C 10 15 
1d730     16 14 12 11 
1d734     12 13 15 19 
1d738     20 26 26 24 | 	byte	$09, $0c, $10, $15, $16, $14, $12, $11, $12, $13, $15, $19, $20, $26, $26, $24
1d73c     25 2A 2C 29 
1d740     24 26 2C 32 
1d744     32 30 2D 2A 
1d748     27 22 1C 13 | 	byte	$25, $2a, $2c, $29, $24, $26, $2c, $32, $32, $30, $2d, $2a, $27, $22, $1c, $13
1d74c     0B 05 00 FC 
1d750     F9 F7 F4 F1 
1d754     EF F2 F9 FD 
1d758     FF 00 04 0A | 	byte	$0b, $05, $00, $fc, $f9, $f7, $f4, $f1, $ef, $f2, $f9, $fd, $ff, $00, $04, $0a
1d75c     0D 0C 0A 08 
1d760     05 01 FF FB 
1d764     F5 EE EA E5 
1d768     DE D9 D4 D3 | 	byte	$0d, $0c, $0a, $08, $05, $01, $ff, $fb, $f5, $ee, $ea, $e5, $de, $d9, $d4, $d3
1d76c     D3 D0 CD CC 
1d770     CA C7 C8 C9 
1d774     C8 C2 BB B4 
1d778     AF B1 B7 BF | 	byte	$d3, $d0, $cd, $cc, $ca, $c7, $c8, $c9, $c8, $c2, $bb, $b4, $af, $b1, $b7, $bf
1d77c     C9 D4 DD E5 
1d780     EC F5 FC FF 
1d784     01 05 0A 0D 
1d788     0F 11 13 14 | 	byte	$c9, $d4, $dd, $e5, $ec, $f5, $fc, $ff, $01, $05, $0a, $0d, $0f, $11, $13, $14
1d78c     16 1B 1D 18 
1d790     11 0E 0E 0E 
1d794     0E 0E 12 15 
1d798     16 15 12 0C | 	byte	$16, $1b, $1d, $18, $11, $0e, $0e, $0e, $0e, $0e, $12, $15, $16, $15, $12, $0c
1d79c     04 00 02 04 
1d7a0     02 00 FF FF 
1d7a4     00 00 00 FF 
1d7a8     FF FF FF FF | 	byte	$04, $00, $02, $04, $02, $00, $ff, $ff, $00, $00, $00, $ff, $ff, $ff, $ff, $ff
1d7ac     FF 01 06 0F 
1d7b0     14 18 18 17 
1d7b4     16 14 13 14 
1d7b8     18 1F 24 27 | 	byte	$ff, $01, $06, $0f, $14, $18, $18, $17, $16, $14, $13, $14, $18, $1f, $24, $27
1d7bc     26 25 24 24 
1d7c0     24 21 1D 1F 
1d7c4     26 2C 2D 28 
1d7c8     21 1C 19 11 | 	byte	$26, $25, $24, $24, $24, $21, $1d, $1f, $26, $2c, $2d, $28, $21, $1c, $19, $11
1d7cc     08 01 FD FA 
1d7d0     F8 F6 F5 F3 
1d7d4     F4 F6 F8 FA 
1d7d8     FC FD 00 08 | 	byte	$08, $01, $fd, $fa, $f8, $f6, $f5, $f3, $f4, $f6, $f8, $fa, $fc, $fd, $00, $08
1d7dc     0F 0F 10 10 
1d7e0     0E 08 00 F9 
1d7e4     F5 F5 F3 ED 
1d7e8     E9 E5 DF DB | 	byte	$0f, $0f, $10, $10, $0e, $08, $00, $f9, $f5, $f5, $f3, $ed, $e9, $e5, $df, $db
1d7ec     D6 D1 CC C9 
1d7f0     C9 CA D0 D3 
1d7f4     D2 CE C9 C3 
1d7f8     BC BA BD C1 | 	byte	$d6, $d1, $cc, $c9, $c9, $ca, $d0, $d3, $d2, $ce, $c9, $c3, $bc, $ba, $bd, $c1
1d7fc     C8 D1 DB E5 
1d800     EE F7 FF 04 
1d804     07 08 07 09 
1d808     0C 0D 0F 15 | 	byte	$c8, $d1, $db, $e5, $ee, $f7, $ff, $04, $07, $08, $07, $09, $0c, $0d, $0f, $15
1d80c     19 19 1B 1D 
1d810     1A 10 09 0A 
1d814     0F 14 16 17 
1d818     16 14 13 10 | 	byte	$19, $19, $1b, $1d, $1a, $10, $09, $0a, $0f, $14, $16, $17, $16, $14, $13, $10
1d81c     0B 04 FF FD 
1d820     FE FC F8 F8 
1d824     FA FC FC FC 
1d828     FD FE FC F9 | 	byte	$0b, $04, $ff, $fd, $fe, $fc, $f8, $f8, $fa, $fc, $fc, $fc, $fd, $fe, $fc, $f9
1d82c     FA FE 02 06 
1d830     0B 11 17 1C 
1d834     1D 1B 18 18 
1d838     1B 1E 21 25 | 	byte	$fa, $fe, $02, $06, $0b, $11, $17, $1c, $1d, $1b, $18, $18, $1b, $1e, $21, $25
1d83c     2B 2F 2C 26 
1d840     21 21 21 20 
1d844     1D 1F 24 27 
1d848     26 1F 17 10 | 	byte	$2b, $2f, $2c, $26, $21, $21, $21, $20, $1d, $1f, $24, $27, $26, $1f, $17, $10
1d84c     0A 05 00 FD 
1d850     FB FB F7 F3 
1d854     F4 FA FE FE 
1d858     FA F7 FD 05 | 	byte	$0a, $05, $00, $fd, $fb, $fb, $f7, $f3, $f4, $fa, $fe, $fe, $fa, $f7, $fd, $05
1d85c     0A 0D 10 12 
1d860     11 0B 01 F7 
1d864     F0 ED EA E8 
1d868     E7 E4 E0 DC | 	byte	$0a, $0d, $10, $12, $11, $0b, $01, $f7, $f0, $ed, $ea, $e8, $e7, $e4, $e0, $dc
1d86c     D7 D1 C9 C2 
1d870     C0 C1 C6 CB 
1d874     CF CE CB C4 
1d878     C0 C0 C3 C7 | 	byte	$d7, $d1, $c9, $c2, $c0, $c1, $c6, $cb, $cf, $ce, $cb, $c4, $c0, $c0, $c3, $c7
1d87c     CA CD D2 D9 
1d880     E4 F4 00 03 
1d884     06 09 0E 10 
1d888     0D 0A 0E 16 | 	byte	$ca, $cd, $d2, $d9, $e4, $f4, $00, $03, $06, $09, $0e, $10, $0d, $0a, $0e, $16
1d88c     1E 22 23 1F 
1d890     1C 19 18 15 
1d894     15 18 1C 1F 
1d898     20 1F 1A 16 | 	byte	$1e, $22, $23, $1f, $1c, $19, $18, $15, $15, $18, $1c, $1f, $20, $1f, $1a, $16
1d89c     12 0D 08 02 
1d8a0     FF FD FB F9 
1d8a4     F9 FB FC FB 
1d8a8     FC FB FD FC | 	byte	$12, $0d, $08, $02, $ff, $fd, $fb, $f9, $f9, $fb, $fc, $fb, $fc, $fb, $fd, $fc
1d8ac     F9 F9 FF 03 
1d8b0     06 07 0B 12 
1d8b4     18 1B 1B 1B 
1d8b8     1E 20 20 21 | 	byte	$f9, $f9, $ff, $03, $06, $07, $0b, $12, $18, $1b, $1b, $1b, $1e, $20, $20, $21
1d8bc     25 2A 2B 2A 
1d8c0     28 23 1D 19 
1d8c4     19 1B 1B 1A 
1d8c8     1B 1A 15 0D | 	byte	$25, $2a, $2b, $2a, $28, $23, $1d, $19, $19, $1b, $1b, $1a, $1b, $1a, $15, $0d
1d8cc     06 01 FE FB 
1d8d0     F7 F4 F2 F1 
1d8d4     F1 F3 F7 FB 
1d8d8     FA F6 F6 FC | 	byte	$06, $01, $fe, $fb, $f7, $f4, $f2, $f1, $f1, $f3, $f7, $fb, $fa, $f6, $f6, $fc
1d8dc     01 06 0B 0F 
1d8e0     0F 0B 03 FC 
1d8e4     F5 F0 EA E4 
1d8e8     E0 DF E0 DF | 	byte	$01, $06, $0b, $0f, $0f, $0b, $03, $fc, $f5, $f0, $ea, $e4, $e0, $df, $e0, $df
1d8ec     DA D5 D0 CD 
1d8f0     CA C5 C7 CB 
1d8f4     CC CD CE CD 
1d8f8     CA CB CF D6 | 	byte	$da, $d5, $d0, $cd, $ca, $c5, $c7, $cb, $cc, $cd, $ce, $cd, $ca, $cb, $cf, $d6
1d8fc     DA DB DA DA 
1d900     E1 F0 FC 03 
1d904     08 0C 0F 12 
1d908     13 13 14 16 | 	byte	$da, $db, $da, $da, $e1, $f0, $fc, $03, $08, $0c, $0f, $12, $13, $13, $14, $16
1d90c     1B 22 29 29 
1d910     24 1E 1D 1B 
1d914     1B 19 17 18 
1d918     17 19 1B 18 | 	byte	$1b, $22, $29, $29, $24, $1e, $1d, $1b, $1b, $19, $17, $18, $17, $19, $1b, $18
1d91c     12 0A 04 FE 
1d920     F9 F6 F5 F4 
1d924     F2 F3 F5 F5 
1d928     F5 F3 F1 F2 | 	byte	$12, $0a, $04, $fe, $f9, $f6, $f5, $f4, $f2, $f3, $f5, $f5, $f5, $f3, $f1, $f2
1d92c     F5 F7 F8 FB 
1d930     FF 03 05 07 
1d934     0A 0E 14 1A 
1d938     1E 20 22 20 | 	byte	$f5, $f7, $f8, $fb, $ff, $03, $05, $07, $0a, $0e, $14, $1a, $1e, $20, $22, $20
1d93c     21 23 25 26 
1d940     25 26 23 1B 
1d944     13 11 16 18 
1d948     16 11 0D 0B | 	byte	$21, $23, $25, $26, $25, $26, $23, $1b, $13, $11, $16, $18, $16, $11, $0d, $0b
1d94c     06 02 00 00 
1d950     FF FD F9 F6 
1d954     F7 FA FC FC 
1d958     FA FA FD 00 | 	byte	$06, $02, $00, $00, $ff, $fd, $f9, $f6, $f7, $fa, $fc, $fc, $fa, $fa, $fd, $00
1d95c     03 05 09 0F 
1d960     10 0E 08 02 
1d964     FE F9 F3 EC 
1d968     E5 DF DB DA | 	byte	$03, $05, $09, $0f, $10, $0e, $08, $02, $fe, $f9, $f3, $ec, $e5, $df, $db, $da
1d96c     DB DB D7 D7 
1d970     D7 D5 D3 D1 
1d974     D1 D1 CD CC 
1d978     CC D2 D8 DF | 	byte	$db, $db, $d7, $d7, $d7, $d5, $d3, $d1, $d1, $d1, $cd, $cc, $cc, $d2, $d8, $df
1d97c     E2 E4 E5 E5 
1d980     E6 ED F4 FA 
1d984     FF 06 0C 0B 
1d988     09 0C 13 16 | 	byte	$e2, $e4, $e5, $e5, $e6, $ed, $f4, $fa, $ff, $06, $0c, $0b, $09, $0c, $13, $16
1d98c     17 19 1E 22 
1d990     23 21 22 21 
1d994     1E 19 17 15 
1d998     12 10 13 16 | 	byte	$17, $19, $1e, $22, $23, $21, $22, $21, $1e, $19, $17, $15, $12, $10, $13, $16
1d99c     12 0B 03 FD 
1d9a0     F7 F2 F0 F1 
1d9a4     F1 EF EF F1 
1d9a8     F3 F2 F3 F2 | 	byte	$12, $0b, $03, $fd, $f7, $f2, $f0, $f1, $f1, $ef, $ef, $f1, $f3, $f2, $f3, $f2
1d9ac     F4 F7 FD 02 
1d9b0     03 01 02 07 
1d9b4     0B 0D 0F 14 
1d9b8     1C 24 2B 29 | 	byte	$f4, $f7, $fd, $02, $03, $01, $02, $07, $0b, $0d, $0f, $14, $1c, $24, $2b, $29
1d9bc     25 25 26 25 
1d9c0     23 22 20 1E 
1d9c4     1A 13 0F 0E 
1d9c8     0F 0D 08 03 | 	byte	$25, $25, $26, $25, $23, $22, $20, $1e, $1a, $13, $0f, $0e, $0f, $0d, $08, $03
1d9cc     FF FE 00 00 
1d9d0     00 FE FC FC 
1d9d4     FA F9 F9 FA 
1d9d8     FA F8 F8 FC | 	byte	$ff, $fe, $00, $00, $00, $fe, $fc, $fc, $fa, $f9, $f9, $fa, $fa, $f8, $f8, $fc
1d9dc     01 04 06 09 
1d9e0     09 06 04 01 
1d9e4     00 FD F8 F1 
1d9e8     E8 E0 DB D6 | 	byte	$01, $04, $06, $09, $09, $06, $04, $01, $00, $fd, $f8, $f1, $e8, $e0, $db, $d6
1d9ec     D3 D3 D6 DD 
1d9f0     E1 E1 DF DE 
1d9f4     DE DB D6 D5 
1d9f8     D5 D6 DC E9 | 	byte	$d3, $d3, $d6, $dd, $e1, $e1, $df, $de, $de, $db, $d6, $d5, $d5, $d6, $dc, $e9
1d9fc     F1 F3 F2 F2 
1da00     F6 FA FB FA 
1da04     FB 00 09 0D 
1da08     0D 0D 10 17 | 	byte	$f1, $f3, $f2, $f2, $f6, $fa, $fb, $fa, $fb, $00, $09, $0d, $0d, $0d, $10, $17
1da0c     1C 1F 1F 1F 
1da10     21 24 27 2B 
1da14     2B 25 1F 1A 
1da18     16 12 12 12 | 	byte	$1c, $1f, $1f, $1f, $21, $24, $27, $2b, $2b, $25, $1f, $1a, $16, $12, $12, $12
1da1c     0D 06 01 FE 
1da20     F9 F1 EA E9 
1da24     EB E9 E7 E7 
1da28     E7 E7 E9 EC | 	byte	$0d, $06, $01, $fe, $f9, $f1, $ea, $e9, $eb, $e9, $e7, $e7, $e7, $e7, $e9, $ec
1da2c     ED F0 F5 FB 
1da30     00 01 00 FD 
1da34     FD 00 04 08 
1da38     0E 15 1C 23 | 	byte	$ed, $f0, $f5, $fb, $00, $01, $00, $fd, $fd, $00, $04, $08, $0e, $15, $1c, $23
1da3c     25 23 22 20 
1da40     1F 1C 18 13 
1da44     0F 0D 0C 09 
1da48     04 01 00 00 | 	byte	$25, $23, $22, $20, $1f, $1c, $18, $13, $0f, $0d, $0c, $09, $04, $01, $00, $00
1da4c     FE FB FA FC 
1da50     FF FF FE FD 
1da54     FC FE FF FD 
1da58     F9 F8 FA FF | 	byte	$fe, $fb, $fa, $fc, $ff, $ff, $fe, $fd, $fc, $fe, $ff, $fd, $f9, $f8, $fa, $ff
1da5c     02 05 08 0D 
1da60     0F 0B 07 06 
1da64     07 06 01 FC 
1da68     F5 EE E6 DD | 	byte	$02, $05, $08, $0d, $0f, $0b, $07, $06, $07, $06, $01, $fc, $f5, $ee, $e6, $dd
1da6c     D9 D7 D7 DA 
1da70     E1 E9 EB EB 
1da74     EC EA E6 E2 
1da78     E0 DE E2 E9 | 	byte	$d9, $d7, $d7, $da, $e1, $e9, $eb, $eb, $ec, $ea, $e6, $e2, $e0, $de, $e2, $e9
1da7c     F2 FB FF 00 
1da80     00 02 04 02 
1da84     FF FD 00 03 
1da88     08 0A 0D 11 | 	byte	$f2, $fb, $ff, $00, $00, $02, $04, $02, $ff, $fd, $00, $03, $08, $0a, $0d, $11
1da8c     16 19 1B 1E 
1da90     1E 1D 20 25 
1da94     28 28 25 1F 
1da98     18 13 12 11 | 	byte	$16, $19, $1b, $1e, $1e, $1d, $20, $25, $28, $28, $25, $1f, $18, $13, $12, $11
1da9c     0C 01 F9 F7 
1daa0     F8 F6 EF E8 
1daa4     E5 E4 E4 E2 
1daa8     E1 E2 E2 E7 | 	byte	$0c, $01, $f9, $f7, $f8, $f6, $ef, $e8, $e5, $e4, $e4, $e2, $e1, $e2, $e2, $e7
1daac     EC F0 F5 FC 
1dab0     00 01 02 02 
1dab4     03 03 02 05 
1dab8     0C 14 1A 1D | 	byte	$ec, $f0, $f5, $fc, $00, $01, $02, $02, $03, $03, $02, $05, $0c, $14, $1a, $1d
1dabc     1F 23 27 27 
1dac0     23 1E 1A 15 
1dac4     0D 07 04 05 
1dac8     04 01 FC F7 | 	byte	$1f, $23, $27, $27, $23, $1e, $1a, $15, $0d, $07, $04, $05, $04, $01, $fc, $f7
1dacc     F9 FE 00 FC 
1dad0     F9 FA FE 00 
1dad4     FD FA FC FE 
1dad8     FD F7 F4 F8 | 	byte	$f9, $fe, $00, $fc, $f9, $fa, $fe, $00, $fd, $fa, $fc, $fe, $fd, $f7, $f4, $f8
1dadc     00 04 01 01 
1dae0     07 0A 0A 07 
1dae4     07 07 05 01 
1dae8     FA F1 E9 E1 | 	byte	$00, $04, $01, $01, $07, $0a, $0a, $07, $07, $07, $05, $01, $fa, $f1, $e9, $e1
1daec     DD D8 D6 D6 
1daf0     DA DD E3 EA 
1daf4     EE F0 EF ED 
1daf8     EB E9 E8 EB | 	byte	$dd, $d8, $d6, $d6, $da, $dd, $e3, $ea, $ee, $f0, $ef, $ed, $eb, $e9, $e8, $eb
1dafc     F0 F5 FB 02 
1db00     09 0B 0B 0A 
1db04     08 05 04 03 
1db08     03 03 07 0D | 	byte	$f0, $f5, $fb, $02, $09, $0b, $0b, $0a, $08, $05, $04, $03, $03, $03, $07, $0d
1db0c     15 19 18 19 
1db10     1D 21 22 21 
1db14     21 26 2A 27 
1db18     22 1C 18 15 | 	byte	$15, $19, $18, $19, $1d, $21, $22, $21, $21, $26, $2a, $27, $22, $1c, $18, $15
1db1c     13 0B FF F6 
1db20     F6 F8 F7 F2 
1db24     EB E5 E3 E1 
1db28     DF DE DF E1 | 	byte	$13, $0b, $ff, $f6, $f6, $f8, $f7, $f2, $eb, $e5, $e3, $e1, $df, $de, $df, $e1
1db2c     E4 E8 EF F7 
1db30     FD 00 01 01 
1db34     03 06 08 07 
1db38     07 0B 11 16 | 	byte	$e4, $e8, $ef, $f7, $fd, $00, $01, $01, $03, $06, $08, $07, $07, $0b, $11, $16
1db3c     17 17 1A 1E 
1db40     23 22 1D 16 
1db44     0C 03 FE F9 
1db48     F4 F2 F4 F5 | 	byte	$17, $17, $1a, $1e, $23, $22, $1d, $16, $0c, $03, $fe, $f9, $f4, $f2, $f4, $f5
1db4c     F5 F3 F5 F8 
1db50     FB FB F8 F9 
1db54     FB FC FA F9 
1db58     F8 F6 F4 F5 | 	byte	$f5, $f3, $f5, $f8, $fb, $fb, $f8, $f9, $fb, $fc, $fa, $f9, $f8, $f6, $f4, $f5
1db5c     FA FF 00 FF 
1db60     00 04 08 0B 
1db64     0B 0A 08 03 
1db68     FF FA F4 EB | 	byte	$fa, $ff, $00, $ff, $00, $04, $08, $0b, $0b, $0a, $08, $03, $ff, $fa, $f4, $eb
1db6c     E5 E3 E3 E1 
1db70     E0 E1 E2 E7 
1db74     EF F7 F9 F8 
1db78     FA FA F9 F9 | 	byte	$e5, $e3, $e3, $e1, $e0, $e1, $e2, $e7, $ef, $f7, $f9, $f8, $fa, $fa, $f9, $f9
1db7c     FA FD FF 03 
1db80     08 0E 13 13 
1db84     11 0E 0F 10 
1db88     0C 05 02 04 | 	byte	$fa, $fd, $ff, $03, $08, $0e, $13, $13, $11, $0e, $0f, $10, $0c, $05, $02, $04
1db8c     0B 11 16 18 
1db90     18 1A 1C 1D 
1db94     1C 1A 1C 1F 
1db98     22 1F 1B 17 | 	byte	$0b, $11, $16, $18, $18, $1a, $1c, $1d, $1c, $1a, $1c, $1f, $22, $1f, $1b, $17
1db9c     11 09 00 F9 
1dba0     F4 F1 EF ED 
1dba4     E9 E4 DF DC 
1dba8     D9 D7 D8 D9 | 	byte	$11, $09, $00, $f9, $f4, $f1, $ef, $ed, $e9, $e4, $df, $dc, $d9, $d7, $d8, $d9
1dbac     DB DF E4 EB 
1dbb0     F2 F8 FB FF 
1dbb4     03 06 07 07 
1dbb8     0A 0F 11 12 | 	byte	$db, $df, $e4, $eb, $f2, $f8, $fb, $ff, $03, $06, $07, $07, $0a, $0f, $11, $12
1dbbc     11 11 15 18 
1dbc0     1B 1F 21 1C 
1dbc4     15 0C 03 FC 
1dbc8     F5 ED E9 EB | 	byte	$11, $11, $15, $18, $1b, $1f, $21, $1c, $15, $0c, $03, $fc, $f5, $ed, $e9, $eb
1dbcc     F2 F6 F6 F6 
1dbd0     F6 F9 FD FE 
1dbd4     FC F9 FA FD 
1dbd8     FE FC F9 F7 | 	byte	$f2, $f6, $f6, $f6, $f6, $f9, $fd, $fe, $fc, $f9, $fa, $fd, $fe, $fc, $f9, $f7
1dbdc     FA FE FE FD 
1dbe0     00 03 05 07 
1dbe4     09 0C 0D 09 
1dbe8     03 FD FA F4 | 	byte	$fa, $fe, $fe, $fd, $00, $03, $05, $07, $09, $0c, $0d, $09, $03, $fd, $fa, $f4
1dbec     EE EA E7 E5 
1dbf0     E3 E3 E3 E5 
1dbf4     EA F0 F7 FC 
1dbf8     FF 00 03 04 | 	byte	$ee, $ea, $e7, $e5, $e3, $e3, $e3, $e5, $ea, $f0, $f7, $fc, $ff, $00, $03, $04
1dbfc     06 06 06 06 
1dc00     06          | 	byte	$06[5]
1dc01     09 0F 16 17 
1dc05     16 15 16 16 
1dc09     13 0C 07 06 
1dc0d     0A 11 16 17 | 	byte	$09, $0f, $16, $17, $16, $15, $16, $16, $13, $0c, $07, $06, $0a, $11, $16, $17
1dc11     15 14 16 18 
1dc15     1A 1A 1A 1A 
1dc19     1A 1A 19 15 
1dc1d     0D 02 FD FA | 	byte	$15, $14, $16, $18, $1a, $1a, $1a, $1a, $1a, $1a, $19, $15, $0d, $02, $fd, $fa
1dc21     F8 F5 EE E6 
1dc25     E1 DF DF DB 
1dc29     D7 D5 D5 D6 
1dc2d     D6 DA E1 E8 | 	byte	$f8, $f5, $ee, $e6, $e1, $df, $df, $db, $d7, $d5, $d5, $d6, $d6, $da, $e1, $e8
1dc31     EE F4 FA FF 
1dc35     03 08 0B 0B 
1dc39     0C 0E 10 10 
1dc3d     10 0F 11 15 | 	byte	$ee, $f4, $fa, $ff, $03, $08, $0b, $0b, $0c, $0e, $10, $10, $10, $0f, $11, $15
1dc41     17 18 17 15 
1dc45     11 09 01 FA 
1dc49     F2 EC E8 E7 
1dc4d     E9 ED F3 F5 | 	byte	$17, $18, $17, $15, $11, $09, $01, $fa, $f2, $ec, $e8, $e7, $e9, $ed, $f3, $f5
1dc51     F3 F3 F7 FA 
1dc55     FA F8 F7 F9 
1dc59     FC FF FD FA 
1dc5d     F8 FA FE 00 | 	byte	$f3, $f3, $f7, $fa, $fa, $f8, $f7, $f9, $fc, $ff, $fd, $fa, $f8, $fa, $fe, $00
1dc61     01 01 02 04 
1dc65     07 09 0A 08 
1dc69     03 00 FA F6 
1dc6d     F2 ED EB EA | 	byte	$01, $01, $02, $04, $07, $09, $0a, $08, $03, $00, $fa, $f6, $f2, $ed, $eb, $ea
1dc71     E9 E8 EA EE 
1dc75     F2 F5 FA 01 
1dc79     08 0D 13 18 
1dc7d     1B 19 15 14 | 	byte	$e9, $e8, $ea, $ee, $f2, $f5, $fa, $01, $08, $0d, $13, $18, $1b, $19, $15, $14
1dc81     15 19 1C 1F 
1dc85     23 24 23 22 
1dc89     21 1E 19 14 
1dc8d     13 14 16 16 | 	byte	$15, $19, $1c, $1f, $23, $24, $23, $22, $21, $1e, $19, $14, $13, $14, $16, $16
1dc91     14 11 0F 11 
1dc95     16 18 18 16 
1dc99     13 11 11 11 
1dc9d     0C 05 FE F9 | 	byte	$14, $11, $0f, $11, $16, $18, $18, $16, $13, $11, $11, $11, $0c, $05, $fe, $f9
1dca1     F6 F5 F1 E9 
1dca5     DD D5 D4 D9 
1dca9     D9 D2 C9 C6 
1dcad     CD D2 D5 D9 | 	byte	$f6, $f5, $f1, $e9, $dd, $d5, $d4, $d9, $d9, $d2, $c9, $c6, $cd, $d2, $d5, $d9
1dcb1     DF E5 ED F4 
1dcb5     FA FD 00 06 
1dcb9     0C 0C 0A 0A 
1dcbd     0D 0F 0F 0E | 	byte	$df, $e5, $ed, $f4, $fa, $fd, $00, $06, $0c, $0c, $0a, $0a, $0d, $0f, $0f, $0e
1dcc1     0E 11 13 11 
1dcc5     0E 0C 09 04 
1dcc9     FD F6 F1 EE 
1dccd     EC ED ED EF | 	byte	$0e, $11, $13, $11, $0e, $0c, $09, $04, $fd, $f6, $f1, $ee, $ec, $ed, $ed, $ef
1dcd1     F3 F6 F7 F7 
1dcd5     F8 F8 FA FA 
1dcd9     FB FD FE FF 
1dcdd     FD FA F9 FD | 	byte	$f3, $f6, $f7, $f7, $f8, $f8, $fa, $fa, $fb, $fd, $fe, $ff, $fd, $fa, $f9, $fd
1dce1     00 01 00 FF 
1dce5     FF 01 03 04 
1dce9     05 04 FF F9 
1dced     F4 F0 ED EA | 	byte	$00, $01, $00, $ff, $ff, $01, $03, $04, $05, $04, $ff, $f9, $f4, $f0, $ed, $ea
1dcf1     EB EB EB ED 
1dcf5     F0 F4 F8 FD 
1dcf9     04 0F 19 20 
1dcfd     23 21 21 20 | 	byte	$eb, $eb, $eb, $ed, $f0, $f4, $f8, $fd, $04, $0f, $19, $20, $23, $21, $21, $20
1dd01     20 23 26 27 
1dd05     28 2A 29 28 
1dd09     27 27 26 24 
1dd0d     22 1E 1B 18 | 	byte	$20, $23, $26, $27, $28, $2a, $29, $28, $27, $27, $26, $24, $22, $1e, $1b, $18
1dd11     14 10 0D 0B 
1dd15     0D 10 11 10 
1dd19     11 10 0E 0C 
1dd1d     09 06 02 FE | 	byte	$14, $10, $0d, $0b, $0d, $10, $11, $10, $11, $10, $0e, $0c, $09, $06, $02, $fe
1dd21     F9 F3 ED E9 
1dd25     E3 DC D5 CF 
1dd29     D1 D2 CC C4 
1dd2d     C1 C6 CD D2 | 	byte	$f9, $f3, $ed, $e9, $e3, $dc, $d5, $cf, $d1, $d2, $cc, $c4, $c1, $c6, $cd, $d2
1dd31     D5 D9 E0 E7 
1dd35     EF F6 F8 FC 
1dd39     01 07 0A 0A 
1dd3d     0A 0C 0D 0F | 	byte	$d5, $d9, $e0, $e7, $ef, $f6, $f8, $fc, $01, $07, $0a, $0a, $0a, $0c, $0d, $0f
1dd41     0F 0E 0B 0B 
1dd45     0C 0C 0A 06 
1dd49     01 FF FB F7 
1dd4d     F4 F2 F1 EF | 	byte	$0f, $0e, $0b, $0b, $0c, $0c, $0a, $06, $01, $ff, $fb, $f7, $f4, $f2, $f1, $ef
1dd51     EE F0 F5 F8 
1dd55     F9 FB FD FC 
1dd59     FB FC FD FF 
1dd5d     FF FE FE FE | 	byte	$ee, $f0, $f5, $f8, $f9, $fb, $fd, $fc, $fb, $fc, $fd, $ff, $ff, $fe, $fe, $fe
1dd61     FB F9 FA FB 
1dd65     FA F9 FA FD 
1dd69     00 02 01 FD 
1dd6d     F7 F0 ED EB | 	byte	$fb, $f9, $fa, $fb, $fa, $f9, $fa, $fd, $00, $02, $01, $fd, $f7, $f0, $ed, $eb
1dd71     EB EB ED EF 
1dd75     F0 F0 F6 FE 
1dd79     03 0A 16 24 
1dd7d     29 27 27 29 | 	byte	$eb, $eb, $ed, $ef, $f0, $f0, $f6, $fe, $03, $0a, $16, $24, $29, $27, $27, $29
1dd81     2D 30 32 33 
1dd85     35 37 34 32 
1dd89     2E 2E 30 33 
1dd8d     32 2D 26 20 | 	byte	$2d, $30, $32, $33, $35, $37, $34, $32, $2e, $2e, $30, $33, $32, $2d, $26, $20
1dd91     1A 14 10 0D 
1dd95     0B 09 09 0A 
1dd99     0A 0C 0D 0C 
1dd9d     08 03 02 00 | 	byte	$1a, $14, $10, $0d, $0b, $09, $09, $0a, $0a, $0c, $0d, $0c, $08, $03, $02, $00
1dda1     FC F4 EA E4 
1dda5     E0 DC D6 CF 
1dda9     C8 C3 C3 C3 
1ddad     C0 BC BF C6 | 	byte	$fc, $f4, $ea, $e4, $e0, $dc, $d6, $cf, $c8, $c3, $c3, $c3, $c0, $bc, $bf, $c6
1ddb1     CA CC D0 D6 
1ddb5     DF E7 EE F2 
1ddb9     F6 FA 00 05 
1ddbd     08 09 08 09 | 	byte	$ca, $cc, $d0, $d6, $df, $e7, $ee, $f2, $f6, $fa, $00, $05, $08, $09, $08, $09
1ddc1     0B 0E 0D 0C 
1ddc5     0B 0C 0D 0A 
1ddc9     05 02 01 00 
1ddcd     FE FB F9 F5 | 	byte	$0b, $0e, $0d, $0c, $0b, $0c, $0d, $0a, $05, $02, $01, $00, $fe, $fb, $f9, $f5
1ddd1     F2 F2 F5 F7 
1ddd5     FB FE 00 00 
1ddd9     FF FC FC 00 
1dddd     01 FF FE FE | 	byte	$f2, $f2, $f5, $f7, $fb, $fe, $00, $00, $ff, $fc, $fc, $00, $01, $ff, $fe, $fe
1dde1     FD FB F7 F4 
1dde5     F5 F6 F6 F8 
1dde9     FB FE FF FE 
1dded     FA F5 F1 EF | 	byte	$fd, $fb, $f7, $f4, $f5, $f6, $f6, $f8, $fb, $fe, $ff, $fe, $fa, $f5, $f1, $ef
1ddf1     EE ED ED EF 
1ddf5     F1 F2 F3 F8 
1ddf9     01 0C 17 1F 
1ddfd     26 2C 2E 30 | 	byte	$ee, $ed, $ed, $ef, $f1, $f2, $f3, $f8, $01, $0c, $17, $1f, $26, $2c, $2e, $30
1de01     36 3D 3E 3E 
1de05     3F 41 41 3D 
1de09     38 35 38 3B 
1de0d     3B 37 33 2B | 	byte	$36, $3d, $3e, $3e, $3f, $41, $41, $3d, $38, $35, $38, $3b, $3b, $37, $33, $2b
1de11     21 19 15 12 
1de15     0E 0A 06 04 
1de19     03 05 07 08 
1de1d     07 03 00 FF | 	byte	$21, $19, $15, $12, $0e, $0a, $06, $04, $03, $05, $07, $08, $07, $03, $00, $ff
1de21     FE F9 EE E3 
1de25     DC D7 D3 CD 
1de29     C7 C1 BB B6 
1de2d     B7 B9 BA BA | 	byte	$fe, $f9, $ee, $e3, $dc, $d7, $d3, $cd, $c7, $c1, $bb, $b6, $b7, $b9, $ba, $ba
1de31     BD C0 C3 C7 
1de35     CF D7 DE E5 
1de39     EC F3 F7 FA 
1de3d     00 02 04 05 | 	byte	$bd, $c0, $c3, $c7, $cf, $d7, $de, $e5, $ec, $f3, $f7, $fa, $00, $02, $04, $05
1de41     05 06 07 0B 
1de45     0E 0D 0A 07 
1de49     05 03 02 02 
1de4d     01 00 FE FB | 	byte	$05, $06, $07, $0b, $0e, $0d, $0a, $07, $05, $03, $02, $02, $01, $00, $fe, $fb
1de51     F9 F8 F9 FB 
1de55     FF 00 01 02 
1de59     03 05 05 04 
1de5d     03 02 02 00 | 	byte	$f9, $f8, $f9, $fb, $ff, $00, $01, $02, $03, $05, $05, $04, $03, $02, $02, $00
1de61     FE FA F6 F4 
1de65     F4 F5 F4 F4 
1de69     F6 F7 F8 FA 
1de6d     FB FB F7 F3 | 	byte	$fe, $fa, $f6, $f4, $f4, $f5, $f4, $f4, $f6, $f7, $f8, $fa, $fb, $fb, $f7, $f3
1de71     F0 EF F0 EF 
1de75     ED ED F1 F5 
1de79     FB 04 0F 17 
1de7d     1B 1F 26 2D | 	byte	$f0, $ef, $f0, $ef, $ed, $ed, $f1, $f5, $fb, $04, $0f, $17, $1b, $1f, $26, $2d
1de81     34 38 3A 3D 
1de85     3F 40 3F 3F 
1de89     3D 3C 3B 3B 
1de8d     3B 3A 37 32 | 	byte	$34, $38, $3a, $3d, $3f, $40, $3f, $3f, $3d, $3c, $3b, $3b, $3b, $3a, $37, $32
1de91     2B 24 1E 18 
1de95     14 11 0E 0A 
1de99     07 0B 0E 0E 
1de9d     0D 0F 10 0A | 	byte	$2b, $24, $1e, $18, $14, $11, $0e, $0a, $07, $0b, $0e, $0e, $0d, $0f, $10, $0a
1dea1     04 02 FF F9 
1dea5     EF E6 DE D5 
1dea9     CE C7 C3 BC 
1dead     B5 B5 B8 BB | 	byte	$04, $02, $ff, $f9, $ef, $e6, $de, $d5, $ce, $c7, $c3, $bc, $b5, $b5, $b8, $bb
1deb1     BA BA BD C2 
1deb5     C6 CC D4 DE 
1deb9     E5 EB F0 F4 
1debd     F7 FA FF 01 | 	byte	$ba, $ba, $bd, $c2, $c6, $cc, $d4, $de, $e5, $eb, $f0, $f4, $f7, $fa, $ff, $01
1dec1     02 02 04 06 
1dec5     08 0C 0C 07 
1dec9     01 00 00 00 
1decd     00 FD FB FB | 	byte	$02, $02, $04, $06, $08, $0c, $0c, $07, $01, $00, $00, $00, $00, $fd, $fb, $fb
1ded1     FB FC FF 03 
1ded5     05 05 06 06 
1ded9     03 04 09 0C 
1dedd     0A 07 03 00 | 	byte	$fb, $fc, $ff, $03, $05, $05, $06, $06, $03, $04, $09, $0c, $0a, $07, $03, $00
1dee1     FE FA F4 EF 
1dee5     F0 F4 F5 F2 
1dee9     EF EE F0 F2 
1deed     F4 F6 F7 F5 | 	byte	$fe, $fa, $f4, $ef, $f0, $f4, $f5, $f2, $ef, $ee, $f0, $f2, $f4, $f6, $f7, $f5
1def1     F2 F0 EE EC 
1def5     EA E9 EA EC 
1def9     F1 F9 02 0C 
1defd     12 14 18 20 | 	byte	$f2, $f0, $ee, $ec, $ea, $e9, $ea, $ec, $f1, $f9, $02, $0c, $12, $14, $18, $20
1df01     2A 31 35 35 
1df05     37 39 3B 3E 
1df09     3E 3C 39 36 
1df0d     34 34 34 32 | 	byte	$2a, $31, $35, $35, $37, $39, $3b, $3e, $3e, $3c, $39, $36, $34, $34, $34, $32
1df11     2F 2B 28 24 
1df15     1F 1A 17 13 
1df19     12 14 18 1B 
1df1d     1A 18 19 1B | 	byte	$2f, $2b, $28, $24, $1f, $1a, $17, $13, $12, $14, $18, $1b, $1a, $18, $19, $1b
1df21     1A 14 0E 09 
1df25     03 FC F1 E6 
1df29     D9 CF C8 C3 
1df2d     C0 BA B6 B5 | 	byte	$1a, $14, $0e, $09, $03, $fc, $f1, $e6, $d9, $cf, $c8, $c3, $c0, $ba, $b6, $b5
1df31     B8 B8 B8 B9 
1df35     BE C4 CB D3 
1df39     DD E3 E8 EE 
1df3d     F2 F7 FA FC | 	byte	$b8, $b8, $b8, $b9, $be, $c4, $cb, $d3, $dd, $e3, $e8, $ee, $f2, $f7, $fa, $fc
1df41     FE FF 00 02 
1df45     04 04 02 02 
1df49     01 00 FD FD 
1df4d     FF FD F9 F6 | 	byte	$fe, $ff, $00, $02, $04, $04, $02, $02, $01, $00, $fd, $fd, $ff, $fd, $f9, $f6
1df51     F6 FA FF 03 
1df55     08 0D 0D 0A 
1df59     08 0B 0E 10 
1df5d     10 0E 0A 05 | 	byte	$f6, $fa, $ff, $03, $08, $0d, $0d, $0a, $08, $0b, $0e, $10, $10, $0e, $0a, $05
1df61     00 FC F6 F4 
1df65     F3 F3 F4 F4 
1df69     F2 EE EC EF 
1df6d     F2 F5 F6 F6 | 	byte	$00, $fc, $f6, $f4, $f3, $f3, $f4, $f4, $f2, $ee, $ec, $ef, $f2, $f5, $f6, $f6
1df71     F6 F4 F2 EE 
1df75     E9 E8 E8 E9 
1df79     EB F1 F8 00 
1df7d     08 0D 12 19 | 	byte	$f6, $f4, $f2, $ee, $e9, $e8, $e8, $e9, $eb, $f1, $f8, $00, $08, $0d, $12, $19
1df81     21 27 2B 2D 
1df85     2F 30 33 37 
1df89     39 38 35 31 
1df8d     2D 2A 26 25 | 	byte	$21, $27, $2b, $2d, $2f, $30, $33, $37, $39, $38, $35, $31, $2d, $2a, $26, $25
1df91     25 24 25 24 
1df95     22 20 1C 17 
1df99     16 16 19 1B 
1df9d     1D 1E 1E 1F | 	byte	$25, $24, $25, $24, $22, $20, $1c, $17, $16, $16, $19, $1b, $1d, $1e, $1e, $1f
1dfa1     21 21 1D 16 
1dfa5     0F 09 02 F9 
1dfa9     EB DE D1 C9 
1dfad     C4 C1 BB B4 | 	byte	$21, $21, $1d, $16, $0f, $09, $02, $f9, $eb, $de, $d1, $c9, $c4, $c1, $bb, $b4
1dfb1     B3 B7 B8 B9 
1dfb5     B9 BE C6 CF 
1dfb9     D8 E0 E4 E8 
1dfbd     EE F2 F6 F9 | 	byte	$b3, $b7, $b8, $b9, $b9, $be, $c6, $cf, $d8, $e0, $e4, $e8, $ee, $f2, $f6, $f9
1dfc1     FC FE 00 01 
1dfc5     02 04 02 00 
1dfc9     FC FE 00 FE 
1dfcd     FC FA F9 F8 | 	byte	$fc, $fe, $00, $01, $02, $04, $02, $00, $fc, $fe, $00, $fe, $fc, $fa, $f9, $f8
1dfd1     F6 F7 FB 00 
1dfd5     06 0B 0F 10 
1dfd9     11 12 14 16 
1dfdd     14 10 0D 08 | 	byte	$f6, $f7, $fb, $00, $06, $0b, $0f, $10, $11, $12, $14, $16, $14, $10, $0d, $08
1dfe1     02 FE FB FA 
1dfe5     FB FB F8 F4 
1dfe9     F2 EE EB EC 
1dfed     ED EE F1 F3 | 	byte	$02, $fe, $fb, $fa, $fb, $fb, $f8, $f4, $f2, $ee, $eb, $ec, $ed, $ee, $f1, $f3
1dff1     F4 F5 F5 F2 
1dff5     ED E8 E6 E4 
1dff9     E4 E9 EF F6 
1dffd     FD 03 0B 13 | 	byte	$f4, $f5, $f5, $f2, $ed, $e8, $e6, $e4, $e4, $e9, $ef, $f6, $fd, $03, $0b, $13
1e001     1C 23 24 25 
1e005     29 2E 31 32 
1e009     31 33 33 31 
1e00d     2D 28 23 1D | 	byte	$1c, $23, $24, $25, $29, $2e, $31, $32, $31, $33, $33, $31, $2d, $28, $23, $1d
1e011     19 19 1E 20 
1e015     20 20 21 21 
1e019     20 1E 1E 1E 
1e01d     1F 23 28 2B | 	byte	$19, $19, $1e, $20, $20, $20, $21, $21, $20, $1e, $1e, $1e, $1f, $23, $28, $2b
1e021     2A 28 28 24 
1e025     1C 16 0F 07 
1e029     FD F1 E6 DB 
1e02d     D1 CA C3 BD | 	byte	$2a, $28, $28, $24, $1c, $16, $0f, $07, $fd, $f1, $e6, $db, $d1, $ca, $c3, $bd
1e031     B6 B5 B7 B8 
1e035     B9 BC C3 CB 
1e039     D1 D6 DC E2 
1e03d     E7 EC F1 F5 | 	byte	$b6, $b5, $b7, $b8, $b9, $bc, $c3, $cb, $d1, $d6, $dc, $e2, $e7, $ec, $f1, $f5
1e041     FB FE FF FF 
1e045     FE FE FE FC 
1e049     F7 F5 F5 F7 
1e04d     F9 F7 F4 F5 | 	byte	$fb, $fe, $ff, $ff, $fe, $fe, $fe, $fc, $f7, $f5, $f5, $f7, $f9, $f7, $f4, $f5
1e051     F6 F7 F6 F7 
1e055     FA FF 03 07 
1e059     0B 10 15 18 
1e05d     15 12 0F 0A | 	byte	$f6, $f7, $f6, $f7, $fa, $ff, $03, $07, $0b, $10, $15, $18, $15, $12, $0f, $0a
1e061     05 01 00 FF 
1e065     00 00 FD F9 
1e069     F4 F0 EE EF 
1e06d     EF EE EF F0 | 	byte	$05, $01, $00, $ff, $00, $00, $fd, $f9, $f4, $f0, $ee, $ef, $ef, $ee, $ef, $f0
1e071     F3 F6 F8 F8 
1e075     F6 F2 ED E8 
1e079     E5 E8 ED F2 
1e07d     F9 00 05 0D | 	byte	$f3, $f6, $f8, $f8, $f6, $f2, $ed, $e8, $e5, $e8, $ed, $f2, $f9, $00, $05, $0d
1e081     18 20 23 26 
1e085     2A 2D 2E 2F 
1e089     30 30 2E 2E 
1e08d     2D 29 23 1C | 	byte	$18, $20, $23, $26, $2a, $2d, $2e, $2f, $30, $30, $2e, $2e, $2d, $29, $23, $1c
1e091     15 11 11 14 
1e095     19 1D 1F 20 
1e099     23 26 26 22 
1e09d     1F 21 28 2F | 	byte	$15, $11, $11, $14, $19, $1d, $1f, $20, $23, $26, $26, $22, $1f, $21, $28, $2f
1e0a1     32 2F 2B 28 
1e0a5     24 1D 15 0D 
1e0a9     04 FC F3 EC 
1e0ad     E3 D9 D1 C7 | 	byte	$32, $2f, $2b, $28, $24, $1d, $15, $0d, $04, $fc, $f3, $ec, $e3, $d9, $d1, $c7
1e0b1     C0 BA B6 B7 
1e0b5     B8 B8 BE C8 
1e0b9     D1 D4 D5 D9 
1e0bd     E1 E9 EC EF | 	byte	$c0, $ba, $b6, $b7, $b8, $b8, $be, $c8, $d1, $d4, $d5, $d9, $e1, $e9, $ec, $ef
1e0c1     F5 FB FD FD 
1e0c5     FC FD FD FC 
1e0c9     F9 F6 F5 F3 
1e0cd     F3 F4 F5 F5 | 	byte	$f5, $fb, $fd, $fd, $fc, $fd, $fd, $fc, $f9, $f6, $f5, $f3, $f3, $f4, $f5, $f5
1e0d1     F5 F4 F3 F2 
1e0d5     F2 F3 F6 FB 
1e0d9     00 06 0D 13 
1e0dd     14 11 0E 0A | 	byte	$f5, $f4, $f3, $f2, $f2, $f3, $f6, $fb, $00, $06, $0d, $13, $14, $11, $0e, $0a
1e0e1     07 05 02 00 
1e0e5     00 01 00 FB 
1e0e9     F6 F3 F2 F1 
1e0ed     EF ED EC EC | 	byte	$07, $05, $02, $00, $00, $01, $00, $fb, $f6, $f3, $f2, $f1, $ef, $ed, $ec, $ec
1e0f1     ED F0 F5 F7 
1e0f5     F5 F1 EF ED 
1e0f9     E9 E8 E9 EF 
1e0fd     F4 F8 FD 04 | 	byte	$ed, $f0, $f5, $f7, $f5, $f1, $ef, $ed, $e9, $e8, $e9, $ef, $f4, $f8, $fd, $04
1e101     0E 17 1D 22 
1e105     26 2B 2D 2C 
1e109     29 2A 2A 29 
1e10d     26 26 24 1E | 	byte	$0e, $17, $1d, $22, $26, $2b, $2d, $2c, $29, $2a, $2a, $29, $26, $26, $24, $1e
1e111     17 0F 0C 0D 
1e115     0F 13 19 1D 
1e119     20 24 29 2A 
1e11d     27 24 25 2A | 	byte	$17, $0f, $0c, $0d, $0f, $13, $19, $1d, $20, $24, $29, $2a, $27, $24, $25, $2a
1e121     31 34 34 2F 
1e125     2C 27 1F 16 
1e129     0B 03 FE F7 
1e12d     F2 EB E5 DE | 	byte	$31, $34, $34, $2f, $2c, $27, $1f, $16, $0b, $03, $fe, $f7, $f2, $eb, $e5, $de
1e131     D5 CB C0 BC 
1e135     BD C0 C1 C3 
1e139     CB D4 DA DC 
1e13d     DE E5 EB EF | 	byte	$d5, $cb, $c0, $bc, $bd, $c0, $c1, $c3, $cb, $d4, $da, $dc, $de, $e5, $eb, $ef
1e141     F5 F9 FB F9 
1e145     F8 F9 FB FC 
1e149     FB F9 F7 F7 
1e14d     F4 F1 F2 F5 | 	byte	$f5, $f9, $fb, $f9, $f8, $f9, $fb, $fc, $fb, $f9, $f7, $f7, $f4, $f1, $f2, $f5
1e151     F9 F7 F1 EB 
1e155     E8 E9 ED EF 
1e159     F1 F7 00 07 
1e15d     0B 0B 09 09 | 	byte	$f9, $f7, $f1, $eb, $e8, $e9, $ed, $ef, $f1, $f7, $00, $07, $0b, $0b, $09, $09
1e161     09 0A 09 06 
1e165     04 03 01 FE 
1e169     FB F8 F7 F5 
1e16d     F3 F3 F2 ED | 	byte	$09, $0a, $09, $06, $04, $03, $01, $fe, $fb, $f8, $f7, $f5, $f3, $f3, $f2, $ed
1e171     E9 EA EE F3 
1e175     F4 F1 EF EE 
1e179     ED EC EB EE 
1e17d     F1 F3 F7 FF | 	byte	$e9, $ea, $ee, $f3, $f4, $f1, $ef, $ee, $ed, $ec, $eb, $ee, $f1, $f3, $f7, $ff
1e181     07 0E 16 1E 
1e185     25 28 29 2A 
1e189     29 25 23 25 
1e18d     27 26 22 1E | 	byte	$07, $0e, $16, $1e, $25, $28, $29, $2a, $29, $25, $23, $25, $27, $26, $22, $1e
1e191     1B 16 0F 0A 
1e195     08 0A 0E 14 
1e199     1D 23 25 28 
1e19d     2A 2A 29 28 | 	byte	$1b, $16, $0f, $0a, $08, $0a, $0e, $14, $1d, $23, $25, $28, $2a, $2a, $29, $28
1e1a1     2B 30 34 34 
1e1a5     31 2E 29 20 
1e1a9     16 0D 04 FE 
1e1ad     F9 F5 F1 EC | 	byte	$2b, $30, $34, $34, $31, $2e, $29, $20, $16, $0d, $04, $fe, $f9, $f5, $f1, $ec
1e1b1     E5 DD D3 CA 
1e1b5     C4 C5 C9 CB 
1e1b9     CB CD D4 DA 
1e1bd     DF E2 E8 F0 | 	byte	$e5, $dd, $d3, $ca, $c4, $c5, $c9, $cb, $cb, $cd, $d4, $da, $df, $e2, $e8, $f0
1e1c1     F6 FA FB FC 
1e1c5     F9 F7 F6 F8 
1e1c9     FA F9 F8 F8 
1e1cd     FA F9 F8 F7 | 	byte	$f6, $fa, $fb, $fc, $f9, $f7, $f6, $f8, $fa, $f9, $f8, $f8, $fa, $f9, $f8, $f7
1e1d1     F7 F8 F8 F2 
1e1d5     E9 E0 E1 E7 
1e1d9     EC ED EE F4 
1e1dd     FD 02 04 04 | 	byte	$f7, $f8, $f8, $f2, $e9, $e0, $e1, $e7, $ec, $ed, $ee, $f4, $fd, $02, $04, $04
1e1e1     07 0C 0E 0D 
1e1e5     09 07 05 03 
1e1e9     00 FC FB FB 
1e1ed     F8 F6 F5 F3 | 	byte	$07, $0c, $0e, $0d, $09, $07, $05, $03, $00, $fc, $fb, $fb, $f8, $f6, $f5, $f3
1e1f1     EF EC ED EE 
1e1f5     EE ED EF F0 
1e1f9     EF ED EC EE 
1e1fd     F0 F2 F4 FB | 	byte	$ef, $ec, $ed, $ee, $ee, $ed, $ef, $f0, $ef, $ed, $ec, $ee, $f0, $f2, $f4, $fb
1e201     01 06 0E 19 
1e205     23 26 26 28 
1e209     28 26 22 20 
1e20d     20 22 22 1F | 	byte	$01, $06, $0e, $19, $23, $26, $26, $28, $28, $26, $22, $20, $20, $22, $22, $1f
1e211     1B 19 17 12 
1e215     0C 08 07 0A 
1e219     11 19 21 26 
1e21d     29 2C 2E 2F | 	byte	$1b, $19, $17, $12, $0c, $08, $07, $0a, $11, $19, $21, $26, $29, $2c, $2e, $2f
1e221     2F 2F 30 30 
1e225     2E 2D 2C 28 
1e229     20 16 0E 08 
1e22d     02 FB F7 F3 | 	byte	$2f, $2f, $30, $30, $2e, $2d, $2c, $28, $20, $16, $0e, $08, $02, $fb, $f7, $f3
1e231     F0 EB E3 DC 
1e235     D3 CD CC CE 
1e239     D0 CF D0 D4 
1e23d     D8 DD E3 EA | 	byte	$f0, $eb, $e3, $dc, $d3, $cd, $cc, $ce, $d0, $cf, $d0, $d4, $d8, $dd, $e3, $ea
1e241     F0 F4 F8 FC 
1e245     FB F4 F0 F0 
1e249     F2 F4 F3 F1 
1e24d     F2 F7 FA FA | 	byte	$f0, $f4, $f8, $fc, $fb, $f4, $f0, $f0, $f2, $f4, $f3, $f1, $f2, $f7, $fa, $fa
1e251     F8 F4 F0 EE 
1e255     EA E4 DC D7 
1e259     D8 DD E3 E7 
1e25d     EB EF F7 FF | 	byte	$f8, $f4, $f0, $ee, $ea, $e4, $dc, $d7, $d8, $dd, $e3, $e7, $eb, $ef, $f7, $ff
1e261     05 0A 0D 0F 
1e265     0E 0B 07 04 
1e269     02 01 01 00 
1e26d     FE FA F9 F9 | 	byte	$05, $0a, $0d, $0f, $0e, $0b, $07, $04, $02, $01, $01, $00, $fe, $fa, $f9, $f9
1e271     F7 F4 F1 F0 
1e275     EE EB EA EA 
1e279     ED F0 F1 EF 
1e27d     EE F0 F4 F7 | 	byte	$f7, $f4, $f1, $f0, $ee, $eb, $ea, $ea, $ed, $f0, $f1, $ef, $ee, $f0, $f4, $f7
1e281     FB 00 07 10 
1e285     1A 20 22 24 
1e289     27 27 23 1F 
1e28d     1D 1C 1C 1E | 	byte	$fb, $00, $07, $10, $1a, $20, $22, $24, $27, $27, $23, $1f, $1d, $1c, $1c, $1e
1e291     1D 1B 19 18 
1e295     16 11 0B 0B 
1e299     0C 0F 14 1B 
1e29d     24 2A 2F 32 | 	byte	$1d, $1b, $19, $18, $16, $11, $0b, $0b, $0c, $0f, $14, $1b, $24, $2a, $2f, $32
1e2a1     34 35 36 34 
1e2a5     30 2B 28 27 
1e2a9     26 20 17 0F 
1e2ad     0C 08 02 FC | 	byte	$34, $35, $36, $34, $30, $2b, $28, $27, $26, $20, $17, $0f, $0c, $08, $02, $fc
1e2b1     F6 F2 F0 EA 
1e2b5     E1 D9 D3 D1 
1e2b9     D1 D1 D2 D4 
1e2bd     D5 D8 DF E7 | 	byte	$f6, $f2, $f0, $ea, $e1, $d9, $d3, $d1, $d1, $d1, $d2, $d4, $d5, $d8, $df, $e7
1e2c1     EB EC EE F4 
1e2c5     FA F9 F3 EE 
1e2c9     ED F0 F2 F2 
1e2cd     F2 F4 F7 F9 | 	byte	$eb, $ec, $ee, $f4, $fa, $f9, $f3, $ee, $ed, $f0, $f2, $f2, $f2, $f4, $f7, $f9
1e2d1     F9 F8 F4 EF 
1e2d5     E8 E2 DD D8 
1e2d9     D4 D1 D2 D6 
1e2dd     DC E3 EA F5 | 	byte	$f9, $f8, $f4, $ef, $e8, $e2, $dd, $d8, $d4, $d1, $d2, $d6, $dc, $e3, $ea, $f5
1e2e1     FF 07 0E 12 
1e2e5     11 0E 0B 08 
1e2e9     05 02 04 07 
1e2ed     08 03 FD F9 | 	byte	$ff, $07, $0e, $12, $11, $0e, $0b, $08, $05, $02, $04, $07, $08, $03, $fd, $f9
1e2f1     FA FB F9 F5 
1e2f5     EF EB EC EE 
1e2f9     ED EC EE F1 
1e2fd     F1 F1 F2 F5 | 	byte	$fa, $fb, $f9, $f5, $ef, $eb, $ec, $ee, $ed, $ec, $ee, $f1, $f1, $f1, $f2, $f5
1e301     F9 FE 04 0A 
1e305     0F 15 1A 1E 
1e309     21 24 26 24 
1e30d     1F 1C 1A 18 | 	byte	$f9, $fe, $04, $0a, $0f, $15, $1a, $1e, $21, $24, $26, $24, $1f, $1c, $1a, $18
1e311     19 1B 1C 1B 
1e315     18 15 11 0F 
1e319     0E 0F 11 14 
1e31d     18 21 2C 30 | 	byte	$19, $1b, $1c, $1b, $18, $15, $11, $0f, $0e, $0f, $11, $14, $18, $21, $2c, $30
1e321     31 33 38 3C 
1e325     3B 38 32 2E 
1e329     2B 27 21 1C 
1e32d     16 10 0B 06 | 	byte	$31, $33, $38, $3c, $3b, $38, $32, $2e, $2b, $27, $21, $1c, $16, $10, $0b, $06
1e331     02 FC F7 F3 
1e335     EC E4 DD D9 
1e339     D5 D1 CE D0 
1e33d     D5 D9 DB DE | 	byte	$02, $fc, $f7, $f3, $ec, $e4, $dd, $d9, $d5, $d1, $ce, $d0, $d5, $d9, $db, $de
1e341     E4 EA EB E9 
1e345     EC F1 F4 F0 
1e349     EC EC EE F1 
1e34d     F3 F3 F0 F0 | 	byte	$e4, $ea, $eb, $e9, $ec, $f1, $f4, $f0, $ec, $ec, $ee, $f1, $f3, $f3, $f0, $f0
1e351     EF F2 F5 F4 
1e355     EE E6 E0 DA 
1e359     D3 CF CF CF 
1e35d     CE D2 DB E8 | 	byte	$ef, $f2, $f5, $f4, $ee, $e6, $e0, $da, $d3, $cf, $cf, $cf, $ce, $d2, $db, $e8
1e361     F5 FE 05 0E 
1e365     16 17 13 0E 
1e369     0D 0B 08 05 
1e36d     03 05 03 00 | 	byte	$f5, $fe, $05, $0e, $16, $17, $13, $0e, $0d, $0b, $08, $05, $03, $05, $03, $00
1e371     FB F8 F7 F6 
1e375     F5 F1 EC EB 
1e379     EF F0 EC E8 
1e37d     EA EB 7C F0 | 	byte	$fb, $f8, $f7, $f6, $f5, $f1, $ec, $eb, $ef, $f0, $ec, $e8, $ea, $eb, $7c, $f0
1e381     F8 FF 03 06 
1e385     08 0A 0E 12 
1e389     17 1B 1E 20 
1e38d     1F 1C 1B 19 | 	byte	$f8, $ff, $03, $06, $08, $0a, $0e, $12, $17, $1b, $1e, $20, $1f, $1c, $1b, $19
1e391     18 18 1D 21 
1e395     1D 18 14 12 
1e399     10 0F 12 18 
1e39d     1B 1D 22 2A | 	byte	$18, $18, $1d, $21, $1d, $18, $14, $12, $10, $0f, $12, $18, $1b, $1d, $22, $2a
1e3a1     2F 2E 31 37 
1e3a5     3F 41 06 37 
1e3a9     33 2E 29 23 
1e3ad     1D 18 11 0C | 	byte	$2f, $2e, $31, $37, $3f, $41, $06, $37, $33, $2e, $29, $23, $1d, $18, $11, $0c
1e3b1     07 04 00 FB 
1e3b5     F5 EE E5 DD 
1e3b9     DA D6 D0 C8 
1e3bd     CB D5 DB DB | 	byte	$07, $04, $00, $fb, $f5, $ee, $e5, $dd, $da, $d6, $d0, $c8, $cb, $d5, $db, $db
1e3c1     DC E3 EB EC 
1e3c5     E7 E4 E5 E8 
1e3c9     E9 E9 EB EF 
1e3cd     F4 F6 3C F1 | 	byte	$dc, $e3, $eb, $ec, $e7, $e4, $e5, $e8, $e9, $e9, $eb, $ef, $f4, $f6, $3c, $f1
1e3d1     EC EC F1 F5 
1e3d5     F1 EA E2 DB 
1e3d9     D5 CE CC CC 
1e3dd     CF D3 D8 E1 | 	byte	$ec, $ec, $f1, $f5, $f1, $ea, $e2, $db, $d5, $ce, $cc, $cc, $cf, $d3, $d8, $e1
1e3e1     EB F5 FE 05 
1e3e5     0E 16 1B 19 
1e3e9     17 15 13 10 
1e3ed     09 05 03 01 | 	byte	$eb, $f5, $fe, $05, $0e, $16, $1b, $19, $17, $15, $13, $10, $09, $05, $03, $01
1e3f1     00 FD FB F6 
1e3f5     F3 F1 60 F3 
1e3f9     F3 F4 F1 EE 
1e3fd     EA E8 E9 EF | 	byte	$00, $fd, $fb, $f6, $f3, $f1, $60, $f3, $f3, $f4, $f1, $ee, $ea, $e8, $e9, $ef
1e401     F8 FF 03 07 
1e405     09 0B 0D 0F 
1e409     10 13 18 1D 
1e40d     1D 1A 18 18 | 	byte	$f8, $ff, $03, $07, $09, $0b, $0d, $0f, $10, $13, $18, $1d, $1d, $1a, $18, $18
1e411     1A 1B 1B 1D 
1e415     21 1F 18 12 
1e419     11 13 15 18 
1e41d     1B 1C 7E 22 | 	byte	$1a, $1b, $1b, $1d, $21, $1f, $18, $12, $11, $13, $15, $18, $1b, $1c, $7e, $22
1e421     29 2D 2B 2D 
1e425     34 3D 41 3D 
1e429     36 32 30 2B 
1e42d     25 1F 19 13 | 	byte	$29, $2d, $2b, $2d, $34, $3d, $41, $3d, $36, $32, $30, $2b, $25, $1f, $19, $13
1e431     0B 06 01 FF 
1e435     FA F5 EE E7 
1e439     E2 DD DA D4 
1e43d     CE CE D4 D9 | 	byte	$0b, $06, $01, $ff, $fa, $f5, $ee, $e7, $e2, $dd, $da, $d4, $ce, $ce, $d4, $d9
1e441     D9 D8 DE E8 
1e445     EB E7 E1 DE 
1e449     DF E5 EA EE 
1e44d     F0 F0 F1 F3 | 	byte	$d9, $d8, $de, $e8, $eb, $e7, $e1, $de, $df, $e5, $ea, $ee, $f0, $f0, $f1, $f3
1e451     F3 F0 F0 F2 
1e455     F1 ED E5 DD 
1e459     D4 CB C9 CC 
1e45d     D0 D3 D6 DE | 	byte	$f3, $f0, $f0, $f2, $f1, $ed, $e5, $dd, $d4, $cb, $c9, $cc, $d0, $d3, $d6, $de
1e461     EA F3 F8 FD 
1e465     06 0F 16 19 
1e469     1A 1B 1C 1C 
1e46d     17 11 0B 05 | 	byte	$ea, $f3, $f8, $fd, $06, $0f, $16, $19, $1a, $1b, $1c, $1c, $17, $11, $0b, $05
1e471     FF F9 F7 F7 
1e475     F5 F1 EC ED 
1e479     F0 F5 F6 F2 
1e47d     EC E9 EC F3 | 	byte	$ff, $f9, $f7, $f7, $f5, $f1, $ec, $ed, $f0, $f5, $f6, $f2, $ec, $e9, $ec, $f3
1e481     F8 FA FE 02 
1e485     07 0B 0D 10 
1e489     12 12 14 17 
1e48d     1B 1B 18 15 | 	byte	$f8, $fa, $fe, $02, $07, $0b, $0d, $10, $12, $12, $14, $17, $1b, $1b, $18, $15
1e491     16 1B 1F 21 
1e495     21 22 22 1F 
1e499     1B 18 18 19 
1e49d     19 1A 1C 1F | 	byte	$16, $1b, $1f, $21, $21, $22, $22, $1f, $1b, $18, $18, $19, $19, $1a, $1c, $1f
1e4a1     23 29 2D 2E 
1e4a5     30 35 3A 3C 
1e4a9     39 34 30 2D 
1e4ad     2A 25 20 19 | 	byte	$23, $29, $2d, $2e, $30, $35, $3a, $3c, $39, $34, $30, $2d, $2a, $25, $20, $19
1e4b1     13 0B 04 FF 
1e4b5     FB F6 F0 EC 
1e4b9     EA E6 E2 DE 
1e4bd     DA D4 D0 CF | 	byte	$13, $0b, $04, $ff, $fb, $f6, $f0, $ec, $ea, $e6, $e2, $de, $da, $d4, $d0, $cf
1e4c1     D2 D3 D6 DB 
1e4c5     E1 E4 E4 DE 
1e4c9     DA DD E2 E7 
1e4cd     E8 EA EC F0 | 	byte	$d2, $d3, $d6, $db, $e1, $e4, $e4, $de, $da, $dd, $e2, $e7, $e8, $ea, $ec, $f0
1e4d1     F3 F4 F3 F3 
1e4d5     F2 F1 EC E3 
1e4d9     D9 CF CC CE 
1e4dd     D2 D4 D4 D6 | 	byte	$f3, $f4, $f3, $f3, $f2, $f1, $ec, $e3, $d9, $cf, $cc, $ce, $d2, $d4, $d4, $d6
1e4e1     DE EA F5 FC 
1e4e5     01 08 10 16 
1e4e9     18 19 1A 1C 
1e4ed     1D 1A 14 0B | 	byte	$de, $ea, $f5, $fc, $01, $08, $10, $16, $18, $19, $1a, $1c, $1d, $1a, $14, $0b
1e4f1     02 FB F6 F4 
1e4f5     F3 F1 EB E8 
1e4f9     E9 EC ED ED 
1e4fd     EF EE EE F1 | 	byte	$02, $fb, $f6, $f4, $f3, $f1, $eb, $e8, $e9, $ec, $ed, $ed, $ef, $ee, $ee, $f1
1e501     F8 FD FC FC 
1e505     FE 04 09 0C 
1e509     0D 0E 0F 13 
1e50d     17 19 19 17 | 	byte	$f8, $fd, $fc, $fc, $fe, $04, $09, $0c, $0d, $0e, $0f, $13, $17, $19, $19, $17
1e511     16 18 1D 22 
1e515     21 1F 20 23 
1e519     24 22 1F 1D 
1e51d     1A 17 18 1C | 	byte	$16, $18, $1d, $22, $21, $1f, $20, $23, $24, $22, $1f, $1d, $1a, $17, $18, $1c
1e521     20 21 23 2B 
1e525     33 36 36 36 
1e529     36 34 30 2E 
1e52d     2B 27 22 1E | 	byte	$20, $21, $23, $2b, $33, $36, $36, $36, $36, $34, $30, $2e, $2b, $27, $22, $1e
1e531     1A 13 0B 03 
1e535     FF FA F5 F0 
1e539     ED EA E8 E6 
1e53d     E2 DE DA D6 | 	byte	$1a, $13, $0b, $03, $ff, $fa, $f5, $f0, $ed, $ea, $e8, $e6, $e2, $de, $da, $d6
1e541     D2 D1 D3 D3 
1e545     D4 D8 DD DF 
1e549     DD DC DE E3 
1e54d     E6 E5 E6 EB | 	byte	$d2, $d1, $d3, $d3, $d4, $d8, $dd, $df, $dd, $dc, $de, $e3, $e6, $e5, $e6, $eb
1e551     EF F3 F6 F7 
1e555     F4 F0 EB E7 
1e559     E2 DC D8 D7 
1e55d     D7 D6 D4 D6 | 	byte	$ef, $f3, $f6, $f7, $f4, $f0, $eb, $e7, $e2, $dc, $d8, $d7, $d7, $d6, $d4, $d6
1e561     DC E2 E9 F4 
1e565     00 06 0A 0E 
1e569     12 17 1A 1C 
1e56d     1D 1C 1B 14 | 	byte	$dc, $e2, $e9, $f4, $00, $06, $0a, $0e, $12, $17, $1a, $1c, $1d, $1c, $1b, $14
1e571     0C 04 FE F9 
1e575     F4 F1 ED E8 
1e579     E7 E6 E6 E5 
1e57d     E7 EC F0 F2 | 	byte	$0c, $04, $fe, $f9, $f4, $f1, $ed, $e8, $e7, $e6, $e6, $e5, $e7, $ec, $f0, $f2
1e581     F5 F9 FC FF 
1e585     FF FF 01 06 
1e589     0A 0D 0F 12 
1e58d     15 1A 1D 1E | 	byte	$f5, $f9, $fc, $ff, $ff, $ff, $01, $06, $0a, $0d, $0f, $12, $15, $1a, $1d, $1e
1e591     1C 1B 1B 20 
1e595     24 25 23 22 
1e599     26 2A 29 25 
1e59d     21 1E 1C 1C | 	byte	$1c, $1b, $1b, $20, $24, $25, $23, $22, $26, $2a, $29, $25, $21, $1e, $1c, $1c
1e5a1     1C 1D 1F 24 
1e5a5     2B 33 38 38 
1e5a9     36 31 2E 2C 
1e5ad     2B 27 20 1B | 	byte	$1c, $1d, $1f, $24, $2b, $33, $38, $38, $36, $31, $2e, $2c, $2b, $27, $20, $1b
1e5b1     18 16 11 09 
1e5b5     00 F9 F5 F3 
1e5b9     F3 EF E9 E5 
1e5bd     E4 E3 E0 DA | 	byte	$18, $16, $11, $09, $00, $f9, $f5, $f3, $f3, $ef, $e9, $e5, $e4, $e3, $e0, $da
1e5c1     D4 D1 CE CE 
1e5c5     CD CE D1 D3 
1e5c9     D9 DC DC DA 
1e5cd     DA DE E3 E6 | 	byte	$d4, $d1, $ce, $ce, $cd, $ce, $d1, $d3, $d9, $dc, $dc, $da, $da, $de, $e3, $e6
1e5d1     E6 E9 EF F6 
1e5d5     F7 F2 EA E7 
1e5d9     E7 E8 E8 E7 
1e5dd     E3 DE DA DB | 	byte	$e6, $e9, $ef, $f6, $f7, $f2, $ea, $e7, $e7, $e8, $e8, $e7, $e3, $de, $da, $db
1e5e1     DF E3 E6 EC 
1e5e5     F6 00 0A 0F 
1e5e9     0F 10 15 1A 
1e5ed     1E 1B 16 11 | 	byte	$df, $e3, $e6, $ec, $f6, $00, $0a, $0f, $0f, $10, $15, $1a, $1e, $1b, $16, $11
1e5f1     0F 0C 07 00 
1e5f5     F8 F2 EC E8 
1e5f9     E5 E2 E1 E3 
1e5fd     E5 E3 E4 EB | 	byte	$0f, $0c, $07, $00, $f8, $f2, $ec, $e8, $e5, $e2, $e1, $e3, $e5, $e3, $e4, $eb
1e601     F3 F6 F7 FB 
1e605     FF 01 02 01 
1e609     02 05 0B 10 
1e60d     14 18 1C 21 | 	byte	$f3, $f6, $f7, $fb, $ff, $01, $02, $01, $02, $05, $0b, $10, $14, $18, $1c, $21
1e611     23 23 21 22 
1e615     26 29 2A 29 
1e619     29 29 2B 2C 
1e61d     29 23 21 21 | 	byte	$23, $23, $21, $22, $26, $29, $2a, $29, $29, $29, $2b, $2c, $29, $23, $21, $21
1e621     1E 1B 1C 20 
1e625     25 2B 32 37 
1e629     37 32 2E 2A 
1e62d     27 23 20 1A | 	byte	$1e, $1b, $1c, $20, $25, $2b, $32, $37, $37, $32, $2e, $2a, $27, $23, $20, $1a
1e631     15 12 11 0E 
1e635     08 00 F8 F4 
1e639     F3 F1 ED E8 
1e63d     E2 E0 E1 DE | 	byte	$15, $12, $11, $0e, $08, $00, $f8, $f4, $f3, $f1, $ed, $e8, $e2, $e0, $e1, $de
1e641     D8 D3 CF CB 
1e645     CA CB CA CA 
1e649     CC D2 D6 D7 
1e64d     D5 D4 DA E0 | 	byte	$d8, $d3, $cf, $cb, $ca, $cb, $ca, $ca, $cc, $d2, $d6, $d7, $d5, $d4, $da, $e0
1e651     E3 E5 E8 ED 
1e655     F2 F3 F1 EC 
1e659     E9 EA ED F0 
1e65d     EF EA E5 E5 | 	byte	$e3, $e5, $e8, $ed, $f2, $f3, $f1, $ec, $e9, $ea, $ed, $f0, $ef, $ea, $e5, $e5
1e661     E9 EC EF F3 
1e665     F6 F9 00 08 
1e669     0E 12 13 15 
1e66d     18 19 17 13 | 	byte	$e9, $ec, $ef, $f3, $f6, $f9, $00, $08, $0e, $12, $13, $15, $18, $19, $17, $13
1e671     10 0F 0D 0B 
1e675     04 F9 ED E5 
1e679     E2 DE DD DD 
1e67d     DD DE E1 E5 | 	byte	$10, $0f, $0d, $0b, $04, $f9, $ed, $e5, $e2, $de, $dd, $dd, $dd, $de, $e1, $e5
1e681     EB F2 F7 F9 
1e685     FA FF 02 01 
1e689     FE FE 03 0B 
1e68d     14 1A 1D 21 | 	byte	$eb, $f2, $f7, $f9, $fa, $ff, $02, $01, $fe, $fe, $03, $0b, $14, $1a, $1d, $21
1e691     26 2A 2B 2A 
1e695     29 2A 2B 2C 
1e699     2C 2C 2C 2D 
1e69d     2E 2D 2B 28 | 	byte	$26, $2a, $2b, $2a, $29, $2a, $2b, $2c, $2c, $2c, $2c, $2d, $2e, $2d, $2b, $28
1e6a1     25 23 20 20 
1e6a5     25 2A 2D 2F 
1e6a9     31 34 34 30 
1e6ad     2B 26 22 1F | 	byte	$25, $23, $20, $20, $25, $2a, $2d, $2f, $31, $34, $34, $30, $2b, $26, $22, $1f
1e6b1     1A 14 0F 0E 
1e6b5     0A 05 01 FE 
1e6b9     F9 F3 EF EE 
1e6bd     EC E7 E0 DC | 	byte	$1a, $14, $0f, $0e, $0a, $05, $01, $fe, $f9, $f3, $ef, $ee, $ec, $e7, $e0, $dc
1e6c1     DB D9 D3 CC 
1e6c5     C9 C9 C9 C9 
1e6c9     C8 C7 C9 CE 
1e6cd     D5 D8 DA D8 | 	byte	$db, $d9, $d3, $cc, $c9, $c9, $c9, $c9, $c8, $c7, $c9, $ce, $d5, $d8, $da, $d8
1e6d1     DB E1 E4 E4 
1e6d5     E5 EA EF F3 
1e6d9     F4 F2 F1 F3 
1e6dd     F5 F4 F2 F3 | 	byte	$db, $e1, $e4, $e4, $e5, $ea, $ef, $f3, $f4, $f2, $f1, $f3, $f5, $f4, $f2, $f3
1e6e1     F3 F1 F4 F8 
1e6e5     FC FC FE 01 
1e6e9     07 0F 12 13 
1e6ed     13 12 0F 0E | 	byte	$f3, $f1, $f4, $f8, $fc, $fc, $fe, $01, $07, $0f, $12, $13, $13, $12, $0f, $0e
1e6f1     11 12 10 0B 
1e6f5     03 FD F4 E9 
1e6f9     E0 DB DB DA 
1e6fd     D3 D2 D5 DC | 	byte	$11, $12, $10, $0b, $03, $fd, $f4, $e9, $e0, $db, $db, $da, $d3, $d2, $d5, $dc
1e701     E2 E8 EE F2 
1e705     F5 F9 FD 00 
1e709     00 00 01 05 
1e70d     0C 13 19 20 | 	byte	$e2, $e8, $ee, $f2, $f5, $f9, $fd, $00, $00, $00, $01, $05, $0c, $13, $19, $20
1e711     25 2A 2F 34 
1e715     37 35 31 2F 
1e719     2F 30 30 30 
1e71d     30 2F 31 30 | 	byte	$25, $2a, $2f, $34, $37, $35, $31, $2f, $2f, $30, $30, $30, $30, $2f, $31, $30
1e721     2C 27 26 28 
1e725     28 28 2A 2C 
1e729     2C 2E 2E 2F 
1e72d     2E 2A 25 1F | 	byte	$2c, $27, $26, $28, $28, $28, $2a, $2c, $2c, $2e, $2e, $2f, $2e, $2a, $25, $1f
1e731     19 16 13 0C 
1e735     06 04 04 03 
1e739     01 FD F5 F0 
1e73d     ED EB E8 E1 | 	byte	$19, $16, $13, $0c, $06, $04, $04, $03, $01, $fd, $f5, $f0, $ed, $eb, $e8, $e1
1e741     D9 D5 D6 D4 
1e745     D0 CC C7 C3 
1e749     C2 C3 C5 C7 
1e74d     CA D0 D6 DB | 	byte	$d9, $d5, $d6, $d4, $d0, $cc, $c7, $c3, $c2, $c3, $c5, $c7, $ca, $d0, $d6, $db
1e751     DB DB DD E2 
1e755     E3 E2 E4 EA 
1e759     F2 F7 F9 F8 
1e75d     F6 F6 F7 FB | 	byte	$db, $db, $dd, $e2, $e3, $e2, $e4, $ea, $f2, $f7, $f9, $f8, $f6, $f6, $f7, $fb
1e761     FC FB F9 FA 
1e765     FE 01 03 03 
1e769     04 07 0B 0F 
1e76d     11 12 11 0F | 	byte	$fc, $fb, $f9, $fa, $fe, $01, $03, $03, $04, $07, $0b, $0f, $11, $12, $11, $0f
1e771     0F 10 11 0F 
1e775     09 00 F5 EE 
1e779     EB E6 DE D8 
1e77d     D4 D0 CE D1 | 	byte	$0f, $10, $11, $0f, $09, $00, $f5, $ee, $eb, $e6, $de, $d8, $d4, $d0, $ce, $d1
1e781     DA E1 E8 EB 
1e785     EF F4 F8 FA 
1e789     FA FE 03 08 
1e78d     08 0A 10 17 | 	byte	$da, $e1, $e8, $eb, $ef, $f4, $f8, $fa, $fa, $fe, $03, $08, $08, $0a, $10, $17
1e791     1E 26 2E 37 
1e795     3C 3C 39 33 
1e799     30 30 2F 2F 
1e79d     2E 2D 2E 2F | 	byte	$1e, $26, $2e, $37, $3c, $3c, $39, $33, $30, $30, $2f, $2f, $2e, $2d, $2e, $2f
1e7a1     2E 2B 28 27 
1e7a5     2A 2C 2A 28 
1e7a9     28 28 29 29 
1e7ad     29 29 26 1F | 	byte	$2e, $2b, $28, $27, $2a, $2c, $2a, $28, $28, $28, $29, $29, $29, $29, $26, $1f
1e7b1     19 15 12 0E 
1e7b5     09 04 00 00 
1e7b9     00 00 FC F7 
1e7bd     F1 EB E7 E2 | 	byte	$19, $15, $12, $0e, $09, $04, $00, $00, $00, $00, $fc, $f7, $f1, $eb, $e7, $e2
1e7c1     DC D7 D4 D2 
1e7c5     D3 D3 D2 C9 
1e7c9     BF BC BF C6 
1e7cd     C8 C7 CA D1 | 	byte	$dc, $d7, $d4, $d2, $d3, $d3, $d2, $c9, $bf, $bc, $bf, $c6, $c8, $c7, $ca, $d1
1e7d1     D8 D9 D9 DB 
1e7d5     DF E5 E7 E6 
1e7d9     E6 ED F5 F9 
1e7dd     FA F8 F9 FD | 	byte	$d8, $d9, $d9, $db, $df, $e5, $e7, $e6, $e6, $ed, $f5, $f9, $fa, $f8, $f9, $fd
1e7e1     00 03 02 01 
1e7e5     03 05 06 07 
1e7e9     08 08 07 09 
1e7ed     0D 11 13 14 | 	byte	$00, $03, $02, $01, $03, $05, $06, $07, $08, $08, $07, $09, $0d, $11, $13, $14
1e7f1     14 13 11 0D 
1e7f5     0A 04 FD F6 
1e7f9     F2 EE E8 DF 
1e7fd     D7 CF CD CF | 	byte	$14, $13, $11, $0d, $0a, $04, $fd, $f6, $f2, $ee, $e8, $df, $d7, $cf, $cd, $cf
1e801     D3 D6 DD E5 
1e805     EB ED F1 F6 
1e809     FA FD 00 06 
1e80d     0C 0F 0F 10 | 	byte	$d3, $d6, $dd, $e5, $eb, $ed, $f1, $f6, $fa, $fd, $00, $06, $0c, $0f, $0f, $10
1e811     15 1E 29 32 
1e815     3A 3E 3D 39 
1e819     36 33 31 2F 
1e81d     2E 2D 2C 2E | 	byte	$15, $1e, $29, $32, $3a, $3e, $3d, $39, $36, $33, $31, $2f, $2e, $2d, $2c, $2e
1e821     2E 2C 28 28 
1e825     29 29 29 29 
1e829     27 24 22 22 
1e82d     23 22 20 20 | 	byte	$2e, $2c, $28, $28, $29, $29, $29, $29, $27, $24, $22, $22, $23, $22, $20, $20
1e831     1C 17 13 12 
1e835     10 09 02 FE 
1e839     FE FD FB F7 
1e83d     F3 F0 EB E5 | 	byte	$1c, $17, $13, $12, $10, $09, $02, $fe, $fe, $fd, $fb, $f7, $f3, $f0, $eb, $e5
1e841     DF DA D8 D8 
1e845     D3 D0 CF D0 
1e849     CD C4 BE BD 
1e84d     C3 C9 CA C9 | 	byte	$df, $da, $d8, $d8, $d3, $d0, $cf, $d0, $cd, $c4, $be, $bd, $c3, $c9, $ca, $c9
1e851     CE D3 D7 DB 
1e855     E1 E6 EB EB 
1e859     EB E9 EA F0 
1e85d     F7 FC FC FC | 	byte	$ce, $d3, $d7, $db, $e1, $e6, $eb, $eb, $eb, $e9, $ea, $f0, $f7, $fc, $fc, $fc
1e861     00 05 09 0C 
1e865     0E 0E 0C 08 
1e869     07 06 07 08 
1e86d     0B 0E 12 15 | 	byte	$00, $05, $09, $0c, $0e, $0e, $0c, $08, $07, $06, $07, $08, $0b, $0e, $12, $15
1e871     17 16 16 14 
1e875     0E 05 FF FB 
1e879     F9 F6 EF E6 
1e87d     DE D5 CF CC | 	byte	$17, $16, $16, $14, $0e, $05, $ff, $fb, $f9, $f6, $ef, $e6, $de, $d5, $cf, $cc
1e881     CF D4 D6 D8 
1e885     DE E6 EC F1 
1e889     F6 FB 00 05 
1e88d     0B 0D 0F 29 | 	byte	$cf, $d4, $d6, $d8, $de, $e6, $ec, $f1, $f6, $fb, $00, $05, $0b, $0d, $0f, $29
1e891     27 24 22 22 
1e895     23 22 20 20 
1e899     1C 17 13 12 
1e89d     10 09 02 FE | 	byte	$27, $24, $22, $22, $23, $22, $20, $20, $1c, $17, $13, $12, $10, $09, $02, $fe
1e8a1     FE FD FB F7 
1e8a5     F3 F0 EB E5 
1e8a9     DF DA D8 D8 
1e8ad     D3 D0 CF D0 | 	byte	$fe, $fd, $fb, $f7, $f3, $f0, $eb, $e5, $df, $da, $d8, $d8, $d3, $d0, $cf, $d0
1e8b1     CD C4 BE BD 
1e8b5     C3 C9 CA C9 
1e8b9     CE D3 D7 DB 
1e8bd     E1 E6 EB EB | 	byte	$cd, $c4, $be, $bd, $c3, $c9, $ca, $c9, $ce, $d3, $d7, $db, $e1, $e6, $eb, $eb
1e8c1     EB E9 EA F0 
1e8c5     F7 FC FC FC 
1e8c9     00 05 09 0C 
1e8cd     0E 0E 0C 08 | 	byte	$eb, $e9, $ea, $f0, $f7, $fc, $fc, $fc, $00, $05, $09, $0c, $0e, $0e, $0c, $08
1e8d1     07 06 07 08 
1e8d5     0B 0E 12 15 
1e8d9     17 16 16 14 
1e8dd     0E 05 FF FB | 	byte	$07, $06, $07, $08, $0b, $0e, $12, $15, $17, $16, $16, $14, $0e, $05, $ff, $fb
1e8e1     F9 F6 EF E6 
1e8e5     DE D5 CF CC 
1e8e9     CF D4 D6 D8 
1e8ed     DE E6 EC F1 | 	byte	$f9, $f6, $ef, $e6, $de, $d5, $cf, $cc, $cf, $d4, $d6, $d8, $de, $e6, $ec, $f1
1e8f1     F6 FB 00 05 
1e8f5     0B 0D 0F    | 	byte	$f6, $fb, $00, $05, $0b, $0d, $0f
1e8f8                 | 	alignl
1e8f8                 | _hng033rm_spin2_dat_
1e8f8     00 00 00 00 
1e8fc     00 00 00 00 
1e900     00 00 00 00 
1e904     00 00 00 00 
1e908     00 00 00    | vga_font       file "vgafont.def"
1e90b     7E 81 A5 81 
1e90f     81 BD 99 81 
1e913     81 7E 00 00 
1e917     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
1e91b     7E FF DB FF 
1e91f     FF C3 E7 FF 
1e923     FF 7E 00 00 
1e927     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
1e92b     00 36 7F 7F 
1e92f     7F 7F 3E 1C 
1e933     08 00 00 00 
1e937     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
1e93b     00 08 1C 3E 
1e93f     7F 3E 1C 08 
1e943     00 00 00 00 
1e947     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
1e94b     18 3C 3C E7 
1e94f     E7 E7 18 18 
1e953     3C 00 00 00 
1e957     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1e95b     18 3C 7E FF 
1e95f     FF 7E 18 18 
1e963     3C 00 00 00 
1e967     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
1e96b     00 00 00 18 
1e96f     3C 3C 18 00 
1e973     00 00 00 00 
1e977     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
1e97b     FF FF FF E7 
1e97f     C3 C3 E7 FF 
1e983     FF FF FF FF 
1e987     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1e98b     00 00 3C 66 
1e98f     42 42 66 3C 
1e993     00 00 00 00 
1e997     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
1e99b     FF FF C3 99 
1e99f     BD BD 99 C3 
1e9a3     FF FF FF FF 
1e9a7     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
1e9ab     78 70 58 4C 
1e9af     1E 33 33 33 
1e9b3     33 1E 00 00 
1e9b7     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
1e9bb     3C 66 66 66 
1e9bf     66 3C 18 7E 
1e9c3     18 18 00 00 
1e9c7     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
1e9cb     FC CC FC 0C 
1e9cf     0C 0C 0C 0E 
1e9d3     0F 07 00 00 
1e9d7     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
1e9db     FE C6 FE C6 
1e9df     C6 C6 C6 E6 
1e9e3     E7 67 03 00 
1e9e7     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
1e9eb     18 18 DB 3C 
1e9ef     E7 3C DB 18 
1e9f3     18 00 00 00 
1e9f7     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
1e9fb     03 07 0F 1F 
1e9ff     7F 1F 0F 07 
1ea03     03 01 00 00 
1ea07     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
1ea0b     60 70 78 7C 
1ea0f     7F 7C 78 70 
1ea13     60 40 00 00 
1ea17     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
1ea1b     18 3C 7E 18 
1ea1f     18 18 7E 3C 
1ea23     18 00 00 00 
1ea27     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
1ea2b     66 66 66 66 
1ea2f     66 66 66    | 	byte	$66[7]
1ea32     00 66 66 00 
1ea36     00 00 00 00 
1ea3a     00 FE DB DB 
1ea3e     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
1ea42     D8 D8 D8 00 
1ea46     00 00 00 3E 
1ea4a     63 06 1C 36 
1ea4e     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
1ea52     30 63 3E 00 
1ea56     00 00 00 00 
1ea5a     00 00 00 00 
1ea5e     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1ea62     7F 7F 7F 00 
1ea66     00 00 00 00 
1ea6a     00 18 3C 7E 
1ea6e     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
1ea72     3C 18 7E 00 
1ea76     00 00 00 00 
1ea7a     00 18 3C 7E 
1ea7e     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
1ea82     18 18 18 00 
1ea86     00 00 00 00 
1ea8a     00 18 18 18 
1ea8e     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1ea92     7E 3C 18 00 
1ea96     00 00 00 00 
1ea9a     00 00 00 18 
1ea9e     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
1eaa2     00 00 00 00 
1eaa6     00 00 00 00 
1eaaa     00 00 00    | 	byte	$00[11]
1eaad     0C 06 7F 06 
1eab1     0C 00 00 00 
1eab5     00 00 00 00 
1eab9     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eabd     00 03 03 03 
1eac1     7F 00 00 00 
1eac5     00 00 00 00 
1eac9     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eacd     14 36 7F 36 
1ead1     14 00 00 00 
1ead5     00 00 00 00 
1ead9     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
1eadd     1C 1C 3E 3E 
1eae1     7F 7F 00 00 
1eae5     00 00 00 00 
1eae9     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
1eaed     7F 3E 3E 1C 
1eaf1     1C 08 00 00 
1eaf5     00 00 00 00 
1eaf9     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eafd     00 00 00 00 
1eb01     00 00 00 00 
1eb05     00 00 00 00 
1eb09     00 00       | 	byte	$00[14]
1eb0b     18 3C 3C 3C 
1eb0f     18 18 18 00 
1eb13     18 18 00 00 
1eb17     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
1eb1b     66 24 00 00 
1eb1f     00 00 00 00 
1eb23     00 00 00 00 
1eb27     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eb2b     00 36 36 7F 
1eb2f     36 36 36 7F 
1eb33     36 36 00 00 
1eb37     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
1eb3b     3E 63 43 03 
1eb3f     3E 60 60 61 
1eb43     63 3E 18 18 
1eb47     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
1eb4b     00 00 43 63 
1eb4f     30 18 0C 06 
1eb53     63 61 00 00 
1eb57     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
1eb5b     1C 36 36 1C 
1eb5f     6E 3B 33 33 
1eb63     33 6E 00 00 
1eb67     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
1eb6b     0C 0C 0C 06 
1eb6f     00 00 00 00 
1eb73     00 00 00 00 
1eb77     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eb7b     30 18 0C 0C 
1eb7f     0C 0C 0C 0C 
1eb83     18 30 00 00 
1eb87     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
1eb8b     0C 18 30 30 
1eb8f     30 30 30 30 
1eb93     18 0C 00 00 
1eb97     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
1eb9b     00 00 00 66 
1eb9f     3C FF 3C 66 
1eba3     00 00 00 00 
1eba7     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
1ebab     00 00 00 18 
1ebaf     18 7E 18 18 
1ebb3     00 00 00 00 
1ebb7     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
1ebbb     00 00 00 00 
1ebbf     00 00 00 00 | 	byte	$00[8]
1ebc3     18 18 18 0C 
1ebc7     00 00 00 00 
1ebcb     00 00 00 00 
1ebcf     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
1ebd3     00 00 00 00 
1ebd7     00 00 00 00 
1ebdb     00 00 00 00 
1ebdf     00 00 00 00 | 	byte	$00[16]
1ebe3     18 18 00 00 
1ebe7     00 00 00 00 
1ebeb     00 00 40 60 
1ebef     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
1ebf3     03 01 00 00 
1ebf7     00 00 00 00 
1ebfb     1C 36 63 63 
1ebff     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
1ec03     36 1C 00 00 
1ec07     00 00 00 00 
1ec0b     18 1C 1E 18 
1ec0f     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
1ec13     18 7E 00 00 
1ec17     00 00 00 00 
1ec1b     3E 63 60 30 
1ec1f     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
1ec23     63 7F 00 00 
1ec27     00 00 00 00 
1ec2b     3E 63 60 60 
1ec2f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
1ec33     63 3E 00 00 
1ec37     00 00 00 00 
1ec3b     30 38 3C 36 
1ec3f     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
1ec43     30 78 00 00 
1ec47     00 00 00 00 
1ec4b     7F 03 03 03 
1ec4f     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
1ec53     63 3E 00 00 
1ec57     00 00 00 00 
1ec5b     1C 06 03 03 
1ec5f     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
1ec63     63 3E 00 00 
1ec67     00 00 00 00 
1ec6b     7F 63 60 60 
1ec6f     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
1ec73     0C 0C 00 00 
1ec77     00 00 00 00 
1ec7b     3E 63 63 63 
1ec7f     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
1ec83     63 3E 00 00 
1ec87     00 00 00 00 
1ec8b     3E 63 63 63 
1ec8f     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
1ec93     30 1E 00 00 
1ec97     00 00 00 00 
1ec9b     00 00 00 18 
1ec9f     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1eca3     18 18 00 00 
1eca7     00 00 00 00 
1ecab     00 00 00 18 
1ecaf     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
1ecb3     18 18 0C 00 
1ecb7     00 00 00 00 
1ecbb     00 60 30 18 
1ecbf     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
1ecc3     30 60 00 00 
1ecc7     00 00 00 00 
1eccb     00 00 00 7E 
1eccf     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
1ecd3     00 00 00 00 
1ecd7     00 00 00 00 
1ecdb     00          | 	byte	$00[9]
1ecdc     06 0C 18 30 
1ece0     60 30 18 0C 
1ece4     06 00 00 00 
1ece8     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
1ecec     63 63 30 18 
1ecf0     18 18 00 18 
1ecf4     18 00 00 00 
1ecf8     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
1ecfc     3E 63 63 7B 
1ed00     7B 7B 3B 03 
1ed04     3E 00 00 00 
1ed08     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
1ed0c     1C 36 63 63 
1ed10     7F 63 63 63 
1ed14     63 00 00 00 
1ed18     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
1ed1c     66 66 66 3E 
1ed20     66 66 66 66 
1ed24     3F 00 00 00 
1ed28     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
1ed2c     66 43 03 03 
1ed30     03 03 43 66 
1ed34     3C 00 00 00 
1ed38     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
1ed3c     36 66 66 66 
1ed40     66 66 66 36 
1ed44     1F 00 00 00 
1ed48     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
1ed4c     66 46 16 1E 
1ed50     16 06 46 66 
1ed54     7F 00 00 00 
1ed58     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
1ed5c     66 46 16 1E 
1ed60     16 06 06 06 
1ed64     0F 00 00 00 
1ed68     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
1ed6c     66 43 03 03 
1ed70     7B 63 63 66 
1ed74     5C 00 00 00 
1ed78     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
1ed7c     63 63 63 7F 
1ed80     63 63 63 63 
1ed84     63 00 00 00 
1ed88     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
1ed8c     18 18 18 18 
1ed90     18 18 18 18 | 	byte	$18[8]
1ed94     3C 00 00 00 
1ed98     00 00 00 78 
1ed9c     30 30 30 30 
1eda0     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
1eda4     1E 00 00 00 
1eda8     00 00 00 67 
1edac     66 66 36 1E 
1edb0     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
1edb4     67 00 00 00 
1edb8     00 00 00 0F 
1edbc     06 06 06 06 
1edc0     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1edc4     7F 00 00 00 
1edc8     00 00 00 63 
1edcc     77 7F 7F 6B 
1edd0     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
1edd4     63 00 00 00 
1edd8     00 00 00 63 
1eddc     67 6F 7F 7B 
1ede0     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
1ede4     63 00 00 00 
1ede8     00 00 00 3E 
1edec     63 63 63 63 
1edf0     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1edf4     3E 00 00 00 
1edf8     00 00 00 3F 
1edfc     66 66 66 3E 
1ee00     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
1ee04     0F 00 00 00 
1ee08     00 00 00 3E 
1ee0c     63 63 63 63 
1ee10     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
1ee14     3E 30 70 00 
1ee18     00 00 00 3F 
1ee1c     66 66 66 3E 
1ee20     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
1ee24     67 00 00 00 
1ee28     00 00 00 3E 
1ee2c     63 63 06 1C 
1ee30     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1ee34     3E 00 00 00 
1ee38     00 00 00 7E 
1ee3c     7E 5A 18 18 
1ee40     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1ee44     3C 00 00 00 
1ee48     00 00 00 63 
1ee4c     63 63 63 63 
1ee50     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1ee54     3E 00 00 00 
1ee58     00 00 00 63 
1ee5c     63 63 63 63 
1ee60     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
1ee64     08 00 00 00 
1ee68     00 00 00 63 
1ee6c     63 63 63 6B 
1ee70     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
1ee74     36 00 00 00 
1ee78     00 00 00 63 
1ee7c     63 36 3E 1C 
1ee80     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
1ee84     63 00 00 00 
1ee88     00 00 00 66 
1ee8c     66 66 66 3C 
1ee90     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
1ee94     3C 00 00 00 
1ee98     00 00 00 7F 
1ee9c     63 61 30 18 
1eea0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1eea4     7F 00 00 00 
1eea8     00 00 00 3C 
1eeac     0C 0C 0C 0C 
1eeb0     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
1eeb4     3C 00 00 00 
1eeb8     00 00 00 00 
1eebc     01 03 07 0E 
1eec0     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
1eec4     40 00 00 00 
1eec8     00 00 00 3C 
1eecc     30 30 30 30 
1eed0     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
1eed4     3C 00 00 00 
1eed8     1C 36 00 00 
1eedc     00 00 00 00 
1eee0     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1eee4     00 00 00 00 
1eee8     00 00 00 00 
1eeec     00 00 00 00 
1eef0     00 00 00 00 
1eef4     00          | 	byte	$00[17]
1eef5     FF 00 00 0C 
1eef9     18 00 00 00 
1eefd     00 00 00 00 
1ef01     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef05     00 00 00 00 
1ef09     00 00 00 00 
1ef0d     00          | 	byte	$00[9]
1ef0e     1E 30 3E 33 
1ef12     33 33 6E 00 
1ef16     00 00 00 00 
1ef1a     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
1ef1e     1E 36 66 66 
1ef22     66 66 3E 00 
1ef26     00 00 00 00 
1ef2a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef2e     3E 63 03 03 
1ef32     03 63 3E 00 
1ef36     00 00 00 00 
1ef3a     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
1ef3e     3C 36 33 33 
1ef42     33 33 6E 00 
1ef46     00 00 00 00 
1ef4a     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef4e     3E 63 7F 03 
1ef52     03 63 3E 00 
1ef56     00 00 00 00 
1ef5a     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
1ef5e     0C 1E 0C 0C 
1ef62     0C 0C 1E 00 
1ef66     00 00 00 00 
1ef6a     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
1ef6e     6E 33 33 33 
1ef72     33 33 3E 30 
1ef76     33 1E 00 00 
1ef7a     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
1ef7e     36 6E 66 66 
1ef82     66 66 67 00 
1ef86     00 00 00 00 
1ef8a     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
1ef8e     1C 18 18 18 
1ef92     18 18 3C 00 
1ef96     00 00 00 00 
1ef9a     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
1ef9e     70 60 60 60 
1efa2     60 60 60 66 
1efa6     66 3C 00 00 
1efaa     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
1efae     66 36 1E 1E 
1efb2     36 66 67 00 
1efb6     00 00 00 00 
1efba     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
1efbe     18 18 18 18 
1efc2     18 18       | 	byte	$18[6]
1efc4     3C 00 00 00 
1efc8     00 00 00 00 
1efcc     00 00 37 7F 
1efd0     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
1efd4     63 00 00 00 
1efd8     00 00 00 00 
1efdc     00 00 3B 66 
1efe0     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1efe4     66 00 00 00 
1efe8     00 00 00 00 
1efec     00 00 3E 63 
1eff0     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
1eff4     3E 00 00 00 
1eff8     00 00 00 00 
1effc     00 00 3B 66 
1f000     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
1f004     3E 06 06 0F 
1f008     00 00 00 00 
1f00c     00 00 6E 33 
1f010     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
1f014     3E 30 30 78 
1f018     00 00 00 00 
1f01c     00 00 3B 6E 
1f020     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
1f024     0F 00 00 00 
1f028     00 00 00 00 
1f02c     00 00 3E 63 
1f030     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
1f034     3E 00 00 00 
1f038     00 00 00 08 
1f03c     0C 0C 3F 0C 
1f040     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1f044     38 00 00 00 
1f048     00 00 00 00 
1f04c     00 00 33 33 
1f050     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
1f054     6E 00 00 00 
1f058     00 00 00 00 
1f05c     00 00 63 63 
1f060     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
1f064     1C 00 00 00 
1f068     00 00 00 00 
1f06c     00 00 63 63 
1f070     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
1f074     36 00 00 00 
1f078     00 00 00 00 
1f07c     00 00 63 36 
1f080     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
1f084     63 00 00 00 
1f088     00 00 00 00 
1f08c     00 00 63 63 
1f090     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
1f094     7E 60 30 1F 
1f098     00 00 00 00 
1f09c     00 00 7F 33 
1f0a0     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
1f0a4     7F 00 00 00 
1f0a8     00 00 00 70 
1f0ac     18 18 18 0E 
1f0b0     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
1f0b4     70 00 00 00 
1f0b8     00 00 00 18 
1f0bc     18 18 18 18 
1f0c0     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f0c4     18 00 00 00 
1f0c8     00 00 00 0E 
1f0cc     18 18 18 70 
1f0d0     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
1f0d4     0E 00 00 00 
1f0d8     6E 3B 00 00 
1f0dc     00 00 00 00 
1f0e0     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f0e4     00 00 00 00 
1f0e8     00 00 00 00 
1f0ec     00 00       | 	byte	$00[10]
1f0ee     08 1C 36 63 
1f0f2     63 63 7F 00 
1f0f6     00 00 00 00 
1f0fa     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
1f0fe     03 03 03 03 
1f102     43 66 3C 18 
1f106     30 1E 00 00 
1f10a     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
1f10e     33 33 33 33 
1f112     33 33       | 	byte	$33[6]
1f114     6E 00 00 00 
1f118     00 00 60 30 
1f11c     18 00 3E 63 
1f120     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
1f124     3E 00 00 00 
1f128     00 00 08 1C 
1f12c     36 00 1E 30 
1f130     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
1f134     6E 00 00 00 
1f138     00 00 00 00 
1f13c     33 00 1E 30 
1f140     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
1f144     6E 00 00 00 
1f148     00 00 1C 36 
1f14c     1C 00 33 33 
1f150     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
1f154     6E 00 00 00 
1f158     00 00 60 30 
1f15c     18 00 3E 63 
1f160     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
1f164     3E 00 00 00 
1f168     00 00 00 00 
1f16c     00 00 3E 63 
1f170     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
1f174     3E 18 30 1E 
1f178     00 00 00 1C 
1f17c     58 78 38 18 
1f180     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
1f184     3C 00 00 00 
1f188     00 00 00 00 
1f18c     63 00 3E 63 
1f190     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
1f194     3E 00 00 00 
1f198     66 33 00 3E 
1f19c     63 63 63 63 
1f1a0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f1a4     3E 00 00 00 
1f1a8     00 00 CC 66 
1f1ac     33 00 3E 63 
1f1b0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
1f1b4     3E 00 00 00 
1f1b8     00 00 18 3C 
1f1bc     66 00 1C 18 
1f1c0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
1f1c4     3C 00 00 00 
1f1c8     30 18 00 7F 
1f1cc     63 61 30 18 
1f1d0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
1f1d4     7F 00 00 00 
1f1d8     00 63 00 08 
1f1dc     1C 36 63 63 
1f1e0     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
1f1e4     63 00 00 00 
1f1e8     30 18 00 3C 
1f1ec     66 43 03 03 
1f1f0     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
1f1f4     3C 00 00 00 
1f1f8     30 18 00 7F 
1f1fc     66 46 16 1E 
1f200     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
1f204     7F 00 00 00 
1f208     0C 06 00 0F 
1f20c     06 06 06 06 
1f210     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
1f214     7F 00 00 00 
1f218     30 18 00 1C 
1f21c     18 18 18 18 
1f220     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
1f224     3C 00 00 00 
1f228     00 00 08 1C 
1f22c     36 00 3E 63 
1f230     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
1f234     3E 00 00 00 
1f238     00 00 00 00 
1f23c     63 00 3E 63 
1f240     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
1f244     3E 00 00 00 
1f248     00 00 00 6F 
1f24c     46 26 06 06 
1f250     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
1f254     7F 00 00 00 
1f258     00 00 00 6E 
1f25c     4C 2C 0C 0C 
1f260     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
1f264     1E 00 00 00 
1f268     30 18 00 3E 
1f26c     63 63 06 1C 
1f270     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
1f274     3E 00 00 00 
1f278     00 00 60 30 
1f27c     18 00 3E 63 
1f280     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
1f284     3E 00 00 00 
1f288     00 63 00 3E 
1f28c     63 63 63 63 
1f290     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
1f294     3E 00 00 00 
1f298     00 63 00 63 
1f29c     63 63 63 63 
1f2a0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
1f2a4     3E 00 00 00 
1f2a8     6C 38 00 7E 
1f2ac     7E 5A 18 18 
1f2b0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
1f2b4     3C 00 00 00 
1f2b8     00 00 60 48 
1f2bc     2C 0C 3F 0C 
1f2c0     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
1f2c4     38 00 00 00 
1f2c8     00 00 00 0F 
1f2cc     26 36 1E 0E 
1f2d0     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
1f2d4     7F 00 00 00 
1f2d8     00 00 00 00 
1f2dc     00 63 36 1C 
1f2e0     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
1f2e4     00 00 00 00 
1f2e8     00 00       | 	byte	$00[6]
1f2ea     36 1C 08 00 
1f2ee     3E 63 03 03 
1f2f2     03 63 3E 00 
1f2f6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
1f2fa     30 18 0C 00 
1f2fe     1E 30 3E 33 
1f302     33 33 6E 00 
1f306     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1f30a     60 30 18 00 
1f30e     1C 18 18 18 
1f312     18 18 3C 00 
1f316     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
1f31a     60 30 18 00 
1f31e     3E 63 63 63 
1f322     63 63 3E 00 
1f326     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
1f32a     30 18 0C 00 
1f32e     33 33 33 33 
1f332     33 33 6E 00 
1f336     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
1f33a     00 08 1C 36 
1f33e     63 63 7F 63 
1f342     63 63 63 18 
1f346     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
1f34a     00 00 00 00 
1f34e     1E 30 3E 33 
1f352     33 33 6E 18 
1f356     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
1f35a     00 7F 63 61 
1f35e     30 18 0C 06 
1f362     43 63 7F 00 
1f366     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
1f36a     36 1C 08 00 
1f36e     7F 33 18 0C 
1f372     06 63 7F 00 
1f376     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
1f37a     00 7F 66 46 
1f37e     16 1E 16 06 
1f382     46 66 7F 18 
1f386     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
1f38a     00 00 00 00 
1f38e     3E 63 7F 03 
1f392     03 63 3E 18 
1f396     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
1f39a     00 3C 66 03 
1f39e     1F 03 0F 03 
1f3a2     03 66 3C 00 
1f3a6     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
1f3aa     60 30 18 00 
1f3ae     7F 33 18 0C 
1f3b2     06 63 7F 00 
1f3b6     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
1f3ba     00 3C 66 43 
1f3be     03 03 03 03 
1f3c2     43 66 3C 00 
1f3c6     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
1f3ca     00 00 00 00 
1f3ce     3E 63 06 1C 
1f3d2     30 63 3E 18 
1f3d6     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
1f3da     00 00 00 00 
1f3de     00 00       | 	byte	$00[6]
1f3e0     6C 36 1B 36 
1f3e4     6C 00 00 00 
1f3e8     00 00 00 00 
1f3ec     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f3f0     1B 36 6C 36 
1f3f4     1B 00 00 00 
1f3f8     88 22 88 22 
1f3fc     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
1f400     88 22 88 22 
1f404     88 22 88 22 
1f408     AA 55 AA 55 
1f40c     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
1f410     AA 55 AA 55 
1f414     AA 55 AA 55 
1f418     BB EE BB EE 
1f41c     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
1f420     BB EE BB EE 
1f424     BB EE BB EE 
1f428     18 18 18 18 
1f42c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
1f430     18 18 18 18 
1f434     18 18 18 18 
1f438     18 18 18 18 
1f43c     18 18 18    | 	byte	$18[15]
1f43f     1F 18 18 18 
1f443     18 18 18 18 
1f447     18 30 18 00 
1f44b     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
1f44f     63 7F 63 63 
1f453     63 63 00 00 
1f457     00 1C 36 00 
1f45b     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
1f45f     63 7F 63 63 
1f463     63 63 00 00 
1f467     00 36 1C 00 
1f46b     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
1f46f     1E 16 06 46 
1f473     66 7F 00 00 
1f477     00 00 00 00 
1f47b     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
1f47f     1C 30 60 63 
1f483     63 3E 18 30 
1f487     1E 6C 6C 6C 
1f48b     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
1f48f     6F 6C 6C 6C 
1f493     6C 6C 6C 6C 
1f497     6C 6C 6C 6C 
1f49b     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f49f     6C 6C 6C 6C 
1f4a3     6C 6C 6C 6C 
1f4a7     6C          | 	byte	$6c[9]
1f4a8     00 00 00 00 
1f4ac     00          | 	byte	$00[5]
1f4ad     7F 60 6F 6C 
1f4b1     6C 6C 6C 6C 
1f4b5     6C 6C 6C 6C 
1f4b9     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f4bd     6F 60 7F 00 
1f4c1     00 00 00 00 
1f4c5     00 00 00 18 
1f4c9     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
1f4cd     61 30 18 0C 
1f4d1     06 43 63 7F 
1f4d5     00 00 00 00 
1f4d9     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
1f4dd     00 7F 33 18 
1f4e1     0C 06 63 7F 
1f4e5     00 00 00 00 
1f4e9     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
1f4ed     00 00 1F 18 
1f4f1     18 18 18 18 
1f4f5     18 18 18 18 
1f4f9     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f4fd     18 18 F8 00 
1f501     00 00 00 00 
1f505     00 00 00 18 
1f509     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1f50d     18 18 FF 00 
1f511     00 00 00 00 
1f515     00 00 00 00 
1f519     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f51d     00 00 FF 18 
1f521     18 18 18 18 
1f525     18 18 18 18 
1f529     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f52d     18 18 F8 18 
1f531     18 18 18 18 
1f535     18 18 18 00 
1f539     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
1f53d     00 00 FF 00 
1f541     00 00 00 00 
1f545     00 00 00 18 
1f549     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
1f54d     18 18 FF 18 
1f551     18 18 18 18 
1f555     18 18 18 63 
1f559     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
1f55d     36 63 63 7F 
1f561     63 63 63 63 
1f565     00 00 00 00 
1f569     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
1f56d     00 1E 30 3E 
1f571     33 33 33 6E 
1f575     00 00 00 6C 
1f579     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1f57d     EC 0C FC 00 
1f581     00 00 00 00 
1f585     00 00 00 00 
1f589     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f58d     FC 0C EC 6C 
1f591     6C 6C 6C 6C 
1f595     6C 6C 6C 6C 
1f599     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f59d     EF 00 FF 00 
1f5a1     00 00 00 00 
1f5a5     00 00 00 00 
1f5a9     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f5ad     FF 00 EF 6C 
1f5b1     6C 6C 6C 6C 
1f5b5     6C 6C 6C 6C 
1f5b9     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
1f5bd     EC 0C EC 6C 
1f5c1     6C 6C 6C 6C 
1f5c5     6C 6C 6C 00 
1f5c9     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1f5cd     FF 00 FF 00 
1f5d1     00 00 00 00 
1f5d5     00 00 00 6C 
1f5d9     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
1f5dd     EF 00 EF 6C 
1f5e1     6C 6C 6C 6C 
1f5e5     6C 6C 6C 00 
1f5e9     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
1f5ed     63 3E 63 63 
1f5f1     63 63 3E 63 
1f5f5     00 00 00 00 
1f5f9     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
1f5fd     30 3C 36 33 
1f601     33 33 33 6E 
1f605     00 00 00 00 
1f609     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
1f60d     66 66 6F 66 
1f611     66 66 36 1F 
1f615     00 00 00 36 
1f619     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
1f61d     66 66 66 66 
1f621     66 66       | 	byte	$66[6]
1f623     36 1F 00 00 
1f627     00 00 63 00 
1f62b     7F 66 46 16 
1f62f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
1f633     66 7F 00 00 
1f637     00 6C 38 00 
1f63b     38 30 30 3C 
1f63f     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
1f643     33 6E 00 00 
1f647     00 36 1C 00 
1f64b     63 67 6F 7F 
1f64f     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
1f653     63 63 00 00 
1f657     00 30 18 00 
1f65b     3C 18 18 18 
1f65f     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1f663     18 3C 00 00 
1f667     00 3C 66 00 
1f66b     3C 18 18 18 
1f66f     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
1f673     18 3C 00 00 
1f677     00 00 00 36 
1f67b     1C 08 00 3E 
1f67f     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
1f683     63 3E 00 00 
1f687     00 18 18 18 
1f68b     18 18 18 18 
1f68f     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
1f693     00 00 00 00 
1f697     00 00 00 00 
1f69b     00 00 00 00 | 	byte	$00[12]
1f69f     F8 18 18 18 
1f6a3     18 18 18 18 
1f6a7     18 FF FF FF 
1f6ab     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
1f6af     FF FF FF FF 
1f6b3     FF FF FF FF 
1f6b7     FF          | 	byte	$ff[9]
1f6b8     00 00 00 00 
1f6bc     00 00 00    | 	byte	$00[7]
1f6bf     FF FF FF FF 
1f6c3     FF FF FF FF 
1f6c7     FF          | 	byte	$ff[9]
1f6c8     00 00 00 7E 
1f6cc     7E 5A 18 18 
1f6d0     18 18 18 18 
1f6d4     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
1f6d8     1C 36 1C 63 
1f6dc     63 63 63 63 
1f6e0     63 63 63 63 
1f6e4     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f6e8     FF FF FF FF 
1f6ec     FF FF FF    | 	byte	$ff[7]
1f6ef     00 00 00 00 
1f6f3     00 00 00 00 
1f6f7     00          | 	byte	$00[9]
1f6f8     30 18 00 3E 
1f6fc     63 63 63 63 
1f700     63 63 63 63 
1f704     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f708     00 00 00 1E 
1f70c     33 33 33 1B 
1f710     33 63 63 63 
1f714     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
1f718     1C 36 00 3E 
1f71c     63 63 63 63 
1f720     63 63 63 63 
1f724     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f728     30 18 00 63 
1f72c     67 6F 7F 7B 
1f730     73 63 63 63 
1f734     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
1f738     00 00 60 30 
1f73c     18 00 3B 66 
1f740     66 66 66 66 
1f744     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1f748     00 00 36 1C 
1f74c     08 00 3B 66 
1f750     66 66 66 66 
1f754     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
1f758     36 1C 00 3E 
1f75c     63 63 06 1C 
1f760     30 60 63 63 
1f764     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
1f768     00 00 36 1C 
1f76c     08 00 3E 63 
1f770     06 1C 30 63 
1f774     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
1f778     30 18 00 3F 
1f77c     66 66 66 3E 
1f780     36 66 66 66 
1f784     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
1f788     30 18 00 63 
1f78c     63 63 63 63 
1f790     63 63 63 63 
1f794     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f798     00 00 60 30 
1f79c     18 00 3B 6E 
1f7a0     66 06 06 06 
1f7a4     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
1f7a8     66 33 00 63 
1f7ac     63 63 63 63 
1f7b0     63 63 63 63 
1f7b4     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
1f7b8     00 00 60 30 
1f7bc     18 00 63 63 
1f7c0     63 63 63 63 
1f7c4     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
1f7c8     30 18 00 66 
1f7cc     66 66 66 3C 
1f7d0     18 18 18 18 
1f7d4     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
1f7d8     00 00 00 08 
1f7dc     0C 0C 3F 0C 
1f7e0     0C 0C 0C 6C 
1f7e4     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
1f7e8     30 18 00 00 
1f7ec     00 00 00 00 
1f7f0     00 00 00 00 
1f7f4     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f7f8     00 00 00 00 
1f7fc     00 00 00 00 | 	byte	$00[8]
1f800     7F 00 00 00 
1f804     00 00 00 00 
1f808     66 33 00 00 
1f80c     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
1f810     00 00 00 00 
1f814     00 00 00 00 
1f818     00 00 00 00 
1f81c     00 00 00 00 
1f820     00 00 00 00 
1f824     00          | 	byte	$00[21]
1f825     0C 06 3C 36 
1f829     1C 00 00 00 
1f82d     00 00 00 00 
1f831     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f835     00 00 00 63 
1f839     3E 00 00 00 
1f83d     00 00 00 00 
1f841     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f845     00 00 00 00 
1f849     3E 63 06 1C 
1f84d     36 63 63 36 
1f851     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
1f855     00 00 00 00 
1f859     00 00 00 00 | 	byte	$00[8]
1f85d     18 00 7E 00 
1f861     18 00 00 00 
1f865     00 00 00 00 
1f869     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f86d     00 00 00 00 
1f871     00 00 00 00 | 	byte	$00[8]
1f875     18 30 1E 00 
1f879     00 00 1C 36 
1f87d     36 1C 00 00 
1f881     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
1f885     00 00 00 00 
1f889     63 00 00 00 
1f88d     00 00 00 00 
1f891     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f895     00 00 00 18 
1f899     18 00 00 00 
1f89d     00 00 00 00 
1f8a1     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f8a5     00 00 00 00 
1f8a9     00          | 	byte	$00[5]
1f8aa     CC 66 33 00 
1f8ae     33 33 33 33 
1f8b2     33 33 6E 00 
1f8b6     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
1f8ba     00 3F 66 66 
1f8be     66 3E 36 66 
1f8c2     66 66 6F 00 
1f8c6     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
1f8ca     36 1C 08 00 
1f8ce     3B 6E 66 06 
1f8d2     06 06 0F 00 
1f8d6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
1f8da     00 00 00 7E 
1f8de     7E 7E 7E 7E 
1f8e2     7E 7E 00 00 
1f8e6     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
1f8ea     00 00 00 00 
1f8ee     00 00 00 00 
1f8f2     00 00 00 00 
1f8f6     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1f8f8     00 00 00 00 
      ...             
1f928     00 00 00 00 
1f92c     00 00 00    | st_font        file "st4font.def"
1f92f     FF FF 00 00 
1f933     00 00 00 00 
1f937     00 18 18 18 
1f93b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1f93f     18 18 18 18 
1f943     18 18 18 18 
1f947     18          | 	byte	$18[9]
1f948     00 00 00 00 
1f94c     00 00 00    | 	byte	$00[7]
1f94f     FF FF 18 18 
1f953     18 18 18 18 
1f957     18 18 18 18 
1f95b     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f95f     FF FF 00 00 
1f963     00 00 00 00 
1f967     00 18 18 18 
1f96b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1f96f     1F 1F 18 18 
1f973     18 18 18 18 
1f977     18 18 18 18 
1f97b     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f97f     F8 F8 18 18 
1f983     18 18 18 18 
1f987     18 00 00 00 
1f98b     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1f98f     1F 1F 18 18 
1f993     18 18 18 18 
1f997     18 00 00 00 
1f99b     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1f99f     F8 F8 18 18 
1f9a3     18 18 18 18 
1f9a7     18 18 18 18 
1f9ab     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
1f9af     1F 1F 00 00 
1f9b3     00 00 00 00 
1f9b7     00 18 18 18 
1f9bb     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1f9bf     F8 F8 00 00 
1f9c3     00 00 00 00 
1f9c7     00 18 18 18 
1f9cb     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
1f9cf     FF FF 18 18 
1f9d3     18 18 18 18 
1f9d7     18 00 00 18 
1f9db     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
1f9df     66 7E 7E 66 
1f9e3     66 66 66 30 
1f9e7     18 00 00 7E 
1f9eb     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
1f9ef     3E 06 06 06 
1f9f3     06 7E 7E 18 
1f9f7     0C 30 18 3C 
1f9fb     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
1f9ff     06 06 06 66 
1fa03     66 7E 3C 00 
1fa07     00 30 18 66 
1fa0b     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
1fa0f     7E 7E 76 76 
1fa13     66 66 66 00 
1fa17     00 30 18 7C 
1fa1b     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
1fa1f     1C 38 70 60 
1fa23     60 7E 3E 00 
1fa27     00 30 18 7E 
1fa2b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
1fa2f     18 0C 0C 06 
1fa33     06 7E 7E 00 
1fa37     00 18 18 00 
1fa3b     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
1fa3f     18 18 0C 0C 
1fa43     06 7E 7E 00 
1fa47     00 30 18 3C 
1fa4b     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
1fa4f     66 66 66 66 
1fa53     66          | 	byte	$66[5]
1fa54     7E 3C 00 00 
1fa58     00 00 06 06 
1fa5c     06 06 16 1E 
1fa60     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
1fa64     7E 7E 00 00 
1fa68     00 00 00 00 
1fa6c     00 3C 7C 60 
1fa70     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
1fa74     7E 7C 30 18 
1fa78     00 00 00 00 
1fa7c     00 3C 7E 66 
1fa80     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
1fa84     7E 7C 18 0C 
1fa88     00 00 30 18 
1fa8c     00 3C 3E 06 
1fa90     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
1fa94     7E 7C 00 00 
1fa98     00 00 30 18 
1fa9c     00 3E 7E 66 
1faa0     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
1faa4     66 66 00 00 
1faa8     00 00 30 18 
1faac     00 7C 7E 06 
1fab0     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
1fab4     7E 3E 00 00 
1fab8     00 00 30 18 
1fabc     00 7E 7E 30 
1fac0     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1fac4     7E 7E 00 00 
1fac8     00 00 18 18 
1facc     00 7E 7E 30 
1fad0     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
1fad4     7E 7E 00 00 
1fad8     00 00 30 18 
1fadc     00 3C 7E 66 
1fae0     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
1fae4     7E 3C 00 00 
1fae8     00 00 1C 1C 
1faec     18 18 38 3C 
1faf0     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
1faf4     3C 3C 00 00 
1faf8     00 00 00 00 
1fafc     00 00 00 00 
1fb00     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1fb04     00 00 00 00 
1fb08     00 00       | 	byte	$00[6]
1fb0a     18 18 18 18 
1fb0e     18 18 18 18 | 	byte	$18[8]
1fb12     00 00 18 18 
1fb16     00 00 00 00 
1fb1a     66 66 66 66 
1fb1e     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
1fb22     00 00 00 00 
1fb26     00 00 00 00 
1fb2a     00          | 	byte	$00[9]
1fb2b     66 66 FF FF 
1fb2f     66 66 FF FF 
1fb33     66 66 00 00 
1fb37     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
1fb3b     7C 7E 06 06 
1fb3f     3E 7C 60 60 
1fb43     7E 3E 18 18 
1fb47     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
1fb4b     66 30 30 18 
1fb4f     18 0C 0C 66 
1fb53     66 00 00 00 
1fb57     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
1fb5b     66 66 3C 1C 
1fb5f     1C FC FE 66 
1fb63     66 FE FC 00 
1fb67     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
1fb6b     18 18 18 18 
1fb6f     00 00 00 00 
1fb73     00 00 00 00 
1fb77     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
1fb7b     18 1C 0C 0C 
1fb7f     0C 0C 0C 0C 
1fb83     1C 18 30 00 
1fb87     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
1fb8b     18 38 30 30 
1fb8f     30 30 30 30 
1fb93     38 18 0C 00 
1fb97     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
1fb9b     66 66 3C 3C 
1fb9f     FF FF 3C 3C 
1fba3     66 66 00 00 
1fba7     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
1fbab     00 18 18 18 
1fbaf     7E 7E 18 18 
1fbb3     18 00 00 00 
1fbb7     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1fbbb     00 00 00 00 
1fbbf     00 00       | 	byte	$00[6]
1fbc1     18 18 18 18 
1fbc5     18          | 	byte	$18[5]
1fbc6     0C 04 00 00 
1fbca     00 00 00 00 
1fbce     7E 7E 00 00 
1fbd2     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
1fbd6     00 00 00 00 
1fbda     00 00 00 00 
1fbde     00 00 00 00 
1fbe2     00          | 	byte	$00[13]
1fbe3     18 18 18 00 
1fbe7     00 00 00 60 
1fbeb     60 60 30 30 
1fbef     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
1fbf3     06 06 06 00 
1fbf7     00 00 00 3C 
1fbfb     7E 66 66 66 
1fbff     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
1fc03     66 7E 3C 00 
1fc07     00 00 00 18 
1fc0b     18 1C 1C 18 
1fc0f     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
1fc13     18 7E 7E 00 
1fc17     00 00 00 3C 
1fc1b     7E 66 66 30 
1fc1f     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
1fc23     0C 7E 7E 00 
1fc27     00 00 00 7E 
1fc2b     7E 30 30 18 
1fc2f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
1fc33     66 7E 3C 00 
1fc37     00 00 00 30 
1fc3b     30 38 38 3C 
1fc3f     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
1fc43     7E 30 30 00 
1fc47     00 00 00 7E 
1fc4b     7E 06 06 3E 
1fc4f     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
1fc53     66 7E 3C 00 
1fc57     00 00 00 38 
1fc5b     3C 0E 06 06 
1fc5f     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
1fc63     66 7E 3C 00 
1fc67     00 00 00 7E 
1fc6b     7E 60 60 30 
1fc6f     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
1fc73     0C 0C 0C 00 
1fc77     00 00 00 3C 
1fc7b     7E 66 66 3C 
1fc7f     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
1fc83     66 7E 3C 00 
1fc87     00 00 00 3C 
1fc8b     7E 66 66 7E 
1fc8f     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
1fc93     70 3C 1C 00 
1fc97     00 00 00 00 
1fc9b     00 00 18 18 
1fc9f     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
1fca3     18 18 18 00 
1fca7     00 00 00 00 
1fcab     00 00 18 18 
1fcaf     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
1fcb3     18 18 18 0C 
1fcb7     04 00 00 00 
1fcbb     70 38 1C 0E 
1fcbf     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
1fcc3     70 00 00 00 
1fcc7     00 00 00 00 
1fccb     00 00 7E 7E 
1fccf     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
1fcd3     00 00 00 00 
1fcd7     00 00 00 00 | 	byte	$00[8]
1fcdb     0E 1C 38 70 
1fcdf     E0 70 38 1C 
1fce3     0E 00 00 00 
1fce7     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
1fceb     7E 66 66 30 
1fcef     30 18 18 18 
1fcf3     00 18 18 00 
1fcf7     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
1fcfb     7E 66 66 66 
1fcff     66 36 06 66 
1fd03     66 7E 3C 00 
1fd07     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
1fd0b     3C 7E 66 66 
1fd0f     66 7E 7E 66 
1fd13     66 66 66 00 
1fd17     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
1fd1b     7E 66 66 7E 
1fd1f     3E 66 66 66 
1fd23     66 7E 3E 00 
1fd27     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
1fd2b     7E 66 66 06 
1fd2f     06 06 06 66 
1fd33     66 7E 3C 00 
1fd37     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
1fd3b     7E 66 66 66 
1fd3f     66 66 66 66 
1fd43     66 7E 3E 00 
1fd47     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
1fd4b     7E 06 06 3E 
1fd4f     3E 06 06 06 
1fd53     06 7E 7E 00 
1fd57     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
1fd5b     7E 06 06 3E 
1fd5f     3E 06 06 06 
1fd63     06 06 06 00 
1fd67     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
1fd6b     7E 06 06 76 
1fd6f     76 66 66 66 
1fd73     66 7E 3C 00 
1fd77     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
1fd7b     66 66 66 7E 
1fd7f     7E 66 66 66 
1fd83     66 66 66 00 
1fd87     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
1fd8b     7E 18 18 18 
1fd8f     18 18 18 18 
1fd93     18 7E 7E 00 
1fd97     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
1fd9b     60 60 60 60 
1fd9f     60 60 60    | 	byte	$60[7]
1fda2     66 66 7E 3C 
1fda6     00 00 00 00 
1fdaa     66 66 36 36 
1fdae     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
1fdb2     66 66 C6 C6 
1fdb6     00 00 00 00 
1fdba     06 06 06 06 
1fdbe     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
1fdc2     06 06 7E 7E 
1fdc6     00 00 00 00 
1fdca     C6 C6 EE EE 
1fdce     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
1fdd2     C6 C6 C6 C6 
1fdd6     00 00 00 00 
1fdda     66 66 66 6E 
1fdde     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
1fde2     76 66 66 66 
1fde6     00 00 00 00 
1fdea     3C 7E 66 66 
1fdee     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1fdf2     66 66 7E 3C 
1fdf6     00 00 00 00 
1fdfa     3E 7E 66 66 
1fdfe     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
1fe02     06 06 06 06 
1fe06     00 00 00 00 
1fe0a     3C 7E 66 66 
1fe0e     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
1fe12     66 56 3E 6C 
1fe16     00 00 00 00 
1fe1a     3E 7E 66 66 
1fe1e     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
1fe22     66 66 C6 C6 
1fe26     00 00 00 00 
1fe2a     7C 7E 06 06 
1fe2e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
1fe32     60 60 7E 3E 
1fe36     00 00 00 00 
1fe3a     7E 7E 18 18 
1fe3e     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
1fe42     18 18 18 18 
1fe46     00 00 00 00 
1fe4a     66 66 66 66 
1fe4e     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1fe52     66 66 7E 3C 
1fe56     00 00 00 00 
1fe5a     66 66 66 66 
1fe5e     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
1fe62     3C 3C 18 18 
1fe66     00 00 00 00 
1fe6a     C6 C6 C6 C6 
1fe6e     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
1fe72     FE EE C6 82 
1fe76     00 00 00 00 
1fe7a     66 66 66 3C 
1fe7e     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
1fe82     3C 66 66 66 
1fe86     00 00 00 00 
1fe8a     66 66 66 66 
1fe8e     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
1fe92     18 18 18 18 
1fe96     00 00 00 00 
1fe9a     7E 7E 30 30 
1fe9e     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
1fea2     06 06 7E 7E 
1fea6     00 00 00 00 
1feaa     3C 3C 0C 0C 
1feae     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
1feb2     0C 0C 3C 3C 
1feb6     00 00 00 00 
1feba     06 06 0C 0C 
1febe     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
1fec2     60 60 C0 C0 
1fec6     00 00 00 00 
1feca     3C 3C 30 30 
1fece     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
1fed2     30 30 3C 3C 
1fed6     00 00 00 00 
1feda     18 18 3C 3C 
1fede     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
1fee2     00 00 00 00 
1fee6     00 00 00 00 
1feea     00 00 00 00 
1feee     00 00 00 00 
1fef2     00 00       | 	byte	$00[18]
1fef4     FE FE 00 00 
1fef8     00 00 0C 0C 
1fefc     18 18 00 00 
1ff00     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
1ff04     00 00 00 00 
1ff08     00 00 00 00 
1ff0c     00          | 	byte	$00[9]
1ff0d     3C 7C 60 7C 
1ff11     7E 66 66 7E 
1ff15     7C 00 00 00 
1ff19     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
1ff1d     3E 7E 66 66 
1ff21     66 66 66 7E 
1ff25     3E 00 00 00 
1ff29     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
1ff2d     3C 3E 06 06 
1ff31     06 06 06 7E 
1ff35     7C 00 00 00 
1ff39     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
1ff3d     7C 7E 66 66 
1ff41     66 66 66 7E 
1ff45     7C 00 00 00 
1ff49     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
1ff4d     3C 7E 66 66 
1ff51     7E 06 06 7E 
1ff55     7C 00 00 00 
1ff59     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
1ff5d     18 7E 7E 18 
1ff61     18 18 18 18 
1ff65     18 00 00 00 
1ff69     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
1ff6d     7C 7E 66 66 
1ff71     66 66 7E 7C 
1ff75     60 7E 3E 00 
1ff79     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
1ff7d     3E 7E 66 66 
1ff81     66 66 66 66 
1ff85     66 00 00 00 
1ff89     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
1ff8d     1C 1C 18 18 
1ff91     18 18 18 3C 
1ff95     3C 00 00 00 
1ff99     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
1ff9d     30 30 30 30 
1ffa1     30 30 30 30 
1ffa5     30          | 	byte	$30[9]
1ffa6     3E 1E 00 00 
1ffaa     06 06 06 36 
1ffae     36 1E 1E 1E 
1ffb2     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
1ffb6     00 00 00 00 
1ffba     1C 1C 18 18 
1ffbe     18 18 18 18 
1ffc2     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
1ffc6     00 00 00 00 
1ffca     00 00 00    | 	byte	$00[7]
1ffcd     6C FE FE D6 
1ffd1     D6 C6 C6 C6 
1ffd5     C6 00 00 00 
1ffd9     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
1ffdd     3E 7E 66 66 
1ffe1     66 66 66 66 
1ffe5     66 00 00 00 
1ffe9     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
1ffed     3C 7E 66 66 
1fff1     66 66 66 7E 
1fff5     3C 00 00 00 
1fff9     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
1fffd     3E 7E 66 66 
20001     66 66 66 7E 
20005     3E 06 06 00 
20009     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
2000d     7C 7E 66 66 
20011     66 66 66 7E 
20015     7C 60 60 00 
20019     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
2001d     3E 7E 66 06 
20021     06 06 06 06 
20025     06 00 00 00 
20029     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
2002d     7C 7E 06 0E 
20031     3C 70 60 7E 
20035     3E 00 00 00 
20039     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
2003d     7E 7E 18 18 
20041     18 18 18 78 
20045     70 00 00 00 
20049     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
2004d     66 66 66 66 
20051     66 66 66    | 	byte	$66[7]
20054     7E 7C 00 00 
20058     00 00 00 00 
2005c     00 66 66 66 
20060     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
20064     18 18 00 00 
20068     00 00 00 00 
2006c     00 C6 C6 D6 
20070     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
20074     C6 82 00 00 
20078     00 00 00 00 
2007c     00 66 66 3C 
20080     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
20084     66 66 00 00 
20088     00 00 00 00 
2008c     00 66 66 66 
20090     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
20094     7C 60 7E 3E 
20098     00 00 00 00 
2009c     00 7E 7E 30 
200a0     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
200a4     7E 7E 00 00 
200a8     00 00 30 18 
200ac     18 18 18 0C 
200b0     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
200b4     18 30 00 00 
200b8     00 00 18 18 
200bc     18 18 18 18 
200c0     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
200c4     18 18 00 00 
200c8     00 00 0C 18 
200cc     18 18 18 30 
200d0     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
200d4     18 0C 00 00 
200d8     00 00 6C 7E 
200dc     36 00 00 00 
200e0     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
200e4     00 00 00 00 
200e8     00 00 00 00 
200ec     00          | 	byte	$00[9]
200ed     18 18 18 18 
200f1     18 18 00 00 
200f5     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
200f8     00 6C FE FE 
200fc     7C 38 10 00 
20100     18 18 18 F8 
20104     F8 18 18 18 | a8_font        file "atari8.fnt"
20108     C0 C0 C0 C0 
2010c     C0 C0 C0 C0 | 	byte	$c0[8]
20110     18 18 18 1F 
20114     1F 00 00 00 
20118     18 18 18 1F 
2011c     1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
20120     00 00 00 1F 
20124     1F 18 18 18 
20128     C0 E0 70 38 
2012c     1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
20130     03 07 0E 1C 
20134     38 70 E0 C0 
20138     80 C0 E0 F0 
2013c     F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
20140     00 00 00 00 
20144     F0 F0 F0 F0 
20148     01 03 07 0F 
2014c     1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
20150     F0 F0 F0 F0 
20154     00 00 00 00 
20158     0F 0F 0F 0F 
2015c     00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
20160     FF FF 00 00 
20164     00 00 00 00 
20168     00 00 00 00 
2016c     00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
20170     00 00 00 00 
20174     0F 0F 0F 0F 
20178     00 38 38 EE 
2017c     EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
20180     00 00 00 F8 
20184     F8 18 18 18 
20188     00 00 00 FF 
2018c     FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
20190     18 18 18 FF 
20194     FF 18 18 18 
20198     00 00 3C 7E 
2019c     7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
201a0     00 00 00 00 
201a4     FF FF FF FF 
201a8     03 03 03 03 
201ac     03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
201b0     00 00 00 FF 
201b4     FF 18 18 18 
201b8     18 18 18 FF 
201bc     FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
201c0     0F 0F 0F 0F 
201c4     0F 0F 0F 0F | 	byte	$0f[8]
201c8     18 18 18 F8 
201cc     F8 00 00 00 
201d0     1E 06 1E 06 
201d4     7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
201d8     00 18 3C 7E 
201dc     18 18 18 00 
201e0     00 18 18 18 
201e4     7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
201e8     00 18 0C 7E 
201ec     0C 18 00 00 
201f0     00 18 30 7E 
201f4     30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
201f8     00 00 00 00 
201fc     00 00 00 00 
20200     00          | 	byte	$00[9]
20201     18 18 18 18 
20205     00 18 00 00 
20209     66 66 66 00 
2020d     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
20211     66 FF 66 66 
20215     FF 66 00 18 
20219     7C 06 3C 60 
2021d     3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
20221     66 36 18 0C 
20225     66 62 00 38 
20229     6C 38 1C F6 
2022d     66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
20231     18 18 18 00 
20235     00 00 00 00 
20239     70 38 18 18 
2023d     38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
20241     0E 1C 18 18 
20245     1C 0E 00 00 
20249     66 3C FF 3C 
2024d     66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
20251     18 18 7E 18 
20255     18 00 00 00 
20259     00 00 00 00 
2025d     18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
20261     00 00 7E 00 
20265     00 00 00 00 
20269     00 00 00 00 
2026d     18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
20271     60 30 18 0C 
20275     06 02 00 00 
20279     3C 66 76 6E 
2027d     66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
20281     18 1C 18 18 
20285     18 7E 00 00 
20289     3C 66 30 18 
2028d     0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
20291     7E 30 18 30 
20295     66 3C 00 00 
20299     30 38 3C 36 
2029d     7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
202a1     7E 06 3E 60 
202a5     66 3C 00 00 
202a9     3C 06 3E 66 
202ad     66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
202b1     7E 60 30 18 
202b5     0C 0C 00 00 
202b9     3C 66 3C 66 
202bd     66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
202c1     3C 66 7C 60 
202c5     30 1C 00 00 
202c9     00 18 18 00 
202cd     18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
202d1     00 18 18 00 
202d5     18 18 0C 60 
202d9     30 18 0C 18 
202dd     30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
202e1     00 7E 00 00 
202e5     7E 00 00 06 
202e9     0C 18 30 18 
202ed     0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
202f1     3C 66 30 18 
202f5     00 18 00 00 
202f9     3C 66 76 76 
202fd     06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
20301     18 3C 66 66 
20305     7E 66 00 00 
20309     3E 66 3E 66 
2030d     66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
20311     3C 66 06 06 
20315     66 3C 00 00 
20319     1E 36 66 66 
2031d     36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
20321     7E 06 3E 06 
20325     06 7E 00 00 
20329     7E 06 3E 06 
2032d     06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
20331     7C 06 06 76 
20335     66 7C 00 00 
20339     66 66 7E 66 
2033d     66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
20341     7E 18 18 18 
20345     18 7E 00 00 
20349     60 60 60 60 
2034d     66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
20351     66 36 1E 1E 
20355     36 66 00 00 
20359     06 06 06 06 
2035d     06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
20361     C6 EE FE D6 
20365     C6 C6 00 00 
20369     66 6E 7E 7E 
2036d     76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
20371     3C 66 66 66 
20375     66 3C 00 00 
20379     3E 66 66 3E 
2037d     06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
20381     3C 66 66 66 
20385     36 6C 00 00 
20389     3E 66 66 3E 
2038d     36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
20391     3C 06 3C 60 
20395     60 3C 00 00 
20399     7E 18 18 18 
2039d     18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
203a1     66 66 66 66 
203a5     66          | 	byte	$66[5]
203a6     7E 00 00 66 
203aa     66 66 66 3C 
203ae     18 00 00 C6 
203b2     C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
203b6     C6 00 00 66 
203ba     66 3C 3C 66 
203be     66 00 00 66 
203c2     66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
203c6     18 00 00 7E 
203ca     30 18 0C 06 
203ce     7E 00 00 78 
203d2     18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
203d6     78 00 00 02 
203da     06 0C 18 30 
203de     60 00 00 1E 
203e2     18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
203e6     1E 00 00 10 
203ea     38 6C C6 00 
203ee     00 00 00 00 
203f2     00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
203f6     FF 00 00 18 
203fa     3C 7E 7E 3C 
203fe     18 00 00 00 
20402     3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
20406     7C 00 00 06 
2040a     06 3E 66 66 
2040e     3E 00 00 00 
20412     3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
20416     3C 00 00 60 
2041a     60 7C 66 66 
2041e     7C 00 00 00 
20422     3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
20426     3C 00 00 70 
2042a     18 7C 18 18 
2042e     18 00 00 00 
20432     7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
20436     60 3E 00 06 
2043a     06 3E 66 66 
2043e     66 00 00 18 
20442     00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
20446     3C 00 00 60 
2044a     00 60 60 60 
2044e     60 3C 00 06 
20452     06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
20456     66 00 00 1C 
2045a     18 18 18 18 
2045e     3C 00 00 00 
20462     66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
20466     C6 00 00 00 
2046a     3E 66 66 66 
2046e     66 00 00 00 
20472     3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
20476     3C 00 00 00 
2047a     3E 66 66 3E 
2047e     06 06 00 00 
20482     7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
20486     60 60 00 00 
2048a     3E 66 06 06 
2048e     06 00 00 00 
20492     7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
20496     3E 00 00 18 
2049a     7E 18 18 18 
2049e     70 00 00 00 
204a2     66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
204a6     7C 00 00 00 
204aa     66 66 66 3C 
204ae     18 00 00 00 
204b2     C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
204b6     6C 00 00 00 
204ba     66 3C 18 3C 
204be     66 00 00 00 
204c2     66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
204c6     30 1E 00 00 
204ca     7E 30 18 0C 
204ce     7E 00 00 18 
204d2     3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
204d6     3C 00 18 18 
204da     18 18 18 18 
204de     18 18 00 7E 
204e2     1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
204e6     60 00 10 18 
204ea     1C 1E 1C 18 
204ee     10 00 08 18 
204f2     38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
204f6     08 00       | 	byte	$08, $00
204f8     00 00 00 00 
204fc     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
20500     00 00 00 00 
20504     00 80 80 80 
20508     00 00 00 FF 
2050c     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
20510     00 00 00 00 
20514     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
20515     80 00 00 00 
20519     00 80 00 00 
2051d     80 80 00 00 
20521     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
20525     80 00 80 00 
20529     00 40 80 00 
2052d     AA AA AA 00 
20531     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
20535     FF 00 00 00 
20539     00 FF 00 00 
2053d     FF FF 00 00 
20541     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
20545     FF 00 FF 00 
20549     00 FF FF 00 
2054d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
20550     00 00 00 00 
20554     00          | ataripalette   file "ataripalettep2.def"
20555     11 11 11 00 
20559     22 22 22 00 
2055d     33 33 33 00 
20561     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
20565     55 55 55 00 
20569     66 66 66 00 
2056d     77 77 77 00 
20571     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
20575     99 99 99 00 
20579     AA AA AA 00 
2057d     BB BB BB 00 
20581     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
20585     DD DD DD 00 
20589     EE EE EE 00 
2058d     FF FF FF 00 
20591     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
20595     00 14 40 00 
20599     00 1E 60 00 
2059d     00 28 80 00 
205a1     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
205a5     00 3C BF 00 
205a9     00 46 DF 00 
205ad     00 50 FF 00 
205b1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
205b5     39 77 FF 00 
205b9     55 8A FF 00 
205bd     71 9E FF 00 
205c1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
205c5     AA C5 FF 00 
205c9     C6 D8 FF 00 
205cd     E3 EC FF 00 
205d1     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
205d5     00 00 40 00 
205d9     00 00 60 00 
205dd     00 00 80 00 
205e1     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
205e5     00 00 BF 00 
205e9     00 00 DF 00 
205ed     00 00 FF 00 
205f1     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
205f5     39 39 FF 00 
205f9     55 55 FF 00 
205fd     71 71 FF 00 
20601     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
20605     AA AA FF 00 
20609     C6 C6 FF 00 
2060d     E3 E3 FF 00 
20611     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
20615     20 00 40 00 
20619     30 00 60 00 
2061d     40 00 80 00 
20621     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
20625     60 00 BF 00 
20629     70 00 DF 00 
2062d     80 00 FF 00 
20631     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
20635     9C 39 FF 00 
20639     AA 55 FF 00 
2063d     B8 71 FF 00 
20641     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
20645     D5 AA FF 00 
20649     E3 C6 FF 00 
2064d     F1 E3 FF 00 
20651     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
20655     40 00 40 00 
20659     60 00 60 00 
2065d     80 00 80 00 
20661     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
20665     BF 00 BF 00 
20669     DF 00 DF 00 
2066d     FF 00 FF 00 
20671     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
20675     FF 39 FF 00 
20679     FF 55 FF 00 
2067d     FF 71 FF 00 
20681     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
20685     FF AA FF 00 
20689     FF C6 FF 00 
2068d     FF E3 FF 00 
20691     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
20695     40 00 20 00 
20699     60 00 30 00 
2069d     80 00 40 00 
206a1     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
206a5     BF 00 60 00 
206a9     DF 00 70 00 
206ad     FF 00 80 00 
206b1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
206b5     FF 39 9C 00 
206b9     FF 55 AA 00 
206bd     FF 71 B8 00 
206c1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
206c5     FF AA D5 00 
206c9     FF C6 E3 00 
206cd     FF E3 F1 00 
206d1     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
206d5     40 00 00 00 
206d9     60 00 00 00 
206dd     80 00 00 00 
206e1     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
206e5     BF 00 00 00 
206e9     DF 00 00 00 
206ed     FF 00 00 00 
206f1     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
206f5     FF 39 39 00 
206f9     FF 55 55 00 
206fd     FF 71 71 00 
20701     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
20705     FF AA AA 00 
20709     FF C6 C6 00 
2070d     FF E3 E3 00 
20711     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
20715     40 10 00 00 
20719     60 18 00 00 
2071d     80 20 00 00 
20721     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
20725     BF 30 00 00 
20729     DF 38 00 00 
2072d     FF 40 00 00 
20731     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
20735     FF 6A 39 00 
20739     FF 80 55 00 
2073d     FF 95 71 00 
20741     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
20745     FF BF AA 00 
20749     FF D5 C6 00 
2074d     FF EA E3 00 
20751     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
20755     40 20 00 00 
20759     60 30 00 00 
2075d     80 40 00 00 
20761     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
20765     BF 60 00 00 
20769     DF 70 00 00 
2076d     FF 80 00 00 
20771     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
20775     FF 9C 39 00 
20779     FF AA 55 00 
2077d     FF B8 71 00 
20781     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
20785     FF D5 AA 00 
20789     FF E3 C6 00 
2078d     FF F1 E3 00 
20791     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
20795     40 30 00 00 
20799     60 48 00 00 
2079d     80 60 00 00 
207a1     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
207a5     BF 90 00 00 
207a9     DF A8 00 00 
207ad     FF C0 00 00 
207b1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
207b5     FF CE 39 00 
207b9     FF D5 55 00 
207bd     FF DC 71 00 
207c1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
207c5     FF EA AA 00 
207c9     FF F1 C6 00 
207cd     FF F8 E3 00 
207d1     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
207d5     30 40 00 00 
207d9     48 60 00 00 
207dd     60 80 00 00 
207e1     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
207e5     90 BF 00 00 
207e9     A8 DF 00 00 
207ed     C0 FF 00 00 
207f1     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
207f5     CE FF 39 00 
207f9     D5 FF 55 00 
207fd     DC FF 71 00 
20801     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
20805     EA FF AA 00 
20809     F1 FF C6 00 
2080d     F8 FF E3 00 
20811     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
20815     00 40 00 00 
20819     00 60 00 00 
2081d     00 80 00 00 
20821     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
20825     00 BF 00 00 
20829     00 DF 00 00 
2082d     00 FF 00 00 
20831     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
20835     39 FF 39 00 
20839     55 FF 55 00 
2083d     71 FF 71 00 
20841     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
20845     AA FF AA 00 
20849     C6 FF C6 00 
2084d     E3 FF E3 00 
20851     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
20855     00 40 14 00 
20859     00 60 1E 00 
2085d     00 80 28 00 
20861     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
20865     00 BF 3C 00 
20869     00 DF 46 00 
2086d     00 FF 50 00 
20871     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
20875     39 FF 77 00 
20879     55 FF 8A 00 
2087d     71 FF 9E 00 
20881     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
20885     AA FF C5 00 
20889     C6 FF D8 00 
2088d     E3 FF EC 00 
20891     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
20895     00 40 28 00 
20899     00 60 3C 00 
2089d     00 80 50 00 
208a1     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
208a5     00 BF 78 00 
208a9     00 DF 8C 00 
208ad     00 FF A0 00 
208b1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
208b5     39 FF B5 00 
208b9     55 FF C0 00 
208bd     71 FF CA 00 
208c1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
208c5     AA FF DF 00 
208c9     C6 FF EA 00 
208cd     E3 FF F4 00 
208d1     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
208d5     00 40 40 00 
208d9     00 60 60 00 
208dd     00 80 80 00 
208e1     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
208e5     00 BF BF 00 
208e9     00 DF DF 00 
208ed     00 FF FF 00 
208f1     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
208f5     39 FF FF 00 
208f9     55 FF FF 00 
208fd     71 FF FF 00 
20901     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
20905     AA FF FF 00 
20909     C6 FF FF 00 
2090d     E3 FF FF 00 
20911     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
20915     00 28 40 00 
20919     00 3C 60 00 
2091d     00 50 80 00 
20921     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
20925     00 78 BF 00 
20929     00 8C DF 00 
2092d     00 A0 FF 00 
20931     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
20935     39 B5 FF 00 
20939     55 C0 FF 00 
2093d     71 CA FF 00 
20941     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
20945     AA DF FF 00 
20949     C6 EA FF 00 
2094d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
20950                 | '**********************************************************************************
20950                 | '
20950                 | '        Timings and colors definitions
20950                 | '
20950                 | '**********************************************************************************
20950                 | 
20950                 |    'streamer sets for text mode, to add to timings[0..5]
20950                 | ' todo for the retromachine: 768x576
20950                 | 
20950                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
20950     10 00 00 00 
20954     50 00 00 00 
20958     14 00 00 00 
2095c     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
20960     70 00 00 00 
20964     08 00 00 00 
20968     30 00 00 00 
2096c     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
20970     10 00 00 00 
20974     10 00 00 00 
20978     00 00 00 00 
2097c     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
20980     E0 01 00 00 
20984     F6 32 24 15 
20988     FB 6C C3 01 
2098c     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
20990                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544'
20990                 | 'timings064      long   8,   50,    8 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   540
20990     30 00 00 00 
20994     50 00 00 00 
20998     34 00 00 00 
2099c     C0 03 00 00 | timings064      long   48,   80,    52 ,    960,     32,     8,      22,       24,      36,    24,     64,  112,   496,     354693878,   %1_110000__11_0110_1100__1111_1011,   540
209a0     20 00 00 00 
209a4     08 00 00 00 
209a8     16 00 00 00 
209ac     18 00 00 00 | 	byte	$20, $00, $00, $00, $08, $00, $00, $00, $16, $00, $00, $00, $18, $00, $00, $00
209b0     24 00 00 00 
209b4     18 00 00 00 
209b8     40 00 00 00 
209bc     70 00 00 00 | 	byte	$24, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
209c0     F0 01 00 00 
209c4     F6 32 24 15 
209c8     FB 6C C3 01 
209cc     1C 02 00 00 | 	byte	$f0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $1c, $02, $00, $00
209d0                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
209d0     10 00 00 00 
209d4     40 00 00 00 
209d8     10 00 00 00 
209dc     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
209e0     08 00 00 00 
209e4     08 00 00 00 
209e8     08 00 00 00 
209ec     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
209f0     40 00 00 00 
209f4     20 00 00 00 
209f8     80 00 00 00 
209fc     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
20a00     E0 01 00 00 
20a04     70 AE E9 10 
20a08     FB 8B FF 01 
20a0c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
20a10     10 00 00 00 
20a14     42 00 00 00 
20a18     14 00 00 00 
20a1c     00 04 00 00 | timings192      long   16,   66,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
20a20     00 00 00 00 
20a24     08 00 00 00 
20a28     00 00 00 00 
20a2c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
20a30     10 00 00 00 
20a34     10 00 00 00 
20a38     C0 00 00 00 
20a3c     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
20a40     40 02 00 00 
20a44     F6 32 24 15 
20a48     FB 6C C3 01 
20a4c     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
20a50     50 00 00 00 
20a54     A0 00 00 00 
20a58     54 00 00 00 
20a5c     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
20a60     08 00 00 00 
20a64     08 00 00 00 
20a68     08 00 00 00 
20a6c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20a70     0C 00 00 00 
20a74     08 00 00 00 
20a78     00 01 00 00 
20a7c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
20a80     E0 01 00 00 
20a84     10 06 56 15 
20a88     FB 64 C3 01 
20a8c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
20a90     50 00 00 00 
20a94     32 00 00 00 
20a98     50 00 00 00 
20a9c     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
20aa0     08 00 00 00 
20aa4     08 00 00 00 
20aa8     08 00 00 00 
20aac     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20ab0     0C 00 00 00 
20ab4     08 00 00 00 
20ab8     40 01 00 00 
20abc     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
20ac0     E0 01 00 00 
20ac4     F2 CD 33 13 
20ac8     FB 53 92 01 
20acc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
20ad0     18 00 00 00 
20ad4     30 00 00 00 
20ad8     18 00 00 00 
20adc     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
20ae0     08 00 00 00 
20ae4     08 00 00 00 
20ae8     08 00 00 00 
20aec     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
20af0     0C 00 00 00 
20af4     08 00 00 00 
20af8     80 01 00 00 
20afc     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
20b00     E0 01 00 00 
20b04     F4 8F 11 11 
20b08     FB 3A 55 01 
20b0c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
20b10     20 00 00 00 
20b14     40 00 00 00 
20b18     22 00 00 00 
20b1c     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
20b20     00 00 00 00 
20b24     08 00 00 00 
20b28     00 00 00 00 
20b2c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
20b30     0C 00 00 00 
20b34     08 00 00 00 
20b38     C0 01 00 00 
20b3c     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
20b40     F0 01 00 00 
20b44     F2 CD 33 13 
20b48     FB 53 92 01 
20b4c     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
20b50                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
20b50     00 75 C7 97 
20b54     27 47 F6 0A 
20b58     05 79 CB 9B 
20b5c     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
20b60                 | 
20b60     28 12 64 FD | hdmi            setq    #9
20b64     00 ED 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
20b68     00 36 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
20b6c     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
20b70     C0 07 07 F6 |                 mov     ii,#448                          '7 << 6          
20b74     7F 07 03 F1 |                 add     ii,hbase
20b78     58 06 63 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
20b7c     7B 0B 80 FF 
20b80     83 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
20b84                 | 
20b84     66 66 86 FF 
20b88     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
20b8c                 | 
20b8c                 | 
20b8c                 | ''--------  frame rendering main loop  ---------------------------------------------------
20b8c                 | 
20b8c                 | p101
20b8c     28 14 64 FD |                 setq    #10
20b90     00 ED 06 FB |                 rdlong  framebuf,  ptra
20b94     28 1E 64 FD |                 setq    #15
20b98     7B A9 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
20b9c     78 A7 02 FB |                 rdlong  border,borderptr
20ba0                 | 
20ba0     01 D2 06 F1 |                 add     frames,#1
20ba4     7D 03 03 F6 |                 mov     dlptr2,dlptr
20ba8                 | 
20ba8     7A D5 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
20bac     6A D7 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
20bb0     6A D1 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
20bb4     FF D4 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
20bb8                 |  '' up porch
20bb8                 | 
20bb8     4F 0B 03 F6 |                 mov     hsync0,sync_000                  '
20bbc     50 0D 03 F6 |                 mov     hsync1,sync_001
20bc0     3E B6 46 FB |                 callpa  i_upporch ,#blank
20bc4     79 01 68 FC |                 wrlong  #0,vblankptr
20bc8                 |                 
20bc8     1F F8 16 F4 |                 testb   paletteptr,#31 wc
20bcc     29 FE 65 3D |          if_nc  setq2   #255
20bd0     7C 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
20bd4                 |  
20bd4                 | '' cursor blinking
20bd4                 | 
20bd4     04 D2 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
20bd8     81 D4 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
20bdc                 | 
20bdc                 | '' main screen
20bdc                 | 
20bdc     00 CC 06 F6 |                 mov linenum,#0
20be0     00 26 07 F6 |                 mov rcnt,#0
20be4     00 2A 07 F6 |                 mov rcnt2a,#0
20be8                 | 
20be8                 | 
20be8     00 26 0F F2 | p301            cmp rcnt,#0 wz
20bec     18 00 90 AD |         if_z    jmp #p306
20bf0     01 26 87 F1 |                 sub rcnt,#1
20bf4     97 05 03 F6 |                 mov dl,rdl
20bf8     94 2B 0B F7 |                 incmod rcnt2a,rcnt2 wz
20bfc     96 05 03 A1 |    if_z         add dl,roffset  
20c00     82 2F 03 F6 |                 mov rdl,dl
20c04     04 00 90 FD |                 jmp #p307          
20c08                 |           
20c08                 |                 
20c08     81 05 03 FB | p306            rdlong  dl,dlptr2                         'read DL enry
20c0c     82 09 1B F6 | p307            mov     framebuf2,dl wcz                  'move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
20c10     6A 08 7B FD |                 rczr    framebuf2 wcz                     'check if 2 lower bits=11. If yes, this is special command
20c14     50 00 90 7D |    if_nz_or_nc  jmp     #p303                             'if not, this is standard DL entry - start to interpret the line at p303 
20c18                 | 
20c18                 | '' Special entry:
20c18                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
20c18                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
20c18                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
20c18                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0010_0011    set border color to palette entry #p
20c18                 | '' - set font size          %0000_0000_0000_0000_0000_ssss_0011_0011    ssss - bit for font size, 3=8, 4=16
20c18                 | '' - set live change        %aaaa_aaaa_aaaa_aaaa_nnnn_cccc_cccc_1111    a: 16 bit addr. 00 added to 18 aligned, 2 upper bits=11; nnnn: new font line if charmode cccc cpl to change
20c18                 | '' - set hscroll            %0000_0000_0000_0000_0000_ssss_0100_0011
20c18                 | 
20c18                 | '' todo: set horizontal scroll (if needed)
20c18                 | 
20c18     04 02 07 F1 |                  add dlptr2,#4               ' move the pointer to the next DL entry    
20c1c     02 08 67 F0 |                  shl framebuf2,#2            ' restore the DL entry after rczr, now 2 lower bits are 00
20c20     84 31 43 F8 |                  getnib dlc,framebuf2,#0    
20c24     04 30 0F F2 |                  cmp dlc,#%0100 wz            ' %01 special command=repeat
20c28     1C 00 90 AD |                  if_z jmp #p390              ' start interpreting 'repeat' at p390
20c2c                 |                  
20c2c     00 30 0F F2 |                  cmp dlc,#0 wz                  ' 00 - set border/font
20c30     04 00 90 AD |                  if_z jmp #p391
20c34                 |                         
20c34     B0 FF 9F FD |                  jmp #p301                    ' Instruction unknown or unimplemented:ignore 
20c38                 |                              
20c38                 | 
20c38                 | 
20c38     84 31 4B F8 | p391             getnib dlc,framebuf2,#1
20c3c     03 30 0F F2 | 		 		 cmp dlc,#%0011 wz          ' 0011: set font size
20c40     84 35 53 A8 | 	    if_z     getnib fontsize,framebuf2,#2		 
20c44                 |     '    if_z     jmp #p301
20c44                 |         
20c44     A0 FF 9F FD |                   jmp #p301    ' not implemented yet
20c48                 |         
20c48                 | 
20c48                 | 
20c48     81 2F 03 FB | p390             rdlong rdl,dlptr2
20c4c     84 27 3B F9 |                  getword rcnt,framebuf2,#1   ' nnnn_nnnn_nnqq_qqmm_mmmm_mmmm_mm01_1100
20c50     04 26 47 F0 |                  shr rcnt,#4                 ' nnnn_nnnn_nnqq_qqmm ->4 =0000_nnnn_nnnn_nnnn_nnqq (!)
20c54                 |              
20c54     84 29 63 F8 |                  getnib rcnt2,framebuf2,#4
20c58     84 2D 33 F9 |                  getword roffset,framebuf2,#0
20c5c                 |                 
20c5c     04 2C 47 F0 |                  shr roffset,#4
20c60     0C 2C 67 F0 |                  shl roffset,#12
20c64                 |   
20c64     80 FF 9F FD |                  jmp #p301
20c68                 |                  
20c68                 |                  
20c68                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
20c68     0C 08 47 F0 |                 shr     framebuf2,#12
20c6c     02 08 67 F0 |                 shl     framebuf2,#2
20c70                 | 
20c70     82 11 E3 F8 |                 getbyte t1,dl,#0
20c74     00 10 0F F2 |                 cmp     t1,#0 wz
20c78     34 00 90 AD |     if_z        jmp     #borderline
20c7c                 | 
20c7c     00 04 17 F4 |                  testb   dl,#0  wc                     ' bit 0 set = text OR extended:TODO
20c80     50 00 90 CD |           if_c   jmp     #textline
20c84     50 02 90 3D |           if_nc  jmp     #graphline
20c88                 | '
20c88     01 CC 06 F1 | p302            add     linenum,#1
20c8c     04 02 07 F1 |                 add     dlptr2,#4
20c90     63 CD 0A F2 |                 cmp     linenum,i_totalvis  wz
20c94     50 FF 9F 5D |          if_nz  jmp     #p301
20c98                 | 
20c98     79 03 68 FC | p112            wrlong  #1,vblankptr
20c9c     07 BA 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
20ca0                 | 
20ca0     51 0B 03 F6 |                 mov     hsync0,sync_222                 'vsync on
20ca4     52 0D 03 F6 |                 mov     hsync1,sync_223
20ca8     04 B8 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
20cac     DC FE 9F FD |                 jmp     #p101
20cb0                 | 
20cb0                 | '' ---------------  END of frame rendering loop -------------------------------------------
20cb0                 | 
20cb0                 | 
20cb0     14 00 B0 FD | borderline      call    #hsync                      ' make a border
20cb4     53 AF C2 FC |                 xcont   m_vi,border
20cb8     CC FF 9F FD |                 jmp     #p302
20cbc                 | 
20cbc                 | 
20cbc     08 00 B0 FD | blank           call    #hsync                          'blank lines
20cc0     85 AF C2 FC |                 xcont   m_vi,hsync0
20cc4     FD ED 6F 0B |         _ret_   djnz    pa,#blank
20cc8                 | 
20cc8     85 A9 C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
20ccc     86 AB B2 FC |                 xzero   m_sn,hsync1
20cd0     85 AD C2 0C |         _ret_   xcont   m_bv,hsync0
20cd4                 | 
20cd4                 | 
20cd4                 | 
20cd4                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
20cd4                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
20cd4                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
20cd4                 | 
20cd4                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
20cd4                 | 
20cd4     6A DB 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
20cd8                 | 
20cd8     82 0F 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
20cdc     82 25 5B F8 |                 getnib  zoom, dl,#3
20ce0     03 24 07 F5 |                 and             zoom, #3
20ce4                 | 
20ce4                 | 
20ce4                 | 
20ce4     82 CB 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
20ce8     02 CA 46 F0 |                 shr     linestart,#2                    ' scanline to char line
20cec     3F CA 06 F5 |                 and     linestart,#63
20cf0     6B CB 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
20cf4     81 DA 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
20cf8                 | 
20cf8     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
20cfc                 | 
20cfc                 |                        ' if fontline =0, get a border color
20cfc                 | 
20cfc     58 11 33 F9 | p102            getword t1,m_border,#0
20d00     00 10 0F F2 |                 cmp     t1, #0 wz
20d04     53 B1 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
20d08                 | 
20d08     68 0F 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
20d0c     81 D8 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
20d10     6D D9 02 36 |          if_nc  mov     cursorpos,cursorpos2
20d14     01 D8 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
20d18     77 13 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
20d1c     87 13 03 F1 |                 add     t2,fontline                     ' add a current font line
20d20     59 C9 02 F6 |                 mov m_lut2, m_lut1
20d24     71 C9 02 F1 |                 add m_lut2, lutt1
20d28     5F 1D 03 F6 |                 mov cpl2,i_cpl
20d2c                 | 
20d2c     02 24 0F F2 |                cmp zoom,#2 wz
20d30     E4 00 90 AD |           if_z jmp #p420
20d34     01 24 0F F2 |                cmp zoom,#1 wz
20d38     64 00 90 AD |           if_z jmp #p410
20d3c     00 24 0F F2 |                 cmp zoom,#0 wz
20d40     04 00 90 AD |           if_z jmp #p400
20d44     50 01 90 FD |                jmp #p430
20d48                 | 
20d48                 |                    '
20d48                 |  ''---------------------------------------------------------------------------------------------------------
20d48     84 1F 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
20d4c     8F 21 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20d50     8F 23 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20d54     8F 1F E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20d58     04 08 07 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20d5c     9A 1F 63 F0 |                         shl     char,fontsize         ' 1 char=16 bytes in font def               '6
20d60     89 1F 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20d64     8F 11 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20d68     01 D8 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20d6c     FF 10 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20d70                 | 
20d70     88 C9 C2 FC |                         xcont m_lut2,t1
20d74                 | 
20d74     90 19 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20d78     67 19 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20d7c     01 CE 06 F1 |                         add     lutaddr,#1                                                          '15
20d80     91 19 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20d84     67 19 33 FC |                         wrlut   t5,lutaddr                                                          '17
20d88     01 CE 86 F1 |                         sub     lutaddr,#1
20d8c                 | 
20d8c     10 C8 E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20d90     10 B2 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20d94     20 CE 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20d98                 | 
20d98     EB 1D 6F FB |                         djnz   cpl2,#p400
20d9c                 |                         
20d9c                 | 
20d9c                 |                         
20d9c     28 01 90 FD |  p401                   jmp    #p103
20da0                 | 
20da0                 | ''------------------------------------------------------------------------------------------------------------
20da0                 | 
20da0     01 1C 47 F0 |  p410                   shr cpl2,#1
20da4                 | 
20da4                 | ''---------------------------------------------------------------------------------------------------------
20da4     84 1F 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
20da8     8F 21 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20dac     8F 23 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20db0     8F 1F E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20db4     04 08 07 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20db8     9A 1F 63 F0 |                         shl     char,fontsize           ' 1 char=16 bytes in font def               '6
20dbc     89 1F 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20dc0     8F 11 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20dc4     01 D8 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20dc8     FF 10 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20dcc                 | 
20dcc                 | 
20dcc     88 15 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
20dd0     88 11 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
20dd4     63 10 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
20dd8     03 10 07 FA |                         mul t1,#3
20ddc     88 C9 C2 FC |                         xcont m_lut2,t1
20de0     90 19 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20de4     67 19 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20de8     01 CE 06 F1 |                         add     lutaddr,#1                                                          '15
20dec     91 19 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20df0     67 19 33 FC |                         wrlut   t5,lutaddr                                                          '17
20df4     01 CE 86 F1 |                         sub     lutaddr,#1
20df8     63 14 63 FD |                         mergew t3
20dfc     03 14 07 FA |                         mul t3,#3
20e00     8A C9 C2 FC |                         xcont m_lut2,t3
20e04                 | 
20e04     10 C8 E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20e08     10 B2 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20e0c                 | 
20e0c     20 CE 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20e10                 | 
20e10     E4 1D 6F FB |                         djnz   cpl2,#p412
20e14     B0 00 90 FD |  p411                   jmp    #p103
20e18                 | 
20e18                 | ''------------------------------------------------------------------------------------------------------------
20e18                 | 
20e18     02 1C 47 F0 |  p420                   shr cpl2,#2
20e1c                 | 
20e1c                 | ''---------------------------------------------------------------------------------------
20e1c     84 1F 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
20e20     8F 21 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20e24     8F 23 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20e28     8F 1F E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
20e2c     04 08 07 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
20e30     9A 1F 63 F0 |                         shl     char,fontsize           ' 1 char=16 bytes in font def               '6
20e34     89 1F 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
20e38     8F 11 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
20e3c     01 D8 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
20e40     FF 10 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
20e44                 | 
20e44     61 10 63 FD |                         mergeb t1
20e48     88 15 3B F9 |                         getword t3,t1,#1
20e4c     0F 10 07 FA |                         mul t1,#15
20e50     88 C9 C2 FC |                         xcont m_lut2,t1
20e54                 | 
20e54     90 19 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20e58     67 19 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20e5c     01 CE 06 F1 |                         add     lutaddr,#1                                                          '15
20e60     91 19 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20e64     67 19 33 FC |                         wrlut   t5,lutaddr                                                          '17
20e68     01 CE 86 F1 |                         sub     lutaddr,#1
20e6c                 | 
20e6c     88 17 EB F8 |                         getbyte t4,t1,#1        '
20e70     8B C9 C2 FC |                         xcont m_lut2,t4                                                                                                           '
20e74                 | 
20e74     0F 14 07 FA |                         mul t3,#15
20e78     8A C9 C2 FC |                         xcont m_lut2,t3
20e7c                 | 
20e7c     8A 19 EB F8 |                         getbyte t5,t3,#1
20e80     8C C9 C2 FC |                         xcont m_lut2, t5
20e84     10 C8 E6 F4 |                         bitnot  m_lut2,#16                                                          '19
20e88     10 B2 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
20e8c                 | 
20e8c     20 CE 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
20e90                 | 
20e90     E2 1D 6F FB |                         djnz   cpl2,#p422
20e94     30 00 90 FD |  p421                   jmp    #p103
20e98                 | 
20e98                 | '--------------------------------------------------------------------------------------------------------------
20e98                 | 
20e98     84 1F 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
20e9c     8F 21 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
20ea0     8F 23 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
20ea4                 | 
20ea4     00 C8 C6 FC |                         xcont m_lut2,#0
20ea8                 | 
20ea8     90 19 A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
20eac     67 19 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
20eb0     01 CE 06 F1 |                         add     lutaddr,#1                                                          '15
20eb4     91 19 A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
20eb8     67 19 33 FC |                         wrlut   t5,lutaddr                                                          '17
20ebc     01 CE 86 F1 |                         sub     lutaddr,#1
20ec0                 | 
20ec0     F5 1D 6F FB |                         djnz   cpl2,#p430
20ec4     00 00 90 FD |  p431                   jmp    #p103
20ec8                 | 
20ec8                 | ''------------------------------------------------------------------------------------------------------------
20ec8                 | 
20ec8                 | 
20ec8                 | 
20ec8     58 33 33 F9 | p103            getword  mb2,m_border,#0
20ecc     00 32 0F F2 |                 cmp      mb2, #0 wz
20ed0     53 B1 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
20ed4                 | 
20ed4     B0 FD 9F FD |                 jmp #p302
20ed8                 | 
20ed8                 | '' -------------------------------------- END of text line ---------------------------------
20ed8                 | 
20ed8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
20ed8                 | 
20ed8     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
20edc                 | 
20edc                 | 
20edc     58 33 33 F9 | p202            getword mb2,m_border,#0
20ee0     00 32 0F F2 |                 cmp     mb2, #0 wz
20ee4     53 B1 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
20ee8                 | 
20ee8                 | '----------------------------------------- display pixels
20ee8                 | 
20ee8     59 C9 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
20eec     5F 1D 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
20ef0                 | 
20ef0     82 25 5B F8 |                 getnib  zoom, dl,#3
20ef4     03 24 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
20ef8                 | 
20ef8     82 CB 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
20efc     0C CA 06 F5 |                 and     colordepth,#12
20f00                 | 
20f00     00 CA 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
20f04     72 C9 02 A1 |           if_z  add     m_lut2,lutg1
20f08     64 00 90 AD |           if_z  jmp     #p240
20f0c                 | 
20f0c     04 CA 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
20f10     73 C9 02 A1 |           if_z  add     m_lut2,lutg2
20f14     98 00 90 AD |           if_z  jmp     #p250
20f18                 | 
20f18     08 CA 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
20f1c     74 C9 02 A1 |           if_z  add     m_lut2,lutg4
20f20     FC 00 90 AD |           if_z  jmp     #p260
20f24                 | 
20f24     75 C9 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
20f28                 | 
20f28                 | '' --- 8 bit color modes
20f28                 | 
20f28     00 24 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
20f2c     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
20f30                 | 
20f30     01 24 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
20f34     2A 1A 07 A6 |                 if_z mov skippattern,#%101010
20f38                 |        
20f38                 |  '  
20f38     02 24 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
20f3c     25 1A 07 A6 |                 if_z mov skippattern,#%100101
20f40                 |     
20f40                 |  
20f40     05 1A 07 56 |                 if_nz mov skippattern,#%000101
20f44     01 1C 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
20f48                 |         
20f48                 | 
20f48                 |         
20f48     84 1F 03 FB | p235               rdlong  char,framebuf2
20f4c     32 1A 63 FD |                    skipf skippattern
20f50     02 08 07 F1 |                    add     framebuf2,#2             '0 1 1
20f54     01 08 07 F1 |                    add     framebuf2,#1             '1 0 0
20f58     50 1E FF F9 |                    movbyts char,#%01010000          '0 1 1
20f5c     00 1E FF F9 |                    movbyts char,#%00000000          '1 0 0
20f60     8F C9 C2 FC |                    xcont   m_lut2,char              '0 0 0
20f64     8F C9 C2 FC |                    xcont   m_lut2,char              '1 1 0
20f68     F7 1D 6F FB |                    djnz    cpl2,#p235
20f6c                 | 
20f6c     20 01 90 FD |                jmp    #p203
20f70                 |                   
20f70                 | 
20f70                 | 
20f70                 | '' --- 1 bit color modes
20f70                 | 
20f70     00 24 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
20f74     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
20f78                 | 
20f78     01 24 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
20f7c     13 1A 07 A6 |        if_z   mov skippattern,#%10011
20f80     08 1A 07 56 |        if_nz  mov skippattern,#%01000
20f84                 | 
20f84                 | 
20f84     84 1F E3 FA | p241               rdword  char,framebuf2
20f88     44 1E FF F9 |                    movbyts char,#%01000100
20f8c     63 1E 63 FD |                    mergew  char
20f90     32 1A 63 FD |                    skipf skippattern
20f94     44 1E FF F9 |                    movbyts char,#%01000100         ' 1 0
20f98     63 1E 63 FD |                    mergew  char                    ' 1 0
20f9c     8F C9 C2 FC |                    xcont   m_lut2,char             ' 0 0
20fa0     02 08 07 F1 |                    add     framebuf2,#2                    ' 0 1
20fa4     01 08 07 F1 |                    add     framebuf2,#1                ' 1 0
20fa8     F6 1D 6F FB |                    djnz   cpl2,#p241
20fac                 | 
20fac                 | 
20fac     E0 00 90 FD |                jmp    #p203
20fb0                 | 
20fb0                 | '' --- 2 bit color modes
20fb0                 | 
20fb0     00 24 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
20fb4     C8 00 90 AD |        if_z   jmp #p251
20fb8                 | 
20fb8     01 24 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
20fbc     30 00 90 AD |        if_z   jmp #p252
20fc0                 | 
20fc0                 | 
20fc0     84 1F C3 FA | p254               rdbyte char,framebuf2
20fc4     04 18 07 F6 |                    mov  t5,#4
20fc8     02 1E 67 F0 | p255               shl  char,#2
20fcc     8F 11 53 F8 |                    getnib  t1,char,#2
20fd0     03 10 07 F5 |                    and     t1,#3
20fd4     55 10 07 FA |                    mul     t1,#$55
20fd8     88 13 03 F9 |                    rolbyte  t2,t1,#0
20fdc     FA 19 6F FB |                    djnz    t5,#p255
20fe0     89 C9 C2 FC |                    xcont   m_lut2,t2
20fe4     01 08 07 F1 |                    add     framebuf2,#1
20fe8     F5 1D 6F FB |                    djnz    cpl2,#p254
20fec     A0 00 90 FD |                    jmp     #p203
20ff0                 | 
20ff0     84 1F E3 FA | p252               rdword char,framebuf2
20ff4     08 18 07 F6 |                    mov  t5,#8
20ff8     02 1E 67 F0 | p253               shl  char,#2
20ffc     8F 11 63 F8 |                    getnib  t1,char,#4
21000     03 10 07 F5 |                    and     t1,#3
21004     05 10 07 FA |                    mul     t1,#5
21008     88 13 83 F8 |                    rolnib  t2,t1,#0
2100c     FA 19 6F FB |                    djnz    t5,#p253
21010     89 C9 C2 FC |                    xcont   m_lut2,t2
21014     02 08 07 F1 |                    add     framebuf2,#2
21018     F5 1D 6F FB |                    djnz    cpl2,#p252
2101c     70 00 90 FD |                    jmp     #p203
21020                 | 
21020                 | '' ------ 4 bit color modes
21020                 | 
21020     00 24 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
21024     58 00 90 AD |        if_z   jmp #p251
21028                 | 
21028     01 24 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
2102c     2C 00 90 AD |        if_z   jmp #p262
21030                 | 
21030                 | 
21030     84 1F C3 FA | p263               rdbyte char,framebuf2
21034     02 0A DC FC |                            rep #5,#2
21038     8F 13 8B F8 |                              rolnib t2,char,#1
2103c     8F 13 8B F8 |                                  rolnib t2,char,#1
21040     8F 13 8B F8 |                              rolnib t2,char,#1
21044     8F 13 8B F8 |                                  rolnib t2,char,#1
21048     04 1E 67 F0 |                              shl char,#4
2104c     89 C9 C2 FC |                    xcont   m_lut2,t2
21050     01 08 07 F1 |                    add     framebuf2,#1
21054     F6 1D 6F FB |                    djnz    cpl2,#p263
21058     34 00 90 FD |                    jmp     #p203
2105c                 | 
2105c     84 1F E3 FA | p262               rdword  char,framebuf2
21060     04 06 DC FC |                            rep #3,#4
21064     8F 13 9B F8 |                              rolnib t2,char,#3
21068     8F 13 9B F8 |                                  rolnib t2,char,#3
2106c     04 1E 67 F0 |                              shl char,#4
21070     89 C9 C2 FC |                    xcont   m_lut2,t2
21074     02 08 07 F1 |                    add     framebuf2,#2
21078     F8 1D 6F FB |                    djnz    cpl2,#p262
2107c     10 00 90 FD |                    jmp     #p203
21080                 | 
21080                 | ''---------- all color modes without zoom
21080                 | 
21080     8E 07 D8 FC | p251               rep  #3,cpl2
21084     84 1F 03 FB |                    rdlong  char,framebuf2
21088     04 08 07 F1 |                    add     framebuf2,#4
2108c     8F C9 C2 FC |                    xcont   m_lut2,char
21090                 |           
21090                 |  ''-----------------------------------------------------------------------------------------
21090                 | p203           ' getword  mb2,m_border,#0
21090     00 32 0F F2 |                 cmp      mb2, #0 wz
21094     53 B1 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
21098                 | 
21098     EC FB 9F FD |                 jmp #p302
2109c                 | 
2109c                 | '' -------------------------------------- END of graph  line ---------------------------------
2109c                 | 
2109c                 | '' consts and vars
2109c                 | 
2109c     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
210a0     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
210a4     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
210a8     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
210ac                 | 
210ac     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
210b0                 | 
210b0                 | '------ these longs will be set by setmode function
210b0                 | 
210b0     00 00 00 00 | m_bs            long    0        'blanks before sync
210b4     00 00 00 00 | m_sn            long    0        'sync
210b8     00 00 00 00 | m_bv            long    0        'blanks before visible
210bc     00 00 00 00 | m_vi            long    0        'visible pixels #
210c0     00 00 00 00 | m_border        long    0        'left/right borders
210c4     00 00 00 00 | m_lut1          long    0        'characters
210c8     00 00 00 00 | i_vborder       long    0        'up/down borders
210cc     00 00 00 00 | i_upporch       long    0        'up porch lines
210d0     00 00 00 00 | i_vsync         long    0        'vsync lines
210d4     00 00 00 00 | i_downporch     long    0        'down porch lines
210d8     00 00 00 00 | i_modenum       long    0        'mode #
210dc     00 00 00 00 | i_cpl           long    0        'chars/longs per line
210e0     00 00 00 00 | i_lines         long    0        'scanlines #
210e4     00 00 00 00 | i_clock         long    0
210e8     00 00 00 00 | i_hubset        long    0
210ec     00 00 00 00 | i_totalvis      long    0
210f0                 | 
210f0                 | '-------------------------------------
210f0                 | 
210f0     00 00 00 00 | m_lut2          long    0
210f4                 | 
210f4                 | colordepth
210f4     00 00 00 00 | linestart       long    0
210f8     00 00 00 00 | linenum         long    0
210fc     00 01 00 00 | lutaddr         long    256
21100                 | 
21100     0E 00 00 00 | cursorsh        long    14
21104     00 00 00 00 | frames          long    0
21108     00 00 00 00 | cursorx         long    0
2110c     00 00 00 00 | cursory         long    0
21110     00 00 00 00 | cursorpos       long    0
21114     00 00 00 00 | cursorpos2      long    0
21118     00 00 00 00 | fontstart       long    0
2111c     00 00 00 00 | border2         long 0
21120     00 00 81 70 | lutiv           long $70810000
21124     00 00 88 00 | lutt1           long $00880000
21128     00 00 80 00 | lutg1           long $00800000
2112c     00 00 80 10 | lutg2           long $10800000
21130     00 00 80 20 | lutg4           long $20800000
21134     00 00 80 30 | lutg8           long $30800000
21138     00 00 00 00 | framebuf        long 0
2113c     00 00 00 00 | fontbuf         long 0
21140     00 00 00 00 | borderptr       long 0
21144     00 00 00 00 | vblankptr       long 0
21148     00 00 00 00 | cursorptr       long 0
2114c     00 00 00 00 | modeptr         long 0
21150     00 00 00 00 | paletteptr      long 0
21154     00 00 00 00 | dlptr           long 0
21158                 | 
21158     01 00 00 00 | fontnumptr      long     1
2115c     01 00 00 00 | hbase           long     1
21160     01 00 00 00 | borderptr2      long     1
21164     01 00 00 00 | dlptr2 long 1
21168     01 00 00 00 | dl              long 1
2116c     01 00 00 00 | ii              long     1
21170     01 00 00 00 | framebuf2       long     1
21174     01 00 00 00 | hsync0          long     1
21178     01 00 00 00 | hsync1          long     1
2117c     01 00 00 00 | fontline        long     1
21180     01 00 00 00 | t1              long     1
21184     01 00 00 00 | t2              long     1
21188     01 00 00 00 | t3 long 1
2118c     01 00 00 00 | t4 long 1
21190     01 00 00 00 | t5 long 1
21194     01 00 00 00 | skippattern long 1
21198     01 00 00 00 | cpl2 long 1
2119c     01 00 00 00 | char            long     1
211a0     01 00 00 00 | backcolor       long     1
211a4     01 00 00 00 | charcolor       long     1
211a8     01 00 00 00 | zoom long 1
211ac     00 00 00 00 | rcnt long 0 'dl repeat count
211b0     00 00 00 00 | rcnt2 long 0
211b4     00 00 00 00 | rcnt2a long 0
211b8     00 00 00 00 | roffset long 0
211bc     00 00 00 00 | rdl long 0  'dl repeat line
211c0     00 00 00 00 | dlc long 0 'dl command
211c4     00 00 00 00 | mb2 long 0
211c8     03 00 00 00 | fontsize        long 3
211cc     00 00 00 00 | aend             long 0
211d0                 |                 fit     496                     '
211d0                 | _trackerplayer_spin2_dat_
211d0                 | 
211d0     00 00 00 00 | null             long  0
211d4     46 52 45 51 
211d8     46 52 45 51 
211dc     46 52 45 51 
211e0     46 52 45 51 | frequencyLut     long  $51_45_52_46[VALUES_IN_PERIOD_TABLE] ' This table is runtime calculated to match any possible sys clock and mixing frequency combination [1024]
211e4     46 52 45 51 
211e8     46 52 45 51 
211ec     46 52 45 51 
211f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
211f4     46 52 45 51 
211f8     46 52 45 51 
211fc     46 52 45 51 
21200     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21204     46 52 45 51 
21208     46 52 45 51 
2120c     46 52 45 51 
21210     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21214     46 52 45 51 
21218     46 52 45 51 
2121c     46 52 45 51 
21220     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21224     46 52 45 51 
21228     46 52 45 51 
2122c     46 52 45 51 
21230     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21234     46 52 45 51 
21238     46 52 45 51 
2123c     46 52 45 51 
21240     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21244     46 52 45 51 
21248     46 52 45 51 
2124c     46 52 45 51 
21250     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21254     46 52 45 51 
21258     46 52 45 51 
2125c     46 52 45 51 
21260     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21264     46 52 45 51 
21268     46 52 45 51 
2126c     46 52 45 51 
21270     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21274     46 52 45 51 
21278     46 52 45 51 
2127c     46 52 45 51 
21280     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21284     46 52 45 51 
21288     46 52 45 51 
2128c     46 52 45 51 
21290     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21294     46 52 45 51 
21298     46 52 45 51 
2129c     46 52 45 51 
212a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212a4     46 52 45 51 
212a8     46 52 45 51 
212ac     46 52 45 51 
212b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212b4     46 52 45 51 
212b8     46 52 45 51 
212bc     46 52 45 51 
212c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212c4     46 52 45 51 
212c8     46 52 45 51 
212cc     46 52 45 51 
212d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212d4     46 52 45 51 
212d8     46 52 45 51 
212dc     46 52 45 51 
212e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212e4     46 52 45 51 
212e8     46 52 45 51 
212ec     46 52 45 51 
212f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
212f4     46 52 45 51 
212f8     46 52 45 51 
212fc     46 52 45 51 
21300     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21304     46 52 45 51 
21308     46 52 45 51 
2130c     46 52 45 51 
21310     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21314     46 52 45 51 
21318     46 52 45 51 
2131c     46 52 45 51 
21320     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21324     46 52 45 51 
21328     46 52 45 51 
2132c     46 52 45 51 
21330     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21334     46 52 45 51 
21338     46 52 45 51 
2133c     46 52 45 51 
21340     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21344     46 52 45 51 
21348     46 52 45 51 
2134c     46 52 45 51 
21350     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21354     46 52 45 51 
21358     46 52 45 51 
2135c     46 52 45 51 
21360     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21364     46 52 45 51 
21368     46 52 45 51 
2136c     46 52 45 51 
21370     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21374     46 52 45 51 
21378     46 52 45 51 
2137c     46 52 45 51 
21380     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21384     46 52 45 51 
21388     46 52 45 51 
2138c     46 52 45 51 
21390     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21394     46 52 45 51 
21398     46 52 45 51 
2139c     46 52 45 51 
213a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213a4     46 52 45 51 
213a8     46 52 45 51 
213ac     46 52 45 51 
213b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213b4     46 52 45 51 
213b8     46 52 45 51 
213bc     46 52 45 51 
213c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213c4     46 52 45 51 
213c8     46 52 45 51 
213cc     46 52 45 51 
213d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213d4     46 52 45 51 
213d8     46 52 45 51 
213dc     46 52 45 51 
213e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213e4     46 52 45 51 
213e8     46 52 45 51 
213ec     46 52 45 51 
213f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
213f4     46 52 45 51 
213f8     46 52 45 51 
213fc     46 52 45 51 
21400     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21404     46 52 45 51 
21408     46 52 45 51 
2140c     46 52 45 51 
21410     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21414     46 52 45 51 
21418     46 52 45 51 
2141c     46 52 45 51 
21420     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21424     46 52 45 51 
21428     46 52 45 51 
2142c     46 52 45 51 
21430     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21434     46 52 45 51 
21438     46 52 45 51 
2143c     46 52 45 51 
21440     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21444     46 52 45 51 
21448     46 52 45 51 
2144c     46 52 45 51 
21450     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21454     46 52 45 51 
21458     46 52 45 51 
2145c     46 52 45 51 
21460     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21464     46 52 45 51 
21468     46 52 45 51 
2146c     46 52 45 51 
21470     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21474     46 52 45 51 
21478     46 52 45 51 
2147c     46 52 45 51 
21480     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21484     46 52 45 51 
21488     46 52 45 51 
2148c     46 52 45 51 
21490     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21494     46 52 45 51 
21498     46 52 45 51 
2149c     46 52 45 51 
214a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214a4     46 52 45 51 
214a8     46 52 45 51 
214ac     46 52 45 51 
214b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214b4     46 52 45 51 
214b8     46 52 45 51 
214bc     46 52 45 51 
214c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214c4     46 52 45 51 
214c8     46 52 45 51 
214cc     46 52 45 51 
214d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214d4     46 52 45 51 
214d8     46 52 45 51 
214dc     46 52 45 51 
214e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214e4     46 52 45 51 
214e8     46 52 45 51 
214ec     46 52 45 51 
214f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
214f4     46 52 45 51 
214f8     46 52 45 51 
214fc     46 52 45 51 
21500     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21504     46 52 45 51 
21508     46 52 45 51 
2150c     46 52 45 51 
21510     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21514     46 52 45 51 
21518     46 52 45 51 
2151c     46 52 45 51 
21520     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21524     46 52 45 51 
21528     46 52 45 51 
2152c     46 52 45 51 
21530     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21534     46 52 45 51 
21538     46 52 45 51 
2153c     46 52 45 51 
21540     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21544     46 52 45 51 
21548     46 52 45 51 
2154c     46 52 45 51 
21550     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21554     46 52 45 51 
21558     46 52 45 51 
2155c     46 52 45 51 
21560     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21564     46 52 45 51 
21568     46 52 45 51 
2156c     46 52 45 51 
21570     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21574     46 52 45 51 
21578     46 52 45 51 
2157c     46 52 45 51 
21580     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21584     46 52 45 51 
21588     46 52 45 51 
2158c     46 52 45 51 
21590     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21594     46 52 45 51 
21598     46 52 45 51 
2159c     46 52 45 51 
215a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215a4     46 52 45 51 
215a8     46 52 45 51 
215ac     46 52 45 51 
215b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215b4     46 52 45 51 
215b8     46 52 45 51 
215bc     46 52 45 51 
215c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215c4     46 52 45 51 
215c8     46 52 45 51 
215cc     46 52 45 51 
215d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215d4     46 52 45 51 
215d8     46 52 45 51 
215dc     46 52 45 51 
215e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215e4     46 52 45 51 
215e8     46 52 45 51 
215ec     46 52 45 51 
215f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
215f4     46 52 45 51 
215f8     46 52 45 51 
215fc     46 52 45 51 
21600     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21604     46 52 45 51 
21608     46 52 45 51 
2160c     46 52 45 51 
21610     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21614     46 52 45 51 
21618     46 52 45 51 
2161c     46 52 45 51 
21620     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21624     46 52 45 51 
21628     46 52 45 51 
2162c     46 52 45 51 
21630     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21634     46 52 45 51 
21638     46 52 45 51 
2163c     46 52 45 51 
21640     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21644     46 52 45 51 
21648     46 52 45 51 
2164c     46 52 45 51 
21650     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21654     46 52 45 51 
21658     46 52 45 51 
2165c     46 52 45 51 
21660     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21664     46 52 45 51 
21668     46 52 45 51 
2166c     46 52 45 51 
21670     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21674     46 52 45 51 
21678     46 52 45 51 
2167c     46 52 45 51 
21680     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21684     46 52 45 51 
21688     46 52 45 51 
2168c     46 52 45 51 
21690     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21694     46 52 45 51 
21698     46 52 45 51 
2169c     46 52 45 51 
216a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216a4     46 52 45 51 
216a8     46 52 45 51 
216ac     46 52 45 51 
216b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216b4     46 52 45 51 
216b8     46 52 45 51 
216bc     46 52 45 51 
216c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216c4     46 52 45 51 
216c8     46 52 45 51 
216cc     46 52 45 51 
216d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216d4     46 52 45 51 
216d8     46 52 45 51 
216dc     46 52 45 51 
216e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216e4     46 52 45 51 
216e8     46 52 45 51 
216ec     46 52 45 51 
216f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
216f4     46 52 45 51 
216f8     46 52 45 51 
216fc     46 52 45 51 
21700     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21704     46 52 45 51 
21708     46 52 45 51 
2170c     46 52 45 51 
21710     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21714     46 52 45 51 
21718     46 52 45 51 
2171c     46 52 45 51 
21720     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21724     46 52 45 51 
21728     46 52 45 51 
2172c     46 52 45 51 
21730     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21734     46 52 45 51 
21738     46 52 45 51 
2173c     46 52 45 51 
21740     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21744     46 52 45 51 
21748     46 52 45 51 
2174c     46 52 45 51 
21750     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21754     46 52 45 51 
21758     46 52 45 51 
2175c     46 52 45 51 
21760     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21764     46 52 45 51 
21768     46 52 45 51 
2176c     46 52 45 51 
21770     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21774     46 52 45 51 
21778     46 52 45 51 
2177c     46 52 45 51 
21780     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21784     46 52 45 51 
21788     46 52 45 51 
2178c     46 52 45 51 
21790     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21794     46 52 45 51 
21798     46 52 45 51 
2179c     46 52 45 51 
217a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217a4     46 52 45 51 
217a8     46 52 45 51 
217ac     46 52 45 51 
217b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217b4     46 52 45 51 
217b8     46 52 45 51 
217bc     46 52 45 51 
217c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217c4     46 52 45 51 
217c8     46 52 45 51 
217cc     46 52 45 51 
217d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217d4     46 52 45 51 
217d8     46 52 45 51 
217dc     46 52 45 51 
217e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217e4     46 52 45 51 
217e8     46 52 45 51 
217ec     46 52 45 51 
217f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
217f4     46 52 45 51 
217f8     46 52 45 51 
217fc     46 52 45 51 
21800     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21804     46 52 45 51 
21808     46 52 45 51 
2180c     46 52 45 51 
21810     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21814     46 52 45 51 
21818     46 52 45 51 
2181c     46 52 45 51 
21820     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21824     46 52 45 51 
21828     46 52 45 51 
2182c     46 52 45 51 
21830     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21834     46 52 45 51 
21838     46 52 45 51 
2183c     46 52 45 51 
21840     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21844     46 52 45 51 
21848     46 52 45 51 
2184c     46 52 45 51 
21850     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21854     46 52 45 51 
21858     46 52 45 51 
2185c     46 52 45 51 
21860     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21864     46 52 45 51 
21868     46 52 45 51 
2186c     46 52 45 51 
21870     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21874     46 52 45 51 
21878     46 52 45 51 
2187c     46 52 45 51 
21880     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21884     46 52 45 51 
21888     46 52 45 51 
2188c     46 52 45 51 
21890     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21894     46 52 45 51 
21898     46 52 45 51 
2189c     46 52 45 51 
218a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218a4     46 52 45 51 
218a8     46 52 45 51 
218ac     46 52 45 51 
218b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218b4     46 52 45 51 
218b8     46 52 45 51 
218bc     46 52 45 51 
218c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218c4     46 52 45 51 
218c8     46 52 45 51 
218cc     46 52 45 51 
218d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218d4     46 52 45 51 
218d8     46 52 45 51 
218dc     46 52 45 51 
218e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218e4     46 52 45 51 
218e8     46 52 45 51 
218ec     46 52 45 51 
218f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
218f4     46 52 45 51 
218f8     46 52 45 51 
218fc     46 52 45 51 
21900     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21904     46 52 45 51 
21908     46 52 45 51 
2190c     46 52 45 51 
21910     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21914     46 52 45 51 
21918     46 52 45 51 
2191c     46 52 45 51 
21920     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21924     46 52 45 51 
21928     46 52 45 51 
2192c     46 52 45 51 
21930     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21934     46 52 45 51 
21938     46 52 45 51 
2193c     46 52 45 51 
21940     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21944     46 52 45 51 
21948     46 52 45 51 
2194c     46 52 45 51 
21950     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21954     46 52 45 51 
21958     46 52 45 51 
2195c     46 52 45 51 
21960     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21964     46 52 45 51 
21968     46 52 45 51 
2196c     46 52 45 51 
21970     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21974     46 52 45 51 
21978     46 52 45 51 
2197c     46 52 45 51 
21980     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21984     46 52 45 51 
21988     46 52 45 51 
2198c     46 52 45 51 
21990     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21994     46 52 45 51 
21998     46 52 45 51 
2199c     46 52 45 51 
219a0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219a4     46 52 45 51 
219a8     46 52 45 51 
219ac     46 52 45 51 
219b0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219b4     46 52 45 51 
219b8     46 52 45 51 
219bc     46 52 45 51 
219c0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219c4     46 52 45 51 
219c8     46 52 45 51 
219cc     46 52 45 51 
219d0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219d4     46 52 45 51 
219d8     46 52 45 51 
219dc     46 52 45 51 
219e0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219e4     46 52 45 51 
219e8     46 52 45 51 
219ec     46 52 45 51 
219f0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
219f4     46 52 45 51 
219f8     46 52 45 51 
219fc     46 52 45 51 
21a00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a04     46 52 45 51 
21a08     46 52 45 51 
21a0c     46 52 45 51 
21a10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a14     46 52 45 51 
21a18     46 52 45 51 
21a1c     46 52 45 51 
21a20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a24     46 52 45 51 
21a28     46 52 45 51 
21a2c     46 52 45 51 
21a30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a34     46 52 45 51 
21a38     46 52 45 51 
21a3c     46 52 45 51 
21a40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a44     46 52 45 51 
21a48     46 52 45 51 
21a4c     46 52 45 51 
21a50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a54     46 52 45 51 
21a58     46 52 45 51 
21a5c     46 52 45 51 
21a60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a64     46 52 45 51 
21a68     46 52 45 51 
21a6c     46 52 45 51 
21a70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a74     46 52 45 51 
21a78     46 52 45 51 
21a7c     46 52 45 51 
21a80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a84     46 52 45 51 
21a88     46 52 45 51 
21a8c     46 52 45 51 
21a90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21a94     46 52 45 51 
21a98     46 52 45 51 
21a9c     46 52 45 51 
21aa0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21aa4     46 52 45 51 
21aa8     46 52 45 51 
21aac     46 52 45 51 
21ab0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ab4     46 52 45 51 
21ab8     46 52 45 51 
21abc     46 52 45 51 
21ac0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ac4     46 52 45 51 
21ac8     46 52 45 51 
21acc     46 52 45 51 
21ad0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ad4     46 52 45 51 
21ad8     46 52 45 51 
21adc     46 52 45 51 
21ae0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ae4     46 52 45 51 
21ae8     46 52 45 51 
21aec     46 52 45 51 
21af0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21af4     46 52 45 51 
21af8     46 52 45 51 
21afc     46 52 45 51 
21b00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b04     46 52 45 51 
21b08     46 52 45 51 
21b0c     46 52 45 51 
21b10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b14     46 52 45 51 
21b18     46 52 45 51 
21b1c     46 52 45 51 
21b20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b24     46 52 45 51 
21b28     46 52 45 51 
21b2c     46 52 45 51 
21b30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b34     46 52 45 51 
21b38     46 52 45 51 
21b3c     46 52 45 51 
21b40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b44     46 52 45 51 
21b48     46 52 45 51 
21b4c     46 52 45 51 
21b50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b54     46 52 45 51 
21b58     46 52 45 51 
21b5c     46 52 45 51 
21b60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b64     46 52 45 51 
21b68     46 52 45 51 
21b6c     46 52 45 51 
21b70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b74     46 52 45 51 
21b78     46 52 45 51 
21b7c     46 52 45 51 
21b80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b84     46 52 45 51 
21b88     46 52 45 51 
21b8c     46 52 45 51 
21b90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21b94     46 52 45 51 
21b98     46 52 45 51 
21b9c     46 52 45 51 
21ba0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ba4     46 52 45 51 
21ba8     46 52 45 51 
21bac     46 52 45 51 
21bb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bb4     46 52 45 51 
21bb8     46 52 45 51 
21bbc     46 52 45 51 
21bc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bc4     46 52 45 51 
21bc8     46 52 45 51 
21bcc     46 52 45 51 
21bd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bd4     46 52 45 51 
21bd8     46 52 45 51 
21bdc     46 52 45 51 
21be0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21be4     46 52 45 51 
21be8     46 52 45 51 
21bec     46 52 45 51 
21bf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21bf4     46 52 45 51 
21bf8     46 52 45 51 
21bfc     46 52 45 51 
21c00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c04     46 52 45 51 
21c08     46 52 45 51 
21c0c     46 52 45 51 
21c10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c14     46 52 45 51 
21c18     46 52 45 51 
21c1c     46 52 45 51 
21c20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c24     46 52 45 51 
21c28     46 52 45 51 
21c2c     46 52 45 51 
21c30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c34     46 52 45 51 
21c38     46 52 45 51 
21c3c     46 52 45 51 
21c40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c44     46 52 45 51 
21c48     46 52 45 51 
21c4c     46 52 45 51 
21c50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c54     46 52 45 51 
21c58     46 52 45 51 
21c5c     46 52 45 51 
21c60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c64     46 52 45 51 
21c68     46 52 45 51 
21c6c     46 52 45 51 
21c70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c74     46 52 45 51 
21c78     46 52 45 51 
21c7c     46 52 45 51 
21c80     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c84     46 52 45 51 
21c88     46 52 45 51 
21c8c     46 52 45 51 
21c90     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21c94     46 52 45 51 
21c98     46 52 45 51 
21c9c     46 52 45 51 
21ca0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ca4     46 52 45 51 
21ca8     46 52 45 51 
21cac     46 52 45 51 
21cb0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cb4     46 52 45 51 
21cb8     46 52 45 51 
21cbc     46 52 45 51 
21cc0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cc4     46 52 45 51 
21cc8     46 52 45 51 
21ccc     46 52 45 51 
21cd0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cd4     46 52 45 51 
21cd8     46 52 45 51 
21cdc     46 52 45 51 
21ce0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21ce4     46 52 45 51 
21ce8     46 52 45 51 
21cec     46 52 45 51 
21cf0     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21cf4     46 52 45 51 
21cf8     46 52 45 51 
21cfc     46 52 45 51 
21d00     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d04     46 52 45 51 
21d08     46 52 45 51 
21d0c     46 52 45 51 
21d10     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d14     46 52 45 51 
21d18     46 52 45 51 
21d1c     46 52 45 51 
21d20     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d24     46 52 45 51 
21d28     46 52 45 51 
21d2c     46 52 45 51 
21d30     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d34     46 52 45 51 
21d38     46 52 45 51 
21d3c     46 52 45 51 
21d40     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d44     46 52 45 51 
21d48     46 52 45 51 
21d4c     46 52 45 51 
21d50     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d54     46 52 45 51 
21d58     46 52 45 51 
21d5c     46 52 45 51 
21d60     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d64     46 52 45 51 
21d68     46 52 45 51 
21d6c     46 52 45 51 
21d70     46 52 45 51 | 	byte	$46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51, $46, $52, $45, $51
21d74                 | 
21d74     00 00 00 00 
21d78     18 00 00 00 
21d7c     31 00 00 00 
21d80     4A 00 00 00 | vibratoWaveform  long  0,    24,   49,   74,   97,   120,  141,  161
21d84     61 00 00 00 
21d88     78 00 00 00 
21d8c     8D 00 00 00 
21d90     A1 00 00 00 | 	byte	$61, $00, $00, $00, $78, $00, $00, $00, $8d, $00, $00, $00, $a1, $00, $00, $00
21d94     B4 00 00 00 
21d98     C5 00 00 00 
21d9c     D4 00 00 00 
21da0     E0 00 00 00 |                  long  180,  197,  212,  224,  235,  244,  250,  253
21da4     EB 00 00 00 
21da8     F4 00 00 00 
21dac     FA 00 00 00 
21db0     FD 00 00 00 | 	byte	$eb, $00, $00, $00, $f4, $00, $00, $00, $fa, $00, $00, $00, $fd, $00, $00, $00
21db4     FF 00 00 00 
21db8     FD 00 00 00 
21dbc     FA 00 00 00 
21dc0     F4 00 00 00 |                  long  255,  253,  250,  244,  235,  224,  212,  197
21dc4     EB 00 00 00 
21dc8     E0 00 00 00 
21dcc     D4 00 00 00 
21dd0     C5 00 00 00 | 	byte	$eb, $00, $00, $00, $e0, $00, $00, $00, $d4, $00, $00, $00, $c5, $00, $00, $00
21dd4     B4 00 00 00 
21dd8     A1 00 00 00 
21ddc     8D 00 00 00 
21de0     78 00 00 00 |                  long  180,  161,  141,  120,  97,   74,   49,   24
21de4     61 00 00 00 
21de8     4A 00 00 00 
21dec     31 00 00 00 
21df0     18 00 00 00 | 	byte	$61, $00, $00, $00, $4a, $00, $00, $00, $31, $00, $00, $00, $18, $00, $00, $00
21df4     00 00 00 00 
21df8     E8 FF FF FF 
21dfc     CF FF FF FF 
21e00     B6 FF FF FF |                  long  0,   -24,  -49,  -74,  -97,  -120, -141, -161
21e04     9F FF FF FF 
21e08     88 FF FF FF 
21e0c     73 FF FF FF 
21e10     5F FF FF FF | 	byte	$9f, $ff, $ff, $ff, $88, $ff, $ff, $ff, $73, $ff, $ff, $ff, $5f, $ff, $ff, $ff
21e14     4C FF FF FF 
21e18     3B FF FF FF 
21e1c     2C FF FF FF 
21e20     20 FF FF FF |                  long -180, -197, -212, -224, -235, -244, -250, -253
21e24     15 FF FF FF 
21e28     0C FF FF FF 
21e2c     06 FF FF FF 
21e30     03 FF FF FF | 	byte	$15, $ff, $ff, $ff, $0c, $ff, $ff, $ff, $06, $ff, $ff, $ff, $03, $ff, $ff, $ff
21e34     01 FF FF FF 
21e38     03 FF FF FF 
21e3c     06 FF FF FF 
21e40     0C FF FF FF |                  long -255, -253, -250, -244, -235, -224, -212, -197
21e44     15 FF FF FF 
21e48     20 FF FF FF 
21e4c     2C FF FF FF 
21e50     3B FF FF FF | 	byte	$15, $ff, $ff, $ff, $20, $ff, $ff, $ff, $2c, $ff, $ff, $ff, $3b, $ff, $ff, $ff
21e54     4C FF FF FF 
21e58     5F FF FF FF 
21e5c     73 FF FF FF 
21e60     88 FF FF FF |                  long -180, -161, -141, -120, -97,  -74,  -49,  -24
21e64     9F FF FF FF 
21e68     B6 FF FF FF 
21e6c     CF FF FF FF 
21e70     E8 FF FF FF | 	byte	$9f, $ff, $ff, $ff, $b6, $ff, $ff, $ff, $cf, $ff, $ff, $ff, $e8, $ff, $ff, $ff
21e74                 | 
21e74     58 03 28 03 
21e78     FA 02 D0 02 
21e7c     A6 02 80 02 
21e80     5C 02 3A 02 | periodTable      word  856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480 , 453 ' C1
21e84     1A 02 FC 01 
21e88     E0 01 C5 01 | 	byte	$1a, $02, $fc, $01, $e0, $01, $c5, $01
21e8c     AC 01 94 01 
21e90     7D 01 68 01 
21e94     53 01 40 01 
21e98     2E 01 1D 01 |                  word  428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240 , 226 ' C2
21e9c     0D 01 FE 00 
21ea0     F0 00 E2 00 | 	byte	$0d, $01, $fe, $00, $f0, $00, $e2, $00
21ea4     D6 00 CA 00 
21ea8     BE 00 B4 00 
21eac     AA 00 A0 00 
21eb0     97 00 8F 00 |                  word  214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120 , 113 ' C3
21eb4     87 00 7F 00 
21eb8     78 00 71 00 | 	byte	$87, $00, $7f, $00, $78, $00, $71, $00
21ebc     6B 00 22 03 
21ec0     F5 02 CB 02 
21ec4     A2 02 7D 02 
21ec8     59 02 37 02 |                  word  107 , 802 , 757 , 715 , 674 , 637 , 601 , 567 , 535 , 505 , 477 , 450
21ecc     17 02 F9 01 
21ed0     DD 01 C2 01 | 	byte	$17, $02, $f9, $01, $dd, $01, $c2, $01
21ed4     A9 01 91 01 
21ed8     7B 01 65 01 
21edc     51 01 3E 01 
21ee0     2C 01 1C 01 |                  word  425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 239 , 225
21ee4     0C 01 FD 00 
21ee8     EF 00 E1 00 | 	byte	$0c, $01, $fd, $00, $ef, $00, $e1, $00
21eec     D5 00 C9 00 
21ef0     BD 00 B3 00 
21ef4     A9 00 9F 00 
21ef8     96 00 8E 00 |                  word  213 , 201 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119 , 113
21efc     86 00 7E 00 
21f00     77 00 71 00 | 	byte	$86, $00, $7e, $00, $77, $00, $71, $00
21f04     4C 03 1C 03 
21f08     F0 02 C5 02 
21f0c     9E 02 78 02 
21f10     55 02 33 02 |                  word  844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474 , 447
21f14     14 02 F6 01 
21f18     DA 01 BF 01 | 	byte	$14, $02, $f6, $01, $da, $01, $bf, $01
21f1c     A6 01 8E 01 
21f20     78 01 63 01 
21f24     4F 01 3C 01 
21f28     2A 01 1A 01 |                  word  422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237 , 224
21f2c     0A 01 FB 00 
21f30     ED 00 E0 00 | 	byte	$0a, $01, $fb, $00, $ed, $00, $e0, $00
21f34     D3 00 C7 00 
21f38     BC 00 B1 00 
21f3c     A7 00 9E 00 
21f40     95 00 8D 00 |                  word  211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118 , 112
21f44     85 00 7D 00 
21f48     76 00 70 00 | 	byte	$85, $00, $7d, $00, $76, $00, $70, $00
21f4c     46 03 17 03 
21f50     EA 02 C0 02 
21f54     99 02 74 02 
21f58     50 02 2F 02 |                  word  838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470 , 444
21f5c     10 02 F2 01 
21f60     D6 01 BC 01 | 	byte	$10, $02, $f2, $01, $d6, $01, $bc, $01
21f64     A3 01 8B 01 
21f68     75 01 60 01 
21f6c     4C 01 3A 01 
21f70     28 01 18 01 |                  word  419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235 , 222
21f74     08 01 F9 00 
21f78     EB 00 DE 00 | 	byte	$08, $01, $f9, $00, $eb, $00, $de, $00
21f7c     D1 00 C6 00 
21f80     BB 00 B0 00 
21f84     A6 00 9D 00 
21f88     94 00 8C 00 |                  word  209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118 , 111
21f8c     84 00 7D 00 
21f90     76 00 6F 00 | 	byte	$84, $00, $7d, $00, $76, $00, $6f, $00
21f94     40 03 11 03 
21f98     E5 02 BB 02 
21f9c     94 02 6F 02 
21fa0     4C 02 2B 02 |                  word  832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 495 , 467 , 441
21fa4     0C 02 EF 01 
21fa8     D3 01 B9 01 | 	byte	$0c, $02, $ef, $01, $d3, $01, $b9, $01
21fac     A0 01 88 01 
21fb0     72 01 5E 01 
21fb4     4A 01 38 01 
21fb8     26 01 16 01 |                  word  416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233 , 220
21fbc     06 01 F7 00 
21fc0     E9 00 DC 00 | 	byte	$06, $01, $f7, $00, $e9, $00, $dc, $00
21fc4     D0 00 C4 00 
21fc8     B9 00 AF 00 
21fcc     A5 00 9C 00 
21fd0     93 00 8B 00 |                  word  208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 124 , 117 , 110
21fd4     83 00 7C 00 
21fd8     75 00 6E 00 | 	byte	$83, $00, $7c, $00, $75, $00, $6e, $00
21fdc     3A 03 0B 03 
21fe0     E0 02 B6 02 
21fe4     8F 02 6B 02 
21fe8     48 02 27 02 |                  word  826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463 , 437
21fec     08 02 EB 01 
21ff0     CF 01 B5 01 | 	byte	$08, $02, $eb, $01, $cf, $01, $b5, $01
21ff4     9D 01 86 01 
21ff8     70 01 5B 01 
21ffc     48 01 35 01 
22000     24 01 14 01 |                  word  413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232 , 219
22004     04 01 F5 00 
22008     E8 00 DB 00 | 	byte	$04, $01, $f5, $00, $e8, $00, $db, $00
2200c     CE 00 C3 00 
22010     B8 00 AE 00 
22014     A4 00 9B 00 
22018     92 00 8A 00 |                  word  206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116 , 109
2201c     82 00 7B 00 
22020     74 00 6D 00 | 	byte	$82, $00, $7b, $00, $74, $00, $6d, $00
22024     34 03 06 03 
22028     DA 02 B1 02 
2202c     8B 02 66 02 
22030     44 02 23 02 |                  word  820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460 , 434
22034     04 02 E7 01 
22038     CC 01 B2 01 | 	byte	$04, $02, $e7, $01, $cc, $01, $b2, $01
2203c     9A 01 83 01 
22040     6D 01 59 01 
22044     45 01 33 01 
22048     22 01 12 01 |                  word  410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230 , 217
2204c     02 01 F4 00 
22050     E6 00 D9 00 | 	byte	$02, $01, $f4, $00, $e6, $00, $d9, $00
22054     CD 00 C1 00 
22058     B7 00 AC 00 
2205c     A3 00 9A 00 
22060     91 00 89 00 |                  word  205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115 , 109
22064     81 00 7A 00 
22068     73 00 6D 00 | 	byte	$81, $00, $7a, $00, $73, $00, $6d, $00
2206c     2E 03 00 03 
22070     D5 02 AC 02 
22074     86 02 62 02 
22078     3F 02 1F 02 |                  word  814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457 , 431
2207c     01 02 E4 01 
22080     C9 01 AF 01 | 	byte	$01, $02, $e4, $01, $c9, $01, $af, $01
22084     97 01 80 01 
22088     6B 01 56 01 
2208c     43 01 31 01 
22090     20 01 10 01 |                  word  407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228 , 216
22094     00 01 F2 00 
22098     E4 00 D8 00 | 	byte	$00, $01, $f2, $00, $e4, $00, $d8, $00
2209c     CC 00 C0 00 
220a0     B5 00 AB 00 
220a4     A1 00 98 00 
220a8     90 00 88 00 |                  word  204 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114 , 108
220ac     80 00 79 00 
220b0     72 00 6C 00 | 	byte	$80, $00, $79, $00, $72, $00, $6c, $00
220b4     8B 03 58 03 
220b8     28 03 FA 02 
220bc     D0 02 A6 02 
220c0     80 02 5C 02 |                  word  907 , 856 , 808 , 762 , 720 , 678 , 640 , 604 , 570 , 538 , 508 , 480
220c4     3A 02 1A 02 
220c8     FC 01 E0 01 | 	byte	$3a, $02, $1a, $02, $fc, $01, $e0, $01
220cc     C5 01 AC 01 
220d0     94 01 7D 01 
220d4     68 01 53 01 
220d8     40 01 2E 01 |                  word  453 , 428 , 404 , 381 , 360 , 339 , 320 , 302 , 285 , 269 , 254 , 240
220dc     1D 01 0D 01 
220e0     FE 00 F0 00 | 	byte	$1d, $01, $0d, $01, $fe, $00, $f0, $00
220e4     E2 00 D6 00 
220e8     CA 00 BE 00 
220ec     B4 00 AA 00 
220f0     A0 00 97 00 |                  word  226 , 214 , 202 , 190 , 180 , 170 , 160 , 151 , 143 , 135 , 127 , 120
220f4     8F 00 87 00 
220f8     7F 00 78 00 | 	byte	$8f, $00, $87, $00, $7f, $00, $78, $00
220fc     84 03 52 03 
22100     22 03 F5 02 
22104     CB 02 A3 02 
22108     7C 02 59 02 |                  word  900 , 850 , 802 , 757 , 715 , 675 , 636 , 601 , 567 , 535 , 505 , 477
2210c     37 02 17 02 
22110     F9 01 DD 01 | 	byte	$37, $02, $17, $02, $f9, $01, $dd, $01
22114     C2 01 A9 01 
22118     91 01 7B 01 
2211c     65 01 51 01 
22120     3E 01 2C 01 |                  word  450 , 425 , 401 , 379 , 357 , 337 , 318 , 300 , 284 , 268 , 253 , 238
22124     1C 01 0C 01 
22128     FD 00 EE 00 | 	byte	$1c, $01, $0c, $01, $fd, $00, $ee, $00
2212c     E1 00 D4 00 
22130     C8 00 BD 00 
22134     B3 00 A9 00 
22138     9F 00 96 00 |                  word  225 , 212 , 200 , 189 , 179 , 169 , 159 , 150 , 142 , 134 , 126 , 119
2213c     8E 00 86 00 
22140     7E 00 77 00 | 	byte	$8e, $00, $86, $00, $7e, $00, $77, $00
22144     7E 03 4C 03 
22148     1C 03 F0 02 
2214c     C5 02 9E 02 
22150     78 02 55 02 |                  word  894 , 844 , 796 , 752 , 709 , 670 , 632 , 597 , 563 , 532 , 502 , 474
22154     33 02 14 02 
22158     F6 01 DA 01 | 	byte	$33, $02, $14, $02, $f6, $01, $da, $01
2215c     BF 01 A6 01 
22160     8E 01 78 01 
22164     63 01 4F 01 
22168     3C 01 2A 01 |                  word  447 , 422 , 398 , 376 , 355 , 335 , 316 , 298 , 282 , 266 , 251 , 237
2216c     1A 01 0A 01 
22170     FB 00 ED 00 | 	byte	$1a, $01, $0a, $01, $fb, $00, $ed, $00
22174     DF 00 D3 00 
22178     C7 00 BC 00 
2217c     B1 00 A7 00 
22180     9E 00 95 00 |                  word  223 , 211 , 199 , 188 , 177 , 167 , 158 , 149 , 141 , 133 , 125 , 118
22184     8D 00 85 00 
22188     7D 00 76 00 | 	byte	$8d, $00, $85, $00, $7d, $00, $76, $00
2218c     77 03 46 03 
22190     17 03 EA 02 
22194     C0 02 99 02 
22198     74 02 50 02 |                  word  887 , 838 , 791 , 746 , 704 , 665 , 628 , 592 , 559 , 528 , 498 , 470
2219c     2F 02 10 02 
221a0     F2 01 D6 01 | 	byte	$2f, $02, $10, $02, $f2, $01, $d6, $01
221a4     BC 01 A3 01 
221a8     8B 01 75 01 
221ac     60 01 4C 01 
221b0     3A 01 28 01 |                  word  444 , 419 , 395 , 373 , 352 , 332 , 314 , 296 , 280 , 264 , 249 , 235
221b4     18 01 08 01 
221b8     F9 00 EB 00 | 	byte	$18, $01, $08, $01, $f9, $00, $eb, $00
221bc     DE 00 D1 00 
221c0     C6 00 BB 00 
221c4     B0 00 A6 00 
221c8     9D 00 94 00 |                  word  222 , 209 , 198 , 187 , 176 , 166 , 157 , 148 , 140 , 132 , 125 , 118
221cc     8C 00 84 00 
221d0     7D 00 76 00 | 	byte	$8c, $00, $84, $00, $7d, $00, $76, $00
221d4     71 03 40 03 
221d8     11 03 E5 02 
221dc     BB 02 94 02 
221e0     6F 02 4C 02 |                  word  881 , 832 , 785 , 741 , 699 , 660 , 623 , 588 , 555 , 524 , 494 , 467
221e4     2B 02 0C 02 
221e8     EE 01 D3 01 | 	byte	$2b, $02, $0c, $02, $ee, $01, $d3, $01
221ec     B9 01 A0 01 
221f0     88 01 72 01 
221f4     5E 01 4A 01 
221f8     38 01 26 01 |                  word  441 , 416 , 392 , 370 , 350 , 330 , 312 , 294 , 278 , 262 , 247 , 233
221fc     16 01 06 01 
22200     F7 00 E9 00 | 	byte	$16, $01, $06, $01, $f7, $00, $e9, $00
22204     DC 00 D0 00 
22208     C4 00 B9 00 
2220c     AF 00 A5 00 
22210     9C 00 93 00 |                  word  220 , 208 , 196 , 185 , 175 , 165 , 156 , 147 , 139 , 131 , 123 , 117
22214     8B 00 83 00 
22218     7B 00 75 00 | 	byte	$8b, $00, $83, $00, $7b, $00, $75, $00
2221c     6B 03 3A 03 
22220     0B 03 E0 02 
22224     B6 02 8F 02 
22228     6B 02 48 02 |                  word  875 , 826 , 779 , 736 , 694 , 655 , 619 , 584 , 551 , 520 , 491 , 463
2222c     27 02 08 02 
22230     EB 01 CF 01 | 	byte	$27, $02, $08, $02, $eb, $01, $cf, $01
22234     B5 01 9D 01 
22238     86 01 70 01 
2223c     5B 01 48 01 
22240     35 01 24 01 |                  word  437 , 413 , 390 , 368 , 347 , 328 , 309 , 292 , 276 , 260 , 245 , 232
22244     14 01 04 01 
22248     F5 00 E8 00 | 	byte	$14, $01, $04, $01, $f5, $00, $e8, $00
2224c     DB 00 CE 00 
22250     C3 00 B8 00 
22254     AE 00 A4 00 
22258     9B 00 92 00 |                  word  219 , 206 , 195 , 184 , 174 , 164 , 155 , 146 , 138 , 130 , 123 , 116
2225c     8A 00 82 00 
22260     7B 00 74 00 | 	byte	$8a, $00, $82, $00, $7b, $00, $74, $00
22264     64 03 34 03 
22268     06 03 DA 02 
2226c     B1 02 8B 02 
22270     66 02 44 02 |                  word  868 , 820 , 774 , 730 , 689 , 651 , 614 , 580 , 547 , 516 , 487 , 460
22274     23 02 04 02 
22278     E7 01 CC 01 | 	byte	$23, $02, $04, $02, $e7, $01, $cc, $01
2227c     B2 01 9A 01 
22280     83 01 6D 01 
22284     59 01 45 01 
22288     33 01 22 01 |                  word  434 , 410 , 387 , 365 , 345 , 325 , 307 , 290 , 274 , 258 , 244 , 230
2228c     12 01 02 01 
22290     F4 00 E6 00 | 	byte	$12, $01, $02, $01, $f4, $00, $e6, $00
22294     D9 00 CD 00 
22298     C1 00 B7 00 
2229c     AC 00 A3 00 
222a0     9A 00 91 00 |                  word  217 , 205 , 193 , 183 , 172 , 163 , 154 , 145 , 137 , 129 , 122 , 115
222a4     89 00 81 00 
222a8     7A 00 73 00 | 	byte	$89, $00, $81, $00, $7a, $00, $73, $00
222ac     5E 03 2E 03 
222b0     00 03 D5 02 
222b4     AC 02 86 02 
222b8     62 02 3F 02 |                  word  862 , 814 , 768 , 725 , 684 , 646 , 610 , 575 , 543 , 513 , 484 , 457
222bc     1F 02 01 02 
222c0     E4 01 C9 01 | 	byte	$1f, $02, $01, $02, $e4, $01, $c9, $01
222c4     AF 01 97 01 
222c8     80 01 6B 01 
222cc     56 01 43 01 
222d0     31 01 20 01 |                  word  431 , 407 , 384 , 363 , 342 , 323 , 305 , 288 , 272 , 256 , 242 , 228
222d4     10 01 00 01 
222d8     F2 00 E4 00 | 	byte	$10, $01, $00, $01, $f2, $00, $e4, $00
222dc     D8 00 CB 00 
222e0     C0 00 B5 00 
222e4     AB 00 A1 00 
222e8     98 00 90 00 |                  word  216 , 203 , 192 , 181 , 171 , 161 , 152 , 144 , 136 , 128 , 121 , 114
222ec     88 00 80 00 
222f0     79 00 72 00 | 	byte	$88, $00, $80, $00, $79, $00, $72, $00
222f4                 | 	alignl
222f4                 | _audio019_spin2_dat_
222f4                 | 
222f4                 | audio       org     0
222f4     00 F2 07 F6 | 			mov     ptrb,#0
222f8     0E 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
222fc     0E C8 1C FC |             wxpin   #100,#left
22300     0F 7A 05 FC |             wrpin   dac,#right
22304     0F C8 1C FC |             wxpin   #100,#right
22308     41 9C 64 FD |             dirh    #left addpins 1
2230c     20 9C 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
22310     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
22314     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
22318                 |             
22318                 | '---------------------------------------------------------------------------------        
22318                 | '----------------- The main loop -------------------------------------------------
22318                 | '---------------------------------------------------------------------------------
22318                 | 
22318     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
2231c     10 00 90 CD |       if_c  jmp     #loop1
22320                 |   
22320     09 4A 05 F6 |             mov     cn,#9
22324     81 4A 8D F9 | p402        altd    cn,#a21000000
22328     80 00 80 F1 |             sub     0-0,a20000000
2232c     FD 4B 6D FB |             djnz    cn,#p402
22330                 |     
22330     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
22334     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
22338     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
2233c     01 4A 05 C6 |     if_c    mov     cn,#1
22340     85 4C 39 F3 |             fle     ct,time3 wcz
22344     02 4A 05 C6 |     if_c    mov     cn,#2     
22348     86 4C 39 F3 |             fle     ct,time4 wcz
2234c     03 4A 05 C6 |     if_c    mov     cn,#3
22350     87 4C 39 F3 |             fle     ct,time5 wcz
22354     04 4A 05 C6 |     if_c    mov     cn,#4
22358     88 4C 39 F3 |             fle     ct,time6 wcz
2235c     05 4A 05 C6 |     if_c    mov     cn,#5
22360     89 4C 39 F3 |             fle     ct,time7 wcz
22364     06 4A 05 C6 |     if_c    mov     cn,#6
22368     8A 4C 39 F3 |             fle     ct,time8 wcz
2236c     07 4A 05 C6 |     if_c    mov     cn,#7
22370                 | 
22370                 | 
22370                 | '----------------------------------------------------------------------------------
22370                 | '------------- Compute channel samples --------------------------------------------
22370                 | '----------------------------------------------------------------------------------
22370                 | 
22370                 | 
22370     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
22374     05 20 65 F0 |             shl     channeladd,#5
22378     90 F0 03 F1 |             add     ptra,channeladd
2237c                 | 
2237c     28 0E 64 FD |             setq    #7               
22380     00 31 05 FB |             rdlong  pointer0,ptra
22384                 |             
22384     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
22388     9D 44 31 F9 |     	    getword avol0,volpan0,#0
2238c     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
22390     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
22394                 | 
22394     83 4A 95 F9 |             alts    cn, #time1
22398     00 4E 01 F6 |             mov     dt0,0-0   
2239c     82 4E 81 F1 |             sub     dt0,time0
223a0                 | 
223a0     83 4A 8D F9 |             altd    cn, #time1
223a4     A0 00 00 F1 |             add     0-0,afreq0  	
223a8                 | 
223a8     A1 30 01 F1 |             add     pointer0,askip0
223ac     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
223b0     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
223b4     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
223b8     98 24 01 F6 |             mov     qq,pointer0
223bc     9A 24 01 F1 |             add     qq,sstart0
223c0                 | 
223c0     1F 34 0D F4 |             testb   sstart0,#31 wz
223c4                 | 
223c4     92 26 C1 5A |     if_nz   rdbyte  spl,qq
223c8     08 26 65 50 |     if_nz   shl     spl,#8
223cc     92 26 E1 AA |     if_z    rdword  spl,qq
223d0                 | 
223d0     A2 26 31 FA |             scas    spl,avol0
223d4     00 26 01 F6 |             mov     spl,0-0
223d8                 |  
223d8     A3 26 31 FA |             scas    spl,apan0
223dc     00 50 01 F6 |             mov     ls0,0-0
223e0                 |  
223e0     AD 4A 8D F9 |             altd    cn,#ls1
223e4     A8 00 00 F6 |             mov     0-0,ls0
223e8                 |              
223e8     20 00 00 FF 
223ec     00 24 05 F6 |             mov     qq,##16384
223f0     A3 24 81 F1 |             sub     qq,apan0
223f4     92 26 31 FA |             scas    spl,qq
223f8     00 52 01 F6 |             mov     rs0, 0-0
223fc                 | 
223fc     B5 4A 8D F9 |             altd    cn,#rs1
22400     A9 00 00 F6 |             mov     0-0,rs0
22404                 | 
22404     A9 32 29 F9 |             setword sample0,rs0,#1
22408     A8 32 21 F9 |             setword sample0,ls0,#0
2240c                 |             
2240c                 | 
2240c     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
22410     00 30 05 A6 |     if_z    mov    pointer0, #0  
22414     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
22418     28 02 64 FD | p403        setq #1
2241c                 |      
2241c     00 31 65 FC |             wrlong  pointer0,ptra
22420     90 F0 83 F1 |             sub     ptra, channeladd
22424     00 00 90 FD |             jmp     #p101
22428                 |                        
22428                 |             
22428                 |           
22428                 |             
22428                 | '------------------------ Channels end here --------------------       
22428                 | 
22428                 | ' Now add all channels and put the sample to the buffer    
22428                 | 
22428                 | 
22428     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
2242c     01 22 85 A1 |     if_z    sub     front,#1         ' 
22430     FF 23 05 A5 |     if_z    and     front,#511     
22434                 |            
22434                 |     
22434     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
22438     00 56 05 F6 |             mov     ls,#0
2243c     B5 58 01 F1 |             add     rs,rs1
22440     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
22444     B7 58 01 F1 |             add     rs,rs3
22448     B8 58 01 F1 |             add     rs,rs4
2244c     B9 58 01 F1 |             add     rs,rs5
22450     BA 58 01 F1 |             add     rs,rs6
22454     BB 58 01 F1 |             add     rs,rs7
22458     BC 58 01 F1 |             add     rs,rs8
2245c                 | 
2245c                 |            
2245c     AD 56 01 F1 |             add     ls,ls1
22460     AE 56 01 F1 |             add     ls,ls2
22464     AF 56 01 F1 |             add     ls,ls3
22468     B0 56 01 F1 |             add     ls,ls4
2246c     B1 56 01 F1 |             add     ls,ls5
22470     B2 56 01 F1 |             add     ls,ls6
22474     B3 56 01 F1 |             add     ls,ls7
22478     B4 56 01 F1 |             add     ls,ls8
2247c                 | 
2247c                 |  		
2247c     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
22480     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
22484                 | 		    
22484     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
22488     AC 16 01 F6 |             mov newsample, rs
2248c                 | 
2248c     82 48 01 F6 |             mov     oldt0,time0      ' update global time
22490     A7 04 01 F1 |             add     time0,dt0    
22494                 | 
22494                 |             
22494                 |  
22494                 |                                      ' now push dt0 samples to the buffer
22494     00 4E 0D F2 |             cmp      dt0,#0 wz
22498     94 FE 9F AD |     if_z    jmp      #loop1
2249c     A7 18 01 F6 |             mov      t1,dt0
224a0                 |   
224a0     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
224a4     01 1A 85 F1 |             sub     t2,#1
224a8     FF 1B 05 F5 |             and     t2,#511
224ac     91 1A 19 F2 |             cmp     t2,front wcz
224b0     EC FF 9F AD |     if_e    jmp     #p301    
224b4                 |     
224b4     91 16 31 FC |             wrlut   newsample, front
224b8     01 22 05 F1 |             add     front,#1
224bc     FF 23 05 F5 |             and     front,#511
224c0     F7 19 6D FB |             djnz    t1,#p301
224c4                 |             
224c4     50 FE 9F FD |             jmp     #loop            'loop
224c8                 | 
224c8                 | '-------------------------------------------------------------------------
224c8                 | '------------------ This is the end of the main loop ---------------------
224c8                 | '-------------------------------------------------------------------------
224c8                 | 
224c8                 | '--------------------------------------------------------------------------
224c8                 | '------ Interrupt service -------------------------------------------------
224c8                 | '------ Output the sample, get the next one if exists ---------------------
224c8                 | '--------------------------------------------------------------------------
224c8                 | 
224c8     0E 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
224cc     0F 2A 25 FC |             wypin   rsample,#right       '4
224d0                 |            
224d0     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
224d4     F5 FF 3B AB |     if_e    reti1                        '8/10
224d8                 | 
224d8     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
224dc     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
224e0     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
224e4     F5 FF 3B FB |             reti1                        '17/19 
224e8                 |           
224e8                 | '---------------------------------------------------------------------------
224e8                 | '-------- End of interrupt -------------------------------------------------
224e8                 | '---------------------------------------------------------------------------    
224e8                 | 
224e8                 | 
224e8                 | '---------------------------------------------------------------------------
224e8                 | '------- Variables ---------------------------------------------------------
224e8                 | '---------------------------------------------------------------------------
224e8                 | 
224e8                 | ' constants
224e8                 | 
224e8     00 00 00 00 | hp long 0
224ec     00 00 00 00 | lp long 0
224f0     00 00 00 00 | bp long 0
224f4     00 00 00 10 | a20000000   long $10000000
224f8     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
224fc                 | 
224fc                 | ' Time variables
224fc                 | 
224fc     00 00 00 00 | time0       long 0    ' Global sample computing time
22500     01 00 00 00 | time1       long 1    ' Local channels time
22504     02 00 00 00 | time2       long 2
22508     03 00 00 00 | time3       long 3
2250c     04 00 00 00 | time4       long 4
22510     05 00 00 00 | time5       long 5
22514     06 00 00 00 | time6       long 6
22518     07 00 00 00 | time7       long 7
2251c     08 00 00 00 | time8       long 8
22520                 | 
22520                 | 
22520                 | 
22520     00 00 00 00 | newsample long 0
22524                 | '
22524     00 00 00 00 | t1 long 0
22528     00 00 00 00 | t2 long 0
2252c                 | '
2252c     00 00 00 00 | nrsample long 0
22530     00 00 00 00 | nlsample long 0
22534                 | '
22534     00 00 00 00 | channeladd long 0
22538                 | 
22538                 | 
22538     00 00 00 00 | front       long 0
2253c                 | 
2253c                 | ' temporary variables 
2253c                 | '
2253c     00 00 00 00 | qq          long 0
22540     00 00 00 00 | spl         long 0
22544                 | 
22544                 | ' circular buffer in LUT
22544                 | 
22544                 | 
22544                 | '
22544                 | 
22544                 | ' Interrupt ISR variables
22544                 | 
22544                 | 
22544     00 00 00 00 | lsample     long 0
22548     00 00 00 00 | rsample     long 0
2254c     00 00 00 00 | lsnext      long 0
22550     00 00 00 00 | rsnext      long 0 
22554                 | 
22554                 | 
22554     00 00 00 00 | pointer0    long 0
22558     00 00 00 00 | sample0     long 0
2255c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
22560     00 00 00 00 | lstart0     long 0
22564     00 00 00 00 | lend0       long 0
22568     00 00 00 00 | volpan0     long 0
2256c     00 00 00 00 | freqskip0   long 0
22570     00 00 00 00 | dummy0      long 0
22574                 | 
22574     00 00 00 00 | afreq0      long 0
22578     00 00 00 00 | askip0      long 0
2257c     00 00 00 00 | avol0       long 0
22580     00 00 00 00 | apan0       long 0
22584                 | 
22584     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
22588     00 00 00 00 | cn          long 0
2258c     00 00 00 00 | ct          long 0
22590     00 00 00 00 | dt0         long 0
22594                 | 
22594                 | ' Samples
22594     00 00 00 00 | ls0         long 0
22598     00 00 00 00 | rs0         long 0
2259c     00 00 00 00 | channel     long 0
225a0     00 00 00 00 | ls          long 0    ' Global sample variable
225a4     00 00 00 00 | rs          long 0
225a8                 | 
225a8     00 00 00 00 | ls1         long 0    ' Channel samples
225ac     00 00 00 00 | ls2         long 0
225b0     00 00 00 00 | ls3         long 0
225b4     00 00 00 00 | ls4         long 0
225b8     00 00 00 00 | ls5         long 0
225bc     00 00 00 00 | ls6         long 0
225c0     00 00 00 00 | ls7         long 0
225c4     00 00 00 00 | ls8         long 0
225c8     00 00 00 00 | rs1         long 0
225cc     00 00 00 00 | rs2         long 0
225d0     00 00 00 00 | rs3         long 0
225d4     00 00 00 00 | rs4         long 0
225d8     00 00 00 00 | rs5         long 0
225dc     00 00 00 00 | rs6         long 0
225e0     00 00 00 00 | rs7         long 0
225e4     00 00 00 00 | rs8         long 0
225e8                 | 
225e8     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
225ec                 | 
225ec     00 00 00 00 
225f0     00 00 00 00 | null  			long 	0,0           ' for channel reset
225f4     73 32 00 04 
225f8     00 00 10 00 
225fc     00 00 00 00 
22600     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
22604     00 00 C9 00 
22608     92 01 5B 02 
2260c     24 03 ED 03 
22610     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
22614     48 06 11 07 
22618     D9 07 A2 08 
2261c     6A 09 33 0A 
22620     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
22624     8C 0C 54 0D 
22628     1C 0E E3 0E 
2262c     AB 0F 72 10 
22630     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
22634     C8 12 8F 13 
22638     55 14 1C 15 
2263c     E2 15 A8 16 
22640     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
22644     F9 18 BE 19 
22648     82 1A 47 1B 
2264c     0B 1C CF 1C 
22650     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
22654     1A 1F DD 1F 
22658     9F 20 61 21 
2265c     23 22 E5 22 
22660     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
22664     28 25 E8 25 
22668     A8 26 67 27 
2266c     26 28 E5 28 
22670     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
22674     1F 2B DC 2B 
22678     99 2C 55 2D 
2267c     11 2E CC 2E 
22680     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
22684     FB 30 B5 31 
22688     6E 32 26 33 
2268c     DF 33 96 34 
22690     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
22694     BA 36 6F 37 
22698     24 38 D9 38 
2269c     8C 39 40 3A 
226a0     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
226a4     56 3C 07 3D 
226a8     B8 3D 68 3E 
226ac     17 3F C5 3F 
226b0     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
226b4     CE 41 7A 42 
226b8     25 43 D0 43 
226bc     7A 44 24 45 
226c0     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
226c4     1C 47 C3 47 
226c8     69 48 0F 49 
226cc     B4 49 58 4A 
226d0     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
226d4     3F 4C E0 4C 
226d8     81 4D 20 4E 
226dc     BF 4E 5D 4F 
226e0     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
226e4     33 51 CE 51 
226e8     68 52 02 53 
226ec     9B 53 32 54 
226f0     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
226f4     F5 55 8A 56 
226f8     1D 57 B0 57 
226fc     42 58 D3 58 
22700     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
22704     82 5A 0F 5B 
22708     9C 5B 28 5C 
2270c     B3 5C 3E 5D 
22710     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
22714     D7 5E 5D 5F 
22718     E3 5F 68 60 
2271c     EB 60 6E 61 
22720     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
22724     F1 62 70 63 
22728     EE 63 6C 64 
2272c     E8 64 63 65 
22730     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
22734     CF 66 46 67 
22738     BC 67 32 68 
2273c     A6 68 19 69 
22740     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
22744     6D 6A DC 6A 
22748     4A 6B B7 6B 
2274c     23 6C 8E 6C 
22750     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
22754     C9 6D 30 6E 
22758     96 6E FB 6E 
2275c     5E 6F C1 6F 
22760     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
22764     E2 70 40 71 
22768     9D 71 F9 71 
2276c     54 72 AE 72 
22770     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
22774     B5 73 0A 74 
22778     5F 74 B2 74 
2277c     04 75 55 75 
22780     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
22784     41 76 8D 76 
22788     D8 76 22 77 
2278c     6B 77 B3 77 
22790     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
22794     84 78 C7 78 
22798     09 79 4A 79 
2279c     89 79 C8 79 
227a0     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
227a4     7C 7A B6 7A 
227a8     EE 7A 26 7B 
227ac     5C 7B 91 7B 
227b0     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
227b4     29 7C 59 7C 
227b8     88 7C B6 7C 
227bc     E3 7C 0E 7D 
227c0     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
227c4     89 7D B0 7D 
227c8     D5 7D FA 7D 
227cc     1D 7E 3E 7E 
227d0     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
227d4     9C 7E B9 7E 
227d8     D5 7E EF 7E 
227dc     09 7F 21 7F 
227e0     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
227e4     61 7F 74 7F 
227e8     86 7F 97 7F 
227ec     A6 7F B4 7F 
227f0     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
227f4     D8 7F E1 7F 
227f8     E9 7F F0 7F 
227fc     F5 7F F9 7F 
22800     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
22804     FF 7F FE 7F 
22808     FD 7F F9 7F 
2280c     F5 7F F0 7F 
22810     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
22814     D8 7F CD 7F 
22818     C1 7F B4 7F 
2281c     A6 7F 97 7F 
22820     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
22824     61 7F 4D 7F 
22828     37 7F 21 7F 
2282c     09 7F EF 7E 
22830     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
22834     9C 7E 7E 7E 
22838     5F 7E 3E 7E 
2283c     1D 7E FA 7D 
22840     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
22844     89 7D 62 7D 
22848     39 7D 0E 7D 
2284c     E3 7C B6 7C 
22850     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
22854     29 7C F8 7B 
22858     C5 7B 91 7B 
2285c     5C 7B 26 7B 
22860     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
22864     7C 7A 41 7A 
22868     05 7A C8 79 
2286c     89 79 4A 79 
22870     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
22874     84 78 3F 78 
22878     FA 77 B3 77 
2287c     6B 77 22 77 
22880     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
22884     41 76 F3 75 
22888     A5 75 55 75 
2288c     04 75 B2 74 
22890     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
22894     B5 73 5E 73 
22898     07 73 AE 72 
2289c     54 72 F9 71 
228a0     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
228a4     E2 70 83 70 
228a8     22 70 C1 6F 
228ac     5E 6F FB 6E 
228b0     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
228b4     C9 6D 61 6D 
228b8     F8 6C 8E 6C 
228bc     23 6C B7 6B 
228c0     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
228c4     6D 6A FD 69 
228c8     8B 69 19 69 
228cc     A6 68 32 68 
228d0     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
228d4     CF 66 56 66 
228d8     DD 65 63 65 
228dc     E8 64 6C 64 
228e0     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
228e4     F1 62 71 62 
228e8     F0 61 6E 61 
228ec     EB 60 68 60 
228f0     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
228f4     D7 5E 4F 5E 
228f8     C7 5D 3E 5D 
228fc     B3 5C 28 5C 
22900     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
22904     82 5A F3 59 
22908     64 59 D3 58 
2290c     42 58 B0 57 
22910     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
22914     F5 55 60 55 
22918     C9 54 32 54 
2291c     9B 53 02 53 
22920     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
22924     33 51 97 50 
22928     FB 4F 5D 4F 
2292c     BF 4E 20 4E 
22930     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
22934     3F 4C 9D 4B 
22938     FB 4A 58 4A 
2293c     B4 49 0F 49 
22940     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
22944     1C 47 75 46 
22948     CD 45 24 45 
2294c     7A 44 D0 43 
22950     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
22954     CE 41 21 41 
22958     73 40 C5 3F 
2295c     17 3F 68 3E 
22960     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
22964     56 3C A5 3B 
22968     F2 3A 40 3A 
2296c     8C 39 D9 38 
22970     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
22974     BA 36 04 36 
22978     4D 35 96 34 
2297c     DF 33 26 33 
22980     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
22984     FB 30 41 30 
22988     87 2F CC 2E 
2298c     11 2E 55 2D 
22990     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
22994     1F 2B 61 2A 
22998     A3 29 E5 28 
2299c     26 28 67 27 
229a0     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
229a4     28 25 67 24 
229a8     A6 23 E5 22 
229ac     23 22 61 21 
229b0     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
229b4     1A 1F 57 1E 
229b8     93 1D CF 1C 
229bc     0B 1C 47 1B 
229c0     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
229c4     F9 18 33 18 
229c8     6E 17 A8 16 
229cc     E2 15 1C 15 
229d0     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
229d4     C8 12 01 12 
229d8     3A 11 72 10 
229dc     AB 0F E3 0E 
229e0     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
229e4     8C 0C C4 0B 
229e8     FB 0A 33 0A 
229ec     6A 09 A2 08 
229f0     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
229f4     48 06 7F 05 
229f8     B6 04 ED 03 
229fc     24 03 5B 02 
22a00     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
22a04     00 00 37 FF 
22a08     6E FE A5 FD 
22a0c     DC FC 13 FC 
22a10     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
22a14     B8 F9 EF F8 
22a18     27 F8 5E F7 
22a1c     96 F6 CD F5 
22a20     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
22a24     74 F3 AC F2 
22a28     E4 F1 1D F1 
22a2c     55 F0 8E EF 
22a30     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
22a34     38 ED 71 EC 
22a38     AB EB E4 EA 
22a3c     1E EA 58 E9 
22a40     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
22a44     07 E7 42 E6 
22a48     7E E5 B9 E4 
22a4c     F5 E3 31 E3 
22a50     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
22a54     E6 E0 23 E0 
22a58     61 DF 9F DE 
22a5c     DD DD 1B DD 
22a60     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
22a64     D8 DA 18 DA 
22a68     58 D9 99 D8 
22a6c     DA D7 1B D7 
22a70     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
22a74     E1 D4 24 D4 
22a78     67 D3 AB D2 
22a7c     EF D1 34 D1 
22a80     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
22a84     05 CF 4B CE 
22a88     92 CD DA CC 
22a8c     21 CC 6A CB 
22a90     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
22a94     46 C9 91 C8 
22a98     DC C7 27 C7 
22a9c     74 C6 C0 C5 
22aa0     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
22aa4     AA C3 F9 C2 
22aa8     48 C2 98 C1 
22aac     E9 C0 3B C0 
22ab0     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
22ab4     32 BE 86 BD 
22ab8     DB BC 30 BC 
22abc     86 BB DC BA 
22ac0     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
22ac4     E4 B8 3D B8 
22ac8     97 B7 F1 B6 
22acc     4C B6 A8 B5 
22ad0     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
22ad4     C1 B3 20 B3 
22ad8     7F B2 E0 B1 
22adc     41 B1 A3 B0 
22ae0     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
22ae4     CD AE 32 AE 
22ae8     98 AD FE AC 
22aec     65 AC CE AB 
22af0     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
22af4     0B AA 76 A9 
22af8     E3 A8 50 A8 
22afc     BE A7 2D A7 
22b00     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
22b04     7E A5 F1 A4 
22b08     64 A4 D8 A3 
22b0c     4D A3 C2 A2 
22b10     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
22b14     29 A1 A3 A0 
22b18     1D A0 98 9F 
22b1c     15 9F 92 9E 
22b20     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
22b24     0F 9D 90 9C 
22b28     12 9C 94 9B 
22b2c     18 9B 9D 9A 
22b30     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
22b34     31 99 BA 98 
22b38     44 98 CE 97 
22b3c     5A 97 E7 96 
22b40     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
22b44     93 95 24 95 
22b48     B6 94 49 94 
22b4c     DD 93 72 93 
22b50     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
22b54     37 92 D0 91 
22b58     6A 91 05 91 
22b5c     A2 90 3F 90 
22b60     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
22b64     1E 8F C0 8E 
22b68     63 8E 07 8E 
22b6c     AC 8D 52 8D 
22b70     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
22b74     4B 8C F6 8B 
22b78     A1 8B 4E 8B 
22b7c     FC 8A AB 8A 
22b80     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
22b84     BF 89 73 89 
22b88     28 89 DE 88 
22b8c     95 88 4D 88 
22b90     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
22b94     7C 87 39 87 
22b98     F7 86 B6 86 
22b9c     77 86 38 86 
22ba0     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
22ba4     84 85 4A 85 
22ba8     12 85 DA 84 
22bac     A4 84 6F 84 
22bb0     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
22bb4     D7 83 A7 83 
22bb8     78 83 4A 83 
22bbc     1D 83 F2 82 
22bc0     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
22bc4     77 82 50 82 
22bc8     2B 82 06 82 
22bcc     E3 81 C2 81 
22bd0     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
22bd4     64 81 47 81 
22bd8     2B 81 11 81 
22bdc     F7 80 DF 80 
22be0     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
22be4     9F 80 8C 80 
22be8     7A 80 69 80 
22bec     5A 80 4C 80 
22bf0     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
22bf4     28 80 1F 80 
22bf8     17 80 10 80 
22bfc     0B 80 07 80 
22c00     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
22c04     01 80 02 80 
22c08     03 80 07 80 
22c0c     0B 80 10 80 
22c10     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
22c14     28 80 33 80 
22c18     3F 80 4C 80 
22c1c     5A 80 69 80 
22c20     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
22c24     9F 80 B3 80 
22c28     C9 80 DF 80 
22c2c     F7 80 11 81 
22c30     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
22c34     64 81 82 81 
22c38     A1 81 C2 81 
22c3c     E3 81 06 82 
22c40     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
22c44     77 82 9E 82 
22c48     C7 82 F2 82 
22c4c     1D 83 4A 83 
22c50     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
22c54     D7 83 08 84 
22c58     3B 84 6F 84 
22c5c     A4 84 DA 84 
22c60     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
22c64     84 85 BF 85 
22c68     FB 85 38 86 
22c6c     77 86 B6 86 
22c70     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
22c74     7C 87 C1 87 
22c78     06 88 4D 88 
22c7c     95 88 DE 88 
22c80     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
22c84     BF 89 0D 8A 
22c88     5B 8A AB 8A 
22c8c     FC 8A 4E 8B 
22c90     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
22c94     4B 8C A2 8C 
22c98     F9 8C 52 8D 
22c9c     AC 8D 07 8E 
22ca0     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
22ca4     1E 8F 7D 8F 
22ca8     DE 8F 3F 90 
22cac     A2 90 05 91 
22cb0     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
22cb4     37 92 9F 92 
22cb8     08 93 72 93 
22cbc     DD 93 49 94 
22cc0     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
22cc4     93 95 03 96 
22cc8     75 96 E7 96 
22ccc     5A 97 CE 97 
22cd0     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
22cd4     31 99 AA 99 
22cd8     23 9A 9D 9A 
22cdc     18 9B 94 9B 
22ce0     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
22ce4     0F 9D 8F 9D 
22ce8     10 9E 92 9E 
22cec     15 9F 98 9F 
22cf0     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
22cf4     29 A1 B1 A1 
22cf8     39 A2 C2 A2 
22cfc     4D A3 D8 A3 
22d00     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
22d04     7E A5 0D A6 
22d08     9C A6 2D A7 
22d0c     BE A7 50 A8 
22d10     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
22d14     0B AA A0 AA 
22d18     37 AB CE AB 
22d1c     65 AC FE AC 
22d20     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
22d24     CD AE 69 AF 
22d28     05 B0 A3 B0 
22d2c     41 B1 E0 B1 
22d30     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
22d34     C1 B3 63 B4 
22d38     05 B5 A8 B5 
22d3c     4C B6 F1 B6 
22d40     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
22d44     E4 B8 8B B9 
22d48     33 BA DC BA 
22d4c     86 BB 30 BC 
22d50     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
22d54     32 BE DF BE 
22d58     8D BF 3B C0 
22d5c     E9 C0 98 C1 
22d60     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
22d64     AA C3 5B C4 
22d68     0E C5 C0 C5 
22d6c     74 C6 27 C7 
22d70     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
22d74     46 C9 FC C9 
22d78     B3 CA 6A CB 
22d7c     21 CC DA CC 
22d80     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
22d84     05 CF BF CF 
22d88     79 D0 34 D1 
22d8c     EF D1 AB D2 
22d90     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
22d94     E1 D4 9F D5 
22d98     5D D6 1B D7 
22d9c     DA D7 99 D8 
22da0     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
22da4     D8 DA 99 DB 
22da8     5A DC 1B DD 
22dac     DD DD 9F DE 
22db0     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
22db4     E6 E0 A9 E1 
22db8     6D E2 31 E3 
22dbc     F5 E3 B9 E4 
22dc0     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
22dc4     07 E7 CD E7 
22dc8     92 E8 58 E9 
22dcc     1E EA E4 EA 
22dd0     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
22dd4     38 ED FF ED 
22dd8     C6 EE 8E EF 
22ddc     55 F0 1D F1 
22de0     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
22de4     74 F3 3C F4 
22de8     05 F5 CD F5 
22dec     96 F6 5E F7 
22df0     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
22df4     B8 F9 81 FA 
22df8     4A FB 13 FC 
22dfc     DC FC A5 FD 
22e00     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
22e04                 | 	alignl
22e04                 | __system__dat_
22e04     00 00 00 00 
22e08     00 00 00 00 | 	byte	$00[8]
22e0c     03 00 00 00 
22e10     00 00 00 00 
22e14     00 00 00 00 
22e18     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
22e1c     00 00 00 00 
22e20     00 00 00 00 
22e24     00 00 00 00 
22e28     00 00 00 00 
22e2c     00 00 00 00 | 	byte	$00[20]
22e30     05 00 00 00 
22e34     00 00 00 00 
22e38     00 00 00 00 
22e3c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
22e40     08 30 02 00 | 	long	@@@__system__dat_ + 516
22e44     10 30 02 00 | 	long	@@@__system__dat_ + 524
22e48     00 00 00 00 | 	byte	$00, $00, $00, $00
22e4c     18 30 02 00 | 	long	@@@__system__dat_ + 532
22e50     20 30 02 00 | 	long	@@@__system__dat_ + 540
22e54     00 00 00 00 
22e58     00 00 00 00 | 	byte	$00[8]
22e5c     01 00 00 00 
22e60     06 00 00 00 
22e64     00 00 00 00 
22e68     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
22e6c     00 00 00 00 | 	byte	$00, $00, $00, $00
22e70     28 30 02 00 | 	long	@@@__system__dat_ + 548
22e74     30 30 02 00 | 	long	@@@__system__dat_ + 556
22e78     00 00 00 00 | 	byte	$00, $00, $00, $00
22e7c     38 30 02 00 | 	long	@@@__system__dat_ + 564
22e80     40 30 02 00 | 	long	@@@__system__dat_ + 572
22e84     00 00 00 00 
22e88     00 00 00 00 | 	byte	$00[8]
22e8c     01 00 00 00 
22e90     06 00 00 00 
22e94     00 00 00 00 
22e98     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
22e9c     00 00 00 00 | 	byte	$00, $00, $00, $00
22ea0     48 30 02 00 | 	long	@@@__system__dat_ + 580
22ea4     50 30 02 00 | 	long	@@@__system__dat_ + 588
22ea8     00 00 00 00 | 	byte	$00, $00, $00, $00
22eac     58 30 02 00 | 	long	@@@__system__dat_ + 596
22eb0     60 30 02 00 | 	long	@@@__system__dat_ + 604
22eb4     00 00 00 00 
      ...             
23004     00 00 00 00 
23008     00 00 00 00 | 	byte	$00[344]
2300c     78 6F 00 00 | 	long	@@@__system___tx
23010     00 00 00 00 | 	byte	$00, $00, $00, $00
23014     C0 6F 00 00 | 	long	@@@__system___rx
23018     00 00 00 00 | 	byte	$00, $00, $00, $00
2301c     3C 8A 00 00 | 	long	@@@__system___rxtxioctl_0179
23020     00 00 00 00 | 	byte	$00, $00, $00, $00
23024     AC 8A 00 00 | 	long	@@@__system____dummy_flush_0180
23028     00 00 00 00 | 	byte	$00, $00, $00, $00
2302c     78 6F 00 00 | 	long	@@@__system___tx
23030     00 00 00 00 | 	byte	$00, $00, $00, $00
23034     C0 6F 00 00 | 	long	@@@__system___rx
23038     00 00 00 00 | 	byte	$00, $00, $00, $00
2303c     3C 8A 00 00 | 	long	@@@__system___rxtxioctl_0179
23040     00 00 00 00 | 	byte	$00, $00, $00, $00
23044     AC 8A 00 00 | 	long	@@@__system____dummy_flush_0180
23048     00 00 00 00 | 	byte	$00, $00, $00, $00
2304c     78 6F 00 00 | 	long	@@@__system___tx
23050     00 00 00 00 | 	byte	$00, $00, $00, $00
23054     C0 6F 00 00 | 	long	@@@__system___rx
23058     00 00 00 00 | 	byte	$00, $00, $00, $00
2305c     3C 8A 00 00 | 	long	@@@__system___rxtxioctl_0179
23060     00 00 00 00 | 	byte	$00, $00, $00, $00
23064     AC 8A 00 00 | 	long	@@@__system____dummy_flush_0180
23068                 | __heap_base
23068     00 00 00 00 
      ...             
24068     00 00 00 00 
2406c     00 00 00 00 | 	long	0[1026]
24070                 | objmem
24070     00 00 00 00 
      ...             
2537c     00 00 00 00 
25380     00 00 00 00 | 	long	0[1221]
25384                 | stackspace
25384     00 00 00 00 | 	long	0[1]
25388 10f             | 	org	COG_BSS_START
25388 10f             | _var01
25388 10f             | 	res	1
25388 110             | _var02
25388 110             | 	res	1
25388 111             | _var03
25388 111             | 	res	1
25388 112             | _var04
25388 112             | 	res	1
25388 113             | _var05
25388 113             | 	res	1
25388 114             | _var06
25388 114             | 	res	1
25388 115             | _var07
25388 115             | 	res	1
25388 116             | _var08
25388 116             | 	res	1
25388 117             | _var09
25388 117             | 	res	1
25388 118             | _var10
25388 118             | 	res	1
25388 119             | _var11
25388 119             | 	res	1
25388 11a             | _var12
25388 11a             | 	res	1
25388 11b             | _var13
25388 11b             | 	res	1
25388 11c             | _var14
25388 11c             | 	res	1
25388 11d             | _var15
25388 11d             | 	res	1
25388 11e             | _var16
25388 11e             | 	res	1
25388 11f             | _var17
25388 11f             | 	res	1
25388 120             | _var18
25388 120             | 	res	1
25388 121             | _var19
25388 121             | 	res	1
25388 122             | _var20
25388 122             | 	res	1
25388 123             | _var21
25388 123             | 	res	1
25388 124             | _var22
25388 124             | 	res	1
25388 125             | _var23
25388 125             | 	res	1
25388 126             | _var24
25388 126             | 	res	1
25388 127             | _var25
25388 127             | 	res	1
25388 128             | _var26
25388 128             | 	res	1
25388 129             | _var27
25388 129             | 	res	1
25388 12a             | _var28
25388 12a             | 	res	1
25388 12b             | _var29
25388 12b             | 	res	1
25388 12c             | _var30
25388 12c             | 	res	1
25388 12d             | _var31
25388 12d             | 	res	1
25388 12e             | _var32
25388 12e             | 	res	1
25388 12f             | arg01
25388 12f             | 	res	1
25388 130             | arg02
25388 130             | 	res	1
25388 131             | arg03
25388 131             | 	res	1
25388 132             | arg04
25388 132             | 	res	1
25388 133             | arg05
25388 133             | 	res	1
25388 134             | arg06
25388 134             | 	res	1
25388 135             | arg07
25388 135             | 	res	1
25388 136             | local01
25388 136             | 	res	1
25388 137             | local02
25388 137             | 	res	1
25388 138             | local03
25388 138             | 	res	1
25388 139             | local04
25388 139             | 	res	1
25388 13a             | local05
25388 13a             | 	res	1
25388 13b             | local06
25388 13b             | 	res	1
25388 13c             | local07
25388 13c             | 	res	1
25388 13d             | local08
25388 13d             | 	res	1
25388 13e             | local09
25388 13e             | 	res	1
25388 13f             | local10
25388 13f             | 	res	1
25388 140             | local11
25388 140             | 	res	1
25388 141             | local12
25388 141             | 	res	1
25388 142             | local13
25388 142             | 	res	1
25388 143             | local14
25388 143             | 	res	1
25388 144             | local15
25388 144             | 	res	1
25388 145             | local16
25388 145             | 	res	1
25388 146             | local17
25388 146             | 	res	1
25388 147             | local18
25388 147             | 	res	1
25388 148             | local19
25388 148             | 	res	1
25388 149             | local20
25388 149             | 	res	1
25388 14a             | local21
25388 14a             | 	res	1
25388 14b             | local22
25388 14b             | 	res	1
25388 14c             | muldiva_
25388 14c             | 	res	1
25388 14d             | muldivb_
25388 14d             | 	res	1
25388 14e             | 	fit	480
25388 14e             | 
