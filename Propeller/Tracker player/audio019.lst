00000                 | 
00000                 | #line 1 "/home/pik33/P2-Retromachine/Propeller/Tracker player/audio019.p2asm"
00000                 | ' 
00000                 | ' '319220550    =3546895, change to NTSC freq if needed
00000                 | ' '322159050 ' This is 90x Amiga NTSC = 3579545
00000                 | ' _clkfreq = 354693878  ' This is 100x Amiga PAL 3546895
00000                 | con
00000                 | 	_clkfreq = 354693878
00000                 | ' ' audio pins TODO: make a variable for start() instead of const
00000                 | ' 
00000                 | ' left= 8
00000                 | 	left = 8
00000                 | ' right=9
00000                 | 	right = 9
00000                 | ' 
00000                 | ' 
00000                 | ' c4=262
00000                 | 	c4 = 262
00000                 | ' d4=294
00000                 | 	d4 = 294
00000                 | ' e4=330
00000                 | 	e4 = 330
00000                 | ' f4=349
00000                 | 	f4 = 349
00000                 | ' g4=392
00000                 | 	g4 = 392
00000                 | ' a4=440
00000                 | 	a4 = 440
00000                 | ' h4=494
00000                 | 	h4 = 494
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 354693647
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1c364fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 AC 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 D5 F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 B2 E1 80 FF 
00420 007 00 F0 65 FD | 	hubset	##29582584
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a B2 E1 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##29582587
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 19 92 8A FF 
00440 00f 14 1E 6C FC | 	wrlong	##354693647, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 64 07 A0 FD | 	call	#_test
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 B0 61 FD | 	cogid	arg01
00614 084 03 B0 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 A5 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 AD 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 B1 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 B3 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 B5 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 B7 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D AC 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 B4 55 F0 |         shr	arg03, #1 wc
00688 0a1 D8 B2 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 B0 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 B2 FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 B4 55 F0 |         shr	arg03, #1 wc
00698 0a5 D8 B2 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 B0 05 C1 |  if_c   add	arg01, #2
006a0 0a7 D9 B2 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 D8 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 B4 0D F2 |         cmp	arg03, #0 wz
006ac 0aa DA 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 B2 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 03 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 FF 5B 8D F9 |     altd  COUNT_, #511
006d4 0b4 28 00 64 FD |     setq #0-0
006d8 0b5 61 B9 65 FC |     wrlong local01, ptra++
006dc 0b6             | pushregs_done_
006dc 0b6 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006e0 0b7 61 5B 65 FC |     wrlong COUNT_, ptra++
006e4 0b8 F8 5F 01 F6 |     mov    fp, ptra
006e8 0b9 2C EC 63 FD |     jmp  pa
006ec 0ba             |  popregs_
006ec 0ba 2B EC 63 FD |     pop    pa
006f0 0bb 28 04 64 FD |     setq   #2
006f4 0bc 5F 5B 05 FB |     rdlong COUNT_, --ptra
006f8 0bd 02 5A 75 FB |     djf    COUNT_, #popregs__ret
006fc 0be 28 5A 61 FD |     setq   COUNT_
00700 0bf 5F B9 05 FB |     rdlong local01, --ptra
00704 0c0             | popregs__ret
00704 0c0 2A 5C 61 FD |     push   RETADDR_
00708 0c1 2C EC 63 FD |     jmp    pa
0070c 0c2             | 
0070c 0c2             | unsdivide_
0070c 0c2 28 00 64 FD |        setq    #0
00710 0c3 E6 CA 11 FD |        qdiv    muldiva_, muldivb_
00714 0c4 18 CC 61 FD |        getqx   muldivb_
00718 0c5 19 CA 61 0D |  _ret_ getqy   muldiva_
0071c 0c6             | 
0071c 0c6             | divide_
0071c 0c6 E5 CA 51 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00720 0c7 03 A2 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
00724 0c8 E6 CC 59 F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00728 0c9 02 A2 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
0072c 0ca 2D 00 64 AD |  if_z  ret
00730 0cb D8 FF BF FD |        call    #unsdivide_
00734 0cc 01 A2 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00738 0cd E5 CA 81 F6 |        negc    muldiva_,muldiva_ 
0073c 0ce 02 A2 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00740 0cf E6 CC 81 06 |  _ret_ negc    muldivb_,muldivb_
00744 0d0             | 
00744 0d0             | itmp1_
00744 0d0 00 00 00 00 | 	long	0
00748 0d1             | itmp2_
00748 0d1 00 00 00 00 | 	long	0
0074c 0d2             | objptr
0074c 0d2 40 17 00 00 | 	long	@objmem
00750 0d3             | ptr___system__dat__
00750 0d3 28 17 00 00 | 	long	@__system__dat_
00754 0d4             | ptr__dat__
00754 0d4 18 0C 00 00 | 	long	@_dat_
00758 0d5             | ptr_stackspace_
00758 0d5 60 18 00 00 | 	long	@stackspace
0075c 0d6             | result1
0075c 0d6 00 00 00 00 | 	long	0
00760 0d7             | result2
00760 0d7 00 00 00 00 | 	long	0
00764 0d8             | COG_BSS_START
00764 0d8             | 	fit	480
00764                 | 	orgh
00764                 | hubentry
00764                 | 
00764                 | ' 
00764                 | ' '----------------------------------------------------------------
00764                 | ' '------------  Alpha testing the thing --------------------------
00764                 | ' '---------------------------------------------------------------- 
00764                 | ' 
00764                 | ' pub test
00764                 | _test
00764                 | ' 
00764                 | ' start()
00764     D0 02 B0 FD | 	call	#_start
00768                 | ' waitms(500)
00768     F4 B1 05 F6 | 	mov	arg01, #500
0076c     2C 04 B0 FD | 	call	#__system___waitms
00770                 | ' repeat
00770                 | LR__0001
00770                 | '   play(c4,5000,16384)
00770     06 B1 05 F6 | 	mov	arg01, #262
00774     09 00 00 FF 
00778     88 B3 05 F6 | 	mov	arg02, ##5000
0077c     0E B4 C5 F9 | 	decod	arg03, #14
00780     38 01 B0 FD | 	call	#_play
00784                 | '   play(d4,5000,16384)
00784     26 B1 05 F6 | 	mov	arg01, #294
00788     09 00 00 FF 
0078c     88 B3 05 F6 | 	mov	arg02, ##5000
00790     0E B4 C5 F9 | 	decod	arg03, #14
00794     24 01 B0 FD | 	call	#_play
00798                 | '   play(e4,5000,16384)
00798     4A B1 05 F6 | 	mov	arg01, #330
0079c     09 00 00 FF 
007a0     88 B3 05 F6 | 	mov	arg02, ##5000
007a4     0E B4 C5 F9 | 	decod	arg03, #14
007a8     10 01 B0 FD | 	call	#_play
007ac                 | '   play(f4,5000,16384)
007ac     5D B1 05 F6 | 	mov	arg01, #349
007b0     09 00 00 FF 
007b4     88 B3 05 F6 | 	mov	arg02, ##5000
007b8     0E B4 C5 F9 | 	decod	arg03, #14
007bc     FC 00 B0 FD | 	call	#_play
007c0                 | '   play(g4,5000,16384)
007c0     88 B1 05 F6 | 	mov	arg01, #392
007c4     09 00 00 FF 
007c8     88 B3 05 F6 | 	mov	arg02, ##5000
007cc     0E B4 C5 F9 | 	decod	arg03, #14
007d0     E8 00 B0 FD | 	call	#_play
007d4                 | '   play(a4,5000,16384)
007d4     B8 B1 05 F6 | 	mov	arg01, #440
007d8     09 00 00 FF 
007dc     88 B3 05 F6 | 	mov	arg02, ##5000
007e0     0E B4 C5 F9 | 	decod	arg03, #14
007e4     D4 00 B0 FD | 	call	#_play
007e8                 | '   play(h4,5000,16384)
007e8     EE B1 05 F6 | 	mov	arg01, #494
007ec     09 00 00 FF 
007f0     88 B3 05 F6 | 	mov	arg02, ##5000
007f4     0E B4 C5 F9 | 	decod	arg03, #14
007f8     C0 00 B0 FD | 	call	#_play
007fc                 | '   play(2*c4,500,16384)
007fc     01 00 00 FF 
00800     0C B0 05 F6 | 	mov	arg01, ##524
00804     F4 B3 05 F6 | 	mov	arg02, #500
00808     0E B4 C5 F9 | 	decod	arg03, #14
0080c     AC 00 B0 FD | 	call	#_play
00810                 | '   play(c4,500,0)
00810     06 B1 05 F6 | 	mov	arg01, #262
00814     F4 B3 05 F6 | 	mov	arg02, #500
00818     00 B4 05 F6 | 	mov	arg03, #0
0081c     9C 00 B0 FD | 	call	#_play
00820                 | '   play(2*c4,500,16384)
00820     01 00 00 FF 
00824     0C B0 05 F6 | 	mov	arg01, ##524
00828     F4 B3 05 F6 | 	mov	arg02, #500
0082c     0E B4 C5 F9 | 	decod	arg03, #14
00830     88 00 B0 FD | 	call	#_play
00834                 | '   play(h4,500,16384)
00834     EE B1 05 F6 | 	mov	arg01, #494
00838     F4 B3 05 F6 | 	mov	arg02, #500
0083c     0E B4 C5 F9 | 	decod	arg03, #14
00840     78 00 B0 FD | 	call	#_play
00844                 | '   play(a4,500,16384)
00844     B8 B1 05 F6 | 	mov	arg01, #440
00848     F4 B3 05 F6 | 	mov	arg02, #500
0084c     0E B4 C5 F9 | 	decod	arg03, #14
00850     68 00 B0 FD | 	call	#_play
00854                 | '   play(g4,500,16384)
00854     88 B1 05 F6 | 	mov	arg01, #392
00858     F4 B3 05 F6 | 	mov	arg02, #500
0085c     0E B4 C5 F9 | 	decod	arg03, #14
00860     58 00 B0 FD | 	call	#_play
00864                 | '   play(f4,500,16384)
00864     5D B1 05 F6 | 	mov	arg01, #349
00868     F4 B3 05 F6 | 	mov	arg02, #500
0086c     0E B4 C5 F9 | 	decod	arg03, #14
00870     48 00 B0 FD | 	call	#_play
00874                 | '   play(e4,500,16384)
00874     4A B1 05 F6 | 	mov	arg01, #330
00878     F4 B3 05 F6 | 	mov	arg02, #500
0087c     0E B4 C5 F9 | 	decod	arg03, #14
00880     38 00 B0 FD | 	call	#_play
00884                 | '   play(d4,500,16384)
00884     26 B1 05 F6 | 	mov	arg01, #294
00888     F4 B3 05 F6 | 	mov	arg02, #500
0088c     0E B4 C5 F9 | 	decod	arg03, #14
00890     28 00 B0 FD | 	call	#_play
00894                 | '   play(c4,500,16384)
00894     06 B1 05 F6 | 	mov	arg01, #262
00898     F4 B3 05 F6 | 	mov	arg02, #500
0089c     0E B4 C5 F9 | 	decod	arg03, #14
008a0     18 00 B0 FD | 	call	#_play
008a4                 | '   play(c4,500,0)
008a4     06 B1 05 F6 | 	mov	arg01, #262
008a8     F4 B3 05 F6 | 	mov	arg02, #500
008ac     00 B4 05 F6 | 	mov	arg03, #0
008b0     08 00 B0 FD | 	call	#_play
008b4     B8 FE 9F FD | 	jmp	#LR__0001
008b8                 | _test_ret
008b8     2D 00 64 FD | 	ret
008bc                 | 
008bc                 | ' 
008bc                 | '  
008bc                 | '  
008bc                 | ' '----------------------------------------------------------------
008bc                 | ' '------------  An alpha test playing procedure ------------------
008bc                 | ' '------------  Plays sine waves in allchannels ------------------
008bc                 | ' '------------  makes a harmonic sound ---------------------------
008bc                 | ' '---------------------------------------------------------------- 
008bc                 | ' 
008bc                 | ' pub play(ff,time,vol) |ilss,ss,ssf,base,iii
008bc                 | _play
008bc     09 5A 05 F6 | 	mov	COUNT_, #9
008c0     B0 00 A0 FD | 	call	#pushregs_
008c4     D8 CC 01 F6 | 	mov	muldivb_, arg01
008c8     D9 B8 01 F6 | 	mov	local01, arg02
008cc     DA BA 01 F6 | 	mov	local02, arg03
008d0                 | ' 
008d0                 | ' ' Test play 
008d0                 | ' 
008d0                 | ' ss:=64
008d0                 | ' ssf:=(ss*3568945)/(ff*2048)
008d0     3A 1B 00 FF 
008d4     31 81 0C FD | 	qmul	#64, ##3568945
008d8     18 CA 61 FD | 	getqx	muldiva_
008dc     0B CC 65 F0 | 	shl	muldivb_, #11
008e0     C6 00 A0 FD | 	call	#divide_
008e4     E6 BC 01 F6 | 	mov	local03, muldivb_
008e8                 | ' 
008e8                 | ' 
008e8                 | ' 
008e8                 | ' base:=@channel1[0]
008e8     D2 BE 01 F6 | 	mov	local04, objptr
008ec                 | ' 
008ec                 | ' repeat iii from 0 to 0
008ec     00 C0 05 F6 | 	mov	local05, #0
008f0     2C F8 9F FE | 	loc	pa,	#(@LR__0003-@LR__0002)
008f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
008f8                 | LR__0002
008f8                 | '   long [base+32*iii]:=0
008f8     DF C2 01 F6 | 	mov	local06, local04
008fc     E0 C4 01 F6 | 	mov	local07, local05
00900     05 C4 65 F0 | 	shl	local07, #5
00904     E2 C2 01 F1 | 	add	local06, local07
00908     E1 00 68 FC | 	wrlong	#0, local06
0090c                 | '   long [base+32*iii+4]:=0 
0090c     DF C2 01 F6 | 	mov	local06, local04
00910     E0 C4 01 F6 | 	mov	local07, local05
00914     05 C4 65 F0 | 	shl	local07, #5
00918     E2 C2 01 F1 | 	add	local06, local07
0091c     04 C2 05 F1 | 	add	local06, #4
00920     E1 00 68 FC | 	wrlong	#0, local06
00924                 | '   long[base+32*iii+12]:=16
00924     DF C2 01 F6 | 	mov	local06, local04
00928     E0 C4 01 F6 | 	mov	local07, local05
0092c     05 C4 65 F0 | 	shl	local07, #5
00930     E2 C2 01 F1 | 	add	local06, local07
00934     0C C2 05 F1 | 	add	local06, #12
00938     E1 20 68 FC | 	wrlong	#16, local06
0093c                 | '   long[base+32*iii+16]:=2048+16
0093c     DF C2 01 F6 | 	mov	local06, local04
00940     E0 C4 01 F6 | 	mov	local07, local05
00944     05 C4 65 F0 | 	shl	local07, #5
00948     E2 C2 01 F1 | 	add	local06, local07
0094c     10 C2 05 F1 | 	add	local06, #16
00950     04 00 80 FF 
00954     E1 20 68 FC | 	wrlong	##2064, local06
00958                 | '   word[base+32*iii+20]:=vol/(iii+1)
00958     E0 CC 01 F6 | 	mov	muldivb_, local05
0095c     01 CC 05 F1 | 	add	muldivb_, #1
00960     DD CA 01 F6 | 	mov	muldiva_, local02
00964     C6 00 A0 FD | 	call	#divide_
00968     DF C6 01 F6 | 	mov	local08, local04
0096c     E0 C8 01 F6 | 	mov	local09, local05
00970     05 C8 65 F0 | 	shl	local09, #5
00974     E4 C6 01 F1 | 	add	local08, local09
00978     14 C6 05 F1 | 	add	local08, #20
0097c     E3 CC 51 FC | 	wrword	muldivb_, local08
00980                 | '   word[base+32*iii+22]:=8192
00980     DF C2 01 F6 | 	mov	local06, local04
00984     E0 C4 01 F6 | 	mov	local07, local05
00988     05 C4 65 F0 | 	shl	local07, #5
0098c     E2 C2 01 F1 | 	add	local06, local07
00990     16 C2 05 F1 | 	add	local06, #22
00994     10 00 80 FF 
00998     E1 00 58 FC | 	wrword	##8192, local06
0099c                 | '   word[base+32*iii+24]:=ssf
0099c     DF C2 01 F6 | 	mov	local06, local04
009a0     E0 C4 01 F6 | 	mov	local07, local05
009a4     05 C4 65 F0 | 	shl	local07, #5
009a8     E2 C2 01 F1 | 	add	local06, local07
009ac     18 C2 05 F1 | 	add	local06, #24
009b0     E1 BC 51 FC | 	wrword	local03, local06
009b4                 | '   word[base+32*iii+26]:=ss*(iii+1)
009b4     E0 C2 01 F6 | 	mov	local06, local05
009b8     01 C2 05 F1 | 	add	local06, #1
009bc     E1 80 08 FD | 	qmul	#64, local06
009c0     18 C4 61 FD | 	getqx	local07
009c4     DF C6 01 F6 | 	mov	local08, local04
009c8     E0 C8 01 F6 | 	mov	local09, local05
009cc     05 C8 65 F0 | 	shl	local09, #5
009d0     E4 C6 01 F1 | 	add	local08, local09
009d4     1A C6 05 F1 | 	add	local08, #26
009d8     E3 C4 51 FC | 	wrword	local07, local08
009dc                 | '   long [base+32*iii+8]:=@sinewave | $C0000000  
009dc     01 00 00 FF 
009e0     00 A9 05 F1 | 	add	ptr__dat__, ##768
009e4     D4 C2 01 F6 | 	mov	local06, ptr__dat__
009e8     3E C2 25 F4 | 	bith	local06, #62
009ec     DF C6 01 F6 | 	mov	local08, local04
009f0     E0 C8 01 F6 | 	mov	local09, local05
009f4     05 C8 65 F0 | 	shl	local09, #5
009f8     E4 C6 01 F1 | 	add	local08, local09
009fc     08 C6 05 F1 | 	add	local08, #8
00a00     E3 C2 61 FC | 	wrlong	local06, local08
00a04     01 C0 05 F1 | 	add	local05, #1
00a08     01 C0 5D F2 | 	cmps	local05, #1 wcz
00a0c     01 00 00 FF 
00a10     00 A9 85 F1 | 	sub	ptr__dat__, ##768
00a14     E0 FE 9F CD |  if_b	jmp	#LR__0002
00a18                 | LR__0003
00a18                 | ' repeat time
00a18     00 B8 0D F2 | 	cmp	local01, #0 wz
00a1c     0C 00 90 AD |  if_e	jmp	#LR__0005
00a20                 | LR__0004
00a20                 | '     waitms(1)
00a20     01 B0 05 F6 | 	mov	arg01, #1
00a24     74 01 B0 FD | 	call	#__system___waitms
00a28     FD B9 6D FB | 	djnz	local01, #LR__0004
00a2c                 | LR__0005
00a2c     AF F0 03 F6 | 	mov	ptra, fp
00a30     BA 00 A0 FD | 	call	#popregs_
00a34                 | _play_ret
00a34     2D 00 64 FD | 	ret
00a38                 | 
00a38                 | ' 
00a38                 | ' 
00a38                 | ' '--------------------------------------------------------------
00a38                 | ' '---------- Init the variables, start the cog. ----------------
00a38                 | ' '--------------------------------------------------------------
00a38                 | ' 
00a38                 | ' pub start() :cog,base | iii
00a38                 | _start
00a38     07 5A 05 F6 | 	mov	COUNT_, #7
00a3c     B0 00 A0 FD | 	call	#pushregs_
00a40                 | ' 
00a40                 | ' base:=@channel1[0]
00a40     D2 B8 01 F6 | 	mov	local01, objptr
00a44                 | ' 
00a44                 | ' repeat iii from 0 to 7
00a44     00 BA 05 F6 | 	mov	local02, #0
00a48     C0 F6 9F FE | 	loc	pa,	#(@LR__0007-@LR__0006)
00a4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
00a50                 | LR__0006
00a50                 | '   long [base+32*iii]:=0
00a50     DC BC 01 F6 | 	mov	local03, local01
00a54     DD BE 01 F6 | 	mov	local04, local02
00a58     05 BE 65 F0 | 	shl	local04, #5
00a5c     DF BC 01 F1 | 	add	local03, local04
00a60     DE 00 68 FC | 	wrlong	#0, local03
00a64                 | '   long [base+32*iii+4]:=0
00a64     DC BC 01 F6 | 	mov	local03, local01
00a68     DD BE 01 F6 | 	mov	local04, local02
00a6c     05 BE 65 F0 | 	shl	local04, #5
00a70     DF BC 01 F1 | 	add	local03, local04
00a74     04 BC 05 F1 | 	add	local03, #4
00a78     DE 00 68 FC | 	wrlong	#0, local03
00a7c                 | '   long[base+32*iii+12]:=0
00a7c     DC BC 01 F6 | 	mov	local03, local01
00a80     DD BE 01 F6 | 	mov	local04, local02
00a84     05 BE 65 F0 | 	shl	local04, #5
00a88     DF BC 01 F1 | 	add	local03, local04
00a8c     0C BC 05 F1 | 	add	local03, #12
00a90     DE 00 68 FC | 	wrlong	#0, local03
00a94                 | '   long[base+32*iii+16]:=2 
00a94     DC BC 01 F6 | 	mov	local03, local01
00a98     DD BE 01 F6 | 	mov	local04, local02
00a9c     05 BE 65 F0 | 	shl	local04, #5
00aa0     DF BC 01 F1 | 	add	local03, local04
00aa4     10 BC 05 F1 | 	add	local03, #16
00aa8     DE 04 68 FC | 	wrlong	#2, local03
00aac                 | '   word[base+32*iii+20]:=0
00aac     DC BC 01 F6 | 	mov	local03, local01
00ab0     DD BE 01 F6 | 	mov	local04, local02
00ab4     05 BE 65 F0 | 	shl	local04, #5
00ab8     DF BC 01 F1 | 	add	local03, local04
00abc     14 BC 05 F1 | 	add	local03, #20
00ac0     DE 00 58 FC | 	wrword	#0, local03
00ac4                 | '   word[base+32*iii+22]:=8192
00ac4     DC BC 01 F6 | 	mov	local03, local01
00ac8     DD BE 01 F6 | 	mov	local04, local02
00acc     05 BE 65 F0 | 	shl	local04, #5
00ad0     DF BC 01 F1 | 	add	local03, local04
00ad4     16 BC 05 F1 | 	add	local03, #22
00ad8     10 00 80 FF 
00adc     DE 00 58 FC | 	wrword	##8192, local03
00ae0                 | '   word[base+32*iii+24]:=100+2*iii
00ae0     DD BE 01 F6 | 	mov	local04, local02
00ae4     01 BE 65 F0 | 	shl	local04, #1
00ae8     64 BC 05 F6 | 	mov	local03, #100
00aec     DF BC 01 F1 | 	add	local03, local04
00af0     DC C0 01 F6 | 	mov	local05, local01
00af4     DD C2 01 F6 | 	mov	local06, local02
00af8     05 C2 65 F0 | 	shl	local06, #5
00afc     E1 C0 01 F1 | 	add	local05, local06
00b00     18 C0 05 F1 | 	add	local05, #24
00b04     E0 BC 51 FC | 	wrword	local03, local05
00b08                 | '   word[base+32*iii+26]:=2
00b08     DC BC 01 F6 | 	mov	local03, local01
00b0c     DD BE 01 F6 | 	mov	local04, local02
00b10     05 BE 65 F0 | 	shl	local04, #5
00b14     DF BC 01 F1 | 	add	local03, local04
00b18     1A BC 05 F1 | 	add	local03, #26
00b1c     DE 04 58 FC | 	wrword	#2, local03
00b20                 | '   long [base+32*iii+8]:=@null | $C0000000
00b20     01 00 00 FF 
00b24     F8 A8 05 F1 | 	add	ptr__dat__, ##760
00b28     D4 BC 01 F6 | 	mov	local03, ptr__dat__
00b2c     3E BC 25 F4 | 	bith	local03, #62
00b30     DC C0 01 F6 | 	mov	local05, local01
00b34     DD C2 01 F6 | 	mov	local06, local02
00b38     05 C2 65 F0 | 	shl	local06, #5
00b3c     E1 C0 01 F1 | 	add	local05, local06
00b40     08 C0 05 F1 | 	add	local05, #8
00b44     E0 BC 61 FC | 	wrlong	local03, local05
00b48     01 BA 05 F1 | 	add	local02, #1
00b4c     08 BA 5D F2 | 	cmps	local02, #8 wcz
00b50     01 00 00 FF 
00b54     F8 A8 85 F1 | 	sub	ptr__dat__, ##760
00b58     F4 FE 9F CD |  if_b	jmp	#LR__0006
00b5c                 | LR__0007
00b5c                 | '   
00b5c                 | ' cog:=coginit(16,@audio,@channel1)
00b5c     D4 B2 01 F6 | 	mov	arg02, ptr__dat__
00b60     D2 B4 01 F6 | 	mov	arg03, objptr
00b64     10 B0 05 F6 | 	mov	arg01, #16
00b68     28 B4 61 FD | 	setq	arg03
00b6c     D9 B0 F1 FC | 	coginit	arg01, arg02 wc
00b70     01 B0 65 C6 |  if_b	neg	arg01, #1
00b74     D8 AC 01 F6 | 	mov	result1, arg01
00b78     D6 C4 01 F6 | 	mov	local07, result1
00b7c                 | ' waitms(100)
00b7c     64 B0 05 F6 | 	mov	arg01, #100
00b80     18 00 B0 FD | 	call	#__system___waitms
00b84                 | ' return cog,base
00b84     DC AE 01 F6 | 	mov	result2, local01
00b88     E2 AC 01 F6 | 	mov	result1, local07
00b8c     AF F0 03 F6 | 	mov	ptra, fp
00b90     BA 00 A0 FD | 	call	#popregs_
00b94                 | _start_ret
00b94     2D 00 64 FD | 	ret
00b98                 | hubexit
00b98     81 00 80 FD | 	jmp	#cogexit
00b9c                 | 
00b9c                 | __system___waitms
00b9c     03 5A 05 F6 | 	mov	COUNT_, #3
00ba0     B0 00 A0 FD | 	call	#pushregs_
00ba4     D8 B8 01 F6 | 	mov	local01, arg01
00ba8     14 BA 05 FB | 	rdlong	local02, #20
00bac     68 F4 9F FE | 	loc	pa,	#(@LR__0009-@LR__0008)
00bb0     93 00 A0 FD | 	call	#FCACHE_LOAD_
00bb4                 | LR__0008
00bb4     01 00 00 FF 
00bb8     E8 B9 5D F2 | 	cmps	local01, ##1000 wcz
00bbc     1F BA 61 1D |  if_a	waitx	local02
00bc0     01 00 00 1F 
00bc4     E8 B9 85 11 |  if_a	sub	local01, ##1000
00bc8     E8 FF 9F 1D |  if_a	jmp	#LR__0008
00bcc                 | LR__0009
00bcc     0C A6 05 F1 | 	add	ptr___system__dat__, #12
00bd0     D3 BC 09 FB | 	rdlong	local03, ptr___system__dat__ wz
00bd4     0C A6 85 F1 | 	sub	ptr___system__dat__, #12
00bd8     20 00 90 5D |  if_ne	jmp	#LR__0010
00bdc     DD CA 01 F6 | 	mov	muldiva_, local02
00be0     01 00 00 FF 
00be4     E8 CD 05 F6 | 	mov	muldivb_, ##1000
00be8     C2 00 A0 FD | 	call	#unsdivide_
00bec     E6 BC 01 F6 | 	mov	local03, muldivb_
00bf0     0C A6 05 F1 | 	add	ptr___system__dat__, #12
00bf4     D3 CC 61 FC | 	wrlong	muldivb_, ptr___system__dat__
00bf8     0C A6 85 F1 | 	sub	ptr___system__dat__, #12
00bfc                 | LR__0010
00bfc     00 B8 5D F2 | 	cmps	local01, #0 wcz
00c00     DE B8 01 1D |  if_a	qmul	local01, local03
00c04     18 B0 61 1D |  if_a	getqx	arg01
00c08     1F B0 61 1D |  if_a	waitx	arg01
00c0c     AF F0 03 F6 | 	mov	ptra, fp
00c10     BA 00 A0 FD | 	call	#popregs_
00c14                 | __system___waitms_ret
00c14     2D 00 64 FD | 	ret
00c18                 | 	alignl
00c18                 | _dat_
00c18                 | 
00c18                 | audio       org     0
00c18     00 F2 07 F6 | 			mov     ptrb,#0
00c1c     08 7A 05 FC |             wrpin   dac,#left       ' Noise dither DACs at clk/90
00c20     08 C8 1C FC |             wxpin   #100,#left
00c24     09 7A 05 FC |             wrpin   dac,#right
00c28     09 C8 1C FC |             wxpin   #100,#right
00c2c     41 90 64 FD |             dirh    #left addpins 1
00c30     20 90 64 FD |             setse1  #%001<<6 + left ' Set the event - DAC empty
00c34     75 E8 07 F6 |             mov     ijmp1,#isr1     ' Init the interrupt
00c38     25 08 64 FD |             setint1 #4              ' Interrupt from DAC empty event
00c3c                 |             
00c3c                 | '---------------------------------------------------------------------------------        
00c3c                 | '----------------- The main loop -------------------------------------------------
00c3c                 | '---------------------------------------------------------------------------------
00c3c                 | 
00c3c     81 04 11 F2 | loop        cmp     time0,a21000000 wc  ' time counter overflow protection
00c40     10 00 90 CD |       if_c  jmp     #loop1
00c44                 |   
00c44     09 4A 05 F6 |             mov     cn,#9
00c48     81 4A 8D F9 | p402        altd    cn,#a21000000
00c4c     80 00 80 F1 |             sub     0-0,a20000000
00c50     FD 4B 6D FB |             djnz    cn,#p402
00c54                 |     
00c54     00 4A 05 F6 | loop1       mov     cn,#0             ' Find the channel to compute
00c58     83 4C 01 F6 |             mov     ct,time1           ' with the lowest next sample time
00c5c     84 4C 39 F3 |             fle     ct,time2 wcz       ' How to size-optimize this???
00c60     01 4A 05 C6 |     if_c    mov     cn,#1
00c64     85 4C 39 F3 |             fle     ct,time3 wcz
00c68     02 4A 05 C6 |     if_c    mov     cn,#2     
00c6c     86 4C 39 F3 |             fle     ct,time4 wcz
00c70     03 4A 05 C6 |     if_c    mov     cn,#3
00c74     87 4C 39 F3 |             fle     ct,time5 wcz
00c78     04 4A 05 C6 |     if_c    mov     cn,#4
00c7c     88 4C 39 F3 |             fle     ct,time6 wcz
00c80     05 4A 05 C6 |     if_c    mov     cn,#5
00c84     89 4C 39 F3 |             fle     ct,time7 wcz
00c88     06 4A 05 C6 |     if_c    mov     cn,#6
00c8c     8A 4C 39 F3 |             fle     ct,time8 wcz
00c90     07 4A 05 C6 |     if_c    mov     cn,#7
00c94                 | 
00c94                 | 
00c94                 | '----------------------------------------------------------------------------------
00c94                 | '------------- Compute channel samples --------------------------------------------
00c94                 | '----------------------------------------------------------------------------------
00c94                 | 
00c94                 | 
00c94     A5 20 01 F6 | p401        mov     channeladd,cn              ' todo: reset channel times to enable proper streamed stereo audio
00c98     05 20 65 F0 |             shl     channeladd,#5
00c9c     90 F0 03 F1 |             add     ptra,channeladd
00ca0                 | 
00ca0     28 0E 64 FD |             setq    #7               
00ca4     00 31 05 FB |             rdlong  pointer0,ptra
00ca8                 |             
00ca8     9D 46 39 F9 |      	    getword apan0,volpan0,#1           ' extract vol,pan,skip and freq from longs 
00cac     9D 44 31 F9 |     	    getword avol0,volpan0,#0
00cb0     9E 42 39 F9 | 	        getword askip0,freqskip0,#1    	    
00cb4     9E 40 31 F9 | 	        getword afreq0,freqskip0,#0
00cb8                 | 
00cb8     83 4A 95 F9 |             alts    cn, #time1
00cbc     00 4E 01 F6 |             mov     dt0,0-0   
00cc0     82 4E 81 F1 |             sub     dt0,time0
00cc4                 | 
00cc4     83 4A 8D F9 |             altd    cn, #time1
00cc8     A0 00 00 F1 |             add     0-0,afreq0  	
00ccc                 | 
00ccc     A1 30 01 F1 |             add     pointer0,askip0
00cd0     9C 30 19 F2 |             cmp     pointer0,lend0 wcz
00cd4     9C 30 81 31 |     if_ge   sub     pointer0,lend0	        
00cd8     9B 30 01 31 |     if_ge   add     pointer0,lstart0       
00cdc     98 24 01 F6 |             mov     qq,pointer0
00ce0     9A 24 01 F1 |             add     qq,sstart0
00ce4                 | 
00ce4     1F 34 0D F4 |             testb   sstart0,#31 wz
00ce8                 | 
00ce8     92 26 C1 5A |     if_nz   rdbyte  spl,qq
00cec     08 26 65 50 |     if_nz   shl     spl,#8
00cf0     92 26 E1 AA |     if_z    rdword  spl,qq
00cf4                 | 
00cf4     A2 26 31 FA |             scas    spl,avol0
00cf8     00 26 01 F6 |             mov     spl,0-0
00cfc                 |  
00cfc     A3 26 31 FA |             scas    spl,apan0
00d00     00 50 01 F6 |             mov     ls0,0-0
00d04                 |  
00d04     AD 4A 8D F9 |             altd    cn,#ls1
00d08     A8 00 00 F6 |             mov     0-0,ls0
00d0c                 |              
00d0c     20 00 00 FF 
00d10     00 24 05 F6 |             mov     qq,##16384
00d14     A3 24 81 F1 |             sub     qq,apan0
00d18     92 26 31 FA |             scas    spl,qq
00d1c     00 52 01 F6 |             mov     rs0, 0-0
00d20                 | 
00d20     B5 4A 8D F9 |             altd    cn,#rs1
00d24     A9 00 00 F6 |             mov     0-0,rs0
00d28                 | 
00d28     A9 32 29 F9 |             setword sample0,rs0,#1
00d2c     A8 32 21 F9 |             setword sample0,ls0,#0
00d30                 |             
00d30                 | 
00d30     1E 34 1D F4 |             bitl   sstart0, #30 wcz            
00d34     00 30 05 A6 |     if_z    mov    pointer0, #0  
00d38     02 35 65 AC |     if_z    wrlong sstart0, ptra[2]
00d3c     28 02 64 FD | p403        setq #1
00d40                 |      
00d40     00 31 65 FC |             wrlong  pointer0,ptra
00d44     90 F0 83 F1 |             sub     ptra, channeladd
00d48     00 00 90 FD |             jmp     #p101
00d4c                 |                        
00d4c                 |             
00d4c                 |           
00d4c                 |             
00d4c                 | '------------------------ Channels end here --------------------       
00d4c                 | 
00d4c                 | ' Now add all channels and put the sample to the buffer    
00d4c                 | 
00d4c                 | 
00d4c     82 48 09 F2 | p101        cmp     oldt0,time0 wz   ' There must not be 2 entries with the same time
00d50     01 22 85 A1 |     if_z    sub     front,#1         ' 
00d54     FF 23 05 A5 |     if_z    and     front,#511     
00d58                 |            
00d58                 |     
00d58     00 58 05 F6 |             mov     rs,#0            ' Mix all channels to rs and ls
00d5c     00 56 05 F6 |             mov     ls,#0
00d60     B5 58 01 F1 |             add     rs,rs1
00d64     B6 58 01 F1 |             add     rs,rs2            'todo: in channel computing, mov rs to oldrs, hrer sub oldrs, abb newrs
00d68     B7 58 01 F1 |             add     rs,rs3
00d6c     B8 58 01 F1 |             add     rs,rs4
00d70     B9 58 01 F1 |             add     rs,rs5
00d74     BA 58 01 F1 |             add     rs,rs6
00d78     BB 58 01 F1 |             add     rs,rs7
00d7c     BC 58 01 F1 |             add     rs,rs8
00d80                 | 
00d80                 |            
00d80     AD 56 01 F1 |             add     ls,ls1
00d84     AE 56 01 F1 |             add     ls,ls2
00d88     AF 56 01 F1 |             add     ls,ls3
00d8c     B0 56 01 F1 |             add     ls,ls4
00d90     B1 56 01 F1 |             add     ls,ls5
00d94     B2 56 01 F1 |             add     ls,ls6
00d98     B3 56 01 F1 |             add     ls,ls7
00d9c     B4 56 01 F1 |             add     ls,ls8
00da0                 | 
00da0                 |  		
00da0     0F 56 E5 F4 |             bitnot  ls,#15            ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
00da4     0F 58 E5 F4 |             bitnot  rs,#15		      ' and these with $FFFF if a filter should be applied
00da8                 | 		    
00da8     AB 58 29 F9 |             setword rs,ls,#1         ' Pack L and R to one long    		
00dac     AC 16 01 F6 |             mov newsample, rs
00db0                 | 
00db0     82 48 01 F6 |             mov     oldt0,time0      ' update global time
00db4     A7 04 01 F1 |             add     time0,dt0    
00db8                 | 
00db8                 |             
00db8                 |  
00db8                 |                                      ' now push dt0 samples to the buffer
00db8     00 4E 0D F2 |             cmp      dt0,#0 wz
00dbc     94 FE 9F AD |     if_z    jmp      #loop1
00dc0     A7 18 01 F6 |             mov      t1,dt0
00dc4                 |   
00dc4     F9 1B 01 F6 | p301        mov     t2,ptrb         ' Check if the buffer is full	
00dc8     01 1A 85 F1 |             sub     t2,#1
00dcc     FF 1B 05 F5 |             and     t2,#511
00dd0     91 1A 19 F2 |             cmp     t2,front wcz
00dd4     EC FF 9F AD |     if_e    jmp     #p301    
00dd8                 |     
00dd8     91 16 31 FC |             wrlut   newsample, front
00ddc     01 22 05 F1 |             add     front,#1
00de0     FF 23 05 F5 |             and     front,#511
00de4     F7 19 6D FB |             djnz    t1,#p301
00de8                 |             
00de8     50 FE 9F FD |             jmp     #loop            'loop
00dec                 | 
00dec                 | '-------------------------------------------------------------------------
00dec                 | '------------------ This is the end of the main loop ---------------------
00dec                 | '-------------------------------------------------------------------------
00dec                 | 
00dec                 | '--------------------------------------------------------------------------
00dec                 | '------ Interrupt service -------------------------------------------------
00dec                 | '------ Output the sample, get the next one if exists ---------------------
00dec                 | '--------------------------------------------------------------------------
00dec                 | 
00dec     08 28 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
00df0     09 2A 25 FC |             wypin   rsample,#right       '4
00df4                 |            
00df4     91 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
00df8     F5 FF 3B AB |     if_e    reti1                        '8/10
00dfc                 | 
00dfc     E1 2D A5 FA |             rdlut   lsnext,ptrb++        '11    else read the sample and its time from LUT
00e00     96 2A 39 F9 |           	getword rsample,lsnext,#1    '13
00e04     96 28 31 F9 |           	getword lsample,lsnext,#0    '15
00e08     F5 FF 3B FB |             reti1                        '17/19 
00e0c                 |           
00e0c                 | '---------------------------------------------------------------------------
00e0c                 | '-------- End of interrupt -------------------------------------------------
00e0c                 | '---------------------------------------------------------------------------    
00e0c                 | 
00e0c                 | 
00e0c                 | '---------------------------------------------------------------------------
00e0c                 | '------- Variables ---------------------------------------------------------
00e0c                 | '---------------------------------------------------------------------------
00e0c                 | 
00e0c                 | ' constants
00e0c                 | 
00e0c     00 00 00 00 | hp long 0
00e10     00 00 00 00 | lp long 0
00e14     00 00 00 00 | bp long 0
00e18     00 00 00 10 | a20000000   long $10000000
00e1c     00 00 00 11 | a21000000   long $11000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
00e20                 | 
00e20                 | ' Time variables
00e20                 | 
00e20     00 00 00 00 | time0       long 0    ' Global sample computing time
00e24     01 00 00 00 | time1       long 1    ' Local channels time
00e28     02 00 00 00 | time2       long 2
00e2c     03 00 00 00 | time3       long 3
00e30     04 00 00 00 | time4       long 4
00e34     05 00 00 00 | time5       long 5
00e38     06 00 00 00 | time6       long 6
00e3c     07 00 00 00 | time7       long 7
00e40     08 00 00 00 | time8       long 8
00e44                 | 
00e44                 | 
00e44                 | 
00e44     00 00 00 00 | newsample long 0
00e48                 | '
00e48     00 00 00 00 | t1 long 0
00e4c     00 00 00 00 | t2 long 0
00e50                 | '
00e50     00 00 00 00 | nrsample long 0
00e54     00 00 00 00 | nlsample long 0
00e58                 | '
00e58     00 00 00 00 | channeladd long 0
00e5c                 | 
00e5c                 | 
00e5c     00 00 00 00 | front       long 0
00e60                 | 
00e60                 | ' temporary variables 
00e60                 | '
00e60     00 00 00 00 | qq          long 0
00e64     00 00 00 00 | spl         long 0
00e68                 | 
00e68                 | ' circular buffer in LUT
00e68                 | 
00e68                 | 
00e68                 | '
00e68                 | 
00e68                 | ' Interrupt ISR variables
00e68                 | 
00e68                 | 
00e68     00 00 00 00 | lsample     long 0
00e6c     00 00 00 00 | rsample     long 0
00e70     00 00 00 00 | lsnext      long 0
00e74     00 00 00 00 | rsnext      long 0 
00e78                 | 
00e78                 | 
00e78     00 00 00 00 | pointer0    long 0
00e7c     00 00 00 00 | sample0     long 0
00e80     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
00e84     00 00 00 00 | lstart0     long 0
00e88     00 00 00 00 | lend0       long 0
00e8c     00 00 00 00 | volpan0     long 0
00e90     00 00 00 00 | freqskip0   long 0
00e94     00 00 00 00 | dummy0      long 0
00e98                 | 
00e98     00 00 00 00 | afreq0      long 0
00e9c     00 00 00 00 | askip0      long 0
00ea0     00 00 00 00 | avol0       long 0
00ea4     00 00 00 00 | apan0       long 0
00ea8                 | 
00ea8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
00eac     00 00 00 00 | cn          long 0
00eb0     00 00 00 00 | ct          long 0
00eb4     00 00 00 00 | dt0         long 0
00eb8                 | 
00eb8                 | ' Samples
00eb8     00 00 00 00 | ls0         long 0
00ebc     00 00 00 00 | rs0         long 0
00ec0     00 00 00 00 | channel     long 0
00ec4     00 00 00 00 | ls          long 0    ' Global sample variable
00ec8     00 00 00 00 | rs          long 0
00ecc                 | 
00ecc     00 00 00 00 | ls1         long 0    ' Channel samples
00ed0     00 00 00 00 | ls2         long 0
00ed4     00 00 00 00 | ls3         long 0
00ed8     00 00 00 00 | ls4         long 0
00edc     00 00 00 00 | ls5         long 0
00ee0     00 00 00 00 | ls6         long 0
00ee4     00 00 00 00 | ls7         long 0
00ee8     00 00 00 00 | ls8         long 0
00eec     00 00 00 00 | rs1         long 0
00ef0     00 00 00 00 | rs2         long 0
00ef4     00 00 00 00 | rs3         long 0
00ef8     00 00 00 00 | rs4         long 0
00efc     00 00 00 00 | rs5         long 0
00f00     00 00 00 00 | rs6         long 0
00f04     00 00 00 00 | rs7         long 0
00f08     00 00 00 00 | rs8         long 0
00f0c                 | 
00f0c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
00f10                 | 
00f10     00 00 00 00 
00f14     00 00 00 00 | null  			long 	0,0           ' for channel reset
00f18     73 32 00 04 
00f1c     00 00 10 00 
00f20     00 00 00 00 
00f24     00 00 00 00 | sinewave 		file 	"sinus.s2"    ' for testing
00f28     00 00 C9 00 
00f2c     92 01 5B 02 
00f30     24 03 ED 03 
00f34     B6 04 7F 05 | 	byte	$00, $00, $c9, $00, $92, $01, $5b, $02, $24, $03, $ed, $03, $b6, $04, $7f, $05
00f38     48 06 11 07 
00f3c     D9 07 A2 08 
00f40     6A 09 33 0A 
00f44     FB 0A C4 0B | 	byte	$48, $06, $11, $07, $d9, $07, $a2, $08, $6a, $09, $33, $0a, $fb, $0a, $c4, $0b
00f48     8C 0C 54 0D 
00f4c     1C 0E E3 0E 
00f50     AB 0F 72 10 
00f54     3A 11 01 12 | 	byte	$8c, $0c, $54, $0d, $1c, $0e, $e3, $0e, $ab, $0f, $72, $10, $3a, $11, $01, $12
00f58     C8 12 8F 13 
00f5c     55 14 1C 15 
00f60     E2 15 A8 16 
00f64     6E 17 33 18 | 	byte	$c8, $12, $8f, $13, $55, $14, $1c, $15, $e2, $15, $a8, $16, $6e, $17, $33, $18
00f68     F9 18 BE 19 
00f6c     82 1A 47 1B 
00f70     0B 1C CF 1C 
00f74     93 1D 57 1E | 	byte	$f9, $18, $be, $19, $82, $1a, $47, $1b, $0b, $1c, $cf, $1c, $93, $1d, $57, $1e
00f78     1A 1F DD 1F 
00f7c     9F 20 61 21 
00f80     23 22 E5 22 
00f84     A6 23 67 24 | 	byte	$1a, $1f, $dd, $1f, $9f, $20, $61, $21, $23, $22, $e5, $22, $a6, $23, $67, $24
00f88     28 25 E8 25 
00f8c     A8 26 67 27 
00f90     26 28 E5 28 
00f94     A3 29 61 2A | 	byte	$28, $25, $e8, $25, $a8, $26, $67, $27, $26, $28, $e5, $28, $a3, $29, $61, $2a
00f98     1F 2B DC 2B 
00f9c     99 2C 55 2D 
00fa0     11 2E CC 2E 
00fa4     87 2F 41 30 | 	byte	$1f, $2b, $dc, $2b, $99, $2c, $55, $2d, $11, $2e, $cc, $2e, $87, $2f, $41, $30
00fa8     FB 30 B5 31 
00fac     6E 32 26 33 
00fb0     DF 33 96 34 
00fb4     4D 35 04 36 | 	byte	$fb, $30, $b5, $31, $6e, $32, $26, $33, $df, $33, $96, $34, $4d, $35, $04, $36
00fb8     BA 36 6F 37 
00fbc     24 38 D9 38 
00fc0     8C 39 40 3A 
00fc4     F2 3A A5 3B | 	byte	$ba, $36, $6f, $37, $24, $38, $d9, $38, $8c, $39, $40, $3a, $f2, $3a, $a5, $3b
00fc8     56 3C 07 3D 
00fcc     B8 3D 68 3E 
00fd0     17 3F C5 3F 
00fd4     73 40 21 41 | 	byte	$56, $3c, $07, $3d, $b8, $3d, $68, $3e, $17, $3f, $c5, $3f, $73, $40, $21, $41
00fd8     CE 41 7A 42 
00fdc     25 43 D0 43 
00fe0     7A 44 24 45 
00fe4     CD 45 75 46 | 	byte	$ce, $41, $7a, $42, $25, $43, $d0, $43, $7a, $44, $24, $45, $cd, $45, $75, $46
00fe8     1C 47 C3 47 
00fec     69 48 0F 49 
00ff0     B4 49 58 4A 
00ff4     FB 4A 9D 4B | 	byte	$1c, $47, $c3, $47, $69, $48, $0f, $49, $b4, $49, $58, $4a, $fb, $4a, $9d, $4b
00ff8     3F 4C E0 4C 
00ffc     81 4D 20 4E 
01000     BF 4E 5D 4F 
01004     FB 4F 97 50 | 	byte	$3f, $4c, $e0, $4c, $81, $4d, $20, $4e, $bf, $4e, $5d, $4f, $fb, $4f, $97, $50
01008     33 51 CE 51 
0100c     68 52 02 53 
01010     9B 53 32 54 
01014     C9 54 60 55 | 	byte	$33, $51, $ce, $51, $68, $52, $02, $53, $9b, $53, $32, $54, $c9, $54, $60, $55
01018     F5 55 8A 56 
0101c     1D 57 B0 57 
01020     42 58 D3 58 
01024     64 59 F3 59 | 	byte	$f5, $55, $8a, $56, $1d, $57, $b0, $57, $42, $58, $d3, $58, $64, $59, $f3, $59
01028     82 5A 0F 5B 
0102c     9C 5B 28 5C 
01030     B3 5C 3E 5D 
01034     C7 5D 4F 5E | 	byte	$82, $5a, $0f, $5b, $9c, $5b, $28, $5c, $b3, $5c, $3e, $5d, $c7, $5d, $4f, $5e
01038     D7 5E 5D 5F 
0103c     E3 5F 68 60 
01040     EB 60 6E 61 
01044     F0 61 71 62 | 	byte	$d7, $5e, $5d, $5f, $e3, $5f, $68, $60, $eb, $60, $6e, $61, $f0, $61, $71, $62
01048     F1 62 70 63 
0104c     EE 63 6C 64 
01050     E8 64 63 65 
01054     DD 65 56 66 | 	byte	$f1, $62, $70, $63, $ee, $63, $6c, $64, $e8, $64, $63, $65, $dd, $65, $56, $66
01058     CF 66 46 67 
0105c     BC 67 32 68 
01060     A6 68 19 69 
01064     8B 69 FD 69 | 	byte	$cf, $66, $46, $67, $bc, $67, $32, $68, $a6, $68, $19, $69, $8b, $69, $fd, $69
01068     6D 6A DC 6A 
0106c     4A 6B B7 6B 
01070     23 6C 8E 6C 
01074     F8 6C 61 6D | 	byte	$6d, $6a, $dc, $6a, $4a, $6b, $b7, $6b, $23, $6c, $8e, $6c, $f8, $6c, $61, $6d
01078     C9 6D 30 6E 
0107c     96 6E FB 6E 
01080     5E 6F C1 6F 
01084     22 70 83 70 | 	byte	$c9, $6d, $30, $6e, $96, $6e, $fb, $6e, $5e, $6f, $c1, $6f, $22, $70, $83, $70
01088     E2 70 40 71 
0108c     9D 71 F9 71 
01090     54 72 AE 72 
01094     07 73 5E 73 | 	byte	$e2, $70, $40, $71, $9d, $71, $f9, $71, $54, $72, $ae, $72, $07, $73, $5e, $73
01098     B5 73 0A 74 
0109c     5F 74 B2 74 
010a0     04 75 55 75 
010a4     A5 75 F3 75 | 	byte	$b5, $73, $0a, $74, $5f, $74, $b2, $74, $04, $75, $55, $75, $a5, $75, $f3, $75
010a8     41 76 8D 76 
010ac     D8 76 22 77 
010b0     6B 77 B3 77 
010b4     FA 77 3F 78 | 	byte	$41, $76, $8d, $76, $d8, $76, $22, $77, $6b, $77, $b3, $77, $fa, $77, $3f, $78
010b8     84 78 C7 78 
010bc     09 79 4A 79 
010c0     89 79 C8 79 
010c4     05 7A 41 7A | 	byte	$84, $78, $c7, $78, $09, $79, $4a, $79, $89, $79, $c8, $79, $05, $7a, $41, $7a
010c8     7C 7A B6 7A 
010cc     EE 7A 26 7B 
010d0     5C 7B 91 7B 
010d4     C5 7B F8 7B | 	byte	$7c, $7a, $b6, $7a, $ee, $7a, $26, $7b, $5c, $7b, $91, $7b, $c5, $7b, $f8, $7b
010d8     29 7C 59 7C 
010dc     88 7C B6 7C 
010e0     E3 7C 0E 7D 
010e4     39 7D 62 7D | 	byte	$29, $7c, $59, $7c, $88, $7c, $b6, $7c, $e3, $7c, $0e, $7d, $39, $7d, $62, $7d
010e8     89 7D B0 7D 
010ec     D5 7D FA 7D 
010f0     1D 7E 3E 7E 
010f4     5F 7E 7E 7E | 	byte	$89, $7d, $b0, $7d, $d5, $7d, $fa, $7d, $1d, $7e, $3e, $7e, $5f, $7e, $7e, $7e
010f8     9C 7E B9 7E 
010fc     D5 7E EF 7E 
01100     09 7F 21 7F 
01104     37 7F 4D 7F | 	byte	$9c, $7e, $b9, $7e, $d5, $7e, $ef, $7e, $09, $7f, $21, $7f, $37, $7f, $4d, $7f
01108     61 7F 74 7F 
0110c     86 7F 97 7F 
01110     A6 7F B4 7F 
01114     C1 7F CD 7F | 	byte	$61, $7f, $74, $7f, $86, $7f, $97, $7f, $a6, $7f, $b4, $7f, $c1, $7f, $cd, $7f
01118     D8 7F E1 7F 
0111c     E9 7F F0 7F 
01120     F5 7F F9 7F 
01124     FD 7F FE 7F | 	byte	$d8, $7f, $e1, $7f, $e9, $7f, $f0, $7f, $f5, $7f, $f9, $7f, $fd, $7f, $fe, $7f
01128     FF 7F FE 7F 
0112c     FD 7F F9 7F 
01130     F5 7F F0 7F 
01134     E9 7F E1 7F | 	byte	$ff, $7f, $fe, $7f, $fd, $7f, $f9, $7f, $f5, $7f, $f0, $7f, $e9, $7f, $e1, $7f
01138     D8 7F CD 7F 
0113c     C1 7F B4 7F 
01140     A6 7F 97 7F 
01144     86 7F 74 7F | 	byte	$d8, $7f, $cd, $7f, $c1, $7f, $b4, $7f, $a6, $7f, $97, $7f, $86, $7f, $74, $7f
01148     61 7F 4D 7F 
0114c     37 7F 21 7F 
01150     09 7F EF 7E 
01154     D5 7E B9 7E | 	byte	$61, $7f, $4d, $7f, $37, $7f, $21, $7f, $09, $7f, $ef, $7e, $d5, $7e, $b9, $7e
01158     9C 7E 7E 7E 
0115c     5F 7E 3E 7E 
01160     1D 7E FA 7D 
01164     D5 7D B0 7D | 	byte	$9c, $7e, $7e, $7e, $5f, $7e, $3e, $7e, $1d, $7e, $fa, $7d, $d5, $7d, $b0, $7d
01168     89 7D 62 7D 
0116c     39 7D 0E 7D 
01170     E3 7C B6 7C 
01174     88 7C 59 7C | 	byte	$89, $7d, $62, $7d, $39, $7d, $0e, $7d, $e3, $7c, $b6, $7c, $88, $7c, $59, $7c
01178     29 7C F8 7B 
0117c     C5 7B 91 7B 
01180     5C 7B 26 7B 
01184     EE 7A B6 7A | 	byte	$29, $7c, $f8, $7b, $c5, $7b, $91, $7b, $5c, $7b, $26, $7b, $ee, $7a, $b6, $7a
01188     7C 7A 41 7A 
0118c     05 7A C8 79 
01190     89 79 4A 79 
01194     09 79 C7 78 | 	byte	$7c, $7a, $41, $7a, $05, $7a, $c8, $79, $89, $79, $4a, $79, $09, $79, $c7, $78
01198     84 78 3F 78 
0119c     FA 77 B3 77 
011a0     6B 77 22 77 
011a4     D8 76 8D 76 | 	byte	$84, $78, $3f, $78, $fa, $77, $b3, $77, $6b, $77, $22, $77, $d8, $76, $8d, $76
011a8     41 76 F3 75 
011ac     A5 75 55 75 
011b0     04 75 B2 74 
011b4     5F 74 0A 74 | 	byte	$41, $76, $f3, $75, $a5, $75, $55, $75, $04, $75, $b2, $74, $5f, $74, $0a, $74
011b8     B5 73 5E 73 
011bc     07 73 AE 72 
011c0     54 72 F9 71 
011c4     9D 71 40 71 | 	byte	$b5, $73, $5e, $73, $07, $73, $ae, $72, $54, $72, $f9, $71, $9d, $71, $40, $71
011c8     E2 70 83 70 
011cc     22 70 C1 6F 
011d0     5E 6F FB 6E 
011d4     96 6E 30 6E | 	byte	$e2, $70, $83, $70, $22, $70, $c1, $6f, $5e, $6f, $fb, $6e, $96, $6e, $30, $6e
011d8     C9 6D 61 6D 
011dc     F8 6C 8E 6C 
011e0     23 6C B7 6B 
011e4     4A 6B DC 6A | 	byte	$c9, $6d, $61, $6d, $f8, $6c, $8e, $6c, $23, $6c, $b7, $6b, $4a, $6b, $dc, $6a
011e8     6D 6A FD 69 
011ec     8B 69 19 69 
011f0     A6 68 32 68 
011f4     BC 67 46 67 | 	byte	$6d, $6a, $fd, $69, $8b, $69, $19, $69, $a6, $68, $32, $68, $bc, $67, $46, $67
011f8     CF 66 56 66 
011fc     DD 65 63 65 
01200     E8 64 6C 64 
01204     EE 63 70 63 | 	byte	$cf, $66, $56, $66, $dd, $65, $63, $65, $e8, $64, $6c, $64, $ee, $63, $70, $63
01208     F1 62 71 62 
0120c     F0 61 6E 61 
01210     EB 60 68 60 
01214     E3 5F 5D 5F | 	byte	$f1, $62, $71, $62, $f0, $61, $6e, $61, $eb, $60, $68, $60, $e3, $5f, $5d, $5f
01218     D7 5E 4F 5E 
0121c     C7 5D 3E 5D 
01220     B3 5C 28 5C 
01224     9C 5B 0F 5B | 	byte	$d7, $5e, $4f, $5e, $c7, $5d, $3e, $5d, $b3, $5c, $28, $5c, $9c, $5b, $0f, $5b
01228     82 5A F3 59 
0122c     64 59 D3 58 
01230     42 58 B0 57 
01234     1D 57 8A 56 | 	byte	$82, $5a, $f3, $59, $64, $59, $d3, $58, $42, $58, $b0, $57, $1d, $57, $8a, $56
01238     F5 55 60 55 
0123c     C9 54 32 54 
01240     9B 53 02 53 
01244     68 52 CE 51 | 	byte	$f5, $55, $60, $55, $c9, $54, $32, $54, $9b, $53, $02, $53, $68, $52, $ce, $51
01248     33 51 97 50 
0124c     FB 4F 5D 4F 
01250     BF 4E 20 4E 
01254     81 4D E0 4C | 	byte	$33, $51, $97, $50, $fb, $4f, $5d, $4f, $bf, $4e, $20, $4e, $81, $4d, $e0, $4c
01258     3F 4C 9D 4B 
0125c     FB 4A 58 4A 
01260     B4 49 0F 49 
01264     69 48 C3 47 | 	byte	$3f, $4c, $9d, $4b, $fb, $4a, $58, $4a, $b4, $49, $0f, $49, $69, $48, $c3, $47
01268     1C 47 75 46 
0126c     CD 45 24 45 
01270     7A 44 D0 43 
01274     25 43 7A 42 | 	byte	$1c, $47, $75, $46, $cd, $45, $24, $45, $7a, $44, $d0, $43, $25, $43, $7a, $42
01278     CE 41 21 41 
0127c     73 40 C5 3F 
01280     17 3F 68 3E 
01284     B8 3D 07 3D | 	byte	$ce, $41, $21, $41, $73, $40, $c5, $3f, $17, $3f, $68, $3e, $b8, $3d, $07, $3d
01288     56 3C A5 3B 
0128c     F2 3A 40 3A 
01290     8C 39 D9 38 
01294     24 38 6F 37 | 	byte	$56, $3c, $a5, $3b, $f2, $3a, $40, $3a, $8c, $39, $d9, $38, $24, $38, $6f, $37
01298     BA 36 04 36 
0129c     4D 35 96 34 
012a0     DF 33 26 33 
012a4     6E 32 B5 31 | 	byte	$ba, $36, $04, $36, $4d, $35, $96, $34, $df, $33, $26, $33, $6e, $32, $b5, $31
012a8     FB 30 41 30 
012ac     87 2F CC 2E 
012b0     11 2E 55 2D 
012b4     99 2C DC 2B | 	byte	$fb, $30, $41, $30, $87, $2f, $cc, $2e, $11, $2e, $55, $2d, $99, $2c, $dc, $2b
012b8     1F 2B 61 2A 
012bc     A3 29 E5 28 
012c0     26 28 67 27 
012c4     A8 26 E8 25 | 	byte	$1f, $2b, $61, $2a, $a3, $29, $e5, $28, $26, $28, $67, $27, $a8, $26, $e8, $25
012c8     28 25 67 24 
012cc     A6 23 E5 22 
012d0     23 22 61 21 
012d4     9F 20 DD 1F | 	byte	$28, $25, $67, $24, $a6, $23, $e5, $22, $23, $22, $61, $21, $9f, $20, $dd, $1f
012d8     1A 1F 57 1E 
012dc     93 1D CF 1C 
012e0     0B 1C 47 1B 
012e4     82 1A BE 19 | 	byte	$1a, $1f, $57, $1e, $93, $1d, $cf, $1c, $0b, $1c, $47, $1b, $82, $1a, $be, $19
012e8     F9 18 33 18 
012ec     6E 17 A8 16 
012f0     E2 15 1C 15 
012f4     55 14 8F 13 | 	byte	$f9, $18, $33, $18, $6e, $17, $a8, $16, $e2, $15, $1c, $15, $55, $14, $8f, $13
012f8     C8 12 01 12 
012fc     3A 11 72 10 
01300     AB 0F E3 0E 
01304     1C 0E 54 0D | 	byte	$c8, $12, $01, $12, $3a, $11, $72, $10, $ab, $0f, $e3, $0e, $1c, $0e, $54, $0d
01308     8C 0C C4 0B 
0130c     FB 0A 33 0A 
01310     6A 09 A2 08 
01314     D9 07 11 07 | 	byte	$8c, $0c, $c4, $0b, $fb, $0a, $33, $0a, $6a, $09, $a2, $08, $d9, $07, $11, $07
01318     48 06 7F 05 
0131c     B6 04 ED 03 
01320     24 03 5B 02 
01324     92 01 C9 00 | 	byte	$48, $06, $7f, $05, $b6, $04, $ed, $03, $24, $03, $5b, $02, $92, $01, $c9, $00
01328     00 00 37 FF 
0132c     6E FE A5 FD 
01330     DC FC 13 FC 
01334     4A FB 81 FA | 	byte	$00, $00, $37, $ff, $6e, $fe, $a5, $fd, $dc, $fc, $13, $fc, $4a, $fb, $81, $fa
01338     B8 F9 EF F8 
0133c     27 F8 5E F7 
01340     96 F6 CD F5 
01344     05 F5 3C F4 | 	byte	$b8, $f9, $ef, $f8, $27, $f8, $5e, $f7, $96, $f6, $cd, $f5, $05, $f5, $3c, $f4
01348     74 F3 AC F2 
0134c     E4 F1 1D F1 
01350     55 F0 8E EF 
01354     C6 EE FF ED | 	byte	$74, $f3, $ac, $f2, $e4, $f1, $1d, $f1, $55, $f0, $8e, $ef, $c6, $ee, $ff, $ed
01358     38 ED 71 EC 
0135c     AB EB E4 EA 
01360     1E EA 58 E9 
01364     92 E8 CD E7 | 	byte	$38, $ed, $71, $ec, $ab, $eb, $e4, $ea, $1e, $ea, $58, $e9, $92, $e8, $cd, $e7
01368     07 E7 42 E6 
0136c     7E E5 B9 E4 
01370     F5 E3 31 E3 
01374     6D E2 A9 E1 | 	byte	$07, $e7, $42, $e6, $7e, $e5, $b9, $e4, $f5, $e3, $31, $e3, $6d, $e2, $a9, $e1
01378     E6 E0 23 E0 
0137c     61 DF 9F DE 
01380     DD DD 1B DD 
01384     5A DC 99 DB | 	byte	$e6, $e0, $23, $e0, $61, $df, $9f, $de, $dd, $dd, $1b, $dd, $5a, $dc, $99, $db
01388     D8 DA 18 DA 
0138c     58 D9 99 D8 
01390     DA D7 1B D7 
01394     5D D6 9F D5 | 	byte	$d8, $da, $18, $da, $58, $d9, $99, $d8, $da, $d7, $1b, $d7, $5d, $d6, $9f, $d5
01398     E1 D4 24 D4 
0139c     67 D3 AB D2 
013a0     EF D1 34 D1 
013a4     79 D0 BF CF | 	byte	$e1, $d4, $24, $d4, $67, $d3, $ab, $d2, $ef, $d1, $34, $d1, $79, $d0, $bf, $cf
013a8     05 CF 4B CE 
013ac     92 CD DA CC 
013b0     21 CC 6A CB 
013b4     B3 CA FC C9 | 	byte	$05, $cf, $4b, $ce, $92, $cd, $da, $cc, $21, $cc, $6a, $cb, $b3, $ca, $fc, $c9
013b8     46 C9 91 C8 
013bc     DC C7 27 C7 
013c0     74 C6 C0 C5 
013c4     0E C5 5B C4 | 	byte	$46, $c9, $91, $c8, $dc, $c7, $27, $c7, $74, $c6, $c0, $c5, $0e, $c5, $5b, $c4
013c8     AA C3 F9 C2 
013cc     48 C2 98 C1 
013d0     E9 C0 3B C0 
013d4     8D BF DF BE | 	byte	$aa, $c3, $f9, $c2, $48, $c2, $98, $c1, $e9, $c0, $3b, $c0, $8d, $bf, $df, $be
013d8     32 BE 86 BD 
013dc     DB BC 30 BC 
013e0     86 BB DC BA 
013e4     33 BA 8B B9 | 	byte	$32, $be, $86, $bd, $db, $bc, $30, $bc, $86, $bb, $dc, $ba, $33, $ba, $8b, $b9
013e8     E4 B8 3D B8 
013ec     97 B7 F1 B6 
013f0     4C B6 A8 B5 
013f4     05 B5 63 B4 | 	byte	$e4, $b8, $3d, $b8, $97, $b7, $f1, $b6, $4c, $b6, $a8, $b5, $05, $b5, $63, $b4
013f8     C1 B3 20 B3 
013fc     7F B2 E0 B1 
01400     41 B1 A3 B0 
01404     05 B0 69 AF | 	byte	$c1, $b3, $20, $b3, $7f, $b2, $e0, $b1, $41, $b1, $a3, $b0, $05, $b0, $69, $af
01408     CD AE 32 AE 
0140c     98 AD FE AC 
01410     65 AC CE AB 
01414     37 AB A0 AA | 	byte	$cd, $ae, $32, $ae, $98, $ad, $fe, $ac, $65, $ac, $ce, $ab, $37, $ab, $a0, $aa
01418     0B AA 76 A9 
0141c     E3 A8 50 A8 
01420     BE A7 2D A7 
01424     9C A6 0D A6 | 	byte	$0b, $aa, $76, $a9, $e3, $a8, $50, $a8, $be, $a7, $2d, $a7, $9c, $a6, $0d, $a6
01428     7E A5 F1 A4 
0142c     64 A4 D8 A3 
01430     4D A3 C2 A2 
01434     39 A2 B1 A1 | 	byte	$7e, $a5, $f1, $a4, $64, $a4, $d8, $a3, $4d, $a3, $c2, $a2, $39, $a2, $b1, $a1
01438     29 A1 A3 A0 
0143c     1D A0 98 9F 
01440     15 9F 92 9E 
01444     10 9E 8F 9D | 	byte	$29, $a1, $a3, $a0, $1d, $a0, $98, $9f, $15, $9f, $92, $9e, $10, $9e, $8f, $9d
01448     0F 9D 90 9C 
0144c     12 9C 94 9B 
01450     18 9B 9D 9A 
01454     23 9A AA 99 | 	byte	$0f, $9d, $90, $9c, $12, $9c, $94, $9b, $18, $9b, $9d, $9a, $23, $9a, $aa, $99
01458     31 99 BA 98 
0145c     44 98 CE 97 
01460     5A 97 E7 96 
01464     75 96 03 96 | 	byte	$31, $99, $ba, $98, $44, $98, $ce, $97, $5a, $97, $e7, $96, $75, $96, $03, $96
01468     93 95 24 95 
0146c     B6 94 49 94 
01470     DD 93 72 93 
01474     08 93 9F 92 | 	byte	$93, $95, $24, $95, $b6, $94, $49, $94, $dd, $93, $72, $93, $08, $93, $9f, $92
01478     37 92 D0 91 
0147c     6A 91 05 91 
01480     A2 90 3F 90 
01484     DE 8F 7D 8F | 	byte	$37, $92, $d0, $91, $6a, $91, $05, $91, $a2, $90, $3f, $90, $de, $8f, $7d, $8f
01488     1E 8F C0 8E 
0148c     63 8E 07 8E 
01490     AC 8D 52 8D 
01494     F9 8C A2 8C | 	byte	$1e, $8f, $c0, $8e, $63, $8e, $07, $8e, $ac, $8d, $52, $8d, $f9, $8c, $a2, $8c
01498     4B 8C F6 8B 
0149c     A1 8B 4E 8B 
014a0     FC 8A AB 8A 
014a4     5B 8A 0D 8A | 	byte	$4b, $8c, $f6, $8b, $a1, $8b, $4e, $8b, $fc, $8a, $ab, $8a, $5b, $8a, $0d, $8a
014a8     BF 89 73 89 
014ac     28 89 DE 88 
014b0     95 88 4D 88 
014b4     06 88 C1 87 | 	byte	$bf, $89, $73, $89, $28, $89, $de, $88, $95, $88, $4d, $88, $06, $88, $c1, $87
014b8     7C 87 39 87 
014bc     F7 86 B6 86 
014c0     77 86 38 86 
014c4     FB 85 BF 85 | 	byte	$7c, $87, $39, $87, $f7, $86, $b6, $86, $77, $86, $38, $86, $fb, $85, $bf, $85
014c8     84 85 4A 85 
014cc     12 85 DA 84 
014d0     A4 84 6F 84 
014d4     3B 84 08 84 | 	byte	$84, $85, $4a, $85, $12, $85, $da, $84, $a4, $84, $6f, $84, $3b, $84, $08, $84
014d8     D7 83 A7 83 
014dc     78 83 4A 83 
014e0     1D 83 F2 82 
014e4     C7 82 9E 82 | 	byte	$d7, $83, $a7, $83, $78, $83, $4a, $83, $1d, $83, $f2, $82, $c7, $82, $9e, $82
014e8     77 82 50 82 
014ec     2B 82 06 82 
014f0     E3 81 C2 81 
014f4     A1 81 82 81 | 	byte	$77, $82, $50, $82, $2b, $82, $06, $82, $e3, $81, $c2, $81, $a1, $81, $82, $81
014f8     64 81 47 81 
014fc     2B 81 11 81 
01500     F7 80 DF 80 
01504     C9 80 B3 80 | 	byte	$64, $81, $47, $81, $2b, $81, $11, $81, $f7, $80, $df, $80, $c9, $80, $b3, $80
01508     9F 80 8C 80 
0150c     7A 80 69 80 
01510     5A 80 4C 80 
01514     3F 80 33 80 | 	byte	$9f, $80, $8c, $80, $7a, $80, $69, $80, $5a, $80, $4c, $80, $3f, $80, $33, $80
01518     28 80 1F 80 
0151c     17 80 10 80 
01520     0B 80 07 80 
01524     03 80 02 80 | 	byte	$28, $80, $1f, $80, $17, $80, $10, $80, $0b, $80, $07, $80, $03, $80, $02, $80
01528     01 80 02 80 
0152c     03 80 07 80 
01530     0B 80 10 80 
01534     17 80 1F 80 | 	byte	$01, $80, $02, $80, $03, $80, $07, $80, $0b, $80, $10, $80, $17, $80, $1f, $80
01538     28 80 33 80 
0153c     3F 80 4C 80 
01540     5A 80 69 80 
01544     7A 80 8C 80 | 	byte	$28, $80, $33, $80, $3f, $80, $4c, $80, $5a, $80, $69, $80, $7a, $80, $8c, $80
01548     9F 80 B3 80 
0154c     C9 80 DF 80 
01550     F7 80 11 81 
01554     2B 81 47 81 | 	byte	$9f, $80, $b3, $80, $c9, $80, $df, $80, $f7, $80, $11, $81, $2b, $81, $47, $81
01558     64 81 82 81 
0155c     A1 81 C2 81 
01560     E3 81 06 82 
01564     2B 82 50 82 | 	byte	$64, $81, $82, $81, $a1, $81, $c2, $81, $e3, $81, $06, $82, $2b, $82, $50, $82
01568     77 82 9E 82 
0156c     C7 82 F2 82 
01570     1D 83 4A 83 
01574     78 83 A7 83 | 	byte	$77, $82, $9e, $82, $c7, $82, $f2, $82, $1d, $83, $4a, $83, $78, $83, $a7, $83
01578     D7 83 08 84 
0157c     3B 84 6F 84 
01580     A4 84 DA 84 
01584     12 85 4A 85 | 	byte	$d7, $83, $08, $84, $3b, $84, $6f, $84, $a4, $84, $da, $84, $12, $85, $4a, $85
01588     84 85 BF 85 
0158c     FB 85 38 86 
01590     77 86 B6 86 
01594     F7 86 39 87 | 	byte	$84, $85, $bf, $85, $fb, $85, $38, $86, $77, $86, $b6, $86, $f7, $86, $39, $87
01598     7C 87 C1 87 
0159c     06 88 4D 88 
015a0     95 88 DE 88 
015a4     28 89 73 89 | 	byte	$7c, $87, $c1, $87, $06, $88, $4d, $88, $95, $88, $de, $88, $28, $89, $73, $89
015a8     BF 89 0D 8A 
015ac     5B 8A AB 8A 
015b0     FC 8A 4E 8B 
015b4     A1 8B F6 8B | 	byte	$bf, $89, $0d, $8a, $5b, $8a, $ab, $8a, $fc, $8a, $4e, $8b, $a1, $8b, $f6, $8b
015b8     4B 8C A2 8C 
015bc     F9 8C 52 8D 
015c0     AC 8D 07 8E 
015c4     63 8E C0 8E | 	byte	$4b, $8c, $a2, $8c, $f9, $8c, $52, $8d, $ac, $8d, $07, $8e, $63, $8e, $c0, $8e
015c8     1E 8F 7D 8F 
015cc     DE 8F 3F 90 
015d0     A2 90 05 91 
015d4     6A 91 D0 91 | 	byte	$1e, $8f, $7d, $8f, $de, $8f, $3f, $90, $a2, $90, $05, $91, $6a, $91, $d0, $91
015d8     37 92 9F 92 
015dc     08 93 72 93 
015e0     DD 93 49 94 
015e4     B6 94 24 95 | 	byte	$37, $92, $9f, $92, $08, $93, $72, $93, $dd, $93, $49, $94, $b6, $94, $24, $95
015e8     93 95 03 96 
015ec     75 96 E7 96 
015f0     5A 97 CE 97 
015f4     44 98 BA 98 | 	byte	$93, $95, $03, $96, $75, $96, $e7, $96, $5a, $97, $ce, $97, $44, $98, $ba, $98
015f8     31 99 AA 99 
015fc     23 9A 9D 9A 
01600     18 9B 94 9B 
01604     12 9C 90 9C | 	byte	$31, $99, $aa, $99, $23, $9a, $9d, $9a, $18, $9b, $94, $9b, $12, $9c, $90, $9c
01608     0F 9D 8F 9D 
0160c     10 9E 92 9E 
01610     15 9F 98 9F 
01614     1D A0 A3 A0 | 	byte	$0f, $9d, $8f, $9d, $10, $9e, $92, $9e, $15, $9f, $98, $9f, $1d, $a0, $a3, $a0
01618     29 A1 B1 A1 
0161c     39 A2 C2 A2 
01620     4D A3 D8 A3 
01624     64 A4 F1 A4 | 	byte	$29, $a1, $b1, $a1, $39, $a2, $c2, $a2, $4d, $a3, $d8, $a3, $64, $a4, $f1, $a4
01628     7E A5 0D A6 
0162c     9C A6 2D A7 
01630     BE A7 50 A8 
01634     E3 A8 76 A9 | 	byte	$7e, $a5, $0d, $a6, $9c, $a6, $2d, $a7, $be, $a7, $50, $a8, $e3, $a8, $76, $a9
01638     0B AA A0 AA 
0163c     37 AB CE AB 
01640     65 AC FE AC 
01644     98 AD 32 AE | 	byte	$0b, $aa, $a0, $aa, $37, $ab, $ce, $ab, $65, $ac, $fe, $ac, $98, $ad, $32, $ae
01648     CD AE 69 AF 
0164c     05 B0 A3 B0 
01650     41 B1 E0 B1 
01654     7F B2 20 B3 | 	byte	$cd, $ae, $69, $af, $05, $b0, $a3, $b0, $41, $b1, $e0, $b1, $7f, $b2, $20, $b3
01658     C1 B3 63 B4 
0165c     05 B5 A8 B5 
01660     4C B6 F1 B6 
01664     97 B7 3D B8 | 	byte	$c1, $b3, $63, $b4, $05, $b5, $a8, $b5, $4c, $b6, $f1, $b6, $97, $b7, $3d, $b8
01668     E4 B8 8B B9 
0166c     33 BA DC BA 
01670     86 BB 30 BC 
01674     DB BC 86 BD | 	byte	$e4, $b8, $8b, $b9, $33, $ba, $dc, $ba, $86, $bb, $30, $bc, $db, $bc, $86, $bd
01678     32 BE DF BE 
0167c     8D BF 3B C0 
01680     E9 C0 98 C1 
01684     48 C2 F9 C2 | 	byte	$32, $be, $df, $be, $8d, $bf, $3b, $c0, $e9, $c0, $98, $c1, $48, $c2, $f9, $c2
01688     AA C3 5B C4 
0168c     0E C5 C0 C5 
01690     74 C6 27 C7 
01694     DC C7 91 C8 | 	byte	$aa, $c3, $5b, $c4, $0e, $c5, $c0, $c5, $74, $c6, $27, $c7, $dc, $c7, $91, $c8
01698     46 C9 FC C9 
0169c     B3 CA 6A CB 
016a0     21 CC DA CC 
016a4     92 CD 4B CE | 	byte	$46, $c9, $fc, $c9, $b3, $ca, $6a, $cb, $21, $cc, $da, $cc, $92, $cd, $4b, $ce
016a8     05 CF BF CF 
016ac     79 D0 34 D1 
016b0     EF D1 AB D2 
016b4     67 D3 24 D4 | 	byte	$05, $cf, $bf, $cf, $79, $d0, $34, $d1, $ef, $d1, $ab, $d2, $67, $d3, $24, $d4
016b8     E1 D4 9F D5 
016bc     5D D6 1B D7 
016c0     DA D7 99 D8 
016c4     58 D9 18 DA | 	byte	$e1, $d4, $9f, $d5, $5d, $d6, $1b, $d7, $da, $d7, $99, $d8, $58, $d9, $18, $da
016c8     D8 DA 99 DB 
016cc     5A DC 1B DD 
016d0     DD DD 9F DE 
016d4     61 DF 23 E0 | 	byte	$d8, $da, $99, $db, $5a, $dc, $1b, $dd, $dd, $dd, $9f, $de, $61, $df, $23, $e0
016d8     E6 E0 A9 E1 
016dc     6D E2 31 E3 
016e0     F5 E3 B9 E4 
016e4     7E E5 42 E6 | 	byte	$e6, $e0, $a9, $e1, $6d, $e2, $31, $e3, $f5, $e3, $b9, $e4, $7e, $e5, $42, $e6
016e8     07 E7 CD E7 
016ec     92 E8 58 E9 
016f0     1E EA E4 EA 
016f4     AB EB 71 EC | 	byte	$07, $e7, $cd, $e7, $92, $e8, $58, $e9, $1e, $ea, $e4, $ea, $ab, $eb, $71, $ec
016f8     38 ED FF ED 
016fc     C6 EE 8E EF 
01700     55 F0 1D F1 
01704     E4 F1 AC F2 | 	byte	$38, $ed, $ff, $ed, $c6, $ee, $8e, $ef, $55, $f0, $1d, $f1, $e4, $f1, $ac, $f2
01708     74 F3 3C F4 
0170c     05 F5 CD F5 
01710     96 F6 5E F7 
01714     27 F8 EF F8 | 	byte	$74, $f3, $3c, $f4, $05, $f5, $cd, $f5, $96, $f6, $5e, $f7, $27, $f8, $ef, $f8
01718     B8 F9 81 FA 
0171c     4A FB 13 FC 
01720     DC FC A5 FD 
01724     6E FE 37 FF | 	byte	$b8, $f9, $81, $fa, $4a, $fb, $13, $fc, $dc, $fc, $a5, $fd, $6e, $fe, $37, $ff
01728                 | 	alignl
01728                 | __system__dat_
01728     00 00 00 00 
0172c     00 00 00 00 | 	byte	$00[8]
01730     03 00 00 00 
01734     00 00 00 00 
01738     00 00 00 00 
0173c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
01740                 | objmem
01740     00 00 00 00 
      ...             
01858     00 00 00 00 
0185c     00 00 00 00 | 	long	0[72]
01860                 | stackspace
01860     00 00 00 00 | 	long	0[1]
01864 0d8             | 	org	COG_BSS_START
01864 0d8             | arg01
01864 0d8             | 	res	1
01864 0d9             | arg02
01864 0d9             | 	res	1
01864 0da             | arg03
01864 0da             | 	res	1
01864 0db             | arg04
01864 0db             | 	res	1
01864 0dc             | local01
01864 0dc             | 	res	1
01864 0dd             | local02
01864 0dd             | 	res	1
01864 0de             | local03
01864 0de             | 	res	1
01864 0df             | local04
01864 0df             | 	res	1
01864 0e0             | local05
01864 0e0             | 	res	1
01864 0e1             | local06
01864 0e1             | 	res	1
01864 0e2             | local07
01864 0e2             | 	res	1
01864 0e3             | local08
01864 0e3             | 	res	1
01864 0e4             | local09
01864 0e4             | 	res	1
01864 0e5             | muldiva_
01864 0e5             | 	res	1
01864 0e6             | muldivb_
01864 0e6             | 	res	1
01864 0e7             | 	fit	480
01864 0e7             | 
