00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/audio003.p2asm"
00000                 | ' _clkfreq=90*3546895
00000                 | con
00000                 | 	_clkfreq = 319220550
00000                 | ' 
00000                 | ' 
00000                 | ' c4=262
00000                 | 	c4 = 262
00000                 | ' d4=294
00000                 | 	d4 = 294
00000                 | ' e4=330
00000                 | 	e4 = 330
00000                 | ' f4=349
00000                 | 	f4 = 349
00000                 | ' g4=392
00000                 | 	g4 = 392
00000                 | ' a4=440
00000                 | 	a4 = 440
00000                 | ' h4=494
00000                 | 	h4 = 494
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 319215798
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1cb2dfb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 BE 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 DC F0 03 F6 | 	mov	ptra, objptr
00410 003 64 F0 07 F1 | 	add	ptra, #100
00414 004 14 EC 0F FB | 	rdlong	pa, #20 wz
00418 005 E8 01 90 5D |  if_ne	jmp	#skip_clock_set_
0041c 006 00 00 64 FD | 	hubset	#0
00420 007 96 E5 80 FF 
00424 008 00 F0 67 FD | 	hubset	##30092792
00428 009 86 01 80 FF 
0042c 00a 1F 80 66 FD | 	waitx	##200000
00430 00b 96 E5 00 FF 
00434 00c FB ED 07 F6 | 	mov	pa, ##30092795
00438 00d 00 EC 63 FD | 	hubset	pa
0043c 00e 18 EC 67 FC | 	wrlong	pa, #24
00440 00f 6C 83 89 FF 
00444 010 14 6C 6D FC | 	wrlong	##319215798, #20
00448 011 B8 01 90 FD | 	jmp	#skip_clock_set_
0044c 012 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 84 07 A0 FD | 	call	#_test
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 C0 61 FD | 	cogid	arg01
00614 084 03 C0 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 B9 05 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 BF 05 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 C1 05 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 C3 05 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 C5 05 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 C7 05 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D BE 61 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 C4 55 F0 |         shr	arg03, #1 wc
00688 0a1 E0 C2 41 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 C0 05 C1 |  if_c   add	arg01, #1
00690 0a3 00 C2 FD F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 C4 55 F0 |         shr	arg03, #1 wc
00698 0a5 E0 C2 51 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 C0 05 C1 |  if_c   add	arg01, #2
006a0 0a7 E1 C2 29 F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 E0 00 88 FC |         wrfast	#0,arg01
006a8 0a9 00 C4 0D F2 |         cmp	arg03, #0 wz
006ac 0aa E2 02 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 C2 61 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 C9 65 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 C9 05 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd E8 CE 11 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 D0 61 FD |        getqx   muldivb_
00740 0cf 19 CE 61 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 E7 CE 51 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 B6 85 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 E8 D0 59 F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 B6 65 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 B6 D5 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 E7 CE 81 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 B6 D5 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 E8 D0 81 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | 
0076c 0da             | itmp1_
0076c 0da 00 00 00 00 | 	long	0
00770 0db             | itmp2_
00770 0db 00 00 00 00 | 	long	0
00774 0dc             | objptr
00774 0dc 00 0E 00 00 | 	long	@objmem
00778 0dd             | ptr___system__dat__
00778 0dd E8 0D 00 00 | 	long	@__system__dat_
0077c 0de             | ptr__dat__
0077c 0de 08 0C 00 00 | 	long	@_dat_
00780 0df             | result1
00780 0df 00 00 00 00 | 	long	0
00784 0e0             | COG_BSS_START
00784 0e0             | 	fit	480
00784                 | 	orgh
00784                 | hubentry
00784                 | 
00784                 | ' 
00784                 | ' 
00784                 | ' 
00784                 | ' pub test() |q
00784                 | _test
00784                 | ' 
00784                 | ' start(14)
00784                 | ' 
00784                 | ' samplestart:=0
00784     DC 00 68 FC | 	wrlong	#0, objptr
00788                 | ' loopstart:=0
00788     04 B8 05 F1 | 	add	objptr, #4
0078c     DC 00 68 FC | 	wrlong	#0, objptr
00790                 | ' loopend:=0
00790     04 B8 05 F1 | 	add	objptr, #4
00794     DC 00 68 FC | 	wrlong	#0, objptr
00798                 | ' volume:=$4000
00798     04 B8 05 F1 | 	add	objptr, #4
0079c     20 00 80 FF 
007a0     DC 00 68 FC | 	wrlong	##16384, objptr
007a4                 | ' synthfreq:=0
007a4     04 B8 05 F1 | 	add	objptr, #4
007a8     DC 00 68 FC | 	wrlong	#0, objptr
007ac                 | ' cmd:=0
007ac     04 B8 05 F1 | 	add	objptr, #4
007b0     DC 00 68 FC | 	wrlong	#0, objptr
007b4                 | ' pin:=thepin
007b4     4C B8 05 F1 | 	add	objptr, #76
007b8     DC 1C 68 FC | 	wrlong	#14, objptr
007bc     60 B8 85 F1 | 	sub	objptr, #96
007c0                 | ' 'pinstart(pin ,(P_DAC_DITHER_RND | P_DAC_75R_2V | P_OE),90,0)
007c0                 | ' coginit(2,@driver,@samplestart)
007c0     DE C2 01 F6 | 	mov	arg02, ptr__dat__
007c4     DC C4 01 F6 | 	mov	arg03, objptr
007c8     02 C0 05 F6 | 	mov	arg01, #2
007cc     28 C4 61 FD | 	setq	arg03
007d0     E1 C0 F1 FC | 	coginit	arg01, arg02 wc
007d4     01 C0 65 C6 |  if_b	neg	arg01, #1
007d8     E0 BE 01 F6 | 	mov	result1, arg01
007dc                 | ' waitms(10)
007dc     0A C0 05 F6 | 	mov	arg01, #10
007e0     54 03 B0 FD | 	call	#__system___waitms
007e4                 | ' 
007e4                 | ' repeat
007e4                 | LR__0001
007e4                 | '   sawbeep(c4,16384,500)
007e4     06 C1 05 F6 | 	mov	arg01, #262
007e8     0E C2 C5 F9 | 	decod	arg02, #14
007ec     F4 C5 05 F6 | 	mov	arg03, #500
007f0     14 02 B0 FD | 	call	#_sawbeep
007f4                 | '   sawbeep(d4,16384,500)
007f4     26 C1 05 F6 | 	mov	arg01, #294
007f8     0E C2 C5 F9 | 	decod	arg02, #14
007fc     F4 C5 05 F6 | 	mov	arg03, #500
00800     04 02 B0 FD | 	call	#_sawbeep
00804                 | '   sawbeep(e4,16384,500)
00804     4A C1 05 F6 | 	mov	arg01, #330
00808     0E C2 C5 F9 | 	decod	arg02, #14
0080c     F4 C5 05 F6 | 	mov	arg03, #500
00810     F4 01 B0 FD | 	call	#_sawbeep
00814                 | '   sawbeep(f4,16384,500)
00814     5D C1 05 F6 | 	mov	arg01, #349
00818     0E C2 C5 F9 | 	decod	arg02, #14
0081c     F4 C5 05 F6 | 	mov	arg03, #500
00820     E4 01 B0 FD | 	call	#_sawbeep
00824                 | '   sawbeep(g4,16384,500)
00824     88 C1 05 F6 | 	mov	arg01, #392
00828     0E C2 C5 F9 | 	decod	arg02, #14
0082c     F4 C5 05 F6 | 	mov	arg03, #500
00830     D4 01 B0 FD | 	call	#_sawbeep
00834                 | '   sawbeep(a4,16384,500)
00834     B8 C1 05 F6 | 	mov	arg01, #440
00838     0E C2 C5 F9 | 	decod	arg02, #14
0083c     F4 C5 05 F6 | 	mov	arg03, #500
00840     C4 01 B0 FD | 	call	#_sawbeep
00844                 | '   sawbeep(h4,16384,500)
00844     EE C1 05 F6 | 	mov	arg01, #494
00848     0E C2 C5 F9 | 	decod	arg02, #14
0084c     F4 C5 05 F6 | 	mov	arg03, #500
00850     B4 01 B0 FD | 	call	#_sawbeep
00854                 | '   sawbeep(2*c4,16384,500)
00854     01 00 00 FF 
00858     0C C0 05 F6 | 	mov	arg01, ##524
0085c     0E C2 C5 F9 | 	decod	arg02, #14
00860     F4 C5 05 F6 | 	mov	arg03, #500
00864     A0 01 B0 FD | 	call	#_sawbeep
00868                 | ' 
00868                 | ' 
00868                 | '   beep(2*c4,16384,500)
00868     01 00 00 FF 
0086c     0C C0 05 F6 | 	mov	arg01, ##524
00870     0E C2 C5 F9 | 	decod	arg02, #14
00874     F4 C5 05 F6 | 	mov	arg03, #500
00878     FC 00 B0 FD | 	call	#_beep
0087c                 | '   beep(h4,16384,500)
0087c     EE C1 05 F6 | 	mov	arg01, #494
00880     0E C2 C5 F9 | 	decod	arg02, #14
00884     F4 C5 05 F6 | 	mov	arg03, #500
00888     EC 00 B0 FD | 	call	#_beep
0088c                 | '   beep(a4,16384,500)
0088c     B8 C1 05 F6 | 	mov	arg01, #440
00890     0E C2 C5 F9 | 	decod	arg02, #14
00894     F4 C5 05 F6 | 	mov	arg03, #500
00898     DC 00 B0 FD | 	call	#_beep
0089c                 | '   beep(g4,16384,500)
0089c     88 C1 05 F6 | 	mov	arg01, #392
008a0     0E C2 C5 F9 | 	decod	arg02, #14
008a4     F4 C5 05 F6 | 	mov	arg03, #500
008a8     CC 00 B0 FD | 	call	#_beep
008ac                 | '   beep(f4,16384,500)
008ac     5D C1 05 F6 | 	mov	arg01, #349
008b0     0E C2 C5 F9 | 	decod	arg02, #14
008b4     F4 C5 05 F6 | 	mov	arg03, #500
008b8     BC 00 B0 FD | 	call	#_beep
008bc                 | '   beep(e4,16384,500)
008bc     4A C1 05 F6 | 	mov	arg01, #330
008c0     0E C2 C5 F9 | 	decod	arg02, #14
008c4     F4 C5 05 F6 | 	mov	arg03, #500
008c8     AC 00 B0 FD | 	call	#_beep
008cc                 | '   beep(d4,16384,500)
008cc     26 C1 05 F6 | 	mov	arg01, #294
008d0     0E C2 C5 F9 | 	decod	arg02, #14
008d4     F4 C5 05 F6 | 	mov	arg03, #500
008d8     9C 00 B0 FD | 	call	#_beep
008dc                 | '   beep(c4,16384,500)
008dc     06 C1 05 F6 | 	mov	arg01, #262
008e0     0E C2 C5 F9 | 	decod	arg02, #14
008e4     F4 C5 05 F6 | 	mov	arg03, #500
008e8     8C 00 B0 FD | 	call	#_beep
008ec                 | ' 
008ec                 | '   sinebeep(c4>>2,16384,500)
008ec     41 C0 05 F6 | 	mov	arg01, #65
008f0     0E C2 C5 F9 | 	decod	arg02, #14
008f4     F4 C5 05 F6 | 	mov	arg03, #500
008f8     A0 01 B0 FD | 	call	#_sinebeep
008fc                 | '   sinebeep(d4>>2,16384,500)
008fc     49 C0 05 F6 | 	mov	arg01, #73
00900     0E C2 C5 F9 | 	decod	arg02, #14
00904     F4 C5 05 F6 | 	mov	arg03, #500
00908     90 01 B0 FD | 	call	#_sinebeep
0090c                 | '   sinebeep(e4,16384,500)
0090c     4A C1 05 F6 | 	mov	arg01, #330
00910     0E C2 C5 F9 | 	decod	arg02, #14
00914     F4 C5 05 F6 | 	mov	arg03, #500
00918     80 01 B0 FD | 	call	#_sinebeep
0091c                 | '   sinebeep(f4,16384,500)
0091c     5D C1 05 F6 | 	mov	arg01, #349
00920     0E C2 C5 F9 | 	decod	arg02, #14
00924     F4 C5 05 F6 | 	mov	arg03, #500
00928     70 01 B0 FD | 	call	#_sinebeep
0092c                 | '   sinebeep(g4,16384,500)
0092c     88 C1 05 F6 | 	mov	arg01, #392
00930     0E C2 C5 F9 | 	decod	arg02, #14
00934     F4 C5 05 F6 | 	mov	arg03, #500
00938     60 01 B0 FD | 	call	#_sinebeep
0093c                 | '   sinebeep(a4,16384,500)
0093c     B8 C1 05 F6 | 	mov	arg01, #440
00940     0E C2 C5 F9 | 	decod	arg02, #14
00944     F4 C5 05 F6 | 	mov	arg03, #500
00948     50 01 B0 FD | 	call	#_sinebeep
0094c                 | '   sinebeep(h4,16384,500)
0094c     EE C1 05 F6 | 	mov	arg01, #494
00950     0E C2 C5 F9 | 	decod	arg02, #14
00954     F4 C5 05 F6 | 	mov	arg03, #500
00958     40 01 B0 FD | 	call	#_sinebeep
0095c                 | '   sinebeep(2*c4,16384,500)
0095c     01 00 00 FF 
00960     0C C0 05 F6 | 	mov	arg01, ##524
00964     0E C2 C5 F9 | 	decod	arg02, #14
00968     F4 C5 05 F6 | 	mov	arg03, #500
0096c     2C 01 B0 FD | 	call	#_sinebeep
00970     70 FE 9F FD | 	jmp	#LR__0001
00974                 | _test_ret
00974     2D 00 64 FD | 	ret
00978                 | 
00978                 | ' 
00978                 | ' 
00978                 | ' pub beep(freq,vol,time)
00978                 | _beep
00978     01 5A 05 F6 | 	mov	COUNT_, #1
0097c     B0 00 A0 FD | 	call	#pushregs_
00980     E2 C8 01 F6 | 	mov	local01, arg03
00984     01 C0 65 F0 | 	shl	arg01, #1
00988     0F 1B 00 FF 
0098c     0F CF 05 F6 | 	mov	muldiva_, ##3546895
00990     E0 D0 01 F6 | 	mov	muldivb_, arg01
00994     D0 00 A0 FD | 	call	#divide_
00998                 | ' 
00998                 | ' synthfreq:=3546895/(2*freq)
00998     10 B8 05 F1 | 	add	objptr, #16
0099c     DC D0 61 FC | 	wrlong	muldivb_, objptr
009a0                 | ' debug(udec(synthfreq))
009a0                 | ' volume:=vol
009a0     04 B8 85 F1 | 	sub	objptr, #4
009a4     DC C2 61 FC | 	wrlong	arg02, objptr
009a8     0C B8 85 F1 | 	sub	objptr, #12
009ac     AA BD 05 F1 | 	add	ptr__dat__, #426
009b0                 | ' samplestart:=@square
009b0     DC BC 61 FC | 	wrlong	ptr__dat__, objptr
009b4                 | ' loopstart:=0
009b4     04 B8 05 F1 | 	add	objptr, #4
009b8     DC 00 68 FC | 	wrlong	#0, objptr
009bc                 | ' loopend:=2
009bc     04 B8 05 F1 | 	add	objptr, #4
009c0     DC 04 68 FC | 	wrlong	#2, objptr
009c4                 | ' cmd:=1
009c4     01 C0 05 F6 | 	mov	arg01, #1
009c8     0C B8 05 F1 | 	add	objptr, #12
009cc     DC 02 68 FC | 	wrlong	#1, objptr
009d0     14 B8 85 F1 | 	sub	objptr, #20
009d4                 | ' waitus(1)
009d4     AA BD 85 F1 | 	sub	ptr__dat__, #426
009d8     D8 01 B0 FD | 	call	#__system___waitus
009dc                 | ' cmd:=0
009dc     14 B8 05 F1 | 	add	objptr, #20
009e0     DC 00 68 FC | 	wrlong	#0, objptr
009e4     14 B8 85 F1 | 	sub	objptr, #20
009e8                 | ' waitms(time)
009e8     E4 C0 01 F6 | 	mov	arg01, local01
009ec     48 01 B0 FD | 	call	#__system___waitms
009f0                 | ' volume:=0  
009f0     0C B8 05 F1 | 	add	objptr, #12
009f4     DC 00 68 FC | 	wrlong	#0, objptr
009f8     0C B8 85 F1 | 	sub	objptr, #12
009fc     AF F0 03 F6 | 	mov	ptra, fp
00a00     BF 00 A0 FD | 	call	#popregs_
00a04                 | _beep_ret
00a04     2D 00 64 FD | 	ret
00a08                 | 
00a08                 | '   
00a08                 | ' pub sawbeep(freq,vol,time)
00a08                 | _sawbeep
00a08     01 5A 05 F6 | 	mov	COUNT_, #1
00a0c     B0 00 A0 FD | 	call	#pushregs_
00a10     E2 C8 01 F6 | 	mov	local01, arg03
00a14     E0 D0 01 F6 | 	mov	muldivb_, arg01
00a18     03 D0 65 F0 | 	shl	muldivb_, #3
00a1c     E0 D0 01 F1 | 	add	muldivb_, arg01
00a20     0F 1B 00 FF 
00a24     0F CF 05 F6 | 	mov	muldiva_, ##3546895
00a28     D0 00 A0 FD | 	call	#divide_
00a2c                 | ' 
00a2c                 | ' synthfreq:=3546895/(9*freq)
00a2c     10 B8 05 F1 | 	add	objptr, #16
00a30     DC D0 61 FC | 	wrlong	muldivb_, objptr
00a34                 | ' debug(udec(synthfreq))
00a34                 | ' volume:=vol
00a34     04 B8 85 F1 | 	sub	objptr, #4
00a38     DC C2 61 FC | 	wrlong	arg02, objptr
00a3c     0C B8 85 F1 | 	sub	objptr, #12
00a40     98 BD 05 F1 | 	add	ptr__dat__, #408
00a44                 | ' samplestart:=@saw
00a44     DC BC 61 FC | 	wrlong	ptr__dat__, objptr
00a48                 | ' loopstart:=0
00a48     04 B8 05 F1 | 	add	objptr, #4
00a4c     DC 00 68 FC | 	wrlong	#0, objptr
00a50                 | ' loopend:=16
00a50     04 B8 05 F1 | 	add	objptr, #4
00a54     DC 20 68 FC | 	wrlong	#16, objptr
00a58                 | ' cmd:=1
00a58     01 C0 05 F6 | 	mov	arg01, #1
00a5c     0C B8 05 F1 | 	add	objptr, #12
00a60     DC 02 68 FC | 	wrlong	#1, objptr
00a64     14 B8 85 F1 | 	sub	objptr, #20
00a68                 | ' waitus(1)
00a68     98 BD 85 F1 | 	sub	ptr__dat__, #408
00a6c     44 01 B0 FD | 	call	#__system___waitus
00a70                 | ' cmd:=0
00a70     14 B8 05 F1 | 	add	objptr, #20
00a74     DC 00 68 FC | 	wrlong	#0, objptr
00a78     14 B8 85 F1 | 	sub	objptr, #20
00a7c                 | ' waitms(time)
00a7c     E4 C0 01 F6 | 	mov	arg01, local01
00a80     B4 00 B0 FD | 	call	#__system___waitms
00a84                 | ' volume:=0    
00a84     0C B8 05 F1 | 	add	objptr, #12
00a88     DC 00 68 FC | 	wrlong	#0, objptr
00a8c     0C B8 85 F1 | 	sub	objptr, #12
00a90     AF F0 03 F6 | 	mov	ptra, fp
00a94     BF 00 A0 FD | 	call	#popregs_
00a98                 | _sawbeep_ret
00a98     2D 00 64 FD | 	ret
00a9c                 | 
00a9c                 | ' 
00a9c                 | ' pub sinebeep(freq,vol,time)
00a9c                 | _sinebeep
00a9c     01 5A 05 F6 | 	mov	COUNT_, #1
00aa0     B0 00 A0 FD | 	call	#pushregs_
00aa4     E2 C8 01 F6 | 	mov	local01, arg03
00aa8     E0 D0 01 F6 | 	mov	muldivb_, arg01
00aac     01 D0 65 F0 | 	shl	muldivb_, #1
00ab0     E0 D0 01 F1 | 	add	muldivb_, arg01
00ab4     03 D0 65 F0 | 	shl	muldivb_, #3
00ab8     0F 1B 00 FF 
00abc     0F CF 05 F6 | 	mov	muldiva_, ##3546895
00ac0     D0 00 A0 FD | 	call	#divide_
00ac4                 | ' 
00ac4                 | ' synthfreq:=3546895/(24*freq)
00ac4     10 B8 05 F1 | 	add	objptr, #16
00ac8     DC D0 61 FC | 	wrlong	muldivb_, objptr
00acc                 | ' debug(udec(synthfreq))
00acc                 | ' volume:=vol
00acc     04 B8 85 F1 | 	sub	objptr, #4
00ad0     DC C2 61 FC | 	wrlong	arg02, objptr
00ad4     0C B8 85 F1 | 	sub	objptr, #12
00ad8     AE BD 05 F1 | 	add	ptr__dat__, #430
00adc                 | ' samplestart:=@sine
00adc     DC BC 61 FC | 	wrlong	ptr__dat__, objptr
00ae0                 | ' loopstart:=0
00ae0     04 B8 05 F1 | 	add	objptr, #4
00ae4     DC 00 68 FC | 	wrlong	#0, objptr
00ae8                 | ' loopend:=46
00ae8     04 B8 05 F1 | 	add	objptr, #4
00aec     DC 5C 68 FC | 	wrlong	#46, objptr
00af0                 | ' cmd:=1
00af0     01 C0 05 F6 | 	mov	arg01, #1
00af4     0C B8 05 F1 | 	add	objptr, #12
00af8     DC 02 68 FC | 	wrlong	#1, objptr
00afc     14 B8 85 F1 | 	sub	objptr, #20
00b00                 | ' waitus(1)
00b00     AE BD 85 F1 | 	sub	ptr__dat__, #430
00b04     AC 00 B0 FD | 	call	#__system___waitus
00b08                 | ' cmd:=0
00b08     14 B8 05 F1 | 	add	objptr, #20
00b0c     DC 00 68 FC | 	wrlong	#0, objptr
00b10     14 B8 85 F1 | 	sub	objptr, #20
00b14                 | ' waitms(time)
00b14     E4 C0 01 F6 | 	mov	arg01, local01
00b18     1C 00 B0 FD | 	call	#__system___waitms
00b1c                 | ' volume:=0   
00b1c     0C B8 05 F1 | 	add	objptr, #12
00b20     DC 00 68 FC | 	wrlong	#0, objptr
00b24     0C B8 85 F1 | 	sub	objptr, #12
00b28     AF F0 03 F6 | 	mov	ptra, fp
00b2c     BF 00 A0 FD | 	call	#popregs_
00b30                 | _sinebeep_ret
00b30     2D 00 64 FD | 	ret
00b34                 | hubexit
00b34     81 00 80 FD | 	jmp	#cogexit
00b38                 | 
00b38                 | __system___waitms
00b38     03 5A 05 F6 | 	mov	COUNT_, #3
00b3c     B0 00 A0 FD | 	call	#pushregs_
00b40     E0 C8 01 F6 | 	mov	local01, arg01
00b44     14 CA 05 FB | 	rdlong	local02, #20
00b48     CC F4 9F FE | 	loc	pa,	#(@LR__0003-@LR__0002)
00b4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
00b50                 | LR__0002
00b50     01 00 00 FF 
00b54     E8 C9 5D F2 | 	cmps	local01, ##1000 wcz
00b58     1F CA 61 1D |  if_a	waitx	local02
00b5c     01 00 00 1F 
00b60     E8 C9 85 11 |  if_a	sub	local01, ##1000
00b64     E8 FF 9F 1D |  if_a	jmp	#LR__0002
00b68                 | LR__0003
00b68     0C BA 05 F1 | 	add	ptr___system__dat__, #12
00b6c     DD CC 09 FB | 	rdlong	local03, ptr___system__dat__ wz
00b70     0C BA 85 F1 | 	sub	ptr___system__dat__, #12
00b74     20 00 90 5D |  if_ne	jmp	#LR__0004
00b78     E5 CE 01 F6 | 	mov	muldiva_, local02
00b7c     01 00 00 FF 
00b80     E8 D1 05 F6 | 	mov	muldivb_, ##1000
00b84     CC 00 A0 FD | 	call	#unsdivide_
00b88     E8 CC 01 F6 | 	mov	local03, muldivb_
00b8c     0C BA 05 F1 | 	add	ptr___system__dat__, #12
00b90     DD D0 61 FC | 	wrlong	muldivb_, ptr___system__dat__
00b94     0C BA 85 F1 | 	sub	ptr___system__dat__, #12
00b98                 | LR__0004
00b98     00 C8 5D F2 | 	cmps	local01, #0 wcz
00b9c     E6 C8 01 1D |  if_a	qmul	local01, local03
00ba0     18 C0 61 1D |  if_a	getqx	arg01
00ba4     1F C0 61 1D |  if_a	waitx	arg01
00ba8     AF F0 03 F6 | 	mov	ptra, fp
00bac     BF 00 A0 FD | 	call	#popregs_
00bb0                 | __system___waitms_ret
00bb0     2D 00 64 FD | 	ret
00bb4                 | 
00bb4                 | __system___waitus
00bb4     02 5A 05 F6 | 	mov	COUNT_, #2
00bb8     B0 00 A0 FD | 	call	#pushregs_
00bbc     E0 C8 01 F6 | 	mov	local01, arg01
00bc0     10 BA 05 F1 | 	add	ptr___system__dat__, #16
00bc4     DD CA 09 FB | 	rdlong	local02, ptr___system__dat__ wz
00bc8     10 BA 85 F1 | 	sub	ptr___system__dat__, #16
00bcc     20 00 90 5D |  if_ne	jmp	#LR__0005
00bd0     14 CE 05 FB | 	rdlong	muldiva_, #20
00bd4     A1 07 00 FF 
00bd8     40 D0 05 F6 | 	mov	muldivb_, ##1000000
00bdc     CC 00 A0 FD | 	call	#unsdivide_
00be0     E8 CA 01 F6 | 	mov	local02, muldivb_
00be4     10 BA 05 F1 | 	add	ptr___system__dat__, #16
00be8     DD D0 61 FC | 	wrlong	muldivb_, ptr___system__dat__
00bec     10 BA 85 F1 | 	sub	ptr___system__dat__, #16
00bf0                 | LR__0005
00bf0     E5 C8 01 FD | 	qmul	local01, local02
00bf4     18 C0 61 FD | 	getqx	arg01
00bf8     1F C0 61 FD | 	waitx	arg01
00bfc     AF F0 03 F6 | 	mov	ptra, fp
00c00     BF 00 A0 FD | 	call	#popregs_
00c04                 | __system___waitus_ret
00c04     2D 00 64 FD | 	ret
00c08                 | 	alignl
00c08                 | _dat_
00c08                 | 
00c08                 | driver 			org 0
00c08                 | 
00c08     28 30 64 FD |         		setq #24
00c0c     00 77 04 FB |         		rdlong  sstart,ptra 
00c10                 |         		
00c10     53 B6 00 F6 |              	mov spin2,spin
00c14     01 B6 04 F1 |          		add spin2,#1
00c18                 | 
00c18     50 A6 60 FD |         		fltl spin 
00c1c     50 B6 60 FD |         		fltl spin2
00c20                 |         		
00c20     80 0B 80 FF 
00c24     53 88 08 FC |         		wrpin ##(P_DAC_DITHER_RND | P_DAC_75R_2V | P_OE), spin 
00c28     53 B4 18 FC |           		wxpin #90, spin 
00c2c     80 0B 80 FF 
00c30     5B 88 08 FC |        	    	wrpin ##(P_DAC_DITHER_RND | P_DAC_75R_2V | P_OE), spin2 
00c34     5B B4 18 FC |           		wxpin #90, spin2
00c38                 |        		 
00c38     41 A6 60 FD |         		dirh spin 
00c3c     41 B6 60 FD |        	        dirh spin2
00c40                 |        	    
00c40     40 A6 04 F1 |            		add spin,#%1_000000
00c44     20 A6 60 FD |         		setse1 spin
00c48     40 A6 84 F1 |         		sub spin,#%1_000000
00c4c                 |         		
00c4c     F8 BD 00 F6 |         		mov ptra2,ptra
00c50     00 BC 04 F1 |         		add ptra2,#0
00c54     F8 BF 00 F6 |         		mov ptra3,ptra
00c58     00 BE 04 F1 |         		add ptra3,#0
00c5c     F8 C1 00 F6 |         		mov ptra4,ptra
00c60     00 C0 04 F1 |         		add ptra4,#0
00c64                 |         		
00c64                 |         		
00c64     32 C2 60 FD | loop            skipf skippattern
00c68                 | 			
00c68     28 0A 64 FD |                 setq #5
00c6c     00 77 04 FB |         		rdlong sstart,ptra
00c70     54 BA 70 FC |                 rdfast d31,ptr	
00c74     63 C2 00 F6 |                 mov skippattern,skip2
00c78                 |                 
00c78     00 00 00 00 |                 nop
00c7c     00 00 00 00 |          		nop
00c80     54 BA 70 FC |                 rdfast d31,ptr	
00c84     64 C2 00 F6 |                 mov skippattern,skip3
00c88                 | 
00c88     00 00 00 00 |                 nop
00c8c     00 00 00 00 |         		nop
00c90     54 BA 70 FC |                 rdfast d31,ptr	
00c94     65 C2 00 F6 |                 mov skippattern,skip4
00c98                 | 
00c98     00 00 00 00 |                 nop
00c9c     00 00 00 00 |         		nop
00ca0     54 BA 70 FC |                 rdfast d31,ptr	
00ca4     62 C2 00 F6 |                 mov skippattern,skip1
00ca8                 |                 
00ca8                 |                 
00ca8                 | 
00ca8     00 80 0C F2 |         		cmp command,#0 wz   '17 nops left
00cac     3B A8 00 56 |         if_nz	mov ptr,sstart
00cb0     3B 78 00 F1 |                 add lstart,sstart
00cb4     3B 7A 00 F1 |                 add lend,sstart
00cb8                 |         		
00cb8                 |         		
00cb8     01 B2 04 F1 |                 add counter,#1
00cbc     3F B2 18 F2 | 				cmp counter,freq wcz
00cc0     00 B2 04 36 | 		if_ge   mov counter,#0
00cc4     1C 00 90 CD | 		if_lt   jmp #p111
00cc8                 | 
00cc8     11 B0 60 FD | p101         	rfword x ',ptr
00ccc                 | 				
00ccc     3E B0 30 FA |      			scas x,vol
00cd0     00 B0 00 F6 | 			    mov x,0-0
00cd4                 | 		        						   	
00cd4     5A B0 00 F1 | 				add x,a8000
00cd8     3D A8 08 F2 | 		        cmp	ptr,lend wz
00cdc     02 A8 04 51 |  		if_nz	add ptr,#2
00ce0     3C A8 00 A6 |  		if_z    mov ptr,lstart             '~~61 clocks
00ce4                 | 
00ce4     24 28 60 FD |  p111          	waitse1
00ce8     53 B0 20 FC |                 wypin x,spin 
00cec     5B B0 20 FC |                 wypin x,spin2 
00cf0                 | 		
00cf0     70 FF 9F FD | 				jmp #loop
00cf4                 | 
00cf4                 | 
00cf4     00 00 00 00 | sstart   	long 	0
00cf8     00 00 00 00 | lstart		long 	0
00cfc     00 00 00 00 | lend		long 	0
00d00     00 00 00 00 | vol			long 	0
00d04     00 00 00 00 | freq		long 	0
00d08     00 00 00 00 | command     long 	0
00d0c     00 00 00 00 | sstart2   	long 	0
00d10     00 00 00 00 | lstart2		long 	0
00d14     00 00 00 00 | lend2		long 	0
00d18     00 00 00 00 | vol2		long 	0
00d1c     00 00 00 00 | freq2		long 	0
00d20     00 00 00 00 | command2    long 	0
00d24     00 00 00 00 | sstart3   	long 	0
00d28     00 00 00 00 | lstart3		long 	0
00d2c     00 00 00 00 | lend3		long 	0
00d30     00 00 00 00 | vol3		long 	0
00d34     00 00 00 00 | freq3		long 	0
00d38     00 00 00 00 | command3    long 	0
00d3c     00 00 00 00 | sstart4   	long 	0
00d40     00 00 00 00 | lstart4		long 	0
00d44     00 00 00 00 | lend4		long 	0
00d48     00 00 00 00 | vol4		long 	0
00d4c     00 00 00 00 | freq4		long 	0
00d50     00 00 00 00 | command4    long 	0
00d54     00 00 00 00 | spin        long 	0
00d58     00 00 00 00 | ptr			long 	0
00d5c     00 00 00 00 | ptr2 long 0
00d60     00 00 00 00 | ptr3 long 0
00d64     00 00 00 00 | ptr4 long 0
00d68     00 00 00 00 | x       	long    0
00d6c     00 00 00 00 | counter 	long 	0
00d70     00 80 00 00 | a8000		long 	$8000
00d74     00 00 00 00 | spin2       long    0
00d78     04 00 00 00 | counter2 long 4
00d7c     00 00 00 80 | d31 long $80000000
00d80     00 00 00 00 | ptra2 long 0
00d84     00 00 00 00 | ptra3 long 0
00d88     00 00 00 00 | ptra4 long 0
00d8c                 | 
00d8c     F0 7F 00 00 | skippattern long %111111111110000
00d90     F0 FF 00 00 | skip1 long %1111111111110000
00d94     0F FF 00 00 | skip2 long %1111111100001111
00d98     FF F0 00 00 | skip3 long %1111000011111111
00d9c     FF 0F 00 00 | skip4 long %0000111111111111
00da0     00 83 40 A2 
00da4     80 C1 C0 E0 
00da8     00 00 40 1F 
00dac     80 3E C0 5D | saw     word  -32000, -24000, -16000, -8000, 0, 8000, 16000, 24000, 32000
00db0     00 7D       | 	byte	$00, $7d
00db2     00 83 00 7D | square  word  -32000, 32000
00db6     00 00 5A 20 
00dba     80 3E 63 58 
00dbe     41 6C BE 78 
00dc2     00 7D F6 77 | sine    word 0,8282,16000, 22627, 27713, 30910, 32000,30710,27713,22627,16000,8282,0,-8282,-16000,-22627,-27713,-30910,-32000,-30910,-27713,-22627,-16000,-8282
00dc6     41 6C 63 58 
00dca     80 3E 5A 20 
00dce     00 00 A6 DF 
00dd2     80 C1 9D A7 | 	byte	$41, $6c, $63, $58, $80, $3e, $5a, $20, $00, $00, $a6, $df, $80, $c1, $9d, $a7
00dd6     BF 93 42 87 
00dda     00 83 42 87 
00dde     BF 93 9D A7 
00de2     80 C1 A6 DF | 	byte	$bf, $93, $42, $87, $00, $83, $42, $87, $bf, $93, $9d, $a7, $80, $c1, $a6, $df
00de6     00 00       | 	byte	$00, $00
00de8                 | 	alignl
00de8                 | __system__dat_
00de8     00 00 00 00 
00dec     00 00 00 00 | 	byte	$00[8]
00df0     03 00 00 00 
00df4     00 00 00 00 
00df8     00 00 00 00 
00dfc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
00e00                 | objmem
00e00     00 00 00 00 | 	long	0[1]
00e04 0e0             | 	org	COG_BSS_START
00e04 0e0             | arg01
00e04 0e0             | 	res	1
00e04 0e1             | arg02
00e04 0e1             | 	res	1
00e04 0e2             | arg03
00e04 0e2             | 	res	1
00e04 0e3             | arg04
00e04 0e3             | 	res	1
00e04 0e4             | local01
00e04 0e4             | 	res	1
00e04 0e5             | local02
00e04 0e5             | 	res	1
00e04 0e6             | local03
00e04 0e6             | 	res	1
00e04 0e7             | muldiva_
00e04 0e7             | 	res	1
00e04 0e8             | muldivb_
00e04 0e8             | 	res	1
00e04 0e9             | 	fit	480
00e04 0e9             | 
