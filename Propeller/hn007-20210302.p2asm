' 
' 
' hdmi_base       = 0           'must be a multiple of 8
con
	hdmi_base = 0
' _clkfreq        = 200000000      'start safe, hubset will do the rest
	_clkfreq = 200000000
' 
' 
' ' 354_689_500   '200x Atari 8-bit PAL,  50x Amiga PAL  - real settings: 49 869 354693878  - 1.0000123 - mode 0
' ' 357_954_500   '200x Atari 8-bit NTSC, 50x Amiga NTSC - real settings: 49 877 357959184  - 1.0000131 - mode 256
' 
' ' We also need x180 and x160 speeds
' '
' ' 319_220_550 90x PAL  - real settings: 51 814 319215686 - 0.9999848 - mode 1
' ' 322_159_050 90x NTSC - real settings: 37 596 322162162 - 1.0000097 - mode 257
' 
' ' 283_751_600 80x PAL  - real settings: 64 908 283750000 - 0.9999944 - mode 2
' ' 286_363_600 80x NTSC - real settings: 22 315 286363636 - 1.0000001 - mode 258
' 
' 
' c_black         =    0
	c_black = 0
' c_blue          =  117
	c_blue = 117
' c_green         =  199
	c_green = 199
' c_cyan          =  151
	c_cyan = 151
' c_red           =   39
	c_red = 39
' c_magenta       =   71
	c_magenta = 71
' c_brown         =  246
	c_brown = 246
' c_lightgray     =   10
	c_lightgray = 10
' c_darkgray      =    5
	c_darkgray = 5
' c_lightblue     =  123
	c_lightblue = 123
' c_lightgreen    =  203
	c_lightgreen = 203
' c_lightcyan     =  155
	c_lightcyan = 155
' c_lightred      =   43
	c_lightred = 43
' c_lightmagenta  =   75
	c_lightmagenta = 75
' c_yellow        =  234
	c_yellow = 234
' c_white         =   15
	c_white = 15
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 200000000
	long	0 ' clock mode: will default to $10009fb
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, objptr
	add	ptra, ##12368
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##16779768
	waitx	##200000
	mov	pa, ##16779771
	hubset	pa
	wrlong	pa, #24
	wrlong	##200000000, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_demo
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra
	add	ptra, #4
	rdlong	result1, ptra
	add	ptra, #4
	rdlong	arg01, ptra
	add	ptra, #4
	rdlong	arg02, ptra
	add	ptra, #4
	rdlong	arg03, ptra
	add	ptra, #4
	rdlong	arg04, ptra
	sub	ptra, #16
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    pop	fcache_tmpb_
    add	fcache_tmpb_, pa
    push	fcache_tmpb_
    sub	fcache_tmpb_, pa
    shr	pa, #2
    altd	pa
    mov	 0-0, ret_instr_
    sub	pa, #1
    setq	pa
    rdlong	$0, fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    ret
fcache_tmpb_
    long 0
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    sub  COUNT_, #1
    setq COUNT_
    wrlong local01, ptra
    add  COUNT_, #1
pushregs_done_
    shl  COUNT_, #2
    add  ptra, COUNT_
    shr  COUNT_, #2
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra
    add    ptra, #12
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    sub    ptra, #12
    setq   #2
    rdlong COUNT_, ptra
    tjz    COUNT_, #popregs__ret
    shl    COUNT_, #2
    sub    ptra, COUNT_
    shr    COUNT_, #2
    sub    COUNT_, #1
    setq   COUNT_
    rdlong local01, ptra
popregs__ret
    push   RETADDR_
    jmp    pa

unsdivide_
       setq    #0
       qdiv    muldiva_, muldivb_
       getqx   muldivb_
 _ret_ getqy   muldiva_

divide_
       abs     muldiva_,muldiva_     wc       'abs(x)
       muxc    itmp2_,#%11                    'store sign of x
       abs     muldivb_,muldivb_     wcz      'abs(y)
 if_c  xor     itmp2_,#%10                    'store sign of y
 if_z  ret
       call    #unsdivide_
       test    itmp2_,#1        wc       'restore sign, remainder
       negc    muldiva_,muldiva_ 
       test    itmp2_,#%10      wc       'restore sign, division result
 _ret_ negc    muldivb_,muldivb_

itmp1_
	long	0
itmp2_
	long	0
objptr
	long	@objmem
ptr___system__dat__
	long	@__system__dat_
ptr__dat__
	long	@_dat_
result1
	long	0
COG_BSS_START
	fit	480
	orgh
hubentry

' 
' {{
' }}
' 
' pub demo() | random, i, j, k, s1,s2,s3,s4,s5,s6,s7,s8
_demo
	mov	COUNT_, #73
	call	#pushregs_
' 
' s1:=string("A HDMI Nostalgic 100x30 text with border driver demo")
	mov	local01, ##@LR__0183
' s2:=string("It uses 8x16 font")
	mov	local02, ##@LR__0184
' s3:=string("This is a P2 so every letter can have its own foreground and background color")
	mov	local03, ##@LR__0185
' s4:=string("Every line can have its own border color")
	mov	local04, ##@LR__0186
' s5:=string("This time the hub RAM is used for the color buffer")
	mov	local05, ##@LR__0187
' s6:=string("You can set colors for all the screen using one function call")
	mov	local06, ##@LR__0188
' s7:=string("You can set border color for all the screen using one function call, too")
	mov	local07, ##@LR__0189
' s8:=string("1234567890")
' 
' 
' 
' start(256)
	mov	arg01, #256
	add	objptr, #40
	mov	local08, objptr
' 
' ' mode=0 - start at PAL timings, 624 lines
' ' mode=256 - start at NTSC timings, 524 lines
' 
' '**********************************************************************************
' '
' '           Starts the driver
' '
' '**********************************************************************************
' 
' ' initialize pointers
' 
' border_ptr:=@bordercolor
	sub	objptr, #32
	wrlong	local08, objptr
' font_ptr:=@st_font
	sub	objptr, #4
	wrlong	ptr__dat__, objptr
	add	objptr, #164
	mov	local09, objptr
' buf_ptr:=@buf
	sub	objptr, #168
	wrlong	local09, objptr
	add	objptr, ##12196
	mov	local10, objptr
' vblank_ptr:=@vblank
	sub	objptr, ##12184
	wrlong	local10, objptr
	add	objptr, ##12156
	mov	local11, objptr
' cursor_ptr:=@cursor_x
	sub	objptr, ##12152
	wrlong	local11, objptr
	add	objptr, ##12196
	mov	local12, objptr
' mode_ptr:=@timings
	sub	objptr, ##12192
	wrlong	local12, objptr
	add	ptr__dat__, ##6144
' palette_ptr:=@ataripalette
	add	objptr, #4
	wrlong	ptr__dat__, objptr
	add	objptr, ##12228
	mov	local13, objptr
' command_ptr:=@cmd1
	sub	objptr, ##12224
	wrlong	local13, objptr
	add	objptr, ##12232
	mov	local14, objptr
' fontnum_ptr:=@fontnum
	sub	objptr, ##12228
	wrlong	local14, objptr
' 
' fontnum:=2048  ' ST type font
	add	objptr, ##12228
	wrlong	##2048, objptr
' 
' ' initialize a cursor
' 
' cursor_x:=0
	sub	objptr, #92
	wrbyte	#0, objptr
' cursor_y:=0
	add	objptr, #1
	wrbyte	#0, objptr
' cursor_sh:=14
	add	objptr, #1
	wrbyte	#14, objptr
' 
' ' set 16 VGA DOS like colors
' 
' colors[0] := c_black
	add	objptr, #10
	wrbyte	#0, objptr
' colors[1] := c_blue
	add	objptr, #1
	wrbyte	#117, objptr
' colors[2] := c_green
	add	objptr, #1
	wrbyte	#199, objptr
' colors[3] := c_cyan
	add	objptr, #1
	wrbyte	#151, objptr
' colors[4] := c_red
	add	objptr, #1
	wrbyte	#39, objptr
' colors[5] := c_magenta
	add	objptr, #1
	wrbyte	#71, objptr
' colors[6] := c_brown
	add	objptr, #1
	wrbyte	#246, objptr
' colors[7] := c_lightgray
	add	objptr, #1
	wrbyte	#10, objptr
' colors[8] := c_darkgray
	add	objptr, #1
	wrbyte	#5, objptr
' colors[9] := c_lightblue
	add	objptr, #1
	wrbyte	#123, objptr
' colors[$A]:= c_lightgreen
	add	objptr, #1
	wrbyte	#203, objptr
' colors[$B]:= c_lightcyan
	add	objptr, #1
	wrbyte	#155, objptr
' colors[$C]:= c_lightred
	add	objptr, #1
	wrbyte	#43, objptr
' colors[$D]:= c_lightmagenta
	add	objptr, #1
	wrbyte	#75, objptr
' colors[$E]:= c_yellow
	add	objptr, #1
	wrbyte	#234, objptr
' colors[$F]:= c_white
	add	objptr, #1
	wrbyte	#15, objptr
	sub	objptr, ##12195
' 
' ' set timings
' ' We can have 1140,1026 or 912 pixes per line
' 
' setmode(mode)
	sub	ptr__dat__, ##6144
	call	#_setmode
' 
' 
' 
'   {{
'     }}
' 
' cmd1:=257 ' set idle
	add	objptr, ##12252
	wrlong	#257, objptr
	sub	objptr, ##12252
' cog:=coginit(16,@hdmi, @buf_ptr)
	add	ptr__dat__, ##7168
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##7168
	mov	arg03, objptr
	mov	arg01, #16
	setq	arg03
	coginit	arg01, arg02 wc
 if_b	neg	arg01, #1
	mov	result1, arg01
	mov	local15, result1
	add	objptr, #36
	wrlong	local15, objptr
	sub	objptr, #36
' waitms(20)
	mov	arg01, #20
	mov	local16, #20
	rdlong	local17, #20
	loc	pa,	#(@LR__0002-@LR__0001)
	call	#FCACHE_LOAD_
LR__0001
	cmps	local16, ##1000 wcz
 if_a	waitx	local17
 if_a	sub	local16, ##1000
 if_a	jmp	#LR__0001
LR__0002
	add	ptr___system__dat__, #12
	rdlong	local18, ptr___system__dat__ wz
	sub	ptr___system__dat__, #12
 if_ne	jmp	#LR__0003
	mov	muldiva_, local17
	mov	muldivb_, ##1000
	call	#unsdivide_
	mov	local18, muldivb_
	add	ptr___system__dat__, #12
	wrlong	muldivb_, ptr___system__dat__
	sub	ptr___system__dat__, #12
LR__0003
	cmps	local16, #0 wcz
 if_a	qmul	local16, local18
 if_a	getqx	arg01
 if_a	waitx	arg01
' cls(c_green,c_black)
	mov	arg01, #199
	mov	arg02, #0
	call	#_cls
' setwritecolors(c_green,c_black)
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#199, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
' 
' return cog
	sub	objptr, ##12140
	rdlong	result1, objptr
	sub	objptr, #36
' 
' 
' 
' 
' 
' j:=0
' 
' repeat
LR__0004
' 
'   cursoroff()
' 
' ''---------- Switch the cursor on
' 
' cursor_sh-=16
	add	objptr, ##12170
	rdbyte	local19, objptr
	sub	local19, #16
	wrbyte	local19, objptr
	sub	objptr, ##12170
'   cls(151,145)
	mov	arg01, #151
	mov	arg02, #145
	call	#_cls
'   waitvbl(60)
	mov	arg01, #60
	call	#_waitvbl
' 
'   setbordercolors (0,0,0)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#_setbordercolors
'   waitvbl(100)
	mov	arg01, #100
	call	#_waitvbl
' 
'   outtextxy (50-(strsize(s1)>>1),10,s1)
	mov	arg01, local01
	mov	local20, #0
	loc	pa,	#(@LR__0006-@LR__0005)
	call	#FCACHE_LOAD_
LR__0005
	rdbyte	local19, arg01 wz
 if_ne	add	local20, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0005
LR__0006
	mov	result1, local20
	mov	local21, result1
	shr	local21, #1
	mov	arg01, #50
	sub	arg01, local21
	mov	arg02, #10
	mov	arg03, local01
	call	#_outtextxy
'   waitvbl(50)
	mov	arg01, #50
	call	#_waitvbl
' 
'   outtextxy (50-(strsize(s2)>>1),12,s2)
	mov	arg01, local02
	mov	local20, #0
	loc	pa,	#(@LR__0008-@LR__0007)
	call	#FCACHE_LOAD_
LR__0007
	rdbyte	local19, arg01 wz
 if_ne	add	local20, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0007
LR__0008
	mov	result1, local20
	mov	local21, result1
	shr	local21, #1
	mov	arg01, #50
	sub	arg01, local21
	mov	arg03, local02
	mov	arg02, #12
	call	#_outtextxy
'   waitvbl(50)
	mov	arg01, #50
	call	#_waitvbl
' 
'   repeat  k from 0 to 49
	mov	local22, #50
LR__0009
'     repeat i from 0 to 99
	mov	local23, #0
LR__0010
'       setfontcolor (i,12,40)
	mov	arg01, local23
	mov	arg02, #12
	mov	arg03, #40
	call	#_setfontcolor
	add	local23, #1
	cmps	local23, #100 wcz
 if_b	jmp	#LR__0010
'     waitvbl(10)
	mov	arg01, #10
	call	#_waitvbl
'     repeat i from 0 to 99
	mov	local23, #0
LR__0011
'       setfontcolor (i,12,235)
	mov	arg01, local23
	mov	arg02, #12
	mov	arg03, #235
	call	#_setfontcolor
	add	local23, #1
	cmps	local23, #100 wcz
 if_b	jmp	#LR__0011
'     waitvbl(10)
	mov	arg01, #10
	call	#_waitvbl
	djnz	local22, #LR__0009
'   repeat j from 0 to 29
	mov	local24, #30
LR__0012
'     scrolldown()
	call	#_scrolldown
'     waitvbl(2)
	mov	arg01, #2
	call	#_waitvbl
	djnz	local24, #LR__0012
' 
'   cls(c_green,0)
	mov	arg01, #199
	mov	arg02, #0
	call	#_cls
' 
'   setcursorpos(0,27)
	mov	arg02, #27
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, ##12168
	wrbyte	#0, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#27, objptr
	sub	objptr, ##12169
'   writeln(string("This is MS-DOS like font style..."))
	mov	arg01, ##@LR__0191
	call	#_writeln
'   writeln(string(" "))
	mov	arg01, ##@LR__0192
	call	#_writeln
'   write(string("C:\>"))
	mov	arg01, ##@LR__0193
	call	#_write
'   cursoron()
' 
' ''---------- Switch the cursor on
' 
' cursor_sh+=16
	add	objptr, ##12170
	rdbyte	local19, objptr
	add	local19, #16
	wrbyte	local19, objptr
	sub	objptr, ##12170
' 
'   waitvbl(600)
	mov	arg01, ##600
	call	#_waitvbl
' 
'   writeln(string(" "))
	mov	arg01, ##@LR__0194
	call	#_writeln
'   writeln(string(" "))
	mov	arg01, ##@LR__0195
	call	#_writeln
' 
' 
'   write(string(" "))
	mov	arg01, ##@LR__0196
	call	#_write
	mov	local25, #0
	mov	local24, #16
LR__0013
'     write(string("        "))
	mov	arg01, ##@LR__0197
	call	#_write
	mov	local23, #0
LR__0014
	mov	local26, local25
	add	local26, local23 wz
'       teststring[0]:=16*j+i
	add	objptr, ##12264
	wrbyte	local26, objptr
	sub	objptr, ##12264
'       if (16*j+i)==0
'         teststring[0]:=32
 if_e	add	objptr, ##12264
 if_e	wrbyte	#32, objptr
 if_e	sub	objptr, ##12264
'       teststring[1]:=0
	add	objptr, ##12265
	wrbyte	#0, objptr
	sub	objptr, ##12265
'       write(inttohex(16*j+i,2))
	mov	arg01, local26
	mov	arg02, #2
	call	#_inttohex
	mov	arg01, result1
	call	#_write
'       write(string(" "))
	mov	arg01, ##@LR__0198
	call	#_write
	add	objptr, ##12264
	mov	arg01, objptr
	sub	objptr, ##12264
'       write(@teststring)
	call	#_write
'       write(string(","))
	mov	arg01, ##@LR__0199
	call	#_write
	add	local23, #1
	cmps	local23, #16 wcz
 if_b	jmp	#LR__0014
'     writeln(string(" "))
	mov	arg01, ##@LR__0200
	call	#_writeln
'     waitvbl(2)
	mov	arg01, #2
	call	#_waitvbl
	add	local25, #16
	djnz	local24, #LR__0013
' 
'   waitvbl(1200)
	mov	arg01, ##1200
	call	#_waitvbl
' 
'   setmode(0)
	mov	arg01, #0
	call	#_setmode
'   defchar(0,2,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #255
	mov	arg05, #0
	mov	arg06, #0
	mov	arg07, #0
	mov	arg08, #0
	mov	arg09, #0
	mov	arg10, #0
	mov	arg11, #0
	mov	arg12, #0
	mov	arg13, #0
	mov	arg14, #0
	mov	arg15, #0
	mov	arg16, #0
	mov	arg17, #0
	mov	arg18, #0
	mov	result1, ptr__dat__
	add	result1, #32
' 
' s:=@st_font+fontnum2+char2*16
' byte[s+00]:=b0
	wrbyte	#0, result1
	mov	local27, result1
	add	local27, #1
' byte[s+01]:=b1
	wrbyte	#255, local27
	mov	local28, result1
	add	local28, #2
' byte[s+02]:=b2
	wrbyte	#0, local28
	mov	local29, result1
	add	local29, #3
' byte[s+03]:=b3
	wrbyte	#0, local29
	mov	local30, result1
	add	local30, #4
' byte[s+04]:=b4
	wrbyte	#0, local30
	mov	local31, result1
	add	local31, #5
' byte[s+05]:=b5
	wrbyte	#0, local31
	mov	local32, result1
	add	local32, #6
' byte[s+06]:=b6
	wrbyte	#0, local32
	mov	local33, result1
	add	local33, #7
' byte[s+07]:=b7
	wrbyte	#0, local33
	mov	local34, result1
	add	local34, #8
' byte[s+08]:=b8
	wrbyte	#0, local34
	mov	local35, result1
	add	local35, #9
' byte[s+09]:=b9
	wrbyte	#0, local35
	mov	local36, result1
	add	local36, #10
' byte[s+10]:=b10
	wrbyte	#0, local36
	mov	local37, result1
	add	local37, #11
' byte[s+11]:=b11
	wrbyte	#0, local37
	mov	local38, result1
	add	local38, #12
' byte[s+12]:=b12
	wrbyte	#0, local38
	mov	local39, result1
	add	local39, #13
' byte[s+13]:=b13
	wrbyte	#0, local39
	mov	local40, result1
	add	local40, #14
' byte[s+14]:=b14
	wrbyte	#0, local40
	mov	local41, result1
	add	local41, #15
' byte[s+15]:=b15
	wrbyte	#0, local41
'   fontnum:=0
	add	objptr, ##12260
	wrlong	#0, objptr
	sub	objptr, ##12260
' 
'   cls(0,15)
	mov	arg02, #15
	call	#_cls
'   setbordercolors(0,0,0)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#_setbordercolors
'   cursoroff()
' 
' ''---------- Switch the cursor on
' 
' cursor_sh-=16
	add	objptr, ##12170
	rdbyte	local19, objptr
	sub	local19, #16
	wrbyte	local19, objptr
	sub	objptr, ##12170
'   outtextxy(0,0,string("  File    Options    View    Special"))
	mov	arg03, ##@LR__0201
	mov	arg01, #0
	mov	arg02, #0
	call	#_outtextxy
	add	objptr, ##12264
	mov	local42, objptr
	sub	objptr, ##12264
	loc	pa,	#(@LR__0017-@LR__0015)
	call	#FCACHE_LOAD_
LR__0015
	rep	@LR__0018, #100
LR__0016
'     teststring[i]:=2
	wrbyte	#2, local42
	add	local42, #1
LR__0017
LR__0018
'   teststring[100]:=0
	add	objptr, ##12364
	wrbyte	#0, objptr
	sub	objptr, #100
	mov	arg03, objptr
	sub	objptr, ##12264
'   outtextxy(0,1,@teststring)
	mov	arg01, #0
	mov	arg02, #1
	call	#_outtextxy
'   teststring[0]:=10
	add	objptr, ##12264
	wrbyte	#10, objptr
	add	objptr, #1
	mov	local43, objptr
	sub	objptr, ##12265
	loc	pa,	#(@LR__0021-@LR__0019)
	call	#FCACHE_LOAD_
LR__0019
	rep	@LR__0022, #80
LR__0020
'     teststring[i]:=3
	wrbyte	#3, local43
	add	local43, #1
LR__0021
LR__0022
'   teststring[81]:=9
	add	objptr, ##12345
	wrbyte	#9, objptr
'   teststring[82]:=0
	add	objptr, #1
	wrbyte	#0, objptr
' 
'   setcursorpos(8,5)
	mov	arg02, #5
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	sub	objptr, #178
	wrbyte	#8, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#5, objptr
	add	objptr, #95
	mov	arg01, objptr
	sub	objptr, ##12264
'   writeln(@teststring)
	call	#_writeln
	mov	local44, #0
	mov	local24, #8
LR__0023
'     write(string("        "))
	mov	arg01, ##@LR__0202
	call	#_write
	mov	local23, #0
LR__0024
	mov	local45, local44
	add	local45, local23 wz
'       teststring[0]:=16*j+i
	add	objptr, ##12264
	wrbyte	local45, objptr
	sub	objptr, ##12264
'       if (16*j+i)==0
'         teststring[0]:=32
 if_e	add	objptr, ##12264
 if_e	wrbyte	#32, objptr
 if_e	sub	objptr, ##12264
'       teststring[1]:=0
	add	objptr, ##12265
	wrbyte	#0, objptr
	sub	objptr, ##12265
'       write(inttohex(16*j+i,2))
	mov	arg01, local45
	mov	arg02, #2
	call	#_inttohex
	mov	arg01, result1
	call	#_write
'       write(string(" "))
	mov	arg01, ##@LR__0203
	call	#_write
	add	objptr, ##12264
	mov	arg01, objptr
	sub	objptr, ##12264
'       write(@teststring)
	call	#_write
'       write(string(","))
	mov	arg01, ##@LR__0204
	call	#_write
	add	local23, #1
	cmps	local23, #16 wcz
 if_b	jmp	#LR__0024
'     writeln(string(""))
	mov	arg01, ##@LR__0205
	call	#_writeln
'     waitvbl(2)
	mov	arg01, #2
	call	#_waitvbl
	add	local44, #16
	djnz	local24, #LR__0023
'   teststring[0]:=$C
	add	objptr, ##12264
	wrbyte	#12, objptr
	add	objptr, #1
	mov	local46, objptr
	sub	objptr, ##12265
	loc	pa,	#(@LR__0027-@LR__0025)
	call	#FCACHE_LOAD_
LR__0025
	rep	@LR__0028, #80
LR__0026
'     teststring[i]:=3
	wrbyte	#3, local46
	add	local46, #1
LR__0027
LR__0028
'   teststring[81]:=$B
	add	objptr, ##12345
	wrbyte	#11, objptr
'   teststring[82]:=0
	add	objptr, #1
	wrbyte	#0, objptr
'   setcursorpos(8,14)
	mov	arg02, #14
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	sub	objptr, #178
	wrbyte	#8, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#14, objptr
	add	objptr, #95
	mov	arg01, objptr
	sub	objptr, ##12264
'   writeln(@teststring)
	call	#_writeln
' 
'   writeln(string(" "))
	mov	arg01, ##@LR__0206
	call	#_writeln
'   writeln(string("     ... but Atari ST-like mono font can also be used."))
	mov	arg01, ##@LR__0207
	call	#_writeln
'   writeln(string("         We also switched the graphics mode to PAL like 50 Hz, 624 lines."))
	mov	arg01, ##@LR__0208
	call	#_writeln
'   writeln(string(" "))
	mov	arg01, ##@LR__0209
	call	#_writeln
'   setwritecolors(c_red,c_white)
	mov	arg02, #15
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#39, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#15, objptr
	sub	objptr, ##12176
'   writeln(string("         Although the font is mono style, we are still in the color mode here."))
	mov	arg01, ##@LR__0210
	call	#_writeln
' 
' 
' 
'   waitvbl(2000)
	mov	arg01, ##2000
	call	#_waitvbl
' 
' '-----------------
'   setmode(256)
	mov	arg01, #256
	call	#_setmode
'   fontnum:=2048
	add	objptr, ##12260
	wrlong	##2048, objptr
	sub	objptr, ##12260
'   setscreencolors (151,145)
	mov	arg01, #151
	mov	arg02, #145
	call	#_setscreencolors
	add	objptr, #168
	mov	local47, objptr
	mov	local23, #0
	sub	objptr, #168
	loc	pa,	#(@LR__0030-@LR__0029)
	call	#FCACHE_LOAD_
LR__0029
	rdlong	local48, local47
	andn	local48, #255
	mov	local49, local23
	and	local49, #255
	or	local48, local49
'     buf[i]:=(buf[i] &$FF_FF_FF_00) | (i & $FF)
	wrlong	local48, local47
	add	local23, #1
	add	local47, #4
	cmps	local23, ##3000 wcz
 if_b	jmp	#LR__0029
LR__0030
' 
'   waitvbl(100)
	mov	arg01, #100
	call	#_waitvbl
' 
'   repeat j from 0 to 29
	mov	local24, #30
LR__0031
'     scrolldown()
	call	#_scrolldown
'     waitvbl(1)
	mov	arg01, #1
	call	#_waitvbl
	djnz	local24, #LR__0031
' 
'   cls(151,145)
	mov	arg01, #151
	mov	arg02, #145
	call	#_cls
' 
'   outtextxy (50-(strsize(s3)>>1),10,s3)
	mov	arg01, local03
	mov	local20, #0
	loc	pa,	#(@LR__0033-@LR__0032)
	call	#FCACHE_LOAD_
LR__0032
	rdbyte	local19, arg01 wz
 if_ne	add	local20, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0032
LR__0033
	mov	result1, local20
	mov	local21, result1
	shr	local21, #1
	mov	arg01, #50
	sub	arg01, local21
	mov	arg03, local03
	mov	arg02, #10
	call	#_outtextxy
'   waitvbl(20)
	mov	arg01, #20
	call	#_waitvbl
'   repeat k from 0 to 20
	mov	local22, #0
LR__0034
'     repeat i from 0 to 99
	mov	local23, #0
LR__0035
	mov	local50, local23
	add	local50, local22
	abs	local51, local50 wc
	and	local51, #15
 if_b	neg	local51, local51
'       j:=(i+k)//16
	mov	local52, local51
	add	objptr, ##12180
	add	local52, objptr
'       setfontcolor(i,10,colors[j])
	rdbyte	arg03, local52
	mov	arg01, local23
	mov	arg02, #10
	sub	objptr, ##12180
	call	#_setfontcolor
	add	local51, #4
	abs	local51, local51 wc
	and	local51, #15
 if_b	neg	local51, local51
	add	objptr, ##12180
	add	local51, objptr
	mov	local53, local51
'       setbackcolor(i,10,colors[(j+4)//16])
	rdbyte	arg03, local53
	mov	arg01, local23
	mov	arg02, #10
	sub	objptr, ##12180
	call	#_setbackcolor
	add	local23, #1
	cmps	local23, #100 wcz
 if_b	jmp	#LR__0035
'     waitvbl(10)
	mov	arg01, #10
	call	#_waitvbl
	add	local22, #1
	cmps	local22, #21 wcz
 if_b	jmp	#LR__0034
'   repeat i from 0 to 99
	mov	local23, #0
LR__0036
'     setfontcolor(i,10,153)
	mov	arg01, local23
	mov	arg02, #10
	mov	arg03, #153
	call	#_setfontcolor
'     setbackcolor(i,10,145)
	mov	arg01, local23
	mov	arg02, #10
	mov	arg03, #145
	call	#_setbackcolor
	add	local23, #1
	cmps	local23, #100 wcz
 if_b	jmp	#LR__0036
' 
'   outtextxy (50-(strsize(s4)>>1),12,s4)
	mov	arg01, local04
	mov	local20, #0
	loc	pa,	#(@LR__0038-@LR__0037)
	call	#FCACHE_LOAD_
LR__0037
	rdbyte	local19, arg01 wz
 if_ne	add	local20, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0037
LR__0038
	mov	result1, local20
	mov	local21, result1
	shr	local21, #1
	mov	arg01, #50
	sub	arg01, local21
	mov	arg02, #12
	mov	arg03, local04
	call	#_outtextxy
'   waitvbl(20)
	mov	arg01, #20
	call	#_waitvbl
'   outtextxy (50-(strsize(s5)>>1),14,s5)
	mov	arg01, local05
	mov	local20, #0
	loc	pa,	#(@LR__0040-@LR__0039)
	call	#FCACHE_LOAD_
LR__0039
	rdbyte	local19, arg01 wz
 if_ne	add	local20, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0039
LR__0040
	mov	result1, local20
	mov	local21, result1
	shr	local21, #1
	mov	arg01, #50
	sub	arg01, local21
	mov	arg03, local05
	mov	arg02, #14
	call	#_outtextxy
'   waitvbl(200)
	mov	arg01, #200
	call	#_waitvbl
	add	objptr, #168
	mov	local54, objptr
	mov	local23, #0
	sub	objptr, #168
	loc	pa,	#(@LR__0042-@LR__0041)
	call	#FCACHE_LOAD_
LR__0041
	rdlong	local55, local54
	and	local55, ##-65536
	mov	local56, local23
	and	local56, #255
	or	local55, local56
'     buf[i]:=(buf[i] &$FF_FF_00_00) | (i & $FF)
	wrlong	local55, local54
	add	local23, #1
	add	local54, #4
	cmps	local23, ##3000 wcz
 if_b	jmp	#LR__0041
LR__0042
' 
'   waitvbl(100)
	mov	arg01, #100
	call	#_waitvbl
' 
'   repeat k from 0 to 99
	mov	local22, #100
LR__0043
'     repeat i from 0 to 31
	mov	local23, #0
	loc	pa,	#(@LR__0045-@LR__0044)
	call	#FCACHE_LOAD_
LR__0044
'       setbordercolor(i,getrnd() & 255,getrnd() & 255,getrnd()& 255)
	getrnd	local57
	and	local57, #255
	getrnd	local58
	and	local58, #255
	getrnd	arg04
	and	arg04, #255
	mov	arg01, local23
	mov	arg02, local57
	mov	arg03, local58
	shl	arg02, #16
	shl	arg03, #8
	add	arg02, arg03
	add	arg02, arg04
' 
' ''---------- Set the border color at line 0..31.
' ''---------- 0 is upper border, 31 is lower border, add #1 to the text line #
' 
' color:=r<<16+g<<8+b
	shl	arg01, #2
	add	objptr, #40
	add	arg01, objptr
' bordercolor[line]:=color
	wrlong	arg02, arg01
	sub	objptr, #40
	add	local23, #1
	cmps	local23, #32 wcz
 if_b	jmp	#LR__0044
LR__0045
'     repeat j from 0 to 29
	mov	local24, #0
LR__0046
'       repeat i from 0 to 99
	mov	local23, #0
LR__0047
'         setfontcolor(i,j,getrnd()&255)
	getrnd	result1
	mov	arg03, result1
	and	arg03, #255
	mov	arg01, local23
	mov	arg02, local24
	call	#_setfontcolor
'         setbackcolor(i,j,getrnd()&255)
	mov	arg02, local24
	getrnd	result1
	mov	arg03, result1
	and	arg03, #255
	mov	arg01, local23
	call	#_setbackcolor
	add	local23, #1
	cmps	local23, #100 wcz
 if_b	jmp	#LR__0047
	add	local24, #1
	cmps	local24, #30 wcz
 if_b	jmp	#LR__0046
'     waitvbl(1)
	mov	arg01, #1
	call	#_waitvbl
	djnz	local22, #LR__0043
' 
'   waitvbl(500)
	mov	arg01, #500
	call	#_waitvbl
' 
'   cls(151,145)
	mov	arg01, #151
	mov	arg02, #145
	call	#_cls
'   setscreencolors (151,145)
	mov	arg01, #151
	mov	arg02, #145
	call	#_setscreencolors
'   setbordercolors(0,0,0)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#_setbordercolors
' 
'   outtextxy (50-(strsize(s6)>>1),10,s6)
	mov	arg01, local06
	mov	local20, #0
	loc	pa,	#(@LR__0049-@LR__0048)
	call	#FCACHE_LOAD_
LR__0048
	rdbyte	local19, arg01 wz
 if_ne	add	local20, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0048
LR__0049
	mov	result1, local20
	mov	local21, result1
	shr	local21, #1
	mov	arg01, #50
	sub	arg01, local21
	mov	arg03, local06
	mov	arg02, #10
	call	#_outtextxy
'   waitvbl(50)
	mov	arg01, #50
	call	#_waitvbl
' 
' 
'   random:=getrnd()
	getrnd	result1
' 
'   repeat j from 0 to 15
	mov	local24, #16
LR__0050
' 
'     waitvbl(25)
	mov	arg01, #25
	call	#_waitvbl
'     setscreencolors (getrnd() & 255,getrnd() & 255)
	getrnd	arg01
	and	arg01, #255
	getrnd	result1
	mov	arg02, result1
	and	arg02, #255
	call	#_setscreencolors
	djnz	local24, #LR__0050
' 
'  setscreencolors (151,145)
	mov	arg01, #151
	mov	arg02, #145
	call	#_setscreencolors
' 
'   outtextxy (50-(strsize(s7)>>1),12,s7)
	mov	arg01, local07
	mov	local20, #0
	loc	pa,	#(@LR__0052-@LR__0051)
	call	#FCACHE_LOAD_
LR__0051
	rdbyte	local19, arg01 wz
 if_ne	add	local20, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0051
LR__0052
	mov	result1, local20
	mov	local21, result1
	shr	local21, #1
	mov	arg01, #50
	sub	arg01, local21
	mov	arg03, local07
	mov	arg02, #12
	call	#_outtextxy
'   waitvbl(50)
	mov	arg01, #50
	call	#_waitvbl
' 
'   repeat j from 0 to 15
	mov	local24, #16
LR__0053
'     waitvbl(25)
	mov	arg01, #25
	call	#_waitvbl
'     setbordercolors (getrnd() & 255,getrnd() & 255,getrnd() & 255)
	getrnd	local59
	and	local59, #255
	getrnd	local60
	and	local60, #255
	getrnd	result1
	mov	arg03, result1
	and	arg03, #255
	mov	arg01, local59
	mov	arg02, local60
	call	#_setbordercolors
	djnz	local24, #LR__0053
' 
'   waitvbl(25)
	mov	arg01, #25
	call	#_waitvbl
'   setbordercolors(0,0,0)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#_setbordercolors
' '
'   repeat j from 0 to 29
	mov	local24, #30
LR__0054
'     scrollup()
	call	#_scrollup
'     waitvbl(2)
	mov	arg01, #2
	call	#_waitvbl
	djnz	local24, #LR__0054
' 
' 
'   repeat i from 0 to 29
	mov	local23, #0
LR__0055
'     waitvbl(2)
	mov	arg01, #2
	call	#_waitvbl
'     cls(141,145)
	mov	arg01, #141
	mov	arg02, #145
	call	#_cls
'     outtextxy(i,i,s1)
	mov	arg03, local01
	mov	arg01, local23
	mov	arg02, local23
	call	#_outtextxy
	add	local23, #1
	cmps	local23, #30 wcz
 if_b	jmp	#LR__0055
' 
' 
'   waitvbl(100)
	mov	arg01, #100
	call	#_waitvbl
' 
'   cursoron()
' 
' ''---------- Switch the cursor on
' 
' cursor_sh+=16
	add	objptr, ##12170
	rdbyte	local19, objptr
	add	local19, #16
	wrbyte	local19, objptr
	sub	objptr, ##12170
'   cls(15,0)
	mov	arg01, #15
	mov	arg02, #0
	call	#_cls
'   setcursorpos(0,0)
	mov	arg02, #0
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, ##12168
	wrbyte	#0, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#0, objptr
'   setwritecolors(c_blue,0)
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, #3
	wrlong	#117, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("blue"))
	mov	arg01, ##@LR__0211
	call	#_writeln
'   setwritecolors(c_green,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#199, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("green"))
	mov	arg01, ##@LR__0212
	call	#_writeln
'   setwritecolors(c_cyan,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#151, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("cyan"))
	mov	arg01, ##@LR__0213
	call	#_writeln
'   setwritecolors(c_red,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#39, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("red"))
	mov	arg01, ##@LR__0214
	call	#_writeln
'   setwritecolors(c_magenta,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#71, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("magenta"))
	mov	arg01, ##@LR__0215
	call	#_writeln
'   setwritecolors(c_brown,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#246, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("brown"))
	mov	arg01, ##@LR__0216
	call	#_writeln
'   setwritecolors(c_lightgray,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#10, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("light gray"))
	mov	arg01, ##@LR__0217
	call	#_writeln
'   setwritecolors(c_darkgray,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#5, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("dark gray"))
	mov	arg01, ##@LR__0218
	call	#_writeln
'   setwritecolors(c_lightblue,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#123, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("light blue"))
	mov	arg01, ##@LR__0219
	call	#_writeln
'   setwritecolors(c_lightgreen,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#203, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("light green"))
	mov	arg01, ##@LR__0220
	call	#_writeln
'   setwritecolors(c_lightcyan,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#155, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("light cyan"))
	mov	arg01, ##@LR__0221
	call	#_writeln
'   setwritecolors(c_lightred,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#43, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("light red"))
	mov	arg01, ##@LR__0222
	call	#_writeln
'   setwritecolors(c_lightmagenta,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#75, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("light magenta"))
	mov	arg01, ##@LR__0223
	call	#_writeln
'   setwritecolors(c_yellow,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#234, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("yellow"))
	mov	arg01, ##@LR__0224
	call	#_writeln
'   setwritecolors(c_white,0)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#15, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   writeln(string("white"))
	mov	arg01, ##@LR__0225
	call	#_writeln
'   writeln(inttostr(clkfreq))
	rdlong	arg01, #20
	call	#_inttostr
	mov	arg01, result1
	call	#_writeln
	mov	local61, #50
	mov	local62, #0
	mov	local63, #51
	mov	local23, #16
LR__0056
	mov	local64, #8
	mov	local24, #0
LR__0057
	mov	local65, local62
	add	local65, local24
	mov	local22, #2
LR__0058
'         setbackcolor(2*i+50,j+8,16*i+j)
	mov	arg01, local61
	mov	arg02, local64
	mov	arg03, local65
	call	#_setbackcolor
'         setbackcolor(2*i+51,j+8,16*i+j)
	mov	arg01, local63
	mov	arg02, local64
	mov	arg03, local65
	call	#_setbackcolor
	djnz	local22, #LR__0058
	add	local24, #1
	add	local64, #1
	cmps	local24, #16 wcz
 if_b	jmp	#LR__0057
	add	local66, #2
	add	local61, #2
	add	local62, #16
	add	local63, #2
	djnz	local23, #LR__0056
' 
'   waitvbl(1000)
	mov	arg01, ##1000
	call	#_waitvbl
' 
'     teststring[100]:=0
	add	objptr, ##12364
	wrbyte	#0, objptr
	sub	objptr, #100
	mov	local67, objptr
	sub	objptr, ##12264
	loc	pa,	#(@LR__0061-@LR__0059)
	call	#FCACHE_LOAD_
LR__0059
	rep	@LR__0062, #100
LR__0060
'     teststring[i]:=32
	wrbyte	#32, local67
	add	local67, #1
LR__0061
LR__0062
'   repeat i from 21 to 29
	mov	local23, #21
LR__0063
	add	objptr, ##12264
	mov	arg03, objptr
	sub	objptr, ##12264
'     outtextxyc(0,i,@teststring,c_white,c_black)
	mov	arg01, #0
	mov	arg02, local23
	mov	arg04, #15
	mov	arg05, #0
	call	#_outtextxyc
	add	local23, #1
	cmps	local23, #30 wcz
 if_b	jmp	#LR__0063
' 
'   setcursorpos(0,25)
	mov	arg02, #25
' 
' ''---------- Set the (x,y) position of cursor
' 
' cursor_x:=x
	add	objptr, ##12168
	wrbyte	#0, objptr
' cursor_y:=y
	add	objptr, #1
	wrbyte	#25, objptr
	sub	objptr, ##12169
'   waitvbl(120)
	mov	arg01, #120
	call	#_waitvbl
'   setwritecolors(c_white,c_black)
	mov	arg02, #0
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#15, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#0, objptr
	sub	objptr, ##12176
'   write(string("C:\>"))
	mov	arg01, ##@LR__0226
	call	#_write
'   waitvbl(120)
	mov	arg01, #120
	call	#_waitvbl
'   write(string("p"))
	mov	arg01, ##@LR__0227
	call	#_write
'   waitvbl(10)
	mov	arg01, #10
	call	#_waitvbl
'   write(string("c"))
	mov	arg01, ##@LR__0228
	call	#_write
'   waitvbl(10)
	mov	arg01, #10
	call	#_waitvbl
'   writeln(string(" "))
	mov	arg01, ##@LR__0229
	call	#_writeln
'   waitvbl(120)
	mov	arg01, #120
	call	#_waitvbl
'   write(string("The Propeller Commander, Copyleft ("))
	mov	arg01, ##@LR__0230
	call	#_write
'   teststring[0]:=1
	add	objptr, ##12264
	wrbyte	#1, objptr
'   teststring[1]:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, #1
	mov	arg01, objptr
	sub	objptr, ##12264
'   write(@teststring)
	call	#_write
'   writeln(string(") 2021 pik33@o2.pl"))
	mov	arg01, ##@LR__0231
	call	#_writeln
'   waitvbl(60)
	mov	arg01, #60
	call	#_waitvbl
'   writeln(string(" "))
	mov	arg01, ##@LR__0232
	call	#_writeln
'   write(string("C:\>"))
	mov	arg01, ##@LR__0233
	call	#_write
' 
'   setwritecolors(c_lightcyan,c_blue)
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	#155, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	#117, objptr
	add	objptr, #89
	mov	local68, objptr
	sub	objptr, ##12265
	loc	pa,	#(@LR__0066-@LR__0064)
	call	#FCACHE_LOAD_
LR__0064
	rep	@LR__0067, #98
LR__0065
'     teststring[i]:=$CD
	wrbyte	#205, local68
	add	local68, #1
LR__0066
LR__0067
'   teststring[0]:=$C9
	add	objptr, ##12264
	wrbyte	#201, objptr
'   teststring[50]:=$C9
	add	objptr, #50
	wrbyte	#201, objptr
' 
'   teststring[49]:=$BB
	sub	objptr, #1
	wrbyte	#187, objptr
'   teststring[99]:=$BB
	add	objptr, #50
	wrbyte	#187, objptr
'   teststring[100]:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, #100
	mov	arg03, objptr
	sub	objptr, ##12264
' 
'   outtextxyc(0,0,@teststring,c_lightcyan, c_blue)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg04, #155
	mov	arg05, #117
	call	#_outtextxyc
'   outtextxyc(71,0,string(" Status "),c_lightcyan, c_blue)
	mov	arg03, ##@LR__0234
	mov	arg01, #71
	mov	arg02, #0
	mov	arg04, #155
	mov	arg05, #117
	call	#_outtextxyc
'   outtextxyc(23,0,string(" C:\ "),c_blue, c_lightcyan)
	mov	arg03, ##@LR__0235
	mov	arg01, #23
	mov	arg02, #0
	mov	arg04, #117
	mov	arg05, #155
	call	#_outtextxyc
	add	objptr, ##12265
	mov	local69, objptr
	sub	objptr, ##12265
	loc	pa,	#(@LR__0070-@LR__0068)
	call	#FCACHE_LOAD_
LR__0068
	rep	@LR__0071, #98
LR__0069
'     teststring[i]:=32
	wrbyte	#32, local69
	add	local69, #1
LR__0070
LR__0071
'   teststring[43]:=$B3
	add	objptr, ##12307
	wrbyte	#179, objptr
'   teststring[32]:=$B3
	sub	objptr, #11
	wrbyte	#179, objptr
'   teststring[22]:=$B3
	sub	objptr, #10
	wrbyte	#179, objptr
'   teststring[0]:=$BA
	sub	objptr, #22
	wrbyte	#186, objptr
'   teststring[49]:=$BA
	add	objptr, #49
	wrbyte	#186, objptr
'   teststring[50]:=$BA
	add	objptr, #1
	wrbyte	#186, objptr
'   teststring[99]:=$BA
	add	objptr, #49
	wrbyte	#186, objptr
	sub	objptr, ##12363
'   repeat i from 1 to 19
	mov	local23, #1
LR__0072
	add	objptr, ##12264
	mov	arg03, objptr
	sub	objptr, ##12264
'     outtextxyc(0,i,@teststring,c_lightcyan, c_blue)
	mov	arg01, #0
	mov	arg02, local23
	mov	arg04, #155
	mov	arg05, #117
	call	#_outtextxyc
	add	local23, #1
	cmps	local23, #20 wcz
 if_b	jmp	#LR__0072
	add	objptr, ##12265
	mov	local70, objptr
	sub	objptr, ##12265
	loc	pa,	#(@LR__0075-@LR__0073)
	call	#FCACHE_LOAD_
LR__0073
	rep	@LR__0076, #98
LR__0074
'     teststring[i]:=$CD
	wrbyte	#205, local70
	add	local70, #1
LR__0075
LR__0076
'   teststring[0]:=$C8
	add	objptr, ##12264
	wrbyte	#200, objptr
'   teststring[50]:=$C8
	add	objptr, #50
	wrbyte	#200, objptr
' 
'   teststring[49]:=$BC
	sub	objptr, #1
	wrbyte	#188, objptr
'   teststring[99]:=$BC
	add	objptr, #50
	wrbyte	#188, objptr
'   teststring[100]:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, #100
	mov	arg03, objptr
	sub	objptr, ##12264
' 
'   outtextxyc(0,20,@teststring,c_lightcyan, c_blue)
	mov	arg01, #0
	mov	arg02, #20
	mov	arg04, #155
	mov	arg05, #117
	call	#_outtextxyc
'   outtextxy(56,2,string("The Propeller Commander, Version 0.00"))
	mov	arg03, ##@LR__0236
	mov	arg01, #56
	mov	arg02, #2
	call	#_outtextxy
'   outtextxy(60,3,string("Copyleft ("))
	mov	arg03, ##@LR__0237
	mov	arg01, #60
	mov	arg02, #3
	call	#_outtextxy
'   teststring[0]:=1
	add	objptr, ##12264
	wrbyte	#1, objptr
'   teststring[1]:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, #1
	mov	arg03, objptr
	sub	objptr, ##12264
'   outtextxy(70,3,@teststring)
	mov	arg01, #70
	mov	arg02, #3
	call	#_outtextxy
'   outtextxy(71,3,string(") 2021 pik33@o2.pl"))
	mov	arg03, ##@LR__0238
	mov	arg01, #71
	mov	arg02, #3
	call	#_outtextxy
	add	objptr, ##12265
	mov	local71, objptr
	mov	local23, #48
	sub	objptr, ##12265
	loc	pa,	#(@LR__0078-@LR__0077)
	call	#FCACHE_LOAD_
LR__0077
'     teststring[i]:=$CD
	wrbyte	#205, local71
	add	local71, #1
	djnz	local23, #LR__0077
LR__0078
'   teststring[50]:=0
	add	objptr, ##12314
	wrbyte	#0, objptr
'   teststring[0]:=$CC
	sub	objptr, #50
	wrbyte	#204, objptr
'   teststring[49]:=$B9
	add	objptr, #49
	wrbyte	#185, objptr
	sub	objptr, #49
	mov	local72, objptr
'   outtextxy(50,5,@teststring)
	mov	arg01, #50
	mov	arg02, #5
	mov	arg03, local72
	sub	objptr, ##12264
	call	#_outtextxy
'   outtextxy(50,14,@teststring)
	mov	arg01, #50
	mov	arg02, #14
	mov	arg03, local72
	call	#_outtextxy
' 
'   outtextxy(65,7,string("524,288 Bytes Memory"))
	mov	arg03, ##@LR__0239
	mov	arg01, #65
	mov	arg02, #7
	call	#_outtextxy
	mov	muldiva_, local23
	mov	muldivb_, ##1000
	call	#divide_
'  ' i:=$80000-@charcolor
'   outtextxy(66,8,inttostr(i / 1000))
	mov	local51, #66
	mov	local21, #8
	mov	arg01, muldivb_
	call	#_inttostr
	mov	arg03, result1
	mov	arg01, local51
	mov	arg02, local21
	call	#_outtextxy
'   outtextxy(69,8,string(","))
	mov	arg03, ##@LR__0240
	mov	arg01, #69
	mov	arg02, #8
	call	#_outtextxy
	mov	muldiva_, local23
	mov	muldivb_, ##1000
	call	#divide_
'   outtextxy(70,8,inttostr(i // 1000))
	mov	local51, #70
	mov	local21, #8
	mov	arg01, muldiva_
	call	#_inttostr
	mov	arg03, result1
	mov	arg01, local51
	mov	arg02, local21
	call	#_outtextxy
'   outtextxy(74,8,string("Bytes Free"))
	mov	arg03, ##@LR__0241
	mov	arg01, #74
	mov	arg02, #8
	call	#_outtextxy
'   outtextxy(56,9,string("32,212,254,720 total bytes on drive C:"))
	mov	arg03, ##@LR__0242
	mov	arg01, #56
	mov	arg02, #9
	call	#_outtextxy
'   outtextxy(57,10,string("3,989,123,640 bytes free on drive C:"))
	mov	arg03, ##@LR__0243
	mov	arg01, #57
	mov	arg02, #10
	call	#_outtextxy
'   outtextxy(58,11,string("123 files use 128,956,384 bytes in"))
	mov	arg03, ##@LR__0244
	mov	arg01, #58
	mov	arg02, #11
	call	#_outtextxy
'   outtextxy(74,12,string("C:"))
	mov	arg03, ##@LR__0245
	mov	arg01, #74
	mov	arg02, #12
	call	#_outtextxy
'   outtextxy(58,17,string("No 'dirinfo' file in this directory"))
	mov	arg03, ##@LR__0246
	mov	arg01, #58
	mov	arg02, #17
	call	#_outtextxy
' 
'   outtextxyc(9,1,string("Name"),c_yellow,c_blue)
	mov	arg03, ##@LR__0247
	mov	arg01, #9
	mov	arg02, #1
	mov	arg04, #234
	mov	arg05, #117
	call	#_outtextxyc
'   outtextxyc(25,1,string("Size"),c_yellow,c_blue)
	mov	arg03, ##@LR__0248
	mov	arg01, #25
	mov	arg02, #1
	mov	arg04, #234
	mov	arg05, #117
	call	#_outtextxyc
'   outtextxyc(36,1,string("Date"),c_yellow,c_blue)
	mov	arg03, ##@LR__0249
	mov	arg01, #36
	mov	arg02, #1
	mov	arg04, #234
	mov	arg05, #117
	call	#_outtextxyc
'   outtextxyc(45,1,string("Time"),c_yellow,c_blue)
	mov	arg03, ##@LR__0250
	mov	arg01, #45
	mov	arg02, #1
	mov	arg04, #234
	mov	arg05, #117
	call	#_outtextxyc
'   outtextxy(44,2,string("12:34"))
	mov	arg03, ##@LR__0251
	mov	arg01, #44
	mov	arg02, #2
	call	#_outtextxy
'   outtextxy(33,2,string("2021.03.23"))
	mov	arg03, ##@LR__0252
	mov	arg01, #33
	mov	arg02, #2
	call	#_outtextxy
'   teststring[0]:=16
	add	objptr, ##12264
	wrbyte	#16, objptr
'   teststring[1]:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, ##12265
'   repeat i from 2 to 8
	mov	local23, #2
LR__0079
	add	objptr, ##12264
	mov	arg03, objptr
	sub	objptr, ##12264
'     outtextxy(23,i,@teststring)
	mov	arg01, #23
	mov	arg02, local23
	call	#_outtextxy
	add	local23, #1
	cmps	local23, #9 wcz
 if_b	jmp	#LR__0079
'   teststring[0]:=17
	add	objptr, ##12264
	wrbyte	#17, objptr
	sub	objptr, ##12264
'   repeat i from 2 to 8
	mov	local23, #2
LR__0080
	add	objptr, ##12264
	mov	arg03, objptr
	sub	objptr, ##12264
'     outtextxy(31,i,@teststring)
	mov	arg01, #31
	mov	arg02, local23
	call	#_outtextxy
	add	local23, #1
	cmps	local23, #9 wcz
 if_b	jmp	#LR__0080
'   repeat i from 2 to 8
	mov	local23, #2
LR__0081
'     outtextxy(24,i,string("SUB-DIR"))
	mov	arg03, ##@LR__0253
	mov	arg01, #24
	mov	arg02, local23
	call	#_outtextxy
	add	local23, #1
	cmps	local23, #9 wcz
 if_b	jmp	#LR__0081
'   outtextxy(27,9,string("21356"))
	mov	arg03, ##@LR__0254
	mov	arg01, #27
	mov	arg02, #9
	call	#_outtextxy
'   outtextxy(27,10,string("12564"))
	mov	arg03, ##@LR__0255
	mov	arg01, #27
	mov	arg02, #10
	call	#_outtextxy
'   outtextxy(28,11,string("1128"))
	mov	arg03, ##@LR__0256
	mov	arg01, #28
	mov	arg02, #11
	call	#_outtextxy
'   outtextxy(26,12,string("105321"))
	mov	arg03, ##@LR__0257
	mov	arg01, #26
	mov	arg02, #12
	call	#_outtextxy
'   outtextxy(27,13,string("30831"))
	mov	arg03, ##@LR__0258
	mov	arg01, #27
	mov	arg02, #13
	call	#_outtextxy
'   outtextxy(29,14,string("856"))
	mov	arg03, ##@LR__0259
	mov	arg01, #29
	mov	arg02, #14
	call	#_outtextxy
'   outtextxy(27,15,string("31248"))
	mov	arg03, ##@LR__0260
	mov	arg01, #27
	mov	arg02, #15
	call	#_outtextxy
'   outtextxy(28,16,string("2316"))
	mov	arg03, ##@LR__0261
	mov	arg01, #28
	mov	arg02, #16
	call	#_outtextxy
'   outtextxy(27,17,string("17531"))
	mov	arg03, ##@LR__0262
	mov	arg01, #27
	mov	arg02, #17
	call	#_outtextxy
'   outtextxy(1,2,string("PropDOS"))
	mov	arg03, ##@LR__0263
	mov	arg01, #1
	mov	arg02, #2
	call	#_outtextxy
'   outtextxy(1,3,string("BASIC"))
	mov	arg03, ##@LR__0264
	mov	arg01, #1
	mov	arg02, #3
	call	#_outtextxy
'   outtextxy(1,4,string("Spin"))
	mov	arg03, ##@LR__0265
	mov	arg01, #1
	mov	arg02, #4
	call	#_outtextxy
'   outtextxy(1,5,string("Windows"))
	mov	arg03, ##@LR__0266
	mov	arg01, #1
	mov	arg02, #5
	call	#_outtextxy
'   outtextxy(1,6,string("Atari             emu"))
	mov	arg03, ##@LR__0267
	mov	arg01, #1
	mov	arg02, #6
	call	#_outtextxy
'   outtextxy(1,7,string("Amiga             emu"))
	mov	arg03, ##@LR__0268
	mov	arg01, #1
	mov	arg02, #7
	call	#_outtextxy
'   outtextxy(1,8,string("Propeller"))
	mov	arg03, ##@LR__0269
	mov	arg01, #1
	mov	arg02, #8
	call	#_outtextxy
'   outtextxy(1,9,string("DOS               SYS"))
	mov	arg03, ##@LR__0270
	mov	arg01, #1
	mov	arg02, #9
	call	#_outtextxy
'   outtextxy(1,10,string("DUP               SYS"))
	mov	arg03, ##@LR__0271
	mov	arg01, #1
	mov	arg02, #10
	call	#_outtextxy
'   outtextxy(1,11,string("Autoexec          BAT"))
	mov	arg03, ##@LR__0272
	mov	arg01, #1
	mov	arg02, #11
	call	#_outtextxy
'   outtextxy(1,12,string("pc                exe"))
	mov	arg03, ##@LR__0273
	mov	arg01, #1
	mov	arg02, #12
	call	#_outtextxy
'   outtextxy(1,13,string("win               com"))
	mov	arg03, ##@LR__0274
	mov	arg01, #1
	mov	arg02, #13
	call	#_outtextxy
'   outtextxy(1,14,string("DOOM              BAT"))
	mov	arg03, ##@LR__0275
	mov	arg01, #1
	mov	arg02, #14
	call	#_outtextxy
'   outtextxy(1,15,string("command           com"))
	mov	arg03, ##@LR__0276
	mov	arg01, #1
	mov	arg02, #15
	call	#_outtextxy
'   outtextxy(1,16,string("config            sys"))
	mov	arg03, ##@LR__0277
	mov	arg01, #1
	mov	arg02, #16
	call	#_outtextxy
'   outtextxy(1,17,string("msdos             sys"))
	mov	arg03, ##@LR__0278
	mov	arg01, #1
	mov	arg02, #17
	call	#_outtextxy
	add	objptr, ##12264
	mov	local73, objptr
	sub	objptr, ##12264
	loc	pa,	#(@LR__0084-@LR__0082)
	call	#FCACHE_LOAD_
LR__0082
	rep	@LR__0085, #50
LR__0083
'     teststring[i]:=$C4
	wrbyte	#196, local73
	add	local73, #1
LR__0084
LR__0085
'   teststring[50]:=0
	add	objptr, ##12314
	wrbyte	#0, objptr
'   teststring[0]:=$BA
	sub	objptr, #50
	wrbyte	#186, objptr
'   teststring[49]:=$BA
	add	objptr, #49
	wrbyte	#186, objptr
'   teststring[22]:=$C1
	sub	objptr, #27
	wrbyte	#193, objptr
'   teststring[32]:=$C1
	add	objptr, #10
	wrbyte	#193, objptr
'   teststring[43]:=$C1
	add	objptr, #11
	wrbyte	#193, objptr
	sub	objptr, #43
	mov	arg03, objptr
	sub	objptr, ##12264
'   outtextxy(0,18,@teststring)
	mov	arg01, #0
	mov	arg02, #18
	call	#_outtextxy
'   outtextxy(1,19,string("pc.exe                105321    2021.03.23 12:34"))
	mov	arg03, ##@LR__0279
	mov	arg01, #1
	mov	arg02, #19
	call	#_outtextxy
' 
' 
' 
'   waitvbl(12000)
	mov	arg01, ##12000
	call	#_waitvbl
	jmp	#LR__0004
	mov	ptra, fp
	call	#popregs_
_demo_ret
	ret

' 
' '*************************************************************************
' '                                                                        *
' '  VBlank functions                                                      *
' '                                                                        *
' '*************************************************************************
' 
' pub waitvbl(amount) | i
_waitvbl
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
' 
' ''---------- Wait for start of vblank. Amount=delay in frames
' 
' repeat i from 1 to amount
	mov	local02, #1
	cmps	local01, #1 wcz
 if_a	mov	local03, #1
 if_be	neg	local03, #1
	add	local01, local03
LR__0086
'   repeat until vblank==0
LR__0087
	add	objptr, ##12196
	rdlong	local04, objptr wz
	sub	objptr, ##12196
 if_e	jmp	#LR__0088
'     waitus(100)
	mov	arg01, #100
	call	#__system___waitus
	jmp	#LR__0087
LR__0088
'   repeat until vblank==1
LR__0089
	add	objptr, ##12196
	rdlong	local04, objptr
	sub	objptr, ##12196
	cmp	local04, #1 wz
 if_e	jmp	#LR__0090
'     waitus(100)
	mov	arg01, #100
	call	#__system___waitus
	jmp	#LR__0089
LR__0090
	add	local02, local03
	cmp	local02, local01 wz
 if_ne	jmp	#LR__0086
	mov	ptra, fp
	call	#popregs_
_waitvbl_ret
	ret

' 
' '*************************************************************************
' '                                                                        *
' '  Color functions                                                       *
' '                                                                        *
' '*************************************************************************
' 
' pub setscreencolors(ff,bb) | c ,i
_setscreencolors
	shl	arg01, #24
	shl	arg02, #16
	add	arg01, arg02
' 
' ''---------- Set font and back colors for all screen - from 256 color palette
' 
' c:=ff<<24+bb<<16
	add	objptr, #168
	mov	_var01, objptr
	sub	objptr, #168
	loc	pa,	#(@LR__0093-@LR__0091)
	call	#FCACHE_LOAD_
LR__0091
	rep	@LR__0094, ##3000
LR__0092
	rdlong	_var02, _var01
	and	_var02, ##65535
	or	_var02, arg01
'    buf[i]:= (buf[i] & $FFFF) |  c
	wrlong	_var02, _var01
	add	_var01, #4
LR__0093
LR__0094
_setscreencolors_ret
	ret

' 
' 
' pub setbordercolors(r,g,b) |color, i
_setbordercolors
	shl	arg01, #16
	shl	arg02, #8
	add	arg01, arg02
	add	arg01, arg03
' 
' ''---------- Set border color for all screen - rgb
' 
' color:=r<<16+g<<8+b
	add	objptr, #40
	mov	_var01, objptr
	sub	objptr, #40
	loc	pa,	#(@LR__0097-@LR__0095)
	call	#FCACHE_LOAD_
LR__0095
	rep	@LR__0098, #32
LR__0096
'   bordercolor[i]:=color
	wrlong	arg01, _var01
	add	_var01, #4
LR__0097
LR__0098
_setbordercolors_ret
	ret

' 
' 
' 
' pub setfontcolor(x,y,c) |   place, color
_setfontcolor
	qmul	arg02, #100
	getqx	_var01
	add	arg01, _var01
' 
' ''---------- Set the colors for the character at line (0..29) and position (0..99)
' 
' place:=(x)+(y*100)
' 
' if (place>2999)
	cmps	arg01, ##2999 wcz
'   place:=2999
 if_a	mov	arg01, ##2999
	mov	_var02, arg01
	shl	_var02, #2
	add	objptr, #168
	add	_var02, objptr
	rdlong	_var03, _var02
	and	_var03, ##16777215
	shl	arg03, #24
	or	_var03, arg03
' 
' color:=(buf[place] &$FFFFFF) | (c<<24)
	shl	arg01, #2
	add	arg01, objptr
' buf[place]:=color
	wrlong	_var03, arg01
	sub	objptr, #168
_setfontcolor_ret
	ret

' 
' 
' pub setbackcolor(x,y,c) | place, color
_setbackcolor
	qmul	arg02, #100
	getqx	_var01
	add	arg01, _var01
' 
' ''---------- Set the background color at line (0..29) and position (0..99)
' 
' place:=(x)+(y*100)
' 
' if (place>2999)
	cmps	arg01, ##2999 wcz
'   place:=2999
 if_a	mov	arg01, ##2999
	mov	_var02, arg01
	shl	_var02, #2
	add	objptr, #168
	add	_var02, objptr
	rdlong	_var03, _var02
	and	_var03, ##-16711681
	shl	arg03, #16
	or	_var03, arg03
' 
' color:=(buf[place] &$FF00FFFF) | (c<<16)
	shl	arg01, #2
	add	arg01, objptr
' buf[place]:=color
	wrlong	_var03, arg01
	sub	objptr, #168
_setbackcolor_ret
	ret

' 
' 
' '*************************************************************************
' '                                                                        *
' '  Text functions                                                        *
' '                                                                        *
' '*************************************************************************
' 
' pub outtextxy(x,y,text) | iii
_outtextxy
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
' 
' ''--------- Output a string at position x,y - set the colors first
' 
' repeat iii from 0 to strsize(text)-1
	mov	local02, #0
	mov	arg01, arg03
	mov	local03, #0
	loc	pa,	#(@LR__0100-@LR__0099)
	call	#FCACHE_LOAD_
LR__0099
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0099
LR__0100
	mov	result1, local03
	mov	local05, result1
	sub	local05, #1
	cmps	local05, #0 wcz
 if_a	mov	local06, #1
 if_be	neg	local06, #1
	add	local05, local06
	qmul	arg02, #100
	getqx	local07
	add	local07, local01
	loc	pa,	#(@LR__0102-@LR__0101)
	call	#FCACHE_LOAD_
LR__0101
	mov	local08, local07
	add	local08, local02
	shl	local08, #2
	add	objptr, #168
	add	local08, objptr
	rdlong	local09, local08
	andn	local09, #255
	mov	local10, arg03
	add	local10, local02
	rdbyte	local11, local10
	or	local09, local11
'   buf[100*y+x+iii]:=(buf[100*y+x+iii] & $FFFFFF00)  | byte[text+iii]
	wrlong	local09, local08
	add	local02, local06
	cmp	local02, local05 wz
	sub	objptr, #168
 if_ne	jmp	#LR__0101
LR__0102
	mov	ptra, fp
	call	#popregs_
_outtextxy_ret
	ret

' 
' pub outtextxyc(x,y,text,f,b) | iii,c
_outtextxyc
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	shl	arg04, #24
	shl	arg05, #16
	add	arg04, arg05
' 
' ''--------- Output a string at position x,y and colors b,f
' 
' c:=f<<24+b<<16
' repeat iii from 0 to strsize(text)-1
	mov	local02, #0
	mov	arg01, arg03
	mov	local03, #0
	loc	pa,	#(@LR__0104-@LR__0103)
	call	#FCACHE_LOAD_
LR__0103
	rdbyte	local04, arg01 wz
 if_ne	add	local03, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0103
LR__0104
	mov	result1, local03
	mov	local05, result1
	sub	local05, #1
	cmps	local05, #0 wcz
 if_a	mov	local06, #1
 if_be	neg	local06, #1
	add	local05, local06
	qmul	arg02, #100
	getqx	local07
	add	local07, local01
	loc	pa,	#(@LR__0106-@LR__0105)
	call	#FCACHE_LOAD_
LR__0105
	mov	local08, local07
	add	local08, local02
	mov	local09, local08
	shl	local09, #2
	add	objptr, #168
	add	local09, objptr
	rdlong	local10, local09
	andn	local10, #255
	mov	local11, arg03
	add	local11, local02
	rdbyte	local12, local11
	or	local10, local12
'   buf[100*y+x+iii]:=(buf[100*y+x+iii] & $FFFFFF00)  | byte[text+iii]
	wrlong	local10, local09
	shl	local08, #2
	add	local08, objptr
	rdlong	local13, local08
	and	local13, ##65535
	or	local13, arg04
'   buf[100*y+x+iii]:=(buf[100*y+x+iii] & $0000FFFF)  | c
	wrlong	local13, local08
	add	local02, local06
	cmp	local02, local05 wz
	sub	objptr, #168
 if_ne	jmp	#LR__0105
LR__0106
	mov	ptra, fp
	call	#popregs_
_outtextxyc_ret
	ret

' 
' 
' 
' pub write(text) | iii,c,ncx,ncy
_write
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	add	objptr, ##12172
	rdlong	local02, objptr
	shl	local02, #24
	add	objptr, #4
	rdlong	local03, objptr
	shl	local03, #16
	add	local02, local03
' 
' ''--------- Output a string at the cursor position x,y, move the cursor
' 
' c:=write_color<<24+write_background<<16
' 'debug(uhex_long(write_color))
' ncy:=cursor_y
	sub	objptr, #7
	rdbyte	local04, objptr
' ncx:=cursor_x+strsize(text)
	sub	objptr, #1
	rdbyte	local05, objptr
	sub	objptr, ##12168
	mov	arg01, local01
	mov	local06, #0
	loc	pa,	#(@LR__0108-@LR__0107)
	call	#FCACHE_LOAD_
LR__0107
	rdbyte	local07, arg01 wz
 if_ne	add	local06, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0107
LR__0108
	mov	result1, local06
	add	local05, local06
	mov	local08, local05
	loc	pa,	#(@LR__0110-@LR__0109)
	call	#FCACHE_LOAD_
' repeat while ncx>99
LR__0109
	cmps	local08, #99 wcz
'   ncx-=100
 if_a	sub	local08, #100
'   ncy+=1
 if_a	add	local04, #1
 if_a	jmp	#LR__0109
LR__0110
' repeat while ncy>29
LR__0111
	cmps	local04, #29 wcz
 if_be	jmp	#LR__0112
'   ncy-=1
	sub	local04, #1
'   scrollup()
	call	#_scrollup
'   cursor_y-=1
	add	objptr, ##12169
	rdbyte	local05, objptr
	sub	local05, #1
	wrbyte	local05, objptr
	sub	objptr, ##12169
	jmp	#LR__0111
LR__0112
' 
' repeat iii from 0 to strsize(text)-1
	mov	local09, #0
	mov	arg01, local01
	mov	local06, #0
	loc	pa,	#(@LR__0114-@LR__0113)
	call	#FCACHE_LOAD_
LR__0113
	rdbyte	local07, arg01 wz
 if_ne	add	local06, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0113
LR__0114
	mov	result1, local06
	mov	local10, result1
	sub	local10, #1
	cmps	local10, #0 wcz
 if_a	mov	local11, #1
 if_be	neg	local11, #1
	add	local10, local11
	loc	pa,	#(@LR__0116-@LR__0115)
	call	#FCACHE_LOAD_
LR__0115
	add	objptr, ##12169
	rdbyte	local12, objptr
	qmul	local12, #100
	getqx	local13
	sub	objptr, #1
	rdbyte	local12, objptr
	add	local13, local12
	add	local13, local09
	shl	local13, #2
	sub	objptr, ##12000
	add	local13, objptr
	rdlong	local14, local13
	and	local14, ##65535
	or	local14, local02
' 
'   buf[100*cursor_y+cursor_x+iii]:=buf[100*cursor_y+cursor_x+iii] &$FFFF | c
	wrlong	local14, local13
	add	local09, local11
	cmp	local09, local10 wz
	sub	objptr, #168
 if_ne	jmp	#LR__0115
LR__0116
' 
' outtextxy(cursor_x,cursor_y,text)
	add	objptr, ##12168
	rdbyte	arg01, objptr
	add	objptr, #1
	rdbyte	arg02, objptr
	sub	objptr, ##12169
	mov	arg03, local01
	call	#_outtextxy
' 
' cursor_x:=ncx
	add	objptr, ##12168
	wrbyte	local08, objptr
' cursor_y:=ncy
	add	objptr, #1
	wrbyte	local04, objptr
	sub	objptr, ##12169
	mov	ptra, fp
	call	#popregs_
_write_ret
	ret

' 
' pub writeln(text)
_writeln
	mov	COUNT_, #1
	call	#pushregs_
' 
' '--------- Output a string at the cursor position x,y, move the cursor to the next line
' 
' write(text)
	call	#_write
' cursor_x:=0
	add	objptr, ##12168
	wrbyte	#0, objptr
' cursor_y+=1
	add	objptr, #1
	rdbyte	local01, objptr
	add	local01, #1
	wrbyte	local01, objptr
' if (cursor_y>29)
	rdbyte	local01, objptr
	sub	objptr, ##12169
	cmps	local01, #29 wcz
 if_be	jmp	#LR__0117
'   scrollup()
	call	#_scrollup
'   cursor_y:=29
	add	objptr, ##12169
	wrbyte	#29, objptr
	sub	objptr, ##12169
LR__0117
	mov	ptra, fp
	call	#popregs_
_writeln_ret
	ret

' 
' pub cls(fc,bc)   :c
_cls
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, local01
	shl	local03, #24
	mov	local04, local02
	shl	local04, #16
	add	local03, local04
	add	local03, #32
' 
' ''---------- Clear the screen, set its foreground/background color
' 
' c:=fc<<24+bc<<16+$20
	add	objptr, #168
	mov	arg01, objptr
	sub	objptr, #168
' longfill(@buf,c,3000)
	mov	arg02, local03
	mov	arg03, ##3000
	call	#\builtin_longfill_
'  setwritecolors(fc,bc)
' 
' ''---------- Set colors for write and writeln
' 
' write_color:=ff
	add	objptr, ##12172
	wrlong	local01, objptr
' write_background:=bb
	add	objptr, #4
	wrlong	local02, objptr
	sub	objptr, ##12176
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_cls_ret
	ret

' 
' pub scrollup() | i
_scrollup
	mov	COUNT_, #2
	call	#pushregs_
	add	objptr, #168
	mov	arg01, objptr
	sub	objptr, #168
	mov	arg02, arg01
	add	arg02, #400
' 
' ''-----------  Scroll the screen one line up
' 
' longmove(@buf,@buf+400,2900)
	mov	arg03, ##2900
	call	#__system__longmove
	add	objptr, ##11768
	mov	local01, objptr
	sub	objptr, ##11768
	loc	pa,	#(@LR__0120-@LR__0118)
	call	#FCACHE_LOAD_
LR__0118
	rep	@LR__0121, #100
LR__0119
	rdlong	local02, local01
	and	local02, ##-65536
	or	local02, #32
'   buf[i]:=(buf[i] & $FFFF0000) | 32
	wrlong	local02, local01
	add	local01, #4
LR__0120
LR__0121
	mov	ptra, fp
	call	#popregs_
_scrollup_ret
	ret

' 
' pub scrolldown() | i
_scrolldown
	mov	COUNT_, #2
	call	#pushregs_
	add	objptr, #168
	mov	arg02, objptr
	sub	objptr, #168
	mov	arg01, arg02
	add	arg01, #400
' 
' ''----------- Scroll the screen one line down
' 
' longmove(@buf+400,@buf,2900)
	mov	arg03, ##2900
	call	#__system__longmove
	add	objptr, #168
	mov	local01, objptr
	sub	objptr, #168
	loc	pa,	#(@LR__0124-@LR__0122)
	call	#FCACHE_LOAD_
LR__0122
	rep	@LR__0125, #100
LR__0123
	rdlong	local02, local01
	and	local02, ##-65536
	or	local02, #32
'   buf[i]:=(buf[i] & $FFFF0000) | 32
	wrlong	local02, local01
	add	local01, #4
LR__0124
LR__0125
	mov	ptra, fp
	call	#popregs_
_scrolldown_ret
	ret

' 
' 
' pub inttostr(i):result |q,pos,k,j
_inttostr
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
' 
' ''---------- Convert a integer to dec string, return a pointer
' 
' j:=i
	mov	local02, local01 wz
' pos:=10
	mov	local03, #10
' k:=0
	mov	local04, #0
' 
' if (j==0)
 if_ne	jmp	#LR__0126
'   n_string[0]:=48
	add	objptr, ##12200
	wrbyte	#48, objptr
'   n_string[1]:=0
	add	objptr, #1
	wrbyte	#0, objptr
	sub	objptr, ##12201
' 
' else
	jmp	#LR__0133
LR__0126
'   if (j<0)
	cmps	local02, #0 wcz
'     j:=0-j
 if_b	neg	local02, local02
'     k:=45
 if_b	mov	local04, #45
' 
'   n_string[11]:=0
	add	objptr, ##12211
	wrbyte	#0, objptr
	sub	objptr, ##12211
	loc	pa,	#(@LR__0128-@LR__0127)
	call	#FCACHE_LOAD_
'   repeat while (pos>-1)
LR__0127
	cmps	local03, ##-1 wcz
 if_be	jmp	#LR__0129
	mov	muldiva_, local02
	mov	muldivb_, #10
	call	#divide_
	mov	local05, muldiva_
'     q:=j//10
'     q:=48+q
	add	local05, #48
	mov	local06, local03
	add	objptr, ##12200
	add	local06, objptr
'     n_string[pos]:=q
	wrbyte	local05, local06
'     j:=j/10
	mov	local02, muldivb_
'     pos-=1
	sub	local03, #1
	sub	objptr, ##12200
	jmp	#LR__0127
LR__0128
LR__0129
'   repeat while n_string[0]==48
LR__0130
	add	objptr, ##12200
	rdbyte	local07, objptr
	sub	objptr, ##12200
	cmp	local07, #48 wz
 if_ne	jmp	#LR__0131
	add	objptr, ##12200
	mov	arg01, objptr
	sub	objptr, ##12200
	mov	arg02, arg01
	add	arg02, #1
'     bytemove(@n_string,@n_string+1,12)
	mov	arg03, #12
	call	#__system____builtin_memmove
	jmp	#LR__0130
LR__0131
' 
'   if k==45
	cmp	local04, #45 wz
 if_ne	jmp	#LR__0132
	add	objptr, ##12200
	mov	arg02, objptr
	sub	objptr, ##12200
	mov	arg01, arg02
	add	arg01, #1
'      bytemove(@n_string+1,@n_string,12)
	mov	arg03, #12
	call	#__system____builtin_memmove
'      n_string[0]:=k
	add	objptr, ##12200
	wrbyte	local04, objptr
	sub	objptr, ##12200
LR__0132
LR__0133
	add	objptr, ##12200
	mov	result1, objptr
	sub	objptr, ##12200
' 
' q:=@n_string
' return q
	mov	ptra, fp
	call	#popregs_
_inttostr_ret
	ret

' 
' 
' pub inttohex(i,d):result |q,pos,k,j
_inttohex
' 
' ''----------  Convert integer to hex string with d digits, return a pointer
' 
' j:=i
	mov	_var01, arg02
	sub	_var01, #1
' pos:=d-1
	mov	_var02, _var01
' k:=0
	add	objptr, ##12200
	add	arg02, objptr
' n_string[d]:=0
	wrbyte	#0, arg02
' repeat k from 0 to d-1
	mov	_var03, #0
	cmps	_var01, #0 wcz
	sub	objptr, ##12200
 if_a	mov	_var04, #1
 if_be	neg	_var04, #1
	mov	_var05, _var04
	add	_var01, _var04
	loc	pa,	#(@LR__0135-@LR__0134)
	call	#FCACHE_LOAD_
LR__0134
	mov	_var06, _var03
	add	objptr, ##12200
	add	_var06, objptr
'   n_string[k]:=48
	wrbyte	#48, _var06
	add	_var03, _var05
	cmp	_var03, _var01 wz
	sub	objptr, ##12200
 if_ne	jmp	#LR__0134
LR__0135
' 
' if (j<>0)
	cmp	arg01, #0 wz
 if_e	jmp	#LR__0138
' 
'   repeat while (pos>-1)
LR__0136
	cmps	_var02, ##-1 wcz
 if_be	jmp	#LR__0137
	abs	_var04, arg01 wc
	and	_var04, #15
 if_b	neg	_var04, _var04
	mov	_var07, _var04
'     q:=j//16
'     if (q>9)
	cmps	_var07, #9 wcz
'       q:=q+7
 if_a	add	_var07, #7
'     q:=48+q
	add	_var07, #48
	mov	_var08, _var02
	add	objptr, ##12200
	add	_var08, objptr
'     n_string[pos]:=q
	wrbyte	_var07, _var08
'     j:=j/16
	abs	_var04, arg01 wc
	shr	_var04, #4
	sub	objptr, ##12200
 if_b	neg	_var04, _var04
	mov	arg01, _var04
'     pos-=1
	sub	_var02, #1
	jmp	#LR__0136
LR__0137
LR__0138
	add	objptr, ##12200
	mov	result1, objptr
	sub	objptr, ##12200
' 
' q:=@n_string
' return q
_inttohex_ret
	ret

' 
' 
' pub setmode(mode)
_setmode
' 
' if (mode==0)
	cmp	arg01, #0 wz
 if_ne	jmp	#LR__0141
' 
'   timings[0]:= $70810000 + hdmi_base<<17 + 16          'before sync
	add	objptr, ##12212
	wrlong	##1887502352, objptr
'   timings[1]:= $70810000 + hdmi_base<<17 + 80          'sync
	add	objptr, #4
	wrlong	##1887502416, objptr
'   timings[2]:= $70810000 + hdmi_base<<17 + 20          'before visible
	add	objptr, #4
	wrlong	##1887502356, objptr
'   timings[3]:= $70810000 + hdmi_base<<17 + 1024        'visible 1024
	add	objptr, #4
	wrlong	##1887503360, objptr
'   timings[4]:= $70810000 + hdmi_base<<17 + 112         'immediate 112
	add	objptr, #4
	wrlong	##1887502448, objptr
'   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
	add	objptr, #4
	wrlong	##545783816, objptr
'   timings[6]:= 48
	add	objptr, #4
	wrlong	#48, objptr
'   timings[7]:= 16
	add	objptr, #4
	wrlong	#16, objptr
'   timings[8]:= 16
	add	objptr, #4
	wrlong	#16, objptr
'   timings[9]:= 16
	add	objptr, #4
	wrlong	#16, objptr
	sub	objptr, ##12248
' 
'   clkfreq:=354693878
	wrlong	##354693878, #20
'   org
	loc	pa,	#(@LR__0140-@LR__0139)
	call	#FCACHE_LOAD_
LR__0139
	org	0
	hubset	##29584635
LR__0140
	orgh
LR__0141
' 
' 
' if (mode==1)   ' 1026 px per line
	cmp	arg01, #1 wz
 if_ne	jmp	#LR__0144
' 
'   timings[0]:= $70810000 + hdmi_base<<17 + 30          'before sync
	add	objptr, ##12212
	wrlong	##1887502366, objptr
'   timings[1]:= $70810000 + hdmi_base<<17 + 80          'sync
	add	objptr, #4
	wrlong	##1887502416, objptr
'   timings[2]:= $70810000 + hdmi_base<<17 + 20          'before visible
	add	objptr, #4
	wrlong	##1887502356, objptr
'   timings[3]:= $70810000 + hdmi_base<<17 + 896         'visible 896
	add	objptr, #4
	wrlong	##1887503232, objptr
'   timings[4]:= $70810000 + hdmi_base<<17 + 48          'immediate 48
	add	objptr, #4
	wrlong	##1887502384, objptr
'   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
	add	objptr, #4
	wrlong	##545783816, objptr
'   timings[6]:= 24
	add	objptr, #4
	wrlong	#24, objptr
'   timings[7]:= 32
	add	objptr, #4
	wrlong	#32, objptr
'   timings[8]:= 32
	add	objptr, #4
	wrlong	#32, objptr
'   timings[9]:= 32
	add	objptr, #4
	wrlong	#32, objptr
	sub	objptr, ##12248
' 
'   clkfreq:=319215686
	wrlong	##319215686, #20
'   org
	loc	pa,	#(@LR__0143-@LR__0142)
	call	#FCACHE_LOAD_
LR__0142
	org	0
	hubset	##30092795
LR__0143
	orgh
LR__0144
' 
' 
' if (mode==2) ' 912 pixes per line     ' 283_751_600 80x PAL  - real settings: 64 908 283750000 - 0.9999944
	cmp	arg01, #2 wz
 if_ne	jmp	#LR__0147
' 
'   timings[0]:= $70810000 + hdmi_base<<17 + 16           'before sync
	add	objptr, ##12212
	wrlong	##1887502352, objptr
'   timings[1]:= $70810000 + hdmi_base<<17 + 64           'sync
	add	objptr, #4
	wrlong	##1887502400, objptr
'   timings[2]:= $70810000 + hdmi_base<<17 + 16           'before visible
	add	objptr, #4
	wrlong	##1887502352, objptr
'   timings[3]:= $70810000 + hdmi_base<<17 + 816          'visible 1024
	add	objptr, #4
	wrlong	##1887503152, objptr
'   timings[4]:= $70810000 + hdmi_base<<17 + 8            'immediate 112
	add	objptr, #4
	wrlong	##1887502344, objptr
'   timings[5]:= $20880000 + hdmi_base<<17 + 8            'imm+lut, 1 char
	add	objptr, #4
	wrlong	##545783816, objptr
'   timings[6]:= 8
	add	objptr, #4
	wrlong	#8, objptr
'   timings[7]:= 32
	add	objptr, #4
	wrlong	#32, objptr
'   timings[8]:= 64
	add	objptr, #4
	wrlong	#64, objptr
' 
'   timings[9]:= 32
	add	objptr, #4
	wrlong	#32, objptr
	sub	objptr, ##12248
' 
'   clkfreq:=283750000
	wrlong	##283750000, #20
'   org
	loc	pa,	#(@LR__0146-@LR__0145)
	call	#FCACHE_LOAD_
LR__0145
	org	0
	hubset	##33524731
LR__0146
	orgh
LR__0147
' 
' if (mode==256)
	cmp	arg01, #256 wz
 if_ne	jmp	#LR__0150
' 
'   timings[0]:= $70810000 + hdmi_base<<17 + 80          'before sync
	add	objptr, ##12212
	wrlong	##1887502416, objptr
'   timings[1]:= $70810000 + hdmi_base<<17 + 160         'sync
	add	objptr, #4
	wrlong	##1887502496, objptr
'   timings[2]:= $70810000 + hdmi_base<<17 + 84          'before visible
	add	objptr, #4
	wrlong	##1887502420, objptr
'   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
	add	objptr, #4
	wrlong	##1887503152, objptr
'   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
	add	objptr, #4
	wrlong	##1887502344, objptr
'   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
	add	objptr, #4
	wrlong	##545783816, objptr
'   timings[6]:= 8
	add	objptr, #4
	wrlong	#8, objptr
'   timings[7]:= 8
	add	objptr, #4
	wrlong	#8, objptr
'   timings[8]:= 12
	add	objptr, #4
	wrlong	#12, objptr
'   timings[9]:= 8
	add	objptr, #4
	wrlong	#8, objptr
	sub	objptr, ##12248
' 
'   clkfreq:=357959184
	wrlong	##357959184, #20
'   org
	loc	pa,	#(@LR__0149-@LR__0148)
	call	#FCACHE_LOAD_
LR__0148
	org	0
	hubset	##29582587
LR__0149
	orgh
LR__0150
' 
' if (mode==257)  '1026 px
	cmp	arg01, #257 wz
 if_ne	jmp	#LR__0153
' 
'   timings[0]:= $70810000 + hdmi_base<<17 + 80          'before sync
	add	objptr, ##12212
	wrlong	##1887502416, objptr
'   timings[1]:= $70810000 + hdmi_base<<17 + 50          'sync
	add	objptr, #4
	wrlong	##1887502386, objptr
'   timings[2]:= $70810000 + hdmi_base<<17 + 80          'before visible
	add	objptr, #4
	wrlong	##1887502416, objptr
'   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
	add	objptr, #4
	wrlong	##1887503152, objptr
'   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
	add	objptr, #4
	wrlong	##1887502344, objptr
'   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
	add	objptr, #4
	wrlong	##545783816, objptr
'   timings[6]:= 8
	add	objptr, #4
	wrlong	#8, objptr
'   timings[7]:= 8
	add	objptr, #4
	wrlong	#8, objptr
'   timings[8]:= 12
	add	objptr, #4
	wrlong	#12, objptr
'   timings[9]:= 8
	add	objptr, #4
	wrlong	#8, objptr
	sub	objptr, ##12248
' 
'   clkfreq:=322162162
	wrlong	##322162162, #20
'   org
	loc	pa,	#(@LR__0152-@LR__0151)
	call	#FCACHE_LOAD_
LR__0151
	org	0
	hubset	##26366971
LR__0152
	orgh
LR__0153
' 
' if (mode==258)  '912 px
	cmp	arg01, #258 wz
 if_ne	jmp	#LR__0156
' 
'   timings[0]:= $70810000 + hdmi_base<<17 + 24          'before sync
	add	objptr, ##12212
	wrlong	##1887502360, objptr
'   timings[1]:= $70810000 + hdmi_base<<17 + 48         'sync
	add	objptr, #4
	wrlong	##1887502384, objptr
'   timings[2]:= $70810000 + hdmi_base<<17 + 24          'before visible
	add	objptr, #4
	wrlong	##1887502360, objptr
'   timings[3]:= $70810000 + hdmi_base<<17 + 816         'visible 816
	add	objptr, #4
	wrlong	##1887503152, objptr
'   timings[4]:= $70810000 + hdmi_base<<17 + 8           'immediate 8
	add	objptr, #4
	wrlong	##1887502344, objptr
'   timings[5]:= $20880000 + hdmi_base<<17 + 8           'imm+lut, 1 char
	add	objptr, #4
	wrlong	##545783816, objptr
'   timings[6]:= 8
	add	objptr, #4
	wrlong	#8, objptr
'   timings[7]:= 8
	add	objptr, #4
	wrlong	#8, objptr
'   timings[8]:= 12
	add	objptr, #4
	wrlong	#12, objptr
'   timings[9]:= 8
	add	objptr, #4
	wrlong	#8, objptr
	sub	objptr, ##12248
' 
'   clkfreq:=286363636
	wrlong	##286363636, #20
'   org
	loc	pa,	#(@LR__0155-@LR__0154)
	call	#FCACHE_LOAD_
LR__0154
	org	0
	hubset	##22362875
LR__0155
	orgh
LR__0156
_setmode_ret
	ret
hubexit
	jmp	#cogexit

__system____builtin_memmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0164
	loc	pa,	#(@LR__0158-@LR__0157)
	call	#FCACHE_LOAD_
LR__0157
	cmps	arg03, #3 wcz
 if_be	jmp	#LR__0159
	rdlong	_var02, arg02
	wrlong	_var02, arg01
	add	arg01, #4
	add	arg02, #4
	sub	arg03, #4
	jmp	#LR__0157
LR__0158
LR__0159
	mov	_var03, arg03 wz
 if_e	jmp	#LR__0170
	loc	pa,	#(@LR__0162-@LR__0160)
	call	#FCACHE_LOAD_
LR__0160
	rep	@LR__0163, _var03
LR__0161
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
	add	arg01, #1
	add	arg02, #1
LR__0162
LR__0163
	jmp	#LR__0170
LR__0164
	add	arg01, arg03
	add	arg02, arg03
	mov	_var04, arg03 wz
 if_e	jmp	#LR__0169
	loc	pa,	#(@LR__0167-@LR__0165)
	call	#FCACHE_LOAD_
LR__0165
	rep	@LR__0168, _var04
LR__0166
	sub	arg01, #1
	sub	arg02, #1
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
LR__0167
LR__0168
LR__0169
LR__0170
	mov	result1, _var01
__system____builtin_memmove_ret
	ret

__system__longmove
	mov	_var01, arg01
	cmps	arg01, arg02 wcz
 if_ae	jmp	#LR__0175
	mov	_var02, arg03 wz
 if_e	jmp	#LR__0181
	loc	pa,	#(@LR__0173-@LR__0171)
	call	#FCACHE_LOAD_
LR__0171
	rep	@LR__0174, _var02
LR__0172
	rdlong	_var03, arg02
	wrlong	_var03, arg01
	add	arg01, #4
	add	arg02, #4
LR__0173
LR__0174
	jmp	#LR__0181
LR__0175
	mov	_var04, arg03
	shl	_var04, #2
	add	arg01, _var04
	add	arg02, _var04
	mov	_var05, arg03 wz
 if_e	jmp	#LR__0180
	loc	pa,	#(@LR__0178-@LR__0176)
	call	#FCACHE_LOAD_
LR__0176
	rep	@LR__0179, _var05
LR__0177
	sub	arg01, #4
	sub	arg02, #4
	rdlong	_var03, arg02
	wrlong	_var03, arg01
LR__0178
LR__0179
LR__0180
LR__0181
	mov	result1, _var01
__system__longmove_ret
	ret

__system___waitus
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	ptr___system__dat__, #16
	rdlong	local02, ptr___system__dat__ wz
	sub	ptr___system__dat__, #16
 if_ne	jmp	#LR__0182
	rdlong	muldiva_, #20
	mov	muldivb_, ##1000000
	call	#unsdivide_
	mov	local02, muldivb_
	add	ptr___system__dat__, #16
	wrlong	muldivb_, ptr___system__dat__
	sub	ptr___system__dat__, #16
LR__0182
	qmul	local01, local02
	getqx	arg01
	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitus_ret
	ret

LR__0183
	byte	"A HDMI Nostalgic 100x30 text with border driver demo"
	byte	0
LR__0184
	byte	"It uses 8x16 font"
	byte	0
LR__0185
	byte	"This is a P2 so every letter can have its own foreground and background color"
	byte	0
LR__0186
	byte	"Every line can have its own border color"
	byte	0
LR__0187
	byte	"This time the hub RAM is used for the color buffer"
	byte	0
LR__0188
	byte	"You can set colors for all the screen using one function call"
	byte	0
LR__0189
	byte	"You can set border color for all the screen using one function call, too"
	byte	0
LR__0190
	byte	"1234567890"
	byte	0
LR__0191
	byte	"This is MS-DOS like font style..."
	byte	0
LR__0192
	byte	" "
	byte	0
LR__0193
	byte	"C:\>"
	byte	0
LR__0194
	byte	" "
	byte	0
LR__0195
	byte	" "
	byte	0
LR__0196
	byte	" "
	byte	0
LR__0197
	byte	"        "
	byte	0
LR__0198
	byte	" "
	byte	0
LR__0199
	byte	","
	byte	0
LR__0200
	byte	" "
	byte	0
LR__0201
	byte	"  File    Options    View    Special"
	byte	0
LR__0202
	byte	"        ",4
	byte	0
LR__0203
	byte	" "
	byte	0
LR__0204
	byte	","
	byte	0
LR__0205
	byte	4
	byte	0
LR__0206
	byte	" "
	byte	0
LR__0207
	byte	"     ... but Atari ST-like mono font can also be used."
	byte	0
LR__0208
	byte	"         We also switched the graphics mode to PAL like 50 Hz, 624 lines."
	byte	0
LR__0209
	byte	" "
	byte	0
LR__0210
	byte	"         Although the font is mono style, we are still in the color mode here."
	byte	0
LR__0211
	byte	"blue"
	byte	0
LR__0212
	byte	"green"
	byte	0
LR__0213
	byte	"cyan"
	byte	0
LR__0214
	byte	"red"
	byte	0
LR__0215
	byte	"magenta"
	byte	0
LR__0216
	byte	"brown"
	byte	0
LR__0217
	byte	"light gray"
	byte	0
LR__0218
	byte	"dark gray"
	byte	0
LR__0219
	byte	"light blue"
	byte	0
LR__0220
	byte	"light green"
	byte	0
LR__0221
	byte	"light cyan"
	byte	0
LR__0222
	byte	"light red"
	byte	0
LR__0223
	byte	"light magenta"
	byte	0
LR__0224
	byte	"yellow"
	byte	0
LR__0225
	byte	"white"
	byte	0
LR__0226
	byte	"C:\>"
	byte	0
LR__0227
	byte	"p"
	byte	0
LR__0228
	byte	"c"
	byte	0
LR__0229
	byte	" "
	byte	0
LR__0230
	byte	"The Propeller Commander, Copyleft ("
	byte	0
LR__0231
	byte	") 2021 pik33@o2.pl"
	byte	0
LR__0232
	byte	" "
	byte	0
LR__0233
	byte	"C:\>"
	byte	0
LR__0234
	byte	" Status "
	byte	0
LR__0235
	byte	" C:\ "
	byte	0
LR__0236
	byte	"The Propeller Commander, Version 0.00"
	byte	0
LR__0237
	byte	"Copyleft ("
	byte	0
LR__0238
	byte	") 2021 pik33@o2.pl"
	byte	0
LR__0239
	byte	"524,288 Bytes Memory"
	byte	0
LR__0240
	byte	","
	byte	0
LR__0241
	byte	"Bytes Free"
	byte	0
LR__0242
	byte	"32,212,254,720 total bytes on drive C:"
	byte	0
LR__0243
	byte	"3,989,123,640 bytes free on drive C:"
	byte	0
LR__0244
	byte	"123 files use 128,956,384 bytes in"
	byte	0
LR__0245
	byte	"C:"
	byte	0
LR__0246
	byte	"No 'dirinfo' file in this directory"
	byte	0
LR__0247
	byte	"Name"
	byte	0
LR__0248
	byte	"Size"
	byte	0
LR__0249
	byte	"Date"
	byte	0
LR__0250
	byte	"Time"
	byte	0
LR__0251
	byte	"12:34"
	byte	0
LR__0252
	byte	"2021.03.23"
	byte	0
LR__0253
	byte	"SUB-DIR"
	byte	0
LR__0254
	byte	"21356"
	byte	0
LR__0255
	byte	"12564"
	byte	0
LR__0256
	byte	"1128"
	byte	0
LR__0257
	byte	"105321"
	byte	0
LR__0258
	byte	"30831"
	byte	0
LR__0259
	byte	"856"
	byte	0
LR__0260
	byte	"31248"
	byte	0
LR__0261
	byte	"2316"
	byte	0
LR__0262
	byte	"17531"
	byte	0
LR__0263
	byte	"PropDOS"
	byte	0
LR__0264
	byte	"BASIC"
	byte	0
LR__0265
	byte	"Spin"
	byte	0
LR__0266
	byte	"Windows"
	byte	0
LR__0267
	byte	"Atari             emu"
	byte	0
LR__0268
	byte	"Amiga             emu"
	byte	0
LR__0269
	byte	"Propeller"
	byte	0
LR__0270
	byte	"DOS               SYS"
	byte	0
LR__0271
	byte	"DUP               SYS"
	byte	0
LR__0272
	byte	"Autoexec          BAT"
	byte	0
LR__0273
	byte	"pc                exe"
	byte	0
LR__0274
	byte	"win               com"
	byte	0
LR__0275
	byte	"DOOM              BAT"
	byte	0
LR__0276
	byte	"command           com"
	byte	0
LR__0277
	byte	"config            sys"
	byte	0
LR__0278
	byte	"msdos             sys"
	byte	0
LR__0279
	byte	"pc.exe                105321    2021.03.23 12:34"
	byte	0
	alignl
_dat_
'-' 
'-' st_font                 file "st4font.def"
	byte	$00[55]
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$18[9]
	byte	$00[7]
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
	byte	$66[5]
	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[8]
	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
	byte	$00[9]
	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$18[5]
	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00[13]
	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
	byte	$00[8]
	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
	byte	$60[7]
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
	byte	$00[18]
	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
	byte	$30[9]
	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
	byte	$00[7]
	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
'-' 'vga_font                                file "st4font.def"
'-' vga_font                                file "vgafont.def"
	byte	$00[19]
	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$66[7]
	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
	byte	$00[11]
	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[14]
	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
	byte	$00[16]
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
	byte	$00[9]
	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
	byte	$18[8]
	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17]
	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[9]
	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
	byte	$18[6]
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[10]
	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
	byte	$33[6]
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
	byte	$00[6]
	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
	byte	$00[6]
	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18[15]
	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6c[9]
	byte	$00[5]
	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
	byte	$66[6]
	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
	byte	$00[12]
	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
	byte	$ff[9]
	byte	$00[7]
	byte	$ff[9]
	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$ff[7]
	byte	$00[9]
	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
	byte	$00[21]
	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
	byte	$00[8]
	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[8]
	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5]
	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
'-' 
'-' ataripalette            file "ataripalettep2.def"
	byte	$00[5]
	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
'-' 
'-' hdmi            setcmod #$100                           'enable HDMI mode
	byte	$3c, $00, $66, $fd
'-'                 drvl    #7<<6 + hdmi_base               'enable HDMI pins
	byte	$58, $80, $67, $fd
'-'                 wrpin   ##%10110_1111_0111_10_00000_0, #7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
	byte	$7b, $0b, $80, $ff, $c0, $01, $0f, $fc
'-'                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk (25 MHz)
	byte	$66, $66, $86, $ff, $1d, $9a, $65, $fd
'-' 
'-'                 setq    #8
	byte	$28, $10, $64, $fd
'-'                 rdlong  framebuf,  ptra++               'read pointers
	byte	$61, $0d, $05, $fb
'-' 
'-'                 setq2   #255
	byte	$29, $fe, $65, $fd
'-'                 rdlong  $000, paletteptr                'read palette
	byte	$8c, $00, $00, $fb
'-' 
'-' '' Blank lines before the frame
'-' 
'-' p101            setq    #9
	byte	$28, $12, $64, $fd
'-'                 rdlong  m_bs,modeptr                    'read timings
	byte	$8b, $e2, $00, $fb
'-'                 add     frames,#1
	byte	$01, $00, $05, $f1
'-'                                 rdlong  fontstart,fontnumptr
	byte	$8e, $0a, $01, $fb
'-'                                 add     fontstart,fontbuf
	byte	$87, $0a, $01, $f1
'-'                 rdlong  cursorx, cursorptr
	byte	$8a, $02, $01, $fb
'-'                 getbyte cursory, cursorx,#1
	byte	$81, $04, $e9, $f8
'-'                 getbyte cursorsh,cursorx,#2
	byte	$81, $fe, $f0, $f8
'-'                 and     cursorx,#255
	byte	$ff, $02, $05, $f5
'-' 
'-'                 mov     borderptr2,borderptr
	byte	$88, $1e, $01, $f6
'-'                 rdlong  border,borderptr2
	byte	$8f, $e0, $00, $fb
'-'                 add     borderptr2,#4
	byte	$04, $1e, $05, $f1
'-'                 shl     border,#8
	byte	$08, $e0, $64, $f0
'-' 
'-'                 rdlong  t1,commandptr
	byte	$8d, $2a, $01, $fb
'-'                 add     commandptr,#4
	byte	$04, $1a, $05, $f1
'-'                 rdlong  t2,commandptr
	byte	$8d, $2c, $01, $fb
'-'                 sub     commandptr,#4
	byte	$04, $1a, $85, $f1
'-'                 cmp     t1,#257  wcz
	byte	$01, $2b, $1d, $f2
'-'          if_lt  wrlut   t2,t1
	byte	$95, $2c, $31, $cc
'-'                 mov     t1, #257
	byte	$01, $2b, $05, $f6
'-'                 wrlong  t1,commandptr
	byte	$8d, $2a, $61, $fc
'-'                 mov     hsync0,sync_000                 'vsync off
	byte	$6c, $24, $01, $f6
'-'                 mov     hsync1,sync_001
	byte	$6d, $26, $01, $f6
'-'                 callpa  i_upporch ,#blank
	byte	$44, $f0, $44, $fb
'-'                 wrbyte  #0,vblankptr
	byte	$89, $00, $48, $fc
'-' 
'-' '' Upper border.
'-' 
'-'                 testb   frames,#4 wz                    'cursor blinks at framerate/16, todo: define
	byte	$04, $00, $0d, $f4
'-'          if_z   mov     cursorx,#101
	byte	$65, $02, $05, $a6
'-' 
'-' 
'-'                 mov     ii, i_vborder
	byte	$77, $20, $01, $f6
'-' 
'-' up_border       call    #hsync
	byte	$08, $01, $b0, $fd
'-'                 xcont   m_vi,border
	byte	$70, $e8, $c0, $fc
'-'                 djnz    ii,#up_border
	byte	$fd, $21, $6d, $fb
'-' 
'-' '' 480 active lines
'-' 
'-'                 mov     ii,#480
	byte	$e0, $21, $05, $f6
'-'                 mov     linenum,#0
	byte	$00, $f8, $04, $f6
'-' 
'-' line1           mov     cursorpos2,cursorx
	byte	$81, $08, $01, $f6
'-' 
'-'                 getnib  fontline,linenum,#0             'fontline is 0 to 15, a line in font def
	byte	$7c, $28, $41, $f8
'-'                 mov     framebuf2,framebuf              'compute a line start in the framebuffer, which is (line div 16)*100
	byte	$86, $22, $01, $f6
'-'                 mov     linestart,linenum
	byte	$7c, $f6, $00, $f6
'-'                 shr     linestart,#4
	byte	$04, $f6, $44, $f0
'-'                 cmp     linestart,cursory wz
	byte	$82, $f6, $08, $f2
'-'          if_nz  mov     cursorpos2,#120
	byte	$78, $08, $05, $56
'-'                 mul     linestart,#400
	byte	$90, $f7, $04, $fa
'-'                 add     framebuf2,linestart
	byte	$7b, $22, $01, $f1
'-'                 call    #hsync
	byte	$d0, $00, $b0, $fd
'-'                 cmp     fontline,#0 wz
	byte	$00, $28, $0d, $f2
'-'          if_nz  jmp     #p102                          'if fontline >0, display it
	byte	$0c, $00, $90, $5d
'-' 
'-'                 rdlong  border,borderptr2
	byte	$8f, $e0, $00, $fb
'-'                 add     borderptr2,#4
	byte	$04, $1e, $05, $f1
'-'                 shl     border,#8
	byte	$08, $e0, $64, $f0
'-' 
'-' p102            xcont   m_border,border                 'display a left border
	byte	$70, $ea, $c0, $fc
'-'                 cmp     fontline,cursorsh wcz
	byte	$7f, $28, $19, $f2
'-'          if_c   mov     cursorpos,#101
	byte	$65, $06, $05, $c6
'-'         if_nc   mov     cursorpos,cursorpos2
	byte	$84, $06, $01, $36
'-'                 add     cursorpos,#1
	byte	$01, $06, $05, $f1
'-'                 mov     t2,fontstart
	byte	$85, $2c, $01, $f6
'-'                 add     t2,fontline
	byte	$94, $2c, $01, $f1
'-' 
'-'                 rep     @p103,#100                      'display 100 chars
	byte	$64, $28, $dc, $fc
'-' ''---------------------------------------------------------------------------------------
'-'                         rdlong  char,framebuf2                                                      '2
	byte	$91, $2e, $01, $fb
'-'                         getbyte backcolor,char,#2                                                   '4
	byte	$97, $30, $f1, $f8
'-'                         getbyte charcolor,char,#3                                                   '6
	byte	$97, $32, $f9, $f8
'-'                         getbyte char,char, #0                                                       '8
	byte	$97, $2e, $e1, $f8
'-'                         add     framebuf2,#4                                                        '10
	byte	$04, $22, $05, $f1
'-'                         shl     char,#4                                                             '12
	byte	$04, $2e, $65, $f0
'-'                         add     char,t2                                                             '14
	byte	$96, $2e, $01, $f1
'-'                         rdbyte  t1,char                                                             '16
	byte	$97, $2a, $c1, $fa
'-'                         sub     cursorpos,#1 wz                                                     '18
	byte	$01, $06, $8d, $f1
'-'                 if_z    xor     t1, #$FF                                                            '20
	byte	$ff, $2a, $65, $a5
'-' 
'-' 
'-'                         mergeb  t1
	byte	$61, $2a, $61, $fd
'-'                         xcont   m_lut1,t1                                                           '22
	byte	$95, $ec, $c0, $fc
'-' 
'-'                         rdlut   t1,backcolor                                                        '25
	byte	$98, $2a, $a1, $fa
'-'                         wrlut   t1,lutaddr                                                          '28
	byte	$7e, $2a, $31, $fc
'-'                         add     lutaddr,#1                                                          '30
	byte	$01, $fc, $04, $f1
'-' 
'-'                         rdlut   t1,charcolor                                                        '33
	byte	$99, $2a, $a1, $fa
'-'                         wrlut   t1,lutaddr                                                          '46
	byte	$7e, $2a, $31, $fc
'-'                         sub     lutaddr,#1                                                          '38
	byte	$01, $fc, $84, $f1
'-' 
'-'                         xor     m_lut1,a00010000                                                    '40
	byte	$7d, $ec, $60, $f5
'-'                         xor     lutaddr,#32                                                         '42    .....    38 left
	byte	$20, $fc, $64, $f5
'-' 
'-' '' rep end ----------------------------------------------------------------------------
'-' 
'-' 
'-' p103            xcont   m_border,border                     'display a right border
	byte	$70, $ea, $c0, $fc
'-' 
'-'                 add     linenum, #1
	byte	$01, $f8, $04, $f1
'-'                 djnz    ii,#line1
	byte	$d2, $21, $6d, $fb
'-' 
'-' '' end of active screen
'-'                 wrlong  #1,vblankptr
	byte	$89, $02, $68, $fc
'-'                 mov     ii,i_vborder                         'lower border
	byte	$77, $20, $01, $f6
'-' 
'-' 
'-'                 rdlong  border,borderptr2
	byte	$8f, $e0, $00, $fb
'-'                 add     borderptr2,#4
	byte	$04, $1e, $05, $f1
'-'                 shl     border,#8
	byte	$08, $e0, $64, $f0
'-' down_border     call    #hsync
	byte	$28, $00, $b0, $fd
'-'                 xcont   m_vi,border
	byte	$70, $e8, $c0, $fc
'-'                 djnz    ii,#down_border
	byte	$fd, $21, $6d, $fb
'-'                 callpa  i_downporch ,#blank                  'bottom blanks
	byte	$04, $f4, $44, $fb
'-' 
'-'                 mov     hsync0,sync_222                      'vsync on
	byte	$6e, $24, $01, $f6
'-'                 mov     hsync1,sync_223
	byte	$6f, $26, $01, $f6
'-'                 callpa  i_vsync,#blank                       'vertical sync blanks
	byte	$01, $f2, $44, $fb
'-'                 jmp     #p101                                'loop
	byte	$90, $fe, $9f, $fd
'-' 
'-' '' Subroutines
'-' 
'-' blank           call    #hsync                          'blank lines
	byte	$08, $00, $b0, $fd
'-'                 xcont   m_vi,hsync0
	byte	$92, $e8, $c0, $fc
'-'         _ret_   djnz    pa,#blank
	byte	$fd, $ed, $6f, $0b
'-' 
'-' hsync           xcont   m_bs,hsync0                     'horizontal sync
	byte	$92, $e2, $c0, $fc
'-'                 xzero   m_sn,hsync1
	byte	$93, $e4, $b0, $fc
'-'         _ret_   xcont   m_bv,hsync0
	byte	$92, $e6, $c0, $0c
'-' 
'-' '' consts and vars
'-' 
'-' sync_000        long    %1101010100_1101010100_1101010100_10    '
	byte	$52, $4d, $35, $d5
'-' sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
	byte	$ae, $42, $35, $d5
'-' sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
	byte	$52, $45, $15, $55
'-' sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
	byte	$ae, $4a, $15, $55
'-' 
'-' border          long    %00000000_00011010_00101100_00000000
	byte	$00, $2c, $1a, $00
'-' 
'-' m_bs            long    $70810000 + hdmi_base<<17 + 16          'before sync
	byte	$10, $00, $81, $70
'-' m_sn            long    $70810000 + hdmi_base<<17 + 80          'sync
	byte	$50, $00, $81, $70
'-' m_bv            long    $70810000 + hdmi_base<<17 + 20          'before visible
	byte	$14, $00, $81, $70
'-' m_vi            long    $70810000 + hdmi_base<<17 + 1024        'visible 1024
	byte	$00, $04, $81, $70
'-' m_border        long    $70810000 + hdmi_base<<17 + 112         'immediate 112
	byte	$70, $00, $81, $70
'-' m_lut1          long    $20880000 + hdmi_base<<17 + 8          ' imm+lut, 1 char
	byte	$08, $00, $88, $20
'-' i_vborder       long    48
	byte	$30, $00, $00, $00
'-' i_upporch       long    16
	byte	$10, $00, $00, $00
'-' i_vsync         long    16
	byte	$10, $00, $00, $00
'-' i_downporch     long    16
	byte	$10, $00, $00, $00
'-' 
'-' linestart       long    0
	byte	$00, $00, $00, $00
'-' linenum         long    0
	byte	$00, $00, $00, $00
'-' a00010000       long    $00010000
	byte	$00, $00, $01, $00
'-' lutaddr         long    256
	byte	$00, $01, $00, $00
'-' 
'-' cursorsh        long    14
	byte	$0e, $00, $00, $00
'-' frames          long    0
	byte	$00, $00, $00, $00
'-' cursorx         long    0
	byte	$00, $00, $00, $00
'-' cursory         long    0
	byte	$00, $00, $00, $00
'-' cursorpos       long    0
	byte	$00, $00, $00, $00
'-' cursorpos2      long    0
	byte	$00, $00, $00, $00
'-' fontstart           long        0
	byte	$00, $00, $00, $00
'-' 
'-' framebuf        res     1
'-' framebuf        res     1
'-' fontbuf         res     1
'-' fontbuf         res     1
'-' borderptr       res     1
'-' borderptr       res     1
'-' vblankptr       res     1
'-' vblankptr       res     1
'-' cursorptr       res     1
'-' cursorptr       res     1
'-' modeptr         res     1
'-' modeptr         res     1
'-' paletteptr      res     1
'-' paletteptr      res     1
'-' commandptr      res     1
'-' commandptr      res     1
'-' fontnumptr      res     1
'-' fontnumptr      res     1
'-' borderptr2      res     1
'-' borderptr2      res     1
'-' ii              res     1
'-' ii              res     1
'-' framebuf2       res     1
'-' framebuf2       res     1
'-' hsync0          res     1
'-' hsync0          res     1
'-' hsync1          res     1
'-' hsync1          res     1
'-' fontline        res     1
'-' fontline        res     1
'-' t1              res     1
'-' t1              res     1
'-' t2              res     1
'-' t2              res     1
'-' char            res     1
'-' char            res     1
'-' backcolor       res     1
'-' backcolor       res     1
'-' charcolor       res     1
'-' charcolor       res     1
'-'                 fit     496                     '
	alignl
__system__dat_
	byte	$00[8]
	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
objmem
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
_var04
	res	1
_var05
	res	1
_var06
	res	1
_var07
	res	1
_var08
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
arg05
	res	1
arg06
	res	1
arg07
	res	1
arg08
	res	1
arg09
	res	1
arg10
	res	1
arg11
	res	1
arg12
	res	1
arg13
	res	1
arg14
	res	1
arg15
	res	1
arg16
	res	1
arg17
	res	1
arg18
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
local05
	res	1
local06
	res	1
local07
	res	1
local08
	res	1
local09
	res	1
local10
	res	1
local11
	res	1
local12
	res	1
local13
	res	1
local14
	res	1
local15
	res	1
local16
	res	1
local17
	res	1
local18
	res	1
local19
	res	1
local20
	res	1
local21
	res	1
local22
	res	1
local23
	res	1
local24
	res	1
local25
	res	1
local26
	res	1
local27
	res	1
local28
	res	1
local29
	res	1
local30
	res	1
local31
	res	1
local32
	res	1
local33
	res	1
local34
	res	1
local35
	res	1
local36
	res	1
local37
	res	1
local38
	res	1
local39
	res	1
local40
	res	1
local41
	res	1
local42
	res	1
local43
	res	1
local44
	res	1
local45
	res	1
local46
	res	1
local47
	res	1
local48
	res	1
local49
	res	1
local50
	res	1
local51
	res	1
local52
	res	1
local53
	res	1
local54
	res	1
local55
	res	1
local56
	res	1
local57
	res	1
local58
	res	1
local59
	res	1
local60
	res	1
local61
	res	1
local62
	res	1
local63
	res	1
local64
	res	1
local65
	res	1
local66
	res	1
local67
	res	1
local68
	res	1
local69
	res	1
local70
	res	1
local71
	res	1
local72
	res	1
local73
	res	1
muldiva_
	res	1
muldivb_
	res	1
	fit	480
