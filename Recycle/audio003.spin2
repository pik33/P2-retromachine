' Paula-like audiodriver v. 0.02 - 20211107

con

_clkfreq        =      283_751_600   ' 160x PAL  - real settings: 64,908-> 283_750_000 - 0.9999944 - mode 128

  SF_CS  = 61  { O }                                            ' serial flash
  SF_SCK = 60  { O }
  SF_SDO = 59  { O }
  SF_SDI = 58  { I }
  RD_DATA      = $03


c4=262
d4=294
e4=330
f4=349
g4=392
a4=440
h4=494



var

long samplestart
long loopstart
long loopend         'loopstart==loopend=no loop
long volume
long synthfreq
long cmd


long pin



pub test() |q

start(18)

sawbeep(c4,1024,500)
sawbeep(d4,1024,500)
sawbeep(e4,1024,500)
sawbeep(f4,1024,500)
sawbeep(g4,1024,500)
sawbeep(a4,1024,500)
sawbeep(h4,1024,500)
sawbeep(2*c4,1024,500)

waitms(500)

beep(523,1024,500)
beep(494,1024,500)
beep(440,1024,500)
beep(392,1024,500)
beep(349,1024,500)
beep(330,1024,500)
beep(294,1024,500)
beep(261,1024,500)



pub say(sample,vol) |f,b,f1,b1

repeat f from $50000 to $5FFFF
  byte[f]:=0
  
volume:=0
  
b:=$50000
repeat 256
f:=$F00000+$10000*(sample-1)
repeat 256
  f1:=f
  b1:=b
  rd_block(f1, 256, b1)
  b+=256
  f+=256
  
loopstart:=long[$50000]-4
samplestart:=$50004  
loopend:=loopstart
synthfreq:=308
volume:=vol
cmd:=1
waitus(1)
cmd:=0  


pub beep(freq,vol,time)

synthfreq:=3546895/(2*freq)
debug(udec(synthfreq))
volume:=vol
samplestart:=@square
loopstart:=0
loopend:=2
cmd:=1
waitus(1)
cmd:=0
waitms(time)
volume:=0  
  
pub sawbeep(freq,vol,time)

synthfreq:=3546895/(9*freq)
debug(udec(synthfreq))
volume:=vol
samplestart:=@saw
loopstart:=0
loopend:=18
cmd:=1
waitus(1)
cmd:=0
waitms(time)
volume:=0    
  
pub beep2(freq,vol)

synthfreq:=3546895/(2*freq)
debug(udec(synthfreq))
volume:=vol
samplestart:=@square
loopstart:=0
loopend:=2
cmd:=1
waitus(1)
cmd:=0
   
pub change(freq,vol)

synthfreq:=3546895/(2*freq)
volume:=vol
 
pub start(thepin)

samplestart:=0
loopstart:=0
loopend:=0
volume:=$4000
synthfreq:=0
cmd:=0
pin:=thepin
coginit(2,@driver,@samplestart)
waitms(10)

''--------------------------------------------------------------------------
''-------------------------------- Read from flash -------------------------
''--------------------------------------------------------------------------


pub rd_block(addr, n, p_dest) | x

'' Read n bytes from address in flash
'' -- output is to buffer at p_dest

  org
                setbyte   addr, #RD_DATA, #3                    ' add command to address
                rev       addr                                  ' reverse for S/P LSBFIRST output

                drvl      #SF_CS                                ' select flash
                nop

.set_addr       wxpin     #%1_11111, #SF_SDO                    ' 32 bit output
                wypin     addr, #SF_SDO                         ' set address for read
                drvl      #SF_SDO                               ' arm SPI TX
                wypin     #32, #SF_SCK                          ' clock 32 bits out
                nop                                             ' give clock time to start
                testp     #SF_SCK                       wc      ' wait for clocking to finish
    if_nc       jmp       #$-1
                fltl      #SF_SDO                               ' disable SPI TX

.get_byte       fltl      #SF_SDI                               ' reset/clear SDI
                wxpin     #(8-1), #SF_SDI                       ' read 8 bits
                drvl      #SF_SDI                               ' arm SPI RX
                wypin     #8, #SF_SCK                           ' clock 8 bits in
                nop                                             ' give clock time to start
                testp     #SF_SCK                       wc      ' wait for clocking to finish
    if_nc       jmp       #$-1
                rdpin     x, #SF_SDI                            ' get the value
                rev       x                                     ' restore MSBFIRST order
                zerox     x, #7                                 ' clean up (redundant?)
                wrbyte    x, p_dest                             ' write to hub
                add       p_dest, #1                            ' bump hub pointer
                djnz      n, #.get_byte                         ' continue until done

    _ret_       drvh      #SF_CS                                ' done, deselect
  end

dat     

driver 			org 0

        		setq #6
        		rdlong  sstart,ptra 
        		mov spin2,spin
        		add spin2,#1
        		add spin,#%1_000000
        		fltl spin  
        		
        		wrpin ##(P_DAC_DITHER_RND | P_DAC_75R_2V | P_OE), spin 
          		wxpin #80, spin 
       		
        		dirh spin
        		setse1 spin
loop    		waitse1
                							
                setq #5
        		rdlong  sstart,ptra 

        		cmp command,#0 wz
        if_nz	mov ptr,sstart
                add lstart,sstart
                add lend,sstart
        		
        		
                add counter,#1
				cmp counter,freq wcz
		if_ge   mov counter,#0
		if_lt   jmp #p111

p101          	rdword x,ptr
				
     			scas x,vol
			    mov x,0-0
		        						   	
				add x,a8000
		        cmp	ptr,lend wz
 		if_nz	add ptr,#2
 		if_z    mov ptr,lstart             '~~61 clocks

 p111          	wypin x,spin 
		
				jmp #loop


sstart   	long 	0
lstart		long 	0
lend		long 	0
vol			long 	0
freq		long 	0
command     long 	0
spin        long 	0
ptr			long 	0
x       	long    0
counter 	long 	0
a8000		long 	$8000
spin2       long    0


DAT
saw     word  -32000, -24000, -16000, -8000, 0, 8000, 16000, 24000, 32000
square  word  -32000, 32000
{{
audio1 file "gotowy.pcm"      '31060
audio2 file "przeszkoda.pcm"  '50950
audio3 file "pilot.pcm"       '29548
audio4 file "bateria.pcm"     '22270
audio5 file "operator.pcm"    '44100
}}
