00000                 | 
00000                 | #line 1 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.p2asm"
00000                 | con
00000                 | 	_clkfreq = 320000000
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 320000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1000ffb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 26 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 12 F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 07 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16781304
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 07 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16781307
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 68 89 89 FF 
00440 00f 14 00 6C FC | 	wrlong	##320000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 A0 08 A0 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 6C 62 FD | 	cogid	arg01
00614 084 03 6C 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 00 0F 06 FB | 	rdlong	objptr, ptra
0061c 086 04 F0 07 F1 | 	add	ptra, #4
00620 087 00 27 06 FB | 	rdlong	result1, ptra
00624 088 04 F0 07 F1 | 	add	ptra, #4
00628 089 00 6D 06 FB | 	rdlong	arg01, ptra
0062c 08a 04 F0 07 F1 | 	add	ptra, #4
00630 08b 00 6F 06 FB | 	rdlong	arg02, ptra
00634 08c 04 F0 07 F1 | 	add	ptra, #4
00638 08d 00 71 06 FB | 	rdlong	arg03, ptra
0063c 08e 04 F0 07 F1 | 	add	ptra, #4
00640 08f 00 73 06 FB | 	rdlong	arg04, ptra
00644 090 10 F0 87 F1 | 	sub	ptra, #16
00648 091 2D 26 62 FD | 	call	result1
0064c 092 B8 FF 9F FD | 	jmp	#cogexit
00650 093             | FCACHE_LOAD_
00650 093 2B 3E 61 FD |     pop	fcache_tmpb_
00654 094 F6 3F 01 F1 |     add	fcache_tmpb_, pa
00658 095 2A 3E 61 FD |     push	fcache_tmpb_
0065c 096 F6 3F 81 F1 |     sub	fcache_tmpb_, pa
00660 097 02 EC 47 F0 |     shr	pa, #2
00664 098 00 EC 8F F9 |     altd	pa
00668 099 9E 00 00 F6 |     mov	 0-0, ret_instr_
0066c 09a 01 EC 87 F1 |     sub	pa, #1
00670 09b 28 EC 63 FD |     setq	pa
00674 09c 9F 00 00 FB |     rdlong	$0, fcache_tmpb_
00678 09d 00 00 80 FD |     jmp	#\$0 ' jmp to cache
0067c 09e             | ret_instr_
0067c 09e 2D 00 64 FD |     ret
00680 09f             | fcache_tmpb_
00680 09f 00 00 00 00 |     long 0
00684 0a0             | builtin_bytefill_
00684 0a0 01 70 56 F0 |         shr	arg03, #1 wc
00688 0a1 36 6F 42 CC |  if_c   wrbyte	arg02, arg01
0068c 0a2 01 6C 06 C1 |  if_c   add	arg01, #1
00690 0a3 00 6E FE F9 |         movbyts	arg02, #0
00694 0a4             | builtin_wordfill_
00694 0a4 01 70 56 F0 |         shr	arg03, #1 wc
00698 0a5 36 6F 52 CC |  if_c   wrword	arg02, arg01
0069c 0a6 02 6C 06 C1 |  if_c   add	arg01, #2
006a0 0a7 37 6F 2A F9 |         setword	arg02, arg02, #1
006a4 0a8             | builtin_longfill_
006a4 0a8 36 01 88 FC |         wrfast	#0,arg01
006a8 0a9 00 70 0E F2 |         cmp	arg03, #0 wz
006ac 0aa 38 03 D8 5C |  if_nz  rep	#1, arg03
006b0 0ab 17 6E 62 5D |  if_nz  wflong	arg02
006b4 0ac 2D 00 64 FD |         ret
006b8 0ad             | COUNT_
006b8 0ad 00 00 00 00 |     long 0
006bc 0ae             | RETADDR_
006bc 0ae 00 00 00 00 |     long 0
006c0 0af             | fp
006c0 0af 00 00 00 00 |     long 0
006c4 0b0             | pushregs_
006c4 0b0 2B EC 63 FD |     pop  pa
006c8 0b1 2B 5C 61 FD |     pop  RETADDR_
006cc 0b2 04 5A 95 FB |     tjz  COUNT_, #pushregs_done_
006d0 0b3 01 5A 85 F1 |     sub  COUNT_, #1
006d4 0b4 28 5A 61 FD |     setq COUNT_
006d8 0b5 00 77 66 FC |     wrlong local01, ptra
006dc 0b6 01 5A 05 F1 |     add  COUNT_, #1
006e0 0b7             | pushregs_done_
006e0 0b7 02 5A 65 F0 |     shl  COUNT_, #2
006e4 0b8 AD F0 03 F1 |     add  ptra, COUNT_
006e8 0b9 02 5A 45 F0 |     shr  COUNT_, #2
006ec 0ba 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006f0 0bb 00 5B 65 FC |     wrlong COUNT_, ptra
006f4 0bc 0C F0 07 F1 |     add    ptra, #12
006f8 0bd F8 5F 01 F6 |     mov    fp, ptra
006fc 0be 2C EC 63 FD |     jmp  pa
00700 0bf             |  popregs_
00700 0bf 2B EC 63 FD |     pop    pa
00704 0c0 0C F0 87 F1 |     sub    ptra, #12
00708 0c1 28 04 64 FD |     setq   #2
0070c 0c2 00 5B 05 FB |     rdlong COUNT_, ptra
00710 0c3 06 5A 95 FB |     tjz    COUNT_, #popregs__ret
00714 0c4 02 5A 65 F0 |     shl    COUNT_, #2
00718 0c5 AD F0 83 F1 |     sub    ptra, COUNT_
0071c 0c6 02 5A 45 F0 |     shr    COUNT_, #2
00720 0c7 01 5A 85 F1 |     sub    COUNT_, #1
00724 0c8 28 5A 61 FD |     setq   COUNT_
00728 0c9 00 77 06 FB |     rdlong local01, ptra
0072c 0ca             | popregs__ret
0072c 0ca 2A 5C 61 FD |     push   RETADDR_
00730 0cb 2C EC 63 FD |     jmp    pa
00734 0cc             | 
00734 0cc             | unsdivide_
00734 0cc 28 00 64 FD |        setq    #0
00738 0cd 66 CB 12 FD |        qdiv    muldiva_, muldivb_
0073c 0ce 18 CC 62 FD |        getqx   muldivb_
00740 0cf 19 CA 62 0D |  _ret_ getqy   muldiva_
00744 0d0             | 
00744 0d0             | divide_
00744 0d0 65 CB 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
00748 0d1 03 0C 86 F5 |        muxc    itmp2_,#%11                    'store sign of x
0074c 0d2 66 CD 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
00750 0d3 02 0C 66 C5 |  if_c  xor     itmp2_,#%10                    'store sign of y
00754 0d4 2D 00 64 AD |  if_z  ret
00758 0d5 D8 FF BF FD |        call    #unsdivide_
0075c 0d6 01 0C D6 F7 |        test    itmp2_,#1        wc       'restore sign, remainder
00760 0d7 65 CB 82 F6 |        negc    muldiva_,muldiva_ 
00764 0d8 02 0C D6 F7 |        test    itmp2_,#%10      wc       'restore sign, division result
00768 0d9 66 CD 82 06 |  _ret_ negc    muldivb_,muldivb_
0076c 0da             | __pc long 0
0076c 0da 00 00 00 00 
00770 0db             | __setjmp
00770 0db 2B B4 61 FD |     pop __pc
00774 0dc 00 26 06 F6 |     mov result1, #0
00778 0dd 00 28 06 F6 |     mov result2, #0
0077c 0de 36 07 02 F6 |     mov abortchain, arg01
00780 0df 36 5F 61 FC |     wrlong fp, arg01
00784 0e0 04 6C 06 F1 |     add arg01, #4
00788 0e1 36 F1 63 FC |     wrlong ptra, arg01
0078c 0e2 04 6C 06 F1 |     add arg01, #4
00790 0e3 36 0F 62 FC |     wrlong objptr, arg01
00794 0e4 04 6C 06 F1 |     add arg01, #4
00798 0e5 36 B5 61 FC |     wrlong __pc, arg01
0079c 0e6 2C B4 61 FD |     jmp __pc
007a0 0e7             | __unwind_pc long 0
007a0 0e7 00 00 00 00 
007a4 0e8             | __unwind_stack
007a4 0e8 2B CE 61 FD |    pop  __unwind_pc
007a8 0e9             | __unwind_loop
007a8 0e9 37 6D 0A F2 |    cmp  arg01, arg02 wz
007ac 0ea 10 00 90 AD |   if_z jmp #__unwind_stack_ret
007b0 0eb 36 F1 03 F6 |    mov   ptra, arg01
007b4 0ec 48 FF BF FD |    call  #popregs_
007b8 0ed AF 6C 02 F6 |    mov   arg01, fp
007bc 0ee E8 FF 9F FD |    jmp   #__unwind_loop
007c0 0ef             | __unwind_stack_ret
007c0 0ef 2C CE 61 FD |    jmp  __unwind_pc
007c4 0f0             | __longjmp
007c4 0f0 2B B4 61 FD |     pop __pc
007c8 0f1 00 6C 0E F2 |     cmp    arg01, #0 wz
007cc 0f2 30 00 90 AD |  if_z jmp #nocatch
007d0 0f3 37 27 02 F6 |     mov result1, arg02
007d4 0f4 01 28 06 F6 |     mov result2, #1
007d8 0f5 36 6F 02 FB |     rdlong arg02, arg01
007dc 0f6 04 6C 06 F1 |     add arg01, #4
007e0 0f7 36 F1 03 FB |     rdlong ptra, arg01
007e4 0f8 04 6C 06 F1 |     add arg01, #4
007e8 0f9 36 0F 02 FB |     rdlong objptr, arg01
007ec 0fa 04 6C 06 F1 |     add arg01, #4
007f0 0fb 36 B5 01 FB |     rdlong __pc, arg01
007f4 0fc AF 6C 02 F6 |     mov arg01, fp
007f8 0fd A8 FF BF FD |     call #__unwind_stack
007fc 0fe             | __longjmp_ret
007fc 0fe 2C B4 61 FD |     jmp  __pc
00800 0ff             | nocatch
00800 0ff 00 70 0E F2 |     cmp arg03, #0 wz
00804 100 00 FE 9F AD |  if_z jmp #cogexit
00808 101 F0 FF 9F FD |     jmp #__longjmp_ret
0080c 102             | 
0080c 102             | __heap_ptr
0080c 102 EC 82 00 00 | 	long	@__heap_base
00810 103             | abortchain
00810 103 00 00 00 00 | 	long	0
00814 104             | entryptr__
00814 104 04 04 00 00 | 	long	@entry
00818 105             | itmp1_
00818 105 00 00 00 00 | 	long	0
0081c 106             | itmp2_
0081c 106 00 00 00 00 | 	long	0
00820 107             | objptr
00820 107 F4 92 00 00 | 	long	@objmem
00824 108             | ptr___struct___bas_wrap_sender_tx_
00824 108 68 59 00 00 | 	long	@__struct___bas_wrap_sender_tx
00828 109             | ptr___struct__s_vfs_file_t_putchar_
00828 109 B0 58 00 00 | 	long	@__struct__s_vfs_file_t_putchar
0082c 10a             | ptr___system__dat__
0082c 10a 8C 80 00 00 | 	long	@__system__dat_
00830 10b             | ptr__hng030rm_spin2_dat__
00830 10b 28 5C 00 00 | 	long	@_hng030rm_spin2_dat_
00834 10c             | ptr__hng030rm_spin2_putchar_
00834 10c 38 21 00 00 | 	long	@_hng030rm_spin2_putchar
00838 10d             | ptr__hng030rm_spin2_putpixel1_
00838 10d 90 1C 00 00 | 	long	@_hng030rm_spin2_putpixel1
0083c 10e             | ptr__hng030rm_spin2_putpixel2_
0083c 10e 7C 1D 00 00 | 	long	@_hng030rm_spin2_putpixel2
00840 10f             | ptr__hng030rm_spin2_putpixel4_
00840 10f 68 1E 00 00 | 	long	@_hng030rm_spin2_putpixel4
00844 110             | ptr__hng030rm_spin2_putpixel8_
00844 110 54 1F 00 00 | 	long	@_hng030rm_spin2_putpixel8
00848 111             | ptr__retrocog_spin2_serialcog_
00848 111 EC 2F 00 00 | 	long	@_retrocog_spin2_serialcog
0084c 112             | ptr_stackspace_
0084c 112 94 97 00 00 | 	long	@stackspace
00850 113             | result1
00850 113 00 00 00 00 | 	long	0
00854 114             | result2
00854 114 00 00 00 00 | 	long	0
00858 115             | result3
00858 115 00 00 00 00 | 	long	0
0085c 116             | COG_BSS_START
0085c 116             | 	fit	480
0085c                 | 	orgh
0085c                 | hubentry
0085c                 | 
0085c                 | ' 
0085c                 | ' function startvideo(mode=64, pin=0) 'todo return a cog#
0085c                 | _startvideo
0085c     80 25 B0 FD | 	call	#_hng030rm_spin2_start
00860     00 6C 06 F6 | 	mov	arg01, #0
00864     00 6E 06 F6 | 	mov	arg02, #0
00868     00 70 06 F6 | 	mov	arg03, #0
0086c     68 17 B0 FD | 	call	#_hng030rm_spin2_setbordercolor
00870                 | ' v030.start(mode,pin)
00870                 | ' v030.setbordercolor(0,0,0)
00870                 | ' open SendRecvDevice(@v030.putchar, nil, nil) as #0
00870     07 6D 02 F6 | 	mov	arg01, objptr
00874     0C 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putchar_
00878     68 2F B0 FD | 	call	#__system___make_methodptr
0087c     00 2A 06 F6 | 	mov	result3, #0
00880     00 28 06 F6 | 	mov	result2, #0
00884     13 6F 02 F6 | 	mov	arg02, result1
00888     00 70 06 F6 | 	mov	arg03, #0
0088c     00 72 06 F6 | 	mov	arg04, #0
00890     00 6C 06 F6 | 	mov	arg01, #0
00894     24 31 B0 FD | 	call	#__system___basic_open
00898     00 26 06 F6 | 	mov	result1, #0
0089c                 | _startvideo_ret
0089c     2D 00 64 FD | 	ret
008a0                 | 
008a0                 | _program
008a0     2A 5A 05 F6 | 	mov	COUNT_, #42
008a4     B0 00 A0 FD | 	call	#pushregs_
008a8     40 6C 06 F6 | 	mov	arg01, #64
008ac     00 6E 06 F6 | 	mov	arg02, #0
008b0     A8 FF BF FD | 	call	#_startvideo
008b4     EC 0E 06 F1 | 	add	objptr, #236
008b8     E0 26 B0 FD | 	call	#_retrocog_spin2_start
008bc     EC 0E 86 F1 | 	sub	objptr, #236
008c0     9A 6C 06 F6 | 	mov	arg01, #154
008c4     93 6E 06 F6 | 	mov	arg02, #147
008c8     30 17 B0 FD | 	call	#_hng030rm_spin2_cls
008cc                 | ' #line 2 "D:/programowanie/20211226-P2-retromachine/Propeller/retromachine000.bas"
008cc                 | ' 
008cc                 | ' 'e=0 ' this strange thing makes the program run in full optimization
008cc                 | ' 
008cc                 | ' startvideo 
008cc                 | ' rm.start
008cc                 | ' 
008cc                 | ' cls
008cc                 | ' print "Basic test"
008cc     00 6C 06 F6 | 	mov	arg01, #0
008d0     4C 45 B0 FD | 	call	#__system___getiolock_0102
008d4     13 6D 02 F6 | 	mov	arg01, result1
008d8     48 2F B0 FD | 	call	#__system___lockmem
008dc     00 26 06 F6 | 	mov	result1, #0
008e0     2C 00 00 FF 
008e4     F2 6F 06 F6 | 	mov	arg02, ##@LR__0303
008e8     00 6C 06 F6 | 	mov	arg01, #0
008ec     00 70 06 F6 | 	mov	arg03, #0
008f0     C8 31 B0 FD | 	call	#__system___basic_print_string
008f4     13 77 02 F6 | 	mov	local01, result1
008f8     00 78 06 F6 | 	mov	local02, #0
008fc     00 6C 06 F6 | 	mov	arg01, #0
00900     0A 6E 06 F6 | 	mov	arg02, #10
00904     00 70 06 F6 | 	mov	arg03, #0
00908     64 31 B0 FD | 	call	#__system___basic_print_char
0090c     01 26 06 F6 | 	mov	result1, #1
00910     01 7A 06 F6 | 	mov	local03, #1
00914     00 7C 06 F6 | 	mov	local04, #0
00918     00 6C 06 F6 | 	mov	arg01, #0
0091c     00 45 B0 FD | 	call	#__system___getiolock_0102
00920     13 01 68 FC | 	wrlong	#0, result1
00924     00 26 06 F6 | 	mov	result1, #0
00928     00 7E 06 F6 | 	mov	local05, #0
0092c                 | ' print
0092c     00 6C 06 F6 | 	mov	arg01, #0
00930     EC 44 B0 FD | 	call	#__system___getiolock_0102
00934     13 6D 02 F6 | 	mov	arg01, result1
00938     E8 2E B0 FD | 	call	#__system___lockmem
0093c     00 26 06 F6 | 	mov	result1, #0
00940     00 80 06 F6 | 	mov	local06, #0
00944     00 6C 06 F6 | 	mov	arg01, #0
00948     0A 6E 06 F6 | 	mov	arg02, #10
0094c     00 70 06 F6 | 	mov	arg03, #0
00950     1C 31 B0 FD | 	call	#__system___basic_print_char
00954     01 26 06 F6 | 	mov	result1, #1
00958     01 82 06 F6 | 	mov	local07, #1
0095c     00 84 06 F6 | 	mov	local08, #0
00960     00 6C 06 F6 | 	mov	arg01, #0
00964     B8 44 B0 FD | 	call	#__system___getiolock_0102
00968     13 01 68 FC | 	wrlong	#0, result1
0096c     00 26 06 F6 | 	mov	result1, #0
00970     00 86 06 F6 | 	mov	local09, #0
00974                 | ' 
00974                 | ' do
00974                 | LR__0001
00974                 | '   if lpeek($30)<>0 then
00974                 | ' asm
00974     30 26 0E FB | 	rdlong	result1, #48 wz
00978                 | ' return r
00978     3C 03 90 AD |  if_e	jmp	#LR__0007
0097c                 | ' asm
0097c     33 26 C6 FA | 	rdbyte	result1, #51
00980                 | ' return r
00980     13 89 02 F6 | 	mov	local10, result1
00984     07 88 46 F7 | 	zerox	local10, #7
00988     02 00 00 FF 
0098c     84 0E 06 F1 | 	add	objptr, ##1156
00990     07 89 62 FC | 	wrlong	local10, objptr
00994                 | '     cmd=peek($33)
00994                 | '     if cmd<>0 then
00994     07 89 0A FB | 	rdlong	local10, objptr wz
00998                 | ' asm
00998     32 8A C6 5A |  if_ne	rdbyte	local11, #50
0099c                 | ' return r
0099c                 | ' asm
0099c     31 26 C6 5A |  if_ne	rdbyte	result1, #49
009a0                 | ' return r
009a0     13 8D 02 56 |  if_ne	mov	local12, result1
009a4     00 6E 06 F6 | 	mov	arg02, #0
009a8                 | ' asm
009a8     30 00 6C FC | 	wrlong	#0, #48
009ac                 | '     lpoke $30,0 
009ac                 | '     if cmd=$87 then print "Keyboard key released, scancode "; b11 
009ac     07 89 02 FB | 	rdlong	local10, objptr
009b0     02 00 00 FF 
009b4     84 0E 86 F1 | 	sub	objptr, ##1156
009b8     87 88 0E F2 | 	cmp	local10, #135 wz
009bc     A0 00 90 5D |  if_ne	jmp	#LR__0002
009c0     00 6C 06 F6 | 	mov	arg01, #0
009c4     58 44 B0 FD | 	call	#__system___getiolock_0102
009c8     13 6D 02 F6 | 	mov	arg01, result1
009cc     54 2E B0 FD | 	call	#__system___lockmem
009d0     00 26 06 F6 | 	mov	result1, #0
009d4     00 80 06 F6 | 	mov	local06, #0
009d8     2C 00 00 FF 
009dc     FD 83 06 F6 | 	mov	local07, ##@LR__0304
009e0     41 85 02 F6 | 	mov	local08, local07
009e4     00 86 06 F6 | 	mov	local09, #0
009e8     00 6C 06 F6 | 	mov	arg01, #0
009ec     42 6F 02 F6 | 	mov	arg02, local08
009f0     00 70 06 F6 | 	mov	arg03, #0
009f4     C4 30 B0 FD | 	call	#__system___basic_print_string
009f8     13 77 02 F6 | 	mov	local01, result1
009fc     00 78 06 F6 | 	mov	local02, #0
00a00     45 7B 02 F6 | 	mov	local03, local11
00a04     07 7A 46 F7 | 	zerox	local03, #7
00a08     3D 7D 02 F6 | 	mov	local04, local03
00a0c     00 7E 06 F6 | 	mov	local05, #0
00a10     0A 8E 06 F6 | 	mov	local13, #10
00a14     00 6C 06 F6 | 	mov	arg01, #0
00a18     3E 6F 02 F6 | 	mov	arg02, local04
00a1c     00 70 06 F6 | 	mov	arg03, #0
00a20     0A 72 06 F6 | 	mov	arg04, #10
00a24     20 31 B0 FD | 	call	#__system___basic_print_unsigned
00a28     13 91 02 F6 | 	mov	local14, result1
00a2c     00 92 06 F6 | 	mov	local15, #0
00a30     00 6C 06 F6 | 	mov	arg01, #0
00a34     0A 6E 06 F6 | 	mov	arg02, #10
00a38     00 70 06 F6 | 	mov	arg03, #0
00a3c     30 30 B0 FD | 	call	#__system___basic_print_char
00a40     01 26 06 F6 | 	mov	result1, #1
00a44     01 94 06 F6 | 	mov	local16, #1
00a48     00 96 06 F6 | 	mov	local17, #0
00a4c     00 6C 06 F6 | 	mov	arg01, #0
00a50     CC 43 B0 FD | 	call	#__system___getiolock_0102
00a54     13 01 68 FC | 	wrlong	#0, result1
00a58     00 26 06 F6 | 	mov	result1, #0
00a5c     00 98 06 F6 | 	mov	local18, #0
00a60                 | LR__0002
00a60                 | '     if cmd=$88 then print "Keyboard key pressed,  scancode "; b11   ; ", charcode "; b12
00a60     02 00 00 FF 
00a64     84 0E 06 F1 | 	add	objptr, ##1156
00a68     07 89 02 FB | 	rdlong	local10, objptr
00a6c     02 00 00 FF 
00a70     84 0E 86 F1 | 	sub	objptr, ##1156
00a74     88 88 0E F2 | 	cmp	local10, #136 wz
00a78     F8 00 90 5D |  if_ne	jmp	#LR__0003
00a7c     00 6C 06 F6 | 	mov	arg01, #0
00a80     9C 43 B0 FD | 	call	#__system___getiolock_0102
00a84     13 6D 02 F6 | 	mov	arg01, result1
00a88     98 2D B0 FD | 	call	#__system___lockmem
00a8c     00 26 06 F6 | 	mov	result1, #0
00a90     00 80 06 F6 | 	mov	local06, #0
00a94     2D 00 00 FF 
00a98     1E 82 06 F6 | 	mov	local07, ##@LR__0305
00a9c     41 85 02 F6 | 	mov	local08, local07
00aa0     00 86 06 F6 | 	mov	local09, #0
00aa4     00 6C 06 F6 | 	mov	arg01, #0
00aa8     42 6F 02 F6 | 	mov	arg02, local08
00aac     00 70 06 F6 | 	mov	arg03, #0
00ab0     08 30 B0 FD | 	call	#__system___basic_print_string
00ab4     13 77 02 F6 | 	mov	local01, result1
00ab8     00 78 06 F6 | 	mov	local02, #0
00abc     45 7B 02 F6 | 	mov	local03, local11
00ac0     07 7A 46 F7 | 	zerox	local03, #7
00ac4     3D 7D 02 F6 | 	mov	local04, local03
00ac8     00 7E 06 F6 | 	mov	local05, #0
00acc     0A 8E 06 F6 | 	mov	local13, #10
00ad0     00 6C 06 F6 | 	mov	arg01, #0
00ad4     3E 6F 02 F6 | 	mov	arg02, local04
00ad8     00 70 06 F6 | 	mov	arg03, #0
00adc     0A 72 06 F6 | 	mov	arg04, #10
00ae0     64 30 B0 FD | 	call	#__system___basic_print_unsigned
00ae4     13 91 02 F6 | 	mov	local14, result1
00ae8     00 92 06 F6 | 	mov	local15, #0
00aec     2D 00 00 FF 
00af0     3F 94 06 F6 | 	mov	local16, ##@LR__0306
00af4     4A 97 02 F6 | 	mov	local17, local16
00af8     00 98 06 F6 | 	mov	local18, #0
00afc     00 6C 06 F6 | 	mov	arg01, #0
00b00     4B 6F 02 F6 | 	mov	arg02, local17
00b04     00 70 06 F6 | 	mov	arg03, #0
00b08     B0 2F B0 FD | 	call	#__system___basic_print_string
00b0c     13 9B 02 F6 | 	mov	local19, result1
00b10     00 9C 06 F6 | 	mov	local20, #0
00b14     46 9F 02 F6 | 	mov	local21, local12
00b18     07 9E 46 F7 | 	zerox	local21, #7
00b1c     4F A1 02 F6 | 	mov	local22, local21
00b20     00 A2 06 F6 | 	mov	local23, #0
00b24     0A A4 06 F6 | 	mov	local24, #10
00b28     00 6C 06 F6 | 	mov	arg01, #0
00b2c     50 6F 02 F6 | 	mov	arg02, local22
00b30     00 70 06 F6 | 	mov	arg03, #0
00b34     0A 72 06 F6 | 	mov	arg04, #10
00b38     0C 30 B0 FD | 	call	#__system___basic_print_unsigned
00b3c     13 A7 02 F6 | 	mov	local25, result1
00b40     00 A8 06 F6 | 	mov	local26, #0
00b44     00 6C 06 F6 | 	mov	arg01, #0
00b48     0A 6E 06 F6 | 	mov	arg02, #10
00b4c     00 70 06 F6 | 	mov	arg03, #0
00b50     1C 2F B0 FD | 	call	#__system___basic_print_char
00b54     01 26 06 F6 | 	mov	result1, #1
00b58     01 AA 06 F6 | 	mov	local27, #1
00b5c     00 AC 06 F6 | 	mov	local28, #0
00b60     00 6C 06 F6 | 	mov	arg01, #0
00b64     B8 42 B0 FD | 	call	#__system___getiolock_0102
00b68     13 01 68 FC | 	wrlong	#0, result1
00b6c     00 26 06 F6 | 	mov	result1, #0
00b70     00 AE 06 F6 | 	mov	local29, #0
00b74                 | LR__0003
00b74                 | '     if cmd=$89 then 
00b74     02 00 00 FF 
00b78     84 0E 06 F1 | 	add	objptr, ##1156
00b7c     07 89 02 FB | 	rdlong	local10, objptr
00b80     02 00 00 FF 
00b84     84 0E 86 F1 | 	sub	objptr, ##1156
00b88     89 88 0E F2 | 	cmp	local10, #137 wz
00b8c     28 01 90 5D |  if_ne	jmp	#LR__0006
00b90                 | '       if b11=0 then 
00b90     45 89 02 F6 | 	mov	local10, local11
00b94     07 88 4E F7 | 	zerox	local10, #7 wz
00b98     70 00 90 5D |  if_ne	jmp	#LR__0004
00b9c                 | '         print "Keyboard modifiers released"
00b9c     00 6C 06 F6 | 	mov	arg01, #0
00ba0     7C 42 B0 FD | 	call	#__system___getiolock_0102
00ba4     13 6D 02 F6 | 	mov	arg01, result1
00ba8     78 2C B0 FD | 	call	#__system___lockmem
00bac     00 26 06 F6 | 	mov	result1, #0
00bb0     00 80 06 F6 | 	mov	local06, #0
00bb4     2D 00 00 FF 
00bb8     4B 82 06 F6 | 	mov	local07, ##@LR__0307
00bbc     41 85 02 F6 | 	mov	local08, local07
00bc0     00 86 06 F6 | 	mov	local09, #0
00bc4     00 6C 06 F6 | 	mov	arg01, #0
00bc8     42 6F 02 F6 | 	mov	arg02, local08
00bcc     00 70 06 F6 | 	mov	arg03, #0
00bd0     E8 2E B0 FD | 	call	#__system___basic_print_string
00bd4     13 77 02 F6 | 	mov	local01, result1
00bd8     00 78 06 F6 | 	mov	local02, #0
00bdc     00 6C 06 F6 | 	mov	arg01, #0
00be0     0A 6E 06 F6 | 	mov	arg02, #10
00be4     00 70 06 F6 | 	mov	arg03, #0
00be8     84 2E B0 FD | 	call	#__system___basic_print_char
00bec     01 26 06 F6 | 	mov	result1, #1
00bf0     01 7A 06 F6 | 	mov	local03, #1
00bf4     00 7C 06 F6 | 	mov	local04, #0
00bf8     00 6C 06 F6 | 	mov	arg01, #0
00bfc     20 42 B0 FD | 	call	#__system___getiolock_0102
00c00     13 01 68 FC | 	wrlong	#0, result1
00c04     00 7E 06 F6 | 	mov	local05, #0
00c08     AC 00 90 FD | 	jmp	#LR__0005
00c0c                 | LR__0004
00c0c                 | '         print "Keyboard modifiers pressed: ";hex$(b11)
00c0c     00 6C 06 F6 | 	mov	arg01, #0
00c10     0C 42 B0 FD | 	call	#__system___getiolock_0102
00c14     13 6D 02 F6 | 	mov	arg01, result1
00c18     08 2C B0 FD | 	call	#__system___lockmem
00c1c     00 26 06 F6 | 	mov	result1, #0
00c20     00 80 06 F6 | 	mov	local06, #0
00c24     2D 00 00 FF 
00c28     67 82 06 F6 | 	mov	local07, ##@LR__0308
00c2c     41 85 02 F6 | 	mov	local08, local07
00c30     00 86 06 F6 | 	mov	local09, #0
00c34     00 6C 06 F6 | 	mov	arg01, #0
00c38     42 6F 02 F6 | 	mov	arg02, local08
00c3c     00 70 06 F6 | 	mov	arg03, #0
00c40     78 2E B0 FD | 	call	#__system___basic_print_string
00c44     13 77 02 F6 | 	mov	local01, result1
00c48     00 78 06 F6 | 	mov	local02, #0
00c4c     45 7B 02 F6 | 	mov	local03, local11
00c50     07 7A 46 F7 | 	zerox	local03, #7
00c54     3D 7D 02 F6 | 	mov	local04, local03
00c58     00 7E 06 F6 | 	mov	local05, #0
00c5c     3E 6D 02 F6 | 	mov	arg01, local04
00c60     00 6E 06 F6 | 	mov	arg02, #0
00c64     10 70 06 F6 | 	mov	arg03, #16
00c68     A8 33 B0 FD | 	call	#__system__Number_S
00c6c     13 8F 02 F6 | 	mov	local13, result1
00c70     00 90 06 F6 | 	mov	local14, #0
00c74     3C 6D 02 F6 | 	mov	arg01, local02
00c78     47 6F 02 F6 | 	mov	arg02, local13
00c7c     00 70 06 F6 | 	mov	arg03, #0
00c80     38 2E B0 FD | 	call	#__system___basic_print_string
00c84     13 93 02 F6 | 	mov	local15, result1
00c88     00 94 06 F6 | 	mov	local16, #0
00c8c     00 6C 06 F6 | 	mov	arg01, #0
00c90     0A 6E 06 F6 | 	mov	arg02, #10
00c94     00 70 06 F6 | 	mov	arg03, #0
00c98     D4 2D B0 FD | 	call	#__system___basic_print_char
00c9c     01 26 06 F6 | 	mov	result1, #1
00ca0     01 96 06 F6 | 	mov	local17, #1
00ca4     00 98 06 F6 | 	mov	local18, #0
00ca8     00 6C 06 F6 | 	mov	arg01, #0
00cac     70 41 B0 FD | 	call	#__system___getiolock_0102
00cb0     13 01 68 FC | 	wrlong	#0, result1
00cb4     00 9A 06 F6 | 	mov	local19, #0
00cb8                 | LR__0005
00cb8                 | LR__0006
00cb8                 | LR__0007
00cb8                 | '   
00cb8                 | '   if lpeek($34)<>0 then
00cb8                 | ' asm
00cb8     34 26 0E FB | 	rdlong	result1, #52 wz
00cbc                 | ' return r
00cbc     A8 05 90 AD |  if_e	jmp	#LR__0014
00cc0                 | ' asm
00cc0     37 26 C6 FA | 	rdbyte	result1, #55
00cc4                 | ' return r
00cc4     13 B1 02 F6 | 	mov	local30, result1
00cc8     58 89 02 F6 | 	mov	local10, local30
00ccc     07 88 46 F7 | 	zerox	local10, #7
00cd0     02 00 00 FF 
00cd4     84 0E 06 F1 | 	add	objptr, ##1156
00cd8     07 89 62 FC | 	wrlong	local10, objptr
00cdc                 | '     cmd=peek($37)
00cdc                 | '     if cmd<>0 then
00cdc     07 89 0A FB | 	rdlong	local10, objptr wz
00ce0                 | ' asm
00ce0     36 8A C6 5A |  if_ne	rdbyte	local11, #54
00ce4                 | ' return r
00ce4                 | ' asm
00ce4     35 26 C6 5A |  if_ne	rdbyte	result1, #53
00ce8                 | ' return r
00ce8     13 8D 02 56 |  if_ne	mov	local12, result1
00cec     00 6E 06 F6 | 	mov	arg02, #0
00cf0                 | ' asm
00cf0     34 00 6C FC | 	wrlong	#0, #52
00cf4                 | '     lpoke $34,0
00cf4                 | '     if cmd=$81 then mousex=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
00cf4     07 89 02 FB | 	rdlong	local10, objptr
00cf8     02 00 00 FF 
00cfc     84 0E 86 F1 | 	sub	objptr, ##1156
00d00     81 88 0E F2 | 	cmp	local10, #129 wz
00d04     40 01 90 5D |  if_ne	jmp	#LR__0008
00d08     45 89 02 F6 | 	mov	local10, local11
00d0c     07 88 46 F7 | 	zerox	local10, #7
00d10     46 B3 02 F6 | 	mov	local31, local12
00d14     07 B2 46 F7 | 	zerox	local31, #7
00d18     07 B2 66 F0 | 	shl	local31, #7
00d1c     59 89 02 F1 | 	add	local10, local31
00d20     02 00 00 FF 
00d24     90 0E 06 F1 | 	add	objptr, ##1168
00d28     07 89 62 FC | 	wrlong	local10, objptr
00d2c     02 00 00 FF 
00d30     90 0E 86 F1 | 	sub	objptr, ##1168
00d34     00 6C 06 F6 | 	mov	arg01, #0
00d38     E4 40 B0 FD | 	call	#__system___getiolock_0102
00d3c     13 6D 02 F6 | 	mov	arg01, result1
00d40     E0 2A B0 FD | 	call	#__system___lockmem
00d44     00 26 06 F6 | 	mov	result1, #0
00d48     00 B0 06 F6 | 	mov	local30, #0
00d4c     00 80 06 F6 | 	mov	local06, #0
00d50     2D 00 00 FF 
00d54     84 82 06 F6 | 	mov	local07, ##@LR__0309
00d58     41 85 02 F6 | 	mov	local08, local07
00d5c     00 86 06 F6 | 	mov	local09, #0
00d60     00 6C 06 F6 | 	mov	arg01, #0
00d64     42 6F 02 F6 | 	mov	arg02, local08
00d68     00 70 06 F6 | 	mov	arg03, #0
00d6c     4C 2D B0 FD | 	call	#__system___basic_print_string
00d70     13 77 02 F6 | 	mov	local01, result1
00d74     00 78 06 F6 | 	mov	local02, #0
00d78     02 00 00 FF 
00d7c     90 0E 06 F1 | 	add	objptr, ##1168
00d80     07 7D 02 FB | 	rdlong	local04, objptr
00d84     02 00 00 FF 
00d88     90 0E 86 F1 | 	sub	objptr, ##1168
00d8c     3E 7B 02 F6 | 	mov	local03, local04
00d90     00 7E 06 F6 | 	mov	local05, #0
00d94     0A 8E 06 F6 | 	mov	local13, #10
00d98     00 6C 06 F6 | 	mov	arg01, #0
00d9c     3D 6F 02 F6 | 	mov	arg02, local03
00da0     00 70 06 F6 | 	mov	arg03, #0
00da4     0A 72 06 F6 | 	mov	arg04, #10
00da8     58 2D B0 FD | 	call	#__system___basic_print_integer
00dac     13 91 02 F6 | 	mov	local14, result1
00db0     00 92 06 F6 | 	mov	local15, #0
00db4     2D 00 00 FF 
00db8     95 94 06 F6 | 	mov	local16, ##@LR__0310
00dbc     4A 97 02 F6 | 	mov	local17, local16
00dc0     00 98 06 F6 | 	mov	local18, #0
00dc4     00 6C 06 F6 | 	mov	arg01, #0
00dc8     4B 6F 02 F6 | 	mov	arg02, local17
00dcc     00 70 06 F6 | 	mov	arg03, #0
00dd0     E8 2C B0 FD | 	call	#__system___basic_print_string
00dd4     13 9B 02 F6 | 	mov	local19, result1
00dd8     00 9C 06 F6 | 	mov	local20, #0
00ddc     02 00 00 FF 
00de0     94 0E 06 F1 | 	add	objptr, ##1172
00de4     07 A1 02 FB | 	rdlong	local22, objptr
00de8     02 00 00 FF 
00dec     94 0E 86 F1 | 	sub	objptr, ##1172
00df0     50 9F 02 F6 | 	mov	local21, local22
00df4     00 A2 06 F6 | 	mov	local23, #0
00df8     0A A4 06 F6 | 	mov	local24, #10
00dfc     00 6C 06 F6 | 	mov	arg01, #0
00e00     4F 6F 02 F6 | 	mov	arg02, local21
00e04     00 70 06 F6 | 	mov	arg03, #0
00e08     0A 72 06 F6 | 	mov	arg04, #10
00e0c     F4 2C B0 FD | 	call	#__system___basic_print_integer
00e10     13 A7 02 F6 | 	mov	local25, result1
00e14     00 A8 06 F6 | 	mov	local26, #0
00e18     00 6C 06 F6 | 	mov	arg01, #0
00e1c     0A 6E 06 F6 | 	mov	arg02, #10
00e20     00 70 06 F6 | 	mov	arg03, #0
00e24     48 2C B0 FD | 	call	#__system___basic_print_char
00e28     01 26 06 F6 | 	mov	result1, #1
00e2c     01 AA 06 F6 | 	mov	local27, #1
00e30     00 AC 06 F6 | 	mov	local28, #0
00e34     00 6C 06 F6 | 	mov	arg01, #0
00e38     E4 3F B0 FD | 	call	#__system___getiolock_0102
00e3c     13 01 68 FC | 	wrlong	#0, result1
00e40     00 26 06 F6 | 	mov	result1, #0
00e44     00 AE 06 F6 | 	mov	local29, #0
00e48                 | LR__0008
00e48                 | '     if cmd=$82 then mousey=b11+b12 shl 7 : print "Mouse moved, x= ";mousex; " y= "; mousey
00e48     02 00 00 FF 
00e4c     84 0E 06 F1 | 	add	objptr, ##1156
00e50     07 89 02 FB | 	rdlong	local10, objptr
00e54     02 00 00 FF 
00e58     84 0E 86 F1 | 	sub	objptr, ##1156
00e5c     82 88 0E F2 | 	cmp	local10, #130 wz
00e60     40 01 90 5D |  if_ne	jmp	#LR__0009
00e64     45 89 02 F6 | 	mov	local10, local11
00e68     07 88 46 F7 | 	zerox	local10, #7
00e6c     46 B3 02 F6 | 	mov	local31, local12
00e70     07 B2 46 F7 | 	zerox	local31, #7
00e74     07 B2 66 F0 | 	shl	local31, #7
00e78     59 89 02 F1 | 	add	local10, local31
00e7c     02 00 00 FF 
00e80     94 0E 06 F1 | 	add	objptr, ##1172
00e84     07 89 62 FC | 	wrlong	local10, objptr
00e88     02 00 00 FF 
00e8c     94 0E 86 F1 | 	sub	objptr, ##1172
00e90     00 6C 06 F6 | 	mov	arg01, #0
00e94     88 3F B0 FD | 	call	#__system___getiolock_0102
00e98     13 6D 02 F6 | 	mov	arg01, result1
00e9c     84 29 B0 FD | 	call	#__system___lockmem
00ea0     00 26 06 F6 | 	mov	result1, #0
00ea4     00 B0 06 F6 | 	mov	local30, #0
00ea8     00 80 06 F6 | 	mov	local06, #0
00eac     2D 00 00 FF 
00eb0     9A 82 06 F6 | 	mov	local07, ##@LR__0311
00eb4     41 85 02 F6 | 	mov	local08, local07
00eb8     00 86 06 F6 | 	mov	local09, #0
00ebc     00 6C 06 F6 | 	mov	arg01, #0
00ec0     42 6F 02 F6 | 	mov	arg02, local08
00ec4     00 70 06 F6 | 	mov	arg03, #0
00ec8     F0 2B B0 FD | 	call	#__system___basic_print_string
00ecc     13 77 02 F6 | 	mov	local01, result1
00ed0     00 78 06 F6 | 	mov	local02, #0
00ed4     02 00 00 FF 
00ed8     90 0E 06 F1 | 	add	objptr, ##1168
00edc     07 7D 02 FB | 	rdlong	local04, objptr
00ee0     02 00 00 FF 
00ee4     90 0E 86 F1 | 	sub	objptr, ##1168
00ee8     3E 7B 02 F6 | 	mov	local03, local04
00eec     00 7E 06 F6 | 	mov	local05, #0
00ef0     0A 8E 06 F6 | 	mov	local13, #10
00ef4     00 6C 06 F6 | 	mov	arg01, #0
00ef8     3D 6F 02 F6 | 	mov	arg02, local03
00efc     00 70 06 F6 | 	mov	arg03, #0
00f00     0A 72 06 F6 | 	mov	arg04, #10
00f04     FC 2B B0 FD | 	call	#__system___basic_print_integer
00f08     13 91 02 F6 | 	mov	local14, result1
00f0c     00 92 06 F6 | 	mov	local15, #0
00f10     2D 00 00 FF 
00f14     AB 94 06 F6 | 	mov	local16, ##@LR__0312
00f18     4A 97 02 F6 | 	mov	local17, local16
00f1c     00 98 06 F6 | 	mov	local18, #0
00f20     00 6C 06 F6 | 	mov	arg01, #0
00f24     4B 6F 02 F6 | 	mov	arg02, local17
00f28     00 70 06 F6 | 	mov	arg03, #0
00f2c     8C 2B B0 FD | 	call	#__system___basic_print_string
00f30     13 9B 02 F6 | 	mov	local19, result1
00f34     00 9C 06 F6 | 	mov	local20, #0
00f38     02 00 00 FF 
00f3c     94 0E 06 F1 | 	add	objptr, ##1172
00f40     07 A1 02 FB | 	rdlong	local22, objptr
00f44     02 00 00 FF 
00f48     94 0E 86 F1 | 	sub	objptr, ##1172
00f4c     50 9F 02 F6 | 	mov	local21, local22
00f50     00 A2 06 F6 | 	mov	local23, #0
00f54     0A A4 06 F6 | 	mov	local24, #10
00f58     00 6C 06 F6 | 	mov	arg01, #0
00f5c     4F 6F 02 F6 | 	mov	arg02, local21
00f60     00 70 06 F6 | 	mov	arg03, #0
00f64     0A 72 06 F6 | 	mov	arg04, #10
00f68     98 2B B0 FD | 	call	#__system___basic_print_integer
00f6c     13 A7 02 F6 | 	mov	local25, result1
00f70     00 A8 06 F6 | 	mov	local26, #0
00f74     00 6C 06 F6 | 	mov	arg01, #0
00f78     0A 6E 06 F6 | 	mov	arg02, #10
00f7c     00 70 06 F6 | 	mov	arg03, #0
00f80     EC 2A B0 FD | 	call	#__system___basic_print_char
00f84     01 26 06 F6 | 	mov	result1, #1
00f88     01 AA 06 F6 | 	mov	local27, #1
00f8c     00 AC 06 F6 | 	mov	local28, #0
00f90     00 6C 06 F6 | 	mov	arg01, #0
00f94     88 3E B0 FD | 	call	#__system___getiolock_0102
00f98     13 01 68 FC | 	wrlong	#0, result1
00f9c     00 26 06 F6 | 	mov	result1, #0
00fa0     00 AE 06 F6 | 	mov	local29, #0
00fa4                 | LR__0009
00fa4                 | '     if cmd=$83 then mousewheel=b11+b12 shl 7 : print "Mousewheel: ";mousewheel
00fa4     02 00 00 FF 
00fa8     84 0E 06 F1 | 	add	objptr, ##1156
00fac     07 89 02 FB | 	rdlong	local10, objptr
00fb0     02 00 00 FF 
00fb4     84 0E 86 F1 | 	sub	objptr, ##1156
00fb8     83 88 0E F2 | 	cmp	local10, #131 wz
00fbc     D8 00 90 5D |  if_ne	jmp	#LR__0010
00fc0     45 89 02 F6 | 	mov	local10, local11
00fc4     07 88 46 F7 | 	zerox	local10, #7
00fc8     46 B3 02 F6 | 	mov	local31, local12
00fcc     07 B2 46 F7 | 	zerox	local31, #7
00fd0     07 B2 66 F0 | 	shl	local31, #7
00fd4     59 89 02 F1 | 	add	local10, local31
00fd8     02 00 00 FF 
00fdc     98 0E 06 F1 | 	add	objptr, ##1176
00fe0     07 89 62 FC | 	wrlong	local10, objptr
00fe4     02 00 00 FF 
00fe8     98 0E 86 F1 | 	sub	objptr, ##1176
00fec     00 6C 06 F6 | 	mov	arg01, #0
00ff0     2C 3E B0 FD | 	call	#__system___getiolock_0102
00ff4     13 6D 02 F6 | 	mov	arg01, result1
00ff8     28 28 B0 FD | 	call	#__system___lockmem
00ffc     00 26 06 F6 | 	mov	result1, #0
01000     00 80 06 F6 | 	mov	local06, #0
01004     2D 00 00 FF 
01008     B0 82 06 F6 | 	mov	local07, ##@LR__0313
0100c     41 85 02 F6 | 	mov	local08, local07
01010     00 86 06 F6 | 	mov	local09, #0
01014     00 6C 06 F6 | 	mov	arg01, #0
01018     42 6F 02 F6 | 	mov	arg02, local08
0101c     00 70 06 F6 | 	mov	arg03, #0
01020     98 2A B0 FD | 	call	#__system___basic_print_string
01024     13 77 02 F6 | 	mov	local01, result1
01028     00 78 06 F6 | 	mov	local02, #0
0102c     02 00 00 FF 
01030     98 0E 06 F1 | 	add	objptr, ##1176
01034     07 7D 02 FB | 	rdlong	local04, objptr
01038     02 00 00 FF 
0103c     98 0E 86 F1 | 	sub	objptr, ##1176
01040     3E 7B 02 F6 | 	mov	local03, local04
01044     00 7E 06 F6 | 	mov	local05, #0
01048     0A 8E 06 F6 | 	mov	local13, #10
0104c     00 6C 06 F6 | 	mov	arg01, #0
01050     3D 6F 02 F6 | 	mov	arg02, local03
01054     00 70 06 F6 | 	mov	arg03, #0
01058     0A 72 06 F6 | 	mov	arg04, #10
0105c     A4 2A B0 FD | 	call	#__system___basic_print_integer
01060     13 91 02 F6 | 	mov	local14, result1
01064     00 92 06 F6 | 	mov	local15, #0
01068     00 6C 06 F6 | 	mov	arg01, #0
0106c     0A 6E 06 F6 | 	mov	arg02, #10
01070     00 70 06 F6 | 	mov	arg03, #0
01074     F8 29 B0 FD | 	call	#__system___basic_print_char
01078     01 26 06 F6 | 	mov	result1, #1
0107c     01 94 06 F6 | 	mov	local16, #1
01080     00 96 06 F6 | 	mov	local17, #0
01084     00 6C 06 F6 | 	mov	arg01, #0
01088     94 3D B0 FD | 	call	#__system___getiolock_0102
0108c     13 01 68 FC | 	wrlong	#0, result1
01090     00 26 06 F6 | 	mov	result1, #0
01094     00 98 06 F6 | 	mov	local18, #0
01098                 | LR__0010
01098                 | '     if cmd=$84 then print "Mouse key: ";b11
01098     02 00 00 FF 
0109c     84 0E 06 F1 | 	add	objptr, ##1156
010a0     07 89 02 FB | 	rdlong	local10, objptr
010a4     02 00 00 FF 
010a8     84 0E 86 F1 | 	sub	objptr, ##1156
010ac     84 88 0E F2 | 	cmp	local10, #132 wz
010b0     A0 00 90 5D |  if_ne	jmp	#LR__0011
010b4     00 6C 06 F6 | 	mov	arg01, #0
010b8     64 3D B0 FD | 	call	#__system___getiolock_0102
010bc     13 6D 02 F6 | 	mov	arg01, result1
010c0     60 27 B0 FD | 	call	#__system___lockmem
010c4     00 26 06 F6 | 	mov	result1, #0
010c8     00 80 06 F6 | 	mov	local06, #0
010cc     2D 00 00 FF 
010d0     BD 82 06 F6 | 	mov	local07, ##@LR__0314
010d4     41 85 02 F6 | 	mov	local08, local07
010d8     00 86 06 F6 | 	mov	local09, #0
010dc     00 6C 06 F6 | 	mov	arg01, #0
010e0     42 6F 02 F6 | 	mov	arg02, local08
010e4     00 70 06 F6 | 	mov	arg03, #0
010e8     D0 29 B0 FD | 	call	#__system___basic_print_string
010ec     13 77 02 F6 | 	mov	local01, result1
010f0     00 78 06 F6 | 	mov	local02, #0
010f4     45 7B 02 F6 | 	mov	local03, local11
010f8     07 7A 46 F7 | 	zerox	local03, #7
010fc     3D 7D 02 F6 | 	mov	local04, local03
01100     00 7E 06 F6 | 	mov	local05, #0
01104     0A 8E 06 F6 | 	mov	local13, #10
01108     00 6C 06 F6 | 	mov	arg01, #0
0110c     3E 6F 02 F6 | 	mov	arg02, local04
01110     00 70 06 F6 | 	mov	arg03, #0
01114     0A 72 06 F6 | 	mov	arg04, #10
01118     2C 2A B0 FD | 	call	#__system___basic_print_unsigned
0111c     13 91 02 F6 | 	mov	local14, result1
01120     00 92 06 F6 | 	mov	local15, #0
01124     00 6C 06 F6 | 	mov	arg01, #0
01128     0A 6E 06 F6 | 	mov	arg02, #10
0112c     00 70 06 F6 | 	mov	arg03, #0
01130     3C 29 B0 FD | 	call	#__system___basic_print_char
01134     01 26 06 F6 | 	mov	result1, #1
01138     01 94 06 F6 | 	mov	local16, #1
0113c     00 96 06 F6 | 	mov	local17, #0
01140     00 6C 06 F6 | 	mov	arg01, #0
01144     D8 3C B0 FD | 	call	#__system___getiolock_0102
01148     13 01 68 FC | 	wrlong	#0, result1
0114c     00 26 06 F6 | 	mov	result1, #0
01150     00 98 06 F6 | 	mov	local18, #0
01154                 | LR__0011
01154                 | '     if cmd=$85 then print "Mouse clicked"
01154     02 00 00 FF 
01158     84 0E 06 F1 | 	add	objptr, ##1156
0115c     07 89 02 FB | 	rdlong	local10, objptr
01160     02 00 00 FF 
01164     84 0E 86 F1 | 	sub	objptr, ##1156
01168     85 88 0E F2 | 	cmp	local10, #133 wz
0116c     70 00 90 5D |  if_ne	jmp	#LR__0012
01170     00 6C 06 F6 | 	mov	arg01, #0
01174     A8 3C B0 FD | 	call	#__system___getiolock_0102
01178     13 6D 02 F6 | 	mov	arg01, result1
0117c     A4 26 B0 FD | 	call	#__system___lockmem
01180     00 26 06 F6 | 	mov	result1, #0
01184     00 80 06 F6 | 	mov	local06, #0
01188     2D 00 00 FF 
0118c     C9 82 06 F6 | 	mov	local07, ##@LR__0315
01190     41 85 02 F6 | 	mov	local08, local07
01194     00 86 06 F6 | 	mov	local09, #0
01198     00 6C 06 F6 | 	mov	arg01, #0
0119c     42 6F 02 F6 | 	mov	arg02, local08
011a0     00 70 06 F6 | 	mov	arg03, #0
011a4     14 29 B0 FD | 	call	#__system___basic_print_string
011a8     13 77 02 F6 | 	mov	local01, result1
011ac     00 78 06 F6 | 	mov	local02, #0
011b0     00 6C 06 F6 | 	mov	arg01, #0
011b4     0A 6E 06 F6 | 	mov	arg02, #10
011b8     00 70 06 F6 | 	mov	arg03, #0
011bc     B0 28 B0 FD | 	call	#__system___basic_print_char
011c0     01 26 06 F6 | 	mov	result1, #1
011c4     01 7A 06 F6 | 	mov	local03, #1
011c8     00 7C 06 F6 | 	mov	local04, #0
011cc     00 6C 06 F6 | 	mov	arg01, #0
011d0     4C 3C B0 FD | 	call	#__system___getiolock_0102
011d4     13 01 68 FC | 	wrlong	#0, result1
011d8     00 26 06 F6 | 	mov	result1, #0
011dc     00 7E 06 F6 | 	mov	local05, #0
011e0                 | LR__0012
011e0                 | '     if cmd=$86 then print "Mouse double clicked"
011e0     02 00 00 FF 
011e4     84 0E 06 F1 | 	add	objptr, ##1156
011e8     07 89 02 FB | 	rdlong	local10, objptr
011ec     02 00 00 FF 
011f0     84 0E 86 F1 | 	sub	objptr, ##1156
011f4     86 88 0E F2 | 	cmp	local10, #134 wz
011f8     6C 00 90 5D |  if_ne	jmp	#LR__0013
011fc     00 6C 06 F6 | 	mov	arg01, #0
01200     1C 3C B0 FD | 	call	#__system___getiolock_0102
01204     13 6D 02 F6 | 	mov	arg01, result1
01208     18 26 B0 FD | 	call	#__system___lockmem
0120c     00 26 06 F6 | 	mov	result1, #0
01210     00 80 06 F6 | 	mov	local06, #0
01214     2D 00 00 FF 
01218     D7 82 06 F6 | 	mov	local07, ##@LR__0316
0121c     41 85 02 F6 | 	mov	local08, local07
01220     00 86 06 F6 | 	mov	local09, #0
01224     00 6C 06 F6 | 	mov	arg01, #0
01228     42 6F 02 F6 | 	mov	arg02, local08
0122c     00 70 06 F6 | 	mov	arg03, #0
01230     88 28 B0 FD | 	call	#__system___basic_print_string
01234     13 77 02 F6 | 	mov	local01, result1
01238     00 78 06 F6 | 	mov	local02, #0
0123c     00 6C 06 F6 | 	mov	arg01, #0
01240     0A 6E 06 F6 | 	mov	arg02, #10
01244     00 70 06 F6 | 	mov	arg03, #0
01248     24 28 B0 FD | 	call	#__system___basic_print_char
0124c     01 26 06 F6 | 	mov	result1, #1
01250     01 7A 06 F6 | 	mov	local03, #1
01254     00 7C 06 F6 | 	mov	local04, #0
01258     00 6C 06 F6 | 	mov	arg01, #0
0125c     C0 3B B0 FD | 	call	#__system___getiolock_0102
01260     13 01 68 FC | 	wrlong	#0, result1
01264     00 7E 06 F6 | 	mov	local05, #0
01268                 | LR__0013
01268                 | LR__0014
01268                 | ' 
01268                 | '   if lpeek($38)<>0 then 
01268     38 6C 06 F6 | 	mov	arg01, #56
0126c                 | ' asm
0126c     38 26 06 FB | 	rdlong	result1, #56
01270                 | ' return r
01270     13 B3 0A F6 | 	mov	local31, result1 wz
01274     FC F6 9F AD |  if_e	jmp	#LR__0001
01278                 | ' asm
01278     3B 88 C6 FA | 	rdbyte	local10, #59
0127c                 | ' return r
0127c     07 88 46 F7 | 	zerox	local10, #7
01280     04 88 46 F0 | 	shr	local10, #4
01284     02 00 00 FF 
01288     84 0E 06 F1 | 	add	objptr, ##1156
0128c     07 89 62 FC | 	wrlong	local10, objptr
01290                 | ' asm
01290     3B B0 C6 FA | 	rdbyte	local30, #59
01294                 | ' return r
01294     58 89 02 F6 | 	mov	local10, local30
01298     07 88 46 F7 | 	zerox	local10, #7
0129c     0F 88 06 F5 | 	and	local10, #15
012a0     18 0E 06 F1 | 	add	objptr, #24
012a4     07 89 62 FC | 	wrlong	local10, objptr
012a8                 | ' asm
012a8     39 8A C6 FA | 	rdbyte	local11, #57
012ac                 | ' return r
012ac     38 6C 06 F6 | 	mov	arg01, #56
012b0                 | ' asm
012b0     38 26 C6 FA | 	rdbyte	result1, #56
012b4                 | ' return r
012b4     13 8D 02 F6 | 	mov	local12, result1
012b8     00 6E 06 F6 | 	mov	arg02, #0
012bc                 | ' asm
012bc     38 00 6C FC | 	wrlong	#0, #56
012c0                 | '     b11=peek($39)
012c0                 | '     b12=peek($38)
012c0                 | '     lpoke $38,0
012c0                 | '     if cmd=8 then print "Midi note off, channel ";channel;", note ";b11
012c0     18 0E 86 F1 | 	sub	objptr, #24
012c4     07 89 02 FB | 	rdlong	local10, objptr
012c8     02 00 00 FF 
012cc     84 0E 86 F1 | 	sub	objptr, ##1156
012d0     08 88 0E F2 | 	cmp	local10, #8 wz
012d4     08 01 90 5D |  if_ne	jmp	#LR__0015
012d8     00 6C 06 F6 | 	mov	arg01, #0
012dc     40 3B B0 FD | 	call	#__system___getiolock_0102
012e0     13 6D 02 F6 | 	mov	arg01, result1
012e4     3C 25 B0 FD | 	call	#__system___lockmem
012e8     00 26 06 F6 | 	mov	result1, #0
012ec     00 B0 06 F6 | 	mov	local30, #0
012f0     00 80 06 F6 | 	mov	local06, #0
012f4     2D 00 00 FF 
012f8     EC 82 06 F6 | 	mov	local07, ##@LR__0317
012fc     41 85 02 F6 | 	mov	local08, local07
01300     00 86 06 F6 | 	mov	local09, #0
01304     00 6C 06 F6 | 	mov	arg01, #0
01308     42 6F 02 F6 | 	mov	arg02, local08
0130c     00 70 06 F6 | 	mov	arg03, #0
01310     A8 27 B0 FD | 	call	#__system___basic_print_string
01314     13 77 02 F6 | 	mov	local01, result1
01318     00 78 06 F6 | 	mov	local02, #0
0131c     02 00 00 FF 
01320     9C 0E 06 F1 | 	add	objptr, ##1180
01324     07 7D 02 FB | 	rdlong	local04, objptr
01328     02 00 00 FF 
0132c     9C 0E 86 F1 | 	sub	objptr, ##1180
01330     3E 7B 02 F6 | 	mov	local03, local04
01334     00 7E 06 F6 | 	mov	local05, #0
01338     0A 8E 06 F6 | 	mov	local13, #10
0133c     00 6C 06 F6 | 	mov	arg01, #0
01340     3D 6F 02 F6 | 	mov	arg02, local03
01344     00 70 06 F6 | 	mov	arg03, #0
01348     0A 72 06 F6 | 	mov	arg04, #10
0134c     B4 27 B0 FD | 	call	#__system___basic_print_integer
01350     13 91 02 F6 | 	mov	local14, result1
01354     00 92 06 F6 | 	mov	local15, #0
01358     2D 00 00 FF 
0135c     04 95 06 F6 | 	mov	local16, ##@LR__0318
01360     4A 97 02 F6 | 	mov	local17, local16
01364     00 98 06 F6 | 	mov	local18, #0
01368     00 6C 06 F6 | 	mov	arg01, #0
0136c     4B 6F 02 F6 | 	mov	arg02, local17
01370     00 70 06 F6 | 	mov	arg03, #0
01374     44 27 B0 FD | 	call	#__system___basic_print_string
01378     13 9B 02 F6 | 	mov	local19, result1
0137c     00 9C 06 F6 | 	mov	local20, #0
01380     45 9F 02 F6 | 	mov	local21, local11
01384     07 9E 46 F7 | 	zerox	local21, #7
01388     4F A1 02 F6 | 	mov	local22, local21
0138c     00 A2 06 F6 | 	mov	local23, #0
01390     0A A4 06 F6 | 	mov	local24, #10
01394     00 6C 06 F6 | 	mov	arg01, #0
01398     50 6F 02 F6 | 	mov	arg02, local22
0139c     00 70 06 F6 | 	mov	arg03, #0
013a0     0A 72 06 F6 | 	mov	arg04, #10
013a4     A0 27 B0 FD | 	call	#__system___basic_print_unsigned
013a8     13 A7 02 F6 | 	mov	local25, result1
013ac     00 A8 06 F6 | 	mov	local26, #0
013b0     00 6C 06 F6 | 	mov	arg01, #0
013b4     0A 6E 06 F6 | 	mov	arg02, #10
013b8     00 70 06 F6 | 	mov	arg03, #0
013bc     B0 26 B0 FD | 	call	#__system___basic_print_char
013c0     01 26 06 F6 | 	mov	result1, #1
013c4     01 AA 06 F6 | 	mov	local27, #1
013c8     00 AC 06 F6 | 	mov	local28, #0
013cc     00 6C 06 F6 | 	mov	arg01, #0
013d0     4C 3A B0 FD | 	call	#__system___getiolock_0102
013d4     13 01 68 FC | 	wrlong	#0, result1
013d8     00 26 06 F6 | 	mov	result1, #0
013dc     00 AE 06 F6 | 	mov	local29, #0
013e0                 | LR__0015
013e0                 | '     if cmd=9 then print "Midi note on,  channel ";channel;", note ";b11;", velocity ";b12
013e0     02 00 00 FF 
013e4     84 0E 06 F1 | 	add	objptr, ##1156
013e8     07 89 02 FB | 	rdlong	local10, objptr
013ec     02 00 00 FF 
013f0     84 0E 86 F1 | 	sub	objptr, ##1156
013f4     09 88 0E F2 | 	cmp	local10, #9 wz
013f8     60 01 90 5D |  if_ne	jmp	#LR__0016
013fc     00 6C 06 F6 | 	mov	arg01, #0
01400     1C 3A B0 FD | 	call	#__system___getiolock_0102
01404     13 6D 02 F6 | 	mov	arg01, result1
01408     18 24 B0 FD | 	call	#__system___lockmem
0140c     00 26 06 F6 | 	mov	result1, #0
01410     00 B0 06 F6 | 	mov	local30, #0
01414     00 80 06 F6 | 	mov	local06, #0
01418     2D 00 00 FF 
0141c     0C 83 06 F6 | 	mov	local07, ##@LR__0319
01420     41 85 02 F6 | 	mov	local08, local07
01424     00 86 06 F6 | 	mov	local09, #0
01428     00 6C 06 F6 | 	mov	arg01, #0
0142c     42 6F 02 F6 | 	mov	arg02, local08
01430     00 70 06 F6 | 	mov	arg03, #0
01434     84 26 B0 FD | 	call	#__system___basic_print_string
01438     13 77 02 F6 | 	mov	local01, result1
0143c     00 78 06 F6 | 	mov	local02, #0
01440     02 00 00 FF 
01444     9C 0E 06 F1 | 	add	objptr, ##1180
01448     07 7D 02 FB | 	rdlong	local04, objptr
0144c     02 00 00 FF 
01450     9C 0E 86 F1 | 	sub	objptr, ##1180
01454     3E 7B 02 F6 | 	mov	local03, local04
01458     00 7E 06 F6 | 	mov	local05, #0
0145c     0A 8E 06 F6 | 	mov	local13, #10
01460     00 6C 06 F6 | 	mov	arg01, #0
01464     3D 6F 02 F6 | 	mov	arg02, local03
01468     00 70 06 F6 | 	mov	arg03, #0
0146c     0A 72 06 F6 | 	mov	arg04, #10
01470     90 26 B0 FD | 	call	#__system___basic_print_integer
01474     13 91 02 F6 | 	mov	local14, result1
01478     00 92 06 F6 | 	mov	local15, #0
0147c     2D 00 00 FF 
01480     24 95 06 F6 | 	mov	local16, ##@LR__0320
01484     4A 97 02 F6 | 	mov	local17, local16
01488     00 98 06 F6 | 	mov	local18, #0
0148c     00 6C 06 F6 | 	mov	arg01, #0
01490     4B 6F 02 F6 | 	mov	arg02, local17
01494     00 70 06 F6 | 	mov	arg03, #0
01498     20 26 B0 FD | 	call	#__system___basic_print_string
0149c     13 9B 02 F6 | 	mov	local19, result1
014a0     00 9C 06 F6 | 	mov	local20, #0
014a4     45 9F 02 F6 | 	mov	local21, local11
014a8     07 9E 46 F7 | 	zerox	local21, #7
014ac     4F A1 02 F6 | 	mov	local22, local21
014b0     00 A2 06 F6 | 	mov	local23, #0
014b4     0A A4 06 F6 | 	mov	local24, #10
014b8     00 6C 06 F6 | 	mov	arg01, #0
014bc     50 6F 02 F6 | 	mov	arg02, local22
014c0     00 70 06 F6 | 	mov	arg03, #0
014c4     0A 72 06 F6 | 	mov	arg04, #10
014c8     7C 26 B0 FD | 	call	#__system___basic_print_unsigned
014cc     13 A7 02 F6 | 	mov	local25, result1
014d0     00 A8 06 F6 | 	mov	local26, #0
014d4     2D 00 00 FF 
014d8     2C AB 06 F6 | 	mov	local27, ##@LR__0321
014dc     55 AD 02 F6 | 	mov	local28, local27
014e0     00 AE 06 F6 | 	mov	local29, #0
014e4     00 6C 06 F6 | 	mov	arg01, #0
014e8     56 6F 02 F6 | 	mov	arg02, local28
014ec     00 70 06 F6 | 	mov	arg03, #0
014f0     C8 25 B0 FD | 	call	#__system___basic_print_string
014f4     13 B5 02 F6 | 	mov	local32, result1
014f8     00 B6 06 F6 | 	mov	local33, #0
014fc     46 B9 02 F6 | 	mov	local34, local12
01500     07 B8 46 F7 | 	zerox	local34, #7
01504     5C BB 02 F6 | 	mov	local35, local34
01508     00 BC 06 F6 | 	mov	local36, #0
0150c     0A BE 06 F6 | 	mov	local37, #10
01510     00 6C 06 F6 | 	mov	arg01, #0
01514     5D 6F 02 F6 | 	mov	arg02, local35
01518     00 70 06 F6 | 	mov	arg03, #0
0151c     0A 72 06 F6 | 	mov	arg04, #10
01520     24 26 B0 FD | 	call	#__system___basic_print_unsigned
01524     13 C1 02 F6 | 	mov	local38, result1
01528     00 C2 06 F6 | 	mov	local39, #0
0152c     00 6C 06 F6 | 	mov	arg01, #0
01530     0A 6E 06 F6 | 	mov	arg02, #10
01534     00 70 06 F6 | 	mov	arg03, #0
01538     34 25 B0 FD | 	call	#__system___basic_print_char
0153c     01 26 06 F6 | 	mov	result1, #1
01540     01 C4 06 F6 | 	mov	local40, #1
01544     00 C6 06 F6 | 	mov	local41, #0
01548     00 6C 06 F6 | 	mov	arg01, #0
0154c     D0 38 B0 FD | 	call	#__system___getiolock_0102
01550     13 01 68 FC | 	wrlong	#0, result1
01554     00 26 06 F6 | 	mov	result1, #0
01558     00 C8 06 F6 | 	mov	local42, #0
0155c                 | LR__0016
0155c                 | '     if cmd=10 then print "Midi poly aftertouch, channel ";channel;" note ";b11;", velocity ";b12
0155c     02 00 00 FF 
01560     84 0E 06 F1 | 	add	objptr, ##1156
01564     07 89 02 FB | 	rdlong	local10, objptr
01568     02 00 00 FF 
0156c     84 0E 86 F1 | 	sub	objptr, ##1156
01570     0A 88 0E F2 | 	cmp	local10, #10 wz
01574     60 01 90 5D |  if_ne	jmp	#LR__0017
01578     00 6C 06 F6 | 	mov	arg01, #0
0157c     A0 38 B0 FD | 	call	#__system___getiolock_0102
01580     13 6D 02 F6 | 	mov	arg01, result1
01584     9C 22 B0 FD | 	call	#__system___lockmem
01588     00 26 06 F6 | 	mov	result1, #0
0158c     00 B0 06 F6 | 	mov	local30, #0
01590     00 80 06 F6 | 	mov	local06, #0
01594     2D 00 00 FF 
01598     38 83 06 F6 | 	mov	local07, ##@LR__0322
0159c     41 85 02 F6 | 	mov	local08, local07
015a0     00 86 06 F6 | 	mov	local09, #0
015a4     00 6C 06 F6 | 	mov	arg01, #0
015a8     42 6F 02 F6 | 	mov	arg02, local08
015ac     00 70 06 F6 | 	mov	arg03, #0
015b0     08 25 B0 FD | 	call	#__system___basic_print_string
015b4     13 77 02 F6 | 	mov	local01, result1
015b8     00 78 06 F6 | 	mov	local02, #0
015bc     02 00 00 FF 
015c0     9C 0E 06 F1 | 	add	objptr, ##1180
015c4     07 7D 02 FB | 	rdlong	local04, objptr
015c8     02 00 00 FF 
015cc     9C 0E 86 F1 | 	sub	objptr, ##1180
015d0     3E 7B 02 F6 | 	mov	local03, local04
015d4     00 7E 06 F6 | 	mov	local05, #0
015d8     0A 8E 06 F6 | 	mov	local13, #10
015dc     00 6C 06 F6 | 	mov	arg01, #0
015e0     3D 6F 02 F6 | 	mov	arg02, local03
015e4     00 70 06 F6 | 	mov	arg03, #0
015e8     0A 72 06 F6 | 	mov	arg04, #10
015ec     14 25 B0 FD | 	call	#__system___basic_print_integer
015f0     13 91 02 F6 | 	mov	local14, result1
015f4     00 92 06 F6 | 	mov	local15, #0
015f8     2D 00 00 FF 
015fc     57 95 06 F6 | 	mov	local16, ##@LR__0323
01600     4A 97 02 F6 | 	mov	local17, local16
01604     00 98 06 F6 | 	mov	local18, #0
01608     00 6C 06 F6 | 	mov	arg01, #0
0160c     4B 6F 02 F6 | 	mov	arg02, local17
01610     00 70 06 F6 | 	mov	arg03, #0
01614     A4 24 B0 FD | 	call	#__system___basic_print_string
01618     13 9B 02 F6 | 	mov	local19, result1
0161c     00 9C 06 F6 | 	mov	local20, #0
01620     45 9F 02 F6 | 	mov	local21, local11
01624     07 9E 46 F7 | 	zerox	local21, #7
01628     4F A1 02 F6 | 	mov	local22, local21
0162c     00 A2 06 F6 | 	mov	local23, #0
01630     0A A4 06 F6 | 	mov	local24, #10
01634     00 6C 06 F6 | 	mov	arg01, #0
01638     50 6F 02 F6 | 	mov	arg02, local22
0163c     00 70 06 F6 | 	mov	arg03, #0
01640     0A 72 06 F6 | 	mov	arg04, #10
01644     00 25 B0 FD | 	call	#__system___basic_print_unsigned
01648     13 A7 02 F6 | 	mov	local25, result1
0164c     00 A8 06 F6 | 	mov	local26, #0
01650     2D 00 00 FF 
01654     5E AB 06 F6 | 	mov	local27, ##@LR__0324
01658     55 AD 02 F6 | 	mov	local28, local27
0165c     00 AE 06 F6 | 	mov	local29, #0
01660     00 6C 06 F6 | 	mov	arg01, #0
01664     56 6F 02 F6 | 	mov	arg02, local28
01668     00 70 06 F6 | 	mov	arg03, #0
0166c     4C 24 B0 FD | 	call	#__system___basic_print_string
01670     13 B5 02 F6 | 	mov	local32, result1
01674     00 B6 06 F6 | 	mov	local33, #0
01678     46 B9 02 F6 | 	mov	local34, local12
0167c     07 B8 46 F7 | 	zerox	local34, #7
01680     5C BB 02 F6 | 	mov	local35, local34
01684     00 BC 06 F6 | 	mov	local36, #0
01688     0A BE 06 F6 | 	mov	local37, #10
0168c     00 6C 06 F6 | 	mov	arg01, #0
01690     5D 6F 02 F6 | 	mov	arg02, local35
01694     00 70 06 F6 | 	mov	arg03, #0
01698     0A 72 06 F6 | 	mov	arg04, #10
0169c     A8 24 B0 FD | 	call	#__system___basic_print_unsigned
016a0     13 C1 02 F6 | 	mov	local38, result1
016a4     00 C2 06 F6 | 	mov	local39, #0
016a8     00 6C 06 F6 | 	mov	arg01, #0
016ac     0A 6E 06 F6 | 	mov	arg02, #10
016b0     00 70 06 F6 | 	mov	arg03, #0
016b4     B8 23 B0 FD | 	call	#__system___basic_print_char
016b8     01 26 06 F6 | 	mov	result1, #1
016bc     01 C4 06 F6 | 	mov	local40, #1
016c0     00 C6 06 F6 | 	mov	local41, #0
016c4     00 6C 06 F6 | 	mov	arg01, #0
016c8     54 37 B0 FD | 	call	#__system___getiolock_0102
016cc     13 01 68 FC | 	wrlong	#0, result1
016d0     00 26 06 F6 | 	mov	result1, #0
016d4     00 C8 06 F6 | 	mov	local42, #0
016d8                 | LR__0017
016d8                 | '     if cmd=11 then print "Midi control change, channel ";channel;" controller ";b11;", value ";b12
016d8     02 00 00 FF 
016dc     84 0E 06 F1 | 	add	objptr, ##1156
016e0     07 89 02 FB | 	rdlong	local10, objptr
016e4     02 00 00 FF 
016e8     84 0E 86 F1 | 	sub	objptr, ##1156
016ec     0B 88 0E F2 | 	cmp	local10, #11 wz
016f0     60 01 90 5D |  if_ne	jmp	#LR__0018
016f4     00 6C 06 F6 | 	mov	arg01, #0
016f8     24 37 B0 FD | 	call	#__system___getiolock_0102
016fc     13 6D 02 F6 | 	mov	arg01, result1
01700     20 21 B0 FD | 	call	#__system___lockmem
01704     00 26 06 F6 | 	mov	result1, #0
01708     00 B0 06 F6 | 	mov	local30, #0
0170c     00 80 06 F6 | 	mov	local06, #0
01710     2D 00 00 FF 
01714     6A 83 06 F6 | 	mov	local07, ##@LR__0325
01718     41 85 02 F6 | 	mov	local08, local07
0171c     00 86 06 F6 | 	mov	local09, #0
01720     00 6C 06 F6 | 	mov	arg01, #0
01724     42 6F 02 F6 | 	mov	arg02, local08
01728     00 70 06 F6 | 	mov	arg03, #0
0172c     8C 23 B0 FD | 	call	#__system___basic_print_string
01730     13 77 02 F6 | 	mov	local01, result1
01734     00 78 06 F6 | 	mov	local02, #0
01738     02 00 00 FF 
0173c     9C 0E 06 F1 | 	add	objptr, ##1180
01740     07 7D 02 FB | 	rdlong	local04, objptr
01744     02 00 00 FF 
01748     9C 0E 86 F1 | 	sub	objptr, ##1180
0174c     3E 7B 02 F6 | 	mov	local03, local04
01750     00 7E 06 F6 | 	mov	local05, #0
01754     0A 8E 06 F6 | 	mov	local13, #10
01758     00 6C 06 F6 | 	mov	arg01, #0
0175c     3D 6F 02 F6 | 	mov	arg02, local03
01760     00 70 06 F6 | 	mov	arg03, #0
01764     0A 72 06 F6 | 	mov	arg04, #10
01768     98 23 B0 FD | 	call	#__system___basic_print_integer
0176c     13 91 02 F6 | 	mov	local14, result1
01770     00 92 06 F6 | 	mov	local15, #0
01774     2D 00 00 FF 
01778     88 95 06 F6 | 	mov	local16, ##@LR__0326
0177c     4A 97 02 F6 | 	mov	local17, local16
01780     00 98 06 F6 | 	mov	local18, #0
01784     00 6C 06 F6 | 	mov	arg01, #0
01788     4B 6F 02 F6 | 	mov	arg02, local17
0178c     00 70 06 F6 | 	mov	arg03, #0
01790     28 23 B0 FD | 	call	#__system___basic_print_string
01794     13 9B 02 F6 | 	mov	local19, result1
01798     00 9C 06 F6 | 	mov	local20, #0
0179c     45 9F 02 F6 | 	mov	local21, local11
017a0     07 9E 46 F7 | 	zerox	local21, #7
017a4     4F A1 02 F6 | 	mov	local22, local21
017a8     00 A2 06 F6 | 	mov	local23, #0
017ac     0A A4 06 F6 | 	mov	local24, #10
017b0     00 6C 06 F6 | 	mov	arg01, #0
017b4     50 6F 02 F6 | 	mov	arg02, local22
017b8     00 70 06 F6 | 	mov	arg03, #0
017bc     0A 72 06 F6 | 	mov	arg04, #10
017c0     84 23 B0 FD | 	call	#__system___basic_print_unsigned
017c4     13 A7 02 F6 | 	mov	local25, result1
017c8     00 A8 06 F6 | 	mov	local26, #0
017cc     2D 00 00 FF 
017d0     95 AB 06 F6 | 	mov	local27, ##@LR__0327
017d4     55 AD 02 F6 | 	mov	local28, local27
017d8     00 AE 06 F6 | 	mov	local29, #0
017dc     00 6C 06 F6 | 	mov	arg01, #0
017e0     56 6F 02 F6 | 	mov	arg02, local28
017e4     00 70 06 F6 | 	mov	arg03, #0
017e8     D0 22 B0 FD | 	call	#__system___basic_print_string
017ec     13 B5 02 F6 | 	mov	local32, result1
017f0     00 B6 06 F6 | 	mov	local33, #0
017f4     46 B9 02 F6 | 	mov	local34, local12
017f8     07 B8 46 F7 | 	zerox	local34, #7
017fc     5C BB 02 F6 | 	mov	local35, local34
01800     00 BC 06 F6 | 	mov	local36, #0
01804     0A BE 06 F6 | 	mov	local37, #10
01808     00 6C 06 F6 | 	mov	arg01, #0
0180c     5D 6F 02 F6 | 	mov	arg02, local35
01810     00 70 06 F6 | 	mov	arg03, #0
01814     0A 72 06 F6 | 	mov	arg04, #10
01818     2C 23 B0 FD | 	call	#__system___basic_print_unsigned
0181c     13 C1 02 F6 | 	mov	local38, result1
01820     00 C2 06 F6 | 	mov	local39, #0
01824     00 6C 06 F6 | 	mov	arg01, #0
01828     0A 6E 06 F6 | 	mov	arg02, #10
0182c     00 70 06 F6 | 	mov	arg03, #0
01830     3C 22 B0 FD | 	call	#__system___basic_print_char
01834     01 26 06 F6 | 	mov	result1, #1
01838     01 C4 06 F6 | 	mov	local40, #1
0183c     00 C6 06 F6 | 	mov	local41, #0
01840     00 6C 06 F6 | 	mov	arg01, #0
01844     D8 35 B0 FD | 	call	#__system___getiolock_0102
01848     13 01 68 FC | 	wrlong	#0, result1
0184c     00 26 06 F6 | 	mov	result1, #0
01850     00 C8 06 F6 | 	mov	local42, #0
01854                 | LR__0018
01854                 | '     if cmd=12 then print "Midi program change, channel ";channel;" program ";b12
01854     02 00 00 FF 
01858     84 0E 06 F1 | 	add	objptr, ##1156
0185c     07 89 02 FB | 	rdlong	local10, objptr
01860     02 00 00 FF 
01864     84 0E 86 F1 | 	sub	objptr, ##1156
01868     0C 88 0E F2 | 	cmp	local10, #12 wz
0186c     04 01 90 5D |  if_ne	jmp	#LR__0019
01870     00 6C 06 F6 | 	mov	arg01, #0
01874     A8 35 B0 FD | 	call	#__system___getiolock_0102
01878     13 6D 02 F6 | 	mov	arg01, result1
0187c     A4 1F B0 FD | 	call	#__system___lockmem
01880     00 26 06 F6 | 	mov	result1, #0
01884     00 80 06 F6 | 	mov	local06, #0
01888     2D 00 00 FF 
0188c     9E 83 06 F6 | 	mov	local07, ##@LR__0328
01890     41 85 02 F6 | 	mov	local08, local07
01894     00 86 06 F6 | 	mov	local09, #0
01898     00 6C 06 F6 | 	mov	arg01, #0
0189c     42 6F 02 F6 | 	mov	arg02, local08
018a0     00 70 06 F6 | 	mov	arg03, #0
018a4     14 22 B0 FD | 	call	#__system___basic_print_string
018a8     13 77 02 F6 | 	mov	local01, result1
018ac     00 78 06 F6 | 	mov	local02, #0
018b0     02 00 00 FF 
018b4     9C 0E 06 F1 | 	add	objptr, ##1180
018b8     07 7D 02 FB | 	rdlong	local04, objptr
018bc     02 00 00 FF 
018c0     9C 0E 86 F1 | 	sub	objptr, ##1180
018c4     3E 7B 02 F6 | 	mov	local03, local04
018c8     00 7E 06 F6 | 	mov	local05, #0
018cc     0A 8E 06 F6 | 	mov	local13, #10
018d0     00 6C 06 F6 | 	mov	arg01, #0
018d4     3D 6F 02 F6 | 	mov	arg02, local03
018d8     00 70 06 F6 | 	mov	arg03, #0
018dc     0A 72 06 F6 | 	mov	arg04, #10
018e0     20 22 B0 FD | 	call	#__system___basic_print_integer
018e4     13 91 02 F6 | 	mov	local14, result1
018e8     00 92 06 F6 | 	mov	local15, #0
018ec     2D 00 00 FF 
018f0     BC 95 06 F6 | 	mov	local16, ##@LR__0329
018f4     4A 97 02 F6 | 	mov	local17, local16
018f8     00 98 06 F6 | 	mov	local18, #0
018fc     00 6C 06 F6 | 	mov	arg01, #0
01900     4B 6F 02 F6 | 	mov	arg02, local17
01904     00 70 06 F6 | 	mov	arg03, #0
01908     B0 21 B0 FD | 	call	#__system___basic_print_string
0190c     13 9B 02 F6 | 	mov	local19, result1
01910     00 9C 06 F6 | 	mov	local20, #0
01914     46 9F 02 F6 | 	mov	local21, local12
01918     07 9E 46 F7 | 	zerox	local21, #7
0191c     4F A1 02 F6 | 	mov	local22, local21
01920     00 A2 06 F6 | 	mov	local23, #0
01924     0A A4 06 F6 | 	mov	local24, #10
01928     00 6C 06 F6 | 	mov	arg01, #0
0192c     50 6F 02 F6 | 	mov	arg02, local22
01930     00 70 06 F6 | 	mov	arg03, #0
01934     0A 72 06 F6 | 	mov	arg04, #10
01938     0C 22 B0 FD | 	call	#__system___basic_print_unsigned
0193c     13 A7 02 F6 | 	mov	local25, result1
01940     00 A8 06 F6 | 	mov	local26, #0
01944     00 6C 06 F6 | 	mov	arg01, #0
01948     0A 6E 06 F6 | 	mov	arg02, #10
0194c     00 70 06 F6 | 	mov	arg03, #0
01950     1C 21 B0 FD | 	call	#__system___basic_print_char
01954     01 26 06 F6 | 	mov	result1, #1
01958     01 AA 06 F6 | 	mov	local27, #1
0195c     00 AC 06 F6 | 	mov	local28, #0
01960     00 6C 06 F6 | 	mov	arg01, #0
01964     B8 34 B0 FD | 	call	#__system___getiolock_0102
01968     13 01 68 FC | 	wrlong	#0, result1
0196c     00 26 06 F6 | 	mov	result1, #0
01970     00 AE 06 F6 | 	mov	local29, #0
01974                 | LR__0019
01974                 | '     if cmd=13 then print "Midi mono aftertouch, channel ";channel;" value ";b12
01974     02 00 00 FF 
01978     84 0E 06 F1 | 	add	objptr, ##1156
0197c     07 89 02 FB | 	rdlong	local10, objptr
01980     02 00 00 FF 
01984     84 0E 86 F1 | 	sub	objptr, ##1156
01988     0D 88 0E F2 | 	cmp	local10, #13 wz
0198c     04 01 90 5D |  if_ne	jmp	#LR__0020
01990     00 6C 06 F6 | 	mov	arg01, #0
01994     88 34 B0 FD | 	call	#__system___getiolock_0102
01998     13 6D 02 F6 | 	mov	arg01, result1
0199c     84 1E B0 FD | 	call	#__system___lockmem
019a0     00 26 06 F6 | 	mov	result1, #0
019a4     00 80 06 F6 | 	mov	local06, #0
019a8     2D 00 00 FF 
019ac     C6 83 06 F6 | 	mov	local07, ##@LR__0330
019b0     41 85 02 F6 | 	mov	local08, local07
019b4     00 86 06 F6 | 	mov	local09, #0
019b8     00 6C 06 F6 | 	mov	arg01, #0
019bc     42 6F 02 F6 | 	mov	arg02, local08
019c0     00 70 06 F6 | 	mov	arg03, #0
019c4     F4 20 B0 FD | 	call	#__system___basic_print_string
019c8     13 77 02 F6 | 	mov	local01, result1
019cc     00 78 06 F6 | 	mov	local02, #0
019d0     02 00 00 FF 
019d4     9C 0E 06 F1 | 	add	objptr, ##1180
019d8     07 7D 02 FB | 	rdlong	local04, objptr
019dc     02 00 00 FF 
019e0     9C 0E 86 F1 | 	sub	objptr, ##1180
019e4     3E 7B 02 F6 | 	mov	local03, local04
019e8     00 7E 06 F6 | 	mov	local05, #0
019ec     0A 8E 06 F6 | 	mov	local13, #10
019f0     00 6C 06 F6 | 	mov	arg01, #0
019f4     3D 6F 02 F6 | 	mov	arg02, local03
019f8     00 70 06 F6 | 	mov	arg03, #0
019fc     0A 72 06 F6 | 	mov	arg04, #10
01a00     00 21 B0 FD | 	call	#__system___basic_print_integer
01a04     13 91 02 F6 | 	mov	local14, result1
01a08     00 92 06 F6 | 	mov	local15, #0
01a0c     2D 00 00 FF 
01a10     E5 95 06 F6 | 	mov	local16, ##@LR__0331
01a14     4A 97 02 F6 | 	mov	local17, local16
01a18     00 98 06 F6 | 	mov	local18, #0
01a1c     00 6C 06 F6 | 	mov	arg01, #0
01a20     4B 6F 02 F6 | 	mov	arg02, local17
01a24     00 70 06 F6 | 	mov	arg03, #0
01a28     90 20 B0 FD | 	call	#__system___basic_print_string
01a2c     13 9B 02 F6 | 	mov	local19, result1
01a30     00 9C 06 F6 | 	mov	local20, #0
01a34     46 9F 02 F6 | 	mov	local21, local12
01a38     07 9E 46 F7 | 	zerox	local21, #7
01a3c     4F A1 02 F6 | 	mov	local22, local21
01a40     00 A2 06 F6 | 	mov	local23, #0
01a44     0A A4 06 F6 | 	mov	local24, #10
01a48     00 6C 06 F6 | 	mov	arg01, #0
01a4c     50 6F 02 F6 | 	mov	arg02, local22
01a50     00 70 06 F6 | 	mov	arg03, #0
01a54     0A 72 06 F6 | 	mov	arg04, #10
01a58     EC 20 B0 FD | 	call	#__system___basic_print_unsigned
01a5c     13 A7 02 F6 | 	mov	local25, result1
01a60     00 A8 06 F6 | 	mov	local26, #0
01a64     00 6C 06 F6 | 	mov	arg01, #0
01a68     0A 6E 06 F6 | 	mov	arg02, #10
01a6c     00 70 06 F6 | 	mov	arg03, #0
01a70     FC 1F B0 FD | 	call	#__system___basic_print_char
01a74     01 26 06 F6 | 	mov	result1, #1
01a78     01 AA 06 F6 | 	mov	local27, #1
01a7c     00 AC 06 F6 | 	mov	local28, #0
01a80     00 6C 06 F6 | 	mov	arg01, #0
01a84     98 33 B0 FD | 	call	#__system___getiolock_0102
01a88     13 01 68 FC | 	wrlong	#0, result1
01a8c     00 26 06 F6 | 	mov	result1, #0
01a90     00 AE 06 F6 | 	mov	local29, #0
01a94                 | LR__0020
01a94                 | '     if cmd=14 then print "Midi pitch bend, channel ";channel;" value ";b11+b12 shl 7
01a94     02 00 00 FF 
01a98     84 0E 06 F1 | 	add	objptr, ##1156
01a9c     07 89 02 FB | 	rdlong	local10, objptr
01aa0     02 00 00 FF 
01aa4     84 0E 86 F1 | 	sub	objptr, ##1156
01aa8     0E 88 0E F2 | 	cmp	local10, #14 wz
01aac     14 01 90 5D |  if_ne	jmp	#LR__0021
01ab0     00 6C 06 F6 | 	mov	arg01, #0
01ab4     68 33 B0 FD | 	call	#__system___getiolock_0102
01ab8     13 6D 02 F6 | 	mov	arg01, result1
01abc     64 1D B0 FD | 	call	#__system___lockmem
01ac0     00 26 06 F6 | 	mov	result1, #0
01ac4     00 80 06 F6 | 	mov	local06, #0
01ac8     2D 00 00 FF 
01acc     ED 83 06 F6 | 	mov	local07, ##@LR__0332
01ad0     41 85 02 F6 | 	mov	local08, local07
01ad4     00 86 06 F6 | 	mov	local09, #0
01ad8     00 6C 06 F6 | 	mov	arg01, #0
01adc     42 6F 02 F6 | 	mov	arg02, local08
01ae0     00 70 06 F6 | 	mov	arg03, #0
01ae4     D4 1F B0 FD | 	call	#__system___basic_print_string
01ae8     13 77 02 F6 | 	mov	local01, result1
01aec     00 78 06 F6 | 	mov	local02, #0
01af0     02 00 00 FF 
01af4     9C 0E 06 F1 | 	add	objptr, ##1180
01af8     07 7D 02 FB | 	rdlong	local04, objptr
01afc     02 00 00 FF 
01b00     9C 0E 86 F1 | 	sub	objptr, ##1180
01b04     3E 7B 02 F6 | 	mov	local03, local04
01b08     00 7E 06 F6 | 	mov	local05, #0
01b0c     0A 8E 06 F6 | 	mov	local13, #10
01b10     00 6C 06 F6 | 	mov	arg01, #0
01b14     3D 6F 02 F6 | 	mov	arg02, local03
01b18     00 70 06 F6 | 	mov	arg03, #0
01b1c     0A 72 06 F6 | 	mov	arg04, #10
01b20     E0 1F B0 FD | 	call	#__system___basic_print_integer
01b24     13 91 02 F6 | 	mov	local14, result1
01b28     00 92 06 F6 | 	mov	local15, #0
01b2c     2E 00 00 FF 
01b30     07 94 06 F6 | 	mov	local16, ##@LR__0333
01b34     4A 97 02 F6 | 	mov	local17, local16
01b38     00 98 06 F6 | 	mov	local18, #0
01b3c     00 6C 06 F6 | 	mov	arg01, #0
01b40     4B 6F 02 F6 | 	mov	arg02, local17
01b44     00 70 06 F6 | 	mov	arg03, #0
01b48     70 1F B0 FD | 	call	#__system___basic_print_string
01b4c     13 9B 02 F6 | 	mov	local19, result1
01b50     00 9C 06 F6 | 	mov	local20, #0
01b54     45 9F 02 F6 | 	mov	local21, local11
01b58     07 9E 46 F7 | 	zerox	local21, #7
01b5c     46 A1 02 F6 | 	mov	local22, local12
01b60     07 A0 46 F7 | 	zerox	local22, #7
01b64     07 A0 66 F0 | 	shl	local22, #7
01b68     50 9F 02 F1 | 	add	local21, local22
01b6c     4F A3 02 F6 | 	mov	local23, local21
01b70     00 A4 06 F6 | 	mov	local24, #0
01b74     0A A6 06 F6 | 	mov	local25, #10
01b78     00 6C 06 F6 | 	mov	arg01, #0
01b7c     51 6F 02 F6 | 	mov	arg02, local23
01b80     00 70 06 F6 | 	mov	arg03, #0
01b84     0A 72 06 F6 | 	mov	arg04, #10
01b88     78 1F B0 FD | 	call	#__system___basic_print_integer
01b8c     13 A9 02 F6 | 	mov	local26, result1
01b90     00 AA 06 F6 | 	mov	local27, #0
01b94     00 6C 06 F6 | 	mov	arg01, #0
01b98     0A 6E 06 F6 | 	mov	arg02, #10
01b9c     00 70 06 F6 | 	mov	arg03, #0
01ba0     CC 1E B0 FD | 	call	#__system___basic_print_char
01ba4     01 26 06 F6 | 	mov	result1, #1
01ba8     01 AC 06 F6 | 	mov	local28, #1
01bac     00 AE 06 F6 | 	mov	local29, #0
01bb0     00 6C 06 F6 | 	mov	arg01, #0
01bb4     68 32 B0 FD | 	call	#__system___getiolock_0102
01bb8     13 01 68 FC | 	wrlong	#0, result1
01bbc     00 26 06 F6 | 	mov	result1, #0
01bc0     00 B4 06 F6 | 	mov	local32, #0
01bc4                 | LR__0021
01bc4                 | '     if cmd=15 then print "Novation control key "; b12 ' TODO Sysex has to be properly processed 
01bc4     02 00 00 FF 
01bc8     84 0E 06 F1 | 	add	objptr, ##1156
01bcc     07 B3 02 FB | 	rdlong	local31, objptr
01bd0     02 00 00 FF 
01bd4     84 0E 86 F1 | 	sub	objptr, ##1156
01bd8     0F B2 0E F2 | 	cmp	local31, #15 wz
01bdc     94 ED 9F 5D |  if_ne	jmp	#LR__0001
01be0     00 B2 06 F6 | 	mov	local31, #0
01be4     00 6C 06 F6 | 	mov	arg01, #0
01be8     34 32 B0 FD | 	call	#__system___getiolock_0102
01bec     13 6D 02 F6 | 	mov	arg01, result1
01bf0     30 1C B0 FD | 	call	#__system___lockmem
01bf4     00 26 06 F6 | 	mov	result1, #0
01bf8     00 80 06 F6 | 	mov	local06, #0
01bfc     2E 00 00 FF 
01c00     0F 82 06 F6 | 	mov	local07, ##@LR__0334
01c04     41 85 02 F6 | 	mov	local08, local07
01c08     00 86 06 F6 | 	mov	local09, #0
01c0c     00 6C 06 F6 | 	mov	arg01, #0
01c10     42 6F 02 F6 | 	mov	arg02, local08
01c14     00 70 06 F6 | 	mov	arg03, #0
01c18     A0 1E B0 FD | 	call	#__system___basic_print_string
01c1c     13 77 02 F6 | 	mov	local01, result1
01c20     00 78 06 F6 | 	mov	local02, #0
01c24     46 7B 02 F6 | 	mov	local03, local12
01c28     07 7A 46 F7 | 	zerox	local03, #7
01c2c     3D 7D 02 F6 | 	mov	local04, local03
01c30     00 7E 06 F6 | 	mov	local05, #0
01c34     0A 8E 06 F6 | 	mov	local13, #10
01c38     00 6C 06 F6 | 	mov	arg01, #0
01c3c     3E 6F 02 F6 | 	mov	arg02, local04
01c40     00 70 06 F6 | 	mov	arg03, #0
01c44     0A 72 06 F6 | 	mov	arg04, #10
01c48     FC 1E B0 FD | 	call	#__system___basic_print_unsigned
01c4c     13 91 02 F6 | 	mov	local14, result1
01c50     00 92 06 F6 | 	mov	local15, #0
01c54     00 6C 06 F6 | 	mov	arg01, #0
01c58     0A 6E 06 F6 | 	mov	arg02, #10
01c5c     00 70 06 F6 | 	mov	arg03, #0
01c60     0C 1E B0 FD | 	call	#__system___basic_print_char
01c64     01 26 06 F6 | 	mov	result1, #1
01c68     01 94 06 F6 | 	mov	local16, #1
01c6c     00 96 06 F6 | 	mov	local17, #0
01c70     00 6C 06 F6 | 	mov	arg01, #0
01c74     A8 31 B0 FD | 	call	#__system___getiolock_0102
01c78     13 01 68 FC | 	wrlong	#0, result1
01c7c     00 98 06 F6 | 	mov	local18, #0
01c80     F0 EC 9F FD | 	jmp	#LR__0001
01c84     AF F0 03 F6 | 	mov	ptra, fp
01c88     BF 00 A0 FD | 	call	#popregs_
01c8c                 | _program_ret
01c8c     2D 00 64 FD | 	ret
01c90                 | 
01c90                 | ' 
01c90                 | ' 
01c90                 | ' ''---------- putpixel - put a pixel on the screen
01c90                 | ' 
01c90                 | ' pub putpixel1(x,y,c) |byte b
01c90                 | _hng030rm_spin2_putpixel1
01c90                 | ' 
01c90                 | ' 
01c90                 | ' if ((x>=0) & (x<32*cpl) & (y>=0) & (y<lines))
01c90     00 2C 06 F6 | 	mov	_var01, #0
01c94     00 6C 5E F2 | 	cmps	arg01, #0 wcz
01c98     01 2C 66 36 |  if_ae	neg	_var01, #1
01c9c     00 2E 06 F6 | 	mov	_var02, #0
01ca0     90 0E 06 F1 | 	add	objptr, #144
01ca4     07 31 02 FB | 	rdlong	_var03, objptr
01ca8     05 30 66 F0 | 	shl	_var03, #5
01cac     18 6D 5A F2 | 	cmps	arg01, _var03 wcz
01cb0     01 2E 66 C6 |  if_b	neg	_var02, #1
01cb4     17 2D 02 F5 | 	and	_var01, _var02
01cb8     00 32 06 F6 | 	mov	_var04, #0
01cbc     00 6E 5E F2 | 	cmps	arg02, #0 wcz
01cc0     01 32 66 36 |  if_ae	neg	_var04, #1
01cc4     19 2D 02 F5 | 	and	_var01, _var04
01cc8     00 34 06 F6 | 	mov	_var05, #0
01ccc     04 0E 06 F1 | 	add	objptr, #4
01cd0     07 37 02 FB | 	rdlong	_var06, objptr
01cd4     94 0E 86 F1 | 	sub	objptr, #148
01cd8     1B 6F 5A F2 | 	cmps	arg02, _var06 wcz
01cdc     01 34 66 C6 |  if_b	neg	_var05, #1
01ce0     1A 2D CA F7 | 	test	_var01, _var05 wz
01ce4     90 00 90 AD |  if_e	jmp	#LR__0024
01ce8                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>3)]
01ce8     07 2D 02 FB | 	rdlong	_var01, objptr
01cec     90 0E 06 F1 | 	add	objptr, #144
01cf0     07 2F 02 FB | 	rdlong	_var02, objptr
01cf4     90 0E 86 F1 | 	sub	objptr, #144
01cf8     02 2E 66 F0 | 	shl	_var02, #2
01cfc     37 2F 02 FD | 	qmul	_var02, arg02
01d00     18 38 62 FD | 	getqx	_var07
01d04     1C 2D 02 F1 | 	add	_var01, _var07
01d08     36 33 02 F6 | 	mov	_var04, arg01
01d0c     03 32 46 F0 | 	shr	_var04, #3
01d10     19 2D 02 F1 | 	add	_var01, _var04
01d14     16 3B C2 FA | 	rdbyte	_var08, _var01
01d18                 | '     if (c==0)
01d18     00 70 0E F2 | 	cmp	arg03, #0 wz
01d1c     18 00 90 5D |  if_ne	jmp	#LR__0022
01d20                 | '       b:=b & !(1<<(x//8))
01d20     36 31 52 F6 | 	abs	_var03, arg01 wc
01d24     07 30 06 F5 | 	and	_var03, #7
01d28     18 31 62 C6 |  if_b	neg	_var03, _var03
01d2c     18 2F C2 F9 | 	decod	_var02, _var03
01d30     17 3B 22 F5 | 	andn	_var08, _var02
01d34                 | '     else
01d34     14 00 90 FD | 	jmp	#LR__0023
01d38                 | LR__0022
01d38                 | '       b:=b |(1<<(x//8))
01d38     36 31 52 F6 | 	abs	_var03, arg01 wc
01d3c     07 30 06 F5 | 	and	_var03, #7
01d40     18 31 62 C6 |  if_b	neg	_var03, _var03
01d44     18 2F C2 F9 | 	decod	_var02, _var03
01d48     17 3B 42 F5 | 	or	_var08, _var02
01d4c                 | LR__0023
01d4c                 | '     byte[buf_ptr+4*cpl*y+(x>>3)]:=b
01d4c     07 2D 02 FB | 	rdlong	_var01, objptr
01d50     90 0E 06 F1 | 	add	objptr, #144
01d54     07 2F 02 FB | 	rdlong	_var02, objptr
01d58     90 0E 86 F1 | 	sub	objptr, #144
01d5c     02 2E 66 F0 | 	shl	_var02, #2
01d60     37 2F 02 FD | 	qmul	_var02, arg02
01d64     18 38 62 FD | 	getqx	_var07
01d68     1C 2D 02 F1 | 	add	_var01, _var07
01d6c     03 6C 46 F0 | 	shr	arg01, #3
01d70     36 2D 02 F1 | 	add	_var01, arg01
01d74     16 3B 42 FC | 	wrbyte	_var08, _var01
01d78                 | LR__0024
01d78                 | _hng030rm_spin2_putpixel1_ret
01d78     2D 00 64 FD | 	ret
01d7c                 | 
01d7c                 | ' 
01d7c                 | ' 
01d7c                 | ' pub putpixel2(x,y,c) |byte b
01d7c                 | _hng030rm_spin2_putpixel2
01d7c                 | ' 
01d7c                 | ' 
01d7c                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01d7c     00 2C 06 F6 | 	mov	_var01, #0
01d80     00 6C 5E F2 | 	cmps	arg01, #0 wcz
01d84     01 2C 66 36 |  if_ae	neg	_var01, #1
01d88     00 2E 06 F6 | 	mov	_var02, #0
01d8c     90 0E 06 F1 | 	add	objptr, #144
01d90     07 31 02 FB | 	rdlong	_var03, objptr
01d94     04 30 66 F0 | 	shl	_var03, #4
01d98     18 6D 5A F2 | 	cmps	arg01, _var03 wcz
01d9c     01 2E 66 C6 |  if_b	neg	_var02, #1
01da0     17 2D 02 F5 | 	and	_var01, _var02
01da4     00 32 06 F6 | 	mov	_var04, #0
01da8     00 6E 5E F2 | 	cmps	arg02, #0 wcz
01dac     01 32 66 36 |  if_ae	neg	_var04, #1
01db0     19 2D 02 F5 | 	and	_var01, _var04
01db4     00 34 06 F6 | 	mov	_var05, #0
01db8     04 0E 06 F1 | 	add	objptr, #4
01dbc     07 37 02 FB | 	rdlong	_var06, objptr
01dc0     94 0E 86 F1 | 	sub	objptr, #148
01dc4     1B 6F 5A F2 | 	cmps	arg02, _var06 wcz
01dc8     01 34 66 C6 |  if_b	neg	_var05, #1
01dcc     1A 2D CA F7 | 	test	_var01, _var05 wz
01dd0     90 00 90 AD |  if_e	jmp	#LR__0025
01dd4                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>2)]
01dd4     07 2D 02 FB | 	rdlong	_var01, objptr
01dd8     90 0E 06 F1 | 	add	objptr, #144
01ddc     07 2F 02 FB | 	rdlong	_var02, objptr
01de0     90 0E 86 F1 | 	sub	objptr, #144
01de4     02 2E 66 F0 | 	shl	_var02, #2
01de8     37 2F 02 FD | 	qmul	_var02, arg02
01dec     18 38 62 FD | 	getqx	_var07
01df0     1C 2D 02 F1 | 	add	_var01, _var07
01df4     36 33 02 F6 | 	mov	_var04, arg01
01df8     02 32 46 F0 | 	shr	_var04, #2
01dfc     19 2D 02 F1 | 	add	_var01, _var04
01e00     16 3B C2 FA | 	rdbyte	_var08, _var01
01e04                 | '     b:=b & !(%11<<((x//4)<<1))
01e04     36 31 52 F6 | 	abs	_var03, arg01 wc
01e08     03 30 06 F5 | 	and	_var03, #3
01e0c     18 31 62 C6 |  if_b	neg	_var03, _var03
01e10     01 30 66 F0 | 	shl	_var03, #1
01e14     03 2E 06 F6 | 	mov	_var02, #3
01e18     18 2F 62 F0 | 	shl	_var02, _var03
01e1c     17 3B 22 F5 | 	andn	_var08, _var02
01e20                 | '     b:=b |(c<<((x//4)<<1))
01e20     36 31 52 F6 | 	abs	_var03, arg01 wc
01e24     03 30 06 F5 | 	and	_var03, #3
01e28     18 31 62 C6 |  if_b	neg	_var03, _var03
01e2c     01 30 66 F0 | 	shl	_var03, #1
01e30     18 71 62 F0 | 	shl	arg03, _var03
01e34     38 3B 42 F5 | 	or	_var08, arg03
01e38                 | '     byte[buf_ptr+4*cpl*y+(x>>2)]:=b
01e38     07 2D 02 FB | 	rdlong	_var01, objptr
01e3c     90 0E 06 F1 | 	add	objptr, #144
01e40     07 2F 02 FB | 	rdlong	_var02, objptr
01e44     90 0E 86 F1 | 	sub	objptr, #144
01e48     02 2E 66 F0 | 	shl	_var02, #2
01e4c     37 2F 02 FD | 	qmul	_var02, arg02
01e50     18 38 62 FD | 	getqx	_var07
01e54     1C 2D 02 F1 | 	add	_var01, _var07
01e58     02 6C 46 F0 | 	shr	arg01, #2
01e5c     36 2D 02 F1 | 	add	_var01, arg01
01e60     16 3B 42 FC | 	wrbyte	_var08, _var01
01e64                 | LR__0025
01e64                 | _hng030rm_spin2_putpixel2_ret
01e64     2D 00 64 FD | 	ret
01e68                 | 
01e68                 | ' 
01e68                 | ' 
01e68                 | ' pub putpixel4(x,y,c) |byte b
01e68                 | _hng030rm_spin2_putpixel4
01e68                 | ' 
01e68                 | ' if ((x>=0) & (x<16*cpl) & (y>=0) & (y<lines))
01e68     00 2C 06 F6 | 	mov	_var01, #0
01e6c     00 6C 5E F2 | 	cmps	arg01, #0 wcz
01e70     01 2C 66 36 |  if_ae	neg	_var01, #1
01e74     00 2E 06 F6 | 	mov	_var02, #0
01e78     90 0E 06 F1 | 	add	objptr, #144
01e7c     07 31 02 FB | 	rdlong	_var03, objptr
01e80     04 30 66 F0 | 	shl	_var03, #4
01e84     18 6D 5A F2 | 	cmps	arg01, _var03 wcz
01e88     01 2E 66 C6 |  if_b	neg	_var02, #1
01e8c     17 2D 02 F5 | 	and	_var01, _var02
01e90     00 32 06 F6 | 	mov	_var04, #0
01e94     00 6E 5E F2 | 	cmps	arg02, #0 wcz
01e98     01 32 66 36 |  if_ae	neg	_var04, #1
01e9c     19 2D 02 F5 | 	and	_var01, _var04
01ea0     00 34 06 F6 | 	mov	_var05, #0
01ea4     04 0E 06 F1 | 	add	objptr, #4
01ea8     07 37 02 FB | 	rdlong	_var06, objptr
01eac     94 0E 86 F1 | 	sub	objptr, #148
01eb0     1B 6F 5A F2 | 	cmps	arg02, _var06 wcz
01eb4     01 34 66 C6 |  if_b	neg	_var05, #1
01eb8     1A 2D CA F7 | 	test	_var01, _var05 wz
01ebc     90 00 90 AD |  if_e	jmp	#LR__0026
01ec0                 | '     b:=byte[buf_ptr+4*cpl*y+(x>>1)]
01ec0     07 2D 02 FB | 	rdlong	_var01, objptr
01ec4     90 0E 06 F1 | 	add	objptr, #144
01ec8     07 2F 02 FB | 	rdlong	_var02, objptr
01ecc     90 0E 86 F1 | 	sub	objptr, #144
01ed0     02 2E 66 F0 | 	shl	_var02, #2
01ed4     37 2F 02 FD | 	qmul	_var02, arg02
01ed8     18 38 62 FD | 	getqx	_var07
01edc     1C 2D 02 F1 | 	add	_var01, _var07
01ee0     36 33 02 F6 | 	mov	_var04, arg01
01ee4     01 32 46 F0 | 	shr	_var04, #1
01ee8     19 2D 02 F1 | 	add	_var01, _var04
01eec     16 3B C2 FA | 	rdbyte	_var08, _var01
01ef0                 | '     b:=b & !(%1111<<((x//2)<<2))
01ef0     36 31 52 F6 | 	abs	_var03, arg01 wc
01ef4     01 30 06 F5 | 	and	_var03, #1
01ef8     18 31 62 C6 |  if_b	neg	_var03, _var03
01efc     02 30 66 F0 | 	shl	_var03, #2
01f00     0F 2E 06 F6 | 	mov	_var02, #15
01f04     18 2F 62 F0 | 	shl	_var02, _var03
01f08     17 3B 22 F5 | 	andn	_var08, _var02
01f0c                 | '     b:=b |(c<<((x//2)<<2))
01f0c     36 31 52 F6 | 	abs	_var03, arg01 wc
01f10     01 30 06 F5 | 	and	_var03, #1
01f14     18 31 62 C6 |  if_b	neg	_var03, _var03
01f18     02 30 66 F0 | 	shl	_var03, #2
01f1c     18 71 62 F0 | 	shl	arg03, _var03
01f20     38 3B 42 F5 | 	or	_var08, arg03
01f24                 | '     byte[buf_ptr+4*cpl*y+(x>>1)]:=b
01f24     07 2D 02 FB | 	rdlong	_var01, objptr
01f28     90 0E 06 F1 | 	add	objptr, #144
01f2c     07 2F 02 FB | 	rdlong	_var02, objptr
01f30     90 0E 86 F1 | 	sub	objptr, #144
01f34     02 2E 66 F0 | 	shl	_var02, #2
01f38     37 2F 02 FD | 	qmul	_var02, arg02
01f3c     18 38 62 FD | 	getqx	_var07
01f40     1C 2D 02 F1 | 	add	_var01, _var07
01f44     01 6C 46 F0 | 	shr	arg01, #1
01f48     36 2D 02 F1 | 	add	_var01, arg01
01f4c     16 3B 42 FC | 	wrbyte	_var08, _var01
01f50                 | LR__0026
01f50                 | _hng030rm_spin2_putpixel4_ret
01f50     2D 00 64 FD | 	ret
01f54                 | 
01f54                 | ' 
01f54                 | ' 
01f54                 | ' pub putpixel8(x,y,c)
01f54                 | _hng030rm_spin2_putpixel8
01f54                 | ' 
01f54                 | ' if ((x>=0) & (x<4*cpl) & (y>=0) & (y<lines))
01f54     00 2C 06 F6 | 	mov	_var01, #0
01f58     00 6C 5E F2 | 	cmps	arg01, #0 wcz
01f5c     01 2C 66 36 |  if_ae	neg	_var01, #1
01f60     00 2E 06 F6 | 	mov	_var02, #0
01f64     90 0E 06 F1 | 	add	objptr, #144
01f68     07 31 02 FB | 	rdlong	_var03, objptr
01f6c     02 30 66 F0 | 	shl	_var03, #2
01f70     18 6D 5A F2 | 	cmps	arg01, _var03 wcz
01f74     01 2E 66 C6 |  if_b	neg	_var02, #1
01f78     17 2D 02 F5 | 	and	_var01, _var02
01f7c     00 32 06 F6 | 	mov	_var04, #0
01f80     00 6E 5E F2 | 	cmps	arg02, #0 wcz
01f84     01 32 66 36 |  if_ae	neg	_var04, #1
01f88     19 2D 02 F5 | 	and	_var01, _var04
01f8c     00 34 06 F6 | 	mov	_var05, #0
01f90     04 0E 06 F1 | 	add	objptr, #4
01f94     07 37 02 FB | 	rdlong	_var06, objptr
01f98     94 0E 86 F1 | 	sub	objptr, #148
01f9c     1B 6F 5A F2 | 	cmps	arg02, _var06 wcz
01fa0     01 34 66 C6 |  if_b	neg	_var05, #1
01fa4     1A 2D CA F7 | 	test	_var01, _var05 wz
01fa8     28 00 90 AD |  if_e	jmp	#LR__0027
01fac                 | '     byte[buf_ptr+4*cpl*y+x]:=c
01fac     07 2D 02 FB | 	rdlong	_var01, objptr
01fb0     90 0E 06 F1 | 	add	objptr, #144
01fb4     07 2F 02 FB | 	rdlong	_var02, objptr
01fb8     90 0E 86 F1 | 	sub	objptr, #144
01fbc     02 2E 66 F0 | 	shl	_var02, #2
01fc0     37 2F 02 FD | 	qmul	_var02, arg02
01fc4     18 38 62 FD | 	getqx	_var07
01fc8     1C 2D 02 F1 | 	add	_var01, _var07
01fcc     36 2D 02 F1 | 	add	_var01, arg01
01fd0     16 71 42 FC | 	wrbyte	arg03, _var01
01fd4                 | LR__0027
01fd4                 | _hng030rm_spin2_putpixel8_ret
01fd4     2D 00 64 FD | 	ret
01fd8                 | 
01fd8                 | ' 
01fd8                 | ' ''---------- Set the border color, o is upper border, lines+1 is lower border
01fd8                 | ' 
01fd8                 | ' pub setbordercolor(r,g,b) | color
01fd8                 | _hng030rm_spin2_setbordercolor
01fd8                 | ' 
01fd8                 | ' color:=r<<24+g<<16+b<<8
01fd8     18 6C 66 F0 | 	shl	arg01, #24
01fdc     10 6E 66 F0 | 	shl	arg02, #16
01fe0     37 6D 02 F1 | 	add	arg01, arg02
01fe4     08 70 66 F0 | 	shl	arg03, #8
01fe8     38 6D 02 F1 | 	add	arg01, arg03
01fec                 | ' bordercolor:=color
01fec     2C 0E 06 F1 | 	add	objptr, #44
01ff0     07 6D 62 FC | 	wrlong	arg01, objptr
01ff4     2C 0E 86 F1 | 	sub	objptr, #44
01ff8                 | _hng030rm_spin2_setbordercolor_ret
01ff8     2D 00 64 FD | 	ret
01ffc                 | 
01ffc                 | ' 
01ffc                 | ' 
01ffc                 | ' '*************************************************************************
01ffc                 | ' '                                                                        *
01ffc                 | ' '  Text functions                                                        *
01ffc                 | ' '                                                                        *
01ffc                 | ' '*************************************************************************
01ffc                 | ' 
01ffc                 | ' ''---------- Clear the screen, set its foreground/background color
01ffc                 | ' 
01ffc                 | ' pub cls(fc,bc)   :c
01ffc                 | _hng030rm_spin2_cls
01ffc     06 5A 05 F6 | 	mov	COUNT_, #6
02000     B0 00 A0 FD | 	call	#pushregs_
02004     36 77 02 F6 | 	mov	local01, arg01
02008     37 79 02 F6 | 	mov	local02, arg02
0200c                 | ' 
0200c                 | ' if (graphmode<512)
0200c     C4 0E 06 F1 | 	add	objptr, #196
02010     07 7B 02 FB | 	rdlong	local03, objptr
02014     C4 0E 86 F1 | 	sub	objptr, #196
02018     01 00 00 FF 
0201c     00 7A 5E F2 | 	cmps	local03, ##512 wcz
02020     34 00 90 3D |  if_ae	jmp	#LR__0028
02024                 | '   c:=fc<<24+bc<<16+$20
02024     3B 7D 02 F6 | 	mov	local04, local01
02028     18 7C 66 F0 | 	shl	local04, #24
0202c     3C 7F 02 F6 | 	mov	local05, local02
02030     10 7E 66 F0 | 	shl	local05, #16
02034     3F 7D 02 F1 | 	add	local04, local05
02038     20 7C 06 F1 | 	add	local04, #32
0203c                 | '   longfill(buf_ptr,c,buflen)
0203c     07 6D 02 FB | 	rdlong	arg01, objptr
02040     30 0E 06 F1 | 	add	objptr, #48
02044     07 71 02 FB | 	rdlong	arg03, objptr
02048     30 0E 86 F1 | 	sub	objptr, #48
0204c     3E 6F 02 F6 | 	mov	arg02, local04
02050     A8 00 A0 FD | 	call	#\builtin_longfill_
02054                 | ' else
02054     AC 00 90 FD | 	jmp	#LR__0034
02058                 | LR__0028
02058                 | '   if (graphmode & 48) ==48
02058     C4 0E 06 F1 | 	add	objptr, #196
0205c     07 7B 02 FB | 	rdlong	local03, objptr
02060     C4 0E 86 F1 | 	sub	objptr, #196
02064     30 7A 06 F5 | 	and	local03, #48
02068     30 7A 0E F2 | 	cmp	local03, #48 wz
0206c                 | '     c:=bc
0206c     3C 7D 02 A6 |  if_e	mov	local04, local02
02070     74 00 90 AD |  if_e	jmp	#LR__0033
02074                 | '   elseif (graphmode & 48) ==32
02074     C4 0E 06 F1 | 	add	objptr, #196
02078     07 7B 02 FB | 	rdlong	local03, objptr
0207c     C4 0E 86 F1 | 	sub	objptr, #196
02080     30 7A 06 F5 | 	and	local03, #48
02084     20 7A 0E F2 | 	cmp	local03, #32 wz
02088     10 00 90 5D |  if_ne	jmp	#LR__0029
0208c                 | '     c:=bc<<4+bc
0208c     3C 7D 02 F6 | 	mov	local04, local02
02090     04 7C 66 F0 | 	shl	local04, #4
02094     3C 7D 02 F1 | 	add	local04, local02
02098     4C 00 90 FD | 	jmp	#LR__0032
0209c                 | LR__0029
0209c                 | '   elseif (graphmode & 48) ==16
0209c     C4 0E 06 F1 | 	add	objptr, #196
020a0     07 7B 02 FB | 	rdlong	local03, objptr
020a4     C4 0E 86 F1 | 	sub	objptr, #196
020a8     30 7A 06 F5 | 	and	local03, #48
020ac     10 7A 0E F2 | 	cmp	local03, #16 wz
020b0     28 00 90 5D |  if_ne	jmp	#LR__0030
020b4                 | '     c:=bc<<6+bc<<4+bc<<2+bc
020b4     3C 7D 02 F6 | 	mov	local04, local02
020b8     06 7C 66 F0 | 	shl	local04, #6
020bc     3C 7F 02 F6 | 	mov	local05, local02
020c0     04 7E 66 F0 | 	shl	local05, #4
020c4     3F 7D 02 F1 | 	add	local04, local05
020c8     3C 81 02 F6 | 	mov	local06, local02
020cc     02 80 66 F0 | 	shl	local06, #2
020d0     40 7D 02 F1 | 	add	local04, local06
020d4     3C 7D 02 F1 | 	add	local04, local02
020d8                 | '   else
020d8     0C 00 90 FD | 	jmp	#LR__0031
020dc                 | LR__0030
020dc                 | '     if bc==1
020dc     01 78 0E F2 | 	cmp	local02, #1 wz
020e0                 | '       c:=255
020e0     FF 7C 06 A6 |  if_e	mov	local04, #255
020e4                 | '     else
020e4                 | '       c:=0
020e4     00 7C 06 56 |  if_ne	mov	local04, #0
020e8                 | LR__0031
020e8                 | LR__0032
020e8                 | LR__0033
020e8                 | '   bytefill(buf_ptr,c,buflen*4)
020e8     07 6D 02 FB | 	rdlong	arg01, objptr
020ec     30 0E 06 F1 | 	add	objptr, #48
020f0     07 71 02 FB | 	rdlong	arg03, objptr
020f4     30 0E 86 F1 | 	sub	objptr, #48
020f8     02 70 66 F0 | 	shl	arg03, #2
020fc     3E 6F 02 F6 | 	mov	arg02, local04
02100     A0 00 A0 FD | 	call	#\builtin_bytefill_
02104                 | LR__0034
02104                 | ' setwritecolors(fc,bc)
02104                 | ' 
02104                 | ' 
02104                 | ' write_color:=ff
02104     38 0E 06 F1 | 	add	objptr, #56
02108     07 77 62 FC | 	wrlong	local01, objptr
0210c                 | ' write_background:=bb
0210c     04 0E 06 F1 | 	add	objptr, #4
02110     07 79 62 FC | 	wrlong	local02, objptr
02114                 | ' cursor_x:=0
02114     08 0E 86 F1 | 	sub	objptr, #8
02118     07 01 48 FC | 	wrbyte	#0, objptr
0211c                 | ' cursor_y:=0
0211c     01 0E 06 F1 | 	add	objptr, #1
02120     07 01 48 FC | 	wrbyte	#0, objptr
02124     35 0E 86 F1 | 	sub	objptr, #53
02128     3E 27 02 F6 | 	mov	result1, local04
0212c     AF F0 03 F6 | 	mov	ptra, fp
02130     BF 00 A0 FD | 	call	#popregs_
02134                 | _hng030rm_spin2_cls_ret
02134     2D 00 64 FD | 	ret
02138                 | 
02138                 | ' 
02138                 | ' ''---------- Output a char at the cursor position, move the cursor
02138                 | ' 
02138                 | ' pub putchar(achar) | c,x,y
02138                 | _hng030rm_spin2_putchar
02138     0F 5A 05 F6 | 	mov	COUNT_, #15
0213c     B0 00 A0 FD | 	call	#pushregs_
02140     36 77 02 F6 | 	mov	local01, arg01
02144                 | ' 
02144                 | ' if achar==10
02144     0A 76 0E F2 | 	cmp	local01, #10 wz
02148     08 00 90 5D |  if_ne	jmp	#LR__0035
0214c                 | '   crlf()
0214c     48 02 B0 FD | 	call	#_hng030rm_spin2_crlf
02150                 | ' else  
02150     64 01 90 FD | 	jmp	#LR__0038
02154                 | LR__0035
02154                 | '   x:=cursor_x
02154     34 0E 06 F1 | 	add	objptr, #52
02158     07 79 C2 FA | 	rdbyte	local02, objptr
0215c                 | '   y:=cursor_y
0215c     01 0E 06 F1 | 	add	objptr, #1
02160     07 7B C2 FA | 	rdbyte	local03, objptr
02164                 | '   c:=write_color<<24+write_background<<16
02164     03 0E 06 F1 | 	add	objptr, #3
02168     07 7D 02 FB | 	rdlong	local04, objptr
0216c     18 7C 66 F0 | 	shl	local04, #24
02170     04 0E 06 F1 | 	add	objptr, #4
02174     07 7F 02 FB | 	rdlong	local05, objptr
02178     3C 0E 86 F1 | 	sub	objptr, #60
0217c     10 7E 66 F0 | 	shl	local05, #16
02180     3F 7D 02 F1 | 	add	local04, local05
02184                 | '   long[buf_ptr+4*(cpl*y+x)]:=long[buf_ptr+4*(cpl*y+x)] &$FFFF | c
02184     07 81 02 FB | 	rdlong	local06, objptr
02188     90 0E 06 F1 | 	add	objptr, #144
0218c     07 83 02 FB | 	rdlong	local07, objptr
02190     90 0E 86 F1 | 	sub	objptr, #144
02194     3D 83 02 FD | 	qmul	local07, local03
02198     18 84 62 FD | 	getqx	local08
0219c     3C 85 02 F1 | 	add	local08, local02
021a0     02 84 66 F0 | 	shl	local08, #2
021a4     42 81 02 F1 | 	add	local06, local08
021a8     40 87 02 FB | 	rdlong	local09, local06
021ac     7F 00 00 FF 
021b0     FF 87 06 F5 | 	and	local09, ##65535
021b4     3E 87 42 F5 | 	or	local09, local04
021b8     07 89 02 FB | 	rdlong	local10, objptr
021bc     90 0E 06 F1 | 	add	objptr, #144
021c0     07 8B 02 FB | 	rdlong	local11, objptr
021c4     90 0E 86 F1 | 	sub	objptr, #144
021c8     3D 8B 02 FD | 	qmul	local11, local03
021cc     18 8C 62 FD | 	getqx	local12
021d0     3C 8D 02 F1 | 	add	local12, local02
021d4     02 8C 66 F0 | 	shl	local12, #2
021d8     46 89 02 F1 | 	add	local10, local12
021dc     44 87 62 FC | 	wrlong	local09, local10
021e0                 | '   long[buf_ptr+4*(cpl*y+x)]:=(long[buf_ptr+4*(cpl*y+x)] & $FFFFFF00)  |(achar & $000000FF)
021e0     07 81 02 FB | 	rdlong	local06, objptr
021e4     90 0E 06 F1 | 	add	objptr, #144
021e8     07 83 02 FB | 	rdlong	local07, objptr
021ec     90 0E 86 F1 | 	sub	objptr, #144
021f0     3D 83 02 FD | 	qmul	local07, local03
021f4     18 84 62 FD | 	getqx	local08
021f8     3C 85 02 F1 | 	add	local08, local02
021fc     02 84 66 F0 | 	shl	local08, #2
02200     42 81 02 F1 | 	add	local06, local08
02204     40 87 02 FB | 	rdlong	local09, local06
02208     FF 86 26 F5 | 	andn	local09, #255
0220c     3B 89 02 F6 | 	mov	local10, local01
02210     FF 88 06 F5 | 	and	local10, #255
02214     44 87 42 F5 | 	or	local09, local10
02218     07 8F 02 FB | 	rdlong	local13, objptr
0221c     90 0E 06 F1 | 	add	objptr, #144
02220     07 91 02 FB | 	rdlong	local14, objptr
02224     3D 91 02 FD | 	qmul	local14, local03
02228     18 92 62 FD | 	getqx	local15
0222c     3C 93 02 F1 | 	add	local15, local02
02230     02 92 66 F0 | 	shl	local15, #2
02234     49 8F 02 F1 | 	add	local13, local15
02238     47 87 62 FC | 	wrlong	local09, local13
0223c                 | '   cursor_x+=1
0223c     5C 0E 86 F1 | 	sub	objptr, #92
02240     07 87 C2 FA | 	rdbyte	local09, objptr
02244     01 86 06 F1 | 	add	local09, #1
02248     07 87 42 FC | 	wrbyte	local09, objptr
0224c                 | '   if cursor_x==cpl
0224c     07 87 C2 FA | 	rdbyte	local09, objptr
02250     5C 0E 06 F1 | 	add	objptr, #92
02254     07 7F 02 FB | 	rdlong	local05, objptr
02258     90 0E 86 F1 | 	sub	objptr, #144
0225c     3F 87 0A F2 | 	cmp	local09, local05 wz
02260     54 00 90 5D |  if_ne	jmp	#LR__0037
02264                 | '     cursor_x:=0
02264     34 0E 06 F1 | 	add	objptr, #52
02268     07 01 48 FC | 	wrbyte	#0, objptr
0226c                 | '     cursor_y+=1
0226c     01 0E 06 F1 | 	add	objptr, #1
02270     07 87 C2 FA | 	rdbyte	local09, objptr
02274     01 86 06 F1 | 	add	local09, #1
02278     07 87 42 FC | 	wrbyte	local09, objptr
0227c                 | '     if cursor_y>lines-1
0227c     5F 0E 06 F1 | 	add	objptr, #95
02280     07 87 02 FB | 	rdlong	local09, objptr
02284     01 86 86 F1 | 	sub	local09, #1
02288     5F 0E 86 F1 | 	sub	objptr, #95
0228c     07 7F C2 FA | 	rdbyte	local05, objptr
02290     35 0E 86 F1 | 	sub	objptr, #53
02294     43 7F 5A F2 | 	cmps	local05, local09 wcz
02298     1C 00 90 ED |  if_be	jmp	#LR__0036
0229c                 | '       scrollup()
0229c     24 00 B0 FD | 	call	#_hng030rm_spin2_scrollup
022a0                 | '       cursor_y:=lines-1
022a0     94 0E 06 F1 | 	add	objptr, #148
022a4     07 87 02 FB | 	rdlong	local09, objptr
022a8     01 86 86 F1 | 	sub	local09, #1
022ac     5F 0E 86 F1 | 	sub	objptr, #95
022b0     07 87 42 FC | 	wrbyte	local09, objptr
022b4     35 0E 86 F1 | 	sub	objptr, #53
022b8                 | LR__0036
022b8                 | LR__0037
022b8                 | LR__0038
022b8     AF F0 03 F6 | 	mov	ptra, fp
022bc     BF 00 A0 FD | 	call	#popregs_
022c0                 | _hng030rm_spin2_putchar_ret
022c0     2D 00 64 FD | 	ret
022c4                 | 
022c4                 | ' 
022c4                 | ' ''-----------  Scroll the screen one line up
022c4                 | ' 
022c4                 | ' pub scrollup() | i
022c4                 | _hng030rm_spin2_scrollup
022c4     0C 5A 05 F6 | 	mov	COUNT_, #12
022c8     B0 00 A0 FD | 	call	#pushregs_
022cc                 | ' 
022cc                 | ' longmove(buf_ptr,buf_ptr+4*cpl,buflen-cpl)
022cc     07 6D 02 FB | 	rdlong	arg01, objptr
022d0     36 6F 02 F6 | 	mov	arg02, arg01
022d4     90 0E 06 F1 | 	add	objptr, #144
022d8     07 77 02 FB | 	rdlong	local01, objptr
022dc     02 76 66 F0 | 	shl	local01, #2
022e0     3B 6F 02 F1 | 	add	arg02, local01
022e4     60 0E 86 F1 | 	sub	objptr, #96
022e8     07 71 02 FB | 	rdlong	arg03, objptr
022ec     60 0E 06 F1 | 	add	objptr, #96
022f0     07 79 02 FB | 	rdlong	local02, objptr
022f4     90 0E 86 F1 | 	sub	objptr, #144
022f8     3C 71 82 F1 | 	sub	arg03, local02
022fc     44 14 B0 FD | 	call	#__system__longmove
02300                 | ' repeat i from buflen-cpl to buflen-1
02300     30 0E 06 F1 | 	add	objptr, #48
02304     07 7B 02 FB | 	rdlong	local03, objptr
02308     60 0E 06 F1 | 	add	objptr, #96
0230c     07 77 02 FB | 	rdlong	local01, objptr
02310     3B 7B 82 F1 | 	sub	local03, local01
02314     60 0E 86 F1 | 	sub	objptr, #96
02318     07 7D 02 FB | 	rdlong	local04, objptr
0231c     01 7C 86 F1 | 	sub	local04, #1
02320     07 7F 02 FB | 	rdlong	local05, objptr
02324     60 0E 06 F1 | 	add	objptr, #96
02328     07 81 02 FB | 	rdlong	local06, objptr
0232c     90 0E 86 F1 | 	sub	objptr, #144
02330     40 7F 82 F1 | 	sub	local05, local06
02334     3F 7D 5A F2 | 	cmps	local04, local05 wcz
02338     01 82 06 16 |  if_a	mov	local07, #1
0233c     01 82 66 E6 |  if_be	neg	local07, #1
02340     41 7D 02 F1 | 	add	local04, local07
02344     F8 DC 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
02348     93 00 A0 FD | 	call	#FCACHE_LOAD_
0234c                 | LR__0039
0234c                 | '   long[buf_ptr+4*i]:=(long[buf_ptr+4*i] & $FFFF0000) | 32
0234c     07 85 02 FB | 	rdlong	local08, objptr
02350     3D 87 02 F6 | 	mov	local09, local03
02354     02 86 66 F0 | 	shl	local09, #2
02358     43 85 02 F1 | 	add	local08, local09
0235c     42 89 02 FB | 	rdlong	local10, local08
02360     80 FF 7F FF 
02364     00 88 06 F5 | 	and	local10, ##-65536
02368     20 88 46 F5 | 	or	local10, #32
0236c     07 8B 02 FB | 	rdlong	local11, objptr
02370     3D 8D 02 F6 | 	mov	local12, local03
02374     02 8C 66 F0 | 	shl	local12, #2
02378     46 8B 02 F1 | 	add	local11, local12
0237c     45 89 62 FC | 	wrlong	local10, local11
02380     41 7B 02 F1 | 	add	local03, local07
02384     3E 7B 0A F2 | 	cmp	local03, local04 wz
02388     C0 FF 9F 5D |  if_ne	jmp	#LR__0039
0238c                 | LR__0040
0238c     AF F0 03 F6 | 	mov	ptra, fp
02390     BF 00 A0 FD | 	call	#popregs_
02394                 | _hng030rm_spin2_scrollup_ret
02394     2D 00 64 FD | 	ret
02398                 | 
02398                 | ' 
02398                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed
02398                 | ' 
02398                 | ' pub crlf()
02398                 | _hng030rm_spin2_crlf
02398     02 5A 05 F6 | 	mov	COUNT_, #2
0239c     B0 00 A0 FD | 	call	#pushregs_
023a0                 | ' 
023a0                 | ' cursor_x:=0
023a0     34 0E 06 F1 | 	add	objptr, #52
023a4     07 01 48 FC | 	wrbyte	#0, objptr
023a8                 | ' cursor_y+=1
023a8     01 0E 06 F1 | 	add	objptr, #1
023ac     07 77 C2 FA | 	rdbyte	local01, objptr
023b0     01 76 06 F1 | 	add	local01, #1
023b4     07 77 42 FC | 	wrbyte	local01, objptr
023b8                 | ' if cursor_y>lines-1
023b8     5F 0E 06 F1 | 	add	objptr, #95
023bc     07 77 02 FB | 	rdlong	local01, objptr
023c0     01 76 86 F1 | 	sub	local01, #1
023c4     5F 0E 86 F1 | 	sub	objptr, #95
023c8     07 79 C2 FA | 	rdbyte	local02, objptr
023cc     35 0E 86 F1 | 	sub	objptr, #53
023d0     3B 79 5A F2 | 	cmps	local02, local01 wcz
023d4     1C 00 90 ED |  if_be	jmp	#LR__0041
023d8                 | '   scrollup()
023d8     E8 FE BF FD | 	call	#_hng030rm_spin2_scrollup
023dc                 | '   cursor_y:=lines-1
023dc     94 0E 06 F1 | 	add	objptr, #148
023e0     07 77 02 FB | 	rdlong	local01, objptr
023e4     01 76 86 F1 | 	sub	local01, #1
023e8     5F 0E 86 F1 | 	sub	objptr, #95
023ec     07 77 42 FC | 	wrbyte	local01, objptr
023f0     35 0E 86 F1 | 	sub	objptr, #53
023f4                 | LR__0041
023f4     AF F0 03 F6 | 	mov	ptra, fp
023f8     BF 00 A0 FD | 	call	#popregs_
023fc                 | _hng030rm_spin2_crlf_ret
023fc     2D 00 64 FD | 	ret
02400                 | 
02400                 | ' 
02400                 | ' 
02400                 | ' 
02400                 | ' '*************************************************************************
02400                 | ' '                                                                        *
02400                 | ' '  Mode setting and driver start                                                          *
02400                 | ' '                                                                        *
02400                 | ' '*************************************************************************
02400                 | ' 
02400                 | ' ''---------  Set the graphics mode
02400                 | ' 
02400                 | ' 
02400                 | ' 
02400                 | ' pub setmode(mode) | i', 'xzoom, yzoom, azoom
02400                 | _hng030rm_spin2_setmode
02400     0A 5A 05 F6 | 	mov	COUNT_, #10
02404     B0 00 A0 FD | 	call	#pushregs_
02408     36 77 02 F6 | 	mov	local01, arg01
0240c                 | ' 
0240c                 | ' '' mode:tn_bb_cc_vv_hh
0240c                 | ' '' hh - h.zoom, vv-v.zoom, cc-c.depth,
0240c                 | ' '' bb - borders/total pixels, 00-wide/1140, 01 medium/1026, 10 narrow/912, 11 no border, 1024 px PAL, 880 px NTSC
0240c                 | ' 
0240c                 | ' if mode==(512+192+48)
0240c     01 00 00 FF 
02410     F0 76 0E F2 | 	cmp	local01, ##752 wz
02414                 | '   return 'no RAM
02414     C8 05 90 AD |  if_e	jmp	#LR__0064
02418                 | ' 
02418                 | ' case_fast (mode>>6) & 7 ' timings are the same for graphic and text
02418     3B 79 02 F6 | 	mov	local02, local01
0241c     06 78 46 F0 | 	shr	local02, #6
02420     07 78 06 F5 | 	and	local02, #7
02424     08 78 26 F3 | 	fle	local02, #8
02428     3C 7B 02 F6 | 	mov	local03, local02
0242c     30 7A 62 FD | 	jmprel	local03
02430                 | LR__0042
02430     20 00 90 FD | 	jmp	#LR__0043
02434     48 00 90 FD | 	jmp	#LR__0044
02438     70 00 90 FD | 	jmp	#LR__0045
0243c     98 00 90 FD | 	jmp	#LR__0046
02440     C0 00 90 FD | 	jmp	#LR__0047
02444     E8 00 90 FD | 	jmp	#LR__0048
02448     10 01 90 FD | 	jmp	#LR__0049
0244c     38 01 90 FD | 	jmp	#LR__0050
02450     70 01 90 FD | 	jmp	#LR__0051
02454                 | LR__0043
02454                 | ' 
02454                 | '     0:  longmove(@timings,@timings000,16)   'PAL 50 Hz signaling 1140x624, active 800x480, 100x30 text, wide border, 2 colors per pixel, 00_00_00_00_00=0, 354_693_878 Hz
02454     50 0E 06 F1 | 	add	objptr, #80
02458     07 6D 02 F6 | 	mov	arg01, objptr
0245c     50 0E 86 F1 | 	sub	objptr, #80
02460     0E 00 00 FF 
02464     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7256
02468     0B 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
0246c     0E 00 00 FF 
02470     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7256
02474     10 70 06 F6 | 	mov	arg03, #16
02478     C8 12 B0 FD | 	call	#__system__longmove
0247c     44 01 90 FD | 	jmp	#LR__0051
02480                 | LR__0044
02480                 | '     1:  longmove(@timings,@timings064,16)   'PAL 50 Hz signaling 1026x624, active 880x496, 110x31 text, medium border, 2 colors per pixel 00_01_00_00_00=64, 319_215_686 Hz
02480     50 0E 06 F1 | 	add	objptr, #80
02484     07 6D 02 F6 | 	mov	arg01, objptr
02488     50 0E 86 F1 | 	sub	objptr, #80
0248c     0E 00 00 FF 
02490     98 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7320
02494     0B 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02498     0E 00 00 FF 
0249c     98 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7320
024a0     10 70 06 F6 | 	mov	arg03, #16
024a4     9C 12 B0 FD | 	call	#__system__longmove
024a8     18 01 90 FD | 	jmp	#LR__0051
024ac                 | LR__0045
024ac                 | '     2:  longmove(@timings,@timings128,16)   'PAL 50 Hz signaling 912x624, active 800x480, 100x30 text, medium border, 2 colors per pixel 00_10_00_00_00=64, 283750000z
024ac     50 0E 06 F1 | 	add	objptr, #80
024b0     07 6D 02 F6 | 	mov	arg01, objptr
024b4     50 0E 86 F1 | 	sub	objptr, #80
024b8     0E 00 00 FF 
024bc     D8 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7384
024c0     0B 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
024c4     0E 00 00 FF 
024c8     D8 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7384
024cc     10 70 06 F6 | 	mov	arg03, #16
024d0     70 12 B0 FD | 	call	#__system__longmove
024d4     EC 00 90 FD | 	jmp	#LR__0051
024d8                 | LR__0046
024d8                 | '     3:  longmove(@timings,@timings192,16)   'PAL 50 Hz signaling 1140x624, active 1024x576, 128x36 text, borderless, 2 colors per pixel 00_11_00_00_00=6192, 354_693_878 Hz
024d8     50 0E 06 F1 | 	add	objptr, #80
024dc     07 6D 02 F6 | 	mov	arg01, objptr
024e0     50 0E 86 F1 | 	sub	objptr, #80
024e4     0E 00 00 FF 
024e8     18 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7448
024ec     0B 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
024f0     0E 00 00 FF 
024f4     18 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7448
024f8     10 70 06 F6 | 	mov	arg03, #16
024fc     44 12 B0 FD | 	call	#__system__longmove
02500     C0 00 90 FD | 	jmp	#LR__0051
02504                 | LR__0047
02504                 | '     4:  longmove(@timings,@timings256,16)   'NTSC 50 Hz signaling 1140x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_00_00_00_00=256, 357959184 Hz
02504     50 0E 06 F1 | 	add	objptr, #80
02508     07 6D 02 F6 | 	mov	arg01, objptr
0250c     50 0E 86 F1 | 	sub	objptr, #80
02510     0E 00 00 FF 
02514     58 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7512
02518     0B 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
0251c     0E 00 00 FF 
02520     58 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7512
02524     10 70 06 F6 | 	mov	arg03, #16
02528     18 12 B0 FD | 	call	#__system__longmove
0252c     94 00 90 FD | 	jmp	#LR__0051
02530                 | LR__0048
02530                 | '     5:  longmove(@timings,@timings320,16)   'NTSC 50 Hz signaling 1026x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_01_00_00_00=320, 322162162 Hz
02530     50 0E 06 F1 | 	add	objptr, #80
02534     07 6D 02 F6 | 	mov	arg01, objptr
02538     50 0E 86 F1 | 	sub	objptr, #80
0253c     0E 00 00 FF 
02540     98 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7576
02544     0B 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02548     0E 00 00 FF 
0254c     98 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7576
02550     10 70 06 F6 | 	mov	arg03, #16
02554     EC 11 B0 FD | 	call	#__system__longmove
02558     68 00 90 FD | 	jmp	#LR__0051
0255c                 | LR__0049
0255c                 | '     6:  longmove(@timings,@timings384,16)   'NTSC 50 Hz signaling 912x524, active 800x480, 100x30 text, NO PLACE FOR wide border, 2 colors per pixel, 01_10_00_00_00=384, 286363636 Hz
0255c     50 0E 06 F1 | 	add	objptr, #80
02560     07 6D 02 F6 | 	mov	arg01, objptr
02564     50 0E 86 F1 | 	sub	objptr, #80
02568     0E 00 00 FF 
0256c     D8 17 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7640
02570     0B 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02574     0E 00 00 FF 
02578     D8 17 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7640
0257c     10 70 06 F6 | 	mov	arg03, #16
02580     C0 11 B0 FD | 	call	#__system__longmove
02584     3C 00 90 FD | 	jmp	#LR__0051
02588                 | LR__0050
02588                 | '     7:  longmove(@timings,@timings448,16)   'NTSC 50 Hz signaling 1026x524, active 880x496, 110x31 text, borderless, 2 colors per pixel, 01_11_00_00_00=496, 322162162 Hz
02588     50 0E 06 F1 | 	add	objptr, #80
0258c     07 7D 02 F6 | 	mov	local04, objptr
02590     3E 7F 02 F6 | 	mov	local05, local04
02594     0F 00 00 FF 
02598     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7704
0259c     0B 81 02 F6 | 	mov	local06, ptr__hng030rm_spin2_dat__
025a0     40 83 02 F6 | 	mov	local07, local06
025a4     10 84 06 F6 | 	mov	local08, #16
025a8     3F 6D 02 F6 | 	mov	arg01, local05
025ac     41 6F 02 F6 | 	mov	arg02, local07
025b0     10 70 06 F6 | 	mov	arg03, #16
025b4     50 0E 86 F1 | 	sub	objptr, #80
025b8     0F 00 00 FF 
025bc     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7704
025c0     80 11 B0 FD | 	call	#__system__longmove
025c4                 | LR__0051
025c4                 | ' 
025c4                 | ' ' 4-bit graphics: do nothing with timings :)
025c4                 | ' if mode<512
025c4     01 00 00 FF 
025c8     00 76 5E F2 | 	cmps	local01, ##512 wcz
025cc     1C 00 90 3D |  if_ae	jmp	#LR__0052
025d0                 | '   palette_ptr:=@ataripalette
025d0     0C 00 00 FF 
025d4     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
025d8     18 0E 06 F1 | 	add	objptr, #24
025dc     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
025e0     18 0E 86 F1 | 	sub	objptr, #24
025e4     0C 00 00 FF 
025e8     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
025ec                 | LR__0052
025ec                 | ' 
025ec                 | ' if (mode & (%10_00_11_0000))==(%10_00_11_0000) ' 8bit graphics, 4 pixels per long instead of 8, cpp x2
025ec     3B 79 02 F6 | 	mov	local02, local01
025f0     01 00 00 FF 
025f4     30 78 06 F5 | 	and	local02, ##560
025f8     01 00 00 FF 
025fc     30 78 0E F2 | 	cmp	local02, ##560 wz
02600     44 00 90 5D |  if_ne	jmp	#LR__0053
02604                 | '   timings[5]:=4
02604     64 0E 06 F1 | 	add	objptr, #100
02608     07 09 68 FC | 	wrlong	#4, objptr
0260c                 | '   timings[11]:=timings[11]<<1
0260c     18 0E 06 F1 | 	add	objptr, #24
02610     07 79 02 FB | 	rdlong	local02, objptr
02614     01 78 66 F0 | 	shl	local02, #1
02618     07 79 62 FC | 	wrlong	local02, objptr
0261c                 | '   putpixel:=p8
0261c     6C 0E 06 F1 | 	add	objptr, #108
02620     07 79 02 FB | 	rdlong	local02, objptr
02624     10 0E 86 F1 | 	sub	objptr, #16
02628     07 79 62 FC | 	wrlong	local02, objptr
0262c                 | '   palette_ptr:=@ataripalette
0262c     0C 00 00 FF 
02630     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6232
02634     C0 0E 86 F1 | 	sub	objptr, #192
02638     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
0263c     18 0E 86 F1 | 	sub	objptr, #24
02640     0C 00 00 FF 
02644     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6232
02648                 | LR__0053
02648                 | ' 
02648                 | ' if (mode & (%10_00_11_0000))==(%10_00_01_0000) ' 2bit graphics, 16 pixels per long instead of 8, cpp /2
02648     3B 79 02 F6 | 	mov	local02, local01
0264c     01 00 00 FF 
02650     30 78 06 F5 | 	and	local02, ##560
02654     01 00 00 FF 
02658     10 78 0E F2 | 	cmp	local02, ##528 wz
0265c     44 00 90 5D |  if_ne	jmp	#LR__0054
02660                 | '   timings[5]:=16
02660     64 0E 06 F1 | 	add	objptr, #100
02664     07 21 68 FC | 	wrlong	#16, objptr
02668                 | '   timings[11]:=timings[11]>>1
02668     18 0E 06 F1 | 	add	objptr, #24
0266c     07 79 02 FB | 	rdlong	local02, objptr
02670     01 78 46 F0 | 	shr	local02, #1
02674     07 79 62 FC | 	wrlong	local02, objptr
02678                 | '   putpixel:=p2
02678     64 0E 06 F1 | 	add	objptr, #100
0267c     07 79 02 FB | 	rdlong	local02, objptr
02680     08 0E 86 F1 | 	sub	objptr, #8
02684     07 79 62 FC | 	wrlong	local02, objptr
02688                 | '   palette_ptr:=@fourcolors
02688     0C 00 00 FF 
0268c     08 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6152
02690     C0 0E 86 F1 | 	sub	objptr, #192
02694     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02698     18 0E 86 F1 | 	sub	objptr, #24
0269c     0C 00 00 FF 
026a0     08 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6152
026a4                 | LR__0054
026a4                 | ' 
026a4                 | ' if (mode & (%10_00_11_0000))==(%10_00_00_0000) ' 1bit graphics, 32 pixels per long instead of 8, cpp /4
026a4     3B 79 02 F6 | 	mov	local02, local01
026a8     01 00 00 FF 
026ac     30 78 06 F5 | 	and	local02, ##560
026b0     01 00 00 FF 
026b4     00 78 0E F2 | 	cmp	local02, ##512 wz
026b8     44 00 90 5D |  if_ne	jmp	#LR__0055
026bc                 | '   timings[5]:=32
026bc     64 0E 06 F1 | 	add	objptr, #100
026c0     07 41 68 FC | 	wrlong	#32, objptr
026c4                 | '   timings[11]:=timings[11]>>2
026c4     18 0E 06 F1 | 	add	objptr, #24
026c8     07 79 02 FB | 	rdlong	local02, objptr
026cc     02 78 46 F0 | 	shr	local02, #2
026d0     07 79 62 FC | 	wrlong	local02, objptr
026d4                 | '   putpixel:=p1
026d4     60 0E 06 F1 | 	add	objptr, #96
026d8     07 79 02 FB | 	rdlong	local02, objptr
026dc     04 0E 86 F1 | 	sub	objptr, #4
026e0     07 79 62 FC | 	wrlong	local02, objptr
026e4                 | '   palette_ptr:=@twocolors
026e4     0C 00 00 FF 
026e8     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6144
026ec     C0 0E 86 F1 | 	sub	objptr, #192
026f0     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
026f4     18 0E 86 F1 | 	sub	objptr, #24
026f8     0C 00 00 FF 
026fc     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6144
02700                 | LR__0055
02700                 | ' 
02700                 | ' if (mode & (%10_00_11_0000))==(%10_00_10_0000) ' 4bit graphics,
02700     3B 79 02 F6 | 	mov	local02, local01
02704     01 00 00 FF 
02708     30 78 06 F5 | 	and	local02, ##560
0270c     01 00 00 FF 
02710     20 78 0E F2 | 	cmp	local02, ##544 wz
02714     2C 00 90 5D |  if_ne	jmp	#LR__0056
02718                 | '   putpixel:=p4
02718     E4 0E 06 F1 | 	add	objptr, #228
0271c     07 79 02 FB | 	rdlong	local02, objptr
02720     0C 0E 86 F1 | 	sub	objptr, #12
02724     07 79 62 FC | 	wrlong	local02, objptr
02728                 | '   palette_ptr:=@vga16
02728     0C 00 00 FF 
0272c     18 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##6168
02730     C0 0E 86 F1 | 	sub	objptr, #192
02734     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02738     18 0E 86 F1 | 	sub	objptr, #24
0273c     0C 00 00 FF 
02740     18 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##6168
02744                 | LR__0056
02744                 | ' 
02744                 | ' repeat i from 0 to 4
02744     00 86 06 F6 | 	mov	local09, #0
02748     10 D9 9F FE | 	loc	pa,	#(@LR__0058-@LR__0057)
0274c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02750                 | LR__0057
02750                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt
02750     43 7D 02 F6 | 	mov	local04, local09
02754     02 7C 66 F0 | 	shl	local04, #2
02758     50 0E 06 F1 | 	add	objptr, #80
0275c     07 7F 02 F6 | 	mov	local05, objptr
02760     07 7D 02 F1 | 	add	local04, objptr
02764     2C 0E 86 F1 | 	sub	objptr, #44
02768     07 83 02 FB | 	rdlong	local07, objptr
0276c     41 81 02 F6 | 	mov	local06, local07
02770     11 80 66 F0 | 	shl	local06, #17
02774     3E 79 02 FB | 	rdlong	local02, local04
02778     40 79 02 F1 | 	add	local02, local06
0277c     80 40 38 FF 
02780     00 78 06 F1 | 	add	local02, ##1887502336
02784     43 85 02 F6 | 	mov	local08, local09
02788     02 84 66 F0 | 	shl	local08, #2
0278c     2C 0E 06 F1 | 	add	objptr, #44
02790     07 89 02 F6 | 	mov	local10, objptr
02794     07 85 02 F1 | 	add	local08, objptr
02798     42 79 62 FC | 	wrlong	local02, local08
0279c     01 86 06 F1 | 	add	local09, #1
027a0     05 86 5E F2 | 	cmps	local09, #5 wcz
027a4     50 0E 86 F1 | 	sub	objptr, #80
027a8     A4 FF 9F CD |  if_b	jmp	#LR__0057
027ac                 | LR__0058
027ac                 | ' timings[5]:=timings[5]+hdmibase<<17
027ac     24 0E 06 F1 | 	add	objptr, #36
027b0     07 7D 02 FB | 	rdlong	local04, objptr
027b4     11 7C 66 F0 | 	shl	local04, #17
027b8     40 0E 06 F1 | 	add	objptr, #64
027bc     07 81 02 FB | 	rdlong	local06, objptr
027c0     40 79 02 F6 | 	mov	local02, local06
027c4     3E 79 02 F1 | 	add	local02, local04
027c8     07 79 62 FC | 	wrlong	local02, objptr
027cc                 | ' clkfreq:=timings[13]
027cc     20 0E 06 F1 | 	add	objptr, #32
027d0     07 79 02 FB | 	rdlong	local02, objptr
027d4     14 78 66 FC | 	wrlong	local02, #20
027d8                 | ' hubset(timings[14])
027d8     04 0E 06 F1 | 	add	objptr, #4
027dc     07 6D 02 FB | 	rdlong	arg01, objptr
027e0     88 0E 86 F1 | 	sub	objptr, #136
027e4     00 6C 62 FD | 	hubset	arg01
027e8                 | ' waitms(1)
027e8     01 6C 06 F6 | 	mov	arg01, #1
027ec     50 11 B0 FD | 	call	#__system___waitms
027f0                 | ' 
027f0                 | ' 
027f0                 | ' xzoom:=1<<(mode & 3)
027f0     3B 7D 02 F6 | 	mov	local04, local01
027f4     03 7C 06 F5 | 	and	local04, #3
027f8     3E 79 C2 F9 | 	decod	local02, local04
027fc     CC 0E 06 F1 | 	add	objptr, #204
02800     07 79 62 FC | 	wrlong	local02, objptr
02804                 | ' 
02804                 | ' if (xzoom==8) && (((mode>>4)&3)<>3)
02804     3C 7D 02 F6 | 	mov	local04, local02
02808     CC 0E 86 F1 | 	sub	objptr, #204
0280c     08 7C 0E F2 | 	cmp	local04, #8 wz
02810     24 00 90 5D |  if_ne	jmp	#LR__0059
02814     3B 7F 02 F6 | 	mov	local05, local01
02818     04 7E 46 F0 | 	shr	local05, #4
0281c     03 7E 06 F5 | 	and	local05, #3
02820     03 7E 0E F2 | 	cmp	local05, #3 wz
02824     10 00 90 AD |  if_e	jmp	#LR__0059
02828                 | '   xzoom:=4
02828     04 78 06 F6 | 	mov	local02, #4
0282c     CC 0E 06 F1 | 	add	objptr, #204
02830     07 09 68 FC | 	wrlong	#4, objptr
02834     CC 0E 86 F1 | 	sub	objptr, #204
02838                 | LR__0059
02838                 | ' 
02838                 | ' yzoom:=1<<((mode>>2) & 3)
02838     3B 7D 02 F6 | 	mov	local04, local01
0283c     02 7C 46 F0 | 	shr	local04, #2
02840     03 7C 06 F5 | 	and	local04, #3
02844     3E 79 C2 F9 | 	decod	local02, local04
02848     D0 0E 06 F1 | 	add	objptr, #208
0284c     07 79 62 FC | 	wrlong	local02, objptr
02850                 | ' azoom:=xzoom*yzoom
02850     04 0E 86 F1 | 	sub	objptr, #4
02854     07 7D 02 FB | 	rdlong	local04, objptr
02858     04 0E 06 F1 | 	add	objptr, #4
0285c     07 81 02 FB | 	rdlong	local06, objptr
02860     40 7D 02 FD | 	qmul	local04, local06
02864     18 78 62 FD | 	getqx	local02
02868     04 0E 06 F1 | 	add	objptr, #4
0286c     07 79 62 FC | 	wrlong	local02, objptr
02870                 | ' 
02870                 | ' cpl:=timings[11]
02870     58 0E 86 F1 | 	sub	objptr, #88
02874     07 79 02 FB | 	rdlong	local02, objptr
02878     14 0E 06 F1 | 	add	objptr, #20
0287c     07 79 62 FC | 	wrlong	local02, objptr
02880     90 0E 86 F1 | 	sub	objptr, #144
02884                 | ' if (mode<512)
02884     01 00 00 FF 
02888     00 76 5E F2 | 	cmps	local01, ##512 wcz
0288c     60 00 90 3D |  if_ae	jmp	#LR__0060
02890                 | '   lines:=(timings[12]>>4)+/yzoom
02890     80 0E 06 F1 | 	add	objptr, #128
02894     07 CB 02 FB | 	rdlong	muldiva_, objptr
02898     04 CA 46 F0 | 	shr	muldiva_, #4
0289c     50 0E 06 F1 | 	add	objptr, #80
028a0     07 CD 02 FB | 	rdlong	muldivb_, objptr
028a4     D0 0E 86 F1 | 	sub	objptr, #208
028a8     CC 00 A0 FD | 	call	#unsdivide_
028ac     94 0E 06 F1 | 	add	objptr, #148
028b0     07 CD 62 FC | 	wrlong	muldivb_, objptr
028b4                 | '   if ((timings[12]>>4)+//yzoom) <>0
028b4     14 0E 86 F1 | 	sub	objptr, #20
028b8     07 CB 02 FB | 	rdlong	muldiva_, objptr
028bc     04 CA 46 F0 | 	shr	muldiva_, #4
028c0     50 0E 06 F1 | 	add	objptr, #80
028c4     07 CD 02 FB | 	rdlong	muldivb_, objptr
028c8     D0 0E 86 F1 | 	sub	objptr, #208
028cc     CC 00 A0 FD | 	call	#unsdivide_
028d0     00 CA 0E F2 | 	cmp	muldiva_, #0 wz
028d4     AC 00 90 AD |  if_e	jmp	#LR__0063
028d8                 | '     lines +=1
028d8     94 0E 06 F1 | 	add	objptr, #148
028dc     07 79 02 FB | 	rdlong	local02, objptr
028e0     01 78 06 F1 | 	add	local02, #1
028e4     07 79 62 FC | 	wrlong	local02, objptr
028e8     94 0E 86 F1 | 	sub	objptr, #148
028ec                 | ' 
028ec                 | ' else
028ec     94 00 90 FD | 	jmp	#LR__0063
028f0                 | LR__0060
028f0                 | '   lines:=timings[12]/yzoom
028f0     80 0E 06 F1 | 	add	objptr, #128
028f4     07 CB 02 FB | 	rdlong	muldiva_, objptr
028f8     50 0E 06 F1 | 	add	objptr, #80
028fc     07 CD 02 FB | 	rdlong	muldivb_, objptr
02900     D0 0E 86 F1 | 	sub	objptr, #208
02904     D0 00 A0 FD | 	call	#divide_
02908     94 0E 06 F1 | 	add	objptr, #148
0290c     07 CD 62 FC | 	wrlong	muldivb_, objptr
02910                 | '   if cpl//xzoom==0
02910     04 0E 86 F1 | 	sub	objptr, #4
02914     07 CB 02 FB | 	rdlong	muldiva_, objptr
02918     3C 0E 06 F1 | 	add	objptr, #60
0291c     07 CD 02 FB | 	rdlong	muldivb_, objptr
02920     CC 0E 86 F1 | 	sub	objptr, #204
02924     D0 00 A0 FD | 	call	#divide_
02928     00 CA 0E F2 | 	cmp	muldiva_, #0 wz
0292c     28 00 90 5D |  if_ne	jmp	#LR__0061
02930                 | '     cpl:=cpl/xzoom
02930     90 0E 06 F1 | 	add	objptr, #144
02934     07 CB 02 FB | 	rdlong	muldiva_, objptr
02938     3C 0E 06 F1 | 	add	objptr, #60
0293c     07 CD 02 FB | 	rdlong	muldivb_, objptr
02940     CC 0E 86 F1 | 	sub	objptr, #204
02944     D0 00 A0 FD | 	call	#divide_
02948     90 0E 06 F1 | 	add	objptr, #144
0294c     07 CD 62 FC | 	wrlong	muldivb_, objptr
02950     90 0E 86 F1 | 	sub	objptr, #144
02954                 | '   else
02954     2C 00 90 FD | 	jmp	#LR__0062
02958                 | LR__0061
02958                 | '     cpl:=cpl/xzoom+1
02958     90 0E 06 F1 | 	add	objptr, #144
0295c     07 CB 02 FB | 	rdlong	muldiva_, objptr
02960     3C 0E 06 F1 | 	add	objptr, #60
02964     07 CD 02 FB | 	rdlong	muldivb_, objptr
02968     CC 0E 86 F1 | 	sub	objptr, #204
0296c     D0 00 A0 FD | 	call	#divide_
02970     66 79 02 F6 | 	mov	local02, muldivb_
02974     01 78 06 F1 | 	add	local02, #1
02978     90 0E 06 F1 | 	add	objptr, #144
0297c     07 79 62 FC | 	wrlong	local02, objptr
02980     90 0E 86 F1 | 	sub	objptr, #144
02984                 | LR__0062
02984                 | LR__0063
02984                 | ' 
02984                 | ' buflen:=(cpl*lines)
02984     90 0E 06 F1 | 	add	objptr, #144
02988     07 7D 02 FB | 	rdlong	local04, objptr
0298c     04 0E 06 F1 | 	add	objptr, #4
02990     07 81 02 FB | 	rdlong	local06, objptr
02994     40 7D 02 FD | 	qmul	local04, local06
02998     18 78 62 FD | 	getqx	local02
0299c     64 0E 86 F1 | 	sub	objptr, #100
029a0     07 79 62 FC | 	wrlong	local02, objptr
029a4                 | ' buf_ptr:=$80000-4*buflen
029a4     3C 7D 02 F6 | 	mov	local04, local02
029a8     30 0E 86 F1 | 	sub	objptr, #48
029ac     02 7C 66 F0 | 	shl	local04, #2
029b0     13 78 C6 F9 | 	decod	local02, #19
029b4     3E 79 82 F1 | 	sub	local02, local04
029b8     07 79 62 FC | 	wrlong	local02, objptr
029bc                 | ' mode_ptr:=@timings
029bc     50 0E 06 F1 | 	add	objptr, #80
029c0     07 79 02 F6 | 	mov	local02, objptr
029c4     3C 0E 86 F1 | 	sub	objptr, #60
029c8     07 79 62 FC | 	wrlong	local02, objptr
029cc                 | ' graphmode:=mode
029cc     B0 0E 06 F1 | 	add	objptr, #176
029d0     07 77 62 FC | 	wrlong	local01, objptr
029d4     C4 0E 86 F1 | 	sub	objptr, #196
029d8                 | ' makedl(mode)
029d8     3B 6D 02 F6 | 	mov	arg01, local01
029dc     0C 00 B0 FD | 	call	#_hng030rm_spin2_makedl
029e0                 | LR__0064
029e0     AF F0 03 F6 | 	mov	ptra, fp
029e4     BF 00 A0 FD | 	call	#popregs_
029e8                 | _hng030rm_spin2_setmode_ret
029e8     2D 00 64 FD | 	ret
029ec                 | 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' 
029ec                 | ' '---------- Make a display list
029ec                 | ' 
029ec                 | ' pub makedl (mode) |i, fontline2,charline,bufstart,zoom1,vzoom,lpc,hzoom
029ec                 | _hng030rm_spin2_makedl
029ec                 | ' 
029ec                 | ' ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
029ec                 | '   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
029ec                 | '   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
029ec                 | ' 
029ec                 | ' '   0 - display a up/down border line
029ec                 | ' 
029ec                 | ' '  ' aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - text line
029ec                 | ' '    aaaa_aaaa_aaaa_aaaa_aa00 - buffer start, has to be aligned, 1 long for char, ff_bb_rr_cc, foreground, background,reserved, charcode
029ec                 | ' '    zz - zoom, 00-x1, 01-x2, 10-x4, 11-blank line
029ec                 | ' '    nnnn - font line to display, 0..15
029ec                 | ' '    llllll - character line, determines the cursor Y position
029ec                 | ' 
029ec                 | ' 
029ec                 | ' if (mode &256==0)
029ec     00 6D CE F7 | 	test	arg01, #256 wz
029f0     1C 00 90 5D |  if_ne	jmp	#LR__0065
029f4                 | '   dl_ptr:=buf_ptr-4*576
029f4     07 2D 02 FB | 	rdlong	_var01, objptr
029f8     04 00 00 FF 
029fc     00 2D 86 F1 | 	sub	_var01, ##2304
02a00     1C 0E 06 F1 | 	add	objptr, #28
02a04     07 2D 62 FC | 	wrlong	_var01, objptr
02a08     1C 0E 86 F1 | 	sub	objptr, #28
02a0c                 | ' else
02a0c     18 00 90 FD | 	jmp	#LR__0066
02a10                 | LR__0065
02a10                 | '   dl_ptr:=buf_ptr-4*496
02a10     07 2D 02 FB | 	rdlong	_var01, objptr
02a14     03 00 00 FF 
02a18     C0 2D 86 F1 | 	sub	_var01, ##1984
02a1c     1C 0E 06 F1 | 	add	objptr, #28
02a20     07 2D 62 FC | 	wrlong	_var01, objptr
02a24     1C 0E 86 F1 | 	sub	objptr, #28
02a28                 | LR__0066
02a28                 | '  ' dl_ptr:=buf_ptr-4*540
02a28                 | ' 
02a28                 | ' vzoom:=((mode>>2) & 3)
02a28     36 2F 02 F6 | 	mov	_var02, arg01
02a2c     02 2E 46 F0 | 	shr	_var02, #2
02a30     03 2E 06 F5 | 	and	_var02, #3
02a34                 | ' 
02a34                 | ' 
02a34                 | ' if mode<512 '' text modes
02a34     01 00 00 FF 
02a38     00 6C 5E F2 | 	cmps	arg01, ##512 wcz
02a3c     E8 01 90 3D |  if_ae	jmp	#LR__0074
02a40                 | ' 
02a40                 | '   if timings[6]>0 'borders
02a40     68 0E 06 F1 | 	add	objptr, #104
02a44     07 2D 02 FB | 	rdlong	_var01, objptr
02a48     68 0E 86 F1 | 	sub	objptr, #104
02a4c     00 2C 5E F2 | 	cmps	_var01, #0 wcz
02a50     D4 00 90 ED |  if_be	jmp	#LR__0071
02a54                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02a54     00 30 06 F6 | 	mov	_var03, #0
02a58     68 0E 06 F1 | 	add	objptr, #104
02a5c     07 33 02 FB | 	rdlong	_var04, objptr
02a60     68 0E 86 F1 | 	sub	objptr, #104
02a64     01 32 86 F1 | 	sub	_var04, #1
02a68     00 32 5E F2 | 	cmps	_var04, #0 wcz
02a6c     01 34 06 16 |  if_a	mov	_var05, #1
02a70     01 34 66 E6 |  if_be	neg	_var05, #1
02a74     1A 37 02 F6 | 	mov	_var06, _var05
02a78     1A 33 02 F1 | 	add	_var04, _var05
02a7c     A8 D5 9F FE | 	loc	pa,	#(@LR__0068-@LR__0067)
02a80     93 00 A0 FD | 	call	#FCACHE_LOAD_
02a84                 | LR__0067
02a84                 | '       long[dl_ptr+4*i]:=$0
02a84     1C 0E 06 F1 | 	add	objptr, #28
02a88     07 39 02 FB | 	rdlong	_var07, objptr
02a8c     1C 0E 86 F1 | 	sub	objptr, #28
02a90     18 3B 02 F6 | 	mov	_var08, _var03
02a94     02 3A 66 F0 | 	shl	_var08, #2
02a98     1D 39 02 F1 | 	add	_var07, _var08
02a9c     1C 01 68 FC | 	wrlong	#0, _var07
02aa0     1B 31 02 F1 | 	add	_var03, _var06
02aa4     19 31 0A F2 | 	cmp	_var03, _var04 wz
02aa8     D8 FF 9F 5D |  if_ne	jmp	#LR__0067
02aac                 | LR__0068
02aac                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02aac     68 0E 06 F1 | 	add	objptr, #104
02ab0     07 31 02 FB | 	rdlong	_var03, objptr
02ab4     18 0E 06 F1 | 	add	objptr, #24
02ab8     07 35 02 FB | 	rdlong	_var05, objptr
02abc     1A 31 02 F1 | 	add	_var03, _var05
02ac0     0C 0E 06 F1 | 	add	objptr, #12
02ac4     07 3D 02 FB | 	rdlong	_var09, objptr
02ac8     01 3C 86 F1 | 	sub	_var09, #1
02acc     24 0E 86 F1 | 	sub	objptr, #36
02ad0     07 3F 02 FB | 	rdlong	_var10, objptr
02ad4     18 0E 06 F1 | 	add	objptr, #24
02ad8     07 41 02 FB | 	rdlong	_var11, objptr
02adc     80 0E 86 F1 | 	sub	objptr, #128
02ae0     20 3F 02 F1 | 	add	_var10, _var11
02ae4     1F 3D 5A F2 | 	cmps	_var09, _var10 wcz
02ae8     01 3A 06 16 |  if_a	mov	_var08, #1
02aec     01 3A 66 E6 |  if_be	neg	_var08, #1
02af0     1D 43 02 F6 | 	mov	_var12, _var08
02af4     1D 3D 02 F1 | 	add	_var09, _var08
02af8     2C D5 9F FE | 	loc	pa,	#(@LR__0070-@LR__0069)
02afc     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b00                 | LR__0069
02b00                 | '       long[dl_ptr+4*i]:=$0
02b00     1C 0E 06 F1 | 	add	objptr, #28
02b04     07 45 02 FB | 	rdlong	_var13, objptr
02b08     1C 0E 86 F1 | 	sub	objptr, #28
02b0c     18 47 02 F6 | 	mov	_var14, _var03
02b10     02 46 66 F0 | 	shl	_var14, #2
02b14     23 45 02 F1 | 	add	_var13, _var14
02b18     22 01 68 FC | 	wrlong	#0, _var13
02b1c     21 31 02 F1 | 	add	_var03, _var12
02b20     1E 31 0A F2 | 	cmp	_var03, _var09 wz
02b24     D8 FF 9F 5D |  if_ne	jmp	#LR__0069
02b28                 | LR__0070
02b28                 | LR__0071
02b28                 | '   lpc:=16<<vzoom
02b28     10 48 06 F6 | 	mov	_var15, #16
02b2c     17 49 62 F0 | 	shl	_var15, _var02
02b30                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02b30     68 0E 06 F1 | 	add	objptr, #104
02b34     07 31 02 FB | 	rdlong	_var03, objptr
02b38     18 4B 02 F6 | 	mov	_var16, _var03
02b3c     18 0E 06 F1 | 	add	objptr, #24
02b40     07 4D 02 FB | 	rdlong	_var17, objptr
02b44     26 4B 02 F1 | 	add	_var16, _var17
02b48     01 4A 86 F1 | 	sub	_var16, #1
02b4c     18 0E 86 F1 | 	sub	objptr, #24
02b50     07 3B 02 FB | 	rdlong	_var08, objptr
02b54     68 0E 86 F1 | 	sub	objptr, #104
02b58     1D 4B 5A F2 | 	cmps	_var16, _var08 wcz
02b5c     01 4E 06 16 |  if_a	mov	_var18, #1
02b60     01 4E 66 E6 |  if_be	neg	_var18, #1
02b64     27 51 02 F6 | 	mov	_var19, _var18
02b68     27 4B 02 F1 | 	add	_var16, _var18
02b6c     44 D5 9F FE | 	loc	pa,	#(@LR__0073-@LR__0072)
02b70     93 00 A0 FD | 	call	#FCACHE_LOAD_
02b74                 | LR__0072
02b74                 | '     fontline2:=((i-timings[6])+//lpc)>>vzoom
02b74     18 CB 02 F6 | 	mov	muldiva_, _var03
02b78     68 0E 06 F1 | 	add	objptr, #104
02b7c     07 53 02 FB | 	rdlong	_var20, objptr
02b80     68 0E 86 F1 | 	sub	objptr, #104
02b84     29 CB 82 F1 | 	sub	muldiva_, _var20
02b88     24 CD 02 F6 | 	mov	muldivb_, _var15
02b8c     CC 00 A0 FD | 	call	#unsdivide_
02b90     17 CB 42 F0 | 	shr	muldiva_, _var02
02b94     65 55 02 F6 | 	mov	_var21, muldiva_
02b98                 | '     charline:=(i-timings[6])+/lpc
02b98     18 CB 02 F6 | 	mov	muldiva_, _var03
02b9c     68 0E 06 F1 | 	add	objptr, #104
02ba0     07 57 02 FB | 	rdlong	_var22, objptr
02ba4     68 0E 86 F1 | 	sub	objptr, #104
02ba8     2B CB 82 F1 | 	sub	muldiva_, _var22
02bac     24 CD 02 F6 | 	mov	muldivb_, _var15
02bb0     CC 00 A0 FD | 	call	#unsdivide_
02bb4     66 59 02 F6 | 	mov	_var23, muldivb_
02bb8                 | '     bufstart:=buf_ptr+4*((cpl)*charline)+(mode&3)
02bb8     07 41 02 FB | 	rdlong	_var11, objptr
02bbc     90 0E 06 F1 | 	add	objptr, #144
02bc0     07 53 02 FB | 	rdlong	_var20, objptr
02bc4     2C 53 02 FD | 	qmul	_var20, _var23
02bc8     18 5A 62 FD | 	getqx	_var24
02bcc     02 5A 66 F0 | 	shl	_var24, #2
02bd0     2D 41 02 F1 | 	add	_var11, _var24
02bd4     36 47 02 F6 | 	mov	_var14, arg01
02bd8     03 46 06 F5 | 	and	_var14, #3
02bdc     23 41 02 F1 | 	add	_var11, _var14
02be0                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+(fontline2<<8)+(charline<<2)+1
02be0     0C 40 66 F0 | 	shl	_var11, #12
02be4     2A 57 02 F6 | 	mov	_var22, _var21
02be8     08 56 66 F0 | 	shl	_var22, #8
02bec     2B 41 02 F1 | 	add	_var11, _var22
02bf0     2C 53 02 F6 | 	mov	_var20, _var23
02bf4     02 52 66 F0 | 	shl	_var20, #2
02bf8     29 41 02 F1 | 	add	_var11, _var20
02bfc     01 40 06 F1 | 	add	_var11, #1
02c00     74 0E 86 F1 | 	sub	objptr, #116
02c04     07 45 02 FB | 	rdlong	_var13, objptr
02c08     1C 0E 86 F1 | 	sub	objptr, #28
02c0c     18 47 02 F6 | 	mov	_var14, _var03
02c10     02 46 66 F0 | 	shl	_var14, #2
02c14     23 45 02 F1 | 	add	_var13, _var14
02c18     22 41 62 FC | 	wrlong	_var11, _var13
02c1c     28 31 02 F1 | 	add	_var03, _var19
02c20     25 31 0A F2 | 	cmp	_var03, _var16 wz
02c24     4C FF 9F 5D |  if_ne	jmp	#LR__0072
02c28                 | LR__0073
02c28                 | LR__0074
02c28                 | ' 
02c28                 | ' 
02c28                 | ' 
02c28                 | ' if (mode>=512)' and (mode & (%10_00_00_0000))==(%10_00_00_0000) ' graphics -> all modes TODO :mode 560+192=752 = 10_11_11_0000 impossib,e because out of memory
02c28     01 00 00 FF 
02c2c     00 6C 5E F2 | 	cmps	arg01, ##512 wcz
02c30     A8 01 90 CD |  if_b	jmp	#LR__0082
02c34                 | ' 
02c34                 | '   if timings[6]>0 'borders
02c34     68 0E 06 F1 | 	add	objptr, #104
02c38     07 2D 02 FB | 	rdlong	_var01, objptr
02c3c     68 0E 86 F1 | 	sub	objptr, #104
02c40     00 2C 5E F2 | 	cmps	_var01, #0 wcz
02c44     D4 00 90 ED |  if_be	jmp	#LR__0079
02c48                 | '     repeat i from 0 to timings[6]-1 '0 to -1
02c48     00 30 06 F6 | 	mov	_var03, #0
02c4c     68 0E 06 F1 | 	add	objptr, #104
02c50     07 5D 02 FB | 	rdlong	_var25, objptr
02c54     68 0E 86 F1 | 	sub	objptr, #104
02c58     01 5C 86 F1 | 	sub	_var25, #1
02c5c     00 5C 5E F2 | 	cmps	_var25, #0 wcz
02c60     01 34 06 16 |  if_a	mov	_var05, #1
02c64     01 34 66 E6 |  if_be	neg	_var05, #1
02c68     1A 5F 02 F6 | 	mov	_var26, _var05
02c6c     1A 5D 02 F1 | 	add	_var25, _var05
02c70     B4 D3 9F FE | 	loc	pa,	#(@LR__0076-@LR__0075)
02c74     93 00 A0 FD | 	call	#FCACHE_LOAD_
02c78                 | LR__0075
02c78                 | '       long[dl_ptr+4*i]:=$0
02c78     1C 0E 06 F1 | 	add	objptr, #28
02c7c     07 39 02 FB | 	rdlong	_var07, objptr
02c80     1C 0E 86 F1 | 	sub	objptr, #28
02c84     18 3B 02 F6 | 	mov	_var08, _var03
02c88     02 3A 66 F0 | 	shl	_var08, #2
02c8c     1D 39 02 F1 | 	add	_var07, _var08
02c90     1C 01 68 FC | 	wrlong	#0, _var07
02c94     2F 31 02 F1 | 	add	_var03, _var26
02c98     2E 31 0A F2 | 	cmp	_var03, _var25 wz
02c9c     D8 FF 9F 5D |  if_ne	jmp	#LR__0075
02ca0                 | LR__0076
02ca0                 | '     repeat i from timings[6]+timings[12] to timings[15]-1
02ca0     68 0E 06 F1 | 	add	objptr, #104
02ca4     07 31 02 FB | 	rdlong	_var03, objptr
02ca8     18 0E 06 F1 | 	add	objptr, #24
02cac     07 35 02 FB | 	rdlong	_var05, objptr
02cb0     1A 31 02 F1 | 	add	_var03, _var05
02cb4     0C 0E 06 F1 | 	add	objptr, #12
02cb8     07 61 02 FB | 	rdlong	_var27, objptr
02cbc     01 60 86 F1 | 	sub	_var27, #1
02cc0     24 0E 86 F1 | 	sub	objptr, #36
02cc4     07 3F 02 FB | 	rdlong	_var10, objptr
02cc8     18 0E 06 F1 | 	add	objptr, #24
02ccc     07 41 02 FB | 	rdlong	_var11, objptr
02cd0     80 0E 86 F1 | 	sub	objptr, #128
02cd4     20 3F 02 F1 | 	add	_var10, _var11
02cd8     1F 61 5A F2 | 	cmps	_var27, _var10 wcz
02cdc     01 3A 06 16 |  if_a	mov	_var08, #1
02ce0     01 3A 66 E6 |  if_be	neg	_var08, #1
02ce4     1D 63 02 F6 | 	mov	_var28, _var08
02ce8     1D 61 02 F1 | 	add	_var27, _var08
02cec     38 D3 9F FE | 	loc	pa,	#(@LR__0078-@LR__0077)
02cf0     93 00 A0 FD | 	call	#FCACHE_LOAD_
02cf4                 | LR__0077
02cf4                 | '       long[dl_ptr+4*i]:=$0
02cf4     1C 0E 06 F1 | 	add	objptr, #28
02cf8     07 45 02 FB | 	rdlong	_var13, objptr
02cfc     1C 0E 86 F1 | 	sub	objptr, #28
02d00     18 47 02 F6 | 	mov	_var14, _var03
02d04     02 46 66 F0 | 	shl	_var14, #2
02d08     23 45 02 F1 | 	add	_var13, _var14
02d0c     22 01 68 FC | 	wrlong	#0, _var13
02d10     31 31 02 F1 | 	add	_var03, _var28
02d14     30 31 0A F2 | 	cmp	_var03, _var27 wz
02d18     D8 FF 9F 5D |  if_ne	jmp	#LR__0077
02d1c                 | LR__0078
02d1c                 | LR__0079
02d1c                 | '   repeat i from timings[6] to timings[6]+timings[12]-1
02d1c     68 0E 06 F1 | 	add	objptr, #104
02d20     07 31 02 FB | 	rdlong	_var03, objptr
02d24     18 65 02 F6 | 	mov	_var29, _var03
02d28     18 0E 06 F1 | 	add	objptr, #24
02d2c     07 4D 02 FB | 	rdlong	_var17, objptr
02d30     26 65 02 F1 | 	add	_var29, _var17
02d34     01 64 86 F1 | 	sub	_var29, #1
02d38     18 0E 86 F1 | 	sub	objptr, #24
02d3c     07 3B 02 FB | 	rdlong	_var08, objptr
02d40     68 0E 86 F1 | 	sub	objptr, #104
02d44     1D 65 5A F2 | 	cmps	_var29, _var08 wcz
02d48     01 4E 06 16 |  if_a	mov	_var18, #1
02d4c     01 4E 66 E6 |  if_be	neg	_var18, #1
02d50     27 67 02 F6 | 	mov	_var30, _var18
02d54     27 65 02 F1 | 	add	_var29, _var18
02d58     20 D3 9F FE | 	loc	pa,	#(@LR__0081-@LR__0080)
02d5c     93 00 A0 FD | 	call	#FCACHE_LOAD_
02d60                 | LR__0080
02d60                 | '     bufstart:=buf_ptr+4*(cpl*((i-timings[6])>>vzoom))+(mode&3)
02d60     07 41 02 FB | 	rdlong	_var11, objptr
02d64     18 57 02 F6 | 	mov	_var22, _var03
02d68     68 0E 06 F1 | 	add	objptr, #104
02d6c     07 53 02 FB | 	rdlong	_var20, objptr
02d70     29 57 82 F1 | 	sub	_var22, _var20
02d74     17 57 42 F0 | 	shr	_var22, _var02
02d78     28 0E 06 F1 | 	add	objptr, #40
02d7c     07 47 02 FB | 	rdlong	_var14, objptr
02d80     2B 47 02 FD | 	qmul	_var14, _var22
02d84     18 68 62 FD | 	getqx	_var31
02d88     02 68 66 F0 | 	shl	_var31, #2
02d8c     34 41 02 F1 | 	add	_var11, _var31
02d90     36 6B 02 F6 | 	mov	_var32, arg01
02d94     03 6A 06 F5 | 	and	_var32, #3
02d98     35 41 02 F1 | 	add	_var11, _var32
02d9c                 | '     long[dl_ptr+4*i]:=(bufstart<<12)+2+(mode &48)>>2
02d9c     0C 40 66 F0 | 	shl	_var11, #12
02da0     02 40 06 F1 | 	add	_var11, #2
02da4     36 57 02 F6 | 	mov	_var22, arg01
02da8     30 56 06 F5 | 	and	_var22, #48
02dac     02 56 46 F0 | 	shr	_var22, #2
02db0     2B 41 02 F1 | 	add	_var11, _var22
02db4     74 0E 86 F1 | 	sub	objptr, #116
02db8     07 53 02 FB | 	rdlong	_var20, objptr
02dbc     1C 0E 86 F1 | 	sub	objptr, #28
02dc0     18 5B 02 F6 | 	mov	_var24, _var03
02dc4     02 5A 66 F0 | 	shl	_var24, #2
02dc8     2D 53 02 F1 | 	add	_var20, _var24
02dcc     29 41 62 FC | 	wrlong	_var11, _var20
02dd0     33 31 02 F1 | 	add	_var03, _var30
02dd4     32 31 0A F2 | 	cmp	_var03, _var29 wz
02dd8     84 FF 9F 5D |  if_ne	jmp	#LR__0080
02ddc                 | LR__0081
02ddc                 | LR__0082
02ddc                 | _hng030rm_spin2_makedl_ret
02ddc     2D 00 64 FD | 	ret
02de0                 | 
02de0                 | '       
02de0                 | ' '--------- Start the driver with graphics mode 'mode' at pins 'base'
02de0                 | ' 
02de0                 | ' pub start(mode,base):result
02de0                 | _hng030rm_spin2_start
02de0     04 5A 05 F6 | 	mov	COUNT_, #4
02de4     B0 00 A0 FD | 	call	#pushregs_
02de8     36 77 02 F6 | 	mov	local01, arg01
02dec                 | ' 
02dec                 | ' ' initialize pointers and variables
02dec                 | ' 
02dec                 | ' border_ptr:=@bordercolor
02dec     2C 0E 06 F1 | 	add	objptr, #44
02df0     07 79 02 F6 | 	mov	local02, objptr
02df4     24 0E 86 F1 | 	sub	objptr, #36
02df8     07 79 62 FC | 	wrlong	local02, objptr
02dfc                 | ' font_ptr:=@st_font
02dfc     08 00 00 FF 
02e00     00 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##4096
02e04     04 0E 86 F1 | 	sub	objptr, #4
02e08     07 17 62 FC | 	wrlong	ptr__hng030rm_spin2_dat__, objptr
02e0c                 | ' hdmibase:=base
02e0c     20 0E 06 F1 | 	add	objptr, #32
02e10     07 6F 62 FC | 	wrlong	arg02, objptr
02e14     24 0E 86 F1 | 	sub	objptr, #36
02e18                 | ' p1:=@putpixel1
02e18     07 6D 02 F6 | 	mov	arg01, objptr
02e1c     0D 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel1_
02e20     08 00 00 FF 
02e24     00 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##4096
02e28     B8 09 B0 FD | 	call	#__system___make_methodptr
02e2c     13 7B 02 F6 | 	mov	local03, result1
02e30     DC 0E 06 F1 | 	add	objptr, #220
02e34     07 7B 62 FC | 	wrlong	local03, objptr
02e38     DC 0E 86 F1 | 	sub	objptr, #220
02e3c                 | ' p2:=@putpixel2
02e3c     07 6D 02 F6 | 	mov	arg01, objptr
02e40     0E 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel2_
02e44     9C 09 B0 FD | 	call	#__system___make_methodptr
02e48     13 7B 02 F6 | 	mov	local03, result1
02e4c     E0 0E 06 F1 | 	add	objptr, #224
02e50     07 7B 62 FC | 	wrlong	local03, objptr
02e54     E0 0E 86 F1 | 	sub	objptr, #224
02e58                 | ' p4:=@putpixel4
02e58     07 6D 02 F6 | 	mov	arg01, objptr
02e5c     0F 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel4_
02e60     80 09 B0 FD | 	call	#__system___make_methodptr
02e64     13 7B 02 F6 | 	mov	local03, result1
02e68     E4 0E 06 F1 | 	add	objptr, #228
02e6c     07 7B 62 FC | 	wrlong	local03, objptr
02e70     E4 0E 86 F1 | 	sub	objptr, #228
02e74                 | ' p8:=@putpixel8
02e74     07 6D 02 F6 | 	mov	arg01, objptr
02e78     10 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_putpixel8_
02e7c     64 09 B0 FD | 	call	#__system___make_methodptr
02e80     13 7B 02 F6 | 	mov	local03, result1
02e84     E8 0E 06 F1 | 	add	objptr, #232
02e88     07 7B 62 FC | 	wrlong	local03, objptr
02e8c     E8 0E 86 F1 | 	sub	objptr, #232
02e90                 | ' 
02e90                 | ' 
02e90                 | ' ' the mode has to be set here to enable computing the buffer length
02e90                 | ' 
02e90                 | ' setmode(mode)
02e90     3B 6D 02 F6 | 	mov	arg01, local01
02e94     68 F5 BF FD | 	call	#_hng030rm_spin2_setmode
02e98                 | ' 
02e98                 | ' vblank_ptr:=@vblank
02e98     40 0E 06 F1 | 	add	objptr, #64
02e9c     07 79 02 F6 | 	mov	local02, objptr
02ea0     34 0E 86 F1 | 	sub	objptr, #52
02ea4     07 79 62 FC | 	wrlong	local02, objptr
02ea8                 | ' cursor_ptr:=@cursor_x
02ea8     28 0E 06 F1 | 	add	objptr, #40
02eac     07 79 02 F6 | 	mov	local02, objptr
02eb0     24 0E 86 F1 | 	sub	objptr, #36
02eb4     07 79 62 FC | 	wrlong	local02, objptr
02eb8                 | ' 
02eb8                 | ' fontnum_ptr:=@fontnum
02eb8     88 0E 06 F1 | 	add	objptr, #136
02ebc     07 79 02 F6 | 	mov	local02, objptr
02ec0     78 0E 86 F1 | 	sub	objptr, #120
02ec4     07 79 62 FC | 	wrlong	local02, objptr
02ec8                 | ' 
02ec8                 | ' fontnum:=0  ' PC type font ' TODO: font# in buffer byte #1
02ec8     78 0E 06 F1 | 	add	objptr, #120
02ecc     07 01 68 FC | 	wrlong	#0, objptr
02ed0                 | ' bytemove(@colors,@vgacolors,16)
02ed0     1C 0E 06 F1 | 	add	objptr, #28
02ed4     07 6D 02 F6 | 	mov	arg01, objptr
02ed8     B4 0E 86 F1 | 	sub	objptr, #180
02edc     0F 00 00 FF 
02ee0     58 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7768
02ee4     0B 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02ee8     0F 00 00 FF 
02eec     58 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7768
02ef0     10 70 06 F6 | 	mov	arg03, #16
02ef4     BC 07 B0 FD | 	call	#__system____builtin_memmove
02ef8                 | ' 
02ef8                 | ' ' initialize a cursor
02ef8                 | ' 
02ef8                 | ' cursor_x:=0
02ef8     34 0E 06 F1 | 	add	objptr, #52
02efc     07 01 48 FC | 	wrbyte	#0, objptr
02f00                 | ' cursor_y:=0
02f00     01 0E 06 F1 | 	add	objptr, #1
02f04     07 01 48 FC | 	wrbyte	#0, objptr
02f08                 | ' cursor_sh:=14
02f08     01 0E 06 F1 | 	add	objptr, #1
02f0c     07 1D 48 FC | 	wrbyte	#14, objptr
02f10     36 0E 86 F1 | 	sub	objptr, #54
02f14                 | ' 
02f14                 | ' 
02f14                 | ' ' start the cog
02f14                 | ' 
02f14                 | ' cog:=coginit(16,@hdmi, @buf_ptr)
02f14     0F 00 00 FF 
02f18     68 16 06 F1 | 	add	ptr__hng030rm_spin2_dat__, ##7784
02f1c     0B 6F 02 F6 | 	mov	arg02, ptr__hng030rm_spin2_dat__
02f20     0F 00 00 FF 
02f24     68 16 86 F1 | 	sub	ptr__hng030rm_spin2_dat__, ##7784
02f28     07 71 02 F6 | 	mov	arg03, objptr
02f2c     10 6C 06 F6 | 	mov	arg01, #16
02f30     28 70 62 FD | 	setq	arg03
02f34     37 6D F2 FC | 	coginit	arg01, arg02 wc
02f38     01 6C 66 C6 |  if_b	neg	arg01, #1
02f3c     36 27 02 F6 | 	mov	result1, arg01
02f40     13 7D 02 F6 | 	mov	local04, result1
02f44     28 0E 06 F1 | 	add	objptr, #40
02f48     07 7D 62 FC | 	wrlong	local04, objptr
02f4c     28 0E 86 F1 | 	sub	objptr, #40
02f50                 | ' waitms(20)
02f50     14 6C 06 F6 | 	mov	arg01, #20
02f54     E8 09 B0 FD | 	call	#__system___waitms
02f58                 | ' 
02f58                 | ' ' clear the screen and set the colors to green on black
02f58                 | ' 
02f58                 | ' cls(c_green,c_black)
02f58     C7 6C 06 F6 | 	mov	arg01, #199
02f5c     00 6E 06 F6 | 	mov	arg02, #0
02f60     98 F0 BF FD | 	call	#_hng030rm_spin2_cls
02f64                 | ' setbordercolor(0,0,128)
02f64     00 6C 06 F6 | 	mov	arg01, #0
02f68     00 6E 06 F6 | 	mov	arg02, #0
02f6c     80 70 06 F6 | 	mov	arg03, #128
02f70     64 F0 BF FD | 	call	#_hng030rm_spin2_setbordercolor
02f74                 | ' setwritecolors(c_green,c_black)
02f74                 | ' 
02f74                 | ' 
02f74                 | ' write_color:=ff
02f74     38 0E 06 F1 | 	add	objptr, #56
02f78     07 8F 69 FC | 	wrlong	#199, objptr
02f7c                 | ' write_background:=bb
02f7c     04 0E 06 F1 | 	add	objptr, #4
02f80     07 01 68 FC | 	wrlong	#0, objptr
02f84                 | ' 
02f84                 | ' return cog
02f84     14 0E 86 F1 | 	sub	objptr, #20
02f88     07 27 02 FB | 	rdlong	result1, objptr
02f8c     28 0E 86 F1 | 	sub	objptr, #40
02f90     AF F0 03 F6 | 	mov	ptra, fp
02f94     BF 00 A0 FD | 	call	#popregs_
02f98                 | _hng030rm_spin2_start_ret
02f98     2D 00 64 FD | 	ret
02f9c                 | 
02f9c                 | ' 'this is the object and not a program
02f9c                 | ' 
02f9c                 | ' pub start :cog
02f9c                 | _retrocog_spin2_start
02f9c     02 5A 05 F6 | 	mov	COUNT_, #2
02fa0     B0 00 A0 FD | 	call	#pushregs_
02fa4                 | ' 
02fa4                 | ' cog:=cogspin(16,serialcog(),@serialstack)
02fa4     07 77 02 F6 | 	mov	local01, objptr
02fa8     01 00 00 FF 
02fac     18 0F 06 F1 | 	add	objptr, ##792
02fb0     07 79 02 F6 | 	mov	local02, objptr
02fb4     3C 77 62 FC | 	wrlong	local01, local02
02fb8     04 78 06 F1 | 	add	local02, #4
02fbc     3C 23 62 FC | 	wrlong	ptr__retrocog_spin2_serialcog_, local02
02fc0     07 71 02 F6 | 	mov	arg03, objptr
02fc4     01 00 00 FF 
02fc8     18 0F 86 F1 | 	sub	objptr, ##792
02fcc     10 6C 06 F6 | 	mov	arg01, #16
02fd0     28 70 62 FD | 	setq	arg03
02fd4     04 6D F2 FC | 	coginit	arg01, entryptr__ wc
02fd8     01 6C 66 C6 |  if_b	neg	arg01, #1
02fdc     36 27 02 F6 | 	mov	result1, arg01
02fe0     AF F0 03 F6 | 	mov	ptra, fp
02fe4     BF 00 A0 FD | 	call	#popregs_
02fe8                 | _retrocog_spin2_start_ret
02fe8     2D 00 64 FD | 	ret
02fec                 | 
02fec                 | ' 
02fec                 | ' pub serialcog()| rr, mrr, b, mb, midireport, kbmreport
02fec                 | _retrocog_spin2_serialcog
02fec     0B 5A 05 F6 | 	mov	COUNT_, #11
02ff0     B0 00 A0 FD | 	call	#pushregs_
02ff4                 | ' 
02ff4                 | ' 'start serial and midi
02ff4                 | ' 
02ff4                 | ' serial_start(rxpin, txpin, baudrate)
02ff4     20 6C 06 F6 | 	mov	arg01, #32
02ff8     21 6E 06 F6 | 	mov	arg02, #33
02ffc     A6 0E 00 FF 
03000     00 70 06 F6 | 	mov	arg03, ##1920000
03004     84 04 B0 FD | 	call	#_retrocog_spin2_serial_start
03008                 | ' serial_start(midiin,midiout,mbaudrate)
03008     3D 00 00 FF 
0300c     12 76 06 F6 | 	mov	local01, ##31250
03010     1D 6C 06 F6 | 	mov	arg01, #29
03014     1E 6E 06 F6 | 	mov	arg02, #30
03018     3D 00 00 FF 
0301c     12 70 06 F6 | 	mov	arg03, ##31250
03020     68 04 B0 FD | 	call	#_retrocog_spin2_serial_start
03024                 | ' 
03024                 | ' mb:=(-1)
03024     01 78 66 F6 | 	neg	local02, #1
03028                 | ' b:=(-1)
03028     01 7A 66 F6 | 	neg	local03, #1
0302c                 | ' 
0302c                 | ' mousefront:=0
0302c     00 7C 06 F6 | 	mov	local04, #0
03030     08 0E 06 F1 | 	add	objptr, #8
03034     07 01 68 FC | 	wrlong	#0, objptr
03038                 | ' mousetail:=0
03038     04 0E 06 F1 | 	add	objptr, #4
0303c     07 01 68 FC | 	wrlong	#0, objptr
03040     0C 0E 86 F1 | 	sub	objptr, #12
03044                 | ' kbdfront:=0
03044     07 01 68 FC | 	wrlong	#0, objptr
03048                 | ' kbdtail:=0
03048     04 0E 06 F1 | 	add	objptr, #4
0304c     07 01 68 FC | 	wrlong	#0, objptr
03050                 | ' midifront:=0
03050     0C 0E 06 F1 | 	add	objptr, #12
03054     07 01 68 FC | 	wrlong	#0, objptr
03058                 | ' miditail:=0
03058     04 0E 06 F1 | 	add	objptr, #4
0305c     07 01 68 FC | 	wrlong	#0, objptr
03060                 | ' long[$30]:=0
03060     30 00 6C FC | 	wrlong	#0, #48
03064                 | ' long[$34]:=0
03064     34 00 6C FC | 	wrlong	#0, #52
03068     14 0E 86 F1 | 	sub	objptr, #20
0306c                 | ' long[$38]:=0
0306c     38 00 6C FC | 	wrlong	#0, #56
03070                 | ' 
03070                 | ' repeat
03070                 | LR__0083
03070                 | ' 
03070                 | '   repeat 
03070                 | LR__0084
03070                 | '     rr:=rxcheck(rxpin)
03070     20 6C 06 F6 | 	mov	arg01, #32
03074     88 04 B0 FD | 	call	#_retrocog_spin2_rxcheck
03078     13 7F 02 F6 | 	mov	local05, result1
0307c                 | '     mrr:=rxcheck(midiin)
0307c     1D 7C 06 F6 | 	mov	local04, #29
03080     1D 6C 06 F6 | 	mov	arg01, #29
03084     78 04 B0 FD | 	call	#_retrocog_spin2_rxcheck
03088     13 81 02 F6 | 	mov	local06, result1
0308c     40 83 02 F6 | 	mov	local07, local06
03090     00 7E 5E F2 | 	cmps	local05, #0 wcz
03094     08 00 90 3D |  if_ae	jmp	#LR__0085
03098     00 82 5E F2 | 	cmps	local07, #0 wcz
0309c     D0 FF 9F CD |  if_b	jmp	#LR__0084
030a0                 | LR__0085
030a0                 | ' 
030a0                 | '   until rr>=0 || mrr>=0  
030a0                 | ' 
030a0                 | '   
030a0                 | ' ' midi. Must be >= $80 for a command
030a0                 | ' '$80-$8F - 3 bytes note off. note, velocity
030a0                 | ' '$90-$9F - 3 bytes note on, note, velocity
030a0                 | ' '$A0-$AF - 3 bytes poly aftertouch. note, value
030a0                 | ' '$B0-$BF - 3 bytes control change, controller-value, 
030a0                 | ' '$C0-$CF - 2 bytes program change
030a0                 | ' '$D0-$DF - 2 bytes mono aftertouch
030a0                 | ' '$E0-$EF - 3 bytes pitch bend, $2000 - center
030a0                 | ' '$F0-$FF - 1 byte
030a0                 | '   
030a0                 | ' 
030a0                 | '     
030a0                 | '   if ((mrr>=$80) && (mrr<=$BF)) || ((mrr>=$E0) && (mrr<=$EF)) 
030a0     80 82 5E F2 | 	cmps	local07, #128 wcz
030a4     08 00 90 CD |  if_b	jmp	#LR__0086
030a8     BF 82 5E F2 | 	cmps	local07, #191 wcz
030ac     10 00 90 ED |  if_be	jmp	#LR__0087
030b0                 | LR__0086
030b0     E0 82 5E F2 | 	cmps	local07, #224 wcz
030b4     18 00 90 CD |  if_b	jmp	#LR__0088
030b8     EF 82 5E F2 | 	cmps	local07, #239 wcz
030bc     10 00 90 1D |  if_a	jmp	#LR__0088
030c0                 | LR__0087
030c0                 | '     mb:=2
030c0     02 78 06 F6 | 	mov	local02, #2
030c4                 | '     midireport:=mrr<<24
030c4     41 7D 02 F6 | 	mov	local04, local07
030c8     18 7C 66 F0 | 	shl	local04, #24
030cc     3E 85 02 F6 | 	mov	local08, local04
030d0                 | LR__0088
030d0                 | ' 
030d0                 | '   if (mrr>=$C0) && (mrr<=$DF)
030d0     C0 82 5E F2 | 	cmps	local07, #192 wcz
030d4     18 00 90 CD |  if_b	jmp	#LR__0089
030d8     DF 82 5E F2 | 	cmps	local07, #223 wcz
030dc     10 00 90 1D |  if_a	jmp	#LR__0089
030e0                 | '     mb:=1
030e0     01 78 06 F6 | 	mov	local02, #1
030e4                 | '     midireport:=mrr<<24
030e4     41 7D 02 F6 | 	mov	local04, local07
030e8     18 7C 66 F0 | 	shl	local04, #24
030ec     3E 85 02 F6 | 	mov	local08, local04
030f0                 | LR__0089
030f0                 | '   
030f0                 | '   if (mrr>=$F0) 'TODO: do something with SYSEX, now a workaround for Novation Impulse
030f0     F0 82 5E F2 | 	cmps	local07, #240 wcz
030f4                 | '     mb:=4
030f4     04 78 06 36 |  if_ae	mov	local02, #4
030f8                 | '     midireport:=mrr<<24  
030f8     41 85 02 36 |  if_ae	mov	local08, local07
030fc     18 84 66 30 |  if_ae	shl	local08, #24
03100                 | '   
03100                 | '   if (mrr<$80) && (mb>0)
03100     80 82 5E F2 | 	cmps	local07, #128 wcz
03104     3C 00 90 3D |  if_ae	jmp	#LR__0091
03108     00 78 5E F2 | 	cmps	local02, #0 wcz
0310c     34 00 90 ED |  if_be	jmp	#LR__0091
03110                 | '     
03110                 | '     mb--
03110     3C 7D 02 F6 | 	mov	local04, local02
03114     3C 81 02 F6 | 	mov	local06, local02
03118     01 80 86 F1 | 	sub	local06, #1
0311c     40 79 02 F6 | 	mov	local02, local06
03120                 | '     if mb<3
03120     03 78 5E F2 | 	cmps	local02, #3 wcz
03124     1C 00 90 3D |  if_ae	jmp	#LR__0090
03128                 | '       midireport+=mrr<<(mb<<3)
03128     42 7D 02 F6 | 	mov	local04, local08
0312c     41 81 02 F6 | 	mov	local06, local07
03130     3C 77 02 F6 | 	mov	local01, local02
03134     03 76 66 F0 | 	shl	local01, #3
03138     3B 81 62 F0 | 	shl	local06, local01
0313c     40 7D 02 F1 | 	add	local04, local06
03140     3E 85 02 F6 | 	mov	local08, local04
03144                 | LR__0090
03144                 | LR__0091
03144                 | '   
03144                 | '   if mb==0
03144     00 78 0E F2 | 	cmp	local02, #0 wz
03148     80 00 90 5D |  if_ne	jmp	#LR__0093
0314c                 | '     
0314c                 | '     if midifront<>((miditail-1) //32)
0314c     14 0E 06 F1 | 	add	objptr, #20
03150     07 81 02 FB | 	rdlong	local06, objptr
03154     40 7D 02 F6 | 	mov	local04, local06
03158     01 7C 86 F1 | 	sub	local04, #1
0315c     3E 77 52 F6 | 	abs	local01, local04 wc
03160     1F 76 06 F5 | 	and	local01, #31
03164     3B 77 62 C6 |  if_b	neg	local01, local01
03168     04 0E 86 F1 | 	sub	objptr, #4
0316c     07 87 02 FB | 	rdlong	local09, objptr
03170     10 0E 86 F1 | 	sub	objptr, #16
03174     43 89 02 F6 | 	mov	local10, local09
03178     3B 89 0A F2 | 	cmp	local10, local01 wz
0317c     48 00 90 AD |  if_e	jmp	#LR__0092
03180                 | '       midibuf[midifront]:=midireport
03180     10 0E 06 F1 | 	add	objptr, #16
03184     07 7D 02 FB | 	rdlong	local04, objptr
03188     02 7C 66 F0 | 	shl	local04, #2
0318c     01 00 00 FF 
03190     88 0E 06 F1 | 	add	objptr, ##648
03194     07 7D 02 F1 | 	add	local04, objptr
03198     3E 85 62 FC | 	wrlong	local08, local04
0319c                 | '       midifront+=1
0319c     01 00 00 FF 
031a0     88 0E 86 F1 | 	sub	objptr, ##648
031a4     07 77 02 FB | 	rdlong	local01, objptr
031a8     01 76 06 F1 | 	add	local01, #1
031ac     07 77 62 FC | 	wrlong	local01, objptr
031b0                 | '       midifront:=midifront // 32
031b0     3B 81 02 F6 | 	mov	local06, local01
031b4     40 7D 52 F6 | 	abs	local04, local06 wc
031b8     1F 7C 06 F5 | 	and	local04, #31
031bc     3E 7D 62 C6 |  if_b	neg	local04, local04
031c0     07 7D 62 FC | 	wrlong	local04, objptr
031c4     10 0E 86 F1 | 	sub	objptr, #16
031c8                 | LR__0092
031c8                 | '     mb:=(-1)
031c8     01 78 66 F6 | 	neg	local02, #1
031cc                 | LR__0093
031cc                 | ' 
031cc                 | ' 'Keyboard and mouse
031cc                 | ' 
031cc                 | '   if (rr>=$80) && (rr<>$FF)
031cc     80 7E 5E F2 | 	cmps	local05, #128 wcz
031d0     18 00 90 CD |  if_b	jmp	#LR__0094
031d4     FF 7E 0E F2 | 	cmp	local05, #255 wz
031d8     10 00 90 AD |  if_e	jmp	#LR__0094
031dc                 | '     b:=3
031dc     03 7A 06 F6 | 	mov	local03, #3
031e0                 | '     kbmreport:=rr<<24
031e0     3F 7D 02 F6 | 	mov	local04, local05
031e4     18 7C 66 F0 | 	shl	local04, #24
031e8     3E 8B 02 F6 | 	mov	local11, local04
031ec                 | LR__0094
031ec                 | '   
031ec                 | '   if (rr<$80) && (b>0)
031ec     80 7E 5E F2 | 	cmps	local05, #128 wcz
031f0     28 00 90 3D |  if_ae	jmp	#LR__0095
031f4     00 7A 5E F2 | 	cmps	local03, #0 wcz
031f8     20 00 90 ED |  if_be	jmp	#LR__0095
031fc                 | '     b--
031fc     01 7A 86 F1 | 	sub	local03, #1
03200                 | '     kbmreport+=rr<<(b<<3)  
03200     45 7D 02 F6 | 	mov	local04, local11
03204     3F 81 02 F6 | 	mov	local06, local05
03208     3D 77 02 F6 | 	mov	local01, local03
0320c     03 76 66 F0 | 	shl	local01, #3
03210     3B 81 62 F0 | 	shl	local06, local01
03214     40 7D 02 F1 | 	add	local04, local06
03218     3E 8B 02 F6 | 	mov	local11, local04
0321c                 | LR__0095
0321c                 | '   
0321c                 | '   if (rr==$FF)
0321c     FF 7E 0E F2 | 	cmp	local05, #255 wz
03220                 | '     b:=0   
03220     00 7A 06 A6 |  if_e	mov	local03, #0
03224                 | ' 
03224                 | '   if b==0  
03224     00 7A 0E F2 | 	cmp	local03, #0 wz
03228     0C 01 90 5D |  if_ne	jmp	#LR__0100
0322c                 | '  
0322c                 | '     if (kbmreport +>= $80000000) && (kbmreport +< $87000000)  'mouse
0322c     00 00 40 FF 
03230     00 8A 1E F2 | 	cmp	local11, ##-2147483648 wcz
03234     80 00 90 CD |  if_b	jmp	#LR__0097
03238     00 80 43 FF 
0323c     00 8A 1E F2 | 	cmp	local11, ##-2030043136 wcz
03240     74 00 90 3D |  if_ae	jmp	#LR__0097
03244                 | '       if mousefront<>((mousetail-1) //128)
03244     0C 0E 06 F1 | 	add	objptr, #12
03248     07 81 02 FB | 	rdlong	local06, objptr
0324c     40 7D 02 F6 | 	mov	local04, local06
03250     01 7C 86 F1 | 	sub	local04, #1
03254     3E 77 52 F6 | 	abs	local01, local04 wc
03258     7F 76 06 F5 | 	and	local01, #127
0325c     3B 77 62 C6 |  if_b	neg	local01, local01
03260     04 0E 86 F1 | 	sub	objptr, #4
03264     07 87 02 FB | 	rdlong	local09, objptr
03268     08 0E 86 F1 | 	sub	objptr, #8
0326c     43 89 02 F6 | 	mov	local10, local09
03270     3B 89 0A F2 | 	cmp	local10, local01 wz
03274     40 00 90 AD |  if_e	jmp	#LR__0096
03278                 | '         mousebuf[mousefront]:=kbmreport
03278     08 0E 06 F1 | 	add	objptr, #8
0327c     07 7D 02 FB | 	rdlong	local04, objptr
03280     02 7C 66 F0 | 	shl	local04, #2
03284     90 0E 06 F1 | 	add	objptr, #144
03288     07 7D 02 F1 | 	add	local04, objptr
0328c     3E 8B 62 FC | 	wrlong	local11, local04
03290                 | '         mousefront+=1
03290     90 0E 86 F1 | 	sub	objptr, #144
03294     07 77 02 FB | 	rdlong	local01, objptr
03298     01 76 06 F1 | 	add	local01, #1
0329c     07 77 62 FC | 	wrlong	local01, objptr
032a0                 | '         mousefront:=mousefront // 128
032a0     3B 81 02 F6 | 	mov	local06, local01
032a4     40 7D 52 F6 | 	abs	local04, local06 wc
032a8     7F 7C 06 F5 | 	and	local04, #127
032ac     3E 7D 62 C6 |  if_b	neg	local04, local04
032b0     07 7D 62 FC | 	wrlong	local04, objptr
032b4     08 0E 86 F1 | 	sub	objptr, #8
032b8                 | LR__0096
032b8                 | LR__0097
032b8                 | '     b:=(-1)
032b8     01 7A 66 F6 | 	neg	local03, #1
032bc                 | ' 
032bc                 | '     if (kbmreport +>= $87000000) && (kbmreport +< $8a000000)  'keyboard
032bc     00 80 43 FF 
032c0     00 8A 1E F2 | 	cmp	local11, ##-2030043136 wcz
032c4     6C 00 90 CD |  if_b	jmp	#LR__0099
032c8     00 00 45 FF 
032cc     00 8A 1E F2 | 	cmp	local11, ##-1979711488 wcz
032d0     60 00 90 3D |  if_ae	jmp	#LR__0099
032d4                 | '       if kbdfront<>((kbdtail-1) //32)
032d4     04 0E 06 F1 | 	add	objptr, #4
032d8     07 81 02 FB | 	rdlong	local06, objptr
032dc     04 0E 86 F1 | 	sub	objptr, #4
032e0     40 7D 02 F6 | 	mov	local04, local06
032e4     01 7C 86 F1 | 	sub	local04, #1
032e8     3E 77 52 F6 | 	abs	local01, local04 wc
032ec     1F 76 06 F5 | 	and	local01, #31
032f0     3B 77 62 C6 |  if_b	neg	local01, local01
032f4     07 89 02 FB | 	rdlong	local10, objptr
032f8     3B 89 0A F2 | 	cmp	local10, local01 wz
032fc     34 00 90 AD |  if_e	jmp	#LR__0098
03300                 | '         kbdbuf[kbdfront]:=kbmreport
03300     07 7D 02 FB | 	rdlong	local04, objptr
03304     02 7C 66 F0 | 	shl	local04, #2
03308     18 0E 06 F1 | 	add	objptr, #24
0330c     07 7D 02 F1 | 	add	local04, objptr
03310     3E 8B 62 FC | 	wrlong	local11, local04
03314                 | '         kbdfront+=1
03314     18 0E 86 F1 | 	sub	objptr, #24
03318     07 81 02 FB | 	rdlong	local06, objptr
0331c     01 80 06 F1 | 	add	local06, #1
03320     07 81 62 FC | 	wrlong	local06, objptr
03324                 | '         kbdfront:=kbdfront // 32
03324     40 7D 52 F6 | 	abs	local04, local06 wc
03328     1F 7C 06 F5 | 	and	local04, #31
0332c     3E 7D 62 C6 |  if_b	neg	local04, local04
03330     07 7D 62 FC | 	wrlong	local04, objptr
03334                 | LR__0098
03334                 | LR__0099
03334                 | '     b:=(-1)
03334     01 7A 66 F6 | 	neg	local03, #1
03338                 | LR__0100
03338                 | ' 
03338                 | ' 
03338                 | '   if long[$30]==0
03338     30 7C 0E FB | 	rdlong	local04, #48 wz
0333c     5C 00 90 5D |  if_ne	jmp	#LR__0102
03340                 | '     if kbdfront<>kbdtail
03340     07 7D 02 FB | 	rdlong	local04, objptr
03344     04 0E 06 F1 | 	add	objptr, #4
03348     07 77 02 FB | 	rdlong	local01, objptr
0334c     04 0E 86 F1 | 	sub	objptr, #4
03350     3B 7D 0A F2 | 	cmp	local04, local01 wz
03354     44 00 90 AD |  if_e	jmp	#LR__0101
03358                 | '       long[$30]:=kbdbuf[kbdtail]
03358     04 0E 06 F1 | 	add	objptr, #4
0335c     07 7D 02 FB | 	rdlong	local04, objptr
03360     02 7C 66 F0 | 	shl	local04, #2
03364     14 0E 06 F1 | 	add	objptr, #20
03368     07 7D 02 F1 | 	add	local04, objptr
0336c     3E 89 02 FB | 	rdlong	local10, local04
03370     30 88 66 FC | 	wrlong	local10, #48
03374                 | '       kbdtail++
03374     14 0E 86 F1 | 	sub	objptr, #20
03378     07 89 02 FB | 	rdlong	local10, objptr
0337c     44 77 02 F6 | 	mov	local01, local10
03380     01 76 06 F1 | 	add	local01, #1
03384     07 77 62 FC | 	wrlong	local01, objptr
03388                 | '       kbdtail:= kbdtail // 32
03388     3B 7D 52 F6 | 	abs	local04, local01 wc
0338c     1F 7C 06 F5 | 	and	local04, #31
03390     3E 7D 62 C6 |  if_b	neg	local04, local04
03394     07 7D 62 FC | 	wrlong	local04, objptr
03398     04 0E 86 F1 | 	sub	objptr, #4
0339c                 | LR__0101
0339c                 | LR__0102
0339c                 | '       
0339c                 | '   if long[$34]==0
0339c     34 7C 0E FB | 	rdlong	local04, #52 wz
033a0     64 00 90 5D |  if_ne	jmp	#LR__0104
033a4                 | '     if mousefront<>mousetail
033a4     08 0E 06 F1 | 	add	objptr, #8
033a8     07 7D 02 FB | 	rdlong	local04, objptr
033ac     04 0E 06 F1 | 	add	objptr, #4
033b0     07 89 02 FB | 	rdlong	local10, objptr
033b4     0C 0E 86 F1 | 	sub	objptr, #12
033b8     44 77 02 F6 | 	mov	local01, local10
033bc     3B 7D 0A F2 | 	cmp	local04, local01 wz
033c0     44 00 90 AD |  if_e	jmp	#LR__0103
033c4                 | '       long[$34]:=mousebuf[mousetail]
033c4     0C 0E 06 F1 | 	add	objptr, #12
033c8     07 7D 02 FB | 	rdlong	local04, objptr
033cc     02 7C 66 F0 | 	shl	local04, #2
033d0     8C 0E 06 F1 | 	add	objptr, #140
033d4     07 7D 02 F1 | 	add	local04, objptr
033d8     3E 89 02 FB | 	rdlong	local10, local04
033dc     34 88 66 FC | 	wrlong	local10, #52
033e0                 | '       mousetail++
033e0     8C 0E 86 F1 | 	sub	objptr, #140
033e4     07 89 02 FB | 	rdlong	local10, objptr
033e8     44 77 02 F6 | 	mov	local01, local10
033ec     01 76 06 F1 | 	add	local01, #1
033f0     07 77 62 FC | 	wrlong	local01, objptr
033f4                 | '       mousetail:= mousetail // 128
033f4     3B 7D 52 F6 | 	abs	local04, local01 wc
033f8     7F 7C 06 F5 | 	and	local04, #127
033fc     3E 7D 62 C6 |  if_b	neg	local04, local04
03400     07 7D 62 FC | 	wrlong	local04, objptr
03404     0C 0E 86 F1 | 	sub	objptr, #12
03408                 | LR__0103
03408                 | LR__0104
03408                 | ' 
03408                 | '       
03408                 | '   if long[$38]==0
03408     38 7C 0E FB | 	rdlong	local04, #56 wz
0340c     60 FC 9F 5D |  if_ne	jmp	#LR__0083
03410                 | '     if midifront<>miditail
03410     10 0E 06 F1 | 	add	objptr, #16
03414     07 7D 02 FB | 	rdlong	local04, objptr
03418     04 0E 06 F1 | 	add	objptr, #4
0341c     07 89 02 FB | 	rdlong	local10, objptr
03420     14 0E 86 F1 | 	sub	objptr, #20
03424     44 77 02 F6 | 	mov	local01, local10
03428     3B 7D 0A F2 | 	cmp	local04, local01 wz
0342c     40 FC 9F AD |  if_e	jmp	#LR__0083
03430                 | '       long[$38]:=midibuf[miditail]
03430     14 0E 06 F1 | 	add	objptr, #20
03434     07 7D 02 FB | 	rdlong	local04, objptr
03438     02 7C 66 F0 | 	shl	local04, #2
0343c     01 00 00 FF 
03440     84 0E 06 F1 | 	add	objptr, ##644
03444     07 7D 02 F1 | 	add	local04, objptr
03448     3E 89 02 FB | 	rdlong	local10, local04
0344c     38 88 66 FC | 	wrlong	local10, #56
03450                 | '       miditail++
03450     01 00 00 FF 
03454     84 0E 86 F1 | 	sub	objptr, ##644
03458     07 89 02 FB | 	rdlong	local10, objptr
0345c     44 77 02 F6 | 	mov	local01, local10
03460     01 76 06 F1 | 	add	local01, #1
03464     07 77 62 FC | 	wrlong	local01, objptr
03468                 | '       miditail:= miditail // 32
03468     3B 7D 52 F6 | 	abs	local04, local01 wc
0346c     1F 7C 06 F5 | 	and	local04, #31
03470     3E 7D 62 C6 |  if_b	neg	local04, local04
03474     07 7D 62 FC | 	wrlong	local04, objptr
03478     14 0E 86 F1 | 	sub	objptr, #20
0347c     F0 FB 9F FD | 	jmp	#LR__0083
03480     AF F0 03 F6 | 	mov	ptra, fp
03484     BF 00 A0 FD | 	call	#popregs_
03488                 | _retrocog_spin2_serialcog_ret
03488     2D 00 64 FD | 	ret
0348c                 | 
0348c                 | '       
0348c                 | ' 
0348c                 | ' ''---------------------- Serial functions from jm_serial.spin2, modified
0348c                 | ' 
0348c                 | ' pub serial_start(rxpin, txpin, baud) | bitmode
0348c                 | _retrocog_spin2_serial_start
0348c     04 5A 05 F6 | 	mov	COUNT_, #4
03490     B0 00 A0 FD | 	call	#pushregs_
03494     36 77 02 F6 | 	mov	local01, arg01
03498     37 79 02 F6 | 	mov	local02, arg02
0349c                 | ' 
0349c                 | ' bitmode := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
0349c     14 6C 06 FB | 	rdlong	arg01, #20
034a0     10 6E C6 F9 | 	decod	arg02, #16
034a4     37 6D 02 FD | 	qmul	arg01, arg02
034a8     19 7A 62 FD | 	getqy	local03
034ac     18 7C 62 FD | 	getqx	local04
034b0     28 7A 62 FD | 	setq	local03
034b4     38 7D 12 FD | 	qdiv	local04, arg03
034b8     18 26 62 FD | 	getqx	result1
034bc     13 71 02 F6 | 	mov	arg03, result1
034c0     FE FF 7F FF 
034c4     00 70 06 F5 | 	and	arg03, ##-1024
034c8                 | ' bitmode |= 7                                                  ' set bits (8)
034c8     07 70 46 F5 | 	or	arg03, #7
034cc                 | ' pinstart(rxpin,P_ASYNC_RX,bitmode,0)
034cc     40 76 62 FD | 	dirl	local01
034d0     3B 7D 08 FC | 	wrpin	#62, local01
034d4     3B 71 12 FC | 	wxpin	arg03, local01
034d8     3B 01 28 FC | 	wypin	#0, local01
034dc     41 76 62 FD | 	dirh	local01
034e0                 | ' pinstart(txpin,P_ASYNC_TX|P_OE,bitmode,0)
034e0     40 78 62 FD | 	dirl	local02
034e4     3C F9 08 FC | 	wrpin	#124, local02
034e8     3C 71 12 FC | 	wxpin	arg03, local02
034ec     3C 01 28 FC | 	wypin	#0, local02
034f0     41 78 62 FD | 	dirh	local02
034f4     AF F0 03 F6 | 	mov	ptra, fp
034f8     BF 00 A0 FD | 	call	#popregs_
034fc                 | _retrocog_spin2_serial_start_ret
034fc     2D 00 64 FD | 	ret
03500                 | 
03500                 | ' 
03500                 | ' 
03500                 | ' pub rxcheck(pin) : rxbyte | check
03500                 | _retrocog_spin2_rxcheck
03500     03 5A 05 F6 | 	mov	COUNT_, #3
03504     B0 00 A0 FD | 	call	#pushregs_
03508     36 77 02 F6 | 	mov	local01, arg01
0350c                 | ' 
0350c                 | ' '' Check for serial input
0350c                 | ' '' -- returns -1 if nothing available
0350c                 | ' 
0350c                 | '   rxbyte := -1
0350c     01 78 66 F6 | 	neg	local02, #1
03510                 | '   check := pinr(pin)
03510     3B 6D 02 F6 | 	mov	arg01, local01
03514     08 04 B0 FD | 	call	#__system___pinread
03518     13 7B 0A F6 | 	mov	local03, result1 wz
0351c                 | '   if (check)
0351c                 | '     rxbyte := rdpin(pin) >> 24
0351c     00 78 06 56 |  if_ne	mov	local02, #0
03520     3B 79 8A 5A |  if_ne	rdpin	local02, local01
03524     18 78 46 50 |  if_ne	shr	local02, #24
03528     3C 27 02 F6 | 	mov	result1, local02
0352c     AF F0 03 F6 | 	mov	ptra, fp
03530     BF 00 A0 FD | 	call	#popregs_
03534                 | _retrocog_spin2_rxcheck_ret
03534     2D 00 64 FD | 	ret
03538                 | hubexit
03538     81 00 80 FD | 	jmp	#cogexit
0353c                 | 
0353c                 | __system___setbaud
0353c     14 CA 06 FB | 	rdlong	muldiva_, #20
03540     36 CD 02 F6 | 	mov	muldivb_, arg01
03544     D0 00 A0 FD | 	call	#divide_
03548     40 7C 64 FD | 	dirl	#62
0354c     40 7E 64 FD | 	dirl	#63
03550     0A CD 62 FC | 	wrlong	muldivb_, ptr___system__dat__
03554     10 CC 66 F0 | 	shl	muldivb_, #16
03558     07 6E 06 F6 | 	mov	arg02, #7
0355c     66 6F 02 F1 | 	add	arg02, muldivb_
03560     3E F8 0C FC | 	wrpin	#124, #62
03564     3E 6E 16 FC | 	wxpin	arg02, #62
03568     3F 7C 0C FC | 	wrpin	#62, #63
0356c     14 6E 06 F1 | 	add	arg02, #20
03570     3F 6E 16 FC | 	wxpin	arg02, #63
03574     41 7C 64 FD | 	dirh	#62
03578     41 7E 64 FD | 	dirh	#63
0357c                 | __system___setbaud_ret
0357c     2D 00 64 FD | 	ret
03580                 | 
03580                 | __system___txraw
03580     02 5A 05 F6 | 	mov	COUNT_, #2
03584     B0 00 A0 FD | 	call	#pushregs_
03588     36 77 02 F6 | 	mov	local01, arg01
0358c     0A 79 0A FB | 	rdlong	local02, ptr___system__dat__ wz
03590     0C 00 90 5D |  if_ne	jmp	#LR__0105
03594     C2 01 00 FF 
03598     00 6C 06 F6 | 	mov	arg01, ##230400
0359c     9C FF BF FD | 	call	#__system___setbaud
035a0                 | LR__0105
035a0     3E 76 26 FC | 	wypin	local01, #62
035a4     1F 02 64 FD | 	waitx	#1
035a8     5C CA 9F FE | 	loc	pa,	#(@LR__0107-@LR__0106)
035ac     93 00 A0 FD | 	call	#FCACHE_LOAD_
035b0                 | LR__0106
035b0     40 7C 74 FD | 	testp	#62 wc
035b4     F8 FF 9F 3D |  if_nc	jmp	#LR__0106
035b8                 | LR__0107
035b8     01 26 06 F6 | 	mov	result1, #1
035bc     AF F0 03 F6 | 	mov	ptra, fp
035c0     BF 00 A0 FD | 	call	#popregs_
035c4                 | __system___txraw_ret
035c4     2D 00 64 FD | 	ret
035c8                 | 
035c8                 | __system___rxraw
035c8     0B 5A 05 F6 | 	mov	COUNT_, #11
035cc     B0 00 A0 FD | 	call	#pushregs_
035d0     36 77 02 F6 | 	mov	local01, arg01
035d4     0A 79 0A FB | 	rdlong	local02, ptr___system__dat__ wz
035d8     0C 00 90 5D |  if_ne	jmp	#LR__0108
035dc     C2 01 00 FF 
035e0     00 6C 06 F6 | 	mov	arg01, ##230400
035e4     54 FF BF FD | 	call	#__system___setbaud
035e8                 | LR__0108
035e8     00 76 0E F2 | 	cmp	local01, #0 wz
035ec     18 00 90 AD |  if_e	jmp	#LR__0109
035f0     1A 7A 62 FD | 	getct	local03
035f4     14 7C 06 FB | 	rdlong	local04, #20
035f8     0A 7C 46 F0 | 	shr	local04, #10
035fc     3E 77 02 FD | 	qmul	local01, local04
03600     18 7E 62 FD | 	getqx	local05
03604     3F 7B 02 F1 | 	add	local03, local05
03608                 | LR__0109
03608     01 80 66 F6 | 	neg	local06, #1
0360c     00 82 06 F6 | 	mov	local07, #0
03610     04 14 06 F1 | 	add	ptr___system__dat__, #4
03614     0A 85 02 FB | 	rdlong	local08, ptr___system__dat__
03618     04 14 86 F1 | 	sub	ptr___system__dat__, #4
0361c                 | LR__0110
0361c     08 84 16 F4 | 	testb	local08, #8 wc
03620     09 84 76 F4 | 	testbn	local08, #9 andc
03624     0A 84 46 F0 | 	shr	local08, #10
03628     01 82 06 C6 |  if_b	mov	local07, #1
0362c     10 00 90 CD |  if_b	jmp	#LR__0111
03630     40 7E 6C FD | 	testp	#63 wz
03634     01 82 06 A6 |  if_e	mov	local07, #1
03638     3F 84 8E AA |  if_e	rdpin	local08, #63
0363c     04 84 46 A0 |  if_e	shr	local08, #4
03640                 | LR__0111
03640     00 78 06 F6 | 	mov	local02, #0
03644     00 82 0E F2 | 	cmp	local07, #0 wz
03648     01 78 66 56 |  if_ne	neg	local02, #1
0364c     00 86 06 F6 | 	mov	local09, #0
03650     00 7C 06 F6 | 	mov	local04, #0
03654     00 76 0E F2 | 	cmp	local01, #0 wz
03658     01 7C 66 56 |  if_ne	neg	local04, #1
0365c     00 7E 06 F6 | 	mov	local05, #0
03660     00 88 06 F6 | 	mov	local10, #0
03664     1A 8A 62 FD | 	getct	local11
03668     3D 8B 82 F1 | 	sub	local11, local03
0366c     00 8A 5E F2 | 	cmps	local11, #0 wcz
03670     01 88 66 C6 |  if_b	neg	local10, #1
03674     00 88 0E F2 | 	cmp	local10, #0 wz
03678     01 7E 66 56 |  if_ne	neg	local05, #1
0367c     3F 7D CA F7 | 	test	local04, local05 wz
03680     01 86 66 56 |  if_ne	neg	local09, #1
03684     43 79 4A F5 | 	or	local02, local09 wz
03688     90 FF 9F AD |  if_e	jmp	#LR__0110
0368c     00 82 0E F2 | 	cmp	local07, #0 wz
03690     42 81 02 56 |  if_ne	mov	local06, local08
03694     FF 80 06 55 |  if_ne	and	local06, #255
03698     04 14 06 F1 | 	add	ptr___system__dat__, #4
0369c     0A 85 62 FC | 	wrlong	local08, ptr___system__dat__
036a0     04 14 86 F1 | 	sub	ptr___system__dat__, #4
036a4     40 27 02 F6 | 	mov	result1, local06
036a8     AF F0 03 F6 | 	mov	ptra, fp
036ac     BF 00 A0 FD | 	call	#popregs_
036b0                 | __system___rxraw_ret
036b0     2D 00 64 FD | 	ret
036b4                 | 
036b4                 | __system____builtin_memmove
036b4     36 2D 02 F6 | 	mov	_var01, arg01
036b8     37 6D 5A F2 | 	cmps	arg01, arg02 wcz
036bc     50 00 90 3D |  if_ae	jmp	#LR__0119
036c0     5C C9 9F FE | 	loc	pa,	#(@LR__0113-@LR__0112)
036c4     93 00 A0 FD | 	call	#FCACHE_LOAD_
036c8                 | LR__0112
036c8     03 70 5E F2 | 	cmps	arg03, #3 wcz
036cc     18 00 90 ED |  if_be	jmp	#LR__0114
036d0     37 2F 02 FB | 	rdlong	_var02, arg02
036d4     36 2F 62 FC | 	wrlong	_var02, arg01
036d8     04 6C 06 F1 | 	add	arg01, #4
036dc     04 6E 06 F1 | 	add	arg02, #4
036e0     04 70 86 F1 | 	sub	arg03, #4
036e4     E0 FF 9F FD | 	jmp	#LR__0112
036e8                 | LR__0113
036e8                 | LR__0114
036e8     38 31 0A F6 | 	mov	_var03, arg03 wz
036ec     4C 00 90 AD |  if_e	jmp	#LR__0125
036f0     20 C9 9F FE | 	loc	pa,	#(@LR__0117-@LR__0115)
036f4     93 00 A0 FD | 	call	#FCACHE_LOAD_
036f8                 | LR__0115
036f8     18 09 D8 FC | 	rep	@LR__0118, _var03
036fc                 | LR__0116
036fc     37 2F C2 FA | 	rdbyte	_var02, arg02
03700     36 2F 42 FC | 	wrbyte	_var02, arg01
03704     01 6C 06 F1 | 	add	arg01, #1
03708     01 6E 06 F1 | 	add	arg02, #1
0370c                 | LR__0117
0370c                 | LR__0118
0370c     2C 00 90 FD | 	jmp	#LR__0125
03710                 | LR__0119
03710     38 6D 02 F1 | 	add	arg01, arg03
03714     38 6F 02 F1 | 	add	arg02, arg03
03718     38 33 0A F6 | 	mov	_var04, arg03 wz
0371c     1C 00 90 AD |  if_e	jmp	#LR__0124
03720     F0 C8 9F FE | 	loc	pa,	#(@LR__0122-@LR__0120)
03724     93 00 A0 FD | 	call	#FCACHE_LOAD_
03728                 | LR__0120
03728     19 09 D8 FC | 	rep	@LR__0123, _var04
0372c                 | LR__0121
0372c     01 6C 86 F1 | 	sub	arg01, #1
03730     01 6E 86 F1 | 	sub	arg02, #1
03734     37 2F C2 FA | 	rdbyte	_var02, arg02
03738     36 2F 42 FC | 	wrbyte	_var02, arg01
0373c                 | LR__0122
0373c                 | LR__0123
0373c                 | LR__0124
0373c                 | LR__0125
0373c     16 27 02 F6 | 	mov	result1, _var01
03740                 | __system____builtin_memmove_ret
03740     2D 00 64 FD | 	ret
03744                 | 
03744                 | __system__longmove
03744     36 2D 02 F6 | 	mov	_var01, arg01
03748     37 6D 5A F2 | 	cmps	arg01, arg02 wcz
0374c     28 00 90 3D |  if_ae	jmp	#LR__0130
03750     38 2F 0A F6 | 	mov	_var02, arg03 wz
03754     5C 00 90 AD |  if_e	jmp	#LR__0136
03758     B8 C8 9F FE | 	loc	pa,	#(@LR__0128-@LR__0126)
0375c     93 00 A0 FD | 	call	#FCACHE_LOAD_
03760                 | LR__0126
03760     17 09 D8 FC | 	rep	@LR__0129, _var02
03764                 | LR__0127
03764     37 31 02 FB | 	rdlong	_var03, arg02
03768     36 31 62 FC | 	wrlong	_var03, arg01
0376c     04 6C 06 F1 | 	add	arg01, #4
03770     04 6E 06 F1 | 	add	arg02, #4
03774                 | LR__0128
03774                 | LR__0129
03774     3C 00 90 FD | 	jmp	#LR__0136
03778                 | LR__0130
03778     38 33 02 F6 | 	mov	_var04, arg03
0377c     02 32 66 F0 | 	shl	_var04, #2
03780     19 6D 02 F1 | 	add	arg01, _var04
03784     38 33 02 F6 | 	mov	_var04, arg03
03788     02 32 66 F0 | 	shl	_var04, #2
0378c     19 6F 02 F1 | 	add	arg02, _var04
03790     38 35 0A F6 | 	mov	_var05, arg03 wz
03794     1C 00 90 AD |  if_e	jmp	#LR__0135
03798     78 C8 9F FE | 	loc	pa,	#(@LR__0133-@LR__0131)
0379c     93 00 A0 FD | 	call	#FCACHE_LOAD_
037a0                 | LR__0131
037a0     1A 09 D8 FC | 	rep	@LR__0134, _var05
037a4                 | LR__0132
037a4     04 6C 86 F1 | 	sub	arg01, #4
037a8     04 6E 86 F1 | 	sub	arg02, #4
037ac     37 31 02 FB | 	rdlong	_var03, arg02
037b0     36 31 62 FC | 	wrlong	_var03, arg01
037b4                 | LR__0133
037b4                 | LR__0134
037b4                 | LR__0135
037b4                 | LR__0136
037b4     16 27 02 F6 | 	mov	result1, _var01
037b8                 | __system__longmove_ret
037b8     2D 00 64 FD | 	ret
037bc                 | 
037bc                 | __system____topofstack
037bc     00 5A 05 F6 | 	mov	COUNT_, #0
037c0     B0 00 A0 FD | 	call	#pushregs_
037c4     08 F0 07 F1 | 	add	ptra, #8
037c8     04 5E 05 F1 | 	add	fp, #4
037cc     AF 6C 62 FC | 	wrlong	arg01, fp
037d0     AF 26 02 F6 | 	mov	result1, fp
037d4     04 5E 85 F1 | 	sub	fp, #4
037d8     AF F0 03 F6 | 	mov	ptra, fp
037dc     BF 00 A0 FD | 	call	#popregs_
037e0                 | __system____topofstack_ret
037e0     2D 00 64 FD | 	ret
037e4                 | 
037e4                 | __system___make_methodptr
037e4     04 5A 05 F6 | 	mov	COUNT_, #4
037e8     B0 00 A0 FD | 	call	#pushregs_
037ec     36 77 02 F6 | 	mov	local01, arg01
037f0     37 79 02 F6 | 	mov	local02, arg02
037f4     08 6C 06 F6 | 	mov	arg01, #8
037f8     DC 0B B0 FD | 	call	#__system___gc_alloc_managed
037fc     13 7B 0A F6 | 	mov	local03, result1 wz
03800     10 00 90 AD |  if_e	jmp	#LR__0137
03804     3D 77 62 FC | 	wrlong	local01, local03
03808     3D 7D 02 F6 | 	mov	local04, local03
0380c     04 7C 06 F1 | 	add	local04, #4
03810     3E 79 62 FC | 	wrlong	local02, local04
03814                 | LR__0137
03814     3D 27 02 F6 | 	mov	result1, local03
03818     AF F0 03 F6 | 	mov	ptra, fp
0381c     BF 00 A0 FD | 	call	#popregs_
03820                 | __system___make_methodptr_ret
03820     2D 00 64 FD | 	ret
03824                 | 
03824                 | __system___lockmem
03824     02 5A 05 F6 | 	mov	COUNT_, #2
03828     B0 00 A0 FD | 	call	#pushregs_
0382c     01 26 62 FD | 	cogid	result1
03830     13 77 02 F6 | 	mov	local01, result1
03834     00 77 06 F1 | 	add	local01, #256
03838                 | LR__0138
03838     36 79 0A FB | 	rdlong	local02, arg01 wz
0383c     36 77 62 AC |  if_e	wrlong	local01, arg01
03840     36 79 02 AB |  if_e	rdlong	local02, arg01
03844     36 79 02 AB |  if_e	rdlong	local02, arg01
03848     3B 79 0A F2 | 	cmp	local02, local01 wz
0384c     E8 FF 9F 5D |  if_ne	jmp	#LR__0138
03850     AF F0 03 F6 | 	mov	ptra, fp
03854     BF 00 A0 FD | 	call	#popregs_
03858                 | __system___lockmem_ret
03858     2D 00 64 FD | 	ret
0385c                 | 
0385c                 | __system___tx
0385c     02 5A 05 F6 | 	mov	COUNT_, #2
03860     B0 00 A0 FD | 	call	#pushregs_
03864     36 77 02 F6 | 	mov	local01, arg01
03868     0A 76 0E F2 | 	cmp	local01, #10 wz
0386c     20 00 90 5D |  if_ne	jmp	#LR__0139
03870     08 14 06 F1 | 	add	ptr___system__dat__, #8
03874     0A 79 02 FB | 	rdlong	local02, ptr___system__dat__
03878     08 14 86 F1 | 	sub	ptr___system__dat__, #8
0387c     02 78 CE F7 | 	test	local02, #2 wz
03880     0C 00 90 AD |  if_e	jmp	#LR__0139
03884     0D 78 06 F6 | 	mov	local02, #13
03888     0D 6C 06 F6 | 	mov	arg01, #13
0388c     F0 FC BF FD | 	call	#__system___txraw
03890                 | LR__0139
03890     3B 6D 02 F6 | 	mov	arg01, local01
03894     E8 FC BF FD | 	call	#__system___txraw
03898     AF F0 03 F6 | 	mov	ptra, fp
0389c     BF 00 A0 FD | 	call	#popregs_
038a0                 | __system___tx_ret
038a0     2D 00 64 FD | 	ret
038a4                 | 
038a4                 | __system___rx
038a4     02 5A 05 F6 | 	mov	COUNT_, #2
038a8     B0 00 A0 FD | 	call	#pushregs_
038ac                 | LR__0140
038ac     00 6C 06 F6 | 	mov	arg01, #0
038b0     14 FD BF FD | 	call	#__system___rxraw
038b4     13 77 02 F6 | 	mov	local01, result1
038b8     FF FF 7F FF 
038bc     FF 77 0E F2 | 	cmp	local01, ##-1 wz
038c0     E8 FF 9F AD |  if_e	jmp	#LR__0140
038c4     0D 76 0E F2 | 	cmp	local01, #13 wz
038c8     14 00 90 5D |  if_ne	jmp	#LR__0141
038cc     08 14 06 F1 | 	add	ptr___system__dat__, #8
038d0     0A 79 02 FB | 	rdlong	local02, ptr___system__dat__
038d4     08 14 86 F1 | 	sub	ptr___system__dat__, #8
038d8     02 78 CE F7 | 	test	local02, #2 wz
038dc     0A 76 06 56 |  if_ne	mov	local01, #10
038e0                 | LR__0141
038e0     08 14 06 F1 | 	add	ptr___system__dat__, #8
038e4     0A 79 02 FB | 	rdlong	local02, ptr___system__dat__
038e8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
038ec     01 78 CE F7 | 	test	local02, #1 wz
038f0     1C 00 90 AD |  if_e	jmp	#LR__0144
038f4     7F 76 0E F2 | 	cmp	local01, #127 wz
038f8     0C 00 90 5D |  if_ne	jmp	#LR__0142
038fc     08 6C 06 F6 | 	mov	arg01, #8
03900     58 FF BF FD | 	call	#__system___tx
03904     08 00 90 FD | 	jmp	#LR__0143
03908                 | LR__0142
03908     3B 6D 02 F6 | 	mov	arg01, local01
0390c     4C FF BF FD | 	call	#__system___tx
03910                 | LR__0143
03910                 | LR__0144
03910     3B 27 02 F6 | 	mov	result1, local01
03914     AF F0 03 F6 | 	mov	ptra, fp
03918     BF 00 A0 FD | 	call	#popregs_
0391c                 | __system___rx_ret
0391c     2D 00 64 FD | 	ret
03920                 | 
03920                 | __system___pinread
03920     20 6C CE F7 | 	test	arg01, #32 wz
03924     FF 2D 02 56 |  if_ne	mov	_var01, inb
03928     FE 2D 02 A6 |  if_e	mov	_var01, ina
0392c     36 2D 42 F0 | 	shr	_var01, arg01
03930     06 6C 46 F0 | 	shr	arg01, #6
03934     36 2D 42 F7 | 	zerox	_var01, arg01
03938     16 27 02 F6 | 	mov	result1, _var01
0393c                 | __system___pinread_ret
0393c     2D 00 64 FD | 	ret
03940                 | 
03940                 | __system___waitms
03940     03 5A 05 F6 | 	mov	COUNT_, #3
03944     B0 00 A0 FD | 	call	#pushregs_
03948     36 77 02 F6 | 	mov	local01, arg01
0394c     14 78 06 FB | 	rdlong	local02, #20
03950     C4 C6 9F FE | 	loc	pa,	#(@LR__0146-@LR__0145)
03954     93 00 A0 FD | 	call	#FCACHE_LOAD_
03958                 | LR__0145
03958     01 00 00 FF 
0395c     E8 77 5E F2 | 	cmps	local01, ##1000 wcz
03960     1F 78 62 1D |  if_a	waitx	local02
03964     01 00 00 1F 
03968     E8 77 86 11 |  if_a	sub	local01, ##1000
0396c     E8 FF 9F 1D |  if_a	jmp	#LR__0145
03970                 | LR__0146
03970     0C 14 06 F1 | 	add	ptr___system__dat__, #12
03974     0A 7B 0A FB | 	rdlong	local03, ptr___system__dat__ wz
03978     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
0397c     20 00 90 5D |  if_ne	jmp	#LR__0147
03980     3C CB 02 F6 | 	mov	muldiva_, local02
03984     01 00 00 FF 
03988     E8 CD 06 F6 | 	mov	muldivb_, ##1000
0398c     CC 00 A0 FD | 	call	#unsdivide_
03990     66 7B 02 F6 | 	mov	local03, muldivb_
03994     0C 14 06 F1 | 	add	ptr___system__dat__, #12
03998     0A CD 62 FC | 	wrlong	muldivb_, ptr___system__dat__
0399c     0C 14 86 F1 | 	sub	ptr___system__dat__, #12
039a0                 | LR__0147
039a0     00 76 5E F2 | 	cmps	local01, #0 wcz
039a4     3D 77 02 1D |  if_a	qmul	local01, local03
039a8     18 6C 62 1D |  if_a	getqx	arg01
039ac     1F 6C 62 1D |  if_a	waitx	arg01
039b0     AF F0 03 F6 | 	mov	ptra, fp
039b4     BF 00 A0 FD | 	call	#popregs_
039b8                 | __system___waitms_ret
039b8     2D 00 64 FD | 	ret
039bc                 | 
039bc                 | __system___basic_open
039bc     05 5A 05 F6 | 	mov	COUNT_, #5
039c0     B0 00 A0 FD | 	call	#pushregs_
039c4     37 77 02 F6 | 	mov	local01, arg02
039c8     38 79 02 F6 | 	mov	local02, arg03
039cc     39 7B 02 F6 | 	mov	local03, arg04
039d0     3C 12 B0 FD | 	call	#__system____getftab
039d4     13 7D 0A F6 | 	mov	local04, result1 wz
039d8     18 00 90 5D |  if_ne	jmp	#LR__0148
039dc     03 6D 02 F6 | 	mov	arg01, abortchain
039e0     0C 6E 06 F6 | 	mov	arg02, #12
039e4     01 70 06 F6 | 	mov	arg03, #1
039e8     F0 00 A0 FD | 	call	#__longjmp
039ec     01 26 66 F6 | 	neg	result1, #1
039f0     70 00 90 FD | 	jmp	#LR__0152
039f4                 | LR__0148
039f4     00 76 0E F2 | 	cmp	local01, #0 wz
039f8     48 00 90 AD |  if_e	jmp	#LR__0150
039fc     04 6C 06 F6 | 	mov	arg01, #4
03a00     D4 09 B0 FD | 	call	#__system___gc_alloc_managed
03a04     13 7F 0A F6 | 	mov	local05, result1 wz
03a08     18 00 90 5D |  if_ne	jmp	#LR__0149
03a0c     03 6D 02 F6 | 	mov	arg01, abortchain
03a10     07 6E 06 F6 | 	mov	arg02, #7
03a14     01 70 06 F6 | 	mov	arg03, #1
03a18     F0 00 A0 FD | 	call	#__longjmp
03a1c     01 26 66 F6 | 	neg	result1, #1
03a20     40 00 90 FD | 	jmp	#LR__0152
03a24                 | LR__0149
03a24     3F 77 62 FC | 	wrlong	local01, local05
03a28     08 6F 02 F6 | 	mov	arg02, ptr___struct___bas_wrap_sender_tx_
03a2c     3F 6D 02 F6 | 	mov	arg01, local05
03a30     B0 FD BF FD | 	call	#__system___make_methodptr
03a34     18 7C 06 F1 | 	add	local04, #24
03a38     3E 27 62 FC | 	wrlong	result1, local04
03a3c     18 7C 86 F1 | 	sub	local04, #24
03a40     0C 00 90 FD | 	jmp	#LR__0151
03a44                 | LR__0150
03a44     18 7C 06 F1 | 	add	local04, #24
03a48     3E 77 62 FC | 	wrlong	local01, local04
03a4c     18 7C 86 F1 | 	sub	local04, #24
03a50                 | LR__0151
03a50     1C 7C 06 F1 | 	add	local04, #28
03a54     3E 79 62 FC | 	wrlong	local02, local04
03a58     04 7C 06 F1 | 	add	local04, #4
03a5c     3E 7B 62 FC | 	wrlong	local03, local04
03a60     00 26 06 F6 | 	mov	result1, #0
03a64                 | LR__0152
03a64     AF F0 03 F6 | 	mov	ptra, fp
03a68     BF 00 A0 FD | 	call	#popregs_
03a6c                 | __system___basic_open_ret
03a6c     2D 00 64 FD | 	ret
03a70                 | 
03a70                 | __system___basic_print_char
03a70     05 5A 05 F6 | 	mov	COUNT_, #5
03a74     B0 00 A0 FD | 	call	#pushregs_
03a78     37 77 02 F6 | 	mov	local01, arg02
03a7c     58 13 B0 FD | 	call	#__system___gettxfunc
03a80     13 79 0A F6 | 	mov	local02, result1 wz
03a84     00 26 06 A6 |  if_e	mov	result1, #0
03a88     24 00 90 AD |  if_e	jmp	#LR__0153
03a8c     3C 7B 02 FB | 	rdlong	local03, local02
03a90     04 78 06 F1 | 	add	local02, #4
03a94     3C 7D 02 FB | 	rdlong	local04, local02
03a98     3B 6D 02 F6 | 	mov	arg01, local01
03a9c     07 7F 02 F6 | 	mov	local05, objptr
03aa0     3D 0F 02 F6 | 	mov	objptr, local03
03aa4     2D 7C 62 FD | 	call	local04
03aa8     3F 0F 02 F6 | 	mov	objptr, local05
03aac     01 26 06 F6 | 	mov	result1, #1
03ab0                 | LR__0153
03ab0     AF F0 03 F6 | 	mov	ptra, fp
03ab4     BF 00 A0 FD | 	call	#popregs_
03ab8                 | __system___basic_print_char_ret
03ab8     2D 00 64 FD | 	ret
03abc                 | 
03abc                 | __system___basic_print_string
03abc     03 5A 05 F6 | 	mov	COUNT_, #3
03ac0     B0 00 A0 FD | 	call	#pushregs_
03ac4     37 77 02 F6 | 	mov	local01, arg02
03ac8     38 79 02 F6 | 	mov	local02, arg03
03acc     08 13 B0 FD | 	call	#__system___gettxfunc
03ad0     13 7B 0A F6 | 	mov	local03, result1 wz
03ad4     00 26 06 A6 |  if_e	mov	result1, #0
03ad8     1C 00 90 AD |  if_e	jmp	#LR__0154
03adc     00 76 0E F2 | 	cmp	local01, #0 wz
03ae0     00 26 06 A6 |  if_e	mov	result1, #0
03ae4     10 00 90 AD |  if_e	jmp	#LR__0154
03ae8     3D 6D 02 F6 | 	mov	arg01, local03
03aec     3C 6F 02 F6 | 	mov	arg02, local02
03af0     3B 71 02 F6 | 	mov	arg03, local01
03af4     F8 00 B0 FD | 	call	#__system___fmtstr
03af8                 | LR__0154
03af8     AF F0 03 F6 | 	mov	ptra, fp
03afc     BF 00 A0 FD | 	call	#popregs_
03b00                 | __system___basic_print_string_ret
03b00     2D 00 64 FD | 	ret
03b04                 | 
03b04                 | __system___basic_print_integer
03b04     04 5A 05 F6 | 	mov	COUNT_, #4
03b08     B0 00 A0 FD | 	call	#pushregs_
03b0c     37 77 02 F6 | 	mov	local01, arg02
03b10     38 79 02 F6 | 	mov	local02, arg03
03b14     39 7B 02 F6 | 	mov	local03, arg04
03b18     BC 12 B0 FD | 	call	#__system___gettxfunc
03b1c     13 7D 0A F6 | 	mov	local04, result1 wz
03b20     00 26 06 A6 |  if_e	mov	result1, #0
03b24     14 00 90 AD |  if_e	jmp	#LR__0155
03b28     3E 6D 02 F6 | 	mov	arg01, local04
03b2c     3C 6F 02 F6 | 	mov	arg02, local02
03b30     3B 71 02 F6 | 	mov	arg03, local01
03b34     3D 73 02 F6 | 	mov	arg04, local03
03b38     AC 01 B0 FD | 	call	#__system___fmtnum
03b3c                 | LR__0155
03b3c     AF F0 03 F6 | 	mov	ptra, fp
03b40     BF 00 A0 FD | 	call	#popregs_
03b44                 | __system___basic_print_integer_ret
03b44     2D 00 64 FD | 	ret
03b48                 | 
03b48                 | __system___basic_print_unsigned
03b48     04 5A 05 F6 | 	mov	COUNT_, #4
03b4c     B0 00 A0 FD | 	call	#pushregs_
03b50     37 77 02 F6 | 	mov	local01, arg02
03b54     38 79 02 F6 | 	mov	local02, arg03
03b58     39 7B 02 F6 | 	mov	local03, arg04
03b5c     78 12 B0 FD | 	call	#__system___gettxfunc
03b60     13 7D 0A F6 | 	mov	local04, result1 wz
03b64     00 26 06 A6 |  if_e	mov	result1, #0
03b68     18 00 90 AD |  if_e	jmp	#LR__0156
03b6c     3A 78 26 F4 | 	bith	local02, #58
03b70     3E 6D 02 F6 | 	mov	arg01, local04
03b74     3C 6F 02 F6 | 	mov	arg02, local02
03b78     3B 71 02 F6 | 	mov	arg03, local01
03b7c     3D 73 02 F6 | 	mov	arg04, local03
03b80     64 01 B0 FD | 	call	#__system___fmtnum
03b84                 | LR__0156
03b84     AF F0 03 F6 | 	mov	ptra, fp
03b88     BF 00 A0 FD | 	call	#popregs_
03b8c                 | __system___basic_print_unsigned_ret
03b8c     2D 00 64 FD | 	ret
03b90                 | 
03b90                 | __system___fmtchar
03b90     00 5A 05 F6 | 	mov	COUNT_, #0
03b94     B0 00 A0 FD | 	call	#pushregs_
03b98     14 F0 07 F1 | 	add	ptra, #20
03b9c     04 5E 05 F1 | 	add	fp, #4
03ba0     AF 6C 62 FC | 	wrlong	arg01, fp
03ba4     04 5E 05 F1 | 	add	fp, #4
03ba8     AF 6E 62 FC | 	wrlong	arg02, fp
03bac     04 5E 05 F1 | 	add	fp, #4
03bb0     AF 70 62 FC | 	wrlong	arg03, fp
03bb4     04 5E 05 F1 | 	add	fp, #4
03bb8     AF 70 42 FC | 	wrbyte	arg03, fp
03bbc     01 5E 05 F1 | 	add	fp, #1
03bc0     AF 00 48 FC | 	wrbyte	#0, fp
03bc4     0D 5E 85 F1 | 	sub	fp, #13
03bc8     AF 6C 02 FB | 	rdlong	arg01, fp
03bcc     04 5E 05 F1 | 	add	fp, #4
03bd0     AF 6E 02 FB | 	rdlong	arg02, fp
03bd4     08 5E 05 F1 | 	add	fp, #8
03bd8     AF 70 02 F6 | 	mov	arg03, fp
03bdc     10 5E 85 F1 | 	sub	fp, #16
03be0     0C 00 B0 FD | 	call	#__system___fmtstr
03be4     AF F0 03 F6 | 	mov	ptra, fp
03be8     BF 00 A0 FD | 	call	#popregs_
03bec                 | __system___fmtchar_ret
03bec     2D 00 64 FD | 	ret
03bf0                 | 
03bf0                 | __system___fmtstr
03bf0     0E 5A 05 F6 | 	mov	COUNT_, #14
03bf4     B0 00 A0 FD | 	call	#pushregs_
03bf8     36 77 02 F6 | 	mov	local01, arg01
03bfc     37 79 02 F6 | 	mov	local02, arg02
03c00     38 7B 02 F6 | 	mov	local03, arg03
03c04     3C 7D 02 F6 | 	mov	local04, local02
03c08     FF 7C 06 F5 | 	and	local04, #255
03c0c     3D 6D 02 F6 | 	mov	arg01, local03
03c10     00 7E 06 F6 | 	mov	local05, #0
03c14     F8 C3 9F FE | 	loc	pa,	#(@LR__0158-@LR__0157)
03c18     93 00 A0 FD | 	call	#FCACHE_LOAD_
03c1c                 | LR__0157
03c1c     36 81 CA FA | 	rdbyte	local06, arg01 wz
03c20     01 7E 06 51 |  if_ne	add	local05, #1
03c24     01 6C 06 51 |  if_ne	add	arg01, #1
03c28     F0 FF 9F 5D |  if_ne	jmp	#LR__0157
03c2c                 | LR__0158
03c2c     3F 27 02 F6 | 	mov	result1, local05
03c30     13 83 02 F6 | 	mov	local07, result1
03c34     00 7C 0E F2 | 	cmp	local04, #0 wz
03c38     04 00 90 AD |  if_e	jmp	#LR__0159
03c3c     3E 83 7A F3 | 	fles	local07, local04 wcz
03c40                 | LR__0159
03c40     3B 6D 02 F6 | 	mov	arg01, local01
03c44     3C 6F 02 F6 | 	mov	arg02, local02
03c48     41 71 02 F6 | 	mov	arg03, local07
03c4c     02 72 06 F6 | 	mov	arg04, #2
03c50     34 10 B0 FD | 	call	#__system___fmtpad
03c54     13 85 02 F6 | 	mov	local08, result1
03c58     00 84 5E F2 | 	cmps	local08, #0 wcz
03c5c     42 27 02 C6 |  if_b	mov	result1, local08
03c60     78 00 90 CD |  if_b	jmp	#LR__0162
03c64     00 86 06 F6 | 	mov	local09, #0
03c68                 | LR__0160
03c68     41 87 5A F2 | 	cmps	local09, local07 wcz
03c6c     44 00 90 3D |  if_ae	jmp	#LR__0161
03c70     3B 89 02 F6 | 	mov	local10, local01
03c74     44 8B 02 FB | 	rdlong	local11, local10
03c78     04 88 06 F1 | 	add	local10, #4
03c7c     44 8D 02 FB | 	rdlong	local12, local10
03c80     3D 6D C2 FA | 	rdbyte	arg01, local03
03c84     07 8F 02 F6 | 	mov	local13, objptr
03c88     45 0F 02 F6 | 	mov	objptr, local11
03c8c     01 7A 06 F1 | 	add	local03, #1
03c90     2D 8C 62 FD | 	call	local12
03c94     47 0F 02 F6 | 	mov	objptr, local13
03c98     13 91 02 F6 | 	mov	local14, result1
03c9c     00 90 5E F2 | 	cmps	local14, #0 wcz
03ca0     48 27 02 C6 |  if_b	mov	result1, local14
03ca4     34 00 90 CD |  if_b	jmp	#LR__0162
03ca8     48 85 02 F1 | 	add	local08, local14
03cac     01 86 06 F1 | 	add	local09, #1
03cb0     B4 FF 9F FD | 	jmp	#LR__0160
03cb4                 | LR__0161
03cb4     3B 6D 02 F6 | 	mov	arg01, local01
03cb8     3C 6F 02 F6 | 	mov	arg02, local02
03cbc     41 71 02 F6 | 	mov	arg03, local07
03cc0     01 72 06 F6 | 	mov	arg04, #1
03cc4     C0 0F B0 FD | 	call	#__system___fmtpad
03cc8     13 91 02 F6 | 	mov	local14, result1
03ccc     00 90 5E F2 | 	cmps	local14, #0 wcz
03cd0     48 27 02 C6 |  if_b	mov	result1, local14
03cd4     48 85 02 31 |  if_ae	add	local08, local14
03cd8     42 27 02 36 |  if_ae	mov	result1, local08
03cdc                 | LR__0162
03cdc     AF F0 03 F6 | 	mov	ptra, fp
03ce0     BF 00 A0 FD | 	call	#popregs_
03ce4                 | __system___fmtstr_ret
03ce4     2D 00 64 FD | 	ret
03ce8                 | 
03ce8                 | __system___fmtnum
03ce8     07 5A 05 F6 | 	mov	COUNT_, #7
03cec     B0 00 A0 FD | 	call	#pushregs_
03cf0     70 F0 07 F1 | 	add	ptra, #112
03cf4     04 5E 05 F1 | 	add	fp, #4
03cf8     AF 6C 62 FC | 	wrlong	arg01, fp
03cfc     04 5E 05 F1 | 	add	fp, #4
03d00     AF 6E 62 FC | 	wrlong	arg02, fp
03d04     04 5E 05 F1 | 	add	fp, #4
03d08     AF 70 62 FC | 	wrlong	arg03, fp
03d0c     04 5E 05 F1 | 	add	fp, #4
03d10     AF 72 62 FC | 	wrlong	arg04, fp
03d14     04 5E 05 F1 | 	add	fp, #4
03d18     AF 76 02 F6 | 	mov	local01, fp
03d1c     44 5E 05 F1 | 	add	fp, #68
03d20     AF 76 62 FC | 	wrlong	local01, fp
03d24     04 5E 05 F1 | 	add	fp, #4
03d28     AF 00 68 FC | 	wrlong	#0, fp
03d2c     54 5E 85 F1 | 	sub	fp, #84
03d30     AF 76 02 FB | 	rdlong	local01, fp
03d34     10 76 46 F0 | 	shr	local01, #16
03d38     3F 76 06 F5 | 	and	local01, #63
03d3c     58 5E 05 F1 | 	add	fp, #88
03d40     AF 76 62 FC | 	wrlong	local01, fp
03d44     58 5E 85 F1 | 	sub	fp, #88
03d48     AF 76 02 FB | 	rdlong	local01, fp
03d4c     FF 76 06 F5 | 	and	local01, #255
03d50     5C 5E 05 F1 | 	add	fp, #92
03d54     AF 76 62 FC | 	wrlong	local01, fp
03d58     5C 5E 85 F1 | 	sub	fp, #92
03d5c     AF 76 02 FB | 	rdlong	local01, fp
03d60     1A 76 46 F0 | 	shr	local01, #26
03d64     03 76 06 F5 | 	and	local01, #3
03d68     60 5E 05 F1 | 	add	fp, #96
03d6c     AF 76 62 FC | 	wrlong	local01, fp
03d70     08 5E 85 F1 | 	sub	fp, #8
03d74     AF 76 02 FB | 	rdlong	local01, fp
03d78     60 5E 85 F1 | 	sub	fp, #96
03d7c     00 76 5E F2 | 	cmps	local01, #0 wcz
03d80     14 00 90 ED |  if_be	jmp	#LR__0163
03d84     60 5E 05 F1 | 	add	fp, #96
03d88     AF 76 02 FB | 	rdlong	local01, fp
03d8c     01 76 86 F1 | 	sub	local01, #1
03d90     AF 76 62 FC | 	wrlong	local01, fp
03d94     60 5E 85 F1 | 	sub	fp, #96
03d98                 | LR__0163
03d98     64 5E 05 F1 | 	add	fp, #100
03d9c     AF 78 02 FB | 	rdlong	local02, fp
03da0     64 5E 85 F1 | 	sub	fp, #100
03da4     40 78 5E F2 | 	cmps	local02, #64 wcz
03da8     14 00 90 1D |  if_a	jmp	#LR__0164
03dac     64 5E 05 F1 | 	add	fp, #100
03db0     AF 7A 02 FB | 	rdlong	local03, fp
03db4     64 5E 85 F1 | 	sub	fp, #100
03db8     3D 7D 0A F6 | 	mov	local04, local03 wz
03dbc     0C 00 90 5D |  if_ne	jmp	#LR__0165
03dc0                 | LR__0164
03dc0     64 5E 05 F1 | 	add	fp, #100
03dc4     AF 80 68 FC | 	wrlong	#64, fp
03dc8     64 5E 85 F1 | 	sub	fp, #100
03dcc                 | LR__0165
03dcc     68 5E 05 F1 | 	add	fp, #104
03dd0     AF 76 02 FB | 	rdlong	local01, fp
03dd4     68 5E 85 F1 | 	sub	fp, #104
03dd8     03 76 0E F2 | 	cmp	local01, #3 wz
03ddc     10 00 90 5D |  if_ne	jmp	#LR__0166
03de0     68 5E 05 F1 | 	add	fp, #104
03de4     AF 00 68 FC | 	wrlong	#0, fp
03de8     68 5E 85 F1 | 	sub	fp, #104
03dec     30 00 90 FD | 	jmp	#LR__0168
03df0                 | LR__0166
03df0     0C 5E 05 F1 | 	add	fp, #12
03df4     AF 76 02 FB | 	rdlong	local01, fp
03df8     0C 5E 85 F1 | 	sub	fp, #12
03dfc     00 76 5E F2 | 	cmps	local01, #0 wcz
03e00     1C 00 90 3D |  if_ae	jmp	#LR__0167
03e04     68 5E 05 F1 | 	add	fp, #104
03e08     AF 08 68 FC | 	wrlong	#4, fp
03e0c     5C 5E 85 F1 | 	sub	fp, #92
03e10     AF 76 02 FB | 	rdlong	local01, fp
03e14     3B 77 62 F6 | 	neg	local01, local01
03e18     AF 76 62 FC | 	wrlong	local01, fp
03e1c     0C 5E 85 F1 | 	sub	fp, #12
03e20                 | LR__0167
03e20                 | LR__0168
03e20     68 5E 05 F1 | 	add	fp, #104
03e24     AF 76 0A FB | 	rdlong	local01, fp wz
03e28     68 5E 85 F1 | 	sub	fp, #104
03e2c     EC 00 90 AD |  if_e	jmp	#LR__0175
03e30     5C 5E 05 F1 | 	add	fp, #92
03e34     AF 7C 02 FB | 	rdlong	local04, fp
03e38     01 7C 06 F1 | 	add	local04, #1
03e3c     AF 7C 62 FC | 	wrlong	local04, fp
03e40     04 5E 05 F1 | 	add	fp, #4
03e44     AF 76 02 FB | 	rdlong	local01, fp
03e48     04 5E 05 F1 | 	add	fp, #4
03e4c     AF 7C 02 FB | 	rdlong	local04, fp
03e50     64 5E 85 F1 | 	sub	fp, #100
03e54     3E 77 0A F2 | 	cmp	local01, local04 wz
03e58     3C 00 90 5D |  if_ne	jmp	#LR__0170
03e5c     60 5E 05 F1 | 	add	fp, #96
03e60     AF 7C 02 FB | 	rdlong	local04, fp
03e64     01 7C 86 F1 | 	sub	local04, #1
03e68     AF 7C 62 FC | 	wrlong	local04, fp
03e6c     AF 76 0A FB | 	rdlong	local01, fp wz
03e70     60 5E 85 F1 | 	sub	fp, #96
03e74     20 00 90 5D |  if_ne	jmp	#LR__0169
03e78     04 5E 05 F1 | 	add	fp, #4
03e7c     AF 6C 02 FB | 	rdlong	arg01, fp
03e80     04 5E 05 F1 | 	add	fp, #4
03e84     AF 6E 02 FB | 	rdlong	arg02, fp
03e88     08 5E 85 F1 | 	sub	fp, #8
03e8c     23 70 06 F6 | 	mov	arg03, #35
03e90     FC FC BF FD | 	call	#__system___fmtchar
03e94     70 01 90 FD | 	jmp	#LR__0180
03e98                 | LR__0169
03e98                 | LR__0170
03e98     68 5E 05 F1 | 	add	fp, #104
03e9c     AF 76 02 FB | 	rdlong	local01, fp
03ea0     68 5E 85 F1 | 	sub	fp, #104
03ea4     02 76 0E F2 | 	cmp	local01, #2 wz
03ea8     20 00 90 5D |  if_ne	jmp	#LR__0171
03eac     58 5E 05 F1 | 	add	fp, #88
03eb0     AF 76 02 FB | 	rdlong	local01, fp
03eb4     3B 7D 02 F6 | 	mov	local04, local01
03eb8     01 7C 06 F1 | 	add	local04, #1
03ebc     AF 7C 62 FC | 	wrlong	local04, fp
03ec0     58 5E 85 F1 | 	sub	fp, #88
03ec4     3B 41 48 FC | 	wrbyte	#32, local01
03ec8     50 00 90 FD | 	jmp	#LR__0174
03ecc                 | LR__0171
03ecc     68 5E 05 F1 | 	add	fp, #104
03ed0     AF 76 02 FB | 	rdlong	local01, fp
03ed4     68 5E 85 F1 | 	sub	fp, #104
03ed8     04 76 0E F2 | 	cmp	local01, #4 wz
03edc     20 00 90 5D |  if_ne	jmp	#LR__0172
03ee0     58 5E 05 F1 | 	add	fp, #88
03ee4     AF 76 02 FB | 	rdlong	local01, fp
03ee8     3B 7D 02 F6 | 	mov	local04, local01
03eec     01 7C 06 F1 | 	add	local04, #1
03ef0     AF 7C 62 FC | 	wrlong	local04, fp
03ef4     58 5E 85 F1 | 	sub	fp, #88
03ef8     3B 5B 48 FC | 	wrbyte	#45, local01
03efc     1C 00 90 FD | 	jmp	#LR__0173
03f00                 | LR__0172
03f00     58 5E 05 F1 | 	add	fp, #88
03f04     AF 76 02 FB | 	rdlong	local01, fp
03f08     3B 7D 02 F6 | 	mov	local04, local01
03f0c     01 7C 06 F1 | 	add	local04, #1
03f10     AF 7C 62 FC | 	wrlong	local04, fp
03f14     58 5E 85 F1 | 	sub	fp, #88
03f18     3B 57 48 FC | 	wrbyte	#43, local01
03f1c                 | LR__0173
03f1c                 | LR__0174
03f1c                 | LR__0175
03f1c     58 5E 05 F1 | 	add	fp, #88
03f20     AF 6C 02 FB | 	rdlong	arg01, fp
03f24     4C 5E 85 F1 | 	sub	fp, #76
03f28     AF 6E 02 FB | 	rdlong	arg02, fp
03f2c     04 5E 05 F1 | 	add	fp, #4
03f30     AF 70 02 FB | 	rdlong	arg03, fp
03f34     50 5E 05 F1 | 	add	fp, #80
03f38     AF 72 02 FB | 	rdlong	arg04, fp
03f3c     00 7E 06 F6 | 	mov	local05, #0
03f40     58 5E 85 F1 | 	sub	fp, #88
03f44     AF 80 02 FB | 	rdlong	local06, fp
03f48     08 5E 85 F1 | 	sub	fp, #8
03f4c     1D 80 2E F4 | 	testbn	local06, #29 wz
03f50     01 7E 06 56 |  if_ne	mov	local05, #1
03f54     3F 75 02 F6 | 	mov	arg05, local05
03f58     F0 0D B0 FD | 	call	#__system___uitoa
03f5c     13 83 02 F6 | 	mov	local07, result1
03f60     5C 5E 05 F1 | 	add	fp, #92
03f64     AF 76 02 FB | 	rdlong	local01, fp
03f68     41 77 02 F1 | 	add	local01, local07
03f6c     AF 76 62 FC | 	wrlong	local01, fp
03f70     08 5E 05 F1 | 	add	fp, #8
03f74     AF 7C 02 FB | 	rdlong	local04, fp
03f78     64 5E 85 F1 | 	sub	fp, #100
03f7c     3E 77 5A F2 | 	cmps	local01, local04 wcz
03f80     64 00 90 ED |  if_be	jmp	#LR__0179
03f84     B8 C0 9F FE | 	loc	pa,	#(@LR__0177-@LR__0176)
03f88     93 00 A0 FD | 	call	#FCACHE_LOAD_
03f8c                 | LR__0176
03f8c     64 5E 05 F1 | 	add	fp, #100
03f90     AF 76 02 FB | 	rdlong	local01, fp
03f94     3B 7D 02 F6 | 	mov	local04, local01
03f98     01 7C 86 F1 | 	sub	local04, #1
03f9c     AF 7C 62 FC | 	wrlong	local04, fp
03fa0     64 5E 85 F1 | 	sub	fp, #100
03fa4     00 76 5E F2 | 	cmps	local01, #0 wcz
03fa8     20 00 90 ED |  if_be	jmp	#LR__0178
03fac     58 5E 05 F1 | 	add	fp, #88
03fb0     AF 76 02 FB | 	rdlong	local01, fp
03fb4     3B 7D 02 F6 | 	mov	local04, local01
03fb8     01 7C 06 F1 | 	add	local04, #1
03fbc     AF 7C 62 FC | 	wrlong	local04, fp
03fc0     58 5E 85 F1 | 	sub	fp, #88
03fc4     3B 47 48 FC | 	wrbyte	#35, local01
03fc8     C0 FF 9F FD | 	jmp	#LR__0176
03fcc                 | LR__0177
03fcc                 | LR__0178
03fcc     58 5E 05 F1 | 	add	fp, #88
03fd0     AF 76 02 FB | 	rdlong	local01, fp
03fd4     3B 7D 02 F6 | 	mov	local04, local01
03fd8     01 7C 06 F1 | 	add	local04, #1
03fdc     AF 7C 62 FC | 	wrlong	local04, fp
03fe0     58 5E 85 F1 | 	sub	fp, #88
03fe4     3B 01 48 FC | 	wrbyte	#0, local01
03fe8                 | LR__0179
03fe8     04 5E 05 F1 | 	add	fp, #4
03fec     AF 6C 02 FB | 	rdlong	arg01, fp
03ff0     04 5E 05 F1 | 	add	fp, #4
03ff4     AF 6E 02 FB | 	rdlong	arg02, fp
03ff8     0C 5E 05 F1 | 	add	fp, #12
03ffc     AF 70 02 F6 | 	mov	arg03, fp
04000     14 5E 85 F1 | 	sub	fp, #20
04004     E8 FB BF FD | 	call	#__system___fmtstr
04008                 | LR__0180
04008     AF F0 03 F6 | 	mov	ptra, fp
0400c     BF 00 A0 FD | 	call	#popregs_
04010                 | __system___fmtnum_ret
04010     2D 00 64 FD | 	ret
04014                 | 
04014                 | __system__Number_S
04014     09 5A 05 F6 | 	mov	COUNT_, #9
04018     B0 00 A0 FD | 	call	#pushregs_
0401c     36 77 02 F6 | 	mov	local01, arg01
04020     37 79 0A F6 | 	mov	local02, arg02 wz
04024     38 7B 02 F6 | 	mov	local03, arg03
04028     40 00 90 5D |  if_ne	jmp	#LR__0183
0402c     01 78 06 F6 | 	mov	local02, #1
04030     3D 7D 02 F6 | 	mov	local04, local03
04034     01 7E 06 F6 | 	mov	local05, #1
04038                 | LR__0181
04038     00 80 06 F6 | 	mov	local06, #0
0403c     3B 7D 1A F2 | 	cmp	local04, local01 wcz
04040     01 80 66 E6 |  if_be	neg	local06, #1
04044     00 82 06 F6 | 	mov	local07, #0
04048     3E 7F 1A F2 | 	cmp	local05, local04 wcz
0404c     01 82 66 C6 |  if_b	neg	local07, #1
04050     41 81 CA F7 | 	test	local06, local07 wz
04054     14 00 90 AD |  if_e	jmp	#LR__0182
04058     3E 7F 02 F6 | 	mov	local05, local04
0405c     3D 7D 02 FD | 	qmul	local04, local03
04060     18 7C 62 FD | 	getqx	local04
04064     01 78 06 F1 | 	add	local02, #1
04068     CC FF 9F FD | 	jmp	#LR__0181
0406c                 | LR__0182
0406c                 | LR__0183
0406c     20 78 3E F3 | 	fle	local02, #32 wcz
04070     3C 6D 02 F6 | 	mov	arg01, local02
04074     02 6C 06 F1 | 	add	arg01, #2
04078     5C 03 B0 FD | 	call	#__system___gc_alloc_managed
0407c     13 85 02 F6 | 	mov	local08, result1
04080     3C 83 02 F6 | 	mov	local07, local02
04084     42 83 02 F1 | 	add	local07, local08
04088     41 01 48 FC | 	wrbyte	#0, local07
0408c     AC BF 9F FE | 	loc	pa,	#(@LR__0185-@LR__0184)
04090     93 00 A0 FD | 	call	#FCACHE_LOAD_
04094                 | LR__0184
04094     00 78 1E F2 | 	cmp	local02, #0 wcz
04098     34 00 90 ED |  if_be	jmp	#LR__0186
0409c     01 78 86 F1 | 	sub	local02, #1
040a0     3B CB 02 F6 | 	mov	muldiva_, local01
040a4     3D CD 02 F6 | 	mov	muldivb_, local03
040a8     CC 00 A0 FD | 	call	#unsdivide_
040ac     65 87 02 F6 | 	mov	local09, muldiva_
040b0     66 77 02 F6 | 	mov	local01, muldivb_
040b4     0A 86 1E F2 | 	cmp	local09, #10 wcz
040b8     30 86 06 C1 |  if_b	add	local09, #48
040bc     37 86 06 31 |  if_ae	add	local09, #55
040c0     3C 83 02 F6 | 	mov	local07, local02
040c4     42 83 02 F1 | 	add	local07, local08
040c8     41 87 42 FC | 	wrbyte	local09, local07
040cc     C4 FF 9F FD | 	jmp	#LR__0184
040d0                 | LR__0185
040d0                 | LR__0186
040d0     42 27 02 F6 | 	mov	result1, local08
040d4     AF F0 03 F6 | 	mov	ptra, fp
040d8     BF 00 A0 FD | 	call	#popregs_
040dc                 | __system__Number_S_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | __system___gc_ptrs
040e0     04 5A 05 F6 | 	mov	COUNT_, #4
040e4     B0 00 A0 FD | 	call	#pushregs_
040e8     02 77 02 F6 | 	mov	local01, __heap_ptr
040ec     3B 79 02 F6 | 	mov	local02, local01
040f0     07 00 00 FF 
040f4     F8 79 06 F1 | 	add	local02, ##4088
040f8     3B 7B 0A FB | 	rdlong	local03, local01 wz
040fc     74 00 90 5D |  if_ne	jmp	#LR__0187
04100     3C 7D 02 F6 | 	mov	local04, local02
04104     3B 7D 82 F1 | 	sub	local04, local01
04108     3B 03 58 FC | 	wrword	#1, local01
0410c     3B 7B 02 F6 | 	mov	local03, local01
04110     02 7A 06 F1 | 	add	local03, #2
04114     36 00 80 FF 
04118     3D 21 59 FC | 	wrword	##27792, local03
0411c     3B 7B 02 F6 | 	mov	local03, local01
04120     04 7A 06 F1 | 	add	local03, #4
04124     3D 01 58 FC | 	wrword	#0, local03
04128     3B 7B 02 F6 | 	mov	local03, local01
0412c     06 7A 06 F1 | 	add	local03, #6
04130     3D 03 58 FC | 	wrword	#1, local03
04134     10 76 06 F1 | 	add	local01, #16
04138     3E 7B 52 F6 | 	abs	local03, local04 wc
0413c     04 7A 46 F0 | 	shr	local03, #4
04140     3D 7B 62 C6 |  if_b	neg	local03, local03
04144     3B 7B 52 FC | 	wrword	local03, local01
04148     3B 7B 02 F6 | 	mov	local03, local01
0414c     02 7A 06 F1 | 	add	local03, #2
04150     36 00 80 FF 
04154     3D 1F 59 FC | 	wrword	##27791, local03
04158     3B 7B 02 F6 | 	mov	local03, local01
0415c     04 7A 06 F1 | 	add	local03, #4
04160     3D 01 58 FC | 	wrword	#0, local03
04164     3B 7B 02 F6 | 	mov	local03, local01
04168     06 7A 06 F1 | 	add	local03, #6
0416c     3D 01 58 FC | 	wrword	#0, local03
04170     10 76 86 F1 | 	sub	local01, #16
04174                 | LR__0187
04174     3C 29 02 F6 | 	mov	result2, local02
04178     3B 27 02 F6 | 	mov	result1, local01
0417c     AF F0 03 F6 | 	mov	ptra, fp
04180     BF 00 A0 FD | 	call	#popregs_
04184                 | __system___gc_ptrs_ret
04184     2D 00 64 FD | 	ret
04188                 | 
04188                 | __system___gc_nextBlockPtr
04188     02 5A 05 F6 | 	mov	COUNT_, #2
0418c     B0 00 A0 FD | 	call	#pushregs_
04190     36 77 02 F6 | 	mov	local01, arg01
04194     3B 79 EA FA | 	rdword	local02, local01 wz
04198     10 00 90 5D |  if_ne	jmp	#LR__0188
0419c     2C 00 00 FF 
041a0     A0 6D 06 F6 | 	mov	arg01, ##@LR__0300
041a4     FC 01 B0 FD | 	call	#__system___gc_errmsg
041a8     0C 00 90 FD | 	jmp	#LR__0189
041ac                 | LR__0188
041ac     3B 27 02 F6 | 	mov	result1, local01
041b0     04 78 66 F0 | 	shl	local02, #4
041b4     3C 27 02 F1 | 	add	result1, local02
041b8                 | LR__0189
041b8     AF F0 03 F6 | 	mov	ptra, fp
041bc     BF 00 A0 FD | 	call	#popregs_
041c0                 | __system___gc_nextBlockPtr_ret
041c0     2D 00 64 FD | 	ret
041c4                 | 
041c4                 | __system___gc_tryalloc
041c4     0E 5A 05 F6 | 	mov	COUNT_, #14
041c8     B0 00 A0 FD | 	call	#pushregs_
041cc     36 77 02 F6 | 	mov	local01, arg01
041d0     37 79 02 F6 | 	mov	local02, arg02
041d4     08 FF BF FD | 	call	#__system___gc_ptrs
041d8     13 7B 02 F6 | 	mov	local03, result1
041dc     14 7D 02 F6 | 	mov	local04, result2
041e0     3D 7F 02 F6 | 	mov	local05, local03
041e4     00 80 06 F6 | 	mov	local06, #0
041e8     68 BE 9F FE | 	loc	pa,	#(@LR__0191-@LR__0190)
041ec     93 00 A0 FD | 	call	#FCACHE_LOAD_
041f0                 | LR__0190
041f0     3F 83 02 F6 | 	mov	local07, local05
041f4     3D 85 02 F6 | 	mov	local08, local03
041f8     3F 87 02 F6 | 	mov	local09, local05
041fc     06 86 06 F1 | 	add	local09, #6
04200     43 89 E2 FA | 	rdword	local10, local09
04204     42 6D 02 F6 | 	mov	arg01, local08
04208     44 6F 0A F6 | 	mov	arg02, local10 wz
0420c     00 26 06 A6 |  if_e	mov	result1, #0
04210     04 6E 66 50 |  if_ne	shl	arg02, #4
04214     37 6D 02 51 |  if_ne	add	arg01, arg02
04218     36 27 02 56 |  if_ne	mov	result1, arg01
0421c     13 8B 02 F6 | 	mov	local11, result1
04220     45 7F 0A F6 | 	mov	local05, local11 wz
04224     3F 85 02 56 |  if_ne	mov	local08, local05
04228     42 81 E2 5A |  if_ne	rdword	local06, local08
0422c     00 7E 0E F2 | 	cmp	local05, #0 wz
04230     10 00 90 AD |  if_e	jmp	#LR__0192
04234     3E 7F 5A F2 | 	cmps	local05, local04 wcz
04238     08 00 90 3D |  if_ae	jmp	#LR__0192
0423c     40 77 5A F2 | 	cmps	local01, local06 wcz
04240     AC FF 9F 1D |  if_a	jmp	#LR__0190
04244                 | LR__0191
04244                 | LR__0192
04244     00 7E 0E F2 | 	cmp	local05, #0 wz
04248     3F 27 02 A6 |  if_e	mov	result1, local05
0424c     48 01 90 AD |  if_e	jmp	#LR__0195
04250     3F 85 02 F6 | 	mov	local08, local05
04254     06 84 06 F1 | 	add	local08, #6
04258     42 8D E2 FA | 	rdword	local12, local08
0425c     40 77 5A F2 | 	cmps	local01, local06 wcz
04260     C8 00 90 3D |  if_ae	jmp	#LR__0194
04264     3F 77 52 FC | 	wrword	local01, local05
04268     3F 6D 02 F6 | 	mov	arg01, local05
0426c     3B 87 02 F6 | 	mov	local09, local01
04270     04 86 66 F0 | 	shl	local09, #4
04274     43 6D 02 F1 | 	add	arg01, local09
04278     40 85 02 F6 | 	mov	local08, local06
0427c     3B 85 82 F1 | 	sub	local08, local01
04280     36 85 52 FC | 	wrword	local08, arg01
04284     36 85 02 F6 | 	mov	local08, arg01
04288     02 84 06 F1 | 	add	local08, #2
0428c     36 00 80 FF 
04290     42 1F 59 FC | 	wrword	##27791, local08
04294     3F 6F 0A F6 | 	mov	arg02, local05 wz
04298     00 26 06 A6 |  if_e	mov	result1, #0
0429c     3D 6F 82 51 |  if_ne	sub	arg02, local03
042a0     04 6E 46 50 |  if_ne	shr	arg02, #4
042a4     37 27 02 56 |  if_ne	mov	result1, arg02
042a8     36 8B 02 F6 | 	mov	local11, arg01
042ac     04 8A 06 F1 | 	add	local11, #4
042b0     45 27 52 FC | 	wrword	result1, local11
042b4     3F 85 02 F6 | 	mov	local08, local05
042b8     06 84 06 F1 | 	add	local08, #6
042bc     36 87 02 F6 | 	mov	local09, arg01
042c0     42 89 E2 FA | 	rdword	local10, local08
042c4     06 86 06 F1 | 	add	local09, #6
042c8     43 89 52 FC | 	wrword	local10, local09
042cc     36 8F 02 F6 | 	mov	local13, arg01
042d0     47 6F 0A F6 | 	mov	arg02, local13 wz
042d4     00 26 06 A6 |  if_e	mov	result1, #0
042d8     3D 6F 82 51 |  if_ne	sub	arg02, local03
042dc     04 6E 46 50 |  if_ne	shr	arg02, #4
042e0     37 27 02 56 |  if_ne	mov	result1, arg02
042e4     13 8D 02 F6 | 	mov	local12, result1
042e8     9C FE BF FD | 	call	#__system___gc_nextBlockPtr
042ec     13 91 0A F6 | 	mov	local14, result1 wz
042f0     38 00 90 AD |  if_e	jmp	#LR__0193
042f4     3E 91 5A F2 | 	cmps	local14, local04 wcz
042f8     30 00 90 3D |  if_ae	jmp	#LR__0193
042fc     3D 85 02 F6 | 	mov	local08, local03
04300     47 87 02 F6 | 	mov	local09, local13
04304     42 6D 02 F6 | 	mov	arg01, local08
04308     43 6F 0A F6 | 	mov	arg02, local09 wz
0430c     00 26 06 A6 |  if_e	mov	result1, #0
04310     36 6F 82 51 |  if_ne	sub	arg02, arg01
04314     04 6E 46 50 |  if_ne	shr	arg02, #4
04318     37 27 02 56 |  if_ne	mov	result1, arg02
0431c     13 89 02 F6 | 	mov	local10, result1
04320     48 8B 02 F6 | 	mov	local11, local14
04324     04 8A 06 F1 | 	add	local11, #4
04328     45 89 52 FC | 	wrword	local10, local11
0432c                 | LR__0193
0432c                 | LR__0194
0432c     06 82 06 F1 | 	add	local07, #6
04330     41 8D 52 FC | 	wrword	local12, local07
04334     36 00 00 FF 
04338     80 84 06 F6 | 	mov	local08, ##27776
0433c     3C 85 42 F5 | 	or	local08, local02
04340     01 26 62 FD | 	cogid	result1
04344     13 85 42 F5 | 	or	local08, result1
04348     3F 89 02 F6 | 	mov	local10, local05
0434c     02 88 06 F1 | 	add	local10, #2
04350     44 85 52 FC | 	wrword	local08, local10
04354     3D 85 02 F6 | 	mov	local08, local03
04358     08 84 06 F1 | 	add	local08, #8
0435c     3F 87 02 F6 | 	mov	local09, local05
04360     42 89 E2 FA | 	rdword	local10, local08
04364     06 86 06 F1 | 	add	local09, #6
04368     43 89 52 FC | 	wrword	local10, local09
0436c     3F 6F 0A F6 | 	mov	arg02, local05 wz
04370     00 26 06 A6 |  if_e	mov	result1, #0
04374     3D 6F 82 51 |  if_ne	sub	arg02, local03
04378     04 6E 46 50 |  if_ne	shr	arg02, #4
0437c     37 27 02 56 |  if_ne	mov	result1, arg02
04380     08 7A 06 F1 | 	add	local03, #8
04384     3D 27 52 FC | 	wrword	result1, local03
04388     3F 27 02 F6 | 	mov	result1, local05
0438c     08 26 06 F1 | 	add	result1, #8
04390     00 C0 31 FF 
04394     00 26 46 F5 | 	or	result1, ##1669332992
04398                 | LR__0195
04398     AF F0 03 F6 | 	mov	ptra, fp
0439c     BF 00 A0 FD | 	call	#popregs_
043a0                 | __system___gc_tryalloc_ret
043a0     2D 00 64 FD | 	ret
043a4                 | 
043a4                 | __system___gc_errmsg
043a4     02 5A 05 F6 | 	mov	COUNT_, #2
043a8     B0 00 A0 FD | 	call	#pushregs_
043ac     36 77 02 F6 | 	mov	local01, arg01
043b0                 | LR__0196
043b0     3B 79 CA FA | 	rdbyte	local02, local01 wz
043b4     01 76 06 F1 | 	add	local01, #1
043b8     0C 00 90 AD |  if_e	jmp	#LR__0197
043bc     3C 6D 02 F6 | 	mov	arg01, local02
043c0     98 F4 BF FD | 	call	#__system___tx
043c4     E8 FF 9F FD | 	jmp	#LR__0196
043c8                 | LR__0197
043c8     00 26 06 F6 | 	mov	result1, #0
043cc     AF F0 03 F6 | 	mov	ptra, fp
043d0     BF 00 A0 FD | 	call	#popregs_
043d4                 | __system___gc_errmsg_ret
043d4     2D 00 64 FD | 	ret
043d8                 | 
043d8                 | __system___gc_alloc_managed
043d8     02 5A 05 F6 | 	mov	COUNT_, #2
043dc     B0 00 A0 FD | 	call	#pushregs_
043e0     36 77 02 F6 | 	mov	local01, arg01
043e4     00 6E 06 F6 | 	mov	arg02, #0
043e8     30 00 B0 FD | 	call	#__system___gc_doalloc
043ec     13 79 0A F6 | 	mov	local02, result1 wz
043f0     18 00 90 5D |  if_ne	jmp	#LR__0198
043f4     00 76 5E F2 | 	cmps	local01, #0 wcz
043f8     10 00 90 ED |  if_be	jmp	#LR__0198
043fc     2C 00 00 FF 
04400     BC 6D 06 F6 | 	mov	arg01, ##@LR__0301
04404     9C FF BF FD | 	call	#__system___gc_errmsg
04408     04 00 90 FD | 	jmp	#LR__0199
0440c                 | LR__0198
0440c     3C 27 02 F6 | 	mov	result1, local02
04410                 | LR__0199
04410     AF F0 03 F6 | 	mov	ptra, fp
04414     BF 00 A0 FD | 	call	#popregs_
04418                 | __system___gc_alloc_managed_ret
04418     2D 00 64 FD | 	ret
0441c                 | 
0441c                 | __system___gc_doalloc
0441c     06 5A 05 F6 | 	mov	COUNT_, #6
04420     B0 00 A0 FD | 	call	#pushregs_
04424     36 77 0A F6 | 	mov	local01, arg01 wz
04428     37 79 02 F6 | 	mov	local02, arg02
0442c     00 26 06 A6 |  if_e	mov	result1, #0
04430     94 00 90 AD |  if_e	jmp	#LR__0207
04434     17 76 06 F1 | 	add	local01, #23
04438     0F 76 26 F5 | 	andn	local01, #15
0443c     04 76 46 F0 | 	shr	local01, #4
04440     14 14 06 F1 | 	add	ptr___system__dat__, #20
04444     0A 6D 02 F6 | 	mov	arg01, ptr___system__dat__
04448     14 14 86 F1 | 	sub	ptr___system__dat__, #20
0444c     D4 F3 BF FD | 	call	#__system___lockmem
04450     3B 6D 02 F6 | 	mov	arg01, local01
04454     3C 6F 02 F6 | 	mov	arg02, local02
04458     68 FD BF FD | 	call	#__system___gc_tryalloc
0445c     13 7B 0A F6 | 	mov	local03, result1 wz
04460     14 00 90 5D |  if_ne	jmp	#LR__0200
04464     30 03 B0 FD | 	call	#__system___gc_docollect
04468     3B 6D 02 F6 | 	mov	arg01, local01
0446c     3C 6F 02 F6 | 	mov	arg02, local02
04470     50 FD BF FD | 	call	#__system___gc_tryalloc
04474     13 7B 02 F6 | 	mov	local03, result1
04478                 | LR__0200
04478     14 14 06 F1 | 	add	ptr___system__dat__, #20
0447c     0A 6D 02 F6 | 	mov	arg01, ptr___system__dat__
04480     14 14 86 F1 | 	sub	ptr___system__dat__, #20
04484     36 01 68 FC | 	wrlong	#0, arg01
04488     00 7A 0E F2 | 	cmp	local03, #0 wz
0448c     34 00 90 AD |  if_e	jmp	#LR__0206
04490     04 76 66 F0 | 	shl	local01, #4
04494     08 76 86 F1 | 	sub	local01, #8
04498     3B 7D 52 F6 | 	abs	local04, local01 wc
0449c     02 7C 46 F0 | 	shr	local04, #2
044a0     3E 7D 62 C6 |  if_b	neg	local04, local04
044a4     3E 7F 0A F6 | 	mov	local05, local04 wz
044a8     3D 81 02 F6 | 	mov	local06, local03
044ac     14 00 90 AD |  if_e	jmp	#LR__0205
044b0     58 BB 9F FE | 	loc	pa,	#(@LR__0203-@LR__0201)
044b4     93 00 A0 FD | 	call	#FCACHE_LOAD_
044b8                 | LR__0201
044b8     3F 05 D8 FC | 	rep	@LR__0204, local05
044bc                 | LR__0202
044bc     40 01 68 FC | 	wrlong	#0, local06
044c0     04 80 06 F1 | 	add	local06, #4
044c4                 | LR__0203
044c4                 | LR__0204
044c4                 | LR__0205
044c4                 | LR__0206
044c4     3D 27 02 F6 | 	mov	result1, local03
044c8                 | LR__0207
044c8     AF F0 03 F6 | 	mov	ptra, fp
044cc     BF 00 A0 FD | 	call	#popregs_
044d0                 | __system___gc_doalloc_ret
044d0     2D 00 64 FD | 	ret
044d4                 | 
044d4                 | __system___gc_isvalidptr
044d4     38 2D 02 F6 | 	mov	_var01, arg03
044d8     16 2F 02 F6 | 	mov	_var02, _var01
044dc     00 F8 7F FF 
044e0     00 2E 06 F5 | 	and	_var02, ##-1048576
044e4     00 C0 31 FF 
044e8     00 2E 0E F2 | 	cmp	_var02, ##1669332992 wz
044ec     00 26 06 56 |  if_ne	mov	result1, #0
044f0     5C 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
044f4     08 2C 86 F1 | 	sub	_var01, #8
044f8     00 F8 7F FF 
044fc     00 2C 26 F5 | 	andn	_var01, ##-1048576
04500     36 2D 5A F2 | 	cmps	_var01, arg01 wcz
04504     08 00 90 CD |  if_b	jmp	#LR__0208
04508     37 2D 5A F2 | 	cmps	_var01, arg02 wcz
0450c     08 00 90 CD |  if_b	jmp	#LR__0209
04510                 | LR__0208
04510     00 26 06 F6 | 	mov	result1, #0
04514     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
04518                 | LR__0209
04518     16 2F 02 F6 | 	mov	_var02, _var01
0451c     36 2F 62 F5 | 	xor	_var02, arg01
04520     0F 2E 0E F5 | 	and	_var02, #15 wz
04524     00 26 06 56 |  if_ne	mov	result1, #0
04528     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
0452c     16 2F 02 F6 | 	mov	_var02, _var01
04530     02 2E 06 F1 | 	add	_var02, #2
04534     17 2F E2 FA | 	rdword	_var02, _var02
04538     7F 00 00 FF 
0453c     C0 2F 06 F5 | 	and	_var02, ##65472
04540     36 00 00 FF 
04544     80 2E 0E F2 | 	cmp	_var02, ##27776 wz
04548     00 26 06 56 |  if_ne	mov	result1, #0
0454c     16 27 02 A6 |  if_e	mov	result1, _var01
04550                 | __system___gc_isvalidptr_ret
04550     2D 00 64 FD | 	ret
04554                 | 
04554                 | __system___gc_dofree
04554     0D 5A 05 F6 | 	mov	COUNT_, #13
04558     B0 00 A0 FD | 	call	#pushregs_
0455c     36 77 02 F6 | 	mov	local01, arg01
04560     7C FB BF FD | 	call	#__system___gc_ptrs
04564     13 79 02 F6 | 	mov	local02, result1
04568     14 7B 02 F6 | 	mov	local03, result2
0456c     3B 7D 02 F6 | 	mov	local04, local01
04570     02 7C 06 F1 | 	add	local04, #2
04574     36 00 80 FF 
04578     3E 1F 59 FC | 	wrword	##27791, local04
0457c     3B 7F 02 F6 | 	mov	local05, local01
04580     3B 6D 02 F6 | 	mov	arg01, local01
04584     00 FC BF FD | 	call	#__system___gc_nextBlockPtr
04588     13 81 02 F6 | 	mov	local06, result1
0458c     BC BA 9F FE | 	loc	pa,	#(@LR__0211-@LR__0210)
04590     93 00 A0 FD | 	call	#FCACHE_LOAD_
04594                 | LR__0210
04594     04 7E 06 F1 | 	add	local05, #4
04598     3F 6F EA FA | 	rdword	arg02, local05 wz
0459c     3C 6D 02 F6 | 	mov	arg01, local02
045a0     00 26 06 A6 |  if_e	mov	result1, #0
045a4     04 6E 66 50 |  if_ne	shl	arg02, #4
045a8     37 6D 02 51 |  if_ne	add	arg01, arg02
045ac     36 27 02 56 |  if_ne	mov	result1, arg01
045b0     13 7F 0A F6 | 	mov	local05, result1 wz
045b4     28 00 90 AD |  if_e	jmp	#LR__0212
045b8     3F 6D 02 F6 | 	mov	arg01, local05
045bc     00 82 06 F6 | 	mov	local07, #0
045c0     02 6C 06 F1 | 	add	arg01, #2
045c4     36 85 E2 FA | 	rdword	local08, arg01
045c8     36 00 00 FF 
045cc     8F 84 0E F2 | 	cmp	local08, ##27791 wz
045d0     01 82 66 A6 |  if_e	neg	local07, #1
045d4     41 27 02 F6 | 	mov	result1, local07
045d8     13 87 0A F6 | 	mov	local09, result1 wz
045dc     B4 FF 9F AD |  if_e	jmp	#LR__0210
045e0                 | LR__0211
045e0                 | LR__0212
045e0     00 7E 0E F2 | 	cmp	local05, #0 wz
045e4     3C 7F 02 A6 |  if_e	mov	local05, local02
045e8     3F 7D 02 F6 | 	mov	local04, local05
045ec     06 7C 06 F1 | 	add	local04, #6
045f0     3B 87 02 F6 | 	mov	local09, local01
045f4     3E 89 E2 FA | 	rdword	local10, local04
045f8     06 86 06 F1 | 	add	local09, #6
045fc     43 89 52 FC | 	wrword	local10, local09
04600     3B 6F 0A F6 | 	mov	arg02, local01 wz
04604     00 26 06 A6 |  if_e	mov	result1, #0
04608     3C 6F 82 51 |  if_ne	sub	arg02, local02
0460c     04 6E 46 50 |  if_ne	shr	arg02, #4
04610     37 27 02 56 |  if_ne	mov	result1, arg02
04614     13 89 02 F6 | 	mov	local10, result1
04618     3F 8B 02 F6 | 	mov	local11, local05
0461c     06 8A 06 F1 | 	add	local11, #6
04620     45 89 52 FC | 	wrword	local10, local11
04624     3C 7F 0A F2 | 	cmp	local05, local02 wz
04628     84 00 90 AD |  if_e	jmp	#LR__0215
0462c     3F 6D 02 F6 | 	mov	arg01, local05
04630     54 FB BF FD | 	call	#__system___gc_nextBlockPtr
04634     3B 27 0A F2 | 	cmp	result1, local01 wz
04638     74 00 90 5D |  if_ne	jmp	#LR__0214
0463c     3F 7D E2 FA | 	rdword	local04, local05
04640     3B 8B E2 FA | 	rdword	local11, local01
04644     45 7D 02 F1 | 	add	local04, local11
04648     3F 7D 52 FC | 	wrword	local04, local05
0464c     3B 7D 02 F6 | 	mov	local04, local01
04650     02 7C 06 F1 | 	add	local04, #2
04654     3E 01 58 FC | 	wrword	#0, local04
04658     3B 6D 02 F6 | 	mov	arg01, local01
0465c     28 FB BF FD | 	call	#__system___gc_nextBlockPtr
04660     13 81 02 F6 | 	mov	local06, result1
04664     3D 81 5A F2 | 	cmps	local06, local03 wcz
04668     20 00 90 3D |  if_ae	jmp	#LR__0213
0466c     3F 6F 0A F6 | 	mov	arg02, local05 wz
04670     00 26 06 A6 |  if_e	mov	result1, #0
04674     3C 6F 82 51 |  if_ne	sub	arg02, local02
04678     04 6E 46 50 |  if_ne	shr	arg02, #4
0467c     37 27 02 56 |  if_ne	mov	result1, arg02
04680     40 8B 02 F6 | 	mov	local11, local06
04684     04 8A 06 F1 | 	add	local11, #4
04688     45 27 52 FC | 	wrword	result1, local11
0468c                 | LR__0213
0468c     3B 7D 02 F6 | 	mov	local04, local01
04690     06 7C 06 F1 | 	add	local04, #6
04694     3F 87 02 F6 | 	mov	local09, local05
04698     3E 89 E2 FA | 	rdword	local10, local04
0469c     06 86 06 F1 | 	add	local09, #6
046a0     43 89 52 FC | 	wrword	local10, local09
046a4     06 76 06 F1 | 	add	local01, #6
046a8     3B 01 58 FC | 	wrword	#0, local01
046ac     3F 77 02 F6 | 	mov	local01, local05
046b0                 | LR__0214
046b0                 | LR__0215
046b0     3B 6D 02 F6 | 	mov	arg01, local01
046b4     D0 FA BF FD | 	call	#__system___gc_nextBlockPtr
046b8     13 8D 0A F6 | 	mov	local12, result1 wz
046bc     C8 00 90 AD |  if_e	jmp	#LR__0217
046c0     3D 8D 5A F2 | 	cmps	local12, local03 wcz
046c4     C0 00 90 3D |  if_ae	jmp	#LR__0217
046c8     46 6D 02 F6 | 	mov	arg01, local12
046cc     00 82 06 F6 | 	mov	local07, #0
046d0     02 6C 06 F1 | 	add	arg01, #2
046d4     36 85 E2 FA | 	rdword	local08, arg01
046d8     36 00 00 FF 
046dc     8F 84 0E F2 | 	cmp	local08, ##27791 wz
046e0     01 82 66 A6 |  if_e	neg	local07, #1
046e4     41 27 0A F6 | 	mov	result1, local07 wz
046e8     9C 00 90 AD |  if_e	jmp	#LR__0217
046ec     3B 7F 02 F6 | 	mov	local05, local01
046f0     3F 7D E2 FA | 	rdword	local04, local05
046f4     46 77 02 F6 | 	mov	local01, local12
046f8     3B 8B E2 FA | 	rdword	local11, local01
046fc     45 7D 02 F1 | 	add	local04, local11
04700     3F 8F 02 F6 | 	mov	local13, local05
04704     47 7D 52 FC | 	wrword	local04, local13
04708     3B 7D 02 F6 | 	mov	local04, local01
0470c     06 7C 06 F1 | 	add	local04, #6
04710     3F 87 02 F6 | 	mov	local09, local05
04714     3E 89 E2 FA | 	rdword	local10, local04
04718     06 86 06 F1 | 	add	local09, #6
0471c     43 89 52 FC | 	wrword	local10, local09
04720     3B 7D 02 F6 | 	mov	local04, local01
04724     02 7C 06 F1 | 	add	local04, #2
04728     3E 55 59 FC | 	wrword	#170, local04
0472c     3B 7D 02 F6 | 	mov	local04, local01
04730     06 7C 06 F1 | 	add	local04, #6
04734     3E 01 58 FC | 	wrword	#0, local04
04738     3B 7D 02 F6 | 	mov	local04, local01
0473c     3E 6D 02 F6 | 	mov	arg01, local04
04740     44 FA BF FD | 	call	#__system___gc_nextBlockPtr
04744     13 87 02 F6 | 	mov	local09, result1
04748     43 81 0A F6 | 	mov	local06, local09 wz
0474c     38 00 90 AD |  if_e	jmp	#LR__0216
04750     3D 81 5A F2 | 	cmps	local06, local03 wcz
04754     30 00 90 3D |  if_ae	jmp	#LR__0216
04758     3C 7D 02 F6 | 	mov	local04, local02
0475c     3F 87 02 F6 | 	mov	local09, local05
04760     3E 6D 02 F6 | 	mov	arg01, local04
04764     43 6F 0A F6 | 	mov	arg02, local09 wz
04768     00 26 06 A6 |  if_e	mov	result1, #0
0476c     36 6F 82 51 |  if_ne	sub	arg02, arg01
04770     04 6E 46 50 |  if_ne	shr	arg02, #4
04774     37 27 02 56 |  if_ne	mov	result1, arg02
04778     13 89 02 F6 | 	mov	local10, result1
0477c     40 8B 02 F6 | 	mov	local11, local06
04780     04 8A 06 F1 | 	add	local11, #4
04784     45 89 52 FC | 	wrword	local10, local11
04788                 | LR__0216
04788                 | LR__0217
04788     40 27 02 F6 | 	mov	result1, local06
0478c     AF F0 03 F6 | 	mov	ptra, fp
04790     BF 00 A0 FD | 	call	#popregs_
04794                 | __system___gc_dofree_ret
04794     2D 00 64 FD | 	ret
04798                 | 
04798                 | __system___gc_docollect
04798     09 5A 05 F6 | 	mov	COUNT_, #9
0479c     B0 00 A0 FD | 	call	#pushregs_
047a0     3C F9 BF FD | 	call	#__system___gc_ptrs
047a4     14 77 02 F6 | 	mov	local01, result2
047a8     13 79 02 F6 | 	mov	local02, result1
047ac     3C 6D 02 F6 | 	mov	arg01, local02
047b0     D4 F9 BF FD | 	call	#__system___gc_nextBlockPtr
047b4     13 7B 0A F6 | 	mov	local03, result1 wz
047b8     01 26 62 FD | 	cogid	result1
047bc     13 7D 02 F6 | 	mov	local04, result1
047c0     34 00 90 AD |  if_e	jmp	#LR__0219
047c4                 | LR__0218
047c4     3B 7B 5A F2 | 	cmps	local03, local01 wcz
047c8     2C 00 90 3D |  if_ae	jmp	#LR__0219
047cc     3D 7F 02 F6 | 	mov	local05, local03
047d0     02 7E 06 F1 | 	add	local05, #2
047d4     3F 81 E2 FA | 	rdword	local06, local05
047d8     20 80 26 F5 | 	andn	local06, #32
047dc     3D 83 02 F6 | 	mov	local07, local03
047e0     02 82 06 F1 | 	add	local07, #2
047e4     41 81 52 FC | 	wrword	local06, local07
047e8     3D 6D 02 F6 | 	mov	arg01, local03
047ec     98 F9 BF FD | 	call	#__system___gc_nextBlockPtr
047f0     13 7B 0A F6 | 	mov	local03, result1 wz
047f4     CC FF 9F 5D |  if_ne	jmp	#LR__0218
047f8                 | LR__0219
047f8     00 80 06 F6 | 	mov	local06, #0
047fc     00 6C 06 F6 | 	mov	arg01, #0
04800     B8 EF BF FD | 	call	#__system____topofstack
04804     13 83 02 F6 | 	mov	local07, result1
04808     40 6D 02 F6 | 	mov	arg01, local06
0480c     41 6F 02 F6 | 	mov	arg02, local07
04810     A0 00 B0 FD | 	call	#__system___gc_markhub
04814     34 01 B0 FD | 	call	#__system___gc_markcog
04818     3C 6D 02 F6 | 	mov	arg01, local02
0481c     68 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04820     13 85 0A F6 | 	mov	local08, result1 wz
04824     10 00 90 5D |  if_ne	jmp	#LR__0220
04828     2C 00 00 FF 
0482c     D9 6D 06 F6 | 	mov	arg01, ##@LR__0302
04830     70 FB BF FD | 	call	#__system___gc_errmsg
04834     70 00 90 FD | 	jmp	#LR__0226
04838                 | LR__0220
04838                 | LR__0221
04838     42 7B 02 F6 | 	mov	local03, local08
0483c     3D 6D 02 F6 | 	mov	arg01, local03
04840     44 F9 BF FD | 	call	#__system___gc_nextBlockPtr
04844     13 85 02 F6 | 	mov	local08, result1
04848     3D 81 02 F6 | 	mov	local06, local03
0484c     02 80 06 F1 | 	add	local06, #2
04850     40 87 E2 FA | 	rdword	local09, local06
04854     20 86 CE F7 | 	test	local09, #32 wz
04858     3C 00 90 5D |  if_ne	jmp	#LR__0224
0485c     43 7F 02 F6 | 	mov	local05, local09
04860     10 7E 0E F5 | 	and	local05, #16 wz
04864     30 00 90 5D |  if_ne	jmp	#LR__0224
04868     43 81 02 F6 | 	mov	local06, local09
0486c     0F 80 06 F5 | 	and	local06, #15
04870     40 87 02 F6 | 	mov	local09, local06
04874     3E 87 0A F2 | 	cmp	local09, local04 wz
04878     08 00 90 AD |  if_e	jmp	#LR__0222
0487c     0E 86 0E F2 | 	cmp	local09, #14 wz
04880     14 00 90 5D |  if_ne	jmp	#LR__0223
04884                 | LR__0222
04884     3D 81 02 F6 | 	mov	local06, local03
04888     40 6D 02 F6 | 	mov	arg01, local06
0488c     C4 FC BF FD | 	call	#__system___gc_dofree
04890     13 7F 02 F6 | 	mov	local05, result1
04894     3F 85 02 F6 | 	mov	local08, local05
04898                 | LR__0223
04898                 | LR__0224
04898     00 84 0E F2 | 	cmp	local08, #0 wz
0489c     08 00 90 AD |  if_e	jmp	#LR__0225
048a0     3B 85 5A F2 | 	cmps	local08, local01 wcz
048a4     90 FF 9F CD |  if_b	jmp	#LR__0221
048a8                 | LR__0225
048a8                 | LR__0226
048a8     AF F0 03 F6 | 	mov	ptra, fp
048ac     BF 00 A0 FD | 	call	#popregs_
048b0                 | __system___gc_docollect_ret
048b0     2D 00 64 FD | 	ret
048b4                 | 
048b4                 | __system___gc_markhub
048b4     0A 5A 05 F6 | 	mov	COUNT_, #10
048b8     B0 00 A0 FD | 	call	#pushregs_
048bc     36 77 02 F6 | 	mov	local01, arg01
048c0     37 79 02 F6 | 	mov	local02, arg02
048c4     18 F8 BF FD | 	call	#__system___gc_ptrs
048c8     13 7B 02 F6 | 	mov	local03, result1
048cc     14 7D 02 F6 | 	mov	local04, result2
048d0                 | LR__0227
048d0     3C 77 5A F2 | 	cmps	local01, local02 wcz
048d4     68 00 90 3D |  if_ae	jmp	#LR__0228
048d8     3B 71 02 FB | 	rdlong	arg03, local01
048dc     04 76 06 F1 | 	add	local01, #4
048e0     3D 6D 02 F6 | 	mov	arg01, local03
048e4     3E 6F 02 F6 | 	mov	arg02, local04
048e8     E8 FB BF FD | 	call	#__system___gc_isvalidptr
048ec     13 7F 0A F6 | 	mov	local05, result1 wz
048f0     DC FF 9F AD |  if_e	jmp	#LR__0227
048f4     3F 6D 02 F6 | 	mov	arg01, local05
048f8     00 80 06 F6 | 	mov	local06, #0
048fc     02 6C 06 F1 | 	add	arg01, #2
04900     36 83 E2 FA | 	rdword	local07, arg01
04904     36 00 00 FF 
04908     8F 82 0E F2 | 	cmp	local07, ##27791 wz
0490c     01 80 66 A6 |  if_e	neg	local06, #1
04910     40 27 02 F6 | 	mov	result1, local06
04914     13 85 0A F6 | 	mov	local08, result1 wz
04918     B4 FF 9F 5D |  if_ne	jmp	#LR__0227
0491c     3F 87 02 F6 | 	mov	local09, local05
04920     02 86 06 F1 | 	add	local09, #2
04924     43 89 E2 FA | 	rdword	local10, local09
04928     0F 88 26 F5 | 	andn	local10, #15
0492c     2E 88 46 F5 | 	or	local10, #46
04930     3F 87 02 F6 | 	mov	local09, local05
04934     02 86 06 F1 | 	add	local09, #2
04938     43 89 52 FC | 	wrword	local10, local09
0493c     90 FF 9F FD | 	jmp	#LR__0227
04940                 | LR__0228
04940     AF F0 03 F6 | 	mov	ptra, fp
04944     BF 00 A0 FD | 	call	#popregs_
04948                 | __system___gc_markhub_ret
04948     2D 00 64 FD | 	ret
0494c                 | 
0494c                 | __system___gc_markcog
0494c     06 5A 05 F6 | 	mov	COUNT_, #6
04950     B0 00 A0 FD | 	call	#pushregs_
04954     88 F7 BF FD | 	call	#__system___gc_ptrs
04958     13 77 02 F6 | 	mov	local01, result1
0495c     14 79 02 F6 | 	mov	local02, result2
04960     00 7A 06 F6 | 	mov	local03, #0
04964                 | LR__0229
04964     F0 7D 06 F6 | 	mov	local04, #496
04968     3D 7D 82 F1 | 	sub	local04, local03
0496c     F0 7D 06 F1 | 	add	local04, #496
04970                 | 	'.live	local04
04970     00 7C 96 F9 | 	alts	local04, #0
04974     3E 7F 02 F6 | 	mov	local05, local04
04978     3B 6D 02 F6 | 	mov	arg01, local01
0497c     3C 6F 02 F6 | 	mov	arg02, local02
04980     3F 71 02 F6 | 	mov	arg03, local05
04984     4C FB BF FD | 	call	#__system___gc_isvalidptr
04988     13 7F 0A F6 | 	mov	local05, result1 wz
0498c     18 00 90 AD |  if_e	jmp	#LR__0230
04990     3F 81 02 F6 | 	mov	local06, local05
04994     02 80 06 F1 | 	add	local06, #2
04998     40 7D E2 FA | 	rdword	local04, local06
0499c     20 7C 46 F5 | 	or	local04, #32
049a0     02 7E 06 F1 | 	add	local05, #2
049a4     3F 7D 52 FC | 	wrword	local04, local05
049a8                 | LR__0230
049a8     01 7A 06 F1 | 	add	local03, #1
049ac     F0 7B 5E F2 | 	cmps	local03, #496 wcz
049b0     B0 FF 9F CD |  if_b	jmp	#LR__0229
049b4     AF F0 03 F6 | 	mov	ptra, fp
049b8     BF 00 A0 FD | 	call	#popregs_
049bc                 | __system___gc_markcog_ret
049bc     2D 00 64 FD | 	ret
049c0                 | 
049c0                 | __system__write
049c0     03 5A 05 F6 | 	mov	COUNT_, #3
049c4     B0 00 A0 FD | 	call	#pushregs_
049c8     36 77 02 F6 | 	mov	local01, arg01
049cc     37 79 02 F6 | 	mov	local02, arg02
049d0     38 7B 02 F6 | 	mov	local03, arg03
049d4     0A 76 1E F2 | 	cmp	local01, #10 wcz
049d8     1C 00 90 CD |  if_b	jmp	#LR__0231
049dc     01 00 00 FF 
049e0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
049e4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
049e8     01 00 00 FF 
049ec     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
049f0     01 26 66 F6 | 	neg	result1, #1
049f4     28 00 90 FD | 	jmp	#LR__0232
049f8                 | LR__0231
049f8     3B 6D 02 F6 | 	mov	arg01, local01
049fc     01 6C 66 F0 | 	shl	arg01, #1
04a00     3B 6D 02 F1 | 	add	arg01, local01
04a04     04 6C 66 F0 | 	shl	arg01, #4
04a08     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04a0c     0A 6D 02 F1 | 	add	arg01, ptr___system__dat__
04a10     3C 6F 02 F6 | 	mov	arg02, local02
04a14     3D 71 02 F6 | 	mov	arg03, local03
04a18     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04a1c     E0 08 B0 FD | 	call	#__system___vfswrite
04a20                 | LR__0232
04a20     AF F0 03 F6 | 	mov	ptra, fp
04a24     BF 00 A0 FD | 	call	#popregs_
04a28                 | __system__write_ret
04a28     2D 00 64 FD | 	ret
04a2c                 | 
04a2c                 | __system__read
04a2c     03 5A 05 F6 | 	mov	COUNT_, #3
04a30     B0 00 A0 FD | 	call	#pushregs_
04a34     36 77 02 F6 | 	mov	local01, arg01
04a38     37 79 02 F6 | 	mov	local02, arg02
04a3c     38 7B 02 F6 | 	mov	local03, arg03
04a40     0A 76 1E F2 | 	cmp	local01, #10 wcz
04a44     1C 00 90 CD |  if_b	jmp	#LR__0233
04a48     01 00 00 FF 
04a4c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04a50     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04a54     01 00 00 FF 
04a58     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04a5c     01 26 66 F6 | 	neg	result1, #1
04a60     28 00 90 FD | 	jmp	#LR__0234
04a64                 | LR__0233
04a64     3B 6D 02 F6 | 	mov	arg01, local01
04a68     01 6C 66 F0 | 	shl	arg01, #1
04a6c     3B 6D 02 F1 | 	add	arg01, local01
04a70     04 6C 66 F0 | 	shl	arg01, #4
04a74     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04a78     0A 6D 02 F1 | 	add	arg01, ptr___system__dat__
04a7c     3C 6F 02 F6 | 	mov	arg02, local02
04a80     3D 71 02 F6 | 	mov	arg03, local03
04a84     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04a88     38 0A B0 FD | 	call	#__system___vfsread
04a8c                 | LR__0234
04a8c     AF F0 03 F6 | 	mov	ptra, fp
04a90     BF 00 A0 FD | 	call	#popregs_
04a94                 | __system__read_ret
04a94     2D 00 64 FD | 	ret
04a98                 | 
04a98                 | __system__close
04a98     01 5A 05 F6 | 	mov	COUNT_, #1
04a9c     B0 00 A0 FD | 	call	#pushregs_
04aa0     36 77 02 F6 | 	mov	local01, arg01
04aa4     0A 76 1E F2 | 	cmp	local01, #10 wcz
04aa8     1C 00 90 CD |  if_b	jmp	#LR__0235
04aac     01 00 00 FF 
04ab0     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04ab4     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04ab8     01 00 00 FF 
04abc     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04ac0     01 26 66 F6 | 	neg	result1, #1
04ac4     20 00 90 FD | 	jmp	#LR__0236
04ac8                 | LR__0235
04ac8     3B 6D 02 F6 | 	mov	arg01, local01
04acc     01 6C 66 F0 | 	shl	arg01, #1
04ad0     3B 6D 02 F1 | 	add	arg01, local01
04ad4     04 6C 66 F0 | 	shl	arg01, #4
04ad8     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04adc     0A 6D 02 F1 | 	add	arg01, ptr___system__dat__
04ae0     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04ae4     84 03 B0 FD | 	call	#__system___closeraw
04ae8                 | LR__0236
04ae8     AF F0 03 F6 | 	mov	ptra, fp
04aec     BF 00 A0 FD | 	call	#popregs_
04af0                 | __system__close_ret
04af0     2D 00 64 FD | 	ret
04af4                 | 
04af4                 | __system__lseek
04af4     09 5A 05 F6 | 	mov	COUNT_, #9
04af8     B0 00 A0 FD | 	call	#pushregs_
04afc     36 77 02 F6 | 	mov	local01, arg01
04b00     37 79 02 F6 | 	mov	local02, arg02
04b04     38 7B 02 F6 | 	mov	local03, arg03
04b08     0A 76 1E F2 | 	cmp	local01, #10 wcz
04b0c     1C 00 90 CD |  if_b	jmp	#LR__0237
04b10     01 00 00 FF 
04b14     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04b18     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04b1c     01 00 00 FF 
04b20     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04b24     01 26 66 F6 | 	neg	result1, #1
04b28     D8 00 90 FD | 	jmp	#LR__0241
04b2c                 | LR__0237
04b2c     3B 7D 02 F6 | 	mov	local04, local01
04b30     01 7C 66 F0 | 	shl	local04, #1
04b34     3B 7D 02 F1 | 	add	local04, local01
04b38     04 7C 66 F0 | 	shl	local04, #4
04b3c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04b40     0A 7D 02 F1 | 	add	local04, ptr___system__dat__
04b44     2C 7C 06 F1 | 	add	local04, #44
04b48     3E 7F 0A FB | 	rdlong	local05, local04 wz
04b4c     2C 7C 86 F1 | 	sub	local04, #44
04b50     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04b54     1C 00 90 5D |  if_ne	jmp	#LR__0238
04b58     01 00 00 FF 
04b5c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04b60     0A 21 68 FC | 	wrlong	#16, ptr___system__dat__
04b64     01 00 00 FF 
04b68     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04b6c     01 26 66 F6 | 	neg	result1, #1
04b70     90 00 90 FD | 	jmp	#LR__0241
04b74                 | LR__0238
04b74     08 7C 06 F1 | 	add	local04, #8
04b78     3E 7F 02 FB | 	rdlong	local05, local04
04b7c     08 7C 86 F1 | 	sub	local04, #8
04b80     40 7E CE F7 | 	test	local05, #64 wz
04b84     14 00 90 AD |  if_e	jmp	#LR__0239
04b88     08 7C 06 F1 | 	add	local04, #8
04b8c     3E 7F 02 FB | 	rdlong	local05, local04
04b90     80 7E 46 F5 | 	or	local05, #128
04b94     3E 7F 62 FC | 	wrlong	local05, local04
04b98     08 7C 86 F1 | 	sub	local04, #8
04b9c                 | LR__0239
04b9c     2C 7C 06 F1 | 	add	local04, #44
04ba0     3E 7F 02 FB | 	rdlong	local05, local04
04ba4     2C 7C 86 F1 | 	sub	local04, #44
04ba8     3F 81 02 FB | 	rdlong	local06, local05
04bac     04 7E 06 F1 | 	add	local05, #4
04bb0     3F 83 02 FB | 	rdlong	local07, local05
04bb4     3E 6D 02 F6 | 	mov	arg01, local04
04bb8     3C 6F 02 F6 | 	mov	arg02, local02
04bbc     3D 71 02 F6 | 	mov	arg03, local03
04bc0     07 85 02 F6 | 	mov	local08, objptr
04bc4     40 0F 02 F6 | 	mov	objptr, local06
04bc8     2D 82 62 FD | 	call	local07
04bcc     42 0F 02 F6 | 	mov	objptr, local08
04bd0     13 87 02 F6 | 	mov	local09, result1
04bd4     00 86 5E F2 | 	cmps	local09, #0 wcz
04bd8     24 00 90 3D |  if_ae	jmp	#LR__0240
04bdc     43 6D 6A F6 | 	neg	arg01, local09 wz
04be0     01 00 00 FF 
04be4     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04be8     0A 6D 62 FC | 	wrlong	arg01, ptr___system__dat__
04bec     01 00 00 FF 
04bf0     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04bf4     01 26 66 56 |  if_ne	neg	result1, #1
04bf8     00 26 06 A6 |  if_e	mov	result1, #0
04bfc     04 00 90 FD | 	jmp	#LR__0241
04c00                 | LR__0240
04c00     43 27 02 F6 | 	mov	result1, local09
04c04                 | LR__0241
04c04     AF F0 03 F6 | 	mov	ptra, fp
04c08     BF 00 A0 FD | 	call	#popregs_
04c0c                 | __system__lseek_ret
04c0c     2D 00 64 FD | 	ret
04c10                 | 
04c10                 | __system____getftab
04c10     0A 6C 1E F2 | 	cmp	arg01, #10 wcz
04c14     00 26 06 36 |  if_ae	mov	result1, #0
04c18     1C 00 90 3D |  if_ae	jmp	#__system____getftab_ret
04c1c     36 27 02 F6 | 	mov	result1, arg01
04c20     01 26 66 F0 | 	shl	result1, #1
04c24     36 27 02 F1 | 	add	result1, arg01
04c28     04 26 66 F0 | 	shl	result1, #4
04c2c     1C 14 06 F1 | 	add	ptr___system__dat__, #28
04c30     0A 27 02 F1 | 	add	result1, ptr___system__dat__
04c34     1C 14 86 F1 | 	sub	ptr___system__dat__, #28
04c38                 | __system____getftab_ret
04c38     2D 00 64 FD | 	ret
04c3c                 | 
04c3c                 | __system___strrev
04c3c     36 2D CA FA | 	rdbyte	_var01, arg01 wz
04c40     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
04c44     36 2F 02 F6 | 	mov	_var02, arg01
04c48     C0 B3 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
04c4c     93 00 A0 FD | 	call	#FCACHE_LOAD_
04c50                 | LR__0242
04c50     17 2D CA FA | 	rdbyte	_var01, _var02 wz
04c54     01 2E 06 51 |  if_ne	add	_var02, #1
04c58     F4 FF 9F 5D |  if_ne	jmp	#LR__0242
04c5c                 | LR__0243
04c5c     01 2E 86 F1 | 	sub	_var02, #1
04c60                 | LR__0244
04c60     36 2F 5A F2 | 	cmps	_var02, arg01 wcz
04c64     1C 00 90 ED |  if_be	jmp	#LR__0245
04c68     36 31 C2 FA | 	rdbyte	_var03, arg01
04c6c     17 33 C2 FA | 	rdbyte	_var04, _var02
04c70     36 33 42 FC | 	wrbyte	_var04, arg01
04c74     17 31 42 FC | 	wrbyte	_var03, _var02
04c78     01 6C 06 F1 | 	add	arg01, #1
04c7c     01 2E 86 F1 | 	sub	_var02, #1
04c80     DC FF 9F FD | 	jmp	#LR__0244
04c84                 | LR__0245
04c84                 | __system___strrev_ret
04c84     2D 00 64 FD | 	ret
04c88                 | 
04c88                 | __system___fmtpad
04c88     0C 5A 05 F6 | 	mov	COUNT_, #12
04c8c     B0 00 A0 FD | 	call	#pushregs_
04c90     36 77 02 F6 | 	mov	local01, arg01
04c94     37 79 02 F6 | 	mov	local02, arg02
04c98     39 7B 02 F6 | 	mov	local03, arg04
04c9c     3C 7D EA F8 | 	getbyte	local04, local02, #1
04ca0     16 78 46 F0 | 	shr	local02, #22
04ca4     03 78 0E F5 | 	and	local02, #3 wz
04ca8     00 7E 06 F6 | 	mov	local05, #0
04cac     01 78 06 A6 |  if_e	mov	local02, #1
04cb0     3D 79 CA F7 | 	test	local02, local03 wz
04cb4     00 26 06 A6 |  if_e	mov	result1, #0
04cb8     84 00 90 AD |  if_e	jmp	#LR__0249
04cbc     38 7D 82 F1 | 	sub	local04, arg03
04cc0     3E 81 02 F6 | 	mov	local06, local04
04cc4     00 80 5E F2 | 	cmps	local06, #0 wcz
04cc8     00 26 06 E6 |  if_be	mov	result1, #0
04ccc     70 00 90 ED |  if_be	jmp	#LR__0249
04cd0     03 78 0E F2 | 	cmp	local02, #3 wz
04cd4     18 00 90 5D |  if_ne	jmp	#LR__0246
04cd8     01 7A 0E F2 | 	cmp	local03, #1 wz
04cdc     6E 82 62 FD | 	wrz	local07
04ce0     41 81 02 F1 | 	add	local06, local07
04ce4     40 81 52 F6 | 	abs	local06, local06 wc
04ce8     01 80 46 F0 | 	shr	local06, #1
04cec     40 81 62 C6 |  if_b	neg	local06, local06
04cf0                 | LR__0246
04cf0     00 84 06 F6 | 	mov	local08, #0
04cf4                 | LR__0247
04cf4     40 85 5A F2 | 	cmps	local08, local06 wcz
04cf8     40 00 90 3D |  if_ae	jmp	#LR__0248
04cfc     3B 87 02 F6 | 	mov	local09, local01
04d00     43 83 02 FB | 	rdlong	local07, local09
04d04     04 86 06 F1 | 	add	local09, #4
04d08     43 89 02 FB | 	rdlong	local10, local09
04d0c     20 6C 06 F6 | 	mov	arg01, #32
04d10     07 8B 02 F6 | 	mov	local11, objptr
04d14     41 0F 02 F6 | 	mov	objptr, local07
04d18     2D 88 62 FD | 	call	local10
04d1c     45 0F 02 F6 | 	mov	objptr, local11
04d20     13 8D 02 F6 | 	mov	local12, result1
04d24     00 8C 5E F2 | 	cmps	local12, #0 wcz
04d28     46 27 02 C6 |  if_b	mov	result1, local12
04d2c     10 00 90 CD |  if_b	jmp	#LR__0249
04d30     46 7F 02 F1 | 	add	local05, local12
04d34     01 84 06 F1 | 	add	local08, #1
04d38     B8 FF 9F FD | 	jmp	#LR__0247
04d3c                 | LR__0248
04d3c     3F 27 02 F6 | 	mov	result1, local05
04d40                 | LR__0249
04d40     AF F0 03 F6 | 	mov	ptra, fp
04d44     BF 00 A0 FD | 	call	#popregs_
04d48                 | __system___fmtpad_ret
04d48     2D 00 64 FD | 	ret
04d4c                 | 
04d4c                 | __system___uitoa
04d4c     09 5A 05 F6 | 	mov	COUNT_, #9
04d50     B0 00 A0 FD | 	call	#pushregs_
04d54     36 77 02 F6 | 	mov	local01, arg01
04d58     37 79 02 F6 | 	mov	local02, arg02
04d5c     38 7B 02 F6 | 	mov	local03, arg03
04d60     39 7D 02 F6 | 	mov	local04, arg04
04d64     3A 7F 0A F6 | 	mov	local05, arg05 wz
04d68     3B 81 02 F6 | 	mov	local06, local01
04d6c     00 82 06 F6 | 	mov	local07, #0
04d70     37 84 06 56 |  if_ne	mov	local08, #55
04d74     57 84 06 A6 |  if_e	mov	local08, #87
04d78                 | LR__0250
04d78     3C CB 02 F6 | 	mov	muldiva_, local02
04d7c     3D CD 02 F6 | 	mov	muldivb_, local03
04d80     CC 00 A0 FD | 	call	#unsdivide_
04d84     65 87 02 F6 | 	mov	local09, muldiva_
04d88     0A 86 1E F2 | 	cmp	local09, #10 wcz
04d8c     30 86 06 C1 |  if_b	add	local09, #48
04d90     42 87 02 31 |  if_ae	add	local09, local08
04d94     40 87 42 FC | 	wrbyte	local09, local06
04d98     3C CB 02 F6 | 	mov	muldiva_, local02
04d9c     3D CD 02 F6 | 	mov	muldivb_, local03
04da0     01 80 06 F1 | 	add	local06, #1
04da4     CC 00 A0 FD | 	call	#unsdivide_
04da8     66 79 0A F6 | 	mov	local02, muldivb_ wz
04dac     01 82 06 F1 | 	add	local07, #1
04db0     C4 FF 9F 5D |  if_ne	jmp	#LR__0250
04db4     3E 83 1A F2 | 	cmp	local07, local04 wcz
04db8     BC FF 9F CD |  if_b	jmp	#LR__0250
04dbc     40 01 48 FC | 	wrbyte	#0, local06
04dc0     3B 6D 02 F6 | 	mov	arg01, local01
04dc4     74 FE BF FD | 	call	#__system___strrev
04dc8     41 27 02 F6 | 	mov	result1, local07
04dcc     AF F0 03 F6 | 	mov	ptra, fp
04dd0     BF 00 A0 FD | 	call	#popregs_
04dd4                 | __system___uitoa_ret
04dd4     2D 00 64 FD | 	ret
04dd8                 | 
04dd8                 | __system___gettxfunc
04dd8     03 5A 05 F6 | 	mov	COUNT_, #3
04ddc     B0 00 A0 FD | 	call	#pushregs_
04de0     2C FE BF FD | 	call	#__system____getftab
04de4     13 77 0A F6 | 	mov	local01, result1 wz
04de8     14 00 90 AD |  if_e	jmp	#LR__0251
04dec     08 76 06 F1 | 	add	local01, #8
04df0     3B 79 02 FB | 	rdlong	local02, local01
04df4     08 76 86 F1 | 	sub	local01, #8
04df8     3C 7B 0A F6 | 	mov	local03, local02 wz
04dfc     08 00 90 5D |  if_ne	jmp	#LR__0252
04e00                 | LR__0251
04e00     00 26 06 F6 | 	mov	result1, #0
04e04     0C 00 90 FD | 	jmp	#LR__0253
04e08                 | LR__0252
04e08     3B 6D 02 F6 | 	mov	arg01, local01
04e0c     09 6F 02 F6 | 	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
04e10     D0 E9 BF FD | 	call	#__system___make_methodptr
04e14                 | LR__0253
04e14     AF F0 03 F6 | 	mov	ptra, fp
04e18     BF 00 A0 FD | 	call	#popregs_
04e1c                 | __system___gettxfunc_ret
04e1c     2D 00 64 FD | 	ret
04e20                 | 
04e20                 | __system___getiolock_0102
04e20     03 5A 05 F6 | 	mov	COUNT_, #3
04e24     B0 00 A0 FD | 	call	#pushregs_
04e28     E4 FD BF FD | 	call	#__system____getftab
04e2c     13 77 0A F6 | 	mov	local01, result1 wz
04e30     14 00 90 AD |  if_e	jmp	#LR__0254
04e34     08 76 06 F1 | 	add	local01, #8
04e38     3B 79 02 FB | 	rdlong	local02, local01
04e3c     08 76 86 F1 | 	sub	local01, #8
04e40     3C 7B 0A F6 | 	mov	local03, local02 wz
04e44     10 00 90 5D |  if_ne	jmp	#LR__0255
04e48                 | LR__0254
04e48     18 14 06 F1 | 	add	ptr___system__dat__, #24
04e4c     0A 27 02 F6 | 	mov	result1, ptr___system__dat__
04e50     18 14 86 F1 | 	sub	ptr___system__dat__, #24
04e54     08 00 90 FD | 	jmp	#LR__0256
04e58                 | LR__0255
04e58     0C 76 06 F1 | 	add	local01, #12
04e5c     3B 27 02 F6 | 	mov	result1, local01
04e60                 | LR__0256
04e60     AF F0 03 F6 | 	mov	ptra, fp
04e64     BF 00 A0 FD | 	call	#popregs_
04e68                 | __system___getiolock_0102_ret
04e68     2D 00 64 FD | 	ret
04e6c                 | 
04e6c                 | __system___closeraw
04e6c     06 5A 05 F6 | 	mov	COUNT_, #6
04e70     B0 00 A0 FD | 	call	#pushregs_
04e74     36 77 02 F6 | 	mov	local01, arg01
04e78     00 78 06 F6 | 	mov	local02, #0
04e7c     08 76 06 F1 | 	add	local01, #8
04e80     3B 7B 0A FB | 	rdlong	local03, local01 wz
04e84     08 76 86 F1 | 	sub	local01, #8
04e88     1C 00 90 5D |  if_ne	jmp	#LR__0257
04e8c     01 00 00 FF 
04e90     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
04e94     0A 0B 68 FC | 	wrlong	#5, ptr___system__dat__
04e98     01 00 00 FF 
04e9c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
04ea0     01 26 66 F6 | 	neg	result1, #1
04ea4     90 00 90 FD | 	jmp	#LR__0260
04ea8                 | LR__0257
04ea8     28 76 06 F1 | 	add	local01, #40
04eac     3B 7B 0A FB | 	rdlong	local03, local01 wz
04eb0     28 76 86 F1 | 	sub	local01, #40
04eb4     2C 00 90 AD |  if_e	jmp	#LR__0258
04eb8     28 76 06 F1 | 	add	local01, #40
04ebc     3B 7B 02 FB | 	rdlong	local03, local01
04ec0     28 76 86 F1 | 	sub	local01, #40
04ec4     3D 7D 02 FB | 	rdlong	local04, local03
04ec8     04 7A 06 F1 | 	add	local03, #4
04ecc     3D 7F 02 FB | 	rdlong	local05, local03
04ed0     3B 6D 02 F6 | 	mov	arg01, local01
04ed4     07 81 02 F6 | 	mov	local06, objptr
04ed8     3E 0F 02 F6 | 	mov	objptr, local04
04edc     2D 7E 62 FD | 	call	local05
04ee0     40 0F 02 F6 | 	mov	objptr, local06
04ee4                 | LR__0258
04ee4     20 76 06 F1 | 	add	local01, #32
04ee8     3B 7B 0A FB | 	rdlong	local03, local01 wz
04eec     20 76 86 F1 | 	sub	local01, #32
04ef0     30 00 90 AD |  if_e	jmp	#LR__0259
04ef4     20 76 06 F1 | 	add	local01, #32
04ef8     3B 7B 02 FB | 	rdlong	local03, local01
04efc     20 76 86 F1 | 	sub	local01, #32
04f00     3D 7D 02 FB | 	rdlong	local04, local03
04f04     04 7A 06 F1 | 	add	local03, #4
04f08     3D 7F 02 FB | 	rdlong	local05, local03
04f0c     3B 6D 02 F6 | 	mov	arg01, local01
04f10     07 81 02 F6 | 	mov	local06, objptr
04f14     3E 0F 02 F6 | 	mov	objptr, local04
04f18     2D 7E 62 FD | 	call	local05
04f1c     40 0F 02 F6 | 	mov	objptr, local06
04f20     13 79 02 F6 | 	mov	local02, result1
04f24                 | LR__0259
04f24     3B 6D 02 F6 | 	mov	arg01, local01
04f28     00 6E 06 F6 | 	mov	arg02, #0
04f2c     30 70 06 F6 | 	mov	arg03, #48
04f30     A0 00 A0 FD | 	call	#\builtin_bytefill_
04f34     3C 27 02 F6 | 	mov	result1, local02
04f38                 | LR__0260
04f38     AF F0 03 F6 | 	mov	ptra, fp
04f3c     BF 00 A0 FD | 	call	#popregs_
04f40                 | __system___closeraw_ret
04f40     2D 00 64 FD | 	ret
04f44                 | 
04f44                 | __system____default_getc
04f44     05 5A 05 F6 | 	mov	COUNT_, #5
04f48     B0 00 A0 FD | 	call	#pushregs_
04f4c     36 77 02 F6 | 	mov	local01, arg01
04f50     3B 79 02 FB | 	rdlong	local02, local01
04f54     08 78 06 F1 | 	add	local02, #8
04f58     3C 7B 02 FB | 	rdlong	local03, local02
04f5c     08 78 86 F1 | 	sub	local02, #8
04f60     02 7A CE F7 | 	test	local03, #2 wz
04f64     08 00 90 AD |  if_e	jmp	#LR__0261
04f68     3B 6D 02 F6 | 	mov	arg01, local01
04f6c     8C 01 B0 FD | 	call	#__system____default_flush
04f70                 | LR__0261
04f70     08 78 06 F1 | 	add	local02, #8
04f74     3C 7B 02 FB | 	rdlong	local03, local02
04f78     01 7A 46 F5 | 	or	local03, #1
04f7c     3C 7B 62 FC | 	wrlong	local03, local02
04f80     08 78 86 F1 | 	sub	local02, #8
04f84     3C 7D 0A FB | 	rdlong	local04, local02 wz
04f88     0C 00 90 5D |  if_ne	jmp	#LR__0262
04f8c     3B 6D 02 F6 | 	mov	arg01, local01
04f90     4C 08 B0 FD | 	call	#__system____default_filbuf
04f94     13 7D 02 F6 | 	mov	local04, result1
04f98                 | LR__0262
04f98     00 7C 5E F2 | 	cmps	local04, #0 wcz
04f9c     01 26 66 E6 |  if_be	neg	result1, #1
04fa0     1C 00 90 ED |  if_be	jmp	#LR__0263
04fa4     01 7C 86 F1 | 	sub	local04, #1
04fa8     3C 7D 62 FC | 	wrlong	local04, local02
04fac     04 78 06 F1 | 	add	local02, #4
04fb0     3C 7F 02 FB | 	rdlong	local05, local02
04fb4     3F 27 C2 FA | 	rdbyte	result1, local05
04fb8     01 7E 06 F1 | 	add	local05, #1
04fbc     3C 7F 62 FC | 	wrlong	local05, local02
04fc0                 | LR__0263
04fc0     AF F0 03 F6 | 	mov	ptra, fp
04fc4     BF 00 A0 FD | 	call	#popregs_
04fc8                 | __system____default_getc_ret
04fc8     2D 00 64 FD | 	ret
04fcc                 | 
04fcc                 | __system____default_putc
04fcc     06 5A 05 F6 | 	mov	COUNT_, #6
04fd0     B0 00 A0 FD | 	call	#pushregs_
04fd4     36 77 02 F6 | 	mov	local01, arg01
04fd8     37 79 02 F6 | 	mov	local02, arg02
04fdc     3C 7B 02 FB | 	rdlong	local03, local02
04fe0     08 7A 06 F1 | 	add	local03, #8
04fe4     3D 7D 02 FB | 	rdlong	local04, local03
04fe8     08 7A 86 F1 | 	sub	local03, #8
04fec     01 7C CE F7 | 	test	local04, #1 wz
04ff0     08 00 90 AD |  if_e	jmp	#LR__0264
04ff4     3C 6D 02 F6 | 	mov	arg01, local02
04ff8     00 01 B0 FD | 	call	#__system____default_flush
04ffc                 | LR__0264
04ffc     08 7A 06 F1 | 	add	local03, #8
05000     3D 7D 02 FB | 	rdlong	local04, local03
05004     02 7C 46 F5 | 	or	local04, #2
05008     3D 7D 62 FC | 	wrlong	local04, local03
0500c     08 7A 86 F1 | 	sub	local03, #8
05010     3D 7F 02 FB | 	rdlong	local05, local03
05014     3F 81 02 F6 | 	mov	local06, local05
05018     0C 7A 06 F1 | 	add	local03, #12
0501c     3D 81 02 F1 | 	add	local06, local03
05020     40 77 42 FC | 	wrbyte	local01, local06
05024     FF 76 06 F5 | 	and	local01, #255
05028     01 7E 06 F1 | 	add	local05, #1
0502c     0C 7A 86 F1 | 	sub	local03, #12
05030     3D 7F 62 FC | 	wrlong	local05, local03
05034     02 00 00 FF 
05038     00 7E 0E F2 | 	cmp	local05, ##1024 wz
0503c     10 00 90 5D |  if_ne	jmp	#LR__0265
05040     3C 6D 02 F6 | 	mov	arg01, local02
05044     B4 00 B0 FD | 	call	#__system____default_flush
05048     00 26 0E F2 | 	cmp	result1, #0 wz
0504c     01 76 66 56 |  if_ne	neg	local01, #1
05050                 | LR__0265
05050     3B 27 02 F6 | 	mov	result1, local01
05054     AF F0 03 F6 | 	mov	ptra, fp
05058     BF 00 A0 FD | 	call	#popregs_
0505c                 | __system____default_putc_ret
0505c     2D 00 64 FD | 	ret
05060                 | 
05060                 | __system____default_putc_terminal
05060     06 5A 05 F6 | 	mov	COUNT_, #6
05064     B0 00 A0 FD | 	call	#pushregs_
05068     36 77 02 F6 | 	mov	local01, arg01
0506c     37 79 02 F6 | 	mov	local02, arg02
05070     3C 7B 02 FB | 	rdlong	local03, local02
05074     08 7A 06 F1 | 	add	local03, #8
05078     3D 7D 02 FB | 	rdlong	local04, local03
0507c     08 7A 86 F1 | 	sub	local03, #8
05080     01 7C CE F7 | 	test	local04, #1 wz
05084     08 00 90 AD |  if_e	jmp	#LR__0266
05088     3C 6D 02 F6 | 	mov	arg01, local02
0508c     6C 00 B0 FD | 	call	#__system____default_flush
05090                 | LR__0266
05090     08 7A 06 F1 | 	add	local03, #8
05094     3D 7D 02 FB | 	rdlong	local04, local03
05098     02 7C 46 F5 | 	or	local04, #2
0509c     3D 7D 62 FC | 	wrlong	local04, local03
050a0     08 7A 86 F1 | 	sub	local03, #8
050a4     3D 7F 02 FB | 	rdlong	local05, local03
050a8     3F 81 02 F6 | 	mov	local06, local05
050ac     0C 7A 06 F1 | 	add	local03, #12
050b0     3D 81 02 F1 | 	add	local06, local03
050b4     40 77 42 FC | 	wrbyte	local01, local06
050b8     FF 76 06 F5 | 	and	local01, #255
050bc     0C 7A 86 F1 | 	sub	local03, #12
050c0     01 7E 06 F1 | 	add	local05, #1
050c4     3D 7F 62 FC | 	wrlong	local05, local03
050c8     0A 76 0E F2 | 	cmp	local01, #10 wz
050cc     0C 00 90 AD |  if_e	jmp	#LR__0267
050d0     02 00 00 FF 
050d4     00 7E 0E F2 | 	cmp	local05, ##1024 wz
050d8     10 00 90 5D |  if_ne	jmp	#LR__0268
050dc                 | LR__0267
050dc     3C 6D 02 F6 | 	mov	arg01, local02
050e0     18 00 B0 FD | 	call	#__system____default_flush
050e4     00 26 0E F2 | 	cmp	result1, #0 wz
050e8     01 76 66 56 |  if_ne	neg	local01, #1
050ec                 | LR__0268
050ec     3B 27 02 F6 | 	mov	result1, local01
050f0     AF F0 03 F6 | 	mov	ptra, fp
050f4     BF 00 A0 FD | 	call	#popregs_
050f8                 | __system____default_putc_terminal_ret
050f8     2D 00 64 FD | 	ret
050fc                 | 
050fc                 | __system____default_flush
050fc     0F 5A 05 F6 | 	mov	COUNT_, #15
05100     B0 00 A0 FD | 	call	#pushregs_
05104     36 77 02 F6 | 	mov	local01, arg01
05108     3B 79 02 FB | 	rdlong	local02, local01
0510c     3C 7B 02 FB | 	rdlong	local03, local02
05110     08 78 06 F1 | 	add	local02, #8
05114     3C 7D 02 FB | 	rdlong	local04, local02
05118     08 78 86 F1 | 	sub	local02, #8
0511c     02 7C CE F7 | 	test	local04, #2 wz
05120     B8 00 90 AD |  if_e	jmp	#LR__0271
05124     00 7A 5E F2 | 	cmps	local03, #0 wcz
05128     30 01 90 ED |  if_be	jmp	#LR__0273
0512c     08 76 06 F1 | 	add	local01, #8
05130     3B 7D 02 FB | 	rdlong	local04, local01
05134     08 76 86 F1 | 	sub	local01, #8
05138     40 7C CE F7 | 	test	local04, #64 wz
0513c     5C 00 90 AD |  if_e	jmp	#LR__0270
05140     08 76 06 F1 | 	add	local01, #8
05144     3B 7D 02 FB | 	rdlong	local04, local01
05148     08 76 86 F1 | 	sub	local01, #8
0514c     80 7C CE F7 | 	test	local04, #128 wz
05150     48 00 90 AD |  if_e	jmp	#LR__0269
05154     2C 76 06 F1 | 	add	local01, #44
05158     3B 7D 02 FB | 	rdlong	local04, local01
0515c     2C 76 86 F1 | 	sub	local01, #44
05160     3E 7F 02 FB | 	rdlong	local05, local04
05164     04 7C 06 F1 | 	add	local04, #4
05168     3E 81 02 FB | 	rdlong	local06, local04
0516c     3B 6D 02 F6 | 	mov	arg01, local01
05170     00 6E 06 F6 | 	mov	arg02, #0
05174     02 70 06 F6 | 	mov	arg03, #2
05178     07 83 02 F6 | 	mov	local07, objptr
0517c     3F 0F 02 F6 | 	mov	objptr, local05
05180     2D 80 62 FD | 	call	local06
05184     41 0F 02 F6 | 	mov	objptr, local07
05188     08 76 06 F1 | 	add	local01, #8
0518c     3B 7D 02 FB | 	rdlong	local04, local01
05190     80 7C 26 F5 | 	andn	local04, #128
05194     3B 7D 62 FC | 	wrlong	local04, local01
05198     08 76 86 F1 | 	sub	local01, #8
0519c                 | LR__0269
0519c                 | LR__0270
0519c     14 76 06 F1 | 	add	local01, #20
051a0     3B 7D 02 FB | 	rdlong	local04, local01
051a4     14 76 86 F1 | 	sub	local01, #20
051a8     3E 7F 02 FB | 	rdlong	local05, local04
051ac     04 7C 06 F1 | 	add	local04, #4
051b0     3E 81 02 FB | 	rdlong	local06, local04
051b4     0C 78 06 F1 | 	add	local02, #12
051b8     3C 6F 02 F6 | 	mov	arg02, local02
051bc     0C 78 86 F1 | 	sub	local02, #12
051c0     3B 6D 02 F6 | 	mov	arg01, local01
051c4     3D 71 02 F6 | 	mov	arg03, local03
051c8     07 85 02 F6 | 	mov	local08, objptr
051cc     3F 0F 02 F6 | 	mov	objptr, local05
051d0     2D 80 62 FD | 	call	local06
051d4     42 0F 02 F6 | 	mov	objptr, local08
051d8     80 00 90 FD | 	jmp	#LR__0273
051dc                 | LR__0271
051dc     08 78 06 F1 | 	add	local02, #8
051e0     3C 7D 02 FB | 	rdlong	local04, local02
051e4     08 78 86 F1 | 	sub	local02, #8
051e8     01 7C CE F7 | 	test	local04, #1 wz
051ec     6C 00 90 AD |  if_e	jmp	#LR__0272
051f0     00 7A 0E F2 | 	cmp	local03, #0 wz
051f4     64 00 90 AD |  if_e	jmp	#LR__0272
051f8     2C 76 06 F1 | 	add	local01, #44
051fc     3B 87 02 FB | 	rdlong	local09, local01
05200     2C 76 86 F1 | 	sub	local01, #44
05204     43 7D 02 F6 | 	mov	local04, local09
05208     3E 7F 02 FB | 	rdlong	local05, local04
0520c     04 7C 06 F1 | 	add	local04, #4
05210     3E 89 02 FB | 	rdlong	local10, local04
05214     04 7C 86 F1 | 	sub	local04, #4
05218     44 81 02 F6 | 	mov	local06, local10
0521c     3B 8B 02 F6 | 	mov	local11, local01
05220     3D 8D 02 F6 | 	mov	local12, local03
05224     46 8D 62 F6 | 	neg	local12, local12
05228     46 8F 02 F6 | 	mov	local13, local12
0522c     01 82 06 F6 | 	mov	local07, #1
05230     45 6D 02 F6 | 	mov	arg01, local11
05234     47 6F 02 F6 | 	mov	arg02, local13
05238     01 70 06 F6 | 	mov	arg03, #1
0523c     07 85 02 F6 | 	mov	local08, objptr
05240     3F 0F 02 F6 | 	mov	objptr, local05
05244     2D 80 62 FD | 	call	local06
05248     42 0F 02 F6 | 	mov	objptr, local08
0524c     13 91 02 F6 | 	mov	local14, result1
05250     48 93 02 F6 | 	mov	local15, local14
05254     00 92 5E F2 | 	cmps	local15, #0 wcz
05258     3D 93 02 36 |  if_ae	mov	local15, local03
0525c                 | LR__0272
0525c                 | LR__0273
0525c     3C 01 68 FC | 	wrlong	#0, local02
05260     04 78 06 F1 | 	add	local02, #4
05264     3C 01 68 FC | 	wrlong	#0, local02
05268     04 78 06 F1 | 	add	local02, #4
0526c     3C 01 68 FC | 	wrlong	#0, local02
05270     00 26 06 F6 | 	mov	result1, #0
05274     AF F0 03 F6 | 	mov	ptra, fp
05278     BF 00 A0 FD | 	call	#popregs_
0527c                 | __system____default_flush_ret
0527c     2D 00 64 FD | 	ret
05280                 | 
05280                 | __system___rxtxioctl_0131
05280     02 5A 05 F6 | 	mov	COUNT_, #2
05284     B0 00 A0 FD | 	call	#pushregs_
05288     37 77 02 F6 | 	mov	local01, arg02
0528c     38 79 02 F6 | 	mov	local02, arg03
05290     00 77 0E F2 | 	cmp	local01, #256 wz
05294     0C 00 90 AD |  if_e	jmp	#LR__0274
05298     01 77 0E F2 | 	cmp	local01, #257 wz
0529c     1C 00 90 AD |  if_e	jmp	#LR__0275
052a0     30 00 90 FD | 	jmp	#LR__0276
052a4                 | LR__0274
052a4     08 14 06 F1 | 	add	ptr___system__dat__, #8
052a8     0A 27 02 FB | 	rdlong	result1, ptr___system__dat__
052ac     08 14 86 F1 | 	sub	ptr___system__dat__, #8
052b0     3C 27 62 FC | 	wrlong	result1, local02
052b4     00 26 06 F6 | 	mov	result1, #0
052b8     30 00 90 FD | 	jmp	#LR__0277
052bc                 | LR__0275
052bc     3C 6D 02 FB | 	rdlong	arg01, local02
052c0     08 14 06 F1 | 	add	ptr___system__dat__, #8
052c4     0A 6D 62 FC | 	wrlong	arg01, ptr___system__dat__
052c8     08 14 86 F1 | 	sub	ptr___system__dat__, #8
052cc     00 26 06 F6 | 	mov	result1, #0
052d0     18 00 90 FD | 	jmp	#LR__0277
052d4                 | LR__0276
052d4     01 00 00 FF 
052d8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
052dc     0A 15 68 FC | 	wrlong	#10, ptr___system__dat__
052e0     01 00 00 FF 
052e4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
052e8     01 26 66 F6 | 	neg	result1, #1
052ec                 | LR__0277
052ec     AF F0 03 F6 | 	mov	ptra, fp
052f0     BF 00 A0 FD | 	call	#popregs_
052f4                 | __system___rxtxioctl_0131_ret
052f4     2D 00 64 FD | 	ret
052f8                 | 
052f8                 | __system____dummy_flush_0132
052f8     00 26 06 F6 | 	mov	result1, #0
052fc                 | __system____dummy_flush_0132_ret
052fc     2D 00 64 FD | 	ret
05300                 | 
05300                 | __system___vfswrite
05300     0B 5A 05 F6 | 	mov	COUNT_, #11
05304     B0 00 A0 FD | 	call	#pushregs_
05308     36 77 02 F6 | 	mov	local01, arg01
0530c     37 79 02 F6 | 	mov	local02, arg02
05310     38 7B 02 F6 | 	mov	local03, arg03
05314     3C 7D 02 F6 | 	mov	local04, local02
05318     08 76 06 F1 | 	add	local01, #8
0531c     3B 7F 02 FB | 	rdlong	local05, local01
05320     08 76 86 F1 | 	sub	local01, #8
05324     02 7E CE F7 | 	test	local05, #2 wz
05328     1C 00 90 5D |  if_ne	jmp	#LR__0278
0532c     01 00 00 FF 
05330     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05334     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05338     01 00 00 FF 
0533c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05340     01 26 66 F6 | 	neg	result1, #1
05344     70 01 90 FD | 	jmp	#LR__0286
05348                 | LR__0278
05348     08 76 06 F1 | 	add	local01, #8
0534c     3B 7F 02 FB | 	rdlong	local05, local01
05350     08 76 86 F1 | 	sub	local01, #8
05354     40 7E CE F7 | 	test	local05, #64 wz
05358     5C 00 90 AD |  if_e	jmp	#LR__0280
0535c     08 76 06 F1 | 	add	local01, #8
05360     3B 7F 02 FB | 	rdlong	local05, local01
05364     08 76 86 F1 | 	sub	local01, #8
05368     80 7E CE F7 | 	test	local05, #128 wz
0536c     48 00 90 AD |  if_e	jmp	#LR__0279
05370     2C 76 06 F1 | 	add	local01, #44
05374     3B 7F 02 FB | 	rdlong	local05, local01
05378     2C 76 86 F1 | 	sub	local01, #44
0537c     3F 81 02 FB | 	rdlong	local06, local05
05380     04 7E 06 F1 | 	add	local05, #4
05384     3F 83 02 FB | 	rdlong	local07, local05
05388     3B 6D 02 F6 | 	mov	arg01, local01
0538c     00 6E 06 F6 | 	mov	arg02, #0
05390     02 70 06 F6 | 	mov	arg03, #2
05394     07 85 02 F6 | 	mov	local08, objptr
05398     40 0F 02 F6 | 	mov	objptr, local06
0539c     2D 82 62 FD | 	call	local07
053a0     42 0F 02 F6 | 	mov	objptr, local08
053a4     08 76 06 F1 | 	add	local01, #8
053a8     3B 7F 02 FB | 	rdlong	local05, local01
053ac     80 7E 26 F5 | 	andn	local05, #128
053b0     3B 7F 62 FC | 	wrlong	local05, local01
053b4     08 76 86 F1 | 	sub	local01, #8
053b8                 | LR__0279
053b8                 | LR__0280
053b8     14 76 06 F1 | 	add	local01, #20
053bc     3B 7F 0A FB | 	rdlong	local05, local01 wz
053c0     14 76 86 F1 | 	sub	local01, #20
053c4     7C 00 90 AD |  if_e	jmp	#LR__0282
053c8     14 76 06 F1 | 	add	local01, #20
053cc     3B 7F 02 FB | 	rdlong	local05, local01
053d0     14 76 86 F1 | 	sub	local01, #20
053d4     3F 81 02 FB | 	rdlong	local06, local05
053d8     04 7E 06 F1 | 	add	local05, #4
053dc     3F 83 02 FB | 	rdlong	local07, local05
053e0     3C 6F 02 F6 | 	mov	arg02, local02
053e4     3D 71 02 F6 | 	mov	arg03, local03
053e8     3B 6D 02 F6 | 	mov	arg01, local01
053ec     07 85 02 F6 | 	mov	local08, objptr
053f0     40 0F 02 F6 | 	mov	objptr, local06
053f4     2D 82 62 FD | 	call	local07
053f8     42 0F 02 F6 | 	mov	objptr, local08
053fc     13 87 02 F6 | 	mov	local09, result1
05400     00 86 5E F2 | 	cmps	local09, #0 wcz
05404     34 00 90 3D |  if_ae	jmp	#LR__0281
05408     08 76 06 F1 | 	add	local01, #8
0540c     3B 7F 02 FB | 	rdlong	local05, local01
05410     20 7E 46 F5 | 	or	local05, #32
05414     3B 7F 62 FC | 	wrlong	local05, local01
05418     01 00 00 FF 
0541c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05420     0A 87 62 FC | 	wrlong	local09, ptr___system__dat__
05424     01 00 00 FF 
05428     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0542c     00 86 0E F2 | 	cmp	local09, #0 wz
05430     01 26 66 56 |  if_ne	neg	result1, #1
05434     00 26 06 A6 |  if_e	mov	result1, #0
05438     7C 00 90 FD | 	jmp	#LR__0286
0543c                 | LR__0281
0543c     43 27 02 F6 | 	mov	result1, local09
05440     74 00 90 FD | 	jmp	#LR__0286
05444                 | LR__0282
05444     18 76 06 F1 | 	add	local01, #24
05448     3B 89 0A FB | 	rdlong	local10, local01 wz
0544c     18 76 86 F1 | 	sub	local01, #24
05450     1C 00 90 5D |  if_ne	jmp	#LR__0283
05454     01 00 00 FF 
05458     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
0545c     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05460     01 00 00 FF 
05464     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05468     01 26 66 F6 | 	neg	result1, #1
0546c     48 00 90 FD | 	jmp	#LR__0286
05470                 | LR__0283
05470     00 86 06 F6 | 	mov	local09, #0
05474                 | LR__0284
05474     00 7A 1E F2 | 	cmp	local03, #0 wcz
05478     38 00 90 ED |  if_be	jmp	#LR__0285
0547c     44 7F 02 F6 | 	mov	local05, local10
05480     3F 81 02 FB | 	rdlong	local06, local05
05484     04 7E 06 F1 | 	add	local05, #4
05488     3F 83 02 FB | 	rdlong	local07, local05
0548c     3E 6D C2 FA | 	rdbyte	arg01, local04
05490     3B 6F 02 F6 | 	mov	arg02, local01
05494     07 8B 02 F6 | 	mov	local11, objptr
05498     40 0F 02 F6 | 	mov	objptr, local06
0549c     01 7C 06 F1 | 	add	local04, #1
054a0     2D 82 62 FD | 	call	local07
054a4     45 0F 02 F6 | 	mov	objptr, local11
054a8     13 87 02 F1 | 	add	local09, result1
054ac     01 7A 86 F1 | 	sub	local03, #1
054b0     C0 FF 9F FD | 	jmp	#LR__0284
054b4                 | LR__0285
054b4     43 27 02 F6 | 	mov	result1, local09
054b8                 | LR__0286
054b8     AF F0 03 F6 | 	mov	ptra, fp
054bc     BF 00 A0 FD | 	call	#popregs_
054c0                 | __system___vfswrite_ret
054c0     2D 00 64 FD | 	ret
054c4                 | 
054c4                 | __system___vfsread
054c4     0E 5A 05 F6 | 	mov	COUNT_, #14
054c8     B0 00 A0 FD | 	call	#pushregs_
054cc     28 F0 07 F1 | 	add	ptra, #40
054d0     04 5E 05 F1 | 	add	fp, #4
054d4     AF 6C 62 FC | 	wrlong	arg01, fp
054d8     04 5E 05 F1 | 	add	fp, #4
054dc     AF 6E 62 FC | 	wrlong	arg02, fp
054e0     04 5E 05 F1 | 	add	fp, #4
054e4     AF 70 62 FC | 	wrlong	arg03, fp
054e8     04 5E 85 F1 | 	sub	fp, #4
054ec     AF 76 02 FB | 	rdlong	local01, fp
054f0     14 5E 05 F1 | 	add	fp, #20
054f4     AF 76 62 FC | 	wrlong	local01, fp
054f8     04 5E 05 F1 | 	add	fp, #4
054fc     AF 00 68 FC | 	wrlong	#0, fp
05500     1C 5E 85 F1 | 	sub	fp, #28
05504     AF 78 02 FB | 	rdlong	local02, fp
05508     04 5E 85 F1 | 	sub	fp, #4
0550c     08 78 06 F1 | 	add	local02, #8
05510     3C 77 02 FB | 	rdlong	local01, local02
05514     01 76 CE F7 | 	test	local01, #1 wz
05518     1C 00 90 5D |  if_ne	jmp	#LR__0287
0551c     01 00 00 FF 
05520     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05524     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05528     01 00 00 FF 
0552c     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
05530     01 26 66 F6 | 	neg	result1, #1
05534     9C 02 90 FD | 	jmp	#LR__0295
05538                 | LR__0287
05538     04 5E 05 F1 | 	add	fp, #4
0553c     AF 76 02 FB | 	rdlong	local01, fp
05540     04 5E 85 F1 | 	sub	fp, #4
05544     10 76 06 F1 | 	add	local01, #16
05548     3B 7B 0A FB | 	rdlong	local03, local01 wz
0554c     B4 00 90 AD |  if_e	jmp	#LR__0289
05550     04 5E 05 F1 | 	add	fp, #4
05554     AF 7C 02 FB | 	rdlong	local04, fp
05558     10 7C 06 F1 | 	add	local04, #16
0555c     3E 77 02 FB | 	rdlong	local01, local04
05560     3B 79 02 FB | 	rdlong	local02, local01
05564     04 76 06 F1 | 	add	local01, #4
05568     3B 7B 02 FB | 	rdlong	local03, local01
0556c     AF 6C 02 FB | 	rdlong	arg01, fp
05570     04 5E 05 F1 | 	add	fp, #4
05574     AF 6E 02 FB | 	rdlong	arg02, fp
05578     04 5E 05 F1 | 	add	fp, #4
0557c     AF 70 02 FB | 	rdlong	arg03, fp
05580     0C 5E 85 F1 | 	sub	fp, #12
05584     07 7F 02 F6 | 	mov	local05, objptr
05588     3C 0F 02 F6 | 	mov	objptr, local02
0558c     2D 7A 62 FD | 	call	local03
05590     3F 0F 02 F6 | 	mov	objptr, local05
05594     10 5E 05 F1 | 	add	fp, #16
05598     AF 26 62 FC | 	wrlong	result1, fp
0559c     10 5E 85 F1 | 	sub	fp, #16
055a0     00 26 5E F2 | 	cmps	result1, #0 wcz
055a4     4C 00 90 3D |  if_ae	jmp	#LR__0288
055a8     04 5E 05 F1 | 	add	fp, #4
055ac     AF 76 02 FB | 	rdlong	local01, fp
055b0     3B 7D 02 F6 | 	mov	local04, local01
055b4     08 7C 06 F1 | 	add	local04, #8
055b8     3E 7B 02 FB | 	rdlong	local03, local04
055bc     20 7A 46 F5 | 	or	local03, #32
055c0     08 76 06 F1 | 	add	local01, #8
055c4     3B 7B 62 FC | 	wrlong	local03, local01
055c8     0C 5E 05 F1 | 	add	fp, #12
055cc     AF 6C 0A FB | 	rdlong	arg01, fp wz
055d0     10 5E 85 F1 | 	sub	fp, #16
055d4     01 00 00 FF 
055d8     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
055dc     0A 6D 62 FC | 	wrlong	arg01, ptr___system__dat__
055e0     01 00 00 FF 
055e4     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
055e8     01 26 66 56 |  if_ne	neg	result1, #1
055ec     00 26 06 A6 |  if_e	mov	result1, #0
055f0     E0 01 90 FD | 	jmp	#LR__0295
055f4                 | LR__0288
055f4     10 5E 05 F1 | 	add	fp, #16
055f8     AF 26 02 FB | 	rdlong	result1, fp
055fc     10 5E 85 F1 | 	sub	fp, #16
05600     D0 01 90 FD | 	jmp	#LR__0295
05604                 | LR__0289
05604     04 5E 05 F1 | 	add	fp, #4
05608     AF 76 02 FB | 	rdlong	local01, fp
0560c     1C 76 06 F1 | 	add	local01, #28
05610     3B 7B 02 FB | 	rdlong	local03, local01
05614     14 5E 05 F1 | 	add	fp, #20
05618     AF 7A 62 FC | 	wrlong	local03, fp
0561c     AF 76 0A FB | 	rdlong	local01, fp wz
05620     18 5E 85 F1 | 	sub	fp, #24
05624     1C 00 90 5D |  if_ne	jmp	#LR__0290
05628     01 00 00 FF 
0562c     5C 14 06 F1 | 	add	ptr___system__dat__, ##604
05630     0A 0D 68 FC | 	wrlong	#6, ptr___system__dat__
05634     01 00 00 FF 
05638     5C 14 86 F1 | 	sub	ptr___system__dat__, ##604
0563c     01 26 66 F6 | 	neg	result1, #1
05640     90 01 90 FD | 	jmp	#LR__0295
05644                 | LR__0290
05644     04 5E 05 F1 | 	add	fp, #4
05648     AF 76 02 FB | 	rdlong	local01, fp
0564c     04 5E 85 F1 | 	sub	fp, #4
05650     24 76 06 F1 | 	add	local01, #36
05654     3B 7B 0A FB | 	rdlong	local03, local01 wz
05658     A0 00 90 AD |  if_e	jmp	#LR__0292
0565c     04 5E 05 F1 | 	add	fp, #4
05660     AF 80 02 FB | 	rdlong	local06, fp
05664     40 7D 02 F6 | 	mov	local04, local06
05668     24 7C 06 F1 | 	add	local04, #36
0566c     3E 83 02 FB | 	rdlong	local07, local04
05670     41 77 02 F6 | 	mov	local01, local07
05674     3B 79 02 FB | 	rdlong	local02, local01
05678     04 76 06 F1 | 	add	local01, #4
0567c     3B 85 02 FB | 	rdlong	local08, local01
05680     42 7B 02 F6 | 	mov	local03, local08
05684     40 87 02 F6 | 	mov	local09, local06
05688     43 89 02 F6 | 	mov	local10, local09
0568c     00 8B 06 F6 | 	mov	local11, #256
05690     20 5E 05 F1 | 	add	fp, #32
05694     AF 8C 02 F6 | 	mov	local12, fp
05698     46 8F 02 F6 | 	mov	local13, local12
0569c     44 6D 02 F6 | 	mov	arg01, local10
056a0     00 6F 06 F6 | 	mov	arg02, #256
056a4     47 71 02 F6 | 	mov	arg03, local13
056a8     07 91 02 F6 | 	mov	local14, objptr
056ac     3C 0F 02 F6 | 	mov	objptr, local02
056b0     24 5E 85 F1 | 	sub	fp, #36
056b4     2D 7A 62 FD | 	call	local03
056b8     48 0F 02 F6 | 	mov	objptr, local14
056bc     13 7F 02 F6 | 	mov	local05, result1
056c0     10 5E 05 F1 | 	add	fp, #16
056c4     AF 7E 62 FC | 	wrlong	local05, fp
056c8     AF 78 0A FB | 	rdlong	local02, fp wz
056cc     10 5E 85 F1 | 	sub	fp, #16
056d0     28 00 90 5D |  if_ne	jmp	#LR__0291
056d4     24 5E 05 F1 | 	add	fp, #36
056d8     AF 7C 02 FB | 	rdlong	local04, fp
056dc     24 5E 85 F1 | 	sub	fp, #36
056e0     3E 7B 02 F6 | 	mov	local03, local04
056e4     02 7A 0E F5 | 	and	local03, #2 wz
056e8     10 00 90 AD |  if_e	jmp	#LR__0291
056ec     01 76 06 F6 | 	mov	local01, #1
056f0     20 5E 05 F1 | 	add	fp, #32
056f4     AF 02 68 FC | 	wrlong	#1, fp
056f8     20 5E 85 F1 | 	sub	fp, #32
056fc                 | LR__0291
056fc                 | LR__0292
056fc     10 5E 05 F1 | 	add	fp, #16
05700     AF 00 68 FC | 	wrlong	#0, fp
05704     10 5E 85 F1 | 	sub	fp, #16
05708                 | LR__0293
05708     0C 5E 05 F1 | 	add	fp, #12
0570c     AF 76 02 FB | 	rdlong	local01, fp
05710     0C 5E 85 F1 | 	sub	fp, #12
05714     00 76 1E F2 | 	cmp	local01, #0 wcz
05718     AC 00 90 ED |  if_be	jmp	#LR__0294
0571c     18 5E 05 F1 | 	add	fp, #24
05720     AF 76 02 FB | 	rdlong	local01, fp
05724     3B 79 02 FB | 	rdlong	local02, local01
05728     04 76 06 F1 | 	add	local01, #4
0572c     3B 7B 02 FB | 	rdlong	local03, local01
05730     14 5E 85 F1 | 	sub	fp, #20
05734     AF 6C 02 FB | 	rdlong	arg01, fp
05738     04 5E 85 F1 | 	sub	fp, #4
0573c     07 89 02 F6 | 	mov	local10, objptr
05740     3C 0F 02 F6 | 	mov	objptr, local02
05744     2D 7A 62 FD | 	call	local03
05748     44 0F 02 F6 | 	mov	objptr, local10
0574c     13 87 02 F6 | 	mov	local09, result1
05750     14 5E 05 F1 | 	add	fp, #20
05754     AF 86 62 FC | 	wrlong	local09, fp
05758     14 5E 85 F1 | 	sub	fp, #20
0575c     00 86 5E F2 | 	cmps	local09, #0 wcz
05760     64 00 90 CD |  if_b	jmp	#LR__0294
05764     1C 5E 05 F1 | 	add	fp, #28
05768     AF 76 02 FB | 	rdlong	local01, fp
0576c     3B 7B 02 F6 | 	mov	local03, local01
05770     01 7A 06 F1 | 	add	local03, #1
05774     AF 7A 62 FC | 	wrlong	local03, fp
05778     08 5E 85 F1 | 	sub	fp, #8
0577c     AF 80 02 FB | 	rdlong	local06, fp
05780     3B 81 42 FC | 	wrbyte	local06, local01
05784     04 5E 85 F1 | 	sub	fp, #4
05788     AF 76 02 FB | 	rdlong	local01, fp
0578c     01 76 06 F1 | 	add	local01, #1
05790     AF 76 62 FC | 	wrlong	local01, fp
05794     04 5E 85 F1 | 	sub	fp, #4
05798     AF 76 02 FB | 	rdlong	local01, fp
0579c     01 76 86 F1 | 	sub	local01, #1
057a0     AF 76 62 FC | 	wrlong	local01, fp
057a4     14 5E 05 F1 | 	add	fp, #20
057a8     AF 76 0A FB | 	rdlong	local01, fp wz
057ac     20 5E 85 F1 | 	sub	fp, #32
057b0     54 FF 9F AD |  if_e	jmp	#LR__0293
057b4     14 5E 05 F1 | 	add	fp, #20
057b8     AF 7A 02 FB | 	rdlong	local03, fp
057bc     14 5E 85 F1 | 	sub	fp, #20
057c0     0A 7A 0E F2 | 	cmp	local03, #10 wz
057c4     40 FF 9F 5D |  if_ne	jmp	#LR__0293
057c8                 | LR__0294
057c8     10 5E 05 F1 | 	add	fp, #16
057cc     AF 26 02 FB | 	rdlong	result1, fp
057d0     10 5E 85 F1 | 	sub	fp, #16
057d4                 | LR__0295
057d4     AF F0 03 F6 | 	mov	ptra, fp
057d8     BF 00 A0 FD | 	call	#popregs_
057dc                 | __system___vfsread_ret
057dc     2D 00 64 FD | 	ret
057e0                 | 
057e0                 | __system____default_filbuf
057e0     06 5A 05 F6 | 	mov	COUNT_, #6
057e4     B0 00 A0 FD | 	call	#pushregs_
057e8     36 77 02 FB | 	rdlong	local01, arg01
057ec     10 6C 06 F1 | 	add	arg01, #16
057f0     36 79 02 FB | 	rdlong	local02, arg01
057f4     10 6C 86 F1 | 	sub	arg01, #16
057f8     3C 7B 02 FB | 	rdlong	local03, local02
057fc     04 78 06 F1 | 	add	local02, #4
05800     3C 7D 02 FB | 	rdlong	local04, local02
05804     0C 76 06 F1 | 	add	local01, #12
05808     3B 6F 02 F6 | 	mov	arg02, local01
0580c     0C 76 86 F1 | 	sub	local01, #12
05810     0A 70 C6 F9 | 	decod	arg03, #10
05814     07 7F 02 F6 | 	mov	local05, objptr
05818     3D 0F 02 F6 | 	mov	objptr, local03
0581c     2D 7C 62 FD | 	call	local04
05820     3F 0F 02 F6 | 	mov	objptr, local05
05824     13 81 02 F6 | 	mov	local06, result1
05828     00 80 5E F2 | 	cmps	local06, #0 wcz
0582c     01 26 66 C6 |  if_b	neg	result1, #1
05830     28 00 90 CD |  if_b	jmp	#LR__0296
05834     3B 81 62 FC | 	wrlong	local06, local01
05838     0C 76 06 F1 | 	add	local01, #12
0583c     3B 79 02 F6 | 	mov	local02, local01
05840     08 76 86 F1 | 	sub	local01, #8
05844     3B 79 62 FC | 	wrlong	local02, local01
05848     04 76 06 F1 | 	add	local01, #4
0584c     3B 79 02 FB | 	rdlong	local02, local01
05850     01 78 46 F5 | 	or	local02, #1
05854     3B 79 62 FC | 	wrlong	local02, local01
05858     40 27 02 F6 | 	mov	result1, local06
0585c                 | LR__0296
0585c     AF F0 03 F6 | 	mov	ptra, fp
05860     BF 00 A0 FD | 	call	#popregs_
05864                 | __system____default_filbuf_ret
05864     2D 00 64 FD | 	ret
05868                 | 
05868                 | ' 	
05868                 | ' 	FUNCTION pfunc(c as integer) as integer
05868                 | ___strs_cl_pfunc
05868                 | ' 		if (i < 16) then
05868     04 0E 06 F1 | 	add	objptr, #4
0586c     07 2D 02 FB | 	rdlong	_var01, objptr
05870     04 0E 86 F1 | 	sub	objptr, #4
05874     10 2C 5E F2 | 	cmps	_var01, #16 wcz
05878     2C 00 90 3D |  if_ae	jmp	#LR__0297
0587c     07 2F 02 FB | 	rdlong	_var02, objptr
05880     04 0E 06 F1 | 	add	objptr, #4
05884     07 31 02 FB | 	rdlong	_var03, objptr
05888     17 31 02 F1 | 	add	_var03, _var02
0588c     18 6D 42 FC | 	wrbyte	arg01, _var03
05890     07 2D 02 FB | 	rdlong	_var01, objptr
05894     01 2C 06 F1 | 	add	_var01, #1
05898     07 2D 62 FC | 	wrlong	_var01, objptr
0589c     04 0E 86 F1 | 	sub	objptr, #4
058a0                 | ' 			p(i) = c
058a0                 | ' 			i = i+1
058a0                 | ' 			return 1
058a0     01 26 06 F6 | 	mov	result1, #1
058a4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
058a8                 | LR__0297
058a8                 | ' 			return -1
058a8     01 26 66 F6 | 	neg	result1, #1
058ac                 | ___strs_cl_pfunc_ret
058ac     2D 00 64 FD | 	ret
058b0                 | 
058b0                 | __struct__s_vfs_file_t_putchar
058b0     04 5A 05 F6 | 	mov	COUNT_, #4
058b4     B0 00 A0 FD | 	call	#pushregs_
058b8     18 0E 06 F1 | 	add	objptr, #24
058bc     07 77 0A FB | 	rdlong	local01, objptr wz
058c0     18 0E 86 F1 | 	sub	objptr, #24
058c4     00 26 06 A6 |  if_e	mov	result1, #0
058c8     3C 00 90 AD |  if_e	jmp	#LR__0298
058cc     18 0E 06 F1 | 	add	objptr, #24
058d0     07 77 02 FB | 	rdlong	local01, objptr
058d4     18 0E 86 F1 | 	sub	objptr, #24
058d8     3B 79 02 FB | 	rdlong	local02, local01
058dc     04 76 06 F1 | 	add	local01, #4
058e0     3B 7B 02 FB | 	rdlong	local03, local01
058e4     07 6F 02 F6 | 	mov	arg02, objptr
058e8     07 7D 02 F6 | 	mov	local04, objptr
058ec     3C 0F 02 F6 | 	mov	objptr, local02
058f0     2D 7A 62 FD | 	call	local03
058f4     3E 0F 02 F6 | 	mov	objptr, local04
058f8     00 26 5E F2 | 	cmps	result1, #0 wcz
058fc     00 76 06 C6 |  if_b	mov	local01, #0
05900     01 76 06 36 |  if_ae	mov	local01, #1
05904     3B 27 02 F6 | 	mov	result1, local01
05908                 | LR__0298
05908     AF F0 03 F6 | 	mov	ptra, fp
0590c     BF 00 A0 FD | 	call	#popregs_
05910                 | __struct__s_vfs_file_t_putchar_ret
05910     2D 00 64 FD | 	ret
05914                 | 
05914                 | __struct__s_vfs_file_t_getchar
05914     04 5A 05 F6 | 	mov	COUNT_, #4
05918     B0 00 A0 FD | 	call	#pushregs_
0591c     1C 0E 06 F1 | 	add	objptr, #28
05920     07 77 0A FB | 	rdlong	local01, objptr wz
05924     1C 0E 86 F1 | 	sub	objptr, #28
05928     01 26 66 A6 |  if_e	neg	result1, #1
0592c     2C 00 90 AD |  if_e	jmp	#LR__0299
05930                 | '         return getcf(__this);
05930     1C 0E 06 F1 | 	add	objptr, #28
05934     07 77 02 FB | 	rdlong	local01, objptr
05938     1C 0E 86 F1 | 	sub	objptr, #28
0593c     3B 79 02 FB | 	rdlong	local02, local01
05940     04 76 06 F1 | 	add	local01, #4
05944     3B 7B 02 FB | 	rdlong	local03, local01
05948     07 6D 02 F6 | 	mov	arg01, objptr
0594c     07 7D 02 F6 | 	mov	local04, objptr
05950     3C 0F 02 F6 | 	mov	objptr, local02
05954     2D 7A 62 FD | 	call	local03
05958     3E 0F 02 F6 | 	mov	objptr, local04
0595c                 | LR__0299
0595c     AF F0 03 F6 | 	mov	ptra, fp
05960     BF 00 A0 FD | 	call	#popregs_
05964                 | __struct__s_vfs_file_t_getchar_ret
05964     2D 00 64 FD | 	ret
05968                 | 
05968                 | __struct___bas_wrap_sender_tx
05968     04 5A 05 F6 | 	mov	COUNT_, #4
0596c     B0 00 A0 FD | 	call	#pushregs_
05970     07 77 02 FB | 	rdlong	local01, objptr
05974     3B 79 02 FB | 	rdlong	local02, local01
05978     04 76 06 F1 | 	add	local01, #4
0597c     3B 7B 02 FB | 	rdlong	local03, local01
05980     07 7D 02 F6 | 	mov	local04, objptr
05984     3C 0F 02 F6 | 	mov	objptr, local02
05988     2D 7A 62 FD | 	call	local03
0598c     3E 0F 02 F6 | 	mov	objptr, local04
05990     01 26 06 F6 | 	mov	result1, #1
05994     AF F0 03 F6 | 	mov	ptra, fp
05998     BF 00 A0 FD | 	call	#popregs_
0599c                 | __struct___bas_wrap_sender_tx_ret
0599c     2D 00 64 FD | 	ret
059a0                 | 
059a0                 | LR__0300
059a0     20 21 21 21 
059a4     20 63 6F 72 
059a8     72 75 70 74 
059ac     65 64 20 68 
059b0     65 61 70 3F 
059b4     3F 3F 20 21 
059b8     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
059bb     00          | 	byte	0
059bc                 | LR__0301
059bc     20 21 21 21 
059c0     20 6F 75 74 
059c4     20 6F 66 20 
059c8     68 65 61 70 
059cc     20 6D 65 6D 
059d0     6F 72 79 20 
059d4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
059d8     00          | 	byte	0
059d9                 | LR__0302
059d9     20 21 21 21 
059dd     20 63 6F 72 
059e1     72 75 70 74 
059e5     65 64 20 68 
059e9     65 61 70 20 
059ed     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
059f1     00          | 	byte	0
059f2                 | LR__0303
059f2     42 61 73 69 
059f6     63 20 74 65 
059fa     73 74       | 	byte	"Basic test"
059fc     00          | 	byte	0
059fd                 | LR__0304
059fd     4B 65 79 62 
05a01     6F 61 72 64 
05a05     20 6B 65 79 
05a09     20 72 65 6C 
05a0d     65 61 73 65 
05a11     64 2C 20 73 
05a15     63 61 6E 63 
05a19     6F 64 65 20 | 	byte	"Keyboard key released, scancode "
05a1d     00          | 	byte	0
05a1e                 | LR__0305
05a1e     4B 65 79 62 
05a22     6F 61 72 64 
05a26     20 6B 65 79 
05a2a     20 70 72 65 
05a2e     73 73 65 64 
05a32     2C 20 20 73 
05a36     63 61 6E 63 
05a3a     6F 64 65 20 | 	byte	"Keyboard key pressed,  scancode "
05a3e     00          | 	byte	0
05a3f                 | LR__0306
05a3f     2C 20 63 68 
05a43     61 72 63 6F 
05a47     64 65 20    | 	byte	", charcode "
05a4a     00          | 	byte	0
05a4b                 | LR__0307
05a4b     4B 65 79 62 
05a4f     6F 61 72 64 
05a53     20 6D 6F 64 
05a57     69 66 69 65 
05a5b     72 73 20 72 
05a5f     65 6C 65 61 
05a63     73 65 64    | 	byte	"Keyboard modifiers released"
05a66     00          | 	byte	0
05a67                 | LR__0308
05a67     4B 65 79 62 
05a6b     6F 61 72 64 
05a6f     20 6D 6F 64 
05a73     69 66 69 65 
05a77     72 73 20 70 
05a7b     72 65 73 73 
05a7f     65 64 3A 20 | 	byte	"Keyboard modifiers pressed: "
05a83     00          | 	byte	0
05a84                 | LR__0309
05a84     4D 6F 75 73 
05a88     65 20 6D 6F 
05a8c     76 65 64 2C 
05a90     20 78 3D 20 | 	byte	"Mouse moved, x= "
05a94     00          | 	byte	0
05a95                 | LR__0310
05a95     20 79 3D 20 | 	byte	" y= "
05a99     00          | 	byte	0
05a9a                 | LR__0311
05a9a     4D 6F 75 73 
05a9e     65 20 6D 6F 
05aa2     76 65 64 2C 
05aa6     20 78 3D 20 | 	byte	"Mouse moved, x= "
05aaa     00          | 	byte	0
05aab                 | LR__0312
05aab     20 79 3D 20 | 	byte	" y= "
05aaf     00          | 	byte	0
05ab0                 | LR__0313
05ab0     4D 6F 75 73 
05ab4     65 77 68 65 
05ab8     65 6C 3A 20 | 	byte	"Mousewheel: "
05abc     00          | 	byte	0
05abd                 | LR__0314
05abd     4D 6F 75 73 
05ac1     65 20 6B 65 
05ac5     79 3A 20    | 	byte	"Mouse key: "
05ac8     00          | 	byte	0
05ac9                 | LR__0315
05ac9     4D 6F 75 73 
05acd     65 20 63 6C 
05ad1     69 63 6B 65 
05ad5     64          | 	byte	"Mouse clicked"
05ad6     00          | 	byte	0
05ad7                 | LR__0316
05ad7     4D 6F 75 73 
05adb     65 20 64 6F 
05adf     75 62 6C 65 
05ae3     20 63 6C 69 
05ae7     63 6B 65 64 | 	byte	"Mouse double clicked"
05aeb     00          | 	byte	0
05aec                 | LR__0317
05aec     4D 69 64 69 
05af0     20 6E 6F 74 
05af4     65 20 6F 66 
05af8     66 2C 20 63 
05afc     68 61 6E 6E 
05b00     65 6C 20    | 	byte	"Midi note off, channel "
05b03     00          | 	byte	0
05b04                 | LR__0318
05b04     2C 20 6E 6F 
05b08     74 65 20    | 	byte	", note "
05b0b     00          | 	byte	0
05b0c                 | LR__0319
05b0c     4D 69 64 69 
05b10     20 6E 6F 74 
05b14     65 20 6F 6E 
05b18     2C 20 20 63 
05b1c     68 61 6E 6E 
05b20     65 6C 20    | 	byte	"Midi note on,  channel "
05b23     00          | 	byte	0
05b24                 | LR__0320
05b24     2C 20 6E 6F 
05b28     74 65 20    | 	byte	", note "
05b2b     00          | 	byte	0
05b2c                 | LR__0321
05b2c     2C 20 76 65 
05b30     6C 6F 63 69 
05b34     74 79 20    | 	byte	", velocity "
05b37     00          | 	byte	0
05b38                 | LR__0322
05b38     4D 69 64 69 
05b3c     20 70 6F 6C 
05b40     79 20 61 66 
05b44     74 65 72 74 
05b48     6F 75 63 68 
05b4c     2C 20 63 68 
05b50     61 6E 6E 65 
05b54     6C 20       | 	byte	"Midi poly aftertouch, channel "
05b56     00          | 	byte	0
05b57                 | LR__0323
05b57     20 6E 6F 74 
05b5b     65 20       | 	byte	" note "
05b5d     00          | 	byte	0
05b5e                 | LR__0324
05b5e     2C 20 76 65 
05b62     6C 6F 63 69 
05b66     74 79 20    | 	byte	", velocity "
05b69     00          | 	byte	0
05b6a                 | LR__0325
05b6a     4D 69 64 69 
05b6e     20 63 6F 6E 
05b72     74 72 6F 6C 
05b76     20 63 68 61 
05b7a     6E 67 65 2C 
05b7e     20 63 68 61 
05b82     6E 6E 65 6C 
05b86     20          | 	byte	"Midi control change, channel "
05b87     00          | 	byte	0
05b88                 | LR__0326
05b88     20 63 6F 6E 
05b8c     74 72 6F 6C 
05b90     6C 65 72 20 | 	byte	" controller "
05b94     00          | 	byte	0
05b95                 | LR__0327
05b95     2C 20 76 61 
05b99     6C 75 65 20 | 	byte	", value "
05b9d     00          | 	byte	0
05b9e                 | LR__0328
05b9e     4D 69 64 69 
05ba2     20 70 72 6F 
05ba6     67 72 61 6D 
05baa     20 63 68 61 
05bae     6E 67 65 2C 
05bb2     20 63 68 61 
05bb6     6E 6E 65 6C 
05bba     20          | 	byte	"Midi program change, channel "
05bbb     00          | 	byte	0
05bbc                 | LR__0329
05bbc     20 70 72 6F 
05bc0     67 72 61 6D 
05bc4     20          | 	byte	" program "
05bc5     00          | 	byte	0
05bc6                 | LR__0330
05bc6     4D 69 64 69 
05bca     20 6D 6F 6E 
05bce     6F 20 61 66 
05bd2     74 65 72 74 
05bd6     6F 75 63 68 
05bda     2C 20 63 68 
05bde     61 6E 6E 65 
05be2     6C 20       | 	byte	"Midi mono aftertouch, channel "
05be4     00          | 	byte	0
05be5                 | LR__0331
05be5     20 76 61 6C 
05be9     75 65 20    | 	byte	" value "
05bec     00          | 	byte	0
05bed                 | LR__0332
05bed     4D 69 64 69 
05bf1     20 70 69 74 
05bf5     63 68 20 62 
05bf9     65 6E 64 2C 
05bfd     20 63 68 61 
05c01     6E 6E 65 6C 
05c05     20          | 	byte	"Midi pitch bend, channel "
05c06     00          | 	byte	0
05c07                 | LR__0333
05c07     20 76 61 6C 
05c0b     75 65 20    | 	byte	" value "
05c0e     00          | 	byte	0
05c0f                 | LR__0334
05c0f     4E 6F 76 61 
05c13     74 69 6F 6E 
05c17     20 63 6F 6E 
05c1b     74 72 6F 6C 
05c1f     20 6B 65 79 
05c23     20          | 	byte	"Novation control key "
05c24     00          | 	byte	0
05c25     00 00 00    | 	alignl
05c28                 | _hng030rm_spin2_dat_
05c28     00 00 00 00 
05c2c     00 00 00 00 
05c30     00 00 00 00 
05c34     00 00 00 00 
05c38     00 00 00    | vga_font       file "vgafont.def"
05c3b     7E 81 A5 81 
05c3f     81 BD 99 81 
05c43     81 7E 00 00 
05c47     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
05c4b     7E FF DB FF 
05c4f     FF C3 E7 FF 
05c53     FF 7E 00 00 
05c57     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
05c5b     00 36 7F 7F 
05c5f     7F 7F 3E 1C 
05c63     08 00 00 00 
05c67     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
05c6b     00 08 1C 3E 
05c6f     7F 3E 1C 08 
05c73     00 00 00 00 
05c77     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
05c7b     18 3C 3C E7 
05c7f     E7 E7 18 18 
05c83     3C 00 00 00 
05c87     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05c8b     18 3C 7E FF 
05c8f     FF 7E 18 18 
05c93     3C 00 00 00 
05c97     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
05c9b     00 00 00 18 
05c9f     3C 3C 18 00 
05ca3     00 00 00 00 
05ca7     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
05cab     FF FF FF E7 
05caf     C3 C3 E7 FF 
05cb3     FF FF FF FF 
05cb7     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05cbb     00 00 3C 66 
05cbf     42 42 66 3C 
05cc3     00 00 00 00 
05cc7     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
05ccb     FF FF C3 99 
05ccf     BD BD 99 C3 
05cd3     FF FF FF FF 
05cd7     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
05cdb     78 70 58 4C 
05cdf     1E 33 33 33 
05ce3     33 1E 00 00 
05ce7     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
05ceb     3C 66 66 66 
05cef     66 3C 18 7E 
05cf3     18 18 00 00 
05cf7     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
05cfb     FC CC FC 0C 
05cff     0C 0C 0C 0E 
05d03     0F 07 00 00 
05d07     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
05d0b     FE C6 FE C6 
05d0f     C6 C6 C6 E6 
05d13     E7 67 03 00 
05d17     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
05d1b     18 18 DB 3C 
05d1f     E7 3C DB 18 
05d23     18 00 00 00 
05d27     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
05d2b     03 07 0F 1F 
05d2f     7F 1F 0F 07 
05d33     03 01 00 00 
05d37     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
05d3b     60 70 78 7C 
05d3f     7F 7C 78 70 
05d43     60 40 00 00 
05d47     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
05d4b     18 3C 7E 18 
05d4f     18 18 7E 3C 
05d53     18 00 00 00 
05d57     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
05d5b     66 66 66 66 
05d5f     66 66 66    | 	byte	$66[7]
05d62     00 66 66 00 
05d66     00 00 00 00 
05d6a     00 FE DB DB 
05d6e     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
05d72     D8 D8 D8 00 
05d76     00 00 00 3E 
05d7a     63 06 1C 36 
05d7e     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
05d82     30 63 3E 00 
05d86     00 00 00 00 
05d8a     00 00 00 00 
05d8e     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05d92     7F 7F 7F 00 
05d96     00 00 00 00 
05d9a     00 18 3C 7E 
05d9e     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
05da2     3C 18 7E 00 
05da6     00 00 00 00 
05daa     00 18 3C 7E 
05dae     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
05db2     18 18 18 00 
05db6     00 00 00 00 
05dba     00 18 18 18 
05dbe     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
05dc2     7E 3C 18 00 
05dc6     00 00 00 00 
05dca     00 00 00 18 
05dce     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
05dd2     00 00 00 00 
05dd6     00 00 00 00 
05dda     00 00 00    | 	byte	$00[11]
05ddd     0C 06 7F 06 
05de1     0C 00 00 00 
05de5     00 00 00 00 
05de9     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05ded     00 03 03 03 
05df1     7F 00 00 00 
05df5     00 00 00 00 
05df9     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05dfd     14 36 7F 36 
05e01     14 00 00 00 
05e05     00 00 00 00 
05e09     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
05e0d     1C 1C 3E 3E 
05e11     7F 7F 00 00 
05e15     00 00 00 00 
05e19     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
05e1d     7F 3E 3E 1C 
05e21     1C 08 00 00 
05e25     00 00 00 00 
05e29     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05e2d     00 00 00 00 
05e31     00 00 00 00 
05e35     00 00 00 00 
05e39     00 00       | 	byte	$00[14]
05e3b     18 3C 3C 3C 
05e3f     18 18 18 00 
05e43     18 18 00 00 
05e47     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
05e4b     66 24 00 00 
05e4f     00 00 00 00 
05e53     00 00 00 00 
05e57     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05e5b     00 36 36 7F 
05e5f     36 36 36 7F 
05e63     36 36 00 00 
05e67     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
05e6b     3E 63 43 03 
05e6f     3E 60 60 61 
05e73     63 3E 18 18 
05e77     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
05e7b     00 00 43 63 
05e7f     30 18 0C 06 
05e83     63 61 00 00 
05e87     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
05e8b     1C 36 36 1C 
05e8f     6E 3B 33 33 
05e93     33 6E 00 00 
05e97     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
05e9b     0C 0C 0C 06 
05e9f     00 00 00 00 
05ea3     00 00 00 00 
05ea7     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
05eab     30 18 0C 0C 
05eaf     0C 0C 0C 0C 
05eb3     18 30 00 00 
05eb7     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
05ebb     0C 18 30 30 
05ebf     30 30 30 30 
05ec3     18 0C 00 00 
05ec7     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
05ecb     00 00 00 66 
05ecf     3C FF 3C 66 
05ed3     00 00 00 00 
05ed7     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
05edb     00 00 00 18 
05edf     18 7E 18 18 
05ee3     00 00 00 00 
05ee7     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
05eeb     00 00 00 00 
05eef     00 00 00 00 | 	byte	$00[8]
05ef3     18 18 18 0C 
05ef7     00 00 00 00 
05efb     00 00 00 00 
05eff     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
05f03     00 00 00 00 
05f07     00 00 00 00 
05f0b     00 00 00 00 
05f0f     00 00 00 00 | 	byte	$00[16]
05f13     18 18 00 00 
05f17     00 00 00 00 
05f1b     00 00 40 60 
05f1f     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
05f23     03 01 00 00 
05f27     00 00 00 00 
05f2b     1C 36 63 63 
05f2f     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
05f33     36 1C 00 00 
05f37     00 00 00 00 
05f3b     18 1C 1E 18 
05f3f     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
05f43     18 7E 00 00 
05f47     00 00 00 00 
05f4b     3E 63 60 30 
05f4f     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
05f53     63 7F 00 00 
05f57     00 00 00 00 
05f5b     3E 63 60 60 
05f5f     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
05f63     63 3E 00 00 
05f67     00 00 00 00 
05f6b     30 38 3C 36 
05f6f     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
05f73     30 78 00 00 
05f77     00 00 00 00 
05f7b     7F 03 03 03 
05f7f     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
05f83     63 3E 00 00 
05f87     00 00 00 00 
05f8b     1C 06 03 03 
05f8f     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
05f93     63 3E 00 00 
05f97     00 00 00 00 
05f9b     7F 63 60 60 
05f9f     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
05fa3     0C 0C 00 00 
05fa7     00 00 00 00 
05fab     3E 63 63 63 
05faf     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
05fb3     63 3E 00 00 
05fb7     00 00 00 00 
05fbb     3E 63 63 63 
05fbf     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
05fc3     30 1E 00 00 
05fc7     00 00 00 00 
05fcb     00 00 00 18 
05fcf     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05fd3     18 18 00 00 
05fd7     00 00 00 00 
05fdb     00 00 00 18 
05fdf     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
05fe3     18 18 0C 00 
05fe7     00 00 00 00 
05feb     00 60 30 18 
05fef     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
05ff3     30 60 00 00 
05ff7     00 00 00 00 
05ffb     00 00 00 7E 
05fff     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
06003     00 00 00 00 
06007     00 00 00 00 
0600b     00          | 	byte	$00[9]
0600c     06 0C 18 30 
06010     60 30 18 0C 
06014     06 00 00 00 
06018     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
0601c     63 63 30 18 
06020     18 18 00 18 
06024     18 00 00 00 
06028     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
0602c     3E 63 63 7B 
06030     7B 7B 3B 03 
06034     3E 00 00 00 
06038     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
0603c     1C 36 63 63 
06040     7F 63 63 63 
06044     63 00 00 00 
06048     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
0604c     66 66 66 3E 
06050     66 66 66 66 
06054     3F 00 00 00 
06058     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
0605c     66 43 03 03 
06060     03 03 43 66 
06064     3C 00 00 00 
06068     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
0606c     36 66 66 66 
06070     66 66 66 36 
06074     1F 00 00 00 
06078     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
0607c     66 46 16 1E 
06080     16 06 46 66 
06084     7F 00 00 00 
06088     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
0608c     66 46 16 1E 
06090     16 06 06 06 
06094     0F 00 00 00 
06098     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
0609c     66 43 03 03 
060a0     7B 63 63 66 
060a4     5C 00 00 00 
060a8     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
060ac     63 63 63 7F 
060b0     63 63 63 63 
060b4     63 00 00 00 
060b8     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
060bc     18 18 18 18 
060c0     18 18 18 18 | 	byte	$18[8]
060c4     3C 00 00 00 
060c8     00 00 00 78 
060cc     30 30 30 30 
060d0     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
060d4     1E 00 00 00 
060d8     00 00 00 67 
060dc     66 66 36 1E 
060e0     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
060e4     67 00 00 00 
060e8     00 00 00 0F 
060ec     06 06 06 06 
060f0     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
060f4     7F 00 00 00 
060f8     00 00 00 63 
060fc     77 7F 7F 6B 
06100     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
06104     63 00 00 00 
06108     00 00 00 63 
0610c     67 6F 7F 7B 
06110     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
06114     63 00 00 00 
06118     00 00 00 3E 
0611c     63 63 63 63 
06120     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
06124     3E 00 00 00 
06128     00 00 00 3F 
0612c     66 66 66 3E 
06130     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
06134     0F 00 00 00 
06138     00 00 00 3E 
0613c     63 63 63 63 
06140     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
06144     3E 30 70 00 
06148     00 00 00 3F 
0614c     66 66 66 3E 
06150     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
06154     67 00 00 00 
06158     00 00 00 3E 
0615c     63 63 06 1C 
06160     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
06164     3E 00 00 00 
06168     00 00 00 7E 
0616c     7E 5A 18 18 
06170     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
06174     3C 00 00 00 
06178     00 00 00 63 
0617c     63 63 63 63 
06180     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
06184     3E 00 00 00 
06188     00 00 00 63 
0618c     63 63 63 63 
06190     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
06194     08 00 00 00 
06198     00 00 00 63 
0619c     63 63 63 6B 
061a0     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
061a4     36 00 00 00 
061a8     00 00 00 63 
061ac     63 36 3E 1C 
061b0     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
061b4     63 00 00 00 
061b8     00 00 00 66 
061bc     66 66 66 3C 
061c0     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
061c4     3C 00 00 00 
061c8     00 00 00 7F 
061cc     63 61 30 18 
061d0     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
061d4     7F 00 00 00 
061d8     00 00 00 3C 
061dc     0C 0C 0C 0C 
061e0     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
061e4     3C 00 00 00 
061e8     00 00 00 00 
061ec     01 03 07 0E 
061f0     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
061f4     40 00 00 00 
061f8     00 00 00 3C 
061fc     30 30 30 30 
06200     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
06204     3C 00 00 00 
06208     1C 36 00 00 
0620c     00 00 00 00 
06210     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06214     00 00 00 00 
06218     00 00 00 00 
0621c     00 00 00 00 
06220     00 00 00 00 
06224     00          | 	byte	$00[17]
06225     FF 00 00 0C 
06229     18 00 00 00 
0622d     00 00 00 00 
06231     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06235     00 00 00 00 
06239     00 00 00 00 
0623d     00          | 	byte	$00[9]
0623e     1E 30 3E 33 
06242     33 33 6E 00 
06246     00 00 00 00 
0624a     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
0624e     1E 36 66 66 
06252     66 66 3E 00 
06256     00 00 00 00 
0625a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0625e     3E 63 03 03 
06262     03 63 3E 00 
06266     00 00 00 00 
0626a     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
0626e     3C 36 33 33 
06272     33 33 6E 00 
06276     00 00 00 00 
0627a     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0627e     3E 63 7F 03 
06282     03 63 3E 00 
06286     00 00 00 00 
0628a     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
0628e     0C 1E 0C 0C 
06292     0C 0C 1E 00 
06296     00 00 00 00 
0629a     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0629e     6E 33 33 33 
062a2     33 33 3E 30 
062a6     33 1E 00 00 
062aa     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
062ae     36 6E 66 66 
062b2     66 66 67 00 
062b6     00 00 00 00 
062ba     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
062be     1C 18 18 18 
062c2     18 18 3C 00 
062c6     00 00 00 00 
062ca     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
062ce     70 60 60 60 
062d2     60 60 60 66 
062d6     66 3C 00 00 
062da     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
062de     66 36 1E 1E 
062e2     36 66 67 00 
062e6     00 00 00 00 
062ea     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
062ee     18 18 18 18 
062f2     18 18       | 	byte	$18[6]
062f4     3C 00 00 00 
062f8     00 00 00 00 
062fc     00 00 37 7F 
06300     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
06304     63 00 00 00 
06308     00 00 00 00 
0630c     00 00 3B 66 
06310     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06314     66 00 00 00 
06318     00 00 00 00 
0631c     00 00 3E 63 
06320     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
06324     3E 00 00 00 
06328     00 00 00 00 
0632c     00 00 3B 66 
06330     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
06334     3E 06 06 0F 
06338     00 00 00 00 
0633c     00 00 6E 33 
06340     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
06344     3E 30 30 78 
06348     00 00 00 00 
0634c     00 00 3B 6E 
06350     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
06354     0F 00 00 00 
06358     00 00 00 00 
0635c     00 00 3E 63 
06360     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
06364     3E 00 00 00 
06368     00 00 00 08 
0636c     0C 0C 3F 0C 
06370     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
06374     38 00 00 00 
06378     00 00 00 00 
0637c     00 00 33 33 
06380     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
06384     6E 00 00 00 
06388     00 00 00 00 
0638c     00 00 63 63 
06390     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
06394     1C 00 00 00 
06398     00 00 00 00 
0639c     00 00 63 63 
063a0     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
063a4     36 00 00 00 
063a8     00 00 00 00 
063ac     00 00 63 36 
063b0     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
063b4     63 00 00 00 
063b8     00 00 00 00 
063bc     00 00 63 63 
063c0     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
063c4     7E 60 30 1F 
063c8     00 00 00 00 
063cc     00 00 7F 33 
063d0     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
063d4     7F 00 00 00 
063d8     00 00 00 70 
063dc     18 18 18 0E 
063e0     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
063e4     70 00 00 00 
063e8     00 00 00 18 
063ec     18 18 18 18 
063f0     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
063f4     18 00 00 00 
063f8     00 00 00 0E 
063fc     18 18 18 70 
06400     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
06404     0E 00 00 00 
06408     6E 3B 00 00 
0640c     00 00 00 00 
06410     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06414     00 00 00 00 
06418     00 00 00 00 
0641c     00 00       | 	byte	$00[10]
0641e     08 1C 36 63 
06422     63 63 7F 00 
06426     00 00 00 00 
0642a     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
0642e     03 03 03 03 
06432     43 66 3C 18 
06436     30 1E 00 00 
0643a     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
0643e     33 33 33 33 
06442     33 33       | 	byte	$33[6]
06444     6E 00 00 00 
06448     00 00 60 30 
0644c     18 00 3E 63 
06450     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
06454     3E 00 00 00 
06458     00 00 08 1C 
0645c     36 00 1E 30 
06460     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
06464     6E 00 00 00 
06468     00 00 00 00 
0646c     33 00 1E 30 
06470     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
06474     6E 00 00 00 
06478     00 00 1C 36 
0647c     1C 00 33 33 
06480     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
06484     6E 00 00 00 
06488     00 00 60 30 
0648c     18 00 3E 63 
06490     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
06494     3E 00 00 00 
06498     00 00 00 00 
0649c     00 00 3E 63 
064a0     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
064a4     3E 18 30 1E 
064a8     00 00 00 1C 
064ac     58 78 38 18 
064b0     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
064b4     3C 00 00 00 
064b8     00 00 00 00 
064bc     63 00 3E 63 
064c0     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
064c4     3E 00 00 00 
064c8     66 33 00 3E 
064cc     63 63 63 63 
064d0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
064d4     3E 00 00 00 
064d8     00 00 CC 66 
064dc     33 00 3E 63 
064e0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
064e4     3E 00 00 00 
064e8     00 00 18 3C 
064ec     66 00 1C 18 
064f0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
064f4     3C 00 00 00 
064f8     30 18 00 7F 
064fc     63 61 30 18 
06500     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
06504     7F 00 00 00 
06508     00 63 00 08 
0650c     1C 36 63 63 
06510     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
06514     63 00 00 00 
06518     30 18 00 3C 
0651c     66 43 03 03 
06520     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
06524     3C 00 00 00 
06528     30 18 00 7F 
0652c     66 46 16 1E 
06530     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
06534     7F 00 00 00 
06538     0C 06 00 0F 
0653c     06 06 06 06 
06540     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
06544     7F 00 00 00 
06548     30 18 00 1C 
0654c     18 18 18 18 
06550     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
06554     3C 00 00 00 
06558     00 00 08 1C 
0655c     36 00 3E 63 
06560     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
06564     3E 00 00 00 
06568     00 00 00 00 
0656c     63 00 3E 63 
06570     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
06574     3E 00 00 00 
06578     00 00 00 6F 
0657c     46 26 06 06 
06580     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
06584     7F 00 00 00 
06588     00 00 00 6E 
0658c     4C 2C 0C 0C 
06590     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
06594     1E 00 00 00 
06598     30 18 00 3E 
0659c     63 63 06 1C 
065a0     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
065a4     3E 00 00 00 
065a8     00 00 60 30 
065ac     18 00 3E 63 
065b0     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
065b4     3E 00 00 00 
065b8     00 63 00 3E 
065bc     63 63 63 63 
065c0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
065c4     3E 00 00 00 
065c8     00 63 00 63 
065cc     63 63 63 63 
065d0     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
065d4     3E 00 00 00 
065d8     6C 38 00 7E 
065dc     7E 5A 18 18 
065e0     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
065e4     3C 00 00 00 
065e8     00 00 60 48 
065ec     2C 0C 3F 0C 
065f0     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
065f4     38 00 00 00 
065f8     00 00 00 0F 
065fc     26 36 1E 0E 
06600     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
06604     7F 00 00 00 
06608     00 00 00 00 
0660c     00 63 36 1C 
06610     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
06614     00 00 00 00 
06618     00 00       | 	byte	$00[6]
0661a     36 1C 08 00 
0661e     3E 63 03 03 
06622     03 63 3E 00 
06626     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0662a     30 18 0C 00 
0662e     1E 30 3E 33 
06632     33 33 6E 00 
06636     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0663a     60 30 18 00 
0663e     1C 18 18 18 
06642     18 18 3C 00 
06646     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
0664a     60 30 18 00 
0664e     3E 63 63 63 
06652     63 63 3E 00 
06656     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
0665a     30 18 0C 00 
0665e     33 33 33 33 
06662     33 33 6E 00 
06666     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0666a     00 08 1C 36 
0666e     63 63 7F 63 
06672     63 63 63 18 
06676     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
0667a     00 00 00 00 
0667e     1E 30 3E 33 
06682     33 33 6E 18 
06686     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
0668a     00 7F 63 61 
0668e     30 18 0C 06 
06692     43 63 7F 00 
06696     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
0669a     36 1C 08 00 
0669e     7F 33 18 0C 
066a2     06 63 7F 00 
066a6     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
066aa     00 7F 66 46 
066ae     16 1E 16 06 
066b2     46 66 7F 18 
066b6     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
066ba     00 00 00 00 
066be     3E 63 7F 03 
066c2     03 63 3E 18 
066c6     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
066ca     00 3C 66 03 
066ce     1F 03 0F 03 
066d2     03 66 3C 00 
066d6     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
066da     60 30 18 00 
066de     7F 33 18 0C 
066e2     06 63 7F 00 
066e6     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
066ea     00 3C 66 43 
066ee     03 03 03 03 
066f2     43 66 3C 00 
066f6     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
066fa     00 00 00 00 
066fe     3E 63 06 1C 
06702     30 63 3E 18 
06706     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0670a     00 00 00 00 
0670e     00 00       | 	byte	$00[6]
06710     6C 36 1B 36 
06714     6C 00 00 00 
06718     00 00 00 00 
0671c     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06720     1B 36 6C 36 
06724     1B 00 00 00 
06728     88 22 88 22 
0672c     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
06730     88 22 88 22 
06734     88 22 88 22 
06738     AA 55 AA 55 
0673c     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
06740     AA 55 AA 55 
06744     AA 55 AA 55 
06748     BB EE BB EE 
0674c     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
06750     BB EE BB EE 
06754     BB EE BB EE 
06758     18 18 18 18 
0675c     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
06760     18 18 18 18 
06764     18 18 18 18 
06768     18 18 18 18 
0676c     18 18 18    | 	byte	$18[15]
0676f     1F 18 18 18 
06773     18 18 18 18 
06777     18 30 18 00 
0677b     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
0677f     63 7F 63 63 
06783     63 63 00 00 
06787     00 1C 36 00 
0678b     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
0678f     63 7F 63 63 
06793     63 63 00 00 
06797     00 36 1C 00 
0679b     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
0679f     1E 16 06 46 
067a3     66 7F 00 00 
067a7     00 00 00 00 
067ab     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
067af     1C 30 60 63 
067b3     63 3E 18 30 
067b7     1E 6C 6C 6C 
067bb     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
067bf     6F 6C 6C 6C 
067c3     6C 6C 6C 6C 
067c7     6C 6C 6C 6C 
067cb     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
067cf     6C 6C 6C 6C 
067d3     6C 6C 6C 6C 
067d7     6C          | 	byte	$6c[9]
067d8     00 00 00 00 
067dc     00          | 	byte	$00[5]
067dd     7F 60 6F 6C 
067e1     6C 6C 6C 6C 
067e5     6C 6C 6C 6C 
067e9     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
067ed     6F 60 7F 00 
067f1     00 00 00 00 
067f5     00 00 00 18 
067f9     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
067fd     61 30 18 0C 
06801     06 43 63 7F 
06805     00 00 00 00 
06809     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
0680d     00 7F 33 18 
06811     0C 06 63 7F 
06815     00 00 00 00 
06819     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
0681d     00 00 1F 18 
06821     18 18 18 18 
06825     18 18 18 18 
06829     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0682d     18 18 F8 00 
06831     00 00 00 00 
06835     00 00 00 18 
06839     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0683d     18 18 FF 00 
06841     00 00 00 00 
06845     00 00 00 00 
06849     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0684d     00 00 FF 18 
06851     18 18 18 18 
06855     18 18 18 18 
06859     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0685d     18 18 F8 18 
06861     18 18 18 18 
06865     18 18 18 00 
06869     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0686d     00 00 FF 00 
06871     00 00 00 00 
06875     00 00 00 18 
06879     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
0687d     18 18 FF 18 
06881     18 18 18 18 
06885     18 18 18 63 
06889     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
0688d     36 63 63 7F 
06891     63 63 63 63 
06895     00 00 00 00 
06899     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
0689d     00 1E 30 3E 
068a1     33 33 33 6E 
068a5     00 00 00 6C 
068a9     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
068ad     EC 0C FC 00 
068b1     00 00 00 00 
068b5     00 00 00 00 
068b9     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
068bd     FC 0C EC 6C 
068c1     6C 6C 6C 6C 
068c5     6C 6C 6C 6C 
068c9     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
068cd     EF 00 FF 00 
068d1     00 00 00 00 
068d5     00 00 00 00 
068d9     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
068dd     FF 00 EF 6C 
068e1     6C 6C 6C 6C 
068e5     6C 6C 6C 6C 
068e9     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
068ed     EC 0C EC 6C 
068f1     6C 6C 6C 6C 
068f5     6C 6C 6C 00 
068f9     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
068fd     FF 00 FF 00 
06901     00 00 00 00 
06905     00 00 00 6C 
06909     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
0690d     EF 00 EF 6C 
06911     6C 6C 6C 6C 
06915     6C 6C 6C 00 
06919     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
0691d     63 3E 63 63 
06921     63 63 3E 63 
06925     00 00 00 00 
06929     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
0692d     30 3C 36 33 
06931     33 33 33 6E 
06935     00 00 00 00 
06939     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
0693d     66 66 6F 66 
06941     66 66 36 1F 
06945     00 00 00 36 
06949     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
0694d     66 66 66 66 
06951     66 66       | 	byte	$66[6]
06953     36 1F 00 00 
06957     00 00 63 00 
0695b     7F 66 46 16 
0695f     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
06963     66 7F 00 00 
06967     00 6C 38 00 
0696b     38 30 30 3C 
0696f     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
06973     33 6E 00 00 
06977     00 36 1C 00 
0697b     63 67 6F 7F 
0697f     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
06983     63 63 00 00 
06987     00 30 18 00 
0698b     3C 18 18 18 
0698f     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
06993     18 3C 00 00 
06997     00 3C 66 00 
0699b     3C 18 18 18 
0699f     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
069a3     18 3C 00 00 
069a7     00 00 00 36 
069ab     1C 08 00 3E 
069af     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
069b3     63 3E 00 00 
069b7     00 18 18 18 
069bb     18 18 18 18 
069bf     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
069c3     00 00 00 00 
069c7     00 00 00 00 
069cb     00 00 00 00 | 	byte	$00[12]
069cf     F8 18 18 18 
069d3     18 18 18 18 
069d7     18 FF FF FF 
069db     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
069df     FF FF FF FF 
069e3     FF FF FF FF 
069e7     FF          | 	byte	$ff[9]
069e8     00 00 00 00 
069ec     00 00 00    | 	byte	$00[7]
069ef     FF FF FF FF 
069f3     FF FF FF FF 
069f7     FF          | 	byte	$ff[9]
069f8     00 00 00 7E 
069fc     7E 5A 18 18 
06a00     18 18 18 18 
06a04     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
06a08     1C 36 1C 63 
06a0c     63 63 63 63 
06a10     63 63 63 63 
06a14     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06a18     FF FF FF FF 
06a1c     FF FF FF    | 	byte	$ff[7]
06a1f     00 00 00 00 
06a23     00 00 00 00 
06a27     00          | 	byte	$00[9]
06a28     30 18 00 3E 
06a2c     63 63 63 63 
06a30     63 63 63 63 
06a34     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06a38     00 00 00 1E 
06a3c     33 33 33 1B 
06a40     33 63 63 63 
06a44     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
06a48     1C 36 00 3E 
06a4c     63 63 63 63 
06a50     63 63 63 63 
06a54     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06a58     30 18 00 63 
06a5c     67 6F 7F 7B 
06a60     73 63 63 63 
06a64     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
06a68     00 00 60 30 
06a6c     18 00 3B 66 
06a70     66 66 66 66 
06a74     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
06a78     00 00 36 1C 
06a7c     08 00 3B 66 
06a80     66 66 66 66 
06a84     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
06a88     36 1C 00 3E 
06a8c     63 63 06 1C 
06a90     30 60 63 63 
06a94     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
06a98     00 00 36 1C 
06a9c     08 00 3E 63 
06aa0     06 1C 30 63 
06aa4     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
06aa8     30 18 00 3F 
06aac     66 66 66 3E 
06ab0     36 66 66 66 
06ab4     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
06ab8     30 18 00 63 
06abc     63 63 63 63 
06ac0     63 63 63 63 
06ac4     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06ac8     00 00 60 30 
06acc     18 00 3B 6E 
06ad0     66 06 06 06 
06ad4     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
06ad8     66 33 00 63 
06adc     63 63 63 63 
06ae0     63 63 63 63 
06ae4     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
06ae8     00 00 60 30 
06aec     18 00 63 63 
06af0     63 63 63 63 
06af4     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
06af8     30 18 00 66 
06afc     66 66 66 3C 
06b00     18 18 18 18 
06b04     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
06b08     00 00 00 08 
06b0c     0C 0C 3F 0C 
06b10     0C 0C 0C 6C 
06b14     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
06b18     30 18 00 00 
06b1c     00 00 00 00 
06b20     00 00 00 00 
06b24     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b28     00 00 00 00 
06b2c     00 00 00 00 | 	byte	$00[8]
06b30     7F 00 00 00 
06b34     00 00 00 00 
06b38     66 33 00 00 
06b3c     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
06b40     00 00 00 00 
06b44     00 00 00 00 
06b48     00 00 00 00 
06b4c     00 00 00 00 
06b50     00 00 00 00 
06b54     00          | 	byte	$00[21]
06b55     0C 06 3C 36 
06b59     1C 00 00 00 
06b5d     00 00 00 00 
06b61     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b65     00 00 00 63 
06b69     3E 00 00 00 
06b6d     00 00 00 00 
06b71     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b75     00 00 00 00 
06b79     3E 63 06 1C 
06b7d     36 63 63 36 
06b81     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
06b85     00 00 00 00 
06b89     00 00 00 00 | 	byte	$00[8]
06b8d     18 00 7E 00 
06b91     18 00 00 00 
06b95     00 00 00 00 
06b99     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06b9d     00 00 00 00 
06ba1     00 00 00 00 | 	byte	$00[8]
06ba5     18 30 1E 00 
06ba9     00 00 1C 36 
06bad     36 1C 00 00 
06bb1     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
06bb5     00 00 00 00 
06bb9     63 00 00 00 
06bbd     00 00 00 00 
06bc1     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06bc5     00 00 00 18 
06bc9     18 00 00 00 
06bcd     00 00 00 00 
06bd1     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06bd5     00 00 00 00 
06bd9     00          | 	byte	$00[5]
06bda     CC 66 33 00 
06bde     33 33 33 33 
06be2     33 33 6E 00 
06be6     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
06bea     00 3F 66 66 
06bee     66 3E 36 66 
06bf2     66 66 6F 00 
06bf6     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
06bfa     36 1C 08 00 
06bfe     3B 6E 66 06 
06c02     06 06 0F 00 
06c06     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
06c0a     00 00 00 7E 
06c0e     7E 7E 7E 7E 
06c12     7E 7E 00 00 
06c16     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
06c1a     00 00 00 00 
06c1e     00 00 00 00 
06c22     00 00 00 00 
06c26     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06c28     00 00 00 00 
      ...             
06c58     00 00 00 00 
06c5c     00 00 00    | st_font        file "st4font.def"
06c5f     FF FF 00 00 
06c63     00 00 00 00 
06c67     00 18 18 18 
06c6b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06c6f     18 18 18 18 
06c73     18 18 18 18 
06c77     18          | 	byte	$18[9]
06c78     00 00 00 00 
06c7c     00 00 00    | 	byte	$00[7]
06c7f     FF FF 18 18 
06c83     18 18 18 18 
06c87     18 18 18 18 
06c8b     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06c8f     FF FF 00 00 
06c93     00 00 00 00 
06c97     00 18 18 18 
06c9b     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06c9f     1F 1F 18 18 
06ca3     18 18 18 18 
06ca7     18 18 18 18 
06cab     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06caf     F8 F8 18 18 
06cb3     18 18 18 18 
06cb7     18 00 00 00 
06cbb     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06cbf     1F 1F 18 18 
06cc3     18 18 18 18 
06cc7     18 00 00 00 
06ccb     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06ccf     F8 F8 18 18 
06cd3     18 18 18 18 
06cd7     18 18 18 18 
06cdb     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
06cdf     1F 1F 00 00 
06ce3     00 00 00 00 
06ce7     00 18 18 18 
06ceb     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06cef     F8 F8 00 00 
06cf3     00 00 00 00 
06cf7     00 18 18 18 
06cfb     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
06cff     FF FF 18 18 
06d03     18 18 18 18 
06d07     18 00 00 18 
06d0b     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
06d0f     66 7E 7E 66 
06d13     66 66 66 30 
06d17     18 00 00 7E 
06d1b     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
06d1f     3E 06 06 06 
06d23     06 7E 7E 18 
06d27     0C 30 18 3C 
06d2b     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
06d2f     06 06 06 66 
06d33     66 7E 3C 00 
06d37     00 30 18 66 
06d3b     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
06d3f     7E 7E 76 76 
06d43     66 66 66 00 
06d47     00 30 18 7C 
06d4b     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
06d4f     1C 38 70 60 
06d53     60 7E 3E 00 
06d57     00 30 18 7E 
06d5b     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
06d5f     18 0C 0C 06 
06d63     06 7E 7E 00 
06d67     00 18 18 00 
06d6b     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
06d6f     18 18 0C 0C 
06d73     06 7E 7E 00 
06d77     00 30 18 3C 
06d7b     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
06d7f     66 66 66 66 
06d83     66          | 	byte	$66[5]
06d84     7E 3C 00 00 
06d88     00 00 06 06 
06d8c     06 06 16 1E 
06d90     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
06d94     7E 7E 00 00 
06d98     00 00 00 00 
06d9c     00 3C 7C 60 
06da0     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
06da4     7E 7C 30 18 
06da8     00 00 00 00 
06dac     00 3C 7E 66 
06db0     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
06db4     7E 7C 18 0C 
06db8     00 00 30 18 
06dbc     00 3C 3E 06 
06dc0     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
06dc4     7E 7C 00 00 
06dc8     00 00 30 18 
06dcc     00 3E 7E 66 
06dd0     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
06dd4     66 66 00 00 
06dd8     00 00 30 18 
06ddc     00 7C 7E 06 
06de0     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
06de4     7E 3E 00 00 
06de8     00 00 30 18 
06dec     00 7E 7E 30 
06df0     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06df4     7E 7E 00 00 
06df8     00 00 18 18 
06dfc     00 7E 7E 30 
06e00     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
06e04     7E 7E 00 00 
06e08     00 00 30 18 
06e0c     00 3C 7E 66 
06e10     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
06e14     7E 3C 00 00 
06e18     00 00 1C 1C 
06e1c     18 18 38 3C 
06e20     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
06e24     3C 3C 00 00 
06e28     00 00 00 00 
06e2c     00 00 00 00 
06e30     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
06e34     00 00 00 00 
06e38     00 00       | 	byte	$00[6]
06e3a     18 18 18 18 
06e3e     18 18 18 18 | 	byte	$18[8]
06e42     00 00 18 18 
06e46     00 00 00 00 
06e4a     66 66 66 66 
06e4e     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
06e52     00 00 00 00 
06e56     00 00 00 00 
06e5a     00          | 	byte	$00[9]
06e5b     66 66 FF FF 
06e5f     66 66 FF FF 
06e63     66 66 00 00 
06e67     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
06e6b     7C 7E 06 06 
06e6f     3E 7C 60 60 
06e73     7E 3E 18 18 
06e77     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
06e7b     66 30 30 18 
06e7f     18 0C 0C 66 
06e83     66 00 00 00 
06e87     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
06e8b     66 66 3C 1C 
06e8f     1C FC FE 66 
06e93     66 FE FC 00 
06e97     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
06e9b     18 18 18 18 
06e9f     00 00 00 00 
06ea3     00 00 00 00 
06ea7     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
06eab     18 1C 0C 0C 
06eaf     0C 0C 0C 0C 
06eb3     1C 18 30 00 
06eb7     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
06ebb     18 38 30 30 
06ebf     30 30 30 30 
06ec3     38 18 0C 00 
06ec7     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
06ecb     66 66 3C 3C 
06ecf     FF FF 3C 3C 
06ed3     66 66 00 00 
06ed7     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
06edb     00 18 18 18 
06edf     7E 7E 18 18 
06ee3     18 00 00 00 
06ee7     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
06eeb     00 00 00 00 
06eef     00 00       | 	byte	$00[6]
06ef1     18 18 18 18 
06ef5     18          | 	byte	$18[5]
06ef6     0C 04 00 00 
06efa     00 00 00 00 
06efe     7E 7E 00 00 
06f02     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
06f06     00 00 00 00 
06f0a     00 00 00 00 
06f0e     00 00 00 00 
06f12     00          | 	byte	$00[13]
06f13     18 18 18 00 
06f17     00 00 00 60 
06f1b     60 60 30 30 
06f1f     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
06f23     06 06 06 00 
06f27     00 00 00 3C 
06f2b     7E 66 66 66 
06f2f     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
06f33     66 7E 3C 00 
06f37     00 00 00 18 
06f3b     18 1C 1C 18 
06f3f     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
06f43     18 7E 7E 00 
06f47     00 00 00 3C 
06f4b     7E 66 66 30 
06f4f     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
06f53     0C 7E 7E 00 
06f57     00 00 00 7E 
06f5b     7E 30 30 18 
06f5f     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
06f63     66 7E 3C 00 
06f67     00 00 00 30 
06f6b     30 38 38 3C 
06f6f     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
06f73     7E 30 30 00 
06f77     00 00 00 7E 
06f7b     7E 06 06 3E 
06f7f     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
06f83     66 7E 3C 00 
06f87     00 00 00 38 
06f8b     3C 0E 06 06 
06f8f     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
06f93     66 7E 3C 00 
06f97     00 00 00 7E 
06f9b     7E 60 60 30 
06f9f     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
06fa3     0C 0C 0C 00 
06fa7     00 00 00 3C 
06fab     7E 66 66 3C 
06faf     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
06fb3     66 7E 3C 00 
06fb7     00 00 00 3C 
06fbb     7E 66 66 7E 
06fbf     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
06fc3     70 3C 1C 00 
06fc7     00 00 00 00 
06fcb     00 00 18 18 
06fcf     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
06fd3     18 18 18 00 
06fd7     00 00 00 00 
06fdb     00 00 18 18 
06fdf     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
06fe3     18 18 18 0C 
06fe7     04 00 00 00 
06feb     70 38 1C 0E 
06fef     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
06ff3     70 00 00 00 
06ff7     00 00 00 00 
06ffb     00 00 7E 7E 
06fff     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
07003     00 00 00 00 
07007     00 00 00 00 | 	byte	$00[8]
0700b     0E 1C 38 70 
0700f     E0 70 38 1C 
07013     0E 00 00 00 
07017     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
0701b     7E 66 66 30 
0701f     30 18 18 18 
07023     00 18 18 00 
07027     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
0702b     7E 66 66 66 
0702f     66 36 06 66 
07033     66 7E 3C 00 
07037     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
0703b     3C 7E 66 66 
0703f     66 7E 7E 66 
07043     66 66 66 00 
07047     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
0704b     7E 66 66 7E 
0704f     3E 66 66 66 
07053     66 7E 3E 00 
07057     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
0705b     7E 66 66 06 
0705f     06 06 06 66 
07063     66 7E 3C 00 
07067     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
0706b     7E 66 66 66 
0706f     66 66 66 66 
07073     66 7E 3E 00 
07077     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
0707b     7E 06 06 3E 
0707f     3E 06 06 06 
07083     06 7E 7E 00 
07087     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
0708b     7E 06 06 3E 
0708f     3E 06 06 06 
07093     06 06 06 00 
07097     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
0709b     7E 06 06 76 
0709f     76 66 66 66 
070a3     66 7E 3C 00 
070a7     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
070ab     66 66 66 7E 
070af     7E 66 66 66 
070b3     66 66 66 00 
070b7     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
070bb     7E 18 18 18 
070bf     18 18 18 18 
070c3     18 7E 7E 00 
070c7     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
070cb     60 60 60 60 
070cf     60 60 60    | 	byte	$60[7]
070d2     66 66 7E 3C 
070d6     00 00 00 00 
070da     66 66 36 36 
070de     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
070e2     66 66 C6 C6 
070e6     00 00 00 00 
070ea     06 06 06 06 
070ee     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
070f2     06 06 7E 7E 
070f6     00 00 00 00 
070fa     C6 C6 EE EE 
070fe     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
07102     C6 C6 C6 C6 
07106     00 00 00 00 
0710a     66 66 66 6E 
0710e     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
07112     76 66 66 66 
07116     00 00 00 00 
0711a     3C 7E 66 66 
0711e     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
07122     66 66 7E 3C 
07126     00 00 00 00 
0712a     3E 7E 66 66 
0712e     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
07132     06 06 06 06 
07136     00 00 00 00 
0713a     3C 7E 66 66 
0713e     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
07142     66 56 3E 6C 
07146     00 00 00 00 
0714a     3E 7E 66 66 
0714e     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
07152     66 66 C6 C6 
07156     00 00 00 00 
0715a     7C 7E 06 06 
0715e     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
07162     60 60 7E 3E 
07166     00 00 00 00 
0716a     7E 7E 18 18 
0716e     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
07172     18 18 18 18 
07176     00 00 00 00 
0717a     66 66 66 66 
0717e     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
07182     66 66 7E 3C 
07186     00 00 00 00 
0718a     66 66 66 66 
0718e     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
07192     3C 3C 18 18 
07196     00 00 00 00 
0719a     C6 C6 C6 C6 
0719e     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
071a2     FE EE C6 82 
071a6     00 00 00 00 
071aa     66 66 66 3C 
071ae     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
071b2     3C 66 66 66 
071b6     00 00 00 00 
071ba     66 66 66 66 
071be     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
071c2     18 18 18 18 
071c6     00 00 00 00 
071ca     7E 7E 30 30 
071ce     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
071d2     06 06 7E 7E 
071d6     00 00 00 00 
071da     3C 3C 0C 0C 
071de     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
071e2     0C 0C 3C 3C 
071e6     00 00 00 00 
071ea     06 06 0C 0C 
071ee     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
071f2     60 60 C0 C0 
071f6     00 00 00 00 
071fa     3C 3C 30 30 
071fe     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
07202     30 30 3C 3C 
07206     00 00 00 00 
0720a     18 18 3C 3C 
0720e     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
07212     00 00 00 00 
07216     00 00 00 00 
0721a     00 00 00 00 
0721e     00 00 00 00 
07222     00 00       | 	byte	$00[18]
07224     FE FE 00 00 
07228     00 00 0C 0C 
0722c     18 18 00 00 
07230     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
07234     00 00 00 00 
07238     00 00 00 00 
0723c     00          | 	byte	$00[9]
0723d     3C 7C 60 7C 
07241     7E 66 66 7E 
07245     7C 00 00 00 
07249     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
0724d     3E 7E 66 66 
07251     66 66 66 7E 
07255     3E 00 00 00 
07259     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
0725d     3C 3E 06 06 
07261     06 06 06 7E 
07265     7C 00 00 00 
07269     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
0726d     7C 7E 66 66 
07271     66 66 66 7E 
07275     7C 00 00 00 
07279     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
0727d     3C 7E 66 66 
07281     7E 06 06 7E 
07285     7C 00 00 00 
07289     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
0728d     18 7E 7E 18 
07291     18 18 18 18 
07295     18 00 00 00 
07299     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0729d     7C 7E 66 66 
072a1     66 66 7E 7C 
072a5     60 7E 3E 00 
072a9     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
072ad     3E 7E 66 66 
072b1     66 66 66 66 
072b5     66 00 00 00 
072b9     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
072bd     1C 1C 18 18 
072c1     18 18 18 3C 
072c5     3C 00 00 00 
072c9     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
072cd     30 30 30 30 
072d1     30 30 30 30 
072d5     30          | 	byte	$30[9]
072d6     3E 1E 00 00 
072da     06 06 06 36 
072de     36 1E 1E 1E 
072e2     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
072e6     00 00 00 00 
072ea     1C 1C 18 18 
072ee     18 18 18 18 
072f2     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
072f6     00 00 00 00 
072fa     00 00 00    | 	byte	$00[7]
072fd     6C FE FE D6 
07301     D6 C6 C6 C6 
07305     C6 00 00 00 
07309     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
0730d     3E 7E 66 66 
07311     66 66 66 66 
07315     66 00 00 00 
07319     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
0731d     3C 7E 66 66 
07321     66 66 66 7E 
07325     3C 00 00 00 
07329     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
0732d     3E 7E 66 66 
07331     66 66 66 7E 
07335     3E 06 06 00 
07339     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
0733d     7C 7E 66 66 
07341     66 66 66 7E 
07345     7C 60 60 00 
07349     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
0734d     3E 7E 66 06 
07351     06 06 06 06 
07355     06 00 00 00 
07359     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
0735d     7C 7E 06 0E 
07361     3C 70 60 7E 
07365     3E 00 00 00 
07369     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
0736d     7E 7E 18 18 
07371     18 18 18 78 
07375     70 00 00 00 
07379     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
0737d     66 66 66 66 
07381     66 66 66    | 	byte	$66[7]
07384     7E 7C 00 00 
07388     00 00 00 00 
0738c     00 66 66 66 
07390     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
07394     18 18 00 00 
07398     00 00 00 00 
0739c     00 C6 C6 D6 
073a0     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
073a4     C6 82 00 00 
073a8     00 00 00 00 
073ac     00 66 66 3C 
073b0     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
073b4     66 66 00 00 
073b8     00 00 00 00 
073bc     00 66 66 66 
073c0     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
073c4     7C 60 7E 3E 
073c8     00 00 00 00 
073cc     00 7E 7E 30 
073d0     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
073d4     7E 7E 00 00 
073d8     00 00 30 18 
073dc     18 18 18 0C 
073e0     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
073e4     18 30 00 00 
073e8     00 00 18 18 
073ec     18 18 18 18 
073f0     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
073f4     18 18 00 00 
073f8     00 00 0C 18 
073fc     18 18 18 30 
07400     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
07404     18 0C 00 00 
07408     00 00 6C 7E 
0740c     36 00 00 00 
07410     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
07414     00 00 00 00 
07418     00 00 00 00 
0741c     00          | 	byte	$00[9]
0741d     18 18 18 18 
07421     18 18 00 00 
07425     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
07428     00 00 00 00 
0742c     00 FF FF FF | twocolors      long  $00000000,$FFFFFF00
07430     00 00 00 00 
07434     00 80 80 80 
07438     00 00 00 FF 
0743c     00 FF FF FF | fourcolors     long  $00000000,$80808000,$FF000000,$FFFFFF00 'black,red,gray,white
07440     00 00 00 00 
07444     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
07445     80 00 00 00 
07449     00 80 00 00 
0744d     80 80 00 00 
07451     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
07455     80 00 80 00 
07459     00 40 80 00 
0745d     AA AA AA 00 
07461     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
07465     FF 00 00 00 
07469     00 FF 00 00 
0746d     FF FF 00 00 
07471     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
07475     FF 00 FF 00 
07479     00 FF FF 00 
0747d     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
07480     00 00 00 00 
07484     00          | ataripalette   file "ataripalettep2.def"
07485     11 11 11 00 
07489     22 22 22 00 
0748d     33 33 33 00 
07491     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
07495     55 55 55 00 
07499     66 66 66 00 
0749d     77 77 77 00 
074a1     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
074a5     99 99 99 00 
074a9     AA AA AA 00 
074ad     BB BB BB 00 
074b1     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
074b5     DD DD DD 00 
074b9     EE EE EE 00 
074bd     FF FF FF 00 
074c1     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
074c5     00 14 40 00 
074c9     00 1E 60 00 
074cd     00 28 80 00 
074d1     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
074d5     00 3C BF 00 
074d9     00 46 DF 00 
074dd     00 50 FF 00 
074e1     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
074e5     39 77 FF 00 
074e9     55 8A FF 00 
074ed     71 9E FF 00 
074f1     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
074f5     AA C5 FF 00 
074f9     C6 D8 FF 00 
074fd     E3 EC FF 00 
07501     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
07505     00 00 40 00 
07509     00 00 60 00 
0750d     00 00 80 00 
07511     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
07515     00 00 BF 00 
07519     00 00 DF 00 
0751d     00 00 FF 00 
07521     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
07525     39 39 FF 00 
07529     55 55 FF 00 
0752d     71 71 FF 00 
07531     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
07535     AA AA FF 00 
07539     C6 C6 FF 00 
0753d     E3 E3 FF 00 
07541     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
07545     20 00 40 00 
07549     30 00 60 00 
0754d     40 00 80 00 
07551     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
07555     60 00 BF 00 
07559     70 00 DF 00 
0755d     80 00 FF 00 
07561     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
07565     9C 39 FF 00 
07569     AA 55 FF 00 
0756d     B8 71 FF 00 
07571     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
07575     D5 AA FF 00 
07579     E3 C6 FF 00 
0757d     F1 E3 FF 00 
07581     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
07585     40 00 40 00 
07589     60 00 60 00 
0758d     80 00 80 00 
07591     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
07595     BF 00 BF 00 
07599     DF 00 DF 00 
0759d     FF 00 FF 00 
075a1     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
075a5     FF 39 FF 00 
075a9     FF 55 FF 00 
075ad     FF 71 FF 00 
075b1     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
075b5     FF AA FF 00 
075b9     FF C6 FF 00 
075bd     FF E3 FF 00 
075c1     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
075c5     40 00 20 00 
075c9     60 00 30 00 
075cd     80 00 40 00 
075d1     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
075d5     BF 00 60 00 
075d9     DF 00 70 00 
075dd     FF 00 80 00 
075e1     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
075e5     FF 39 9C 00 
075e9     FF 55 AA 00 
075ed     FF 71 B8 00 
075f1     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
075f5     FF AA D5 00 
075f9     FF C6 E3 00 
075fd     FF E3 F1 00 
07601     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
07605     40 00 00 00 
07609     60 00 00 00 
0760d     80 00 00 00 
07611     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
07615     BF 00 00 00 
07619     DF 00 00 00 
0761d     FF 00 00 00 
07621     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
07625     FF 39 39 00 
07629     FF 55 55 00 
0762d     FF 71 71 00 
07631     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
07635     FF AA AA 00 
07639     FF C6 C6 00 
0763d     FF E3 E3 00 
07641     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
07645     40 10 00 00 
07649     60 18 00 00 
0764d     80 20 00 00 
07651     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
07655     BF 30 00 00 
07659     DF 38 00 00 
0765d     FF 40 00 00 
07661     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
07665     FF 6A 39 00 
07669     FF 80 55 00 
0766d     FF 95 71 00 
07671     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
07675     FF BF AA 00 
07679     FF D5 C6 00 
0767d     FF EA E3 00 
07681     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
07685     40 20 00 00 
07689     60 30 00 00 
0768d     80 40 00 00 
07691     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
07695     BF 60 00 00 
07699     DF 70 00 00 
0769d     FF 80 00 00 
076a1     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
076a5     FF 9C 39 00 
076a9     FF AA 55 00 
076ad     FF B8 71 00 
076b1     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
076b5     FF D5 AA 00 
076b9     FF E3 C6 00 
076bd     FF F1 E3 00 
076c1     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
076c5     40 30 00 00 
076c9     60 48 00 00 
076cd     80 60 00 00 
076d1     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
076d5     BF 90 00 00 
076d9     DF A8 00 00 
076dd     FF C0 00 00 
076e1     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
076e5     FF CE 39 00 
076e9     FF D5 55 00 
076ed     FF DC 71 00 
076f1     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
076f5     FF EA AA 00 
076f9     FF F1 C6 00 
076fd     FF F8 E3 00 
07701     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
07705     30 40 00 00 
07709     48 60 00 00 
0770d     60 80 00 00 
07711     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
07715     90 BF 00 00 
07719     A8 DF 00 00 
0771d     C0 FF 00 00 
07721     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
07725     CE FF 39 00 
07729     D5 FF 55 00 
0772d     DC FF 71 00 
07731     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
07735     EA FF AA 00 
07739     F1 FF C6 00 
0773d     F8 FF E3 00 
07741     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
07745     00 40 00 00 
07749     00 60 00 00 
0774d     00 80 00 00 
07751     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
07755     00 BF 00 00 
07759     00 DF 00 00 
0775d     00 FF 00 00 
07761     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
07765     39 FF 39 00 
07769     55 FF 55 00 
0776d     71 FF 71 00 
07771     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
07775     AA FF AA 00 
07779     C6 FF C6 00 
0777d     E3 FF E3 00 
07781     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
07785     00 40 14 00 
07789     00 60 1E 00 
0778d     00 80 28 00 
07791     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
07795     00 BF 3C 00 
07799     00 DF 46 00 
0779d     00 FF 50 00 
077a1     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
077a5     39 FF 77 00 
077a9     55 FF 8A 00 
077ad     71 FF 9E 00 
077b1     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
077b5     AA FF C5 00 
077b9     C6 FF D8 00 
077bd     E3 FF EC 00 
077c1     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
077c5     00 40 28 00 
077c9     00 60 3C 00 
077cd     00 80 50 00 
077d1     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
077d5     00 BF 78 00 
077d9     00 DF 8C 00 
077dd     00 FF A0 00 
077e1     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
077e5     39 FF B5 00 
077e9     55 FF C0 00 
077ed     71 FF CA 00 
077f1     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
077f5     AA FF DF 00 
077f9     C6 FF EA 00 
077fd     E3 FF F4 00 
07801     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
07805     00 40 40 00 
07809     00 60 60 00 
0780d     00 80 80 00 
07811     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
07815     00 BF BF 00 
07819     00 DF DF 00 
0781d     00 FF FF 00 
07821     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
07825     39 FF FF 00 
07829     55 FF FF 00 
0782d     71 FF FF 00 
07831     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
07835     AA FF FF 00 
07839     C6 FF FF 00 
0783d     E3 FF FF 00 
07841     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
07845     00 28 40 00 
07849     00 3C 60 00 
0784d     00 50 80 00 
07851     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
07855     00 78 BF 00 
07859     00 8C DF 00 
0785d     00 A0 FF 00 
07861     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
07865     39 B5 FF 00 
07869     55 C0 FF 00 
0786d     71 CA FF 00 
07871     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
07875     AA DF FF 00 
07879     C6 EA FF 00 
0787d     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
07880                 | '**********************************************************************************
07880                 | '
07880                 | '        Timings and colors definitions
07880                 | '
07880                 | '**********************************************************************************
07880                 | 
07880                 |    'streamer sets for text mode, to add to timings[0..5]
07880                 | 
07880                 | 
07880                 | '                     bf.hs, hs,  bf.vis  visible, lr bord, pixel, ud bord,  up p., vsync, down p., mode, cpl, scanlines,  clock,                  hubset                  total vis lines
07880     10 00 00 00 
07884     50 00 00 00 
07888     14 00 00 00 
0788c     00 04 00 00 | timings000      long   16,   80,    20,    1024,    112,     8,     48,      16,      16,    16,      0,  100,   480,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
07890     70 00 00 00 
07894     08 00 00 00 
07898     30 00 00 00 
0789c     10 00 00 00 | 	byte	$70, $00, $00, $00, $08, $00, $00, $00, $30, $00, $00, $00, $10, $00, $00, $00
078a0     10 00 00 00 
078a4     10 00 00 00 
078a8     00 00 00 00 
078ac     64 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $64, $00, $00, $00
078b0     E0 01 00 00 
078b4     F6 32 24 15 
078b8     FB 6C C3 01 
078bc     40 02 00 00 | 	byte	$e0, $01, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
078c0                 | 'timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     319215686,   %1_110010__11_0010_1101__1111_1011,   544
078c0     12 00 00 00 
078c4     30 00 00 00 
078c8     10 00 00 00 
078cc     B0 03 00 00 | timings064      long   18,   48,    16,     944,     24,     8,     24,      24,      32,    24,     64,  112,   496,     320000000,   %1_0000_00__00_0000_1111__1111_1011,   544
078d0     18 00 00 00 
078d4     08 00 00 00 
078d8     18 00 00 00 
078dc     18 00 00 00 | 	byte	$18, $00, $00, $00, $08, $00, $00, $00, $18, $00, $00, $00, $18, $00, $00, $00
078e0     20 00 00 00 
078e4     18 00 00 00 
078e8     40 00 00 00 
078ec     70 00 00 00 | 	byte	$20, $00, $00, $00, $18, $00, $00, $00, $40, $00, $00, $00, $70, $00, $00, $00
078f0     F0 01 00 00 
078f4     00 D0 12 13 
078f8     FB 0F 00 01 
078fc     20 02 00 00 | 	byte	$f0, $01, $00, $00, $00, $d0, $12, $13, $fb, $0f, $00, $01, $20, $02, $00, $00
07900     10 00 00 00 
07904     40 00 00 00 
07908     10 00 00 00 
0790c     30 03 00 00 | timings128      long   16,   64,    16,     816,      8,     8,     8,       32,      64,    32,    128,  100,   480,     283750000,   %1_111111__11_1000_1011__1111_1011,   496
07910     08 00 00 00 
07914     08 00 00 00 
07918     08 00 00 00 
0791c     20 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $20, $00, $00, $00
07920     40 00 00 00 
07924     20 00 00 00 
07928     80 00 00 00 
0792c     64 00 00 00 | 	byte	$40, $00, $00, $00, $20, $00, $00, $00, $80, $00, $00, $00, $64, $00, $00, $00
07930     E0 01 00 00 
07934     70 AE E9 10 
07938     FB 8B FF 01 
0793c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $70, $ae, $e9, $10, $fb, $8b, $ff, $01, $f0, $01, $00, $00
07940     10 00 00 00 
07944     50 00 00 00 
07948     14 00 00 00 
0794c     00 04 00 00 | timings192      long   16,   80,    20,    1024,      0,     8,     0,       16,      16,    16,    192,  128,   576,     354693878,   %1_110000__11_0110_1100__1111_1011,   576
07950     00 00 00 00 
07954     08 00 00 00 
07958     00 00 00 00 
0795c     10 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $10, $00, $00, $00
07960     10 00 00 00 
07964     10 00 00 00 
07968     C0 00 00 00 
0796c     80 00 00 00 | 	byte	$10, $00, $00, $00, $10, $00, $00, $00, $c0, $00, $00, $00, $80, $00, $00, $00
07970     40 02 00 00 
07974     F6 32 24 15 
07978     FB 6C C3 01 
0797c     40 02 00 00 | 	byte	$40, $02, $00, $00, $f6, $32, $24, $15, $fb, $6c, $c3, $01, $40, $02, $00, $00
07980     50 00 00 00 
07984     A0 00 00 00 
07988     54 00 00 00 
0798c     30 03 00 00 | timings256      long   80,  160,    84,     816,      8,     8,     8,        8,      12,     8,    256,  100,   480,     357959184,   %1_110000__11_0110_0100__1111_1011,   496
07990     08 00 00 00 
07994     08 00 00 00 
07998     08 00 00 00 
0799c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
079a0     0C 00 00 00 
079a4     08 00 00 00 
079a8     00 01 00 00 
079ac     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $00, $01, $00, $00, $64, $00, $00, $00
079b0     E0 01 00 00 
079b4     10 06 56 15 
079b8     FB 64 C3 01 
079bc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $10, $06, $56, $15, $fb, $64, $c3, $01, $f0, $01, $00, $00
079c0     50 00 00 00 
079c4     32 00 00 00 
079c8     50 00 00 00 
079cc     30 03 00 00 | timings320      long   80,   50,    80,     816,      8,     8,     8,        8,      12,     8,    320,  100,   480,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
079d0     08 00 00 00 
079d4     08 00 00 00 
079d8     08 00 00 00 
079dc     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
079e0     0C 00 00 00 
079e4     08 00 00 00 
079e8     40 01 00 00 
079ec     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $40, $01, $00, $00, $64, $00, $00, $00
079f0     E0 01 00 00 
079f4     F2 CD 33 13 
079f8     FB 53 92 01 
079fc     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
07a00     18 00 00 00 
07a04     30 00 00 00 
07a08     18 00 00 00 
07a0c     30 03 00 00 | timings384      long   24,   48,    24,     816,      8,     8,     8,        8,      12,     8,    384,  100,   480,     286363636,   %1_010101__01_0011_1010__1111_1011,   496
07a10     08 00 00 00 
07a14     08 00 00 00 
07a18     08 00 00 00 
07a1c     08 00 00 00 | 	byte	$08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00, $08, $00, $00, $00
07a20     0C 00 00 00 
07a24     08 00 00 00 
07a28     80 01 00 00 
07a2c     64 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $80, $01, $00, $00, $64, $00, $00, $00
07a30     E0 01 00 00 
07a34     F4 8F 11 11 
07a38     FB 3A 55 01 
07a3c     F0 01 00 00 | 	byte	$e0, $01, $00, $00, $f4, $8f, $11, $11, $fb, $3a, $55, $01, $f0, $01, $00, $00
07a40     20 00 00 00 
07a44     40 00 00 00 
07a48     22 00 00 00 
07a4c     80 03 00 00 | timings448      long   32,   64,    34,     896,      0,     8,     0,        8,      12,     8,    448,  112,   496,     322162162,   %1_100100__10_0101_0011__1111_1011,   496
07a50     00 00 00 00 
07a54     08 00 00 00 
07a58     00 00 00 00 
07a5c     08 00 00 00 | 	byte	$00, $00, $00, $00, $08, $00, $00, $00, $00, $00, $00, $00, $08, $00, $00, $00
07a60     0C 00 00 00 
07a64     08 00 00 00 
07a68     C0 01 00 00 
07a6c     70 00 00 00 | 	byte	$0c, $00, $00, $00, $08, $00, $00, $00, $c0, $01, $00, $00, $70, $00, $00, $00
07a70     F0 01 00 00 
07a74     F2 CD 33 13 
07a78     FB 53 92 01 
07a7c     F0 01 00 00 | 	byte	$f0, $01, $00, $00, $f2, $cd, $33, $13, $fb, $53, $92, $01, $f0, $01, $00, $00
07a80                 | 'timings999      long    0,    0,     0,       0,      0,     0,     0,        0,       0,     0,      0,    0,     0,             0,                                    0,     0
07a80     00 75 C7 97 
07a84     27 47 F6 0A 
07a88     05 79 CB 9B 
07a8c     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
07a90                 | 
07a90     28 12 64 FD | hdmi            setq    #9
07a94     00 DF 06 FB |                 rdlong  framebuf,  ptra                  'read pointers
07a98                 |            '     setq2   #255
07a98                 |             '    rdlong  $100, paletteptr 
07a98     00 26 6F FC |                 wrlong  #aend,#0                         'write driver length to hub#0: DEBUG/demo
07a9c     3C 00 66 FD |                 setcmod #$100                            'enable HDMI mode
07aa0     C0 F9 06 F6 |                 mov     ii,#448                          '7 << 6          
07aa4     78 F9 02 F1 |                 add     ii,hbase
07aa8     58 F8 62 FD |                 drvl    ii                                 '#7<<6 + hdmi_base      ' enable HDMI pins
07aac     7B 0B 80 FF 
07ab0     7C 01 0B FC |                 wrpin   ##%10110_1111_0111_10_00000_0, ii  '#7<<6 + hdmi_base      ' a '123 ohm BITDAC for pins
07ab4                 | 
07ab4     66 66 86 FF 
07ab8     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                   'set streamer freq to 1/10th clk
07abc                 | 
07abc                 | 
07abc                 | ''--------  frame rendering main loop  ---------------------------------------------------
07abc                 | 
07abc                 | p101
07abc     28 14 64 FD |                 setq    #10
07ac0     00 DF 06 FB |                 rdlong  framebuf,  ptra
07ac4     28 1E 64 FD |                 setq    #15
07ac8     74 9B 02 FB |                 rdlong  m_bs,modeptr                     ' read timings
07acc     71 99 02 FB |                 rdlong  border,borderptr
07ad0                 | 
07ad0     01 C4 06 F1 |                 add     frames,#1
07ad4     76 F5 02 F6 |                 mov     dlptr2,dlptr
07ad8                 | 
07ad8     73 C7 02 FB |                 rdlong  cursorx, cursorptr               ' read cursor position
07adc     63 C9 EA F8 |                 getbyte cursory, cursorx,#1              ' y position at byte #1
07ae0     63 C3 F2 F8 |                 getbyte cursorsh,cursorx,#2              ' shape at byte #2
07ae4     FF C6 06 F5 |                 and     cursorx,#255                     ' clear the cursor x varioble from y and shape
07ae8                 |  '' up porch
07ae8                 | 
07ae8     48 FD 02 F6 |                 mov     hsync0,sync_000                  '
07aec     49 FF 02 F6 |                 mov     hsync1,sync_001
07af0     37 A8 46 FB |                 callpa  i_upporch ,#blank
07af4     72 01 68 FC |                 wrlong  #0,vblankptr
07af8                 |                 
07af8     1F EA 16 F4 |                 testb   paletteptr,#31 wc
07afc     29 FE 65 3D |          if_nc  setq2   #255
07b00     75 01 00 3B |          if_nc  rdlong  $000, paletteptr                'read palette
07b04                 | 
07b04                 | '' cursor blinking
07b04                 | 
07b04     04 C4 0E F4 |                 testb   frames,#4 wz                     ' cursor blinks at framerate/16, todo: define
07b08     81 C6 06 A6 |          if_z   mov     cursorx,#129                     ' to switch the cursor off, move it out of the screen
07b0c                 | 
07b0c                 | '' main screen
07b0c                 | 
07b0c     00 BE 06 F6 |                 mov linenum,#0
07b10     00 18 07 F6 |                 mov rcnt,#0
07b14     00 1C 07 F6 |                 mov rcnt2a,#0
07b18                 | 
07b18                 | 
07b18     00 18 0F F2 | p301            cmp rcnt,#0 wz
07b1c     18 00 90 AD |         if_z    jmp #p306
07b20     01 18 87 F1 |                 sub rcnt,#1
07b24     90 F7 02 F6 |                 mov dl,rdl
07b28     8D 1D 0B F7 |                incmod rcnt2a,rcnt2 wz
07b2c     8F F7 02 A1 |    if_z        add dl,roffset  
07b30     7B 21 03 F6 |                 mov rdl,dl
07b34     04 00 90 FD |                 jmp #p307          
07b38                 |           
07b38                 |                 
07b38     7A F7 02 FB | p306            rdlong  dl,dlptr2
07b3c     7B FB 1A F6 | p307            mov     framebuf2,dl wcz                  'read a line start in the framebuffer from DL entry
07b40     6A FA 7A FD |                 rczr    framebuf2 wcz                     'but only if not %11 at lowest bits which means special DL entry
07b44     34 00 90 7D |    if_nz_or_nc  jmp     #p303                        
07b48                 | 
07b48                 | '' Special entry:
07b48                 | '' - repeat                 %nnnn_nnnn_nnnn_qqqq_mmmm_mmmm_mmmm_0111    repeat the next dl line n times, after q lines add offset m
07b48                 | '' - reload palette         %mmmm_mmmm_nnnn_nnnn_qqqq_qqqq_qqqq_1011    reload n palette entries from m color from palette_ptr+q
07b48                 | '' - set border color       %rrrr_rrrr_gggg_gggg_bbbb_bbbb_0001_0011    set border to rgb
07b48                 | '' - set border color       %0000_0000_0000_0000_pppp_pppp_0001_1011    set border color to palette entry #p
07b48                 | '' todo: set horizontal scroll (if needed)
07b48                 | 
07b48     02 FA 66 F0 |                 shl framebuf2,#2
07b4c     7D 23 43 F8 |                 getnib dlc,framebuf2,#0
07b50     04 22 0F F2 |                 cmp dlc,#%100 wz
07b54                 |   
07b54                 |                 
07b54     04 F4 06 F1 |                 add dlptr2,#4
07b58     BC FF 9F 5D |                              if_nz  jmp #p301  '' now ignore unknown instruction 
07b5c     7A 21 03 FB |                  rdlong rdl,dlptr2
07b60     7D 19 3B F9 |                  getword rcnt,framebuf2,#1 
07b64     04 18 47 F0 |                  shr rcnt,#4
07b68                 |              
07b68     7D 1B 63 F8 |                  getnib rcnt2,framebuf2,#4
07b6c     7D 1F 33 F9 |                  getword roffset,framebuf2,#0
07b70                 |                 
07b70     04 1E 47 F0 |                  shr roffset,#4
07b74     0C 1E 67 F0 |                  shl roffset,#12
07b78                 |   
07b78     9C FF 9F FD |                  jmp #p301
07b7c                 |                  
07b7c                 |                  
07b7c                 | p303           ' mov     framebuf2,dl                    ' read a line start in the framebuffer from DL entry
07b7c     0C FA 46 F0 |                 shr     framebuf2,#12
07b80     02 FA 66 F0 |                 shl     framebuf2,#2
07b84                 | 
07b84     7B 03 E3 F8 |                 getbyte t1,dl,#0
07b88     00 02 0F F2 |                 cmp     t1,#0 wz
07b8c     34 00 90 AD |     if_z        jmp     #borderline
07b90                 | 
07b90     00 F6 16 F4 |                  testb   dl,#0  wc     ' bit 0 set = text OR extended:TODO
07b94     50 00 90 CD |           if_c   jmp     #textline
07b98     50 02 90 3D |           if_nc  jmp     #graphline
07b9c                 | '
07b9c     01 BE 06 F1 | p302            add     linenum,#1
07ba0     04 F4 06 F1 |                 add     dlptr2,#4
07ba4     5C BF 0A F2 |                 cmp     linenum,i_totalvis  wz
07ba8     6C FF 9F 5D |          if_nz  jmp     #p301
07bac                 | 
07bac     72 03 68 FC | p112            wrlong  #1,vblankptr
07bb0     07 AC 46 FB |                 callpa  i_downporch ,#blank             'bottom blanks
07bb4                 | 
07bb4     4A FD 02 F6 |                 mov     hsync0,sync_222                 'vsync on
07bb8     4B FF 02 F6 |                 mov     hsync1,sync_223
07bbc     04 AA 46 FB |                 callpa  i_vsync,#blank                  'vertical sync blanks
07bc0     F8 FE 9F FD |                 jmp     #p101
07bc4                 | 
07bc4                 | '' ---------------  END of frame rendering loop -------------------------------------------
07bc4                 | 
07bc4                 | 
07bc4     14 00 B0 FD | borderline      call    #hsync                      ' make a border
07bc8     4C A1 C2 FC |                 xcont   m_vi,border
07bcc     CC FF 9F FD |                 jmp     #p302
07bd0                 | 
07bd0                 | 
07bd0     08 00 B0 FD | blank           call    #hsync                          'blank lines
07bd4     7E A1 C2 FC |                 xcont   m_vi,hsync0
07bd8     FD ED 6F 0B |         _ret_   djnz    pa,#blank
07bdc                 | 
07bdc     7E 9B C2 FC | hsync           xcont   m_bs,hsync0                     'horizontal sync
07be0     7F 9D B2 FC |                 xzero   m_sn,hsync1
07be4     7E 9F C2 0C |         _ret_   xcont   m_bv,hsync0
07be8                 | 
07be8                 | 
07be8                 | 
07be8                 | ''--%aaaa_aaaa_aaaa_aaaa_aazz_nnnn_llll_ll_01 - txt
07be8                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph
07be8                 |   '' aaaa_aaaa_aaaa-aaaa_aarr_rrrr_rrrr_rr_11 - extended, next long to read
07be8                 | 
07be8                 | '' Display a text line DL[31..12]=addr, nibble #1=textline, zoom: todo
07be8                 | 
07be8     63 CD 02 F6 | textline        mov     cursorpos2,cursorx              ' we need another var for cursor as this code will repeat 16x for every char line
07bec                 | 
07bec     7B 01 53 F8 |                 getnib  fontline,dl,#2                 ' fontline is 0 to 15, a line in font def
07bf0     7B 17 5B F8 |                 getnib  zoom, dl,#3
07bf4     03 16 07 F5 |                 and             zoom, #3
07bf8                 | 
07bf8                 | 
07bf8                 | 
07bf8     7B BD 02 F6 |                 mov     linestart,dl                    ' linestart will be used for checking cursor y and compute line start addr in the buffer
07bfc     02 BC 46 F0 |                 shr     linestart,#2                    ' scanline to char line
07c00     3F BC 06 F5 |                 and     linestart,#63
07c04     64 BD 0A F2 |                 cmp     linestart,cursory wz            ' if the cursor is not here
07c08     81 CC 06 56 |           if_nz mov     cursorpos2,#129                 ' move it out of the screen
07c0c                 | 
07c0c     CC FF BF FD |                 call    #hsync                          ' now call hsync to gain some time between xconts
07c10                 | 
07c10                 |                        ' if fontline =0, get a border color
07c10                 | 
07c10     51 03 33 F9 | p102            getword t1,m_border,#0
07c14     00 02 0F F2 |                 cmp     t1, #0 wz
07c18     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07c1c                 | 
07c1c     61 01 1B F2 |                 cmp     fontline,cursorsh wcz           ' if the cursor have to be not displayed due to its shape
07c20     81 CA 06 C6 |           if_c  mov     cursorpos,#129                  ' move it out of the screen
07c24     66 CB 02 36 |          if_nc  mov     cursorpos,cursorpos2
07c28     01 CA 06 F1 |                 add     cursorpos,#1                    ' we will substract #1 below so compensate this here
07c2c     70 05 03 F6 |                 mov     t2,fontbuf                      ' font definition pointer
07c30     80 05 03 F1 |                 add     t2,fontline                     ' add a current font line
07c34     52 BB 02 F6 |                 mov m_lut2, m_lut1
07c38     6A BB 02 F1 |                 add m_lut2, lutt1
07c3c     58 0F 03 F6 |                 mov cpl2,i_cpl
07c40                 | 
07c40     02 16 0F F2 |                cmp zoom,#2 wz
07c44     E4 00 90 AD |           if_z jmp #p420
07c48     01 16 0F F2 |                cmp zoom,#1 wz
07c4c     64 00 90 AD |           if_z jmp #p410
07c50     00 16 0F F2 |                 cmp zoom,#0 wz
07c54     04 00 90 AD |           if_z jmp #p400
07c58     50 01 90 FD |                jmp #p430
07c5c                 | 
07c5c                 |                    '
07c5c                 |  ''---------------------------------------------------------------------------------------------------------
07c5c     7D 11 03 FB |  p400                   rdlong  char,framebuf2          ' read a long char                          '1
07c60     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07c64     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07c68     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07c6c     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07c70     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07c74     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07c78     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07c7c     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07c80     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07c84                 | 
07c84     81 BB C2 FC |                         xcont m_lut2,t1
07c88                 | 
07c88     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07c8c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07c90     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07c94     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07c98     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07c9c     01 C0 86 F1 |                         sub     lutaddr,#1
07ca0                 | 
07ca0     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07ca4     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07ca8     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07cac                 | 
07cac     EB 0F 6F FB |                         djnz   cpl2,#p400
07cb0     28 01 90 FD |  p401                   jmp    #p103
07cb4                 | 
07cb4                 | ''------------------------------------------------------------------------------------------------------------
07cb4                 | 
07cb4     01 0E 47 F0 |  p410                   shr cpl2,#1
07cb8                 | 
07cb8                 | ''---------------------------------------------------------------------------------------------------------
07cb8     7D 11 03 FB |  p412                   rdlong  char,framebuf2          ' read a long char                          '1
07cbc     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07cc0     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07cc4     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07cc8     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07ccc     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07cd0     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07cd4     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07cd8     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07cdc     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07ce0                 | 
07ce0                 | 
07ce0     81 07 4B F8 |                         getnib t3,t1,#1                   ' 4 pixels to t3                                              '1  - +
07ce4     81 03 43 F8 |                         getnib t1,t1,#0                   ' 4 pixels to t1                                                      '2  - +
07ce8     63 02 63 FD |                         mergew t1                         ' make 01010101 from 1111                                     '3  - +
07cec     03 02 07 FA |                         mul t1,#3
07cf0     81 BB C2 FC |                         xcont m_lut2,t1
07cf4     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07cf8     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07cfc     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07d00     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07d04     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07d08     01 C0 86 F1 |                         sub     lutaddr,#1
07d0c     63 06 63 FD |                         mergew t3
07d10     03 06 07 FA |                         mul t3,#3
07d14     83 BB C2 FC |                         xcont m_lut2,t3
07d18                 | 
07d18     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07d1c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07d20                 | 
07d20     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07d24                 | 
07d24     E4 0F 6F FB |                         djnz   cpl2,#p412
07d28     B0 00 90 FD |  p411                   jmp    #p103
07d2c                 | 
07d2c                 | ''------------------------------------------------------------------------------------------------------------
07d2c                 | 
07d2c     02 0E 47 F0 |  p420                   shr cpl2,#2
07d30                 | 
07d30                 | ''---------------------------------------------------------------------------------------
07d30     7D 11 03 FB |  p422                   rdlong  char,framebuf2          ' read a long char                          '1
07d34     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07d38     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07d3c     88 11 E3 F8 |                         getbyte char,char, #0           ' word #0 - char code                       '4
07d40     04 FA 06 F1 |                         add     framebuf2,#4            ' point to the next long                    '5
07d44     04 10 67 F0 |                         shl     char,#4                 ' 1 char=16 bytes in font def               '6
07d48     82 11 03 F1 |                         add     char,t2                 ' add this to font/line pointer             '7
07d4c     88 03 C3 FA |                         rdbyte  t1,char                 ' and get 8 pixels prom there               '8
07d50     01 CA 8E F1 |                         sub     cursorpos,#1 wz         ' if there is a cursor                      '9
07d54     FF 02 67 A5 |                   if_z  xor     t1, #$FF                ' reverse the colors                        '10
07d58                 | 
07d58     61 02 63 FD |                         mergeb t1
07d5c     81 07 3B F9 |                         getword t3,t1,#1
07d60     0F 02 07 FA |                         mul t1,#15
07d64     81 BB C2 FC |                         xcont m_lut2,t1
07d68                 | 
07d68     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07d6c     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07d70     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07d74     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07d78     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07d7c     01 C0 86 F1 |                         sub     lutaddr,#1
07d80                 | 
07d80     81 09 EB F8 |                         getbyte t4,t1,#1        '
07d84     84 BB C2 FC |                         xcont m_lut2,t4                                                                                                           '
07d88                 | 
07d88     0F 06 07 FA |                         mul t3,#15
07d8c     83 BB C2 FC |                         xcont m_lut2,t3
07d90                 | 
07d90     83 0B EB F8 |                         getbyte t5,t3,#1
07d94     85 BB C2 FC |                         xcont m_lut2, t5
07d98     10 BA E6 F4 |                         bitnot  m_lut2,#16                                                          '19
07d9c     10 A4 E6 F4 |                         bitnot  m_lut1,#16                                                          '19
07da0                 | 
07da0     20 C0 66 F5 |                         xor     lutaddr,#32             ' use LUT #0-1 and 32-33                    '20
07da4                 | 
07da4     E2 0F 6F FB |                         djnz   cpl2,#p422
07da8     30 00 90 FD |  p421                   jmp    #p103
07dac                 | 
07dac                 | '--------------------------------------------------------------------------------------------------------------
07dac                 | 
07dac     7D 11 03 FB |  p430                   rdlong  char,framebuf2          ' read a long char                          '1
07db0     88 13 F3 F8 |                         getbyte backcolor,char,#2       ' byte #2 - background color                '2
07db4     88 15 FB F8 |                         getbyte charcolor,char,#3       ' byte #3 - foreground color                '3
07db8                 | 
07db8     00 BA C6 FC |                         xcont m_lut2,#0
07dbc                 | 
07dbc     89 0B A3 FA |                         rdlut   t5,backcolor            ' read a background color from palette      '13
07dc0     60 0B 33 FC |                         wrlut   t5,lutaddr              ' and write it to LUT #0 or #32             '14
07dc4     01 C0 06 F1 |                         add     lutaddr,#1                                                          '15
07dc8     8A 0B A3 FA |                         rdlut   t5,charcolor            ' the same for the foreground               '16
07dcc     60 0B 33 FC |                         wrlut   t5,lutaddr                                                          '17
07dd0     01 C0 86 F1 |                         sub     lutaddr,#1
07dd4                 | 
07dd4     F5 0F 6F FB |                         djnz   cpl2,#p430
07dd8     00 00 90 FD |  p431                   jmp    #p103
07ddc                 | 
07ddc                 | ''------------------------------------------------------------------------------------------------------------
07ddc                 | 
07ddc                 | 
07ddc                 | 
07ddc     51 25 33 F9 | p103            getword  mb2,m_border,#0
07de0     00 24 0F F2 |                 cmp      mb2, #0 wz
07de4     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
07de8                 | 
07de8     B0 FD 9F FD |                 jmp #p302
07dec                 | 
07dec                 | '' -------------------------------------- END of text line ---------------------------------
07dec                 | 
07dec                 |   '' aaaa_aaaa_aaaa_aaaa_aazz_rrrr_rrrr_cc_10 - graph - display a graphics line
07dec                 | 
07dec     EC FD BF FD | graphline       call    #hsync                          ' now call hsync to gain some time between xconts
07df0                 | 
07df0                 | 
07df0     51 25 33 F9 | p202            getword mb2,m_border,#0
07df4     00 24 0F F2 |                 cmp     mb2, #0 wz
07df8     4C A3 C2 5C |           if_nz xcont   m_border,border                 ' display a left border if exists
07dfc                 | 
07dfc                 | '----------------------------------------- display pixels
07dfc                 | 
07dfc     52 BB 02 F6 |                 mov     m_lut2,m_lut1                   ' m_lut1 loaded from hub timing block, pixel per long
07e00     58 0F 03 F6 |                 mov     cpl2,i_cpl                      ' i_cpl in graphic modes is longs per line
07e04                 | 
07e04     7B 17 5B F8 |                 getnib  zoom, dl,#3
07e08     03 16 07 F5 |                 and             zoom, #3                        ' get a horizontal zoom for the line
07e0c                 | 
07e0c     7B BD 02 F6 |                 mov     colordepth,dl                   ' get a color depth, reuse linestart var f         '
07e10     0C BC 06 F5 |                 and     colordepth,#12
07e14                 | 
07e14     00 BC 0E F2 |                 cmp     colordepth,#%0000 wz            ' 1 bpp modes
07e18     6B BB 02 A1 |           if_z  add     m_lut2,lutg1
07e1c     64 00 90 AD |           if_z  jmp     #p240
07e20                 | 
07e20     04 BC 0E F2 |                 cmp     colordepth,#%0100 wz            ' 2 bpp modes
07e24     6C BB 02 A1 |           if_z  add     m_lut2,lutg2
07e28     98 00 90 AD |           if_z  jmp     #p250
07e2c                 | 
07e2c     08 BC 0E F2 |                 cmp     colordepth,#%1000 wz            ' 4 bpp modes
07e30     6D BB 02 A1 |           if_z  add     m_lut2,lutg4
07e34     FC 00 90 AD |           if_z  jmp     #p260
07e38                 | 
07e38     6E BB 02 F1 |                 add m_lut2,lutg8                        ' 8 bpp modes
07e3c                 | 
07e3c                 | '' --- 8 bit color modes
07e3c                 | 
07e3c     00 16 0F F2 |                 cmp zoom, #%00 wz   '256 colors, zoom x1
07e40     50 01 90 AD |                 if_z jmp #p251      'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07e44                 | 
07e44     01 16 0F F2 |                 cmp zoom, #%01 wz   '256 colors, zoom x2
07e48     2A 0C 07 A6 |                 if_z mov skippattern,#%101010
07e4c                 |        
07e4c                 |  '  
07e4c     02 16 0F F2 |                 cmp zoom, #%10 wz   '256 colors, zoom x4
07e50     25 0C 07 A6 |                 if_z mov skippattern,#%100101
07e54                 |     
07e54                 |  
07e54     05 0C 07 56 |                 if_nz mov skippattern,#%000101
07e58     01 0E 47 50 |                 if_nz shr cpl2,#1         ' if 8x zoom, 2 xconts used in one loop, so divide loop count by 2
07e5c                 |         
07e5c                 | 
07e5c                 |         
07e5c     7D 11 03 FB | p235               rdlong  char,framebuf2
07e60     32 0C 63 FD |                    skipf skippattern
07e64     02 FA 06 F1 |                    add     framebuf2,#2             '0 1 1
07e68     01 FA 06 F1 |                    add     framebuf2,#1             '1 0 0
07e6c     50 10 FF F9 |                    movbyts char,#%01010000          '0 1 1
07e70     00 10 FF F9 |                    movbyts char,#%00000000          '1 0 0
07e74     88 BB C2 FC |                    xcont   m_lut2,char              '0 0 0
07e78     88 BB C2 FC |                    xcont   m_lut2,char              '1 1 0
07e7c     F7 0F 6F FB |                    djnz    cpl2,#p235
07e80                 | 
07e80     20 01 90 FD |                jmp    #p203
07e84                 |                   
07e84                 | 
07e84                 | 
07e84                 | '' --- 1 bit color modes
07e84                 | 
07e84     00 16 0F F2 | p240          cmp zoom, #%00 wz     '2 colors, zoom x1
07e88     08 01 90 AD |        if_z   jmp #p251              'there is an universal loop for 1x zoom at p251, saves one long of skip pattern
07e8c                 | 
07e8c     01 16 0F F2 |               cmp zoom, #%01 wz     '2 colors, zoom x2
07e90     13 0C 07 A6 |        if_z   mov skippattern,#%10011
07e94     08 0C 07 56 |        if_nz  mov skippattern,#%01000
07e98                 | 
07e98                 | 
07e98     7D 11 E3 FA | p241               rdword  char,framebuf2
07e9c     44 10 FF F9 |                    movbyts char,#%01000100
07ea0     63 10 63 FD |                    mergew  char
07ea4     32 0C 63 FD |                    skipf skippattern
07ea8     44 10 FF F9 |                    movbyts char,#%01000100         ' 1 0
07eac     63 10 63 FD |                    mergew  char                    ' 1 0
07eb0     88 BB C2 FC |                    xcont   m_lut2,char             ' 0 0
07eb4     02 FA 06 F1 |                    add     framebuf2,#2                    ' 0 1
07eb8     01 FA 06 F1 |                    add     framebuf2,#1                ' 1 0
07ebc     F6 0F 6F FB |                    djnz   cpl2,#p241
07ec0                 | 
07ec0                 | 
07ec0     E0 00 90 FD |                jmp    #p203
07ec4                 | 
07ec4                 | '' --- 2 bit color modes
07ec4                 | 
07ec4     00 16 0F F2 | p250          cmp zoom, #%00 wz     '4 colors, zoom x1
07ec8     C8 00 90 AD |        if_z   jmp #p251
07ecc                 | 
07ecc     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
07ed0     30 00 90 AD |        if_z   jmp #p252
07ed4                 | 
07ed4                 | 
07ed4     7D 11 C3 FA | p254               rdbyte char,framebuf2
07ed8     04 0A 07 F6 |                    mov  t5,#4
07edc     02 10 67 F0 | p255               shl  char,#2
07ee0     88 03 53 F8 |                    getnib  t1,char,#2
07ee4     03 02 07 F5 |                    and     t1,#3
07ee8     55 02 07 FA |                    mul     t1,#$55
07eec     81 05 03 F9 |                    rolbyte  t2,t1,#0
07ef0     FA 0B 6F FB |                    djnz    t5,#p255
07ef4     82 BB C2 FC |                    xcont   m_lut2,t2
07ef8     01 FA 06 F1 |                    add     framebuf2,#1
07efc     F5 0F 6F FB |                    djnz    cpl2,#p254
07f00     A0 00 90 FD |                    jmp     #p203
07f04                 | 
07f04     7D 11 E3 FA | p252               rdword char,framebuf2
07f08     08 0A 07 F6 |                    mov  t5,#8
07f0c     02 10 67 F0 | p253               shl  char,#2
07f10     88 03 63 F8 |                    getnib  t1,char,#4
07f14     03 02 07 F5 |                    and     t1,#3
07f18     05 02 07 FA |                    mul     t1,#5
07f1c     81 05 83 F8 |                    rolnib  t2,t1,#0
07f20     FA 0B 6F FB |                    djnz    t5,#p253
07f24     82 BB C2 FC |                    xcont   m_lut2,t2
07f28     02 FA 06 F1 |                    add     framebuf2,#2
07f2c     F5 0F 6F FB |                    djnz    cpl2,#p252
07f30     70 00 90 FD |                    jmp     #p203
07f34                 | 
07f34                 | '' ------ 4 bit color modes
07f34                 | 
07f34     00 16 0F F2 | p260          cmp zoom, #%00 wz     '4 colors, zoom x1, the same loop as 2bpp
07f38     58 00 90 AD |        if_z   jmp #p251
07f3c                 | 
07f3c     01 16 0F F2 |               cmp zoom, #%01 wz     '4 colors, zoom x2
07f40     2C 00 90 AD |        if_z   jmp #p262
07f44                 | 
07f44                 | 
07f44     7D 11 C3 FA | p263               rdbyte char,framebuf2
07f48     02 0A DC FC |                            rep #5,#2
07f4c     88 05 8B F8 |                              rolnib t2,char,#1
07f50     88 05 8B F8 |                                  rolnib t2,char,#1
07f54     88 05 8B F8 |                              rolnib t2,char,#1
07f58     88 05 8B F8 |                                  rolnib t2,char,#1
07f5c     04 10 67 F0 |                              shl char,#4
07f60     82 BB C2 FC |                    xcont   m_lut2,t2
07f64     01 FA 06 F1 |                    add     framebuf2,#1
07f68     F6 0F 6F FB |                    djnz    cpl2,#p263
07f6c     34 00 90 FD |                    jmp     #p203
07f70                 | 
07f70     7D 11 E3 FA | p262               rdword  char,framebuf2
07f74     04 06 DC FC |                            rep #3,#4
07f78     88 05 9B F8 |                              rolnib t2,char,#3
07f7c     88 05 9B F8 |                                  rolnib t2,char,#3
07f80     04 10 67 F0 |                              shl char,#4
07f84     82 BB C2 FC |                    xcont   m_lut2,t2
07f88     02 FA 06 F1 |                    add     framebuf2,#2
07f8c     F8 0F 6F FB |                    djnz    cpl2,#p262
07f90     10 00 90 FD |                    jmp     #p203
07f94                 | 
07f94                 | ''---------- all color modes without zoom
07f94                 | 
07f94     87 07 D8 FC | p251               rep  #3,cpl2
07f98     7D 11 03 FB |                    rdlong  char,framebuf2
07f9c     04 FA 06 F1 |                    add     framebuf2,#4
07fa0     88 BB C2 FC |                    xcont   m_lut2,char
07fa4                 |           
07fa4                 |  ''-----------------------------------------------------------------------------------------
07fa4                 | p203           ' getword  mb2,m_border,#0
07fa4     00 24 0F F2 |                 cmp      mb2, #0 wz
07fa8     4C A3 C2 5C |                 if_nz    xcont   m_border,border            'display a right border if exists
07fac                 | 
07fac     EC FB 9F FD |                 jmp #p302
07fb0                 | 
07fb0                 | '' -------------------------------------- END of graph  line ---------------------------------
07fb0                 | 
07fb0                 | '' consts and vars
07fb0                 | 
07fb0     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
07fb4     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
07fb8     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
07fbc     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
07fc0                 | 
07fc0     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
07fc4                 | 
07fc4                 | '------ these longs will be set by setmode function
07fc4                 | 
07fc4     00 00 00 00 | m_bs            long    0        'blanks before sync
07fc8     00 00 00 00 | m_sn            long    0        'sync
07fcc     00 00 00 00 | m_bv            long    0        'blanks before visible
07fd0     00 00 00 00 | m_vi            long    0        'visible pixels #
07fd4     00 00 00 00 | m_border        long    0        'left/right borders
07fd8     00 00 00 00 | m_lut1          long    0        'characters
07fdc     00 00 00 00 | i_vborder       long    0        'up/down borders
07fe0     00 00 00 00 | i_upporch       long    0        'up porch lines
07fe4     00 00 00 00 | i_vsync         long    0        'vsync lines
07fe8     00 00 00 00 | i_downporch     long    0        'down porch lines
07fec     00 00 00 00 | i_modenum       long    0        'mode #
07ff0     00 00 00 00 | i_cpl           long    0        'chars/longs per line
07ff4     00 00 00 00 | i_lines         long    0        'scanlines #
07ff8     00 00 00 00 | i_clock         long    0
07ffc     00 00 00 00 | i_hubset        long    0
08000     00 00 00 00 | i_totalvis      long    0
08004                 | 
08004                 | '-------------------------------------
08004                 | 
08004     00 00 00 00 | m_lut2          long    0
08008                 | 
08008                 | colordepth
08008     00 00 00 00 | linestart       long    0
0800c     00 00 00 00 | linenum         long    0
08010     00 01 00 00 | lutaddr         long    256
08014                 | 
08014     0E 00 00 00 | cursorsh        long    14
08018     00 00 00 00 | frames          long    0
0801c     00 00 00 00 | cursorx         long    0
08020     00 00 00 00 | cursory         long    0
08024     00 00 00 00 | cursorpos       long    0
08028     00 00 00 00 | cursorpos2      long    0
0802c     00 00 00 00 | fontstart       long    0
08030     00 00 00 00 | border2         long 0
08034     00 00 81 70 | lutiv           long $70810000
08038     00 00 88 00 | lutt1           long $00880000
0803c     00 00 80 00 | lutg1           long $00800000
08040     00 00 80 10 | lutg2           long $10800000
08044     00 00 80 20 | lutg4           long $20800000
08048     00 00 80 30 | lutg8           long $30800000
0804c     00 00 00 00 | framebuf        long 0
08050     00 00 00 00 | fontbuf         long 0
08054     00 00 00 00 | borderptr       long 0
08058     00 00 00 00 | vblankptr       long 0
0805c     00 00 00 00 | cursorptr       long 0
08060     00 00 00 00 | modeptr         long 0
08064     00 00 00 00 | paletteptr      long 0
08068     00 00 00 00 | dlptr           long 0
0806c                 | fontnumptr      res     1
0806c                 | fontnumptr      res     1
0806c                 | hbase           res     1
0806c                 | hbase           res     1
0806c                 | borderptr2      res     1
0806c                 | borderptr2      res     1
0806c                 | dlptr2 res 1
0806c                 | dlptr2 res 1
0806c                 | dl              res 1
0806c                 | dl              res 1
0806c                 | ii              res     1
0806c                 | ii              res     1
0806c                 | framebuf2       res     1
0806c                 | framebuf2       res     1
0806c                 | hsync0          res     1
0806c                 | hsync0          res     1
0806c                 | hsync1          res     1
0806c                 | hsync1          res     1
0806c                 | fontline        res     1
0806c                 | fontline        res     1
0806c                 | t1              res     1
0806c                 | t1              res     1
0806c                 | t2              res     1
0806c                 | t2              res     1
0806c                 | t3 res 1
0806c                 | t3 res 1
0806c                 | t4 res 1
0806c                 | t4 res 1
0806c                 | t5 res 1
0806c                 | t5 res 1
0806c                 | skippattern res 1
0806c                 | skippattern res 1
0806c                 | cpl2 res 1
0806c                 | cpl2 res 1
0806c                 | char            res     1
0806c                 | char            res     1
0806c                 | backcolor       res     1
0806c                 | backcolor       res     1
0806c                 | charcolor       res     1
0806c                 | charcolor       res     1
0806c                 | zoom res 1
0806c                 | zoom res 1
0806c     00 00 00 00 | rcnt long 0 'dl repeat count
08070     00 00 00 00 | rcnt2 long 0
08074     00 00 00 00 | rcnt2a long 0
08078     00 00 00 00 | roffset long 0
0807c     00 00 00 00 | rdl long 0  'dl repeat line
08080     00 00 00 00 | dlc long 0 'dl command
08084     00 00 00 00 | mb2 long 0
08088     00 00 00 00 | aend             long 0
0808c                 |                 fit     496                     '
0808c                 | __system__dat_
0808c     00 00 00 00 
08090     00 00 00 00 | 	byte	$00[8]
08094     03 00 00 00 
08098     00 00 00 00 
0809c     00 00 00 00 
080a0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
080a4     00 00 00 00 
080a8     00 00 00 00 
080ac     00 00 00 00 | 	byte	$00[12]
080b0     05 00 00 00 
080b4     00 00 00 00 
080b8     00 00 00 00 
080bc     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
080c0     88 82 00 00 | 	long	@@@__system__dat_ + 508
080c4     90 82 00 00 | 	long	@@@__system__dat_ + 516
080c8     00 00 00 00 | 	byte	$00, $00, $00, $00
080cc     98 82 00 00 | 	long	@@@__system__dat_ + 524
080d0     A0 82 00 00 | 	long	@@@__system__dat_ + 532
080d4     00 00 00 00 
080d8     00 00 00 00 | 	byte	$00[8]
080dc     01 00 00 00 
080e0     06 00 00 00 
080e4     00 00 00 00 
080e8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
080ec     00 00 00 00 | 	byte	$00, $00, $00, $00
080f0     A8 82 00 00 | 	long	@@@__system__dat_ + 540
080f4     B0 82 00 00 | 	long	@@@__system__dat_ + 548
080f8     00 00 00 00 | 	byte	$00, $00, $00, $00
080fc     B8 82 00 00 | 	long	@@@__system__dat_ + 556
08100     C0 82 00 00 | 	long	@@@__system__dat_ + 564
08104     00 00 00 00 
08108     00 00 00 00 | 	byte	$00[8]
0810c     01 00 00 00 
08110     06 00 00 00 
08114     00 00 00 00 
08118     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0811c     00 00 00 00 | 	byte	$00, $00, $00, $00
08120     C8 82 00 00 | 	long	@@@__system__dat_ + 572
08124     D0 82 00 00 | 	long	@@@__system__dat_ + 580
08128     00 00 00 00 | 	byte	$00, $00, $00, $00
0812c     D8 82 00 00 | 	long	@@@__system__dat_ + 588
08130     E0 82 00 00 | 	long	@@@__system__dat_ + 596
08134     00 00 00 00 
      ...             
08284     00 00 00 00 
08288     00 00 00 00 | 	byte	$00[344]
0828c     5C 38 00 00 | 	long	@@@__system___tx
08290     00 00 00 00 | 	byte	$00, $00, $00, $00
08294     A4 38 00 00 | 	long	@@@__system___rx
08298     00 00 00 00 | 	byte	$00, $00, $00, $00
0829c     80 52 00 00 | 	long	@@@__system___rxtxioctl_0131
082a0     00 00 00 00 | 	byte	$00, $00, $00, $00
082a4     F8 52 00 00 | 	long	@@@__system____dummy_flush_0132
082a8     00 00 00 00 | 	byte	$00, $00, $00, $00
082ac     5C 38 00 00 | 	long	@@@__system___tx
082b0     00 00 00 00 | 	byte	$00, $00, $00, $00
082b4     A4 38 00 00 | 	long	@@@__system___rx
082b8     00 00 00 00 | 	byte	$00, $00, $00, $00
082bc     80 52 00 00 | 	long	@@@__system___rxtxioctl_0131
082c0     00 00 00 00 | 	byte	$00, $00, $00, $00
082c4     F8 52 00 00 | 	long	@@@__system____dummy_flush_0132
082c8     00 00 00 00 | 	byte	$00, $00, $00, $00
082cc     5C 38 00 00 | 	long	@@@__system___tx
082d0     00 00 00 00 | 	byte	$00, $00, $00, $00
082d4     A4 38 00 00 | 	long	@@@__system___rx
082d8     00 00 00 00 | 	byte	$00, $00, $00, $00
082dc     80 52 00 00 | 	long	@@@__system___rxtxioctl_0131
082e0     00 00 00 00 | 	byte	$00, $00, $00, $00
082e4     F8 52 00 00 | 	long	@@@__system____dummy_flush_0132
082e8     00 00 00 00 | 	byte	$00, $00, $00, $00
082ec                 | __heap_base
082ec     00 00 00 00 
      ...             
092ec     00 00 00 00 
092f0     00 00 00 00 | 	long	0[1026]
092f4                 | objmem
092f4     00 00 00 00 
      ...             
0978c     00 00 00 00 
09790     00 00 00 00 | 	long	0[296]
09794                 | stackspace
09794     00 00 00 00 | 	long	0[1]
09798 116             | 	org	COG_BSS_START
09798 116             | _var01
09798 116             | 	res	1
09798 117             | _var02
09798 117             | 	res	1
09798 118             | _var03
09798 118             | 	res	1
09798 119             | _var04
09798 119             | 	res	1
09798 11a             | _var05
09798 11a             | 	res	1
09798 11b             | _var06
09798 11b             | 	res	1
09798 11c             | _var07
09798 11c             | 	res	1
09798 11d             | _var08
09798 11d             | 	res	1
09798 11e             | _var09
09798 11e             | 	res	1
09798 11f             | _var10
09798 11f             | 	res	1
09798 120             | _var11
09798 120             | 	res	1
09798 121             | _var12
09798 121             | 	res	1
09798 122             | _var13
09798 122             | 	res	1
09798 123             | _var14
09798 123             | 	res	1
09798 124             | _var15
09798 124             | 	res	1
09798 125             | _var16
09798 125             | 	res	1
09798 126             | _var17
09798 126             | 	res	1
09798 127             | _var18
09798 127             | 	res	1
09798 128             | _var19
09798 128             | 	res	1
09798 129             | _var20
09798 129             | 	res	1
09798 12a             | _var21
09798 12a             | 	res	1
09798 12b             | _var22
09798 12b             | 	res	1
09798 12c             | _var23
09798 12c             | 	res	1
09798 12d             | _var24
09798 12d             | 	res	1
09798 12e             | _var25
09798 12e             | 	res	1
09798 12f             | _var26
09798 12f             | 	res	1
09798 130             | _var27
09798 130             | 	res	1
09798 131             | _var28
09798 131             | 	res	1
09798 132             | _var29
09798 132             | 	res	1
09798 133             | _var30
09798 133             | 	res	1
09798 134             | _var31
09798 134             | 	res	1
09798 135             | _var32
09798 135             | 	res	1
09798 136             | arg01
09798 136             | 	res	1
09798 137             | arg02
09798 137             | 	res	1
09798 138             | arg03
09798 138             | 	res	1
09798 139             | arg04
09798 139             | 	res	1
09798 13a             | arg05
09798 13a             | 	res	1
09798 13b             | local01
09798 13b             | 	res	1
09798 13c             | local02
09798 13c             | 	res	1
09798 13d             | local03
09798 13d             | 	res	1
09798 13e             | local04
09798 13e             | 	res	1
09798 13f             | local05
09798 13f             | 	res	1
09798 140             | local06
09798 140             | 	res	1
09798 141             | local07
09798 141             | 	res	1
09798 142             | local08
09798 142             | 	res	1
09798 143             | local09
09798 143             | 	res	1
09798 144             | local10
09798 144             | 	res	1
09798 145             | local11
09798 145             | 	res	1
09798 146             | local12
09798 146             | 	res	1
09798 147             | local13
09798 147             | 	res	1
09798 148             | local14
09798 148             | 	res	1
09798 149             | local15
09798 149             | 	res	1
09798 14a             | local16
09798 14a             | 	res	1
09798 14b             | local17
09798 14b             | 	res	1
09798 14c             | local18
09798 14c             | 	res	1
09798 14d             | local19
09798 14d             | 	res	1
09798 14e             | local20
09798 14e             | 	res	1
09798 14f             | local21
09798 14f             | 	res	1
09798 150             | local22
09798 150             | 	res	1
09798 151             | local23
09798 151             | 	res	1
09798 152             | local24
09798 152             | 	res	1
09798 153             | local25
09798 153             | 	res	1
09798 154             | local26
09798 154             | 	res	1
09798 155             | local27
09798 155             | 	res	1
09798 156             | local28
09798 156             | 	res	1
09798 157             | local29
09798 157             | 	res	1
09798 158             | local30
09798 158             | 	res	1
09798 159             | local31
09798 159             | 	res	1
09798 15a             | local32
09798 15a             | 	res	1
09798 15b             | local33
09798 15b             | 	res	1
09798 15c             | local34
09798 15c             | 	res	1
09798 15d             | local35
09798 15d             | 	res	1
09798 15e             | local36
09798 15e             | 	res	1
09798 15f             | local37
09798 15f             | 	res	1
09798 160             | local38
09798 160             | 	res	1
09798 161             | local39
09798 161             | 	res	1
09798 162             | local40
09798 162             | 	res	1
09798 163             | local41
09798 163             | 	res	1
09798 164             | local42
09798 164             | 	res	1
09798 165             | muldiva_
09798 165             | 	res	1
09798 166             | muldivb_
09798 166             | 	res	1
09798 167             | 	fit	480
09798 167             | 
